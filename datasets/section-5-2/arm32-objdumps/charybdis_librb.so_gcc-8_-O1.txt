
../repos/charybdis/librb/src/.libs/librb.so:     file format elf32-littlearm


Disassembly of section .init:

000042f8 <_init>:
    42f8:	push	{r3, lr}
    42fc:	bl	4cd0 <call_weak_fn>
    4300:	pop	{r3, pc}

Disassembly of section .plt:

00004304 <.plt>:
    4304:	push	{lr}		; (str lr, [sp, #-4]!)
    4308:	ldr	lr, [pc, #4]	; 4314 <.plt+0x10>
    430c:	add	lr, pc, lr
    4310:	ldr	pc, [lr, #8]!
    4314:	.word	0x00024cec

00004318 <rb_helper_run@plt>:
    4318:	add	ip, pc, #0, 12
    431c:	add	ip, ip, #36, 20	; 0x24000
    4320:	ldr	pc, [ip, #3308]!	; 0xcec

00004324 <TLS_method@plt>:
    4324:	add	ip, pc, #0, 12
    4328:	add	ip, ip, #36, 20	; 0x24000
    432c:	ldr	pc, [ip, #3300]!	; 0xce4

00004330 <open@plt>:
    4330:	add	ip, pc, #0, 12
    4334:	add	ip, ip, #36, 20	; 0x24000
    4338:	ldr	pc, [ip, #3292]!	; 0xcdc

0000433c <rb_init_netio@plt>:
    433c:	add	ip, pc, #0, 12
    4340:	add	ip, ip, #36, 20	; 0x24000
    4344:	ldr	pc, [ip, #3284]!	; 0xcd4

00004348 <sigemptyset@plt>:
    4348:	add	ip, pc, #0, 12
    434c:	add	ip, ip, #36, 20	; 0x24000
    4350:	ldr	pc, [ip, #3276]!	; 0xccc

00004354 <strerror@plt>:
    4354:	add	ip, pc, #0, 12
    4358:	add	ip, ip, #36, 20	; 0x24000
    435c:	ldr	pc, [ip, #3268]!	; 0xcc4

00004360 <rb_radixtree_elem_delete@plt>:
    4360:	add	ip, pc, #0, 12
    4364:	add	ip, ip, #36, 20	; 0x24000
    4368:	ldr	pc, [ip, #3260]!	; 0xcbc

0000436c <getdtablesize@plt>:
    436c:	add	ip, pc, #0, 12
    4370:	add	ip, ip, #36, 20	; 0x24000
    4374:	ldr	pc, [ip, #3252]!	; 0xcb4

00004378 <abort@plt>:
    4378:	add	ip, pc, #0, 12
    437c:	add	ip, ip, #36, 20	; 0x24000
    4380:	ldr	pc, [ip, #3244]!	; 0xcac

00004384 <connect@plt>:
    4384:	add	ip, pc, #0, 12
    4388:	add	ip, ip, #36, 20	; 0x24000
    438c:	ldr	pc, [ip, #3236]!	; 0xca4

00004390 <rb_ignore_errno@plt>:
    4390:	add	ip, pc, #0, 12
    4394:	add	ip, ip, #36, 20	; 0x24000
    4398:	ldr	pc, [ip, #3228]!	; 0xc9c

0000439c <rb_settimeout@plt>:
    439c:	add	ip, pc, #0, 12
    43a0:	add	ip, ip, #36, 20	; 0x24000
    43a4:	ldr	pc, [ip, #3220]!	; 0xc94

000043a8 <SSL_CTX_set_cipher_list@plt>:
    43a8:	add	ip, pc, #0, 12
    43ac:	add	ip, ip, #36, 20	; 0x24000
    43b0:	ldr	pc, [ip, #3212]!	; 0xc8c

000043b4 <ERR_get_error@plt>:
    43b4:	add	ip, pc, #0, 12
    43b8:	add	ip, ip, #36, 20	; 0x24000
    43bc:	ldr	pc, [ip, #3204]!	; 0xc84

000043c0 <rb_radixtree_foreach_start@plt>:
    43c0:	add	ip, pc, #0, 12
    43c4:	add	ip, ip, #36, 20	; 0x24000
    43c8:	ldr	pc, [ip, #3196]!	; 0xc7c

000043cc <strcasestr@plt>:
    43cc:	add	ip, pc, #0, 12
    43d0:	add	ip, ip, #36, 20	; 0x24000
    43d4:	ldr	pc, [ip, #3188]!	; 0xc74

000043d8 <rb_connect_tcp@plt>:
    43d8:	add	ip, pc, #0, 12
    43dc:	add	ip, ip, #36, 20	; 0x24000
    43e0:	ldr	pc, [ip, #3180]!	; 0xc6c

000043e4 <RAND_load_file@plt>:
    43e4:	add	ip, pc, #0, 12
    43e8:	add	ip, ip, #36, 20	; 0x24000
    43ec:	ldr	pc, [ip, #3172]!	; 0xc64

000043f0 <signalfd@plt>:
    43f0:	add	ip, pc, #0, 12
    43f4:	add	ip, ip, #36, 20	; 0x24000
    43f8:	ldr	pc, [ip, #3164]!	; 0xc5c

000043fc <rb_radixtree_foreach_next@plt>:
    43fc:	add	ip, pc, #0, 12
    4400:	add	ip, ip, #36, 20	; 0x24000
    4404:	ldr	pc, [ip, #3156]!	; 0xc54

00004408 <memcmp@plt>:
    4408:	add	ip, pc, #0, 12
    440c:	add	ip, ip, #36, 20	; 0x24000
    4410:	ldr	pc, [ip, #3148]!	; 0xc4c

00004414 <SSL_CTX_free@plt>:
    4414:	add	ip, pc, #0, 12
    4418:	add	ip, ip, #36, 20	; 0x24000
    441c:	ldr	pc, [ip, #3140]!	; 0xc44

00004420 <rb_getmaxconnect@plt>:
    4420:	add	ip, pc, #0, 12
    4424:	add	ip, ip, #36, 20	; 0x24000
    4428:	ldr	pc, [ip, #3132]!	; 0xc3c

0000442c <sigwaitinfo@plt>:
    442c:	add	ip, pc, #0, 12
    4430:	add	ip, ip, #36, 20	; 0x24000
    4434:	ldr	pc, [ip, #3124]!	; 0xc34

00004438 <__libc_current_sigrtmin@plt>:
    4438:	add	ip, pc, #0, 12
    443c:	add	ip, ip, #36, 20	; 0x24000
    4440:	ldr	pc, [ip, #3116]!	; 0xc2c

00004444 <__xstat@plt>:
    4444:	add	ip, pc, #0, 12
    4448:	add	ip, ip, #36, 20	; 0x24000
    444c:	ldr	pc, [ip, #3108]!	; 0xc24

00004450 <rb_event_delete@plt>:
    4450:	add	ip, pc, #0, 12
    4454:	add	ip, ip, #36, 20	; 0x24000
    4458:	ldr	pc, [ip, #3100]!	; 0xc1c

0000445c <rb_setselect@plt>:
    445c:	add	ip, pc, #0, 12
    4460:	add	ip, ip, #36, 20	; 0x24000
    4464:	ldr	pc, [ip, #3092]!	; 0xc14

00004468 <rb_fd_ssl@plt>:
    4468:	add	ip, pc, #0, 12
    446c:	add	ip, ip, #36, 20	; 0x24000
    4470:	ldr	pc, [ip, #3084]!	; 0xc0c

00004474 <sigtimedwait@plt>:
    4474:	add	ip, pc, #0, 12
    4478:	add	ip, ip, #36, 20	; 0x24000
    447c:	ldr	pc, [ip, #3076]!	; 0xc04

00004480 <rb_setenv@plt>:
    4480:	add	ip, pc, #0, 12
    4484:	add	ip, ip, #36, 20	; 0x24000
    4488:	ldr	pc, [ip, #3068]!	; 0xbfc

0000448c <signal@plt>:
    448c:	add	ip, pc, #0, 12
    4490:	add	ip, ip, #36, 20	; 0x24000
    4494:	ldr	pc, [ip, #3060]!	; 0xbf4

00004498 <rb_get_fd@plt>:
    4498:	add	ip, pc, #0, 12
    449c:	add	ip, ip, #36, 20	; 0x24000
    44a0:	ldr	pc, [ip, #3052]!	; 0xbec

000044a4 <epoll_create@plt>:
    44a4:	add	ip, pc, #0, 12
    44a8:	add	ip, ip, #36, 20	; 0x24000
    44ac:	ldr	pc, [ip, #3044]!	; 0xbe4

000044b0 <rb_clear_patricia@plt>:
    44b0:	add	ip, pc, #0, 12
    44b4:	add	ip, ip, #36, 20	; 0x24000
    44b8:	ldr	pc, [ip, #3036]!	; 0xbdc

000044bc <__gmon_start__@plt>:
    44bc:	add	ip, pc, #0, 12
    44c0:	add	ip, ip, #36, 20	; 0x24000
    44c4:	ldr	pc, [ip, #3028]!	; 0xbd4

000044c8 <SSL_CTX_clear_options@plt>:
    44c8:	add	ip, pc, #0, 12
    44cc:	add	ip, ip, #36, 20	; 0x24000
    44d0:	ldr	pc, [ip, #3020]!	; 0xbcc

000044d4 <SSL_get_current_cipher@plt>:
    44d4:	add	ip, pc, #0, 12
    44d8:	add	ip, ip, #36, 20	; 0x24000
    44dc:	ldr	pc, [ip, #3012]!	; 0xbc4

000044e0 <timer_create@plt>:
    44e0:	add	ip, pc, #0, 12
    44e4:	add	ip, ip, #36, 20	; 0x24000
    44e8:	ldr	pc, [ip, #3004]!	; 0xbbc

000044ec <X509_get_X509_PUBKEY@plt>:
    44ec:	add	ip, pc, #0, 12
    44f0:	add	ip, ip, #36, 20	; 0x24000
    44f4:	ldr	pc, [ip, #2996]!	; 0xbb4

000044f8 <rb_select@plt>:
    44f8:	add	ip, pc, #0, 12
    44fc:	add	ip, ip, #36, 20	; 0x24000
    4500:	ldr	pc, [ip, #2988]!	; 0xbac

00004504 <rb_patricia_search_best@plt>:
    4504:	add	ip, pc, #0, 12
    4508:	add	ip, ip, #36, 20	; 0x24000
    450c:	ldr	pc, [ip, #2980]!	; 0xba4

00004510 <vsnprintf@plt>:
    4510:	add	ip, pc, #0, 12
    4514:	add	ip, ip, #36, 20	; 0x24000
    4518:	ldr	pc, [ip, #2972]!	; 0xb9c

0000451c <socketpair@plt>:
    451c:	add	ip, pc, #0, 12
    4520:	add	ip, ip, #36, 20	; 0x24000
    4524:	ldr	pc, [ip, #2964]!	; 0xb94

00004528 <strncpy@plt>:
    4528:	add	ip, pc, #0, 12
    452c:	add	ip, ip, #36, 20	; 0x24000
    4530:	ldr	pc, [ip, #2956]!	; 0xb8c

00004534 <fclose@plt>:
    4534:	add	ip, pc, #0, 12
    4538:	add	ip, ip, #36, 20	; 0x24000
    453c:	ldr	pc, [ip, #2948]!	; 0xb84

00004540 <recv@plt>:
    4540:	add	ip, pc, #0, 12
    4544:	add	ip, ip, #36, 20	; 0x24000
    4548:	ldr	pc, [ip, #2940]!	; 0xb7c

0000454c <getenv@plt>:
    454c:	add	ip, pc, #0, 12
    4550:	add	ip, ip, #36, 20	; 0x24000
    4554:	ldr	pc, [ip, #2932]!	; 0xb74

00004558 <ERR_error_string_n@plt>:
    4558:	add	ip, pc, #0, 12
    455c:	add	ip, ip, #36, 20	; 0x24000
    4560:	ldr	pc, [ip, #2924]!	; 0xb6c

00004564 <strchr@plt>:
    4564:	add	ip, pc, #0, 12
    4568:	add	ip, ip, #36, 20	; 0x24000
    456c:	ldr	pc, [ip, #2916]!	; 0xb64

00004570 <rb_gettimeofday@plt>:
    4570:	add	ip, pc, #0, 12
    4574:	add	ip, ip, #36, 20	; 0x24000
    4578:	ldr	pc, [ip, #2908]!	; 0xb5c

0000457c <strcasecmp@plt>:
    457c:	add	ip, pc, #0, 12
    4580:	add	ip, ip, #36, 20	; 0x24000
    4584:	ldr	pc, [ip, #2900]!	; 0xb54

00004588 <rb_helper_restart@plt>:
    4588:	add	ip, pc, #0, 12
    458c:	add	ip, ip, #36, 20	; 0x24000
    4590:	ldr	pc, [ip, #2892]!	; 0xb4c

00004594 <listen@plt>:
    4594:	add	ip, pc, #0, 12
    4598:	add	ip, ip, #36, 20	; 0x24000
    459c:	ldr	pc, [ip, #2884]!	; 0xb44

000045a0 <calloc@plt>:
    45a0:	add	ip, pc, #0, 12
    45a4:	add	ip, ip, #36, 20	; 0x24000
    45a8:	ldr	pc, [ip, #2876]!	; 0xb3c

000045ac <SSL_write@plt>:
    45ac:	add	ip, pc, #0, 12
    45b0:	add	ip, ip, #36, 20	; 0x24000
    45b4:	ldr	pc, [ip, #2868]!	; 0xb34

000045b8 <rb_event_init@plt>:
    45b8:	add	ip, pc, #0, 12
    45bc:	add	ip, ip, #36, 20	; 0x24000
    45c0:	ldr	pc, [ip, #2860]!	; 0xb2c

000045c4 <fopen@plt>:
    45c4:	add	ip, pc, #0, 12
    45c8:	add	ip, ip, #36, 20	; 0x24000
    45cc:	ldr	pc, [ip, #2852]!	; 0xb24

000045d0 <rb_set_nb@plt>:
    45d0:	add	ip, pc, #0, 12
    45d4:	add	ip, ip, #36, 20	; 0x24000
    45d8:	ldr	pc, [ip, #2844]!	; 0xb1c

000045dc <memset@plt>:
    45dc:	add	ip, pc, #0, 12
    45e0:	add	ip, ip, #36, 20	; 0x24000
    45e4:	ldr	pc, [ip, #2836]!	; 0xb14

000045e8 <rb_inet_pton@plt>:
    45e8:	add	ip, pc, #0, 12
    45ec:	add	ip, ip, #36, 20	; 0x24000
    45f0:	ldr	pc, [ip, #2828]!	; 0xb0c

000045f4 <rb_radixtree_stats@plt>:
    45f4:	add	ip, pc, #0, 12
    45f8:	add	ip, ip, #36, 20	; 0x24000
    45fc:	ldr	pc, [ip, #2820]!	; 0xb04

00004600 <strrchr@plt>:
    4600:	add	ip, pc, #0, 12
    4604:	add	ip, ip, #36, 20	; 0x24000
    4608:	ldr	pc, [ip, #2812]!	; 0xafc

0000460c <rb_write@plt>:
    460c:	add	ip, pc, #0, 12
    4610:	add	ip, ip, #36, 20	; 0x24000
    4614:	ldr	pc, [ip, #2804]!	; 0xaf4

00004618 <SSL_set_fd@plt>:
    4618:	add	ip, pc, #0, 12
    461c:	add	ip, ip, #36, 20	; 0x24000
    4620:	ldr	pc, [ip, #2796]!	; 0xaec

00004624 <SSL_CTX_ctrl@plt>:
    4624:	add	ip, pc, #0, 12
    4628:	add	ip, ip, #36, 20	; 0x24000
    462c:	ldr	pc, [ip, #2788]!	; 0xae4

00004630 <rb_linebuf_parse@plt>:
    4630:	add	ip, pc, #0, 12
    4634:	add	ip, ip, #36, 20	; 0x24000
    4638:	ldr	pc, [ip, #2780]!	; 0xadc

0000463c <writev@plt>:
    463c:	add	ip, pc, #0, 12
    4640:	add	ip, ip, #36, 20	; 0x24000
    4644:	ldr	pc, [ip, #2772]!	; 0xad4

00004648 <rb_fsnprint@plt>:
    4648:	add	ip, pc, #0, 12
    464c:	add	ip, ip, #36, 20	; 0x24000
    4650:	ldr	pc, [ip, #2764]!	; 0xacc

00004654 <rb_strlcpy@plt>:
    4654:	add	ip, pc, #0, 12
    4658:	add	ip, ip, #36, 20	; 0x24000
    465c:	ldr	pc, [ip, #2756]!	; 0xac4

00004660 <rb_patricia_search_best2@plt>:
    4660:	add	ip, pc, #0, 12
    4664:	add	ip, ip, #36, 20	; 0x24000
    4668:	ldr	pc, [ip, #2748]!	; 0xabc

0000466c <SSL_CIPHER_get_name@plt>:
    466c:	add	ip, pc, #0, 12
    4670:	add	ip, ip, #36, 20	; 0x24000
    4674:	ldr	pc, [ip, #2740]!	; 0xab4

00004678 <posix_spawnattr_init@plt>:
    4678:	add	ip, pc, #0, 12
    467c:	add	ip, ip, #36, 20	; 0x24000
    4680:	ldr	pc, [ip, #2732]!	; 0xaac

00004684 <OpenSSL_version_num@plt>:
    4684:	add	ip, pc, #0, 12
    4688:	add	ip, ip, #36, 20	; 0x24000
    468c:	ldr	pc, [ip, #2724]!	; 0xaa4

00004690 <rb_dictionary_foreach_next@plt>:
    4690:	add	ip, pc, #0, 12
    4694:	add	ip, ip, #36, 20	; 0x24000
    4698:	ldr	pc, [ip, #2716]!	; 0xa9c

0000469c <rb_kill@plt>:
    469c:	add	ip, pc, #0, 12
    46a0:	add	ip, ip, #36, 20	; 0x24000
    46a4:	ldr	pc, [ip, #2708]!	; 0xa94

000046a8 <free@plt>:
    46a8:	add	ip, pc, #0, 12
    46ac:	add	ip, ip, #36, 20	; 0x24000
    46b0:	ldr	pc, [ip, #2700]!	; 0xa8c

000046b4 <sendmsg@plt>:
    46b4:	add	ip, pc, #0, 12
    46b8:	add	ip, ip, #36, 20	; 0x24000
    46bc:	ldr	pc, [ip, #2692]!	; 0xa84

000046c0 <read@plt>:
    46c0:	add	ip, pc, #0, 12
    46c4:	add	ip, ip, #36, 20	; 0x24000
    46c8:	ldr	pc, [ip, #2684]!	; 0xa7c

000046cc <rb_radixtree_elem_add@plt>:
    46cc:	add	ip, pc, #0, 12
    46d0:	add	ip, ip, #36, 20	; 0x24000
    46d4:	ldr	pc, [ip, #2676]!	; 0xa74

000046d8 <write@plt>:
    46d8:	add	ip, pc, #0, 12
    46dc:	add	ip, ip, #36, 20	; 0x24000
    46e0:	ldr	pc, [ip, #2668]!	; 0xa6c

000046e4 <SSL_new@plt>:
    46e4:	add	ip, pc, #0, 12
    46e8:	add	ip, ip, #36, 20	; 0x24000
    46ec:	ldr	pc, [ip, #2660]!	; 0xa64

000046f0 <access@plt>:
    46f0:	add	ip, pc, #0, 12
    46f4:	add	ip, ip, #36, 20	; 0x24000
    46f8:	ldr	pc, [ip, #2652]!	; 0xa5c

000046fc <rb_lib_loop@plt>:
    46fc:	add	ip, pc, #0, 12
    4700:	add	ip, ip, #36, 20	; 0x24000
    4704:	ldr	pc, [ip, #2644]!	; 0xa54

00004708 <timer_settime@plt>:
    4708:	add	ip, pc, #0, 12
    470c:	add	ip, ip, #36, 20	; 0x24000
    4710:	ldr	pc, [ip, #2636]!	; 0xa4c

00004714 <gettimeofday@plt>:
    4714:	add	ip, pc, #0, 12
    4718:	add	ip, ip, #36, 20	; 0x24000
    471c:	ldr	pc, [ip, #2628]!	; 0xa44

00004720 <accept@plt>:
    4720:	add	ip, pc, #0, 12
    4724:	add	ip, ip, #36, 20	; 0x24000
    4728:	ldr	pc, [ip, #2620]!	; 0xa3c

0000472c <SSL_read@plt>:
    472c:	add	ip, pc, #0, 12
    4730:	add	ip, ip, #36, 20	; 0x24000
    4734:	ldr	pc, [ip, #2612]!	; 0xa34

00004738 <rb_read@plt>:
    4738:	add	ip, pc, #0, 12
    473c:	add	ip, ip, #36, 20	; 0x24000
    4740:	ldr	pc, [ip, #2604]!	; 0xa2c

00004744 <socket@plt>:
    4744:	add	ip, pc, #0, 12
    4748:	add	ip, ip, #36, 20	; 0x24000
    474c:	ldr	pc, [ip, #2596]!	; 0xa24

00004750 <rb_linebuf_get@plt>:
    4750:	add	ip, pc, #0, 12
    4754:	add	ip, ip, #36, 20	; 0x24000
    4758:	ldr	pc, [ip, #2588]!	; 0xa1c

0000475c <rb_radixtree_foreach_cur@plt>:
    475c:	add	ip, pc, #0, 12
    4760:	add	ip, ip, #36, 20	; 0x24000
    4764:	ldr	pc, [ip, #2580]!	; 0xa14

00004768 <epoll_wait@plt>:
    4768:	add	ip, pc, #0, 12
    476c:	add	ip, ip, #36, 20	; 0x24000
    4770:	ldr	pc, [ip, #2572]!	; 0xa0c

00004774 <SSL_do_handshake@plt>:
    4774:	add	ip, pc, #0, 12
    4778:	add	ip, ip, #36, 20	; 0x24000
    477c:	ldr	pc, [ip, #2564]!	; 0xa04

00004780 <rb_linebuf_flush@plt>:
    4780:	add	ip, pc, #0, 12
    4784:	add	ip, ip, #36, 20	; 0x24000
    4788:	ldr	pc, [ip, #2556]!	; 0x9fc

0000478c <posix_spawn@plt>:
    478c:	add	ip, pc, #0, 12
    4790:	add	ip, ip, #36, 20	; 0x24000
    4794:	ldr	pc, [ip, #2548]!	; 0x9f4

00004798 <strlen@plt>:
    4798:	add	ip, pc, #0, 12
    479c:	add	ip, ip, #36, 20	; 0x24000
    47a0:	ldr	pc, [ip, #2540]!	; 0x9ec

000047a4 <rb_current_time@plt>:
    47a4:	add	ip, pc, #0, 12
    47a8:	add	ip, ip, #36, 20	; 0x24000
    47ac:	ldr	pc, [ip, #2532]!	; 0x9e4

000047b0 <strtoul@plt>:
    47b0:	add	ip, pc, #0, 12
    47b4:	add	ip, ip, #36, 20	; 0x24000
    47b8:	ldr	pc, [ip, #2524]!	; 0x9dc

000047bc <memcpy@plt>:
    47bc:	add	ip, pc, #0, 12
    47c0:	add	ip, ip, #36, 20	; 0x24000
    47c4:	ldr	pc, [ip, #2516]!	; 0x9d4

000047c8 <PEM_read_X509@plt>:
    47c8:	add	ip, pc, #0, 12
    47cc:	add	ip, ip, #36, 20	; 0x24000
    47d0:	ldr	pc, [ip, #2508]!	; 0x9cc

000047d4 <posix_spawnattr_setflags@plt>:
    47d4:	add	ip, pc, #0, 12
    47d8:	add	ip, ip, #36, 20	; 0x24000
    47dc:	ldr	pc, [ip, #2500]!	; 0x9c4

000047e0 <__ctype_tolower_loc@plt>:
    47e0:	add	ip, pc, #0, 12
    47e4:	add	ip, ip, #36, 20	; 0x24000
    47e8:	ldr	pc, [ip, #2492]!	; 0x9bc

000047ec <SSL_CTX_use_certificate_chain_file@plt>:
    47ec:	add	ip, pc, #0, 12
    47f0:	add	ip, ip, #36, 20	; 0x24000
    47f4:	ldr	pc, [ip, #2484]!	; 0x9b4

000047f8 <rb_free_rb_dlink_node@plt>:
    47f8:	add	ip, pc, #0, 12
    47fc:	add	ip, ip, #36, 20	; 0x24000
    4800:	ldr	pc, [ip, #2476]!	; 0x9ac

00004804 <SSL_CTX_set_options@plt>:
    4804:	add	ip, pc, #0, 12
    4808:	add	ip, ip, #36, 20	; 0x24000
    480c:	ldr	pc, [ip, #2468]!	; 0x9a4

00004810 <posix_spawnattr_destroy@plt>:
    4810:	add	ip, pc, #0, 12
    4814:	add	ip, ip, #36, 20	; 0x24000
    4818:	ldr	pc, [ip, #2460]!	; 0x99c

0000481c <rb_close@plt>:
    481c:	add	ip, pc, #0, 12
    4820:	add	ip, ip, #36, 20	; 0x24000
    4824:	ldr	pc, [ip, #2452]!	; 0x994

00004828 <strtol@plt>:
    4828:	add	ip, pc, #0, 12
    482c:	add	ip, ip, #36, 20	; 0x24000
    4830:	ldr	pc, [ip, #2444]!	; 0x98c

00004834 <sigaddset@plt>:
    4834:	add	ip, pc, #0, 12
    4838:	add	ip, ip, #36, 20	; 0x24000
    483c:	ldr	pc, [ip, #2436]!	; 0x984

00004840 <strcpy@plt>:
    4840:	add	ip, pc, #0, 12
    4844:	add	ip, ip, #36, 20	; 0x24000
    4848:	ldr	pc, [ip, #2428]!	; 0x97c

0000484c <waitpid@plt>:
    484c:	add	ip, pc, #0, 12
    4850:	add	ip, ip, #36, 20	; 0x24000
    4854:	ldr	pc, [ip, #2420]!	; 0x974

00004858 <rb_run_one_event@plt>:
    4858:	add	ip, pc, #0, 12
    485c:	add	ip, ip, #36, 20	; 0x24000
    4860:	ldr	pc, [ip, #2412]!	; 0x96c

00004864 <rb_patricia_search_exact@plt>:
    4864:	add	ip, pc, #0, 12
    4868:	add	ip, ip, #36, 20	; 0x24000
    486c:	ldr	pc, [ip, #2404]!	; 0x964

00004870 <strncat@plt>:
    4870:	add	ip, pc, #0, 12
    4874:	add	ip, ip, #36, 20	; 0x24000
    4878:	ldr	pc, [ip, #2396]!	; 0x95c

0000487c <rb_bh_free@plt>:
    487c:	add	ip, pc, #0, 12
    4880:	add	ip, ip, #36, 20	; 0x24000
    4884:	ldr	pc, [ip, #2388]!	; 0x954

00004888 <rb_init_rb_dlink_nodes@plt>:
    4888:	add	ip, pc, #0, 12
    488c:	add	ip, ip, #36, 20	; 0x24000
    4890:	ldr	pc, [ip, #2380]!	; 0x94c

00004894 <EVP_sha1@plt>:
    4894:	add	ip, pc, #0, 12
    4898:	add	ip, ip, #36, 20	; 0x24000
    489c:	ldr	pc, [ip, #2372]!	; 0x944

000048a0 <rb_patricia_lookup@plt>:
    48a0:	add	ip, pc, #0, 12
    48a4:	add	ip, ip, #36, 20	; 0x24000
    48a8:	ldr	pc, [ip, #2364]!	; 0x93c

000048ac <shutdown@plt>:
    48ac:	add	ip, pc, #0, 12
    48b0:	add	ip, ip, #36, 20	; 0x24000
    48b4:	ldr	pc, [ip, #2356]!	; 0x934

000048b8 <bind@plt>:
    48b8:	add	ip, pc, #0, 12
    48bc:	add	ip, ip, #36, 20	; 0x24000
    48c0:	ldr	pc, [ip, #2348]!	; 0x92c

000048c4 <rb_lib_log@plt>:
    48c4:	add	ip, pc, #0, 12
    48c8:	add	ip, ip, #36, 20	; 0x24000
    48cc:	ldr	pc, [ip, #2340]!	; 0x924

000048d0 <SSL_CTX_use_PrivateKey_file@plt>:
    48d0:	add	ip, pc, #0, 12
    48d4:	add	ip, ip, #36, 20	; 0x24000
    48d8:	ldr	pc, [ip, #2332]!	; 0x91c

000048dc <select@plt>:
    48dc:	add	ip, pc, #0, 12
    48e0:	add	ip, ip, #36, 20	; 0x24000
    48e4:	ldr	pc, [ip, #2324]!	; 0x914

000048e8 <close@plt>:
    48e8:	add	ip, pc, #0, 12
    48ec:	add	ip, ip, #36, 20	; 0x24000
    48f0:	ldr	pc, [ip, #2316]!	; 0x90c

000048f4 <rb_inet_ntop@plt>:
    48f4:	add	ip, pc, #0, 12
    48f8:	add	ip, ip, #36, 20	; 0x24000
    48fc:	ldr	pc, [ip, #2308]!	; 0x904

00004900 <rb_bh_alloc@plt>:
    4900:	add	ip, pc, #0, 12
    4904:	add	ip, ip, #36, 20	; 0x24000
    4908:	ldr	pc, [ip, #2300]!	; 0x8fc

0000490c <SSL_free@plt>:
    490c:	add	ip, pc, #0, 12
    4910:	add	ip, ip, #36, 20	; 0x24000
    4914:	ldr	pc, [ip, #2292]!	; 0x8f4

00004918 <rb_pipe@plt>:
    4918:	add	ip, pc, #0, 12
    491c:	add	ip, ip, #36, 20	; 0x24000
    4920:	ldr	pc, [ip, #2284]!	; 0x8ec

00004924 <strncasecmp@plt>:
    4924:	add	ip, pc, #0, 12
    4928:	add	ip, ip, #36, 20	; 0x24000
    492c:	ldr	pc, [ip, #2276]!	; 0x8e4

00004930 <rb_outofmemory@plt>:
    4930:	add	ip, pc, #0, 12
    4934:	add	ip, ip, #36, 20	; 0x24000
    4938:	ldr	pc, [ip, #2268]!	; 0x8dc

0000493c <rb_set_time@plt>:
    493c:	add	ip, pc, #0, 12
    4940:	add	ip, ip, #36, 20	; 0x24000
    4944:	ldr	pc, [ip, #2260]!	; 0x8d4

00004948 <rb_dictionary_stats@plt>:
    4948:	add	ip, pc, #0, 12
    494c:	add	ip, ip, #36, 20	; 0x24000
    4950:	ldr	pc, [ip, #2252]!	; 0x8cc

00004954 <malloc@plt>:
    4954:	add	ip, pc, #0, 12
    4958:	add	ip, ip, #36, 20	; 0x24000
    495c:	ldr	pc, [ip, #2244]!	; 0x8c4

00004960 <sigprocmask@plt>:
    4960:	add	ip, pc, #0, 12
    4964:	add	ip, ip, #36, 20	; 0x24000
    4968:	ldr	pc, [ip, #2236]!	; 0x8bc

0000496c <rb_event_run@plt>:
    496c:	add	ip, pc, #0, 12
    4970:	add	ip, ip, #36, 20	; 0x24000
    4974:	ldr	pc, [ip, #2228]!	; 0x8b4

00004978 <SSL_set_accept_state@plt>:
    4978:	add	ip, pc, #0, 12
    497c:	add	ip, ip, #36, 20	; 0x24000
    4980:	ldr	pc, [ip, #2220]!	; 0x8ac

00004984 <rb_init_bh@plt>:
    4984:	add	ip, pc, #0, 12
    4988:	add	ip, ip, #36, 20	; 0x24000
    498c:	ldr	pc, [ip, #2212]!	; 0x8a4

00004990 <PEM_read_DHparams@plt>:
    4990:	add	ip, pc, #0, 12
    4994:	add	ip, ip, #36, 20	; 0x24000
    4998:	ldr	pc, [ip, #2204]!	; 0x89c

0000499c <gmtime_r@plt>:
    499c:	add	ip, pc, #0, 12
    49a0:	add	ip, ip, #36, 20	; 0x24000
    49a4:	ldr	pc, [ip, #2196]!	; 0x894

000049a8 <poll@plt>:
    49a8:	add	ip, pc, #0, 12
    49ac:	add	ip, ip, #36, 20	; 0x24000
    49b0:	ldr	pc, [ip, #2188]!	; 0x88c

000049b4 <ASN1_item_digest@plt>:
    49b4:	add	ip, pc, #0, 12
    49b8:	add	ip, ip, #36, 20	; 0x24000
    49bc:	ldr	pc, [ip, #2180]!	; 0x884

000049c0 <strnlen@plt>:
    49c0:	add	ip, pc, #0, 12
    49c4:	add	ip, ip, #36, 20	; 0x24000
    49c8:	ldr	pc, [ip, #2172]!	; 0x87c

000049cc <SSL_get_peer_certificate@plt>:
    49cc:	add	ip, pc, #0, 12
    49d0:	add	ip, ip, #36, 20	; 0x24000
    49d4:	ldr	pc, [ip, #2164]!	; 0x874

000049d8 <rb_dictionary_find@plt>:
    49d8:	add	ip, pc, #0, 12
    49dc:	add	ip, ip, #36, 20	; 0x24000
    49e0:	ldr	pc, [ip, #2156]!	; 0x86c

000049e4 <rb_lib_init@plt>:
    49e4:	add	ip, pc, #0, 12
    49e8:	add	ip, ip, #36, 20	; 0x24000
    49ec:	ldr	pc, [ip, #2148]!	; 0x864

000049f0 <SSL_get_verify_result@plt>:
    49f0:	add	ip, pc, #0, 12
    49f4:	add	ip, ip, #36, 20	; 0x24000
    49f8:	ldr	pc, [ip, #2140]!	; 0x85c

000049fc <strtok_r@plt>:
    49fc:	add	ip, pc, #0, 12
    4a00:	add	ip, ip, #36, 20	; 0x24000
    4a04:	ldr	pc, [ip, #2132]!	; 0x854

00004a08 <rb_lib_restart@plt>:
    4a08:	add	ip, pc, #0, 12
    4a0c:	add	ip, ip, #36, 20	; 0x24000
    4a10:	ldr	pc, [ip, #2124]!	; 0x84c

00004a14 <DH_free@plt>:
    4a14:	add	ip, pc, #0, 12
    4a18:	add	ip, ip, #36, 20	; 0x24000
    4a1c:	ldr	pc, [ip, #2116]!	; 0x844

00004a20 <timer_delete@plt>:
    4a20:	add	ip, pc, #0, 12
    4a24:	add	ip, ip, #36, 20	; 0x24000
    4a28:	ldr	pc, [ip, #2108]!	; 0x83c

00004a2c <rb_open@plt>:
    4a2c:	add	ip, pc, #0, 12
    4a30:	add	ip, ip, #36, 20	; 0x24000
    4a34:	ldr	pc, [ip, #2100]!	; 0x834

00004a38 <rb_get_sockerr@plt>:
    4a38:	add	ip, pc, #0, 12
    4a3c:	add	ip, ip, #36, 20	; 0x24000
    4a40:	ldr	pc, [ip, #2092]!	; 0x82c

00004a44 <send@plt>:
    4a44:	add	ip, pc, #0, 12
    4a48:	add	ip, ip, #36, 20	; 0x24000
    4a4c:	ldr	pc, [ip, #2084]!	; 0x824

00004a50 <SSL_shutdown@plt>:
    4a50:	add	ip, pc, #0, 12
    4a54:	add	ip, ip, #36, 20	; 0x24000
    4a58:	ldr	pc, [ip, #2076]!	; 0x81c

00004a5c <rb_bh_create@plt>:
    4a5c:	add	ip, pc, #0, 12
    4a60:	add	ip, ip, #36, 20	; 0x24000
    4a64:	ldr	pc, [ip, #2068]!	; 0x814

00004a68 <dup2@plt>:
    4a68:	add	ip, pc, #0, 12
    4a6c:	add	ip, ip, #36, 20	; 0x24000
    4a70:	ldr	pc, [ip, #2060]!	; 0x80c

00004a74 <getpid@plt>:
    4a74:	add	ip, pc, #0, 12
    4a78:	add	ip, ip, #36, 20	; 0x24000
    4a7c:	ldr	pc, [ip, #2052]!	; 0x804

00004a80 <rb_writev@plt>:
    4a80:	add	ip, pc, #0, 12
    4a84:	add	ip, ip, #36, 20	; 0x24000
    4a88:	ldr	pc, [ip, #2044]!	; 0x7fc

00004a8c <RAND_bytes@plt>:
    4a8c:	add	ip, pc, #0, 12
    4a90:	add	ip, ip, #36, 20	; 0x24000
    4a94:	ldr	pc, [ip, #2036]!	; 0x7f4

00004a98 <rb_linebuf_newbuf@plt>:
    4a98:	add	ip, pc, #0, 12
    4a9c:	add	ip, ip, #36, 20	; 0x24000
    4aa0:	ldr	pc, [ip, #2028]!	; 0x7ec

00004aa4 <rb_fdlist_init@plt>:
    4aa4:	add	ip, pc, #0, 12
    4aa8:	add	ip, ip, #36, 20	; 0x24000
    4aac:	ldr	pc, [ip, #2020]!	; 0x7e4

00004ab0 <rb_event_add@plt>:
    4ab0:	add	ip, pc, #0, 12
    4ab4:	add	ip, ip, #36, 20	; 0x24000
    4ab8:	ldr	pc, [ip, #2012]!	; 0x7dc

00004abc <readlink@plt>:
    4abc:	add	ip, pc, #0, 12
    4ac0:	add	ip, ip, #36, 20	; 0x24000
    4ac4:	ldr	pc, [ip, #2004]!	; 0x7d4

00004ac8 <SSL_CTX_new@plt>:
    4ac8:	add	ip, pc, #0, 12
    4acc:	add	ip, ip, #36, 20	; 0x24000
    4ad0:	ldr	pc, [ip, #1996]!	; 0x7cc

00004ad4 <rb_setup_fd@plt>:
    4ad4:	add	ip, pc, #0, 12
    4ad8:	add	ip, ip, #36, 20	; 0x24000
    4adc:	ldr	pc, [ip, #1988]!	; 0x7c4

00004ae0 <recvmsg@plt>:
    4ae0:	add	ip, pc, #0, 12
    4ae4:	add	ip, ip, #36, 20	; 0x24000
    4ae8:	ldr	pc, [ip, #1980]!	; 0x7bc

00004aec <rand@plt>:
    4aec:	add	ip, pc, #0, 12
    4af0:	add	ip, ip, #36, 20	; 0x24000
    4af4:	ldr	pc, [ip, #1972]!	; 0x7b4

00004af8 <rb_linebuf_init@plt>:
    4af8:	add	ip, pc, #0, 12
    4afc:	add	ip, ip, #36, 20	; 0x24000
    4b00:	ldr	pc, [ip, #1964]!	; 0x7ac

00004b04 <__fxstat@plt>:
    4b04:	add	ip, pc, #0, 12
    4b08:	add	ip, ip, #36, 20	; 0x24000
    4b0c:	ldr	pc, [ip, #1956]!	; 0x7a4

00004b10 <SSL_set_connect_state@plt>:
    4b10:	add	ip, pc, #0, 12
    4b14:	add	ip, ip, #36, 20	; 0x24000
    4b18:	ldr	pc, [ip, #1948]!	; 0x79c

00004b1c <rb_radixtree_elem_find@plt>:
    4b1c:	add	ip, pc, #0, 12
    4b20:	add	ip, ip, #36, 20	; 0x24000
    4b24:	ldr	pc, [ip, #1940]!	; 0x794

00004b28 <rb_make_rb_dlink_node@plt>:
    4b28:	add	ip, pc, #0, 12
    4b2c:	add	ip, ip, #36, 20	; 0x24000
    4b30:	ldr	pc, [ip, #1932]!	; 0x78c

00004b34 <rb_strlcat@plt>:
    4b34:	add	ip, pc, #0, 12
    4b38:	add	ip, ip, #36, 20	; 0x24000
    4b3c:	ldr	pc, [ip, #1924]!	; 0x784

00004b40 <rb_spawn_process@plt>:
    4b40:	add	ip, pc, #0, 12
    4b44:	add	ip, ip, #36, 20	; 0x24000
    4b48:	ldr	pc, [ip, #1916]!	; 0x77c

00004b4c <EVP_sha512@plt>:
    4b4c:	add	ip, pc, #0, 12
    4b50:	add	ip, ip, #36, 20	; 0x24000
    4b54:	ldr	pc, [ip, #1908]!	; 0x774

00004b58 <snprintf@plt>:
    4b58:	add	ip, pc, #0, 12
    4b5c:	add	ip, ip, #36, 20	; 0x24000
    4b60:	ldr	pc, [ip, #1900]!	; 0x76c

00004b64 <RAND_status@plt>:
    4b64:	add	ip, pc, #0, 12
    4b68:	add	ip, ip, #36, 20	; 0x24000
    4b6c:	ldr	pc, [ip, #1892]!	; 0x764

00004b70 <timerfd_create@plt>:
    4b70:	add	ip, pc, #0, 12
    4b74:	add	ip, ip, #36, 20	; 0x24000
    4b78:	ldr	pc, [ip, #1884]!	; 0x75c

00004b7c <EVP_sha256@plt>:
    4b7c:	add	ip, pc, #0, 12
    4b80:	add	ip, ip, #36, 20	; 0x24000
    4b84:	ldr	pc, [ip, #1876]!	; 0x754

00004b88 <strcspn@plt>:
    4b88:	add	ip, pc, #0, 12
    4b8c:	add	ip, ip, #36, 20	; 0x24000
    4b90:	ldr	pc, [ip, #1868]!	; 0x74c

00004b94 <rb_linebuf_put@plt>:
    4b94:	add	ip, pc, #0, 12
    4b98:	add	ip, ip, #36, 20	; 0x24000
    4b9c:	ldr	pc, [ip, #1860]!	; 0x744

00004ba0 <rb_listen@plt>:
    4ba0:	add	ip, pc, #0, 12
    4ba4:	add	ip, ip, #36, 20	; 0x24000
    4ba8:	ldr	pc, [ip, #1852]!	; 0x73c

00004bac <fcntl@plt>:
    4bac:	add	ip, pc, #0, 12
    4bb0:	add	ip, ip, #36, 20	; 0x24000
    4bb4:	ldr	pc, [ip, #1844]!	; 0x734

00004bb8 <strncmp@plt>:
    4bb8:	add	ip, pc, #0, 12
    4bbc:	add	ip, ip, #36, 20	; 0x24000
    4bc0:	ldr	pc, [ip, #1836]!	; 0x72c

00004bc4 <kill@plt>:
    4bc4:	add	ip, pc, #0, 12
    4bc8:	add	ip, ip, #36, 20	; 0x24000
    4bcc:	ldr	pc, [ip, #1828]!	; 0x724

00004bd0 <nanosleep@plt>:
    4bd0:	add	ip, pc, #0, 12
    4bd4:	add	ip, ip, #36, 20	; 0x24000
    4bd8:	ldr	pc, [ip, #1820]!	; 0x71c

00004bdc <rb_event_next@plt>:
    4bdc:	add	ip, pc, #0, 12
    4be0:	add	ip, ip, #36, 20	; 0x24000
    4be4:	ldr	pc, [ip, #1812]!	; 0x714

00004be8 <realloc@plt>:
    4be8:	add	ip, pc, #0, 12
    4bec:	add	ip, ip, #36, 20	; 0x24000
    4bf0:	ldr	pc, [ip, #1804]!	; 0x70c

00004bf4 <timerfd_settime@plt>:
    4bf4:	add	ip, pc, #0, 12
    4bf8:	add	ip, ip, #36, 20	; 0x24000
    4bfc:	ldr	pc, [ip, #1796]!	; 0x704

00004c00 <epoll_ctl@plt>:
    4c00:	add	ip, pc, #0, 12
    4c04:	add	ip, ip, #36, 20	; 0x24000
    4c08:	ldr	pc, [ip, #1788]!	; 0x6fc

00004c0c <X509_free@plt>:
    4c0c:	add	ip, pc, #0, 12
    4c10:	add	ip, ip, #36, 20	; 0x24000
    4c14:	ldr	pc, [ip, #1780]!	; 0x6f4

00004c18 <readv@plt>:
    4c18:	add	ip, pc, #0, 12
    4c1c:	add	ip, ip, #36, 20	; 0x24000
    4c20:	ldr	pc, [ip, #1772]!	; 0x6ec

00004c24 <getsockopt@plt>:
    4c24:	add	ip, pc, #0, 12
    4c28:	add	ip, ip, #36, 20	; 0x24000
    4c2c:	ldr	pc, [ip, #1764]!	; 0x6e4

00004c30 <pipe@plt>:
    4c30:	add	ip, pc, #0, 12
    4c34:	add	ip, ip, #36, 20	; 0x24000
    4c38:	ldr	pc, [ip, #1756]!	; 0x6dc

00004c3c <OpenSSL_version@plt>:
    4c3c:	add	ip, pc, #0, 12
    4c40:	add	ip, ip, #36, 20	; 0x24000
    4c44:	ldr	pc, [ip, #1748]!	; 0x6d4

00004c48 <setsockopt@plt>:
    4c48:	add	ip, pc, #0, 12
    4c4c:	add	ip, ip, #36, 20	; 0x24000
    4c50:	ldr	pc, [ip, #1740]!	; 0x6cc

00004c54 <SSL_get_error@plt>:
    4c54:	add	ip, pc, #0, 12
    4c58:	add	ip, ip, #36, 20	; 0x24000
    4c5c:	ldr	pc, [ip, #1732]!	; 0x6c4

00004c60 <SSL_get_version@plt>:
    4c60:	add	ip, pc, #0, 12
    4c64:	add	ip, ip, #36, 20	; 0x24000
    4c68:	ldr	pc, [ip, #1724]!	; 0x6bc

00004c6c <rb_radixtree_delete@plt>:
    4c6c:	add	ip, pc, #0, 12
    4c70:	add	ip, ip, #36, 20	; 0x24000
    4c74:	ldr	pc, [ip, #1716]!	; 0x6b4

00004c78 <setenv@plt>:
    4c78:	add	ip, pc, #0, 12
    4c7c:	add	ip, ip, #36, 20	; 0x24000
    4c80:	ldr	pc, [ip, #1708]!	; 0x6ac

00004c84 <strcmp@plt>:
    4c84:	add	ip, pc, #0, 12
    4c88:	add	ip, ip, #36, 20	; 0x24000
    4c8c:	ldr	pc, [ip, #1700]!	; 0x6a4

00004c90 <__errno_location@plt>:
    4c90:	add	ip, pc, #0, 12
    4c94:	add	ip, ip, #36, 20	; 0x24000
    4c98:	ldr	pc, [ip, #1692]!	; 0x69c

00004c9c <__cxa_finalize@plt>:
    4c9c:	add	ip, pc, #0, 12
    4ca0:	add	ip, ip, #36, 20	; 0x24000
    4ca4:	ldr	pc, [ip, #1684]!	; 0x694

00004ca8 <sprintf@plt>:
    4ca8:	add	ip, pc, #0, 12
    4cac:	add	ip, ip, #36, 20	; 0x24000
    4cb0:	ldr	pc, [ip, #1676]!	; 0x68c

00004cb4 <rb_bh_usage@plt>:
    4cb4:	add	ip, pc, #0, 12
    4cb8:	add	ip, ip, #36, 20	; 0x24000
    4cbc:	ldr	pc, [ip, #1668]!	; 0x684

00004cc0 <SSL_CTX_set_verify@plt>:
    4cc0:	add	ip, pc, #0, 12
    4cc4:	add	ip, ip, #36, 20	; 0x24000
    4cc8:	ldr	pc, [ip, #1660]!	; 0x67c

Disassembly of section .text:

00004cd0 <call_weak_fn>:
    4cd0:	ldr	r3, [pc, #20]	; 4cec <call_weak_fn+0x1c>
    4cd4:	ldr	r2, [pc, #20]	; 4cf0 <call_weak_fn+0x20>
    4cd8:	add	r3, pc, r3
    4cdc:	ldr	r2, [r3, r2]
    4ce0:	cmp	r2, #0
    4ce4:	bxeq	lr
    4ce8:	b	44bc <__gmon_start__@plt>
    4cec:	.word	0x00024320
    4cf0:	.word	0x00000358

00004cf4 <deregister_tm_clones>:
    4cf4:	ldr	r0, [pc, #44]	; 4d28 <deregister_tm_clones+0x34>
    4cf8:	ldr	r3, [pc, #44]	; 4d2c <deregister_tm_clones+0x38>
    4cfc:	add	r0, pc, r0
    4d00:	add	r3, pc, r3
    4d04:	cmp	r3, r0
    4d08:	ldr	r3, [pc, #32]	; 4d30 <deregister_tm_clones+0x3c>
    4d0c:	add	r3, pc, r3
    4d10:	bxeq	lr
    4d14:	ldr	r2, [pc, #24]	; 4d34 <deregister_tm_clones+0x40>
    4d18:	ldr	r3, [r3, r2]
    4d1c:	cmp	r3, #0
    4d20:	bxeq	lr
    4d24:	bx	r3
    4d28:	.word	0x000247c4
    4d2c:	.word	0x000247c0
    4d30:	.word	0x000242ec
    4d34:	.word	0x00000374

00004d38 <register_tm_clones>:
    4d38:	ldr	r0, [pc, #56]	; 4d78 <register_tm_clones+0x40>
    4d3c:	ldr	r3, [pc, #56]	; 4d7c <register_tm_clones+0x44>
    4d40:	add	r0, pc, r0
    4d44:	add	r3, pc, r3
    4d48:	sub	r1, r3, r0
    4d4c:	ldr	r3, [pc, #44]	; 4d80 <register_tm_clones+0x48>
    4d50:	asr	r1, r1, #2
    4d54:	add	r3, pc, r3
    4d58:	add	r1, r1, r1, lsr #31
    4d5c:	asrs	r1, r1, #1
    4d60:	bxeq	lr
    4d64:	ldr	r2, [pc, #24]	; 4d84 <register_tm_clones+0x4c>
    4d68:	ldr	r3, [r3, r2]
    4d6c:	cmp	r3, #0
    4d70:	bxeq	lr
    4d74:	bx	r3
    4d78:	.word	0x00024780
    4d7c:	.word	0x0002477c
    4d80:	.word	0x000242a4
    4d84:	.word	0x00000384

00004d88 <__do_global_dtors_aux>:
    4d88:	ldr	r3, [pc, #76]	; 4ddc <__do_global_dtors_aux+0x54>
    4d8c:	ldr	r2, [pc, #76]	; 4de0 <__do_global_dtors_aux+0x58>
    4d90:	add	r3, pc, r3
    4d94:	add	r2, pc, r2
    4d98:	ldrb	r3, [r3]
    4d9c:	cmp	r3, #0
    4da0:	bxne	lr
    4da4:	ldr	r3, [pc, #56]	; 4de4 <__do_global_dtors_aux+0x5c>
    4da8:	push	{r4, lr}
    4dac:	ldr	r3, [r2, r3]
    4db0:	cmp	r3, #0
    4db4:	beq	4dc4 <__do_global_dtors_aux+0x3c>
    4db8:	ldr	r3, [pc, #40]	; 4de8 <__do_global_dtors_aux+0x60>
    4dbc:	ldr	r0, [pc, r3]
    4dc0:	bl	4c9c <__cxa_finalize@plt>
    4dc4:	bl	4cf4 <deregister_tm_clones>
    4dc8:	ldr	r3, [pc, #28]	; 4dec <__do_global_dtors_aux+0x64>
    4dcc:	mov	r2, #1
    4dd0:	add	r3, pc, r3
    4dd4:	strb	r2, [r3]
    4dd8:	pop	{r4, pc}
    4ddc:	.word	0x00024730
    4de0:	.word	0x00024264
    4de4:	.word	0x00000414
    4de8:	.word	0x00024658
    4dec:	.word	0x000246f0

00004df0 <frame_dummy>:
    4df0:	b	4d38 <register_tm_clones>

00004df4 <rb_spawn_process>:
    4df4:	strd	r4, [sp, #-20]!	; 0xffffffec
    4df8:	strd	r6, [sp, #8]
    4dfc:	str	lr, [sp, #16]
    4e00:	sub	sp, sp, #356	; 0x164
    4e04:	mov	r6, r0
    4e08:	mov	r7, r1
    4e0c:	ldr	r5, [pc, #124]	; 4e90 <rb_spawn_process+0x9c>
    4e10:	add	r5, pc, r5
    4e14:	add	r4, sp, #12
    4e18:	mov	r0, r4
    4e1c:	bl	4678 <posix_spawnattr_init@plt>
    4e20:	mov	r1, #64	; 0x40
    4e24:	mov	r0, r4
    4e28:	bl	47d4 <posix_spawnattr_setflags@plt>
    4e2c:	ldr	r3, [pc, #96]	; 4e94 <rb_spawn_process+0xa0>
    4e30:	ldr	r3, [r5, r3]
    4e34:	ldr	r3, [r3]
    4e38:	str	r3, [sp, #4]
    4e3c:	str	r7, [sp]
    4e40:	mov	r3, r4
    4e44:	mov	r2, #0
    4e48:	mov	r1, r6
    4e4c:	add	r0, sp, #348	; 0x15c
    4e50:	bl	478c <posix_spawn@plt>
    4e54:	mov	r5, r0
    4e58:	mov	r0, r4
    4e5c:	bl	4810 <posix_spawnattr_destroy@plt>
    4e60:	cmp	r5, #0
    4e64:	beq	4e78 <rb_spawn_process+0x84>
    4e68:	bl	4c90 <__errno_location@plt>
    4e6c:	str	r5, [r0]
    4e70:	mvn	r3, #0
    4e74:	str	r3, [sp, #348]	; 0x15c
    4e78:	ldr	r0, [sp, #348]	; 0x15c
    4e7c:	add	sp, sp, #356	; 0x164
    4e80:	ldrd	r4, [sp]
    4e84:	ldrd	r6, [sp, #8]
    4e88:	add	sp, sp, #16
    4e8c:	pop	{pc}		; (ldr pc, [sp], #4)
    4e90:	.word	0x000241e8
    4e94:	.word	0x0000039c

00004e98 <rb_gettimeofday>:
    4e98:	str	r4, [sp, #-8]!
    4e9c:	str	lr, [sp, #4]
    4ea0:	bl	4714 <gettimeofday@plt>
    4ea4:	ldr	r4, [sp]
    4ea8:	add	sp, sp, #4
    4eac:	pop	{pc}		; (ldr pc, [sp], #4)

00004eb0 <rb_sleep>:
    4eb0:	push	{lr}		; (str lr, [sp, #-4]!)
    4eb4:	sub	sp, sp, #12
    4eb8:	mov	r3, #1000	; 0x3e8
    4ebc:	mul	r1, r3, r1
    4ec0:	str	r1, [sp, #4]
    4ec4:	str	r0, [sp]
    4ec8:	mov	r1, #0
    4ecc:	mov	r0, sp
    4ed0:	bl	4bd0 <nanosleep@plt>
    4ed4:	add	sp, sp, #12
    4ed8:	pop	{pc}		; (ldr pc, [sp], #4)

00004edc <rb_strerror>:
    4edc:	str	r4, [sp, #-8]!
    4ee0:	str	lr, [sp, #4]
    4ee4:	bl	4354 <strerror@plt>
    4ee8:	ldr	r4, [sp]
    4eec:	add	sp, sp, #4
    4ef0:	pop	{pc}		; (ldr pc, [sp], #4)

00004ef4 <rb_kill>:
    4ef4:	str	r4, [sp, #-8]!
    4ef8:	str	lr, [sp, #4]
    4efc:	bl	4bc4 <kill@plt>
    4f00:	ldr	r4, [sp]
    4f04:	add	sp, sp, #4
    4f08:	pop	{pc}		; (ldr pc, [sp], #4)

00004f0c <rb_setenv>:
    4f0c:	str	r4, [sp, #-8]!
    4f10:	str	lr, [sp, #4]
    4f14:	bl	4c78 <setenv@plt>
    4f18:	ldr	r4, [sp]
    4f1c:	add	sp, sp, #4
    4f20:	pop	{pc}		; (ldr pc, [sp], #4)

00004f24 <rb_waitpid>:
    4f24:	str	r4, [sp, #-8]!
    4f28:	str	lr, [sp, #4]
    4f2c:	bl	484c <waitpid@plt>
    4f30:	ldr	r4, [sp]
    4f34:	add	sp, sp, #4
    4f38:	pop	{pc}		; (ldr pc, [sp], #4)

00004f3c <rb_getpid>:
    4f3c:	str	r4, [sp, #-8]!
    4f40:	str	lr, [sp, #4]
    4f44:	bl	4a74 <getpid@plt>
    4f48:	ldr	r4, [sp]
    4f4c:	add	sp, sp, #4
    4f50:	pop	{pc}		; (ldr pc, [sp], #4)

00004f54 <rb_path_to_self>:
    4f54:	str	r4, [sp, #-8]!
    4f58:	str	lr, [sp, #4]
    4f5c:	mov	r2, #4096	; 0x1000
    4f60:	ldr	r1, [pc, #44]	; 4f94 <rb_path_to_self+0x40>
    4f64:	add	r1, pc, r1
    4f68:	ldr	r0, [pc, #40]	; 4f98 <rb_path_to_self+0x44>
    4f6c:	add	r0, pc, r0
    4f70:	bl	4abc <readlink@plt>
    4f74:	cmn	r0, #1
    4f78:	moveq	r0, #0
    4f7c:	beq	4f88 <rb_path_to_self+0x34>
    4f80:	ldr	r0, [pc, #20]	; 4f9c <rb_path_to_self+0x48>
    4f84:	add	r0, pc, r0
    4f88:	ldr	r4, [sp]
    4f8c:	add	sp, sp, #4
    4f90:	pop	{pc}		; (ldr pc, [sp], #4)
    4f94:	.word	0x00024560
    4f98:	.word	0x0001133c
    4f9c:	.word	0x00024540

00004fa0 <rb_init_netio_win32>:
    4fa0:	str	r4, [sp, #-8]!
    4fa4:	str	lr, [sp, #4]
    4fa8:	bl	4c90 <__errno_location@plt>
    4fac:	mov	r3, #38	; 0x26
    4fb0:	str	r3, [r0]
    4fb4:	mvn	r0, #0
    4fb8:	ldr	r4, [sp]
    4fbc:	add	sp, sp, #4
    4fc0:	pop	{pc}		; (ldr pc, [sp], #4)

00004fc4 <rb_setselect_win32>:
    4fc4:	str	r4, [sp, #-8]!
    4fc8:	str	lr, [sp, #4]
    4fcc:	bl	4c90 <__errno_location@plt>
    4fd0:	mov	r3, #38	; 0x26
    4fd4:	str	r3, [r0]
    4fd8:	ldr	r4, [sp]
    4fdc:	add	sp, sp, #4
    4fe0:	pop	{pc}		; (ldr pc, [sp], #4)

00004fe4 <rb_select_win32>:
    4fe4:	str	r4, [sp, #-8]!
    4fe8:	str	lr, [sp, #4]
    4fec:	bl	4c90 <__errno_location@plt>
    4ff0:	mov	r3, #38	; 0x26
    4ff4:	str	r3, [r0]
    4ff8:	mvn	r0, #0
    4ffc:	ldr	r4, [sp]
    5000:	add	sp, sp, #4
    5004:	pop	{pc}		; (ldr pc, [sp], #4)

00005008 <rb_setup_fd_win32>:
    5008:	str	r4, [sp, #-8]!
    500c:	str	lr, [sp, #4]
    5010:	bl	4c90 <__errno_location@plt>
    5014:	mov	r3, #38	; 0x26
    5018:	str	r3, [r0]
    501c:	mvn	r0, #0
    5020:	ldr	r4, [sp]
    5024:	add	sp, sp, #4
    5028:	pop	{pc}		; (ldr pc, [sp], #4)
    502c:	andeq	r0, r0, r0

00005030 <rb_ascii_to_bin>:
    5030:	cmp	r0, #122	; 0x7a
    5034:	bhi	5080 <rb_ascii_to_bin+0x50>
    5038:	cmp	r0, #96	; 0x60
    503c:	bhi	5068 <rb_ascii_to_bin+0x38>
    5040:	cmp	r0, #90	; 0x5a
    5044:	bhi	5088 <rb_ascii_to_bin+0x58>
    5048:	cmp	r0, #64	; 0x40
    504c:	bhi	5070 <rb_ascii_to_bin+0x40>
    5050:	sub	r3, r0, #46	; 0x2e
    5054:	uxtb	r3, r3
    5058:	cmp	r3, #11
    505c:	bls	5078 <rb_ascii_to_bin+0x48>
    5060:	mov	r0, #0
    5064:	bx	lr
    5068:	sub	r0, r0, #59	; 0x3b
    506c:	bx	lr
    5070:	sub	r0, r0, #53	; 0x35
    5074:	bx	lr
    5078:	sub	r0, r0, #46	; 0x2e
    507c:	bx	lr
    5080:	mov	r0, #0
    5084:	bx	lr
    5088:	mov	r0, #0
    508c:	bx	lr

00005090 <rb_des_init>:
    5090:	ldr	r3, [pc, #1904]	; 5808 <rb_des_init+0x778>
    5094:	add	r3, pc, r3
    5098:	ldr	r3, [r3]
    509c:	cmp	r3, #1
    50a0:	bxeq	lr
    50a4:	strd	r4, [sp, #-36]!	; 0xffffffdc
    50a8:	strd	r6, [sp, #8]
    50ac:	strd	r8, [sp, #16]
    50b0:	strd	sl, [sp, #24]
    50b4:	str	lr, [sp, #32]
    50b8:	sub	sp, sp, #92	; 0x5c
    50bc:	ldr	r2, [pc, #1864]	; 580c <rb_des_init+0x77c>
    50c0:	add	r2, pc, r2
    50c4:	mov	r3, #0
    50c8:	str	r3, [r2, #4]
    50cc:	str	r3, [r2, #8]
    50d0:	str	r3, [r2, #12]
    50d4:	str	r3, [r2, #16]
    50d8:	ldr	r1, [pc, #1840]	; 5810 <rb_des_init+0x780>
    50dc:	add	r1, pc, r1
    50e0:	add	r0, r1, #16
    50e4:	str	r0, [r2, #20]
    50e8:	add	r1, r1, #32
    50ec:	str	r1, [r2, #24]
    50f0:	add	r4, r2, #27
    50f4:	mov	lr, r3
    50f8:	ldr	r5, [pc, #1812]	; 5814 <rb_des_init+0x784>
    50fc:	add	r5, pc, r5
    5100:	mov	r0, r4
    5104:	mov	r2, #0
    5108:	add	ip, r5, lr, lsl #6
    510c:	ubfx	r3, r2, #1, #4
    5110:	and	r1, r2, #32
    5114:	orr	r3, r3, r1
    5118:	lsl	r1, r2, #4
    511c:	and	r1, r1, #16
    5120:	orr	r3, r3, r1
    5124:	add	r3, ip, r3
    5128:	ldrb	r3, [r3, #128]	; 0x80
    512c:	strb	r3, [r0, #1]!
    5130:	add	r2, r2, #1
    5134:	cmp	r2, #64	; 0x40
    5138:	bne	510c <rb_des_init+0x7c>
    513c:	add	lr, lr, #1
    5140:	add	r4, r4, #64	; 0x40
    5144:	cmp	lr, #8
    5148:	bne	5100 <rb_des_init+0x70>
    514c:	ldr	lr, [pc, #1732]	; 5818 <rb_des_init+0x788>
    5150:	add	lr, pc, lr
    5154:	add	r9, lr, #28
    5158:	add	r8, lr, #91	; 0x5b
    515c:	rsb	r9, r9, #-16777216	; 0xff000000
    5160:	add	r9, r9, #16711680	; 0xff0000
    5164:	add	r9, r9, #65280	; 0xff00
    5168:	add	r9, r9, #192	; 0xc0
    516c:	add	lr, lr, #155	; 0x9b
    5170:	mov	sl, #0
    5174:	ldr	fp, [pc, #1696]	; 581c <rb_des_init+0x78c>
    5178:	add	fp, pc, fp
    517c:	movw	r7, #65471	; 0xffbf
    5180:	movt	r7, #65535	; 0xffff
    5184:	sub	r7, r7, r9
    5188:	mov	r6, #0
    518c:	add	r5, r9, #1
    5190:	add	r4, fp, sl, lsl #12
    5194:	ldrb	r0, [r7, #1]!
    5198:	lsl	r0, r0, #4
    519c:	sxtb	r0, r0
    51a0:	mov	ip, r6
    51a4:	mov	r3, r8
    51a8:	add	r2, r5, r3
    51ac:	orr	r2, ip, r2
    51b0:	ldrb	r1, [r3, #1]!
    51b4:	orr	r1, r0, r1
    51b8:	strb	r1, [r4, r2]
    51bc:	cmp	r3, lr
    51c0:	bne	51a8 <rb_des_init+0x118>
    51c4:	add	r6, r6, #64	; 0x40
    51c8:	cmp	r6, #4096	; 0x1000
    51cc:	bne	5194 <rb_des_init+0x104>
    51d0:	add	sl, sl, #1
    51d4:	add	r8, r8, #128	; 0x80
    51d8:	sub	r9, r9, #128	; 0x80
    51dc:	add	lr, lr, #128	; 0x80
    51e0:	cmp	sl, #4
    51e4:	bne	517c <rb_des_init+0xec>
    51e8:	ldr	ip, [pc, #1584]	; 5820 <rb_des_init+0x790>
    51ec:	add	ip, pc, ip
    51f0:	add	ip, ip, #640	; 0x280
    51f4:	sub	r4, ip, #1
    51f8:	ldr	r0, [pc, #1572]	; 5824 <rb_des_init+0x794>
    51fc:	add	r0, pc, r0
    5200:	add	lr, r0, #536	; 0x218
    5204:	add	lr, lr, #3
    5208:	add	r0, r0, #600	; 0x258
    520c:	add	r0, r0, #3
    5210:	add	ip, ip, #63	; 0x3f
    5214:	mov	r1, r4
    5218:	ldr	r6, [pc, #1544]	; 5828 <rb_des_init+0x798>
    521c:	add	r6, pc, r6
    5220:	mvn	r5, #0
    5224:	add	r1, r1, #1
    5228:	mov	r2, r1
    522c:	ldrb	r3, [r2], #-1
    5230:	sub	r3, r3, #1
    5234:	uxtb	r3, r3
    5238:	strb	r3, [lr, #1]!
    523c:	add	r3, r6, r3
    5240:	sub	r2, r2, r4
    5244:	strb	r2, [r3, #668]	; 0x29c
    5248:	strb	r5, [r0, #1]!
    524c:	cmp	r1, ip
    5250:	bne	5224 <rb_des_init+0x194>
    5254:	ldr	ip, [pc, #1488]	; 582c <rb_des_init+0x79c>
    5258:	add	ip, pc, ip
    525c:	add	ip, ip, #704	; 0x2c0
    5260:	sub	lr, ip, #1
    5264:	ldr	r0, [pc, #1476]	; 5830 <rb_des_init+0x7a0>
    5268:	add	r0, pc, r0
    526c:	add	r0, r0, #728	; 0x2d8
    5270:	add	r0, r0, #3
    5274:	add	ip, ip, #55	; 0x37
    5278:	mov	r2, lr
    527c:	ldr	r5, [pc, #1456]	; 5834 <rb_des_init+0x7a4>
    5280:	add	r5, pc, r5
    5284:	mvn	r4, #0
    5288:	add	r2, r2, #1
    528c:	mov	r3, r2
    5290:	ldrb	r1, [r3], #-1
    5294:	add	r1, r5, r1
    5298:	sub	r3, r3, lr
    529c:	strb	r3, [r1, #603]	; 0x25b
    52a0:	strb	r4, [r0, #1]!
    52a4:	cmp	r2, ip
    52a8:	bne	5288 <rb_des_init+0x1f8>
    52ac:	ldr	r1, [pc, #1412]	; 5838 <rb_des_init+0x7a8>
    52b0:	add	r1, pc, r1
    52b4:	add	r1, r1, #760	; 0x2f8
    52b8:	sub	ip, r1, #1
    52bc:	add	r1, r1, #47	; 0x2f
    52c0:	mov	r2, ip
    52c4:	ldr	lr, [pc, #1392]	; 583c <rb_des_init+0x7ac>
    52c8:	add	lr, pc, lr
    52cc:	add	r2, r2, #1
    52d0:	mov	r3, r2
    52d4:	ldrb	r0, [r3], #-1
    52d8:	add	r0, lr, r0
    52dc:	sub	r3, r3, ip
    52e0:	strb	r3, [r0, #731]	; 0x2db
    52e4:	cmp	r2, r1
    52e8:	bne	52cc <rb_des_init+0x23c>
    52ec:	ldr	r3, [pc, #1356]	; 5840 <rb_des_init+0x7b0>
    52f0:	add	r3, pc, r3
    52f4:	add	r2, r3, #732	; 0x2dc
    52f8:	str	r2, [sp, #32]
    52fc:	add	r2, r3, #604	; 0x25c
    5300:	str	r2, [sp, #36]	; 0x24
    5304:	ldr	r2, [pc, #1336]	; 5844 <rb_des_init+0x7b4>
    5308:	add	r2, pc, r2
    530c:	sub	r2, r2, #4
    5310:	str	r2, [sp, #44]	; 0x2c
    5314:	ldr	r2, [pc, #1324]	; 5848 <rb_des_init+0x7b8>
    5318:	add	r2, pc, r2
    531c:	sub	r2, r2, #4
    5320:	str	r2, [sp, #48]	; 0x30
    5324:	ldr	r2, [pc, #1312]	; 584c <rb_des_init+0x7bc>
    5328:	add	r2, pc, r2
    532c:	str	r2, [sp, #52]	; 0x34
    5330:	ldr	r2, [pc, #1304]	; 5850 <rb_des_init+0x7c0>
    5334:	add	r2, pc, r2
    5338:	str	r2, [sp, #56]	; 0x38
    533c:	ldr	r2, [pc, #1296]	; 5854 <rb_des_init+0x7c4>
    5340:	add	r2, pc, r2
    5344:	sub	r2, r2, #4
    5348:	str	r2, [sp, #60]	; 0x3c
    534c:	ldr	r2, [pc, #1284]	; 5858 <rb_des_init+0x7c8>
    5350:	add	r2, pc, r2
    5354:	sub	r2, r2, #4
    5358:	str	r2, [sp, #64]	; 0x40
    535c:	ldr	r2, [pc, #1272]	; 585c <rb_des_init+0x7cc>
    5360:	add	r2, pc, r2
    5364:	sub	r2, r2, #4
    5368:	str	r2, [sp, #68]	; 0x44
    536c:	ldr	r2, [pc, #1260]	; 5860 <rb_des_init+0x7d0>
    5370:	add	r2, pc, r2
    5374:	sub	r2, r2, #4
    5378:	str	r2, [sp, #72]	; 0x48
    537c:	add	r2, r3, #540	; 0x21c
    5380:	str	r2, [sp, #76]	; 0x4c
    5384:	add	fp, r3, #668	; 0x29c
    5388:	add	r3, r3, #788	; 0x314
    538c:	str	r3, [sp, #80]	; 0x50
    5390:	ldr	r3, [pc, #1228]	; 5864 <rb_des_init+0x7d4>
    5394:	add	r3, pc, r3
    5398:	add	r3, r3, #808	; 0x328
    539c:	str	r3, [sp]
    53a0:	ldr	r3, [pc, #1216]	; 5868 <rb_des_init+0x7d8>
    53a4:	add	r3, pc, r3
    53a8:	str	r3, [sp, #4]
    53ac:	ldr	r3, [pc, #1208]	; 586c <rb_des_init+0x7dc>
    53b0:	add	r3, pc, r3
    53b4:	str	r3, [sp, #8]
    53b8:	ldr	r3, [pc, #1200]	; 5870 <rb_des_init+0x7e0>
    53bc:	add	r3, pc, r3
    53c0:	str	r3, [sp, #12]
    53c4:	ldr	r3, [pc, #1192]	; 5874 <rb_des_init+0x7e4>
    53c8:	add	r3, pc, r3
    53cc:	str	r3, [sp, #16]
    53d0:	b	56dc <rb_des_init+0x64c>
    53d4:	sub	r1, r1, #32
    53d8:	ldr	r8, [sp, #12]
    53dc:	ldr	r1, [r8, r1, lsl #2]
    53e0:	ldr	r8, [r5]
    53e4:	orr	r1, r8, r1
    53e8:	str	r1, [r5]
    53ec:	b	5444 <rb_des_init+0x3b4>
    53f0:	sub	r1, r1, #32
    53f4:	ldr	ip, [lr]
    53f8:	ldr	r8, [sp, #4]
    53fc:	ldr	r1, [r8, r1, lsl #2]
    5400:	orr	ip, ip, r1
    5404:	str	ip, [lr]
    5408:	add	r3, r3, #1
    540c:	cmp	r3, #8
    5410:	beq	5468 <rb_des_init+0x3d8>
    5414:	ldrb	r1, [r2], #1
    5418:	tst	r1, r0
    541c:	beq	5408 <rb_des_init+0x378>
    5420:	mov	ip, r3
    5424:	ldrb	r1, [fp, r3]
    5428:	cmp	r1, #31
    542c:	bgt	53d4 <rb_des_init+0x344>
    5430:	ldr	r8, [sp, #16]
    5434:	ldr	r1, [r8, r1, lsl #2]
    5438:	ldr	r8, [r6]
    543c:	orr	r1, r8, r1
    5440:	str	r1, [r6]
    5444:	ldrb	r1, [r7, ip]
    5448:	cmp	r1, #31
    544c:	bgt	53f0 <rb_des_init+0x360>
    5450:	ldr	ip, [r4]
    5454:	ldr	r8, [sp, #8]
    5458:	ldr	r1, [r8, r1, lsl #2]
    545c:	orr	ip, ip, r1
    5460:	str	ip, [r4]
    5464:	b	5408 <rb_des_init+0x378>
    5468:	ldr	r8, [sp, #24]
    546c:	add	r0, r0, #1
    5470:	cmp	r0, #256	; 0x100
    5474:	beq	54c4 <rb_des_init+0x434>
    5478:	ldr	r3, [sp, #20]
    547c:	add	r3, r3, #4
    5480:	mov	r2, r3
    5484:	str	r3, [sp, #20]
    5488:	mov	r6, r3
    548c:	mov	r3, #0
    5490:	str	r3, [r2]
    5494:	add	r8, r8, #4
    5498:	mov	r5, r8
    549c:	str	r3, [r8]
    54a0:	add	r9, r9, #4
    54a4:	mov	r4, r9
    54a8:	str	r3, [r9]
    54ac:	add	sl, sl, #4
    54b0:	mov	lr, sl
    54b4:	str	r3, [sl]
    54b8:	ldr	r2, [sp]
    54bc:	str	r8, [sp, #24]
    54c0:	b	5414 <rb_des_init+0x384>
    54c4:	ldr	r6, [sp, #56]	; 0x38
    54c8:	ldr	r5, [sp, #52]	; 0x34
    54cc:	ldr	r4, [sp, #48]	; 0x30
    54d0:	ldr	lr, [sp, #44]	; 0x2c
    54d4:	mov	ip, #0
    54d8:	ldr	r3, [pc, #920]	; 5878 <rb_des_init+0x7e8>
    54dc:	add	r3, pc, r3
    54e0:	add	r3, r3, #808	; 0x328
    54e4:	str	r3, [sp, #40]	; 0x28
    54e8:	ldr	r9, [pc, #908]	; 587c <rb_des_init+0x7ec>
    54ec:	add	r9, pc, r9
    54f0:	ldr	r3, [pc, #904]	; 5880 <rb_des_init+0x7f0>
    54f4:	add	r3, pc, r3
    54f8:	ldr	r2, [pc, #900]	; 5884 <rb_des_init+0x7f4>
    54fc:	add	r2, pc, r2
    5500:	str	r2, [sp, #24]
    5504:	ldr	r2, [pc, #892]	; 5888 <rb_des_init+0x7f8>
    5508:	add	r2, pc, r2
    550c:	str	r2, [sp, #28]
    5510:	str	fp, [sp, #84]	; 0x54
    5514:	mov	fp, r3
    5518:	b	5608 <rb_des_init+0x578>
    551c:	add	r0, r9, r0, lsl #2
    5520:	ldr	r0, [r0, #-96]	; 0xffffffa0
    5524:	ldr	r3, [r7]
    5528:	orr	r0, r3, r0
    552c:	str	r0, [r7]
    5530:	add	r1, r1, #1
    5534:	cmp	r2, sl
    5538:	beq	5574 <rb_des_init+0x4e4>
    553c:	ldrb	r0, [r2], #1
    5540:	tst	r0, ip
    5544:	beq	5530 <rb_des_init+0x4a0>
    5548:	ldrb	r0, [r1]
    554c:	cmp	r0, #255	; 0xff
    5550:	beq	5530 <rb_des_init+0x4a0>
    5554:	cmp	r0, #27
    5558:	bgt	551c <rb_des_init+0x48c>
    555c:	add	r0, fp, r0, lsl #2
    5560:	ldr	r0, [r0, #16]
    5564:	ldr	r3, [r8]
    5568:	orr	r0, r3, r0
    556c:	str	r0, [r8]
    5570:	b	5530 <rb_des_init+0x4a0>
    5574:	ldr	r3, [sp, #20]
    5578:	mov	r7, r6
    557c:	mov	r2, #0
    5580:	str	r2, [r6]
    5584:	mov	r0, r5
    5588:	str	r2, [r5]
    558c:	ldr	r2, [sp, #32]
    5590:	b	55b8 <rb_des_init+0x528>
    5594:	ldr	r8, [sp, #24]
    5598:	add	r1, r8, r1, lsl #2
    559c:	ldr	r8, [r0]
    55a0:	ldr	r1, [r1, #-64]	; 0xffffffc0
    55a4:	orr	r1, r8, r1
    55a8:	str	r1, [r0]
    55ac:	add	r2, r2, #1
    55b0:	cmp	r3, sl
    55b4:	beq	55f4 <rb_des_init+0x564>
    55b8:	ldrb	r1, [r3], #1
    55bc:	tst	r1, ip
    55c0:	beq	55ac <rb_des_init+0x51c>
    55c4:	ldrb	r1, [r2]
    55c8:	cmp	r1, #255	; 0xff
    55cc:	beq	55ac <rb_des_init+0x51c>
    55d0:	cmp	r1, #23
    55d4:	bgt	5594 <rb_des_init+0x504>
    55d8:	ldr	r8, [sp, #28]
    55dc:	add	r1, r8, r1, lsl #2
    55e0:	ldr	r8, [r7]
    55e4:	ldr	r1, [r1, #32]
    55e8:	orr	r1, r8, r1
    55ec:	str	r1, [r7]
    55f0:	b	55ac <rb_des_init+0x51c>
    55f4:	add	ip, ip, #1
    55f8:	add	r5, r5, #4
    55fc:	add	r6, r6, #4
    5600:	cmp	ip, #128	; 0x80
    5604:	beq	5644 <rb_des_init+0x5b4>
    5608:	add	lr, lr, #4
    560c:	mov	r8, lr
    5610:	mov	r3, #0
    5614:	str	r3, [lr]
    5618:	add	r4, r4, #4
    561c:	mov	r7, r4
    5620:	str	r3, [r4]
    5624:	ldr	r3, [sp, #40]	; 0x28
    5628:	add	r3, r3, #1
    562c:	ldr	r2, [sp]
    5630:	add	sl, r2, #8
    5634:	ldr	r1, [sp, #36]	; 0x24
    5638:	mov	r2, r3
    563c:	str	r3, [sp, #20]
    5640:	b	553c <rb_des_init+0x4ac>
    5644:	ldr	fp, [sp, #84]	; 0x54
    5648:	ldr	r3, [sp, #32]
    564c:	add	r3, r3, #7
    5650:	str	r3, [sp, #32]
    5654:	ldr	r2, [sp, #36]	; 0x24
    5658:	add	r2, r2, #8
    565c:	str	r2, [sp, #36]	; 0x24
    5660:	ldr	r2, [sp, #44]	; 0x2c
    5664:	add	r2, r2, #512	; 0x200
    5668:	str	r2, [sp, #44]	; 0x2c
    566c:	ldr	r2, [sp, #48]	; 0x30
    5670:	add	r2, r2, #512	; 0x200
    5674:	str	r2, [sp, #48]	; 0x30
    5678:	ldr	r2, [sp, #52]	; 0x34
    567c:	add	r2, r2, #512	; 0x200
    5680:	str	r2, [sp, #52]	; 0x34
    5684:	ldr	r2, [sp, #56]	; 0x38
    5688:	add	r2, r2, #512	; 0x200
    568c:	str	r2, [sp, #56]	; 0x38
    5690:	ldr	r2, [sp, #60]	; 0x3c
    5694:	add	r2, r2, #1024	; 0x400
    5698:	str	r2, [sp, #60]	; 0x3c
    569c:	ldr	r2, [sp, #64]	; 0x40
    56a0:	add	r2, r2, #1024	; 0x400
    56a4:	str	r2, [sp, #64]	; 0x40
    56a8:	ldr	r2, [sp, #68]	; 0x44
    56ac:	add	r2, r2, #1024	; 0x400
    56b0:	str	r2, [sp, #68]	; 0x44
    56b4:	ldr	r2, [sp, #72]	; 0x48
    56b8:	add	r2, r2, #1024	; 0x400
    56bc:	str	r2, [sp, #72]	; 0x48
    56c0:	ldr	r2, [sp, #76]	; 0x4c
    56c4:	add	r2, r2, #8
    56c8:	str	r2, [sp, #76]	; 0x4c
    56cc:	add	fp, fp, #8
    56d0:	ldr	r2, [sp, #80]	; 0x50
    56d4:	cmp	r3, r2
    56d8:	beq	56fc <rb_des_init+0x66c>
    56dc:	ldr	sl, [sp, #72]	; 0x48
    56e0:	ldr	r9, [sp, #68]	; 0x44
    56e4:	ldr	r8, [sp, #64]	; 0x40
    56e8:	ldr	r7, [sp, #60]	; 0x3c
    56ec:	mov	r0, #0
    56f0:	str	r7, [sp, #20]
    56f4:	ldr	r7, [sp, #76]	; 0x4c
    56f8:	b	5478 <rb_des_init+0x3e8>
    56fc:	ldr	r3, [pc, #392]	; 588c <rb_des_init+0x7fc>
    5700:	add	r3, pc, r3
    5704:	add	r3, r3, #816	; 0x330
    5708:	sub	ip, r3, #1
    570c:	add	r3, r3, #31
    5710:	mov	r1, ip
    5714:	ldr	lr, [pc, #372]	; 5890 <rb_des_init+0x800>
    5718:	add	lr, pc, lr
    571c:	add	r1, r1, #1
    5720:	mov	r2, r1
    5724:	ldrb	r0, [r2], #-1
    5728:	add	r0, lr, r0
    572c:	sub	r2, r2, ip
    5730:	strb	r2, [r0, #787]	; 0x313
    5734:	cmp	r3, r1
    5738:	bne	571c <rb_des_init+0x68c>
    573c:	ldr	r8, [pc, #336]	; 5894 <rb_des_init+0x804>
    5740:	add	r8, pc, r8
    5744:	add	r5, r8, #788	; 0x314
    5748:	ldr	r7, [pc, #328]	; 5898 <rb_des_init+0x808>
    574c:	add	r7, pc, r7
    5750:	sub	r7, r7, #4
    5754:	add	r8, r8, #820	; 0x334
    5758:	mov	r6, #0
    575c:	ldr	lr, [pc, #312]	; 589c <rb_des_init+0x80c>
    5760:	add	lr, pc, lr
    5764:	ldr	r9, [sp]
    5768:	b	57d0 <rb_des_init+0x740>
    576c:	add	r2, r2, #1
    5770:	cmp	r3, sl
    5774:	beq	579c <rb_des_init+0x70c>
    5778:	ldrb	r1, [r3], #1
    577c:	tst	r1, r0
    5780:	beq	576c <rb_des_init+0x6dc>
    5784:	ldrb	fp, [r2]
    5788:	ldr	r1, [ip]
    578c:	ldr	fp, [lr, fp, lsl #2]
    5790:	orr	r1, r1, fp
    5794:	str	r1, [ip]
    5798:	b	576c <rb_des_init+0x6dc>
    579c:	add	r0, r0, #1
    57a0:	cmp	r0, #256	; 0x100
    57a4:	beq	57c0 <rb_des_init+0x730>
    57a8:	add	r4, r4, #4
    57ac:	mov	ip, r4
    57b0:	str	r6, [r4]
    57b4:	mov	r2, r5
    57b8:	mov	r3, r9
    57bc:	b	5778 <rb_des_init+0x6e8>
    57c0:	add	r5, r5, #8
    57c4:	add	r7, r7, #1024	; 0x400
    57c8:	cmp	r5, r8
    57cc:	beq	57dc <rb_des_init+0x74c>
    57d0:	mov	r4, r7
    57d4:	mov	r0, #0
    57d8:	b	57a8 <rb_des_init+0x718>
    57dc:	ldr	r3, [pc, #188]	; 58a0 <rb_des_init+0x810>
    57e0:	add	r3, pc, r3
    57e4:	mov	r2, #1
    57e8:	str	r2, [r3]
    57ec:	add	sp, sp, #92	; 0x5c
    57f0:	ldrd	r4, [sp]
    57f4:	ldrd	r6, [sp, #8]
    57f8:	ldrd	r8, [sp, #16]
    57fc:	ldrd	sl, [sp, #24]
    5800:	add	sp, sp, #32
    5804:	pop	{pc}		; (ldr pc, [sp], #4)
    5808:	.word	0x00025430
    580c:	.word	0x00025404
    5810:	.word	0x000111dc
    5814:	.word	0x000111bc
    5818:	.word	0x00025374
    581c:	.word	0x00026824
    5820:	.word	0x000110cc
    5824:	.word	0x000252c8
    5828:	.word	0x000252a8
    582c:	.word	0x00011060
    5830:	.word	0x0002525c
    5834:	.word	0x00025244
    5838:	.word	0x00011008
    583c:	.word	0x000251fc
    5840:	.word	0x000251d4
    5844:	.word	0x0002d694
    5848:	.word	0x0002c684
    584c:	.word	0x0002a674
    5850:	.word	0x0002b668
    5854:	.word	0x0003465c
    5858:	.word	0x0003264c
    585c:	.word	0x0003063c
    5860:	.word	0x0002e62c
    5864:	.word	0x00010f24
    5868:	.word	0x00010f14
    586c:	.word	0x00010f08
    5870:	.word	0x00010efc
    5874:	.word	0x00010ef0
    5878:	.word	0x00010ddc
    587c:	.word	0x00010dcc
    5880:	.word	0x00010dc4
    5884:	.word	0x00010dbc
    5888:	.word	0x00010db0
    588c:	.word	0x00010bb8
    5890:	.word	0x00024dac
    5894:	.word	0x00024d84
    5898:	.word	0x00025250
    589c:	.word	0x00010b58
    58a0:	.word	0x00024ce4

000058a4 <_crypt_to64>:
    58a4:	cmp	r2, #0
    58a8:	ble	58d4 <_crypt_to64+0x30>
    58ac:	add	r2, r0, r2
    58b0:	ldr	ip, [pc, #32]	; 58d8 <_crypt_to64+0x34>
    58b4:	add	ip, pc, ip
    58b8:	and	r3, r1, #63	; 0x3f
    58bc:	add	r3, ip, r3
    58c0:	ldrb	r3, [r3, #848]	; 0x350
    58c4:	strb	r3, [r0], #1
    58c8:	lsr	r1, r1, #6
    58cc:	cmp	r2, r0
    58d0:	bne	58b8 <_crypt_to64+0x14>
    58d4:	bx	lr
    58d8:	.word	0x00010a04

000058dc <rb_sha256_process_block>:
    58dc:	strd	r4, [sp, #-36]!	; 0xffffffdc
    58e0:	strd	r6, [sp, #8]
    58e4:	strd	r8, [sp, #16]
    58e8:	strd	sl, [sp, #24]
    58ec:	str	lr, [sp, #32]
    58f0:	sub	sp, sp, #316	; 0x13c
    58f4:	str	r2, [sp, #52]	; 0x34
    58f8:	lsr	r3, r1, #2
    58fc:	str	r3, [sp, #40]	; 0x28
    5900:	ldr	r3, [r2]
    5904:	str	r3, [sp, #4]
    5908:	ldr	r3, [r2, #4]
    590c:	str	r3, [sp, #8]
    5910:	ldr	r3, [r2, #8]
    5914:	str	r3, [sp, #12]
    5918:	ldr	r3, [r2, #12]
    591c:	str	r3, [sp, #16]
    5920:	ldr	r3, [r2, #16]
    5924:	str	r3, [sp, #20]
    5928:	ldr	r3, [r2, #20]
    592c:	str	r3, [sp, #24]
    5930:	ldr	r3, [r2, #24]
    5934:	str	r3, [sp, #28]
    5938:	ldr	r3, [r2, #28]
    593c:	str	r3, [sp, #32]
    5940:	ldr	r3, [r2, #32]
    5944:	add	r3, r1, r3
    5948:	str	r3, [r2, #32]
    594c:	cmp	r3, r1
    5950:	bcs	5960 <rb_sha256_process_block+0x84>
    5954:	ldr	r3, [r2, #36]	; 0x24
    5958:	add	r3, r3, #1
    595c:	str	r3, [r2, #36]	; 0x24
    5960:	cmp	r1, #3
    5964:	bls	5b44 <rb_sha256_process_block+0x268>
    5968:	add	r3, r0, #60	; 0x3c
    596c:	str	r3, [sp, #36]	; 0x24
    5970:	add	r3, sp, #248	; 0xf8
    5974:	str	r3, [sp, #48]	; 0x30
    5978:	ldr	r3, [pc, #548]	; 5ba4 <rb_sha256_process_block+0x2c8>
    597c:	add	r3, pc, r3
    5980:	str	r3, [sp, #44]	; 0x2c
    5984:	add	sl, r3, #1168	; 0x490
    5988:	b	5a8c <rb_sha256_process_block+0x1b0>
    598c:	mov	r5, r7
    5990:	mov	r7, r0
    5994:	mov	r0, fp
    5998:	mov	lr, r4
    599c:	mov	r4, ip
    59a0:	mov	ip, r3
    59a4:	ror	r2, r0, #11
    59a8:	eor	r2, r2, r0, ror #6
    59ac:	eor	r2, r2, r0, ror #25
    59b0:	ldr	r3, [r6, #4]!
    59b4:	ldr	fp, [r8, #4]!
    59b8:	add	r3, r3, fp
    59bc:	add	r2, r2, r3
    59c0:	bic	r3, r5, r0
    59c4:	and	fp, r0, r7
    59c8:	eor	r3, r3, fp
    59cc:	add	r3, r2, r3
    59d0:	add	r3, r3, r1
    59d4:	ror	r2, ip, #13
    59d8:	eor	r2, r2, ip, ror #2
    59dc:	eor	r2, r2, ip, ror #22
    59e0:	eor	r1, r4, lr
    59e4:	and	r1, r1, ip
    59e8:	and	fp, r4, lr
    59ec:	eor	r1, r1, fp
    59f0:	add	r2, r2, r1
    59f4:	add	fp, r3, r9
    59f8:	add	r3, r3, r2
    59fc:	mov	r9, lr
    5a00:	mov	r1, r5
    5a04:	cmp	sl, r6
    5a08:	bne	598c <rb_sha256_process_block+0xb0>
    5a0c:	mov	r2, r3
    5a10:	ldr	r3, [sp, #4]
    5a14:	add	r3, r3, r2
    5a18:	str	r3, [sp, #4]
    5a1c:	ldr	r3, [sp, #8]
    5a20:	add	r3, r3, ip
    5a24:	str	r3, [sp, #8]
    5a28:	ldr	r3, [sp, #12]
    5a2c:	add	r3, r3, r4
    5a30:	str	r3, [sp, #12]
    5a34:	ldr	r3, [sp, #16]
    5a38:	add	r3, r3, lr
    5a3c:	str	r3, [sp, #16]
    5a40:	ldr	r3, [sp, #20]
    5a44:	add	r3, r3, fp
    5a48:	str	r3, [sp, #20]
    5a4c:	ldr	r3, [sp, #24]
    5a50:	add	r3, r3, r0
    5a54:	str	r3, [sp, #24]
    5a58:	ldr	r3, [sp, #28]
    5a5c:	add	r3, r3, r7
    5a60:	str	r3, [sp, #28]
    5a64:	ldr	r3, [sp, #32]
    5a68:	add	r3, r3, r5
    5a6c:	str	r3, [sp, #32]
    5a70:	ldr	r3, [sp, #36]	; 0x24
    5a74:	add	r3, r3, #64	; 0x40
    5a78:	str	r3, [sp, #36]	; 0x24
    5a7c:	ldr	r3, [sp, #40]	; 0x28
    5a80:	subs	r3, r3, #16
    5a84:	str	r3, [sp, #40]	; 0x28
    5a88:	beq	5b44 <rb_sha256_process_block+0x268>
    5a8c:	ldr	lr, [sp, #36]	; 0x24
    5a90:	sub	r0, lr, #64	; 0x40
    5a94:	add	r8, sp, #52	; 0x34
    5a98:	mov	ip, r8
    5a9c:	ldr	r3, [r0, #4]!
    5aa0:	lsr	r2, r3, #24
    5aa4:	orr	r2, r2, r3, lsl #24
    5aa8:	lsl	r1, r3, #8
    5aac:	and	r1, r1, #16711680	; 0xff0000
    5ab0:	orr	r2, r2, r1
    5ab4:	lsr	r3, r3, #8
    5ab8:	and	r3, r3, #65280	; 0xff00
    5abc:	orr	r3, r2, r3
    5ac0:	str	r3, [ip, #4]!
    5ac4:	cmp	lr, r0
    5ac8:	bne	5a9c <rb_sha256_process_block+0x1c0>
    5acc:	add	r2, sp, #56	; 0x38
    5ad0:	ldr	ip, [sp, #48]	; 0x30
    5ad4:	mov	lr, r2
    5ad8:	ldr	r1, [r2, #56]	; 0x38
    5adc:	ldr	r0, [r2, #4]!
    5ae0:	ror	r3, r1, #19
    5ae4:	eor	r3, r3, r1, ror #17
    5ae8:	eor	r3, r3, r1, lsr #10
    5aec:	ldr	r1, [lr, #36]	; 0x24
    5af0:	ldr	lr, [lr]
    5af4:	add	r1, r1, lr
    5af8:	add	r3, r3, r1
    5afc:	ror	r1, r0, #18
    5b00:	eor	r1, r1, r0, ror #7
    5b04:	eor	r1, r1, r0, lsr #3
    5b08:	add	r3, r3, r1
    5b0c:	str	r3, [r2, #60]	; 0x3c
    5b10:	cmp	ip, r2
    5b14:	bne	5ad4 <rb_sha256_process_block+0x1f8>
    5b18:	ldr	r3, [sp, #44]	; 0x2c
    5b1c:	add	r6, r3, #912	; 0x390
    5b20:	ldr	r1, [sp, #32]
    5b24:	ldr	r5, [sp, #28]
    5b28:	ldr	r7, [sp, #24]
    5b2c:	ldr	r0, [sp, #20]
    5b30:	ldr	r9, [sp, #16]
    5b34:	ldr	lr, [sp, #12]
    5b38:	ldr	r4, [sp, #8]
    5b3c:	ldr	ip, [sp, #4]
    5b40:	b	59a4 <rb_sha256_process_block+0xc8>
    5b44:	ldr	r3, [sp, #52]	; 0x34
    5b48:	ldr	r2, [sp, #4]
    5b4c:	str	r2, [r3]
    5b50:	ldr	r2, [sp, #8]
    5b54:	str	r2, [r3, #4]
    5b58:	ldr	r2, [sp, #12]
    5b5c:	str	r2, [r3, #8]
    5b60:	ldr	r2, [sp, #16]
    5b64:	str	r2, [r3, #12]
    5b68:	ldr	r2, [sp, #20]
    5b6c:	str	r2, [r3, #16]
    5b70:	ldr	r2, [sp, #24]
    5b74:	str	r2, [r3, #20]
    5b78:	ldr	r2, [sp, #28]
    5b7c:	str	r2, [r3, #24]
    5b80:	ldr	r2, [sp, #32]
    5b84:	str	r2, [r3, #28]
    5b88:	add	sp, sp, #316	; 0x13c
    5b8c:	ldrd	r4, [sp]
    5b90:	ldrd	r6, [sp, #8]
    5b94:	ldrd	r8, [sp, #16]
    5b98:	ldrd	sl, [sp, #24]
    5b9c:	add	sp, sp, #32
    5ba0:	pop	{pc}		; (ldr pc, [sp], #4)
    5ba4:	.word	0x0001093c

00005ba8 <rb_sha256_init_ctx>:
    5ba8:	movw	r3, #58983	; 0xe667
    5bac:	movt	r3, #27145	; 0x6a09
    5bb0:	str	r3, [r0]
    5bb4:	movw	r3, #44677	; 0xae85
    5bb8:	movt	r3, #47975	; 0xbb67
    5bbc:	str	r3, [r0, #4]
    5bc0:	movw	r3, #62322	; 0xf372
    5bc4:	movt	r3, #15470	; 0x3c6e
    5bc8:	str	r3, [r0, #8]
    5bcc:	movw	r3, #62778	; 0xf53a
    5bd0:	movt	r3, #42319	; 0xa54f
    5bd4:	str	r3, [r0, #12]
    5bd8:	movw	r3, #21119	; 0x527f
    5bdc:	movt	r3, #20750	; 0x510e
    5be0:	str	r3, [r0, #16]
    5be4:	movw	r3, #26764	; 0x688c
    5be8:	movt	r3, #39685	; 0x9b05
    5bec:	str	r3, [r0, #20]
    5bf0:	movw	r3, #55723	; 0xd9ab
    5bf4:	movt	r3, #8067	; 0x1f83
    5bf8:	str	r3, [r0, #24]
    5bfc:	movw	r3, #52505	; 0xcd19
    5c00:	movt	r3, #23520	; 0x5be0
    5c04:	str	r3, [r0, #28]
    5c08:	mov	r3, #0
    5c0c:	str	r3, [r0, #36]	; 0x24
    5c10:	str	r3, [r0, #32]
    5c14:	str	r3, [r0, #40]	; 0x28
    5c18:	bx	lr

00005c1c <rb_sha512_process_block>:
    5c1c:	strd	r4, [sp, #-36]!	; 0xffffffdc
    5c20:	strd	r6, [sp, #8]
    5c24:	strd	r8, [sp, #16]
    5c28:	strd	sl, [sp, #24]
    5c2c:	str	lr, [sp, #32]
    5c30:	sub	sp, sp, #780	; 0x30c
    5c34:	mov	r6, r2
    5c38:	str	r2, [sp, #132]	; 0x84
    5c3c:	lsr	r3, r1, #3
    5c40:	str	r3, [sp, #120]	; 0x78
    5c44:	ldr	r3, [r2]
    5c48:	str	r3, [sp, #52]	; 0x34
    5c4c:	ldr	r3, [r2, #4]
    5c50:	str	r3, [sp, #56]	; 0x38
    5c54:	ldr	r3, [r2, #8]
    5c58:	str	r3, [sp, #60]	; 0x3c
    5c5c:	ldr	r3, [r2, #12]
    5c60:	str	r3, [sp, #64]	; 0x40
    5c64:	ldr	r3, [r2, #16]
    5c68:	str	r3, [sp, #68]	; 0x44
    5c6c:	ldr	r3, [r2, #20]
    5c70:	str	r3, [sp, #72]	; 0x48
    5c74:	ldr	r3, [r2, #24]
    5c78:	str	r3, [sp, #76]	; 0x4c
    5c7c:	ldr	r3, [r2, #28]
    5c80:	str	r3, [sp, #80]	; 0x50
    5c84:	ldr	r3, [r2, #32]
    5c88:	str	r3, [sp, #84]	; 0x54
    5c8c:	ldr	r3, [r2, #36]	; 0x24
    5c90:	str	r3, [sp, #88]	; 0x58
    5c94:	ldr	r3, [r2, #40]	; 0x28
    5c98:	str	r3, [sp, #92]	; 0x5c
    5c9c:	ldr	r3, [r2, #44]	; 0x2c
    5ca0:	str	r3, [sp, #96]	; 0x60
    5ca4:	ldr	r3, [r2, #48]	; 0x30
    5ca8:	str	r3, [sp, #100]	; 0x64
    5cac:	ldr	r3, [r2, #52]	; 0x34
    5cb0:	str	r3, [sp, #104]	; 0x68
    5cb4:	ldr	r3, [r2, #56]	; 0x38
    5cb8:	str	r3, [sp, #108]	; 0x6c
    5cbc:	ldr	r3, [r2, #60]	; 0x3c
    5cc0:	str	r3, [sp, #112]	; 0x70
    5cc4:	mov	r3, #0
    5cc8:	ldr	lr, [r6, #64]	; 0x40
    5ccc:	ldr	ip, [r6, #68]	; 0x44
    5cd0:	adds	r4, r1, lr
    5cd4:	adc	r5, r3, ip
    5cd8:	strd	r4, [r6, #64]	; 0x40
    5cdc:	cmp	r3, r5
    5ce0:	cmpeq	r1, r4
    5ce4:	bls	5d00 <rb_sha512_process_block+0xe4>
    5ce8:	ldr	r3, [r6, #72]	; 0x48
    5cec:	ldr	r2, [r6, #76]	; 0x4c
    5cf0:	adds	r3, r3, #1
    5cf4:	adc	r2, r2, #0
    5cf8:	str	r3, [r6, #72]	; 0x48
    5cfc:	str	r2, [r6, #76]	; 0x4c
    5d00:	cmp	r1, #7
    5d04:	bls	616c <rb_sha512_process_block+0x550>
    5d08:	add	r3, r0, #120	; 0x78
    5d0c:	str	r3, [sp, #116]	; 0x74
    5d10:	add	r3, sp, #648	; 0x288
    5d14:	str	r3, [sp, #128]	; 0x80
    5d18:	ldr	r3, [pc, #1260]	; 620c <rb_sha512_process_block+0x5f0>
    5d1c:	add	r3, pc, r3
    5d20:	str	r3, [sp, #124]	; 0x7c
    5d24:	add	r3, r3, #1808	; 0x710
    5d28:	str	r3, [sp, #48]	; 0x30
    5d2c:	b	5fc4 <rb_sha512_process_block+0x3a8>
    5d30:	ldr	r3, [sp, #20]
    5d34:	str	r3, [sp, #8]
    5d38:	ldr	r3, [sp, #24]
    5d3c:	str	r3, [sp, #12]
    5d40:	str	r1, [sp, #20]
    5d44:	str	r0, [sp, #24]
    5d48:	mov	r1, r9
    5d4c:	mov	r0, lr
    5d50:	ldr	r3, [sp, #16]
    5d54:	str	r3, [sp]
    5d58:	ldr	fp, [sp, #4]
    5d5c:	str	r4, [sp, #16]
    5d60:	str	r5, [sp, #4]
    5d64:	mov	r4, ip
    5d68:	mov	r5, r6
    5d6c:	lsr	ip, r1, #14
    5d70:	orr	ip, ip, r0, lsl #18
    5d74:	lsr	lr, r0, #14
    5d78:	orr	lr, lr, r1, lsl #18
    5d7c:	lsr	r3, r1, #18
    5d80:	orr	r3, r3, r0, lsl #14
    5d84:	lsr	r2, r0, #18
    5d88:	orr	r2, r2, r1, lsl #14
    5d8c:	eor	ip, ip, r3
    5d90:	eor	lr, lr, r2
    5d94:	lsl	r2, r0, #23
    5d98:	orr	r2, r2, r1, lsr #9
    5d9c:	lsl	r3, r1, #23
    5da0:	orr	r3, r3, r0, lsr #9
    5da4:	eor	ip, ip, r3
    5da8:	eor	lr, lr, r2
    5dac:	ldrd	r6, [sl, #8]!
    5db0:	ldr	r3, [sp, #28]
    5db4:	ldrd	r8, [r3, #8]!
    5db8:	str	r3, [sp, #28]
    5dbc:	adds	r3, r6, r8
    5dc0:	adc	r2, r7, r9
    5dc4:	adds	ip, ip, r3
    5dc8:	adc	lr, lr, r2
    5dcc:	ldr	r3, [sp, #8]
    5dd0:	bic	r7, r3, r1
    5dd4:	ldr	r2, [sp, #12]
    5dd8:	bic	r2, r2, r0
    5ddc:	ldr	r6, [sp, #20]
    5de0:	and	r3, r1, r6
    5de4:	ldr	r6, [sp, #24]
    5de8:	and	r6, r0, r6
    5dec:	eor	r3, r3, r7
    5df0:	eor	r2, r2, r6
    5df4:	adds	r3, ip, r3
    5df8:	adc	r2, lr, r2
    5dfc:	ldr	ip, [sp, #40]	; 0x28
    5e00:	adds	r3, r3, ip
    5e04:	ldr	ip, [sp, #44]	; 0x2c
    5e08:	adc	r2, r2, ip
    5e0c:	lsr	lr, r4, #28
    5e10:	orr	lr, lr, r5, lsl #4
    5e14:	lsr	r7, r5, #28
    5e18:	orr	r7, r7, r4, lsl #4
    5e1c:	lsl	r6, r5, #30
    5e20:	orr	r6, r6, r4, lsr #2
    5e24:	lsl	ip, r4, #30
    5e28:	orr	ip, ip, r5, lsr #2
    5e2c:	eor	lr, lr, ip
    5e30:	eor	r7, r7, r6
    5e34:	lsl	r6, r5, #25
    5e38:	orr	r6, r6, r4, lsr #7
    5e3c:	lsl	ip, r4, #25
    5e40:	orr	ip, ip, r5, lsr #7
    5e44:	eor	lr, lr, ip
    5e48:	eor	r7, r7, r6
    5e4c:	ldr	r6, [sp, #16]
    5e50:	ldr	ip, [sp]
    5e54:	eor	r9, r6, ip
    5e58:	ldr	r8, [sp, #4]
    5e5c:	eor	r8, r8, fp
    5e60:	and	r9, r9, r4
    5e64:	and	r8, r8, r5
    5e68:	and	ip, r6, ip
    5e6c:	ldr	r6, [sp, #4]
    5e70:	and	r6, r6, fp
    5e74:	eor	ip, ip, r9
    5e78:	eor	r6, r6, r8
    5e7c:	adds	ip, lr, ip
    5e80:	adc	r6, r7, r6
    5e84:	ldr	lr, [sp, #32]
    5e88:	adds	r9, r3, lr
    5e8c:	ldr	lr, [sp, #36]	; 0x24
    5e90:	adc	lr, r2, lr
    5e94:	adds	ip, r3, ip
    5e98:	adc	r6, r2, r6
    5e9c:	ldr	r3, [sp]
    5ea0:	str	r3, [sp, #32]
    5ea4:	str	fp, [sp, #36]	; 0x24
    5ea8:	ldr	r3, [sp, #8]
    5eac:	str	r3, [sp, #40]	; 0x28
    5eb0:	ldr	r2, [sp, #12]
    5eb4:	str	r2, [sp, #44]	; 0x2c
    5eb8:	ldr	r3, [sp, #48]	; 0x30
    5ebc:	cmp	r3, sl
    5ec0:	bne	5d30 <rb_sha512_process_block+0x114>
    5ec4:	mov	r7, lr
    5ec8:	mov	lr, ip
    5ecc:	ldr	r3, [sp, #52]	; 0x34
    5ed0:	adds	r3, r3, lr
    5ed4:	str	r3, [sp, #52]	; 0x34
    5ed8:	ldr	r3, [sp, #56]	; 0x38
    5edc:	adc	r3, r3, r6
    5ee0:	str	r3, [sp, #56]	; 0x38
    5ee4:	ldr	r3, [sp, #60]	; 0x3c
    5ee8:	adds	r3, r3, r4
    5eec:	str	r3, [sp, #60]	; 0x3c
    5ef0:	ldr	r3, [sp, #64]	; 0x40
    5ef4:	adc	r3, r3, r5
    5ef8:	str	r3, [sp, #64]	; 0x40
    5efc:	ldr	r3, [sp, #68]	; 0x44
    5f00:	ldr	r2, [sp, #16]
    5f04:	adds	r3, r3, r2
    5f08:	str	r3, [sp, #68]	; 0x44
    5f0c:	ldr	r3, [sp, #72]	; 0x48
    5f10:	ldr	r2, [sp, #4]
    5f14:	adc	r3, r3, r2
    5f18:	str	r3, [sp, #72]	; 0x48
    5f1c:	ldr	r3, [sp, #76]	; 0x4c
    5f20:	ldr	r2, [sp]
    5f24:	adds	r3, r3, r2
    5f28:	str	r3, [sp, #76]	; 0x4c
    5f2c:	ldr	r3, [sp, #80]	; 0x50
    5f30:	adc	r3, r3, fp
    5f34:	str	r3, [sp, #80]	; 0x50
    5f38:	ldr	r3, [sp, #84]	; 0x54
    5f3c:	adds	r3, r3, r9
    5f40:	str	r3, [sp, #84]	; 0x54
    5f44:	ldr	r3, [sp, #88]	; 0x58
    5f48:	adc	r3, r3, r7
    5f4c:	str	r3, [sp, #88]	; 0x58
    5f50:	ldr	r3, [sp, #92]	; 0x5c
    5f54:	adds	r3, r3, r1
    5f58:	str	r3, [sp, #92]	; 0x5c
    5f5c:	ldr	r3, [sp, #96]	; 0x60
    5f60:	adc	r3, r3, r0
    5f64:	str	r3, [sp, #96]	; 0x60
    5f68:	ldr	r3, [sp, #100]	; 0x64
    5f6c:	ldr	r2, [sp, #20]
    5f70:	adds	r3, r3, r2
    5f74:	str	r3, [sp, #100]	; 0x64
    5f78:	ldr	r3, [sp, #104]	; 0x68
    5f7c:	ldr	r2, [sp, #24]
    5f80:	adc	r3, r3, r2
    5f84:	str	r3, [sp, #104]	; 0x68
    5f88:	ldr	r3, [sp, #108]	; 0x6c
    5f8c:	ldr	r2, [sp, #8]
    5f90:	adds	r3, r3, r2
    5f94:	str	r3, [sp, #108]	; 0x6c
    5f98:	ldr	r3, [sp, #112]	; 0x70
    5f9c:	ldr	r2, [sp, #12]
    5fa0:	adc	r3, r3, r2
    5fa4:	str	r3, [sp, #112]	; 0x70
    5fa8:	ldr	r3, [sp, #116]	; 0x74
    5fac:	add	r3, r3, #128	; 0x80
    5fb0:	str	r3, [sp, #116]	; 0x74
    5fb4:	ldr	r3, [sp, #120]	; 0x78
    5fb8:	subs	r3, r3, #16
    5fbc:	str	r3, [sp, #120]	; 0x78
    5fc0:	beq	616c <rb_sha512_process_block+0x550>
    5fc4:	ldr	ip, [sp, #116]	; 0x74
    5fc8:	sub	r1, ip, #128	; 0x80
    5fcc:	add	r3, sp, #128	; 0x80
    5fd0:	str	r3, [sp, #28]
    5fd4:	mov	lr, r3
    5fd8:	ldr	r0, [r1, #8]!
    5fdc:	ldr	r2, [r1, #4]
    5fe0:	lsl	r3, r0, #8
    5fe4:	and	r3, r3, #16711680	; 0xff0000
    5fe8:	orr	r3, r3, r0, lsl #24
    5fec:	lsr	r4, r0, #8
    5ff0:	and	r4, r4, #65280	; 0xff00
    5ff4:	orr	r3, r3, r4
    5ff8:	orr	r3, r3, r0, lsr #24
    5ffc:	lsr	r4, r2, #8
    6000:	lsl	r0, r2, #24
    6004:	orr	r0, r0, r2, lsr #24
    6008:	lsl	r2, r2, #8
    600c:	and	r2, r2, #16711680	; 0xff0000
    6010:	orr	r2, r0, r2
    6014:	and	r0, r4, #65280	; 0xff00
    6018:	orr	r2, r2, r0
    601c:	str	r2, [lr, #8]!
    6020:	str	r3, [lr, #4]
    6024:	cmp	ip, r1
    6028:	bne	5fd8 <rb_sha512_process_block+0x3bc>
    602c:	add	r1, sp, #136	; 0x88
    6030:	ldr	r4, [sp, #128]	; 0x80
    6034:	mov	r6, r1
    6038:	ldr	ip, [r1, #112]	; 0x70
    603c:	ldr	r7, [r1, #116]	; 0x74
    6040:	ldr	r0, [r1, #8]
    6044:	ldr	r5, [r1, #12]
    6048:	add	r1, r1, #8
    604c:	lsr	lr, ip, #19
    6050:	orr	lr, lr, r7, lsl #13
    6054:	lsr	r2, r7, #19
    6058:	orr	r2, r2, ip, lsl #13
    605c:	lsl	r8, r7, #3
    6060:	orr	r8, r8, ip, lsr #29
    6064:	lsl	r3, ip, #3
    6068:	orr	r3, r3, r7, lsr #29
    606c:	eor	r3, r3, lr
    6070:	eor	r2, r2, r8
    6074:	lsr	ip, ip, #6
    6078:	orr	ip, ip, r7, lsl #26
    607c:	eor	r3, r3, ip
    6080:	eor	r2, r2, r7, lsr #6
    6084:	ldr	ip, [r6, #72]	; 0x48
    6088:	ldr	lr, [r6, #76]	; 0x4c
    608c:	ldr	r7, [r6]
    6090:	ldr	r6, [r6, #4]
    6094:	adds	ip, ip, r7
    6098:	adc	lr, lr, r6
    609c:	adds	r3, r3, ip
    60a0:	adc	r2, r2, lr
    60a4:	lsr	ip, r0, #1
    60a8:	orr	ip, ip, r5, lsl #31
    60ac:	lsr	lr, r5, #1
    60b0:	orr	lr, lr, r0, lsl #31
    60b4:	lsr	r7, r0, #8
    60b8:	orr	r7, r7, r5, lsl #24
    60bc:	lsr	r6, r5, #8
    60c0:	orr	r6, r6, r0, lsl #24
    60c4:	eor	ip, ip, r7
    60c8:	eor	lr, lr, r6
    60cc:	lsr	r0, r0, #7
    60d0:	orr	r0, r0, r5, lsl #25
    60d4:	eor	r0, r0, ip
    60d8:	eor	ip, lr, r5, lsr #7
    60dc:	adds	r0, r3, r0
    60e0:	adc	r2, r2, ip
    60e4:	str	r0, [r1, #120]	; 0x78
    60e8:	str	r2, [r1, #124]	; 0x7c
    60ec:	cmp	r4, r1
    60f0:	bne	6034 <rb_sha512_process_block+0x418>
    60f4:	ldr	r3, [sp, #124]	; 0x7c
    60f8:	add	sl, r3, #1168	; 0x490
    60fc:	ldr	r3, [sp, #108]	; 0x6c
    6100:	str	r3, [sp, #40]	; 0x28
    6104:	ldr	r3, [sp, #112]	; 0x70
    6108:	str	r3, [sp, #44]	; 0x2c
    610c:	ldr	r3, [sp, #100]	; 0x64
    6110:	str	r3, [sp, #8]
    6114:	ldr	r3, [sp, #104]	; 0x68
    6118:	str	r3, [sp, #12]
    611c:	ldr	r3, [sp, #92]	; 0x5c
    6120:	str	r3, [sp, #20]
    6124:	ldr	r3, [sp, #96]	; 0x60
    6128:	str	r3, [sp, #24]
    612c:	ldr	r1, [sp, #84]	; 0x54
    6130:	ldr	r0, [sp, #88]	; 0x58
    6134:	ldr	r3, [sp, #76]	; 0x4c
    6138:	str	r3, [sp, #32]
    613c:	ldr	r3, [sp, #80]	; 0x50
    6140:	str	r3, [sp, #36]	; 0x24
    6144:	ldr	r3, [sp, #68]	; 0x44
    6148:	str	r3, [sp]
    614c:	ldr	fp, [sp, #72]	; 0x48
    6150:	ldr	r3, [sp, #60]	; 0x3c
    6154:	str	r3, [sp, #16]
    6158:	ldr	r3, [sp, #64]	; 0x40
    615c:	str	r3, [sp, #4]
    6160:	ldr	r4, [sp, #52]	; 0x34
    6164:	ldr	r5, [sp, #56]	; 0x38
    6168:	b	5d6c <rb_sha512_process_block+0x150>
    616c:	ldr	r3, [sp, #132]	; 0x84
    6170:	ldr	r2, [sp, #52]	; 0x34
    6174:	str	r2, [r3]
    6178:	ldr	r2, [sp, #56]	; 0x38
    617c:	str	r2, [r3, #4]
    6180:	ldr	r2, [sp, #60]	; 0x3c
    6184:	str	r2, [r3, #8]
    6188:	ldr	r2, [sp, #64]	; 0x40
    618c:	str	r2, [r3, #12]
    6190:	ldr	r2, [sp, #68]	; 0x44
    6194:	str	r2, [r3, #16]
    6198:	ldr	r2, [sp, #72]	; 0x48
    619c:	str	r2, [r3, #20]
    61a0:	ldr	r2, [sp, #76]	; 0x4c
    61a4:	str	r2, [r3, #24]
    61a8:	ldr	r2, [sp, #80]	; 0x50
    61ac:	str	r2, [r3, #28]
    61b0:	ldr	r2, [sp, #84]	; 0x54
    61b4:	str	r2, [r3, #32]
    61b8:	ldr	r2, [sp, #88]	; 0x58
    61bc:	str	r2, [r3, #36]	; 0x24
    61c0:	ldr	r2, [sp, #92]	; 0x5c
    61c4:	str	r2, [r3, #40]	; 0x28
    61c8:	ldr	r2, [sp, #96]	; 0x60
    61cc:	str	r2, [r3, #44]	; 0x2c
    61d0:	ldr	r2, [sp, #100]	; 0x64
    61d4:	str	r2, [r3, #48]	; 0x30
    61d8:	ldr	r2, [sp, #104]	; 0x68
    61dc:	str	r2, [r3, #52]	; 0x34
    61e0:	ldr	r2, [sp, #108]	; 0x6c
    61e4:	str	r2, [r3, #56]	; 0x38
    61e8:	ldr	r2, [sp, #112]	; 0x70
    61ec:	str	r2, [r3, #60]	; 0x3c
    61f0:	add	sp, sp, #780	; 0x30c
    61f4:	ldrd	r4, [sp]
    61f8:	ldrd	r6, [sp, #8]
    61fc:	ldrd	r8, [sp, #16]
    6200:	ldrd	sl, [sp, #24]
    6204:	add	sp, sp, #32
    6208:	pop	{pc}		; (ldr pc, [sp], #4)
    620c:	.word	0x0001059c

00006210 <rb_sha512_init_ctx>:
    6210:	add	r3, pc, #112	; 0x70
    6214:	ldrd	r2, [r3]
    6218:	strd	r2, [r0]
    621c:	add	r3, pc, #108	; 0x6c
    6220:	ldrd	r2, [r3]
    6224:	strd	r2, [r0, #8]
    6228:	add	r3, pc, #104	; 0x68
    622c:	ldrd	r2, [r3]
    6230:	strd	r2, [r0, #16]
    6234:	add	r3, pc, #100	; 0x64
    6238:	ldrd	r2, [r3]
    623c:	strd	r2, [r0, #24]
    6240:	add	r3, pc, #96	; 0x60
    6244:	ldrd	r2, [r3]
    6248:	strd	r2, [r0, #32]
    624c:	add	r3, pc, #92	; 0x5c
    6250:	ldrd	r2, [r3]
    6254:	strd	r2, [r0, #40]	; 0x28
    6258:	add	r3, pc, #88	; 0x58
    625c:	ldrd	r2, [r3]
    6260:	strd	r2, [r0, #48]	; 0x30
    6264:	add	r3, pc, #84	; 0x54
    6268:	ldrd	r2, [r3]
    626c:	strd	r2, [r0, #56]	; 0x38
    6270:	mov	r2, #0
    6274:	mov	r3, #0
    6278:	strd	r2, [r0, #72]	; 0x48
    627c:	strd	r2, [r0, #64]	; 0x40
    6280:	strd	r2, [r0, #80]	; 0x50
    6284:	bx	lr
    6288:	.word	0xf3bcc908
    628c:	.word	0x6a09e667
    6290:	.word	0x84caa73b
    6294:	.word	0xbb67ae85
    6298:	.word	0xfe94f82b
    629c:	.word	0x3c6ef372
    62a0:	.word	0x5f1d36f1
    62a4:	.word	0xa54ff53a
    62a8:	.word	0xade682d1
    62ac:	.word	0x510e527f
    62b0:	.word	0x2b3e6c1f
    62b4:	.word	0x9b05688c
    62b8:	.word	0xfb41bd6b
    62bc:	.word	0x1f83d9ab
    62c0:	.word	0x137e2179
    62c4:	.word	0x5be0cd19

000062c8 <MD5Transform>:
    62c8:	strd	r4, [sp, #-36]!	; 0xffffffdc
    62cc:	strd	r6, [sp, #8]
    62d0:	strd	r8, [sp, #16]
    62d4:	strd	sl, [sp, #24]
    62d8:	str	lr, [sp, #32]
    62dc:	sub	sp, sp, #108	; 0x6c
    62e0:	ldr	sl, [r1]
    62e4:	movw	r3, #42104	; 0xa478
    62e8:	movt	r3, #55146	; 0xd76a
    62ec:	add	r3, sl, r3
    62f0:	ldr	r2, [r0]
    62f4:	add	r2, r3, r2
    62f8:	ldr	r3, [r0, #8]
    62fc:	ldr	ip, [r0, #12]
    6300:	eor	r3, r3, ip
    6304:	ldr	ip, [r0, #4]
    6308:	and	r3, r3, ip
    630c:	ldr	ip, [r0, #12]
    6310:	eor	r3, r3, ip
    6314:	add	r3, r3, r2
    6318:	ldr	r2, [r0, #4]
    631c:	add	r3, r2, r3, ror #25
    6320:	ldr	fp, [r1, #4]
    6324:	movw	lr, #46934	; 0xb756
    6328:	movt	lr, #59591	; 0xe8c7
    632c:	add	lr, fp, lr
    6330:	add	r2, lr, ip
    6334:	ldr	ip, [r0, #4]
    6338:	ldr	lr, [r0, #8]
    633c:	eor	lr, ip, lr
    6340:	and	lr, lr, r3
    6344:	ldr	ip, [r0, #8]
    6348:	eor	lr, lr, ip
    634c:	add	lr, lr, r2
    6350:	add	lr, r3, lr, ror #20
    6354:	ldr	r2, [r1, #8]
    6358:	movw	ip, #28891	; 0x70db
    635c:	movt	ip, #9248	; 0x2420
    6360:	str	r2, [sp]
    6364:	add	ip, r2, ip
    6368:	ldr	r4, [r0, #8]
    636c:	add	r2, ip, r4
    6370:	ldr	ip, [r0, #4]
    6374:	eor	ip, ip, r3
    6378:	and	ip, ip, lr
    637c:	ldr	r4, [r0, #4]
    6380:	eor	ip, ip, r4
    6384:	add	ip, ip, r2
    6388:	add	ip, lr, ip, ror #15
    638c:	ldr	r4, [r1, #12]
    6390:	mov	r5, r4
    6394:	movw	r4, #52974	; 0xceee
    6398:	movt	r4, #49597	; 0xc1bd
    639c:	str	r5, [sp, #4]
    63a0:	add	r4, r5, r4
    63a4:	ldr	r6, [r0, #4]
    63a8:	add	r4, r4, r6
    63ac:	eor	r2, r3, lr
    63b0:	and	r2, r2, ip
    63b4:	eor	r2, r2, r3
    63b8:	add	r2, r2, r4
    63bc:	add	r2, ip, r2, ror #10
    63c0:	ldr	r6, [r1, #16]
    63c4:	movw	r4, #4015	; 0xfaf
    63c8:	movt	r4, #62844	; 0xf57c
    63cc:	str	r6, [sp, #8]
    63d0:	add	r4, r6, r4
    63d4:	add	r4, r4, r3
    63d8:	eor	r3, lr, ip
    63dc:	and	r3, r3, r2
    63e0:	eor	r3, r3, lr
    63e4:	add	r3, r3, r4
    63e8:	add	r3, r2, r3, ror #25
    63ec:	ldr	r7, [r1, #20]
    63f0:	movw	r4, #50730	; 0xc62a
    63f4:	movt	r4, #18311	; 0x4787
    63f8:	str	r7, [sp, #12]
    63fc:	add	r4, r7, r4
    6400:	add	r4, r4, lr
    6404:	eor	lr, ip, r2
    6408:	and	lr, lr, r3
    640c:	eor	lr, lr, ip
    6410:	add	lr, lr, r4
    6414:	add	lr, r3, lr, ror #20
    6418:	ldr	r8, [r1, #24]
    641c:	mov	r7, r8
    6420:	movw	r4, #17939	; 0x4613
    6424:	movt	r4, #43056	; 0xa830
    6428:	add	r4, r8, r4
    642c:	add	r4, r4, ip
    6430:	eor	ip, r2, r3
    6434:	and	ip, ip, lr
    6438:	eor	ip, ip, r2
    643c:	add	ip, ip, r4
    6440:	add	ip, lr, ip, ror #15
    6444:	ldr	r9, [r1, #28]
    6448:	movw	r4, #38145	; 0x9501
    644c:	movt	r4, #64838	; 0xfd46
    6450:	add	r4, r9, r4
    6454:	add	r4, r4, r2
    6458:	eor	r2, r3, lr
    645c:	and	r2, r2, ip
    6460:	eor	r2, r2, r3
    6464:	add	r2, r2, r4
    6468:	add	r2, ip, r2, ror #10
    646c:	ldr	r8, [r1, #32]
    6470:	movw	r4, #39128	; 0x98d8
    6474:	movt	r4, #27008	; 0x6980
    6478:	str	r8, [sp, #16]
    647c:	add	r4, r8, r4
    6480:	add	r4, r4, r3
    6484:	eor	r3, lr, ip
    6488:	and	r3, r3, r2
    648c:	eor	r3, r3, lr
    6490:	add	r3, r3, r4
    6494:	add	r3, r2, r3, ror #25
    6498:	ldr	r4, [r1, #36]	; 0x24
    649c:	mov	r5, r4
    64a0:	movw	r4, #63407	; 0xf7af
    64a4:	movt	r4, #35652	; 0x8b44
    64a8:	str	r5, [sp, #20]
    64ac:	add	r4, r5, r4
    64b0:	add	r4, r4, lr
    64b4:	eor	lr, ip, r2
    64b8:	and	lr, lr, r3
    64bc:	eor	lr, lr, ip
    64c0:	add	lr, lr, r4
    64c4:	add	lr, r3, lr, ror #20
    64c8:	ldr	r6, [r1, #40]	; 0x28
    64cc:	sub	r4, r6, #41984	; 0xa400
    64d0:	sub	r4, r4, #79	; 0x4f
    64d4:	add	r4, r4, ip
    64d8:	eor	ip, r2, r3
    64dc:	and	ip, ip, lr
    64e0:	eor	ip, ip, r2
    64e4:	add	ip, ip, r4
    64e8:	add	ip, lr, ip, ror #15
    64ec:	ldr	r4, [r1, #44]	; 0x2c
    64f0:	mov	r8, r4
    64f4:	movw	r4, #55230	; 0xd7be
    64f8:	movt	r4, #35164	; 0x895c
    64fc:	str	r8, [sp, #24]
    6500:	add	r4, r8, r4
    6504:	add	r4, r4, r2
    6508:	eor	r2, r3, lr
    650c:	and	r2, r2, ip
    6510:	eor	r2, r2, r3
    6514:	add	r2, r2, r4
    6518:	add	r2, ip, r2, ror #10
    651c:	ldr	r5, [r1, #48]	; 0x30
    6520:	movw	r4, #4386	; 0x1122
    6524:	movt	r4, #27536	; 0x6b90
    6528:	str	r5, [sp, #36]	; 0x24
    652c:	add	r4, r5, r4
    6530:	add	r4, r4, r3
    6534:	eor	r3, lr, ip
    6538:	and	r3, r3, r2
    653c:	eor	r3, r3, lr
    6540:	add	r3, r3, r4
    6544:	add	r3, r2, r3, ror #25
    6548:	ldr	r4, [r1, #52]	; 0x34
    654c:	movw	r5, #29075	; 0x7193
    6550:	movt	r5, #64920	; 0xfd98
    6554:	add	r5, r4, r5
    6558:	add	lr, r5, lr
    655c:	eor	r5, ip, r2
    6560:	and	r5, r5, r3
    6564:	eor	r5, r5, ip
    6568:	add	lr, r5, lr
    656c:	add	lr, r3, lr, ror #20
    6570:	ldr	r8, [r1, #56]	; 0x38
    6574:	movw	r5, #17294	; 0x438e
    6578:	movt	r5, #42617	; 0xa679
    657c:	add	r5, r8, r5
    6580:	add	r5, r5, ip
    6584:	eor	ip, r2, r3
    6588:	and	ip, ip, lr
    658c:	eor	ip, ip, r2
    6590:	add	ip, ip, r5
    6594:	add	ip, lr, ip, ror #15
    6598:	ldr	r5, [r1, #60]	; 0x3c
    659c:	movw	r1, #2081	; 0x821
    65a0:	movt	r1, #18868	; 0x49b4
    65a4:	add	r1, r5, r1
    65a8:	add	r1, r1, r2
    65ac:	eor	r2, r3, lr
    65b0:	and	r2, r2, ip
    65b4:	eor	r2, r2, r3
    65b8:	add	r2, r2, r1
    65bc:	add	r2, ip, r2, ror #10
    65c0:	movw	r1, #9570	; 0x2562
    65c4:	movt	r1, #63006	; 0xf61e
    65c8:	str	fp, [sp, #28]
    65cc:	add	r1, fp, r1
    65d0:	add	r1, r1, r3
    65d4:	eor	r3, ip, r2
    65d8:	and	r3, r3, lr
    65dc:	eor	r3, r3, ip
    65e0:	add	r3, r3, r1
    65e4:	add	r3, r2, r3, ror #27
    65e8:	movw	r1, #45888	; 0xb340
    65ec:	movt	r1, #49216	; 0xc040
    65f0:	str	r7, [sp, #32]
    65f4:	add	r1, r7, r1
    65f8:	add	lr, r1, lr
    65fc:	eor	r1, r2, r3
    6600:	and	r1, r1, ip
    6604:	eor	r1, r1, r2
    6608:	add	r1, r1, lr
    660c:	add	r1, r3, r1, ror #23
    6610:	movw	lr, #23121	; 0x5a51
    6614:	movt	lr, #9822	; 0x265e
    6618:	ldr	fp, [sp, #24]
    661c:	add	lr, fp, lr
    6620:	add	lr, lr, ip
    6624:	eor	ip, r3, r1
    6628:	and	ip, ip, r2
    662c:	eor	ip, ip, r3
    6630:	add	ip, ip, lr
    6634:	add	ip, r1, ip, ror #18
    6638:	movw	lr, #51114	; 0xc7aa
    663c:	movt	lr, #59830	; 0xe9b6
    6640:	add	lr, sl, lr
    6644:	add	lr, lr, r2
    6648:	eor	r2, r1, ip
    664c:	and	r2, r2, r3
    6650:	eor	r2, r2, r1
    6654:	add	r2, r2, lr
    6658:	add	r2, ip, r2, ror #12
    665c:	movw	lr, #4189	; 0x105d
    6660:	movt	lr, #54831	; 0xd62f
    6664:	ldr	fp, [sp, #12]
    6668:	add	lr, fp, lr
    666c:	add	lr, lr, r3
    6670:	eor	r3, ip, r2
    6674:	and	r3, r3, r1
    6678:	eor	r3, r3, ip
    667c:	add	r3, r3, lr
    6680:	add	r3, r2, r3, ror #27
    6684:	movw	lr, #5203	; 0x1453
    6688:	movt	lr, #580	; 0x244
    668c:	add	lr, r6, lr
    6690:	add	lr, lr, r1
    6694:	eor	r1, r2, r3
    6698:	and	r1, r1, ip
    669c:	eor	r1, r1, r2
    66a0:	add	r1, r1, lr
    66a4:	add	r1, r3, r1, ror #23
    66a8:	movw	lr, #59009	; 0xe681
    66ac:	movt	lr, #55457	; 0xd8a1
    66b0:	add	lr, r5, lr
    66b4:	add	lr, lr, ip
    66b8:	eor	ip, r3, r1
    66bc:	and	ip, ip, r2
    66c0:	eor	ip, ip, r3
    66c4:	add	ip, ip, lr
    66c8:	add	ip, r1, ip, ror #18
    66cc:	movw	lr, #64456	; 0xfbc8
    66d0:	movt	lr, #59347	; 0xe7d3
    66d4:	ldr	fp, [sp, #8]
    66d8:	add	lr, fp, lr
    66dc:	add	lr, lr, r2
    66e0:	eor	r2, r1, ip
    66e4:	and	r2, r2, r3
    66e8:	eor	r2, r2, r1
    66ec:	add	r2, r2, lr
    66f0:	add	r2, ip, r2, ror #12
    66f4:	movw	lr, #52710	; 0xcde6
    66f8:	movt	lr, #8673	; 0x21e1
    66fc:	ldr	r7, [sp, #20]
    6700:	add	lr, r7, lr
    6704:	add	lr, lr, r3
    6708:	eor	r3, ip, r2
    670c:	and	r3, r3, r1
    6710:	eor	r3, r3, ip
    6714:	add	r3, r3, lr
    6718:	add	r3, r2, r3, ror #27
    671c:	movw	lr, #2006	; 0x7d6
    6720:	movt	lr, #49975	; 0xc337
    6724:	add	lr, r8, lr
    6728:	add	lr, lr, r1
    672c:	eor	r1, r2, r3
    6730:	and	r1, r1, ip
    6734:	eor	r1, r1, r2
    6738:	add	r1, r1, lr
    673c:	add	r1, r3, r1, ror #23
    6740:	movw	lr, #3463	; 0xd87
    6744:	movt	lr, #62677	; 0xf4d5
    6748:	ldr	fp, [sp, #4]
    674c:	add	lr, fp, lr
    6750:	add	ip, lr, ip
    6754:	eor	lr, r3, r1
    6758:	and	lr, lr, r2
    675c:	eor	lr, lr, r3
    6760:	add	ip, lr, ip
    6764:	add	ip, r1, ip, ror #18
    6768:	movw	lr, #5357	; 0x14ed
    676c:	movt	lr, #17754	; 0x455a
    6770:	ldr	r7, [sp, #16]
    6774:	add	lr, r7, lr
    6778:	add	r2, lr, r2
    677c:	eor	lr, r1, ip
    6780:	and	lr, lr, r3
    6784:	eor	lr, lr, r1
    6788:	add	r2, lr, r2
    678c:	add	r2, ip, r2, ror #12
    6790:	movw	lr, #59653	; 0xe905
    6794:	movt	lr, #43491	; 0xa9e3
    6798:	add	lr, r4, lr
    679c:	add	r3, lr, r3
    67a0:	eor	lr, ip, r2
    67a4:	and	lr, lr, r1
    67a8:	eor	lr, lr, ip
    67ac:	add	r3, lr, r3
    67b0:	add	r3, r2, r3, ror #27
    67b4:	movw	lr, #41976	; 0xa3f8
    67b8:	movt	lr, #64751	; 0xfcef
    67bc:	ldr	fp, [sp]
    67c0:	add	lr, fp, lr
    67c4:	add	r1, lr, r1
    67c8:	eor	lr, r2, r3
    67cc:	and	lr, lr, ip
    67d0:	eor	lr, lr, r2
    67d4:	add	r1, lr, r1
    67d8:	add	r1, r3, r1, ror #23
    67dc:	movw	lr, #729	; 0x2d9
    67e0:	movt	lr, #26479	; 0x676f
    67e4:	add	lr, r9, lr
    67e8:	add	ip, lr, ip
    67ec:	eor	lr, r3, r1
    67f0:	and	lr, lr, r2
    67f4:	eor	lr, lr, r3
    67f8:	add	lr, lr, ip
    67fc:	add	lr, r1, lr, ror #18
    6800:	eor	ip, r1, lr
    6804:	movw	fp, #19594	; 0x4c8a
    6808:	movt	fp, #36138	; 0x8d2a
    680c:	ldr	r7, [sp, #36]	; 0x24
    6810:	add	fp, r7, fp
    6814:	add	fp, fp, r2
    6818:	and	r2, r3, ip
    681c:	eor	r2, r2, r1
    6820:	add	r2, r2, fp
    6824:	add	r2, lr, r2, ror #12
    6828:	movw	fp, #14658	; 0x3942
    682c:	movt	fp, #65530	; 0xfffa
    6830:	ldr	r7, [sp, #12]
    6834:	add	fp, r7, fp
    6838:	add	r3, fp, r3
    683c:	eor	ip, ip, r2
    6840:	add	r3, ip, r3
    6844:	add	r3, r2, r3, ror #28
    6848:	movw	ip, #63105	; 0xf681
    684c:	movt	ip, #34673	; 0x8771
    6850:	ldr	r7, [sp, #16]
    6854:	add	ip, r7, ip
    6858:	add	r1, ip, r1
    685c:	eor	ip, lr, r2
    6860:	eor	ip, ip, r3
    6864:	add	r1, ip, r1
    6868:	add	r1, r3, r1, ror #21
    686c:	movw	ip, #24866	; 0x6122
    6870:	movt	ip, #28061	; 0x6d9d
    6874:	ldr	fp, [sp, #24]
    6878:	add	ip, fp, ip
    687c:	add	lr, ip, lr
    6880:	eor	ip, r2, r3
    6884:	eor	ip, ip, r1
    6888:	add	lr, ip, lr
    688c:	add	lr, r1, lr, ror #16
    6890:	movw	ip, #14348	; 0x380c
    6894:	movt	ip, #64997	; 0xfde5
    6898:	add	ip, r8, ip
    689c:	add	r2, ip, r2
    68a0:	eor	ip, r3, r1
    68a4:	eor	ip, ip, lr
    68a8:	add	r2, ip, r2
    68ac:	add	r2, lr, r2, ror #9
    68b0:	movw	fp, #59972	; 0xea44
    68b4:	movt	fp, #42174	; 0xa4be
    68b8:	ldr	ip, [sp, #28]
    68bc:	add	fp, ip, fp
    68c0:	add	r3, fp, r3
    68c4:	eor	ip, r1, lr
    68c8:	eor	ip, ip, r2
    68cc:	add	r3, ip, r3
    68d0:	add	r3, r2, r3, ror #28
    68d4:	movw	ip, #53161	; 0xcfa9
    68d8:	movt	ip, #19422	; 0x4bde
    68dc:	ldr	fp, [sp, #8]
    68e0:	add	ip, fp, ip
    68e4:	add	r1, ip, r1
    68e8:	eor	ip, lr, r2
    68ec:	eor	ip, ip, r3
    68f0:	add	r1, ip, r1
    68f4:	add	r1, r3, r1, ror #21
    68f8:	movw	ip, #19296	; 0x4b60
    68fc:	movt	ip, #63163	; 0xf6bb
    6900:	add	ip, r9, ip
    6904:	add	lr, ip, lr
    6908:	eor	ip, r2, r3
    690c:	eor	ip, ip, r1
    6910:	add	lr, ip, lr
    6914:	add	ip, r1, lr, ror #16
    6918:	movw	lr, #48240	; 0xbc70
    691c:	movt	lr, #48831	; 0xbebf
    6920:	add	lr, r6, lr
    6924:	add	r2, lr, r2
    6928:	eor	lr, r3, r1
    692c:	eor	lr, lr, ip
    6930:	add	r2, lr, r2
    6934:	add	r2, ip, r2, ror #9
    6938:	movw	lr, #32454	; 0x7ec6
    693c:	movt	lr, #10395	; 0x289b
    6940:	add	lr, r4, lr
    6944:	add	r3, lr, r3
    6948:	eor	lr, r1, ip
    694c:	eor	lr, lr, r2
    6950:	add	r3, lr, r3
    6954:	add	r3, r2, r3, ror #28
    6958:	movw	lr, #10234	; 0x27fa
    695c:	movt	lr, #60065	; 0xeaa1
    6960:	add	lr, sl, lr
    6964:	add	r1, lr, r1
    6968:	eor	lr, ip, r2
    696c:	eor	lr, lr, r3
    6970:	add	r1, lr, r1
    6974:	add	r1, r3, r1, ror #21
    6978:	movw	lr, #12421	; 0x3085
    697c:	movt	lr, #54511	; 0xd4ef
    6980:	ldr	fp, [sp, #4]
    6984:	add	lr, fp, lr
    6988:	add	ip, lr, ip
    698c:	eor	lr, r2, r3
    6990:	eor	lr, lr, r1
    6994:	add	ip, lr, ip
    6998:	add	ip, r1, ip, ror #16
    699c:	movw	lr, #7429	; 0x1d05
    69a0:	movt	lr, #1160	; 0x488
    69a4:	ldr	r7, [sp, #32]
    69a8:	add	lr, r7, lr
    69ac:	add	r2, lr, r2
    69b0:	eor	lr, r3, r1
    69b4:	eor	lr, lr, ip
    69b8:	add	r2, lr, r2
    69bc:	add	lr, ip, r2, ror #9
    69c0:	movw	r2, #53305	; 0xd039
    69c4:	movt	r2, #55764	; 0xd9d4
    69c8:	ldr	r7, [sp, #20]
    69cc:	add	r2, r7, r2
    69d0:	add	r3, r2, r3
    69d4:	eor	r2, r1, ip
    69d8:	eor	r2, r2, lr
    69dc:	add	r3, r2, r3
    69e0:	add	r2, lr, r3, ror #28
    69e4:	movw	r3, #39397	; 0x99e5
    69e8:	movt	r3, #59099	; 0xe6db
    69ec:	ldr	r7, [sp, #36]	; 0x24
    69f0:	add	r3, r7, r3
    69f4:	add	r1, r3, r1
    69f8:	eor	r3, ip, lr
    69fc:	eor	r3, r3, r2
    6a00:	add	r1, r3, r1
    6a04:	add	r1, r2, r1, ror #21
    6a08:	movw	r3, #31992	; 0x7cf8
    6a0c:	movt	r3, #8098	; 0x1fa2
    6a10:	add	r3, r5, r3
    6a14:	add	ip, r3, ip
    6a18:	eor	r3, lr, r2
    6a1c:	eor	r3, r3, r1
    6a20:	add	ip, r3, ip
    6a24:	add	ip, r1, ip, ror #16
    6a28:	movw	r3, #22117	; 0x5665
    6a2c:	movt	r3, #50348	; 0xc4ac
    6a30:	ldr	fp, [sp]
    6a34:	add	r3, fp, r3
    6a38:	add	lr, r3, lr
    6a3c:	eor	r3, r2, r1
    6a40:	eor	r3, r3, ip
    6a44:	add	r3, r3, lr
    6a48:	add	r3, ip, r3, ror #9
    6a4c:	movw	lr, #8772	; 0x2244
    6a50:	movt	lr, #62505	; 0xf429
    6a54:	add	lr, sl, lr
    6a58:	add	r2, lr, r2
    6a5c:	mvn	sl, r1
    6a60:	orr	sl, sl, r3
    6a64:	eor	sl, sl, ip
    6a68:	add	r2, sl, r2
    6a6c:	add	r2, r3, r2, ror #26
    6a70:	movw	lr, #65431	; 0xff97
    6a74:	movt	lr, #17194	; 0x432a
    6a78:	add	lr, r9, lr
    6a7c:	add	r1, lr, r1
    6a80:	mvn	r9, ip
    6a84:	orr	r9, r9, r2
    6a88:	eor	r9, r9, r3
    6a8c:	add	r1, r9, r1
    6a90:	add	r1, r2, r1, ror #22
    6a94:	movw	lr, #9127	; 0x23a7
    6a98:	movt	lr, #43924	; 0xab94
    6a9c:	add	lr, r8, lr
    6aa0:	add	ip, lr, ip
    6aa4:	mvn	r8, r3
    6aa8:	orr	r8, r8, r1
    6aac:	eor	r8, r8, r2
    6ab0:	add	ip, r8, ip
    6ab4:	add	ip, r1, ip, ror #17
    6ab8:	movw	lr, #41017	; 0xa039
    6abc:	movt	lr, #64659	; 0xfc93
    6ac0:	ldr	r8, [sp, #12]
    6ac4:	add	lr, r8, lr
    6ac8:	add	r3, lr, r3
    6acc:	mvn	r8, r2
    6ad0:	orr	r8, r8, ip
    6ad4:	eor	r8, r8, r1
    6ad8:	add	r3, r8, r3
    6adc:	add	r3, ip, r3, ror #11
    6ae0:	movw	lr, #22979	; 0x59c3
    6ae4:	movt	lr, #25947	; 0x655b
    6ae8:	add	lr, r7, lr
    6aec:	add	r2, lr, r2
    6af0:	mvn	r7, r1
    6af4:	orr	r7, r7, r3
    6af8:	eor	r7, r7, ip
    6afc:	add	r2, r7, r2
    6b00:	add	r2, r3, r2, ror #26
    6b04:	movw	lr, #52370	; 0xcc92
    6b08:	movt	lr, #36620	; 0x8f0c
    6b0c:	ldr	r7, [sp, #4]
    6b10:	add	lr, r7, lr
    6b14:	add	r1, lr, r1
    6b18:	mvn	r7, ip
    6b1c:	orr	r7, r7, r2
    6b20:	eor	r7, r7, r3
    6b24:	add	r1, r7, r1
    6b28:	add	r1, r2, r1, ror #22
    6b2c:	movw	lr, #62589	; 0xf47d
    6b30:	movt	lr, #65519	; 0xffef
    6b34:	add	lr, r6, lr
    6b38:	add	ip, lr, ip
    6b3c:	mvn	r6, r3
    6b40:	orr	r6, r6, r1
    6b44:	eor	r6, r6, r2
    6b48:	add	ip, r6, ip
    6b4c:	add	ip, r1, ip, ror #17
    6b50:	movw	lr, #24017	; 0x5dd1
    6b54:	movt	lr, #34180	; 0x8584
    6b58:	ldr	fp, [sp, #28]
    6b5c:	add	lr, fp, lr
    6b60:	add	r3, lr, r3
    6b64:	mvn	r6, r2
    6b68:	orr	r6, r6, ip
    6b6c:	eor	r6, r6, r1
    6b70:	add	r3, r6, r3
    6b74:	add	r3, ip, r3, ror #11
    6b78:	movw	lr, #32335	; 0x7e4f
    6b7c:	movt	lr, #28584	; 0x6fa8
    6b80:	ldr	r8, [sp, #16]
    6b84:	add	lr, r8, lr
    6b88:	add	r2, lr, r2
    6b8c:	mvn	r6, r1
    6b90:	orr	r6, r6, r3
    6b94:	eor	r6, r6, ip
    6b98:	add	r2, r6, r2
    6b9c:	add	r2, r3, r2, ror #26
    6ba0:	movw	lr, #59104	; 0xe6e0
    6ba4:	movt	lr, #65068	; 0xfe2c
    6ba8:	add	lr, r5, lr
    6bac:	add	r1, lr, r1
    6bb0:	mvn	r5, ip
    6bb4:	orr	r5, r5, r2
    6bb8:	eor	r5, r5, r3
    6bbc:	add	r1, r5, r1
    6bc0:	add	r1, r2, r1, ror #22
    6bc4:	movw	lr, #17172	; 0x4314
    6bc8:	movt	lr, #41729	; 0xa301
    6bcc:	ldr	r7, [sp, #32]
    6bd0:	add	lr, r7, lr
    6bd4:	add	ip, lr, ip
    6bd8:	mvn	r5, r3
    6bdc:	orr	r5, r5, r1
    6be0:	eor	r5, r5, r2
    6be4:	add	ip, r5, ip
    6be8:	add	ip, r1, ip, ror #17
    6bec:	movw	lr, #4513	; 0x11a1
    6bf0:	movt	lr, #19976	; 0x4e08
    6bf4:	add	lr, r4, lr
    6bf8:	add	lr, lr, r3
    6bfc:	mvn	r3, r2
    6c00:	orr	r3, r3, ip
    6c04:	eor	r3, r3, r1
    6c08:	add	r3, r3, lr
    6c0c:	add	r3, ip, r3, ror #11
    6c10:	movw	lr, #32386	; 0x7e82
    6c14:	movt	lr, #63315	; 0xf753
    6c18:	ldr	r6, [sp, #8]
    6c1c:	add	lr, r6, lr
    6c20:	add	lr, lr, r2
    6c24:	mvn	r2, r1
    6c28:	orr	r2, r2, r3
    6c2c:	eor	r2, r2, ip
    6c30:	add	r2, r2, lr
    6c34:	add	r2, r3, r2, ror #26
    6c38:	movw	lr, #62005	; 0xf235
    6c3c:	movt	lr, #48442	; 0xbd3a
    6c40:	ldr	r8, [sp, #24]
    6c44:	add	lr, r8, lr
    6c48:	add	lr, lr, r1
    6c4c:	mvn	r1, ip
    6c50:	orr	r1, r1, r2
    6c54:	eor	r1, r1, r3
    6c58:	add	r1, r1, lr
    6c5c:	add	r1, r2, r1, ror #22
    6c60:	movw	lr, #53947	; 0xd2bb
    6c64:	movt	lr, #10967	; 0x2ad7
    6c68:	ldr	fp, [sp]
    6c6c:	add	lr, fp, lr
    6c70:	add	lr, lr, ip
    6c74:	mvn	ip, r3
    6c78:	orr	ip, ip, r1
    6c7c:	eor	ip, ip, r2
    6c80:	add	ip, ip, lr
    6c84:	add	ip, r1, ip, ror #17
    6c88:	movw	lr, #54161	; 0xd391
    6c8c:	movt	lr, #60294	; 0xeb86
    6c90:	ldr	r7, [sp, #20]
    6c94:	add	lr, r7, lr
    6c98:	add	lr, lr, r3
    6c9c:	mvn	r3, r2
    6ca0:	orr	r3, r3, ip
    6ca4:	eor	r3, r3, r1
    6ca8:	add	lr, r3, lr
    6cac:	ldr	r3, [r0]
    6cb0:	add	r2, r3, r2
    6cb4:	str	r2, [r0]
    6cb8:	ldr	r3, [r0, #4]
    6cbc:	add	r3, r3, ip
    6cc0:	add	r3, r3, lr, ror #11
    6cc4:	str	r3, [r0, #4]
    6cc8:	ldr	r3, [r0, #8]
    6ccc:	add	ip, r3, ip
    6cd0:	str	ip, [r0, #8]
    6cd4:	ldr	r3, [r0, #12]
    6cd8:	add	r1, r3, r1
    6cdc:	str	r1, [r0, #12]
    6ce0:	add	sp, sp, #108	; 0x6c
    6ce4:	ldrd	r4, [sp]
    6ce8:	ldrd	r6, [sp, #8]
    6cec:	ldrd	r8, [sp, #16]
    6cf0:	ldrd	sl, [sp, #24]
    6cf4:	add	sp, sp, #32
    6cf8:	pop	{pc}		; (ldr pc, [sp], #4)

00006cfc <MD5Update>:
    6cfc:	strd	r4, [sp, #-32]!	; 0xffffffe0
    6d00:	strd	r6, [sp, #8]
    6d04:	strd	r8, [sp, #16]
    6d08:	str	sl, [sp, #24]
    6d0c:	str	lr, [sp, #28]
    6d10:	mov	r5, r0
    6d14:	mov	r8, r1
    6d18:	mov	r6, r2
    6d1c:	ldr	r3, [r0, #16]
    6d20:	ubfx	r7, r3, #3, #6
    6d24:	lsl	r2, r2, #3
    6d28:	add	r3, r3, r2
    6d2c:	str	r3, [r0, #16]
    6d30:	cmp	r2, r3
    6d34:	bls	6d44 <MD5Update+0x48>
    6d38:	ldr	r3, [r0, #20]
    6d3c:	add	r3, r3, #1
    6d40:	str	r3, [r0, #20]
    6d44:	ldr	r3, [r5, #20]
    6d48:	add	r3, r3, r6, lsr #29
    6d4c:	str	r3, [r5, #20]
    6d50:	rsb	r4, r7, #64	; 0x40
    6d54:	cmp	r6, r4
    6d58:	movcc	r1, #0
    6d5c:	bcs	6d8c <MD5Update+0x90>
    6d60:	add	r0, r7, #24
    6d64:	sub	r2, r6, r1
    6d68:	add	r1, r8, r1
    6d6c:	add	r0, r5, r0
    6d70:	bl	47bc <memcpy@plt>
    6d74:	ldrd	r4, [sp]
    6d78:	ldrd	r6, [sp, #8]
    6d7c:	ldrd	r8, [sp, #16]
    6d80:	ldr	sl, [sp, #24]
    6d84:	add	sp, sp, #28
    6d88:	pop	{pc}		; (ldr pc, [sp], #4)
    6d8c:	add	r0, r7, #24
    6d90:	mov	r2, r4
    6d94:	mov	r1, r8
    6d98:	add	r0, r5, r0
    6d9c:	bl	47bc <memcpy@plt>
    6da0:	mov	r9, r5
    6da4:	add	r1, r5, #24
    6da8:	mov	r0, r5
    6dac:	bl	62c8 <MD5Transform>
    6db0:	rsb	r7, r7, #127	; 0x7f
    6db4:	cmp	r6, r7
    6db8:	bls	6de4 <MD5Update+0xe8>
    6dbc:	add	r1, r8, r4
    6dc0:	mov	r0, r9
    6dc4:	bl	62c8 <MD5Transform>
    6dc8:	add	r1, r4, #64	; 0x40
    6dcc:	add	r3, r4, #127	; 0x7f
    6dd0:	mov	r4, r1
    6dd4:	cmp	r6, r3
    6dd8:	bhi	6dbc <MD5Update+0xc0>
    6ddc:	mov	r7, #0
    6de0:	b	6d60 <MD5Update+0x64>
    6de4:	mov	r1, r4
    6de8:	mov	r7, #0
    6dec:	b	6d60 <MD5Update+0x64>

00006df0 <MD5Final>:
    6df0:	strd	r4, [sp, #-12]!
    6df4:	str	lr, [sp, #8]
    6df8:	sub	sp, sp, #12
    6dfc:	mov	r5, r0
    6e00:	mov	r4, r1
    6e04:	mov	r3, r1
    6e08:	ldr	r2, [r3, #16]!
    6e0c:	ldr	r3, [r3, #4]
    6e10:	str	r2, [sp]
    6e14:	str	r3, [sp, #4]
    6e18:	ldr	r2, [r1, #16]
    6e1c:	ubfx	r2, r2, #3, #6
    6e20:	cmp	r2, #55	; 0x37
    6e24:	rsbls	r2, r2, #56	; 0x38
    6e28:	rsbhi	r2, r2, #120	; 0x78
    6e2c:	ldr	r1, [pc, #88]	; 6e8c <MD5Final+0x9c>
    6e30:	add	r1, pc, r1
    6e34:	mov	r0, r4
    6e38:	bl	6cfc <MD5Update>
    6e3c:	mov	r2, #8
    6e40:	mov	r1, sp
    6e44:	mov	r0, r4
    6e48:	bl	6cfc <MD5Update>
    6e4c:	ldr	r0, [r4]
    6e50:	ldr	r1, [r4, #4]
    6e54:	ldr	r2, [r4, #8]
    6e58:	ldr	r3, [r4, #12]
    6e5c:	str	r0, [r5]
    6e60:	str	r1, [r5, #4]
    6e64:	str	r2, [r5, #8]
    6e68:	str	r3, [r5, #12]
    6e6c:	mov	r2, #88	; 0x58
    6e70:	mov	r1, #0
    6e74:	mov	r0, r4
    6e78:	bl	45dc <memset@plt>
    6e7c:	add	sp, sp, #12
    6e80:	ldrd	r4, [sp]
    6e84:	add	sp, sp, #8
    6e88:	pop	{pc}		; (ldr pc, [sp], #4)
    6e8c:	.word	0x000225e8

00006e90 <rb_sha256_process_bytes>:
    6e90:	strd	r4, [sp, #-36]!	; 0xffffffdc
    6e94:	strd	r6, [sp, #8]
    6e98:	strd	r8, [sp, #16]
    6e9c:	strd	sl, [sp, #24]
    6ea0:	str	lr, [sp, #32]
    6ea4:	sub	sp, sp, #4
    6ea8:	mov	r4, r0
    6eac:	mov	r6, r1
    6eb0:	mov	r5, r2
    6eb4:	ldr	r7, [r2, #40]	; 0x28
    6eb8:	cmp	r7, #0
    6ebc:	bne	6f78 <rb_sha256_process_bytes+0xe8>
    6ec0:	cmp	r6, #63	; 0x3f
    6ec4:	bls	6f54 <rb_sha256_process_bytes+0xc4>
    6ec8:	tst	r4, #3
    6ecc:	beq	6ff4 <rb_sha256_process_bytes+0x164>
    6ed0:	cmp	r6, #64	; 0x40
    6ed4:	bls	7014 <rb_sha256_process_bytes+0x184>
    6ed8:	sub	sl, r6, #65	; 0x41
    6edc:	lsr	sl, sl, #6
    6ee0:	add	r8, sl, #1
    6ee4:	add	r8, r4, r8, lsl #6
    6ee8:	add	r7, r5, #44	; 0x2c
    6eec:	mov	r9, #64	; 0x40
    6ef0:	mov	r3, r4
    6ef4:	mov	r2, r7
    6ef8:	add	fp, r4, #64	; 0x40
    6efc:	ldr	lr, [r3]
    6f00:	ldr	ip, [r3, #4]
    6f04:	ldr	r0, [r3, #8]
    6f08:	ldr	r1, [r3, #12]
    6f0c:	str	lr, [r2]
    6f10:	str	ip, [r2, #4]
    6f14:	str	r0, [r2, #8]
    6f18:	str	r1, [r2, #12]
    6f1c:	add	r3, r3, #16
    6f20:	add	r2, r2, #16
    6f24:	cmp	r3, fp
    6f28:	bne	6efc <rb_sha256_process_bytes+0x6c>
    6f2c:	mov	r2, r5
    6f30:	mov	r1, r9
    6f34:	mov	r0, r7
    6f38:	bl	58dc <rb_sha256_process_block>
    6f3c:	add	r4, r4, #64	; 0x40
    6f40:	cmp	r4, r8
    6f44:	bne	6ef0 <rb_sha256_process_bytes+0x60>
    6f48:	sub	r6, r6, #64	; 0x40
    6f4c:	sub	r6, r6, sl, lsl #6
    6f50:	mov	r4, r8
    6f54:	cmp	r6, #0
    6f58:	bne	7014 <rb_sha256_process_bytes+0x184>
    6f5c:	add	sp, sp, #4
    6f60:	ldrd	r4, [sp]
    6f64:	ldrd	r6, [sp, #8]
    6f68:	ldrd	r8, [sp, #16]
    6f6c:	ldrd	sl, [sp, #24]
    6f70:	add	sp, sp, #32
    6f74:	pop	{pc}		; (ldr pc, [sp], #4)
    6f78:	rsb	r8, r7, #128	; 0x80
    6f7c:	cmp	r8, r1
    6f80:	movcs	r8, r1
    6f84:	add	r0, r7, #44	; 0x2c
    6f88:	mov	r2, r8
    6f8c:	mov	r1, r4
    6f90:	add	r0, r5, r0
    6f94:	bl	47bc <memcpy@plt>
    6f98:	ldr	r1, [r5, #40]	; 0x28
    6f9c:	add	r1, r8, r1
    6fa0:	str	r1, [r5, #40]	; 0x28
    6fa4:	cmp	r1, #64	; 0x40
    6fa8:	bhi	6fb8 <rb_sha256_process_bytes+0x128>
    6fac:	add	r4, r4, r8
    6fb0:	sub	r6, r6, r8
    6fb4:	b	6ec0 <rb_sha256_process_bytes+0x30>
    6fb8:	add	r9, r5, #44	; 0x2c
    6fbc:	mov	r2, r5
    6fc0:	bic	r1, r1, #63	; 0x3f
    6fc4:	mov	r0, r9
    6fc8:	bl	58dc <rb_sha256_process_block>
    6fcc:	ldr	r2, [r5, #40]	; 0x28
    6fd0:	and	r2, r2, #63	; 0x3f
    6fd4:	str	r2, [r5, #40]	; 0x28
    6fd8:	add	r1, r7, r8
    6fdc:	bic	r1, r1, #63	; 0x3f
    6fe0:	add	r1, r1, #44	; 0x2c
    6fe4:	add	r1, r5, r1
    6fe8:	mov	r0, r9
    6fec:	bl	47bc <memcpy@plt>
    6ff0:	b	6fac <rb_sha256_process_bytes+0x11c>
    6ff4:	bic	r7, r6, #63	; 0x3f
    6ff8:	mov	r2, r5
    6ffc:	mov	r1, r7
    7000:	mov	r0, r4
    7004:	bl	58dc <rb_sha256_process_block>
    7008:	add	r4, r4, r7
    700c:	and	r6, r6, #63	; 0x3f
    7010:	b	6f54 <rb_sha256_process_bytes+0xc4>
    7014:	ldr	r7, [r5, #40]	; 0x28
    7018:	add	r0, r7, #44	; 0x2c
    701c:	mov	r2, r6
    7020:	mov	r1, r4
    7024:	add	r0, r5, r0
    7028:	bl	47bc <memcpy@plt>
    702c:	add	r6, r7, r6
    7030:	cmp	r6, #63	; 0x3f
    7034:	bhi	7040 <rb_sha256_process_bytes+0x1b0>
    7038:	str	r6, [r5, #40]	; 0x28
    703c:	b	6f5c <rb_sha256_process_bytes+0xcc>
    7040:	add	r4, r5, #44	; 0x2c
    7044:	mov	r2, r5
    7048:	mov	r1, #64	; 0x40
    704c:	mov	r0, r4
    7050:	bl	58dc <rb_sha256_process_block>
    7054:	sub	r6, r6, #64	; 0x40
    7058:	mov	r2, r6
    705c:	add	r1, r5, #108	; 0x6c
    7060:	mov	r0, r4
    7064:	bl	47bc <memcpy@plt>
    7068:	b	7038 <rb_sha256_process_bytes+0x1a8>

0000706c <rb_sha256_finish_ctx>:
    706c:	strd	r4, [sp, #-24]!	; 0xffffffe8
    7070:	strd	r6, [sp, #8]
    7074:	str	r8, [sp, #16]
    7078:	str	lr, [sp, #20]
    707c:	mov	r5, r0
    7080:	mov	r4, r1
    7084:	ldr	r6, [r0, #40]	; 0x28
    7088:	ldr	r3, [r0, #32]
    708c:	add	r3, r6, r3
    7090:	str	r3, [r0, #32]
    7094:	cmp	r3, r6
    7098:	bcs	70a8 <rb_sha256_finish_ctx+0x3c>
    709c:	ldr	r3, [r0, #36]	; 0x24
    70a0:	add	r3, r3, #1
    70a4:	str	r3, [r0, #36]	; 0x24
    70a8:	cmp	r6, #55	; 0x37
    70ac:	rsbhi	r7, r6, #120	; 0x78
    70b0:	rsbls	r7, r6, #56	; 0x38
    70b4:	add	r0, r6, #44	; 0x2c
    70b8:	mov	r2, r7
    70bc:	ldr	r1, [pc, #212]	; 7198 <rb_sha256_finish_ctx+0x12c>
    70c0:	add	r1, pc, r1
    70c4:	add	r1, r1, #1808	; 0x710
    70c8:	add	r1, r1, #8
    70cc:	add	r0, r5, r0
    70d0:	bl	47bc <memcpy@plt>
    70d4:	add	r1, r7, r6
    70d8:	ldr	r3, [r5, #32]
    70dc:	lsl	ip, r3, #3
    70e0:	add	r2, r5, r1
    70e4:	lsl	r0, r3, #11
    70e8:	and	r0, r0, #16711680	; 0xff0000
    70ec:	orr	r0, r0, ip, lsr #24
    70f0:	orr	r0, r0, r3, lsl #27
    70f4:	lsr	ip, ip, #8
    70f8:	and	ip, ip, #65280	; 0xff00
    70fc:	orr	r0, r0, ip
    7100:	str	r0, [r2, #48]	; 0x30
    7104:	ldr	r0, [r5, #36]	; 0x24
    7108:	lsr	r3, r3, #29
    710c:	orr	r3, r3, r0, lsl #3
    7110:	lsr	r0, r3, #24
    7114:	orr	r0, r0, r3, lsl #24
    7118:	lsl	ip, r3, #8
    711c:	and	ip, ip, #16711680	; 0xff0000
    7120:	orr	r0, r0, ip
    7124:	lsr	r3, r3, #8
    7128:	and	r3, r3, #65280	; 0xff00
    712c:	orr	r3, r0, r3
    7130:	str	r3, [r2, #44]	; 0x2c
    7134:	mov	r2, r5
    7138:	add	r1, r1, #8
    713c:	add	r0, r5, #44	; 0x2c
    7140:	bl	58dc <rb_sha256_process_block>
    7144:	sub	ip, r5, #4
    7148:	sub	r0, r4, #4
    714c:	add	r5, r5, #28
    7150:	ldr	r3, [ip, #4]!
    7154:	lsr	r2, r3, #24
    7158:	orr	r2, r2, r3, lsl #24
    715c:	lsl	r1, r3, #8
    7160:	and	r1, r1, #16711680	; 0xff0000
    7164:	orr	r2, r2, r1
    7168:	lsr	r3, r3, #8
    716c:	and	r3, r3, #65280	; 0xff00
    7170:	orr	r3, r2, r3
    7174:	str	r3, [r0, #4]!
    7178:	cmp	ip, r5
    717c:	bne	7150 <rb_sha256_finish_ctx+0xe4>
    7180:	mov	r0, r4
    7184:	ldrd	r4, [sp]
    7188:	ldrd	r6, [sp, #8]
    718c:	ldr	r8, [sp, #16]
    7190:	add	sp, sp, #20
    7194:	pop	{pc}		; (ldr pc, [sp], #4)
    7198:	.word	0x0000f1f8

0000719c <rb_sha512_process_bytes>:
    719c:	strd	r4, [sp, #-36]!	; 0xffffffdc
    71a0:	strd	r6, [sp, #8]
    71a4:	strd	r8, [sp, #16]
    71a8:	strd	sl, [sp, #24]
    71ac:	str	lr, [sp, #32]
    71b0:	sub	sp, sp, #4
    71b4:	mov	r4, r0
    71b8:	mov	r6, r1
    71bc:	mov	r5, r2
    71c0:	ldrd	sl, [r2, #80]	; 0x50
    71c4:	orrs	r3, sl, fp
    71c8:	bne	7254 <rb_sha512_process_bytes+0xb8>
    71cc:	cmp	r6, #127	; 0x7f
    71d0:	bls	7230 <rb_sha512_process_bytes+0x94>
    71d4:	tst	r4, #7
    71d8:	beq	72e4 <rb_sha512_process_bytes+0x148>
    71dc:	cmp	r6, #128	; 0x80
    71e0:	bls	7304 <rb_sha512_process_bytes+0x168>
    71e4:	sub	sl, r6, #129	; 0x81
    71e8:	lsr	sl, sl, #7
    71ec:	add	r8, sl, #1
    71f0:	add	r8, r4, r8, lsl #7
    71f4:	add	r9, r5, #88	; 0x58
    71f8:	mov	r7, #128	; 0x80
    71fc:	mov	r2, r7
    7200:	mov	r1, r4
    7204:	mov	r0, r9
    7208:	bl	47bc <memcpy@plt>
    720c:	mov	r2, r5
    7210:	mov	r1, r7
    7214:	bl	5c1c <rb_sha512_process_block>
    7218:	add	r4, r4, #128	; 0x80
    721c:	cmp	r4, r8
    7220:	bne	71fc <rb_sha512_process_bytes+0x60>
    7224:	sub	r6, r6, #128	; 0x80
    7228:	sub	r6, r6, sl, lsl #7
    722c:	mov	r4, r8
    7230:	cmp	r6, #0
    7234:	bne	7304 <rb_sha512_process_bytes+0x168>
    7238:	add	sp, sp, #4
    723c:	ldrd	r4, [sp]
    7240:	ldrd	r6, [sp, #8]
    7244:	ldrd	r8, [sp, #16]
    7248:	ldrd	sl, [sp, #24]
    724c:	add	sp, sp, #32
    7250:	pop	{pc}		; (ldr pc, [sp], #4)
    7254:	rsb	r7, sl, #256	; 0x100
    7258:	cmp	r7, r1
    725c:	movcs	r7, r1
    7260:	add	r0, sl, #88	; 0x58
    7264:	mov	r2, r7
    7268:	mov	r1, r4
    726c:	add	r0, r5, r0
    7270:	bl	47bc <memcpy@plt>
    7274:	ldrd	r0, [r5, #80]	; 0x50
    7278:	adds	r2, r0, r7
    727c:	adc	r3, r1, #0
    7280:	mov	r0, r2
    7284:	strd	r2, [r5, #80]	; 0x50
    7288:	cmp	r3, #0
    728c:	cmpeq	r2, #128	; 0x80
    7290:	bhi	72a0 <rb_sha512_process_bytes+0x104>
    7294:	add	r4, r4, r7
    7298:	sub	r6, r6, r7
    729c:	b	71cc <rb_sha512_process_bytes+0x30>
    72a0:	add	r9, r5, #88	; 0x58
    72a4:	mov	r2, r5
    72a8:	bic	r1, r0, #127	; 0x7f
    72ac:	mov	r0, r9
    72b0:	bl	5c1c <rb_sha512_process_block>
    72b4:	ldr	r2, [r5, #80]	; 0x50
    72b8:	and	r2, r2, #127	; 0x7f
    72bc:	str	r2, [r5, #80]	; 0x50
    72c0:	mov	r3, #0
    72c4:	str	r3, [r5, #84]	; 0x54
    72c8:	add	r1, r7, sl
    72cc:	bic	r1, r1, #127	; 0x7f
    72d0:	add	r1, r1, #88	; 0x58
    72d4:	add	r1, r5, r1
    72d8:	mov	r0, r9
    72dc:	bl	47bc <memcpy@plt>
    72e0:	b	7294 <rb_sha512_process_bytes+0xf8>
    72e4:	bic	r7, r6, #127	; 0x7f
    72e8:	mov	r2, r5
    72ec:	mov	r1, r7
    72f0:	mov	r0, r4
    72f4:	bl	5c1c <rb_sha512_process_block>
    72f8:	add	r4, r4, r7
    72fc:	and	r6, r6, #127	; 0x7f
    7300:	b	7230 <rb_sha512_process_bytes+0x94>
    7304:	ldr	r7, [r5, #80]	; 0x50
    7308:	add	r0, r7, #88	; 0x58
    730c:	mov	r2, r6
    7310:	mov	r1, r4
    7314:	add	r0, r5, r0
    7318:	bl	47bc <memcpy@plt>
    731c:	add	r6, r7, r6
    7320:	cmp	r6, #127	; 0x7f
    7324:	bhi	7338 <rb_sha512_process_bytes+0x19c>
    7328:	str	r6, [r5, #80]	; 0x50
    732c:	mov	r3, #0
    7330:	str	r3, [r5, #84]	; 0x54
    7334:	b	7238 <rb_sha512_process_bytes+0x9c>
    7338:	add	r4, r5, #88	; 0x58
    733c:	mov	r2, r5
    7340:	mov	r1, #128	; 0x80
    7344:	mov	r0, r4
    7348:	bl	5c1c <rb_sha512_process_block>
    734c:	sub	r6, r6, #128	; 0x80
    7350:	mov	r2, r6
    7354:	add	r1, r5, #216	; 0xd8
    7358:	mov	r0, r4
    735c:	bl	47bc <memcpy@plt>
    7360:	b	7328 <rb_sha512_process_bytes+0x18c>

00007364 <rb_sha512_finish_ctx>:
    7364:	strd	r4, [sp, #-32]!	; 0xffffffe0
    7368:	strd	r6, [sp, #8]
    736c:	str	r8, [sp, #16]
    7370:	strd	sl, [sp, #20]
    7374:	str	lr, [sp, #28]
    7378:	sub	sp, sp, #8
    737c:	mov	r5, r0
    7380:	mov	r4, r1
    7384:	ldrd	sl, [r0, #80]	; 0x50
    7388:	ldr	r1, [r0, #64]	; 0x40
    738c:	ldr	r0, [r0, #68]	; 0x44
    7390:	adds	r2, sl, r1
    7394:	adc	r3, fp, r0
    7398:	strd	r2, [r5, #64]	; 0x40
    739c:	cmp	r3, fp
    73a0:	cmpeq	r2, sl
    73a4:	bcs	73c0 <rb_sha512_finish_ctx+0x5c>
    73a8:	ldr	r3, [r5, #72]	; 0x48
    73ac:	ldr	r2, [r5, #76]	; 0x4c
    73b0:	adds	r3, r3, #1
    73b4:	adc	r2, r2, #0
    73b8:	str	r3, [r5, #72]	; 0x48
    73bc:	str	r2, [r5, #76]	; 0x4c
    73c0:	cmp	fp, #0
    73c4:	cmpeq	sl, #111	; 0x6f
    73c8:	rsbhi	r8, sl, #240	; 0xf0
    73cc:	rsbls	r8, sl, #112	; 0x70
    73d0:	add	r0, sl, #88	; 0x58
    73d4:	mov	r2, r8
    73d8:	ldr	r1, [pc, #380]	; 755c <rb_sha512_finish_ctx+0x1f8>
    73dc:	add	r1, pc, r1
    73e0:	add	r1, r1, #1872	; 0x750
    73e4:	add	r1, r1, #8
    73e8:	add	r0, r5, r0
    73ec:	bl	47bc <memcpy@plt>
    73f0:	adds	r2, sl, r8
    73f4:	adc	r3, fp, #0
    73f8:	mov	r6, r2
    73fc:	mov	r7, r3
    7400:	ldr	ip, [r5, #64]	; 0x40
    7404:	ldr	r1, [r5, #68]	; 0x44
    7408:	lsl	r3, r1, #3
    740c:	orr	r3, r3, ip, lsr #29
    7410:	strd	r6, [sp]
    7414:	adds	lr, r2, #8
    7418:	add	lr, r5, lr
    741c:	lsl	r0, ip, #11
    7420:	and	r0, r0, #16711680	; 0xff0000
    7424:	lsr	r7, ip, #5
    7428:	and	r7, r7, #65280	; 0xff00
    742c:	orr	r0, r0, r7
    7430:	orr	r0, r0, ip, lsl #27
    7434:	ubfx	ip, ip, #21, #8
    7438:	orr	r0, r0, ip
    743c:	lsr	r7, r3, #8
    7440:	lsl	ip, r3, #24
    7444:	orr	ip, ip, r3, lsr #24
    7448:	lsl	r3, r3, #8
    744c:	and	r3, r3, #16711680	; 0xff0000
    7450:	orr	r3, ip, r3
    7454:	and	r7, r7, #65280	; 0xff00
    7458:	orr	r3, r3, r7
    745c:	str	r3, [lr, #88]	; 0x58
    7460:	str	r0, [lr, #92]	; 0x5c
    7464:	ldr	r0, [r5, #72]	; 0x48
    7468:	ldr	r3, [r5, #76]	; 0x4c
    746c:	lsl	r3, r3, #3
    7470:	orr	r3, r3, r0, lsr #29
    7474:	lsr	r1, r1, #29
    7478:	orr	r0, r1, r0, lsl #3
    747c:	ldr	r2, [sp]
    7480:	add	r2, r5, r2
    7484:	lsl	r1, r0, #8
    7488:	and	r1, r1, #16711680	; 0xff0000
    748c:	orr	r1, r1, r0, lsl #24
    7490:	lsr	ip, r0, #8
    7494:	and	ip, ip, #65280	; 0xff00
    7498:	orr	r1, r1, ip
    749c:	orr	r1, r1, r0, lsr #24
    74a0:	lsr	ip, r3, #8
    74a4:	lsl	r0, r3, #24
    74a8:	orr	r0, r0, r3, lsr #24
    74ac:	lsl	r3, r3, #8
    74b0:	and	r3, r3, #16711680	; 0xff0000
    74b4:	orr	r3, r0, r3
    74b8:	and	r0, ip, #65280	; 0xff00
    74bc:	orr	r3, r3, r0
    74c0:	str	r3, [r2, #88]	; 0x58
    74c4:	str	r1, [r2, #92]	; 0x5c
    74c8:	add	r1, sl, #16
    74cc:	mov	r2, r5
    74d0:	add	r1, r1, r8
    74d4:	add	r0, r5, #88	; 0x58
    74d8:	bl	5c1c <rb_sha512_process_block>
    74dc:	sub	r1, r5, #8
    74e0:	sub	ip, r4, #8
    74e4:	add	r0, r5, #56	; 0x38
    74e8:	ldr	lr, [r1, #8]!
    74ec:	ldr	r2, [r1, #4]
    74f0:	lsl	r3, lr, #8
    74f4:	and	r3, r3, #16711680	; 0xff0000
    74f8:	orr	r3, r3, lr, lsl #24
    74fc:	lsr	r5, lr, #8
    7500:	and	r5, r5, #65280	; 0xff00
    7504:	orr	r3, r3, r5
    7508:	orr	r3, r3, lr, lsr #24
    750c:	lsr	r5, r2, #8
    7510:	lsl	lr, r2, #24
    7514:	orr	lr, lr, r2, lsr #24
    7518:	lsl	r2, r2, #8
    751c:	and	r2, r2, #16711680	; 0xff0000
    7520:	orr	r2, lr, r2
    7524:	and	lr, r5, #65280	; 0xff00
    7528:	orr	r2, r2, lr
    752c:	str	r2, [ip, #8]!
    7530:	str	r3, [ip, #4]
    7534:	cmp	r1, r0
    7538:	bne	74e8 <rb_sha512_finish_ctx+0x184>
    753c:	mov	r0, r4
    7540:	add	sp, sp, #8
    7544:	ldrd	r4, [sp]
    7548:	ldrd	r6, [sp, #8]
    754c:	ldr	r8, [sp, #16]
    7550:	ldrd	sl, [sp, #20]
    7554:	add	sp, sp, #28
    7558:	pop	{pc}		; (ldr pc, [sp], #4)
    755c:	.word	0x0000eedc

00007560 <rb_sha256_crypt_r>:
    7560:	strd	r4, [sp, #-36]!	; 0xffffffdc
    7564:	strd	r6, [sp, #8]
    7568:	strd	r8, [sp, #16]
    756c:	strd	sl, [sp, #24]
    7570:	str	lr, [sp, #32]
    7574:	add	fp, sp, #32
    7578:	sub	sp, sp, #468	; 0x1d4
    757c:	mov	r7, r0
    7580:	mov	r4, r1
    7584:	str	r1, [fp, #-456]	; 0xfffffe38
    7588:	str	r2, [fp, #-472]	; 0xfffffe28
    758c:	str	r3, [fp, #-476]	; 0xfffffe24
    7590:	mov	r2, #3
    7594:	ldr	r0, [pc, #2692]	; 8020 <rb_sha256_crypt_r+0xac0>
    7598:	add	r0, pc, r0
    759c:	add	r0, r0, #2000	; 0x7d0
    75a0:	add	r0, r0, #8
    75a4:	bl	4bb8 <strncmp@plt>
    75a8:	cmp	r0, #0
    75ac:	bne	75b8 <rb_sha256_crypt_r+0x58>
    75b0:	add	r3, r4, #3
    75b4:	str	r3, [fp, #-456]	; 0xfffffe38
    75b8:	mov	r2, #7
    75bc:	ldr	r1, [pc, #2656]	; 8024 <rb_sha256_crypt_r+0xac4>
    75c0:	add	r1, pc, r1
    75c4:	add	r1, r1, #2000	; 0x7d0
    75c8:	add	r1, r1, #12
    75cc:	ldr	r0, [fp, #-456]	; 0xfffffe38
    75d0:	bl	4bb8 <strncmp@plt>
    75d4:	subs	r3, r0, #0
    75d8:	str	r3, [fp, #-480]	; 0xfffffe20
    75dc:	movne	r3, #0
    75e0:	strne	r3, [fp, #-480]	; 0xfffffe20
    75e4:	movwne	sl, #5000	; 0x1388
    75e8:	beq	78d4 <rb_sha256_crypt_r+0x374>
    75ec:	ldr	r1, [pc, #2612]	; 8028 <rb_sha256_crypt_r+0xac8>
    75f0:	add	r1, pc, r1
    75f4:	ldr	r0, [fp, #-456]	; 0xfffffe38
    75f8:	bl	4b88 <strcspn@plt>
    75fc:	mov	r6, r0
    7600:	cmp	r0, #16
    7604:	movcc	r6, r0
    7608:	movcs	r6, #16
    760c:	mov	r0, r7
    7610:	bl	4798 <strlen@plt>
    7614:	mov	r5, r0
    7618:	tst	r7, #3
    761c:	moveq	r3, #0
    7620:	streq	r3, [fp, #-484]	; 0xfffffe1c
    7624:	bne	792c <rb_sha256_crypt_r+0x3cc>
    7628:	ldr	r3, [fp, #-456]	; 0xfffffe38
    762c:	tst	r3, #3
    7630:	moveq	r3, #0
    7634:	streq	r3, [fp, #-488]	; 0xfffffe18
    7638:	bne	7954 <rb_sha256_crypt_r+0x3f4>
    763c:	sub	r4, fp, #272	; 0x110
    7640:	mov	r0, r4
    7644:	bl	5ba8 <rb_sha256_init_ctx>
    7648:	mov	r2, r4
    764c:	mov	r1, r5
    7650:	mov	r0, r7
    7654:	bl	6e90 <rb_sha256_process_bytes>
    7658:	mov	r2, r4
    765c:	mov	r1, r6
    7660:	ldr	r8, [fp, #-456]	; 0xfffffe38
    7664:	mov	r0, r8
    7668:	bl	6e90 <rb_sha256_process_bytes>
    766c:	sub	r4, fp, #444	; 0x1bc
    7670:	mov	r0, r4
    7674:	bl	5ba8 <rb_sha256_init_ctx>
    7678:	mov	r2, r4
    767c:	mov	r1, r5
    7680:	mov	r0, r7
    7684:	bl	6e90 <rb_sha256_process_bytes>
    7688:	mov	r2, r4
    768c:	mov	r1, r6
    7690:	mov	r0, r8
    7694:	bl	6e90 <rb_sha256_process_bytes>
    7698:	mov	r2, r4
    769c:	mov	r1, r5
    76a0:	mov	r0, r7
    76a4:	bl	6e90 <rb_sha256_process_bytes>
    76a8:	sub	r1, fp, #68	; 0x44
    76ac:	mov	r0, r4
    76b0:	bl	706c <rb_sha256_finish_ctx>
    76b4:	cmp	r5, #32
    76b8:	bls	797c <rb_sha256_crypt_r+0x41c>
    76bc:	mov	r4, r5
    76c0:	sub	r8, fp, #272	; 0x110
    76c4:	sub	r9, fp, #68	; 0x44
    76c8:	mov	r2, r8
    76cc:	mov	r1, #32
    76d0:	mov	r0, r9
    76d4:	bl	6e90 <rb_sha256_process_bytes>
    76d8:	sub	r4, r4, #32
    76dc:	cmp	r4, #32
    76e0:	bhi	76c8 <rb_sha256_crypt_r+0x168>
    76e4:	sub	r3, r5, #33	; 0x21
    76e8:	bic	r3, r3, #31
    76ec:	sub	r1, r5, #32
    76f0:	sub	r2, fp, #272	; 0x110
    76f4:	sub	r1, r1, r3
    76f8:	sub	r0, fp, #68	; 0x44
    76fc:	bl	6e90 <rb_sha256_process_bytes>
    7700:	mov	r4, r5
    7704:	sub	r8, fp, #272	; 0x110
    7708:	sub	r9, fp, #68	; 0x44
    770c:	tst	r4, #1
    7710:	mov	r2, r8
    7714:	movne	r1, #32
    7718:	movne	r0, r9
    771c:	moveq	r1, r5
    7720:	moveq	r0, r7
    7724:	bl	6e90 <rb_sha256_process_bytes>
    7728:	lsrs	r4, r4, #1
    772c:	bne	770c <rb_sha256_crypt_r+0x1ac>
    7730:	sub	r1, fp, #68	; 0x44
    7734:	sub	r0, fp, #272	; 0x110
    7738:	bl	706c <rb_sha256_finish_ctx>
    773c:	sub	r0, fp, #444	; 0x1bc
    7740:	bl	5ba8 <rb_sha256_init_ctx>
    7744:	sub	r8, fp, #444	; 0x1bc
    7748:	mov	r2, r8
    774c:	mov	r1, r5
    7750:	mov	r0, r7
    7754:	bl	6e90 <rb_sha256_process_bytes>
    7758:	add	r4, r4, #1
    775c:	cmp	r5, r4
    7760:	bhi	7748 <rb_sha256_crypt_r+0x1e8>
    7764:	sub	r1, fp, #100	; 0x64
    7768:	sub	r0, fp, #444	; 0x1bc
    776c:	bl	706c <rb_sha256_finish_ctx>
    7770:	add	r3, r5, #7
    7774:	bic	r3, r3, #7
    7778:	sub	sp, sp, r3
    777c:	add	r2, sp, #8
    7780:	str	r2, [fp, #-460]	; 0xfffffe34
    7784:	cmp	r5, #31
    7788:	bls	79c8 <rb_sha256_crypt_r+0x468>
    778c:	add	r3, sp, #40	; 0x28
    7790:	sub	r0, r5, #32
    7794:	lsr	ip, r0, #5
    7798:	bic	r0, r0, #31
    779c:	add	r0, r0, #64	; 0x40
    77a0:	add	r0, r2, r0
    77a4:	mov	lr, r5
    77a8:	ldrd	r4, [fp, #-100]	; 0xffffff9c
    77ac:	strd	r4, [r3, #-32]	; 0xffffffe0
    77b0:	ldrd	r4, [fp, #-92]	; 0xffffffa4
    77b4:	strd	r4, [r3, #-24]	; 0xffffffe8
    77b8:	ldrd	r4, [fp, #-84]	; 0xffffffac
    77bc:	strd	r4, [r3, #-16]
    77c0:	ldrd	r4, [fp, #-76]	; 0xffffffb4
    77c4:	strd	r4, [r3, #-8]
    77c8:	add	r3, r3, #32
    77cc:	cmp	r3, r0
    77d0:	bne	77a8 <rb_sha256_crypt_r+0x248>
    77d4:	mov	r5, lr
    77d8:	add	r0, ip, #1
    77dc:	ldr	r3, [fp, #-460]	; 0xfffffe34
    77e0:	add	r0, r3, r0, lsl #5
    77e4:	and	r2, lr, #31
    77e8:	sub	r1, fp, #100	; 0x64
    77ec:	bl	47bc <memcpy@plt>
    77f0:	sub	r0, fp, #444	; 0x1bc
    77f4:	bl	5ba8 <rb_sha256_init_ctx>
    77f8:	mov	r4, #0
    77fc:	sub	r7, fp, #444	; 0x1bc
    7800:	mov	r2, r7
    7804:	mov	r1, r6
    7808:	ldr	r0, [fp, #-456]	; 0xfffffe38
    780c:	bl	6e90 <rb_sha256_process_bytes>
    7810:	add	r4, r4, #1
    7814:	ldrb	r3, [fp, #-68]	; 0xffffffbc
    7818:	add	r3, r3, #16
    781c:	cmp	r3, r4
    7820:	bhi	7800 <rb_sha256_crypt_r+0x2a0>
    7824:	sub	r1, fp, #100	; 0x64
    7828:	sub	r0, fp, #444	; 0x1bc
    782c:	bl	706c <rb_sha256_finish_ctx>
    7830:	add	r3, r6, #7
    7834:	bic	r3, r3, #7
    7838:	sub	sp, sp, r3
    783c:	add	r2, sp, #8
    7840:	str	r2, [fp, #-464]	; 0xfffffe30
    7844:	cmp	r6, #31
    7848:	bls	79d4 <rb_sha256_crypt_r+0x474>
    784c:	add	r3, sp, #40	; 0x28
    7850:	sub	r0, r6, #32
    7854:	lsr	ip, r0, #5
    7858:	bic	r0, r0, #31
    785c:	add	r0, r0, #64	; 0x40
    7860:	add	r0, r2, r0
    7864:	mov	lr, r5
    7868:	ldrd	r4, [fp, #-100]	; 0xffffff9c
    786c:	strd	r4, [r3, #-32]	; 0xffffffe0
    7870:	ldrd	r4, [fp, #-92]	; 0xffffffa4
    7874:	strd	r4, [r3, #-24]	; 0xffffffe8
    7878:	ldrd	r4, [fp, #-84]	; 0xffffffac
    787c:	strd	r4, [r3, #-16]
    7880:	ldrd	r4, [fp, #-76]	; 0xffffffb4
    7884:	strd	r4, [r3, #-8]
    7888:	add	r3, r3, #32
    788c:	cmp	r3, r0
    7890:	bne	7868 <rb_sha256_crypt_r+0x308>
    7894:	mov	r5, lr
    7898:	add	r0, ip, #1
    789c:	ldr	r3, [fp, #-464]	; 0xfffffe30
    78a0:	add	r0, r3, r0, lsl #5
    78a4:	and	r2, r6, #31
    78a8:	sub	r1, fp, #100	; 0x64
    78ac:	bl	47bc <memcpy@plt>
    78b0:	mov	r4, #0
    78b4:	sub	r3, fp, #272	; 0x110
    78b8:	movw	r9, #43691	; 0xaaab
    78bc:	movt	r9, #43690	; 0xaaaa
    78c0:	movw	r8, #18725	; 0x4925
    78c4:	movt	r8, #9362	; 0x2492
    78c8:	str	r6, [fp, #-468]	; 0xfffffe2c
    78cc:	mov	r6, r3
    78d0:	b	7a38 <rb_sha256_crypt_r+0x4d8>
    78d4:	mov	r2, #10
    78d8:	sub	r1, fp, #448	; 0x1c0
    78dc:	ldr	r3, [fp, #-456]	; 0xfffffe38
    78e0:	add	r0, r3, #7
    78e4:	bl	47b0 <strtoul@plt>
    78e8:	ldr	r3, [fp, #-448]	; 0xfffffe40
    78ec:	ldrb	r2, [r3]
    78f0:	cmp	r2, #36	; 0x24
    78f4:	movwne	sl, #5000	; 0x1388
    78f8:	bne	75ec <rb_sha256_crypt_r+0x8c>
    78fc:	add	r3, r3, #1
    7900:	str	r3, [fp, #-456]	; 0xfffffe38
    7904:	movw	r3, #51711	; 0xc9ff
    7908:	movt	r3, #15258	; 0x3b9a
    790c:	cmp	r0, r3
    7910:	movcc	sl, r0
    7914:	movcs	sl, r3
    7918:	cmp	sl, #1000	; 0x3e8
    791c:	movcc	sl, #1000	; 0x3e8
    7920:	mov	r3, #1
    7924:	str	r3, [fp, #-480]	; 0xfffffe20
    7928:	b	75ec <rb_sha256_crypt_r+0x8c>
    792c:	add	r3, r0, #11
    7930:	bic	r3, r3, #7
    7934:	sub	sp, sp, r3
    7938:	mov	r2, r0
    793c:	mov	r1, r7
    7940:	add	r0, sp, #12
    7944:	bl	47bc <memcpy@plt>
    7948:	mov	r7, r0
    794c:	str	r0, [fp, #-484]	; 0xfffffe1c
    7950:	b	7628 <rb_sha256_crypt_r+0xc8>
    7954:	add	r3, r6, #11
    7958:	bic	r3, r3, #7
    795c:	sub	sp, sp, r3
    7960:	mov	r2, r6
    7964:	ldr	r1, [fp, #-456]	; 0xfffffe38
    7968:	add	r0, sp, #12
    796c:	bl	47bc <memcpy@plt>
    7970:	str	r0, [fp, #-456]	; 0xfffffe38
    7974:	str	r0, [fp, #-488]	; 0xfffffe18
    7978:	b	763c <rb_sha256_crypt_r+0xdc>
    797c:	sub	r2, fp, #272	; 0x110
    7980:	mov	r1, r5
    7984:	sub	r0, fp, #68	; 0x44
    7988:	bl	6e90 <rb_sha256_process_bytes>
    798c:	cmp	r5, #0
    7990:	bne	7700 <rb_sha256_crypt_r+0x1a0>
    7994:	sub	r1, fp, #68	; 0x44
    7998:	sub	r0, fp, #272	; 0x110
    799c:	bl	706c <rb_sha256_finish_ctx>
    79a0:	sub	r4, fp, #444	; 0x1bc
    79a4:	mov	r0, r4
    79a8:	bl	5ba8 <rb_sha256_init_ctx>
    79ac:	sub	r1, fp, #100	; 0x64
    79b0:	mov	r0, r4
    79b4:	bl	706c <rb_sha256_finish_ctx>
    79b8:	add	r0, sp, #8
    79bc:	str	r0, [fp, #-460]	; 0xfffffe34
    79c0:	mov	r2, r5
    79c4:	b	77e8 <rb_sha256_crypt_r+0x288>
    79c8:	ldr	r0, [fp, #-460]	; 0xfffffe34
    79cc:	mov	r2, r5
    79d0:	b	77e8 <rb_sha256_crypt_r+0x288>
    79d4:	ldr	r0, [fp, #-464]	; 0xfffffe30
    79d8:	mov	r2, r6
    79dc:	b	78a8 <rb_sha256_crypt_r+0x348>
    79e0:	mov	r2, r6
    79e4:	ldr	r1, [fp, #-468]	; 0xfffffe2c
    79e8:	ldr	r0, [fp, #-464]	; 0xfffffe30
    79ec:	bl	6e90 <rb_sha256_process_bytes>
    79f0:	b	7a70 <rb_sha256_crypt_r+0x510>
    79f4:	mov	r2, r6
    79f8:	mov	r1, r5
    79fc:	ldr	r0, [fp, #-460]	; 0xfffffe34
    7a00:	bl	6e90 <rb_sha256_process_bytes>
    7a04:	cmp	r7, #0
    7a08:	mov	r2, r6
    7a0c:	movne	r1, #32
    7a10:	subne	r0, fp, #68	; 0x44
    7a14:	moveq	r1, r5
    7a18:	ldreq	r0, [fp, #-460]	; 0xfffffe34
    7a1c:	bl	6e90 <rb_sha256_process_bytes>
    7a20:	sub	r1, fp, #68	; 0x44
    7a24:	mov	r0, r6
    7a28:	bl	706c <rb_sha256_finish_ctx>
    7a2c:	add	r4, r4, #1
    7a30:	cmp	sl, r4
    7a34:	beq	7a90 <rb_sha256_crypt_r+0x530>
    7a38:	mov	r0, r6
    7a3c:	bl	5ba8 <rb_sha256_init_ctx>
    7a40:	ands	r7, r4, #1
    7a44:	mov	r2, r6
    7a48:	movne	r1, r5
    7a4c:	ldrne	r0, [fp, #-460]	; 0xfffffe34
    7a50:	moveq	r1, #32
    7a54:	subeq	r0, fp, #68	; 0x44
    7a58:	bl	6e90 <rb_sha256_process_bytes>
    7a5c:	umull	r2, r3, r9, r4
    7a60:	lsr	r3, r3, #1
    7a64:	add	r3, r3, r3, lsl #1
    7a68:	cmp	r4, r3
    7a6c:	bne	79e0 <rb_sha256_crypt_r+0x480>
    7a70:	umull	r2, r3, r8, r4
    7a74:	sub	r2, r4, r3
    7a78:	add	r3, r3, r2, lsr #1
    7a7c:	lsr	r3, r3, #2
    7a80:	rsb	r3, r3, r3, lsl #3
    7a84:	cmp	r4, r3
    7a88:	beq	7a04 <rb_sha256_crypt_r+0x4a4>
    7a8c:	b	79f4 <rb_sha256_crypt_r+0x494>
    7a90:	ldr	r6, [fp, #-468]	; 0xfffffe2c
    7a94:	ldr	r3, [fp, #-476]	; 0xfffffe24
    7a98:	bic	r7, r3, r3, asr #31
    7a9c:	mov	r2, r7
    7aa0:	mov	r1, #0
    7aa4:	ldr	r8, [fp, #-472]	; 0xfffffe28
    7aa8:	mov	r0, r8
    7aac:	bl	45dc <memset@plt>
    7ab0:	mov	r2, r7
    7ab4:	ldr	r1, [pc, #1392]	; 802c <rb_sha256_crypt_r+0xacc>
    7ab8:	add	r1, pc, r1
    7abc:	add	r1, r1, #2000	; 0x7d0
    7ac0:	add	r1, r1, #8
    7ac4:	mov	r0, r8
    7ac8:	bl	4528 <strncpy@plt>
    7acc:	mov	r0, r8
    7ad0:	bl	4798 <strlen@plt>
    7ad4:	mov	r3, r8
    7ad8:	adds	r8, r8, r0
    7adc:	ldreq	r3, [fp, #-472]	; 0xfffffe28
    7ae0:	addeq	r8, r3, r7
    7ae4:	ldr	r3, [fp, #-476]	; 0xfffffe24
    7ae8:	sub	r7, r3, #3
    7aec:	ldr	r3, [fp, #-480]	; 0xfffffe20
    7af0:	cmp	r3, #0
    7af4:	bne	7fd8 <rb_sha256_crypt_r+0xa78>
    7af8:	mov	r2, r6
    7afc:	mov	r1, #0
    7b00:	mov	r0, r8
    7b04:	bl	45dc <memset@plt>
    7b08:	bic	r4, r7, r7, asr #31
    7b0c:	cmp	r4, r6
    7b10:	movcs	r4, r6
    7b14:	mov	r2, r4
    7b18:	ldr	r1, [fp, #-456]	; 0xfffffe38
    7b1c:	mov	r0, r8
    7b20:	bl	4528 <strncpy@plt>
    7b24:	ldr	r8, [fp, #-472]	; 0xfffffe28
    7b28:	mov	r0, r8
    7b2c:	bl	4798 <strlen@plt>
    7b30:	add	r0, r8, r0
    7b34:	cmp	r0, #0
    7b38:	moveq	r0, r6
    7b3c:	sub	r7, r7, r4
    7b40:	cmp	r7, #0
    7b44:	ble	800c <rb_sha256_crypt_r+0xaac>
    7b48:	mov	r3, r0
    7b4c:	mov	r2, #36	; 0x24
    7b50:	strb	r2, [r3], #1
    7b54:	sub	r7, r7, #1
    7b58:	ldrb	r1, [fp, #-68]	; 0xffffffbc
    7b5c:	ldrb	r2, [fp, #-58]	; 0xffffffc6
    7b60:	lsl	r2, r2, #8
    7b64:	orr	r2, r2, r1, lsl #16
    7b68:	ldrb	r1, [fp, #-48]	; 0xffffffd0
    7b6c:	orr	r2, r2, r1
    7b70:	cmp	r7, #0
    7b74:	ble	800c <rb_sha256_crypt_r+0xaac>
    7b78:	ldr	ip, [pc, #1200]	; 8030 <rb_sha256_crypt_r+0xad0>
    7b7c:	add	ip, pc, ip
    7b80:	and	r1, r2, #63	; 0x3f
    7b84:	add	r1, ip, r1
    7b88:	ldrb	r1, [r1, #848]	; 0x350
    7b8c:	strb	r1, [r3], #1
    7b90:	sub	r7, r7, #1
    7b94:	lsr	r2, r2, #6
    7b98:	mov	lr, r3
    7b9c:	rsb	r1, r3, #5
    7ba0:	add	r1, r0, r1
    7ba4:	cmp	r1, #0
    7ba8:	cmpgt	r7, #0
    7bac:	bgt	7b80 <rb_sha256_crypt_r+0x620>
    7bb0:	ldrb	r1, [fp, #-47]	; 0xffffffd1
    7bb4:	ldrb	r2, [fp, #-67]	; 0xffffffbd
    7bb8:	lsl	r2, r2, #8
    7bbc:	orr	r2, r2, r1, lsl #16
    7bc0:	ldrb	r1, [fp, #-57]	; 0xffffffc7
    7bc4:	orr	r2, r2, r1
    7bc8:	cmp	r7, #0
    7bcc:	ble	800c <rb_sha256_crypt_r+0xaac>
    7bd0:	ldr	r0, [pc, #1116]	; 8034 <rb_sha256_crypt_r+0xad4>
    7bd4:	add	r0, pc, r0
    7bd8:	and	r1, r2, #63	; 0x3f
    7bdc:	add	r1, r0, r1
    7be0:	ldrb	r1, [r1, #848]	; 0x350
    7be4:	strb	r1, [r3], #1
    7be8:	sub	r7, r7, #1
    7bec:	lsr	r2, r2, #6
    7bf0:	mov	ip, r3
    7bf4:	rsb	r1, r3, #4
    7bf8:	add	r1, r1, lr
    7bfc:	cmp	r1, #0
    7c00:	cmpgt	r7, #0
    7c04:	bgt	7bd8 <rb_sha256_crypt_r+0x678>
    7c08:	ldrb	r1, [fp, #-56]	; 0xffffffc8
    7c0c:	ldrb	r2, [fp, #-46]	; 0xffffffd2
    7c10:	lsl	r2, r2, #8
    7c14:	orr	r2, r2, r1, lsl #16
    7c18:	ldrb	r1, [fp, #-66]	; 0xffffffbe
    7c1c:	orr	r2, r2, r1
    7c20:	cmp	r7, #0
    7c24:	ble	800c <rb_sha256_crypt_r+0xaac>
    7c28:	ldr	lr, [pc, #1032]	; 8038 <rb_sha256_crypt_r+0xad8>
    7c2c:	add	lr, pc, lr
    7c30:	and	r1, r2, #63	; 0x3f
    7c34:	add	r1, lr, r1
    7c38:	ldrb	r1, [r1, #848]	; 0x350
    7c3c:	strb	r1, [r3], #1
    7c40:	sub	r7, r7, #1
    7c44:	lsr	r2, r2, #6
    7c48:	mov	r0, r3
    7c4c:	rsb	r1, r3, #4
    7c50:	add	r1, r1, ip
    7c54:	cmp	r1, #0
    7c58:	cmpgt	r7, #0
    7c5c:	bgt	7c30 <rb_sha256_crypt_r+0x6d0>
    7c60:	ldrb	r1, [fp, #-65]	; 0xffffffbf
    7c64:	ldrb	r2, [fp, #-55]	; 0xffffffc9
    7c68:	lsl	r2, r2, #8
    7c6c:	orr	r2, r2, r1, lsl #16
    7c70:	ldrb	r1, [fp, #-45]	; 0xffffffd3
    7c74:	orr	r2, r2, r1
    7c78:	cmp	r7, #0
    7c7c:	ble	800c <rb_sha256_crypt_r+0xaac>
    7c80:	ldr	lr, [pc, #948]	; 803c <rb_sha256_crypt_r+0xadc>
    7c84:	add	lr, pc, lr
    7c88:	and	r1, r2, #63	; 0x3f
    7c8c:	add	r1, lr, r1
    7c90:	ldrb	r1, [r1, #848]	; 0x350
    7c94:	strb	r1, [r3], #1
    7c98:	sub	r7, r7, #1
    7c9c:	lsr	r2, r2, #6
    7ca0:	mov	ip, r3
    7ca4:	rsb	r1, r3, #4
    7ca8:	add	r1, r1, r0
    7cac:	cmp	r1, #0
    7cb0:	cmpgt	r7, #0
    7cb4:	bgt	7c88 <rb_sha256_crypt_r+0x728>
    7cb8:	ldrb	r1, [fp, #-44]	; 0xffffffd4
    7cbc:	ldrb	r2, [fp, #-64]	; 0xffffffc0
    7cc0:	lsl	r2, r2, #8
    7cc4:	orr	r2, r2, r1, lsl #16
    7cc8:	ldrb	r1, [fp, #-54]	; 0xffffffca
    7ccc:	orr	r2, r2, r1
    7cd0:	cmp	r7, #0
    7cd4:	ble	800c <rb_sha256_crypt_r+0xaac>
    7cd8:	ldr	lr, [pc, #864]	; 8040 <rb_sha256_crypt_r+0xae0>
    7cdc:	add	lr, pc, lr
    7ce0:	and	r1, r2, #63	; 0x3f
    7ce4:	add	r1, lr, r1
    7ce8:	ldrb	r1, [r1, #848]	; 0x350
    7cec:	strb	r1, [r3], #1
    7cf0:	sub	r7, r7, #1
    7cf4:	lsr	r2, r2, #6
    7cf8:	mov	r0, r3
    7cfc:	rsb	r1, r3, #4
    7d00:	add	r1, r1, ip
    7d04:	cmp	r1, #0
    7d08:	cmpgt	r7, #0
    7d0c:	bgt	7ce0 <rb_sha256_crypt_r+0x780>
    7d10:	ldrb	r1, [fp, #-53]	; 0xffffffcb
    7d14:	ldrb	r2, [fp, #-43]	; 0xffffffd5
    7d18:	lsl	r2, r2, #8
    7d1c:	orr	r2, r2, r1, lsl #16
    7d20:	ldrb	r1, [fp, #-63]	; 0xffffffc1
    7d24:	orr	r2, r2, r1
    7d28:	cmp	r7, #0
    7d2c:	ble	800c <rb_sha256_crypt_r+0xaac>
    7d30:	ldr	lr, [pc, #780]	; 8044 <rb_sha256_crypt_r+0xae4>
    7d34:	add	lr, pc, lr
    7d38:	and	r1, r2, #63	; 0x3f
    7d3c:	add	r1, lr, r1
    7d40:	ldrb	r1, [r1, #848]	; 0x350
    7d44:	strb	r1, [r3], #1
    7d48:	sub	r7, r7, #1
    7d4c:	lsr	r2, r2, #6
    7d50:	mov	ip, r3
    7d54:	rsb	r1, r3, #4
    7d58:	add	r1, r1, r0
    7d5c:	cmp	r1, #0
    7d60:	cmpgt	r7, #0
    7d64:	bgt	7d38 <rb_sha256_crypt_r+0x7d8>
    7d68:	ldrb	r1, [fp, #-62]	; 0xffffffc2
    7d6c:	ldrb	r2, [fp, #-52]	; 0xffffffcc
    7d70:	lsl	r2, r2, #8
    7d74:	orr	r2, r2, r1, lsl #16
    7d78:	ldrb	r1, [fp, #-42]	; 0xffffffd6
    7d7c:	orr	r2, r2, r1
    7d80:	cmp	r7, #0
    7d84:	ble	800c <rb_sha256_crypt_r+0xaac>
    7d88:	ldr	lr, [pc, #696]	; 8048 <rb_sha256_crypt_r+0xae8>
    7d8c:	add	lr, pc, lr
    7d90:	and	r1, r2, #63	; 0x3f
    7d94:	add	r1, lr, r1
    7d98:	ldrb	r1, [r1, #848]	; 0x350
    7d9c:	strb	r1, [r3], #1
    7da0:	sub	r7, r7, #1
    7da4:	lsr	r2, r2, #6
    7da8:	mov	r0, r3
    7dac:	rsb	r1, r3, #4
    7db0:	add	r1, r1, ip
    7db4:	cmp	r1, #0
    7db8:	cmpgt	r7, #0
    7dbc:	bgt	7d90 <rb_sha256_crypt_r+0x830>
    7dc0:	ldrb	r1, [fp, #-41]	; 0xffffffd7
    7dc4:	ldrb	r2, [fp, #-61]	; 0xffffffc3
    7dc8:	lsl	r2, r2, #8
    7dcc:	orr	r2, r2, r1, lsl #16
    7dd0:	ldrb	r1, [fp, #-51]	; 0xffffffcd
    7dd4:	orr	r2, r2, r1
    7dd8:	cmp	r7, #0
    7ddc:	ble	800c <rb_sha256_crypt_r+0xaac>
    7de0:	ldr	lr, [pc, #612]	; 804c <rb_sha256_crypt_r+0xaec>
    7de4:	add	lr, pc, lr
    7de8:	and	r1, r2, #63	; 0x3f
    7dec:	add	r1, lr, r1
    7df0:	ldrb	r1, [r1, #848]	; 0x350
    7df4:	strb	r1, [r3], #1
    7df8:	sub	r7, r7, #1
    7dfc:	lsr	r2, r2, #6
    7e00:	mov	ip, r3
    7e04:	rsb	r1, r3, #4
    7e08:	add	r1, r1, r0
    7e0c:	cmp	r1, #0
    7e10:	cmpgt	r7, #0
    7e14:	bgt	7de8 <rb_sha256_crypt_r+0x888>
    7e18:	ldrb	r1, [fp, #-50]	; 0xffffffce
    7e1c:	ldrb	r2, [fp, #-40]	; 0xffffffd8
    7e20:	lsl	r2, r2, #8
    7e24:	orr	r2, r2, r1, lsl #16
    7e28:	ldrb	r1, [fp, #-60]	; 0xffffffc4
    7e2c:	orr	r2, r2, r1
    7e30:	cmp	r7, #0
    7e34:	ble	800c <rb_sha256_crypt_r+0xaac>
    7e38:	ldr	lr, [pc, #528]	; 8050 <rb_sha256_crypt_r+0xaf0>
    7e3c:	add	lr, pc, lr
    7e40:	and	r1, r2, #63	; 0x3f
    7e44:	add	r1, lr, r1
    7e48:	ldrb	r1, [r1, #848]	; 0x350
    7e4c:	strb	r1, [r3], #1
    7e50:	sub	r7, r7, #1
    7e54:	lsr	r2, r2, #6
    7e58:	mov	r0, r3
    7e5c:	rsb	r1, r3, #4
    7e60:	add	r1, r1, ip
    7e64:	cmp	r1, #0
    7e68:	cmpgt	r7, #0
    7e6c:	bgt	7e40 <rb_sha256_crypt_r+0x8e0>
    7e70:	ldrb	r1, [fp, #-59]	; 0xffffffc5
    7e74:	ldrb	r2, [fp, #-49]	; 0xffffffcf
    7e78:	lsl	r2, r2, #8
    7e7c:	orr	r2, r2, r1, lsl #16
    7e80:	ldrb	r1, [fp, #-39]	; 0xffffffd9
    7e84:	orr	r2, r2, r1
    7e88:	cmp	r7, #0
    7e8c:	ble	800c <rb_sha256_crypt_r+0xaac>
    7e90:	ldr	lr, [pc, #444]	; 8054 <rb_sha256_crypt_r+0xaf4>
    7e94:	add	lr, pc, lr
    7e98:	and	r1, r2, #63	; 0x3f
    7e9c:	add	r1, lr, r1
    7ea0:	ldrb	r1, [r1, #848]	; 0x350
    7ea4:	strb	r1, [r3], #1
    7ea8:	sub	r7, r7, #1
    7eac:	lsr	r2, r2, #6
    7eb0:	mov	ip, r3
    7eb4:	rsb	r1, r3, #4
    7eb8:	add	r1, r1, r0
    7ebc:	cmp	r1, #0
    7ec0:	cmpgt	r7, #0
    7ec4:	bgt	7e98 <rb_sha256_crypt_r+0x938>
    7ec8:	ldrb	r2, [fp, #-37]	; 0xffffffdb
    7ecc:	ldrb	r1, [fp, #-38]	; 0xffffffda
    7ed0:	orr	r1, r1, r2, lsl #8
    7ed4:	cmp	r7, #0
    7ed8:	ble	800c <rb_sha256_crypt_r+0xaac>
    7edc:	ldr	r0, [pc, #372]	; 8058 <rb_sha256_crypt_r+0xaf8>
    7ee0:	add	r0, pc, r0
    7ee4:	and	r2, r1, #63	; 0x3f
    7ee8:	add	r2, r0, r2
    7eec:	ldrb	r2, [r2, #848]	; 0x350
    7ef0:	strb	r2, [r3], #1
    7ef4:	sub	r7, r7, #1
    7ef8:	lsr	r1, r1, #6
    7efc:	rsb	r2, r3, #3
    7f00:	add	r2, r2, ip
    7f04:	cmp	r2, #0
    7f08:	cmpgt	r7, #0
    7f0c:	bgt	7ee4 <rb_sha256_crypt_r+0x984>
    7f10:	cmp	r7, #0
    7f14:	ble	800c <rb_sha256_crypt_r+0xaac>
    7f18:	mov	r2, #0
    7f1c:	strb	r2, [r3]
    7f20:	ldr	r4, [fp, #-472]	; 0xfffffe28
    7f24:	sub	r7, fp, #272	; 0x110
    7f28:	mov	r0, r7
    7f2c:	bl	5ba8 <rb_sha256_init_ctx>
    7f30:	sub	r1, fp, #68	; 0x44
    7f34:	mov	r0, r7
    7f38:	bl	706c <rb_sha256_finish_ctx>
    7f3c:	mov	r2, r5
    7f40:	mov	r1, #0
    7f44:	ldr	r0, [fp, #-460]	; 0xfffffe34
    7f48:	bl	45dc <memset@plt>
    7f4c:	mov	r2, r6
    7f50:	mov	r1, #0
    7f54:	ldr	r0, [fp, #-464]	; 0xfffffe30
    7f58:	bl	45dc <memset@plt>
    7f5c:	mov	r8, #172	; 0xac
    7f60:	mov	r2, r8
    7f64:	mov	r1, #0
    7f68:	mov	r0, r7
    7f6c:	bl	45dc <memset@plt>
    7f70:	mov	r2, r8
    7f74:	mov	r1, #0
    7f78:	sub	r0, fp, #444	; 0x1bc
    7f7c:	bl	45dc <memset@plt>
    7f80:	ldr	r3, [fp, #-484]	; 0xfffffe1c
    7f84:	cmp	r3, #0
    7f88:	beq	7f9c <rb_sha256_crypt_r+0xa3c>
    7f8c:	mov	r2, r5
    7f90:	mov	r1, #0
    7f94:	mov	r0, r3
    7f98:	bl	45dc <memset@plt>
    7f9c:	ldr	r3, [fp, #-488]	; 0xfffffe18
    7fa0:	cmp	r3, #0
    7fa4:	beq	7fb8 <rb_sha256_crypt_r+0xa58>
    7fa8:	mov	r2, r6
    7fac:	mov	r1, #0
    7fb0:	mov	r0, r3
    7fb4:	bl	45dc <memset@plt>
    7fb8:	mov	r0, r4
    7fbc:	sub	sp, fp, #32
    7fc0:	ldrd	r4, [sp]
    7fc4:	ldrd	r6, [sp, #8]
    7fc8:	ldrd	r8, [sp, #16]
    7fcc:	ldrd	sl, [sp, #24]
    7fd0:	add	sp, sp, #32
    7fd4:	pop	{pc}		; (ldr pc, [sp], #4)
    7fd8:	str	r4, [sp]
    7fdc:	ldr	r3, [pc, #120]	; 805c <rb_sha256_crypt_r+0xafc>
    7fe0:	add	r3, pc, r3
    7fe4:	add	r3, r3, #2000	; 0x7d0
    7fe8:	add	r3, r3, #12
    7fec:	ldr	r2, [pc, #108]	; 8060 <rb_sha256_crypt_r+0xb00>
    7ff0:	add	r2, pc, r2
    7ff4:	bic	r1, r7, r7, asr #31
    7ff8:	mov	r0, r8
    7ffc:	bl	4b58 <snprintf@plt>
    8000:	add	r8, r8, r0
    8004:	sub	r7, r7, r0
    8008:	b	7af8 <rb_sha256_crypt_r+0x598>
    800c:	bl	4c90 <__errno_location@plt>
    8010:	mov	r3, #34	; 0x22
    8014:	str	r3, [r0]
    8018:	mov	r4, #0
    801c:	b	7f24 <rb_sha256_crypt_r+0x9c4>
    8020:	.word	0x0000ed20
    8024:	.word	0x0000ecf8
    8028:	.word	0x0000f4c8
    802c:	.word	0x0000e800
    8030:	.word	0x0000e73c
    8034:	.word	0x0000e6e4
    8038:	.word	0x0000e68c
    803c:	.word	0x0000e634
    8040:	.word	0x0000e5dc
    8044:	.word	0x0000e584
    8048:	.word	0x0000e52c
    804c:	.word	0x0000e4d4
    8050:	.word	0x0000e47c
    8054:	.word	0x0000e424
    8058:	.word	0x0000e3d8
    805c:	.word	0x0000e2d8
    8060:	.word	0x0000eacc

00008064 <rb_sha512_crypt_r>:
    8064:	strd	r4, [sp, #-36]!	; 0xffffffdc
    8068:	strd	r6, [sp, #8]
    806c:	strd	r8, [sp, #16]
    8070:	strd	sl, [sp, #24]
    8074:	str	lr, [sp, #32]
    8078:	add	fp, sp, #32
    807c:	sub	sp, sp, #876	; 0x36c
    8080:	mov	r6, r0
    8084:	mov	r4, r1
    8088:	str	r1, [fp, #-864]	; 0xfffffca0
    808c:	str	r2, [fp, #-880]	; 0xfffffc90
    8090:	str	r3, [fp, #-884]	; 0xfffffc8c
    8094:	mov	r2, #3
    8098:	ldr	r0, [pc, #3744]	; 8f40 <rb_sha512_crypt_r+0xedc>
    809c:	add	r0, pc, r0
    80a0:	add	r0, r0, #2016	; 0x7e0
    80a4:	add	r0, r0, #4
    80a8:	bl	4bb8 <strncmp@plt>
    80ac:	cmp	r0, #0
    80b0:	bne	80bc <rb_sha512_crypt_r+0x58>
    80b4:	add	r3, r4, #3
    80b8:	str	r3, [fp, #-864]	; 0xfffffca0
    80bc:	mov	r2, #7
    80c0:	ldr	r1, [pc, #3708]	; 8f44 <rb_sha512_crypt_r+0xee0>
    80c4:	add	r1, pc, r1
    80c8:	add	r1, r1, #2016	; 0x7e0
    80cc:	add	r1, r1, #8
    80d0:	ldr	r0, [fp, #-864]	; 0xfffffca0
    80d4:	bl	4bb8 <strncmp@plt>
    80d8:	subs	r3, r0, #0
    80dc:	str	r3, [fp, #-888]	; 0xfffffc88
    80e0:	beq	8424 <rb_sha512_crypt_r+0x3c0>
    80e4:	mov	r3, #0
    80e8:	str	r3, [fp, #-888]	; 0xfffffc88
    80ec:	movw	r3, #5000	; 0x1388
    80f0:	str	r3, [fp, #-900]	; 0xfffffc7c
    80f4:	ldr	r1, [pc, #3660]	; 8f48 <rb_sha512_crypt_r+0xee4>
    80f8:	add	r1, pc, r1
    80fc:	ldr	r0, [fp, #-864]	; 0xfffffca0
    8100:	bl	4b88 <strcspn@plt>
    8104:	mov	r7, r0
    8108:	cmp	r0, #16
    810c:	movcc	r7, r0
    8110:	movcs	r7, #16
    8114:	mov	r0, r6
    8118:	bl	4798 <strlen@plt>
    811c:	mov	r5, r0
    8120:	tst	r6, #7
    8124:	moveq	r3, #0
    8128:	streq	r3, [fp, #-892]	; 0xfffffc84
    812c:	bne	8480 <rb_sha512_crypt_r+0x41c>
    8130:	ldr	r3, [fp, #-864]	; 0xfffffca0
    8134:	tst	r3, #7
    8138:	moveq	r3, #0
    813c:	streq	r3, [fp, #-896]	; 0xfffffc80
    8140:	bne	84a8 <rb_sha512_crypt_r+0x444>
    8144:	sub	r4, fp, #508	; 0x1fc
    8148:	mov	r0, r4
    814c:	bl	6210 <rb_sha512_init_ctx>
    8150:	mov	r2, r4
    8154:	mov	r1, r5
    8158:	mov	r0, r6
    815c:	bl	719c <rb_sha512_process_bytes>
    8160:	mov	r2, r4
    8164:	mov	r1, r7
    8168:	ldr	r8, [fp, #-864]	; 0xfffffca0
    816c:	mov	r0, r8
    8170:	bl	719c <rb_sha512_process_bytes>
    8174:	sub	r4, fp, #852	; 0x354
    8178:	mov	r0, r4
    817c:	bl	6210 <rb_sha512_init_ctx>
    8180:	mov	r2, r4
    8184:	mov	r1, r5
    8188:	mov	r0, r6
    818c:	bl	719c <rb_sha512_process_bytes>
    8190:	mov	r2, r4
    8194:	mov	r1, r7
    8198:	mov	r0, r8
    819c:	bl	719c <rb_sha512_process_bytes>
    81a0:	mov	r2, r4
    81a4:	mov	r1, r5
    81a8:	mov	r0, r6
    81ac:	bl	719c <rb_sha512_process_bytes>
    81b0:	sub	r1, fp, #100	; 0x64
    81b4:	mov	r0, r4
    81b8:	bl	7364 <rb_sha512_finish_ctx>
    81bc:	cmp	r5, #64	; 0x40
    81c0:	bls	84d0 <rb_sha512_crypt_r+0x46c>
    81c4:	mov	r4, r5
    81c8:	sub	sl, fp, #508	; 0x1fc
    81cc:	sub	r9, fp, #100	; 0x64
    81d0:	mov	r8, #64	; 0x40
    81d4:	mov	r2, sl
    81d8:	mov	r1, r8
    81dc:	mov	r0, r9
    81e0:	bl	719c <rb_sha512_process_bytes>
    81e4:	sub	r4, r4, #64	; 0x40
    81e8:	cmp	r4, #64	; 0x40
    81ec:	bhi	81d4 <rb_sha512_crypt_r+0x170>
    81f0:	sub	r3, r5, #65	; 0x41
    81f4:	bic	r3, r3, #63	; 0x3f
    81f8:	sub	r1, r5, #64	; 0x40
    81fc:	sub	r2, fp, #508	; 0x1fc
    8200:	sub	r1, r1, r3
    8204:	sub	r0, fp, #100	; 0x64
    8208:	bl	719c <rb_sha512_process_bytes>
    820c:	mov	r4, r5
    8210:	sub	r8, fp, #508	; 0x1fc
    8214:	sub	sl, fp, #100	; 0x64
    8218:	mov	r9, #64	; 0x40
    821c:	tst	r4, #1
    8220:	mov	r2, r8
    8224:	movne	r1, r9
    8228:	movne	r0, sl
    822c:	moveq	r1, r5
    8230:	moveq	r0, r6
    8234:	bl	719c <rb_sha512_process_bytes>
    8238:	lsrs	r4, r4, #1
    823c:	bne	821c <rb_sha512_crypt_r+0x1b8>
    8240:	sub	r1, fp, #100	; 0x64
    8244:	sub	r0, fp, #508	; 0x1fc
    8248:	bl	7364 <rb_sha512_finish_ctx>
    824c:	sub	r0, fp, #852	; 0x354
    8250:	bl	6210 <rb_sha512_init_ctx>
    8254:	sub	r8, fp, #852	; 0x354
    8258:	mov	r2, r8
    825c:	mov	r1, r5
    8260:	mov	r0, r6
    8264:	bl	719c <rb_sha512_process_bytes>
    8268:	add	r4, r4, #1
    826c:	cmp	r5, r4
    8270:	bhi	8258 <rb_sha512_crypt_r+0x1f4>
    8274:	sub	r1, fp, #164	; 0xa4
    8278:	sub	r0, fp, #852	; 0x354
    827c:	bl	7364 <rb_sha512_finish_ctx>
    8280:	add	r3, r5, #7
    8284:	bic	r3, r3, #7
    8288:	sub	sp, sp, r3
    828c:	add	r3, sp, #8
    8290:	str	r3, [fp, #-868]	; 0xfffffc9c
    8294:	cmp	r5, #63	; 0x3f
    8298:	bls	851c <rb_sha512_crypt_r+0x4b8>
    829c:	add	r1, sp, #72	; 0x48
    82a0:	sub	r0, r5, #64	; 0x40
    82a4:	lsr	ip, r0, #6
    82a8:	bic	r0, r0, #63	; 0x3f
    82ac:	add	r0, r0, #128	; 0x80
    82b0:	add	r0, r3, r0
    82b4:	mov	lr, r5
    82b8:	ldrd	r4, [fp, #-164]	; 0xffffff5c
    82bc:	strd	r4, [r1, #-64]	; 0xffffffc0
    82c0:	ldrd	r4, [fp, #-156]	; 0xffffff64
    82c4:	strd	r4, [r1, #-56]	; 0xffffffc8
    82c8:	ldrd	r4, [fp, #-148]	; 0xffffff6c
    82cc:	strd	r4, [r1, #-48]	; 0xffffffd0
    82d0:	ldrd	r4, [fp, #-140]	; 0xffffff74
    82d4:	strd	r4, [r1, #-40]	; 0xffffffd8
    82d8:	ldrd	r4, [fp, #-132]	; 0xffffff7c
    82dc:	strd	r4, [r1, #-32]	; 0xffffffe0
    82e0:	ldrd	r4, [fp, #-124]	; 0xffffff84
    82e4:	strd	r4, [r1, #-24]	; 0xffffffe8
    82e8:	ldrd	r4, [fp, #-116]	; 0xffffff8c
    82ec:	strd	r4, [r1, #-16]
    82f0:	ldrd	r4, [fp, #-108]	; 0xffffff94
    82f4:	strd	r4, [r1, #-8]
    82f8:	add	r1, r1, #64	; 0x40
    82fc:	cmp	r0, r1
    8300:	bne	82b8 <rb_sha512_crypt_r+0x254>
    8304:	mov	r5, lr
    8308:	add	r0, ip, #1
    830c:	ldr	r3, [fp, #-868]	; 0xfffffc9c
    8310:	add	r0, r3, r0, lsl #6
    8314:	and	r2, lr, #63	; 0x3f
    8318:	sub	r1, fp, #164	; 0xa4
    831c:	bl	47bc <memcpy@plt>
    8320:	sub	r0, fp, #852	; 0x354
    8324:	bl	6210 <rb_sha512_init_ctx>
    8328:	mov	r4, #0
    832c:	sub	r6, fp, #852	; 0x354
    8330:	mov	r2, r6
    8334:	mov	r1, r7
    8338:	ldr	r0, [fp, #-864]	; 0xfffffca0
    833c:	bl	719c <rb_sha512_process_bytes>
    8340:	add	r4, r4, #1
    8344:	ldrb	r3, [fp, #-100]	; 0xffffff9c
    8348:	add	r3, r3, #16
    834c:	cmp	r3, r4
    8350:	bhi	8330 <rb_sha512_crypt_r+0x2cc>
    8354:	sub	r1, fp, #164	; 0xa4
    8358:	sub	r0, fp, #852	; 0x354
    835c:	bl	7364 <rb_sha512_finish_ctx>
    8360:	add	r3, r7, #7
    8364:	bic	r3, r3, #7
    8368:	sub	sp, sp, r3
    836c:	add	r3, sp, #8
    8370:	str	r3, [fp, #-872]	; 0xfffffc98
    8374:	cmp	r7, #63	; 0x3f
    8378:	bls	8528 <rb_sha512_crypt_r+0x4c4>
    837c:	add	r1, sp, #72	; 0x48
    8380:	sub	r0, r7, #64	; 0x40
    8384:	lsr	ip, r0, #6
    8388:	bic	r0, r0, #63	; 0x3f
    838c:	add	r0, r0, #128	; 0x80
    8390:	add	r0, r3, r0
    8394:	mov	lr, r5
    8398:	ldrd	r4, [fp, #-164]	; 0xffffff5c
    839c:	strd	r4, [r1, #-64]	; 0xffffffc0
    83a0:	ldrd	r4, [fp, #-156]	; 0xffffff64
    83a4:	strd	r4, [r1, #-56]	; 0xffffffc8
    83a8:	ldrd	r4, [fp, #-148]	; 0xffffff6c
    83ac:	strd	r4, [r1, #-48]	; 0xffffffd0
    83b0:	ldrd	r4, [fp, #-140]	; 0xffffff74
    83b4:	strd	r4, [r1, #-40]	; 0xffffffd8
    83b8:	ldrd	r4, [fp, #-132]	; 0xffffff7c
    83bc:	strd	r4, [r1, #-32]	; 0xffffffe0
    83c0:	ldrd	r4, [fp, #-124]	; 0xffffff84
    83c4:	strd	r4, [r1, #-24]	; 0xffffffe8
    83c8:	ldrd	r4, [fp, #-116]	; 0xffffff8c
    83cc:	strd	r4, [r1, #-16]
    83d0:	ldrd	r4, [fp, #-108]	; 0xffffff94
    83d4:	strd	r4, [r1, #-8]
    83d8:	add	r1, r1, #64	; 0x40
    83dc:	cmp	r1, r0
    83e0:	bne	8398 <rb_sha512_crypt_r+0x334>
    83e4:	mov	r5, lr
    83e8:	add	r0, ip, #1
    83ec:	ldr	r3, [fp, #-872]	; 0xfffffc98
    83f0:	add	r0, r3, r0, lsl #6
    83f4:	and	r2, r7, #63	; 0x3f
    83f8:	sub	r1, fp, #164	; 0xa4
    83fc:	bl	47bc <memcpy@plt>
    8400:	mov	r4, #0
    8404:	sub	r6, fp, #508	; 0x1fc
    8408:	movw	sl, #43691	; 0xaaab
    840c:	movt	sl, #43690	; 0xaaaa
    8410:	movw	r9, #18725	; 0x4925
    8414:	movt	r9, #9362	; 0x2492
    8418:	str	r7, [fp, #-876]	; 0xfffffc94
    841c:	ldr	r8, [fp, #-900]	; 0xfffffc7c
    8420:	b	858c <rb_sha512_crypt_r+0x528>
    8424:	mov	r2, #10
    8428:	sub	r1, fp, #856	; 0x358
    842c:	ldr	r3, [fp, #-864]	; 0xfffffca0
    8430:	add	r0, r3, #7
    8434:	bl	47b0 <strtoul@plt>
    8438:	ldr	r3, [fp, #-856]	; 0xfffffca8
    843c:	ldrb	r2, [r3]
    8440:	cmp	r2, #36	; 0x24
    8444:	movwne	r3, #5000	; 0x1388
    8448:	strne	r3, [fp, #-900]	; 0xfffffc7c
    844c:	bne	80f4 <rb_sha512_crypt_r+0x90>
    8450:	add	r3, r3, #1
    8454:	str	r3, [fp, #-864]	; 0xfffffca0
    8458:	movw	r3, #51711	; 0xc9ff
    845c:	movt	r3, #15258	; 0x3b9a
    8460:	cmp	r0, r3
    8464:	movcc	r3, r0
    8468:	cmp	r3, #1000	; 0x3e8
    846c:	movcc	r3, #1000	; 0x3e8
    8470:	str	r3, [fp, #-900]	; 0xfffffc7c
    8474:	mov	r3, #1
    8478:	str	r3, [fp, #-888]	; 0xfffffc88
    847c:	b	80f4 <rb_sha512_crypt_r+0x90>
    8480:	add	r3, r0, #15
    8484:	bic	r3, r3, #7
    8488:	sub	sp, sp, r3
    848c:	mov	r2, r0
    8490:	mov	r1, r6
    8494:	add	r0, sp, #16
    8498:	bl	47bc <memcpy@plt>
    849c:	mov	r6, r0
    84a0:	str	r0, [fp, #-892]	; 0xfffffc84
    84a4:	b	8130 <rb_sha512_crypt_r+0xcc>
    84a8:	add	r3, r7, #15
    84ac:	bic	r3, r3, #7
    84b0:	sub	sp, sp, r3
    84b4:	mov	r2, r7
    84b8:	ldr	r1, [fp, #-864]	; 0xfffffca0
    84bc:	add	r0, sp, #16
    84c0:	bl	47bc <memcpy@plt>
    84c4:	str	r0, [fp, #-864]	; 0xfffffca0
    84c8:	str	r0, [fp, #-896]	; 0xfffffc80
    84cc:	b	8144 <rb_sha512_crypt_r+0xe0>
    84d0:	sub	r2, fp, #508	; 0x1fc
    84d4:	mov	r1, r5
    84d8:	sub	r0, fp, #100	; 0x64
    84dc:	bl	719c <rb_sha512_process_bytes>
    84e0:	cmp	r5, #0
    84e4:	bne	820c <rb_sha512_crypt_r+0x1a8>
    84e8:	sub	r1, fp, #100	; 0x64
    84ec:	sub	r0, fp, #508	; 0x1fc
    84f0:	bl	7364 <rb_sha512_finish_ctx>
    84f4:	sub	r4, fp, #852	; 0x354
    84f8:	mov	r0, r4
    84fc:	bl	6210 <rb_sha512_init_ctx>
    8500:	sub	r1, fp, #164	; 0xa4
    8504:	mov	r0, r4
    8508:	bl	7364 <rb_sha512_finish_ctx>
    850c:	add	r0, sp, #8
    8510:	str	r0, [fp, #-868]	; 0xfffffc9c
    8514:	mov	r2, r5
    8518:	b	8318 <rb_sha512_crypt_r+0x2b4>
    851c:	ldr	r0, [fp, #-868]	; 0xfffffc9c
    8520:	mov	r2, r5
    8524:	b	8318 <rb_sha512_crypt_r+0x2b4>
    8528:	ldr	r0, [fp, #-872]	; 0xfffffc98
    852c:	mov	r2, r7
    8530:	b	83f8 <rb_sha512_crypt_r+0x394>
    8534:	mov	r2, r6
    8538:	ldr	r1, [fp, #-876]	; 0xfffffc94
    853c:	ldr	r0, [fp, #-872]	; 0xfffffc98
    8540:	bl	719c <rb_sha512_process_bytes>
    8544:	b	85c4 <rb_sha512_crypt_r+0x560>
    8548:	mov	r2, r6
    854c:	mov	r1, r5
    8550:	ldr	r0, [fp, #-868]	; 0xfffffc9c
    8554:	bl	719c <rb_sha512_process_bytes>
    8558:	cmp	r7, #0
    855c:	mov	r2, r6
    8560:	movne	r1, #64	; 0x40
    8564:	subne	r0, fp, #100	; 0x64
    8568:	moveq	r1, r5
    856c:	ldreq	r0, [fp, #-868]	; 0xfffffc9c
    8570:	bl	719c <rb_sha512_process_bytes>
    8574:	sub	r1, fp, #100	; 0x64
    8578:	mov	r0, r6
    857c:	bl	7364 <rb_sha512_finish_ctx>
    8580:	add	r4, r4, #1
    8584:	cmp	r8, r4
    8588:	beq	85e4 <rb_sha512_crypt_r+0x580>
    858c:	mov	r0, r6
    8590:	bl	6210 <rb_sha512_init_ctx>
    8594:	ands	r7, r4, #1
    8598:	mov	r2, r6
    859c:	movne	r1, r5
    85a0:	ldrne	r0, [fp, #-868]	; 0xfffffc9c
    85a4:	moveq	r1, #64	; 0x40
    85a8:	subeq	r0, fp, #100	; 0x64
    85ac:	bl	719c <rb_sha512_process_bytes>
    85b0:	umull	r2, r3, sl, r4
    85b4:	lsr	r3, r3, #1
    85b8:	add	r3, r3, r3, lsl #1
    85bc:	cmp	r4, r3
    85c0:	bne	8534 <rb_sha512_crypt_r+0x4d0>
    85c4:	umull	r2, r3, r9, r4
    85c8:	sub	r2, r4, r3
    85cc:	add	r3, r3, r2, lsr #1
    85d0:	lsr	r3, r3, #2
    85d4:	rsb	r3, r3, r3, lsl #3
    85d8:	cmp	r4, r3
    85dc:	beq	8558 <rb_sha512_crypt_r+0x4f4>
    85e0:	b	8548 <rb_sha512_crypt_r+0x4e4>
    85e4:	ldr	r7, [fp, #-876]	; 0xfffffc94
    85e8:	ldr	r3, [fp, #-884]	; 0xfffffc8c
    85ec:	bic	r6, r3, r3, asr #31
    85f0:	mov	r2, r6
    85f4:	mov	r1, #0
    85f8:	ldr	r8, [fp, #-880]	; 0xfffffc90
    85fc:	mov	r0, r8
    8600:	bl	45dc <memset@plt>
    8604:	mov	r2, r6
    8608:	ldr	r1, [pc, #2364]	; 8f4c <rb_sha512_crypt_r+0xee8>
    860c:	add	r1, pc, r1
    8610:	add	r1, r1, #2016	; 0x7e0
    8614:	add	r1, r1, #4
    8618:	mov	r0, r8
    861c:	bl	4528 <strncpy@plt>
    8620:	mov	r0, r8
    8624:	bl	4798 <strlen@plt>
    8628:	mov	r3, r8
    862c:	adds	r8, r8, r0
    8630:	ldreq	r3, [fp, #-880]	; 0xfffffc90
    8634:	addeq	r8, r3, r6
    8638:	ldr	r3, [fp, #-884]	; 0xfffffc8c
    863c:	sub	r6, r3, #3
    8640:	ldr	r3, [fp, #-888]	; 0xfffffc88
    8644:	cmp	r3, #0
    8648:	bne	8ef8 <rb_sha512_crypt_r+0xe94>
    864c:	bic	r4, r6, r6, asr #31
    8650:	cmp	r4, r7
    8654:	movcs	r4, r7
    8658:	mov	r2, r4
    865c:	mov	r1, #0
    8660:	mov	r0, r8
    8664:	bl	45dc <memset@plt>
    8668:	mov	r2, r4
    866c:	ldr	r1, [fp, #-864]	; 0xfffffca0
    8670:	mov	r0, r8
    8674:	bl	4528 <strncpy@plt>
    8678:	ldr	r8, [fp, #-880]	; 0xfffffc90
    867c:	mov	r0, r8
    8680:	bl	4798 <strlen@plt>
    8684:	adds	r0, r8, r0
    8688:	addeq	r0, r8, r7
    868c:	sub	r6, r6, r4
    8690:	cmp	r6, #0
    8694:	ble	8f2c <rb_sha512_crypt_r+0xec8>
    8698:	mov	r3, r0
    869c:	mov	r2, #36	; 0x24
    86a0:	strb	r2, [r3], #1
    86a4:	sub	r6, r6, #1
    86a8:	ldrb	r1, [fp, #-100]	; 0xffffff9c
    86ac:	ldrb	r2, [fp, #-79]	; 0xffffffb1
    86b0:	lsl	r2, r2, #8
    86b4:	orr	r2, r2, r1, lsl #16
    86b8:	ldrb	r1, [fp, #-58]	; 0xffffffc6
    86bc:	orr	r2, r2, r1
    86c0:	cmp	r6, #0
    86c4:	ble	8f2c <rb_sha512_crypt_r+0xec8>
    86c8:	ldr	lr, [pc, #2176]	; 8f50 <rb_sha512_crypt_r+0xeec>
    86cc:	add	lr, pc, lr
    86d0:	and	r1, r2, #63	; 0x3f
    86d4:	add	r1, lr, r1
    86d8:	ldrb	r1, [r1, #848]	; 0x350
    86dc:	strb	r1, [r3], #1
    86e0:	sub	r6, r6, #1
    86e4:	lsr	r2, r2, #6
    86e8:	mov	ip, r3
    86ec:	rsb	r1, r3, #5
    86f0:	add	r1, r0, r1
    86f4:	cmp	r1, #0
    86f8:	cmpgt	r6, #0
    86fc:	bgt	86d0 <rb_sha512_crypt_r+0x66c>
    8700:	ldrb	r1, [fp, #-78]	; 0xffffffb2
    8704:	ldrb	r2, [fp, #-57]	; 0xffffffc7
    8708:	lsl	r2, r2, #8
    870c:	orr	r2, r2, r1, lsl #16
    8710:	ldrb	r1, [fp, #-99]	; 0xffffff9d
    8714:	orr	r2, r2, r1
    8718:	cmp	r6, #0
    871c:	ble	8f2c <rb_sha512_crypt_r+0xec8>
    8720:	ldr	lr, [pc, #2092]	; 8f54 <rb_sha512_crypt_r+0xef0>
    8724:	add	lr, pc, lr
    8728:	and	r1, r2, #63	; 0x3f
    872c:	add	r1, lr, r1
    8730:	ldrb	r1, [r1, #848]	; 0x350
    8734:	strb	r1, [r3], #1
    8738:	sub	r6, r6, #1
    873c:	lsr	r2, r2, #6
    8740:	mov	r0, r3
    8744:	rsb	r1, r3, #4
    8748:	add	r1, r1, ip
    874c:	cmp	r1, #0
    8750:	cmpgt	r6, #0
    8754:	bgt	8728 <rb_sha512_crypt_r+0x6c4>
    8758:	ldrb	r1, [fp, #-56]	; 0xffffffc8
    875c:	ldrb	r2, [fp, #-98]	; 0xffffff9e
    8760:	lsl	r2, r2, #8
    8764:	orr	r2, r2, r1, lsl #16
    8768:	ldrb	r1, [fp, #-77]	; 0xffffffb3
    876c:	orr	r2, r2, r1
    8770:	cmp	r6, #0
    8774:	ble	8f2c <rb_sha512_crypt_r+0xec8>
    8778:	ldr	lr, [pc, #2008]	; 8f58 <rb_sha512_crypt_r+0xef4>
    877c:	add	lr, pc, lr
    8780:	and	r1, r2, #63	; 0x3f
    8784:	add	r1, lr, r1
    8788:	ldrb	r1, [r1, #848]	; 0x350
    878c:	strb	r1, [r3], #1
    8790:	sub	r6, r6, #1
    8794:	lsr	r2, r2, #6
    8798:	mov	ip, r3
    879c:	rsb	r1, r3, #4
    87a0:	add	r1, r1, r0
    87a4:	cmp	r1, #0
    87a8:	cmpgt	r6, #0
    87ac:	bgt	8780 <rb_sha512_crypt_r+0x71c>
    87b0:	ldrb	r1, [fp, #-97]	; 0xffffff9f
    87b4:	ldrb	r2, [fp, #-76]	; 0xffffffb4
    87b8:	lsl	r2, r2, #8
    87bc:	orr	r2, r2, r1, lsl #16
    87c0:	ldrb	r1, [fp, #-55]	; 0xffffffc9
    87c4:	orr	r2, r2, r1
    87c8:	cmp	r6, #0
    87cc:	ble	8f2c <rb_sha512_crypt_r+0xec8>
    87d0:	ldr	lr, [pc, #1924]	; 8f5c <rb_sha512_crypt_r+0xef8>
    87d4:	add	lr, pc, lr
    87d8:	and	r1, r2, #63	; 0x3f
    87dc:	add	r1, lr, r1
    87e0:	ldrb	r1, [r1, #848]	; 0x350
    87e4:	strb	r1, [r3], #1
    87e8:	sub	r6, r6, #1
    87ec:	lsr	r2, r2, #6
    87f0:	mov	r0, r3
    87f4:	rsb	r1, r3, #4
    87f8:	add	r1, r1, ip
    87fc:	cmp	r1, #0
    8800:	cmpgt	r6, #0
    8804:	bgt	87d8 <rb_sha512_crypt_r+0x774>
    8808:	ldrb	r1, [fp, #-75]	; 0xffffffb5
    880c:	ldrb	r2, [fp, #-54]	; 0xffffffca
    8810:	lsl	r2, r2, #8
    8814:	orr	r2, r2, r1, lsl #16
    8818:	ldrb	r1, [fp, #-96]	; 0xffffffa0
    881c:	orr	r2, r2, r1
    8820:	cmp	r6, #0
    8824:	ble	8f2c <rb_sha512_crypt_r+0xec8>
    8828:	ldr	lr, [pc, #1840]	; 8f60 <rb_sha512_crypt_r+0xefc>
    882c:	add	lr, pc, lr
    8830:	and	r1, r2, #63	; 0x3f
    8834:	add	r1, lr, r1
    8838:	ldrb	r1, [r1, #848]	; 0x350
    883c:	strb	r1, [r3], #1
    8840:	sub	r6, r6, #1
    8844:	lsr	r2, r2, #6
    8848:	mov	ip, r3
    884c:	rsb	r1, r3, #4
    8850:	add	r1, r1, r0
    8854:	cmp	r1, #0
    8858:	cmpgt	r6, #0
    885c:	bgt	8830 <rb_sha512_crypt_r+0x7cc>
    8860:	ldrb	r1, [fp, #-53]	; 0xffffffcb
    8864:	ldrb	r2, [fp, #-95]	; 0xffffffa1
    8868:	lsl	r2, r2, #8
    886c:	orr	r2, r2, r1, lsl #16
    8870:	ldrb	r1, [fp, #-74]	; 0xffffffb6
    8874:	orr	r2, r2, r1
    8878:	cmp	r6, #0
    887c:	ble	8f2c <rb_sha512_crypt_r+0xec8>
    8880:	ldr	lr, [pc, #1756]	; 8f64 <rb_sha512_crypt_r+0xf00>
    8884:	add	lr, pc, lr
    8888:	and	r1, r2, #63	; 0x3f
    888c:	add	r1, lr, r1
    8890:	ldrb	r1, [r1, #848]	; 0x350
    8894:	strb	r1, [r3], #1
    8898:	sub	r6, r6, #1
    889c:	lsr	r2, r2, #6
    88a0:	mov	r0, r3
    88a4:	rsb	r1, r3, #4
    88a8:	add	r1, r1, ip
    88ac:	cmp	r1, #0
    88b0:	cmpgt	r6, #0
    88b4:	bgt	8888 <rb_sha512_crypt_r+0x824>
    88b8:	ldrb	r1, [fp, #-94]	; 0xffffffa2
    88bc:	ldrb	r2, [fp, #-73]	; 0xffffffb7
    88c0:	lsl	r2, r2, #8
    88c4:	orr	r2, r2, r1, lsl #16
    88c8:	ldrb	r1, [fp, #-52]	; 0xffffffcc
    88cc:	orr	r2, r2, r1
    88d0:	cmp	r6, #0
    88d4:	ble	8f2c <rb_sha512_crypt_r+0xec8>
    88d8:	ldr	lr, [pc, #1672]	; 8f68 <rb_sha512_crypt_r+0xf04>
    88dc:	add	lr, pc, lr
    88e0:	and	r1, r2, #63	; 0x3f
    88e4:	add	r1, lr, r1
    88e8:	ldrb	r1, [r1, #848]	; 0x350
    88ec:	strb	r1, [r3], #1
    88f0:	sub	r6, r6, #1
    88f4:	lsr	r2, r2, #6
    88f8:	mov	ip, r3
    88fc:	rsb	r1, r3, #4
    8900:	add	r1, r1, r0
    8904:	cmp	r1, #0
    8908:	cmpgt	r6, #0
    890c:	bgt	88e0 <rb_sha512_crypt_r+0x87c>
    8910:	ldrb	r1, [fp, #-72]	; 0xffffffb8
    8914:	ldrb	r2, [fp, #-51]	; 0xffffffcd
    8918:	lsl	r2, r2, #8
    891c:	orr	r2, r2, r1, lsl #16
    8920:	ldrb	r1, [fp, #-93]	; 0xffffffa3
    8924:	orr	r2, r2, r1
    8928:	cmp	r6, #0
    892c:	ble	8f2c <rb_sha512_crypt_r+0xec8>
    8930:	ldr	lr, [pc, #1588]	; 8f6c <rb_sha512_crypt_r+0xf08>
    8934:	add	lr, pc, lr
    8938:	and	r1, r2, #63	; 0x3f
    893c:	add	r1, lr, r1
    8940:	ldrb	r1, [r1, #848]	; 0x350
    8944:	strb	r1, [r3], #1
    8948:	sub	r6, r6, #1
    894c:	lsr	r2, r2, #6
    8950:	mov	r0, r3
    8954:	rsb	r1, r3, #4
    8958:	add	r1, r1, ip
    895c:	cmp	r1, #0
    8960:	cmpgt	r6, #0
    8964:	bgt	8938 <rb_sha512_crypt_r+0x8d4>
    8968:	ldrb	r1, [fp, #-50]	; 0xffffffce
    896c:	ldrb	r2, [fp, #-92]	; 0xffffffa4
    8970:	lsl	r2, r2, #8
    8974:	orr	r2, r2, r1, lsl #16
    8978:	ldrb	r1, [fp, #-71]	; 0xffffffb9
    897c:	orr	r2, r2, r1
    8980:	cmp	r6, #0
    8984:	ble	8f2c <rb_sha512_crypt_r+0xec8>
    8988:	ldr	lr, [pc, #1504]	; 8f70 <rb_sha512_crypt_r+0xf0c>
    898c:	add	lr, pc, lr
    8990:	and	r1, r2, #63	; 0x3f
    8994:	add	r1, lr, r1
    8998:	ldrb	r1, [r1, #848]	; 0x350
    899c:	strb	r1, [r3], #1
    89a0:	sub	r6, r6, #1
    89a4:	lsr	r2, r2, #6
    89a8:	mov	ip, r3
    89ac:	rsb	r1, r3, #4
    89b0:	add	r1, r1, r0
    89b4:	cmp	r1, #0
    89b8:	cmpgt	r6, #0
    89bc:	bgt	8990 <rb_sha512_crypt_r+0x92c>
    89c0:	ldrb	r1, [fp, #-91]	; 0xffffffa5
    89c4:	ldrb	r2, [fp, #-70]	; 0xffffffba
    89c8:	lsl	r2, r2, #8
    89cc:	orr	r2, r2, r1, lsl #16
    89d0:	ldrb	r1, [fp, #-49]	; 0xffffffcf
    89d4:	orr	r2, r2, r1
    89d8:	cmp	r6, #0
    89dc:	ble	8f2c <rb_sha512_crypt_r+0xec8>
    89e0:	ldr	lr, [pc, #1420]	; 8f74 <rb_sha512_crypt_r+0xf10>
    89e4:	add	lr, pc, lr
    89e8:	and	r1, r2, #63	; 0x3f
    89ec:	add	r1, lr, r1
    89f0:	ldrb	r1, [r1, #848]	; 0x350
    89f4:	strb	r1, [r3], #1
    89f8:	sub	r6, r6, #1
    89fc:	lsr	r2, r2, #6
    8a00:	mov	r0, r3
    8a04:	rsb	r1, r3, #4
    8a08:	add	r1, r1, ip
    8a0c:	cmp	r1, #0
    8a10:	cmpgt	r6, #0
    8a14:	bgt	89e8 <rb_sha512_crypt_r+0x984>
    8a18:	ldrb	r1, [fp, #-69]	; 0xffffffbb
    8a1c:	ldrb	r2, [fp, #-48]	; 0xffffffd0
    8a20:	lsl	r2, r2, #8
    8a24:	orr	r2, r2, r1, lsl #16
    8a28:	ldrb	r1, [fp, #-90]	; 0xffffffa6
    8a2c:	orr	r2, r2, r1
    8a30:	cmp	r6, #0
    8a34:	ble	8f2c <rb_sha512_crypt_r+0xec8>
    8a38:	ldr	lr, [pc, #1336]	; 8f78 <rb_sha512_crypt_r+0xf14>
    8a3c:	add	lr, pc, lr
    8a40:	and	r1, r2, #63	; 0x3f
    8a44:	add	r1, lr, r1
    8a48:	ldrb	r1, [r1, #848]	; 0x350
    8a4c:	strb	r1, [r3], #1
    8a50:	sub	r6, r6, #1
    8a54:	lsr	r2, r2, #6
    8a58:	mov	ip, r3
    8a5c:	rsb	r1, r3, #4
    8a60:	add	r1, r1, r0
    8a64:	cmp	r1, #0
    8a68:	cmpgt	r6, #0
    8a6c:	bgt	8a40 <rb_sha512_crypt_r+0x9dc>
    8a70:	ldrb	r1, [fp, #-47]	; 0xffffffd1
    8a74:	ldrb	r2, [fp, #-89]	; 0xffffffa7
    8a78:	lsl	r2, r2, #8
    8a7c:	orr	r2, r2, r1, lsl #16
    8a80:	ldrb	r1, [fp, #-68]	; 0xffffffbc
    8a84:	orr	r2, r2, r1
    8a88:	cmp	r6, #0
    8a8c:	ble	8f2c <rb_sha512_crypt_r+0xec8>
    8a90:	ldr	lr, [pc, #1252]	; 8f7c <rb_sha512_crypt_r+0xf18>
    8a94:	add	lr, pc, lr
    8a98:	and	r1, r2, #63	; 0x3f
    8a9c:	add	r1, lr, r1
    8aa0:	ldrb	r1, [r1, #848]	; 0x350
    8aa4:	strb	r1, [r3], #1
    8aa8:	sub	r6, r6, #1
    8aac:	lsr	r2, r2, #6
    8ab0:	mov	r0, r3
    8ab4:	rsb	r1, r3, #4
    8ab8:	add	r1, r1, ip
    8abc:	cmp	r1, #0
    8ac0:	cmpgt	r6, #0
    8ac4:	bgt	8a98 <rb_sha512_crypt_r+0xa34>
    8ac8:	ldrb	r1, [fp, #-88]	; 0xffffffa8
    8acc:	ldrb	r2, [fp, #-67]	; 0xffffffbd
    8ad0:	lsl	r2, r2, #8
    8ad4:	orr	r2, r2, r1, lsl #16
    8ad8:	ldrb	r1, [fp, #-46]	; 0xffffffd2
    8adc:	orr	r2, r2, r1
    8ae0:	cmp	r6, #0
    8ae4:	ble	8f2c <rb_sha512_crypt_r+0xec8>
    8ae8:	ldr	lr, [pc, #1168]	; 8f80 <rb_sha512_crypt_r+0xf1c>
    8aec:	add	lr, pc, lr
    8af0:	and	r1, r2, #63	; 0x3f
    8af4:	add	r1, lr, r1
    8af8:	ldrb	r1, [r1, #848]	; 0x350
    8afc:	strb	r1, [r3], #1
    8b00:	sub	r6, r6, #1
    8b04:	lsr	r2, r2, #6
    8b08:	mov	ip, r3
    8b0c:	rsb	r1, r3, #4
    8b10:	add	r1, r1, r0
    8b14:	cmp	r1, #0
    8b18:	cmpgt	r6, #0
    8b1c:	bgt	8af0 <rb_sha512_crypt_r+0xa8c>
    8b20:	ldrb	r1, [fp, #-66]	; 0xffffffbe
    8b24:	ldrb	r2, [fp, #-45]	; 0xffffffd3
    8b28:	lsl	r2, r2, #8
    8b2c:	orr	r2, r2, r1, lsl #16
    8b30:	ldrb	r1, [fp, #-87]	; 0xffffffa9
    8b34:	orr	r2, r2, r1
    8b38:	cmp	r6, #0
    8b3c:	ble	8f2c <rb_sha512_crypt_r+0xec8>
    8b40:	ldr	lr, [pc, #1084]	; 8f84 <rb_sha512_crypt_r+0xf20>
    8b44:	add	lr, pc, lr
    8b48:	and	r1, r2, #63	; 0x3f
    8b4c:	add	r1, lr, r1
    8b50:	ldrb	r1, [r1, #848]	; 0x350
    8b54:	strb	r1, [r3], #1
    8b58:	sub	r6, r6, #1
    8b5c:	lsr	r2, r2, #6
    8b60:	mov	r0, r3
    8b64:	rsb	r1, r3, #4
    8b68:	add	r1, r1, ip
    8b6c:	cmp	r1, #0
    8b70:	cmpgt	r6, #0
    8b74:	bgt	8b48 <rb_sha512_crypt_r+0xae4>
    8b78:	ldrb	r1, [fp, #-44]	; 0xffffffd4
    8b7c:	ldrb	r2, [fp, #-86]	; 0xffffffaa
    8b80:	lsl	r2, r2, #8
    8b84:	orr	r2, r2, r1, lsl #16
    8b88:	ldrb	r1, [fp, #-65]	; 0xffffffbf
    8b8c:	orr	r2, r2, r1
    8b90:	cmp	r6, #0
    8b94:	ble	8f2c <rb_sha512_crypt_r+0xec8>
    8b98:	ldr	lr, [pc, #1000]	; 8f88 <rb_sha512_crypt_r+0xf24>
    8b9c:	add	lr, pc, lr
    8ba0:	and	r1, r2, #63	; 0x3f
    8ba4:	add	r1, lr, r1
    8ba8:	ldrb	r1, [r1, #848]	; 0x350
    8bac:	strb	r1, [r3], #1
    8bb0:	sub	r6, r6, #1
    8bb4:	lsr	r2, r2, #6
    8bb8:	mov	ip, r3
    8bbc:	rsb	r1, r3, #4
    8bc0:	add	r1, r1, r0
    8bc4:	cmp	r1, #0
    8bc8:	cmpgt	r6, #0
    8bcc:	bgt	8ba0 <rb_sha512_crypt_r+0xb3c>
    8bd0:	ldrb	r1, [fp, #-85]	; 0xffffffab
    8bd4:	ldrb	r2, [fp, #-64]	; 0xffffffc0
    8bd8:	lsl	r2, r2, #8
    8bdc:	orr	r2, r2, r1, lsl #16
    8be0:	ldrb	r1, [fp, #-43]	; 0xffffffd5
    8be4:	orr	r2, r2, r1
    8be8:	cmp	r6, #0
    8bec:	ble	8f2c <rb_sha512_crypt_r+0xec8>
    8bf0:	ldr	lr, [pc, #916]	; 8f8c <rb_sha512_crypt_r+0xf28>
    8bf4:	add	lr, pc, lr
    8bf8:	and	r1, r2, #63	; 0x3f
    8bfc:	add	r1, lr, r1
    8c00:	ldrb	r1, [r1, #848]	; 0x350
    8c04:	strb	r1, [r3], #1
    8c08:	sub	r6, r6, #1
    8c0c:	lsr	r2, r2, #6
    8c10:	mov	r0, r3
    8c14:	rsb	r1, r3, #4
    8c18:	add	r1, r1, ip
    8c1c:	cmp	r1, #0
    8c20:	cmpgt	r6, #0
    8c24:	bgt	8bf8 <rb_sha512_crypt_r+0xb94>
    8c28:	ldrb	r1, [fp, #-63]	; 0xffffffc1
    8c2c:	ldrb	r2, [fp, #-42]	; 0xffffffd6
    8c30:	lsl	r2, r2, #8
    8c34:	orr	r2, r2, r1, lsl #16
    8c38:	ldrb	r1, [fp, #-84]	; 0xffffffac
    8c3c:	orr	r2, r2, r1
    8c40:	cmp	r6, #0
    8c44:	ble	8f2c <rb_sha512_crypt_r+0xec8>
    8c48:	ldr	lr, [pc, #832]	; 8f90 <rb_sha512_crypt_r+0xf2c>
    8c4c:	add	lr, pc, lr
    8c50:	and	r1, r2, #63	; 0x3f
    8c54:	add	r1, lr, r1
    8c58:	ldrb	r1, [r1, #848]	; 0x350
    8c5c:	strb	r1, [r3], #1
    8c60:	sub	r6, r6, #1
    8c64:	lsr	r2, r2, #6
    8c68:	mov	ip, r3
    8c6c:	rsb	r1, r3, #4
    8c70:	add	r1, r1, r0
    8c74:	cmp	r1, #0
    8c78:	cmpgt	r6, #0
    8c7c:	bgt	8c50 <rb_sha512_crypt_r+0xbec>
    8c80:	ldrb	r1, [fp, #-41]	; 0xffffffd7
    8c84:	ldrb	r2, [fp, #-83]	; 0xffffffad
    8c88:	lsl	r2, r2, #8
    8c8c:	orr	r2, r2, r1, lsl #16
    8c90:	ldrb	r1, [fp, #-62]	; 0xffffffc2
    8c94:	orr	r2, r2, r1
    8c98:	cmp	r6, #0
    8c9c:	ble	8f2c <rb_sha512_crypt_r+0xec8>
    8ca0:	ldr	lr, [pc, #748]	; 8f94 <rb_sha512_crypt_r+0xf30>
    8ca4:	add	lr, pc, lr
    8ca8:	and	r1, r2, #63	; 0x3f
    8cac:	add	r1, lr, r1
    8cb0:	ldrb	r1, [r1, #848]	; 0x350
    8cb4:	strb	r1, [r3], #1
    8cb8:	sub	r6, r6, #1
    8cbc:	lsr	r2, r2, #6
    8cc0:	mov	r0, r3
    8cc4:	rsb	r1, r3, #4
    8cc8:	add	r1, r1, ip
    8ccc:	cmp	r1, #0
    8cd0:	cmpgt	r6, #0
    8cd4:	bgt	8ca8 <rb_sha512_crypt_r+0xc44>
    8cd8:	ldrb	r1, [fp, #-82]	; 0xffffffae
    8cdc:	ldrb	r2, [fp, #-61]	; 0xffffffc3
    8ce0:	lsl	r2, r2, #8
    8ce4:	orr	r2, r2, r1, lsl #16
    8ce8:	ldrb	r1, [fp, #-40]	; 0xffffffd8
    8cec:	orr	r2, r2, r1
    8cf0:	cmp	r6, #0
    8cf4:	ble	8f2c <rb_sha512_crypt_r+0xec8>
    8cf8:	ldr	lr, [pc, #664]	; 8f98 <rb_sha512_crypt_r+0xf34>
    8cfc:	add	lr, pc, lr
    8d00:	and	r1, r2, #63	; 0x3f
    8d04:	add	r1, lr, r1
    8d08:	ldrb	r1, [r1, #848]	; 0x350
    8d0c:	strb	r1, [r3], #1
    8d10:	sub	r6, r6, #1
    8d14:	lsr	r2, r2, #6
    8d18:	mov	ip, r3
    8d1c:	rsb	r1, r3, #4
    8d20:	add	r1, r1, r0
    8d24:	cmp	r1, #0
    8d28:	cmpgt	r6, #0
    8d2c:	bgt	8d00 <rb_sha512_crypt_r+0xc9c>
    8d30:	ldrb	r1, [fp, #-60]	; 0xffffffc4
    8d34:	ldrb	r2, [fp, #-39]	; 0xffffffd9
    8d38:	lsl	r2, r2, #8
    8d3c:	orr	r2, r2, r1, lsl #16
    8d40:	ldrb	r1, [fp, #-81]	; 0xffffffaf
    8d44:	orr	r2, r2, r1
    8d48:	cmp	r6, #0
    8d4c:	ble	8f2c <rb_sha512_crypt_r+0xec8>
    8d50:	ldr	lr, [pc, #580]	; 8f9c <rb_sha512_crypt_r+0xf38>
    8d54:	add	lr, pc, lr
    8d58:	and	r1, r2, #63	; 0x3f
    8d5c:	add	r1, lr, r1
    8d60:	ldrb	r1, [r1, #848]	; 0x350
    8d64:	strb	r1, [r3], #1
    8d68:	sub	r6, r6, #1
    8d6c:	lsr	r2, r2, #6
    8d70:	mov	r0, r3
    8d74:	rsb	r1, r3, #4
    8d78:	add	r1, r1, ip
    8d7c:	cmp	r1, #0
    8d80:	cmpgt	r6, #0
    8d84:	bgt	8d58 <rb_sha512_crypt_r+0xcf4>
    8d88:	ldrb	r1, [fp, #-38]	; 0xffffffda
    8d8c:	ldrb	r2, [fp, #-80]	; 0xffffffb0
    8d90:	lsl	r2, r2, #8
    8d94:	orr	r2, r2, r1, lsl #16
    8d98:	ldrb	r1, [fp, #-59]	; 0xffffffc5
    8d9c:	orr	r2, r2, r1
    8da0:	cmp	r6, #0
    8da4:	ble	8f2c <rb_sha512_crypt_r+0xec8>
    8da8:	ldr	lr, [pc, #496]	; 8fa0 <rb_sha512_crypt_r+0xf3c>
    8dac:	add	lr, pc, lr
    8db0:	and	r1, r2, #63	; 0x3f
    8db4:	add	r1, lr, r1
    8db8:	ldrb	r1, [r1, #848]	; 0x350
    8dbc:	strb	r1, [r3], #1
    8dc0:	sub	r6, r6, #1
    8dc4:	lsr	r2, r2, #6
    8dc8:	mov	ip, r3
    8dcc:	rsb	r1, r3, #4
    8dd0:	add	r1, r1, r0
    8dd4:	cmp	r1, #0
    8dd8:	cmpgt	r6, #0
    8ddc:	bgt	8db0 <rb_sha512_crypt_r+0xd4c>
    8de0:	ldrb	r1, [fp, #-37]	; 0xffffffdb
    8de4:	cmp	r6, #0
    8de8:	ble	8f2c <rb_sha512_crypt_r+0xec8>
    8dec:	ldr	r0, [pc, #432]	; 8fa4 <rb_sha512_crypt_r+0xf40>
    8df0:	add	r0, pc, r0
    8df4:	and	r2, r1, #63	; 0x3f
    8df8:	add	r2, r0, r2
    8dfc:	ldrb	r2, [r2, #848]	; 0x350
    8e00:	strb	r2, [r3], #1
    8e04:	sub	r6, r6, #1
    8e08:	lsr	r1, r1, #6
    8e0c:	rsb	r2, r3, #2
    8e10:	add	r2, r2, ip
    8e14:	cmp	r2, #0
    8e18:	cmpgt	r6, #0
    8e1c:	bgt	8df4 <rb_sha512_crypt_r+0xd90>
    8e20:	cmp	r6, #0
    8e24:	ble	8f2c <rb_sha512_crypt_r+0xec8>
    8e28:	mov	r2, #0
    8e2c:	strb	r2, [r3]
    8e30:	ldr	r4, [fp, #-880]	; 0xfffffc90
    8e34:	sub	r6, fp, #508	; 0x1fc
    8e38:	mov	r0, r6
    8e3c:	bl	6210 <rb_sha512_init_ctx>
    8e40:	sub	r1, fp, #100	; 0x64
    8e44:	mov	r0, r6
    8e48:	bl	7364 <rb_sha512_finish_ctx>
    8e4c:	mov	r2, #64	; 0x40
    8e50:	mov	r1, #0
    8e54:	sub	r0, fp, #164	; 0xa4
    8e58:	bl	45dc <memset@plt>
    8e5c:	mov	r2, r5
    8e60:	mov	r1, #0
    8e64:	ldr	r0, [fp, #-868]	; 0xfffffc9c
    8e68:	bl	45dc <memset@plt>
    8e6c:	mov	r2, r7
    8e70:	mov	r1, #0
    8e74:	ldr	r0, [fp, #-872]	; 0xfffffc98
    8e78:	bl	45dc <memset@plt>
    8e7c:	mov	r8, #344	; 0x158
    8e80:	mov	r2, r8
    8e84:	mov	r1, #0
    8e88:	mov	r0, r6
    8e8c:	bl	45dc <memset@plt>
    8e90:	mov	r2, r8
    8e94:	mov	r1, #0
    8e98:	sub	r0, fp, #852	; 0x354
    8e9c:	bl	45dc <memset@plt>
    8ea0:	ldr	r3, [fp, #-892]	; 0xfffffc84
    8ea4:	cmp	r3, #0
    8ea8:	beq	8ebc <rb_sha512_crypt_r+0xe58>
    8eac:	mov	r2, r5
    8eb0:	mov	r1, #0
    8eb4:	mov	r0, r3
    8eb8:	bl	45dc <memset@plt>
    8ebc:	ldr	r3, [fp, #-896]	; 0xfffffc80
    8ec0:	cmp	r3, #0
    8ec4:	beq	8ed8 <rb_sha512_crypt_r+0xe74>
    8ec8:	mov	r2, r7
    8ecc:	mov	r1, #0
    8ed0:	mov	r0, r3
    8ed4:	bl	45dc <memset@plt>
    8ed8:	mov	r0, r4
    8edc:	sub	sp, fp, #32
    8ee0:	ldrd	r4, [sp]
    8ee4:	ldrd	r6, [sp, #8]
    8ee8:	ldrd	r8, [sp, #16]
    8eec:	ldrd	sl, [sp, #24]
    8ef0:	add	sp, sp, #32
    8ef4:	pop	{pc}		; (ldr pc, [sp], #4)
    8ef8:	str	r4, [sp]
    8efc:	ldr	r3, [pc, #164]	; 8fa8 <rb_sha512_crypt_r+0xf44>
    8f00:	add	r3, pc, r3
    8f04:	add	r3, r3, #2016	; 0x7e0
    8f08:	add	r3, r3, #8
    8f0c:	ldr	r2, [pc, #152]	; 8fac <rb_sha512_crypt_r+0xf48>
    8f10:	add	r2, pc, r2
    8f14:	bic	r1, r6, r6, asr #31
    8f18:	mov	r0, r8
    8f1c:	bl	4b58 <snprintf@plt>
    8f20:	add	r8, r8, r0
    8f24:	sub	r6, r6, r0
    8f28:	b	864c <rb_sha512_crypt_r+0x5e8>
    8f2c:	bl	4c90 <__errno_location@plt>
    8f30:	mov	r3, #34	; 0x22
    8f34:	str	r3, [r0]
    8f38:	mov	r4, #0
    8f3c:	b	8e34 <rb_sha512_crypt_r+0xdd0>
    8f40:	.word	0x0000e21c
    8f44:	.word	0x0000e1f4
    8f48:	.word	0x0000e9c0
    8f4c:	.word	0x0000dcac
    8f50:	.word	0x0000dbec
    8f54:	.word	0x0000db94
    8f58:	.word	0x0000db3c
    8f5c:	.word	0x0000dae4
    8f60:	.word	0x0000da8c
    8f64:	.word	0x0000da34
    8f68:	.word	0x0000d9dc
    8f6c:	.word	0x0000d984
    8f70:	.word	0x0000d92c
    8f74:	.word	0x0000d8d4
    8f78:	.word	0x0000d87c
    8f7c:	.word	0x0000d824
    8f80:	.word	0x0000d7cc
    8f84:	.word	0x0000d774
    8f88:	.word	0x0000d71c
    8f8c:	.word	0x0000d6c4
    8f90:	.word	0x0000d66c
    8f94:	.word	0x0000d614
    8f98:	.word	0x0000d5bc
    8f9c:	.word	0x0000d564
    8fa0:	.word	0x0000d50c
    8fa4:	.word	0x0000d4c8
    8fa8:	.word	0x0000d3b8
    8fac:	.word	0x0000dbac

00008fb0 <rb_crypt>:
    8fb0:	strd	r4, [sp, #-36]!	; 0xffffffdc
    8fb4:	strd	r6, [sp, #8]
    8fb8:	strd	r8, [sp, #16]
    8fbc:	strd	sl, [sp, #24]
    8fc0:	str	lr, [sp, #32]
    8fc4:	sub	sp, sp, #228	; 0xe4
    8fc8:	mov	r4, r0
    8fcc:	mov	r5, r1
    8fd0:	ldrb	r3, [r1]
    8fd4:	cmp	r3, #36	; 0x24
    8fd8:	bne	9560 <rb_crypt+0x5b0>
    8fdc:	ldrb	r3, [r1, #2]
    8fe0:	cmp	r3, #36	; 0x24
    8fe4:	beq	8ff4 <rb_crypt+0x44>
    8fe8:	ldrb	r3, [r1, #3]
    8fec:	cmp	r3, #36	; 0x24
    8ff0:	bne	9560 <rb_crypt+0x5b0>
    8ff4:	ldrb	r3, [r5, #1]
    8ff8:	cmp	r3, #53	; 0x35
    8ffc:	beq	94c0 <rb_crypt+0x510>
    9000:	cmp	r3, #54	; 0x36
    9004:	beq	94f4 <rb_crypt+0x544>
    9008:	cmp	r3, #49	; 0x31
    900c:	movne	r0, #0
    9010:	bne	9c38 <rb_crypt+0xc88>
    9014:	ldr	r3, [pc, #3148]	; 9c68 <rb_crypt+0xcb8>
    9018:	add	r3, pc, r3
    901c:	str	r5, [r3, #1092]	; 0x444
    9020:	mov	r2, #3
    9024:	ldr	r1, [pc, #3136]	; 9c6c <rb_crypt+0xcbc>
    9028:	add	r1, pc, r1
    902c:	mov	r0, r5
    9030:	bl	4bb8 <strncmp@plt>
    9034:	cmp	r0, #0
    9038:	bne	9c54 <rb_crypt+0xca4>
    903c:	add	r6, r5, #3
    9040:	ldr	r3, [pc, #3112]	; 9c70 <rb_crypt+0xcc0>
    9044:	add	r3, pc, r3
    9048:	str	r6, [r3, #1092]	; 0x444
    904c:	str	r6, [r3, #1096]	; 0x448
    9050:	ldrb	r3, [r5, #3]
    9054:	cmp	r3, #0
    9058:	cmpne	r3, #36	; 0x24
    905c:	beq	92bc <rb_crypt+0x30c>
    9060:	add	r5, r5, #11
    9064:	mov	r3, r6
    9068:	ldrb	r2, [r3, #1]!
    906c:	cmp	r2, #0
    9070:	cmpne	r2, #36	; 0x24
    9074:	beq	92a8 <rb_crypt+0x2f8>
    9078:	cmp	r3, r5
    907c:	bne	9068 <rb_crypt+0xb8>
    9080:	ldr	r3, [pc, #3052]	; 9c74 <rb_crypt+0xcc4>
    9084:	add	r3, pc, r3
    9088:	str	r5, [r3, #1096]	; 0x448
    908c:	sub	r5, r5, r6
    9090:	mov	r7, #0
    9094:	str	r7, [sp, #68]	; 0x44
    9098:	str	r7, [sp, #64]	; 0x40
    909c:	movw	fp, #8961	; 0x2301
    90a0:	movt	fp, #26437	; 0x6745
    90a4:	str	fp, [sp, #48]	; 0x30
    90a8:	movw	sl, #43913	; 0xab89
    90ac:	movt	sl, #61389	; 0xefcd
    90b0:	str	sl, [sp, #52]	; 0x34
    90b4:	movw	r9, #56574	; 0xdcfe
    90b8:	movt	r9, #39098	; 0x98ba
    90bc:	str	r9, [sp, #56]	; 0x38
    90c0:	movw	r8, #21622	; 0x5476
    90c4:	movt	r8, #4146	; 0x1032
    90c8:	str	r8, [sp, #60]	; 0x3c
    90cc:	mov	r0, r4
    90d0:	bl	4798 <strlen@plt>
    90d4:	mov	r2, r0
    90d8:	mov	r1, r4
    90dc:	add	r3, sp, #48	; 0x30
    90e0:	str	r3, [sp]
    90e4:	mov	r0, r3
    90e8:	bl	6cfc <MD5Update>
    90ec:	mov	r2, #3
    90f0:	ldr	r1, [pc, #2944]	; 9c78 <rb_crypt+0xcc8>
    90f4:	add	r1, pc, r1
    90f8:	ldr	r0, [sp]
    90fc:	bl	6cfc <MD5Update>
    9100:	str	r5, [sp, #4]
    9104:	mov	r2, r5
    9108:	mov	r1, r6
    910c:	ldr	r0, [sp]
    9110:	bl	6cfc <MD5Update>
    9114:	str	r7, [sp, #156]	; 0x9c
    9118:	str	r7, [sp, #152]	; 0x98
    911c:	str	fp, [sp, #136]	; 0x88
    9120:	str	sl, [sp, #140]	; 0x8c
    9124:	str	r9, [sp, #144]	; 0x90
    9128:	str	r8, [sp, #148]	; 0x94
    912c:	mov	r0, r4
    9130:	bl	4798 <strlen@plt>
    9134:	mov	r2, r0
    9138:	mov	r1, r4
    913c:	add	r7, sp, #136	; 0x88
    9140:	mov	r0, r7
    9144:	bl	6cfc <MD5Update>
    9148:	mov	r2, r5
    914c:	mov	r1, r6
    9150:	mov	r0, r7
    9154:	bl	6cfc <MD5Update>
    9158:	mov	r0, r4
    915c:	bl	4798 <strlen@plt>
    9160:	mov	r2, r0
    9164:	mov	r1, r4
    9168:	mov	r0, r7
    916c:	bl	6cfc <MD5Update>
    9170:	mov	r1, r7
    9174:	add	r0, sp, #32
    9178:	bl	6df0 <MD5Final>
    917c:	mov	r0, r4
    9180:	bl	4798 <strlen@plt>
    9184:	mov	r7, r0
    9188:	cmp	r0, #0
    918c:	ble	91cc <rb_crypt+0x21c>
    9190:	sub	r6, r0, #16
    9194:	sub	r0, r0, #1
    9198:	bic	r0, r0, #15
    919c:	sub	r6, r6, r0
    91a0:	add	r9, sp, #32
    91a4:	add	r8, sp, #48	; 0x30
    91a8:	cmp	r7, #16
    91ac:	movlt	r2, r7
    91b0:	movge	r2, #16
    91b4:	mov	r1, r9
    91b8:	mov	r0, r8
    91bc:	bl	6cfc <MD5Update>
    91c0:	sub	r7, r7, #16
    91c4:	cmp	r7, r6
    91c8:	bne	91a8 <rb_crypt+0x1f8>
    91cc:	mov	r2, #0
    91d0:	mov	r3, #0
    91d4:	strd	r2, [sp, #32]
    91d8:	strd	r2, [sp, #40]	; 0x28
    91dc:	mov	r0, r4
    91e0:	bl	4798 <strlen@plt>
    91e4:	subs	r6, r0, #0
    91e8:	beq	9218 <rb_crypt+0x268>
    91ec:	add	r8, sp, #48	; 0x30
    91f0:	mov	r7, #1
    91f4:	add	r9, sp, #32
    91f8:	tst	r6, #1
    91fc:	mov	r2, r7
    9200:	movne	r1, r9
    9204:	moveq	r1, r4
    9208:	mov	r0, r8
    920c:	bl	6cfc <MD5Update>
    9210:	lsrs	r6, r6, #1
    9214:	bne	91f8 <rb_crypt+0x248>
    9218:	ldr	r7, [pc, #2652]	; 9c7c <rb_crypt+0xccc>
    921c:	add	r7, pc, r7
    9220:	add	r6, r7, #948	; 0x3b4
    9224:	mov	r2, #120	; 0x78
    9228:	ldr	r1, [pc, #2640]	; 9c80 <rb_crypt+0xcd0>
    922c:	add	r1, pc, r1
    9230:	mov	r0, r6
    9234:	bl	4654 <rb_strlcpy@plt>
    9238:	mov	r2, r5
    923c:	ldr	r1, [r7, #1092]	; 0x444
    9240:	mov	r0, r6
    9244:	bl	4870 <strncat@plt>
    9248:	mov	r2, #120	; 0x78
    924c:	ldr	r1, [pc, #2608]	; 9c84 <rb_crypt+0xcd4>
    9250:	add	r1, pc, r1
    9254:	mov	r0, r6
    9258:	bl	4b34 <rb_strlcat@plt>
    925c:	add	r1, sp, #48	; 0x30
    9260:	add	r0, sp, #32
    9264:	bl	6df0 <MD5Final>
    9268:	mov	r5, #0
    926c:	movw	fp, #8961	; 0x2301
    9270:	movt	fp, #26437	; 0x6745
    9274:	movw	sl, #43913	; 0xab89
    9278:	movt	sl, #61389	; 0xefcd
    927c:	movw	r9, #56574	; 0xdcfe
    9280:	movt	r9, #39098	; 0x98ba
    9284:	movw	r8, #21622	; 0x5476
    9288:	movt	r8, #4146	; 0x1032
    928c:	movw	r7, #43691	; 0xaaab
    9290:	movt	r7, #43690	; 0xaaaa
    9294:	movw	r3, #18725	; 0x4925
    9298:	movt	r3, #9362	; 0x2492
    929c:	str	r4, [sp]
    92a0:	mov	r4, r3
    92a4:	b	9338 <rb_crypt+0x388>
    92a8:	ldr	r2, [pc, #2520]	; 9c88 <rb_crypt+0xcd8>
    92ac:	add	r2, pc, r2
    92b0:	str	r3, [r2, #1096]	; 0x448
    92b4:	mov	r5, r3
    92b8:	b	908c <rb_crypt+0xdc>
    92bc:	mov	r5, r6
    92c0:	b	908c <rb_crypt+0xdc>
    92c4:	mov	r2, #16
    92c8:	add	r1, sp, #32
    92cc:	add	r0, sp, #136	; 0x88
    92d0:	bl	6cfc <MD5Update>
    92d4:	b	9374 <rb_crypt+0x3c4>
    92d8:	ldr	r2, [sp, #4]
    92dc:	ldr	r3, [pc, #2472]	; 9c8c <rb_crypt+0xcdc>
    92e0:	add	r3, pc, r3
    92e4:	ldr	r1, [r3, #1092]	; 0x444
    92e8:	add	r0, sp, #136	; 0x88
    92ec:	bl	6cfc <MD5Update>
    92f0:	b	9388 <rb_crypt+0x3d8>
    92f4:	ldr	r0, [sp]
    92f8:	bl	4798 <strlen@plt>
    92fc:	mov	r2, r0
    9300:	ldr	r1, [sp]
    9304:	add	r0, sp, #136	; 0x88
    9308:	bl	6cfc <MD5Update>
    930c:	b	93a4 <rb_crypt+0x3f4>
    9310:	mov	r2, #16
    9314:	add	r1, sp, #32
    9318:	add	r0, sp, #136	; 0x88
    931c:	bl	6cfc <MD5Update>
    9320:	add	r1, sp, #136	; 0x88
    9324:	add	r0, sp, #32
    9328:	bl	6df0 <MD5Final>
    932c:	add	r5, r5, #1
    9330:	cmp	r5, #1000	; 0x3e8
    9334:	beq	93cc <rb_crypt+0x41c>
    9338:	mov	r3, #0
    933c:	str	r3, [sp, #156]	; 0x9c
    9340:	str	r3, [sp, #152]	; 0x98
    9344:	str	fp, [sp, #136]	; 0x88
    9348:	str	sl, [sp, #140]	; 0x8c
    934c:	str	r9, [sp, #144]	; 0x90
    9350:	str	r8, [sp, #148]	; 0x94
    9354:	ands	r6, r5, #1
    9358:	beq	92c4 <rb_crypt+0x314>
    935c:	ldr	r0, [sp]
    9360:	bl	4798 <strlen@plt>
    9364:	mov	r2, r0
    9368:	ldr	r1, [sp]
    936c:	add	r0, sp, #136	; 0x88
    9370:	bl	6cfc <MD5Update>
    9374:	umull	r2, r3, r7, r5
    9378:	lsr	r3, r3, #1
    937c:	add	r3, r3, r3, lsl #1
    9380:	cmp	r5, r3
    9384:	bne	92d8 <rb_crypt+0x328>
    9388:	umull	r2, r3, r4, r5
    938c:	sub	r2, r5, r3
    9390:	add	r3, r3, r2, lsr #1
    9394:	lsr	r3, r3, #2
    9398:	rsb	r3, r3, r3, lsl #3
    939c:	cmp	r5, r3
    93a0:	bne	92f4 <rb_crypt+0x344>
    93a4:	cmp	r6, #0
    93a8:	bne	9310 <rb_crypt+0x360>
    93ac:	ldr	r6, [sp]
    93b0:	mov	r0, r6
    93b4:	bl	4798 <strlen@plt>
    93b8:	mov	r2, r0
    93bc:	mov	r1, r6
    93c0:	add	r0, sp, #136	; 0x88
    93c4:	bl	6cfc <MD5Update>
    93c8:	b	9320 <rb_crypt+0x370>
    93cc:	ldr	r6, [pc, #2236]	; 9c90 <rb_crypt+0xce0>
    93d0:	add	r6, pc, r6
    93d4:	add	r4, r6, #948	; 0x3b4
    93d8:	mov	r0, r4
    93dc:	bl	4798 <strlen@plt>
    93e0:	add	r5, r4, r0
    93e4:	ldrb	r1, [sp, #32]
    93e8:	ldrb	r3, [sp, #38]	; 0x26
    93ec:	lsl	r3, r3, #8
    93f0:	orr	r3, r3, r1, lsl #16
    93f4:	ldrb	r1, [sp, #44]	; 0x2c
    93f8:	mov	r2, #4
    93fc:	orr	r1, r3, r1
    9400:	mov	r0, r5
    9404:	bl	58a4 <_crypt_to64>
    9408:	ldrb	r1, [sp, #33]	; 0x21
    940c:	ldrb	r3, [sp, #39]	; 0x27
    9410:	lsl	r3, r3, #8
    9414:	orr	r3, r3, r1, lsl #16
    9418:	ldrb	r1, [sp, #45]	; 0x2d
    941c:	mov	r2, #4
    9420:	orr	r1, r3, r1
    9424:	add	r0, r5, r2
    9428:	bl	58a4 <_crypt_to64>
    942c:	ldrb	r1, [sp, #34]	; 0x22
    9430:	ldrb	r3, [sp, #40]	; 0x28
    9434:	lsl	r3, r3, #8
    9438:	orr	r3, r3, r1, lsl #16
    943c:	ldrb	r1, [sp, #46]	; 0x2e
    9440:	mov	r2, #4
    9444:	orr	r1, r3, r1
    9448:	add	r0, r5, #8
    944c:	bl	58a4 <_crypt_to64>
    9450:	ldrb	r1, [sp, #35]	; 0x23
    9454:	ldrb	r3, [sp, #41]	; 0x29
    9458:	lsl	r3, r3, #8
    945c:	orr	r3, r3, r1, lsl #16
    9460:	ldrb	r1, [sp, #47]	; 0x2f
    9464:	mov	r2, #4
    9468:	orr	r1, r3, r1
    946c:	add	r0, r5, #12
    9470:	bl	58a4 <_crypt_to64>
    9474:	ldrb	r1, [sp, #36]	; 0x24
    9478:	ldrb	r3, [sp, #42]	; 0x2a
    947c:	lsl	r3, r3, #8
    9480:	orr	r3, r3, r1, lsl #16
    9484:	ldrb	r1, [sp, #37]	; 0x25
    9488:	mov	r2, #4
    948c:	orr	r1, r3, r1
    9490:	add	r0, r5, #16
    9494:	bl	58a4 <_crypt_to64>
    9498:	mov	r2, #2
    949c:	ldrb	r1, [sp, #43]	; 0x2b
    94a0:	add	r0, r5, #20
    94a4:	bl	58a4 <_crypt_to64>
    94a8:	add	r3, r5, #22
    94ac:	str	r3, [r6, #1100]	; 0x44c
    94b0:	mov	r3, #0
    94b4:	strb	r3, [r5, #22]
    94b8:	mov	r0, r4
    94bc:	b	9c38 <rb_crypt+0xc88>
    94c0:	mov	r0, r5
    94c4:	bl	4798 <strlen@plt>
    94c8:	add	r6, r0, #66	; 0x42
    94cc:	mov	r0, r6
    94d0:	bl	4954 <malloc@plt>
    94d4:	cmp	r0, #0
    94d8:	beq	9c38 <rb_crypt+0xc88>
    94dc:	mov	r3, r6
    94e0:	mov	r2, r0
    94e4:	mov	r1, r5
    94e8:	mov	r0, r4
    94ec:	bl	7560 <rb_sha256_crypt_r>
    94f0:	b	9c38 <rb_crypt+0xc88>
    94f4:	mov	r0, r5
    94f8:	bl	4798 <strlen@plt>
    94fc:	add	r6, r0, #109	; 0x6d
    9500:	ldr	r3, [pc, #1932]	; 9c94 <rb_crypt+0xce4>
    9504:	add	r3, pc, r3
    9508:	ldr	r3, [r3, #1104]	; 0x450
    950c:	cmp	r6, r3
    9510:	ble	9540 <rb_crypt+0x590>
    9514:	mov	r1, r6
    9518:	ldr	r3, [pc, #1912]	; 9c98 <rb_crypt+0xce8>
    951c:	add	r3, pc, r3
    9520:	ldr	r0, [r3, #1108]	; 0x454
    9524:	bl	4be8 <realloc@plt>
    9528:	cmp	r0, #0
    952c:	beq	9c38 <rb_crypt+0xc88>
    9530:	ldr	r3, [pc, #1892]	; 9c9c <rb_crypt+0xcec>
    9534:	add	r3, pc, r3
    9538:	str	r0, [r3, #1108]	; 0x454
    953c:	str	r6, [r3, #1104]	; 0x450
    9540:	ldr	r2, [pc, #1880]	; 9ca0 <rb_crypt+0xcf0>
    9544:	add	r2, pc, r2
    9548:	ldr	r3, [r2, #1104]	; 0x450
    954c:	ldr	r2, [r2, #1108]	; 0x454
    9550:	mov	r1, r5
    9554:	mov	r0, r4
    9558:	bl	8064 <rb_sha512_crypt_r>
    955c:	b	9c38 <rb_crypt+0xc88>
    9560:	bl	5090 <rb_des_init>
    9564:	add	r2, sp, #136	; 0x88
    9568:	mov	r1, r2
    956c:	ldrb	r3, [r4]
    9570:	lsl	r3, r3, #1
    9574:	uxtb	r3, r3
    9578:	strb	r3, [r2], #1
    957c:	cmp	r3, #0
    9580:	addne	r4, r4, #1
    9584:	sub	r3, r2, r1
    9588:	cmp	r3, #8
    958c:	bne	956c <rb_crypt+0x5bc>
    9590:	bl	5090 <rb_des_init>
    9594:	ldr	r3, [sp, #136]	; 0x88
    9598:	rev	r3, r3
    959c:	ldr	r2, [sp, #140]	; 0x8c
    95a0:	rev	r2, r2
    95a4:	orrs	r1, r3, r2
    95a8:	beq	95c0 <rb_crypt+0x610>
    95ac:	ldr	r1, [pc, #1776]	; 9ca4 <rb_crypt+0xcf4>
    95b0:	add	r1, pc, r1
    95b4:	ldr	r1, [r1, #8]
    95b8:	cmp	r3, r1
    95bc:	beq	997c <rb_crypt+0x9cc>
    95c0:	ldr	r0, [pc, #1760]	; 9ca8 <rb_crypt+0xcf8>
    95c4:	add	r0, pc, r0
    95c8:	str	r3, [r0, #8]
    95cc:	str	r2, [r0, #4]
    95d0:	lsr	r9, r3, #25
    95d4:	ubfx	r7, r3, #17, #7
    95d8:	ubfx	r6, r3, #9, #7
    95dc:	ubfx	r3, r3, #1, #7
    95e0:	lsr	r8, r2, #25
    95e4:	ubfx	r4, r2, #17, #7
    95e8:	ubfx	lr, r2, #9, #7
    95ec:	ubfx	r2, r2, #1, #7
    95f0:	ldr	ip, [pc, #1716]	; 9cac <rb_crypt+0xcfc>
    95f4:	add	ip, pc, ip
    95f8:	add	r8, r8, #512	; 0x200
    95fc:	ldr	r1, [ip, r9, lsl #2]
    9600:	ldr	sl, [ip, r8, lsl #2]
    9604:	orr	r1, r1, sl
    9608:	add	r7, r7, #128	; 0x80
    960c:	ldr	sl, [ip, r7, lsl #2]
    9610:	orr	r1, r1, sl
    9614:	add	r6, r6, #256	; 0x100
    9618:	ldr	sl, [ip, r6, lsl #2]
    961c:	orr	r1, r1, sl
    9620:	add	r3, r3, #384	; 0x180
    9624:	ldr	sl, [ip, r3, lsl #2]
    9628:	orr	r1, r1, sl
    962c:	add	r4, r4, #640	; 0x280
    9630:	ldr	sl, [ip, r4, lsl #2]
    9634:	orr	r1, r1, sl
    9638:	add	lr, lr, #768	; 0x300
    963c:	ldr	sl, [ip, lr, lsl #2]
    9640:	orr	r1, r1, sl
    9644:	add	r2, r2, #896	; 0x380
    9648:	ldr	ip, [ip, r2, lsl #2]
    964c:	orr	r1, r1, ip
    9650:	str	r1, [sp, #16]
    9654:	ldr	ip, [pc, #1620]	; 9cb0 <rb_crypt+0xd00>
    9658:	add	ip, pc, ip
    965c:	ldr	r1, [ip, r9, lsl #2]
    9660:	ldr	r8, [ip, r8, lsl #2]
    9664:	orr	r1, r1, r8
    9668:	ldr	r7, [ip, r7, lsl #2]
    966c:	orr	r1, r1, r7
    9670:	ldr	r6, [ip, r6, lsl #2]
    9674:	orr	r1, r1, r6
    9678:	ldr	r3, [ip, r3, lsl #2]
    967c:	orr	r3, r1, r3
    9680:	ldr	r1, [ip, r4, lsl #2]
    9684:	orr	r3, r3, r1
    9688:	ldr	r1, [ip, lr, lsl #2]
    968c:	orr	r3, r3, r1
    9690:	ldr	r2, [ip, r2, lsl #2]
    9694:	orr	r3, r3, r2
    9698:	str	r3, [sp, #20]
    969c:	ldr	r3, [pc, #1552]	; 9cb4 <rb_crypt+0xd04>
    96a0:	add	r3, pc, r3
    96a4:	add	r3, r3, #2032	; 0x7f0
    96a8:	sub	sl, r3, #1
    96ac:	add	r2, r0, #880	; 0x370
    96b0:	str	r2, [sp, #4]
    96b4:	add	r2, r0, #1168	; 0x490
    96b8:	add	r2, r2, #8
    96bc:	str	r2, [sp, #8]
    96c0:	add	r2, r0, #816	; 0x330
    96c4:	str	r2, [sp]
    96c8:	add	fp, r0, #1232	; 0x4d0
    96cc:	add	fp, fp, #8
    96d0:	add	r3, r3, #15
    96d4:	str	r3, [sp, #24]
    96d8:	mov	lr, #0
    96dc:	ldr	ip, [pc, #1492]	; 9cb8 <rb_crypt+0xd08>
    96e0:	add	ip, pc, ip
    96e4:	ldr	r0, [pc, #1488]	; 9cbc <rb_crypt+0xd0c>
    96e8:	add	r0, pc, r0
    96ec:	str	fp, [sp, #12]
    96f0:	str	r5, [sp, #28]
    96f4:	ldrb	r3, [sl, #1]!
    96f8:	add	lr, lr, r3
    96fc:	rsb	r2, lr, #28
    9700:	ldr	r3, [sp, #16]
    9704:	lsr	r1, r3, r2
    9708:	orr	r1, r1, r3, lsl lr
    970c:	ldr	r3, [sp, #20]
    9710:	lsr	r2, r3, r2
    9714:	orr	r2, r2, r3, lsl lr
    9718:	ubfx	r8, r1, #21, #7
    971c:	ubfx	r7, r1, #14, #7
    9720:	ubfx	r6, r1, #7, #7
    9724:	and	r1, r1, #127	; 0x7f
    9728:	ubfx	r5, r2, #21, #7
    972c:	ubfx	r9, r2, #14, #7
    9730:	ubfx	r4, r2, #7, #7
    9734:	and	r2, r2, #127	; 0x7f
    9738:	add	r1, r1, #384	; 0x180
    973c:	add	r2, r2, #896	; 0x380
    9740:	ldr	r3, [ip, r2, lsl #2]
    9744:	ldr	fp, [ip, r1, lsl #2]
    9748:	orr	r3, fp, r3
    974c:	ldr	fp, [ip, r8, lsl #2]
    9750:	orr	r3, r3, fp
    9754:	add	r7, r7, #128	; 0x80
    9758:	ldr	fp, [ip, r7, lsl #2]
    975c:	orr	r3, r3, fp
    9760:	add	r6, r6, #256	; 0x100
    9764:	ldr	fp, [ip, r6, lsl #2]
    9768:	orr	r3, r3, fp
    976c:	add	r5, r5, #512	; 0x200
    9770:	ldr	fp, [ip, r5, lsl #2]
    9774:	orr	r3, r3, fp
    9778:	add	r9, r9, #640	; 0x280
    977c:	ldr	fp, [ip, r9, lsl #2]
    9780:	orr	r3, r3, fp
    9784:	add	r4, r4, #768	; 0x300
    9788:	ldr	fp, [ip, r4, lsl #2]
    978c:	orr	r3, r3, fp
    9790:	ldr	fp, [sp, #4]
    9794:	str	r3, [fp, #4]!
    9798:	str	fp, [sp, #4]
    979c:	ldr	fp, [sp, #8]
    97a0:	str	r3, [fp, #-4]!
    97a4:	str	fp, [sp, #8]
    97a8:	ldr	r3, [r0, r1, lsl #2]
    97ac:	ldr	r2, [r0, r2, lsl #2]
    97b0:	orr	r3, r3, r2
    97b4:	ldr	r2, [r0, r8, lsl #2]
    97b8:	orr	r3, r3, r2
    97bc:	ldr	r2, [r0, r7, lsl #2]
    97c0:	orr	r3, r3, r2
    97c4:	ldr	r2, [r0, r6, lsl #2]
    97c8:	orr	r3, r3, r2
    97cc:	ldr	r2, [r0, r5, lsl #2]
    97d0:	orr	r3, r3, r2
    97d4:	ldr	r2, [r0, r9, lsl #2]
    97d8:	orr	r2, r3, r2
    97dc:	ldr	r3, [r0, r4, lsl #2]
    97e0:	orr	r2, r2, r3
    97e4:	ldr	r3, [sp]
    97e8:	str	r2, [r3, #4]!
    97ec:	str	r3, [sp]
    97f0:	ldr	r3, [sp, #12]
    97f4:	str	r2, [r3, #-4]!
    97f8:	str	r3, [sp, #12]
    97fc:	ldr	r3, [sp, #24]
    9800:	cmp	sl, r3
    9804:	bne	96f4 <rb_crypt+0x744>
    9808:	ldr	r5, [sp, #28]
    980c:	ldrb	r4, [r5, #1]
    9810:	mov	r0, r4
    9814:	bl	5030 <rb_ascii_to_bin>
    9818:	mov	r6, r0
    981c:	ldrb	r5, [r5]
    9820:	mov	r0, r5
    9824:	bl	5030 <rb_ascii_to_bin>
    9828:	orr	r0, r0, r6, lsl #6
    982c:	ldr	r3, [pc, #1164]	; 9cc0 <rb_crypt+0xd10>
    9830:	add	r3, pc, r3
    9834:	strb	r5, [r3, #1068]	; 0x42c
    9838:	cmp	r4, #0
    983c:	moveq	r4, r5
    9840:	ldr	r3, [pc, #1148]	; 9cc4 <rb_crypt+0xd14>
    9844:	add	r3, pc, r3
    9848:	strb	r4, [r3, #1069]	; 0x42d
    984c:	ldr	r3, [r3, #16]
    9850:	cmp	r0, r3
    9854:	beq	98b4 <rb_crypt+0x904>
    9858:	mov	r4, r0
    985c:	ldr	r2, [pc, #1124]	; 9cc8 <rb_crypt+0xd18>
    9860:	add	r2, pc, r2
    9864:	str	r0, [r2, #16]
    9868:	mov	r3, #0
    986c:	str	r3, [r2, #12]
    9870:	mov	r0, #24
    9874:	mov	ip, r3
    9878:	mov	r1, #8388608	; 0x800000
    987c:	mov	r2, #1
    9880:	mov	lr, r2
    9884:	tst	r2, r4
    9888:	orrne	r3, r3, r1
    988c:	movne	ip, lr
    9890:	lsl	r2, r2, #1
    9894:	lsr	r1, r1, #1
    9898:	subs	r0, r0, #1
    989c:	bne	9884 <rb_crypt+0x8d4>
    98a0:	cmp	ip, #0
    98a4:	beq	98b4 <rb_crypt+0x904>
    98a8:	ldr	r2, [pc, #1052]	; 9ccc <rb_crypt+0xd1c>
    98ac:	add	r2, pc, r2
    98b0:	str	r3, [r2, #12]
    98b4:	ldr	r3, [pc, #1044]	; 9cd0 <rb_crypt+0xd20>
    98b8:	add	r3, pc, r3
    98bc:	ldr	r0, [r3]
    98c0:	ldr	r2, [r3, #1024]	; 0x400
    98c4:	orr	r0, r0, r2
    98c8:	ldr	r2, [r3, #2048]	; 0x800
    98cc:	orr	r0, r0, r2
    98d0:	ldr	r2, [r3, #3072]	; 0xc00
    98d4:	orr	r0, r0, r2
    98d8:	add	r3, r3, #4096	; 0x1000
    98dc:	ldr	r2, [r3]
    98e0:	orr	r0, r0, r2
    98e4:	ldr	r2, [r3, #1024]	; 0x400
    98e8:	orr	r0, r0, r2
    98ec:	ldr	r2, [r3, #2048]	; 0x800
    98f0:	orr	r0, r0, r2
    98f4:	ldr	r3, [r3, #3072]	; 0xc00
    98f8:	orr	r0, r0, r3
    98fc:	ldr	r3, [pc, #976]	; 9cd4 <rb_crypt+0xd24>
    9900:	add	r3, pc, r3
    9904:	ldr	r2, [r3]
    9908:	ldr	r1, [r3, #1024]	; 0x400
    990c:	orr	r2, r2, r1
    9910:	ldr	r1, [r3, #2048]	; 0x800
    9914:	orr	r2, r2, r1
    9918:	ldr	r1, [r3, #3072]	; 0xc00
    991c:	orr	r2, r2, r1
    9920:	add	r3, r3, #4096	; 0x1000
    9924:	ldr	r1, [r3]
    9928:	orr	r2, r2, r1
    992c:	ldr	r1, [r3, #1024]	; 0x400
    9930:	orr	r2, r2, r1
    9934:	ldr	r1, [r3, #2048]	; 0x800
    9938:	orr	r2, r2, r1
    993c:	ldr	r3, [r3, #3072]	; 0xc00
    9940:	orr	r2, r2, r3
    9944:	ldr	r3, [pc, #908]	; 9cd8 <rb_crypt+0xd28>
    9948:	add	r3, pc, r3
    994c:	ldr	r9, [r3, #12]
    9950:	mov	r5, #25
    9954:	ldr	r7, [pc, #896]	; 9cdc <rb_crypt+0xd2c>
    9958:	add	r7, pc, r7
    995c:	ldr	lr, [pc, #892]	; 9ce0 <rb_crypt+0xd30>
    9960:	add	lr, pc, lr
    9964:	ldr	ip, [pc, #888]	; 9ce4 <rb_crypt+0xd34>
    9968:	add	ip, pc, ip
    996c:	ldr	r8, [pc, #884]	; 9ce8 <rb_crypt+0xd38>
    9970:	add	r8, pc, r8
    9974:	add	r8, r8, #948	; 0x3b4
    9978:	b	9a90 <rb_crypt+0xae0>
    997c:	ldr	r1, [pc, #872]	; 9cec <rb_crypt+0xd3c>
    9980:	add	r1, pc, r1
    9984:	ldr	r1, [r1, #4]
    9988:	cmp	r2, r1
    998c:	bne	95c0 <rb_crypt+0x610>
    9990:	b	980c <rb_crypt+0x85c>
    9994:	mov	r2, r3
    9998:	lsl	r3, r2, #23
    999c:	and	r3, r3, #8388608	; 0x800000
    99a0:	lsr	r1, r2, #9
    99a4:	and	r1, r1, #8126464	; 0x7c0000
    99a8:	orr	r3, r3, r1
    99ac:	lsr	r1, r2, #11
    99b0:	and	r1, r1, #258048	; 0x3f000
    99b4:	orr	r3, r3, r1
    99b8:	lsr	r1, r2, #13
    99bc:	and	r1, r1, #4032	; 0xfc0
    99c0:	orr	r3, r3, r1
    99c4:	ubfx	r1, r2, #15, #6
    99c8:	orr	r3, r3, r1
    99cc:	lsl	r1, r2, #7
    99d0:	and	r1, r1, #16515072	; 0xfc0000
    99d4:	lsl	sl, r2, #5
    99d8:	and	sl, sl, #258048	; 0x3f000
    99dc:	orr	r1, r1, sl
    99e0:	orr	r1, r1, r2, lsr #31
    99e4:	lsl	sl, r2, #3
    99e8:	and	sl, sl, #4032	; 0xfc0
    99ec:	orr	r1, r1, sl
    99f0:	lsl	sl, r2, #1
    99f4:	and	sl, sl, #62	; 0x3e
    99f8:	orr	r1, r1, sl
    99fc:	eor	sl, r3, r1
    9a00:	and	sl, sl, r9
    9a04:	ldr	fp, [r4], #4
    9a08:	eor	r3, r3, fp
    9a0c:	eor	r3, r3, sl
    9a10:	ldr	fp, [r6], #4
    9a14:	eor	r1, r1, fp
    9a18:	eor	r1, r1, sl
    9a1c:	ldrb	sl, [ip, r3, lsr #12]
    9a20:	ubfx	r3, r3, #0, #12
    9a24:	add	r3, ip, r3
    9a28:	add	r3, r3, #4096	; 0x1000
    9a2c:	ldrb	fp, [r3]
    9a30:	add	fp, fp, #256	; 0x100
    9a34:	ldr	sl, [lr, sl, lsl #2]
    9a38:	ldr	r3, [lr, fp, lsl #2]
    9a3c:	orr	r3, sl, r3
    9a40:	add	sl, ip, r1, lsr #12
    9a44:	add	sl, sl, #8192	; 0x2000
    9a48:	ldrb	sl, [sl]
    9a4c:	add	sl, sl, #512	; 0x200
    9a50:	ldr	sl, [lr, sl, lsl #2]
    9a54:	orr	r3, r3, sl
    9a58:	ubfx	r1, r1, #0, #12
    9a5c:	add	r1, ip, r1
    9a60:	add	r1, r1, #12288	; 0x3000
    9a64:	ldrb	r1, [r1]
    9a68:	add	r1, r1, #768	; 0x300
    9a6c:	ldr	r1, [lr, r1, lsl #2]
    9a70:	orr	r3, r3, r1
    9a74:	eor	r3, r3, r0
    9a78:	mov	r0, r2
    9a7c:	cmp	r4, r8
    9a80:	bne	9994 <rb_crypt+0x9e4>
    9a84:	mov	r0, r3
    9a88:	subs	r5, r5, #1
    9a8c:	beq	9a9c <rb_crypt+0xaec>
    9a90:	add	r6, r7, #820	; 0x334
    9a94:	add	r4, r7, #884	; 0x374
    9a98:	b	9998 <rb_crypt+0x9e8>
    9a9c:	lsr	r7, r3, #24
    9aa0:	ubfx	r6, r3, #16, #8
    9aa4:	ubfx	r5, r3, #8, #8
    9aa8:	uxtb	r3, r3
    9aac:	lsr	r8, r2, #24
    9ab0:	ubfx	r4, r2, #16, #8
    9ab4:	ubfx	lr, r2, #8, #8
    9ab8:	uxtb	r2, r2
    9abc:	ldr	r0, [pc, #556]	; 9cf0 <rb_crypt+0xd40>
    9ac0:	add	r0, pc, r0
    9ac4:	add	r1, r3, #768	; 0x300
    9ac8:	ldr	ip, [r0, r7, lsl #2]
    9acc:	ldr	r3, [r0, r1, lsl #2]
    9ad0:	orr	ip, ip, r3
    9ad4:	add	r8, r8, #1024	; 0x400
    9ad8:	ldr	r3, [r0, r8, lsl #2]
    9adc:	orr	ip, ip, r3
    9ae0:	add	r2, r2, #1792	; 0x700
    9ae4:	ldr	r3, [r0, r2, lsl #2]
    9ae8:	orr	ip, ip, r3
    9aec:	add	r6, r6, #256	; 0x100
    9af0:	ldr	r3, [r0, r6, lsl #2]
    9af4:	orr	ip, ip, r3
    9af8:	add	r5, r5, #512	; 0x200
    9afc:	ldr	r3, [r0, r5, lsl #2]
    9b00:	orr	ip, ip, r3
    9b04:	add	r4, r4, #1280	; 0x500
    9b08:	ldr	r3, [r0, r4, lsl #2]
    9b0c:	orr	ip, ip, r3
    9b10:	add	lr, lr, #1536	; 0x600
    9b14:	ldr	r3, [r0, lr, lsl #2]
    9b18:	orr	ip, ip, r3
    9b1c:	ldr	r0, [pc, #464]	; 9cf4 <rb_crypt+0xd44>
    9b20:	add	r0, pc, r0
    9b24:	ldr	r3, [r0, r7, lsl #2]
    9b28:	ldr	r1, [r0, r1, lsl #2]
    9b2c:	orr	r3, r3, r1
    9b30:	ldr	r1, [r0, r8, lsl #2]
    9b34:	orr	r3, r3, r1
    9b38:	ldr	r2, [r0, r2, lsl #2]
    9b3c:	orr	r3, r3, r2
    9b40:	ldr	r2, [r0, r6, lsl #2]
    9b44:	orr	r3, r3, r2
    9b48:	ldr	r2, [r0, r5, lsl #2]
    9b4c:	orr	r3, r3, r2
    9b50:	ldr	r2, [r0, r4, lsl #2]
    9b54:	orr	r3, r3, r2
    9b58:	ldr	r2, [r0, lr, lsl #2]
    9b5c:	orr	r3, r3, r2
    9b60:	ldr	r0, [pc, #400]	; 9cf8 <rb_crypt+0xd48>
    9b64:	add	r0, pc, r0
    9b68:	ldr	r1, [pc, #396]	; 9cfc <rb_crypt+0xd4c>
    9b6c:	add	r1, pc, r1
    9b70:	add	r2, r1, ip, lsr #26
    9b74:	ldrb	lr, [r2, #848]	; 0x350
    9b78:	strb	lr, [r0, #1070]	; 0x42e
    9b7c:	ubfx	r2, ip, #20, #6
    9b80:	add	r2, r1, r2
    9b84:	ldrb	r2, [r2, #848]	; 0x350
    9b88:	strb	r2, [r0, #1071]	; 0x42f
    9b8c:	ubfx	r2, ip, #14, #6
    9b90:	add	r2, r1, r2
    9b94:	ldrb	r2, [r2, #848]	; 0x350
    9b98:	strb	r2, [r0, #1072]	; 0x430
    9b9c:	ubfx	r2, ip, #8, #6
    9ba0:	add	r2, r1, r2
    9ba4:	ldrb	r2, [r2, #848]	; 0x350
    9ba8:	strb	r2, [r0, #1073]	; 0x431
    9bac:	lsr	r2, r3, #16
    9bb0:	orr	ip, r2, ip, lsl #16
    9bb4:	ubfx	r2, ip, #18, #6
    9bb8:	add	r2, r1, r2
    9bbc:	ldrb	r2, [r2, #848]	; 0x350
    9bc0:	strb	r2, [r0, #1074]	; 0x432
    9bc4:	ubfx	r2, ip, #12, #6
    9bc8:	add	r2, r1, r2
    9bcc:	ldrb	r2, [r2, #848]	; 0x350
    9bd0:	strb	r2, [r0, #1075]	; 0x433
    9bd4:	ubfx	r2, ip, #6, #6
    9bd8:	add	r2, r1, r2
    9bdc:	ldrb	r2, [r2, #848]	; 0x350
    9be0:	strb	r2, [r0, #1076]	; 0x434
    9be4:	and	ip, ip, #63	; 0x3f
    9be8:	add	ip, r1, ip
    9bec:	ldrb	r2, [ip, #848]	; 0x350
    9bf0:	strb	r2, [r0, #1077]	; 0x435
    9bf4:	lsl	r2, r3, #2
    9bf8:	ubfx	r3, r2, #12, #6
    9bfc:	add	r3, r1, r3
    9c00:	ldrb	r3, [r3, #848]	; 0x350
    9c04:	strb	r3, [r0, #1078]	; 0x436
    9c08:	ubfx	r3, r2, #6, #6
    9c0c:	add	r3, r1, r3
    9c10:	ldrb	r3, [r3, #848]	; 0x350
    9c14:	strb	r3, [r0, #1079]	; 0x437
    9c18:	and	r2, r2, #63	; 0x3f
    9c1c:	add	r3, r1, r2
    9c20:	ldrb	r3, [r3, #848]	; 0x350
    9c24:	strb	r3, [r0, #1080]	; 0x438
    9c28:	mov	r3, #0
    9c2c:	strb	r3, [r0, #1081]	; 0x439
    9c30:	add	r0, r0, #1056	; 0x420
    9c34:	add	r0, r0, #12
    9c38:	add	sp, sp, #228	; 0xe4
    9c3c:	ldrd	r4, [sp]
    9c40:	ldrd	r6, [sp, #8]
    9c44:	ldrd	r8, [sp, #16]
    9c48:	ldrd	sl, [sp, #24]
    9c4c:	add	sp, sp, #32
    9c50:	pop	{pc}		; (ldr pc, [sp], #4)
    9c54:	ldr	r3, [pc, #164]	; 9d00 <rb_crypt+0xd50>
    9c58:	add	r3, pc, r3
    9c5c:	str	r5, [r3, #1096]	; 0x448
    9c60:	mov	r6, r5
    9c64:	b	908c <rb_crypt+0xdc>
    9c68:	.word	0x000214ac
    9c6c:	.word	0x0000da9c
    9c70:	.word	0x00021480
    9c74:	.word	0x00021440
    9c78:	.word	0x0000d9d0
    9c7c:	.word	0x000212a8
    9c80:	.word	0x0000d898
    9c84:	.word	0x0000d868
    9c88:	.word	0x00021218
    9c8c:	.word	0x000211e4
    9c90:	.word	0x000210f4
    9c94:	.word	0x00020fc0
    9c98:	.word	0x00020fa8
    9c9c:	.word	0x00020f90
    9ca0:	.word	0x00020f80
    9ca4:	.word	0x00020f14
    9ca8:	.word	0x00020f00
    9cac:	.word	0x000293a8
    9cb0:	.word	0x00028344
    9cb4:	.word	0x0000cc18
    9cb8:	.word	0x000272bc
    9cbc:	.word	0x000262b4
    9cc0:	.word	0x00020c94
    9cc4:	.word	0x00020c80
    9cc8:	.word	0x00020c64
    9ccc:	.word	0x00020c18
    9cd0:	.word	0x000300e4
    9cd4:	.word	0x0002e09c
    9cd8:	.word	0x00020b7c
    9cdc:	.word	0x00020b6c
    9ce0:	.word	0x0002103c
    9ce4:	.word	0x00022034
    9ce8:	.word	0x00020b54
    9cec:	.word	0x00020b44
    9cf0:	.word	0x0002bedc
    9cf4:	.word	0x00029e7c
    9cf8:	.word	0x00020960
    9cfc:	.word	0x0000c74c
    9d00:	.word	0x0002086c

00009d04 <rb_init_bh>:
    9d04:	str	r4, [sp, #-8]!
    9d08:	str	lr, [sp, #4]
    9d0c:	mov	r1, #12
    9d10:	mov	r0, #1
    9d14:	bl	45a0 <calloc@plt>
    9d18:	cmp	r0, #0
    9d1c:	beq	9d38 <rb_init_bh+0x34>
    9d20:	ldr	r3, [pc, #20]	; 9d3c <rb_init_bh+0x38>
    9d24:	add	r3, pc, r3
    9d28:	str	r0, [r3]
    9d2c:	ldr	r4, [sp]
    9d30:	add	sp, sp, #4
    9d34:	pop	{pc}		; (ldr pc, [sp], #4)
    9d38:	bl	4930 <rb_outofmemory@plt>
    9d3c:	.word	0x00031c78

00009d40 <rb_bh_create>:
    9d40:	strd	r4, [sp, #-24]!	; 0xffffffe8
    9d44:	strd	r6, [sp, #8]
    9d48:	str	r8, [sp, #16]
    9d4c:	str	lr, [sp, #20]
    9d50:	mov	r5, r0
    9d54:	subs	r7, r1, #0
    9d58:	movle	r3, #1
    9d5c:	movgt	r3, #0
    9d60:	cmp	r0, #0
    9d64:	movne	r0, r3
    9d68:	moveq	r0, #1
    9d6c:	cmp	r0, #0
    9d70:	bne	9e20 <rb_bh_create+0xe0>
    9d74:	mov	r6, r2
    9d78:	cmp	r5, #11
    9d7c:	bls	9e44 <rb_bh_create+0x104>
    9d80:	mov	r1, #48	; 0x30
    9d84:	mov	r0, #1
    9d88:	bl	45a0 <calloc@plt>
    9d8c:	subs	r4, r0, #0
    9d90:	beq	9e68 <rb_bh_create+0x128>
    9d94:	str	r5, [r4, #12]
    9d98:	str	r7, [r4, #16]
    9d9c:	cmp	r6, #0
    9da0:	beq	9dcc <rb_bh_create+0x8c>
    9da4:	mov	r0, r6
    9da8:	bl	4798 <strlen@plt>
    9dac:	add	r0, r0, #1
    9db0:	bl	4954 <malloc@plt>
    9db4:	subs	r5, r0, #0
    9db8:	beq	9e6c <rb_bh_create+0x12c>
    9dbc:	mov	r1, r6
    9dc0:	mov	r0, r5
    9dc4:	bl	4840 <strcpy@plt>
    9dc8:	str	r5, [r4, #44]	; 0x2c
    9dcc:	ldr	r3, [pc, #172]	; 9e80 <rb_bh_create+0x140>
    9dd0:	add	r3, pc, r3
    9dd4:	ldr	r3, [r3]
    9dd8:	str	r4, [r4]
    9ddc:	mov	r2, #0
    9de0:	str	r2, [r4, #4]
    9de4:	ldr	r2, [r3]
    9de8:	str	r2, [r4, #8]
    9dec:	cmp	r2, #0
    9df0:	strne	r4, [r2, #4]
    9df4:	beq	9e70 <rb_bh_create+0x130>
    9df8:	str	r4, [r3]
    9dfc:	ldr	r2, [r3, #8]
    9e00:	add	r2, r2, #1
    9e04:	str	r2, [r3, #8]
    9e08:	mov	r0, r4
    9e0c:	ldrd	r4, [sp]
    9e10:	ldrd	r6, [sp, #8]
    9e14:	ldr	r8, [sp, #16]
    9e18:	add	sp, sp, #20
    9e1c:	pop	{pc}		; (ldr pc, [sp], #4)
    9e20:	mov	r3, #147	; 0x93
    9e24:	ldr	r2, [pc, #88]	; 9e84 <rb_bh_create+0x144>
    9e28:	add	r2, pc, r2
    9e2c:	ldr	r1, [pc, #84]	; 9e88 <rb_bh_create+0x148>
    9e30:	add	r1, pc, r1
    9e34:	ldr	r0, [pc, #80]	; 9e8c <rb_bh_create+0x14c>
    9e38:	add	r0, pc, r0
    9e3c:	bl	48c4 <rb_lib_log@plt>
    9e40:	bl	4378 <abort@plt>
    9e44:	mov	r3, #151	; 0x97
    9e48:	ldr	r2, [pc, #64]	; 9e90 <rb_bh_create+0x150>
    9e4c:	add	r2, pc, r2
    9e50:	ldr	r1, [pc, #60]	; 9e94 <rb_bh_create+0x154>
    9e54:	add	r1, pc, r1
    9e58:	ldr	r0, [pc, #56]	; 9e98 <rb_bh_create+0x158>
    9e5c:	add	r0, pc, r0
    9e60:	bl	48c4 <rb_lib_log@plt>
    9e64:	bl	4378 <abort@plt>
    9e68:	bl	4930 <rb_outofmemory@plt>
    9e6c:	bl	4930 <rb_outofmemory@plt>
    9e70:	ldr	r2, [r3, #4]
    9e74:	cmp	r2, #0
    9e78:	streq	r4, [r3, #4]
    9e7c:	b	9df8 <rb_bh_create+0xb8>
    9e80:	.word	0x00031bcc
    9e84:	.word	0x0000cca0
    9e88:	.word	0x0000cca4
    9e8c:	.word	0x0000ccc8
    9e90:	.word	0x0000cc7c
    9e94:	.word	0x0000ccd4
    9e98:	.word	0x0000cca4

00009e9c <rb_bh_alloc>:
    9e9c:	str	r4, [sp, #-8]!
    9ea0:	str	lr, [sp, #4]
    9ea4:	cmp	r0, #0
    9ea8:	beq	9ecc <rb_bh_alloc+0x30>
    9eac:	ldr	r1, [r0, #12]
    9eb0:	mov	r0, #1
    9eb4:	bl	45a0 <calloc@plt>
    9eb8:	cmp	r0, #0
    9ebc:	beq	9ef0 <rb_bh_alloc+0x54>
    9ec0:	ldr	r4, [sp]
    9ec4:	add	sp, sp, #4
    9ec8:	pop	{pc}		; (ldr pc, [sp], #4)
    9ecc:	mov	r3, #186	; 0xba
    9ed0:	ldr	r2, [pc, #28]	; 9ef4 <rb_bh_alloc+0x58>
    9ed4:	add	r2, pc, r2
    9ed8:	ldr	r1, [pc, #24]	; 9ef8 <rb_bh_alloc+0x5c>
    9edc:	add	r1, pc, r1
    9ee0:	ldr	r0, [pc, #20]	; 9efc <rb_bh_alloc+0x60>
    9ee4:	add	r0, pc, r0
    9ee8:	bl	48c4 <rb_lib_log@plt>
    9eec:	bl	4378 <abort@plt>
    9ef0:	bl	4930 <rb_outofmemory@plt>
    9ef4:	.word	0x0000cbf4
    9ef8:	.word	0x0000cc88
    9efc:	.word	0x0000cc1c

00009f00 <rb_bh_free>:
    9f00:	str	r4, [sp, #-8]!
    9f04:	str	lr, [sp, #4]
    9f08:	cmp	r0, #0
    9f0c:	beq	9f30 <rb_bh_free+0x30>
    9f10:	cmp	r1, #0
    9f14:	beq	9f44 <rb_bh_free+0x44>
    9f18:	mov	r0, r1
    9f1c:	bl	46a8 <free@plt>
    9f20:	mov	r0, #0
    9f24:	ldr	r4, [sp]
    9f28:	add	sp, sp, #4
    9f2c:	pop	{pc}		; (ldr pc, [sp], #4)
    9f30:	ldr	r0, [pc, #32]	; 9f58 <rb_bh_free+0x58>
    9f34:	add	r0, pc, r0
    9f38:	bl	48c4 <rb_lib_log@plt>
    9f3c:	mov	r0, #1
    9f40:	b	9f24 <rb_bh_free+0x24>
    9f44:	ldr	r0, [pc, #16]	; 9f5c <rb_bh_free+0x5c>
    9f48:	add	r0, pc, r0
    9f4c:	bl	48c4 <rb_lib_log@plt>
    9f50:	mov	r0, #1
    9f54:	b	9f24 <rb_bh_free+0x24>
    9f58:	.word	0x0000cc50
    9f5c:	.word	0x0000cc5c

00009f60 <rb_bh_destroy>:
    9f60:	str	r4, [sp, #-8]!
    9f64:	str	lr, [sp, #4]
    9f68:	subs	r4, r0, #0
    9f6c:	moveq	r0, #1
    9f70:	beq	9fe4 <rb_bh_destroy+0x84>
    9f74:	ldr	r3, [pc, #116]	; 9ff0 <rb_bh_destroy+0x90>
    9f78:	add	r3, pc, r3
    9f7c:	ldr	r2, [r3]
    9f80:	ldr	r3, [r4, #8]
    9f84:	cmp	r3, #0
    9f88:	ldrne	r1, [r4, #4]
    9f8c:	strne	r1, [r3, #4]
    9f90:	ldreq	r3, [r4, #4]
    9f94:	streq	r3, [r2, #4]
    9f98:	ldr	r3, [r4, #4]
    9f9c:	cmp	r3, #0
    9fa0:	ldrne	r1, [r4, #8]
    9fa4:	strne	r1, [r3, #8]
    9fa8:	ldreq	r3, [r4, #8]
    9fac:	streq	r3, [r2]
    9fb0:	mov	r3, #0
    9fb4:	str	r3, [r4, #4]
    9fb8:	str	r3, [r4, #8]
    9fbc:	ldr	r3, [r2, #8]
    9fc0:	sub	r3, r3, #1
    9fc4:	str	r3, [r2, #8]
    9fc8:	ldr	r0, [r4, #44]	; 0x2c
    9fcc:	cmp	r0, #0
    9fd0:	beq	9fd8 <rb_bh_destroy+0x78>
    9fd4:	bl	46a8 <free@plt>
    9fd8:	mov	r0, r4
    9fdc:	bl	46a8 <free@plt>
    9fe0:	mov	r0, #0
    9fe4:	ldr	r4, [sp]
    9fe8:	add	sp, sp, #4
    9fec:	pop	{pc}		; (ldr pc, [sp], #4)
    9ff0:	.word	0x00031a24

00009ff4 <rb_bh_usage>:
    9ff4:	ldr	r0, [sp]
    9ff8:	cmp	r1, #0
    9ffc:	movne	ip, #0
    a000:	strne	ip, [r1]
    a004:	cmp	r2, #0
    a008:	movne	r1, #0
    a00c:	strne	r1, [r2]
    a010:	cmp	r3, #0
    a014:	movne	r2, #0
    a018:	strne	r2, [r3]
    a01c:	cmp	r0, #0
    a020:	beq	a030 <rb_bh_usage+0x3c>
    a024:	ldr	r3, [pc, #8]	; a034 <rb_bh_usage+0x40>
    a028:	add	r3, pc, r3
    a02c:	str	r3, [r0]
    a030:	bx	lr
    a034:	.word	0x0000cb9c

0000a038 <rb_bh_usage_all>:
    a038:	strd	r4, [sp, #-20]!	; 0xffffffec
    a03c:	strd	r6, [sp, #8]
    a040:	str	lr, [sp, #16]
    a044:	sub	sp, sp, #12
    a048:	subs	r7, r0, #0
    a04c:	beq	a0bc <rb_bh_usage_all+0x84>
    a050:	ldr	r3, [pc, #120]	; a0d0 <rb_bh_usage_all+0x98>
    a054:	add	r3, pc, r3
    a058:	ldr	r3, [r3]
    a05c:	ldr	r4, [r3]
    a060:	cmp	r4, #0
    a064:	beq	a0bc <rb_bh_usage_all+0x84>
    a068:	mov	r6, r1
    a06c:	ldr	r5, [pc, #96]	; a0d4 <rb_bh_usage_all+0x9c>
    a070:	add	r5, pc, r5
    a074:	ldr	ip, [r4]
    a078:	ldr	r1, [ip, #40]	; 0x28
    a07c:	ldr	r2, [ip, #28]
    a080:	ldr	r3, [ip, #16]
    a084:	mul	r3, r3, r2
    a088:	sub	r0, r3, r1
    a08c:	ldr	r2, [ip, #12]
    a090:	ldr	ip, [ip, #44]	; 0x2c
    a094:	cmp	ip, #0
    a098:	movne	r5, ip
    a09c:	str	r6, [sp, #4]
    a0a0:	str	r5, [sp]
    a0a4:	mul	r3, r2, r3
    a0a8:	mul	r2, r0, r2
    a0ac:	blx	r7
    a0b0:	ldr	r4, [r4, #8]
    a0b4:	cmp	r4, #0
    a0b8:	bne	a074 <rb_bh_usage_all+0x3c>
    a0bc:	add	sp, sp, #12
    a0c0:	ldrd	r4, [sp]
    a0c4:	ldrd	r6, [sp, #8]
    a0c8:	add	sp, sp, #16
    a0cc:	pop	{pc}		; (ldr pc, [sp], #4)
    a0d0:	.word	0x00031948
    a0d4:	.word	0x0000cb64

0000a0d8 <rb_bh_total_usage>:
    a0d8:	strd	r4, [sp, #-12]!
    a0dc:	str	lr, [sp, #8]
    a0e0:	ldr	r3, [pc, #112]	; a158 <rb_bh_total_usage+0x80>
    a0e4:	add	r3, pc, r3
    a0e8:	ldr	r3, [r3]
    a0ec:	ldr	ip, [r3]
    a0f0:	cmp	ip, #0
    a0f4:	beq	a14c <rb_bh_total_usage+0x74>
    a0f8:	mov	r4, #0
    a0fc:	mov	r5, r4
    a100:	ldr	r2, [ip]
    a104:	ldr	lr, [r2, #28]
    a108:	ldr	r3, [r2, #16]
    a10c:	mul	r3, r3, lr
    a110:	ldr	lr, [r2, #12]
    a114:	ldr	r2, [r2, #40]	; 0x28
    a118:	sub	r2, r3, r2
    a11c:	mla	r4, lr, r2, r4
    a120:	mla	r5, lr, r3, r5
    a124:	ldr	ip, [ip, #8]
    a128:	cmp	ip, #0
    a12c:	bne	a100 <rb_bh_total_usage+0x28>
    a130:	cmp	r0, #0
    a134:	strne	r5, [r0]
    a138:	cmp	r1, #0
    a13c:	strne	r4, [r1]
    a140:	ldrd	r4, [sp]
    a144:	add	sp, sp, #8
    a148:	pop	{pc}		; (ldr pc, [sp], #4)
    a14c:	mov	r4, #0
    a150:	mov	r5, r4
    a154:	b	a130 <rb_bh_total_usage+0x58>
    a158:	.word	0x000318b8

0000a15c <inetntoa>:
    a15c:	ldrb	r2, [r0]
    a160:	ldr	r3, [pc, #228]	; a24c <inetntoa+0xf0>
    a164:	add	r3, pc, r3
    a168:	ldr	r1, [r3, r2, lsl #2]
    a16c:	ldrb	r2, [r1]
    a170:	cmp	r2, #0
    a174:	beq	a240 <inetntoa+0xe4>
    a178:	ldr	r3, [pc, #208]	; a250 <inetntoa+0xf4>
    a17c:	add	r3, pc, r3
    a180:	strb	r2, [r3], #1
    a184:	ldrb	r2, [r1, #1]!
    a188:	cmp	r2, #0
    a18c:	bne	a180 <inetntoa+0x24>
    a190:	mov	r2, #46	; 0x2e
    a194:	strb	r2, [r3], #1
    a198:	ldrb	r1, [r0, #1]
    a19c:	ldr	r2, [pc, #176]	; a254 <inetntoa+0xf8>
    a1a0:	add	r2, pc, r2
    a1a4:	ldr	r1, [r2, r1, lsl #2]
    a1a8:	ldrb	r2, [r1]
    a1ac:	cmp	r2, #0
    a1b0:	beq	a1c4 <inetntoa+0x68>
    a1b4:	strb	r2, [r3], #1
    a1b8:	ldrb	r2, [r1, #1]!
    a1bc:	cmp	r2, #0
    a1c0:	bne	a1b4 <inetntoa+0x58>
    a1c4:	mov	r2, #46	; 0x2e
    a1c8:	strb	r2, [r3], #1
    a1cc:	ldrb	r1, [r0, #2]
    a1d0:	ldr	r2, [pc, #128]	; a258 <inetntoa+0xfc>
    a1d4:	add	r2, pc, r2
    a1d8:	ldr	r1, [r2, r1, lsl #2]
    a1dc:	ldrb	r2, [r1]
    a1e0:	cmp	r2, #0
    a1e4:	beq	a1f8 <inetntoa+0x9c>
    a1e8:	strb	r2, [r3], #1
    a1ec:	ldrb	r2, [r1, #1]!
    a1f0:	cmp	r2, #0
    a1f4:	bne	a1e8 <inetntoa+0x8c>
    a1f8:	mov	r2, #46	; 0x2e
    a1fc:	strb	r2, [r3], #1
    a200:	ldrb	r1, [r0, #3]
    a204:	ldr	r2, [pc, #80]	; a25c <inetntoa+0x100>
    a208:	add	r2, pc, r2
    a20c:	ldr	r1, [r2, r1, lsl #2]
    a210:	ldrb	r2, [r1]
    a214:	cmp	r2, #0
    a218:	beq	a22c <inetntoa+0xd0>
    a21c:	strb	r2, [r3], #1
    a220:	ldrb	r2, [r1, #1]!
    a224:	cmp	r2, #0
    a228:	bne	a21c <inetntoa+0xc0>
    a22c:	mov	r2, #0
    a230:	strb	r2, [r3]
    a234:	ldr	r0, [pc, #36]	; a260 <inetntoa+0x104>
    a238:	add	r0, pc, r0
    a23c:	bx	lr
    a240:	ldr	r3, [pc, #28]	; a264 <inetntoa+0x108>
    a244:	add	r3, pc, r3
    a248:	b	a190 <inetntoa+0x34>
    a24c:	.word	0x0001e8d8
    a250:	.word	0x00031824
    a254:	.word	0x0001e89c
    a258:	.word	0x0001e868
    a25c:	.word	0x0001e834
    a260:	.word	0x00031768
    a264:	.word	0x0003175c

0000a268 <inet_pton4>:
    a268:	strd	r4, [sp, #-20]!	; 0xffffffec
    a26c:	strd	r6, [sp, #8]
    a270:	str	lr, [sp, #16]
    a274:	sub	sp, sp, #12
    a278:	mov	r3, #0
    a27c:	strb	r3, [sp, #4]
    a280:	add	ip, sp, #4
    a284:	mov	lr, r3
    a288:	mov	r7, r3
    a28c:	mov	r4, r3
    a290:	mov	r5, r3
    a294:	mov	r6, #1
    a298:	b	a2c8 <inet_pton4+0x60>
    a29c:	cmp	r3, #46	; 0x2e
    a2a0:	movne	r3, #0
    a2a4:	andeq	r3, r7, #1
    a2a8:	eor	r3, r3, #1
    a2ac:	cmp	lr, #4
    a2b0:	orreq	r3, r3, #1
    a2b4:	cmp	r3, #0
    a2b8:	bne	a344 <inet_pton4+0xdc>
    a2bc:	strb	r4, [ip, #1]
    a2c0:	add	ip, ip, #1
    a2c4:	mov	r7, r5
    a2c8:	ldrb	r3, [r0], #1
    a2cc:	mov	r2, r3
    a2d0:	cmp	r3, #0
    a2d4:	beq	a31c <inet_pton4+0xb4>
    a2d8:	sub	r2, r3, #48	; 0x30
    a2dc:	cmp	r2, #9
    a2e0:	bhi	a29c <inet_pton4+0x34>
    a2e4:	ldrb	r2, [ip]
    a2e8:	add	r2, r2, r2, lsl #2
    a2ec:	sub	r3, r3, #48	; 0x30
    a2f0:	add	r3, r3, r2, lsl #1
    a2f4:	cmp	r3, #255	; 0xff
    a2f8:	bhi	a334 <inet_pton4+0xcc>
    a2fc:	strb	r3, [ip]
    a300:	cmp	r7, #0
    a304:	bne	a2c8 <inet_pton4+0x60>
    a308:	add	lr, lr, #1
    a30c:	cmp	lr, #4
    a310:	bgt	a33c <inet_pton4+0xd4>
    a314:	mov	r7, r6
    a318:	b	a2c8 <inet_pton4+0x60>
    a31c:	cmp	lr, #3
    a320:	ble	a348 <inet_pton4+0xe0>
    a324:	ldr	r3, [sp, #4]
    a328:	str	r3, [r1]
    a32c:	mov	r2, #1
    a330:	b	a348 <inet_pton4+0xe0>
    a334:	mov	r2, #0
    a338:	b	a348 <inet_pton4+0xe0>
    a33c:	mov	r2, r7
    a340:	b	a348 <inet_pton4+0xe0>
    a344:	mov	r2, #0
    a348:	mov	r0, r2
    a34c:	add	sp, sp, #12
    a350:	ldrd	r4, [sp]
    a354:	ldrd	r6, [sp, #8]
    a358:	add	sp, sp, #16
    a35c:	pop	{pc}		; (ldr pc, [sp], #4)

0000a360 <rb_unsupported_event>:
    a360:	mov	r0, #0
    a364:	bx	lr

0000a368 <rb_checktimeouts>:
    a368:	ldr	r3, [pc, #256]	; a470 <rb_checktimeouts+0x108>
    a36c:	add	r3, pc, r3
    a370:	ldr	r3, [r3, #16]
    a374:	cmp	r3, #0
    a378:	bxeq	lr
    a37c:	strd	r4, [sp, #-36]!	; 0xffffffdc
    a380:	strd	r6, [sp, #8]
    a384:	strd	r8, [sp, #16]
    a388:	strd	sl, [sp, #24]
    a38c:	str	lr, [sp, #32]
    a390:	sub	sp, sp, #4
    a394:	ldr	r6, [r3, #8]
    a398:	ldr	r7, [pc, #212]	; a474 <rb_checktimeouts+0x10c>
    a39c:	add	r7, pc, r7
    a3a0:	ldr	r9, [pc, #208]	; a478 <rb_checktimeouts+0x110>
    a3a4:	add	r9, pc, r9
    a3a8:	ldr	r8, [pc, #204]	; a47c <rb_checktimeouts+0x114>
    a3ac:	add	r8, pc, r8
    a3b0:	b	a3c4 <rb_checktimeouts+0x5c>
    a3b4:	cmp	r6, #0
    a3b8:	beq	a454 <rb_checktimeouts+0xec>
    a3bc:	mov	r3, r6
    a3c0:	ldr	r6, [r6, #8]
    a3c4:	ldr	r4, [r3]
    a3c8:	ldr	r5, [r4]
    a3cc:	cmp	r5, #0
    a3d0:	beq	a3b4 <rb_checktimeouts+0x4c>
    a3d4:	ldrb	r3, [r5, #16]
    a3d8:	tst	r3, #1
    a3dc:	beq	a3b4 <rb_checktimeouts+0x4c>
    a3e0:	ldr	sl, [r4, #16]
    a3e4:	bl	47a4 <rb_current_time@plt>
    a3e8:	cmp	sl, r0
    a3ec:	bge	a3b4 <rb_checktimeouts+0x4c>
    a3f0:	ldr	sl, [r4, #20]
    a3f4:	ldr	fp, [r4, #24]
    a3f8:	ldr	r3, [r4, #12]
    a3fc:	cmp	r3, #0
    a400:	ldrne	r2, [r4, #8]
    a404:	strne	r2, [r3, #4]
    a408:	ldreq	r3, [r4, #8]
    a40c:	streq	r3, [r8, #20]
    a410:	ldr	r3, [r4, #8]
    a414:	cmp	r3, #0
    a418:	ldrne	r2, [r4, #12]
    a41c:	strne	r2, [r3, #8]
    a420:	ldreq	r3, [r4, #12]
    a424:	streq	r3, [r9, #16]
    a428:	ldr	r3, [r7, #24]
    a42c:	sub	r3, r3, #1
    a430:	str	r3, [r7, #24]
    a434:	mov	r3, #0
    a438:	str	r3, [r5, #44]	; 0x2c
    a43c:	mov	r0, r4
    a440:	bl	46a8 <free@plt>
    a444:	mov	r1, fp
    a448:	mov	r0, r5
    a44c:	blx	sl
    a450:	b	a3b4 <rb_checktimeouts+0x4c>
    a454:	add	sp, sp, #4
    a458:	ldrd	r4, [sp]
    a45c:	ldrd	r6, [sp, #8]
    a460:	ldrd	r8, [sp, #16]
    a464:	ldrd	sl, [sp, #24]
    a468:	add	sp, sp, #32
    a46c:	pop	{pc}		; (ldr pc, [sp], #4)
    a470:	.word	0x00031634
    a474:	.word	0x00031604
    a478:	.word	0x000315fc
    a47c:	.word	0x000315f4

0000a480 <inet_pton6>:
    a480:	strd	r4, [sp, #-36]!	; 0xffffffdc
    a484:	strd	r6, [sp, #8]
    a488:	strd	r8, [sp, #16]
    a48c:	strd	sl, [sp, #24]
    a490:	str	lr, [sp, #32]
    a494:	sub	sp, sp, #44	; 0x2c
    a498:	mov	r4, r0
    a49c:	str	r1, [sp, #8]
    a4a0:	mov	r0, #0
    a4a4:	mov	r1, #0
    a4a8:	strd	r0, [sp, #24]
    a4ac:	add	r3, sp, #24
    a4b0:	strd	r0, [sp, #32]
    a4b4:	str	r3, [sp]
    a4b8:	add	r3, sp, #40	; 0x28
    a4bc:	str	r3, [sp, #4]
    a4c0:	ldrb	r3, [r4]
    a4c4:	cmp	r3, #58	; 0x3a
    a4c8:	beq	a554 <inet_pton6+0xd4>
    a4cc:	bl	47e0 <__ctype_tolower_loc@plt>
    a4d0:	ldr	r8, [r0]
    a4d4:	str	r4, [sp, #16]
    a4d8:	mov	r6, #0
    a4dc:	mov	r7, r6
    a4e0:	str	r6, [sp, #12]
    a4e4:	ldr	r9, [pc, #540]	; a708 <inet_pton6+0x288>
    a4e8:	add	r9, pc, r9
    a4ec:	mov	fp, r6
    a4f0:	str	r6, [sp, #20]
    a4f4:	ldr	sl, [pc, #528]	; a70c <inet_pton6+0x28c>
    a4f8:	add	sl, pc, sl
    a4fc:	ldrb	r3, [r4], #1
    a500:	ldr	r5, [r8, r3, lsl #2]
    a504:	cmp	r5, #0
    a508:	beq	a6b0 <inet_pton6+0x230>
    a50c:	mov	r1, r5
    a510:	mov	r0, r9
    a514:	bl	4564 <strchr@plt>
    a518:	cmp	r0, #0
    a51c:	beq	a574 <inet_pton6+0xf4>
    a520:	sub	r0, r0, sl
    a524:	orr	r6, r0, r6, lsl #4
    a528:	cmp	r6, #65536	; 0x10000
    a52c:	bcc	a56c <inet_pton6+0xec>
    a530:	mov	r7, #0
    a534:	mov	r0, r7
    a538:	add	sp, sp, #44	; 0x2c
    a53c:	ldrd	r4, [sp]
    a540:	ldrd	r6, [sp, #8]
    a544:	ldrd	r8, [sp, #16]
    a548:	ldrd	sl, [sp, #24]
    a54c:	add	sp, sp, #32
    a550:	pop	{pc}		; (ldr pc, [sp], #4)
    a554:	ldrb	r3, [r4, #1]
    a558:	cmp	r3, #58	; 0x3a
    a55c:	movne	r7, #0
    a560:	bne	a534 <inet_pton6+0xb4>
    a564:	add	r4, r4, #1
    a568:	b	a4cc <inet_pton6+0x4c>
    a56c:	mov	r7, #1
    a570:	b	a4fc <inet_pton6+0x7c>
    a574:	cmp	r5, #58	; 0x3a
    a578:	beq	a640 <inet_pton6+0x1c0>
    a57c:	ldrb	r3, [r4]
    a580:	cmp	r5, #46	; 0x2e
    a584:	movne	r5, #0
    a588:	moveq	r5, #1
    a58c:	cmp	r3, #0
    a590:	moveq	r5, #0
    a594:	cmp	r5, #0
    a598:	beq	a4fc <inet_pton6+0x7c>
    a59c:	ldr	r3, [sp]
    a5a0:	add	r4, r3, #4
    a5a4:	ldr	r3, [sp, #4]
    a5a8:	cmp	r4, r3
    a5ac:	movhi	r7, #0
    a5b0:	bhi	a534 <inet_pton6+0xb4>
    a5b4:	ldr	r1, [sp]
    a5b8:	ldr	r0, [sp, #16]
    a5bc:	bl	a268 <inet_pton4>
    a5c0:	cmp	r0, #0
    a5c4:	movle	r7, #0
    a5c8:	ble	a534 <inet_pton6+0xb4>
    a5cc:	ldr	r0, [sp, #12]
    a5d0:	cmp	r0, #0
    a5d4:	beq	a6ec <inet_pton6+0x26c>
    a5d8:	sub	r3, r4, r0
    a5dc:	ldr	r1, [sp, #4]
    a5e0:	cmp	r4, r1
    a5e4:	moveq	r7, #0
    a5e8:	beq	a534 <inet_pton6+0xb4>
    a5ec:	cmp	r3, #0
    a5f0:	ble	a614 <inet_pton6+0x194>
    a5f4:	mov	r2, r4
    a5f8:	mov	r3, r0
    a5fc:	mov	ip, #0
    a600:	ldrb	r0, [r2, #-1]!
    a604:	strb	r0, [r1, #-1]!
    a608:	strb	ip, [r2]
    a60c:	cmp	r2, r3
    a610:	bne	a600 <inet_pton6+0x180>
    a614:	ldr	r2, [sp, #28]
    a618:	ldr	r1, [sp, #24]
    a61c:	ldr	r0, [sp, #8]
    a620:	str	r1, [r0]
    a624:	str	r2, [r0, #4]
    a628:	ldr	r2, [sp, #32]
    a62c:	ldr	r3, [sp, #36]	; 0x24
    a630:	str	r2, [r0, #8]
    a634:	str	r3, [r0, #12]
    a638:	mov	r7, #1
    a63c:	b	a534 <inet_pton6+0xb4>
    a640:	cmp	r7, #0
    a644:	bne	a664 <inet_pton6+0x1e4>
    a648:	ldr	r3, [sp, #12]
    a64c:	cmp	r3, #0
    a650:	bne	a534 <inet_pton6+0xb4>
    a654:	str	r4, [sp, #16]
    a658:	ldr	r3, [sp]
    a65c:	str	r3, [sp, #12]
    a660:	b	a4fc <inet_pton6+0x7c>
    a664:	ldrb	r3, [r4]
    a668:	cmp	r3, #0
    a66c:	beq	a700 <inet_pton6+0x280>
    a670:	ldr	r1, [sp]
    a674:	add	r3, r1, #2
    a678:	ldr	r2, [sp, #4]
    a67c:	cmp	r2, r3
    a680:	bcs	a68c <inet_pton6+0x20c>
    a684:	mov	r7, #0
    a688:	b	a534 <inet_pton6+0xb4>
    a68c:	lsr	r2, r6, #8
    a690:	mov	r3, r1
    a694:	strb	r2, [r3], #2
    a698:	strb	r6, [r1, #1]
    a69c:	str	r4, [sp, #16]
    a6a0:	str	r3, [sp]
    a6a4:	mov	r6, fp
    a6a8:	ldr	r7, [sp, #20]
    a6ac:	b	a4fc <inet_pton6+0x7c>
    a6b0:	cmp	r7, #0
    a6b4:	beq	a6e4 <inet_pton6+0x264>
    a6b8:	ldr	r2, [sp]
    a6bc:	add	r3, r2, #2
    a6c0:	ldr	r1, [sp, #4]
    a6c4:	cmp	r1, r3
    a6c8:	movcc	r7, r5
    a6cc:	bcc	a534 <inet_pton6+0xb4>
    a6d0:	lsr	r3, r6, #8
    a6d4:	mov	r4, r2
    a6d8:	strb	r3, [r4], #2
    a6dc:	strb	r6, [r2, #1]
    a6e0:	b	a5cc <inet_pton6+0x14c>
    a6e4:	ldr	r4, [sp]
    a6e8:	b	a5cc <inet_pton6+0x14c>
    a6ec:	ldr	r3, [sp, #4]
    a6f0:	cmp	r4, r3
    a6f4:	movne	r7, #0
    a6f8:	bne	a534 <inet_pton6+0xb4>
    a6fc:	b	a614 <inet_pton6+0x194>
    a700:	mov	r7, #0
    a704:	b	a534 <inet_pton6+0xb4>
    a708:	.word	0x0000c6fc
    a70c:	.word	0x0000c6ec

0000a710 <try_kqueue>:
    a710:	strd	r4, [sp, #-16]!
    a714:	str	r6, [sp, #8]
    a718:	str	lr, [sp, #12]
    a71c:	ldr	r4, [pc, #152]	; a7bc <try_kqueue+0xac>
    a720:	add	r4, pc, r4
    a724:	bl	1338c <rb_init_netio_kqueue>
    a728:	subs	r5, r0, #0
    a72c:	bne	a7b4 <try_kqueue+0xa4>
    a730:	ldr	r0, [pc, #136]	; a7c0 <try_kqueue+0xb0>
    a734:	add	r0, pc, r0
    a738:	ldr	r3, [pc, #132]	; a7c4 <try_kqueue+0xb4>
    a73c:	ldr	r3, [r4, r3]
    a740:	str	r3, [r0, #28]
    a744:	ldr	r3, [pc, #124]	; a7c8 <try_kqueue+0xb8>
    a748:	ldr	r3, [r4, r3]
    a74c:	str	r3, [r0, #32]
    a750:	ldr	r3, [pc, #116]	; a7cc <try_kqueue+0xbc>
    a754:	ldr	r3, [r4, r3]
    a758:	str	r3, [r0, #36]	; 0x24
    a75c:	ldr	r3, [pc, #108]	; a7d0 <try_kqueue+0xc0>
    a760:	ldr	r3, [r4, r3]
    a764:	str	r3, [r0, #40]	; 0x28
    a768:	ldr	r3, [pc, #100]	; a7d4 <try_kqueue+0xc4>
    a76c:	ldr	r3, [r4, r3]
    a770:	str	r3, [r0, #44]	; 0x2c
    a774:	ldr	r3, [pc, #92]	; a7d8 <try_kqueue+0xc8>
    a778:	ldr	r3, [r4, r3]
    a77c:	str	r3, [r0, #48]	; 0x30
    a780:	ldr	r3, [pc, #84]	; a7dc <try_kqueue+0xcc>
    a784:	ldr	r3, [r4, r3]
    a788:	str	r3, [r0, #52]	; 0x34
    a78c:	mov	r2, #25
    a790:	ldr	r1, [pc, #72]	; a7e0 <try_kqueue+0xd0>
    a794:	add	r1, pc, r1
    a798:	add	r0, r0, #56	; 0x38
    a79c:	bl	4654 <rb_strlcpy@plt>
    a7a0:	mov	r0, r5
    a7a4:	ldrd	r4, [sp]
    a7a8:	ldr	r6, [sp, #8]
    a7ac:	add	sp, sp, #12
    a7b0:	pop	{pc}		; (ldr pc, [sp], #4)
    a7b4:	mvn	r5, #0
    a7b8:	b	a7a0 <try_kqueue+0x90>
    a7bc:	.word	0x0001e8d8
    a7c0:	.word	0x0003126c
    a7c4:	.word	0x000003b4
    a7c8:	.word	0x00000370
    a7cc:	.word	0x00000390
    a7d0:	.word	0x00000388
    a7d4:	.word	0x000003cc
    a7d8:	.word	0x0000038c
    a7dc:	.word	0x000003dc
    a7e0:	.word	0x0000c46c

0000a7e4 <try_epoll>:
    a7e4:	strd	r4, [sp, #-16]!
    a7e8:	str	r6, [sp, #8]
    a7ec:	str	lr, [sp, #12]
    a7f0:	ldr	r4, [pc, #152]	; a890 <try_epoll+0xac>
    a7f4:	add	r4, pc, r4
    a7f8:	bl	112dc <rb_init_netio_epoll>
    a7fc:	subs	r5, r0, #0
    a800:	bne	a888 <try_epoll+0xa4>
    a804:	ldr	r0, [pc, #136]	; a894 <try_epoll+0xb0>
    a808:	add	r0, pc, r0
    a80c:	ldr	r3, [pc, #132]	; a898 <try_epoll+0xb4>
    a810:	ldr	r3, [r4, r3]
    a814:	str	r3, [r0, #28]
    a818:	ldr	r3, [pc, #124]	; a89c <try_epoll+0xb8>
    a81c:	ldr	r3, [r4, r3]
    a820:	str	r3, [r0, #32]
    a824:	ldr	r3, [pc, #116]	; a8a0 <try_epoll+0xbc>
    a828:	ldr	r3, [r4, r3]
    a82c:	str	r3, [r0, #36]	; 0x24
    a830:	ldr	r3, [pc, #108]	; a8a4 <try_epoll+0xc0>
    a834:	ldr	r3, [r4, r3]
    a838:	str	r3, [r0, #40]	; 0x28
    a83c:	ldr	r3, [pc, #100]	; a8a8 <try_epoll+0xc4>
    a840:	ldr	r3, [r4, r3]
    a844:	str	r3, [r0, #44]	; 0x2c
    a848:	ldr	r3, [pc, #92]	; a8ac <try_epoll+0xc8>
    a84c:	ldr	r3, [r4, r3]
    a850:	str	r3, [r0, #52]	; 0x34
    a854:	ldr	r3, [pc, #84]	; a8b0 <try_epoll+0xcc>
    a858:	ldr	r3, [r4, r3]
    a85c:	str	r3, [r0, #48]	; 0x30
    a860:	mov	r2, #25
    a864:	ldr	r1, [pc, #72]	; a8b4 <try_epoll+0xd0>
    a868:	add	r1, pc, r1
    a86c:	add	r0, r0, #56	; 0x38
    a870:	bl	4654 <rb_strlcpy@plt>
    a874:	mov	r0, r5
    a878:	ldrd	r4, [sp]
    a87c:	ldr	r6, [sp, #8]
    a880:	add	sp, sp, #12
    a884:	pop	{pc}		; (ldr pc, [sp], #4)
    a888:	mvn	r5, #0
    a88c:	b	a874 <try_epoll+0x90>
    a890:	.word	0x0001e804
    a894:	.word	0x00031198
    a898:	.word	0x00000360
    a89c:	.word	0x000003c0
    a8a0:	.word	0x000003fc
    a8a4:	.word	0x0000037c
    a8a8:	.word	0x000003bc
    a8ac:	.word	0x00000350
    a8b0:	.word	0x00000410
    a8b4:	.word	0x0000c3a0

0000a8b8 <try_ports>:
    a8b8:	strd	r4, [sp, #-16]!
    a8bc:	str	r6, [sp, #8]
    a8c0:	str	lr, [sp, #12]
    a8c4:	ldr	r4, [pc, #152]	; a964 <try_ports+0xac>
    a8c8:	add	r4, pc, r4
    a8cc:	bl	121f0 <rb_init_netio_ports>
    a8d0:	subs	r5, r0, #0
    a8d4:	bne	a95c <try_ports+0xa4>
    a8d8:	ldr	r0, [pc, #136]	; a968 <try_ports+0xb0>
    a8dc:	add	r0, pc, r0
    a8e0:	ldr	r3, [pc, #132]	; a96c <try_ports+0xb4>
    a8e4:	ldr	r3, [r4, r3]
    a8e8:	str	r3, [r0, #28]
    a8ec:	ldr	r3, [pc, #124]	; a970 <try_ports+0xb8>
    a8f0:	ldr	r3, [r4, r3]
    a8f4:	str	r3, [r0, #32]
    a8f8:	ldr	r3, [pc, #116]	; a974 <try_ports+0xbc>
    a8fc:	ldr	r3, [r4, r3]
    a900:	str	r3, [r0, #36]	; 0x24
    a904:	ldr	r3, [pc, #108]	; a978 <try_ports+0xc0>
    a908:	ldr	r3, [r4, r3]
    a90c:	str	r3, [r0, #40]	; 0x28
    a910:	ldr	r3, [pc, #100]	; a97c <try_ports+0xc4>
    a914:	ldr	r3, [r4, r3]
    a918:	str	r3, [r0, #44]	; 0x2c
    a91c:	ldr	r3, [pc, #92]	; a980 <try_ports+0xc8>
    a920:	ldr	r3, [r4, r3]
    a924:	str	r3, [r0, #48]	; 0x30
    a928:	ldr	r3, [pc, #84]	; a984 <try_ports+0xcc>
    a92c:	ldr	r3, [r4, r3]
    a930:	str	r3, [r0, #52]	; 0x34
    a934:	mov	r2, #25
    a938:	ldr	r1, [pc, #72]	; a988 <try_ports+0xd0>
    a93c:	add	r1, pc, r1
    a940:	add	r0, r0, #56	; 0x38
    a944:	bl	4654 <rb_strlcpy@plt>
    a948:	mov	r0, r5
    a94c:	ldrd	r4, [sp]
    a950:	ldr	r6, [sp, #8]
    a954:	add	sp, sp, #12
    a958:	pop	{pc}		; (ldr pc, [sp], #4)
    a95c:	mvn	r5, #0
    a960:	b	a948 <try_ports+0x90>
    a964:	.word	0x0001e730
    a968:	.word	0x000310c4
    a96c:	.word	0x000003e0
    a970:	.word	0x00000380
    a974:	.word	0x00000408
    a978:	.word	0x0000034c
    a97c:	.word	0x00000404
    a980:	.word	0x0000035c
    a984:	.word	0x000003d8
    a988:	.word	0x0000c2d4

0000a98c <try_devpoll>:
    a98c:	strd	r4, [sp, #-16]!
    a990:	str	r6, [sp, #8]
    a994:	str	lr, [sp, #12]
    a998:	ldr	r4, [pc, #132]	; aa24 <try_devpoll+0x98>
    a99c:	add	r4, pc, r4
    a9a0:	bl	111b8 <rb_init_netio_devpoll>
    a9a4:	subs	r5, r0, #0
    a9a8:	bne	aa1c <try_devpoll+0x90>
    a9ac:	ldr	r0, [pc, #116]	; aa28 <try_devpoll+0x9c>
    a9b0:	add	r0, pc, r0
    a9b4:	ldr	r3, [pc, #112]	; aa2c <try_devpoll+0xa0>
    a9b8:	ldr	r3, [r4, r3]
    a9bc:	str	r3, [r0, #28]
    a9c0:	ldr	r3, [pc, #104]	; aa30 <try_devpoll+0xa4>
    a9c4:	ldr	r3, [r4, r3]
    a9c8:	str	r3, [r0, #32]
    a9cc:	ldr	r3, [pc, #96]	; aa34 <try_devpoll+0xa8>
    a9d0:	ldr	r3, [r4, r3]
    a9d4:	str	r3, [r0, #36]	; 0x24
    a9d8:	mov	r3, #0
    a9dc:	str	r3, [r0, #40]	; 0x28
    a9e0:	str	r3, [r0, #44]	; 0x2c
    a9e4:	str	r3, [r0, #48]	; 0x30
    a9e8:	ldr	r3, [pc, #72]	; aa38 <try_devpoll+0xac>
    a9ec:	add	r3, pc, r3
    a9f0:	str	r3, [r0, #52]	; 0x34
    a9f4:	mov	r2, #25
    a9f8:	ldr	r1, [pc, #60]	; aa3c <try_devpoll+0xb0>
    a9fc:	add	r1, pc, r1
    aa00:	add	r0, r0, #56	; 0x38
    aa04:	bl	4654 <rb_strlcpy@plt>
    aa08:	mov	r0, r5
    aa0c:	ldrd	r4, [sp]
    aa10:	ldr	r6, [sp, #8]
    aa14:	add	sp, sp, #12
    aa18:	pop	{pc}		; (ldr pc, [sp], #4)
    aa1c:	mvn	r5, #0
    aa20:	b	aa08 <try_devpoll+0x7c>
    aa24:	.word	0x0001e65c
    aa28:	.word	0x00030ff0
    aa2c:	.word	0x000003a8
    aa30:	.word	0x000003e8
    aa34:	.word	0x000003ac
    aa38:	.word	0xfffff96c
    aa3c:	.word	0x0000c21c

0000aa40 <try_sigio>:
    aa40:	strd	r4, [sp, #-16]!
    aa44:	str	r6, [sp, #8]
    aa48:	str	lr, [sp, #12]
    aa4c:	ldr	r4, [pc, #152]	; aaec <try_sigio+0xac>
    aa50:	add	r4, pc, r4
    aa54:	bl	12260 <rb_init_netio_sigio>
    aa58:	subs	r5, r0, #0
    aa5c:	bne	aae4 <try_sigio+0xa4>
    aa60:	ldr	r0, [pc, #136]	; aaf0 <try_sigio+0xb0>
    aa64:	add	r0, pc, r0
    aa68:	ldr	r3, [pc, #132]	; aaf4 <try_sigio+0xb4>
    aa6c:	ldr	r3, [r4, r3]
    aa70:	str	r3, [r0, #28]
    aa74:	ldr	r3, [pc, #124]	; aaf8 <try_sigio+0xb8>
    aa78:	ldr	r3, [r4, r3]
    aa7c:	str	r3, [r0, #32]
    aa80:	ldr	r3, [pc, #116]	; aafc <try_sigio+0xbc>
    aa84:	ldr	r3, [r4, r3]
    aa88:	str	r3, [r0, #36]	; 0x24
    aa8c:	ldr	r3, [pc, #108]	; ab00 <try_sigio+0xc0>
    aa90:	ldr	r3, [r4, r3]
    aa94:	str	r3, [r0, #40]	; 0x28
    aa98:	ldr	r3, [pc, #100]	; ab04 <try_sigio+0xc4>
    aa9c:	ldr	r3, [r4, r3]
    aaa0:	str	r3, [r0, #44]	; 0x2c
    aaa4:	ldr	r3, [pc, #92]	; ab08 <try_sigio+0xc8>
    aaa8:	ldr	r3, [r4, r3]
    aaac:	str	r3, [r0, #52]	; 0x34
    aab0:	ldr	r3, [pc, #84]	; ab0c <try_sigio+0xcc>
    aab4:	ldr	r3, [r4, r3]
    aab8:	str	r3, [r0, #48]	; 0x30
    aabc:	mov	r2, #25
    aac0:	ldr	r1, [pc, #72]	; ab10 <try_sigio+0xd0>
    aac4:	add	r1, pc, r1
    aac8:	add	r0, r0, #56	; 0x38
    aacc:	bl	4654 <rb_strlcpy@plt>
    aad0:	mov	r0, r5
    aad4:	ldrd	r4, [sp]
    aad8:	ldr	r6, [sp, #8]
    aadc:	add	sp, sp, #12
    aae0:	pop	{pc}		; (ldr pc, [sp], #4)
    aae4:	mvn	r5, #0
    aae8:	b	aad0 <try_sigio+0x90>
    aaec:	.word	0x0001e5a8
    aaf0:	.word	0x00030f3c
    aaf4:	.word	0x000003c4
    aaf8:	.word	0x00000364
    aafc:	.word	0x000003d4
    ab00:	.word	0x0000036c
    ab04:	.word	0x00000354
    ab08:	.word	0x000003d0
    ab0c:	.word	0x000003f0
    ab10:	.word	0x0000c15c

0000ab14 <try_poll>:
    ab14:	strd	r4, [sp, #-16]!
    ab18:	str	r6, [sp, #8]
    ab1c:	str	lr, [sp, #12]
    ab20:	ldr	r4, [pc, #132]	; abac <try_poll+0x98>
    ab24:	add	r4, pc, r4
    ab28:	bl	11cb0 <rb_init_netio_poll>
    ab2c:	subs	r5, r0, #0
    ab30:	bne	aba4 <try_poll+0x90>
    ab34:	ldr	r0, [pc, #116]	; abb0 <try_poll+0x9c>
    ab38:	add	r0, pc, r0
    ab3c:	ldr	r3, [pc, #112]	; abb4 <try_poll+0xa0>
    ab40:	ldr	r3, [r4, r3]
    ab44:	str	r3, [r0, #28]
    ab48:	ldr	r3, [pc, #104]	; abb8 <try_poll+0xa4>
    ab4c:	ldr	r3, [r4, r3]
    ab50:	str	r3, [r0, #32]
    ab54:	ldr	r3, [pc, #96]	; abbc <try_poll+0xa8>
    ab58:	ldr	r3, [r4, r3]
    ab5c:	str	r3, [r0, #36]	; 0x24
    ab60:	mov	r3, #0
    ab64:	str	r3, [r0, #40]	; 0x28
    ab68:	str	r3, [r0, #44]	; 0x2c
    ab6c:	str	r3, [r0, #48]	; 0x30
    ab70:	ldr	r3, [pc, #72]	; abc0 <try_poll+0xac>
    ab74:	add	r3, pc, r3
    ab78:	str	r3, [r0, #52]	; 0x34
    ab7c:	mov	r2, #25
    ab80:	ldr	r1, [pc, #60]	; abc4 <try_poll+0xb0>
    ab84:	add	r1, pc, r1
    ab88:	add	r0, r0, #56	; 0x38
    ab8c:	bl	4654 <rb_strlcpy@plt>
    ab90:	mov	r0, r5
    ab94:	ldrd	r4, [sp]
    ab98:	ldr	r6, [sp, #8]
    ab9c:	add	sp, sp, #12
    aba0:	pop	{pc}		; (ldr pc, [sp], #4)
    aba4:	mvn	r5, #0
    aba8:	b	ab90 <try_poll+0x7c>
    abac:	.word	0x0001e4d4
    abb0:	.word	0x00030e68
    abb4:	.word	0x000003e4
    abb8:	.word	0x000003f4
    abbc:	.word	0x00000378
    abc0:	.word	0xfffff7e4
    abc4:	.word	0x0000c0a4

0000abc8 <try_win32>:
    abc8:	strd	r4, [sp, #-16]!
    abcc:	str	r6, [sp, #8]
    abd0:	str	lr, [sp, #12]
    abd4:	ldr	r4, [pc, #132]	; ac60 <try_win32+0x98>
    abd8:	add	r4, pc, r4
    abdc:	bl	4fa0 <rb_init_netio_win32>
    abe0:	subs	r5, r0, #0
    abe4:	bne	ac58 <try_win32+0x90>
    abe8:	ldr	r0, [pc, #116]	; ac64 <try_win32+0x9c>
    abec:	add	r0, pc, r0
    abf0:	ldr	r3, [pc, #112]	; ac68 <try_win32+0xa0>
    abf4:	ldr	r3, [r4, r3]
    abf8:	str	r3, [r0, #28]
    abfc:	ldr	r3, [pc, #104]	; ac6c <try_win32+0xa4>
    ac00:	ldr	r3, [r4, r3]
    ac04:	str	r3, [r0, #32]
    ac08:	ldr	r3, [pc, #96]	; ac70 <try_win32+0xa8>
    ac0c:	ldr	r3, [r4, r3]
    ac10:	str	r3, [r0, #36]	; 0x24
    ac14:	mov	r3, #0
    ac18:	str	r3, [r0, #40]	; 0x28
    ac1c:	str	r3, [r0, #44]	; 0x2c
    ac20:	str	r3, [r0, #48]	; 0x30
    ac24:	ldr	r3, [pc, #72]	; ac74 <try_win32+0xac>
    ac28:	add	r3, pc, r3
    ac2c:	str	r3, [r0, #52]	; 0x34
    ac30:	mov	r2, #25
    ac34:	ldr	r1, [pc, #60]	; ac78 <try_win32+0xb0>
    ac38:	add	r1, pc, r1
    ac3c:	add	r0, r0, #56	; 0x38
    ac40:	bl	4654 <rb_strlcpy@plt>
    ac44:	mov	r0, r5
    ac48:	ldrd	r4, [sp]
    ac4c:	ldr	r6, [sp, #8]
    ac50:	add	sp, sp, #12
    ac54:	pop	{pc}		; (ldr pc, [sp], #4)
    ac58:	mvn	r5, #0
    ac5c:	b	ac44 <try_win32+0x7c>
    ac60:	.word	0x0001e420
    ac64:	.word	0x00030db4
    ac68:	.word	0x00000394
    ac6c:	.word	0x000003a0
    ac70:	.word	0x00000368
    ac74:	.word	0xfffff730
    ac78:	.word	0x0000bff8

0000ac7c <try_select>:
    ac7c:	strd	r4, [sp, #-16]!
    ac80:	str	r6, [sp, #8]
    ac84:	str	lr, [sp, #12]
    ac88:	ldr	r4, [pc, #132]	; ad14 <try_select+0x98>
    ac8c:	add	r4, pc, r4
    ac90:	bl	12ff4 <rb_init_netio_select>
    ac94:	subs	r5, r0, #0
    ac98:	bne	ad0c <try_select+0x90>
    ac9c:	ldr	r0, [pc, #116]	; ad18 <try_select+0x9c>
    aca0:	add	r0, pc, r0
    aca4:	ldr	r3, [pc, #112]	; ad1c <try_select+0xa0>
    aca8:	ldr	r3, [r4, r3]
    acac:	str	r3, [r0, #28]
    acb0:	ldr	r3, [pc, #104]	; ad20 <try_select+0xa4>
    acb4:	ldr	r3, [r4, r3]
    acb8:	str	r3, [r0, #32]
    acbc:	ldr	r3, [pc, #96]	; ad24 <try_select+0xa8>
    acc0:	ldr	r3, [r4, r3]
    acc4:	str	r3, [r0, #36]	; 0x24
    acc8:	mov	r3, #0
    accc:	str	r3, [r0, #40]	; 0x28
    acd0:	str	r3, [r0, #44]	; 0x2c
    acd4:	str	r3, [r0, #48]	; 0x30
    acd8:	ldr	r3, [pc, #72]	; ad28 <try_select+0xac>
    acdc:	add	r3, pc, r3
    ace0:	str	r3, [r0, #52]	; 0x34
    ace4:	mov	r2, #25
    ace8:	ldr	r1, [pc, #60]	; ad2c <try_select+0xb0>
    acec:	add	r1, pc, r1
    acf0:	add	r0, r0, #56	; 0x38
    acf4:	bl	4654 <rb_strlcpy@plt>
    acf8:	mov	r0, r5
    acfc:	ldrd	r4, [sp]
    ad00:	ldr	r6, [sp, #8]
    ad04:	add	sp, sp, #12
    ad08:	pop	{pc}		; (ldr pc, [sp], #4)
    ad0c:	mvn	r5, #0
    ad10:	b	acf8 <try_select+0x7c>
    ad14:	.word	0x0001e36c
    ad18:	.word	0x00030d00
    ad1c:	.word	0x00000418
    ad20:	.word	0x000003b0
    ad24:	.word	0x000003f8
    ad28:	.word	0xfffff67c
    ad2c:	.word	0x0000bf4c

0000ad30 <rb_getmaxconnect>:
    ad30:	ldr	r3, [pc, #16]	; ad48 <rb_getmaxconnect+0x18>
    ad34:	add	r3, pc, r3
    ad38:	ldr	r2, [pc, #12]	; ad4c <rb_getmaxconnect+0x1c>
    ad3c:	ldr	r3, [r3, r2]
    ad40:	ldr	r0, [r3]
    ad44:	bx	lr
    ad48:	.word	0x0001e2c4
    ad4c:	.word	0x00000398

0000ad50 <rb_set_buffers>:
    ad50:	str	r4, [sp, #-8]!
    ad54:	str	lr, [sp, #4]
    ad58:	sub	sp, sp, #16
    ad5c:	str	r1, [sp, #12]
    ad60:	subs	r4, r0, #0
    ad64:	moveq	r0, #0
    ad68:	beq	ad94 <rb_set_buffers+0x44>
    ad6c:	mov	r3, #4
    ad70:	str	r3, [sp]
    ad74:	add	r3, sp, #12
    ad78:	mov	r2, #8
    ad7c:	mov	r1, #1
    ad80:	ldr	r0, [r4, #12]
    ad84:	bl	4c48 <setsockopt@plt>
    ad88:	cmp	r0, #0
    ad8c:	movne	r0, #0
    ad90:	beq	ada4 <rb_set_buffers+0x54>
    ad94:	add	sp, sp, #16
    ad98:	ldr	r4, [sp]
    ad9c:	add	sp, sp, #4
    ada0:	pop	{pc}		; (ldr pc, [sp], #4)
    ada4:	mov	r3, #4
    ada8:	str	r3, [sp]
    adac:	add	r3, sp, #12
    adb0:	mov	r2, #7
    adb4:	mov	r1, #1
    adb8:	ldr	r0, [r4, #12]
    adbc:	bl	4c48 <setsockopt@plt>
    adc0:	clz	r0, r0
    adc4:	lsr	r0, r0, #5
    adc8:	b	ad94 <rb_set_buffers+0x44>

0000adcc <rb_settimeout>:
    adcc:	strd	r4, [sp, #-28]!	; 0xffffffe4
    add0:	strd	r6, [sp, #8]
    add4:	strd	r8, [sp, #16]
    add8:	str	lr, [sp, #24]
    addc:	sub	sp, sp, #12
    ade0:	ldr	r9, [pc, #444]	; afa4 <rb_settimeout+0x1d8>
    ade4:	add	r9, pc, r9
    ade8:	subs	r6, r0, #0
    adec:	beq	ae78 <rb_settimeout+0xac>
    adf0:	mov	r8, r3
    adf4:	mov	r7, r2
    adf8:	mov	r5, r1
    adfc:	ldr	r4, [r6, #44]	; 0x2c
    ae00:	cmp	r2, #0
    ae04:	beq	ae90 <rb_settimeout+0xc4>
    ae08:	cmp	r4, #0
    ae0c:	beq	af30 <rb_settimeout+0x164>
    ae10:	str	r6, [r4]
    ae14:	bl	47a4 <rb_current_time@plt>
    ae18:	add	r0, r0, r5
    ae1c:	str	r0, [r4, #16]
    ae20:	str	r7, [r4, #20]
    ae24:	str	r8, [r4, #24]
    ae28:	add	r2, r4, #4
    ae2c:	str	r4, [r4, #4]
    ae30:	mov	r3, #0
    ae34:	str	r3, [r4, #8]
    ae38:	ldr	r3, [pc, #360]	; afa8 <rb_settimeout+0x1dc>
    ae3c:	add	r3, pc, r3
    ae40:	ldr	r3, [r3, #16]
    ae44:	str	r3, [r4, #12]
    ae48:	cmp	r3, #0
    ae4c:	strne	r2, [r3, #4]
    ae50:	beq	af4c <rb_settimeout+0x180>
    ae54:	ldr	r3, [pc, #336]	; afac <rb_settimeout+0x1e0>
    ae58:	add	r3, pc, r3
    ae5c:	str	r2, [r3, #16]
    ae60:	ldr	r2, [r3, #24]
    ae64:	add	r2, r2, #1
    ae68:	str	r2, [r3, #24]
    ae6c:	ldr	r3, [r3, #84]	; 0x54
    ae70:	cmp	r3, #0
    ae74:	beq	af70 <rb_settimeout+0x1a4>
    ae78:	add	sp, sp, #12
    ae7c:	ldrd	r4, [sp]
    ae80:	ldrd	r6, [sp, #8]
    ae84:	ldrd	r8, [sp, #16]
    ae88:	add	sp, sp, #24
    ae8c:	pop	{pc}		; (ldr pc, [sp], #4)
    ae90:	cmp	r4, #0
    ae94:	beq	ae78 <rb_settimeout+0xac>
    ae98:	ldr	r3, [r4, #12]
    ae9c:	cmp	r3, #0
    aea0:	beq	af08 <rb_settimeout+0x13c>
    aea4:	ldr	r2, [r4, #8]
    aea8:	str	r2, [r3, #4]
    aeac:	ldr	r3, [r4, #8]
    aeb0:	cmp	r3, #0
    aeb4:	beq	af1c <rb_settimeout+0x150>
    aeb8:	ldr	r2, [r4, #12]
    aebc:	str	r2, [r3, #8]
    aec0:	ldr	r3, [pc, #232]	; afb0 <rb_settimeout+0x1e4>
    aec4:	add	r3, pc, r3
    aec8:	ldr	r5, [r3, #24]
    aecc:	sub	r5, r5, #1
    aed0:	str	r5, [r3, #24]
    aed4:	mov	r0, r4
    aed8:	bl	46a8 <free@plt>
    aedc:	mov	r3, #0
    aee0:	str	r3, [r6, #44]	; 0x2c
    aee4:	cmp	r5, r3
    aee8:	bne	ae78 <rb_settimeout+0xac>
    aeec:	ldr	r4, [pc, #192]	; afb4 <rb_settimeout+0x1e8>
    aef0:	add	r4, pc, r4
    aef4:	ldr	r0, [r4, #84]	; 0x54
    aef8:	bl	4450 <rb_event_delete@plt>
    aefc:	mov	r3, #0
    af00:	str	r3, [r4, #84]	; 0x54
    af04:	b	ae78 <rb_settimeout+0xac>
    af08:	ldr	r2, [r4, #8]
    af0c:	ldr	r3, [pc, #164]	; afb8 <rb_settimeout+0x1ec>
    af10:	add	r3, pc, r3
    af14:	str	r2, [r3, #20]
    af18:	b	aeac <rb_settimeout+0xe0>
    af1c:	ldr	r2, [r4, #12]
    af20:	ldr	r3, [pc, #148]	; afbc <rb_settimeout+0x1f0>
    af24:	add	r3, pc, r3
    af28:	str	r2, [r3, #16]
    af2c:	b	aec0 <rb_settimeout+0xf4>
    af30:	mov	r1, #28
    af34:	mov	r0, #1
    af38:	bl	45a0 <calloc@plt>
    af3c:	subs	r4, r0, #0
    af40:	strne	r4, [r6, #44]	; 0x2c
    af44:	bne	ae10 <rb_settimeout+0x44>
    af48:	bl	4930 <rb_outofmemory@plt>
    af4c:	ldr	r3, [pc, #108]	; afc0 <rb_settimeout+0x1f4>
    af50:	add	r3, pc, r3
    af54:	ldr	r3, [r3, #20]
    af58:	cmp	r3, #0
    af5c:	bne	ae54 <rb_settimeout+0x88>
    af60:	ldr	r3, [pc, #92]	; afc4 <rb_settimeout+0x1f8>
    af64:	add	r3, pc, r3
    af68:	str	r2, [r3, #20]
    af6c:	b	ae54 <rb_settimeout+0x88>
    af70:	ldr	r3, [pc, #80]	; afc8 <rb_settimeout+0x1fc>
    af74:	ldr	r3, [r9, r3]
    af78:	str	r3, [sp, #4]
    af7c:	mov	r3, #5
    af80:	mov	r2, #0
    af84:	ldr	r1, [sp, #4]
    af88:	ldr	r0, [pc, #60]	; afcc <rb_settimeout+0x200>
    af8c:	add	r0, pc, r0
    af90:	bl	4ab0 <rb_event_add@plt>
    af94:	ldr	r3, [pc, #52]	; afd0 <rb_settimeout+0x204>
    af98:	add	r3, pc, r3
    af9c:	str	r0, [r3, #84]	; 0x54
    afa0:	b	ae78 <rb_settimeout+0xac>
    afa4:	.word	0x0001e214
    afa8:	.word	0x00030b64
    afac:	.word	0x00030b48
    afb0:	.word	0x00030adc
    afb4:	.word	0x00030ab0
    afb8:	.word	0x00030a90
    afbc:	.word	0x00030a7c
    afc0:	.word	0x00030a50
    afc4:	.word	0x00030a3c
    afc8:	.word	0x00000348
    afcc:	.word	0x0000bcb4
    afd0:	.word	0x00030a08

0000afd4 <rb_sctp_bindx>:
    afd4:	mvn	r0, #0
    afd8:	bx	lr

0000afdc <rb_inet_get_proto>:
    afdc:	mov	r0, #6
    afe0:	bx	lr

0000afe4 <rb_connect_callback>:
    afe4:	strd	r4, [sp, #-32]!	; 0xffffffe0
    afe8:	strd	r6, [sp, #8]
    afec:	strd	r8, [sp, #16]
    aff0:	str	sl, [sp, #24]
    aff4:	str	lr, [sp, #28]
    aff8:	subs	r5, r0, #0
    affc:	beq	b058 <rb_connect_callback+0x74>
    b000:	ldr	r6, [r5, #48]	; 0x30
    b004:	cmp	r6, #0
    b008:	beq	b058 <rb_connect_callback+0x74>
    b00c:	ldr	r7, [r6, #260]	; 0x104
    b010:	cmp	r7, #0
    b014:	beq	b058 <rb_connect_callback+0x74>
    b018:	mov	r4, r1
    b01c:	bl	4c90 <__errno_location@plt>
    b020:	mov	r8, r0
    b024:	ldr	sl, [r0]
    b028:	ldr	r9, [r6, #264]	; 0x108
    b02c:	mov	r1, #0
    b030:	str	r1, [r6, #260]	; 0x104
    b034:	mov	r3, r1
    b038:	mov	r2, r1
    b03c:	mov	r0, r5
    b040:	bl	439c <rb_settimeout@plt>
    b044:	str	sl, [r8]
    b048:	mov	r2, r9
    b04c:	mov	r1, r4
    b050:	mov	r0, r5
    b054:	blx	r7
    b058:	ldrd	r4, [sp]
    b05c:	ldrd	r6, [sp, #8]
    b060:	ldrd	r8, [sp, #16]
    b064:	ldr	sl, [sp, #24]
    b068:	add	sp, sp, #28
    b06c:	pop	{pc}		; (ldr pc, [sp], #4)

0000b070 <rb_connect_outcome>:
    b070:	strd	r4, [sp, #-12]!
    b074:	str	lr, [sp, #8]
    b078:	sub	sp, sp, #20
    b07c:	mov	r3, #0
    b080:	str	r3, [sp, #12]
    b084:	mov	r3, #4
    b088:	str	r3, [sp, #8]
    b08c:	subs	r4, r0, #0
    b090:	beq	b100 <rb_connect_outcome+0x90>
    b094:	ldr	r3, [r4, #48]	; 0x30
    b098:	cmp	r3, #0
    b09c:	beq	b100 <rb_connect_outcome+0x90>
    b0a0:	ldr	r3, [r3, #260]	; 0x104
    b0a4:	cmp	r3, #0
    b0a8:	beq	b100 <rb_connect_outcome+0x90>
    b0ac:	add	r3, sp, #8
    b0b0:	str	r3, [sp]
    b0b4:	add	r3, sp, #12
    b0b8:	mov	r2, #4
    b0bc:	mov	r1, #1
    b0c0:	ldr	r0, [r4, #12]
    b0c4:	bl	4c24 <getsockopt@plt>
    b0c8:	cmp	r0, #0
    b0cc:	blt	b0f4 <rb_connect_outcome+0x84>
    b0d0:	ldr	r5, [sp, #12]
    b0d4:	cmp	r5, #0
    b0d8:	bne	b0ec <rb_connect_outcome+0x7c>
    b0dc:	mov	r1, #0
    b0e0:	mov	r0, r4
    b0e4:	bl	afe4 <rb_connect_callback>
    b0e8:	b	b100 <rb_connect_outcome+0x90>
    b0ec:	bl	4c90 <__errno_location@plt>
    b0f0:	str	r5, [r0]
    b0f4:	mov	r1, #4
    b0f8:	mov	r0, r4
    b0fc:	bl	afe4 <rb_connect_callback>
    b100:	add	sp, sp, #20
    b104:	ldrd	r4, [sp]
    b108:	add	sp, sp, #8
    b10c:	pop	{pc}		; (ldr pc, [sp], #4)

0000b110 <rb_connect_timeout>:
    b110:	str	r4, [sp, #-8]!
    b114:	str	lr, [sp, #4]
    b118:	mov	r1, #3
    b11c:	bl	afe4 <rb_connect_callback>
    b120:	ldr	r4, [sp]
    b124:	add	sp, sp, #4
    b128:	pop	{pc}		; (ldr pc, [sp], #4)

0000b12c <rb_connect_sctp>:
    b12c:	str	r4, [sp, #-8]!
    b130:	str	lr, [sp, #4]
    b134:	mov	r1, #4
    b138:	bl	afe4 <rb_connect_callback>
    b13c:	ldr	r4, [sp]
    b140:	add	sp, sp, #4
    b144:	pop	{pc}		; (ldr pc, [sp], #4)

0000b148 <rb_connect_sockaddr>:
    b148:	subs	r3, r0, #0
    b14c:	beq	b178 <rb_connect_sockaddr+0x30>
    b150:	str	r4, [sp, #-8]!
    b154:	str	lr, [sp, #4]
    b158:	mov	r0, r1
    b15c:	ldr	r1, [r3, #48]	; 0x30
    b160:	add	r1, r1, #128	; 0x80
    b164:	bl	47bc <memcpy@plt>
    b168:	mov	r0, #1
    b16c:	ldr	r4, [sp]
    b170:	add	sp, sp, #4
    b174:	pop	{pc}		; (ldr pc, [sp], #4)
    b178:	mov	r0, #0
    b17c:	bx	lr

0000b180 <rb_errstr>:
    b180:	cmp	r0, #6
    b184:	bhi	b19c <rb_errstr+0x1c>
    b188:	ldr	r3, [pc, #24]	; b1a8 <rb_errstr+0x28>
    b18c:	add	r3, pc, r3
    b190:	add	r0, r3, r0, lsl #2
    b194:	ldr	r0, [r0, #1024]	; 0x400
    b198:	bx	lr
    b19c:	ldr	r0, [pc, #8]	; b1ac <rb_errstr+0x2c>
    b1a0:	add	r0, pc, r0
    b1a4:	bx	lr
    b1a8:	.word	0x0001d8b0
    b1ac:	.word	0x0000bab4

0000b1b0 <rb_listen>:
    b1b0:	strd	r4, [sp, #-16]!
    b1b4:	str	r6, [sp, #8]
    b1b8:	str	lr, [sp, #12]
    b1bc:	sub	sp, sp, #16
    b1c0:	mov	r4, r0
    b1c4:	str	r1, [sp, #12]
    b1c8:	mov	r6, r2
    b1cc:	ldrb	r3, [r0, #17]
    b1d0:	bic	r3, r3, #127	; 0x7f
    b1d4:	orr	r3, r3, #20
    b1d8:	strb	r3, [r0, #17]
    b1dc:	ldr	r0, [r0, #12]
    b1e0:	bl	4594 <listen@plt>
    b1e4:	mov	r5, r0
    b1e8:	clz	r0, r0
    b1ec:	lsr	r0, r0, #5
    b1f0:	cmp	r6, #0
    b1f4:	moveq	r0, #0
    b1f8:	cmp	r0, #0
    b1fc:	bne	b218 <rb_listen+0x68>
    b200:	mov	r0, r5
    b204:	add	sp, sp, #16
    b208:	ldrd	r4, [sp]
    b20c:	ldr	r6, [sp, #8]
    b210:	add	sp, sp, #12
    b214:	pop	{pc}		; (ldr pc, [sp], #4)
    b218:	mov	r3, #4
    b21c:	str	r3, [sp]
    b220:	add	r3, sp, #12
    b224:	mov	r2, #9
    b228:	mov	r1, #6
    b22c:	ldr	r0, [r4, #12]
    b230:	bl	4c48 <setsockopt@plt>
    b234:	b	b200 <rb_listen+0x50>

0000b238 <rb_fdlist_init>:
    b238:	strd	r4, [sp, #-16]!
    b23c:	str	r6, [sp, #8]
    b240:	str	lr, [sp, #12]
    b244:	mov	r6, r2
    b248:	ldr	r5, [pc, #152]	; b2e8 <rb_fdlist_init+0xb0>
    b24c:	add	r5, pc, r5
    b250:	ldr	r3, [pc, #148]	; b2ec <rb_fdlist_init+0xb4>
    b254:	add	r3, pc, r3
    b258:	ldr	r3, [r3, #88]	; 0x58
    b25c:	cmp	r3, #0
    b260:	bne	b288 <rb_fdlist_init+0x50>
    b264:	ldr	r3, [pc, #132]	; b2f0 <rb_fdlist_init+0xb8>
    b268:	ldr	r3, [r5, r3]
    b26c:	str	r1, [r3]
    b270:	cmp	r0, #0
    b274:	bne	b2b8 <rb_fdlist_init+0x80>
    b278:	ldr	r3, [pc, #116]	; b2f4 <rb_fdlist_init+0xbc>
    b27c:	add	r3, pc, r3
    b280:	mov	r2, #1
    b284:	str	r2, [r3, #88]	; 0x58
    b288:	ldr	r2, [pc, #104]	; b2f8 <rb_fdlist_init+0xc0>
    b28c:	add	r2, pc, r2
    b290:	mov	r1, r6
    b294:	mov	r0, #68	; 0x44
    b298:	bl	4a5c <rb_bh_create@plt>
    b29c:	ldr	r3, [pc, #88]	; b2fc <rb_fdlist_init+0xc4>
    b2a0:	add	r3, pc, r3
    b2a4:	str	r0, [r3, #92]	; 0x5c
    b2a8:	ldrd	r4, [sp]
    b2ac:	ldr	r6, [sp, #8]
    b2b0:	add	sp, sp, #12
    b2b4:	pop	{pc}		; (ldr pc, [sp], #4)
    b2b8:	cmp	r1, #3
    b2bc:	ble	b278 <rb_fdlist_init+0x40>
    b2c0:	mov	r4, #3
    b2c4:	mov	r0, r4
    b2c8:	bl	48e8 <close@plt>
    b2cc:	add	r4, r4, #1
    b2d0:	ldr	r3, [pc, #24]	; b2f0 <rb_fdlist_init+0xb8>
    b2d4:	ldr	r3, [r5, r3]
    b2d8:	ldr	r3, [r3]
    b2dc:	cmp	r4, r3
    b2e0:	blt	b2c4 <rb_fdlist_init+0x8c>
    b2e4:	b	b278 <rb_fdlist_init+0x40>
    b2e8:	.word	0x0001ddac
    b2ec:	.word	0x0003074c
    b2f0:	.word	0x00000398
    b2f4:	.word	0x00030724
    b2f8:	.word	0x0000b9e0
    b2fc:	.word	0x00030700

0000b300 <rb_open>:
    b300:	strd	r4, [sp, #-24]!	; 0xffffffe8
    b304:	strd	r6, [sp, #8]
    b308:	str	r8, [sp, #16]
    b30c:	str	lr, [sp, #20]
    b310:	mov	r8, r1
    b314:	mov	r7, r2
    b318:	ldr	r6, [pc, #396]	; b4ac <rb_open+0x1ac>
    b31c:	add	r6, pc, r6
    b320:	subs	r5, r0, #0
    b324:	blt	b438 <rb_open+0x138>
    b328:	asr	r3, r5, #24
    b32c:	eor	r3, r3, r5, asr #12
    b330:	eor	r3, r3, r5
    b334:	ubfx	r3, r3, #0, #12
    b338:	ldr	r2, [pc, #368]	; b4b0 <rb_open+0x1b0>
    b33c:	ldr	r2, [r6, r2]
    b340:	ldr	r2, [r2]
    b344:	add	r3, r3, r3, lsl #1
    b348:	ldr	r3, [r2, r3, lsl #2]
    b34c:	cmp	r3, #0
    b350:	beq	b438 <rb_open+0x138>
    b354:	ldr	r4, [r3]
    b358:	ldr	r2, [r4, #12]
    b35c:	cmp	r2, r5
    b360:	beq	b380 <rb_open+0x80>
    b364:	ldr	r3, [r3, #8]
    b368:	cmp	r3, #0
    b36c:	beq	b438 <rb_open+0x138>
    b370:	ldr	r4, [r3]
    b374:	ldr	r2, [r4, #12]
    b378:	cmp	r5, r2
    b37c:	bne	b364 <rb_open+0x64>
    b380:	ldrb	r3, [r4, #16]
    b384:	tst	r3, #1
    b388:	bne	b404 <rb_open+0x104>
    b38c:	str	r5, [r4, #12]
    b390:	strb	r8, [r4, #17]
    b394:	orr	r3, r3, #1
    b398:	strb	r3, [r4, #16]
    b39c:	cmp	r7, #0
    b3a0:	beq	b3c8 <rb_open+0xc8>
    b3a4:	mov	r0, #128	; 0x80
    b3a8:	bl	4954 <malloc@plt>
    b3ac:	subs	r5, r0, #0
    b3b0:	beq	b434 <rb_open+0x134>
    b3b4:	mov	r2, #128	; 0x80
    b3b8:	mov	r1, r7
    b3bc:	mov	r0, r5
    b3c0:	bl	4654 <rb_strlcpy@plt>
    b3c4:	str	r5, [r4, #24]
    b3c8:	ldr	r2, [pc, #228]	; b4b4 <rb_open+0x1b4>
    b3cc:	add	r2, pc, r2
    b3d0:	ldr	r3, [r2, #96]	; 0x60
    b3d4:	add	r3, r3, #1
    b3d8:	str	r3, [r2, #96]	; 0x60
    b3dc:	mov	r0, r4
    b3e0:	ldrd	r4, [sp]
    b3e4:	ldrd	r6, [sp, #8]
    b3e8:	ldr	r8, [sp, #16]
    b3ec:	add	sp, sp, #20
    b3f0:	pop	{pc}		; (ldr pc, [sp], #4)
    b3f4:	ldr	r1, [ip, #4]
    b3f8:	cmp	r1, #0
    b3fc:	streq	r0, [ip, #4]
    b400:	b	b498 <rb_open+0x198>
    b404:	ldr	r2, [r4, #24]
    b408:	cmp	r2, #0
    b40c:	beq	b428 <rb_open+0x128>
    b410:	mov	r1, r5
    b414:	ldr	r0, [pc, #156]	; b4b8 <rb_open+0x1b8>
    b418:	add	r0, pc, r0
    b41c:	bl	48c4 <rb_lib_log@plt>
    b420:	mov	r4, #0
    b424:	b	b3dc <rb_open+0xdc>
    b428:	ldr	r2, [pc, #140]	; b4bc <rb_open+0x1bc>
    b42c:	add	r2, pc, r2
    b430:	b	b410 <rb_open+0x110>
    b434:	bl	4930 <rb_outofmemory@plt>
    b438:	ldr	r3, [pc, #128]	; b4c0 <rb_open+0x1c0>
    b43c:	add	r3, pc, r3
    b440:	ldr	r0, [r3, #92]	; 0x5c
    b444:	bl	4900 <rb_bh_alloc@plt>
    b448:	mov	r4, r0
    b44c:	str	r5, [r0, #12]
    b450:	ldr	r3, [pc, #88]	; b4b0 <rb_open+0x1b0>
    b454:	ldr	r2, [r6, r3]
    b458:	asr	r3, r5, #24
    b45c:	eor	r3, r3, r5, asr #12
    b460:	eor	r3, r3, r5
    b464:	ubfx	r3, r3, #0, #12
    b468:	add	r3, r3, r3, lsl #1
    b46c:	lsl	r3, r3, #2
    b470:	ldr	r2, [r2]
    b474:	add	ip, r2, r3
    b478:	str	r0, [r4]
    b47c:	mov	r1, #0
    b480:	str	r1, [r0, #4]
    b484:	ldr	r1, [r2, r3]
    b488:	str	r1, [r0, #8]
    b48c:	cmp	r1, #0
    b490:	strne	r0, [r1, #4]
    b494:	beq	b3f4 <rb_open+0xf4>
    b498:	str	r0, [r2, r3]
    b49c:	ldr	r3, [ip, #8]
    b4a0:	add	r3, r3, #1
    b4a4:	str	r3, [ip, #8]
    b4a8:	b	b380 <rb_open+0x80>
    b4ac:	.word	0x0001dcdc
    b4b0:	.word	0x000003b8
    b4b4:	.word	0x000305d4
    b4b8:	.word	0x0000b86c
    b4bc:	.word	0x0000b850
    b4c0:	.word	0x00030564

0000b4c4 <rb_dump_fd>:
    b4c4:	strd	r4, [sp, #-32]!	; 0xffffffe0
    b4c8:	strd	r6, [sp, #8]
    b4cc:	strd	r8, [sp, #16]
    b4d0:	str	sl, [sp, #24]
    b4d4:	str	lr, [sp, #28]
    b4d8:	mov	r8, r0
    b4dc:	mov	r7, r1
    b4e0:	ldr	r3, [pc, #160]	; b588 <rb_dump_fd+0xc4>
    b4e4:	add	r3, pc, r3
    b4e8:	mov	r5, #0
    b4ec:	ldr	r2, [pc, #152]	; b58c <rb_dump_fd+0xc8>
    b4f0:	ldr	r9, [r3, r2]
    b4f4:	ldr	r6, [pc, #148]	; b590 <rb_dump_fd+0xcc>
    b4f8:	add	r6, pc, r6
    b4fc:	b	b54c <rb_dump_fd+0x88>
    b500:	ldr	r4, [r4, #8]
    b504:	cmp	r4, #0
    b508:	beq	b540 <rb_dump_fd+0x7c>
    b50c:	ldr	r3, [r4]
    b510:	cmp	r3, #0
    b514:	beq	b500 <rb_dump_fd+0x3c>
    b518:	ldrb	r2, [r3, #16]
    b51c:	tst	r2, #1
    b520:	beq	b500 <rb_dump_fd+0x3c>
    b524:	ldr	r0, [r3, #12]
    b528:	ldr	r1, [r3, #24]
    b52c:	cmp	r1, #0
    b530:	moveq	r1, r6
    b534:	mov	r2, r7
    b538:	blx	r8
    b53c:	b	b500 <rb_dump_fd+0x3c>
    b540:	add	r5, r5, #12
    b544:	cmp	r5, #49152	; 0xc000
    b548:	beq	b570 <rb_dump_fd+0xac>
    b54c:	ldr	r3, [r9]
    b550:	add	r2, r3, r5
    b554:	ldr	r2, [r2, #8]
    b558:	cmp	r2, #0
    b55c:	beq	b540 <rb_dump_fd+0x7c>
    b560:	ldr	r4, [r3, r5]
    b564:	cmp	r4, #0
    b568:	bne	b50c <rb_dump_fd+0x48>
    b56c:	b	b540 <rb_dump_fd+0x7c>
    b570:	ldrd	r4, [sp]
    b574:	ldrd	r6, [sp, #8]
    b578:	ldrd	r8, [sp, #16]
    b57c:	ldr	sl, [sp, #24]
    b580:	add	sp, sp, #28
    b584:	pop	{pc}		; (ldr pc, [sp], #4)
    b588:	.word	0x0001db14
    b58c:	.word	0x000003b8
    b590:	.word	0x0000c928

0000b594 <rb_note>:
    b594:	strd	r4, [sp, #-16]!
    b598:	str	r6, [sp, #8]
    b59c:	str	lr, [sp, #12]
    b5a0:	subs	r4, r0, #0
    b5a4:	beq	b5e0 <rb_note+0x4c>
    b5a8:	mov	r5, r1
    b5ac:	ldr	r0, [r4, #24]
    b5b0:	cmp	r0, #0
    b5b4:	beq	b5bc <rb_note+0x28>
    b5b8:	bl	46a8 <free@plt>
    b5bc:	mov	r0, #128	; 0x80
    b5c0:	bl	4954 <malloc@plt>
    b5c4:	subs	r6, r0, #0
    b5c8:	beq	b5f0 <rb_note+0x5c>
    b5cc:	mov	r2, #128	; 0x80
    b5d0:	mov	r1, r5
    b5d4:	mov	r0, r6
    b5d8:	bl	4654 <rb_strlcpy@plt>
    b5dc:	str	r6, [r4, #24]
    b5e0:	ldrd	r4, [sp]
    b5e4:	ldr	r6, [sp, #8]
    b5e8:	add	sp, sp, #12
    b5ec:	pop	{pc}		; (ldr pc, [sp], #4)
    b5f0:	bl	4930 <rb_outofmemory@plt>

0000b5f4 <rb_set_type>:
    b5f4:	strb	r1, [r0, #17]
    b5f8:	bx	lr

0000b5fc <rb_get_type>:
    b5fc:	ldrb	r0, [r0, #17]
    b600:	bx	lr

0000b604 <rb_fd_ssl>:
    b604:	cmp	r0, #0
    b608:	ldrbne	r0, [r0, #17]
    b60c:	ubfxne	r0, r0, #5, #1
    b610:	moveq	r0, #0
    b614:	bx	lr

0000b618 <rb_get_fd>:
    b618:	cmp	r0, #0
    b61c:	ldrne	r0, [r0, #12]
    b620:	mvneq	r0, #0
    b624:	bx	lr

0000b628 <rb_get_sockerr>:
    b628:	strd	r4, [sp, #-16]!
    b62c:	str	r6, [sp, #8]
    b630:	str	lr, [sp, #12]
    b634:	sub	sp, sp, #16
    b638:	mov	r3, #0
    b63c:	str	r3, [sp, #12]
    b640:	mov	r3, #4
    b644:	str	r3, [sp, #8]
    b648:	ldrb	r3, [r0, #17]
    b64c:	tst	r3, #4
    b650:	beq	b6b4 <rb_get_sockerr+0x8c>
    b654:	mov	r5, r0
    b658:	bl	4c90 <__errno_location@plt>
    b65c:	mov	r6, r0
    b660:	ldr	r4, [r0]
    b664:	mov	r0, r5
    b668:	bl	4498 <rb_get_fd@plt>
    b66c:	add	r3, sp, #8
    b670:	str	r3, [sp]
    b674:	add	r3, sp, #12
    b678:	mov	r2, #4
    b67c:	mov	r1, #1
    b680:	bl	4c24 <getsockopt@plt>
    b684:	cmp	r0, #0
    b688:	bne	b698 <rb_get_sockerr+0x70>
    b68c:	ldr	r3, [sp, #12]
    b690:	cmp	r3, #0
    b694:	movne	r4, r3
    b698:	str	r4, [r6]
    b69c:	mov	r0, r4
    b6a0:	add	sp, sp, #16
    b6a4:	ldrd	r4, [sp]
    b6a8:	ldr	r6, [sp, #8]
    b6ac:	add	sp, sp, #12
    b6b0:	pop	{pc}		; (ldr pc, [sp], #4)
    b6b4:	bl	4c90 <__errno_location@plt>
    b6b8:	ldr	r4, [r0]
    b6bc:	b	b69c <rb_get_sockerr+0x74>

0000b6c0 <rb_bind>:
    b6c0:	strd	r4, [sp, #-16]!
    b6c4:	str	r6, [sp, #8]
    b6c8:	str	lr, [sp, #12]
    b6cc:	sub	sp, sp, #16
    b6d0:	mov	r4, r0
    b6d4:	mov	r6, r1
    b6d8:	mov	r1, #1
    b6dc:	str	r1, [sp, #12]
    b6e0:	mov	r3, #4
    b6e4:	str	r3, [sp]
    b6e8:	add	r3, sp, #12
    b6ec:	mov	r2, #2
    b6f0:	ldr	r0, [r0, #12]
    b6f4:	bl	4c48 <setsockopt@plt>
    b6f8:	subs	r5, r0, #0
    b6fc:	bne	b738 <rb_bind+0x78>
    b700:	ldrh	r3, [r6]
    b704:	cmp	r3, #2
    b708:	moveq	r2, #16
    b70c:	movne	r2, #28
    b710:	mov	r1, r6
    b714:	ldr	r0, [r4, #12]
    b718:	bl	48b8 <bind@plt>
    b71c:	mov	r5, r0
    b720:	mov	r0, r5
    b724:	add	sp, sp, #16
    b728:	ldrd	r4, [sp]
    b72c:	ldr	r6, [sp, #8]
    b730:	add	sp, sp, #12
    b734:	pop	{pc}		; (ldr pc, [sp], #4)
    b738:	ldr	r6, [r4, #12]
    b73c:	mov	r0, r4
    b740:	bl	4a38 <rb_get_sockerr@plt>
    b744:	bl	4354 <strerror@plt>
    b748:	mov	r2, r0
    b74c:	mov	r1, r6
    b750:	ldr	r0, [pc, #8]	; b760 <rb_bind+0xa0>
    b754:	add	r0, pc, r0
    b758:	bl	48c4 <rb_lib_log@plt>
    b75c:	b	b720 <rb_bind+0x60>
    b760:	.word	0x0000b564

0000b764 <rb_get_fde>:
    b764:	ldr	r1, [pc, #124]	; b7e8 <rb_get_fde+0x84>
    b768:	add	r1, pc, r1
    b76c:	subs	r2, r0, #0
    b770:	blt	b7d8 <rb_get_fde+0x74>
    b774:	asr	r3, r2, #24
    b778:	eor	r3, r3, r2, asr #12
    b77c:	eor	r3, r3, r2
    b780:	ubfx	r3, r3, #0, #12
    b784:	ldr	r0, [pc, #96]	; b7ec <rb_get_fde+0x88>
    b788:	ldr	r1, [r1, r0]
    b78c:	ldr	r1, [r1]
    b790:	add	r3, r3, r3, lsl #1
    b794:	ldr	r0, [r1, r3, lsl #2]
    b798:	cmp	r0, #0
    b79c:	beq	b7d0 <rb_get_fde+0x6c>
    b7a0:	ldr	r3, [r0]
    b7a4:	ldr	r1, [r3, #12]
    b7a8:	cmp	r2, r1
    b7ac:	beq	b7e0 <rb_get_fde+0x7c>
    b7b0:	ldr	r0, [r0, #8]
    b7b4:	cmp	r0, #0
    b7b8:	beq	b7d4 <rb_get_fde+0x70>
    b7bc:	ldr	r3, [r0]
    b7c0:	ldr	r1, [r3, #12]
    b7c4:	cmp	r2, r1
    b7c8:	bne	b7b0 <rb_get_fde+0x4c>
    b7cc:	mov	r0, r3
    b7d0:	bx	lr
    b7d4:	bx	lr
    b7d8:	mov	r0, #0
    b7dc:	bx	lr
    b7e0:	mov	r0, r3
    b7e4:	bx	lr
    b7e8:	.word	0x0001d890
    b7ec:	.word	0x000003b8

0000b7f0 <rb_read>:
    b7f0:	cmp	r0, #0
    b7f4:	beq	b840 <rb_read+0x50>
    b7f8:	str	r4, [sp, #-8]!
    b7fc:	str	lr, [sp, #4]
    b800:	ldrb	r3, [r0, #17]
    b804:	tst	r3, #32
    b808:	bne	b828 <rb_read+0x38>
    b80c:	tst	r3, #4
    b810:	bne	b830 <rb_read+0x40>
    b814:	ldr	r0, [r0, #12]
    b818:	bl	46c0 <read@plt>
    b81c:	ldr	r4, [sp]
    b820:	add	sp, sp, #4
    b824:	pop	{pc}		; (ldr pc, [sp], #4)
    b828:	bl	e170 <rb_ssl_read>
    b82c:	b	b81c <rb_read+0x2c>
    b830:	mov	r3, #0
    b834:	ldr	r0, [r0, #12]
    b838:	bl	4540 <recv@plt>
    b83c:	b	b81c <rb_read+0x2c>
    b840:	mov	r0, #0
    b844:	bx	lr

0000b848 <rb_write>:
    b848:	cmp	r0, #0
    b84c:	beq	b898 <rb_write+0x50>
    b850:	str	r4, [sp, #-8]!
    b854:	str	lr, [sp, #4]
    b858:	ldrb	r3, [r0, #17]
    b85c:	tst	r3, #32
    b860:	bne	b880 <rb_write+0x38>
    b864:	tst	r3, #4
    b868:	bne	b888 <rb_write+0x40>
    b86c:	ldr	r0, [r0, #12]
    b870:	bl	46d8 <write@plt>
    b874:	ldr	r4, [sp]
    b878:	add	sp, sp, #4
    b87c:	pop	{pc}		; (ldr pc, [sp], #4)
    b880:	bl	e198 <rb_ssl_write>
    b884:	b	b874 <rb_write+0x2c>
    b888:	mov	r3, #16384	; 0x4000
    b88c:	ldr	r0, [r0, #12]
    b890:	bl	4a44 <send@plt>
    b894:	b	b874 <rb_write+0x2c>
    b898:	mov	r0, #0
    b89c:	bx	lr

0000b8a0 <rb_writev>:
    b8a0:	strd	r4, [sp, #-20]!	; 0xffffffec
    b8a4:	strd	r6, [sp, #8]
    b8a8:	str	lr, [sp, #16]
    b8ac:	sub	sp, sp, #36	; 0x24
    b8b0:	subs	r6, r0, #0
    b8b4:	beq	b8f0 <rb_writev+0x50>
    b8b8:	ldrb	r3, [r6, #17]
    b8bc:	tst	r3, #32
    b8c0:	bne	b904 <rb_writev+0x64>
    b8c4:	tst	r3, #4
    b8c8:	bne	b950 <rb_writev+0xb0>
    b8cc:	ldr	r0, [r6, #12]
    b8d0:	bl	463c <writev@plt>
    b8d4:	mov	r5, r0
    b8d8:	mov	r0, r5
    b8dc:	add	sp, sp, #36	; 0x24
    b8e0:	ldrd	r4, [sp]
    b8e4:	ldrd	r6, [sp, #8]
    b8e8:	add	sp, sp, #16
    b8ec:	pop	{pc}		; (ldr pc, [sp], #4)
    b8f0:	bl	4c90 <__errno_location@plt>
    b8f4:	mov	r3, #9
    b8f8:	str	r3, [r0]
    b8fc:	mvn	r5, #0
    b900:	b	b8d8 <rb_writev+0x38>
    b904:	mov	r7, r2
    b908:	cmp	r2, #0
    b90c:	beq	b98c <rb_writev+0xec>
    b910:	add	r4, r1, #8
    b914:	mov	r5, #0
    b918:	ldr	r2, [r4, #-4]
    b91c:	ldr	r1, [r4, #-8]
    b920:	mov	r0, r6
    b924:	bl	460c <rb_write@plt>
    b928:	cmp	r0, #0
    b92c:	ble	b944 <rb_writev+0xa4>
    b930:	add	r5, r5, r0
    b934:	add	r4, r4, #8
    b938:	subs	r7, r7, #1
    b93c:	bne	b918 <rb_writev+0x78>
    b940:	b	b8d8 <rb_writev+0x38>
    b944:	cmp	r5, #0
    b948:	movle	r5, r0
    b94c:	b	b8d8 <rb_writev+0x38>
    b950:	mov	r0, #0
    b954:	str	r0, [sp, #4]
    b958:	add	r3, sp, #4
    b95c:	str	r0, [sp, #8]
    b960:	str	r0, [sp, #20]
    b964:	str	r0, [sp, #24]
    b968:	str	r0, [sp, #28]
    b96c:	str	r1, [sp, #12]
    b970:	str	r2, [sp, #16]
    b974:	mov	r2, #16384	; 0x4000
    b978:	mov	r1, r3
    b97c:	ldr	r0, [r6, #12]
    b980:	bl	46b4 <sendmsg@plt>
    b984:	mov	r5, r0
    b988:	b	b8d8 <rb_writev+0x38>
    b98c:	mov	r5, #0
    b990:	b	b8d8 <rb_writev+0x38>

0000b994 <rb_inet_ntop>:
    b994:	strd	r4, [sp, #-36]!	; 0xffffffdc
    b998:	strd	r6, [sp, #8]
    b99c:	strd	r8, [sp, #16]
    b9a0:	strd	sl, [sp, #24]
    b9a4:	str	lr, [sp, #32]
    b9a8:	sub	sp, sp, #92	; 0x5c
    b9ac:	mov	r8, r1
    b9b0:	str	r2, [sp]
    b9b4:	mov	r9, r3
    b9b8:	cmp	r0, #2
    b9bc:	beq	ba30 <rb_inet_ntop+0x9c>
    b9c0:	cmp	r0, #10
    b9c4:	movne	r0, #0
    b9c8:	bne	ba50 <rb_inet_ntop+0xbc>
    b9cc:	ldr	r3, [r1]
    b9d0:	cmp	r3, #0
    b9d4:	bne	ba6c <rb_inet_ntop+0xd8>
    b9d8:	ldr	r3, [r1, #4]
    b9dc:	cmp	r3, #0
    b9e0:	bne	ba6c <rb_inet_ntop+0xd8>
    b9e4:	ldr	r3, [r1, #8]
    b9e8:	cmn	r3, #65536	; 0x10000
    b9ec:	beq	ba0c <rb_inet_ntop+0x78>
    b9f0:	ldr	r3, [r1, #8]
    b9f4:	cmp	r3, #0
    b9f8:	bne	ba6c <rb_inet_ntop+0xd8>
    b9fc:	ldr	r3, [r8, #12]
    ba00:	rev	r3, r3
    ba04:	cmp	r3, #1
    ba08:	bls	ba6c <rb_inet_ntop+0xd8>
    ba0c:	cmp	r9, #15
    ba10:	movls	r0, #0
    ba14:	bls	ba50 <rb_inet_ntop+0xbc>
    ba18:	add	r0, r8, #12
    ba1c:	bl	a15c <inetntoa>
    ba20:	mov	r1, r0
    ba24:	ldr	r0, [sp]
    ba28:	bl	4840 <strcpy@plt>
    ba2c:	b	ba50 <rb_inet_ntop+0xbc>
    ba30:	cmp	r3, #15
    ba34:	movls	r0, #0
    ba38:	bls	ba50 <rb_inet_ntop+0xbc>
    ba3c:	mov	r0, r1
    ba40:	bl	a15c <inetntoa>
    ba44:	mov	r1, r0
    ba48:	ldr	r0, [sp]
    ba4c:	bl	4840 <strcpy@plt>
    ba50:	add	sp, sp, #92	; 0x5c
    ba54:	ldrd	r4, [sp]
    ba58:	ldrd	r6, [sp, #8]
    ba5c:	ldrd	r8, [sp, #16]
    ba60:	ldrd	sl, [sp, #24]
    ba64:	add	sp, sp, #32
    ba68:	pop	{pc}		; (ldr pc, [sp], #4)
    ba6c:	mov	r0, #0
    ba70:	mov	r1, #0
    ba74:	strd	r0, [sp, #8]
    ba78:	strd	r0, [sp, #16]
    ba7c:	strd	r0, [sp, #24]
    ba80:	strd	r0, [sp, #32]
    ba84:	mov	r3, #0
    ba88:	add	ip, r8, #1
    ba8c:	add	r2, r3, r3, lsr #31
    ba90:	asr	r2, r2, #1
    ba94:	add	r1, sp, #88	; 0x58
    ba98:	add	r2, r1, r2, lsl #2
    ba9c:	ldrb	r0, [r8, r3]
    baa0:	ldrb	r1, [ip, r3]
    baa4:	orr	r1, r1, r0, lsl #8
    baa8:	str	r1, [r2, #-80]	; 0xffffffb0
    baac:	add	r3, r3, #2
    bab0:	cmp	r3, #16
    bab4:	bne	ba8c <rb_inet_ntop+0xf8>
    bab8:	add	ip, sp, #8
    babc:	mov	r7, #0
    bac0:	mvn	r6, #0
    bac4:	mov	r1, r7
    bac8:	mov	r3, r6
    bacc:	mov	r2, r7
    bad0:	mov	lr, r6
    bad4:	b	bb18 <rb_inet_ntop+0x184>
    bad8:	cmn	r3, #1
    badc:	beq	bb0c <rb_inet_ntop+0x178>
    bae0:	cmn	r6, #1
    bae4:	movne	r0, #0
    bae8:	moveq	r0, #1
    baec:	cmp	r1, r7
    baf0:	orrgt	r0, r0, #1
    baf4:	cmp	r0, #0
    baf8:	moveq	r3, lr
    bafc:	beq	bb0c <rb_inet_ntop+0x178>
    bb00:	mov	r7, r1
    bb04:	mov	r6, r3
    bb08:	mov	r3, lr
    bb0c:	add	r2, r2, #1
    bb10:	cmp	r2, #8
    bb14:	beq	bb3c <rb_inet_ntop+0x1a8>
    bb18:	ldr	r0, [ip], #4
    bb1c:	cmp	r0, #0
    bb20:	bne	bad8 <rb_inet_ntop+0x144>
    bb24:	cmn	r3, #1
    bb28:	addne	r1, r1, #1
    bb2c:	bne	bb0c <rb_inet_ntop+0x178>
    bb30:	mov	r3, r2
    bb34:	mov	r1, #1
    bb38:	b	bb0c <rb_inet_ntop+0x178>
    bb3c:	cmn	r3, #1
    bb40:	beq	bb68 <rb_inet_ntop+0x1d4>
    bb44:	cmn	r6, #1
    bb48:	movne	r2, #0
    bb4c:	moveq	r2, #1
    bb50:	cmp	r7, r1
    bb54:	orrlt	r2, r2, #1
    bb58:	cmp	r2, #0
    bb5c:	movne	r7, r1
    bb60:	cmp	r2, #0
    bb64:	movne	r6, r3
    bb68:	cmp	r7, #1
    bb6c:	movgt	r3, #0
    bb70:	movle	r3, #1
    bb74:	cmn	r6, #1
    bb78:	moveq	r3, #0
    bb7c:	cmp	r3, #0
    bb80:	mvnne	r6, #0
    bb84:	add	r4, sp, #40	; 0x28
    bb88:	mov	r5, #0
    bb8c:	add	fp, sp, #8
    bb90:	ldr	r3, [pc, #296]	; bcc0 <rb_inet_ntop+0x32c>
    bb94:	add	r3, pc, r3
    bb98:	str	r3, [sp, #4]
    bb9c:	mov	sl, #58	; 0x3a
    bba0:	b	bbec <rb_inet_ntop+0x258>
    bba4:	add	r3, r7, r6
    bba8:	cmp	r3, r5
    bbac:	ble	bc08 <rb_inet_ntop+0x274>
    bbb0:	cmp	r6, r5
    bbb4:	bne	bbe0 <rb_inet_ntop+0x24c>
    bbb8:	cmp	r5, #0
    bbbc:	moveq	r3, #48	; 0x30
    bbc0:	strbeq	r3, [r4], #1
    bbc4:	strb	sl, [r4], #1
    bbc8:	b	bbe0 <rb_inet_ntop+0x24c>
    bbcc:	ldr	r2, [fp, r5, lsl #2]
    bbd0:	ldr	r1, [sp, #4]
    bbd4:	mov	r0, r4
    bbd8:	bl	4ca8 <sprintf@plt>
    bbdc:	add	r4, r4, r0
    bbe0:	add	r5, r5, #1
    bbe4:	cmp	r5, #8
    bbe8:	beq	bc7c <rb_inet_ntop+0x2e8>
    bbec:	cmp	r6, r5
    bbf0:	movgt	r3, #0
    bbf4:	movle	r3, #1
    bbf8:	cmn	r6, #1
    bbfc:	moveq	r3, #0
    bc00:	cmp	r3, #0
    bc04:	bne	bba4 <rb_inet_ntop+0x210>
    bc08:	cmp	r5, #0
    bc0c:	beq	bbcc <rb_inet_ntop+0x238>
    bc10:	strb	sl, [r4], #1
    bc14:	cmp	r5, #6
    bc18:	cmpeq	r6, #0
    bc1c:	bne	bbcc <rb_inet_ntop+0x238>
    bc20:	cmp	r7, #6
    bc24:	beq	bc40 <rb_inet_ntop+0x2ac>
    bc28:	cmp	r7, #5
    bc2c:	bne	bbcc <rb_inet_ntop+0x238>
    bc30:	ldr	r2, [sp, #28]
    bc34:	movw	r3, #65535	; 0xffff
    bc38:	cmp	r2, r3
    bc3c:	bne	bbcc <rb_inet_ntop+0x238>
    bc40:	add	r0, r8, #12
    bc44:	add	r3, sp, #88	; 0x58
    bc48:	sub	r3, r3, r4
    bc4c:	sub	r3, r3, #2
    bc50:	cmp	r3, #15
    bc54:	movls	r0, #0
    bc58:	bls	ba50 <rb_inet_ntop+0xbc>
    bc5c:	bl	a15c <inetntoa>
    bc60:	mov	r1, r0
    bc64:	mov	r0, r4
    bc68:	bl	4840 <strcpy@plt>
    bc6c:	mov	r0, r4
    bc70:	bl	4798 <strlen@plt>
    bc74:	add	r4, r4, r0
    bc78:	b	bc84 <rb_inet_ntop+0x2f0>
    bc7c:	cmn	r6, #1
    bc80:	beq	bc94 <rb_inet_ntop+0x300>
    bc84:	add	r6, r7, r6
    bc88:	cmp	r6, #8
    bc8c:	moveq	r3, #58	; 0x3a
    bc90:	strbeq	r3, [r4], #1
    bc94:	mov	r3, #0
    bc98:	strb	r3, [r4], #1
    bc9c:	add	r2, sp, #40	; 0x28
    bca0:	sub	r2, r4, r2
    bca4:	cmp	r9, r2
    bca8:	movcc	r0, #0
    bcac:	bcc	ba50 <rb_inet_ntop+0xbc>
    bcb0:	add	r1, sp, #40	; 0x28
    bcb4:	ldr	r0, [sp]
    bcb8:	bl	47bc <memcpy@plt>
    bcbc:	b	ba50 <rb_inet_ntop+0xbc>
    bcc0:	.word	0x0000b164

0000bcc4 <rb_inet_ntop_sock>:
    bcc4:	str	r4, [sp, #-8]!
    bcc8:	str	lr, [sp, #4]
    bccc:	ldrh	ip, [r0]
    bcd0:	cmp	ip, #2
    bcd4:	beq	bcfc <rb_inet_ntop_sock+0x38>
    bcd8:	cmp	ip, #10
    bcdc:	movne	r0, #0
    bce0:	bne	bd10 <rb_inet_ntop_sock+0x4c>
    bce4:	mov	r3, r2
    bce8:	mov	r2, r1
    bcec:	add	r1, r0, #8
    bcf0:	mov	r0, #10
    bcf4:	bl	48f4 <rb_inet_ntop@plt>
    bcf8:	b	bd10 <rb_inet_ntop_sock+0x4c>
    bcfc:	mov	r3, r2
    bd00:	mov	r2, r1
    bd04:	add	r1, r0, #4
    bd08:	mov	r0, #2
    bd0c:	bl	48f4 <rb_inet_ntop@plt>
    bd10:	ldr	r4, [sp]
    bd14:	add	sp, sp, #4
    bd18:	pop	{pc}		; (ldr pc, [sp], #4)

0000bd1c <rb_inet_pton>:
    bd1c:	strd	r4, [sp, #-12]!
    bd20:	str	lr, [sp, #8]
    bd24:	sub	sp, sp, #60	; 0x3c
    bd28:	mov	r4, r1
    bd2c:	mov	r5, r2
    bd30:	cmp	r0, #2
    bd34:	beq	bd80 <rb_inet_pton+0x64>
    bd38:	cmp	r0, #10
    bd3c:	mvnne	r0, #0
    bd40:	bne	bd8c <rb_inet_pton+0x70>
    bd44:	mov	r1, r2
    bd48:	mov	r0, r4
    bd4c:	bl	a268 <inet_pton4>
    bd50:	cmp	r0, #0
    bd54:	beq	bd9c <rb_inet_pton+0x80>
    bd58:	mov	r2, r4
    bd5c:	ldr	r1, [pc, #72]	; bdac <rb_inet_pton+0x90>
    bd60:	add	r1, pc, r1
    bd64:	mov	r4, sp
    bd68:	mov	r0, r4
    bd6c:	bl	4ca8 <sprintf@plt>
    bd70:	mov	r1, r5
    bd74:	mov	r0, r4
    bd78:	bl	a480 <inet_pton6>
    bd7c:	b	bd8c <rb_inet_pton+0x70>
    bd80:	mov	r1, r2
    bd84:	mov	r0, r4
    bd88:	bl	a268 <inet_pton4>
    bd8c:	add	sp, sp, #60	; 0x3c
    bd90:	ldrd	r4, [sp]
    bd94:	add	sp, sp, #8
    bd98:	pop	{pc}		; (ldr pc, [sp], #4)
    bd9c:	mov	r1, r5
    bda0:	mov	r0, r4
    bda4:	bl	a480 <inet_pton6>
    bda8:	b	bd8c <rb_inet_pton+0x70>
    bdac:	.word	0x0000af9c

0000bdb0 <rb_inet_pton_sock>:
    bdb0:	strd	r4, [sp, #-16]!
    bdb4:	str	r6, [sp, #8]
    bdb8:	str	lr, [sp, #12]
    bdbc:	mov	r5, r0
    bdc0:	mov	r4, r1
    bdc4:	mov	r2, #128	; 0x80
    bdc8:	mov	r1, #0
    bdcc:	mov	r0, r4
    bdd0:	bl	45dc <memset@plt>
    bdd4:	add	r2, r4, #4
    bdd8:	mov	r1, r5
    bddc:	mov	r0, #2
    bde0:	bl	45e8 <rb_inet_pton@plt>
    bde4:	cmp	r0, #0
    bde8:	beq	be10 <rb_inet_pton_sock+0x60>
    bdec:	mov	r3, #2
    bdf0:	strh	r3, [r4]
    bdf4:	mov	r3, #0
    bdf8:	strh	r3, [r4, #2]
    bdfc:	mov	r0, #1
    be00:	ldrd	r4, [sp]
    be04:	ldr	r6, [sp, #8]
    be08:	add	sp, sp, #12
    be0c:	pop	{pc}		; (ldr pc, [sp], #4)
    be10:	add	r2, r4, #8
    be14:	mov	r1, r5
    be18:	mov	r0, #10
    be1c:	bl	45e8 <rb_inet_pton@plt>
    be20:	cmp	r0, #0
    be24:	beq	be00 <rb_inet_pton_sock+0x50>
    be28:	mov	r3, #10
    be2c:	strh	r3, [r4]
    be30:	mov	r3, #0
    be34:	strh	r3, [r4, #2]
    be38:	mov	r0, #1
    be3c:	b	be00 <rb_inet_pton_sock+0x50>

0000be40 <rb_get_iotype>:
    be40:	ldr	r0, [pc, #8]	; be50 <rb_get_iotype+0x10>
    be44:	add	r0, pc, r0
    be48:	add	r0, r0, #56	; 0x38
    be4c:	bx	lr
    be50:	.word	0x0002fb5c

0000be54 <rb_io_sched_event>:
    be54:	strd	r4, [sp, #-16]!
    be58:	str	r6, [sp, #8]
    be5c:	str	lr, [sp, #12]
    be60:	subs	r4, r0, #0
    be64:	moveq	r0, #0
    be68:	beq	bec4 <rb_io_sched_event+0x70>
    be6c:	ldr	r3, [pc, #96]	; bed4 <rb_io_sched_event+0x80>
    be70:	add	r3, pc, r3
    be74:	ldr	r3, [r3, #52]	; 0x34
    be78:	cmp	r3, #0
    be7c:	moveq	r0, #0
    be80:	beq	bec4 <rb_io_sched_event+0x70>
    be84:	ldr	r2, [pc, #76]	; bed8 <rb_io_sched_event+0x84>
    be88:	add	r2, pc, r2
    be8c:	ldr	r2, [r2, #40]	; 0x28
    be90:	cmp	r2, #0
    be94:	moveq	r0, #0
    be98:	beq	bec4 <rb_io_sched_event+0x70>
    be9c:	mov	r5, r1
    bea0:	blx	r3
    bea4:	cmp	r0, #0
    bea8:	beq	bec4 <rb_io_sched_event+0x70>
    beac:	ldr	r3, [pc, #40]	; bedc <rb_io_sched_event+0x88>
    beb0:	add	r3, pc, r3
    beb4:	ldr	r3, [r3, #40]	; 0x28
    beb8:	mov	r1, r5
    bebc:	mov	r0, r4
    bec0:	blx	r3
    bec4:	ldrd	r4, [sp]
    bec8:	ldr	r6, [sp, #8]
    becc:	add	sp, sp, #12
    bed0:	pop	{pc}		; (ldr pc, [sp], #4)
    bed4:	.word	0x0002fb30
    bed8:	.word	0x0002fb18
    bedc:	.word	0x0002faf0

0000bee0 <rb_io_unsched_event>:
    bee0:	str	r4, [sp, #-8]!
    bee4:	str	lr, [sp, #4]
    bee8:	subs	r4, r0, #0
    beec:	beq	bf38 <rb_io_unsched_event+0x58>
    bef0:	ldr	r3, [pc, #76]	; bf44 <rb_io_unsched_event+0x64>
    bef4:	add	r3, pc, r3
    bef8:	ldr	r3, [r3, #52]	; 0x34
    befc:	cmp	r3, #0
    bf00:	beq	bf38 <rb_io_unsched_event+0x58>
    bf04:	ldr	r2, [pc, #60]	; bf48 <rb_io_unsched_event+0x68>
    bf08:	add	r2, pc, r2
    bf0c:	ldr	r2, [r2, #44]	; 0x2c
    bf10:	cmp	r2, #0
    bf14:	beq	bf38 <rb_io_unsched_event+0x58>
    bf18:	blx	r3
    bf1c:	cmp	r0, #0
    bf20:	beq	bf38 <rb_io_unsched_event+0x58>
    bf24:	ldr	r3, [pc, #32]	; bf4c <rb_io_unsched_event+0x6c>
    bf28:	add	r3, pc, r3
    bf2c:	ldr	r3, [r3, #44]	; 0x2c
    bf30:	mov	r0, r4
    bf34:	blx	r3
    bf38:	ldr	r4, [sp]
    bf3c:	add	sp, sp, #4
    bf40:	pop	{pc}		; (ldr pc, [sp], #4)
    bf44:	.word	0x0002faac
    bf48:	.word	0x0002fa98
    bf4c:	.word	0x0002fa78

0000bf50 <rb_io_supports_event>:
    bf50:	ldr	r3, [pc, #44]	; bf84 <rb_io_supports_event+0x34>
    bf54:	add	r3, pc, r3
    bf58:	ldr	r3, [r3, #52]	; 0x34
    bf5c:	cmp	r3, #0
    bf60:	beq	bf7c <rb_io_supports_event+0x2c>
    bf64:	str	r4, [sp, #-8]!
    bf68:	str	lr, [sp, #4]
    bf6c:	blx	r3
    bf70:	ldr	r4, [sp]
    bf74:	add	sp, sp, #4
    bf78:	pop	{pc}		; (ldr pc, [sp], #4)
    bf7c:	mov	r0, #0
    bf80:	bx	lr
    bf84:	.word	0x0002fa4c

0000bf88 <rb_io_init_event>:
    bf88:	str	r4, [sp, #-8]!
    bf8c:	str	lr, [sp, #4]
    bf90:	ldr	r3, [pc, #24]	; bfb0 <rb_io_init_event+0x28>
    bf94:	add	r3, pc, r3
    bf98:	ldr	r3, [r3, #48]	; 0x30
    bf9c:	blx	r3
    bfa0:	bl	eb9c <rb_event_io_register_all>
    bfa4:	ldr	r4, [sp]
    bfa8:	add	sp, sp, #4
    bfac:	pop	{pc}		; (ldr pc, [sp], #4)
    bfb0:	.word	0x0002fa0c

0000bfb4 <rb_init_netio>:
    bfb4:	strd	r4, [sp, #-16]!
    bfb8:	str	r6, [sp, #8]
    bfbc:	str	lr, [sp, #12]
    bfc0:	ldr	r5, [pc, #508]	; c1c4 <rb_init_netio+0x210>
    bfc4:	add	r5, pc, r5
    bfc8:	ldr	r0, [pc, #504]	; c1c8 <rb_init_netio+0x214>
    bfcc:	add	r0, pc, r0
    bfd0:	bl	454c <getenv@plt>
    bfd4:	mov	r4, r0
    bfd8:	mov	r1, #49152	; 0xc000
    bfdc:	mov	r0, #1
    bfe0:	bl	45a0 <calloc@plt>
    bfe4:	cmp	r0, #0
    bfe8:	beq	c0bc <rb_init_netio+0x108>
    bfec:	ldr	r3, [pc, #472]	; c1cc <rb_init_netio+0x218>
    bff0:	ldr	r3, [r5, r3]
    bff4:	str	r0, [r3]
    bff8:	bl	d944 <rb_init_ssl>
    bffc:	cmp	r4, #0
    c000:	beq	c0e4 <rb_init_netio+0x130>
    c004:	mov	r1, r4
    c008:	ldr	r0, [pc, #448]	; c1d0 <rb_init_netio+0x21c>
    c00c:	add	r0, pc, r0
    c010:	bl	4c84 <strcmp@plt>
    c014:	cmp	r0, #0
    c018:	beq	c0c0 <rb_init_netio+0x10c>
    c01c:	mov	r1, r4
    c020:	ldr	r0, [pc, #428]	; c1d4 <rb_init_netio+0x220>
    c024:	add	r0, pc, r0
    c028:	bl	4c84 <strcmp@plt>
    c02c:	cmp	r0, #0
    c030:	beq	c100 <rb_init_netio+0x14c>
    c034:	mov	r1, r4
    c038:	ldr	r0, [pc, #408]	; c1d8 <rb_init_netio+0x224>
    c03c:	add	r0, pc, r0
    c040:	bl	4c84 <strcmp@plt>
    c044:	cmp	r0, #0
    c048:	beq	c110 <rb_init_netio+0x15c>
    c04c:	mov	r1, r4
    c050:	ldr	r0, [pc, #388]	; c1dc <rb_init_netio+0x228>
    c054:	add	r0, pc, r0
    c058:	bl	4c84 <strcmp@plt>
    c05c:	cmp	r0, #0
    c060:	beq	c120 <rb_init_netio+0x16c>
    c064:	mov	r1, r4
    c068:	ldr	r0, [pc, #368]	; c1e0 <rb_init_netio+0x22c>
    c06c:	add	r0, pc, r0
    c070:	bl	4c84 <strcmp@plt>
    c074:	cmp	r0, #0
    c078:	beq	c130 <rb_init_netio+0x17c>
    c07c:	mov	r1, r4
    c080:	ldr	r0, [pc, #348]	; c1e4 <rb_init_netio+0x230>
    c084:	add	r0, pc, r0
    c088:	bl	4c84 <strcmp@plt>
    c08c:	cmp	r0, #0
    c090:	beq	c140 <rb_init_netio+0x18c>
    c094:	mov	r1, r4
    c098:	ldr	r0, [pc, #328]	; c1e8 <rb_init_netio+0x234>
    c09c:	add	r0, pc, r0
    c0a0:	bl	4c84 <strcmp@plt>
    c0a4:	cmp	r0, #0
    c0a8:	bne	c0cc <rb_init_netio+0x118>
    c0ac:	bl	ac7c <try_select>
    c0b0:	cmp	r0, #0
    c0b4:	bne	c0cc <rb_init_netio+0x118>
    c0b8:	b	c0f0 <rb_init_netio+0x13c>
    c0bc:	bl	4930 <rb_outofmemory@plt>
    c0c0:	bl	a7e4 <try_epoll>
    c0c4:	cmp	r0, #0
    c0c8:	beq	c0f0 <rb_init_netio+0x13c>
    c0cc:	mov	r1, r4
    c0d0:	ldr	r0, [pc, #276]	; c1ec <rb_init_netio+0x238>
    c0d4:	add	r0, pc, r0
    c0d8:	bl	4c84 <strcmp@plt>
    c0dc:	cmp	r0, #0
    c0e0:	beq	c150 <rb_init_netio+0x19c>
    c0e4:	bl	a710 <try_kqueue>
    c0e8:	cmp	r0, #0
    c0ec:	bne	c160 <rb_init_netio+0x1ac>
    c0f0:	ldrd	r4, [sp]
    c0f4:	ldr	r6, [sp, #8]
    c0f8:	add	sp, sp, #12
    c0fc:	pop	{pc}		; (ldr pc, [sp], #4)
    c100:	bl	a710 <try_kqueue>
    c104:	cmp	r0, #0
    c108:	bne	c0cc <rb_init_netio+0x118>
    c10c:	b	c0f0 <rb_init_netio+0x13c>
    c110:	bl	a8b8 <try_ports>
    c114:	cmp	r0, #0
    c118:	bne	c0cc <rb_init_netio+0x118>
    c11c:	b	c0f0 <rb_init_netio+0x13c>
    c120:	bl	ab14 <try_poll>
    c124:	cmp	r0, #0
    c128:	bne	c0cc <rb_init_netio+0x118>
    c12c:	b	c0f0 <rb_init_netio+0x13c>
    c130:	bl	a98c <try_devpoll>
    c134:	cmp	r0, #0
    c138:	bne	c0cc <rb_init_netio+0x118>
    c13c:	b	c0f0 <rb_init_netio+0x13c>
    c140:	bl	aa40 <try_sigio>
    c144:	cmp	r0, #0
    c148:	bne	c0cc <rb_init_netio+0x118>
    c14c:	b	c0f0 <rb_init_netio+0x13c>
    c150:	bl	abc8 <try_win32>
    c154:	cmp	r0, #0
    c158:	bne	c0e4 <rb_init_netio+0x130>
    c15c:	b	c0f0 <rb_init_netio+0x13c>
    c160:	bl	a7e4 <try_epoll>
    c164:	cmp	r0, #0
    c168:	beq	c0f0 <rb_init_netio+0x13c>
    c16c:	bl	a8b8 <try_ports>
    c170:	cmp	r0, #0
    c174:	beq	c0f0 <rb_init_netio+0x13c>
    c178:	bl	a98c <try_devpoll>
    c17c:	cmp	r0, #0
    c180:	beq	c0f0 <rb_init_netio+0x13c>
    c184:	bl	aa40 <try_sigio>
    c188:	cmp	r0, #0
    c18c:	beq	c0f0 <rb_init_netio+0x13c>
    c190:	bl	ab14 <try_poll>
    c194:	cmp	r0, #0
    c198:	beq	c0f0 <rb_init_netio+0x13c>
    c19c:	bl	abc8 <try_win32>
    c1a0:	cmp	r0, #0
    c1a4:	beq	c0f0 <rb_init_netio+0x13c>
    c1a8:	bl	ac7c <try_select>
    c1ac:	cmp	r0, #0
    c1b0:	beq	c0f0 <rb_init_netio+0x13c>
    c1b4:	ldr	r0, [pc, #52]	; c1f0 <rb_init_netio+0x23c>
    c1b8:	add	r0, pc, r0
    c1bc:	bl	48c4 <rb_lib_log@plt>
    c1c0:	bl	4378 <abort@plt>
    c1c4:	.word	0x0001d034
    c1c8:	.word	0x0000ad3c
    c1cc:	.word	0x000003b8
    c1d0:	.word	0x0000abfc
    c1d4:	.word	0x0000abdc
    c1d8:	.word	0x0000abd4
    c1dc:	.word	0x0000abd4
    c1e0:	.word	0x0000abac
    c1e4:	.word	0x0000ab9c
    c1e8:	.word	0x0000ab9c
    c1ec:	.word	0x0000ab5c
    c1f0:	.word	0x0000ab64

0000c1f4 <rb_setselect>:
    c1f4:	str	r4, [sp, #-8]!
    c1f8:	str	lr, [sp, #4]
    c1fc:	ldr	ip, [pc, #20]	; c218 <rb_setselect+0x24>
    c200:	add	ip, pc, ip
    c204:	ldr	r4, [ip, #28]
    c208:	blx	r4
    c20c:	ldr	r4, [sp]
    c210:	add	sp, sp, #4
    c214:	pop	{pc}		; (ldr pc, [sp], #4)
    c218:	.word	0x0002f7a0

0000c21c <rb_close>:
    c21c:	strd	r4, [sp, #-24]!	; 0xffffffe8
    c220:	strd	r6, [sp, #8]
    c224:	str	r8, [sp, #16]
    c228:	str	lr, [sp, #20]
    c22c:	ldr	r6, [pc, #420]	; c3d8 <rb_close+0x1bc>
    c230:	add	r6, pc, r6
    c234:	subs	r4, r0, #0
    c238:	beq	c2c0 <rb_close+0xa4>
    c23c:	ldr	r8, [r4, #12]
    c240:	ldrb	r5, [r4, #17]
    c244:	ands	r7, r5, #16
    c248:	bne	c2d4 <rb_close+0xb8>
    c24c:	mov	r3, #0
    c250:	mov	r2, r3
    c254:	mov	r1, #3
    c258:	mov	r0, r4
    c25c:	bl	445c <rb_setselect@plt>
    c260:	mov	r3, #0
    c264:	mov	r2, r3
    c268:	mov	r1, r3
    c26c:	mov	r0, r4
    c270:	bl	439c <rb_settimeout@plt>
    c274:	ldr	r0, [r4, #52]	; 0x34
    c278:	cmp	r0, #0
    c27c:	beq	c284 <rb_close+0x68>
    c280:	bl	46a8 <free@plt>
    c284:	ldr	r0, [r4, #48]	; 0x30
    c288:	cmp	r0, #0
    c28c:	beq	c294 <rb_close+0x78>
    c290:	bl	46a8 <free@plt>
    c294:	ldr	r0, [r4, #24]
    c298:	cmp	r0, #0
    c29c:	beq	c2a4 <rb_close+0x88>
    c2a0:	bl	46a8 <free@plt>
    c2a4:	tst	r5, #32
    c2a8:	bne	c2e4 <rb_close+0xc8>
    c2ac:	ldrb	r3, [r4, #16]
    c2b0:	tst	r3, #1
    c2b4:	bne	c2f0 <rb_close+0xd4>
    c2b8:	cmp	r7, #0
    c2bc:	bne	c3c8 <rb_close+0x1ac>
    c2c0:	ldrd	r4, [sp]
    c2c4:	ldrd	r6, [sp, #8]
    c2c8:	ldr	r8, [sp, #16]
    c2cc:	add	sp, sp, #20
    c2d0:	pop	{pc}		; (ldr pc, [sp], #4)
    c2d4:	mov	r1, #0
    c2d8:	mov	r0, r8
    c2dc:	bl	4594 <listen@plt>
    c2e0:	b	c24c <rb_close+0x30>
    c2e4:	mov	r0, r4
    c2e8:	bl	d8c8 <rb_ssl_shutdown>
    c2ec:	b	c2ac <rb_close+0x90>
    c2f0:	ldr	r2, [r4, #12]
    c2f4:	ldr	r3, [pc, #224]	; c3dc <rb_close+0x1c0>
    c2f8:	ldr	r1, [r6, r3]
    c2fc:	asr	r3, r2, #24
    c300:	eor	r3, r3, r2, asr #12
    c304:	eor	r3, r3, r2
    c308:	ubfx	r3, r3, #0, #12
    c30c:	add	r3, r3, r3, lsl #1
    c310:	lsl	r3, r3, #2
    c314:	ldr	r0, [r1]
    c318:	add	r1, r0, r3
    c31c:	ldr	r2, [r4, #8]
    c320:	cmp	r2, #0
    c324:	ldrne	ip, [r4, #4]
    c328:	strne	ip, [r2, #4]
    c32c:	ldreq	r2, [r4, #4]
    c330:	streq	r2, [r1, #4]
    c334:	ldr	r2, [r4, #4]
    c338:	cmp	r2, #0
    c33c:	ldrne	r3, [r4, #8]
    c340:	strne	r3, [r2, #8]
    c344:	ldreq	r2, [r4, #8]
    c348:	streq	r2, [r0, r3]
    c34c:	mov	r3, #0
    c350:	str	r3, [r4, #4]
    c354:	ldr	r3, [pc, #132]	; c3e0 <rb_close+0x1c4>
    c358:	add	r3, pc, r3
    c35c:	ldr	r3, [r3, #100]	; 0x64
    c360:	str	r3, [r4, #8]
    c364:	cmp	r3, #0
    c368:	strne	r4, [r3, #4]
    c36c:	beq	c3a4 <rb_close+0x188>
    c370:	ldr	r3, [pc, #108]	; c3e4 <rb_close+0x1c8>
    c374:	add	r3, pc, r3
    c378:	str	r4, [r3, #100]	; 0x64
    c37c:	ldr	r2, [r1, #8]
    c380:	sub	r2, r2, #1
    c384:	str	r2, [r1, #8]
    c388:	ldr	r2, [r3, #108]	; 0x6c
    c38c:	add	r2, r2, #1
    c390:	str	r2, [r3, #108]	; 0x6c
    c394:	ldrb	r3, [r4, #16]
    c398:	bic	r3, r3, #1
    c39c:	strb	r3, [r4, #16]
    c3a0:	b	c2b8 <rb_close+0x9c>
    c3a4:	ldr	r3, [pc, #60]	; c3e8 <rb_close+0x1cc>
    c3a8:	add	r3, pc, r3
    c3ac:	ldr	r3, [r3, #104]	; 0x68
    c3b0:	cmp	r3, #0
    c3b4:	bne	c370 <rb_close+0x154>
    c3b8:	ldr	r3, [pc, #44]	; c3ec <rb_close+0x1d0>
    c3bc:	add	r3, pc, r3
    c3c0:	str	r4, [r3, #104]	; 0x68
    c3c4:	b	c370 <rb_close+0x154>
    c3c8:	mov	r1, #2
    c3cc:	mov	r0, r8
    c3d0:	bl	48ac <shutdown@plt>
    c3d4:	b	c2c0 <rb_close+0xa4>
    c3d8:	.word	0x0001cdc8
    c3dc:	.word	0x000003b8
    c3e0:	.word	0x0002f648
    c3e4:	.word	0x0002f62c
    c3e8:	.word	0x0002f5f8
    c3ec:	.word	0x0002f5e4

0000c3f0 <rb_select>:
    c3f0:	strd	r4, [sp, #-32]!	; 0xffffffe0
    c3f4:	strd	r6, [sp, #8]
    c3f8:	strd	r8, [sp, #16]
    c3fc:	str	sl, [sp, #24]
    c400:	str	lr, [sp, #28]
    c404:	ldr	r4, [pc, #216]	; c4e4 <rb_select+0xf4>
    c408:	add	r4, pc, r4
    c40c:	ldr	r3, [r4, #32]
    c410:	blx	r3
    c414:	mov	r8, r0
    c418:	ldr	r4, [r4, #100]	; 0x64
    c41c:	cmp	r4, #0
    c420:	beq	c4c8 <rb_select+0xd8>
    c424:	ldr	r5, [r4, #8]
    c428:	ldr	r7, [pc, #184]	; c4e8 <rb_select+0xf8>
    c42c:	add	r7, pc, r7
    c430:	ldr	sl, [pc, #180]	; c4ec <rb_select+0xfc>
    c434:	add	sl, pc, sl
    c438:	ldr	r9, [pc, #176]	; c4f0 <rb_select+0x100>
    c43c:	add	r9, pc, r9
    c440:	ldr	r6, [r4]
    c444:	ldr	r3, [r7, #96]	; 0x60
    c448:	sub	r3, r3, #1
    c44c:	str	r3, [r7, #96]	; 0x60
    c450:	ldr	r0, [r6, #12]
    c454:	bl	48e8 <close@plt>
    c458:	ldr	r3, [r4, #8]
    c45c:	cmp	r3, #0
    c460:	ldrne	r2, [r4, #4]
    c464:	strne	r2, [r3, #4]
    c468:	ldreq	r3, [r4, #4]
    c46c:	streq	r3, [sl, #104]	; 0x68
    c470:	ldr	r3, [r4, #4]
    c474:	cmp	r3, #0
    c478:	ldrne	r2, [r4, #8]
    c47c:	strne	r2, [r3, #8]
    c480:	ldreq	r3, [r4, #8]
    c484:	streq	r3, [r9, #100]	; 0x64
    c488:	mov	r3, #0
    c48c:	str	r3, [r4, #4]
    c490:	str	r3, [r4, #8]
    c494:	ldr	r3, [pc, #88]	; c4f4 <rb_select+0x104>
    c498:	add	r3, pc, r3
    c49c:	ldr	r2, [r3, #108]	; 0x6c
    c4a0:	sub	r2, r2, #1
    c4a4:	str	r2, [r3, #108]	; 0x6c
    c4a8:	mov	r1, r6
    c4ac:	ldr	r0, [r3, #92]	; 0x5c
    c4b0:	bl	487c <rb_bh_free@plt>
    c4b4:	cmp	r5, #0
    c4b8:	beq	c4c8 <rb_select+0xd8>
    c4bc:	mov	r4, r5
    c4c0:	ldr	r5, [r5, #8]
    c4c4:	b	c440 <rb_select+0x50>
    c4c8:	mov	r0, r8
    c4cc:	ldrd	r4, [sp]
    c4d0:	ldrd	r6, [sp, #8]
    c4d4:	ldrd	r8, [sp, #16]
    c4d8:	ldr	sl, [sp, #24]
    c4dc:	add	sp, sp, #28
    c4e0:	pop	{pc}		; (ldr pc, [sp], #4)
    c4e4:	.word	0x0002f598
    c4e8:	.word	0x0002f574
    c4ec:	.word	0x0002f56c
    c4f0:	.word	0x0002f564
    c4f4:	.word	0x0002f508

0000c4f8 <rb_setup_fd>:
    c4f8:	str	r4, [sp, #-8]!
    c4fc:	str	lr, [sp, #4]
    c500:	ldr	r3, [pc, #20]	; c51c <rb_setup_fd+0x24>
    c504:	add	r3, pc, r3
    c508:	ldr	r3, [r3, #36]	; 0x24
    c50c:	blx	r3
    c510:	ldr	r4, [sp]
    c514:	add	sp, sp, #4
    c518:	pop	{pc}		; (ldr pc, [sp], #4)
    c51c:	.word	0x0002f49c

0000c520 <rb_set_nb>:
    c520:	strd	r4, [sp, #-16]!
    c524:	str	r6, [sp, #8]
    c528:	str	lr, [sp, #12]
    c52c:	cmp	r0, #0
    c530:	moveq	r4, #0
    c534:	beq	c548 <rb_set_nb+0x28>
    c538:	ldr	r5, [r0, #12]
    c53c:	bl	4ad4 <rb_setup_fd@plt>
    c540:	subs	r4, r0, #0
    c544:	beq	c55c <rb_set_nb+0x3c>
    c548:	mov	r0, r4
    c54c:	ldrd	r4, [sp]
    c550:	ldr	r6, [sp, #8]
    c554:	add	sp, sp, #12
    c558:	pop	{pc}		; (ldr pc, [sp], #4)
    c55c:	mov	r2, #0
    c560:	mov	r1, #3
    c564:	mov	r0, r5
    c568:	bl	4bac <fcntl@plt>
    c56c:	cmn	r0, #1
    c570:	beq	c548 <rb_set_nb+0x28>
    c574:	orr	r2, r0, #2048	; 0x800
    c578:	mov	r1, #4
    c57c:	mov	r0, r5
    c580:	bl	4bac <fcntl@plt>
    c584:	adds	r4, r0, #1
    c588:	movne	r4, #1
    c58c:	b	c548 <rb_set_nb+0x28>

0000c590 <rb_accept_tryaccept>:
    c590:	strd	r4, [sp, #-32]!	; 0xffffffe0
    c594:	strd	r6, [sp, #8]
    c598:	strd	r8, [sp, #16]
    c59c:	str	sl, [sp, #24]
    c5a0:	str	lr, [sp, #28]
    c5a4:	sub	sp, sp, #160	; 0xa0
    c5a8:	mov	r5, r0
    c5ac:	ldr	r8, [pc, #436]	; c768 <rb_accept_tryaccept+0x1d8>
    c5b0:	add	r8, pc, r8
    c5b4:	mov	r6, #0
    c5b8:	mov	r7, #0
    c5bc:	ldr	r9, [pc, #424]	; c76c <rb_accept_tryaccept+0x1dc>
    c5c0:	add	r9, pc, r9
    c5c4:	b	c6b0 <rb_accept_tryaccept+0x120>
    c5c8:	mov	r3, #0
    c5cc:	ldr	r2, [pc, #412]	; c770 <rb_accept_tryaccept+0x1e0>
    c5d0:	add	r2, pc, r2
    c5d4:	mov	r1, #1
    c5d8:	mov	r0, r5
    c5dc:	bl	445c <rb_setselect@plt>
    c5e0:	add	sp, sp, #160	; 0xa0
    c5e4:	ldrd	r4, [sp]
    c5e8:	ldrd	r6, [sp, #8]
    c5ec:	ldrd	r8, [sp, #16]
    c5f0:	ldr	sl, [sp, #24]
    c5f4:	add	sp, sp, #28
    c5f8:	pop	{pc}		; (ldr pc, [sp], #4)
    c5fc:	mov	r1, r4
    c600:	ldr	r0, [pc, #364]	; c774 <rb_accept_tryaccept+0x1e4>
    c604:	add	r0, pc, r0
    c608:	bl	48c4 <rb_lib_log@plt>
    c60c:	mov	r0, r4
    c610:	bl	48e8 <close@plt>
    c614:	b	c6b0 <rb_accept_tryaccept+0x120>
    c618:	ldr	r1, [sl, #12]
    c61c:	mov	r0, r9
    c620:	bl	48c4 <rb_lib_log@plt>
    c624:	mov	r0, sl
    c628:	bl	481c <rb_close@plt>
    c62c:	b	c714 <rb_accept_tryaccept+0x184>
    c630:	ldr	r2, [sp, #40]	; 0x28
    c634:	ldr	r3, [sp, #44]	; 0x2c
    c638:	orrs	r3, r2, r3
    c63c:	bne	c720 <rb_accept_tryaccept+0x190>
    c640:	ldr	r3, [sp, #48]	; 0x30
    c644:	cmn	r3, #65536	; 0x10000
    c648:	bne	c720 <rb_accept_tryaccept+0x190>
    c64c:	strd	r6, [sp, #20]
    c650:	mov	r3, #2
    c654:	strh	r3, [sp, #12]
    c658:	ldrh	r3, [sp, #34]	; 0x22
    c65c:	strh	r3, [sp, #14]
    c660:	ldr	r3, [sp, #52]	; 0x34
    c664:	str	r3, [sp, #16]
    c668:	ldrd	r2, [sp, #12]
    c66c:	strd	r2, [sp, #32]
    c670:	mov	r0, #0
    c674:	mov	r1, #0
    c678:	strd	r0, [sp, #40]	; 0x28
    c67c:	b	c720 <rb_accept_tryaccept+0x190>
    c680:	ldrb	r3, [r5, #17]
    c684:	tst	r3, #32
    c688:	bne	c750 <rb_accept_tryaccept+0x1c0>
    c68c:	ldr	r3, [r5, #52]	; 0x34
    c690:	ldr	r2, [r3, #140]	; 0x8c
    c694:	str	r2, [sp]
    c698:	ldr	r4, [r3, #132]	; 0x84
    c69c:	ldr	r3, [sp, #28]
    c6a0:	add	r2, sp, #32
    c6a4:	mov	r1, #0
    c6a8:	mov	r0, sl
    c6ac:	blx	r4
    c6b0:	mov	sl, #128	; 0x80
    c6b4:	mov	r2, sl
    c6b8:	mov	r1, #0
    c6bc:	add	r4, sp, #32
    c6c0:	mov	r0, r4
    c6c4:	bl	45dc <memset@plt>
    c6c8:	str	sl, [sp, #28]
    c6cc:	add	r2, sp, #28
    c6d0:	mov	r1, r4
    c6d4:	ldr	r0, [r5, #12]
    c6d8:	bl	4720 <accept@plt>
    c6dc:	subs	r4, r0, #0
    c6e0:	blt	c5c8 <rb_accept_tryaccept+0x38>
    c6e4:	ldrb	r1, [r5, #17]
    c6e8:	bic	r1, r1, #127	; 0x7f
    c6ec:	mov	r2, r8
    c6f0:	orr	r1, r1, #4
    c6f4:	mov	r0, r4
    c6f8:	bl	4a2c <rb_open@plt>
    c6fc:	subs	sl, r0, #0
    c700:	beq	c5fc <rb_accept_tryaccept+0x6c>
    c704:	mov	r0, sl
    c708:	bl	45d0 <rb_set_nb@plt>
    c70c:	cmp	r0, #0
    c710:	beq	c618 <rb_accept_tryaccept+0x88>
    c714:	ldrh	r3, [sp, #32]
    c718:	cmp	r3, #10
    c71c:	beq	c630 <rb_accept_tryaccept+0xa0>
    c720:	ldr	r3, [r5, #52]	; 0x34
    c724:	ldr	r4, [r3, #136]	; 0x88
    c728:	cmp	r4, #0
    c72c:	beq	c680 <rb_accept_tryaccept+0xf0>
    c730:	ldr	r3, [r3, #140]	; 0x8c
    c734:	ldr	r2, [sp, #28]
    c738:	add	r1, sp, #32
    c73c:	mov	r0, sl
    c740:	blx	r4
    c744:	cmp	r0, #0
    c748:	bne	c680 <rb_accept_tryaccept+0xf0>
    c74c:	b	c6b0 <rb_accept_tryaccept+0x120>
    c750:	ldr	r3, [sp, #28]
    c754:	add	r2, sp, #32
    c758:	mov	r1, sl
    c75c:	mov	r0, r5
    c760:	bl	e288 <rb_ssl_accept_setup>
    c764:	b	c6b0 <rb_accept_tryaccept+0x120>
    c768:	.word	0x0000a7a8
    c76c:	.word	0x0000a7f4
    c770:	.word	0xffffffb8
    c774:	.word	0x0000a768

0000c778 <rb_accept_tcp>:
    c778:	strd	r4, [sp, #-24]!	; 0xffffffe8
    c77c:	strd	r6, [sp, #8]
    c780:	str	r8, [sp, #16]
    c784:	str	lr, [sp, #20]
    c788:	subs	r4, r0, #0
    c78c:	beq	c7cc <rb_accept_tcp+0x54>
    c790:	mov	r6, r3
    c794:	mov	r7, r2
    c798:	mov	r5, r1
    c79c:	mov	r1, #144	; 0x90
    c7a0:	mov	r0, #1
    c7a4:	bl	45a0 <calloc@plt>
    c7a8:	cmp	r0, #0
    c7ac:	beq	c7e0 <rb_accept_tcp+0x68>
    c7b0:	str	r0, [r4, #52]	; 0x34
    c7b4:	str	r7, [r0, #132]	; 0x84
    c7b8:	str	r6, [r0, #140]	; 0x8c
    c7bc:	str	r5, [r0, #136]	; 0x88
    c7c0:	mov	r1, #0
    c7c4:	mov	r0, r4
    c7c8:	bl	c590 <rb_accept_tryaccept>
    c7cc:	ldrd	r4, [sp]
    c7d0:	ldrd	r6, [sp, #8]
    c7d4:	ldr	r8, [sp, #16]
    c7d8:	add	sp, sp, #20
    c7dc:	pop	{pc}		; (ldr pc, [sp], #4)
    c7e0:	bl	4930 <rb_outofmemory@plt>

0000c7e4 <rb_socketpair>:
    c7e4:	strd	r4, [sp, #-16]!
    c7e8:	str	r6, [sp, #8]
    c7ec:	str	lr, [sp, #12]
    c7f0:	sub	sp, sp, #8
    c7f4:	mov	r4, r3
    c7f8:	ldr	r5, [sp, #24]
    c7fc:	ldr	r3, [pc, #352]	; c964 <rb_socketpair+0x180>
    c800:	add	r3, pc, r3
    c804:	ldr	ip, [pc, #348]	; c968 <rb_socketpair+0x184>
    c808:	ldr	r3, [r3, ip]
    c80c:	ldr	ip, [pc, #344]	; c96c <rb_socketpair+0x188>
    c810:	add	ip, pc, ip
    c814:	ldr	ip, [ip, #96]	; 0x60
    c818:	ldr	r3, [r3]
    c81c:	cmp	ip, r3
    c820:	bge	c8a8 <rb_socketpair+0xc4>
    c824:	mov	r3, sp
    c828:	bl	451c <socketpair@plt>
    c82c:	subs	r6, r0, #0
    c830:	bne	c95c <rb_socketpair+0x178>
    c834:	ldr	r2, [sp, #28]
    c838:	mov	r1, #4
    c83c:	ldr	r0, [sp]
    c840:	bl	4a2c <rb_open@plt>
    c844:	str	r0, [r4]
    c848:	ldr	r2, [sp, #28]
    c84c:	mov	r1, #4
    c850:	ldr	r0, [sp, #4]
    c854:	bl	4a2c <rb_open@plt>
    c858:	str	r0, [r5]
    c85c:	ldr	r3, [r4]
    c860:	cmp	r3, #0
    c864:	beq	c8bc <rb_socketpair+0xd8>
    c868:	cmp	r0, #0
    c86c:	beq	c8d4 <rb_socketpair+0xf0>
    c870:	mov	r0, r3
    c874:	bl	45d0 <rb_set_nb@plt>
    c878:	cmp	r0, #0
    c87c:	beq	c8e4 <rb_socketpair+0x100>
    c880:	ldr	r0, [r5]
    c884:	bl	45d0 <rb_set_nb@plt>
    c888:	cmp	r0, #0
    c88c:	beq	c920 <rb_socketpair+0x13c>
    c890:	mov	r0, r6
    c894:	add	sp, sp, #8
    c898:	ldrd	r4, [sp]
    c89c:	ldr	r6, [sp, #8]
    c8a0:	add	sp, sp, #12
    c8a4:	pop	{pc}		; (ldr pc, [sp], #4)
    c8a8:	bl	4c90 <__errno_location@plt>
    c8ac:	mov	r3, #23
    c8b0:	str	r3, [r0]
    c8b4:	mvn	r6, #0
    c8b8:	b	c890 <rb_socketpair+0xac>
    c8bc:	cmp	r0, #0
    c8c0:	mvneq	r6, #0
    c8c4:	beq	c890 <rb_socketpair+0xac>
    c8c8:	bl	481c <rb_close@plt>
    c8cc:	mvn	r6, #0
    c8d0:	b	c890 <rb_socketpair+0xac>
    c8d4:	mov	r0, r3
    c8d8:	bl	481c <rb_close@plt>
    c8dc:	mvn	r6, #0
    c8e0:	b	c890 <rb_socketpair+0xac>
    c8e4:	ldr	r6, [sp]
    c8e8:	bl	4c90 <__errno_location@plt>
    c8ec:	ldr	r0, [r0]
    c8f0:	bl	4354 <strerror@plt>
    c8f4:	mov	r2, r0
    c8f8:	mov	r1, r6
    c8fc:	ldr	r0, [pc, #108]	; c970 <rb_socketpair+0x18c>
    c900:	add	r0, pc, r0
    c904:	bl	48c4 <rb_lib_log@plt>
    c908:	ldr	r0, [r4]
    c90c:	bl	481c <rb_close@plt>
    c910:	ldr	r0, [r5]
    c914:	bl	481c <rb_close@plt>
    c918:	mvn	r6, #0
    c91c:	b	c890 <rb_socketpair+0xac>
    c920:	ldr	r6, [sp, #4]
    c924:	bl	4c90 <__errno_location@plt>
    c928:	ldr	r0, [r0]
    c92c:	bl	4354 <strerror@plt>
    c930:	mov	r2, r0
    c934:	mov	r1, r6
    c938:	ldr	r0, [pc, #52]	; c974 <rb_socketpair+0x190>
    c93c:	add	r0, pc, r0
    c940:	bl	48c4 <rb_lib_log@plt>
    c944:	ldr	r0, [r4]
    c948:	bl	481c <rb_close@plt>
    c94c:	ldr	r0, [r5]
    c950:	bl	481c <rb_close@plt>
    c954:	mvn	r6, #0
    c958:	b	c890 <rb_socketpair+0xac>
    c95c:	mvn	r6, #0
    c960:	b	c890 <rb_socketpair+0xac>
    c964:	.word	0x0001c7f8
    c968:	.word	0x00000398
    c96c:	.word	0x0002f190
    c970:	.word	0x0000a4e0
    c974:	.word	0x0000a4a4

0000c978 <rb_pipe>:
    c978:	strd	r4, [sp, #-16]!
    c97c:	str	r6, [sp, #8]
    c980:	str	lr, [sp, #12]
    c984:	sub	sp, sp, #8
    c988:	mov	r6, r2
    c98c:	ldr	r3, [pc, #292]	; cab8 <rb_pipe+0x140>
    c990:	add	r3, pc, r3
    c994:	ldr	r2, [pc, #288]	; cabc <rb_pipe+0x144>
    c998:	ldr	r3, [r3, r2]
    c99c:	ldr	r2, [pc, #284]	; cac0 <rb_pipe+0x148>
    c9a0:	add	r2, pc, r2
    c9a4:	ldr	r2, [r2, #96]	; 0x60
    c9a8:	ldr	r3, [r3]
    c9ac:	cmp	r2, r3
    c9b0:	bge	ca2c <rb_pipe+0xb4>
    c9b4:	mov	r4, r0
    c9b8:	mov	r5, r1
    c9bc:	mov	r0, sp
    c9c0:	bl	4c30 <pipe@plt>
    c9c4:	cmn	r0, #1
    c9c8:	beq	ca18 <rb_pipe+0xa0>
    c9cc:	mov	r2, r6
    c9d0:	mov	r1, #8
    c9d4:	ldr	r0, [sp]
    c9d8:	bl	4a2c <rb_open@plt>
    c9dc:	str	r0, [r4]
    c9e0:	mov	r2, r6
    c9e4:	mov	r1, #8
    c9e8:	ldr	r0, [sp, #4]
    c9ec:	bl	4a2c <rb_open@plt>
    c9f0:	str	r0, [r5]
    c9f4:	ldr	r0, [r4]
    c9f8:	bl	45d0 <rb_set_nb@plt>
    c9fc:	cmp	r0, #0
    ca00:	beq	ca40 <rb_pipe+0xc8>
    ca04:	ldr	r0, [r5]
    ca08:	bl	45d0 <rb_set_nb@plt>
    ca0c:	cmp	r0, #0
    ca10:	movne	r0, #0
    ca14:	beq	ca7c <rb_pipe+0x104>
    ca18:	add	sp, sp, #8
    ca1c:	ldrd	r4, [sp]
    ca20:	ldr	r6, [sp, #8]
    ca24:	add	sp, sp, #12
    ca28:	pop	{pc}		; (ldr pc, [sp], #4)
    ca2c:	bl	4c90 <__errno_location@plt>
    ca30:	mov	r3, #23
    ca34:	str	r3, [r0]
    ca38:	mvn	r0, #0
    ca3c:	b	ca18 <rb_pipe+0xa0>
    ca40:	ldr	r6, [sp]
    ca44:	bl	4c90 <__errno_location@plt>
    ca48:	ldr	r0, [r0]
    ca4c:	bl	4354 <strerror@plt>
    ca50:	mov	r2, r0
    ca54:	mov	r1, r6
    ca58:	ldr	r0, [pc, #100]	; cac4 <rb_pipe+0x14c>
    ca5c:	add	r0, pc, r0
    ca60:	bl	48c4 <rb_lib_log@plt>
    ca64:	ldr	r0, [r4]
    ca68:	bl	481c <rb_close@plt>
    ca6c:	ldr	r0, [r5]
    ca70:	bl	481c <rb_close@plt>
    ca74:	mvn	r0, #0
    ca78:	b	ca18 <rb_pipe+0xa0>
    ca7c:	ldr	r6, [sp, #4]
    ca80:	bl	4c90 <__errno_location@plt>
    ca84:	ldr	r0, [r0]
    ca88:	bl	4354 <strerror@plt>
    ca8c:	mov	r2, r0
    ca90:	mov	r1, r6
    ca94:	ldr	r0, [pc, #44]	; cac8 <rb_pipe+0x150>
    ca98:	add	r0, pc, r0
    ca9c:	bl	48c4 <rb_lib_log@plt>
    caa0:	ldr	r0, [r4]
    caa4:	bl	481c <rb_close@plt>
    caa8:	ldr	r0, [r5]
    caac:	bl	481c <rb_close@plt>
    cab0:	mvn	r0, #0
    cab4:	b	ca18 <rb_pipe+0xa0>
    cab8:	.word	0x0001c668
    cabc:	.word	0x00000398
    cac0:	.word	0x0002f000
    cac4:	.word	0x0000a384
    cac8:	.word	0x0000a348

0000cacc <rb_socket>:
    cacc:	strd	r4, [sp, #-16]!
    cad0:	str	r6, [sp, #8]
    cad4:	str	lr, [sp, #12]
    cad8:	sub	sp, sp, #16
    cadc:	mov	r4, r0
    cae0:	mov	r6, r3
    cae4:	ldr	r3, [pc, #340]	; cc40 <rb_socket+0x174>
    cae8:	add	r3, pc, r3
    caec:	ldr	r0, [pc, #336]	; cc44 <rb_socket+0x178>
    caf0:	ldr	r3, [r3, r0]
    caf4:	ldr	r0, [pc, #332]	; cc48 <rb_socket+0x17c>
    caf8:	add	r0, pc, r0
    cafc:	ldr	r0, [r0, #96]	; 0x60
    cb00:	ldr	r3, [r3]
    cb04:	cmp	r0, r3
    cb08:	bge	cb64 <rb_socket+0x98>
    cb0c:	mov	r0, r4
    cb10:	bl	4744 <socket@plt>
    cb14:	subs	r5, r0, #0
    cb18:	blt	cc38 <rb_socket+0x16c>
    cb1c:	cmp	r4, #10
    cb20:	beq	cb78 <rb_socket+0xac>
    cb24:	mov	r2, r6
    cb28:	mov	r1, #4
    cb2c:	mov	r0, r5
    cb30:	bl	4a2c <rb_open@plt>
    cb34:	subs	r4, r0, #0
    cb38:	beq	cbdc <rb_socket+0x110>
    cb3c:	mov	r0, r4
    cb40:	bl	45d0 <rb_set_nb@plt>
    cb44:	cmp	r0, #0
    cb48:	beq	cc08 <rb_socket+0x13c>
    cb4c:	mov	r0, r4
    cb50:	add	sp, sp, #16
    cb54:	ldrd	r4, [sp]
    cb58:	ldr	r6, [sp, #8]
    cb5c:	add	sp, sp, #12
    cb60:	pop	{pc}		; (ldr pc, [sp], #4)
    cb64:	bl	4c90 <__errno_location@plt>
    cb68:	mov	r3, #23
    cb6c:	str	r3, [r0]
    cb70:	mov	r4, #0
    cb74:	b	cb4c <rb_socket+0x80>
    cb78:	mov	r3, #1
    cb7c:	str	r3, [sp, #12]
    cb80:	mov	r3, #4
    cb84:	str	r3, [sp]
    cb88:	add	r3, sp, #12
    cb8c:	mov	r2, #26
    cb90:	mov	r1, #41	; 0x29
    cb94:	mov	r0, r5
    cb98:	bl	4c48 <setsockopt@plt>
    cb9c:	cmn	r0, #1
    cba0:	bne	cb24 <rb_socket+0x58>
    cba4:	ldr	r4, [sp, #12]
    cba8:	bl	4c90 <__errno_location@plt>
    cbac:	ldr	r0, [r0]
    cbb0:	bl	4354 <strerror@plt>
    cbb4:	mov	r3, r0
    cbb8:	mov	r2, r5
    cbbc:	mov	r1, r4
    cbc0:	ldr	r0, [pc, #132]	; cc4c <rb_socket+0x180>
    cbc4:	add	r0, pc, r0
    cbc8:	bl	48c4 <rb_lib_log@plt>
    cbcc:	mov	r0, r5
    cbd0:	bl	48e8 <close@plt>
    cbd4:	mov	r4, #0
    cbd8:	b	cb4c <rb_socket+0x80>
    cbdc:	bl	4c90 <__errno_location@plt>
    cbe0:	ldr	r0, [r0]
    cbe4:	bl	4354 <strerror@plt>
    cbe8:	mov	r2, r0
    cbec:	mov	r1, r5
    cbf0:	ldr	r0, [pc, #88]	; cc50 <rb_socket+0x184>
    cbf4:	add	r0, pc, r0
    cbf8:	bl	48c4 <rb_lib_log@plt>
    cbfc:	mov	r0, r5
    cc00:	bl	48e8 <close@plt>
    cc04:	b	cb4c <rb_socket+0x80>
    cc08:	bl	4c90 <__errno_location@plt>
    cc0c:	ldr	r0, [r0]
    cc10:	bl	4354 <strerror@plt>
    cc14:	mov	r2, r0
    cc18:	mov	r1, r5
    cc1c:	ldr	r0, [pc, #48]	; cc54 <rb_socket+0x188>
    cc20:	add	r0, pc, r0
    cc24:	bl	48c4 <rb_lib_log@plt>
    cc28:	mov	r0, r4
    cc2c:	bl	481c <rb_close@plt>
    cc30:	mov	r4, #0
    cc34:	b	cb4c <rb_socket+0x80>
    cc38:	mov	r4, #0
    cc3c:	b	cb4c <rb_socket+0x80>
    cc40:	.word	0x0001c510
    cc44:	.word	0x00000398
    cc48:	.word	0x0002eea8
    cc4c:	.word	0x0000a24c
    cc50:	.word	0x0000a25c
    cc54:	.word	0x0000a1c0

0000cc58 <rb_ignore_errno>:
    cc58:	cmp	r0, #85	; 0x55
    cc5c:	beq	cc94 <rb_ignore_errno+0x3c>
    cc60:	bgt	cc7c <rb_ignore_errno+0x24>
    cc64:	cmp	r0, #4
    cc68:	beq	cc9c <rb_ignore_errno+0x44>
    cc6c:	cmp	r0, #11
    cc70:	movne	r0, #0
    cc74:	moveq	r0, #1
    cc78:	bx	lr
    cc7c:	cmp	r0, #105	; 0x69
    cc80:	beq	cca4 <rb_ignore_errno+0x4c>
    cc84:	cmp	r0, #115	; 0x73
    cc88:	movne	r0, #0
    cc8c:	moveq	r0, #1
    cc90:	bx	lr
    cc94:	mov	r0, #1
    cc98:	bx	lr
    cc9c:	mov	r0, #1
    cca0:	bx	lr
    cca4:	mov	r0, #1
    cca8:	bx	lr

0000ccac <rb_connect_tcp>:
    ccac:	strd	r4, [sp, #-24]!	; 0xffffffe8
    ccb0:	strd	r6, [sp, #8]
    ccb4:	str	r8, [sp, #16]
    ccb8:	str	lr, [sp, #20]
    ccbc:	subs	r4, r0, #0
    ccc0:	beq	cd7c <rb_connect_tcp+0xd0>
    ccc4:	mov	r7, r3
    ccc8:	mov	r5, r2
    cccc:	mov	r6, r1
    ccd0:	mov	r1, #268	; 0x10c
    ccd4:	mov	r0, #1
    ccd8:	bl	45a0 <calloc@plt>
    ccdc:	cmp	r0, #0
    cce0:	beq	cd90 <rb_connect_tcp+0xe4>
    cce4:	str	r0, [r4, #48]	; 0x30
    cce8:	str	r7, [r0, #260]	; 0x104
    ccec:	ldr	r3, [sp, #24]
    ccf0:	str	r3, [r0, #264]	; 0x108
    ccf4:	mov	r2, #128	; 0x80
    ccf8:	mov	r1, r6
    ccfc:	add	r0, r0, r2
    cd00:	bl	47bc <memcpy@plt>
    cd04:	cmp	r5, #0
    cd08:	beq	cd30 <rb_connect_tcp+0x84>
    cd0c:	ldrh	r3, [r5]
    cd10:	cmp	r3, #2
    cd14:	moveq	r2, #16
    cd18:	movne	r2, #28
    cd1c:	mov	r1, r5
    cd20:	ldr	r0, [r4, #12]
    cd24:	bl	48b8 <bind@plt>
    cd28:	cmp	r0, #0
    cd2c:	blt	cd94 <rb_connect_tcp+0xe8>
    cd30:	mov	r3, #0
    cd34:	ldr	r2, [pc, #192]	; cdfc <rb_connect_tcp+0x150>
    cd38:	add	r2, pc, r2
    cd3c:	ldr	r1, [sp, #28]
    cd40:	mov	r0, r4
    cd44:	bl	439c <rb_settimeout@plt>
    cd48:	ldr	r1, [r4, #48]	; 0x30
    cd4c:	ldrh	r3, [r1, #128]	; 0x80
    cd50:	cmp	r3, #2
    cd54:	moveq	r2, #16
    cd58:	movne	r2, #28
    cd5c:	add	r1, r1, #128	; 0x80
    cd60:	ldr	r0, [r4, #12]
    cd64:	bl	4384 <connect@plt>
    cd68:	cmp	r0, #0
    cd6c:	blt	cda4 <rb_connect_tcp+0xf8>
    cd70:	mov	r1, #0
    cd74:	mov	r0, r4
    cd78:	bl	afe4 <rb_connect_callback>
    cd7c:	ldrd	r4, [sp]
    cd80:	ldrd	r6, [sp, #8]
    cd84:	ldr	r8, [sp, #16]
    cd88:	add	sp, sp, #20
    cd8c:	pop	{pc}		; (ldr pc, [sp], #4)
    cd90:	bl	4930 <rb_outofmemory@plt>
    cd94:	mov	r1, #1
    cd98:	mov	r0, r4
    cd9c:	bl	afe4 <rb_connect_callback>
    cda0:	b	cd7c <rb_connect_tcp+0xd0>
    cda4:	bl	4c90 <__errno_location@plt>
    cda8:	ldr	r0, [r0]
    cdac:	cmp	r0, #106	; 0x6a
    cdb0:	beq	cddc <rb_connect_tcp+0x130>
    cdb4:	bl	4390 <rb_ignore_errno@plt>
    cdb8:	cmp	r0, #0
    cdbc:	beq	cdec <rb_connect_tcp+0x140>
    cdc0:	mov	r3, #0
    cdc4:	ldr	r2, [pc, #52]	; ce00 <rb_connect_tcp+0x154>
    cdc8:	add	r2, pc, r2
    cdcc:	mov	r1, #2
    cdd0:	mov	r0, r4
    cdd4:	bl	445c <rb_setselect@plt>
    cdd8:	b	cd7c <rb_connect_tcp+0xd0>
    cddc:	mov	r1, #0
    cde0:	mov	r0, r4
    cde4:	bl	afe4 <rb_connect_callback>
    cde8:	b	cd7c <rb_connect_tcp+0xd0>
    cdec:	mov	r1, #4
    cdf0:	mov	r0, r4
    cdf4:	bl	afe4 <rb_connect_callback>
    cdf8:	b	cd7c <rb_connect_tcp+0xd0>
    cdfc:	.word	0xffffe3d0
    ce00:	.word	0xffffe2a0

0000ce04 <rb_recv_fd_buf>:
    ce04:	strd	r4, [sp, #-36]!	; 0xffffffdc
    ce08:	strd	r6, [sp, #8]
    ce0c:	strd	r8, [sp, #16]
    ce10:	strd	sl, [sp, #24]
    ce14:	str	lr, [sp, #32]
    ce18:	add	fp, sp, #32
    ce1c:	sub	sp, sp, #140	; 0x8c
    ce20:	mov	r7, r3
    ce24:	ldr	r6, [fp, #4]
    ce28:	lsl	r3, r6, #2
    ce2c:	add	ip, r3, #12
    ce30:	str	r1, [fp, #-72]	; 0xffffffb8
    ce34:	str	r2, [fp, #-68]	; 0xffffffbc
    ce38:	mov	r4, #0
    ce3c:	str	r4, [fp, #-64]	; 0xffffffc0
    ce40:	str	r4, [fp, #-60]	; 0xffffffc4
    ce44:	sub	r2, fp, #72	; 0x48
    ce48:	str	r2, [fp, #-56]	; 0xffffffc8
    ce4c:	mov	r2, #1
    ce50:	str	r2, [fp, #-52]	; 0xffffffcc
    ce54:	str	r4, [fp, #-40]	; 0xffffffd8
    ce58:	add	r3, r3, #19
    ce5c:	bic	r3, r3, #7
    ce60:	sub	sp, sp, r3
    ce64:	str	sp, [fp, #-48]	; 0xffffffd0
    ce68:	str	ip, [fp, #-44]	; 0xffffffd4
    ce6c:	bl	4498 <rb_get_fd@plt>
    ce70:	mov	r2, r4
    ce74:	sub	r1, fp, #64	; 0x40
    ce78:	bl	4ae0 <recvmsg@plt>
    ce7c:	subs	r8, r0, #0
    ce80:	ble	cea8 <rb_recv_fd_buf+0xa4>
    ce84:	ldr	r3, [fp, #-44]	; 0xffffffd4
    ce88:	cmp	r3, r4
    ce8c:	beq	cea0 <rb_recv_fd_buf+0x9c>
    ce90:	ldr	r5, [fp, #-48]	; 0xffffffd0
    ce94:	cmp	r5, r4
    ce98:	cmpne	r3, #11
    ce9c:	bhi	cec8 <rb_recv_fd_buf+0xc4>
    cea0:	mov	r3, #0
    cea4:	str	r3, [r7]
    cea8:	mov	r0, r8
    ceac:	sub	sp, fp, #32
    ceb0:	ldrd	r4, [sp]
    ceb4:	ldrd	r6, [sp, #8]
    ceb8:	ldrd	r8, [sp, #16]
    cebc:	ldrd	sl, [sp, #24]
    cec0:	add	sp, sp, #32
    cec4:	pop	{pc}		; (ldr pc, [sp], #4)
    cec8:	ldr	r3, [r5]
    cecc:	sub	r3, r3, #12
    ced0:	lsr	r3, r3, #2
    ced4:	cmp	r3, r6
    ced8:	movlt	r6, r3
    cedc:	cmp	r6, r4
    cee0:	ble	cea8 <rb_recv_fd_buf+0xa4>
    cee4:	add	r5, r5, #8
    cee8:	mov	r4, r7
    ceec:	add	r7, r7, r6, lsl #2
    cef0:	ldr	r9, [pc, #164]	; cf9c <rb_recv_fd_buf+0x198>
    cef4:	add	r9, pc, r9
    cef8:	ldr	sl, [pc, #160]	; cfa0 <rb_recv_fd_buf+0x19c>
    cefc:	add	sl, pc, sl
    cf00:	ldr	r3, [pc, #156]	; cfa4 <rb_recv_fd_buf+0x1a0>
    cf04:	add	r3, pc, r3
    cf08:	str	r3, [fp, #-168]	; 0xffffff58
    cf0c:	b	cf3c <rb_recv_fd_buf+0x138>
    cf10:	ldr	r2, [pc, #144]	; cfa8 <rb_recv_fd_buf+0x1a4>
    cf14:	add	r2, pc, r2
    cf18:	mov	r1, #2
    cf1c:	b	cf28 <rb_recv_fd_buf+0x124>
    cf20:	mov	r2, sl
    cf24:	mov	r1, #4
    cf28:	mov	r0, r6
    cf2c:	bl	4a2c <rb_open@plt>
    cf30:	str	r0, [r4], #4
    cf34:	cmp	r4, r7
    cf38:	beq	cea8 <rb_recv_fd_buf+0xa4>
    cf3c:	ldr	r6, [r5, #4]!
    cf40:	sub	r2, fp, #164	; 0xa4
    cf44:	mov	r1, r6
    cf48:	mov	r0, #3
    cf4c:	bl	4b04 <__fxstat@plt>
    cf50:	cmp	r0, #0
    cf54:	movne	r2, r9
    cf58:	movne	r1, #64	; 0x40
    cf5c:	bne	cf28 <rb_recv_fd_buf+0x124>
    cf60:	ldr	r3, [fp, #-148]	; 0xffffff6c
    cf64:	and	r3, r3, #61440	; 0xf000
    cf68:	cmp	r3, #49152	; 0xc000
    cf6c:	beq	cf20 <rb_recv_fd_buf+0x11c>
    cf70:	cmp	r3, #4096	; 0x1000
    cf74:	beq	cf90 <rb_recv_fd_buf+0x18c>
    cf78:	cmp	r3, #32768	; 0x8000
    cf7c:	beq	cf10 <rb_recv_fd_buf+0x10c>
    cf80:	ldr	r2, [pc, #36]	; cfac <rb_recv_fd_buf+0x1a8>
    cf84:	add	r2, pc, r2
    cf88:	mov	r1, #64	; 0x40
    cf8c:	b	cf28 <rb_recv_fd_buf+0x124>
    cf90:	ldr	r2, [fp, #-168]	; 0xffffff58
    cf94:	mov	r1, #8
    cf98:	b	cf28 <rb_recv_fd_buf+0x124>
    cf9c:	.word	0x00009fa4
    cfa0:	.word	0x00009fac
    cfa4:	.word	0x00009f88
    cfa8:	.word	0x00009fa4
    cfac:	.word	0x00009f14

0000cfb0 <rb_send_fd_buf>:
    cfb0:	strd	r4, [sp, #-32]!	; 0xffffffe0
    cfb4:	strd	r6, [sp, #8]
    cfb8:	strd	r8, [sp, #16]
    cfbc:	str	fp, [sp, #24]
    cfc0:	str	lr, [sp, #28]
    cfc4:	add	fp, sp, #28
    cfc8:	sub	sp, sp, #40	; 0x28
    cfcc:	mov	r7, r0
    cfd0:	ldr	lr, [fp, #4]
    cfd4:	mov	r0, #48	; 0x30
    cfd8:	strb	r0, [fp, #-65]	; 0xffffffbf
    cfdc:	mov	ip, #0
    cfe0:	str	ip, [fp, #-56]	; 0xffffffc8
    cfe4:	str	ip, [fp, #-52]	; 0xffffffcc
    cfe8:	str	ip, [fp, #-40]	; 0xffffffd8
    cfec:	str	ip, [fp, #-36]	; 0xffffffdc
    cff0:	str	ip, [fp, #-32]	; 0xffffffe0
    cff4:	cmp	lr, ip
    cff8:	strne	r3, [fp, #-64]	; 0xffffffc0
    cffc:	strne	lr, [fp, #-60]	; 0xffffffc4
    d000:	bne	d014 <rb_send_fd_buf+0x64>
    d004:	sub	r3, fp, #65	; 0x41
    d008:	str	r3, [fp, #-64]	; 0xffffffc0
    d00c:	mov	r3, #1
    d010:	str	r3, [fp, #-60]	; 0xffffffc4
    d014:	sub	r3, fp, #64	; 0x40
    d018:	str	r3, [fp, #-48]	; 0xffffffd0
    d01c:	mov	r3, #1
    d020:	str	r3, [fp, #-44]	; 0xffffffd4
    d024:	cmp	r2, #0
    d028:	ble	d0d4 <rb_send_fd_buf+0x124>
    d02c:	mov	r8, sp
    d030:	add	r2, r2, r3
    d034:	lsl	r2, r2, #2
    d038:	add	r0, r2, #8
    d03c:	add	r3, r2, #15
    d040:	bic	r3, r3, #7
    d044:	sub	sp, sp, r3
    d048:	str	sp, [fp, #-40]	; 0xffffffd8
    d04c:	str	r0, [fp, #-36]	; 0xffffffdc
    d050:	cmp	r0, #11
    d054:	mov	r3, sp
    d058:	movhi	r9, r3
    d05c:	movls	r9, #0
    d060:	mov	r3, #1
    d064:	str	r3, [r9, #4]
    d068:	str	r3, [r9, #8]
    d06c:	add	r3, r2, #8
    d070:	mov	r5, r9
    d074:	str	r3, [r5], #8
    d078:	mov	r4, r1
    d07c:	sub	r2, r2, #4
    d080:	add	r6, r1, r2
    d084:	ldr	r0, [r4], #4
    d088:	bl	4498 <rb_get_fd@plt>
    d08c:	str	r0, [r5, #4]!
    d090:	cmp	r4, r6
    d094:	bne	d084 <rb_send_fd_buf+0xd4>
    d098:	ldr	r3, [r9]
    d09c:	str	r3, [fp, #-36]	; 0xffffffdc
    d0a0:	mov	r0, r7
    d0a4:	bl	4498 <rb_get_fd@plt>
    d0a8:	mov	r2, #16384	; 0x4000
    d0ac:	sub	r1, fp, #56	; 0x38
    d0b0:	bl	46b4 <sendmsg@plt>
    d0b4:	mov	sp, r8
    d0b8:	sub	sp, fp, #28
    d0bc:	ldrd	r4, [sp]
    d0c0:	ldrd	r6, [sp, #8]
    d0c4:	ldrd	r8, [sp, #16]
    d0c8:	ldr	fp, [sp, #24]
    d0cc:	add	sp, sp, #28
    d0d0:	pop	{pc}		; (ldr pc, [sp], #4)
    d0d4:	mov	r0, r7
    d0d8:	bl	4498 <rb_get_fd@plt>
    d0dc:	mov	r2, #16384	; 0x4000
    d0e0:	sub	r1, fp, #56	; 0x38
    d0e4:	bl	46b4 <sendmsg@plt>
    d0e8:	b	d0b8 <rb_send_fd_buf+0x108>

0000d0ec <rb_ipv4_from_ipv6>:
    d0ec:	strd	r4, [sp, #-16]!
    d0f0:	str	r6, [sp, #8]
    d0f4:	str	lr, [sp, #12]
    d0f8:	mov	r4, r0
    d0fc:	mov	r5, r1
    d100:	add	r6, r0, #8
    d104:	mov	r2, #2
    d108:	ldr	r1, [pc, #132]	; d194 <rb_ipv4_from_ipv6+0xa8>
    d10c:	add	r1, pc, r1
    d110:	mov	r0, r6
    d114:	bl	4408 <memcmp@plt>
    d118:	cmp	r0, #0
    d11c:	bne	d14c <rb_ipv4_from_ipv6+0x60>
    d120:	ldr	r3, [r4, #10]
    d124:	str	r3, [r5, #4]
    d128:	mov	r3, #2
    d12c:	strh	r3, [r5]
    d130:	mov	r3, #0
    d134:	strh	r3, [r5, #2]
    d138:	mov	r0, #1
    d13c:	ldrd	r4, [sp]
    d140:	ldr	r6, [sp, #8]
    d144:	add	sp, sp, #12
    d148:	pop	{pc}		; (ldr pc, [sp], #4)
    d14c:	mov	r2, #4
    d150:	ldr	r1, [pc, #64]	; d198 <rb_ipv4_from_ipv6+0xac>
    d154:	add	r1, pc, r1
    d158:	add	r1, r1, #20
    d15c:	mov	r0, r6
    d160:	bl	4408 <memcmp@plt>
    d164:	cmp	r0, #0
    d168:	movne	r0, #0
    d16c:	bne	d13c <rb_ipv4_from_ipv6+0x50>
    d170:	add	r0, r4, #20
    d174:	add	r2, r5, #4
    d178:	add	r1, r5, #8
    d17c:	ldrb	r3, [r0], #1
    d180:	mvn	r3, r3
    d184:	strb	r3, [r2], #1
    d188:	cmp	r2, r1
    d18c:	bne	d17c <rb_ipv4_from_ipv6+0x90>
    d190:	b	d128 <rb_ipv4_from_ipv6+0x3c>
    d194:	.word	0x00009db8
    d198:	.word	0x00009a90

0000d19c <verify_accept_all_cb>:
    d19c:	mov	r0, #1
    d1a0:	bx	lr

0000d1a4 <rb_ssl_timeout_cb>:
    d1a4:	str	r4, [sp, #-8]!
    d1a8:	str	lr, [sp, #4]
    d1ac:	sub	sp, sp, #8
    d1b0:	ldr	r3, [r0, #52]	; 0x34
    d1b4:	ldr	r2, [r3, #140]	; 0x8c
    d1b8:	str	r2, [sp]
    d1bc:	ldr	r4, [r3, #132]	; 0x84
    d1c0:	mov	r3, #0
    d1c4:	mov	r2, r3
    d1c8:	mov	r1, #3
    d1cc:	blx	r4
    d1d0:	add	sp, sp, #8
    d1d4:	ldr	r4, [sp]
    d1d8:	add	sp, sp, #4
    d1dc:	pop	{pc}		; (ldr pc, [sp], #4)

0000d1e0 <rb_ssl_last_err>:
    d1e0:	str	r4, [sp, #-8]!
    d1e4:	str	lr, [sp, #4]
    d1e8:	mov	r4, #0
    d1ec:	b	d1f4 <rb_ssl_last_err+0x14>
    d1f0:	mov	r4, r0
    d1f4:	bl	43b4 <ERR_get_error@plt>
    d1f8:	cmp	r0, #0
    d1fc:	bne	d1f0 <rb_ssl_last_err+0x10>
    d200:	mov	r0, r4
    d204:	ldr	r4, [sp]
    d208:	add	sp, sp, #4
    d20c:	pop	{pc}		; (ldr pc, [sp], #4)

0000d210 <rb_ssl_strerror>:
    d210:	str	r4, [sp, #-8]!
    d214:	str	lr, [sp, #4]
    d218:	ldr	r4, [pc, #28]	; d23c <rb_ssl_strerror+0x2c>
    d21c:	add	r4, pc, r4
    d220:	mov	r2, #512	; 0x200
    d224:	mov	r1, r4
    d228:	bl	4558 <ERR_error_string_n@plt>
    d22c:	mov	r0, r4
    d230:	ldr	r4, [sp]
    d234:	add	sp, sp, #4
    d238:	pop	{pc}		; (ldr pc, [sp], #4)
    d23c:	.word	0x0002e7f8

0000d240 <make_certfp>:
    d240:	strd	r4, [sp, #-20]!	; 0xffffffec
    d244:	strd	r6, [sp, #8]
    d248:	str	lr, [sp, #16]
    d24c:	sub	sp, sp, #20
    d250:	mov	r5, r0
    d254:	mov	r6, r1
    d258:	ldr	r4, [pc, #316]	; d39c <make_certfp+0x15c>
    d25c:	add	r4, pc, r4
    d260:	cmp	r2, #2
    d264:	beq	d330 <make_certfp+0xf0>
    d268:	ble	d2b0 <make_certfp+0x70>
    d26c:	movw	r3, #4097	; 0x1001
    d270:	cmp	r2, r3
    d274:	beq	d34c <make_certfp+0x10c>
    d278:	movw	r3, #4098	; 0x1002
    d27c:	cmp	r2, r3
    d280:	movne	r0, #0
    d284:	bne	d31c <make_certfp+0xdc>
    d288:	mov	r3, #64	; 0x40
    d28c:	str	r3, [sp, #12]
    d290:	bl	4b4c <EVP_sha512@plt>
    d294:	mov	r7, r0
    d298:	mov	r0, r5
    d29c:	bl	44ec <X509_get_X509_PUBKEY@plt>
    d2a0:	mov	r5, r0
    d2a4:	ldr	r3, [pc, #244]	; d3a0 <make_certfp+0x160>
    d2a8:	ldr	r0, [r4, r3]
    d2ac:	b	d2f8 <make_certfp+0xb8>
    d2b0:	cmp	r2, #0
    d2b4:	beq	d2e0 <make_certfp+0xa0>
    d2b8:	cmp	r2, #1
    d2bc:	movne	r0, #0
    d2c0:	bne	d31c <make_certfp+0xdc>
    d2c4:	mov	r3, #32
    d2c8:	str	r3, [sp, #12]
    d2cc:	bl	4b7c <EVP_sha256@plt>
    d2d0:	mov	r7, r0
    d2d4:	ldr	r3, [pc, #200]	; d3a4 <make_certfp+0x164>
    d2d8:	ldr	r0, [r4, r3]
    d2dc:	b	d2f8 <make_certfp+0xb8>
    d2e0:	mov	r3, #20
    d2e4:	str	r3, [sp, #12]
    d2e8:	bl	4894 <EVP_sha1@plt>
    d2ec:	mov	r7, r0
    d2f0:	ldr	r3, [pc, #172]	; d3a4 <make_certfp+0x164>
    d2f4:	ldr	r0, [r4, r3]
    d2f8:	add	r3, sp, #12
    d2fc:	str	r3, [sp]
    d300:	mov	r3, r6
    d304:	mov	r2, r5
    d308:	mov	r1, r7
    d30c:	bl	49b4 <ASN1_item_digest@plt>
    d310:	cmp	r0, #1
    d314:	bne	d374 <make_certfp+0x134>
    d318:	ldr	r0, [sp, #12]
    d31c:	add	sp, sp, #20
    d320:	ldrd	r4, [sp]
    d324:	ldrd	r6, [sp, #8]
    d328:	add	sp, sp, #16
    d32c:	pop	{pc}		; (ldr pc, [sp], #4)
    d330:	mov	r3, #64	; 0x40
    d334:	str	r3, [sp, #12]
    d338:	bl	4b4c <EVP_sha512@plt>
    d33c:	mov	r7, r0
    d340:	ldr	r3, [pc, #92]	; d3a4 <make_certfp+0x164>
    d344:	ldr	r0, [r4, r3]
    d348:	b	d2f8 <make_certfp+0xb8>
    d34c:	mov	r3, #32
    d350:	str	r3, [sp, #12]
    d354:	bl	4b7c <EVP_sha256@plt>
    d358:	mov	r7, r0
    d35c:	mov	r0, r5
    d360:	bl	44ec <X509_get_X509_PUBKEY@plt>
    d364:	mov	r5, r0
    d368:	ldr	r3, [pc, #48]	; d3a0 <make_certfp+0x160>
    d36c:	ldr	r0, [r4, r3]
    d370:	b	d2f8 <make_certfp+0xb8>
    d374:	bl	d1e0 <rb_ssl_last_err>
    d378:	bl	d210 <rb_ssl_strerror>
    d37c:	mov	r2, r0
    d380:	ldr	r1, [pc, #32]	; d3a8 <make_certfp+0x168>
    d384:	add	r1, pc, r1
    d388:	ldr	r0, [pc, #28]	; d3ac <make_certfp+0x16c>
    d38c:	add	r0, pc, r0
    d390:	bl	48c4 <rb_lib_log@plt>
    d394:	mov	r0, #0
    d398:	b	d31c <make_certfp+0xdc>
    d39c:	.word	0x0001bd9c
    d3a0:	.word	0x0000040c
    d3a4:	.word	0x00000400
    d3a8:	.word	0x00009fb8
    d3ac:	.word	0x0000a19c

0000d3b0 <rb_ssl_read_or_write>:
    d3b0:	strd	r4, [sp, #-24]!	; 0xffffffe8
    d3b4:	strd	r6, [sp, #8]
    d3b8:	str	r8, [sp, #16]
    d3bc:	str	lr, [sp, #20]
    d3c0:	mov	r5, r0
    d3c4:	mov	r4, r1
    d3c8:	mov	r7, r2
    d3cc:	mov	r6, r3
    d3d0:	bl	d1e0 <rb_ssl_last_err>
    d3d4:	cmp	r5, #0
    d3d8:	bne	d408 <rb_ssl_read_or_write+0x58>
    d3dc:	ldr	r2, [sp, #24]
    d3e0:	mov	r1, r7
    d3e4:	ldr	r0, [r4, #56]	; 0x38
    d3e8:	bl	472c <SSL_read@plt>
    d3ec:	cmp	r0, #0
    d3f0:	blt	d41c <rb_ssl_read_or_write+0x6c>
    d3f4:	ldrd	r4, [sp]
    d3f8:	ldrd	r6, [sp, #8]
    d3fc:	ldr	r8, [sp, #16]
    d400:	add	sp, sp, #20
    d404:	pop	{pc}		; (ldr pc, [sp], #4)
    d408:	ldr	r2, [sp, #24]
    d40c:	mov	r1, r6
    d410:	ldr	r0, [r4, #56]	; 0x38
    d414:	bl	45ac <SSL_write@plt>
    d418:	b	d3ec <rb_ssl_read_or_write+0x3c>
    d41c:	mov	r1, r0
    d420:	ldr	r0, [r4, #56]	; 0x38
    d424:	bl	4c54 <SSL_get_error@plt>
    d428:	sub	r0, r0, #2
    d42c:	cmp	r0, #4
    d430:	addls	pc, pc, r0, lsl #2
    d434:	b	d4a4 <rb_ssl_read_or_write+0xf4>
    d438:	b	d44c <rb_ssl_read_or_write+0x9c>
    d43c:	b	d460 <rb_ssl_read_or_write+0xb0>
    d440:	b	d4a4 <rb_ssl_read_or_write+0xf4>
    d444:	b	d474 <rb_ssl_read_or_write+0xc4>
    d448:	b	d4bc <rb_ssl_read_or_write+0x10c>
    d44c:	bl	4c90 <__errno_location@plt>
    d450:	mov	r3, #11
    d454:	str	r3, [r0]
    d458:	mvn	r0, #2
    d45c:	b	d3f4 <rb_ssl_read_or_write+0x44>
    d460:	bl	4c90 <__errno_location@plt>
    d464:	mov	r3, #11
    d468:	str	r3, [r0]
    d46c:	mvn	r0, #3
    d470:	b	d3f4 <rb_ssl_read_or_write+0x44>
    d474:	bl	d1e0 <rb_ssl_last_err>
    d478:	cmp	r0, #0
    d47c:	moveq	r3, #0
    d480:	streq	r3, [r4, #64]	; 0x40
    d484:	mvneq	r0, #0
    d488:	beq	d3f4 <rb_ssl_read_or_write+0x44>
    d48c:	str	r0, [r4, #64]	; 0x40
    d490:	bl	4c90 <__errno_location@plt>
    d494:	mov	r3, #5
    d498:	str	r3, [r0]
    d49c:	mvn	r0, #1
    d4a0:	b	d3f4 <rb_ssl_read_or_write+0x44>
    d4a4:	bl	d1e0 <rb_ssl_last_err>
    d4a8:	str	r0, [r4, #64]	; 0x40
    d4ac:	cmp	r0, #0
    d4b0:	mvneq	r0, #0
    d4b4:	beq	d3f4 <rb_ssl_read_or_write+0x44>
    d4b8:	b	d490 <rb_ssl_read_or_write+0xe0>
    d4bc:	mov	r0, #0
    d4c0:	b	d3f4 <rb_ssl_read_or_write+0x44>

0000d4c4 <rb_ssl_init_fd>:
    d4c4:	strd	r4, [sp, #-16]!
    d4c8:	str	r6, [sp, #8]
    d4cc:	str	lr, [sp, #12]
    d4d0:	mov	r4, r0
    d4d4:	mov	r5, r1
    d4d8:	bl	d1e0 <rb_ssl_last_err>
    d4dc:	ldr	r3, [pc, #140]	; d570 <rb_ssl_init_fd+0xac>
    d4e0:	add	r3, pc, r3
    d4e4:	ldr	r0, [r3, #512]	; 0x200
    d4e8:	bl	46e4 <SSL_new@plt>
    d4ec:	str	r0, [r4, #56]	; 0x38
    d4f0:	cmp	r0, #0
    d4f4:	beq	d530 <rb_ssl_init_fd+0x6c>
    d4f8:	cmp	r5, #0
    d4fc:	beq	d560 <rb_ssl_init_fd+0x9c>
    d500:	cmp	r5, #1
    d504:	beq	d568 <rb_ssl_init_fd+0xa4>
    d508:	ldr	r5, [r4, #56]	; 0x38
    d50c:	mov	r0, r4
    d510:	bl	4498 <rb_get_fd@plt>
    d514:	mov	r1, r0
    d518:	mov	r0, r5
    d51c:	bl	4618 <SSL_set_fd@plt>
    d520:	ldrd	r4, [sp]
    d524:	ldr	r6, [sp, #8]
    d528:	add	sp, sp, #12
    d52c:	pop	{pc}		; (ldr pc, [sp], #4)
    d530:	bl	d1e0 <rb_ssl_last_err>
    d534:	bl	d210 <rb_ssl_strerror>
    d538:	mov	r2, r0
    d53c:	ldr	r1, [pc, #48]	; d574 <rb_ssl_init_fd+0xb0>
    d540:	add	r1, pc, r1
    d544:	add	r1, r1, #12
    d548:	ldr	r0, [pc, #40]	; d578 <rb_ssl_init_fd+0xb4>
    d54c:	add	r0, pc, r0
    d550:	bl	48c4 <rb_lib_log@plt>
    d554:	mov	r0, r4
    d558:	bl	481c <rb_close@plt>
    d55c:	b	d520 <rb_ssl_init_fd+0x5c>
    d560:	bl	4978 <SSL_set_accept_state@plt>
    d564:	b	d508 <rb_ssl_init_fd+0x44>
    d568:	bl	4b10 <SSL_set_connect_state@plt>
    d56c:	b	d508 <rb_ssl_init_fd+0x44>
    d570:	.word	0x0002e534
    d574:	.word	0x00009dfc
    d578:	.word	0x00009ff8

0000d57c <rb_ssl_accept_common>:
    d57c:	strd	r4, [sp, #-16]!
    d580:	str	r6, [sp, #8]
    d584:	str	lr, [sp, #12]
    d588:	sub	sp, sp, #8
    d58c:	mov	r4, r0
    d590:	bl	d1e0 <rb_ssl_last_err>
    d594:	ldr	r0, [r4, #56]	; 0x38
    d598:	bl	4774 <SSL_do_handshake@plt>
    d59c:	mov	r5, r0
    d5a0:	mov	r1, r0
    d5a4:	ldr	r0, [r4, #56]	; 0x38
    d5a8:	bl	4c54 <SSL_get_error@plt>
    d5ac:	cmp	r5, #1
    d5b0:	beq	d62c <rb_ssl_accept_common+0xb0>
    d5b4:	mov	r6, r0
    d5b8:	cmn	r5, #1
    d5bc:	movne	r3, #0
    d5c0:	moveq	r3, #1
    d5c4:	cmp	r0, #2
    d5c8:	cmneq	r5, #1
    d5cc:	beq	d694 <rb_ssl_accept_common+0x118>
    d5d0:	cmp	r0, #3
    d5d4:	movne	r3, #0
    d5d8:	andeq	r3, r3, #1
    d5dc:	cmp	r3, #0
    d5e0:	bne	d6b0 <rb_ssl_accept_common+0x134>
    d5e4:	bl	4c90 <__errno_location@plt>
    d5e8:	mov	r3, #5
    d5ec:	str	r3, [r0]
    d5f0:	str	r6, [r4, #64]	; 0x40
    d5f4:	ldr	r3, [r4, #52]	; 0x34
    d5f8:	ldr	r2, [r3, #140]	; 0x8c
    d5fc:	str	r2, [sp]
    d600:	ldr	r5, [r3, #132]	; 0x84
    d604:	mov	r3, #0
    d608:	mov	r2, r3
    d60c:	mov	r1, #6
    d610:	mov	r0, r4
    d614:	blx	r5
    d618:	add	sp, sp, #8
    d61c:	ldrd	r4, [sp]
    d620:	ldr	r6, [sp, #8]
    d624:	add	sp, sp, #12
    d628:	pop	{pc}		; (ldr pc, [sp], #4)
    d62c:	ldr	r3, [r4, #60]	; 0x3c
    d630:	add	r3, r3, #1
    d634:	str	r3, [r4, #60]	; 0x3c
    d638:	mov	r3, #0
    d63c:	mov	r2, r3
    d640:	mov	r1, r3
    d644:	mov	r0, r4
    d648:	bl	439c <rb_settimeout@plt>
    d64c:	mov	r3, #0
    d650:	mov	r2, r3
    d654:	mov	r1, #3
    d658:	mov	r0, r4
    d65c:	bl	445c <rb_setselect@plt>
    d660:	ldr	r5, [r4, #52]	; 0x34
    d664:	mov	r1, #0
    d668:	str	r1, [r4, #52]	; 0x34
    d66c:	ldr	r3, [r5, #128]	; 0x80
    d670:	ldr	r2, [r5, #140]	; 0x8c
    d674:	str	r2, [sp]
    d678:	ldr	r6, [r5, #132]	; 0x84
    d67c:	mov	r2, r5
    d680:	mov	r0, r4
    d684:	blx	r6
    d688:	mov	r0, r5
    d68c:	bl	46a8 <free@plt>
    d690:	b	d618 <rb_ssl_accept_common+0x9c>
    d694:	mov	r3, #0
    d698:	ldr	r2, [pc, #44]	; d6cc <rb_ssl_accept_common+0x150>
    d69c:	add	r2, pc, r2
    d6a0:	mov	r1, #1
    d6a4:	mov	r0, r4
    d6a8:	bl	445c <rb_setselect@plt>
    d6ac:	b	d618 <rb_ssl_accept_common+0x9c>
    d6b0:	mov	r3, #0
    d6b4:	ldr	r2, [pc, #20]	; d6d0 <rb_ssl_accept_common+0x154>
    d6b8:	add	r2, pc, r2
    d6bc:	mov	r1, #2
    d6c0:	mov	r0, r4
    d6c4:	bl	445c <rb_setselect@plt>
    d6c8:	b	d618 <rb_ssl_accept_common+0x9c>
    d6cc:	.word	0xfffffed8
    d6d0:	.word	0xfffffebc

0000d6d4 <rb_ssl_connect_realcb>:
    d6d4:	str	r4, [sp, #-8]!
    d6d8:	str	lr, [sp, #4]
    d6dc:	mov	r4, r2
    d6e0:	ldr	r2, [r0, #48]	; 0x30
    d6e4:	ldr	ip, [r4]
    d6e8:	str	ip, [r2, #260]	; 0x104
    d6ec:	ldr	r3, [r0, #48]	; 0x30
    d6f0:	ldr	r2, [r4, #4]
    d6f4:	str	r2, [r3, #264]	; 0x108
    d6f8:	bl	afe4 <rb_connect_callback>
    d6fc:	mov	r0, r4
    d700:	bl	46a8 <free@plt>
    d704:	ldr	r4, [sp]
    d708:	add	sp, sp, #4
    d70c:	pop	{pc}		; (ldr pc, [sp], #4)

0000d710 <rb_ssl_tryconn_timeout_cb>:
    d710:	str	r4, [sp, #-8]!
    d714:	str	lr, [sp, #4]
    d718:	mov	r2, r1
    d71c:	mov	r1, #3
    d720:	bl	d6d4 <rb_ssl_connect_realcb>
    d724:	ldr	r4, [sp]
    d728:	add	sp, sp, #4
    d72c:	pop	{pc}		; (ldr pc, [sp], #4)

0000d730 <rb_ssl_connect_common>:
    d730:	strd	r4, [sp, #-24]!	; 0xffffffe8
    d734:	strd	r6, [sp, #8]
    d738:	str	r8, [sp, #16]
    d73c:	str	lr, [sp, #20]
    d740:	mov	r4, r0
    d744:	mov	r7, r1
    d748:	bl	d1e0 <rb_ssl_last_err>
    d74c:	ldr	r0, [r4, #56]	; 0x38
    d750:	bl	4774 <SSL_do_handshake@plt>
    d754:	mov	r5, r0
    d758:	mov	r1, r0
    d75c:	ldr	r0, [r4, #56]	; 0x38
    d760:	bl	4c54 <SSL_get_error@plt>
    d764:	cmp	r5, #1
    d768:	beq	d7d0 <rb_ssl_connect_common+0xa0>
    d76c:	mov	r6, r0
    d770:	cmn	r5, #1
    d774:	movne	r3, #0
    d778:	moveq	r3, #1
    d77c:	cmp	r0, #2
    d780:	cmneq	r5, #1
    d784:	beq	d818 <rb_ssl_connect_common+0xe8>
    d788:	cmp	r0, #3
    d78c:	movne	r3, #0
    d790:	andeq	r3, r3, #1
    d794:	cmp	r3, #0
    d798:	bne	d834 <rb_ssl_connect_common+0x104>
    d79c:	bl	4c90 <__errno_location@plt>
    d7a0:	mov	r3, #5
    d7a4:	str	r3, [r0]
    d7a8:	str	r6, [r4, #64]	; 0x40
    d7ac:	mov	r2, r7
    d7b0:	mov	r1, #6
    d7b4:	mov	r0, r4
    d7b8:	bl	d6d4 <rb_ssl_connect_realcb>
    d7bc:	ldrd	r4, [sp]
    d7c0:	ldrd	r6, [sp, #8]
    d7c4:	ldr	r8, [sp, #16]
    d7c8:	add	sp, sp, #20
    d7cc:	pop	{pc}		; (ldr pc, [sp], #4)
    d7d0:	ldr	r3, [r4, #60]	; 0x3c
    d7d4:	add	r3, r3, #1
    d7d8:	str	r3, [r4, #60]	; 0x3c
    d7dc:	mov	r3, #0
    d7e0:	mov	r2, r3
    d7e4:	mov	r1, r3
    d7e8:	mov	r0, r4
    d7ec:	bl	439c <rb_settimeout@plt>
    d7f0:	mov	r3, #0
    d7f4:	mov	r2, r3
    d7f8:	mov	r1, #3
    d7fc:	mov	r0, r4
    d800:	bl	445c <rb_setselect@plt>
    d804:	mov	r2, r7
    d808:	mov	r1, #0
    d80c:	mov	r0, r4
    d810:	bl	d6d4 <rb_ssl_connect_realcb>
    d814:	b	d7bc <rb_ssl_connect_common+0x8c>
    d818:	mov	r3, r7
    d81c:	ldr	r2, [pc, #44]	; d850 <rb_ssl_connect_common+0x120>
    d820:	add	r2, pc, r2
    d824:	mov	r1, #1
    d828:	mov	r0, r4
    d82c:	bl	445c <rb_setselect@plt>
    d830:	b	d7bc <rb_ssl_connect_common+0x8c>
    d834:	mov	r3, r7
    d838:	ldr	r2, [pc, #20]	; d854 <rb_ssl_connect_common+0x124>
    d83c:	add	r2, pc, r2
    d840:	mov	r1, #2
    d844:	mov	r0, r4
    d848:	bl	445c <rb_setselect@plt>
    d84c:	b	d7bc <rb_ssl_connect_common+0x8c>
    d850:	.word	0xffffff08
    d854:	.word	0xfffffeec

0000d858 <rb_ssl_tryconn>:
    d858:	strd	r4, [sp, #-16]!
    d85c:	str	r6, [sp, #8]
    d860:	str	lr, [sp, #12]
    d864:	mov	r4, r0
    d868:	mov	r5, r2
    d86c:	cmp	r1, #0
    d870:	bne	d8bc <rb_ssl_tryconn+0x64>
    d874:	ldrb	r3, [r0, #17]
    d878:	orr	r3, r3, #32
    d87c:	strb	r3, [r0, #17]
    d880:	mov	r3, r2
    d884:	ldr	r2, [pc, #56]	; d8c4 <rb_ssl_tryconn+0x6c>
    d888:	add	r2, pc, r2
    d88c:	ldr	r1, [r5, #8]
    d890:	bl	439c <rb_settimeout@plt>
    d894:	mov	r1, #1
    d898:	mov	r0, r4
    d89c:	bl	d4c4 <rb_ssl_init_fd>
    d8a0:	mov	r1, r5
    d8a4:	mov	r0, r4
    d8a8:	bl	d730 <rb_ssl_connect_common>
    d8ac:	ldrd	r4, [sp]
    d8b0:	ldr	r6, [sp, #8]
    d8b4:	add	sp, sp, #12
    d8b8:	pop	{pc}		; (ldr pc, [sp], #4)
    d8bc:	bl	d6d4 <rb_ssl_connect_realcb>
    d8c0:	b	d8ac <rb_ssl_tryconn+0x54>
    d8c4:	.word	0xfffffe80

0000d8c8 <rb_ssl_shutdown>:
    d8c8:	strd	r4, [sp, #-16]!
    d8cc:	str	r6, [sp, #8]
    d8d0:	str	lr, [sp, #12]
    d8d4:	subs	r4, r0, #0
    d8d8:	beq	d934 <rb_ssl_shutdown+0x6c>
    d8dc:	ldr	r3, [r4, #56]	; 0x38
    d8e0:	cmp	r3, #0
    d8e4:	beq	d934 <rb_ssl_shutdown+0x6c>
    d8e8:	bl	d1e0 <rb_ssl_last_err>
    d8ec:	mov	r5, #4
    d8f0:	ldr	r0, [r4, #56]	; 0x38
    d8f4:	bl	4a50 <SSL_shutdown@plt>
    d8f8:	mov	r6, r0
    d8fc:	mov	r1, r0
    d900:	ldr	r0, [r4, #56]	; 0x38
    d904:	bl	4c54 <SSL_get_error@plt>
    d908:	cmp	r6, #0
    d90c:	bge	d924 <rb_ssl_shutdown+0x5c>
    d910:	sub	r0, r0, #2
    d914:	cmp	r0, #1
    d918:	bhi	d924 <rb_ssl_shutdown+0x5c>
    d91c:	subs	r5, r5, #1
    d920:	bne	d8f0 <rb_ssl_shutdown+0x28>
    d924:	ldr	r0, [r4, #56]	; 0x38
    d928:	bl	490c <SSL_free@plt>
    d92c:	mov	r3, #0
    d930:	str	r3, [r4, #56]	; 0x38
    d934:	ldrd	r4, [sp]
    d938:	ldr	r6, [sp, #8]
    d93c:	add	sp, sp, #12
    d940:	pop	{pc}		; (ldr pc, [sp], #4)

0000d944 <rb_init_ssl>:
    d944:	str	r4, [sp, #-8]!
    d948:	str	lr, [sp, #4]
    d94c:	ldr	r1, [pc, #32]	; d974 <rb_init_ssl+0x30>
    d950:	add	r1, pc, r1
    d954:	add	r1, r1, #28
    d958:	ldr	r0, [pc, #24]	; d978 <rb_init_ssl+0x34>
    d95c:	add	r0, pc, r0
    d960:	bl	48c4 <rb_lib_log@plt>
    d964:	mov	r0, #1
    d968:	ldr	r4, [sp]
    d96c:	add	sp, sp, #4
    d970:	pop	{pc}		; (ldr pc, [sp], #4)
    d974:	.word	0x000099ec
    d978:	.word	0x00009bf8

0000d97c <rb_setup_ssl_server>:
    d97c:	strd	r4, [sp, #-24]!	; 0xffffffe8
    d980:	strd	r6, [sp, #8]
    d984:	str	r8, [sp, #16]
    d988:	str	lr, [sp, #20]
    d98c:	sub	sp, sp, #8
    d990:	subs	r6, r0, #0
    d994:	beq	da2c <rb_setup_ssl_server+0xb0>
    d998:	mov	r4, r1
    d99c:	mov	r8, r2
    d9a0:	mov	r7, r3
    d9a4:	cmp	r1, #0
    d9a8:	moveq	r4, r6
    d9ac:	cmp	r3, #0
    d9b0:	beq	da4c <rb_setup_ssl_server+0xd0>
    d9b4:	bl	d1e0 <rb_ssl_last_err>
    d9b8:	bl	4324 <TLS_method@plt>
    d9bc:	bl	4ac8 <SSL_CTX_new@plt>
    d9c0:	subs	r5, r0, #0
    d9c4:	beq	da5c <rb_setup_ssl_server+0xe0>
    d9c8:	mov	r1, r6
    d9cc:	mov	r0, r5
    d9d0:	bl	47ec <SSL_CTX_use_certificate_chain_file@plt>
    d9d4:	cmp	r0, #1
    d9d8:	beq	da88 <rb_setup_ssl_server+0x10c>
    d9dc:	bl	d1e0 <rb_ssl_last_err>
    d9e0:	bl	d210 <rb_ssl_strerror>
    d9e4:	mov	r3, r0
    d9e8:	mov	r2, r6
    d9ec:	ldr	r1, [pc, #724]	; dcc8 <rb_setup_ssl_server+0x34c>
    d9f0:	add	r1, pc, r1
    d9f4:	add	r1, r1, #440	; 0x1b8
    d9f8:	ldr	r0, [pc, #716]	; dccc <rb_setup_ssl_server+0x350>
    d9fc:	add	r0, pc, r0
    da00:	bl	48c4 <rb_lib_log@plt>
    da04:	mov	r0, r5
    da08:	bl	4414 <SSL_CTX_free@plt>
    da0c:	mov	r4, #0
    da10:	mov	r0, r4
    da14:	add	sp, sp, #8
    da18:	ldrd	r4, [sp]
    da1c:	ldrd	r6, [sp, #8]
    da20:	ldr	r8, [sp, #16]
    da24:	add	sp, sp, #20
    da28:	pop	{pc}		; (ldr pc, [sp], #4)
    da2c:	ldr	r1, [pc, #668]	; dcd0 <rb_setup_ssl_server+0x354>
    da30:	add	r1, pc, r1
    da34:	add	r1, r1, #440	; 0x1b8
    da38:	ldr	r0, [pc, #660]	; dcd4 <rb_setup_ssl_server+0x358>
    da3c:	add	r0, pc, r0
    da40:	bl	48c4 <rb_lib_log@plt>
    da44:	mov	r4, #0
    da48:	b	da10 <rb_setup_ssl_server+0x94>
    da4c:	ldr	r7, [pc, #644]	; dcd8 <rb_setup_ssl_server+0x35c>
    da50:	add	r7, pc, r7
    da54:	add	r7, r7, #40	; 0x28
    da58:	b	d9b4 <rb_setup_ssl_server+0x38>
    da5c:	bl	d1e0 <rb_ssl_last_err>
    da60:	bl	d210 <rb_ssl_strerror>
    da64:	mov	r2, r0
    da68:	ldr	r1, [pc, #620]	; dcdc <rb_setup_ssl_server+0x360>
    da6c:	add	r1, pc, r1
    da70:	add	r1, r1, #440	; 0x1b8
    da74:	ldr	r0, [pc, #612]	; dce0 <rb_setup_ssl_server+0x364>
    da78:	add	r0, pc, r0
    da7c:	bl	48c4 <rb_lib_log@plt>
    da80:	mov	r4, #0
    da84:	b	da10 <rb_setup_ssl_server+0x94>
    da88:	mov	r2, #1
    da8c:	mov	r1, r4
    da90:	mov	r0, r5
    da94:	bl	48d0 <SSL_CTX_use_PrivateKey_file@plt>
    da98:	cmp	r0, #1
    da9c:	bne	db48 <rb_setup_ssl_server+0x1cc>
    daa0:	cmp	r8, #0
    daa4:	beq	db80 <rb_setup_ssl_server+0x204>
    daa8:	ldr	r1, [pc, #564]	; dce4 <rb_setup_ssl_server+0x368>
    daac:	add	r1, pc, r1
    dab0:	mov	r0, r8
    dab4:	bl	45c4 <fopen@plt>
    dab8:	mov	r3, #0
    dabc:	str	r3, [sp, #4]
    dac0:	subs	r4, r0, #0
    dac4:	beq	db9c <rb_setup_ssl_server+0x220>
    dac8:	mov	r3, #0
    dacc:	mov	r2, r3
    dad0:	add	r1, sp, #4
    dad4:	mov	r0, r4
    dad8:	bl	4990 <PEM_read_DHparams@plt>
    dadc:	cmp	r0, #0
    dae0:	beq	dbcc <rb_setup_ssl_server+0x250>
    dae4:	ldr	r3, [sp, #4]
    dae8:	mov	r2, #0
    daec:	mov	r1, #3
    daf0:	mov	r0, r5
    daf4:	bl	4624 <SSL_CTX_ctrl@plt>
    daf8:	ldr	r0, [sp, #4]
    dafc:	bl	4a14 <DH_free@plt>
    db00:	mov	r0, r4
    db04:	bl	4534 <fclose@plt>
    db08:	mov	r1, r7
    db0c:	mov	r0, r5
    db10:	bl	43a8 <SSL_CTX_set_cipher_list@plt>
    db14:	mov	r4, r0
    db18:	cmp	r0, #1
    db1c:	beq	dc00 <rb_setup_ssl_server+0x284>
    db20:	ldr	r1, [pc, #448]	; dce8 <rb_setup_ssl_server+0x36c>
    db24:	add	r1, pc, r1
    db28:	add	r1, r1, #440	; 0x1b8
    db2c:	ldr	r0, [pc, #440]	; dcec <rb_setup_ssl_server+0x370>
    db30:	add	r0, pc, r0
    db34:	bl	48c4 <rb_lib_log@plt>
    db38:	mov	r0, r5
    db3c:	bl	4414 <SSL_CTX_free@plt>
    db40:	mov	r4, #0
    db44:	b	da10 <rb_setup_ssl_server+0x94>
    db48:	bl	d1e0 <rb_ssl_last_err>
    db4c:	bl	d210 <rb_ssl_strerror>
    db50:	mov	r3, r0
    db54:	mov	r2, r4
    db58:	ldr	r1, [pc, #400]	; dcf0 <rb_setup_ssl_server+0x374>
    db5c:	add	r1, pc, r1
    db60:	add	r1, r1, #440	; 0x1b8
    db64:	ldr	r0, [pc, #392]	; dcf4 <rb_setup_ssl_server+0x378>
    db68:	add	r0, pc, r0
    db6c:	bl	48c4 <rb_lib_log@plt>
    db70:	mov	r0, r5
    db74:	bl	4414 <SSL_CTX_free@plt>
    db78:	mov	r4, #0
    db7c:	b	da10 <rb_setup_ssl_server+0x94>
    db80:	ldr	r1, [pc, #368]	; dcf8 <rb_setup_ssl_server+0x37c>
    db84:	add	r1, pc, r1
    db88:	add	r1, r1, #440	; 0x1b8
    db8c:	ldr	r0, [pc, #360]	; dcfc <rb_setup_ssl_server+0x380>
    db90:	add	r0, pc, r0
    db94:	bl	48c4 <rb_lib_log@plt>
    db98:	b	db08 <rb_setup_ssl_server+0x18c>
    db9c:	bl	4c90 <__errno_location@plt>
    dba0:	ldr	r0, [r0]
    dba4:	bl	4354 <strerror@plt>
    dba8:	mov	r3, r0
    dbac:	mov	r2, r8
    dbb0:	ldr	r1, [pc, #328]	; dd00 <rb_setup_ssl_server+0x384>
    dbb4:	add	r1, pc, r1
    dbb8:	add	r1, r1, #440	; 0x1b8
    dbbc:	ldr	r0, [pc, #320]	; dd04 <rb_setup_ssl_server+0x388>
    dbc0:	add	r0, pc, r0
    dbc4:	bl	48c4 <rb_lib_log@plt>
    dbc8:	b	db08 <rb_setup_ssl_server+0x18c>
    dbcc:	bl	d1e0 <rb_ssl_last_err>
    dbd0:	bl	d210 <rb_ssl_strerror>
    dbd4:	mov	r3, r0
    dbd8:	mov	r2, r8
    dbdc:	ldr	r1, [pc, #292]	; dd08 <rb_setup_ssl_server+0x38c>
    dbe0:	add	r1, pc, r1
    dbe4:	add	r1, r1, #440	; 0x1b8
    dbe8:	ldr	r0, [pc, #284]	; dd0c <rb_setup_ssl_server+0x390>
    dbec:	add	r0, pc, r0
    dbf0:	bl	48c4 <rb_lib_log@plt>
    dbf4:	mov	r0, r4
    dbf8:	bl	4534 <fclose@plt>
    dbfc:	b	db08 <rb_setup_ssl_server+0x18c>
    dc00:	mov	r3, #0
    dc04:	mov	r2, r3
    dc08:	mov	r1, #44	; 0x2c
    dc0c:	mov	r0, r5
    dc10:	bl	4624 <SSL_CTX_ctrl@plt>
    dc14:	ldr	r2, [pc, #244]	; dd10 <rb_setup_ssl_server+0x394>
    dc18:	add	r2, pc, r2
    dc1c:	mov	r1, #5
    dc20:	mov	r0, r5
    dc24:	bl	4cc0 <SSL_CTX_set_verify@plt>
    dc28:	mov	r1, #2048	; 0x800
    dc2c:	mov	r0, r5
    dc30:	bl	44c8 <SSL_CTX_clear_options@plt>
    dc34:	mov	r1, #67108864	; 0x4000000
    dc38:	mov	r0, r5
    dc3c:	bl	4804 <SSL_CTX_set_options@plt>
    dc40:	mov	r1, #16384	; 0x4000
    dc44:	mov	r0, r5
    dc48:	bl	4804 <SSL_CTX_set_options@plt>
    dc4c:	mov	r1, #4194304	; 0x400000
    dc50:	mov	r0, r5
    dc54:	bl	4804 <SSL_CTX_set_options@plt>
    dc58:	mov	r1, #0
    dc5c:	mov	r0, r5
    dc60:	bl	4804 <SSL_CTX_set_options@plt>
    dc64:	mov	r1, #0
    dc68:	mov	r0, r5
    dc6c:	bl	4804 <SSL_CTX_set_options@plt>
    dc70:	ldr	r3, [pc, #156]	; dd14 <rb_setup_ssl_server+0x398>
    dc74:	add	r3, pc, r3
    dc78:	mov	r2, #0
    dc7c:	mov	r1, #92	; 0x5c
    dc80:	mov	r0, r5
    dc84:	bl	4624 <SSL_CTX_ctrl@plt>
    dc88:	ldr	r3, [pc, #136]	; dd18 <rb_setup_ssl_server+0x39c>
    dc8c:	add	r3, pc, r3
    dc90:	ldr	r0, [r3, #512]	; 0x200
    dc94:	cmp	r0, #0
    dc98:	beq	dca0 <rb_setup_ssl_server+0x324>
    dc9c:	bl	4414 <SSL_CTX_free@plt>
    dca0:	ldr	r3, [pc, #116]	; dd1c <rb_setup_ssl_server+0x3a0>
    dca4:	add	r3, pc, r3
    dca8:	str	r5, [r3, #512]	; 0x200
    dcac:	ldr	r1, [pc, #108]	; dd20 <rb_setup_ssl_server+0x3a4>
    dcb0:	add	r1, pc, r1
    dcb4:	add	r1, r1, #440	; 0x1b8
    dcb8:	ldr	r0, [pc, #100]	; dd24 <rb_setup_ssl_server+0x3a8>
    dcbc:	add	r0, pc, r0
    dcc0:	bl	48c4 <rb_lib_log@plt>
    dcc4:	b	da10 <rb_setup_ssl_server+0x94>
    dcc8:	.word	0x0000994c
    dccc:	.word	0x00009bb0
    dcd0:	.word	0x0000990c
    dcd4:	.word	0x00009b38
    dcd8:	.word	0x000098ec
    dcdc:	.word	0x000098d0
    dce0:	.word	0x00009b20
    dce4:	.word	0x0000a188
    dce8:	.word	0x00009818
    dcec:	.word	0x00009b3c
    dcf0:	.word	0x000097e0
    dcf4:	.word	0x00009a78
    dcf8:	.word	0x000097b8
    dcfc:	.word	0x00009a7c
    dd00:	.word	0x00009788
    dd04:	.word	0x00009a70
    dd08:	.word	0x0000975c
    dd0c:	.word	0x00009a5c
    dd10:	.word	0xfffff57c
    dd14:	.word	0x0001b7e4
    dd18:	.word	0x0002dd88
    dd1c:	.word	0x0002dd70
    dd20:	.word	0x0000968c
    dd24:	.word	0x000099f0

0000dd28 <rb_init_prng>:
    dd28:	strd	r4, [sp, #-16]!
    dd2c:	str	r6, [sp, #8]
    dd30:	str	lr, [sp, #12]
    dd34:	mov	r5, r0
    dd38:	mov	r4, r1
    dd3c:	bl	d1e0 <rb_ssl_last_err>
    dd40:	cmp	r4, #0
    dd44:	beq	dd94 <rb_init_prng+0x6c>
    dd48:	bl	4b64 <RAND_status@plt>
    dd4c:	mov	r4, r0
    dd50:	cmp	r0, #1
    dd54:	beq	ddd0 <rb_init_prng+0xa8>
    dd58:	bl	d1e0 <rb_ssl_last_err>
    dd5c:	bl	d210 <rb_ssl_strerror>
    dd60:	mov	r2, r0
    dd64:	ldr	r1, [pc, #128]	; ddec <rb_init_prng+0xc4>
    dd68:	add	r1, pc, r1
    dd6c:	add	r1, r1, #460	; 0x1cc
    dd70:	ldr	r0, [pc, #120]	; ddf0 <rb_init_prng+0xc8>
    dd74:	add	r0, pc, r0
    dd78:	bl	48c4 <rb_lib_log@plt>
    dd7c:	mov	r4, #0
    dd80:	mov	r0, r4
    dd84:	ldrd	r4, [sp]
    dd88:	ldr	r6, [sp, #8]
    dd8c:	add	sp, sp, #12
    dd90:	pop	{pc}		; (ldr pc, [sp], #4)
    dd94:	mvn	r1, #0
    dd98:	mov	r0, r5
    dd9c:	bl	43e4 <RAND_load_file@plt>
    dda0:	cmp	r0, #0
    dda4:	bge	dd48 <rb_init_prng+0x20>
    dda8:	bl	d1e0 <rb_ssl_last_err>
    ddac:	bl	d210 <rb_ssl_strerror>
    ddb0:	mov	r2, r0
    ddb4:	ldr	r1, [pc, #56]	; ddf4 <rb_init_prng+0xcc>
    ddb8:	add	r1, pc, r1
    ddbc:	add	r1, r1, #460	; 0x1cc
    ddc0:	ldr	r0, [pc, #48]	; ddf8 <rb_init_prng+0xd0>
    ddc4:	add	r0, pc, r0
    ddc8:	bl	48c4 <rb_lib_log@plt>
    ddcc:	b	dd48 <rb_init_prng+0x20>
    ddd0:	ldr	r1, [pc, #36]	; ddfc <rb_init_prng+0xd4>
    ddd4:	add	r1, pc, r1
    ddd8:	add	r1, r1, #460	; 0x1cc
    dddc:	ldr	r0, [pc, #28]	; de00 <rb_init_prng+0xd8>
    dde0:	add	r0, pc, r0
    dde4:	bl	48c4 <rb_lib_log@plt>
    dde8:	b	dd80 <rb_init_prng+0x58>
    ddec:	.word	0x000095d4
    ddf0:	.word	0x00009974
    ddf4:	.word	0x00009584
    ddf8:	.word	0x0000990c
    ddfc:	.word	0x00009568
    de00:	.word	0x0000991c

0000de04 <rb_get_random>:
    de04:	strd	r4, [sp, #-16]!
    de08:	str	r6, [sp, #8]
    de0c:	str	lr, [sp, #12]
    de10:	mov	r4, r0
    de14:	mov	r5, r1
    de18:	bl	d1e0 <rb_ssl_last_err>
    de1c:	mov	r1, r5
    de20:	mov	r0, r4
    de24:	bl	4a8c <RAND_bytes@plt>
    de28:	cmp	r0, #1
    de2c:	bne	de40 <rb_get_random+0x3c>
    de30:	ldrd	r4, [sp]
    de34:	ldr	r6, [sp, #8]
    de38:	add	sp, sp, #12
    de3c:	pop	{pc}		; (ldr pc, [sp], #4)
    de40:	bl	d1e0 <rb_ssl_last_err>
    de44:	bl	d210 <rb_ssl_strerror>
    de48:	mov	r2, r0
    de4c:	ldr	r1, [pc, #24]	; de6c <rb_get_random+0x68>
    de50:	add	r1, pc, r1
    de54:	add	r1, r1, #476	; 0x1dc
    de58:	ldr	r0, [pc, #16]	; de70 <rb_get_random+0x6c>
    de5c:	add	r0, pc, r0
    de60:	bl	48c4 <rb_lib_log@plt>
    de64:	mov	r0, #0
    de68:	b	de30 <rb_get_random+0x2c>
    de6c:	.word	0x000094ec
    de70:	.word	0x000098b8

0000de74 <rb_get_ssl_strerror>:
    de74:	str	r4, [sp, #-8]!
    de78:	str	lr, [sp, #4]
    de7c:	ldr	r0, [r0, #64]	; 0x40
    de80:	bl	d210 <rb_ssl_strerror>
    de84:	ldr	r4, [sp]
    de88:	add	sp, sp, #4
    de8c:	pop	{pc}		; (ldr pc, [sp], #4)

0000de90 <rb_get_ssl_certfp>:
    de90:	strd	r4, [sp, #-24]!	; 0xffffffe8
    de94:	strd	r6, [sp, #8]
    de98:	str	r8, [sp, #16]
    de9c:	str	lr, [sp, #20]
    dea0:	subs	r4, r0, #0
    dea4:	moveq	r4, #0
    dea8:	beq	df7c <rb_get_ssl_certfp+0xec>
    deac:	ldr	r0, [r4, #56]	; 0x38
    deb0:	cmp	r0, #0
    deb4:	moveq	r4, #0
    deb8:	beq	df7c <rb_get_ssl_certfp+0xec>
    debc:	mov	r6, r2
    dec0:	mov	r5, r1
    dec4:	bl	49cc <SSL_get_peer_certificate@plt>
    dec8:	subs	r7, r0, #0
    decc:	moveq	r4, #0
    ded0:	beq	df7c <rb_get_ssl_certfp+0xec>
    ded4:	ldr	r0, [r4, #56]	; 0x38
    ded8:	bl	49f0 <SSL_get_verify_result@plt>
    dedc:	cmp	r0, #27
    dee0:	addls	pc, pc, r0, lsl #2
    dee4:	b	df70 <rb_get_ssl_certfp+0xe0>
    dee8:	b	df58 <rb_get_ssl_certfp+0xc8>
    deec:	b	df70 <rb_get_ssl_certfp+0xe0>
    def0:	b	df70 <rb_get_ssl_certfp+0xe0>
    def4:	b	df70 <rb_get_ssl_certfp+0xe0>
    def8:	b	df70 <rb_get_ssl_certfp+0xe0>
    defc:	b	df70 <rb_get_ssl_certfp+0xe0>
    df00:	b	df70 <rb_get_ssl_certfp+0xe0>
    df04:	b	df70 <rb_get_ssl_certfp+0xe0>
    df08:	b	df70 <rb_get_ssl_certfp+0xe0>
    df0c:	b	df70 <rb_get_ssl_certfp+0xe0>
    df10:	b	df70 <rb_get_ssl_certfp+0xe0>
    df14:	b	df70 <rb_get_ssl_certfp+0xe0>
    df18:	b	df70 <rb_get_ssl_certfp+0xe0>
    df1c:	b	df70 <rb_get_ssl_certfp+0xe0>
    df20:	b	df70 <rb_get_ssl_certfp+0xe0>
    df24:	b	df70 <rb_get_ssl_certfp+0xe0>
    df28:	b	df70 <rb_get_ssl_certfp+0xe0>
    df2c:	b	df70 <rb_get_ssl_certfp+0xe0>
    df30:	b	df58 <rb_get_ssl_certfp+0xc8>
    df34:	b	df58 <rb_get_ssl_certfp+0xc8>
    df38:	b	df58 <rb_get_ssl_certfp+0xc8>
    df3c:	b	df58 <rb_get_ssl_certfp+0xc8>
    df40:	b	df70 <rb_get_ssl_certfp+0xe0>
    df44:	b	df70 <rb_get_ssl_certfp+0xe0>
    df48:	b	df70 <rb_get_ssl_certfp+0xe0>
    df4c:	b	df70 <rb_get_ssl_certfp+0xe0>
    df50:	b	df70 <rb_get_ssl_certfp+0xe0>
    df54:	b	df58 <rb_get_ssl_certfp+0xc8>
    df58:	mov	r2, r6
    df5c:	mov	r1, r5
    df60:	mov	r0, r7
    df64:	bl	d240 <make_certfp>
    df68:	mov	r4, r0
    df6c:	b	df74 <rb_get_ssl_certfp+0xe4>
    df70:	mov	r4, #0
    df74:	mov	r0, r7
    df78:	bl	4c0c <X509_free@plt>
    df7c:	mov	r0, r4
    df80:	ldrd	r4, [sp]
    df84:	ldrd	r6, [sp, #8]
    df88:	ldr	r8, [sp, #16]
    df8c:	add	sp, sp, #20
    df90:	pop	{pc}		; (ldr pc, [sp], #4)

0000df94 <rb_get_ssl_certfp_file>:
    df94:	strd	r4, [sp, #-24]!	; 0xffffffe8
    df98:	strd	r6, [sp, #8]
    df9c:	str	r8, [sp, #16]
    dfa0:	str	lr, [sp, #20]
    dfa4:	mov	r6, r1
    dfa8:	mov	r7, r2
    dfac:	ldr	r1, [pc, #124]	; e030 <rb_get_ssl_certfp_file+0x9c>
    dfb0:	add	r1, pc, r1
    dfb4:	bl	45c4 <fopen@plt>
    dfb8:	subs	r4, r0, #0
    dfbc:	beq	e028 <rb_get_ssl_certfp_file+0x94>
    dfc0:	mov	r3, #0
    dfc4:	mov	r2, r3
    dfc8:	mov	r1, r3
    dfcc:	mov	r0, r4
    dfd0:	bl	47c8 <PEM_read_X509@plt>
    dfd4:	subs	r5, r0, #0
    dfd8:	beq	e018 <rb_get_ssl_certfp_file+0x84>
    dfdc:	mov	r2, r7
    dfe0:	mov	r1, r6
    dfe4:	mov	r0, r5
    dfe8:	bl	d240 <make_certfp>
    dfec:	mov	r6, r0
    dff0:	mov	r0, r5
    dff4:	bl	4c0c <X509_free@plt>
    dff8:	mov	r0, r4
    dffc:	bl	4534 <fclose@plt>
    e000:	mov	r0, r6
    e004:	ldrd	r4, [sp]
    e008:	ldrd	r6, [sp, #8]
    e00c:	ldr	r8, [sp, #16]
    e010:	add	sp, sp, #20
    e014:	pop	{pc}		; (ldr pc, [sp], #4)
    e018:	mov	r0, r4
    e01c:	bl	4534 <fclose@plt>
    e020:	mov	r6, #0
    e024:	b	e000 <rb_get_ssl_certfp_file+0x6c>
    e028:	mvn	r6, #0
    e02c:	b	e000 <rb_get_ssl_certfp_file+0x6c>
    e030:	.word	0x00009c84

0000e034 <rb_get_ssl_info>:
    e034:	strd	r4, [sp, #-16]!
    e038:	str	r6, [sp, #8]
    e03c:	str	lr, [sp, #12]
    e040:	sub	sp, sp, #16
    e044:	mov	r4, r0
    e048:	mov	r5, r1
    e04c:	bl	4684 <OpenSSL_version_num@plt>
    e050:	movw	r3, #4175	; 0x104f
    e054:	movt	r3, #4112	; 0x1010
    e058:	cmp	r0, r3
    e05c:	beq	e0b4 <rb_get_ssl_info+0x80>
    e060:	bl	4684 <OpenSSL_version_num@plt>
    e064:	mov	r6, r0
    e068:	mov	r0, #0
    e06c:	bl	4c3c <OpenSSL_version@plt>
    e070:	str	r0, [sp, #8]
    e074:	str	r6, [sp, #4]
    e078:	ldr	r3, [pc, #96]	; e0e0 <rb_get_ssl_info+0xac>
    e07c:	add	r3, pc, r3
    e080:	str	r3, [sp]
    e084:	movw	r3, #4175	; 0x104f
    e088:	movt	r3, #4112	; 0x1010
    e08c:	ldr	r2, [pc, #80]	; e0e4 <rb_get_ssl_info+0xb0>
    e090:	add	r2, pc, r2
    e094:	mov	r1, r5
    e098:	mov	r0, r4
    e09c:	bl	4b58 <snprintf@plt>
    e0a0:	add	sp, sp, #16
    e0a4:	ldrd	r4, [sp]
    e0a8:	ldr	r6, [sp, #8]
    e0ac:	add	sp, sp, #12
    e0b0:	pop	{pc}		; (ldr pc, [sp], #4)
    e0b4:	ldr	r3, [pc, #44]	; e0e8 <rb_get_ssl_info+0xb4>
    e0b8:	add	r3, pc, r3
    e0bc:	str	r3, [sp]
    e0c0:	movw	r3, #4175	; 0x104f
    e0c4:	movt	r3, #4112	; 0x1010
    e0c8:	ldr	r2, [pc, #28]	; e0ec <rb_get_ssl_info+0xb8>
    e0cc:	add	r2, pc, r2
    e0d0:	mov	r1, r5
    e0d4:	mov	r0, r4
    e0d8:	bl	4b58 <snprintf@plt>
    e0dc:	b	e0a0 <rb_get_ssl_info+0x6c>
    e0e0:	.word	0x000096d0
    e0e4:	.word	0x000096d8
    e0e8:	.word	0x00009694
    e0ec:	.word	0x0000965c

0000e0f0 <rb_ssl_get_cipher>:
    e0f0:	strd	r4, [sp, #-12]!
    e0f4:	str	lr, [sp, #8]
    e0f8:	sub	sp, sp, #12
    e0fc:	subs	r4, r0, #0
    e100:	beq	e160 <rb_ssl_get_cipher+0x70>
    e104:	ldr	r0, [r4, #56]	; 0x38
    e108:	cmp	r0, #0
    e10c:	beq	e150 <rb_ssl_get_cipher+0x60>
    e110:	bl	4c60 <SSL_get_version@plt>
    e114:	mov	r5, r0
    e118:	ldr	r0, [r4, #56]	; 0x38
    e11c:	bl	44d4 <SSL_get_current_cipher@plt>
    e120:	bl	466c <SSL_CIPHER_get_name@plt>
    e124:	ldr	r4, [pc, #60]	; e168 <rb_ssl_get_cipher+0x78>
    e128:	add	r4, pc, r4
    e12c:	add	r4, r4, #516	; 0x204
    e130:	str	r0, [sp]
    e134:	mov	r3, r5
    e138:	ldr	r2, [pc, #44]	; e16c <rb_ssl_get_cipher+0x7c>
    e13c:	add	r2, pc, r2
    e140:	mov	r1, #512	; 0x200
    e144:	mov	r0, r4
    e148:	bl	4b58 <snprintf@plt>
    e14c:	mov	r0, r4
    e150:	add	sp, sp, #12
    e154:	ldrd	r4, [sp]
    e158:	add	sp, sp, #8
    e15c:	pop	{pc}		; (ldr pc, [sp], #4)
    e160:	mov	r0, r4
    e164:	b	e150 <rb_ssl_get_cipher+0x60>
    e168:	.word	0x0002d8ec
    e16c:	.word	0x00009660

0000e170 <rb_ssl_read>:
    e170:	push	{lr}		; (str lr, [sp, #-4]!)
    e174:	sub	sp, sp, #12
    e178:	str	r2, [sp]
    e17c:	mov	r3, #0
    e180:	mov	r2, r1
    e184:	mov	r1, r0
    e188:	mov	r0, r3
    e18c:	bl	d3b0 <rb_ssl_read_or_write>
    e190:	add	sp, sp, #12
    e194:	pop	{pc}		; (ldr pc, [sp], #4)

0000e198 <rb_ssl_write>:
    e198:	push	{lr}		; (str lr, [sp, #-4]!)
    e19c:	sub	sp, sp, #12
    e1a0:	str	r2, [sp]
    e1a4:	mov	r3, r1
    e1a8:	mov	r2, #0
    e1ac:	mov	r1, r0
    e1b0:	mov	r0, #1
    e1b4:	bl	d3b0 <rb_ssl_read_or_write>
    e1b8:	add	sp, sp, #12
    e1bc:	pop	{pc}		; (ldr pc, [sp], #4)

0000e1c0 <rb_supports_ssl>:
    e1c0:	mov	r0, #1
    e1c4:	bx	lr

0000e1c8 <rb_ssl_handshake_count>:
    e1c8:	ldr	r0, [r0, #60]	; 0x3c
    e1cc:	bx	lr

0000e1d0 <rb_ssl_clear_handshake_count>:
    e1d0:	mov	r3, #0
    e1d4:	str	r3, [r0, #60]	; 0x3c
    e1d8:	bx	lr

0000e1dc <rb_ssl_start_accepted>:
    e1dc:	strd	r4, [sp, #-24]!	; 0xffffffe8
    e1e0:	strd	r6, [sp, #8]
    e1e4:	str	r8, [sp, #16]
    e1e8:	str	lr, [sp, #20]
    e1ec:	mov	r4, r0
    e1f0:	mov	r7, r1
    e1f4:	mov	r5, r2
    e1f8:	mov	r6, r3
    e1fc:	ldrb	r3, [r0, #17]
    e200:	orr	r3, r3, #32
    e204:	strb	r3, [r0, #17]
    e208:	mov	r1, #144	; 0x90
    e20c:	mov	r0, #1
    e210:	bl	45a0 <calloc@plt>
    e214:	cmp	r0, #0
    e218:	beq	e280 <rb_ssl_start_accepted+0xa4>
    e21c:	str	r0, [r4, #52]	; 0x34
    e220:	str	r7, [r0, #132]	; 0x84
    e224:	str	r5, [r0, #140]	; 0x8c
    e228:	mov	r5, #0
    e22c:	str	r5, [r0, #128]	; 0x80
    e230:	mov	r2, #128	; 0x80
    e234:	mov	r1, r5
    e238:	bl	45dc <memset@plt>
    e23c:	mov	r3, r5
    e240:	ldr	r2, [pc, #60]	; e284 <rb_ssl_start_accepted+0xa8>
    e244:	add	r2, pc, r2
    e248:	mov	r1, r6
    e24c:	mov	r0, r4
    e250:	bl	439c <rb_settimeout@plt>
    e254:	mov	r1, r5
    e258:	mov	r0, r4
    e25c:	bl	d4c4 <rb_ssl_init_fd>
    e260:	mov	r1, r5
    e264:	mov	r0, r4
    e268:	bl	d57c <rb_ssl_accept_common>
    e26c:	ldrd	r4, [sp]
    e270:	ldrd	r6, [sp, #8]
    e274:	ldr	r8, [sp, #16]
    e278:	add	sp, sp, #20
    e27c:	pop	{pc}		; (ldr pc, [sp], #4)
    e280:	bl	4930 <rb_outofmemory@plt>
    e284:	.word	0xffffef58

0000e288 <rb_ssl_accept_setup>:
    e288:	strd	r4, [sp, #-24]!	; 0xffffffe8
    e28c:	strd	r6, [sp, #8]
    e290:	str	r8, [sp, #16]
    e294:	str	lr, [sp, #20]
    e298:	mov	r8, r0
    e29c:	mov	r4, r1
    e2a0:	mov	r7, r2
    e2a4:	mov	r6, r3
    e2a8:	ldrb	r3, [r1, #17]
    e2ac:	orr	r3, r3, #32
    e2b0:	strb	r3, [r1, #17]
    e2b4:	mov	r1, #144	; 0x90
    e2b8:	mov	r0, #1
    e2bc:	bl	45a0 <calloc@plt>
    e2c0:	subs	r5, r0, #0
    e2c4:	beq	e348 <rb_ssl_accept_setup+0xc0>
    e2c8:	str	r5, [r4, #52]	; 0x34
    e2cc:	ldr	r3, [r8, #52]	; 0x34
    e2d0:	ldr	r2, [r3, #132]	; 0x84
    e2d4:	str	r2, [r5, #132]	; 0x84
    e2d8:	ldr	r3, [r3, #140]	; 0x8c
    e2dc:	str	r3, [r5, #140]	; 0x8c
    e2e0:	str	r6, [r5, #128]	; 0x80
    e2e4:	mov	r2, #128	; 0x80
    e2e8:	mov	r1, #0
    e2ec:	mov	r0, r5
    e2f0:	bl	45dc <memset@plt>
    e2f4:	mov	r2, r6
    e2f8:	mov	r1, r7
    e2fc:	mov	r0, r5
    e300:	bl	47bc <memcpy@plt>
    e304:	mov	r3, #0
    e308:	ldr	r2, [pc, #60]	; e34c <rb_ssl_accept_setup+0xc4>
    e30c:	add	r2, pc, r2
    e310:	mov	r1, #10
    e314:	mov	r0, r4
    e318:	bl	439c <rb_settimeout@plt>
    e31c:	mov	r1, #0
    e320:	mov	r0, r4
    e324:	bl	d4c4 <rb_ssl_init_fd>
    e328:	mov	r1, #0
    e32c:	mov	r0, r4
    e330:	bl	d57c <rb_ssl_accept_common>
    e334:	ldrd	r4, [sp]
    e338:	ldrd	r6, [sp, #8]
    e33c:	ldr	r8, [sp, #16]
    e340:	add	sp, sp, #20
    e344:	pop	{pc}		; (ldr pc, [sp], #4)
    e348:	bl	4930 <rb_outofmemory@plt>
    e34c:	.word	0xffffee90

0000e350 <rb_ssl_listen>:
    e350:	str	r4, [sp, #-8]!
    e354:	str	lr, [sp, #4]
    e358:	mov	r4, r0
    e35c:	bl	4ba0 <rb_listen@plt>
    e360:	mov	r3, #52	; 0x34
    e364:	strb	r3, [r4, #17]
    e368:	ldr	r4, [sp]
    e36c:	add	sp, sp, #4
    e370:	pop	{pc}		; (ldr pc, [sp], #4)

0000e374 <rb_connect_tcp_ssl>:
    e374:	strd	r4, [sp, #-24]!	; 0xffffffe8
    e378:	strd	r6, [sp, #8]
    e37c:	str	r8, [sp, #16]
    e380:	str	lr, [sp, #20]
    e384:	sub	sp, sp, #8
    e388:	ldr	r7, [sp, #36]	; 0x24
    e38c:	subs	r4, r0, #0
    e390:	beq	e3e4 <rb_connect_tcp_ssl+0x70>
    e394:	mov	r8, r3
    e398:	mov	r6, r2
    e39c:	mov	r5, r1
    e3a0:	mov	r1, #12
    e3a4:	mov	r0, #1
    e3a8:	bl	45a0 <calloc@plt>
    e3ac:	cmp	r0, #0
    e3b0:	beq	e3fc <rb_connect_tcp_ssl+0x88>
    e3b4:	ldr	r3, [sp, #32]
    e3b8:	str	r3, [r0, #4]
    e3bc:	str	r8, [r0]
    e3c0:	str	r7, [r0, #8]
    e3c4:	str	r7, [sp, #4]
    e3c8:	str	r0, [sp]
    e3cc:	ldr	r3, [pc, #44]	; e400 <rb_connect_tcp_ssl+0x8c>
    e3d0:	add	r3, pc, r3
    e3d4:	mov	r2, r6
    e3d8:	mov	r1, r5
    e3dc:	mov	r0, r4
    e3e0:	bl	43d8 <rb_connect_tcp@plt>
    e3e4:	add	sp, sp, #8
    e3e8:	ldrd	r4, [sp]
    e3ec:	ldrd	r6, [sp, #8]
    e3f0:	ldr	r8, [sp, #16]
    e3f4:	add	sp, sp, #20
    e3f8:	pop	{pc}		; (ldr pc, [sp], #4)
    e3fc:	bl	4930 <rb_outofmemory@plt>
    e400:	.word	0xfffff480

0000e404 <rb_ssl_start_connected>:
    e404:	strd	r4, [sp, #-24]!	; 0xffffffe8
    e408:	strd	r6, [sp, #8]
    e40c:	str	r8, [sp, #16]
    e410:	str	lr, [sp, #20]
    e414:	subs	r4, r0, #0
    e418:	beq	e4a4 <rb_ssl_start_connected+0xa0>
    e41c:	mov	r6, r3
    e420:	mov	r7, r2
    e424:	mov	r8, r1
    e428:	mov	r1, #12
    e42c:	mov	r0, #1
    e430:	bl	45a0 <calloc@plt>
    e434:	subs	r5, r0, #0
    e438:	beq	e4b8 <rb_ssl_start_connected+0xb4>
    e43c:	str	r7, [r5, #4]
    e440:	str	r8, [r5]
    e444:	str	r6, [r5, #8]
    e448:	mov	r1, #268	; 0x10c
    e44c:	mov	r0, #1
    e450:	bl	45a0 <calloc@plt>
    e454:	cmp	r0, #0
    e458:	beq	e4bc <rb_ssl_start_connected+0xb8>
    e45c:	str	r0, [r4, #48]	; 0x30
    e460:	str	r8, [r0, #260]	; 0x104
    e464:	str	r7, [r0, #264]	; 0x108
    e468:	ldrb	r3, [r4, #17]
    e46c:	orr	r3, r3, #32
    e470:	strb	r3, [r4, #17]
    e474:	mov	r3, r5
    e478:	ldr	r2, [pc, #64]	; e4c0 <rb_ssl_start_connected+0xbc>
    e47c:	add	r2, pc, r2
    e480:	mov	r1, r6
    e484:	mov	r0, r4
    e488:	bl	439c <rb_settimeout@plt>
    e48c:	mov	r1, #1
    e490:	mov	r0, r4
    e494:	bl	d4c4 <rb_ssl_init_fd>
    e498:	mov	r1, r5
    e49c:	mov	r0, r4
    e4a0:	bl	d730 <rb_ssl_connect_common>
    e4a4:	ldrd	r4, [sp]
    e4a8:	ldrd	r6, [sp, #8]
    e4ac:	ldr	r8, [sp, #16]
    e4b0:	add	sp, sp, #20
    e4b4:	pop	{pc}		; (ldr pc, [sp], #4)
    e4b8:	bl	4930 <rb_outofmemory@plt>
    e4bc:	bl	4930 <rb_outofmemory@plt>
    e4c0:	.word	0xfffff28c

0000e4c4 <rb_event_add_common>:
    e4c4:	strd	r4, [sp, #-24]!	; 0xffffffe8
    e4c8:	strd	r6, [sp, #8]
    e4cc:	str	r8, [sp, #16]
    e4d0:	str	lr, [sp, #20]
    e4d4:	mov	r8, r0
    e4d8:	mov	r6, r1
    e4dc:	mov	r7, r2
    e4e0:	mov	r5, r3
    e4e4:	mov	r1, #48	; 0x30
    e4e8:	mov	r0, #1
    e4ec:	bl	45a0 <calloc@plt>
    e4f0:	subs	r4, r0, #0
    e4f4:	beq	e5dc <rb_event_add_common+0x118>
    e4f8:	str	r6, [r4, #12]
    e4fc:	mov	r0, #33	; 0x21
    e500:	bl	4954 <malloc@plt>
    e504:	subs	r6, r0, #0
    e508:	beq	e5e0 <rb_event_add_common+0x11c>
    e50c:	mov	r2, #33	; 0x21
    e510:	mov	r1, r8
    e514:	mov	r0, r6
    e518:	bl	4654 <rb_strlcpy@plt>
    e51c:	str	r6, [r4, #20]
    e520:	str	r7, [r4, #16]
    e524:	bl	47a4 <rb_current_time@plt>
    e528:	add	r0, r0, r5
    e52c:	str	r0, [r4, #28]
    e530:	str	r5, [r4, #32]
    e534:	ldr	r3, [sp, #24]
    e538:	str	r3, [r4, #24]
    e53c:	mov	r3, #0
    e540:	str	r3, [r4, #44]	; 0x2c
    e544:	ldr	r3, [pc, #188]	; e608 <rb_event_add_common+0x144>
    e548:	add	r3, pc, r3
    e54c:	ldr	r2, [r3]
    e550:	cmn	r2, #1
    e554:	movne	r3, #0
    e558:	moveq	r3, #1
    e55c:	cmp	r0, r2
    e560:	orrlt	r3, r3, #1
    e564:	cmp	r3, #0
    e568:	beq	e578 <rb_event_add_common+0xb4>
    e56c:	ldr	r3, [pc, #152]	; e60c <rb_event_add_common+0x148>
    e570:	add	r3, pc, r3
    e574:	str	r0, [r3]
    e578:	str	r4, [r4]
    e57c:	mov	r3, #0
    e580:	str	r3, [r4, #4]
    e584:	ldr	r3, [pc, #132]	; e610 <rb_event_add_common+0x14c>
    e588:	add	r3, pc, r3
    e58c:	ldr	r3, [r3]
    e590:	str	r3, [r4, #8]
    e594:	cmp	r3, #0
    e598:	strne	r4, [r3, #4]
    e59c:	beq	e5e4 <rb_event_add_common+0x120>
    e5a0:	ldr	r3, [pc, #108]	; e614 <rb_event_add_common+0x150>
    e5a4:	add	r3, pc, r3
    e5a8:	str	r4, [r3]
    e5ac:	ldr	r2, [r3, #8]
    e5b0:	add	r2, r2, #1
    e5b4:	str	r2, [r3, #8]
    e5b8:	mov	r1, r5
    e5bc:	mov	r0, r4
    e5c0:	bl	be54 <rb_io_sched_event>
    e5c4:	mov	r0, r4
    e5c8:	ldrd	r4, [sp]
    e5cc:	ldrd	r6, [sp, #8]
    e5d0:	ldr	r8, [sp, #16]
    e5d4:	add	sp, sp, #20
    e5d8:	pop	{pc}		; (ldr pc, [sp], #4)
    e5dc:	bl	4930 <rb_outofmemory@plt>
    e5e0:	bl	4930 <rb_outofmemory@plt>
    e5e4:	ldr	r3, [pc, #44]	; e618 <rb_event_add_common+0x154>
    e5e8:	add	r3, pc, r3
    e5ec:	ldr	r3, [r3, #4]
    e5f0:	cmp	r3, #0
    e5f4:	bne	e5a0 <rb_event_add_common+0xdc>
    e5f8:	ldr	r3, [pc, #28]	; e61c <rb_event_add_common+0x158>
    e5fc:	add	r3, pc, r3
    e600:	str	r4, [r3, #4]
    e604:	b	e5a0 <rb_event_add_common+0xdc>
    e608:	.word	0x0001af2c
    e60c:	.word	0x0001af04
    e610:	.word	0x0002d890
    e614:	.word	0x0002d874
    e618:	.word	0x0002d830
    e61c:	.word	0x0002d81c

0000e620 <rb_event_frequency>:
    e620:	cmp	r0, #0
    e624:	bxge	lr
    e628:	str	r4, [sp, #-8]!
    e62c:	str	lr, [sp, #4]
    e630:	cmp	r0, #0
    e634:	rsblt	r0, r0, #0
    e638:	lsl	r0, r0, #1
    e63c:	movw	r4, #21846	; 0x5556
    e640:	movt	r4, #21845	; 0x5555
    e644:	smull	r3, r4, r4, r0
    e648:	sub	r4, r4, r0, asr #31
    e64c:	bl	4aec <rand@plt>
    e650:	movw	r2, #19923	; 0x4dd3
    e654:	movt	r2, #4194	; 0x1062
    e658:	smull	r3, r1, r2, r0
    e65c:	asr	r3, r0, #31
    e660:	rsb	r3, r3, r1, asr #6
    e664:	mov	r1, #1000	; 0x3e8
    e668:	mls	r3, r1, r3, r0
    e66c:	mul	r3, r4, r3
    e670:	smull	r1, r2, r2, r3
    e674:	asr	r0, r3, #31
    e678:	rsb	r0, r0, r2, asr #6
    e67c:	add	r0, r0, r4
    e680:	ldr	r4, [sp]
    e684:	add	sp, sp, #4
    e688:	pop	{pc}		; (ldr pc, [sp], #4)

0000e68c <rb_event_add>:
    e68c:	strd	r4, [sp, #-16]!
    e690:	str	r6, [sp, #8]
    e694:	str	lr, [sp, #12]
    e698:	sub	sp, sp, #8
    e69c:	mov	r4, r0
    e6a0:	mov	r5, r1
    e6a4:	mov	r6, r2
    e6a8:	cmp	r3, #0
    e6ac:	ble	e6d8 <rb_event_add+0x4c>
    e6b0:	str	r3, [sp]
    e6b4:	mov	r2, r6
    e6b8:	mov	r1, r5
    e6bc:	mov	r0, r4
    e6c0:	bl	e4c4 <rb_event_add_common>
    e6c4:	add	sp, sp, #8
    e6c8:	ldrd	r4, [sp]
    e6cc:	ldr	r6, [sp, #8]
    e6d0:	add	sp, sp, #12
    e6d4:	pop	{pc}		; (ldr pc, [sp], #4)
    e6d8:	mov	r2, r3
    e6dc:	mov	r1, r0
    e6e0:	ldr	r0, [pc, #12]	; e6f4 <rb_event_add+0x68>
    e6e4:	add	r0, pc, r0
    e6e8:	bl	48c4 <rb_lib_log@plt>
    e6ec:	mov	r3, #1
    e6f0:	b	e6b0 <rb_event_add+0x24>
    e6f4:	.word	0x000090c0

0000e6f8 <rb_event_addonce>:
    e6f8:	strd	r4, [sp, #-16]!
    e6fc:	str	r6, [sp, #8]
    e700:	str	lr, [sp, #12]
    e704:	sub	sp, sp, #8
    e708:	mov	r4, r0
    e70c:	mov	r5, r1
    e710:	mov	r6, r2
    e714:	cmp	r3, #0
    e718:	ble	e748 <rb_event_addonce+0x50>
    e71c:	mov	r2, #0
    e720:	str	r2, [sp]
    e724:	mov	r2, r6
    e728:	mov	r1, r5
    e72c:	mov	r0, r4
    e730:	bl	e4c4 <rb_event_add_common>
    e734:	add	sp, sp, #8
    e738:	ldrd	r4, [sp]
    e73c:	ldr	r6, [sp, #8]
    e740:	add	sp, sp, #12
    e744:	pop	{pc}		; (ldr pc, [sp], #4)
    e748:	mov	r2, r3
    e74c:	mov	r1, r0
    e750:	ldr	r0, [pc, #12]	; e764 <rb_event_addonce+0x6c>
    e754:	add	r0, pc, r0
    e758:	bl	48c4 <rb_lib_log@plt>
    e75c:	mov	r3, #1
    e760:	b	e71c <rb_event_addonce+0x24>
    e764:	.word	0x00009094

0000e768 <rb_event_delete>:
    e768:	cmp	r0, #0
    e76c:	bxeq	lr
    e770:	str	r4, [sp, #-8]!
    e774:	str	lr, [sp, #4]
    e778:	mov	r3, #1
    e77c:	str	r3, [r0, #44]	; 0x2c
    e780:	bl	bee0 <rb_io_unsched_event>
    e784:	ldr	r4, [sp]
    e788:	add	sp, sp, #4
    e78c:	pop	{pc}		; (ldr pc, [sp], #4)

0000e790 <rb_event_find_delete>:
    e790:	str	r4, [sp, #-8]!
    e794:	str	lr, [sp, #4]
    e798:	ldr	r3, [pc, #80]	; e7f0 <rb_event_find_delete+0x60>
    e79c:	add	r3, pc, r3
    e7a0:	ldr	r3, [r3]
    e7a4:	cmp	r3, #0
    e7a8:	bne	e7bc <rb_event_find_delete+0x2c>
    e7ac:	b	e7dc <rb_event_find_delete+0x4c>
    e7b0:	ldr	r3, [r3, #8]
    e7b4:	cmp	r3, #0
    e7b8:	beq	e7dc <rb_event_find_delete+0x4c>
    e7bc:	ldr	r2, [r3]
    e7c0:	ldr	ip, [r2, #12]
    e7c4:	cmp	r0, ip
    e7c8:	bne	e7b0 <rb_event_find_delete+0x20>
    e7cc:	ldr	ip, [r2, #16]
    e7d0:	cmp	r1, ip
    e7d4:	bne	e7b0 <rb_event_find_delete+0x20>
    e7d8:	mov	r3, r2
    e7dc:	mov	r0, r3
    e7e0:	bl	4450 <rb_event_delete@plt>
    e7e4:	ldr	r4, [sp]
    e7e8:	add	sp, sp, #4
    e7ec:	pop	{pc}		; (ldr pc, [sp], #4)
    e7f0:	.word	0x0002d67c

0000e7f4 <rb_event_addish>:
    e7f4:	strd	r4, [sp, #-20]!	; 0xffffffec
    e7f8:	strd	r6, [sp, #8]
    e7fc:	str	lr, [sp, #16]
    e800:	sub	sp, sp, #12
    e804:	mov	r5, r0
    e808:	mov	r6, r1
    e80c:	mov	r7, r2
    e810:	eor	r4, r3, r3, asr #31
    e814:	sub	r4, r4, r3, asr #31
    e818:	cmp	r4, #2
    e81c:	rsbgt	r4, r4, #0
    e820:	mov	r0, r4
    e824:	bl	e620 <rb_event_frequency>
    e828:	str	r4, [sp]
    e82c:	mov	r3, r0
    e830:	mov	r2, r7
    e834:	mov	r1, r6
    e838:	mov	r0, r5
    e83c:	bl	e4c4 <rb_event_add_common>
    e840:	add	sp, sp, #12
    e844:	ldrd	r4, [sp]
    e848:	ldrd	r6, [sp, #8]
    e84c:	add	sp, sp, #16
    e850:	pop	{pc}		; (ldr pc, [sp], #4)

0000e854 <rb_run_one_event>:
    e854:	strd	r4, [sp, #-16]!
    e858:	str	r6, [sp, #8]
    e85c:	str	lr, [sp, #12]
    e860:	mov	r4, r0
    e864:	mov	r2, #33	; 0x21
    e868:	ldr	r1, [r0, #20]
    e86c:	ldr	r0, [pc, #136]	; e8fc <rb_run_one_event+0xa8>
    e870:	add	r0, pc, r0
    e874:	add	r0, r0, #12
    e878:	bl	4654 <rb_strlcpy@plt>
    e87c:	ldr	r3, [r4, #12]
    e880:	ldr	r0, [r4, #16]
    e884:	blx	r3
    e888:	ldr	r3, [r4, #24]
    e88c:	cmp	r3, #0
    e890:	beq	e8f0 <rb_run_one_event+0x9c>
    e894:	bl	47a4 <rb_current_time@plt>
    e898:	mov	r5, r0
    e89c:	ldr	r0, [r4, #24]
    e8a0:	bl	e620 <rb_event_frequency>
    e8a4:	add	r0, r5, r0
    e8a8:	str	r0, [r4, #28]
    e8ac:	ldr	r3, [pc, #76]	; e900 <rb_run_one_event+0xac>
    e8b0:	add	r3, pc, r3
    e8b4:	ldr	r2, [r3]
    e8b8:	cmn	r2, #1
    e8bc:	movne	r3, #0
    e8c0:	moveq	r3, #1
    e8c4:	cmp	r0, r2
    e8c8:	orrlt	r3, r3, #1
    e8cc:	cmp	r3, #0
    e8d0:	beq	e8e0 <rb_run_one_event+0x8c>
    e8d4:	ldr	r3, [pc, #40]	; e904 <rb_run_one_event+0xb0>
    e8d8:	add	r3, pc, r3
    e8dc:	str	r0, [r3]
    e8e0:	ldrd	r4, [sp]
    e8e4:	ldr	r6, [sp, #8]
    e8e8:	add	sp, sp, #12
    e8ec:	pop	{pc}		; (ldr pc, [sp], #4)
    e8f0:	mov	r0, r4
    e8f4:	bl	4450 <rb_event_delete@plt>
    e8f8:	b	e8e0 <rb_run_one_event+0x8c>
    e8fc:	.word	0x0002d5a8
    e900:	.word	0x0001abc4
    e904:	.word	0x0001ab9c

0000e908 <rb_event_run>:
    e908:	strd	r4, [sp, #-24]!	; 0xffffffe8
    e90c:	strd	r6, [sp, #8]
    e910:	str	r8, [sp, #16]
    e914:	str	lr, [sp, #20]
    e918:	bl	bf50 <rb_io_supports_event>
    e91c:	cmp	r0, #0
    e920:	bne	eb54 <rb_event_run+0x24c>
    e924:	ldr	r3, [pc, #572]	; eb68 <rb_event_run+0x260>
    e928:	add	r3, pc, r3
    e92c:	mvn	r2, #0
    e930:	str	r2, [r3]
    e934:	ldr	r3, [pc, #560]	; eb6c <rb_event_run+0x264>
    e938:	add	r3, pc, r3
    e93c:	ldr	r3, [r3]
    e940:	cmp	r3, #0
    e944:	beq	eb54 <rb_event_run+0x24c>
    e948:	ldr	r5, [r3, #8]
    e94c:	ldr	r7, [pc, #540]	; eb70 <rb_event_run+0x268>
    e950:	add	r7, pc, r7
    e954:	ldr	r6, [pc, #536]	; eb74 <rb_event_run+0x26c>
    e958:	add	r6, pc, r6
    e95c:	add	r6, r6, #12
    e960:	b	e9d0 <rb_event_run+0xc8>
    e964:	ldr	r2, [r4, #4]
    e968:	ldr	r3, [pc, #520]	; eb78 <rb_event_run+0x270>
    e96c:	add	r3, pc, r3
    e970:	str	r2, [r3, #4]
    e974:	b	e9f4 <rb_event_run+0xec>
    e978:	ldr	r2, [r4, #8]
    e97c:	ldr	r3, [pc, #504]	; eb7c <rb_event_run+0x274>
    e980:	add	r3, pc, r3
    e984:	str	r2, [r3]
    e988:	mov	r3, #0
    e98c:	str	r3, [r4, #4]
    e990:	str	r3, [r4, #8]
    e994:	ldr	r2, [pc, #484]	; eb80 <rb_event_run+0x278>
    e998:	add	r2, pc, r2
    e99c:	ldr	r3, [r2, #8]
    e9a0:	sub	r3, r3, #1
    e9a4:	str	r3, [r2, #8]
    e9a8:	ldr	r0, [r4, #20]
    e9ac:	cmp	r0, #0
    e9b0:	beq	e9b8 <rb_event_run+0xb0>
    e9b4:	bl	46a8 <free@plt>
    e9b8:	mov	r0, r4
    e9bc:	bl	46a8 <free@plt>
    e9c0:	cmp	r5, #0
    e9c4:	beq	eb54 <rb_event_run+0x24c>
    e9c8:	mov	r3, r5
    e9cc:	ldr	r5, [r5, #8]
    e9d0:	ldr	r4, [r3]
    e9d4:	ldr	r3, [r4, #44]	; 0x2c
    e9d8:	cmp	r3, #0
    e9dc:	beq	ea0c <rb_event_run+0x104>
    e9e0:	ldr	r3, [r4, #8]
    e9e4:	cmp	r3, #0
    e9e8:	beq	e964 <rb_event_run+0x5c>
    e9ec:	ldr	r2, [r4, #4]
    e9f0:	str	r2, [r3, #4]
    e9f4:	ldr	r3, [r4, #4]
    e9f8:	cmp	r3, #0
    e9fc:	beq	e978 <rb_event_run+0x70>
    ea00:	ldr	r2, [r4, #8]
    ea04:	str	r2, [r3, #8]
    ea08:	b	e988 <rb_event_run+0x80>
    ea0c:	ldr	r8, [r4, #28]
    ea10:	bl	47a4 <rb_current_time@plt>
    ea14:	cmp	r8, r0
    ea18:	ble	ea50 <rb_event_run+0x148>
    ea1c:	ldr	r1, [r4, #28]
    ea20:	ldr	r2, [r7]
    ea24:	cmn	r2, #1
    ea28:	movne	r3, #0
    ea2c:	moveq	r3, #1
    ea30:	cmp	r1, r2
    ea34:	orrlt	r3, r3, #1
    ea38:	cmp	r3, #0
    ea3c:	beq	e9c0 <rb_event_run+0xb8>
    ea40:	ldr	r3, [pc, #316]	; eb84 <rb_event_run+0x27c>
    ea44:	add	r3, pc, r3
    ea48:	str	r1, [r3]
    ea4c:	b	e9c0 <rb_event_run+0xb8>
    ea50:	mov	r2, #33	; 0x21
    ea54:	ldr	r1, [r4, #20]
    ea58:	mov	r0, r6
    ea5c:	bl	4654 <rb_strlcpy@plt>
    ea60:	ldr	r3, [r4, #12]
    ea64:	ldr	r0, [r4, #16]
    ea68:	blx	r3
    ea6c:	ldr	r3, [r4, #24]
    ea70:	cmp	r3, #0
    ea74:	bne	eadc <rb_event_run+0x1d4>
    ea78:	ldr	r3, [r4, #8]
    ea7c:	cmp	r3, #0
    ea80:	beq	eb2c <rb_event_run+0x224>
    ea84:	ldr	r2, [r4, #4]
    ea88:	str	r2, [r3, #4]
    ea8c:	ldr	r3, [r4, #4]
    ea90:	cmp	r3, #0
    ea94:	beq	eb40 <rb_event_run+0x238>
    ea98:	ldr	r2, [r4, #8]
    ea9c:	str	r2, [r3, #8]
    eaa0:	mov	r3, #0
    eaa4:	str	r3, [r4, #4]
    eaa8:	str	r3, [r4, #8]
    eaac:	ldr	r2, [pc, #212]	; eb88 <rb_event_run+0x280>
    eab0:	add	r2, pc, r2
    eab4:	ldr	r3, [r2, #8]
    eab8:	sub	r3, r3, #1
    eabc:	str	r3, [r2, #8]
    eac0:	ldr	r0, [r4, #20]
    eac4:	cmp	r0, #0
    eac8:	beq	ead0 <rb_event_run+0x1c8>
    eacc:	bl	46a8 <free@plt>
    ead0:	mov	r0, r4
    ead4:	bl	46a8 <free@plt>
    ead8:	b	e9c0 <rb_event_run+0xb8>
    eadc:	bl	47a4 <rb_current_time@plt>
    eae0:	mov	r8, r0
    eae4:	ldr	r0, [r4, #24]
    eae8:	bl	e620 <rb_event_frequency>
    eaec:	add	r0, r8, r0
    eaf0:	str	r0, [r4, #28]
    eaf4:	ldr	r3, [pc, #144]	; eb8c <rb_event_run+0x284>
    eaf8:	add	r3, pc, r3
    eafc:	ldr	r2, [r3]
    eb00:	cmn	r2, #1
    eb04:	movne	r3, #0
    eb08:	moveq	r3, #1
    eb0c:	cmp	r0, r2
    eb10:	orrlt	r3, r3, #1
    eb14:	cmp	r3, #0
    eb18:	beq	e9c0 <rb_event_run+0xb8>
    eb1c:	ldr	r3, [pc, #108]	; eb90 <rb_event_run+0x288>
    eb20:	add	r3, pc, r3
    eb24:	str	r0, [r3]
    eb28:	b	e9c0 <rb_event_run+0xb8>
    eb2c:	ldr	r2, [r4, #4]
    eb30:	ldr	r3, [pc, #92]	; eb94 <rb_event_run+0x28c>
    eb34:	add	r3, pc, r3
    eb38:	str	r2, [r3, #4]
    eb3c:	b	ea8c <rb_event_run+0x184>
    eb40:	ldr	r2, [r4, #8]
    eb44:	ldr	r3, [pc, #76]	; eb98 <rb_event_run+0x290>
    eb48:	add	r3, pc, r3
    eb4c:	str	r2, [r3]
    eb50:	b	eaa0 <rb_event_run+0x198>
    eb54:	ldrd	r4, [sp]
    eb58:	ldrd	r6, [sp, #8]
    eb5c:	ldr	r8, [sp, #16]
    eb60:	add	sp, sp, #20
    eb64:	pop	{pc}		; (ldr pc, [sp], #4)
    eb68:	.word	0x0001ab4c
    eb6c:	.word	0x0002d4e0
    eb70:	.word	0x0001ab24
    eb74:	.word	0x0002d4c0
    eb78:	.word	0x0002d4ac
    eb7c:	.word	0x0002d498
    eb80:	.word	0x0002d480
    eb84:	.word	0x0001aa30
    eb88:	.word	0x0002d368
    eb8c:	.word	0x0001a97c
    eb90:	.word	0x0001a954
    eb94:	.word	0x0002d2e4
    eb98:	.word	0x0002d2d0

0000eb9c <rb_event_io_register_all>:
    eb9c:	str	r4, [sp, #-8]!
    eba0:	str	lr, [sp, #4]
    eba4:	bl	bf50 <rb_io_supports_event>
    eba8:	cmp	r0, #0
    ebac:	beq	ebdc <rb_event_io_register_all+0x40>
    ebb0:	ldr	r3, [pc, #48]	; ebe8 <rb_event_io_register_all+0x4c>
    ebb4:	add	r3, pc, r3
    ebb8:	ldr	r4, [r3]
    ebbc:	cmp	r4, #0
    ebc0:	beq	ebdc <rb_event_io_register_all+0x40>
    ebc4:	ldr	r0, [r4]
    ebc8:	ldr	r1, [r0, #32]
    ebcc:	bl	be54 <rb_io_sched_event>
    ebd0:	ldr	r4, [r4, #8]
    ebd4:	cmp	r4, #0
    ebd8:	bne	ebc4 <rb_event_io_register_all+0x28>
    ebdc:	ldr	r4, [sp]
    ebe0:	add	sp, sp, #4
    ebe4:	pop	{pc}		; (ldr pc, [sp], #4)
    ebe8:	.word	0x0002d264

0000ebec <rb_event_init>:
    ebec:	str	r4, [sp, #-8]!
    ebf0:	str	lr, [sp, #4]
    ebf4:	mov	r2, #33	; 0x21
    ebf8:	ldr	r1, [pc, #28]	; ec1c <rb_event_init+0x30>
    ebfc:	add	r1, pc, r1
    ec00:	ldr	r0, [pc, #24]	; ec20 <rb_event_init+0x34>
    ec04:	add	r0, pc, r0
    ec08:	add	r0, r0, #12
    ec0c:	bl	4654 <rb_strlcpy@plt>
    ec10:	ldr	r4, [sp]
    ec14:	add	sp, sp, #4
    ec18:	pop	{pc}		; (ldr pc, [sp], #4)
    ec1c:	.word	0x00008c30
    ec20:	.word	0x0002d214

0000ec24 <rb_dump_events>:
    ec24:	strd	r4, [sp, #-36]!	; 0xffffffdc
    ec28:	strd	r6, [sp, #8]
    ec2c:	strd	r8, [sp, #16]
    ec30:	strd	sl, [sp, #24]
    ec34:	str	lr, [sp, #32]
    ec38:	sub	sp, sp, #532	; 0x214
    ec3c:	mov	r9, r0
    ec40:	mov	r6, r1
    ec44:	str	r1, [sp, #12]
    ec48:	ldr	r5, [pc, #204]	; ed1c <rb_dump_events+0xf8>
    ec4c:	add	r5, pc, r5
    ec50:	add	r3, r5, #12
    ec54:	ldr	r2, [pc, #196]	; ed20 <rb_dump_events+0xfc>
    ec58:	add	r2, pc, r2
    ec5c:	mov	r1, #512	; 0x200
    ec60:	add	r4, sp, #16
    ec64:	mov	r0, r4
    ec68:	bl	4b58 <snprintf@plt>
    ec6c:	mov	r1, r6
    ec70:	mov	r0, r4
    ec74:	blx	r9
    ec78:	mov	r2, #512	; 0x200
    ec7c:	ldr	r1, [pc, #160]	; ed24 <rb_dump_events+0x100>
    ec80:	add	r1, pc, r1
    ec84:	mov	r0, r4
    ec88:	bl	4654 <rb_strlcpy@plt>
    ec8c:	mov	r1, r6
    ec90:	mov	r0, r4
    ec94:	blx	r9
    ec98:	ldr	r4, [r5]
    ec9c:	cmp	r4, #0
    eca0:	beq	ed00 <rb_dump_events+0xdc>
    eca4:	ldr	fp, [pc, #124]	; ed28 <rb_dump_events+0x104>
    eca8:	add	fp, pc, fp
    ecac:	add	r7, sp, #16
    ecb0:	mov	sl, #512	; 0x200
    ecb4:	ldr	r6, [r4]
    ecb8:	ldr	r8, [r6, #20]
    ecbc:	ldr	r5, [r6, #28]
    ecc0:	bl	47a4 <rb_current_time@plt>
    ecc4:	ldr	r3, [r6, #24]
    ecc8:	str	r3, [sp, #4]
    eccc:	sub	r0, r5, r0
    ecd0:	str	r0, [sp]
    ecd4:	mov	r3, r8
    ecd8:	mov	r2, fp
    ecdc:	mov	r1, sl
    ece0:	mov	r0, r7
    ece4:	bl	4b58 <snprintf@plt>
    ece8:	ldr	r1, [sp, #12]
    ecec:	mov	r0, r7
    ecf0:	blx	r9
    ecf4:	ldr	r4, [r4, #8]
    ecf8:	cmp	r4, #0
    ecfc:	bne	ecb4 <rb_dump_events+0x90>
    ed00:	add	sp, sp, #532	; 0x214
    ed04:	ldrd	r4, [sp]
    ed08:	ldrd	r6, [sp, #8]
    ed0c:	ldrd	r8, [sp, #16]
    ed10:	ldrd	sl, [sp, #24]
    ed14:	add	sp, sp, #32
    ed18:	pop	{pc}		; (ldr pc, [sp], #4)
    ed1c:	.word	0x0002d1cc
    ed20:	.word	0x00008bdc
    ed24:	.word	0x00008bcc
    ed28:	.word	0x00008bd0

0000ed2c <rb_set_back_events>:
    ed2c:	ldr	r3, [pc, #56]	; ed6c <rb_set_back_events+0x40>
    ed30:	add	r3, pc, r3
    ed34:	ldr	r2, [r3]
    ed38:	cmp	r2, #0
    ed3c:	beq	ed68 <rb_set_back_events+0x3c>
    ed40:	mov	ip, #0
    ed44:	ldr	r1, [r2]
    ed48:	ldr	r3, [r1, #28]
    ed4c:	cmp	r3, r0
    ed50:	subgt	r3, r3, r0
    ed54:	movle	r3, ip
    ed58:	str	r3, [r1, #28]
    ed5c:	ldr	r2, [r2, #8]
    ed60:	cmp	r2, #0
    ed64:	bne	ed44 <rb_set_back_events+0x18>
    ed68:	bx	lr
    ed6c:	.word	0x0002d0e8

0000ed70 <rb_event_update>:
    ed70:	strd	r4, [sp, #-16]!
    ed74:	str	r6, [sp, #8]
    ed78:	str	lr, [sp, #12]
    ed7c:	subs	r4, r0, #0
    ed80:	beq	eda8 <rb_event_update+0x38>
    ed84:	mov	r0, r1
    ed88:	str	r1, [r4, #24]
    ed8c:	bl	e620 <rb_event_frequency>
    ed90:	mov	r5, r0
    ed94:	bl	47a4 <rb_current_time@plt>
    ed98:	add	r0, r0, r5
    ed9c:	ldr	r3, [r4, #28]
    eda0:	cmp	r0, r3
    eda4:	blt	edb8 <rb_event_update+0x48>
    eda8:	ldrd	r4, [sp]
    edac:	ldr	r6, [sp, #8]
    edb0:	add	sp, sp, #12
    edb4:	pop	{pc}		; (ldr pc, [sp], #4)
    edb8:	bl	47a4 <rb_current_time@plt>
    edbc:	add	r0, r0, r5
    edc0:	str	r0, [r4, #28]
    edc4:	b	eda8 <rb_event_update+0x38>

0000edc8 <rb_event_next>:
    edc8:	ldr	r3, [pc, #8]	; edd8 <rb_event_next+0x10>
    edcc:	add	r3, pc, r3
    edd0:	ldr	r0, [r3]
    edd4:	bx	lr
    edd8:	.word	0x0001a6a8

0000eddc <rb_ctime>:
    eddc:	strd	r4, [sp, #-12]!
    ede0:	str	lr, [sp, #8]
    ede4:	sub	sp, sp, #84	; 0x54
    ede8:	str	r0, [sp, #28]
    edec:	mov	r4, r1
    edf0:	mov	r5, r2
    edf4:	add	r1, sp, #36	; 0x24
    edf8:	add	r0, sp, #28
    edfc:	bl	499c <gmtime_r@plt>
    ee00:	cmp	r4, #0
    ee04:	beq	ee8c <rb_ctime+0xb0>
    ee08:	cmp	r0, #0
    ee0c:	beq	ee9c <rb_ctime+0xc0>
    ee10:	ldr	r2, [pc, #156]	; eeb4 <rb_ctime+0xd8>
    ee14:	add	r2, pc, r2
    ee18:	ldr	ip, [r0, #24]
    ee1c:	ldr	r3, [r0, #20]
    ee20:	add	r3, r3, #1888	; 0x760
    ee24:	add	r3, r3, #12
    ee28:	str	r3, [sp, #20]
    ee2c:	ldr	r3, [r0]
    ee30:	str	r3, [sp, #16]
    ee34:	ldr	r3, [r0, #4]
    ee38:	str	r3, [sp, #12]
    ee3c:	ldr	r3, [r0, #8]
    ee40:	str	r3, [sp, #8]
    ee44:	ldr	r3, [r0, #12]
    ee48:	str	r3, [sp, #4]
    ee4c:	ldr	r1, [r0, #16]
    ee50:	mov	r3, r2
    ee54:	add	r2, r2, r1, lsl #2
    ee58:	ldr	r2, [r2, #28]
    ee5c:	str	r2, [sp]
    ee60:	ldr	r3, [r3, ip, lsl #2]
    ee64:	ldr	r2, [pc, #76]	; eeb8 <rb_ctime+0xdc>
    ee68:	add	r2, pc, r2
    ee6c:	mov	r1, r5
    ee70:	mov	r0, r4
    ee74:	bl	4b58 <snprintf@plt>
    ee78:	mov	r0, r4
    ee7c:	add	sp, sp, #84	; 0x54
    ee80:	ldrd	r4, [sp]
    ee84:	add	sp, sp, #8
    ee88:	pop	{pc}		; (ldr pc, [sp], #4)
    ee8c:	mov	r5, #128	; 0x80
    ee90:	ldr	r4, [pc, #36]	; eebc <rb_ctime+0xe0>
    ee94:	add	r4, pc, r4
    ee98:	b	ee08 <rb_ctime+0x2c>
    ee9c:	mov	r2, r5
    eea0:	ldr	r1, [pc, #24]	; eec0 <rb_ctime+0xe4>
    eea4:	add	r1, pc, r1
    eea8:	mov	r0, r4
    eeac:	bl	4654 <rb_strlcpy@plt>
    eeb0:	b	ee78 <rb_ctime+0x9c>
    eeb4:	.word	0x0001a044
    eeb8:	.word	0x00008c78
    eebc:	.word	0x0002cfb4
    eec0:	.word	0x00008f7c

0000eec4 <rb_date>:
    eec4:	strd	r4, [sp, #-12]!
    eec8:	str	lr, [sp, #8]
    eecc:	sub	sp, sp, #84	; 0x54
    eed0:	str	r0, [sp, #28]
    eed4:	mov	r4, r1
    eed8:	mov	r5, r2
    eedc:	add	r1, sp, #36	; 0x24
    eee0:	add	r0, sp, #28
    eee4:	bl	499c <gmtime_r@plt>
    eee8:	cmp	r0, #0
    eeec:	beq	ef6c <rb_date+0xa8>
    eef0:	ldr	r3, [pc, #140]	; ef84 <rb_date+0xc0>
    eef4:	add	r3, pc, r3
    eef8:	ldr	r1, [r0, #24]
    eefc:	add	r1, r3, r1, lsl #2
    ef00:	ldr	r2, [r0]
    ef04:	str	r2, [sp, #20]
    ef08:	ldr	r2, [r0, #4]
    ef0c:	str	r2, [sp, #16]
    ef10:	ldr	r2, [r0, #8]
    ef14:	str	r2, [sp, #12]
    ef18:	ldr	r2, [r0, #20]
    ef1c:	add	r2, r2, #1888	; 0x760
    ef20:	add	r2, r2, #12
    ef24:	str	r2, [sp, #8]
    ef28:	ldr	r2, [r0, #12]
    ef2c:	str	r2, [sp, #4]
    ef30:	ldr	r2, [r0, #16]
    ef34:	add	r3, r3, r2, lsl #2
    ef38:	ldr	r3, [r3, #104]	; 0x68
    ef3c:	str	r3, [sp]
    ef40:	ldr	r3, [r1, #76]	; 0x4c
    ef44:	ldr	r2, [pc, #60]	; ef88 <rb_date+0xc4>
    ef48:	add	r2, pc, r2
    ef4c:	mov	r1, r5
    ef50:	mov	r0, r4
    ef54:	bl	4b58 <snprintf@plt>
    ef58:	mov	r0, r4
    ef5c:	add	sp, sp, #84	; 0x54
    ef60:	ldrd	r4, [sp]
    ef64:	add	sp, sp, #8
    ef68:	pop	{pc}		; (ldr pc, [sp], #4)
    ef6c:	mov	r2, r5
    ef70:	ldr	r1, [pc, #20]	; ef8c <rb_date+0xc8>
    ef74:	add	r1, pc, r1
    ef78:	mov	r0, r4
    ef7c:	bl	4654 <rb_strlcpy@plt>
    ef80:	b	ef58 <rb_date+0x94>
    ef84:	.word	0x00019f64
    ef88:	.word	0x00008bb4
    ef8c:	.word	0x00008eac

0000ef90 <rb_current_time>:
    ef90:	ldr	r3, [pc, #8]	; efa0 <rb_current_time+0x10>
    ef94:	add	r3, pc, r3
    ef98:	ldr	r0, [r3, #128]	; 0x80
    ef9c:	bx	lr
    efa0:	.word	0x0002ceb4

0000efa4 <rb_current_time_tv>:
    efa4:	ldr	r0, [pc, #8]	; efb4 <rb_current_time_tv+0x10>
    efa8:	add	r0, pc, r0
    efac:	add	r0, r0, #128	; 0x80
    efb0:	bx	lr
    efb4:	.word	0x0002cea0

0000efb8 <rb_lib_log>:
    efb8:	push	{r0, r1, r2, r3}
    efbc:	strd	r4, [sp, #-12]!
    efc0:	str	lr, [sp, #8]
    efc4:	sub	sp, sp, #12
    efc8:	ldr	r3, [pc, #84]	; f024 <rb_lib_log+0x6c>
    efcc:	add	r3, pc, r3
    efd0:	ldr	r3, [r3, #136]	; 0x88
    efd4:	cmp	r3, #0
    efd8:	beq	f00c <rb_lib_log+0x54>
    efdc:	add	r3, sp, #28
    efe0:	str	r3, [sp, #4]
    efe4:	ldr	r5, [pc, #60]	; f028 <rb_lib_log+0x70>
    efe8:	add	r5, pc, r5
    efec:	add	r4, r5, #140	; 0x8c
    eff0:	ldr	r2, [sp, #24]
    eff4:	mov	r1, #512	; 0x200
    eff8:	mov	r0, r4
    effc:	bl	4510 <vsnprintf@plt>
    f000:	ldr	r3, [r5, #136]	; 0x88
    f004:	mov	r0, r4
    f008:	blx	r3
    f00c:	add	sp, sp, #12
    f010:	ldrd	r4, [sp]
    f014:	ldr	lr, [sp, #8]
    f018:	add	sp, sp, #12
    f01c:	add	sp, sp, #16
    f020:	bx	lr
    f024:	.word	0x0002ce7c
    f028:	.word	0x0002ce60

0000f02c <rb_lib_die>:
    f02c:	push	{r0, r1, r2, r3}
    f030:	strd	r4, [sp, #-12]!
    f034:	str	lr, [sp, #8]
    f038:	sub	sp, sp, #12
    f03c:	ldr	r3, [pc, #88]	; f09c <rb_lib_die+0x70>
    f040:	add	r3, pc, r3
    f044:	ldr	r3, [r3, #652]	; 0x28c
    f048:	cmp	r3, #0
    f04c:	beq	f098 <rb_lib_die+0x6c>
    f050:	add	r3, sp, #28
    f054:	str	r3, [sp, #4]
    f058:	ldr	r5, [pc, #64]	; f0a0 <rb_lib_die+0x74>
    f05c:	add	r5, pc, r5
    f060:	add	r4, r5, #140	; 0x8c
    f064:	ldr	r2, [sp, #24]
    f068:	mov	r1, #512	; 0x200
    f06c:	mov	r0, r4
    f070:	bl	4510 <vsnprintf@plt>
    f074:	ldr	r3, [r5, #652]	; 0x28c
    f078:	mov	r0, r4
    f07c:	blx	r3
    f080:	add	sp, sp, #12
    f084:	ldrd	r4, [sp]
    f088:	ldr	lr, [sp, #8]
    f08c:	add	sp, sp, #12
    f090:	add	sp, sp, #16
    f094:	bx	lr
    f098:	bl	4378 <abort@plt>
    f09c:	.word	0x0002ce08
    f0a0:	.word	0x0002cdec

0000f0a4 <rb_lib_restart>:
    f0a4:	push	{r0, r1, r2, r3}
    f0a8:	push	{lr}		; (str lr, [sp, #-4]!)
    f0ac:	sub	sp, sp, #12
    f0b0:	ldr	r3, [pc, #68]	; f0fc <rb_lib_restart+0x58>
    f0b4:	add	r3, pc, r3
    f0b8:	ldr	r3, [r3, #656]	; 0x290
    f0bc:	cmp	r3, #0
    f0c0:	beq	f0f8 <rb_lib_restart+0x54>
    f0c4:	add	r3, sp, #20
    f0c8:	str	r3, [sp, #4]
    f0cc:	ldr	r5, [pc, #44]	; f100 <rb_lib_restart+0x5c>
    f0d0:	add	r5, pc, r5
    f0d4:	add	r4, r5, #140	; 0x8c
    f0d8:	ldr	r2, [sp, #16]
    f0dc:	mov	r1, #512	; 0x200
    f0e0:	mov	r0, r4
    f0e4:	bl	4510 <vsnprintf@plt>
    f0e8:	ldr	r3, [r5, #656]	; 0x290
    f0ec:	mov	r0, r4
    f0f0:	blx	r3
    f0f4:	bl	4378 <abort@plt>
    f0f8:	bl	4378 <abort@plt>
    f0fc:	.word	0x0002cd94
    f100:	.word	0x0002cd78

0000f104 <rb_set_time>:
    f104:	push	{lr}		; (str lr, [sp, #-4]!)
    f108:	sub	sp, sp, #12
    f10c:	mov	r1, #0
    f110:	mov	r0, sp
    f114:	bl	4570 <rb_gettimeofday@plt>
    f118:	cmn	r0, #1
    f11c:	beq	f150 <rb_set_time+0x4c>
    f120:	ldr	r3, [sp]
    f124:	ldr	r2, [pc, #88]	; f184 <rb_set_time+0x80>
    f128:	add	r2, pc, r2
    f12c:	ldr	r0, [r2, #128]	; 0x80
    f130:	cmp	r3, r0
    f134:	blt	f178 <rb_set_time+0x74>
    f138:	ldr	r3, [pc, #72]	; f188 <rb_set_time+0x84>
    f13c:	add	r3, pc, r3
    f140:	ldrd	r0, [sp]
    f144:	strd	r0, [r3, #128]	; 0x80
    f148:	add	sp, sp, #12
    f14c:	pop	{pc}		; (ldr pc, [sp], #4)
    f150:	bl	4c90 <__errno_location@plt>
    f154:	ldr	r0, [r0]
    f158:	bl	4354 <strerror@plt>
    f15c:	mov	r1, r0
    f160:	ldr	r0, [pc, #36]	; f18c <rb_set_time+0x88>
    f164:	add	r0, pc, r0
    f168:	bl	48c4 <rb_lib_log@plt>
    f16c:	ldr	r0, [pc, #28]	; f190 <rb_set_time+0x8c>
    f170:	add	r0, pc, r0
    f174:	bl	4a08 <rb_lib_restart@plt>
    f178:	sub	r0, r0, r3
    f17c:	bl	ed2c <rb_set_back_events>
    f180:	b	f138 <rb_set_time+0x34>
    f184:	.word	0x0002cd20
    f188:	.word	0x0002cd0c
    f18c:	.word	0x000089c0
    f190:	.word	0x000089c8

0000f194 <rb_lib_version>:
    f194:	strd	r4, [sp, #-12]!
    f198:	str	lr, [sp, #8]
    f19c:	sub	sp, sp, #524	; 0x20c
    f1a0:	ldr	r4, [pc, #84]	; f1fc <rb_lib_version+0x68>
    f1a4:	add	r4, pc, r4
    f1a8:	mov	r1, #512	; 0x200
    f1ac:	add	r5, sp, #8
    f1b0:	mov	r0, r5
    f1b4:	bl	e034 <rb_get_ssl_info>
    f1b8:	ldr	r3, [pc, #64]	; f200 <rb_lib_version+0x6c>
    f1bc:	ldr	r3, [r4, r3]
    f1c0:	ldr	r3, [r3]
    f1c4:	ldr	r4, [pc, #56]	; f204 <rb_lib_version+0x70>
    f1c8:	add	r4, pc, r4
    f1cc:	add	r4, r4, #660	; 0x294
    f1d0:	str	r5, [sp]
    f1d4:	ldr	r2, [pc, #44]	; f208 <rb_lib_version+0x74>
    f1d8:	add	r2, pc, r2
    f1dc:	mov	r1, #640	; 0x280
    f1e0:	mov	r0, r4
    f1e4:	bl	4b58 <snprintf@plt>
    f1e8:	mov	r0, r4
    f1ec:	add	sp, sp, #524	; 0x20c
    f1f0:	ldrd	r4, [sp]
    f1f4:	add	sp, sp, #8
    f1f8:	pop	{pc}		; (ldr pc, [sp], #4)
    f1fc:	.word	0x00019e54
    f200:	.word	0x000003a4
    f204:	.word	0x0002cc80
    f208:	.word	0x00008970

0000f20c <rb_lib_init>:
    f20c:	strd	r4, [sp, #-24]!	; 0xffffffe8
    f210:	strd	r6, [sp, #8]
    f214:	str	r8, [sp, #16]
    f218:	str	lr, [sp, #20]
    f21c:	mov	r7, r0
    f220:	mov	r6, r1
    f224:	mov	r5, r2
    f228:	mov	r4, r3
    f22c:	bl	493c <rb_set_time@plt>
    f230:	ldr	r3, [pc, #88]	; f290 <rb_lib_init+0x84>
    f234:	add	r3, pc, r3
    f238:	str	r7, [r3, #136]	; 0x88
    f23c:	str	r6, [r3, #656]	; 0x290
    f240:	str	r5, [r3, #652]	; 0x28c
    f244:	bl	45b8 <rb_event_init@plt>
    f248:	bl	4984 <rb_init_bh@plt>
    f24c:	ldr	r2, [sp, #32]
    f250:	ldr	r1, [sp, #24]
    f254:	mov	r0, r4
    f258:	bl	4aa4 <rb_fdlist_init@plt>
    f25c:	bl	433c <rb_init_netio@plt>
    f260:	ldr	r0, [sp, #28]
    f264:	bl	4888 <rb_init_rb_dlink_nodes@plt>
    f268:	bl	bf50 <rb_io_supports_event>
    f26c:	cmp	r0, #0
    f270:	bne	f288 <rb_lib_init+0x7c>
    f274:	ldrd	r4, [sp]
    f278:	ldrd	r6, [sp, #8]
    f27c:	ldr	r8, [sp, #16]
    f280:	add	sp, sp, #20
    f284:	pop	{pc}		; (ldr pc, [sp], #4)
    f288:	bl	bf88 <rb_io_init_event>
    f28c:	b	f274 <rb_lib_init+0x68>
    f290:	.word	0x0002cc14

0000f294 <rb_lib_loop>:
    f294:	str	r7, [sp, #-8]!
    f298:	str	lr, [sp, #4]
    f29c:	mov	r5, r0
    f2a0:	bl	493c <rb_set_time@plt>
    f2a4:	bl	bf50 <rb_io_supports_event>
    f2a8:	cmp	r0, #0
    f2ac:	mvneq	r6, #0
    f2b0:	moveq	r7, #1000	; 0x3e8
    f2b4:	beq	f2d0 <rb_lib_loop+0x3c>
    f2b8:	mvn	r4, #0
    f2bc:	mov	r0, r4
    f2c0:	bl	44f8 <rb_select@plt>
    f2c4:	b	f2bc <rb_lib_loop+0x28>
    f2c8:	bl	44f8 <rb_select@plt>
    f2cc:	bl	496c <rb_event_run@plt>
    f2d0:	cmp	r5, #0
    f2d4:	bne	f300 <rb_lib_loop+0x6c>
    f2d8:	bl	4bdc <rb_event_next@plt>
    f2dc:	subs	r4, r0, #0
    f2e0:	movle	r0, r6
    f2e4:	ble	f2c8 <rb_lib_loop+0x34>
    f2e8:	bl	47a4 <rb_current_time@plt>
    f2ec:	sub	r0, r4, r0
    f2f0:	cmp	r0, #0
    f2f4:	mulgt	r0, r7, r0
    f2f8:	movle	r0, r7
    f2fc:	b	f2c8 <rb_lib_loop+0x34>
    f300:	mov	r0, r5
    f304:	bl	44f8 <rb_select@plt>
    f308:	b	f2cc <rb_lib_loop+0x38>

0000f30c <rb_strtok_r>:
    f30c:	str	r4, [sp, #-8]!
    f310:	str	lr, [sp, #4]
    f314:	bl	49fc <strtok_r@plt>
    f318:	ldr	r4, [sp]
    f31c:	add	sp, sp, #4
    f320:	pop	{pc}		; (ldr pc, [sp], #4)

0000f324 <rb_base64_encode>:
    f324:	cmn	r1, #2
    f328:	blt	f490 <rb_base64_encode+0x16c>
    f32c:	strd	r4, [sp, #-16]!
    f330:	str	r6, [sp, #8]
    f334:	str	lr, [sp, #12]
    f338:	mov	r5, r0
    f33c:	mov	r4, r1
    f340:	add	r2, r1, #2
    f344:	movw	r3, #21846	; 0x5556
    f348:	movt	r3, #21845	; 0x5555
    f34c:	smull	r3, r1, r3, r2
    f350:	sub	r1, r1, r2, asr #31
    f354:	add	r1, r1, r1, lsl #2
    f358:	mov	r0, #1
    f35c:	bl	45a0 <calloc@plt>
    f360:	cmp	r0, #0
    f364:	beq	f460 <rb_base64_encode+0x13c>
    f368:	cmp	r4, #2
    f36c:	movle	r6, r0
    f370:	ble	f3e8 <rb_base64_encode+0xc4>
    f374:	add	r1, r0, #4
    f378:	add	ip, r5, #3
    f37c:	ldr	lr, [pc, #276]	; f498 <rb_base64_encode+0x174>
    f380:	add	lr, pc, lr
    f384:	mov	r5, ip
    f388:	ldrb	r2, [ip, #-3]
    f38c:	mov	r6, r1
    f390:	ldrb	r3, [lr, r2, lsr #2]
    f394:	strb	r3, [r1, #-4]
    f398:	ldrb	r3, [ip, #-2]
    f39c:	lsl	r2, r2, #4
    f3a0:	and	r2, r2, #48	; 0x30
    f3a4:	add	r2, lr, r2
    f3a8:	ldrb	r2, [r2, r3, lsr #4]
    f3ac:	strb	r2, [r1, #-3]
    f3b0:	ldrb	r2, [ip, #-1]
    f3b4:	lsl	r3, r3, #2
    f3b8:	and	r3, r3, #60	; 0x3c
    f3bc:	add	r3, lr, r3
    f3c0:	ldrb	r3, [r3, r2, lsr #6]
    f3c4:	strb	r3, [r1, #-2]
    f3c8:	and	r2, r2, #63	; 0x3f
    f3cc:	ldrb	r3, [lr, r2]
    f3d0:	strb	r3, [r1, #-1]
    f3d4:	sub	r4, r4, #3
    f3d8:	add	r1, r1, #4
    f3dc:	add	ip, ip, #3
    f3e0:	cmp	r4, #2
    f3e4:	bgt	f384 <rb_base64_encode+0x60>
    f3e8:	cmp	r4, #0
    f3ec:	beq	f448 <rb_base64_encode+0x124>
    f3f0:	ldrb	r3, [r5]
    f3f4:	ldr	r2, [pc, #160]	; f49c <rb_base64_encode+0x178>
    f3f8:	add	r2, pc, r2
    f3fc:	ldrb	r2, [r2, r3, lsr #2]
    f400:	strb	r2, [r6]
    f404:	cmp	r4, #1
    f408:	ble	f464 <rb_base64_encode+0x140>
    f40c:	ldrb	r2, [r5, #1]
    f410:	ldr	r1, [pc, #136]	; f4a0 <rb_base64_encode+0x17c>
    f414:	add	r1, pc, r1
    f418:	lsl	r3, r3, #4
    f41c:	and	r3, r3, #48	; 0x30
    f420:	add	r3, r1, r3
    f424:	ldrb	r3, [r3, r2, lsr #4]
    f428:	strb	r3, [r6, #1]
    f42c:	lsl	r2, r2, #2
    f430:	and	r2, r2, #60	; 0x3c
    f434:	ldrb	r3, [r1, r2]
    f438:	strb	r3, [r6, #2]
    f43c:	mov	r3, #61	; 0x3d
    f440:	strb	r3, [r6, #3]
    f444:	add	r6, r6, #4
    f448:	mov	r3, #0
    f44c:	strb	r3, [r6]
    f450:	ldrd	r4, [sp]
    f454:	ldr	r6, [sp, #8]
    f458:	add	sp, sp, #12
    f45c:	pop	{pc}		; (ldr pc, [sp], #4)
    f460:	bl	4930 <rb_outofmemory@plt>
    f464:	lsl	r3, r3, #4
    f468:	and	r3, r3, #48	; 0x30
    f46c:	ldr	r2, [pc, #48]	; f4a4 <rb_base64_encode+0x180>
    f470:	add	r2, pc, r2
    f474:	ldrb	r3, [r2, r3]
    f478:	strb	r3, [r6, #1]
    f47c:	mov	r3, #61	; 0x3d
    f480:	strb	r3, [r6, #2]
    f484:	strb	r3, [r6, #3]
    f488:	add	r6, r6, #4
    f48c:	b	f448 <rb_base64_encode+0x124>
    f490:	mov	r0, #0
    f494:	bx	lr
    f498:	.word	0x0000851c
    f49c:	.word	0x000084a4
    f4a0:	.word	0x00008488
    f4a4:	.word	0x0000842c

0000f4a8 <rb_base64_decode>:
    f4a8:	strd	r4, [sp, #-24]!	; 0xffffffe8
    f4ac:	strd	r6, [sp, #8]
    f4b0:	str	r8, [sp, #16]
    f4b4:	str	lr, [sp, #20]
    f4b8:	mov	r5, r0
    f4bc:	mov	r4, r1
    f4c0:	mov	r6, r2
    f4c4:	add	r1, r1, #1
    f4c8:	mov	r0, #1
    f4cc:	bl	45a0 <calloc@plt>
    f4d0:	cmp	r0, #0
    f4d4:	beq	f4f0 <rb_base64_decode+0x48>
    f4d8:	mov	ip, r5
    f4dc:	mov	lr, #0
    f4e0:	mov	r1, lr
    f4e4:	ldr	r7, [pc, #316]	; f628 <rb_base64_decode+0x180>
    f4e8:	add	r7, pc, r7
    f4ec:	b	f500 <rb_base64_decode+0x58>
    f4f0:	bl	4930 <rb_outofmemory@plt>
    f4f4:	lsl	r3, r3, #2
    f4f8:	strb	r3, [r0, lr]
    f4fc:	add	r1, r1, #1
    f500:	ldrb	r2, [ip], #1
    f504:	cmp	r2, #0
    f508:	beq	f5e4 <rb_base64_decode+0x13c>
    f50c:	rsb	r3, ip, #1
    f510:	add	r3, r3, r4
    f514:	add	r3, r5, r3
    f518:	cmp	r2, #61	; 0x3d
    f51c:	cmpne	r3, #0
    f520:	ble	f5b4 <rb_base64_decode+0x10c>
    f524:	add	r2, r7, r2, lsl #1
    f528:	ldrsh	r3, [r2, #68]	; 0x44
    f52c:	cmp	r3, #0
    f530:	blt	f500 <rb_base64_decode+0x58>
    f534:	rsbs	r8, r1, #0
    f538:	and	r2, r1, #3
    f53c:	and	r8, r8, #3
    f540:	rsbpl	r2, r8, #0
    f544:	cmp	r2, #3
    f548:	addls	pc, pc, r2, lsl #2
    f54c:	b	f4fc <rb_base64_decode+0x54>
    f550:	b	f4f4 <rb_base64_decode+0x4c>
    f554:	b	f560 <rb_base64_decode+0xb8>
    f558:	b	f580 <rb_base64_decode+0xd8>
    f55c:	b	f5a0 <rb_base64_decode+0xf8>
    f560:	add	r8, lr, #1
    f564:	ldrb	r2, [r0, lr]
    f568:	orr	r2, r2, r3, asr #4
    f56c:	strb	r2, [r0, lr]
    f570:	lsl	r3, r3, #4
    f574:	strb	r3, [r0, r8]
    f578:	mov	lr, r8
    f57c:	b	f4fc <rb_base64_decode+0x54>
    f580:	add	r8, lr, #1
    f584:	ldrb	r2, [r0, lr]
    f588:	orr	r2, r2, r3, asr #2
    f58c:	strb	r2, [r0, lr]
    f590:	lsl	r3, r3, #6
    f594:	strb	r3, [r0, r8]
    f598:	mov	lr, r8
    f59c:	b	f4fc <rb_base64_decode+0x54>
    f5a0:	ldrb	r2, [r0, lr]
    f5a4:	orr	r3, r2, r3
    f5a8:	strb	r3, [r0, lr]
    f5ac:	add	lr, lr, #1
    f5b0:	b	f4fc <rb_base64_decode+0x54>
    f5b4:	cmp	r2, #61	; 0x3d
    f5b8:	bne	f5e4 <rb_base64_decode+0x13c>
    f5bc:	rsbs	r3, r1, #0
    f5c0:	and	r1, r1, #3
    f5c4:	and	r3, r3, #3
    f5c8:	rsbpl	r1, r3, #0
    f5cc:	cmp	r1, #2
    f5d0:	beq	f610 <rb_base64_decode+0x168>
    f5d4:	cmp	r1, #3
    f5d8:	beq	f618 <rb_base64_decode+0x170>
    f5dc:	cmp	r1, #1
    f5e0:	beq	f604 <rb_base64_decode+0x15c>
    f5e4:	mov	r3, #0
    f5e8:	strb	r3, [r0, lr]
    f5ec:	str	lr, [r6]
    f5f0:	ldrd	r4, [sp]
    f5f4:	ldrd	r6, [sp, #8]
    f5f8:	ldr	r8, [sp, #16]
    f5fc:	add	sp, sp, #20
    f600:	pop	{pc}		; (ldr pc, [sp], #4)
    f604:	bl	46a8 <free@plt>
    f608:	mov	r0, #0
    f60c:	b	f5f0 <rb_base64_decode+0x148>
    f610:	add	r3, lr, #1
    f614:	b	f61c <rb_base64_decode+0x174>
    f618:	mov	r3, lr
    f61c:	mov	r2, #0
    f620:	strb	r2, [r0, r3]
    f624:	b	f5e4 <rb_base64_decode+0x13c>
    f628:	.word	0x000083b4

0000f62c <rb_outofmemory>:
    f62c:	str	r4, [sp, #-8]!
    f630:	str	lr, [sp, #4]
    f634:	ldr	r3, [pc, #56]	; f674 <rb_outofmemory+0x48>
    f638:	add	r3, pc, r3
    f63c:	ldr	r3, [r3]
    f640:	cmp	r3, #0
    f644:	bne	f670 <rb_outofmemory+0x44>
    f648:	ldr	r3, [pc, #40]	; f678 <rb_outofmemory+0x4c>
    f64c:	add	r3, pc, r3
    f650:	mov	r2, #1
    f654:	str	r2, [r3]
    f658:	ldr	r0, [pc, #28]	; f67c <rb_outofmemory+0x50>
    f65c:	add	r0, pc, r0
    f660:	bl	48c4 <rb_lib_log@plt>
    f664:	ldr	r0, [pc, #20]	; f680 <rb_outofmemory+0x54>
    f668:	add	r0, pc, r0
    f66c:	bl	4a08 <rb_lib_restart@plt>
    f670:	bl	4378 <abort@plt>
    f674:	.word	0x0002cd24
    f678:	.word	0x0002cd10
    f67c:	.word	0x000085fc
    f680:	.word	0x00008614

0000f684 <rb_linebuf_done_line>:
    f684:	strd	r4, [sp, #-16]!
    f688:	str	r6, [sp, #8]
    f68c:	str	lr, [sp, #12]
    f690:	mov	r4, r0
    f694:	mov	r5, r1
    f698:	ldr	r3, [r2, #8]
    f69c:	cmp	r3, #0
    f6a0:	ldrne	r1, [r2, #4]
    f6a4:	strne	r1, [r3, #4]
    f6a8:	ldreq	r3, [r2, #4]
    f6ac:	streq	r3, [r0, #4]
    f6b0:	ldr	r3, [r2, #4]
    f6b4:	cmp	r3, #0
    f6b8:	ldrne	r1, [r2, #8]
    f6bc:	strne	r1, [r3, #8]
    f6c0:	ldreq	r3, [r2, #8]
    f6c4:	streq	r3, [r0]
    f6c8:	mov	r3, #0
    f6cc:	str	r3, [r2, #4]
    f6d0:	str	r3, [r2, #8]
    f6d4:	ldr	r3, [r0, #8]
    f6d8:	sub	r3, r3, #1
    f6dc:	str	r3, [r0, #8]
    f6e0:	mov	r0, r2
    f6e4:	bl	47f8 <rb_free_rb_dlink_node@plt>
    f6e8:	ldr	r3, [r4, #16]
    f6ec:	sub	r3, r3, #1
    f6f0:	str	r3, [r4, #16]
    f6f4:	ldr	r3, [r4, #12]
    f6f8:	ldr	r2, [r5, #1028]	; 0x404
    f6fc:	sub	r3, r3, r2
    f700:	str	r3, [r4, #12]
    f704:	ldr	r3, [r4, #24]
    f708:	sub	r3, r3, #1
    f70c:	str	r3, [r4, #24]
    f710:	ldr	r3, [r5, #1032]	; 0x408
    f714:	sub	r3, r3, #1
    f718:	str	r3, [r5, #1032]	; 0x408
    f71c:	cmp	r3, #0
    f720:	beq	f734 <rb_linebuf_done_line+0xb0>
    f724:	ldrd	r4, [sp]
    f728:	ldr	r6, [sp, #8]
    f72c:	add	sp, sp, #12
    f730:	pop	{pc}		; (ldr pc, [sp], #4)
    f734:	ldr	r3, [pc, #28]	; f758 <rb_linebuf_done_line+0xd4>
    f738:	add	r3, pc, r3
    f73c:	ldr	r2, [r3]
    f740:	sub	r2, r2, #1
    f744:	str	r2, [r3]
    f748:	mov	r1, r5
    f74c:	ldr	r0, [r3, #4]
    f750:	bl	487c <rb_bh_free@plt>
    f754:	b	f724 <rb_linebuf_done_line+0xa0>
    f758:	.word	0x0002cc28

0000f75c <rb_linebuf_new_line>:
    f75c:	strd	r4, [sp, #-16]!
    f760:	str	r6, [sp, #8]
    f764:	str	lr, [sp, #12]
    f768:	mov	r4, r0
    f76c:	ldr	r3, [pc, #160]	; f814 <rb_linebuf_new_line+0xb8>
    f770:	add	r3, pc, r3
    f774:	ldr	r0, [r3, #4]
    f778:	bl	4900 <rb_bh_alloc@plt>
    f77c:	subs	r5, r0, #0
    f780:	beq	f7f0 <rb_linebuf_new_line+0x94>
    f784:	ldr	r2, [pc, #140]	; f818 <rb_linebuf_new_line+0xbc>
    f788:	add	r2, pc, r2
    f78c:	ldr	r3, [r2]
    f790:	add	r3, r3, #1
    f794:	str	r3, [r2]
    f798:	bl	4b28 <rb_make_rb_dlink_node@plt>
    f79c:	str	r5, [r0]
    f7a0:	mov	r3, #0
    f7a4:	str	r3, [r0, #8]
    f7a8:	ldr	r3, [r4, #4]
    f7ac:	str	r3, [r0, #4]
    f7b0:	cmp	r3, #0
    f7b4:	strne	r0, [r3, #8]
    f7b8:	beq	f804 <rb_linebuf_new_line+0xa8>
    f7bc:	str	r0, [r4, #4]
    f7c0:	ldr	r3, [r4, #8]
    f7c4:	add	r3, r3, #1
    f7c8:	str	r3, [r4, #8]
    f7cc:	ldr	r3, [r5, #1032]	; 0x408
    f7d0:	add	r3, r3, #1
    f7d4:	str	r3, [r5, #1032]	; 0x408
    f7d8:	ldr	r3, [r4, #16]
    f7dc:	add	r3, r3, #1
    f7e0:	str	r3, [r4, #16]
    f7e4:	ldr	r3, [r4, #24]
    f7e8:	add	r3, r3, #1
    f7ec:	str	r3, [r4, #24]
    f7f0:	mov	r0, r5
    f7f4:	ldrd	r4, [sp]
    f7f8:	ldr	r6, [sp, #8]
    f7fc:	add	sp, sp, #12
    f800:	pop	{pc}		; (ldr pc, [sp], #4)
    f804:	ldr	r3, [r4]
    f808:	cmp	r3, #0
    f80c:	streq	r0, [r4]
    f810:	b	f7bc <rb_linebuf_new_line+0x60>
    f814:	.word	0x0002cbf0
    f818:	.word	0x0002cbd8

0000f81c <rb_linebuf_copy_line>:
    f81c:	strd	r4, [sp, #-24]!	; 0xffffffe8
    f820:	strd	r6, [sp, #8]
    f824:	str	r8, [sp, #16]
    f828:	str	lr, [sp, #20]
    f82c:	ldr	r8, [r1, #1028]	; 0x404
    f830:	add	r5, r1, r8
    f834:	mov	ip, #0
    f838:	strb	ip, [r1, #1026]	; 0x402
    f83c:	ldrb	ip, [r1, #1025]	; 0x401
    f840:	cmp	ip, #1
    f844:	moveq	r4, #0
    f848:	beq	fa58 <rb_linebuf_copy_line+0x23c>
    f84c:	cmp	r3, #0
    f850:	beq	f974 <rb_linebuf_copy_line+0x158>
    f854:	ldrb	ip, [r2]
    f858:	cmp	ip, #13
    f85c:	cmpne	ip, #10
    f860:	beq	fa70 <rb_linebuf_copy_line+0x254>
    f864:	add	ip, r2, #1
    f868:	add	r4, r2, r3
    f86c:	sub	r7, r4, ip
    f870:	mov	lr, ip
    f874:	cmp	ip, r4
    f878:	beq	f8c8 <rb_linebuf_copy_line+0xac>
    f87c:	ldrb	r6, [ip], #1
    f880:	cmp	r6, #13
    f884:	cmpne	r6, #10
    f888:	bne	f86c <rb_linebuf_copy_line+0x50>
    f88c:	ldrb	ip, [lr]
    f890:	cmp	ip, #13
    f894:	cmpne	ip, #10
    f898:	bne	f8d4 <rb_linebuf_copy_line+0xb8>
    f89c:	mov	r4, lr
    f8a0:	add	ip, lr, r7
    f8a4:	sub	ip, ip, #1
    f8a8:	sub	r7, ip, r4
    f8ac:	cmp	r4, ip
    f8b0:	beq	f8d0 <rb_linebuf_copy_line+0xb4>
    f8b4:	ldrb	r6, [r4, #1]!
    f8b8:	cmp	r6, #13
    f8bc:	cmpne	r6, #10
    f8c0:	beq	f8a8 <rb_linebuf_copy_line+0x8c>
    f8c4:	b	f8d4 <rb_linebuf_copy_line+0xb8>
    f8c8:	mov	r7, #0
    f8cc:	b	f8d4 <rb_linebuf_copy_line+0xb8>
    f8d0:	mov	r7, #0
    f8d4:	sub	r4, r3, r7
    f8d8:	cmn	r4, #1
    f8dc:	beq	fa58 <rb_linebuf_copy_line+0x23c>
    f8e0:	mov	r3, r2
    f8e4:	mov	r6, r1
    f8e8:	mov	r7, r0
    f8ec:	rsb	r8, r8, #1020	; 0x3fc
    f8f0:	add	r8, r8, #2
    f8f4:	cmp	r8, r4
    f8f8:	blt	f984 <rb_linebuf_copy_line+0x168>
    f8fc:	mov	r2, r4
    f900:	mov	r1, r3
    f904:	mov	r0, r5
    f908:	bl	47bc <memcpy@plt>
    f90c:	add	r1, r5, r4
    f910:	mov	r3, #0
    f914:	strb	r3, [r5, r4]
    f918:	ldrb	r3, [r1, #-1]
    f91c:	cmp	r3, #13
    f920:	cmpne	r3, #10
    f924:	bne	fa08 <rb_linebuf_copy_line+0x1ec>
    f928:	cmp	r4, #0
    f92c:	beq	fa2c <rb_linebuf_copy_line+0x210>
    f930:	cmp	r3, #10
    f934:	cmpne	r3, #13
    f938:	movne	r3, r4
    f93c:	bne	fa38 <rb_linebuf_copy_line+0x21c>
    f940:	sub	r2, r1, #1
    f944:	sub	ip, r1, r4
    f948:	mov	r0, #0
    f94c:	sub	r8, r4, r1
    f950:	mov	r3, r2
    f954:	strb	r0, [r3], r8
    f958:	cmp	r2, ip
    f95c:	beq	fa34 <rb_linebuf_copy_line+0x218>
    f960:	ldrb	r1, [r2, #-1]!
    f964:	cmp	r1, #10
    f968:	cmpne	r1, #13
    f96c:	beq	f950 <rb_linebuf_copy_line+0x134>
    f970:	b	fa38 <rb_linebuf_copy_line+0x21c>
    f974:	mov	r4, r3
    f978:	b	f8e0 <rb_linebuf_copy_line+0xc4>
    f97c:	mov	r4, #0
    f980:	b	f8e0 <rb_linebuf_copy_line+0xc4>
    f984:	mov	r2, r8
    f988:	mov	r1, r3
    f98c:	mov	r0, r5
    f990:	bl	47bc <memcpy@plt>
    f994:	mov	r3, #0
    f998:	strb	r3, [r6, #1022]	; 0x3fe
    f99c:	cmp	r8, r3
    f9a0:	beq	f9e8 <rb_linebuf_copy_line+0x1cc>
    f9a4:	ldrb	r3, [r6, #1021]	; 0x3fd
    f9a8:	cmp	r3, #10
    f9ac:	cmpne	r3, #13
    f9b0:	bne	f9e8 <rb_linebuf_copy_line+0x1cc>
    f9b4:	add	r3, r6, #1020	; 0x3fc
    f9b8:	add	r3, r3, #1
    f9bc:	add	r2, r6, #1020	; 0x3fc
    f9c0:	add	r2, r2, #2
    f9c4:	sub	r8, r2, r8
    f9c8:	mov	r1, #0
    f9cc:	strb	r1, [r3]
    f9d0:	cmp	r3, r8
    f9d4:	beq	f9e8 <rb_linebuf_copy_line+0x1cc>
    f9d8:	ldrb	r2, [r3, #-1]!
    f9dc:	cmp	r2, #10
    f9e0:	cmpne	r2, #13
    f9e4:	beq	f9cc <rb_linebuf_copy_line+0x1b0>
    f9e8:	mov	r3, #1
    f9ec:	strb	r3, [r6, #1025]	; 0x401
    f9f0:	movw	r2, #1022	; 0x3fe
    f9f4:	str	r2, [r6, #1028]	; 0x404
    f9f8:	ldr	r3, [r7, #12]
    f9fc:	add	r3, r3, r2
    fa00:	str	r3, [r7, #12]
    fa04:	b	fa58 <rb_linebuf_copy_line+0x23c>
    fa08:	ldr	r3, [r7, #12]
    fa0c:	add	r3, r3, r4
    fa10:	str	r3, [r7, #12]
    fa14:	ldr	r3, [r6, #1028]	; 0x404
    fa18:	add	r3, r3, r4
    fa1c:	str	r3, [r6, #1028]	; 0x404
    fa20:	mov	r3, #0
    fa24:	strb	r3, [r6, #1025]	; 0x401
    fa28:	b	fa58 <rb_linebuf_copy_line+0x23c>
    fa2c:	mov	r3, r4
    fa30:	b	fa38 <rb_linebuf_copy_line+0x21c>
    fa34:	mov	r3, #0
    fa38:	mov	r2, #1
    fa3c:	strb	r2, [r6, #1025]	; 0x401
    fa40:	ldr	r2, [r7, #12]
    fa44:	add	r2, r2, r3
    fa48:	str	r2, [r7, #12]
    fa4c:	ldr	r2, [r6, #1028]	; 0x404
    fa50:	add	r3, r2, r3
    fa54:	str	r3, [r6, #1028]	; 0x404
    fa58:	mov	r0, r4
    fa5c:	ldrd	r4, [sp]
    fa60:	ldrd	r6, [sp, #8]
    fa64:	ldr	r8, [sp, #16]
    fa68:	add	sp, sp, #20
    fa6c:	pop	{pc}		; (ldr pc, [sp], #4)
    fa70:	ldrb	ip, [r2]
    fa74:	cmp	ip, #10
    fa78:	cmpne	ip, #13
    fa7c:	bne	f97c <rb_linebuf_copy_line+0x160>
    fa80:	mov	lr, r2
    fa84:	mov	r7, r3
    fa88:	b	f89c <rb_linebuf_copy_line+0x80>

0000fa8c <rb_linebuf_copy_raw>:
    fa8c:	strd	r4, [sp, #-24]!	; 0xffffffe8
    fa90:	strd	r6, [sp, #8]
    fa94:	str	r8, [sp, #16]
    fa98:	str	lr, [sp, #20]
    fa9c:	ldr	r6, [r1, #1028]	; 0x404
    faa0:	add	r5, r1, r6
    faa4:	mov	ip, #1
    faa8:	strb	ip, [r1, #1026]	; 0x402
    faac:	ldrb	ip, [r1, #1025]	; 0x401
    fab0:	cmp	ip, #1
    fab4:	moveq	r4, #0
    fab8:	beq	fbb8 <rb_linebuf_copy_raw+0x12c>
    fabc:	cmp	r3, #0
    fac0:	beq	fbd0 <rb_linebuf_copy_raw+0x144>
    fac4:	ldrb	ip, [r2]
    fac8:	cmp	ip, #13
    facc:	cmpne	ip, #10
    fad0:	beq	fc3c <rb_linebuf_copy_raw+0x1b0>
    fad4:	add	lr, r2, #1
    fad8:	add	r8, r2, r3
    fadc:	sub	r4, r8, lr
    fae0:	mov	ip, lr
    fae4:	cmp	lr, r8
    fae8:	beq	fb38 <rb_linebuf_copy_raw+0xac>
    faec:	ldrb	r7, [lr], #1
    faf0:	cmp	r7, #13
    faf4:	cmpne	r7, #10
    faf8:	bne	fadc <rb_linebuf_copy_raw+0x50>
    fafc:	ldrb	lr, [ip]
    fb00:	cmp	lr, #13
    fb04:	cmpne	lr, #10
    fb08:	bne	fb44 <rb_linebuf_copy_raw+0xb8>
    fb0c:	mov	lr, ip
    fb10:	add	ip, ip, r4
    fb14:	sub	ip, ip, #1
    fb18:	sub	r4, ip, lr
    fb1c:	cmp	lr, ip
    fb20:	beq	fb40 <rb_linebuf_copy_raw+0xb4>
    fb24:	ldrb	r7, [lr, #1]!
    fb28:	cmp	r7, #13
    fb2c:	cmpne	r7, #10
    fb30:	beq	fb18 <rb_linebuf_copy_raw+0x8c>
    fb34:	b	fb44 <rb_linebuf_copy_raw+0xb8>
    fb38:	mov	r4, #0
    fb3c:	b	fb44 <rb_linebuf_copy_raw+0xb8>
    fb40:	mov	r4, #0
    fb44:	sub	r4, r3, r4
    fb48:	cmn	r4, #1
    fb4c:	beq	fbb8 <rb_linebuf_copy_raw+0x12c>
    fb50:	mov	r3, r2
    fb54:	mov	r7, r1
    fb58:	mov	r8, r0
    fb5c:	rsb	r6, r6, #1020	; 0x3fc
    fb60:	add	r6, r6, #2
    fb64:	cmp	r6, r4
    fb68:	blt	fbe0 <rb_linebuf_copy_raw+0x154>
    fb6c:	mov	r2, r4
    fb70:	mov	r1, r3
    fb74:	mov	r0, r5
    fb78:	bl	47bc <memcpy@plt>
    fb7c:	add	r3, r5, r4
    fb80:	mov	r2, #0
    fb84:	strb	r2, [r5, r4]
    fb88:	ldrb	r3, [r3, #-1]
    fb8c:	cmp	r3, #13
    fb90:	cmpne	r3, #10
    fb94:	bne	fc1c <rb_linebuf_copy_raw+0x190>
    fb98:	mov	r3, #1
    fb9c:	strb	r3, [r7, #1025]	; 0x401
    fba0:	ldr	r3, [r8, #12]
    fba4:	add	r3, r3, r4
    fba8:	str	r3, [r8, #12]
    fbac:	ldr	r3, [r7, #1028]	; 0x404
    fbb0:	add	r3, r3, r4
    fbb4:	str	r3, [r7, #1028]	; 0x404
    fbb8:	mov	r0, r4
    fbbc:	ldrd	r4, [sp]
    fbc0:	ldrd	r6, [sp, #8]
    fbc4:	ldr	r8, [sp, #16]
    fbc8:	add	sp, sp, #20
    fbcc:	pop	{pc}		; (ldr pc, [sp], #4)
    fbd0:	mov	r4, r3
    fbd4:	b	fb50 <rb_linebuf_copy_raw+0xc4>
    fbd8:	mov	r4, #0
    fbdc:	b	fb50 <rb_linebuf_copy_raw+0xc4>
    fbe0:	mov	r2, r6
    fbe4:	mov	r1, r3
    fbe8:	mov	r0, r5
    fbec:	bl	47bc <memcpy@plt>
    fbf0:	mov	r3, #0
    fbf4:	strb	r3, [r7, #1022]	; 0x3fe
    fbf8:	mov	r3, #1
    fbfc:	strb	r3, [r7, #1025]	; 0x401
    fc00:	movw	r2, #1022	; 0x3fe
    fc04:	str	r2, [r7, #1028]	; 0x404
    fc08:	ldr	r3, [r8, #12]
    fc0c:	add	r3, r3, r2
    fc10:	str	r3, [r8, #12]
    fc14:	mov	r4, r6
    fc18:	b	fbb8 <rb_linebuf_copy_raw+0x12c>
    fc1c:	ldr	r3, [r8, #12]
    fc20:	add	r3, r3, r4
    fc24:	str	r3, [r8, #12]
    fc28:	ldr	r3, [r7, #1028]	; 0x404
    fc2c:	add	r3, r3, r4
    fc30:	str	r3, [r7, #1028]	; 0x404
    fc34:	strb	r2, [r7, #1025]	; 0x401
    fc38:	b	fbb8 <rb_linebuf_copy_raw+0x12c>
    fc3c:	ldrb	ip, [r2]
    fc40:	cmp	ip, #13
    fc44:	cmpne	ip, #10
    fc48:	bne	fbd8 <rb_linebuf_copy_raw+0x14c>
    fc4c:	mov	ip, r2
    fc50:	mov	r4, r3
    fc54:	b	fb0c <rb_linebuf_copy_raw+0x80>

0000fc58 <rb_linebuf_init>:
    fc58:	str	r4, [sp, #-8]!
    fc5c:	str	lr, [sp, #4]
    fc60:	ldr	r2, [pc, #36]	; fc8c <rb_linebuf_init+0x34>
    fc64:	add	r2, pc, r2
    fc68:	mov	r1, r0
    fc6c:	movw	r0, #1036	; 0x40c
    fc70:	bl	4a5c <rb_bh_create@plt>
    fc74:	ldr	r3, [pc, #20]	; fc90 <rb_linebuf_init+0x38>
    fc78:	add	r3, pc, r3
    fc7c:	str	r0, [r3, #4]
    fc80:	ldr	r4, [sp]
    fc84:	add	sp, sp, #4
    fc88:	pop	{pc}		; (ldr pc, [sp], #4)
    fc8c:	.word	0x00008028
    fc90:	.word	0x0002c6e8

0000fc94 <rb_linebuf_newbuf>:
    fc94:	mov	r3, #0
    fc98:	str	r3, [r0]
    fc9c:	str	r3, [r0, #4]
    fca0:	str	r3, [r0, #8]
    fca4:	str	r3, [r0, #12]
    fca8:	str	r3, [r0, #16]
    fcac:	str	r3, [r0, #20]
    fcb0:	str	r3, [r0, #24]
    fcb4:	bx	lr

0000fcb8 <rb_linebuf_donebuf>:
    fcb8:	str	r4, [sp, #-8]!
    fcbc:	str	lr, [sp, #4]
    fcc0:	mov	r4, r0
    fcc4:	ldr	r3, [r0]
    fcc8:	cmp	r3, #0
    fccc:	beq	fcec <rb_linebuf_donebuf+0x34>
    fcd0:	mov	r2, r3
    fcd4:	ldr	r1, [r3]
    fcd8:	mov	r0, r4
    fcdc:	bl	f684 <rb_linebuf_done_line>
    fce0:	ldr	r3, [r4]
    fce4:	cmp	r3, #0
    fce8:	bne	fcd0 <rb_linebuf_donebuf+0x18>
    fcec:	ldr	r4, [sp]
    fcf0:	add	sp, sp, #4
    fcf4:	pop	{pc}		; (ldr pc, [sp], #4)

0000fcf8 <rb_linebuf_parse>:
    fcf8:	strd	r4, [sp, #-24]!	; 0xffffffe8
    fcfc:	strd	r6, [sp, #8]
    fd00:	str	r8, [sp, #16]
    fd04:	str	lr, [sp, #20]
    fd08:	mov	r6, r0
    fd0c:	mov	r5, r1
    fd10:	mov	r4, r2
    fd14:	mov	r8, r3
    fd18:	ldr	r3, [r0, #4]
    fd1c:	cmp	r3, #0
    fd20:	beq	fd7c <rb_linebuf_parse+0x84>
    fd24:	ldr	r1, [r3]
    fd28:	cmp	r8, #0
    fd2c:	bne	fd6c <rb_linebuf_parse+0x74>
    fd30:	mov	r3, r2
    fd34:	mov	r2, r5
    fd38:	bl	f81c <rb_linebuf_copy_line>
    fd3c:	cmn	r0, #1
    fd40:	beq	fde0 <rb_linebuf_parse+0xe8>
    fd44:	cmp	r0, r4
    fd48:	moveq	r0, #1
    fd4c:	beq	fde0 <rb_linebuf_parse+0xe8>
    fd50:	sub	r4, r4, r0
    fd54:	add	r5, r5, r0
    fd58:	mov	r7, #1
    fd5c:	cmp	r4, #0
    fd60:	bgt	fdb4 <rb_linebuf_parse+0xbc>
    fd64:	mov	r0, r7
    fd68:	b	fde0 <rb_linebuf_parse+0xe8>
    fd6c:	mov	r3, r2
    fd70:	mov	r2, r5
    fd74:	bl	fa8c <rb_linebuf_copy_raw>
    fd78:	b	fd3c <rb_linebuf_parse+0x44>
    fd7c:	mov	r7, #0
    fd80:	b	fd5c <rb_linebuf_parse+0x64>
    fd84:	mov	r3, r4
    fd88:	mov	r2, r5
    fd8c:	mov	r1, r0
    fd90:	mov	r0, r6
    fd94:	bl	fa8c <rb_linebuf_copy_raw>
    fd98:	cmn	r0, #1
    fd9c:	beq	fde0 <rb_linebuf_parse+0xe8>
    fda0:	sub	r4, r4, r0
    fda4:	add	r5, r5, r0
    fda8:	add	r7, r7, #1
    fdac:	cmp	r4, #0
    fdb0:	ble	fddc <rb_linebuf_parse+0xe4>
    fdb4:	mov	r0, r6
    fdb8:	bl	f75c <rb_linebuf_new_line>
    fdbc:	cmp	r8, #0
    fdc0:	bne	fd84 <rb_linebuf_parse+0x8c>
    fdc4:	mov	r3, r4
    fdc8:	mov	r2, r5
    fdcc:	mov	r1, r0
    fdd0:	mov	r0, r6
    fdd4:	bl	f81c <rb_linebuf_copy_line>
    fdd8:	b	fd98 <rb_linebuf_parse+0xa0>
    fddc:	mov	r0, r7
    fde0:	ldrd	r4, [sp]
    fde4:	ldrd	r6, [sp, #8]
    fde8:	ldr	r8, [sp, #16]
    fdec:	add	sp, sp, #20
    fdf0:	pop	{pc}		; (ldr pc, [sp], #4)

0000fdf4 <rb_linebuf_get>:
    fdf4:	strd	r4, [sp, #-32]!	; 0xffffffe0
    fdf8:	strd	r6, [sp, #8]
    fdfc:	strd	r8, [sp, #16]
    fe00:	str	sl, [sp, #24]
    fe04:	str	lr, [sp, #28]
    fe08:	ldr	r8, [sp, #32]
    fe0c:	ldr	ip, [r0]
    fe10:	cmp	ip, #0
    fe14:	moveq	r4, #0
    fe18:	beq	fe9c <rb_linebuf_get+0xa8>
    fe1c:	ldr	r5, [ip]
    fe20:	cmp	r3, #0
    fe24:	bne	fe38 <rb_linebuf_get+0x44>
    fe28:	ldrb	ip, [r5, #1025]	; 0x401
    fe2c:	cmp	ip, #0
    fe30:	moveq	r4, r3
    fe34:	beq	fe9c <rb_linebuf_get+0xa8>
    fe38:	ldr	r4, [r5, #1028]	; 0x404
    fe3c:	cmp	r4, r2
    fe40:	subgt	r4, r2, #1
    fe44:	mov	r7, r1
    fe48:	mov	r6, r0
    fe4c:	mov	r1, r5
    fe50:	ldrb	r2, [r5, #1026]	; 0x402
    fe54:	clz	r3, r8
    fe58:	lsr	r3, r3, #5
    fe5c:	cmp	r2, #0
    fe60:	moveq	r3, #0
    fe64:	cmp	r3, #0
    fe68:	bne	feb8 <rb_linebuf_get+0xc4>
    fe6c:	mov	r9, r4
    fe70:	mov	r2, r4
    fe74:	mov	r0, r7
    fe78:	bl	47bc <memcpy@plt>
    fe7c:	cmp	r8, #0
    fe80:	bne	fe8c <rb_linebuf_get+0x98>
    fe84:	mov	r3, #0
    fe88:	strb	r3, [r7, r9]
    fe8c:	ldr	r2, [r6]
    fe90:	mov	r1, r5
    fe94:	mov	r0, r6
    fe98:	bl	f684 <rb_linebuf_done_line>
    fe9c:	mov	r0, r4
    fea0:	ldrd	r4, [sp]
    fea4:	ldrd	r6, [sp, #8]
    fea8:	ldrd	r8, [sp, #16]
    feac:	ldr	sl, [sp, #24]
    feb0:	add	sp, sp, #28
    feb4:	pop	{pc}		; (ldr pc, [sp], #4)
    feb8:	cmp	r4, #0
    febc:	beq	ff3c <rb_linebuf_get+0x148>
    fec0:	ldrb	r3, [r5]
    fec4:	cmp	r3, #10
    fec8:	cmpne	r3, #13
    fecc:	bne	fef8 <rb_linebuf_get+0x104>
    fed0:	add	r3, r5, #1
    fed4:	add	r0, r5, r4
    fed8:	mov	r1, r3
    fedc:	sub	r4, r0, r3
    fee0:	cmp	r3, r0
    fee4:	beq	ff3c <rb_linebuf_get+0x148>
    fee8:	ldrb	r2, [r3], #1
    feec:	cmp	r2, #10
    fef0:	cmpne	r2, #13
    fef4:	beq	fed8 <rb_linebuf_get+0xe4>
    fef8:	sub	r3, r4, #1
    fefc:	add	r2, r1, r3
    ff00:	ldrb	r3, [r1, r3]
    ff04:	cmp	r3, #10
    ff08:	cmpne	r3, #13
    ff0c:	bne	ff28 <rb_linebuf_get+0x134>
    ff10:	subs	r4, r4, #1
    ff14:	beq	ff28 <rb_linebuf_get+0x134>
    ff18:	ldrb	r3, [r2, #-1]!
    ff1c:	cmp	r3, #10
    ff20:	cmpne	r3, #13
    ff24:	beq	ff10 <rb_linebuf_get+0x11c>
    ff28:	mov	r9, r4
    ff2c:	mov	r2, r4
    ff30:	mov	r0, r7
    ff34:	bl	47bc <memcpy@plt>
    ff38:	b	fe84 <rb_linebuf_get+0x90>
    ff3c:	mov	r4, #0
    ff40:	b	ff28 <rb_linebuf_get+0x134>

0000ff44 <rb_linebuf_attach>:
    ff44:	strd	r4, [sp, #-24]!	; 0xffffffe8
    ff48:	strd	r6, [sp, #8]
    ff4c:	str	r8, [sp, #16]
    ff50:	str	lr, [sp, #20]
    ff54:	ldr	r6, [r1]
    ff58:	cmp	r6, #0
    ff5c:	beq	fff0 <rb_linebuf_attach+0xac>
    ff60:	mov	r4, r0
    ff64:	mov	r7, #0
    ff68:	b	ffc8 <rb_linebuf_attach+0x84>
    ff6c:	ldr	r3, [r4]
    ff70:	cmp	r3, #0
    ff74:	streq	r0, [r4]
    ff78:	str	r0, [r4, #4]
    ff7c:	ldr	r3, [r4, #8]
    ff80:	add	r3, r3, #1
    ff84:	str	r3, [r4, #8]
    ff88:	ldr	r3, [r4, #16]
    ff8c:	add	r3, r3, #1
    ff90:	str	r3, [r4, #16]
    ff94:	ldr	r3, [r4, #12]
    ff98:	ldr	r2, [r5, #1028]	; 0x404
    ff9c:	add	r3, r3, r2
    ffa0:	str	r3, [r4, #12]
    ffa4:	ldr	r3, [r4, #24]
    ffa8:	add	r3, r3, #1
    ffac:	str	r3, [r4, #24]
    ffb0:	ldr	r3, [r5, #1032]	; 0x408
    ffb4:	add	r3, r3, #1
    ffb8:	str	r3, [r5, #1032]	; 0x408
    ffbc:	ldr	r6, [r6, #8]
    ffc0:	cmp	r6, #0
    ffc4:	beq	fff0 <rb_linebuf_attach+0xac>
    ffc8:	ldr	r5, [r6]
    ffcc:	bl	4b28 <rb_make_rb_dlink_node@plt>
    ffd0:	str	r5, [r0]
    ffd4:	str	r7, [r0, #8]
    ffd8:	ldr	r3, [r4, #4]
    ffdc:	str	r3, [r0, #4]
    ffe0:	cmp	r3, #0
    ffe4:	strne	r0, [r3, #8]
    ffe8:	bne	ff78 <rb_linebuf_attach+0x34>
    ffec:	b	ff6c <rb_linebuf_attach+0x28>
    fff0:	ldrd	r4, [sp]
    fff4:	ldrd	r6, [sp, #8]
    fff8:	ldr	r8, [sp, #16]
    fffc:	add	sp, sp, #20
   10000:	pop	{pc}		; (ldr pc, [sp], #4)

00010004 <rb_linebuf_put>:
   10004:	strd	r4, [sp, #-16]!
   10008:	str	r6, [sp, #8]
   1000c:	str	lr, [sp, #12]
   10010:	mov	r5, r0
   10014:	mov	r6, r1
   10018:	bl	f75c <rb_linebuf_new_line>
   1001c:	mov	r4, r0
   10020:	mov	r2, r6
   10024:	movw	r1, #1023	; 0x3ff
   10028:	bl	4648 <rb_fsnprint@plt>
   1002c:	cmp	r0, #0
   10030:	movle	r0, #0
   10034:	ble	10044 <rb_linebuf_put+0x40>
   10038:	movw	r3, #1022	; 0x3fe
   1003c:	cmp	r0, r3
   10040:	movcs	r0, r3
   10044:	mov	r3, r4
   10048:	mov	r2, #13
   1004c:	strb	r2, [r3, r0]!
   10050:	add	r0, r0, #2
   10054:	mov	r2, #10
   10058:	strb	r2, [r3, #1]
   1005c:	mov	r3, #0
   10060:	strb	r3, [r4, r0]
   10064:	mov	r3, #1
   10068:	strb	r3, [r4, #1025]	; 0x401
   1006c:	str	r0, [r4, #1028]	; 0x404
   10070:	ldr	r3, [r5, #12]
   10074:	add	r0, r3, r0
   10078:	str	r0, [r5, #12]
   1007c:	ldrd	r4, [sp]
   10080:	ldr	r6, [sp, #8]
   10084:	add	sp, sp, #12
   10088:	pop	{pc}		; (ldr pc, [sp], #4)

0001008c <rb_linebuf_flush>:
   1008c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   10090:	strd	r6, [sp, #8]
   10094:	strd	r8, [sp, #16]
   10098:	strd	sl, [sp, #24]
   1009c:	str	lr, [sp, #32]
   100a0:	sub	sp, sp, #4
   100a4:	mov	r6, r0
   100a8:	mov	r5, r1
   100ac:	bl	4468 <rb_fd_ssl@plt>
   100b0:	subs	r7, r0, #0
   100b4:	beq	1012c <rb_linebuf_flush+0xa0>
   100b8:	ldr	r3, [r5]
   100bc:	cmp	r3, #0
   100c0:	beq	102c8 <rb_linebuf_flush+0x23c>
   100c4:	ldr	r4, [r3]
   100c8:	ldrb	r3, [r4, #1025]	; 0x401
   100cc:	cmp	r3, #0
   100d0:	beq	102dc <rb_linebuf_flush+0x250>
   100d4:	ldr	r1, [r5, #20]
   100d8:	ldr	r2, [r4, #1028]	; 0x404
   100dc:	sub	r2, r2, r1
   100e0:	add	r1, r4, r1
   100e4:	mov	r0, r6
   100e8:	bl	460c <rb_write@plt>
   100ec:	subs	sl, r0, #0
   100f0:	ble	1010c <rb_linebuf_flush+0x80>
   100f4:	ldr	r3, [r5, #20]
   100f8:	add	r3, sl, r3
   100fc:	str	r3, [r5, #20]
   10100:	ldr	r2, [r4, #1028]	; 0x404
   10104:	cmp	r3, r2
   10108:	beq	102f0 <rb_linebuf_flush+0x264>
   1010c:	mov	r0, sl
   10110:	add	sp, sp, #4
   10114:	ldrd	r4, [sp]
   10118:	ldrd	r6, [sp, #8]
   1011c:	ldrd	r8, [sp, #16]
   10120:	ldrd	sl, [sp, #24]
   10124:	add	sp, sp, #32
   10128:	pop	{pc}		; (ldr pc, [sp], #4)
   1012c:	mov	r2, #8192	; 0x2000
   10130:	mov	r1, #0
   10134:	ldr	r0, [pc, #504]	; 10334 <rb_linebuf_flush+0x2a8>
   10138:	add	r0, pc, r0
   1013c:	bl	45dc <memset@plt>
   10140:	ldr	r3, [r5]
   10144:	cmp	r3, #0
   10148:	beq	101f0 <rb_linebuf_flush+0x164>
   1014c:	ldr	r2, [r3]
   10150:	ldrb	r1, [r2, #1025]	; 0x401
   10154:	cmp	r1, #0
   10158:	beq	10204 <rb_linebuf_flush+0x178>
   1015c:	ldr	r0, [r5, #20]
   10160:	ldr	r1, [pc, #464]	; 10338 <rb_linebuf_flush+0x2ac>
   10164:	add	r1, pc, r1
   10168:	add	ip, r2, r0
   1016c:	str	ip, [r1]
   10170:	ldr	r2, [r2, #1028]	; 0x404
   10174:	sub	r2, r2, r0
   10178:	str	r2, [r1, #4]
   1017c:	ldr	r2, [r3, #8]
   10180:	cmp	r2, #0
   10184:	beq	1030c <rb_linebuf_flush+0x280>
   10188:	ldr	r1, [r2]
   1018c:	ldrb	r3, [r1, #1025]	; 0x401
   10190:	cmp	r3, #0
   10194:	beq	1030c <rb_linebuf_flush+0x280>
   10198:	ldr	r3, [pc, #412]	; 1033c <rb_linebuf_flush+0x2b0>
   1019c:	add	r3, pc, r3
   101a0:	str	r1, [r3, #8]
   101a4:	ldr	r1, [r1, #1028]	; 0x404
   101a8:	str	r1, [r3, #12]
   101ac:	ldr	r2, [r2, #8]
   101b0:	mov	r4, #2
   101b4:	cmp	r2, #0
   101b8:	beq	10218 <rb_linebuf_flush+0x18c>
   101bc:	ldr	r1, [r2]
   101c0:	ldrb	r0, [r1, #1025]	; 0x401
   101c4:	cmp	r0, #0
   101c8:	beq	10218 <rb_linebuf_flush+0x18c>
   101cc:	str	r1, [r3, #16]
   101d0:	ldr	r1, [r1, #1028]	; 0x404
   101d4:	str	r1, [r3, #20]
   101d8:	ldr	r2, [r2, #8]
   101dc:	add	r4, r4, #1
   101e0:	add	r3, r3, #8
   101e4:	cmp	r4, #1024	; 0x400
   101e8:	bne	101b4 <rb_linebuf_flush+0x128>
   101ec:	b	10220 <rb_linebuf_flush+0x194>
   101f0:	bl	4c90 <__errno_location@plt>
   101f4:	mov	r3, #11
   101f8:	str	r3, [r0]
   101fc:	mvn	sl, #0
   10200:	b	1010c <rb_linebuf_flush+0x80>
   10204:	bl	4c90 <__errno_location@plt>
   10208:	mov	r3, #11
   1020c:	str	r3, [r0]
   10210:	mvn	sl, #0
   10214:	b	1010c <rb_linebuf_flush+0x80>
   10218:	cmp	r4, #0
   1021c:	beq	102b4 <rb_linebuf_flush+0x228>
   10220:	mov	r2, r4
   10224:	ldr	r1, [pc, #276]	; 10340 <rb_linebuf_flush+0x2b4>
   10228:	add	r1, pc, r1
   1022c:	mov	r0, r6
   10230:	bl	4a80 <rb_writev@plt>
   10234:	subs	sl, r0, #0
   10238:	ble	1010c <rb_linebuf_flush+0x80>
   1023c:	ldr	r8, [r5]
   10240:	cmp	r4, #0
   10244:	ble	1010c <rb_linebuf_flush+0x80>
   10248:	ldr	r1, [r8]
   1024c:	ldr	r2, [r5, #20]
   10250:	ldr	r3, [r1, #1028]	; 0x404
   10254:	sub	r3, r3, r2
   10258:	cmp	r3, sl
   1025c:	movgt	r6, sl
   10260:	movgt	r7, r2
   10264:	bgt	102a8 <rb_linebuf_flush+0x21c>
   10268:	mov	r6, sl
   1026c:	mov	r9, r7
   10270:	mov	fp, #0
   10274:	sub	r6, r6, r3
   10278:	ldr	r8, [r8, #8]
   1027c:	ldr	r2, [r5]
   10280:	mov	r0, r5
   10284:	bl	f684 <rb_linebuf_done_line>
   10288:	str	fp, [r5, #20]
   1028c:	add	r9, r9, #1
   10290:	cmp	r9, r4
   10294:	beq	1010c <rb_linebuf_flush+0x80>
   10298:	ldr	r1, [r8]
   1029c:	ldr	r3, [r1, #1028]	; 0x404
   102a0:	cmp	r3, r6
   102a4:	ble	10274 <rb_linebuf_flush+0x1e8>
   102a8:	add	r7, r7, r6
   102ac:	str	r7, [r5, #20]
   102b0:	b	1010c <rb_linebuf_flush+0x80>
   102b4:	bl	4c90 <__errno_location@plt>
   102b8:	mov	r3, #11
   102bc:	str	r3, [r0]
   102c0:	mvn	sl, #0
   102c4:	b	1010c <rb_linebuf_flush+0x80>
   102c8:	bl	4c90 <__errno_location@plt>
   102cc:	mov	r3, #11
   102d0:	str	r3, [r0]
   102d4:	mvn	sl, #0
   102d8:	b	1010c <rb_linebuf_flush+0x80>
   102dc:	bl	4c90 <__errno_location@plt>
   102e0:	mov	r3, #11
   102e4:	str	r3, [r0]
   102e8:	mvn	sl, #0
   102ec:	b	1010c <rb_linebuf_flush+0x80>
   102f0:	mov	r3, #0
   102f4:	str	r3, [r5, #20]
   102f8:	ldr	r2, [r5]
   102fc:	mov	r1, r4
   10300:	mov	r0, r5
   10304:	bl	f684 <rb_linebuf_done_line>
   10308:	b	1010c <rb_linebuf_flush+0x80>
   1030c:	mov	r2, #1
   10310:	ldr	r1, [pc, #44]	; 10344 <rb_linebuf_flush+0x2b8>
   10314:	add	r1, pc, r1
   10318:	mov	r0, r6
   1031c:	bl	4a80 <rb_writev@plt>
   10320:	subs	sl, r0, #0
   10324:	ble	1010c <rb_linebuf_flush+0x80>
   10328:	ldr	r8, [r5]
   1032c:	mov	r4, #1
   10330:	b	10248 <rb_linebuf_flush+0x1bc>
   10334:	.word	0x0002c230
   10338:	.word	0x0002c204
   1033c:	.word	0x0002c1cc
   10340:	.word	0x0002c140
   10344:	.word	0x0002c054

00010348 <rb_count_rb_linebuf_memory>:
   10348:	push	{lr}		; (str lr, [sp, #-4]!)
   1034c:	sub	sp, sp, #12
   10350:	ldr	r3, [pc, #36]	; 1037c <rb_count_rb_linebuf_memory+0x34>
   10354:	add	r3, pc, r3
   10358:	ldr	ip, [r3, #4]
   1035c:	mov	r2, #0
   10360:	str	r2, [sp]
   10364:	mov	r3, r1
   10368:	mov	r1, r0
   1036c:	mov	r0, ip
   10370:	bl	4cb4 <rb_bh_usage@plt>
   10374:	add	sp, sp, #12
   10378:	pop	{pc}		; (ldr pc, [sp], #4)
   1037c:	.word	0x0002c00c

00010380 <rb_init_rb_dlink_nodes>:
   10380:	str	r4, [sp, #-8]!
   10384:	str	lr, [sp, #4]
   10388:	ldr	r2, [pc, #48]	; 103c0 <rb_init_rb_dlink_nodes+0x40>
   1038c:	add	r2, pc, r2
   10390:	mov	r1, r0
   10394:	mov	r0, #12
   10398:	bl	4a5c <rb_bh_create@plt>
   1039c:	ldr	r3, [pc, #32]	; 103c4 <rb_init_rb_dlink_nodes+0x44>
   103a0:	add	r3, pc, r3
   103a4:	str	r0, [r3]
   103a8:	cmp	r0, #0
   103ac:	beq	103bc <rb_init_rb_dlink_nodes+0x3c>
   103b0:	ldr	r4, [sp]
   103b4:	add	sp, sp, #4
   103b8:	pop	{pc}		; (ldr pc, [sp], #4)
   103bc:	bl	4930 <rb_outofmemory@plt>
   103c0:	.word	0x00007914
   103c4:	.word	0x0002dfc8

000103c8 <rb_make_rb_dlink_node>:
   103c8:	str	r4, [sp, #-8]!
   103cc:	str	lr, [sp, #4]
   103d0:	ldr	r3, [pc, #20]	; 103ec <rb_make_rb_dlink_node+0x24>
   103d4:	add	r3, pc, r3
   103d8:	ldr	r0, [r3]
   103dc:	bl	4900 <rb_bh_alloc@plt>
   103e0:	ldr	r4, [sp]
   103e4:	add	sp, sp, #4
   103e8:	pop	{pc}		; (ldr pc, [sp], #4)
   103ec:	.word	0x0002df94

000103f0 <rb_free_rb_dlink_node>:
   103f0:	str	r4, [sp, #-8]!
   103f4:	str	lr, [sp, #4]
   103f8:	mov	r1, r0
   103fc:	ldr	r3, [pc, #20]	; 10418 <rb_free_rb_dlink_node+0x28>
   10400:	add	r3, pc, r3
   10404:	ldr	r0, [r3]
   10408:	bl	487c <rb_bh_free@plt>
   1040c:	ldr	r4, [sp]
   10410:	add	sp, sp, #4
   10414:	pop	{pc}		; (ldr pc, [sp], #4)
   10418:	.word	0x0002df68

0001041c <rb_string_to_array>:
   1041c:	strd	r4, [sp, #-32]!	; 0xffffffe0
   10420:	strd	r6, [sp, #8]
   10424:	strd	r8, [sp, #16]
   10428:	str	sl, [sp, #24]
   1042c:	str	lr, [sp, #28]
   10430:	cmp	r0, #0
   10434:	moveq	r4, #0
   10438:	beq	10494 <rb_string_to_array+0x78>
   1043c:	mov	r9, r1
   10440:	ldrb	r3, [r0]
   10444:	cmp	r3, #0
   10448:	moveq	r4, #0
   1044c:	beq	10494 <rb_string_to_array+0x78>
   10450:	cmp	r3, #32
   10454:	bne	10470 <rb_string_to_array+0x54>
   10458:	ldrb	r3, [r0, #1]!
   1045c:	cmp	r3, #32
   10460:	beq	10458 <rb_string_to_array+0x3c>
   10464:	cmp	r3, #0
   10468:	moveq	r4, #0
   1046c:	beq	10494 <rb_string_to_array+0x78>
   10470:	sub	r5, r9, #4
   10474:	mov	r6, #0
   10478:	mov	r8, #32
   1047c:	mov	sl, r6
   10480:	sub	r7, r2, #1
   10484:	b	104cc <rb_string_to_array+0xb0>
   10488:	add	r4, r6, #1
   1048c:	add	r0, r0, #1
   10490:	str	r0, [r9, r6, lsl #2]
   10494:	mov	r0, r4
   10498:	ldrd	r4, [sp]
   1049c:	ldrd	r6, [sp, #8]
   104a0:	ldrd	r8, [sp, #16]
   104a4:	ldr	sl, [sp, #24]
   104a8:	add	sp, sp, #28
   104ac:	pop	{pc}		; (ldr pc, [sp], #4)
   104b0:	mov	r0, r2
   104b4:	mov	r3, ip
   104b8:	cmp	r3, #0
   104bc:	beq	10494 <rb_string_to_array+0x78>
   104c0:	cmp	r7, r4
   104c4:	ble	10518 <rb_string_to_array+0xfc>
   104c8:	mov	r6, r4
   104cc:	ldrb	r3, [r0]
   104d0:	cmp	r3, #58	; 0x3a
   104d4:	beq	10488 <rb_string_to_array+0x6c>
   104d8:	add	r4, r6, #1
   104dc:	str	r0, [r5, #4]!
   104e0:	mov	r1, r8
   104e4:	bl	4564 <strchr@plt>
   104e8:	subs	r1, r0, #0
   104ec:	beq	10494 <rb_string_to_array+0x78>
   104f0:	mov	r2, r1
   104f4:	strb	sl, [r2], #1
   104f8:	ldrb	ip, [r1, #1]
   104fc:	cmp	ip, #32
   10500:	bne	104b0 <rb_string_to_array+0x94>
   10504:	mov	r0, r2
   10508:	ldrb	r3, [r0, #1]!
   1050c:	cmp	r3, #32
   10510:	beq	10508 <rb_string_to_array+0xec>
   10514:	b	104b8 <rb_string_to_array+0x9c>
   10518:	cmp	ip, #58	; 0x3a
   1051c:	addeq	r2, r1, #2
   10520:	str	r2, [r9, r4, lsl #2]
   10524:	add	r4, r6, #2
   10528:	b	10494 <rb_string_to_array+0x78>

0001052c <rb_strcasecmp>:
   1052c:	str	r4, [sp, #-8]!
   10530:	str	lr, [sp, #4]
   10534:	bl	457c <strcasecmp@plt>
   10538:	ldr	r4, [sp]
   1053c:	add	sp, sp, #4
   10540:	pop	{pc}		; (ldr pc, [sp], #4)

00010544 <rb_strncasecmp>:
   10544:	str	r4, [sp, #-8]!
   10548:	str	lr, [sp, #4]
   1054c:	bl	4924 <strncasecmp@plt>
   10550:	ldr	r4, [sp]
   10554:	add	sp, sp, #4
   10558:	pop	{pc}		; (ldr pc, [sp], #4)

0001055c <rb_strcasestr>:
   1055c:	str	r4, [sp, #-8]!
   10560:	str	lr, [sp, #4]
   10564:	bl	43cc <strcasestr@plt>
   10568:	ldr	r4, [sp]
   1056c:	add	sp, sp, #4
   10570:	pop	{pc}		; (ldr pc, [sp], #4)

00010574 <rb_strlcat>:
   10574:	strd	r4, [sp, #-32]!	; 0xffffffe0
   10578:	strd	r6, [sp, #8]
   1057c:	strd	r8, [sp, #16]
   10580:	str	sl, [sp, #24]
   10584:	str	lr, [sp, #28]
   10588:	mov	r5, r0
   1058c:	mov	r8, r1
   10590:	mov	r6, r2
   10594:	bl	4798 <strlen@plt>
   10598:	mov	r7, r0
   1059c:	mov	r0, r8
   105a0:	bl	4798 <strlen@plt>
   105a4:	mov	r4, r0
   105a8:	add	r9, r7, r0
   105ac:	add	r5, r5, r7
   105b0:	sub	r2, r6, r7
   105b4:	cmp	r0, r2
   105b8:	subcs	r4, r2, #1
   105bc:	mov	r2, r4
   105c0:	mov	r1, r8
   105c4:	mov	r0, r5
   105c8:	bl	47bc <memcpy@plt>
   105cc:	mov	r3, #0
   105d0:	strb	r3, [r5, r4]
   105d4:	mov	r0, r9
   105d8:	ldrd	r4, [sp]
   105dc:	ldrd	r6, [sp, #8]
   105e0:	ldrd	r8, [sp, #16]
   105e4:	ldr	sl, [sp, #24]
   105e8:	add	sp, sp, #28
   105ec:	pop	{pc}		; (ldr pc, [sp], #4)

000105f0 <rb_strlcpy>:
   105f0:	strd	r4, [sp, #-24]!	; 0xffffffe8
   105f4:	strd	r6, [sp, #8]
   105f8:	str	r8, [sp, #16]
   105fc:	str	lr, [sp, #20]
   10600:	mov	r7, r0
   10604:	mov	r6, r1
   10608:	mov	r4, r2
   1060c:	mov	r0, r1
   10610:	bl	4798 <strlen@plt>
   10614:	mov	r5, r0
   10618:	cmp	r4, #0
   1061c:	beq	10644 <rb_strlcpy+0x54>
   10620:	cmp	r0, r4
   10624:	subcs	r4, r4, #1
   10628:	movcc	r4, r0
   1062c:	mov	r2, r4
   10630:	mov	r1, r6
   10634:	mov	r0, r7
   10638:	bl	47bc <memcpy@plt>
   1063c:	mov	r3, #0
   10640:	strb	r3, [r7, r4]
   10644:	mov	r0, r5
   10648:	ldrd	r4, [sp]
   1064c:	ldrd	r6, [sp, #8]
   10650:	ldr	r8, [sp, #16]
   10654:	add	sp, sp, #20
   10658:	pop	{pc}		; (ldr pc, [sp], #4)

0001065c <rb_strnlen>:
   1065c:	str	r4, [sp, #-8]!
   10660:	str	lr, [sp, #4]
   10664:	bl	49c0 <strnlen@plt>
   10668:	ldr	r4, [sp]
   1066c:	add	sp, sp, #4
   10670:	pop	{pc}		; (ldr pc, [sp], #4)

00010674 <rb_snprintf_append>:
   10674:	push	{r2, r3}
   10678:	strd	r4, [sp, #-16]!
   1067c:	str	r6, [sp, #8]
   10680:	str	lr, [sp, #12]
   10684:	sub	sp, sp, #8
   10688:	subs	r4, r1, #0
   1068c:	beq	106f0 <rb_snprintf_append+0x7c>
   10690:	mov	r5, r0
   10694:	bl	4798 <strlen@plt>
   10698:	mov	r6, r0
   1069c:	cmp	r4, r0
   106a0:	bge	106cc <rb_snprintf_append+0x58>
   106a4:	sub	r0, r4, #1
   106a8:	mov	r3, #0
   106ac:	strb	r3, [r5, r0]
   106b0:	add	sp, sp, #8
   106b4:	ldrd	r4, [sp]
   106b8:	ldr	r6, [sp, #8]
   106bc:	ldr	lr, [sp, #12]
   106c0:	add	sp, sp, #16
   106c4:	add	sp, sp, #8
   106c8:	bx	lr
   106cc:	add	r3, sp, #28
   106d0:	str	r3, [sp, #4]
   106d4:	ldr	r2, [sp, #24]
   106d8:	sub	r1, r4, r0
   106dc:	add	r0, r5, r0
   106e0:	bl	4510 <vsnprintf@plt>
   106e4:	cmp	r0, #0
   106e8:	addge	r0, r0, r6
   106ec:	b	106b0 <rb_snprintf_append+0x3c>
   106f0:	mvn	r0, #0
   106f4:	b	106b0 <rb_snprintf_append+0x3c>

000106f8 <rb_snprintf_try_append>:
   106f8:	push	{r2, r3}
   106fc:	strd	r4, [sp, #-16]!
   10700:	str	r6, [sp, #8]
   10704:	str	lr, [sp, #12]
   10708:	sub	sp, sp, #8
   1070c:	subs	r4, r1, #0
   10710:	beq	1078c <rb_snprintf_try_append+0x94>
   10714:	mov	r5, r0
   10718:	bl	4798 <strlen@plt>
   1071c:	mov	r6, r0
   10720:	cmp	r4, r0
   10724:	addlt	r4, r5, r4
   10728:	movlt	r3, #0
   1072c:	strblt	r3, [r4, #-1]
   10730:	mvnlt	r0, #0
   10734:	blt	10770 <rb_snprintf_try_append+0x78>
   10738:	add	r3, sp, #28
   1073c:	str	r3, [sp, #4]
   10740:	ldr	r2, [sp, #24]
   10744:	sub	r1, r4, r6
   10748:	add	r0, r5, r6
   1074c:	bl	4510 <vsnprintf@plt>
   10750:	cmp	r0, #0
   10754:	blt	10770 <rb_snprintf_try_append+0x78>
   10758:	add	r0, r0, r6
   1075c:	sub	r4, r4, #1
   10760:	cmp	r0, r4
   10764:	movgt	r3, #0
   10768:	strbgt	r3, [r5, r6]
   1076c:	mvngt	r0, #0
   10770:	add	sp, sp, #8
   10774:	ldrd	r4, [sp]
   10778:	ldr	r6, [sp, #8]
   1077c:	ldr	lr, [sp, #12]
   10780:	add	sp, sp, #16
   10784:	add	sp, sp, #8
   10788:	bx	lr
   1078c:	mvn	r0, #0
   10790:	b	10770 <rb_snprintf_try_append+0x78>

00010794 <rb_basename>:
   10794:	strd	r4, [sp, #-16]!
   10798:	str	r6, [sp, #8]
   1079c:	str	lr, [sp, #12]
   107a0:	mov	r4, r0
   107a4:	mov	r1, #47	; 0x2f
   107a8:	bl	4600 <strrchr@plt>
   107ac:	cmp	r0, #0
   107b0:	addne	r4, r0, #1
   107b4:	mov	r0, r4
   107b8:	bl	4798 <strlen@plt>
   107bc:	add	r0, r0, #1
   107c0:	bl	4954 <malloc@plt>
   107c4:	subs	r5, r0, #0
   107c8:	beq	107ec <rb_basename+0x58>
   107cc:	mov	r1, r4
   107d0:	mov	r0, r5
   107d4:	bl	4840 <strcpy@plt>
   107d8:	mov	r0, r5
   107dc:	ldrd	r4, [sp]
   107e0:	ldr	r6, [sp, #8]
   107e4:	add	sp, sp, #12
   107e8:	pop	{pc}		; (ldr pc, [sp], #4)
   107ec:	bl	4930 <rb_outofmemory@plt>

000107f0 <rb_dirname>:
   107f0:	strd	r4, [sp, #-16]!
   107f4:	str	r6, [sp, #8]
   107f8:	str	lr, [sp, #12]
   107fc:	mov	r5, r0
   10800:	mov	r1, #47	; 0x2f
   10804:	bl	4600 <strrchr@plt>
   10808:	cmp	r0, #0
   1080c:	beq	10884 <rb_dirname+0x94>
   10810:	cmp	r5, r0
   10814:	bcs	10848 <rb_dirname+0x58>
   10818:	ldrb	r3, [r0]
   1081c:	cmp	r3, #47	; 0x2f
   10820:	subeq	r3, r0, #1
   10824:	moveq	r1, r5
   10828:	bne	10848 <rb_dirname+0x58>
   1082c:	mov	r0, r3
   10830:	cmp	r3, r1
   10834:	beq	10848 <rb_dirname+0x58>
   10838:	sub	r3, r3, #1
   1083c:	ldrb	r2, [r0]
   10840:	cmp	r2, #47	; 0x2f
   10844:	beq	1082c <rb_dirname+0x3c>
   10848:	rsb	r4, r5, #2
   1084c:	add	r4, r0, r4
   10850:	mov	r0, r4
   10854:	bl	4954 <malloc@plt>
   10858:	subs	r6, r0, #0
   1085c:	beq	108a0 <rb_dirname+0xb0>
   10860:	mov	r2, r4
   10864:	mov	r1, r5
   10868:	mov	r0, r6
   1086c:	bl	4654 <rb_strlcpy@plt>
   10870:	mov	r0, r6
   10874:	ldrd	r4, [sp]
   10878:	ldr	r6, [sp, #8]
   1087c:	add	sp, sp, #12
   10880:	pop	{pc}		; (ldr pc, [sp], #4)
   10884:	mov	r0, #2
   10888:	bl	4954 <malloc@plt>
   1088c:	subs	r6, r0, #0
   10890:	movne	r3, #46	; 0x2e
   10894:	strhne	r3, [r6]
   10898:	bne	10870 <rb_dirname+0x80>
   1089c:	bl	4930 <rb_outofmemory@plt>
   108a0:	bl	4930 <rb_outofmemory@plt>

000108a4 <rb_fsnprint>:
   108a4:	strd	r4, [sp, #-32]!	; 0xffffffe0
   108a8:	strd	r6, [sp, #8]
   108ac:	strd	r8, [sp, #16]
   108b0:	str	sl, [sp, #24]
   108b4:	str	lr, [sp, #28]
   108b8:	subs	r5, r2, #0
   108bc:	beq	1099c <rb_fsnprint+0xf8>
   108c0:	mov	r8, r0
   108c4:	mov	r9, r1
   108c8:	mov	r4, r1
   108cc:	mov	r6, #0
   108d0:	mov	sl, r6
   108d4:	sub	r7, r1, #1
   108d8:	b	1092c <rb_fsnprint+0x88>
   108dc:	mov	r2, r4
   108e0:	add	r0, r8, r6
   108e4:	bl	4654 <rb_strlcpy@plt>
   108e8:	b	10978 <rb_fsnprint+0xd4>
   108ec:	ldr	r3, [r5, #8]
   108f0:	cmp	r3, #0
   108f4:	beq	1090c <rb_fsnprint+0x68>
   108f8:	ldr	r2, [r5, #12]
   108fc:	mov	r1, r4
   10900:	add	r0, r8, r6
   10904:	blx	r3
   10908:	b	10978 <rb_fsnprint+0xd4>
   1090c:	mov	r3, sl
   10910:	add	r6, r6, r3
   10914:	cmp	r7, r6
   10918:	bls	109a4 <rb_fsnprint+0x100>
   1091c:	sub	r4, r4, r3
   10920:	ldr	r5, [r5, #16]
   10924:	cmp	r5, #0
   10928:	beq	109a8 <rb_fsnprint+0x104>
   1092c:	ldr	r3, [r5]
   10930:	cmp	r3, #0
   10934:	beq	10944 <rb_fsnprint+0xa0>
   10938:	sub	r4, r9, r6
   1093c:	cmp	r4, r3
   10940:	movcs	r4, r3
   10944:	cmp	r4, #0
   10948:	beq	109a8 <rb_fsnprint+0x104>
   1094c:	ldr	r1, [r5, #4]
   10950:	cmp	r1, #0
   10954:	beq	108ec <rb_fsnprint+0x48>
   10958:	ldr	r3, [r5, #12]
   1095c:	cmp	r3, #0
   10960:	beq	108dc <rb_fsnprint+0x38>
   10964:	ldr	r3, [r3]
   10968:	mov	r2, r1
   1096c:	mov	r1, r4
   10970:	add	r0, r8, r6
   10974:	bl	4510 <vsnprintf@plt>
   10978:	cmp	r0, #0
   1097c:	blt	109ac <rb_fsnprint+0x108>
   10980:	mov	r3, r0
   10984:	sub	r2, r4, #1
   10988:	cmp	r2, r0
   1098c:	subcc	r6, r6, #1
   10990:	addcc	r6, r6, r4
   10994:	bcc	10914 <rb_fsnprint+0x70>
   10998:	b	10910 <rb_fsnprint+0x6c>
   1099c:	mov	r6, #0
   109a0:	b	109a8 <rb_fsnprint+0x104>
   109a4:	mov	r6, r7
   109a8:	mov	r0, r6
   109ac:	ldrd	r4, [sp]
   109b0:	ldrd	r6, [sp, #8]
   109b4:	ldrd	r8, [sp, #16]
   109b8:	ldr	sl, [sp, #24]
   109bc:	add	sp, sp, #28
   109c0:	pop	{pc}		; (ldr pc, [sp], #4)

000109c4 <rb_fsnprintf>:
   109c4:	push	{r3}		; (str r3, [sp, #-4]!)
   109c8:	push	{lr}		; (str lr, [sp, #-4]!)
   109cc:	sub	sp, sp, #24
   109d0:	mov	ip, #0
   109d4:	str	ip, [sp]
   109d8:	mov	r3, sp
   109dc:	str	ip, [r3, #8]
   109e0:	ldr	ip, [sp, #28]
   109e4:	str	ip, [sp, #4]
   109e8:	add	ip, sp, #20
   109ec:	str	ip, [sp, #12]
   109f0:	str	r2, [sp, #16]
   109f4:	add	r2, sp, #32
   109f8:	str	r2, [sp, #20]
   109fc:	mov	r2, r3
   10a00:	bl	4648 <rb_fsnprint@plt>
   10a04:	add	sp, sp, #24
   10a08:	pop	{lr}		; (ldr lr, [sp], #4)
   10a0c:	add	sp, sp, #4
   10a10:	bx	lr

00010a14 <rb_helper_child>:
   10a14:	strd	r4, [sp, #-36]!	; 0xffffffdc
   10a18:	strd	r6, [sp, #8]
   10a1c:	strd	r8, [sp, #16]
   10a20:	strd	sl, [sp, #24]
   10a24:	str	lr, [sp, #32]
   10a28:	sub	sp, sp, #28
   10a2c:	mov	sl, r0
   10a30:	mov	r9, r1
   10a34:	str	r2, [sp, #20]
   10a38:	mov	fp, r3
   10a3c:	ldr	r0, [pc, #500]	; 10c38 <rb_helper_child+0x224>
   10a40:	add	r0, pc, r0
   10a44:	bl	454c <getenv@plt>
   10a48:	mov	r6, r0
   10a4c:	ldr	r0, [pc, #488]	; 10c3c <rb_helper_child+0x228>
   10a50:	add	r0, pc, r0
   10a54:	bl	454c <getenv@plt>
   10a58:	mov	r5, r0
   10a5c:	ldr	r0, [pc, #476]	; 10c40 <rb_helper_child+0x22c>
   10a60:	add	r0, pc, r0
   10a64:	bl	454c <getenv@plt>
   10a68:	clz	r3, r5
   10a6c:	lsr	r3, r3, #5
   10a70:	cmp	r6, #0
   10a74:	moveq	r3, #1
   10a78:	cmp	r0, #0
   10a7c:	moveq	r3, #1
   10a80:	cmp	r3, #0
   10a84:	bne	10c30 <rb_helper_child+0x21c>
   10a88:	mov	r4, r0
   10a8c:	mov	r1, #84	; 0x54
   10a90:	mov	r0, #1
   10a94:	bl	45a0 <calloc@plt>
   10a98:	subs	r7, r0, #0
   10a9c:	beq	10ae8 <rb_helper_child+0xd4>
   10aa0:	mov	r2, #10
   10aa4:	mov	r1, #0
   10aa8:	mov	r0, r6
   10aac:	bl	4828 <strtol@plt>
   10ab0:	mov	r6, r0
   10ab4:	mov	r2, #10
   10ab8:	mov	r1, #0
   10abc:	mov	r0, r5
   10ac0:	bl	4828 <strtol@plt>
   10ac4:	mov	r5, r0
   10ac8:	mov	r2, #10
   10acc:	mov	r1, #0
   10ad0:	mov	r0, r4
   10ad4:	bl	4828 <strtol@plt>
   10ad8:	subs	r8, r0, #0
   10adc:	ble	10b10 <rb_helper_child+0xfc>
   10ae0:	mov	r4, #0
   10ae4:	b	10b00 <rb_helper_child+0xec>
   10ae8:	bl	4930 <rb_outofmemory@plt>
   10aec:	mov	r0, r4
   10af0:	bl	48e8 <close@plt>
   10af4:	add	r4, r4, #1
   10af8:	cmp	r8, r4
   10afc:	beq	10b10 <rb_helper_child+0xfc>
   10b00:	cmp	r4, r6
   10b04:	cmpne	r4, r5
   10b08:	beq	10af4 <rb_helper_child+0xe0>
   10b0c:	b	10aec <rb_helper_child+0xd8>
   10b10:	mov	r1, #2
   10b14:	ldr	r0, [pc, #296]	; 10c44 <rb_helper_child+0x230>
   10b18:	add	r0, pc, r0
   10b1c:	bl	4330 <open@plt>
   10b20:	mov	r4, r0
   10b24:	cmp	r6, #0
   10b28:	cmpne	r5, #0
   10b2c:	bne	10bf8 <rb_helper_child+0x1e4>
   10b30:	cmp	r6, #1
   10b34:	cmpne	r5, #1
   10b38:	bne	10c04 <rb_helper_child+0x1f0>
   10b3c:	cmp	r6, #2
   10b40:	cmpne	r5, #2
   10b44:	bne	10c14 <rb_helper_child+0x200>
   10b48:	cmp	r4, #2
   10b4c:	bgt	10c24 <rb_helper_child+0x210>
   10b50:	ldr	r3, [sp, #76]	; 0x4c
   10b54:	str	r3, [sp, #8]
   10b58:	ldr	r3, [sp, #72]	; 0x48
   10b5c:	str	r3, [sp, #4]
   10b60:	str	r8, [sp]
   10b64:	mov	r3, #0
   10b68:	ldr	r2, [sp, #64]	; 0x40
   10b6c:	mov	r1, fp
   10b70:	ldr	r0, [sp, #20]
   10b74:	bl	49e4 <rb_lib_init@plt>
   10b78:	ldr	r0, [sp, #68]	; 0x44
   10b7c:	bl	4af8 <rb_linebuf_init@plt>
   10b80:	add	r0, r7, #4
   10b84:	bl	4a98 <rb_linebuf_newbuf@plt>
   10b88:	add	r0, r7, #32
   10b8c:	bl	4a98 <rb_linebuf_newbuf@plt>
   10b90:	ldr	r2, [pc, #176]	; 10c48 <rb_helper_child+0x234>
   10b94:	add	r2, pc, r2
   10b98:	mov	r1, #8
   10b9c:	mov	r0, r6
   10ba0:	bl	4a2c <rb_open@plt>
   10ba4:	str	r0, [r7, #60]	; 0x3c
   10ba8:	ldr	r2, [pc, #156]	; 10c4c <rb_helper_child+0x238>
   10bac:	add	r2, pc, r2
   10bb0:	mov	r1, #8
   10bb4:	mov	r0, r5
   10bb8:	bl	4a2c <rb_open@plt>
   10bbc:	str	r0, [r7, #64]	; 0x40
   10bc0:	ldr	r0, [r7, #60]	; 0x3c
   10bc4:	bl	45d0 <rb_set_nb@plt>
   10bc8:	ldr	r0, [r7, #64]	; 0x40
   10bcc:	bl	45d0 <rb_set_nb@plt>
   10bd0:	str	sl, [r7, #76]	; 0x4c
   10bd4:	str	r9, [r7, #80]	; 0x50
   10bd8:	mov	r0, r7
   10bdc:	add	sp, sp, #28
   10be0:	ldrd	r4, [sp]
   10be4:	ldrd	r6, [sp, #8]
   10be8:	ldrd	r8, [sp, #16]
   10bec:	ldrd	sl, [sp, #24]
   10bf0:	add	sp, sp, #32
   10bf4:	pop	{pc}		; (ldr pc, [sp], #4)
   10bf8:	mov	r1, #0
   10bfc:	bl	4a68 <dup2@plt>
   10c00:	b	10b30 <rb_helper_child+0x11c>
   10c04:	mov	r1, #1
   10c08:	mov	r0, r4
   10c0c:	bl	4a68 <dup2@plt>
   10c10:	b	10b3c <rb_helper_child+0x128>
   10c14:	mov	r1, #2
   10c18:	mov	r0, r4
   10c1c:	bl	4a68 <dup2@plt>
   10c20:	b	10b48 <rb_helper_child+0x134>
   10c24:	mov	r0, r4
   10c28:	bl	48e8 <close@plt>
   10c2c:	b	10b50 <rb_helper_child+0x13c>
   10c30:	mov	r7, #0
   10c34:	b	10bd8 <rb_helper_child+0x1c4>
   10c38:	.word	0x00007274
   10c3c:	.word	0x00007268
   10c40:	.word	0x0000725c
   10c44:	.word	0x000071ac
   10c48:	.word	0x0000713c
   10c4c:	.word	0x00007138

00010c50 <rb_helper_start>:
   10c50:	strd	r4, [sp, #-32]!	; 0xffffffe0
   10c54:	strd	r6, [sp, #8]
   10c58:	strd	r8, [sp, #16]
   10c5c:	str	sl, [sp, #24]
   10c60:	str	lr, [sp, #28]
   10c64:	sub	sp, sp, #184	; 0xb8
   10c68:	mov	r6, r0
   10c6c:	mov	r7, r1
   10c70:	mov	r9, r2
   10c74:	mov	r8, r3
   10c78:	mov	r1, #1
   10c7c:	mov	r0, r7
   10c80:	bl	46f0 <access@plt>
   10c84:	cmn	r0, #1
   10c88:	beq	10ea8 <rb_helper_start+0x258>
   10c8c:	mov	r1, #84	; 0x54
   10c90:	mov	r0, #1
   10c94:	bl	45a0 <calloc@plt>
   10c98:	subs	r4, r0, #0
   10c9c:	beq	10e54 <rb_helper_start+0x204>
   10ca0:	mov	r3, r6
   10ca4:	ldr	r2, [pc, #516]	; 10eb0 <rb_helper_start+0x260>
   10ca8:	add	r2, pc, r2
   10cac:	mov	r1, #128	; 0x80
   10cb0:	add	r5, sp, #48	; 0x30
   10cb4:	mov	r0, r5
   10cb8:	bl	4b58 <snprintf@plt>
   10cbc:	mov	r2, r5
   10cc0:	add	r1, sp, #12
   10cc4:	add	r0, sp, #8
   10cc8:	bl	4918 <rb_pipe@plt>
   10ccc:	cmp	r0, #0
   10cd0:	blt	10e58 <rb_helper_start+0x208>
   10cd4:	mov	r3, r6
   10cd8:	ldr	r2, [pc, #468]	; 10eb4 <rb_helper_start+0x264>
   10cdc:	add	r2, pc, r2
   10ce0:	mov	r1, #128	; 0x80
   10ce4:	add	r5, sp, #48	; 0x30
   10ce8:	mov	r0, r5
   10cec:	bl	4b58 <snprintf@plt>
   10cf0:	mov	r2, r5
   10cf4:	add	r1, sp, #4
   10cf8:	mov	r0, sp
   10cfc:	bl	4918 <rb_pipe@plt>
   10d00:	cmp	r0, #0
   10d04:	blt	10e68 <rb_helper_start+0x218>
   10d08:	ldr	r0, [sp, #12]
   10d0c:	bl	4498 <rb_get_fd@plt>
   10d10:	ldr	sl, [pc, #416]	; 10eb8 <rb_helper_start+0x268>
   10d14:	add	sl, pc, sl
   10d18:	mov	r3, r0
   10d1c:	mov	r2, sl
   10d20:	mov	r1, #16
   10d24:	add	r5, sp, #32
   10d28:	mov	r0, r5
   10d2c:	bl	4b58 <snprintf@plt>
   10d30:	ldr	r0, [sp]
   10d34:	bl	4498 <rb_get_fd@plt>
   10d38:	mov	r3, r0
   10d3c:	mov	r2, sl
   10d40:	mov	r1, #16
   10d44:	add	sl, sp, r1
   10d48:	mov	r0, sl
   10d4c:	bl	4b58 <snprintf@plt>
   10d50:	ldr	r0, [sp, #8]
   10d54:	bl	45d0 <rb_set_nb@plt>
   10d58:	ldr	r0, [sp, #12]
   10d5c:	bl	45d0 <rb_set_nb@plt>
   10d60:	ldr	r0, [sp]
   10d64:	bl	45d0 <rb_set_nb@plt>
   10d68:	ldr	r0, [sp, #4]
   10d6c:	bl	45d0 <rb_set_nb@plt>
   10d70:	mov	r2, #1
   10d74:	mov	r1, sl
   10d78:	ldr	r0, [pc, #316]	; 10ebc <rb_helper_start+0x26c>
   10d7c:	add	r0, pc, r0
   10d80:	bl	4480 <rb_setenv@plt>
   10d84:	mov	r2, #1
   10d88:	mov	r1, r5
   10d8c:	ldr	r0, [pc, #300]	; 10ec0 <rb_helper_start+0x270>
   10d90:	add	r0, pc, r0
   10d94:	bl	4480 <rb_setenv@plt>
   10d98:	mov	r2, #1
   10d9c:	ldr	r1, [pc, #288]	; 10ec4 <rb_helper_start+0x274>
   10da0:	add	r1, pc, r1
   10da4:	ldr	r0, [pc, #284]	; 10ec8 <rb_helper_start+0x278>
   10da8:	add	r0, pc, r0
   10dac:	bl	4480 <rb_setenv@plt>
   10db0:	mov	r3, r6
   10db4:	ldr	r2, [pc, #272]	; 10ecc <rb_helper_start+0x27c>
   10db8:	add	r2, pc, r2
   10dbc:	mov	r1, #128	; 0x80
   10dc0:	add	r5, sp, #48	; 0x30
   10dc4:	mov	r0, r5
   10dc8:	bl	4b58 <snprintf@plt>
   10dcc:	str	r5, [sp, #176]	; 0xb0
   10dd0:	mov	r3, #0
   10dd4:	str	r3, [sp, #180]	; 0xb4
   10dd8:	add	r1, sp, #176	; 0xb0
   10ddc:	mov	r0, r7
   10de0:	bl	4b40 <rb_spawn_process@plt>
   10de4:	mov	r5, r0
   10de8:	cmn	r0, #1
   10dec:	beq	10e78 <rb_helper_start+0x228>
   10df0:	ldr	r0, [sp, #12]
   10df4:	bl	481c <rb_close@plt>
   10df8:	ldr	r0, [sp]
   10dfc:	bl	481c <rb_close@plt>
   10e00:	add	r0, r4, #4
   10e04:	bl	4a98 <rb_linebuf_newbuf@plt>
   10e08:	add	r0, r4, #32
   10e0c:	bl	4a98 <rb_linebuf_newbuf@plt>
   10e10:	ldr	r3, [sp, #8]
   10e14:	str	r3, [r4, #60]	; 0x3c
   10e18:	ldr	r3, [sp, #4]
   10e1c:	str	r3, [r4, #64]	; 0x40
   10e20:	str	r9, [r4, #76]	; 0x4c
   10e24:	str	r8, [r4, #80]	; 0x50
   10e28:	mov	r3, #0
   10e2c:	str	r3, [r4, #72]	; 0x48
   10e30:	str	r5, [r4, #68]	; 0x44
   10e34:	mov	r0, r4
   10e38:	add	sp, sp, #184	; 0xb8
   10e3c:	ldrd	r4, [sp]
   10e40:	ldrd	r6, [sp, #8]
   10e44:	ldrd	r8, [sp, #16]
   10e48:	ldr	sl, [sp, #24]
   10e4c:	add	sp, sp, #28
   10e50:	pop	{pc}		; (ldr pc, [sp], #4)
   10e54:	bl	4930 <rb_outofmemory@plt>
   10e58:	mov	r0, r4
   10e5c:	bl	46a8 <free@plt>
   10e60:	mov	r4, #0
   10e64:	b	10e34 <rb_helper_start+0x1e4>
   10e68:	mov	r0, r4
   10e6c:	bl	46a8 <free@plt>
   10e70:	mov	r4, #0
   10e74:	b	10e34 <rb_helper_start+0x1e4>
   10e78:	ldr	r0, [sp, #8]
   10e7c:	bl	481c <rb_close@plt>
   10e80:	ldr	r0, [sp, #12]
   10e84:	bl	481c <rb_close@plt>
   10e88:	ldr	r0, [sp]
   10e8c:	bl	481c <rb_close@plt>
   10e90:	ldr	r0, [sp, #4]
   10e94:	bl	481c <rb_close@plt>
   10e98:	mov	r0, r4
   10e9c:	bl	46a8 <free@plt>
   10ea0:	mov	r4, #0
   10ea4:	b	10e34 <rb_helper_start+0x1e4>
   10ea8:	mov	r4, #0
   10eac:	b	10e34 <rb_helper_start+0x1e4>
   10eb0:	.word	0x00007050
   10eb4:	.word	0x00007030
   10eb8:	.word	0x00006de4
   10ebc:	.word	0x00006f38
   10ec0:	.word	0x00006f28
   10ec4:	.word	0x00006f80
   10ec8:	.word	0x00006f14
   10ecc:	.word	0x00006f6c

00010ed0 <rb_helper_restart>:
   10ed0:	str	r4, [sp, #-8]!
   10ed4:	str	lr, [sp, #4]
   10ed8:	ldr	r3, [r0, #80]	; 0x50
   10edc:	blx	r3
   10ee0:	ldr	r4, [sp]
   10ee4:	add	sp, sp, #4
   10ee8:	pop	{pc}		; (ldr pc, [sp], #4)

00010eec <rb_helper_write_sendq>:
   10eec:	ldr	r3, [r1, #16]
   10ef0:	cmp	r3, #0
   10ef4:	bxle	lr
   10ef8:	strd	r4, [sp, #-16]!
   10efc:	str	r6, [sp, #8]
   10f00:	str	lr, [sp, #12]
   10f04:	mov	r6, r1
   10f08:	mov	r4, r0
   10f0c:	add	r5, r1, #4
   10f10:	mov	r1, r5
   10f14:	mov	r0, r4
   10f18:	bl	4780 <rb_linebuf_flush@plt>
   10f1c:	cmp	r0, #0
   10f20:	bgt	10f10 <rb_helper_write_sendq+0x24>
   10f24:	beq	10f70 <rb_helper_write_sendq+0x84>
   10f28:	bl	4c90 <__errno_location@plt>
   10f2c:	ldr	r0, [r0]
   10f30:	bl	4390 <rb_ignore_errno@plt>
   10f34:	cmp	r0, #0
   10f38:	beq	10f70 <rb_helper_write_sendq+0x84>
   10f3c:	ldr	r3, [r6, #16]
   10f40:	cmp	r3, #0
   10f44:	ble	10f60 <rb_helper_write_sendq+0x74>
   10f48:	mov	r3, r6
   10f4c:	ldr	r2, [pc, #40]	; 10f7c <rb_helper_write_sendq+0x90>
   10f50:	add	r2, pc, r2
   10f54:	mov	r1, #2
   10f58:	ldr	r0, [r6, #64]	; 0x40
   10f5c:	bl	445c <rb_setselect@plt>
   10f60:	ldrd	r4, [sp]
   10f64:	ldr	r6, [sp, #8]
   10f68:	add	sp, sp, #12
   10f6c:	pop	{pc}		; (ldr pc, [sp], #4)
   10f70:	mov	r0, r6
   10f74:	bl	4588 <rb_helper_restart@plt>
   10f78:	b	10f60 <rb_helper_write_sendq+0x74>
   10f7c:	.word	0xffffff94

00010f80 <rb_helper_read_cb>:
   10f80:	strd	r4, [sp, #-24]!	; 0xffffffe8
   10f84:	strd	r6, [sp, #8]
   10f88:	str	r8, [sp, #16]
   10f8c:	str	lr, [sp, #20]
   10f90:	subs	r4, r1, #0
   10f94:	beq	11014 <rb_helper_read_cb+0x94>
   10f98:	ldr	r6, [pc, #148]	; 11034 <rb_helper_read_cb+0xb4>
   10f9c:	add	r6, pc, r6
   10fa0:	mov	r5, #32768	; 0x8000
   10fa4:	ldr	r7, [pc, #140]	; 11038 <rb_helper_read_cb+0xb8>
   10fa8:	add	r7, pc, r7
   10fac:	mov	r2, r5
   10fb0:	mov	r1, r6
   10fb4:	ldr	r0, [r4, #60]	; 0x3c
   10fb8:	bl	4738 <rb_read@plt>
   10fbc:	subs	r2, r0, #0
   10fc0:	ble	10fe4 <rb_helper_read_cb+0x64>
   10fc4:	mov	r3, #0
   10fc8:	mov	r1, r7
   10fcc:	add	r0, r4, #32
   10fd0:	bl	4630 <rb_linebuf_parse@plt>
   10fd4:	ldr	r3, [r4, #76]	; 0x4c
   10fd8:	mov	r0, r4
   10fdc:	blx	r3
   10fe0:	b	10fac <rb_helper_read_cb+0x2c>
   10fe4:	beq	11028 <rb_helper_read_cb+0xa8>
   10fe8:	bl	4c90 <__errno_location@plt>
   10fec:	ldr	r0, [r0]
   10ff0:	bl	4390 <rb_ignore_errno@plt>
   10ff4:	cmp	r0, #0
   10ff8:	beq	11028 <rb_helper_read_cb+0xa8>
   10ffc:	mov	r3, r4
   11000:	ldr	r2, [pc, #52]	; 1103c <rb_helper_read_cb+0xbc>
   11004:	add	r2, pc, r2
   11008:	mov	r1, #1
   1100c:	ldr	r0, [r4, #60]	; 0x3c
   11010:	bl	445c <rb_setselect@plt>
   11014:	ldrd	r4, [sp]
   11018:	ldrd	r6, [sp, #8]
   1101c:	ldr	r8, [sp, #16]
   11020:	add	sp, sp, #20
   11024:	pop	{pc}		; (ldr pc, [sp], #4)
   11028:	mov	r0, r4
   1102c:	bl	4588 <rb_helper_restart@plt>
   11030:	b	11014 <rb_helper_read_cb+0x94>
   11034:	.word	0x0002d3d0
   11038:	.word	0x0002d3c4
   1103c:	.word	0xffffff74

00011040 <rb_helper_write_queue>:
   11040:	push	{r1, r2, r3}
   11044:	push	{lr}		; (str lr, [sp, #-4]!)
   11048:	sub	sp, sp, #24
   1104c:	mov	r3, #0
   11050:	str	r3, [sp]
   11054:	mov	r1, sp
   11058:	str	r3, [r1, #8]
   1105c:	str	r3, [r1, #16]
   11060:	ldr	r3, [sp, #28]
   11064:	str	r3, [sp, #4]
   11068:	add	r3, sp, #20
   1106c:	str	r3, [sp, #12]
   11070:	add	r3, sp, #32
   11074:	str	r3, [sp, #20]
   11078:	add	r0, r0, #4
   1107c:	bl	4b94 <rb_linebuf_put@plt>
   11080:	add	sp, sp, #24
   11084:	pop	{lr}		; (ldr lr, [sp], #4)
   11088:	add	sp, sp, #12
   1108c:	bx	lr

00011090 <rb_helper_write_flush>:
   11090:	str	r4, [sp, #-8]!
   11094:	str	lr, [sp, #4]
   11098:	mov	r1, r0
   1109c:	ldr	r0, [r0, #64]	; 0x40
   110a0:	bl	10eec <rb_helper_write_sendq>
   110a4:	ldr	r4, [sp]
   110a8:	add	sp, sp, #4
   110ac:	pop	{pc}		; (ldr pc, [sp], #4)

000110b0 <rb_helper_write>:
   110b0:	push	{r1, r2, r3}
   110b4:	str	r4, [sp, #-8]!
   110b8:	str	lr, [sp, #4]
   110bc:	sub	sp, sp, #28
   110c0:	mov	r4, r0
   110c4:	mov	r3, #0
   110c8:	str	r3, [sp]
   110cc:	mov	r1, sp
   110d0:	str	r3, [r1, #8]
   110d4:	str	r3, [r1, #16]
   110d8:	ldr	r3, [sp, #36]	; 0x24
   110dc:	str	r3, [sp, #4]
   110e0:	add	r3, sp, #20
   110e4:	str	r3, [sp, #12]
   110e8:	add	r3, sp, #40	; 0x28
   110ec:	str	r3, [sp, #20]
   110f0:	add	r0, r0, #4
   110f4:	bl	4b94 <rb_linebuf_put@plt>
   110f8:	mov	r0, r4
   110fc:	bl	11090 <rb_helper_write_flush>
   11100:	add	sp, sp, #28
   11104:	ldr	r4, [sp]
   11108:	ldr	lr, [sp, #4]
   1110c:	add	sp, sp, #8
   11110:	add	sp, sp, #12
   11114:	bx	lr

00011118 <rb_helper_run>:
   11118:	cmp	r0, #0
   1111c:	bxeq	lr
   11120:	str	r4, [sp, #-8]!
   11124:	str	lr, [sp, #4]
   11128:	mov	r1, r0
   1112c:	ldr	r0, [r0, #60]	; 0x3c
   11130:	bl	10f80 <rb_helper_read_cb>
   11134:	ldr	r4, [sp]
   11138:	add	sp, sp, #4
   1113c:	pop	{pc}		; (ldr pc, [sp], #4)

00011140 <rb_helper_close>:
   11140:	str	r4, [sp, #-8]!
   11144:	str	lr, [sp, #4]
   11148:	subs	r4, r0, #0
   1114c:	beq	11174 <rb_helper_close+0x34>
   11150:	mov	r1, #9
   11154:	ldr	r0, [r4, #68]	; 0x44
   11158:	bl	469c <rb_kill@plt>
   1115c:	ldr	r0, [r4, #60]	; 0x3c
   11160:	bl	481c <rb_close@plt>
   11164:	ldr	r0, [r4, #64]	; 0x40
   11168:	bl	481c <rb_close@plt>
   1116c:	mov	r0, r4
   11170:	bl	46a8 <free@plt>
   11174:	ldr	r4, [sp]
   11178:	add	sp, sp, #4
   1117c:	pop	{pc}		; (ldr pc, [sp], #4)

00011180 <rb_helper_read>:
   11180:	push	{lr}		; (str lr, [sp, #-4]!)
   11184:	sub	sp, sp, #12
   11188:	mov	r3, #0
   1118c:	str	r3, [sp]
   11190:	add	r0, r0, #32
   11194:	bl	4750 <rb_linebuf_get@plt>
   11198:	add	sp, sp, #12
   1119c:	pop	{pc}		; (ldr pc, [sp], #4)

000111a0 <rb_helper_loop>:
   111a0:	str	r4, [sp, #-8]!
   111a4:	str	lr, [sp, #4]
   111a8:	mov	r4, r1
   111ac:	bl	4318 <rb_helper_run@plt>
   111b0:	mov	r0, r4
   111b4:	bl	46fc <rb_lib_loop@plt>

000111b8 <rb_init_netio_devpoll>:
   111b8:	mov	r0, #38	; 0x26
   111bc:	bx	lr

000111c0 <rb_setselect_devpoll>:
   111c0:	str	r4, [sp, #-8]!
   111c4:	str	lr, [sp, #4]
   111c8:	bl	4c90 <__errno_location@plt>
   111cc:	mov	r3, #38	; 0x26
   111d0:	str	r3, [r0]
   111d4:	ldr	r4, [sp]
   111d8:	add	sp, sp, #4
   111dc:	pop	{pc}		; (ldr pc, [sp], #4)

000111e0 <rb_select_devpoll>:
   111e0:	str	r4, [sp, #-8]!
   111e4:	str	lr, [sp, #4]
   111e8:	bl	4c90 <__errno_location@plt>
   111ec:	mov	r3, #38	; 0x26
   111f0:	str	r3, [r0]
   111f4:	mvn	r0, #0
   111f8:	ldr	r4, [sp]
   111fc:	add	sp, sp, #4
   11200:	pop	{pc}		; (ldr pc, [sp], #4)

00011204 <rb_setup_fd_devpoll>:
   11204:	str	r4, [sp, #-8]!
   11208:	str	lr, [sp, #4]
   1120c:	bl	4c90 <__errno_location@plt>
   11210:	mov	r3, #38	; 0x26
   11214:	str	r3, [r0]
   11218:	mvn	r0, #0
   1121c:	ldr	r4, [sp]
   11220:	add	sp, sp, #4
   11224:	pop	{pc}		; (ldr pc, [sp], #4)

00011228 <rb_read_timerfd>:
   11228:	strd	r4, [sp, #-12]!
   1122c:	str	lr, [sp, #8]
   11230:	sub	sp, sp, #12
   11234:	mov	r4, r0
   11238:	subs	r5, r1, #0
   1123c:	beq	11288 <rb_read_timerfd+0x60>
   11240:	mov	r2, #8
   11244:	mov	r1, sp
   11248:	bl	4738 <rb_read@plt>
   1124c:	cmp	r0, #0
   11250:	beq	112a4 <rb_read_timerfd+0x7c>
   11254:	blt	11290 <rb_read_timerfd+0x68>
   11258:	mov	r3, r5
   1125c:	ldr	r2, [pc, #112]	; 112d4 <rb_read_timerfd+0xac>
   11260:	add	r2, pc, r2
   11264:	mov	r1, #1
   11268:	mov	r0, r4
   1126c:	bl	445c <rb_setselect@plt>
   11270:	mov	r0, r5
   11274:	bl	4858 <rb_run_one_event@plt>
   11278:	add	sp, sp, #12
   1127c:	ldrd	r4, [sp]
   11280:	add	sp, sp, #8
   11284:	pop	{pc}		; (ldr pc, [sp], #4)
   11288:	bl	481c <rb_close@plt>
   1128c:	b	11278 <rb_read_timerfd+0x50>
   11290:	bl	4c90 <__errno_location@plt>
   11294:	ldr	r0, [r0]
   11298:	bl	4390 <rb_ignore_errno@plt>
   1129c:	cmp	r0, #0
   112a0:	bne	11258 <rb_read_timerfd+0x30>
   112a4:	mov	r0, r4
   112a8:	bl	481c <rb_close@plt>
   112ac:	ldr	r4, [r5, #20]
   112b0:	bl	4c90 <__errno_location@plt>
   112b4:	ldr	r0, [r0]
   112b8:	bl	4354 <strerror@plt>
   112bc:	mov	r2, r0
   112c0:	mov	r1, r4
   112c4:	ldr	r0, [pc, #12]	; 112d8 <rb_read_timerfd+0xb0>
   112c8:	add	r0, pc, r0
   112cc:	bl	48c4 <rb_lib_log@plt>
   112d0:	b	11278 <rb_read_timerfd+0x50>
   112d4:	.word	0xffffffc0
   112d8:	.word	0x00006a6c

000112dc <rb_init_netio_epoll>:
   112dc:	str	r4, [sp, #-8]!
   112e0:	str	lr, [sp, #4]
   112e4:	ldr	r3, [pc, #156]	; 11388 <rb_init_netio_epoll+0xac>
   112e8:	add	r3, pc, r3
   112ec:	mov	r2, #0
   112f0:	str	r2, [r3]
   112f4:	str	r2, [r3, #4]
   112f8:	mov	r1, #12
   112fc:	mov	r0, #1
   11300:	bl	45a0 <calloc@plt>
   11304:	subs	r4, r0, #0
   11308:	beq	11378 <rb_init_netio_epoll+0x9c>
   1130c:	ldr	r3, [pc, #120]	; 1138c <rb_init_netio_epoll+0xb0>
   11310:	add	r3, pc, r3
   11314:	str	r4, [r3, #8]
   11318:	bl	436c <getdtablesize@plt>
   1131c:	str	r0, [r4, #8]
   11320:	bl	44a4 <epoll_create@plt>
   11324:	str	r0, [r4]
   11328:	cmp	r0, #0
   1132c:	blt	11380 <rb_init_netio_epoll+0xa4>
   11330:	ldr	r2, [pc, #88]	; 11390 <rb_init_netio_epoll+0xb4>
   11334:	add	r2, pc, r2
   11338:	mov	r1, #64	; 0x40
   1133c:	bl	4a2c <rb_open@plt>
   11340:	ldr	r3, [pc, #76]	; 11394 <rb_init_netio_epoll+0xb8>
   11344:	add	r3, pc, r3
   11348:	ldr	r4, [r3, #8]
   1134c:	ldr	r1, [r4, #8]
   11350:	lsl	r1, r1, #4
   11354:	mov	r0, #1
   11358:	bl	45a0 <calloc@plt>
   1135c:	cmp	r0, #0
   11360:	strne	r0, [r4, #4]
   11364:	movne	r0, #0
   11368:	beq	1137c <rb_init_netio_epoll+0xa0>
   1136c:	ldr	r4, [sp]
   11370:	add	sp, sp, #4
   11374:	pop	{pc}		; (ldr pc, [sp], #4)
   11378:	bl	4930 <rb_outofmemory@plt>
   1137c:	bl	4930 <rb_outofmemory@plt>
   11380:	mvn	r0, #0
   11384:	b	1136c <rb_init_netio_epoll+0x90>
   11388:	.word	0x00035088
   1138c:	.word	0x00035060
   11390:	.word	0x00006a34
   11394:	.word	0x0003502c

00011398 <rb_setup_fd_epoll>:
   11398:	mov	r0, #0
   1139c:	bx	lr

000113a0 <rb_setselect_epoll>:
   113a0:	push	{lr}		; (str lr, [sp, #-4]!)
   113a4:	sub	sp, sp, #20
   113a8:	ldr	ip, [r0, #20]
   113ac:	tst	r1, #1
   113b0:	beq	113cc <rb_setselect_epoll+0x2c>
   113b4:	cmp	r2, #0
   113b8:	orrne	lr, ip, #1
   113bc:	biceq	lr, ip, #1
   113c0:	str	lr, [r0, #20]
   113c4:	str	r2, [r0, #28]
   113c8:	str	r3, [r0, #32]
   113cc:	tst	r1, #2
   113d0:	beq	113f0 <rb_setselect_epoll+0x50>
   113d4:	cmp	r2, #0
   113d8:	ldr	r1, [r0, #20]
   113dc:	orrne	r1, r1, #4
   113e0:	biceq	r1, r1, #4
   113e4:	str	r1, [r0, #20]
   113e8:	str	r2, [r0, #36]	; 0x24
   113ec:	str	r3, [r0, #40]	; 0x28
   113f0:	cmp	ip, #0
   113f4:	bne	11474 <rb_setselect_epoll+0xd4>
   113f8:	ldr	r3, [r0, #20]
   113fc:	cmp	r3, #0
   11400:	beq	1143c <rb_setselect_epoll+0x9c>
   11404:	movgt	r1, #1
   11408:	ble	11480 <rb_setselect_epoll+0xe0>
   1140c:	str	r0, [sp, #8]
   11410:	orr	r3, r3, #-2147483648	; 0x80000000
   11414:	str	r3, [sp]
   11418:	ldr	r3, [pc, #112]	; 11490 <rb_setselect_epoll+0xf0>
   1141c:	add	r3, pc, r3
   11420:	ldr	ip, [r3, #8]
   11424:	mov	r3, sp
   11428:	ldr	r2, [r0, #12]
   1142c:	ldr	r0, [ip]
   11430:	bl	4c00 <epoll_ctl@plt>
   11434:	cmp	r0, #0
   11438:	bne	11454 <rb_setselect_epoll+0xb4>
   1143c:	add	sp, sp, #20
   11440:	pop	{pc}		; (ldr pc, [sp], #4)
   11444:	cmp	ip, r3
   11448:	movne	r1, #3
   1144c:	bne	1140c <rb_setselect_epoll+0x6c>
   11450:	b	1143c <rb_setselect_epoll+0x9c>
   11454:	bl	4c90 <__errno_location@plt>
   11458:	ldr	r0, [r0]
   1145c:	bl	4354 <strerror@plt>
   11460:	mov	r1, r0
   11464:	ldr	r0, [pc, #40]	; 11494 <rb_setselect_epoll+0xf4>
   11468:	add	r0, pc, r0
   1146c:	bl	48c4 <rb_lib_log@plt>
   11470:	bl	4378 <abort@plt>
   11474:	ldr	r3, [r0, #20]
   11478:	cmp	r3, #0
   1147c:	bgt	11444 <rb_setselect_epoll+0xa4>
   11480:	str	r3, [sp]
   11484:	str	r0, [sp, #8]
   11488:	mov	r1, #2
   1148c:	b	11418 <rb_setselect_epoll+0x78>
   11490:	.word	0x00034f54
   11494:	.word	0x00006918

00011498 <rb_select_epoll>:
   11498:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1149c:	strd	r6, [sp, #8]
   114a0:	strd	r8, [sp, #16]
   114a4:	strd	sl, [sp, #24]
   114a8:	str	lr, [sp, #32]
   114ac:	sub	sp, sp, #28
   114b0:	ldr	r3, [pc, #492]	; 116a4 <rb_select_epoll+0x20c>
   114b4:	add	r3, pc, r3
   114b8:	ldr	ip, [r3, #8]
   114bc:	mov	r3, r0
   114c0:	ldr	r2, [ip, #8]
   114c4:	ldr	r1, [ip, #4]
   114c8:	ldr	r0, [ip]
   114cc:	bl	4768 <epoll_wait@plt>
   114d0:	mov	r7, r0
   114d4:	bl	4c90 <__errno_location@plt>
   114d8:	mov	r5, r0
   114dc:	str	r0, [sp, #4]
   114e0:	ldr	r4, [r0]
   114e4:	bl	493c <rb_set_time@plt>
   114e8:	str	r4, [r5]
   114ec:	cmp	r7, #0
   114f0:	blt	1151c <rb_select_epoll+0x84>
   114f4:	cmp	r7, #0
   114f8:	beq	11558 <rb_select_epoll+0xc0>
   114fc:	mov	r5, #0
   11500:	ldr	r9, [pc, #416]	; 116a8 <rb_select_epoll+0x210>
   11504:	add	r9, pc, r9
   11508:	ldr	sl, [pc, #412]	; 116ac <rb_select_epoll+0x214>
   1150c:	add	sl, pc, sl
   11510:	ldr	fp, [pc, #408]	; 116b0 <rb_select_epoll+0x218>
   11514:	add	fp, pc, fp
   11518:	b	115d0 <rb_select_epoll+0x138>
   1151c:	mov	r0, r4
   11520:	bl	4390 <rb_ignore_errno@plt>
   11524:	cmp	r0, #0
   11528:	moveq	r7, #5
   1152c:	movne	r7, #0
   11530:	b	11558 <rb_select_epoll+0xc0>
   11534:	ldr	r3, [sp, #4]
   11538:	ldr	r0, [r3]
   1153c:	bl	4354 <strerror@plt>
   11540:	mov	r1, r0
   11544:	ldr	r0, [pc, #360]	; 116b4 <rb_select_epoll+0x21c>
   11548:	add	r0, pc, r0
   1154c:	bl	48c4 <rb_lib_log@plt>
   11550:	b	115c4 <rb_select_epoll+0x12c>
   11554:	mov	r7, #0
   11558:	mov	r0, r7
   1155c:	add	sp, sp, #28
   11560:	ldrd	r4, [sp]
   11564:	ldrd	r6, [sp, #8]
   11568:	ldrd	r8, [sp, #16]
   1156c:	ldrd	sl, [sp, #24]
   11570:	add	sp, sp, #32
   11574:	pop	{pc}		; (ldr pc, [sp], #4)
   11578:	ldr	r3, [r4, #28]
   1157c:	adds	r3, r3, #0
   11580:	movne	r3, #1
   11584:	cmp	r3, r8
   11588:	beq	115c4 <rb_select_epoll+0x12c>
   1158c:	cmp	r3, #0
   11590:	bne	1168c <rb_select_epoll+0x1f4>
   11594:	mov	r3, #0
   11598:	str	r3, [sp, #8]
   1159c:	str	r3, [r4, #20]
   115a0:	str	r4, [sp, #16]
   115a4:	mov	r1, #2
   115a8:	ldr	r0, [fp, #8]
   115ac:	add	r3, sp, #8
   115b0:	ldr	r2, [r4, #12]
   115b4:	ldr	r0, [r0]
   115b8:	bl	4c00 <epoll_ctl@plt>
   115bc:	cmp	r0, #0
   115c0:	bne	11534 <rb_select_epoll+0x9c>
   115c4:	add	r5, r5, #1
   115c8:	cmp	r7, r5
   115cc:	beq	11554 <rb_select_epoll+0xbc>
   115d0:	lsl	r6, r5, #4
   115d4:	ldr	r3, [r9, #8]
   115d8:	ldr	r3, [r3, #4]
   115dc:	add	r2, r3, r6
   115e0:	ldr	r4, [r2, #8]
   115e4:	ldr	r8, [r4, #20]
   115e8:	ldr	r3, [r3, r5, lsl #4]
   115ec:	tst	r3, #25
   115f0:	beq	11618 <rb_select_epoll+0x180>
   115f4:	ldr	r2, [r4, #28]
   115f8:	ldr	r1, [r4, #32]
   115fc:	mov	r3, #0
   11600:	str	r3, [r4, #28]
   11604:	str	r3, [r4, #32]
   11608:	cmp	r2, r3
   1160c:	beq	11618 <rb_select_epoll+0x180>
   11610:	mov	r0, r4
   11614:	blx	r2
   11618:	ldrb	r3, [r4, #16]
   1161c:	tst	r3, #1
   11620:	beq	115c4 <rb_select_epoll+0x12c>
   11624:	ldr	r3, [sl, #8]
   11628:	ldr	r3, [r3, #4]
   1162c:	ldr	r3, [r3, r6]
   11630:	tst	r3, #28
   11634:	beq	11668 <rb_select_epoll+0x1d0>
   11638:	ldr	r2, [r4, #36]	; 0x24
   1163c:	ldr	r1, [r4, #40]	; 0x28
   11640:	mov	r3, #0
   11644:	str	r3, [r4, #36]	; 0x24
   11648:	str	r3, [r4, #40]	; 0x28
   1164c:	cmp	r2, r3
   11650:	beq	11578 <rb_select_epoll+0xe0>
   11654:	mov	r0, r4
   11658:	blx	r2
   1165c:	ldrb	r3, [r4, #16]
   11660:	tst	r3, #1
   11664:	beq	115c4 <rb_select_epoll+0x12c>
   11668:	ldr	r3, [r4, #28]
   1166c:	adds	r3, r3, #0
   11670:	movne	r3, #1
   11674:	ldr	r2, [r4, #36]	; 0x24
   11678:	cmp	r2, #0
   1167c:	beq	11584 <rb_select_epoll+0xec>
   11680:	orr	r3, r3, #4
   11684:	cmp	r8, r3
   11688:	beq	115c4 <rb_select_epoll+0x12c>
   1168c:	str	r3, [r4, #20]
   11690:	str	r4, [sp, #16]
   11694:	orr	r3, r3, #-2147483648	; 0x80000000
   11698:	str	r3, [sp, #8]
   1169c:	mov	r1, #3
   116a0:	b	115a8 <rb_select_epoll+0x110>
   116a4:	.word	0x00034ebc
   116a8:	.word	0x00034e6c
   116ac:	.word	0x00034e64
   116b0:	.word	0x00034e5c
   116b4:	.word	0x00006864

000116b8 <rb_epoll_supports_event>:
   116b8:	strd	r4, [sp, #-12]!
   116bc:	str	lr, [sp, #8]
   116c0:	sub	sp, sp, #292	; 0x124
   116c4:	ldr	r3, [pc, #284]	; 117e8 <rb_epoll_supports_event+0x130>
   116c8:	add	r3, pc, r3
   116cc:	ldr	r4, [r3]
   116d0:	cmp	r4, #1
   116d4:	beq	11710 <rb_epoll_supports_event+0x58>
   116d8:	cmn	r4, #1
   116dc:	moveq	r4, #0
   116e0:	beq	11710 <rb_epoll_supports_event+0x58>
   116e4:	add	r2, sp, #128	; 0x80
   116e8:	ldr	r1, [pc, #252]	; 117ec <rb_epoll_supports_event+0x134>
   116ec:	add	r1, pc, r1
   116f0:	mov	r0, #3
   116f4:	bl	4444 <__xstat@plt>
   116f8:	subs	r4, r0, #0
   116fc:	bne	11724 <rb_epoll_supports_event+0x6c>
   11700:	ldr	r3, [pc, #232]	; 117f0 <rb_epoll_supports_event+0x138>
   11704:	add	r3, pc, r3
   11708:	mvn	r2, #0
   1170c:	str	r2, [r3]
   11710:	mov	r0, r4
   11714:	add	sp, sp, #292	; 0x124
   11718:	ldrd	r4, [sp]
   1171c:	add	sp, sp, #8
   11720:	pop	{pc}		; (ldr pc, [sp], #4)
   11724:	mov	r1, #0
   11728:	mov	r0, r1
   1172c:	bl	4b70 <timerfd_create@plt>
   11730:	cmp	r0, #0
   11734:	bge	11774 <rb_epoll_supports_event+0xbc>
   11738:	mov	r3, #26
   1173c:	str	r3, [sp, #224]	; 0xe0
   11740:	mov	r0, #0
   11744:	str	r0, [sp, #228]	; 0xe4
   11748:	add	r2, sp, #284	; 0x11c
   1174c:	add	r1, sp, #220	; 0xdc
   11750:	bl	44e0 <timer_create@plt>
   11754:	subs	r4, r0, #0
   11758:	beq	11790 <rb_epoll_supports_event+0xd8>
   1175c:	ldr	r3, [pc, #144]	; 117f4 <rb_epoll_supports_event+0x13c>
   11760:	add	r3, pc, r3
   11764:	mvn	r2, #0
   11768:	str	r2, [r3]
   1176c:	mov	r4, #0
   11770:	b	11710 <rb_epoll_supports_event+0x58>
   11774:	bl	48e8 <close@plt>
   11778:	ldr	r3, [pc, #120]	; 117f8 <rb_epoll_supports_event+0x140>
   1177c:	add	r3, pc, r3
   11780:	mov	r4, #1
   11784:	str	r4, [r3]
   11788:	str	r4, [r3, #4]
   1178c:	b	11710 <rb_epoll_supports_event+0x58>
   11790:	ldr	r0, [sp, #284]	; 0x11c
   11794:	bl	4a20 <timer_delete@plt>
   11798:	mov	r5, sp
   1179c:	mov	r0, r5
   117a0:	bl	4348 <sigemptyset@plt>
   117a4:	mov	r2, #0
   117a8:	mov	r1, r5
   117ac:	mvn	r0, #0
   117b0:	bl	43f0 <signalfd@plt>
   117b4:	cmp	r0, #0
   117b8:	blt	117d4 <rb_epoll_supports_event+0x11c>
   117bc:	bl	48e8 <close@plt>
   117c0:	mov	r4, #1
   117c4:	ldr	r3, [pc, #48]	; 117fc <rb_epoll_supports_event+0x144>
   117c8:	add	r3, pc, r3
   117cc:	str	r4, [r3]
   117d0:	b	11710 <rb_epoll_supports_event+0x58>
   117d4:	ldr	r3, [pc, #36]	; 11800 <rb_epoll_supports_event+0x148>
   117d8:	add	r3, pc, r3
   117dc:	mvn	r2, #0
   117e0:	str	r2, [r3]
   117e4:	b	11710 <rb_epoll_supports_event+0x58>
   117e8:	.word	0x00034ca8
   117ec:	.word	0x000066e8
   117f0:	.word	0x00034c6c
   117f4:	.word	0x00034c10
   117f8:	.word	0x00034bf4
   117fc:	.word	0x00034ba8
   11800:	.word	0x00034b98

00011804 <rb_epoll_init_event>:
   11804:	str	r4, [sp, #-8]!
   11808:	str	lr, [sp, #4]
   1180c:	sub	sp, sp, #128	; 0x80
   11810:	bl	116b8 <rb_epoll_supports_event>
   11814:	ldr	r3, [pc, #180]	; 118d0 <rb_epoll_init_event+0xcc>
   11818:	add	r3, pc, r3
   1181c:	ldr	r3, [r3, #4]
   11820:	cmp	r3, #0
   11824:	beq	11838 <rb_epoll_init_event+0x34>
   11828:	add	sp, sp, #128	; 0x80
   1182c:	ldr	r4, [sp]
   11830:	add	sp, sp, #4
   11834:	pop	{pc}		; (ldr pc, [sp], #4)
   11838:	mov	r4, sp
   1183c:	mov	r0, r4
   11840:	bl	4348 <sigemptyset@plt>
   11844:	bl	4438 <__libc_current_sigrtmin@plt>
   11848:	mov	r1, r0
   1184c:	mov	r0, r4
   11850:	bl	4834 <sigaddset@plt>
   11854:	mov	r2, #0
   11858:	mov	r1, r4
   1185c:	mov	r0, r2
   11860:	bl	4960 <sigprocmask@plt>
   11864:	mov	r0, r4
   11868:	bl	4348 <sigemptyset@plt>
   1186c:	bl	4438 <__libc_current_sigrtmin@plt>
   11870:	mov	r1, r0
   11874:	mov	r0, r4
   11878:	bl	4834 <sigaddset@plt>
   1187c:	mov	r2, #0
   11880:	mov	r1, r4
   11884:	mvn	r0, #0
   11888:	bl	43f0 <signalfd@plt>
   1188c:	cmn	r0, #1
   11890:	beq	118bc <rb_epoll_init_event+0xb8>
   11894:	ldr	r2, [pc, #56]	; 118d4 <rb_epoll_init_event+0xd0>
   11898:	add	r2, pc, r2
   1189c:	mov	r1, #64	; 0x40
   118a0:	bl	4a2c <rb_open@plt>
   118a4:	mov	r4, r0
   118a8:	bl	45d0 <rb_set_nb@plt>
   118ac:	mov	r1, #0
   118b0:	mov	r0, r4
   118b4:	bl	118dc <signalfd_handler>
   118b8:	b	11828 <rb_epoll_init_event+0x24>
   118bc:	ldr	r3, [pc, #20]	; 118d8 <rb_epoll_init_event+0xd4>
   118c0:	add	r3, pc, r3
   118c4:	mvn	r2, #0
   118c8:	str	r2, [r3]
   118cc:	b	11828 <rb_epoll_init_event+0x24>
   118d0:	.word	0x00034b58
   118d4:	.word	0x00006554
   118d8:	.word	0x00034ab0

000118dc <signalfd_handler>:
   118dc:	strd	r4, [sp, #-32]!	; 0xffffffe0
   118e0:	strd	r6, [sp, #8]
   118e4:	strd	r8, [sp, #16]
   118e8:	str	sl, [sp, #24]
   118ec:	str	lr, [sp, #28]
   118f0:	mov	r8, r0
   118f4:	ldr	r1, [pc, #248]	; 119f4 <signalfd_handler+0x118>
   118f8:	add	r1, pc, r1
   118fc:	add	r9, r1, #16
   11900:	add	r3, r1, #2064	; 0x810
   11904:	add	r1, r1, #2192	; 0x890
   11908:	mov	r2, r9
   1190c:	mov	r0, #128	; 0x80
   11910:	str	r2, [r3]
   11914:	str	r0, [r3, #4]
   11918:	add	r2, r2, #128	; 0x80
   1191c:	add	r3, r3, #8
   11920:	cmp	r3, r1
   11924:	bne	11910 <signalfd_handler+0x34>
   11928:	ldr	r7, [pc, #200]	; 119f8 <signalfd_handler+0x11c>
   1192c:	add	r7, pc, r7
   11930:	add	r7, r7, #2064	; 0x810
   11934:	mov	sl, #16
   11938:	mov	r0, r8
   1193c:	bl	4498 <rb_get_fd@plt>
   11940:	mov	r2, sl
   11944:	mov	r1, r7
   11948:	bl	4c18 <readv@plt>
   1194c:	cmp	r0, #0
   11950:	beq	119ac <signalfd_handler+0xd0>
   11954:	blt	1197c <signalfd_handler+0xa0>
   11958:	add	r6, r0, #127	; 0x7f
   1195c:	cmp	r0, #0
   11960:	movge	r6, r0
   11964:	asr	r6, r6, #7
   11968:	cmp	r0, #127	; 0x7f
   1196c:	movgt	r5, r9
   11970:	movgt	r4, #0
   11974:	bgt	119e0 <signalfd_handler+0x104>
   11978:	b	11938 <signalfd_handler+0x5c>
   1197c:	bl	4c90 <__errno_location@plt>
   11980:	ldr	r0, [r0]
   11984:	bl	4390 <rb_ignore_errno@plt>
   11988:	cmp	r0, #0
   1198c:	beq	119ac <signalfd_handler+0xd0>
   11990:	mov	r3, #0
   11994:	ldr	r2, [pc, #96]	; 119fc <signalfd_handler+0x120>
   11998:	add	r2, pc, r2
   1199c:	mov	r1, #1
   119a0:	mov	r0, r8
   119a4:	bl	445c <rb_setselect@plt>
   119a8:	b	119b8 <signalfd_handler+0xdc>
   119ac:	mov	r0, r8
   119b0:	bl	481c <rb_close@plt>
   119b4:	bl	11804 <rb_epoll_init_event>
   119b8:	ldrd	r4, [sp]
   119bc:	ldrd	r6, [sp, #8]
   119c0:	ldrd	r8, [sp, #16]
   119c4:	ldr	sl, [sp, #24]
   119c8:	add	sp, sp, #28
   119cc:	pop	{pc}		; (ldr pc, [sp], #4)
   119d0:	add	r4, r4, #1
   119d4:	add	r5, r5, #128	; 0x80
   119d8:	cmp	r4, r6
   119dc:	bge	11938 <signalfd_handler+0x5c>
   119e0:	ldr	r0, [r5, #48]	; 0x30
   119e4:	cmp	r0, #0
   119e8:	beq	119d0 <signalfd_handler+0xf4>
   119ec:	bl	4858 <rb_run_one_event@plt>
   119f0:	b	119d0 <signalfd_handler+0xf4>
   119f4:	.word	0x00034a78
   119f8:	.word	0x00034a44
   119fc:	.word	0xffffff3c

00011a00 <rb_epoll_sched_event>:
   11a00:	strd	r4, [sp, #-20]!	; 0xffffffec
   11a04:	strd	r6, [sp, #8]
   11a08:	str	lr, [sp, #16]
   11a0c:	sub	sp, sp, #84	; 0x54
   11a10:	mov	r5, r0
   11a14:	mov	r7, r1
   11a18:	ldr	r3, [pc, #512]	; 11c20 <rb_epoll_sched_event+0x220>
   11a1c:	add	r3, pc, r3
   11a20:	ldr	r4, [r3, #4]
   11a24:	cmp	r4, #0
   11a28:	bne	11ad8 <rb_epoll_sched_event+0xd8>
   11a2c:	mov	r2, #64	; 0x40
   11a30:	mov	r1, #0
   11a34:	add	r0, sp, #16
   11a38:	bl	45dc <memset@plt>
   11a3c:	mov	r1, #4
   11a40:	mov	r0, #1
   11a44:	bl	45a0 <calloc@plt>
   11a48:	subs	r6, r0, #0
   11a4c:	beq	11bdc <rb_epoll_sched_event+0x1dc>
   11a50:	str	r6, [r5, #40]	; 0x28
   11a54:	bl	4438 <__libc_current_sigrtmin@plt>
   11a58:	str	r0, [sp, #20]
   11a5c:	str	r5, [sp, #16]
   11a60:	mov	r2, r6
   11a64:	add	r1, sp, #16
   11a68:	mov	r0, #0
   11a6c:	bl	44e0 <timer_create@plt>
   11a70:	cmp	r0, #0
   11a74:	blt	11be0 <rb_epoll_sched_event+0x1e0>
   11a78:	mov	r2, #0
   11a7c:	mov	r3, #0
   11a80:	strd	r2, [sp]
   11a84:	mov	r1, sp
   11a88:	strd	r2, [r1, #8]
   11a8c:	str	r7, [sp, #8]
   11a90:	ldr	r3, [r5, #24]
   11a94:	cmp	r3, #0
   11a98:	ldrdne	r2, [sp, #8]
   11a9c:	strdne	r2, [sp]
   11aa0:	mov	r3, #0
   11aa4:	mov	r2, sp
   11aa8:	mov	r1, r3
   11aac:	ldr	r0, [r6]
   11ab0:	bl	4708 <timer_settime@plt>
   11ab4:	cmp	r0, #0
   11ab8:	movge	r4, #1
   11abc:	blt	11c00 <rb_epoll_sched_event+0x200>
   11ac0:	mov	r0, r4
   11ac4:	add	sp, sp, #84	; 0x54
   11ac8:	ldrd	r4, [sp]
   11acc:	ldrd	r6, [sp, #8]
   11ad0:	add	sp, sp, #16
   11ad4:	pop	{pc}		; (ldr pc, [sp], #4)
   11ad8:	mov	r1, #0
   11adc:	mov	r0, r1
   11ae0:	bl	4b70 <timerfd_create@plt>
   11ae4:	subs	r6, r0, #0
   11ae8:	blt	11b8c <rb_epoll_sched_event+0x18c>
   11aec:	mov	r2, #0
   11af0:	mov	r3, #0
   11af4:	strd	r2, [sp, #16]
   11af8:	strd	r2, [sp, #24]
   11afc:	str	r7, [sp, #24]
   11b00:	ldr	r3, [r5, #24]
   11b04:	cmp	r3, #0
   11b08:	ldrdne	r2, [sp, #24]
   11b0c:	strdne	r2, [sp, #16]
   11b10:	mov	r3, #0
   11b14:	add	r2, sp, #16
   11b18:	mov	r1, r3
   11b1c:	mov	r0, r6
   11b20:	bl	4bf4 <timerfd_settime@plt>
   11b24:	cmp	r0, #0
   11b28:	blt	11bb0 <rb_epoll_sched_event+0x1b0>
   11b2c:	ldr	r4, [pc, #240]	; 11c24 <rb_epoll_sched_event+0x224>
   11b30:	add	r4, pc, r4
   11b34:	add	r4, r4, #2192	; 0x890
   11b38:	ldr	r3, [r5, #20]
   11b3c:	ldr	r2, [pc, #228]	; 11c28 <rb_epoll_sched_event+0x228>
   11b40:	add	r2, pc, r2
   11b44:	mov	r1, #136	; 0x88
   11b48:	mov	r0, r4
   11b4c:	bl	4b58 <snprintf@plt>
   11b50:	mov	r2, r4
   11b54:	mov	r1, #64	; 0x40
   11b58:	mov	r0, r6
   11b5c:	bl	4a2c <rb_open@plt>
   11b60:	mov	r4, r0
   11b64:	bl	45d0 <rb_set_nb@plt>
   11b68:	str	r4, [r5, #40]	; 0x28
   11b6c:	mov	r3, r5
   11b70:	ldr	r2, [pc, #180]	; 11c2c <rb_epoll_sched_event+0x22c>
   11b74:	add	r2, pc, r2
   11b78:	mov	r1, #1
   11b7c:	mov	r0, r4
   11b80:	bl	445c <rb_setselect@plt>
   11b84:	mov	r4, #1
   11b88:	b	11ac0 <rb_epoll_sched_event+0xc0>
   11b8c:	bl	4c90 <__errno_location@plt>
   11b90:	ldr	r0, [r0]
   11b94:	bl	4354 <strerror@plt>
   11b98:	mov	r1, r0
   11b9c:	ldr	r0, [pc, #140]	; 11c30 <rb_epoll_sched_event+0x230>
   11ba0:	add	r0, pc, r0
   11ba4:	bl	48c4 <rb_lib_log@plt>
   11ba8:	mov	r4, #0
   11bac:	b	11ac0 <rb_epoll_sched_event+0xc0>
   11bb0:	bl	4c90 <__errno_location@plt>
   11bb4:	ldr	r0, [r0]
   11bb8:	bl	4354 <strerror@plt>
   11bbc:	mov	r1, r0
   11bc0:	ldr	r0, [pc, #108]	; 11c34 <rb_epoll_sched_event+0x234>
   11bc4:	add	r0, pc, r0
   11bc8:	bl	48c4 <rb_lib_log@plt>
   11bcc:	mov	r0, r6
   11bd0:	bl	48e8 <close@plt>
   11bd4:	mov	r4, #0
   11bd8:	b	11ac0 <rb_epoll_sched_event+0xc0>
   11bdc:	bl	4930 <rb_outofmemory@plt>
   11be0:	bl	4c90 <__errno_location@plt>
   11be4:	ldr	r0, [r0]
   11be8:	bl	4354 <strerror@plt>
   11bec:	mov	r1, r0
   11bf0:	ldr	r0, [pc, #64]	; 11c38 <rb_epoll_sched_event+0x238>
   11bf4:	add	r0, pc, r0
   11bf8:	bl	48c4 <rb_lib_log@plt>
   11bfc:	b	11ac0 <rb_epoll_sched_event+0xc0>
   11c00:	bl	4c90 <__errno_location@plt>
   11c04:	ldr	r0, [r0]
   11c08:	bl	4354 <strerror@plt>
   11c0c:	mov	r1, r0
   11c10:	ldr	r0, [pc, #36]	; 11c3c <rb_epoll_sched_event+0x23c>
   11c14:	add	r0, pc, r0
   11c18:	bl	48c4 <rb_lib_log@plt>
   11c1c:	b	11ac0 <rb_epoll_sched_event+0xc0>
   11c20:	.word	0x00034954
   11c24:	.word	0x00034840
   11c28:	.word	0x000062e4
   11c2c:	.word	0xfffff6ac
   11c30:	.word	0x00006258
   11c34:	.word	0x00006248
   11c38:	.word	0x0000623c
   11c3c:	.word	0x00006230

00011c40 <rb_epoll_unsched_event>:
   11c40:	str	r4, [sp, #-8]!
   11c44:	str	lr, [sp, #4]
   11c48:	mov	r4, r0
   11c4c:	ldr	r3, [pc, #80]	; 11ca4 <rb_epoll_unsched_event+0x64>
   11c50:	add	r3, pc, r3
   11c54:	ldr	r3, [r3, #4]
   11c58:	cmp	r3, #0
   11c5c:	bne	11c90 <rb_epoll_unsched_event+0x50>
   11c60:	ldr	r3, [r0, #40]	; 0x28
   11c64:	ldr	r0, [r3]
   11c68:	bl	4a20 <timer_delete@plt>
   11c6c:	ldr	r0, [r4, #40]	; 0x28
   11c70:	cmp	r0, #0
   11c74:	beq	11c7c <rb_epoll_unsched_event+0x3c>
   11c78:	bl	46a8 <free@plt>
   11c7c:	mov	r3, #0
   11c80:	str	r3, [r4, #40]	; 0x28
   11c84:	ldr	r4, [sp]
   11c88:	add	sp, sp, #4
   11c8c:	pop	{pc}		; (ldr pc, [sp], #4)
   11c90:	ldr	r0, [r0, #40]	; 0x28
   11c94:	bl	481c <rb_close@plt>
   11c98:	mov	r3, #0
   11c9c:	str	r3, [r4, #40]	; 0x28
   11ca0:	b	11c84 <rb_epoll_unsched_event+0x44>
   11ca4:	.word	0x00034720

00011ca8 <rb_setup_fd_poll>:
   11ca8:	mov	r0, #0
   11cac:	bx	lr

00011cb0 <rb_init_netio_poll>:
   11cb0:	strd	r4, [sp, #-16]!
   11cb4:	str	r6, [sp, #8]
   11cb8:	str	lr, [sp, #12]
   11cbc:	bl	4420 <rb_getmaxconnect@plt>
   11cc0:	lsl	r1, r0, #3
   11cc4:	mov	r0, #1
   11cc8:	bl	45a0 <calloc@plt>
   11ccc:	cmp	r0, #0
   11cd0:	beq	11d14 <rb_init_netio_poll+0x64>
   11cd4:	ldr	r4, [pc, #92]	; 11d38 <rb_init_netio_poll+0x88>
   11cd8:	add	r4, pc, r4
   11cdc:	str	r0, [r4]
   11ce0:	bl	4420 <rb_getmaxconnect@plt>
   11ce4:	str	r0, [r4, #8]
   11ce8:	mov	r4, #0
   11cec:	ldr	r6, [pc, #72]	; 11d3c <rb_init_netio_poll+0x8c>
   11cf0:	add	r6, pc, r6
   11cf4:	mvn	r5, #0
   11cf8:	bl	4420 <rb_getmaxconnect@plt>
   11cfc:	cmp	r0, r4
   11d00:	ble	11d18 <rb_init_netio_poll+0x68>
   11d04:	ldr	r3, [r6]
   11d08:	str	r5, [r3, r4, lsl #3]
   11d0c:	add	r4, r4, #1
   11d10:	b	11cf8 <rb_init_netio_poll+0x48>
   11d14:	bl	4930 <rb_outofmemory@plt>
   11d18:	mov	r0, #0
   11d1c:	ldr	r3, [pc, #28]	; 11d40 <rb_init_netio_poll+0x90>
   11d20:	add	r3, pc, r3
   11d24:	str	r0, [r3, #4]
   11d28:	ldrd	r4, [sp]
   11d2c:	ldr	r6, [sp, #8]
   11d30:	add	sp, sp, #12
   11d34:	pop	{pc}		; (ldr pc, [sp], #4)
   11d38:	.word	0x00034fb0
   11d3c:	.word	0x00034f98
   11d40:	.word	0x00034f68

00011d44 <rb_setselect_poll>:
   11d44:	strd	r4, [sp, #-16]!
   11d48:	str	r6, [sp, #8]
   11d4c:	str	lr, [sp, #12]
   11d50:	subs	r4, r0, #0
   11d54:	beq	11df4 <rb_setselect_poll+0xb0>
   11d58:	tst	r1, #1
   11d5c:	beq	11e34 <rb_setselect_poll+0xf0>
   11d60:	str	r2, [r4, #28]
   11d64:	str	r3, [r4, #32]
   11d68:	cmp	r2, #0
   11d6c:	beq	11e04 <rb_setselect_poll+0xc0>
   11d70:	ldr	ip, [r4, #20]
   11d74:	orr	ip, ip, #64	; 0x40
   11d78:	str	ip, [r4, #20]
   11d7c:	tst	r1, #2
   11d80:	beq	11d98 <rb_setselect_poll+0x54>
   11d84:	str	r2, [r4, #36]	; 0x24
   11d88:	str	r3, [r4, #40]	; 0x28
   11d8c:	ldr	r3, [r4, #20]
   11d90:	orr	r3, r3, #256	; 0x100
   11d94:	str	r3, [r4, #20]
   11d98:	ldr	r3, [pc, #428]	; 11f4c <rb_setselect_poll+0x208>
   11d9c:	add	r3, pc, r3
   11da0:	ldr	r3, [r3, #8]
   11da4:	ldr	r2, [r4, #12]
   11da8:	cmp	r2, r3
   11dac:	bge	11e50 <rb_setselect_poll+0x10c>
   11db0:	ldr	r3, [r4, #20]
   11db4:	cmp	r3, #0
   11db8:	ble	11ec4 <rb_setselect_poll+0x180>
   11dbc:	ldr	r1, [pc, #396]	; 11f50 <rb_setselect_poll+0x20c>
   11dc0:	add	r1, pc, r1
   11dc4:	ldr	r0, [r1]
   11dc8:	ldr	r2, [r4, #12]
   11dcc:	add	r2, r0, r2, lsl #3
   11dd0:	strh	r3, [r2, #4]
   11dd4:	ldr	r3, [r4, #12]
   11dd8:	str	r3, [r0, r3, lsl #3]
   11ddc:	ldr	r2, [r1, #4]
   11de0:	cmp	r3, r2
   11de4:	ble	11df4 <rb_setselect_poll+0xb0>
   11de8:	ldr	r2, [pc, #356]	; 11f54 <rb_setselect_poll+0x210>
   11dec:	add	r2, pc, r2
   11df0:	str	r3, [r2, #4]
   11df4:	ldrd	r4, [sp]
   11df8:	ldr	r6, [sp, #8]
   11dfc:	add	sp, sp, #12
   11e00:	pop	{pc}		; (ldr pc, [sp], #4)
   11e04:	ldr	r2, [r4, #20]
   11e08:	bic	r2, r2, #64	; 0x40
   11e0c:	str	r2, [r4, #20]
   11e10:	tst	r1, #2
   11e14:	beq	11d98 <rb_setselect_poll+0x54>
   11e18:	mov	r2, #0
   11e1c:	str	r2, [r4, #36]	; 0x24
   11e20:	str	r3, [r4, #40]	; 0x28
   11e24:	ldr	r3, [r4, #20]
   11e28:	bic	r3, r3, #256	; 0x100
   11e2c:	str	r3, [r4, #20]
   11e30:	b	11d98 <rb_setselect_poll+0x54>
   11e34:	tst	r1, #2
   11e38:	beq	11d98 <rb_setselect_poll+0x54>
   11e3c:	str	r2, [r4, #36]	; 0x24
   11e40:	str	r3, [r4, #40]	; 0x28
   11e44:	cmp	r2, #0
   11e48:	bne	11d8c <rb_setselect_poll+0x48>
   11e4c:	b	11e24 <rb_setselect_poll+0xe0>
   11e50:	add	r3, r3, #1024	; 0x400
   11e54:	ldr	r2, [pc, #252]	; 11f58 <rb_setselect_poll+0x214>
   11e58:	add	r2, pc, r2
   11e5c:	str	r3, [r2, #8]
   11e60:	lsl	r5, r3, #3
   11e64:	mov	r1, r5
   11e68:	ldr	r0, [r2]
   11e6c:	bl	4be8 <realloc@plt>
   11e70:	subs	r6, r0, #0
   11e74:	beq	11ec0 <rb_setselect_poll+0x17c>
   11e78:	ldr	r3, [pc, #220]	; 11f5c <rb_setselect_poll+0x218>
   11e7c:	add	r3, pc, r3
   11e80:	str	r6, [r3]
   11e84:	sub	r0, r5, #8128	; 0x1fc0
   11e88:	sub	r0, r0, #56	; 0x38
   11e8c:	mov	r2, #8192	; 0x2000
   11e90:	mov	r1, #0
   11e94:	add	r0, r6, r0
   11e98:	bl	45dc <memset@plt>
   11e9c:	sub	r3, r5, #8192	; 0x2000
   11ea0:	add	r3, r6, r3
   11ea4:	sub	r5, r5, #8
   11ea8:	add	r5, r6, r5
   11eac:	mvn	r2, #0
   11eb0:	str	r2, [r3, #8]!
   11eb4:	cmp	r3, r5
   11eb8:	bne	11eb0 <rb_setselect_poll+0x16c>
   11ebc:	b	11db0 <rb_setselect_poll+0x6c>
   11ec0:	bl	4930 <rb_outofmemory@plt>
   11ec4:	ldr	r1, [pc, #148]	; 11f60 <rb_setselect_poll+0x21c>
   11ec8:	add	r1, pc, r1
   11ecc:	ldr	r2, [r1]
   11ed0:	ldr	r3, [r4, #12]
   11ed4:	add	r3, r2, r3, lsl #3
   11ed8:	mov	r0, #0
   11edc:	strh	r0, [r3, #4]
   11ee0:	ldr	r3, [r4, #12]
   11ee4:	mvn	r0, #0
   11ee8:	str	r0, [r2, r3, lsl #3]
   11eec:	ldr	r3, [r1, #4]
   11ef0:	ldr	r1, [r4, #12]
   11ef4:	cmp	r1, r3
   11ef8:	bne	11df4 <rb_setselect_poll+0xb0>
   11efc:	cmp	r3, #0
   11f00:	blt	11df4 <rb_setselect_poll+0xb0>
   11f04:	ldr	r1, [r2, r3, lsl #3]
   11f08:	cmp	r1, r0
   11f0c:	bne	11df4 <rb_setselect_poll+0xb0>
   11f10:	sub	r3, r3, #1
   11f14:	cmn	r3, #1
   11f18:	beq	11f38 <rb_setselect_poll+0x1f4>
   11f1c:	ldr	r1, [r2, r3, lsl #3]
   11f20:	cmn	r1, #1
   11f24:	beq	11f10 <rb_setselect_poll+0x1cc>
   11f28:	ldr	r2, [pc, #52]	; 11f64 <rb_setselect_poll+0x220>
   11f2c:	add	r2, pc, r2
   11f30:	str	r3, [r2, #4]
   11f34:	b	11df4 <rb_setselect_poll+0xb0>
   11f38:	ldr	r3, [pc, #40]	; 11f68 <rb_setselect_poll+0x224>
   11f3c:	add	r3, pc, r3
   11f40:	mvn	r2, #0
   11f44:	str	r2, [r3, #4]
   11f48:	b	11df4 <rb_setselect_poll+0xb0>
   11f4c:	.word	0x00034eec
   11f50:	.word	0x00034ec8
   11f54:	.word	0x00034e9c
   11f58:	.word	0x00034e30
   11f5c:	.word	0x00034e0c
   11f60:	.word	0x00034dc0
   11f64:	.word	0x00034d5c
   11f68:	.word	0x00034d4c

00011f6c <rb_select_poll>:
   11f6c:	strd	r4, [sp, #-32]!	; 0xffffffe0
   11f70:	strd	r6, [sp, #8]
   11f74:	strd	r8, [sp, #16]
   11f78:	str	sl, [sp, #24]
   11f7c:	str	lr, [sp, #28]
   11f80:	ldr	r9, [pc, #512]	; 12188 <rb_select_poll+0x21c>
   11f84:	add	r9, pc, r9
   11f88:	ldr	r3, [pc, #508]	; 1218c <rb_select_poll+0x220>
   11f8c:	add	r3, pc, r3
   11f90:	ldr	r1, [r3, #4]
   11f94:	mov	r2, r0
   11f98:	add	r1, r1, #1
   11f9c:	ldr	r0, [r3]
   11fa0:	bl	49a8 <poll@plt>
   11fa4:	mov	r4, r0
   11fa8:	bl	493c <rb_set_time@plt>
   11fac:	cmp	r4, #0
   11fb0:	blt	11fec <rb_select_poll+0x80>
   11fb4:	cmp	r4, #0
   11fb8:	beq	12110 <rb_select_poll+0x1a4>
   11fbc:	ldr	r3, [pc, #460]	; 12190 <rb_select_poll+0x224>
   11fc0:	add	r3, pc, r3
   11fc4:	ldr	r3, [r3, #4]
   11fc8:	cmp	r3, #0
   11fcc:	blt	1212c <rb_select_poll+0x1c0>
   11fd0:	mov	r5, #0
   11fd4:	ldr	r8, [pc, #440]	; 12194 <rb_select_poll+0x228>
   11fd8:	add	r8, pc, r8
   11fdc:	mov	sl, r5
   11fe0:	ldr	r7, [pc, #432]	; 12198 <rb_select_poll+0x22c>
   11fe4:	add	r7, pc, r7
   11fe8:	b	12050 <rb_select_poll+0xe4>
   11fec:	bl	4c90 <__errno_location@plt>
   11ff0:	ldr	r0, [r0]
   11ff4:	bl	4390 <rb_ignore_errno@plt>
   11ff8:	subs	r4, r0, #0
   11ffc:	movne	r4, #5
   12000:	b	12110 <rb_select_poll+0x1a4>
   12004:	ldr	r3, [r4, #28]
   12008:	ldr	r1, [r4, #32]
   1200c:	str	sl, [r4, #28]
   12010:	str	sl, [r4, #32]
   12014:	cmp	r3, #0
   12018:	beq	12158 <rb_select_poll+0x1ec>
   1201c:	mov	r0, r4
   12020:	blx	r3
   12024:	b	120d4 <rb_select_poll+0x168>
   12028:	ldr	r3, [r4, #28]
   1202c:	cmp	r3, #0
   12030:	beq	12164 <rb_select_poll+0x1f8>
   12034:	ldr	r3, [r4, #36]	; 0x24
   12038:	cmp	r3, #0
   1203c:	beq	12140 <rb_select_poll+0x1d4>
   12040:	add	r5, r5, #1
   12044:	ldr	r3, [r7, #4]
   12048:	cmp	r3, r5
   1204c:	blt	1210c <rb_select_poll+0x1a0>
   12050:	ldr	r3, [r8]
   12054:	add	r2, r3, r5, lsl #3
   12058:	ldrsh	r6, [r2, #6]
   1205c:	ldr	r2, [r3, r5, lsl #3]
   12060:	cmp	r6, #0
   12064:	lsrne	r3, r2, #31
   12068:	moveq	r3, #1
   1206c:	cmp	r3, #0
   12070:	bne	12040 <rb_select_poll+0xd4>
   12074:	asr	r3, r2, #24
   12078:	eor	r3, r3, r2, asr #12
   1207c:	eor	r3, r3, r2
   12080:	ubfx	r3, r3, #0, #12
   12084:	ldr	r1, [pc, #272]	; 1219c <rb_select_poll+0x230>
   12088:	ldr	r1, [r9, r1]
   1208c:	ldr	r1, [r1]
   12090:	add	r3, r3, r3, lsl #1
   12094:	ldr	r3, [r1, r3, lsl #2]
   12098:	cmp	r3, #0
   1209c:	beq	12040 <rb_select_poll+0xd4>
   120a0:	ldr	r4, [r3]
   120a4:	ldr	r1, [r4, #12]
   120a8:	cmp	r2, r1
   120ac:	beq	120cc <rb_select_poll+0x160>
   120b0:	ldr	r3, [r3, #8]
   120b4:	cmp	r3, #0
   120b8:	beq	12040 <rb_select_poll+0xd4>
   120bc:	ldr	r4, [r3]
   120c0:	ldr	r1, [r4, #12]
   120c4:	cmp	r2, r1
   120c8:	bne	120b0 <rb_select_poll+0x144>
   120cc:	tst	r6, #89	; 0x59
   120d0:	bne	12004 <rb_select_poll+0x98>
   120d4:	ldrb	r3, [r4, #16]
   120d8:	tst	r3, #1
   120dc:	beq	12028 <rb_select_poll+0xbc>
   120e0:	tst	r6, #284	; 0x11c
   120e4:	beq	12028 <rb_select_poll+0xbc>
   120e8:	ldr	r3, [r4, #36]	; 0x24
   120ec:	ldr	r1, [r4, #40]	; 0x28
   120f0:	str	sl, [r4, #36]	; 0x24
   120f4:	str	sl, [r4, #40]	; 0x28
   120f8:	cmp	r3, #0
   120fc:	beq	12134 <rb_select_poll+0x1c8>
   12100:	mov	r0, r4
   12104:	blx	r3
   12108:	b	12028 <rb_select_poll+0xbc>
   1210c:	mov	r4, #0
   12110:	mov	r0, r4
   12114:	ldrd	r4, [sp]
   12118:	ldrd	r6, [sp, #8]
   1211c:	ldrd	r8, [sp, #16]
   12120:	ldr	sl, [sp, #24]
   12124:	add	sp, sp, #28
   12128:	pop	{pc}		; (ldr pc, [sp], #4)
   1212c:	mov	r4, #0
   12130:	b	12110 <rb_select_poll+0x1a4>
   12134:	ldr	r3, [r4, #28]
   12138:	cmp	r3, #0
   1213c:	beq	12164 <rb_select_poll+0x1f8>
   12140:	mov	r3, sl
   12144:	mov	r2, sl
   12148:	mov	r1, #2
   1214c:	mov	r0, r4
   12150:	bl	11d44 <rb_setselect_poll>
   12154:	b	12040 <rb_select_poll+0xd4>
   12158:	ldrb	r3, [r4, #16]
   1215c:	tst	r3, #1
   12160:	bne	1217c <rb_select_poll+0x210>
   12164:	mov	r3, sl
   12168:	mov	r2, sl
   1216c:	mov	r1, #1
   12170:	mov	r0, r4
   12174:	bl	11d44 <rb_setselect_poll>
   12178:	b	12034 <rb_select_poll+0xc8>
   1217c:	tst	r6, #284	; 0x11c
   12180:	bne	120e8 <rb_select_poll+0x17c>
   12184:	b	12164 <rb_select_poll+0x1f8>
   12188:	.word	0x00017074
   1218c:	.word	0x00034cfc
   12190:	.word	0x00034cc8
   12194:	.word	0x00034cb0
   12198:	.word	0x00034ca4
   1219c:	.word	0x000003b8

000121a0 <rb_ports_supports_event>:
   121a0:	str	r4, [sp, #-8]!
   121a4:	str	lr, [sp, #4]
   121a8:	bl	4c90 <__errno_location@plt>
   121ac:	mov	r3, #38	; 0x26
   121b0:	str	r3, [r0]
   121b4:	mov	r0, #0
   121b8:	ldr	r4, [sp]
   121bc:	add	sp, sp, #4
   121c0:	pop	{pc}		; (ldr pc, [sp], #4)

000121c4 <rb_ports_init_event>:
   121c4:	bx	lr

000121c8 <rb_ports_sched_event>:
   121c8:	str	r4, [sp, #-8]!
   121cc:	str	lr, [sp, #4]
   121d0:	bl	4c90 <__errno_location@plt>
   121d4:	mov	r3, #38	; 0x26
   121d8:	str	r3, [r0]
   121dc:	mvn	r0, #0
   121e0:	ldr	r4, [sp]
   121e4:	add	sp, sp, #4
   121e8:	pop	{pc}		; (ldr pc, [sp], #4)

000121ec <rb_ports_unsched_event>:
   121ec:	bx	lr

000121f0 <rb_init_netio_ports>:
   121f0:	mov	r0, #38	; 0x26
   121f4:	bx	lr

000121f8 <rb_setselect_ports>:
   121f8:	str	r4, [sp, #-8]!
   121fc:	str	lr, [sp, #4]
   12200:	bl	4c90 <__errno_location@plt>
   12204:	mov	r3, #38	; 0x26
   12208:	str	r3, [r0]
   1220c:	ldr	r4, [sp]
   12210:	add	sp, sp, #4
   12214:	pop	{pc}		; (ldr pc, [sp], #4)

00012218 <rb_select_ports>:
   12218:	str	r4, [sp, #-8]!
   1221c:	str	lr, [sp, #4]
   12220:	bl	4c90 <__errno_location@plt>
   12224:	mov	r3, #38	; 0x26
   12228:	str	r3, [r0]
   1222c:	mvn	r0, #0
   12230:	ldr	r4, [sp]
   12234:	add	sp, sp, #4
   12238:	pop	{pc}		; (ldr pc, [sp], #4)

0001223c <rb_setup_fd_ports>:
   1223c:	str	r4, [sp, #-8]!
   12240:	str	lr, [sp, #4]
   12244:	bl	4c90 <__errno_location@plt>
   12248:	mov	r3, #38	; 0x26
   1224c:	str	r3, [r0]
   12250:	mvn	r0, #0
   12254:	ldr	r4, [sp]
   12258:	add	sp, sp, #4
   1225c:	pop	{pc}		; (ldr pc, [sp], #4)

00012260 <rb_init_netio_sigio>:
   12260:	strd	r4, [sp, #-16]!
   12264:	str	r6, [sp, #8]
   12268:	str	lr, [sp, #12]
   1226c:	ldr	r5, [pc, #212]	; 12348 <rb_init_netio_sigio+0xe8>
   12270:	add	r5, pc, r5
   12274:	bl	4420 <rb_getmaxconnect@plt>
   12278:	lsl	r1, r0, #3
   1227c:	mov	r0, #1
   12280:	bl	45a0 <calloc@plt>
   12284:	cmp	r0, #0
   12288:	beq	122cc <rb_init_netio_sigio+0x6c>
   1228c:	ldr	r3, [pc, #184]	; 1234c <rb_init_netio_sigio+0xec>
   12290:	ldr	r4, [r5, r3]
   12294:	str	r0, [r4]
   12298:	bl	4420 <rb_getmaxconnect@plt>
   1229c:	str	r0, [r4, #8]
   122a0:	mov	r4, #0
   122a4:	mvn	r6, #0
   122a8:	bl	4420 <rb_getmaxconnect@plt>
   122ac:	cmp	r0, r4
   122b0:	ble	122d0 <rb_init_netio_sigio+0x70>
   122b4:	ldr	r3, [pc, #144]	; 1234c <rb_init_netio_sigio+0xec>
   122b8:	ldr	r3, [r5, r3]
   122bc:	ldr	r3, [r3]
   122c0:	str	r6, [r3, r4, lsl #3]
   122c4:	add	r4, r4, #1
   122c8:	b	122a8 <rb_init_netio_sigio+0x48>
   122cc:	bl	4930 <rb_outofmemory@plt>
   122d0:	ldr	r3, [pc, #116]	; 1234c <rb_init_netio_sigio+0xec>
   122d4:	ldr	r3, [r5, r3]
   122d8:	mov	r5, #0
   122dc:	str	r5, [r3, #4]
   122e0:	ldr	r4, [pc, #104]	; 12350 <rb_init_netio_sigio+0xf0>
   122e4:	add	r4, pc, r4
   122e8:	mov	r3, #1
   122ec:	str	r3, [r4], #4
   122f0:	mov	r0, r4
   122f4:	bl	4348 <sigemptyset@plt>
   122f8:	bl	4438 <__libc_current_sigrtmin@plt>
   122fc:	mov	r1, r0
   12300:	mov	r0, r4
   12304:	bl	4834 <sigaddset@plt>
   12308:	mov	r1, #29
   1230c:	mov	r0, r4
   12310:	bl	4834 <sigaddset@plt>
   12314:	bl	4438 <__libc_current_sigrtmin@plt>
   12318:	add	r1, r0, #1
   1231c:	mov	r0, r4
   12320:	bl	4834 <sigaddset@plt>
   12324:	mov	r2, r5
   12328:	mov	r1, r4
   1232c:	mov	r0, r5
   12330:	bl	4960 <sigprocmask@plt>
   12334:	mov	r0, r5
   12338:	ldrd	r4, [sp]
   1233c:	ldr	r6, [sp, #8]
   12340:	add	sp, sp, #12
   12344:	pop	{pc}		; (ldr pc, [sp], #4)
   12348:	.word	0x00016d88
   1234c:	.word	0x000003c8
   12350:	.word	0x000349b0

00012354 <rb_setup_fd_sigio>:
   12354:	strd	r4, [sp, #-16]!
   12358:	str	r6, [sp, #8]
   1235c:	str	lr, [sp, #12]
   12360:	ldr	r5, [r0, #12]
   12364:	mov	r2, #0
   12368:	mov	r1, #3
   1236c:	mov	r0, r5
   12370:	bl	4bac <fcntl@plt>
   12374:	cmn	r0, #1
   12378:	moveq	r0, #0
   1237c:	beq	123e4 <rb_setup_fd_sigio+0x90>
   12380:	mov	r4, r0
   12384:	tst	r0, #8192	; 0x2000
   12388:	bne	123f4 <rb_setup_fd_sigio+0xa0>
   1238c:	orr	r2, r4, #10240	; 0x2800
   12390:	mov	r1, #4
   12394:	mov	r0, r5
   12398:	bl	4bac <fcntl@plt>
   1239c:	cmn	r0, #1
   123a0:	moveq	r0, #0
   123a4:	beq	123e4 <rb_setup_fd_sigio+0x90>
   123a8:	bl	4438 <__libc_current_sigrtmin@plt>
   123ac:	mov	r2, r0
   123b0:	mov	r1, #10
   123b4:	mov	r0, r5
   123b8:	bl	4bac <fcntl@plt>
   123bc:	cmn	r0, #1
   123c0:	moveq	r0, #0
   123c4:	beq	123e4 <rb_setup_fd_sigio+0x90>
   123c8:	bl	4a74 <getpid@plt>
   123cc:	mov	r2, r0
   123d0:	mov	r1, #8
   123d4:	mov	r0, r5
   123d8:	bl	4bac <fcntl@plt>
   123dc:	adds	r0, r0, #1
   123e0:	movne	r0, #1
   123e4:	ldrd	r4, [sp]
   123e8:	ldr	r6, [sp, #8]
   123ec:	add	sp, sp, #12
   123f0:	pop	{pc}		; (ldr pc, [sp], #4)
   123f4:	bic	r4, r0, #8192	; 0x2000
   123f8:	mov	r2, r4
   123fc:	mov	r1, #4
   12400:	mov	r0, r5
   12404:	bl	4bac <fcntl@plt>
   12408:	b	1238c <rb_setup_fd_sigio+0x38>

0001240c <rb_setselect_sigio>:
   1240c:	strd	r4, [sp, #-24]!	; 0xffffffe8
   12410:	strd	r6, [sp, #8]
   12414:	str	r8, [sp, #16]
   12418:	str	lr, [sp, #20]
   1241c:	ldr	r6, [pc, #524]	; 12630 <rb_setselect_sigio+0x224>
   12420:	add	r6, pc, r6
   12424:	subs	r4, r0, #0
   12428:	beq	12514 <rb_setselect_sigio+0x108>
   1242c:	tst	r1, #1
   12430:	beq	12494 <rb_setselect_sigio+0x88>
   12434:	str	r2, [r4, #28]
   12438:	str	r3, [r4, #32]
   1243c:	cmp	r2, #0
   12440:	beq	12464 <rb_setselect_sigio+0x58>
   12444:	ldr	ip, [r4, #20]
   12448:	orr	ip, ip, #64	; 0x40
   1244c:	str	ip, [r4, #20]
   12450:	tst	r1, #2
   12454:	beq	124b8 <rb_setselect_sigio+0xac>
   12458:	str	r2, [r4, #36]	; 0x24
   1245c:	str	r3, [r4, #40]	; 0x28
   12460:	b	124ac <rb_setselect_sigio+0xa0>
   12464:	ldr	r2, [r4, #20]
   12468:	bic	r2, r2, #64	; 0x40
   1246c:	str	r2, [r4, #20]
   12470:	tst	r1, #2
   12474:	beq	124b8 <rb_setselect_sigio+0xac>
   12478:	mov	r2, #0
   1247c:	str	r2, [r4, #36]	; 0x24
   12480:	str	r3, [r4, #40]	; 0x28
   12484:	ldr	r3, [r4, #20]
   12488:	bic	r3, r3, #256	; 0x100
   1248c:	str	r3, [r4, #20]
   12490:	b	124b8 <rb_setselect_sigio+0xac>
   12494:	tst	r1, #2
   12498:	beq	124b8 <rb_setselect_sigio+0xac>
   1249c:	str	r2, [r4, #36]	; 0x24
   124a0:	str	r3, [r4, #40]	; 0x28
   124a4:	cmp	r2, #0
   124a8:	beq	12484 <rb_setselect_sigio+0x78>
   124ac:	ldr	r3, [r4, #20]
   124b0:	orr	r3, r3, #256	; 0x100
   124b4:	str	r3, [r4, #20]
   124b8:	ldr	r3, [pc, #372]	; 12634 <rb_setselect_sigio+0x228>
   124bc:	ldr	r3, [r6, r3]
   124c0:	ldr	r5, [r3, #8]
   124c4:	ldr	r3, [r4, #12]
   124c8:	cmp	r3, r5
   124cc:	bge	12528 <rb_setselect_sigio+0x11c>
   124d0:	ldr	r3, [r4, #20]
   124d4:	cmp	r3, #0
   124d8:	ble	125b0 <rb_setselect_sigio+0x1a4>
   124dc:	ldr	r2, [pc, #336]	; 12634 <rb_setselect_sigio+0x228>
   124e0:	ldr	r1, [r6, r2]
   124e4:	ldr	r0, [r1]
   124e8:	ldr	r2, [r4, #12]
   124ec:	add	r2, r0, r2, lsl #3
   124f0:	strh	r3, [r2, #4]
   124f4:	ldr	r3, [r4, #12]
   124f8:	str	r3, [r0, r3, lsl #3]
   124fc:	ldr	r2, [r1, #4]
   12500:	cmp	r3, r2
   12504:	ble	12514 <rb_setselect_sigio+0x108>
   12508:	ldr	r2, [pc, #292]	; 12634 <rb_setselect_sigio+0x228>
   1250c:	ldr	r2, [r6, r2]
   12510:	str	r3, [r2, #4]
   12514:	ldrd	r4, [sp]
   12518:	ldrd	r6, [sp, #8]
   1251c:	ldr	r8, [sp, #16]
   12520:	add	sp, sp, #20
   12524:	pop	{pc}		; (ldr pc, [sp], #4)
   12528:	add	r3, r5, #1024	; 0x400
   1252c:	ldr	r2, [pc, #256]	; 12634 <rb_setselect_sigio+0x228>
   12530:	ldr	r2, [r6, r2]
   12534:	str	r3, [r2, #8]
   12538:	lsl	r7, r3, #3
   1253c:	mov	r1, r7
   12540:	ldr	r0, [r2]
   12544:	bl	4be8 <realloc@plt>
   12548:	cmp	r0, #0
   1254c:	beq	125ac <rb_setselect_sigio+0x1a0>
   12550:	ldr	r3, [pc, #220]	; 12634 <rb_setselect_sigio+0x228>
   12554:	ldr	r8, [r6, r3]
   12558:	str	r0, [r8]
   1255c:	sub	r7, r7, #8128	; 0x1fc0
   12560:	sub	r7, r7, #56	; 0x38
   12564:	mov	r2, #8192	; 0x2000
   12568:	mov	r1, #0
   1256c:	add	r0, r0, r7
   12570:	bl	45dc <memset@plt>
   12574:	add	r3, r5, #1
   12578:	ldr	r2, [r8, #8]
   1257c:	cmp	r3, r2
   12580:	bge	124d0 <rb_setselect_sigio+0xc4>
   12584:	ldr	r2, [pc, #168]	; 12634 <rb_setselect_sigio+0x228>
   12588:	ldr	r2, [r6, r2]
   1258c:	mvn	r0, #0
   12590:	ldr	r1, [r2]
   12594:	str	r0, [r1, r3, lsl #3]
   12598:	add	r3, r3, #1
   1259c:	ldr	r1, [r2, #8]
   125a0:	cmp	r3, r1
   125a4:	blt	12590 <rb_setselect_sigio+0x184>
   125a8:	b	124d0 <rb_setselect_sigio+0xc4>
   125ac:	bl	4930 <rb_outofmemory@plt>
   125b0:	ldr	r3, [pc, #124]	; 12634 <rb_setselect_sigio+0x228>
   125b4:	ldr	r2, [r6, r3]
   125b8:	ldr	r1, [r2]
   125bc:	ldr	r3, [r4, #12]
   125c0:	add	r3, r1, r3, lsl #3
   125c4:	mov	r0, #0
   125c8:	strh	r0, [r3, #4]
   125cc:	ldr	r3, [r4, #12]
   125d0:	mvn	r0, #0
   125d4:	str	r0, [r1, r3, lsl #3]
   125d8:	ldr	r3, [r2, #4]
   125dc:	ldr	r2, [r4, #12]
   125e0:	cmp	r2, r3
   125e4:	bne	12514 <rb_setselect_sigio+0x108>
   125e8:	cmp	r3, #0
   125ec:	blt	12514 <rb_setselect_sigio+0x108>
   125f0:	ldr	r2, [pc, #60]	; 12634 <rb_setselect_sigio+0x228>
   125f4:	ldr	r2, [r6, r2]
   125f8:	ldr	r1, [r2]
   125fc:	ldr	r2, [r1, r3, lsl #3]
   12600:	cmp	r2, r0
   12604:	bne	12514 <rb_setselect_sigio+0x108>
   12608:	ldr	r2, [pc, #36]	; 12634 <rb_setselect_sigio+0x228>
   1260c:	ldr	r0, [r6, r2]
   12610:	sub	r3, r3, #1
   12614:	str	r3, [r0, #4]
   12618:	cmn	r3, #1
   1261c:	beq	12514 <rb_setselect_sigio+0x108>
   12620:	ldr	r2, [r1, r3, lsl #3]
   12624:	cmn	r2, #1
   12628:	beq	12610 <rb_setselect_sigio+0x204>
   1262c:	b	12514 <rb_setselect_sigio+0x108>
   12630:	.word	0x00016bd8
   12634:	.word	0x000003c8

00012638 <rb_sigio_supports_event>:
   12638:	ldr	r3, [pc, #128]	; 126c0 <rb_sigio_supports_event+0x88>
   1263c:	add	r3, pc, r3
   12640:	ldr	r0, [r3, #132]	; 0x84
   12644:	cmp	r0, #1
   12648:	bxeq	lr
   1264c:	cmn	r0, #1
   12650:	beq	126b8 <rb_sigio_supports_event+0x80>
   12654:	push	{lr}		; (str lr, [sp, #-4]!)
   12658:	sub	sp, sp, #76	; 0x4c
   1265c:	mov	r3, #26
   12660:	str	r3, [sp, #8]
   12664:	mov	r0, #0
   12668:	str	r0, [sp, #12]
   1266c:	add	r2, sp, #68	; 0x44
   12670:	add	r1, sp, #4
   12674:	bl	44e0 <timer_create@plt>
   12678:	cmp	r0, #0
   1267c:	beq	1269c <rb_sigio_supports_event+0x64>
   12680:	ldr	r3, [pc, #60]	; 126c4 <rb_sigio_supports_event+0x8c>
   12684:	add	r3, pc, r3
   12688:	mvn	r2, #0
   1268c:	str	r2, [r3, #132]	; 0x84
   12690:	mov	r0, #0
   12694:	add	sp, sp, #76	; 0x4c
   12698:	pop	{pc}		; (ldr pc, [sp], #4)
   1269c:	ldr	r0, [sp, #68]	; 0x44
   126a0:	bl	4a20 <timer_delete@plt>
   126a4:	mov	r0, #1
   126a8:	ldr	r3, [pc, #24]	; 126c8 <rb_sigio_supports_event+0x90>
   126ac:	add	r3, pc, r3
   126b0:	str	r0, [r3, #132]	; 0x84
   126b4:	b	12694 <rb_sigio_supports_event+0x5c>
   126b8:	mov	r0, #0
   126bc:	bx	lr
   126c0:	.word	0x00034658
   126c4:	.word	0x00034610
   126c8:	.word	0x000345e8

000126cc <rb_select_sigio>:
   126cc:	strd	r4, [sp, #-36]!	; 0xffffffdc
   126d0:	strd	r6, [sp, #8]
   126d4:	strd	r8, [sp, #16]
   126d8:	strd	sl, [sp, #24]
   126dc:	str	lr, [sp, #32]
   126e0:	sub	sp, sp, #140	; 0x8c
   126e4:	mov	r6, r0
   126e8:	ldr	r5, [pc, #1092]	; 12b34 <rb_select_sigio+0x468>
   126ec:	add	r5, pc, r5
   126f0:	bl	12638 <rb_sigio_supports_event>
   126f4:	adds	r0, r0, #0
   126f8:	movne	r0, #1
   126fc:	cmp	r6, #0
   12700:	orrge	r0, r0, #1
   12704:	cmp	r0, #0
   12708:	beq	1273c <rb_select_sigio+0x70>
   1270c:	movw	r3, #19923	; 0x4dd3
   12710:	movt	r3, #4194	; 0x1062
   12714:	smull	r3, r2, r3, r6
   12718:	asr	r3, r6, #31
   1271c:	rsb	r3, r3, r2, asr #6
   12720:	str	r3, [sp]
   12724:	mov	r2, #1000	; 0x3e8
   12728:	mls	r3, r2, r3, r6
   1272c:	movw	r2, #16960	; 0x4240
   12730:	movt	r2, #15
   12734:	mul	r3, r2, r3
   12738:	str	r3, [sp, #4]
   1273c:	ldr	r7, [pc, #1012]	; 12b38 <rb_select_sigio+0x46c>
   12740:	add	r7, pc, r7
   12744:	ldr	r8, [pc, #1008]	; 12b3c <rb_select_sigio+0x470>
   12748:	add	r8, pc, r8
   1274c:	ldr	sl, [pc, #1004]	; 12b40 <rb_select_sigio+0x474>
   12750:	add	sl, pc, sl
   12754:	add	sl, sl, #4
   12758:	ldr	r9, [pc, #996]	; 12b44 <rb_select_sigio+0x478>
   1275c:	add	r9, pc, r9
   12760:	add	r9, r9, #4
   12764:	b	128d0 <rb_select_sigio+0x204>
   12768:	mov	r2, sp
   1276c:	add	r1, sp, #8
   12770:	mov	r0, sl
   12774:	bl	4474 <sigtimedwait@plt>
   12778:	mov	r4, r0
   1277c:	b	12904 <rb_select_sigio+0x238>
   12780:	ldr	r0, [pc, #960]	; 12b48 <rb_select_sigio+0x47c>
   12784:	add	r0, pc, r0
   12788:	bl	48c4 <rb_lib_log@plt>
   1278c:	bl	4438 <__libc_current_sigrtmin@plt>
   12790:	mov	r1, #1
   12794:	bl	448c <signal@plt>
   12798:	bl	4438 <__libc_current_sigrtmin@plt>
   1279c:	mov	r1, #0
   127a0:	bl	448c <signal@plt>
   127a4:	ldr	r3, [pc, #928]	; 12b4c <rb_select_sigio+0x480>
   127a8:	add	r3, pc, r3
   127ac:	mov	r2, #0
   127b0:	str	r2, [r3]
   127b4:	ldr	r3, [pc, #916]	; 12b50 <rb_select_sigio+0x484>
   127b8:	ldr	r3, [r5, r3]
   127bc:	ldr	r1, [r3, #4]
   127c0:	mov	r2, r6
   127c4:	add	r1, r1, #1
   127c8:	ldr	r0, [r3]
   127cc:	bl	49a8 <poll@plt>
   127d0:	mov	r4, r0
   127d4:	bl	493c <rb_set_time@plt>
   127d8:	cmp	r4, #0
   127dc:	blt	129ac <rb_select_sigio+0x2e0>
   127e0:	cmp	r4, #0
   127e4:	beq	1298c <rb_select_sigio+0x2c0>
   127e8:	ldr	r3, [pc, #864]	; 12b50 <rb_select_sigio+0x484>
   127ec:	ldr	r3, [r5, r3]
   127f0:	ldr	r3, [r3, #4]
   127f4:	cmp	r3, #0
   127f8:	blt	12ad8 <rb_select_sigio+0x40c>
   127fc:	mov	r6, #0
   12800:	ldr	r3, [pc, #840]	; 12b50 <rb_select_sigio+0x484>
   12804:	ldr	r8, [r5, r3]
   12808:	mov	r9, r6
   1280c:	mov	sl, #2
   12810:	b	12a18 <rb_select_sigio+0x34c>
   12814:	ldr	r2, [sp, #24]
   12818:	ldr	r3, [pc, #816]	; 12b50 <rb_select_sigio+0x484>
   1281c:	ldr	r3, [r5, r3]
   12820:	ldr	r3, [r3]
   12824:	add	r3, r3, r2, lsl #3
   12828:	ldrh	r4, [r3, #6]
   1282c:	ldr	r1, [sp, #20]
   12830:	orr	r4, r4, r1
   12834:	sxth	r4, r4
   12838:	strh	r4, [r3, #6]
   1283c:	cmp	r2, #0
   12840:	blt	128d0 <rb_select_sigio+0x204>
   12844:	asr	r3, r2, #24
   12848:	eor	r3, r3, r2, asr #12
   1284c:	eor	r3, r3, r2
   12850:	ubfx	r3, r3, #0, #12
   12854:	ldr	r1, [pc, #760]	; 12b54 <rb_select_sigio+0x488>
   12858:	ldr	r1, [r5, r1]
   1285c:	ldr	r1, [r1]
   12860:	add	r3, r3, r3, lsl #1
   12864:	ldr	r3, [r1, r3, lsl #2]
   12868:	cmp	r3, #0
   1286c:	beq	128d0 <rb_select_sigio+0x204>
   12870:	ldr	fp, [r3]
   12874:	ldr	r1, [fp, #12]
   12878:	cmp	r2, r1
   1287c:	beq	1289c <rb_select_sigio+0x1d0>
   12880:	ldr	r3, [r3, #8]
   12884:	cmp	r3, #0
   12888:	beq	128d0 <rb_select_sigio+0x204>
   1288c:	ldr	fp, [r3]
   12890:	ldr	r1, [fp, #12]
   12894:	cmp	r2, r1
   12898:	bne	12880 <rb_select_sigio+0x1b4>
   1289c:	tst	r4, #89	; 0x59
   128a0:	bne	1294c <rb_select_sigio+0x280>
   128a4:	tst	r4, #284	; 0x11c
   128a8:	beq	128d0 <rb_select_sigio+0x204>
   128ac:	ldr	r2, [fp, #36]	; 0x24
   128b0:	ldr	r1, [fp, #40]	; 0x28
   128b4:	mov	r3, #0
   128b8:	str	r3, [fp, #36]	; 0x24
   128bc:	str	r3, [fp, #40]	; 0x28
   128c0:	cmp	r2, r3
   128c4:	beq	128d0 <rb_select_sigio+0x204>
   128c8:	mov	r0, fp
   128cc:	blx	r2
   128d0:	ldr	r3, [r7]
   128d4:	cmp	r3, #0
   128d8:	bne	1278c <rb_select_sigio+0xc0>
   128dc:	ldr	r3, [r8, #132]	; 0x84
   128e0:	cmp	r3, #0
   128e4:	lsreq	r3, r6, #31
   128e8:	movne	r3, #1
   128ec:	cmp	r3, #0
   128f0:	beq	12768 <rb_select_sigio+0x9c>
   128f4:	add	r1, sp, #8
   128f8:	mov	r0, r9
   128fc:	bl	442c <sigwaitinfo@plt>
   12900:	mov	r4, r0
   12904:	cmp	r4, #0
   12908:	ble	12974 <rb_select_sigio+0x2a8>
   1290c:	cmp	r4, #29
   12910:	beq	12780 <rb_select_sigio+0xb4>
   12914:	bl	4438 <__libc_current_sigrtmin@plt>
   12918:	add	r0, r0, #1
   1291c:	cmp	r0, r4
   12920:	bne	12814 <rb_select_sigio+0x148>
   12924:	ldr	r3, [pc, #556]	; 12b58 <rb_select_sigio+0x48c>
   12928:	add	r3, pc, r3
   1292c:	ldr	r3, [r3, #132]	; 0x84
   12930:	cmp	r3, #0
   12934:	beq	12814 <rb_select_sigio+0x148>
   12938:	ldr	r0, [sp, #28]
   1293c:	cmp	r0, #0
   12940:	beq	128d0 <rb_select_sigio+0x204>
   12944:	bl	4858 <rb_run_one_event@plt>
   12948:	b	128d0 <rb_select_sigio+0x204>
   1294c:	ldr	r2, [fp, #28]
   12950:	ldr	r1, [fp, #32]
   12954:	mov	r3, #0
   12958:	str	r3, [fp, #28]
   1295c:	str	r3, [fp, #32]
   12960:	cmp	r2, r3
   12964:	beq	128a4 <rb_select_sigio+0x1d8>
   12968:	mov	r0, fp
   1296c:	blx	r2
   12970:	b	128a4 <rb_select_sigio+0x1d8>
   12974:	ldr	r3, [pc, #480]	; 12b5c <rb_select_sigio+0x490>
   12978:	add	r3, pc, r3
   1297c:	ldr	r4, [r3]
   12980:	cmp	r4, #0
   12984:	bne	1278c <rb_select_sigio+0xc0>
   12988:	bl	493c <rb_set_time@plt>
   1298c:	mov	r0, r4
   12990:	add	sp, sp, #140	; 0x8c
   12994:	ldrd	r4, [sp]
   12998:	ldrd	r6, [sp, #8]
   1299c:	ldrd	r8, [sp, #16]
   129a0:	ldrd	sl, [sp, #24]
   129a4:	add	sp, sp, #32
   129a8:	pop	{pc}		; (ldr pc, [sp], #4)
   129ac:	bl	4c90 <__errno_location@plt>
   129b0:	ldr	r0, [r0]
   129b4:	bl	4390 <rb_ignore_errno@plt>
   129b8:	subs	r4, r0, #0
   129bc:	movne	r4, #5
   129c0:	b	1298c <rb_select_sigio+0x2c0>
   129c4:	ldr	r3, [r4, #28]
   129c8:	ldr	r1, [r4, #32]
   129cc:	str	r9, [r4, #28]
   129d0:	str	r9, [r4, #32]
   129d4:	cmp	r3, #0
   129d8:	beq	12b04 <rb_select_sigio+0x438>
   129dc:	mov	r0, r4
   129e0:	blx	r3
   129e4:	b	12a98 <rb_select_sigio+0x3cc>
   129e8:	ldr	r3, [r4, #28]
   129ec:	cmp	r3, #0
   129f0:	beq	12b10 <rb_select_sigio+0x444>
   129f4:	ldr	r3, [r4, #36]	; 0x24
   129f8:	cmp	r3, #0
   129fc:	beq	12aec <rb_select_sigio+0x420>
   12a00:	add	r6, r6, #1
   12a04:	ldr	r3, [pc, #324]	; 12b50 <rb_select_sigio+0x484>
   12a08:	ldr	r3, [r5, r3]
   12a0c:	ldr	r3, [r3, #4]
   12a10:	cmp	r3, r6
   12a14:	blt	12ad0 <rb_select_sigio+0x404>
   12a18:	ldr	r3, [r8]
   12a1c:	add	r2, r3, r6, lsl #3
   12a20:	ldrsh	r7, [r2, #6]
   12a24:	cmp	r7, #0
   12a28:	beq	12a00 <rb_select_sigio+0x334>
   12a2c:	ldr	r2, [r3, r6, lsl #3]
   12a30:	cmp	r2, #0
   12a34:	blt	12a00 <rb_select_sigio+0x334>
   12a38:	asr	r3, r2, #24
   12a3c:	eor	r3, r3, r2, asr #12
   12a40:	eor	r3, r3, r2
   12a44:	ubfx	r3, r3, #0, #12
   12a48:	ldr	r1, [pc, #260]	; 12b54 <rb_select_sigio+0x488>
   12a4c:	ldr	r1, [r5, r1]
   12a50:	ldr	r1, [r1]
   12a54:	add	r3, r3, r3, lsl #1
   12a58:	ldr	r3, [r1, r3, lsl #2]
   12a5c:	cmp	r3, #0
   12a60:	beq	12a00 <rb_select_sigio+0x334>
   12a64:	ldr	r4, [r3]
   12a68:	ldr	r1, [r4, #12]
   12a6c:	cmp	r2, r1
   12a70:	beq	12a90 <rb_select_sigio+0x3c4>
   12a74:	ldr	r3, [r3, #8]
   12a78:	cmp	r3, #0
   12a7c:	beq	12a00 <rb_select_sigio+0x334>
   12a80:	ldr	r4, [r3]
   12a84:	ldr	r1, [r4, #12]
   12a88:	cmp	r2, r1
   12a8c:	bne	12a74 <rb_select_sigio+0x3a8>
   12a90:	tst	r7, #89	; 0x59
   12a94:	bne	129c4 <rb_select_sigio+0x2f8>
   12a98:	ldrb	r3, [r4, #16]
   12a9c:	tst	r3, #1
   12aa0:	beq	129e8 <rb_select_sigio+0x31c>
   12aa4:	tst	r7, #284	; 0x11c
   12aa8:	beq	129e8 <rb_select_sigio+0x31c>
   12aac:	ldr	r3, [r4, #36]	; 0x24
   12ab0:	ldr	r1, [r4, #40]	; 0x28
   12ab4:	str	r9, [r4, #36]	; 0x24
   12ab8:	str	r9, [r4, #40]	; 0x28
   12abc:	cmp	r3, #0
   12ac0:	beq	12ae0 <rb_select_sigio+0x414>
   12ac4:	mov	r0, r4
   12ac8:	blx	r3
   12acc:	b	129e8 <rb_select_sigio+0x31c>
   12ad0:	mov	r4, #0
   12ad4:	b	1298c <rb_select_sigio+0x2c0>
   12ad8:	mov	r4, #0
   12adc:	b	1298c <rb_select_sigio+0x2c0>
   12ae0:	ldr	r3, [r4, #28]
   12ae4:	cmp	r3, #0
   12ae8:	beq	12b10 <rb_select_sigio+0x444>
   12aec:	mov	r3, r9
   12af0:	mov	r2, r9
   12af4:	mov	r1, sl
   12af8:	mov	r0, r4
   12afc:	bl	1240c <rb_setselect_sigio>
   12b00:	b	12a00 <rb_select_sigio+0x334>
   12b04:	ldrb	r3, [r4, #16]
   12b08:	tst	r3, #1
   12b0c:	bne	12b28 <rb_select_sigio+0x45c>
   12b10:	mov	r3, r9
   12b14:	mov	r2, r9
   12b18:	mov	r1, #1
   12b1c:	mov	r0, r4
   12b20:	bl	1240c <rb_setselect_sigio>
   12b24:	b	129f4 <rb_select_sigio+0x328>
   12b28:	tst	r7, #284	; 0x11c
   12b2c:	beq	12b10 <rb_select_sigio+0x444>
   12b30:	b	12aac <rb_select_sigio+0x3e0>
   12b34:	.word	0x0001690c
   12b38:	.word	0x00034554
   12b3c:	.word	0x0003454c
   12b40:	.word	0x00034544
   12b44:	.word	0x00034538
   12b48:	.word	0x000056d4
   12b4c:	.word	0x000344ec
   12b50:	.word	0x000003c8
   12b54:	.word	0x000003b8
   12b58:	.word	0x0003436c
   12b5c:	.word	0x0003431c

00012b60 <rb_sigio_init_event>:
   12b60:	str	r4, [sp, #-8]!
   12b64:	str	lr, [sp, #4]
   12b68:	bl	12638 <rb_sigio_supports_event>
   12b6c:	ldr	r4, [sp]
   12b70:	add	sp, sp, #4
   12b74:	pop	{pc}		; (ldr pc, [sp], #4)

00012b78 <rb_sigio_sched_event>:
   12b78:	ldr	r3, [pc, #292]	; 12ca4 <rb_sigio_sched_event+0x12c>
   12b7c:	add	r3, pc, r3
   12b80:	ldr	r3, [r3, #132]	; 0x84
   12b84:	cmp	r3, #0
   12b88:	ble	12c9c <rb_sigio_sched_event+0x124>
   12b8c:	strd	r4, [sp, #-16]!
   12b90:	str	r6, [sp, #8]
   12b94:	str	lr, [sp, #12]
   12b98:	sub	sp, sp, #80	; 0x50
   12b9c:	mov	r5, r1
   12ba0:	mov	r4, r0
   12ba4:	mov	r2, #64	; 0x40
   12ba8:	mov	r1, #0
   12bac:	add	r0, sp, #16
   12bb0:	bl	45dc <memset@plt>
   12bb4:	mov	r1, #4
   12bb8:	mov	r0, #1
   12bbc:	bl	45a0 <calloc@plt>
   12bc0:	subs	r6, r0, #0
   12bc4:	beq	12c50 <rb_sigio_sched_event+0xd8>
   12bc8:	str	r6, [r4, #40]	; 0x28
   12bcc:	bl	4438 <__libc_current_sigrtmin@plt>
   12bd0:	add	r0, r0, #1
   12bd4:	str	r0, [sp, #20]
   12bd8:	str	r4, [sp, #16]
   12bdc:	mov	r2, r6
   12be0:	add	r1, sp, #16
   12be4:	mov	r0, #0
   12be8:	bl	44e0 <timer_create@plt>
   12bec:	cmp	r0, #0
   12bf0:	blt	12c54 <rb_sigio_sched_event+0xdc>
   12bf4:	mov	r2, #0
   12bf8:	mov	r3, #0
   12bfc:	strd	r2, [sp]
   12c00:	mov	r1, sp
   12c04:	strd	r2, [r1, #8]
   12c08:	str	r5, [sp, #8]
   12c0c:	ldr	r3, [r4, #24]
   12c10:	cmp	r3, #0
   12c14:	ldrdne	r2, [sp, #8]
   12c18:	strdne	r2, [sp]
   12c1c:	mov	r3, #0
   12c20:	mov	r2, sp
   12c24:	mov	r1, r3
   12c28:	ldr	r0, [r6]
   12c2c:	bl	4708 <timer_settime@plt>
   12c30:	cmp	r0, #0
   12c34:	movge	r0, #1
   12c38:	blt	12c78 <rb_sigio_sched_event+0x100>
   12c3c:	add	sp, sp, #80	; 0x50
   12c40:	ldrd	r4, [sp]
   12c44:	ldr	r6, [sp, #8]
   12c48:	add	sp, sp, #12
   12c4c:	pop	{pc}		; (ldr pc, [sp], #4)
   12c50:	bl	4930 <rb_outofmemory@plt>
   12c54:	bl	4c90 <__errno_location@plt>
   12c58:	ldr	r0, [r0]
   12c5c:	bl	4354 <strerror@plt>
   12c60:	mov	r1, r0
   12c64:	ldr	r0, [pc, #60]	; 12ca8 <rb_sigio_sched_event+0x130>
   12c68:	add	r0, pc, r0
   12c6c:	bl	48c4 <rb_lib_log@plt>
   12c70:	mov	r0, #0
   12c74:	b	12c3c <rb_sigio_sched_event+0xc4>
   12c78:	bl	4c90 <__errno_location@plt>
   12c7c:	ldr	r0, [r0]
   12c80:	bl	4354 <strerror@plt>
   12c84:	mov	r1, r0
   12c88:	ldr	r0, [pc, #28]	; 12cac <rb_sigio_sched_event+0x134>
   12c8c:	add	r0, pc, r0
   12c90:	bl	48c4 <rb_lib_log@plt>
   12c94:	mov	r0, #0
   12c98:	b	12c3c <rb_sigio_sched_event+0xc4>
   12c9c:	mov	r0, #0
   12ca0:	bx	lr
   12ca4:	.word	0x00034118
   12ca8:	.word	0x000051c8
   12cac:	.word	0x000051b8

00012cb0 <rb_sigio_unsched_event>:
   12cb0:	ldr	r3, [pc, #72]	; 12d00 <rb_sigio_unsched_event+0x50>
   12cb4:	add	r3, pc, r3
   12cb8:	ldr	r3, [r3, #132]	; 0x84
   12cbc:	cmp	r3, #0
   12cc0:	bxle	lr
   12cc4:	str	r4, [sp, #-8]!
   12cc8:	str	lr, [sp, #4]
   12ccc:	mov	r4, r0
   12cd0:	ldr	r3, [r0, #40]	; 0x28
   12cd4:	ldr	r0, [r3]
   12cd8:	bl	4a20 <timer_delete@plt>
   12cdc:	ldr	r0, [r4, #40]	; 0x28
   12ce0:	cmp	r0, #0
   12ce4:	beq	12cec <rb_sigio_unsched_event+0x3c>
   12ce8:	bl	46a8 <free@plt>
   12cec:	mov	r3, #0
   12cf0:	str	r3, [r4, #40]	; 0x28
   12cf4:	ldr	r4, [sp]
   12cf8:	add	sp, sp, #4
   12cfc:	pop	{pc}		; (ldr pc, [sp], #4)
   12d00:	.word	0x00033fe0

00012d04 <select_update_selectfds>:
   12d04:	str	r4, [sp, #-8]!
   12d08:	str	lr, [sp, #4]
   12d0c:	uxth	r1, r1
   12d10:	tst	r1, #1
   12d14:	beq	12e14 <select_update_selectfds+0x110>
   12d18:	cmp	r2, #0
   12d1c:	beq	12d74 <select_update_selectfds+0x70>
   12d20:	ldr	r3, [r0, #12]
   12d24:	add	r2, r3, #31
   12d28:	cmp	r3, #0
   12d2c:	movge	r2, r3
   12d30:	asr	r2, r2, #5
   12d34:	ldr	lr, [pc, #632]	; 12fb4 <select_update_selectfds+0x2b0>
   12d38:	add	lr, pc, lr
   12d3c:	rsbs	ip, r3, #0
   12d40:	and	r3, r3, #31
   12d44:	and	ip, ip, #31
   12d48:	rsbpl	r3, ip, #0
   12d4c:	ldr	ip, [lr, r2, lsl #2]
   12d50:	mov	r4, #1
   12d54:	orr	r3, ip, r4, lsl r3
   12d58:	str	r3, [lr, r2, lsl #2]
   12d5c:	ldr	r3, [r0, #20]
   12d60:	orr	r3, r3, r4
   12d64:	str	r3, [r0, #20]
   12d68:	tst	r1, #2
   12d6c:	bne	12e24 <select_update_selectfds+0x120>
   12d70:	b	12e70 <select_update_selectfds+0x16c>
   12d74:	ldr	r3, [r0, #12]
   12d78:	add	r2, r3, #31
   12d7c:	cmp	r3, #0
   12d80:	movge	r2, r3
   12d84:	asr	r2, r2, #5
   12d88:	ldr	lr, [pc, #552]	; 12fb8 <select_update_selectfds+0x2b4>
   12d8c:	add	lr, pc, lr
   12d90:	rsbs	ip, r3, #0
   12d94:	and	r3, r3, #31
   12d98:	and	ip, ip, #31
   12d9c:	rsbpl	r3, ip, #0
   12da0:	ldr	ip, [lr, r2, lsl #2]
   12da4:	mov	r4, #1
   12da8:	bic	r3, ip, r4, lsl r3
   12dac:	str	r3, [lr, r2, lsl #2]
   12db0:	ldr	r3, [r0, #20]
   12db4:	bic	r3, r3, #1
   12db8:	str	r3, [r0, #20]
   12dbc:	tst	r1, #2
   12dc0:	beq	12e70 <select_update_selectfds+0x16c>
   12dc4:	ldr	r3, [r0, #12]
   12dc8:	add	r2, r3, #31
   12dcc:	cmp	r3, #0
   12dd0:	movge	r2, r3
   12dd4:	asr	r2, r2, #5
   12dd8:	ldr	r1, [pc, #476]	; 12fbc <select_update_selectfds+0x2b8>
   12ddc:	add	r1, pc, r1
   12de0:	add	r2, r1, r2, lsl #2
   12de4:	rsbs	r1, r3, #0
   12de8:	and	r3, r3, #31
   12dec:	and	r1, r1, #31
   12df0:	rsbpl	r3, r1, #0
   12df4:	ldr	r1, [r2, #128]	; 0x80
   12df8:	mov	ip, #1
   12dfc:	bic	r3, r1, ip, lsl r3
   12e00:	str	r3, [r2, #128]	; 0x80
   12e04:	ldr	r3, [r0, #20]
   12e08:	bic	r3, r3, #2
   12e0c:	str	r3, [r0, #20]
   12e10:	b	12e70 <select_update_selectfds+0x16c>
   12e14:	tst	r1, #2
   12e18:	beq	12e70 <select_update_selectfds+0x16c>
   12e1c:	cmp	r2, #0
   12e20:	beq	12dc4 <select_update_selectfds+0xc0>
   12e24:	ldr	r3, [r0, #12]
   12e28:	add	r2, r3, #31
   12e2c:	cmp	r3, #0
   12e30:	movge	r2, r3
   12e34:	asr	r2, r2, #5
   12e38:	ldr	r1, [pc, #384]	; 12fc0 <select_update_selectfds+0x2bc>
   12e3c:	add	r1, pc, r1
   12e40:	add	r2, r1, r2, lsl #2
   12e44:	rsbs	r1, r3, #0
   12e48:	and	r3, r3, #31
   12e4c:	and	r1, r1, #31
   12e50:	rsbpl	r3, r1, #0
   12e54:	ldr	r1, [r2, #128]	; 0x80
   12e58:	mov	ip, #1
   12e5c:	orr	r3, r1, ip, lsl r3
   12e60:	str	r3, [r2, #128]	; 0x80
   12e64:	ldr	r3, [r0, #20]
   12e68:	orr	r3, r3, #2
   12e6c:	str	r3, [r0, #20]
   12e70:	ldr	r3, [r0, #20]
   12e74:	tst	r3, #3
   12e78:	beq	12eac <select_update_selectfds+0x1a8>
   12e7c:	ldr	r3, [r0, #12]
   12e80:	ldr	r2, [pc, #316]	; 12fc4 <select_update_selectfds+0x2c0>
   12e84:	add	r2, pc, r2
   12e88:	ldr	r2, [r2]
   12e8c:	cmp	r3, r2
   12e90:	ble	12ea0 <select_update_selectfds+0x19c>
   12e94:	ldr	r2, [pc, #300]	; 12fc8 <select_update_selectfds+0x2c4>
   12e98:	add	r2, pc, r2
   12e9c:	str	r3, [r2]
   12ea0:	ldr	r4, [sp]
   12ea4:	add	sp, sp, #4
   12ea8:	pop	{pc}		; (ldr pc, [sp], #4)
   12eac:	ldr	r3, [pc, #280]	; 12fcc <select_update_selectfds+0x2c8>
   12eb0:	add	r3, pc, r3
   12eb4:	ldr	r3, [r3]
   12eb8:	ldr	r2, [r0, #12]
   12ebc:	cmp	r2, r3
   12ec0:	bgt	12ea0 <select_update_selectfds+0x19c>
   12ec4:	cmp	r3, #0
   12ec8:	blt	12ea0 <select_update_selectfds+0x19c>
   12ecc:	add	r2, r3, #31
   12ed0:	cmp	r3, #0
   12ed4:	movge	r2, r3
   12ed8:	asr	r2, r2, #5
   12edc:	rsbs	r1, r3, #0
   12ee0:	and	r0, r3, #31
   12ee4:	and	r1, r1, #31
   12ee8:	rsbpl	r0, r1, #0
   12eec:	mov	r1, #1
   12ef0:	lsl	r1, r1, r0
   12ef4:	ldr	r0, [pc, #212]	; 12fd0 <select_update_selectfds+0x2cc>
   12ef8:	add	r0, pc, r0
   12efc:	ldr	r0, [r0, r2, lsl #2]
   12f00:	tst	r1, r0
   12f04:	bne	12ea0 <select_update_selectfds+0x19c>
   12f08:	ldr	r0, [pc, #196]	; 12fd4 <select_update_selectfds+0x2d0>
   12f0c:	add	r0, pc, r0
   12f10:	add	r2, r0, r2, lsl #2
   12f14:	ldr	r2, [r2, #128]	; 0x80
   12f18:	tst	r1, r2
   12f1c:	bne	12ea0 <select_update_selectfds+0x19c>
   12f20:	mov	lr, #1
   12f24:	ldr	ip, [pc, #172]	; 12fd8 <select_update_selectfds+0x2d4>
   12f28:	add	ip, pc, ip
   12f2c:	ldr	r4, [pc, #168]	; 12fdc <select_update_selectfds+0x2d8>
   12f30:	add	r4, pc, r4
   12f34:	sub	r3, r3, #1
   12f38:	cmn	r3, #1
   12f3c:	beq	12fa0 <select_update_selectfds+0x29c>
   12f40:	add	r2, r3, #31
   12f44:	cmp	r3, #0
   12f48:	movge	r2, r3
   12f4c:	asr	r2, r2, #5
   12f50:	rsbs	r0, r3, #0
   12f54:	and	r1, r3, #31
   12f58:	and	r0, r0, #31
   12f5c:	rsbpl	r1, r0, #0
   12f60:	lsl	r1, lr, r1
   12f64:	ldr	r0, [ip, r2, lsl #2]
   12f68:	tst	r1, r0
   12f6c:	bne	12f90 <select_update_selectfds+0x28c>
   12f70:	add	r2, r4, r2, lsl #2
   12f74:	ldr	r2, [r2, #128]	; 0x80
   12f78:	tst	r1, r2
   12f7c:	beq	12f34 <select_update_selectfds+0x230>
   12f80:	ldr	r2, [pc, #88]	; 12fe0 <select_update_selectfds+0x2dc>
   12f84:	add	r2, pc, r2
   12f88:	str	r3, [r2]
   12f8c:	b	12ea0 <select_update_selectfds+0x19c>
   12f90:	ldr	r2, [pc, #76]	; 12fe4 <select_update_selectfds+0x2e0>
   12f94:	add	r2, pc, r2
   12f98:	str	r3, [r2]
   12f9c:	b	12ea0 <select_update_selectfds+0x19c>
   12fa0:	ldr	r3, [pc, #64]	; 12fe8 <select_update_selectfds+0x2e4>
   12fa4:	add	r3, pc, r3
   12fa8:	mvn	r2, #0
   12fac:	str	r2, [r3]
   12fb0:	b	12ea0 <select_update_selectfds+0x19c>
   12fb4:	.word	0x00033fe4
   12fb8:	.word	0x00033f90
   12fbc:	.word	0x00033f40
   12fc0:	.word	0x00033ee0
   12fc4:	.word	0x000165f4
   12fc8:	.word	0x000165e0
   12fcc:	.word	0x000165c8
   12fd0:	.word	0x00033e24
   12fd4:	.word	0x00033e10
   12fd8:	.word	0x00033df4
   12fdc:	.word	0x00033dec
   12fe0:	.word	0x000164f4
   12fe4:	.word	0x000164e4
   12fe8:	.word	0x000164d4

00012fec <rb_setup_fd_select>:
   12fec:	mov	r0, #0
   12ff0:	bx	lr

00012ff4 <rb_init_netio_select>:
   12ff4:	ldr	r3, [pc, #108]	; 13068 <rb_init_netio_select+0x74>
   12ff8:	add	r3, pc, r3
   12ffc:	ldr	r2, [pc, #104]	; 1306c <rb_init_netio_select+0x78>
   13000:	ldr	r2, [r3, r2]
   13004:	ldr	r2, [r2]
   13008:	cmp	r2, #1024	; 0x400
   1300c:	ble	13020 <rb_init_netio_select+0x2c>
   13010:	ldr	r2, [pc, #84]	; 1306c <rb_init_netio_select+0x78>
   13014:	ldr	r3, [r3, r2]
   13018:	mov	r2, #1024	; 0x400
   1301c:	str	r2, [r3]
   13020:	ldr	r2, [pc, #72]	; 13070 <rb_init_netio_select+0x7c>
   13024:	add	r2, pc, r2
   13028:	sub	r3, r2, #4
   1302c:	add	r2, r2, #124	; 0x7c
   13030:	mov	r1, #0
   13034:	str	r1, [r3, #4]!
   13038:	cmp	r3, r2
   1303c:	bne	13034 <rb_init_netio_select+0x40>
   13040:	ldr	r2, [pc, #44]	; 13074 <rb_init_netio_select+0x80>
   13044:	add	r2, pc, r2
   13048:	add	r3, r2, #124	; 0x7c
   1304c:	add	r2, r2, #252	; 0xfc
   13050:	mov	r1, #0
   13054:	str	r1, [r3, #4]!
   13058:	cmp	r2, r3
   1305c:	bne	13054 <rb_init_netio_select+0x60>
   13060:	mov	r0, #0
   13064:	bx	lr
   13068:	.word	0x00016000
   1306c:	.word	0x00000398
   13070:	.word	0x00033cf8
   13074:	.word	0x00033cd8

00013078 <rb_setselect_select>:
   13078:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1307c:	strd	r6, [sp, #8]
   13080:	str	r8, [sp, #16]
   13084:	str	lr, [sp, #20]
   13088:	mov	r5, r0
   1308c:	mov	r4, r1
   13090:	mov	r6, r2
   13094:	mov	r7, r3
   13098:	tst	r1, #1
   1309c:	bne	130bc <rb_setselect_select+0x44>
   130a0:	tst	r4, #2
   130a4:	bne	130d0 <rb_setselect_select+0x58>
   130a8:	ldrd	r4, [sp]
   130ac:	ldrd	r6, [sp, #8]
   130b0:	ldr	r8, [sp, #16]
   130b4:	add	sp, sp, #20
   130b8:	pop	{pc}		; (ldr pc, [sp], #4)
   130bc:	str	r2, [r5, #28]
   130c0:	str	r3, [r5, #32]
   130c4:	mov	r1, #1
   130c8:	bl	12d04 <select_update_selectfds>
   130cc:	b	130a0 <rb_setselect_select+0x28>
   130d0:	str	r6, [r5, #36]	; 0x24
   130d4:	str	r7, [r5, #40]	; 0x28
   130d8:	mov	r2, r6
   130dc:	mov	r1, #2
   130e0:	mov	r0, r5
   130e4:	bl	12d04 <select_update_selectfds>
   130e8:	b	130a8 <rb_setselect_select+0x30>

000130ec <rb_select_select>:
   130ec:	strd	r4, [sp, #-36]!	; 0xffffffdc
   130f0:	strd	r6, [sp, #8]
   130f4:	strd	r8, [sp, #16]
   130f8:	strd	sl, [sp, #24]
   130fc:	str	lr, [sp, #32]
   13100:	sub	sp, sp, #20
   13104:	mov	r4, r0
   13108:	ldr	r6, [pc, #600]	; 13368 <rb_select_select+0x27c>
   1310c:	add	r6, pc, r6
   13110:	ldr	r5, [pc, #596]	; 1336c <rb_select_select+0x280>
   13114:	add	r5, pc, r5
   13118:	mov	r7, #128	; 0x80
   1311c:	mov	r2, r7
   13120:	mov	r1, r5
   13124:	add	r0, r5, #256	; 0x100
   13128:	bl	47bc <memcpy@plt>
   1312c:	mov	r2, r7
   13130:	add	r1, r5, r7
   13134:	add	r0, r5, #384	; 0x180
   13138:	bl	47bc <memcpy@plt>
   1313c:	mov	r3, #1000	; 0x3e8
   13140:	mul	r4, r3, r4
   13144:	ldr	r5, [pc, #548]	; 13370 <rb_select_select+0x284>
   13148:	add	r5, pc, r5
   1314c:	add	r8, r5, #384	; 0x180
   13150:	ldr	r7, [pc, #540]	; 13374 <rb_select_select+0x288>
   13154:	add	r7, pc, r7
   13158:	mov	r3, #0
   1315c:	str	r3, [sp, #8]
   13160:	str	r4, [sp, #12]
   13164:	ldr	r0, [r7]
   13168:	add	r2, sp, #8
   1316c:	str	r2, [sp]
   13170:	mov	r2, r8
   13174:	add	r1, r5, #256	; 0x100
   13178:	add	r0, r0, #1
   1317c:	bl	48dc <select@plt>
   13180:	subs	r9, r0, #0
   13184:	bge	131a8 <rb_select_select+0xbc>
   13188:	bl	4c90 <__errno_location@plt>
   1318c:	ldr	r0, [r0]
   13190:	bl	4390 <rb_ignore_errno@plt>
   13194:	cmp	r0, #0
   13198:	bne	13158 <rb_select_select+0x6c>
   1319c:	bl	493c <rb_set_time@plt>
   131a0:	mvn	r9, #0
   131a4:	b	13340 <rb_select_select+0x254>
   131a8:	bl	493c <rb_set_time@plt>
   131ac:	cmp	r9, #0
   131b0:	beq	13340 <rb_select_select+0x254>
   131b4:	ldr	r3, [pc, #444]	; 13378 <rb_select_select+0x28c>
   131b8:	add	r3, pc, r3
   131bc:	ldr	r3, [r3]
   131c0:	cmp	r3, #0
   131c4:	blt	13360 <rb_select_select+0x274>
   131c8:	mov	r4, #0
   131cc:	ldr	r8, [pc, #424]	; 1337c <rb_select_select+0x290>
   131d0:	add	r8, pc, r8
   131d4:	ldr	r9, [pc, #420]	; 13380 <rb_select_select+0x294>
   131d8:	add	r9, pc, r9
   131dc:	ldr	r7, [pc, #416]	; 13384 <rb_select_select+0x298>
   131e0:	add	r7, pc, r7
   131e4:	b	13240 <rb_select_select+0x154>
   131e8:	ldr	r3, [r5, #28]
   131ec:	mov	r2, #0
   131f0:	str	r2, [r5, #28]
   131f4:	cmp	r3, r2
   131f8:	beq	132d8 <rb_select_select+0x1ec>
   131fc:	ldr	r1, [r5, #32]
   13200:	mov	r0, r5
   13204:	blx	r3
   13208:	b	132d8 <rb_select_select+0x1ec>
   1320c:	ldr	r1, [r5, #40]	; 0x28
   13210:	mov	r0, r5
   13214:	blx	r3
   13218:	ldr	r3, [r5, #28]
   1321c:	cmp	r3, #0
   13220:	beq	13328 <rb_select_select+0x23c>
   13224:	ldr	r3, [r5, #36]	; 0x24
   13228:	cmp	r3, #0
   1322c:	beq	13314 <rb_select_select+0x228>
   13230:	add	r4, r4, #1
   13234:	ldr	r3, [r7]
   13238:	cmp	r3, r4
   1323c:	blt	1333c <rb_select_select+0x250>
   13240:	cmp	r4, #0
   13244:	blt	13230 <rb_select_select+0x144>
   13248:	asr	r3, r4, #24
   1324c:	eor	r3, r3, r4, asr #12
   13250:	eor	r3, r3, r4
   13254:	ubfx	r3, r3, #0, #12
   13258:	ldr	r2, [pc, #296]	; 13388 <rb_select_select+0x29c>
   1325c:	ldr	r2, [r6, r2]
   13260:	ldr	r2, [r2]
   13264:	add	r3, r3, r3, lsl #1
   13268:	ldr	r3, [r2, r3, lsl #2]
   1326c:	cmp	r3, #0
   13270:	beq	13230 <rb_select_select+0x144>
   13274:	ldr	r5, [r3]
   13278:	ldr	r2, [r5, #12]
   1327c:	cmp	r2, r4
   13280:	beq	132a0 <rb_select_select+0x1b4>
   13284:	ldr	r3, [r3, #8]
   13288:	cmp	r3, #0
   1328c:	beq	13230 <rb_select_select+0x144>
   13290:	ldr	r5, [r3]
   13294:	ldr	r2, [r5, #12]
   13298:	cmp	r2, r4
   1329c:	bne	13284 <rb_select_select+0x198>
   132a0:	add	sl, r4, #31
   132a4:	cmp	r4, #0
   132a8:	movge	sl, r4
   132ac:	asr	sl, sl, #5
   132b0:	rsbs	r2, r4, #0
   132b4:	and	r3, r4, #31
   132b8:	and	r2, r2, #31
   132bc:	rsbpl	r3, r2, #0
   132c0:	mov	fp, #1
   132c4:	lsl	fp, fp, r3
   132c8:	add	r3, r8, sl, lsl #2
   132cc:	ldr	r3, [r3, #256]	; 0x100
   132d0:	tst	fp, r3
   132d4:	bne	131e8 <rb_select_select+0xfc>
   132d8:	ldrb	r3, [r5, #16]
   132dc:	tst	r3, #1
   132e0:	beq	13230 <rb_select_select+0x144>
   132e4:	add	sl, r9, sl, lsl #2
   132e8:	ldr	r3, [sl, #384]	; 0x180
   132ec:	tst	fp, r3
   132f0:	beq	13218 <rb_select_select+0x12c>
   132f4:	ldr	r3, [r5, #36]	; 0x24
   132f8:	mov	r2, #0
   132fc:	str	r2, [r5, #36]	; 0x24
   13300:	cmp	r3, r2
   13304:	bne	1320c <rb_select_select+0x120>
   13308:	ldr	r3, [r5, #28]
   1330c:	cmp	r3, #0
   13310:	beq	13328 <rb_select_select+0x23c>
   13314:	mov	r2, #0
   13318:	mov	r1, #2
   1331c:	mov	r0, r5
   13320:	bl	12d04 <select_update_selectfds>
   13324:	b	13230 <rb_select_select+0x144>
   13328:	mov	r2, #0
   1332c:	mov	r1, #1
   13330:	mov	r0, r5
   13334:	bl	12d04 <select_update_selectfds>
   13338:	b	13224 <rb_select_select+0x138>
   1333c:	mov	r9, #0
   13340:	mov	r0, r9
   13344:	add	sp, sp, #20
   13348:	ldrd	r4, [sp]
   1334c:	ldrd	r6, [sp, #8]
   13350:	ldrd	r8, [sp, #16]
   13354:	ldrd	sl, [sp, #24]
   13358:	add	sp, sp, #32
   1335c:	pop	{pc}		; (ldr pc, [sp], #4)
   13360:	mov	r9, #0
   13364:	b	13340 <rb_select_select+0x254>
   13368:	.word	0x00015eec
   1336c:	.word	0x00033c08
   13370:	.word	0x00033bd4
   13374:	.word	0x00016324
   13378:	.word	0x000162c0
   1337c:	.word	0x00033b4c
   13380:	.word	0x00033b44
   13384:	.word	0x00016298
   13388:	.word	0x000003b8

0001338c <rb_init_netio_kqueue>:
   1338c:	str	r4, [sp, #-8]!
   13390:	str	lr, [sp, #4]
   13394:	bl	4c90 <__errno_location@plt>
   13398:	mov	r3, #38	; 0x26
   1339c:	str	r3, [r0]
   133a0:	mvn	r0, #0
   133a4:	ldr	r4, [sp]
   133a8:	add	sp, sp, #4
   133ac:	pop	{pc}		; (ldr pc, [sp], #4)

000133b0 <rb_setselect_kqueue>:
   133b0:	str	r4, [sp, #-8]!
   133b4:	str	lr, [sp, #4]
   133b8:	bl	4c90 <__errno_location@plt>
   133bc:	mov	r3, #38	; 0x26
   133c0:	str	r3, [r0]
   133c4:	ldr	r4, [sp]
   133c8:	add	sp, sp, #4
   133cc:	pop	{pc}		; (ldr pc, [sp], #4)

000133d0 <rb_select_kqueue>:
   133d0:	str	r4, [sp, #-8]!
   133d4:	str	lr, [sp, #4]
   133d8:	bl	4c90 <__errno_location@plt>
   133dc:	mov	r3, #38	; 0x26
   133e0:	str	r3, [r0]
   133e4:	mvn	r0, #0
   133e8:	ldr	r4, [sp]
   133ec:	add	sp, sp, #4
   133f0:	pop	{pc}		; (ldr pc, [sp], #4)

000133f4 <rb_setup_fd_kqueue>:
   133f4:	str	r4, [sp, #-8]!
   133f8:	str	lr, [sp, #4]
   133fc:	bl	4c90 <__errno_location@plt>
   13400:	mov	r3, #38	; 0x26
   13404:	str	r3, [r0]
   13408:	mvn	r0, #0
   1340c:	ldr	r4, [sp]
   13410:	add	sp, sp, #4
   13414:	pop	{pc}		; (ldr pc, [sp], #4)

00013418 <rb_kqueue_init_event>:
   13418:	bx	lr

0001341c <rb_kqueue_sched_event>:
   1341c:	str	r4, [sp, #-8]!
   13420:	str	lr, [sp, #4]
   13424:	bl	4c90 <__errno_location@plt>
   13428:	mov	r3, #38	; 0x26
   1342c:	str	r3, [r0]
   13430:	mvn	r0, #0
   13434:	ldr	r4, [sp]
   13438:	add	sp, sp, #4
   1343c:	pop	{pc}		; (ldr pc, [sp], #4)

00013440 <rb_kqueue_unsched_event>:
   13440:	bx	lr

00013444 <rb_kqueue_supports_event>:
   13444:	str	r4, [sp, #-8]!
   13448:	str	lr, [sp, #4]
   1344c:	bl	4c90 <__errno_location@plt>
   13450:	mov	r3, #38	; 0x26
   13454:	str	r3, [r0]
   13458:	mov	r0, #0
   1345c:	ldr	r4, [sp]
   13460:	add	sp, sp, #4
   13464:	pop	{pc}		; (ldr pc, [sp], #4)

00013468 <rb_rawbuf_done>:
   13468:	str	r4, [sp, #-8]!
   1346c:	str	lr, [sp, #4]
   13470:	ldr	r3, [r1, #8]
   13474:	cmp	r3, #0
   13478:	ldrne	r2, [r1, #4]
   1347c:	strne	r2, [r3, #4]
   13480:	ldreq	r3, [r1, #4]
   13484:	streq	r3, [r0, #4]
   13488:	ldr	r3, [r1, #4]
   1348c:	cmp	r3, #0
   13490:	ldrne	r2, [r1, #8]
   13494:	strne	r2, [r3, #8]
   13498:	ldreq	r3, [r1, #8]
   1349c:	streq	r3, [r0]
   134a0:	mov	r3, #0
   134a4:	str	r3, [r1, #4]
   134a8:	str	r3, [r1, #8]
   134ac:	ldr	r3, [r0, #8]
   134b0:	sub	r3, r3, #1
   134b4:	str	r3, [r0, #8]
   134b8:	ldr	r3, [pc, #20]	; 134d4 <rb_rawbuf_done+0x6c>
   134bc:	add	r3, pc, r3
   134c0:	ldr	r0, [r3]
   134c4:	bl	487c <rb_bh_free@plt>
   134c8:	ldr	r4, [sp]
   134cc:	add	sp, sp, #4
   134d0:	pop	{pc}		; (ldr pc, [sp], #4)
   134d4:	.word	0x00033a60

000134d8 <rb_rawbuf_flush_writev>:
   134d8:	strd	r4, [sp, #-28]!	; 0xffffffe4
   134dc:	strd	r6, [sp, #8]
   134e0:	strd	r8, [sp, #16]
   134e4:	str	lr, [sp, #24]
   134e8:	sub	sp, sp, #8192	; 0x2000
   134ec:	sub	sp, sp, #4
   134f0:	mov	r5, r0
   134f4:	mov	r6, r1
   134f8:	mov	r2, #8192	; 0x2000
   134fc:	mov	r1, #0
   13500:	mov	r0, sp
   13504:	bl	45dc <memset@plt>
   13508:	ldr	r3, [r5]
   1350c:	cmp	r3, #0
   13510:	movne	r2, sp
   13514:	movne	r0, #1
   13518:	movwne	lr, #1023	; 0x3ff
   1351c:	bne	1357c <rb_rawbuf_flush_writev+0xa4>
   13520:	bl	4c90 <__errno_location@plt>
   13524:	mov	r3, #11
   13528:	str	r3, [r0]
   1352c:	mvn	r9, #0
   13530:	b	13698 <rb_rawbuf_flush_writev+0x1c0>
   13534:	ldr	r7, [r5, #16]
   13538:	add	ip, r1, #12
   1353c:	add	ip, ip, r7
   13540:	str	ip, [r2]
   13544:	mov	r4, r0
   13548:	ldr	r1, [r1, #1036]	; 0x40c
   1354c:	sub	r1, r1, r7
   13550:	str	r1, [r2, #4]
   13554:	ldr	r3, [r3, #8]
   13558:	add	r0, r0, #1
   1355c:	add	r2, r2, #8
   13560:	cmp	r4, lr
   13564:	movle	r1, #0
   13568:	movgt	r1, #1
   1356c:	cmp	r3, #0
   13570:	moveq	r1, #1
   13574:	cmp	r1, #0
   13578:	bne	135a4 <rb_rawbuf_flush_writev+0xcc>
   1357c:	ldr	r1, [r3]
   13580:	ldrb	ip, [r1, #1040]	; 0x410
   13584:	cmp	ip, #0
   13588:	bne	13534 <rb_rawbuf_flush_writev+0x5c>
   1358c:	add	ip, r1, #12
   13590:	str	ip, [r2]
   13594:	mov	r4, r0
   13598:	ldr	r1, [r1, #1036]	; 0x40c
   1359c:	str	r1, [r2, #4]
   135a0:	b	13554 <rb_rawbuf_flush_writev+0x7c>
   135a4:	cmp	r4, #0
   135a8:	beq	135f0 <rb_rawbuf_flush_writev+0x118>
   135ac:	mov	r2, r4
   135b0:	mov	r1, sp
   135b4:	mov	r0, r6
   135b8:	bl	4a80 <rb_writev@plt>
   135bc:	subs	r9, r0, #0
   135c0:	ble	13698 <rb_rawbuf_flush_writev+0x1c0>
   135c4:	ldr	r3, [r5]
   135c8:	cmp	r3, #0
   135cc:	beq	13698 <rb_rawbuf_flush_writev+0x1c0>
   135d0:	ldr	r6, [r3, #8]
   135d4:	ldr	r1, [r3]
   135d8:	cmp	r4, #0
   135dc:	ble	13698 <rb_rawbuf_flush_writev+0x1c0>
   135e0:	add	r4, r4, #1
   135e4:	mov	r7, r9
   135e8:	mov	r8, #1
   135ec:	b	13644 <rb_rawbuf_flush_writev+0x16c>
   135f0:	bl	4c90 <__errno_location@plt>
   135f4:	mov	r3, #11
   135f8:	str	r3, [r0]
   135fc:	mvn	r9, #0
   13600:	b	13698 <rb_rawbuf_flush_writev+0x1c0>
   13604:	ldr	r3, [r1, #1036]	; 0x40c
   13608:	cmp	r3, r7
   1360c:	bgt	13680 <rb_rawbuf_flush_writev+0x1a8>
   13610:	sub	r7, r7, r3
   13614:	ldr	r2, [r5, #12]
   13618:	sub	r3, r2, r3
   1361c:	str	r3, [r5, #12]
   13620:	mov	r0, r5
   13624:	bl	13468 <rb_rawbuf_done>
   13628:	cmp	r6, #0
   1362c:	beq	13698 <rb_rawbuf_flush_writev+0x1c0>
   13630:	ldr	r1, [r6]
   13634:	add	r8, r8, #1
   13638:	ldr	r6, [r6, #8]
   1363c:	cmp	r4, r8
   13640:	beq	13698 <rb_rawbuf_flush_writev+0x1c0>
   13644:	ldrb	r3, [r1, #1040]	; 0x410
   13648:	cmp	r3, #0
   1364c:	beq	13604 <rb_rawbuf_flush_writev+0x12c>
   13650:	ldr	r3, [r1, #1036]	; 0x40c
   13654:	ldr	r2, [r5, #16]
   13658:	sub	r3, r3, r2
   1365c:	cmp	r3, r7
   13660:	bgt	13604 <rb_rawbuf_flush_writev+0x12c>
   13664:	sub	r7, r7, r3
   13668:	ldr	r2, [r5, #12]
   1366c:	sub	r3, r2, r3
   13670:	str	r3, [r5, #12]
   13674:	mov	r0, r5
   13678:	bl	13468 <rb_rawbuf_done>
   1367c:	b	13628 <rb_rawbuf_flush_writev+0x150>
   13680:	mov	r3, #1
   13684:	strb	r3, [r1, #1040]	; 0x410
   13688:	str	r7, [r5, #16]
   1368c:	ldr	r3, [r5, #12]
   13690:	sub	r7, r3, r7
   13694:	str	r7, [r5, #12]
   13698:	mov	r0, r9
   1369c:	add	sp, sp, #8192	; 0x2000
   136a0:	add	sp, sp, #4
   136a4:	ldrd	r4, [sp]
   136a8:	ldrd	r6, [sp, #8]
   136ac:	ldrd	r8, [sp, #16]
   136b0:	add	sp, sp, #24
   136b4:	pop	{pc}		; (ldr pc, [sp], #4)

000136b8 <rb_rawbuf_flush>:
   136b8:	strd	r4, [sp, #-16]!
   136bc:	str	r6, [sp, #8]
   136c0:	str	lr, [sp, #12]
   136c4:	ldr	r3, [r0]
   136c8:	cmp	r3, #0
   136cc:	beq	13768 <rb_rawbuf_flush+0xb0>
   136d0:	mov	r4, r0
   136d4:	mov	r6, r1
   136d8:	mov	r0, r1
   136dc:	bl	4468 <rb_fd_ssl@plt>
   136e0:	cmp	r0, #0
   136e4:	beq	1377c <rb_rawbuf_flush+0xc4>
   136e8:	ldr	r3, [r4]
   136ec:	ldr	r5, [r3]
   136f0:	ldrb	r3, [r5, #1040]	; 0x410
   136f4:	cmp	r3, #0
   136f8:	bne	1370c <rb_rawbuf_flush+0x54>
   136fc:	mov	r3, #1
   13700:	strb	r3, [r5, #1040]	; 0x410
   13704:	mov	r3, #0
   13708:	str	r3, [r4, #16]
   1370c:	ldr	r3, [r4, #16]
   13710:	ldr	r2, [r5, #1036]	; 0x40c
   13714:	add	r1, r5, #12
   13718:	sub	r2, r2, r3
   1371c:	add	r1, r1, r3
   13720:	mov	r0, r6
   13724:	bl	460c <rb_write@plt>
   13728:	subs	r6, r0, #0
   1372c:	ble	13754 <rb_rawbuf_flush+0x9c>
   13730:	ldr	r3, [r4, #16]
   13734:	add	r3, r6, r3
   13738:	str	r3, [r4, #16]
   1373c:	ldr	r2, [r5, #1036]	; 0x40c
   13740:	cmp	r3, r2
   13744:	beq	13790 <rb_rawbuf_flush+0xd8>
   13748:	ldr	r3, [r4, #12]
   1374c:	sub	r3, r3, r6
   13750:	str	r3, [r4, #12]
   13754:	mov	r0, r6
   13758:	ldrd	r4, [sp]
   1375c:	ldr	r6, [sp, #8]
   13760:	add	sp, sp, #12
   13764:	pop	{pc}		; (ldr pc, [sp], #4)
   13768:	bl	4c90 <__errno_location@plt>
   1376c:	mov	r3, #11
   13770:	str	r3, [r0]
   13774:	mvn	r6, #0
   13778:	b	13754 <rb_rawbuf_flush+0x9c>
   1377c:	mov	r1, r6
   13780:	mov	r0, r4
   13784:	bl	134d8 <rb_rawbuf_flush_writev>
   13788:	mov	r6, r0
   1378c:	b	13754 <rb_rawbuf_flush+0x9c>
   13790:	mov	r3, #0
   13794:	str	r3, [r4, #16]
   13798:	ldr	r3, [r5, #8]
   1379c:	cmp	r3, #0
   137a0:	ldrne	r2, [r5, #4]
   137a4:	strne	r2, [r3, #4]
   137a8:	ldreq	r3, [r5, #4]
   137ac:	streq	r3, [r4, #4]
   137b0:	ldr	r3, [r5, #4]
   137b4:	cmp	r3, #0
   137b8:	ldrne	r2, [r5, #8]
   137bc:	strne	r2, [r3, #8]
   137c0:	ldreq	r3, [r5, #8]
   137c4:	streq	r3, [r4]
   137c8:	mov	r3, #0
   137cc:	str	r3, [r5, #4]
   137d0:	str	r3, [r5, #8]
   137d4:	ldr	r3, [r4, #8]
   137d8:	sub	r3, r3, #1
   137dc:	str	r3, [r4, #8]
   137e0:	mov	r1, r5
   137e4:	ldr	r3, [pc, #12]	; 137f8 <rb_rawbuf_flush+0x140>
   137e8:	add	r3, pc, r3
   137ec:	ldr	r0, [r3]
   137f0:	bl	487c <rb_bh_free@plt>
   137f4:	b	13748 <rb_rawbuf_flush+0x90>
   137f8:	.word	0x00033734

000137fc <rb_rawbuf_append>:
   137fc:	strd	r4, [sp, #-32]!	; 0xffffffe0
   13800:	strd	r6, [sp, #8]
   13804:	strd	r8, [sp, #16]
   13808:	str	sl, [sp, #24]
   1380c:	str	lr, [sp, #28]
   13810:	mov	r5, r0
   13814:	mov	r8, r1
   13818:	mov	r7, r2
   1381c:	ldr	r3, [r0, #4]
   13820:	cmp	r3, #0
   13824:	beq	1388c <rb_rawbuf_append+0x90>
   13828:	ldr	r4, [r3]
   1382c:	cmp	r4, #0
   13830:	beq	1388c <rb_rawbuf_append+0x90>
   13834:	ldr	r3, [r4, #1036]	; 0x40c
   13838:	cmp	r3, #1024	; 0x400
   1383c:	bge	1388c <rb_rawbuf_append+0x90>
   13840:	ldrb	r2, [r4, #1040]	; 0x410
   13844:	cmp	r2, #0
   13848:	bne	1388c <rb_rawbuf_append+0x90>
   1384c:	rsb	r6, r3, #1024	; 0x400
   13850:	cmp	r7, r6
   13854:	movlt	r6, r7
   13858:	add	r0, r4, #12
   1385c:	mov	r2, r6
   13860:	add	r0, r0, r3
   13864:	bl	47bc <memcpy@plt>
   13868:	ldr	r3, [r4, #1036]	; 0x40c
   1386c:	add	r3, r3, r6
   13870:	str	r3, [r4, #1036]	; 0x40c
   13874:	ldr	r3, [r5, #12]
   13878:	add	r3, r3, r6
   1387c:	str	r3, [r5, #12]
   13880:	subs	r7, r7, r6
   13884:	addne	r8, r8, r6
   13888:	beq	13930 <rb_rawbuf_append+0x134>
   1388c:	cmp	r7, #0
   13890:	ble	13930 <rb_rawbuf_append+0x134>
   13894:	ldr	sl, [pc, #172]	; 13948 <rb_rawbuf_append+0x14c>
   13898:	add	sl, pc, sl
   1389c:	mov	r9, #0
   138a0:	b	13904 <rb_rawbuf_append+0x108>
   138a4:	ldr	r3, [r5]
   138a8:	cmp	r3, #0
   138ac:	streq	r0, [r5]
   138b0:	str	r4, [r5, #4]
   138b4:	ldr	r3, [r5, #8]
   138b8:	add	r3, r3, #1
   138bc:	str	r3, [r5, #8]
   138c0:	cmp	r7, #1024	; 0x400
   138c4:	movlt	r6, r7
   138c8:	movge	r6, #1024	; 0x400
   138cc:	mov	r2, r6
   138d0:	mov	r1, r8
   138d4:	add	r0, r4, #12
   138d8:	bl	47bc <memcpy@plt>
   138dc:	ldr	r3, [r4, #1036]	; 0x40c
   138e0:	add	r3, r3, r6
   138e4:	str	r3, [r4, #1036]	; 0x40c
   138e8:	sub	r7, r7, r6
   138ec:	add	r8, r8, r6
   138f0:	ldr	r3, [r5, #12]
   138f4:	add	r6, r3, r6
   138f8:	str	r6, [r5, #12]
   138fc:	cmp	r7, #0
   13900:	ble	13930 <rb_rawbuf_append+0x134>
   13904:	ldr	r0, [sl]
   13908:	bl	4900 <rb_bh_alloc@plt>
   1390c:	mov	r4, r0
   13910:	str	r0, [r4]
   13914:	str	r9, [r0, #8]
   13918:	ldr	r3, [r5, #4]
   1391c:	str	r3, [r0, #4]
   13920:	cmp	r3, #0
   13924:	strne	r0, [r3, #8]
   13928:	bne	138b0 <rb_rawbuf_append+0xb4>
   1392c:	b	138a4 <rb_rawbuf_append+0xa8>
   13930:	ldrd	r4, [sp]
   13934:	ldrd	r6, [sp, #8]
   13938:	ldrd	r8, [sp, #16]
   1393c:	ldr	sl, [sp, #24]
   13940:	add	sp, sp, #28
   13944:	pop	{pc}		; (ldr pc, [sp], #4)
   13948:	.word	0x00033684

0001394c <rb_rawbuf_get>:
   1394c:	strd	r4, [sp, #-24]!	; 0xffffffe8
   13950:	strd	r6, [sp, #8]
   13954:	str	r8, [sp, #16]
   13958:	str	lr, [sp, #20]
   1395c:	ldr	r3, [r0]
   13960:	cmp	r3, #0
   13964:	moveq	r4, #0
   13968:	beq	139e0 <rb_rawbuf_get+0x94>
   1396c:	ldr	r6, [r3]
   13970:	ldrb	r3, [r6, #1040]	; 0x410
   13974:	cmp	r3, #0
   13978:	add	ip, r6, #12
   1397c:	ldrne	r3, [r0, #16]
   13980:	addne	ip, ip, r3
   13984:	mov	r7, r2
   13988:	mov	r3, r1
   1398c:	mov	r5, r0
   13990:	ldr	r4, [r6, #1036]	; 0x40c
   13994:	cmp	r2, r4
   13998:	movlt	r4, r2
   1399c:	mov	r2, r4
   139a0:	mov	r1, ip
   139a4:	mov	r0, r3
   139a8:	bl	47bc <memcpy@plt>
   139ac:	ldr	r3, [r6, #1036]	; 0x40c
   139b0:	cmp	r3, r4
   139b4:	beq	139f8 <rb_rawbuf_get+0xac>
   139b8:	mov	r2, #1
   139bc:	strb	r2, [r6, #1040]	; 0x410
   139c0:	sub	r3, r3, r4
   139c4:	str	r3, [r6, #1036]	; 0x40c
   139c8:	ldr	r3, [r5, #12]
   139cc:	sub	r3, r3, r4
   139d0:	str	r3, [r5, #12]
   139d4:	ldr	r3, [r5, #16]
   139d8:	add	r3, r3, r4
   139dc:	str	r3, [r5, #16]
   139e0:	mov	r0, r4
   139e4:	ldrd	r4, [sp]
   139e8:	ldrd	r6, [sp, #8]
   139ec:	ldr	r8, [sp, #16]
   139f0:	add	sp, sp, #20
   139f4:	pop	{pc}		; (ldr pc, [sp], #4)
   139f8:	mov	r3, #0
   139fc:	str	r3, [r5, #16]
   13a00:	mov	r1, r6
   13a04:	mov	r0, r5
   13a08:	bl	13468 <rb_rawbuf_done>
   13a0c:	ldr	r2, [r5, #12]
   13a10:	sub	r7, r2, r7
   13a14:	str	r7, [r5, #12]
   13a18:	b	139e0 <rb_rawbuf_get+0x94>

00013a1c <rb_rawbuf_length>:
   13a1c:	ldr	r0, [r0, #12]
   13a20:	bx	lr

00013a24 <rb_new_rawbuffer>:
   13a24:	str	r4, [sp, #-8]!
   13a28:	str	lr, [sp, #4]
   13a2c:	mov	r1, #20
   13a30:	mov	r0, #1
   13a34:	bl	45a0 <calloc@plt>
   13a38:	cmp	r0, #0
   13a3c:	beq	13a4c <rb_new_rawbuffer+0x28>
   13a40:	ldr	r4, [sp]
   13a44:	add	sp, sp, #4
   13a48:	pop	{pc}		; (ldr pc, [sp], #4)
   13a4c:	bl	4930 <rb_outofmemory@plt>

00013a50 <rb_free_rawbuffer>:
   13a50:	strd	r4, [sp, #-16]!
   13a54:	str	r6, [sp, #8]
   13a58:	str	lr, [sp, #12]
   13a5c:	mov	r5, r0
   13a60:	ldr	r3, [r0]
   13a64:	cmp	r3, #0
   13a68:	beq	13a90 <rb_free_rawbuffer+0x40>
   13a6c:	ldr	r4, [r3, #8]
   13a70:	ldr	r1, [r3]
   13a74:	mov	r0, r5
   13a78:	bl	13468 <rb_rawbuf_done>
   13a7c:	cmp	r4, #0
   13a80:	beq	13a90 <rb_free_rawbuffer+0x40>
   13a84:	mov	r3, r4
   13a88:	ldr	r4, [r4, #8]
   13a8c:	b	13a70 <rb_free_rawbuffer+0x20>
   13a90:	mov	r0, r5
   13a94:	bl	46a8 <free@plt>
   13a98:	ldrd	r4, [sp]
   13a9c:	ldr	r6, [sp, #8]
   13aa0:	add	sp, sp, #12
   13aa4:	pop	{pc}		; (ldr pc, [sp], #4)

00013aa8 <rb_init_rawbuffers>:
   13aa8:	ldr	r3, [pc, #64]	; 13af0 <rb_init_rawbuffers+0x48>
   13aac:	add	r3, pc, r3
   13ab0:	ldr	r3, [r3]
   13ab4:	cmp	r3, #0
   13ab8:	bxne	lr
   13abc:	str	r4, [sp, #-8]!
   13ac0:	str	lr, [sp, #4]
   13ac4:	mov	r1, r0
   13ac8:	ldr	r2, [pc, #36]	; 13af4 <rb_init_rawbuffers+0x4c>
   13acc:	add	r2, pc, r2
   13ad0:	movw	r0, #1044	; 0x414
   13ad4:	bl	4a5c <rb_bh_create@plt>
   13ad8:	ldr	r3, [pc, #24]	; 13af8 <rb_init_rawbuffers+0x50>
   13adc:	add	r3, pc, r3
   13ae0:	str	r0, [r3]
   13ae4:	ldr	r4, [sp]
   13ae8:	add	sp, sp, #4
   13aec:	pop	{pc}		; (ldr pc, [sp], #4)
   13af0:	.word	0x00033470
   13af4:	.word	0x00004400
   13af8:	.word	0x00033440

00013afc <Deref_Prefix>:
   13afc:	cmp	r0, #0
   13b00:	bxeq	lr
   13b04:	ldr	r3, [r0, #4]
   13b08:	sub	r3, r3, #1
   13b0c:	str	r3, [r0, #4]
   13b10:	cmp	r3, #0
   13b14:	bxgt	lr
   13b18:	str	r4, [sp, #-8]!
   13b1c:	str	lr, [sp, #4]
   13b20:	bl	46a8 <free@plt>
   13b24:	ldr	r4, [sp]
   13b28:	add	sp, sp, #4
   13b2c:	pop	{pc}		; (ldr pc, [sp], #4)

00013b30 <comp_with_mask>:
   13b30:	strd	r4, [sp, #-16]!
   13b34:	str	r6, [sp, #8]
   13b38:	str	lr, [sp, #12]
   13b3c:	mov	r6, r0
   13b40:	mov	r5, r1
   13b44:	mov	r4, r2
   13b48:	lsr	r2, r2, #3
   13b4c:	bl	4408 <memcmp@plt>
   13b50:	cmp	r0, #0
   13b54:	movne	r0, #0
   13b58:	bne	13b88 <comp_with_mask+0x58>
   13b5c:	ands	r3, r4, #7
   13b60:	moveq	r0, #1
   13b64:	beq	13b88 <comp_with_mask+0x58>
   13b68:	ldrb	r2, [r6, r4, lsr #3]
   13b6c:	ldrb	r1, [r5, r4, lsr #3]
   13b70:	eor	r2, r2, r1
   13b74:	rsb	r3, r3, #8
   13b78:	mov	r1, #255	; 0xff
   13b7c:	ands	r3, r2, r1, lsl r3
   13b80:	moveq	r0, #1
   13b84:	movne	r0, #0
   13b88:	ldrd	r4, [sp]
   13b8c:	ldr	r6, [sp, #8]
   13b90:	add	sp, sp, #12
   13b94:	pop	{pc}		; (ldr pc, [sp], #4)

00013b98 <New_Prefix2>:
   13b98:	strd	r4, [sp, #-24]!	; 0xffffffe8
   13b9c:	strd	r6, [sp, #8]
   13ba0:	str	r8, [sp, #16]
   13ba4:	str	lr, [sp, #20]
   13ba8:	mov	r5, r0
   13bac:	mov	r6, r1
   13bb0:	mov	r4, r2
   13bb4:	cmp	r0, #10
   13bb8:	beq	13c10 <New_Prefix2+0x78>
   13bbc:	cmp	r0, #2
   13bc0:	bne	13c7c <New_Prefix2+0xe4>
   13bc4:	cmp	r3, #0
   13bc8:	movne	r2, #0
   13bcc:	beq	13c60 <New_Prefix2+0xc8>
   13bd0:	ldr	r1, [r6]
   13bd4:	str	r1, [r3, #8]
   13bd8:	mov	r0, r3
   13bdc:	cmp	r4, #0
   13be0:	movlt	r4, #128	; 0x80
   13be4:	strh	r4, [r0, #2]
   13be8:	strh	r5, [r0]
   13bec:	cmp	r2, #0
   13bf0:	moveq	r3, #0
   13bf4:	movne	r3, #1
   13bf8:	str	r3, [r0, #4]
   13bfc:	ldrd	r4, [sp]
   13c00:	ldrd	r6, [sp, #8]
   13c04:	ldr	r8, [sp, #16]
   13c08:	add	sp, sp, #20
   13c0c:	pop	{pc}		; (ldr pc, [sp], #4)
   13c10:	cmp	r3, #0
   13c14:	movne	r2, #0
   13c18:	beq	13c44 <New_Prefix2+0xac>
   13c1c:	ldr	r7, [r6]
   13c20:	ldr	lr, [r6, #4]
   13c24:	ldr	ip, [r6, #8]
   13c28:	ldr	r0, [r6, #12]
   13c2c:	str	r7, [r3, #8]
   13c30:	str	lr, [r3, #12]
   13c34:	str	ip, [r3, #16]
   13c38:	str	r0, [r3, #20]
   13c3c:	mov	r0, r3
   13c40:	b	13bdc <New_Prefix2+0x44>
   13c44:	mov	r1, #24
   13c48:	mov	r0, #1
   13c4c:	bl	45a0 <calloc@plt>
   13c50:	subs	r3, r0, #0
   13c54:	movne	r2, #1
   13c58:	bne	13c1c <New_Prefix2+0x84>
   13c5c:	bl	4930 <rb_outofmemory@plt>
   13c60:	mov	r1, #24
   13c64:	mov	r0, #1
   13c68:	bl	45a0 <calloc@plt>
   13c6c:	subs	r3, r0, #0
   13c70:	movne	r2, #1
   13c74:	bne	13bd0 <New_Prefix2+0x38>
   13c78:	bl	4930 <rb_outofmemory@plt>
   13c7c:	mov	r0, #0
   13c80:	b	13bfc <New_Prefix2+0x64>

00013c84 <Ref_Prefix>:
   13c84:	cmp	r0, #0
   13c88:	bxeq	lr
   13c8c:	ldr	r3, [r0, #4]
   13c90:	cmp	r3, #0
   13c94:	beq	13ca4 <Ref_Prefix+0x20>
   13c98:	add	r3, r3, #1
   13c9c:	str	r3, [r0, #4]
   13ca0:	bx	lr
   13ca4:	str	r4, [sp, #-8]!
   13ca8:	str	lr, [sp, #4]
   13cac:	mov	r2, r0
   13cb0:	mov	r1, r0
   13cb4:	ldrh	r0, [r1], #8
   13cb8:	ldrh	r2, [r2, #2]
   13cbc:	bl	13b98 <New_Prefix2>
   13cc0:	ldr	r4, [sp]
   13cc4:	add	sp, sp, #4
   13cc8:	pop	{pc}		; (ldr pc, [sp], #4)

00013ccc <ascii2prefix>:
   13ccc:	strd	r4, [sp, #-24]!	; 0xffffffe8
   13cd0:	strd	r6, [sp, #8]
   13cd4:	str	r8, [sp, #16]
   13cd8:	str	lr, [sp, #20]
   13cdc:	sub	sp, sp, #1040	; 0x410
   13ce0:	sub	sp, sp, #8
   13ce4:	subs	r4, r1, #0
   13ce8:	beq	13e38 <ascii2prefix+0x16c>
   13cec:	mov	r5, r0
   13cf0:	cmp	r0, #0
   13cf4:	bne	13de0 <ascii2prefix+0x114>
   13cf8:	mov	r1, #58	; 0x3a
   13cfc:	mov	r0, r4
   13d00:	bl	4564 <strchr@plt>
   13d04:	cmp	r0, #0
   13d08:	moveq	r5, #2
   13d0c:	movne	r5, #10
   13d10:	moveq	r7, #32
   13d14:	movne	r7, #128	; 0x80
   13d18:	mov	r1, #47	; 0x2f
   13d1c:	mov	r0, r4
   13d20:	bl	4564 <strchr@plt>
   13d24:	subs	r6, r0, #0
   13d28:	beq	13d78 <ascii2prefix+0xac>
   13d2c:	mov	r2, #10
   13d30:	mov	r1, #0
   13d34:	add	r0, r6, #1
   13d38:	bl	4828 <strtol@plt>
   13d3c:	mov	r8, r0
   13d40:	sub	r6, r6, r4
   13d44:	mov	r2, r6
   13d48:	mov	r1, r4
   13d4c:	add	r0, sp, #4
   13d50:	bl	47bc <memcpy@plt>
   13d54:	add	r3, sp, #1040	; 0x410
   13d58:	add	r3, r3, #8
   13d5c:	add	r6, r3, r6
   13d60:	mov	r3, #0
   13d64:	strb	r3, [r6, #-1044]	; 0xfffffbec
   13d68:	cmp	r7, r8
   13d6c:	cmpge	r8, r3
   13d70:	movgt	r7, r8
   13d74:	add	r4, sp, #4
   13d78:	cmp	r5, #2
   13d7c:	beq	13dfc <ascii2prefix+0x130>
   13d80:	cmp	r5, #10
   13d84:	movne	r0, #0
   13d88:	bne	13dc4 <ascii2prefix+0xf8>
   13d8c:	add	r2, sp, #1024	; 0x400
   13d90:	add	r2, r2, #4
   13d94:	mov	r1, r4
   13d98:	mov	r0, #10
   13d9c:	bl	45e8 <rb_inet_pton@plt>
   13da0:	cmp	r0, #0
   13da4:	movle	r0, #0
   13da8:	ble	13dc4 <ascii2prefix+0xf8>
   13dac:	mov	r3, #0
   13db0:	mov	r2, r7
   13db4:	add	r1, sp, #1024	; 0x400
   13db8:	add	r1, r1, #4
   13dbc:	mov	r0, #10
   13dc0:	bl	13b98 <New_Prefix2>
   13dc4:	add	sp, sp, #1040	; 0x410
   13dc8:	add	sp, sp, #8
   13dcc:	ldrd	r4, [sp]
   13dd0:	ldrd	r6, [sp, #8]
   13dd4:	ldr	r8, [sp, #16]
   13dd8:	add	sp, sp, #20
   13ddc:	pop	{pc}		; (ldr pc, [sp], #4)
   13de0:	cmp	r0, #2
   13de4:	moveq	r7, #32
   13de8:	beq	13d18 <ascii2prefix+0x4c>
   13dec:	cmp	r0, #10
   13df0:	movne	r7, #0
   13df4:	moveq	r7, #128	; 0x80
   13df8:	b	13d18 <ascii2prefix+0x4c>
   13dfc:	add	r2, sp, #1040	; 0x410
   13e00:	add	r2, r2, #4
   13e04:	mov	r1, r4
   13e08:	mov	r0, #2
   13e0c:	bl	45e8 <rb_inet_pton@plt>
   13e10:	cmp	r0, #0
   13e14:	movle	r0, #0
   13e18:	ble	13dc4 <ascii2prefix+0xf8>
   13e1c:	mov	r3, #0
   13e20:	mov	r2, r7
   13e24:	add	r1, sp, #1040	; 0x410
   13e28:	add	r1, r1, #4
   13e2c:	mov	r0, #2
   13e30:	bl	13b98 <New_Prefix2>
   13e34:	b	13dc4 <ascii2prefix+0xf8>
   13e38:	mov	r0, r4
   13e3c:	b	13dc4 <ascii2prefix+0xf8>

00013e40 <rb_init_patricia>:
   13e40:	bx	lr

00013e44 <rb_new_patricia>:
   13e44:	str	r4, [sp, #-8]!
   13e48:	str	lr, [sp, #4]
   13e4c:	mov	r4, r0
   13e50:	mov	r1, #12
   13e54:	mov	r0, #1
   13e58:	bl	45a0 <calloc@plt>
   13e5c:	cmp	r0, #0
   13e60:	beq	13e94 <rb_new_patricia+0x50>
   13e64:	str	r4, [r0, #4]
   13e68:	mov	r3, #0
   13e6c:	str	r3, [r0]
   13e70:	str	r3, [r0, #8]
   13e74:	ldr	r2, [pc, #28]	; 13e98 <rb_new_patricia+0x54>
   13e78:	add	r2, pc, r2
   13e7c:	ldr	r3, [r2]
   13e80:	add	r3, r3, #1
   13e84:	str	r3, [r2]
   13e88:	ldr	r4, [sp]
   13e8c:	add	sp, sp, #4
   13e90:	pop	{pc}		; (ldr pc, [sp], #4)
   13e94:	bl	4930 <rb_outofmemory@plt>
   13e98:	.word	0x000330a8

00013e9c <rb_clear_patricia>:
   13e9c:	strd	r4, [sp, #-32]!	; 0xffffffe0
   13ea0:	strd	r6, [sp, #8]
   13ea4:	strd	r8, [sp, #16]
   13ea8:	str	sl, [sp, #24]
   13eac:	str	lr, [sp, #28]
   13eb0:	sub	sp, sp, #520	; 0x208
   13eb4:	mov	r8, r0
   13eb8:	ldr	r4, [r0]
   13ebc:	cmp	r4, #0
   13ec0:	beq	13f54 <rb_clear_patricia+0xb8>
   13ec4:	mov	r9, r1
   13ec8:	add	r5, sp, #4
   13ecc:	mov	sl, r5
   13ed0:	b	13f04 <rb_clear_patricia+0x68>
   13ed4:	mov	r0, r4
   13ed8:	bl	46a8 <free@plt>
   13edc:	ldr	r3, [r8, #8]
   13ee0:	sub	r3, r3, #1
   13ee4:	str	r3, [r8, #8]
   13ee8:	cmp	r6, #0
   13eec:	beq	13f34 <rb_clear_patricia+0x98>
   13ef0:	cmp	r7, #0
   13ef4:	moveq	r4, r6
   13ef8:	beq	13f04 <rb_clear_patricia+0x68>
   13efc:	str	r7, [r5], #4
   13f00:	mov	r4, r6
   13f04:	ldr	r6, [r4, #8]
   13f08:	ldr	r7, [r4, #12]
   13f0c:	ldr	r0, [r4, #4]
   13f10:	cmp	r0, #0
   13f14:	beq	13ed4 <rb_clear_patricia+0x38>
   13f18:	bl	13afc <Deref_Prefix>
   13f1c:	ldr	r0, [r4, #20]
   13f20:	cmp	r9, #0
   13f24:	cmpne	r0, #0
   13f28:	beq	13ed4 <rb_clear_patricia+0x38>
   13f2c:	blx	r9
   13f30:	b	13ed4 <rb_clear_patricia+0x38>
   13f34:	cmp	r7, #0
   13f38:	movne	r4, r7
   13f3c:	bne	13f04 <rb_clear_patricia+0x68>
   13f40:	cmp	r5, sl
   13f44:	beq	13f54 <rb_clear_patricia+0xb8>
   13f48:	ldr	r4, [r5, #-4]
   13f4c:	cmp	r4, #0
   13f50:	bne	13f78 <rb_clear_patricia+0xdc>
   13f54:	mov	r0, r8
   13f58:	bl	46a8 <free@plt>
   13f5c:	add	sp, sp, #520	; 0x208
   13f60:	ldrd	r4, [sp]
   13f64:	ldrd	r6, [sp, #8]
   13f68:	ldrd	r8, [sp, #16]
   13f6c:	ldr	sl, [sp, #24]
   13f70:	add	sp, sp, #28
   13f74:	pop	{pc}		; (ldr pc, [sp], #4)
   13f78:	sub	r5, r5, #4
   13f7c:	b	13f04 <rb_clear_patricia+0x68>

00013f80 <rb_destroy_patricia>:
   13f80:	str	r4, [sp, #-8]!
   13f84:	str	lr, [sp, #4]
   13f88:	bl	44b0 <rb_clear_patricia@plt>
   13f8c:	ldr	r2, [pc, #24]	; 13fac <rb_destroy_patricia+0x2c>
   13f90:	add	r2, pc, r2
   13f94:	ldr	r3, [r2]
   13f98:	sub	r3, r3, #1
   13f9c:	str	r3, [r2]
   13fa0:	ldr	r4, [sp]
   13fa4:	add	sp, sp, #4
   13fa8:	pop	{pc}		; (ldr pc, [sp], #4)
   13fac:	.word	0x00032f90

00013fb0 <rb_patricia_process>:
   13fb0:	strd	r4, [sp, #-20]!	; 0xffffffec
   13fb4:	strd	r6, [sp, #8]
   13fb8:	str	lr, [sp, #16]
   13fbc:	sub	sp, sp, #524	; 0x20c
   13fc0:	ldr	r4, [r0]
   13fc4:	cmp	r4, #0
   13fc8:	beq	14040 <rb_patricia_process+0x90>
   13fcc:	mov	r6, r1
   13fd0:	add	r5, sp, #4
   13fd4:	mov	r7, r5
   13fd8:	b	13fe8 <rb_patricia_process+0x38>
   13fdc:	ldr	r4, [r4, #12]
   13fe0:	cmp	r4, #0
   13fe4:	beq	1402c <rb_patricia_process+0x7c>
   13fe8:	ldr	r0, [r4, #4]
   13fec:	cmp	r0, #0
   13ff0:	beq	13ffc <rb_patricia_process+0x4c>
   13ff4:	ldr	r1, [r4, #20]
   13ff8:	blx	r6
   13ffc:	ldr	r2, [r4, #8]
   14000:	cmp	r2, #0
   14004:	beq	13fdc <rb_patricia_process+0x2c>
   14008:	ldr	r0, [r4, #12]
   1400c:	cmp	r0, #0
   14010:	moveq	r4, r2
   14014:	beq	13fe8 <rb_patricia_process+0x38>
   14018:	mov	r3, r5
   1401c:	str	r0, [r3], #4
   14020:	mov	r4, r2
   14024:	mov	r5, r3
   14028:	b	13fe8 <rb_patricia_process+0x38>
   1402c:	cmp	r5, r7
   14030:	beq	14040 <rb_patricia_process+0x90>
   14034:	ldr	r4, [r5, #-4]
   14038:	cmp	r4, #0
   1403c:	bne	14054 <rb_patricia_process+0xa4>
   14040:	add	sp, sp, #524	; 0x20c
   14044:	ldrd	r4, [sp]
   14048:	ldrd	r6, [sp, #8]
   1404c:	add	sp, sp, #16
   14050:	pop	{pc}		; (ldr pc, [sp], #4)
   14054:	sub	r5, r5, #4
   14058:	b	13fe8 <rb_patricia_process+0x38>

0001405c <rb_patricia_search_exact>:
   1405c:	str	r4, [sp, #-8]!
   14060:	str	lr, [sp, #4]
   14064:	ldr	r4, [r0]
   14068:	cmp	r4, #0
   1406c:	beq	140a4 <rb_patricia_search_exact+0x48>
   14070:	add	ip, r1, #8
   14074:	ldrh	r2, [r1, #2]
   14078:	mov	r1, #128	; 0x80
   1407c:	ldr	r3, [r4]
   14080:	cmp	r3, r2
   14084:	bcs	140b4 <rb_patricia_search_exact+0x58>
   14088:	ldrb	r0, [ip, r3, lsr #3]
   1408c:	and	r3, r3, #7
   14090:	ands	r3, r0, r1, asr r3
   14094:	ldrne	r4, [r4, #12]
   14098:	ldreq	r4, [r4, #8]
   1409c:	cmp	r4, #0
   140a0:	bne	1407c <rb_patricia_search_exact+0x20>
   140a4:	mov	r0, r4
   140a8:	ldr	r4, [sp]
   140ac:	add	sp, sp, #4
   140b0:	pop	{pc}		; (ldr pc, [sp], #4)
   140b4:	movhi	r4, #0
   140b8:	bhi	140a4 <rb_patricia_search_exact+0x48>
   140bc:	ldr	r0, [r4, #4]
   140c0:	cmp	r0, #0
   140c4:	beq	140e0 <rb_patricia_search_exact+0x84>
   140c8:	mov	r1, ip
   140cc:	add	r0, r0, #8
   140d0:	bl	13b30 <comp_with_mask>
   140d4:	cmp	r0, #0
   140d8:	moveq	r4, #0
   140dc:	b	140a4 <rb_patricia_search_exact+0x48>
   140e0:	mov	r4, r0
   140e4:	b	140a4 <rb_patricia_search_exact+0x48>

000140e8 <rb_patricia_search_best2>:
   140e8:	strd	r4, [sp, #-20]!	; 0xffffffec
   140ec:	strd	r6, [sp, #8]
   140f0:	str	lr, [sp, #16]
   140f4:	sub	sp, sp, #524	; 0x20c
   140f8:	ldr	r4, [r0]
   140fc:	cmp	r4, #0
   14100:	beq	141d4 <rb_patricia_search_best2+0xec>
   14104:	add	r7, r1, #8
   14108:	ldrh	ip, [r1, #2]
   1410c:	mov	r1, #0
   14110:	mov	lr, #128	; 0x80
   14114:	b	14134 <rb_patricia_search_best2+0x4c>
   14118:	ldrb	r0, [r7, r3, lsr #3]
   1411c:	and	r3, r3, #7
   14120:	ands	r3, r0, lr, asr r3
   14124:	ldrne	r4, [r4, #12]
   14128:	ldreq	r4, [r4, #8]
   1412c:	cmp	r4, #0
   14130:	beq	14188 <rb_patricia_search_best2+0xa0>
   14134:	ldr	r3, [r4]
   14138:	cmp	r3, ip
   1413c:	bcs	14160 <rb_patricia_search_best2+0x78>
   14140:	ldr	r0, [r4, #4]
   14144:	cmp	r0, #0
   14148:	beq	14118 <rb_patricia_search_best2+0x30>
   1414c:	add	r0, sp, #520	; 0x208
   14150:	add	r0, r0, r1, lsl #2
   14154:	str	r4, [r0, #-516]	; 0xfffffdfc
   14158:	add	r1, r1, #1
   1415c:	b	14118 <rb_patricia_search_best2+0x30>
   14160:	cmp	r2, #0
   14164:	cmpne	r4, #0
   14168:	beq	14188 <rb_patricia_search_best2+0xa0>
   1416c:	ldr	r3, [r4, #4]
   14170:	cmp	r3, #0
   14174:	beq	14188 <rb_patricia_search_best2+0xa0>
   14178:	add	r3, sp, #520	; 0x208
   1417c:	add	r3, r3, r1, lsl #2
   14180:	str	r4, [r3, #-516]	; 0xfffffdfc
   14184:	add	r1, r1, #1
   14188:	cmp	r1, #0
   1418c:	ble	141ec <rb_patricia_search_best2+0x104>
   14190:	sub	r5, r1, #1
   14194:	add	r6, sp, #4
   14198:	add	r6, r6, r1, lsl #2
   1419c:	ldr	r4, [r6, #-4]!
   141a0:	ldr	r3, [r4, #4]
   141a4:	cmp	r3, #0
   141a8:	addne	r0, r3, #8
   141ac:	moveq	r0, r3
   141b0:	ldrh	r2, [r3, #2]
   141b4:	mov	r1, r7
   141b8:	bl	13b30 <comp_with_mask>
   141bc:	cmp	r0, #0
   141c0:	bne	141d4 <rb_patricia_search_best2+0xec>
   141c4:	sub	r5, r5, #1
   141c8:	cmn	r5, #1
   141cc:	bne	1419c <rb_patricia_search_best2+0xb4>
   141d0:	mov	r4, #0
   141d4:	mov	r0, r4
   141d8:	add	sp, sp, #524	; 0x20c
   141dc:	ldrd	r4, [sp]
   141e0:	ldrd	r6, [sp, #8]
   141e4:	add	sp, sp, #16
   141e8:	pop	{pc}		; (ldr pc, [sp], #4)
   141ec:	mov	r4, #0
   141f0:	b	141d4 <rb_patricia_search_best2+0xec>

000141f4 <rb_patricia_search_best>:
   141f4:	str	r4, [sp, #-8]!
   141f8:	str	lr, [sp, #4]
   141fc:	mov	r2, #1
   14200:	bl	4660 <rb_patricia_search_best2@plt>
   14204:	ldr	r4, [sp]
   14208:	add	sp, sp, #4
   1420c:	pop	{pc}		; (ldr pc, [sp], #4)

00014210 <rb_patricia_lookup>:
   14210:	strd	r4, [sp, #-36]!	; 0xffffffdc
   14214:	strd	r6, [sp, #8]
   14218:	strd	r8, [sp, #16]
   1421c:	strd	sl, [sp, #24]
   14220:	str	lr, [sp, #32]
   14224:	sub	sp, sp, #4
   14228:	mov	r5, r0
   1422c:	mov	r8, r1
   14230:	ldr	r2, [r0]
   14234:	cmp	r2, #0
   14238:	beq	14250 <rb_patricia_lookup+0x40>
   1423c:	add	r6, r1, #8
   14240:	ldrh	r7, [r1, #2]
   14244:	mov	r0, r7
   14248:	mov	lr, #128	; 0x80
   1424c:	b	142b4 <rb_patricia_lookup+0xa4>
   14250:	mov	r1, #24
   14254:	mov	r0, #1
   14258:	bl	45a0 <calloc@plt>
   1425c:	subs	fp, r0, #0
   14260:	beq	142a0 <rb_patricia_lookup+0x90>
   14264:	ldrh	r3, [r8, #2]
   14268:	str	r3, [fp]
   1426c:	mov	r0, r8
   14270:	bl	13c84 <Ref_Prefix>
   14274:	str	r0, [fp, #4]
   14278:	mov	r3, #0
   1427c:	str	r3, [fp, #16]
   14280:	str	r3, [fp, #12]
   14284:	str	r3, [fp, #8]
   14288:	str	r3, [fp, #20]
   1428c:	str	fp, [r5]
   14290:	ldr	r3, [r5, #8]
   14294:	add	r3, r3, #1
   14298:	str	r3, [r5, #8]
   1429c:	b	14484 <rb_patricia_lookup+0x274>
   142a0:	bl	4930 <rb_outofmemory@plt>
   142a4:	ldr	r1, [r2, #8]
   142a8:	cmp	r1, #0
   142ac:	beq	142f4 <rb_patricia_lookup+0xe4>
   142b0:	mov	r2, r1
   142b4:	ldr	r3, [r2]
   142b8:	cmp	r3, r0
   142bc:	bcc	142cc <rb_patricia_lookup+0xbc>
   142c0:	ldr	r1, [r2, #4]
   142c4:	cmp	r1, #0
   142c8:	bne	142f4 <rb_patricia_lookup+0xe4>
   142cc:	ldr	r1, [r5, #4]
   142d0:	cmp	r1, r3
   142d4:	bls	142a4 <rb_patricia_lookup+0x94>
   142d8:	ldrb	r1, [r6, r3, lsr #3]
   142dc:	and	ip, r3, #7
   142e0:	ands	r1, r1, lr, asr ip
   142e4:	beq	142a4 <rb_patricia_lookup+0x94>
   142e8:	ldr	r1, [r2, #12]
   142ec:	cmp	r1, #0
   142f0:	bne	142b0 <rb_patricia_lookup+0xa0>
   142f4:	ldr	r0, [r2, #4]
   142f8:	add	r9, r0, #8
   142fc:	cmp	r3, r7
   14300:	movcc	r4, r3
   14304:	movcs	r4, r7
   14308:	cmp	r4, #0
   1430c:	beq	1459c <rb_patricia_lookup+0x38c>
   14310:	ldrb	r1, [r8, #8]
   14314:	ldrb	r3, [r0, #8]
   14318:	eors	r1, r1, r3
   1431c:	movne	ip, #0
   14320:	beq	14374 <rb_patricia_lookup+0x164>
   14324:	tst	r1, #128	; 0x80
   14328:	bne	143a4 <rb_patricia_lookup+0x194>
   1432c:	mov	r3, #1
   14330:	mov	r0, #128	; 0x80
   14334:	ands	lr, r1, r0, asr r3
   14338:	bne	14348 <rb_patricia_lookup+0x138>
   1433c:	add	r3, r3, #1
   14340:	cmp	r3, #8
   14344:	bne	14334 <rb_patricia_lookup+0x124>
   14348:	add	ip, ip, r3
   1434c:	cmp	r4, ip
   14350:	movcs	r4, ip
   14354:	ldr	sl, [r2, #16]
   14358:	cmp	sl, #0
   1435c:	beq	144a4 <rb_patricia_lookup+0x294>
   14360:	ldr	r3, [sl]
   14364:	cmp	r4, r3
   14368:	bls	143b0 <rb_patricia_lookup+0x1a0>
   1436c:	mov	sl, r2
   14370:	b	143c8 <rb_patricia_lookup+0x1b8>
   14374:	add	lr, r8, #8
   14378:	add	r0, r0, #8
   1437c:	mov	ip, #8
   14380:	cmp	r4, ip
   14384:	bls	1434c <rb_patricia_lookup+0x13c>
   14388:	ldrb	r1, [lr, #1]!
   1438c:	ldrb	r3, [r0, #1]!
   14390:	add	sl, ip, #8
   14394:	eors	r1, r1, r3
   14398:	bne	14324 <rb_patricia_lookup+0x114>
   1439c:	mov	ip, sl
   143a0:	b	14380 <rb_patricia_lookup+0x170>
   143a4:	mov	r3, #0
   143a8:	b	14348 <rb_patricia_lookup+0x138>
   143ac:	mov	sl, r3
   143b0:	ldr	r3, [sl, #16]
   143b4:	cmp	r3, #0
   143b8:	beq	143c8 <rb_patricia_lookup+0x1b8>
   143bc:	ldr	r2, [r3]
   143c0:	cmp	r2, r4
   143c4:	bcs	143ac <rb_patricia_lookup+0x19c>
   143c8:	cmp	r7, r4
   143cc:	bne	143dc <rb_patricia_lookup+0x1cc>
   143d0:	ldr	r3, [sl]
   143d4:	cmp	r3, r4
   143d8:	beq	144ac <rb_patricia_lookup+0x29c>
   143dc:	mov	r1, #24
   143e0:	mov	r0, #1
   143e4:	bl	45a0 <calloc@plt>
   143e8:	subs	fp, r0, #0
   143ec:	beq	144d0 <rb_patricia_lookup+0x2c0>
   143f0:	str	r7, [fp]
   143f4:	mov	r0, r8
   143f8:	bl	13c84 <Ref_Prefix>
   143fc:	str	r0, [fp, #4]
   14400:	mov	r3, #0
   14404:	str	r3, [fp, #16]
   14408:	str	r3, [fp, #12]
   1440c:	str	r3, [fp, #8]
   14410:	str	r3, [fp, #20]
   14414:	ldr	r8, [r5, #8]
   14418:	add	r3, r8, #1
   1441c:	str	r3, [r5, #8]
   14420:	ldr	r3, [sl]
   14424:	cmp	r3, r4
   14428:	beq	144d4 <rb_patricia_lookup+0x2c4>
   1442c:	cmp	r7, r4
   14430:	bne	14508 <rb_patricia_lookup+0x2f8>
   14434:	ldr	r3, [r5, #4]
   14438:	cmp	r3, r4
   1443c:	bls	14458 <rb_patricia_lookup+0x248>
   14440:	ldrb	r3, [r9, r4, lsr #3]
   14444:	and	r7, r7, #7
   14448:	mov	r2, #128	; 0x80
   1444c:	ands	r3, r3, r2, asr r7
   14450:	strne	sl, [fp, #12]
   14454:	bne	1445c <rb_patricia_lookup+0x24c>
   14458:	str	sl, [fp, #8]
   1445c:	ldr	r3, [sl, #16]
   14460:	str	r3, [fp, #16]
   14464:	cmp	r3, #0
   14468:	streq	fp, [r5]
   1446c:	beq	14480 <rb_patricia_lookup+0x270>
   14470:	ldr	r2, [r3, #12]
   14474:	cmp	r2, sl
   14478:	streq	fp, [r3, #12]
   1447c:	strne	fp, [r3, #8]
   14480:	str	fp, [sl, #16]
   14484:	mov	r0, fp
   14488:	add	sp, sp, #4
   1448c:	ldrd	r4, [sp]
   14490:	ldrd	r6, [sp, #8]
   14494:	ldrd	r8, [sp, #16]
   14498:	ldrd	sl, [sp, #24]
   1449c:	add	sp, sp, #32
   144a0:	pop	{pc}		; (ldr pc, [sp], #4)
   144a4:	mov	sl, r2
   144a8:	b	143c8 <rb_patricia_lookup+0x1b8>
   144ac:	ldr	r3, [sl, #4]
   144b0:	cmp	r3, #0
   144b4:	movne	fp, sl
   144b8:	bne	14484 <rb_patricia_lookup+0x274>
   144bc:	mov	r0, r8
   144c0:	bl	13c84 <Ref_Prefix>
   144c4:	str	r0, [sl, #4]
   144c8:	mov	fp, sl
   144cc:	b	14484 <rb_patricia_lookup+0x274>
   144d0:	bl	4930 <rb_outofmemory@plt>
   144d4:	str	sl, [fp, #16]
   144d8:	ldr	r3, [sl]
   144dc:	ldr	r2, [r5, #4]
   144e0:	cmp	r3, r2
   144e4:	bcs	14500 <rb_patricia_lookup+0x2f0>
   144e8:	ldrb	r2, [r6, r3, lsr #3]
   144ec:	and	r3, r3, #7
   144f0:	mov	r1, #128	; 0x80
   144f4:	ands	r3, r2, r1, asr r3
   144f8:	strne	fp, [sl, #12]
   144fc:	bne	14484 <rb_patricia_lookup+0x274>
   14500:	str	fp, [sl, #8]
   14504:	b	14484 <rb_patricia_lookup+0x274>
   14508:	mov	r1, #24
   1450c:	mov	r0, #1
   14510:	bl	45a0 <calloc@plt>
   14514:	cmp	r0, #0
   14518:	beq	14598 <rb_patricia_lookup+0x388>
   1451c:	str	r4, [r0]
   14520:	mov	r3, #0
   14524:	str	r3, [r0, #4]
   14528:	ldr	r2, [sl, #16]
   1452c:	str	r2, [r0, #16]
   14530:	str	r3, [r0, #20]
   14534:	add	r8, r8, #2
   14538:	str	r8, [r5, #8]
   1453c:	ldr	r3, [r5, #4]
   14540:	cmp	r3, r4
   14544:	bls	14564 <rb_patricia_lookup+0x354>
   14548:	ldrb	r2, [r6, r4, lsr #3]
   1454c:	and	r3, r4, #7
   14550:	mov	r1, #128	; 0x80
   14554:	ands	r3, r2, r1, asr r3
   14558:	strne	fp, [r0, #12]
   1455c:	strne	sl, [r0, #8]
   14560:	bne	1456c <rb_patricia_lookup+0x35c>
   14564:	str	sl, [r0, #12]
   14568:	str	fp, [r0, #8]
   1456c:	str	r0, [fp, #16]
   14570:	ldr	r3, [sl, #16]
   14574:	cmp	r3, #0
   14578:	streq	r0, [r5]
   1457c:	beq	14590 <rb_patricia_lookup+0x380>
   14580:	ldr	r2, [r3, #12]
   14584:	cmp	r2, sl
   14588:	streq	r0, [r3, #12]
   1458c:	strne	r0, [r3, #8]
   14590:	str	r0, [sl, #16]
   14594:	b	14484 <rb_patricia_lookup+0x274>
   14598:	bl	4930 <rb_outofmemory@plt>
   1459c:	ldr	sl, [r2, #16]
   145a0:	cmp	sl, #0
   145a4:	moveq	sl, r2
   145a8:	bne	143b0 <rb_patricia_lookup+0x1a0>
   145ac:	b	143c8 <rb_patricia_lookup+0x1b8>

000145b0 <rb_patricia_remove>:
   145b0:	strd	r4, [sp, #-24]!	; 0xffffffe8
   145b4:	strd	r6, [sp, #8]
   145b8:	str	r8, [sp, #16]
   145bc:	str	lr, [sp, #20]
   145c0:	mov	r7, r0
   145c4:	mov	r4, r1
   145c8:	ldr	r5, [r1, #12]
   145cc:	cmp	r5, #0
   145d0:	beq	14600 <rb_patricia_remove+0x50>
   145d4:	ldr	r3, [r1, #8]
   145d8:	cmp	r3, #0
   145dc:	beq	1460c <rb_patricia_remove+0x5c>
   145e0:	ldr	r0, [r1, #4]
   145e4:	cmp	r0, #0
   145e8:	beq	145f0 <rb_patricia_remove+0x40>
   145ec:	bl	13afc <Deref_Prefix>
   145f0:	mov	r3, #0
   145f4:	str	r3, [r4, #4]
   145f8:	str	r3, [r4, #20]
   145fc:	b	1464c <rb_patricia_remove+0x9c>
   14600:	ldr	r5, [r1, #8]
   14604:	cmp	r5, #0
   14608:	beq	14660 <rb_patricia_remove+0xb0>
   1460c:	ldr	r6, [r4, #16]
   14610:	str	r6, [r5, #16]
   14614:	ldr	r0, [r4, #4]
   14618:	bl	13afc <Deref_Prefix>
   1461c:	mov	r0, r4
   14620:	bl	46a8 <free@plt>
   14624:	ldr	r3, [r7, #8]
   14628:	sub	r3, r3, #1
   1462c:	str	r3, [r7, #8]
   14630:	cmp	r6, #0
   14634:	streq	r5, [r7]
   14638:	beq	1464c <rb_patricia_remove+0x9c>
   1463c:	ldr	r3, [r6, #12]
   14640:	cmp	r3, r4
   14644:	streq	r5, [r6, #12]
   14648:	strne	r5, [r6, #8]
   1464c:	ldrd	r4, [sp]
   14650:	ldrd	r6, [sp, #8]
   14654:	ldr	r8, [sp, #16]
   14658:	add	sp, sp, #20
   1465c:	pop	{pc}		; (ldr pc, [sp], #4)
   14660:	ldr	r5, [r1, #16]
   14664:	ldr	r0, [r1, #4]
   14668:	bl	13afc <Deref_Prefix>
   1466c:	mov	r0, r4
   14670:	bl	46a8 <free@plt>
   14674:	ldr	r3, [r7, #8]
   14678:	sub	r3, r3, #1
   1467c:	str	r3, [r7, #8]
   14680:	cmp	r5, #0
   14684:	moveq	r3, #0
   14688:	streq	r3, [r7]
   1468c:	beq	1464c <rb_patricia_remove+0x9c>
   14690:	ldr	r3, [r5, #12]
   14694:	cmp	r3, r4
   14698:	movne	r2, #0
   1469c:	strne	r2, [r5, #8]
   146a0:	beq	146f0 <rb_patricia_remove+0x140>
   146a4:	ldr	r2, [r5, #4]
   146a8:	cmp	r2, #0
   146ac:	bne	1464c <rb_patricia_remove+0x9c>
   146b0:	ldr	r2, [r5, #16]
   146b4:	cmp	r2, #0
   146b8:	streq	r3, [r7]
   146bc:	beq	146d0 <rb_patricia_remove+0x120>
   146c0:	ldr	r1, [r2, #12]
   146c4:	cmp	r1, r5
   146c8:	streq	r3, [r2, #12]
   146cc:	strne	r3, [r2, #8]
   146d0:	ldr	r2, [r5, #16]
   146d4:	str	r2, [r3, #16]
   146d8:	mov	r0, r5
   146dc:	bl	46a8 <free@plt>
   146e0:	ldr	r3, [r7, #8]
   146e4:	sub	r3, r3, #1
   146e8:	str	r3, [r7, #8]
   146ec:	b	1464c <rb_patricia_remove+0x9c>
   146f0:	mov	r3, #0
   146f4:	str	r3, [r5, #12]
   146f8:	ldr	r3, [r5, #8]
   146fc:	b	146a4 <rb_patricia_remove+0xf4>

00014700 <make_and_lookup_ip>:
   14700:	strd	r4, [sp, #-16]!
   14704:	str	r6, [sp, #8]
   14708:	str	lr, [sp, #12]
   1470c:	mov	r5, r0
   14710:	ldrh	r0, [r1]
   14714:	cmp	r0, #10
   14718:	addeq	r1, r1, #8
   1471c:	addne	r1, r1, #4
   14720:	mov	r3, #0
   14724:	bl	13b98 <New_Prefix2>
   14728:	subs	r4, r0, #0
   1472c:	moveq	r5, r4
   14730:	beq	1474c <make_and_lookup_ip+0x4c>
   14734:	mov	r1, r4
   14738:	mov	r0, r5
   1473c:	bl	48a0 <rb_patricia_lookup@plt>
   14740:	mov	r5, r0
   14744:	mov	r0, r4
   14748:	bl	13afc <Deref_Prefix>
   1474c:	mov	r0, r5
   14750:	ldrd	r4, [sp]
   14754:	ldr	r6, [sp, #8]
   14758:	add	sp, sp, #12
   1475c:	pop	{pc}		; (ldr pc, [sp], #4)

00014760 <make_and_lookup>:
   14760:	strd	r4, [sp, #-16]!
   14764:	str	r6, [sp, #8]
   14768:	str	lr, [sp, #12]
   1476c:	mov	r5, r0
   14770:	mov	r6, r1
   14774:	mov	r0, #2
   14778:	bl	13ccc <ascii2prefix>
   1477c:	subs	r4, r0, #0
   14780:	beq	147b0 <make_and_lookup+0x50>
   14784:	mov	r1, r4
   14788:	mov	r0, r5
   1478c:	bl	48a0 <rb_patricia_lookup@plt>
   14790:	mov	r5, r0
   14794:	mov	r0, r4
   14798:	bl	13afc <Deref_Prefix>
   1479c:	mov	r0, r5
   147a0:	ldrd	r4, [sp]
   147a4:	ldr	r6, [sp, #8]
   147a8:	add	sp, sp, #12
   147ac:	pop	{pc}		; (ldr pc, [sp], #4)
   147b0:	mov	r1, r6
   147b4:	mov	r0, #10
   147b8:	bl	13ccc <ascii2prefix>
   147bc:	subs	r4, r0, #0
   147c0:	moveq	r5, r4
   147c4:	beq	1479c <make_and_lookup+0x3c>
   147c8:	mov	r1, r4
   147cc:	mov	r0, r5
   147d0:	bl	48a0 <rb_patricia_lookup@plt>
   147d4:	mov	r5, r0
   147d8:	b	14794 <make_and_lookup+0x34>

000147dc <rb_match_ip>:
   147dc:	strd	r4, [sp, #-16]!
   147e0:	str	r6, [sp, #8]
   147e4:	str	lr, [sp, #12]
   147e8:	mov	r5, r0
   147ec:	ldrh	r3, [r1]
   147f0:	cmp	r3, #10
   147f4:	addeq	r1, r1, #8
   147f8:	moveq	r0, #10
   147fc:	moveq	r2, #128	; 0x80
   14800:	beq	14810 <rb_match_ip+0x34>
   14804:	add	r1, r1, #4
   14808:	mov	r0, #2
   1480c:	mov	r2, #32
   14810:	mov	r3, #0
   14814:	bl	13b98 <New_Prefix2>
   14818:	subs	r4, r0, #0
   1481c:	beq	1483c <rb_match_ip+0x60>
   14820:	mov	r1, r4
   14824:	mov	r0, r5
   14828:	bl	4504 <rb_patricia_search_best@plt>
   1482c:	mov	r5, r0
   14830:	mov	r0, r4
   14834:	bl	13afc <Deref_Prefix>
   14838:	mov	r4, r5
   1483c:	mov	r0, r4
   14840:	ldrd	r4, [sp]
   14844:	ldr	r6, [sp, #8]
   14848:	add	sp, sp, #12
   1484c:	pop	{pc}		; (ldr pc, [sp], #4)

00014850 <rb_match_ip_exact>:
   14850:	strd	r4, [sp, #-16]!
   14854:	str	r6, [sp, #8]
   14858:	str	lr, [sp, #12]
   1485c:	mov	r5, r0
   14860:	ldrh	r3, [r1]
   14864:	cmp	r3, #10
   14868:	beq	148bc <rb_match_ip_exact+0x6c>
   1486c:	cmp	r2, #32
   14870:	movcs	r2, #32
   14874:	add	r1, r1, #4
   14878:	mov	r0, #2
   1487c:	mov	r3, #0
   14880:	bl	13b98 <New_Prefix2>
   14884:	subs	r4, r0, #0
   14888:	beq	148a8 <rb_match_ip_exact+0x58>
   1488c:	mov	r1, r4
   14890:	mov	r0, r5
   14894:	bl	4864 <rb_patricia_search_exact@plt>
   14898:	mov	r5, r0
   1489c:	mov	r0, r4
   148a0:	bl	13afc <Deref_Prefix>
   148a4:	mov	r4, r5
   148a8:	mov	r0, r4
   148ac:	ldrd	r4, [sp]
   148b0:	ldr	r6, [sp, #8]
   148b4:	add	sp, sp, #12
   148b8:	pop	{pc}		; (ldr pc, [sp], #4)
   148bc:	cmp	r2, #128	; 0x80
   148c0:	movcs	r2, #128	; 0x80
   148c4:	add	r1, r1, #8
   148c8:	mov	r0, #10
   148cc:	b	1487c <rb_match_ip_exact+0x2c>

000148d0 <rb_match_string>:
   148d0:	strd	r4, [sp, #-16]!
   148d4:	str	r6, [sp, #8]
   148d8:	str	lr, [sp, #12]
   148dc:	mov	r5, r0
   148e0:	mov	r6, r1
   148e4:	mov	r0, #2
   148e8:	bl	13ccc <ascii2prefix>
   148ec:	subs	r4, r0, #0
   148f0:	beq	14920 <rb_match_string+0x50>
   148f4:	mov	r1, r4
   148f8:	mov	r0, r5
   148fc:	bl	4504 <rb_patricia_search_best@plt>
   14900:	mov	r5, r0
   14904:	mov	r0, r4
   14908:	bl	13afc <Deref_Prefix>
   1490c:	mov	r0, r5
   14910:	ldrd	r4, [sp]
   14914:	ldr	r6, [sp, #8]
   14918:	add	sp, sp, #12
   1491c:	pop	{pc}		; (ldr pc, [sp], #4)
   14920:	mov	r1, r6
   14924:	mov	r0, #10
   14928:	bl	13ccc <ascii2prefix>
   1492c:	subs	r4, r0, #0
   14930:	moveq	r5, r4
   14934:	beq	1490c <rb_match_string+0x3c>
   14938:	mov	r1, r4
   1493c:	mov	r0, r5
   14940:	bl	4504 <rb_patricia_search_best@plt>
   14944:	mov	r5, r0
   14948:	mov	r0, r4
   1494c:	bl	13afc <Deref_Prefix>
   14950:	b	1490c <rb_match_string+0x3c>

00014954 <rb_match_exact_string>:
   14954:	strd	r4, [sp, #-16]!
   14958:	str	r6, [sp, #8]
   1495c:	str	lr, [sp, #12]
   14960:	mov	r5, r0
   14964:	mov	r6, r1
   14968:	mov	r0, #2
   1496c:	bl	13ccc <ascii2prefix>
   14970:	subs	r4, r0, #0
   14974:	beq	149a4 <rb_match_exact_string+0x50>
   14978:	mov	r1, r4
   1497c:	mov	r0, r5
   14980:	bl	4864 <rb_patricia_search_exact@plt>
   14984:	mov	r5, r0
   14988:	mov	r0, r4
   1498c:	bl	13afc <Deref_Prefix>
   14990:	mov	r0, r5
   14994:	ldrd	r4, [sp]
   14998:	ldr	r6, [sp, #8]
   1499c:	add	sp, sp, #12
   149a0:	pop	{pc}		; (ldr pc, [sp], #4)
   149a4:	mov	r1, r6
   149a8:	mov	r0, #10
   149ac:	bl	13ccc <ascii2prefix>
   149b0:	subs	r4, r0, #0
   149b4:	moveq	r5, r4
   149b8:	beq	14990 <rb_match_exact_string+0x3c>
   149bc:	mov	r1, r4
   149c0:	mov	r0, r5
   149c4:	bl	4864 <rb_patricia_search_exact@plt>
   149c8:	mov	r5, r0
   149cc:	mov	r0, r4
   149d0:	bl	13afc <Deref_Prefix>
   149d4:	b	14990 <rb_match_exact_string+0x3c>

000149d8 <rb_dictionary_retune>:
   149d8:	strd	r4, [sp, #-24]!	; 0xffffffe8
   149dc:	strd	r6, [sp, #8]
   149e0:	str	r8, [sp, #16]
   149e4:	str	lr, [sp, #20]
   149e8:	sub	sp, sp, #32
   149ec:	ldr	r4, [r0, #4]
   149f0:	cmp	r4, #0
   149f4:	beq	14b04 <rb_dictionary_retune+0x12c>
   149f8:	mov	r6, r1
   149fc:	mov	r5, r0
   14a00:	mov	r3, #0
   14a04:	str	r3, [sp, #8]
   14a08:	str	r3, [sp, #4]
   14a0c:	add	r8, sp, #4
   14a10:	mov	r7, r8
   14a14:	b	14a80 <rb_dictionary_retune+0xa8>
   14a18:	ldr	r3, [r4]
   14a1c:	cmp	r3, #0
   14a20:	beq	14ae0 <rb_dictionary_retune+0x108>
   14a24:	ldr	r2, [r5]
   14a28:	ldr	r1, [r3, #20]
   14a2c:	mov	r0, r6
   14a30:	blx	r2
   14a34:	cmp	r0, #0
   14a38:	blt	14a4c <rb_dictionary_retune+0x74>
   14a3c:	str	r4, [r8]
   14a40:	mov	r8, r4
   14a44:	ldr	r4, [r4]
   14a48:	b	14a80 <rb_dictionary_retune+0xa8>
   14a4c:	ldr	r3, [r4]
   14a50:	ldr	r2, [r3, #4]
   14a54:	str	r2, [r4]
   14a58:	str	r4, [r3, #4]
   14a5c:	ldr	r2, [r3]
   14a60:	cmp	r2, #0
   14a64:	beq	14b1c <rb_dictionary_retune+0x144>
   14a68:	mov	r4, r3
   14a6c:	b	14a3c <rb_dictionary_retune+0x64>
   14a70:	mov	r3, r4
   14a74:	str	r3, [r7, #4]
   14a78:	ldr	r4, [r3, #4]
   14a7c:	mov	r7, r3
   14a80:	ldr	r3, [r5]
   14a84:	ldr	r1, [r4, #20]
   14a88:	mov	r0, r6
   14a8c:	blx	r3
   14a90:	cmp	r0, #0
   14a94:	beq	14ae0 <rb_dictionary_retune+0x108>
   14a98:	blt	14a18 <rb_dictionary_retune+0x40>
   14a9c:	ldr	r3, [r4, #4]
   14aa0:	cmp	r3, #0
   14aa4:	beq	14ae0 <rb_dictionary_retune+0x108>
   14aa8:	ldr	r2, [r5]
   14aac:	ldr	r1, [r3, #20]
   14ab0:	mov	r0, r6
   14ab4:	blx	r2
   14ab8:	cmp	r0, #0
   14abc:	ble	14a70 <rb_dictionary_retune+0x98>
   14ac0:	ldr	r3, [r4, #4]
   14ac4:	ldr	r2, [r3]
   14ac8:	str	r2, [r4, #4]
   14acc:	str	r4, [r3]
   14ad0:	ldr	r2, [r3, #4]
   14ad4:	cmp	r2, #0
   14ad8:	bne	14a74 <rb_dictionary_retune+0x9c>
   14adc:	mov	r4, r3
   14ae0:	ldr	r3, [r4]
   14ae4:	str	r3, [r7, #4]
   14ae8:	ldr	r3, [r4, #4]
   14aec:	str	r3, [r8]
   14af0:	ldr	r3, [sp, #8]
   14af4:	str	r3, [r4]
   14af8:	ldr	r3, [sp, #4]
   14afc:	str	r3, [r4, #4]
   14b00:	str	r4, [r5, #4]
   14b04:	add	sp, sp, #32
   14b08:	ldrd	r4, [sp]
   14b0c:	ldrd	r6, [sp, #8]
   14b10:	ldr	r8, [sp, #16]
   14b14:	add	sp, sp, #20
   14b18:	pop	{pc}		; (ldr pc, [sp], #4)
   14b1c:	mov	r4, r3
   14b20:	b	14ae0 <rb_dictionary_retune+0x108>

00014b24 <stats_recurse>:
   14b24:	strd	r4, [sp, #-24]!	; 0xffffffe8
   14b28:	strd	r6, [sp, #8]
   14b2c:	str	r8, [sp, #16]
   14b30:	str	lr, [sp, #20]
   14b34:	ldr	r3, [r2]
   14b38:	cmp	r3, r1
   14b3c:	strlt	r1, [r2]
   14b40:	cmp	r0, #0
   14b44:	moveq	r7, r1
   14b48:	beq	14b90 <stats_recurse+0x6c>
   14b4c:	mov	r6, r2
   14b50:	mov	r4, r1
   14b54:	mov	r5, r0
   14b58:	ldr	r0, [r0]
   14b5c:	cmp	r0, #0
   14b60:	moveq	r7, r1
   14b64:	beq	14b74 <stats_recurse+0x50>
   14b68:	add	r1, r1, #1
   14b6c:	bl	14b24 <stats_recurse>
   14b70:	add	r7, r4, r0
   14b74:	ldr	r0, [r5, #4]
   14b78:	cmp	r0, #0
   14b7c:	beq	14b90 <stats_recurse+0x6c>
   14b80:	mov	r2, r6
   14b84:	add	r1, r4, #1
   14b88:	bl	14b24 <stats_recurse>
   14b8c:	add	r7, r7, r0
   14b90:	mov	r0, r7
   14b94:	ldrd	r4, [sp]
   14b98:	ldrd	r6, [sp, #8]
   14b9c:	ldr	r8, [sp, #16]
   14ba0:	add	sp, sp, #20
   14ba4:	pop	{pc}		; (ldr pc, [sp], #4)

00014ba8 <rb_dictionary_create>:
   14ba8:	strd	r4, [sp, #-16]!
   14bac:	str	r6, [sp, #8]
   14bb0:	str	lr, [sp, #12]
   14bb4:	mov	r5, r0
   14bb8:	mov	r6, r1
   14bbc:	mov	r1, #40	; 0x28
   14bc0:	mov	r0, #1
   14bc4:	bl	45a0 <calloc@plt>
   14bc8:	subs	r4, r0, #0
   14bcc:	beq	14c54 <rb_dictionary_create+0xac>
   14bd0:	str	r6, [r4]
   14bd4:	mov	r0, r5
   14bd8:	bl	4798 <strlen@plt>
   14bdc:	add	r0, r0, #1
   14be0:	bl	4954 <malloc@plt>
   14be4:	subs	r6, r0, #0
   14be8:	beq	14c58 <rb_dictionary_create+0xb0>
   14bec:	mov	r1, r5
   14bf0:	mov	r0, r6
   14bf4:	bl	4840 <strcpy@plt>
   14bf8:	str	r6, [r4, #20]
   14bfc:	add	r2, r4, #28
   14c00:	str	r4, [r4, #28]
   14c04:	mov	r3, #0
   14c08:	str	r3, [r4, #32]
   14c0c:	ldr	r3, [pc, #108]	; 14c80 <rb_dictionary_create+0xd8>
   14c10:	add	r3, pc, r3
   14c14:	ldr	r3, [r3]
   14c18:	str	r3, [r4, #36]	; 0x24
   14c1c:	cmp	r3, #0
   14c20:	strne	r2, [r3, #4]
   14c24:	beq	14c5c <rb_dictionary_create+0xb4>
   14c28:	ldr	r3, [pc, #84]	; 14c84 <rb_dictionary_create+0xdc>
   14c2c:	add	r3, pc, r3
   14c30:	str	r2, [r3]
   14c34:	ldr	r2, [r3, #8]
   14c38:	add	r2, r2, #1
   14c3c:	str	r2, [r3, #8]
   14c40:	mov	r0, r4
   14c44:	ldrd	r4, [sp]
   14c48:	ldr	r6, [sp, #8]
   14c4c:	add	sp, sp, #12
   14c50:	pop	{pc}		; (ldr pc, [sp], #4)
   14c54:	bl	4930 <rb_outofmemory@plt>
   14c58:	bl	4930 <rb_outofmemory@plt>
   14c5c:	ldr	r3, [pc, #36]	; 14c88 <rb_dictionary_create+0xe0>
   14c60:	add	r3, pc, r3
   14c64:	ldr	r3, [r3, #4]
   14c68:	cmp	r3, #0
   14c6c:	bne	14c28 <rb_dictionary_create+0x80>
   14c70:	ldr	r3, [pc, #20]	; 14c8c <rb_dictionary_create+0xe4>
   14c74:	add	r3, pc, r3
   14c78:	str	r2, [r3, #4]
   14c7c:	b	14c28 <rb_dictionary_create+0x80>
   14c80:	.word	0x00032314
   14c84:	.word	0x000322f8
   14c88:	.word	0x000322c4
   14c8c:	.word	0x000322b0

00014c90 <rb_dictionary_set_comparator_func>:
   14c90:	str	r1, [r0]
   14c94:	bx	lr

00014c98 <rb_dictionary_get_comparator_func>:
   14c98:	ldr	r0, [r0]
   14c9c:	bx	lr

00014ca0 <rb_dictionary_destroy>:
   14ca0:	strd	r4, [sp, #-24]!	; 0xffffffe8
   14ca4:	strd	r6, [sp, #8]
   14ca8:	str	r8, [sp, #16]
   14cac:	str	lr, [sp, #20]
   14cb0:	mov	r7, r0
   14cb4:	ldr	r5, [r0, #8]
   14cb8:	cmp	r5, #0
   14cbc:	beq	14cfc <rb_dictionary_destroy+0x5c>
   14cc0:	mov	r6, r1
   14cc4:	mov	r8, r2
   14cc8:	ldr	r4, [r5, #12]
   14ccc:	cmp	r6, #0
   14cd0:	beq	14ce0 <rb_dictionary_destroy+0x40>
   14cd4:	mov	r1, r8
   14cd8:	mov	r0, r5
   14cdc:	blx	r6
   14ce0:	mov	r0, r5
   14ce4:	bl	46a8 <free@plt>
   14ce8:	cmp	r4, #0
   14cec:	beq	14cfc <rb_dictionary_destroy+0x5c>
   14cf0:	mov	r5, r4
   14cf4:	ldr	r4, [r4, #12]
   14cf8:	b	14ccc <rb_dictionary_destroy+0x2c>
   14cfc:	ldr	r3, [r7, #36]	; 0x24
   14d00:	cmp	r3, #0
   14d04:	beq	14d70 <rb_dictionary_destroy+0xd0>
   14d08:	ldr	r2, [r7, #32]
   14d0c:	str	r2, [r3, #4]
   14d10:	ldr	r3, [r7, #32]
   14d14:	cmp	r3, #0
   14d18:	beq	14d84 <rb_dictionary_destroy+0xe4>
   14d1c:	ldr	r2, [r7, #36]	; 0x24
   14d20:	str	r2, [r3, #8]
   14d24:	mov	r3, #0
   14d28:	str	r3, [r7, #32]
   14d2c:	str	r3, [r7, #36]	; 0x24
   14d30:	ldr	r2, [pc, #96]	; 14d98 <rb_dictionary_destroy+0xf8>
   14d34:	add	r2, pc, r2
   14d38:	ldr	r3, [r2, #8]
   14d3c:	sub	r3, r3, #1
   14d40:	str	r3, [r2, #8]
   14d44:	ldr	r0, [r7, #20]
   14d48:	cmp	r0, #0
   14d4c:	beq	14d54 <rb_dictionary_destroy+0xb4>
   14d50:	bl	46a8 <free@plt>
   14d54:	mov	r0, r7
   14d58:	bl	46a8 <free@plt>
   14d5c:	ldrd	r4, [sp]
   14d60:	ldrd	r6, [sp, #8]
   14d64:	ldr	r8, [sp, #16]
   14d68:	add	sp, sp, #20
   14d6c:	pop	{pc}		; (ldr pc, [sp], #4)
   14d70:	ldr	r2, [r7, #32]
   14d74:	ldr	r3, [pc, #32]	; 14d9c <rb_dictionary_destroy+0xfc>
   14d78:	add	r3, pc, r3
   14d7c:	str	r2, [r3, #4]
   14d80:	b	14d10 <rb_dictionary_destroy+0x70>
   14d84:	ldr	r2, [r7, #36]	; 0x24
   14d88:	ldr	r3, [pc, #16]	; 14da0 <rb_dictionary_destroy+0x100>
   14d8c:	add	r3, pc, r3
   14d90:	str	r2, [r3]
   14d94:	b	14d24 <rb_dictionary_destroy+0x84>
   14d98:	.word	0x000321f0
   14d9c:	.word	0x000321ac
   14da0:	.word	0x00032198

00014da4 <rb_dictionary_foreach>:
   14da4:	ldr	r0, [r0, #8]
   14da8:	cmp	r0, #0
   14dac:	bxeq	lr
   14db0:	strd	r4, [sp, #-16]!
   14db4:	str	r6, [sp, #8]
   14db8:	str	lr, [sp, #12]
   14dbc:	mov	r6, r2
   14dc0:	mov	r5, r1
   14dc4:	ldr	r4, [r0, #12]
   14dc8:	cmp	r5, #0
   14dcc:	beq	14dd8 <rb_dictionary_foreach+0x34>
   14dd0:	mov	r1, r6
   14dd4:	blx	r5
   14dd8:	cmp	r4, #0
   14ddc:	beq	14dec <rb_dictionary_foreach+0x48>
   14de0:	mov	r0, r4
   14de4:	ldr	r4, [r4, #12]
   14de8:	b	14dc8 <rb_dictionary_foreach+0x24>
   14dec:	ldrd	r4, [sp]
   14df0:	ldr	r6, [sp, #8]
   14df4:	add	sp, sp, #12
   14df8:	pop	{pc}		; (ldr pc, [sp], #4)

00014dfc <rb_dictionary_search>:
   14dfc:	strd	r4, [sp, #-16]!
   14e00:	str	r6, [sp, #8]
   14e04:	str	lr, [sp, #12]
   14e08:	ldr	r0, [r0, #8]
   14e0c:	cmp	r0, #0
   14e10:	moveq	r4, r0
   14e14:	beq	14e54 <rb_dictionary_search+0x58>
   14e18:	mov	r6, r2
   14e1c:	mov	r5, r1
   14e20:	ldr	r4, [r0, #12]
   14e24:	b	14e38 <rb_dictionary_search+0x3c>
   14e28:	cmp	r4, #0
   14e2c:	beq	14e54 <rb_dictionary_search+0x58>
   14e30:	mov	r0, r4
   14e34:	ldr	r4, [r4, #12]
   14e38:	cmp	r5, #0
   14e3c:	beq	14e28 <rb_dictionary_search+0x2c>
   14e40:	mov	r1, r6
   14e44:	blx	r5
   14e48:	cmp	r0, #0
   14e4c:	beq	14e28 <rb_dictionary_search+0x2c>
   14e50:	mov	r4, r0
   14e54:	mov	r0, r4
   14e58:	ldrd	r4, [sp]
   14e5c:	ldr	r6, [sp, #8]
   14e60:	add	sp, sp, #12
   14e64:	pop	{pc}		; (ldr pc, [sp], #4)

00014e68 <rb_dictionary_foreach_cur>:
   14e68:	ldr	r0, [r1]
   14e6c:	cmp	r0, #0
   14e70:	ldrne	r0, [r0, #16]
   14e74:	bx	lr

00014e78 <rb_dictionary_foreach_next>:
   14e78:	ldr	r3, [r1]
   14e7c:	cmp	r3, #0
   14e80:	beq	14e9c <rb_dictionary_foreach_next+0x24>
   14e84:	ldr	r3, [r1, #4]
   14e88:	str	r3, [r1]
   14e8c:	cmp	r3, #0
   14e90:	ldrne	r3, [r3, #12]
   14e94:	strne	r3, [r1, #4]
   14e98:	bx	lr
   14e9c:	str	r4, [sp, #-8]!
   14ea0:	str	lr, [sp, #4]
   14ea4:	mov	r1, r0
   14ea8:	ldr	r0, [pc, #16]	; 14ec0 <rb_dictionary_foreach_next+0x48>
   14eac:	add	r0, pc, r0
   14eb0:	bl	48c4 <rb_lib_log@plt>
   14eb4:	ldr	r4, [sp]
   14eb8:	add	sp, sp, #4
   14ebc:	pop	{pc}		; (ldr pc, [sp], #4)
   14ec0:	.word	0x00003034

00014ec4 <rb_dictionary_foreach_start>:
   14ec4:	mov	r3, #0
   14ec8:	str	r3, [r1]
   14ecc:	str	r3, [r1, #4]
   14ed0:	ldr	r3, [r0, #8]
   14ed4:	str	r3, [r1]
   14ed8:	cmp	r3, #0
   14edc:	bxeq	lr
   14ee0:	str	r4, [sp, #-8]!
   14ee4:	str	lr, [sp, #4]
   14ee8:	str	r3, [r1, #4]
   14eec:	bl	4690 <rb_dictionary_foreach_next@plt>
   14ef0:	ldr	r4, [sp]
   14ef4:	add	sp, sp, #4
   14ef8:	pop	{pc}		; (ldr pc, [sp], #4)

00014efc <rb_dictionary_find>:
   14efc:	strd	r4, [sp, #-16]!
   14f00:	str	r6, [sp, #8]
   14f04:	str	lr, [sp, #12]
   14f08:	mov	r4, r0
   14f0c:	mov	r5, r1
   14f10:	bl	149d8 <rb_dictionary_retune>
   14f14:	ldr	r0, [r4, #4]
   14f18:	cmp	r0, #0
   14f1c:	beq	14f3c <rb_dictionary_find+0x40>
   14f20:	ldr	r3, [r4]
   14f24:	ldr	r1, [r0, #20]
   14f28:	mov	r0, r5
   14f2c:	blx	r3
   14f30:	cmp	r0, #0
   14f34:	ldreq	r0, [r4, #4]
   14f38:	movne	r0, #0
   14f3c:	ldrd	r4, [sp]
   14f40:	ldr	r6, [sp, #8]
   14f44:	add	sp, sp, #12
   14f48:	pop	{pc}		; (ldr pc, [sp], #4)

00014f4c <rb_dictionary_get_linear_index>:
   14f4c:	str	r4, [sp, #-8]!
   14f50:	str	lr, [sp, #4]
   14f54:	mov	r4, r0
   14f58:	bl	49d8 <rb_dictionary_find@plt>
   14f5c:	cmp	r0, #0
   14f60:	beq	14fb8 <rb_dictionary_get_linear_index+0x6c>
   14f64:	ldrb	r3, [r4, #24]
   14f68:	tst	r3, #1
   14f6c:	beq	14fb0 <rb_dictionary_get_linear_index+0x64>
   14f70:	ldr	r3, [r4, #8]
   14f74:	cmp	r3, #0
   14f78:	beq	14f94 <rb_dictionary_get_linear_index+0x48>
   14f7c:	mov	r2, #0
   14f80:	str	r2, [r3, #24]
   14f84:	ldr	r3, [r3, #12]
   14f88:	add	r2, r2, #1
   14f8c:	cmp	r3, #0
   14f90:	bne	14f80 <rb_dictionary_get_linear_index+0x34>
   14f94:	ldrb	r3, [r4, #24]
   14f98:	bfc	r3, #0, #1
   14f9c:	strb	r3, [r4, #24]
   14fa0:	ldr	r0, [r0, #24]
   14fa4:	ldr	r4, [sp]
   14fa8:	add	sp, sp, #4
   14fac:	pop	{pc}		; (ldr pc, [sp], #4)
   14fb0:	ldr	r0, [r0, #24]
   14fb4:	b	14fa4 <rb_dictionary_get_linear_index+0x58>
   14fb8:	mvn	r0, #0
   14fbc:	b	14fa4 <rb_dictionary_get_linear_index+0x58>

00014fc0 <rb_dictionary_add>:
   14fc0:	strd	r4, [sp, #-24]!	; 0xffffffe8
   14fc4:	strd	r6, [sp, #8]
   14fc8:	str	r8, [sp, #16]
   14fcc:	str	lr, [sp, #20]
   14fd0:	mov	r4, r0
   14fd4:	mov	r6, r1
   14fd8:	mov	r7, r2
   14fdc:	mov	r1, #28
   14fe0:	mov	r0, #1
   14fe4:	bl	45a0 <calloc@plt>
   14fe8:	subs	r5, r0, #0
   14fec:	beq	15094 <rb_dictionary_add+0xd4>
   14ff0:	str	r6, [r5, #20]
   14ff4:	str	r7, [r5, #16]
   14ff8:	ldrb	r3, [r4, #24]
   14ffc:	orr	r3, r3, #1
   15000:	strb	r3, [r4, #24]
   15004:	ldr	r3, [r4, #16]
   15008:	add	r3, r3, #1
   1500c:	str	r3, [r4, #16]
   15010:	ldr	r3, [r4, #4]
   15014:	cmp	r3, #0
   15018:	beq	15098 <rb_dictionary_add+0xd8>
   1501c:	mov	r1, r6
   15020:	mov	r0, r4
   15024:	bl	149d8 <rb_dictionary_retune>
   15028:	ldr	r2, [r4, #4]
   1502c:	ldr	r3, [r4]
   15030:	ldr	r1, [r2, #20]
   15034:	ldr	r0, [r5, #20]
   15038:	blx	r3
   1503c:	cmp	r0, #0
   15040:	blt	150cc <rb_dictionary_add+0x10c>
   15044:	cmp	r0, #0
   15048:	ble	15114 <rb_dictionary_add+0x154>
   1504c:	ldr	r3, [r4, #4]
   15050:	ldr	r2, [r3, #4]
   15054:	str	r2, [r5, #4]
   15058:	str	r3, [r5]
   1505c:	mov	r2, #0
   15060:	str	r2, [r3, #4]
   15064:	ldr	r3, [r4, #4]
   15068:	ldr	r3, [r3, #12]
   1506c:	cmp	r3, r2
   15070:	strne	r5, [r3, #8]
   15074:	streq	r5, [r4, #12]
   15078:	ldr	r3, [r4, #4]
   1507c:	ldr	r2, [r3, #12]
   15080:	str	r2, [r5, #12]
   15084:	str	r3, [r5, #8]
   15088:	str	r5, [r3, #12]
   1508c:	str	r5, [r4, #4]
   15090:	b	150b4 <rb_dictionary_add+0xf4>
   15094:	bl	4930 <rb_outofmemory@plt>
   15098:	str	r3, [r5, #4]
   1509c:	str	r3, [r5]
   150a0:	str	r3, [r5, #8]
   150a4:	str	r3, [r5, #12]
   150a8:	str	r5, [r4, #4]
   150ac:	str	r5, [r4, #12]
   150b0:	str	r5, [r4, #8]
   150b4:	mov	r0, r5
   150b8:	ldrd	r4, [sp]
   150bc:	ldrd	r6, [sp, #8]
   150c0:	ldr	r8, [sp, #16]
   150c4:	add	sp, sp, #20
   150c8:	pop	{pc}		; (ldr pc, [sp], #4)
   150cc:	ldr	r3, [r4, #4]
   150d0:	ldr	r2, [r3]
   150d4:	str	r2, [r5]
   150d8:	str	r3, [r5, #4]
   150dc:	mov	r2, #0
   150e0:	str	r2, [r3]
   150e4:	ldr	r3, [r4, #4]
   150e8:	ldr	r3, [r3, #8]
   150ec:	cmp	r3, r2
   150f0:	strne	r5, [r3, #12]
   150f4:	streq	r5, [r4, #8]
   150f8:	ldr	r3, [r4, #4]
   150fc:	ldr	r2, [r3, #8]
   15100:	str	r2, [r5, #8]
   15104:	str	r3, [r5, #12]
   15108:	str	r5, [r3, #8]
   1510c:	str	r5, [r4, #4]
   15110:	b	150b4 <rb_dictionary_add+0xf4>
   15114:	ldr	r3, [r4, #4]
   15118:	ldr	r2, [r5, #20]
   1511c:	str	r2, [r3, #20]
   15120:	ldr	r3, [r4, #4]
   15124:	ldr	r2, [r5, #16]
   15128:	str	r2, [r3, #16]
   1512c:	ldr	r3, [r4, #16]
   15130:	sub	r3, r3, #1
   15134:	str	r3, [r4, #16]
   15138:	mov	r0, r5
   1513c:	bl	46a8 <free@plt>
   15140:	ldr	r5, [r4, #4]
   15144:	b	150b4 <rb_dictionary_add+0xf4>

00015148 <rb_dictionary_delete>:
   15148:	strd	r4, [sp, #-16]!
   1514c:	str	r6, [sp, #8]
   15150:	str	lr, [sp, #12]
   15154:	mov	r4, r0
   15158:	bl	49d8 <rb_dictionary_find@plt>
   1515c:	cmp	r0, #0
   15160:	moveq	r5, r0
   15164:	beq	1524c <rb_dictionary_delete+0x104>
   15168:	ldr	r5, [r0, #16]
   1516c:	ldrb	r3, [r4, #24]
   15170:	orr	r3, r3, #1
   15174:	strb	r3, [r4, #24]
   15178:	ldr	r3, [r4, #4]
   1517c:	cmp	r3, #0
   15180:	beq	15248 <rb_dictionary_delete+0x100>
   15184:	ldr	r2, [r3]
   15188:	cmp	r2, #0
   1518c:	beq	151bc <rb_dictionary_delete+0x74>
   15190:	ldr	r1, [r3, #4]
   15194:	cmp	r1, #0
   15198:	streq	r2, [r4, #4]
   1519c:	beq	151fc <rb_dictionary_delete+0xb4>
   151a0:	ldr	ip, [r3, #12]
   151a4:	cmp	r1, ip
   151a8:	bne	151cc <rb_dictionary_delete+0x84>
   151ac:	str	ip, [r4, #4]
   151b0:	ldr	r2, [r3]
   151b4:	str	r2, [ip]
   151b8:	b	151fc <rb_dictionary_delete+0xb4>
   151bc:	ldr	r2, [r3, #4]
   151c0:	str	r2, [r4, #4]
   151c4:	b	151fc <rb_dictionary_delete+0xb4>
   151c8:	mov	r1, r2
   151cc:	ldr	r2, [r1]
   151d0:	cmp	ip, r2
   151d4:	cmpne	r2, #0
   151d8:	bne	151c8 <rb_dictionary_delete+0x80>
   151dc:	ldr	r2, [ip, #4]
   151e0:	str	r2, [r1]
   151e4:	str	ip, [r4, #4]
   151e8:	ldr	r2, [r3]
   151ec:	str	r2, [ip]
   151f0:	ldr	r2, [r4, #4]
   151f4:	ldr	r1, [r3, #4]
   151f8:	str	r1, [r2, #4]
   151fc:	ldr	r2, [r3, #8]
   15200:	cmp	r2, #0
   15204:	ldrne	r1, [r3, #12]
   15208:	strne	r1, [r2, #12]
   1520c:	ldr	r2, [r4, #8]
   15210:	cmp	r3, r2
   15214:	ldreq	r2, [r3, #12]
   15218:	streq	r2, [r4, #8]
   1521c:	ldr	r2, [r3, #12]
   15220:	cmp	r2, #0
   15224:	ldrne	r1, [r3, #8]
   15228:	strne	r1, [r2, #8]
   1522c:	ldr	r2, [r4, #12]
   15230:	cmp	r3, r2
   15234:	ldreq	r3, [r3, #8]
   15238:	streq	r3, [r4, #12]
   1523c:	ldr	r3, [r4, #16]
   15240:	sub	r3, r3, #1
   15244:	str	r3, [r4, #16]
   15248:	bl	46a8 <free@plt>
   1524c:	mov	r0, r5
   15250:	ldrd	r4, [sp]
   15254:	ldr	r6, [sp, #8]
   15258:	add	sp, sp, #12
   1525c:	pop	{pc}		; (ldr pc, [sp], #4)

00015260 <rb_dictionary_retrieve>:
   15260:	str	r4, [sp, #-8]!
   15264:	str	lr, [sp, #4]
   15268:	bl	49d8 <rb_dictionary_find@plt>
   1526c:	cmp	r0, #0
   15270:	ldrne	r0, [r0, #16]
   15274:	ldr	r4, [sp]
   15278:	add	sp, sp, #4
   1527c:	pop	{pc}		; (ldr pc, [sp], #4)

00015280 <rb_dictionary_size>:
   15280:	ldr	r0, [r0, #16]
   15284:	bx	lr

00015288 <rb_dictionary_stats>:
   15288:	strd	r4, [sp, #-16]!
   1528c:	str	r6, [sp, #8]
   15290:	str	lr, [sp, #12]
   15294:	sub	sp, sp, #288	; 0x120
   15298:	mov	r4, r0
   1529c:	mov	r5, r1
   152a0:	mov	r6, r2
   152a4:	ldr	r3, [r0, #16]
   152a8:	cmp	r3, #0
   152ac:	beq	15324 <rb_dictionary_stats+0x9c>
   152b0:	mov	r1, #0
   152b4:	str	r1, [sp, #28]
   152b8:	add	r2, sp, #28
   152bc:	ldr	r0, [r0, #4]
   152c0:	bl	14b24 <stats_recurse>
   152c4:	ldr	r3, [r4, #16]
   152c8:	ldr	r2, [sp, #28]
   152cc:	str	r2, [sp, #16]
   152d0:	udiv	r2, r0, r3
   152d4:	str	r2, [sp, #12]
   152d8:	str	r0, [sp, #8]
   152dc:	str	r3, [sp, #4]
   152e0:	ldr	r3, [pc, #124]	; 15364 <rb_dictionary_stats+0xdc>
   152e4:	add	r3, pc, r3
   152e8:	str	r3, [sp]
   152ec:	ldr	r3, [r4, #20]
   152f0:	ldr	r2, [pc, #112]	; 15368 <rb_dictionary_stats+0xe0>
   152f4:	add	r2, pc, r2
   152f8:	mov	r1, #256	; 0x100
   152fc:	add	r0, sp, #32
   15300:	bl	4b58 <snprintf@plt>
   15304:	mov	r1, r6
   15308:	add	r0, sp, #32
   1530c:	blx	r5
   15310:	add	sp, sp, #288	; 0x120
   15314:	ldrd	r4, [sp]
   15318:	ldr	r6, [sp, #8]
   1531c:	add	sp, sp, #12
   15320:	pop	{pc}		; (ldr pc, [sp], #4)
   15324:	ldr	r3, [pc, #64]	; 1536c <rb_dictionary_stats+0xe4>
   15328:	add	r3, pc, r3
   1532c:	str	r3, [sp, #16]
   15330:	str	r3, [sp, #12]
   15334:	str	r3, [sp, #8]
   15338:	str	r3, [sp, #4]
   1533c:	ldr	r3, [pc, #44]	; 15370 <rb_dictionary_stats+0xe8>
   15340:	add	r3, pc, r3
   15344:	str	r3, [sp]
   15348:	ldr	r3, [r0, #20]
   1534c:	ldr	r2, [pc, #32]	; 15374 <rb_dictionary_stats+0xec>
   15350:	add	r2, pc, r2
   15354:	mov	r1, #256	; 0x100
   15358:	add	r0, sp, #32
   1535c:	bl	4b58 <snprintf@plt>
   15360:	b	15304 <rb_dictionary_stats+0x7c>
   15364:	.word	0x00002c74
   15368:	.word	0x00002c40
   1536c:	.word	0x00001ba0
   15370:	.word	0x00002c18
   15374:	.word	0x00002c10

00015378 <rb_dictionary_stats_walk>:
   15378:	strd	r4, [sp, #-16]!
   1537c:	str	r6, [sp, #8]
   15380:	str	lr, [sp, #12]
   15384:	mov	r6, r0
   15388:	mov	r5, r1
   1538c:	ldr	r3, [pc, #56]	; 153cc <rb_dictionary_stats_walk+0x54>
   15390:	add	r3, pc, r3
   15394:	ldr	r4, [r3]
   15398:	cmp	r4, #0
   1539c:	beq	153bc <rb_dictionary_stats_walk+0x44>
   153a0:	mov	r2, r5
   153a4:	mov	r1, r6
   153a8:	ldr	r0, [r4]
   153ac:	bl	4948 <rb_dictionary_stats@plt>
   153b0:	ldr	r4, [r4, #8]
   153b4:	cmp	r4, #0
   153b8:	bne	153a0 <rb_dictionary_stats_walk+0x28>
   153bc:	ldrd	r4, [sp]
   153c0:	ldr	r6, [sp, #8]
   153c4:	add	sp, sp, #12
   153c8:	pop	{pc}		; (ldr pc, [sp], #4)
   153cc:	.word	0x00031b94

000153d0 <stats_recurse>:
   153d0:	strd	r4, [sp, #-24]!	; 0xffffffe8
   153d4:	strd	r6, [sp, #8]
   153d8:	str	r8, [sp, #16]
   153dc:	str	lr, [sp, #20]
   153e0:	ldr	r3, [r2]
   153e4:	cmp	r3, r1
   153e8:	strlt	r1, [r2]
   153ec:	ldr	r3, [r0]
   153f0:	cmn	r3, #1
   153f4:	moveq	r5, r1
   153f8:	beq	1543c <stats_recurse+0x6c>
   153fc:	mov	r8, r2
   15400:	mov	r4, r0
   15404:	add	r6, r0, #64	; 0x40
   15408:	mov	r5, #0
   1540c:	add	r7, r1, #1
   15410:	b	1541c <stats_recurse+0x4c>
   15414:	cmp	r4, r6
   15418:	beq	1543c <stats_recurse+0x6c>
   1541c:	ldr	r0, [r4, #4]!
   15420:	cmp	r0, #0
   15424:	beq	15414 <stats_recurse+0x44>
   15428:	mov	r2, r8
   1542c:	mov	r1, r7
   15430:	bl	153d0 <stats_recurse>
   15434:	add	r5, r5, r0
   15438:	b	15414 <stats_recurse+0x44>
   1543c:	mov	r0, r5
   15440:	ldrd	r4, [sp]
   15444:	ldrd	r6, [sp, #8]
   15448:	ldr	r8, [sp, #16]
   1544c:	add	sp, sp, #20
   15450:	pop	{pc}		; (ldr pc, [sp], #4)

00015454 <rb_radixtree_create>:
   15454:	strd	r4, [sp, #-24]!	; 0xffffffe8
   15458:	strd	r6, [sp, #8]
   1545c:	str	r8, [sp, #16]
   15460:	str	lr, [sp, #20]
   15464:	mov	r6, r0
   15468:	mov	r7, r1
   1546c:	ldr	r5, [pc, #204]	; 15540 <rb_radixtree_create+0xec>
   15470:	add	r5, pc, r5
   15474:	mov	r1, #28
   15478:	mov	r0, #1
   1547c:	bl	45a0 <calloc@plt>
   15480:	subs	r4, r0, #0
   15484:	beq	15514 <rb_radixtree_create+0xc0>
   15488:	str	r7, [r4]
   1548c:	mov	r0, r6
   15490:	bl	4798 <strlen@plt>
   15494:	add	r0, r0, #1
   15498:	bl	4954 <malloc@plt>
   1549c:	subs	r7, r0, #0
   154a0:	beq	15518 <rb_radixtree_create+0xc4>
   154a4:	mov	r1, r6
   154a8:	mov	r0, r7
   154ac:	bl	4840 <strcpy@plt>
   154b0:	str	r7, [r4, #12]
   154b4:	mov	r3, #0
   154b8:	str	r3, [r4, #4]
   154bc:	add	r2, r4, #16
   154c0:	str	r4, [r4, #16]
   154c4:	str	r3, [r4, #20]
   154c8:	ldr	r3, [pc, #116]	; 15544 <rb_radixtree_create+0xf0>
   154cc:	ldr	r3, [r5, r3]
   154d0:	ldr	r3, [r3]
   154d4:	str	r3, [r4, #24]
   154d8:	cmp	r3, #0
   154dc:	strne	r2, [r3, #4]
   154e0:	beq	1551c <rb_radixtree_create+0xc8>
   154e4:	ldr	r3, [pc, #88]	; 15544 <rb_radixtree_create+0xf0>
   154e8:	ldr	r3, [r5, r3]
   154ec:	str	r2, [r3]
   154f0:	ldr	r2, [r3, #8]
   154f4:	add	r2, r2, #1
   154f8:	str	r2, [r3, #8]
   154fc:	mov	r0, r4
   15500:	ldrd	r4, [sp]
   15504:	ldrd	r6, [sp, #8]
   15508:	ldr	r8, [sp, #16]
   1550c:	add	sp, sp, #20
   15510:	pop	{pc}		; (ldr pc, [sp], #4)
   15514:	bl	4930 <rb_outofmemory@plt>
   15518:	bl	4930 <rb_outofmemory@plt>
   1551c:	ldr	r3, [pc, #32]	; 15544 <rb_radixtree_create+0xf0>
   15520:	ldr	r3, [r5, r3]
   15524:	ldr	r3, [r3, #4]
   15528:	cmp	r3, #0
   1552c:	bne	154e4 <rb_radixtree_create+0x90>
   15530:	ldr	r3, [pc, #12]	; 15544 <rb_radixtree_create+0xf0>
   15534:	ldr	r3, [r5, r3]
   15538:	str	r2, [r3, #4]
   1553c:	b	154e4 <rb_radixtree_create+0x90>
   15540:	.word	0x00013b88
   15544:	.word	0x000003ec

00015548 <rb_radixtree_foreach>:
   15548:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1554c:	strd	r6, [sp, #8]
   15550:	str	r8, [sp, #16]
   15554:	str	lr, [sp, #20]
   15558:	ldr	r5, [r0, #4]
   1555c:	cmp	r5, #0
   15560:	beq	15620 <rb_radixtree_foreach+0xd8>
   15564:	mov	r7, r2
   15568:	mov	r6, r1
   1556c:	ldr	r3, [r5]
   15570:	cmn	r3, #1
   15574:	movne	r4, #0
   15578:	bne	155a4 <rb_radixtree_foreach+0x5c>
   1557c:	cmp	r1, #0
   15580:	beq	15620 <rb_radixtree_foreach+0xd8>
   15584:	ldr	r1, [r5, #4]
   15588:	ldr	r0, [r5, #8]
   1558c:	blx	r6
   15590:	b	15620 <rb_radixtree_foreach+0xd8>
   15594:	mov	r3, r5
   15598:	cmp	r3, #0
   1559c:	beq	15620 <rb_radixtree_foreach+0xd8>
   155a0:	mov	r5, r3
   155a4:	add	r0, r5, r4, lsl #2
   155a8:	add	r4, r4, #1
   155ac:	ldr	r3, [r0, #4]!
   155b0:	cmp	r4, #15
   155b4:	cmple	r3, #0
   155b8:	beq	155a8 <rb_radixtree_foreach+0x60>
   155bc:	cmp	r3, #0
   155c0:	beq	155ec <rb_radixtree_foreach+0xa4>
   155c4:	ldr	r0, [r3]
   155c8:	cmn	r0, #1
   155cc:	movne	r4, #0
   155d0:	bne	155a0 <rb_radixtree_foreach+0x58>
   155d4:	cmp	r6, #0
   155d8:	beq	155ec <rb_radixtree_foreach+0xa4>
   155dc:	mov	r2, r7
   155e0:	ldr	r1, [r3, #4]
   155e4:	ldr	r0, [r3, #8]
   155e8:	blx	r6
   155ec:	cmp	r4, #15
   155f0:	ble	15594 <rb_radixtree_foreach+0x4c>
   155f4:	ldrb	r4, [r5, #72]	; 0x48
   155f8:	ldr	r3, [r5, #68]	; 0x44
   155fc:	cmp	r3, #0
   15600:	beq	15620 <rb_radixtree_foreach+0xd8>
   15604:	add	r4, r4, #1
   15608:	cmp	r4, #15
   1560c:	ble	15598 <rb_radixtree_foreach+0x50>
   15610:	ldrb	r4, [r3, #72]	; 0x48
   15614:	ldr	r3, [r3, #68]	; 0x44
   15618:	cmp	r3, #0
   1561c:	bne	15604 <rb_radixtree_foreach+0xbc>
   15620:	ldrd	r4, [sp]
   15624:	ldrd	r6, [sp, #8]
   15628:	ldr	r8, [sp, #16]
   1562c:	add	sp, sp, #20
   15630:	pop	{pc}		; (ldr pc, [sp], #4)

00015634 <rb_radixtree_search>:
   15634:	strd	r4, [sp, #-24]!	; 0xffffffe8
   15638:	strd	r6, [sp, #8]
   1563c:	str	r8, [sp, #16]
   15640:	str	lr, [sp, #20]
   15644:	ldr	r5, [r0, #4]
   15648:	cmp	r5, #0
   1564c:	beq	15720 <rb_radixtree_search+0xec>
   15650:	mov	r7, r2
   15654:	mov	r6, r1
   15658:	ldr	r3, [r5]
   1565c:	cmn	r3, #1
   15660:	movne	r4, #0
   15664:	bne	156b8 <rb_radixtree_search+0x84>
   15668:	cmp	r1, #0
   1566c:	moveq	r0, #0
   15670:	beq	1570c <rb_radixtree_search+0xd8>
   15674:	ldr	r1, [r5, #4]
   15678:	ldr	r0, [r5, #8]
   1567c:	blx	r6
   15680:	b	1570c <rb_radixtree_search+0xd8>
   15684:	cmp	r4, #15
   15688:	ble	156b8 <rb_radixtree_search+0x84>
   1568c:	ldrb	r4, [r5, #72]	; 0x48
   15690:	ldr	r5, [r5, #68]	; 0x44
   15694:	cmp	r5, #0
   15698:	beq	156b8 <rb_radixtree_search+0x84>
   1569c:	add	r4, r4, #1
   156a0:	cmp	r4, #15
   156a4:	ble	156b8 <rb_radixtree_search+0x84>
   156a8:	ldrb	r4, [r5, #72]	; 0x48
   156ac:	ldr	r5, [r5, #68]	; 0x44
   156b0:	cmp	r5, #0
   156b4:	bne	1569c <rb_radixtree_search+0x68>
   156b8:	add	r0, r5, r4, lsl #2
   156bc:	add	r4, r4, #1
   156c0:	ldr	r3, [r0, #4]!
   156c4:	cmp	r4, #15
   156c8:	cmple	r3, #0
   156cc:	beq	156bc <rb_radixtree_search+0x88>
   156d0:	cmp	r3, #0
   156d4:	beq	15684 <rb_radixtree_search+0x50>
   156d8:	ldr	r0, [r3]
   156dc:	cmn	r0, #1
   156e0:	movne	r5, r3
   156e4:	movne	r4, #0
   156e8:	bne	156b8 <rb_radixtree_search+0x84>
   156ec:	cmp	r6, #0
   156f0:	beq	15684 <rb_radixtree_search+0x50>
   156f4:	mov	r2, r7
   156f8:	ldr	r1, [r3, #4]
   156fc:	ldr	r0, [r3, #8]
   15700:	blx	r6
   15704:	cmp	r0, #0
   15708:	beq	15684 <rb_radixtree_search+0x50>
   1570c:	ldrd	r4, [sp]
   15710:	ldrd	r6, [sp, #8]
   15714:	ldr	r8, [sp, #16]
   15718:	add	sp, sp, #20
   1571c:	pop	{pc}		; (ldr pc, [sp], #4)
   15720:	mov	r0, r5
   15724:	b	1570c <rb_radixtree_search+0xd8>

00015728 <rb_radixtree_foreach_cur>:
   15728:	cmp	r0, #0
   1572c:	beq	1573c <rb_radixtree_foreach_cur+0x14>
   15730:	ldr	r0, [r1, #8]
   15734:	cmp	r0, #0
   15738:	ldrne	r0, [r0, #4]
   1573c:	bx	lr

00015740 <rb_radixtree_foreach_next>:
   15740:	cmp	r0, #0
   15744:	bxeq	lr
   15748:	ldr	r3, [r1, #8]
   1574c:	cmp	r3, #0
   15750:	bxeq	lr
   15754:	strd	r4, [sp, #-16]!
   15758:	str	r6, [sp, #8]
   1575c:	str	lr, [sp, #12]
   15760:	ldr	lr, [r1, #12]
   15764:	str	lr, [r1, #8]
   15768:	cmp	lr, #0
   1576c:	beq	15838 <rb_radixtree_foreach_next+0xf8>
   15770:	ldr	r0, [lr, #12]
   15774:	ldrb	r3, [lr, #16]
   15778:	mov	ip, #0
   1577c:	b	157c4 <rb_radixtree_foreach_next+0x84>
   15780:	cmp	lr, r4
   15784:	bne	15804 <rb_radixtree_foreach_next+0xc4>
   15788:	cmp	r3, #15
   1578c:	movle	r4, r0
   15790:	ble	157fc <rb_radixtree_foreach_next+0xbc>
   15794:	ldrb	r3, [r0, #72]	; 0x48
   15798:	ldr	r4, [r0, #68]	; 0x44
   1579c:	cmp	r4, #0
   157a0:	beq	157c0 <rb_radixtree_foreach_next+0x80>
   157a4:	add	r3, r3, #1
   157a8:	cmp	r3, #15
   157ac:	ble	15828 <rb_radixtree_foreach_next+0xe8>
   157b0:	ldrb	r3, [r4, #72]	; 0x48
   157b4:	ldr	r4, [r4, #68]	; 0x44
   157b8:	cmp	r4, #0
   157bc:	bne	157a4 <rb_radixtree_foreach_next+0x64>
   157c0:	mov	r0, ip
   157c4:	cmp	r0, #0
   157c8:	beq	15830 <rb_radixtree_foreach_next+0xf0>
   157cc:	add	r2, r0, r3, lsl #2
   157d0:	add	r3, r3, #1
   157d4:	ldr	r4, [r2, #4]!
   157d8:	cmp	r3, #15
   157dc:	cmple	r4, #0
   157e0:	beq	157d0 <rb_radixtree_foreach_next+0x90>
   157e4:	cmp	r4, #0
   157e8:	beq	15788 <rb_radixtree_foreach_next+0x48>
   157ec:	ldr	r2, [r4]
   157f0:	cmn	r2, #1
   157f4:	movne	r3, #0
   157f8:	beq	15780 <rb_radixtree_foreach_next+0x40>
   157fc:	mov	r0, r4
   15800:	b	157cc <rb_radixtree_foreach_next+0x8c>
   15804:	mov	r5, r1
   15808:	ldr	r1, [lr, #8]
   1580c:	ldr	r0, [r4, #8]
   15810:	bl	4c84 <strcmp@plt>
   15814:	cmp	r0, #0
   15818:	movlt	r3, #0
   1581c:	strlt	r3, [r5, #12]
   15820:	strge	r4, [r5, #12]
   15824:	b	15838 <rb_radixtree_foreach_next+0xf8>
   15828:	cmp	r4, #0
   1582c:	bne	157fc <rb_radixtree_foreach_next+0xbc>
   15830:	mov	r3, #0
   15834:	str	r3, [r1, #12]
   15838:	ldrd	r4, [sp]
   1583c:	ldr	r6, [sp, #8]
   15840:	add	sp, sp, #12
   15844:	pop	{pc}		; (ldr pc, [sp], #4)

00015848 <rb_radixtree_foreach_start>:
   15848:	cmp	r0, #0
   1584c:	bxeq	lr
   15850:	ldr	r3, [r0, #4]
   15854:	cmp	r3, #0
   15858:	beq	158bc <rb_radixtree_foreach_start+0x74>
   1585c:	str	r4, [sp, #-8]!
   15860:	str	lr, [sp, #4]
   15864:	b	1586c <rb_radixtree_foreach_start+0x24>
   15868:	mov	r3, r2
   1586c:	mov	ip, r3
   15870:	ldr	r4, [ip], #64	; 0x40
   15874:	cmn	r4, #1
   15878:	beq	158a4 <rb_radixtree_foreach_start+0x5c>
   1587c:	ldr	r2, [r3, #4]
   15880:	cmp	r2, #0
   15884:	bne	15868 <rb_radixtree_foreach_start+0x20>
   15888:	add	lr, r3, #4
   1588c:	ldr	r2, [lr, #4]!
   15890:	cmp	r2, #0
   15894:	bne	15868 <rb_radixtree_foreach_start+0x20>
   15898:	cmp	lr, ip
   1589c:	bne	1588c <rb_radixtree_foreach_start+0x44>
   158a0:	b	15874 <rb_radixtree_foreach_start+0x2c>
   158a4:	str	r3, [r1, #12]
   158a8:	str	r3, [r1, #8]
   158ac:	bl	43fc <rb_radixtree_foreach_next@plt>
   158b0:	ldr	r4, [sp]
   158b4:	add	sp, sp, #4
   158b8:	pop	{pc}		; (ldr pc, [sp], #4)
   158bc:	mov	r3, #0
   158c0:	str	r3, [r1, #12]
   158c4:	str	r3, [r1, #8]
   158c8:	bx	lr

000158cc <rb_radixtree_elem_find>:
   158cc:	strd	r4, [sp, #-28]!	; 0xffffffe4
   158d0:	strd	r6, [sp, #8]
   158d4:	strd	r8, [sp, #16]
   158d8:	str	lr, [sp, #24]
   158dc:	sub	sp, sp, #260	; 0x104
   158e0:	mov	r8, r0
   158e4:	mov	r5, r1
   158e8:	mov	r6, r2
   158ec:	mov	r0, r1
   158f0:	bl	4798 <strlen@plt>
   158f4:	mov	r4, r0
   158f8:	ldr	r9, [r8]
   158fc:	cmp	r9, #0
   15900:	beq	15968 <rb_radixtree_elem_find+0x9c>
   15904:	cmp	r0, #255	; 0xff
   15908:	ble	15948 <rb_radixtree_elem_find+0x7c>
   1590c:	add	r0, r0, #1
   15910:	bl	4954 <malloc@plt>
   15914:	subs	r7, r0, #0
   15918:	beq	15944 <rb_radixtree_elem_find+0x78>
   1591c:	mov	r1, r5
   15920:	mov	r0, r7
   15924:	bl	4840 <strcpy@plt>
   15928:	mov	r0, r7
   1592c:	blx	r9
   15930:	ldr	r8, [r8, #4]
   15934:	cmp	r8, #0
   15938:	movne	r5, r7
   1593c:	bne	15978 <rb_radixtree_elem_find+0xac>
   15940:	b	15a0c <rb_radixtree_elem_find+0x140>
   15944:	bl	4930 <rb_outofmemory@plt>
   15948:	mov	r2, #256	; 0x100
   1594c:	mov	r1, r5
   15950:	mov	r5, sp
   15954:	mov	r0, r5
   15958:	bl	4654 <rb_strlcpy@plt>
   1595c:	ldr	r3, [r8]
   15960:	mov	r0, r5
   15964:	blx	r3
   15968:	ldr	r8, [r8, #4]
   1596c:	cmp	r8, #0
   15970:	movne	r7, #0
   15974:	beq	15a14 <rb_radixtree_elem_find+0x148>
   15978:	ldr	r2, [r8]
   1597c:	cmn	r2, #1
   15980:	beq	159d8 <rb_radixtree_elem_find+0x10c>
   15984:	mov	r1, #0
   15988:	b	159a8 <rb_radixtree_elem_find+0xdc>
   1598c:	add	r3, r8, r3, lsl #2
   15990:	ldr	r8, [r3, #4]
   15994:	cmp	r8, #0
   15998:	beq	15a04 <rb_radixtree_elem_find+0x138>
   1599c:	ldr	r2, [r8]
   159a0:	cmn	r2, #1
   159a4:	beq	159d8 <rb_radixtree_elem_find+0x10c>
   159a8:	add	r3, r2, r2, lsr #31
   159ac:	cmp	r4, r3, asr #1
   159b0:	movle	r3, r1
   159b4:	ble	1598c <rb_radixtree_elem_find+0xc0>
   159b8:	ldrb	r3, [r5, r3, asr #1]
   159bc:	and	r2, r2, #1
   159c0:	cmp	r2, #0
   159c4:	movne	r2, #0
   159c8:	moveq	r2, #4
   159cc:	asr	r3, r3, r2
   159d0:	and	r3, r3, #15
   159d4:	b	1598c <rb_radixtree_elem_find+0xc0>
   159d8:	clz	r6, r6
   159dc:	lsr	r6, r6, #5
   159e0:	cmp	r8, #0
   159e4:	moveq	r6, #0
   159e8:	cmp	r6, #0
   159ec:	beq	15a04 <rb_radixtree_elem_find+0x138>
   159f0:	mov	r1, r5
   159f4:	ldr	r0, [r8, #8]
   159f8:	bl	4c84 <strcmp@plt>
   159fc:	cmp	r0, #0
   15a00:	movne	r8, #0
   15a04:	cmp	r7, #0
   15a08:	beq	15a14 <rb_radixtree_elem_find+0x148>
   15a0c:	mov	r0, r7
   15a10:	bl	46a8 <free@plt>
   15a14:	mov	r0, r8
   15a18:	add	sp, sp, #260	; 0x104
   15a1c:	ldrd	r4, [sp]
   15a20:	ldrd	r6, [sp, #8]
   15a24:	ldrd	r8, [sp, #16]
   15a28:	add	sp, sp, #24
   15a2c:	pop	{pc}		; (ldr pc, [sp], #4)

00015a30 <rb_radixtree_foreach_start_from>:
   15a30:	strd	r4, [sp, #-16]!
   15a34:	str	r6, [sp, #8]
   15a38:	str	lr, [sp, #12]
   15a3c:	mov	r5, r0
   15a40:	mov	r4, r1
   15a44:	subs	r1, r2, #0
   15a48:	beq	15a7c <rb_radixtree_foreach_start_from+0x4c>
   15a4c:	mov	r3, #0
   15a50:	str	r3, [r4, #8]
   15a54:	mov	r2, #1
   15a58:	bl	4b1c <rb_radixtree_elem_find@plt>
   15a5c:	str	r0, [r4, #12]
   15a60:	mov	r1, r4
   15a64:	mov	r0, r5
   15a68:	bl	43fc <rb_radixtree_foreach_next@plt>
   15a6c:	ldrd	r4, [sp]
   15a70:	ldr	r6, [sp, #8]
   15a74:	add	sp, sp, #12
   15a78:	pop	{pc}		; (ldr pc, [sp], #4)
   15a7c:	mov	r1, r4
   15a80:	bl	43c0 <rb_radixtree_foreach_start@plt>
   15a84:	b	15a6c <rb_radixtree_foreach_start_from+0x3c>

00015a88 <rb_radixtree_elem_add>:
   15a88:	strd	r4, [sp, #-36]!	; 0xffffffdc
   15a8c:	strd	r6, [sp, #8]
   15a90:	strd	r8, [sp, #16]
   15a94:	strd	sl, [sp, #24]
   15a98:	str	lr, [sp, #32]
   15a9c:	sub	sp, sp, #20
   15aa0:	str	r0, [sp, #4]
   15aa4:	mov	r4, r1
   15aa8:	str	r2, [sp, #8]
   15aac:	mov	r0, r1
   15ab0:	bl	4798 <strlen@plt>
   15ab4:	mov	r6, r0
   15ab8:	add	r0, r0, #1
   15abc:	bl	4954 <malloc@plt>
   15ac0:	subs	r9, r0, #0
   15ac4:	beq	15b14 <rb_radixtree_elem_add+0x8c>
   15ac8:	mov	r1, r4
   15acc:	mov	r0, r9
   15ad0:	bl	4840 <strcpy@plt>
   15ad4:	ldr	r3, [sp, #4]
   15ad8:	ldr	r3, [r3]
   15adc:	cmp	r3, #0
   15ae0:	beq	15aec <rb_radixtree_elem_add+0x64>
   15ae4:	mov	r0, r9
   15ae8:	blx	r3
   15aec:	ldr	r3, [sp, #4]
   15af0:	ldr	r4, [r3, #4]
   15af4:	str	r4, [sp, #12]
   15af8:	cmp	r4, #0
   15afc:	beq	15e30 <rb_radixtree_elem_add+0x3a8>
   15b00:	ldr	r3, [r4]
   15b04:	cmn	r3, #1
   15b08:	beq	15dfc <rb_radixtree_elem_add+0x374>
   15b0c:	mov	r1, #0
   15b10:	b	15b38 <rb_radixtree_elem_add+0xb0>
   15b14:	bl	4930 <rb_outofmemory@plt>
   15b18:	add	r3, r4, r7, lsl #2
   15b1c:	ldr	r5, [r3, #4]
   15b20:	cmp	r5, #0
   15b24:	beq	15bb4 <rb_radixtree_elem_add+0x12c>
   15b28:	ldr	r3, [r5]
   15b2c:	cmn	r3, #1
   15b30:	beq	15e08 <rb_radixtree_elem_add+0x380>
   15b34:	mov	r4, r5
   15b38:	add	r2, r3, r3, lsr #31
   15b3c:	cmp	r6, r2, asr #1
   15b40:	movle	r7, r1
   15b44:	ble	15b18 <rb_radixtree_elem_add+0x90>
   15b48:	ldrb	r7, [r9, r2, asr #1]
   15b4c:	and	r3, r3, #1
   15b50:	cmp	r3, #0
   15b54:	movne	r3, #0
   15b58:	moveq	r3, #4
   15b5c:	asr	r7, r7, r3
   15b60:	and	r7, r7, #15
   15b64:	b	15b18 <rb_radixtree_elem_add+0x90>
   15b68:	mov	r0, r9
   15b6c:	bl	46a8 <free@plt>
   15b70:	mov	r0, #0
   15b74:	b	15c9c <rb_radixtree_elem_add+0x214>
   15b78:	mov	r5, r2
   15b7c:	mov	r1, r5
   15b80:	ldr	r0, [r1], #64	; 0x40
   15b84:	cmn	r0, #1
   15b88:	beq	15cb8 <rb_radixtree_elem_add+0x230>
   15b8c:	ldr	r2, [r5, #4]
   15b90:	cmp	r2, #0
   15b94:	bne	15b78 <rb_radixtree_elem_add+0xf0>
   15b98:	add	r3, r5, #4
   15b9c:	ldr	r2, [r3, #4]!
   15ba0:	cmp	r2, #0
   15ba4:	bne	15b78 <rb_radixtree_elem_add+0xf0>
   15ba8:	cmp	r3, r1
   15bac:	bne	15b9c <rb_radixtree_elem_add+0x114>
   15bb0:	b	15b84 <rb_radixtree_elem_add+0xfc>
   15bb4:	mov	r5, r4
   15bb8:	b	15b7c <rb_radixtree_elem_add+0xf4>
   15bbc:	bl	4930 <rb_outofmemory@plt>
   15bc0:	add	r6, r6, #1
   15bc4:	add	r2, r6, r6, lsr #31
   15bc8:	asr	sl, r2, #1
   15bcc:	add	fp, r9, sl
   15bd0:	ldrb	r3, [r9, r2, asr #1]
   15bd4:	and	ip, r6, #1
   15bd8:	cmp	ip, #0
   15bdc:	movne	r8, #0
   15be0:	moveq	r8, #4
   15be4:	ldrb	r2, [r1, r2, asr #1]
   15be8:	asr	r3, r3, r8
   15bec:	eor	r3, r3, r2, asr r8
   15bf0:	tst	r3, #15
   15bf4:	beq	15bc0 <rb_radixtree_elem_add+0x138>
   15bf8:	cmp	r0, #0
   15bfc:	beq	15cc0 <rb_radixtree_elem_add+0x238>
   15c00:	ldr	r3, [r4]
   15c04:	cmp	r6, r3
   15c08:	bge	15c28 <rb_radixtree_elem_add+0x1a0>
   15c0c:	ldrb	r7, [r4, #72]	; 0x48
   15c10:	ldr	r4, [r4, #68]	; 0x44
   15c14:	cmp	r4, #0
   15c18:	beq	15cc0 <rb_radixtree_elem_add+0x238>
   15c1c:	ldr	r3, [r4]
   15c20:	cmp	r3, r6
   15c24:	bgt	15c0c <rb_radixtree_elem_add+0x184>
   15c28:	ldr	r3, [r4]
   15c2c:	cmp	r3, r6
   15c30:	blt	15cc0 <rb_radixtree_elem_add+0x238>
   15c34:	ldrb	r3, [fp]
   15c38:	asr	r8, r3, r8
   15c3c:	and	r8, r8, #15
   15c40:	mov	r1, #20
   15c44:	mov	r0, #1
   15c48:	bl	45a0 <calloc@plt>
   15c4c:	cmp	r0, #0
   15c50:	beq	15df8 <rb_radixtree_elem_add+0x370>
   15c54:	add	r3, r4, r8, lsl #2
   15c58:	str	r0, [r3, #4]
   15c5c:	mvn	r2, #0
   15c60:	str	r2, [r0]
   15c64:	ldr	r2, [r3, #4]
   15c68:	ldr	r1, [sp, #8]
   15c6c:	str	r1, [r2, #4]
   15c70:	ldr	r2, [r3, #4]
   15c74:	str	r9, [r2, #8]
   15c78:	ldr	r2, [r3, #4]
   15c7c:	str	r4, [r2, #12]
   15c80:	ldr	r2, [r3, #4]
   15c84:	strb	r8, [r2, #16]
   15c88:	ldr	r1, [sp, #4]
   15c8c:	ldr	r2, [r1, #8]
   15c90:	add	r2, r2, #1
   15c94:	str	r2, [r1, #8]
   15c98:	ldr	r0, [r3, #4]
   15c9c:	add	sp, sp, #20
   15ca0:	ldrd	r4, [sp]
   15ca4:	ldrd	r6, [sp, #8]
   15ca8:	ldrd	r8, [sp, #16]
   15cac:	ldrd	sl, [sp, #24]
   15cb0:	add	sp, sp, #32
   15cb4:	pop	{pc}		; (ldr pc, [sp], #4)
   15cb8:	mov	r0, #1
   15cbc:	b	15e24 <rb_radixtree_elem_add+0x39c>
   15cc0:	mov	r1, #76	; 0x4c
   15cc4:	mov	r0, #1
   15cc8:	bl	45a0 <calloc@plt>
   15ccc:	cmp	r0, #0
   15cd0:	beq	15d54 <rb_radixtree_elem_add+0x2cc>
   15cd4:	str	r6, [r0]
   15cd8:	str	r4, [r0, #68]	; 0x44
   15cdc:	strb	r7, [r0, #72]	; 0x48
   15ce0:	mov	r3, r0
   15ce4:	add	r1, r0, #64	; 0x40
   15ce8:	mov	r2, #0
   15cec:	str	r2, [r3, #4]!
   15cf0:	cmp	r3, r1
   15cf4:	bne	15cec <rb_radixtree_elem_add+0x264>
   15cf8:	cmp	r4, #0
   15cfc:	beq	15d58 <rb_radixtree_elem_add+0x2d0>
   15d00:	add	r4, r4, r7, lsl #2
   15d04:	ldr	r2, [r4, #4]
   15d08:	ldr	r3, [r5, #8]
   15d0c:	ldrb	r3, [r3, sl]
   15d10:	asr	r3, r3, r8
   15d14:	and	r3, r3, #15
   15d18:	add	r3, r0, r3, lsl #2
   15d1c:	str	r2, [r3, #4]
   15d20:	ldr	r3, [r2]
   15d24:	cmn	r3, #1
   15d28:	beq	15dd8 <rb_radixtree_elem_add+0x350>
   15d2c:	str	r0, [r2, #68]	; 0x44
   15d30:	ldr	r2, [r4, #4]
   15d34:	ldr	r3, [r5, #8]
   15d38:	ldrb	r3, [r3, sl]
   15d3c:	asr	r3, r3, r8
   15d40:	and	r3, r3, #15
   15d44:	strb	r3, [r2, #72]	; 0x48
   15d48:	str	r0, [r4, #4]
   15d4c:	mov	r4, r0
   15d50:	b	15c34 <rb_radixtree_elem_add+0x1ac>
   15d54:	bl	4930 <rb_outofmemory@plt>
   15d58:	ldr	r3, [r5, #8]
   15d5c:	ldrb	r3, [r3, sl]
   15d60:	asr	r3, r3, r8
   15d64:	and	r3, r3, #15
   15d68:	add	r3, r0, r3, lsl #2
   15d6c:	ldr	r2, [sp, #12]
   15d70:	str	r2, [r3, #4]
   15d74:	ldr	r3, [r2]
   15d78:	cmn	r3, #1
   15d7c:	beq	15db4 <rb_radixtree_elem_add+0x32c>
   15d80:	ldr	r3, [sp, #12]
   15d84:	str	r0, [r3, #68]	; 0x44
   15d88:	ldr	r3, [sp, #4]
   15d8c:	ldr	r2, [r3, #4]
   15d90:	ldr	r3, [r5, #8]
   15d94:	ldrb	r3, [r3, sl]
   15d98:	asr	r3, r3, r8
   15d9c:	and	r3, r3, #15
   15da0:	strb	r3, [r2, #72]	; 0x48
   15da4:	ldr	r3, [sp, #4]
   15da8:	str	r0, [r3, #4]
   15dac:	mov	r4, r0
   15db0:	b	15c34 <rb_radixtree_elem_add+0x1ac>
   15db4:	str	r0, [r2, #12]
   15db8:	ldr	r3, [sp, #4]
   15dbc:	ldr	r2, [r3, #4]
   15dc0:	ldr	r3, [r5, #8]
   15dc4:	ldrb	r3, [r3, sl]
   15dc8:	asr	r3, r3, r8
   15dcc:	and	r3, r3, #15
   15dd0:	strb	r3, [r2, #16]
   15dd4:	b	15da4 <rb_radixtree_elem_add+0x31c>
   15dd8:	str	r0, [r2, #12]
   15ddc:	ldr	r2, [r4, #4]
   15de0:	ldr	r3, [r5, #8]
   15de4:	ldrb	r3, [r3, sl]
   15de8:	asr	r3, r3, r8
   15dec:	and	r3, r3, #15
   15df0:	strb	r3, [r2, #16]
   15df4:	b	15d48 <rb_radixtree_elem_add+0x2c0>
   15df8:	bl	4930 <rb_outofmemory@plt>
   15dfc:	ldr	r5, [sp, #12]
   15e00:	mov	r7, #18
   15e04:	mov	r4, #0
   15e08:	mov	r1, r9
   15e0c:	ldr	r0, [r5, #8]
   15e10:	bl	4c84 <strcmp@plt>
   15e14:	cmp	r0, #0
   15e18:	beq	15b68 <rb_radixtree_elem_add+0xe0>
   15e1c:	adds	r0, r4, #0
   15e20:	movne	r0, #1
   15e24:	ldr	r1, [r5, #8]
   15e28:	mov	r6, #0
   15e2c:	b	15bc4 <rb_radixtree_elem_add+0x13c>
   15e30:	mov	r1, #20
   15e34:	mov	r0, #1
   15e38:	bl	45a0 <calloc@plt>
   15e3c:	cmp	r0, #0
   15e40:	beq	15bbc <rb_radixtree_elem_add+0x134>
   15e44:	ldr	r2, [sp, #4]
   15e48:	str	r0, [r2, #4]
   15e4c:	mvn	r3, #0
   15e50:	str	r3, [r0]
   15e54:	ldr	r3, [sp, #8]
   15e58:	str	r3, [r0, #4]
   15e5c:	str	r9, [r0, #8]
   15e60:	mov	r3, #0
   15e64:	str	r3, [r0, #12]
   15e68:	mov	r3, #18
   15e6c:	strb	r3, [r0, #16]
   15e70:	ldr	r3, [r2, #8]
   15e74:	add	r3, r3, #1
   15e78:	str	r3, [r2, #8]
   15e7c:	b	15c9c <rb_radixtree_elem_add+0x214>

00015e80 <rb_radixtree_add>:
   15e80:	str	r4, [sp, #-8]!
   15e84:	str	lr, [sp, #4]
   15e88:	bl	46cc <rb_radixtree_elem_add@plt>
   15e8c:	adds	r0, r0, #0
   15e90:	movne	r0, #1
   15e94:	ldr	r4, [sp]
   15e98:	add	sp, sp, #4
   15e9c:	pop	{pc}		; (ldr pc, [sp], #4)

00015ea0 <rb_radixtree_elem_delete>:
   15ea0:	strd	r4, [sp, #-24]!	; 0xffffffe8
   15ea4:	strd	r6, [sp, #8]
   15ea8:	str	r8, [sp, #16]
   15eac:	str	lr, [sp, #20]
   15eb0:	mov	r4, r0
   15eb4:	mov	r6, r1
   15eb8:	ldrb	r7, [r1, #16]
   15ebc:	ldr	r5, [r1, #12]
   15ec0:	ldr	r0, [r1, #8]
   15ec4:	cmp	r0, #0
   15ec8:	beq	15ed0 <rb_radixtree_elem_delete+0x30>
   15ecc:	bl	46a8 <free@plt>
   15ed0:	mov	r0, r6
   15ed4:	bl	46a8 <free@plt>
   15ed8:	cmp	r5, #0
   15edc:	beq	15f90 <rb_radixtree_elem_delete+0xf0>
   15ee0:	add	r7, r5, r7, lsl #2
   15ee4:	mov	r3, #0
   15ee8:	str	r3, [r7, #4]
   15eec:	mov	r2, r5
   15ef0:	mvn	r0, #0
   15ef4:	b	15f04 <rb_radixtree_elem_delete+0x64>
   15ef8:	add	r3, r3, #1
   15efc:	cmp	r3, #16
   15f00:	beq	15f20 <rb_radixtree_elem_delete+0x80>
   15f04:	ldr	r1, [r2, #4]!
   15f08:	cmp	r1, #0
   15f0c:	beq	15ef8 <rb_radixtree_elem_delete+0x58>
   15f10:	cmn	r0, #1
   15f14:	moveq	r0, r3
   15f18:	mvnne	r0, #1
   15f1c:	b	15ef8 <rb_radixtree_elem_delete+0x58>
   15f20:	cmp	r0, #0
   15f24:	blt	15f68 <rb_radixtree_elem_delete+0xc8>
   15f28:	add	r0, r5, r0, lsl #2
   15f2c:	ldr	r3, [r0, #4]
   15f30:	ldrb	r1, [r5, #72]	; 0x48
   15f34:	ldr	r2, [r5, #68]	; 0x44
   15f38:	cmp	r2, #0
   15f3c:	addne	r0, r2, r1, lsl #2
   15f40:	strne	r3, [r0, #4]
   15f44:	streq	r3, [r4, #4]
   15f48:	ldr	r0, [r3]
   15f4c:	cmn	r0, #1
   15f50:	streq	r2, [r3, #12]
   15f54:	strbeq	r1, [r3, #16]
   15f58:	strne	r2, [r3, #68]	; 0x44
   15f5c:	strbne	r1, [r3, #72]	; 0x48
   15f60:	mov	r0, r5
   15f64:	bl	46a8 <free@plt>
   15f68:	ldr	r3, [r4, #8]
   15f6c:	sub	r3, r3, #1
   15f70:	str	r3, [r4, #8]
   15f74:	cmp	r3, #0
   15f78:	streq	r3, [r4, #4]
   15f7c:	ldrd	r4, [sp]
   15f80:	ldrd	r6, [sp, #8]
   15f84:	ldr	r8, [sp, #16]
   15f88:	add	sp, sp, #20
   15f8c:	pop	{pc}		; (ldr pc, [sp], #4)
   15f90:	mov	r3, #0
   15f94:	str	r3, [r4, #4]
   15f98:	b	15f68 <rb_radixtree_elem_delete+0xc8>

00015f9c <rb_radixtree_delete>:
   15f9c:	strd	r4, [sp, #-16]!
   15fa0:	str	r6, [sp, #8]
   15fa4:	str	lr, [sp, #12]
   15fa8:	mov	r5, r0
   15fac:	mov	r2, #0
   15fb0:	bl	4b1c <rb_radixtree_elem_find@plt>
   15fb4:	subs	r1, r0, #0
   15fb8:	moveq	r4, r1
   15fbc:	beq	15fcc <rb_radixtree_delete+0x30>
   15fc0:	ldr	r4, [r1, #4]
   15fc4:	mov	r0, r5
   15fc8:	bl	4360 <rb_radixtree_elem_delete@plt>
   15fcc:	mov	r0, r4
   15fd0:	ldrd	r4, [sp]
   15fd4:	ldr	r6, [sp, #8]
   15fd8:	add	sp, sp, #12
   15fdc:	pop	{pc}		; (ldr pc, [sp], #4)

00015fe0 <rb_radixtree_destroy>:
   15fe0:	strd	r4, [sp, #-28]!	; 0xffffffe4
   15fe4:	strd	r6, [sp, #8]
   15fe8:	strd	r8, [sp, #16]
   15fec:	str	lr, [sp, #24]
   15ff0:	sub	sp, sp, #44	; 0x2c
   15ff4:	mov	r4, r0
   15ff8:	mov	r7, r1
   15ffc:	mov	r8, r2
   16000:	ldr	r9, [pc, #252]	; 16104 <rb_radixtree_destroy+0x124>
   16004:	add	r9, pc, r9
   16008:	mov	r1, sp
   1600c:	bl	43c0 <rb_radixtree_foreach_start@plt>
   16010:	mov	r6, sp
   16014:	b	16030 <rb_radixtree_destroy+0x50>
   16018:	ldr	r1, [r5, #8]
   1601c:	mov	r0, r4
   16020:	bl	4c6c <rb_radixtree_delete@plt>
   16024:	mov	r1, r6
   16028:	mov	r0, r4
   1602c:	bl	43fc <rb_radixtree_foreach_next@plt>
   16030:	mov	r1, r6
   16034:	mov	r0, r4
   16038:	bl	475c <rb_radixtree_foreach_cur@plt>
   1603c:	cmp	r0, #0
   16040:	beq	16064 <rb_radixtree_destroy+0x84>
   16044:	ldr	r5, [sp, #8]
   16048:	cmp	r7, #0
   1604c:	beq	16018 <rb_radixtree_destroy+0x38>
   16050:	mov	r2, r8
   16054:	ldr	r1, [r5, #4]
   16058:	ldr	r0, [r5, #8]
   1605c:	blx	r7
   16060:	b	16018 <rb_radixtree_destroy+0x38>
   16064:	ldr	r3, [r4, #24]
   16068:	cmp	r3, #0
   1606c:	beq	160dc <rb_radixtree_destroy+0xfc>
   16070:	ldr	r2, [r4, #20]
   16074:	str	r2, [r3, #4]
   16078:	ldr	r3, [r4, #20]
   1607c:	cmp	r3, #0
   16080:	beq	160f0 <rb_radixtree_destroy+0x110>
   16084:	ldr	r2, [r4, #24]
   16088:	str	r2, [r3, #8]
   1608c:	mov	r3, #0
   16090:	str	r3, [r4, #20]
   16094:	str	r3, [r4, #24]
   16098:	ldr	r3, [pc, #104]	; 16108 <rb_radixtree_destroy+0x128>
   1609c:	ldr	r2, [r9, r3]
   160a0:	ldr	r3, [r2, #8]
   160a4:	sub	r3, r3, #1
   160a8:	str	r3, [r2, #8]
   160ac:	ldr	r0, [r4, #12]
   160b0:	cmp	r0, #0
   160b4:	beq	160bc <rb_radixtree_destroy+0xdc>
   160b8:	bl	46a8 <free@plt>
   160bc:	mov	r0, r4
   160c0:	bl	46a8 <free@plt>
   160c4:	add	sp, sp, #44	; 0x2c
   160c8:	ldrd	r4, [sp]
   160cc:	ldrd	r6, [sp, #8]
   160d0:	ldrd	r8, [sp, #16]
   160d4:	add	sp, sp, #24
   160d8:	pop	{pc}		; (ldr pc, [sp], #4)
   160dc:	ldr	r3, [pc, #36]	; 16108 <rb_radixtree_destroy+0x128>
   160e0:	ldr	r3, [r9, r3]
   160e4:	ldr	r2, [r4, #20]
   160e8:	str	r2, [r3, #4]
   160ec:	b	16078 <rb_radixtree_destroy+0x98>
   160f0:	ldr	r3, [pc, #16]	; 16108 <rb_radixtree_destroy+0x128>
   160f4:	ldr	r3, [r9, r3]
   160f8:	ldr	r2, [r4, #24]
   160fc:	str	r2, [r3]
   16100:	b	1608c <rb_radixtree_destroy+0xac>
   16104:	.word	0x00012ff4
   16108:	.word	0x000003ec

0001610c <rb_radixtree_retrieve>:
   1610c:	str	r4, [sp, #-8]!
   16110:	str	lr, [sp, #4]
   16114:	mov	r2, #0
   16118:	bl	4b1c <rb_radixtree_elem_find@plt>
   1611c:	cmp	r0, #0
   16120:	ldrne	r0, [r0, #4]
   16124:	ldr	r4, [sp]
   16128:	add	sp, sp, #4
   1612c:	pop	{pc}		; (ldr pc, [sp], #4)

00016130 <rb_radixtree_elem_get_key>:
   16130:	ldr	r0, [r0, #8]
   16134:	bx	lr

00016138 <rb_radixtree_elem_set_data>:
   16138:	str	r1, [r0, #4]
   1613c:	bx	lr

00016140 <rb_radixtree_elem_get_data>:
   16140:	ldr	r0, [r0, #4]
   16144:	bx	lr

00016148 <rb_radixtree_size>:
   16148:	ldr	r0, [r0, #8]
   1614c:	bx	lr

00016150 <rb_radixtree_stats>:
   16150:	strd	r4, [sp, #-16]!
   16154:	str	r6, [sp, #8]
   16158:	str	lr, [sp, #12]
   1615c:	sub	sp, sp, #288	; 0x120
   16160:	mov	r4, r0
   16164:	mov	r5, r1
   16168:	mov	r6, r2
   1616c:	mov	r3, #0
   16170:	str	r3, [sp, #28]
   16174:	ldr	r3, [r0, #8]
   16178:	cmp	r3, #0
   1617c:	beq	161f0 <rb_radixtree_stats+0xa0>
   16180:	add	r2, sp, #28
   16184:	mov	r1, #0
   16188:	ldr	r0, [r0, #4]
   1618c:	bl	153d0 <stats_recurse>
   16190:	ldr	r3, [r4, #8]
   16194:	ldr	r2, [sp, #28]
   16198:	str	r2, [sp, #16]
   1619c:	udiv	r2, r0, r3
   161a0:	str	r2, [sp, #12]
   161a4:	str	r0, [sp, #8]
   161a8:	str	r3, [sp, #4]
   161ac:	ldr	r3, [pc, #124]	; 16230 <rb_radixtree_stats+0xe0>
   161b0:	add	r3, pc, r3
   161b4:	str	r3, [sp]
   161b8:	ldr	r3, [r4, #12]
   161bc:	ldr	r2, [pc, #112]	; 16234 <rb_radixtree_stats+0xe4>
   161c0:	add	r2, pc, r2
   161c4:	mov	r1, #256	; 0x100
   161c8:	add	r0, sp, #32
   161cc:	bl	4b58 <snprintf@plt>
   161d0:	mov	r1, r6
   161d4:	add	r0, sp, #32
   161d8:	blx	r5
   161dc:	add	sp, sp, #288	; 0x120
   161e0:	ldrd	r4, [sp]
   161e4:	ldr	r6, [sp, #8]
   161e8:	add	sp, sp, #12
   161ec:	pop	{pc}		; (ldr pc, [sp], #4)
   161f0:	ldr	r3, [pc, #64]	; 16238 <rb_radixtree_stats+0xe8>
   161f4:	add	r3, pc, r3
   161f8:	str	r3, [sp, #16]
   161fc:	str	r3, [sp, #12]
   16200:	str	r3, [sp, #8]
   16204:	str	r3, [sp, #4]
   16208:	ldr	r3, [pc, #44]	; 1623c <rb_radixtree_stats+0xec>
   1620c:	add	r3, pc, r3
   16210:	str	r3, [sp]
   16214:	ldr	r3, [r0, #12]
   16218:	ldr	r2, [pc, #32]	; 16240 <rb_radixtree_stats+0xf0>
   1621c:	add	r2, pc, r2
   16220:	mov	r1, #256	; 0x100
   16224:	add	r0, sp, #32
   16228:	bl	4b58 <snprintf@plt>
   1622c:	b	161d0 <rb_radixtree_stats+0x80>
   16230:	.word	0x00001dd4
   16234:	.word	0x00001d74
   16238:	.word	0x00000cd4
   1623c:	.word	0x00001d78
   16240:	.word	0x00001d44

00016244 <rb_radixtree_stats_walk>:
   16244:	strd	r4, [sp, #-16]!
   16248:	str	r6, [sp, #8]
   1624c:	str	lr, [sp, #12]
   16250:	mov	r6, r0
   16254:	mov	r5, r1
   16258:	ldr	r3, [pc, #64]	; 162a0 <rb_radixtree_stats_walk+0x5c>
   1625c:	add	r3, pc, r3
   16260:	ldr	r2, [pc, #60]	; 162a4 <rb_radixtree_stats_walk+0x60>
   16264:	ldr	r3, [r3, r2]
   16268:	ldr	r4, [r3]
   1626c:	cmp	r4, #0
   16270:	beq	16290 <rb_radixtree_stats_walk+0x4c>
   16274:	mov	r2, r5
   16278:	mov	r1, r6
   1627c:	ldr	r0, [r4]
   16280:	bl	45f4 <rb_radixtree_stats@plt>
   16284:	ldr	r4, [r4, #8]
   16288:	cmp	r4, #0
   1628c:	bne	16274 <rb_radixtree_stats_walk+0x30>
   16290:	ldrd	r4, [sp]
   16294:	ldr	r6, [sp, #8]
   16298:	add	sp, sp, #12
   1629c:	pop	{pc}		; (ldr pc, [sp], #4)
   162a0:	.word	0x00012d9c
   162a4:	.word	0x000003ec

Disassembly of section .fini:

000162a8 <_fini>:
   162a8:	push	{r3, lr}
   162ac:	pop	{r3, pc}
