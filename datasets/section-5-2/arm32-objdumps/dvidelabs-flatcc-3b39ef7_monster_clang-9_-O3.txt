
../repos/dvidelabs-flatcc-3b39ef7/samples/monster/monster:     file format elf32-littlearm


Disassembly of section .init:

00012350 <.init>:
   12350:	push	{r3, lr}
   12354:	bl	12460 <_start@@Base+0x3c>
   12358:	pop	{r3, pc}

Disassembly of section .plt:

0001235c <strcmp@plt-0x14>:
   1235c:	push	{lr}		; (str lr, [sp, #-4]!)
   12360:	ldr	lr, [pc, #4]	; 1236c <strcmp@plt-0x4>
   12364:	add	lr, pc, lr
   12368:	ldr	pc, [lr, #8]!
   1236c:	muleq	r1, r4, ip

00012370 <strcmp@plt>:
   12370:	add	ip, pc, #0, 12
   12374:	add	ip, ip, #24, 20	; 0x18000
   12378:	ldr	pc, [ip, #3220]!	; 0xc94

0001237c <free@plt>:
   1237c:	add	ip, pc, #0, 12
   12380:	add	ip, ip, #24, 20	; 0x18000
   12384:	ldr	pc, [ip, #3212]!	; 0xc8c

00012388 <memcpy@plt>:
   12388:	add	ip, pc, #0, 12
   1238c:	add	ip, ip, #24, 20	; 0x18000
   12390:	ldr	pc, [ip, #3204]!	; 0xc84

00012394 <realloc@plt>:
   12394:	add	ip, pc, #0, 12
   12398:	add	ip, ip, #24, 20	; 0x18000
   1239c:	ldr	pc, [ip, #3196]!	; 0xc7c

000123a0 <puts@plt>:
   123a0:	add	ip, pc, #0, 12
   123a4:	add	ip, ip, #24, 20	; 0x18000
   123a8:	ldr	pc, [ip, #3188]!	; 0xc74

000123ac <malloc@plt>:
   123ac:	add	ip, pc, #0, 12
   123b0:	add	ip, ip, #24, 20	; 0x18000
   123b4:	ldr	pc, [ip, #3180]!	; 0xc6c

000123b8 <__libc_start_main@plt>:
   123b8:	add	ip, pc, #0, 12
   123bc:	add	ip, ip, #24, 20	; 0x18000
   123c0:	ldr	pc, [ip, #3172]!	; 0xc64

000123c4 <__gmon_start__@plt>:
   123c4:	add	ip, pc, #0, 12
   123c8:	add	ip, ip, #24, 20	; 0x18000
   123cc:	ldr	pc, [ip, #3164]!	; 0xc5c

000123d0 <bcmp@plt>:
   123d0:	add	ip, pc, #0, 12
   123d4:	add	ip, ip, #24, 20	; 0x18000
   123d8:	ldr	pc, [ip, #3156]!	; 0xc54

000123dc <strlen@plt>:
   123dc:	add	ip, pc, #0, 12
   123e0:	add	ip, ip, #24, 20	; 0x18000
   123e4:	ldr	pc, [ip, #3148]!	; 0xc4c

000123e8 <posix_memalign@plt>:
   123e8:	add	ip, pc, #0, 12
   123ec:	add	ip, ip, #24, 20	; 0x18000
   123f0:	ldr	pc, [ip, #3140]!	; 0xc44

000123f4 <memset@plt>:
   123f4:	add	ip, pc, #0, 12
   123f8:	add	ip, ip, #24, 20	; 0x18000
   123fc:	ldr	pc, [ip, #3132]!	; 0xc3c

00012400 <memchr@plt>:
   12400:	add	ip, pc, #0, 12
   12404:	add	ip, ip, #24, 20	; 0x18000
   12408:	ldr	pc, [ip, #3124]!	; 0xc34

0001240c <abort@plt>:
   1240c:	add	ip, pc, #0, 12
   12410:	add	ip, ip, #24, 20	; 0x18000
   12414:	ldr	pc, [ip, #3116]!	; 0xc2c

00012418 <__assert_fail@plt>:
   12418:	add	ip, pc, #0, 12
   1241c:	add	ip, ip, #24, 20	; 0x18000
   12420:	ldr	pc, [ip, #3108]!	; 0xc24

Disassembly of section .text:

00012424 <_start@@Base>:
   12424:	mov	fp, #0
   12428:	mov	lr, #0
   1242c:	pop	{r1}		; (ldr r1, [sp], #4)
   12430:	mov	r2, sp
   12434:	push	{r2}		; (str r2, [sp, #-4]!)
   12438:	push	{r0}		; (str r0, [sp, #-4]!)
   1243c:	ldr	ip, [pc, #16]	; 12454 <_start@@Base+0x30>
   12440:	push	{ip}		; (str ip, [sp, #-4]!)
   12444:	ldr	r0, [pc, #12]	; 12458 <_start@@Base+0x34>
   12448:	ldr	r3, [pc, #12]	; 1245c <_start@@Base+0x38>
   1244c:	bl	123b8 <__libc_start_main@plt>
   12450:	bl	1240c <abort@plt>
   12454:	andeq	r8, r1, r0, lsl #14
   12458:	muleq	r1, r4, r2
   1245c:	andeq	r8, r1, r0, lsr #13
   12460:	ldr	r3, [pc, #20]	; 1247c <_start@@Base+0x58>
   12464:	ldr	r2, [pc, #20]	; 12480 <_start@@Base+0x5c>
   12468:	add	r3, pc, r3
   1246c:	ldr	r2, [r3, r2]
   12470:	cmp	r2, #0
   12474:	bxeq	lr
   12478:	b	123c4 <__gmon_start__@plt>
   1247c:	muleq	r1, r0, fp
   12480:	andeq	r0, r0, r8, asr #32
   12484:	ldr	r0, [pc, #24]	; 124a4 <_start@@Base+0x80>
   12488:	ldr	r3, [pc, #24]	; 124a8 <_start@@Base+0x84>
   1248c:	cmp	r3, r0
   12490:	bxeq	lr
   12494:	ldr	r3, [pc, #16]	; 124ac <_start@@Base+0x88>
   12498:	cmp	r3, #0
   1249c:	bxeq	lr
   124a0:	bx	r3
   124a4:	andeq	fp, r2, r4, asr r0
   124a8:	andeq	fp, r2, r4, asr r0
   124ac:	andeq	r0, r0, r0
   124b0:	ldr	r0, [pc, #36]	; 124dc <_start@@Base+0xb8>
   124b4:	ldr	r1, [pc, #36]	; 124e0 <_start@@Base+0xbc>
   124b8:	sub	r1, r1, r0
   124bc:	asr	r1, r1, #2
   124c0:	add	r1, r1, r1, lsr #31
   124c4:	asrs	r1, r1, #1
   124c8:	bxeq	lr
   124cc:	ldr	r3, [pc, #16]	; 124e4 <_start@@Base+0xc0>
   124d0:	cmp	r3, #0
   124d4:	bxeq	lr
   124d8:	bx	r3
   124dc:	andeq	fp, r2, r4, asr r0
   124e0:	andeq	fp, r2, r4, asr r0
   124e4:	andeq	r0, r0, r0
   124e8:	push	{r4, lr}
   124ec:	ldr	r4, [pc, #24]	; 1250c <_start@@Base+0xe8>
   124f0:	ldrb	r3, [r4]
   124f4:	cmp	r3, #0
   124f8:	popne	{r4, pc}
   124fc:	bl	12484 <_start@@Base+0x60>
   12500:	mov	r3, #1
   12504:	strb	r3, [r4]
   12508:	pop	{r4, pc}
   1250c:	andeq	fp, r2, r4, asr r0
   12510:	b	124b0 <_start@@Base+0x8c>

00012514 <create_monster_bottom_up@@Base>:
   12514:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12518:	add	fp, sp, #28
   1251c:	sub	sp, sp, #20
   12520:	mov	r9, r1
   12524:	movw	r1, #34580	; 0x8714
   12528:	mov	r4, r0
   1252c:	movt	r1, #1
   12530:	bl	17b68 <flatcc_builder_create_string_str@@Base>
   12534:	movw	r1, #34586	; 0x871a
   12538:	mov	r5, r0
   1253c:	mov	r0, r4
   12540:	movt	r1, #1
   12544:	bl	17b68 <flatcc_builder_create_string_str@@Base>
   12548:	mov	r6, r0
   1254c:	mov	r0, r4
   12550:	mov	r1, #2
   12554:	bl	15a1c <flatcc_builder_start_table@@Base>
   12558:	mov	r8, #0
   1255c:	cmp	r5, #0
   12560:	mov	r7, #0
   12564:	beq	125dc <create_monster_bottom_up@@Base+0xc8>
   12568:	cmp	r0, #0
   1256c:	mov	r7, #0
   12570:	bne	125dc <create_monster_bottom_up@@Base+0xc8>
   12574:	mov	r0, r4
   12578:	mov	r1, #0
   1257c:	mov	r7, #0
   12580:	bl	16be0 <flatcc_builder_table_add_offset@@Base>
   12584:	cmp	r0, #0
   12588:	beq	125dc <create_monster_bottom_up@@Base+0xc8>
   1258c:	str	r5, [r0]
   12590:	mov	r0, r4
   12594:	mov	r1, #1
   12598:	mov	r2, #2
   1259c:	mov	r3, #2
   125a0:	bl	16d70 <flatcc_builder_table_add@@Base>
   125a4:	cmp	r0, #0
   125a8:	beq	125dc <create_monster_bottom_up@@Base+0xc8>
   125ac:	mov	r1, #3
   125b0:	mov	r2, #0
   125b4:	strh	r1, [r0]
   125b8:	movw	r1, #35546	; 0x8ada
   125bc:	mov	r0, r4
   125c0:	movt	r1, #1
   125c4:	bl	16344 <flatcc_builder_check_required@@Base>
   125c8:	cmp	r0, #0
   125cc:	beq	129d8 <create_monster_bottom_up@@Base+0x4c4>
   125d0:	mov	r0, r4
   125d4:	bl	163c4 <flatcc_builder_end_table@@Base>
   125d8:	mov	r7, r0
   125dc:	mov	r0, r4
   125e0:	mov	r1, #2
   125e4:	bl	15a1c <flatcc_builder_start_table@@Base>
   125e8:	cmp	r6, #0
   125ec:	beq	12660 <create_monster_bottom_up@@Base+0x14c>
   125f0:	cmp	r0, #0
   125f4:	bne	12660 <create_monster_bottom_up@@Base+0x14c>
   125f8:	mov	r0, r4
   125fc:	mov	r1, #0
   12600:	mov	r8, #0
   12604:	bl	16be0 <flatcc_builder_table_add_offset@@Base>
   12608:	cmp	r0, #0
   1260c:	beq	12660 <create_monster_bottom_up@@Base+0x14c>
   12610:	str	r6, [r0]
   12614:	mov	r0, r4
   12618:	mov	r1, #1
   1261c:	mov	r2, #2
   12620:	mov	r3, #2
   12624:	bl	16d70 <flatcc_builder_table_add@@Base>
   12628:	cmp	r0, #0
   1262c:	beq	12660 <create_monster_bottom_up@@Base+0x14c>
   12630:	mov	r1, #5
   12634:	mov	r2, #0
   12638:	strh	r1, [r0]
   1263c:	movw	r1, #35546	; 0x8ada
   12640:	mov	r0, r4
   12644:	movt	r1, #1
   12648:	bl	16344 <flatcc_builder_check_required@@Base>
   1264c:	cmp	r0, #0
   12650:	beq	129d8 <create_monster_bottom_up@@Base+0x4c4>
   12654:	mov	r0, r4
   12658:	bl	163c4 <flatcc_builder_end_table@@Base>
   1265c:	mov	r8, r0
   12660:	movw	r1, #34590	; 0x871e
   12664:	mov	r0, r4
   12668:	movt	r1, #1
   1266c:	bl	17b68 <flatcc_builder_create_string_str@@Base>
   12670:	mov	r6, r0
   12674:	movw	r0, #35536	; 0x8ad0
   12678:	mov	r1, #1
   1267c:	mov	r2, #10
   12680:	mov	r3, #1
   12684:	movt	r0, #1
   12688:	str	r1, [sp]
   1268c:	add	r1, sp, #8
   12690:	vldr	d16, [r0]
   12694:	movw	r0, #2312	; 0x908
   12698:	strh	r0, [sp, #16]
   1269c:	mvn	r0, #0
   126a0:	str	r0, [sp, #4]
   126a4:	mov	r0, r4
   126a8:	vstr	d16, [sp, #8]
   126ac:	bl	16584 <flatcc_builder_create_vector@@Base>
   126b0:	mov	sl, r0
   126b4:	mov	r0, r4
   126b8:	bl	154ec <flatcc_builder_start_offset_vector@@Base>
   126bc:	cmp	r7, #0
   126c0:	beq	126d0 <create_monster_bottom_up@@Base+0x1bc>
   126c4:	mov	r0, r4
   126c8:	mov	r1, r7
   126cc:	bl	14d94 <flatcc_builder_offset_vector_push@@Base>
   126d0:	cmp	r8, #0
   126d4:	beq	126e4 <create_monster_bottom_up@@Base+0x1d0>
   126d8:	mov	r0, r4
   126dc:	mov	r1, r8
   126e0:	bl	14d94 <flatcc_builder_offset_vector_push@@Base>
   126e4:	mov	r0, r4
   126e8:	bl	157a4 <flatcc_builder_end_offset_vector@@Base>
   126ec:	mov	r5, r0
   126f0:	mov	r0, r4
   126f4:	mov	r1, #0
   126f8:	mov	r2, #0
   126fc:	mov	r3, #0
   12700:	bl	14420 <flatcc_builder_start_buffer@@Base>
   12704:	cmp	r9, #0
   12708:	beq	12870 <create_monster_bottom_up@@Base+0x35c>
   1270c:	cmp	r0, #0
   12710:	bne	12720 <create_monster_bottom_up@@Base+0x20c>
   12714:	mov	r0, r4
   12718:	mov	r1, #10
   1271c:	bl	15a1c <flatcc_builder_start_table@@Base>
   12720:	mov	r0, r4
   12724:	mov	r1, #0
   12728:	mov	r2, #12
   1272c:	mov	r3, #4
   12730:	bl	16d70 <flatcc_builder_table_add@@Base>
   12734:	cmp	r0, #0
   12738:	beq	12758 <create_monster_bottom_up@@Base+0x244>
   1273c:	movw	r1, #0
   12740:	mov	r3, #1065353216	; 0x3f800000
   12744:	mov	r2, #1073741824	; 0x40000000
   12748:	movt	r1, #16448	; 0x4040
   1274c:	str	r3, [r0]
   12750:	str	r2, [r0, #4]
   12754:	str	r1, [r0, #8]
   12758:	mov	r0, r4
   1275c:	mov	r1, #2
   12760:	mov	r2, #2
   12764:	mov	r3, #2
   12768:	bl	16d70 <flatcc_builder_table_add@@Base>
   1276c:	cmp	r0, #0
   12770:	movne	r1, #300	; 0x12c
   12774:	strhne	r1, [r0]
   12778:	cmp	r6, #0
   1277c:	beq	12794 <create_monster_bottom_up@@Base+0x280>
   12780:	mov	r0, r4
   12784:	mov	r1, #3
   12788:	bl	16be0 <flatcc_builder_table_add_offset@@Base>
   1278c:	cmp	r0, #0
   12790:	strne	r6, [r0]
   12794:	cmp	sl, #0
   12798:	beq	127b0 <create_monster_bottom_up@@Base+0x29c>
   1279c:	mov	r0, r4
   127a0:	mov	r1, #5
   127a4:	bl	16be0 <flatcc_builder_table_add_offset@@Base>
   127a8:	cmp	r0, #0
   127ac:	strne	sl, [r0]
   127b0:	mov	r0, r4
   127b4:	mov	r1, #6
   127b8:	mov	r2, #1
   127bc:	mov	r3, #1
   127c0:	bl	16d70 <flatcc_builder_table_add@@Base>
   127c4:	cmp	r0, #0
   127c8:	movne	r1, #0
   127cc:	strbne	r1, [r0]
   127d0:	cmp	r5, #0
   127d4:	beq	127ec <create_monster_bottom_up@@Base+0x2d8>
   127d8:	mov	r0, r4
   127dc:	mov	r1, #7
   127e0:	bl	16be0 <flatcc_builder_table_add_offset@@Base>
   127e4:	cmp	r0, #0
   127e8:	strne	r5, [r0]
   127ec:	cmp	r8, #0
   127f0:	beq	12830 <create_monster_bottom_up@@Base+0x31c>
   127f4:	mov	r0, r4
   127f8:	mov	r1, #8
   127fc:	mov	r2, #1
   12800:	mov	r3, #1
   12804:	bl	16d70 <flatcc_builder_table_add@@Base>
   12808:	cmp	r0, #0
   1280c:	beq	12830 <create_monster_bottom_up@@Base+0x31c>
   12810:	mov	r5, r0
   12814:	mov	r0, r4
   12818:	mov	r1, #9
   1281c:	bl	16be0 <flatcc_builder_table_add_offset@@Base>
   12820:	cmp	r0, #0
   12824:	movne	r1, #1
   12828:	strbne	r1, [r5]
   1282c:	strne	r8, [r0]
   12830:	movw	r1, #35548	; 0x8adc
   12834:	mov	r0, r4
   12838:	mov	r2, #0
   1283c:	movt	r1, #1
   12840:	bl	16344 <flatcc_builder_check_required@@Base>
   12844:	cmp	r0, #0
   12848:	beq	129b8 <create_monster_bottom_up@@Base+0x4a4>
   1284c:	mov	r0, r4
   12850:	bl	163c4 <flatcc_builder_end_table@@Base>
   12854:	mov	r9, r0
   12858:	mov	r0, r4
   1285c:	mov	r1, r9
   12860:	bl	14610 <flatcc_builder_end_buffer@@Base>
   12864:	mov	r0, #0
   12868:	sub	sp, fp, #28
   1286c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12870:	cmp	r0, #0
   12874:	beq	12884 <create_monster_bottom_up@@Base+0x370>
   12878:	mov	r0, #0
   1287c:	sub	sp, fp, #28
   12880:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12884:	mov	r0, r4
   12888:	mov	r1, #10
   1288c:	bl	15a1c <flatcc_builder_start_table@@Base>
   12890:	mov	r9, #0
   12894:	cmp	r0, #0
   12898:	bne	12858 <create_monster_bottom_up@@Base+0x344>
   1289c:	mov	r0, r4
   128a0:	mov	r1, #0
   128a4:	mov	r2, #12
   128a8:	mov	r3, #4
   128ac:	mov	r9, #0
   128b0:	bl	16d70 <flatcc_builder_table_add@@Base>
   128b4:	cmp	r0, #0
   128b8:	beq	12858 <create_monster_bottom_up@@Base+0x344>
   128bc:	movw	r1, #0
   128c0:	mov	r3, #1065353216	; 0x3f800000
   128c4:	cmp	r6, #0
   128c8:	mov	r2, #1073741824	; 0x40000000
   128cc:	movt	r1, #16448	; 0x4040
   128d0:	str	r3, [r0]
   128d4:	str	r2, [r0, #4]
   128d8:	str	r1, [r0, #8]
   128dc:	beq	12858 <create_monster_bottom_up@@Base+0x344>
   128e0:	mov	r0, r4
   128e4:	mov	r1, #3
   128e8:	bl	16be0 <flatcc_builder_table_add_offset@@Base>
   128ec:	cmp	r0, #0
   128f0:	strne	r6, [r0]
   128f4:	cmpne	sl, #0
   128f8:	beq	12858 <create_monster_bottom_up@@Base+0x344>
   128fc:	mov	r0, r4
   12900:	mov	r1, #5
   12904:	bl	16be0 <flatcc_builder_table_add_offset@@Base>
   12908:	cmp	r0, #0
   1290c:	strne	sl, [r0]
   12910:	cmpne	r5, #0
   12914:	beq	12858 <create_monster_bottom_up@@Base+0x344>
   12918:	mov	r0, r4
   1291c:	mov	r1, #7
   12920:	bl	16be0 <flatcc_builder_table_add_offset@@Base>
   12924:	cmp	r0, #0
   12928:	beq	12858 <create_monster_bottom_up@@Base+0x344>
   1292c:	str	r5, [r0]
   12930:	mov	r0, r4
   12934:	mov	r1, #9
   12938:	bl	16be0 <flatcc_builder_table_add_offset@@Base>
   1293c:	cmp	r0, #0
   12940:	beq	12858 <create_monster_bottom_up@@Base+0x344>
   12944:	str	r8, [r0]
   12948:	mov	r0, r4
   1294c:	mov	r1, #2
   12950:	mov	r2, #2
   12954:	mov	r3, #2
   12958:	bl	16d70 <flatcc_builder_table_add@@Base>
   1295c:	cmp	r0, #0
   12960:	beq	12858 <create_monster_bottom_up@@Base+0x344>
   12964:	mov	r1, #300	; 0x12c
   12968:	mov	r2, #1
   1296c:	mov	r3, #1
   12970:	strh	r1, [r0]
   12974:	mov	r0, r4
   12978:	mov	r1, #6
   1297c:	bl	16d70 <flatcc_builder_table_add@@Base>
   12980:	cmp	r0, #0
   12984:	beq	12858 <create_monster_bottom_up@@Base+0x344>
   12988:	mov	r9, #0
   1298c:	mov	r1, #8
   12990:	mov	r2, #1
   12994:	mov	r3, #1
   12998:	mov	r5, #1
   1299c:	strb	r9, [r0]
   129a0:	mov	r0, r4
   129a4:	bl	16d70 <flatcc_builder_table_add@@Base>
   129a8:	cmp	r0, #0
   129ac:	beq	12858 <create_monster_bottom_up@@Base+0x344>
   129b0:	strb	r5, [r0]
   129b4:	b	12830 <create_monster_bottom_up@@Base+0x31c>
   129b8:	movw	r0, #35036	; 0x88dc
   129bc:	movw	r1, #34867	; 0x8833
   129c0:	movw	r3, #35195	; 0x897b
   129c4:	mov	r2, #50	; 0x32
   129c8:	movt	r0, #1
   129cc:	movt	r1, #1
   129d0:	movt	r3, #1
   129d4:	bl	12418 <__assert_fail@plt>
   129d8:	movw	r0, #34711	; 0x8797
   129dc:	movw	r1, #34867	; 0x8833
   129e0:	movw	r3, #34959	; 0x888f
   129e4:	mov	r2, #52	; 0x34
   129e8:	movt	r0, #1
   129ec:	movt	r1, #1
   129f0:	movt	r3, #1
   129f4:	bl	12418 <__assert_fail@plt>

000129f8 <create_monster_top_down@@Base>:
   129f8:	push	{r4, r5, r6, sl, fp, lr}
   129fc:	add	fp, sp, #16
   12a00:	sub	sp, sp, #24
   12a04:	mov	r4, r0
   12a08:	movw	r0, #35536	; 0x8ad0
   12a0c:	mov	r1, #0
   12a10:	mov	r2, #0
   12a14:	mov	r3, #0
   12a18:	movt	r0, #1
   12a1c:	vldr	d16, [r0]
   12a20:	movw	r0, #2312	; 0x908
   12a24:	strh	r0, [sp, #16]
   12a28:	mov	r0, r4
   12a2c:	vstr	d16, [sp, #8]
   12a30:	bl	14420 <flatcc_builder_start_buffer@@Base>
   12a34:	cmp	r0, #0
   12a38:	bne	12a48 <create_monster_top_down@@Base+0x50>
   12a3c:	mov	r0, r4
   12a40:	mov	r1, #10
   12a44:	bl	15a1c <flatcc_builder_start_table@@Base>
   12a48:	mov	r0, r4
   12a4c:	mov	r1, #0
   12a50:	mov	r2, #12
   12a54:	mov	r3, #4
   12a58:	bl	16d70 <flatcc_builder_table_add@@Base>
   12a5c:	cmp	r0, #0
   12a60:	beq	12a80 <create_monster_top_down@@Base+0x88>
   12a64:	movw	r1, #0
   12a68:	mov	r3, #1065353216	; 0x3f800000
   12a6c:	mov	r2, #1073741824	; 0x40000000
   12a70:	movt	r1, #16448	; 0x4040
   12a74:	str	r3, [r0]
   12a78:	str	r2, [r0, #4]
   12a7c:	str	r1, [r0, #8]
   12a80:	mov	r0, r4
   12a84:	mov	r1, #2
   12a88:	mov	r2, #2
   12a8c:	mov	r3, #2
   12a90:	bl	16d70 <flatcc_builder_table_add@@Base>
   12a94:	cmp	r0, #0
   12a98:	movne	r1, #300	; 0x12c
   12a9c:	strhne	r1, [r0]
   12aa0:	movw	r1, #34590	; 0x871e
   12aa4:	mov	r0, r4
   12aa8:	movt	r1, #1
   12aac:	bl	17b68 <flatcc_builder_create_string_str@@Base>
   12ab0:	cmp	r0, #0
   12ab4:	beq	12ad0 <create_monster_top_down@@Base+0xd8>
   12ab8:	mov	r5, r0
   12abc:	mov	r0, r4
   12ac0:	mov	r1, #3
   12ac4:	bl	16be0 <flatcc_builder_table_add_offset@@Base>
   12ac8:	cmp	r0, #0
   12acc:	strne	r5, [r0]
   12ad0:	mvn	r0, #0
   12ad4:	mov	r1, #1
   12ad8:	mov	r2, #10
   12adc:	mov	r3, #1
   12ae0:	str	r1, [sp]
   12ae4:	str	r0, [sp, #4]
   12ae8:	add	r1, sp, #8
   12aec:	mov	r0, r4
   12af0:	bl	16584 <flatcc_builder_create_vector@@Base>
   12af4:	cmp	r0, #0
   12af8:	beq	12b14 <create_monster_top_down@@Base+0x11c>
   12afc:	mov	r5, r0
   12b00:	mov	r0, r4
   12b04:	mov	r1, #5
   12b08:	bl	16be0 <flatcc_builder_table_add_offset@@Base>
   12b0c:	cmp	r0, #0
   12b10:	strne	r5, [r0]
   12b14:	mov	r0, r4
   12b18:	mov	r1, #6
   12b1c:	mov	r2, #1
   12b20:	mov	r3, #1
   12b24:	bl	16d70 <flatcc_builder_table_add@@Base>
   12b28:	cmp	r0, #0
   12b2c:	movne	r1, #0
   12b30:	strbne	r1, [r0]
   12b34:	mov	r0, r4
   12b38:	bl	154ec <flatcc_builder_start_offset_vector@@Base>
   12b3c:	movw	r1, #34580	; 0x8714
   12b40:	mov	r0, r4
   12b44:	movt	r1, #1
   12b48:	bl	17b68 <flatcc_builder_create_string_str@@Base>
   12b4c:	mov	r1, r0
   12b50:	mov	r0, r4
   12b54:	mov	r2, #3
   12b58:	bl	12c48 <create_monster_top_down@@Base+0x250>
   12b5c:	movw	r1, #34586	; 0x871a
   12b60:	mov	r0, r4
   12b64:	movt	r1, #1
   12b68:	bl	17b68 <flatcc_builder_create_string_str@@Base>
   12b6c:	mov	r1, r0
   12b70:	mov	r0, r4
   12b74:	mov	r2, #5
   12b78:	bl	12c48 <create_monster_top_down@@Base+0x250>
   12b7c:	ldr	r6, [r0]
   12b80:	mov	r0, r4
   12b84:	bl	157a4 <flatcc_builder_end_offset_vector@@Base>
   12b88:	cmp	r0, #0
   12b8c:	beq	12ba8 <create_monster_top_down@@Base+0x1b0>
   12b90:	mov	r5, r0
   12b94:	mov	r0, r4
   12b98:	mov	r1, #7
   12b9c:	bl	16be0 <flatcc_builder_table_add_offset@@Base>
   12ba0:	cmp	r0, #0
   12ba4:	strne	r5, [r0]
   12ba8:	cmp	r6, #0
   12bac:	beq	12bec <create_monster_top_down@@Base+0x1f4>
   12bb0:	mov	r0, r4
   12bb4:	mov	r1, #8
   12bb8:	mov	r2, #1
   12bbc:	mov	r3, #1
   12bc0:	bl	16d70 <flatcc_builder_table_add@@Base>
   12bc4:	cmp	r0, #0
   12bc8:	beq	12bec <create_monster_top_down@@Base+0x1f4>
   12bcc:	mov	r5, r0
   12bd0:	mov	r0, r4
   12bd4:	mov	r1, #9
   12bd8:	bl	16be0 <flatcc_builder_table_add_offset@@Base>
   12bdc:	cmp	r0, #0
   12be0:	movne	r1, #1
   12be4:	strbne	r1, [r5]
   12be8:	strne	r6, [r0]
   12bec:	movw	r1, #35548	; 0x8adc
   12bf0:	mov	r0, r4
   12bf4:	mov	r2, #0
   12bf8:	movt	r1, #1
   12bfc:	bl	16344 <flatcc_builder_check_required@@Base>
   12c00:	cmp	r0, #0
   12c04:	beq	12c28 <create_monster_top_down@@Base+0x230>
   12c08:	mov	r0, r4
   12c0c:	bl	163c4 <flatcc_builder_end_table@@Base>
   12c10:	mov	r1, r0
   12c14:	mov	r0, r4
   12c18:	bl	14610 <flatcc_builder_end_buffer@@Base>
   12c1c:	mov	r0, #0
   12c20:	sub	sp, fp, #16
   12c24:	pop	{r4, r5, r6, sl, fp, pc}
   12c28:	movw	r0, #35036	; 0x88dc
   12c2c:	movw	r1, #34867	; 0x8833
   12c30:	movw	r3, #35195	; 0x897b
   12c34:	mov	r2, #50	; 0x32
   12c38:	movt	r0, #1
   12c3c:	movt	r1, #1
   12c40:	movt	r3, #1
   12c44:	bl	12418 <__assert_fail@plt>
   12c48:	push	{r4, r5, r6, sl, fp, lr}
   12c4c:	add	fp, sp, #16
   12c50:	mov	r6, r1
   12c54:	mov	r1, #2
   12c58:	mov	r5, r2
   12c5c:	mov	r4, r0
   12c60:	bl	15a1c <flatcc_builder_start_table@@Base>
   12c64:	cmp	r6, #0
   12c68:	beq	12cf0 <create_monster_top_down@@Base+0x2f8>
   12c6c:	cmp	r0, #0
   12c70:	bne	12cf0 <create_monster_top_down@@Base+0x2f8>
   12c74:	mov	r0, r4
   12c78:	mov	r1, #0
   12c7c:	bl	16be0 <flatcc_builder_table_add_offset@@Base>
   12c80:	cmp	r0, #0
   12c84:	beq	12cf0 <create_monster_top_down@@Base+0x2f8>
   12c88:	cmp	r5, #0
   12c8c:	str	r6, [r0]
   12c90:	beq	12cb4 <create_monster_top_down@@Base+0x2bc>
   12c94:	mov	r0, r4
   12c98:	mov	r1, #1
   12c9c:	mov	r2, #2
   12ca0:	mov	r3, #2
   12ca4:	bl	16d70 <flatcc_builder_table_add@@Base>
   12ca8:	cmp	r0, #0
   12cac:	beq	12cf0 <create_monster_top_down@@Base+0x2f8>
   12cb0:	strh	r5, [r0]
   12cb4:	movw	r1, #35546	; 0x8ada
   12cb8:	mov	r0, r4
   12cbc:	mov	r2, #0
   12cc0:	movt	r1, #1
   12cc4:	bl	16344 <flatcc_builder_check_required@@Base>
   12cc8:	cmp	r0, #0
   12ccc:	beq	12cf8 <create_monster_top_down@@Base+0x300>
   12cd0:	mov	r0, r4
   12cd4:	bl	163c4 <flatcc_builder_end_table@@Base>
   12cd8:	cmp	r0, #0
   12cdc:	beq	12cf0 <create_monster_top_down@@Base+0x2f8>
   12ce0:	mov	r1, r0
   12ce4:	mov	r0, r4
   12ce8:	pop	{r4, r5, r6, sl, fp, lr}
   12cec:	b	14d94 <flatcc_builder_offset_vector_push@@Base>
   12cf0:	mov	r0, #0
   12cf4:	pop	{r4, r5, r6, sl, fp, pc}
   12cf8:	movw	r0, #34711	; 0x8797
   12cfc:	movw	r1, #34867	; 0x8833
   12d00:	movw	r3, #34959	; 0x888f
   12d04:	mov	r2, #52	; 0x34
   12d08:	movt	r0, #1
   12d0c:	movt	r1, #1
   12d10:	movt	r3, #1
   12d14:	bl	12418 <__assert_fail@plt>

00012d18 <access_monster_buffer@@Base>:
   12d18:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   12d1c:	add	fp, sp, #24
   12d20:	cmp	r0, #0
   12d24:	beq	130b4 <access_monster_buffer@@Base+0x39c>
   12d28:	mov	r4, r0
   12d2c:	ldr	r0, [r0]
   12d30:	ldr	r0, [r4, r0]!
   12d34:	mov	r5, r4
   12d38:	ldrh	r8, [r5, -r0]!
   12d3c:	cmp	r8, #9
   12d40:	bls	12d68 <access_monster_buffer@@Base+0x50>
   12d44:	ldrh	r0, [r5, #8]
   12d48:	cmp	r0, #0
   12d4c:	beq	12dc0 <access_monster_buffer@@Base+0xa8>
   12d50:	add	r0, r4, r0
   12d54:	ldrh	r1, [r0]
   12d58:	ldrh	r7, [r5, #6]
   12d5c:	cmp	r7, #0
   12d60:	bne	12d80 <access_monster_buffer@@Base+0x68>
   12d64:	b	12dd0 <access_monster_buffer@@Base+0xb8>
   12d68:	mov	r1, #100	; 0x64
   12d6c:	cmp	r8, #8
   12d70:	bcc	13094 <access_monster_buffer@@Base+0x37c>
   12d74:	ldrh	r7, [r5, #6]
   12d78:	cmp	r7, #0
   12d7c:	beq	12dd0 <access_monster_buffer@@Base+0xb8>
   12d80:	add	r0, r4, r7
   12d84:	ldrh	r2, [r0]
   12d88:	mov	r0, #0
   12d8c:	cmp	r8, #12
   12d90:	mov	r6, #0
   12d94:	bcc	12df0 <access_monster_buffer@@Base+0xd8>
   12d98:	ldrh	r0, [r5, #10]
   12d9c:	cmp	r0, #0
   12da0:	beq	12de8 <access_monster_buffer@@Base+0xd0>
   12da4:	mov	r3, r4
   12da8:	ldr	r0, [r3, r0]!
   12dac:	ldr	r6, [r3, r0]!
   12db0:	add	r0, r3, #4
   12db4:	cmp	r1, #300	; 0x12c
   12db8:	beq	12df8 <access_monster_buffer@@Base+0xe0>
   12dbc:	b	13094 <access_monster_buffer@@Base+0x37c>
   12dc0:	mov	r1, #100	; 0x64
   12dc4:	ldrh	r7, [r5, #6]
   12dc8:	cmp	r7, #0
   12dcc:	bne	12d80 <access_monster_buffer@@Base+0x68>
   12dd0:	mov	r2, #150	; 0x96
   12dd4:	mov	r0, #0
   12dd8:	cmp	r8, #12
   12ddc:	mov	r6, #0
   12de0:	bcs	12d98 <access_monster_buffer@@Base+0x80>
   12de4:	b	12df0 <access_monster_buffer@@Base+0xd8>
   12de8:	mov	r0, #0
   12dec:	mov	r6, #0
   12df0:	cmp	r1, #300	; 0x12c
   12df4:	bne	13094 <access_monster_buffer@@Base+0x37c>
   12df8:	cmp	r2, #150	; 0x96
   12dfc:	bne	130d4 <access_monster_buffer@@Base+0x3bc>
   12e00:	movw	r1, #34590	; 0x871e
   12e04:	movt	r1, #1
   12e08:	bl	12370 <strcmp@plt>
   12e0c:	cmp	r0, #0
   12e10:	bne	130f4 <access_monster_buffer@@Base+0x3dc>
   12e14:	cmp	r6, #3
   12e18:	bne	13114 <access_monster_buffer@@Base+0x3fc>
   12e1c:	cmp	r8, #10
   12e20:	bcc	13054 <access_monster_buffer@@Base+0x33c>
   12e24:	ldrh	r0, [r5, #8]
   12e28:	cmp	r0, #0
   12e2c:	beq	13054 <access_monster_buffer@@Base+0x33c>
   12e30:	cmp	r7, #0
   12e34:	bne	13134 <access_monster_buffer@@Base+0x41c>
   12e38:	ldrh	r0, [r5, #4]
   12e3c:	cmp	r0, #0
   12e40:	beq	13154 <access_monster_buffer@@Base+0x43c>
   12e44:	add	r0, r4, r0
   12e48:	vmov.f32	s2, #112	; 0x3f800000  1.0
   12e4c:	vldr	s0, [r0]
   12e50:	vcmp.f32	s0, s2
   12e54:	vmrs	APSR_nzcv, fpscr
   12e58:	bne	13174 <access_monster_buffer@@Base+0x45c>
   12e5c:	vldr	s0, [r0, #4]
   12e60:	vmov.f32	s2, #0	; 0x40000000  2.0
   12e64:	vcmp.f32	s0, s2
   12e68:	vmrs	APSR_nzcv, fpscr
   12e6c:	bne	13194 <access_monster_buffer@@Base+0x47c>
   12e70:	vldr	s0, [r0, #8]
   12e74:	vmov.f32	s2, #8	; 0x40400000  3.0
   12e78:	vcmp.f32	s0, s2
   12e7c:	vmrs	APSR_nzcv, fpscr
   12e80:	bne	131b4 <access_monster_buffer@@Base+0x49c>
   12e84:	cmp	r8, #16
   12e88:	bcc	13074 <access_monster_buffer@@Base+0x35c>
   12e8c:	ldrh	r1, [r5, #14]
   12e90:	cmp	r1, #0
   12e94:	beq	13074 <access_monster_buffer@@Base+0x35c>
   12e98:	mov	r0, r4
   12e9c:	ldr	r1, [r0, r1]!
   12ea0:	ldr	r1, [r0, r1]!
   12ea4:	cmp	r1, #10
   12ea8:	bne	131d4 <access_monster_buffer@@Base+0x4bc>
   12eac:	add	r0, r0, #4
   12eb0:	ldrb	r0, [r0, #2]
   12eb4:	cmp	r0, #2
   12eb8:	bne	131f4 <access_monster_buffer@@Base+0x4dc>
   12ebc:	cmp	r8, #20
   12ec0:	bcc	13014 <access_monster_buffer@@Base+0x2fc>
   12ec4:	ldrh	r1, [r5, #18]
   12ec8:	cmp	r1, #0
   12ecc:	beq	13014 <access_monster_buffer@@Base+0x2fc>
   12ed0:	mov	r0, r4
   12ed4:	ldr	r1, [r0, r1]!
   12ed8:	ldr	r1, [r0, r1]!
   12edc:	cmp	r1, #2
   12ee0:	bne	13014 <access_monster_buffer@@Base+0x2fc>
   12ee4:	add	r1, r0, #4
   12ee8:	ldr	r0, [r1, #4]!
   12eec:	ldr	r0, [r1, r0]!
   12ef0:	mov	r2, r1
   12ef4:	ldrh	r3, [r2, -r0]!
   12ef8:	cmp	r3, #6
   12efc:	bcc	13034 <access_monster_buffer@@Base+0x31c>
   12f00:	ldrh	r6, [r2, #4]
   12f04:	mov	r7, #0
   12f08:	mov	r0, #0
   12f0c:	cmp	r6, #0
   12f10:	beq	12f24 <access_monster_buffer@@Base+0x20c>
   12f14:	mov	r0, r1
   12f18:	ldr	r6, [r0, r6]!
   12f1c:	add	r0, r0, r6
   12f20:	add	r0, r0, #4
   12f24:	cmp	r3, #8
   12f28:	bcc	12f3c <access_monster_buffer@@Base+0x224>
   12f2c:	ldrh	r2, [r2, #6]
   12f30:	cmp	r2, #0
   12f34:	addne	r1, r1, r2
   12f38:	ldrhne	r7, [r1]
   12f3c:	cmp	r0, #0
   12f40:	beq	13034 <access_monster_buffer@@Base+0x31c>
   12f44:	movw	r1, #34586	; 0x871a
   12f48:	movt	r1, #1
   12f4c:	bl	12370 <strcmp@plt>
   12f50:	cmp	r0, #0
   12f54:	bne	13034 <access_monster_buffer@@Base+0x31c>
   12f58:	cmp	r7, #5
   12f5c:	bne	13214 <access_monster_buffer@@Base+0x4fc>
   12f60:	cmp	r8, #22
   12f64:	bcc	1300c <access_monster_buffer@@Base+0x2f4>
   12f68:	ldrh	r0, [r5, #20]
   12f6c:	cmp	r0, #0
   12f70:	beq	1300c <access_monster_buffer@@Base+0x2f4>
   12f74:	ldrb	r0, [r4, r0]
   12f78:	cmp	r0, #1
   12f7c:	bne	1300c <access_monster_buffer@@Base+0x2f4>
   12f80:	cmp	r8, #24
   12f84:	bcc	13234 <access_monster_buffer@@Base+0x51c>
   12f88:	ldrh	r0, [r5, #22]
   12f8c:	cmp	r0, #0
   12f90:	beq	13234 <access_monster_buffer@@Base+0x51c>
   12f94:	ldr	r0, [r4, r0]!
   12f98:	mov	r5, #0
   12f9c:	ldr	r0, [r4, r0]!
   12fa0:	mov	r1, r4
   12fa4:	ldrh	r2, [r1, -r0]!
   12fa8:	mov	r0, #0
   12fac:	cmp	r2, #5
   12fb0:	bls	12ff0 <access_monster_buffer@@Base+0x2d8>
   12fb4:	ldrh	r3, [r1, #4]
   12fb8:	mov	r5, #0
   12fbc:	mov	r0, #0
   12fc0:	cmp	r3, #0
   12fc4:	beq	12fd8 <access_monster_buffer@@Base+0x2c0>
   12fc8:	mov	r0, r4
   12fcc:	ldr	r3, [r0, r3]!
   12fd0:	add	r0, r0, r3
   12fd4:	add	r0, r0, #4
   12fd8:	cmp	r2, #8
   12fdc:	bcc	12ff0 <access_monster_buffer@@Base+0x2d8>
   12fe0:	ldrh	r1, [r1, #6]
   12fe4:	cmp	r1, #0
   12fe8:	addne	r1, r4, r1
   12fec:	ldrhne	r5, [r1]
   12ff0:	movw	r1, #34586	; 0x871a
   12ff4:	movt	r1, #1
   12ff8:	bl	12370 <strcmp@plt>
   12ffc:	cmp	r0, #0
   13000:	bne	13254 <access_monster_buffer@@Base+0x53c>
   13004:	cmp	r5, #5
   13008:	bne	13274 <access_monster_buffer@@Base+0x55c>
   1300c:	mov	r0, #0
   13010:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   13014:	movw	r0, #40598	; 0x9e96
   13018:	movw	r1, #34594	; 0x8722
   1301c:	movw	r3, #34668	; 0x876c
   13020:	movw	r2, #271	; 0x10f
   13024:	movt	r0, #1
   13028:	movt	r1, #1
   1302c:	movt	r3, #1
   13030:	bl	12418 <__assert_fail@plt>
   13034:	movw	r0, #40598	; 0x9e96
   13038:	movw	r1, #34594	; 0x8722
   1303c:	movw	r3, #34668	; 0x876c
   13040:	movw	r2, #275	; 0x113
   13044:	movt	r0, #1
   13048:	movt	r1, #1
   1304c:	movt	r3, #1
   13050:	bl	12418 <__assert_fail@plt>
   13054:	movw	r0, #40598	; 0x9e96
   13058:	movw	r1, #34594	; 0x8722
   1305c:	movw	r3, #34668	; 0x876c
   13060:	mov	r2, #227	; 0xe3
   13064:	movt	r0, #1
   13068:	movt	r1, #1
   1306c:	movt	r3, #1
   13070:	bl	12418 <__assert_fail@plt>
   13074:	movw	r0, #40598	; 0x9e96
   13078:	movw	r1, #34594	; 0x8722
   1307c:	movw	r3, #34668	; 0x876c
   13080:	movw	r2, #261	; 0x105
   13084:	movt	r0, #1
   13088:	movt	r1, #1
   1308c:	movt	r3, #1
   13090:	bl	12418 <__assert_fail@plt>
   13094:	movw	r0, #40598	; 0x9e96
   13098:	movw	r1, #34594	; 0x8722
   1309c:	movw	r3, #34668	; 0x876c
   130a0:	mov	r2, #219	; 0xdb
   130a4:	movt	r0, #1
   130a8:	movt	r1, #1
   130ac:	movt	r3, #1
   130b0:	bl	12418 <__assert_fail@plt>
   130b4:	movw	r0, #40598	; 0x9e96
   130b8:	movw	r1, #34594	; 0x8722
   130bc:	movw	r3, #34668	; 0x876c
   130c0:	mov	r2, #211	; 0xd3
   130c4:	movt	r0, #1
   130c8:	movt	r1, #1
   130cc:	movt	r3, #1
   130d0:	bl	12418 <__assert_fail@plt>
   130d4:	movw	r0, #40598	; 0x9e96
   130d8:	movw	r1, #34594	; 0x8722
   130dc:	movw	r3, #34668	; 0x876c
   130e0:	mov	r2, #221	; 0xdd
   130e4:	movt	r0, #1
   130e8:	movt	r1, #1
   130ec:	movt	r3, #1
   130f0:	bl	12418 <__assert_fail@plt>
   130f4:	movw	r0, #40598	; 0x9e96
   130f8:	movw	r1, #34594	; 0x8722
   130fc:	movw	r3, #34668	; 0x876c
   13100:	mov	r2, #222	; 0xde
   13104:	movt	r0, #1
   13108:	movt	r1, #1
   1310c:	movt	r3, #1
   13110:	bl	12418 <__assert_fail@plt>
   13114:	movw	r0, #40598	; 0x9e96
   13118:	movw	r1, #34594	; 0x8722
   1311c:	movw	r3, #34668	; 0x876c
   13120:	mov	r2, #223	; 0xdf
   13124:	movt	r0, #1
   13128:	movt	r1, #1
   1312c:	movt	r3, #1
   13130:	bl	12418 <__assert_fail@plt>
   13134:	movw	r0, #40598	; 0x9e96
   13138:	movw	r1, #34594	; 0x8722
   1313c:	movw	r3, #34668	; 0x876c
   13140:	mov	r2, #228	; 0xe4
   13144:	movt	r0, #1
   13148:	movt	r1, #1
   1314c:	movt	r3, #1
   13150:	bl	12418 <__assert_fail@plt>
   13154:	movw	r0, #40598	; 0x9e96
   13158:	movw	r1, #34594	; 0x8722
   1315c:	movw	r3, #34668	; 0x876c
   13160:	mov	r2, #232	; 0xe8
   13164:	movt	r0, #1
   13168:	movt	r1, #1
   1316c:	movt	r3, #1
   13170:	bl	12418 <__assert_fail@plt>
   13174:	movw	r0, #40598	; 0x9e96
   13178:	movw	r1, #34594	; 0x8722
   1317c:	movw	r3, #34668	; 0x876c
   13180:	mov	r2, #240	; 0xf0
   13184:	movt	r0, #1
   13188:	movt	r1, #1
   1318c:	movt	r3, #1
   13190:	bl	12418 <__assert_fail@plt>
   13194:	movw	r0, #40598	; 0x9e96
   13198:	movw	r1, #34594	; 0x8722
   1319c:	movw	r3, #34668	; 0x876c
   131a0:	mov	r2, #241	; 0xf1
   131a4:	movt	r0, #1
   131a8:	movt	r1, #1
   131ac:	movt	r3, #1
   131b0:	bl	12418 <__assert_fail@plt>
   131b4:	movw	r0, #40598	; 0x9e96
   131b8:	movw	r1, #34594	; 0x8722
   131bc:	movw	r3, #34668	; 0x876c
   131c0:	mov	r2, #242	; 0xf2
   131c4:	movt	r0, #1
   131c8:	movt	r1, #1
   131cc:	movt	r3, #1
   131d0:	bl	12418 <__assert_fail@plt>
   131d4:	movw	r0, #40598	; 0x9e96
   131d8:	movw	r1, #34594	; 0x8722
   131dc:	movw	r3, #34668	; 0x876c
   131e0:	movw	r2, #263	; 0x107
   131e4:	movt	r0, #1
   131e8:	movt	r1, #1
   131ec:	movt	r3, #1
   131f0:	bl	12418 <__assert_fail@plt>
   131f4:	movw	r0, #40598	; 0x9e96
   131f8:	movw	r1, #34594	; 0x8722
   131fc:	movw	r3, #34668	; 0x876c
   13200:	movw	r2, #267	; 0x10b
   13204:	movt	r0, #1
   13208:	movt	r1, #1
   1320c:	movt	r3, #1
   13210:	bl	12418 <__assert_fail@plt>
   13214:	movw	r0, #40598	; 0x9e96
   13218:	movw	r1, #34594	; 0x8722
   1321c:	movw	r3, #34668	; 0x876c
   13220:	mov	r2, #276	; 0x114
   13224:	movt	r0, #1
   13228:	movt	r1, #1
   1322c:	movt	r3, #1
   13230:	bl	12418 <__assert_fail@plt>
   13234:	movw	r0, #35274	; 0x89ca
   13238:	movw	r1, #35312	; 0x89f0
   1323c:	movw	r3, #35403	; 0x8a4b
   13240:	mov	r2, #148	; 0x94
   13244:	movt	r0, #1
   13248:	movt	r1, #1
   1324c:	movt	r3, #1
   13250:	bl	12418 <__assert_fail@plt>
   13254:	movw	r0, #40598	; 0x9e96
   13258:	movw	r1, #34594	; 0x8722
   1325c:	movw	r3, #34668	; 0x876c
   13260:	movw	r2, #286	; 0x11e
   13264:	movt	r0, #1
   13268:	movt	r1, #1
   1326c:	movt	r3, #1
   13270:	bl	12418 <__assert_fail@plt>
   13274:	movw	r0, #40598	; 0x9e96
   13278:	movw	r1, #34594	; 0x8722
   1327c:	movw	r3, #34668	; 0x876c
   13280:	movw	r2, #287	; 0x11f
   13284:	movt	r0, #1
   13288:	movt	r1, #1
   1328c:	movt	r3, #1
   13290:	bl	12418 <__assert_fail@plt>

00013294 <main@@Base>:
   13294:	push	{r4, r5, r6, sl, fp, lr}
   13298:	add	fp, sp, #16
   1329c:	sub	sp, sp, #240	; 0xf0
   132a0:	add	r4, sp, #8
   132a4:	mov	r0, r4
   132a8:	bl	13508 <flatcc_builder_init@@Base>
   132ac:	mov	r0, r4
   132b0:	mov	r1, #0
   132b4:	bl	12514 <create_monster_bottom_up@@Base>
   132b8:	add	r5, sp, #4
   132bc:	mov	r0, r4
   132c0:	mov	r1, r5
   132c4:	bl	17fa8 <flatcc_builder_finalize_aligned_buffer@@Base>
   132c8:	bl	180e8 <flatcc_builder_aligned_free@@Base>
   132cc:	mov	r0, r4
   132d0:	bl	13aa4 <flatcc_builder_reset@@Base>
   132d4:	mov	r0, r4
   132d8:	mov	r1, #1
   132dc:	bl	12514 <create_monster_bottom_up@@Base>
   132e0:	mov	r0, r4
   132e4:	mov	r1, r5
   132e8:	bl	17fa8 <flatcc_builder_finalize_aligned_buffer@@Base>
   132ec:	mov	r6, r0
   132f0:	bl	12d18 <access_monster_buffer@@Base>
   132f4:	mov	r0, r6
   132f8:	bl	180e8 <flatcc_builder_aligned_free@@Base>
   132fc:	mov	r0, r4
   13300:	bl	13aa4 <flatcc_builder_reset@@Base>
   13304:	mov	r0, r4
   13308:	bl	129f8 <create_monster_top_down@@Base>
   1330c:	mov	r0, r4
   13310:	mov	r1, r5
   13314:	bl	17eec <flatcc_builder_finalize_buffer@@Base>
   13318:	mov	r5, r0
   1331c:	bl	12d18 <access_monster_buffer@@Base>
   13320:	mov	r0, r5
   13324:	bl	1237c <free@plt>
   13328:	mov	r0, r4
   1332c:	bl	13ab0 <flatcc_builder_clear@@Base>
   13330:	movw	r0, #35480	; 0x8a98
   13334:	movt	r0, #1
   13338:	bl	123a0 <puts@plt>
   1333c:	mov	r0, #0
   13340:	sub	sp, fp, #16
   13344:	pop	{r4, r5, r6, sl, fp, pc}

00013348 <flatcc_builder_default_alloc@@Base>:
   13348:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1334c:	add	fp, sp, #24
   13350:	mov	r4, r1
   13354:	cmp	r2, #0
   13358:	beq	133a0 <flatcc_builder_default_alloc@@Base+0x58>
   1335c:	ldr	r0, [fp, #8]
   13360:	mov	r8, r3
   13364:	sub	r1, r0, #1
   13368:	cmp	r1, #6
   1336c:	bhi	133d0 <flatcc_builder_default_alloc@@Base+0x88>
   13370:	add	r3, pc, #4
   13374:	mov	r0, #256	; 0x100
   13378:	ldr	pc, [r3, r1, lsl #2]
   1337c:	andeq	r3, r1, r4, ror #7
   13380:	ldrdeq	r3, [r1], -r0
   13384:	ldrdeq	r3, [r1], -r0
   13388:	muleq	r1, r8, r3
   1338c:	ldrdeq	r3, [r1], -r8
   13390:	ldrdeq	r3, [r1], -r0
   13394:	andeq	r3, r1, r0, ror #7
   13398:	mov	r0, #288	; 0x120
   1339c:	b	133e4 <flatcc_builder_default_alloc@@Base+0x9c>
   133a0:	ldr	r0, [r4]
   133a4:	cmp	r0, #0
   133a8:	beq	133c4 <flatcc_builder_default_alloc@@Base+0x7c>
   133ac:	bl	1237c <free@plt>
   133b0:	mov	r6, #0
   133b4:	mov	r0, r6
   133b8:	str	r6, [r4]
   133bc:	str	r6, [r4, #4]
   133c0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   133c4:	mov	r6, #0
   133c8:	mov	r0, r6
   133cc:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   133d0:	mov	r0, #32
   133d4:	b	133e4 <flatcc_builder_default_alloc@@Base+0x9c>
   133d8:	mov	r0, r2
   133dc:	b	133e4 <flatcc_builder_default_alloc@@Base+0x9c>
   133e0:	mov	r0, #64	; 0x40
   133e4:	mov	r7, r0
   133e8:	lsl	r0, r0, #1
   133ec:	cmp	r7, r2
   133f0:	bcc	133e4 <flatcc_builder_default_alloc@@Base+0x9c>
   133f4:	ldr	r0, [r4, #4]
   133f8:	mov	r6, #0
   133fc:	cmp	r0, r2
   13400:	lsrcs	r0, r0, #1
   13404:	cmpcs	r0, r7
   13408:	bcs	1344c <flatcc_builder_default_alloc@@Base+0x104>
   1340c:	ldr	r0, [r4]
   13410:	mov	r1, r7
   13414:	bl	12394 <realloc@plt>
   13418:	cmp	r0, #0
   1341c:	beq	13454 <flatcc_builder_default_alloc@@Base+0x10c>
   13420:	mov	r5, r0
   13424:	cmp	r8, #0
   13428:	beq	13448 <flatcc_builder_default_alloc@@Base+0x100>
   1342c:	ldr	r1, [r4, #4]
   13430:	cmp	r7, r1
   13434:	bls	13448 <flatcc_builder_default_alloc@@Base+0x100>
   13438:	add	r0, r5, r1
   1343c:	sub	r2, r7, r1
   13440:	mov	r1, #0
   13444:	bl	123f4 <memset@plt>
   13448:	stm	r4, {r5, r7}
   1344c:	mov	r0, r6
   13450:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   13454:	mvn	r6, #0
   13458:	mov	r0, r6
   1345c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}

00013460 <flatcc_builder_flush_vtable_cache@@Base>:
   13460:	push	{r4, r5, fp, lr}
   13464:	add	fp, sp, #8
   13468:	mov	r4, r0
   1346c:	ldr	r0, [r0, #116]	; 0x74
   13470:	cmp	r0, #0
   13474:	popeq	{r4, r5, fp, pc}
   13478:	ldr	r0, [r4, #92]	; 0x5c
   1347c:	ldr	r2, [r4, #96]	; 0x60
   13480:	mov	r1, #0
   13484:	mov	r5, #0
   13488:	bl	123f4 <memset@plt>
   1348c:	mov	r0, #16
   13490:	str	r5, [r4, #120]	; 0x78
   13494:	str	r0, [r4, #124]	; 0x7c
   13498:	pop	{r4, r5, fp, pc}

0001349c <flatcc_builder_custom_init@@Base>:
   1349c:	push	{r4, r5, r6, r7, fp, lr}
   134a0:	add	fp, sp, #16
   134a4:	mov	r6, r2
   134a8:	mov	r7, r1
   134ac:	mov	r1, #0
   134b0:	mov	r2, #232	; 0xe8
   134b4:	mov	r5, r3
   134b8:	mov	r4, r0
   134bc:	bl	123f4 <memset@plt>
   134c0:	ldr	r0, [fp, #8]
   134c4:	cmp	r7, #0
   134c8:	bne	134e0 <flatcc_builder_custom_init@@Base+0x44>
   134cc:	movw	r7, #33408	; 0x8280
   134d0:	mov	r1, #1
   134d4:	add	r6, r4, #188	; 0xbc
   134d8:	movt	r7, #1
   134dc:	str	r1, [r4, #184]	; 0xb8
   134e0:	movw	r1, #13128	; 0x3348
   134e4:	cmp	r5, #0
   134e8:	str	r6, [r4, #36]	; 0x24
   134ec:	str	r0, [r4, #40]	; 0x28
   134f0:	mov	r0, #0
   134f4:	str	r7, [r4, #44]	; 0x2c
   134f8:	movt	r1, #1
   134fc:	movne	r1, r5
   13500:	str	r1, [r4, #48]	; 0x30
   13504:	pop	{r4, r5, r6, r7, fp, pc}

00013508 <flatcc_builder_init@@Base>:
   13508:	push	{r4, r5, fp, lr}
   1350c:	add	fp, sp, #8
   13510:	mov	r1, #0
   13514:	mov	r2, #232	; 0xe8
   13518:	mov	r4, r0
   1351c:	mov	r5, #0
   13520:	bl	123f4 <memset@plt>
   13524:	mov	r0, #1
   13528:	movw	r1, #33408	; 0x8280
   1352c:	add	r2, r4, #188	; 0xbc
   13530:	str	r0, [r4, #184]	; 0xb8
   13534:	movw	r0, #13128	; 0x3348
   13538:	movt	r1, #1
   1353c:	str	r2, [r4, #36]	; 0x24
   13540:	str	r5, [r4, #40]	; 0x28
   13544:	movt	r0, #1
   13548:	str	r1, [r4, #44]	; 0x2c
   1354c:	str	r0, [r4, #48]	; 0x30
   13550:	mov	r0, #0
   13554:	pop	{r4, r5, fp, pc}

00013558 <flatcc_builder_custom_reset@@Base>:
   13558:	push	{r4, r5, r6, sl, fp, lr}
   1355c:	add	fp, sp, #16
   13560:	sub	sp, sp, #8
   13564:	mov	r5, r1
   13568:	mov	r4, r0
   1356c:	cmp	r2, #0
   13570:	beq	135d0 <flatcc_builder_custom_reset@@Base+0x78>
   13574:	mov	r1, r4
   13578:	ldr	r0, [r1, #52]!	; 0x34
   1357c:	cmp	r0, #0
   13580:	beq	135fc <flatcc_builder_custom_reset@@Base+0xa4>
   13584:	ldr	r0, [r4, #40]	; 0x28
   13588:	ldr	r6, [r4, #48]	; 0x30
   1358c:	mov	r2, #0
   13590:	mov	r3, #1
   13594:	str	r2, [sp]
   13598:	mov	r2, #1
   1359c:	blx	r6
   135a0:	mvn	r6, #0
   135a4:	cmp	r0, #0
   135a8:	bne	138b0 <flatcc_builder_custom_reset@@Base+0x358>
   135ac:	ldr	r0, [r4, #52]	; 0x34
   135b0:	ldr	r2, [r4, #56]	; 0x38
   135b4:	mov	r1, #0
   135b8:	bl	123f4 <memset@plt>
   135bc:	mov	r1, r4
   135c0:	ldr	r0, [r1, #60]!	; 0x3c
   135c4:	cmp	r0, #0
   135c8:	bne	13618 <flatcc_builder_custom_reset@@Base+0xc0>
   135cc:	b	13664 <flatcc_builder_custom_reset@@Base+0x10c>
   135d0:	ldr	r0, [r4, #52]	; 0x34
   135d4:	ldr	r2, [r4, #56]	; 0x38
   135d8:	cmp	r0, #0
   135dc:	beq	136cc <flatcc_builder_custom_reset@@Base+0x174>
   135e0:	mov	r1, #0
   135e4:	bl	123f4 <memset@plt>
   135e8:	ldr	r0, [r4, #60]	; 0x3c
   135ec:	ldr	r2, [r4, #64]	; 0x40
   135f0:	cmp	r0, #0
   135f4:	bne	136e4 <flatcc_builder_custom_reset@@Base+0x18c>
   135f8:	b	13700 <flatcc_builder_custom_reset@@Base+0x1a8>
   135fc:	ldr	r0, [r4, #56]	; 0x38
   13600:	cmp	r0, #0
   13604:	bne	13a84 <flatcc_builder_custom_reset@@Base+0x52c>
   13608:	mov	r1, r4
   1360c:	ldr	r0, [r1, #60]!	; 0x3c
   13610:	cmp	r0, #0
   13614:	beq	13664 <flatcc_builder_custom_reset@@Base+0x10c>
   13618:	ldr	r0, [r4, #40]	; 0x28
   1361c:	ldr	r6, [r4, #48]	; 0x30
   13620:	mov	r2, #1
   13624:	mov	r3, #1
   13628:	str	r2, [sp]
   1362c:	mov	r2, #1
   13630:	blx	r6
   13634:	mvn	r6, #0
   13638:	cmp	r0, #0
   1363c:	bne	138b0 <flatcc_builder_custom_reset@@Base+0x358>
   13640:	ldr	r0, [r4, #60]	; 0x3c
   13644:	ldr	r2, [r4, #64]	; 0x40
   13648:	mov	r1, #0
   1364c:	bl	123f4 <memset@plt>
   13650:	mov	r1, r4
   13654:	ldr	r0, [r1, #68]!	; 0x44
   13658:	cmp	r0, #0
   1365c:	bne	13680 <flatcc_builder_custom_reset@@Base+0x128>
   13660:	b	138bc <flatcc_builder_custom_reset@@Base+0x364>
   13664:	ldr	r0, [r4, #64]	; 0x40
   13668:	cmp	r0, #0
   1366c:	bne	13a84 <flatcc_builder_custom_reset@@Base+0x52c>
   13670:	mov	r1, r4
   13674:	ldr	r0, [r1, #68]!	; 0x44
   13678:	cmp	r0, #0
   1367c:	beq	138bc <flatcc_builder_custom_reset@@Base+0x364>
   13680:	ldr	r0, [r4, #40]	; 0x28
   13684:	ldr	r6, [r4, #48]	; 0x30
   13688:	mov	r2, #2
   1368c:	mov	r3, #1
   13690:	str	r2, [sp]
   13694:	mov	r2, #1
   13698:	blx	r6
   1369c:	mvn	r6, #0
   136a0:	cmp	r0, #0
   136a4:	bne	138b0 <flatcc_builder_custom_reset@@Base+0x358>
   136a8:	ldr	r0, [r4, #68]	; 0x44
   136ac:	ldr	r2, [r4, #72]	; 0x48
   136b0:	mov	r1, #0
   136b4:	bl	123f4 <memset@plt>
   136b8:	mov	r1, r4
   136bc:	ldr	r0, [r1, #76]!	; 0x4c
   136c0:	cmp	r0, #0
   136c4:	bne	138d8 <flatcc_builder_custom_reset@@Base+0x380>
   136c8:	b	13924 <flatcc_builder_custom_reset@@Base+0x3cc>
   136cc:	cmp	r2, #0
   136d0:	bne	13a84 <flatcc_builder_custom_reset@@Base+0x52c>
   136d4:	ldr	r0, [r4, #60]	; 0x3c
   136d8:	ldr	r2, [r4, #64]	; 0x40
   136dc:	cmp	r0, #0
   136e0:	beq	13700 <flatcc_builder_custom_reset@@Base+0x1a8>
   136e4:	mov	r1, #0
   136e8:	bl	123f4 <memset@plt>
   136ec:	ldr	r0, [r4, #68]	; 0x44
   136f0:	ldr	r2, [r4, #72]	; 0x48
   136f4:	cmp	r0, #0
   136f8:	bne	13718 <flatcc_builder_custom_reset@@Base+0x1c0>
   136fc:	b	13734 <flatcc_builder_custom_reset@@Base+0x1dc>
   13700:	cmp	r2, #0
   13704:	bne	13a84 <flatcc_builder_custom_reset@@Base+0x52c>
   13708:	ldr	r0, [r4, #68]	; 0x44
   1370c:	ldr	r2, [r4, #72]	; 0x48
   13710:	cmp	r0, #0
   13714:	beq	13734 <flatcc_builder_custom_reset@@Base+0x1dc>
   13718:	mov	r1, #0
   1371c:	bl	123f4 <memset@plt>
   13720:	ldr	r0, [r4, #76]	; 0x4c
   13724:	ldr	r2, [r4, #80]	; 0x50
   13728:	cmp	r0, #0
   1372c:	bne	1374c <flatcc_builder_custom_reset@@Base+0x1f4>
   13730:	b	13768 <flatcc_builder_custom_reset@@Base+0x210>
   13734:	cmp	r2, #0
   13738:	bne	13a84 <flatcc_builder_custom_reset@@Base+0x52c>
   1373c:	ldr	r0, [r4, #76]	; 0x4c
   13740:	ldr	r2, [r4, #80]	; 0x50
   13744:	cmp	r0, #0
   13748:	beq	13768 <flatcc_builder_custom_reset@@Base+0x210>
   1374c:	mov	r1, #0
   13750:	bl	123f4 <memset@plt>
   13754:	ldr	r0, [r4, #84]	; 0x54
   13758:	ldr	r2, [r4, #88]	; 0x58
   1375c:	cmp	r0, #0
   13760:	bne	13780 <flatcc_builder_custom_reset@@Base+0x228>
   13764:	b	1379c <flatcc_builder_custom_reset@@Base+0x244>
   13768:	cmp	r2, #0
   1376c:	bne	13a84 <flatcc_builder_custom_reset@@Base+0x52c>
   13770:	ldr	r0, [r4, #84]	; 0x54
   13774:	ldr	r2, [r4, #88]	; 0x58
   13778:	cmp	r0, #0
   1377c:	beq	1379c <flatcc_builder_custom_reset@@Base+0x244>
   13780:	mov	r1, #0
   13784:	bl	123f4 <memset@plt>
   13788:	ldr	r0, [r4, #92]	; 0x5c
   1378c:	ldr	r2, [r4, #96]	; 0x60
   13790:	cmp	r0, #0
   13794:	bne	137b4 <flatcc_builder_custom_reset@@Base+0x25c>
   13798:	b	137d0 <flatcc_builder_custom_reset@@Base+0x278>
   1379c:	cmp	r2, #0
   137a0:	bne	13a84 <flatcc_builder_custom_reset@@Base+0x52c>
   137a4:	ldr	r0, [r4, #92]	; 0x5c
   137a8:	ldr	r2, [r4, #96]	; 0x60
   137ac:	cmp	r0, #0
   137b0:	beq	137d0 <flatcc_builder_custom_reset@@Base+0x278>
   137b4:	mov	r1, #0
   137b8:	bl	123f4 <memset@plt>
   137bc:	ldr	r0, [r4, #100]	; 0x64
   137c0:	ldr	r2, [r4, #104]	; 0x68
   137c4:	cmp	r0, #0
   137c8:	bne	137e8 <flatcc_builder_custom_reset@@Base+0x290>
   137cc:	b	13804 <flatcc_builder_custom_reset@@Base+0x2ac>
   137d0:	cmp	r2, #0
   137d4:	bne	13a84 <flatcc_builder_custom_reset@@Base+0x52c>
   137d8:	ldr	r0, [r4, #100]	; 0x64
   137dc:	ldr	r2, [r4, #104]	; 0x68
   137e0:	cmp	r0, #0
   137e4:	beq	13804 <flatcc_builder_custom_reset@@Base+0x2ac>
   137e8:	mov	r1, #0
   137ec:	bl	123f4 <memset@plt>
   137f0:	ldr	r0, [r4, #108]	; 0x6c
   137f4:	ldr	r2, [r4, #112]	; 0x70
   137f8:	cmp	r0, #0
   137fc:	bne	1381c <flatcc_builder_custom_reset@@Base+0x2c4>
   13800:	b	13828 <flatcc_builder_custom_reset@@Base+0x2d0>
   13804:	cmp	r2, #0
   13808:	bne	13a84 <flatcc_builder_custom_reset@@Base+0x52c>
   1380c:	ldr	r0, [r4, #108]	; 0x6c
   13810:	ldr	r2, [r4, #112]	; 0x70
   13814:	cmp	r0, #0
   13818:	beq	13828 <flatcc_builder_custom_reset@@Base+0x2d0>
   1381c:	mov	r1, #0
   13820:	bl	123f4 <memset@plt>
   13824:	b	13830 <flatcc_builder_custom_reset@@Base+0x2d8>
   13828:	cmp	r2, #0
   1382c:	bne	13a84 <flatcc_builder_custom_reset@@Base+0x52c>
   13830:	mov	r0, #0
   13834:	vmov.i32	q8, #0	; 0x00000000
   13838:	mov	r6, #0
   1383c:	str	r0, [r4, #120]	; 0x78
   13840:	ldr	r1, [r4, #124]	; 0x7c
   13844:	cmp	r1, #0
   13848:	movne	r1, #16
   1384c:	strne	r1, [r4, #124]	; 0x7c
   13850:	add	r1, r4, #148	; 0x94
   13854:	str	r0, [r4, #136]	; 0x88
   13858:	str	r0, [r4, #140]	; 0x8c
   1385c:	strh	r0, [r4, #128]	; 0x80
   13860:	str	r0, [r4, #32]
   13864:	cmp	r5, #0
   13868:	vst1.32	{d16-d17}, [r1]
   1386c:	ldr	r2, [r4, #60]	; 0x3c
   13870:	ldr	r1, [r4, #52]	; 0x34
   13874:	ldr	r3, [r4, #76]	; 0x4c
   13878:	str	r2, [r4, #16]
   1387c:	str	r0, [r4, #20]
   13880:	str	r0, [r4, #24]
   13884:	movne	r0, #0
   13888:	str	r3, [r4]
   1388c:	str	r1, [r4, #4]
   13890:	strne	r0, [r4, #172]	; 0xac
   13894:	strne	r0, [r4, #176]	; 0xb0
   13898:	strne	r0, [r4, #180]	; 0xb4
   1389c:	ldr	r0, [r4, #184]	; 0xb8
   138a0:	cmp	r0, #0
   138a4:	beq	138b0 <flatcc_builder_custom_reset@@Base+0x358>
   138a8:	add	r0, r4, #188	; 0xbc
   138ac:	bl	18148 <flatcc_emitter_reset@@Base>
   138b0:	mov	r0, r6
   138b4:	sub	sp, fp, #16
   138b8:	pop	{r4, r5, r6, sl, fp, pc}
   138bc:	ldr	r0, [r4, #72]	; 0x48
   138c0:	cmp	r0, #0
   138c4:	bne	13a84 <flatcc_builder_custom_reset@@Base+0x52c>
   138c8:	mov	r1, r4
   138cc:	ldr	r0, [r1, #76]!	; 0x4c
   138d0:	cmp	r0, #0
   138d4:	beq	13924 <flatcc_builder_custom_reset@@Base+0x3cc>
   138d8:	ldr	r0, [r4, #40]	; 0x28
   138dc:	ldr	r6, [r4, #48]	; 0x30
   138e0:	mov	r2, #3
   138e4:	mov	r3, #1
   138e8:	str	r2, [sp]
   138ec:	mov	r2, #1
   138f0:	blx	r6
   138f4:	mvn	r6, #0
   138f8:	cmp	r0, #0
   138fc:	bne	138b0 <flatcc_builder_custom_reset@@Base+0x358>
   13900:	ldr	r0, [r4, #76]	; 0x4c
   13904:	ldr	r2, [r4, #80]	; 0x50
   13908:	mov	r1, #0
   1390c:	bl	123f4 <memset@plt>
   13910:	mov	r1, r4
   13914:	ldr	r0, [r1, #84]!	; 0x54
   13918:	cmp	r0, #0
   1391c:	bne	13940 <flatcc_builder_custom_reset@@Base+0x3e8>
   13920:	b	1398c <flatcc_builder_custom_reset@@Base+0x434>
   13924:	ldr	r0, [r4, #80]	; 0x50
   13928:	cmp	r0, #0
   1392c:	bne	13a84 <flatcc_builder_custom_reset@@Base+0x52c>
   13930:	mov	r1, r4
   13934:	ldr	r0, [r1, #84]!	; 0x54
   13938:	cmp	r0, #0
   1393c:	beq	1398c <flatcc_builder_custom_reset@@Base+0x434>
   13940:	ldr	r0, [r4, #40]	; 0x28
   13944:	ldr	r6, [r4, #48]	; 0x30
   13948:	mov	r2, #4
   1394c:	mov	r3, #1
   13950:	str	r2, [sp]
   13954:	mov	r2, #1
   13958:	blx	r6
   1395c:	mvn	r6, #0
   13960:	cmp	r0, #0
   13964:	bne	138b0 <flatcc_builder_custom_reset@@Base+0x358>
   13968:	ldr	r0, [r4, #84]	; 0x54
   1396c:	ldr	r2, [r4, #88]	; 0x58
   13970:	mov	r1, #0
   13974:	bl	123f4 <memset@plt>
   13978:	ldr	r0, [r4, #92]	; 0x5c
   1397c:	ldr	r2, [r4, #96]	; 0x60
   13980:	cmp	r0, #0
   13984:	bne	139a8 <flatcc_builder_custom_reset@@Base+0x450>
   13988:	b	139c4 <flatcc_builder_custom_reset@@Base+0x46c>
   1398c:	ldr	r0, [r4, #88]	; 0x58
   13990:	cmp	r0, #0
   13994:	bne	13a84 <flatcc_builder_custom_reset@@Base+0x52c>
   13998:	ldr	r0, [r4, #92]	; 0x5c
   1399c:	ldr	r2, [r4, #96]	; 0x60
   139a0:	cmp	r0, #0
   139a4:	beq	139c4 <flatcc_builder_custom_reset@@Base+0x46c>
   139a8:	mov	r1, #0
   139ac:	bl	123f4 <memset@plt>
   139b0:	mov	r1, r4
   139b4:	ldr	r0, [r1, #100]!	; 0x64
   139b8:	cmp	r0, #0
   139bc:	bne	139dc <flatcc_builder_custom_reset@@Base+0x484>
   139c0:	b	13a28 <flatcc_builder_custom_reset@@Base+0x4d0>
   139c4:	cmp	r2, #0
   139c8:	bne	13a84 <flatcc_builder_custom_reset@@Base+0x52c>
   139cc:	mov	r1, r4
   139d0:	ldr	r0, [r1, #100]!	; 0x64
   139d4:	cmp	r0, #0
   139d8:	beq	13a28 <flatcc_builder_custom_reset@@Base+0x4d0>
   139dc:	ldr	r0, [r4, #40]	; 0x28
   139e0:	ldr	r6, [r4, #48]	; 0x30
   139e4:	mov	r2, #6
   139e8:	mov	r3, #1
   139ec:	str	r2, [sp]
   139f0:	mov	r2, #1
   139f4:	blx	r6
   139f8:	mvn	r6, #0
   139fc:	cmp	r0, #0
   13a00:	bne	138b0 <flatcc_builder_custom_reset@@Base+0x358>
   13a04:	ldr	r0, [r4, #100]	; 0x64
   13a08:	ldr	r2, [r4, #104]	; 0x68
   13a0c:	mov	r1, #0
   13a10:	bl	123f4 <memset@plt>
   13a14:	mov	r1, r4
   13a18:	ldr	r0, [r1, #108]!	; 0x6c
   13a1c:	cmp	r0, #0
   13a20:	bne	13a44 <flatcc_builder_custom_reset@@Base+0x4ec>
   13a24:	b	13a78 <flatcc_builder_custom_reset@@Base+0x520>
   13a28:	ldr	r0, [r4, #104]	; 0x68
   13a2c:	cmp	r0, #0
   13a30:	bne	13a84 <flatcc_builder_custom_reset@@Base+0x52c>
   13a34:	mov	r1, r4
   13a38:	ldr	r0, [r1, #108]!	; 0x6c
   13a3c:	cmp	r0, #0
   13a40:	beq	13a78 <flatcc_builder_custom_reset@@Base+0x520>
   13a44:	ldr	r0, [r4, #40]	; 0x28
   13a48:	ldr	r6, [r4, #48]	; 0x30
   13a4c:	mov	r2, #7
   13a50:	mov	r3, #1
   13a54:	str	r2, [sp]
   13a58:	mov	r2, #1
   13a5c:	blx	r6
   13a60:	mvn	r6, #0
   13a64:	cmp	r0, #0
   13a68:	bne	138b0 <flatcc_builder_custom_reset@@Base+0x358>
   13a6c:	ldr	r0, [r4, #108]	; 0x6c
   13a70:	ldr	r2, [r4, #112]	; 0x70
   13a74:	b	1381c <flatcc_builder_custom_reset@@Base+0x2c4>
   13a78:	ldr	r0, [r4, #112]	; 0x70
   13a7c:	cmp	r0, #0
   13a80:	beq	13830 <flatcc_builder_custom_reset@@Base+0x2d8>
   13a84:	movw	r0, #36062	; 0x8cde
   13a88:	movw	r1, #36080	; 0x8cf0
   13a8c:	movw	r3, #36150	; 0x8d36
   13a90:	movw	r2, #434	; 0x1b2
   13a94:	movt	r0, #1
   13a98:	movt	r1, #1
   13a9c:	movt	r3, #1
   13aa0:	bl	12418 <__assert_fail@plt>

00013aa4 <flatcc_builder_reset@@Base>:
   13aa4:	mov	r1, #0
   13aa8:	mov	r2, #0
   13aac:	b	13558 <flatcc_builder_custom_reset@@Base>

00013ab0 <flatcc_builder_clear@@Base>:
   13ab0:	push	{r4, sl, fp, lr}
   13ab4:	add	fp, sp, #8
   13ab8:	sub	sp, sp, #8
   13abc:	mov	r4, r0
   13ac0:	ldr	r0, [r0, #40]	; 0x28
   13ac4:	mov	r1, #0
   13ac8:	mov	r2, #0
   13acc:	mov	r3, #0
   13ad0:	ldr	ip, [r4, #48]	; 0x30
   13ad4:	str	r1, [sp]
   13ad8:	add	r1, r4, #52	; 0x34
   13adc:	blx	ip
   13ae0:	ldr	r0, [r4, #40]	; 0x28
   13ae4:	ldr	ip, [r4, #48]	; 0x30
   13ae8:	mov	r1, #1
   13aec:	mov	r2, #0
   13af0:	mov	r3, #0
   13af4:	str	r1, [sp]
   13af8:	add	r1, r4, #60	; 0x3c
   13afc:	blx	ip
   13b00:	ldr	r0, [r4, #40]	; 0x28
   13b04:	ldr	ip, [r4, #48]	; 0x30
   13b08:	mov	r1, #2
   13b0c:	mov	r2, #0
   13b10:	mov	r3, #0
   13b14:	str	r1, [sp]
   13b18:	add	r1, r4, #68	; 0x44
   13b1c:	blx	ip
   13b20:	ldr	r0, [r4, #40]	; 0x28
   13b24:	ldr	ip, [r4, #48]	; 0x30
   13b28:	mov	r1, #3
   13b2c:	mov	r2, #0
   13b30:	mov	r3, #0
   13b34:	str	r1, [sp]
   13b38:	add	r1, r4, #76	; 0x4c
   13b3c:	blx	ip
   13b40:	ldr	r0, [r4, #40]	; 0x28
   13b44:	ldr	ip, [r4, #48]	; 0x30
   13b48:	mov	r1, #4
   13b4c:	mov	r2, #0
   13b50:	mov	r3, #0
   13b54:	str	r1, [sp]
   13b58:	add	r1, r4, #84	; 0x54
   13b5c:	blx	ip
   13b60:	ldr	r0, [r4, #40]	; 0x28
   13b64:	ldr	ip, [r4, #48]	; 0x30
   13b68:	mov	r1, #5
   13b6c:	mov	r2, #0
   13b70:	mov	r3, #0
   13b74:	str	r1, [sp]
   13b78:	add	r1, r4, #92	; 0x5c
   13b7c:	blx	ip
   13b80:	ldr	r0, [r4, #40]	; 0x28
   13b84:	ldr	ip, [r4, #48]	; 0x30
   13b88:	mov	r1, #6
   13b8c:	mov	r2, #0
   13b90:	mov	r3, #0
   13b94:	str	r1, [sp]
   13b98:	add	r1, r4, #100	; 0x64
   13b9c:	blx	ip
   13ba0:	ldr	r0, [r4, #40]	; 0x28
   13ba4:	ldr	ip, [r4, #48]	; 0x30
   13ba8:	mov	r1, #7
   13bac:	mov	r2, #0
   13bb0:	mov	r3, #0
   13bb4:	str	r1, [sp]
   13bb8:	add	r1, r4, #108	; 0x6c
   13bbc:	blx	ip
   13bc0:	ldr	r0, [r4, #184]	; 0xb8
   13bc4:	cmp	r0, #0
   13bc8:	beq	13bd4 <flatcc_builder_clear@@Base+0x124>
   13bcc:	add	r0, r4, #188	; 0xbc
   13bd0:	bl	18214 <flatcc_emitter_clear@@Base>
   13bd4:	mov	r0, r4
   13bd8:	mov	r1, #0
   13bdc:	mov	r2, #232	; 0xe8
   13be0:	sub	sp, fp, #8
   13be4:	pop	{r4, sl, fp, lr}
   13be8:	b	123f4 <memset@plt>

00013bec <flatcc_builder_enter_user_frame_ptr@@Base>:
   13bec:	push	{r4, r5, r6, r7, fp, lr}
   13bf0:	add	fp, sp, #16
   13bf4:	sub	sp, sp, #8
   13bf8:	mov	r4, r0
   13bfc:	ldr	r0, [r0, #112]	; 0x70
   13c00:	add	r1, r1, #7
   13c04:	ldr	r7, [r4, #228]	; 0xe4
   13c08:	bic	r5, r1, #3
   13c0c:	add	r6, r4, #108	; 0x6c
   13c10:	add	r2, r7, r5
   13c14:	cmp	r2, r0
   13c18:	bls	13c40 <flatcc_builder_enter_user_frame_ptr@@Base+0x54>
   13c1c:	ldr	r0, [r4, #40]	; 0x28
   13c20:	ldr	ip, [r4, #48]	; 0x30
   13c24:	mov	r1, #7
   13c28:	mov	r3, #0
   13c2c:	str	r1, [sp]
   13c30:	mov	r1, r6
   13c34:	blx	ip
   13c38:	cmp	r0, #0
   13c3c:	bne	13c94 <flatcc_builder_enter_user_frame_ptr@@Base+0xa8>
   13c40:	ldr	r0, [r6]
   13c44:	adds	r6, r0, r7
   13c48:	beq	13c84 <flatcc_builder_enter_user_frame_ptr@@Base+0x98>
   13c4c:	mov	r0, r6
   13c50:	mov	r1, #0
   13c54:	mov	r2, r5
   13c58:	bl	123f4 <memset@plt>
   13c5c:	ldr	r0, [r4, #224]	; 0xe0
   13c60:	str	r0, [r6], #4
   13c64:	ldr	r0, [r4, #228]	; 0xe4
   13c68:	add	r1, r0, #4
   13c6c:	add	r0, r0, r5
   13c70:	str	r1, [r4, #224]	; 0xe0
   13c74:	str	r0, [r4, #228]	; 0xe4
   13c78:	mov	r0, r6
   13c7c:	sub	sp, fp, #16
   13c80:	pop	{r4, r5, r6, r7, fp, pc}
   13c84:	mov	r6, #0
   13c88:	mov	r0, r6
   13c8c:	sub	sp, fp, #16
   13c90:	pop	{r4, r5, r6, r7, fp, pc}
   13c94:	movw	r0, #40598	; 0x9e96
   13c98:	movw	r1, #36080	; 0x8cf0
   13c9c:	movw	r3, #40144	; 0x9cd0
   13ca0:	mov	r2, #308	; 0x134
   13ca4:	movt	r0, #1
   13ca8:	movt	r1, #1
   13cac:	movt	r3, #1
   13cb0:	bl	12418 <__assert_fail@plt>

00013cb4 <flatcc_builder_enter_user_frame@@Base>:
   13cb4:	push	{r4, r5, r6, r7, fp, lr}
   13cb8:	add	fp, sp, #16
   13cbc:	sub	sp, sp, #8
   13cc0:	mov	r4, r0
   13cc4:	ldr	r0, [r0, #112]	; 0x70
   13cc8:	add	r1, r1, #7
   13ccc:	ldr	r7, [r4, #228]	; 0xe4
   13cd0:	bic	r5, r1, #3
   13cd4:	add	r6, r4, #108	; 0x6c
   13cd8:	add	r2, r7, r5
   13cdc:	cmp	r2, r0
   13ce0:	bls	13d08 <flatcc_builder_enter_user_frame@@Base+0x54>
   13ce4:	ldr	r0, [r4, #40]	; 0x28
   13ce8:	ldr	ip, [r4, #48]	; 0x30
   13cec:	mov	r1, #7
   13cf0:	mov	r3, #0
   13cf4:	str	r1, [sp]
   13cf8:	mov	r1, r6
   13cfc:	blx	ip
   13d00:	cmp	r0, #0
   13d04:	bne	13d54 <flatcc_builder_enter_user_frame@@Base+0xa0>
   13d08:	ldr	r0, [r6]
   13d0c:	adds	r6, r0, r7
   13d10:	beq	13d48 <flatcc_builder_enter_user_frame@@Base+0x94>
   13d14:	mov	r0, r6
   13d18:	mov	r1, #0
   13d1c:	mov	r2, r5
   13d20:	bl	123f4 <memset@plt>
   13d24:	ldr	r0, [r4, #224]	; 0xe0
   13d28:	str	r0, [r6]
   13d2c:	ldr	r1, [r4, #228]	; 0xe4
   13d30:	add	r0, r1, #4
   13d34:	add	r1, r1, r5
   13d38:	str	r0, [r4, #224]	; 0xe0
   13d3c:	str	r1, [r4, #228]	; 0xe4
   13d40:	sub	sp, fp, #16
   13d44:	pop	{r4, r5, r6, r7, fp, pc}
   13d48:	mov	r0, #0
   13d4c:	sub	sp, fp, #16
   13d50:	pop	{r4, r5, r6, r7, fp, pc}
   13d54:	movw	r0, #40598	; 0x9e96
   13d58:	movw	r1, #36080	; 0x8cf0
   13d5c:	movw	r3, #40144	; 0x9cd0
   13d60:	mov	r2, #308	; 0x134
   13d64:	movt	r0, #1
   13d68:	movt	r1, #1
   13d6c:	movt	r3, #1
   13d70:	bl	12418 <__assert_fail@plt>

00013d74 <flatcc_builder_exit_user_frame@@Base>:
   13d74:	push	{fp, lr}
   13d78:	mov	fp, sp
   13d7c:	ldr	r1, [r0, #224]	; 0xe0
   13d80:	cmp	r1, #0
   13d84:	subne	r2, r1, #4
   13d88:	strne	r2, [r0, #228]	; 0xe4
   13d8c:	ldrne	r2, [r0, #108]	; 0x6c
   13d90:	addne	r1, r2, r1
   13d94:	ldrne	r1, [r1, #-4]
   13d98:	strne	r1, [r0, #224]	; 0xe0
   13d9c:	movne	r0, r1
   13da0:	popne	{fp, pc}
   13da4:	movw	r0, #36212	; 0x8d74
   13da8:	movw	r1, #36080	; 0x8cf0
   13dac:	movw	r3, #36237	; 0x8d8d
   13db0:	movw	r2, #542	; 0x21e
   13db4:	movt	r0, #1
   13db8:	movt	r1, #1
   13dbc:	movt	r3, #1
   13dc0:	bl	12418 <__assert_fail@plt>

00013dc4 <flatcc_builder_exit_user_frame_at@@Base>:
   13dc4:	push	{fp, lr}
   13dc8:	mov	fp, sp
   13dcc:	ldr	r2, [r0, #224]	; 0xe0
   13dd0:	cmp	r2, r1
   13dd4:	bcc	13e20 <flatcc_builder_exit_user_frame_at@@Base+0x5c>
   13dd8:	cmp	r1, #0
   13ddc:	str	r1, [r0, #224]	; 0xe0
   13de0:	subne	r2, r1, #4
   13de4:	strne	r2, [r0, #228]	; 0xe4
   13de8:	ldrne	r2, [r0, #108]	; 0x6c
   13dec:	addne	r1, r2, r1
   13df0:	ldrne	r1, [r1, #-4]
   13df4:	strne	r1, [r0, #224]	; 0xe0
   13df8:	movne	r0, r1
   13dfc:	popne	{fp, pc}
   13e00:	movw	r0, #36212	; 0x8d74
   13e04:	movw	r1, #36080	; 0x8cf0
   13e08:	movw	r3, #36237	; 0x8d8d
   13e0c:	movw	r2, #542	; 0x21e
   13e10:	movt	r0, #1
   13e14:	movt	r1, #1
   13e18:	movt	r3, #1
   13e1c:	bl	12418 <__assert_fail@plt>
   13e20:	movw	r0, #36295	; 0x8dc7
   13e24:	movw	r1, #36080	; 0x8cf0
   13e28:	movw	r3, #36326	; 0x8de6
   13e2c:	movw	r2, #551	; 0x227
   13e30:	movt	r0, #1
   13e34:	movt	r1, #1
   13e38:	movt	r3, #1
   13e3c:	bl	12418 <__assert_fail@plt>

00013e40 <flatcc_builder_get_current_user_frame@@Base>:
   13e40:	ldr	r0, [r0, #224]	; 0xe0
   13e44:	bx	lr

00013e48 <flatcc_builder_get_user_frame_ptr@@Base>:
   13e48:	ldr	r0, [r0, #108]	; 0x6c
   13e4c:	add	r0, r0, r1
   13e50:	bx	lr

00013e54 <flatcc_builder_embed_buffer@@Base>:
   13e54:	push	{r4, r5, r6, r7, fp, lr}
   13e58:	add	fp, sp, #16
   13e5c:	sub	sp, sp, #88	; 0x58
   13e60:	mov	r4, r0
   13e64:	ldr	r0, [fp, #8]
   13e68:	mov	r5, r3
   13e6c:	mov	r7, r2
   13e70:	mov	r2, r1
   13e74:	sub	r1, fp, #18
   13e78:	strh	r0, [fp, #-18]	; 0xffffffee
   13e7c:	mov	r0, r4
   13e80:	ldr	r3, [r4, #152]	; 0x98
   13e84:	cmp	r3, #0
   13e88:	movwne	r3, #1
   13e8c:	bl	13fc4 <flatcc_builder_embed_buffer@@Base+0x170>
   13e90:	ldr	r1, [fp, #12]
   13e94:	ldrh	r3, [fp, #-18]	; 0xffffffee
   13e98:	ldr	r0, [r4, #136]	; 0x88
   13e9c:	mov	r2, #0
   13ea0:	str	r2, [sp, #12]
   13ea4:	str	r2, [sp, #8]
   13ea8:	and	r1, r1, #2
   13eac:	sub	r3, r3, #1
   13eb0:	add	r1, r5, r1, lsl #1
   13eb4:	sub	r1, r0, r1
   13eb8:	and	r3, r3, r1
   13ebc:	add	r1, r3, r5
   13ec0:	str	r1, [fp, #-24]	; 0xffffffe8
   13ec4:	ldr	r1, [r4, #152]	; 0x98
   13ec8:	cmp	r1, #0
   13ecc:	mov	r1, #0
   13ed0:	beq	13ef0 <flatcc_builder_embed_buffer@@Base+0x9c>
   13ed4:	mov	r1, #4
   13ed8:	sub	r2, fp, #24
   13edc:	str	r1, [sp, #20]
   13ee0:	str	r2, [sp, #16]
   13ee4:	mov	r2, #1
   13ee8:	str	r1, [sp, #8]
   13eec:	str	r2, [sp, #12]
   13ef0:	cmp	r5, #0
   13ef4:	beq	13f18 <flatcc_builder_embed_buffer@@Base+0xc4>
   13ef8:	add	r6, sp, #8
   13efc:	add	r1, r1, r5
   13f00:	add	r6, r6, r2, lsl #3
   13f04:	add	r2, r2, #1
   13f08:	str	r1, [sp, #8]
   13f0c:	str	r7, [r6, #8]
   13f10:	str	r5, [r6, #12]
   13f14:	str	r2, [sp, #12]
   13f18:	cmp	r3, #0
   13f1c:	beq	13f48 <flatcc_builder_embed_buffer@@Base+0xf4>
   13f20:	add	r7, sp, #8
   13f24:	movw	r6, #35550	; 0x8ade
   13f28:	add	r1, r1, r3
   13f2c:	add	r7, r7, r2, lsl #3
   13f30:	movt	r6, #1
   13f34:	add	r2, r2, #1
   13f38:	str	r1, [sp, #8]
   13f3c:	str	r6, [r7, #8]
   13f40:	str	r3, [r7, #12]
   13f44:	str	r2, [sp, #12]
   13f48:	cmp	r1, #0
   13f4c:	ble	13fa4 <flatcc_builder_embed_buffer@@Base+0x150>
   13f50:	sub	r5, r0, r1
   13f54:	ldr	r0, [r4, #36]	; 0x24
   13f58:	ldr	r7, [r4, #44]	; 0x2c
   13f5c:	str	r1, [sp]
   13f60:	add	r1, sp, #8
   13f64:	add	r1, r1, #8
   13f68:	mov	r3, r5
   13f6c:	blx	r7
   13f70:	cmp	r0, #0
   13f74:	streq	r5, [r4, #136]	; 0x88
   13f78:	moveq	r0, r5
   13f7c:	subeq	sp, fp, #16
   13f80:	popeq	{r4, r5, r6, r7, fp, pc}
   13f84:	movw	r0, #40598	; 0x9e96
   13f88:	movw	r1, #36080	; 0x8cf0
   13f8c:	movw	r3, #40277	; 0x9d55
   13f90:	movw	r2, #651	; 0x28b
   13f94:	movt	r0, #1
   13f98:	movt	r1, #1
   13f9c:	movt	r3, #1
   13fa0:	bl	12418 <__assert_fail@plt>
   13fa4:	movw	r0, #40598	; 0x9e96
   13fa8:	movw	r1, #36080	; 0x8cf0
   13fac:	movw	r3, #40277	; 0x9d55
   13fb0:	movw	r2, #647	; 0x287
   13fb4:	movt	r0, #1
   13fb8:	movt	r1, #1
   13fbc:	movt	r3, #1
   13fc0:	bl	12418 <__assert_fail@plt>
   13fc4:	push	{r4, sl, fp, lr}
   13fc8:	add	fp, sp, #8
   13fcc:	sub	sp, sp, #80	; 0x50
   13fd0:	cmp	r2, #0
   13fd4:	bne	13fe4 <flatcc_builder_embed_buffer@@Base+0x190>
   13fd8:	ldrh	r2, [r0, #132]	; 0x84
   13fdc:	cmp	r2, #0
   13fe0:	movweq	r2, #1
   13fe4:	ldrh	r4, [r1]
   13fe8:	cmp	r4, #4
   13fec:	movwcc	r4, #4
   13ff0:	cmpcs	r4, r2
   13ff4:	bcs	14004 <flatcc_builder_embed_buffer@@Base+0x1b0>
   13ff8:	cmp	r4, r2
   13ffc:	movcc	r4, r2
   14000:	strh	r4, [r1]
   14004:	cmp	r3, #0
   14008:	bne	1407c <flatcc_builder_embed_buffer@@Base+0x228>
   1400c:	ldr	r4, [r0, #140]	; 0x8c
   14010:	sub	r1, r2, #1
   14014:	ands	r1, r4, r1
   14018:	beq	1407c <flatcc_builder_embed_buffer@@Base+0x228>
   1401c:	movw	r2, #35550	; 0x8ade
   14020:	str	r1, [sp, #20]
   14024:	cmn	r1, #1
   14028:	movt	r2, #1
   1402c:	str	r2, [sp, #16]
   14030:	mov	r2, #1
   14034:	str	r1, [sp, #8]
   14038:	str	r2, [sp, #12]
   1403c:	add	r2, r4, r1
   14040:	str	r2, [r0, #140]	; 0x8c
   14044:	ble	14084 <flatcc_builder_embed_buffer@@Base+0x230>
   14048:	ldr	r2, [r0, #36]	; 0x24
   1404c:	ldr	ip, [r0, #44]	; 0x2c
   14050:	add	r0, sp, #8
   14054:	str	r1, [sp]
   14058:	mov	r3, r4
   1405c:	add	r1, r0, #8
   14060:	mov	r0, r2
   14064:	mov	r2, #1
   14068:	blx	ip
   1406c:	cmp	r0, #0
   14070:	bne	140a4 <flatcc_builder_embed_buffer@@Base+0x250>
   14074:	cmn	r4, #1
   14078:	beq	140c4 <flatcc_builder_embed_buffer@@Base+0x270>
   1407c:	sub	sp, fp, #8
   14080:	pop	{r4, sl, fp, pc}
   14084:	movw	r0, #40598	; 0x9e96
   14088:	movw	r1, #36080	; 0x8cf0
   1408c:	movw	r3, #40465	; 0x9e11
   14090:	movw	r2, #673	; 0x2a1
   14094:	movt	r0, #1
   14098:	movt	r1, #1
   1409c:	movt	r3, #1
   140a0:	bl	12418 <__assert_fail@plt>
   140a4:	movw	r0, #40598	; 0x9e96
   140a8:	movw	r1, #36080	; 0x8cf0
   140ac:	movw	r3, #40465	; 0x9e11
   140b0:	movw	r2, #677	; 0x2a5
   140b4:	movt	r0, #1
   140b8:	movt	r1, #1
   140bc:	movt	r3, #1
   140c0:	bl	12418 <__assert_fail@plt>
   140c4:	movw	r0, #40598	; 0x9e96
   140c8:	movw	r1, #36080	; 0x8cf0
   140cc:	movw	r3, #40211	; 0x9d13
   140d0:	movw	r2, #702	; 0x2be
   140d4:	movt	r0, #1
   140d8:	movt	r1, #1
   140dc:	movt	r3, #1
   140e0:	bl	12418 <__assert_fail@plt>

000140e4 <flatcc_builder_create_buffer@@Base>:
   140e4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   140e8:	add	fp, sp, #28
   140ec:	sub	sp, sp, #100	; 0x64
   140f0:	ldr	sl, [fp, #12]
   140f4:	mov	r4, r0
   140f8:	ldr	r0, [fp, #8]
   140fc:	mov	r7, r1
   14100:	mov	r5, #0
   14104:	mov	r6, r3
   14108:	sub	r1, fp, #30
   1410c:	str	r5, [sp, #12]
   14110:	and	r9, sl, #1
   14114:	strh	r0, [fp, #-30]	; 0xffffffe2
   14118:	mov	r0, r4
   1411c:	mov	r3, r9
   14120:	bl	13fc4 <flatcc_builder_embed_buffer@@Base+0x170>
   14124:	ldrh	r0, [r4, #128]	; 0x80
   14128:	ldrh	r1, [fp, #-30]	; 0xffffffe2
   1412c:	str	r6, [sp, #8]
   14130:	cmp	r0, r1
   14134:	strhcc	r1, [r4, #128]	; 0x80
   14138:	cmp	r7, #0
   1413c:	beq	14158 <flatcc_builder_create_buffer@@Base+0x74>
   14140:	ldr	r5, [r7]
   14144:	cmp	r5, #0
   14148:	str	r5, [sp, #12]
   1414c:	movwne	r5, #1
   14150:	lsl	r7, r5, #2
   14154:	b	1415c <flatcc_builder_create_buffer@@Base+0x78>
   14158:	mov	r7, #0
   1415c:	ldr	r0, [r4, #136]	; 0x88
   14160:	and	r2, sl, #2
   14164:	mov	r3, #0
   14168:	sub	r6, r1, #1
   1416c:	ands	ip, sl, #3
   14170:	mov	sl, #4
   14174:	mov	r1, #4
   14178:	str	r3, [sp, #20]
   1417c:	str	r3, [sp, #16]
   14180:	sub	r2, r0, r2, lsl #1
   14184:	sub	r2, r2, r7
   14188:	sub	r2, r2, #4
   1418c:	beq	141b0 <flatcc_builder_create_buffer@@Base+0xcc>
   14190:	mov	r1, #4
   14194:	sub	r3, fp, #40	; 0x28
   14198:	str	r1, [sp, #28]
   1419c:	str	r3, [sp, #24]
   141a0:	str	r1, [sp, #16]
   141a4:	mov	r3, #1
   141a8:	mov	r1, #8
   141ac:	str	r3, [sp, #20]
   141b0:	add	lr, sp, #16
   141b4:	and	r6, r2, r6
   141b8:	sub	r8, fp, #36	; 0x24
   141bc:	str	r1, [sp, #16]
   141c0:	cmp	r5, #0
   141c4:	add	r2, lr, r3, lsl #3
   141c8:	str	r8, [r2, #8]
   141cc:	str	sl, [r2, #12]
   141d0:	add	r2, r3, #1
   141d4:	str	r2, [sp, #20]
   141d8:	beq	141fc <flatcc_builder_create_buffer@@Base+0x118>
   141dc:	add	r2, lr, r2, lsl #3
   141e0:	add	r1, r1, r7
   141e4:	add	r5, sp, #12
   141e8:	str	r1, [sp, #16]
   141ec:	str	r5, [r2, #8]
   141f0:	str	r7, [r2, #12]
   141f4:	orr	r2, r3, #2
   141f8:	str	r2, [sp, #20]
   141fc:	cmp	r6, #0
   14200:	beq	14228 <flatcc_builder_create_buffer@@Base+0x144>
   14204:	movw	r5, #35550	; 0x8ade
   14208:	add	r3, lr, r2, lsl #3
   1420c:	add	r1, r1, r6
   14210:	add	r2, r2, #1
   14214:	movt	r5, #1
   14218:	str	r1, [sp, #16]
   1421c:	str	r5, [r3, #8]
   14220:	str	r6, [r3, #12]
   14224:	str	r2, [sp, #20]
   14228:	sub	r7, r0, r1
   1422c:	cmp	ip, #0
   14230:	mov	r6, #144	; 0x90
   14234:	ldr	r3, [sp, #8]
   14238:	mov	r0, r7
   1423c:	addne	r0, r0, #4
   14240:	cmp	r9, #0
   14244:	movweq	r6, #140	; 0x8c
   14248:	cmp	r1, #0
   1424c:	ldr	r6, [r4, r6]
   14250:	sub	r3, r3, r0
   14254:	str	r3, [fp, #-36]	; 0xffffffdc
   14258:	sub	r0, r6, r0
   1425c:	str	r0, [fp, #-40]	; 0xffffffd8
   14260:	ble	142b8 <flatcc_builder_create_buffer@@Base+0x1d4>
   14264:	ldr	r0, [r4, #36]	; 0x24
   14268:	ldr	r6, [r4, #44]	; 0x2c
   1426c:	str	r1, [sp]
   14270:	add	r1, lr, #8
   14274:	mov	r3, r7
   14278:	blx	r6
   1427c:	cmp	r0, #0
   14280:	bne	142d8 <flatcc_builder_create_buffer@@Base+0x1f4>
   14284:	cmp	r7, #0
   14288:	str	r7, [r4, #136]	; 0x88
   1428c:	movne	r0, r7
   14290:	subne	sp, fp, #28
   14294:	popne	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14298:	movw	r0, #40598	; 0x9e96
   1429c:	movw	r1, #36080	; 0x8cf0
   142a0:	movw	r3, #36395	; 0x8e2b
   142a4:	mov	r2, #772	; 0x304
   142a8:	movt	r0, #1
   142ac:	movt	r1, #1
   142b0:	movt	r3, #1
   142b4:	bl	12418 <__assert_fail@plt>
   142b8:	movw	r0, #40598	; 0x9e96
   142bc:	movw	r1, #36080	; 0x8cf0
   142c0:	movw	r3, #40277	; 0x9d55
   142c4:	movw	r2, #647	; 0x287
   142c8:	movt	r0, #1
   142cc:	movt	r1, #1
   142d0:	movt	r3, #1
   142d4:	bl	12418 <__assert_fail@plt>
   142d8:	movw	r0, #40598	; 0x9e96
   142dc:	movw	r1, #36080	; 0x8cf0
   142e0:	movw	r3, #40277	; 0x9d55
   142e4:	movw	r2, #651	; 0x28b
   142e8:	movt	r0, #1
   142ec:	movt	r1, #1
   142f0:	movt	r3, #1
   142f4:	bl	12418 <__assert_fail@plt>

000142f8 <flatcc_builder_create_struct@@Base>:
   142f8:	push	{r4, r5, r6, sl, fp, lr}
   142fc:	add	fp, sp, #16
   14300:	sub	sp, sp, #80	; 0x50
   14304:	cmp	r3, #0
   14308:	beq	143e0 <flatcc_builder_create_struct@@Base+0xe8>
   1430c:	mov	r5, r0
   14310:	ldrh	r0, [r0, #128]	; 0x80
   14314:	mov	r4, #0
   14318:	cmp	r0, r3
   1431c:	strhcc	r3, [r5, #128]	; 0x80
   14320:	sub	r3, r3, #1
   14324:	cmp	r2, #0
   14328:	ldr	r0, [r5, #136]	; 0x88
   1432c:	str	r4, [sp, #12]
   14330:	str	r4, [sp, #8]
   14334:	movne	r4, #1
   14338:	strne	r2, [sp, #20]
   1433c:	strne	r1, [sp, #16]
   14340:	strne	r2, [sp, #8]
   14344:	strne	r4, [sp, #12]
   14348:	sub	r6, r0, r2
   1434c:	and	r3, r6, r3
   14350:	cmp	r3, #0
   14354:	beq	14380 <flatcc_builder_create_struct@@Base+0x88>
   14358:	add	r1, sp, #8
   1435c:	movw	r6, #35550	; 0x8ade
   14360:	add	r2, r3, r2
   14364:	add	r1, r1, r4, lsl #3
   14368:	movt	r6, #1
   1436c:	add	r4, r4, #1
   14370:	str	r2, [sp, #8]
   14374:	str	r6, [r1, #8]
   14378:	str	r3, [r1, #12]
   1437c:	str	r4, [sp, #12]
   14380:	cmp	r2, #0
   14384:	ble	14400 <flatcc_builder_create_struct@@Base+0x108>
   14388:	sub	r6, r0, r2
   1438c:	ldr	r0, [r5, #36]	; 0x24
   14390:	ldr	ip, [r5, #44]	; 0x2c
   14394:	add	r1, sp, #8
   14398:	str	r2, [sp]
   1439c:	mov	r2, r4
   143a0:	add	r1, r1, #8
   143a4:	mov	r3, r6
   143a8:	blx	ip
   143ac:	cmp	r0, #0
   143b0:	streq	r6, [r5, #136]	; 0x88
   143b4:	moveq	r0, r6
   143b8:	subeq	sp, fp, #16
   143bc:	popeq	{r4, r5, r6, sl, fp, pc}
   143c0:	movw	r0, #40598	; 0x9e96
   143c4:	movw	r1, #36080	; 0x8cf0
   143c8:	movw	r3, #40277	; 0x9d55
   143cc:	movw	r2, #651	; 0x28b
   143d0:	movt	r0, #1
   143d4:	movt	r1, #1
   143d8:	movt	r3, #1
   143dc:	bl	12418 <__assert_fail@plt>
   143e0:	movw	r0, #36526	; 0x8eae
   143e4:	movw	r1, #36080	; 0x8cf0
   143e8:	movw	r3, #36537	; 0x8eb9
   143ec:	movw	r2, #783	; 0x30f
   143f0:	movt	r0, #1
   143f4:	movt	r1, #1
   143f8:	movt	r3, #1
   143fc:	bl	12418 <__assert_fail@plt>
   14400:	movw	r0, #40598	; 0x9e96
   14404:	movw	r1, #36080	; 0x8cf0
   14408:	movw	r3, #40277	; 0x9d55
   1440c:	movw	r2, #647	; 0x287
   14410:	movt	r0, #1
   14414:	movt	r1, #1
   14418:	movt	r3, #1
   1441c:	bl	12418 <__assert_fail@plt>

00014420 <flatcc_builder_start_buffer@@Base>:
   14420:	push	{r4, r5, r6, r7, fp, lr}
   14424:	add	fp, sp, #16
   14428:	mov	r5, r1
   1442c:	ldrh	r1, [r0, #128]	; 0x80
   14430:	mov	r6, r3
   14434:	mov	r7, r2
   14438:	mov	r4, r0
   1443c:	bl	144dc <flatcc_builder_start_buffer@@Base+0xbc>
   14440:	mov	r1, r0
   14444:	mvn	r0, #0
   14448:	cmp	r1, #0
   1444c:	popne	{r4, r5, r6, r7, fp, pc}
   14450:	mov	r0, #1
   14454:	cmp	r5, #0
   14458:	strh	r0, [r4, #128]	; 0x80
   1445c:	ldrh	r1, [r4, #132]	; 0x84
   14460:	ldr	r2, [r4, #32]
   14464:	strh	r1, [r2, #34]	; 0x22
   14468:	strh	r7, [r4, #132]	; 0x84
   1446c:	ldrh	r1, [r4, #164]	; 0xa4
   14470:	ldr	r2, [r4, #32]
   14474:	strh	r1, [r2, #32]
   14478:	strh	r6, [r4, #164]	; 0xa4
   1447c:	ldr	r1, [r4, #32]
   14480:	ldr	r2, [r4, #144]	; 0x90
   14484:	str	r2, [r1, #20]
   14488:	ldr	r1, [r4, #32]
   1448c:	ldr	r2, [r4, #152]	; 0x98
   14490:	str	r2, [r1, #28]
   14494:	ldr	r3, [r4, #148]	; 0x94
   14498:	ldr	r1, [r4, #32]
   1449c:	ldr	r2, [r4, #136]	; 0x88
   144a0:	ldr	r7, [r4, #168]	; 0xa8
   144a4:	add	r6, r3, #1
   144a8:	str	r2, [r4, #144]	; 0x90
   144ac:	str	r6, [r4, #148]	; 0x94
   144b0:	str	r3, [r4, #152]	; 0x98
   144b4:	str	r7, [r1, #16]
   144b8:	movw	r1, #35550	; 0x8ade
   144bc:	movt	r1, #1
   144c0:	movne	r1, r5
   144c4:	ldr	r1, [r1]
   144c8:	str	r1, [r4, #168]	; 0xa8
   144cc:	ldr	r1, [r4, #32]
   144d0:	strh	r0, [r1, #14]
   144d4:	mov	r0, #0
   144d8:	pop	{r4, r5, r6, r7, fp, pc}
   144dc:	push	{r4, r5, r6, r7, fp, lr}
   144e0:	add	fp, sp, #16
   144e4:	sub	sp, sp, #8
   144e8:	mov	r5, r1
   144ec:	ldr	r1, [r0, #156]	; 0x9c
   144f0:	ldr	r2, [r0, #160]	; 0xa0
   144f4:	mov	r4, r0
   144f8:	add	r0, r1, #1
   144fc:	cmp	r1, r2
   14500:	str	r0, [r4, #156]	; 0x9c
   14504:	bge	14518 <flatcc_builder_start_buffer@@Base+0xf8>
   14508:	ldr	r0, [r4, #32]
   1450c:	add	r0, r0, #36	; 0x24
   14510:	str	r0, [r4, #32]
   14514:	b	145ac <flatcc_builder_start_buffer@@Base+0x18c>
   14518:	ldr	r2, [r4, #176]	; 0xb0
   1451c:	mvn	r6, #0
   14520:	cmp	r2, #1
   14524:	cmpge	r1, r2
   14528:	bge	145e4 <flatcc_builder_start_buffer@@Base+0x1c4>
   1452c:	add	r7, r0, r0, lsl #3
   14530:	ldr	r0, [r4, #88]	; 0x58
   14534:	lsl	r2, r7, #2
   14538:	cmp	r2, r0
   1453c:	bls	14564 <flatcc_builder_start_buffer@@Base+0x144>
   14540:	ldr	r0, [r4, #40]	; 0x28
   14544:	ldr	ip, [r4, #48]	; 0x30
   14548:	mov	r3, #4
   1454c:	add	r1, r4, #84	; 0x54
   14550:	str	r3, [sp]
   14554:	mov	r3, #0
   14558:	blx	ip
   1455c:	cmp	r0, #0
   14560:	bne	145f0 <flatcc_builder_start_buffer@@Base+0x1d0>
   14564:	ldr	r1, [r4, #84]	; 0x54
   14568:	mvn	r0, #35	; 0x23
   1456c:	add	r0, r0, r7, lsl #2
   14570:	adds	r0, r0, r1
   14574:	str	r0, [r4, #32]
   14578:	beq	145e4 <flatcc_builder_start_buffer@@Base+0x1c4>
   1457c:	ldr	r1, [r4, #88]	; 0x58
   14580:	movw	r3, #36409	; 0x8e39
   14584:	ldr	r2, [r4, #176]	; 0xb0
   14588:	movt	r3, #14563	; 0x38e3
   1458c:	umull	r1, r3, r1, r3
   14590:	cmp	r2, r3, lsr #3
   14594:	lsr	r1, r3, #3
   14598:	mov	r3, r1
   1459c:	movlt	r3, r2
   145a0:	cmp	r2, #0
   145a4:	movle	r3, r1
   145a8:	str	r3, [r4, #160]	; 0xa0
   145ac:	ldr	r1, [r4, #20]
   145b0:	mvn	r3, #3
   145b4:	mov	r6, #0
   145b8:	str	r1, [r0, #8]
   145bc:	ldrh	r2, [r4, #130]	; 0x82
   145c0:	strh	r2, [r0, #12]
   145c4:	strh	r5, [r4, #130]	; 0x82
   145c8:	ldr	r2, [r4, #28]
   145cc:	stm	r0, {r2, r3}
   145d0:	add	r0, r1, r2
   145d4:	str	r6, [r4, #20]
   145d8:	add	r0, r0, #7
   145dc:	bic	r0, r0, #7
   145e0:	str	r0, [r4, #28]
   145e4:	mov	r0, r6
   145e8:	sub	sp, fp, #16
   145ec:	pop	{r4, r5, r6, r7, fp, pc}
   145f0:	movw	r0, #40598	; 0x9e96
   145f4:	movw	r1, #36080	; 0x8cf0
   145f8:	movw	r3, #40144	; 0x9cd0
   145fc:	mov	r2, #308	; 0x134
   14600:	movt	r0, #1
   14604:	movt	r1, #1
   14608:	movt	r3, #1
   1460c:	bl	12418 <__assert_fail@plt>

00014610 <flatcc_builder_end_buffer@@Base>:
   14610:	push	{r4, r5, r6, sl, fp, lr}
   14614:	add	fp, sp, #16
   14618:	sub	sp, sp, #8
   1461c:	mov	r4, r0
   14620:	ldr	r0, [r0, #32]
   14624:	ldrh	r0, [r0, #14]
   14628:	cmp	r0, #1
   1462c:	bne	14720 <flatcc_builder_end_buffer@@Base+0x110>
   14630:	mov	r3, r1
   14634:	ldr	r1, [r4, #152]	; 0x98
   14638:	ldrh	r0, [r4, #164]	; 0xa4
   1463c:	ldrh	r2, [r4, #132]	; 0x84
   14640:	cmp	r1, #0
   14644:	ldrh	r1, [r4, #128]	; 0x80
   14648:	and	r0, r0, #2
   1464c:	orrne	r0, r0, #1
   14650:	cmp	r1, r2
   14654:	movcc	r1, r2
   14658:	strhcc	r2, [r4, #128]	; 0x80
   1465c:	str	r0, [sp, #4]
   14660:	mov	r0, r4
   14664:	str	r1, [sp]
   14668:	add	r1, r4, #168	; 0xa8
   1466c:	bl	140e4 <flatcc_builder_create_buffer@@Base>
   14670:	mov	r6, r0
   14674:	cmp	r0, #0
   14678:	beq	14714 <flatcc_builder_end_buffer@@Base+0x104>
   1467c:	ldr	r1, [r4, #32]
   14680:	ldr	r0, [r4, #16]
   14684:	ldr	r2, [r4, #20]
   14688:	ldr	r3, [r1, #20]
   1468c:	str	r3, [r4, #144]	; 0x90
   14690:	ldr	r3, [r1, #28]
   14694:	str	r3, [r4, #152]	; 0x98
   14698:	ldr	r3, [r1, #16]
   1469c:	str	r3, [r4, #168]	; 0xa8
   146a0:	ldrh	r1, [r1, #32]
   146a4:	strh	r1, [r4, #164]	; 0xa4
   146a8:	mov	r1, #0
   146ac:	bl	123f4 <memset@plt>
   146b0:	ldr	r0, [r4, #32]
   146b4:	ldr	r1, [r4, #60]	; 0x3c
   146b8:	ldr	r2, [r4, #64]	; 0x40
   146bc:	ldr	r3, [r0, #8]
   146c0:	str	r3, [r4, #20]
   146c4:	ldr	r3, [r0]
   146c8:	str	r3, [r4, #28]
   146cc:	add	r1, r1, r3
   146d0:	ldr	r5, [r0, #4]
   146d4:	str	r1, [r4, #16]
   146d8:	sub	r1, r2, r3
   146dc:	cmp	r1, r5
   146e0:	movhi	r1, r5
   146e4:	str	r1, [r4, #24]
   146e8:	ldrh	r1, [r4, #130]	; 0x82
   146ec:	ldrh	r2, [r4, #128]	; 0x80
   146f0:	cmp	r2, r1
   146f4:	strhcc	r1, [r4, #128]	; 0x80
   146f8:	ldrh	r1, [r0, #12]
   146fc:	sub	r0, r0, #36	; 0x24
   14700:	str	r0, [r4, #32]
   14704:	strh	r1, [r4, #130]	; 0x82
   14708:	ldr	r0, [r4, #156]	; 0x9c
   1470c:	sub	r0, r0, #1
   14710:	str	r0, [r4, #156]	; 0x9c
   14714:	mov	r0, r6
   14718:	sub	sp, fp, #16
   1471c:	pop	{r4, r5, r6, sl, fp, pc}
   14720:	movw	r0, #36639	; 0x8f1f
   14724:	movw	r1, #36080	; 0x8cf0
   14728:	movw	r3, #36683	; 0x8f4b
   1472c:	movw	r2, #838	; 0x346
   14730:	movt	r0, #1
   14734:	movt	r1, #1
   14738:	movt	r3, #1
   1473c:	bl	12418 <__assert_fail@plt>

00014740 <flatcc_builder_start_struct@@Base>:
   14740:	push	{r4, r5, r6, r7, fp, lr}
   14744:	add	fp, sp, #16
   14748:	sub	sp, sp, #8
   1474c:	mov	r6, r1
   14750:	mov	r1, r2
   14754:	mov	r4, r0
   14758:	bl	144dc <flatcc_builder_start_buffer@@Base+0xbc>
   1475c:	mov	r5, #0
   14760:	cmp	r0, #0
   14764:	bne	147e0 <flatcc_builder_start_struct@@Base+0xa0>
   14768:	ldr	r2, [r4, #32]
   1476c:	mov	r0, #2
   14770:	mvn	r7, #3
   14774:	strh	r0, [r2, #14]
   14778:	ldr	r1, [r4, #28]
   1477c:	ldr	r3, [r4, #64]	; 0x40
   14780:	ldr	r0, [r4, #60]	; 0x3c
   14784:	sub	r3, r3, r1
   14788:	add	r0, r0, r1
   1478c:	cmn	r3, #4
   14790:	str	r0, [r4, #16]
   14794:	movcs	r3, r7
   14798:	str	r3, [r4, #24]
   1479c:	str	r7, [r2, #4]
   147a0:	ldr	r7, [r4, #20]
   147a4:	add	r2, r7, r6
   147a8:	cmp	r2, r3
   147ac:	str	r2, [r4, #20]
   147b0:	bcc	1481c <flatcc_builder_start_struct@@Base+0xdc>
   147b4:	ldr	r0, [r4, #40]	; 0x28
   147b8:	ldr	r6, [r4, #48]	; 0x30
   147bc:	add	r1, r1, r2
   147c0:	mov	r3, #1
   147c4:	str	r3, [sp]
   147c8:	add	r2, r1, #1
   147cc:	add	r1, r4, #60	; 0x3c
   147d0:	mov	r3, #1
   147d4:	blx	r6
   147d8:	cmp	r0, #0
   147dc:	beq	147ec <flatcc_builder_start_struct@@Base+0xac>
   147e0:	mov	r0, r5
   147e4:	sub	sp, fp, #16
   147e8:	pop	{r4, r5, r6, r7, fp, pc}
   147ec:	ldr	r1, [r4, #28]
   147f0:	ldr	r0, [r4, #60]	; 0x3c
   147f4:	ldr	r3, [r4, #64]	; 0x40
   147f8:	ldr	r2, [r4, #32]
   147fc:	add	r0, r0, r1
   14800:	sub	r1, r3, r1
   14804:	mvn	r3, #3
   14808:	cmn	r1, #4
   1480c:	str	r0, [r4, #16]
   14810:	movcs	r1, r3
   14814:	str	r1, [r4, #24]
   14818:	str	r3, [r2, #4]
   1481c:	add	r5, r0, r7
   14820:	mov	r0, r5
   14824:	sub	sp, fp, #16
   14828:	pop	{r4, r5, r6, r7, fp, pc}

0001482c <flatcc_builder_struct_edit@@Base>:
   1482c:	ldr	r0, [r0, #16]
   14830:	bx	lr

00014834 <flatcc_builder_end_struct@@Base>:
   14834:	push	{r4, r5, fp, lr}
   14838:	add	fp, sp, #8
   1483c:	mov	r4, r0
   14840:	ldr	r0, [r0, #32]
   14844:	ldrh	r0, [r0, #14]
   14848:	cmp	r0, #2
   1484c:	bne	148ec <flatcc_builder_end_struct@@Base+0xb8>
   14850:	ldrh	r3, [r4, #130]	; 0x82
   14854:	ldr	r1, [r4, #16]
   14858:	ldr	r2, [r4, #20]
   1485c:	mov	r0, r4
   14860:	bl	142f8 <flatcc_builder_create_struct@@Base>
   14864:	mov	r5, r0
   14868:	cmp	r0, #0
   1486c:	beq	148e4 <flatcc_builder_end_struct@@Base+0xb0>
   14870:	ldr	r0, [r4, #16]
   14874:	ldr	r2, [r4, #20]
   14878:	mov	r1, #0
   1487c:	bl	123f4 <memset@plt>
   14880:	ldr	r0, [r4, #32]
   14884:	ldr	r1, [r4, #60]	; 0x3c
   14888:	ldr	ip, [r4, #64]	; 0x40
   1488c:	ldr	r3, [r0, #8]
   14890:	str	r3, [r4, #20]
   14894:	ldr	r3, [r0]
   14898:	str	r3, [r4, #28]
   1489c:	add	r1, r1, r3
   148a0:	ldr	r2, [r0, #4]
   148a4:	str	r1, [r4, #16]
   148a8:	sub	r1, ip, r3
   148ac:	cmp	r1, r2
   148b0:	movhi	r1, r2
   148b4:	str	r1, [r4, #24]
   148b8:	ldrh	r1, [r4, #130]	; 0x82
   148bc:	ldrh	r2, [r4, #128]	; 0x80
   148c0:	cmp	r2, r1
   148c4:	strhcc	r1, [r4, #128]	; 0x80
   148c8:	ldrh	r1, [r0, #12]
   148cc:	sub	r0, r0, #36	; 0x24
   148d0:	str	r0, [r4, #32]
   148d4:	strh	r1, [r4, #130]	; 0x82
   148d8:	ldr	r0, [r4, #156]	; 0x9c
   148dc:	sub	r0, r0, #1
   148e0:	str	r0, [r4, #156]	; 0x9c
   148e4:	mov	r0, r5
   148e8:	pop	{r4, r5, fp, pc}
   148ec:	movw	r0, #36772	; 0x8fa4
   148f0:	movw	r1, #36080	; 0x8cf0
   148f4:	movw	r3, #36816	; 0x8fd0
   148f8:	mov	r2, #872	; 0x368
   148fc:	movt	r0, #1
   14900:	movt	r1, #1
   14904:	movt	r3, #1
   14908:	bl	12418 <__assert_fail@plt>

0001490c <flatcc_builder_extend_vector@@Base>:
   1490c:	push	{r4, r5, fp, lr}
   14910:	add	fp, sp, #8
   14914:	sub	sp, sp, #8
   14918:	mov	r4, r0
   1491c:	ldr	r0, [r0, #32]
   14920:	ldr	r2, [r0, #20]
   14924:	adds	r2, r2, r1
   14928:	bcs	149e8 <flatcc_builder_extend_vector@@Base+0xdc>
   1492c:	ldr	r3, [r0, #24]
   14930:	cmp	r2, r3
   14934:	bhi	149e8 <flatcc_builder_extend_vector@@Base+0xdc>
   14938:	str	r2, [r0, #20]
   1493c:	ldr	r2, [r4, #32]
   14940:	ldr	r5, [r4, #20]
   14944:	ldr	r0, [r4, #24]
   14948:	ldr	r2, [r2, #16]
   1494c:	mla	r1, r2, r1, r5
   14950:	cmp	r1, r0
   14954:	str	r1, [r4, #20]
   14958:	bcs	1496c <flatcc_builder_extend_vector@@Base+0x60>
   1495c:	ldr	r0, [r4, #16]
   14960:	add	r0, r0, r5
   14964:	sub	sp, fp, #8
   14968:	pop	{r4, r5, fp, pc}
   1496c:	ldr	r2, [r4, #28]
   14970:	ldr	r0, [r4, #40]	; 0x28
   14974:	ldr	ip, [r4, #48]	; 0x30
   14978:	mov	r3, #1
   1497c:	str	r3, [sp]
   14980:	mov	r3, #1
   14984:	add	r1, r1, r2
   14988:	add	r2, r1, #1
   1498c:	add	r1, r4, #60	; 0x3c
   14990:	blx	ip
   14994:	mov	r1, r0
   14998:	mov	r0, #0
   1499c:	cmp	r1, #0
   149a0:	beq	149ac <flatcc_builder_extend_vector@@Base+0xa0>
   149a4:	sub	sp, fp, #8
   149a8:	pop	{r4, r5, fp, pc}
   149ac:	ldr	r1, [r4, #28]
   149b0:	ldr	r0, [r4, #60]	; 0x3c
   149b4:	ldr	r3, [r4, #64]	; 0x40
   149b8:	ldr	r2, [r4, #32]
   149bc:	add	r0, r0, r1
   149c0:	sub	r1, r3, r1
   149c4:	mvn	r3, #3
   149c8:	cmn	r1, #4
   149cc:	str	r0, [r4, #16]
   149d0:	movcs	r1, r3
   149d4:	str	r1, [r4, #24]
   149d8:	str	r3, [r2, #4]
   149dc:	add	r0, r0, r5
   149e0:	sub	sp, fp, #8
   149e4:	pop	{r4, r5, fp, pc}
   149e8:	movw	r0, #40351	; 0x9d9f
   149ec:	movw	r1, #36080	; 0x8cf0
   149f0:	movw	r3, #40378	; 0x9dba
   149f4:	mov	r2, #892	; 0x37c
   149f8:	movt	r0, #1
   149fc:	movt	r1, #1
   14a00:	movt	r3, #1
   14a04:	bl	12418 <__assert_fail@plt>

00014a08 <flatcc_builder_vector_push@@Base>:
   14a08:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   14a0c:	add	fp, sp, #24
   14a10:	sub	sp, sp, #8
   14a14:	mov	r5, r0
   14a18:	ldr	r0, [r0, #32]
   14a1c:	mov	r8, r1
   14a20:	ldrh	r1, [r0, #14]
   14a24:	cmp	r1, #4
   14a28:	bne	14b14 <flatcc_builder_vector_push@@Base+0x10c>
   14a2c:	ldr	r1, [r0, #20]
   14a30:	ldr	r2, [r0, #24]
   14a34:	cmp	r1, r2
   14a38:	bhi	14b34 <flatcc_builder_vector_push@@Base+0x12c>
   14a3c:	add	r1, r1, #1
   14a40:	str	r1, [r0, #20]
   14a44:	ldr	r1, [r5, #32]
   14a48:	ldr	r4, [r5, #20]
   14a4c:	ldr	r0, [r5, #24]
   14a50:	ldr	r6, [r1, #16]
   14a54:	add	r1, r4, r6
   14a58:	cmp	r1, r0
   14a5c:	str	r1, [r5, #20]
   14a60:	bcs	14a8c <flatcc_builder_vector_push@@Base+0x84>
   14a64:	ldr	r0, [r5, #16]
   14a68:	adds	r7, r0, r4
   14a6c:	beq	14b04 <flatcc_builder_vector_push@@Base+0xfc>
   14a70:	mov	r0, r7
   14a74:	mov	r1, r8
   14a78:	mov	r2, r6
   14a7c:	bl	12388 <memcpy@plt>
   14a80:	mov	r0, r7
   14a84:	sub	sp, fp, #24
   14a88:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14a8c:	ldr	r2, [r5, #28]
   14a90:	ldr	r0, [r5, #40]	; 0x28
   14a94:	ldr	r7, [r5, #48]	; 0x30
   14a98:	mov	r3, #1
   14a9c:	str	r3, [sp]
   14aa0:	mov	r3, #1
   14aa4:	add	r1, r1, r2
   14aa8:	add	r2, r1, #1
   14aac:	add	r1, r5, #60	; 0x3c
   14ab0:	blx	r7
   14ab4:	mov	r7, #0
   14ab8:	cmp	r0, #0
   14abc:	beq	14acc <flatcc_builder_vector_push@@Base+0xc4>
   14ac0:	mov	r0, r7
   14ac4:	sub	sp, fp, #24
   14ac8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14acc:	ldr	r1, [r5, #28]
   14ad0:	ldr	r0, [r5, #60]	; 0x3c
   14ad4:	ldr	r3, [r5, #64]	; 0x40
   14ad8:	ldr	r2, [r5, #32]
   14adc:	add	r0, r0, r1
   14ae0:	sub	r1, r3, r1
   14ae4:	mvn	r3, #3
   14ae8:	cmn	r1, #4
   14aec:	str	r0, [r5, #16]
   14af0:	movcs	r1, r3
   14af4:	str	r1, [r5, #24]
   14af8:	str	r3, [r2, #4]
   14afc:	adds	r7, r0, r4
   14b00:	bne	14a70 <flatcc_builder_vector_push@@Base+0x68>
   14b04:	mov	r7, #0
   14b08:	mov	r0, r7
   14b0c:	sub	sp, fp, #24
   14b10:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14b14:	movw	r0, #36883	; 0x9013
   14b18:	movw	r1, #36080	; 0x8cf0
   14b1c:	movw	r3, #36927	; 0x903f
   14b20:	movw	r2, #907	; 0x38b
   14b24:	movt	r0, #1
   14b28:	movt	r1, #1
   14b2c:	movt	r3, #1
   14b30:	bl	12418 <__assert_fail@plt>
   14b34:	movw	r0, #36994	; 0x9082
   14b38:	movw	r1, #36080	; 0x8cf0
   14b3c:	movw	r3, #36927	; 0x903f
   14b40:	mov	r2, #908	; 0x38c
   14b44:	movt	r0, #1
   14b48:	movt	r1, #1
   14b4c:	movt	r3, #1
   14b50:	bl	12418 <__assert_fail@plt>

00014b54 <flatcc_builder_append_vector@@Base>:
   14b54:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   14b58:	add	fp, sp, #24
   14b5c:	sub	sp, sp, #8
   14b60:	mov	r6, r0
   14b64:	ldr	r0, [r0, #32]
   14b68:	mov	r8, r1
   14b6c:	ldrh	r1, [r0, #14]
   14b70:	cmp	r1, #4
   14b74:	bne	14c88 <flatcc_builder_append_vector@@Base+0x134>
   14b78:	ldr	r1, [r0, #20]
   14b7c:	mov	r5, r2
   14b80:	adds	r1, r1, r2
   14b84:	bcs	14c68 <flatcc_builder_append_vector@@Base+0x114>
   14b88:	ldr	r2, [r0, #24]
   14b8c:	cmp	r1, r2
   14b90:	bhi	14c68 <flatcc_builder_append_vector@@Base+0x114>
   14b94:	str	r1, [r0, #20]
   14b98:	ldr	r1, [r6, #32]
   14b9c:	ldr	r4, [r6, #20]
   14ba0:	ldr	r0, [r6, #24]
   14ba4:	ldr	r9, [r1, #16]
   14ba8:	mla	r1, r9, r5, r4
   14bac:	cmp	r1, r0
   14bb0:	str	r1, [r6, #20]
   14bb4:	bcs	14be0 <flatcc_builder_append_vector@@Base+0x8c>
   14bb8:	ldr	r0, [r6, #16]
   14bbc:	adds	r7, r0, r4
   14bc0:	beq	14c58 <flatcc_builder_append_vector@@Base+0x104>
   14bc4:	mul	r2, r9, r5
   14bc8:	mov	r0, r7
   14bcc:	mov	r1, r8
   14bd0:	bl	12388 <memcpy@plt>
   14bd4:	mov	r0, r7
   14bd8:	sub	sp, fp, #24
   14bdc:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   14be0:	ldr	r2, [r6, #28]
   14be4:	ldr	r0, [r6, #40]	; 0x28
   14be8:	ldr	r7, [r6, #48]	; 0x30
   14bec:	mov	r3, #1
   14bf0:	str	r3, [sp]
   14bf4:	mov	r3, #1
   14bf8:	add	r1, r1, r2
   14bfc:	add	r2, r1, #1
   14c00:	add	r1, r6, #60	; 0x3c
   14c04:	blx	r7
   14c08:	mov	r7, #0
   14c0c:	cmp	r0, #0
   14c10:	beq	14c20 <flatcc_builder_append_vector@@Base+0xcc>
   14c14:	mov	r0, r7
   14c18:	sub	sp, fp, #24
   14c1c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   14c20:	ldr	r1, [r6, #28]
   14c24:	ldr	r0, [r6, #60]	; 0x3c
   14c28:	ldr	r3, [r6, #64]	; 0x40
   14c2c:	ldr	r2, [r6, #32]
   14c30:	add	r0, r0, r1
   14c34:	sub	r1, r3, r1
   14c38:	mvn	r3, #3
   14c3c:	cmn	r1, #4
   14c40:	str	r0, [r6, #16]
   14c44:	movcs	r1, r3
   14c48:	str	r1, [r6, #24]
   14c4c:	str	r3, [r2, #4]
   14c50:	adds	r7, r0, r4
   14c54:	bne	14bc4 <flatcc_builder_append_vector@@Base+0x70>
   14c58:	mov	r7, #0
   14c5c:	mov	r0, r7
   14c60:	sub	sp, fp, #24
   14c64:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   14c68:	movw	r0, #40351	; 0x9d9f
   14c6c:	movw	r1, #36080	; 0x8cf0
   14c70:	movw	r3, #40378	; 0x9dba
   14c74:	mov	r2, #892	; 0x37c
   14c78:	movt	r0, #1
   14c7c:	movt	r1, #1
   14c80:	movt	r3, #1
   14c84:	bl	12418 <__assert_fail@plt>
   14c88:	movw	r0, #36883	; 0x9013
   14c8c:	movw	r1, #36080	; 0x8cf0
   14c90:	movw	r3, #37055	; 0x90bf
   14c94:	movw	r2, #915	; 0x393
   14c98:	movt	r0, #1
   14c9c:	movt	r1, #1
   14ca0:	movt	r3, #1
   14ca4:	bl	12418 <__assert_fail@plt>

00014ca8 <flatcc_builder_extend_offset_vector@@Base>:
   14ca8:	push	{r4, r5, fp, lr}
   14cac:	add	fp, sp, #8
   14cb0:	sub	sp, sp, #8
   14cb4:	mov	r4, r0
   14cb8:	ldr	r0, [r0, #32]
   14cbc:	ldr	r2, [r0, #20]
   14cc0:	adds	r2, r2, r1
   14cc4:	cmpcc	r2, #1073741824	; 0x40000000
   14cc8:	bcc	14cec <flatcc_builder_extend_offset_vector@@Base+0x44>
   14ccc:	movw	r0, #40351	; 0x9d9f
   14cd0:	movw	r1, #36080	; 0x8cf0
   14cd4:	movw	r3, #40378	; 0x9dba
   14cd8:	mov	r2, #892	; 0x37c
   14cdc:	movt	r0, #1
   14ce0:	movt	r1, #1
   14ce4:	movt	r3, #1
   14ce8:	bl	12418 <__assert_fail@plt>
   14cec:	str	r2, [r0, #20]
   14cf0:	ldr	r5, [r4, #20]
   14cf4:	ldr	r0, [r4, #24]
   14cf8:	add	r1, r5, r1, lsl #2
   14cfc:	cmp	r1, r0
   14d00:	str	r1, [r4, #20]
   14d04:	bcs	14d18 <flatcc_builder_extend_offset_vector@@Base+0x70>
   14d08:	ldr	r0, [r4, #16]
   14d0c:	add	r0, r0, r5
   14d10:	sub	sp, fp, #8
   14d14:	pop	{r4, r5, fp, pc}
   14d18:	ldr	r2, [r4, #28]
   14d1c:	ldr	r0, [r4, #40]	; 0x28
   14d20:	ldr	ip, [r4, #48]	; 0x30
   14d24:	mov	r3, #1
   14d28:	str	r3, [sp]
   14d2c:	mov	r3, #1
   14d30:	add	r1, r1, r2
   14d34:	add	r2, r1, #1
   14d38:	add	r1, r4, #60	; 0x3c
   14d3c:	blx	ip
   14d40:	mov	r1, r0
   14d44:	mov	r0, #0
   14d48:	cmp	r1, #0
   14d4c:	beq	14d58 <flatcc_builder_extend_offset_vector@@Base+0xb0>
   14d50:	sub	sp, fp, #8
   14d54:	pop	{r4, r5, fp, pc}
   14d58:	ldr	r1, [r4, #28]
   14d5c:	ldr	r0, [r4, #60]	; 0x3c
   14d60:	ldr	r3, [r4, #64]	; 0x40
   14d64:	ldr	r2, [r4, #32]
   14d68:	add	r0, r0, r1
   14d6c:	sub	r1, r3, r1
   14d70:	mvn	r3, #3
   14d74:	cmn	r1, #4
   14d78:	str	r0, [r4, #16]
   14d7c:	movcs	r1, r3
   14d80:	str	r1, [r4, #24]
   14d84:	str	r3, [r2, #4]
   14d88:	add	r0, r0, r5
   14d8c:	sub	sp, fp, #8
   14d90:	pop	{r4, r5, fp, pc}

00014d94 <flatcc_builder_offset_vector_push@@Base>:
   14d94:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   14d98:	add	fp, sp, #24
   14d9c:	sub	sp, sp, #8
   14da0:	mov	r6, r0
   14da4:	ldr	r0, [r0, #32]
   14da8:	mov	r8, r1
   14dac:	ldrh	r1, [r0, #14]
   14db0:	cmp	r1, #5
   14db4:	bne	14e74 <flatcc_builder_offset_vector_push@@Base+0xe0>
   14db8:	ldr	r1, [r0, #20]
   14dbc:	mov	r5, #0
   14dc0:	cmn	r1, #-1073741823	; 0xc0000001
   14dc4:	beq	14e20 <flatcc_builder_offset_vector_push@@Base+0x8c>
   14dc8:	add	r1, r1, #1
   14dcc:	str	r1, [r0, #20]
   14dd0:	ldr	r7, [r6, #20]
   14dd4:	ldr	r0, [r6, #24]
   14dd8:	add	r1, r7, #4
   14ddc:	cmp	r1, r0
   14de0:	str	r1, [r6, #20]
   14de4:	bcs	14df0 <flatcc_builder_offset_vector_push@@Base+0x5c>
   14de8:	ldr	r0, [r6, #16]
   14dec:	b	14e5c <flatcc_builder_offset_vector_push@@Base+0xc8>
   14df0:	ldr	r1, [r6, #28]
   14df4:	ldr	r0, [r6, #40]	; 0x28
   14df8:	ldr	r4, [r6, #48]	; 0x30
   14dfc:	mov	r2, #1
   14e00:	mov	r3, #1
   14e04:	str	r2, [sp]
   14e08:	add	r1, r7, r1
   14e0c:	add	r2, r1, #5
   14e10:	add	r1, r6, #60	; 0x3c
   14e14:	blx	r4
   14e18:	cmp	r0, #0
   14e1c:	beq	14e2c <flatcc_builder_offset_vector_push@@Base+0x98>
   14e20:	mov	r0, r5
   14e24:	sub	sp, fp, #24
   14e28:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14e2c:	ldr	r1, [r6, #28]
   14e30:	ldr	r0, [r6, #60]	; 0x3c
   14e34:	ldr	r3, [r6, #64]	; 0x40
   14e38:	ldr	r2, [r6, #32]
   14e3c:	add	r0, r0, r1
   14e40:	sub	r1, r3, r1
   14e44:	mvn	r3, #3
   14e48:	cmn	r1, #4
   14e4c:	str	r0, [r6, #16]
   14e50:	movcs	r1, r3
   14e54:	str	r1, [r6, #24]
   14e58:	str	r3, [r2, #4]
   14e5c:	adds	r0, r0, r7
   14e60:	movne	r5, r0
   14e64:	strne	r8, [r0]
   14e68:	mov	r0, r5
   14e6c:	sub	sp, fp, #24
   14e70:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14e74:	movw	r0, #37132	; 0x910c
   14e78:	movw	r1, #36080	; 0x8cf0
   14e7c:	movw	r3, #37183	; 0x913f
   14e80:	movw	r2, #934	; 0x3a6
   14e84:	movt	r0, #1
   14e88:	movt	r1, #1
   14e8c:	movt	r3, #1
   14e90:	bl	12418 <__assert_fail@plt>

00014e94 <flatcc_builder_append_offset_vector@@Base>:
   14e94:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   14e98:	add	fp, sp, #24
   14e9c:	sub	sp, sp, #8
   14ea0:	mov	r6, r0
   14ea4:	ldr	r0, [r0, #32]
   14ea8:	mov	r8, r1
   14eac:	ldrh	r1, [r0, #14]
   14eb0:	cmp	r1, #5
   14eb4:	bne	14fb8 <flatcc_builder_append_offset_vector@@Base+0x124>
   14eb8:	ldr	r1, [r0, #20]
   14ebc:	mov	r5, r2
   14ec0:	adds	r1, r1, r2
   14ec4:	cmpcc	r1, #1073741824	; 0x40000000
   14ec8:	bcc	14eec <flatcc_builder_append_offset_vector@@Base+0x58>
   14ecc:	movw	r0, #40351	; 0x9d9f
   14ed0:	movw	r1, #36080	; 0x8cf0
   14ed4:	movw	r3, #40378	; 0x9dba
   14ed8:	mov	r2, #892	; 0x37c
   14edc:	movt	r0, #1
   14ee0:	movt	r1, #1
   14ee4:	movt	r3, #1
   14ee8:	bl	12418 <__assert_fail@plt>
   14eec:	str	r1, [r0, #20]
   14ef0:	ldr	r4, [r6, #20]
   14ef4:	ldr	r0, [r6, #24]
   14ef8:	add	r1, r4, r5, lsl #2
   14efc:	cmp	r1, r0
   14f00:	str	r1, [r6, #20]
   14f04:	bcs	14f30 <flatcc_builder_append_offset_vector@@Base+0x9c>
   14f08:	ldr	r0, [r6, #16]
   14f0c:	adds	r7, r0, r4
   14f10:	beq	14fa8 <flatcc_builder_append_offset_vector@@Base+0x114>
   14f14:	lsl	r2, r5, #2
   14f18:	mov	r0, r7
   14f1c:	mov	r1, r8
   14f20:	bl	12388 <memcpy@plt>
   14f24:	mov	r0, r7
   14f28:	sub	sp, fp, #24
   14f2c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14f30:	ldr	r2, [r6, #28]
   14f34:	ldr	r0, [r6, #40]	; 0x28
   14f38:	ldr	r7, [r6, #48]	; 0x30
   14f3c:	mov	r3, #1
   14f40:	str	r3, [sp]
   14f44:	mov	r3, #1
   14f48:	add	r1, r1, r2
   14f4c:	add	r2, r1, #1
   14f50:	add	r1, r6, #60	; 0x3c
   14f54:	blx	r7
   14f58:	mov	r7, #0
   14f5c:	cmp	r0, #0
   14f60:	beq	14f70 <flatcc_builder_append_offset_vector@@Base+0xdc>
   14f64:	mov	r0, r7
   14f68:	sub	sp, fp, #24
   14f6c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14f70:	ldr	r1, [r6, #28]
   14f74:	ldr	r0, [r6, #60]	; 0x3c
   14f78:	ldr	r3, [r6, #64]	; 0x40
   14f7c:	ldr	r2, [r6, #32]
   14f80:	add	r0, r0, r1
   14f84:	sub	r1, r3, r1
   14f88:	mvn	r3, #3
   14f8c:	cmn	r1, #4
   14f90:	str	r0, [r6, #16]
   14f94:	movcs	r1, r3
   14f98:	str	r1, [r6, #24]
   14f9c:	str	r3, [r2, #4]
   14fa0:	adds	r7, r0, r4
   14fa4:	bne	14f14 <flatcc_builder_append_offset_vector@@Base+0x80>
   14fa8:	mov	r7, #0
   14fac:	mov	r0, r7
   14fb0:	sub	sp, fp, #24
   14fb4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14fb8:	movw	r0, #37132	; 0x910c
   14fbc:	movw	r1, #36080	; 0x8cf0
   14fc0:	movw	r3, #37281	; 0x91a1
   14fc4:	mov	r2, #948	; 0x3b4
   14fc8:	movt	r0, #1
   14fcc:	movt	r1, #1
   14fd0:	movt	r3, #1
   14fd4:	bl	12418 <__assert_fail@plt>

00014fd8 <flatcc_builder_extend_string@@Base>:
   14fd8:	push	{r4, r5, fp, lr}
   14fdc:	add	fp, sp, #8
   14fe0:	sub	sp, sp, #8
   14fe4:	mov	r4, r0
   14fe8:	ldr	r0, [r0, #32]
   14fec:	ldrh	r2, [r0, #14]
   14ff0:	cmp	r2, #6
   14ff4:	bne	150ac <flatcc_builder_extend_string@@Base+0xd4>
   14ff8:	ldr	r2, [r0, #20]
   14ffc:	adds	r2, r2, r1
   15000:	bcs	150cc <flatcc_builder_extend_string@@Base+0xf4>
   15004:	str	r2, [r0, #20]
   15008:	ldr	r5, [r4, #20]
   1500c:	ldr	r0, [r4, #24]
   15010:	add	r1, r5, r1
   15014:	cmp	r1, r0
   15018:	str	r1, [r4, #20]
   1501c:	bcs	15030 <flatcc_builder_extend_string@@Base+0x58>
   15020:	ldr	r0, [r4, #16]
   15024:	add	r0, r0, r5
   15028:	sub	sp, fp, #8
   1502c:	pop	{r4, r5, fp, pc}
   15030:	ldr	r2, [r4, #28]
   15034:	ldr	r0, [r4, #40]	; 0x28
   15038:	ldr	ip, [r4, #48]	; 0x30
   1503c:	mov	r3, #1
   15040:	str	r3, [sp]
   15044:	mov	r3, #1
   15048:	add	r1, r1, r2
   1504c:	add	r2, r1, #1
   15050:	add	r1, r4, #60	; 0x3c
   15054:	blx	ip
   15058:	mov	r1, r0
   1505c:	mov	r0, #0
   15060:	cmp	r1, #0
   15064:	beq	15070 <flatcc_builder_extend_string@@Base+0x98>
   15068:	sub	sp, fp, #8
   1506c:	pop	{r4, r5, fp, pc}
   15070:	ldr	r1, [r4, #28]
   15074:	ldr	r0, [r4, #60]	; 0x3c
   15078:	ldr	r3, [r4, #64]	; 0x40
   1507c:	ldr	r2, [r4, #32]
   15080:	add	r0, r0, r1
   15084:	sub	r1, r3, r1
   15088:	mvn	r3, #3
   1508c:	cmn	r1, #4
   15090:	str	r0, [r4, #16]
   15094:	movcs	r1, r3
   15098:	str	r1, [r4, #24]
   1509c:	str	r3, [r2, #4]
   150a0:	add	r0, r0, r5
   150a4:	sub	sp, fp, #8
   150a8:	pop	{r4, r5, fp, pc}
   150ac:	movw	r0, #37397	; 0x9215
   150b0:	movw	r1, #36080	; 0x8cf0
   150b4:	movw	r3, #37441	; 0x9241
   150b8:	movw	r2, #957	; 0x3bd
   150bc:	movt	r0, #1
   150c0:	movt	r1, #1
   150c4:	movt	r3, #1
   150c8:	bl	12418 <__assert_fail@plt>
   150cc:	movw	r0, #40351	; 0x9d9f
   150d0:	movw	r1, #36080	; 0x8cf0
   150d4:	movw	r3, #40378	; 0x9dba
   150d8:	mov	r2, #892	; 0x37c
   150dc:	movt	r0, #1
   150e0:	movt	r1, #1
   150e4:	movt	r3, #1
   150e8:	bl	12418 <__assert_fail@plt>

000150ec <flatcc_builder_append_string@@Base>:
   150ec:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   150f0:	add	fp, sp, #24
   150f4:	sub	sp, sp, #8
   150f8:	mov	r6, r0
   150fc:	ldr	r0, [r0, #32]
   15100:	mov	r8, r1
   15104:	ldrh	r1, [r0, #14]
   15108:	cmp	r1, #6
   1510c:	bne	151ec <flatcc_builder_append_string@@Base+0x100>
   15110:	ldr	r1, [r0, #20]
   15114:	mov	r4, r2
   15118:	adds	r1, r1, r2
   1511c:	bcs	1520c <flatcc_builder_append_string@@Base+0x120>
   15120:	str	r1, [r0, #20]
   15124:	ldr	r5, [r6, #20]
   15128:	ldr	r0, [r6, #24]
   1512c:	add	r1, r5, r4
   15130:	cmp	r1, r0
   15134:	str	r1, [r6, #20]
   15138:	bcs	15164 <flatcc_builder_append_string@@Base+0x78>
   1513c:	ldr	r0, [r6, #16]
   15140:	adds	r7, r0, r5
   15144:	beq	151dc <flatcc_builder_append_string@@Base+0xf0>
   15148:	mov	r0, r7
   1514c:	mov	r1, r8
   15150:	mov	r2, r4
   15154:	bl	12388 <memcpy@plt>
   15158:	mov	r0, r7
   1515c:	sub	sp, fp, #24
   15160:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   15164:	ldr	r2, [r6, #28]
   15168:	ldr	r0, [r6, #40]	; 0x28
   1516c:	ldr	r7, [r6, #48]	; 0x30
   15170:	mov	r3, #1
   15174:	str	r3, [sp]
   15178:	mov	r3, #1
   1517c:	add	r1, r1, r2
   15180:	add	r2, r1, #1
   15184:	add	r1, r6, #60	; 0x3c
   15188:	blx	r7
   1518c:	mov	r7, #0
   15190:	cmp	r0, #0
   15194:	beq	151a4 <flatcc_builder_append_string@@Base+0xb8>
   15198:	mov	r0, r7
   1519c:	sub	sp, fp, #24
   151a0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   151a4:	ldr	r1, [r6, #28]
   151a8:	ldr	r0, [r6, #60]	; 0x3c
   151ac:	ldr	r3, [r6, #64]	; 0x40
   151b0:	ldr	r2, [r6, #32]
   151b4:	add	r0, r0, r1
   151b8:	sub	r1, r3, r1
   151bc:	mvn	r3, #3
   151c0:	cmn	r1, #4
   151c4:	str	r0, [r6, #16]
   151c8:	movcs	r1, r3
   151cc:	str	r1, [r6, #24]
   151d0:	str	r3, [r2, #4]
   151d4:	adds	r7, r0, r5
   151d8:	bne	15148 <flatcc_builder_append_string@@Base+0x5c>
   151dc:	mov	r7, #0
   151e0:	mov	r0, r7
   151e4:	sub	sp, fp, #24
   151e8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   151ec:	movw	r0, #37397	; 0x9215
   151f0:	movw	r1, #36080	; 0x8cf0
   151f4:	movw	r3, #37504	; 0x9280
   151f8:	movw	r2, #966	; 0x3c6
   151fc:	movt	r0, #1
   15200:	movt	r1, #1
   15204:	movt	r3, #1
   15208:	bl	12418 <__assert_fail@plt>
   1520c:	movw	r0, #40351	; 0x9d9f
   15210:	movw	r1, #36080	; 0x8cf0
   15214:	movw	r3, #40378	; 0x9dba
   15218:	mov	r2, #892	; 0x37c
   1521c:	movt	r0, #1
   15220:	movt	r1, #1
   15224:	movt	r3, #1
   15228:	bl	12418 <__assert_fail@plt>

0001522c <flatcc_builder_append_string_str@@Base>:
   1522c:	push	{r4, r5, fp, lr}
   15230:	add	fp, sp, #8
   15234:	mov	r5, r0
   15238:	mov	r0, r1
   1523c:	mov	r4, r1
   15240:	bl	123dc <strlen@plt>
   15244:	mov	r2, r0
   15248:	mov	r0, r5
   1524c:	mov	r1, r4
   15250:	pop	{r4, r5, fp, lr}
   15254:	b	150ec <flatcc_builder_append_string@@Base>

00015258 <flatcc_builder_append_string_strn@@Base>:
   15258:	push	{r4, r5, r6, sl, fp, lr}
   1525c:	add	fp, sp, #16
   15260:	mov	r6, r0
   15264:	mov	r5, r1
   15268:	mov	r0, r1
   1526c:	mov	r1, #0
   15270:	mov	r4, r2
   15274:	bl	12400 <memchr@plt>
   15278:	cmp	r0, #0
   1527c:	mov	r1, r5
   15280:	subne	r4, r0, r5
   15284:	mov	r0, r6
   15288:	mov	r2, r4
   1528c:	pop	{r4, r5, r6, sl, fp, lr}
   15290:	b	150ec <flatcc_builder_append_string@@Base>

00015294 <flatcc_builder_truncate_vector@@Base>:
   15294:	push	{fp, lr}
   15298:	mov	fp, sp
   1529c:	ldr	r2, [r0, #32]
   152a0:	ldrh	r3, [r2, #14]
   152a4:	cmp	r3, #4
   152a8:	bne	152f0 <flatcc_builder_truncate_vector@@Base+0x5c>
   152ac:	ldr	r3, [r2, #20]
   152b0:	cmp	r3, r1
   152b4:	bcc	15310 <flatcc_builder_truncate_vector@@Base+0x7c>
   152b8:	sub	r3, r3, r1
   152bc:	str	r3, [r2, #20]
   152c0:	ldr	r2, [r0, #32]
   152c4:	ldr	r3, [r0, #20]
   152c8:	ldr	ip, [r0, #16]
   152cc:	ldr	r2, [r2, #16]
   152d0:	mls	r3, r2, r1, r3
   152d4:	mul	r2, r2, r1
   152d8:	mov	r1, #0
   152dc:	str	r3, [r0, #20]
   152e0:	add	r0, ip, r3
   152e4:	bl	123f4 <memset@plt>
   152e8:	mov	r0, #0
   152ec:	pop	{fp, pc}
   152f0:	movw	r0, #36883	; 0x9013
   152f4:	movw	r1, #36080	; 0x8cf0
   152f8:	movw	r3, #37581	; 0x92cd
   152fc:	movw	r2, #985	; 0x3d9
   15300:	movt	r0, #1
   15304:	movt	r1, #1
   15308:	movt	r3, #1
   1530c:	bl	12418 <__assert_fail@plt>
   15310:	movw	r0, #37644	; 0x930c
   15314:	movw	r1, #36080	; 0x8cf0
   15318:	movw	r3, #37581	; 0x92cd
   1531c:	movw	r2, #986	; 0x3da
   15320:	movt	r0, #1
   15324:	movt	r1, #1
   15328:	movt	r3, #1
   1532c:	bl	12418 <__assert_fail@plt>

00015330 <flatcc_builder_truncate_offset_vector@@Base>:
   15330:	push	{fp, lr}
   15334:	mov	fp, sp
   15338:	ldr	r2, [r0, #32]
   1533c:	ldrh	r3, [r2, #14]
   15340:	cmp	r3, #5
   15344:	bne	1538c <flatcc_builder_truncate_offset_vector@@Base+0x5c>
   15348:	ldr	r3, [r2, #20]
   1534c:	cmp	r3, r1
   15350:	bcc	153ac <flatcc_builder_truncate_offset_vector@@Base+0x7c>
   15354:	sub	r3, r3, r1
   15358:	str	r3, [r2, #20]
   1535c:	ldr	r2, [r0, #32]
   15360:	ldr	r3, [r0, #20]
   15364:	ldr	ip, [r0, #16]
   15368:	ldr	r2, [r2, #16]
   1536c:	mls	r3, r2, r1, r3
   15370:	mul	r2, r2, r1
   15374:	mov	r1, #0
   15378:	str	r3, [r0, #20]
   1537c:	add	r0, ip, r3
   15380:	bl	123f4 <memset@plt>
   15384:	mov	r0, #0
   15388:	pop	{fp, pc}
   1538c:	movw	r0, #37132	; 0x910c
   15390:	movw	r1, #36080	; 0x8cf0
   15394:	movw	r3, #37680	; 0x9330
   15398:	movw	r2, #994	; 0x3e2
   1539c:	movt	r0, #1
   153a0:	movt	r1, #1
   153a4:	movt	r3, #1
   153a8:	bl	12418 <__assert_fail@plt>
   153ac:	movw	r0, #37750	; 0x9376
   153b0:	movw	r1, #36080	; 0x8cf0
   153b4:	movw	r3, #37680	; 0x9330
   153b8:	movw	r2, #995	; 0x3e3
   153bc:	movt	r0, #1
   153c0:	movt	r1, #1
   153c4:	movt	r3, #1
   153c8:	bl	12418 <__assert_fail@plt>

000153cc <flatcc_builder_truncate_string@@Base>:
   153cc:	push	{fp, lr}
   153d0:	mov	fp, sp
   153d4:	mov	r2, r1
   153d8:	ldr	r1, [r0, #32]
   153dc:	ldrh	r3, [r1, #14]
   153e0:	cmp	r3, #6
   153e4:	bne	15420 <flatcc_builder_truncate_string@@Base+0x54>
   153e8:	ldr	r3, [r1, #20]
   153ec:	cmp	r3, r2
   153f0:	bcc	15440 <flatcc_builder_truncate_string@@Base+0x74>
   153f4:	sub	r3, r3, r2
   153f8:	str	r3, [r1, #20]
   153fc:	ldr	r3, [r0, #20]
   15400:	ldr	r1, [r0, #16]
   15404:	sub	r3, r3, r2
   15408:	str	r3, [r0, #20]
   1540c:	add	r0, r1, r3
   15410:	mov	r1, #0
   15414:	bl	123f4 <memset@plt>
   15418:	mov	r0, #0
   1541c:	pop	{fp, pc}
   15420:	movw	r0, #37397	; 0x9215
   15424:	movw	r1, #36080	; 0x8cf0
   15428:	movw	r3, #37809	; 0x93b1
   1542c:	movw	r2, #1003	; 0x3eb
   15430:	movt	r0, #1
   15434:	movt	r1, #1
   15438:	movt	r3, #1
   1543c:	bl	12418 <__assert_fail@plt>
   15440:	movw	r0, #37872	; 0x93f0
   15444:	movw	r1, #36080	; 0x8cf0
   15448:	movw	r3, #37809	; 0x93b1
   1544c:	mov	r2, #1004	; 0x3ec
   15450:	movt	r0, #1
   15454:	movt	r1, #1
   15458:	movt	r3, #1
   1545c:	bl	12418 <__assert_fail@plt>

00015460 <flatcc_builder_start_vector@@Base>:
   15460:	push	{r4, r5, r6, r7, fp, lr}
   15464:	add	fp, sp, #16
   15468:	mov	r7, #4
   1546c:	cmp	r2, #4
   15470:	mov	r6, r1
   15474:	mov	r5, r3
   15478:	mov	r4, r0
   1547c:	movls	r2, r7
   15480:	mov	r1, r2
   15484:	bl	144dc <flatcc_builder_start_buffer@@Base+0xbc>
   15488:	mov	r1, r0
   1548c:	mvn	r0, #0
   15490:	cmp	r1, #0
   15494:	popne	{r4, r5, r6, r7, fp, pc}
   15498:	ldr	r0, [r4, #32]
   1549c:	str	r6, [r0, #16]
   154a0:	mov	r0, #0
   154a4:	ldr	r1, [r4, #32]
   154a8:	str	r0, [r1, #20]
   154ac:	ldr	r1, [r4, #32]
   154b0:	str	r5, [r1, #24]
   154b4:	ldr	r1, [r4, #32]
   154b8:	strh	r7, [r1, #14]
   154bc:	ldr	r2, [r4, #28]
   154c0:	ldr	r3, [r4, #60]	; 0x3c
   154c4:	ldr	r7, [r4, #64]	; 0x40
   154c8:	add	r3, r3, r2
   154cc:	sub	r2, r7, r2
   154d0:	str	r3, [r4, #16]
   154d4:	mvn	r3, #3
   154d8:	cmn	r2, #4
   154dc:	movcs	r2, r3
   154e0:	str	r2, [r4, #24]
   154e4:	str	r3, [r1, #4]
   154e8:	pop	{r4, r5, r6, r7, fp, pc}

000154ec <flatcc_builder_start_offset_vector@@Base>:
   154ec:	push	{r4, r5, fp, lr}
   154f0:	add	fp, sp, #8
   154f4:	mov	r1, #4
   154f8:	mov	r4, r0
   154fc:	mov	r5, #4
   15500:	bl	144dc <flatcc_builder_start_buffer@@Base+0xbc>
   15504:	mov	r1, r0
   15508:	mvn	r0, #0
   1550c:	cmp	r1, #0
   15510:	popne	{r4, r5, fp, pc}
   15514:	ldr	r0, [r4, #32]
   15518:	mov	r2, #5
   1551c:	str	r5, [r0, #16]
   15520:	mov	r0, #0
   15524:	ldr	r1, [r4, #32]
   15528:	str	r0, [r1, #20]
   1552c:	ldr	r1, [r4, #32]
   15530:	strh	r2, [r1, #14]
   15534:	ldr	r2, [r4, #28]
   15538:	ldr	r3, [r4, #60]	; 0x3c
   1553c:	ldr	r5, [r4, #64]	; 0x40
   15540:	add	r3, r3, r2
   15544:	sub	r2, r5, r2
   15548:	str	r3, [r4, #16]
   1554c:	mvn	r3, #3
   15550:	cmn	r2, #4
   15554:	movcs	r2, r3
   15558:	str	r2, [r4, #24]
   1555c:	str	r3, [r1, #4]
   15560:	pop	{r4, r5, fp, pc}

00015564 <flatcc_builder_create_offset_vector@@Base>:
   15564:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   15568:	add	fp, sp, #24
   1556c:	sub	sp, sp, #8
   15570:	mov	r8, r1
   15574:	mov	r1, #4
   15578:	mov	r6, r2
   1557c:	mov	r4, r0
   15580:	mov	r5, #4
   15584:	bl	144dc <flatcc_builder_start_buffer@@Base+0xbc>
   15588:	mov	r7, #0
   1558c:	cmp	r0, #0
   15590:	beq	155a0 <flatcc_builder_create_offset_vector@@Base+0x3c>
   15594:	mov	r0, r7
   15598:	sub	sp, fp, #24
   1559c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   155a0:	ldr	r0, [r4, #32]
   155a4:	mov	r1, #0
   155a8:	str	r5, [r0, #16]
   155ac:	ldr	r0, [r4, #32]
   155b0:	str	r1, [r0, #20]
   155b4:	mov	r1, #5
   155b8:	ldr	r0, [r4, #32]
   155bc:	strh	r1, [r0, #14]
   155c0:	ldr	r1, [r4, #28]
   155c4:	ldr	r2, [r4, #60]	; 0x3c
   155c8:	ldr	r3, [r4, #64]	; 0x40
   155cc:	add	r2, r2, r1
   155d0:	sub	r1, r3, r1
   155d4:	str	r2, [r4, #16]
   155d8:	mvn	r2, #3
   155dc:	cmn	r1, #4
   155e0:	movcs	r1, r2
   155e4:	str	r1, [r4, #24]
   155e8:	str	r2, [r0, #4]
   155ec:	ldr	r1, [r0, #20]
   155f0:	adds	r1, r1, r6
   155f4:	cmpcc	r1, #1073741824	; 0x40000000
   155f8:	bcc	1561c <flatcc_builder_create_offset_vector@@Base+0xb8>
   155fc:	movw	r0, #40351	; 0x9d9f
   15600:	movw	r1, #36080	; 0x8cf0
   15604:	movw	r3, #40378	; 0x9dba
   15608:	mov	r2, #892	; 0x37c
   1560c:	movt	r0, #1
   15610:	movt	r1, #1
   15614:	movt	r3, #1
   15618:	bl	12418 <__assert_fail@plt>
   1561c:	str	r1, [r0, #20]
   15620:	ldr	r5, [r4, #20]
   15624:	ldr	r0, [r4, #24]
   15628:	add	r1, r5, r6, lsl #2
   1562c:	cmp	r1, r0
   15630:	str	r1, [r4, #20]
   15634:	bcs	15708 <flatcc_builder_create_offset_vector@@Base+0x1a4>
   15638:	ldr	r0, [r4, #16]
   1563c:	adds	r0, r0, r5
   15640:	beq	15774 <flatcc_builder_create_offset_vector@@Base+0x210>
   15644:	lsl	r2, r6, #2
   15648:	mov	r1, r8
   1564c:	bl	12388 <memcpy@plt>
   15650:	ldr	r0, [r4, #32]
   15654:	ldrh	r1, [r0, #14]
   15658:	cmp	r1, #5
   1565c:	bne	15784 <flatcc_builder_create_offset_vector@@Base+0x220>
   15660:	ldr	r2, [r0, #20]
   15664:	ldr	r1, [r4, #16]
   15668:	mov	r0, r4
   1566c:	mov	r3, #0
   15670:	mov	r7, #0
   15674:	bl	167e4 <flatcc_builder_create_offset_vector_direct@@Base+0x8>
   15678:	cmp	r0, #0
   1567c:	beq	15594 <flatcc_builder_create_offset_vector@@Base+0x30>
   15680:	mov	r5, r0
   15684:	ldr	r0, [r4, #16]
   15688:	ldr	r2, [r4, #20]
   1568c:	mov	r1, #0
   15690:	bl	123f4 <memset@plt>
   15694:	ldr	r0, [r4, #32]
   15698:	ldr	r1, [r4, #60]	; 0x3c
   1569c:	ldr	r2, [r4, #64]	; 0x40
   156a0:	ldr	r3, [r0, #8]
   156a4:	str	r3, [r4, #20]
   156a8:	ldr	r3, [r0]
   156ac:	str	r3, [r4, #28]
   156b0:	add	r1, r1, r3
   156b4:	ldr	r7, [r0, #4]
   156b8:	str	r1, [r4, #16]
   156bc:	sub	r1, r2, r3
   156c0:	cmp	r1, r7
   156c4:	movhi	r1, r7
   156c8:	mov	r7, r5
   156cc:	str	r1, [r4, #24]
   156d0:	ldrh	r1, [r4, #130]	; 0x82
   156d4:	ldrh	r2, [r4, #128]	; 0x80
   156d8:	cmp	r2, r1
   156dc:	strhcc	r1, [r4, #128]	; 0x80
   156e0:	ldrh	r1, [r0, #12]
   156e4:	sub	r0, r0, #36	; 0x24
   156e8:	str	r0, [r4, #32]
   156ec:	strh	r1, [r4, #130]	; 0x82
   156f0:	ldr	r0, [r4, #156]	; 0x9c
   156f4:	sub	r0, r0, #1
   156f8:	str	r0, [r4, #156]	; 0x9c
   156fc:	mov	r0, r7
   15700:	sub	sp, fp, #24
   15704:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   15708:	ldr	r2, [r4, #28]
   1570c:	ldr	r0, [r4, #40]	; 0x28
   15710:	ldr	r7, [r4, #48]	; 0x30
   15714:	mov	r3, #1
   15718:	str	r3, [sp]
   1571c:	mov	r3, #1
   15720:	add	r1, r1, r2
   15724:	add	r2, r1, #1
   15728:	add	r1, r4, #60	; 0x3c
   1572c:	blx	r7
   15730:	mov	r7, #0
   15734:	cmp	r0, #0
   15738:	bne	15594 <flatcc_builder_create_offset_vector@@Base+0x30>
   1573c:	ldr	r1, [r4, #28]
   15740:	ldr	r0, [r4, #60]	; 0x3c
   15744:	ldr	r3, [r4, #64]	; 0x40
   15748:	ldr	r2, [r4, #32]
   1574c:	add	r0, r0, r1
   15750:	sub	r1, r3, r1
   15754:	mvn	r3, #3
   15758:	cmn	r1, #4
   1575c:	str	r0, [r4, #16]
   15760:	movcs	r1, r3
   15764:	str	r1, [r4, #24]
   15768:	str	r3, [r2, #4]
   1576c:	adds	r0, r0, r5
   15770:	bne	15644 <flatcc_builder_create_offset_vector@@Base+0xe0>
   15774:	mov	r7, #0
   15778:	mov	r0, r7
   1577c:	sub	sp, fp, #24
   15780:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   15784:	movw	r0, #37132	; 0x910c
   15788:	movw	r1, #36080	; 0x8cf0
   1578c:	movw	r3, #38715	; 0x973b
   15790:	movw	r2, #1480	; 0x5c8
   15794:	movt	r0, #1
   15798:	movt	r1, #1
   1579c:	movt	r3, #1
   157a0:	bl	12418 <__assert_fail@plt>

000157a4 <flatcc_builder_end_offset_vector@@Base>:
   157a4:	push	{r4, r5, fp, lr}
   157a8:	add	fp, sp, #8
   157ac:	mov	r4, r0
   157b0:	ldr	r0, [r0, #32]
   157b4:	ldrh	r1, [r0, #14]
   157b8:	cmp	r1, #5
   157bc:	bne	1585c <flatcc_builder_end_offset_vector@@Base+0xb8>
   157c0:	ldr	r2, [r0, #20]
   157c4:	ldr	r1, [r4, #16]
   157c8:	mov	r0, r4
   157cc:	mov	r3, #0
   157d0:	bl	167e4 <flatcc_builder_create_offset_vector_direct@@Base+0x8>
   157d4:	mov	r5, r0
   157d8:	cmp	r0, #0
   157dc:	beq	15854 <flatcc_builder_end_offset_vector@@Base+0xb0>
   157e0:	ldr	r0, [r4, #16]
   157e4:	ldr	r2, [r4, #20]
   157e8:	mov	r1, #0
   157ec:	bl	123f4 <memset@plt>
   157f0:	ldr	r0, [r4, #32]
   157f4:	ldr	r1, [r4, #60]	; 0x3c
   157f8:	ldr	ip, [r4, #64]	; 0x40
   157fc:	ldr	r3, [r0, #8]
   15800:	str	r3, [r4, #20]
   15804:	ldr	r3, [r0]
   15808:	str	r3, [r4, #28]
   1580c:	add	r1, r1, r3
   15810:	ldr	r2, [r0, #4]
   15814:	str	r1, [r4, #16]
   15818:	sub	r1, ip, r3
   1581c:	cmp	r1, r2
   15820:	movhi	r1, r2
   15824:	str	r1, [r4, #24]
   15828:	ldrh	r1, [r4, #130]	; 0x82
   1582c:	ldrh	r2, [r4, #128]	; 0x80
   15830:	cmp	r2, r1
   15834:	strhcc	r1, [r4, #128]	; 0x80
   15838:	ldrh	r1, [r0, #12]
   1583c:	sub	r0, r0, #36	; 0x24
   15840:	str	r0, [r4, #32]
   15844:	strh	r1, [r4, #130]	; 0x82
   15848:	ldr	r0, [r4, #156]	; 0x9c
   1584c:	sub	r0, r0, #1
   15850:	str	r0, [r4, #156]	; 0x9c
   15854:	mov	r0, r5
   15858:	pop	{r4, r5, fp, pc}
   1585c:	movw	r0, #37132	; 0x910c
   15860:	movw	r1, #36080	; 0x8cf0
   15864:	movw	r3, #38715	; 0x973b
   15868:	movw	r2, #1480	; 0x5c8
   1586c:	movt	r0, #1
   15870:	movt	r1, #1
   15874:	movt	r3, #1
   15878:	bl	12418 <__assert_fail@plt>

0001587c <flatcc_builder_start_string@@Base>:
   1587c:	push	{r4, r5, fp, lr}
   15880:	add	fp, sp, #8
   15884:	mov	r1, #1
   15888:	mov	r4, r0
   1588c:	mov	r5, #1
   15890:	bl	144dc <flatcc_builder_start_buffer@@Base+0xbc>
   15894:	mov	r1, r0
   15898:	mvn	r0, #0
   1589c:	cmp	r1, #0
   158a0:	popne	{r4, r5, fp, pc}
   158a4:	ldr	r0, [r4, #32]
   158a8:	mov	r2, #6
   158ac:	str	r5, [r0, #16]
   158b0:	mov	r0, #0
   158b4:	ldr	r1, [r4, #32]
   158b8:	str	r0, [r1, #20]
   158bc:	ldr	r1, [r4, #32]
   158c0:	strh	r2, [r1, #14]
   158c4:	ldr	r2, [r4, #28]
   158c8:	ldr	r3, [r4, #60]	; 0x3c
   158cc:	ldr	r5, [r4, #64]	; 0x40
   158d0:	add	r3, r3, r2
   158d4:	sub	r2, r5, r2
   158d8:	str	r3, [r4, #16]
   158dc:	mvn	r3, #3
   158e0:	cmn	r2, #4
   158e4:	movcs	r2, r3
   158e8:	str	r2, [r4, #24]
   158ec:	str	r3, [r1, #4]
   158f0:	pop	{r4, r5, fp, pc}

000158f4 <flatcc_builder_reserve_table@@Base>:
   158f4:	push	{r4, r5, r6, sl, fp, lr}
   158f8:	add	fp, sp, #16
   158fc:	sub	sp, sp, #8
   15900:	cmn	r1, #1
   15904:	ble	159dc <flatcc_builder_reserve_table@@Base+0xe8>
   15908:	mov	r4, r0
   1590c:	ldr	r0, [r0, #32]
   15910:	mov	r5, r1
   15914:	ldr	r1, [r4, #56]	; 0x38
   15918:	ldrh	r2, [r0, #28]
   1591c:	ldr	r0, [r0, #16]
   15920:	add	r6, r0, r2, lsl #1
   15924:	add	r0, r6, r5, lsl #1
   15928:	add	r2, r0, #4
   1592c:	cmp	r2, r1
   15930:	bls	15958 <flatcc_builder_reserve_table@@Base+0x64>
   15934:	ldr	r0, [r4, #40]	; 0x28
   15938:	ldr	ip, [r4, #48]	; 0x30
   1593c:	mov	r3, #0
   15940:	add	r1, r4, #52	; 0x34
   15944:	str	r3, [sp]
   15948:	mov	r3, #1
   1594c:	blx	ip
   15950:	cmp	r0, #0
   15954:	bne	159fc <flatcc_builder_reserve_table@@Base+0x108>
   15958:	ldr	r0, [r4, #52]	; 0x34
   1595c:	adds	r0, r0, r6
   15960:	str	r0, [r4, #4]
   15964:	beq	159d0 <flatcc_builder_reserve_table@@Base+0xdc>
   15968:	add	r0, r0, #4
   1596c:	lsl	r1, r5, #1
   15970:	str	r0, [r4, #4]
   15974:	ldr	r0, [r4, #32]
   15978:	ldr	r3, [r4, #80]	; 0x50
   1597c:	ldr	r5, [r0, #20]
   15980:	orr	r0, r1, #1
   15984:	add	r2, r5, r0
   15988:	cmp	r2, r3
   1598c:	bls	159b4 <flatcc_builder_reserve_table@@Base+0xc0>
   15990:	ldr	r0, [r4, #40]	; 0x28
   15994:	ldr	r6, [r4, #48]	; 0x30
   15998:	mov	r3, #3
   1599c:	add	r1, r4, #76	; 0x4c
   159a0:	str	r3, [sp]
   159a4:	mov	r3, #0
   159a8:	blx	r6
   159ac:	cmp	r0, #0
   159b0:	bne	159fc <flatcc_builder_reserve_table@@Base+0x108>
   159b4:	ldr	r0, [r4, #76]	; 0x4c
   159b8:	adds	r0, r0, r5
   159bc:	str	r0, [r4]
   159c0:	mov	r0, #0
   159c4:	mvneq	r0, #0
   159c8:	sub	sp, fp, #16
   159cc:	pop	{r4, r5, r6, sl, fp, pc}
   159d0:	mvn	r0, #0
   159d4:	sub	sp, fp, #16
   159d8:	pop	{r4, r5, r6, sl, fp, pc}
   159dc:	movw	r0, #37971	; 0x9453
   159e0:	movw	r1, #36080	; 0x8cf0
   159e4:	movw	r3, #37906	; 0x9412
   159e8:	movw	r2, #1065	; 0x429
   159ec:	movt	r0, #1
   159f0:	movt	r1, #1
   159f4:	movt	r3, #1
   159f8:	bl	12418 <__assert_fail@plt>
   159fc:	movw	r0, #40598	; 0x9e96
   15a00:	movw	r1, #36080	; 0x8cf0
   15a04:	movw	r3, #40144	; 0x9cd0
   15a08:	mov	r2, #308	; 0x134
   15a0c:	movt	r0, #1
   15a10:	movt	r1, #1
   15a14:	movt	r3, #1
   15a18:	bl	12418 <__assert_fail@plt>

00015a1c <flatcc_builder_start_table@@Base>:
   15a1c:	push	{r4, r5, r6, r7, fp, lr}
   15a20:	add	fp, sp, #16
   15a24:	sub	sp, sp, #8
   15a28:	mov	r6, r1
   15a2c:	mov	r1, #4
   15a30:	mov	r4, r0
   15a34:	bl	144dc <flatcc_builder_start_buffer@@Base+0xbc>
   15a38:	mvn	r5, #0
   15a3c:	cmp	r0, #0
   15a40:	beq	15a50 <flatcc_builder_start_table@@Base+0x34>
   15a44:	mov	r0, r5
   15a48:	sub	sp, fp, #16
   15a4c:	pop	{r4, r5, r6, r7, fp, pc}
   15a50:	mov	r1, r4
   15a54:	ldr	r2, [r4, #4]
   15a58:	ldr	r3, [r4, #32]
   15a5c:	ldr	r0, [r1, #52]!	; 0x34
   15a60:	sub	r0, r2, r0
   15a64:	str	r0, [r3, #16]
   15a68:	ldr	r0, [r4]
   15a6c:	ldr	r3, [r4, #76]	; 0x4c
   15a70:	ldr	r2, [r4, #32]
   15a74:	sub	r0, r0, r3
   15a78:	mov	r3, #0
   15a7c:	str	r0, [r2, #20]
   15a80:	ldr	r0, [r4, #12]
   15a84:	ldr	r2, [r4, #32]
   15a88:	str	r0, [r2, #24]
   15a8c:	ldr	r0, [r4, #32]
   15a90:	ldrh	r2, [r4, #8]
   15a94:	strh	r2, [r0, #28]
   15a98:	movw	r0, #15186	; 0x3b52
   15a9c:	strh	r3, [r4, #8]
   15aa0:	mov	r2, #3
   15aa4:	movt	r0, #12137	; 0x2f69
   15aa8:	str	r0, [r4, #12]
   15aac:	ldr	r0, [r4, #32]
   15ab0:	strh	r2, [r0, #14]
   15ab4:	ldrh	r2, [r0, #28]
   15ab8:	ldr	r0, [r0, #16]
   15abc:	add	r7, r0, r2, lsl #1
   15ac0:	add	r0, r7, r6, lsl #1
   15ac4:	add	r2, r0, #4
   15ac8:	ldr	r0, [r4, #56]	; 0x38
   15acc:	cmp	r2, r0
   15ad0:	bls	15af0 <flatcc_builder_start_table@@Base+0xd4>
   15ad4:	ldr	r0, [r4, #40]	; 0x28
   15ad8:	ldr	ip, [r4, #48]	; 0x30
   15adc:	str	r3, [sp]
   15ae0:	mov	r3, #1
   15ae4:	blx	ip
   15ae8:	cmp	r0, #0
   15aec:	bne	15b9c <flatcc_builder_start_table@@Base+0x180>
   15af0:	ldr	r0, [r4, #52]	; 0x34
   15af4:	adds	r0, r0, r7
   15af8:	str	r0, [r4, #4]
   15afc:	beq	15a44 <flatcc_builder_start_table@@Base+0x28>
   15b00:	add	r0, r0, #4
   15b04:	lsl	r1, r6, #1
   15b08:	str	r0, [r4, #4]
   15b0c:	ldr	r0, [r4, #32]
   15b10:	ldr	r3, [r4, #80]	; 0x50
   15b14:	ldr	r6, [r0, #20]
   15b18:	orr	r0, r1, #1
   15b1c:	add	r2, r6, r0
   15b20:	cmp	r2, r3
   15b24:	bls	15b4c <flatcc_builder_start_table@@Base+0x130>
   15b28:	ldr	r0, [r4, #40]	; 0x28
   15b2c:	ldr	r7, [r4, #48]	; 0x30
   15b30:	mov	r3, #3
   15b34:	add	r1, r4, #76	; 0x4c
   15b38:	str	r3, [sp]
   15b3c:	mov	r3, #0
   15b40:	blx	r7
   15b44:	cmp	r0, #0
   15b48:	bne	15b9c <flatcc_builder_start_table@@Base+0x180>
   15b4c:	ldr	r0, [r4, #76]	; 0x4c
   15b50:	adds	r0, r0, r6
   15b54:	str	r0, [r4]
   15b58:	beq	15a44 <flatcc_builder_start_table@@Base+0x28>
   15b5c:	ldr	r0, [r4, #28]
   15b60:	ldr	r2, [r4, #60]	; 0x3c
   15b64:	ldr	r3, [r4, #64]	; 0x40
   15b68:	ldr	r1, [r4, #32]
   15b6c:	mov	r5, #0
   15b70:	add	r2, r2, r0
   15b74:	sub	r0, r3, r0
   15b78:	str	r2, [r4, #16]
   15b7c:	movw	r2, #65532	; 0xfffc
   15b80:	cmp	r0, r2
   15b84:	movcs	r0, r2
   15b88:	str	r0, [r4, #24]
   15b8c:	str	r2, [r1, #4]
   15b90:	mov	r0, r5
   15b94:	sub	sp, fp, #16
   15b98:	pop	{r4, r5, r6, r7, fp, pc}
   15b9c:	movw	r0, #40598	; 0x9e96
   15ba0:	movw	r1, #36080	; 0x8cf0
   15ba4:	movw	r3, #40144	; 0x9cd0
   15ba8:	mov	r2, #308	; 0x134
   15bac:	movt	r0, #1
   15bb0:	movt	r1, #1
   15bb4:	movt	r3, #1
   15bb8:	bl	12418 <__assert_fail@plt>

00015bbc <flatcc_builder_create_vtable@@Base>:
   15bbc:	push	{r4, r5, fp, lr}
   15bc0:	add	fp, sp, #8
   15bc4:	sub	sp, sp, #80	; 0x50
   15bc8:	mov	r3, r2
   15bcc:	mov	r2, #0
   15bd0:	mov	r4, r0
   15bd4:	cmp	r3, #0
   15bd8:	str	r2, [sp, #12]
   15bdc:	str	r2, [sp, #8]
   15be0:	movne	r2, #1
   15be4:	strne	r3, [sp, #20]
   15be8:	strne	r1, [sp, #16]
   15bec:	strne	r3, [sp, #8]
   15bf0:	strne	r2, [sp, #12]
   15bf4:	ldr	r0, [r4, #152]	; 0x98
   15bf8:	cmp	r0, #0
   15bfc:	bne	15c0c <flatcc_builder_create_vtable@@Base+0x50>
   15c00:	ldr	r0, [r4, #180]	; 0xb4
   15c04:	cmp	r0, #0
   15c08:	beq	15c68 <flatcc_builder_create_vtable@@Base+0xac>
   15c0c:	cmp	r3, #0
   15c10:	beq	15cac <flatcc_builder_create_vtable@@Base+0xf0>
   15c14:	ldr	r0, [r4, #136]	; 0x88
   15c18:	ldr	ip, [r4, #44]	; 0x2c
   15c1c:	add	r1, sp, #8
   15c20:	add	r1, r1, #8
   15c24:	sub	r5, r0, r3
   15c28:	ldr	r0, [r4, #36]	; 0x24
   15c2c:	str	r3, [sp]
   15c30:	mov	r3, r5
   15c34:	blx	ip
   15c38:	cmp	r0, #0
   15c3c:	bne	15ccc <flatcc_builder_create_vtable@@Base+0x110>
   15c40:	cmp	r5, #0
   15c44:	str	r5, [r4, #136]	; 0x88
   15c48:	beq	15c5c <flatcc_builder_create_vtable@@Base+0xa0>
   15c4c:	add	r1, r5, #1
   15c50:	mov	r0, r1
   15c54:	sub	sp, fp, #8
   15c58:	pop	{r4, r5, fp, pc}
   15c5c:	mov	r0, #0
   15c60:	sub	sp, fp, #8
   15c64:	pop	{r4, r5, fp, pc}
   15c68:	ldr	r5, [r4, #140]	; 0x8c
   15c6c:	ldr	r0, [r4, #36]	; 0x24
   15c70:	ldr	ip, [r4, #44]	; 0x2c
   15c74:	add	r1, r5, r3
   15c78:	str	r1, [r4, #140]	; 0x8c
   15c7c:	add	r1, sp, #8
   15c80:	str	r3, [sp]
   15c84:	mov	r3, r5
   15c88:	add	r1, r1, #8
   15c8c:	blx	ip
   15c90:	cmp	r0, #0
   15c94:	bne	15cec <flatcc_builder_create_vtable@@Base+0x130>
   15c98:	adds	r1, r5, #1
   15c9c:	mov	r0, #0
   15ca0:	movcc	r0, r1
   15ca4:	sub	sp, fp, #8
   15ca8:	pop	{r4, r5, fp, pc}
   15cac:	movw	r0, #40598	; 0x9e96
   15cb0:	movw	r1, #36080	; 0x8cf0
   15cb4:	movw	r3, #40277	; 0x9d55
   15cb8:	movw	r2, #647	; 0x287
   15cbc:	movt	r0, #1
   15cc0:	movt	r1, #1
   15cc4:	movt	r3, #1
   15cc8:	bl	12418 <__assert_fail@plt>
   15ccc:	movw	r0, #40598	; 0x9e96
   15cd0:	movw	r1, #36080	; 0x8cf0
   15cd4:	movw	r3, #40277	; 0x9d55
   15cd8:	movw	r2, #651	; 0x28b
   15cdc:	movt	r0, #1
   15ce0:	movt	r1, #1
   15ce4:	movt	r3, #1
   15ce8:	bl	12418 <__assert_fail@plt>
   15cec:	movw	r0, #40598	; 0x9e96
   15cf0:	movw	r1, #36080	; 0x8cf0
   15cf4:	movw	r3, #40465	; 0x9e11
   15cf8:	movw	r2, #677	; 0x2a5
   15cfc:	movt	r0, #1
   15d00:	movt	r1, #1
   15d04:	movt	r3, #1
   15d08:	bl	12418 <__assert_fail@plt>

00015d0c <flatcc_builder_create_cached_vtable@@Base>:
   15d0c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15d10:	add	fp, sp, #28
   15d14:	sub	sp, sp, #20
   15d18:	mov	sl, r0
   15d1c:	ldr	r0, [r0, #116]	; 0x74
   15d20:	mov	r8, r3
   15d24:	mov	r5, r2
   15d28:	str	r1, [sp, #16]
   15d2c:	cmp	r0, #0
   15d30:	beq	15dd4 <flatcc_builder_create_cached_vtable@@Base+0xc8>
   15d34:	ldr	r1, [sl, #92]	; 0x5c
   15d38:	rsb	r0, r0, #32
   15d3c:	lsr	r0, r8, r0
   15d40:	add	r6, r1, r0, lsl #2
   15d44:	cmp	r6, #0
   15d48:	beq	15e98 <flatcc_builder_create_cached_vtable@@Base+0x18c>
   15d4c:	ldr	r7, [r6]
   15d50:	str	r6, [sp, #12]
   15d54:	cmp	r7, #0
   15d58:	beq	15ea8 <flatcc_builder_create_cached_vtable@@Base+0x19c>
   15d5c:	ldr	r4, [sl, #68]	; 0x44
   15d60:	ldr	r8, [sl, #100]	; 0x64
   15d64:	mov	r0, #0
   15d68:	str	r0, [sp, #8]
   15d6c:	b	15d80 <flatcc_builder_create_cached_vtable@@Base+0x74>
   15d70:	ldr	r7, [r9, #12]!
   15d74:	mov	r6, r9
   15d78:	cmp	r7, #0
   15d7c:	beq	15e90 <flatcc_builder_create_cached_vtable@@Base+0x184>
   15d80:	add	r9, r8, r7
   15d84:	mov	r1, r4
   15d88:	ldr	r0, [r9, #8]
   15d8c:	ldrh	r0, [r1, r0]!	; <UNPREDICTABLE>
   15d90:	cmp	r0, r5
   15d94:	bne	15d70 <flatcc_builder_create_cached_vtable@@Base+0x64>
   15d98:	ldr	r0, [sp, #16]
   15d9c:	mov	r2, r5
   15da0:	bl	123d0 <bcmp@plt>
   15da4:	cmp	r0, #0
   15da8:	bne	15d70 <flatcc_builder_create_cached_vtable@@Base+0x64>
   15dac:	ldr	r0, [sl, #152]	; 0x98
   15db0:	ldr	r1, [r9, #4]
   15db4:	cmp	r1, r0
   15db8:	beq	16014 <flatcc_builder_create_cached_vtable@@Base+0x308>
   15dbc:	mov	r6, r9
   15dc0:	mov	r0, r9
   15dc4:	ldr	r7, [r6, #12]!
   15dc8:	cmp	r7, #0
   15dcc:	bne	15d68 <flatcc_builder_create_cached_vtable@@Base+0x5c>
   15dd0:	b	15eac <flatcc_builder_create_cached_vtable@@Base+0x1a0>
   15dd4:	ldr	r0, [sl, #124]	; 0x7c
   15dd8:	cmp	r0, #0
   15ddc:	bne	16068 <flatcc_builder_create_cached_vtable@@Base+0x35c>
   15de0:	ldr	r0, [sl, #104]	; 0x68
   15de4:	add	r7, sl, #100	; 0x64
   15de8:	cmp	r0, #15
   15dec:	bhi	15e18 <flatcc_builder_create_cached_vtable@@Base+0x10c>
   15df0:	ldr	r0, [sl, #40]	; 0x28
   15df4:	ldr	r6, [sl, #48]	; 0x30
   15df8:	mov	r1, #6
   15dfc:	mov	r2, #16
   15e00:	mov	r3, #0
   15e04:	str	r1, [sp]
   15e08:	mov	r1, r7
   15e0c:	blx	r6
   15e10:	cmp	r0, #0
   15e14:	bne	16048 <flatcc_builder_create_cached_vtable@@Base+0x33c>
   15e18:	ldr	r0, [r7]
   15e1c:	mov	r7, #0
   15e20:	cmp	r0, #0
   15e24:	beq	15f4c <flatcc_builder_create_cached_vtable@@Base+0x240>
   15e28:	mov	r0, #16
   15e2c:	mov	r2, #5
   15e30:	add	r1, sl, #92	; 0x5c
   15e34:	mov	r3, #1
   15e38:	mov	r4, #256	; 0x100
   15e3c:	str	r0, [sl, #124]	; 0x7c
   15e40:	ldr	r0, [sl, #40]	; 0x28
   15e44:	ldr	r6, [sl, #48]	; 0x30
   15e48:	str	r2, [sp]
   15e4c:	mov	r2, #256	; 0x100
   15e50:	blx	r6
   15e54:	cmp	r0, #0
   15e58:	bne	15f4c <flatcc_builder_create_cached_vtable@@Base+0x240>
   15e5c:	ldr	r0, [sl, #96]	; 0x60
   15e60:	mov	r1, r4
   15e64:	lsl	r4, r4, #1
   15e68:	cmp	r0, r1, lsl #1
   15e6c:	bcs	15e60 <flatcc_builder_create_cached_vtable@@Base+0x154>
   15e70:	lsr	r1, r1, #2
   15e74:	mvn	r0, #0
   15e78:	mov	r2, #1
   15e7c:	add	r0, r0, #1
   15e80:	cmp	r1, r2, lsl r0
   15e84:	bhi	15e7c <flatcc_builder_create_cached_vtable@@Base+0x170>
   15e88:	str	r0, [sl, #116]	; 0x74
   15e8c:	b	15d34 <flatcc_builder_create_cached_vtable@@Base+0x28>
   15e90:	ldr	r9, [sp, #8]
   15e94:	b	15eac <flatcc_builder_create_cached_vtable@@Base+0x1a0>
   15e98:	mov	r7, #0
   15e9c:	mov	r0, r7
   15ea0:	sub	sp, fp, #28
   15ea4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15ea8:	mov	r9, #0
   15eac:	ldr	r4, [sl, #124]	; 0x7c
   15eb0:	ldr	r0, [sl, #104]	; 0x68
   15eb4:	add	r7, sl, #100	; 0x64
   15eb8:	add	r2, r4, #16
   15ebc:	cmp	r2, r0
   15ec0:	bls	15ee8 <flatcc_builder_create_cached_vtable@@Base+0x1dc>
   15ec4:	ldr	r0, [sl, #40]	; 0x28
   15ec8:	ldr	r6, [sl, #48]	; 0x30
   15ecc:	mov	r1, #6
   15ed0:	mov	r3, #0
   15ed4:	str	r1, [sp]
   15ed8:	mov	r1, r7
   15edc:	blx	r6
   15ee0:	cmp	r0, #0
   15ee4:	bne	16048 <flatcc_builder_create_cached_vtable@@Base+0x33c>
   15ee8:	ldr	r0, [r7]
   15eec:	mov	r7, #0
   15ef0:	adds	r4, r0, r4
   15ef4:	beq	15f4c <flatcc_builder_create_cached_vtable@@Base+0x240>
   15ef8:	ldr	r0, [sl, #124]	; 0x7c
   15efc:	ldr	r1, [sl, #152]	; 0x98
   15f00:	add	r2, r0, #16
   15f04:	str	r2, [sl, #124]	; 0x7c
   15f08:	ldr	r2, [sp, #12]
   15f0c:	str	r1, [r4, #4]
   15f10:	ldr	r1, [r2]
   15f14:	str	r1, [r4, #12]
   15f18:	ldr	r1, [sp, #16]
   15f1c:	str	r0, [r2]
   15f20:	mov	r0, sl
   15f24:	mov	r2, r5
   15f28:	bl	15bbc <flatcc_builder_create_vtable@@Base>
   15f2c:	cmp	r0, #0
   15f30:	str	r0, [r4]
   15f34:	beq	15f4c <flatcc_builder_create_cached_vtable@@Base+0x240>
   15f38:	cmp	r9, #0
   15f3c:	beq	15f58 <flatcc_builder_create_cached_vtable@@Base+0x24c>
   15f40:	ldr	r0, [r9, #8]
   15f44:	str	r0, [r4, #8]
   15f48:	ldr	r7, [r4]
   15f4c:	mov	r0, r7
   15f50:	sub	sp, fp, #28
   15f54:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15f58:	ldr	r6, [sl, #120]	; 0x78
   15f5c:	ldr	r0, [sl, #172]	; 0xac
   15f60:	add	r2, r6, r5
   15f64:	cmp	r0, #0
   15f68:	beq	15fa4 <flatcc_builder_create_cached_vtable@@Base+0x298>
   15f6c:	cmp	r0, r2
   15f70:	bcs	15fa4 <flatcc_builder_create_cached_vtable@@Base+0x298>
   15f74:	ldr	r0, [sl, #116]	; 0x74
   15f78:	cmp	r0, #0
   15f7c:	beq	15f48 <flatcc_builder_create_cached_vtable@@Base+0x23c>
   15f80:	ldr	r0, [sl, #92]	; 0x5c
   15f84:	ldr	r2, [sl, #96]	; 0x60
   15f88:	mov	r1, #0
   15f8c:	mov	r5, #0
   15f90:	bl	123f4 <memset@plt>
   15f94:	mov	r0, #16
   15f98:	str	r5, [sl, #120]	; 0x78
   15f9c:	str	r0, [sl, #124]	; 0x7c
   15fa0:	b	15f48 <flatcc_builder_create_cached_vtable@@Base+0x23c>
   15fa4:	ldr	r0, [sl, #72]	; 0x48
   15fa8:	add	r7, sl, #68	; 0x44
   15fac:	cmp	r2, r0
   15fb0:	bls	15fd8 <flatcc_builder_create_cached_vtable@@Base+0x2cc>
   15fb4:	ldr	r0, [sl, #40]	; 0x28
   15fb8:	ldr	ip, [sl, #48]	; 0x30
   15fbc:	mov	r1, #2
   15fc0:	mov	r3, #0
   15fc4:	str	r1, [sp]
   15fc8:	mov	r1, r7
   15fcc:	blx	ip
   15fd0:	cmp	r0, #0
   15fd4:	bne	16048 <flatcc_builder_create_cached_vtable@@Base+0x33c>
   15fd8:	ldr	r0, [r7]
   15fdc:	adds	r0, r0, r6
   15fe0:	beq	16004 <flatcc_builder_create_cached_vtable@@Base+0x2f8>
   15fe4:	ldr	r1, [sl, #120]	; 0x78
   15fe8:	mov	r2, r5
   15fec:	str	r1, [r4, #8]
   15ff0:	add	r1, r1, r5
   15ff4:	str	r1, [sl, #120]	; 0x78
   15ff8:	ldr	r1, [sp, #16]
   15ffc:	bl	12388 <memcpy@plt>
   16000:	b	15f48 <flatcc_builder_create_cached_vtable@@Base+0x23c>
   16004:	mvn	r7, #0
   16008:	mov	r0, r7
   1600c:	sub	sp, fp, #28
   16010:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16014:	ldr	r0, [sp, #12]
   16018:	cmp	r6, r0
   1601c:	beq	16038 <flatcc_builder_create_cached_vtable@@Base+0x32c>
   16020:	mov	r1, r0
   16024:	ldr	r0, [r9, #12]
   16028:	str	r0, [r6]
   1602c:	ldr	r0, [r1]
   16030:	str	r0, [r9, #12]
   16034:	str	r7, [r1]
   16038:	ldr	r7, [r9]
   1603c:	mov	r0, r7
   16040:	sub	sp, fp, #28
   16044:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16048:	movw	r0, #40598	; 0x9e96
   1604c:	movw	r1, #36080	; 0x8cf0
   16050:	movw	r3, #40144	; 0x9cd0
   16054:	mov	r2, #308	; 0x134
   16058:	movt	r0, #1
   1605c:	movt	r1, #1
   16060:	movt	r3, #1
   16064:	bl	12418 <__assert_fail@plt>
   16068:	movw	r0, #40538	; 0x9e5a
   1606c:	movw	r1, #36080	; 0x8cf0
   16070:	movw	r3, #40553	; 0x9e69
   16074:	movw	r2, #342	; 0x156
   16078:	movt	r0, #1
   1607c:	movt	r1, #1
   16080:	movt	r3, #1
   16084:	bl	12418 <__assert_fail@plt>

00016088 <flatcc_builder_create_table@@Base>:
   16088:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1608c:	add	fp, sp, #24
   16090:	sub	sp, sp, #80	; 0x50
   16094:	ldr	r5, [fp, #12]
   16098:	cmn	r5, #1
   1609c:	ble	161e8 <flatcc_builder_create_table@@Base+0x160>
   160a0:	ldr	ip, [fp, #16]
   160a4:	tst	ip, #1
   160a8:	beq	16208 <flatcc_builder_create_table@@Base+0x180>
   160ac:	mov	r8, r0
   160b0:	ldrh	r0, [r0, #128]	; 0x80
   160b4:	cmp	r3, #4
   160b8:	movls	r3, #4
   160bc:	cmp	r0, r3
   160c0:	strhcc	r3, [r8, #128]	; 0x80
   160c4:	cmp	r5, #1
   160c8:	ldr	r0, [r8, #136]	; 0x88
   160cc:	sub	r4, r0, r2
   160d0:	sub	r0, r3, #1
   160d4:	and	r0, r4, r0
   160d8:	sub	r4, r4, #4
   160dc:	add	r3, ip, r0
   160e0:	sub	r3, r4, r3
   160e4:	add	r3, r3, #1
   160e8:	str	r3, [fp, #-28]	; 0xffffffe4
   160ec:	blt	1611c <flatcc_builder_create_table@@Base+0x94>
   160f0:	ldr	r3, [fp, #8]
   160f4:	sub	ip, r4, r0
   160f8:	mvn	r4, #3
   160fc:	sub	r4, r4, ip
   16100:	ldrh	r6, [r3], #2
   16104:	subs	r5, r5, #1
   16108:	ldr	r7, [r6, r1]
   1610c:	add	r7, r4, r7
   16110:	sub	r7, r7, r6
   16114:	str	r7, [r6, r1]
   16118:	bne	16100 <flatcc_builder_create_table@@Base+0x78>
   1611c:	mov	r4, #4
   16120:	sub	r3, fp, #28
   16124:	cmp	r2, #0
   16128:	str	r4, [sp, #16]
   1612c:	str	r3, [sp, #12]
   16130:	mov	r3, #1
   16134:	str	r4, [sp, #4]
   16138:	addne	r4, r2, #4
   1613c:	str	r3, [sp, #8]
   16140:	movne	r3, #2
   16144:	strne	r2, [sp, #24]
   16148:	strne	r1, [sp, #20]
   1614c:	strne	r3, [sp, #8]
   16150:	strne	r4, [sp, #4]
   16154:	cmp	r0, #0
   16158:	beq	16184 <flatcc_builder_create_table@@Base+0xfc>
   1615c:	add	r1, sp, #4
   16160:	movw	r2, #35550	; 0x8ade
   16164:	add	r4, r4, r0
   16168:	add	r1, r1, r3, lsl #3
   1616c:	movt	r2, #1
   16170:	add	r3, r3, #1
   16174:	str	r4, [sp, #4]
   16178:	str	r2, [r1, #8]
   1617c:	str	r0, [r1, #12]
   16180:	str	r3, [sp, #8]
   16184:	cmp	r4, #0
   16188:	ble	16228 <flatcc_builder_create_table@@Base+0x1a0>
   1618c:	ldr	r0, [r8, #136]	; 0x88
   16190:	ldr	r7, [r8, #44]	; 0x2c
   16194:	add	r1, sp, #4
   16198:	mov	r2, r3
   1619c:	add	r1, r1, #8
   161a0:	sub	r5, r0, r4
   161a4:	ldr	r0, [r8, #36]	; 0x24
   161a8:	str	r4, [sp]
   161ac:	mov	r3, r5
   161b0:	blx	r7
   161b4:	cmp	r0, #0
   161b8:	streq	r5, [r8, #136]	; 0x88
   161bc:	moveq	r0, r5
   161c0:	subeq	sp, fp, #24
   161c4:	popeq	{r4, r5, r6, r7, r8, sl, fp, pc}
   161c8:	movw	r0, #40598	; 0x9e96
   161cc:	movw	r1, #36080	; 0x8cf0
   161d0:	movw	r3, #40277	; 0x9d55
   161d4:	movw	r2, #651	; 0x28b
   161d8:	movt	r0, #1
   161dc:	movt	r1, #1
   161e0:	movt	r3, #1
   161e4:	bl	12418 <__assert_fail@plt>
   161e8:	movw	r0, #37964	; 0x944c
   161ec:	movw	r1, #36080	; 0x8cf0
   161f0:	movw	r3, #37982	; 0x945e
   161f4:	movw	r2, #1237	; 0x4d5
   161f8:	movt	r0, #1
   161fc:	movt	r1, #1
   16200:	movt	r3, #1
   16204:	bl	12418 <__assert_fail@plt>
   16208:	movw	r0, #38138	; 0x94fa
   1620c:	movw	r1, #36080	; 0x8cf0
   16210:	movw	r3, #37982	; 0x945e
   16214:	movw	r2, #1243	; 0x4db
   16218:	movt	r0, #1
   1621c:	movt	r1, #1
   16220:	movt	r3, #1
   16224:	bl	12418 <__assert_fail@plt>
   16228:	movw	r0, #40598	; 0x9e96
   1622c:	movw	r1, #36080	; 0x8cf0
   16230:	movw	r3, #40277	; 0x9d55
   16234:	movw	r2, #647	; 0x287
   16238:	movt	r0, #1
   1623c:	movt	r1, #1
   16240:	movt	r3, #1
   16244:	bl	12418 <__assert_fail@plt>

00016248 <flatcc_builder_check_required_field@@Base>:
   16248:	push	{fp, lr}
   1624c:	mov	fp, sp
   16250:	ldr	r2, [r0, #32]
   16254:	ldrh	r2, [r2, #14]
   16258:	cmp	r2, #3
   1625c:	bne	1628c <flatcc_builder_check_required_field@@Base+0x44>
   16260:	ldrh	r3, [r0, #8]
   16264:	mov	r2, #0
   16268:	cmp	r3, r1
   1626c:	bls	16284 <flatcc_builder_check_required_field@@Base+0x3c>
   16270:	ldr	r0, [r0, #4]
   16274:	add	r0, r0, r1, lsl #1
   16278:	ldrh	r2, [r0]
   1627c:	cmp	r2, #0
   16280:	movwne	r2, #1
   16284:	mov	r0, r2
   16288:	pop	{fp, pc}
   1628c:	movw	r0, #38149	; 0x9505
   16290:	movw	r1, #36080	; 0x8cf0
   16294:	movw	r3, #38192	; 0x9530
   16298:	movw	r2, #1272	; 0x4f8
   1629c:	movt	r0, #1
   162a0:	movt	r1, #1
   162a4:	movt	r3, #1
   162a8:	bl	12418 <__assert_fail@plt>

000162ac <flatcc_builder_check_union_field@@Base>:
   162ac:	push	{fp, lr}
   162b0:	mov	fp, sp
   162b4:	mov	r2, r0
   162b8:	ldr	r0, [r0, #32]
   162bc:	ldrh	r0, [r0, #14]
   162c0:	cmp	r0, #3
   162c4:	bne	16324 <flatcc_builder_check_union_field@@Base+0x78>
   162c8:	mov	r0, #0
   162cc:	cmp	r1, #0
   162d0:	beq	16310 <flatcc_builder_check_union_field@@Base+0x64>
   162d4:	ldrh	r3, [r2, #8]
   162d8:	cmp	r3, r1
   162dc:	popls	{fp, pc}
   162e0:	ldr	r0, [r2, #4]
   162e4:	add	r0, r0, r1, lsl #1
   162e8:	ldrh	r1, [r0, #-2]
   162ec:	cmp	r1, #0
   162f0:	beq	16314 <flatcc_builder_check_union_field@@Base+0x68>
   162f4:	ldr	r2, [r2, #16]
   162f8:	ldrh	r0, [r0]
   162fc:	ldrb	r1, [r2, r1]
   16300:	cmp	r1, #0
   16304:	beq	16318 <flatcc_builder_check_union_field@@Base+0x6c>
   16308:	cmp	r0, #0
   1630c:	movwne	r0, #1
   16310:	pop	{fp, pc}
   16314:	ldrh	r0, [r0]
   16318:	clz	r0, r0
   1631c:	lsr	r0, r0, #5
   16320:	pop	{fp, pc}
   16324:	movw	r0, #38149	; 0x9505
   16328:	movw	r1, #36080	; 0x8cf0
   1632c:	movw	r3, #38275	; 0x9583
   16330:	movw	r2, #1279	; 0x4ff
   16334:	movt	r0, #1
   16338:	movt	r1, #1
   1633c:	movt	r3, #1
   16340:	bl	12418 <__assert_fail@plt>

00016344 <flatcc_builder_check_required@@Base>:
   16344:	push	{fp, lr}
   16348:	mov	fp, sp
   1634c:	mov	r3, r0
   16350:	ldr	r0, [r0, #32]
   16354:	ldrh	r0, [r0, #14]
   16358:	cmp	r0, #3
   1635c:	bne	163a4 <flatcc_builder_check_required@@Base+0x60>
   16360:	ldrh	ip, [r3, #8]
   16364:	mov	r0, #0
   16368:	cmp	ip, r2
   1636c:	poplt	{fp, pc}
   16370:	cmp	r2, #1
   16374:	blt	1639c <flatcc_builder_check_required@@Base+0x58>
   16378:	ldr	ip, [r3, #4]
   1637c:	ldrh	r3, [r1]
   16380:	add	r3, ip, r3, lsl #1
   16384:	ldrh	r3, [r3]
   16388:	cmp	r3, #0
   1638c:	beq	163a0 <flatcc_builder_check_required@@Base+0x5c>
   16390:	add	r1, r1, #2
   16394:	subs	r2, r2, #1
   16398:	bne	1637c <flatcc_builder_check_required@@Base+0x38>
   1639c:	mov	r0, #1
   163a0:	pop	{fp, pc}
   163a4:	movw	r0, #38149	; 0x9505
   163a8:	movw	r1, #36080	; 0x8cf0
   163ac:	movw	r3, #38355	; 0x95d3
   163b0:	movw	r2, #1297	; 0x511
   163b4:	movt	r0, #1
   163b8:	movt	r1, #1
   163bc:	movt	r3, #1
   163c0:	bl	12418 <__assert_fail@plt>

000163c4 <flatcc_builder_end_table@@Base>:
   163c4:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   163c8:	add	fp, sp, #24
   163cc:	sub	sp, sp, #16
   163d0:	mov	r4, r0
   163d4:	ldr	r0, [r0, #32]
   163d8:	ldrh	r0, [r0, #14]
   163dc:	cmp	r0, #3
   163e0:	bne	16564 <flatcc_builder_end_table@@Base+0x1a0>
   163e4:	ldrh	r0, [r4, #8]
   163e8:	ldr	r5, [r4, #4]
   163ec:	mov	r1, #4
   163f0:	movw	r2, #31153	; 0x79b1
   163f4:	movt	r2, #40503	; 0x9e37
   163f8:	add	r0, r1, r0, lsl #1
   163fc:	strh	r0, [r5, #-4]!
   16400:	ldrh	r1, [r4, #20]
   16404:	uxth	r6, r0
   16408:	add	r1, r1, #4
   1640c:	strh	r1, [r5, #2]
   16410:	uxth	r1, r1
   16414:	ldr	r0, [r4, #12]
   16418:	eor	r0, r0, r6
   1641c:	mul	r0, r0, r2
   16420:	eor	r0, r0, r1
   16424:	mov	r1, r5
   16428:	mul	r3, r0, r2
   1642c:	mov	r0, r4
   16430:	mov	r2, r6
   16434:	str	r3, [r4, #12]
   16438:	bl	15d0c <flatcc_builder_create_cached_vtable@@Base>
   1643c:	cmp	r0, #0
   16440:	beq	16554 <flatcc_builder_end_table@@Base+0x190>
   16444:	mov	r7, r0
   16448:	mov	r0, r5
   1644c:	mov	r1, #0
   16450:	mov	r2, r6
   16454:	mov	r8, #0
   16458:	bl	123f4 <memset@plt>
   1645c:	ldr	r5, [r4, #32]
   16460:	ldr	r0, [r4, #76]	; 0x4c
   16464:	ldr	r6, [r4]
   16468:	ldrh	r3, [r4, #130]	; 0x82
   1646c:	ldr	r1, [r4, #16]
   16470:	ldr	r2, [r4, #20]
   16474:	ldr	r5, [r5, #20]
   16478:	add	r0, r0, r5
   1647c:	sub	r6, r6, r0
   16480:	asr	r6, r6, #1
   16484:	stm	sp, {r0, r6, r7}
   16488:	mov	r0, r4
   1648c:	bl	16088 <flatcc_builder_create_table@@Base>
   16490:	cmp	r0, #0
   16494:	beq	16548 <flatcc_builder_end_table@@Base+0x184>
   16498:	ldr	r1, [r4, #32]
   1649c:	mov	r5, r0
   164a0:	ldr	r0, [r4, #16]
   164a4:	ldr	r2, [r4, #20]
   164a8:	ldr	r3, [r4, #52]	; 0x34
   164ac:	ldr	r7, [r1, #24]
   164b0:	str	r7, [r4, #12]
   164b4:	ldrh	r7, [r1, #28]
   164b8:	strh	r7, [r4, #8]
   164bc:	ldr	r7, [r1, #16]
   164c0:	add	r3, r3, r7
   164c4:	str	r3, [r4, #4]
   164c8:	ldr	r3, [r4, #76]	; 0x4c
   164cc:	ldr	r1, [r1, #20]
   164d0:	add	r1, r3, r1
   164d4:	str	r1, [r4]
   164d8:	mov	r1, #0
   164dc:	bl	123f4 <memset@plt>
   164e0:	ldr	r0, [r4, #32]
   164e4:	ldr	r1, [r4, #60]	; 0x3c
   164e8:	ldr	r2, [r4, #64]	; 0x40
   164ec:	mov	r8, r5
   164f0:	ldr	r3, [r0, #8]
   164f4:	str	r3, [r4, #20]
   164f8:	ldr	r3, [r0]
   164fc:	str	r3, [r4, #28]
   16500:	add	r1, r1, r3
   16504:	ldr	r7, [r0, #4]
   16508:	str	r1, [r4, #16]
   1650c:	sub	r1, r2, r3
   16510:	cmp	r1, r7
   16514:	movhi	r1, r7
   16518:	str	r1, [r4, #24]
   1651c:	ldrh	r1, [r4, #130]	; 0x82
   16520:	ldrh	r2, [r4, #128]	; 0x80
   16524:	cmp	r2, r1
   16528:	strhcc	r1, [r4, #128]	; 0x80
   1652c:	ldrh	r1, [r0, #12]
   16530:	sub	r0, r0, #36	; 0x24
   16534:	str	r0, [r4, #32]
   16538:	strh	r1, [r4, #130]	; 0x82
   1653c:	ldr	r0, [r4, #156]	; 0x9c
   16540:	sub	r0, r0, #1
   16544:	str	r0, [r4, #156]	; 0x9c
   16548:	mov	r0, r8
   1654c:	sub	sp, fp, #24
   16550:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   16554:	mov	r8, #0
   16558:	mov	r0, r8
   1655c:	sub	sp, fp, #24
   16560:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   16564:	movw	r0, #38149	; 0x9505
   16568:	movw	r1, #36080	; 0x8cf0
   1656c:	movw	r3, #38445	; 0x962d
   16570:	movw	r2, #1317	; 0x525
   16574:	movt	r0, #1
   16578:	movt	r1, #1
   1657c:	movt	r3, #1
   16580:	bl	12418 <__assert_fail@plt>

00016584 <flatcc_builder_create_vector@@Base>:
   16584:	push	{r4, r5, r6, r7, fp, lr}
   16588:	add	fp, sp, #16
   1658c:	sub	sp, sp, #80	; 0x50
   16590:	mov	r7, r0
   16594:	ldr	r0, [fp, #12]
   16598:	cmp	r2, r0
   1659c:	bhi	16698 <flatcc_builder_create_vector@@Base+0x114>
   165a0:	ldr	r0, [fp, #8]
   165a4:	mov	r4, r2
   165a8:	ldrh	r2, [r7, #128]	; 0x80
   165ac:	mov	r5, #4
   165b0:	cmp	r0, #4
   165b4:	movls	r0, r5
   165b8:	cmp	r2, r0
   165bc:	sub	r2, fp, #20
   165c0:	strhcc	r0, [r7, #128]	; 0x80
   165c4:	str	r4, [fp, #-20]	; 0xffffffec
   165c8:	sub	r0, r0, #1
   165cc:	ldr	ip, [r7, #136]	; 0x88
   165d0:	str	r5, [sp, #16]
   165d4:	str	r2, [sp, #12]
   165d8:	mov	r2, #1
   165dc:	str	r5, [sp, #4]
   165e0:	str	r2, [sp, #8]
   165e4:	mls	r6, r3, r4, ip
   165e8:	mul	r3, r3, r4
   165ec:	cmp	r3, #0
   165f0:	and	r0, r6, r0
   165f4:	movne	r2, #2
   165f8:	addne	r5, r3, #4
   165fc:	strne	r3, [sp, #24]
   16600:	strne	r1, [sp, #20]
   16604:	strne	r2, [sp, #8]
   16608:	strne	r5, [sp, #4]
   1660c:	cmp	r0, #0
   16610:	beq	1663c <flatcc_builder_create_vector@@Base+0xb8>
   16614:	add	r1, sp, #4
   16618:	movw	r3, #35550	; 0x8ade
   1661c:	add	r5, r5, r0
   16620:	add	r1, r1, r2, lsl #3
   16624:	movt	r3, #1
   16628:	add	r2, r2, #1
   1662c:	str	r5, [sp, #4]
   16630:	str	r3, [r1, #8]
   16634:	str	r0, [r1, #12]
   16638:	str	r2, [sp, #8]
   1663c:	cmp	r5, #0
   16640:	ble	166b8 <flatcc_builder_create_vector@@Base+0x134>
   16644:	ldr	r0, [r7, #36]	; 0x24
   16648:	ldr	r6, [r7, #44]	; 0x2c
   1664c:	add	r1, sp, #4
   16650:	sub	r4, ip, r5
   16654:	str	r5, [sp]
   16658:	add	r1, r1, #8
   1665c:	mov	r3, r4
   16660:	blx	r6
   16664:	cmp	r0, #0
   16668:	streq	r4, [r7, #136]	; 0x88
   1666c:	moveq	r0, r4
   16670:	subeq	sp, fp, #16
   16674:	popeq	{r4, r5, r6, r7, fp, pc}
   16678:	movw	r0, #40598	; 0x9e96
   1667c:	movw	r1, #36080	; 0x8cf0
   16680:	movw	r3, #40277	; 0x9d55
   16684:	movw	r2, #651	; 0x28b
   16688:	movt	r0, #1
   1668c:	movt	r1, #1
   16690:	movt	r3, #1
   16694:	bl	12418 <__assert_fail@plt>
   16698:	movw	r0, #38511	; 0x966f
   1669c:	movw	r1, #36080	; 0x8cf0
   166a0:	movw	r3, #38530	; 0x9682
   166a4:	movw	r2, #1365	; 0x555
   166a8:	movt	r0, #1
   166ac:	movt	r1, #1
   166b0:	movt	r3, #1
   166b4:	bl	12418 <__assert_fail@plt>
   166b8:	movw	r0, #40598	; 0x9e96
   166bc:	movw	r1, #36080	; 0x8cf0
   166c0:	movw	r3, #40277	; 0x9d55
   166c4:	movw	r2, #647	; 0x287
   166c8:	movt	r0, #1
   166cc:	movt	r1, #1
   166d0:	movt	r3, #1
   166d4:	bl	12418 <__assert_fail@plt>

000166d8 <flatcc_builder_end_vector@@Base>:
   166d8:	push	{r4, r5, fp, lr}
   166dc:	add	fp, sp, #8
   166e0:	sub	sp, sp, #8
   166e4:	mov	r4, r0
   166e8:	ldr	r0, [r0, #32]
   166ec:	ldrh	r1, [r0, #14]
   166f0:	cmp	r1, #4
   166f4:	bne	167a8 <flatcc_builder_end_vector@@Base+0xd0>
   166f8:	ldr	r3, [r0, #16]
   166fc:	ldr	r2, [r0, #20]
   16700:	ldr	r0, [r0, #24]
   16704:	ldr	r1, [r4, #16]
   16708:	ldrh	r5, [r4, #130]	; 0x82
   1670c:	str	r0, [sp, #4]
   16710:	mov	r0, r4
   16714:	str	r5, [sp]
   16718:	bl	16584 <flatcc_builder_create_vector@@Base>
   1671c:	mov	r5, r0
   16720:	cmp	r0, #0
   16724:	beq	1679c <flatcc_builder_end_vector@@Base+0xc4>
   16728:	ldr	r0, [r4, #16]
   1672c:	ldr	r2, [r4, #20]
   16730:	mov	r1, #0
   16734:	bl	123f4 <memset@plt>
   16738:	ldr	r0, [r4, #32]
   1673c:	ldr	r1, [r4, #60]	; 0x3c
   16740:	ldr	ip, [r4, #64]	; 0x40
   16744:	ldr	r3, [r0, #8]
   16748:	str	r3, [r4, #20]
   1674c:	ldr	r3, [r0]
   16750:	str	r3, [r4, #28]
   16754:	add	r1, r1, r3
   16758:	ldr	r2, [r0, #4]
   1675c:	str	r1, [r4, #16]
   16760:	sub	r1, ip, r3
   16764:	cmp	r1, r2
   16768:	movhi	r1, r2
   1676c:	str	r1, [r4, #24]
   16770:	ldrh	r1, [r4, #130]	; 0x82
   16774:	ldrh	r2, [r4, #128]	; 0x80
   16778:	cmp	r2, r1
   1677c:	strhcc	r1, [r4, #128]	; 0x80
   16780:	ldrh	r1, [r0, #12]
   16784:	sub	r0, r0, #36	; 0x24
   16788:	str	r0, [r4, #32]
   1678c:	strh	r1, [r4, #130]	; 0x82
   16790:	ldr	r0, [r4, #156]	; 0x9c
   16794:	sub	r0, r0, #1
   16798:	str	r0, [r4, #156]	; 0x9c
   1679c:	mov	r0, r5
   167a0:	sub	sp, fp, #8
   167a4:	pop	{r4, r5, fp, pc}
   167a8:	movw	r0, #36883	; 0x9013
   167ac:	movw	r1, #36080	; 0x8cf0
   167b0:	movw	r3, #38648	; 0x96f8
   167b4:	movw	r2, #1400	; 0x578
   167b8:	movt	r0, #1
   167bc:	movt	r1, #1
   167c0:	movt	r3, #1
   167c4:	bl	12418 <__assert_fail@plt>

000167c8 <flatcc_builder_vector_count@@Base>:
   167c8:	ldr	r0, [r0, #32]
   167cc:	ldr	r0, [r0, #20]
   167d0:	bx	lr

000167d4 <flatcc_builder_vector_edit@@Base>:
   167d4:	ldr	r0, [r0, #16]
   167d8:	bx	lr

000167dc <flatcc_builder_create_offset_vector_direct@@Base>:
   167dc:	mov	r3, #0
   167e0:	b	167e4 <flatcc_builder_create_offset_vector_direct@@Base+0x8>
   167e4:	push	{r4, r5, r6, r7, fp, lr}
   167e8:	add	fp, sp, #16
   167ec:	sub	sp, sp, #80	; 0x50
   167f0:	mov	r5, #0
   167f4:	cmn	r2, #-1073741823	; 0xc0000001
   167f8:	bhi	16968 <flatcc_builder_create_offset_vector_direct@@Base+0x18c>
   167fc:	mov	r6, r0
   16800:	ldrh	r0, [r0, #128]	; 0x80
   16804:	mov	r4, #4
   16808:	sub	r5, fp, #20
   1680c:	mov	ip, #1
   16810:	cmp	r0, #3
   16814:	movls	r0, #4
   16818:	strhls	r0, [r6, #128]	; 0x80
   1681c:	str	r2, [fp, #-20]	; 0xffffffec
   16820:	mov	r0, #0
   16824:	ldr	lr, [r6, #136]	; 0x88
   16828:	cmp	r0, r2, lsl #2
   1682c:	str	r4, [sp, #16]
   16830:	str	r5, [sp, #12]
   16834:	str	r4, [sp, #4]
   16838:	str	ip, [sp, #8]
   1683c:	and	r5, lr, #3
   16840:	beq	16860 <flatcc_builder_create_offset_vector_direct@@Base+0x84>
   16844:	lsl	r0, r2, #2
   16848:	mov	ip, #2
   1684c:	add	r4, r0, #4
   16850:	str	r0, [sp, #24]
   16854:	str	r1, [sp, #20]
   16858:	str	ip, [sp, #8]
   1685c:	str	r4, [sp, #4]
   16860:	cmp	r5, #0
   16864:	beq	16890 <flatcc_builder_create_offset_vector_direct@@Base+0xb4>
   16868:	add	r0, sp, #4
   1686c:	movw	r7, #35550	; 0x8ade
   16870:	add	r4, r4, r5
   16874:	add	r0, r0, ip, lsl #3
   16878:	movt	r7, #1
   1687c:	add	ip, ip, #1
   16880:	str	r4, [sp, #4]
   16884:	str	r7, [r0, #8]
   16888:	str	r5, [r0, #12]
   1688c:	str	ip, [sp, #8]
   16890:	cmp	r2, #0
   16894:	beq	1692c <flatcc_builder_create_offset_vector_direct@@Base+0x150>
   16898:	sub	r0, r4, lr
   1689c:	cmp	r3, #0
   168a0:	sub	r0, r0, #4
   168a4:	bne	168ec <flatcc_builder_create_offset_vector_direct@@Base+0x110>
   168a8:	ldr	r3, [r1]
   168ac:	cmp	r3, #0
   168b0:	beq	16974 <flatcc_builder_create_offset_vector_direct@@Base+0x198>
   168b4:	add	r3, r0, r3
   168b8:	sub	r0, r0, #4
   168bc:	subs	r2, r2, #1
   168c0:	str	r3, [r1], #4
   168c4:	bne	168a8 <flatcc_builder_create_offset_vector_direct@@Base+0xcc>
   168c8:	b	1692c <flatcc_builder_create_offset_vector_direct@@Base+0x150>
   168cc:	ldrb	r7, [r3]
   168d0:	cmp	r7, #0
   168d4:	bne	16994 <flatcc_builder_create_offset_vector_direct@@Base+0x1b8>
   168d8:	sub	r0, r0, #4
   168dc:	add	r1, r1, #4
   168e0:	add	r3, r3, #1
   168e4:	subs	r2, r2, #1
   168e8:	beq	1692c <flatcc_builder_create_offset_vector_direct@@Base+0x150>
   168ec:	ldr	r5, [r1]
   168f0:	cmp	r5, #0
   168f4:	beq	168cc <flatcc_builder_create_offset_vector_direct@@Base+0xf0>
   168f8:	add	r7, r0, r5
   168fc:	str	r7, [r1]
   16900:	ldrb	r7, [r3]
   16904:	cmp	r7, #0
   16908:	bne	168d8 <flatcc_builder_create_offset_vector_direct@@Base+0xfc>
   1690c:	movw	r0, #40586	; 0x9e8a
   16910:	movw	r1, #36080	; 0x8cf0
   16914:	movw	r3, #40600	; 0x9e98
   16918:	movw	r2, #1457	; 0x5b1
   1691c:	movt	r0, #1
   16920:	movt	r1, #1
   16924:	movt	r3, #1
   16928:	bl	12418 <__assert_fail@plt>
   1692c:	cmp	r4, #0
   16930:	ble	169b4 <flatcc_builder_create_offset_vector_direct@@Base+0x1d8>
   16934:	ldr	r0, [r6, #136]	; 0x88
   16938:	ldr	r7, [r6, #44]	; 0x2c
   1693c:	add	r1, sp, #4
   16940:	mov	r2, ip
   16944:	add	r1, r1, #8
   16948:	sub	r5, r0, r4
   1694c:	ldr	r0, [r6, #36]	; 0x24
   16950:	str	r4, [sp]
   16954:	mov	r3, r5
   16958:	blx	r7
   1695c:	cmp	r0, #0
   16960:	bne	169d4 <flatcc_builder_create_offset_vector_direct@@Base+0x1f8>
   16964:	str	r5, [r6, #136]	; 0x88
   16968:	mov	r0, r5
   1696c:	sub	sp, fp, #16
   16970:	pop	{r4, r5, r6, r7, fp, pc}
   16974:	movw	r0, #40598	; 0x9e96
   16978:	movw	r1, #36080	; 0x8cf0
   1697c:	movw	r3, #40600	; 0x9e98
   16980:	movw	r2, #1463	; 0x5b7
   16984:	movt	r0, #1
   16988:	movt	r1, #1
   1698c:	movt	r3, #1
   16990:	bl	12418 <__assert_fail@plt>
   16994:	movw	r0, #40731	; 0x9f1b
   16998:	movw	r1, #36080	; 0x8cf0
   1699c:	movw	r3, #40600	; 0x9e98
   169a0:	movw	r2, #1461	; 0x5b5
   169a4:	movt	r0, #1
   169a8:	movt	r1, #1
   169ac:	movt	r3, #1
   169b0:	bl	12418 <__assert_fail@plt>
   169b4:	movw	r0, #40598	; 0x9e96
   169b8:	movw	r1, #36080	; 0x8cf0
   169bc:	movw	r3, #40277	; 0x9d55
   169c0:	movw	r2, #647	; 0x287
   169c4:	movt	r0, #1
   169c8:	movt	r1, #1
   169cc:	movt	r3, #1
   169d0:	bl	12418 <__assert_fail@plt>
   169d4:	movw	r0, #40598	; 0x9e96
   169d8:	movw	r1, #36080	; 0x8cf0
   169dc:	movw	r3, #40277	; 0x9d55
   169e0:	movw	r2, #651	; 0x28b
   169e4:	movt	r0, #1
   169e8:	movt	r1, #1
   169ec:	movt	r3, #1
   169f0:	bl	12418 <__assert_fail@plt>

000169f4 <flatcc_builder_end_offset_vector_for_unions@@Base>:
   169f4:	push	{r4, r5, fp, lr}
   169f8:	add	fp, sp, #8
   169fc:	mov	r4, r0
   16a00:	ldr	r0, [r0, #32]
   16a04:	mov	r3, r1
   16a08:	ldrh	r1, [r0, #14]
   16a0c:	cmp	r1, #5
   16a10:	bne	16aac <flatcc_builder_end_offset_vector_for_unions@@Base+0xb8>
   16a14:	ldr	r2, [r0, #20]
   16a18:	ldr	r1, [r4, #16]
   16a1c:	mov	r0, r4
   16a20:	bl	167e4 <flatcc_builder_create_offset_vector_direct@@Base+0x8>
   16a24:	mov	r5, r0
   16a28:	cmp	r0, #0
   16a2c:	beq	16aa4 <flatcc_builder_end_offset_vector_for_unions@@Base+0xb0>
   16a30:	ldr	r0, [r4, #16]
   16a34:	ldr	r2, [r4, #20]
   16a38:	mov	r1, #0
   16a3c:	bl	123f4 <memset@plt>
   16a40:	ldr	r0, [r4, #32]
   16a44:	ldr	r1, [r4, #60]	; 0x3c
   16a48:	ldr	ip, [r4, #64]	; 0x40
   16a4c:	ldr	r3, [r0, #8]
   16a50:	str	r3, [r4, #20]
   16a54:	ldr	r3, [r0]
   16a58:	str	r3, [r4, #28]
   16a5c:	add	r1, r1, r3
   16a60:	ldr	r2, [r0, #4]
   16a64:	str	r1, [r4, #16]
   16a68:	sub	r1, ip, r3
   16a6c:	cmp	r1, r2
   16a70:	movhi	r1, r2
   16a74:	str	r1, [r4, #24]
   16a78:	ldrh	r1, [r4, #130]	; 0x82
   16a7c:	ldrh	r2, [r4, #128]	; 0x80
   16a80:	cmp	r2, r1
   16a84:	strhcc	r1, [r4, #128]	; 0x80
   16a88:	ldrh	r1, [r0, #12]
   16a8c:	sub	r0, r0, #36	; 0x24
   16a90:	str	r0, [r4, #32]
   16a94:	strh	r1, [r4, #130]	; 0x82
   16a98:	ldr	r0, [r4, #156]	; 0x9c
   16a9c:	sub	r0, r0, #1
   16aa0:	str	r0, [r4, #156]	; 0x9c
   16aa4:	mov	r0, r5
   16aa8:	pop	{r4, r5, fp, pc}
   16aac:	movw	r0, #37132	; 0x910c
   16ab0:	movw	r1, #36080	; 0x8cf0
   16ab4:	movw	r3, #38789	; 0x9785
   16ab8:	movw	r2, #1493	; 0x5d5
   16abc:	movt	r0, #1
   16ac0:	movt	r1, #1
   16ac4:	movt	r3, #1
   16ac8:	bl	12418 <__assert_fail@plt>

00016acc <flatcc_builder_offset_vector_edit@@Base>:
   16acc:	ldr	r0, [r0, #16]
   16ad0:	bx	lr

00016ad4 <flatcc_builder_offset_vector_count@@Base>:
   16ad4:	ldr	r0, [r0, #32]
   16ad8:	ldr	r0, [r0, #20]
   16adc:	bx	lr

00016ae0 <flatcc_builder_table_add_union@@Base>:
   16ae0:	push	{r4, r5, r6, r7, fp, lr}
   16ae4:	add	fp, sp, #16
   16ae8:	mov	r5, r0
   16aec:	ldr	r0, [r0, #32]
   16af0:	ldrh	r0, [r0, #14]
   16af4:	cmp	r0, #3
   16af8:	bne	16b80 <flatcc_builder_table_add_union@@Base+0xa0>
   16afc:	mov	r7, r3
   16b00:	mov	r4, r2
   16b04:	mov	r6, r1
   16b08:	cmp	r3, #0
   16b0c:	beq	16b1c <flatcc_builder_table_add_union@@Base+0x3c>
   16b10:	uxtb	r0, r4
   16b14:	cmp	r0, #0
   16b18:	beq	16ba0 <flatcc_builder_table_add_union@@Base+0xc0>
   16b1c:	cmp	r7, #0
   16b20:	beq	16b3c <flatcc_builder_table_add_union@@Base+0x5c>
   16b24:	mov	r0, r5
   16b28:	mov	r1, r6
   16b2c:	bl	16be0 <flatcc_builder_table_add_offset@@Base>
   16b30:	cmp	r0, #0
   16b34:	beq	16bc0 <flatcc_builder_table_add_union@@Base+0xe0>
   16b38:	str	r7, [r0]
   16b3c:	sub	r1, r6, #1
   16b40:	mov	r0, r5
   16b44:	mov	r2, #1
   16b48:	mov	r3, #1
   16b4c:	bl	16d70 <flatcc_builder_table_add@@Base>
   16b50:	cmp	r0, #0
   16b54:	strbne	r4, [r0]
   16b58:	movne	r0, #0
   16b5c:	popne	{r4, r5, r6, r7, fp, pc}
   16b60:	movw	r0, #39035	; 0x987b
   16b64:	movw	r1, #36080	; 0x8cf0
   16b68:	movw	r3, #38903	; 0x97f7
   16b6c:	movw	r2, #1526	; 0x5f6
   16b70:	movt	r0, #1
   16b74:	movt	r1, #1
   16b78:	movt	r3, #1
   16b7c:	bl	12418 <__assert_fail@plt>
   16b80:	movw	r0, #38149	; 0x9505
   16b84:	movw	r1, #36080	; 0x8cf0
   16b88:	movw	r3, #38903	; 0x97f7
   16b8c:	movw	r2, #1518	; 0x5ee
   16b90:	movt	r0, #1
   16b94:	movt	r1, #1
   16b98:	movt	r3, #1
   16b9c:	bl	12418 <__assert_fail@plt>
   16ba0:	movw	r0, #38991	; 0x984f
   16ba4:	movw	r1, #36080	; 0x8cf0
   16ba8:	movw	r3, #38903	; 0x97f7
   16bac:	movw	r2, #1519	; 0x5ef
   16bb0:	movt	r0, #1
   16bb4:	movt	r1, #1
   16bb8:	movt	r3, #1
   16bbc:	bl	12418 <__assert_fail@plt>
   16bc0:	movw	r0, #39025	; 0x9871
   16bc4:	movw	r1, #36080	; 0x8cf0
   16bc8:	movw	r3, #38903	; 0x97f7
   16bcc:	movw	r2, #1522	; 0x5f2
   16bd0:	movt	r0, #1
   16bd4:	movt	r1, #1
   16bd8:	movt	r3, #1
   16bdc:	bl	12418 <__assert_fail@plt>

00016be0 <flatcc_builder_table_add_offset@@Base>:
   16be0:	push	{r4, r5, r6, r7, fp, lr}
   16be4:	add	fp, sp, #16
   16be8:	sub	sp, sp, #8
   16bec:	mov	r4, r0
   16bf0:	ldr	r0, [r0, #32]
   16bf4:	ldrh	r0, [r0, #14]
   16bf8:	cmp	r0, #3
   16bfc:	bne	16d10 <flatcc_builder_table_add_offset@@Base+0x130>
   16c00:	movw	r0, #32765	; 0x7ffd
   16c04:	mov	r5, r1
   16c08:	cmp	r1, r0
   16c0c:	bcs	16d30 <flatcc_builder_table_add_offset@@Base+0x150>
   16c10:	ldr	r0, [r4, #4]
   16c14:	add	r1, r0, r5, lsl #1
   16c18:	ldrh	r1, [r1]
   16c1c:	cmp	r1, #0
   16c20:	bne	16d50 <flatcc_builder_table_add_offset@@Base+0x170>
   16c24:	ldr	r2, [r4, #20]
   16c28:	ldr	r1, [r4, #12]
   16c2c:	ldr	r3, [r4, #24]
   16c30:	add	r2, r2, #3
   16c34:	eor	r1, r1, r5
   16c38:	bic	r6, r2, #3
   16c3c:	movw	r2, #31153	; 0x79b1
   16c40:	movt	r2, #40503	; 0x9e37
   16c44:	add	r7, r6, #4
   16c48:	cmp	r7, r3
   16c4c:	str	r7, [r4, #20]
   16c50:	mul	r1, r1, r2
   16c54:	eor	r1, r1, #4
   16c58:	mul	r1, r1, r2
   16c5c:	str	r1, [r4, #12]
   16c60:	bls	16cd4 <flatcc_builder_table_add_offset@@Base+0xf4>
   16c64:	ldr	r1, [r4, #28]
   16c68:	ldr	r0, [r4, #40]	; 0x28
   16c6c:	ldr	ip, [r4, #48]	; 0x30
   16c70:	mov	r2, #1
   16c74:	mov	r3, #1
   16c78:	str	r2, [sp]
   16c7c:	add	r2, r1, r7
   16c80:	add	r1, r4, #60	; 0x3c
   16c84:	blx	ip
   16c88:	mov	r1, r0
   16c8c:	mov	r0, #0
   16c90:	cmp	r1, #0
   16c94:	beq	16ca0 <flatcc_builder_table_add_offset@@Base+0xc0>
   16c98:	sub	sp, fp, #16
   16c9c:	pop	{r4, r5, r6, r7, fp, pc}
   16ca0:	ldr	r0, [r4, #28]
   16ca4:	ldr	r2, [r4, #60]	; 0x3c
   16ca8:	ldr	r3, [r4, #64]	; 0x40
   16cac:	ldr	r1, [r4, #32]
   16cb0:	add	r2, r2, r0
   16cb4:	sub	r0, r3, r0
   16cb8:	str	r2, [r4, #16]
   16cbc:	movw	r2, #65532	; 0xfffc
   16cc0:	cmp	r0, r2
   16cc4:	movcs	r0, r2
   16cc8:	str	r0, [r4, #24]
   16ccc:	str	r2, [r1, #4]
   16cd0:	ldr	r0, [r4, #4]
   16cd4:	uxth	r1, r5
   16cd8:	add	r0, r0, r1, lsl #1
   16cdc:	strh	r7, [r0]
   16ce0:	ldrh	r0, [r4, #8]
   16ce4:	cmp	r0, r1
   16ce8:	addls	r0, r5, #1
   16cec:	strhls	r0, [r4, #8]
   16cf0:	ldr	r0, [r4]
   16cf4:	add	r1, r0, #2
   16cf8:	str	r1, [r4]
   16cfc:	strh	r6, [r0]
   16d00:	ldr	r0, [r4, #16]
   16d04:	add	r0, r0, r6
   16d08:	sub	sp, fp, #16
   16d0c:	pop	{r4, r5, r6, r7, fp, pc}
   16d10:	movw	r0, #38149	; 0x9505
   16d14:	movw	r1, #36080	; 0x8cf0
   16d18:	movw	r3, #39929	; 0x9bf9
   16d1c:	movw	r2, #1811	; 0x713
   16d20:	movt	r0, #1
   16d24:	movt	r1, #1
   16d28:	movt	r3, #1
   16d2c:	bl	12418 <__assert_fail@plt>
   16d30:	movw	r0, #39801	; 0x9b79
   16d34:	movw	r1, #36080	; 0x8cf0
   16d38:	movw	r3, #39929	; 0x9bf9
   16d3c:	movw	r2, #1812	; 0x714
   16d40:	movt	r0, #1
   16d44:	movt	r1, #1
   16d48:	movt	r3, #1
   16d4c:	bl	12418 <__assert_fail@plt>
   16d50:	movw	r0, #40598	; 0x9e96
   16d54:	movw	r1, #36080	; 0x8cf0
   16d58:	movw	r3, #39929	; 0x9bf9
   16d5c:	movw	r2, #1819	; 0x71b
   16d60:	movt	r0, #1
   16d64:	movt	r1, #1
   16d68:	movt	r3, #1
   16d6c:	bl	12418 <__assert_fail@plt>

00016d70 <flatcc_builder_table_add@@Base>:
   16d70:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   16d74:	add	fp, sp, #24
   16d78:	sub	sp, sp, #8
   16d7c:	mov	r4, r0
   16d80:	ldr	r0, [r0, #32]
   16d84:	ldrh	r0, [r0, #14]
   16d88:	cmp	r0, #3
   16d8c:	bne	16eac <flatcc_builder_table_add@@Base+0x13c>
   16d90:	movw	r0, #32765	; 0x7ffd
   16d94:	mov	r8, r1
   16d98:	cmp	r1, r0
   16d9c:	bcs	16ecc <flatcc_builder_table_add@@Base+0x15c>
   16da0:	ldrh	r0, [r4, #130]	; 0x82
   16da4:	cmp	r0, r3
   16da8:	strhcc	r3, [r4, #130]	; 0x82
   16dac:	ldr	r0, [r4, #4]
   16db0:	add	r1, r0, r8, lsl #1
   16db4:	ldrh	r1, [r1]
   16db8:	cmp	r1, #0
   16dbc:	bne	16eec <flatcc_builder_table_add@@Base+0x17c>
   16dc0:	ldr	r1, [r4, #12]
   16dc4:	movw	r7, #31153	; 0x79b1
   16dc8:	ldr	r6, [r4, #20]
   16dcc:	ldr	r5, [r4, #24]
   16dd0:	movt	r7, #40503	; 0x9e37
   16dd4:	eor	r1, r1, r8
   16dd8:	mul	r1, r1, r7
   16ddc:	eor	r1, r1, r2
   16de0:	mul	r1, r1, r7
   16de4:	str	r1, [r4, #12]
   16de8:	add	r1, r3, r6
   16dec:	rsb	r3, r3, #0
   16df0:	sub	r1, r1, #1
   16df4:	and	r6, r1, r3
   16df8:	add	r1, r6, r2
   16dfc:	cmp	r1, r5
   16e00:	str	r1, [r4, #20]
   16e04:	bcc	16e7c <flatcc_builder_table_add@@Base+0x10c>
   16e08:	ldr	r2, [r4, #28]
   16e0c:	ldr	r0, [r4, #40]	; 0x28
   16e10:	ldr	r7, [r4, #48]	; 0x30
   16e14:	mov	r3, #1
   16e18:	str	r3, [sp]
   16e1c:	mov	r3, #1
   16e20:	add	r1, r1, r2
   16e24:	add	r2, r1, #1
   16e28:	add	r1, r4, #60	; 0x3c
   16e2c:	blx	r7
   16e30:	mov	r1, r0
   16e34:	mov	r0, #0
   16e38:	cmp	r1, #0
   16e3c:	beq	16e48 <flatcc_builder_table_add@@Base+0xd8>
   16e40:	sub	sp, fp, #24
   16e44:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   16e48:	ldr	r0, [r4, #28]
   16e4c:	ldr	r2, [r4, #60]	; 0x3c
   16e50:	ldr	r3, [r4, #64]	; 0x40
   16e54:	ldr	r1, [r4, #32]
   16e58:	add	r2, r2, r0
   16e5c:	sub	r0, r3, r0
   16e60:	str	r2, [r4, #16]
   16e64:	movw	r2, #65532	; 0xfffc
   16e68:	cmp	r0, r2
   16e6c:	movcs	r0, r2
   16e70:	str	r0, [r4, #24]
   16e74:	str	r2, [r1, #4]
   16e78:	ldr	r0, [r4, #4]
   16e7c:	uxth	r1, r8
   16e80:	add	r2, r6, #4
   16e84:	add	r0, r0, r1, lsl #1
   16e88:	strh	r2, [r0]
   16e8c:	ldrh	r0, [r4, #8]
   16e90:	cmp	r0, r1
   16e94:	addls	r0, r8, #1
   16e98:	strhls	r0, [r4, #8]
   16e9c:	ldr	r0, [r4, #16]
   16ea0:	add	r0, r0, r6
   16ea4:	sub	sp, fp, #24
   16ea8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   16eac:	movw	r0, #38149	; 0x9505
   16eb0:	movw	r1, #36080	; 0x8cf0
   16eb4:	movw	r3, #39727	; 0x9b2f
   16eb8:	movw	r2, #1773	; 0x6ed
   16ebc:	movt	r0, #1
   16ec0:	movt	r1, #1
   16ec4:	movt	r3, #1
   16ec8:	bl	12418 <__assert_fail@plt>
   16ecc:	movw	r0, #39801	; 0x9b79
   16ed0:	movw	r1, #36080	; 0x8cf0
   16ed4:	movw	r3, #39727	; 0x9b2f
   16ed8:	movw	r2, #1774	; 0x6ee
   16edc:	movt	r0, #1
   16ee0:	movt	r1, #1
   16ee4:	movt	r3, #1
   16ee8:	bl	12418 <__assert_fail@plt>
   16eec:	movw	r0, #40598	; 0x9e96
   16ef0:	movw	r1, #36080	; 0x8cf0
   16ef4:	movw	r3, #39727	; 0x9b2f
   16ef8:	movw	r2, #1784	; 0x6f8
   16efc:	movt	r0, #1
   16f00:	movt	r1, #1
   16f04:	movt	r3, #1
   16f08:	bl	12418 <__assert_fail@plt>

00016f0c <flatcc_builder_table_add_union_vector@@Base>:
   16f0c:	push	{r4, r5, r6, r7, fp, lr}
   16f10:	add	fp, sp, #16
   16f14:	mov	r6, r0
   16f18:	ldr	r0, [r0, #32]
   16f1c:	ldrh	r0, [r0, #14]
   16f20:	cmp	r0, #3
   16f24:	bne	16f90 <flatcc_builder_table_add_union_vector@@Base+0x84>
   16f28:	mov	r5, r1
   16f2c:	clz	r1, r3
   16f30:	cmp	r2, #0
   16f34:	mov	r0, r2
   16f38:	mov	r4, r3
   16f3c:	mov	r7, r2
   16f40:	movwne	r0, #1
   16f44:	lsr	r1, r1, #5
   16f48:	teq	r1, r0
   16f4c:	beq	16fb0 <flatcc_builder_table_add_union_vector@@Base+0xa4>
   16f50:	cmp	r7, #0
   16f54:	beq	16f88 <flatcc_builder_table_add_union_vector@@Base+0x7c>
   16f58:	sub	r1, r5, #1
   16f5c:	mov	r0, r6
   16f60:	bl	16be0 <flatcc_builder_table_add_offset@@Base>
   16f64:	cmp	r0, #0
   16f68:	beq	16fd0 <flatcc_builder_table_add_union_vector@@Base+0xc4>
   16f6c:	str	r7, [r0]
   16f70:	mov	r0, r6
   16f74:	mov	r1, r5
   16f78:	bl	16be0 <flatcc_builder_table_add_offset@@Base>
   16f7c:	cmp	r0, #0
   16f80:	beq	16ff0 <flatcc_builder_table_add_union_vector@@Base+0xe4>
   16f84:	str	r4, [r0]
   16f88:	mov	r0, #0
   16f8c:	pop	{r4, r5, r6, r7, fp, pc}
   16f90:	movw	r0, #38149	; 0x9505
   16f94:	movw	r1, #36080	; 0x8cf0
   16f98:	movw	r3, #39047	; 0x9887
   16f9c:	mov	r2, #1536	; 0x600
   16fa0:	movt	r0, #1
   16fa4:	movt	r1, #1
   16fa8:	movt	r3, #1
   16fac:	bl	12418 <__assert_fail@plt>
   16fb0:	movw	r0, #39146	; 0x98ea
   16fb4:	movw	r1, #36080	; 0x8cf0
   16fb8:	movw	r3, #39047	; 0x9887
   16fbc:	movw	r2, #1537	; 0x601
   16fc0:	movt	r0, #1
   16fc4:	movt	r1, #1
   16fc8:	movt	r3, #1
   16fcc:	bl	12418 <__assert_fail@plt>
   16fd0:	movw	r0, #39025	; 0x9871
   16fd4:	movw	r1, #36080	; 0x8cf0
   16fd8:	movw	r3, #39047	; 0x9887
   16fdc:	movw	r2, #1540	; 0x604
   16fe0:	movt	r0, #1
   16fe4:	movt	r1, #1
   16fe8:	movt	r3, #1
   16fec:	bl	12418 <__assert_fail@plt>
   16ff0:	movw	r0, #39025	; 0x9871
   16ff4:	movw	r1, #36080	; 0x8cf0
   16ff8:	movw	r3, #39047	; 0x9887
   16ffc:	movw	r2, #1544	; 0x608
   17000:	movt	r0, #1
   17004:	movt	r1, #1
   17008:	movt	r3, #1
   1700c:	bl	12418 <__assert_fail@plt>

00017010 <flatcc_builder_create_union_vector@@Base>:
   17010:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17014:	add	fp, sp, #28
   17018:	sub	sp, sp, #12
   1701c:	mov	r6, #0
   17020:	mov	r4, r1
   17024:	mov	r8, r0
   17028:	mov	sl, r3
   1702c:	mov	r9, r2
   17030:	mov	r7, #4
   17034:	str	r6, [r0]
   17038:	str	r6, [r0, #4]
   1703c:	mov	r0, r1
   17040:	mov	r1, #4
   17044:	bl	144dc <flatcc_builder_start_buffer@@Base+0xbc>
   17048:	cmp	r0, #0
   1704c:	beq	17058 <flatcc_builder_create_union_vector@@Base+0x48>
   17050:	sub	sp, fp, #28
   17054:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17058:	ldr	r0, [r4, #32]
   1705c:	mov	r1, #5
   17060:	str	r7, [r0, #16]
   17064:	ldr	r0, [r4, #32]
   17068:	str	r6, [r0, #20]
   1706c:	ldr	r0, [r4, #32]
   17070:	strh	r1, [r0, #14]
   17074:	ldr	r1, [r4, #28]
   17078:	ldr	r2, [r4, #60]	; 0x3c
   1707c:	ldr	r3, [r4, #64]	; 0x40
   17080:	add	r2, r2, r1
   17084:	sub	r1, r3, r1
   17088:	str	r2, [r4, #16]
   1708c:	mvn	r2, #3
   17090:	cmn	r1, #4
   17094:	movcs	r1, r2
   17098:	str	r1, [r4, #24]
   1709c:	str	r2, [r0, #4]
   170a0:	ldr	r1, [r0, #20]
   170a4:	adds	r1, r1, sl
   170a8:	cmpcc	r1, #1073741824	; 0x40000000
   170ac:	bcc	170d0 <flatcc_builder_create_union_vector@@Base+0xc0>
   170b0:	movw	r0, #40351	; 0x9d9f
   170b4:	movw	r1, #36080	; 0x8cf0
   170b8:	movw	r3, #40378	; 0x9dba
   170bc:	mov	r2, #892	; 0x37c
   170c0:	movt	r0, #1
   170c4:	movt	r1, #1
   170c8:	movt	r3, #1
   170cc:	bl	12418 <__assert_fail@plt>
   170d0:	str	r1, [r0, #20]
   170d4:	ldr	r7, [r4, #20]
   170d8:	ldr	r0, [r4, #24]
   170dc:	add	r1, r7, sl, lsl #2
   170e0:	cmp	r1, r0
   170e4:	str	r1, [r4, #20]
   170e8:	bcs	170fc <flatcc_builder_create_union_vector@@Base+0xec>
   170ec:	ldr	r1, [r4, #16]
   170f0:	adds	r2, r1, r7
   170f4:	bne	17164 <flatcc_builder_create_union_vector@@Base+0x154>
   170f8:	b	17050 <flatcc_builder_create_union_vector@@Base+0x40>
   170fc:	ldr	r2, [r4, #28]
   17100:	ldr	r0, [r4, #40]	; 0x28
   17104:	ldr	r6, [r4, #48]	; 0x30
   17108:	mov	r3, #1
   1710c:	str	r3, [sp]
   17110:	mov	r3, #1
   17114:	add	r1, r1, r2
   17118:	add	r2, r1, #1
   1711c:	add	r1, r4, #60	; 0x3c
   17120:	blx	r6
   17124:	cmp	r0, #0
   17128:	bne	17050 <flatcc_builder_create_union_vector@@Base+0x40>
   1712c:	ldr	r0, [r4, #28]
   17130:	ldr	r1, [r4, #60]	; 0x3c
   17134:	ldr	r3, [r4, #64]	; 0x40
   17138:	ldr	r2, [r4, #32]
   1713c:	add	r1, r1, r0
   17140:	sub	r0, r3, r0
   17144:	mvn	r3, #3
   17148:	cmn	r0, #4
   1714c:	str	r1, [r4, #16]
   17150:	movcs	r0, r3
   17154:	str	r0, [r4, #24]
   17158:	str	r3, [r2, #4]
   1715c:	adds	r2, r1, r7
   17160:	beq	17050 <flatcc_builder_create_union_vector@@Base+0x40>
   17164:	ldr	r7, [r4, #20]
   17168:	add	r2, r7, sl
   1716c:	cmp	r2, r0
   17170:	str	r2, [r4, #20]
   17174:	bcc	171d8 <flatcc_builder_create_union_vector@@Base+0x1c8>
   17178:	ldr	r1, [r4, #28]
   1717c:	ldr	r0, [r4, #40]	; 0x28
   17180:	ldr	r6, [r4, #48]	; 0x30
   17184:	mov	r3, #1
   17188:	str	r3, [sp]
   1718c:	mov	r3, #1
   17190:	add	r1, r2, r1
   17194:	add	r2, r1, #1
   17198:	add	r1, r4, #60	; 0x3c
   1719c:	blx	r6
   171a0:	cmp	r0, #0
   171a4:	bne	17050 <flatcc_builder_create_union_vector@@Base+0x40>
   171a8:	ldr	r0, [r4, #28]
   171ac:	ldr	r1, [r4, #60]	; 0x3c
   171b0:	ldr	r3, [r4, #64]	; 0x40
   171b4:	ldr	r2, [r4, #32]
   171b8:	add	r1, r1, r0
   171bc:	sub	r0, r3, r0
   171c0:	mvn	r3, #3
   171c4:	cmn	r0, #4
   171c8:	str	r1, [r4, #16]
   171cc:	movcs	r0, r3
   171d0:	str	r0, [r4, #24]
   171d4:	str	r3, [r2, #4]
   171d8:	adds	r5, r1, r7
   171dc:	beq	17050 <flatcc_builder_create_union_vector@@Base+0x40>
   171e0:	cmp	sl, #0
   171e4:	beq	1726c <flatcc_builder_create_union_vector@@Base+0x25c>
   171e8:	and	ip, sl, #1
   171ec:	mov	r0, #0
   171f0:	cmp	sl, #1
   171f4:	str	r5, [sp, #8]
   171f8:	beq	17250 <flatcc_builder_create_union_vector@@Base+0x240>
   171fc:	ldr	r0, [sp, #8]
   17200:	sub	lr, sl, ip
   17204:	add	r2, r1, #4
   17208:	add	r6, r9, #8
   1720c:	add	r7, r0, #1
   17210:	mov	r0, #0
   17214:	ldrb	r3, [r6, #-8]
   17218:	add	r5, r7, r0
   1721c:	strb	r3, [r5, #-1]
   17220:	add	r3, r9, r0, lsl #3
   17224:	ldr	r5, [r3, #4]
   17228:	str	r5, [r2, #-4]
   1722c:	ldrb	r5, [r6]
   17230:	add	r6, r6, #16
   17234:	strb	r5, [r7, r0]
   17238:	add	r0, r0, #2
   1723c:	ldr	r3, [r3, #12]
   17240:	cmp	lr, r0
   17244:	str	r3, [r2]
   17248:	add	r2, r2, #8
   1724c:	bne	17214 <flatcc_builder_create_union_vector@@Base+0x204>
   17250:	ldr	r5, [sp, #8]
   17254:	cmp	ip, #0
   17258:	beq	1726c <flatcc_builder_create_union_vector@@Base+0x25c>
   1725c:	ldrb	r2, [r9, r0, lsl #3]!
   17260:	strb	r2, [r5, r0]
   17264:	ldr	r2, [r9, #4]
   17268:	str	r2, [r1, r0, lsl #2]
   1726c:	mov	r0, r4
   17270:	mov	r2, sl
   17274:	mov	r3, r5
   17278:	bl	167e4 <flatcc_builder_create_offset_vector_direct@@Base+0x8>
   1727c:	mov	r7, r0
   17280:	mov	r6, #0
   17284:	cmp	r0, #0
   17288:	beq	172b4 <flatcc_builder_create_union_vector@@Base+0x2a4>
   1728c:	mvn	r0, #0
   17290:	mov	r1, #1
   17294:	mov	r2, sl
   17298:	mov	r3, #1
   1729c:	str	r1, [sp]
   172a0:	str	r0, [sp, #4]
   172a4:	mov	r0, r4
   172a8:	mov	r1, r5
   172ac:	bl	16584 <flatcc_builder_create_vector@@Base>
   172b0:	b	172b8 <flatcc_builder_create_union_vector@@Base+0x2a8>
   172b4:	mov	r0, #0
   172b8:	orr	r1, r6, r7
   172bc:	stm	r8, {r0, r1}
   172c0:	mov	r1, #0
   172c4:	ldr	r0, [r4, #16]
   172c8:	ldr	r2, [r4, #20]
   172cc:	bl	123f4 <memset@plt>
   172d0:	ldr	r0, [r4, #32]
   172d4:	ldr	r1, [r4, #60]	; 0x3c
   172d8:	ldr	r2, [r4, #64]	; 0x40
   172dc:	ldr	r3, [r0, #8]
   172e0:	str	r3, [r4, #20]
   172e4:	ldr	r3, [r0]
   172e8:	str	r3, [r4, #28]
   172ec:	add	r1, r1, r3
   172f0:	ldr	r7, [r0, #4]
   172f4:	str	r1, [r4, #16]
   172f8:	sub	r1, r2, r3
   172fc:	cmp	r1, r7
   17300:	movhi	r1, r7
   17304:	str	r1, [r4, #24]
   17308:	ldrh	r1, [r4, #130]	; 0x82
   1730c:	ldrh	r2, [r4, #128]	; 0x80
   17310:	cmp	r2, r1
   17314:	strhcc	r1, [r4, #128]	; 0x80
   17318:	ldrh	r1, [r0, #12]
   1731c:	sub	r0, r0, #36	; 0x24
   17320:	str	r0, [r4, #32]
   17324:	strh	r1, [r4, #130]	; 0x82
   17328:	ldr	r0, [r4, #156]	; 0x9c
   1732c:	sub	r0, r0, #1
   17330:	str	r0, [r4, #156]	; 0x9c
   17334:	sub	sp, fp, #28
   17338:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

0001733c <flatcc_builder_create_union_vector_direct@@Base>:
   1733c:	push	{r4, r5, r6, r7, fp, lr}
   17340:	add	fp, sp, #16
   17344:	sub	sp, sp, #8
   17348:	ldr	r7, [fp, #8]
   1734c:	mov	r5, r2
   17350:	mov	r4, r0
   17354:	mov	r0, #0
   17358:	mov	r6, r1
   1735c:	str	r0, [r4]
   17360:	str	r0, [r4, #4]
   17364:	mov	r0, r1
   17368:	mov	r1, r3
   1736c:	mov	r3, r5
   17370:	mov	r2, r7
   17374:	bl	167e4 <flatcc_builder_create_offset_vector_direct@@Base+0x8>
   17378:	cmp	r0, #0
   1737c:	str	r0, [r4, #4]
   17380:	beq	173ac <flatcc_builder_create_union_vector_direct@@Base+0x70>
   17384:	mvn	r0, #0
   17388:	mov	r1, #1
   1738c:	mov	r2, r7
   17390:	mov	r3, #1
   17394:	str	r1, [sp]
   17398:	str	r0, [sp, #4]
   1739c:	mov	r0, r6
   173a0:	mov	r1, r5
   173a4:	bl	16584 <flatcc_builder_create_vector@@Base>
   173a8:	str	r0, [r4]
   173ac:	sub	sp, fp, #16
   173b0:	pop	{r4, r5, r6, r7, fp, pc}

000173b4 <flatcc_builder_start_union_vector@@Base>:
   173b4:	push	{r4, sl, fp, lr}
   173b8:	add	fp, sp, #8
   173bc:	mov	r1, #4
   173c0:	mov	r4, r0
   173c4:	bl	144dc <flatcc_builder_start_buffer@@Base+0xbc>
   173c8:	mov	r1, r0
   173cc:	mvn	r0, #0
   173d0:	cmp	r1, #0
   173d4:	popne	{r4, sl, fp, pc}
   173d8:	ldr	r0, [r4, #32]
   173dc:	mov	r1, #8
   173e0:	mov	r2, #7
   173e4:	str	r1, [r0, #16]
   173e8:	mov	r0, #0
   173ec:	ldr	r1, [r4, #32]
   173f0:	str	r0, [r1, #20]
   173f4:	ldr	r1, [r4, #32]
   173f8:	strh	r2, [r1, #14]
   173fc:	ldr	r2, [r4, #28]
   17400:	ldr	r3, [r4, #60]	; 0x3c
   17404:	ldr	ip, [r4, #64]	; 0x40
   17408:	add	r3, r3, r2
   1740c:	sub	r2, ip, r2
   17410:	str	r3, [r4, #16]
   17414:	mvn	r3, #3
   17418:	cmn	r2, #4
   1741c:	movcs	r2, r3
   17420:	str	r2, [r4, #24]
   17424:	str	r3, [r1, #4]
   17428:	pop	{r4, sl, fp, pc}

0001742c <flatcc_builder_end_union_vector@@Base>:
   1742c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17430:	add	fp, sp, #28
   17434:	sub	sp, sp, #20
   17438:	mov	r4, r0
   1743c:	mov	r0, #0
   17440:	mov	r8, r1
   17444:	str	r0, [r4]
   17448:	str	r0, [r4, #4]
   1744c:	ldr	r0, [r1, #32]
   17450:	ldrh	r1, [r0, #14]
   17454:	cmp	r1, #7
   17458:	bne	17660 <flatcc_builder_end_union_vector@@Base+0x234>
   1745c:	ldr	r9, [r0, #20]
   17460:	ldr	r5, [r8, #20]
   17464:	ldr	r2, [r8, #24]
   17468:	add	r0, r9, r9, lsl #2
   1746c:	add	r1, r5, r0
   17470:	cmp	r1, r2
   17474:	str	r1, [r8, #20]
   17478:	bcs	17568 <flatcc_builder_end_union_vector@@Base+0x13c>
   1747c:	ldr	r0, [r8, #16]
   17480:	adds	r1, r0, r5
   17484:	beq	175d0 <flatcc_builder_end_union_vector@@Base+0x1a4>
   17488:	add	sl, r1, r9, lsl #2
   1748c:	cmp	r9, #0
   17490:	beq	17520 <flatcc_builder_end_union_vector@@Base+0xf4>
   17494:	and	r2, r9, #1
   17498:	cmp	r9, #1
   1749c:	str	r4, [sp, #12]
   174a0:	str	r2, [sp, #16]
   174a4:	mov	r2, #0
   174a8:	beq	17500 <flatcc_builder_end_union_vector@@Base+0xd4>
   174ac:	ldr	r2, [sp, #16]
   174b0:	add	r5, r5, #4
   174b4:	add	r6, r0, #8
   174b8:	sub	lr, r9, r2
   174bc:	mov	r2, #0
   174c0:	ldrb	r7, [r6, #-8]
   174c4:	mov	r4, sl
   174c8:	add	r3, r0, r2, lsl #3
   174cc:	strb	r7, [r4, r2]!
   174d0:	add	r7, r0, r5
   174d4:	add	r2, r2, #2
   174d8:	ldr	ip, [r3, #4]
   174dc:	cmp	lr, r2
   174e0:	str	ip, [r7, #-4]
   174e4:	ldrb	r7, [r6]
   174e8:	add	r6, r6, #16
   174ec:	strb	r7, [r4, #1]
   174f0:	ldr	r3, [r3, #12]
   174f4:	str	r3, [r0, r5]
   174f8:	add	r5, r5, #8
   174fc:	bne	174c0 <flatcc_builder_end_union_vector@@Base+0x94>
   17500:	ldr	r3, [sp, #16]
   17504:	ldr	r4, [sp, #12]
   17508:	cmp	r3, #0
   1750c:	beq	17520 <flatcc_builder_end_union_vector@@Base+0xf4>
   17510:	ldrb	r3, [r0, r2, lsl #3]!
   17514:	strb	r3, [sl, r2]
   17518:	ldr	r0, [r0, #4]
   1751c:	str	r0, [r1, r2, lsl #2]
   17520:	mov	r0, r8
   17524:	mov	r2, r9
   17528:	mov	r3, sl
   1752c:	bl	167e4 <flatcc_builder_create_offset_vector_direct@@Base+0x8>
   17530:	mov	r5, r0
   17534:	mov	r6, #0
   17538:	cmp	r0, #0
   1753c:	beq	175d8 <flatcc_builder_end_union_vector@@Base+0x1ac>
   17540:	mvn	r0, #0
   17544:	mov	r1, #1
   17548:	mov	r2, r9
   1754c:	mov	r3, #1
   17550:	str	r1, [sp]
   17554:	str	r0, [sp, #4]
   17558:	mov	r0, r8
   1755c:	mov	r1, sl
   17560:	bl	16584 <flatcc_builder_create_vector@@Base>
   17564:	b	175dc <flatcc_builder_end_union_vector@@Base+0x1b0>
   17568:	ldr	r2, [r8, #28]
   1756c:	ldr	r0, [r8, #40]	; 0x28
   17570:	ldr	r7, [r8, #48]	; 0x30
   17574:	mov	r3, #1
   17578:	str	r3, [sp]
   1757c:	mov	r3, #1
   17580:	add	r1, r1, r2
   17584:	add	r2, r1, #1
   17588:	add	r1, r8, #60	; 0x3c
   1758c:	blx	r7
   17590:	cmp	r0, #0
   17594:	bne	175d0 <flatcc_builder_end_union_vector@@Base+0x1a4>
   17598:	ldr	r1, [r8, #28]
   1759c:	ldr	r0, [r8, #60]	; 0x3c
   175a0:	ldr	r3, [r8, #64]	; 0x40
   175a4:	ldr	r2, [r8, #32]
   175a8:	add	r0, r0, r1
   175ac:	sub	r1, r3, r1
   175b0:	mvn	r3, #3
   175b4:	cmn	r1, #4
   175b8:	str	r0, [r8, #16]
   175bc:	movcs	r1, r3
   175c0:	str	r1, [r8, #24]
   175c4:	str	r3, [r2, #4]
   175c8:	adds	r1, r0, r5
   175cc:	bne	17488 <flatcc_builder_end_union_vector@@Base+0x5c>
   175d0:	sub	sp, fp, #28
   175d4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   175d8:	mov	r0, #0
   175dc:	orr	r1, r6, r5
   175e0:	stm	r4, {r0, r1}
   175e4:	mov	r1, #0
   175e8:	ldr	r0, [r8, #16]
   175ec:	ldr	r2, [r8, #20]
   175f0:	bl	123f4 <memset@plt>
   175f4:	ldr	r0, [r8, #32]
   175f8:	ldr	r1, [r8, #60]	; 0x3c
   175fc:	ldr	r2, [r8, #64]	; 0x40
   17600:	ldr	r3, [r0, #8]
   17604:	str	r3, [r8, #20]
   17608:	ldr	r3, [r0]
   1760c:	str	r3, [r8, #28]
   17610:	add	r1, r1, r3
   17614:	ldr	r7, [r0, #4]
   17618:	str	r1, [r8, #16]
   1761c:	sub	r1, r2, r3
   17620:	cmp	r1, r7
   17624:	movhi	r1, r7
   17628:	str	r1, [r8, #24]
   1762c:	ldrh	r1, [r8, #130]	; 0x82
   17630:	ldrh	r2, [r8, #128]	; 0x80
   17634:	cmp	r2, r1
   17638:	strhcc	r1, [r8, #128]	; 0x80
   1763c:	ldrh	r1, [r0, #12]
   17640:	sub	r0, r0, #36	; 0x24
   17644:	str	r0, [r8, #32]
   17648:	strh	r1, [r8, #130]	; 0x82
   1764c:	ldr	r0, [r8, #156]	; 0x9c
   17650:	sub	r0, r0, #1
   17654:	str	r0, [r8, #156]	; 0x9c
   17658:	sub	sp, fp, #28
   1765c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17660:	movw	r0, #39186	; 0x9912
   17664:	movw	r1, #36080	; 0x8cf0
   17668:	movw	r3, #39236	; 0x9944
   1766c:	movw	r2, #1617	; 0x651
   17670:	movt	r0, #1
   17674:	movt	r1, #1
   17678:	movt	r3, #1
   1767c:	bl	12418 <__assert_fail@plt>

00017680 <flatcc_builder_union_vector_count@@Base>:
   17680:	ldr	r0, [r0, #32]
   17684:	ldr	r0, [r0, #20]
   17688:	bx	lr

0001768c <flatcc_builder_union_vector_edit@@Base>:
   1768c:	ldr	r0, [r0, #16]
   17690:	bx	lr

00017694 <flatcc_builder_extend_union_vector@@Base>:
   17694:	push	{r4, r5, fp, lr}
   17698:	add	fp, sp, #8
   1769c:	sub	sp, sp, #8
   176a0:	mov	r4, r0
   176a4:	ldr	r0, [r0, #32]
   176a8:	ldr	r2, [r0, #20]
   176ac:	adds	r2, r2, r1
   176b0:	cmpcc	r2, #536870912	; 0x20000000
   176b4:	bcc	176d8 <flatcc_builder_extend_union_vector@@Base+0x44>
   176b8:	movw	r0, #40351	; 0x9d9f
   176bc:	movw	r1, #36080	; 0x8cf0
   176c0:	movw	r3, #40378	; 0x9dba
   176c4:	mov	r2, #892	; 0x37c
   176c8:	movt	r0, #1
   176cc:	movt	r1, #1
   176d0:	movt	r3, #1
   176d4:	bl	12418 <__assert_fail@plt>
   176d8:	str	r2, [r0, #20]
   176dc:	ldr	r5, [r4, #20]
   176e0:	ldr	r0, [r4, #24]
   176e4:	add	r1, r5, r1, lsl #3
   176e8:	cmp	r1, r0
   176ec:	str	r1, [r4, #20]
   176f0:	bcs	17704 <flatcc_builder_extend_union_vector@@Base+0x70>
   176f4:	ldr	r0, [r4, #16]
   176f8:	add	r0, r0, r5
   176fc:	sub	sp, fp, #8
   17700:	pop	{r4, r5, fp, pc}
   17704:	ldr	r2, [r4, #28]
   17708:	ldr	r0, [r4, #40]	; 0x28
   1770c:	ldr	ip, [r4, #48]	; 0x30
   17710:	mov	r3, #1
   17714:	str	r3, [sp]
   17718:	mov	r3, #1
   1771c:	add	r1, r1, r2
   17720:	add	r2, r1, #1
   17724:	add	r1, r4, #60	; 0x3c
   17728:	blx	ip
   1772c:	mov	r1, r0
   17730:	mov	r0, #0
   17734:	cmp	r1, #0
   17738:	beq	17744 <flatcc_builder_extend_union_vector@@Base+0xb0>
   1773c:	sub	sp, fp, #8
   17740:	pop	{r4, r5, fp, pc}
   17744:	ldr	r1, [r4, #28]
   17748:	ldr	r0, [r4, #60]	; 0x3c
   1774c:	ldr	r3, [r4, #64]	; 0x40
   17750:	ldr	r2, [r4, #32]
   17754:	add	r0, r0, r1
   17758:	sub	r1, r3, r1
   1775c:	mvn	r3, #3
   17760:	cmn	r1, #4
   17764:	str	r0, [r4, #16]
   17768:	movcs	r1, r3
   1776c:	str	r1, [r4, #24]
   17770:	str	r3, [r2, #4]
   17774:	add	r0, r0, r5
   17778:	sub	sp, fp, #8
   1777c:	pop	{r4, r5, fp, pc}

00017780 <flatcc_builder_truncate_union_vector@@Base>:
   17780:	push	{fp, lr}
   17784:	mov	fp, sp
   17788:	ldr	r2, [r0, #32]
   1778c:	ldrh	r3, [r2, #14]
   17790:	cmp	r3, #7
   17794:	bne	177dc <flatcc_builder_truncate_union_vector@@Base+0x5c>
   17798:	ldr	r3, [r2, #20]
   1779c:	cmp	r3, r1
   177a0:	bcc	177fc <flatcc_builder_truncate_union_vector@@Base+0x7c>
   177a4:	sub	r3, r3, r1
   177a8:	str	r3, [r2, #20]
   177ac:	ldr	r2, [r0, #32]
   177b0:	ldr	r3, [r0, #20]
   177b4:	ldr	ip, [r0, #16]
   177b8:	ldr	r2, [r2, #16]
   177bc:	mls	r3, r2, r1, r3
   177c0:	mul	r2, r2, r1
   177c4:	mov	r1, #0
   177c8:	str	r3, [r0, #20]
   177cc:	add	r0, ip, r3
   177d0:	bl	123f4 <memset@plt>
   177d4:	mov	r0, #0
   177d8:	pop	{fp, pc}
   177dc:	movw	r0, #39186	; 0x9912
   177e0:	movw	r1, #36080	; 0x8cf0
   177e4:	movw	r3, #39319	; 0x9997
   177e8:	movw	r2, #1665	; 0x681
   177ec:	movt	r0, #1
   177f0:	movt	r1, #1
   177f4:	movt	r3, #1
   177f8:	bl	12418 <__assert_fail@plt>
   177fc:	movw	r0, #37750	; 0x9376
   17800:	movw	r1, #36080	; 0x8cf0
   17804:	movw	r3, #39319	; 0x9997
   17808:	movw	r2, #1666	; 0x682
   1780c:	movt	r0, #1
   17810:	movt	r1, #1
   17814:	movt	r3, #1
   17818:	bl	12418 <__assert_fail@plt>

0001781c <flatcc_builder_union_vector_push@@Base>:
   1781c:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   17820:	add	fp, sp, #24
   17824:	sub	sp, sp, #8
   17828:	mov	r7, r0
   1782c:	ldr	r0, [r0, #32]
   17830:	mov	r9, r1
   17834:	ldrh	r1, [r0, #14]
   17838:	cmp	r1, #7
   1783c:	bne	17904 <flatcc_builder_union_vector_push@@Base+0xe8>
   17840:	ldr	r1, [r0, #20]
   17844:	mov	r6, #0
   17848:	cmn	r1, #-536870911	; 0xe0000001
   1784c:	beq	178ac <flatcc_builder_union_vector_push@@Base+0x90>
   17850:	add	r1, r1, #1
   17854:	mov	r8, r2
   17858:	str	r1, [r0, #20]
   1785c:	ldr	r4, [r7, #20]
   17860:	ldr	r0, [r7, #24]
   17864:	add	r1, r4, #8
   17868:	cmp	r1, r0
   1786c:	str	r1, [r7, #20]
   17870:	bcs	1787c <flatcc_builder_union_vector_push@@Base+0x60>
   17874:	ldr	r0, [r7, #16]
   17878:	b	178e8 <flatcc_builder_union_vector_push@@Base+0xcc>
   1787c:	ldr	r1, [r7, #28]
   17880:	ldr	r0, [r7, #40]	; 0x28
   17884:	ldr	r5, [r7, #48]	; 0x30
   17888:	mov	r2, #1
   1788c:	mov	r3, #1
   17890:	str	r2, [sp]
   17894:	add	r1, r4, r1
   17898:	add	r2, r1, #9
   1789c:	add	r1, r7, #60	; 0x3c
   178a0:	blx	r5
   178a4:	cmp	r0, #0
   178a8:	beq	178b8 <flatcc_builder_union_vector_push@@Base+0x9c>
   178ac:	mov	r0, r6
   178b0:	sub	sp, fp, #24
   178b4:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   178b8:	ldr	r1, [r7, #28]
   178bc:	ldr	r0, [r7, #60]	; 0x3c
   178c0:	ldr	r3, [r7, #64]	; 0x40
   178c4:	ldr	r2, [r7, #32]
   178c8:	add	r0, r0, r1
   178cc:	sub	r1, r3, r1
   178d0:	mvn	r3, #3
   178d4:	cmn	r1, #4
   178d8:	str	r0, [r7, #16]
   178dc:	movcs	r1, r3
   178e0:	str	r1, [r7, #24]
   178e4:	str	r3, [r2, #4]
   178e8:	adds	r0, r0, r4
   178ec:	movne	r6, r0
   178f0:	strne	r9, [r0]
   178f4:	strne	r8, [r0, #4]
   178f8:	mov	r0, r6
   178fc:	sub	sp, fp, #24
   17900:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   17904:	movw	r0, #39186	; 0x9912
   17908:	movw	r1, #36080	; 0x8cf0
   1790c:	movw	r3, #39388	; 0x99dc
   17910:	movw	r2, #1677	; 0x68d
   17914:	movt	r0, #1
   17918:	movt	r1, #1
   1791c:	movt	r3, #1
   17920:	bl	12418 <__assert_fail@plt>

00017924 <flatcc_builder_append_union_vector@@Base>:
   17924:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   17928:	add	fp, sp, #24
   1792c:	sub	sp, sp, #8
   17930:	mov	r6, r0
   17934:	ldr	r0, [r0, #32]
   17938:	mov	r8, r1
   1793c:	ldrh	r1, [r0, #14]
   17940:	cmp	r1, #7
   17944:	bne	17a48 <flatcc_builder_append_union_vector@@Base+0x124>
   17948:	ldr	r1, [r0, #20]
   1794c:	mov	r5, r2
   17950:	adds	r1, r1, r2
   17954:	cmpcc	r1, #536870912	; 0x20000000
   17958:	bcc	1797c <flatcc_builder_append_union_vector@@Base+0x58>
   1795c:	movw	r0, #40351	; 0x9d9f
   17960:	movw	r1, #36080	; 0x8cf0
   17964:	movw	r3, #40378	; 0x9dba
   17968:	mov	r2, #892	; 0x37c
   1796c:	movt	r0, #1
   17970:	movt	r1, #1
   17974:	movt	r3, #1
   17978:	bl	12418 <__assert_fail@plt>
   1797c:	str	r1, [r0, #20]
   17980:	ldr	r4, [r6, #20]
   17984:	ldr	r0, [r6, #24]
   17988:	add	r1, r4, r5, lsl #3
   1798c:	cmp	r1, r0
   17990:	str	r1, [r6, #20]
   17994:	bcs	179c0 <flatcc_builder_append_union_vector@@Base+0x9c>
   17998:	ldr	r0, [r6, #16]
   1799c:	adds	r7, r0, r4
   179a0:	beq	17a38 <flatcc_builder_append_union_vector@@Base+0x114>
   179a4:	lsl	r2, r5, #3
   179a8:	mov	r0, r7
   179ac:	mov	r1, r8
   179b0:	bl	12388 <memcpy@plt>
   179b4:	mov	r0, r7
   179b8:	sub	sp, fp, #24
   179bc:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   179c0:	ldr	r2, [r6, #28]
   179c4:	ldr	r0, [r6, #40]	; 0x28
   179c8:	ldr	r7, [r6, #48]	; 0x30
   179cc:	mov	r3, #1
   179d0:	str	r3, [sp]
   179d4:	mov	r3, #1
   179d8:	add	r1, r1, r2
   179dc:	add	r2, r1, #1
   179e0:	add	r1, r6, #60	; 0x3c
   179e4:	blx	r7
   179e8:	mov	r7, #0
   179ec:	cmp	r0, #0
   179f0:	beq	17a00 <flatcc_builder_append_union_vector@@Base+0xdc>
   179f4:	mov	r0, r7
   179f8:	sub	sp, fp, #24
   179fc:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   17a00:	ldr	r1, [r6, #28]
   17a04:	ldr	r0, [r6, #60]	; 0x3c
   17a08:	ldr	r3, [r6, #64]	; 0x40
   17a0c:	ldr	r2, [r6, #32]
   17a10:	add	r0, r0, r1
   17a14:	sub	r1, r3, r1
   17a18:	mvn	r3, #3
   17a1c:	cmn	r1, #4
   17a20:	str	r0, [r6, #16]
   17a24:	movcs	r1, r3
   17a28:	str	r1, [r6, #24]
   17a2c:	str	r3, [r2, #4]
   17a30:	adds	r7, r0, r4
   17a34:	bne	179a4 <flatcc_builder_append_union_vector@@Base+0x80>
   17a38:	mov	r7, #0
   17a3c:	mov	r0, r7
   17a40:	sub	sp, fp, #24
   17a44:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   17a48:	movw	r0, #39186	; 0x9912
   17a4c:	movw	r1, #36080	; 0x8cf0
   17a50:	movw	r3, #39497	; 0x9a49
   17a54:	movw	r2, #1692	; 0x69c
   17a58:	movt	r0, #1
   17a5c:	movt	r1, #1
   17a60:	movt	r3, #1
   17a64:	bl	12418 <__assert_fail@plt>

00017a68 <flatcc_builder_create_string@@Base>:
   17a68:	push	{r4, r5, r6, sl, fp, lr}
   17a6c:	add	fp, sp, #16
   17a70:	sub	sp, sp, #80	; 0x50
   17a74:	str	r2, [fp, #-20]	; 0xffffffec
   17a78:	mvn	r5, r2
   17a7c:	mov	r6, r0
   17a80:	sub	r3, fp, #20
   17a84:	cmp	r2, #0
   17a88:	add	lr, sp, #4
   17a8c:	ldr	ip, [r0, #136]	; 0x88
   17a90:	mov	r0, #4
   17a94:	str	r0, [sp, #16]
   17a98:	str	r3, [sp, #12]
   17a9c:	mov	r3, #1
   17aa0:	str	r0, [sp, #4]
   17aa4:	addne	r0, r2, #4
   17aa8:	str	r3, [sp, #8]
   17aac:	strne	r2, [sp, #24]
   17ab0:	movw	r2, #35550	; 0x8ade
   17ab4:	movne	r3, #2
   17ab8:	strne	r1, [sp, #20]
   17abc:	strne	r3, [sp, #8]
   17ac0:	strne	r0, [sp, #4]
   17ac4:	movt	r2, #1
   17ac8:	add	r5, ip, r5
   17acc:	and	r5, r5, #3
   17ad0:	add	r5, r5, #1
   17ad4:	add	r1, r0, r5
   17ad8:	add	r0, lr, r3, lsl #3
   17adc:	str	r1, [sp, #4]
   17ae0:	cmp	r1, #0
   17ae4:	str	r2, [r0, #8]
   17ae8:	add	r2, r3, #1
   17aec:	str	r5, [r0, #12]
   17af0:	str	r2, [sp, #8]
   17af4:	ble	17b48 <flatcc_builder_create_string@@Base+0xe0>
   17af8:	ldr	r0, [r6, #36]	; 0x24
   17afc:	ldr	r4, [r6, #44]	; 0x2c
   17b00:	sub	r5, ip, r1
   17b04:	str	r1, [sp]
   17b08:	add	r1, lr, #8
   17b0c:	mov	r3, r5
   17b10:	blx	r4
   17b14:	cmp	r0, #0
   17b18:	streq	r5, [r6, #136]	; 0x88
   17b1c:	moveq	r0, r5
   17b20:	subeq	sp, fp, #16
   17b24:	popeq	{r4, r5, r6, sl, fp, pc}
   17b28:	movw	r0, #40598	; 0x9e96
   17b2c:	movw	r1, #36080	; 0x8cf0
   17b30:	movw	r3, #40277	; 0x9d55
   17b34:	movw	r2, #651	; 0x28b
   17b38:	movt	r0, #1
   17b3c:	movt	r1, #1
   17b40:	movt	r3, #1
   17b44:	bl	12418 <__assert_fail@plt>
   17b48:	movw	r0, #40598	; 0x9e96
   17b4c:	movw	r1, #36080	; 0x8cf0
   17b50:	movw	r3, #40277	; 0x9d55
   17b54:	movw	r2, #647	; 0x287
   17b58:	movt	r0, #1
   17b5c:	movt	r1, #1
   17b60:	movt	r3, #1
   17b64:	bl	12418 <__assert_fail@plt>

00017b68 <flatcc_builder_create_string_str@@Base>:
   17b68:	push	{r4, r5, fp, lr}
   17b6c:	add	fp, sp, #8
   17b70:	mov	r5, r0
   17b74:	mov	r0, r1
   17b78:	mov	r4, r1
   17b7c:	bl	123dc <strlen@plt>
   17b80:	mov	r2, r0
   17b84:	mov	r0, r5
   17b88:	mov	r1, r4
   17b8c:	pop	{r4, r5, fp, lr}
   17b90:	b	17a68 <flatcc_builder_create_string@@Base>

00017b94 <flatcc_builder_create_string_strn@@Base>:
   17b94:	push	{r4, r5, r6, sl, fp, lr}
   17b98:	add	fp, sp, #16
   17b9c:	mov	r6, r0
   17ba0:	mov	r5, r1
   17ba4:	mov	r0, r1
   17ba8:	mov	r1, #0
   17bac:	mov	r4, r2
   17bb0:	bl	12400 <memchr@plt>
   17bb4:	cmp	r0, #0
   17bb8:	mov	r1, r5
   17bbc:	subne	r4, r0, r5
   17bc0:	mov	r0, r6
   17bc4:	mov	r2, r4
   17bc8:	pop	{r4, r5, r6, sl, fp, lr}
   17bcc:	b	17a68 <flatcc_builder_create_string@@Base>

00017bd0 <flatcc_builder_end_string@@Base>:
   17bd0:	push	{r4, r5, fp, lr}
   17bd4:	add	fp, sp, #8
   17bd8:	mov	r4, r0
   17bdc:	ldr	r0, [r0, #32]
   17be0:	ldrh	r1, [r0, #14]
   17be4:	cmp	r1, #6
   17be8:	bne	17c90 <flatcc_builder_end_string@@Base+0xc0>
   17bec:	ldr	r2, [r0, #20]
   17bf0:	ldr	r0, [r4, #20]
   17bf4:	cmp	r2, r0
   17bf8:	bne	17cb0 <flatcc_builder_end_string@@Base+0xe0>
   17bfc:	ldr	r1, [r4, #16]
   17c00:	mov	r0, r4
   17c04:	bl	17a68 <flatcc_builder_create_string@@Base>
   17c08:	mov	r5, r0
   17c0c:	cmp	r0, #0
   17c10:	beq	17c88 <flatcc_builder_end_string@@Base+0xb8>
   17c14:	ldr	r0, [r4, #16]
   17c18:	ldr	r2, [r4, #20]
   17c1c:	mov	r1, #0
   17c20:	bl	123f4 <memset@plt>
   17c24:	ldr	r0, [r4, #32]
   17c28:	ldr	r1, [r4, #60]	; 0x3c
   17c2c:	ldr	ip, [r4, #64]	; 0x40
   17c30:	ldr	r3, [r0, #8]
   17c34:	str	r3, [r4, #20]
   17c38:	ldr	r3, [r0]
   17c3c:	str	r3, [r4, #28]
   17c40:	add	r1, r1, r3
   17c44:	ldr	r2, [r0, #4]
   17c48:	str	r1, [r4, #16]
   17c4c:	sub	r1, ip, r3
   17c50:	cmp	r1, r2
   17c54:	movhi	r1, r2
   17c58:	str	r1, [r4, #24]
   17c5c:	ldrh	r1, [r4, #130]	; 0x82
   17c60:	ldrh	r2, [r4, #128]	; 0x80
   17c64:	cmp	r2, r1
   17c68:	strhcc	r1, [r4, #128]	; 0x80
   17c6c:	ldrh	r1, [r0, #12]
   17c70:	sub	r0, r0, #36	; 0x24
   17c74:	str	r0, [r4, #32]
   17c78:	strh	r1, [r4, #130]	; 0x82
   17c7c:	ldr	r0, [r4, #156]	; 0x9c
   17c80:	sub	r0, r0, #1
   17c84:	str	r0, [r4, #156]	; 0x9c
   17c88:	mov	r0, r5
   17c8c:	pop	{r4, r5, fp, pc}
   17c90:	movw	r0, #37397	; 0x9215
   17c94:	movw	r1, #36080	; 0x8cf0
   17c98:	movw	r3, #39624	; 0x9ac8
   17c9c:	movw	r2, #1732	; 0x6c4
   17ca0:	movt	r0, #1
   17ca4:	movt	r1, #1
   17ca8:	movt	r3, #1
   17cac:	bl	12418 <__assert_fail@plt>
   17cb0:	movw	r0, #39691	; 0x9b0b
   17cb4:	movw	r1, #36080	; 0x8cf0
   17cb8:	movw	r3, #39624	; 0x9ac8
   17cbc:	movw	r2, #1733	; 0x6c5
   17cc0:	movt	r0, #1
   17cc4:	movt	r1, #1
   17cc8:	movt	r3, #1
   17ccc:	bl	12418 <__assert_fail@plt>

00017cd0 <flatcc_builder_string_edit@@Base>:
   17cd0:	ldr	r0, [r0, #16]
   17cd4:	bx	lr

00017cd8 <flatcc_builder_string_len@@Base>:
   17cd8:	ldr	r0, [r0, #32]
   17cdc:	ldr	r0, [r0, #20]
   17ce0:	bx	lr

00017ce4 <flatcc_builder_table_edit@@Base>:
   17ce4:	push	{fp, lr}
   17ce8:	mov	fp, sp
   17cec:	ldr	r2, [r0, #32]
   17cf0:	ldrh	r2, [r2, #14]
   17cf4:	cmp	r2, #3
   17cf8:	ldreq	r2, [r0, #16]
   17cfc:	ldreq	r0, [r0, #20]
   17d00:	addeq	r0, r2, r0
   17d04:	subeq	r0, r0, r1
   17d08:	popeq	{fp, pc}
   17d0c:	movw	r0, #38149	; 0x9505
   17d10:	movw	r1, #36080	; 0x8cf0
   17d14:	movw	r3, #39869	; 0x9bbd
   17d18:	movw	r2, #1794	; 0x702
   17d1c:	movt	r0, #1
   17d20:	movt	r1, #1
   17d24:	movt	r3, #1
   17d28:	bl	12418 <__assert_fail@plt>

00017d2c <flatcc_builder_table_add_copy@@Base>:
   17d2c:	push	{r4, r5, r6, sl, fp, lr}
   17d30:	add	fp, sp, #16
   17d34:	mov	r4, r3
   17d38:	ldr	r3, [fp, #8]
   17d3c:	mov	r5, r2
   17d40:	mov	r2, r4
   17d44:	bl	16d70 <flatcc_builder_table_add@@Base>
   17d48:	mov	r6, r0
   17d4c:	cmp	r0, #0
   17d50:	beq	17d64 <flatcc_builder_table_add_copy@@Base+0x38>
   17d54:	mov	r0, r6
   17d58:	mov	r1, r5
   17d5c:	mov	r2, r4
   17d60:	bl	12388 <memcpy@plt>
   17d64:	mov	r0, r6
   17d68:	pop	{r4, r5, r6, sl, fp, pc}

00017d6c <flatcc_builder_push_buffer_alignment@@Base>:
   17d6c:	ldrh	r1, [r0, #128]	; 0x80
   17d70:	mov	r2, #4
   17d74:	strh	r2, [r0, #128]	; 0x80
   17d78:	mov	r0, r1
   17d7c:	bx	lr

00017d80 <flatcc_builder_pop_buffer_alignment@@Base>:
   17d80:	ldrh	r2, [r0, #128]	; 0x80
   17d84:	cmp	r2, r1
   17d88:	strhcc	r1, [r0, #128]	; 0x80
   17d8c:	bx	lr

00017d90 <flatcc_builder_get_buffer_alignment@@Base>:
   17d90:	ldrh	r0, [r0, #128]	; 0x80
   17d94:	bx	lr

00017d98 <flatcc_builder_set_vtable_clustering@@Base>:
   17d98:	clz	r1, r1
   17d9c:	lsr	r1, r1, #5
   17da0:	str	r1, [r0, #180]	; 0xb4
   17da4:	bx	lr

00017da8 <flatcc_builder_set_block_align@@Base>:
   17da8:	strh	r1, [r0, #132]	; 0x84
   17dac:	bx	lr

00017db0 <flatcc_builder_get_level@@Base>:
   17db0:	ldr	r0, [r0, #156]	; 0x9c
   17db4:	bx	lr

00017db8 <flatcc_builder_set_max_level@@Base>:
   17db8:	str	r1, [r0, #176]	; 0xb0
   17dbc:	ldr	r2, [r0, #160]	; 0xa0
   17dc0:	cmp	r2, r1
   17dc4:	strlt	r1, [r0, #160]	; 0xa0
   17dc8:	bx	lr

00017dcc <flatcc_builder_get_buffer_size@@Base>:
   17dcc:	ldr	r1, [r0, #136]	; 0x88
   17dd0:	ldr	r0, [r0, #140]	; 0x8c
   17dd4:	sub	r0, r0, r1
   17dd8:	bx	lr

00017ddc <flatcc_builder_get_buffer_start@@Base>:
   17ddc:	ldr	r0, [r0, #136]	; 0x88
   17de0:	bx	lr

00017de4 <flatcc_builder_get_buffer_end@@Base>:
   17de4:	ldr	r0, [r0, #140]	; 0x8c
   17de8:	bx	lr

00017dec <flatcc_builder_set_vtable_cache_limit@@Base>:
   17dec:	str	r1, [r0, #172]	; 0xac
   17df0:	bx	lr

00017df4 <flatcc_builder_set_identifier@@Base>:
   17df4:	movw	r2, #35550	; 0x8ade
   17df8:	cmp	r1, #0
   17dfc:	movt	r2, #1
   17e00:	movne	r2, r1
   17e04:	ldr	r1, [r2]
   17e08:	str	r1, [r0, #168]	; 0xa8
   17e0c:	bx	lr

00017e10 <flatcc_builder_get_type@@Base>:
   17e10:	ldr	r0, [r0, #32]
   17e14:	cmp	r0, #0
   17e18:	ldrhne	r0, [r0, #14]
   17e1c:	moveq	r0, #0
   17e20:	bx	lr

00017e24 <flatcc_builder_get_type_at@@Base>:
   17e24:	mov	r2, r0
   17e28:	mov	r0, #0
   17e2c:	cmp	r1, #1
   17e30:	blt	17e54 <flatcc_builder_get_type_at@@Base+0x30>
   17e34:	ldr	r3, [r2, #156]	; 0x9c
   17e38:	cmp	r3, r1
   17e3c:	bxlt	lr
   17e40:	sub	r0, r1, r3
   17e44:	ldr	r1, [r2, #32]
   17e48:	add	r0, r0, r0, lsl #3
   17e4c:	add	r0, r1, r0, lsl #2
   17e50:	ldrh	r0, [r0, #14]
   17e54:	bx	lr

00017e58 <flatcc_builder_get_direct_buffer@@Base>:
   17e58:	ldr	r2, [r0, #184]	; 0xb8
   17e5c:	cmp	r2, #0
   17e60:	beq	17e74 <flatcc_builder_get_direct_buffer@@Base+0x1c>
   17e64:	ldr	r2, [r0, #188]	; 0xbc
   17e68:	ldr	r3, [r0, #192]	; 0xc0
   17e6c:	cmp	r2, r3
   17e70:	beq	17e8c <flatcc_builder_get_direct_buffer@@Base+0x34>
   17e74:	cmp	r1, #0
   17e78:	moveq	r0, #0
   17e7c:	bxeq	lr
   17e80:	mov	r0, #0
   17e84:	str	r0, [r1]
   17e88:	bx	lr
   17e8c:	cmp	r1, #0
   17e90:	ldrne	r2, [r0, #212]	; 0xd4
   17e94:	strne	r2, [r1]
   17e98:	ldr	r0, [r0, #196]	; 0xc4
   17e9c:	bx	lr

00017ea0 <flatcc_builder_copy_buffer@@Base>:
   17ea0:	push	{fp, lr}
   17ea4:	mov	fp, sp
   17ea8:	ldr	r3, [r0, #184]	; 0xb8
   17eac:	cmp	r3, #0
   17eb0:	beq	17ee4 <flatcc_builder_copy_buffer@@Base+0x44>
   17eb4:	add	r0, r0, #188	; 0xbc
   17eb8:	bl	185e4 <flatcc_emitter_copy_buffer@@Base>
   17ebc:	cmp	r0, #0
   17ec0:	popne	{fp, pc}
   17ec4:	movw	r0, #36676	; 0x8f44
   17ec8:	movw	r1, #36080	; 0x8cf0
   17ecc:	movw	r3, #40008	; 0x9c48
   17ed0:	movw	r2, #1926	; 0x786
   17ed4:	movt	r0, #1
   17ed8:	movt	r1, #1
   17edc:	movt	r3, #1
   17ee0:	bl	12418 <__assert_fail@plt>
   17ee4:	mov	r0, #0
   17ee8:	pop	{fp, pc}

00017eec <flatcc_builder_finalize_buffer@@Base>:
   17eec:	push	{r4, r5, r6, sl, fp, lr}
   17ef0:	add	fp, sp, #16
   17ef4:	mov	r5, r0
   17ef8:	ldr	r0, [r0, #136]	; 0x88
   17efc:	cmp	r1, #0
   17f00:	ldr	r2, [r5, #140]	; 0x8c
   17f04:	sub	r4, r2, r0
   17f08:	mov	r0, r4
   17f0c:	strne	r4, [r1]
   17f10:	bl	123ac <malloc@plt>
   17f14:	cmp	r0, #0
   17f18:	beq	17f68 <flatcc_builder_finalize_buffer@@Base+0x7c>
   17f1c:	mov	r6, r0
   17f20:	ldr	r0, [r5, #184]	; 0xb8
   17f24:	cmp	r0, #0
   17f28:	beq	17f88 <flatcc_builder_finalize_buffer@@Base+0x9c>
   17f2c:	add	r0, r5, #188	; 0xbc
   17f30:	mov	r1, r6
   17f34:	mov	r2, r4
   17f38:	bl	185e4 <flatcc_emitter_copy_buffer@@Base>
   17f3c:	cmp	r0, #0
   17f40:	movne	r0, r6
   17f44:	popne	{r4, r5, r6, sl, fp, pc}
   17f48:	movw	r0, #36676	; 0x8f44
   17f4c:	movw	r1, #36080	; 0x8cf0
   17f50:	movw	r3, #40008	; 0x9c48
   17f54:	movw	r2, #1926	; 0x786
   17f58:	movt	r0, #1
   17f5c:	movt	r1, #1
   17f60:	movt	r3, #1
   17f64:	bl	12418 <__assert_fail@plt>
   17f68:	movw	r0, #40598	; 0x9e96
   17f6c:	movw	r1, #36080	; 0x8cf0
   17f70:	movw	r3, #40077	; 0x9c8d
   17f74:	movw	r2, #1944	; 0x798
   17f78:	movt	r0, #1
   17f7c:	movt	r1, #1
   17f80:	movt	r3, #1
   17f84:	bl	12418 <__assert_fail@plt>
   17f88:	movw	r0, #40598	; 0x9e96
   17f8c:	movw	r1, #36080	; 0x8cf0
   17f90:	movw	r3, #40077	; 0x9c8d
   17f94:	movw	r2, #1948	; 0x79c
   17f98:	movt	r0, #1
   17f9c:	movt	r1, #1
   17fa0:	movt	r3, #1
   17fa4:	bl	12418 <__assert_fail@plt>

00017fa8 <flatcc_builder_finalize_aligned_buffer@@Base>:
   17fa8:	push	{r4, r5, r6, r7, fp, lr}
   17fac:	add	fp, sp, #16
   17fb0:	sub	sp, sp, #8
   17fb4:	mov	r5, r0
   17fb8:	mov	r4, r1
   17fbc:	ldr	r0, [r0, #136]	; 0x88
   17fc0:	ldr	r1, [r5, #140]	; 0x8c
   17fc4:	cmp	r4, #0
   17fc8:	sub	r0, r1, r0
   17fcc:	mov	r1, #0
   17fd0:	strne	r0, [r4]
   17fd4:	ldrh	r2, [r5, #128]	; 0x80
   17fd8:	str	r1, [sp, #4]
   17fdc:	add	r0, r0, r2
   17fe0:	cmp	r2, #4
   17fe4:	mov	r1, r2
   17fe8:	rsb	r2, r2, #0
   17fec:	sub	r0, r0, #1
   17ff0:	movls	r1, #4
   17ff4:	and	r7, r0, r2
   17ff8:	add	r0, sp, #4
   17ffc:	mov	r2, r7
   18000:	bl	123e8 <posix_memalign@plt>
   18004:	ldr	r6, [sp, #4]
   18008:	cmp	r0, #0
   1800c:	cmpne	r6, #0
   18010:	bne	1804c <flatcc_builder_finalize_aligned_buffer@@Base+0xa4>
   18014:	cmp	r6, #0
   18018:	beq	18054 <flatcc_builder_finalize_aligned_buffer@@Base+0xac>
   1801c:	ldr	r0, [r5, #184]	; 0xb8
   18020:	cmp	r0, #0
   18024:	beq	1804c <flatcc_builder_finalize_aligned_buffer@@Base+0xa4>
   18028:	add	r0, r5, #188	; 0xbc
   1802c:	mov	r1, r6
   18030:	mov	r2, r7
   18034:	bl	185e4 <flatcc_emitter_copy_buffer@@Base>
   18038:	cmp	r0, #0
   1803c:	beq	1806c <flatcc_builder_finalize_aligned_buffer@@Base+0xc4>
   18040:	mov	r0, r6
   18044:	sub	sp, fp, #16
   18048:	pop	{r4, r5, r6, r7, fp, pc}
   1804c:	mov	r0, r6
   18050:	bl	1237c <free@plt>
   18054:	mov	r6, #0
   18058:	cmp	r4, #0
   1805c:	strne	r6, [r4]
   18060:	mov	r0, r6
   18064:	sub	sp, fp, #16
   18068:	pop	{r4, r5, r6, r7, fp, pc}
   1806c:	movw	r0, #36676	; 0x8f44
   18070:	movw	r1, #36080	; 0x8cf0
   18074:	movw	r3, #40008	; 0x9c48
   18078:	movw	r2, #1926	; 0x786
   1807c:	movt	r0, #1
   18080:	movt	r1, #1
   18084:	movt	r3, #1
   18088:	bl	12418 <__assert_fail@plt>

0001808c <flatcc_builder_aligned_alloc@@Base>:
   1808c:	push	{fp, lr}
   18090:	mov	fp, sp
   18094:	sub	sp, sp, #8
   18098:	mov	r2, r1
   1809c:	mov	r1, r0
   180a0:	mov	r0, #0
   180a4:	cmp	r1, #4
   180a8:	str	r0, [sp, #4]
   180ac:	add	r0, sp, #4
   180b0:	movls	r1, #4
   180b4:	bl	123e8 <posix_memalign@plt>
   180b8:	mov	r1, r0
   180bc:	ldr	r0, [sp, #4]
   180c0:	cmp	r1, #0
   180c4:	cmpne	r0, #0
   180c8:	bne	180d4 <flatcc_builder_aligned_alloc@@Base+0x48>
   180cc:	mov	sp, fp
   180d0:	pop	{fp, pc}
   180d4:	bl	1237c <free@plt>
   180d8:	mov	r0, #0
   180dc:	str	r0, [sp, #4]
   180e0:	mov	sp, fp
   180e4:	pop	{fp, pc}

000180e8 <flatcc_builder_aligned_free@@Base>:
   180e8:	b	1237c <free@plt>

000180ec <flatcc_builder_get_emit_context@@Base>:
   180ec:	ldr	r0, [r0, #36]	; 0x24
   180f0:	bx	lr

000180f4 <flatcc_emitter_recycle_page@@Base>:
   180f4:	ldr	r3, [r0]
   180f8:	mov	r2, r0
   180fc:	mvn	r0, #0
   18100:	cmp	r3, r1
   18104:	beq	18144 <flatcc_emitter_recycle_page@@Base+0x50>
   18108:	ldr	r2, [r2, #4]
   1810c:	cmp	r2, r1
   18110:	bxeq	lr
   18114:	ldr	r0, [r1, #2944]	; 0xb80
   18118:	ldr	r2, [r1, #2948]	; 0xb84
   1811c:	str	r2, [r0, #2948]	; 0xb84
   18120:	ldr	r2, [r1, #2948]	; 0xb84
   18124:	str	r0, [r2, #2944]	; 0xb80
   18128:	ldr	r0, [r3, #2948]	; 0xb84
   1812c:	str	r3, [r1, #2944]	; 0xb80
   18130:	str	r0, [r1, #2948]	; 0xb84
   18134:	str	r1, [r0, #2944]	; 0xb80
   18138:	ldr	r0, [r1, #2944]	; 0xb80
   1813c:	str	r1, [r0, #2948]	; 0xb84
   18140:	mov	r0, #0
   18144:	bx	lr

00018148 <flatcc_emitter_reset@@Base>:
   18148:	push	{r4, sl, fp, lr}
   1814c:	add	fp, sp, #8
   18150:	ldr	r1, [r0]
   18154:	cmp	r1, #0
   18158:	beq	18210 <flatcc_emitter_reset@@Base+0xc8>
   1815c:	mov	r4, r0
   18160:	add	r2, r1, #1472	; 0x5c0
   18164:	mov	r0, #1472	; 0x5c0
   18168:	mov	r3, #0
   1816c:	stmib	r4, {r1, r2}
   18170:	str	r0, [r4, #12]
   18174:	str	r2, [r4, #16]
   18178:	str	r0, [r4, #20]
   1817c:	movw	r0, #64064	; 0xfa40
   18180:	movt	r0, #65535	; 0xffff
   18184:	str	r0, [r1, #2952]	; 0xb88
   18188:	ldr	r2, [r4, #32]
   1818c:	ldr	r0, [r4, #24]
   18190:	cmp	r2, #0
   18194:	moveq	r2, r0
   18198:	streq	r0, [r4, #32]
   1819c:	str	r3, [r4, #24]
   181a0:	add	r2, r2, r2, lsl #1
   181a4:	lsr	r2, r2, #2
   181a8:	add	r0, r2, r0, lsr #2
   181ac:	str	r0, [r4, #32]
   181b0:	ldr	r2, [r4, #28]
   181b4:	cmp	r2, r0, lsl #1
   181b8:	bls	18210 <flatcc_emitter_reset@@Base+0xc8>
   181bc:	mov	r2, r1
   181c0:	ldr	r0, [r2, #2944]!	; 0xb80
   181c4:	cmp	r0, r1
   181c8:	popeq	{r4, sl, fp, pc}
   181cc:	ldr	r3, [r0, #2944]	; 0xb80
   181d0:	str	r3, [r2]
   181d4:	ldr	r2, [r0, #2944]	; 0xb80
   181d8:	str	r1, [r2, #2948]	; 0xb84
   181dc:	bl	1237c <free@plt>
   181e0:	ldr	r0, [r4, #28]
   181e4:	ldr	r1, [r4, #32]
   181e8:	sub	r0, r0, #2944	; 0xb80
   181ec:	cmp	r0, r1, lsl #1
   181f0:	str	r0, [r4, #28]
   181f4:	bls	18210 <flatcc_emitter_reset@@Base+0xc8>
   181f8:	ldr	r1, [r4, #4]
   181fc:	ldr	r3, [r4]
   18200:	mov	r2, r1
   18204:	ldr	r0, [r2, #2944]!	; 0xb80
   18208:	cmp	r0, r3
   1820c:	bne	181cc <flatcc_emitter_reset@@Base+0x84>
   18210:	pop	{r4, sl, fp, pc}

00018214 <flatcc_emitter_clear@@Base>:
   18214:	push	{r4, r5, r6, sl, fp, lr}
   18218:	add	fp, sp, #16
   1821c:	ldr	r5, [r0]
   18220:	cmp	r5, #0
   18224:	beq	1827c <flatcc_emitter_clear@@Base+0x68>
   18228:	mov	r4, r0
   1822c:	ldr	r0, [r5, #2948]	; 0xb84
   18230:	mov	r6, #0
   18234:	str	r6, [r0, #2944]	; 0xb80
   18238:	ldr	r0, [r5, #2944]	; 0xb80
   1823c:	cmp	r0, #0
   18240:	beq	1825c <flatcc_emitter_clear@@Base+0x48>
   18244:	mov	r5, r0
   18248:	ldr	r0, [r0, #2948]	; 0xb84
   1824c:	bl	1237c <free@plt>
   18250:	ldr	r0, [r5, #2944]	; 0xb80
   18254:	cmp	r0, #0
   18258:	bne	18244 <flatcc_emitter_clear@@Base+0x30>
   1825c:	mov	r0, r5
   18260:	bl	1237c <free@plt>
   18264:	vmov.i32	q8, #0	; 0x00000000
   18268:	add	r0, r4, #16
   1826c:	vst1.32	{d16-d17}, [r0]
   18270:	mov	r0, #32
   18274:	vst1.32	{d16-d17}, [r4], r0
   18278:	str	r6, [r4]
   1827c:	pop	{r4, r5, r6, sl, fp, pc}

00018280 <flatcc_emitter@@Base>:
   18280:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18284:	add	fp, sp, #28
   18288:	sub	sp, sp, #4
   1828c:	mov	r6, r0
   18290:	mov	r7, r1
   18294:	ldr	r0, [r0, #24]
   18298:	ldr	r1, [fp, #8]
   1829c:	mov	r4, r2
   182a0:	cmn	r3, #1
   182a4:	mov	r9, r6
   182a8:	add	r0, r0, r1
   182ac:	str	r0, [r6, #24]
   182b0:	ble	18418 <flatcc_emitter@@Base+0x198>
   182b4:	ldr	r0, [r9, #20]!
   182b8:	cmp	r0, r1
   182bc:	bcs	18578 <flatcc_emitter@@Base+0x2f8>
   182c0:	mov	r8, #0
   182c4:	cmp	r4, #0
   182c8:	beq	185d8 <flatcc_emitter@@Base+0x358>
   182cc:	movw	sl, #64064	; 0xfa40
   182d0:	movt	sl, #65535	; 0xffff
   182d4:	ldr	r8, [r7, #4]
   182d8:	cmp	r8, #0
   182dc:	beq	183fc <flatcc_emitter@@Base+0x17c>
   182e0:	ldr	r9, [r7]
   182e4:	cmp	r8, r0
   182e8:	mov	r5, r8
   182ec:	bls	182f8 <flatcc_emitter@@Base+0x78>
   182f0:	b	18338 <flatcc_emitter@@Base+0xb8>
   182f4:	mov	r5, r8
   182f8:	ldr	r0, [r6, #16]
   182fc:	mov	r1, r9
   18300:	mov	r2, r5
   18304:	bl	12388 <memcpy@plt>
   18308:	ldr	r0, [r6, #16]
   1830c:	ldr	r1, [r6, #20]
   18310:	add	r9, r9, r5
   18314:	subs	r8, r8, r5
   18318:	add	r2, r0, r5
   1831c:	sub	r0, r1, r5
   18320:	str	r2, [r6, #16]
   18324:	str	r0, [r6, #20]
   18328:	beq	183fc <flatcc_emitter@@Base+0x17c>
   1832c:	cmp	r8, r0
   18330:	mov	r5, r8
   18334:	bls	182f8 <flatcc_emitter@@Base+0x78>
   18338:	mov	r5, r0
   1833c:	cmp	r5, #0
   18340:	beq	1838c <flatcc_emitter@@Base+0x10c>
   18344:	b	182f8 <flatcc_emitter@@Base+0x78>
   18348:	ldr	r1, [r6]
   1834c:	str	r1, [r0, #2944]	; 0xb80
   18350:	str	r5, [r0, #2948]	; 0xb84
   18354:	str	r0, [r1, #2948]	; 0xb84
   18358:	str	r0, [r5, #2944]	; 0xb80
   1835c:	mov	r5, #2944	; 0xb80
   18360:	str	r0, [r6, #4]
   18364:	str	r0, [r6, #16]
   18368:	str	r5, [r6, #20]
   1836c:	ldr	r1, [r0, #2948]	; 0xb84
   18370:	ldr	r1, [r1, #2952]	; 0xb88
   18374:	add	r1, r1, #2944	; 0xb80
   18378:	str	r1, [r0, #2952]	; 0xb88
   1837c:	cmp	r8, r5
   18380:	bls	182f4 <flatcc_emitter@@Base+0x74>
   18384:	cmp	r5, #0
   18388:	bne	182f8 <flatcc_emitter@@Base+0x78>
   1838c:	ldr	r5, [r6, #4]
   18390:	cmp	r5, #0
   18394:	beq	183a8 <flatcc_emitter@@Base+0x128>
   18398:	ldr	r0, [r5, #2944]	; 0xb80
   1839c:	ldr	r1, [r6]
   183a0:	cmp	r0, r1
   183a4:	bne	1835c <flatcc_emitter@@Base+0xdc>
   183a8:	movw	r0, #2956	; 0xb8c
   183ac:	bl	123ac <malloc@plt>
   183b0:	cmp	r0, #0
   183b4:	beq	18588 <flatcc_emitter@@Base+0x308>
   183b8:	ldr	r1, [r6, #28]
   183bc:	cmp	r5, #0
   183c0:	add	r1, r1, #2944	; 0xb80
   183c4:	str	r1, [r6, #28]
   183c8:	bne	18348 <flatcc_emitter@@Base+0xc8>
   183cc:	add	r1, r0, #1472	; 0x5c0
   183d0:	mov	r5, #1472	; 0x5c0
   183d4:	str	r0, [r6]
   183d8:	stmib	r6, {r0, r1, r5}
   183dc:	str	r1, [r6, #16]
   183e0:	str	r5, [r6, #20]
   183e4:	str	r0, [r0, #2944]	; 0xb80
   183e8:	str	r0, [r0, #2948]	; 0xb84
   183ec:	str	sl, [r0, #2952]	; 0xb88
   183f0:	cmp	r8, r5
   183f4:	bhi	18384 <flatcc_emitter@@Base+0x104>
   183f8:	b	182f4 <flatcc_emitter@@Base+0x74>
   183fc:	subs	r4, r4, #1
   18400:	add	r7, r7, #8
   18404:	bne	182d4 <flatcc_emitter@@Base+0x54>
   18408:	mov	r8, #0
   1840c:	mov	r0, r8
   18410:	sub	sp, fp, #28
   18414:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18418:	ldr	r0, [r9, #12]!
   1841c:	cmp	r0, r1
   18420:	bcs	18598 <flatcc_emitter@@Base+0x318>
   18424:	mov	r8, #0
   18428:	cmp	r4, #0
   1842c:	beq	185d8 <flatcc_emitter@@Base+0x358>
   18430:	add	r0, r7, r4, lsl #3
   18434:	ldr	sl, [r0, #-4]
   18438:	sub	r1, r0, #8
   1843c:	str	r1, [sp]
   18440:	cmp	sl, #0
   18444:	beq	18568 <flatcc_emitter@@Base+0x2e8>
   18448:	ldr	r0, [sp]
   1844c:	ldr	r0, [r0]
   18450:	add	r7, r0, sl
   18454:	ldr	r1, [r9]
   18458:	cmp	sl, r1
   1845c:	bhi	1849c <flatcc_emitter@@Base+0x21c>
   18460:	b	18538 <flatcc_emitter@@Base+0x2b8>
   18464:	ldr	r1, [r5, #2952]	; 0xb88
   18468:	sub	r1, r1, #2944	; 0xb80
   1846c:	str	r1, [r0, #2952]	; 0xb88
   18470:	mov	r1, #2944	; 0xb80
   18474:	add	r2, r0, #2944	; 0xb80
   18478:	str	r0, [r6]
   1847c:	str	r2, [r6, #8]
   18480:	str	r1, [r6, #12]
   18484:	ldr	r2, [r0, #2944]	; 0xb80
   18488:	ldr	r2, [r2, #2952]	; 0xb88
   1848c:	sub	r2, r2, #2944	; 0xb80
   18490:	str	r2, [r0, #2952]	; 0xb88
   18494:	cmp	sl, r1
   18498:	bls	18538 <flatcc_emitter@@Base+0x2b8>
   1849c:	cmp	r1, #0
   184a0:	mov	r5, r1
   184a4:	bne	1853c <flatcc_emitter@@Base+0x2bc>
   184a8:	ldr	r5, [r6]
   184ac:	cmp	r5, #0
   184b0:	beq	184c4 <flatcc_emitter@@Base+0x244>
   184b4:	ldr	r0, [r5, #2948]	; 0xb84
   184b8:	ldr	r1, [r6, #4]
   184bc:	cmp	r0, r1
   184c0:	bne	18464 <flatcc_emitter@@Base+0x1e4>
   184c4:	movw	r0, #2956	; 0xb8c
   184c8:	bl	123ac <malloc@plt>
   184cc:	cmp	r0, #0
   184d0:	beq	18588 <flatcc_emitter@@Base+0x308>
   184d4:	ldr	r1, [r6, #28]
   184d8:	cmp	r5, #0
   184dc:	add	r1, r1, #2944	; 0xb80
   184e0:	str	r1, [r6, #28]
   184e4:	beq	18500 <flatcc_emitter@@Base+0x280>
   184e8:	ldr	r1, [r6, #4]
   184ec:	str	r5, [r0, #2944]	; 0xb80
   184f0:	str	r1, [r0, #2948]	; 0xb84
   184f4:	str	r0, [r5, #2948]	; 0xb84
   184f8:	str	r0, [r1, #2944]	; 0xb80
   184fc:	b	18470 <flatcc_emitter@@Base+0x1f0>
   18500:	add	r2, r0, #1472	; 0x5c0
   18504:	mov	r1, #1472	; 0x5c0
   18508:	str	r0, [r6]
   1850c:	stmib	r6, {r0, r2}
   18510:	str	r1, [r6, #12]
   18514:	str	r2, [r6, #16]
   18518:	movw	r2, #64064	; 0xfa40
   1851c:	str	r1, [r6, #20]
   18520:	str	r0, [r0, #2944]	; 0xb80
   18524:	str	r0, [r0, #2948]	; 0xb84
   18528:	movt	r2, #65535	; 0xffff
   1852c:	str	r2, [r0, #2952]	; 0xb88
   18530:	cmp	sl, r1
   18534:	bhi	1849c <flatcc_emitter@@Base+0x21c>
   18538:	mov	r5, sl
   1853c:	sub	r0, r1, r5
   18540:	sub	r7, r7, r5
   18544:	mov	r2, r5
   18548:	str	r0, [r6, #12]
   1854c:	mov	r1, r7
   18550:	ldr	r0, [r6, #8]
   18554:	sub	r0, r0, r5
   18558:	str	r0, [r6, #8]
   1855c:	bl	12388 <memcpy@plt>
   18560:	subs	sl, sl, r5
   18564:	bne	18454 <flatcc_emitter@@Base+0x1d4>
   18568:	ldr	r0, [sp]
   1856c:	subs	r4, r4, #1
   18570:	bne	18434 <flatcc_emitter@@Base+0x1b4>
   18574:	b	185d8 <flatcc_emitter@@Base+0x358>
   18578:	ldr	r5, [r6, #16]
   1857c:	add	r2, r5, r1
   18580:	str	r2, [r6, #16]
   18584:	b	185a4 <flatcc_emitter@@Base+0x324>
   18588:	mvn	r8, #0
   1858c:	mov	r0, r8
   18590:	sub	sp, fp, #28
   18594:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18598:	ldr	r2, [r6, #8]
   1859c:	sub	r5, r2, r1
   185a0:	str	r5, [r6, #8]
   185a4:	sub	r0, r0, r1
   185a8:	mov	r8, #0
   185ac:	cmp	r4, #0
   185b0:	str	r0, [r9]
   185b4:	beq	185d8 <flatcc_emitter@@Base+0x358>
   185b8:	ldm	r7, {r1, r2}
   185bc:	mov	r0, r5
   185c0:	bl	12388 <memcpy@plt>
   185c4:	ldr	r0, [r7, #4]
   185c8:	add	r7, r7, #8
   185cc:	subs	r4, r4, #1
   185d0:	add	r5, r5, r0
   185d4:	bne	185b8 <flatcc_emitter@@Base+0x338>
   185d8:	mov	r0, r8
   185dc:	sub	sp, fp, #28
   185e0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

000185e4 <flatcc_emitter_copy_buffer@@Base>:
   185e4:	push	{r4, r5, r6, sl, fp, lr}
   185e8:	add	fp, sp, #16
   185ec:	mov	r3, r2
   185f0:	ldr	r2, [r0, #24]
   185f4:	mov	r5, #0
   185f8:	cmp	r2, r3
   185fc:	bhi	18684 <flatcc_emitter_copy_buffer@@Base+0xa0>
   18600:	mov	r4, r0
   18604:	ldr	r0, [r0]
   18608:	cmp	r0, #0
   1860c:	beq	18684 <flatcc_emitter_copy_buffer@@Base+0xa0>
   18610:	mov	r6, r1
   18614:	ldr	r1, [r4, #4]
   18618:	cmp	r0, r1
   1861c:	beq	1868c <flatcc_emitter_copy_buffer@@Base+0xa8>
   18620:	ldr	r0, [r4, #12]
   18624:	ldr	r1, [r4, #8]
   18628:	rsb	r5, r0, #2944	; 0xb80
   1862c:	mov	r0, r6
   18630:	mov	r2, r5
   18634:	bl	12388 <memcpy@plt>
   18638:	ldm	r4, {r0, r1}
   1863c:	add	r5, r6, r5
   18640:	ldr	r6, [r0, #2944]	; 0xb80
   18644:	cmp	r6, r1
   18648:	beq	18670 <flatcc_emitter_copy_buffer@@Base+0x8c>
   1864c:	mov	r0, r5
   18650:	mov	r1, r6
   18654:	mov	r2, #2944	; 0xb80
   18658:	bl	12388 <memcpy@plt>
   1865c:	ldr	r6, [r6, #2944]	; 0xb80
   18660:	ldr	r0, [r4, #4]
   18664:	add	r5, r5, #2944	; 0xb80
   18668:	cmp	r6, r0
   1866c:	bne	1864c <flatcc_emitter_copy_buffer@@Base+0x68>
   18670:	ldr	r0, [r4, #20]
   18674:	mov	r1, r6
   18678:	rsb	r2, r0, #2944	; 0xb80
   1867c:	mov	r0, r5
   18680:	bl	12388 <memcpy@plt>
   18684:	mov	r0, r5
   18688:	pop	{r4, r5, r6, sl, fp, pc}
   1868c:	ldr	r1, [r4, #8]
   18690:	mov	r0, r6
   18694:	bl	12388 <memcpy@plt>
   18698:	mov	r0, r6
   1869c:	pop	{r4, r5, r6, sl, fp, pc}

000186a0 <__libc_csu_init@@Base>:
   186a0:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   186a4:	mov	r7, r0
   186a8:	ldr	r6, [pc, #72]	; 186f8 <__libc_csu_init@@Base+0x58>
   186ac:	ldr	r5, [pc, #72]	; 186fc <__libc_csu_init@@Base+0x5c>
   186b0:	add	r6, pc, r6
   186b4:	add	r5, pc, r5
   186b8:	sub	r6, r6, r5
   186bc:	mov	r8, r1
   186c0:	mov	r9, r2
   186c4:	bl	12350 <strcmp@plt-0x20>
   186c8:	asrs	r6, r6, #2
   186cc:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   186d0:	mov	r4, #0
   186d4:	add	r4, r4, #1
   186d8:	ldr	r3, [r5], #4
   186dc:	mov	r2, r9
   186e0:	mov	r1, r8
   186e4:	mov	r0, r7
   186e8:	blx	r3
   186ec:	cmp	r6, r4
   186f0:	bne	186d4 <__libc_csu_init@@Base+0x34>
   186f4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   186f8:	andeq	r2, r1, r4, asr r8
   186fc:	andeq	r2, r1, ip, asr #16

00018700 <__libc_csu_fini@@Base>:
   18700:	bx	lr

Disassembly of section .fini:

00018704 <.fini>:
   18704:	push	{r3, lr}
   18708:	pop	{r3, pc}
