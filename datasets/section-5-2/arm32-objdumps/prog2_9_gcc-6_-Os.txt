
../repos/prog2/9:     file format elf32-littlearm


Disassembly of section .init:

000109c4 <.init>:
   109c4:	push	{r3, lr}
   109c8:	bl	10d58 <_start@@Base+0x3c>
   109cc:	pop	{r3, pc}

Disassembly of section .plt:

000109d0 <calloc@plt-0x14>:
   109d0:	push	{lr}		; (str lr, [sp, #-4]!)
   109d4:	ldr	lr, [pc, #4]	; 109e0 <calloc@plt-0x4>
   109d8:	add	lr, pc, lr
   109dc:	ldr	pc, [lr, #8]!
   109e0:	andeq	r1, r1, r0, lsr #12

000109e4 <calloc@plt>:
   109e4:	add	ip, pc, #0, 12
   109e8:	add	ip, ip, #69632	; 0x11000
   109ec:	ldr	pc, [ip, #1568]!	; 0x620

000109f0 <strcmp@plt>:
   109f0:	add	ip, pc, #0, 12
   109f4:	add	ip, ip, #69632	; 0x11000
   109f8:	ldr	pc, [ip, #1560]!	; 0x618

000109fc <printf@plt>:
   109fc:	add	ip, pc, #0, 12
   10a00:	add	ip, ip, #69632	; 0x11000
   10a04:	ldr	pc, [ip, #1552]!	; 0x610

00010a08 <__isoc99_fscanf@plt>:
   10a08:	add	ip, pc, #0, 12
   10a0c:	add	ip, ip, #69632	; 0x11000
   10a10:	ldr	pc, [ip, #1544]!	; 0x608

00010a14 <fopen@plt>:
   10a14:	add	ip, pc, #0, 12
   10a18:	add	ip, ip, #69632	; 0x11000
   10a1c:	ldr	pc, [ip, #1536]!	; 0x600

00010a20 <fflush@plt>:
   10a20:	add	ip, pc, #0, 12
   10a24:	add	ip, ip, #69632	; 0x11000
   10a28:	ldr	pc, [ip, #1528]!	; 0x5f8

00010a2c <free@plt>:
   10a2c:	add	ip, pc, #0, 12
   10a30:	add	ip, ip, #69632	; 0x11000
   10a34:	ldr	pc, [ip, #1520]!	; 0x5f0

00010a38 <fgets@plt>:
   10a38:	add	ip, pc, #0, 12
   10a3c:	add	ip, ip, #69632	; 0x11000
   10a40:	ldr	pc, [ip, #1512]!	; 0x5e8

00010a44 <strdup@plt>:
   10a44:	add	ip, pc, #0, 12
   10a48:	add	ip, ip, #69632	; 0x11000
   10a4c:	ldr	pc, [ip, #1504]!	; 0x5e0

00010a50 <puts@plt>:
   10a50:	add	ip, pc, #0, 12
   10a54:	add	ip, ip, #69632	; 0x11000
   10a58:	ldr	pc, [ip, #1496]!	; 0x5d8

00010a5c <malloc@plt>:
   10a5c:	add	ip, pc, #0, 12
   10a60:	add	ip, ip, #69632	; 0x11000
   10a64:	ldr	pc, [ip, #1488]!	; 0x5d0

00010a68 <__libc_start_main@plt>:
   10a68:	add	ip, pc, #0, 12
   10a6c:	add	ip, ip, #69632	; 0x11000
   10a70:	ldr	pc, [ip, #1480]!	; 0x5c8

00010a74 <__gmon_start__@plt>:
   10a74:	add	ip, pc, #0, 12
   10a78:	add	ip, ip, #69632	; 0x11000
   10a7c:	ldr	pc, [ip, #1472]!	; 0x5c0

00010a80 <feof@plt>:
   10a80:	add	ip, pc, #0, 12
   10a84:	add	ip, ip, #69632	; 0x11000
   10a88:	ldr	pc, [ip, #1464]!	; 0x5b8

00010a8c <strlen@plt>:
   10a8c:	add	ip, pc, #0, 12
   10a90:	add	ip, ip, #69632	; 0x11000
   10a94:	ldr	pc, [ip, #1456]!	; 0x5b0

00010a98 <putchar@plt>:
   10a98:	add	ip, pc, #0, 12
   10a9c:	add	ip, ip, #69632	; 0x11000
   10aa0:	ldr	pc, [ip, #1448]!	; 0x5a8

00010aa4 <fclose@plt>:
   10aa4:	add	ip, pc, #0, 12
   10aa8:	add	ip, ip, #69632	; 0x11000
   10aac:	ldr	pc, [ip, #1440]!	; 0x5a0

00010ab0 <abort@plt>:
   10ab0:	add	ip, pc, #0, 12
   10ab4:	add	ip, ip, #69632	; 0x11000
   10ab8:	ldr	pc, [ip, #1432]!	; 0x598

Disassembly of section .text:

00010abc <main@@Base>:
   10abc:	push	{r4, r5, r6, r7, r8, lr}
   10ac0:	mov	r0, #42	; 0x2a
   10ac4:	bl	11148 <vetor_cria@@Base>
   10ac8:	ldr	r4, [pc, #508]	; 10ccc <main@@Base+0x210>
   10acc:	mov	r5, r0
   10ad0:	ldr	r0, [pc, #504]	; 10cd0 <main@@Base+0x214>
   10ad4:	bl	10a50 <puts@plt>
   10ad8:	ldr	r1, [pc, #500]	; 10cd4 <main@@Base+0x218>
   10adc:	mov	r0, r5
   10ae0:	bl	10f54 <fp_carrega@@Base>
   10ae4:	ldr	r1, [r4]
   10ae8:	ldr	r0, [pc, #488]	; 10cd8 <main@@Base+0x21c>
   10aec:	bl	109fc <printf@plt>
   10af0:	mov	r0, r5
   10af4:	bl	112e8 <vetor_imprime@@Base>
   10af8:	ldr	r6, [r5]
   10afc:	cmp	r6, #42	; 0x2a
   10b00:	ldrne	r0, [pc, #468]	; 10cdc <main@@Base+0x220>
   10b04:	bne	10b28 <main@@Base+0x6c>
   10b08:	mov	r0, r5
   10b0c:	bl	10ee8 <fp_remove@@Base>
   10b10:	mov	r1, r0
   10b14:	ldr	r0, [pc, #452]	; 10ce0 <main@@Base+0x224>
   10b18:	bl	109f0 <strcmp@plt>
   10b1c:	subs	r7, r0, #0
   10b20:	beq	10b38 <main@@Base+0x7c>
   10b24:	ldr	r0, [pc, #440]	; 10ce4 <main@@Base+0x228>
   10b28:	bl	10a50 <puts@plt>
   10b2c:	mov	r5, #1
   10b30:	mov	r0, r5
   10b34:	pop	{r4, r5, r6, r7, r8, pc}
   10b38:	mov	r0, r5
   10b3c:	str	r7, [r4]
   10b40:	bl	10ee8 <fp_remove@@Base>
   10b44:	ldr	r1, [r4]
   10b48:	ldr	r0, [pc, #408]	; 10ce8 <main@@Base+0x22c>
   10b4c:	bl	109fc <printf@plt>
   10b50:	mov	r2, #99	; 0x63
   10b54:	ldr	r1, [pc, #400]	; 10cec <main@@Base+0x230>
   10b58:	mov	r0, r5
   10b5c:	str	r7, [r4]
   10b60:	bl	10e44 <fp_insere@@Base>
   10b64:	ldr	r1, [r4]
   10b68:	ldr	r0, [pc, #384]	; 10cf0 <main@@Base+0x234>
   10b6c:	bl	109fc <printf@plt>
   10b70:	mov	r0, r5
   10b74:	bl	10ee8 <fp_remove@@Base>
   10b78:	mov	r2, r7
   10b7c:	ldr	r1, [pc, #360]	; 10cec <main@@Base+0x230>
   10b80:	mov	r0, r5
   10b84:	str	r7, [r4]
   10b88:	bl	10e44 <fp_insere@@Base>
   10b8c:	ldr	r1, [r4]
   10b90:	ldr	r0, [pc, #348]	; 10cf4 <main@@Base+0x238>
   10b94:	bl	109fc <printf@plt>
   10b98:	mov	r0, r5
   10b9c:	bl	10ee8 <fp_remove@@Base>
   10ba0:	mov	r2, r6
   10ba4:	ldr	r1, [pc, #320]	; 10cec <main@@Base+0x230>
   10ba8:	mov	r0, r5
   10bac:	str	r7, [r4]
   10bb0:	bl	10e44 <fp_insere@@Base>
   10bb4:	ldr	r1, [r4]
   10bb8:	ldr	r0, [pc, #312]	; 10cf8 <main@@Base+0x23c>
   10bbc:	bl	109fc <printf@plt>
   10bc0:	ldr	r0, [pc, #308]	; 10cfc <main@@Base+0x240>
   10bc4:	bl	10a50 <puts@plt>
   10bc8:	mov	r0, r6
   10bcc:	bl	11198 <vetor_criaHeap@@Base>
   10bd0:	ldr	r2, [pc, #252]	; 10cd4 <main@@Base+0x218>
   10bd4:	ldr	r1, [pc, #292]	; 10d00 <main@@Base+0x244>
   10bd8:	mov	r8, r0
   10bdc:	bl	110a0 <heap_carrega@@Base>
   10be0:	ldr	r1, [r4]
   10be4:	ldr	r0, [pc, #280]	; 10d04 <main@@Base+0x248>
   10be8:	bl	109fc <printf@plt>
   10bec:	mov	r0, r8
   10bf0:	bl	11368 <vetor_imprimeHeap@@Base>
   10bf4:	ldr	r6, [r8]
   10bf8:	cmp	r6, #42	; 0x2a
   10bfc:	ldrne	r0, [pc, #260]	; 10d08 <main@@Base+0x24c>
   10c00:	bne	10b28 <main@@Base+0x6c>
   10c04:	mov	r1, r7
   10c08:	ldr	r0, [pc, #208]	; 10ce0 <main@@Base+0x224>
   10c0c:	bl	109f0 <strcmp@plt>
   10c10:	subs	r5, r0, #0
   10c14:	bne	10b24 <main@@Base+0x68>
   10c18:	mov	r1, r5
   10c1c:	ldr	r0, [pc, #232]	; 10d0c <main@@Base+0x250>
   10c20:	str	r5, [r4]
   10c24:	bl	109fc <printf@plt>
   10c28:	mov	r3, #99	; 0x63
   10c2c:	ldr	r2, [pc, #184]	; 10cec <main@@Base+0x230>
   10c30:	ldr	r1, [pc, #200]	; 10d00 <main@@Base+0x244>
   10c34:	mov	r0, r8
   10c38:	str	r5, [r4]
   10c3c:	bl	10ff4 <heap_insere@@Base>
   10c40:	ldr	r1, [r4]
   10c44:	ldr	r0, [pc, #196]	; 10d10 <main@@Base+0x254>
   10c48:	bl	109fc <printf@plt>
   10c4c:	mov	r3, r5
   10c50:	ldr	r2, [pc, #148]	; 10cec <main@@Base+0x230>
   10c54:	ldr	r1, [pc, #164]	; 10d00 <main@@Base+0x244>
   10c58:	mov	r0, r8
   10c5c:	str	r5, [r4]
   10c60:	bl	10ff4 <heap_insere@@Base>
   10c64:	ldr	r1, [r4]
   10c68:	ldr	r0, [pc, #164]	; 10d14 <main@@Base+0x258>
   10c6c:	bl	109fc <printf@plt>
   10c70:	mov	r3, r6
   10c74:	ldr	r2, [pc, #112]	; 10cec <main@@Base+0x230>
   10c78:	ldr	r1, [pc, #128]	; 10d00 <main@@Base+0x244>
   10c7c:	mov	r0, r8
   10c80:	str	r5, [r4]
   10c84:	bl	10ff4 <heap_insere@@Base>
   10c88:	ldr	r1, [r4]
   10c8c:	ldr	r0, [pc, #100]	; 10cf8 <main@@Base+0x23c>
   10c90:	bl	109fc <printf@plt>
   10c94:	mov	r0, r6
   10c98:	bl	11198 <vetor_criaHeap@@Base>
   10c9c:	ldr	r2, [pc, #48]	; 10cd4 <main@@Base+0x218>
   10ca0:	ldr	r1, [pc, #112]	; 10d18 <main@@Base+0x25c>
   10ca4:	bl	110a0 <heap_carrega@@Base>
   10ca8:	ldr	r1, [r4]
   10cac:	ldr	r0, [pc, #80]	; 10d04 <main@@Base+0x248>
   10cb0:	bl	109fc <printf@plt>
   10cb4:	mov	r4, r5
   10cb8:	mov	r0, r4
   10cbc:	bl	10a50 <puts@plt>
   10cc0:	subs	r6, r6, #1
   10cc4:	bne	10cb8 <main@@Base+0x1fc>
   10cc8:	b	10b30 <main@@Base+0x74>
   10ccc:	andeq	r2, r2, r8, rrx
   10cd0:	andeq	r1, r1, sp, ror r4
   10cd4:			; <UNDEFINED> instruction: 0x000114b4
   10cd8:			; <UNDEFINED> instruction: 0x000114be
   10cdc:	strdeq	r1, [r1], -r5
   10ce0:	andeq	r1, r1, fp, lsl r5
   10ce4:	andeq	r1, r1, sp, lsr #10
   10ce8:	andeq	r1, r1, r1, ror r5
   10cec:	andeq	r1, r1, r5, lsr #11
   10cf0:			; <UNDEFINED> instruction: 0x000115b3
   10cf4:	strdeq	r1, [r1], -sl
   10cf8:	andeq	r1, r1, r1, asr #12
   10cfc:	andeq	r1, r1, r7, lsl #13
   10d00:	andeq	r1, r1, ip, lsl r2
   10d04:			; <UNDEFINED> instruction: 0x000116bf
   10d08:	strdeq	r1, [r1], -r6
   10d0c:	andeq	r1, r1, sp, lsl r7
   10d10:	andeq	r1, r1, r1, asr r7
   10d14:	muleq	r1, r8, r7
   10d18:	andeq	r1, r1, r4, lsl #5

00010d1c <_start@@Base>:
   10d1c:	mov	fp, #0
   10d20:	mov	lr, #0
   10d24:	pop	{r1}		; (ldr r1, [sp], #4)
   10d28:	mov	r2, sp
   10d2c:	push	{r2}		; (str r2, [sp, #-4]!)
   10d30:	push	{r0}		; (str r0, [sp, #-4]!)
   10d34:	ldr	ip, [pc, #16]	; 10d4c <_start@@Base+0x30>
   10d38:	push	{ip}		; (str ip, [sp, #-4]!)
   10d3c:	ldr	r0, [pc, #12]	; 10d50 <_start@@Base+0x34>
   10d40:	ldr	r3, [pc, #12]	; 10d54 <_start@@Base+0x38>
   10d44:	bl	10a68 <__libc_start_main@plt>
   10d48:	bl	10ab0 <abort@plt>
   10d4c:	andeq	r1, r1, r8, asr #8
   10d50:			; <UNDEFINED> instruction: 0x00010abc
   10d54:	andeq	r1, r1, r8, ror #7
   10d58:	ldr	r3, [pc, #20]	; 10d74 <_start@@Base+0x58>
   10d5c:	ldr	r2, [pc, #20]	; 10d78 <_start@@Base+0x5c>
   10d60:	add	r3, pc, r3
   10d64:	ldr	r2, [r3, r2]
   10d68:	cmp	r2, #0
   10d6c:	bxeq	lr
   10d70:	b	10a74 <__gmon_start__@plt>
   10d74:	muleq	r1, r8, r2
   10d78:	andeq	r0, r0, r4, asr r0
   10d7c:	ldr	r3, [pc, #28]	; 10da0 <_start@@Base+0x84>
   10d80:	ldr	r0, [pc, #28]	; 10da4 <_start@@Base+0x88>
   10d84:	sub	r3, r3, r0
   10d88:	cmp	r3, #6
   10d8c:	bxls	lr
   10d90:	ldr	r3, [pc, #16]	; 10da8 <_start@@Base+0x8c>
   10d94:	cmp	r3, #0
   10d98:	bxeq	lr
   10d9c:	bx	r3
   10da0:	andeq	r2, r2, r3, rrx
   10da4:	andeq	r2, r2, r0, rrx
   10da8:	andeq	r0, r0, r0
   10dac:	ldr	r1, [pc, #36]	; 10dd8 <_start@@Base+0xbc>
   10db0:	ldr	r0, [pc, #36]	; 10ddc <_start@@Base+0xc0>
   10db4:	sub	r1, r1, r0
   10db8:	asr	r1, r1, #2
   10dbc:	add	r1, r1, r1, lsr #31
   10dc0:	asrs	r1, r1, #1
   10dc4:	bxeq	lr
   10dc8:	ldr	r3, [pc, #16]	; 10de0 <_start@@Base+0xc4>
   10dcc:	cmp	r3, #0
   10dd0:	bxeq	lr
   10dd4:	bx	r3
   10dd8:	andeq	r2, r2, r0, rrx
   10ddc:	andeq	r2, r2, r0, rrx
   10de0:	andeq	r0, r0, r0
   10de4:	push	{r4, lr}
   10de8:	ldr	r4, [pc, #24]	; 10e08 <_start@@Base+0xec>
   10dec:	ldrb	r3, [r4]
   10df0:	cmp	r3, #0
   10df4:	popne	{r4, pc}
   10df8:	bl	10d7c <_start@@Base+0x60>
   10dfc:	mov	r3, #1
   10e00:	strb	r3, [r4]
   10e04:	pop	{r4, pc}
   10e08:	andeq	r2, r2, r4, rrx
   10e0c:	ldr	r0, [pc, #40]	; 10e3c <_start@@Base+0x120>
   10e10:	ldr	r3, [r0]
   10e14:	cmp	r3, #0
   10e18:	bne	10e20 <_start@@Base+0x104>
   10e1c:	b	10dac <_start@@Base+0x90>
   10e20:	ldr	r3, [pc, #24]	; 10e40 <_start@@Base+0x124>
   10e24:	cmp	r3, #0
   10e28:	beq	10e1c <_start@@Base+0x100>
   10e2c:	push	{r4, lr}
   10e30:	blx	r3
   10e34:	pop	{r4, lr}
   10e38:	b	10dac <_start@@Base+0x90>
   10e3c:	andeq	r1, r2, r4, lsl pc
   10e40:	andeq	r0, r0, r0

00010e44 <fp_insere@@Base>:
   10e44:	push	{r4, r5, r6, lr}
   10e48:	subs	r4, r0, #0
   10e4c:	beq	10ed8 <fp_insere@@Base+0x94>
   10e50:	ldm	r4, {r0, r3}
   10e54:	cmp	r0, r3
   10e58:	beq	10ee0 <fp_insere@@Base+0x9c>
   10e5c:	mov	r0, r2
   10e60:	bl	111e8 <elemento_cria@@Base>
   10e64:	mov	r5, #0
   10e68:	mov	r6, r0
   10e6c:	ldr	r3, [r4]
   10e70:	cmp	r5, r3
   10e74:	bge	10e90 <fp_insere@@Base+0x4c>
   10e78:	ldr	r3, [r4, #8]
   10e7c:	mov	r1, r6
   10e80:	ldr	r0, [r3, r5, lsl #2]
   10e84:	bl	1121c <maior_que@@Base>
   10e88:	cmp	r0, #0
   10e8c:	bne	10ebc <fp_insere@@Base+0x78>
   10e90:	ldr	r2, [r4]
   10e94:	mov	r1, r2
   10e98:	lsl	r0, r2, #2
   10e9c:	cmp	r5, r1
   10ea0:	ldr	r3, [r4, #8]
   10ea4:	ble	10ec4 <fp_insere@@Base+0x80>
   10ea8:	add	r2, r2, #1
   10eac:	str	r6, [r3, r5, lsl #2]
   10eb0:	mov	r0, #1
   10eb4:	str	r2, [r4]
   10eb8:	pop	{r4, r5, r6, pc}
   10ebc:	add	r5, r5, #1
   10ec0:	b	10e6c <fp_insere@@Base+0x28>
   10ec4:	ldr	ip, [r3, r0]!
   10ec8:	sub	r1, r1, #1
   10ecc:	str	ip, [r3, #4]
   10ed0:	sub	r0, r0, #4
   10ed4:	b	10e9c <fp_insere@@Base+0x58>
   10ed8:	mvn	r0, #0
   10edc:	pop	{r4, r5, r6, pc}
   10ee0:	mov	r0, #0
   10ee4:	pop	{r4, r5, r6, pc}

00010ee8 <fp_remove@@Base>:
   10ee8:	subs	r2, r0, #0
   10eec:	beq	10f0c <fp_remove@@Base+0x24>
   10ef0:	ldr	r0, [r2]
   10ef4:	cmp	r0, #0
   10ef8:	movne	r1, #0
   10efc:	ldrne	r3, [r2, #8]
   10f00:	ldrne	ip, [r3]
   10f04:	bne	10f14 <fp_remove@@Base+0x2c>
   10f08:	bx	lr
   10f0c:	mov	r0, r2
   10f10:	bx	lr
   10f14:	cmp	r1, r0
   10f18:	blt	10f2c <fp_remove@@Base+0x44>
   10f1c:	sub	r3, r0, #1
   10f20:	str	r3, [r2]
   10f24:	ldr	r0, [ip, #4]
   10f28:	bx	lr
   10f2c:	push	{lr}		; (str lr, [sp, #-4]!)
   10f30:	add	r1, r1, #1
   10f34:	ldr	lr, [r3, #4]
   10f38:	cmp	r1, r0
   10f3c:	str	lr, [r3], #4
   10f40:	blt	10f30 <fp_remove@@Base+0x48>
   10f44:	sub	r3, r0, #1
   10f48:	str	r3, [r2]
   10f4c:	ldr	r0, [ip, #4]
   10f50:	pop	{pc}		; (ldr pc, [sp], #4)

00010f54 <fp_carrega@@Base>:
   10f54:	push	{r4, r5, r6, r7, lr}
   10f58:	mov	r6, r0
   10f5c:	sub	sp, sp, #268	; 0x10c
   10f60:	mov	r0, r1
   10f64:	ldr	r1, [pc, #124]	; 10fe8 <fp_carrega@@Base+0x94>
   10f68:	bl	10a14 <fopen@plt>
   10f6c:	subs	r4, r0, #0
   10f70:	ldrne	r7, [pc, #116]	; 10fec <fp_carrega@@Base+0x98>
   10f74:	bne	10fcc <fp_carrega@@Base+0x78>
   10f78:	ldr	r0, [pc, #112]	; 10ff0 <fp_carrega@@Base+0x9c>
   10f7c:	bl	10a50 <puts@plt>
   10f80:	add	sp, sp, #268	; 0x10c
   10f84:	pop	{r4, r5, r6, r7, pc}
   10f88:	add	r2, sp, #4
   10f8c:	mov	r1, r7
   10f90:	mov	r0, r4
   10f94:	bl	10a08 <__isoc99_fscanf@plt>
   10f98:	mov	r2, r4
   10f9c:	mov	r1, #256	; 0x100
   10fa0:	add	r0, sp, #8
   10fa4:	bl	10a38 <fgets@plt>
   10fa8:	add	r0, sp, #8
   10fac:	bl	10a8c <strlen@plt>
   10fb0:	add	r3, sp, #264	; 0x108
   10fb4:	ldr	r2, [sp, #4]
   10fb8:	add	r1, sp, #8
   10fbc:	add	r0, r3, r0
   10fc0:	strb	r5, [r0, #-257]	; 0xfffffeff
   10fc4:	mov	r0, r6
   10fc8:	bl	10e44 <fp_insere@@Base>
   10fcc:	mov	r0, r4
   10fd0:	bl	10a80 <feof@plt>
   10fd4:	subs	r5, r0, #0
   10fd8:	beq	10f88 <fp_carrega@@Base+0x34>
   10fdc:	mov	r0, r4
   10fe0:	bl	10aa4 <fclose@plt>
   10fe4:	b	10f80 <fp_carrega@@Base+0x2c>
   10fe8:			; <UNDEFINED> instruction: 0x000114b2
   10fec:	andeq	r1, r1, r9, ror r4
   10ff0:	andeq	r1, r1, r8, asr r4

00010ff4 <heap_insere@@Base>:
   10ff4:	push	{r4, r5, r6, r7, r8, lr}
   10ff8:	ldr	ip, [r0, #4]
   10ffc:	ldr	lr, [r0]
   11000:	cmp	lr, ip
   11004:	moveq	r5, #0
   11008:	beq	1105c <heap_insere@@Base+0x68>
   1100c:	mov	r6, r1
   11010:	mov	r4, r0
   11014:	mov	r1, r2
   11018:	mov	r0, r3
   1101c:	bl	111e8 <elemento_cria@@Base>
   11020:	mov	r5, #0
   11024:	mov	r7, r0
   11028:	ldr	r3, [r4]
   1102c:	cmp	r5, r3
   11030:	blt	11064 <heap_insere@@Base+0x70>
   11034:	lsl	r1, r5, #2
   11038:	mov	r0, r1
   1103c:	mov	r2, r5
   11040:	cmp	r2, #0
   11044:	ldr	r3, [r4, #8]
   11048:	bne	11084 <heap_insere@@Base+0x90>
   1104c:	str	r7, [r3, r1]
   11050:	ldr	r3, [r4]
   11054:	add	r3, r3, #1
   11058:	str	r3, [r4]
   1105c:	mov	r0, r5
   11060:	pop	{r4, r5, r6, r7, r8, pc}
   11064:	ldr	r3, [r4, #8]
   11068:	mov	r1, r7
   1106c:	ldr	r0, [r3, r5, lsl #2]
   11070:	blx	r6
   11074:	cmp	r0, #1
   11078:	beq	11034 <heap_insere@@Base+0x40>
   1107c:	add	r5, r5, #1
   11080:	b	11028 <heap_insere@@Base+0x34>
   11084:	ldr	ip, [r3, r0]!
   11088:	sub	r2, r2, #1
   1108c:	str	ip, [r3, #4]
   11090:	sub	r0, r0, #4
   11094:	b	11040 <heap_insere@@Base+0x4c>

00011098 <heap_remove@@Base>:
   11098:	mov	r0, #0
   1109c:	bx	lr

000110a0 <heap_carrega@@Base>:
   110a0:	push	{r4, r5, r6, r7, r8, lr}
   110a4:	mov	r6, r0
   110a8:	sub	sp, sp, #264	; 0x108
   110ac:	mov	r7, r1
   110b0:	mov	r0, r2
   110b4:	ldr	r1, [pc, #128]	; 1113c <heap_carrega@@Base+0x9c>
   110b8:	bl	10a14 <fopen@plt>
   110bc:	subs	r4, r0, #0
   110c0:	ldrne	r8, [pc, #120]	; 11140 <heap_carrega@@Base+0xa0>
   110c4:	bne	11120 <heap_carrega@@Base+0x80>
   110c8:	ldr	r0, [pc, #116]	; 11144 <heap_carrega@@Base+0xa4>
   110cc:	bl	10a50 <puts@plt>
   110d0:	add	sp, sp, #264	; 0x108
   110d4:	pop	{r4, r5, r6, r7, r8, pc}
   110d8:	add	r2, sp, #4
   110dc:	mov	r1, r8
   110e0:	mov	r0, r4
   110e4:	bl	10a08 <__isoc99_fscanf@plt>
   110e8:	mov	r2, r4
   110ec:	mov	r1, #256	; 0x100
   110f0:	add	r0, sp, #8
   110f4:	bl	10a38 <fgets@plt>
   110f8:	add	r0, sp, #8
   110fc:	bl	10a8c <strlen@plt>
   11100:	add	r3, sp, #264	; 0x108
   11104:	add	r2, sp, #8
   11108:	mov	r1, r7
   1110c:	add	r0, r3, r0
   11110:	ldr	r3, [sp, #4]
   11114:	strb	r5, [r0, #-257]	; 0xfffffeff
   11118:	mov	r0, r6
   1111c:	bl	10ff4 <heap_insere@@Base>
   11120:	mov	r0, r4
   11124:	bl	10a80 <feof@plt>
   11128:	subs	r5, r0, #0
   1112c:	beq	110d8 <heap_carrega@@Base+0x38>
   11130:	mov	r0, r4
   11134:	bl	10aa4 <fclose@plt>
   11138:	b	110d0 <heap_carrega@@Base+0x30>
   1113c:			; <UNDEFINED> instruction: 0x000114b2
   11140:	andeq	r1, r1, r9, ror r4
   11144:	andeq	r1, r1, r8, asr r4

00011148 <vetor_cria@@Base>:
   11148:	push	{r4, r5, r6, lr}
   1114c:	mov	r5, r0
   11150:	mov	r0, #12
   11154:	bl	10a5c <malloc@plt>
   11158:	subs	r4, r0, #0
   1115c:	beq	11190 <vetor_cria@@Base+0x48>
   11160:	mov	r3, #0
   11164:	mov	r0, r5
   11168:	stm	r4, {r3, r5}
   1116c:	mov	r1, #4
   11170:	bl	109e4 <calloc@plt>
   11174:	cmp	r0, #0
   11178:	mov	r5, r0
   1117c:	str	r0, [r4, #8]
   11180:	bne	11190 <vetor_cria@@Base+0x48>
   11184:	mov	r0, r4
   11188:	bl	10a2c <free@plt>
   1118c:	mov	r4, r5
   11190:	mov	r0, r4
   11194:	pop	{r4, r5, r6, pc}

00011198 <vetor_criaHeap@@Base>:
   11198:	push	{r4, r5, r6, lr}
   1119c:	mov	r5, r0
   111a0:	mov	r0, #12
   111a4:	bl	10a5c <malloc@plt>
   111a8:	subs	r4, r0, #0
   111ac:	beq	111e0 <vetor_criaHeap@@Base+0x48>
   111b0:	mov	r3, #0
   111b4:	add	r0, r5, #1
   111b8:	stm	r4, {r3, r5}
   111bc:	mov	r1, #4
   111c0:	bl	109e4 <calloc@plt>
   111c4:	cmp	r0, #0
   111c8:	mov	r5, r0
   111cc:	str	r0, [r4, #8]
   111d0:	bne	111e0 <vetor_criaHeap@@Base+0x48>
   111d4:	mov	r0, r4
   111d8:	bl	10a2c <free@plt>
   111dc:	mov	r4, r5
   111e0:	mov	r0, r4
   111e4:	pop	{r4, r5, r6, pc}

000111e8 <elemento_cria@@Base>:
   111e8:	push	{r4, r5, r6, lr}
   111ec:	mov	r5, r0
   111f0:	mov	r0, #8
   111f4:	mov	r6, r1
   111f8:	bl	10a5c <malloc@plt>
   111fc:	subs	r4, r0, #0
   11200:	beq	11214 <elemento_cria@@Base+0x2c>
   11204:	mov	r0, r6
   11208:	bl	10a44 <strdup@plt>
   1120c:	str	r5, [r4]
   11210:	str	r0, [r4, #4]
   11214:	mov	r0, r4
   11218:	pop	{r4, r5, r6, pc}

0001121c <maior_que@@Base>:
   1121c:	cmp	r1, #0
   11220:	cmpne	r0, #0
   11224:	push	{r4, r5, r6, lr}
   11228:	bne	1123c <maior_que@@Base+0x20>
   1122c:	ldr	r0, [pc, #68]	; 11278 <maior_que@@Base+0x5c>
   11230:	bl	10a50 <puts@plt>
   11234:	mov	r0, #0
   11238:	pop	{r4, r5, r6, pc}
   1123c:	ldr	r3, [pc, #56]	; 1127c <maior_que@@Base+0x60>
   11240:	mov	r5, r0
   11244:	mov	r4, r1
   11248:	ldr	r0, [r3]
   1124c:	bl	10a20 <fflush@plt>
   11250:	ldr	r2, [pc, #40]	; 11280 <maior_que@@Base+0x64>
   11254:	ldr	r0, [r5]
   11258:	ldr	r3, [r2]
   1125c:	add	r3, r3, #1
   11260:	str	r3, [r2]
   11264:	ldr	r3, [r4]
   11268:	cmp	r0, r3
   1126c:	movle	r0, #0
   11270:	movgt	r0, #1
   11274:	pop	{r4, r5, r6, pc}
   11278:	ldrdeq	r1, [r1], -pc	; <UNPREDICTABLE>
   1127c:	andeq	r2, r2, r0, rrx
   11280:	andeq	r2, r2, r8, rrx

00011284 <maior_que_HeapSort@@Base>:
   11284:	cmp	r1, #0
   11288:	cmpne	r0, #0
   1128c:	push	{r4, r5, r6, lr}
   11290:	bne	112a4 <maior_que_HeapSort@@Base+0x20>
   11294:	ldr	r0, [pc, #64]	; 112dc <maior_que_HeapSort@@Base+0x58>
   11298:	bl	10a50 <puts@plt>
   1129c:	mov	r0, #0
   112a0:	pop	{r4, r5, r6, pc}
   112a4:	ldr	r3, [pc, #52]	; 112e0 <maior_que_HeapSort@@Base+0x5c>
   112a8:	mov	r4, r0
   112ac:	mov	r5, r1
   112b0:	ldr	r0, [r3]
   112b4:	bl	10a20 <fflush@plt>
   112b8:	ldr	r2, [pc, #36]	; 112e4 <maior_que_HeapSort@@Base+0x60>
   112bc:	ldr	r1, [r5, #4]
   112c0:	ldr	r0, [r4, #4]
   112c4:	ldr	r3, [r2]
   112c8:	add	r3, r3, #1
   112cc:	str	r3, [r2]
   112d0:	bl	109f0 <strcmp@plt>
   112d4:	lsr	r0, r0, #31
   112d8:	pop	{r4, r5, r6, pc}
   112dc:	ldrdeq	r1, [r1], -pc	; <UNPREDICTABLE>
   112e0:	andeq	r2, r2, r0, rrx
   112e4:	andeq	r2, r2, r8, rrx

000112e8 <vetor_imprime@@Base>:
   112e8:	ldr	r3, [r0]
   112ec:	cmp	r3, #0
   112f0:	ble	11334 <vetor_imprime@@Base+0x4c>
   112f4:	ldr	r3, [r0, #8]
   112f8:	push	{r4, r5, r6, lr}
   112fc:	mov	r4, r0
   11300:	ldr	r3, [r3]
   11304:	ldr	r0, [pc, #80]	; 1135c <vetor_imprime@@Base+0x74>
   11308:	ldr	r6, [pc, #80]	; 11360 <vetor_imprime@@Base+0x78>
   1130c:	ldr	r2, [r3]
   11310:	ldr	r1, [r3, #4]
   11314:	bl	109fc <printf@plt>
   11318:	mov	r5, #1
   1131c:	ldr	r3, [r4]
   11320:	cmp	r5, r3
   11324:	blt	1133c <vetor_imprime@@Base+0x54>
   11328:	mov	r0, #10
   1132c:	pop	{r4, r5, r6, lr}
   11330:	b	10a98 <putchar@plt>
   11334:	ldr	r0, [pc, #40]	; 11364 <vetor_imprime@@Base+0x7c>
   11338:	b	10a50 <puts@plt>
   1133c:	ldr	r3, [r4, #8]
   11340:	mov	r0, r6
   11344:	ldr	r3, [r3, r5, lsl #2]
   11348:	add	r5, r5, #1
   1134c:	ldr	r2, [r3]
   11350:	ldr	r1, [r3, #4]
   11354:	bl	109fc <printf@plt>
   11358:	b	1131c <vetor_imprime@@Base+0x34>
   1135c:	andeq	r1, r1, sl, ror #15
   11360:	andeq	r1, r1, lr, lsl r8
   11364:	andeq	r1, r1, r7, lsl #16

00011368 <vetor_imprimeHeap@@Base>:
   11368:	ldr	r3, [r0]
   1136c:	cmp	r3, #0
   11370:	ble	113b4 <vetor_imprimeHeap@@Base+0x4c>
   11374:	ldr	r3, [r0, #8]
   11378:	push	{r4, r5, r6, lr}
   1137c:	mov	r4, r0
   11380:	ldr	r3, [r3, #4]
   11384:	ldr	r0, [pc, #80]	; 113dc <vetor_imprimeHeap@@Base+0x74>
   11388:	ldr	r6, [pc, #80]	; 113e0 <vetor_imprimeHeap@@Base+0x78>
   1138c:	ldr	r2, [r3]
   11390:	ldr	r1, [r3, #4]
   11394:	bl	109fc <printf@plt>
   11398:	mov	r5, #2
   1139c:	ldr	r3, [r4]
   113a0:	cmp	r5, r3
   113a4:	blt	113bc <vetor_imprimeHeap@@Base+0x54>
   113a8:	mov	r0, #10
   113ac:	pop	{r4, r5, r6, lr}
   113b0:	b	10a98 <putchar@plt>
   113b4:	ldr	r0, [pc, #40]	; 113e4 <vetor_imprimeHeap@@Base+0x7c>
   113b8:	b	10a50 <puts@plt>
   113bc:	ldr	r3, [r4, #8]
   113c0:	mov	r0, r6
   113c4:	ldr	r3, [r3, r5, lsl #2]
   113c8:	add	r5, r5, #1
   113cc:	ldr	r2, [r3]
   113d0:	ldr	r1, [r3, #4]
   113d4:	bl	109fc <printf@plt>
   113d8:	b	1139c <vetor_imprimeHeap@@Base+0x34>
   113dc:	andeq	r1, r1, sl, ror #15
   113e0:	andeq	r1, r1, lr, lsl r8
   113e4:	andeq	r1, r1, r7, lsl #16

000113e8 <__libc_csu_init@@Base>:
   113e8:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   113ec:	mov	r7, r0
   113f0:	ldr	r6, [pc, #72]	; 11440 <__libc_csu_init@@Base+0x58>
   113f4:	ldr	r5, [pc, #72]	; 11444 <__libc_csu_init@@Base+0x5c>
   113f8:	add	r6, pc, r6
   113fc:	add	r5, pc, r5
   11400:	sub	r6, r6, r5
   11404:	mov	r8, r1
   11408:	mov	r9, r2
   1140c:	bl	109c4 <calloc@plt-0x20>
   11410:	asrs	r6, r6, #2
   11414:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   11418:	mov	r4, #0
   1141c:	add	r4, r4, #1
   11420:	ldr	r3, [r5], #4
   11424:	mov	r2, r9
   11428:	mov	r1, r8
   1142c:	mov	r0, r7
   11430:	blx	r3
   11434:	cmp	r6, r4
   11438:	bne	1141c <__libc_csu_init@@Base+0x34>
   1143c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   11440:	andeq	r0, r1, r0, lsl fp
   11444:	andeq	r0, r1, r8, lsl #22

00011448 <__libc_csu_fini@@Base>:
   11448:	bx	lr

Disassembly of section .fini:

0001144c <.fini>:
   1144c:	push	{r3, lr}
   11450:	pop	{r3, pc}
