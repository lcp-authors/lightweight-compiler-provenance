
../repos/coreutils/src/uniq:     file format elf32-littlearm


Disassembly of section .init:

00010ea0 <.init>:
   10ea0:	push	{r3, lr}
   10ea4:	bl	1119c <__assert_fail@plt+0x48>
   10ea8:	pop	{r3, pc}

Disassembly of section .plt:

00010eac <calloc@plt-0x14>:
   10eac:	push	{lr}		; (str lr, [sp, #-4]!)
   10eb0:	ldr	lr, [pc, #4]	; 10ebc <calloc@plt-0x4>
   10eb4:	add	lr, pc, lr
   10eb8:	ldr	pc, [lr, #8]!
   10ebc:	andeq	r8, r1, r4, asr #2

00010ec0 <calloc@plt>:
   10ec0:	add	ip, pc, #0, 12
   10ec4:	add	ip, ip, #24, 20	; 0x18000
   10ec8:	ldr	pc, [ip, #324]!	; 0x144

00010ecc <fputs_unlocked@plt>:
   10ecc:	add	ip, pc, #0, 12
   10ed0:	add	ip, ip, #24, 20	; 0x18000
   10ed4:	ldr	pc, [ip, #316]!	; 0x13c

00010ed8 <raise@plt>:
   10ed8:	add	ip, pc, #0, 12
   10edc:	add	ip, ip, #24, 20	; 0x18000
   10ee0:	ldr	pc, [ip, #308]!	; 0x134

00010ee4 <strcmp@plt>:
   10ee4:	add	ip, pc, #0, 12
   10ee8:	add	ip, ip, #24, 20	; 0x18000
   10eec:	ldr	pc, [ip, #300]!	; 0x12c

00010ef0 <strtol@plt>:
   10ef0:	add	ip, pc, #0, 12
   10ef4:	add	ip, ip, #24, 20	; 0x18000
   10ef8:	ldr	pc, [ip, #292]!	; 0x124

00010efc <posix_fadvise64@plt>:
   10efc:	add	ip, pc, #0, 12
   10f00:	add	ip, ip, #24, 20	; 0x18000
   10f04:	ldr	pc, [ip, #284]!	; 0x11c

00010f08 <fflush@plt>:
   10f08:	add	ip, pc, #0, 12
   10f0c:	add	ip, ip, #24, 20	; 0x18000
   10f10:	ldr	pc, [ip, #276]!	; 0x114

00010f14 <free@plt>:
   10f14:	add	ip, pc, #0, 12
   10f18:	add	ip, ip, #24, 20	; 0x18000
   10f1c:	ldr	pc, [ip, #268]!	; 0x10c

00010f20 <_exit@plt>:
   10f20:	add	ip, pc, #0, 12
   10f24:	add	ip, ip, #24, 20	; 0x18000
   10f28:	ldr	pc, [ip, #260]!	; 0x104

00010f2c <memcpy@plt>:
   10f2c:	add	ip, pc, #0, 12
   10f30:	add	ip, ip, #24, 20	; 0x18000
   10f34:	ldr	pc, [ip, #252]!	; 0xfc

00010f38 <__strtoull_internal@plt>:
   10f38:	add	ip, pc, #0, 12
   10f3c:	add	ip, ip, #24, 20	; 0x18000
   10f40:	ldr	pc, [ip, #244]!	; 0xf4

00010f44 <mbsinit@plt>:
   10f44:	add	ip, pc, #0, 12
   10f48:	add	ip, ip, #24, 20	; 0x18000
   10f4c:	ldr	pc, [ip, #236]!	; 0xec

00010f50 <fwrite_unlocked@plt>:
   10f50:	add	ip, pc, #0, 12
   10f54:	add	ip, ip, #24, 20	; 0x18000
   10f58:	ldr	pc, [ip, #228]!	; 0xe4

00010f5c <memcmp@plt>:
   10f5c:	add	ip, pc, #0, 12
   10f60:	add	ip, ip, #24, 20	; 0x18000
   10f64:	ldr	pc, [ip, #220]!	; 0xdc

00010f68 <dcgettext@plt>:
   10f68:	add	ip, pc, #0, 12
   10f6c:	add	ip, ip, #24, 20	; 0x18000
   10f70:	ldr	pc, [ip, #212]!	; 0xd4

00010f74 <dup2@plt>:
   10f74:	add	ip, pc, #0, 12
   10f78:	add	ip, ip, #24, 20	; 0x18000
   10f7c:	ldr	pc, [ip, #204]!	; 0xcc

00010f80 <realloc@plt>:
   10f80:	add	ip, pc, #0, 12
   10f84:	add	ip, ip, #24, 20	; 0x18000
   10f88:	ldr	pc, [ip, #196]!	; 0xc4

00010f8c <textdomain@plt>:
   10f8c:	add	ip, pc, #0, 12
   10f90:	add	ip, ip, #24, 20	; 0x18000
   10f94:	ldr	pc, [ip, #188]!	; 0xbc

00010f98 <iswprint@plt>:
   10f98:	add	ip, pc, #0, 12
   10f9c:	add	ip, ip, #24, 20	; 0x18000
   10fa0:	ldr	pc, [ip, #180]!	; 0xb4

00010fa4 <fwrite@plt>:
   10fa4:	add	ip, pc, #0, 12
   10fa8:	add	ip, ip, #24, 20	; 0x18000
   10fac:	ldr	pc, [ip, #172]!	; 0xac

00010fb0 <lseek64@plt>:
   10fb0:	add	ip, pc, #0, 12
   10fb4:	add	ip, ip, #24, 20	; 0x18000
   10fb8:	ldr	pc, [ip, #164]!	; 0xa4

00010fbc <__ctype_get_mb_cur_max@plt>:
   10fbc:	add	ip, pc, #0, 12
   10fc0:	add	ip, ip, #24, 20	; 0x18000
   10fc4:	ldr	pc, [ip, #156]!	; 0x9c

00010fc8 <__fpending@plt>:
   10fc8:	add	ip, pc, #0, 12
   10fcc:	add	ip, ip, #24, 20	; 0x18000
   10fd0:	ldr	pc, [ip, #148]!	; 0x94

00010fd4 <mbrtowc@plt>:
   10fd4:	add	ip, pc, #0, 12
   10fd8:	add	ip, ip, #24, 20	; 0x18000
   10fdc:	ldr	pc, [ip, #140]!	; 0x8c

00010fe0 <error@plt>:
   10fe0:	add	ip, pc, #0, 12
   10fe4:	add	ip, ip, #24, 20	; 0x18000
   10fe8:	ldr	pc, [ip, #132]!	; 0x84

00010fec <open64@plt>:
   10fec:	add	ip, pc, #0, 12
   10ff0:	add	ip, ip, #24, 20	; 0x18000
   10ff4:	ldr	pc, [ip, #124]!	; 0x7c

00010ff8 <getenv@plt>:
   10ff8:	add	ip, pc, #0, 12
   10ffc:	add	ip, ip, #24, 20	; 0x18000
   11000:	ldr	pc, [ip, #116]!	; 0x74

00011004 <malloc@plt>:
   11004:	add	ip, pc, #0, 12
   11008:	add	ip, ip, #24, 20	; 0x18000
   1100c:	ldr	pc, [ip, #108]!	; 0x6c

00011010 <__libc_start_main@plt>:
   11010:	add	ip, pc, #0, 12
   11014:	add	ip, ip, #24, 20	; 0x18000
   11018:	ldr	pc, [ip, #100]!	; 0x64

0001101c <__freading@plt>:
   1101c:	add	ip, pc, #0, 12
   11020:	add	ip, ip, #24, 20	; 0x18000
   11024:	ldr	pc, [ip, #92]!	; 0x5c

00011028 <__ctype_toupper_loc@plt>:
   11028:	add	ip, pc, #0, 12
   1102c:	add	ip, ip, #24, 20	; 0x18000
   11030:	ldr	pc, [ip, #84]!	; 0x54

00011034 <__gmon_start__@plt>:
   11034:	add	ip, pc, #0, 12
   11038:	add	ip, ip, #24, 20	; 0x18000
   1103c:	ldr	pc, [ip, #76]!	; 0x4c

00011040 <freopen64@plt>:
   11040:	add	ip, pc, #0, 12
   11044:	add	ip, ip, #24, 20	; 0x18000
   11048:	ldr	pc, [ip, #68]!	; 0x44

0001104c <getopt_long@plt>:
   1104c:	add	ip, pc, #0, 12
   11050:	add	ip, ip, #24, 20	; 0x18000
   11054:	ldr	pc, [ip, #60]!	; 0x3c

00011058 <__ctype_b_loc@plt>:
   11058:	add	ip, pc, #0, 12
   1105c:	add	ip, ip, #24, 20	; 0x18000
   11060:	ldr	pc, [ip, #52]!	; 0x34

00011064 <exit@plt>:
   11064:	add	ip, pc, #0, 12
   11068:	add	ip, ip, #24, 20	; 0x18000
   1106c:	ldr	pc, [ip, #44]!	; 0x2c

00011070 <strlen@plt>:
   11070:	add	ip, pc, #0, 12
   11074:	add	ip, ip, #24, 20	; 0x18000
   11078:	ldr	pc, [ip, #36]!	; 0x24

0001107c <strchr@plt>:
   1107c:	add	ip, pc, #0, 12
   11080:	add	ip, ip, #24, 20	; 0x18000
   11084:	ldr	pc, [ip, #28]!

00011088 <__errno_location@plt>:
   11088:	add	ip, pc, #0, 12
   1108c:	add	ip, ip, #24, 20	; 0x18000
   11090:	ldr	pc, [ip, #20]!

00011094 <__cxa_atexit@plt>:
   11094:	add	ip, pc, #0, 12
   11098:	add	ip, ip, #24, 20	; 0x18000
   1109c:	ldr	pc, [ip, #12]!

000110a0 <memset@plt>:
   110a0:	add	ip, pc, #0, 12
   110a4:	add	ip, ip, #24, 20	; 0x18000
   110a8:	ldr	pc, [ip, #4]!

000110ac <__printf_chk@plt>:
   110ac:	add	ip, pc, #0, 12
   110b0:	add	ip, ip, #94208	; 0x17000
   110b4:	ldr	pc, [ip, #4092]!	; 0xffc

000110b8 <fileno@plt>:
   110b8:	add	ip, pc, #0, 12
   110bc:	add	ip, ip, #94208	; 0x17000
   110c0:	ldr	pc, [ip, #4084]!	; 0xff4

000110c4 <__fprintf_chk@plt>:
   110c4:	add	ip, pc, #0, 12
   110c8:	add	ip, ip, #94208	; 0x17000
   110cc:	ldr	pc, [ip, #4076]!	; 0xfec

000110d0 <fclose@plt>:
   110d0:	add	ip, pc, #0, 12
   110d4:	add	ip, ip, #94208	; 0x17000
   110d8:	ldr	pc, [ip, #4068]!	; 0xfe4

000110dc <fseeko64@plt>:
   110dc:	add	ip, pc, #0, 12
   110e0:	add	ip, ip, #94208	; 0x17000
   110e4:	ldr	pc, [ip, #4060]!	; 0xfdc

000110e8 <__uflow@plt>:
   110e8:	add	ip, pc, #0, 12
   110ec:	add	ip, ip, #94208	; 0x17000
   110f0:	ldr	pc, [ip, #4052]!	; 0xfd4

000110f4 <__overflow@plt>:
   110f4:	add	ip, pc, #0, 12
   110f8:	add	ip, ip, #94208	; 0x17000
   110fc:	ldr	pc, [ip, #4044]!	; 0xfcc

00011100 <setlocale@plt>:
   11100:	add	ip, pc, #0, 12
   11104:	add	ip, ip, #94208	; 0x17000
   11108:	ldr	pc, [ip, #4036]!	; 0xfc4

0001110c <strrchr@plt>:
   1110c:	add	ip, pc, #0, 12
   11110:	add	ip, ip, #94208	; 0x17000
   11114:	ldr	pc, [ip, #4028]!	; 0xfbc

00011118 <nl_langinfo@plt>:
   11118:	add	ip, pc, #0, 12
   1111c:	add	ip, ip, #94208	; 0x17000
   11120:	ldr	pc, [ip, #4020]!	; 0xfb4

00011124 <bindtextdomain@plt>:
   11124:	add	ip, pc, #0, 12
   11128:	add	ip, ip, #94208	; 0x17000
   1112c:	ldr	pc, [ip, #4012]!	; 0xfac

00011130 <strncmp@plt>:
   11130:	add	ip, pc, #0, 12
   11134:	add	ip, ip, #94208	; 0x17000
   11138:	ldr	pc, [ip, #4004]!	; 0xfa4

0001113c <abort@plt>:
   1113c:	add	ip, pc, #0, 12
   11140:	add	ip, ip, #94208	; 0x17000
   11144:	ldr	pc, [ip, #3996]!	; 0xf9c

00011148 <close@plt>:
   11148:	add	ip, pc, #0, 12
   1114c:	add	ip, ip, #94208	; 0x17000
   11150:	ldr	pc, [ip, #3988]!	; 0xf94

00011154 <__assert_fail@plt>:
   11154:	add	ip, pc, #0, 12
   11158:	add	ip, ip, #94208	; 0x17000
   1115c:	ldr	pc, [ip, #3980]!	; 0xf8c

Disassembly of section .text:

00011160 <.text>:
   11160:	mov	fp, #0
   11164:	mov	lr, #0
   11168:	pop	{r1}		; (ldr r1, [sp], #4)
   1116c:	mov	r2, sp
   11170:	push	{r2}		; (str r2, [sp, #-4]!)
   11174:	push	{r0}		; (str r0, [sp, #-4]!)
   11178:	ldr	ip, [pc, #16]	; 11190 <__assert_fail@plt+0x3c>
   1117c:	push	{ip}		; (str ip, [sp, #-4]!)
   11180:	ldr	r0, [pc, #12]	; 11194 <__assert_fail@plt+0x40>
   11184:	ldr	r3, [pc, #12]	; 11198 <__assert_fail@plt+0x44>
   11188:	bl	11010 <__libc_start_main@plt>
   1118c:	bl	1113c <abort@plt>
   11190:	andeq	r7, r1, r0, ror r0
   11194:	andeq	r1, r1, ip, lsr #11
   11198:	andeq	r7, r1, r0, lsl r0
   1119c:	ldr	r3, [pc, #20]	; 111b8 <__assert_fail@plt+0x64>
   111a0:	ldr	r2, [pc, #20]	; 111bc <__assert_fail@plt+0x68>
   111a4:	add	r3, pc, r3
   111a8:	ldr	r2, [r3, r2]
   111ac:	cmp	r2, #0
   111b0:	bxeq	lr
   111b4:	b	11034 <__gmon_start__@plt>
   111b8:	andeq	r7, r1, r4, asr lr
   111bc:	andeq	r0, r0, ip, ror #1
   111c0:	ldr	r0, [pc, #24]	; 111e0 <__assert_fail@plt+0x8c>
   111c4:	ldr	r3, [pc, #24]	; 111e4 <__assert_fail@plt+0x90>
   111c8:	cmp	r3, r0
   111cc:	bxeq	lr
   111d0:	ldr	r3, [pc, #16]	; 111e8 <__assert_fail@plt+0x94>
   111d4:	cmp	r3, #0
   111d8:	bxeq	lr
   111dc:	bx	r3
   111e0:	andeq	r9, r2, r8, asr #2
   111e4:	andeq	r9, r2, r8, asr #2
   111e8:	andeq	r0, r0, r0
   111ec:	ldr	r0, [pc, #36]	; 11218 <__assert_fail@plt+0xc4>
   111f0:	ldr	r1, [pc, #36]	; 1121c <__assert_fail@plt+0xc8>
   111f4:	sub	r1, r1, r0
   111f8:	asr	r1, r1, #2
   111fc:	add	r1, r1, r1, lsr #31
   11200:	asrs	r1, r1, #1
   11204:	bxeq	lr
   11208:	ldr	r3, [pc, #16]	; 11220 <__assert_fail@plt+0xcc>
   1120c:	cmp	r3, #0
   11210:	bxeq	lr
   11214:	bx	r3
   11218:	andeq	r9, r2, r8, asr #2
   1121c:	andeq	r9, r2, r8, asr #2
   11220:	andeq	r0, r0, r0
   11224:	push	{r4, lr}
   11228:	ldr	r4, [pc, #24]	; 11248 <__assert_fail@plt+0xf4>
   1122c:	ldrb	r3, [r4]
   11230:	cmp	r3, #0
   11234:	popne	{r4, pc}
   11238:	bl	111c0 <__assert_fail@plt+0x6c>
   1123c:	mov	r3, #1
   11240:	strb	r3, [r4]
   11244:	pop	{r4, pc}
   11248:	andeq	r9, r2, ip, ror #2
   1124c:	b	111ec <__assert_fail@plt+0x98>
   11250:	push	{fp, lr}
   11254:	mov	fp, sp
   11258:	sub	sp, sp, #56	; 0x38
   1125c:	mov	r4, r0
   11260:	cmp	r0, #0
   11264:	bne	11568 <__assert_fail@plt+0x414>
   11268:	movw	r1, #28867	; 0x70c3
   1126c:	mov	r0, #0
   11270:	mov	r2, #5
   11274:	movt	r1, #1
   11278:	bl	10f68 <dcgettext@plt>
   1127c:	mov	r1, r0
   11280:	movw	r0, #37272	; 0x9198
   11284:	movt	r0, #2
   11288:	ldr	r2, [r0]
   1128c:	mov	r0, #1
   11290:	bl	110ac <__printf_chk@plt>
   11294:	movw	r1, #28907	; 0x70eb
   11298:	mov	r0, #0
   1129c:	mov	r2, #5
   112a0:	movt	r1, #1
   112a4:	bl	10f68 <dcgettext@plt>
   112a8:	movw	r7, #37220	; 0x9164
   112ac:	movt	r7, #2
   112b0:	ldr	r1, [r7]
   112b4:	bl	10ecc <fputs_unlocked@plt>
   112b8:	movw	r1, #30767	; 0x782f
   112bc:	mov	r0, #0
   112c0:	mov	r2, #5
   112c4:	movt	r1, #1
   112c8:	bl	10f68 <dcgettext@plt>
   112cc:	ldr	r1, [r7]
   112d0:	bl	10ecc <fputs_unlocked@plt>
   112d4:	movw	r1, #29080	; 0x7198
   112d8:	mov	r0, #0
   112dc:	mov	r2, #5
   112e0:	movt	r1, #1
   112e4:	bl	10f68 <dcgettext@plt>
   112e8:	ldr	r1, [r7]
   112ec:	bl	10ecc <fputs_unlocked@plt>
   112f0:	movw	r1, #29218	; 0x7222
   112f4:	mov	r0, #0
   112f8:	mov	r2, #5
   112fc:	movt	r1, #1
   11300:	bl	10f68 <dcgettext@plt>
   11304:	ldr	r1, [r7]
   11308:	bl	10ecc <fputs_unlocked@plt>
   1130c:	movw	r1, #29463	; 0x7317
   11310:	mov	r0, #0
   11314:	mov	r2, #5
   11318:	movt	r1, #1
   1131c:	bl	10f68 <dcgettext@plt>
   11320:	ldr	r1, [r7]
   11324:	bl	10ecc <fputs_unlocked@plt>
   11328:	movw	r1, #29523	; 0x7353
   1132c:	mov	r0, #0
   11330:	mov	r2, #5
   11334:	movt	r1, #1
   11338:	bl	10f68 <dcgettext@plt>
   1133c:	ldr	r1, [r7]
   11340:	bl	10ecc <fputs_unlocked@plt>
   11344:	movw	r1, #29675	; 0x73eb
   11348:	mov	r0, #0
   1134c:	mov	r2, #5
   11350:	movt	r1, #1
   11354:	bl	10f68 <dcgettext@plt>
   11358:	ldr	r1, [r7]
   1135c:	bl	10ecc <fputs_unlocked@plt>
   11360:	movw	r1, #29853	; 0x749d
   11364:	mov	r0, #0
   11368:	mov	r2, #5
   1136c:	movt	r1, #1
   11370:	bl	10f68 <dcgettext@plt>
   11374:	ldr	r1, [r7]
   11378:	bl	10ecc <fputs_unlocked@plt>
   1137c:	movw	r1, #29917	; 0x74dd
   11380:	mov	r0, #0
   11384:	mov	r2, #5
   11388:	movt	r1, #1
   1138c:	bl	10f68 <dcgettext@plt>
   11390:	ldr	r1, [r7]
   11394:	bl	10ecc <fputs_unlocked@plt>
   11398:	movw	r1, #29985	; 0x7521
   1139c:	mov	r0, #0
   113a0:	mov	r2, #5
   113a4:	movt	r1, #1
   113a8:	bl	10f68 <dcgettext@plt>
   113ac:	ldr	r1, [r7]
   113b0:	bl	10ecc <fputs_unlocked@plt>
   113b4:	movw	r1, #30030	; 0x754e
   113b8:	mov	r0, #0
   113bc:	mov	r2, #5
   113c0:	movt	r1, #1
   113c4:	bl	10f68 <dcgettext@plt>
   113c8:	ldr	r1, [r7]
   113cc:	bl	10ecc <fputs_unlocked@plt>
   113d0:	movw	r1, #30084	; 0x7584
   113d4:	mov	r0, #0
   113d8:	mov	r2, #5
   113dc:	movt	r1, #1
   113e0:	bl	10f68 <dcgettext@plt>
   113e4:	ldr	r1, [r7]
   113e8:	bl	10ecc <fputs_unlocked@plt>
   113ec:	movw	r1, #30204	; 0x75fc
   113f0:	mov	r0, #0
   113f4:	mov	r2, #5
   113f8:	movt	r1, #1
   113fc:	bl	10f68 <dcgettext@plt>
   11400:	ldr	r1, [r7]
   11404:	bl	10ecc <fputs_unlocked@plt>
   11408:	movw	r0, #31584	; 0x7b60
   1140c:	mov	r2, #48	; 0x30
   11410:	mov	r6, sp
   11414:	movw	r5, #30347	; 0x768b
   11418:	movt	r0, #1
   1141c:	movt	r5, #1
   11420:	add	r1, r0, #32
   11424:	add	r3, r0, #16
   11428:	vld1.64	{d18-d19}, [r0], r2
   1142c:	vld1.64	{d16-d17}, [r1]
   11430:	vld1.64	{d20-d21}, [r3]
   11434:	add	r1, r6, #32
   11438:	vldr	d22, [r0]
   1143c:	add	r0, r6, #16
   11440:	vst1.64	{d16-d17}, [r1]
   11444:	movw	r1, #30842	; 0x787a
   11448:	vst1.64	{d20-d21}, [r0]
   1144c:	mov	r0, r6
   11450:	vst1.64	{d18-d19}, [r0], r2
   11454:	movt	r1, #1
   11458:	vstr	d22, [r0]
   1145c:	mov	r0, r5
   11460:	bl	10ee4 <strcmp@plt>
   11464:	cmp	r0, #0
   11468:	ldrne	r1, [r6, #8]!
   1146c:	cmpne	r1, #0
   11470:	bne	1145c <__assert_fail@plt+0x308>
   11474:	ldr	r6, [r6, #4]
   11478:	movw	r1, #30937	; 0x78d9
   1147c:	mov	r0, #0
   11480:	mov	r2, #5
   11484:	movt	r1, #1
   11488:	bl	10f68 <dcgettext@plt>
   1148c:	movw	r2, #30556	; 0x775c
   11490:	movw	r3, #30960	; 0x78f0
   11494:	mov	r1, r0
   11498:	mov	r0, #1
   1149c:	movt	r2, #1
   114a0:	movt	r3, #1
   114a4:	bl	110ac <__printf_chk@plt>
   114a8:	cmp	r6, #0
   114ac:	mov	r0, #5
   114b0:	mov	r1, #0
   114b4:	moveq	r6, r5
   114b8:	bl	11100 <setlocale@plt>
   114bc:	cmp	r0, #0
   114c0:	beq	114f8 <__assert_fail@plt+0x3a4>
   114c4:	movw	r1, #31000	; 0x7918
   114c8:	mov	r2, #3
   114cc:	movt	r1, #1
   114d0:	bl	11130 <strncmp@plt>
   114d4:	cmp	r0, #0
   114d8:	beq	114f8 <__assert_fail@plt+0x3a4>
   114dc:	movw	r1, #31004	; 0x791c
   114e0:	mov	r0, #0
   114e4:	mov	r2, #5
   114e8:	movt	r1, #1
   114ec:	bl	10f68 <dcgettext@plt>
   114f0:	ldr	r1, [r7]
   114f4:	bl	10ecc <fputs_unlocked@plt>
   114f8:	movw	r1, #31075	; 0x7963
   114fc:	mov	r0, #0
   11500:	mov	r2, #5
   11504:	movt	r1, #1
   11508:	bl	10f68 <dcgettext@plt>
   1150c:	movw	r2, #30960	; 0x78f0
   11510:	mov	r1, r0
   11514:	mov	r0, #1
   11518:	mov	r3, r5
   1151c:	movt	r2, #1
   11520:	bl	110ac <__printf_chk@plt>
   11524:	movw	r1, #31102	; 0x797e
   11528:	mov	r0, #0
   1152c:	mov	r2, #5
   11530:	movt	r1, #1
   11534:	bl	10f68 <dcgettext@plt>
   11538:	movw	r3, #31152	; 0x79b0
   1153c:	mov	r1, r0
   11540:	movw	r0, #30870	; 0x7896
   11544:	cmp	r6, r5
   11548:	mov	r2, r6
   1154c:	movt	r0, #1
   11550:	movt	r3, #1
   11554:	moveq	r3, r0
   11558:	mov	r0, #1
   1155c:	bl	110ac <__printf_chk@plt>
   11560:	mov	r0, r4
   11564:	bl	11064 <exit@plt>
   11568:	movw	r0, #37208	; 0x9158
   1156c:	movw	r1, #28828	; 0x709c
   11570:	mov	r2, #5
   11574:	movt	r0, #2
   11578:	movt	r1, #1
   1157c:	ldr	r5, [r0]
   11580:	mov	r0, #0
   11584:	bl	10f68 <dcgettext@plt>
   11588:	mov	r2, r0
   1158c:	movw	r0, #37272	; 0x9198
   11590:	mov	r1, #1
   11594:	movt	r0, #2
   11598:	ldr	r3, [r0]
   1159c:	mov	r0, r5
   115a0:	bl	110c4 <__fprintf_chk@plt>
   115a4:	mov	r0, r4
   115a8:	bl	11064 <exit@plt>
   115ac:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   115b0:	add	fp, sp, #28
   115b4:	sub	sp, sp, #76	; 0x4c
   115b8:	mov	r5, r0
   115bc:	movw	r0, #30352	; 0x7690
   115c0:	mov	r9, r1
   115c4:	movt	r0, #1
   115c8:	bl	10ff8 <getenv@plt>
   115cc:	mov	r6, r0
   115d0:	movw	r0, #31849	; 0x7c69
   115d4:	movt	r0, #1
   115d8:	str	r0, [sp, #44]	; 0x2c
   115dc:	str	r0, [sp, #48]	; 0x30
   115e0:	ldr	r0, [r9]
   115e4:	bl	134fc <__assert_fail@plt+0x23a8>
   115e8:	movw	r1, #31152	; 0x79b0
   115ec:	mov	r0, #6
   115f0:	movt	r1, #1
   115f4:	bl	11100 <setlocale@plt>
   115f8:	movw	r7, #30560	; 0x7760
   115fc:	movw	r1, #30368	; 0x76a0
   11600:	movt	r7, #1
   11604:	movt	r1, #1
   11608:	mov	r0, r7
   1160c:	bl	11124 <bindtextdomain@plt>
   11610:	mov	r0, r7
   11614:	bl	10f8c <textdomain@plt>
   11618:	movw	r0, #11560	; 0x2d28
   1161c:	movt	r0, #1
   11620:	bl	17074 <__assert_fail@plt+0x5f20>
   11624:	movw	r0, #37232	; 0x9170
   11628:	mov	r1, #0
   1162c:	mvn	r2, #0
   11630:	mov	r7, #10
   11634:	mov	sl, #0
   11638:	mov	r8, #0
   1163c:	movt	r0, #2
   11640:	str	r1, [r0]
   11644:	movw	r0, #37236	; 0x9174
   11648:	movt	r0, #2
   1164c:	str	r1, [r0]
   11650:	movw	r0, #37240	; 0x9178
   11654:	movt	r0, #2
   11658:	str	r2, [r0]
   1165c:	movw	r0, #37244	; 0x917c
   11660:	mov	r2, #1
   11664:	movt	r0, #2
   11668:	strb	r2, [r0]
   1166c:	movw	r0, #37245	; 0x917d
   11670:	movt	r0, #2
   11674:	strb	r2, [r0]
   11678:	movw	r0, #37246	; 0x917e
   1167c:	movt	r0, #2
   11680:	strb	r1, [r0]
   11684:	movw	r0, #37248	; 0x9180
   11688:	movt	r0, #2
   1168c:	strb	r2, [r0]
   11690:	movw	r0, #37252	; 0x9184
   11694:	movt	r0, #2
   11698:	str	r1, [r0]
   1169c:	mov	r0, #0
   116a0:	mov	r1, #0
   116a4:	str	r1, [sp, #40]	; 0x28
   116a8:	b	116c8 <__assert_fail@plt+0x574>
   116ac:	add	r2, r1, #1
   116b0:	str	r2, [r7]
   116b4:	add	r2, sp, #44	; 0x2c
   116b8:	mov	r7, r4
   116bc:	ldr	r1, [r9, r1, lsl #2]
   116c0:	str	r1, [r2, r8, lsl #2]
   116c4:	add	r8, r8, #1
   116c8:	cmp	r8, #0
   116cc:	mov	r1, r8
   116d0:	mov	r2, r6
   116d4:	mov	r4, r7
   116d8:	movwne	r1, #1
   116dc:	cmp	r6, #0
   116e0:	movwne	r2, #1
   116e4:	cmn	r0, #1
   116e8:	beq	11944 <__assert_fail@plt+0x7f0>
   116ec:	ands	r1, r2, r1
   116f0:	bne	11944 <__assert_fail@plt+0x7f0>
   116f4:	movw	r2, #30392	; 0x76b8
   116f8:	movw	r3, #31312	; 0x7a50
   116fc:	mov	r7, #0
   11700:	mov	r0, r5
   11704:	mov	r1, r9
   11708:	movt	r2, #1
   1170c:	movt	r3, #1
   11710:	str	r7, [sp]
   11714:	bl	1104c <getopt_long@plt>
   11718:	add	r1, r0, #3
   1171c:	cmp	r1, #125	; 0x7d
   11720:	bhi	119ac <__assert_fail@plt+0x858>
   11724:	add	r2, pc, #0
   11728:	ldr	pc, [r2, r1, lsl #2]
   1172c:	strdeq	r2, [r1], -r8
   11730:	andeq	r2, r1, ip, asr #10
   11734:	andeq	r1, r1, r4, asr #18
   11738:			; <UNDEFINED> instruction: 0x000124b0
   1173c:	muleq	r1, ip, fp
   11740:			; <UNDEFINED> instruction: 0x000124b0
   11744:			; <UNDEFINED> instruction: 0x000124b0
   11748:			; <UNDEFINED> instruction: 0x000124b0
   1174c:			; <UNDEFINED> instruction: 0x000124b0
   11750:			; <UNDEFINED> instruction: 0x000124b0
   11754:			; <UNDEFINED> instruction: 0x000124b0
   11758:			; <UNDEFINED> instruction: 0x000124b0
   1175c:			; <UNDEFINED> instruction: 0x000124b0
   11760:			; <UNDEFINED> instruction: 0x000124b0
   11764:			; <UNDEFINED> instruction: 0x000124b0
   11768:			; <UNDEFINED> instruction: 0x000124b0
   1176c:			; <UNDEFINED> instruction: 0x000124b0
   11770:			; <UNDEFINED> instruction: 0x000124b0
   11774:			; <UNDEFINED> instruction: 0x000124b0
   11778:			; <UNDEFINED> instruction: 0x000124b0
   1177c:			; <UNDEFINED> instruction: 0x000124b0
   11780:			; <UNDEFINED> instruction: 0x000124b0
   11784:			; <UNDEFINED> instruction: 0x000124b0
   11788:			; <UNDEFINED> instruction: 0x000124b0
   1178c:			; <UNDEFINED> instruction: 0x000124b0
   11790:			; <UNDEFINED> instruction: 0x000124b0
   11794:			; <UNDEFINED> instruction: 0x000124b0
   11798:			; <UNDEFINED> instruction: 0x000124b0
   1179c:			; <UNDEFINED> instruction: 0x000124b0
   117a0:			; <UNDEFINED> instruction: 0x000124b0
   117a4:			; <UNDEFINED> instruction: 0x000124b0
   117a8:			; <UNDEFINED> instruction: 0x000124b0
   117ac:			; <UNDEFINED> instruction: 0x000124b0
   117b0:			; <UNDEFINED> instruction: 0x000124b0
   117b4:			; <UNDEFINED> instruction: 0x000124b0
   117b8:			; <UNDEFINED> instruction: 0x000124b0
   117bc:			; <UNDEFINED> instruction: 0x000124b0
   117c0:			; <UNDEFINED> instruction: 0x000124b0
   117c4:			; <UNDEFINED> instruction: 0x000124b0
   117c8:			; <UNDEFINED> instruction: 0x000124b0
   117cc:			; <UNDEFINED> instruction: 0x000124b0
   117d0:			; <UNDEFINED> instruction: 0x000124b0
   117d4:			; <UNDEFINED> instruction: 0x000124b0
   117d8:			; <UNDEFINED> instruction: 0x000124b0
   117dc:			; <UNDEFINED> instruction: 0x000124b0
   117e0:			; <UNDEFINED> instruction: 0x000124b0
   117e4:			; <UNDEFINED> instruction: 0x000124b0
   117e8:			; <UNDEFINED> instruction: 0x000124b0
   117ec:			; <UNDEFINED> instruction: 0x000124b0
   117f0:			; <UNDEFINED> instruction: 0x000124b0
   117f4:			; <UNDEFINED> instruction: 0x000124b0
   117f8:	andeq	r1, r1, r4, lsr #18
   117fc:	andeq	r1, r1, r4, lsr #18
   11800:	andeq	r1, r1, r4, lsr #18
   11804:	andeq	r1, r1, r4, lsr #18
   11808:	andeq	r1, r1, r4, lsr #18
   1180c:	andeq	r1, r1, r4, lsr #18
   11810:	andeq	r1, r1, r4, lsr #18
   11814:	andeq	r1, r1, r4, lsr #18
   11818:	andeq	r1, r1, r4, lsr #18
   1181c:	andeq	r1, r1, r4, lsr #18
   11820:			; <UNDEFINED> instruction: 0x000124b0
   11824:			; <UNDEFINED> instruction: 0x000124b0
   11828:			; <UNDEFINED> instruction: 0x000124b0
   1182c:			; <UNDEFINED> instruction: 0x000124b0
   11830:			; <UNDEFINED> instruction: 0x000124b0
   11834:			; <UNDEFINED> instruction: 0x000124b0
   11838:			; <UNDEFINED> instruction: 0x000124b0
   1183c:			; <UNDEFINED> instruction: 0x000124b0
   11840:			; <UNDEFINED> instruction: 0x000124b0
   11844:			; <UNDEFINED> instruction: 0x000124b0
   11848:	andeq	r1, r1, ip, lsl sl
   1184c:			; <UNDEFINED> instruction: 0x000124b0
   11850:			; <UNDEFINED> instruction: 0x000124b0
   11854:			; <UNDEFINED> instruction: 0x000124b0
   11858:			; <UNDEFINED> instruction: 0x000124b0
   1185c:			; <UNDEFINED> instruction: 0x000124b0
   11860:			; <UNDEFINED> instruction: 0x000124b0
   11864:			; <UNDEFINED> instruction: 0x000124b0
   11868:			; <UNDEFINED> instruction: 0x000124b0
   1186c:			; <UNDEFINED> instruction: 0x000124b0
   11870:			; <UNDEFINED> instruction: 0x000124b0
   11874:			; <UNDEFINED> instruction: 0x000124b0
   11878:			; <UNDEFINED> instruction: 0x000124b0
   1187c:			; <UNDEFINED> instruction: 0x000124b0
   11880:			; <UNDEFINED> instruction: 0x000124b0
   11884:			; <UNDEFINED> instruction: 0x000124b0
   11888:			; <UNDEFINED> instruction: 0x000124b0
   1188c:			; <UNDEFINED> instruction: 0x000124b0
   11890:			; <UNDEFINED> instruction: 0x000124b0
   11894:			; <UNDEFINED> instruction: 0x000124b0
   11898:			; <UNDEFINED> instruction: 0x000124b0
   1189c:			; <UNDEFINED> instruction: 0x000124b0
   118a0:			; <UNDEFINED> instruction: 0x000124b0
   118a4:			; <UNDEFINED> instruction: 0x000124b0
   118a8:			; <UNDEFINED> instruction: 0x000124b0
   118ac:			; <UNDEFINED> instruction: 0x000124b0
   118b0:			; <UNDEFINED> instruction: 0x000124b0
   118b4:			; <UNDEFINED> instruction: 0x000124b0
   118b8:			; <UNDEFINED> instruction: 0x000124b0
   118bc:			; <UNDEFINED> instruction: 0x000124b0
   118c0:			; <UNDEFINED> instruction: 0x000124b0
   118c4:	andeq	r1, r1, r4, lsl fp
   118c8:	andeq	r1, r1, r4, asr ip
   118cc:			; <UNDEFINED> instruction: 0x000124b0
   118d0:	andeq	r1, r1, ip, lsr #21
   118d4:			; <UNDEFINED> instruction: 0x000124b0
   118d8:			; <UNDEFINED> instruction: 0x000124b0
   118dc:	ldrdeq	r1, [r1], -ip
   118e0:			; <UNDEFINED> instruction: 0x000124b0
   118e4:			; <UNDEFINED> instruction: 0x000124b0
   118e8:			; <UNDEFINED> instruction: 0x000124b0
   118ec:			; <UNDEFINED> instruction: 0x000124b0
   118f0:			; <UNDEFINED> instruction: 0x000124b0
   118f4:			; <UNDEFINED> instruction: 0x000124b0
   118f8:			; <UNDEFINED> instruction: 0x000124b0
   118fc:			; <UNDEFINED> instruction: 0x000124b0
   11900:			; <UNDEFINED> instruction: 0x000124b0
   11904:	andeq	r1, r1, r8, lsr fp
   11908:			; <UNDEFINED> instruction: 0x000124b0
   1190c:	andeq	r1, r1, r0, lsr ip
   11910:			; <UNDEFINED> instruction: 0x000124b0
   11914:	andeq	r1, r1, r8, ror ip
   11918:			; <UNDEFINED> instruction: 0x000124b0
   1191c:			; <UNDEFINED> instruction: 0x000124b0
   11920:	andeq	r1, r1, r8, asr #13
   11924:	cmp	sl, #2
   11928:	bne	11964 <__assert_fail@plt+0x810>
   1192c:	movw	r3, #37236	; 0x9174
   11930:	mov	r1, #0
   11934:	movt	r3, #2
   11938:	str	r1, [r3]
   1193c:	sub	r1, r0, #48	; 0x30
   11940:	b	1199c <__assert_fail@plt+0x848>
   11944:	movw	r7, #37200	; 0x9150
   11948:	movt	r7, #2
   1194c:	ldr	r1, [r7]
   11950:	cmp	r1, r5
   11954:	bge	11d28 <__assert_fail@plt+0xbd4>
   11958:	cmp	r8, #2
   1195c:	bne	116ac <__assert_fail@plt+0x558>
   11960:	b	124b8 <__assert_fail@plt+0x1364>
   11964:	movw	r3, #37236	; 0x9174
   11968:	movw	r1, #39321	; 0x9999
   1196c:	movt	r3, #2
   11970:	movt	r1, #6553	; 0x1999
   11974:	ldr	r2, [r3]
   11978:	cmp	r2, r1
   1197c:	bls	11988 <__assert_fail@plt+0x834>
   11980:	mvn	r1, #0
   11984:	b	1199c <__assert_fail@plt+0x848>
   11988:	add	r1, r2, r2, lsl #2
   1198c:	add	r1, r0, r1, lsl #1
   11990:	sub	r1, r1, #48	; 0x30
   11994:	cmp	r1, r2
   11998:	mvncc	r1, #0
   1199c:	str	r1, [r3]
   119a0:	mov	sl, #1
   119a4:	mov	r7, r4
   119a8:	b	116c8 <__assert_fail@plt+0x574>
   119ac:	cmp	r0, #256	; 0x100
   119b0:	bne	124b0 <__assert_fail@plt+0x135c>
   119b4:	movw	r0, #37224	; 0x9168
   119b8:	movt	r0, #2
   119bc:	ldr	r1, [r0]
   119c0:	cmp	r1, #0
   119c4:	beq	11cf8 <__assert_fail@plt+0xba4>
   119c8:	movw	r0, #37116	; 0x90fc
   119cc:	movw	r7, #31548	; 0x7b3c
   119d0:	mov	r2, #4
   119d4:	movt	r0, #2
   119d8:	str	r2, [sp]
   119dc:	movw	r2, #31564	; 0x7b4c
   119e0:	movt	r7, #1
   119e4:	ldr	r0, [r0]
   119e8:	movt	r2, #1
   119ec:	mov	r3, r7
   119f0:	str	r0, [sp, #4]
   119f4:	mov	r0, #1
   119f8:	str	r0, [sp, #8]
   119fc:	movw	r0, #30448	; 0x76f0
   11a00:	movt	r0, #1
   11a04:	bl	12a9c <__assert_fail@plt+0x1948>
   11a08:	ldr	r0, [r7, r0, lsl #2]
   11a0c:	movw	r1, #37256	; 0x9188
   11a10:	movt	r1, #2
   11a14:	str	r0, [r1]
   11a18:	b	11d08 <__assert_fail@plt+0xbb4>
   11a1c:	movw	r0, #37246	; 0x917e
   11a20:	movw	r1, #37245	; 0x917d
   11a24:	mov	r2, #1
   11a28:	movt	r0, #2
   11a2c:	movt	r1, #2
   11a30:	strb	r2, [r0]
   11a34:	mov	r0, #0
   11a38:	strb	r0, [r1]
   11a3c:	movw	r1, #37224	; 0x9168
   11a40:	movt	r1, #2
   11a44:	ldr	r1, [r1]
   11a48:	cmp	r1, #0
   11a4c:	beq	11a8c <__assert_fail@plt+0x938>
   11a50:	movw	r0, #37116	; 0x90fc
   11a54:	movw	r7, #31520	; 0x7b20
   11a58:	mov	r3, #4
   11a5c:	movt	r0, #2
   11a60:	str	r3, [sp]
   11a64:	movt	r7, #1
   11a68:	ldr	r0, [r0]
   11a6c:	mov	r3, r7
   11a70:	stmib	sp, {r0, r2}
   11a74:	movw	r0, #30433	; 0x76e1
   11a78:	movw	r2, #31532	; 0x7b2c
   11a7c:	movt	r0, #1
   11a80:	movt	r2, #1
   11a84:	bl	12a9c <__assert_fail@plt+0x1948>
   11a88:	ldr	r0, [r7, r0, lsl #2]
   11a8c:	movw	r1, #37252	; 0x9184
   11a90:	mov	r7, r4
   11a94:	movt	r1, #2
   11a98:	str	r0, [r1]
   11a9c:	mov	r0, #1
   11aa0:	str	r0, [sp, #40]	; 0x28
   11aa4:	mov	r0, #68	; 0x44
   11aa8:	b	116c8 <__assert_fail@plt+0x574>
   11aac:	movw	r0, #37224	; 0x9168
   11ab0:	mov	r1, #0
   11ab4:	mov	r2, #10
   11ab8:	sub	r3, fp, #40	; 0x28
   11abc:	movt	r0, #2
   11ac0:	ldr	sl, [r0]
   11ac4:	movw	r0, #31152	; 0x79b0
   11ac8:	movt	r0, #1
   11acc:	str	r0, [sp]
   11ad0:	mov	r0, sl
   11ad4:	bl	15ec4 <__assert_fail@plt+0x4d70>
   11ad8:	cmp	r0, #2
   11adc:	bcs	12554 <__assert_fail@plt+0x1400>
   11ae0:	ldr	r0, [fp, #-40]	; 0xffffffd8
   11ae4:	ldr	r1, [fp, #-36]	; 0xffffffdc
   11ae8:	mvn	r3, #0
   11aec:	mov	sl, #2
   11af0:	mov	r7, r4
   11af4:	subs	r2, r0, r3
   11af8:	sbcs	r1, r1, #0
   11afc:	movw	r1, #37236	; 0x9174
   11b00:	movcs	r0, r3
   11b04:	movt	r1, #2
   11b08:	str	r0, [r1]
   11b0c:	mov	r0, #102	; 0x66
   11b10:	b	116c8 <__assert_fail@plt+0x574>
   11b14:	movw	r0, #37248	; 0x9180
   11b18:	mov	r1, #0
   11b1c:	mov	r7, r4
   11b20:	movt	r0, #2
   11b24:	strb	r1, [r0]
   11b28:	mov	r0, #1
   11b2c:	str	r0, [sp, #40]	; 0x28
   11b30:	mov	r0, #99	; 0x63
   11b34:	b	116c8 <__assert_fail@plt+0x574>
   11b38:	movw	r0, #37224	; 0x9168
   11b3c:	mov	r1, #0
   11b40:	mov	r2, #10
   11b44:	sub	r3, fp, #40	; 0x28
   11b48:	movt	r0, #2
   11b4c:	ldr	r7, [r0]
   11b50:	movw	r0, #31152	; 0x79b0
   11b54:	movt	r0, #1
   11b58:	str	r0, [sp]
   11b5c:	mov	r0, r7
   11b60:	bl	15ec4 <__assert_fail@plt+0x4d70>
   11b64:	cmp	r0, #2
   11b68:	bcs	12584 <__assert_fail@plt+0x1430>
   11b6c:	ldr	r0, [fp, #-40]	; 0xffffffd8
   11b70:	ldr	r1, [fp, #-36]	; 0xffffffdc
   11b74:	mvn	r3, #0
   11b78:	mov	r7, r4
   11b7c:	subs	r2, r0, r3
   11b80:	sbcs	r1, r1, #0
   11b84:	movw	r1, #37232	; 0x9170
   11b88:	movcs	r0, r3
   11b8c:	movt	r1, #2
   11b90:	str	r0, [r1]
   11b94:	mov	r0, #115	; 0x73
   11b98:	b	116c8 <__assert_fail@plt+0x574>
   11b9c:	movw	r0, #37224	; 0x9168
   11ba0:	movt	r0, #2
   11ba4:	ldr	r0, [r0]
   11ba8:	ldrb	r0, [r0]
   11bac:	cmp	r0, #43	; 0x2b
   11bb0:	bne	11c04 <__assert_fail@plt+0xab0>
   11bb4:	bl	134a4 <__assert_fail@plt+0x2350>
   11bb8:	movw	r1, #62032	; 0xf250
   11bbc:	movt	r1, #65532	; 0xfffc
   11bc0:	add	r0, r0, r1
   11bc4:	cmp	r0, #696	; 0x2b8
   11bc8:	bls	11c04 <__assert_fail@plt+0xab0>
   11bcc:	movw	r0, #37224	; 0x9168
   11bd0:	movw	r1, #31152	; 0x79b0
   11bd4:	mov	r2, #10
   11bd8:	sub	r3, fp, #40	; 0x28
   11bdc:	movt	r0, #2
   11be0:	movt	r1, #1
   11be4:	ldr	r0, [r0]
   11be8:	str	r1, [sp]
   11bec:	mov	r1, #0
   11bf0:	bl	15ec4 <__assert_fail@plt+0x4d70>
   11bf4:	cmp	r0, #0
   11bf8:	ldreq	r0, [fp, #-36]	; 0xffffffdc
   11bfc:	cmpeq	r0, #0
   11c00:	beq	11d14 <__assert_fail@plt+0xbc0>
   11c04:	cmp	r8, #2
   11c08:	beq	12590 <__assert_fail@plt+0x143c>
   11c0c:	movw	r0, #37224	; 0x9168
   11c10:	add	r1, sp, #44	; 0x2c
   11c14:	movt	r0, #2
   11c18:	ldr	r0, [r0]
   11c1c:	str	r0, [r1, r8, lsl #2]
   11c20:	add	r8, r8, #1
   11c24:	mov	r0, #1
   11c28:	mov	r7, r4
   11c2c:	b	116c8 <__assert_fail@plt+0x574>
   11c30:	movw	r0, #37244	; 0x917c
   11c34:	mov	r1, #0
   11c38:	mov	r7, r4
   11c3c:	movt	r0, #2
   11c40:	strb	r1, [r0]
   11c44:	mov	r0, #1
   11c48:	str	r0, [sp, #40]	; 0x28
   11c4c:	mov	r0, #117	; 0x75
   11c50:	b	116c8 <__assert_fail@plt+0x574>
   11c54:	movw	r0, #37245	; 0x917d
   11c58:	mov	r1, #0
   11c5c:	mov	r7, r4
   11c60:	movt	r0, #2
   11c64:	strb	r1, [r0]
   11c68:	mov	r0, #1
   11c6c:	str	r0, [sp, #40]	; 0x28
   11c70:	mov	r0, #100	; 0x64
   11c74:	b	116c8 <__assert_fail@plt+0x574>
   11c78:	movw	r0, #37224	; 0x9168
   11c7c:	mov	r1, #0
   11c80:	mov	r2, #10
   11c84:	sub	r3, fp, #40	; 0x28
   11c88:	movt	r0, #2
   11c8c:	ldr	r7, [r0]
   11c90:	movw	r0, #31152	; 0x79b0
   11c94:	movt	r0, #1
   11c98:	str	r0, [sp]
   11c9c:	mov	r0, r7
   11ca0:	bl	15ec4 <__assert_fail@plt+0x4d70>
   11ca4:	cmp	r0, #2
   11ca8:	bcs	125cc <__assert_fail@plt+0x1478>
   11cac:	ldr	r0, [fp, #-40]	; 0xffffffd8
   11cb0:	ldr	r1, [fp, #-36]	; 0xffffffdc
   11cb4:	mvn	r3, #0
   11cb8:	mov	r7, r4
   11cbc:	subs	r2, r0, r3
   11cc0:	sbcs	r1, r1, #0
   11cc4:	movw	r1, #37240	; 0x9178
   11cc8:	movcs	r0, r3
   11ccc:	movt	r1, #2
   11cd0:	str	r0, [r1]
   11cd4:	mov	r0, #119	; 0x77
   11cd8:	b	116c8 <__assert_fail@plt+0x574>
   11cdc:	movw	r0, #37260	; 0x918c
   11ce0:	mov	r1, #1
   11ce4:	mov	r7, r4
   11ce8:	movt	r0, #2
   11cec:	strb	r1, [r0]
   11cf0:	mov	r0, #105	; 0x69
   11cf4:	b	116c8 <__assert_fail@plt+0x574>
   11cf8:	movw	r0, #37256	; 0x9188
   11cfc:	mov	r1, #3
   11d00:	movt	r0, #2
   11d04:	str	r1, [r0]
   11d08:	mov	r0, #256	; 0x100
   11d0c:	mov	r7, r4
   11d10:	b	116c8 <__assert_fail@plt+0x574>
   11d14:	ldr	r0, [fp, #-40]	; 0xffffffd8
   11d18:	movw	r1, #37232	; 0x9170
   11d1c:	movt	r1, #2
   11d20:	str	r0, [r1]
   11d24:	b	11c24 <__assert_fail@plt+0xad0>
   11d28:	movw	r0, #37256	; 0x9188
   11d2c:	movt	r0, #2
   11d30:	ldr	r0, [r0]
   11d34:	cmp	r0, #0
   11d38:	beq	11d4c <__assert_fail@plt+0xbf8>
   11d3c:	ldr	r1, [sp, #40]	; 0x28
   11d40:	eor	r1, r1, #1
   11d44:	tst	r1, #1
   11d48:	beq	12634 <__assert_fail@plt+0x14e0>
   11d4c:	movw	r1, #37248	; 0x9180
   11d50:	cmp	r0, #0
   11d54:	movt	r1, #2
   11d58:	ldrb	r1, [r1]
   11d5c:	beq	11d68 <__assert_fail@plt+0xc14>
   11d60:	cmp	r1, #0
   11d64:	beq	12640 <__assert_fail@plt+0x14ec>
   11d68:	cmp	r1, #0
   11d6c:	bne	11d84 <__assert_fail@plt+0xc30>
   11d70:	movw	r0, #37246	; 0x917e
   11d74:	movt	r0, #2
   11d78:	ldrb	r0, [r0]
   11d7c:	cmp	r0, #1
   11d80:	beq	126ac <__assert_fail@plt+0x1558>
   11d84:	ldr	r8, [sp, #44]	; 0x2c
   11d88:	ldr	r6, [sp, #48]	; 0x30
   11d8c:	movw	r1, #31849	; 0x7c69
   11d90:	movt	r1, #1
   11d94:	mov	r0, r8
   11d98:	bl	10ee4 <strcmp@plt>
   11d9c:	cmp	r0, #0
   11da0:	beq	11dc8 <__assert_fail@plt+0xc74>
   11da4:	movw	r0, #37216	; 0x9160
   11da8:	movw	r1, #31755	; 0x7c0b
   11dac:	movt	r0, #2
   11db0:	movt	r1, #1
   11db4:	ldr	r2, [r0]
   11db8:	mov	r0, r8
   11dbc:	bl	12f70 <__assert_fail@plt+0x1e1c>
   11dc0:	cmp	r0, #0
   11dc4:	beq	1264c <__assert_fail@plt+0x14f8>
   11dc8:	movw	r1, #31849	; 0x7c69
   11dcc:	mov	r0, r6
   11dd0:	movt	r1, #1
   11dd4:	bl	10ee4 <strcmp@plt>
   11dd8:	cmp	r0, #0
   11ddc:	beq	11e04 <__assert_fail@plt+0xcb0>
   11de0:	movw	r0, #37220	; 0x9164
   11de4:	movw	r1, #31283	; 0x7a33
   11de8:	movt	r0, #2
   11dec:	movt	r1, #1
   11df0:	ldr	r2, [r0]
   11df4:	mov	r0, r6
   11df8:	bl	12f70 <__assert_fail@plt+0x1e1c>
   11dfc:	cmp	r0, #0
   11e00:	beq	1267c <__assert_fail@plt+0x1528>
   11e04:	movw	r6, #37216	; 0x9160
   11e08:	mov	r1, #2
   11e0c:	movt	r6, #2
   11e10:	ldr	r0, [r6]
   11e14:	bl	12e14 <__assert_fail@plt+0x1cc0>
   11e18:	sub	r5, fp, #40	; 0x28
   11e1c:	mov	r0, r5
   11e20:	bl	1325c <__assert_fail@plt+0x2108>
   11e24:	add	r7, sp, #52	; 0x34
   11e28:	mov	r0, r7
   11e2c:	bl	1325c <__assert_fail@plt+0x2108>
   11e30:	movw	r0, #37245	; 0x917d
   11e34:	str	r8, [sp, #20]
   11e38:	movt	r0, #2
   11e3c:	ldrb	r0, [r0]
   11e40:	cmp	r0, #1
   11e44:	bne	12044 <__assert_fail@plt+0xef0>
   11e48:	movw	r0, #37244	; 0x917c
   11e4c:	movt	r0, #2
   11e50:	ldrb	r0, [r0]
   11e54:	cmp	r0, #1
   11e58:	bne	12044 <__assert_fail@plt+0xef0>
   11e5c:	movw	r0, #37248	; 0x9180
   11e60:	movt	r0, #2
   11e64:	ldrb	r0, [r0]
   11e68:	cmp	r0, #0
   11e6c:	beq	12044 <__assert_fail@plt+0xef0>
   11e70:	ldr	r1, [r6]
   11e74:	mov	r2, #0
   11e78:	str	r7, [sp, #40]	; 0x28
   11e7c:	str	r2, [sp, #32]
   11e80:	ldrb	r0, [r1]
   11e84:	tst	r0, #16
   11e88:	bne	12384 <__assert_fail@plt+0x1230>
   11e8c:	uxtb	r0, r4
   11e90:	mov	r9, #0
   11e94:	sub	sl, fp, #40	; 0x28
   11e98:	str	r0, [sp, #28]
   11e9c:	mov	r0, #0
   11ea0:	str	r0, [sp, #32]
   11ea4:	ldr	r2, [sp, #28]
   11ea8:	mov	r0, sl
   11eac:	bl	13358 <__assert_fail@plt+0x2204>
   11eb0:	cmp	r0, #0
   11eb4:	beq	12384 <__assert_fail@plt+0x1230>
   11eb8:	mov	r0, sl
   11ebc:	bl	126d8 <__assert_fail@plt+0x1584>
   11ec0:	mov	r7, r0
   11ec4:	ldmib	sl, {r0, r1}
   11ec8:	mov	r5, #1
   11ecc:	cmp	r9, #0
   11ed0:	mvn	r2, r7
   11ed4:	add	r0, r0, r2
   11ed8:	add	r8, r0, r1
   11edc:	beq	11f4c <__assert_fail@plt+0xdf8>
   11ee0:	movw	r0, #37240	; 0x9178
   11ee4:	movw	r1, #37260	; 0x918c
   11ee8:	movt	r0, #2
   11eec:	movt	r1, #2
   11ef0:	ldr	r2, [r0]
   11ef4:	ldr	r0, [sp, #36]	; 0x24
   11ef8:	ldrb	r1, [r1]
   11efc:	cmp	r2, r0
   11f00:	movcc	r0, r2
   11f04:	cmp	r2, r8
   11f08:	movcs	r2, r8
   11f0c:	cmp	r1, #1
   11f10:	bne	11f2c <__assert_fail@plt+0xdd8>
   11f14:	cmp	r2, r0
   11f18:	bne	11f4c <__assert_fail@plt+0xdf8>
   11f1c:	mov	r0, r7
   11f20:	mov	r1, r9
   11f24:	bl	1344c <__assert_fail@plt+0x22f8>
   11f28:	b	11f40 <__assert_fail@plt+0xdec>
   11f2c:	cmp	r2, r0
   11f30:	bne	11f4c <__assert_fail@plt+0xdf8>
   11f34:	mov	r0, r7
   11f38:	mov	r1, r9
   11f3c:	bl	10f5c <memcmp@plt>
   11f40:	mov	r5, r0
   11f44:	cmp	r0, #0
   11f48:	movwne	r5, #1
   11f4c:	movw	r0, #37256	; 0x9188
   11f50:	cmp	r5, #0
   11f54:	movt	r0, #2
   11f58:	ldr	r0, [r0]
   11f5c:	cmpne	r0, #0
   11f60:	bne	11f7c <__assert_fail@plt+0xe28>
   11f64:	clz	r0, r0
   11f68:	mvn	r1, r5
   11f6c:	lsr	r0, r0, #5
   11f70:	tst	r1, r0
   11f74:	beq	11fb0 <__assert_fail@plt+0xe5c>
   11f78:	b	11fe8 <__assert_fail@plt+0xe94>
   11f7c:	cmp	r0, #1
   11f80:	cmpne	r0, #4
   11f84:	bne	12008 <__assert_fail@plt+0xeb4>
   11f88:	movw	r0, #37220	; 0x9164
   11f8c:	movt	r0, #2
   11f90:	ldr	r0, [r0]
   11f94:	ldr	r1, [r0, #20]
   11f98:	ldr	r2, [r0, #24]
   11f9c:	cmp	r1, r2
   11fa0:	bcs	1202c <__assert_fail@plt+0xed8>
   11fa4:	add	r2, r1, #1
   11fa8:	str	r2, [r0, #20]
   11fac:	strb	r4, [r1]
   11fb0:	movw	r0, #37220	; 0x9164
   11fb4:	ldr	r2, [sl, #4]
   11fb8:	mov	r1, #1
   11fbc:	movt	r0, #2
   11fc0:	str	r1, [sp, #32]
   11fc4:	mov	r1, #1
   11fc8:	ldr	r3, [r0]
   11fcc:	ldr	r0, [sl, #8]
   11fd0:	bl	10f50 <fwrite_unlocked@plt>
   11fd4:	mov	r0, sl
   11fd8:	ldr	sl, [sp, #40]	; 0x28
   11fdc:	mov	r9, r7
   11fe0:	str	r8, [sp, #36]	; 0x24
   11fe4:	str	r0, [sp, #40]	; 0x28
   11fe8:	movw	r6, #37216	; 0x9160
   11fec:	ldr	r8, [sp, #20]
   11ff0:	movt	r6, #2
   11ff4:	ldr	r1, [r6]
   11ff8:	ldrb	r0, [r1]
   11ffc:	tst	r0, #16
   12000:	beq	11ea4 <__assert_fail@plt+0xd50>
   12004:	b	12384 <__assert_fail@plt+0x1230>
   12008:	ldr	r1, [sp, #32]
   1200c:	orr	r0, r0, #1
   12010:	subs	r0, r0, #3
   12014:	movwne	r0, #1
   12018:	mvn	r1, r1
   1201c:	orr	r0, r1, r0
   12020:	tst	r0, #1
   12024:	beq	11f88 <__assert_fail@plt+0xe34>
   12028:	b	11fb0 <__assert_fail@plt+0xe5c>
   1202c:	ldr	r1, [sp, #28]
   12030:	bl	110f4 <__overflow@plt>
   12034:	movw	r0, #37256	; 0x9188
   12038:	movt	r0, #2
   1203c:	ldr	r0, [r0]
   12040:	b	11f64 <__assert_fail@plt+0xe10>
   12044:	ldr	r1, [r6]
   12048:	add	r7, sp, #52	; 0x34
   1204c:	uxtb	r2, r4
   12050:	mov	r0, r7
   12054:	str	r2, [sp, #32]
   12058:	bl	13358 <__assert_fail@plt+0x2204>
   1205c:	cmp	r0, #0
   12060:	beq	1246c <__assert_fail@plt+0x1318>
   12064:	mov	r0, r7
   12068:	bl	126d8 <__assert_fail@plt+0x1584>
   1206c:	ldr	r1, [sp, #56]	; 0x38
   12070:	ldr	r2, [sp, #60]	; 0x3c
   12074:	mov	ip, r0
   12078:	mvn	r0, r0
   1207c:	mov	r3, #0
   12080:	str	r4, [sp, #16]
   12084:	add	r0, r1, r0
   12088:	add	sl, r0, r2
   1208c:	mov	r0, #0
   12090:	str	r0, [sp, #36]	; 0x24
   12094:	mov	r0, #1
   12098:	str	r0, [sp, #24]
   1209c:	ldr	r1, [r6]
   120a0:	ldrb	r0, [r1]
   120a4:	tst	r0, #16
   120a8:	bne	123d4 <__assert_fail@plt+0x1280>
   120ac:	ldr	r2, [sp, #32]
   120b0:	mov	r0, r5
   120b4:	mov	r9, ip
   120b8:	mov	r4, r3
   120bc:	bl	13358 <__assert_fail@plt+0x2204>
   120c0:	cmp	r0, #0
   120c4:	beq	12144 <__assert_fail@plt+0xff0>
   120c8:	mov	r0, r5
   120cc:	str	r7, [sp, #40]	; 0x28
   120d0:	bl	126d8 <__assert_fail@plt+0x1584>
   120d4:	mov	ip, r0
   120d8:	movw	r0, #37240	; 0x9178
   120dc:	mov	r8, #1
   120e0:	movt	r0, #2
   120e4:	mvn	r6, ip
   120e8:	ldr	r2, [r0]
   120ec:	ldmib	r5, {r1, r3}
   120f0:	mov	r0, sl
   120f4:	add	r1, r1, r6
   120f8:	cmp	r2, sl
   120fc:	add	r1, r1, r3
   12100:	movcc	r0, r2
   12104:	cmp	r2, r1
   12108:	str	r1, [sp, #28]
   1210c:	movcs	r2, r1
   12110:	movw	r1, #37260	; 0x918c
   12114:	movt	r1, #2
   12118:	ldrb	r1, [r1]
   1211c:	cmp	r1, #1
   12120:	bne	1216c <__assert_fail@plt+0x1018>
   12124:	ldr	r6, [sp, #36]	; 0x24
   12128:	cmp	r2, r0
   1212c:	bne	12198 <__assert_fail@plt+0x1044>
   12130:	mov	r0, ip
   12134:	mov	r1, r9
   12138:	mov	r7, ip
   1213c:	bl	1344c <__assert_fail@plt+0x22f8>
   12140:	b	12188 <__assert_fail@plt+0x1034>
   12144:	ldr	r0, [r6]
   12148:	mov	ip, r9
   1214c:	mov	r3, r4
   12150:	ldrb	r0, [r0]
   12154:	tst	r0, #32
   12158:	mov	r0, #6
   1215c:	movweq	r0, #8
   12160:	cmp	r0, #0
   12164:	beq	1209c <__assert_fail@plt+0xf48>
   12168:	b	123dc <__assert_fail@plt+0x1288>
   1216c:	ldr	r6, [sp, #36]	; 0x24
   12170:	cmp	r2, r0
   12174:	bne	12198 <__assert_fail@plt+0x1044>
   12178:	mov	r0, ip
   1217c:	mov	r1, r9
   12180:	mov	r7, ip
   12184:	bl	10f5c <memcmp@plt>
   12188:	mov	r8, r0
   1218c:	cmp	r0, #0
   12190:	mov	ip, r7
   12194:	movwne	r8, #1
   12198:	eor	r0, r8, #1
   1219c:	adds	r0, r6, r0
   121a0:	adc	r1, r4, #0
   121a4:	subs	r6, r0, #1
   121a8:	and	r2, r0, r1
   121ac:	sbc	r3, r1, #0
   121b0:	cmn	r2, #1
   121b4:	movne	r6, r0
   121b8:	movw	r0, #37252	; 0x9184
   121bc:	movne	r3, r1
   121c0:	movt	r0, #2
   121c4:	ldr	r0, [r0]
   121c8:	cmp	r0, #0
   121cc:	beq	1220c <__assert_fail@plt+0x10b8>
   121d0:	ldr	r4, [sp, #16]
   121d4:	cmp	r8, #0
   121d8:	beq	12218 <__assert_fail@plt+0x10c4>
   121dc:	ldr	r1, [sp, #24]
   121e0:	orr	r0, r6, r3
   121e4:	clz	r0, r0
   121e8:	lsr	r0, r0, #5
   121ec:	and	r1, r1, r0
   121f0:	str	r1, [sp, #24]
   121f4:	orrs	r0, r6, r3
   121f8:	bne	12284 <__assert_fail@plt+0x1130>
   121fc:	movw	r0, #37245	; 0x917d
   12200:	ldr	sl, [sp, #28]
   12204:	movt	r0, #2
   12208:	b	12298 <__assert_fail@plt+0x1144>
   1220c:	cmp	r8, #0
   12210:	beq	12264 <__assert_fail@plt+0x1110>
   12214:	b	1227c <__assert_fail@plt+0x1128>
   12218:	eor	r1, r6, #1
   1221c:	orrs	r1, r1, r3
   12220:	bne	12264 <__assert_fail@plt+0x1110>
   12224:	cmp	r0, #1
   12228:	beq	1223c <__assert_fail@plt+0x10e8>
   1222c:	cmp	r0, #2
   12230:	ldreq	r0, [sp, #24]
   12234:	tsteq	r0, #1
   12238:	bne	12264 <__assert_fail@plt+0x1110>
   1223c:	movw	r0, #37220	; 0x9164
   12240:	movt	r0, #2
   12244:	ldr	r0, [r0]
   12248:	ldr	r1, [r0, #20]
   1224c:	ldr	r2, [r0, #24]
   12250:	cmp	r1, r2
   12254:	bcs	12368 <__assert_fail@plt+0x1214>
   12258:	add	r2, r1, #1
   1225c:	str	r2, [r0, #20]
   12260:	strb	r4, [r1]
   12264:	movw	r0, #37246	; 0x917e
   12268:	movt	r0, #2
   1226c:	ldrb	r1, [r0]
   12270:	mov	r0, #0
   12274:	cmp	r1, #1
   12278:	bne	122a8 <__assert_fail@plt+0x1154>
   1227c:	orrs	r0, r6, r3
   12280:	beq	121fc <__assert_fail@plt+0x10a8>
   12284:	ldr	sl, [sp, #28]
   12288:	cmp	r8, #0
   1228c:	beq	122c8 <__assert_fail@plt+0x1174>
   12290:	movw	r0, #37244	; 0x917c
   12294:	movt	r0, #2
   12298:	ldrb	r0, [r0]
   1229c:	cmp	r0, #0
   122a0:	bne	122dc <__assert_fail@plt+0x1188>
   122a4:	b	12338 <__assert_fail@plt+0x11e4>
   122a8:	ldr	r7, [sp, #40]	; 0x28
   122ac:	str	r6, [sp, #36]	; 0x24
   122b0:	movw	r6, #37216	; 0x9160
   122b4:	mov	ip, r9
   122b8:	movt	r6, #2
   122bc:	cmp	r0, #0
   122c0:	beq	1209c <__assert_fail@plt+0xf48>
   122c4:	b	123dc <__assert_fail@plt+0x1288>
   122c8:	movw	r0, #37246	; 0x917e
   122cc:	movt	r0, #2
   122d0:	ldrb	r0, [r0]
   122d4:	cmp	r0, #1
   122d8:	bne	12338 <__assert_fail@plt+0x11e4>
   122dc:	movw	r0, #37248	; 0x9180
   122e0:	mov	r9, ip
   122e4:	mov	r7, r3
   122e8:	movt	r0, #2
   122ec:	ldrb	r0, [r0]
   122f0:	cmp	r0, #0
   122f4:	bne	12310 <__assert_fail@plt+0x11bc>
   122f8:	movw	r1, #31302	; 0x7a46
   122fc:	adds	r2, r6, #1
   12300:	mov	r0, #1
   12304:	adc	r3, r7, #0
   12308:	movt	r1, #1
   1230c:	bl	110ac <__printf_chk@plt>
   12310:	movw	r0, #37220	; 0x9164
   12314:	mov	r1, #1
   12318:	movt	r0, #2
   1231c:	ldr	r3, [r0]
   12320:	ldr	r0, [sp, #40]	; 0x28
   12324:	ldr	r2, [r0, #4]
   12328:	ldr	r0, [r0, #8]
   1232c:	bl	10f50 <fwrite_unlocked@plt>
   12330:	mov	r3, r7
   12334:	mov	ip, r9
   12338:	cmp	r8, #0
   1233c:	mov	r7, r5
   12340:	ldr	r5, [sp, #40]	; 0x28
   12344:	mov	r0, #0
   12348:	movwne	r6, #0
   1234c:	movwne	r3, #0
   12350:	str	r6, [sp, #36]	; 0x24
   12354:	movw	r6, #37216	; 0x9160
   12358:	movt	r6, #2
   1235c:	cmp	r0, #0
   12360:	beq	1209c <__assert_fail@plt+0xf48>
   12364:	b	123dc <__assert_fail@plt+0x1288>
   12368:	ldr	r1, [sp, #32]
   1236c:	mov	r4, r3
   12370:	mov	r7, ip
   12374:	bl	110f4 <__overflow@plt>
   12378:	mov	ip, r7
   1237c:	mov	r3, r4
   12380:	b	12264 <__assert_fail@plt+0x1110>
   12384:	movw	r0, #37256	; 0x9188
   12388:	movt	r0, #2
   1238c:	ldr	r0, [r0]
   12390:	cmp	r0, #4
   12394:	cmpne	r0, #2
   12398:	bne	1246c <__assert_fail@plt+0x1318>
   1239c:	ldr	r0, [sp, #32]
   123a0:	tst	r0, #1
   123a4:	beq	1246c <__assert_fail@plt+0x1318>
   123a8:	movw	r0, #37220	; 0x9164
   123ac:	movt	r0, #2
   123b0:	ldr	r0, [r0]
   123b4:	ldr	r1, [r0, #20]
   123b8:	ldr	r2, [r0, #24]
   123bc:	cmp	r1, r2
   123c0:	bcs	124a4 <__assert_fail@plt+0x1350>
   123c4:	add	r2, r1, #1
   123c8:	str	r2, [r0, #20]
   123cc:	strb	r4, [r1]
   123d0:	b	1246c <__assert_fail@plt+0x1318>
   123d4:	ldr	r8, [sp, #20]
   123d8:	b	123e8 <__assert_fail@plt+0x1294>
   123dc:	ldr	r8, [sp, #20]
   123e0:	cmp	r0, #8
   123e4:	bne	1246c <__assert_fail@plt+0x1318>
   123e8:	ldr	r0, [sp, #36]	; 0x24
   123ec:	orrs	r0, r0, r3
   123f0:	beq	1240c <__assert_fail@plt+0x12b8>
   123f4:	movw	r0, #37244	; 0x917c
   123f8:	movt	r0, #2
   123fc:	ldrb	r0, [r0]
   12400:	cmp	r0, #1
   12404:	beq	12420 <__assert_fail@plt+0x12cc>
   12408:	b	1246c <__assert_fail@plt+0x1318>
   1240c:	movw	r0, #37245	; 0x917d
   12410:	movt	r0, #2
   12414:	ldrb	r0, [r0]
   12418:	cmp	r0, #0
   1241c:	beq	1246c <__assert_fail@plt+0x1318>
   12420:	movw	r0, #37248	; 0x9180
   12424:	movt	r0, #2
   12428:	ldrb	r0, [r0]
   1242c:	cmp	r0, #0
   12430:	bne	12450 <__assert_fail@plt+0x12fc>
   12434:	ldr	r0, [sp, #36]	; 0x24
   12438:	movw	r1, #31302	; 0x7a46
   1243c:	movt	r1, #1
   12440:	adds	r2, r0, #1
   12444:	mov	r0, #1
   12448:	adc	r3, r3, #0
   1244c:	bl	110ac <__printf_chk@plt>
   12450:	movw	r0, #37220	; 0x9164
   12454:	ldr	r2, [r7, #4]
   12458:	mov	r1, #1
   1245c:	movt	r0, #2
   12460:	ldr	r3, [r0]
   12464:	ldr	r0, [r7, #8]
   12468:	bl	10f50 <fwrite_unlocked@plt>
   1246c:	ldr	r0, [r6]
   12470:	ldrb	r1, [r0]
   12474:	tst	r1, #32
   12478:	bne	125fc <__assert_fail@plt+0x14a8>
   1247c:	bl	12e50 <__assert_fail@plt+0x1cfc>
   12480:	cmp	r0, #0
   12484:	bne	125fc <__assert_fail@plt+0x14a8>
   12488:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1248c:	bl	12f48 <__assert_fail@plt+0x1df4>
   12490:	ldr	r0, [sp, #60]	; 0x3c
   12494:	bl	12f48 <__assert_fail@plt+0x1df4>
   12498:	mov	r0, #0
   1249c:	sub	sp, fp, #28
   124a0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   124a4:	uxtb	r1, r4
   124a8:	bl	110f4 <__overflow@plt>
   124ac:	b	1246c <__assert_fail@plt+0x1318>
   124b0:	mov	r0, #1
   124b4:	bl	11250 <__assert_fail@plt+0xfc>
   124b8:	movw	r1, #30416	; 0x76d0
   124bc:	mov	r0, #0
   124c0:	mov	r2, #5
   124c4:	movt	r1, #1
   124c8:	bl	10f68 <dcgettext@plt>
   124cc:	mov	r5, r0
   124d0:	ldr	r0, [r7]
   124d4:	ldr	r0, [r9, r0, lsl #2]
   124d8:	bl	15130 <__assert_fail@plt+0x3fdc>
   124dc:	mov	r3, r0
   124e0:	mov	r0, #0
   124e4:	mov	r1, #0
   124e8:	mov	r2, r5
   124ec:	bl	10fe0 <error@plt>
   124f0:	mov	r0, #1
   124f4:	bl	11250 <__assert_fail@plt+0xfc>
   124f8:	movw	r0, #37112	; 0x90f8
   124fc:	movw	r2, #30590	; 0x777e
   12500:	mov	r1, #0
   12504:	movw	r7, #30570	; 0x776a
   12508:	movt	r0, #2
   1250c:	movt	r2, #1
   12510:	str	r1, [sp, #8]
   12514:	movw	r1, #30347	; 0x768b
   12518:	movt	r7, #1
   1251c:	ldr	r3, [r0]
   12520:	movw	r0, #37220	; 0x9164
   12524:	str	r2, [sp, #4]
   12528:	movw	r2, #30556	; 0x775c
   1252c:	movt	r1, #1
   12530:	str	r7, [sp]
   12534:	movt	r0, #2
   12538:	movt	r2, #1
   1253c:	ldr	r0, [r0]
   12540:	bl	156ec <__assert_fail@plt+0x4598>
   12544:	mov	r0, #0
   12548:	bl	11064 <exit@plt>
   1254c:	mov	r0, #0
   12550:	bl	11250 <__assert_fail@plt+0xfc>
   12554:	movw	r1, #30456	; 0x76f8
   12558:	mov	r0, #0
   1255c:	mov	r2, #5
   12560:	movt	r1, #1
   12564:	bl	10f68 <dcgettext@plt>
   12568:	movw	r2, #31276	; 0x7a2c
   1256c:	str	r0, [sp]
   12570:	mov	r0, #1
   12574:	mov	r1, #0
   12578:	mov	r3, sl
   1257c:	movt	r2, #1
   12580:	bl	10fe0 <error@plt>
   12584:	movw	r1, #30489	; 0x7719
   12588:	movt	r1, #1
   1258c:	b	125d4 <__assert_fail@plt+0x1480>
   12590:	movw	r1, #30416	; 0x76d0
   12594:	mov	r0, #0
   12598:	mov	r2, #5
   1259c:	movt	r1, #1
   125a0:	bl	10f68 <dcgettext@plt>
   125a4:	mov	r4, r0
   125a8:	movw	r0, #37224	; 0x9168
   125ac:	movt	r0, #2
   125b0:	ldr	r0, [r0]
   125b4:	bl	15130 <__assert_fail@plt+0x3fdc>
   125b8:	mov	r3, r0
   125bc:	mov	r0, #0
   125c0:	mov	r1, #0
   125c4:	mov	r2, r4
   125c8:	b	124ec <__assert_fail@plt+0x1398>
   125cc:	movw	r1, #30521	; 0x7739
   125d0:	movt	r1, #1
   125d4:	mov	r0, #0
   125d8:	mov	r2, #5
   125dc:	bl	10f68 <dcgettext@plt>
   125e0:	movw	r2, #31276	; 0x7a2c
   125e4:	str	r0, [sp]
   125e8:	mov	r0, #1
   125ec:	mov	r1, #0
   125f0:	mov	r3, r7
   125f4:	movt	r2, #1
   125f8:	bl	10fe0 <error@plt>
   125fc:	movw	r1, #31285	; 0x7a35
   12600:	mov	r0, #0
   12604:	mov	r2, #5
   12608:	movt	r1, #1
   1260c:	bl	10f68 <dcgettext@plt>
   12610:	mov	r4, r0
   12614:	mov	r0, #4
   12618:	mov	r1, r8
   1261c:	bl	14c08 <__assert_fail@plt+0x3ab4>
   12620:	mov	r3, r0
   12624:	mov	r0, #1
   12628:	mov	r1, #0
   1262c:	mov	r2, r4
   12630:	bl	10fe0 <error@plt>
   12634:	movw	r1, #30606	; 0x778e
   12638:	movt	r1, #1
   1263c:	b	126b4 <__assert_fail@plt+0x1560>
   12640:	movw	r1, #30653	; 0x77bd
   12644:	movt	r1, #1
   12648:	b	126b4 <__assert_fail@plt+0x1560>
   1264c:	bl	11088 <__errno_location@plt>
   12650:	ldr	r4, [r0]
   12654:	mov	r0, #0
   12658:	mov	r1, #3
   1265c:	mov	r2, r8
   12660:	bl	14e84 <__assert_fail@plt+0x3d30>
   12664:	movw	r2, #31742	; 0x7bfe
   12668:	mov	r3, r0
   1266c:	mov	r0, #1
   12670:	mov	r1, r4
   12674:	movt	r2, #1
   12678:	bl	10fe0 <error@plt>
   1267c:	bl	11088 <__errno_location@plt>
   12680:	ldr	r5, [r0]
   12684:	mov	r0, #0
   12688:	mov	r1, #3
   1268c:	mov	r2, r6
   12690:	bl	14e84 <__assert_fail@plt+0x3d30>
   12694:	movw	r2, #31742	; 0x7bfe
   12698:	mov	r3, r0
   1269c:	mov	r0, #1
   126a0:	mov	r1, r5
   126a4:	movt	r2, #1
   126a8:	bl	10fe0 <error@plt>
   126ac:	movw	r1, #30704	; 0x77f0
   126b0:	movt	r1, #1
   126b4:	mov	r0, #0
   126b8:	mov	r2, #5
   126bc:	bl	10f68 <dcgettext@plt>
   126c0:	mov	r2, r0
   126c4:	mov	r0, #0
   126c8:	mov	r1, #0
   126cc:	bl	10fe0 <error@plt>
   126d0:	mov	r0, #1
   126d4:	bl	11250 <__assert_fail@plt+0xfc>
   126d8:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   126dc:	add	fp, sp, #24
   126e0:	ldmib	r0, {r1, r4}
   126e4:	mov	r5, #0
   126e8:	subs	r6, r1, #1
   126ec:	movwne	r0, #37236	; 0x9174
   126f0:	movtne	r0, #2
   126f4:	ldrne	r8, [r0]
   126f8:	cmpne	r8, #0
   126fc:	bne	12724 <__assert_fail@plt+0x15d0>
   12700:	movw	r1, #37232	; 0x9170
   12704:	sub	r0, r6, r5
   12708:	movt	r1, #2
   1270c:	ldr	r1, [r1]
   12710:	cmp	r1, r0
   12714:	movcc	r0, r1
   12718:	add	r0, r0, r5
   1271c:	add	r0, r4, r0
   12720:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   12724:	mov	r5, #0
   12728:	mov	r7, #0
   1272c:	cmp	r5, r6
   12730:	bcs	12764 <__assert_fail@plt+0x1610>
   12734:	bl	11058 <__ctype_b_loc@plt>
   12738:	ldr	r0, [r0]
   1273c:	ldrb	r1, [r4, r5]
   12740:	cmp	r1, #10
   12744:	beq	12758 <__assert_fail@plt+0x1604>
   12748:	add	r1, r0, r1, lsl #1
   1274c:	ldrh	r1, [r1]
   12750:	ands	r1, r1, #1
   12754:	beq	12764 <__assert_fail@plt+0x1610>
   12758:	add	r5, r5, #1
   1275c:	cmp	r5, r6
   12760:	bcc	1273c <__assert_fail@plt+0x15e8>
   12764:	cmp	r5, r6
   12768:	bcs	1279c <__assert_fail@plt+0x1648>
   1276c:	bl	11058 <__ctype_b_loc@plt>
   12770:	ldr	r0, [r0]
   12774:	ldrb	r1, [r4, r5]
   12778:	cmp	r1, #10
   1277c:	beq	1279c <__assert_fail@plt+0x1648>
   12780:	add	r1, r0, r1, lsl #1
   12784:	ldrh	r1, [r1]
   12788:	ands	r1, r1, #1
   1278c:	bne	1279c <__assert_fail@plt+0x1648>
   12790:	add	r5, r5, #1
   12794:	cmp	r5, r6
   12798:	bcc	12774 <__assert_fail@plt+0x1620>
   1279c:	cmp	r6, r5
   127a0:	bls	12700 <__assert_fail@plt+0x15ac>
   127a4:	add	r7, r7, #1
   127a8:	cmp	r7, r8
   127ac:	bcc	1272c <__assert_fail@plt+0x15d8>
   127b0:	b	12700 <__assert_fail@plt+0x15ac>
   127b4:	mov	r0, #1
   127b8:	b	11250 <__assert_fail@plt+0xfc>
   127bc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   127c0:	add	fp, sp, #28
   127c4:	sub	sp, sp, #12
   127c8:	mov	r4, r3
   127cc:	mov	r6, r2
   127d0:	mov	r5, r1
   127d4:	mov	sl, r0
   127d8:	bl	11070 <strlen@plt>
   127dc:	ldr	r8, [r5]
   127e0:	cmp	r8, #0
   127e4:	beq	128a0 <__assert_fail@plt+0x174c>
   127e8:	mov	r7, r0
   127ec:	mov	r0, #0
   127f0:	add	r9, r5, #4
   127f4:	mov	r5, #0
   127f8:	str	r6, [sp, #4]
   127fc:	str	r0, [sp]
   12800:	mvn	r0, #0
   12804:	str	r0, [sp, #8]
   12808:	mov	r0, r8
   1280c:	mov	r1, sl
   12810:	mov	r2, r7
   12814:	bl	11130 <strncmp@plt>
   12818:	cmp	r0, #0
   1281c:	bne	12874 <__assert_fail@plt+0x1720>
   12820:	mov	r0, r8
   12824:	bl	11070 <strlen@plt>
   12828:	cmp	r0, r7
   1282c:	beq	128a4 <__assert_fail@plt+0x1750>
   12830:	ldr	r0, [sp, #8]
   12834:	cmn	r0, #1
   12838:	beq	12870 <__assert_fail@plt+0x171c>
   1283c:	ldr	r0, [sp, #4]
   12840:	cmp	r0, #0
   12844:	beq	12864 <__assert_fail@plt+0x1710>
   12848:	ldr	r1, [sp, #8]
   1284c:	mov	r2, r4
   12850:	mla	r0, r1, r4, r0
   12854:	mov	r1, r6
   12858:	bl	10f5c <memcmp@plt>
   1285c:	cmp	r0, #0
   12860:	beq	12874 <__assert_fail@plt+0x1720>
   12864:	mov	r0, #1
   12868:	str	r0, [sp]
   1286c:	b	12874 <__assert_fail@plt+0x1720>
   12870:	str	r5, [sp, #8]
   12874:	ldr	r8, [r9, r5, lsl #2]
   12878:	add	r6, r6, r4
   1287c:	add	r5, r5, #1
   12880:	cmp	r8, #0
   12884:	bne	12808 <__assert_fail@plt+0x16b4>
   12888:	ldr	r0, [sp]
   1288c:	tst	r0, #1
   12890:	ldr	r0, [sp, #8]
   12894:	mvnne	r0, #1
   12898:	sub	sp, fp, #28
   1289c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   128a0:	mvn	r5, #0
   128a4:	mov	r0, r5
   128a8:	sub	sp, fp, #28
   128ac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   128b0:	push	{r4, r5, r6, r7, fp, lr}
   128b4:	add	fp, sp, #16
   128b8:	mov	r5, r0
   128bc:	ldr	r0, [r1]
   128c0:	mvn	r4, #0
   128c4:	cmp	r0, #0
   128c8:	beq	128f8 <__assert_fail@plt+0x17a4>
   128cc:	add	r7, r1, #4
   128d0:	mov	r6, #0
   128d4:	mov	r1, r5
   128d8:	bl	10ee4 <strcmp@plt>
   128dc:	cmp	r0, #0
   128e0:	moveq	r0, r6
   128e4:	popeq	{r4, r5, r6, r7, fp, pc}
   128e8:	ldr	r0, [r7, r6, lsl #2]
   128ec:	add	r6, r6, #1
   128f0:	cmp	r0, #0
   128f4:	bne	128d4 <__assert_fail@plt+0x1780>
   128f8:	mov	r0, r4
   128fc:	pop	{r4, r5, r6, r7, fp, pc}
   12900:	push	{r4, r5, r6, sl, fp, lr}
   12904:	add	fp, sp, #16
   12908:	sub	sp, sp, #8
   1290c:	mov	r4, r1
   12910:	movw	r1, #31682	; 0x7bc2
   12914:	mov	r5, r0
   12918:	movw	r0, #31655	; 0x7ba7
   1291c:	cmn	r2, #1
   12920:	mov	r2, #5
   12924:	movt	r0, #1
   12928:	movt	r1, #1
   1292c:	moveq	r1, r0
   12930:	mov	r0, #0
   12934:	bl	10f68 <dcgettext@plt>
   12938:	mov	r6, r0
   1293c:	mov	r0, #0
   12940:	mov	r1, #8
   12944:	mov	r2, r4
   12948:	bl	14b60 <__assert_fail@plt+0x3a0c>
   1294c:	mov	r4, r0
   12950:	mov	r0, #1
   12954:	mov	r1, r5
   12958:	bl	15120 <__assert_fail@plt+0x3fcc>
   1295c:	str	r0, [sp]
   12960:	mov	r0, #0
   12964:	mov	r1, #0
   12968:	mov	r2, r6
   1296c:	mov	r3, r4
   12970:	bl	10fe0 <error@plt>
   12974:	sub	sp, fp, #16
   12978:	pop	{r4, r5, r6, sl, fp, pc}
   1297c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12980:	add	fp, sp, #28
   12984:	sub	sp, sp, #4
   12988:	mov	r5, r1
   1298c:	movw	r1, #31711	; 0x7bdf
   12990:	mov	sl, r2
   12994:	mov	r7, r0
   12998:	mov	r0, #0
   1299c:	mov	r2, #5
   129a0:	mov	r8, #0
   129a4:	movt	r1, #1
   129a8:	bl	10f68 <dcgettext@plt>
   129ac:	movw	r4, #37208	; 0x9158
   129b0:	movt	r4, #2
   129b4:	ldr	r1, [r4]
   129b8:	bl	10ecc <fputs_unlocked@plt>
   129bc:	ldr	r6, [r7]
   129c0:	cmp	r6, #0
   129c4:	beq	12a64 <__assert_fail@plt+0x1910>
   129c8:	add	r9, r7, #4
   129cc:	mov	r7, #0
   129d0:	str	sl, [sp]
   129d4:	cmp	r8, #0
   129d8:	beq	129f4 <__assert_fail@plt+0x18a0>
   129dc:	mov	r0, r7
   129e0:	mov	r1, r5
   129e4:	mov	r2, sl
   129e8:	bl	10f5c <memcmp@plt>
   129ec:	cmp	r0, #0
   129f0:	beq	12a20 <__assert_fail@plt+0x18cc>
   129f4:	ldr	r7, [r4]
   129f8:	mov	r0, r6
   129fc:	bl	15130 <__assert_fail@plt+0x3fdc>
   12a00:	movw	r2, #31732	; 0x7bf4
   12a04:	mov	r3, r0
   12a08:	mov	r0, r7
   12a0c:	mov	r1, #1
   12a10:	movt	r2, #1
   12a14:	bl	110c4 <__fprintf_chk@plt>
   12a18:	mov	r7, r5
   12a1c:	b	12a50 <__assert_fail@plt+0x18fc>
   12a20:	mov	sl, r9
   12a24:	ldr	r9, [r4]
   12a28:	mov	r0, r6
   12a2c:	bl	15130 <__assert_fail@plt+0x3fdc>
   12a30:	mov	r3, r0
   12a34:	mov	r0, r9
   12a38:	mov	r9, sl
   12a3c:	ldr	sl, [sp]
   12a40:	movw	r2, #31740	; 0x7bfc
   12a44:	mov	r1, #1
   12a48:	movt	r2, #1
   12a4c:	bl	110c4 <__fprintf_chk@plt>
   12a50:	ldr	r6, [r9, -r8, lsl #2]
   12a54:	add	r5, r5, sl
   12a58:	sub	r8, r8, #1
   12a5c:	cmp	r6, #0
   12a60:	bne	129d4 <__assert_fail@plt+0x1880>
   12a64:	ldr	r0, [r4]
   12a68:	ldr	r1, [r0, #20]
   12a6c:	ldr	r2, [r0, #24]
   12a70:	cmp	r1, r2
   12a74:	addcc	r2, r1, #1
   12a78:	strcc	r2, [r0, #20]
   12a7c:	movcc	r0, #10
   12a80:	strbcc	r0, [r1]
   12a84:	subcc	sp, fp, #28
   12a88:	popcc	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12a8c:	mov	r1, #10
   12a90:	sub	sp, fp, #28
   12a94:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12a98:	b	110f4 <__overflow@plt>
   12a9c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12aa0:	add	fp, sp, #28
   12aa4:	sub	sp, sp, #20
   12aa8:	mov	r9, r0
   12aac:	ldr	r0, [fp, #16]
   12ab0:	mov	r8, r3
   12ab4:	mov	sl, r2
   12ab8:	mov	r7, r1
   12abc:	cmp	r0, #0
   12ac0:	beq	12b98 <__assert_fail@plt+0x1a44>
   12ac4:	mov	r0, r7
   12ac8:	str	r9, [sp, #8]
   12acc:	str	r8, [sp, #16]
   12ad0:	bl	11070 <strlen@plt>
   12ad4:	ldr	r9, [sl]
   12ad8:	cmp	r9, #0
   12adc:	beq	12bd8 <__assert_fail@plt+0x1a84>
   12ae0:	str	sl, [sp, #4]
   12ae4:	add	r8, sl, #4
   12ae8:	ldr	sl, [sp, #16]
   12aec:	mov	r4, r0
   12af0:	mov	r0, #0
   12af4:	mvn	r6, #0
   12af8:	mov	r5, #0
   12afc:	str	r0, [sp, #12]
   12b00:	mov	r0, r9
   12b04:	mov	r1, r7
   12b08:	mov	r2, r4
   12b0c:	bl	11130 <strncmp@plt>
   12b10:	cmp	r0, #0
   12b14:	bne	12b64 <__assert_fail@plt+0x1a10>
   12b18:	mov	r0, r9
   12b1c:	bl	11070 <strlen@plt>
   12b20:	cmp	r0, r4
   12b24:	beq	12be4 <__assert_fail@plt+0x1a90>
   12b28:	cmn	r6, #1
   12b2c:	beq	12b60 <__assert_fail@plt+0x1a0c>
   12b30:	ldr	r0, [sp, #16]
   12b34:	cmp	r0, #0
   12b38:	beq	12b54 <__assert_fail@plt+0x1a00>
   12b3c:	ldr	r2, [fp, #8]
   12b40:	mov	r1, sl
   12b44:	mla	r0, r6, r2, r0
   12b48:	bl	10f5c <memcmp@plt>
   12b4c:	cmp	r0, #0
   12b50:	beq	12b64 <__assert_fail@plt+0x1a10>
   12b54:	mov	r0, #1
   12b58:	str	r0, [sp, #12]
   12b5c:	b	12b64 <__assert_fail@plt+0x1a10>
   12b60:	mov	r6, r5
   12b64:	ldr	r9, [r8, r5, lsl #2]
   12b68:	ldr	r0, [fp, #8]
   12b6c:	add	r5, r5, #1
   12b70:	add	sl, sl, r0
   12b74:	cmp	r9, #0
   12b78:	bne	12b00 <__assert_fail@plt+0x19ac>
   12b7c:	ldr	r0, [sp, #12]
   12b80:	ldr	r8, [sp, #16]
   12b84:	ldr	sl, [sp, #4]
   12b88:	ldr	r9, [sp, #8]
   12b8c:	tst	r0, #1
   12b90:	beq	12bf4 <__assert_fail@plt+0x1aa0>
   12b94:	b	12c00 <__assert_fail@plt+0x1aac>
   12b98:	ldr	r0, [sl]
   12b9c:	movw	r4, #31655	; 0x7ba7
   12ba0:	movt	r4, #1
   12ba4:	cmp	r0, #0
   12ba8:	beq	12c14 <__assert_fail@plt+0x1ac0>
   12bac:	add	r5, sl, #4
   12bb0:	mov	r6, #0
   12bb4:	mov	r1, r7
   12bb8:	bl	10ee4 <strcmp@plt>
   12bbc:	cmp	r0, #0
   12bc0:	beq	12bf4 <__assert_fail@plt+0x1aa0>
   12bc4:	ldr	r0, [r5, r6, lsl #2]
   12bc8:	add	r6, r6, #1
   12bcc:	cmp	r0, #0
   12bd0:	bne	12bb4 <__assert_fail@plt+0x1a60>
   12bd4:	b	12c14 <__assert_fail@plt+0x1ac0>
   12bd8:	ldr	r8, [sp, #16]
   12bdc:	ldr	r9, [sp, #8]
   12be0:	b	12c0c <__assert_fail@plt+0x1ab8>
   12be4:	ldr	r8, [sp, #16]
   12be8:	ldr	sl, [sp, #4]
   12bec:	ldr	r9, [sp, #8]
   12bf0:	mov	r6, r5
   12bf4:	cmn	r6, #1
   12bf8:	bgt	12c7c <__assert_fail@plt+0x1b28>
   12bfc:	beq	12c0c <__assert_fail@plt+0x1ab8>
   12c00:	movw	r4, #31682	; 0x7bc2
   12c04:	movt	r4, #1
   12c08:	b	12c14 <__assert_fail@plt+0x1ac0>
   12c0c:	movw	r4, #31655	; 0x7ba7
   12c10:	movt	r4, #1
   12c14:	ldr	r6, [fp, #12]
   12c18:	mov	r0, #0
   12c1c:	mov	r1, r4
   12c20:	mov	r2, #5
   12c24:	bl	10f68 <dcgettext@plt>
   12c28:	mov	r4, r0
   12c2c:	mov	r0, #0
   12c30:	mov	r1, #8
   12c34:	mov	r2, r7
   12c38:	bl	14b60 <__assert_fail@plt+0x3a0c>
   12c3c:	mov	r5, r0
   12c40:	mov	r0, #1
   12c44:	mov	r1, r9
   12c48:	bl	15120 <__assert_fail@plt+0x3fcc>
   12c4c:	str	r0, [sp]
   12c50:	mov	r0, #0
   12c54:	mov	r1, #0
   12c58:	mov	r2, r4
   12c5c:	mov	r3, r5
   12c60:	bl	10fe0 <error@plt>
   12c64:	ldr	r2, [fp, #8]
   12c68:	mov	r0, sl
   12c6c:	mov	r1, r8
   12c70:	bl	1297c <__assert_fail@plt+0x1828>
   12c74:	blx	r6
   12c78:	mvn	r6, #0
   12c7c:	mov	r0, r6
   12c80:	sub	sp, fp, #28
   12c84:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12c88:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   12c8c:	add	fp, sp, #24
   12c90:	ldr	r6, [r1]
   12c94:	cmp	r6, #0
   12c98:	beq	12cfc <__assert_fail@plt+0x1ba8>
   12c9c:	mov	r8, r1
   12ca0:	mov	r7, r2
   12ca4:	mov	r1, r2
   12ca8:	mov	r2, r3
   12cac:	mov	r4, r3
   12cb0:	mov	r9, r0
   12cb4:	bl	10f5c <memcmp@plt>
   12cb8:	cmp	r0, #0
   12cbc:	beq	12cf4 <__assert_fail@plt+0x1ba0>
   12cc0:	add	r7, r7, r4
   12cc4:	add	r5, r8, #4
   12cc8:	ldr	r6, [r5]
   12ccc:	cmp	r6, #0
   12cd0:	beq	12cfc <__assert_fail@plt+0x1ba8>
   12cd4:	mov	r0, r9
   12cd8:	mov	r1, r7
   12cdc:	mov	r2, r4
   12ce0:	bl	10f5c <memcmp@plt>
   12ce4:	add	r7, r7, r4
   12ce8:	add	r5, r5, #4
   12cec:	cmp	r0, #0
   12cf0:	bne	12cc8 <__assert_fail@plt+0x1b74>
   12cf4:	mov	r0, r6
   12cf8:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   12cfc:	mov	r6, #0
   12d00:	mov	r0, r6
   12d04:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   12d08:	movw	r1, #37264	; 0x9190
   12d0c:	movt	r1, #2
   12d10:	str	r0, [r1]
   12d14:	bx	lr
   12d18:	movw	r1, #37268	; 0x9194
   12d1c:	movt	r1, #2
   12d20:	strb	r0, [r1]
   12d24:	bx	lr
   12d28:	push	{r4, r5, r6, sl, fp, lr}
   12d2c:	add	fp, sp, #16
   12d30:	sub	sp, sp, #8
   12d34:	movw	r0, #37220	; 0x9164
   12d38:	movt	r0, #2
   12d3c:	ldr	r0, [r0]
   12d40:	bl	16c3c <__assert_fail@plt+0x5ae8>
   12d44:	cmp	r0, #0
   12d48:	beq	12d70 <__assert_fail@plt+0x1c1c>
   12d4c:	movw	r0, #37268	; 0x9194
   12d50:	movt	r0, #2
   12d54:	ldrb	r0, [r0]
   12d58:	cmp	r0, #0
   12d5c:	beq	12d90 <__assert_fail@plt+0x1c3c>
   12d60:	bl	11088 <__errno_location@plt>
   12d64:	ldr	r0, [r0]
   12d68:	cmp	r0, #32
   12d6c:	bne	12d90 <__assert_fail@plt+0x1c3c>
   12d70:	movw	r0, #37208	; 0x9158
   12d74:	movt	r0, #2
   12d78:	ldr	r0, [r0]
   12d7c:	bl	16c3c <__assert_fail@plt+0x5ae8>
   12d80:	cmp	r0, #0
   12d84:	subeq	sp, fp, #16
   12d88:	popeq	{r4, r5, r6, sl, fp, pc}
   12d8c:	b	12e00 <__assert_fail@plt+0x1cac>
   12d90:	movw	r1, #31745	; 0x7c01
   12d94:	mov	r0, #0
   12d98:	mov	r2, #5
   12d9c:	movt	r1, #1
   12da0:	bl	10f68 <dcgettext@plt>
   12da4:	mov	r4, r0
   12da8:	movw	r0, #37264	; 0x9190
   12dac:	movt	r0, #2
   12db0:	ldr	r6, [r0]
   12db4:	bl	11088 <__errno_location@plt>
   12db8:	ldr	r5, [r0]
   12dbc:	cmp	r6, #0
   12dc0:	bne	12ddc <__assert_fail@plt+0x1c88>
   12dc4:	movw	r2, #31742	; 0x7bfe
   12dc8:	mov	r0, #0
   12dcc:	mov	r1, r5
   12dd0:	mov	r3, r4
   12dd4:	movt	r2, #1
   12dd8:	b	12dfc <__assert_fail@plt+0x1ca8>
   12ddc:	mov	r0, r6
   12de0:	bl	14da8 <__assert_fail@plt+0x3c54>
   12de4:	movw	r2, #31276	; 0x7a2c
   12de8:	mov	r3, r0
   12dec:	str	r4, [sp]
   12df0:	mov	r0, #0
   12df4:	mov	r1, r5
   12df8:	movt	r2, #1
   12dfc:	bl	10fe0 <error@plt>
   12e00:	movw	r0, #37120	; 0x9100
   12e04:	movt	r0, #2
   12e08:	ldr	r0, [r0]
   12e0c:	bl	10f20 <_exit@plt>
   12e10:	b	10efc <posix_fadvise64@plt>
   12e14:	cmp	r0, #0
   12e18:	bxeq	lr
   12e1c:	push	{r4, sl, fp, lr}
   12e20:	add	fp, sp, #8
   12e24:	sub	sp, sp, #16
   12e28:	mov	r4, r1
   12e2c:	bl	110b8 <fileno@plt>
   12e30:	mov	r1, #0
   12e34:	mov	r2, #0
   12e38:	mov	r3, #0
   12e3c:	str	r1, [sp]
   12e40:	stmib	sp, {r1, r4}
   12e44:	bl	10efc <posix_fadvise64@plt>
   12e48:	sub	sp, fp, #8
   12e4c:	pop	{r4, sl, fp, pc}
   12e50:	push	{r4, r5, r6, sl, fp, lr}
   12e54:	add	fp, sp, #16
   12e58:	sub	sp, sp, #8
   12e5c:	mov	r4, r0
   12e60:	bl	110b8 <fileno@plt>
   12e64:	cmn	r0, #1
   12e68:	ble	12edc <__assert_fail@plt+0x1d88>
   12e6c:	mov	r0, r4
   12e70:	bl	1101c <__freading@plt>
   12e74:	cmp	r0, #0
   12e78:	beq	12ea4 <__assert_fail@plt+0x1d50>
   12e7c:	mov	r0, r4
   12e80:	bl	110b8 <fileno@plt>
   12e84:	mov	r1, #1
   12e88:	mov	r2, #0
   12e8c:	mov	r3, #0
   12e90:	str	r1, [sp]
   12e94:	bl	10fb0 <lseek64@plt>
   12e98:	and	r0, r0, r1
   12e9c:	cmn	r0, #1
   12ea0:	beq	12edc <__assert_fail@plt+0x1d88>
   12ea4:	mov	r0, r4
   12ea8:	bl	12eec <__assert_fail@plt+0x1d98>
   12eac:	cmp	r0, #0
   12eb0:	beq	12edc <__assert_fail@plt+0x1d88>
   12eb4:	bl	11088 <__errno_location@plt>
   12eb8:	ldr	r6, [r0]
   12ebc:	mov	r5, r0
   12ec0:	mov	r0, r4
   12ec4:	bl	110d0 <fclose@plt>
   12ec8:	cmp	r6, #0
   12ecc:	strne	r6, [r5]
   12ed0:	mvnne	r0, #0
   12ed4:	sub	sp, fp, #16
   12ed8:	pop	{r4, r5, r6, sl, fp, pc}
   12edc:	mov	r0, r4
   12ee0:	sub	sp, fp, #16
   12ee4:	pop	{r4, r5, r6, sl, fp, lr}
   12ee8:	b	110d0 <fclose@plt>
   12eec:	push	{r4, sl, fp, lr}
   12ef0:	add	fp, sp, #8
   12ef4:	sub	sp, sp, #8
   12ef8:	mov	r4, r0
   12efc:	cmp	r0, #0
   12f00:	beq	12f1c <__assert_fail@plt+0x1dc8>
   12f04:	mov	r0, r4
   12f08:	bl	1101c <__freading@plt>
   12f0c:	cmp	r0, #0
   12f10:	ldrbne	r0, [r4, #1]
   12f14:	tstne	r0, #1
   12f18:	bne	12f2c <__assert_fail@plt+0x1dd8>
   12f1c:	mov	r0, r4
   12f20:	sub	sp, fp, #8
   12f24:	pop	{r4, sl, fp, lr}
   12f28:	b	10f08 <fflush@plt>
   12f2c:	mov	r0, #1
   12f30:	mov	r2, #0
   12f34:	mov	r3, #0
   12f38:	str	r0, [sp]
   12f3c:	mov	r0, r4
   12f40:	bl	131b8 <__assert_fail@plt+0x2064>
   12f44:	b	12f1c <__assert_fail@plt+0x1dc8>
   12f48:	push	{r4, r5, r6, sl, fp, lr}
   12f4c:	add	fp, sp, #16
   12f50:	mov	r4, r0
   12f54:	bl	11088 <__errno_location@plt>
   12f58:	ldr	r6, [r0]
   12f5c:	mov	r5, r0
   12f60:	mov	r0, r4
   12f64:	bl	10f14 <free@plt>
   12f68:	str	r6, [r5]
   12f6c:	pop	{r4, r5, r6, sl, fp, pc}
   12f70:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12f74:	add	fp, sp, #28
   12f78:	sub	sp, sp, #4
   12f7c:	mov	r5, r0
   12f80:	mov	r0, r2
   12f84:	mov	r4, r2
   12f88:	mov	r9, r1
   12f8c:	bl	110b8 <fileno@plt>
   12f90:	mov	r7, #0
   12f94:	cmp	r0, #0
   12f98:	beq	12fd8 <__assert_fail@plt+0x1e84>
   12f9c:	cmp	r0, #1
   12fa0:	beq	12fe4 <__assert_fail@plt+0x1e90>
   12fa4:	cmp	r0, #2
   12fa8:	beq	12fc0 <__assert_fail@plt+0x1e6c>
   12fac:	mov	r0, #2
   12fb0:	mov	r1, #2
   12fb4:	bl	10f74 <dup2@plt>
   12fb8:	subs	r7, r0, #2
   12fbc:	movwne	r7, #1
   12fc0:	mov	r0, #1
   12fc4:	mov	r1, #1
   12fc8:	bl	10f74 <dup2@plt>
   12fcc:	subs	r6, r0, #1
   12fd0:	movwne	r6, #1
   12fd4:	b	12fe8 <__assert_fail@plt+0x1e94>
   12fd8:	mov	r6, #0
   12fdc:	mov	r8, #0
   12fe0:	b	130b0 <__assert_fail@plt+0x1f5c>
   12fe4:	mov	r6, #0
   12fe8:	mov	r0, #0
   12fec:	mov	r1, #0
   12ff0:	mov	sl, #0
   12ff4:	bl	10f74 <dup2@plt>
   12ff8:	cmp	r0, #0
   12ffc:	mov	r8, #0
   13000:	beq	13040 <__assert_fail@plt+0x1eec>
   13004:	movw	r0, #31757	; 0x7c0d
   13008:	mov	r1, #0
   1300c:	movt	r0, #1
   13010:	bl	10fec <open64@plt>
   13014:	cmp	r0, #0
   13018:	beq	1303c <__assert_fail@plt+0x1ee8>
   1301c:	cmn	r0, #1
   13020:	ble	1313c <__assert_fail@plt+0x1fe8>
   13024:	bl	11148 <close@plt>
   13028:	bl	11088 <__errno_location@plt>
   1302c:	mov	r4, r0
   13030:	mov	r0, #9
   13034:	str	r0, [r4]
   13038:	b	13144 <__assert_fail@plt+0x1ff0>
   1303c:	mov	r8, #1
   13040:	cmp	r6, #0
   13044:	beq	13064 <__assert_fail@plt+0x1f10>
   13048:	movw	r0, #31757	; 0x7c0d
   1304c:	mov	r1, #0
   13050:	movt	r0, #1
   13054:	bl	10fec <open64@plt>
   13058:	mov	sl, #1
   1305c:	cmp	r0, #1
   13060:	bne	1311c <__assert_fail@plt+0x1fc8>
   13064:	cmp	r7, #0
   13068:	beq	130a8 <__assert_fail@plt+0x1f54>
   1306c:	movw	r0, #31757	; 0x7c0d
   13070:	mov	r1, #0
   13074:	movt	r0, #1
   13078:	bl	10fec <open64@plt>
   1307c:	mov	r7, #1
   13080:	cmp	r0, #2
   13084:	beq	130ac <__assert_fail@plt+0x1f58>
   13088:	cmn	r0, #1
   1308c:	ble	13194 <__assert_fail@plt+0x2040>
   13090:	bl	11148 <close@plt>
   13094:	bl	11088 <__errno_location@plt>
   13098:	mov	r4, r0
   1309c:	mov	r0, #9
   130a0:	str	r0, [r4]
   130a4:	b	1319c <__assert_fail@plt+0x2048>
   130a8:	mov	r7, #0
   130ac:	mov	r6, sl
   130b0:	mov	r0, r5
   130b4:	mov	r1, r9
   130b8:	mov	r2, r4
   130bc:	bl	11040 <freopen64@plt>
   130c0:	mov	r5, r0
   130c4:	bl	11088 <__errno_location@plt>
   130c8:	ldr	r9, [r0]
   130cc:	mov	r4, r0
   130d0:	cmp	r7, #0
   130d4:	beq	130e0 <__assert_fail@plt+0x1f8c>
   130d8:	mov	r0, #2
   130dc:	bl	11148 <close@plt>
   130e0:	cmp	r6, #0
   130e4:	beq	130f0 <__assert_fail@plt+0x1f9c>
   130e8:	mov	r0, #1
   130ec:	bl	11148 <close@plt>
   130f0:	cmp	r8, #0
   130f4:	beq	13100 <__assert_fail@plt+0x1fac>
   130f8:	mov	r0, #0
   130fc:	bl	11148 <close@plt>
   13100:	cmp	r5, #0
   13104:	bne	13110 <__assert_fail@plt+0x1fbc>
   13108:	mov	r5, #0
   1310c:	str	r9, [r4]
   13110:	mov	r0, r5
   13114:	sub	sp, fp, #28
   13118:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1311c:	cmn	r0, #1
   13120:	ble	1315c <__assert_fail@plt+0x2008>
   13124:	bl	11148 <close@plt>
   13128:	bl	11088 <__errno_location@plt>
   1312c:	mov	r4, r0
   13130:	mov	r0, #9
   13134:	str	r0, [r4]
   13138:	b	13164 <__assert_fail@plt+0x2010>
   1313c:	bl	11088 <__errno_location@plt>
   13140:	mov	r4, r0
   13144:	ldr	r9, [r4]
   13148:	mov	r8, #1
   1314c:	mov	r5, #0
   13150:	cmp	r7, #0
   13154:	bne	130d8 <__assert_fail@plt+0x1f84>
   13158:	b	130e0 <__assert_fail@plt+0x1f8c>
   1315c:	bl	11088 <__errno_location@plt>
   13160:	mov	r4, r0
   13164:	ldr	r9, [r4]
   13168:	mov	r5, #0
   1316c:	cmp	r7, #0
   13170:	beq	130e8 <__assert_fail@plt+0x1f94>
   13174:	mov	r0, #2
   13178:	bl	11148 <close@plt>
   1317c:	mov	r0, #1
   13180:	bl	11148 <close@plt>
   13184:	mov	r5, #0
   13188:	cmp	r8, #0
   1318c:	bne	130f8 <__assert_fail@plt+0x1fa4>
   13190:	b	13108 <__assert_fail@plt+0x1fb4>
   13194:	bl	11088 <__errno_location@plt>
   13198:	mov	r4, r0
   1319c:	ldr	r9, [r4]
   131a0:	mov	r0, #2
   131a4:	bl	11148 <close@plt>
   131a8:	mov	r5, #0
   131ac:	cmp	sl, #0
   131b0:	bne	130e8 <__assert_fail@plt+0x1f94>
   131b4:	b	130f0 <__assert_fail@plt+0x1f9c>
   131b8:	push	{r4, r5, r6, r7, fp, lr}
   131bc:	add	fp, sp, #16
   131c0:	sub	sp, sp, #8
   131c4:	mov	r4, r0
   131c8:	ldr	r0, [r0, #4]
   131cc:	mov	r5, r3
   131d0:	mov	r6, r2
   131d4:	ldr	r1, [r4, #8]
   131d8:	cmp	r1, r0
   131dc:	bne	131f8 <__assert_fail@plt+0x20a4>
   131e0:	ldrd	r0, [r4, #16]
   131e4:	cmp	r1, r0
   131e8:	bne	131f8 <__assert_fail@plt+0x20a4>
   131ec:	ldr	r0, [r4, #36]	; 0x24
   131f0:	cmp	r0, #0
   131f4:	beq	13210 <__assert_fail@plt+0x20bc>
   131f8:	mov	r0, r4
   131fc:	mov	r2, r6
   13200:	mov	r3, r5
   13204:	sub	sp, fp, #16
   13208:	pop	{r4, r5, r6, r7, fp, lr}
   1320c:	b	110dc <fseeko64@plt>
   13210:	ldr	r7, [fp, #8]
   13214:	mov	r0, r4
   13218:	bl	110b8 <fileno@plt>
   1321c:	mov	r2, r6
   13220:	mov	r3, r5
   13224:	str	r7, [sp]
   13228:	bl	10fb0 <lseek64@plt>
   1322c:	and	r2, r0, r1
   13230:	cmn	r2, #1
   13234:	mvneq	r0, #0
   13238:	subeq	sp, fp, #16
   1323c:	popeq	{r4, r5, r6, r7, fp, pc}
   13240:	strd	r0, [r4, #80]	; 0x50
   13244:	ldr	r0, [r4]
   13248:	bic	r0, r0, #16
   1324c:	str	r0, [r4]
   13250:	mov	r0, #0
   13254:	sub	sp, fp, #16
   13258:	pop	{r4, r5, r6, r7, fp, pc}
   1325c:	mov	r1, #0
   13260:	str	r1, [r0]
   13264:	str	r1, [r0, #4]
   13268:	str	r1, [r0, #8]
   1326c:	bx	lr
   13270:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13274:	add	fp, sp, #28
   13278:	sub	sp, sp, #4
   1327c:	mov	r9, r0
   13280:	ldrb	r0, [r1]
   13284:	tst	r0, #16
   13288:	bne	13348 <__assert_fail@plt+0x21f4>
   1328c:	ldr	r4, [r9, #8]
   13290:	ldr	r0, [r9]
   13294:	mov	r5, r1
   13298:	mov	r8, #1
   1329c:	add	sl, r4, r0
   132a0:	mov	r6, r4
   132a4:	ldmib	r5, {r0, r1}
   132a8:	cmp	r0, r1
   132ac:	bcs	13304 <__assert_fail@plt+0x21b0>
   132b0:	add	r1, r0, #1
   132b4:	str	r1, [r5, #4]
   132b8:	ldrb	r7, [r0]
   132bc:	cmp	r6, sl
   132c0:	bne	132f4 <__assert_fail@plt+0x21a0>
   132c4:	ldr	r6, [r9]
   132c8:	mov	r0, r4
   132cc:	mov	r1, r9
   132d0:	mov	r2, #1
   132d4:	mvn	r3, #0
   132d8:	str	r8, [sp]
   132dc:	bl	15b50 <__assert_fail@plt+0x49fc>
   132e0:	str	r0, [r9, #8]
   132e4:	mov	r4, r0
   132e8:	add	r6, r0, r6
   132ec:	ldr	r0, [r9]
   132f0:	add	sl, r4, r0
   132f4:	strb	r7, [r6], #1
   132f8:	cmp	r7, #10
   132fc:	bne	132a4 <__assert_fail@plt+0x2150>
   13300:	b	1333c <__assert_fail@plt+0x21e8>
   13304:	mov	r0, r5
   13308:	bl	110e8 <__uflow@plt>
   1330c:	mov	r7, r0
   13310:	cmn	r0, #1
   13314:	bne	132bc <__assert_fail@plt+0x2168>
   13318:	cmp	r6, r4
   1331c:	beq	13348 <__assert_fail@plt+0x21f4>
   13320:	ldrb	r0, [r5]
   13324:	tst	r0, #32
   13328:	bne	13348 <__assert_fail@plt+0x21f4>
   1332c:	ldrb	r0, [r6, #-1]
   13330:	mov	r7, #10
   13334:	cmp	r0, #10
   13338:	bne	132bc <__assert_fail@plt+0x2168>
   1333c:	sub	r0, r6, r4
   13340:	str	r0, [r9, #4]
   13344:	b	1334c <__assert_fail@plt+0x21f8>
   13348:	mov	r9, #0
   1334c:	mov	r0, r9
   13350:	sub	sp, fp, #28
   13354:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13358:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1335c:	add	fp, sp, #28
   13360:	sub	sp, sp, #4
   13364:	mov	sl, r0
   13368:	ldrb	r0, [r1]
   1336c:	tst	r0, #16
   13370:	bne	13434 <__assert_fail@plt+0x22e0>
   13374:	ldr	r4, [sl, #8]
   13378:	ldr	r0, [sl]
   1337c:	mov	r8, r2
   13380:	mov	r6, r1
   13384:	add	r9, r4, r0
   13388:	mov	r7, r4
   1338c:	ldmib	r6, {r0, r1}
   13390:	cmp	r0, r1
   13394:	bcs	133f0 <__assert_fail@plt+0x229c>
   13398:	add	r1, r0, #1
   1339c:	str	r1, [r6, #4]
   133a0:	ldrb	r5, [r0]
   133a4:	cmp	r7, r9
   133a8:	bne	133e0 <__assert_fail@plt+0x228c>
   133ac:	ldr	r7, [sl]
   133b0:	mov	r0, #1
   133b4:	mov	r1, sl
   133b8:	mov	r2, #1
   133bc:	mvn	r3, #0
   133c0:	str	r0, [sp]
   133c4:	mov	r0, r4
   133c8:	bl	15b50 <__assert_fail@plt+0x49fc>
   133cc:	str	r0, [sl, #8]
   133d0:	mov	r4, r0
   133d4:	add	r7, r0, r7
   133d8:	ldr	r0, [sl]
   133dc:	add	r9, r4, r0
   133e0:	strb	r5, [r7], #1
   133e4:	cmp	r5, r8
   133e8:	bne	1338c <__assert_fail@plt+0x2238>
   133ec:	b	13428 <__assert_fail@plt+0x22d4>
   133f0:	mov	r0, r6
   133f4:	bl	110e8 <__uflow@plt>
   133f8:	mov	r5, r0
   133fc:	cmn	r0, #1
   13400:	bne	133a4 <__assert_fail@plt+0x2250>
   13404:	cmp	r7, r4
   13408:	beq	13434 <__assert_fail@plt+0x22e0>
   1340c:	ldrb	r0, [r6]
   13410:	tst	r0, #32
   13414:	bne	13434 <__assert_fail@plt+0x22e0>
   13418:	ldrb	r0, [r7, #-1]
   1341c:	mov	r5, r8
   13420:	cmp	r0, r8
   13424:	bne	133a4 <__assert_fail@plt+0x2250>
   13428:	sub	r0, r7, r4
   1342c:	str	r0, [sl, #4]
   13430:	b	13438 <__assert_fail@plt+0x22e4>
   13434:	mov	sl, #0
   13438:	mov	r0, sl
   1343c:	sub	sp, fp, #28
   13440:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13444:	ldr	r0, [r0, #8]
   13448:	b	12f48 <__assert_fail@plt+0x1df4>
   1344c:	push	{r4, r5, r6, sl, fp, lr}
   13450:	add	fp, sp, #16
   13454:	cmp	r2, #0
   13458:	moveq	r0, #0
   1345c:	popeq	{r4, r5, r6, sl, fp, pc}
   13460:	mov	r4, r2
   13464:	mov	r5, r1
   13468:	mov	r6, r0
   1346c:	bl	11028 <__ctype_toupper_loc@plt>
   13470:	ldr	r1, [r0]
   13474:	mov	r2, #0
   13478:	ldrb	r0, [r5, r2]
   1347c:	ldrb	r3, [r6, r2]
   13480:	ldr	r0, [r1, r0, lsl #2]
   13484:	ldr	r3, [r1, r3, lsl #2]
   13488:	subs	r0, r3, r0
   1348c:	popne	{r4, r5, r6, sl, fp, pc}
   13490:	add	r2, r2, #1
   13494:	cmp	r2, r4
   13498:	movcs	r0, #0
   1349c:	popcs	{r4, r5, r6, sl, fp, pc}
   134a0:	b	13478 <__assert_fail@plt+0x2324>
   134a4:	push	{r4, sl, fp, lr}
   134a8:	add	fp, sp, #8
   134ac:	sub	sp, sp, #8
   134b0:	movw	r0, #31767	; 0x7c17
   134b4:	movt	r0, #1
   134b8:	bl	10ff8 <getenv@plt>
   134bc:	cmp	r0, #0
   134c0:	movw	r4, #4201	; 0x1069
   134c4:	ldrbne	r1, [r0]
   134c8:	movt	r4, #3
   134cc:	cmpne	r1, #0
   134d0:	beq	134f0 <__assert_fail@plt+0x239c>
   134d4:	add	r1, sp, #4
   134d8:	mov	r2, #10
   134dc:	bl	10ef0 <strtol@plt>
   134e0:	ldr	r1, [sp, #4]
   134e4:	ldrb	r1, [r1]
   134e8:	cmp	r1, #0
   134ec:	moveq	r4, r0
   134f0:	mov	r0, r4
   134f4:	sub	sp, fp, #8
   134f8:	pop	{r4, sl, fp, pc}
   134fc:	push	{r4, r5, fp, lr}
   13500:	add	fp, sp, #8
   13504:	cmp	r0, #0
   13508:	beq	1359c <__assert_fail@plt+0x2448>
   1350c:	mov	r1, #47	; 0x2f
   13510:	mov	r4, r0
   13514:	bl	1110c <strrchr@plt>
   13518:	cmp	r0, #0
   1351c:	mov	r5, r4
   13520:	addne	r5, r0, #1
   13524:	sub	r0, r5, r4
   13528:	cmp	r0, #7
   1352c:	blt	13580 <__assert_fail@plt+0x242c>
   13530:	movw	r1, #31839	; 0x7c5f
   13534:	sub	r0, r5, #7
   13538:	mov	r2, #7
   1353c:	movt	r1, #1
   13540:	bl	11130 <strncmp@plt>
   13544:	cmp	r0, #0
   13548:	bne	13580 <__assert_fail@plt+0x242c>
   1354c:	movw	r1, #31847	; 0x7c67
   13550:	mov	r0, r5
   13554:	mov	r2, #3
   13558:	movt	r1, #1
   1355c:	bl	11130 <strncmp@plt>
   13560:	cmp	r0, #0
   13564:	beq	13570 <__assert_fail@plt+0x241c>
   13568:	mov	r4, r5
   1356c:	b	13580 <__assert_fail@plt+0x242c>
   13570:	movw	r0, #37192	; 0x9148
   13574:	add	r4, r5, #3
   13578:	movt	r0, #2
   1357c:	str	r4, [r0]
   13580:	movw	r0, #37196	; 0x914c
   13584:	movt	r0, #2
   13588:	str	r4, [r0]
   1358c:	movw	r0, #37272	; 0x9198
   13590:	movt	r0, #2
   13594:	str	r4, [r0]
   13598:	pop	{r4, r5, fp, pc}
   1359c:	movw	r0, #37208	; 0x9158
   135a0:	mov	r1, #55	; 0x37
   135a4:	mov	r2, #1
   135a8:	movt	r0, #2
   135ac:	ldr	r3, [r0]
   135b0:	movw	r0, #31783	; 0x7c27
   135b4:	movt	r0, #1
   135b8:	bl	10fa4 <fwrite@plt>
   135bc:	bl	1113c <abort@plt>
   135c0:	push	{r4, r5, r6, sl, fp, lr}
   135c4:	add	fp, sp, #16
   135c8:	mov	r4, r0
   135cc:	movw	r0, #37280	; 0x91a0
   135d0:	movt	r0, #2
   135d4:	cmp	r4, #0
   135d8:	moveq	r4, r0
   135dc:	bl	11088 <__errno_location@plt>
   135e0:	ldr	r6, [r0]
   135e4:	mov	r5, r0
   135e8:	mov	r0, r4
   135ec:	mov	r1, #48	; 0x30
   135f0:	bl	15d80 <__assert_fail@plt+0x4c2c>
   135f4:	str	r6, [r5]
   135f8:	pop	{r4, r5, r6, sl, fp, pc}
   135fc:	movw	r1, #37280	; 0x91a0
   13600:	cmp	r0, #0
   13604:	movt	r1, #2
   13608:	movne	r1, r0
   1360c:	ldr	r0, [r1]
   13610:	bx	lr
   13614:	movw	r2, #37280	; 0x91a0
   13618:	cmp	r0, #0
   1361c:	movt	r2, #2
   13620:	movne	r2, r0
   13624:	str	r1, [r2]
   13628:	bx	lr
   1362c:	movw	r3, #37280	; 0x91a0
   13630:	cmp	r0, #0
   13634:	movt	r3, #2
   13638:	movne	r3, r0
   1363c:	ubfx	r0, r1, #5, #3
   13640:	and	r1, r1, #31
   13644:	add	r0, r3, r0, lsl #2
   13648:	ldr	r3, [r0, #8]
   1364c:	eor	r2, r2, r3, lsr r1
   13650:	and	r2, r2, #1
   13654:	eor	r2, r3, r2, lsl r1
   13658:	str	r2, [r0, #8]
   1365c:	mov	r0, #1
   13660:	and	r0, r0, r3, lsr r1
   13664:	bx	lr
   13668:	movw	r2, #37280	; 0x91a0
   1366c:	cmp	r0, #0
   13670:	movt	r2, #2
   13674:	movne	r2, r0
   13678:	ldr	r0, [r2, #4]
   1367c:	str	r1, [r2, #4]
   13680:	bx	lr
   13684:	movw	r3, #37280	; 0x91a0
   13688:	cmp	r0, #0
   1368c:	movt	r3, #2
   13690:	movne	r3, r0
   13694:	cmp	r1, #0
   13698:	mov	r0, #10
   1369c:	cmpne	r2, #0
   136a0:	str	r0, [r3]
   136a4:	bne	136b4 <__assert_fail@plt+0x2560>
   136a8:	push	{fp, lr}
   136ac:	mov	fp, sp
   136b0:	bl	1113c <abort@plt>
   136b4:	str	r1, [r3, #40]	; 0x28
   136b8:	str	r2, [r3, #44]	; 0x2c
   136bc:	bx	lr
   136c0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   136c4:	add	fp, sp, #28
   136c8:	sub	sp, sp, #20
   136cc:	mov	r7, r0
   136d0:	ldr	r0, [fp, #8]
   136d4:	movw	r5, #37280	; 0x91a0
   136d8:	mov	r8, r3
   136dc:	mov	r9, r2
   136e0:	mov	sl, r1
   136e4:	movt	r5, #2
   136e8:	cmp	r0, #0
   136ec:	movne	r5, r0
   136f0:	bl	11088 <__errno_location@plt>
   136f4:	mov	r4, r0
   136f8:	ldm	r5, {r0, r1}
   136fc:	ldr	r2, [r5, #40]	; 0x28
   13700:	ldr	r3, [r5, #44]	; 0x2c
   13704:	add	r5, r5, #8
   13708:	ldr	r6, [r4]
   1370c:	stm	sp, {r0, r1, r5}
   13710:	str	r2, [sp, #12]
   13714:	str	r3, [sp, #16]
   13718:	mov	r0, r7
   1371c:	mov	r1, sl
   13720:	mov	r2, r9
   13724:	mov	r3, r8
   13728:	bl	13738 <__assert_fail@plt+0x25e4>
   1372c:	str	r6, [r4]
   13730:	sub	sp, fp, #28
   13734:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13738:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1373c:	add	fp, sp, #28
   13740:	sub	sp, sp, #156	; 0x9c
   13744:	str	r0, [sp, #80]	; 0x50
   13748:	ldr	r0, [fp, #12]
   1374c:	mov	r6, r1
   13750:	mov	r9, r3
   13754:	str	r2, [fp, #-84]	; 0xffffffac
   13758:	and	r1, r0, #4
   1375c:	str	r1, [sp, #32]
   13760:	and	r1, r0, #1
   13764:	str	r1, [sp, #36]	; 0x24
   13768:	ubfx	r4, r0, #1, #1
   1376c:	bl	10fbc <__ctype_get_mb_cur_max@plt>
   13770:	str	r0, [sp, #40]	; 0x28
   13774:	ldr	r0, [fp, #24]
   13778:	ldr	r7, [fp, #8]
   1377c:	mov	r1, #0
   13780:	mov	r5, #1
   13784:	str	r1, [fp, #-56]	; 0xffffffc8
   13788:	mov	r1, #0
   1378c:	str	r1, [sp, #60]	; 0x3c
   13790:	str	r0, [sp, #76]	; 0x4c
   13794:	ldr	r0, [fp, #20]
   13798:	str	r0, [sp, #72]	; 0x48
   1379c:	mov	r0, #0
   137a0:	str	r0, [sp, #56]	; 0x38
   137a4:	mov	r0, #0
   137a8:	str	r0, [sp, #92]	; 0x5c
   137ac:	mov	r0, #0
   137b0:	str	r0, [fp, #-76]	; 0xffffffb4
   137b4:	mov	r0, #0
   137b8:	cmp	r7, #10
   137bc:	bhi	1473c <__assert_fail@plt+0x35e8>
   137c0:	add	r1, pc, #28
   137c4:	mov	sl, r6
   137c8:	ldr	r6, [sp, #80]	; 0x50
   137cc:	ldr	ip, [fp, #-84]	; 0xffffffac
   137d0:	mov	r8, #0
   137d4:	mov	r2, #1
   137d8:	mov	r3, #0
   137dc:	mov	lr, r9
   137e0:	ldr	pc, [r1, r7, lsl #2]
   137e4:	andeq	r3, r1, r8, asr #17
   137e8:	strdeq	r3, [r1], -r4
   137ec:			; <UNDEFINED> instruction: 0x000138b8
   137f0:			; <UNDEFINED> instruction: 0x000138b0
   137f4:	andeq	r3, r1, r8, ror #17
   137f8:	andeq	r3, r1, ip, lsr r9
   137fc:	ldrdeq	r3, [r1], -r8
   13800:	muleq	r1, r8, r9
   13804:	andeq	r3, r1, r0, lsl r8
   13808:	andeq	r3, r1, r0, lsl r8
   1380c:	andeq	r3, r1, r8, lsr r8
   13810:	movw	r0, #31929	; 0x7cb9
   13814:	mov	r1, r7
   13818:	movt	r0, #1
   1381c:	bl	15148 <__assert_fail@plt+0x3ff4>
   13820:	str	r0, [sp, #72]	; 0x48
   13824:	movw	r0, #31931	; 0x7cbb
   13828:	mov	r1, r7
   1382c:	movt	r0, #1
   13830:	bl	15148 <__assert_fail@plt+0x3ff4>
   13834:	str	r0, [sp, #76]	; 0x4c
   13838:	str	r5, [fp, #-48]	; 0xffffffd0
   1383c:	mov	r8, #0
   13840:	mov	r5, r7
   13844:	tst	r4, #1
   13848:	bne	13880 <__assert_fail@plt+0x272c>
   1384c:	ldr	r0, [sp, #72]	; 0x48
   13850:	ldrb	r0, [r0]
   13854:	cmp	r0, #0
   13858:	beq	13880 <__assert_fail@plt+0x272c>
   1385c:	ldr	r1, [sp, #72]	; 0x48
   13860:	mov	r8, #0
   13864:	add	r1, r1, #1
   13868:	cmp	r8, sl
   1386c:	strbcc	r0, [r6, r8]
   13870:	ldrb	r0, [r1, r8]
   13874:	add	r8, r8, #1
   13878:	cmp	r0, #0
   1387c:	bne	13868 <__assert_fail@plt+0x2714>
   13880:	ldr	r7, [sp, #76]	; 0x4c
   13884:	mov	r0, r7
   13888:	bl	11070 <strlen@plt>
   1388c:	str	r7, [sp, #92]	; 0x5c
   13890:	mov	r7, r5
   13894:	ldr	ip, [fp, #-84]	; 0xffffffac
   13898:	ldr	r5, [fp, #-48]	; 0xffffffd0
   1389c:	str	r0, [fp, #-76]	; 0xffffffb4
   138a0:	mov	r2, #1
   138a4:	mov	r3, r4
   138a8:	mov	lr, r9
   138ac:	b	13998 <__assert_fail@plt+0x2844>
   138b0:	mov	r0, #1
   138b4:	b	138f4 <__assert_fail@plt+0x27a0>
   138b8:	tst	r4, #1
   138bc:	bne	138f4 <__assert_fail@plt+0x27a0>
   138c0:	mov	r2, r0
   138c4:	b	1391c <__assert_fail@plt+0x27c8>
   138c8:	mov	r7, #0
   138cc:	mov	r8, #0
   138d0:	mov	r2, r0
   138d4:	b	13994 <__assert_fail@plt+0x2840>
   138d8:	mov	r0, #1
   138dc:	mov	r8, #0
   138e0:	mov	r7, #5
   138e4:	b	13950 <__assert_fail@plt+0x27fc>
   138e8:	mov	r2, #1
   138ec:	tst	r4, #1
   138f0:	beq	1391c <__assert_fail@plt+0x27c8>
   138f4:	mov	r1, #1
   138f8:	mov	r8, #0
   138fc:	mov	r7, #2
   13900:	mov	r2, r0
   13904:	mov	r3, #1
   13908:	str	r1, [fp, #-76]	; 0xffffffb4
   1390c:	movw	r1, #31931	; 0x7cbb
   13910:	movt	r1, #1
   13914:	str	r1, [sp, #92]	; 0x5c
   13918:	b	13998 <__assert_fail@plt+0x2844>
   1391c:	cmp	sl, #0
   13920:	mov	r8, #1
   13924:	mov	r7, #2
   13928:	movne	r0, #39	; 0x27
   1392c:	strbne	r0, [r6]
   13930:	movw	r0, #31931	; 0x7cbb
   13934:	movt	r0, #1
   13938:	b	13988 <__assert_fail@plt+0x2834>
   1393c:	mov	r7, #5
   13940:	tst	r4, #1
   13944:	beq	1396c <__assert_fail@plt+0x2818>
   13948:	mov	r0, #1
   1394c:	mov	r8, #0
   13950:	str	r0, [fp, #-76]	; 0xffffffb4
   13954:	movw	r0, #31927	; 0x7cb7
   13958:	mov	r2, #1
   1395c:	mov	r3, #1
   13960:	movt	r0, #1
   13964:	str	r0, [sp, #92]	; 0x5c
   13968:	b	13998 <__assert_fail@plt+0x2844>
   1396c:	cmp	sl, #0
   13970:	mov	r8, #1
   13974:	mov	r2, #1
   13978:	movne	r0, #34	; 0x22
   1397c:	strbne	r0, [r6]
   13980:	movw	r0, #31927	; 0x7cb7
   13984:	movt	r0, #1
   13988:	str	r0, [sp, #92]	; 0x5c
   1398c:	mov	r0, #1
   13990:	str	r0, [fp, #-76]	; 0xffffffb4
   13994:	mov	r3, #0
   13998:	ldr	r0, [fp, #16]
   1399c:	str	r3, [fp, #-72]	; 0xffffffb8
   139a0:	str	r7, [fp, #-64]	; 0xffffffc0
   139a4:	str	r2, [sp, #84]	; 0x54
   139a8:	cmp	r0, #0
   139ac:	movwne	r0, #1
   139b0:	and	r0, r0, r3
   139b4:	str	r0, [fp, #-88]	; 0xffffffa8
   139b8:	ldr	r0, [fp, #-76]	; 0xffffffb4
   139bc:	cmp	r0, #0
   139c0:	movwne	r0, #1
   139c4:	subs	r4, r7, #2
   139c8:	mov	r7, #0
   139cc:	and	r1, r0, r3
   139d0:	str	r4, [fp, #-80]	; 0xffffffb0
   139d4:	and	r1, r2, r1
   139d8:	str	r1, [sp, #48]	; 0x30
   139dc:	clz	r1, r4
   139e0:	lsr	r1, r1, #5
   139e4:	and	r1, r1, r3
   139e8:	eor	r3, r3, #1
   139ec:	str	r1, [sp, #64]	; 0x40
   139f0:	mov	r1, r4
   139f4:	str	r3, [sp, #88]	; 0x58
   139f8:	movwne	r1, #1
   139fc:	orr	r3, r1, r3
   13a00:	and	r1, r1, r2
   13a04:	and	r0, r0, r1
   13a08:	str	r3, [sp, #68]	; 0x44
   13a0c:	str	r1, [fp, #-68]	; 0xffffffbc
   13a10:	str	r0, [fp, #-60]	; 0xffffffc4
   13a14:	eor	r0, r2, #1
   13a18:	str	r0, [sp, #52]	; 0x34
   13a1c:	cmn	lr, #1
   13a20:	beq	13a30 <__assert_fail@plt+0x28dc>
   13a24:	cmp	r7, lr
   13a28:	bne	13a3c <__assert_fail@plt+0x28e8>
   13a2c:	b	14564 <__assert_fail@plt+0x3410>
   13a30:	ldrb	r0, [ip, r7]
   13a34:	cmp	r0, #0
   13a38:	beq	1456c <__assert_fail@plt+0x3418>
   13a3c:	ldr	r0, [fp, #-60]	; 0xffffffc4
   13a40:	mov	r9, #0
   13a44:	str	r5, [fp, #-48]	; 0xffffffd0
   13a48:	cmp	r0, #0
   13a4c:	beq	13a80 <__assert_fail@plt+0x292c>
   13a50:	ldr	r0, [fp, #-76]	; 0xffffffb4
   13a54:	add	r4, r7, r0
   13a58:	cmp	r0, #2
   13a5c:	bcc	13a78 <__assert_fail@plt+0x2924>
   13a60:	cmn	lr, #1
   13a64:	bne	13a78 <__assert_fail@plt+0x2924>
   13a68:	mov	r0, ip
   13a6c:	bl	11070 <strlen@plt>
   13a70:	ldr	ip, [fp, #-84]	; 0xffffffac
   13a74:	mov	lr, r0
   13a78:	cmp	r4, lr
   13a7c:	bls	13a88 <__assert_fail@plt+0x2934>
   13a80:	mov	r0, #0
   13a84:	b	13ac8 <__assert_fail@plt+0x2974>
   13a88:	ldr	r1, [sp, #92]	; 0x5c
   13a8c:	ldr	r2, [fp, #-76]	; 0xffffffb4
   13a90:	add	r0, ip, r7
   13a94:	mov	r4, lr
   13a98:	bl	10f5c <memcmp@plt>
   13a9c:	ldr	r2, [sp, #88]	; 0x58
   13aa0:	cmp	r0, #0
   13aa4:	mov	r1, r0
   13aa8:	movwne	r1, #1
   13aac:	orr	r1, r1, r2
   13ab0:	tst	r1, #1
   13ab4:	beq	145fc <__assert_fail@plt+0x34a8>
   13ab8:	ldr	ip, [fp, #-84]	; 0xffffffac
   13abc:	clz	r0, r0
   13ac0:	mov	lr, r4
   13ac4:	lsr	r0, r0, #5
   13ac8:	str	r0, [fp, #-52]	; 0xffffffcc
   13acc:	ldrb	r5, [ip, r7]
   13ad0:	cmp	r5, #126	; 0x7e
   13ad4:	bhi	13e8c <__assert_fail@plt+0x2d38>
   13ad8:	add	r3, pc, #16
   13adc:	mov	r4, #1
   13ae0:	mov	r2, #110	; 0x6e
   13ae4:	mov	r0, #97	; 0x61
   13ae8:	mov	r1, #0
   13aec:	ldr	pc, [r3, r5, lsl #2]
   13af0:	andeq	r3, r1, r8, lsl #27
   13af4:	andeq	r3, r1, ip, lsl #29
   13af8:	andeq	r3, r1, ip, lsl #29
   13afc:	andeq	r3, r1, ip, lsl #29
   13b00:	andeq	r3, r1, ip, lsl #29
   13b04:	andeq	r3, r1, ip, lsl #29
   13b08:	andeq	r3, r1, ip, lsl #29
   13b0c:	andeq	r3, r1, r0, asr #30
   13b10:	andeq	r3, r1, r8, ror #26
   13b14:	andeq	r3, r1, r0, ror #26
   13b18:	andeq	r3, r1, r4, ror sp
   13b1c:	strdeq	r3, [r1], -r4
   13b20:	andeq	r3, r1, r8, asr sp
   13b24:	andeq	r3, r1, r0, ror sp
   13b28:	andeq	r3, r1, ip, lsl #29
   13b2c:	andeq	r3, r1, ip, lsl #29
   13b30:	andeq	r3, r1, ip, lsl #29
   13b34:	andeq	r3, r1, ip, lsl #29
   13b38:	andeq	r3, r1, ip, lsl #29
   13b3c:	andeq	r3, r1, ip, lsl #29
   13b40:	andeq	r3, r1, ip, lsl #29
   13b44:	andeq	r3, r1, ip, lsl #29
   13b48:	andeq	r3, r1, ip, lsl #29
   13b4c:	andeq	r3, r1, ip, lsl #29
   13b50:	andeq	r3, r1, ip, lsl #29
   13b54:	andeq	r3, r1, ip, lsl #29
   13b58:	andeq	r3, r1, ip, lsl #29
   13b5c:	andeq	r3, r1, ip, lsl #29
   13b60:	andeq	r3, r1, ip, lsl #29
   13b64:	andeq	r3, r1, ip, lsl #29
   13b68:	andeq	r3, r1, ip, lsl #29
   13b6c:	andeq	r3, r1, ip, lsl #29
   13b70:	strdeq	r3, [r1], -r8
   13b74:	strdeq	r3, [r1], -ip
   13b78:	strdeq	r3, [r1], -ip
   13b7c:	andeq	r3, r1, r0, lsl #26
   13b80:	strdeq	r3, [r1], -ip
   13b84:	andeq	r3, r1, ip, ror #25
   13b88:	strdeq	r3, [r1], -ip
   13b8c:	strdeq	r3, [r1], -ip
   13b90:	strdeq	r3, [r1], -ip
   13b94:	strdeq	r3, [r1], -ip
   13b98:	strdeq	r3, [r1], -ip
   13b9c:	andeq	r3, r1, ip, ror #25
   13ba0:	andeq	r3, r1, ip, ror #25
   13ba4:	andeq	r3, r1, ip, ror #25
   13ba8:	andeq	r3, r1, ip, ror #25
   13bac:	andeq	r3, r1, ip, ror #25
   13bb0:	andeq	r3, r1, ip, ror #25
   13bb4:	andeq	r3, r1, ip, ror #25
   13bb8:	andeq	r3, r1, ip, ror #25
   13bbc:	andeq	r3, r1, ip, ror #25
   13bc0:	andeq	r3, r1, ip, ror #25
   13bc4:	andeq	r3, r1, ip, ror #25
   13bc8:	andeq	r3, r1, ip, ror #25
   13bcc:	andeq	r3, r1, ip, ror #25
   13bd0:	andeq	r3, r1, ip, ror #25
   13bd4:	andeq	r3, r1, ip, ror #25
   13bd8:	andeq	r3, r1, ip, ror #25
   13bdc:	strdeq	r3, [r1], -ip
   13be0:	strdeq	r3, [r1], -ip
   13be4:	strdeq	r3, [r1], -ip
   13be8:	strdeq	r3, [r1], -ip
   13bec:	andeq	r3, r1, r8, asr #27
   13bf0:	andeq	r3, r1, ip, lsl #29
   13bf4:	andeq	r3, r1, ip, ror #25
   13bf8:	andeq	r3, r1, ip, ror #25
   13bfc:	andeq	r3, r1, ip, ror #25
   13c00:	andeq	r3, r1, ip, ror #25
   13c04:	andeq	r3, r1, ip, ror #25
   13c08:	andeq	r3, r1, ip, ror #25
   13c0c:	andeq	r3, r1, ip, ror #25
   13c10:	andeq	r3, r1, ip, ror #25
   13c14:	andeq	r3, r1, ip, ror #25
   13c18:	andeq	r3, r1, ip, ror #25
   13c1c:	andeq	r3, r1, ip, ror #25
   13c20:	andeq	r3, r1, ip, ror #25
   13c24:	andeq	r3, r1, ip, ror #25
   13c28:	andeq	r3, r1, ip, ror #25
   13c2c:	andeq	r3, r1, ip, ror #25
   13c30:	andeq	r3, r1, ip, ror #25
   13c34:	andeq	r3, r1, ip, ror #25
   13c38:	andeq	r3, r1, ip, ror #25
   13c3c:	andeq	r3, r1, ip, ror #25
   13c40:	andeq	r3, r1, ip, ror #25
   13c44:	andeq	r3, r1, ip, ror #25
   13c48:	andeq	r3, r1, ip, ror #25
   13c4c:	andeq	r3, r1, ip, ror #25
   13c50:	andeq	r3, r1, ip, ror #25
   13c54:	andeq	r3, r1, ip, ror #25
   13c58:	andeq	r3, r1, ip, ror #25
   13c5c:	strdeq	r3, [r1], -ip
   13c60:	andeq	r3, r1, r4, lsr sp
   13c64:	andeq	r3, r1, ip, ror #25
   13c68:	strdeq	r3, [r1], -ip
   13c6c:	andeq	r3, r1, ip, ror #25
   13c70:	strdeq	r3, [r1], -ip
   13c74:	andeq	r3, r1, ip, ror #25
   13c78:	andeq	r3, r1, ip, ror #25
   13c7c:	andeq	r3, r1, ip, ror #25
   13c80:	andeq	r3, r1, ip, ror #25
   13c84:	andeq	r3, r1, ip, ror #25
   13c88:	andeq	r3, r1, ip, ror #25
   13c8c:	andeq	r3, r1, ip, ror #25
   13c90:	andeq	r3, r1, ip, ror #25
   13c94:	andeq	r3, r1, ip, ror #25
   13c98:	andeq	r3, r1, ip, ror #25
   13c9c:	andeq	r3, r1, ip, ror #25
   13ca0:	andeq	r3, r1, ip, ror #25
   13ca4:	andeq	r3, r1, ip, ror #25
   13ca8:	andeq	r3, r1, ip, ror #25
   13cac:	andeq	r3, r1, ip, ror #25
   13cb0:	andeq	r3, r1, ip, ror #25
   13cb4:	andeq	r3, r1, ip, ror #25
   13cb8:	andeq	r3, r1, ip, ror #25
   13cbc:	andeq	r3, r1, ip, ror #25
   13cc0:	andeq	r3, r1, ip, ror #25
   13cc4:	andeq	r3, r1, ip, ror #25
   13cc8:	andeq	r3, r1, ip, ror #25
   13ccc:	andeq	r3, r1, ip, ror #25
   13cd0:	andeq	r3, r1, ip, ror #25
   13cd4:	andeq	r3, r1, ip, ror #25
   13cd8:	andeq	r3, r1, ip, ror #25
   13cdc:	andeq	r3, r1, r4, lsl sp
   13ce0:	strdeq	r3, [r1], -ip
   13ce4:	andeq	r3, r1, r4, lsl sp
   13ce8:	andeq	r3, r1, r0, lsl #26
   13cec:	ldr	r0, [fp, #-68]	; 0xffffffbc
   13cf0:	cmp	r0, #0
   13cf4:	beq	13f54 <__assert_fail@plt+0x2e00>
   13cf8:	ldr	r0, [fp, #16]
   13cfc:	b	13f58 <__assert_fail@plt+0x2e04>
   13d00:	mov	r4, #0
   13d04:	cmp	r7, #0
   13d08:	beq	13ef8 <__assert_fail@plt+0x2da4>
   13d0c:	mov	r9, #0
   13d10:	b	13cec <__assert_fail@plt+0x2b98>
   13d14:	mov	r4, #0
   13d18:	cmn	lr, #1
   13d1c:	beq	13edc <__assert_fail@plt+0x2d88>
   13d20:	cmp	r7, #0
   13d24:	bne	13d0c <__assert_fail@plt+0x2bb8>
   13d28:	cmp	lr, #1
   13d2c:	beq	13ef8 <__assert_fail@plt+0x2da4>
   13d30:	b	13d0c <__assert_fail@plt+0x2bb8>
   13d34:	ldr	r0, [fp, #-64]	; 0xffffffc0
   13d38:	cmp	r0, #2
   13d3c:	bne	13f1c <__assert_fail@plt+0x2dc8>
   13d40:	ldr	r0, [fp, #-72]	; 0xffffffb8
   13d44:	tst	r0, #1
   13d48:	bne	14618 <__assert_fail@plt+0x34c4>
   13d4c:	mov	r9, #0
   13d50:	mov	r0, #92	; 0x5c
   13d54:	b	13f30 <__assert_fail@plt+0x2ddc>
   13d58:	mov	r0, #102	; 0x66
   13d5c:	b	13f40 <__assert_fail@plt+0x2dec>
   13d60:	mov	r2, #116	; 0x74
   13d64:	b	13d74 <__assert_fail@plt+0x2c20>
   13d68:	mov	r0, #98	; 0x62
   13d6c:	b	13f40 <__assert_fail@plt+0x2dec>
   13d70:	mov	r2, #114	; 0x72
   13d74:	ldr	r0, [sp, #68]	; 0x44
   13d78:	tst	r0, #1
   13d7c:	mov	r0, r2
   13d80:	bne	13f40 <__assert_fail@plt+0x2dec>
   13d84:	b	14618 <__assert_fail@plt+0x34c4>
   13d88:	ldr	r0, [sp, #84]	; 0x54
   13d8c:	tst	r0, #1
   13d90:	beq	14030 <__assert_fail@plt+0x2edc>
   13d94:	ldr	r0, [fp, #-72]	; 0xffffffb8
   13d98:	tst	r0, #1
   13d9c:	bne	14728 <__assert_fail@plt+0x35d4>
   13da0:	ldr	r0, [fp, #-64]	; 0xffffffc0
   13da4:	ldr	r2, [fp, #-56]	; 0xffffffc8
   13da8:	cmp	r0, #2
   13dac:	ldr	r0, [fp, #-80]	; 0xffffffb0
   13db0:	movwne	r0, #1
   13db4:	orr	r0, r0, r2
   13db8:	tst	r0, #1
   13dbc:	beq	14400 <__assert_fail@plt+0x32ac>
   13dc0:	mov	r0, r8
   13dc4:	b	14434 <__assert_fail@plt+0x32e0>
   13dc8:	ldr	r0, [fp, #-64]	; 0xffffffc0
   13dcc:	mov	r9, #0
   13dd0:	mov	r5, #63	; 0x3f
   13dd4:	cmp	r0, #5
   13dd8:	beq	141e4 <__assert_fail@plt+0x3090>
   13ddc:	cmp	r0, #2
   13de0:	bne	14288 <__assert_fail@plt+0x3134>
   13de4:	ldr	r0, [fp, #-72]	; 0xffffffb8
   13de8:	tst	r0, #1
   13dec:	beq	1428c <__assert_fail@plt+0x3138>
   13df0:	b	14618 <__assert_fail@plt+0x34c4>
   13df4:	mov	r0, #118	; 0x76
   13df8:	b	13f40 <__assert_fail@plt+0x2dec>
   13dfc:	mov	r0, #1
   13e00:	mov	r5, #39	; 0x27
   13e04:	str	r0, [sp, #60]	; 0x3c
   13e08:	ldr	r0, [fp, #-64]	; 0xffffffc0
   13e0c:	cmp	r0, #2
   13e10:	bne	13e84 <__assert_fail@plt+0x2d30>
   13e14:	ldr	r0, [fp, #-72]	; 0xffffffb8
   13e18:	tst	r0, #1
   13e1c:	bne	14618 <__assert_fail@plt+0x34c4>
   13e20:	ldr	r2, [sp, #56]	; 0x38
   13e24:	clz	r1, sl
   13e28:	mov	r9, #0
   13e2c:	lsr	r1, r1, #5
   13e30:	cmp	r2, #0
   13e34:	mov	r0, r2
   13e38:	movwne	r0, #1
   13e3c:	orrs	r0, r0, r1
   13e40:	moveq	r2, sl
   13e44:	moveq	sl, r0
   13e48:	cmp	r8, sl
   13e4c:	str	r2, [sp, #56]	; 0x38
   13e50:	movcc	r0, #39	; 0x27
   13e54:	strbcc	r0, [r6, r8]
   13e58:	add	r0, r8, #1
   13e5c:	cmp	r0, sl
   13e60:	movcc	r1, #92	; 0x5c
   13e64:	strbcc	r1, [r6, r0]
   13e68:	add	r0, r8, #2
   13e6c:	add	r8, r8, #3
   13e70:	cmp	r0, sl
   13e74:	movcc	r1, #39	; 0x27
   13e78:	strbcc	r1, [r6, r0]
   13e7c:	mov	r0, #0
   13e80:	str	r0, [fp, #-56]	; 0xffffffc8
   13e84:	mov	r4, #1
   13e88:	b	13cec <__assert_fail@plt+0x2b98>
   13e8c:	ldr	r0, [sp, #40]	; 0x28
   13e90:	cmp	r0, #1
   13e94:	bne	1405c <__assert_fail@plt+0x2f08>
   13e98:	str	lr, [sp, #28]
   13e9c:	bl	11058 <__ctype_b_loc@plt>
   13ea0:	ldr	r0, [r0]
   13ea4:	ldr	ip, [fp, #-84]	; 0xffffffac
   13ea8:	mov	r1, #1
   13eac:	add	r0, r0, r5, lsl #1
   13eb0:	ldrb	r0, [r0, #1]
   13eb4:	ubfx	r4, r0, #6, #1
   13eb8:	ldr	r0, [sp, #52]	; 0x34
   13ebc:	mov	r2, r1
   13ec0:	cmp	r1, #1
   13ec4:	orr	r0, r4, r0
   13ec8:	bhi	14294 <__assert_fail@plt+0x3140>
   13ecc:	tst	r0, #1
   13ed0:	beq	14294 <__assert_fail@plt+0x3140>
   13ed4:	ldr	lr, [sp, #28]
   13ed8:	b	13cec <__assert_fail@plt+0x2b98>
   13edc:	cmp	r7, #0
   13ee0:	ldrbeq	r0, [ip, #1]
   13ee4:	cmpeq	r0, #0
   13ee8:	beq	13ef8 <__assert_fail@plt+0x2da4>
   13eec:	mvn	lr, #0
   13ef0:	mov	r9, #0
   13ef4:	b	13cec <__assert_fail@plt+0x2b98>
   13ef8:	mov	r1, #1
   13efc:	ldr	r0, [fp, #-64]	; 0xffffffc0
   13f00:	cmp	r0, #2
   13f04:	bne	13f14 <__assert_fail@plt+0x2dc0>
   13f08:	ldr	r0, [fp, #-72]	; 0xffffffb8
   13f0c:	tst	r0, #1
   13f10:	bne	14618 <__assert_fail@plt+0x34c4>
   13f14:	mov	r4, r1
   13f18:	b	13cec <__assert_fail@plt+0x2b98>
   13f1c:	ldr	r1, [sp, #48]	; 0x30
   13f20:	mov	r9, #0
   13f24:	mov	r0, #92	; 0x5c
   13f28:	cmp	r1, #0
   13f2c:	beq	13f40 <__assert_fail@plt+0x2dec>
   13f30:	mov	r4, #0
   13f34:	cmp	r9, #0
   13f38:	beq	144cc <__assert_fail@plt+0x3378>
   13f3c:	b	14508 <__assert_fail@plt+0x33b4>
   13f40:	ldr	r1, [sp, #84]	; 0x54
   13f44:	mov	r4, #0
   13f48:	mov	r9, #0
   13f4c:	tst	r1, #1
   13f50:	bne	13f90 <__assert_fail@plt+0x2e3c>
   13f54:	ldr	r0, [fp, #-88]	; 0xffffffa8
   13f58:	cmp	r0, #0
   13f5c:	mov	r0, r5
   13f60:	beq	13f84 <__assert_fail@plt+0x2e30>
   13f64:	ldr	r1, [fp, #16]
   13f68:	ubfx	r0, r5, #5, #3
   13f6c:	mov	r2, #1
   13f70:	ldr	r0, [r1, r0, lsl #2]
   13f74:	and	r1, r5, #31
   13f78:	tst	r0, r2, lsl r1
   13f7c:	mov	r0, r5
   13f80:	bne	13f90 <__assert_fail@plt+0x2e3c>
   13f84:	ldr	r1, [fp, #-52]	; 0xffffffcc
   13f88:	cmp	r1, #0
   13f8c:	beq	144c4 <__assert_fail@plt+0x3370>
   13f90:	ldr	r1, [fp, #-72]	; 0xffffffb8
   13f94:	tst	r1, #1
   13f98:	bne	145f0 <__assert_fail@plt+0x349c>
   13f9c:	ldr	r1, [fp, #-64]	; 0xffffffc0
   13fa0:	ldr	r2, [fp, #-56]	; 0xffffffc8
   13fa4:	cmp	r1, #2
   13fa8:	ldr	r1, [fp, #-80]	; 0xffffffb0
   13fac:	movwne	r1, #1
   13fb0:	orr	r1, r1, r2
   13fb4:	tst	r1, #1
   13fb8:	beq	13fc4 <__assert_fail@plt+0x2e70>
   13fbc:	ldr	r5, [fp, #-48]	; 0xffffffd0
   13fc0:	b	14000 <__assert_fail@plt+0x2eac>
   13fc4:	cmp	r8, sl
   13fc8:	ldr	r5, [fp, #-48]	; 0xffffffd0
   13fcc:	movcc	r1, #39	; 0x27
   13fd0:	strbcc	r1, [r6, r8]
   13fd4:	add	r1, r8, #1
   13fd8:	cmp	r1, sl
   13fdc:	movcc	r2, #36	; 0x24
   13fe0:	strbcc	r2, [r6, r1]
   13fe4:	add	r1, r8, #2
   13fe8:	add	r8, r8, #3
   13fec:	cmp	r1, sl
   13ff0:	movcc	r2, #39	; 0x27
   13ff4:	strbcc	r2, [r6, r1]
   13ff8:	mov	r1, #1
   13ffc:	str	r1, [fp, #-56]	; 0xffffffc8
   14000:	cmp	r8, sl
   14004:	movcc	r1, #92	; 0x5c
   14008:	strbcc	r1, [r6, r8]
   1400c:	add	r8, r8, #1
   14010:	cmp	r8, sl
   14014:	and	r5, r5, r4
   14018:	add	r7, r7, #1
   1401c:	strbcc	r0, [r6, r8]
   14020:	add	r8, r8, #1
   14024:	cmn	lr, #1
   14028:	bne	13a24 <__assert_fail@plt+0x28d0>
   1402c:	b	13a30 <__assert_fail@plt+0x28dc>
   14030:	ldr	r0, [sp, #36]	; 0x24
   14034:	mov	r4, #0
   14038:	mov	r9, #0
   1403c:	mov	r5, #0
   14040:	cmp	r0, #0
   14044:	beq	13f54 <__assert_fail@plt+0x2e00>
   14048:	ldr	r5, [fp, #-48]	; 0xffffffd0
   1404c:	add	r7, r7, #1
   14050:	cmn	lr, #1
   14054:	bne	13a24 <__assert_fail@plt+0x28d0>
   14058:	b	13a30 <__assert_fail@plt+0x28dc>
   1405c:	mov	r0, #0
   14060:	cmn	lr, #1
   14064:	str	r0, [fp, #-36]	; 0xffffffdc
   14068:	str	r0, [fp, #-40]	; 0xffffffd8
   1406c:	bne	14080 <__assert_fail@plt+0x2f2c>
   14070:	mov	r0, ip
   14074:	bl	11070 <strlen@plt>
   14078:	ldr	ip, [fp, #-84]	; 0xffffffac
   1407c:	mov	lr, r0
   14080:	add	r0, ip, r7
   14084:	mov	r4, #1
   14088:	mov	r6, #0
   1408c:	str	lr, [sp, #28]
   14090:	str	r0, [sp, #24]
   14094:	sub	r0, fp, #40	; 0x28
   14098:	mov	r3, r0
   1409c:	str	r6, [sp, #44]	; 0x2c
   140a0:	add	r6, r6, r7
   140a4:	sub	r0, fp, #44	; 0x2c
   140a8:	add	r1, ip, r6
   140ac:	sub	r2, lr, r6
   140b0:	bl	16cf8 <__assert_fail@plt+0x5ba4>
   140b4:	cmp	r0, #0
   140b8:	beq	14550 <__assert_fail@plt+0x33fc>
   140bc:	cmn	r0, #1
   140c0:	beq	14510 <__assert_fail@plt+0x33bc>
   140c4:	ldr	lr, [sp, #28]
   140c8:	cmn	r0, #2
   140cc:	beq	14518 <__assert_fail@plt+0x33c4>
   140d0:	ldr	r2, [sp, #64]	; 0x40
   140d4:	cmp	r0, #2
   140d8:	mov	r1, #0
   140dc:	movwcc	r1, #1
   140e0:	eor	r2, r2, #1
   140e4:	orrs	r1, r2, r1
   140e8:	bne	141a8 <__assert_fail@plt+0x3054>
   140ec:	ldr	r1, [sp, #44]	; 0x2c
   140f0:	ldr	r2, [sp, #24]
   140f4:	add	r1, r2, r1
   140f8:	mov	r2, #1
   140fc:	ldrb	r3, [r1, r2]
   14100:	sub	r3, r3, #91	; 0x5b
   14104:	cmp	r3, #33	; 0x21
   14108:	bhi	1419c <__assert_fail@plt+0x3048>
   1410c:	add	r6, pc, #0
   14110:	ldr	pc, [r6, r3, lsl #2]
   14114:	andeq	r4, r1, r0, lsl r6
   14118:	andeq	r4, r1, r0, lsl r6
   1411c:	muleq	r1, ip, r1
   14120:	andeq	r4, r1, r0, lsl r6
   14124:	muleq	r1, ip, r1
   14128:	andeq	r4, r1, r0, lsl r6
   1412c:	muleq	r1, ip, r1
   14130:	muleq	r1, ip, r1
   14134:	muleq	r1, ip, r1
   14138:	muleq	r1, ip, r1
   1413c:	muleq	r1, ip, r1
   14140:	muleq	r1, ip, r1
   14144:	muleq	r1, ip, r1
   14148:	muleq	r1, ip, r1
   1414c:	muleq	r1, ip, r1
   14150:	muleq	r1, ip, r1
   14154:	muleq	r1, ip, r1
   14158:	muleq	r1, ip, r1
   1415c:	muleq	r1, ip, r1
   14160:	muleq	r1, ip, r1
   14164:	muleq	r1, ip, r1
   14168:	muleq	r1, ip, r1
   1416c:	muleq	r1, ip, r1
   14170:	muleq	r1, ip, r1
   14174:	muleq	r1, ip, r1
   14178:	muleq	r1, ip, r1
   1417c:	muleq	r1, ip, r1
   14180:	muleq	r1, ip, r1
   14184:	muleq	r1, ip, r1
   14188:	muleq	r1, ip, r1
   1418c:	muleq	r1, ip, r1
   14190:	muleq	r1, ip, r1
   14194:	muleq	r1, ip, r1
   14198:	andeq	r4, r1, r0, lsl r6
   1419c:	add	r2, r2, #1
   141a0:	cmp	r2, r0
   141a4:	bcc	140fc <__assert_fail@plt+0x2fa8>
   141a8:	ldr	r6, [sp, #44]	; 0x2c
   141ac:	add	r6, r0, r6
   141b0:	ldr	r0, [fp, #-44]	; 0xffffffd4
   141b4:	bl	10f98 <iswprint@plt>
   141b8:	cmp	r0, #0
   141bc:	movwne	r0, #1
   141c0:	and	r4, r4, r0
   141c4:	sub	r0, fp, #40	; 0x28
   141c8:	bl	10f44 <mbsinit@plt>
   141cc:	ldr	lr, [sp, #28]
   141d0:	ldr	ip, [fp, #-84]	; 0xffffffac
   141d4:	sub	r3, fp, #40	; 0x28
   141d8:	cmp	r0, #0
   141dc:	beq	1409c <__assert_fail@plt+0x2f48>
   141e0:	b	14558 <__assert_fail@plt+0x3404>
   141e4:	ldr	r0, [sp, #32]
   141e8:	cmp	r0, #0
   141ec:	beq	14288 <__assert_fail@plt+0x3134>
   141f0:	add	r0, r7, #2
   141f4:	cmp	r0, lr
   141f8:	bcs	14288 <__assert_fail@plt+0x3134>
   141fc:	add	r1, ip, r7
   14200:	ldrb	r1, [r1, #1]
   14204:	cmp	r1, #63	; 0x3f
   14208:	bne	14288 <__assert_fail@plt+0x3134>
   1420c:	ldrb	r5, [ip, r0]
   14210:	sub	r1, r5, #33	; 0x21
   14214:	cmp	r1, #29
   14218:	bhi	14288 <__assert_fail@plt+0x3134>
   1421c:	movw	r3, #20929	; 0x51c1
   14220:	mov	r2, #1
   14224:	movt	r3, #14336	; 0x3800
   14228:	tst	r3, r2, lsl r1
   1422c:	beq	14288 <__assert_fail@plt+0x3134>
   14230:	ldr	r1, [fp, #-72]	; 0xffffffb8
   14234:	tst	r1, #1
   14238:	bne	14730 <__assert_fail@plt+0x35dc>
   1423c:	cmp	r8, sl
   14240:	mov	r7, r0
   14244:	mov	r4, #0
   14248:	movcc	r1, #63	; 0x3f
   1424c:	strbcc	r1, [r6, r8]
   14250:	add	r1, r8, #1
   14254:	cmp	r1, sl
   14258:	movcc	r2, #34	; 0x22
   1425c:	strbcc	r2, [r6, r1]
   14260:	add	r1, r8, #2
   14264:	cmp	r1, sl
   14268:	movcc	r2, #34	; 0x22
   1426c:	strbcc	r2, [r6, r1]
   14270:	add	r1, r8, #3
   14274:	add	r8, r8, #4
   14278:	cmp	r1, sl
   1427c:	movcc	r2, #63	; 0x3f
   14280:	strbcc	r2, [r6, r1]
   14284:	b	13cec <__assert_fail@plt+0x2b98>
   14288:	mov	r5, #63	; 0x3f
   1428c:	mov	r4, #0
   14290:	b	13cec <__assert_fail@plt+0x2b98>
   14294:	add	r1, r2, r7
   14298:	ldr	lr, [sp, #28]
   1429c:	mov	r3, #0
   142a0:	str	r1, [sp, #44]	; 0x2c
   142a4:	add	r1, r7, #1
   142a8:	ldr	r7, [fp, #-64]	; 0xffffffc0
   142ac:	tst	r0, #1
   142b0:	bne	14384 <__assert_fail@plt+0x3230>
   142b4:	ldr	r2, [fp, #-72]	; 0xffffffb8
   142b8:	tst	r2, #1
   142bc:	bne	14678 <__assert_fail@plt+0x3524>
   142c0:	ldr	r3, [fp, #-80]	; 0xffffffb0
   142c4:	ldr	r2, [fp, #-56]	; 0xffffffc8
   142c8:	cmp	r7, #2
   142cc:	movwne	r3, #1
   142d0:	orr	r3, r3, r2
   142d4:	tst	r3, #1
   142d8:	bne	14314 <__assert_fail@plt+0x31c0>
   142dc:	cmp	r8, sl
   142e0:	add	r3, r8, #1
   142e4:	movcc	r2, #39	; 0x27
   142e8:	strbcc	r2, [r6, r8]
   142ec:	cmp	r3, sl
   142f0:	movcc	r2, #36	; 0x24
   142f4:	strbcc	r2, [r6, r3]
   142f8:	add	r3, r8, #2
   142fc:	add	r8, r8, #3
   14300:	cmp	r3, sl
   14304:	movcc	r2, #39	; 0x27
   14308:	strbcc	r2, [r6, r3]
   1430c:	mov	r2, #1
   14310:	str	r2, [fp, #-56]	; 0xffffffc8
   14314:	cmp	r8, sl
   14318:	movcc	r3, #92	; 0x5c
   1431c:	strbcc	r3, [r6, r8]
   14320:	add	r3, r8, #1
   14324:	cmp	r3, sl
   14328:	andcc	r7, r5, #192	; 0xc0
   1432c:	movcc	r2, #48	; 0x30
   14330:	orrcc	r7, r2, r7, lsr #6
   14334:	strbcc	r7, [r6, r3]
   14338:	add	r3, r8, #2
   1433c:	add	r8, r8, #3
   14340:	cmp	r3, sl
   14344:	lsrcc	r7, r5, #3
   14348:	movcc	r2, #6
   1434c:	bficc	r7, r2, #3, #29
   14350:	mov	r2, #6
   14354:	strbcc	r7, [r6, r3]
   14358:	bfi	r5, r2, #3, #29
   1435c:	mov	r3, #1
   14360:	b	143a8 <__assert_fail@plt+0x3254>
   14364:	cmp	r8, sl
   14368:	ldr	r7, [fp, #-64]	; 0xffffffc0
   1436c:	strbcc	r5, [r6, r8]
   14370:	add	r8, r8, #1
   14374:	ldrb	r5, [ip, r1]
   14378:	add	r1, r1, #1
   1437c:	tst	r0, #1
   14380:	beq	142b4 <__assert_fail@plt+0x3160>
   14384:	ldr	r2, [fp, #-52]	; 0xffffffcc
   14388:	tst	r2, #1
   1438c:	beq	143a0 <__assert_fail@plt+0x324c>
   14390:	cmp	r8, sl
   14394:	movcc	r7, #92	; 0x5c
   14398:	strbcc	r7, [r6, r8]
   1439c:	add	r8, r8, #1
   143a0:	mov	r2, #0
   143a4:	str	r2, [fp, #-52]	; 0xffffffcc
   143a8:	ldr	r2, [sp, #44]	; 0x2c
   143ac:	and	r9, r3, #1
   143b0:	cmp	r2, r1
   143b4:	bls	144b4 <__assert_fail@plt+0x3360>
   143b8:	ldr	r2, [fp, #-56]	; 0xffffffc8
   143bc:	cmp	r9, #0
   143c0:	movwne	r9, #1
   143c4:	mvn	r7, r2
   143c8:	orr	r7, r7, r9
   143cc:	tst	r7, #1
   143d0:	bne	14364 <__assert_fail@plt+0x3210>
   143d4:	cmp	r8, sl
   143d8:	movcc	r7, #39	; 0x27
   143dc:	strbcc	r7, [r6, r8]
   143e0:	add	r7, r8, #1
   143e4:	add	r8, r8, #2
   143e8:	cmp	r7, sl
   143ec:	movcc	r2, #39	; 0x27
   143f0:	strbcc	r2, [r6, r7]
   143f4:	mov	r2, #0
   143f8:	str	r2, [fp, #-56]	; 0xffffffc8
   143fc:	b	14364 <__assert_fail@plt+0x3210>
   14400:	cmp	r8, sl
   14404:	mov	r2, #1
   14408:	movcc	r0, #39	; 0x27
   1440c:	strbcc	r0, [r6, r8]
   14410:	add	r0, r8, #1
   14414:	cmp	r0, sl
   14418:	movcc	r1, #36	; 0x24
   1441c:	strbcc	r1, [r6, r0]
   14420:	add	r0, r8, #2
   14424:	cmp	r0, sl
   14428:	movcc	r1, #39	; 0x27
   1442c:	strbcc	r1, [r6, r0]
   14430:	add	r0, r8, #3
   14434:	cmp	r0, sl
   14438:	add	r8, r0, #1
   1443c:	str	r2, [fp, #-56]	; 0xffffffc8
   14440:	movcc	r1, #92	; 0x5c
   14444:	strbcc	r1, [r6, r0]
   14448:	ldr	r1, [fp, #-64]	; 0xffffffc0
   1444c:	cmp	r1, #2
   14450:	beq	144a4 <__assert_fail@plt+0x3350>
   14454:	add	r1, r7, #1
   14458:	mov	r4, #0
   1445c:	mov	r9, #1
   14460:	mov	r5, #48	; 0x30
   14464:	cmp	r1, lr
   14468:	bcs	13cec <__assert_fail@plt+0x2b98>
   1446c:	ldrb	r1, [ip, r1]
   14470:	sub	r1, r1, #48	; 0x30
   14474:	uxtb	r1, r1
   14478:	cmp	r1, #9
   1447c:	bhi	13cec <__assert_fail@plt+0x2b98>
   14480:	cmp	r8, sl
   14484:	movcc	r1, #48	; 0x30
   14488:	strbcc	r1, [r6, r8]
   1448c:	add	r1, r0, #2
   14490:	add	r8, r0, #3
   14494:	cmp	r1, sl
   14498:	movcc	r2, #48	; 0x30
   1449c:	strbcc	r2, [r6, r1]
   144a0:	b	13cec <__assert_fail@plt+0x2b98>
   144a4:	mov	r0, #48	; 0x30
   144a8:	mov	r9, #1
   144ac:	mov	r4, #0
   144b0:	b	13f84 <__assert_fail@plt+0x2e30>
   144b4:	cmp	r9, #0
   144b8:	sub	r7, r1, #1
   144bc:	mov	r0, r5
   144c0:	movwne	r9, #1
   144c4:	cmp	r9, #0
   144c8:	bne	14508 <__assert_fail@plt+0x33b4>
   144cc:	ldr	r1, [fp, #-56]	; 0xffffffc8
   144d0:	tst	r1, #1
   144d4:	beq	14508 <__assert_fail@plt+0x33b4>
   144d8:	cmp	r8, sl
   144dc:	ldr	r5, [fp, #-48]	; 0xffffffd0
   144e0:	movcc	r1, #39	; 0x27
   144e4:	strbcc	r1, [r6, r8]
   144e8:	add	r1, r8, #1
   144ec:	add	r8, r8, #2
   144f0:	cmp	r1, sl
   144f4:	movcc	r2, #39	; 0x27
   144f8:	strbcc	r2, [r6, r1]
   144fc:	mov	r1, #0
   14500:	str	r1, [fp, #-56]	; 0xffffffc8
   14504:	b	14010 <__assert_fail@plt+0x2ebc>
   14508:	ldr	r5, [fp, #-48]	; 0xffffffd0
   1450c:	b	14010 <__assert_fail@plt+0x2ebc>
   14510:	mov	r4, #0
   14514:	b	14550 <__assert_fail@plt+0x33fc>
   14518:	mov	r4, #0
   1451c:	cmp	lr, r6
   14520:	bls	14550 <__assert_fail@plt+0x33fc>
   14524:	ldr	ip, [fp, #-84]	; 0xffffffac
   14528:	ldr	r6, [sp, #44]	; 0x2c
   1452c:	ldr	r0, [sp, #24]
   14530:	ldrb	r0, [r0, r6]
   14534:	cmp	r0, #0
   14538:	beq	14558 <__assert_fail@plt+0x3404>
   1453c:	add	r6, r6, #1
   14540:	add	r0, r7, r6
   14544:	cmp	r0, lr
   14548:	bcc	1452c <__assert_fail@plt+0x33d8>
   1454c:	b	14558 <__assert_fail@plt+0x3404>
   14550:	ldr	ip, [fp, #-84]	; 0xffffffac
   14554:	ldr	r6, [sp, #44]	; 0x2c
   14558:	mov	r1, r6
   1455c:	ldr	r6, [sp, #80]	; 0x50
   14560:	b	13eb8 <__assert_fail@plt+0x2d64>
   14564:	mov	lr, r7
   14568:	b	14570 <__assert_fail@plt+0x341c>
   1456c:	mvn	lr, #0
   14570:	ldr	r7, [fp, #-64]	; 0xffffffc0
   14574:	ldr	r1, [fp, #-72]	; 0xffffffb8
   14578:	eor	r0, r7, #2
   1457c:	orr	r0, r0, r8
   14580:	clz	r0, r0
   14584:	lsr	r0, r0, #5
   14588:	tst	r1, r0
   1458c:	bne	14618 <__assert_fail@plt+0x34c4>
   14590:	mov	r0, r1
   14594:	ldr	r1, [fp, #-80]	; 0xffffffb0
   14598:	cmp	r7, #2
   1459c:	movwne	r1, #1
   145a0:	orr	r0, r0, r1
   145a4:	tst	r0, #1
   145a8:	ldreq	r0, [sp, #60]	; 0x3c
   145ac:	eoreq	r0, r0, #1
   145b0:	tsteq	r0, #1
   145b4:	bne	146c4 <__assert_fail@plt+0x3570>
   145b8:	mov	r9, lr
   145bc:	tst	r5, #1
   145c0:	bne	14680 <__assert_fail@plt+0x352c>
   145c4:	ldr	r6, [sp, #56]	; 0x38
   145c8:	mov	r4, #0
   145cc:	cmp	r6, #0
   145d0:	beq	146bc <__assert_fail@plt+0x3568>
   145d4:	ldr	r0, [sp, #84]	; 0x54
   145d8:	mov	r1, #0
   145dc:	cmp	sl, #0
   145e0:	mov	r5, #0
   145e4:	str	r1, [fp, #-72]	; 0xffffffb8
   145e8:	beq	137b8 <__assert_fail@plt+0x2664>
   145ec:	b	146c4 <__assert_fail@plt+0x3570>
   145f0:	ldr	r7, [fp, #-64]	; 0xffffffc0
   145f4:	ldr	r2, [sp, #84]	; 0x54
   145f8:	b	14620 <__assert_fail@plt+0x34cc>
   145fc:	ldr	ip, [fp, #-84]	; 0xffffffac
   14600:	mov	r2, #1
   14604:	mov	lr, r4
   14608:	ldr	r7, [fp, #-64]	; 0xffffffc0
   1460c:	b	14620 <__assert_fail@plt+0x34cc>
   14610:	ldr	r6, [sp, #80]	; 0x50
   14614:	ldr	ip, [fp, #-84]	; 0xffffffac
   14618:	ldr	r2, [sp, #84]	; 0x54
   1461c:	mov	r7, #2
   14620:	mov	r0, #0
   14624:	ldr	r1, [fp, #12]
   14628:	tst	r2, #1
   1462c:	mov	r2, r7
   14630:	mov	r3, lr
   14634:	str	r0, [sp, #8]
   14638:	ldr	r0, [sp, #72]	; 0x48
   1463c:	movwne	r2, #4
   14640:	cmp	r7, #2
   14644:	movne	r2, r7
   14648:	str	r2, [sp]
   1464c:	mov	r2, ip
   14650:	bic	r1, r1, #2
   14654:	str	r0, [sp, #12]
   14658:	ldr	r0, [sp, #76]	; 0x4c
   1465c:	str	r1, [sp, #4]
   14660:	mov	r1, sl
   14664:	str	r0, [sp, #16]
   14668:	mov	r0, r6
   1466c:	bl	13738 <__assert_fail@plt+0x25e4>
   14670:	mov	r8, r0
   14674:	b	1471c <__assert_fail@plt+0x35c8>
   14678:	ldr	r2, [sp, #84]	; 0x54
   1467c:	b	14620 <__assert_fail@plt+0x34cc>
   14680:	mov	r0, #5
   14684:	ldr	r1, [sp, #56]	; 0x38
   14688:	ldr	r2, [fp, #-84]	; 0xffffffac
   1468c:	mov	r3, r9
   14690:	str	r0, [sp]
   14694:	ldr	r0, [fp, #12]
   14698:	str	r0, [sp, #4]
   1469c:	ldr	r0, [fp, #16]
   146a0:	str	r0, [sp, #8]
   146a4:	ldr	r0, [sp, #72]	; 0x48
   146a8:	str	r0, [sp, #12]
   146ac:	ldr	r0, [sp, #76]	; 0x4c
   146b0:	str	r0, [sp, #16]
   146b4:	ldr	r0, [sp, #80]	; 0x50
   146b8:	b	1466c <__assert_fail@plt+0x3518>
   146bc:	mov	r0, #0
   146c0:	str	r0, [fp, #-72]	; 0xffffffb8
   146c4:	ldr	r1, [sp, #92]	; 0x5c
   146c8:	cmp	r1, #0
   146cc:	beq	1470c <__assert_fail@plt+0x35b8>
   146d0:	ldr	r0, [fp, #-72]	; 0xffffffb8
   146d4:	ldr	r2, [sp, #80]	; 0x50
   146d8:	tst	r0, #1
   146dc:	bne	14710 <__assert_fail@plt+0x35bc>
   146e0:	ldrb	r0, [r1]
   146e4:	cmp	r0, #0
   146e8:	beq	14710 <__assert_fail@plt+0x35bc>
   146ec:	add	r1, r1, #1
   146f0:	cmp	r8, sl
   146f4:	strbcc	r0, [r2, r8]
   146f8:	add	r8, r8, #1
   146fc:	ldrb	r0, [r1], #1
   14700:	cmp	r0, #0
   14704:	bne	146f0 <__assert_fail@plt+0x359c>
   14708:	b	14710 <__assert_fail@plt+0x35bc>
   1470c:	ldr	r2, [sp, #80]	; 0x50
   14710:	cmp	r8, sl
   14714:	movcc	r0, #0
   14718:	strbcc	r0, [r2, r8]
   1471c:	mov	r0, r8
   14720:	sub	sp, fp, #28
   14724:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14728:	mov	r2, #1
   1472c:	b	14608 <__assert_fail@plt+0x34b4>
   14730:	ldr	r2, [sp, #84]	; 0x54
   14734:	mov	r7, #5
   14738:	b	14620 <__assert_fail@plt+0x34cc>
   1473c:	bl	1113c <abort@plt>
   14740:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14744:	add	fp, sp, #28
   14748:	sub	sp, sp, #28
   1474c:	movw	r5, #37280	; 0x91a0
   14750:	cmp	r2, #0
   14754:	mov	r4, r1
   14758:	mov	r7, r0
   1475c:	str	r0, [sp, #20]
   14760:	movt	r5, #2
   14764:	movne	r5, r2
   14768:	bl	11088 <__errno_location@plt>
   1476c:	mov	sl, r0
   14770:	ldm	r5, {r0, r1}
   14774:	ldr	r2, [r5, #40]	; 0x28
   14778:	ldr	r3, [r5, #44]	; 0x2c
   1477c:	add	r9, r5, #8
   14780:	ldr	r6, [sl]
   14784:	orr	r8, r1, #1
   14788:	mov	r1, #0
   1478c:	str	r6, [sp, #24]
   14790:	stm	sp, {r0, r8, r9}
   14794:	str	r2, [sp, #12]
   14798:	str	r3, [sp, #16]
   1479c:	mov	r0, #0
   147a0:	mov	r2, r7
   147a4:	mov	r3, r4
   147a8:	mov	r6, r4
   147ac:	bl	13738 <__assert_fail@plt+0x25e4>
   147b0:	add	r7, r0, #1
   147b4:	mov	r0, r7
   147b8:	bl	15950 <__assert_fail@plt+0x47fc>
   147bc:	mov	r4, r0
   147c0:	ldr	r0, [r5]
   147c4:	ldr	r2, [r5, #44]	; 0x2c
   147c8:	ldr	r1, [r5, #40]	; 0x28
   147cc:	mov	r3, r6
   147d0:	stm	sp, {r0, r8, r9}
   147d4:	str	r2, [sp, #16]
   147d8:	str	r1, [sp, #12]
   147dc:	mov	r0, r4
   147e0:	mov	r1, r7
   147e4:	ldr	r2, [sp, #20]
   147e8:	bl	13738 <__assert_fail@plt+0x25e4>
   147ec:	ldr	r0, [sp, #24]
   147f0:	str	r0, [sl]
   147f4:	mov	r0, r4
   147f8:	sub	sp, fp, #28
   147fc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14800:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14804:	add	fp, sp, #28
   14808:	sub	sp, sp, #36	; 0x24
   1480c:	movw	r8, #37280	; 0x91a0
   14810:	cmp	r3, #0
   14814:	mov	r4, r2
   14818:	str	r2, [sp, #24]
   1481c:	mov	r5, r1
   14820:	mov	r6, r0
   14824:	str	r0, [sp, #20]
   14828:	movt	r8, #2
   1482c:	movne	r8, r3
   14830:	bl	11088 <__errno_location@plt>
   14834:	str	r0, [sp, #28]
   14838:	cmp	r4, #0
   1483c:	add	sl, r8, #8
   14840:	ldm	r8, {r3, r9}
   14844:	ldr	r7, [r0]
   14848:	ldr	r1, [r8, #40]	; 0x28
   1484c:	ldr	r2, [r8, #44]	; 0x2c
   14850:	mov	r0, #0
   14854:	orreq	r9, r9, #1
   14858:	str	r7, [sp, #32]
   1485c:	mov	r7, r5
   14860:	stm	sp, {r3, r9, sl}
   14864:	str	r1, [sp, #12]
   14868:	str	r2, [sp, #16]
   1486c:	mov	r1, #0
   14870:	mov	r2, r6
   14874:	mov	r3, r5
   14878:	bl	13738 <__assert_fail@plt+0x25e4>
   1487c:	add	r4, r0, #1
   14880:	mov	r5, r0
   14884:	mov	r0, r4
   14888:	bl	15950 <__assert_fail@plt+0x47fc>
   1488c:	mov	r6, r0
   14890:	ldr	r0, [r8]
   14894:	ldr	r2, [r8, #44]	; 0x2c
   14898:	ldr	r1, [r8, #40]	; 0x28
   1489c:	mov	r3, r7
   148a0:	stm	sp, {r0, r9, sl}
   148a4:	str	r2, [sp, #16]
   148a8:	str	r1, [sp, #12]
   148ac:	mov	r0, r6
   148b0:	mov	r1, r4
   148b4:	ldr	r2, [sp, #20]
   148b8:	bl	13738 <__assert_fail@plt+0x25e4>
   148bc:	ldr	r0, [sp, #24]
   148c0:	ldr	r1, [sp, #32]
   148c4:	ldr	r2, [sp, #28]
   148c8:	cmp	r0, #0
   148cc:	str	r1, [r2]
   148d0:	strne	r5, [r0]
   148d4:	mov	r0, r6
   148d8:	sub	sp, fp, #28
   148dc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   148e0:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   148e4:	add	fp, sp, #24
   148e8:	movw	r5, #37132	; 0x910c
   148ec:	movw	r8, #37128	; 0x9108
   148f0:	movt	r5, #2
   148f4:	movt	r8, #2
   148f8:	ldr	r0, [r5]
   148fc:	ldr	r4, [r8]
   14900:	cmp	r0, #2
   14904:	blt	14930 <__assert_fail@plt+0x37dc>
   14908:	add	r7, r4, #12
   1490c:	mov	r6, #0
   14910:	ldr	r0, [r7, r6, lsl #3]
   14914:	bl	12f48 <__assert_fail@plt+0x1df4>
   14918:	ldr	r1, [r5]
   1491c:	add	r2, r6, #2
   14920:	add	r0, r6, #1
   14924:	mov	r6, r0
   14928:	cmp	r2, r1
   1492c:	blt	14910 <__assert_fail@plt+0x37bc>
   14930:	ldr	r0, [r4, #4]
   14934:	movw	r7, #37328	; 0x91d0
   14938:	movt	r7, #2
   1493c:	cmp	r0, r7
   14940:	beq	14958 <__assert_fail@plt+0x3804>
   14944:	bl	12f48 <__assert_fail@plt+0x1df4>
   14948:	movw	r0, #37136	; 0x9110
   1494c:	mov	r6, #256	; 0x100
   14950:	movt	r0, #2
   14954:	strd	r6, [r0]
   14958:	movw	r6, #37136	; 0x9110
   1495c:	movt	r6, #2
   14960:	cmp	r4, r6
   14964:	beq	14974 <__assert_fail@plt+0x3820>
   14968:	mov	r0, r4
   1496c:	bl	12f48 <__assert_fail@plt+0x1df4>
   14970:	str	r6, [r8]
   14974:	mov	r0, #1
   14978:	str	r0, [r5]
   1497c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14980:	movw	r3, #37280	; 0x91a0
   14984:	mvn	r2, #0
   14988:	movt	r3, #2
   1498c:	b	14990 <__assert_fail@plt+0x383c>
   14990:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14994:	add	fp, sp, #28
   14998:	sub	sp, sp, #44	; 0x2c
   1499c:	mov	r7, r3
   149a0:	str	r2, [sp, #36]	; 0x24
   149a4:	str	r1, [sp, #32]
   149a8:	mov	r5, r0
   149ac:	bl	11088 <__errno_location@plt>
   149b0:	cmp	r5, #0
   149b4:	blt	14b20 <__assert_fail@plt+0x39cc>
   149b8:	cmn	r5, #-2147483647	; 0x80000001
   149bc:	beq	14b20 <__assert_fail@plt+0x39cc>
   149c0:	movw	r8, #37132	; 0x910c
   149c4:	movw	r4, #37128	; 0x9108
   149c8:	str	r0, [sp, #28]
   149cc:	ldr	r0, [r0]
   149d0:	movt	r8, #2
   149d4:	movt	r4, #2
   149d8:	ldr	r1, [r8]
   149dc:	ldr	r6, [r4]
   149e0:	str	r0, [sp, #24]
   149e4:	cmp	r1, r5
   149e8:	ble	149f4 <__assert_fail@plt+0x38a0>
   149ec:	mov	sl, r6
   149f0:	b	14a5c <__assert_fail@plt+0x3908>
   149f4:	movw	r9, #37136	; 0x9110
   149f8:	mov	r0, #8
   149fc:	add	r2, r5, #1
   14a00:	str	r1, [fp, #-32]	; 0xffffffe0
   14a04:	mvn	r3, #-2147483648	; 0x80000000
   14a08:	movt	r9, #2
   14a0c:	str	r0, [sp]
   14a10:	sub	r2, r2, r1
   14a14:	sub	r1, fp, #32
   14a18:	subs	r0, r6, r9
   14a1c:	movne	r0, r6
   14a20:	bl	15b50 <__assert_fail@plt+0x49fc>
   14a24:	cmp	r6, r9
   14a28:	mov	sl, r0
   14a2c:	str	r0, [r4]
   14a30:	ldrdeq	r0, [r9]
   14a34:	stmeq	sl, {r0, r1}
   14a38:	ldr	r1, [r8]
   14a3c:	ldr	r2, [fp, #-32]	; 0xffffffe0
   14a40:	add	r0, sl, r1, lsl #3
   14a44:	sub	r1, r2, r1
   14a48:	lsl	r2, r1, #3
   14a4c:	mov	r1, #0
   14a50:	bl	110a0 <memset@plt>
   14a54:	ldr	r0, [fp, #-32]	; 0xffffffe0
   14a58:	str	r0, [r8]
   14a5c:	mov	r9, sl
   14a60:	ldr	r6, [r9, r5, lsl #3]!
   14a64:	ldr	r4, [r9, #4]!
   14a68:	ldm	r7, {r0, r1}
   14a6c:	ldr	r2, [r7, #40]	; 0x28
   14a70:	ldr	r3, [r7, #44]	; 0x2c
   14a74:	orr	r8, r1, #1
   14a78:	add	r1, r7, #8
   14a7c:	stm	sp, {r0, r8}
   14a80:	add	r0, sp, #8
   14a84:	str	r1, [sp, #20]
   14a88:	stm	r0, {r1, r2, r3}
   14a8c:	mov	r0, r4
   14a90:	mov	r1, r6
   14a94:	ldr	r2, [sp, #32]
   14a98:	ldr	r3, [sp, #36]	; 0x24
   14a9c:	bl	13738 <__assert_fail@plt+0x25e4>
   14aa0:	cmp	r6, r0
   14aa4:	bhi	14b08 <__assert_fail@plt+0x39b4>
   14aa8:	add	r6, r0, #1
   14aac:	movw	r0, #37328	; 0x91d0
   14ab0:	movt	r0, #2
   14ab4:	str	r6, [sl, r5, lsl #3]
   14ab8:	cmp	r4, r0
   14abc:	beq	14ac8 <__assert_fail@plt+0x3974>
   14ac0:	mov	r0, r4
   14ac4:	bl	12f48 <__assert_fail@plt+0x1df4>
   14ac8:	mov	r0, r6
   14acc:	bl	15950 <__assert_fail@plt+0x47fc>
   14ad0:	str	r0, [r9]
   14ad4:	mov	r4, r0
   14ad8:	add	r3, sp, #8
   14adc:	ldr	r0, [r7]
   14ae0:	ldr	r1, [r7, #40]	; 0x28
   14ae4:	ldr	r2, [r7, #44]	; 0x2c
   14ae8:	stm	sp, {r0, r8}
   14aec:	ldr	r0, [sp, #20]
   14af0:	stm	r3, {r0, r1, r2}
   14af4:	mov	r0, r4
   14af8:	mov	r1, r6
   14afc:	ldr	r2, [sp, #32]
   14b00:	ldr	r3, [sp, #36]	; 0x24
   14b04:	bl	13738 <__assert_fail@plt+0x25e4>
   14b08:	ldr	r0, [sp, #28]
   14b0c:	ldr	r1, [sp, #24]
   14b10:	str	r1, [r0]
   14b14:	mov	r0, r4
   14b18:	sub	sp, fp, #28
   14b1c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14b20:	bl	1113c <abort@plt>
   14b24:	movw	r3, #37280	; 0x91a0
   14b28:	movt	r3, #2
   14b2c:	b	14990 <__assert_fail@plt+0x383c>
   14b30:	movw	r3, #37280	; 0x91a0
   14b34:	mov	r1, r0
   14b38:	mov	r0, #0
   14b3c:	mvn	r2, #0
   14b40:	movt	r3, #2
   14b44:	b	14990 <__assert_fail@plt+0x383c>
   14b48:	movw	r3, #37280	; 0x91a0
   14b4c:	mov	r2, r1
   14b50:	mov	r1, r0
   14b54:	mov	r0, #0
   14b58:	movt	r3, #2
   14b5c:	b	14990 <__assert_fail@plt+0x383c>
   14b60:	push	{fp, lr}
   14b64:	mov	fp, sp
   14b68:	sub	sp, sp, #48	; 0x30
   14b6c:	vmov.i32	q8, #0	; 0x00000000
   14b70:	mov	ip, #32
   14b74:	mov	r3, sp
   14b78:	mov	lr, r2
   14b7c:	cmp	r1, #10
   14b80:	add	r2, r3, #16
   14b84:	vst1.64	{d16-d17}, [r3], ip
   14b88:	vst1.64	{d16-d17}, [r3]
   14b8c:	vst1.64	{d16-d17}, [r2]
   14b90:	beq	14bb0 <__assert_fail@plt+0x3a5c>
   14b94:	str	r1, [sp]
   14b98:	mov	r3, sp
   14b9c:	mov	r1, lr
   14ba0:	mvn	r2, #0
   14ba4:	bl	14990 <__assert_fail@plt+0x383c>
   14ba8:	mov	sp, fp
   14bac:	pop	{fp, pc}
   14bb0:	bl	1113c <abort@plt>
   14bb4:	push	{r4, sl, fp, lr}
   14bb8:	add	fp, sp, #8
   14bbc:	sub	sp, sp, #48	; 0x30
   14bc0:	mov	ip, r3
   14bc4:	mov	r3, sp
   14bc8:	vmov.i32	q8, #0	; 0x00000000
   14bcc:	mov	lr, #32
   14bd0:	cmp	r1, #10
   14bd4:	add	r4, r3, #16
   14bd8:	vst1.64	{d16-d17}, [r3], lr
   14bdc:	vst1.64	{d16-d17}, [r3]
   14be0:	vst1.64	{d16-d17}, [r4]
   14be4:	beq	14c04 <__assert_fail@plt+0x3ab0>
   14be8:	str	r1, [sp]
   14bec:	mov	r1, r2
   14bf0:	mov	r3, sp
   14bf4:	mov	r2, ip
   14bf8:	bl	14990 <__assert_fail@plt+0x383c>
   14bfc:	sub	sp, fp, #8
   14c00:	pop	{r4, sl, fp, pc}
   14c04:	bl	1113c <abort@plt>
   14c08:	push	{fp, lr}
   14c0c:	mov	fp, sp
   14c10:	sub	sp, sp, #48	; 0x30
   14c14:	mov	r3, sp
   14c18:	vmov.i32	q8, #0	; 0x00000000
   14c1c:	mov	ip, #32
   14c20:	cmp	r0, #10
   14c24:	add	r2, r3, #16
   14c28:	vst1.64	{d16-d17}, [r3], ip
   14c2c:	vst1.64	{d16-d17}, [r3]
   14c30:	vst1.64	{d16-d17}, [r2]
   14c34:	beq	14c54 <__assert_fail@plt+0x3b00>
   14c38:	str	r0, [sp]
   14c3c:	mov	r3, sp
   14c40:	mov	r0, #0
   14c44:	mvn	r2, #0
   14c48:	bl	14990 <__assert_fail@plt+0x383c>
   14c4c:	mov	sp, fp
   14c50:	pop	{fp, pc}
   14c54:	bl	1113c <abort@plt>
   14c58:	push	{fp, lr}
   14c5c:	mov	fp, sp
   14c60:	sub	sp, sp, #48	; 0x30
   14c64:	mov	r3, sp
   14c68:	vmov.i32	q8, #0	; 0x00000000
   14c6c:	mov	ip, #32
   14c70:	cmp	r0, #10
   14c74:	add	lr, r3, #16
   14c78:	vst1.64	{d16-d17}, [r3], ip
   14c7c:	vst1.64	{d16-d17}, [r3]
   14c80:	vst1.64	{d16-d17}, [lr]
   14c84:	beq	14ca0 <__assert_fail@plt+0x3b4c>
   14c88:	str	r0, [sp]
   14c8c:	mov	r3, sp
   14c90:	mov	r0, #0
   14c94:	bl	14990 <__assert_fail@plt+0x383c>
   14c98:	mov	sp, fp
   14c9c:	pop	{fp, pc}
   14ca0:	bl	1113c <abort@plt>
   14ca4:	push	{r4, sl, fp, lr}
   14ca8:	add	fp, sp, #8
   14cac:	sub	sp, sp, #48	; 0x30
   14cb0:	mov	lr, r0
   14cb4:	movw	r0, #37280	; 0x91a0
   14cb8:	mov	r3, #32
   14cbc:	mov	ip, r1
   14cc0:	mov	r4, #1
   14cc4:	movt	r0, #2
   14cc8:	add	r1, r0, #16
   14ccc:	vld1.64	{d16-d17}, [r0], r3
   14cd0:	mov	r3, sp
   14cd4:	vld1.64	{d18-d19}, [r1]
   14cd8:	add	r1, r3, #16
   14cdc:	vld1.64	{d20-d21}, [r0]
   14ce0:	add	r0, r3, #32
   14ce4:	vst1.64	{d18-d19}, [r1]
   14ce8:	mov	r1, r3
   14cec:	vst1.64	{d20-d21}, [r0]
   14cf0:	mov	r0, #28
   14cf4:	and	r0, r0, r2, lsr #3
   14cf8:	and	r2, r2, #31
   14cfc:	vst1.64	{d16-d17}, [r1], r0
   14d00:	ldr	r0, [r1, #8]
   14d04:	bic	r4, r4, r0, lsr r2
   14d08:	eor	r0, r0, r4, lsl r2
   14d0c:	mov	r2, ip
   14d10:	str	r0, [r1, #8]
   14d14:	mov	r0, #0
   14d18:	mov	r1, lr
   14d1c:	bl	14990 <__assert_fail@plt+0x383c>
   14d20:	sub	sp, fp, #8
   14d24:	pop	{r4, sl, fp, pc}
   14d28:	push	{fp, lr}
   14d2c:	mov	fp, sp
   14d30:	sub	sp, sp, #48	; 0x30
   14d34:	mov	ip, r0
   14d38:	movw	r0, #37280	; 0x91a0
   14d3c:	mov	r3, #32
   14d40:	movt	r0, #2
   14d44:	add	r2, r0, #16
   14d48:	vld1.64	{d16-d17}, [r0], r3
   14d4c:	mov	r3, sp
   14d50:	vld1.64	{d18-d19}, [r2]
   14d54:	add	r2, r3, #16
   14d58:	vld1.64	{d20-d21}, [r0]
   14d5c:	add	r0, r3, #32
   14d60:	vst1.64	{d18-d19}, [r2]
   14d64:	mov	r2, r3
   14d68:	vst1.64	{d20-d21}, [r0]
   14d6c:	mov	r0, #28
   14d70:	and	r0, r0, r1, lsr #3
   14d74:	and	r1, r1, #31
   14d78:	vst1.64	{d16-d17}, [r2], r0
   14d7c:	mov	r0, #1
   14d80:	ldr	lr, [r2, #8]
   14d84:	bic	r0, r0, lr, lsr r1
   14d88:	eor	r0, lr, r0, lsl r1
   14d8c:	mov	r1, ip
   14d90:	str	r0, [r2, #8]
   14d94:	mov	r0, #0
   14d98:	mvn	r2, #0
   14d9c:	bl	14990 <__assert_fail@plt+0x383c>
   14da0:	mov	sp, fp
   14da4:	pop	{fp, pc}
   14da8:	push	{fp, lr}
   14dac:	mov	fp, sp
   14db0:	sub	sp, sp, #48	; 0x30
   14db4:	movw	r2, #37280	; 0x91a0
   14db8:	mov	r3, #32
   14dbc:	mov	r1, r0
   14dc0:	movt	r2, #2
   14dc4:	add	r0, r2, #16
   14dc8:	vld1.64	{d16-d17}, [r2], r3
   14dcc:	mov	r3, sp
   14dd0:	vld1.64	{d18-d19}, [r0]
   14dd4:	add	r0, r3, #16
   14dd8:	vld1.64	{d20-d21}, [r2]
   14ddc:	mov	r2, r3
   14de0:	vst1.64	{d18-d19}, [r0]
   14de4:	add	r0, r3, #32
   14de8:	vst1.64	{d20-d21}, [r0]
   14dec:	mov	r0, #12
   14df0:	vst1.64	{d16-d17}, [r2], r0
   14df4:	ldr	r0, [r2]
   14df8:	orr	r0, r0, #67108864	; 0x4000000
   14dfc:	str	r0, [r2]
   14e00:	mov	r0, #0
   14e04:	mvn	r2, #0
   14e08:	bl	14990 <__assert_fail@plt+0x383c>
   14e0c:	mov	sp, fp
   14e10:	pop	{fp, pc}
   14e14:	push	{fp, lr}
   14e18:	mov	fp, sp
   14e1c:	sub	sp, sp, #48	; 0x30
   14e20:	mov	ip, r1
   14e24:	mov	r1, r0
   14e28:	movw	r0, #37280	; 0x91a0
   14e2c:	mov	r3, #32
   14e30:	movt	r0, #2
   14e34:	add	r2, r0, #16
   14e38:	vld1.64	{d16-d17}, [r0], r3
   14e3c:	mov	r3, sp
   14e40:	vld1.64	{d18-d19}, [r2]
   14e44:	add	r2, r3, #16
   14e48:	vld1.64	{d20-d21}, [r0]
   14e4c:	add	r0, r3, #32
   14e50:	vst1.64	{d18-d19}, [r2]
   14e54:	mov	r2, r3
   14e58:	vst1.64	{d20-d21}, [r0]
   14e5c:	mov	r0, #12
   14e60:	vst1.64	{d16-d17}, [r2], r0
   14e64:	ldr	r0, [r2]
   14e68:	orr	r0, r0, #67108864	; 0x4000000
   14e6c:	str	r0, [r2]
   14e70:	mov	r0, #0
   14e74:	mov	r2, ip
   14e78:	bl	14990 <__assert_fail@plt+0x383c>
   14e7c:	mov	sp, fp
   14e80:	pop	{fp, pc}
   14e84:	push	{r4, sl, fp, lr}
   14e88:	add	fp, sp, #8
   14e8c:	sub	sp, sp, #96	; 0x60
   14e90:	mov	ip, r2
   14e94:	mov	r2, sp
   14e98:	vmov.i32	q8, #0	; 0x00000000
   14e9c:	mov	r4, #28
   14ea0:	cmp	r1, #10
   14ea4:	mov	r3, r2
   14ea8:	add	lr, r2, #16
   14eac:	vst1.64	{d16-d17}, [r3], r4
   14eb0:	vst1.64	{d16-d17}, [lr]
   14eb4:	vst1.32	{d16-d17}, [r3]
   14eb8:	beq	14f08 <__assert_fail@plt+0x3db4>
   14ebc:	vld1.64	{d16-d17}, [r2], r4
   14ec0:	vld1.64	{d18-d19}, [lr]
   14ec4:	add	r3, sp, #48	; 0x30
   14ec8:	add	r4, r3, #4
   14ecc:	vld1.32	{d20-d21}, [r2]
   14ed0:	add	r2, r3, #20
   14ed4:	vst1.32	{d16-d17}, [r4]
   14ed8:	vst1.32	{d18-d19}, [r2]
   14edc:	add	r2, r3, #32
   14ee0:	vst1.32	{d20-d21}, [r2]
   14ee4:	str	r1, [sp, #48]	; 0x30
   14ee8:	mvn	r2, #0
   14eec:	ldr	r1, [sp, #60]	; 0x3c
   14ef0:	orr	r1, r1, #67108864	; 0x4000000
   14ef4:	str	r1, [sp, #60]	; 0x3c
   14ef8:	mov	r1, ip
   14efc:	bl	14990 <__assert_fail@plt+0x383c>
   14f00:	sub	sp, fp, #8
   14f04:	pop	{r4, sl, fp, pc}
   14f08:	bl	1113c <abort@plt>
   14f0c:	push	{r4, r5, fp, lr}
   14f10:	add	fp, sp, #8
   14f14:	sub	sp, sp, #48	; 0x30
   14f18:	mov	ip, r3
   14f1c:	movw	r3, #37280	; 0x91a0
   14f20:	mov	lr, #32
   14f24:	cmp	r1, #0
   14f28:	mov	r5, sp
   14f2c:	movt	r3, #2
   14f30:	cmpne	r2, #0
   14f34:	add	r4, r3, #16
   14f38:	vld1.64	{d16-d17}, [r3], lr
   14f3c:	vld1.64	{d18-d19}, [r4]
   14f40:	add	r4, r5, #16
   14f44:	vld1.64	{d20-d21}, [r3]
   14f48:	vst1.64	{d16-d17}, [r5], lr
   14f4c:	mov	r3, #10
   14f50:	vst1.64	{d18-d19}, [r4]
   14f54:	vst1.64	{d20-d21}, [r5]
   14f58:	str	r3, [sp]
   14f5c:	bne	14f64 <__assert_fail@plt+0x3e10>
   14f60:	bl	1113c <abort@plt>
   14f64:	str	r2, [sp, #44]	; 0x2c
   14f68:	str	r1, [sp, #40]	; 0x28
   14f6c:	mov	r3, sp
   14f70:	mov	r1, ip
   14f74:	mvn	r2, #0
   14f78:	bl	14990 <__assert_fail@plt+0x383c>
   14f7c:	sub	sp, fp, #8
   14f80:	pop	{r4, r5, fp, pc}
   14f84:	push	{r4, r5, fp, lr}
   14f88:	add	fp, sp, #8
   14f8c:	sub	sp, sp, #48	; 0x30
   14f90:	mov	lr, r3
   14f94:	movw	r3, #37280	; 0x91a0
   14f98:	mov	ip, #32
   14f9c:	cmp	r1, #0
   14fa0:	mov	r5, sp
   14fa4:	movt	r3, #2
   14fa8:	cmpne	r2, #0
   14fac:	add	r4, r3, #16
   14fb0:	vld1.64	{d16-d17}, [r3], ip
   14fb4:	vld1.64	{d18-d19}, [r4]
   14fb8:	add	r4, r5, #16
   14fbc:	vld1.64	{d20-d21}, [r3]
   14fc0:	vst1.64	{d16-d17}, [r5], ip
   14fc4:	mov	r3, #10
   14fc8:	vst1.64	{d18-d19}, [r4]
   14fcc:	vst1.64	{d20-d21}, [r5]
   14fd0:	str	r3, [sp]
   14fd4:	bne	14fdc <__assert_fail@plt+0x3e88>
   14fd8:	bl	1113c <abort@plt>
   14fdc:	ldr	ip, [fp, #8]
   14fe0:	str	r2, [sp, #44]	; 0x2c
   14fe4:	str	r1, [sp, #40]	; 0x28
   14fe8:	mov	r3, sp
   14fec:	mov	r1, lr
   14ff0:	mov	r2, ip
   14ff4:	bl	14990 <__assert_fail@plt+0x383c>
   14ff8:	sub	sp, fp, #8
   14ffc:	pop	{r4, r5, fp, pc}
   15000:	push	{r4, sl, fp, lr}
   15004:	add	fp, sp, #8
   15008:	sub	sp, sp, #48	; 0x30
   1500c:	mov	ip, r2
   15010:	movw	r2, #37280	; 0x91a0
   15014:	mov	lr, #32
   15018:	cmp	r0, #0
   1501c:	mov	r4, sp
   15020:	movt	r2, #2
   15024:	cmpne	r1, #0
   15028:	add	r3, r2, #16
   1502c:	vld1.64	{d16-d17}, [r2], lr
   15030:	vld1.64	{d18-d19}, [r3]
   15034:	add	r3, r4, #16
   15038:	vld1.64	{d20-d21}, [r2]
   1503c:	vst1.64	{d16-d17}, [r4], lr
   15040:	mov	r2, #10
   15044:	vst1.64	{d18-d19}, [r3]
   15048:	vst1.64	{d20-d21}, [r4]
   1504c:	str	r2, [sp]
   15050:	bne	15058 <__assert_fail@plt+0x3f04>
   15054:	bl	1113c <abort@plt>
   15058:	str	r1, [sp, #44]	; 0x2c
   1505c:	str	r0, [sp, #40]	; 0x28
   15060:	mov	r3, sp
   15064:	mov	r0, #0
   15068:	mov	r1, ip
   1506c:	mvn	r2, #0
   15070:	bl	14990 <__assert_fail@plt+0x383c>
   15074:	sub	sp, fp, #8
   15078:	pop	{r4, sl, fp, pc}
   1507c:	push	{r4, r5, fp, lr}
   15080:	add	fp, sp, #8
   15084:	sub	sp, sp, #48	; 0x30
   15088:	mov	lr, r2
   1508c:	movw	r2, #37280	; 0x91a0
   15090:	mov	ip, r3
   15094:	mov	r3, #32
   15098:	cmp	r0, #0
   1509c:	mov	r5, sp
   150a0:	movt	r2, #2
   150a4:	cmpne	r1, #0
   150a8:	add	r4, r2, #16
   150ac:	vld1.64	{d16-d17}, [r2], r3
   150b0:	vld1.64	{d18-d19}, [r4]
   150b4:	add	r4, r5, #16
   150b8:	vld1.64	{d20-d21}, [r2]
   150bc:	vst1.64	{d16-d17}, [r5], r3
   150c0:	mov	r2, #10
   150c4:	vst1.64	{d18-d19}, [r4]
   150c8:	vst1.64	{d20-d21}, [r5]
   150cc:	str	r2, [sp]
   150d0:	bne	150d8 <__assert_fail@plt+0x3f84>
   150d4:	bl	1113c <abort@plt>
   150d8:	str	r1, [sp, #44]	; 0x2c
   150dc:	str	r0, [sp, #40]	; 0x28
   150e0:	mov	r3, sp
   150e4:	mov	r0, #0
   150e8:	mov	r1, lr
   150ec:	mov	r2, ip
   150f0:	bl	14990 <__assert_fail@plt+0x383c>
   150f4:	sub	sp, fp, #8
   150f8:	pop	{r4, r5, fp, pc}
   150fc:	movw	r3, #37144	; 0x9118
   15100:	movt	r3, #2
   15104:	b	14990 <__assert_fail@plt+0x383c>
   15108:	movw	r3, #37144	; 0x9118
   1510c:	mov	r2, r1
   15110:	mov	r1, r0
   15114:	mov	r0, #0
   15118:	movt	r3, #2
   1511c:	b	14990 <__assert_fail@plt+0x383c>
   15120:	movw	r3, #37144	; 0x9118
   15124:	mvn	r2, #0
   15128:	movt	r3, #2
   1512c:	b	14990 <__assert_fail@plt+0x383c>
   15130:	movw	r3, #37144	; 0x9118
   15134:	mov	r1, r0
   15138:	mov	r0, #0
   1513c:	mvn	r2, #0
   15140:	movt	r3, #2
   15144:	b	14990 <__assert_fail@plt+0x383c>
   15148:	push	{r4, r5, fp, lr}
   1514c:	add	fp, sp, #8
   15150:	mov	r5, r0
   15154:	mov	r4, r1
   15158:	mov	r0, #0
   1515c:	mov	r2, #5
   15160:	mov	r1, r5
   15164:	bl	10f68 <dcgettext@plt>
   15168:	cmp	r0, r5
   1516c:	popne	{r4, r5, fp, pc}
   15170:	bl	16cc0 <__assert_fail@plt+0x5b6c>
   15174:	ldrb	r1, [r0]
   15178:	and	r1, r1, #223	; 0xdf
   1517c:	cmp	r1, #71	; 0x47
   15180:	beq	151e8 <__assert_fail@plt+0x4094>
   15184:	cmp	r1, #85	; 0x55
   15188:	bne	1520c <__assert_fail@plt+0x40b8>
   1518c:	ldrb	r1, [r0, #1]
   15190:	and	r1, r1, #223	; 0xdf
   15194:	cmp	r1, #84	; 0x54
   15198:	bne	1520c <__assert_fail@plt+0x40b8>
   1519c:	ldrb	r1, [r0, #2]
   151a0:	and	r1, r1, #223	; 0xdf
   151a4:	cmp	r1, #70	; 0x46
   151a8:	ldrbeq	r1, [r0, #3]
   151ac:	cmpeq	r1, #45	; 0x2d
   151b0:	bne	1520c <__assert_fail@plt+0x40b8>
   151b4:	ldrb	r1, [r0, #4]
   151b8:	cmp	r1, #56	; 0x38
   151bc:	ldrbeq	r0, [r0, #5]
   151c0:	cmpeq	r0, #0
   151c4:	bne	1520c <__assert_fail@plt+0x40b8>
   151c8:	ldrb	r1, [r5]
   151cc:	movw	r2, #31933	; 0x7cbd
   151d0:	movw	r0, #31937	; 0x7cc1
   151d4:	movt	r2, #1
   151d8:	movt	r0, #1
   151dc:	cmp	r1, #96	; 0x60
   151e0:	moveq	r0, r2
   151e4:	pop	{r4, r5, fp, pc}
   151e8:	ldrb	r1, [r0, #1]
   151ec:	and	r1, r1, #223	; 0xdf
   151f0:	cmp	r1, #66	; 0x42
   151f4:	bne	1520c <__assert_fail@plt+0x40b8>
   151f8:	ldrb	r1, [r0, #2]
   151fc:	cmp	r1, #49	; 0x31
   15200:	ldrbeq	r1, [r0, #3]
   15204:	cmpeq	r1, #56	; 0x38
   15208:	beq	15228 <__assert_fail@plt+0x40d4>
   1520c:	movw	r1, #31927	; 0x7cb7
   15210:	movw	r0, #31931	; 0x7cbb
   15214:	cmp	r4, #9
   15218:	movt	r1, #1
   1521c:	movt	r0, #1
   15220:	moveq	r0, r1
   15224:	pop	{r4, r5, fp, pc}
   15228:	ldrb	r1, [r0, #4]
   1522c:	cmp	r1, #48	; 0x30
   15230:	ldrbeq	r1, [r0, #5]
   15234:	cmpeq	r1, #51	; 0x33
   15238:	bne	1520c <__assert_fail@plt+0x40b8>
   1523c:	ldrb	r1, [r0, #6]
   15240:	cmp	r1, #48	; 0x30
   15244:	ldrbeq	r0, [r0, #7]
   15248:	cmpeq	r0, #0
   1524c:	bne	1520c <__assert_fail@plt+0x40b8>
   15250:	ldrb	r1, [r5]
   15254:	movw	r2, #31941	; 0x7cc5
   15258:	movw	r0, #31945	; 0x7cc9
   1525c:	movt	r2, #1
   15260:	movt	r0, #1
   15264:	b	151dc <__assert_fail@plt+0x4088>
   15268:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1526c:	add	fp, sp, #24
   15270:	sub	sp, sp, #32
   15274:	ldr	r6, [fp, #12]
   15278:	ldr	r7, [fp, #8]
   1527c:	mov	r4, r2
   15280:	mov	r8, r0
   15284:	cmp	r1, #0
   15288:	beq	152b0 <__assert_fail@plt+0x415c>
   1528c:	movw	r2, #32032	; 0x7d20
   15290:	mov	r5, r1
   15294:	str	r3, [sp, #4]
   15298:	str	r4, [sp]
   1529c:	mov	r0, r8
   152a0:	mov	r1, #1
   152a4:	movt	r2, #1
   152a8:	mov	r3, r5
   152ac:	b	152c8 <__assert_fail@plt+0x4174>
   152b0:	movw	r2, #32044	; 0x7d2c
   152b4:	str	r3, [sp]
   152b8:	mov	r0, r8
   152bc:	mov	r1, #1
   152c0:	mov	r3, r4
   152c4:	movt	r2, #1
   152c8:	bl	110c4 <__fprintf_chk@plt>
   152cc:	movw	r1, #32051	; 0x7d33
   152d0:	mov	r0, #0
   152d4:	mov	r2, #5
   152d8:	movt	r1, #1
   152dc:	bl	10f68 <dcgettext@plt>
   152e0:	movw	r2, #32769	; 0x8001
   152e4:	mov	r3, r0
   152e8:	movw	r0, #2022	; 0x7e6
   152ec:	mov	r1, #1
   152f0:	str	r0, [sp]
   152f4:	movt	r2, #1
   152f8:	mov	r0, r8
   152fc:	bl	110c4 <__fprintf_chk@plt>
   15300:	movw	r4, #31151	; 0x79af
   15304:	mov	r1, r8
   15308:	movt	r4, #1
   1530c:	mov	r0, r4
   15310:	bl	10ecc <fputs_unlocked@plt>
   15314:	movw	r1, #32055	; 0x7d37
   15318:	mov	r0, #0
   1531c:	mov	r2, #5
   15320:	movt	r1, #1
   15324:	bl	10f68 <dcgettext@plt>
   15328:	movw	r3, #32226	; 0x7de2
   1532c:	mov	r2, r0
   15330:	mov	r0, r8
   15334:	mov	r1, #1
   15338:	movt	r3, #1
   1533c:	bl	110c4 <__fprintf_chk@plt>
   15340:	mov	r0, r4
   15344:	mov	r1, r8
   15348:	bl	10ecc <fputs_unlocked@plt>
   1534c:	cmp	r6, #9
   15350:	bhi	1538c <__assert_fail@plt+0x4238>
   15354:	add	r0, pc, #0
   15358:	ldr	pc, [r0, r6, lsl #2]
   1535c:	andeq	r5, r1, r4, lsl #7
   15360:	muleq	r1, r8, r3
   15364:	andeq	r5, r1, r8, asr #7
   15368:	strdeq	r5, [r1], -r0
   1536c:	andeq	r5, r1, r8, lsl r4
   15370:	andeq	r5, r1, r0, asr #8
   15374:	andeq	r5, r1, r8, ror #8
   15378:	andeq	r5, r1, r0, lsr #9
   1537c:	andeq	r5, r1, r0, asr #10
   15380:	andeq	r5, r1, r8, ror #9
   15384:	sub	sp, fp, #24
   15388:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1538c:	movw	r1, #32579	; 0x7f43
   15390:	movt	r1, #1
   15394:	b	154f0 <__assert_fail@plt+0x439c>
   15398:	movw	r1, #32260	; 0x7e04
   1539c:	mov	r0, #0
   153a0:	mov	r2, #5
   153a4:	movt	r1, #1
   153a8:	bl	10f68 <dcgettext@plt>
   153ac:	ldr	r3, [r7]
   153b0:	mov	r2, r0
   153b4:	mov	r0, r8
   153b8:	mov	r1, #1
   153bc:	sub	sp, fp, #24
   153c0:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   153c4:	b	110c4 <__fprintf_chk@plt>
   153c8:	movw	r1, #32276	; 0x7e14
   153cc:	mov	r0, #0
   153d0:	mov	r2, #5
   153d4:	movt	r1, #1
   153d8:	bl	10f68 <dcgettext@plt>
   153dc:	mov	r2, r0
   153e0:	ldr	r3, [r7]
   153e4:	ldr	r0, [r7, #4]
   153e8:	str	r0, [sp]
   153ec:	b	154dc <__assert_fail@plt+0x4388>
   153f0:	movw	r1, #32299	; 0x7e2b
   153f4:	mov	r0, #0
   153f8:	mov	r2, #5
   153fc:	movt	r1, #1
   15400:	bl	10f68 <dcgettext@plt>
   15404:	ldr	r3, [r7]
   15408:	mov	r2, r0
   1540c:	ldmib	r7, {r0, r1}
   15410:	stm	sp, {r0, r1}
   15414:	b	154dc <__assert_fail@plt+0x4388>
   15418:	movw	r1, #32327	; 0x7e47
   1541c:	mov	r0, #0
   15420:	mov	r2, #5
   15424:	movt	r1, #1
   15428:	bl	10f68 <dcgettext@plt>
   1542c:	ldr	r3, [r7]
   15430:	mov	r2, r0
   15434:	ldmib	r7, {r0, r1, r7}
   15438:	stm	sp, {r0, r1, r7}
   1543c:	b	154dc <__assert_fail@plt+0x4388>
   15440:	movw	r1, #32359	; 0x7e67
   15444:	mov	r0, #0
   15448:	mov	r2, #5
   1544c:	movt	r1, #1
   15450:	bl	10f68 <dcgettext@plt>
   15454:	ldr	r3, [r7]
   15458:	mov	r2, r0
   1545c:	ldmib	r7, {r0, r1, r6, r7}
   15460:	stm	sp, {r0, r1, r6, r7}
   15464:	b	154dc <__assert_fail@plt+0x4388>
   15468:	movw	r1, #32395	; 0x7e8b
   1546c:	mov	r0, #0
   15470:	mov	r2, #5
   15474:	movt	r1, #1
   15478:	bl	10f68 <dcgettext@plt>
   1547c:	ldr	r3, [r7]
   15480:	mov	r2, r0
   15484:	ldmib	r7, {r0, r1, r6}
   15488:	ldr	r5, [r7, #16]
   1548c:	ldr	r7, [r7, #20]
   15490:	stm	sp, {r0, r1, r6}
   15494:	str	r5, [sp, #12]
   15498:	str	r7, [sp, #16]
   1549c:	b	154dc <__assert_fail@plt+0x4388>
   154a0:	movw	r1, #32435	; 0x7eb3
   154a4:	mov	r0, #0
   154a8:	mov	r2, #5
   154ac:	movt	r1, #1
   154b0:	bl	10f68 <dcgettext@plt>
   154b4:	ldr	r3, [r7]
   154b8:	mov	r2, r0
   154bc:	ldmib	r7, {r0, r1, r6}
   154c0:	ldr	r5, [r7, #16]
   154c4:	ldr	r4, [r7, #20]
   154c8:	ldr	r7, [r7, #24]
   154cc:	stm	sp, {r0, r1, r6}
   154d0:	str	r5, [sp, #12]
   154d4:	str	r4, [sp, #16]
   154d8:	str	r7, [sp, #20]
   154dc:	mov	r0, r8
   154e0:	mov	r1, #1
   154e4:	b	15590 <__assert_fail@plt+0x443c>
   154e8:	movw	r1, #32527	; 0x7f0f
   154ec:	movt	r1, #1
   154f0:	mov	r0, #0
   154f4:	mov	r2, #5
   154f8:	bl	10f68 <dcgettext@plt>
   154fc:	mov	ip, r0
   15500:	ldr	r3, [r7]
   15504:	ldr	r0, [r7, #4]
   15508:	ldr	r1, [r7, #8]
   1550c:	ldr	r6, [r7, #12]
   15510:	ldr	r5, [r7, #16]
   15514:	ldr	r4, [r7, #20]
   15518:	ldr	r2, [r7, #24]
   1551c:	ldr	lr, [r7, #28]
   15520:	ldr	r7, [r7, #32]
   15524:	stm	sp, {r0, r1, r6}
   15528:	str	r5, [sp, #12]
   1552c:	str	r4, [sp, #16]
   15530:	str	r2, [sp, #20]
   15534:	str	lr, [sp, #24]
   15538:	str	r7, [sp, #28]
   1553c:	b	15584 <__assert_fail@plt+0x4430>
   15540:	movw	r1, #32479	; 0x7edf
   15544:	mov	r0, #0
   15548:	mov	r2, #5
   1554c:	movt	r1, #1
   15550:	bl	10f68 <dcgettext@plt>
   15554:	mov	ip, r0
   15558:	ldr	r3, [r7]
   1555c:	ldmib	r7, {r0, r1, r6}
   15560:	ldr	r5, [r7, #16]
   15564:	ldr	r4, [r7, #20]
   15568:	ldr	r2, [r7, #24]
   1556c:	ldr	r7, [r7, #28]
   15570:	stm	sp, {r0, r1, r6}
   15574:	str	r5, [sp, #12]
   15578:	str	r4, [sp, #16]
   1557c:	str	r2, [sp, #20]
   15580:	str	r7, [sp, #24]
   15584:	mov	r0, r8
   15588:	mov	r1, #1
   1558c:	mov	r2, ip
   15590:	bl	110c4 <__fprintf_chk@plt>
   15594:	sub	sp, fp, #24
   15598:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1559c:	push	{r4, sl, fp, lr}
   155a0:	add	fp, sp, #8
   155a4:	sub	sp, sp, #8
   155a8:	ldr	ip, [fp, #8]
   155ac:	mov	lr, #0
   155b0:	ldr	r4, [ip, lr, lsl #2]
   155b4:	add	lr, lr, #1
   155b8:	cmp	r4, #0
   155bc:	bne	155b0 <__assert_fail@plt+0x445c>
   155c0:	sub	r4, lr, #1
   155c4:	str	ip, [sp]
   155c8:	str	r4, [sp, #4]
   155cc:	bl	15268 <__assert_fail@plt+0x4114>
   155d0:	sub	sp, fp, #8
   155d4:	pop	{r4, sl, fp, pc}
   155d8:	push	{fp, lr}
   155dc:	mov	fp, sp
   155e0:	sub	sp, sp, #48	; 0x30
   155e4:	ldr	ip, [fp, #8]
   155e8:	ldr	lr, [ip]
   155ec:	cmp	lr, #0
   155f0:	str	lr, [sp, #8]
   155f4:	beq	15690 <__assert_fail@plt+0x453c>
   155f8:	ldr	lr, [ip, #4]
   155fc:	cmp	lr, #0
   15600:	str	lr, [sp, #12]
   15604:	beq	15698 <__assert_fail@plt+0x4544>
   15608:	ldr	lr, [ip, #8]
   1560c:	cmp	lr, #0
   15610:	str	lr, [sp, #16]
   15614:	beq	156a0 <__assert_fail@plt+0x454c>
   15618:	ldr	lr, [ip, #12]
   1561c:	cmp	lr, #0
   15620:	str	lr, [sp, #20]
   15624:	beq	156a8 <__assert_fail@plt+0x4554>
   15628:	ldr	lr, [ip, #16]
   1562c:	cmp	lr, #0
   15630:	str	lr, [sp, #24]
   15634:	beq	156b0 <__assert_fail@plt+0x455c>
   15638:	ldr	lr, [ip, #20]
   1563c:	cmp	lr, #0
   15640:	str	lr, [sp, #28]
   15644:	beq	156b8 <__assert_fail@plt+0x4564>
   15648:	ldr	lr, [ip, #24]
   1564c:	cmp	lr, #0
   15650:	str	lr, [sp, #32]
   15654:	beq	156c0 <__assert_fail@plt+0x456c>
   15658:	ldr	lr, [ip, #28]
   1565c:	cmp	lr, #0
   15660:	str	lr, [sp, #36]	; 0x24
   15664:	beq	156c8 <__assert_fail@plt+0x4574>
   15668:	ldr	lr, [ip, #32]
   1566c:	cmp	lr, #0
   15670:	str	lr, [sp, #40]	; 0x28
   15674:	beq	156d0 <__assert_fail@plt+0x457c>
   15678:	ldr	lr, [ip, #36]	; 0x24
   1567c:	mov	ip, #10
   15680:	cmp	lr, #0
   15684:	str	lr, [sp, #44]	; 0x2c
   15688:	movweq	ip, #9
   1568c:	b	156d4 <__assert_fail@plt+0x4580>
   15690:	mov	ip, #0
   15694:	b	156d4 <__assert_fail@plt+0x4580>
   15698:	mov	ip, #1
   1569c:	b	156d4 <__assert_fail@plt+0x4580>
   156a0:	mov	ip, #2
   156a4:	b	156d4 <__assert_fail@plt+0x4580>
   156a8:	mov	ip, #3
   156ac:	b	156d4 <__assert_fail@plt+0x4580>
   156b0:	mov	ip, #4
   156b4:	b	156d4 <__assert_fail@plt+0x4580>
   156b8:	mov	ip, #5
   156bc:	b	156d4 <__assert_fail@plt+0x4580>
   156c0:	mov	ip, #6
   156c4:	b	156d4 <__assert_fail@plt+0x4580>
   156c8:	mov	ip, #7
   156cc:	b	156d4 <__assert_fail@plt+0x4580>
   156d0:	mov	ip, #8
   156d4:	add	lr, sp, #8
   156d8:	str	ip, [sp, #4]
   156dc:	str	lr, [sp]
   156e0:	bl	15268 <__assert_fail@plt+0x4114>
   156e4:	mov	sp, fp
   156e8:	pop	{fp, pc}
   156ec:	push	{fp, lr}
   156f0:	mov	fp, sp
   156f4:	sub	sp, sp, #56	; 0x38
   156f8:	add	ip, fp, #8
   156fc:	str	ip, [sp, #12]
   15700:	ldr	lr, [fp, #8]
   15704:	cmp	lr, #0
   15708:	str	lr, [sp, #16]
   1570c:	beq	157a8 <__assert_fail@plt+0x4654>
   15710:	ldr	lr, [ip, #4]
   15714:	cmp	lr, #0
   15718:	str	lr, [sp, #20]
   1571c:	beq	157b0 <__assert_fail@plt+0x465c>
   15720:	ldr	lr, [ip, #8]
   15724:	cmp	lr, #0
   15728:	str	lr, [sp, #24]
   1572c:	beq	157b8 <__assert_fail@plt+0x4664>
   15730:	ldr	lr, [ip, #12]
   15734:	cmp	lr, #0
   15738:	str	lr, [sp, #28]
   1573c:	beq	157c0 <__assert_fail@plt+0x466c>
   15740:	ldr	lr, [ip, #16]
   15744:	cmp	lr, #0
   15748:	str	lr, [sp, #32]
   1574c:	beq	157c8 <__assert_fail@plt+0x4674>
   15750:	ldr	lr, [ip, #20]
   15754:	cmp	lr, #0
   15758:	str	lr, [sp, #36]	; 0x24
   1575c:	beq	157d0 <__assert_fail@plt+0x467c>
   15760:	ldr	lr, [ip, #24]
   15764:	cmp	lr, #0
   15768:	str	lr, [sp, #40]	; 0x28
   1576c:	beq	157d8 <__assert_fail@plt+0x4684>
   15770:	ldr	lr, [ip, #28]
   15774:	cmp	lr, #0
   15778:	str	lr, [sp, #44]	; 0x2c
   1577c:	beq	157e0 <__assert_fail@plt+0x468c>
   15780:	ldr	lr, [ip, #32]
   15784:	cmp	lr, #0
   15788:	str	lr, [sp, #48]	; 0x30
   1578c:	beq	157e8 <__assert_fail@plt+0x4694>
   15790:	ldr	lr, [ip, #36]	; 0x24
   15794:	mov	ip, #10
   15798:	cmp	lr, #0
   1579c:	str	lr, [sp, #52]	; 0x34
   157a0:	movweq	ip, #9
   157a4:	b	157ec <__assert_fail@plt+0x4698>
   157a8:	mov	ip, #0
   157ac:	b	157ec <__assert_fail@plt+0x4698>
   157b0:	mov	ip, #1
   157b4:	b	157ec <__assert_fail@plt+0x4698>
   157b8:	mov	ip, #2
   157bc:	b	157ec <__assert_fail@plt+0x4698>
   157c0:	mov	ip, #3
   157c4:	b	157ec <__assert_fail@plt+0x4698>
   157c8:	mov	ip, #4
   157cc:	b	157ec <__assert_fail@plt+0x4698>
   157d0:	mov	ip, #5
   157d4:	b	157ec <__assert_fail@plt+0x4698>
   157d8:	mov	ip, #6
   157dc:	b	157ec <__assert_fail@plt+0x4698>
   157e0:	mov	ip, #7
   157e4:	b	157ec <__assert_fail@plt+0x4698>
   157e8:	mov	ip, #8
   157ec:	add	lr, sp, #16
   157f0:	str	ip, [sp, #4]
   157f4:	str	lr, [sp]
   157f8:	bl	15268 <__assert_fail@plt+0x4114>
   157fc:	mov	sp, fp
   15800:	pop	{fp, pc}
   15804:	push	{fp, lr}
   15808:	mov	fp, sp
   1580c:	movw	r0, #37220	; 0x9164
   15810:	movt	r0, #2
   15814:	ldr	r1, [r0]
   15818:	movw	r0, #31151	; 0x79af
   1581c:	movt	r0, #1
   15820:	bl	10ecc <fputs_unlocked@plt>
   15824:	movw	r1, #32639	; 0x7f7f
   15828:	mov	r0, #0
   1582c:	mov	r2, #5
   15830:	movt	r1, #1
   15834:	bl	10f68 <dcgettext@plt>
   15838:	movw	r2, #32659	; 0x7f93
   1583c:	mov	r1, r0
   15840:	mov	r0, #1
   15844:	movt	r2, #1
   15848:	bl	110ac <__printf_chk@plt>
   1584c:	movw	r1, #32681	; 0x7fa9
   15850:	mov	r0, #0
   15854:	mov	r2, #5
   15858:	movt	r1, #1
   1585c:	bl	10f68 <dcgettext@plt>
   15860:	movw	r2, #30556	; 0x775c
   15864:	movw	r3, #30960	; 0x78f0
   15868:	mov	r1, r0
   1586c:	mov	r0, #1
   15870:	movt	r2, #1
   15874:	movt	r3, #1
   15878:	bl	110ac <__printf_chk@plt>
   1587c:	movw	r1, #32701	; 0x7fbd
   15880:	mov	r0, #0
   15884:	mov	r2, #5
   15888:	movt	r1, #1
   1588c:	bl	10f68 <dcgettext@plt>
   15890:	movw	r2, #32740	; 0x7fe4
   15894:	mov	r1, r0
   15898:	mov	r0, #1
   1589c:	movt	r2, #1
   158a0:	pop	{fp, lr}
   158a4:	b	110ac <__printf_chk@plt>
   158a8:	push	{r4, r5, r6, sl, fp, lr}
   158ac:	add	fp, sp, #16
   158b0:	mov	r4, r2
   158b4:	mov	r5, r1
   158b8:	mov	r6, r0
   158bc:	bl	16d58 <__assert_fail@plt+0x5c04>
   158c0:	cmp	r0, #0
   158c4:	popne	{r4, r5, r6, sl, fp, pc}
   158c8:	cmp	r6, #0
   158cc:	beq	158e0 <__assert_fail@plt+0x478c>
   158d0:	cmp	r5, #0
   158d4:	cmpne	r4, #0
   158d8:	bne	158e0 <__assert_fail@plt+0x478c>
   158dc:	pop	{r4, r5, r6, sl, fp, pc}
   158e0:	bl	15e80 <__assert_fail@plt+0x4d2c>
   158e4:	push	{r4, r5, r6, sl, fp, lr}
   158e8:	add	fp, sp, #16
   158ec:	mov	r4, r2
   158f0:	mov	r5, r1
   158f4:	mov	r6, r0
   158f8:	bl	16d58 <__assert_fail@plt+0x5c04>
   158fc:	cmp	r0, #0
   15900:	popne	{r4, r5, r6, sl, fp, pc}
   15904:	cmp	r6, #0
   15908:	beq	1591c <__assert_fail@plt+0x47c8>
   1590c:	cmp	r5, #0
   15910:	cmpne	r4, #0
   15914:	bne	1591c <__assert_fail@plt+0x47c8>
   15918:	pop	{r4, r5, r6, sl, fp, pc}
   1591c:	bl	15e80 <__assert_fail@plt+0x4d2c>
   15920:	push	{fp, lr}
   15924:	mov	fp, sp
   15928:	bl	16bb8 <__assert_fail@plt+0x5a64>
   1592c:	cmp	r0, #0
   15930:	popne	{fp, pc}
   15934:	bl	15e80 <__assert_fail@plt+0x4d2c>
   15938:	push	{fp, lr}
   1593c:	mov	fp, sp
   15940:	bl	16bb8 <__assert_fail@plt+0x5a64>
   15944:	cmp	r0, #0
   15948:	popne	{fp, pc}
   1594c:	bl	15e80 <__assert_fail@plt+0x4d2c>
   15950:	push	{fp, lr}
   15954:	mov	fp, sp
   15958:	bl	16bb8 <__assert_fail@plt+0x5a64>
   1595c:	cmp	r0, #0
   15960:	popne	{fp, pc}
   15964:	bl	15e80 <__assert_fail@plt+0x4d2c>
   15968:	push	{r4, r5, fp, lr}
   1596c:	add	fp, sp, #8
   15970:	mov	r4, r1
   15974:	mov	r5, r0
   15978:	bl	16be8 <__assert_fail@plt+0x5a94>
   1597c:	cmp	r0, #0
   15980:	popne	{r4, r5, fp, pc}
   15984:	cmp	r5, #0
   15988:	beq	15998 <__assert_fail@plt+0x4844>
   1598c:	cmp	r4, #0
   15990:	bne	15998 <__assert_fail@plt+0x4844>
   15994:	pop	{r4, r5, fp, pc}
   15998:	bl	15e80 <__assert_fail@plt+0x4d2c>
   1599c:	push	{fp, lr}
   159a0:	mov	fp, sp
   159a4:	cmp	r1, #0
   159a8:	orreq	r1, r1, #1
   159ac:	bl	16be8 <__assert_fail@plt+0x5a94>
   159b0:	cmp	r0, #0
   159b4:	popne	{fp, pc}
   159b8:	bl	15e80 <__assert_fail@plt+0x4d2c>
   159bc:	push	{fp, lr}
   159c0:	mov	fp, sp
   159c4:	clz	r3, r2
   159c8:	lsr	ip, r3, #5
   159cc:	clz	r3, r1
   159d0:	lsr	r3, r3, #5
   159d4:	orrs	r3, r3, ip
   159d8:	movwne	r1, #1
   159dc:	movwne	r2, #1
   159e0:	bl	16d58 <__assert_fail@plt+0x5c04>
   159e4:	cmp	r0, #0
   159e8:	popne	{fp, pc}
   159ec:	bl	15e80 <__assert_fail@plt+0x4d2c>
   159f0:	push	{fp, lr}
   159f4:	mov	fp, sp
   159f8:	mov	r2, r1
   159fc:	mov	r1, r0
   15a00:	mov	r0, #0
   15a04:	bl	16d58 <__assert_fail@plt+0x5c04>
   15a08:	cmp	r0, #0
   15a0c:	popne	{fp, pc}
   15a10:	bl	15e80 <__assert_fail@plt+0x4d2c>
   15a14:	push	{fp, lr}
   15a18:	mov	fp, sp
   15a1c:	mov	r2, r1
   15a20:	mov	r1, r0
   15a24:	clz	r0, r2
   15a28:	clz	r3, r1
   15a2c:	lsr	r0, r0, #5
   15a30:	lsr	r3, r3, #5
   15a34:	orrs	r0, r3, r0
   15a38:	movwne	r1, #1
   15a3c:	movwne	r2, #1
   15a40:	mov	r0, #0
   15a44:	bl	16d58 <__assert_fail@plt+0x5c04>
   15a48:	cmp	r0, #0
   15a4c:	popne	{fp, pc}
   15a50:	bl	15e80 <__assert_fail@plt+0x4d2c>
   15a54:	push	{r4, r5, r6, sl, fp, lr}
   15a58:	add	fp, sp, #16
   15a5c:	ldr	r5, [r1]
   15a60:	mov	r4, r1
   15a64:	mov	r6, r0
   15a68:	cmp	r0, #0
   15a6c:	beq	15a84 <__assert_fail@plt+0x4930>
   15a70:	mov	r0, #1
   15a74:	add	r0, r0, r5, lsr #1
   15a78:	adds	r5, r5, r0
   15a7c:	bcc	15a8c <__assert_fail@plt+0x4938>
   15a80:	b	15ac8 <__assert_fail@plt+0x4974>
   15a84:	cmp	r5, #0
   15a88:	movweq	r5, #64	; 0x40
   15a8c:	mov	r0, r6
   15a90:	mov	r1, r5
   15a94:	mov	r2, #1
   15a98:	bl	16d58 <__assert_fail@plt+0x5c04>
   15a9c:	cmp	r5, #0
   15aa0:	mov	r1, r5
   15aa4:	movwne	r1, #1
   15aa8:	cmp	r0, #0
   15aac:	bne	15ac0 <__assert_fail@plt+0x496c>
   15ab0:	clz	r2, r6
   15ab4:	lsr	r2, r2, #5
   15ab8:	orrs	r1, r2, r1
   15abc:	bne	15ac8 <__assert_fail@plt+0x4974>
   15ac0:	str	r5, [r4]
   15ac4:	pop	{r4, r5, r6, sl, fp, pc}
   15ac8:	bl	15e80 <__assert_fail@plt+0x4d2c>
   15acc:	push	{r4, r5, r6, r7, fp, lr}
   15ad0:	add	fp, sp, #16
   15ad4:	ldr	r5, [r1]
   15ad8:	mov	r6, r2
   15adc:	mov	r4, r1
   15ae0:	mov	r7, r0
   15ae4:	cmp	r0, #0
   15ae8:	beq	15b00 <__assert_fail@plt+0x49ac>
   15aec:	mov	r0, #1
   15af0:	add	r0, r0, r5, lsr #1
   15af4:	adds	r5, r5, r0
   15af8:	bcc	15b18 <__assert_fail@plt+0x49c4>
   15afc:	b	15b4c <__assert_fail@plt+0x49f8>
   15b00:	cmp	r5, #0
   15b04:	bne	15b18 <__assert_fail@plt+0x49c4>
   15b08:	mov	r0, #64	; 0x40
   15b0c:	cmp	r6, #64	; 0x40
   15b10:	udiv	r5, r0, r6
   15b14:	addhi	r5, r5, #1
   15b18:	mov	r0, r7
   15b1c:	mov	r1, r5
   15b20:	mov	r2, r6
   15b24:	bl	16d58 <__assert_fail@plt+0x5c04>
   15b28:	cmp	r0, #0
   15b2c:	bne	15b44 <__assert_fail@plt+0x49f0>
   15b30:	cmp	r7, #0
   15b34:	beq	15b4c <__assert_fail@plt+0x49f8>
   15b38:	cmp	r6, #0
   15b3c:	cmpne	r5, #0
   15b40:	bne	15b4c <__assert_fail@plt+0x49f8>
   15b44:	str	r5, [r4]
   15b48:	pop	{r4, r5, r6, r7, fp, pc}
   15b4c:	bl	15e80 <__assert_fail@plt+0x4d2c>
   15b50:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   15b54:	add	fp, sp, #24
   15b58:	mov	r8, r1
   15b5c:	ldr	r1, [r1]
   15b60:	mov	r5, r0
   15b64:	add	r0, r1, r1, asr #1
   15b68:	cmp	r0, r1
   15b6c:	mvnvs	r0, #-2147483648	; 0x80000000
   15b70:	cmp	r0, r3
   15b74:	mov	r7, r0
   15b78:	movgt	r7, r3
   15b7c:	cmn	r3, #1
   15b80:	movle	r7, r0
   15b84:	ldr	r0, [fp, #8]
   15b88:	cmn	r0, #1
   15b8c:	ble	15bb4 <__assert_fail@plt+0x4a60>
   15b90:	cmp	r0, #0
   15b94:	beq	15c08 <__assert_fail@plt+0x4ab4>
   15b98:	cmn	r7, #1
   15b9c:	ble	15bdc <__assert_fail@plt+0x4a88>
   15ba0:	mvn	r4, #-2147483648	; 0x80000000
   15ba4:	udiv	r6, r4, r0
   15ba8:	cmp	r6, r7
   15bac:	bge	15c08 <__assert_fail@plt+0x4ab4>
   15bb0:	b	15c18 <__assert_fail@plt+0x4ac4>
   15bb4:	cmn	r7, #1
   15bb8:	ble	15bf8 <__assert_fail@plt+0x4aa4>
   15bbc:	cmn	r0, #1
   15bc0:	beq	15c08 <__assert_fail@plt+0x4ab4>
   15bc4:	mov	r6, #-2147483648	; 0x80000000
   15bc8:	mvn	r4, #-2147483648	; 0x80000000
   15bcc:	sdiv	r6, r6, r0
   15bd0:	cmp	r6, r7
   15bd4:	bge	15c08 <__assert_fail@plt+0x4ab4>
   15bd8:	b	15c18 <__assert_fail@plt+0x4ac4>
   15bdc:	beq	15c08 <__assert_fail@plt+0x4ab4>
   15be0:	mov	r6, #-2147483648	; 0x80000000
   15be4:	mvn	r4, #-2147483648	; 0x80000000
   15be8:	sdiv	r6, r6, r7
   15bec:	cmp	r6, r0
   15bf0:	bge	15c08 <__assert_fail@plt+0x4ab4>
   15bf4:	b	15c18 <__assert_fail@plt+0x4ac4>
   15bf8:	mvn	r4, #-2147483648	; 0x80000000
   15bfc:	sdiv	r6, r4, r0
   15c00:	cmp	r7, r6
   15c04:	blt	15c18 <__assert_fail@plt+0x4ac4>
   15c08:	mul	r6, r7, r0
   15c0c:	mov	r4, #64	; 0x40
   15c10:	cmp	r6, #63	; 0x3f
   15c14:	bgt	15c20 <__assert_fail@plt+0x4acc>
   15c18:	sdiv	r7, r4, r0
   15c1c:	mul	r6, r7, r0
   15c20:	cmp	r5, #0
   15c24:	moveq	r4, #0
   15c28:	streq	r4, [r8]
   15c2c:	sub	r4, r7, r1
   15c30:	cmp	r4, r2
   15c34:	bge	15ce0 <__assert_fail@plt+0x4b8c>
   15c38:	add	r7, r1, r2
   15c3c:	mov	r6, #0
   15c40:	mov	r2, #0
   15c44:	cmp	r7, r3
   15c48:	movwgt	r6, #1
   15c4c:	cmn	r3, #1
   15c50:	movwgt	r2, #1
   15c54:	cmp	r7, r1
   15c58:	bvs	15d14 <__assert_fail@plt+0x4bc0>
   15c5c:	ands	r1, r2, r6
   15c60:	bne	15d14 <__assert_fail@plt+0x4bc0>
   15c64:	cmn	r0, #1
   15c68:	ble	15c90 <__assert_fail@plt+0x4b3c>
   15c6c:	cmp	r0, #0
   15c70:	beq	15cdc <__assert_fail@plt+0x4b88>
   15c74:	cmn	r7, #1
   15c78:	ble	15cb4 <__assert_fail@plt+0x4b60>
   15c7c:	mvn	r1, #-2147483648	; 0x80000000
   15c80:	udiv	r1, r1, r0
   15c84:	cmp	r1, r7
   15c88:	bge	15cdc <__assert_fail@plt+0x4b88>
   15c8c:	b	15d14 <__assert_fail@plt+0x4bc0>
   15c90:	cmn	r7, #1
   15c94:	ble	15ccc <__assert_fail@plt+0x4b78>
   15c98:	cmn	r0, #1
   15c9c:	beq	15cdc <__assert_fail@plt+0x4b88>
   15ca0:	mov	r1, #-2147483648	; 0x80000000
   15ca4:	sdiv	r1, r1, r0
   15ca8:	cmp	r1, r7
   15cac:	bge	15cdc <__assert_fail@plt+0x4b88>
   15cb0:	b	15d14 <__assert_fail@plt+0x4bc0>
   15cb4:	beq	15cdc <__assert_fail@plt+0x4b88>
   15cb8:	mov	r1, #-2147483648	; 0x80000000
   15cbc:	sdiv	r1, r1, r7
   15cc0:	cmp	r1, r0
   15cc4:	bge	15cdc <__assert_fail@plt+0x4b88>
   15cc8:	b	15d14 <__assert_fail@plt+0x4bc0>
   15ccc:	mvn	r1, #-2147483648	; 0x80000000
   15cd0:	sdiv	r1, r1, r0
   15cd4:	cmp	r7, r1
   15cd8:	blt	15d14 <__assert_fail@plt+0x4bc0>
   15cdc:	mul	r6, r7, r0
   15ce0:	mov	r0, r5
   15ce4:	mov	r1, r6
   15ce8:	bl	16be8 <__assert_fail@plt+0x5a94>
   15cec:	cmp	r6, #0
   15cf0:	movwne	r6, #1
   15cf4:	cmp	r0, #0
   15cf8:	bne	15d0c <__assert_fail@plt+0x4bb8>
   15cfc:	clz	r1, r5
   15d00:	lsr	r1, r1, #5
   15d04:	orrs	r1, r1, r6
   15d08:	bne	15d14 <__assert_fail@plt+0x4bc0>
   15d0c:	str	r7, [r8]
   15d10:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   15d14:	bl	15e80 <__assert_fail@plt+0x4d2c>
   15d18:	push	{fp, lr}
   15d1c:	mov	fp, sp
   15d20:	mov	r1, #1
   15d24:	bl	16b64 <__assert_fail@plt+0x5a10>
   15d28:	cmp	r0, #0
   15d2c:	popne	{fp, pc}
   15d30:	bl	15e80 <__assert_fail@plt+0x4d2c>
   15d34:	push	{fp, lr}
   15d38:	mov	fp, sp
   15d3c:	bl	16b64 <__assert_fail@plt+0x5a10>
   15d40:	cmp	r0, #0
   15d44:	popne	{fp, pc}
   15d48:	bl	15e80 <__assert_fail@plt+0x4d2c>
   15d4c:	push	{fp, lr}
   15d50:	mov	fp, sp
   15d54:	mov	r1, #1
   15d58:	bl	16b64 <__assert_fail@plt+0x5a10>
   15d5c:	cmp	r0, #0
   15d60:	popne	{fp, pc}
   15d64:	bl	15e80 <__assert_fail@plt+0x4d2c>
   15d68:	push	{fp, lr}
   15d6c:	mov	fp, sp
   15d70:	bl	16b64 <__assert_fail@plt+0x5a10>
   15d74:	cmp	r0, #0
   15d78:	popne	{fp, pc}
   15d7c:	bl	15e80 <__assert_fail@plt+0x4d2c>
   15d80:	push	{r4, r5, r6, sl, fp, lr}
   15d84:	add	fp, sp, #16
   15d88:	mov	r5, r0
   15d8c:	mov	r0, r1
   15d90:	mov	r4, r1
   15d94:	bl	16bb8 <__assert_fail@plt+0x5a64>
   15d98:	cmp	r0, #0
   15d9c:	beq	15db8 <__assert_fail@plt+0x4c64>
   15da0:	mov	r1, r5
   15da4:	mov	r2, r4
   15da8:	mov	r6, r0
   15dac:	bl	10f2c <memcpy@plt>
   15db0:	mov	r0, r6
   15db4:	pop	{r4, r5, r6, sl, fp, pc}
   15db8:	bl	15e80 <__assert_fail@plt+0x4d2c>
   15dbc:	push	{r4, r5, r6, sl, fp, lr}
   15dc0:	add	fp, sp, #16
   15dc4:	mov	r5, r0
   15dc8:	mov	r0, r1
   15dcc:	mov	r4, r1
   15dd0:	bl	16bb8 <__assert_fail@plt+0x5a64>
   15dd4:	cmp	r0, #0
   15dd8:	beq	15df4 <__assert_fail@plt+0x4ca0>
   15ddc:	mov	r1, r5
   15de0:	mov	r2, r4
   15de4:	mov	r6, r0
   15de8:	bl	10f2c <memcpy@plt>
   15dec:	mov	r0, r6
   15df0:	pop	{r4, r5, r6, sl, fp, pc}
   15df4:	bl	15e80 <__assert_fail@plt+0x4d2c>
   15df8:	push	{r4, r5, r6, sl, fp, lr}
   15dfc:	add	fp, sp, #16
   15e00:	mov	r5, r0
   15e04:	add	r0, r1, #1
   15e08:	mov	r4, r1
   15e0c:	bl	16bb8 <__assert_fail@plt+0x5a64>
   15e10:	cmp	r0, #0
   15e14:	beq	15e3c <__assert_fail@plt+0x4ce8>
   15e18:	mov	r6, r0
   15e1c:	mov	r0, #0
   15e20:	mov	r1, r5
   15e24:	mov	r2, r4
   15e28:	strb	r0, [r6, r4]
   15e2c:	mov	r0, r6
   15e30:	bl	10f2c <memcpy@plt>
   15e34:	mov	r0, r6
   15e38:	pop	{r4, r5, r6, sl, fp, pc}
   15e3c:	bl	15e80 <__assert_fail@plt+0x4d2c>
   15e40:	push	{r4, r5, r6, sl, fp, lr}
   15e44:	add	fp, sp, #16
   15e48:	mov	r4, r0
   15e4c:	bl	11070 <strlen@plt>
   15e50:	add	r5, r0, #1
   15e54:	mov	r0, r5
   15e58:	bl	16bb8 <__assert_fail@plt+0x5a64>
   15e5c:	cmp	r0, #0
   15e60:	beq	15e7c <__assert_fail@plt+0x4d28>
   15e64:	mov	r1, r4
   15e68:	mov	r2, r5
   15e6c:	mov	r6, r0
   15e70:	bl	10f2c <memcpy@plt>
   15e74:	mov	r0, r6
   15e78:	pop	{r4, r5, r6, sl, fp, pc}
   15e7c:	bl	15e80 <__assert_fail@plt+0x4d2c>
   15e80:	push	{fp, lr}
   15e84:	mov	fp, sp
   15e88:	movw	r0, #37120	; 0x9100
   15e8c:	movw	r1, #32816	; 0x8030
   15e90:	mov	r2, #5
   15e94:	movt	r0, #2
   15e98:	movt	r1, #1
   15e9c:	ldr	r4, [r0]
   15ea0:	mov	r0, #0
   15ea4:	bl	10f68 <dcgettext@plt>
   15ea8:	movw	r2, #31742	; 0x7bfe
   15eac:	mov	r3, r0
   15eb0:	mov	r0, r4
   15eb4:	mov	r1, #0
   15eb8:	movt	r2, #1
   15ebc:	bl	10fe0 <error@plt>
   15ec0:	bl	1113c <abort@plt>
   15ec4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15ec8:	add	fp, sp, #28
   15ecc:	sub	sp, sp, #44	; 0x2c
   15ed0:	cmp	r2, #37	; 0x25
   15ed4:	bcs	16b44 <__assert_fail@plt+0x59f0>
   15ed8:	ldr	sl, [fp, #8]
   15edc:	mov	r6, r2
   15ee0:	mov	r7, r1
   15ee4:	mov	r4, r0
   15ee8:	str	r3, [sp, #36]	; 0x24
   15eec:	bl	11088 <__errno_location@plt>
   15ef0:	mov	r5, r0
   15ef4:	mov	r0, #0
   15ef8:	str	r0, [r5]
   15efc:	bl	11058 <__ctype_b_loc@plt>
   15f00:	ldr	r1, [r0]
   15f04:	mov	r2, r4
   15f08:	ldrb	r0, [r2], #1
   15f0c:	add	r3, r1, r0, lsl #1
   15f10:	ldrb	r3, [r3, #1]
   15f14:	tst	r3, #32
   15f18:	bne	15f08 <__assert_fail@plt+0x4db4>
   15f1c:	sub	r9, fp, #32
   15f20:	cmp	r7, #0
   15f24:	mov	r8, #4
   15f28:	movne	r9, r7
   15f2c:	cmp	r0, #45	; 0x2d
   15f30:	beq	16b38 <__assert_fail@plt+0x59e4>
   15f34:	mov	r0, r4
   15f38:	mov	r1, r9
   15f3c:	mov	r2, r6
   15f40:	mov	r3, #0
   15f44:	bl	10f38 <__strtoull_internal@plt>
   15f48:	mov	r7, r1
   15f4c:	ldr	r1, [r9]
   15f50:	cmp	r1, r4
   15f54:	beq	15f80 <__assert_fail@plt+0x4e2c>
   15f58:	mov	r6, r0
   15f5c:	ldr	r0, [r5]
   15f60:	cmp	r0, #0
   15f64:	beq	15fbc <__assert_fail@plt+0x4e68>
   15f68:	cmp	r0, #34	; 0x22
   15f6c:	bne	16b38 <__assert_fail@plt+0x59e4>
   15f70:	mov	r8, #1
   15f74:	cmp	sl, #0
   15f78:	bne	15fc8 <__assert_fail@plt+0x4e74>
   15f7c:	b	16b30 <__assert_fail@plt+0x59dc>
   15f80:	cmp	sl, #0
   15f84:	beq	16b38 <__assert_fail@plt+0x59e4>
   15f88:	mov	r5, r1
   15f8c:	ldrb	r1, [r4]
   15f90:	cmp	r1, #0
   15f94:	beq	16b38 <__assert_fail@plt+0x59e4>
   15f98:	mov	r0, sl
   15f9c:	bl	1107c <strchr@plt>
   15fa0:	cmp	r0, #0
   15fa4:	beq	16b38 <__assert_fail@plt+0x59e4>
   15fa8:	mov	r1, r5
   15fac:	mov	r8, #0
   15fb0:	mov	r6, #1
   15fb4:	mov	r7, #0
   15fb8:	b	15fc8 <__assert_fail@plt+0x4e74>
   15fbc:	mov	r8, r0
   15fc0:	cmp	sl, #0
   15fc4:	beq	16b30 <__assert_fail@plt+0x59dc>
   15fc8:	ldrb	r4, [r1]
   15fcc:	cmp	r4, #0
   15fd0:	beq	16b30 <__assert_fail@plt+0x59dc>
   15fd4:	str	r1, [sp, #32]
   15fd8:	mov	r0, sl
   15fdc:	mov	r1, r4
   15fe0:	bl	1107c <strchr@plt>
   15fe4:	cmp	r0, #0
   15fe8:	beq	162b0 <__assert_fail@plt+0x515c>
   15fec:	sub	r0, r4, #69	; 0x45
   15ff0:	mov	r1, #1
   15ff4:	mov	r3, #0
   15ff8:	mov	r5, #1024	; 0x400
   15ffc:	cmp	r0, #47	; 0x2f
   16000:	str	r1, [sp, #28]
   16004:	bhi	16108 <__assert_fail@plt+0x4fb4>
   16008:	add	r1, pc, #0
   1600c:	ldr	pc, [r1, r0, lsl #2]
   16010:	ldrdeq	r6, [r1], -r0
   16014:	andeq	r6, r1, r8, lsl #2
   16018:	ldrdeq	r6, [r1], -r0
   1601c:	andeq	r6, r1, r8, lsl #2
   16020:	andeq	r6, r1, r8, lsl #2
   16024:	andeq	r6, r1, r8, lsl #2
   16028:	ldrdeq	r6, [r1], -r0
   1602c:	andeq	r6, r1, r8, lsl #2
   16030:	ldrdeq	r6, [r1], -r0
   16034:	andeq	r6, r1, r8, lsl #2
   16038:	andeq	r6, r1, r8, lsl #2
   1603c:	ldrdeq	r6, [r1], -r0
   16040:	andeq	r6, r1, r8, lsl #2
   16044:	andeq	r6, r1, r8, lsl #2
   16048:	andeq	r6, r1, r8, lsl #2
   1604c:	ldrdeq	r6, [r1], -r0
   16050:	andeq	r6, r1, r8, lsl #2
   16054:	andeq	r6, r1, r8, lsl #2
   16058:	andeq	r6, r1, r8, lsl #2
   1605c:	andeq	r6, r1, r8, lsl #2
   16060:	ldrdeq	r6, [r1], -r0
   16064:	ldrdeq	r6, [r1], -r0
   16068:	andeq	r6, r1, r8, lsl #2
   1606c:	andeq	r6, r1, r8, lsl #2
   16070:	andeq	r6, r1, r8, lsl #2
   16074:	andeq	r6, r1, r8, lsl #2
   16078:	andeq	r6, r1, r8, lsl #2
   1607c:	andeq	r6, r1, r8, lsl #2
   16080:	andeq	r6, r1, r8, lsl #2
   16084:	andeq	r6, r1, r8, lsl #2
   16088:	andeq	r6, r1, r8, lsl #2
   1608c:	andeq	r6, r1, r8, lsl #2
   16090:	andeq	r6, r1, r8, lsl #2
   16094:	andeq	r6, r1, r8, lsl #2
   16098:	ldrdeq	r6, [r1], -r0
   1609c:	andeq	r6, r1, r8, lsl #2
   160a0:	andeq	r6, r1, r8, lsl #2
   160a4:	andeq	r6, r1, r8, lsl #2
   160a8:	ldrdeq	r6, [r1], -r0
   160ac:	andeq	r6, r1, r8, lsl #2
   160b0:	ldrdeq	r6, [r1], -r0
   160b4:	andeq	r6, r1, r8, lsl #2
   160b8:	andeq	r6, r1, r8, lsl #2
   160bc:	andeq	r6, r1, r8, lsl #2
   160c0:	andeq	r6, r1, r8, lsl #2
   160c4:	andeq	r6, r1, r8, lsl #2
   160c8:	andeq	r6, r1, r8, lsl #2
   160cc:	ldrdeq	r6, [r1], -r0
   160d0:	mov	r0, sl
   160d4:	mov	r1, #48	; 0x30
   160d8:	bl	1107c <strchr@plt>
   160dc:	cmp	r0, #0
   160e0:	beq	16104 <__assert_fail@plt+0x4fb0>
   160e4:	ldr	r1, [sp, #32]
   160e8:	ldrb	r0, [r1, #1]
   160ec:	cmp	r0, #66	; 0x42
   160f0:	cmpne	r0, #68	; 0x44
   160f4:	bne	162bc <__assert_fail@plt+0x5168>
   160f8:	mov	r5, #1000	; 0x3e8
   160fc:	mov	r0, #2
   16100:	str	r0, [sp, #28]
   16104:	mov	r3, #0
   16108:	sub	r0, r4, #66	; 0x42
   1610c:	cmp	r0, #53	; 0x35
   16110:	bhi	162b0 <__assert_fail@plt+0x515c>
   16114:	add	r1, pc, #0
   16118:	ldr	pc, [r1, r0, lsl #2]
   1611c:	andeq	r6, r1, r8, lsr r6
   16120:			; <UNDEFINED> instruction: 0x000162b0
   16124:			; <UNDEFINED> instruction: 0x000162b0
   16128:	andeq	r6, r1, r0, ror #12
   1612c:			; <UNDEFINED> instruction: 0x000162b0
   16130:	strdeq	r6, [r1], -r4
   16134:			; <UNDEFINED> instruction: 0x000162b0
   16138:			; <UNDEFINED> instruction: 0x000162b0
   1613c:			; <UNDEFINED> instruction: 0x000162b0
   16140:	andeq	r6, r1, r0, ror #5
   16144:			; <UNDEFINED> instruction: 0x000162b0
   16148:	andeq	r6, r1, r8, lsr #6
   1614c:			; <UNDEFINED> instruction: 0x000162b0
   16150:			; <UNDEFINED> instruction: 0x000162b0
   16154:			; <UNDEFINED> instruction: 0x000167b8
   16158:			; <UNDEFINED> instruction: 0x000162b0
   1615c:			; <UNDEFINED> instruction: 0x000162b0
   16160:			; <UNDEFINED> instruction: 0x000162b0
   16164:			; <UNDEFINED> instruction: 0x000163b4
   16168:			; <UNDEFINED> instruction: 0x000162b0
   1616c:			; <UNDEFINED> instruction: 0x000162b0
   16170:			; <UNDEFINED> instruction: 0x000162b0
   16174:			; <UNDEFINED> instruction: 0x000162b0
   16178:	andeq	r6, r1, r0, ror #17
   1617c:	muleq	r1, ip, r4
   16180:			; <UNDEFINED> instruction: 0x000162b0
   16184:			; <UNDEFINED> instruction: 0x000162b0
   16188:			; <UNDEFINED> instruction: 0x000162b0
   1618c:			; <UNDEFINED> instruction: 0x000162b0
   16190:			; <UNDEFINED> instruction: 0x000162b0
   16194:			; <UNDEFINED> instruction: 0x000162b0
   16198:			; <UNDEFINED> instruction: 0x000162b0
   1619c:			; <UNDEFINED> instruction: 0x00016ab8
   161a0:	andeq	r6, r1, r0, lsl fp
   161a4:			; <UNDEFINED> instruction: 0x000162b0
   161a8:			; <UNDEFINED> instruction: 0x000162b0
   161ac:			; <UNDEFINED> instruction: 0x000162b0
   161b0:	strdeq	r6, [r1], -r4
   161b4:			; <UNDEFINED> instruction: 0x000162b0
   161b8:			; <UNDEFINED> instruction: 0x000162b0
   161bc:			; <UNDEFINED> instruction: 0x000162b0
   161c0:	andeq	r6, r1, r0, ror #5
   161c4:			; <UNDEFINED> instruction: 0x000162b0
   161c8:	andeq	r6, r1, r8, lsr #6
   161cc:			; <UNDEFINED> instruction: 0x000162b0
   161d0:			; <UNDEFINED> instruction: 0x000162b0
   161d4:			; <UNDEFINED> instruction: 0x000162b0
   161d8:			; <UNDEFINED> instruction: 0x000162b0
   161dc:			; <UNDEFINED> instruction: 0x000162b0
   161e0:			; <UNDEFINED> instruction: 0x000162b0
   161e4:			; <UNDEFINED> instruction: 0x000163b4
   161e8:			; <UNDEFINED> instruction: 0x000162b0
   161ec:			; <UNDEFINED> instruction: 0x000162b0
   161f0:	andeq	r6, r1, ip, ror #21
   161f4:	mvn	r0, #0
   161f8:	mvn	r1, #0
   161fc:	mov	r2, r5
   16200:	mov	sl, r3
   16204:	bl	16e9c <__assert_fail@plt+0x5d48>
   16208:	subs	r3, r0, r6
   1620c:	mov	lr, #0
   16210:	umull	r4, r2, r6, r5
   16214:	str	r1, [sp, #20]
   16218:	sbcs	r3, r1, r7
   1621c:	mla	ip, r6, sl, r2
   16220:	mov	r2, r1
   16224:	movwcc	lr, #1
   16228:	mla	r7, r7, r5, ip
   1622c:	mov	r2, #0
   16230:	cmp	lr, #0
   16234:	mvnne	r4, #0
   16238:	mvnne	r7, #0
   1623c:	subs	r6, r0, r4
   16240:	sbcs	r6, r1, r7
   16244:	movwcc	r2, #1
   16248:	umull	r3, r6, r4, r5
   1624c:	cmp	r2, #0
   16250:	str	r6, [sp, #16]
   16254:	mvnne	r3, #0
   16258:	cmp	r2, #0
   1625c:	umull	r6, ip, r3, r5
   16260:	mla	r1, r3, sl, ip
   16264:	ldr	ip, [sp, #16]
   16268:	str	r1, [sp, #12]
   1626c:	mla	r4, r4, sl, ip
   16270:	mla	r4, r7, r5, r4
   16274:	ldr	r7, [sp, #12]
   16278:	mvnne	r4, #0
   1627c:	subs	r0, r0, r3
   16280:	ldr	r0, [sp, #20]
   16284:	mla	r7, r4, r5, r7
   16288:	sbcs	r0, r0, r4
   1628c:	mov	r0, #0
   16290:	movwcc	r0, #1
   16294:	cmp	r0, #0
   16298:	mov	r1, r0
   1629c:	orr	r0, lr, r2
   162a0:	mvnne	r7, #0
   162a4:	mvnne	r6, #0
   162a8:	orr	r3, r0, r1
   162ac:	b	16b10 <__assert_fail@plt+0x59bc>
   162b0:	ldr	r0, [sp, #36]	; 0x24
   162b4:	orr	r8, r8, #2
   162b8:	b	16b34 <__assert_fail@plt+0x59e0>
   162bc:	cmp	r0, #105	; 0x69
   162c0:	mov	r3, #0
   162c4:	bne	16108 <__assert_fail@plt+0x4fb4>
   162c8:	ldrb	r0, [r1, #2]
   162cc:	mov	r1, #1
   162d0:	cmp	r0, #66	; 0x42
   162d4:	movweq	r1, #3
   162d8:	str	r1, [sp, #28]
   162dc:	b	16108 <__assert_fail@plt+0x4fb4>
   162e0:	mvn	r0, #0
   162e4:	mvn	r1, #0
   162e8:	mov	r2, r5
   162ec:	mov	r4, r3
   162f0:	bl	16e9c <__assert_fail@plt+0x5d48>
   162f4:	subs	r0, r0, r6
   162f8:	mov	r2, #0
   162fc:	sbcs	r0, r1, r7
   16300:	movwcc	r2, #1
   16304:	umull	r0, r1, r6, r5
   16308:	mla	r1, r6, r4, r1
   1630c:	cmp	r2, #0
   16310:	mov	r3, r2
   16314:	mla	r7, r7, r5, r1
   16318:	mvnne	r0, #0
   1631c:	mvnne	r7, #0
   16320:	mov	r6, r0
   16324:	b	16b10 <__assert_fail@plt+0x59bc>
   16328:	mvn	r0, #0
   1632c:	mvn	r1, #0
   16330:	mov	r2, r5
   16334:	str	r3, [sp, #24]
   16338:	bl	16e9c <__assert_fail@plt+0x5d48>
   1633c:	subs	r3, r0, r6
   16340:	mov	ip, r0
   16344:	umull	r4, r0, r6, r5
   16348:	mov	sl, #0
   1634c:	sbcs	r3, r1, r7
   16350:	str	r0, [sp, #20]
   16354:	ldr	r0, [sp, #24]
   16358:	mov	r3, #0
   1635c:	movwcc	r3, #1
   16360:	cmp	r3, #0
   16364:	mvnne	r4, #0
   16368:	cmp	r3, #0
   1636c:	umull	lr, r2, r4, r5
   16370:	mla	r2, r4, r0, r2
   16374:	str	r2, [sp, #16]
   16378:	ldr	r2, [sp, #20]
   1637c:	mla	r6, r6, r0, r2
   16380:	ldr	r0, [sp, #16]
   16384:	mla	r6, r7, r5, r6
   16388:	mvnne	r6, #0
   1638c:	mla	r7, r6, r5, r0
   16390:	subs	r0, ip, r4
   16394:	sbcs	r0, r1, r6
   16398:	movwcc	sl, #1
   1639c:	cmp	sl, #0
   163a0:	orr	r3, r3, sl
   163a4:	mvnne	lr, #0
   163a8:	mvnne	r7, #0
   163ac:	mov	r6, lr
   163b0:	b	16b10 <__assert_fail@plt+0x59bc>
   163b4:	mvn	r0, #0
   163b8:	mvn	r1, #0
   163bc:	mov	r2, r5
   163c0:	mov	sl, r3
   163c4:	bl	16e9c <__assert_fail@plt+0x5d48>
   163c8:	subs	r3, r0, r6
   163cc:	mov	ip, r1
   163d0:	umull	r2, lr, r6, r5
   163d4:	str	r0, [sp, #20]
   163d8:	sbcs	r3, r1, r7
   163dc:	mov	r1, #0
   163e0:	mla	r6, r6, sl, lr
   163e4:	mov	lr, #0
   163e8:	str	ip, [sp, #16]
   163ec:	movwcc	r1, #1
   163f0:	mla	r7, r7, r5, r6
   163f4:	cmp	r1, #0
   163f8:	mvnne	r2, #0
   163fc:	cmp	r1, #0
   16400:	umull	r3, r4, r2, r5
   16404:	mvnne	r7, #0
   16408:	mla	r4, r2, sl, r4
   1640c:	subs	r2, r0, r2
   16410:	sbcs	r2, ip, r7
   16414:	mla	r4, r7, r5, r4
   16418:	movwcc	lr, #1
   1641c:	mov	r2, #0
   16420:	cmp	lr, #0
   16424:	mvnne	r3, #0
   16428:	mvnne	r4, #0
   1642c:	subs	r7, r0, r3
   16430:	mov	r0, r5
   16434:	sbcs	r7, ip, r4
   16438:	movwcc	r2, #1
   1643c:	umull	r5, r7, r3, r5
   16440:	cmp	r2, #0
   16444:	mla	r3, r3, sl, r7
   16448:	mvnne	r5, #0
   1644c:	mla	r3, r4, r0, r3
   16450:	cmp	r2, #0
   16454:	umull	r6, ip, r5, r0
   16458:	mvnne	r3, #0
   1645c:	mla	ip, r5, sl, ip
   16460:	mla	r7, r3, r0, ip
   16464:	ldr	r0, [sp, #20]
   16468:	subs	r0, r0, r5
   1646c:	ldr	r0, [sp, #16]
   16470:	sbcs	r0, r0, r3
   16474:	mov	r0, #0
   16478:	movwcc	r0, #1
   1647c:	cmp	r0, #0
   16480:	mov	r3, r0
   16484:	orr	r0, r1, lr
   16488:	orr	r0, r0, r2
   1648c:	mvnne	r7, #0
   16490:	mvnne	r6, #0
   16494:	orr	r3, r0, r3
   16498:	b	16b10 <__assert_fail@plt+0x59bc>
   1649c:	mvn	r0, #0
   164a0:	mvn	r1, #0
   164a4:	mov	r2, r5
   164a8:	mov	r4, r3
   164ac:	str	r3, [sp, #24]
   164b0:	bl	16e9c <__assert_fail@plt+0x5d48>
   164b4:	umull	r3, r2, r6, r5
   164b8:	mla	r2, r6, r4, r2
   164bc:	subs	r6, r0, r6
   164c0:	sbcs	r6, r1, r7
   164c4:	mla	ip, r7, r5, r2
   164c8:	ldr	r2, [sp, #24]
   164cc:	mov	r6, #0
   164d0:	movwcc	r6, #1
   164d4:	cmp	r6, #0
   164d8:	str	r6, [sp, #20]
   164dc:	mov	r6, #0
   164e0:	mvnne	r3, #0
   164e4:	mvnne	ip, #0
   164e8:	subs	r4, r0, r3
   164ec:	umull	r7, lr, r3, r5
   164f0:	sbcs	r4, r1, ip
   164f4:	mla	r3, r3, r2, lr
   164f8:	movwcc	r6, #1
   164fc:	cmp	r6, #0
   16500:	str	r6, [sp, #16]
   16504:	mvnne	r7, #0
   16508:	cmp	r6, #0
   1650c:	umull	sl, r4, r7, r5
   16510:	mla	r4, r7, r2, r4
   16514:	mla	r2, ip, r5, r3
   16518:	mov	ip, #0
   1651c:	mvnne	r2, #0
   16520:	subs	r3, r0, r7
   16524:	mla	r6, r2, r5, r4
   16528:	mov	r4, r0
   1652c:	sbcs	r2, r1, r2
   16530:	mov	r0, #0
   16534:	movwcc	r0, #1
   16538:	mov	r3, r4
   1653c:	cmp	r0, #0
   16540:	str	r0, [sp, #12]
   16544:	mov	r0, r1
   16548:	str	r3, [sp, #4]
   1654c:	mvnne	sl, #0
   16550:	mvnne	r6, #0
   16554:	str	r0, [sp, #8]
   16558:	subs	r2, r4, sl
   1655c:	ldr	r4, [sp, #24]
   16560:	sbcs	r2, r1, r6
   16564:	movwcc	ip, #1
   16568:	umull	r7, r2, sl, r5
   1656c:	cmp	ip, #0
   16570:	mla	r2, sl, r4, r2
   16574:	mvnne	r7, #0
   16578:	cmp	ip, #0
   1657c:	mov	sl, #0
   16580:	umull	r1, lr, r7, r5
   16584:	mla	r2, r6, r5, r2
   16588:	mvnne	r2, #0
   1658c:	mla	lr, r7, r4, lr
   16590:	subs	r6, r3, r7
   16594:	mla	lr, r2, r5, lr
   16598:	sbcs	r2, r0, r2
   1659c:	movwcc	sl, #1
   165a0:	mov	r2, #0
   165a4:	cmp	sl, #0
   165a8:	mvnne	r1, #0
   165ac:	mvnne	lr, #0
   165b0:	subs	r6, r3, r1
   165b4:	ldr	r3, [sp, #24]
   165b8:	sbcs	r6, r0, lr
   165bc:	umull	r0, r7, r1, r5
   165c0:	movwcc	r2, #1
   165c4:	cmp	r2, #0
   165c8:	mvnne	r0, #0
   165cc:	mla	r1, r1, r3, r7
   165d0:	cmp	r2, #0
   165d4:	umull	r6, r4, r0, r5
   165d8:	mla	r1, lr, r5, r1
   165dc:	mla	r4, r0, r3, r4
   165e0:	ldr	r3, [sp, #4]
   165e4:	mvnne	r1, #0
   165e8:	mla	r7, r1, r5, r4
   165ec:	ldr	r5, [sp, #16]
   165f0:	subs	r0, r3, r0
   165f4:	ldr	r0, [sp, #8]
   165f8:	sbcs	r0, r0, r1
   165fc:	mov	r0, #0
   16600:	movwcc	r0, #1
   16604:	cmp	r0, #0
   16608:	mov	r1, r0
   1660c:	ldr	r0, [sp, #20]
   16610:	mvnne	r7, #0
   16614:	mvnne	r6, #0
   16618:	orr	r0, r0, r5
   1661c:	ldr	r5, [sp, #12]
   16620:	orr	r0, r0, r5
   16624:	orr	r0, r0, ip
   16628:	orr	r0, r0, sl
   1662c:	orr	r0, r0, r2
   16630:	orr	r0, r0, r1
   16634:	b	16ab0 <__assert_fail@plt+0x595c>
   16638:	mov	r1, #0
   1663c:	lsl	r2, r7, #10
   16640:	lsl	r0, r6, #10
   16644:	lsr	r3, r7, #22
   16648:	cmp	r1, r7, lsr #22
   1664c:	orr	r2, r2, r6, lsr #22
   16650:	mvnne	r0, #0
   16654:	movwne	r3, #1
   16658:	cmp	r1, r7, lsr #22
   1665c:	b	16adc <__assert_fail@plt+0x5988>
   16660:	mvn	r0, #0
   16664:	mvn	r1, #0
   16668:	mov	r2, r5
   1666c:	mov	sl, r3
   16670:	bl	16e9c <__assert_fail@plt+0x5d48>
   16674:	subs	r2, r0, r6
   16678:	mov	ip, r0
   1667c:	mov	r0, #0
   16680:	sbcs	r2, r1, r7
   16684:	movwcc	r0, #1
   16688:	umull	r4, r2, r6, r5
   1668c:	cmp	r0, #0
   16690:	mla	r2, r6, sl, r2
   16694:	str	r0, [sp, #20]
   16698:	mvnne	r4, #0
   1669c:	cmp	r0, #0
   166a0:	mla	r2, r7, r5, r2
   166a4:	mov	r0, #0
   166a8:	umull	lr, r3, r4, r5
   166ac:	mvnne	r2, #0
   166b0:	mla	r3, r4, sl, r3
   166b4:	mla	r6, r2, r5, r3
   166b8:	subs	r3, ip, r4
   166bc:	sbcs	r2, r1, r2
   166c0:	mov	r3, r1
   166c4:	movwcc	r0, #1
   166c8:	str	r3, [sp, #8]
   166cc:	cmp	r0, #0
   166d0:	str	r0, [sp, #16]
   166d4:	mov	r0, ip
   166d8:	mvnne	lr, #0
   166dc:	mvnne	r6, #0
   166e0:	str	r0, [sp, #12]
   166e4:	subs	r2, ip, lr
   166e8:	umull	r7, r4, lr, r5
   166ec:	sbcs	r2, r1, r6
   166f0:	mla	r4, lr, sl, r4
   166f4:	mov	r2, #0
   166f8:	mla	r6, r6, r5, r4
   166fc:	mov	r4, #0
   16700:	movwcc	r2, #1
   16704:	cmp	r2, #0
   16708:	mvnne	r7, #0
   1670c:	cmp	r2, #0
   16710:	umull	r1, ip, r7, r5
   16714:	mvnne	r6, #0
   16718:	mla	ip, r7, sl, ip
   1671c:	subs	r7, r0, r7
   16720:	mla	lr, r6, r5, ip
   16724:	sbcs	r7, r3, r6
   16728:	mov	ip, #0
   1672c:	movwcc	ip, #1
   16730:	cmp	ip, #0
   16734:	mvnne	r1, #0
   16738:	mvnne	lr, #0
   1673c:	subs	r7, r0, r1
   16740:	sbcs	r7, r3, lr
   16744:	movwcc	r4, #1
   16748:	umull	r0, r7, r1, r5
   1674c:	cmp	r4, #0
   16750:	mla	r1, r1, sl, r7
   16754:	mvnne	r0, #0
   16758:	mla	r1, lr, r5, r1
   1675c:	cmp	r4, #0
   16760:	umull	r6, r3, r0, r5
   16764:	mvnne	r1, #0
   16768:	mla	r3, r0, sl, r3
   1676c:	mla	r7, r1, r5, r3
   16770:	ldr	r3, [sp, #12]
   16774:	subs	r0, r3, r0
   16778:	ldr	r3, [sp, #16]
   1677c:	ldr	r0, [sp, #8]
   16780:	sbcs	r0, r0, r1
   16784:	mov	r0, #0
   16788:	movwcc	r0, #1
   1678c:	cmp	r0, #0
   16790:	mov	r1, r0
   16794:	ldr	r0, [sp, #20]
   16798:	mvnne	r7, #0
   1679c:	mvnne	r6, #0
   167a0:	orr	r0, r0, r3
   167a4:	orr	r0, r0, r2
   167a8:	orr	r0, r0, ip
   167ac:	orr	r0, r0, r4
   167b0:	orr	r3, r0, r1
   167b4:	b	16b10 <__assert_fail@plt+0x59bc>
   167b8:	mvn	r0, #0
   167bc:	mvn	r1, #0
   167c0:	mov	r2, r5
   167c4:	mov	sl, r3
   167c8:	bl	16e9c <__assert_fail@plt+0x5d48>
   167cc:	umull	r3, r2, r6, r5
   167d0:	mov	lr, r1
   167d4:	mov	r1, r0
   167d8:	mla	r2, r6, sl, r2
   167dc:	subs	r6, r0, r6
   167e0:	mov	r0, #0
   167e4:	sbcs	r6, lr, r7
   167e8:	mla	r2, r7, r5, r2
   167ec:	movwcc	r0, #1
   167f0:	cmp	r0, #0
   167f4:	str	r0, [sp, #20]
   167f8:	mov	r0, r1
   167fc:	mvnne	r3, #0
   16800:	mvnne	r2, #0
   16804:	str	r0, [sp, #16]
   16808:	subs	r4, r1, r3
   1680c:	umull	r7, ip, r3, r5
   16810:	sbcs	r4, lr, r2
   16814:	mla	r3, r3, sl, ip
   16818:	mov	ip, #0
   1681c:	mov	r4, #0
   16820:	mla	r2, r2, r5, r3
   16824:	movwcc	r4, #1
   16828:	cmp	r4, #0
   1682c:	mvnne	r7, #0
   16830:	cmp	r4, #0
   16834:	umull	r1, r6, r7, r5
   16838:	mvnne	r2, #0
   1683c:	mla	r6, r7, sl, r6
   16840:	mla	r3, r2, r5, r6
   16844:	subs	r6, r0, r7
   16848:	sbcs	r2, lr, r2
   1684c:	movwcc	ip, #1
   16850:	mov	r2, #0
   16854:	cmp	ip, #0
   16858:	mvnne	r1, #0
   1685c:	mvnne	r3, #0
   16860:	subs	r6, r0, r1
   16864:	sbcs	r6, lr, r3
   16868:	movwcc	r2, #1
   1686c:	umull	r0, r6, r1, r5
   16870:	cmp	r2, #0
   16874:	str	r6, [sp, #12]
   16878:	mvnne	r0, #0
   1687c:	cmp	r2, #0
   16880:	umull	r6, r7, r0, r5
   16884:	mla	r7, r0, sl, r7
   16888:	str	r7, [sp, #8]
   1688c:	ldr	r7, [sp, #12]
   16890:	mla	r1, r1, sl, r7
   16894:	mla	r1, r3, r5, r1
   16898:	ldr	r3, [sp, #8]
   1689c:	mvnne	r1, #0
   168a0:	mla	r7, r1, r5, r3
   168a4:	ldr	r3, [sp, #16]
   168a8:	subs	r0, r3, r0
   168ac:	sbcs	r0, lr, r1
   168b0:	mov	r0, #0
   168b4:	movwcc	r0, #1
   168b8:	cmp	r0, #0
   168bc:	mov	r1, r0
   168c0:	ldr	r0, [sp, #20]
   168c4:	mvnne	r7, #0
   168c8:	mvnne	r6, #0
   168cc:	orr	r0, r0, r4
   168d0:	orr	r0, r0, ip
   168d4:	orr	r0, r0, r2
   168d8:	orr	r3, r0, r1
   168dc:	b	16b10 <__assert_fail@plt+0x59bc>
   168e0:	mvn	r0, #0
   168e4:	mvn	r1, #0
   168e8:	mov	r2, r5
   168ec:	mov	sl, r3
   168f0:	bl	16e9c <__assert_fail@plt+0x5d48>
   168f4:	mov	lr, r0
   168f8:	subs	r0, r0, r6
   168fc:	mov	r2, #0
   16900:	mov	ip, r1
   16904:	str	sl, [sp, #24]
   16908:	sbcs	r0, r1, r7
   1690c:	umull	r3, r1, r6, r5
   16910:	str	lr, [sp, #4]
   16914:	movwcc	r2, #1
   16918:	mla	r6, r6, sl, r1
   1691c:	mov	r1, #0
   16920:	cmp	r2, #0
   16924:	mla	r7, r7, r5, r6
   16928:	str	r2, [sp, #20]
   1692c:	mvnne	r3, #0
   16930:	cmp	r2, #0
   16934:	mov	r2, #0
   16938:	umull	r0, r4, r3, r5
   1693c:	mvnne	r7, #0
   16940:	mla	r4, r3, sl, r4
   16944:	subs	r3, lr, r3
   16948:	sbcs	r3, ip, r7
   1694c:	mla	r4, r7, r5, r4
   16950:	movwcc	r1, #1
   16954:	cmp	r1, #0
   16958:	str	r1, [sp, #16]
   1695c:	mvnne	r0, #0
   16960:	mvnne	r4, #0
   16964:	subs	r3, lr, r0
   16968:	sbcs	r3, ip, r4
   1696c:	movwcc	r2, #1
   16970:	umull	r6, r3, r0, r5
   16974:	cmp	r2, #0
   16978:	mla	r0, r0, sl, r3
   1697c:	str	r2, [sp, #12]
   16980:	mvnne	r6, #0
   16984:	mla	r0, r4, r5, r0
   16988:	cmp	r2, #0
   1698c:	ldr	r4, [sp, #24]
   16990:	umull	r1, r7, r6, r5
   16994:	mvnne	r0, #0
   16998:	subs	r3, lr, r6
   1699c:	mla	r7, r6, sl, r7
   169a0:	mov	r3, ip
   169a4:	mla	r7, r0, r5, r7
   169a8:	sbcs	r0, ip, r0
   169ac:	str	r3, [sp]
   169b0:	mov	r0, #0
   169b4:	movwcc	r0, #1
   169b8:	cmp	r0, #0
   169bc:	str	r0, [sp, #8]
   169c0:	mvnne	r1, #0
   169c4:	mvnne	r7, #0
   169c8:	subs	r0, lr, r1
   169cc:	sbcs	r0, ip, r7
   169d0:	mov	ip, #0
   169d4:	movwcc	ip, #1
   169d8:	umull	r6, r0, r1, r5
   169dc:	cmp	ip, #0
   169e0:	mla	r1, r1, r4, r0
   169e4:	mov	r0, lr
   169e8:	mvnne	r6, #0
   169ec:	mla	r1, r7, r5, r1
   169f0:	cmp	ip, #0
   169f4:	umull	r2, sl, r6, r5
   169f8:	mvnne	r1, #0
   169fc:	mla	sl, r6, r4, sl
   16a00:	subs	r6, lr, r6
   16a04:	mov	lr, #0
   16a08:	mla	r7, r1, r5, sl
   16a0c:	sbcs	r1, r3, r1
   16a10:	movwcc	lr, #1
   16a14:	ldr	r1, [sp, #24]
   16a18:	cmp	lr, #0
   16a1c:	mvnne	r2, #0
   16a20:	mvnne	r7, #0
   16a24:	subs	r6, r0, r2
   16a28:	umull	r0, sl, r2, r5
   16a2c:	sbcs	r6, r3, r7
   16a30:	mov	r3, #0
   16a34:	mla	r2, r2, r1, sl
   16a38:	movwcc	r3, #1
   16a3c:	mla	r2, r7, r5, r2
   16a40:	cmp	r3, #0
   16a44:	mvnne	r0, #0
   16a48:	cmp	r3, #0
   16a4c:	umull	r6, r4, r0, r5
   16a50:	mvnne	r2, #0
   16a54:	mla	r4, r0, r1, r4
   16a58:	ldr	r1, [sp, #4]
   16a5c:	mla	r7, r2, r5, r4
   16a60:	ldr	r5, [sp, #16]
   16a64:	subs	r0, r1, r0
   16a68:	ldr	r0, [sp]
   16a6c:	sbcs	r0, r0, r2
   16a70:	mov	r0, #0
   16a74:	movwcc	r0, #1
   16a78:	cmp	r0, #0
   16a7c:	mov	r2, r0
   16a80:	ldr	r0, [sp, #20]
   16a84:	mvnne	r7, #0
   16a88:	mvnne	r6, #0
   16a8c:	orr	r0, r0, r5
   16a90:	ldr	r5, [sp, #12]
   16a94:	orr	r0, r0, r5
   16a98:	ldr	r5, [sp, #8]
   16a9c:	orr	r0, r0, r5
   16aa0:	orr	r0, r0, ip
   16aa4:	orr	r0, r0, lr
   16aa8:	orr	r0, r0, r3
   16aac:	orr	r0, r0, r2
   16ab0:	and	r3, r0, #1
   16ab4:	b	16b10 <__assert_fail@plt+0x59bc>
   16ab8:	mov	r1, #0
   16abc:	lsl	r2, r7, #9
   16ac0:	lsl	r0, r6, #9
   16ac4:	lsr	r3, r7, #23
   16ac8:	cmp	r1, r7, lsr #23
   16acc:	orr	r2, r2, r6, lsr #23
   16ad0:	mvnne	r0, #0
   16ad4:	movwne	r3, #1
   16ad8:	cmp	r1, r7, lsr #23
   16adc:	mvnne	r2, #0
   16ae0:	mov	r6, r0
   16ae4:	mov	r7, r2
   16ae8:	b	16b10 <__assert_fail@plt+0x59bc>
   16aec:	lsl	r1, r7, #1
   16af0:	lsl	r0, r6, #1
   16af4:	cmp	r7, #0
   16af8:	lsr	r3, r7, #31
   16afc:	orr	r1, r1, r6, lsr #31
   16b00:	mvnlt	r0, #0
   16b04:	mvnlt	r1, #0
   16b08:	mov	r6, r0
   16b0c:	mov	r7, r1
   16b10:	ldr	r1, [sp, #32]
   16b14:	ldr	r2, [sp, #28]
   16b18:	orr	r8, r3, r8
   16b1c:	add	r0, r1, r2
   16b20:	str	r0, [r9]
   16b24:	ldrb	r0, [r1, r2]
   16b28:	cmp	r0, #0
   16b2c:	orrne	r8, r8, #2
   16b30:	ldr	r0, [sp, #36]	; 0x24
   16b34:	strd	r6, [r0]
   16b38:	mov	r0, r8
   16b3c:	sub	sp, fp, #28
   16b40:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16b44:	movw	r0, #32833	; 0x8041
   16b48:	movw	r1, #32871	; 0x8067
   16b4c:	movw	r3, #32887	; 0x8077
   16b50:	mov	r2, #85	; 0x55
   16b54:	movt	r0, #1
   16b58:	movt	r1, #1
   16b5c:	movt	r3, #1
   16b60:	bl	11154 <__assert_fail@plt>
   16b64:	clz	r2, r1
   16b68:	clz	r3, r0
   16b6c:	lsr	r2, r2, #5
   16b70:	lsr	r3, r3, #5
   16b74:	orrs	r2, r3, r2
   16b78:	movwne	r1, #1
   16b7c:	movwne	r0, #1
   16b80:	cmp	r1, #0
   16b84:	beq	16bb4 <__assert_fail@plt+0x5a60>
   16b88:	mvn	r2, #-2147483648	; 0x80000000
   16b8c:	udiv	r2, r2, r1
   16b90:	cmp	r2, r0
   16b94:	bcs	16bb4 <__assert_fail@plt+0x5a60>
   16b98:	push	{fp, lr}
   16b9c:	mov	fp, sp
   16ba0:	bl	11088 <__errno_location@plt>
   16ba4:	mov	r1, #12
   16ba8:	str	r1, [r0]
   16bac:	mov	r0, #0
   16bb0:	pop	{fp, pc}
   16bb4:	b	10ec0 <calloc@plt>
   16bb8:	cmp	r0, #0
   16bbc:	movweq	r0, #1
   16bc0:	cmn	r0, #1
   16bc4:	ble	16bcc <__assert_fail@plt+0x5a78>
   16bc8:	b	11004 <malloc@plt>
   16bcc:	push	{fp, lr}
   16bd0:	mov	fp, sp
   16bd4:	bl	11088 <__errno_location@plt>
   16bd8:	mov	r1, #12
   16bdc:	str	r1, [r0]
   16be0:	mov	r0, #0
   16be4:	pop	{fp, pc}
   16be8:	push	{fp, lr}
   16bec:	mov	fp, sp
   16bf0:	cmp	r0, #0
   16bf4:	beq	16c10 <__assert_fail@plt+0x5abc>
   16bf8:	cmp	r1, #0
   16bfc:	beq	16c1c <__assert_fail@plt+0x5ac8>
   16c00:	cmn	r1, #1
   16c04:	ble	16c28 <__assert_fail@plt+0x5ad4>
   16c08:	pop	{fp, lr}
   16c0c:	b	10f80 <realloc@plt>
   16c10:	mov	r0, r1
   16c14:	pop	{fp, lr}
   16c18:	b	16bb8 <__assert_fail@plt+0x5a64>
   16c1c:	bl	12f48 <__assert_fail@plt+0x1df4>
   16c20:	mov	r0, #0
   16c24:	pop	{fp, pc}
   16c28:	bl	11088 <__errno_location@plt>
   16c2c:	mov	r1, #12
   16c30:	str	r1, [r0]
   16c34:	mov	r0, #0
   16c38:	pop	{fp, pc}
   16c3c:	push	{r4, r5, r6, sl, fp, lr}
   16c40:	add	fp, sp, #16
   16c44:	mov	r4, r0
   16c48:	bl	10fc8 <__fpending@plt>
   16c4c:	ldr	r6, [r4]
   16c50:	mov	r5, r0
   16c54:	mov	r0, r4
   16c58:	bl	12e50 <__assert_fail@plt+0x1cfc>
   16c5c:	tst	r6, #32
   16c60:	bne	16c98 <__assert_fail@plt+0x5b44>
   16c64:	cmp	r0, #0
   16c68:	mov	r4, r0
   16c6c:	mvnne	r4, #0
   16c70:	cmp	r5, #0
   16c74:	bne	16ca4 <__assert_fail@plt+0x5b50>
   16c78:	cmp	r0, #0
   16c7c:	beq	16ca4 <__assert_fail@plt+0x5b50>
   16c80:	bl	11088 <__errno_location@plt>
   16c84:	ldr	r0, [r0]
   16c88:	subs	r4, r0, #9
   16c8c:	mvnne	r4, #0
   16c90:	mov	r0, r4
   16c94:	pop	{r4, r5, r6, sl, fp, pc}
   16c98:	mvn	r4, #0
   16c9c:	cmp	r0, #0
   16ca0:	beq	16cac <__assert_fail@plt+0x5b58>
   16ca4:	mov	r0, r4
   16ca8:	pop	{r4, r5, r6, sl, fp, pc}
   16cac:	bl	11088 <__errno_location@plt>
   16cb0:	mov	r1, #0
   16cb4:	str	r1, [r0]
   16cb8:	mov	r0, r4
   16cbc:	pop	{r4, r5, r6, sl, fp, pc}
   16cc0:	push	{fp, lr}
   16cc4:	mov	fp, sp
   16cc8:	mov	r0, #14
   16ccc:	bl	11118 <nl_langinfo@plt>
   16cd0:	movw	r1, #31152	; 0x79b0
   16cd4:	cmp	r0, #0
   16cd8:	movt	r1, #1
   16cdc:	movne	r1, r0
   16ce0:	movw	r0, #32966	; 0x80c6
   16ce4:	ldrb	r2, [r1]
   16ce8:	movt	r0, #1
   16cec:	cmp	r2, #0
   16cf0:	movne	r0, r1
   16cf4:	pop	{fp, pc}
   16cf8:	push	{r4, r5, r6, r7, fp, lr}
   16cfc:	add	fp, sp, #16
   16d00:	sub	sp, sp, #8
   16d04:	add	r5, sp, #4
   16d08:	cmp	r0, #0
   16d0c:	mov	r7, r2
   16d10:	mov	r4, r1
   16d14:	movne	r5, r0
   16d18:	mov	r0, r5
   16d1c:	bl	10fd4 <mbrtowc@plt>
   16d20:	mov	r6, r0
   16d24:	cmp	r7, #0
   16d28:	beq	16d4c <__assert_fail@plt+0x5bf8>
   16d2c:	cmn	r6, #2
   16d30:	bcc	16d4c <__assert_fail@plt+0x5bf8>
   16d34:	mov	r0, #0
   16d38:	bl	16d94 <__assert_fail@plt+0x5c40>
   16d3c:	cmp	r0, #0
   16d40:	ldrbeq	r0, [r4]
   16d44:	moveq	r6, #1
   16d48:	streq	r0, [r5]
   16d4c:	mov	r0, r6
   16d50:	sub	sp, fp, #16
   16d54:	pop	{r4, r5, r6, r7, fp, pc}
   16d58:	cmp	r2, #0
   16d5c:	beq	16d8c <__assert_fail@plt+0x5c38>
   16d60:	mvn	r3, #0
   16d64:	udiv	r3, r3, r2
   16d68:	cmp	r3, r1
   16d6c:	bcs	16d8c <__assert_fail@plt+0x5c38>
   16d70:	push	{fp, lr}
   16d74:	mov	fp, sp
   16d78:	bl	11088 <__errno_location@plt>
   16d7c:	mov	r1, #12
   16d80:	str	r1, [r0]
   16d84:	mov	r0, #0
   16d88:	pop	{fp, pc}
   16d8c:	mul	r1, r2, r1
   16d90:	b	16be8 <__assert_fail@plt+0x5a94>
   16d94:	push	{r4, sl, fp, lr}
   16d98:	add	fp, sp, #8
   16d9c:	sub	sp, sp, #264	; 0x108
   16da0:	add	r1, sp, #7
   16da4:	movw	r2, #257	; 0x101
   16da8:	bl	16df8 <__assert_fail@plt+0x5ca4>
   16dac:	mov	r4, #0
   16db0:	cmp	r0, #0
   16db4:	bne	16dec <__assert_fail@plt+0x5c98>
   16db8:	movw	r1, #32972	; 0x80cc
   16dbc:	add	r0, sp, #7
   16dc0:	movt	r1, #1
   16dc4:	bl	10ee4 <strcmp@plt>
   16dc8:	cmp	r0, #0
   16dcc:	beq	16dec <__assert_fail@plt+0x5c98>
   16dd0:	movw	r1, #32974	; 0x80ce
   16dd4:	add	r0, sp, #7
   16dd8:	movt	r1, #1
   16ddc:	bl	10ee4 <strcmp@plt>
   16de0:	mov	r4, r0
   16de4:	cmp	r0, #0
   16de8:	movwne	r4, #1
   16dec:	mov	r0, r4
   16df0:	sub	sp, fp, #8
   16df4:	pop	{r4, sl, fp, pc}
   16df8:	push	{r4, r5, r6, r7, fp, lr}
   16dfc:	add	fp, sp, #16
   16e00:	mov	r4, r1
   16e04:	mov	r1, #0
   16e08:	mov	r6, r2
   16e0c:	bl	11100 <setlocale@plt>
   16e10:	cmp	r0, #0
   16e14:	beq	16e44 <__assert_fail@plt+0x5cf0>
   16e18:	mov	r7, r0
   16e1c:	bl	11070 <strlen@plt>
   16e20:	cmp	r0, r6
   16e24:	bcs	16e64 <__assert_fail@plt+0x5d10>
   16e28:	add	r2, r0, #1
   16e2c:	mov	r0, r4
   16e30:	mov	r1, r7
   16e34:	bl	10f2c <memcpy@plt>
   16e38:	mov	r5, #0
   16e3c:	mov	r0, r5
   16e40:	pop	{r4, r5, r6, r7, fp, pc}
   16e44:	cmp	r6, #0
   16e48:	mov	r5, #22
   16e4c:	movne	r0, #0
   16e50:	strbne	r0, [r4]
   16e54:	movne	r0, r5
   16e58:	popne	{r4, r5, r6, r7, fp, pc}
   16e5c:	mov	r0, r5
   16e60:	pop	{r4, r5, r6, r7, fp, pc}
   16e64:	mov	r5, #34	; 0x22
   16e68:	cmp	r6, #0
   16e6c:	beq	16e8c <__assert_fail@plt+0x5d38>
   16e70:	sub	r6, r6, #1
   16e74:	mov	r0, r4
   16e78:	mov	r1, r7
   16e7c:	mov	r2, r6
   16e80:	bl	10f2c <memcpy@plt>
   16e84:	mov	r0, #0
   16e88:	strb	r0, [r4, r6]
   16e8c:	mov	r0, r5
   16e90:	pop	{r4, r5, r6, r7, fp, pc}
   16e94:	mov	r1, #0
   16e98:	b	11100 <setlocale@plt>
   16e9c:	cmp	r3, #0
   16ea0:	cmpeq	r2, #0
   16ea4:	bne	16ebc <__assert_fail@plt+0x5d68>
   16ea8:	cmp	r1, #0
   16eac:	cmpeq	r0, #0
   16eb0:	mvnne	r1, #0
   16eb4:	mvnne	r0, #0
   16eb8:	b	16ed8 <__assert_fail@plt+0x5d84>
   16ebc:	sub	sp, sp, #8
   16ec0:	push	{sp, lr}
   16ec4:	bl	16ee8 <__assert_fail@plt+0x5d94>
   16ec8:	ldr	lr, [sp, #4]
   16ecc:	add	sp, sp, #8
   16ed0:	pop	{r2, r3}
   16ed4:	bx	lr
   16ed8:	push	{r1, lr}
   16edc:	mov	r0, #8
   16ee0:	bl	10ed8 <raise@plt>
   16ee4:	pop	{r1, pc}
   16ee8:	cmp	r1, r3
   16eec:	cmpeq	r0, r2
   16ef0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16ef4:	mov	r4, r0
   16ef8:	movcc	r0, #0
   16efc:	mov	r5, r1
   16f00:	ldr	lr, [sp, #36]	; 0x24
   16f04:	movcc	r1, r0
   16f08:	bcc	17004 <__assert_fail@plt+0x5eb0>
   16f0c:	cmp	r3, #0
   16f10:	clzeq	ip, r2
   16f14:	clzne	ip, r3
   16f18:	addeq	ip, ip, #32
   16f1c:	cmp	r5, #0
   16f20:	clzeq	r1, r4
   16f24:	addeq	r1, r1, #32
   16f28:	clzne	r1, r5
   16f2c:	sub	ip, ip, r1
   16f30:	sub	sl, ip, #32
   16f34:	lsl	r9, r3, ip
   16f38:	rsb	fp, ip, #32
   16f3c:	orr	r9, r9, r2, lsl sl
   16f40:	orr	r9, r9, r2, lsr fp
   16f44:	lsl	r8, r2, ip
   16f48:	cmp	r5, r9
   16f4c:	cmpeq	r4, r8
   16f50:	movcc	r0, #0
   16f54:	movcc	r1, r0
   16f58:	bcc	16f74 <__assert_fail@plt+0x5e20>
   16f5c:	mov	r0, #1
   16f60:	subs	r4, r4, r8
   16f64:	lsl	r1, r0, sl
   16f68:	orr	r1, r1, r0, lsr fp
   16f6c:	lsl	r0, r0, ip
   16f70:	sbc	r5, r5, r9
   16f74:	cmp	ip, #0
   16f78:	beq	17004 <__assert_fail@plt+0x5eb0>
   16f7c:	lsr	r6, r8, #1
   16f80:	orr	r6, r6, r9, lsl #31
   16f84:	lsr	r7, r9, #1
   16f88:	mov	r2, ip
   16f8c:	b	16fb0 <__assert_fail@plt+0x5e5c>
   16f90:	subs	r3, r4, r6
   16f94:	sbc	r8, r5, r7
   16f98:	adds	r3, r3, r3
   16f9c:	adc	r8, r8, r8
   16fa0:	adds	r4, r3, #1
   16fa4:	adc	r5, r8, #0
   16fa8:	subs	r2, r2, #1
   16fac:	beq	16fcc <__assert_fail@plt+0x5e78>
   16fb0:	cmp	r5, r7
   16fb4:	cmpeq	r4, r6
   16fb8:	bcs	16f90 <__assert_fail@plt+0x5e3c>
   16fbc:	adds	r4, r4, r4
   16fc0:	adc	r5, r5, r5
   16fc4:	subs	r2, r2, #1
   16fc8:	bne	16fb0 <__assert_fail@plt+0x5e5c>
   16fcc:	lsr	r3, r4, ip
   16fd0:	orr	r3, r3, r5, lsl fp
   16fd4:	lsr	r2, r5, ip
   16fd8:	orr	r3, r3, r5, lsr sl
   16fdc:	adds	r0, r0, r4
   16fe0:	mov	r4, r3
   16fe4:	lsl	r3, r2, ip
   16fe8:	orr	r3, r3, r4, lsl sl
   16fec:	lsl	ip, r4, ip
   16ff0:	orr	r3, r3, r4, lsr fp
   16ff4:	adc	r1, r1, r5
   16ff8:	subs	r0, r0, ip
   16ffc:	mov	r5, r2
   17000:	sbc	r1, r1, r3
   17004:	cmp	lr, #0
   17008:	strdne	r4, [lr]
   1700c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17010:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   17014:	mov	r7, r0
   17018:	ldr	r6, [pc, #72]	; 17068 <__assert_fail@plt+0x5f14>
   1701c:	ldr	r5, [pc, #72]	; 1706c <__assert_fail@plt+0x5f18>
   17020:	add	r6, pc, r6
   17024:	add	r5, pc, r5
   17028:	sub	r6, r6, r5
   1702c:	mov	r8, r1
   17030:	mov	r9, r2
   17034:	bl	10ea0 <calloc@plt-0x20>
   17038:	asrs	r6, r6, #2
   1703c:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   17040:	mov	r4, #0
   17044:	add	r4, r4, #1
   17048:	ldr	r3, [r5], #4
   1704c:	mov	r2, r9
   17050:	mov	r1, r8
   17054:	mov	r0, r7
   17058:	blx	r3
   1705c:	cmp	r6, r4
   17060:	bne	17044 <__assert_fail@plt+0x5ef0>
   17064:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   17068:	andeq	r1, r1, r4, ror #29
   1706c:	ldrdeq	r1, [r1], -ip
   17070:	bx	lr
   17074:	ldr	r3, [pc, #12]	; 17088 <__assert_fail@plt+0x5f34>
   17078:	mov	r1, #0
   1707c:	add	r3, pc, r3
   17080:	ldr	r2, [r3]
   17084:	b	11094 <__cxa_atexit@plt>
   17088:	andeq	r2, r1, r0, ror r0

Disassembly of section .fini:

0001708c <.fini>:
   1708c:	push	{r3, lr}
   17090:	pop	{r3, pc}
