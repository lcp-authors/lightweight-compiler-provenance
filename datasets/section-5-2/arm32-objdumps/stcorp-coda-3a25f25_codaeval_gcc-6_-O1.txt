
../repos/stcorp-coda-3a25f25/codaeval:     file format elf32-littlearm


Disassembly of section .init:

00010ca0 <.init>:
   10ca0:	push	{r3, lr}
   10ca4:	bl	10ec4 <_start@@Base+0x3c>
   10ca8:	pop	{r3, pc}

Disassembly of section .plt:

00010cac <coda_match_filefilter@plt-0x14>:
   10cac:	push	{lr}		; (str lr, [sp, #-4]!)
   10cb0:	ldr	lr, [pc, #4]	; 10cbc <coda_match_filefilter@plt-0x4>
   10cb4:	add	lr, pc, lr
   10cb8:	ldr	pc, [lr, #8]!
   10cbc:	andeq	r2, r1, r4, asr #6

00010cc0 <coda_match_filefilter@plt>:
   10cc0:	add	ip, pc, #0, 12
   10cc4:	add	ip, ip, #73728	; 0x12000
   10cc8:	ldr	pc, [ip, #836]!	; 0x344

00010ccc <coda_expression_eval_integer@plt>:
   10ccc:	add	ip, pc, #0, 12
   10cd0:	add	ip, ip, #73728	; 0x12000
   10cd4:	ldr	pc, [ip, #828]!	; 0x33c

00010cd8 <strcmp@plt>:
   10cd8:	add	ip, pc, #0, 12
   10cdc:	add	ip, ip, #73728	; 0x12000
   10ce0:	ldr	pc, [ip, #820]!	; 0x334

00010ce4 <printf@plt>:
   10ce4:	add	ip, pc, #0, 12
   10ce8:	add	ip, ip, #73728	; 0x12000
   10cec:	ldr	pc, [ip, #812]!	; 0x32c

00010cf0 <coda_set_error@plt>:
   10cf0:	add	ip, pc, #0, 12
   10cf4:	add	ip, ip, #73728	; 0x12000
   10cf8:	ldr	pc, [ip, #804]!	; 0x324

00010cfc <coda_open@plt>:
   10cfc:	add	ip, pc, #0, 12
   10d00:	add	ip, ip, #73728	; 0x12000
   10d04:	ldr	pc, [ip, #796]!	; 0x31c

00010d08 <free@plt>:
   10d08:	add	ip, pc, #0, 12
   10d0c:	add	ip, ip, #73728	; 0x12000
   10d10:	ldr	pc, [ip, #788]!	; 0x314

00010d14 <coda_set_definition_path_conditional@plt>:
   10d14:	add	ip, pc, #0, 12
   10d18:	add	ip, ip, #73728	; 0x12000
   10d1c:	ldr	pc, [ip, #780]!	; 0x30c

00010d20 <coda_set_definition_path@plt>:
   10d20:	add	ip, pc, #0, 12
   10d24:	add	ip, ip, #73728	; 0x12000
   10d28:	ldr	pc, [ip, #772]!	; 0x304

00010d2c <fwrite@plt>:
   10d2c:	add	ip, pc, #0, 12
   10d30:	add	ip, ip, #73728	; 0x12000
   10d34:	ldr	pc, [ip, #764]!	; 0x2fc

00010d38 <coda_expression_eval_bool@plt>:
   10d38:	add	ip, pc, #0, 12
   10d3c:	add	ip, ip, #73728	; 0x12000
   10d40:	ldr	pc, [ip, #756]!	; 0x2f4

00010d44 <coda_cursor_set_product@plt>:
   10d44:	add	ip, pc, #0, 12
   10d48:	add	ip, ip, #73728	; 0x12000
   10d4c:	ldr	pc, [ip, #748]!	; 0x2ec

00010d50 <coda_done@plt>:
   10d50:	add	ip, pc, #0, 12
   10d54:	add	ip, ip, #73728	; 0x12000
   10d58:	ldr	pc, [ip, #740]!	; 0x2e4

00010d5c <puts@plt>:
   10d5c:	add	ip, pc, #0, 12
   10d60:	add	ip, ip, #73728	; 0x12000
   10d64:	ldr	pc, [ip, #732]!	; 0x2dc

00010d68 <__libc_start_main@plt>:
   10d68:	add	ip, pc, #0, 12
   10d6c:	add	ip, ip, #73728	; 0x12000
   10d70:	ldr	pc, [ip, #724]!	; 0x2d4

00010d74 <coda_expression_delete@plt>:
   10d74:	add	ip, pc, #0, 12
   10d78:	add	ip, ip, #73728	; 0x12000
   10d7c:	ldr	pc, [ip, #716]!	; 0x2cc

00010d80 <__gmon_start__@plt>:
   10d80:	add	ip, pc, #0, 12
   10d84:	add	ip, ip, #73728	; 0x12000
   10d88:	ldr	pc, [ip, #708]!	; 0x2c4

00010d8c <__ctype_b_loc@plt>:
   10d8c:	add	ip, pc, #0, 12
   10d90:	add	ip, ip, #73728	; 0x12000
   10d94:	ldr	pc, [ip, #700]!	; 0x2bc

00010d98 <exit@plt>:
   10d98:	add	ip, pc, #0, 12
   10d9c:	add	ip, ip, #73728	; 0x12000
   10da0:	ldr	pc, [ip, #692]!	; 0x2b4

00010da4 <strlen@plt>:
   10da4:	add	ip, pc, #0, 12
   10da8:	add	ip, ip, #73728	; 0x12000
   10dac:	ldr	pc, [ip, #684]!	; 0x2ac

00010db0 <fprintf@plt>:
   10db0:	add	ip, pc, #0, 12
   10db4:	add	ip, ip, #73728	; 0x12000
   10db8:	ldr	pc, [ip, #676]!	; 0x2a4

00010dbc <coda_init@plt>:
   10dbc:	add	ip, pc, #0, 12
   10dc0:	add	ip, ip, #73728	; 0x12000
   10dc4:	ldr	pc, [ip, #668]!	; 0x29c

00010dc8 <coda_set_option_perform_conversions@plt>:
   10dc8:	add	ip, pc, #0, 12
   10dcc:	add	ip, ip, #73728	; 0x12000
   10dd0:	ldr	pc, [ip, #660]!	; 0x294

00010dd4 <coda_expression_eval_string@plt>:
   10dd4:	add	ip, pc, #0, 12
   10dd8:	add	ip, ip, #73728	; 0x12000
   10ddc:	ldr	pc, [ip, #652]!	; 0x28c

00010de0 <putchar@plt>:
   10de0:	add	ip, pc, #0, 12
   10de4:	add	ip, ip, #73728	; 0x12000
   10de8:	ldr	pc, [ip, #644]!	; 0x284

00010dec <coda_expression_get_type@plt>:
   10dec:	add	ip, pc, #0, 12
   10df0:	add	ip, ip, #73728	; 0x12000
   10df4:	ldr	pc, [ip, #636]!	; 0x27c

00010df8 <coda_close@plt>:
   10df8:	add	ip, pc, #0, 12
   10dfc:	add	ip, ip, #73728	; 0x12000
   10e00:	ldr	pc, [ip, #628]!	; 0x274

00010e04 <coda_expression_is_constant@plt>:
   10e04:	add	ip, pc, #0, 12
   10e08:	add	ip, ip, #73728	; 0x12000
   10e0c:	ldr	pc, [ip, #620]!	; 0x26c

00010e10 <coda_expression_eval_float@plt>:
   10e10:	add	ip, pc, #0, 12
   10e14:	add	ip, ip, #73728	; 0x12000
   10e18:	ldr	pc, [ip, #612]!	; 0x264

00010e1c <coda_expression_eval_node@plt>:
   10e1c:	add	ip, pc, #0, 12
   10e20:	add	ip, ip, #73728	; 0x12000
   10e24:	ldr	pc, [ip, #604]!	; 0x25c

00010e28 <coda_errno_to_string@plt>:
   10e28:	add	ip, pc, #0, 12
   10e2c:	add	ip, ip, #73728	; 0x12000
   10e30:	ldr	pc, [ip, #596]!	; 0x254

00010e34 <coda_expression_get_type_name@plt>:
   10e34:	add	ip, pc, #0, 12
   10e38:	add	ip, ip, #73728	; 0x12000
   10e3c:	ldr	pc, [ip, #588]!	; 0x24c

00010e40 <coda_expression_from_string@plt>:
   10e40:	add	ip, pc, #0, 12
   10e44:	add	ip, ip, #73728	; 0x12000
   10e48:	ldr	pc, [ip, #580]!	; 0x244

00010e4c <coda_get_libcoda_version@plt>:
   10e4c:	add	ip, pc, #0, 12
   10e50:	add	ip, ip, #73728	; 0x12000
   10e54:	ldr	pc, [ip, #572]!	; 0x23c

00010e58 <coda_get_errno@plt>:
   10e58:	add	ip, pc, #0, 12
   10e5c:	add	ip, ip, #73728	; 0x12000
   10e60:	ldr	pc, [ip, #564]!	; 0x234

00010e64 <abort@plt>:
   10e64:	add	ip, pc, #0, 12
   10e68:	add	ip, ip, #73728	; 0x12000
   10e6c:	ldr	pc, [ip, #556]!	; 0x22c

00010e70 <coda_str64@plt>:
   10e70:	add	ip, pc, #0, 12
   10e74:	add	ip, ip, #73728	; 0x12000
   10e78:	ldr	pc, [ip, #548]!	; 0x224

00010e7c <__assert_fail@plt>:
   10e7c:	add	ip, pc, #0, 12
   10e80:	add	ip, ip, #73728	; 0x12000
   10e84:	ldr	pc, [ip, #540]!	; 0x21c

Disassembly of section .text:

00010e88 <_start@@Base>:
   10e88:	mov	fp, #0
   10e8c:	mov	lr, #0
   10e90:	pop	{r1}		; (ldr r1, [sp], #4)
   10e94:	mov	r2, sp
   10e98:	push	{r2}		; (str r2, [sp, #-4]!)
   10e9c:	push	{r0}		; (str r0, [sp, #-4]!)
   10ea0:	ldr	ip, [pc, #16]	; 10eb8 <_start@@Base+0x30>
   10ea4:	push	{ip}		; (str ip, [sp, #-4]!)
   10ea8:	ldr	r0, [pc, #12]	; 10ebc <_start@@Base+0x34>
   10eac:	ldr	r3, [pc, #12]	; 10ec0 <_start@@Base+0x38>
   10eb0:	bl	10d68 <__libc_start_main@plt>
   10eb4:	bl	10e64 <abort@plt>
   10eb8:	andeq	r1, r1, r4, lsr #26
   10ebc:	andeq	r1, r1, ip, lsl #15
   10ec0:	andeq	r1, r1, r4, asr #25
   10ec4:	ldr	r3, [pc, #20]	; 10ee0 <_start@@Base+0x58>
   10ec8:	ldr	r2, [pc, #20]	; 10ee4 <_start@@Base+0x5c>
   10ecc:	add	r3, pc, r3
   10ed0:	ldr	r2, [r3, r2]
   10ed4:	cmp	r2, #0
   10ed8:	bxeq	lr
   10edc:	b	10d80 <__gmon_start__@plt>
   10ee0:	andeq	r2, r1, ip, lsr #2
   10ee4:	andeq	r0, r0, r4, lsr #1
   10ee8:	ldr	r3, [pc, #28]	; 10f0c <_start@@Base+0x84>
   10eec:	ldr	r0, [pc, #28]	; 10f10 <_start@@Base+0x88>
   10ef0:	sub	r3, r3, r0
   10ef4:	cmp	r3, #6
   10ef8:	bxls	lr
   10efc:	ldr	r3, [pc, #16]	; 10f14 <_start@@Base+0x8c>
   10f00:	cmp	r3, #0
   10f04:	bxeq	lr
   10f08:	bx	r3
   10f0c:	strheq	r3, [r2], -r3	; <UNPREDICTABLE>
   10f10:	strheq	r3, [r2], -r0
   10f14:	andeq	r0, r0, r0
   10f18:	ldr	r1, [pc, #36]	; 10f44 <_start@@Base+0xbc>
   10f1c:	ldr	r0, [pc, #36]	; 10f48 <_start@@Base+0xc0>
   10f20:	sub	r1, r1, r0
   10f24:	asr	r1, r1, #2
   10f28:	add	r1, r1, r1, lsr #31
   10f2c:	asrs	r1, r1, #1
   10f30:	bxeq	lr
   10f34:	ldr	r3, [pc, #16]	; 10f4c <_start@@Base+0xc4>
   10f38:	cmp	r3, #0
   10f3c:	bxeq	lr
   10f40:	bx	r3
   10f44:	strheq	r3, [r2], -r0
   10f48:	strheq	r3, [r2], -r0
   10f4c:	andeq	r0, r0, r0
   10f50:	push	{r4, lr}
   10f54:	ldr	r4, [pc, #24]	; 10f74 <_start@@Base+0xec>
   10f58:	ldrb	r3, [r4]
   10f5c:	cmp	r3, #0
   10f60:	popne	{r4, pc}
   10f64:	bl	10ee8 <_start@@Base+0x60>
   10f68:	mov	r3, #1
   10f6c:	strb	r3, [r4]
   10f70:	pop	{r4, pc}
   10f74:	strheq	r3, [r2], -r4
   10f78:	ldr	r0, [pc, #40]	; 10fa8 <_start@@Base+0x120>
   10f7c:	ldr	r3, [r0]
   10f80:	cmp	r3, #0
   10f84:	bne	10f8c <_start@@Base+0x104>
   10f88:	b	10f18 <_start@@Base+0x90>
   10f8c:	ldr	r3, [pc, #24]	; 10fac <_start@@Base+0x124>
   10f90:	cmp	r3, #0
   10f94:	beq	10f88 <_start@@Base+0x100>
   10f98:	push	{r4, lr}
   10f9c:	blx	r3
   10fa0:	pop	{r4, lr}
   10fa4:	b	10f18 <_start@@Base+0x90>
   10fa8:	strdeq	r2, [r2], -ip
   10fac:	andeq	r0, r0, r0
   10fb0:	push	{r4, lr}
   10fb4:	ldr	r0, [pc, #300]	; 110e8 <_start@@Base+0x260>
   10fb8:	bl	10d5c <puts@plt>
   10fbc:	ldr	r0, [pc, #296]	; 110ec <_start@@Base+0x264>
   10fc0:	bl	10d5c <puts@plt>
   10fc4:	ldr	r0, [pc, #292]	; 110f0 <_start@@Base+0x268>
   10fc8:	bl	10d5c <puts@plt>
   10fcc:	ldr	r0, [pc, #288]	; 110f4 <_start@@Base+0x26c>
   10fd0:	bl	10d5c <puts@plt>
   10fd4:	ldr	r0, [pc, #284]	; 110f8 <_start@@Base+0x270>
   10fd8:	bl	10d5c <puts@plt>
   10fdc:	ldr	r0, [pc, #280]	; 110fc <_start@@Base+0x274>
   10fe0:	bl	10d5c <puts@plt>
   10fe4:	ldr	r0, [pc, #276]	; 11100 <_start@@Base+0x278>
   10fe8:	bl	10d5c <puts@plt>
   10fec:	mov	r0, #10
   10ff0:	bl	10de0 <putchar@plt>
   10ff4:	ldr	r0, [pc, #264]	; 11104 <_start@@Base+0x27c>
   10ff8:	bl	10d5c <puts@plt>
   10ffc:	ldr	r0, [pc, #260]	; 11108 <_start@@Base+0x280>
   11000:	bl	10d5c <puts@plt>
   11004:	ldr	r0, [pc, #256]	; 1110c <_start@@Base+0x284>
   11008:	bl	10d5c <puts@plt>
   1100c:	ldr	r0, [pc, #252]	; 11110 <_start@@Base+0x288>
   11010:	bl	10d5c <puts@plt>
   11014:	ldr	r0, [pc, #248]	; 11114 <_start@@Base+0x28c>
   11018:	bl	10d5c <puts@plt>
   1101c:	ldr	r0, [pc, #244]	; 11118 <_start@@Base+0x290>
   11020:	bl	10d5c <puts@plt>
   11024:	ldr	r0, [pc, #240]	; 1111c <_start@@Base+0x294>
   11028:	bl	10d5c <puts@plt>
   1102c:	ldr	r0, [pc, #236]	; 11120 <_start@@Base+0x298>
   11030:	bl	10d5c <puts@plt>
   11034:	ldr	r0, [pc, #232]	; 11124 <_start@@Base+0x29c>
   11038:	bl	10d5c <puts@plt>
   1103c:	ldr	r0, [pc, #228]	; 11128 <_start@@Base+0x2a0>
   11040:	bl	10d5c <puts@plt>
   11044:	ldr	r0, [pc, #224]	; 1112c <_start@@Base+0x2a4>
   11048:	bl	10d5c <puts@plt>
   1104c:	ldr	r0, [pc, #220]	; 11130 <_start@@Base+0x2a8>
   11050:	bl	10d5c <puts@plt>
   11054:	mov	r0, #10
   11058:	bl	10de0 <putchar@plt>
   1105c:	ldr	r0, [pc, #208]	; 11134 <_start@@Base+0x2ac>
   11060:	bl	10d5c <puts@plt>
   11064:	ldr	r0, [pc, #204]	; 11138 <_start@@Base+0x2b0>
   11068:	bl	10d5c <puts@plt>
   1106c:	mov	r0, #10
   11070:	bl	10de0 <putchar@plt>
   11074:	ldr	r0, [pc, #192]	; 1113c <_start@@Base+0x2b4>
   11078:	bl	10d5c <puts@plt>
   1107c:	ldr	r0, [pc, #188]	; 11140 <_start@@Base+0x2b8>
   11080:	bl	10d5c <puts@plt>
   11084:	mov	r0, #10
   11088:	bl	10de0 <putchar@plt>
   1108c:	ldr	r0, [pc, #176]	; 11144 <_start@@Base+0x2bc>
   11090:	bl	10d5c <puts@plt>
   11094:	ldr	r0, [pc, #172]	; 11148 <_start@@Base+0x2c0>
   11098:	bl	10d5c <puts@plt>
   1109c:	mov	r0, #10
   110a0:	bl	10de0 <putchar@plt>
   110a4:	ldr	r0, [pc, #160]	; 1114c <_start@@Base+0x2c4>
   110a8:	bl	10d5c <puts@plt>
   110ac:	ldr	r0, [pc, #156]	; 11150 <_start@@Base+0x2c8>
   110b0:	bl	10d5c <puts@plt>
   110b4:	ldr	r0, [pc, #152]	; 11154 <_start@@Base+0x2cc>
   110b8:	bl	10d5c <puts@plt>
   110bc:	ldr	r0, [pc, #148]	; 11158 <_start@@Base+0x2d0>
   110c0:	bl	10d5c <puts@plt>
   110c4:	ldr	r0, [pc, #144]	; 1115c <_start@@Base+0x2d4>
   110c8:	bl	10d5c <puts@plt>
   110cc:	ldr	r0, [pc, #140]	; 11160 <_start@@Base+0x2d8>
   110d0:	bl	10d5c <puts@plt>
   110d4:	ldr	r0, [pc, #136]	; 11164 <_start@@Base+0x2dc>
   110d8:	bl	10d5c <puts@plt>
   110dc:	mov	r0, #10
   110e0:	bl	10de0 <putchar@plt>
   110e4:	pop	{r4, pc}
   110e8:	andeq	r1, r1, r4, asr #26
   110ec:	andeq	r1, r1, ip, asr #26
   110f0:	muleq	r1, ip, sp
   110f4:	andeq	r1, r1, ip, ror #27
   110f8:	andeq	r1, r1, r0, lsl lr
   110fc:	andeq	r1, r1, ip, asr lr
   11100:	andeq	r1, r1, r8, lsr #29
   11104:	ldrdeq	r1, [r1], -r8
   11108:	andeq	r1, r1, ip, ror #29
   1110c:	andeq	r1, r1, r4, lsl #30
   11110:	andeq	r1, r1, r4, asr pc
   11114:	andeq	r1, r1, r4, lsr #31
   11118:	andeq	r1, r1, ip, asr #31
   1111c:	andeq	r2, r1, r8
   11120:	andeq	r2, r1, r0, lsr #32
   11124:	andeq	r2, r1, ip, rrx
   11128:	strheq	r2, [r1], -r8
   1112c:	ldrdeq	r2, [r1], -r8
   11130:	andeq	r2, r1, r4, lsr #2
   11134:	andeq	r2, r1, r4, asr r1
   11138:	andeq	r2, r1, r4, lsr #3
   1113c:			; <UNDEFINED> instruction: 0x000121bc
   11140:	ldrdeq	r2, [r1], -r4
   11144:	strdeq	r2, [r1], -r4
   11148:	andeq	r2, r1, r0, lsl r2
   1114c:	andeq	r2, r1, r4, asr #4
   11150:	muleq	r1, r0, r2
   11154:	ldrdeq	r2, [r1], -ip
   11158:	andeq	r2, r1, ip, lsl #6
   1115c:	andeq	r2, r1, r8, asr r3
   11160:	andeq	r2, r1, r4, lsr #7
   11164:	andeq	r2, r1, r4, ror #7
   11168:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1116c:	sub	sp, sp, #36	; 0x24
   11170:	ldr	r3, [pc, #1056]	; 11598 <_start@@Base+0x710>
   11174:	ldr	r3, [r3]
   11178:	cmp	r3, #5
   1117c:	ldrls	pc, [pc, r3, lsl #2]
   11180:	b	11590 <_start@@Base+0x708>
   11184:	muleq	r1, ip, r1
   11188:	andeq	r1, r1, r4, lsl #4
   1118c:	andeq	r1, r1, ip, asr r2
   11190:	andeq	r1, r1, ip, lsr #5
   11194:	andeq	r1, r1, ip, ror r5
   11198:	andeq	r1, r1, ip, ror r5
   1119c:	add	r2, sp, #8
   111a0:	mov	r1, r0
   111a4:	ldr	r3, [pc, #1004]	; 11598 <_start@@Base+0x710>
   111a8:	ldr	r0, [r3, #4]
   111ac:	bl	10d38 <coda_expression_eval_bool@plt>
   111b0:	subs	r6, r0, #0
   111b4:	bne	111e0 <_start@@Base+0x358>
   111b8:	ldr	r3, [pc, #988]	; 1159c <_start@@Base+0x714>
   111bc:	ldr	r2, [pc, #988]	; 115a0 <_start@@Base+0x718>
   111c0:	ldr	r0, [sp, #8]
   111c4:	cmp	r0, #0
   111c8:	movne	r0, r2
   111cc:	moveq	r0, r3
   111d0:	bl	10d5c <puts@plt>
   111d4:	mov	r0, r6
   111d8:	add	sp, sp, #36	; 0x24
   111dc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   111e0:	bl	10e58 <coda_get_errno@plt>
   111e4:	ldr	r0, [r0]
   111e8:	bl	10e28 <coda_errno_to_string@plt>
   111ec:	mov	r2, r0
   111f0:	ldr	r1, [pc, #940]	; 115a4 <_start@@Base+0x71c>
   111f4:	mvn	r0, #400	; 0x190
   111f8:	bl	10cf0 <coda_set_error@plt>
   111fc:	mvn	r6, #0
   11200:	b	111d4 <_start@@Base+0x34c>
   11204:	mov	r2, sp
   11208:	mov	r1, r0
   1120c:	ldr	r3, [pc, #900]	; 11598 <_start@@Base+0x710>
   11210:	ldr	r0, [r3, #4]
   11214:	bl	10ccc <coda_expression_eval_integer@plt>
   11218:	subs	r6, r0, #0
   1121c:	bne	11238 <_start@@Base+0x3b0>
   11220:	add	r2, sp, #8
   11224:	ldrd	r0, [sp]
   11228:	bl	10e70 <coda_str64@plt>
   1122c:	add	r0, sp, #8
   11230:	bl	10d5c <puts@plt>
   11234:	b	111d4 <_start@@Base+0x34c>
   11238:	bl	10e58 <coda_get_errno@plt>
   1123c:	ldr	r0, [r0]
   11240:	bl	10e28 <coda_errno_to_string@plt>
   11244:	mov	r2, r0
   11248:	ldr	r1, [pc, #856]	; 115a8 <_start@@Base+0x720>
   1124c:	mvn	r0, #400	; 0x190
   11250:	bl	10cf0 <coda_set_error@plt>
   11254:	mvn	r6, #0
   11258:	b	111d4 <_start@@Base+0x34c>
   1125c:	add	r2, sp, #8
   11260:	mov	r1, r0
   11264:	ldr	r3, [pc, #812]	; 11598 <_start@@Base+0x710>
   11268:	ldr	r0, [r3, #4]
   1126c:	bl	10e10 <coda_expression_eval_float@plt>
   11270:	subs	r6, r0, #0
   11274:	bne	11288 <_start@@Base+0x400>
   11278:	ldrd	r2, [sp, #8]
   1127c:	ldr	r0, [pc, #808]	; 115ac <_start@@Base+0x724>
   11280:	bl	10ce4 <printf@plt>
   11284:	b	111d4 <_start@@Base+0x34c>
   11288:	bl	10e58 <coda_get_errno@plt>
   1128c:	ldr	r0, [r0]
   11290:	bl	10e28 <coda_errno_to_string@plt>
   11294:	mov	r2, r0
   11298:	ldr	r1, [pc, #784]	; 115b0 <_start@@Base+0x728>
   1129c:	mvn	r0, #400	; 0x190
   112a0:	bl	10cf0 <coda_set_error@plt>
   112a4:	mvn	r6, #0
   112a8:	b	111d4 <_start@@Base+0x34c>
   112ac:	mov	r3, #0
   112b0:	str	r3, [sp]
   112b4:	add	r3, sp, #8
   112b8:	mov	r2, sp
   112bc:	mov	r1, r0
   112c0:	ldr	r0, [pc, #720]	; 11598 <_start@@Base+0x710>
   112c4:	ldr	r0, [r0, #4]
   112c8:	bl	10dd4 <coda_expression_eval_string@plt>
   112cc:	subs	r6, r0, #0
   112d0:	bne	11314 <_start@@Base+0x48c>
   112d4:	ldr	r7, [sp]
   112d8:	ldr	r0, [sp, #8]
   112dc:	cmp	r7, #0
   112e0:	cmpne	r0, #0
   112e4:	beq	11560 <_start@@Base+0x6d8>
   112e8:	cmp	r0, #0
   112ec:	blt	11338 <_start@@Base+0x4b0>
   112f0:	cmp	r0, #0
   112f4:	ble	11560 <_start@@Base+0x6d8>
   112f8:	mov	r4, r7
   112fc:	add	r7, r7, r0
   11300:	ldr	fp, [pc, #684]	; 115b4 <_start@@Base+0x72c>
   11304:	ldr	sl, [pc, #684]	; 115b8 <_start@@Base+0x730>
   11308:	ldr	r9, [pc, #684]	; 115bc <_start@@Base+0x734>
   1130c:	ldr	r8, [pc, #684]	; 115c0 <_start@@Base+0x738>
   11310:	b	11354 <_start@@Base+0x4cc>
   11314:	bl	10e58 <coda_get_errno@plt>
   11318:	ldr	r0, [r0]
   1131c:	bl	10e28 <coda_errno_to_string@plt>
   11320:	mov	r2, r0
   11324:	ldr	r1, [pc, #664]	; 115c4 <_start@@Base+0x73c>
   11328:	mvn	r0, #400	; 0x190
   1132c:	bl	10cf0 <coda_set_error@plt>
   11330:	mvn	r6, #0
   11334:	b	111d4 <_start@@Base+0x34c>
   11338:	mov	r0, r7
   1133c:	bl	10da4 <strlen@plt>
   11340:	b	112f0 <_start@@Base+0x468>
   11344:	ldr	r0, [pc, #636]	; 115c8 <_start@@Base+0x740>
   11348:	bl	10ce4 <printf@plt>
   1134c:	cmp	r4, r7
   11350:	beq	11560 <_start@@Base+0x6d8>
   11354:	ldrb	r5, [r4], #1
   11358:	sub	r3, r5, #7
   1135c:	cmp	r3, #85	; 0x55
   11360:	ldrls	pc, [pc, r3, lsl #2]
   11364:	b	1152c <_start@@Base+0x6a4>
   11368:	andeq	r1, r1, r0, asr #9
   1136c:	andeq	r1, r1, ip, asr #9
   11370:	strdeq	r1, [r1], -ip
   11374:	andeq	r1, r1, r4, ror #9
   11378:	andeq	r1, r1, r8, lsl #10
   1137c:	ldrdeq	r1, [r1], -r8
   11380:	strdeq	r1, [r1], -r0
   11384:	andeq	r1, r1, ip, lsr #10
   11388:	andeq	r1, r1, ip, lsr #10
   1138c:	andeq	r1, r1, ip, lsr #10
   11390:	andeq	r1, r1, ip, lsr #10
   11394:	andeq	r1, r1, ip, lsr #10
   11398:	andeq	r1, r1, ip, lsr #10
   1139c:	andeq	r1, r1, ip, lsr #10
   113a0:	andeq	r1, r1, ip, lsr #10
   113a4:	andeq	r1, r1, ip, lsr #10
   113a8:	andeq	r1, r1, ip, lsr #10
   113ac:	andeq	r1, r1, ip, lsr #10
   113b0:	andeq	r1, r1, ip, lsr #10
   113b4:	andeq	r1, r1, ip, lsr #10
   113b8:	andeq	r1, r1, r4, asr #6
   113bc:	andeq	r1, r1, ip, lsr #10
   113c0:	andeq	r1, r1, ip, lsr #10
   113c4:	andeq	r1, r1, ip, lsr #10
   113c8:	andeq	r1, r1, ip, lsr #10
   113cc:	andeq	r1, r1, ip, lsr #10
   113d0:	andeq	r1, r1, ip, lsr #10
   113d4:	andeq	r1, r1, r0, lsr #10
   113d8:	andeq	r1, r1, ip, lsr #10
   113dc:	andeq	r1, r1, ip, lsr #10
   113e0:	andeq	r1, r1, ip, lsr #10
   113e4:	andeq	r1, r1, ip, lsr #10
   113e8:	andeq	r1, r1, ip, lsr #10
   113ec:	andeq	r1, r1, ip, lsr #10
   113f0:	andeq	r1, r1, ip, lsr #10
   113f4:	andeq	r1, r1, ip, lsr #10
   113f8:	andeq	r1, r1, ip, lsr #10
   113fc:	andeq	r1, r1, ip, lsr #10
   11400:	andeq	r1, r1, ip, lsr #10
   11404:	andeq	r1, r1, ip, lsr #10
   11408:	andeq	r1, r1, ip, lsr #10
   1140c:	andeq	r1, r1, ip, lsr #10
   11410:	andeq	r1, r1, ip, lsr #10
   11414:	andeq	r1, r1, ip, lsr #10
   11418:	andeq	r1, r1, ip, lsr #10
   1141c:	andeq	r1, r1, ip, lsr #10
   11420:	andeq	r1, r1, ip, lsr #10
   11424:	andeq	r1, r1, ip, lsr #10
   11428:	andeq	r1, r1, ip, lsr #10
   1142c:	andeq	r1, r1, ip, lsr #10
   11430:	andeq	r1, r1, ip, lsr #10
   11434:	andeq	r1, r1, ip, lsr #10
   11438:	andeq	r1, r1, ip, lsr #10
   1143c:	andeq	r1, r1, ip, lsr #10
   11440:	andeq	r1, r1, ip, lsr #10
   11444:	andeq	r1, r1, ip, lsr #10
   11448:	andeq	r1, r1, ip, lsr #10
   1144c:	andeq	r1, r1, ip, lsr #10
   11450:	andeq	r1, r1, ip, lsr #10
   11454:	andeq	r1, r1, ip, lsr #10
   11458:	andeq	r1, r1, ip, lsr #10
   1145c:	andeq	r1, r1, ip, lsr #10
   11460:	andeq	r1, r1, ip, lsr #10
   11464:	andeq	r1, r1, ip, lsr #10
   11468:	andeq	r1, r1, ip, lsr #10
   1146c:	andeq	r1, r1, ip, lsr #10
   11470:	andeq	r1, r1, ip, lsr #10
   11474:	andeq	r1, r1, ip, lsr #10
   11478:	andeq	r1, r1, ip, lsr #10
   1147c:	andeq	r1, r1, ip, lsr #10
   11480:	andeq	r1, r1, ip, lsr #10
   11484:	andeq	r1, r1, ip, lsr #10
   11488:	andeq	r1, r1, ip, lsr #10
   1148c:	andeq	r1, r1, ip, lsr #10
   11490:	andeq	r1, r1, ip, lsr #10
   11494:	andeq	r1, r1, ip, lsr #10
   11498:	andeq	r1, r1, ip, lsr #10
   1149c:	andeq	r1, r1, ip, lsr #10
   114a0:	andeq	r1, r1, ip, lsr #10
   114a4:	andeq	r1, r1, ip, lsr #10
   114a8:	andeq	r1, r1, ip, lsr #10
   114ac:	andeq	r1, r1, ip, lsr #10
   114b0:	andeq	r1, r1, ip, lsr #10
   114b4:	andeq	r1, r1, ip, lsr #10
   114b8:	andeq	r1, r1, ip, lsr #10
   114bc:	andeq	r1, r1, r4, lsl r5
   114c0:	ldr	r0, [pc, #260]	; 115cc <_start@@Base+0x744>
   114c4:	bl	10ce4 <printf@plt>
   114c8:	b	1134c <_start@@Base+0x4c4>
   114cc:	ldr	r0, [pc, #252]	; 115d0 <_start@@Base+0x748>
   114d0:	bl	10ce4 <printf@plt>
   114d4:	b	1134c <_start@@Base+0x4c4>
   114d8:	ldr	r0, [pc, #244]	; 115d4 <_start@@Base+0x74c>
   114dc:	bl	10ce4 <printf@plt>
   114e0:	b	1134c <_start@@Base+0x4c4>
   114e4:	ldr	r0, [pc, #236]	; 115d8 <_start@@Base+0x750>
   114e8:	bl	10ce4 <printf@plt>
   114ec:	b	1134c <_start@@Base+0x4c4>
   114f0:	ldr	r0, [pc, #228]	; 115dc <_start@@Base+0x754>
   114f4:	bl	10ce4 <printf@plt>
   114f8:	b	1134c <_start@@Base+0x4c4>
   114fc:	mov	r0, r8
   11500:	bl	10ce4 <printf@plt>
   11504:	b	1134c <_start@@Base+0x4c4>
   11508:	mov	r0, r9
   1150c:	bl	10ce4 <printf@plt>
   11510:	b	1134c <_start@@Base+0x4c4>
   11514:	mov	r0, sl
   11518:	bl	10ce4 <printf@plt>
   1151c:	b	1134c <_start@@Base+0x4c4>
   11520:	mov	r0, fp
   11524:	bl	10ce4 <printf@plt>
   11528:	b	1134c <_start@@Base+0x4c4>
   1152c:	bl	10d8c <__ctype_b_loc@plt>
   11530:	ldr	r2, [r0]
   11534:	lsl	r3, r5, #1
   11538:	ldrh	r3, [r2, r3]
   1153c:	tst	r3, #16384	; 0x4000
   11540:	bne	11554 <_start@@Base+0x6cc>
   11544:	mov	r1, r5
   11548:	ldr	r0, [pc, #144]	; 115e0 <_start@@Base+0x758>
   1154c:	bl	10ce4 <printf@plt>
   11550:	b	1134c <_start@@Base+0x4c4>
   11554:	mov	r0, r5
   11558:	bl	10de0 <putchar@plt>
   1155c:	b	1134c <_start@@Base+0x4c4>
   11560:	mov	r0, #10
   11564:	bl	10de0 <putchar@plt>
   11568:	ldr	r0, [sp]
   1156c:	cmp	r0, #0
   11570:	beq	111d4 <_start@@Base+0x34c>
   11574:	bl	10d08 <free@plt>
   11578:	b	111d4 <_start@@Base+0x34c>
   1157c:	ldr	r3, [pc, #96]	; 115e4 <_start@@Base+0x75c>
   11580:	mov	r2, #230	; 0xe6
   11584:	ldr	r1, [pc, #92]	; 115e8 <_start@@Base+0x760>
   11588:	ldr	r0, [pc, #92]	; 115ec <_start@@Base+0x764>
   1158c:	bl	10e7c <__assert_fail@plt>
   11590:	mov	r6, #0
   11594:	b	111d4 <_start@@Base+0x34c>
   11598:	strheq	r3, [r2], -r8
   1159c:	andeq	r2, r1, ip, lsr #8
   115a0:	andeq	r2, r1, r4, lsr #8
   115a4:	andeq	r2, r1, r4, lsr r4
   115a8:	andeq	r2, r1, ip, asr r4
   115ac:			; <UNDEFINED> instruction: 0x000124b4
   115b0:	andeq	r2, r1, r4, lsl #9
   115b4:	andeq	r2, r1, r8, lsl #10
   115b8:	andeq	r2, r1, r4, lsl #10
   115bc:	andeq	r2, r1, r0, lsl #10
   115c0:	strdeq	r2, [r1], -ip
   115c4:			; <UNDEFINED> instruction: 0x000124bc
   115c8:	andeq	r2, r1, r4, ror #9
   115cc:	andeq	r2, r1, r8, ror #9
   115d0:	andeq	r2, r1, ip, ror #9
   115d4:	strdeq	r2, [r1], -r0
   115d8:	strdeq	r2, [r1], -r4
   115dc:	strdeq	r2, [r1], -r8
   115e0:	andeq	r2, r1, ip, lsl #10
   115e4:	andeq	r1, r1, r4, lsr sp
   115e8:	andeq	r2, r1, r4, lsl r5
   115ec:	andeq	r2, r1, ip, asr r5
   115f0:	push	{r4, r5, lr}
   115f4:	sub	sp, sp, #532	; 0x214
   115f8:	mov	r5, r0
   115fc:	add	r1, sp, #528	; 0x210
   11600:	mov	r3, #0
   11604:	str	r3, [r1, #-4]!
   11608:	bl	10cfc <coda_open@plt>
   1160c:	cmp	r0, #0
   11610:	movne	r4, #1
   11614:	beq	11624 <_start@@Base+0x79c>
   11618:	mov	r0, r4
   1161c:	add	sp, sp, #532	; 0x214
   11620:	pop	{r4, r5, pc}
   11624:	ldr	r1, [sp, #524]	; 0x20c
   11628:	mov	r0, sp
   1162c:	bl	10d44 <coda_cursor_set_product@plt>
   11630:	subs	r4, r0, #0
   11634:	bne	1167c <_start@@Base+0x7f4>
   11638:	ldr	r3, [pc, #168]	; 116e8 <_start@@Base+0x860>
   1163c:	ldr	r0, [r3, #8]
   11640:	cmp	r0, #0
   11644:	beq	11658 <_start@@Base+0x7d0>
   11648:	mov	r1, sp
   1164c:	bl	10e1c <coda_expression_eval_node@plt>
   11650:	cmp	r0, #0
   11654:	bne	1168c <_start@@Base+0x804>
   11658:	mov	r0, sp
   1165c:	bl	11168 <_start@@Base+0x2e0>
   11660:	cmp	r0, #0
   11664:	bne	116bc <_start@@Base+0x834>
   11668:	ldr	r0, [sp, #524]	; 0x20c
   1166c:	bl	10df8 <coda_close@plt>
   11670:	adds	r4, r0, #0
   11674:	movne	r4, #1
   11678:	b	11618 <_start@@Base+0x790>
   1167c:	ldr	r0, [sp, #524]	; 0x20c
   11680:	bl	10df8 <coda_close@plt>
   11684:	mov	r4, #1
   11688:	b	11618 <_start@@Base+0x790>
   1168c:	ldr	r3, [pc, #88]	; 116ec <_start@@Base+0x864>
   11690:	ldr	r5, [r3]
   11694:	bl	10e58 <coda_get_errno@plt>
   11698:	ldr	r0, [r0]
   1169c:	bl	10e28 <coda_errno_to_string@plt>
   116a0:	mov	r2, r0
   116a4:	ldr	r1, [pc, #68]	; 116f0 <_start@@Base+0x868>
   116a8:	mov	r0, r5
   116ac:	bl	10db0 <fprintf@plt>
   116b0:	ldr	r0, [sp, #524]	; 0x20c
   116b4:	bl	10df8 <coda_close@plt>
   116b8:	b	11618 <_start@@Base+0x790>
   116bc:	ldr	r3, [pc, #40]	; 116ec <_start@@Base+0x864>
   116c0:	ldr	r4, [r3]
   116c4:	bl	10e58 <coda_get_errno@plt>
   116c8:	ldr	r0, [r0]
   116cc:	bl	10e28 <coda_errno_to_string@plt>
   116d0:	mov	r3, r5
   116d4:	mov	r2, r0
   116d8:	ldr	r1, [pc, #20]	; 116f4 <_start@@Base+0x86c>
   116dc:	mov	r0, r4
   116e0:	bl	10db0 <fprintf@plt>
   116e4:	b	11668 <_start@@Base+0x7e0>
   116e8:	strheq	r3, [r2], -r8
   116ec:	strheq	r3, [r2], -r0
   116f0:	andeq	r2, r1, r0, ror #10
   116f4:	muleq	r1, r0, r5

000116f8 <callback@@Base>:
   116f8:	push	{r4, lr}
   116fc:	cmp	r1, #0
   11700:	beq	11724 <callback@@Base+0x2c>
   11704:	cmp	r1, #2
   11708:	beq	11740 <callback@@Base+0x48>
   1170c:	cmp	r1, #1
   11710:	beq	11758 <callback@@Base+0x60>
   11714:	cmp	r1, #4
   11718:	beq	11774 <callback@@Base+0x7c>
   1171c:	mov	r0, #0
   11720:	pop	{r4, pc}
   11724:	mov	r3, r0
   11728:	ldr	r1, [pc, #76]	; 1177c <callback@@Base+0x84>
   1172c:	ldr	r0, [pc, #76]	; 11780 <callback@@Base+0x88>
   11730:	ldr	r0, [r0]
   11734:	bl	10db0 <fprintf@plt>
   11738:	mov	r0, #0
   1173c:	pop	{r4, pc}
   11740:	mov	r2, r0
   11744:	ldr	r1, [pc, #56]	; 11784 <callback@@Base+0x8c>
   11748:	ldr	r3, [pc, #48]	; 11780 <callback@@Base+0x88>
   1174c:	ldr	r0, [r3]
   11750:	bl	10db0 <fprintf@plt>
   11754:	b	11738 <callback@@Base+0x40>
   11758:	mov	r3, r2
   1175c:	mov	r2, r0
   11760:	ldr	r1, [pc, #32]	; 11788 <callback@@Base+0x90>
   11764:	ldr	r0, [pc, #20]	; 11780 <callback@@Base+0x88>
   11768:	ldr	r0, [r0]
   1176c:	bl	10db0 <fprintf@plt>
   11770:	b	11738 <callback@@Base+0x40>
   11774:	bl	115f0 <_start@@Base+0x768>
   11778:	pop	{r4, pc}
   1177c:	muleq	r1, r0, r5
   11780:	strheq	r3, [r2], -r0
   11784:	andeq	r2, r1, r4, lsr #11
   11788:	andeq	r2, r1, ip, asr #11

0001178c <main@@Base>:
   1178c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11790:	sub	sp, sp, #20
   11794:	cmp	r0, #1
   11798:	beq	1184c <main@@Base+0xc0>
   1179c:	mov	r6, r0
   117a0:	mov	r7, r1
   117a4:	ldr	r4, [r1, #4]
   117a8:	ldr	r1, [pc, #1200]	; 11c60 <main@@Base+0x4d4>
   117ac:	mov	r0, r4
   117b0:	bl	10cd8 <strcmp@plt>
   117b4:	cmp	r0, #0
   117b8:	beq	1184c <main@@Base+0xc0>
   117bc:	ldr	r1, [pc, #1184]	; 11c64 <main@@Base+0x4d8>
   117c0:	mov	r0, r4
   117c4:	bl	10cd8 <strcmp@plt>
   117c8:	cmp	r0, #0
   117cc:	beq	1184c <main@@Base+0xc0>
   117d0:	ldr	r1, [pc, #1168]	; 11c68 <main@@Base+0x4dc>
   117d4:	mov	r0, r4
   117d8:	bl	10cd8 <strcmp@plt>
   117dc:	cmp	r0, #0
   117e0:	beq	11858 <main@@Base+0xcc>
   117e4:	ldr	r1, [pc, #1152]	; 11c6c <main@@Base+0x4e0>
   117e8:	mov	r0, r4
   117ec:	bl	10cd8 <strcmp@plt>
   117f0:	cmp	r0, #0
   117f4:	beq	11858 <main@@Base+0xcc>
   117f8:	cmp	r6, #2
   117fc:	ble	11814 <main@@Base+0x88>
   11800:	ldr	r1, [pc, #1128]	; 11c70 <main@@Base+0x4e4>
   11804:	mov	r0, r4
   11808:	bl	10cd8 <strcmp@plt>
   1180c:	cmp	r0, #0
   11810:	beq	11880 <main@@Base+0xf4>
   11814:	ldr	r2, [pc, #1112]	; 11c74 <main@@Base+0x4e8>
   11818:	mov	r1, #0
   1181c:	ldr	r0, [r7]
   11820:	bl	10d14 <coda_set_definition_path_conditional@plt>
   11824:	cmp	r0, #0
   11828:	moveq	r4, #1
   1182c:	bne	11890 <main@@Base+0x104>
   11830:	cmp	r6, r4
   11834:	ble	11a9c <main@@Base+0x310>
   11838:	mov	sl, #0
   1183c:	mov	r3, #1
   11840:	str	r3, [sp, #12]
   11844:	ldr	r9, [pc, #1068]	; 11c78 <main@@Base+0x4ec>
   11848:	b	119e0 <main@@Base+0x254>
   1184c:	bl	10fb0 <_start@@Base+0x128>
   11850:	mov	r0, #0
   11854:	bl	10d98 <exit@plt>
   11858:	bl	10e4c <coda_get_libcoda_version@plt>
   1185c:	mov	r1, r0
   11860:	ldr	r0, [pc, #1044]	; 11c7c <main@@Base+0x4f0>
   11864:	bl	10ce4 <printf@plt>
   11868:	ldr	r0, [pc, #1040]	; 11c80 <main@@Base+0x4f4>
   1186c:	bl	10d5c <puts@plt>
   11870:	mov	r0, #10
   11874:	bl	10de0 <putchar@plt>
   11878:	mov	r0, #0
   1187c:	bl	10d98 <exit@plt>
   11880:	ldr	r0, [r7, #8]
   11884:	bl	10d20 <coda_set_definition_path@plt>
   11888:	mov	r4, #3
   1188c:	b	11830 <main@@Base+0xa4>
   11890:	ldr	r3, [pc, #1004]	; 11c84 <main@@Base+0x4f8>
   11894:	ldr	r4, [r3]
   11898:	bl	10e58 <coda_get_errno@plt>
   1189c:	ldr	r0, [r0]
   118a0:	bl	10e28 <coda_errno_to_string@plt>
   118a4:	mov	r2, r0
   118a8:	ldr	r1, [pc, #984]	; 11c88 <main@@Base+0x4fc>
   118ac:	mov	r0, r4
   118b0:	bl	10db0 <fprintf@plt>
   118b4:	mov	r0, #1
   118b8:	bl	10d98 <exit@plt>
   118bc:	ldr	r3, [pc, #960]	; 11c84 <main@@Base+0x4f8>
   118c0:	ldr	r4, [r3]
   118c4:	bl	10e58 <coda_get_errno@plt>
   118c8:	ldr	r0, [r0]
   118cc:	bl	10e28 <coda_errno_to_string@plt>
   118d0:	mov	r2, r0
   118d4:	ldr	r1, [pc, #944]	; 11c8c <main@@Base+0x500>
   118d8:	mov	r0, r4
   118dc:	bl	10db0 <fprintf@plt>
   118e0:	mov	r0, #1
   118e4:	bl	10d98 <exit@plt>
   118e8:	ldrb	r3, [r5]
   118ec:	cmp	r3, #45	; 0x2d
   118f0:	beq	119ac <main@@Base+0x220>
   118f4:	cmp	r6, r4
   118f8:	ble	11a9c <main@@Base+0x310>
   118fc:	ldr	r1, [pc, #908]	; 11c90 <main@@Base+0x504>
   11900:	mov	r0, r5
   11904:	bl	10e40 <coda_expression_from_string@plt>
   11908:	cmp	r0, #0
   1190c:	bne	11ac0 <main@@Base+0x334>
   11910:	ldr	r3, [pc, #892]	; 11c94 <main@@Base+0x508>
   11914:	mov	r1, r3
   11918:	ldr	r0, [r3, #4]
   1191c:	bl	10dec <coda_expression_get_type@plt>
   11920:	cmp	r0, #0
   11924:	bne	11aec <main@@Base+0x360>
   11928:	ldr	r3, [pc, #868]	; 11c94 <main@@Base+0x508>
   1192c:	ldr	r0, [r3]
   11930:	sub	r3, r0, #4
   11934:	cmp	r3, #1
   11938:	bls	11b18 <main@@Base+0x38c>
   1193c:	cmp	sl, #0
   11940:	bne	11b3c <main@@Base+0x3b0>
   11944:	add	r4, r4, #1
   11948:	cmp	r6, r4
   1194c:	bgt	11b5c <main@@Base+0x3d0>
   11950:	ldr	r3, [pc, #828]	; 11c94 <main@@Base+0x508>
   11954:	ldr	r3, [r3, #8]
   11958:	cmp	r3, #0
   1195c:	bne	11bf4 <main@@Base+0x468>
   11960:	ldr	r3, [pc, #812]	; 11c94 <main@@Base+0x508>
   11964:	ldr	r0, [r3, #4]
   11968:	bl	10e04 <coda_expression_is_constant@plt>
   1196c:	cmp	r0, #0
   11970:	beq	11c14 <main@@Base+0x488>
   11974:	mov	r0, #0
   11978:	bl	11168 <_start@@Base+0x2e0>
   1197c:	cmp	r0, #0
   11980:	bne	11c34 <main@@Base+0x4a8>
   11984:	ldr	r4, [pc, #776]	; 11c94 <main@@Base+0x508>
   11988:	ldr	r0, [r4, #4]
   1198c:	bl	10d74 <coda_expression_delete@plt>
   11990:	ldr	r0, [r4, #8]
   11994:	cmp	r0, #0
   11998:	beq	119a0 <main@@Base+0x214>
   1199c:	bl	10d74 <coda_expression_delete@plt>
   119a0:	mov	r0, #0
   119a4:	add	sp, sp, #20
   119a8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   119ac:	ldr	r3, [pc, #720]	; 11c84 <main@@Base+0x4f8>
   119b0:	ldr	r3, [r3]
   119b4:	mov	r2, #25
   119b8:	mov	r1, #1
   119bc:	ldr	r0, [pc, #724]	; 11c98 <main@@Base+0x50c>
   119c0:	bl	10d2c <fwrite@plt>
   119c4:	bl	10fb0 <_start@@Base+0x128>
   119c8:	mov	r0, #1
   119cc:	bl	10d98 <exit@plt>
   119d0:	mov	sl, #1
   119d4:	add	r4, r4, #1
   119d8:	cmp	r6, r4
   119dc:	ble	11a9c <main@@Base+0x310>
   119e0:	lsl	r8, r4, #2
   119e4:	ldr	r5, [r7, r4, lsl #2]
   119e8:	mov	r1, r9
   119ec:	mov	r0, r5
   119f0:	bl	10cd8 <strcmp@plt>
   119f4:	cmp	r0, #0
   119f8:	beq	119d0 <main@@Base+0x244>
   119fc:	ldr	r1, [pc, #664]	; 11c9c <main@@Base+0x510>
   11a00:	mov	r0, r5
   11a04:	bl	10cd8 <strcmp@plt>
   11a08:	cmp	r0, #0
   11a0c:	beq	11a84 <main@@Base+0x2f8>
   11a10:	ldr	r1, [pc, #648]	; 11ca0 <main@@Base+0x514>
   11a14:	mov	r0, r5
   11a18:	bl	10cd8 <strcmp@plt>
   11a1c:	cmp	r0, #0
   11a20:	beq	11a8c <main@@Base+0x300>
   11a24:	ldr	r1, [pc, #632]	; 11ca4 <main@@Base+0x518>
   11a28:	mov	r0, r5
   11a2c:	bl	10cd8 <strcmp@plt>
   11a30:	cmp	r0, #0
   11a34:	beq	11a94 <main@@Base+0x308>
   11a38:	ldr	r1, [pc, #616]	; 11ca8 <main@@Base+0x51c>
   11a3c:	mov	r0, r5
   11a40:	bl	10cd8 <strcmp@plt>
   11a44:	cmp	r0, #0
   11a48:	bne	118e8 <main@@Base+0x15c>
   11a4c:	add	fp, r4, #1
   11a50:	cmp	r6, fp
   11a54:	ble	118e8 <main@@Base+0x15c>
   11a58:	add	r3, r7, r8
   11a5c:	ldr	r0, [r3, #4]
   11a60:	ldrb	r3, [r0]
   11a64:	cmp	r3, #45	; 0x2d
   11a68:	beq	118e8 <main@@Base+0x15c>
   11a6c:	ldr	r1, [pc, #568]	; 11cac <main@@Base+0x520>
   11a70:	bl	10e40 <coda_expression_from_string@plt>
   11a74:	cmp	r0, #0
   11a78:	bne	118bc <main@@Base+0x130>
   11a7c:	mov	r4, fp
   11a80:	b	119d4 <main@@Base+0x248>
   11a84:	mov	sl, #1
   11a88:	b	119d4 <main@@Base+0x248>
   11a8c:	str	r0, [sp, #12]
   11a90:	b	119d4 <main@@Base+0x248>
   11a94:	str	r0, [sp, #12]
   11a98:	b	119d4 <main@@Base+0x248>
   11a9c:	ldr	r3, [pc, #480]	; 11c84 <main@@Base+0x4f8>
   11aa0:	ldr	r3, [r3]
   11aa4:	mov	r2, #25
   11aa8:	mov	r1, #1
   11aac:	ldr	r0, [pc, #484]	; 11c98 <main@@Base+0x50c>
   11ab0:	bl	10d2c <fwrite@plt>
   11ab4:	bl	10fb0 <_start@@Base+0x128>
   11ab8:	mov	r0, #1
   11abc:	bl	10d98 <exit@plt>
   11ac0:	ldr	r3, [pc, #444]	; 11c84 <main@@Base+0x4f8>
   11ac4:	ldr	r4, [r3]
   11ac8:	bl	10e58 <coda_get_errno@plt>
   11acc:	ldr	r0, [r0]
   11ad0:	bl	10e28 <coda_errno_to_string@plt>
   11ad4:	mov	r2, r0
   11ad8:	ldr	r1, [pc, #464]	; 11cb0 <main@@Base+0x524>
   11adc:	mov	r0, r4
   11ae0:	bl	10db0 <fprintf@plt>
   11ae4:	mov	r0, #1
   11ae8:	bl	10d98 <exit@plt>
   11aec:	ldr	r3, [pc, #400]	; 11c84 <main@@Base+0x4f8>
   11af0:	ldr	r4, [r3]
   11af4:	bl	10e58 <coda_get_errno@plt>
   11af8:	ldr	r0, [r0]
   11afc:	bl	10e28 <coda_errno_to_string@plt>
   11b00:	mov	r2, r0
   11b04:	ldr	r1, [pc, #380]	; 11c88 <main@@Base+0x4fc>
   11b08:	mov	r0, r4
   11b0c:	bl	10db0 <fprintf@plt>
   11b10:	mov	r0, #1
   11b14:	bl	10d98 <exit@plt>
   11b18:	ldr	r3, [pc, #356]	; 11c84 <main@@Base+0x4f8>
   11b1c:	ldr	r4, [r3]
   11b20:	bl	10e34 <coda_expression_get_type_name@plt>
   11b24:	mov	r2, r0
   11b28:	ldr	r1, [pc, #388]	; 11cb4 <main@@Base+0x528>
   11b2c:	mov	r0, r4
   11b30:	bl	10db0 <fprintf@plt>
   11b34:	mov	r0, #1
   11b38:	bl	10d98 <exit@plt>
   11b3c:	ldr	r4, [pc, #336]	; 11c94 <main@@Base+0x508>
   11b40:	ldr	r0, [r4, #4]
   11b44:	bl	10d74 <coda_expression_delete@plt>
   11b48:	ldr	r0, [r4, #8]
   11b4c:	cmp	r0, #0
   11b50:	beq	119a0 <main@@Base+0x214>
   11b54:	bl	10d74 <coda_expression_delete@plt>
   11b58:	b	119a0 <main@@Base+0x214>
   11b5c:	bl	10dbc <coda_init@plt>
   11b60:	cmp	r0, #0
   11b64:	bne	11b9c <main@@Base+0x410>
   11b68:	ldr	r0, [sp, #12]
   11b6c:	bl	10dc8 <coda_set_option_perform_conversions@plt>
   11b70:	add	r2, r8, #4
   11b74:	mov	r0, #0
   11b78:	str	r0, [sp]
   11b7c:	ldr	r3, [pc, #308]	; 11cb8 <main@@Base+0x52c>
   11b80:	add	r2, r7, r2
   11b84:	sub	r1, r6, r4
   11b88:	bl	10cc0 <coda_match_filefilter@plt>
   11b8c:	cmp	r0, #0
   11b90:	bne	11bc8 <main@@Base+0x43c>
   11b94:	bl	10d50 <coda_done@plt>
   11b98:	b	11984 <main@@Base+0x1f8>
   11b9c:	ldr	r3, [pc, #224]	; 11c84 <main@@Base+0x4f8>
   11ba0:	ldr	r4, [r3]
   11ba4:	bl	10e58 <coda_get_errno@plt>
   11ba8:	ldr	r0, [r0]
   11bac:	bl	10e28 <coda_errno_to_string@plt>
   11bb0:	mov	r2, r0
   11bb4:	ldr	r1, [pc, #204]	; 11c88 <main@@Base+0x4fc>
   11bb8:	mov	r0, r4
   11bbc:	bl	10db0 <fprintf@plt>
   11bc0:	mov	r0, #1
   11bc4:	bl	10d98 <exit@plt>
   11bc8:	ldr	r3, [pc, #180]	; 11c84 <main@@Base+0x4f8>
   11bcc:	ldr	r4, [r3]
   11bd0:	bl	10e58 <coda_get_errno@plt>
   11bd4:	ldr	r0, [r0]
   11bd8:	bl	10e28 <coda_errno_to_string@plt>
   11bdc:	mov	r2, r0
   11be0:	ldr	r1, [pc, #160]	; 11c88 <main@@Base+0x4fc>
   11be4:	mov	r0, r4
   11be8:	bl	10db0 <fprintf@plt>
   11bec:	mov	r0, #1
   11bf0:	bl	10d98 <exit@plt>
   11bf4:	ldr	r3, [pc, #136]	; 11c84 <main@@Base+0x4f8>
   11bf8:	ldr	r3, [r3]
   11bfc:	mov	r2, #96	; 0x60
   11c00:	mov	r1, #1
   11c04:	ldr	r0, [pc, #176]	; 11cbc <main@@Base+0x530>
   11c08:	bl	10d2c <fwrite@plt>
   11c0c:	mov	r0, #1
   11c10:	bl	10d98 <exit@plt>
   11c14:	ldr	r3, [pc, #104]	; 11c84 <main@@Base+0x4f8>
   11c18:	ldr	r3, [r3]
   11c1c:	mov	r2, #111	; 0x6f
   11c20:	mov	r1, #1
   11c24:	ldr	r0, [pc, #148]	; 11cc0 <main@@Base+0x534>
   11c28:	bl	10d2c <fwrite@plt>
   11c2c:	mov	r0, #1
   11c30:	bl	10d98 <exit@plt>
   11c34:	ldr	r3, [pc, #72]	; 11c84 <main@@Base+0x4f8>
   11c38:	ldr	r4, [r3]
   11c3c:	bl	10e58 <coda_get_errno@plt>
   11c40:	ldr	r0, [r0]
   11c44:	bl	10e28 <coda_errno_to_string@plt>
   11c48:	mov	r2, r0
   11c4c:	ldr	r1, [pc, #52]	; 11c88 <main@@Base+0x4fc>
   11c50:	mov	r0, r4
   11c54:	bl	10db0 <fprintf@plt>
   11c58:	mov	r0, #1
   11c5c:	bl	10d98 <exit@plt>
   11c60:	strdeq	r2, [r1], -r0
   11c64:	andeq	r2, r1, ip, asr #3
   11c68:	strdeq	r2, [r1], -r4
   11c6c:	strdeq	r2, [r1], -r8
   11c70:	andeq	r2, r1, r4, asr #12
   11c74:	andeq	r2, r1, r8, asr #12
   11c78:	andeq	r2, r1, r0, ror r6
   11c7c:	andeq	r2, r1, r4, lsl #12
   11c80:	andeq	r2, r1, r4, lsl r6
   11c84:	strheq	r3, [r2], -r0
   11c88:	andeq	r2, r1, r4, ror #12
   11c8c:	andeq	r2, r1, ip, ror r6
   11c90:	strheq	r3, [r2], -ip
   11c94:	strheq	r3, [r2], -r8
   11c98:	andeq	r2, r1, r4, lsr #13
   11c9c:	strdeq	r1, [r1], -ip
   11ca0:	andeq	r2, r1, r4, ror r6
   11ca4:			; <UNDEFINED> instruction: 0x00011fb4
   11ca8:	andeq	r2, r1, r8, ror r6
   11cac:	andeq	r3, r2, r0, asr #1
   11cb0:	andeq	r2, r1, r0, asr #13
   11cb4:	andeq	r2, r1, r0, ror #13
   11cb8:	strdeq	r1, [r1], -r8
   11cbc:	andeq	r2, r1, r0, lsl r7
   11cc0:	andeq	r2, r1, r4, ror r7

00011cc4 <__libc_csu_init@@Base>:
   11cc4:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   11cc8:	mov	r7, r0
   11ccc:	ldr	r6, [pc, #72]	; 11d1c <__libc_csu_init@@Base+0x58>
   11cd0:	ldr	r5, [pc, #72]	; 11d20 <__libc_csu_init@@Base+0x5c>
   11cd4:	add	r6, pc, r6
   11cd8:	add	r5, pc, r5
   11cdc:	sub	r6, r6, r5
   11ce0:	mov	r8, r1
   11ce4:	mov	r9, r2
   11ce8:	bl	10ca0 <coda_match_filefilter@plt-0x20>
   11cec:	asrs	r6, r6, #2
   11cf0:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   11cf4:	mov	r4, #0
   11cf8:	add	r4, r4, #1
   11cfc:	ldr	r3, [r5], #4
   11d00:	mov	r2, r9
   11d04:	mov	r1, r8
   11d08:	mov	r0, r7
   11d0c:	blx	r3
   11d10:	cmp	r6, r4
   11d14:	bne	11cf8 <__libc_csu_init@@Base+0x34>
   11d18:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   11d1c:	andeq	r1, r1, ip, lsl r2
   11d20:	andeq	r1, r1, r4, lsl r2

00011d24 <__libc_csu_fini@@Base>:
   11d24:	bx	lr

Disassembly of section .fini:

00011d28 <.fini>:
   11d28:	push	{r3, lr}
   11d2c:	pop	{r3, pc}
