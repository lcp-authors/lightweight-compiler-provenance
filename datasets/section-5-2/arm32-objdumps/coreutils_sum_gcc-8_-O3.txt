
../repos/coreutils/src/sum:     file format elf32-littlearm


Disassembly of section .init:

00010e20 <.init>:
   10e20:	push	{r3, lr}
   10e24:	bl	1154c <__assert_fail@plt+0x448>
   10e28:	pop	{r3, pc}

Disassembly of section .plt:

00010e2c <fdopen@plt-0x14>:
   10e2c:	push	{lr}		; (str lr, [sp, #-4]!)
   10e30:	ldr	lr, [pc, #4]	; 10e3c <fdopen@plt-0x4>
   10e34:	add	lr, pc, lr
   10e38:	ldr	pc, [lr, #8]!
   10e3c:	andeq	sl, r1, r4, asr #3

00010e40 <fdopen@plt>:
   10e40:	add	ip, pc, #0, 12
   10e44:	add	ip, ip, #106496	; 0x1a000
   10e48:	ldr	pc, [ip, #452]!	; 0x1c4

00010e4c <calloc@plt>:
   10e4c:	add	ip, pc, #0, 12
   10e50:	add	ip, ip, #106496	; 0x1a000
   10e54:	ldr	pc, [ip, #444]!	; 0x1bc

00010e58 <fputs_unlocked@plt>:
   10e58:	add	ip, pc, #0, 12
   10e5c:	add	ip, ip, #106496	; 0x1a000
   10e60:	ldr	pc, [ip, #436]!	; 0x1b4

00010e64 <raise@plt>:
   10e64:	add	ip, pc, #0, 12
   10e68:	add	ip, ip, #106496	; 0x1a000
   10e6c:	ldr	pc, [ip, #428]!	; 0x1ac

00010e70 <strcmp@plt>:
   10e70:	add	ip, pc, #0, 12
   10e74:	add	ip, ip, #106496	; 0x1a000
   10e78:	ldr	pc, [ip, #420]!	; 0x1a4

00010e7c <posix_fadvise64@plt>:
   10e7c:	add	ip, pc, #0, 12
   10e80:	add	ip, ip, #106496	; 0x1a000
   10e84:	ldr	pc, [ip, #412]!	; 0x19c

00010e88 <fflush@plt>:
   10e88:	add	ip, pc, #0, 12
   10e8c:	add	ip, ip, #106496	; 0x1a000
   10e90:	ldr	pc, [ip, #404]!	; 0x194

00010e94 <memmove@plt>:
   10e94:	add	ip, pc, #0, 12
   10e98:	add	ip, ip, #106496	; 0x1a000
   10e9c:	ldr	pc, [ip, #396]!	; 0x18c

00010ea0 <free@plt>:
   10ea0:	add	ip, pc, #0, 12
   10ea4:	add	ip, ip, #106496	; 0x1a000
   10ea8:	ldr	pc, [ip, #388]!	; 0x184

00010eac <_exit@plt>:
   10eac:	add	ip, pc, #0, 12
   10eb0:	add	ip, ip, #106496	; 0x1a000
   10eb4:	ldr	pc, [ip, #380]!	; 0x17c

00010eb8 <memcpy@plt>:
   10eb8:	add	ip, pc, #0, 12
   10ebc:	add	ip, ip, #106496	; 0x1a000
   10ec0:	ldr	pc, [ip, #372]!	; 0x174

00010ec4 <__strtoull_internal@plt>:
   10ec4:	add	ip, pc, #0, 12
   10ec8:	add	ip, ip, #106496	; 0x1a000
   10ecc:	ldr	pc, [ip, #364]!	; 0x16c

00010ed0 <mbsinit@plt>:
   10ed0:	add	ip, pc, #0, 12
   10ed4:	add	ip, ip, #106496	; 0x1a000
   10ed8:	ldr	pc, [ip, #356]!	; 0x164

00010edc <memcmp@plt>:
   10edc:	add	ip, pc, #0, 12
   10ee0:	add	ip, ip, #106496	; 0x1a000
   10ee4:	ldr	pc, [ip, #348]!	; 0x15c

00010ee8 <fputc_unlocked@plt>:
   10ee8:	add	ip, pc, #0, 12
   10eec:	add	ip, ip, #106496	; 0x1a000
   10ef0:	ldr	pc, [ip, #340]!	; 0x154

00010ef4 <dcgettext@plt>:
   10ef4:	add	ip, pc, #0, 12
   10ef8:	add	ip, ip, #106496	; 0x1a000
   10efc:	ldr	pc, [ip, #332]!	; 0x14c

00010f00 <realloc@plt>:
   10f00:	add	ip, pc, #0, 12
   10f04:	add	ip, ip, #106496	; 0x1a000
   10f08:	ldr	pc, [ip, #324]!	; 0x144

00010f0c <textdomain@plt>:
   10f0c:	add	ip, pc, #0, 12
   10f10:	add	ip, ip, #106496	; 0x1a000
   10f14:	ldr	pc, [ip, #316]!	; 0x13c

00010f18 <iswprint@plt>:
   10f18:	add	ip, pc, #0, 12
   10f1c:	add	ip, ip, #106496	; 0x1a000
   10f20:	ldr	pc, [ip, #308]!	; 0x134

00010f24 <__memcpy_chk@plt>:
   10f24:	add	ip, pc, #0, 12
   10f28:	add	ip, ip, #106496	; 0x1a000
   10f2c:	ldr	pc, [ip, #300]!	; 0x12c

00010f30 <fwrite@plt>:
   10f30:	add	ip, pc, #0, 12
   10f34:	add	ip, ip, #106496	; 0x1a000
   10f38:	ldr	pc, [ip, #292]!	; 0x124

00010f3c <lseek64@plt>:
   10f3c:	add	ip, pc, #0, 12
   10f40:	add	ip, ip, #106496	; 0x1a000
   10f44:	ldr	pc, [ip, #284]!	; 0x11c

00010f48 <__ctype_get_mb_cur_max@plt>:
   10f48:	add	ip, pc, #0, 12
   10f4c:	add	ip, ip, #106496	; 0x1a000
   10f50:	ldr	pc, [ip, #276]!	; 0x114

00010f54 <__fpending@plt>:
   10f54:	add	ip, pc, #0, 12
   10f58:	add	ip, ip, #106496	; 0x1a000
   10f5c:	ldr	pc, [ip, #268]!	; 0x10c

00010f60 <mbrtowc@plt>:
   10f60:	add	ip, pc, #0, 12
   10f64:	add	ip, ip, #106496	; 0x1a000
   10f68:	ldr	pc, [ip, #260]!	; 0x104

00010f6c <error@plt>:
   10f6c:	add	ip, pc, #0, 12
   10f70:	add	ip, ip, #106496	; 0x1a000
   10f74:	ldr	pc, [ip, #252]!	; 0xfc

00010f78 <getenv@plt>:
   10f78:	add	ip, pc, #0, 12
   10f7c:	add	ip, ip, #106496	; 0x1a000
   10f80:	ldr	pc, [ip, #244]!	; 0xf4

00010f84 <malloc@plt>:
   10f84:	add	ip, pc, #0, 12
   10f88:	add	ip, ip, #106496	; 0x1a000
   10f8c:	ldr	pc, [ip, #236]!	; 0xec

00010f90 <__libc_start_main@plt>:
   10f90:	add	ip, pc, #0, 12
   10f94:	add	ip, ip, #106496	; 0x1a000
   10f98:	ldr	pc, [ip, #228]!	; 0xe4

00010f9c <__freading@plt>:
   10f9c:	add	ip, pc, #0, 12
   10fa0:	add	ip, ip, #106496	; 0x1a000
   10fa4:	ldr	pc, [ip, #220]!	; 0xdc

00010fa8 <__gmon_start__@plt>:
   10fa8:	add	ip, pc, #0, 12
   10fac:	add	ip, ip, #106496	; 0x1a000
   10fb0:	ldr	pc, [ip, #212]!	; 0xd4

00010fb4 <getopt_long@plt>:
   10fb4:	add	ip, pc, #0, 12
   10fb8:	add	ip, ip, #106496	; 0x1a000
   10fbc:	ldr	pc, [ip, #204]!	; 0xcc

00010fc0 <__ctype_b_loc@plt>:
   10fc0:	add	ip, pc, #0, 12
   10fc4:	add	ip, ip, #106496	; 0x1a000
   10fc8:	ldr	pc, [ip, #196]!	; 0xc4

00010fcc <exit@plt>:
   10fcc:	add	ip, pc, #0, 12
   10fd0:	add	ip, ip, #106496	; 0x1a000
   10fd4:	ldr	pc, [ip, #188]!	; 0xbc

00010fd8 <strlen@plt>:
   10fd8:	add	ip, pc, #0, 12
   10fdc:	add	ip, ip, #106496	; 0x1a000
   10fe0:	ldr	pc, [ip, #180]!	; 0xb4

00010fe4 <strchr@plt>:
   10fe4:	add	ip, pc, #0, 12
   10fe8:	add	ip, ip, #106496	; 0x1a000
   10fec:	ldr	pc, [ip, #172]!	; 0xac

00010ff0 <__errno_location@plt>:
   10ff0:	add	ip, pc, #0, 12
   10ff4:	add	ip, ip, #106496	; 0x1a000
   10ff8:	ldr	pc, [ip, #164]!	; 0xa4

00010ffc <__sprintf_chk@plt>:
   10ffc:	add	ip, pc, #0, 12
   11000:	add	ip, ip, #106496	; 0x1a000
   11004:	ldr	pc, [ip, #156]!	; 0x9c

00011008 <__cxa_atexit@plt>:
   11008:	add	ip, pc, #0, 12
   1100c:	add	ip, ip, #106496	; 0x1a000
   11010:	ldr	pc, [ip, #148]!	; 0x94

00011014 <setvbuf@plt>:
   11014:	add	ip, pc, #0, 12
   11018:	add	ip, ip, #106496	; 0x1a000
   1101c:	ldr	pc, [ip, #140]!	; 0x8c

00011020 <memset@plt>:
   11020:	add	ip, pc, #0, 12
   11024:	add	ip, ip, #106496	; 0x1a000
   11028:	ldr	pc, [ip, #132]!	; 0x84

0001102c <__printf_chk@plt>:
   1102c:	add	ip, pc, #0, 12
   11030:	add	ip, ip, #106496	; 0x1a000
   11034:	ldr	pc, [ip, #124]!	; 0x7c

00011038 <fileno@plt>:
   11038:	add	ip, pc, #0, 12
   1103c:	add	ip, ip, #106496	; 0x1a000
   11040:	ldr	pc, [ip, #116]!	; 0x74

00011044 <__fprintf_chk@plt>:
   11044:	add	ip, pc, #0, 12
   11048:	add	ip, ip, #106496	; 0x1a000
   1104c:	ldr	pc, [ip, #108]!	; 0x6c

00011050 <fclose@plt>:
   11050:	add	ip, pc, #0, 12
   11054:	add	ip, ip, #106496	; 0x1a000
   11058:	ldr	pc, [ip, #100]!	; 0x64

0001105c <fseeko64@plt>:
   1105c:	add	ip, pc, #0, 12
   11060:	add	ip, ip, #106496	; 0x1a000
   11064:	ldr	pc, [ip, #92]!	; 0x5c

00011068 <fcntl64@plt>:
   11068:	add	ip, pc, #0, 12
   1106c:	add	ip, ip, #106496	; 0x1a000
   11070:	ldr	pc, [ip, #84]!	; 0x54

00011074 <__overflow@plt>:
   11074:	add	ip, pc, #0, 12
   11078:	add	ip, ip, #106496	; 0x1a000
   1107c:	ldr	pc, [ip, #76]!	; 0x4c

00011080 <setlocale@plt>:
   11080:	add	ip, pc, #0, 12
   11084:	add	ip, ip, #106496	; 0x1a000
   11088:	ldr	pc, [ip, #68]!	; 0x44

0001108c <strrchr@plt>:
   1108c:	add	ip, pc, #0, 12
   11090:	add	ip, ip, #106496	; 0x1a000
   11094:	ldr	pc, [ip, #60]!	; 0x3c

00011098 <nl_langinfo@plt>:
   11098:	add	ip, pc, #0, 12
   1109c:	add	ip, ip, #106496	; 0x1a000
   110a0:	ldr	pc, [ip, #52]!	; 0x34

000110a4 <localeconv@plt>:
   110a4:	add	ip, pc, #0, 12
   110a8:	add	ip, ip, #106496	; 0x1a000
   110ac:	ldr	pc, [ip, #44]!	; 0x2c

000110b0 <clearerr_unlocked@plt>:
   110b0:	add	ip, pc, #0, 12
   110b4:	add	ip, ip, #106496	; 0x1a000
   110b8:	ldr	pc, [ip, #36]!	; 0x24

000110bc <fopen64@plt>:
   110bc:	add	ip, pc, #0, 12
   110c0:	add	ip, ip, #106496	; 0x1a000
   110c4:	ldr	pc, [ip, #28]!

000110c8 <bindtextdomain@plt>:
   110c8:	add	ip, pc, #0, 12
   110cc:	add	ip, ip, #106496	; 0x1a000
   110d0:	ldr	pc, [ip, #20]!

000110d4 <fread_unlocked@plt>:
   110d4:	add	ip, pc, #0, 12
   110d8:	add	ip, ip, #106496	; 0x1a000
   110dc:	ldr	pc, [ip, #12]!

000110e0 <strncmp@plt>:
   110e0:	add	ip, pc, #0, 12
   110e4:	add	ip, ip, #106496	; 0x1a000
   110e8:	ldr	pc, [ip, #4]!

000110ec <abort@plt>:
   110ec:	add	ip, pc, #0, 12
   110f0:	add	ip, ip, #102400	; 0x19000
   110f4:	ldr	pc, [ip, #4092]!	; 0xffc

000110f8 <close@plt>:
   110f8:	add	ip, pc, #0, 12
   110fc:	add	ip, ip, #102400	; 0x19000
   11100:	ldr	pc, [ip, #4084]!	; 0xff4

00011104 <__assert_fail@plt>:
   11104:	add	ip, pc, #0, 12
   11108:	add	ip, ip, #102400	; 0x19000
   1110c:	ldr	pc, [ip, #4076]!	; 0xfec

Disassembly of section .text:

00011110 <.text>:
   11110:	strd	r4, [sp, #-36]!	; 0xffffffdc
   11114:	mov	r5, r0
   11118:	mov	r4, r1
   1111c:	ldr	r0, [r1]
   11120:	strd	r6, [sp, #8]
   11124:	movw	r7, #40236	; 0x9d2c
   11128:	movt	r7, #1
   1112c:	strd	r8, [sp, #16]
   11130:	movw	r8, #45428	; 0xb174
   11134:	movt	r8, #2
   11138:	strd	sl, [sp, #24]
   1113c:	movw	r9, #45436	; 0xb17c
   11140:	movt	r9, #2
   11144:	str	lr, [sp, #32]
   11148:	sub	sp, sp, #60	; 0x3c
   1114c:	bl	13350 <__assert_fail@plt+0x224c>
   11150:	movw	r1, #39592	; 0x9aa8
   11154:	movt	r1, #1
   11158:	ldr	sl, [pc, #940]	; 1150c <__assert_fail@plt+0x408>
   1115c:	mov	r0, #6
   11160:	bl	11080 <setlocale@plt>
   11164:	movw	r1, #40176	; 0x9cf0
   11168:	movt	r1, #1
   1116c:	movw	r0, #40008	; 0x9c48
   11170:	movt	r0, #1
   11174:	bl	110c8 <bindtextdomain@plt>
   11178:	movw	r0, #40008	; 0x9c48
   1117c:	movt	r0, #1
   11180:	bl	10f0c <textdomain@plt>
   11184:	movw	r0, #7744	; 0x1e40
   11188:	movt	r0, #1
   1118c:	bl	1999c <__assert_fail@plt+0x8898>
   11190:	mov	r3, #0
   11194:	mov	r2, #1
   11198:	ldr	r0, [r8]
   1119c:	mov	r1, r3
   111a0:	bl	11014 <setvbuf@plt>
   111a4:	mov	r6, #0
   111a8:	mov	r3, sl
   111ac:	mov	r2, r7
   111b0:	mov	r1, r4
   111b4:	mov	r0, r5
   111b8:	str	r6, [sp]
   111bc:	bl	10fb4 <getopt_long@plt>
   111c0:	cmn	r0, #1
   111c4:	beq	11244 <__assert_fail@plt+0x140>
   111c8:	cmn	r0, #2
   111cc:	beq	11504 <__assert_fail@plt+0x400>
   111d0:	ble	111e4 <__assert_fail@plt+0xe0>
   111d4:	cmp	r0, #114	; 0x72
   111d8:	bne	11230 <__assert_fail@plt+0x12c>
   111dc:	str	r6, [r9]
   111e0:	b	111a4 <__assert_fail@plt+0xa0>
   111e4:	cmn	r0, #3
   111e8:	bne	114fc <__assert_fail@plt+0x3f8>
   111ec:	movw	r2, #40200	; 0x9d08
   111f0:	movt	r2, #1
   111f4:	str	r6, [sp, #8]
   111f8:	movw	r1, #40216	; 0x9d18
   111fc:	movt	r1, #1
   11200:	ldr	r0, [r8]
   11204:	movw	r3, #45320	; 0xb108
   11208:	movt	r3, #2
   1120c:	stm	sp, {r1, r2}
   11210:	movw	r2, #40004	; 0x9c44
   11214:	movt	r2, #1
   11218:	movw	r1, #39516	; 0x9a5c
   1121c:	movt	r1, #1
   11220:	ldr	r3, [r3]
   11224:	bl	17390 <__assert_fail@plt+0x628c>
   11228:	mov	r0, r6
   1122c:	bl	10fcc <exit@plt>
   11230:	cmp	r0, #115	; 0x73
   11234:	bne	114fc <__assert_fail@plt+0x3f8>
   11238:	mov	r3, #1
   1123c:	str	r3, [r9]
   11240:	b	111a4 <__assert_fail@plt+0xa0>
   11244:	movw	r3, #45408	; 0xb160
   11248:	movt	r3, #2
   1124c:	add	r2, r4, r5, lsl #2
   11250:	mov	r1, r3
   11254:	ldr	r3, [r3]
   11258:	str	r2, [sp, #16]
   1125c:	cmp	r3, r5
   11260:	bne	11278 <__assert_fail@plt+0x174>
   11264:	add	r2, r2, #4
   11268:	str	r2, [sp, #16]
   1126c:	movw	r2, #40240	; 0x9d30
   11270:	movt	r2, #1
   11274:	str	r2, [r4, r5, lsl #2]
   11278:	add	r4, r4, r3, lsl #2
   1127c:	ldr	r3, [sp, #16]
   11280:	movw	r8, #45436	; 0xb17c
   11284:	movt	r8, #2
   11288:	cmp	r3, r4
   1128c:	bls	1144c <__assert_fail@plt+0x348>
   11290:	movw	r3, #40240	; 0x9d30
   11294:	movt	r3, #1
   11298:	mov	fp, r1
   1129c:	str	r3, [sp, #20]
   112a0:	movw	r3, #40424	; 0x9de8
   112a4:	movt	r3, #1
   112a8:	str	r5, [sp, #24]
   112ac:	str	r3, [sp, #36]	; 0x24
   112b0:	movw	r3, #40232	; 0x9d28
   112b4:	movt	r3, #1
   112b8:	str	r3, [sp, #32]
   112bc:	mov	r3, #1
   112c0:	str	r3, [sp, #28]
   112c4:	b	11380 <__assert_fail@plt+0x27c>
   112c8:	movw	r3, #45424	; 0xb170
   112cc:	movt	r3, #2
   112d0:	ldr	r9, [r3]
   112d4:	mov	r3, #1
   112d8:	mov	r1, #2
   112dc:	movw	r5, #39380	; 0x99d4
   112e0:	movt	r5, #1
   112e4:	strb	r3, [r8, #4]
   112e8:	add	r7, sp, #40	; 0x28
   112ec:	mov	r0, r9
   112f0:	bl	11f30 <__assert_fail@plt+0xe2c>
   112f4:	ldr	r3, [r8]
   112f8:	mov	r0, r9
   112fc:	mov	r1, r7
   11300:	add	r2, sp, #48	; 0x30
   11304:	add	r3, r5, r3, lsl #2
   11308:	ldr	r3, [r3, #120]	; 0x78
   1130c:	blx	r3
   11310:	subs	sl, r0, #0
   11314:	beq	11320 <__assert_fail@plt+0x21c>
   11318:	bl	10ff0 <__errno_location@plt>
   1131c:	ldr	sl, [r0]
   11320:	mov	r0, r9
   11324:	bl	110b0 <clearerr_unlocked@plt>
   11328:	cmp	sl, #0
   1132c:	bne	11420 <__assert_fail@plt+0x31c>
   11330:	ldr	ip, [r8]
   11334:	mov	r2, r7
   11338:	mov	r0, r6
   1133c:	mov	lr, #10
   11340:	mov	r3, #0
   11344:	ldr	r1, [fp]
   11348:	str	lr, [sp]
   1134c:	ldrd	r6, [sp, #48]	; 0x30
   11350:	add	r5, r5, ip, lsl #2
   11354:	ldr	ip, [sp, #24]
   11358:	ldr	r5, [r5, #128]	; 0x80
   1135c:	strd	r6, [sp, #8]
   11360:	subs	r1, r1, ip
   11364:	movne	r1, #1
   11368:	str	r1, [sp, #4]
   1136c:	mov	r1, r3
   11370:	blx	r5
   11374:	ldr	r3, [sp, #16]
   11378:	cmp	r3, r4
   1137c:	bls	11454 <__assert_fail@plt+0x350>
   11380:	ldr	r6, [r4], #4
   11384:	ldr	r1, [sp, #20]
   11388:	mov	r0, r6
   1138c:	bl	10e70 <strcmp@plt>
   11390:	cmp	r0, #0
   11394:	beq	112c8 <__assert_fail@plt+0x1c4>
   11398:	mov	r0, r6
   1139c:	ldr	r1, [sp, #32]
   113a0:	bl	12094 <__assert_fail@plt+0xf90>
   113a4:	subs	r9, r0, #0
   113a8:	beq	11484 <__assert_fail@plt+0x380>
   113ac:	mov	r1, #2
   113b0:	movw	r5, #39380	; 0x99d4
   113b4:	movt	r5, #1
   113b8:	add	r7, sp, #40	; 0x28
   113bc:	bl	11f30 <__assert_fail@plt+0xe2c>
   113c0:	ldr	r3, [r8]
   113c4:	mov	r1, r7
   113c8:	add	r2, sp, #48	; 0x30
   113cc:	mov	r0, r9
   113d0:	add	r3, r5, r3, lsl #2
   113d4:	ldr	r3, [r3, #120]	; 0x78
   113d8:	blx	r3
   113dc:	cmp	r0, #0
   113e0:	bne	11400 <__assert_fail@plt+0x2fc>
   113e4:	mov	r0, r9
   113e8:	bl	11f80 <__assert_fail@plt+0xe7c>
   113ec:	cmp	r0, #0
   113f0:	beq	11330 <__assert_fail@plt+0x22c>
   113f4:	bl	10ff0 <__errno_location@plt>
   113f8:	ldr	sl, [r0]
   113fc:	b	11328 <__assert_fail@plt+0x224>
   11400:	bl	10ff0 <__errno_location@plt>
   11404:	ldr	sl, [r0]
   11408:	mov	r0, r9
   1140c:	bl	11f80 <__assert_fail@plt+0xe7c>
   11410:	cmp	r0, #0
   11414:	beq	11328 <__assert_fail@plt+0x224>
   11418:	cmp	sl, #0
   1141c:	beq	113f4 <__assert_fail@plt+0x2f0>
   11420:	mov	r0, #0
   11424:	mov	r2, r6
   11428:	mov	r1, #3
   1142c:	str	r0, [sp, #28]
   11430:	bl	16514 <__assert_fail@plt+0x5410>
   11434:	mov	r3, r0
   11438:	mov	r1, sl
   1143c:	ldr	r2, [sp, #36]	; 0x24
   11440:	mov	r0, #0
   11444:	bl	10f6c <error@plt>
   11448:	b	11374 <__assert_fail@plt+0x270>
   1144c:	mov	r3, #1
   11450:	str	r3, [sp, #28]
   11454:	ldrb	r3, [r8, #4]
   11458:	cmp	r3, #0
   1145c:	bne	114b8 <__assert_fail@plt+0x3b4>
   11460:	ldr	r3, [sp, #28]
   11464:	eor	r0, r3, #1
   11468:	add	sp, sp, #60	; 0x3c
   1146c:	ldrd	r4, [sp]
   11470:	ldrd	r6, [sp, #8]
   11474:	ldrd	r8, [sp, #16]
   11478:	ldrd	sl, [sp, #24]
   1147c:	add	sp, sp, #32
   11480:	pop	{pc}		; (ldr pc, [sp], #4)
   11484:	bl	10ff0 <__errno_location@plt>
   11488:	ldr	r5, [r0]
   1148c:	mov	r2, r6
   11490:	mov	r1, #3
   11494:	mov	r0, r9
   11498:	str	r9, [sp, #28]
   1149c:	bl	16514 <__assert_fail@plt+0x5410>
   114a0:	mov	r3, r0
   114a4:	mov	r0, r9
   114a8:	ldr	r2, [sp, #36]	; 0x24
   114ac:	mov	r1, r5
   114b0:	bl	10f6c <error@plt>
   114b4:	b	11374 <__assert_fail@plt+0x270>
   114b8:	movw	r3, #45424	; 0xb170
   114bc:	movt	r3, #2
   114c0:	ldr	r0, [r3]
   114c4:	bl	11f80 <__assert_fail@plt+0xe7c>
   114c8:	cmn	r0, #1
   114cc:	bne	11460 <__assert_fail@plt+0x35c>
   114d0:	bl	10ff0 <__errno_location@plt>
   114d4:	ldr	r4, [r0]
   114d8:	mov	r2, #5
   114dc:	movw	r1, #40244	; 0x9d34
   114e0:	movt	r1, #1
   114e4:	mov	r0, #0
   114e8:	bl	10ef4 <dcgettext@plt>
   114ec:	mov	r2, r0
   114f0:	mov	r0, #1
   114f4:	mov	r1, r4
   114f8:	bl	10f6c <error@plt>
   114fc:	mov	r0, #1
   11500:	bl	11ac0 <__assert_fail@plt+0x9bc>
   11504:	mov	r0, r6
   11508:	bl	11ac0 <__assert_fail@plt+0x9bc>
   1150c:	andeq	r9, r1, ip, lsl #20
   11510:	mov	fp, #0
   11514:	mov	lr, #0
   11518:	pop	{r1}		; (ldr r1, [sp], #4)
   1151c:	mov	r2, sp
   11520:	push	{r2}		; (str r2, [sp, #-4]!)
   11524:	push	{r0}		; (str r0, [sp, #-4]!)
   11528:	ldr	ip, [pc, #16]	; 11540 <__assert_fail@plt+0x43c>
   1152c:	push	{ip}		; (str ip, [sp, #-4]!)
   11530:	ldr	r0, [pc, #12]	; 11544 <__assert_fail@plt+0x440>
   11534:	ldr	r3, [pc, #12]	; 11548 <__assert_fail@plt+0x444>
   11538:	bl	10f90 <__libc_start_main@plt>
   1153c:	bl	110ec <abort@plt>
   11540:	muleq	r1, r8, r9
   11544:	andeq	r1, r1, r0, lsl r1
   11548:	andeq	r9, r1, r8, lsr r9
   1154c:	ldr	r3, [pc, #20]	; 11568 <__assert_fail@plt+0x464>
   11550:	ldr	r2, [pc, #20]	; 1156c <__assert_fail@plt+0x468>
   11554:	add	r3, pc, r3
   11558:	ldr	r2, [r3, r2]
   1155c:	cmp	r2, #0
   11560:	bxeq	lr
   11564:	b	10fa8 <__gmon_start__@plt>
   11568:	andeq	r9, r1, r4, lsr #21
   1156c:	strdeq	r0, [r0], -ip
   11570:	ldr	r0, [pc, #24]	; 11590 <__assert_fail@plt+0x48c>
   11574:	ldr	r3, [pc, #24]	; 11594 <__assert_fail@plt+0x490>
   11578:	cmp	r3, r0
   1157c:	bxeq	lr
   11580:	ldr	r3, [pc, #16]	; 11598 <__assert_fail@plt+0x494>
   11584:	cmp	r3, #0
   11588:	bxeq	lr
   1158c:	bx	r3
   11590:	andeq	fp, r2, r4, asr r1
   11594:	andeq	fp, r2, r4, asr r1
   11598:	andeq	r0, r0, r0
   1159c:	ldr	r0, [pc, #36]	; 115c8 <__assert_fail@plt+0x4c4>
   115a0:	ldr	r1, [pc, #36]	; 115cc <__assert_fail@plt+0x4c8>
   115a4:	sub	r1, r1, r0
   115a8:	asr	r1, r1, #2
   115ac:	add	r1, r1, r1, lsr #31
   115b0:	asrs	r1, r1, #1
   115b4:	bxeq	lr
   115b8:	ldr	r3, [pc, #16]	; 115d0 <__assert_fail@plt+0x4cc>
   115bc:	cmp	r3, #0
   115c0:	bxeq	lr
   115c4:	bx	r3
   115c8:	andeq	fp, r2, r4, asr r1
   115cc:	andeq	fp, r2, r4, asr r1
   115d0:	andeq	r0, r0, r0
   115d4:	push	{r4, lr}
   115d8:	ldr	r4, [pc, #24]	; 115f8 <__assert_fail@plt+0x4f4>
   115dc:	ldrb	r3, [r4]
   115e0:	cmp	r3, #0
   115e4:	popne	{r4, pc}
   115e8:	bl	11570 <__assert_fail@plt+0x46c>
   115ec:	mov	r3, #1
   115f0:	strb	r3, [r4]
   115f4:	pop	{r4, pc}
   115f8:	andeq	fp, r2, r8, ror r1
   115fc:	b	1159c <__assert_fail@plt+0x498>
   11600:	strd	r4, [sp, #-36]!	; 0xffffffdc
   11604:	strd	r6, [sp, #8]
   11608:	mov	r7, r0
   1160c:	mov	r0, #32768	; 0x8000
   11610:	strd	r8, [sp, #16]
   11614:	mov	r9, r2
   11618:	strd	sl, [sp, #24]
   1161c:	str	lr, [sp, #32]
   11620:	sub	sp, sp, #12
   11624:	str	r1, [sp, #4]
   11628:	bl	1896c <__assert_fail@plt+0x7868>
   1162c:	subs	r8, r0, #0
   11630:	beq	11784 <__assert_fail@plt+0x680>
   11634:	add	r6, r8, #32512	; 0x7f00
   11638:	mov	r4, #0
   1163c:	add	r6, r6, #255	; 0xff
   11640:	mov	sl, #0
   11644:	mov	fp, #0
   11648:	mov	r5, #0
   1164c:	b	11664 <__assert_fail@plt+0x560>
   11650:	cmp	r0, #0
   11654:	ldr	r3, [r7]
   11658:	beq	11710 <__assert_fail@plt+0x60c>
   1165c:	tst	r3, #16
   11660:	bne	1171c <__assert_fail@plt+0x618>
   11664:	rsb	r2, r5, #32768	; 0x8000
   11668:	add	r0, r8, r5
   1166c:	mov	r3, r7
   11670:	mov	r1, #1
   11674:	bl	110d4 <fread_unlocked@plt>
   11678:	add	r5, r5, r0
   1167c:	cmp	r5, #32768	; 0x8000
   11680:	bne	11650 <__assert_fail@plt+0x54c>
   11684:	sub	r2, r8, #1
   11688:	lsl	r3, r4, #15
   1168c:	ldrb	r1, [r2, #1]!
   11690:	uxth	r3, r3
   11694:	add	r3, r3, r4, lsr #1
   11698:	cmp	r6, r2
   1169c:	add	r3, r3, r1
   116a0:	uxth	r4, r3
   116a4:	bne	11688 <__assert_fail@plt+0x584>
   116a8:	mov	r2, #32768	; 0x8000
   116ac:	mov	r3, #0
   116b0:	adds	r0, sl, r2
   116b4:	mov	r2, #0
   116b8:	adcs	r1, fp, r3
   116bc:	mov	r3, #0
   116c0:	movcs	r2, #1
   116c4:	movcs	r3, #0
   116c8:	orrs	r3, r2, r3
   116cc:	mov	sl, r0
   116d0:	mov	fp, r1
   116d4:	beq	11648 <__assert_fail@plt+0x544>
   116d8:	bl	10ff0 <__errno_location@plt>
   116dc:	mvn	r4, #0
   116e0:	mov	r3, #75	; 0x4b
   116e4:	str	r3, [r0]
   116e8:	mov	r0, r8
   116ec:	bl	12140 <__assert_fail@plt+0x103c>
   116f0:	mov	r0, r4
   116f4:	add	sp, sp, #12
   116f8:	ldrd	r4, [sp]
   116fc:	ldrd	r6, [sp, #8]
   11700:	ldrd	r8, [sp, #16]
   11704:	ldrd	sl, [sp, #24]
   11708:	add	sp, sp, #32
   1170c:	pop	{pc}		; (ldr pc, [sp], #4)
   11710:	tst	r3, #32
   11714:	mvnne	r4, #0
   11718:	bne	116e8 <__assert_fail@plt+0x5e4>
   1171c:	mov	r3, #0
   11720:	adds	r0, sl, r5
   11724:	adcs	r1, fp, r3
   11728:	mov	r2, #0
   1172c:	mov	r3, #0
   11730:	movcs	r2, #1
   11734:	movcs	r3, #0
   11738:	cmp	r5, #0
   1173c:	subne	lr, r8, #1
   11740:	addne	r5, lr, r5
   11744:	beq	11770 <__assert_fail@plt+0x66c>
   11748:	lsl	ip, r4, #15
   1174c:	ldrb	r6, [lr, #1]!
   11750:	uxth	ip, ip
   11754:	add	ip, ip, r4, lsr #1
   11758:	cmp	r5, lr
   1175c:	add	ip, ip, r6
   11760:	uxth	r4, ip
   11764:	bne	11748 <__assert_fail@plt+0x644>
   11768:	orrs	r3, r2, r3
   1176c:	bne	116d8 <__assert_fail@plt+0x5d4>
   11770:	ldr	r3, [sp, #4]
   11774:	str	r4, [r3]
   11778:	mov	r4, #0
   1177c:	strd	r0, [r9]
   11780:	b	116e8 <__assert_fail@plt+0x5e4>
   11784:	mvn	r4, #0
   11788:	b	116f0 <__assert_fail@plt+0x5ec>
   1178c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   11790:	strd	r6, [sp, #8]
   11794:	mov	r7, r0
   11798:	mov	r0, #32768	; 0x8000
   1179c:	strd	r8, [sp, #16]
   117a0:	mov	r9, r2
   117a4:	strd	sl, [sp, #24]
   117a8:	str	lr, [sp, #32]
   117ac:	sub	sp, sp, #12
   117b0:	str	r1, [sp, #4]
   117b4:	bl	1896c <__assert_fail@plt+0x7868>
   117b8:	subs	r8, r0, #0
   117bc:	beq	11900 <__assert_fail@plt+0x7fc>
   117c0:	add	r6, r8, #32512	; 0x7f00
   117c4:	mov	r4, #0
   117c8:	add	r6, r6, #255	; 0xff
   117cc:	mov	sl, #0
   117d0:	mov	fp, #0
   117d4:	mov	r5, #0
   117d8:	b	117f0 <__assert_fail@plt+0x6ec>
   117dc:	cmp	r0, #0
   117e0:	ldr	r3, [r7]
   117e4:	beq	1188c <__assert_fail@plt+0x788>
   117e8:	tst	r3, #16
   117ec:	bne	11898 <__assert_fail@plt+0x794>
   117f0:	rsb	r2, r5, #32768	; 0x8000
   117f4:	add	r0, r8, r5
   117f8:	mov	r3, r7
   117fc:	mov	r1, #1
   11800:	bl	110d4 <fread_unlocked@plt>
   11804:	add	r5, r5, r0
   11808:	cmp	r5, #32768	; 0x8000
   1180c:	bne	117dc <__assert_fail@plt+0x6d8>
   11810:	sub	r3, r8, #1
   11814:	ldrb	r2, [r3, #1]!
   11818:	cmp	r6, r3
   1181c:	add	r4, r4, r2
   11820:	bne	11814 <__assert_fail@plt+0x710>
   11824:	mov	r2, #32768	; 0x8000
   11828:	mov	r3, #0
   1182c:	adds	r0, sl, r2
   11830:	mov	r2, #0
   11834:	adcs	r1, fp, r3
   11838:	mov	r3, #0
   1183c:	movcs	r2, #1
   11840:	movcs	r3, #0
   11844:	orrs	r3, r2, r3
   11848:	mov	sl, r0
   1184c:	mov	fp, r1
   11850:	beq	117d4 <__assert_fail@plt+0x6d0>
   11854:	bl	10ff0 <__errno_location@plt>
   11858:	mvn	r5, #0
   1185c:	mov	r3, #75	; 0x4b
   11860:	str	r3, [r0]
   11864:	mov	r0, r8
   11868:	bl	12140 <__assert_fail@plt+0x103c>
   1186c:	mov	r0, r5
   11870:	add	sp, sp, #12
   11874:	ldrd	r4, [sp]
   11878:	ldrd	r6, [sp, #8]
   1187c:	ldrd	r8, [sp, #16]
   11880:	ldrd	sl, [sp, #24]
   11884:	add	sp, sp, #32
   11888:	pop	{pc}		; (ldr pc, [sp], #4)
   1188c:	tst	r3, #32
   11890:	mvnne	r5, #0
   11894:	bne	11864 <__assert_fail@plt+0x760>
   11898:	mov	r1, #0
   1189c:	adds	r2, sl, r5
   118a0:	adcs	r3, fp, r1
   118a4:	mov	r0, #0
   118a8:	mov	r1, #0
   118ac:	movcs	r0, #1
   118b0:	movcs	r1, #0
   118b4:	cmp	r5, #0
   118b8:	subne	ip, r8, #1
   118bc:	addne	r5, ip, r5
   118c0:	beq	118dc <__assert_fail@plt+0x7d8>
   118c4:	ldrb	lr, [ip, #1]!
   118c8:	cmp	r5, ip
   118cc:	add	r4, r4, lr
   118d0:	bne	118c4 <__assert_fail@plt+0x7c0>
   118d4:	orrs	r1, r0, r1
   118d8:	bne	11854 <__assert_fail@plt+0x750>
   118dc:	lsr	r1, r4, #16
   118e0:	mov	r5, #0
   118e4:	uxtah	r4, r1, r4
   118e8:	asr	r1, r4, #16
   118ec:	uxtah	r4, r1, r4
   118f0:	ldr	r1, [sp, #4]
   118f4:	str	r4, [r1]
   118f8:	strd	r2, [r9]
   118fc:	b	11864 <__assert_fail@plt+0x760>
   11900:	mvn	r5, #0
   11904:	b	1186c <__assert_fail@plt+0x768>
   11908:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1190c:	mov	r3, #0
   11910:	strd	r6, [sp, #8]
   11914:	mov	r7, r0
   11918:	strd	r8, [sp, #16]
   1191c:	mov	r8, #1024	; 0x400
   11920:	mov	r9, #0
   11924:	strd	sl, [sp, #24]
   11928:	mov	sl, #1
   1192c:	mov	fp, #0
   11930:	str	lr, [sp, #32]
   11934:	sub	sp, sp, #676	; 0x2a4
   11938:	ldr	r6, [r2]
   1193c:	add	r1, sp, #720	; 0x2d0
   11940:	add	r2, sp, #20
   11944:	strd	sl, [sp]
   11948:	ldrb	r5, [sp, #716]	; 0x2cc
   1194c:	strd	r8, [sp, #8]
   11950:	ldrd	r0, [r1]
   11954:	ldrb	r4, [sp, #712]	; 0x2c8
   11958:	bl	12270 <__assert_fail@plt+0x116c>
   1195c:	mov	r3, r0
   11960:	mov	r2, r6
   11964:	movw	r1, #39360	; 0x99c0
   11968:	movt	r1, #1
   1196c:	mov	r0, #1
   11970:	bl	1102c <__printf_chk@plt>
   11974:	cmp	r5, #0
   11978:	bne	119c0 <__assert_fail@plt+0x8bc>
   1197c:	movw	r3, #45428	; 0xb174
   11980:	movt	r3, #2
   11984:	ldr	r0, [r3]
   11988:	ldr	r3, [r0, #20]
   1198c:	ldr	r2, [r0, #24]
   11990:	cmp	r3, r2
   11994:	addcc	r2, r3, #1
   11998:	strcc	r2, [r0, #20]
   1199c:	strbcc	r4, [r3]
   119a0:	bcs	119d8 <__assert_fail@plt+0x8d4>
   119a4:	add	sp, sp, #676	; 0x2a4
   119a8:	ldrd	r4, [sp]
   119ac:	ldrd	r6, [sp, #8]
   119b0:	ldrd	r8, [sp, #16]
   119b4:	ldrd	sl, [sp, #24]
   119b8:	add	sp, sp, #32
   119bc:	pop	{pc}		; (ldr pc, [sp], #4)
   119c0:	mov	r2, r7
   119c4:	movw	r1, #41812	; 0xa354
   119c8:	movt	r1, #1
   119cc:	mov	r0, #1
   119d0:	bl	1102c <__printf_chk@plt>
   119d4:	b	1197c <__assert_fail@plt+0x878>
   119d8:	mov	r1, r4
   119dc:	bl	11074 <__overflow@plt>
   119e0:	b	119a4 <__assert_fail@plt+0x8a0>
   119e4:	strd	r4, [sp, #-36]!	; 0xffffffdc
   119e8:	mov	r3, #0
   119ec:	strd	r6, [sp, #8]
   119f0:	mov	r7, r0
   119f4:	strd	r8, [sp, #16]
   119f8:	mov	r8, #512	; 0x200
   119fc:	mov	r9, #0
   11a00:	strd	sl, [sp, #24]
   11a04:	mov	sl, #1
   11a08:	mov	fp, #0
   11a0c:	str	lr, [sp, #32]
   11a10:	sub	sp, sp, #676	; 0x2a4
   11a14:	ldr	r6, [r2]
   11a18:	add	r1, sp, #720	; 0x2d0
   11a1c:	add	r2, sp, #20
   11a20:	strd	sl, [sp]
   11a24:	ldrb	r5, [sp, #716]	; 0x2cc
   11a28:	strd	r8, [sp, #8]
   11a2c:	ldrd	r0, [r1]
   11a30:	ldrb	r4, [sp, #712]	; 0x2c8
   11a34:	bl	12270 <__assert_fail@plt+0x116c>
   11a38:	mov	r3, r0
   11a3c:	mov	r2, r6
   11a40:	movw	r1, #39372	; 0x99cc
   11a44:	movt	r1, #1
   11a48:	mov	r0, #1
   11a4c:	bl	1102c <__printf_chk@plt>
   11a50:	cmp	r5, #0
   11a54:	bne	11a9c <__assert_fail@plt+0x998>
   11a58:	movw	r3, #45428	; 0xb174
   11a5c:	movt	r3, #2
   11a60:	ldr	r0, [r3]
   11a64:	ldr	r3, [r0, #20]
   11a68:	ldr	r2, [r0, #24]
   11a6c:	cmp	r3, r2
   11a70:	addcc	r2, r3, #1
   11a74:	strcc	r2, [r0, #20]
   11a78:	strbcc	r4, [r3]
   11a7c:	bcs	11ab4 <__assert_fail@plt+0x9b0>
   11a80:	add	sp, sp, #676	; 0x2a4
   11a84:	ldrd	r4, [sp]
   11a88:	ldrd	r6, [sp, #8]
   11a8c:	ldrd	r8, [sp, #16]
   11a90:	ldrd	sl, [sp, #24]
   11a94:	add	sp, sp, #32
   11a98:	pop	{pc}		; (ldr pc, [sp], #4)
   11a9c:	mov	r2, r7
   11aa0:	movw	r1, #41812	; 0xa354
   11aa4:	movt	r1, #1
   11aa8:	mov	r0, #1
   11aac:	bl	1102c <__printf_chk@plt>
   11ab0:	b	11a58 <__assert_fail@plt+0x954>
   11ab4:	mov	r1, r4
   11ab8:	bl	11074 <__overflow@plt>
   11abc:	b	11a80 <__assert_fail@plt+0x97c>
   11ac0:	subs	r6, r0, #0
   11ac4:	str	r7, [sp, #-8]!
   11ac8:	str	lr, [sp, #4]
   11acc:	sub	sp, sp, #56	; 0x38
   11ad0:	beq	11b18 <__assert_fail@plt+0xa14>
   11ad4:	movw	r3, #45416	; 0xb168
   11ad8:	movt	r3, #2
   11adc:	ldr	r4, [r3]
   11ae0:	mov	r2, #5
   11ae4:	movw	r1, #39520	; 0x9a60
   11ae8:	movt	r1, #1
   11aec:	mov	r0, #0
   11af0:	bl	10ef4 <dcgettext@plt>
   11af4:	movw	r3, #45452	; 0xb18c
   11af8:	movt	r3, #2
   11afc:	mov	r2, r0
   11b00:	mov	r1, #1
   11b04:	ldr	r3, [r3]
   11b08:	mov	r0, r4
   11b0c:	bl	11044 <__fprintf_chk@plt>
   11b10:	mov	r0, r6
   11b14:	bl	10fcc <exit@plt>
   11b18:	mov	r2, #5
   11b1c:	movw	r1, #39560	; 0x9a88
   11b20:	movt	r1, #1
   11b24:	movw	r7, #45428	; 0xb174
   11b28:	movt	r7, #2
   11b2c:	bl	10ef4 <dcgettext@plt>
   11b30:	movw	r3, #45452	; 0xb18c
   11b34:	movt	r3, #2
   11b38:	mov	r1, r0
   11b3c:	mov	r0, #1
   11b40:	ldr	r2, [r3]
   11b44:	bl	1102c <__printf_chk@plt>
   11b48:	mov	r2, #5
   11b4c:	movw	r1, #39596	; 0x9aac
   11b50:	movt	r1, #1
   11b54:	mov	r0, r6
   11b58:	bl	10ef4 <dcgettext@plt>
   11b5c:	mov	r1, r0
   11b60:	mov	r3, #16
   11b64:	movw	r2, #39636	; 0x9ad4
   11b68:	movt	r2, #1
   11b6c:	mov	r0, #1
   11b70:	bl	1102c <__printf_chk@plt>
   11b74:	mov	r2, #5
   11b78:	movw	r1, #39640	; 0x9ad8
   11b7c:	movt	r1, #1
   11b80:	mov	r0, r6
   11b84:	bl	10ef4 <dcgettext@plt>
   11b88:	ldr	r1, [r7]
   11b8c:	bl	10e58 <fputs_unlocked@plt>
   11b90:	mov	r2, #5
   11b94:	movw	r1, #39696	; 0x9b10
   11b98:	movt	r1, #1
   11b9c:	mov	r0, r6
   11ba0:	bl	10ef4 <dcgettext@plt>
   11ba4:	ldr	r1, [r7]
   11ba8:	bl	10e58 <fputs_unlocked@plt>
   11bac:	mov	r2, #5
   11bb0:	movw	r1, #39836	; 0x9b9c
   11bb4:	movt	r1, #1
   11bb8:	mov	r0, r6
   11bbc:	bl	10ef4 <dcgettext@plt>
   11bc0:	ldr	r1, [r7]
   11bc4:	bl	10e58 <fputs_unlocked@plt>
   11bc8:	mov	r2, #5
   11bcc:	movw	r1, #39884	; 0x9bcc
   11bd0:	movt	r1, #1
   11bd4:	mov	r0, r6
   11bd8:	bl	10ef4 <dcgettext@plt>
   11bdc:	ldr	r1, [r7]
   11be0:	bl	10e58 <fputs_unlocked@plt>
   11be4:	movw	lr, #39380	; 0x99d4
   11be8:	movt	lr, #1
   11bec:	ldr	ip, [lr]
   11bf0:	ldr	r4, [lr, #4]
   11bf4:	ldrd	r8, [lr, #8]
   11bf8:	subs	r1, ip, #0
   11bfc:	str	ip, [sp]
   11c00:	ldrd	r2, [lr, #16]
   11c04:	str	r4, [sp, #4]
   11c08:	ldrd	r4, [lr, #24]
   11c0c:	strd	r8, [sp, #8]
   11c10:	ldrd	r8, [lr, #32]
   11c14:	strd	r2, [sp, #16]
   11c18:	ldrd	r2, [lr, #40]	; 0x28
   11c1c:	strd	r4, [sp, #24]
   11c20:	ldrd	r4, [lr, #48]	; 0x30
   11c24:	strd	r8, [sp, #32]
   11c28:	strd	r2, [sp, #40]	; 0x28
   11c2c:	strd	r4, [sp, #48]	; 0x30
   11c30:	movwne	r5, #39516	; 0x9a5c
   11c34:	mov	r4, sp
   11c38:	movtne	r5, #1
   11c3c:	bne	11d34 <__assert_fail@plt+0xc30>
   11c40:	ldr	r4, [r4, #4]
   11c44:	movw	r1, #39940	; 0x9c04
   11c48:	movt	r1, #1
   11c4c:	mov	r2, #5
   11c50:	cmp	r4, #0
   11c54:	beq	11d48 <__assert_fail@plt+0xc44>
   11c58:	mov	r0, #0
   11c5c:	bl	10ef4 <dcgettext@plt>
   11c60:	mov	r1, r0
   11c64:	movw	r3, #39964	; 0x9c1c
   11c68:	movt	r3, #1
   11c6c:	movw	r2, #40004	; 0x9c44
   11c70:	movt	r2, #1
   11c74:	mov	r0, #1
   11c78:	bl	1102c <__printf_chk@plt>
   11c7c:	mov	r1, #0
   11c80:	mov	r0, #5
   11c84:	bl	11080 <setlocale@plt>
   11c88:	cmp	r0, #0
   11c8c:	movweq	r5, #39516	; 0x9a5c
   11c90:	movteq	r5, #1
   11c94:	beq	11cb8 <__assert_fail@plt+0xbb4>
   11c98:	movw	r1, #40020	; 0x9c54
   11c9c:	movt	r1, #1
   11ca0:	mov	r2, #3
   11ca4:	movw	r5, #39516	; 0x9a5c
   11ca8:	movt	r5, #1
   11cac:	bl	110e0 <strncmp@plt>
   11cb0:	cmp	r0, #0
   11cb4:	bne	11e00 <__assert_fail@plt+0xcfc>
   11cb8:	mov	r2, #5
   11cbc:	movw	r1, #40096	; 0x9ca0
   11cc0:	movt	r1, #1
   11cc4:	mov	r0, #0
   11cc8:	bl	10ef4 <dcgettext@plt>
   11ccc:	mov	r1, r0
   11cd0:	movw	r3, #39516	; 0x9a5c
   11cd4:	movt	r3, #1
   11cd8:	movw	r2, #39964	; 0x9c1c
   11cdc:	movt	r2, #1
   11ce0:	mov	r0, #1
   11ce4:	bl	1102c <__printf_chk@plt>
   11ce8:	mov	r2, #5
   11cec:	movw	r1, #40124	; 0x9cbc
   11cf0:	movt	r1, #1
   11cf4:	mov	r0, #0
   11cf8:	bl	10ef4 <dcgettext@plt>
   11cfc:	movw	r2, #40268	; 0x9d4c
   11d00:	movt	r2, #1
   11d04:	cmp	r4, r5
   11d08:	movw	r3, #39592	; 0x9aa8
   11d0c:	movt	r3, #1
   11d10:	mov	r1, r0
   11d14:	moveq	r3, r2
   11d18:	mov	r2, r4
   11d1c:	mov	r0, #1
   11d20:	bl	1102c <__printf_chk@plt>
   11d24:	b	11b10 <__assert_fail@plt+0xa0c>
   11d28:	ldr	r1, [r4, #8]!
   11d2c:	cmp	r1, #0
   11d30:	beq	11c40 <__assert_fail@plt+0xb3c>
   11d34:	mov	r0, r5
   11d38:	bl	10e70 <strcmp@plt>
   11d3c:	cmp	r0, #0
   11d40:	bne	11d28 <__assert_fail@plt+0xc24>
   11d44:	b	11c40 <__assert_fail@plt+0xb3c>
   11d48:	mov	r0, r4
   11d4c:	bl	10ef4 <dcgettext@plt>
   11d50:	mov	r1, r0
   11d54:	movw	r3, #39964	; 0x9c1c
   11d58:	movt	r3, #1
   11d5c:	movw	r2, #40004	; 0x9c44
   11d60:	movt	r2, #1
   11d64:	mov	r0, #1
   11d68:	bl	1102c <__printf_chk@plt>
   11d6c:	mov	r1, r4
   11d70:	mov	r0, #5
   11d74:	bl	11080 <setlocale@plt>
   11d78:	cmp	r0, #0
   11d7c:	beq	11d98 <__assert_fail@plt+0xc94>
   11d80:	movw	r1, #40020	; 0x9c54
   11d84:	movt	r1, #1
   11d88:	mov	r2, #3
   11d8c:	bl	110e0 <strncmp@plt>
   11d90:	cmp	r0, #0
   11d94:	bne	11df4 <__assert_fail@plt+0xcf0>
   11d98:	mov	r2, #5
   11d9c:	movw	r1, #40096	; 0x9ca0
   11da0:	movt	r1, #1
   11da4:	mov	r0, #0
   11da8:	bl	10ef4 <dcgettext@plt>
   11dac:	mov	r1, r0
   11db0:	movw	r3, #39516	; 0x9a5c
   11db4:	movt	r3, #1
   11db8:	movw	r2, #39964	; 0x9c1c
   11dbc:	movt	r2, #1
   11dc0:	mov	r0, #1
   11dc4:	bl	1102c <__printf_chk@plt>
   11dc8:	movw	r1, #40124	; 0x9cbc
   11dcc:	movt	r1, #1
   11dd0:	mov	r2, #5
   11dd4:	mov	r0, #0
   11dd8:	bl	10ef4 <dcgettext@plt>
   11ddc:	movw	r4, #39516	; 0x9a5c
   11de0:	movt	r4, #1
   11de4:	movw	r3, #40268	; 0x9d4c
   11de8:	movt	r3, #1
   11dec:	mov	r1, r0
   11df0:	b	11d18 <__assert_fail@plt+0xc14>
   11df4:	movw	r5, #39516	; 0x9a5c
   11df8:	movt	r5, #1
   11dfc:	mov	r4, r5
   11e00:	mov	r2, #5
   11e04:	movw	r1, #40024	; 0x9c58
   11e08:	movt	r1, #1
   11e0c:	mov	r0, #0
   11e10:	bl	10ef4 <dcgettext@plt>
   11e14:	ldr	r1, [r7]
   11e18:	bl	10e58 <fputs_unlocked@plt>
   11e1c:	b	11cb8 <__assert_fail@plt+0xbb4>
   11e20:	movw	r3, #45444	; 0xb184
   11e24:	movt	r3, #2
   11e28:	str	r0, [r3]
   11e2c:	bx	lr
   11e30:	movw	r3, #45444	; 0xb184
   11e34:	movt	r3, #2
   11e38:	strb	r0, [r3, #4]
   11e3c:	bx	lr
   11e40:	movw	r3, #45428	; 0xb174
   11e44:	movt	r3, #2
   11e48:	strd	r4, [sp, #-16]!
   11e4c:	ldr	r0, [r3]
   11e50:	str	r6, [sp, #8]
   11e54:	str	lr, [sp, #12]
   11e58:	sub	sp, sp, #8
   11e5c:	bl	18f44 <__assert_fail@plt+0x7e40>
   11e60:	cmp	r0, #0
   11e64:	beq	11e90 <__assert_fail@plt+0xd8c>
   11e68:	movw	r4, #45444	; 0xb184
   11e6c:	movt	r4, #2
   11e70:	ldrb	r6, [r4, #4]
   11e74:	bl	10ff0 <__errno_location@plt>
   11e78:	mov	r5, r0
   11e7c:	cmp	r6, #0
   11e80:	beq	11ebc <__assert_fail@plt+0xdb8>
   11e84:	ldr	r3, [r0]
   11e88:	cmp	r3, #32
   11e8c:	bne	11ebc <__assert_fail@plt+0xdb8>
   11e90:	movw	r3, #45416	; 0xb168
   11e94:	movt	r3, #2
   11e98:	ldr	r0, [r3]
   11e9c:	bl	18f44 <__assert_fail@plt+0x7e40>
   11ea0:	cmp	r0, #0
   11ea4:	bne	11f04 <__assert_fail@plt+0xe00>
   11ea8:	add	sp, sp, #8
   11eac:	ldrd	r4, [sp]
   11eb0:	ldr	r6, [sp, #8]
   11eb4:	add	sp, sp, #12
   11eb8:	pop	{pc}		; (ldr pc, [sp], #4)
   11ebc:	movw	r1, #40408	; 0x9dd8
   11ec0:	movt	r1, #1
   11ec4:	mov	r2, #5
   11ec8:	mov	r0, #0
   11ecc:	bl	10ef4 <dcgettext@plt>
   11ed0:	mov	r6, r0
   11ed4:	ldr	r0, [r4]
   11ed8:	cmp	r0, #0
   11edc:	beq	11f14 <__assert_fail@plt+0xe10>
   11ee0:	ldr	r4, [r5]
   11ee4:	bl	16144 <__assert_fail@plt+0x5040>
   11ee8:	mov	r3, r0
   11eec:	movw	r2, #40420	; 0x9de4
   11ef0:	movt	r2, #1
   11ef4:	mov	r0, #0
   11ef8:	str	r6, [sp]
   11efc:	mov	r1, r4
   11f00:	bl	10f6c <error@plt>
   11f04:	movw	r3, #45324	; 0xb10c
   11f08:	movt	r3, #2
   11f0c:	ldr	r0, [r3]
   11f10:	bl	10eac <_exit@plt>
   11f14:	mov	r3, r6
   11f18:	movw	r2, #40424	; 0x9de8
   11f1c:	movt	r2, #1
   11f20:	ldr	r1, [r5]
   11f24:	bl	10f6c <error@plt>
   11f28:	b	11f04 <__assert_fail@plt+0xe00>
   11f2c:	b	10e7c <posix_fadvise64@plt>
   11f30:	cmp	r0, #0
   11f34:	bxeq	lr
   11f38:	str	r4, [sp, #-16]!
   11f3c:	mov	r4, r1
   11f40:	strd	r6, [sp, #4]
   11f44:	mov	r6, #0
   11f48:	mov	r7, #0
   11f4c:	str	lr, [sp, #12]
   11f50:	sub	sp, sp, #16
   11f54:	bl	11038 <fileno@plt>
   11f58:	mov	r2, r6
   11f5c:	mov	r3, r7
   11f60:	strd	r6, [sp]
   11f64:	str	r4, [sp, #8]
   11f68:	bl	10e7c <posix_fadvise64@plt>
   11f6c:	add	sp, sp, #16
   11f70:	ldr	r4, [sp]
   11f74:	ldrd	r6, [sp, #4]
   11f78:	add	sp, sp, #12
   11f7c:	pop	{pc}		; (ldr pc, [sp], #4)
   11f80:	strd	r4, [sp, #-12]!
   11f84:	mov	r4, r0
   11f88:	str	lr, [sp, #8]
   11f8c:	sub	sp, sp, #12
   11f90:	bl	11038 <fileno@plt>
   11f94:	cmp	r0, #0
   11f98:	mov	r0, r4
   11f9c:	blt	12020 <__assert_fail@plt+0xf1c>
   11fa0:	bl	10f9c <__freading@plt>
   11fa4:	cmp	r0, #0
   11fa8:	bne	11fec <__assert_fail@plt+0xee8>
   11fac:	mov	r0, r4
   11fb0:	bl	12034 <__assert_fail@plt+0xf30>
   11fb4:	cmp	r0, #0
   11fb8:	beq	1201c <__assert_fail@plt+0xf18>
   11fbc:	bl	10ff0 <__errno_location@plt>
   11fc0:	mov	r5, r0
   11fc4:	mov	r0, r4
   11fc8:	ldr	r4, [r5]
   11fcc:	bl	11050 <fclose@plt>
   11fd0:	cmp	r4, #0
   11fd4:	mvnne	r0, #0
   11fd8:	strne	r4, [r5]
   11fdc:	add	sp, sp, #12
   11fe0:	ldrd	r4, [sp]
   11fe4:	add	sp, sp, #8
   11fe8:	pop	{pc}		; (ldr pc, [sp], #4)
   11fec:	mov	r0, r4
   11ff0:	bl	11038 <fileno@plt>
   11ff4:	mov	r1, #1
   11ff8:	mov	r2, #0
   11ffc:	mov	r3, #0
   12000:	str	r1, [sp]
   12004:	bl	10f3c <lseek64@plt>
   12008:	mvn	r3, #0
   1200c:	mvn	r2, #0
   12010:	cmp	r1, r3
   12014:	cmpeq	r0, r2
   12018:	bne	11fac <__assert_fail@plt+0xea8>
   1201c:	mov	r0, r4
   12020:	add	sp, sp, #12
   12024:	ldrd	r4, [sp]
   12028:	ldr	lr, [sp, #8]
   1202c:	add	sp, sp, #12
   12030:	b	11050 <fclose@plt>
   12034:	str	r4, [sp, #-8]!
   12038:	subs	r4, r0, #0
   1203c:	str	lr, [sp, #4]
   12040:	sub	sp, sp, #8
   12044:	beq	12060 <__assert_fail@plt+0xf5c>
   12048:	bl	10f9c <__freading@plt>
   1204c:	cmp	r0, #0
   12050:	beq	12060 <__assert_fail@plt+0xf5c>
   12054:	ldr	r3, [r4]
   12058:	tst	r3, #256	; 0x100
   1205c:	bne	12078 <__assert_fail@plt+0xf74>
   12060:	mov	r0, r4
   12064:	add	sp, sp, #8
   12068:	ldr	r4, [sp]
   1206c:	ldr	lr, [sp, #4]
   12070:	add	sp, sp, #8
   12074:	b	10e88 <fflush@plt>
   12078:	mov	r1, #1
   1207c:	mov	r2, #0
   12080:	mov	r3, #0
   12084:	mov	r0, r4
   12088:	str	r1, [sp]
   1208c:	bl	121a0 <__assert_fail@plt+0x109c>
   12090:	b	12060 <__assert_fail@plt+0xf5c>
   12094:	strd	r4, [sp, #-16]!
   12098:	mov	r5, r1
   1209c:	str	r6, [sp, #8]
   120a0:	str	lr, [sp, #12]
   120a4:	bl	110bc <fopen64@plt>
   120a8:	subs	r4, r0, #0
   120ac:	beq	120bc <__assert_fail@plt+0xfb8>
   120b0:	bl	11038 <fileno@plt>
   120b4:	cmp	r0, #2
   120b8:	bls	120d0 <__assert_fail@plt+0xfcc>
   120bc:	mov	r0, r4
   120c0:	ldrd	r4, [sp]
   120c4:	ldr	r6, [sp, #8]
   120c8:	add	sp, sp, #12
   120cc:	pop	{pc}		; (ldr pc, [sp], #4)
   120d0:	bl	16e54 <__assert_fail@plt+0x5d50>
   120d4:	subs	r6, r0, #0
   120d8:	blt	12120 <__assert_fail@plt+0x101c>
   120dc:	mov	r0, r4
   120e0:	bl	11f80 <__assert_fail@plt+0xe7c>
   120e4:	cmp	r0, #0
   120e8:	bne	12100 <__assert_fail@plt+0xffc>
   120ec:	mov	r1, r5
   120f0:	mov	r0, r6
   120f4:	bl	10e40 <fdopen@plt>
   120f8:	subs	r4, r0, #0
   120fc:	bne	120bc <__assert_fail@plt+0xfb8>
   12100:	bl	10ff0 <__errno_location@plt>
   12104:	mov	r5, r0
   12108:	mov	r0, r6
   1210c:	ldr	r6, [r5]
   12110:	mov	r4, #0
   12114:	bl	110f8 <close@plt>
   12118:	str	r6, [r5]
   1211c:	b	120bc <__assert_fail@plt+0xfb8>
   12120:	bl	10ff0 <__errno_location@plt>
   12124:	mov	r5, r0
   12128:	mov	r0, r4
   1212c:	ldr	r6, [r5]
   12130:	mov	r4, #0
   12134:	bl	11f80 <__assert_fail@plt+0xe7c>
   12138:	str	r6, [r5]
   1213c:	b	120bc <__assert_fail@plt+0xfb8>
   12140:	strd	r4, [sp, #-12]!
   12144:	mov	r5, r0
   12148:	str	lr, [sp, #8]
   1214c:	sub	sp, sp, #12
   12150:	bl	10ff0 <__errno_location@plt>
   12154:	mov	r4, r0
   12158:	mov	r2, #0
   1215c:	ldr	r3, [r4]
   12160:	mov	r0, r5
   12164:	str	r2, [r4]
   12168:	str	r3, [sp]
   1216c:	str	r3, [sp, #4]
   12170:	bl	10ea0 <free@plt>
   12174:	ldr	r3, [r4]
   12178:	add	r2, sp, #8
   1217c:	clz	r3, r3
   12180:	lsr	r3, r3, #5
   12184:	add	r3, r2, r3, lsl #2
   12188:	ldr	r3, [r3, #-8]
   1218c:	str	r3, [r4]
   12190:	add	sp, sp, #12
   12194:	ldrd	r4, [sp]
   12198:	add	sp, sp, #8
   1219c:	pop	{pc}		; (ldr pc, [sp], #4)
   121a0:	strd	r4, [sp, #-24]!	; 0xffffffe8
   121a4:	mov	r4, r0
   121a8:	ldr	ip, [r0, #4]
   121ac:	strd	r6, [sp, #8]
   121b0:	str	lr, [sp, #20]
   121b4:	ldr	lr, [r0, #8]
   121b8:	str	r8, [sp, #16]
   121bc:	sub	sp, sp, #8
   121c0:	ldr	r5, [sp, #32]
   121c4:	cmp	lr, ip
   121c8:	beq	121f0 <__assert_fail@plt+0x10ec>
   121cc:	mov	r0, r4
   121d0:	str	r5, [sp, #32]
   121d4:	add	sp, sp, #8
   121d8:	ldrd	r4, [sp]
   121dc:	ldrd	r6, [sp, #8]
   121e0:	ldr	r8, [sp, #16]
   121e4:	ldr	lr, [sp, #20]
   121e8:	add	sp, sp, #24
   121ec:	b	1105c <fseeko64@plt>
   121f0:	ldr	ip, [r0, #16]
   121f4:	ldr	lr, [r0, #20]
   121f8:	cmp	lr, ip
   121fc:	bne	121cc <__assert_fail@plt+0x10c8>
   12200:	ldr	r8, [r0, #36]	; 0x24
   12204:	cmp	r8, #0
   12208:	bne	121cc <__assert_fail@plt+0x10c8>
   1220c:	mov	r6, r2
   12210:	mov	r7, r3
   12214:	bl	11038 <fileno@plt>
   12218:	mov	r2, r6
   1221c:	mov	r3, r7
   12220:	str	r5, [sp]
   12224:	bl	10f3c <lseek64@plt>
   12228:	mvn	r3, #0
   1222c:	mvn	r2, #0
   12230:	cmp	r1, r3
   12234:	cmpeq	r0, r2
   12238:	beq	12268 <__assert_fail@plt+0x1164>
   1223c:	ldr	r3, [r4]
   12240:	strd	r0, [r4, #80]	; 0x50
   12244:	bic	r3, r3, #16
   12248:	str	r3, [r4]
   1224c:	mov	r0, r8
   12250:	add	sp, sp, #8
   12254:	ldrd	r4, [sp]
   12258:	ldrd	r6, [sp, #8]
   1225c:	ldr	r8, [sp, #16]
   12260:	add	sp, sp, #20
   12264:	pop	{pc}		; (ldr pc, [sp], #4)
   12268:	mvn	r8, #0
   1226c:	b	1224c <__assert_fail@plt+0x1148>
   12270:	strd	r4, [sp, #-36]!	; 0xffffffdc
   12274:	strd	r6, [sp, #8]
   12278:	mov	r6, r3
   1227c:	ands	r3, r3, #32
   12280:	strd	r8, [sp, #16]
   12284:	mov	r9, r1
   12288:	moveq	r1, #1000	; 0x3e8
   1228c:	strd	sl, [sp, #24]
   12290:	movne	r1, #1024	; 0x400
   12294:	mov	r8, r0
   12298:	str	lr, [sp, #32]
   1229c:	vpush	{d8-d9}
   122a0:	sub	sp, sp, #108	; 0x6c
   122a4:	str	r2, [sp, #12]
   122a8:	moveq	r2, #1000	; 0x3e8
   122ac:	movne	r2, #1024	; 0x400
   122b0:	str	r3, [sp, #40]	; 0x28
   122b4:	and	r3, r6, #3
   122b8:	str	r1, [sp, #16]
   122bc:	str	r3, [sp, #32]
   122c0:	mov	r3, #0
   122c4:	strd	r2, [sp, #24]
   122c8:	str	r1, [sp, #36]	; 0x24
   122cc:	bl	110a4 <localeconv@plt>
   122d0:	ldr	r3, [sp, #12]
   122d4:	mov	r4, r0
   122d8:	add	r2, r3, #644	; 0x284
   122dc:	ldr	r3, [r0]
   122e0:	add	r2, r2, #3
   122e4:	str	r2, [sp, #32]
   122e8:	mov	r0, r3
   122ec:	mov	r5, r3
   122f0:	bl	10fd8 <strlen@plt>
   122f4:	ldmib	r4, {r7, sl}
   122f8:	sub	r2, r0, #1
   122fc:	movw	r3, #40460	; 0x9e0c
   12300:	movt	r3, #1
   12304:	cmp	r2, #16
   12308:	movcc	r3, r5
   1230c:	mov	fp, r0
   12310:	movcs	fp, #1
   12314:	str	r3, [sp, #44]	; 0x2c
   12318:	mov	r0, r7
   1231c:	bl	10fd8 <strlen@plt>
   12320:	cmp	r0, #16
   12324:	movw	r3, #39592	; 0x9aa8
   12328:	movt	r3, #1
   1232c:	ldrd	r0, [sp, #160]	; 0xa0
   12330:	movhi	r7, r3
   12334:	ldrd	r2, [sp, #168]	; 0xa8
   12338:	cmp	r3, r1
   1233c:	cmpeq	r2, r0
   12340:	bhi	12658 <__assert_fail@plt+0x1554>
   12344:	bl	19784 <__assert_fail@plt+0x8680>
   12348:	orrs	r3, r2, r3
   1234c:	bne	12380 <__assert_fail@plt+0x127c>
   12350:	mul	ip, r0, r9
   12354:	mov	r3, r1
   12358:	mov	r2, r0
   1235c:	umull	r4, r5, r0, r8
   12360:	mla	r1, r8, r1, ip
   12364:	mov	r0, r4
   12368:	add	r5, r1, r5
   1236c:	mov	r1, r5
   12370:	bl	19784 <__assert_fail@plt+0x8680>
   12374:	cmp	r1, r9
   12378:	cmpeq	r0, r8
   1237c:	beq	12c58 <__assert_fail@plt+0x1b54>
   12380:	ldrd	r0, [sp, #160]	; 0xa0
   12384:	bl	19710 <__assert_fail@plt+0x860c>
   12388:	vmov	d9, r0, r1
   1238c:	ldrd	r0, [sp, #168]	; 0xa8
   12390:	bl	19710 <__assert_fail@plt+0x860c>
   12394:	vmov	d7, r0, r1
   12398:	mov	r0, r8
   1239c:	mov	r1, r9
   123a0:	vdiv.f64	d8, d9, d7
   123a4:	bl	19710 <__assert_fail@plt+0x860c>
   123a8:	vmov	d7, r0, r1
   123ac:	tst	r6, #16
   123b0:	vmul.f64	d8, d8, d7
   123b4:	beq	12580 <__assert_fail@plt+0x147c>
   123b8:	vldr	s15, [sp, #16]
   123bc:	vcvt.f64.s32	d7, s15
   123c0:	vmul.f64	d6, d7, d7
   123c4:	vcmpe.f64	d8, d6
   123c8:	vmrs	APSR_nzcv, fpscr
   123cc:	blt	12eb4 <__assert_fail@plt+0x1db0>
   123d0:	vmul.f64	d5, d7, d6
   123d4:	vcmpe.f64	d8, d5
   123d8:	vmrs	APSR_nzcv, fpscr
   123dc:	blt	12ec0 <__assert_fail@plt+0x1dbc>
   123e0:	vmul.f64	d6, d7, d5
   123e4:	vcmpe.f64	d8, d6
   123e8:	vmrs	APSR_nzcv, fpscr
   123ec:	blt	12ed0 <__assert_fail@plt+0x1dcc>
   123f0:	vmul.f64	d5, d7, d6
   123f4:	vcmpe.f64	d8, d5
   123f8:	vmrs	APSR_nzcv, fpscr
   123fc:	blt	12ef4 <__assert_fail@plt+0x1df0>
   12400:	vmul.f64	d6, d7, d5
   12404:	vcmpe.f64	d8, d6
   12408:	vmrs	APSR_nzcv, fpscr
   1240c:	blt	12f04 <__assert_fail@plt+0x1e00>
   12410:	vmul.f64	d5, d7, d6
   12414:	vcmpe.f64	d8, d5
   12418:	vmrs	APSR_nzcv, fpscr
   1241c:	blt	12f14 <__assert_fail@plt+0x1e10>
   12420:	vmul.f64	d7, d7, d5
   12424:	vcmpe.f64	d8, d7
   12428:	vmrs	APSR_nzcv, fpscr
   1242c:	movlt	r3, #7
   12430:	vmovlt.f64	d7, d5
   12434:	strlt	r3, [sp, #16]
   12438:	blt	12444 <__assert_fail@plt+0x1340>
   1243c:	mov	r3, #8
   12440:	str	r3, [sp, #16]
   12444:	ands	r3, r6, #32
   12448:	and	r9, r6, #3
   1244c:	vdiv.f64	d9, d8, d7
   12450:	clz	r4, r3
   12454:	add	fp, fp, #1
   12458:	lsr	r4, r4, #5
   1245c:	cmp	r9, #1
   12460:	add	r4, r4, #1
   12464:	add	r4, r4, fp
   12468:	beq	12d10 <__assert_fail@plt+0x1c0c>
   1246c:	vldr	d7, [pc, #468]	; 12648 <__assert_fail@plt+0x1544>
   12470:	vcmpe.f64	d9, d7
   12474:	vmrs	APSR_nzcv, fpscr
   12478:	vmovpl.f64	d7, d9
   1247c:	bpl	124bc <__assert_fail@plt+0x13b8>
   12480:	vmov	r0, r1, d9
   12484:	bl	197d0 <__assert_fail@plt+0x86cc>
   12488:	mov	r5, r0
   1248c:	mov	r8, r1
   12490:	bl	19710 <__assert_fail@plt+0x860c>
   12494:	cmp	r9, #0
   12498:	vmov	d7, r0, r1
   1249c:	bne	124bc <__assert_fail@plt+0x13b8>
   124a0:	vcmp.f64	d9, d7
   124a4:	vmrs	APSR_nzcv, fpscr
   124a8:	beq	124bc <__assert_fail@plt+0x13b8>
   124ac:	adds	r0, r5, #1
   124b0:	adc	r1, r8, #0
   124b4:	bl	19710 <__assert_fail@plt+0x860c>
   124b8:	vmov	d7, r0, r1
   124bc:	ldr	r5, [sp, #12]
   124c0:	mvn	r2, #0
   124c4:	mov	r1, #1
   124c8:	movw	r3, #40472	; 0x9e18
   124cc:	movt	r3, #1
   124d0:	vstr	d7, [sp]
   124d4:	mov	r0, r5
   124d8:	bl	10ffc <__sprintf_chk@plt>
   124dc:	mov	r0, r5
   124e0:	bl	10fd8 <strlen@plt>
   124e4:	cmp	r0, r4
   124e8:	bls	12bf0 <__assert_fail@plt+0x1aec>
   124ec:	vldr	d7, [pc, #348]	; 12650 <__assert_fail@plt+0x154c>
   124f0:	vmul.f64	d9, d9, d7
   124f4:	vldr	d7, [pc, #332]	; 12648 <__assert_fail@plt+0x1544>
   124f8:	vcmpe.f64	d9, d7
   124fc:	vmrs	APSR_nzcv, fpscr
   12500:	bpl	12548 <__assert_fail@plt+0x1444>
   12504:	vmov	r0, r1, d9
   12508:	bl	197d0 <__assert_fail@plt+0x86cc>
   1250c:	mov	r4, r0
   12510:	mov	r5, r1
   12514:	bl	19710 <__assert_fail@plt+0x860c>
   12518:	and	r3, r6, #3
   1251c:	vmov	d7, r0, r1
   12520:	cmp	r3, #0
   12524:	bne	12544 <__assert_fail@plt+0x1440>
   12528:	vcmp.f64	d9, d7
   1252c:	vmrs	APSR_nzcv, fpscr
   12530:	beq	12544 <__assert_fail@plt+0x1440>
   12534:	adds	r0, r4, #1
   12538:	adc	r1, r5, #0
   1253c:	bl	19710 <__assert_fail@plt+0x860c>
   12540:	vmov	d7, r0, r1
   12544:	vmov.f64	d9, d7
   12548:	vldr	d6, [pc, #256]	; 12650 <__assert_fail@plt+0x154c>
   1254c:	mvn	r2, #0
   12550:	mov	r1, #1
   12554:	movw	r3, #40464	; 0x9e10
   12558:	movt	r3, #1
   1255c:	ldr	r4, [sp, #12]
   12560:	vdiv.f64	d7, d9, d6
   12564:	mov	r0, r4
   12568:	vstr	d7, [sp]
   1256c:	bl	10ffc <__sprintf_chk@plt>
   12570:	mov	r0, r4
   12574:	bl	10fd8 <strlen@plt>
   12578:	mov	r9, r0
   1257c:	b	125cc <__assert_fail@plt+0x14c8>
   12580:	and	r8, r6, #3
   12584:	cmp	r8, #1
   12588:	beq	1259c <__assert_fail@plt+0x1498>
   1258c:	vldr	d7, [pc, #180]	; 12648 <__assert_fail@plt+0x1544>
   12590:	vcmpe.f64	d8, d7
   12594:	vmrs	APSR_nzcv, fpscr
   12598:	bmi	12c14 <__assert_fail@plt+0x1b10>
   1259c:	ldr	r4, [sp, #12]
   125a0:	mvn	r2, #0
   125a4:	mov	r1, #1
   125a8:	movw	r3, #40464	; 0x9e10
   125ac:	movt	r3, #1
   125b0:	vstr	d8, [sp]
   125b4:	str	r2, [sp, #16]
   125b8:	mov	r0, r4
   125bc:	bl	10ffc <__sprintf_chk@plt>
   125c0:	mov	r0, r4
   125c4:	bl	10fd8 <strlen@plt>
   125c8:	mov	r9, r0
   125cc:	mov	r2, r0
   125d0:	ldr	r1, [sp, #12]
   125d4:	ldr	r3, [sp, #32]
   125d8:	sub	r8, r3, r0
   125dc:	mov	r0, r8
   125e0:	add	r9, r8, r9
   125e4:	bl	10e94 <memmove@plt>
   125e8:	tst	r6, #4
   125ec:	bne	129e4 <__assert_fail@plt+0x18e0>
   125f0:	tst	r6, #128	; 0x80
   125f4:	beq	12614 <__assert_fail@plt+0x1510>
   125f8:	ldr	r3, [sp, #16]
   125fc:	cmn	r3, #1
   12600:	beq	12a84 <__assert_fail@plt+0x1980>
   12604:	ldr	r2, [sp, #16]
   12608:	and	r3, r6, #256	; 0x100
   1260c:	orrs	r2, r3, r2
   12610:	bne	12d88 <__assert_fail@plt+0x1c84>
   12614:	ldr	r2, [sp, #32]
   12618:	mov	r3, #0
   1261c:	mov	r0, r8
   12620:	strb	r3, [r2]
   12624:	add	sp, sp, #108	; 0x6c
   12628:	vpop	{d8-d9}
   1262c:	ldrd	r4, [sp]
   12630:	ldrd	r6, [sp, #8]
   12634:	ldrd	r8, [sp, #16]
   12638:	ldrd	sl, [sp, #24]
   1263c:	add	sp, sp, #32
   12640:	pop	{pc}		; (ldr pc, [sp], #4)
   12644:	nop	{0}
   12648:	andeq	r0, r0, r0
   1264c:	mvnsmi	r0, #0
   12650:	andeq	r0, r0, r0
   12654:	eormi	r0, r4, r0
   12658:	mov	r2, r0
   1265c:	mov	r3, r1
   12660:	orrs	r3, r2, r3
   12664:	beq	12380 <__assert_fail@plt+0x127c>
   12668:	ldrd	r2, [sp, #160]	; 0xa0
   1266c:	ldrd	r0, [sp, #168]	; 0xa8
   12670:	bl	19784 <__assert_fail@plt+0x8680>
   12674:	orrs	r3, r2, r3
   12678:	mov	r4, r0
   1267c:	mov	r5, r1
   12680:	bne	12380 <__assert_fail@plt+0x127c>
   12684:	mov	r0, r8
   12688:	mov	r1, r9
   1268c:	mov	r2, r4
   12690:	mov	r3, r5
   12694:	bl	19784 <__assert_fail@plt+0x8680>
   12698:	mov	lr, r2
   1269c:	mov	r8, r1
   126a0:	lsl	r1, r3, #2
   126a4:	mov	r9, r0
   126a8:	lsl	r0, lr, #2
   126ac:	mov	ip, r3
   126b0:	orr	r1, r1, lr, lsr #30
   126b4:	mov	r2, r4
   126b8:	mov	r3, r5
   126bc:	adds	r0, r0, lr
   126c0:	strd	r4, [sp, #16]
   126c4:	mov	r4, r9
   126c8:	adc	r1, r1, ip
   126cc:	adds	r0, r0, r0
   126d0:	adc	r1, r1, r1
   126d4:	mov	r5, r8
   126d8:	bl	19784 <__assert_fail@plt+0x8680>
   126dc:	adds	r1, r2, r2
   126e0:	adc	r3, r3, r3
   126e4:	str	r1, [sp, #48]	; 0x30
   126e8:	str	r3, [sp, #52]	; 0x34
   126ec:	ldrd	r2, [sp, #16]
   126f0:	ldrd	r8, [sp, #48]	; 0x30
   126f4:	str	r0, [sp, #48]	; 0x30
   126f8:	cmp	r3, r9
   126fc:	cmpeq	r2, r8
   12700:	bls	12d7c <__assert_fail@plt+0x1c78>
   12704:	mov	r3, r8
   12708:	orrs	r3, r3, r9
   1270c:	movne	r8, #1
   12710:	moveq	r8, #0
   12714:	ands	r3, r6, #16
   12718:	str	r3, [sp, #16]
   1271c:	beq	12c6c <__assert_fail@plt+0x1b68>
   12720:	ldrd	r2, [sp, #24]
   12724:	cmp	r5, r3
   12728:	cmpeq	r4, r2
   1272c:	bcc	12dd4 <__assert_fail@plt+0x1cd0>
   12730:	mov	r0, r4
   12734:	mov	r1, r5
   12738:	bl	19784 <__assert_fail@plt+0x8680>
   1273c:	ldr	ip, [sp, #48]	; 0x30
   12740:	add	r2, r2, r2, lsl #2
   12744:	mov	r4, r0
   12748:	asr	r3, r8, #1
   1274c:	mov	r5, r1
   12750:	add	r2, ip, r2, lsl #1
   12754:	ldr	ip, [sp, #36]	; 0x24
   12758:	udiv	r9, r2, ip
   1275c:	mls	r2, ip, r9, r2
   12760:	str	r9, [sp, #48]	; 0x30
   12764:	add	r2, r3, r2, lsl #1
   12768:	cmp	ip, r2
   1276c:	add	r2, r8, r2
   12770:	bhi	12e0c <__assert_fail@plt+0x1d08>
   12774:	cmp	ip, r2
   12778:	mov	ip, #1
   1277c:	movcc	r8, #3
   12780:	movcs	r8, #2
   12784:	ldrd	r2, [sp, #24]
   12788:	cmp	r1, r3
   1278c:	cmpeq	r0, r2
   12790:	bcc	13058 <__assert_fail@plt+0x1f54>
   12794:	bl	19784 <__assert_fail@plt+0x8680>
   12798:	add	r2, r2, r2, lsl #2
   1279c:	ldr	ip, [sp, #36]	; 0x24
   127a0:	mov	r4, r0
   127a4:	asr	r3, r8, #1
   127a8:	mov	r5, r1
   127ac:	add	r2, r9, r2, lsl #1
   127b0:	udiv	r9, r2, ip
   127b4:	mls	r2, ip, r9, r2
   127b8:	str	r9, [sp, #48]	; 0x30
   127bc:	add	r3, r3, r2, lsl #1
   127c0:	cmp	ip, r3
   127c4:	add	r3, r8, r3
   127c8:	bhi	12e4c <__assert_fail@plt+0x1d48>
   127cc:	cmp	ip, r3
   127d0:	mov	ip, #1
   127d4:	movcc	r8, #3
   127d8:	movcs	r8, #2
   127dc:	ldrd	r2, [sp, #24]
   127e0:	cmp	r1, r3
   127e4:	cmpeq	r0, r2
   127e8:	bcc	13070 <__assert_fail@plt+0x1f6c>
   127ec:	bl	19784 <__assert_fail@plt+0x8680>
   127f0:	add	r2, r2, r2, lsl #2
   127f4:	mov	r4, r0
   127f8:	mov	r5, r1
   127fc:	asr	r3, r8, #1
   12800:	add	r9, r9, r2, lsl #1
   12804:	ldr	r2, [sp, #36]	; 0x24
   12808:	udiv	ip, r9, r2
   1280c:	mls	r9, r2, ip, r9
   12810:	str	ip, [sp, #16]
   12814:	str	ip, [sp, #48]	; 0x30
   12818:	add	r3, r3, r9, lsl #1
   1281c:	cmp	r2, r3
   12820:	add	r3, r8, r3
   12824:	bhi	12e5c <__assert_fail@plt+0x1d58>
   12828:	cmp	r2, r3
   1282c:	mov	ip, #1
   12830:	movcc	r8, #3
   12834:	movcs	r8, #2
   12838:	ldrd	r2, [sp, #24]
   1283c:	cmp	r1, r3
   12840:	cmpeq	r0, r2
   12844:	bcc	13064 <__assert_fail@plt+0x1f60>
   12848:	bl	19784 <__assert_fail@plt+0x8680>
   1284c:	ldr	ip, [sp, #16]
   12850:	add	r2, r2, r2, lsl #2
   12854:	mov	r4, r0
   12858:	asr	r3, r8, #1
   1285c:	mov	r5, r1
   12860:	add	r2, ip, r2, lsl #1
   12864:	ldr	ip, [sp, #36]	; 0x24
   12868:	udiv	r9, r2, ip
   1286c:	mls	r2, ip, r9, r2
   12870:	str	r9, [sp, #48]	; 0x30
   12874:	add	r3, r3, r2, lsl #1
   12878:	cmp	ip, r3
   1287c:	add	r3, r8, r3
   12880:	bhi	12e84 <__assert_fail@plt+0x1d80>
   12884:	cmp	r3, ip
   12888:	mov	ip, #1
   1288c:	movhi	r8, #3
   12890:	movls	r8, #2
   12894:	ldrd	r2, [sp, #24]
   12898:	cmp	r1, r3
   1289c:	cmpeq	r0, r2
   128a0:	bcc	1307c <__assert_fail@plt+0x1f78>
   128a4:	bl	19784 <__assert_fail@plt+0x8680>
   128a8:	add	r2, r2, r2, lsl #2
   128ac:	mov	r4, r0
   128b0:	mov	r5, r1
   128b4:	asr	r3, r8, #1
   128b8:	add	r9, r9, r2, lsl #1
   128bc:	ldr	r2, [sp, #36]	; 0x24
   128c0:	udiv	ip, r9, r2
   128c4:	mls	r9, r2, ip, r9
   128c8:	str	ip, [sp, #16]
   128cc:	str	ip, [sp, #48]	; 0x30
   128d0:	add	r3, r3, r9, lsl #1
   128d4:	cmp	r2, r3
   128d8:	add	r3, r8, r3
   128dc:	bhi	12e94 <__assert_fail@plt+0x1d90>
   128e0:	cmp	r2, r3
   128e4:	mov	ip, #1
   128e8:	movcc	r8, #3
   128ec:	movcs	r8, #2
   128f0:	ldrd	r2, [sp, #24]
   128f4:	cmp	r1, r3
   128f8:	cmpeq	r0, r2
   128fc:	bcc	13094 <__assert_fail@plt+0x1f90>
   12900:	bl	19784 <__assert_fail@plt+0x8680>
   12904:	mov	r5, r1
   12908:	ldr	r1, [sp, #16]
   1290c:	add	r2, r2, r2, lsl #2
   12910:	mov	r4, r0
   12914:	asr	r3, r8, #1
   12918:	ldr	r0, [sp, #36]	; 0x24
   1291c:	add	r1, r1, r2, lsl #1
   12920:	udiv	r2, r1, r0
   12924:	mls	r1, r0, r2, r1
   12928:	str	r2, [sp, #48]	; 0x30
   1292c:	add	r3, r3, r1, lsl #1
   12930:	cmp	r0, r3
   12934:	add	r3, r8, r3
   12938:	bhi	12ea4 <__assert_fail@plt+0x1da0>
   1293c:	cmp	r0, r3
   12940:	mov	ip, #1
   12944:	movcs	r8, #2
   12948:	movcc	r8, #3
   1294c:	mov	r3, #6
   12950:	str	r3, [sp, #16]
   12954:	cmp	r5, #0
   12958:	cmpeq	r4, #9
   1295c:	bhi	12c74 <__assert_fail@plt+0x1b70>
   12960:	and	r3, r6, #3
   12964:	cmp	r3, #1
   12968:	beq	12f24 <__assert_fail@plt+0x1e20>
   1296c:	and	r3, r6, #3
   12970:	cmp	r3, #0
   12974:	moveq	r3, ip
   12978:	movne	r3, #0
   1297c:	cmp	r3, #0
   12980:	ldr	r3, [sp, #48]	; 0x30
   12984:	bne	12ee0 <__assert_fail@plt+0x1ddc>
   12988:	cmp	r3, #0
   1298c:	addne	r3, r3, #48	; 0x30
   12990:	uxtbne	r3, r3
   12994:	bne	129a4 <__assert_fail@plt+0x18a0>
   12998:	tst	r6, #8
   1299c:	bne	1302c <__assert_fail@plt+0x1f28>
   129a0:	mov	r3, #48	; 0x30
   129a4:	ldr	r1, [sp, #12]
   129a8:	mov	r2, fp
   129ac:	mov	r8, #0
   129b0:	add	r9, r1, #644	; 0x284
   129b4:	strb	r3, [r1, #646]	; 0x286
   129b8:	add	r9, r9, #2
   129bc:	ldr	r1, [sp, #44]	; 0x2c
   129c0:	sub	r9, r9, fp
   129c4:	mov	r0, r9
   129c8:	bl	10eb8 <memcpy@plt>
   129cc:	and	r3, r6, #3
   129d0:	cmp	r3, #1
   129d4:	beq	12cc4 <__assert_fail@plt+0x1bc0>
   129d8:	mov	r3, #0
   129dc:	str	r3, [sp, #48]	; 0x30
   129e0:	b	12c84 <__assert_fail@plt+0x1b80>
   129e4:	mov	r0, r7
   129e8:	sub	r4, r9, r8
   129ec:	bl	10fd8 <strlen@plt>
   129f0:	mov	fp, r0
   129f4:	mov	r1, r8
   129f8:	mov	r2, r4
   129fc:	add	r0, sp, #60	; 0x3c
   12a00:	mov	r3, #41	; 0x29
   12a04:	mvn	r5, #0
   12a08:	bl	10f24 <__memcpy_chk@plt>
   12a0c:	ldrb	r3, [sl]
   12a10:	cmp	r3, #0
   12a14:	beq	12a28 <__assert_fail@plt+0x1924>
   12a18:	cmp	r3, #255	; 0xff
   12a1c:	add	sl, sl, #1
   12a20:	movne	r5, r3
   12a24:	moveq	r5, r4
   12a28:	sub	r8, r9, r5
   12a2c:	cmp	r5, r4
   12a30:	mov	r2, r5
   12a34:	mov	r0, r8
   12a38:	bls	12a54 <__assert_fail@plt+0x1950>
   12a3c:	sub	r8, r9, r4
   12a40:	mov	r2, r4
   12a44:	add	r1, sp, #60	; 0x3c
   12a48:	mov	r0, r8
   12a4c:	bl	10eb8 <memcpy@plt>
   12a50:	b	125f0 <__assert_fail@plt+0x14ec>
   12a54:	sub	r4, r4, r5
   12a58:	add	r3, sp, #60	; 0x3c
   12a5c:	add	r1, r3, r4
   12a60:	sub	r9, r8, fp
   12a64:	bl	10eb8 <memcpy@plt>
   12a68:	cmp	r4, #0
   12a6c:	mov	r2, fp
   12a70:	mov	r1, r7
   12a74:	mov	r0, r9
   12a78:	beq	125f0 <__assert_fail@plt+0x14ec>
   12a7c:	bl	10eb8 <memcpy@plt>
   12a80:	b	12a0c <__assert_fail@plt+0x1908>
   12a84:	ldrd	r2, [sp, #168]	; 0xa8
   12a88:	cmp	r3, #0
   12a8c:	cmpeq	r2, #1
   12a90:	bls	12e40 <__assert_fail@plt+0x1d3c>
   12a94:	mov	r0, r2
   12a98:	mov	r1, r3
   12a9c:	ldrd	r2, [sp, #24]
   12aa0:	cmp	r1, r3
   12aa4:	cmpeq	r0, r2
   12aa8:	bls	130d4 <__assert_fail@plt+0x1fd0>
   12aac:	mul	r1, r2, r3
   12ab0:	mov	r4, r2
   12ab4:	mov	r5, r3
   12ab8:	umull	sl, fp, r2, r2
   12abc:	add	fp, fp, r1, lsl #1
   12ac0:	ldrd	r0, [sp, #168]	; 0xa8
   12ac4:	cmp	r1, fp
   12ac8:	cmpeq	r0, sl
   12acc:	bls	12f40 <__assert_fail@plt+0x1e3c>
   12ad0:	mul	r3, r2, fp
   12ad4:	umull	r0, r1, r4, sl
   12ad8:	mla	r2, sl, r5, r3
   12adc:	strd	r0, [sp, #16]
   12ae0:	add	r3, r2, r1
   12ae4:	str	r3, [sp, #20]
   12ae8:	ldrd	sl, [sp, #16]
   12aec:	ldrd	r2, [sp, #168]	; 0xa8
   12af0:	cmp	r3, fp
   12af4:	cmpeq	r2, sl
   12af8:	bls	12f74 <__assert_fail@plt+0x1e70>
   12afc:	ldr	r2, [sp, #16]
   12b00:	mul	r1, r4, fp
   12b04:	umull	sl, fp, r4, sl
   12b08:	mla	r0, r2, r5, r1
   12b0c:	ldrd	r2, [sp, #168]	; 0xa8
   12b10:	add	fp, r0, fp
   12b14:	cmp	r3, fp
   12b18:	cmpeq	r2, sl
   12b1c:	bls	130a0 <__assert_fail@plt+0x1f9c>
   12b20:	mul	r3, r4, fp
   12b24:	umull	r0, r1, r4, sl
   12b28:	mla	r2, sl, r5, r3
   12b2c:	add	r1, r2, r1
   12b30:	ldrd	r2, [sp, #168]	; 0xa8
   12b34:	cmp	r3, r1
   12b38:	cmpeq	r2, r0
   12b3c:	bls	12fa8 <__assert_fail@plt+0x1ea4>
   12b40:	mul	ip, r0, r5
   12b44:	mov	lr, r4
   12b48:	umull	r2, r3, r0, r4
   12b4c:	mla	r1, r4, r1, ip
   12b50:	add	r3, r1, r3
   12b54:	ldrd	r0, [sp, #168]	; 0xa8
   12b58:	cmp	r1, r3
   12b5c:	cmpeq	r0, r2
   12b60:	bls	12fdc <__assert_fail@plt+0x1ed8>
   12b64:	mul	ip, r2, r5
   12b68:	umull	r0, r1, r2, r4
   12b6c:	mla	r3, r4, r3, ip
   12b70:	add	r1, r3, r1
   12b74:	ldrd	r2, [sp, #168]	; 0xa8
   12b78:	cmp	r3, r1
   12b7c:	cmpeq	r2, r0
   12b80:	bls	13120 <__assert_fail@plt+0x201c>
   12b84:	tst	r6, #64	; 0x40
   12b88:	and	r3, r6, #256	; 0x100
   12b8c:	beq	12ba4 <__assert_fail@plt+0x1aa0>
   12b90:	ldr	r1, [sp, #12]
   12b94:	mov	r2, #32
   12b98:	add	r0, r1, #648	; 0x288
   12b9c:	strb	r2, [r1, #647]	; 0x287
   12ba0:	str	r0, [sp, #32]
   12ba4:	mov	r2, #8
   12ba8:	str	r2, [sp, #16]
   12bac:	ldr	r2, [sp, #40]	; 0x28
   12bb0:	adds	r1, r2, #0
   12bb4:	movne	r1, #1
   12bb8:	ldr	r0, [sp, #16]
   12bbc:	movw	r2, #40428	; 0x9dec
   12bc0:	movt	r2, #1
   12bc4:	cmp	r3, #0
   12bc8:	ldrb	r0, [r2, r0]
   12bcc:	ldr	r2, [sp, #32]
   12bd0:	strb	r0, [r2], #1
   12bd4:	beq	12dcc <__assert_fail@plt+0x1cc8>
   12bd8:	cmp	r1, #0
   12bdc:	bne	12de0 <__assert_fail@plt+0x1cdc>
   12be0:	mov	r3, #66	; 0x42
   12be4:	strb	r3, [r2], #1
   12be8:	str	r2, [sp, #32]
   12bec:	b	12614 <__assert_fail@plt+0x1510>
   12bf0:	tst	r6, #8
   12bf4:	beq	12c0c <__assert_fail@plt+0x1b08>
   12bf8:	ldr	r3, [sp, #12]
   12bfc:	add	r3, r3, r0
   12c00:	ldrb	r3, [r3, #-1]
   12c04:	cmp	r3, #48	; 0x30
   12c08:	beq	12e6c <__assert_fail@plt+0x1d68>
   12c0c:	sub	r9, r0, fp
   12c10:	b	125cc <__assert_fail@plt+0x14c8>
   12c14:	vmov	r0, r1, d8
   12c18:	bl	197d0 <__assert_fail@plt+0x86cc>
   12c1c:	mov	r4, r0
   12c20:	mov	r5, r1
   12c24:	bl	19710 <__assert_fail@plt+0x860c>
   12c28:	cmp	r8, #0
   12c2c:	vmov	d7, r0, r1
   12c30:	bne	12c50 <__assert_fail@plt+0x1b4c>
   12c34:	vcmp.f64	d8, d7
   12c38:	vmrs	APSR_nzcv, fpscr
   12c3c:	beq	12c50 <__assert_fail@plt+0x1b4c>
   12c40:	adds	r0, r4, #1
   12c44:	adc	r1, r5, #0
   12c48:	bl	19710 <__assert_fail@plt+0x860c>
   12c4c:	vmov	d7, r0, r1
   12c50:	vmov.f64	d8, d7
   12c54:	b	1259c <__assert_fail@plt+0x1498>
   12c58:	mov	r8, #0
   12c5c:	ands	r3, r6, #16
   12c60:	str	r3, [sp, #16]
   12c64:	str	r8, [sp, #48]	; 0x30
   12c68:	bne	12720 <__assert_fail@plt+0x161c>
   12c6c:	mvn	r3, #0
   12c70:	str	r3, [sp, #16]
   12c74:	and	r3, r6, #3
   12c78:	cmp	r3, #1
   12c7c:	beq	12d4c <__assert_fail@plt+0x1c48>
   12c80:	ldr	r9, [sp, #32]
   12c84:	and	r3, r6, #3
   12c88:	cmp	r3, #0
   12c8c:	bne	12cc4 <__assert_fail@plt+0x1bc0>
   12c90:	ldr	r3, [sp, #48]	; 0x30
   12c94:	add	r3, r8, r3
   12c98:	cmp	r3, #0
   12c9c:	ble	12cc4 <__assert_fail@plt+0x1bc0>
   12ca0:	adds	r4, r4, #1
   12ca4:	adc	r5, r5, #0
   12ca8:	ands	r3, r6, #16
   12cac:	cmp	r3, #0
   12cb0:	beq	12cc4 <__assert_fail@plt+0x1bc0>
   12cb4:	ldrd	r2, [sp, #24]
   12cb8:	cmp	r5, r3
   12cbc:	cmpeq	r4, r2
   12cc0:	beq	12e1c <__assert_fail@plt+0x1d18>
   12cc4:	mov	r8, r9
   12cc8:	mov	r0, r4
   12ccc:	mov	r1, r5
   12cd0:	mov	r2, #10
   12cd4:	mov	r3, #0
   12cd8:	bl	19784 <__assert_fail@plt+0x8680>
   12cdc:	add	r2, r2, #48	; 0x30
   12ce0:	mov	r0, r4
   12ce4:	mov	r1, r5
   12ce8:	mov	r3, #0
   12cec:	strb	r2, [r8, #-1]!
   12cf0:	mov	r2, #10
   12cf4:	bl	19784 <__assert_fail@plt+0x8680>
   12cf8:	cmp	r5, #0
   12cfc:	mov	r5, r1
   12d00:	cmpeq	r4, #9
   12d04:	mov	r4, r0
   12d08:	bhi	12cc8 <__assert_fail@plt+0x1bc4>
   12d0c:	b	125e8 <__assert_fail@plt+0x14e4>
   12d10:	ldr	r5, [sp, #12]
   12d14:	mvn	r2, #0
   12d18:	and	r1, r6, #3
   12d1c:	movw	r3, #40472	; 0x9e18
   12d20:	movt	r3, #1
   12d24:	vstr	d9, [sp]
   12d28:	mov	r0, r5
   12d2c:	bl	10ffc <__sprintf_chk@plt>
   12d30:	mov	r0, r5
   12d34:	bl	10fd8 <strlen@plt>
   12d38:	cmp	r0, r4
   12d3c:	bls	12bf0 <__assert_fail@plt+0x1aec>
   12d40:	vldr	d7, [pc, #976]	; 13118 <__assert_fail@plt+0x2014>
   12d44:	vmul.f64	d9, d9, d7
   12d48:	b	12548 <__assert_fail@plt+0x1444>
   12d4c:	and	r0, r4, #1
   12d50:	mov	r1, #0
   12d54:	ldr	r9, [sp, #32]
   12d58:	adds	r2, r0, r8
   12d5c:	adc	r3, r1, r8, asr #31
   12d60:	orr	r2, r2, r3
   12d64:	ldr	r3, [sp, #48]	; 0x30
   12d68:	cmp	r2, r1
   12d6c:	addne	r3, r3, #1
   12d70:	cmp	r3, #5
   12d74:	bgt	12ca0 <__assert_fail@plt+0x1b9c>
   12d78:	b	12cc4 <__assert_fail@plt+0x1bc0>
   12d7c:	movcs	r8, #2
   12d80:	movcc	r8, #3
   12d84:	b	12714 <__assert_fail@plt+0x1610>
   12d88:	tst	r6, #64	; 0x40
   12d8c:	bne	12df4 <__assert_fail@plt+0x1cf0>
   12d90:	ldr	r2, [sp, #16]
   12d94:	cmp	r2, #0
   12d98:	beq	13108 <__assert_fail@plt+0x2004>
   12d9c:	ldr	r0, [sp, #16]
   12da0:	ldr	r2, [sp, #40]	; 0x28
   12da4:	adds	r1, r2, #0
   12da8:	movne	r1, #1
   12dac:	cmp	r2, #0
   12db0:	cmpeq	r0, #1
   12db4:	bne	12bb8 <__assert_fail@plt+0x1ab4>
   12db8:	ldr	r2, [sp, #32]
   12dbc:	mov	r1, #107	; 0x6b
   12dc0:	cmp	r3, #0
   12dc4:	strb	r1, [r2], #1
   12dc8:	bne	12be0 <__assert_fail@plt+0x1adc>
   12dcc:	str	r2, [sp, #32]
   12dd0:	b	12614 <__assert_fail@plt+0x1510>
   12dd4:	mov	r3, #0
   12dd8:	str	r3, [sp, #16]
   12ddc:	b	12c74 <__assert_fail@plt+0x1b70>
   12de0:	ldr	r1, [sp, #32]
   12de4:	mov	r3, #105	; 0x69
   12de8:	add	r2, r1, #2
   12dec:	strb	r3, [r1, #1]
   12df0:	b	12be0 <__assert_fail@plt+0x1adc>
   12df4:	ldr	r1, [sp, #12]
   12df8:	mov	r2, #32
   12dfc:	add	r0, r1, #648	; 0x288
   12e00:	strb	r2, [r1, #647]	; 0x287
   12e04:	str	r0, [sp, #32]
   12e08:	b	12d90 <__assert_fail@plt+0x1c8c>
   12e0c:	adds	r8, r2, #0
   12e10:	movne	r8, #1
   12e14:	mov	ip, r8
   12e18:	b	12784 <__assert_fail@plt+0x1680>
   12e1c:	ldr	r3, [sp, #16]
   12e20:	tst	r6, #8
   12e24:	add	r3, r3, #1
   12e28:	str	r3, [sp, #16]
   12e2c:	beq	13034 <__assert_fail@plt+0x1f30>
   12e30:	mov	r3, #49	; 0x31
   12e34:	sub	r8, r9, #1
   12e38:	strb	r3, [r9, #-1]
   12e3c:	b	125e8 <__assert_fail@plt+0x14e4>
   12e40:	mov	r3, #0
   12e44:	str	r3, [sp, #16]
   12e48:	b	12604 <__assert_fail@plt+0x1500>
   12e4c:	adds	ip, r3, #0
   12e50:	movne	ip, #1
   12e54:	mov	r8, ip
   12e58:	b	127dc <__assert_fail@plt+0x16d8>
   12e5c:	adds	ip, r3, #0
   12e60:	movne	ip, #1
   12e64:	mov	r8, ip
   12e68:	b	12838 <__assert_fail@plt+0x1734>
   12e6c:	vldr	d7, [pc, #676]	; 13118 <__assert_fail@plt+0x2014>
   12e70:	and	r3, r6, #3
   12e74:	cmp	r3, #1
   12e78:	vmul.f64	d9, d9, d7
   12e7c:	bne	124f4 <__assert_fail@plt+0x13f0>
   12e80:	b	12548 <__assert_fail@plt+0x1444>
   12e84:	adds	ip, r3, #0
   12e88:	movne	ip, #1
   12e8c:	mov	r8, ip
   12e90:	b	12894 <__assert_fail@plt+0x1790>
   12e94:	adds	ip, r3, #0
   12e98:	movne	ip, #1
   12e9c:	mov	r8, ip
   12ea0:	b	128f0 <__assert_fail@plt+0x17ec>
   12ea4:	adds	ip, r3, #0
   12ea8:	movne	ip, #1
   12eac:	mov	r8, ip
   12eb0:	b	1294c <__assert_fail@plt+0x1848>
   12eb4:	mov	r3, #1
   12eb8:	str	r3, [sp, #16]
   12ebc:	b	12444 <__assert_fail@plt+0x1340>
   12ec0:	mov	r3, #2
   12ec4:	vmov.f64	d7, d6
   12ec8:	str	r3, [sp, #16]
   12ecc:	b	12444 <__assert_fail@plt+0x1340>
   12ed0:	mov	r3, #3
   12ed4:	vmov.f64	d7, d5
   12ed8:	str	r3, [sp, #16]
   12edc:	b	12444 <__assert_fail@plt+0x1340>
   12ee0:	cmp	r3, #9
   12ee4:	beq	13010 <__assert_fail@plt+0x1f0c>
   12ee8:	add	r3, r3, #49	; 0x31
   12eec:	uxtb	r3, r3
   12ef0:	b	129a4 <__assert_fail@plt+0x18a0>
   12ef4:	mov	r3, #4
   12ef8:	vmov.f64	d7, d6
   12efc:	str	r3, [sp, #16]
   12f00:	b	12444 <__assert_fail@plt+0x1340>
   12f04:	mov	r3, #5
   12f08:	vmov.f64	d7, d5
   12f0c:	str	r3, [sp, #16]
   12f10:	b	12444 <__assert_fail@plt+0x1340>
   12f14:	mov	r3, #6
   12f18:	vmov.f64	d7, d6
   12f1c:	str	r3, [sp, #16]
   12f20:	b	12444 <__assert_fail@plt+0x1340>
   12f24:	ldr	r3, [sp, #48]	; 0x30
   12f28:	and	r3, r3, #1
   12f2c:	add	r3, r3, r8
   12f30:	cmp	r3, #2
   12f34:	movle	r3, #0
   12f38:	movgt	r3, #1
   12f3c:	b	1297c <__assert_fail@plt+0x1878>
   12f40:	tst	r6, #64	; 0x40
   12f44:	and	r3, r6, #256	; 0x100
   12f48:	moveq	r2, #2
   12f4c:	streq	r2, [sp, #16]
   12f50:	beq	12bac <__assert_fail@plt+0x1aa8>
   12f54:	ldr	r1, [sp, #12]
   12f58:	mov	r2, #32
   12f5c:	add	r0, r1, #648	; 0x288
   12f60:	strb	r2, [r1, #647]	; 0x287
   12f64:	mov	r2, #2
   12f68:	str	r2, [sp, #16]
   12f6c:	str	r0, [sp, #32]
   12f70:	b	12bac <__assert_fail@plt+0x1aa8>
   12f74:	tst	r6, #64	; 0x40
   12f78:	and	r3, r6, #256	; 0x100
   12f7c:	moveq	r2, #3
   12f80:	streq	r2, [sp, #16]
   12f84:	beq	12bac <__assert_fail@plt+0x1aa8>
   12f88:	ldr	r1, [sp, #12]
   12f8c:	mov	r2, #32
   12f90:	add	r0, r1, #648	; 0x288
   12f94:	strb	r2, [r1, #647]	; 0x287
   12f98:	mov	r2, #3
   12f9c:	str	r2, [sp, #16]
   12fa0:	str	r0, [sp, #32]
   12fa4:	b	12bac <__assert_fail@plt+0x1aa8>
   12fa8:	tst	r6, #64	; 0x40
   12fac:	and	r3, r6, #256	; 0x100
   12fb0:	moveq	r2, #5
   12fb4:	streq	r2, [sp, #16]
   12fb8:	beq	12bac <__assert_fail@plt+0x1aa8>
   12fbc:	ldr	r1, [sp, #12]
   12fc0:	mov	r2, #32
   12fc4:	add	r0, r1, #648	; 0x288
   12fc8:	strb	r2, [r1, #647]	; 0x287
   12fcc:	mov	r2, #5
   12fd0:	str	r2, [sp, #16]
   12fd4:	str	r0, [sp, #32]
   12fd8:	b	12bac <__assert_fail@plt+0x1aa8>
   12fdc:	tst	r6, #64	; 0x40
   12fe0:	and	r3, r6, #256	; 0x100
   12fe4:	moveq	r2, #6
   12fe8:	streq	r2, [sp, #16]
   12fec:	beq	12bac <__assert_fail@plt+0x1aa8>
   12ff0:	ldr	r1, [sp, #12]
   12ff4:	mov	r2, #32
   12ff8:	add	r0, r1, #648	; 0x288
   12ffc:	strb	r2, [r1, #647]	; 0x287
   13000:	mov	r2, #6
   13004:	str	r2, [sp, #16]
   13008:	str	r0, [sp, #32]
   1300c:	b	12bac <__assert_fail@plt+0x1aa8>
   13010:	adds	r4, r4, #1
   13014:	adc	r5, r5, #0
   13018:	cmp	r5, #0
   1301c:	cmpeq	r4, #10
   13020:	beq	13088 <__assert_fail@plt+0x1f84>
   13024:	mov	r8, #0
   13028:	b	12998 <__assert_fail@plt+0x1894>
   1302c:	ldr	r9, [sp, #32]
   13030:	b	129cc <__assert_fail@plt+0x18c8>
   13034:	mov	r0, #48	; 0x30
   13038:	mvn	r3, fp
   1303c:	ldr	r1, [sp, #44]	; 0x2c
   13040:	mov	r2, fp
   13044:	strb	r0, [r9, #-1]
   13048:	add	r9, r9, r3
   1304c:	mov	r0, r9
   13050:	bl	10eb8 <memcpy@plt>
   13054:	b	12e30 <__assert_fail@plt+0x1d2c>
   13058:	mov	r3, #1
   1305c:	str	r3, [sp, #16]
   13060:	b	12954 <__assert_fail@plt+0x1850>
   13064:	mov	r3, #3
   13068:	str	r3, [sp, #16]
   1306c:	b	12954 <__assert_fail@plt+0x1850>
   13070:	mov	r3, #2
   13074:	str	r3, [sp, #16]
   13078:	b	12954 <__assert_fail@plt+0x1850>
   1307c:	mov	r3, #4
   13080:	str	r3, [sp, #16]
   13084:	b	12954 <__assert_fail@plt+0x1850>
   13088:	mov	r8, #0
   1308c:	ldr	r9, [sp, #32]
   13090:	b	129cc <__assert_fail@plt+0x18c8>
   13094:	mov	r3, #5
   13098:	str	r3, [sp, #16]
   1309c:	b	12954 <__assert_fail@plt+0x1850>
   130a0:	tst	r6, #64	; 0x40
   130a4:	and	r3, r6, #256	; 0x100
   130a8:	moveq	r2, #4
   130ac:	streq	r2, [sp, #16]
   130b0:	beq	12bac <__assert_fail@plt+0x1aa8>
   130b4:	ldr	r1, [sp, #12]
   130b8:	mov	r2, #32
   130bc:	add	r0, r1, #648	; 0x288
   130c0:	strb	r2, [r1, #647]	; 0x287
   130c4:	mov	r2, #4
   130c8:	str	r2, [sp, #16]
   130cc:	str	r0, [sp, #32]
   130d0:	b	12bac <__assert_fail@plt+0x1aa8>
   130d4:	tst	r6, #64	; 0x40
   130d8:	and	r3, r6, #256	; 0x100
   130dc:	moveq	r2, #1
   130e0:	streq	r2, [sp, #16]
   130e4:	beq	12d9c <__assert_fail@plt+0x1c98>
   130e8:	ldr	r1, [sp, #12]
   130ec:	mov	r2, #32
   130f0:	add	r0, r1, #648	; 0x288
   130f4:	strb	r2, [r1, #647]	; 0x287
   130f8:	mov	r2, #1
   130fc:	str	r2, [sp, #16]
   13100:	str	r0, [sp, #32]
   13104:	b	12d9c <__assert_fail@plt+0x1c98>
   13108:	cmp	r3, #0
   1310c:	ldrne	r2, [sp, #32]
   13110:	bne	12be0 <__assert_fail@plt+0x1adc>
   13114:	b	12614 <__assert_fail@plt+0x1510>
   13118:	andeq	r0, r0, r0
   1311c:	eormi	r0, r4, r0
   13120:	tst	r6, #64	; 0x40
   13124:	and	r3, r6, #256	; 0x100
   13128:	moveq	r2, #7
   1312c:	streq	r2, [sp, #16]
   13130:	beq	12bac <__assert_fail@plt+0x1aa8>
   13134:	ldr	r1, [sp, #12]
   13138:	mov	r2, #32
   1313c:	add	r0, r1, #648	; 0x288
   13140:	strb	r2, [r1, #647]	; 0x287
   13144:	mov	r2, #7
   13148:	str	r2, [sp, #16]
   1314c:	str	r0, [sp, #32]
   13150:	b	12bac <__assert_fail@plt+0x1aa8>
   13154:	strd	r4, [sp, #-36]!	; 0xffffffdc
   13158:	subs	r4, r0, #0
   1315c:	strd	r6, [sp, #8]
   13160:	mov	r7, r1
   13164:	mov	r6, r2
   13168:	strd	r8, [sp, #16]
   1316c:	strd	sl, [sp, #24]
   13170:	str	lr, [sp, #32]
   13174:	sub	sp, sp, #20
   13178:	beq	132b8 <__assert_fail@plt+0x21b4>
   1317c:	ldrb	r3, [r4]
   13180:	cmp	r3, #39	; 0x27
   13184:	beq	131f8 <__assert_fail@plt+0x20f4>
   13188:	mov	r9, #160	; 0xa0
   1318c:	mov	fp, #416	; 0x1a0
   13190:	mov	sl, #384	; 0x180
   13194:	mov	r8, #0
   13198:	movw	r5, #40428	; 0x9dec
   1319c:	movt	r5, #1
   131a0:	add	r2, r5, #12
   131a4:	add	r1, r5, #20
   131a8:	mov	r3, #4
   131ac:	mov	r0, r4
   131b0:	bl	18a08 <__assert_fail@plt+0x7904>
   131b4:	cmp	r0, #0
   131b8:	blt	13210 <__assert_fail@plt+0x210c>
   131bc:	add	r5, r5, r0, lsl #2
   131c0:	mov	r2, #1
   131c4:	mov	r3, #0
   131c8:	mov	r0, #0
   131cc:	ldr	r1, [r5, #12]
   131d0:	strd	r2, [r6]
   131d4:	orr	r8, r8, r1
   131d8:	str	r8, [r7]
   131dc:	add	sp, sp, #20
   131e0:	ldrd	r4, [sp]
   131e4:	ldrd	r6, [sp, #8]
   131e8:	ldrd	r8, [sp, #16]
   131ec:	ldrd	sl, [sp, #24]
   131f0:	add	sp, sp, #32
   131f4:	pop	{pc}		; (ldr pc, [sp], #4)
   131f8:	add	r4, r4, #1
   131fc:	mov	r9, #164	; 0xa4
   13200:	mov	fp, #420	; 0x1a4
   13204:	mov	sl, #388	; 0x184
   13208:	mov	r8, #4
   1320c:	b	13198 <__assert_fail@plt+0x2094>
   13210:	movw	r0, #40520	; 0x9e48
   13214:	movt	r0, #1
   13218:	mov	r3, r6
   1321c:	mov	r2, #0
   13220:	add	r1, sp, #12
   13224:	str	r0, [sp]
   13228:	mov	r0, r4
   1322c:	bl	17b9c <__assert_fail@plt+0x6a98>
   13230:	cmp	r0, #0
   13234:	bne	1327c <__assert_fail@plt+0x2178>
   13238:	ldrb	r3, [r4]
   1323c:	sub	r3, r3, #48	; 0x30
   13240:	cmp	r3, #9
   13244:	bls	13270 <__assert_fail@plt+0x216c>
   13248:	ldr	r2, [sp, #12]
   1324c:	cmp	r4, r2
   13250:	bne	13260 <__assert_fail@plt+0x215c>
   13254:	b	1330c <__assert_fail@plt+0x2208>
   13258:	cmp	r2, r4
   1325c:	beq	1330c <__assert_fail@plt+0x2208>
   13260:	ldrb	r3, [r4, #1]!
   13264:	sub	r3, r3, #48	; 0x30
   13268:	cmp	r3, #9
   1326c:	bhi	13258 <__assert_fail@plt+0x2154>
   13270:	ldrd	r2, [r6]
   13274:	str	r8, [r7]
   13278:	b	13288 <__assert_fail@plt+0x2184>
   1327c:	mov	r1, #0
   13280:	ldrd	r2, [r6]
   13284:	str	r1, [r7]
   13288:	orrs	r3, r2, r3
   1328c:	bne	131dc <__assert_fail@plt+0x20d8>
   13290:	movw	r0, #40504	; 0x9e38
   13294:	movt	r0, #1
   13298:	bl	10f78 <getenv@plt>
   1329c:	cmp	r0, #0
   132a0:	mov	r3, #0
   132a4:	moveq	r2, #1024	; 0x400
   132a8:	movne	r2, #512	; 0x200
   132ac:	mov	r0, #4
   132b0:	strd	r2, [r6]
   132b4:	b	131dc <__assert_fail@plt+0x20d8>
   132b8:	movw	r0, #40480	; 0x9e20
   132bc:	movt	r0, #1
   132c0:	bl	10f78 <getenv@plt>
   132c4:	subs	r4, r0, #0
   132c8:	bne	1317c <__assert_fail@plt+0x2078>
   132cc:	movw	r0, #40492	; 0x9e2c
   132d0:	movt	r0, #1
   132d4:	bl	10f78 <getenv@plt>
   132d8:	subs	r4, r0, #0
   132dc:	bne	1317c <__assert_fail@plt+0x2078>
   132e0:	movw	r0, #40504	; 0x9e38
   132e4:	movt	r0, #1
   132e8:	bl	10f78 <getenv@plt>
   132ec:	subs	r3, r0, #0
   132f0:	beq	13338 <__assert_fail@plt+0x2234>
   132f4:	mov	r2, #512	; 0x200
   132f8:	mov	r3, #0
   132fc:	mov	r0, r4
   13300:	strd	r2, [r6]
   13304:	str	r4, [r7]
   13308:	b	131dc <__assert_fail@plt+0x20d8>
   1330c:	ldrb	r3, [r2, #-1]
   13310:	cmp	r3, #66	; 0x42
   13314:	beq	13320 <__assert_fail@plt+0x221c>
   13318:	mov	r8, r9
   1331c:	b	13270 <__assert_fail@plt+0x216c>
   13320:	ldrb	r3, [r2, #-2]
   13324:	cmp	r3, #105	; 0x69
   13328:	movne	r8, sl
   1332c:	bne	13270 <__assert_fail@plt+0x216c>
   13330:	mov	r9, fp
   13334:	b	13318 <__assert_fail@plt+0x2214>
   13338:	mov	r4, #1024	; 0x400
   1333c:	mov	r5, #0
   13340:	mov	r0, r3
   13344:	strd	r4, [r6]
   13348:	str	r3, [r7]
   1334c:	b	131dc <__assert_fail@plt+0x20d8>
   13350:	strd	r4, [sp, #-16]!
   13354:	subs	r4, r0, #0
   13358:	str	r6, [sp, #8]
   1335c:	str	lr, [sp, #12]
   13360:	beq	133f8 <__assert_fail@plt+0x22f4>
   13364:	mov	r1, #47	; 0x2f
   13368:	bl	1108c <strrchr@plt>
   1336c:	subs	r5, r0, #0
   13370:	beq	133d0 <__assert_fail@plt+0x22cc>
   13374:	add	r6, r5, #1
   13378:	sub	r3, r6, r4
   1337c:	cmp	r3, #6
   13380:	ble	133d0 <__assert_fail@plt+0x22cc>
   13384:	movw	r1, #40616	; 0x9ea8
   13388:	movt	r1, #1
   1338c:	mov	r2, #7
   13390:	sub	r0, r5, #6
   13394:	bl	110e0 <strncmp@plt>
   13398:	cmp	r0, #0
   1339c:	bne	133d0 <__assert_fail@plt+0x22cc>
   133a0:	movw	r1, #40624	; 0x9eb0
   133a4:	movt	r1, #1
   133a8:	mov	r2, #3
   133ac:	mov	r0, r6
   133b0:	bl	110e0 <strncmp@plt>
   133b4:	cmp	r0, #0
   133b8:	movne	r4, r6
   133bc:	bne	133d0 <__assert_fail@plt+0x22cc>
   133c0:	add	r4, r5, #4
   133c4:	movw	r3, #45400	; 0xb158
   133c8:	movt	r3, #2
   133cc:	str	r4, [r3]
   133d0:	movw	r2, #45452	; 0xb18c
   133d4:	movt	r2, #2
   133d8:	ldr	r6, [sp, #8]
   133dc:	movw	r3, #45404	; 0xb15c
   133e0:	movt	r3, #2
   133e4:	str	r4, [r2]
   133e8:	str	r4, [r3]
   133ec:	ldrd	r4, [sp]
   133f0:	add	sp, sp, #12
   133f4:	pop	{pc}		; (ldr pc, [sp], #4)
   133f8:	movw	r3, #45416	; 0xb168
   133fc:	movt	r3, #2
   13400:	movw	r0, #40560	; 0x9e70
   13404:	movt	r0, #1
   13408:	ldr	r3, [r3]
   1340c:	mov	r2, #55	; 0x37
   13410:	mov	r1, #1
   13414:	bl	10f30 <fwrite@plt>
   13418:	bl	110ec <abort@plt>
   1341c:	mov	r2, #5
   13420:	strd	r4, [sp, #-16]!
   13424:	mov	r5, r0
   13428:	str	r6, [sp, #8]
   1342c:	mov	r6, r1
   13430:	mov	r1, r0
   13434:	mov	r0, #0
   13438:	str	lr, [sp, #12]
   1343c:	bl	10ef4 <dcgettext@plt>
   13440:	cmp	r5, r0
   13444:	mov	r4, r0
   13448:	beq	13460 <__assert_fail@plt+0x235c>
   1344c:	mov	r0, r4
   13450:	ldrd	r4, [sp]
   13454:	ldr	r6, [sp, #8]
   13458:	add	sp, sp, #12
   1345c:	pop	{pc}		; (ldr pc, [sp], #4)
   13460:	bl	191b4 <__assert_fail@plt+0x80b0>
   13464:	ldrb	r3, [r0]
   13468:	bic	r3, r3, #32
   1346c:	cmp	r3, #85	; 0x55
   13470:	bne	134d8 <__assert_fail@plt+0x23d4>
   13474:	ldrb	r3, [r0, #1]
   13478:	bic	r3, r3, #32
   1347c:	cmp	r3, #84	; 0x54
   13480:	bne	13558 <__assert_fail@plt+0x2454>
   13484:	ldrb	r3, [r0, #2]
   13488:	bic	r3, r3, #32
   1348c:	cmp	r3, #70	; 0x46
   13490:	bne	13558 <__assert_fail@plt+0x2454>
   13494:	ldrb	r3, [r0, #3]
   13498:	cmp	r3, #45	; 0x2d
   1349c:	bne	13558 <__assert_fail@plt+0x2454>
   134a0:	ldrb	r3, [r0, #4]
   134a4:	cmp	r3, #56	; 0x38
   134a8:	bne	13558 <__assert_fail@plt+0x2454>
   134ac:	ldrb	r3, [r0, #5]
   134b0:	cmp	r3, #0
   134b4:	bne	13558 <__assert_fail@plt+0x2454>
   134b8:	ldrb	r2, [r4]
   134bc:	movw	r3, #40716	; 0x9f0c
   134c0:	movt	r3, #1
   134c4:	movw	r4, #40728	; 0x9f18
   134c8:	movt	r4, #1
   134cc:	cmp	r2, #96	; 0x60
   134d0:	movne	r4, r3
   134d4:	b	1344c <__assert_fail@plt+0x2348>
   134d8:	cmp	r3, #71	; 0x47
   134dc:	bne	13558 <__assert_fail@plt+0x2454>
   134e0:	ldrb	r3, [r0, #1]
   134e4:	bic	r3, r3, #32
   134e8:	cmp	r3, #66	; 0x42
   134ec:	bne	13558 <__assert_fail@plt+0x2454>
   134f0:	ldrb	r3, [r0, #2]
   134f4:	cmp	r3, #49	; 0x31
   134f8:	bne	13558 <__assert_fail@plt+0x2454>
   134fc:	ldrb	r3, [r0, #3]
   13500:	cmp	r3, #56	; 0x38
   13504:	bne	13558 <__assert_fail@plt+0x2454>
   13508:	ldrb	r3, [r0, #4]
   1350c:	cmp	r3, #48	; 0x30
   13510:	bne	13558 <__assert_fail@plt+0x2454>
   13514:	ldrb	r3, [r0, #5]
   13518:	cmp	r3, #51	; 0x33
   1351c:	bne	13558 <__assert_fail@plt+0x2454>
   13520:	ldrb	r3, [r0, #6]
   13524:	cmp	r3, #48	; 0x30
   13528:	bne	13558 <__assert_fail@plt+0x2454>
   1352c:	ldrb	r3, [r0, #7]
   13530:	cmp	r3, #0
   13534:	bne	13558 <__assert_fail@plt+0x2454>
   13538:	ldrb	r2, [r4]
   1353c:	movw	r3, #40720	; 0x9f10
   13540:	movt	r3, #1
   13544:	movw	r4, #40724	; 0x9f14
   13548:	movt	r4, #1
   1354c:	cmp	r2, #96	; 0x60
   13550:	movne	r4, r3
   13554:	b	1344c <__assert_fail@plt+0x2348>
   13558:	movw	r3, #40732	; 0x9f1c
   1355c:	movt	r3, #1
   13560:	cmp	r6, #9
   13564:	movw	r4, #40712	; 0x9f08
   13568:	movt	r4, #1
   1356c:	movne	r4, r3
   13570:	b	1344c <__assert_fail@plt+0x2348>
   13574:	strd	r4, [sp, #-36]!	; 0xffffffdc
   13578:	strd	r6, [sp, #8]
   1357c:	strd	r8, [sp, #16]
   13580:	mov	r8, r3
   13584:	strd	sl, [sp, #24]
   13588:	mov	fp, r0
   1358c:	mov	sl, r1
   13590:	str	lr, [sp, #32]
   13594:	sub	sp, sp, #140	; 0x8c
   13598:	ldr	r3, [sp, #180]	; 0xb4
   1359c:	str	r2, [sp, #28]
   135a0:	and	r4, r3, #2
   135a4:	ubfx	r3, r3, #1, #1
   135a8:	str	r3, [sp, #44]	; 0x2c
   135ac:	bl	10f48 <__ctype_get_mb_cur_max@plt>
   135b0:	ldr	r3, [sp, #176]	; 0xb0
   135b4:	str	r0, [sp, #76]	; 0x4c
   135b8:	cmp	r3, #10
   135bc:	ldrls	pc, [pc, r3, lsl #2]
   135c0:	b	14f5c <__assert_fail@plt+0x3e58>
   135c4:	andeq	r3, r1, r4, asr #20
   135c8:	andeq	r3, r1, r0, ror #22
   135cc:	ldrdeq	r4, [r1], -ip
   135d0:	andeq	r3, r1, ip, asr #23
   135d4:	andeq	r3, r1, ip, asr #18
   135d8:	andeq	r3, r1, r8, asr #19
   135dc:	andeq	r3, r1, r0, lsr #21
   135e0:	andeq	r3, r1, r8, lsl #22
   135e4:	strdeq	r3, [r1], -r0
   135e8:	strdeq	r3, [r1], -r0
   135ec:	strdeq	r3, [r1], -r0
   135f0:	ldr	r3, [sp, #176]	; 0xb0
   135f4:	cmp	r3, #10
   135f8:	beq	13624 <__assert_fail@plt+0x2520>
   135fc:	mov	r1, r3
   13600:	movw	r0, #40736	; 0x9f20
   13604:	movt	r0, #1
   13608:	bl	1341c <__assert_fail@plt+0x2318>
   1360c:	str	r0, [sp, #188]	; 0xbc
   13610:	movw	r0, #40732	; 0x9f1c
   13614:	movt	r0, #1
   13618:	ldr	r1, [sp, #176]	; 0xb0
   1361c:	bl	1341c <__assert_fail@plt+0x2318>
   13620:	str	r0, [sp, #192]	; 0xc0
   13624:	cmp	r4, #0
   13628:	movne	r4, #0
   1362c:	beq	14ce8 <__assert_fail@plt+0x3be4>
   13630:	mov	r5, #0
   13634:	ldr	r0, [sp, #192]	; 0xc0
   13638:	mov	r9, r5
   1363c:	str	r5, [sp, #64]	; 0x40
   13640:	bl	10fd8 <strlen@plt>
   13644:	mov	r3, #1
   13648:	ldr	r2, [sp, #44]	; 0x2c
   1364c:	cmp	r0, r5
   13650:	moveq	r2, r5
   13654:	str	r3, [sp, #32]
   13658:	str	r3, [sp, #48]	; 0x30
   1365c:	str	r5, [sp, #52]	; 0x34
   13660:	str	r3, [sp, #60]	; 0x3c
   13664:	ldr	r3, [sp, #180]	; 0xb4
   13668:	str	r0, [sp, #56]	; 0x38
   1366c:	str	r5, [sp, #68]	; 0x44
   13670:	str	r5, [sp, #80]	; 0x50
   13674:	str	r5, [sp, #84]	; 0x54
   13678:	and	r3, r3, #1
   1367c:	str	r2, [sp, #88]	; 0x58
   13680:	str	r3, [sp, #92]	; 0x5c
   13684:	ldr	r3, [sp, #180]	; 0xb4
   13688:	and	r3, r3, #4
   1368c:	str	r3, [sp, #96]	; 0x60
   13690:	ldr	r3, [sp, #192]	; 0xc0
   13694:	str	r3, [sp, #72]	; 0x48
   13698:	mov	r3, fp
   1369c:	mov	r7, #0
   136a0:	mov	fp, r9
   136a4:	mov	r9, r3
   136a8:	cmn	r8, #1
   136ac:	beq	13cb0 <__assert_fail@plt+0x2bac>
   136b0:	subs	r6, r8, r7
   136b4:	movne	r6, #1
   136b8:	cmp	r6, #0
   136bc:	beq	13cc8 <__assert_fail@plt+0x2bc4>
   136c0:	ldr	r0, [sp, #28]
   136c4:	ldr	r3, [sp, #48]	; 0x30
   136c8:	cmp	r3, #0
   136cc:	add	r3, r0, r7
   136d0:	str	r3, [sp, #36]	; 0x24
   136d4:	beq	14154 <__assert_fail@plt+0x3050>
   136d8:	ldr	r2, [sp, #56]	; 0x38
   136dc:	cmp	r2, #0
   136e0:	beq	14654 <__assert_fail@plt+0x3550>
   136e4:	cmp	r2, #1
   136e8:	mov	r3, r2
   136ec:	movls	r3, #0
   136f0:	movhi	r3, #1
   136f4:	cmn	r8, #1
   136f8:	add	r5, r7, r2
   136fc:	movne	r3, #0
   13700:	cmp	r3, #0
   13704:	beq	13710 <__assert_fail@plt+0x260c>
   13708:	bl	10fd8 <strlen@plt>
   1370c:	mov	r8, r0
   13710:	cmp	r5, r8
   13714:	bhi	14654 <__assert_fail@plt+0x3550>
   13718:	ldr	r0, [sp, #36]	; 0x24
   1371c:	ldr	r2, [sp, #56]	; 0x38
   13720:	ldr	r1, [sp, #72]	; 0x48
   13724:	bl	10edc <memcmp@plt>
   13728:	cmp	r0, #0
   1372c:	bne	14654 <__assert_fail@plt+0x3550>
   13730:	ldr	r3, [sp, #44]	; 0x2c
   13734:	cmp	r3, #0
   13738:	bne	14e00 <__assert_fail@plt+0x3cfc>
   1373c:	ldr	r3, [sp, #36]	; 0x24
   13740:	ldrb	r5, [r3]
   13744:	cmp	r5, #126	; 0x7e
   13748:	ldrls	pc, [pc, r5, lsl #2]
   1374c:	b	14be8 <__assert_fail@plt+0x3ae4>
   13750:	andeq	r3, r1, r4, lsr #28
   13754:	andeq	r4, r1, r8, ror #23
   13758:	andeq	r4, r1, r8, ror #23
   1375c:	andeq	r4, r1, r8, ror #23
   13760:	andeq	r4, r1, r8, ror #23
   13764:	andeq	r4, r1, r8, ror #23
   13768:	andeq	r4, r1, r8, ror #23
   1376c:	andeq	r3, r1, ip, ror sp
   13770:	andeq	r3, r1, r4, ror sp
   13774:	andeq	r3, r1, r4, lsl #27
   13778:	andeq	r3, r1, r8, lsl #30
   1377c:	strdeq	r3, [r1], -r8
   13780:	andeq	r3, r1, r0, lsr #24
   13784:	ldrdeq	r3, [r1], -r4
   13788:	andeq	r4, r1, r8, ror #23
   1378c:	andeq	r4, r1, r8, ror #23
   13790:	andeq	r4, r1, r8, ror #23
   13794:	andeq	r4, r1, r8, ror #23
   13798:	andeq	r4, r1, r8, ror #23
   1379c:	andeq	r4, r1, r8, ror #23
   137a0:	andeq	r4, r1, r8, ror #23
   137a4:	andeq	r4, r1, r8, ror #23
   137a8:	andeq	r4, r1, r8, ror #23
   137ac:	andeq	r4, r1, r8, ror #23
   137b0:	andeq	r4, r1, r8, ror #23
   137b4:	andeq	r4, r1, r8, ror #23
   137b8:	andeq	r4, r1, r8, ror #23
   137bc:	andeq	r4, r1, r8, ror #23
   137c0:	andeq	r4, r1, r8, ror #23
   137c4:	andeq	r4, r1, r8, ror #23
   137c8:	andeq	r4, r1, r8, ror #23
   137cc:	andeq	r4, r1, r8, ror #23
   137d0:	andeq	r3, r1, r0, lsl #31
   137d4:	andeq	r3, r1, r4, ror pc
   137d8:	andeq	r3, r1, r4, ror pc
   137dc:	andeq	r3, r1, r8, ror #30
   137e0:	andeq	r3, r1, r4, ror pc
   137e4:	andeq	r4, r1, ip, asr #32
   137e8:	andeq	r3, r1, r4, ror pc
   137ec:	strheq	r4, [r1], -ip
   137f0:	andeq	r3, r1, r4, ror pc
   137f4:	andeq	r3, r1, r4, ror pc
   137f8:	andeq	r3, r1, r4, ror pc
   137fc:	andeq	r4, r1, ip, asr #32
   13800:	andeq	r4, r1, ip, asr #32
   13804:	andeq	r4, r1, ip, asr #32
   13808:	andeq	r4, r1, ip, asr #32
   1380c:	andeq	r4, r1, ip, asr #32
   13810:	andeq	r4, r1, ip, asr #32
   13814:	andeq	r4, r1, ip, asr #32
   13818:	andeq	r4, r1, ip, asr #32
   1381c:	andeq	r4, r1, ip, asr #32
   13820:	andeq	r4, r1, ip, asr #32
   13824:	andeq	r4, r1, ip, asr #32
   13828:	andeq	r4, r1, ip, asr #32
   1382c:	andeq	r4, r1, ip, asr #32
   13830:	andeq	r4, r1, ip, asr #32
   13834:	andeq	r4, r1, ip, asr #32
   13838:	andeq	r4, r1, ip, asr #32
   1383c:	andeq	r3, r1, r4, ror pc
   13840:	andeq	r3, r1, r4, ror pc
   13844:	andeq	r3, r1, r4, ror pc
   13848:	andeq	r3, r1, r4, ror pc
   1384c:	andeq	r4, r1, ip, rrx
   13850:	andeq	r4, r1, r8, ror #23
   13854:	andeq	r4, r1, ip, asr #32
   13858:	andeq	r4, r1, ip, asr #32
   1385c:	andeq	r4, r1, ip, asr #32
   13860:	andeq	r4, r1, ip, asr #32
   13864:	andeq	r4, r1, ip, asr #32
   13868:	andeq	r4, r1, ip, asr #32
   1386c:	andeq	r4, r1, ip, asr #32
   13870:	andeq	r4, r1, ip, asr #32
   13874:	andeq	r4, r1, ip, asr #32
   13878:	andeq	r4, r1, ip, asr #32
   1387c:	andeq	r4, r1, ip, asr #32
   13880:	andeq	r4, r1, ip, asr #32
   13884:	andeq	r4, r1, ip, asr #32
   13888:	andeq	r4, r1, ip, asr #32
   1388c:	andeq	r4, r1, ip, asr #32
   13890:	andeq	r4, r1, ip, asr #32
   13894:	andeq	r4, r1, ip, asr #32
   13898:	andeq	r4, r1, ip, asr #32
   1389c:	andeq	r4, r1, ip, asr #32
   138a0:	andeq	r4, r1, ip, asr #32
   138a4:	andeq	r4, r1, ip, asr #32
   138a8:	andeq	r4, r1, ip, asr #32
   138ac:	andeq	r4, r1, ip, asr #32
   138b0:	andeq	r4, r1, ip, asr #32
   138b4:	andeq	r4, r1, ip, asr #32
   138b8:	andeq	r4, r1, ip, asr #32
   138bc:	andeq	r3, r1, r4, ror pc
   138c0:	andeq	r4, r1, r0, lsl r0
   138c4:	andeq	r4, r1, ip, asr #32
   138c8:	andeq	r3, r1, r4, ror pc
   138cc:	andeq	r4, r1, ip, asr #32
   138d0:	andeq	r3, r1, r4, ror pc
   138d4:	andeq	r4, r1, ip, asr #32
   138d8:	andeq	r4, r1, ip, asr #32
   138dc:	andeq	r4, r1, ip, asr #32
   138e0:	andeq	r4, r1, ip, asr #32
   138e4:	andeq	r4, r1, ip, asr #32
   138e8:	andeq	r4, r1, ip, asr #32
   138ec:	andeq	r4, r1, ip, asr #32
   138f0:	andeq	r4, r1, ip, asr #32
   138f4:	andeq	r4, r1, ip, asr #32
   138f8:	andeq	r4, r1, ip, asr #32
   138fc:	andeq	r4, r1, ip, asr #32
   13900:	andeq	r4, r1, ip, asr #32
   13904:	andeq	r4, r1, ip, asr #32
   13908:	andeq	r4, r1, ip, asr #32
   1390c:	andeq	r4, r1, ip, asr #32
   13910:	andeq	r4, r1, ip, asr #32
   13914:	andeq	r4, r1, ip, asr #32
   13918:	andeq	r4, r1, ip, asr #32
   1391c:	andeq	r4, r1, ip, asr #32
   13920:	andeq	r4, r1, ip, asr #32
   13924:	andeq	r4, r1, ip, asr #32
   13928:	andeq	r4, r1, ip, asr #32
   1392c:	andeq	r4, r1, ip, asr #32
   13930:	andeq	r4, r1, ip, asr #32
   13934:	andeq	r4, r1, ip, asr #32
   13938:	andeq	r4, r1, ip, asr #32
   1393c:	andeq	r3, r1, ip, lsl pc
   13940:	andeq	r3, r1, r4, ror pc
   13944:	andeq	r3, r1, ip, lsl pc
   13948:	andeq	r3, r1, r8, ror #30
   1394c:	ldr	r3, [sp, #180]	; 0xb4
   13950:	cmp	r4, #0
   13954:	and	r3, r3, #1
   13958:	str	r3, [sp, #92]	; 0x5c
   1395c:	ldr	r3, [sp, #180]	; 0xb4
   13960:	and	r3, r3, #4
   13964:	str	r3, [sp, #96]	; 0x60
   13968:	moveq	r3, #1
   1396c:	streq	r3, [sp, #60]	; 0x3c
   13970:	beq	14100 <__assert_fail@plt+0x2ffc>
   13974:	mov	r3, #0
   13978:	mov	r2, #1
   1397c:	mov	r4, r3
   13980:	mov	r9, r3
   13984:	str	r2, [sp, #32]
   13988:	str	r2, [sp, #44]	; 0x2c
   1398c:	str	r3, [sp, #48]	; 0x30
   13990:	str	r2, [sp, #52]	; 0x34
   13994:	str	r2, [sp, #56]	; 0x38
   13998:	str	r3, [sp, #60]	; 0x3c
   1399c:	str	r2, [sp, #64]	; 0x40
   139a0:	str	r2, [sp, #68]	; 0x44
   139a4:	str	r3, [sp, #80]	; 0x50
   139a8:	str	r3, [sp, #84]	; 0x54
   139ac:	str	r3, [sp, #88]	; 0x58
   139b0:	movw	r3, #40732	; 0x9f1c
   139b4:	movt	r3, #1
   139b8:	str	r3, [sp, #72]	; 0x48
   139bc:	mov	r3, #2
   139c0:	str	r3, [sp, #176]	; 0xb0
   139c4:	b	13698 <__assert_fail@plt+0x2594>
   139c8:	ldr	r3, [sp, #180]	; 0xb4
   139cc:	cmp	r4, #0
   139d0:	and	r3, r3, #1
   139d4:	str	r3, [sp, #92]	; 0x5c
   139d8:	ldr	r3, [sp, #180]	; 0xb4
   139dc:	and	r3, r3, #4
   139e0:	str	r3, [sp, #96]	; 0x60
   139e4:	bne	14db8 <__assert_fail@plt+0x3cb4>
   139e8:	cmp	sl, #0
   139ec:	beq	14b64 <__assert_fail@plt+0x3a60>
   139f0:	mov	r3, #34	; 0x22
   139f4:	mov	r2, r4
   139f8:	mov	r1, #1
   139fc:	mov	r9, r2
   13a00:	strb	r3, [fp]
   13a04:	movw	r3, #40712	; 0x9f08
   13a08:	movt	r3, #1
   13a0c:	mov	r4, r1
   13a10:	str	r1, [sp, #32]
   13a14:	str	r2, [sp, #44]	; 0x2c
   13a18:	str	r1, [sp, #48]	; 0x30
   13a1c:	str	r2, [sp, #52]	; 0x34
   13a20:	str	r1, [sp, #56]	; 0x38
   13a24:	str	r1, [sp, #60]	; 0x3c
   13a28:	str	r2, [sp, #64]	; 0x40
   13a2c:	str	r2, [sp, #68]	; 0x44
   13a30:	str	r3, [sp, #72]	; 0x48
   13a34:	str	r2, [sp, #80]	; 0x50
   13a38:	str	r2, [sp, #84]	; 0x54
   13a3c:	str	r2, [sp, #88]	; 0x58
   13a40:	b	13698 <__assert_fail@plt+0x2594>
   13a44:	mov	r3, #0
   13a48:	mov	r2, #1
   13a4c:	mov	r9, r3
   13a50:	str	r2, [sp, #32]
   13a54:	str	r3, [sp, #44]	; 0x2c
   13a58:	str	r3, [sp, #48]	; 0x30
   13a5c:	str	r3, [sp, #52]	; 0x34
   13a60:	str	r3, [sp, #60]	; 0x3c
   13a64:	strd	r2, [sp, #64]	; 0x40
   13a68:	str	r3, [sp, #72]	; 0x48
   13a6c:	str	r3, [sp, #80]	; 0x50
   13a70:	str	r3, [sp, #88]	; 0x58
   13a74:	ldr	r3, [sp, #180]	; 0xb4
   13a78:	and	r3, r3, r2
   13a7c:	str	r3, [sp, #92]	; 0x5c
   13a80:	ldr	r3, [sp, #180]	; 0xb4
   13a84:	and	r3, r3, #4
   13a88:	str	r3, [sp, #96]	; 0x60
   13a8c:	ldr	r3, [sp, #176]	; 0xb0
   13a90:	mov	r4, r3
   13a94:	str	r3, [sp, #56]	; 0x38
   13a98:	str	r3, [sp, #84]	; 0x54
   13a9c:	b	13698 <__assert_fail@plt+0x2594>
   13aa0:	mov	r3, #1
   13aa4:	mov	r4, #0
   13aa8:	mov	r9, r4
   13aac:	str	r3, [sp, #32]
   13ab0:	str	r3, [sp, #44]	; 0x2c
   13ab4:	str	r3, [sp, #48]	; 0x30
   13ab8:	str	r4, [sp, #52]	; 0x34
   13abc:	str	r3, [sp, #56]	; 0x38
   13ac0:	str	r3, [sp, #60]	; 0x3c
   13ac4:	str	r3, [sp, #88]	; 0x58
   13ac8:	movw	r3, #40712	; 0x9f08
   13acc:	movt	r3, #1
   13ad0:	str	r4, [sp, #64]	; 0x40
   13ad4:	str	r4, [sp, #68]	; 0x44
   13ad8:	str	r3, [sp, #72]	; 0x48
   13adc:	ldr	r3, [sp, #180]	; 0xb4
   13ae0:	str	r4, [sp, #80]	; 0x50
   13ae4:	str	r4, [sp, #84]	; 0x54
   13ae8:	and	r3, r3, #1
   13aec:	str	r3, [sp, #92]	; 0x5c
   13af0:	ldr	r3, [sp, #180]	; 0xb4
   13af4:	and	r3, r3, #4
   13af8:	str	r3, [sp, #96]	; 0x60
   13afc:	mov	r3, #5
   13b00:	str	r3, [sp, #176]	; 0xb0
   13b04:	b	13698 <__assert_fail@plt+0x2594>
   13b08:	mov	r3, #1
   13b0c:	mov	r4, #0
   13b10:	mov	r9, r4
   13b14:	str	r3, [sp, #32]
   13b18:	str	r4, [sp, #44]	; 0x2c
   13b1c:	str	r3, [sp, #48]	; 0x30
   13b20:	str	r3, [sp, #60]	; 0x3c
   13b24:	ldr	r3, [sp, #180]	; 0xb4
   13b28:	str	r4, [sp, #52]	; 0x34
   13b2c:	str	r4, [sp, #56]	; 0x38
   13b30:	str	r4, [sp, #64]	; 0x40
   13b34:	str	r4, [sp, #68]	; 0x44
   13b38:	and	r3, r3, #1
   13b3c:	str	r4, [sp, #72]	; 0x48
   13b40:	str	r4, [sp, #80]	; 0x50
   13b44:	str	r4, [sp, #84]	; 0x54
   13b48:	str	r3, [sp, #92]	; 0x5c
   13b4c:	ldr	r3, [sp, #180]	; 0xb4
   13b50:	str	r4, [sp, #88]	; 0x58
   13b54:	and	r3, r3, #4
   13b58:	str	r3, [sp, #96]	; 0x60
   13b5c:	b	13698 <__assert_fail@plt+0x2594>
   13b60:	mov	r3, #0
   13b64:	mov	r2, #1
   13b68:	ldr	r1, [sp, #176]	; 0xb0
   13b6c:	mov	r4, r3
   13b70:	mov	r9, r3
   13b74:	movw	r3, #40732	; 0x9f1c
   13b78:	movt	r3, #1
   13b7c:	str	r2, [sp, #32]
   13b80:	str	r2, [sp, #44]	; 0x2c
   13b84:	str	r4, [sp, #48]	; 0x30
   13b88:	strd	r2, [sp, #68]	; 0x44
   13b8c:	ldr	r3, [sp, #180]	; 0xb4
   13b90:	str	r2, [sp, #52]	; 0x34
   13b94:	str	r1, [sp, #56]	; 0x38
   13b98:	str	r4, [sp, #60]	; 0x3c
   13b9c:	str	r2, [sp, #64]	; 0x40
   13ba0:	and	r3, r3, r2
   13ba4:	str	r4, [sp, #80]	; 0x50
   13ba8:	str	r4, [sp, #84]	; 0x54
   13bac:	str	r4, [sp, #88]	; 0x58
   13bb0:	str	r3, [sp, #92]	; 0x5c
   13bb4:	ldr	r3, [sp, #180]	; 0xb4
   13bb8:	and	r3, r3, #4
   13bbc:	str	r3, [sp, #96]	; 0x60
   13bc0:	mov	r3, #2
   13bc4:	str	r3, [sp, #176]	; 0xb0
   13bc8:	b	13698 <__assert_fail@plt+0x2594>
   13bcc:	mov	r3, #1
   13bd0:	mov	r2, #0
   13bd4:	mov	r4, r2
   13bd8:	mov	r9, r2
   13bdc:	str	r3, [sp, #32]
   13be0:	str	r3, [sp, #44]	; 0x2c
   13be4:	str	r2, [sp, #48]	; 0x30
   13be8:	str	r3, [sp, #52]	; 0x34
   13bec:	str	r3, [sp, #56]	; 0x38
   13bf0:	str	r3, [sp, #60]	; 0x3c
   13bf4:	str	r3, [sp, #64]	; 0x40
   13bf8:	str	r3, [sp, #68]	; 0x44
   13bfc:	str	r3, [sp, #88]	; 0x58
   13c00:	movw	r3, #40732	; 0x9f1c
   13c04:	movt	r3, #1
   13c08:	str	r3, [sp, #72]	; 0x48
   13c0c:	ldr	r3, [sp, #180]	; 0xb4
   13c10:	str	r2, [sp, #80]	; 0x50
   13c14:	str	r2, [sp, #84]	; 0x54
   13c18:	and	r3, r3, #1
   13c1c:	b	13bb0 <__assert_fail@plt+0x2aac>
   13c20:	mov	r5, #102	; 0x66
   13c24:	mov	r6, #0
   13c28:	ldr	r3, [sp, #44]	; 0x2c
   13c2c:	cmp	r3, #0
   13c30:	bne	14ae0 <__assert_fail@plt+0x39dc>
   13c34:	ldr	r2, [sp, #52]	; 0x34
   13c38:	eor	r3, fp, #1
   13c3c:	ands	r3, r2, r3
   13c40:	beq	13c78 <__assert_fail@plt+0x2b74>
   13c44:	cmp	sl, r4
   13c48:	mov	fp, r3
   13c4c:	movhi	r2, #39	; 0x27
   13c50:	strbhi	r2, [r9, r4]
   13c54:	add	r2, r4, #1
   13c58:	cmp	sl, r2
   13c5c:	movhi	r1, #36	; 0x24
   13c60:	strbhi	r1, [r9, r2]
   13c64:	add	r2, r4, #2
   13c68:	add	r4, r4, #3
   13c6c:	cmp	sl, r2
   13c70:	movhi	r1, #39	; 0x27
   13c74:	strbhi	r1, [r9, r2]
   13c78:	cmp	sl, r4
   13c7c:	add	r7, r7, #1
   13c80:	movhi	r3, #92	; 0x5c
   13c84:	strbhi	r3, [r9, r4]
   13c88:	add	r4, r4, #1
   13c8c:	cmp	r4, sl
   13c90:	ldr	r3, [sp, #32]
   13c94:	strbcc	r5, [r9, r4]
   13c98:	cmp	r6, #0
   13c9c:	add	r4, r4, #1
   13ca0:	moveq	r3, #0
   13ca4:	cmn	r8, #1
   13ca8:	str	r3, [sp, #32]
   13cac:	bne	136b0 <__assert_fail@plt+0x25ac>
   13cb0:	ldr	r3, [sp, #28]
   13cb4:	ldrb	r6, [r3, r7]
   13cb8:	adds	r6, r6, #0
   13cbc:	movne	r6, #1
   13cc0:	cmp	r6, #0
   13cc4:	bne	136c0 <__assert_fail@plt+0x25bc>
   13cc8:	mov	r3, r9
   13ccc:	mov	r9, fp
   13cd0:	mov	fp, r3
   13cd4:	ldr	r3, [sp, #68]	; 0x44
   13cd8:	cmp	r4, #0
   13cdc:	movne	r3, #0
   13ce0:	cmp	r3, #0
   13ce4:	bne	14ed8 <__assert_fail@plt+0x3dd4>
   13ce8:	ldr	r3, [sp, #44]	; 0x2c
   13cec:	ldr	r2, [sp, #52]	; 0x34
   13cf0:	eor	r3, r3, #1
   13cf4:	ands	r2, r3, r2
   13cf8:	beq	14e10 <__assert_fail@plt+0x3d0c>
   13cfc:	ldr	r3, [sp, #80]	; 0x50
   13d00:	cmp	r3, #0
   13d04:	beq	14e14 <__assert_fail@plt+0x3d10>
   13d08:	ldr	r3, [sp, #32]
   13d0c:	cmp	r3, #0
   13d10:	bne	14e88 <__assert_fail@plt+0x3d84>
   13d14:	ldr	r3, [sp, #84]	; 0x54
   13d18:	adds	r3, r3, #0
   13d1c:	movne	r3, #1
   13d20:	cmp	sl, #0
   13d24:	movne	r3, #0
   13d28:	cmp	r3, #0
   13d2c:	ldreq	r2, [sp, #80]	; 0x50
   13d30:	beq	14e14 <__assert_fail@plt+0x3d10>
   13d34:	ldr	r2, [sp, #84]	; 0x54
   13d38:	mov	sl, r2
   13d3c:	mov	r0, #0
   13d40:	mov	r4, #1
   13d44:	mov	r1, #39	; 0x27
   13d48:	str	r0, [sp, #44]	; 0x2c
   13d4c:	strb	r1, [fp]
   13d50:	str	r0, [sp, #48]	; 0x30
   13d54:	str	r4, [sp, #52]	; 0x34
   13d58:	str	r4, [sp, #56]	; 0x38
   13d5c:	str	r4, [sp, #64]	; 0x40
   13d60:	str	r0, [sp, #68]	; 0x44
   13d64:	str	r3, [sp, #80]	; 0x50
   13d68:	str	r2, [sp, #84]	; 0x54
   13d6c:	str	r0, [sp, #88]	; 0x58
   13d70:	b	139b0 <__assert_fail@plt+0x28ac>
   13d74:	mov	r5, #98	; 0x62
   13d78:	b	13c24 <__assert_fail@plt+0x2b20>
   13d7c:	mov	r5, #97	; 0x61
   13d80:	b	13c24 <__assert_fail@plt+0x2b20>
   13d84:	ldr	r3, [sp, #48]	; 0x30
   13d88:	str	r3, [sp, #40]	; 0x28
   13d8c:	mov	r3, #116	; 0x74
   13d90:	ldr	r2, [sp, #68]	; 0x44
   13d94:	cmp	r2, #0
   13d98:	bne	13f94 <__assert_fail@plt+0x2e90>
   13d9c:	ldr	r2, [sp, #60]	; 0x3c
   13da0:	cmp	r2, #0
   13da4:	bne	13ef0 <__assert_fail@plt+0x2dec>
   13da8:	ldr	r3, [sp, #44]	; 0x2c
   13dac:	mov	r6, #0
   13db0:	cmp	r3, #0
   13db4:	beq	13f60 <__assert_fail@plt+0x2e5c>
   13db8:	mov	r3, fp
   13dbc:	ldr	r2, [sp, #184]	; 0xb8
   13dc0:	cmp	r2, #0
   13dc4:	beq	13de4 <__assert_fail@plt+0x2ce0>
   13dc8:	ubfx	r1, r5, #5, #8
   13dcc:	mov	r0, r2
   13dd0:	and	r2, r5, #31
   13dd4:	ldr	r1, [r0, r1, lsl #2]
   13dd8:	lsr	r2, r1, r2
   13ddc:	tst	r2, #1
   13de0:	bne	13c28 <__assert_fail@plt+0x2b24>
   13de4:	ldr	r2, [sp, #40]	; 0x28
   13de8:	cmp	r2, #0
   13dec:	addeq	r7, r7, #1
   13df0:	bne	13c28 <__assert_fail@plt+0x2b24>
   13df4:	cmp	r3, #0
   13df8:	beq	13c8c <__assert_fail@plt+0x2b88>
   13dfc:	cmp	sl, r4
   13e00:	mov	fp, #0
   13e04:	movhi	r3, #39	; 0x27
   13e08:	strbhi	r3, [r9, r4]
   13e0c:	add	r3, r4, #1
   13e10:	add	r4, r4, #2
   13e14:	cmp	sl, r3
   13e18:	movhi	r2, #39	; 0x27
   13e1c:	strbhi	r2, [r9, r3]
   13e20:	b	13c8c <__assert_fail@plt+0x2b88>
   13e24:	ldr	r3, [sp, #48]	; 0x30
   13e28:	str	r3, [sp, #40]	; 0x28
   13e2c:	eor	r3, fp, #1
   13e30:	ldr	r2, [sp, #52]	; 0x34
   13e34:	ands	r2, r2, r3
   13e38:	beq	14af8 <__assert_fail@plt+0x39f4>
   13e3c:	cmp	sl, r4
   13e40:	movhi	r3, #39	; 0x27
   13e44:	strbhi	r3, [r9, r4]
   13e48:	add	r3, r4, #1
   13e4c:	cmp	sl, r3
   13e50:	movhi	r1, #36	; 0x24
   13e54:	strbhi	r1, [r9, r3]
   13e58:	add	r3, r4, #2
   13e5c:	cmp	sl, r3
   13e60:	movhi	r1, #39	; 0x27
   13e64:	strbhi	r1, [r9, r3]
   13e68:	add	r3, r4, #3
   13e6c:	cmp	sl, r3
   13e70:	bls	14b44 <__assert_fail@plt+0x3a40>
   13e74:	mov	r4, r3
   13e78:	mov	r3, #92	; 0x5c
   13e7c:	mov	fp, r2
   13e80:	mov	r2, r4
   13e84:	strb	r3, [r9, r4]
   13e88:	ldr	r3, [sp, #176]	; 0xb0
   13e8c:	add	r4, r4, #1
   13e90:	cmp	r3, #2
   13e94:	beq	14bac <__assert_fail@plt+0x3aa8>
   13e98:	add	r3, r7, #1
   13e9c:	cmp	r3, r8
   13ea0:	bcs	13eb8 <__assert_fail@plt+0x2db4>
   13ea4:	ldr	r1, [sp, #28]
   13ea8:	ldrb	r3, [r1, r3]
   13eac:	sub	r3, r3, #48	; 0x30
   13eb0:	cmp	r3, #9
   13eb4:	bls	14bbc <__assert_fail@plt+0x3ab8>
   13eb8:	mov	r3, #0
   13ebc:	mov	r5, #48	; 0x30
   13ec0:	ldr	r6, [sp, #64]	; 0x40
   13ec4:	cmp	r6, #0
   13ec8:	beq	13dbc <__assert_fail@plt+0x2cb8>
   13ecc:	mov	r6, #0
   13ed0:	b	13de4 <__assert_fail@plt+0x2ce0>
   13ed4:	ldr	r3, [sp, #48]	; 0x30
   13ed8:	str	r3, [sp, #40]	; 0x28
   13edc:	ldr	r2, [sp, #60]	; 0x3c
   13ee0:	mov	r5, #13
   13ee4:	mov	r3, #114	; 0x72
   13ee8:	cmp	r2, #0
   13eec:	beq	13da8 <__assert_fail@plt+0x2ca4>
   13ef0:	mov	r5, r3
   13ef4:	b	13c24 <__assert_fail@plt+0x2b20>
   13ef8:	ldr	r3, [sp, #48]	; 0x30
   13efc:	str	r3, [sp, #40]	; 0x28
   13f00:	mov	r3, #118	; 0x76
   13f04:	b	13d9c <__assert_fail@plt+0x2c98>
   13f08:	ldr	r3, [sp, #48]	; 0x30
   13f0c:	str	r3, [sp, #40]	; 0x28
   13f10:	mov	r5, #10
   13f14:	mov	r3, #110	; 0x6e
   13f18:	b	13d9c <__assert_fail@plt+0x2c98>
   13f1c:	ldr	r3, [sp, #48]	; 0x30
   13f20:	cmn	r8, #1
   13f24:	str	r3, [sp, #40]	; 0x28
   13f28:	beq	14370 <__assert_fail@plt+0x326c>
   13f2c:	subs	r3, r8, #1
   13f30:	movne	r3, #1
   13f34:	cmp	r3, #0
   13f38:	bne	13f44 <__assert_fail@plt+0x2e40>
   13f3c:	cmp	r7, #0
   13f40:	beq	13f88 <__assert_fail@plt+0x2e84>
   13f44:	mov	r6, #0
   13f48:	ldr	r3, [sp, #64]	; 0x40
   13f4c:	cmp	r3, #0
   13f50:	beq	13db8 <__assert_fail@plt+0x2cb4>
   13f54:	ldr	r3, [sp, #44]	; 0x2c
   13f58:	cmp	r3, #0
   13f5c:	bne	13db8 <__assert_fail@plt+0x2cb4>
   13f60:	mov	r3, fp
   13f64:	b	13de4 <__assert_fail@plt+0x2ce0>
   13f68:	ldr	r3, [sp, #48]	; 0x30
   13f6c:	str	r3, [sp, #40]	; 0x28
   13f70:	b	13f3c <__assert_fail@plt+0x2e38>
   13f74:	ldr	r3, [sp, #48]	; 0x30
   13f78:	str	r3, [sp, #40]	; 0x28
   13f7c:	b	13f44 <__assert_fail@plt+0x2e40>
   13f80:	ldr	r6, [sp, #48]	; 0x30
   13f84:	str	r6, [sp, #40]	; 0x28
   13f88:	ldr	r3, [sp, #68]	; 0x44
   13f8c:	cmp	r3, #0
   13f90:	beq	13f48 <__assert_fail@plt+0x2e44>
   13f94:	mov	r3, #2
   13f98:	mov	fp, r9
   13f9c:	str	r3, [sp, #176]	; 0xb0
   13fa0:	ldr	r3, [sp, #60]	; 0x3c
   13fa4:	cmp	r3, #0
   13fa8:	ldr	r3, [sp, #176]	; 0xb0
   13fac:	movne	r3, #4
   13fb0:	str	r3, [sp, #176]	; 0xb0
   13fb4:	mov	lr, #0
   13fb8:	mov	r0, fp
   13fbc:	ldr	r2, [sp, #28]
   13fc0:	ldr	r3, [sp, #180]	; 0xb4
   13fc4:	ldr	r1, [sp, #188]	; 0xbc
   13fc8:	bic	ip, r3, #2
   13fcc:	ldr	r3, [sp, #176]	; 0xb0
   13fd0:	stm	sp, {r3, ip, lr}
   13fd4:	mov	r3, r8
   13fd8:	ldr	ip, [sp, #192]	; 0xc0
   13fdc:	str	r1, [sp, #12]
   13fe0:	mov	r1, sl
   13fe4:	str	ip, [sp, #16]
   13fe8:	bl	13574 <__assert_fail@plt+0x2470>
   13fec:	mov	r4, r0
   13ff0:	mov	r0, r4
   13ff4:	add	sp, sp, #140	; 0x8c
   13ff8:	ldrd	r4, [sp]
   13ffc:	ldrd	r6, [sp, #8]
   14000:	ldrd	r8, [sp, #16]
   14004:	ldrd	sl, [sp, #24]
   14008:	add	sp, sp, #32
   1400c:	pop	{pc}		; (ldr pc, [sp], #4)
   14010:	ldr	r3, [sp, #48]	; 0x30
   14014:	str	r3, [sp, #40]	; 0x28
   14018:	ldr	r3, [sp, #176]	; 0xb0
   1401c:	cmp	r3, #2
   14020:	beq	14398 <__assert_fail@plt+0x3294>
   14024:	ldr	r3, [sp, #88]	; 0x58
   14028:	cmp	r3, #0
   1402c:	moveq	r5, #92	; 0x5c
   14030:	moveq	r3, r5
   14034:	beq	13d9c <__assert_fail@plt+0x2c98>
   14038:	add	r7, r7, #1
   1403c:	mov	r3, fp
   14040:	mov	r6, #0
   14044:	mov	r5, #92	; 0x5c
   14048:	b	13df4 <__assert_fail@plt+0x2cf0>
   1404c:	ldr	r3, [sp, #64]	; 0x40
   14050:	cmp	r3, #0
   14054:	bne	14ecc <__assert_fail@plt+0x3dc8>
   14058:	ldr	r2, [sp, #48]	; 0x30
   1405c:	mov	r3, fp
   14060:	mov	r6, r2
   14064:	str	r2, [sp, #40]	; 0x28
   14068:	b	13dbc <__assert_fail@plt+0x2cb8>
   1406c:	ldr	r3, [sp, #176]	; 0xb0
   14070:	cmp	r3, #2
   14074:	beq	14e08 <__assert_fail@plt+0x3d04>
   14078:	cmp	r3, #5
   1407c:	ldr	r3, [sp, #48]	; 0x30
   14080:	str	r3, [sp, #40]	; 0x28
   14084:	bne	140b0 <__assert_fail@plt+0x2fac>
   14088:	ldr	r3, [sp, #96]	; 0x60
   1408c:	cmp	r3, #0
   14090:	beq	14b0c <__assert_fail@plt+0x3a08>
   14094:	add	r3, r7, #2
   14098:	cmp	r3, r8
   1409c:	bcs	140b0 <__assert_fail@plt+0x2fac>
   140a0:	ldr	r2, [sp, #36]	; 0x24
   140a4:	ldrb	r5, [r2, #1]
   140a8:	cmp	r5, #63	; 0x3f
   140ac:	beq	14bf4 <__assert_fail@plt+0x3af0>
   140b0:	mov	r6, #0
   140b4:	mov	r5, #63	; 0x3f
   140b8:	b	13f48 <__assert_fail@plt+0x2e44>
   140bc:	ldr	r3, [sp, #176]	; 0xb0
   140c0:	cmp	r3, #2
   140c4:	ldr	r3, [sp, #48]	; 0x30
   140c8:	beq	148b0 <__assert_fail@plt+0x37ac>
   140cc:	mov	r5, #39	; 0x27
   140d0:	str	r3, [sp, #40]	; 0x28
   140d4:	str	r6, [sp, #80]	; 0x50
   140d8:	b	13f48 <__assert_fail@plt+0x2e44>
   140dc:	ldr	r3, [sp, #180]	; 0xb4
   140e0:	cmp	r4, #0
   140e4:	and	r3, r3, #1
   140e8:	str	r3, [sp, #92]	; 0x5c
   140ec:	ldr	r3, [sp, #180]	; 0xb4
   140f0:	and	r3, r3, #4
   140f4:	str	r3, [sp, #96]	; 0x60
   140f8:	bne	14f18 <__assert_fail@plt+0x3e14>
   140fc:	str	r4, [sp, #60]	; 0x3c
   14100:	cmp	sl, #0
   14104:	bne	14efc <__assert_fail@plt+0x3df8>
   14108:	mov	r3, #1
   1410c:	movw	r2, #40732	; 0x9f1c
   14110:	movt	r2, #1
   14114:	mov	r4, r3
   14118:	mov	r3, #2
   1411c:	mov	r9, sl
   14120:	str	r4, [sp, #32]
   14124:	str	sl, [sp, #44]	; 0x2c
   14128:	str	sl, [sp, #48]	; 0x30
   1412c:	str	r4, [sp, #52]	; 0x34
   14130:	str	r4, [sp, #56]	; 0x38
   14134:	str	r4, [sp, #64]	; 0x40
   14138:	str	sl, [sp, #68]	; 0x44
   1413c:	str	r2, [sp, #72]	; 0x48
   14140:	str	sl, [sp, #80]	; 0x50
   14144:	str	sl, [sp, #84]	; 0x54
   14148:	str	sl, [sp, #88]	; 0x58
   1414c:	str	r3, [sp, #176]	; 0xb0
   14150:	b	13698 <__assert_fail@plt+0x2594>
   14154:	ldrb	r5, [r0, r7]
   14158:	cmp	r5, #126	; 0x7e
   1415c:	ldrls	pc, [pc, r5, lsl #2]
   14160:	b	144c4 <__assert_fail@plt+0x33c0>
   14164:	muleq	r1, r0, r4
   14168:	andeq	r4, r1, r4, asr #9
   1416c:	andeq	r4, r1, r4, asr #9
   14170:	andeq	r4, r1, r4, asr #9
   14174:	andeq	r4, r1, r4, asr #9
   14178:	andeq	r4, r1, r4, asr #9
   1417c:	andeq	r4, r1, r4, asr #9
   14180:	andeq	r4, r1, r0, lsl #9
   14184:	andeq	r4, r1, r0, ror r4
   14188:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   1418c:	andeq	r4, r1, r0, ror #8
   14190:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14194:			; <UNDEFINED> instruction: 0x000144b4
   14198:	andeq	r4, r1, r0, asr #8
   1419c:	andeq	r4, r1, r4, asr #9
   141a0:	andeq	r4, r1, r4, asr #9
   141a4:	andeq	r4, r1, r4, asr #9
   141a8:	andeq	r4, r1, r4, asr #9
   141ac:	andeq	r4, r1, r4, asr #9
   141b0:	andeq	r4, r1, r4, asr #9
   141b4:	andeq	r4, r1, r4, asr #9
   141b8:	andeq	r4, r1, r4, asr #9
   141bc:	andeq	r4, r1, r4, asr #9
   141c0:	andeq	r4, r1, r4, asr #9
   141c4:	andeq	r4, r1, r4, asr #9
   141c8:	andeq	r4, r1, r4, asr #9
   141cc:	andeq	r4, r1, r4, asr #9
   141d0:	andeq	r4, r1, r4, asr #9
   141d4:	andeq	r4, r1, r4, asr #9
   141d8:	andeq	r4, r1, r4, asr #9
   141dc:	andeq	r4, r1, r4, asr #9
   141e0:	andeq	r4, r1, r4, asr #9
   141e4:	andeq	r4, r1, r8, ror #7
   141e8:	andeq	r4, r1, r0, asr r4
   141ec:	andeq	r4, r1, r0, asr r4
   141f0:	andeq	r4, r1, r8, asr #7
   141f4:	andeq	r4, r1, r0, asr r4
   141f8:			; <UNDEFINED> instruction: 0x000143bc
   141fc:	andeq	r4, r1, r0, asr r4
   14200:	andeq	r4, r1, ip, lsr #8
   14204:	andeq	r4, r1, r0, asr r4
   14208:	andeq	r4, r1, r0, asr r4
   1420c:	andeq	r4, r1, r0, asr r4
   14210:			; <UNDEFINED> instruction: 0x000143bc
   14214:			; <UNDEFINED> instruction: 0x000143bc
   14218:			; <UNDEFINED> instruction: 0x000143bc
   1421c:			; <UNDEFINED> instruction: 0x000143bc
   14220:			; <UNDEFINED> instruction: 0x000143bc
   14224:			; <UNDEFINED> instruction: 0x000143bc
   14228:			; <UNDEFINED> instruction: 0x000143bc
   1422c:			; <UNDEFINED> instruction: 0x000143bc
   14230:			; <UNDEFINED> instruction: 0x000143bc
   14234:			; <UNDEFINED> instruction: 0x000143bc
   14238:			; <UNDEFINED> instruction: 0x000143bc
   1423c:			; <UNDEFINED> instruction: 0x000143bc
   14240:			; <UNDEFINED> instruction: 0x000143bc
   14244:			; <UNDEFINED> instruction: 0x000143bc
   14248:			; <UNDEFINED> instruction: 0x000143bc
   1424c:			; <UNDEFINED> instruction: 0x000143bc
   14250:	andeq	r4, r1, r0, asr r4
   14254:	andeq	r4, r1, r0, asr r4
   14258:	andeq	r4, r1, r0, asr r4
   1425c:	andeq	r4, r1, r0, asr r4
   14260:	andeq	r4, r1, r4, lsl #8
   14264:	andeq	r4, r1, r4, asr #9
   14268:			; <UNDEFINED> instruction: 0x000143bc
   1426c:			; <UNDEFINED> instruction: 0x000143bc
   14270:			; <UNDEFINED> instruction: 0x000143bc
   14274:			; <UNDEFINED> instruction: 0x000143bc
   14278:			; <UNDEFINED> instruction: 0x000143bc
   1427c:			; <UNDEFINED> instruction: 0x000143bc
   14280:			; <UNDEFINED> instruction: 0x000143bc
   14284:			; <UNDEFINED> instruction: 0x000143bc
   14288:			; <UNDEFINED> instruction: 0x000143bc
   1428c:			; <UNDEFINED> instruction: 0x000143bc
   14290:			; <UNDEFINED> instruction: 0x000143bc
   14294:			; <UNDEFINED> instruction: 0x000143bc
   14298:			; <UNDEFINED> instruction: 0x000143bc
   1429c:			; <UNDEFINED> instruction: 0x000143bc
   142a0:			; <UNDEFINED> instruction: 0x000143bc
   142a4:			; <UNDEFINED> instruction: 0x000143bc
   142a8:			; <UNDEFINED> instruction: 0x000143bc
   142ac:			; <UNDEFINED> instruction: 0x000143bc
   142b0:			; <UNDEFINED> instruction: 0x000143bc
   142b4:			; <UNDEFINED> instruction: 0x000143bc
   142b8:			; <UNDEFINED> instruction: 0x000143bc
   142bc:			; <UNDEFINED> instruction: 0x000143bc
   142c0:			; <UNDEFINED> instruction: 0x000143bc
   142c4:			; <UNDEFINED> instruction: 0x000143bc
   142c8:			; <UNDEFINED> instruction: 0x000143bc
   142cc:			; <UNDEFINED> instruction: 0x000143bc
   142d0:	andeq	r4, r1, r0, asr r4
   142d4:	andeq	r4, r1, r4, lsl #7
   142d8:			; <UNDEFINED> instruction: 0x000143bc
   142dc:	andeq	r4, r1, r0, asr r4
   142e0:			; <UNDEFINED> instruction: 0x000143bc
   142e4:	andeq	r4, r1, r0, asr r4
   142e8:			; <UNDEFINED> instruction: 0x000143bc
   142ec:			; <UNDEFINED> instruction: 0x000143bc
   142f0:			; <UNDEFINED> instruction: 0x000143bc
   142f4:			; <UNDEFINED> instruction: 0x000143bc
   142f8:			; <UNDEFINED> instruction: 0x000143bc
   142fc:			; <UNDEFINED> instruction: 0x000143bc
   14300:			; <UNDEFINED> instruction: 0x000143bc
   14304:			; <UNDEFINED> instruction: 0x000143bc
   14308:			; <UNDEFINED> instruction: 0x000143bc
   1430c:			; <UNDEFINED> instruction: 0x000143bc
   14310:			; <UNDEFINED> instruction: 0x000143bc
   14314:			; <UNDEFINED> instruction: 0x000143bc
   14318:			; <UNDEFINED> instruction: 0x000143bc
   1431c:			; <UNDEFINED> instruction: 0x000143bc
   14320:			; <UNDEFINED> instruction: 0x000143bc
   14324:			; <UNDEFINED> instruction: 0x000143bc
   14328:			; <UNDEFINED> instruction: 0x000143bc
   1432c:			; <UNDEFINED> instruction: 0x000143bc
   14330:			; <UNDEFINED> instruction: 0x000143bc
   14334:			; <UNDEFINED> instruction: 0x000143bc
   14338:			; <UNDEFINED> instruction: 0x000143bc
   1433c:			; <UNDEFINED> instruction: 0x000143bc
   14340:			; <UNDEFINED> instruction: 0x000143bc
   14344:			; <UNDEFINED> instruction: 0x000143bc
   14348:			; <UNDEFINED> instruction: 0x000143bc
   1434c:			; <UNDEFINED> instruction: 0x000143bc
   14350:	andeq	r4, r1, r0, ror #6
   14354:	andeq	r4, r1, r0, asr r4
   14358:	andeq	r4, r1, r0, ror #6
   1435c:	andeq	r4, r1, r8, asr #7
   14360:	mov	r3, #0
   14364:	cmn	r8, #1
   14368:	str	r3, [sp, #40]	; 0x28
   1436c:	bne	13f2c <__assert_fail@plt+0x2e28>
   14370:	ldr	r3, [sp, #28]
   14374:	ldrb	r3, [r3, #1]
   14378:	adds	r3, r3, #0
   1437c:	movne	r3, #1
   14380:	b	13f34 <__assert_fail@plt+0x2e30>
   14384:	mov	r3, #0
   14388:	str	r3, [sp, #40]	; 0x28
   1438c:	ldr	r3, [sp, #176]	; 0xb0
   14390:	cmp	r3, #2
   14394:	bne	14024 <__assert_fail@plt+0x2f20>
   14398:	ldr	r3, [sp, #44]	; 0x2c
   1439c:	cmp	r3, #0
   143a0:	bne	14ce0 <__assert_fail@plt+0x3bdc>
   143a4:	mov	r6, r3
   143a8:	add	r7, r7, #1
   143ac:	mov	r3, fp
   143b0:	mov	r5, #92	; 0x5c
   143b4:	b	13df4 <__assert_fail@plt+0x2cf0>
   143b8:	ldr	r6, [sp, #48]	; 0x30
   143bc:	mov	r3, #0
   143c0:	str	r3, [sp, #40]	; 0x28
   143c4:	b	13f48 <__assert_fail@plt+0x2e44>
   143c8:	mov	r3, #0
   143cc:	str	r3, [sp, #40]	; 0x28
   143d0:	b	13f3c <__assert_fail@plt+0x2e38>
   143d4:	mov	r3, #0
   143d8:	str	r3, [sp, #40]	; 0x28
   143dc:	mov	r3, #118	; 0x76
   143e0:	b	13d9c <__assert_fail@plt+0x2c98>
   143e4:	ldr	r6, [sp, #48]	; 0x30
   143e8:	mov	r3, #0
   143ec:	str	r3, [sp, #40]	; 0x28
   143f0:	b	13f88 <__assert_fail@plt+0x2e84>
   143f4:	mov	r3, #0
   143f8:	str	r3, [sp, #40]	; 0x28
   143fc:	mov	r3, #116	; 0x74
   14400:	b	13d90 <__assert_fail@plt+0x2c8c>
   14404:	ldr	r3, [sp, #176]	; 0xb0
   14408:	cmp	r3, #2
   1440c:	beq	1491c <__assert_fail@plt+0x3818>
   14410:	cmp	r3, #5
   14414:	mov	r3, #0
   14418:	str	r3, [sp, #40]	; 0x28
   1441c:	beq	14088 <__assert_fail@plt+0x2f84>
   14420:	mov	r6, #0
   14424:	mov	r5, #63	; 0x3f
   14428:	b	13f48 <__assert_fail@plt+0x2e44>
   1442c:	ldr	r3, [sp, #176]	; 0xb0
   14430:	cmp	r3, #2
   14434:	beq	148a4 <__assert_fail@plt+0x37a0>
   14438:	mov	r3, #0
   1443c:	b	140cc <__assert_fail@plt+0x2fc8>
   14440:	mov	r3, #0
   14444:	str	r3, [sp, #40]	; 0x28
   14448:	mov	r3, #114	; 0x72
   1444c:	b	13d90 <__assert_fail@plt+0x2c8c>
   14450:	mov	r3, #0
   14454:	mov	r6, r3
   14458:	str	r3, [sp, #40]	; 0x28
   1445c:	b	13f88 <__assert_fail@plt+0x2e84>
   14460:	mov	r3, #0
   14464:	str	r3, [sp, #40]	; 0x28
   14468:	mov	r3, #110	; 0x6e
   1446c:	b	13d90 <__assert_fail@plt+0x2c8c>
   14470:	mov	r3, #0
   14474:	str	r3, [sp, #40]	; 0x28
   14478:	mov	r3, #98	; 0x62
   1447c:	b	13d9c <__assert_fail@plt+0x2c98>
   14480:	mov	r3, #0
   14484:	str	r3, [sp, #40]	; 0x28
   14488:	mov	r3, #97	; 0x61
   1448c:	b	13d9c <__assert_fail@plt+0x2c98>
   14490:	ldr	r3, [sp, #60]	; 0x3c
   14494:	cmp	r3, #0
   14498:	bne	14888 <__assert_fail@plt+0x3784>
   1449c:	ldr	r3, [sp, #92]	; 0x5c
   144a0:	cmp	r3, #0
   144a4:	addne	r7, r7, #1
   144a8:	bne	136a8 <__assert_fail@plt+0x25a4>
   144ac:	str	r3, [sp, #40]	; 0x28
   144b0:	b	13da8 <__assert_fail@plt+0x2ca4>
   144b4:	mov	r3, #0
   144b8:	str	r3, [sp, #40]	; 0x28
   144bc:	mov	r3, #102	; 0x66
   144c0:	b	13d9c <__assert_fail@plt+0x2c98>
   144c4:	mov	r3, #0
   144c8:	str	r3, [sp, #40]	; 0x28
   144cc:	ldr	r3, [sp, #76]	; 0x4c
   144d0:	cmp	r3, #1
   144d4:	bne	1493c <__assert_fail@plt+0x3838>
   144d8:	bl	10fc0 <__ctype_b_loc@plt>
   144dc:	ldr	r2, [r0]
   144e0:	sxth	r3, r5
   144e4:	lsl	r3, r3, #1
   144e8:	ldr	r1, [sp, #76]	; 0x4c
   144ec:	ldrh	r3, [r2, r3]
   144f0:	mov	r0, r1
   144f4:	and	r3, r3, #16384	; 0x4000
   144f8:	cmp	r3, #0
   144fc:	ldr	r3, [sp, #60]	; 0x3c
   14500:	movne	r6, #1
   14504:	moveq	r6, #0
   14508:	movne	r2, #0
   1450c:	andeq	r2, r3, #1
   14510:	cmp	r2, #0
   14514:	beq	13f48 <__assert_fail@plt+0x2e44>
   14518:	ldr	r2, [sp, #60]	; 0x3c
   1451c:	mov	r6, #0
   14520:	add	r1, r0, r7
   14524:	mov	ip, #39	; 0x27
   14528:	str	r6, [sp, #100]	; 0x64
   1452c:	mov	r0, #0
   14530:	ldr	lr, [sp, #36]	; 0x24
   14534:	str	r8, [sp, #36]	; 0x24
   14538:	ldr	r6, [sp, #40]	; 0x28
   1453c:	ldr	r8, [sp, #44]	; 0x2c
   14540:	b	145f0 <__assert_fail@plt+0x34ec>
   14544:	cmp	r8, #0
   14548:	bne	14b24 <__assert_fail@plt+0x3a20>
   1454c:	ldr	r0, [sp, #52]	; 0x34
   14550:	eor	r3, fp, #1
   14554:	ands	r3, r0, r3
   14558:	beq	14588 <__assert_fail@plt+0x3484>
   1455c:	cmp	sl, r4
   14560:	add	r0, r4, #1
   14564:	strbhi	ip, [r9, r4]
   14568:	cmp	sl, r0
   1456c:	movhi	fp, #36	; 0x24
   14570:	strbhi	fp, [r9, r0]
   14574:	add	r0, r4, #2
   14578:	mov	fp, r3
   1457c:	cmp	sl, r0
   14580:	add	r4, r4, #3
   14584:	strbhi	ip, [r9, r0]
   14588:	cmp	sl, r4
   1458c:	movhi	r3, #92	; 0x5c
   14590:	strbhi	r3, [r9, r4]
   14594:	add	r3, r4, #1
   14598:	cmp	sl, r3
   1459c:	bls	145ac <__assert_fail@plt+0x34a8>
   145a0:	lsr	r0, r5, #6
   145a4:	add	r0, r0, #48	; 0x30
   145a8:	strb	r0, [r9, r3]
   145ac:	add	r3, r4, #2
   145b0:	cmp	sl, r3
   145b4:	bls	145c4 <__assert_fail@plt+0x34c0>
   145b8:	ubfx	r0, r5, #3, #3
   145bc:	add	r0, r0, #48	; 0x30
   145c0:	strb	r0, [r9, r3]
   145c4:	add	r7, r7, #1
   145c8:	and	r5, r5, #7
   145cc:	cmp	r1, r7
   145d0:	add	r5, r5, #48	; 0x30
   145d4:	add	r4, r4, #3
   145d8:	bls	14b38 <__assert_fail@plt+0x3a34>
   145dc:	mov	r0, r2
   145e0:	cmp	sl, r4
   145e4:	strbhi	r5, [r9, r4]
   145e8:	add	r4, r4, #1
   145ec:	ldrb	r5, [lr, #1]!
   145f0:	cmp	r2, #0
   145f4:	bne	14544 <__assert_fail@plt+0x3440>
   145f8:	eor	r3, r0, #1
   145fc:	cmp	r6, #0
   14600:	and	r3, r3, fp
   14604:	uxtb	r3, r3
   14608:	beq	1461c <__assert_fail@plt+0x3518>
   1460c:	cmp	sl, r4
   14610:	movhi	r6, #92	; 0x5c
   14614:	strbhi	r6, [r9, r4]
   14618:	add	r4, r4, #1
   1461c:	add	r7, r7, #1
   14620:	cmp	r7, r1
   14624:	bcs	14b18 <__assert_fail@plt+0x3a14>
   14628:	cmp	r3, #0
   1462c:	beq	14b5c <__assert_fail@plt+0x3a58>
   14630:	cmp	sl, r4
   14634:	add	r3, r4, #1
   14638:	mov	r6, #0
   1463c:	strbhi	ip, [r9, r4]
   14640:	cmp	sl, r3
   14644:	add	r4, r4, #2
   14648:	mov	fp, r6
   1464c:	strbhi	ip, [r9, r3]
   14650:	b	145e0 <__assert_fail@plt+0x34dc>
   14654:	ldr	r3, [sp, #36]	; 0x24
   14658:	ldrb	r5, [r3]
   1465c:	cmp	r5, #126	; 0x7e
   14660:	ldrls	pc, [pc, r5, lsl #2]
   14664:	b	144c4 <__assert_fail@plt+0x33c0>
   14668:	andeq	r4, r1, r8, lsl #17
   1466c:	andeq	r4, r1, r4, asr #9
   14670:	andeq	r4, r1, r4, asr #9
   14674:	andeq	r4, r1, r4, asr #9
   14678:	andeq	r4, r1, r4, asr #9
   1467c:	andeq	r4, r1, r4, asr #9
   14680:	andeq	r4, r1, r4, asr #9
   14684:	andeq	r3, r1, ip, ror sp
   14688:	andeq	r3, r1, r4, ror sp
   1468c:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14690:	andeq	r4, r1, ip, ror r8
   14694:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14698:	andeq	r3, r1, r0, lsr #24
   1469c:	andeq	r4, r1, r0, ror r8
   146a0:	andeq	r4, r1, r4, asr #9
   146a4:	andeq	r4, r1, r4, asr #9
   146a8:	andeq	r4, r1, r4, asr #9
   146ac:	andeq	r4, r1, r4, asr #9
   146b0:	andeq	r4, r1, r4, asr #9
   146b4:	andeq	r4, r1, r4, asr #9
   146b8:	andeq	r4, r1, r4, asr #9
   146bc:	andeq	r4, r1, r4, asr #9
   146c0:	andeq	r4, r1, r4, asr #9
   146c4:	andeq	r4, r1, r4, asr #9
   146c8:	andeq	r4, r1, r4, asr #9
   146cc:	andeq	r4, r1, r4, asr #9
   146d0:	andeq	r4, r1, r4, asr #9
   146d4:	andeq	r4, r1, r4, asr #9
   146d8:	andeq	r4, r1, r4, asr #9
   146dc:	andeq	r4, r1, r4, asr #9
   146e0:	andeq	r4, r1, r4, asr #9
   146e4:	andeq	r4, r1, r4, asr #9
   146e8:	andeq	r4, r1, r4, ror #7
   146ec:	andeq	r4, r1, r4, ror #16
   146f0:	andeq	r4, r1, r4, ror #16
   146f4:	andeq	r4, r1, r8, asr #7
   146f8:	andeq	r4, r1, r4, ror #16
   146fc:			; <UNDEFINED> instruction: 0x000143b8
   14700:	andeq	r4, r1, r4, ror #16
   14704:	andeq	r4, r1, ip, lsr #8
   14708:	andeq	r4, r1, r4, ror #16
   1470c:	andeq	r4, r1, r4, ror #16
   14710:	andeq	r4, r1, r4, ror #16
   14714:			; <UNDEFINED> instruction: 0x000143b8
   14718:			; <UNDEFINED> instruction: 0x000143b8
   1471c:			; <UNDEFINED> instruction: 0x000143b8
   14720:			; <UNDEFINED> instruction: 0x000143b8
   14724:			; <UNDEFINED> instruction: 0x000143b8
   14728:			; <UNDEFINED> instruction: 0x000143b8
   1472c:			; <UNDEFINED> instruction: 0x000143b8
   14730:			; <UNDEFINED> instruction: 0x000143b8
   14734:			; <UNDEFINED> instruction: 0x000143b8
   14738:			; <UNDEFINED> instruction: 0x000143b8
   1473c:			; <UNDEFINED> instruction: 0x000143b8
   14740:			; <UNDEFINED> instruction: 0x000143b8
   14744:			; <UNDEFINED> instruction: 0x000143b8
   14748:			; <UNDEFINED> instruction: 0x000143b8
   1474c:			; <UNDEFINED> instruction: 0x000143b8
   14750:			; <UNDEFINED> instruction: 0x000143b8
   14754:	andeq	r4, r1, r4, ror #16
   14758:	andeq	r4, r1, r4, ror #16
   1475c:	andeq	r4, r1, r4, ror #16
   14760:	andeq	r4, r1, r4, ror #16
   14764:	andeq	r4, r1, r4, lsl #8
   14768:	andeq	r4, r1, r4, asr #9
   1476c:			; <UNDEFINED> instruction: 0x000143b8
   14770:			; <UNDEFINED> instruction: 0x000143b8
   14774:			; <UNDEFINED> instruction: 0x000143b8
   14778:			; <UNDEFINED> instruction: 0x000143b8
   1477c:			; <UNDEFINED> instruction: 0x000143b8
   14780:			; <UNDEFINED> instruction: 0x000143b8
   14784:			; <UNDEFINED> instruction: 0x000143b8
   14788:			; <UNDEFINED> instruction: 0x000143b8
   1478c:			; <UNDEFINED> instruction: 0x000143b8
   14790:			; <UNDEFINED> instruction: 0x000143b8
   14794:			; <UNDEFINED> instruction: 0x000143b8
   14798:			; <UNDEFINED> instruction: 0x000143b8
   1479c:			; <UNDEFINED> instruction: 0x000143b8
   147a0:			; <UNDEFINED> instruction: 0x000143b8
   147a4:			; <UNDEFINED> instruction: 0x000143b8
   147a8:			; <UNDEFINED> instruction: 0x000143b8
   147ac:			; <UNDEFINED> instruction: 0x000143b8
   147b0:			; <UNDEFINED> instruction: 0x000143b8
   147b4:			; <UNDEFINED> instruction: 0x000143b8
   147b8:			; <UNDEFINED> instruction: 0x000143b8
   147bc:			; <UNDEFINED> instruction: 0x000143b8
   147c0:			; <UNDEFINED> instruction: 0x000143b8
   147c4:			; <UNDEFINED> instruction: 0x000143b8
   147c8:			; <UNDEFINED> instruction: 0x000143b8
   147cc:			; <UNDEFINED> instruction: 0x000143b8
   147d0:			; <UNDEFINED> instruction: 0x000143b8
   147d4:	andeq	r4, r1, r4, ror #16
   147d8:	andeq	r4, r1, r4, lsl #7
   147dc:			; <UNDEFINED> instruction: 0x000143b8
   147e0:	andeq	r4, r1, r4, ror #16
   147e4:			; <UNDEFINED> instruction: 0x000143b8
   147e8:	andeq	r4, r1, r4, ror #16
   147ec:			; <UNDEFINED> instruction: 0x000143b8
   147f0:			; <UNDEFINED> instruction: 0x000143b8
   147f4:			; <UNDEFINED> instruction: 0x000143b8
   147f8:			; <UNDEFINED> instruction: 0x000143b8
   147fc:			; <UNDEFINED> instruction: 0x000143b8
   14800:			; <UNDEFINED> instruction: 0x000143b8
   14804:			; <UNDEFINED> instruction: 0x000143b8
   14808:			; <UNDEFINED> instruction: 0x000143b8
   1480c:			; <UNDEFINED> instruction: 0x000143b8
   14810:			; <UNDEFINED> instruction: 0x000143b8
   14814:			; <UNDEFINED> instruction: 0x000143b8
   14818:			; <UNDEFINED> instruction: 0x000143b8
   1481c:			; <UNDEFINED> instruction: 0x000143b8
   14820:			; <UNDEFINED> instruction: 0x000143b8
   14824:			; <UNDEFINED> instruction: 0x000143b8
   14828:			; <UNDEFINED> instruction: 0x000143b8
   1482c:			; <UNDEFINED> instruction: 0x000143b8
   14830:			; <UNDEFINED> instruction: 0x000143b8
   14834:			; <UNDEFINED> instruction: 0x000143b8
   14838:			; <UNDEFINED> instruction: 0x000143b8
   1483c:			; <UNDEFINED> instruction: 0x000143b8
   14840:			; <UNDEFINED> instruction: 0x000143b8
   14844:			; <UNDEFINED> instruction: 0x000143b8
   14848:			; <UNDEFINED> instruction: 0x000143b8
   1484c:			; <UNDEFINED> instruction: 0x000143b8
   14850:			; <UNDEFINED> instruction: 0x000143b8
   14854:	andeq	r4, r1, r0, ror #6
   14858:	andeq	r4, r1, r4, ror #16
   1485c:	andeq	r4, r1, r0, ror #6
   14860:	andeq	r4, r1, r8, asr #7
   14864:	mov	r3, #0
   14868:	str	r3, [sp, #40]	; 0x28
   1486c:	b	13f44 <__assert_fail@plt+0x2e40>
   14870:	mov	r3, #0
   14874:	str	r3, [sp, #40]	; 0x28
   14878:	b	13edc <__assert_fail@plt+0x2dd8>
   1487c:	mov	r3, #0
   14880:	str	r3, [sp, #40]	; 0x28
   14884:	b	13f10 <__assert_fail@plt+0x2e0c>
   14888:	ldr	r3, [sp, #44]	; 0x2c
   1488c:	cmp	r3, #0
   14890:	beq	13e28 <__assert_fail@plt+0x2d24>
   14894:	ldr	r3, [sp, #52]	; 0x34
   14898:	mov	fp, r9
   1489c:	str	r3, [sp, #60]	; 0x3c
   148a0:	b	13fa0 <__assert_fail@plt+0x2e9c>
   148a4:	ldr	r3, [sp, #44]	; 0x2c
   148a8:	cmp	r3, #0
   148ac:	bne	14ce0 <__assert_fail@plt+0x3bdc>
   148b0:	str	r3, [sp, #40]	; 0x28
   148b4:	cmp	sl, #0
   148b8:	ldr	r3, [sp, #84]	; 0x54
   148bc:	clz	r3, r3
   148c0:	lsr	r3, r3, #5
   148c4:	moveq	r3, #0
   148c8:	cmp	r3, #0
   148cc:	strne	sl, [sp, #84]	; 0x54
   148d0:	movne	sl, #0
   148d4:	bne	14904 <__assert_fail@plt+0x3800>
   148d8:	cmp	sl, r4
   148dc:	movhi	r3, #39	; 0x27
   148e0:	strbhi	r3, [r9, r4]
   148e4:	add	r3, r4, #1
   148e8:	cmp	sl, r3
   148ec:	movhi	r2, #92	; 0x5c
   148f0:	strbhi	r2, [r9, r3]
   148f4:	add	r3, r4, #2
   148f8:	cmp	sl, r3
   148fc:	movhi	r2, #39	; 0x27
   14900:	strbhi	r2, [r9, r3]
   14904:	mov	r3, #0
   14908:	add	r4, r4, #3
   1490c:	str	r6, [sp, #80]	; 0x50
   14910:	mov	fp, r3
   14914:	mov	r5, #39	; 0x27
   14918:	b	13de4 <__assert_fail@plt+0x2ce0>
   1491c:	ldr	r3, [sp, #44]	; 0x2c
   14920:	cmp	r3, #0
   14924:	bne	14ce0 <__assert_fail@plt+0x3bdc>
   14928:	mov	r6, #0
   1492c:	mov	r5, #63	; 0x3f
   14930:	str	r3, [sp, #40]	; 0x28
   14934:	mov	r3, fp
   14938:	b	13de4 <__assert_fail@plt+0x2ce0>
   1493c:	mov	r2, #0
   14940:	mov	r3, #0
   14944:	cmn	r8, #1
   14948:	strd	r2, [sp, #128]	; 0x80
   1494c:	bne	1495c <__assert_fail@plt+0x3858>
   14950:	ldr	r0, [sp, #28]
   14954:	bl	10fd8 <strlen@plt>
   14958:	mov	r8, r0
   1495c:	str	r9, [sp, #100]	; 0x64
   14960:	mov	r3, #0
   14964:	strd	sl, [sp, #104]	; 0x68
   14968:	ldr	sl, [sp, #28]
   1496c:	str	r5, [sp, #112]	; 0x70
   14970:	mov	r5, r3
   14974:	ldr	r9, [sp, #68]	; 0x44
   14978:	str	r4, [sp, #116]	; 0x74
   1497c:	add	r4, r7, r5
   14980:	add	r3, sp, #128	; 0x80
   14984:	add	fp, sl, r4
   14988:	sub	r2, r8, r4
   1498c:	mov	r1, fp
   14990:	add	r0, sp, #124	; 0x7c
   14994:	bl	19200 <__assert_fail@plt+0x80fc>
   14998:	subs	r1, r0, #0
   1499c:	beq	149dc <__assert_fail@plt+0x38d8>
   149a0:	cmn	r1, #1
   149a4:	beq	14d34 <__assert_fail@plt+0x3c30>
   149a8:	cmn	r1, #2
   149ac:	beq	14d54 <__assert_fail@plt+0x3c50>
   149b0:	cmp	r9, #0
   149b4:	bne	14a0c <__assert_fail@plt+0x3908>
   149b8:	ldr	r0, [sp, #124]	; 0x7c
   149bc:	add	r5, r5, r1
   149c0:	bl	10f18 <iswprint@plt>
   149c4:	cmp	r0, #0
   149c8:	add	r0, sp, #128	; 0x80
   149cc:	moveq	r6, #0
   149d0:	bl	10ed0 <mbsinit@plt>
   149d4:	cmp	r0, #0
   149d8:	beq	1497c <__assert_fail@plt+0x3878>
   149dc:	ldr	r3, [sp, #60]	; 0x3c
   149e0:	add	r9, sp, #100	; 0x64
   149e4:	mov	r0, r5
   149e8:	ldm	r9, {r9, sl, fp}
   149ec:	eor	r2, r6, #1
   149f0:	ldr	r5, [sp, #112]	; 0x70
   149f4:	and	r2, r2, r3
   149f8:	uxtb	r2, r2
   149fc:	ldr	r4, [sp, #116]	; 0x74
   14a00:	cmp	r0, #1
   14a04:	bhi	14520 <__assert_fail@plt+0x341c>
   14a08:	b	14510 <__assert_fail@plt+0x340c>
   14a0c:	cmp	r1, #1
   14a10:	beq	149b8 <__assert_fail@plt+0x38b4>
   14a14:	add	r2, r4, #1
   14a18:	add	r3, sl, r1
   14a1c:	add	r2, sl, r2
   14a20:	add	r4, r3, r4
   14a24:	ldrb	r3, [r2], #1
   14a28:	sub	r3, r3, #91	; 0x5b
   14a2c:	cmp	r3, #33	; 0x21
   14a30:	ldrls	pc, [pc, r3, lsl #2]
   14a34:	b	14ac0 <__assert_fail@plt+0x39bc>
   14a38:	andeq	r4, r1, ip, asr #21
   14a3c:	andeq	r4, r1, ip, asr #21
   14a40:	andeq	r4, r1, r0, asr #21
   14a44:	andeq	r4, r1, ip, asr #21
   14a48:	andeq	r4, r1, r0, asr #21
   14a4c:	andeq	r4, r1, ip, asr #21
   14a50:	andeq	r4, r1, r0, asr #21
   14a54:	andeq	r4, r1, r0, asr #21
   14a58:	andeq	r4, r1, r0, asr #21
   14a5c:	andeq	r4, r1, r0, asr #21
   14a60:	andeq	r4, r1, r0, asr #21
   14a64:	andeq	r4, r1, r0, asr #21
   14a68:	andeq	r4, r1, r0, asr #21
   14a6c:	andeq	r4, r1, r0, asr #21
   14a70:	andeq	r4, r1, r0, asr #21
   14a74:	andeq	r4, r1, r0, asr #21
   14a78:	andeq	r4, r1, r0, asr #21
   14a7c:	andeq	r4, r1, r0, asr #21
   14a80:	andeq	r4, r1, r0, asr #21
   14a84:	andeq	r4, r1, r0, asr #21
   14a88:	andeq	r4, r1, r0, asr #21
   14a8c:	andeq	r4, r1, r0, asr #21
   14a90:	andeq	r4, r1, r0, asr #21
   14a94:	andeq	r4, r1, r0, asr #21
   14a98:	andeq	r4, r1, r0, asr #21
   14a9c:	andeq	r4, r1, r0, asr #21
   14aa0:	andeq	r4, r1, r0, asr #21
   14aa4:	andeq	r4, r1, r0, asr #21
   14aa8:	andeq	r4, r1, r0, asr #21
   14aac:	andeq	r4, r1, r0, asr #21
   14ab0:	andeq	r4, r1, r0, asr #21
   14ab4:	andeq	r4, r1, r0, asr #21
   14ab8:	andeq	r4, r1, r0, asr #21
   14abc:	andeq	r4, r1, ip, asr #21
   14ac0:	cmp	r4, r2
   14ac4:	bne	14a24 <__assert_fail@plt+0x3920>
   14ac8:	b	149b8 <__assert_fail@plt+0x38b4>
   14acc:	mov	r3, #2
   14ad0:	ldr	fp, [sp, #100]	; 0x64
   14ad4:	str	r3, [sp, #176]	; 0xb0
   14ad8:	ldr	sl, [sp, #104]	; 0x68
   14adc:	b	13fa0 <__assert_fail@plt+0x2e9c>
   14ae0:	ldr	r2, [sp, #52]	; 0x34
   14ae4:	mov	fp, r9
   14ae8:	ldr	r3, [sp, #60]	; 0x3c
   14aec:	and	r3, r3, r2
   14af0:	str	r3, [sp, #60]	; 0x3c
   14af4:	b	13fa0 <__assert_fail@plt+0x2e9c>
   14af8:	cmp	sl, r4
   14afc:	movhi	r2, fp
   14b00:	bhi	13e78 <__assert_fail@plt+0x2d74>
   14b04:	mov	r2, r4
   14b08:	b	13e88 <__assert_fail@plt+0x2d84>
   14b0c:	mov	r6, r3
   14b10:	mov	r5, #63	; 0x3f
   14b14:	b	13f48 <__assert_fail@plt+0x2e44>
   14b18:	ldr	r8, [sp, #36]	; 0x24
   14b1c:	ldr	r6, [sp, #100]	; 0x64
   14b20:	b	13df4 <__assert_fail@plt+0x2cf0>
   14b24:	mov	fp, r9
   14b28:	ldr	r8, [sp, #36]	; 0x24
   14b2c:	ldr	r3, [sp, #52]	; 0x34
   14b30:	str	r3, [sp, #60]	; 0x3c
   14b34:	b	13fa0 <__assert_fail@plt+0x2e9c>
   14b38:	ldr	r8, [sp, #36]	; 0x24
   14b3c:	ldr	r6, [sp, #100]	; 0x64
   14b40:	b	13c8c <__assert_fail@plt+0x2b88>
   14b44:	mov	r3, #0
   14b48:	add	r4, r4, #4
   14b4c:	mov	fp, r2
   14b50:	mov	r6, r3
   14b54:	mov	r5, #48	; 0x30
   14b58:	b	13de4 <__assert_fail@plt+0x2ce0>
   14b5c:	mov	r6, r3
   14b60:	b	145e0 <__assert_fail@plt+0x34dc>
   14b64:	mov	r3, #1
   14b68:	movw	r2, #40712	; 0x9f08
   14b6c:	movt	r2, #1
   14b70:	mov	r4, r3
   14b74:	mov	r9, sl
   14b78:	str	r3, [sp, #32]
   14b7c:	str	sl, [sp, #44]	; 0x2c
   14b80:	str	r3, [sp, #48]	; 0x30
   14b84:	str	sl, [sp, #52]	; 0x34
   14b88:	str	r3, [sp, #56]	; 0x38
   14b8c:	str	r3, [sp, #60]	; 0x3c
   14b90:	str	sl, [sp, #64]	; 0x40
   14b94:	str	sl, [sp, #68]	; 0x44
   14b98:	str	r2, [sp, #72]	; 0x48
   14b9c:	str	sl, [sp, #80]	; 0x50
   14ba0:	str	sl, [sp, #84]	; 0x54
   14ba4:	str	sl, [sp, #88]	; 0x58
   14ba8:	b	13698 <__assert_fail@plt+0x2594>
   14bac:	mov	r3, #0
   14bb0:	mov	r5, #48	; 0x30
   14bb4:	mov	r6, r3
   14bb8:	b	13de4 <__assert_fail@plt+0x2ce0>
   14bbc:	cmp	sl, r4
   14bc0:	mov	r5, #48	; 0x30
   14bc4:	movhi	r3, #48	; 0x30
   14bc8:	strbhi	r3, [r9, r4]
   14bcc:	add	r3, r2, #2
   14bd0:	add	r4, r2, #3
   14bd4:	cmp	sl, r3
   14bd8:	movhi	r1, #48	; 0x30
   14bdc:	strbhi	r1, [r9, r3]
   14be0:	mov	r3, #0
   14be4:	b	13ec0 <__assert_fail@plt+0x2dbc>
   14be8:	ldr	r3, [sp, #48]	; 0x30
   14bec:	str	r3, [sp, #40]	; 0x28
   14bf0:	b	144cc <__assert_fail@plt+0x33c8>
   14bf4:	ldr	r2, [sp, #28]
   14bf8:	ldrb	r2, [r2, r3]
   14bfc:	sub	r1, r2, #33	; 0x21
   14c00:	cmp	r1, #29
   14c04:	ldrls	pc, [pc, r1, lsl #2]
   14c08:	b	13f44 <__assert_fail@plt+0x2e40>
   14c0c:	andeq	r4, r1, r4, lsl #25
   14c10:	andeq	r3, r1, r4, asr #30
   14c14:	andeq	r3, r1, r4, asr #30
   14c18:	andeq	r3, r1, r4, asr #30
   14c1c:	andeq	r3, r1, r4, asr #30
   14c20:	andeq	r3, r1, r4, asr #30
   14c24:	andeq	r4, r1, r4, lsl #25
   14c28:	andeq	r4, r1, r4, lsl #25
   14c2c:	andeq	r4, r1, r4, lsl #25
   14c30:	andeq	r3, r1, r4, asr #30
   14c34:	andeq	r3, r1, r4, asr #30
   14c38:	andeq	r3, r1, r4, asr #30
   14c3c:	andeq	r4, r1, r4, lsl #25
   14c40:	andeq	r3, r1, r4, asr #30
   14c44:	andeq	r4, r1, r4, lsl #25
   14c48:	andeq	r3, r1, r4, asr #30
   14c4c:	andeq	r3, r1, r4, asr #30
   14c50:	andeq	r3, r1, r4, asr #30
   14c54:	andeq	r3, r1, r4, asr #30
   14c58:	andeq	r3, r1, r4, asr #30
   14c5c:	andeq	r3, r1, r4, asr #30
   14c60:	andeq	r3, r1, r4, asr #30
   14c64:	andeq	r3, r1, r4, asr #30
   14c68:	andeq	r3, r1, r4, asr #30
   14c6c:	andeq	r3, r1, r4, asr #30
   14c70:	andeq	r3, r1, r4, asr #30
   14c74:	andeq	r3, r1, r4, asr #30
   14c78:	andeq	r4, r1, r4, lsl #25
   14c7c:	andeq	r4, r1, r4, lsl #25
   14c80:	andeq	r4, r1, r4, lsl #25
   14c84:	ldr	r1, [sp, #44]	; 0x2c
   14c88:	cmp	r1, #0
   14c8c:	bne	14eec <__assert_fail@plt+0x3de8>
   14c90:	cmp	sl, r4
   14c94:	mov	r7, r3
   14c98:	movhi	r1, #63	; 0x3f
   14c9c:	mov	r5, r2
   14ca0:	mov	r3, fp
   14ca4:	strbhi	r1, [r9, r4]
   14ca8:	add	r1, r4, #1
   14cac:	cmp	sl, r1
   14cb0:	movhi	r0, #34	; 0x22
   14cb4:	strbhi	r0, [r9, r1]
   14cb8:	add	r1, r4, #2
   14cbc:	cmp	sl, r1
   14cc0:	movhi	r0, #34	; 0x22
   14cc4:	strbhi	r0, [r9, r1]
   14cc8:	add	r1, r4, #3
   14ccc:	add	r4, r4, #4
   14cd0:	cmp	sl, r1
   14cd4:	movhi	r0, #63	; 0x3f
   14cd8:	strbhi	r0, [r9, r1]
   14cdc:	b	13ec0 <__assert_fail@plt+0x2dbc>
   14ce0:	mov	fp, r9
   14ce4:	b	13fa0 <__assert_fail@plt+0x2e9c>
   14ce8:	ldr	r3, [sp, #188]	; 0xbc
   14cec:	ldrb	r3, [r3]
   14cf0:	cmp	r3, #0
   14cf4:	beq	13630 <__assert_fail@plt+0x252c>
   14cf8:	ldr	r2, [sp, #188]	; 0xbc
   14cfc:	cmp	sl, r4
   14d00:	bls	14d20 <__assert_fail@plt+0x3c1c>
   14d04:	strb	r3, [fp, r4]
   14d08:	add	r4, r4, #1
   14d0c:	ldrb	r3, [r2, #1]!
   14d10:	cmp	r3, #0
   14d14:	beq	13630 <__assert_fail@plt+0x252c>
   14d18:	cmp	sl, r4
   14d1c:	bhi	14d04 <__assert_fail@plt+0x3c00>
   14d20:	ldrb	r3, [r2, #1]!
   14d24:	add	r4, r4, #1
   14d28:	cmp	r3, #0
   14d2c:	bne	14cfc <__assert_fail@plt+0x3bf8>
   14d30:	b	13630 <__assert_fail@plt+0x252c>
   14d34:	add	r9, sp, #100	; 0x64
   14d38:	mov	r0, r5
   14d3c:	ldr	r2, [sp, #60]	; 0x3c
   14d40:	mov	r6, #0
   14d44:	ldm	r9, {r9, sl, fp}
   14d48:	ldr	r5, [sp, #112]	; 0x70
   14d4c:	ldr	r4, [sp, #116]	; 0x74
   14d50:	b	14a00 <__assert_fail@plt+0x38fc>
   14d54:	cmp	r4, r8
   14d58:	add	r9, sp, #100	; 0x64
   14d5c:	mov	r1, r4
   14d60:	mov	r2, fp
   14d64:	ldm	r9, {r9, sl, fp}
   14d68:	mov	r3, r5
   14d6c:	mov	r0, r5
   14d70:	ldr	r5, [sp, #112]	; 0x70
   14d74:	ldr	r4, [sp, #116]	; 0x74
   14d78:	bcs	14dac <__assert_fail@plt+0x3ca8>
   14d7c:	ldrb	r6, [r2]
   14d80:	cmp	r6, #0
   14d84:	bne	14d98 <__assert_fail@plt+0x3c94>
   14d88:	b	14ee4 <__assert_fail@plt+0x3de0>
   14d8c:	ldrb	r6, [r2, #1]!
   14d90:	cmp	r6, #0
   14d94:	beq	14e7c <__assert_fail@plt+0x3d78>
   14d98:	add	r3, r3, #1
   14d9c:	add	r1, r7, r3
   14da0:	cmp	r8, r1
   14da4:	bhi	14d8c <__assert_fail@plt+0x3c88>
   14da8:	mov	r0, r3
   14dac:	mov	r6, #0
   14db0:	ldr	r2, [sp, #60]	; 0x3c
   14db4:	b	14a00 <__assert_fail@plt+0x38fc>
   14db8:	mov	r3, #1
   14dbc:	mov	r4, #0
   14dc0:	mov	r9, r4
   14dc4:	str	r3, [sp, #32]
   14dc8:	str	r3, [sp, #44]	; 0x2c
   14dcc:	str	r3, [sp, #48]	; 0x30
   14dd0:	str	r4, [sp, #52]	; 0x34
   14dd4:	str	r3, [sp, #56]	; 0x38
   14dd8:	str	r3, [sp, #60]	; 0x3c
   14ddc:	str	r3, [sp, #88]	; 0x58
   14de0:	movw	r3, #40712	; 0x9f08
   14de4:	movt	r3, #1
   14de8:	str	r4, [sp, #64]	; 0x40
   14dec:	str	r4, [sp, #68]	; 0x44
   14df0:	str	r3, [sp, #72]	; 0x48
   14df4:	str	r4, [sp, #80]	; 0x50
   14df8:	str	r4, [sp, #84]	; 0x54
   14dfc:	b	13698 <__assert_fail@plt+0x2594>
   14e00:	mov	fp, r9
   14e04:	b	13fb4 <__assert_fail@plt+0x2eb0>
   14e08:	ldr	r3, [sp, #48]	; 0x30
   14e0c:	b	14928 <__assert_fail@plt+0x3824>
   14e10:	mov	r2, r3
   14e14:	ldr	r3, [sp, #72]	; 0x48
   14e18:	cmp	r3, #0
   14e1c:	moveq	r2, #0
   14e20:	andne	r2, r2, #1
   14e24:	cmp	r2, #0
   14e28:	beq	14e58 <__assert_fail@plt+0x3d54>
   14e2c:	mov	r2, r3
   14e30:	ldrb	r3, [r3]
   14e34:	cmp	r3, #0
   14e38:	beq	14e58 <__assert_fail@plt+0x3d54>
   14e3c:	cmp	sl, r4
   14e40:	bls	14e68 <__assert_fail@plt+0x3d64>
   14e44:	strb	r3, [fp, r4]
   14e48:	add	r4, r4, #1
   14e4c:	ldrb	r3, [r2, #1]!
   14e50:	cmp	r3, #0
   14e54:	bne	14e3c <__assert_fail@plt+0x3d38>
   14e58:	cmp	sl, r4
   14e5c:	movhi	r3, #0
   14e60:	strbhi	r3, [fp, r4]
   14e64:	b	13ff0 <__assert_fail@plt+0x2eec>
   14e68:	ldrb	r3, [r2, #1]!
   14e6c:	add	r4, r4, #1
   14e70:	cmp	r3, #0
   14e74:	bne	14e3c <__assert_fail@plt+0x3d38>
   14e78:	b	14e58 <__assert_fail@plt+0x3d54>
   14e7c:	mov	r0, r3
   14e80:	ldr	r2, [sp, #60]	; 0x3c
   14e84:	b	14a00 <__assert_fail@plt+0x38fc>
   14e88:	mov	ip, #5
   14e8c:	mov	r3, r8
   14e90:	ldr	r1, [sp, #84]	; 0x54
   14e94:	str	ip, [sp]
   14e98:	ldr	r2, [sp, #180]	; 0xb4
   14e9c:	ldr	ip, [sp, #188]	; 0xbc
   14ea0:	ldr	r0, [sp, #184]	; 0xb8
   14ea4:	str	r2, [sp, #4]
   14ea8:	ldr	r2, [sp, #28]
   14eac:	str	ip, [sp, #12]
   14eb0:	ldr	ip, [sp, #192]	; 0xc0
   14eb4:	str	r0, [sp, #8]
   14eb8:	mov	r0, fp
   14ebc:	str	ip, [sp, #16]
   14ec0:	bl	13574 <__assert_fail@plt+0x2470>
   14ec4:	mov	r4, r0
   14ec8:	b	13ff0 <__assert_fail@plt+0x2eec>
   14ecc:	mov	r6, r3
   14ed0:	str	r3, [sp, #40]	; 0x28
   14ed4:	b	13f60 <__assert_fail@plt+0x2e5c>
   14ed8:	mov	r3, #2
   14edc:	str	r3, [sp, #176]	; 0xb0
   14ee0:	b	13fa0 <__assert_fail@plt+0x2e9c>
   14ee4:	ldr	r2, [sp, #60]	; 0x3c
   14ee8:	b	14a00 <__assert_fail@plt+0x38fc>
   14eec:	mov	r3, #5
   14ef0:	mov	fp, r9
   14ef4:	str	r3, [sp, #176]	; 0xb0
   14ef8:	b	13fb4 <__assert_fail@plt+0x2eb0>
   14efc:	mov	r1, #1
   14f00:	mov	r9, #0
   14f04:	mov	r3, r9
   14f08:	mov	r2, r9
   14f0c:	str	r1, [sp, #32]
   14f10:	str	sl, [sp, #84]	; 0x54
   14f14:	b	13d3c <__assert_fail@plt+0x2c38>
   14f18:	mov	r3, #0
   14f1c:	mov	r2, #1
   14f20:	mov	r9, r3
   14f24:	mov	r4, r3
   14f28:	str	r2, [sp, #32]
   14f2c:	strd	r2, [sp, #44]	; 0x2c
   14f30:	strd	r2, [sp, #56]	; 0x38
   14f34:	str	r3, [sp, #80]	; 0x50
   14f38:	str	r3, [sp, #84]	; 0x54
   14f3c:	str	r3, [sp, #88]	; 0x58
   14f40:	movw	r3, #40732	; 0x9f1c
   14f44:	movt	r3, #1
   14f48:	str	r2, [sp, #52]	; 0x34
   14f4c:	str	r2, [sp, #64]	; 0x40
   14f50:	str	r2, [sp, #68]	; 0x44
   14f54:	str	r3, [sp, #72]	; 0x48
   14f58:	b	13698 <__assert_fail@plt+0x2594>
   14f5c:	bl	110ec <abort@plt>
   14f60:	strd	r4, [sp, #-36]!	; 0xffffffdc
   14f64:	mov	r4, r0
   14f68:	mov	r5, r3
   14f6c:	strd	r6, [sp, #8]
   14f70:	movw	r7, #45328	; 0xb110
   14f74:	movt	r7, #2
   14f78:	strd	r8, [sp, #16]
   14f7c:	strd	sl, [sp, #24]
   14f80:	mov	sl, r1
   14f84:	mov	fp, r2
   14f88:	str	lr, [sp, #32]
   14f8c:	sub	sp, sp, #60	; 0x3c
   14f90:	bl	10ff0 <__errno_location@plt>
   14f94:	mov	r8, r0
   14f98:	cmn	r4, #-2147483647	; 0x80000001
   14f9c:	ldr	r6, [r7]
   14fa0:	movne	r0, #0
   14fa4:	moveq	r0, #1
   14fa8:	ldr	r3, [r8]
   14fac:	orrs	r0, r0, r4, lsr #31
   14fb0:	str	r3, [sp, #28]
   14fb4:	bne	15144 <__assert_fail@plt+0x4040>
   14fb8:	ldr	r3, [r7, #4]
   14fbc:	cmp	r3, r4
   14fc0:	bgt	15020 <__assert_fail@plt+0x3f1c>
   14fc4:	add	r1, r7, #8
   14fc8:	sub	r2, r4, r3
   14fcc:	str	r3, [sp, #52]	; 0x34
   14fd0:	cmp	r6, r1
   14fd4:	add	r2, r2, #1
   14fd8:	beq	1511c <__assert_fail@plt+0x4018>
   14fdc:	mov	r1, #8
   14fe0:	mov	r0, r6
   14fe4:	mvn	r3, #-2147483648	; 0x80000000
   14fe8:	str	r1, [sp]
   14fec:	add	r1, sp, #52	; 0x34
   14ff0:	bl	1788c <__assert_fail@plt+0x6788>
   14ff4:	mov	r6, r0
   14ff8:	str	r0, [r7]
   14ffc:	ldr	r0, [r7, #4]
   15000:	mov	r1, #0
   15004:	ldr	r2, [sp, #52]	; 0x34
   15008:	sub	r2, r2, r0
   1500c:	add	r0, r6, r0, lsl #3
   15010:	lsl	r2, r2, #3
   15014:	bl	11020 <memset@plt>
   15018:	ldr	r3, [sp, #52]	; 0x34
   1501c:	str	r3, [r7, #4]
   15020:	ldr	r1, [r5, #4]
   15024:	add	r0, r6, r4, lsl #3
   15028:	add	ip, r5, #8
   1502c:	mov	r3, fp
   15030:	mov	r2, sl
   15034:	ldr	r7, [r0, #4]
   15038:	str	r0, [sp, #36]	; 0x24
   1503c:	str	ip, [sp, #40]	; 0x28
   15040:	orr	r0, r1, #1
   15044:	ldr	r9, [r6, r4, lsl #3]
   15048:	str	ip, [sp, #8]
   1504c:	ldr	lr, [r5, #44]	; 0x2c
   15050:	str	r0, [sp, #4]
   15054:	ldr	ip, [r5]
   15058:	mov	r1, r9
   1505c:	str	ip, [sp, #32]
   15060:	ldr	ip, [r5, #40]	; 0x28
   15064:	str	ip, [sp, #12]
   15068:	ldr	ip, [sp, #32]
   1506c:	str	lr, [sp, #16]
   15070:	str	r0, [sp, #44]	; 0x2c
   15074:	mov	r0, r7
   15078:	str	ip, [sp]
   1507c:	bl	13574 <__assert_fail@plt+0x2470>
   15080:	cmp	r9, r0
   15084:	bhi	150f4 <__assert_fail@plt+0x3ff0>
   15088:	add	r9, r0, #1
   1508c:	movw	r3, #45456	; 0xb190
   15090:	movt	r3, #2
   15094:	cmp	r7, r3
   15098:	str	r9, [r6, r4, lsl #3]
   1509c:	beq	150a8 <__assert_fail@plt+0x3fa4>
   150a0:	mov	r0, r7
   150a4:	bl	12140 <__assert_fail@plt+0x103c>
   150a8:	mov	r0, r9
   150ac:	bl	175e8 <__assert_fail@plt+0x64e4>
   150b0:	ldr	ip, [r5]
   150b4:	mov	r3, fp
   150b8:	mov	r2, sl
   150bc:	mov	r1, r9
   150c0:	mov	r7, r0
   150c4:	ldr	lr, [sp, #36]	; 0x24
   150c8:	ldr	r4, [r5, #40]	; 0x28
   150cc:	str	r0, [lr, #4]
   150d0:	ldr	lr, [r5, #44]	; 0x2c
   150d4:	str	ip, [sp]
   150d8:	ldr	ip, [sp, #44]	; 0x2c
   150dc:	str	ip, [sp, #4]
   150e0:	ldr	ip, [sp, #40]	; 0x28
   150e4:	str	r4, [sp, #12]
   150e8:	str	lr, [sp, #16]
   150ec:	str	ip, [sp, #8]
   150f0:	bl	13574 <__assert_fail@plt+0x2470>
   150f4:	ldr	r3, [sp, #28]
   150f8:	mov	r0, r7
   150fc:	str	r3, [r8]
   15100:	add	sp, sp, #60	; 0x3c
   15104:	ldrd	r4, [sp]
   15108:	ldrd	r6, [sp, #8]
   1510c:	ldrd	r8, [sp, #16]
   15110:	ldrd	sl, [sp, #24]
   15114:	add	sp, sp, #32
   15118:	pop	{pc}		; (ldr pc, [sp], #4)
   1511c:	mov	r1, #8
   15120:	mvn	r3, #-2147483648	; 0x80000000
   15124:	str	r1, [sp]
   15128:	add	r1, sp, #52	; 0x34
   1512c:	bl	1788c <__assert_fail@plt+0x6788>
   15130:	ldrd	r2, [r7, #8]
   15134:	mov	r6, r0
   15138:	str	r0, [r7]
   1513c:	strd	r2, [r0]
   15140:	b	14ffc <__assert_fail@plt+0x3ef8>
   15144:	bl	110ec <abort@plt>
   15148:	strd	r4, [sp, #-16]!
   1514c:	mov	r5, r0
   15150:	str	r6, [sp, #8]
   15154:	str	lr, [sp, #12]
   15158:	bl	10ff0 <__errno_location@plt>
   1515c:	mov	r4, r0
   15160:	cmp	r5, #0
   15164:	ldr	r0, [pc, #32]	; 1518c <__assert_fail@plt+0x4088>
   15168:	mov	r1, #48	; 0x30
   1516c:	movne	r0, r5
   15170:	ldr	r6, [r4]
   15174:	bl	17a2c <__assert_fail@plt+0x6928>
   15178:	str	r6, [r4]
   1517c:	ldrd	r4, [sp]
   15180:	ldr	r6, [sp, #8]
   15184:	add	sp, sp, #12
   15188:	pop	{pc}		; (ldr pc, [sp], #4)
   1518c:	muleq	r2, r0, r2
   15190:	ldr	r3, [pc, #12]	; 151a4 <__assert_fail@plt+0x40a0>
   15194:	cmp	r0, #0
   15198:	moveq	r0, r3
   1519c:	ldr	r0, [r0]
   151a0:	bx	lr
   151a4:	muleq	r2, r0, r2
   151a8:	ldr	r3, [pc, #12]	; 151bc <__assert_fail@plt+0x40b8>
   151ac:	cmp	r0, #0
   151b0:	moveq	r0, r3
   151b4:	str	r1, [r0]
   151b8:	bx	lr
   151bc:	muleq	r2, r0, r2
   151c0:	ldr	r3, [pc, #52]	; 151fc <__assert_fail@plt+0x40f8>
   151c4:	cmp	r0, #0
   151c8:	push	{lr}		; (str lr, [sp, #-4]!)
   151cc:	lsr	lr, r1, #5
   151d0:	and	r1, r1, #31
   151d4:	moveq	r0, r3
   151d8:	add	r3, r0, #8
   151dc:	ldr	ip, [r3, lr, lsl #2]
   151e0:	lsr	r0, ip, r1
   151e4:	eor	r2, r2, r0
   151e8:	and	r0, r0, #1
   151ec:	and	r2, r2, #1
   151f0:	eor	r1, ip, r2, lsl r1
   151f4:	str	r1, [r3, lr, lsl #2]
   151f8:	pop	{pc}		; (ldr pc, [sp], #4)
   151fc:	muleq	r2, r0, r2
   15200:	ldr	r3, [pc, #16]	; 15218 <__assert_fail@plt+0x4114>
   15204:	cmp	r0, #0
   15208:	movne	r3, r0
   1520c:	ldr	r0, [r3, #4]
   15210:	str	r1, [r3, #4]
   15214:	bx	lr
   15218:	muleq	r2, r0, r2
   1521c:	ldr	r3, [pc, #48]	; 15254 <__assert_fail@plt+0x4150>
   15220:	cmp	r0, #0
   15224:	mov	ip, #10
   15228:	moveq	r0, r3
   1522c:	cmp	r2, #0
   15230:	cmpne	r1, #0
   15234:	str	ip, [r0]
   15238:	beq	15248 <__assert_fail@plt+0x4144>
   1523c:	str	r1, [r0, #40]	; 0x28
   15240:	str	r2, [r0, #44]	; 0x2c
   15244:	bx	lr
   15248:	str	r4, [sp, #-8]!
   1524c:	str	lr, [sp, #4]
   15250:	bl	110ec <abort@plt>
   15254:	muleq	r2, r0, r2
   15258:	strd	r4, [sp, #-28]!	; 0xffffffe4
   1525c:	strd	r6, [sp, #8]
   15260:	mov	r7, r0
   15264:	mov	r6, r1
   15268:	strd	r8, [sp, #16]
   1526c:	mov	r8, r2
   15270:	mov	r9, r3
   15274:	str	lr, [sp, #24]
   15278:	sub	sp, sp, #28
   1527c:	ldr	r4, [sp, #56]	; 0x38
   15280:	ldr	ip, [pc, #104]	; 152f0 <__assert_fail@plt+0x41ec>
   15284:	cmp	r4, #0
   15288:	moveq	r4, ip
   1528c:	bl	10ff0 <__errno_location@plt>
   15290:	ldr	ip, [r4, #44]	; 0x2c
   15294:	mov	r5, r0
   15298:	mov	r1, r6
   1529c:	add	lr, r4, #8
   152a0:	mov	r3, r9
   152a4:	ldr	r6, [r5]
   152a8:	mov	r2, r8
   152ac:	mov	r0, r7
   152b0:	str	ip, [sp, #16]
   152b4:	ldr	ip, [r4, #40]	; 0x28
   152b8:	str	lr, [sp, #8]
   152bc:	str	ip, [sp, #12]
   152c0:	ldr	ip, [r4, #4]
   152c4:	str	ip, [sp, #4]
   152c8:	ldr	ip, [r4]
   152cc:	str	ip, [sp]
   152d0:	bl	13574 <__assert_fail@plt+0x2470>
   152d4:	str	r6, [r5]
   152d8:	add	sp, sp, #28
   152dc:	ldrd	r4, [sp]
   152e0:	ldrd	r6, [sp, #8]
   152e4:	ldrd	r8, [sp, #16]
   152e8:	add	sp, sp, #24
   152ec:	pop	{pc}		; (ldr pc, [sp], #4)
   152f0:	muleq	r2, r0, r2
   152f4:	strd	r4, [sp, #-36]!	; 0xffffffdc
   152f8:	cmp	r2, #0
   152fc:	ldr	r4, [pc, #192]	; 153c4 <__assert_fail@plt+0x42c0>
   15300:	movne	r4, r2
   15304:	strd	r6, [sp, #8]
   15308:	strd	r8, [sp, #16]
   1530c:	mov	r9, r1
   15310:	mov	r8, r0
   15314:	strd	sl, [sp, #24]
   15318:	str	lr, [sp, #32]
   1531c:	sub	sp, sp, #36	; 0x24
   15320:	bl	10ff0 <__errno_location@plt>
   15324:	ldr	r5, [r4, #4]
   15328:	mov	r6, r0
   1532c:	add	r7, r4, #8
   15330:	mov	r1, #0
   15334:	mov	r3, r9
   15338:	ldr	ip, [r4, #44]	; 0x2c
   1533c:	mov	r2, r8
   15340:	mov	r0, r1
   15344:	ldr	sl, [r6]
   15348:	orr	r5, r5, #1
   1534c:	str	ip, [sp, #16]
   15350:	ldr	ip, [r4, #40]	; 0x28
   15354:	stmib	sp, {r5, r7, ip}
   15358:	ldr	ip, [r4]
   1535c:	str	ip, [sp]
   15360:	bl	13574 <__assert_fail@plt+0x2470>
   15364:	add	r1, r0, #1
   15368:	mov	r0, r1
   1536c:	str	r1, [sp, #28]
   15370:	bl	175e8 <__assert_fail@plt+0x64e4>
   15374:	ldr	ip, [r4, #44]	; 0x2c
   15378:	mov	fp, r0
   1537c:	mov	r3, r9
   15380:	mov	r2, r8
   15384:	ldr	r1, [sp, #28]
   15388:	str	ip, [sp, #16]
   1538c:	ldr	ip, [r4, #40]	; 0x28
   15390:	stmib	sp, {r5, r7, ip}
   15394:	ldr	ip, [r4]
   15398:	str	ip, [sp]
   1539c:	bl	13574 <__assert_fail@plt+0x2470>
   153a0:	mov	r0, fp
   153a4:	str	sl, [r6]
   153a8:	add	sp, sp, #36	; 0x24
   153ac:	ldrd	r4, [sp]
   153b0:	ldrd	r6, [sp, #8]
   153b4:	ldrd	r8, [sp, #16]
   153b8:	ldrd	sl, [sp, #24]
   153bc:	add	sp, sp, #32
   153c0:	pop	{pc}		; (ldr pc, [sp], #4)
   153c4:	muleq	r2, r0, r2
   153c8:	strd	r4, [sp, #-36]!	; 0xffffffdc
   153cc:	cmp	r3, #0
   153d0:	ldr	r4, [pc, #220]	; 154b4 <__assert_fail@plt+0x43b0>
   153d4:	movne	r4, r3
   153d8:	strd	r6, [sp, #8]
   153dc:	mov	r6, r2
   153e0:	strd	r8, [sp, #16]
   153e4:	mov	r9, r0
   153e8:	strd	sl, [sp, #24]
   153ec:	mov	sl, r1
   153f0:	str	lr, [sp, #32]
   153f4:	sub	sp, sp, #44	; 0x2c
   153f8:	bl	10ff0 <__errno_location@plt>
   153fc:	ldr	r5, [r4, #4]
   15400:	mov	r7, r0
   15404:	mov	r1, #0
   15408:	add	r8, r4, #8
   1540c:	mov	r3, sl
   15410:	ldr	ip, [r4, #44]	; 0x2c
   15414:	mov	r2, r9
   15418:	mov	r0, r1
   1541c:	ldr	lr, [r7]
   15420:	cmp	r6, r1
   15424:	orreq	r5, r5, #1
   15428:	str	ip, [sp, #16]
   1542c:	ldr	ip, [r4, #40]	; 0x28
   15430:	stmib	sp, {r5, r8, ip}
   15434:	ldr	ip, [r4]
   15438:	str	lr, [sp, #28]
   1543c:	str	ip, [sp]
   15440:	bl	13574 <__assert_fail@plt+0x2470>
   15444:	add	r1, r0, #1
   15448:	mov	fp, r0
   1544c:	mov	r0, r1
   15450:	str	r1, [sp, #36]	; 0x24
   15454:	bl	175e8 <__assert_fail@plt+0x64e4>
   15458:	ldr	ip, [r4, #44]	; 0x2c
   1545c:	mov	r3, sl
   15460:	mov	r2, r9
   15464:	ldr	r1, [sp, #36]	; 0x24
   15468:	str	ip, [sp, #16]
   1546c:	ldr	ip, [r4, #40]	; 0x28
   15470:	str	r0, [sp, #32]
   15474:	stmib	sp, {r5, r8, ip}
   15478:	ldr	ip, [r4]
   1547c:	str	ip, [sp]
   15480:	bl	13574 <__assert_fail@plt+0x2470>
   15484:	ldr	lr, [sp, #28]
   15488:	cmp	r6, #0
   1548c:	ldr	r0, [sp, #32]
   15490:	str	lr, [r7]
   15494:	strne	fp, [r6]
   15498:	add	sp, sp, #44	; 0x2c
   1549c:	ldrd	r4, [sp]
   154a0:	ldrd	r6, [sp, #8]
   154a4:	ldrd	r8, [sp, #16]
   154a8:	ldrd	sl, [sp, #24]
   154ac:	add	sp, sp, #32
   154b0:	pop	{pc}		; (ldr pc, [sp], #4)
   154b4:	muleq	r2, r0, r2
   154b8:	strd	r4, [sp, #-24]!	; 0xffffffe8
   154bc:	movw	r5, #45328	; 0xb110
   154c0:	movt	r5, #2
   154c4:	ldr	r3, [r5, #4]
   154c8:	strd	r6, [sp, #8]
   154cc:	str	r8, [sp, #16]
   154d0:	str	lr, [sp, #20]
   154d4:	ldr	r7, [r5]
   154d8:	cmp	r3, #1
   154dc:	ble	15500 <__assert_fail@plt+0x43fc>
   154e0:	mov	r4, #1
   154e4:	add	r6, r7, #4
   154e8:	ldr	r0, [r6, r4, lsl #3]
   154ec:	add	r4, r4, #1
   154f0:	bl	12140 <__assert_fail@plt+0x103c>
   154f4:	ldr	r3, [r5, #4]
   154f8:	cmp	r3, r4
   154fc:	bgt	154e8 <__assert_fail@plt+0x43e4>
   15500:	ldr	r0, [r7, #4]
   15504:	movw	r4, #45456	; 0xb190
   15508:	movt	r4, #2
   1550c:	cmp	r0, r4
   15510:	beq	15524 <__assert_fail@plt+0x4420>
   15514:	bl	12140 <__assert_fail@plt+0x103c>
   15518:	mov	r3, #256	; 0x100
   1551c:	str	r3, [r5, #8]
   15520:	str	r4, [r5, #12]
   15524:	ldr	r4, [pc, #44]	; 15558 <__assert_fail@plt+0x4454>
   15528:	cmp	r7, r4
   1552c:	beq	1553c <__assert_fail@plt+0x4438>
   15530:	mov	r0, r7
   15534:	bl	12140 <__assert_fail@plt+0x103c>
   15538:	str	r4, [r5]
   1553c:	mov	r3, #1
   15540:	ldrd	r6, [sp, #8]
   15544:	str	r3, [r5, #4]
   15548:	ldrd	r4, [sp]
   1554c:	ldr	r8, [sp, #16]
   15550:	add	sp, sp, #20
   15554:	pop	{pc}		; (ldr pc, [sp], #4)
   15558:	andeq	fp, r2, r8, lsl r1
   1555c:	ldr	r3, [pc, #4]	; 15568 <__assert_fail@plt+0x4464>
   15560:	mvn	r2, #0
   15564:	b	14f60 <__assert_fail@plt+0x3e5c>
   15568:	muleq	r2, r0, r2
   1556c:	ldr	r3, [pc]	; 15574 <__assert_fail@plt+0x4470>
   15570:	b	14f60 <__assert_fail@plt+0x3e5c>
   15574:	muleq	r2, r0, r2
   15578:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1557c:	movw	r4, #45328	; 0xb110
   15580:	movt	r4, #2
   15584:	strd	r6, [sp, #8]
   15588:	strd	r8, [sp, #16]
   1558c:	strd	sl, [sp, #24]
   15590:	mov	sl, r0
   15594:	str	lr, [sp, #32]
   15598:	sub	sp, sp, #44	; 0x2c
   1559c:	bl	10ff0 <__errno_location@plt>
   155a0:	ldr	r3, [r0]
   155a4:	mov	r8, r0
   155a8:	ldr	r2, [r4, #4]
   155ac:	ldr	r5, [r4]
   155b0:	str	r3, [sp, #28]
   155b4:	cmp	r2, #0
   155b8:	bgt	15614 <__assert_fail@plt+0x4510>
   155bc:	add	r3, r4, #8
   155c0:	str	r2, [sp, #36]	; 0x24
   155c4:	rsb	r2, r2, #1
   155c8:	cmp	r5, r3
   155cc:	beq	156e0 <__assert_fail@plt+0x45dc>
   155d0:	mov	r1, #8
   155d4:	mov	r0, r5
   155d8:	mvn	r3, #-2147483648	; 0x80000000
   155dc:	str	r1, [sp]
   155e0:	add	r1, sp, #36	; 0x24
   155e4:	bl	1788c <__assert_fail@plt+0x6788>
   155e8:	mov	r5, r0
   155ec:	str	r0, [r4]
   155f0:	ldr	r0, [r4, #4]
   155f4:	mov	r1, #0
   155f8:	ldr	r2, [sp, #36]	; 0x24
   155fc:	sub	r2, r2, r0
   15600:	add	r0, r5, r0, lsl #3
   15604:	lsl	r2, r2, #3
   15608:	bl	11020 <memset@plt>
   1560c:	ldr	r3, [sp, #36]	; 0x24
   15610:	str	r3, [r4, #4]
   15614:	movw	r4, #45456	; 0xb190
   15618:	movt	r4, #2
   1561c:	ldr	r9, [r5]
   15620:	add	fp, r4, #264	; 0x108
   15624:	mvn	r3, #0
   15628:	ldr	r7, [r4, #260]	; 0x104
   1562c:	mov	r2, sl
   15630:	ldr	r6, [r5, #4]
   15634:	str	fp, [sp, #8]
   15638:	mov	r1, r9
   1563c:	ldr	ip, [r4, #256]	; 0x100
   15640:	orr	r7, r7, #1
   15644:	ldr	lr, [r4, #300]	; 0x12c
   15648:	mov	r0, r6
   1564c:	str	ip, [sp]
   15650:	str	r7, [sp, #4]
   15654:	str	lr, [sp, #16]
   15658:	ldr	ip, [r4, #296]	; 0x128
   1565c:	str	ip, [sp, #12]
   15660:	bl	13574 <__assert_fail@plt+0x2470>
   15664:	cmp	r9, r0
   15668:	bhi	156b8 <__assert_fail@plt+0x45b4>
   1566c:	add	r9, r0, #1
   15670:	cmp	r6, r4
   15674:	str	r9, [r5]
   15678:	beq	15684 <__assert_fail@plt+0x4580>
   1567c:	mov	r0, r6
   15680:	bl	12140 <__assert_fail@plt+0x103c>
   15684:	mov	r0, r9
   15688:	bl	175e8 <__assert_fail@plt+0x64e4>
   1568c:	ldr	r3, [r4, #256]	; 0x100
   15690:	mov	r2, sl
   15694:	mov	r1, r9
   15698:	mov	r6, r0
   1569c:	ldr	lr, [r4, #296]	; 0x128
   156a0:	ldr	ip, [r4, #300]	; 0x12c
   156a4:	str	r0, [r5, #4]
   156a8:	stm	sp, {r3, r7, fp, lr}
   156ac:	mvn	r3, #0
   156b0:	str	ip, [sp, #16]
   156b4:	bl	13574 <__assert_fail@plt+0x2470>
   156b8:	ldr	r3, [sp, #28]
   156bc:	mov	r0, r6
   156c0:	str	r3, [r8]
   156c4:	add	sp, sp, #44	; 0x2c
   156c8:	ldrd	r4, [sp]
   156cc:	ldrd	r6, [sp, #8]
   156d0:	ldrd	r8, [sp, #16]
   156d4:	ldrd	sl, [sp, #24]
   156d8:	add	sp, sp, #32
   156dc:	pop	{pc}		; (ldr pc, [sp], #4)
   156e0:	mov	r0, #8
   156e4:	mvn	r3, #-2147483648	; 0x80000000
   156e8:	add	r1, sp, #36	; 0x24
   156ec:	str	r0, [sp]
   156f0:	mov	r0, #0
   156f4:	bl	1788c <__assert_fail@plt+0x6788>
   156f8:	ldrd	r2, [r4, #8]
   156fc:	mov	r5, r0
   15700:	str	r0, [r4]
   15704:	strd	r2, [r0]
   15708:	b	155f0 <__assert_fail@plt+0x44ec>
   1570c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   15710:	movw	r4, #45328	; 0xb110
   15714:	movt	r4, #2
   15718:	strd	r6, [sp, #8]
   1571c:	strd	r8, [sp, #16]
   15720:	strd	sl, [sp, #24]
   15724:	mov	sl, r0
   15728:	mov	fp, r1
   1572c:	str	lr, [sp, #32]
   15730:	sub	sp, sp, #44	; 0x2c
   15734:	bl	10ff0 <__errno_location@plt>
   15738:	ldr	r3, [r0]
   1573c:	mov	r8, r0
   15740:	ldr	r2, [r4, #4]
   15744:	ldr	r5, [r4]
   15748:	str	r3, [sp, #28]
   1574c:	cmp	r2, #0
   15750:	bgt	157ac <__assert_fail@plt+0x46a8>
   15754:	add	r3, r4, #8
   15758:	str	r2, [sp, #36]	; 0x24
   1575c:	rsb	r2, r2, #1
   15760:	cmp	r5, r3
   15764:	beq	15888 <__assert_fail@plt+0x4784>
   15768:	mov	r1, #8
   1576c:	mov	r0, r5
   15770:	mvn	r3, #-2147483648	; 0x80000000
   15774:	str	r1, [sp]
   15778:	add	r1, sp, #36	; 0x24
   1577c:	bl	1788c <__assert_fail@plt+0x6788>
   15780:	mov	r5, r0
   15784:	str	r0, [r4]
   15788:	ldr	r0, [r4, #4]
   1578c:	mov	r1, #0
   15790:	ldr	r2, [sp, #36]	; 0x24
   15794:	sub	r2, r2, r0
   15798:	add	r0, r5, r0, lsl #3
   1579c:	lsl	r2, r2, #3
   157a0:	bl	11020 <memset@plt>
   157a4:	ldr	r3, [sp, #36]	; 0x24
   157a8:	str	r3, [r4, #4]
   157ac:	movw	r4, #45456	; 0xb190
   157b0:	movt	r4, #2
   157b4:	ldr	r9, [r5]
   157b8:	add	r0, r4, #264	; 0x108
   157bc:	mov	r3, fp
   157c0:	ldr	r7, [r4, #260]	; 0x104
   157c4:	mov	r2, sl
   157c8:	ldr	r6, [r5, #4]
   157cc:	str	r0, [sp, #8]
   157d0:	mov	r1, r9
   157d4:	ldr	ip, [r4, #256]	; 0x100
   157d8:	orr	r7, r7, #1
   157dc:	ldr	lr, [r4, #300]	; 0x12c
   157e0:	mov	r0, r6
   157e4:	str	ip, [sp]
   157e8:	str	r7, [sp, #4]
   157ec:	str	lr, [sp, #16]
   157f0:	ldr	ip, [r4, #296]	; 0x128
   157f4:	str	ip, [sp, #12]
   157f8:	bl	13574 <__assert_fail@plt+0x2470>
   157fc:	cmp	r9, r0
   15800:	bhi	15860 <__assert_fail@plt+0x475c>
   15804:	add	r9, r0, #1
   15808:	cmp	r6, r4
   1580c:	str	r9, [r5]
   15810:	beq	1581c <__assert_fail@plt+0x4718>
   15814:	mov	r0, r6
   15818:	bl	12140 <__assert_fail@plt+0x103c>
   1581c:	mov	r0, r9
   15820:	bl	175e8 <__assert_fail@plt+0x64e4>
   15824:	ldr	ip, [r4, #256]	; 0x100
   15828:	mov	r1, r9
   1582c:	mov	r3, fp
   15830:	mov	r2, sl
   15834:	mov	r6, r0
   15838:	ldr	r9, [r4, #296]	; 0x128
   1583c:	ldr	lr, [r4, #300]	; 0x12c
   15840:	str	r0, [r5, #4]
   15844:	str	ip, [sp]
   15848:	ldr	ip, [pc, #100]	; 158b4 <__assert_fail@plt+0x47b0>
   1584c:	str	r7, [sp, #4]
   15850:	str	ip, [sp, #8]
   15854:	str	r9, [sp, #12]
   15858:	str	lr, [sp, #16]
   1585c:	bl	13574 <__assert_fail@plt+0x2470>
   15860:	ldr	r3, [sp, #28]
   15864:	mov	r0, r6
   15868:	str	r3, [r8]
   1586c:	add	sp, sp, #44	; 0x2c
   15870:	ldrd	r4, [sp]
   15874:	ldrd	r6, [sp, #8]
   15878:	ldrd	r8, [sp, #16]
   1587c:	ldrd	sl, [sp, #24]
   15880:	add	sp, sp, #32
   15884:	pop	{pc}		; (ldr pc, [sp], #4)
   15888:	mov	r0, #8
   1588c:	mvn	r3, #-2147483648	; 0x80000000
   15890:	add	r1, sp, #36	; 0x24
   15894:	str	r0, [sp]
   15898:	mov	r0, #0
   1589c:	bl	1788c <__assert_fail@plt+0x6788>
   158a0:	ldrd	r2, [r4, #8]
   158a4:	mov	r5, r0
   158a8:	str	r0, [r4]
   158ac:	strd	r2, [r0]
   158b0:	b	15788 <__assert_fail@plt+0x4684>
   158b4:	muleq	r2, r8, r2
   158b8:	strd	r4, [sp, #-20]!	; 0xffffffec
   158bc:	mov	r4, #0
   158c0:	mov	r5, #0
   158c4:	strd	r6, [sp, #8]
   158c8:	cmp	r1, #10
   158cc:	str	lr, [sp, #16]
   158d0:	sub	sp, sp, #100	; 0x64
   158d4:	strd	r4, [sp, #48]	; 0x30
   158d8:	beq	15920 <__assert_fail@plt+0x481c>
   158dc:	mov	r3, sp
   158e0:	strd	r4, [sp, #8]
   158e4:	str	r1, [sp, #48]	; 0x30
   158e8:	mov	r1, r2
   158ec:	mvn	r2, #0
   158f0:	ldrd	r6, [sp, #48]	; 0x30
   158f4:	strd	r6, [sp]
   158f8:	strd	r4, [sp, #16]
   158fc:	strd	r4, [sp, #24]
   15900:	strd	r4, [sp, #32]
   15904:	strd	r4, [sp, #40]	; 0x28
   15908:	bl	14f60 <__assert_fail@plt+0x3e5c>
   1590c:	add	sp, sp, #100	; 0x64
   15910:	ldrd	r4, [sp]
   15914:	ldrd	r6, [sp, #8]
   15918:	add	sp, sp, #16
   1591c:	pop	{pc}		; (ldr pc, [sp], #4)
   15920:	bl	110ec <abort@plt>
   15924:	strd	r4, [sp, #-20]!	; 0xffffffec
   15928:	mov	r4, #0
   1592c:	mov	r5, #0
   15930:	strd	r6, [sp, #8]
   15934:	cmp	r1, #10
   15938:	str	lr, [sp, #16]
   1593c:	sub	sp, sp, #100	; 0x64
   15940:	strd	r4, [sp, #48]	; 0x30
   15944:	beq	15990 <__assert_fail@plt+0x488c>
   15948:	mov	ip, r2
   1594c:	mov	r2, r3
   15950:	strd	r4, [sp, #8]
   15954:	str	r1, [sp, #48]	; 0x30
   15958:	mov	r3, sp
   1595c:	mov	r1, ip
   15960:	ldrd	r6, [sp, #48]	; 0x30
   15964:	strd	r6, [sp]
   15968:	strd	r4, [sp, #16]
   1596c:	strd	r4, [sp, #24]
   15970:	strd	r4, [sp, #32]
   15974:	strd	r4, [sp, #40]	; 0x28
   15978:	bl	14f60 <__assert_fail@plt+0x3e5c>
   1597c:	add	sp, sp, #100	; 0x64
   15980:	ldrd	r4, [sp]
   15984:	ldrd	r6, [sp, #8]
   15988:	add	sp, sp, #16
   1598c:	pop	{pc}		; (ldr pc, [sp], #4)
   15990:	bl	110ec <abort@plt>
   15994:	mov	r2, #0
   15998:	mov	r3, #0
   1599c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   159a0:	strd	r6, [sp, #8]
   159a4:	cmp	r0, #10
   159a8:	strd	r8, [sp, #16]
   159ac:	strd	sl, [sp, #24]
   159b0:	str	lr, [sp, #32]
   159b4:	sub	sp, sp, #124	; 0x7c
   159b8:	strd	r2, [sp, #72]	; 0x48
   159bc:	strd	r2, [sp, #80]	; 0x50
   159c0:	strd	r2, [sp, #88]	; 0x58
   159c4:	strd	r2, [sp, #96]	; 0x60
   159c8:	strd	r2, [sp, #104]	; 0x68
   159cc:	strd	r2, [sp, #112]	; 0x70
   159d0:	beq	15b74 <__assert_fail@plt+0x4a70>
   159d4:	mov	r6, r1
   159d8:	movw	r4, #45328	; 0xb110
   159dc:	movt	r4, #2
   159e0:	str	r0, [sp, #72]	; 0x48
   159e4:	ldrd	r0, [sp, #72]	; 0x48
   159e8:	strd	r0, [sp, #24]
   159ec:	strd	r2, [sp, #32]
   159f0:	strd	r2, [sp, #40]	; 0x28
   159f4:	strd	r2, [sp, #48]	; 0x30
   159f8:	strd	r2, [sp, #56]	; 0x38
   159fc:	strd	r2, [sp, #64]	; 0x40
   15a00:	bl	10ff0 <__errno_location@plt>
   15a04:	mov	r8, r0
   15a08:	ldr	r5, [r4]
   15a0c:	ldr	r2, [r4, #4]
   15a10:	ldr	r9, [r0]
   15a14:	cmp	r2, #0
   15a18:	bgt	15a74 <__assert_fail@plt+0x4970>
   15a1c:	add	r3, r4, #8
   15a20:	str	r2, [sp, #72]	; 0x48
   15a24:	rsb	r2, r2, #1
   15a28:	cmp	r5, r3
   15a2c:	beq	15b48 <__assert_fail@plt+0x4a44>
   15a30:	mov	r3, #8
   15a34:	mov	r0, r5
   15a38:	add	r1, sp, #72	; 0x48
   15a3c:	str	r3, [sp]
   15a40:	mvn	r3, #-2147483648	; 0x80000000
   15a44:	bl	1788c <__assert_fail@plt+0x6788>
   15a48:	mov	r5, r0
   15a4c:	str	r0, [r4]
   15a50:	ldr	r0, [r4, #4]
   15a54:	mov	r1, #0
   15a58:	ldr	r2, [sp, #72]	; 0x48
   15a5c:	sub	r2, r2, r0
   15a60:	add	r0, r5, r0, lsl #3
   15a64:	lsl	r2, r2, #3
   15a68:	bl	11020 <memset@plt>
   15a6c:	ldr	r3, [sp, #72]	; 0x48
   15a70:	str	r3, [r4, #4]
   15a74:	ldr	sl, [r5]
   15a78:	add	r0, sp, #32
   15a7c:	mvn	r3, #0
   15a80:	mov	r2, r6
   15a84:	ldr	r7, [sp, #28]
   15a88:	ldr	r4, [r5, #4]
   15a8c:	mov	r1, sl
   15a90:	str	r0, [sp, #8]
   15a94:	ldr	lr, [sp, #24]
   15a98:	orr	r7, r7, #1
   15a9c:	ldr	ip, [sp, #64]	; 0x40
   15aa0:	mov	r0, r4
   15aa4:	ldr	fp, [sp, #68]	; 0x44
   15aa8:	str	lr, [sp]
   15aac:	str	r7, [sp, #4]
   15ab0:	str	ip, [sp, #12]
   15ab4:	str	fp, [sp, #16]
   15ab8:	bl	13574 <__assert_fail@plt+0x2470>
   15abc:	cmp	sl, r0
   15ac0:	bhi	15b24 <__assert_fail@plt+0x4a20>
   15ac4:	add	sl, r0, #1
   15ac8:	movw	r3, #45456	; 0xb190
   15acc:	movt	r3, #2
   15ad0:	cmp	r4, r3
   15ad4:	str	sl, [r5]
   15ad8:	beq	15ae4 <__assert_fail@plt+0x49e0>
   15adc:	mov	r0, r4
   15ae0:	bl	12140 <__assert_fail@plt+0x103c>
   15ae4:	mov	r0, sl
   15ae8:	bl	175e8 <__assert_fail@plt+0x64e4>
   15aec:	ldr	r3, [sp, #24]
   15af0:	mov	r2, r6
   15af4:	mov	r1, sl
   15af8:	mov	r4, r0
   15afc:	ldr	lr, [sp, #64]	; 0x40
   15b00:	ldr	ip, [sp, #68]	; 0x44
   15b04:	str	r0, [r5, #4]
   15b08:	add	r5, sp, #32
   15b0c:	stm	sp, {r3, r7}
   15b10:	mvn	r3, #0
   15b14:	str	r5, [sp, #8]
   15b18:	str	lr, [sp, #12]
   15b1c:	str	ip, [sp, #16]
   15b20:	bl	13574 <__assert_fail@plt+0x2470>
   15b24:	mov	r0, r4
   15b28:	str	r9, [r8]
   15b2c:	add	sp, sp, #124	; 0x7c
   15b30:	ldrd	r4, [sp]
   15b34:	ldrd	r6, [sp, #8]
   15b38:	ldrd	r8, [sp, #16]
   15b3c:	ldrd	sl, [sp, #24]
   15b40:	add	sp, sp, #32
   15b44:	pop	{pc}		; (ldr pc, [sp], #4)
   15b48:	mov	r0, #8
   15b4c:	mvn	r3, #-2147483648	; 0x80000000
   15b50:	add	r1, sp, #72	; 0x48
   15b54:	str	r0, [sp]
   15b58:	mov	r0, #0
   15b5c:	bl	1788c <__assert_fail@plt+0x6788>
   15b60:	ldrd	r2, [r4, #8]
   15b64:	mov	r5, r0
   15b68:	str	r0, [r4]
   15b6c:	strd	r2, [r0]
   15b70:	b	15a50 <__assert_fail@plt+0x494c>
   15b74:	bl	110ec <abort@plt>
   15b78:	strd	r4, [sp, #-36]!	; 0xffffffdc
   15b7c:	cmp	r0, #10
   15b80:	strd	r6, [sp, #8]
   15b84:	mov	r6, #0
   15b88:	mov	r7, #0
   15b8c:	strd	r8, [sp, #16]
   15b90:	strd	sl, [sp, #24]
   15b94:	str	lr, [sp, #32]
   15b98:	sub	sp, sp, #124	; 0x7c
   15b9c:	strd	r6, [sp, #72]	; 0x48
   15ba0:	strd	r6, [sp, #80]	; 0x50
   15ba4:	strd	r6, [sp, #88]	; 0x58
   15ba8:	strd	r6, [sp, #96]	; 0x60
   15bac:	strd	r6, [sp, #104]	; 0x68
   15bb0:	strd	r6, [sp, #112]	; 0x70
   15bb4:	beq	15d60 <__assert_fail@plt+0x4c5c>
   15bb8:	mov	sl, r2
   15bbc:	movw	r5, #45328	; 0xb110
   15bc0:	movt	r5, #2
   15bc4:	str	r0, [sp, #72]	; 0x48
   15bc8:	mov	r9, r1
   15bcc:	ldrd	r2, [sp, #72]	; 0x48
   15bd0:	strd	r2, [sp, #24]
   15bd4:	strd	r6, [sp, #32]
   15bd8:	strd	r6, [sp, #40]	; 0x28
   15bdc:	strd	r6, [sp, #48]	; 0x30
   15be0:	strd	r6, [sp, #56]	; 0x38
   15be4:	strd	r6, [sp, #64]	; 0x40
   15be8:	bl	10ff0 <__errno_location@plt>
   15bec:	mov	r7, r0
   15bf0:	ldr	r4, [r5]
   15bf4:	ldr	r2, [r5, #4]
   15bf8:	ldr	fp, [r0]
   15bfc:	cmp	r2, #0
   15c00:	bgt	15c5c <__assert_fail@plt+0x4b58>
   15c04:	add	r3, r5, #8
   15c08:	str	r2, [sp, #72]	; 0x48
   15c0c:	rsb	r2, r2, #1
   15c10:	cmp	r4, r3
   15c14:	beq	15d34 <__assert_fail@plt+0x4c30>
   15c18:	mov	r3, #8
   15c1c:	mov	r0, r4
   15c20:	add	r1, sp, #72	; 0x48
   15c24:	str	r3, [sp]
   15c28:	mvn	r3, #-2147483648	; 0x80000000
   15c2c:	bl	1788c <__assert_fail@plt+0x6788>
   15c30:	mov	r4, r0
   15c34:	str	r0, [r5]
   15c38:	ldr	r0, [r5, #4]
   15c3c:	mov	r1, #0
   15c40:	ldr	r2, [sp, #72]	; 0x48
   15c44:	sub	r2, r2, r0
   15c48:	add	r0, r4, r0, lsl #3
   15c4c:	lsl	r2, r2, #3
   15c50:	bl	11020 <memset@plt>
   15c54:	ldr	r3, [sp, #72]	; 0x48
   15c58:	str	r3, [r5, #4]
   15c5c:	ldr	ip, [sp, #24]
   15c60:	add	r0, sp, #32
   15c64:	mov	r3, sl
   15c68:	mov	r2, r9
   15c6c:	ldr	r6, [sp, #28]
   15c70:	ldr	r8, [r4]
   15c74:	ldr	r5, [r4, #4]
   15c78:	str	ip, [sp]
   15c7c:	orr	r6, r6, #1
   15c80:	ldr	ip, [sp, #64]	; 0x40
   15c84:	mov	r1, r8
   15c88:	str	r6, [sp, #4]
   15c8c:	ldr	lr, [sp, #68]	; 0x44
   15c90:	str	r0, [sp, #8]
   15c94:	mov	r0, r5
   15c98:	str	ip, [sp, #12]
   15c9c:	str	lr, [sp, #16]
   15ca0:	bl	13574 <__assert_fail@plt+0x2470>
   15ca4:	cmp	r8, r0
   15ca8:	bhi	15d10 <__assert_fail@plt+0x4c0c>
   15cac:	add	r8, r0, #1
   15cb0:	movw	r3, #45456	; 0xb190
   15cb4:	movt	r3, #2
   15cb8:	cmp	r5, r3
   15cbc:	str	r8, [r4]
   15cc0:	beq	15ccc <__assert_fail@plt+0x4bc8>
   15cc4:	mov	r0, r5
   15cc8:	bl	12140 <__assert_fail@plt+0x103c>
   15ccc:	mov	r0, r8
   15cd0:	bl	175e8 <__assert_fail@plt+0x64e4>
   15cd4:	ldr	lr, [sp, #24]
   15cd8:	mov	r1, r8
   15cdc:	mov	r3, sl
   15ce0:	mov	r2, r9
   15ce4:	mov	r5, r0
   15ce8:	ldr	r8, [sp, #64]	; 0x40
   15cec:	ldr	ip, [sp, #68]	; 0x44
   15cf0:	str	r0, [r4, #4]
   15cf4:	str	lr, [sp]
   15cf8:	add	lr, sp, #32
   15cfc:	str	r6, [sp, #4]
   15d00:	str	lr, [sp, #8]
   15d04:	str	r8, [sp, #12]
   15d08:	str	ip, [sp, #16]
   15d0c:	bl	13574 <__assert_fail@plt+0x2470>
   15d10:	mov	r0, r5
   15d14:	str	fp, [r7]
   15d18:	add	sp, sp, #124	; 0x7c
   15d1c:	ldrd	r4, [sp]
   15d20:	ldrd	r6, [sp, #8]
   15d24:	ldrd	r8, [sp, #16]
   15d28:	ldrd	sl, [sp, #24]
   15d2c:	add	sp, sp, #32
   15d30:	pop	{pc}		; (ldr pc, [sp], #4)
   15d34:	mov	r0, #8
   15d38:	mvn	r3, #-2147483648	; 0x80000000
   15d3c:	add	r1, sp, #72	; 0x48
   15d40:	str	r0, [sp]
   15d44:	mov	r0, #0
   15d48:	bl	1788c <__assert_fail@plt+0x6788>
   15d4c:	ldrd	r2, [r5, #8]
   15d50:	mov	r4, r0
   15d54:	str	r0, [r5]
   15d58:	strd	r2, [r0]
   15d5c:	b	15c38 <__assert_fail@plt+0x4b34>
   15d60:	bl	110ec <abort@plt>
   15d64:	ldr	r3, [pc, #492]	; 15f58 <__assert_fail@plt+0x4e54>
   15d68:	lsr	ip, r2, #5
   15d6c:	and	r2, r2, #31
   15d70:	strd	r4, [sp, #-36]!	; 0xffffffdc
   15d74:	movw	r5, #45328	; 0xb110
   15d78:	movt	r5, #2
   15d7c:	strd	r6, [sp, #8]
   15d80:	strd	r8, [sp, #16]
   15d84:	strd	sl, [sp, #24]
   15d88:	mov	sl, r0
   15d8c:	mov	fp, r1
   15d90:	ldrd	r0, [r3]
   15d94:	str	lr, [sp, #32]
   15d98:	sub	sp, sp, #92	; 0x5c
   15d9c:	ldrd	r8, [r3, #8]
   15da0:	add	r6, sp, #48	; 0x30
   15da4:	strd	r0, [sp, #40]	; 0x28
   15da8:	ldrd	r0, [r3, #16]
   15dac:	strd	r8, [sp, #48]	; 0x30
   15db0:	ldrd	r8, [r3, #24]
   15db4:	strd	r0, [sp, #56]	; 0x38
   15db8:	ldrd	r0, [r3, #32]
   15dbc:	strd	r8, [sp, #64]	; 0x40
   15dc0:	ldrd	r8, [r3, #40]	; 0x28
   15dc4:	strd	r0, [sp, #72]	; 0x48
   15dc8:	strd	r8, [sp, #80]	; 0x50
   15dcc:	ldr	r3, [r6, ip, lsl #2]
   15dd0:	mvn	r1, r3, lsr r2
   15dd4:	and	r1, r1, #1
   15dd8:	eor	r2, r3, r1, lsl r2
   15ddc:	str	r2, [r6, ip, lsl #2]
   15de0:	bl	10ff0 <__errno_location@plt>
   15de4:	ldr	r3, [r0]
   15de8:	mov	r8, r0
   15dec:	ldr	r2, [r5, #4]
   15df0:	ldr	r4, [r5]
   15df4:	str	r3, [sp, #28]
   15df8:	cmp	r2, #0
   15dfc:	bgt	15e58 <__assert_fail@plt+0x4d54>
   15e00:	add	r3, r5, #8
   15e04:	str	r2, [sp, #36]	; 0x24
   15e08:	rsb	r2, r2, #1
   15e0c:	cmp	r4, r3
   15e10:	beq	15f2c <__assert_fail@plt+0x4e28>
   15e14:	mov	r1, #8
   15e18:	mov	r0, r4
   15e1c:	mvn	r3, #-2147483648	; 0x80000000
   15e20:	str	r1, [sp]
   15e24:	add	r1, sp, #36	; 0x24
   15e28:	bl	1788c <__assert_fail@plt+0x6788>
   15e2c:	mov	r4, r0
   15e30:	str	r0, [r5]
   15e34:	ldr	r0, [r5, #4]
   15e38:	mov	r1, #0
   15e3c:	ldr	r2, [sp, #36]	; 0x24
   15e40:	sub	r2, r2, r0
   15e44:	add	r0, r4, r0, lsl #3
   15e48:	lsl	r2, r2, #3
   15e4c:	bl	11020 <memset@plt>
   15e50:	ldr	r3, [sp, #36]	; 0x24
   15e54:	str	r3, [r5, #4]
   15e58:	ldr	ip, [sp, #40]	; 0x28
   15e5c:	mov	r3, fp
   15e60:	mov	r2, sl
   15e64:	ldr	r7, [sp, #44]	; 0x2c
   15e68:	ldr	r9, [r4]
   15e6c:	ldr	r5, [r4, #4]
   15e70:	str	ip, [sp]
   15e74:	orr	r7, r7, #1
   15e78:	ldr	ip, [sp, #80]	; 0x50
   15e7c:	mov	r1, r9
   15e80:	str	r7, [sp, #4]
   15e84:	ldr	lr, [sp, #84]	; 0x54
   15e88:	mov	r0, r5
   15e8c:	str	r6, [sp, #8]
   15e90:	str	ip, [sp, #12]
   15e94:	str	lr, [sp, #16]
   15e98:	bl	13574 <__assert_fail@plt+0x2470>
   15e9c:	cmp	r9, r0
   15ea0:	bhi	15f04 <__assert_fail@plt+0x4e00>
   15ea4:	add	r9, r0, #1
   15ea8:	movw	r3, #45456	; 0xb190
   15eac:	movt	r3, #2
   15eb0:	cmp	r5, r3
   15eb4:	str	r9, [r4]
   15eb8:	beq	15ec4 <__assert_fail@plt+0x4dc0>
   15ebc:	mov	r0, r5
   15ec0:	bl	12140 <__assert_fail@plt+0x103c>
   15ec4:	mov	r0, r9
   15ec8:	bl	175e8 <__assert_fail@plt+0x64e4>
   15ecc:	mov	r1, r9
   15ed0:	ldr	ip, [sp, #40]	; 0x28
   15ed4:	mov	r3, fp
   15ed8:	mov	r2, sl
   15edc:	mov	r5, r0
   15ee0:	ldr	r9, [sp, #80]	; 0x50
   15ee4:	ldr	lr, [sp, #84]	; 0x54
   15ee8:	str	r0, [r4, #4]
   15eec:	str	ip, [sp]
   15ef0:	str	r7, [sp, #4]
   15ef4:	str	r6, [sp, #8]
   15ef8:	str	r9, [sp, #12]
   15efc:	str	lr, [sp, #16]
   15f00:	bl	13574 <__assert_fail@plt+0x2470>
   15f04:	ldr	r3, [sp, #28]
   15f08:	mov	r0, r5
   15f0c:	str	r3, [r8]
   15f10:	add	sp, sp, #92	; 0x5c
   15f14:	ldrd	r4, [sp]
   15f18:	ldrd	r6, [sp, #8]
   15f1c:	ldrd	r8, [sp, #16]
   15f20:	ldrd	sl, [sp, #24]
   15f24:	add	sp, sp, #32
   15f28:	pop	{pc}		; (ldr pc, [sp], #4)
   15f2c:	mov	r0, #8
   15f30:	mvn	r3, #-2147483648	; 0x80000000
   15f34:	add	r1, sp, #36	; 0x24
   15f38:	str	r0, [sp]
   15f3c:	mov	r0, #0
   15f40:	bl	1788c <__assert_fail@plt+0x6788>
   15f44:	ldrd	r2, [r5, #8]
   15f48:	mov	r4, r0
   15f4c:	str	r0, [r5]
   15f50:	strd	r2, [r0]
   15f54:	b	15e34 <__assert_fail@plt+0x4d30>
   15f58:	muleq	r2, r0, r2
   15f5c:	ldr	ip, [pc, #476]	; 16140 <__assert_fail@plt+0x503c>
   15f60:	strd	r4, [sp, #-36]!	; 0xffffffdc
   15f64:	movw	r4, #45328	; 0xb110
   15f68:	movt	r4, #2
   15f6c:	ldrd	r2, [ip, #8]
   15f70:	strd	r6, [sp, #8]
   15f74:	lsr	r7, r1, #5
   15f78:	mov	r6, r0
   15f7c:	strd	r8, [sp, #16]
   15f80:	str	lr, [sp, #32]
   15f84:	and	lr, r1, #31
   15f88:	ldrd	r0, [ip]
   15f8c:	strd	sl, [sp, #24]
   15f90:	sub	sp, sp, #84	; 0x54
   15f94:	add	r5, sp, #40	; 0x28
   15f98:	strd	r0, [sp, #32]
   15f9c:	strd	r2, [sp, #40]	; 0x28
   15fa0:	ldrd	r0, [ip, #16]
   15fa4:	ldrd	r2, [ip, #24]
   15fa8:	strd	r0, [sp, #48]	; 0x30
   15fac:	ldrd	r0, [ip, #32]
   15fb0:	strd	r2, [sp, #56]	; 0x38
   15fb4:	ldrd	r2, [ip, #40]	; 0x28
   15fb8:	strd	r0, [sp, #64]	; 0x40
   15fbc:	strd	r2, [sp, #72]	; 0x48
   15fc0:	ldr	r1, [r5, r7, lsl #2]
   15fc4:	mvn	r3, r1, lsr lr
   15fc8:	and	r3, r3, #1
   15fcc:	eor	r1, r1, r3, lsl lr
   15fd0:	str	r1, [r5, r7, lsl #2]
   15fd4:	bl	10ff0 <__errno_location@plt>
   15fd8:	mov	r9, r0
   15fdc:	ldr	sl, [r0]
   15fe0:	ldr	r2, [r4, #4]
   15fe4:	ldr	r7, [r4]
   15fe8:	cmp	r2, #0
   15fec:	bgt	16048 <__assert_fail@plt+0x4f44>
   15ff0:	add	r3, r4, #8
   15ff4:	str	r2, [sp, #28]
   15ff8:	rsb	r2, r2, #1
   15ffc:	cmp	r7, r3
   16000:	beq	16114 <__assert_fail@plt+0x5010>
   16004:	mov	r1, #8
   16008:	mov	r0, r7
   1600c:	mvn	r3, #-2147483648	; 0x80000000
   16010:	str	r1, [sp]
   16014:	add	r1, sp, #28
   16018:	bl	1788c <__assert_fail@plt+0x6788>
   1601c:	mov	r7, r0
   16020:	str	r0, [r4]
   16024:	ldr	r0, [r4, #4]
   16028:	mov	r1, #0
   1602c:	ldr	r2, [sp, #28]
   16030:	sub	r2, r2, r0
   16034:	add	r0, r7, r0, lsl #3
   16038:	lsl	r2, r2, #3
   1603c:	bl	11020 <memset@plt>
   16040:	ldr	r3, [sp, #28]
   16044:	str	r3, [r4, #4]
   16048:	ldr	ip, [sp, #32]
   1604c:	mvn	r3, #0
   16050:	mov	r2, r6
   16054:	ldr	r8, [sp, #36]	; 0x24
   16058:	ldr	fp, [r7]
   1605c:	ldr	r4, [r7, #4]
   16060:	str	ip, [sp]
   16064:	orr	r8, r8, #1
   16068:	ldr	ip, [sp, #72]	; 0x48
   1606c:	mov	r1, fp
   16070:	str	r8, [sp, #4]
   16074:	ldr	lr, [sp, #76]	; 0x4c
   16078:	mov	r0, r4
   1607c:	str	r5, [sp, #8]
   16080:	str	ip, [sp, #12]
   16084:	str	lr, [sp, #16]
   16088:	bl	13574 <__assert_fail@plt+0x2470>
   1608c:	cmp	fp, r0
   16090:	bhi	160f0 <__assert_fail@plt+0x4fec>
   16094:	add	fp, r0, #1
   16098:	movw	r3, #45456	; 0xb190
   1609c:	movt	r3, #2
   160a0:	cmp	r4, r3
   160a4:	str	fp, [r7]
   160a8:	beq	160b4 <__assert_fail@plt+0x4fb0>
   160ac:	mov	r0, r4
   160b0:	bl	12140 <__assert_fail@plt+0x103c>
   160b4:	mov	r0, fp
   160b8:	bl	175e8 <__assert_fail@plt+0x64e4>
   160bc:	ldr	r3, [sp, #32]
   160c0:	mov	r2, r6
   160c4:	mov	r1, fp
   160c8:	mov	r4, r0
   160cc:	ldr	lr, [sp, #72]	; 0x48
   160d0:	ldr	ip, [sp, #76]	; 0x4c
   160d4:	str	r0, [r7, #4]
   160d8:	stm	sp, {r3, r8}
   160dc:	mvn	r3, #0
   160e0:	str	r5, [sp, #8]
   160e4:	str	lr, [sp, #12]
   160e8:	str	ip, [sp, #16]
   160ec:	bl	13574 <__assert_fail@plt+0x2470>
   160f0:	mov	r0, r4
   160f4:	str	sl, [r9]
   160f8:	add	sp, sp, #84	; 0x54
   160fc:	ldrd	r4, [sp]
   16100:	ldrd	r6, [sp, #8]
   16104:	ldrd	r8, [sp, #16]
   16108:	ldrd	sl, [sp, #24]
   1610c:	add	sp, sp, #32
   16110:	pop	{pc}		; (ldr pc, [sp], #4)
   16114:	mov	r0, #8
   16118:	mvn	r3, #-2147483648	; 0x80000000
   1611c:	add	r1, sp, #28
   16120:	str	r0, [sp]
   16124:	mov	r0, #0
   16128:	bl	1788c <__assert_fail@plt+0x6788>
   1612c:	ldrd	r2, [r4, #8]
   16130:	mov	r7, r0
   16134:	str	r0, [r4]
   16138:	strd	r2, [r0]
   1613c:	b	16024 <__assert_fail@plt+0x4f20>
   16140:	muleq	r2, r0, r2
   16144:	ldr	ip, [pc, #472]	; 16324 <__assert_fail@plt+0x5220>
   16148:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1614c:	mov	r5, r0
   16150:	movw	r4, #45328	; 0xb110
   16154:	movt	r4, #2
   16158:	ldrd	r2, [ip]
   1615c:	ldrd	r0, [ip, #8]
   16160:	strd	r6, [sp, #8]
   16164:	strd	r8, [sp, #16]
   16168:	strd	sl, [sp, #24]
   1616c:	str	lr, [sp, #32]
   16170:	sub	sp, sp, #84	; 0x54
   16174:	strd	r2, [sp, #32]
   16178:	strd	r0, [sp, #40]	; 0x28
   1617c:	ldr	r6, [sp, #44]	; 0x2c
   16180:	ldrd	r2, [ip, #16]
   16184:	ldrd	r0, [ip, #24]
   16188:	mvn	lr, r6
   1618c:	and	lr, lr, #67108864	; 0x4000000
   16190:	eor	lr, lr, r6
   16194:	ldrd	r6, [ip, #40]	; 0x28
   16198:	strd	r2, [sp, #48]	; 0x30
   1619c:	ldrd	r2, [ip, #32]
   161a0:	str	lr, [sp, #44]	; 0x2c
   161a4:	strd	r0, [sp, #56]	; 0x38
   161a8:	strd	r2, [sp, #64]	; 0x40
   161ac:	strd	r6, [sp, #72]	; 0x48
   161b0:	bl	10ff0 <__errno_location@plt>
   161b4:	mov	r8, r0
   161b8:	ldr	r9, [r0]
   161bc:	ldr	r2, [r4, #4]
   161c0:	ldr	r6, [r4]
   161c4:	cmp	r2, #0
   161c8:	bgt	16224 <__assert_fail@plt+0x5120>
   161cc:	add	r3, r4, #8
   161d0:	str	r2, [sp, #28]
   161d4:	rsb	r2, r2, #1
   161d8:	cmp	r6, r3
   161dc:	beq	162f8 <__assert_fail@plt+0x51f4>
   161e0:	mov	r1, #8
   161e4:	mov	r0, r6
   161e8:	mvn	r3, #-2147483648	; 0x80000000
   161ec:	str	r1, [sp]
   161f0:	add	r1, sp, #28
   161f4:	bl	1788c <__assert_fail@plt+0x6788>
   161f8:	mov	r6, r0
   161fc:	str	r0, [r4]
   16200:	ldr	r0, [r4, #4]
   16204:	mov	r1, #0
   16208:	ldr	r2, [sp, #28]
   1620c:	sub	r2, r2, r0
   16210:	add	r0, r6, r0, lsl #3
   16214:	lsl	r2, r2, #3
   16218:	bl	11020 <memset@plt>
   1621c:	ldr	r3, [sp, #28]
   16220:	str	r3, [r4, #4]
   16224:	ldr	sl, [r6]
   16228:	add	r0, sp, #40	; 0x28
   1622c:	mvn	r3, #0
   16230:	mov	r2, r5
   16234:	ldr	r7, [sp, #36]	; 0x24
   16238:	ldr	r4, [r6, #4]
   1623c:	mov	r1, sl
   16240:	str	r0, [sp, #8]
   16244:	ldr	lr, [sp, #32]
   16248:	orr	r7, r7, #1
   1624c:	ldr	ip, [sp, #72]	; 0x48
   16250:	mov	r0, r4
   16254:	ldr	fp, [sp, #76]	; 0x4c
   16258:	str	lr, [sp]
   1625c:	str	r7, [sp, #4]
   16260:	str	ip, [sp, #12]
   16264:	str	fp, [sp, #16]
   16268:	bl	13574 <__assert_fail@plt+0x2470>
   1626c:	cmp	sl, r0
   16270:	bhi	162d4 <__assert_fail@plt+0x51d0>
   16274:	add	sl, r0, #1
   16278:	movw	r3, #45456	; 0xb190
   1627c:	movt	r3, #2
   16280:	cmp	r4, r3
   16284:	str	sl, [r6]
   16288:	beq	16294 <__assert_fail@plt+0x5190>
   1628c:	mov	r0, r4
   16290:	bl	12140 <__assert_fail@plt+0x103c>
   16294:	mov	r0, sl
   16298:	bl	175e8 <__assert_fail@plt+0x64e4>
   1629c:	ldr	r3, [sp, #32]
   162a0:	mov	r2, r5
   162a4:	add	r5, sp, #40	; 0x28
   162a8:	mov	r1, sl
   162ac:	mov	r4, r0
   162b0:	ldr	lr, [sp, #72]	; 0x48
   162b4:	ldr	ip, [sp, #76]	; 0x4c
   162b8:	str	r0, [r6, #4]
   162bc:	stm	sp, {r3, r7}
   162c0:	mvn	r3, #0
   162c4:	str	r5, [sp, #8]
   162c8:	str	lr, [sp, #12]
   162cc:	str	ip, [sp, #16]
   162d0:	bl	13574 <__assert_fail@plt+0x2470>
   162d4:	mov	r0, r4
   162d8:	str	r9, [r8]
   162dc:	add	sp, sp, #84	; 0x54
   162e0:	ldrd	r4, [sp]
   162e4:	ldrd	r6, [sp, #8]
   162e8:	ldrd	r8, [sp, #16]
   162ec:	ldrd	sl, [sp, #24]
   162f0:	add	sp, sp, #32
   162f4:	pop	{pc}		; (ldr pc, [sp], #4)
   162f8:	mov	r0, #8
   162fc:	mvn	r3, #-2147483648	; 0x80000000
   16300:	add	r1, sp, #28
   16304:	str	r0, [sp]
   16308:	mov	r0, #0
   1630c:	bl	1788c <__assert_fail@plt+0x6788>
   16310:	ldrd	r2, [r4, #8]
   16314:	mov	r6, r0
   16318:	str	r0, [r4]
   1631c:	strd	r2, [r0]
   16320:	b	16200 <__assert_fail@plt+0x50fc>
   16324:	muleq	r2, r0, r2
   16328:	ldr	ip, [pc, #480]	; 16510 <__assert_fail@plt+0x540c>
   1632c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   16330:	mov	r5, r0
   16334:	movw	r4, #45328	; 0xb110
   16338:	movt	r4, #2
   1633c:	ldrd	r2, [ip]
   16340:	strd	r6, [sp, #8]
   16344:	mov	r6, r1
   16348:	ldrd	r0, [ip, #8]
   1634c:	strd	r8, [sp, #16]
   16350:	strd	sl, [sp, #24]
   16354:	str	lr, [sp, #32]
   16358:	sub	sp, sp, #84	; 0x54
   1635c:	ldrd	r8, [ip, #40]	; 0x28
   16360:	strd	r2, [sp, #32]
   16364:	strd	r0, [sp, #40]	; 0x28
   16368:	ldrd	r2, [ip, #16]
   1636c:	ldr	r7, [sp, #44]	; 0x2c
   16370:	ldrd	r0, [ip, #24]
   16374:	strd	r2, [sp, #48]	; 0x30
   16378:	ldrd	r2, [ip, #32]
   1637c:	mvn	lr, r7
   16380:	and	lr, lr, #67108864	; 0x4000000
   16384:	eor	lr, lr, r7
   16388:	str	lr, [sp, #44]	; 0x2c
   1638c:	strd	r0, [sp, #56]	; 0x38
   16390:	strd	r2, [sp, #64]	; 0x40
   16394:	strd	r8, [sp, #72]	; 0x48
   16398:	bl	10ff0 <__errno_location@plt>
   1639c:	mov	r9, r0
   163a0:	ldr	sl, [r0]
   163a4:	ldr	r2, [r4, #4]
   163a8:	ldr	r7, [r4]
   163ac:	cmp	r2, #0
   163b0:	bgt	1640c <__assert_fail@plt+0x5308>
   163b4:	add	r3, r4, #8
   163b8:	str	r2, [sp, #28]
   163bc:	rsb	r2, r2, #1
   163c0:	cmp	r7, r3
   163c4:	beq	164e4 <__assert_fail@plt+0x53e0>
   163c8:	mov	r1, #8
   163cc:	mov	r0, r7
   163d0:	mvn	r3, #-2147483648	; 0x80000000
   163d4:	str	r1, [sp]
   163d8:	add	r1, sp, #28
   163dc:	bl	1788c <__assert_fail@plt+0x6788>
   163e0:	mov	r7, r0
   163e4:	str	r0, [r4]
   163e8:	ldr	r0, [r4, #4]
   163ec:	mov	r1, #0
   163f0:	ldr	r2, [sp, #28]
   163f4:	sub	r2, r2, r0
   163f8:	add	r0, r7, r0, lsl #3
   163fc:	lsl	r2, r2, #3
   16400:	bl	11020 <memset@plt>
   16404:	ldr	r3, [sp, #28]
   16408:	str	r3, [r4, #4]
   1640c:	ldr	ip, [sp, #32]
   16410:	add	r0, sp, #40	; 0x28
   16414:	mov	r3, r6
   16418:	mov	r2, r5
   1641c:	ldr	r8, [sp, #36]	; 0x24
   16420:	ldr	fp, [r7]
   16424:	ldr	r4, [r7, #4]
   16428:	str	ip, [sp]
   1642c:	orr	r8, r8, #1
   16430:	ldr	ip, [sp, #72]	; 0x48
   16434:	mov	r1, fp
   16438:	str	r8, [sp, #4]
   1643c:	ldr	lr, [sp, #76]	; 0x4c
   16440:	str	r0, [sp, #8]
   16444:	mov	r0, r4
   16448:	str	ip, [sp, #12]
   1644c:	str	lr, [sp, #16]
   16450:	bl	13574 <__assert_fail@plt+0x2470>
   16454:	cmp	fp, r0
   16458:	bhi	164c0 <__assert_fail@plt+0x53bc>
   1645c:	add	fp, r0, #1
   16460:	movw	r3, #45456	; 0xb190
   16464:	movt	r3, #2
   16468:	cmp	r4, r3
   1646c:	str	fp, [r7]
   16470:	beq	1647c <__assert_fail@plt+0x5378>
   16474:	mov	r0, r4
   16478:	bl	12140 <__assert_fail@plt+0x103c>
   1647c:	mov	r0, fp
   16480:	bl	175e8 <__assert_fail@plt+0x64e4>
   16484:	ldr	lr, [sp, #32]
   16488:	mov	r2, r5
   1648c:	mov	r3, r6
   16490:	mov	r1, fp
   16494:	mov	r4, r0
   16498:	ldr	r5, [sp, #72]	; 0x48
   1649c:	ldr	ip, [sp, #76]	; 0x4c
   164a0:	str	r0, [r7, #4]
   164a4:	str	lr, [sp]
   164a8:	add	lr, sp, #40	; 0x28
   164ac:	str	r8, [sp, #4]
   164b0:	str	lr, [sp, #8]
   164b4:	str	r5, [sp, #12]
   164b8:	str	ip, [sp, #16]
   164bc:	bl	13574 <__assert_fail@plt+0x2470>
   164c0:	mov	r0, r4
   164c4:	str	sl, [r9]
   164c8:	add	sp, sp, #84	; 0x54
   164cc:	ldrd	r4, [sp]
   164d0:	ldrd	r6, [sp, #8]
   164d4:	ldrd	r8, [sp, #16]
   164d8:	ldrd	sl, [sp, #24]
   164dc:	add	sp, sp, #32
   164e0:	pop	{pc}		; (ldr pc, [sp], #4)
   164e4:	mov	r0, #8
   164e8:	mvn	r3, #-2147483648	; 0x80000000
   164ec:	add	r1, sp, #28
   164f0:	str	r0, [sp]
   164f4:	mov	r0, #0
   164f8:	bl	1788c <__assert_fail@plt+0x6788>
   164fc:	ldrd	r2, [r4, #8]
   16500:	mov	r7, r0
   16504:	str	r0, [r4]
   16508:	strd	r2, [r0]
   1650c:	b	163e8 <__assert_fail@plt+0x52e4>
   16510:	muleq	r2, r0, r2
   16514:	strd	r4, [sp, #-12]!
   16518:	mov	r4, #0
   1651c:	mov	r5, #0
   16520:	str	lr, [sp, #8]
   16524:	sub	sp, sp, #100	; 0x64
   16528:	cmp	r1, #10
   1652c:	strd	r4, [sp]
   16530:	strd	r4, [sp, #8]
   16534:	strd	r4, [sp, #16]
   16538:	strd	r4, [sp, #24]
   1653c:	strd	r4, [sp, #32]
   16540:	strd	r4, [sp, #40]	; 0x28
   16544:	beq	16574 <__assert_fail@plt+0x5470>
   16548:	mov	ip, #67108864	; 0x4000000
   1654c:	mov	r3, sp
   16550:	str	r1, [sp]
   16554:	mov	r1, r2
   16558:	mvn	r2, #0
   1655c:	str	ip, [sp, #12]
   16560:	bl	14f60 <__assert_fail@plt+0x3e5c>
   16564:	add	sp, sp, #100	; 0x64
   16568:	ldrd	r4, [sp]
   1656c:	add	sp, sp, #8
   16570:	pop	{pc}		; (ldr pc, [sp], #4)
   16574:	bl	110ec <abort@plt>
   16578:	ldr	ip, [pc, #156]	; 1661c <__assert_fail@plt+0x5518>
   1657c:	cmp	r2, #0
   16580:	cmpne	r1, #0
   16584:	strd	r4, [sp, #-32]!	; 0xffffffe0
   16588:	strd	r6, [sp, #8]
   1658c:	mov	r6, r2
   16590:	str	r8, [sp, #16]
   16594:	mov	r8, r3
   16598:	strd	sl, [sp, #20]
   1659c:	ldrd	r4, [ip]
   165a0:	str	lr, [sp, #28]
   165a4:	sub	sp, sp, #48	; 0x30
   165a8:	mov	lr, #10
   165ac:	ldrd	r2, [ip, #8]
   165b0:	ldrd	sl, [ip, #16]
   165b4:	strd	r4, [sp]
   165b8:	ldrd	r4, [ip, #32]
   165bc:	str	lr, [sp]
   165c0:	strd	r2, [sp, #8]
   165c4:	strd	sl, [sp, #16]
   165c8:	ldrd	r2, [ip, #24]
   165cc:	ldrd	sl, [ip, #40]	; 0x28
   165d0:	strd	r2, [sp, #24]
   165d4:	strd	r4, [sp, #32]
   165d8:	strd	sl, [sp, #40]	; 0x28
   165dc:	beq	16618 <__assert_fail@plt+0x5514>
   165e0:	mov	r7, r1
   165e4:	mov	r3, sp
   165e8:	mov	r1, r8
   165ec:	mvn	r2, #0
   165f0:	str	r7, [sp, #40]	; 0x28
   165f4:	str	r6, [sp, #44]	; 0x2c
   165f8:	bl	14f60 <__assert_fail@plt+0x3e5c>
   165fc:	add	sp, sp, #48	; 0x30
   16600:	ldrd	r4, [sp]
   16604:	ldrd	r6, [sp, #8]
   16608:	ldr	r8, [sp, #16]
   1660c:	ldrd	sl, [sp, #20]
   16610:	add	sp, sp, #28
   16614:	pop	{pc}		; (ldr pc, [sp], #4)
   16618:	bl	110ec <abort@plt>
   1661c:	muleq	r2, r0, r2
   16620:	ldr	ip, [pc, #156]	; 166c4 <__assert_fail@plt+0x55c0>
   16624:	cmp	r2, #0
   16628:	cmpne	r1, #0
   1662c:	strd	r4, [sp, #-32]!	; 0xffffffe0
   16630:	strd	r6, [sp, #8]
   16634:	mov	r6, r2
   16638:	str	r8, [sp, #16]
   1663c:	mov	r8, r3
   16640:	strd	sl, [sp, #20]
   16644:	ldrd	r4, [ip]
   16648:	str	lr, [sp, #28]
   1664c:	sub	sp, sp, #48	; 0x30
   16650:	mov	lr, #10
   16654:	ldrd	r2, [ip, #8]
   16658:	ldrd	sl, [ip, #16]
   1665c:	strd	r4, [sp]
   16660:	ldrd	r4, [ip, #32]
   16664:	str	lr, [sp]
   16668:	strd	r2, [sp, #8]
   1666c:	strd	sl, [sp, #16]
   16670:	ldrd	r2, [ip, #24]
   16674:	ldrd	sl, [ip, #40]	; 0x28
   16678:	strd	r2, [sp, #24]
   1667c:	strd	r4, [sp, #32]
   16680:	strd	sl, [sp, #40]	; 0x28
   16684:	beq	166c0 <__assert_fail@plt+0x55bc>
   16688:	ldr	r2, [sp, #80]	; 0x50
   1668c:	mov	r7, r1
   16690:	mov	r3, sp
   16694:	mov	r1, r8
   16698:	str	r7, [sp, #40]	; 0x28
   1669c:	str	r6, [sp, #44]	; 0x2c
   166a0:	bl	14f60 <__assert_fail@plt+0x3e5c>
   166a4:	add	sp, sp, #48	; 0x30
   166a8:	ldrd	r4, [sp]
   166ac:	ldrd	r6, [sp, #8]
   166b0:	ldr	r8, [sp, #16]
   166b4:	ldrd	sl, [sp, #20]
   166b8:	add	sp, sp, #28
   166bc:	pop	{pc}		; (ldr pc, [sp], #4)
   166c0:	bl	110ec <abort@plt>
   166c4:	muleq	r2, r0, r2
   166c8:	ldr	ip, [pc, #512]	; 168d0 <__assert_fail@plt+0x57cc>
   166cc:	cmp	r0, #0
   166d0:	strd	r4, [sp, #-36]!	; 0xffffffdc
   166d4:	ldrd	r4, [ip, #16]
   166d8:	strd	r6, [sp, #8]
   166dc:	clz	r6, r1
   166e0:	mov	r7, r1
   166e4:	strd	r8, [sp, #16]
   166e8:	mov	r8, r0
   166ec:	lsr	r6, r6, #5
   166f0:	strd	sl, [sp, #24]
   166f4:	mov	fp, r2
   166f8:	mov	sl, #10
   166fc:	ldrd	r2, [ip]
   16700:	moveq	r6, #1
   16704:	str	lr, [sp, #32]
   16708:	sub	sp, sp, #92	; 0x5c
   1670c:	cmp	r6, #0
   16710:	ldrd	r0, [ip, #8]
   16714:	strd	r2, [sp, #40]	; 0x28
   16718:	strd	r4, [sp, #56]	; 0x38
   1671c:	ldrd	r2, [ip, #24]
   16720:	strd	r0, [sp, #48]	; 0x30
   16724:	ldrd	r0, [ip, #32]
   16728:	str	sl, [sp, #40]	; 0x28
   1672c:	ldrd	r4, [ip, #40]	; 0x28
   16730:	strd	r2, [sp, #64]	; 0x40
   16734:	strd	r0, [sp, #72]	; 0x48
   16738:	strd	r4, [sp, #80]	; 0x50
   1673c:	bne	168cc <__assert_fail@plt+0x57c8>
   16740:	movw	r5, #45328	; 0xb110
   16744:	movt	r5, #2
   16748:	str	r8, [sp, #80]	; 0x50
   1674c:	str	r7, [sp, #84]	; 0x54
   16750:	bl	10ff0 <__errno_location@plt>
   16754:	ldr	r3, [r0]
   16758:	mov	r9, r0
   1675c:	ldr	r2, [r5, #4]
   16760:	ldr	r4, [r5]
   16764:	str	r3, [sp, #28]
   16768:	cmp	r2, #0
   1676c:	movgt	r1, sl
   16770:	bgt	167d8 <__assert_fail@plt+0x56d4>
   16774:	add	r3, r5, #8
   16778:	str	r2, [sp, #36]	; 0x24
   1677c:	rsb	r2, r2, #1
   16780:	cmp	r4, r3
   16784:	beq	168a0 <__assert_fail@plt+0x579c>
   16788:	mov	r1, #8
   1678c:	mov	r0, r4
   16790:	mvn	r3, #-2147483648	; 0x80000000
   16794:	str	r1, [sp]
   16798:	add	r1, sp, #36	; 0x24
   1679c:	bl	1788c <__assert_fail@plt+0x6788>
   167a0:	mov	r4, r0
   167a4:	str	r0, [r5]
   167a8:	ldr	r0, [r5, #4]
   167ac:	mov	r1, #0
   167b0:	ldr	r2, [sp, #36]	; 0x24
   167b4:	sub	r2, r2, r0
   167b8:	add	r0, r4, r0, lsl #3
   167bc:	lsl	r2, r2, #3
   167c0:	bl	11020 <memset@plt>
   167c4:	ldr	r3, [sp, #36]	; 0x24
   167c8:	ldr	r1, [sp, #40]	; 0x28
   167cc:	ldr	r8, [sp, #80]	; 0x50
   167d0:	str	r3, [r5, #4]
   167d4:	ldr	r7, [sp, #84]	; 0x54
   167d8:	mvn	r3, #0
   167dc:	mov	r2, fp
   167e0:	ldr	r6, [sp, #44]	; 0x2c
   167e4:	ldr	sl, [r4]
   167e8:	ldr	r5, [r4, #4]
   167ec:	orr	r6, r6, #1
   167f0:	stm	sp, {r1, r6}
   167f4:	add	r1, sp, #48	; 0x30
   167f8:	str	r8, [sp, #12]
   167fc:	mov	r0, r5
   16800:	str	r1, [sp, #8]
   16804:	mov	r1, sl
   16808:	str	r7, [sp, #16]
   1680c:	bl	13574 <__assert_fail@plt+0x2470>
   16810:	cmp	sl, r0
   16814:	bhi	16878 <__assert_fail@plt+0x5774>
   16818:	add	r7, r0, #1
   1681c:	movw	r3, #45456	; 0xb190
   16820:	movt	r3, #2
   16824:	cmp	r5, r3
   16828:	str	r7, [r4]
   1682c:	beq	16838 <__assert_fail@plt+0x5734>
   16830:	mov	r0, r5
   16834:	bl	12140 <__assert_fail@plt+0x103c>
   16838:	mov	r0, r7
   1683c:	bl	175e8 <__assert_fail@plt+0x64e4>
   16840:	ldr	r3, [sp, #40]	; 0x28
   16844:	mov	r2, fp
   16848:	mov	r1, r7
   1684c:	mov	r5, r0
   16850:	ldr	lr, [sp, #80]	; 0x50
   16854:	ldr	ip, [sp, #84]	; 0x54
   16858:	str	r0, [r4, #4]
   1685c:	add	r4, sp, #48	; 0x30
   16860:	stm	sp, {r3, r6}
   16864:	mvn	r3, #0
   16868:	str	r4, [sp, #8]
   1686c:	str	lr, [sp, #12]
   16870:	str	ip, [sp, #16]
   16874:	bl	13574 <__assert_fail@plt+0x2470>
   16878:	ldr	r3, [sp, #28]
   1687c:	mov	r0, r5
   16880:	str	r3, [r9]
   16884:	add	sp, sp, #92	; 0x5c
   16888:	ldrd	r4, [sp]
   1688c:	ldrd	r6, [sp, #8]
   16890:	ldrd	r8, [sp, #16]
   16894:	ldrd	sl, [sp, #24]
   16898:	add	sp, sp, #32
   1689c:	pop	{pc}		; (ldr pc, [sp], #4)
   168a0:	mov	r1, #8
   168a4:	mvn	r3, #-2147483648	; 0x80000000
   168a8:	mov	r0, r6
   168ac:	str	r1, [sp]
   168b0:	add	r1, sp, #36	; 0x24
   168b4:	bl	1788c <__assert_fail@plt+0x6788>
   168b8:	ldrd	r2, [r5, #8]
   168bc:	mov	r4, r0
   168c0:	str	r0, [r5]
   168c4:	strd	r2, [r0]
   168c8:	b	167a8 <__assert_fail@plt+0x56a4>
   168cc:	bl	110ec <abort@plt>
   168d0:	muleq	r2, r0, r2
   168d4:	ldr	ip, [pc, #536]	; 16af4 <__assert_fail@plt+0x59f0>
   168d8:	cmp	r0, #0
   168dc:	strd	r4, [sp, #-36]!	; 0xffffffdc
   168e0:	ldrd	r4, [ip, #16]
   168e4:	strd	r6, [sp, #8]
   168e8:	mov	r6, r1
   168ec:	mov	r7, r0
   168f0:	strd	r8, [sp, #16]
   168f4:	mov	r9, #10
   168f8:	strd	sl, [sp, #24]
   168fc:	mov	sl, r2
   16900:	mov	fp, r3
   16904:	str	lr, [sp, #32]
   16908:	clz	lr, r1
   1690c:	sub	sp, sp, #92	; 0x5c
   16910:	ldrd	r2, [ip]
   16914:	lsr	lr, lr, #5
   16918:	moveq	lr, #1
   1691c:	ldrd	r0, [ip, #8]
   16920:	cmp	lr, #0
   16924:	strd	r4, [sp, #56]	; 0x38
   16928:	ldrd	r4, [ip, #40]	; 0x28
   1692c:	str	lr, [sp, #28]
   16930:	strd	r2, [sp, #40]	; 0x28
   16934:	ldrd	r2, [ip, #24]
   16938:	strd	r0, [sp, #48]	; 0x30
   1693c:	ldrd	r0, [ip, #32]
   16940:	str	r9, [sp, #40]	; 0x28
   16944:	strd	r2, [sp, #64]	; 0x40
   16948:	strd	r4, [sp, #80]	; 0x50
   1694c:	strd	r0, [sp, #72]	; 0x48
   16950:	bne	16af0 <__assert_fail@plt+0x59ec>
   16954:	movw	r5, #45328	; 0xb110
   16958:	movt	r5, #2
   1695c:	str	r7, [sp, #80]	; 0x50
   16960:	str	r6, [sp, #84]	; 0x54
   16964:	bl	10ff0 <__errno_location@plt>
   16968:	ldr	r3, [r0]
   1696c:	mov	r8, r0
   16970:	ldr	r2, [r5, #4]
   16974:	ldr	r4, [r5]
   16978:	str	r3, [sp, #24]
   1697c:	cmp	r2, #0
   16980:	movgt	r1, r9
   16984:	bgt	169ec <__assert_fail@plt+0x58e8>
   16988:	add	r3, r5, #8
   1698c:	str	r2, [sp, #36]	; 0x24
   16990:	rsb	r2, r2, #1
   16994:	cmp	r4, r3
   16998:	beq	16ac4 <__assert_fail@plt+0x59c0>
   1699c:	mov	r1, #8
   169a0:	mov	r0, r4
   169a4:	mvn	r3, #-2147483648	; 0x80000000
   169a8:	str	r1, [sp]
   169ac:	add	r1, sp, #36	; 0x24
   169b0:	bl	1788c <__assert_fail@plt+0x6788>
   169b4:	mov	r4, r0
   169b8:	str	r0, [r5]
   169bc:	ldr	r0, [r5, #4]
   169c0:	mov	r1, #0
   169c4:	ldr	r2, [sp, #36]	; 0x24
   169c8:	sub	r2, r2, r0
   169cc:	add	r0, r4, r0, lsl #3
   169d0:	lsl	r2, r2, #3
   169d4:	bl	11020 <memset@plt>
   169d8:	ldr	r3, [sp, #36]	; 0x24
   169dc:	ldr	r1, [sp, #40]	; 0x28
   169e0:	ldr	r7, [sp, #80]	; 0x50
   169e4:	str	r3, [r5, #4]
   169e8:	ldr	r6, [sp, #84]	; 0x54
   169ec:	mov	r3, fp
   169f0:	mov	r2, sl
   169f4:	ldr	r0, [sp, #44]	; 0x2c
   169f8:	ldr	r9, [r4]
   169fc:	ldr	r5, [r4, #4]
   16a00:	orr	r0, r0, #1
   16a04:	str	r1, [sp]
   16a08:	add	r1, sp, #48	; 0x30
   16a0c:	str	r0, [sp, #4]
   16a10:	str	r1, [sp, #8]
   16a14:	mov	r1, r9
   16a18:	str	r7, [sp, #12]
   16a1c:	str	r6, [sp, #16]
   16a20:	str	r0, [sp, #28]
   16a24:	mov	r0, r5
   16a28:	bl	13574 <__assert_fail@plt+0x2470>
   16a2c:	cmp	r9, r0
   16a30:	bhi	16a9c <__assert_fail@plt+0x5998>
   16a34:	add	r6, r0, #1
   16a38:	movw	r3, #45456	; 0xb190
   16a3c:	movt	r3, #2
   16a40:	cmp	r5, r3
   16a44:	str	r6, [r4]
   16a48:	beq	16a54 <__assert_fail@plt+0x5950>
   16a4c:	mov	r0, r5
   16a50:	bl	12140 <__assert_fail@plt+0x103c>
   16a54:	mov	r0, r6
   16a58:	bl	175e8 <__assert_fail@plt+0x64e4>
   16a5c:	ldr	lr, [sp, #40]	; 0x28
   16a60:	mov	r1, r6
   16a64:	mov	r3, fp
   16a68:	mov	r2, sl
   16a6c:	mov	r5, r0
   16a70:	ldr	r6, [sp, #80]	; 0x50
   16a74:	ldr	ip, [sp, #84]	; 0x54
   16a78:	str	r0, [r4, #4]
   16a7c:	str	lr, [sp]
   16a80:	ldr	lr, [sp, #28]
   16a84:	str	lr, [sp, #4]
   16a88:	add	lr, sp, #48	; 0x30
   16a8c:	str	r6, [sp, #12]
   16a90:	str	lr, [sp, #8]
   16a94:	str	ip, [sp, #16]
   16a98:	bl	13574 <__assert_fail@plt+0x2470>
   16a9c:	ldr	r3, [sp, #24]
   16aa0:	mov	r0, r5
   16aa4:	str	r3, [r8]
   16aa8:	add	sp, sp, #92	; 0x5c
   16aac:	ldrd	r4, [sp]
   16ab0:	ldrd	r6, [sp, #8]
   16ab4:	ldrd	r8, [sp, #16]
   16ab8:	ldrd	sl, [sp, #24]
   16abc:	add	sp, sp, #32
   16ac0:	pop	{pc}		; (ldr pc, [sp], #4)
   16ac4:	mov	r1, #8
   16ac8:	mvn	r3, #-2147483648	; 0x80000000
   16acc:	ldr	r0, [sp, #28]
   16ad0:	str	r1, [sp]
   16ad4:	add	r1, sp, #36	; 0x24
   16ad8:	bl	1788c <__assert_fail@plt+0x6788>
   16adc:	ldrd	r2, [r5, #8]
   16ae0:	mov	r4, r0
   16ae4:	str	r0, [r5]
   16ae8:	strd	r2, [r0]
   16aec:	b	169bc <__assert_fail@plt+0x58b8>
   16af0:	bl	110ec <abort@plt>
   16af4:	muleq	r2, r0, r2
   16af8:	ldr	r3, [pc]	; 16b00 <__assert_fail@plt+0x59fc>
   16afc:	b	14f60 <__assert_fail@plt+0x3e5c>
   16b00:	andeq	fp, r2, r0, lsr #2
   16b04:	strd	r4, [sp, #-36]!	; 0xffffffdc
   16b08:	movw	r4, #45328	; 0xb110
   16b0c:	movt	r4, #2
   16b10:	strd	r6, [sp, #8]
   16b14:	strd	r8, [sp, #16]
   16b18:	strd	sl, [sp, #24]
   16b1c:	mov	sl, r0
   16b20:	mov	fp, r1
   16b24:	str	lr, [sp, #32]
   16b28:	sub	sp, sp, #44	; 0x2c
   16b2c:	bl	10ff0 <__errno_location@plt>
   16b30:	ldr	r3, [r0]
   16b34:	mov	r8, r0
   16b38:	ldr	r2, [r4, #4]
   16b3c:	ldr	r5, [r4]
   16b40:	str	r3, [sp, #28]
   16b44:	cmp	r2, #0
   16b48:	bgt	16ba4 <__assert_fail@plt+0x5aa0>
   16b4c:	add	r3, r4, #8
   16b50:	str	r2, [sp, #36]	; 0x24
   16b54:	rsb	r2, r2, #1
   16b58:	cmp	r5, r3
   16b5c:	beq	16c80 <__assert_fail@plt+0x5b7c>
   16b60:	mov	r1, #8
   16b64:	mov	r0, r5
   16b68:	mvn	r3, #-2147483648	; 0x80000000
   16b6c:	str	r1, [sp]
   16b70:	add	r1, sp, #36	; 0x24
   16b74:	bl	1788c <__assert_fail@plt+0x6788>
   16b78:	mov	r5, r0
   16b7c:	str	r0, [r4]
   16b80:	ldr	r0, [r4, #4]
   16b84:	mov	r1, #0
   16b88:	ldr	r2, [sp, #36]	; 0x24
   16b8c:	sub	r2, r2, r0
   16b90:	add	r0, r5, r0, lsl #3
   16b94:	lsl	r2, r2, #3
   16b98:	bl	11020 <memset@plt>
   16b9c:	ldr	r3, [sp, #36]	; 0x24
   16ba0:	str	r3, [r4, #4]
   16ba4:	ldr	ip, [r4, #16]
   16ba8:	mov	r3, fp
   16bac:	mov	r2, sl
   16bb0:	ldr	r7, [r4, #20]
   16bb4:	ldr	r0, [pc, #240]	; 16cac <__assert_fail@plt+0x5ba8>
   16bb8:	ldr	r9, [r5]
   16bbc:	orr	r7, r7, #1
   16bc0:	ldr	r6, [r5, #4]
   16bc4:	str	ip, [sp]
   16bc8:	ldr	ip, [r4, #56]	; 0x38
   16bcc:	mov	r1, r9
   16bd0:	str	r7, [sp, #4]
   16bd4:	ldr	lr, [r4, #60]	; 0x3c
   16bd8:	str	r0, [sp, #8]
   16bdc:	mov	r0, r6
   16be0:	str	ip, [sp, #12]
   16be4:	str	lr, [sp, #16]
   16be8:	bl	13574 <__assert_fail@plt+0x2470>
   16bec:	cmp	r9, r0
   16bf0:	bhi	16c58 <__assert_fail@plt+0x5b54>
   16bf4:	add	r9, r0, #1
   16bf8:	movw	r3, #45456	; 0xb190
   16bfc:	movt	r3, #2
   16c00:	cmp	r6, r3
   16c04:	str	r9, [r5]
   16c08:	beq	16c14 <__assert_fail@plt+0x5b10>
   16c0c:	mov	r0, r6
   16c10:	bl	12140 <__assert_fail@plt+0x103c>
   16c14:	mov	r0, r9
   16c18:	bl	175e8 <__assert_fail@plt+0x64e4>
   16c1c:	ldr	ip, [r4, #16]
   16c20:	mov	r1, r9
   16c24:	mov	r3, fp
   16c28:	mov	r2, sl
   16c2c:	mov	r6, r0
   16c30:	ldr	r9, [r4, #56]	; 0x38
   16c34:	ldr	lr, [r4, #60]	; 0x3c
   16c38:	str	r0, [r5, #4]
   16c3c:	str	ip, [sp]
   16c40:	ldr	ip, [pc, #100]	; 16cac <__assert_fail@plt+0x5ba8>
   16c44:	str	r7, [sp, #4]
   16c48:	str	ip, [sp, #8]
   16c4c:	str	r9, [sp, #12]
   16c50:	str	lr, [sp, #16]
   16c54:	bl	13574 <__assert_fail@plt+0x2470>
   16c58:	ldr	r3, [sp, #28]
   16c5c:	mov	r0, r6
   16c60:	str	r3, [r8]
   16c64:	add	sp, sp, #44	; 0x2c
   16c68:	ldrd	r4, [sp]
   16c6c:	ldrd	r6, [sp, #8]
   16c70:	ldrd	r8, [sp, #16]
   16c74:	ldrd	sl, [sp, #24]
   16c78:	add	sp, sp, #32
   16c7c:	pop	{pc}		; (ldr pc, [sp], #4)
   16c80:	mov	r0, #8
   16c84:	mvn	r3, #-2147483648	; 0x80000000
   16c88:	add	r1, sp, #36	; 0x24
   16c8c:	str	r0, [sp]
   16c90:	mov	r0, #0
   16c94:	bl	1788c <__assert_fail@plt+0x6788>
   16c98:	ldrd	r2, [r4, #8]
   16c9c:	mov	r5, r0
   16ca0:	str	r0, [r4]
   16ca4:	strd	r2, [r0]
   16ca8:	b	16b80 <__assert_fail@plt+0x5a7c>
   16cac:	andeq	fp, r2, r8, lsr #2
   16cb0:	ldr	r3, [pc, #4]	; 16cbc <__assert_fail@plt+0x5bb8>
   16cb4:	mvn	r2, #0
   16cb8:	b	14f60 <__assert_fail@plt+0x3e5c>
   16cbc:	andeq	fp, r2, r0, lsr #2
   16cc0:	strd	r4, [sp, #-36]!	; 0xffffffdc
   16cc4:	movw	r4, #45328	; 0xb110
   16cc8:	movt	r4, #2
   16ccc:	strd	r6, [sp, #8]
   16cd0:	strd	r8, [sp, #16]
   16cd4:	strd	sl, [sp, #24]
   16cd8:	mov	sl, r0
   16cdc:	str	lr, [sp, #32]
   16ce0:	sub	sp, sp, #44	; 0x2c
   16ce4:	bl	10ff0 <__errno_location@plt>
   16ce8:	ldr	r3, [r0]
   16cec:	mov	r8, r0
   16cf0:	ldr	r2, [r4, #4]
   16cf4:	ldr	r5, [r4]
   16cf8:	str	r3, [sp, #28]
   16cfc:	cmp	r2, #0
   16d00:	bgt	16d5c <__assert_fail@plt+0x5c58>
   16d04:	add	r3, r4, #8
   16d08:	str	r2, [sp, #36]	; 0x24
   16d0c:	rsb	r2, r2, #1
   16d10:	cmp	r5, r3
   16d14:	beq	16e24 <__assert_fail@plt+0x5d20>
   16d18:	mov	r1, #8
   16d1c:	mov	r0, r5
   16d20:	mvn	r3, #-2147483648	; 0x80000000
   16d24:	str	r1, [sp]
   16d28:	add	r1, sp, #36	; 0x24
   16d2c:	bl	1788c <__assert_fail@plt+0x6788>
   16d30:	mov	r5, r0
   16d34:	str	r0, [r4]
   16d38:	ldr	r0, [r4, #4]
   16d3c:	mov	r1, #0
   16d40:	ldr	r2, [sp, #36]	; 0x24
   16d44:	sub	r2, r2, r0
   16d48:	add	r0, r5, r0, lsl #3
   16d4c:	lsl	r2, r2, #3
   16d50:	bl	11020 <memset@plt>
   16d54:	ldr	r3, [sp, #36]	; 0x24
   16d58:	str	r3, [r4, #4]
   16d5c:	ldr	ip, [r4, #16]
   16d60:	mvn	r3, #0
   16d64:	mov	r2, sl
   16d68:	ldr	r7, [r4, #20]
   16d6c:	ldr	fp, [pc, #220]	; 16e50 <__assert_fail@plt+0x5d4c>
   16d70:	ldr	r9, [r5]
   16d74:	orr	r7, r7, #1
   16d78:	ldr	r6, [r5, #4]
   16d7c:	str	ip, [sp]
   16d80:	ldr	ip, [r4, #56]	; 0x38
   16d84:	mov	r1, r9
   16d88:	stmib	sp, {r7, fp}
   16d8c:	ldr	lr, [r4, #60]	; 0x3c
   16d90:	mov	r0, r6
   16d94:	str	ip, [sp, #12]
   16d98:	str	lr, [sp, #16]
   16d9c:	bl	13574 <__assert_fail@plt+0x2470>
   16da0:	cmp	r9, r0
   16da4:	bhi	16dfc <__assert_fail@plt+0x5cf8>
   16da8:	add	r9, r0, #1
   16dac:	movw	r3, #45456	; 0xb190
   16db0:	movt	r3, #2
   16db4:	cmp	r6, r3
   16db8:	str	r9, [r5]
   16dbc:	beq	16dc8 <__assert_fail@plt+0x5cc4>
   16dc0:	mov	r0, r6
   16dc4:	bl	12140 <__assert_fail@plt+0x103c>
   16dc8:	mov	r0, r9
   16dcc:	bl	175e8 <__assert_fail@plt+0x64e4>
   16dd0:	ldr	r3, [r4, #16]
   16dd4:	mov	r2, sl
   16dd8:	mov	r1, r9
   16ddc:	mov	r6, r0
   16de0:	ldr	lr, [r4, #56]	; 0x38
   16de4:	ldr	ip, [r4, #60]	; 0x3c
   16de8:	str	r0, [r5, #4]
   16dec:	stm	sp, {r3, r7, fp, lr}
   16df0:	mvn	r3, #0
   16df4:	str	ip, [sp, #16]
   16df8:	bl	13574 <__assert_fail@plt+0x2470>
   16dfc:	ldr	r3, [sp, #28]
   16e00:	mov	r0, r6
   16e04:	str	r3, [r8]
   16e08:	add	sp, sp, #44	; 0x2c
   16e0c:	ldrd	r4, [sp]
   16e10:	ldrd	r6, [sp, #8]
   16e14:	ldrd	r8, [sp, #16]
   16e18:	ldrd	sl, [sp, #24]
   16e1c:	add	sp, sp, #32
   16e20:	pop	{pc}		; (ldr pc, [sp], #4)
   16e24:	mov	r0, #8
   16e28:	mvn	r3, #-2147483648	; 0x80000000
   16e2c:	add	r1, sp, #36	; 0x24
   16e30:	str	r0, [sp]
   16e34:	mov	r0, #0
   16e38:	bl	1788c <__assert_fail@plt+0x6788>
   16e3c:	ldrd	r2, [r4, #8]
   16e40:	mov	r5, r0
   16e44:	str	r0, [r4]
   16e48:	strd	r2, [r0]
   16e4c:	b	16d38 <__assert_fail@plt+0x5c34>
   16e50:	andeq	fp, r2, r8, lsr #2
   16e54:	mov	r2, #3
   16e58:	mov	r1, #0
   16e5c:	b	18fcc <__assert_fail@plt+0x7ec8>
   16e60:	cmp	r1, #0
   16e64:	strd	r4, [sp, #-16]!
   16e68:	mov	ip, r3
   16e6c:	str	r6, [sp, #8]
   16e70:	mov	r4, r0
   16e74:	str	lr, [sp, #12]
   16e78:	sub	sp, sp, #32
   16e7c:	ldr	r5, [sp, #48]	; 0x30
   16e80:	ldr	r6, [sp, #52]	; 0x34
   16e84:	beq	16fc8 <__assert_fail@plt+0x5ec4>
   16e88:	mov	r3, r1
   16e8c:	mov	r1, #1
   16e90:	stm	sp, {r2, ip}
   16e94:	movw	r2, #40840	; 0x9f88
   16e98:	movt	r2, #1
   16e9c:	bl	11044 <__fprintf_chk@plt>
   16ea0:	mov	r2, #5
   16ea4:	movw	r1, #40860	; 0x9f9c
   16ea8:	movt	r1, #1
   16eac:	mov	r0, #0
   16eb0:	bl	10ef4 <dcgettext@plt>
   16eb4:	movw	ip, #2022	; 0x7e6
   16eb8:	mov	r3, r0
   16ebc:	mov	r1, #1
   16ec0:	movw	r2, #41588	; 0xa274
   16ec4:	movt	r2, #1
   16ec8:	mov	r0, r4
   16ecc:	str	ip, [sp]
   16ed0:	bl	11044 <__fprintf_chk@plt>
   16ed4:	mov	r1, r4
   16ed8:	mov	r0, #10
   16edc:	bl	10ee8 <fputc_unlocked@plt>
   16ee0:	mov	r2, #5
   16ee4:	movw	r1, #40864	; 0x9fa0
   16ee8:	movt	r1, #1
   16eec:	mov	r0, #0
   16ef0:	bl	10ef4 <dcgettext@plt>
   16ef4:	mov	r2, r0
   16ef8:	mov	r1, #1
   16efc:	movw	r3, #41036	; 0xa04c
   16f00:	movt	r3, #1
   16f04:	mov	r0, r4
   16f08:	bl	11044 <__fprintf_chk@plt>
   16f0c:	mov	r1, r4
   16f10:	mov	r0, #10
   16f14:	bl	10ee8 <fputc_unlocked@plt>
   16f18:	cmp	r6, #9
   16f1c:	ldrls	pc, [pc, r6, lsl #2]
   16f20:	b	17234 <__assert_fail@plt+0x6130>
   16f24:			; <UNDEFINED> instruction: 0x00016fb4
   16f28:	andeq	r6, r1, r4, ror #31
   16f2c:	andeq	r7, r1, r0, lsr #32
   16f30:	andeq	r7, r1, r0, rrx
   16f34:	andeq	r7, r1, r8, lsr #1
   16f38:	andeq	r7, r1, r0, ror #1
   16f3c:	andeq	r7, r1, r8, lsr #2
   16f40:	andeq	r7, r1, ip, ror r1
   16f44:	ldrdeq	r7, [r1], -r4
   16f48:	andeq	r6, r1, ip, asr #30
   16f4c:	movw	r1, #41340	; 0xa17c
   16f50:	movt	r1, #1
   16f54:	mov	r2, #5
   16f58:	mov	r0, #0
   16f5c:	bl	10ef4 <dcgettext@plt>
   16f60:	ldr	lr, [r5, #4]
   16f64:	mov	r2, r0
   16f68:	mov	r1, #1
   16f6c:	mov	r0, r4
   16f70:	ldr	r3, [r5, #8]
   16f74:	ldr	ip, [r5, #32]
   16f78:	str	lr, [sp]
   16f7c:	ldr	lr, [r5, #12]
   16f80:	str	ip, [sp, #28]
   16f84:	ldr	ip, [r5, #28]
   16f88:	str	r3, [sp, #4]
   16f8c:	ldr	r3, [r5, #16]
   16f90:	str	lr, [sp, #8]
   16f94:	ldr	lr, [r5, #20]
   16f98:	str	ip, [sp, #24]
   16f9c:	ldr	ip, [r5, #24]
   16fa0:	str	r3, [sp, #12]
   16fa4:	ldr	r3, [r5]
   16fa8:	str	lr, [sp, #16]
   16fac:	str	ip, [sp, #20]
   16fb0:	bl	11044 <__fprintf_chk@plt>
   16fb4:	add	sp, sp, #32
   16fb8:	ldrd	r4, [sp]
   16fbc:	ldr	r6, [sp, #8]
   16fc0:	add	sp, sp, #12
   16fc4:	pop	{pc}		; (ldr pc, [sp], #4)
   16fc8:	mov	r3, r2
   16fcc:	mov	r1, #1
   16fd0:	str	ip, [sp]
   16fd4:	movw	r2, #40852	; 0x9f94
   16fd8:	movt	r2, #1
   16fdc:	bl	11044 <__fprintf_chk@plt>
   16fe0:	b	16ea0 <__assert_fail@plt+0x5d9c>
   16fe4:	mov	r2, #5
   16fe8:	movw	r1, #41072	; 0xa070
   16fec:	movt	r1, #1
   16ff0:	mov	r0, #0
   16ff4:	bl	10ef4 <dcgettext@plt>
   16ff8:	ldr	r3, [r5]
   16ffc:	mov	r2, r0
   17000:	mov	r1, #1
   17004:	mov	r0, r4
   17008:	add	sp, sp, #32
   1700c:	ldrd	r4, [sp]
   17010:	ldr	r6, [sp, #8]
   17014:	ldr	lr, [sp, #12]
   17018:	add	sp, sp, #16
   1701c:	b	11044 <__fprintf_chk@plt>
   17020:	mov	r2, #5
   17024:	movw	r1, #41088	; 0xa080
   17028:	movt	r1, #1
   1702c:	mov	r0, #0
   17030:	bl	10ef4 <dcgettext@plt>
   17034:	ldm	r5, {r3, ip}
   17038:	mov	r2, r0
   1703c:	mov	r1, #1
   17040:	mov	r0, r4
   17044:	str	ip, [sp, #48]	; 0x30
   17048:	add	sp, sp, #32
   1704c:	ldrd	r4, [sp]
   17050:	ldr	r6, [sp, #8]
   17054:	ldr	lr, [sp, #12]
   17058:	add	sp, sp, #16
   1705c:	b	11044 <__fprintf_chk@plt>
   17060:	mov	r2, #5
   17064:	movw	r1, #41112	; 0xa098
   17068:	movt	r1, #1
   1706c:	mov	r0, #0
   17070:	bl	10ef4 <dcgettext@plt>
   17074:	ldm	r5, {r3, lr}
   17078:	mov	r2, r0
   1707c:	mov	r1, #1
   17080:	mov	r0, r4
   17084:	ldr	ip, [r5, #8]
   17088:	str	lr, [sp, #48]	; 0x30
   1708c:	str	ip, [sp, #52]	; 0x34
   17090:	add	sp, sp, #32
   17094:	ldrd	r4, [sp]
   17098:	ldr	r6, [sp, #8]
   1709c:	ldr	lr, [sp, #12]
   170a0:	add	sp, sp, #16
   170a4:	b	11044 <__fprintf_chk@plt>
   170a8:	mov	r2, #5
   170ac:	movw	r1, #41140	; 0xa0b4
   170b0:	movt	r1, #1
   170b4:	mov	r0, #0
   170b8:	bl	10ef4 <dcgettext@plt>
   170bc:	ldmib	r5, {r3, ip, lr}
   170c0:	mov	r2, r0
   170c4:	mov	r1, #1
   170c8:	mov	r0, r4
   170cc:	str	r3, [sp]
   170d0:	ldr	r3, [r5]
   170d4:	stmib	sp, {ip, lr}
   170d8:	bl	11044 <__fprintf_chk@plt>
   170dc:	b	16fb4 <__assert_fail@plt+0x5eb0>
   170e0:	mov	r2, #5
   170e4:	movw	r1, #41172	; 0xa0d4
   170e8:	movt	r1, #1
   170ec:	mov	r0, #0
   170f0:	bl	10ef4 <dcgettext@plt>
   170f4:	ldmib	r5, {ip, lr}
   170f8:	mov	r2, r0
   170fc:	mov	r1, #1
   17100:	mov	r0, r4
   17104:	ldr	r3, [r5, #16]
   17108:	str	ip, [sp]
   1710c:	ldr	ip, [r5, #12]
   17110:	str	r3, [sp, #12]
   17114:	ldr	r3, [r5]
   17118:	str	lr, [sp, #4]
   1711c:	str	ip, [sp, #8]
   17120:	bl	11044 <__fprintf_chk@plt>
   17124:	b	16fb4 <__assert_fail@plt+0x5eb0>
   17128:	mov	r2, #5
   1712c:	movw	r1, #41208	; 0xa0f8
   17130:	movt	r1, #1
   17134:	mov	r0, #0
   17138:	bl	10ef4 <dcgettext@plt>
   1713c:	ldr	lr, [r5, #4]
   17140:	mov	r2, r0
   17144:	mov	r1, #1
   17148:	mov	r0, r4
   1714c:	ldr	r3, [r5, #8]
   17150:	ldr	ip, [r5, #20]
   17154:	str	lr, [sp]
   17158:	ldr	lr, [r5, #12]
   1715c:	str	ip, [sp, #16]
   17160:	ldr	ip, [r5, #16]
   17164:	str	r3, [sp, #4]
   17168:	ldr	r3, [r5]
   1716c:	str	lr, [sp, #8]
   17170:	str	ip, [sp, #12]
   17174:	bl	11044 <__fprintf_chk@plt>
   17178:	b	16fb4 <__assert_fail@plt+0x5eb0>
   1717c:	mov	r2, #5
   17180:	movw	r1, #41248	; 0xa120
   17184:	movt	r1, #1
   17188:	mov	r0, #0
   1718c:	bl	10ef4 <dcgettext@plt>
   17190:	ldmib	r5, {r3, ip}
   17194:	mov	r2, r0
   17198:	mov	r1, #1
   1719c:	mov	r0, r4
   171a0:	ldr	lr, [r5, #24]
   171a4:	str	r3, [sp]
   171a8:	ldr	r3, [r5, #12]
   171ac:	str	lr, [sp, #20]
   171b0:	ldr	lr, [r5, #20]
   171b4:	str	ip, [sp, #4]
   171b8:	ldr	ip, [r5, #16]
   171bc:	str	r3, [sp, #8]
   171c0:	ldr	r3, [r5]
   171c4:	str	ip, [sp, #12]
   171c8:	str	lr, [sp, #16]
   171cc:	bl	11044 <__fprintf_chk@plt>
   171d0:	b	16fb4 <__assert_fail@plt+0x5eb0>
   171d4:	mov	r2, #5
   171d8:	movw	r1, #41292	; 0xa14c
   171dc:	movt	r1, #1
   171e0:	mov	r0, #0
   171e4:	bl	10ef4 <dcgettext@plt>
   171e8:	ldmib	r5, {ip, lr}
   171ec:	mov	r2, r0
   171f0:	mov	r1, #1
   171f4:	mov	r0, r4
   171f8:	ldr	r3, [r5, #28]
   171fc:	str	ip, [sp]
   17200:	ldr	ip, [r5, #12]
   17204:	str	r3, [sp, #24]
   17208:	ldr	r3, [r5, #24]
   1720c:	str	lr, [sp, #4]
   17210:	ldr	lr, [r5, #16]
   17214:	str	ip, [sp, #8]
   17218:	ldr	ip, [r5, #20]
   1721c:	str	r3, [sp, #20]
   17220:	ldr	r3, [r5]
   17224:	str	lr, [sp, #12]
   17228:	str	ip, [sp, #16]
   1722c:	bl	11044 <__fprintf_chk@plt>
   17230:	b	16fb4 <__assert_fail@plt+0x5eb0>
   17234:	movw	r1, #41392	; 0xa1b0
   17238:	movt	r1, #1
   1723c:	b	16f54 <__assert_fail@plt+0x5e50>
   17240:	strd	r4, [sp, #-12]!
   17244:	str	lr, [sp, #8]
   17248:	sub	sp, sp, #12
   1724c:	ldr	r5, [sp, #24]
   17250:	ldr	ip, [r5]
   17254:	cmp	ip, #0
   17258:	beq	17274 <__assert_fail@plt+0x6170>
   1725c:	mov	lr, r5
   17260:	mov	ip, #0
   17264:	ldr	r4, [lr, #4]!
   17268:	add	ip, ip, #1
   1726c:	cmp	r4, #0
   17270:	bne	17264 <__assert_fail@plt+0x6160>
   17274:	stm	sp, {r5, ip}
   17278:	bl	16e60 <__assert_fail@plt+0x5d5c>
   1727c:	add	sp, sp, #12
   17280:	ldrd	r4, [sp]
   17284:	add	sp, sp, #8
   17288:	pop	{pc}		; (ldr pc, [sp], #4)
   1728c:	push	{lr}		; (str lr, [sp, #-4]!)
   17290:	sub	sp, sp, #52	; 0x34
   17294:	ldr	ip, [sp, #56]	; 0x38
   17298:	ldr	lr, [ip]
   1729c:	cmp	lr, #0
   172a0:	str	lr, [sp, #8]
   172a4:	beq	1733c <__assert_fail@plt+0x6238>
   172a8:	ldr	lr, [ip, #4]
   172ac:	cmp	lr, #0
   172b0:	str	lr, [sp, #12]
   172b4:	beq	17350 <__assert_fail@plt+0x624c>
   172b8:	ldr	lr, [ip, #8]
   172bc:	cmp	lr, #0
   172c0:	str	lr, [sp, #16]
   172c4:	beq	17358 <__assert_fail@plt+0x6254>
   172c8:	ldr	lr, [ip, #12]
   172cc:	cmp	lr, #0
   172d0:	str	lr, [sp, #20]
   172d4:	beq	17360 <__assert_fail@plt+0x625c>
   172d8:	ldr	lr, [ip, #16]
   172dc:	cmp	lr, #0
   172e0:	str	lr, [sp, #24]
   172e4:	beq	17368 <__assert_fail@plt+0x6264>
   172e8:	ldr	lr, [ip, #20]
   172ec:	cmp	lr, #0
   172f0:	str	lr, [sp, #28]
   172f4:	beq	17370 <__assert_fail@plt+0x626c>
   172f8:	ldr	lr, [ip, #24]
   172fc:	cmp	lr, #0
   17300:	str	lr, [sp, #32]
   17304:	beq	17378 <__assert_fail@plt+0x6274>
   17308:	ldr	lr, [ip, #28]
   1730c:	cmp	lr, #0
   17310:	str	lr, [sp, #36]	; 0x24
   17314:	beq	17380 <__assert_fail@plt+0x627c>
   17318:	ldr	lr, [ip, #32]
   1731c:	cmp	lr, #0
   17320:	str	lr, [sp, #40]	; 0x28
   17324:	beq	17388 <__assert_fail@plt+0x6284>
   17328:	ldr	ip, [ip, #36]	; 0x24
   1732c:	cmp	ip, #0
   17330:	str	ip, [sp, #44]	; 0x2c
   17334:	movne	lr, #10
   17338:	moveq	lr, #9
   1733c:	add	ip, sp, #8
   17340:	stm	sp, {ip, lr}
   17344:	bl	16e60 <__assert_fail@plt+0x5d5c>
   17348:	add	sp, sp, #52	; 0x34
   1734c:	pop	{pc}		; (ldr pc, [sp], #4)
   17350:	mov	lr, #1
   17354:	b	1733c <__assert_fail@plt+0x6238>
   17358:	mov	lr, #2
   1735c:	b	1733c <__assert_fail@plt+0x6238>
   17360:	mov	lr, #3
   17364:	b	1733c <__assert_fail@plt+0x6238>
   17368:	mov	lr, #4
   1736c:	b	1733c <__assert_fail@plt+0x6238>
   17370:	mov	lr, #5
   17374:	b	1733c <__assert_fail@plt+0x6238>
   17378:	mov	lr, #6
   1737c:	b	1733c <__assert_fail@plt+0x6238>
   17380:	mov	lr, #7
   17384:	b	1733c <__assert_fail@plt+0x6238>
   17388:	mov	lr, #8
   1738c:	b	1733c <__assert_fail@plt+0x6238>
   17390:	push	{r3}		; (str r3, [sp, #-4]!)
   17394:	push	{lr}		; (str lr, [sp, #-4]!)
   17398:	sub	sp, sp, #56	; 0x38
   1739c:	ldr	ip, [sp, #64]	; 0x40
   173a0:	add	r3, sp, #64	; 0x40
   173a4:	str	r3, [sp, #12]
   173a8:	cmp	ip, #0
   173ac:	str	ip, [sp, #16]
   173b0:	beq	17448 <__assert_fail@plt+0x6344>
   173b4:	ldr	ip, [sp, #68]	; 0x44
   173b8:	cmp	ip, #0
   173bc:	str	ip, [sp, #20]
   173c0:	beq	1746c <__assert_fail@plt+0x6368>
   173c4:	ldr	ip, [sp, #72]	; 0x48
   173c8:	cmp	ip, #0
   173cc:	str	ip, [sp, #24]
   173d0:	beq	17474 <__assert_fail@plt+0x6370>
   173d4:	ldr	ip, [sp, #76]	; 0x4c
   173d8:	cmp	ip, #0
   173dc:	str	ip, [sp, #28]
   173e0:	beq	1747c <__assert_fail@plt+0x6378>
   173e4:	ldr	ip, [sp, #80]	; 0x50
   173e8:	cmp	ip, #0
   173ec:	str	ip, [sp, #32]
   173f0:	beq	17484 <__assert_fail@plt+0x6380>
   173f4:	ldr	ip, [sp, #84]	; 0x54
   173f8:	cmp	ip, #0
   173fc:	str	ip, [sp, #36]	; 0x24
   17400:	beq	1748c <__assert_fail@plt+0x6388>
   17404:	ldr	ip, [sp, #88]	; 0x58
   17408:	cmp	ip, #0
   1740c:	str	ip, [sp, #40]	; 0x28
   17410:	beq	17494 <__assert_fail@plt+0x6390>
   17414:	ldr	ip, [sp, #92]	; 0x5c
   17418:	cmp	ip, #0
   1741c:	str	ip, [sp, #44]	; 0x2c
   17420:	beq	1749c <__assert_fail@plt+0x6398>
   17424:	ldr	ip, [sp, #96]	; 0x60
   17428:	cmp	ip, #0
   1742c:	str	ip, [sp, #48]	; 0x30
   17430:	beq	174a4 <__assert_fail@plt+0x63a0>
   17434:	ldr	r3, [sp, #100]	; 0x64
   17438:	cmp	r3, #0
   1743c:	str	r3, [sp, #52]	; 0x34
   17440:	movne	ip, #10
   17444:	moveq	ip, #9
   17448:	ldr	r3, [sp, #60]	; 0x3c
   1744c:	add	lr, sp, #16
   17450:	str	lr, [sp]
   17454:	str	ip, [sp, #4]
   17458:	bl	16e60 <__assert_fail@plt+0x5d5c>
   1745c:	add	sp, sp, #56	; 0x38
   17460:	pop	{lr}		; (ldr lr, [sp], #4)
   17464:	add	sp, sp, #4
   17468:	bx	lr
   1746c:	mov	ip, #1
   17470:	b	17448 <__assert_fail@plt+0x6344>
   17474:	mov	ip, #2
   17478:	b	17448 <__assert_fail@plt+0x6344>
   1747c:	mov	ip, #3
   17480:	b	17448 <__assert_fail@plt+0x6344>
   17484:	mov	ip, #4
   17488:	b	17448 <__assert_fail@plt+0x6344>
   1748c:	mov	ip, #5
   17490:	b	17448 <__assert_fail@plt+0x6344>
   17494:	mov	ip, #6
   17498:	b	17448 <__assert_fail@plt+0x6344>
   1749c:	mov	ip, #7
   174a0:	b	17448 <__assert_fail@plt+0x6344>
   174a4:	mov	ip, #8
   174a8:	b	17448 <__assert_fail@plt+0x6344>
   174ac:	movw	r3, #45428	; 0xb174
   174b0:	movt	r3, #2
   174b4:	str	r4, [sp, #-8]!
   174b8:	mov	r0, #10
   174bc:	ldr	r1, [r3]
   174c0:	str	lr, [sp, #4]
   174c4:	bl	10ee8 <fputc_unlocked@plt>
   174c8:	mov	r2, #5
   174cc:	movw	r1, #41452	; 0xa1ec
   174d0:	movt	r1, #1
   174d4:	mov	r0, #0
   174d8:	bl	10ef4 <dcgettext@plt>
   174dc:	mov	r1, r0
   174e0:	movw	r2, #41472	; 0xa200
   174e4:	movt	r2, #1
   174e8:	mov	r0, #1
   174ec:	bl	1102c <__printf_chk@plt>
   174f0:	mov	r2, #5
   174f4:	movw	r1, #41496	; 0xa218
   174f8:	movt	r1, #1
   174fc:	mov	r0, #0
   17500:	bl	10ef4 <dcgettext@plt>
   17504:	mov	r1, r0
   17508:	movw	r3, #39964	; 0x9c1c
   1750c:	movt	r3, #1
   17510:	movw	r2, #40004	; 0x9c44
   17514:	movt	r2, #1
   17518:	mov	r0, #1
   1751c:	bl	1102c <__printf_chk@plt>
   17520:	mov	r2, #5
   17524:	movw	r1, #41516	; 0xa22c
   17528:	movt	r1, #1
   1752c:	mov	r0, #0
   17530:	bl	10ef4 <dcgettext@plt>
   17534:	mov	r1, r0
   17538:	movw	r2, #41556	; 0xa254
   1753c:	movt	r2, #1
   17540:	mov	r0, #1
   17544:	ldr	r4, [sp]
   17548:	ldr	lr, [sp, #4]
   1754c:	add	sp, sp, #8
   17550:	b	1102c <__printf_chk@plt>
   17554:	strd	r4, [sp, #-16]!
   17558:	mov	r4, r0
   1755c:	mov	r5, r2
   17560:	str	r6, [sp, #8]
   17564:	mov	r6, r1
   17568:	str	lr, [sp, #12]
   1756c:	bl	19270 <__assert_fail@plt+0x816c>
   17570:	cmp	r0, #0
   17574:	beq	17588 <__assert_fail@plt+0x6484>
   17578:	ldrd	r4, [sp]
   1757c:	ldr	r6, [sp, #8]
   17580:	add	sp, sp, #12
   17584:	pop	{pc}		; (ldr pc, [sp], #4)
   17588:	cmp	r4, #0
   1758c:	beq	1759c <__assert_fail@plt+0x6498>
   17590:	cmp	r6, #0
   17594:	cmpne	r5, #0
   17598:	beq	17578 <__assert_fail@plt+0x6474>
   1759c:	bl	17b58 <__assert_fail@plt+0x6a54>
   175a0:	str	r4, [sp, #-8]!
   175a4:	str	lr, [sp, #4]
   175a8:	bl	1896c <__assert_fail@plt+0x7868>
   175ac:	cmp	r0, #0
   175b0:	beq	175c0 <__assert_fail@plt+0x64bc>
   175b4:	ldr	r4, [sp]
   175b8:	add	sp, sp, #4
   175bc:	pop	{pc}		; (ldr pc, [sp], #4)
   175c0:	bl	17b58 <__assert_fail@plt+0x6a54>
   175c4:	str	r4, [sp, #-8]!
   175c8:	str	lr, [sp, #4]
   175cc:	bl	1896c <__assert_fail@plt+0x7868>
   175d0:	cmp	r0, #0
   175d4:	beq	175e4 <__assert_fail@plt+0x64e0>
   175d8:	ldr	r4, [sp]
   175dc:	add	sp, sp, #4
   175e0:	pop	{pc}		; (ldr pc, [sp], #4)
   175e4:	bl	17b58 <__assert_fail@plt+0x6a54>
   175e8:	str	r4, [sp, #-8]!
   175ec:	str	lr, [sp, #4]
   175f0:	bl	1896c <__assert_fail@plt+0x7868>
   175f4:	cmp	r0, #0
   175f8:	beq	17608 <__assert_fail@plt+0x6504>
   175fc:	ldr	r4, [sp]
   17600:	add	sp, sp, #4
   17604:	pop	{pc}		; (ldr pc, [sp], #4)
   17608:	bl	17b58 <__assert_fail@plt+0x6a54>
   1760c:	strd	r4, [sp, #-16]!
   17610:	mov	r5, r0
   17614:	mov	r4, r1
   17618:	str	r6, [sp, #8]
   1761c:	str	lr, [sp, #12]
   17620:	bl	189a8 <__assert_fail@plt+0x78a4>
   17624:	cmp	r0, #0
   17628:	beq	1763c <__assert_fail@plt+0x6538>
   1762c:	ldrd	r4, [sp]
   17630:	ldr	r6, [sp, #8]
   17634:	add	sp, sp, #12
   17638:	pop	{pc}		; (ldr pc, [sp], #4)
   1763c:	adds	r4, r4, #0
   17640:	movne	r4, #1
   17644:	cmp	r5, #0
   17648:	moveq	r4, #1
   1764c:	cmp	r4, #0
   17650:	beq	1762c <__assert_fail@plt+0x6528>
   17654:	bl	17b58 <__assert_fail@plt+0x6a54>
   17658:	cmp	r1, #0
   1765c:	orreq	r1, r1, #1
   17660:	str	r4, [sp, #-8]!
   17664:	str	lr, [sp, #4]
   17668:	bl	189a8 <__assert_fail@plt+0x78a4>
   1766c:	cmp	r0, #0
   17670:	beq	17680 <__assert_fail@plt+0x657c>
   17674:	ldr	r4, [sp]
   17678:	add	sp, sp, #4
   1767c:	pop	{pc}		; (ldr pc, [sp], #4)
   17680:	bl	17b58 <__assert_fail@plt+0x6a54>
   17684:	strd	r4, [sp, #-16]!
   17688:	mov	r4, r0
   1768c:	mov	r5, r2
   17690:	str	r6, [sp, #8]
   17694:	mov	r6, r1
   17698:	str	lr, [sp, #12]
   1769c:	bl	19270 <__assert_fail@plt+0x816c>
   176a0:	cmp	r0, #0
   176a4:	beq	176b8 <__assert_fail@plt+0x65b4>
   176a8:	ldrd	r4, [sp]
   176ac:	ldr	r6, [sp, #8]
   176b0:	add	sp, sp, #12
   176b4:	pop	{pc}		; (ldr pc, [sp], #4)
   176b8:	cmp	r4, #0
   176bc:	beq	176cc <__assert_fail@plt+0x65c8>
   176c0:	cmp	r6, #0
   176c4:	cmpne	r5, #0
   176c8:	beq	176a8 <__assert_fail@plt+0x65a4>
   176cc:	bl	17b58 <__assert_fail@plt+0x6a54>
   176d0:	cmp	r2, #0
   176d4:	cmpne	r1, #0
   176d8:	str	r4, [sp, #-8]!
   176dc:	moveq	r2, #1
   176e0:	str	lr, [sp, #4]
   176e4:	moveq	r1, r2
   176e8:	bl	19270 <__assert_fail@plt+0x816c>
   176ec:	cmp	r0, #0
   176f0:	beq	17700 <__assert_fail@plt+0x65fc>
   176f4:	ldr	r4, [sp]
   176f8:	add	sp, sp, #4
   176fc:	pop	{pc}		; (ldr pc, [sp], #4)
   17700:	bl	17b58 <__assert_fail@plt+0x6a54>
   17704:	mov	r2, r1
   17708:	mov	r1, r0
   1770c:	str	r4, [sp, #-8]!
   17710:	mov	r0, #0
   17714:	str	lr, [sp, #4]
   17718:	bl	19270 <__assert_fail@plt+0x816c>
   1771c:	cmp	r0, #0
   17720:	beq	17730 <__assert_fail@plt+0x662c>
   17724:	ldr	r4, [sp]
   17728:	add	sp, sp, #4
   1772c:	pop	{pc}		; (ldr pc, [sp], #4)
   17730:	bl	17b58 <__assert_fail@plt+0x6a54>
   17734:	cmp	r1, #0
   17738:	cmpne	r0, #0
   1773c:	str	r4, [sp, #-8]!
   17740:	moveq	r2, #1
   17744:	movne	r2, r1
   17748:	str	lr, [sp, #4]
   1774c:	movne	r1, r0
   17750:	moveq	r1, r2
   17754:	mov	r0, #0
   17758:	bl	19270 <__assert_fail@plt+0x816c>
   1775c:	cmp	r0, #0
   17760:	beq	17770 <__assert_fail@plt+0x666c>
   17764:	ldr	r4, [sp]
   17768:	add	sp, sp, #4
   1776c:	pop	{pc}		; (ldr pc, [sp], #4)
   17770:	bl	17b58 <__assert_fail@plt+0x6a54>
   17774:	cmp	r0, #0
   17778:	strd	r4, [sp, #-16]!
   1777c:	mov	r5, r1
   17780:	ldr	r4, [r1]
   17784:	str	r6, [sp, #8]
   17788:	str	lr, [sp, #12]
   1778c:	beq	177d4 <__assert_fail@plt+0x66d0>
   17790:	lsr	r3, r4, #1
   17794:	add	r3, r3, #1
   17798:	adds	r4, r4, r3
   1779c:	bcs	177d0 <__assert_fail@plt+0x66cc>
   177a0:	mov	r2, #1
   177a4:	mov	r1, r4
   177a8:	bl	19270 <__assert_fail@plt+0x816c>
   177ac:	cmp	r0, #0
   177b0:	beq	177c8 <__assert_fail@plt+0x66c4>
   177b4:	ldr	r6, [sp, #8]
   177b8:	str	r4, [r5]
   177bc:	ldrd	r4, [sp]
   177c0:	add	sp, sp, #12
   177c4:	pop	{pc}		; (ldr pc, [sp], #4)
   177c8:	cmp	r4, #0
   177cc:	beq	177b4 <__assert_fail@plt+0x66b0>
   177d0:	bl	17b58 <__assert_fail@plt+0x6a54>
   177d4:	cmp	r4, #0
   177d8:	mov	r2, #1
   177dc:	moveq	r4, #64	; 0x40
   177e0:	mov	r1, r4
   177e4:	bl	19270 <__assert_fail@plt+0x816c>
   177e8:	cmp	r0, #0
   177ec:	bne	177b4 <__assert_fail@plt+0x66b0>
   177f0:	b	177d0 <__assert_fail@plt+0x66cc>
   177f4:	cmp	r0, #0
   177f8:	strd	r4, [sp, #-16]!
   177fc:	mov	r5, r1
   17800:	ldr	r4, [r1]
   17804:	str	r6, [sp, #8]
   17808:	mov	r6, r2
   1780c:	str	lr, [sp, #12]
   17810:	beq	17858 <__assert_fail@plt+0x6754>
   17814:	lsr	r3, r4, #1
   17818:	add	r3, r3, #1
   1781c:	adds	r4, r4, r3
   17820:	bcs	17854 <__assert_fail@plt+0x6750>
   17824:	mov	r1, r4
   17828:	bl	19270 <__assert_fail@plt+0x816c>
   1782c:	cmp	r0, #0
   17830:	beq	17848 <__assert_fail@plt+0x6744>
   17834:	ldr	r6, [sp, #8]
   17838:	str	r4, [r5]
   1783c:	ldrd	r4, [sp]
   17840:	add	sp, sp, #12
   17844:	pop	{pc}		; (ldr pc, [sp], #4)
   17848:	cmp	r4, #0
   1784c:	cmpne	r6, #0
   17850:	beq	17834 <__assert_fail@plt+0x6730>
   17854:	bl	17b58 <__assert_fail@plt+0x6a54>
   17858:	cmp	r4, #0
   1785c:	bne	17870 <__assert_fail@plt+0x676c>
   17860:	mov	r4, #64	; 0x40
   17864:	udiv	r4, r4, r2
   17868:	cmp	r2, #64	; 0x40
   1786c:	addhi	r4, r4, #1
   17870:	mov	r2, r6
   17874:	mov	r1, r4
   17878:	mov	r0, #0
   1787c:	bl	19270 <__assert_fail@plt+0x816c>
   17880:	cmp	r0, #0
   17884:	bne	17834 <__assert_fail@plt+0x6730>
   17888:	b	17854 <__assert_fail@plt+0x6750>
   1788c:	ldr	ip, [r1]
   17890:	strd	r4, [sp, #-24]!	; 0xffffffe8
   17894:	strd	r6, [sp, #8]
   17898:	mov	r7, r1
   1789c:	mov	r6, r0
   178a0:	str	r8, [sp, #16]
   178a4:	mvn	r8, r3
   178a8:	lsr	r8, r8, #31
   178ac:	str	lr, [sp, #20]
   178b0:	asr	r1, ip, #1
   178b4:	ldr	lr, [sp, #24]
   178b8:	adds	r4, ip, r1
   178bc:	mvnvs	r4, #-2147483648	; 0x80000000
   178c0:	cmp	r3, r4
   178c4:	movge	r1, #0
   178c8:	andlt	r1, r8, #1
   178cc:	cmp	r1, #0
   178d0:	movne	r4, r3
   178d4:	smull	r0, r1, r4, lr
   178d8:	cmp	r1, r0, asr #31
   178dc:	bne	1798c <__assert_fail@plt+0x6888>
   178e0:	cmp	r0, #63	; 0x3f
   178e4:	mov	r5, r0
   178e8:	ble	17958 <__assert_fail@plt+0x6854>
   178ec:	cmp	r6, #0
   178f0:	sub	r1, r4, ip
   178f4:	streq	r6, [r7]
   178f8:	cmp	r1, r2
   178fc:	bge	1792c <__assert_fail@plt+0x6828>
   17900:	adds	r4, ip, r2
   17904:	bvs	17988 <__assert_fail@plt+0x6884>
   17908:	cmp	r4, r3
   1790c:	movle	r3, #0
   17910:	andgt	r3, r8, #1
   17914:	cmp	r3, #0
   17918:	bne	17988 <__assert_fail@plt+0x6884>
   1791c:	smull	r0, r1, r4, lr
   17920:	cmp	r1, r0, asr #31
   17924:	mov	r5, r0
   17928:	bne	17988 <__assert_fail@plt+0x6884>
   1792c:	mov	r1, r5
   17930:	mov	r0, r6
   17934:	bl	189a8 <__assert_fail@plt+0x78a4>
   17938:	cmp	r0, #0
   1793c:	beq	1796c <__assert_fail@plt+0x6868>
   17940:	ldr	r8, [sp, #16]
   17944:	str	r4, [r7]
   17948:	ldrd	r4, [sp]
   1794c:	ldrd	r6, [sp, #8]
   17950:	add	sp, sp, #20
   17954:	pop	{pc}		; (ldr pc, [sp], #4)
   17958:	mov	r0, #64	; 0x40
   1795c:	sdiv	r4, r0, lr
   17960:	mls	r5, lr, r4, r0
   17964:	sub	r5, r0, r5
   17968:	b	178ec <__assert_fail@plt+0x67e8>
   1796c:	adds	r5, r5, #0
   17970:	movne	r5, #1
   17974:	cmp	r6, #0
   17978:	movne	r6, r5
   1797c:	moveq	r6, #1
   17980:	cmp	r6, #0
   17984:	beq	17940 <__assert_fail@plt+0x683c>
   17988:	bl	17b58 <__assert_fail@plt+0x6a54>
   1798c:	mvn	r0, #-2147483648	; 0x80000000
   17990:	b	1795c <__assert_fail@plt+0x6858>
   17994:	mov	r1, #1
   17998:	str	r4, [sp, #-8]!
   1799c:	str	lr, [sp, #4]
   179a0:	bl	188f8 <__assert_fail@plt+0x77f4>
   179a4:	cmp	r0, #0
   179a8:	beq	179b8 <__assert_fail@plt+0x68b4>
   179ac:	ldr	r4, [sp]
   179b0:	add	sp, sp, #4
   179b4:	pop	{pc}		; (ldr pc, [sp], #4)
   179b8:	bl	17b58 <__assert_fail@plt+0x6a54>
   179bc:	mov	r1, #1
   179c0:	str	r4, [sp, #-8]!
   179c4:	str	lr, [sp, #4]
   179c8:	bl	188f8 <__assert_fail@plt+0x77f4>
   179cc:	cmp	r0, #0
   179d0:	beq	179e0 <__assert_fail@plt+0x68dc>
   179d4:	ldr	r4, [sp]
   179d8:	add	sp, sp, #4
   179dc:	pop	{pc}		; (ldr pc, [sp], #4)
   179e0:	bl	17b58 <__assert_fail@plt+0x6a54>
   179e4:	str	r4, [sp, #-8]!
   179e8:	str	lr, [sp, #4]
   179ec:	bl	188f8 <__assert_fail@plt+0x77f4>
   179f0:	cmp	r0, #0
   179f4:	beq	17a04 <__assert_fail@plt+0x6900>
   179f8:	ldr	r4, [sp]
   179fc:	add	sp, sp, #4
   17a00:	pop	{pc}		; (ldr pc, [sp], #4)
   17a04:	bl	17b58 <__assert_fail@plt+0x6a54>
   17a08:	str	r4, [sp, #-8]!
   17a0c:	str	lr, [sp, #4]
   17a10:	bl	188f8 <__assert_fail@plt+0x77f4>
   17a14:	cmp	r0, #0
   17a18:	beq	17a28 <__assert_fail@plt+0x6924>
   17a1c:	ldr	r4, [sp]
   17a20:	add	sp, sp, #4
   17a24:	pop	{pc}		; (ldr pc, [sp], #4)
   17a28:	bl	17b58 <__assert_fail@plt+0x6a54>
   17a2c:	strd	r4, [sp, #-16]!
   17a30:	mov	r4, r1
   17a34:	str	r6, [sp, #8]
   17a38:	mov	r6, r0
   17a3c:	mov	r0, r1
   17a40:	str	lr, [sp, #12]
   17a44:	bl	1896c <__assert_fail@plt+0x7868>
   17a48:	subs	r5, r0, #0
   17a4c:	beq	17a70 <__assert_fail@plt+0x696c>
   17a50:	mov	r2, r4
   17a54:	mov	r1, r6
   17a58:	bl	10eb8 <memcpy@plt>
   17a5c:	mov	r0, r5
   17a60:	ldrd	r4, [sp]
   17a64:	ldr	r6, [sp, #8]
   17a68:	add	sp, sp, #12
   17a6c:	pop	{pc}		; (ldr pc, [sp], #4)
   17a70:	bl	17b58 <__assert_fail@plt+0x6a54>
   17a74:	strd	r4, [sp, #-16]!
   17a78:	mov	r4, r1
   17a7c:	str	r6, [sp, #8]
   17a80:	mov	r6, r0
   17a84:	mov	r0, r1
   17a88:	str	lr, [sp, #12]
   17a8c:	bl	1896c <__assert_fail@plt+0x7868>
   17a90:	subs	r5, r0, #0
   17a94:	beq	17ab8 <__assert_fail@plt+0x69b4>
   17a98:	mov	r2, r4
   17a9c:	mov	r1, r6
   17aa0:	bl	10eb8 <memcpy@plt>
   17aa4:	mov	r0, r5
   17aa8:	ldrd	r4, [sp]
   17aac:	ldr	r6, [sp, #8]
   17ab0:	add	sp, sp, #12
   17ab4:	pop	{pc}		; (ldr pc, [sp], #4)
   17ab8:	bl	17b58 <__assert_fail@plt+0x6a54>
   17abc:	strd	r4, [sp, #-16]!
   17ac0:	mov	r4, r1
   17ac4:	str	r6, [sp, #8]
   17ac8:	mov	r6, r0
   17acc:	add	r0, r1, #1
   17ad0:	str	lr, [sp, #12]
   17ad4:	bl	1896c <__assert_fail@plt+0x7868>
   17ad8:	subs	r5, r0, #0
   17adc:	beq	17b08 <__assert_fail@plt+0x6a04>
   17ae0:	mov	r3, #0
   17ae4:	mov	r1, r6
   17ae8:	mov	r2, r4
   17aec:	strb	r3, [r5, r4]
   17af0:	bl	10eb8 <memcpy@plt>
   17af4:	mov	r0, r5
   17af8:	ldrd	r4, [sp]
   17afc:	ldr	r6, [sp, #8]
   17b00:	add	sp, sp, #12
   17b04:	pop	{pc}		; (ldr pc, [sp], #4)
   17b08:	bl	17b58 <__assert_fail@plt+0x6a54>
   17b0c:	strd	r4, [sp, #-16]!
   17b10:	str	r6, [sp, #8]
   17b14:	mov	r6, r0
   17b18:	str	lr, [sp, #12]
   17b1c:	bl	10fd8 <strlen@plt>
   17b20:	add	r4, r0, #1
   17b24:	mov	r0, r4
   17b28:	bl	1896c <__assert_fail@plt+0x7868>
   17b2c:	subs	r5, r0, #0
   17b30:	beq	17b54 <__assert_fail@plt+0x6a50>
   17b34:	mov	r2, r4
   17b38:	mov	r1, r6
   17b3c:	bl	10eb8 <memcpy@plt>
   17b40:	mov	r0, r5
   17b44:	ldrd	r4, [sp]
   17b48:	ldr	r6, [sp, #8]
   17b4c:	add	sp, sp, #12
   17b50:	pop	{pc}		; (ldr pc, [sp], #4)
   17b54:	bl	17b58 <__assert_fail@plt+0x6a54>
   17b58:	movw	r3, #45324	; 0xb10c
   17b5c:	movt	r3, #2
   17b60:	str	r4, [sp, #-8]!
   17b64:	ldr	r4, [r3]
   17b68:	mov	r2, #5
   17b6c:	movw	r1, #41636	; 0xa2a4
   17b70:	movt	r1, #1
   17b74:	mov	r0, #0
   17b78:	str	lr, [sp, #4]
   17b7c:	bl	10ef4 <dcgettext@plt>
   17b80:	mov	r3, r0
   17b84:	movw	r2, #40424	; 0x9de8
   17b88:	movt	r2, #1
   17b8c:	mov	r1, #0
   17b90:	mov	r0, r4
   17b94:	bl	10f6c <error@plt>
   17b98:	bl	110ec <abort@plt>
   17b9c:	cmp	r2, #36	; 0x24
   17ba0:	strd	r4, [sp, #-36]!	; 0xffffffdc
   17ba4:	strd	r6, [sp, #8]
   17ba8:	strd	r8, [sp, #16]
   17bac:	strd	sl, [sp, #24]
   17bb0:	str	lr, [sp, #32]
   17bb4:	sub	sp, sp, #36	; 0x24
   17bb8:	bhi	18830 <__assert_fail@plt+0x772c>
   17bbc:	cmp	r1, #0
   17bc0:	mov	r6, r2
   17bc4:	mov	r5, r1
   17bc8:	mov	sl, r0
   17bcc:	addeq	r5, sp, #28
   17bd0:	mov	r9, r3
   17bd4:	bl	10ff0 <__errno_location@plt>
   17bd8:	mov	r3, #0
   17bdc:	mov	fp, r0
   17be0:	str	r3, [r0]
   17be4:	ldrb	r4, [sl]
   17be8:	bl	10fc0 <__ctype_b_loc@plt>
   17bec:	ldr	r2, [r0]
   17bf0:	lsl	r3, r4, #1
   17bf4:	ldrh	r3, [r2, r3]
   17bf8:	tst	r3, #8192	; 0x2000
   17bfc:	beq	17c18 <__assert_fail@plt+0x6b14>
   17c00:	mov	r3, sl
   17c04:	ldrb	r4, [r3, #1]!
   17c08:	lsl	r1, r4, #1
   17c0c:	ldrh	r1, [r2, r1]
   17c10:	tst	r1, #8192	; 0x2000
   17c14:	bne	17c04 <__assert_fail@plt+0x6b00>
   17c18:	cmp	r4, #45	; 0x2d
   17c1c:	beq	17cb8 <__assert_fail@plt+0x6bb4>
   17c20:	mov	r2, r6
   17c24:	mov	r3, #0
   17c28:	mov	r1, r5
   17c2c:	mov	r0, sl
   17c30:	bl	10ec4 <__strtoull_internal@plt>
   17c34:	ldr	r8, [r5]
   17c38:	mov	r6, r0
   17c3c:	mov	r7, r1
   17c40:	cmp	r8, sl
   17c44:	beq	17ca0 <__assert_fail@plt+0x6b9c>
   17c48:	ldr	r4, [fp]
   17c4c:	cmp	r4, #0
   17c50:	bne	17c90 <__assert_fail@plt+0x6b8c>
   17c54:	ldr	r3, [sp, #72]	; 0x48
   17c58:	cmp	r3, #0
   17c5c:	beq	17c6c <__assert_fail@plt+0x6b68>
   17c60:	ldrb	sl, [r8]
   17c64:	cmp	sl, #0
   17c68:	bne	18024 <__assert_fail@plt+0x6f20>
   17c6c:	strd	r6, [r9]
   17c70:	mov	r0, r4
   17c74:	add	sp, sp, #36	; 0x24
   17c78:	ldrd	r4, [sp]
   17c7c:	ldrd	r6, [sp, #8]
   17c80:	ldrd	r8, [sp, #16]
   17c84:	ldrd	sl, [sp, #24]
   17c88:	add	sp, sp, #32
   17c8c:	pop	{pc}		; (ldr pc, [sp], #4)
   17c90:	cmp	r4, #34	; 0x22
   17c94:	bne	17cb8 <__assert_fail@plt+0x6bb4>
   17c98:	mov	r4, #1
   17c9c:	b	17c54 <__assert_fail@plt+0x6b50>
   17ca0:	ldr	r3, [sp, #72]	; 0x48
   17ca4:	cmp	r3, #0
   17ca8:	beq	17cb8 <__assert_fail@plt+0x6bb4>
   17cac:	ldrb	sl, [sl]
   17cb0:	cmp	sl, #0
   17cb4:	bne	17cc0 <__assert_fail@plt+0x6bbc>
   17cb8:	mov	r4, #4
   17cbc:	b	17c70 <__assert_fail@plt+0x6b6c>
   17cc0:	mov	r1, sl
   17cc4:	mov	r0, r3
   17cc8:	bl	10fe4 <strchr@plt>
   17ccc:	cmp	r0, #0
   17cd0:	movne	r4, #0
   17cd4:	movne	r6, #1
   17cd8:	movne	r7, r4
   17cdc:	beq	17cb8 <__assert_fail@plt+0x6bb4>
   17ce0:	sub	r3, sl, #69	; 0x45
   17ce4:	cmp	r3, #47	; 0x2f
   17ce8:	ldrls	pc, [pc, r3, lsl #2]
   17cec:	b	17df4 <__assert_fail@plt+0x6cf0>
   17cf0:			; <UNDEFINED> instruction: 0x00017db0
   17cf4:	strdeq	r7, [r1], -r4
   17cf8:			; <UNDEFINED> instruction: 0x00017db0
   17cfc:	strdeq	r7, [r1], -r4
   17d00:	strdeq	r7, [r1], -r4
   17d04:	strdeq	r7, [r1], -r4
   17d08:			; <UNDEFINED> instruction: 0x00017db0
   17d0c:	strdeq	r7, [r1], -r4
   17d10:			; <UNDEFINED> instruction: 0x00017db0
   17d14:	strdeq	r7, [r1], -r4
   17d18:	strdeq	r7, [r1], -r4
   17d1c:			; <UNDEFINED> instruction: 0x00017db0
   17d20:	strdeq	r7, [r1], -r4
   17d24:	strdeq	r7, [r1], -r4
   17d28:	strdeq	r7, [r1], -r4
   17d2c:			; <UNDEFINED> instruction: 0x00017db0
   17d30:	strdeq	r7, [r1], -r4
   17d34:	strdeq	r7, [r1], -r4
   17d38:	strdeq	r7, [r1], -r4
   17d3c:	strdeq	r7, [r1], -r4
   17d40:			; <UNDEFINED> instruction: 0x00017db0
   17d44:			; <UNDEFINED> instruction: 0x00017db0
   17d48:	strdeq	r7, [r1], -r4
   17d4c:	strdeq	r7, [r1], -r4
   17d50:	strdeq	r7, [r1], -r4
   17d54:	strdeq	r7, [r1], -r4
   17d58:	strdeq	r7, [r1], -r4
   17d5c:	strdeq	r7, [r1], -r4
   17d60:	strdeq	r7, [r1], -r4
   17d64:	strdeq	r7, [r1], -r4
   17d68:	strdeq	r7, [r1], -r4
   17d6c:	strdeq	r7, [r1], -r4
   17d70:	strdeq	r7, [r1], -r4
   17d74:	strdeq	r7, [r1], -r4
   17d78:			; <UNDEFINED> instruction: 0x00017db0
   17d7c:	strdeq	r7, [r1], -r4
   17d80:	strdeq	r7, [r1], -r4
   17d84:	strdeq	r7, [r1], -r4
   17d88:			; <UNDEFINED> instruction: 0x00017db0
   17d8c:	strdeq	r7, [r1], -r4
   17d90:			; <UNDEFINED> instruction: 0x00017db0
   17d94:	strdeq	r7, [r1], -r4
   17d98:	strdeq	r7, [r1], -r4
   17d9c:	strdeq	r7, [r1], -r4
   17da0:	strdeq	r7, [r1], -r4
   17da4:	strdeq	r7, [r1], -r4
   17da8:	strdeq	r7, [r1], -r4
   17dac:			; <UNDEFINED> instruction: 0x00017db0
   17db0:	mov	r1, #48	; 0x30
   17db4:	ldr	r0, [sp, #72]	; 0x48
   17db8:	bl	10fe4 <strchr@plt>
   17dbc:	cmp	r0, #0
   17dc0:	beq	17df4 <__assert_fail@plt+0x6cf0>
   17dc4:	ldrb	r3, [r8, #1]
   17dc8:	cmp	r3, #68	; 0x44
   17dcc:	beq	18384 <__assert_fail@plt+0x7280>
   17dd0:	cmp	r3, #105	; 0x69
   17dd4:	beq	1803c <__assert_fail@plt+0x6f38>
   17dd8:	cmp	r3, #66	; 0x42
   17ddc:	moveq	r3, #2
   17de0:	movne	r3, #1
   17de4:	moveq	ip, #1000	; 0x3e8
   17de8:	movne	ip, #1024	; 0x400
   17dec:	str	r3, [sp, #12]
   17df0:	b	17e00 <__assert_fail@plt+0x6cfc>
   17df4:	mov	r3, #1
   17df8:	mov	ip, #1024	; 0x400
   17dfc:	str	r3, [sp, #12]
   17e00:	sub	sl, sl, #66	; 0x42
   17e04:	cmp	sl, #53	; 0x35
   17e08:	ldrls	pc, [pc, sl, lsl #2]
   17e0c:	b	17fe8 <__assert_fail@plt+0x6ee4>
   17e10:	ldrdeq	r8, [r1], -r0
   17e14:	andeq	r7, r1, r8, ror #31
   17e18:	andeq	r7, r1, r8, ror #31
   17e1c:	andeq	r8, r1, r0, ror r2
   17e20:	andeq	r7, r1, r8, ror #31
   17e24:	andeq	r8, r1, ip, ror #5
   17e28:	andeq	r7, r1, r8, ror #31
   17e2c:	andeq	r7, r1, r8, ror #31
   17e30:	andeq	r7, r1, r8, ror #31
   17e34:	strdeq	r7, [r1], -r0
   17e38:	andeq	r7, r1, r8, ror #31
   17e3c:	andeq	r8, r1, r8, lsl r2
   17e40:	andeq	r7, r1, r8, ror #31
   17e44:	andeq	r7, r1, r8, ror #31
   17e48:			; <UNDEFINED> instruction: 0x000181bc
   17e4c:	andeq	r7, r1, r8, ror #31
   17e50:	andeq	r7, r1, r8, ror #31
   17e54:	andeq	r7, r1, r8, ror #31
   17e58:	andeq	r8, r1, ip, asr r1
   17e5c:	andeq	r7, r1, r8, ror #31
   17e60:	andeq	r7, r1, r8, ror #31
   17e64:	andeq	r7, r1, r8, ror #31
   17e68:	andeq	r7, r1, r8, ror #31
   17e6c:	muleq	r1, r0, r0
   17e70:	andeq	r7, r1, r8, ror #29
   17e74:	andeq	r7, r1, r8, ror #31
   17e78:	andeq	r7, r1, r8, ror #31
   17e7c:	andeq	r7, r1, r8, ror #31
   17e80:	andeq	r7, r1, r8, ror #31
   17e84:	andeq	r7, r1, r8, ror #31
   17e88:	andeq	r7, r1, r8, ror #31
   17e8c:	andeq	r7, r1, r8, ror #31
   17e90:	andeq	r8, r1, r0, ror r0
   17e94:	ldrdeq	r7, [r1], -r0
   17e98:	andeq	r7, r1, r8, ror #31
   17e9c:	andeq	r7, r1, r8, ror #31
   17ea0:	andeq	r7, r1, r8, ror #31
   17ea4:	andeq	r8, r1, ip, ror #5
   17ea8:	andeq	r7, r1, r8, ror #31
   17eac:	andeq	r7, r1, r8, ror #31
   17eb0:	andeq	r7, r1, r8, ror #31
   17eb4:	strdeq	r7, [r1], -r0
   17eb8:	andeq	r7, r1, r8, ror #31
   17ebc:	andeq	r8, r1, r8, lsl r2
   17ec0:	andeq	r7, r1, r8, ror #31
   17ec4:	andeq	r7, r1, r8, ror #31
   17ec8:	andeq	r7, r1, r8, ror #31
   17ecc:	andeq	r7, r1, r8, ror #31
   17ed0:	andeq	r7, r1, r8, ror #31
   17ed4:	andeq	r7, r1, r8, ror #31
   17ed8:	andeq	r8, r1, ip, asr r1
   17edc:	andeq	r7, r1, r8, ror #31
   17ee0:	andeq	r7, r1, r8, ror #31
   17ee4:	andeq	r8, r1, r8, asr r0
   17ee8:	asr	r3, ip, #31
   17eec:	mov	r2, ip
   17ef0:	cmp	r7, #0
   17ef4:	mov	r1, #0
   17ef8:	strd	r2, [sp]
   17efc:	bne	1843c <__assert_fail@plt+0x7338>
   17f00:	umull	r6, r7, r6, ip
   17f04:	mov	r2, r6
   17f08:	mov	r3, r7
   17f0c:	cmp	r1, #0
   17f10:	bne	18350 <__assert_fail@plt+0x724c>
   17f14:	cmp	r3, #0
   17f18:	mov	lr, r1
   17f1c:	bne	18568 <__assert_fail@plt+0x7464>
   17f20:	umull	r2, r3, r2, ip
   17f24:	mov	r0, r2
   17f28:	mov	r1, r3
   17f2c:	cmp	lr, #0
   17f30:	bne	18350 <__assert_fail@plt+0x724c>
   17f34:	cmp	r1, #0
   17f38:	bne	18544 <__assert_fail@plt+0x7440>
   17f3c:	umull	r0, r1, r0, ip
   17f40:	mov	r2, r0
   17f44:	mov	r3, r1
   17f48:	cmp	lr, #0
   17f4c:	bne	18350 <__assert_fail@plt+0x724c>
   17f50:	cmp	r3, #0
   17f54:	bne	181f4 <__assert_fail@plt+0x70f0>
   17f58:	umull	r2, r3, r2, ip
   17f5c:	mov	r0, r2
   17f60:	mov	r1, r3
   17f64:	cmp	lr, #0
   17f68:	bne	18350 <__assert_fail@plt+0x724c>
   17f6c:	cmp	r1, #0
   17f70:	bne	183f4 <__assert_fail@plt+0x72f0>
   17f74:	umull	r0, r1, r0, ip
   17f78:	mov	r2, r0
   17f7c:	mov	r3, r1
   17f80:	cmp	lr, #0
   17f84:	bne	18350 <__assert_fail@plt+0x724c>
   17f88:	cmp	r3, #0
   17f8c:	mov	r7, lr
   17f90:	bne	183d0 <__assert_fail@plt+0x72cc>
   17f94:	umull	r2, r3, r2, ip
   17f98:	mov	r6, r2
   17f9c:	mov	lr, r3
   17fa0:	cmp	r7, #0
   17fa4:	bne	18350 <__assert_fail@plt+0x724c>
   17fa8:	cmp	lr, #0
   17fac:	bne	18394 <__assert_fail@plt+0x7290>
   17fb0:	umull	r2, r3, r6, ip
   17fb4:	mov	r0, r2
   17fb8:	mov	r2, r3
   17fbc:	subs	r3, r7, #0
   17fc0:	bne	18350 <__assert_fail@plt+0x724c>
   17fc4:	mov	r6, r0
   17fc8:	mov	r7, r2
   17fcc:	orr	r4, r4, r3
   17fd0:	ldr	r2, [sp, #12]
   17fd4:	add	r3, r8, r2
   17fd8:	str	r3, [r5]
   17fdc:	ldrb	r3, [r8, r2]
   17fe0:	cmp	r3, #0
   17fe4:	beq	17c6c <__assert_fail@plt+0x6b68>
   17fe8:	orr	r4, r4, #2
   17fec:	b	17c6c <__assert_fail@plt+0x6b68>
   17ff0:	cmp	r7, #0
   17ff4:	asr	r1, ip, #31
   17ff8:	mov	lr, #0
   17ffc:	bne	18360 <__assert_fail@plt+0x725c>
   18000:	umull	r2, r3, r6, ip
   18004:	mov	r6, r2
   18008:	mov	r7, r3
   1800c:	cmp	lr, #0
   18010:	beq	17fd0 <__assert_fail@plt+0x6ecc>
   18014:	mvn	r6, #0
   18018:	mov	r4, #1
   1801c:	mov	r7, r6
   18020:	b	17fd0 <__assert_fail@plt+0x6ecc>
   18024:	mov	r0, r3
   18028:	mov	r1, sl
   1802c:	bl	10fe4 <strchr@plt>
   18030:	cmp	r0, #0
   18034:	bne	17ce0 <__assert_fail@plt+0x6bdc>
   18038:	b	17fe8 <__assert_fail@plt+0x6ee4>
   1803c:	ldrb	r3, [r8, #2]
   18040:	mov	ip, #1024	; 0x400
   18044:	cmp	r3, #66	; 0x42
   18048:	movne	r3, #1
   1804c:	moveq	r3, #3
   18050:	str	r3, [sp, #12]
   18054:	b	17e00 <__assert_fail@plt+0x6cfc>
   18058:	lsr	r3, r7, #31
   1805c:	adds	r6, r6, r6
   18060:	adc	r7, r7, r7
   18064:	cmp	r3, #0
   18068:	beq	17fd0 <__assert_fail@plt+0x6ecc>
   1806c:	b	18014 <__assert_fail@plt+0x6f10>
   18070:	lsr	r3, r7, #23
   18074:	lsl	r7, r7, #9
   18078:	cmp	r3, #0
   1807c:	lsl	r3, r6, #9
   18080:	orr	r7, r7, r6, lsr #23
   18084:	bne	18014 <__assert_fail@plt+0x6f10>
   18088:	mov	r6, r3
   1808c:	b	17fd0 <__assert_fail@plt+0x6ecc>
   18090:	asr	r3, ip, #31
   18094:	mov	r2, ip
   18098:	cmp	r7, #0
   1809c:	mov	r1, #0
   180a0:	strd	r2, [sp]
   180a4:	bne	184b0 <__assert_fail@plt+0x73ac>
   180a8:	umull	r6, r7, r6, ip
   180ac:	mov	r0, r6
   180b0:	mov	fp, r7
   180b4:	cmp	r1, #0
   180b8:	bne	18350 <__assert_fail@plt+0x724c>
   180bc:	cmp	fp, #0
   180c0:	mov	lr, r1
   180c4:	bne	18640 <__assert_fail@plt+0x753c>
   180c8:	umull	r0, r1, r0, ip
   180cc:	mov	r2, r0
   180d0:	mov	r3, r1
   180d4:	cmp	lr, #0
   180d8:	bne	18350 <__assert_fail@plt+0x724c>
   180dc:	cmp	r3, #0
   180e0:	bne	18668 <__assert_fail@plt+0x7564>
   180e4:	umull	r2, r3, r2, ip
   180e8:	mov	r0, r2
   180ec:	mov	r1, r3
   180f0:	cmp	lr, #0
   180f4:	bne	18350 <__assert_fail@plt+0x724c>
   180f8:	cmp	r1, #0
   180fc:	bne	185e8 <__assert_fail@plt+0x74e4>
   18100:	umull	r0, r1, r0, ip
   18104:	mov	r2, r0
   18108:	mov	r3, r1
   1810c:	cmp	lr, #0
   18110:	bne	18350 <__assert_fail@plt+0x724c>
   18114:	cmp	r3, #0
   18118:	bne	18418 <__assert_fail@plt+0x7314>
   1811c:	umull	r2, r3, r2, ip
   18120:	mov	r0, r2
   18124:	mov	r1, r3
   18128:	cmp	lr, #0
   1812c:	bne	18350 <__assert_fail@plt+0x724c>
   18130:	cmp	r1, #0
   18134:	beq	17f74 <__assert_fail@plt+0x6e70>
   18138:	umull	r6, r7, r0, ip
   1813c:	mov	fp, lr
   18140:	mov	sl, r7
   18144:	umlal	sl, fp, r1, ip
   18148:	cmp	fp, #0
   1814c:	bne	18850 <__assert_fail@plt+0x774c>
   18150:	mov	r2, r6
   18154:	mov	r3, sl
   18158:	b	17f80 <__assert_fail@plt+0x6e7c>
   1815c:	asr	r3, ip, #31
   18160:	mov	r2, ip
   18164:	cmp	r7, #0
   18168:	mov	r1, #0
   1816c:	strd	r2, [sp]
   18170:	bne	184d4 <__assert_fail@plt+0x73d0>
   18174:	umull	r6, r7, r6, ip
   18178:	mov	r0, r6
   1817c:	mov	fp, r7
   18180:	cmp	r1, #0
   18184:	bne	18350 <__assert_fail@plt+0x724c>
   18188:	cmp	fp, #0
   1818c:	mov	lr, r1
   18190:	beq	17f74 <__assert_fail@plt+0x6e70>
   18194:	umull	r6, r7, r0, ip
   18198:	mov	r3, r1
   1819c:	mov	r2, r7
   181a0:	umlal	r2, r3, fp, ip
   181a4:	cmp	r3, #0
   181a8:	strd	r2, [sp, #16]
   181ac:	bne	18734 <__assert_fail@plt+0x7630>
   181b0:	mov	r2, r6
   181b4:	ldr	r3, [sp, #16]
   181b8:	b	17f80 <__assert_fail@plt+0x6e7c>
   181bc:	asr	r3, ip, #31
   181c0:	mov	r2, ip
   181c4:	cmp	r7, #0
   181c8:	mov	r1, #0
   181cc:	strd	r2, [sp]
   181d0:	bne	1851c <__assert_fail@plt+0x7418>
   181d4:	umull	r6, r7, r6, ip
   181d8:	mov	r2, r6
   181dc:	mov	r3, r7
   181e0:	cmp	r1, #0
   181e4:	bne	18350 <__assert_fail@plt+0x724c>
   181e8:	cmp	r3, #0
   181ec:	mov	lr, r1
   181f0:	beq	17f58 <__assert_fail@plt+0x6e54>
   181f4:	umull	r6, r7, r2, ip
   181f8:	mov	fp, lr
   181fc:	mov	sl, r7
   18200:	umlal	sl, fp, r3, ip
   18204:	cmp	fp, #0
   18208:	bne	18814 <__assert_fail@plt+0x7710>
   1820c:	mov	r0, r6
   18210:	mov	r1, sl
   18214:	b	17f64 <__assert_fail@plt+0x6e60>
   18218:	asr	r3, ip, #31
   1821c:	mov	r2, ip
   18220:	cmp	r7, #0
   18224:	mov	r1, #0
   18228:	strd	r2, [sp]
   1822c:	bne	184f8 <__assert_fail@plt+0x73f4>
   18230:	umull	r6, r7, r6, ip
   18234:	mov	sl, r6
   18238:	mov	lr, r7
   1823c:	cmp	r1, #0
   18240:	bne	18014 <__assert_fail@plt+0x6f10>
   18244:	cmp	lr, #0
   18248:	mov	r7, r1
   1824c:	bne	1860c <__assert_fail@plt+0x7508>
   18250:	umull	sl, fp, sl, ip
   18254:	mov	r0, sl
   18258:	mov	r2, fp
   1825c:	cmp	r7, #0
   18260:	mov	r6, r0
   18264:	mov	r7, r2
   18268:	beq	17fd0 <__assert_fail@plt+0x6ecc>
   1826c:	b	18014 <__assert_fail@plt+0x6f10>
   18270:	asr	r3, ip, #31
   18274:	mov	r2, ip
   18278:	cmp	r7, #0
   1827c:	mov	r1, #0
   18280:	strd	r2, [sp]
   18284:	bne	1848c <__assert_fail@plt+0x7388>
   18288:	umull	r6, r7, r6, ip
   1828c:	mov	r0, r6
   18290:	mov	fp, r7
   18294:	cmp	r1, #0
   18298:	bne	18350 <__assert_fail@plt+0x724c>
   1829c:	cmp	fp, #0
   182a0:	mov	lr, r1
   182a4:	beq	18100 <__assert_fail@plt+0x6ffc>
   182a8:	umull	r6, r7, r0, ip
   182ac:	mov	r3, r1
   182b0:	mov	r2, r7
   182b4:	umlal	r2, r3, fp, ip
   182b8:	cmp	r3, #0
   182bc:	strd	r2, [sp, #16]
   182c0:	bne	187a4 <__assert_fail@plt+0x76a0>
   182c4:	mov	r2, r6
   182c8:	ldr	r3, [sp, #16]
   182cc:	b	1810c <__assert_fail@plt+0x7008>
   182d0:	lsr	r3, r7, #22
   182d4:	lsl	r7, r7, #10
   182d8:	cmp	r3, #0
   182dc:	lsl	r3, r6, #10
   182e0:	orr	r7, r7, r6, lsr #22
   182e4:	beq	18088 <__assert_fail@plt+0x6f84>
   182e8:	b	18014 <__assert_fail@plt+0x6f10>
   182ec:	asr	r3, ip, #31
   182f0:	mov	r2, ip
   182f4:	cmp	r7, #0
   182f8:	mov	r1, #0
   182fc:	strd	r2, [sp]
   18300:	bne	18464 <__assert_fail@plt+0x7360>
   18304:	umull	r6, r7, r6, ip
   18308:	mov	r2, r6
   1830c:	mov	r3, r7
   18310:	cmp	r1, #0
   18314:	bne	18014 <__assert_fail@plt+0x6f10>
   18318:	cmp	r3, #0
   1831c:	mov	r7, r1
   18320:	bne	185c8 <__assert_fail@plt+0x74c4>
   18324:	umull	r2, r3, r2, ip
   18328:	mov	r6, r2
   1832c:	mov	lr, r3
   18330:	cmp	r7, #0
   18334:	bne	18014 <__assert_fail@plt+0x6f10>
   18338:	cmp	lr, #0
   1833c:	bne	1858c <__assert_fail@plt+0x7488>
   18340:	umull	r2, r3, r6, ip
   18344:	mov	r0, r2
   18348:	mov	r2, r3
   1834c:	b	1825c <__assert_fail@plt+0x7158>
   18350:	mvn	r6, #0
   18354:	mov	r3, #1
   18358:	mov	r7, r6
   1835c:	b	17fcc <__assert_fail@plt+0x6ec8>
   18360:	umull	sl, fp, r6, ip
   18364:	mov	r3, lr
   18368:	mov	r2, fp
   1836c:	umlal	r2, r3, r7, ip
   18370:	cmp	r3, #0
   18374:	bne	1876c <__assert_fail@plt+0x7668>
   18378:	mov	r6, sl
   1837c:	mov	r7, r2
   18380:	b	1800c <__assert_fail@plt+0x6f08>
   18384:	mov	r3, #2
   18388:	mov	ip, #1000	; 0x3e8
   1838c:	str	r3, [sp, #12]
   18390:	b	17e00 <__assert_fail@plt+0x6cfc>
   18394:	umull	r0, r1, r6, ip
   18398:	mov	r3, r7
   1839c:	mov	r2, r1
   183a0:	strd	r0, [sp, #16]
   183a4:	umlal	r2, r3, lr, ip
   183a8:	cmp	r3, #0
   183ac:	beq	17fbc <__assert_fail@plt+0x6eb8>
   183b0:	ldrd	sl, [sp]
   183b4:	mov	r7, #1
   183b8:	ldr	r0, [sp, #16]
   183bc:	ldr	r3, [sp, #20]
   183c0:	mul	r2, r6, fp
   183c4:	mla	r2, lr, sl, r2
   183c8:	add	r2, r2, r3
   183cc:	b	17fbc <__assert_fail@plt+0x6eb8>
   183d0:	umull	sl, fp, r2, ip
   183d4:	mov	r1, lr
   183d8:	mov	r0, fp
   183dc:	umlal	r0, r1, r3, ip
   183e0:	cmp	r1, #0
   183e4:	bne	186c4 <__assert_fail@plt+0x75c0>
   183e8:	mov	r6, sl
   183ec:	mov	lr, r0
   183f0:	b	17fa0 <__assert_fail@plt+0x6e9c>
   183f4:	umull	sl, fp, r0, ip
   183f8:	mov	r7, lr
   183fc:	mov	r6, fp
   18400:	umlal	r6, r7, r1, ip
   18404:	cmp	r7, #0
   18408:	bne	1886c <__assert_fail@plt+0x7768>
   1840c:	mov	r2, sl
   18410:	mov	r3, r6
   18414:	b	17f80 <__assert_fail@plt+0x6e7c>
   18418:	umull	sl, fp, r2, ip
   1841c:	mov	r7, lr
   18420:	mov	r6, fp
   18424:	umlal	r6, r7, r3, ip
   18428:	cmp	r7, #0
   1842c:	bne	186fc <__assert_fail@plt+0x75f8>
   18430:	mov	r0, sl
   18434:	mov	r1, r6
   18438:	b	18128 <__assert_fail@plt+0x7024>
   1843c:	umull	sl, fp, r6, ip
   18440:	mov	r3, r1
   18444:	mov	r2, fp
   18448:	umlal	r2, r3, r7, ip
   1844c:	cmp	r3, #0
   18450:	strd	r2, [sp, #16]
   18454:	bne	186e0 <__assert_fail@plt+0x75dc>
   18458:	mov	r2, sl
   1845c:	ldr	r3, [sp, #16]
   18460:	b	17f0c <__assert_fail@plt+0x6e08>
   18464:	umull	sl, fp, r6, ip
   18468:	mov	r3, r1
   1846c:	mov	r2, fp
   18470:	umlal	r2, r3, r7, ip
   18474:	cmp	r3, #0
   18478:	strd	r2, [sp, #16]
   1847c:	bne	187c0 <__assert_fail@plt+0x76bc>
   18480:	mov	r2, sl
   18484:	ldr	r3, [sp, #16]
   18488:	b	18310 <__assert_fail@plt+0x720c>
   1848c:	umull	sl, fp, r6, ip
   18490:	mov	r3, r1
   18494:	mov	r2, fp
   18498:	umlal	r2, r3, r7, ip
   1849c:	cmp	r3, #0
   184a0:	bne	1868c <__assert_fail@plt+0x7588>
   184a4:	mov	r0, sl
   184a8:	mov	fp, r2
   184ac:	b	18294 <__assert_fail@plt+0x7190>
   184b0:	umull	sl, fp, r6, ip
   184b4:	mov	r3, r1
   184b8:	mov	r2, fp
   184bc:	umlal	r2, r3, r7, ip
   184c0:	cmp	r3, #0
   184c4:	bne	18750 <__assert_fail@plt+0x764c>
   184c8:	mov	r0, sl
   184cc:	mov	fp, r2
   184d0:	b	180b4 <__assert_fail@plt+0x6fb0>
   184d4:	umull	sl, fp, r6, ip
   184d8:	mov	r3, r1
   184dc:	mov	r2, fp
   184e0:	umlal	r2, r3, r7, ip
   184e4:	cmp	r3, #0
   184e8:	bne	187dc <__assert_fail@plt+0x76d8>
   184ec:	mov	r0, sl
   184f0:	mov	fp, r2
   184f4:	b	18180 <__assert_fail@plt+0x707c>
   184f8:	umull	sl, fp, r6, ip
   184fc:	mov	r3, r1
   18500:	mov	r2, fp
   18504:	strd	sl, [sp, #16]
   18508:	umlal	r2, r3, r7, ip
   1850c:	cmp	r3, #0
   18510:	bne	18784 <__assert_fail@plt+0x7680>
   18514:	mov	lr, r2
   18518:	b	1823c <__assert_fail@plt+0x7138>
   1851c:	umull	sl, fp, r6, ip
   18520:	mov	r3, r1
   18524:	mov	r2, fp
   18528:	umlal	r2, r3, r7, ip
   1852c:	cmp	r3, #0
   18530:	strd	r2, [sp, #16]
   18534:	bne	18888 <__assert_fail@plt+0x7784>
   18538:	mov	r2, sl
   1853c:	ldr	r3, [sp, #16]
   18540:	b	181e0 <__assert_fail@plt+0x70dc>
   18544:	umull	sl, fp, r0, ip
   18548:	mov	r7, lr
   1854c:	mov	r6, fp
   18550:	umlal	r6, r7, r1, ip
   18554:	cmp	r7, #0
   18558:	bne	188a4 <__assert_fail@plt+0x77a0>
   1855c:	mov	r2, sl
   18560:	mov	r3, r6
   18564:	b	17f48 <__assert_fail@plt+0x6e44>
   18568:	umull	r6, r7, r2, ip
   1856c:	mov	fp, r1
   18570:	mov	sl, r7
   18574:	umlal	sl, fp, r3, ip
   18578:	cmp	fp, #0
   1857c:	bne	18718 <__assert_fail@plt+0x7614>
   18580:	mov	r0, r6
   18584:	mov	r1, sl
   18588:	b	17f2c <__assert_fail@plt+0x6e28>
   1858c:	umull	r0, r1, r6, ip
   18590:	mov	r3, r7
   18594:	mov	r2, r1
   18598:	strd	r0, [sp, #16]
   1859c:	umlal	r2, r3, lr, ip
   185a0:	cmp	r3, #0
   185a4:	beq	1825c <__assert_fail@plt+0x7158>
   185a8:	ldrd	sl, [sp]
   185ac:	mov	r7, #1
   185b0:	ldr	r0, [sp, #16]
   185b4:	ldr	r3, [sp, #20]
   185b8:	mul	r2, r6, fp
   185bc:	mla	r2, lr, sl, r2
   185c0:	add	r2, r2, r3
   185c4:	b	1825c <__assert_fail@plt+0x7158>
   185c8:	umull	sl, fp, r2, ip
   185cc:	mov	r0, fp
   185d0:	umlal	r0, r1, r3, ip
   185d4:	cmp	r1, #0
   185d8:	bne	188c0 <__assert_fail@plt+0x77bc>
   185dc:	mov	r6, sl
   185e0:	mov	lr, r0
   185e4:	b	18330 <__assert_fail@plt+0x722c>
   185e8:	umull	r6, r7, r0, ip
   185ec:	mov	fp, lr
   185f0:	mov	sl, r7
   185f4:	umlal	sl, fp, r1, ip
   185f8:	cmp	fp, #0
   185fc:	bne	187f8 <__assert_fail@plt+0x76f4>
   18600:	mov	r2, r6
   18604:	mov	r3, sl
   18608:	b	1810c <__assert_fail@plt+0x7008>
   1860c:	umull	r0, r1, sl, ip
   18610:	mov	r3, r7
   18614:	mov	r2, r1
   18618:	umlal	r2, r3, lr, ip
   1861c:	cmp	r3, #0
   18620:	beq	1825c <__assert_fail@plt+0x7158>
   18624:	ldr	r3, [sp, #4]
   18628:	mov	r7, #1
   1862c:	mul	r2, sl, r3
   18630:	ldr	r3, [sp]
   18634:	mla	r2, lr, r3, r2
   18638:	add	r2, r2, r1
   1863c:	b	1825c <__assert_fail@plt+0x7158>
   18640:	umull	r6, r7, r0, ip
   18644:	mov	r3, r1
   18648:	mov	r2, r7
   1864c:	umlal	r2, r3, fp, ip
   18650:	cmp	r3, #0
   18654:	strd	r2, [sp, #16]
   18658:	bne	188dc <__assert_fail@plt+0x77d8>
   1865c:	mov	r2, r6
   18660:	ldr	r3, [sp, #16]
   18664:	b	180d4 <__assert_fail@plt+0x6fd0>
   18668:	umull	sl, fp, r2, ip
   1866c:	mov	r7, lr
   18670:	mov	r6, fp
   18674:	umlal	r6, r7, r3, ip
   18678:	cmp	r7, #0
   1867c:	bne	186a8 <__assert_fail@plt+0x75a4>
   18680:	mov	r0, sl
   18684:	mov	r1, r6
   18688:	b	180f0 <__assert_fail@plt+0x6fec>
   1868c:	ldrd	r2, [sp]
   18690:	mov	r0, sl
   18694:	mov	r1, #1
   18698:	mul	r6, r6, r3
   1869c:	mla	r7, r2, r7, r6
   186a0:	add	fp, r7, fp
   186a4:	b	18294 <__assert_fail@plt+0x7190>
   186a8:	ldrd	r6, [sp]
   186ac:	mov	r0, sl
   186b0:	mov	lr, #1
   186b4:	mul	r2, r2, r7
   186b8:	mla	r1, r3, r6, r2
   186bc:	add	r1, r1, fp
   186c0:	b	180f0 <__assert_fail@plt+0x6fec>
   186c4:	ldrd	r0, [sp]
   186c8:	mov	r6, sl
   186cc:	mov	r7, #1
   186d0:	mul	r2, r2, r1
   186d4:	mla	lr, r3, r0, r2
   186d8:	add	lr, lr, fp
   186dc:	b	17fa0 <__assert_fail@plt+0x6e9c>
   186e0:	ldm	sp, {r0, r3}
   186e4:	mov	r2, sl
   186e8:	mov	r1, #1
   186ec:	mul	r3, r6, r3
   186f0:	mla	r3, r0, r7, r3
   186f4:	add	r3, r3, fp
   186f8:	b	17f0c <__assert_fail@plt+0x6e08>
   186fc:	ldrd	r6, [sp]
   18700:	mov	r0, sl
   18704:	mov	lr, #1
   18708:	mul	r2, r2, r7
   1870c:	mla	r1, r3, r6, r2
   18710:	add	r1, r1, fp
   18714:	b	18128 <__assert_fail@plt+0x7024>
   18718:	ldrd	sl, [sp]
   1871c:	mov	r0, r6
   18720:	mov	lr, #1
   18724:	mul	r2, r2, fp
   18728:	mla	r1, r3, sl, r2
   1872c:	add	r1, r1, r7
   18730:	b	17f2c <__assert_fail@plt+0x6e28>
   18734:	ldm	sp, {r1, r3}
   18738:	mov	r2, r6
   1873c:	mov	lr, #1
   18740:	mul	r3, r0, r3
   18744:	mla	r3, fp, r1, r3
   18748:	add	r3, r3, r7
   1874c:	b	17f80 <__assert_fail@plt+0x6e7c>
   18750:	ldrd	r2, [sp]
   18754:	mov	r0, sl
   18758:	mov	r1, #1
   1875c:	mul	r6, r6, r3
   18760:	mla	r7, r2, r7, r6
   18764:	add	fp, r7, fp
   18768:	b	180b4 <__assert_fail@plt+0x6fb0>
   1876c:	mul	r3, r6, r1
   18770:	mov	lr, #1
   18774:	mov	r6, sl
   18778:	mla	r7, ip, r7, r3
   1877c:	add	r7, r7, fp
   18780:	b	1800c <__assert_fail@plt+0x6f08>
   18784:	ldrd	r2, [sp]
   18788:	mov	r1, #1
   1878c:	ldr	sl, [sp, #16]
   18790:	mul	lr, r6, r3
   18794:	ldr	r3, [sp, #20]
   18798:	mla	lr, r2, r7, lr
   1879c:	add	lr, lr, r3
   187a0:	b	1823c <__assert_fail@plt+0x7138>
   187a4:	ldm	sp, {r1, r3}
   187a8:	mov	r2, r6
   187ac:	mov	lr, #1
   187b0:	mul	r3, r0, r3
   187b4:	mla	r3, fp, r1, r3
   187b8:	add	r3, r3, r7
   187bc:	b	1810c <__assert_fail@plt+0x7008>
   187c0:	ldm	sp, {r0, r3}
   187c4:	mov	r2, sl
   187c8:	mov	r1, #1
   187cc:	mul	r3, r6, r3
   187d0:	mla	r3, r0, r7, r3
   187d4:	add	r3, r3, fp
   187d8:	b	18310 <__assert_fail@plt+0x720c>
   187dc:	ldrd	r2, [sp]
   187e0:	mov	r0, sl
   187e4:	mov	r1, #1
   187e8:	mul	r6, r6, r3
   187ec:	mla	r7, r2, r7, r6
   187f0:	add	fp, r7, fp
   187f4:	b	18180 <__assert_fail@plt+0x707c>
   187f8:	ldrd	sl, [sp]
   187fc:	mov	r2, r6
   18800:	mov	lr, #1
   18804:	mul	r3, r0, fp
   18808:	mla	r3, r1, sl, r3
   1880c:	add	r3, r3, r7
   18810:	b	1810c <__assert_fail@plt+0x7008>
   18814:	ldrd	sl, [sp]
   18818:	mov	r0, r6
   1881c:	mov	lr, #1
   18820:	mul	r2, r2, fp
   18824:	mla	r1, r3, sl, r2
   18828:	add	r1, r1, r7
   1882c:	b	17f64 <__assert_fail@plt+0x6e60>
   18830:	movw	r3, #41656	; 0xa2b8
   18834:	movt	r3, #1
   18838:	movw	r1, #41668	; 0xa2c4
   1883c:	movt	r1, #1
   18840:	movw	r0, #41684	; 0xa2d4
   18844:	movt	r0, #1
   18848:	mov	r2, #85	; 0x55
   1884c:	bl	11104 <__assert_fail@plt>
   18850:	ldrd	sl, [sp]
   18854:	mov	r2, r6
   18858:	mov	lr, #1
   1885c:	mul	r3, r0, fp
   18860:	mla	r3, r1, sl, r3
   18864:	add	r3, r3, r7
   18868:	b	17f80 <__assert_fail@plt+0x6e7c>
   1886c:	ldrd	r6, [sp]
   18870:	mov	r2, sl
   18874:	mov	lr, #1
   18878:	mul	r3, r0, r7
   1887c:	mla	r3, r1, r6, r3
   18880:	add	r3, r3, fp
   18884:	b	17f80 <__assert_fail@plt+0x6e7c>
   18888:	ldm	sp, {r0, r3}
   1888c:	mov	r2, sl
   18890:	mov	r1, #1
   18894:	mul	r3, r6, r3
   18898:	mla	r3, r0, r7, r3
   1889c:	add	r3, r3, fp
   188a0:	b	181e0 <__assert_fail@plt+0x70dc>
   188a4:	ldrd	r6, [sp]
   188a8:	mov	r2, sl
   188ac:	mov	lr, #1
   188b0:	mul	r3, r0, r7
   188b4:	mla	r3, r1, r6, r3
   188b8:	add	r3, r3, fp
   188bc:	b	17f48 <__assert_fail@plt+0x6e44>
   188c0:	ldrd	r0, [sp]
   188c4:	mov	r6, sl
   188c8:	mov	r7, #1
   188cc:	mul	r2, r2, r1
   188d0:	mla	lr, r3, r0, r2
   188d4:	add	lr, lr, fp
   188d8:	b	18330 <__assert_fail@plt+0x722c>
   188dc:	ldm	sp, {r1, r3}
   188e0:	mov	r2, r6
   188e4:	mov	lr, #1
   188e8:	mul	r3, r0, r3
   188ec:	mla	r3, fp, r1, r3
   188f0:	add	r3, r3, r7
   188f4:	b	180d4 <__assert_fail@plt+0x6fd0>
   188f8:	cmp	r1, #0
   188fc:	cmpne	r0, #0
   18900:	beq	1894c <__assert_fail@plt+0x7848>
   18904:	strd	r4, [sp, #-16]!
   18908:	umull	r4, r5, r0, r1
   1890c:	str	r6, [sp, #8]
   18910:	str	lr, [sp, #12]
   18914:	adds	r3, r5, #0
   18918:	movne	r3, #1
   1891c:	cmp	r4, #0
   18920:	blt	1892c <__assert_fail@plt+0x7828>
   18924:	cmp	r3, #0
   18928:	beq	18958 <__assert_fail@plt+0x7854>
   1892c:	bl	10ff0 <__errno_location@plt>
   18930:	mov	r3, #12
   18934:	ldrd	r4, [sp]
   18938:	ldr	r6, [sp, #8]
   1893c:	add	sp, sp, #12
   18940:	str	r3, [r0]
   18944:	mov	r0, #0
   18948:	pop	{pc}		; (ldr pc, [sp], #4)
   1894c:	mov	r1, #1
   18950:	mov	r0, r1
   18954:	b	10e4c <calloc@plt>
   18958:	ldrd	r4, [sp]
   1895c:	ldr	r6, [sp, #8]
   18960:	ldr	lr, [sp, #12]
   18964:	add	sp, sp, #16
   18968:	b	10e4c <calloc@plt>
   1896c:	cmp	r0, #0
   18970:	beq	1897c <__assert_fail@plt+0x7878>
   18974:	blt	18984 <__assert_fail@plt+0x7880>
   18978:	b	10f84 <malloc@plt>
   1897c:	mov	r0, #1
   18980:	b	10f84 <malloc@plt>
   18984:	str	r4, [sp, #-8]!
   18988:	str	lr, [sp, #4]
   1898c:	bl	10ff0 <__errno_location@plt>
   18990:	mov	r3, #12
   18994:	ldr	r4, [sp]
   18998:	add	sp, sp, #4
   1899c:	str	r3, [r0]
   189a0:	mov	r0, #0
   189a4:	pop	{pc}		; (ldr pc, [sp], #4)
   189a8:	cmp	r0, #0
   189ac:	beq	189d4 <__assert_fail@plt+0x78d0>
   189b0:	cmp	r1, #0
   189b4:	str	r4, [sp, #-8]!
   189b8:	str	lr, [sp, #4]
   189bc:	beq	189dc <__assert_fail@plt+0x78d8>
   189c0:	blt	189f0 <__assert_fail@plt+0x78ec>
   189c4:	ldr	r4, [sp]
   189c8:	ldr	lr, [sp, #4]
   189cc:	add	sp, sp, #8
   189d0:	b	10f00 <realloc@plt>
   189d4:	mov	r0, r1
   189d8:	b	1896c <__assert_fail@plt+0x7868>
   189dc:	bl	12140 <__assert_fail@plt+0x103c>
   189e0:	ldr	r4, [sp]
   189e4:	add	sp, sp, #4
   189e8:	mov	r0, #0
   189ec:	pop	{pc}		; (ldr pc, [sp], #4)
   189f0:	bl	10ff0 <__errno_location@plt>
   189f4:	mov	r3, #12
   189f8:	str	r3, [r0]
   189fc:	b	189e0 <__assert_fail@plt+0x78dc>
   18a00:	mov	r0, #1
   18a04:	b	11ac0 <__assert_fail@plt+0x9bc>
   18a08:	strd	r4, [sp, #-36]!	; 0xffffffdc
   18a0c:	mov	r4, r1
   18a10:	strd	r6, [sp, #8]
   18a14:	mov	r6, r2
   18a18:	strd	r8, [sp, #16]
   18a1c:	mov	r8, r3
   18a20:	strd	sl, [sp, #24]
   18a24:	mov	sl, r0
   18a28:	str	lr, [sp, #32]
   18a2c:	sub	sp, sp, #12
   18a30:	str	r2, [sp]
   18a34:	bl	10fd8 <strlen@plt>
   18a38:	ldr	fp, [r4]
   18a3c:	cmp	fp, #0
   18a40:	beq	18b50 <__assert_fail@plt+0x7a4c>
   18a44:	cmp	r6, #0
   18a48:	mov	r7, r0
   18a4c:	beq	18afc <__assert_fail@plt+0x79f8>
   18a50:	mov	r5, #0
   18a54:	mvn	r9, #0
   18a58:	str	r5, [sp, #4]
   18a5c:	mov	r2, r7
   18a60:	mov	r1, sl
   18a64:	mov	r0, fp
   18a68:	bl	110e0 <strncmp@plt>
   18a6c:	cmp	r0, #0
   18a70:	mov	r0, fp
   18a74:	bne	18ab4 <__assert_fail@plt+0x79b0>
   18a78:	bl	10fd8 <strlen@plt>
   18a7c:	ldr	r3, [sp]
   18a80:	cmp	r0, r7
   18a84:	mov	r2, r8
   18a88:	mov	r1, r6
   18a8c:	mla	r0, r8, r9, r3
   18a90:	beq	18af4 <__assert_fail@plt+0x79f0>
   18a94:	cmn	r9, #1
   18a98:	moveq	r9, r5
   18a9c:	beq	18ab4 <__assert_fail@plt+0x79b0>
   18aa0:	bl	10edc <memcmp@plt>
   18aa4:	ldr	r3, [sp, #4]
   18aa8:	cmp	r0, #0
   18aac:	movne	r3, #1
   18ab0:	str	r3, [sp, #4]
   18ab4:	ldr	fp, [r4, #4]!
   18ab8:	add	r5, r5, #1
   18abc:	add	r6, r6, r8
   18ac0:	cmp	fp, #0
   18ac4:	bne	18a5c <__assert_fail@plt+0x7958>
   18ac8:	ldr	r3, [sp, #4]
   18acc:	cmp	r3, #0
   18ad0:	mvnne	r9, #1
   18ad4:	mov	r0, r9
   18ad8:	add	sp, sp, #12
   18adc:	ldrd	r4, [sp]
   18ae0:	ldrd	r6, [sp, #8]
   18ae4:	ldrd	r8, [sp, #16]
   18ae8:	ldrd	sl, [sp, #24]
   18aec:	add	sp, sp, #32
   18af0:	pop	{pc}		; (ldr pc, [sp], #4)
   18af4:	mov	r9, r5
   18af8:	b	18ad4 <__assert_fail@plt+0x79d0>
   18afc:	mov	r5, r6
   18b00:	mvn	r9, #0
   18b04:	mov	r2, r7
   18b08:	mov	r1, sl
   18b0c:	mov	r0, fp
   18b10:	bl	110e0 <strncmp@plt>
   18b14:	cmp	r0, #0
   18b18:	mov	r0, fp
   18b1c:	bne	18b38 <__assert_fail@plt+0x7a34>
   18b20:	bl	10fd8 <strlen@plt>
   18b24:	cmp	r0, r7
   18b28:	beq	18af4 <__assert_fail@plt+0x79f0>
   18b2c:	cmn	r9, #1
   18b30:	moveq	r9, r5
   18b34:	movne	r6, #1
   18b38:	ldr	fp, [r4, #4]!
   18b3c:	add	r5, r5, #1
   18b40:	cmp	fp, #0
   18b44:	bne	18b04 <__assert_fail@plt+0x7a00>
   18b48:	str	r6, [sp, #4]
   18b4c:	b	18ac8 <__assert_fail@plt+0x79c4>
   18b50:	mvn	r9, #0
   18b54:	b	18ad4 <__assert_fail@plt+0x79d0>
   18b58:	strd	r4, [sp, #-16]!
   18b5c:	str	r6, [sp, #8]
   18b60:	mov	r6, r0
   18b64:	ldr	r0, [r1]
   18b68:	str	lr, [sp, #12]
   18b6c:	cmp	r0, #0
   18b70:	beq	18bb4 <__assert_fail@plt+0x7ab0>
   18b74:	mov	r4, r1
   18b78:	mov	r5, #0
   18b7c:	b	18b90 <__assert_fail@plt+0x7a8c>
   18b80:	ldr	r0, [r4, #4]!
   18b84:	add	r5, r5, #1
   18b88:	cmp	r0, #0
   18b8c:	beq	18bb4 <__assert_fail@plt+0x7ab0>
   18b90:	mov	r1, r6
   18b94:	bl	10e70 <strcmp@plt>
   18b98:	cmp	r0, #0
   18b9c:	bne	18b80 <__assert_fail@plt+0x7a7c>
   18ba0:	mov	r0, r5
   18ba4:	ldrd	r4, [sp]
   18ba8:	ldr	r6, [sp, #8]
   18bac:	add	sp, sp, #12
   18bb0:	pop	{pc}		; (ldr pc, [sp], #4)
   18bb4:	ldrd	r4, [sp]
   18bb8:	mvn	r0, #0
   18bbc:	ldr	r6, [sp, #8]
   18bc0:	add	sp, sp, #12
   18bc4:	pop	{pc}		; (ldr pc, [sp], #4)
   18bc8:	cmn	r2, #1
   18bcc:	strd	r4, [sp, #-16]!
   18bd0:	mov	r5, r1
   18bd4:	movweq	r1, #41724	; 0xa2fc
   18bd8:	movwne	r1, #41752	; 0xa318
   18bdc:	str	r6, [sp, #8]
   18be0:	movteq	r1, #1
   18be4:	movtne	r1, #1
   18be8:	str	lr, [sp, #12]
   18bec:	mov	r6, r0
   18bf0:	sub	sp, sp, #8
   18bf4:	mov	r2, #5
   18bf8:	mov	r0, #0
   18bfc:	bl	10ef4 <dcgettext@plt>
   18c00:	mov	r4, r0
   18c04:	mov	r2, r5
   18c08:	mov	r1, #8
   18c0c:	mov	r0, #0
   18c10:	bl	158b8 <__assert_fail@plt+0x47b4>
   18c14:	mov	r5, r0
   18c18:	mov	r1, r6
   18c1c:	mov	r0, #1
   18c20:	bl	16cb0 <__assert_fail@plt+0x5bac>
   18c24:	mov	r1, #0
   18c28:	mov	r3, r5
   18c2c:	str	r0, [sp]
   18c30:	mov	r2, r4
   18c34:	mov	r0, r1
   18c38:	bl	10f6c <error@plt>
   18c3c:	add	sp, sp, #8
   18c40:	ldrd	r4, [sp]
   18c44:	ldr	r6, [sp, #8]
   18c48:	add	sp, sp, #12
   18c4c:	pop	{pc}		; (ldr pc, [sp], #4)
   18c50:	strd	r4, [sp, #-36]!	; 0xffffffdc
   18c54:	mov	r4, r1
   18c58:	movw	r1, #41784	; 0xa338
   18c5c:	movt	r1, #1
   18c60:	strd	r6, [sp, #8]
   18c64:	mov	r6, r0
   18c68:	mov	r7, r2
   18c6c:	mov	r0, #0
   18c70:	strd	r8, [sp, #16]
   18c74:	mov	r2, #5
   18c78:	strd	sl, [sp, #24]
   18c7c:	movw	sl, #45416	; 0xb168
   18c80:	movt	sl, #2
   18c84:	str	lr, [sp, #32]
   18c88:	sub	sp, sp, #12
   18c8c:	bl	10ef4 <dcgettext@plt>
   18c90:	ldr	r1, [sl]
   18c94:	bl	10e58 <fputs_unlocked@plt>
   18c98:	ldr	fp, [r6]
   18c9c:	cmp	fp, #0
   18ca0:	beq	18d40 <__assert_fail@plt+0x7c3c>
   18ca4:	movw	r3, #41808	; 0xa350
   18ca8:	movt	r3, #1
   18cac:	mov	r9, #0
   18cb0:	str	r3, [sp]
   18cb4:	movw	r3, #41816	; 0xa358
   18cb8:	movt	r3, #1
   18cbc:	mov	r5, r9
   18cc0:	str	r3, [sp, #4]
   18cc4:	b	18cfc <__assert_fail@plt+0x7bf8>
   18cc8:	mov	r0, fp
   18ccc:	mov	r9, r4
   18cd0:	bl	16cc0 <__assert_fail@plt+0x5bbc>
   18cd4:	mov	r3, r0
   18cd8:	mov	r1, #1
   18cdc:	ldr	r2, [sp]
   18ce0:	mov	r0, r8
   18ce4:	bl	11044 <__fprintf_chk@plt>
   18ce8:	ldr	fp, [r6, #4]!
   18cec:	add	r5, r5, #1
   18cf0:	add	r4, r4, r7
   18cf4:	cmp	fp, #0
   18cf8:	beq	18d40 <__assert_fail@plt+0x7c3c>
   18cfc:	cmp	r5, #0
   18d00:	mov	r1, r4
   18d04:	ldr	r8, [sl]
   18d08:	mov	r2, r7
   18d0c:	mov	r0, r9
   18d10:	beq	18cc8 <__assert_fail@plt+0x7bc4>
   18d14:	bl	10edc <memcmp@plt>
   18d18:	cmp	r0, #0
   18d1c:	bne	18cc8 <__assert_fail@plt+0x7bc4>
   18d20:	mov	r0, fp
   18d24:	bl	16cc0 <__assert_fail@plt+0x5bbc>
   18d28:	mov	r3, r0
   18d2c:	mov	r1, #1
   18d30:	ldr	r2, [sp, #4]
   18d34:	mov	r0, r8
   18d38:	bl	11044 <__fprintf_chk@plt>
   18d3c:	b	18ce8 <__assert_fail@plt+0x7be4>
   18d40:	ldr	r0, [sl]
   18d44:	ldr	r3, [r0, #20]
   18d48:	ldr	r2, [r0, #24]
   18d4c:	cmp	r3, r2
   18d50:	bcs	18d80 <__assert_fail@plt+0x7c7c>
   18d54:	add	r1, r3, #1
   18d58:	mov	r2, #10
   18d5c:	str	r1, [r0, #20]
   18d60:	strb	r2, [r3]
   18d64:	add	sp, sp, #12
   18d68:	ldrd	r4, [sp]
   18d6c:	ldrd	r6, [sp, #8]
   18d70:	ldrd	r8, [sp, #16]
   18d74:	ldrd	sl, [sp, #24]
   18d78:	add	sp, sp, #32
   18d7c:	pop	{pc}		; (ldr pc, [sp], #4)
   18d80:	mov	r1, #10
   18d84:	add	sp, sp, #12
   18d88:	ldrd	r4, [sp]
   18d8c:	ldrd	r6, [sp, #8]
   18d90:	ldrd	r8, [sp, #16]
   18d94:	ldrd	sl, [sp, #24]
   18d98:	ldr	lr, [sp, #32]
   18d9c:	add	sp, sp, #36	; 0x24
   18da0:	b	11074 <__overflow@plt>
   18da4:	strd	r4, [sp, #-28]!	; 0xffffffe4
   18da8:	mov	r5, r1
   18dac:	strd	r6, [sp, #8]
   18db0:	mov	r6, r2
   18db4:	mov	r7, r3
   18db8:	strd	r8, [sp, #16]
   18dbc:	mov	r8, r0
   18dc0:	str	lr, [sp, #24]
   18dc4:	sub	sp, sp, #12
   18dc8:	ldrb	r4, [sp, #48]	; 0x30
   18dcc:	cmp	r4, #0
   18dd0:	bne	18e7c <__assert_fail@plt+0x7d78>
   18dd4:	ldr	r0, [r2]
   18dd8:	cmp	r0, #0
   18ddc:	movne	r9, r2
   18de0:	bne	18e64 <__assert_fail@plt+0x7d60>
   18de4:	movw	r1, #41724	; 0xa2fc
   18de8:	movt	r1, #1
   18dec:	mov	r2, #5
   18df0:	mov	r0, #0
   18df4:	bl	10ef4 <dcgettext@plt>
   18df8:	mov	r9, r0
   18dfc:	mov	r2, r5
   18e00:	mov	r1, #8
   18e04:	mov	r0, #0
   18e08:	bl	158b8 <__assert_fail@plt+0x47b4>
   18e0c:	mov	r4, r0
   18e10:	mov	r1, r8
   18e14:	mov	r0, #1
   18e18:	bl	16cb0 <__assert_fail@plt+0x5bac>
   18e1c:	mov	r1, #0
   18e20:	mov	r3, r4
   18e24:	str	r0, [sp]
   18e28:	mov	r2, r9
   18e2c:	mov	r0, r1
   18e30:	bl	10f6c <error@plt>
   18e34:	mov	r0, r6
   18e38:	mov	r1, r7
   18e3c:	ldr	r2, [sp, #40]	; 0x28
   18e40:	bl	18c50 <__assert_fail@plt+0x7b4c>
   18e44:	ldr	r3, [sp, #44]	; 0x2c
   18e48:	blx	r3
   18e4c:	mvn	r0, #0
   18e50:	b	18e98 <__assert_fail@plt+0x7d94>
   18e54:	ldr	r0, [r9, #4]!
   18e58:	add	r4, r4, #1
   18e5c:	cmp	r0, #0
   18e60:	beq	18de4 <__assert_fail@plt+0x7ce0>
   18e64:	mov	r1, r5
   18e68:	bl	10e70 <strcmp@plt>
   18e6c:	cmp	r0, #0
   18e70:	bne	18e54 <__assert_fail@plt+0x7d50>
   18e74:	mov	r0, r4
   18e78:	b	18e98 <__assert_fail@plt+0x7d94>
   18e7c:	mov	r2, r3
   18e80:	mov	r1, r6
   18e84:	ldr	r3, [sp, #40]	; 0x28
   18e88:	mov	r0, r5
   18e8c:	bl	18a08 <__assert_fail@plt+0x7904>
   18e90:	cmp	r0, #0
   18e94:	blt	18eb0 <__assert_fail@plt+0x7dac>
   18e98:	add	sp, sp, #12
   18e9c:	ldrd	r4, [sp]
   18ea0:	ldrd	r6, [sp, #8]
   18ea4:	ldrd	r8, [sp, #16]
   18ea8:	add	sp, sp, #24
   18eac:	pop	{pc}		; (ldr pc, [sp], #4)
   18eb0:	cmn	r0, #1
   18eb4:	beq	18de4 <__assert_fail@plt+0x7ce0>
   18eb8:	movw	r1, #41752	; 0xa318
   18ebc:	movt	r1, #1
   18ec0:	mov	r2, #5
   18ec4:	mov	r0, #0
   18ec8:	bl	10ef4 <dcgettext@plt>
   18ecc:	mov	r9, r0
   18ed0:	b	18dfc <__assert_fail@plt+0x7cf8>
   18ed4:	strd	r4, [sp, #-24]!	; 0xffffffe8
   18ed8:	strd	r6, [sp, #8]
   18edc:	ldr	r7, [r1]
   18ee0:	str	r8, [sp, #16]
   18ee4:	str	lr, [sp, #20]
   18ee8:	cmp	r7, #0
   18eec:	beq	18f2c <__assert_fail@plt+0x7e28>
   18ef0:	mov	r6, r3
   18ef4:	mov	r8, r0
   18ef8:	mov	r4, r2
   18efc:	mov	r5, r1
   18f00:	b	18f10 <__assert_fail@plt+0x7e0c>
   18f04:	ldr	r7, [r5, #4]!
   18f08:	cmp	r7, #0
   18f0c:	beq	18f2c <__assert_fail@plt+0x7e28>
   18f10:	mov	r1, r4
   18f14:	mov	r2, r6
   18f18:	mov	r0, r8
   18f1c:	add	r4, r4, r6
   18f20:	bl	10edc <memcmp@plt>
   18f24:	cmp	r0, #0
   18f28:	bne	18f04 <__assert_fail@plt+0x7e00>
   18f2c:	mov	r0, r7
   18f30:	ldrd	r4, [sp]
   18f34:	ldrd	r6, [sp, #8]
   18f38:	ldr	r8, [sp, #16]
   18f3c:	add	sp, sp, #20
   18f40:	pop	{pc}		; (ldr pc, [sp], #4)
   18f44:	strd	r4, [sp, #-16]!
   18f48:	mov	r4, r0
   18f4c:	str	r6, [sp, #8]
   18f50:	str	lr, [sp, #12]
   18f54:	bl	10f54 <__fpending@plt>
   18f58:	ldr	r5, [r4]
   18f5c:	mov	r6, r0
   18f60:	mov	r0, r4
   18f64:	bl	11f80 <__assert_fail@plt+0xe7c>
   18f68:	mov	r4, r0
   18f6c:	and	r5, r5, #32
   18f70:	cmp	r5, #0
   18f74:	bne	18fac <__assert_fail@plt+0x7ea8>
   18f78:	cmp	r0, #0
   18f7c:	beq	18f98 <__assert_fail@plt+0x7e94>
   18f80:	cmp	r6, #0
   18f84:	bne	18fc4 <__assert_fail@plt+0x7ec0>
   18f88:	bl	10ff0 <__errno_location@plt>
   18f8c:	ldr	r4, [r0]
   18f90:	subs	r4, r4, #9
   18f94:	mvnne	r4, #0
   18f98:	mov	r0, r4
   18f9c:	ldrd	r4, [sp]
   18fa0:	ldr	r6, [sp, #8]
   18fa4:	add	sp, sp, #12
   18fa8:	pop	{pc}		; (ldr pc, [sp], #4)
   18fac:	cmp	r0, #0
   18fb0:	bne	18fc4 <__assert_fail@plt+0x7ec0>
   18fb4:	bl	10ff0 <__errno_location@plt>
   18fb8:	str	r4, [r0]
   18fbc:	mvn	r4, #0
   18fc0:	b	18f98 <__assert_fail@plt+0x7e94>
   18fc4:	mvn	r4, #0
   18fc8:	b	18f98 <__assert_fail@plt+0x7e94>
   18fcc:	push	{r1, r2, r3}
   18fd0:	strd	r4, [sp, #-20]!	; 0xffffffec
   18fd4:	strd	r6, [sp, #8]
   18fd8:	str	lr, [sp, #16]
   18fdc:	sub	sp, sp, #8
   18fe0:	ldr	r1, [sp, #28]
   18fe4:	add	r2, sp, #32
   18fe8:	str	r2, [sp, #4]
   18fec:	cmp	r1, #0
   18ff0:	beq	190cc <__assert_fail@plt+0x7fc8>
   18ff4:	movw	r3, #1030	; 0x406
   18ff8:	mov	r6, r0
   18ffc:	cmp	r1, r3
   19000:	beq	190dc <__assert_fail@plt+0x7fd8>
   19004:	cmp	r1, #11
   19008:	beq	19084 <__assert_fail@plt+0x7f80>
   1900c:	ble	19064 <__assert_fail@plt+0x7f60>
   19010:	movw	r2, #1031	; 0x407
   19014:	cmp	r1, r2
   19018:	bgt	190a0 <__assert_fail@plt+0x7f9c>
   1901c:	cmp	r1, r3
   19020:	bge	19030 <__assert_fail@plt+0x7f2c>
   19024:	movw	r3, #1025	; 0x401
   19028:	cmp	r1, r3
   1902c:	beq	19084 <__assert_fail@plt+0x7f80>
   19030:	ldr	r3, [sp, #4]
   19034:	mov	r0, r6
   19038:	ldr	r2, [r3]
   1903c:	bl	11068 <fcntl64@plt>
   19040:	mov	r4, r0
   19044:	mov	r0, r4
   19048:	add	sp, sp, #8
   1904c:	ldrd	r4, [sp]
   19050:	ldrd	r6, [sp, #8]
   19054:	ldr	lr, [sp, #16]
   19058:	add	sp, sp, #20
   1905c:	add	sp, sp, #12
   19060:	bx	lr
   19064:	cmp	r1, #4
   19068:	beq	19030 <__assert_fail@plt+0x7f2c>
   1906c:	bgt	19094 <__assert_fail@plt+0x7f90>
   19070:	cmp	r1, #2
   19074:	beq	19030 <__assert_fail@plt+0x7f2c>
   19078:	bgt	19084 <__assert_fail@plt+0x7f80>
   1907c:	cmp	r1, #1
   19080:	bne	19030 <__assert_fail@plt+0x7f2c>
   19084:	mov	r0, r6
   19088:	bl	11068 <fcntl64@plt>
   1908c:	mov	r4, r0
   19090:	b	19044 <__assert_fail@plt+0x7f40>
   19094:	cmp	r1, #9
   19098:	bne	19030 <__assert_fail@plt+0x7f2c>
   1909c:	b	19084 <__assert_fail@plt+0x7f80>
   190a0:	movw	r3, #1033	; 0x409
   190a4:	cmp	r1, r3
   190a8:	beq	19030 <__assert_fail@plt+0x7f2c>
   190ac:	blt	19084 <__assert_fail@plt+0x7f80>
   190b0:	movw	r3, #1034	; 0x40a
   190b4:	cmp	r1, r3
   190b8:	bne	19030 <__assert_fail@plt+0x7f2c>
   190bc:	mov	r0, r6
   190c0:	bl	11068 <fcntl64@plt>
   190c4:	mov	r4, r0
   190c8:	b	19044 <__assert_fail@plt+0x7f40>
   190cc:	ldr	r2, [sp, #32]
   190d0:	bl	11068 <fcntl64@plt>
   190d4:	mov	r4, r0
   190d8:	b	19044 <__assert_fail@plt+0x7f40>
   190dc:	movw	r5, #45760	; 0xb2c0
   190e0:	movt	r5, #2
   190e4:	ldr	r7, [r2]
   190e8:	add	r2, sp, #36	; 0x24
   190ec:	ldr	r3, [r5]
   190f0:	str	r2, [sp, #4]
   190f4:	mov	r2, r7
   190f8:	cmp	r3, #0
   190fc:	blt	19118 <__assert_fail@plt+0x8014>
   19100:	bl	11068 <fcntl64@plt>
   19104:	subs	r4, r0, #0
   19108:	blt	19180 <__assert_fail@plt+0x807c>
   1910c:	mov	r3, #1
   19110:	str	r3, [r5]
   19114:	b	19044 <__assert_fail@plt+0x7f40>
   19118:	mov	r1, #0
   1911c:	bl	11068 <fcntl64@plt>
   19120:	subs	r4, r0, #0
   19124:	blt	19044 <__assert_fail@plt+0x7f40>
   19128:	ldr	r3, [r5]
   1912c:	cmn	r3, #1
   19130:	bne	19044 <__assert_fail@plt+0x7f40>
   19134:	mov	r1, #1
   19138:	mov	r0, r4
   1913c:	bl	11068 <fcntl64@plt>
   19140:	subs	r2, r0, #0
   19144:	blt	19160 <__assert_fail@plt+0x805c>
   19148:	orr	r2, r2, #1
   1914c:	mov	r1, #2
   19150:	mov	r0, r4
   19154:	bl	11068 <fcntl64@plt>
   19158:	cmn	r0, #1
   1915c:	bne	19044 <__assert_fail@plt+0x7f40>
   19160:	bl	10ff0 <__errno_location@plt>
   19164:	mov	r5, r0
   19168:	mov	r0, r4
   1916c:	ldr	r6, [r5]
   19170:	mvn	r4, #0
   19174:	bl	110f8 <close@plt>
   19178:	str	r6, [r5]
   1917c:	b	19044 <__assert_fail@plt+0x7f40>
   19180:	bl	10ff0 <__errno_location@plt>
   19184:	ldr	r3, [r0]
   19188:	cmp	r3, #22
   1918c:	bne	1910c <__assert_fail@plt+0x8008>
   19190:	mov	r2, r7
   19194:	mov	r0, r6
   19198:	mov	r1, #0
   1919c:	bl	11068 <fcntl64@plt>
   191a0:	subs	r4, r0, #0
   191a4:	mvnge	r3, #0
   191a8:	strge	r3, [r5]
   191ac:	bge	19134 <__assert_fail@plt+0x8030>
   191b0:	b	19044 <__assert_fail@plt+0x7f40>
   191b4:	mov	r0, #14
   191b8:	str	r4, [sp, #-8]!
   191bc:	str	lr, [sp, #4]
   191c0:	bl	11098 <nl_langinfo@plt>
   191c4:	cmp	r0, #0
   191c8:	beq	191ec <__assert_fail@plt+0x80e8>
   191cc:	ldrb	r2, [r0]
   191d0:	movw	r3, #41824	; 0xa360
   191d4:	movt	r3, #1
   191d8:	ldr	r4, [sp]
   191dc:	add	sp, sp, #4
   191e0:	cmp	r2, #0
   191e4:	moveq	r0, r3
   191e8:	pop	{pc}		; (ldr pc, [sp], #4)
   191ec:	ldr	r4, [sp]
   191f0:	add	sp, sp, #4
   191f4:	movw	r0, #41824	; 0xa360
   191f8:	movt	r0, #1
   191fc:	pop	{pc}		; (ldr pc, [sp], #4)
   19200:	strd	r4, [sp, #-20]!	; 0xffffffec
   19204:	mov	r5, r2
   19208:	strd	r6, [sp, #8]
   1920c:	subs	r6, r0, #0
   19210:	mov	r7, r1
   19214:	str	lr, [sp, #16]
   19218:	sub	sp, sp, #12
   1921c:	addeq	r6, sp, #4
   19220:	mov	r0, r6
   19224:	bl	10f60 <mbrtowc@plt>
   19228:	cmp	r5, #0
   1922c:	cmnne	r0, #3
   19230:	mov	r4, r0
   19234:	bhi	19250 <__assert_fail@plt+0x814c>
   19238:	mov	r0, r4
   1923c:	add	sp, sp, #12
   19240:	ldrd	r4, [sp]
   19244:	ldrd	r6, [sp, #8]
   19248:	add	sp, sp, #16
   1924c:	pop	{pc}		; (ldr pc, [sp], #4)
   19250:	mov	r0, #0
   19254:	bl	192a8 <__assert_fail@plt+0x81a4>
   19258:	cmp	r0, #0
   1925c:	bne	19238 <__assert_fail@plt+0x8134>
   19260:	ldrb	r3, [r7]
   19264:	mov	r4, #1
   19268:	str	r3, [r6]
   1926c:	b	19238 <__assert_fail@plt+0x8134>
   19270:	umull	r2, r3, r1, r2
   19274:	cmp	r3, #0
   19278:	bne	19284 <__assert_fail@plt+0x8180>
   1927c:	mov	r1, r2
   19280:	b	189a8 <__assert_fail@plt+0x78a4>
   19284:	str	r4, [sp, #-8]!
   19288:	str	lr, [sp, #4]
   1928c:	bl	10ff0 <__errno_location@plt>
   19290:	mov	r3, #12
   19294:	ldr	r4, [sp]
   19298:	add	sp, sp, #4
   1929c:	str	r3, [r0]
   192a0:	mov	r0, #0
   192a4:	pop	{pc}		; (ldr pc, [sp], #4)
   192a8:	push	{lr}		; (str lr, [sp, #-4]!)
   192ac:	sub	sp, sp, #268	; 0x10c
   192b0:	movw	r2, #257	; 0x101
   192b4:	add	r1, sp, #4
   192b8:	bl	19300 <__assert_fail@plt+0x81fc>
   192bc:	cmp	r0, #0
   192c0:	movne	r0, #0
   192c4:	bne	192f8 <__assert_fail@plt+0x81f4>
   192c8:	movw	r1, #41832	; 0xa368
   192cc:	movt	r1, #1
   192d0:	add	r0, sp, #4
   192d4:	bl	10e70 <strcmp@plt>
   192d8:	cmp	r0, #0
   192dc:	beq	192f8 <__assert_fail@plt+0x81f4>
   192e0:	add	r0, sp, #4
   192e4:	movw	r1, #41836	; 0xa36c
   192e8:	movt	r1, #1
   192ec:	bl	10e70 <strcmp@plt>
   192f0:	adds	r0, r0, #0
   192f4:	movne	r0, #1
   192f8:	add	sp, sp, #268	; 0x10c
   192fc:	pop	{pc}		; (ldr pc, [sp], #4)
   19300:	strd	r4, [sp, #-16]!
   19304:	mov	r5, r1
   19308:	mov	r1, #0
   1930c:	mov	r4, r2
   19310:	str	r6, [sp, #8]
   19314:	str	lr, [sp, #12]
   19318:	bl	11080 <setlocale@plt>
   1931c:	subs	r6, r0, #0
   19320:	beq	193a0 <__assert_fail@plt+0x829c>
   19324:	bl	10fd8 <strlen@plt>
   19328:	cmp	r4, r0
   1932c:	bhi	1934c <__assert_fail@plt+0x8248>
   19330:	cmp	r4, #0
   19334:	moveq	r0, #34	; 0x22
   19338:	bne	19370 <__assert_fail@plt+0x826c>
   1933c:	ldrd	r4, [sp]
   19340:	ldr	r6, [sp, #8]
   19344:	add	sp, sp, #12
   19348:	pop	{pc}		; (ldr pc, [sp], #4)
   1934c:	add	r2, r0, #1
   19350:	mov	r1, r6
   19354:	mov	r0, r5
   19358:	bl	10eb8 <memcpy@plt>
   1935c:	ldrd	r4, [sp]
   19360:	mov	r0, #0
   19364:	ldr	r6, [sp, #8]
   19368:	add	sp, sp, #12
   1936c:	pop	{pc}		; (ldr pc, [sp], #4)
   19370:	sub	r4, r4, #1
   19374:	mov	r1, r6
   19378:	mov	r2, r4
   1937c:	mov	r0, r5
   19380:	bl	10eb8 <memcpy@plt>
   19384:	mov	r3, #0
   19388:	mov	r0, #34	; 0x22
   1938c:	strb	r3, [r5, r4]
   19390:	ldrd	r4, [sp]
   19394:	ldr	r6, [sp, #8]
   19398:	add	sp, sp, #12
   1939c:	pop	{pc}		; (ldr pc, [sp], #4)
   193a0:	cmp	r4, #0
   193a4:	mov	r0, #22
   193a8:	strbne	r6, [r5]
   193ac:	ldrd	r4, [sp]
   193b0:	ldr	r6, [sp, #8]
   193b4:	add	sp, sp, #12
   193b8:	pop	{pc}		; (ldr pc, [sp], #4)
   193bc:	mov	r1, #0
   193c0:	b	11080 <setlocale@plt>
   193c4:	eor	r1, r1, #-2147483648	; 0x80000000
   193c8:	b	193d0 <__assert_fail@plt+0x82cc>
   193cc:	eor	r3, r3, #-2147483648	; 0x80000000
   193d0:	push	{r4, r5, lr}
   193d4:	lsl	r4, r1, #1
   193d8:	lsl	r5, r3, #1
   193dc:	teq	r4, r5
   193e0:	teqeq	r0, r2
   193e4:	orrsne	ip, r4, r0
   193e8:	orrsne	ip, r5, r2
   193ec:	mvnsne	ip, r4, asr #21
   193f0:	mvnsne	ip, r5, asr #21
   193f4:	beq	195e0 <__assert_fail@plt+0x84dc>
   193f8:	lsr	r4, r4, #21
   193fc:	rsbs	r5, r4, r5, lsr #21
   19400:	rsblt	r5, r5, #0
   19404:	ble	19424 <__assert_fail@plt+0x8320>
   19408:	add	r4, r4, r5
   1940c:	eor	r2, r0, r2
   19410:	eor	r3, r1, r3
   19414:	eor	r0, r2, r0
   19418:	eor	r1, r3, r1
   1941c:	eor	r2, r0, r2
   19420:	eor	r3, r1, r3
   19424:	cmp	r5, #54	; 0x36
   19428:	pophi	{r4, r5, pc}
   1942c:	tst	r1, #-2147483648	; 0x80000000
   19430:	lsl	r1, r1, #12
   19434:	mov	ip, #1048576	; 0x100000
   19438:	orr	r1, ip, r1, lsr #12
   1943c:	beq	19448 <__assert_fail@plt+0x8344>
   19440:	rsbs	r0, r0, #0
   19444:	rsc	r1, r1, #0
   19448:	tst	r3, #-2147483648	; 0x80000000
   1944c:	lsl	r3, r3, #12
   19450:	orr	r3, ip, r3, lsr #12
   19454:	beq	19460 <__assert_fail@plt+0x835c>
   19458:	rsbs	r2, r2, #0
   1945c:	rsc	r3, r3, #0
   19460:	teq	r4, r5
   19464:	beq	195c8 <__assert_fail@plt+0x84c4>
   19468:	sub	r4, r4, #1
   1946c:	rsbs	lr, r5, #32
   19470:	blt	1948c <__assert_fail@plt+0x8388>
   19474:	lsl	ip, r2, lr
   19478:	adds	r0, r0, r2, lsr r5
   1947c:	adc	r1, r1, #0
   19480:	adds	r0, r0, r3, lsl lr
   19484:	adcs	r1, r1, r3, asr r5
   19488:	b	194a8 <__assert_fail@plt+0x83a4>
   1948c:	sub	r5, r5, #32
   19490:	add	lr, lr, #32
   19494:	cmp	r2, #1
   19498:	lsl	ip, r3, lr
   1949c:	orrcs	ip, ip, #2
   194a0:	adds	r0, r0, r3, asr r5
   194a4:	adcs	r1, r1, r3, asr #31
   194a8:	and	r5, r1, #-2147483648	; 0x80000000
   194ac:	bpl	194bc <__assert_fail@plt+0x83b8>
   194b0:	rsbs	ip, ip, #0
   194b4:	rscs	r0, r0, #0
   194b8:	rsc	r1, r1, #0
   194bc:	cmp	r1, #1048576	; 0x100000
   194c0:	bcc	19500 <__assert_fail@plt+0x83fc>
   194c4:	cmp	r1, #2097152	; 0x200000
   194c8:	bcc	194e8 <__assert_fail@plt+0x83e4>
   194cc:	lsrs	r1, r1, #1
   194d0:	rrxs	r0, r0
   194d4:	rrx	ip, ip
   194d8:	add	r4, r4, #1
   194dc:	lsl	r2, r4, #21
   194e0:	cmn	r2, #4194304	; 0x400000
   194e4:	bcs	19640 <__assert_fail@plt+0x853c>
   194e8:	cmp	ip, #-2147483648	; 0x80000000
   194ec:	lsrseq	ip, r0, #1
   194f0:	adcs	r0, r0, #0
   194f4:	adc	r1, r1, r4, lsl #20
   194f8:	orr	r1, r1, r5
   194fc:	pop	{r4, r5, pc}
   19500:	lsls	ip, ip, #1
   19504:	adcs	r0, r0, r0
   19508:	adc	r1, r1, r1
   1950c:	tst	r1, #1048576	; 0x100000
   19510:	sub	r4, r4, #1
   19514:	bne	194e8 <__assert_fail@plt+0x83e4>
   19518:	teq	r1, #0
   1951c:	moveq	r1, r0
   19520:	moveq	r0, #0
   19524:	clz	r3, r1
   19528:	addeq	r3, r3, #32
   1952c:	sub	r3, r3, #11
   19530:	subs	r2, r3, #32
   19534:	bge	19558 <__assert_fail@plt+0x8454>
   19538:	adds	r2, r2, #12
   1953c:	ble	19554 <__assert_fail@plt+0x8450>
   19540:	add	ip, r2, #20
   19544:	rsb	r2, r2, #12
   19548:	lsl	r0, r1, ip
   1954c:	lsr	r1, r1, r2
   19550:	b	19568 <__assert_fail@plt+0x8464>
   19554:	add	r2, r2, #20
   19558:	rsble	ip, r2, #32
   1955c:	lsl	r1, r1, r2
   19560:	orrle	r1, r1, r0, lsr ip
   19564:	lslle	r0, r0, r2
   19568:	subs	r4, r4, r3
   1956c:	addge	r1, r1, r4, lsl #20
   19570:	orrge	r1, r1, r5
   19574:	popge	{r4, r5, pc}
   19578:	mvn	r4, r4
   1957c:	subs	r4, r4, #31
   19580:	bge	195bc <__assert_fail@plt+0x84b8>
   19584:	adds	r4, r4, #12
   19588:	bgt	195a4 <__assert_fail@plt+0x84a0>
   1958c:	add	r4, r4, #20
   19590:	rsb	r2, r4, #32
   19594:	lsr	r0, r0, r4
   19598:	orr	r0, r0, r1, lsl r2
   1959c:	orr	r1, r5, r1, lsr r4
   195a0:	pop	{r4, r5, pc}
   195a4:	rsb	r4, r4, #12
   195a8:	rsb	r2, r4, #32
   195ac:	lsr	r0, r0, r2
   195b0:	orr	r0, r0, r1, lsl r4
   195b4:	mov	r1, r5
   195b8:	pop	{r4, r5, pc}
   195bc:	lsr	r0, r1, r4
   195c0:	mov	r1, r5
   195c4:	pop	{r4, r5, pc}
   195c8:	teq	r4, #0
   195cc:	eor	r3, r3, #1048576	; 0x100000
   195d0:	eoreq	r1, r1, #1048576	; 0x100000
   195d4:	addeq	r4, r4, #1
   195d8:	subne	r5, r5, #1
   195dc:	b	19468 <__assert_fail@plt+0x8364>
   195e0:	mvns	ip, r4, asr #21
   195e4:	mvnsne	ip, r5, asr #21
   195e8:	beq	19650 <__assert_fail@plt+0x854c>
   195ec:	teq	r4, r5
   195f0:	teqeq	r0, r2
   195f4:	beq	19608 <__assert_fail@plt+0x8504>
   195f8:	orrs	ip, r4, r0
   195fc:	moveq	r1, r3
   19600:	moveq	r0, r2
   19604:	pop	{r4, r5, pc}
   19608:	teq	r1, r3
   1960c:	movne	r1, #0
   19610:	movne	r0, #0
   19614:	popne	{r4, r5, pc}
   19618:	lsrs	ip, r4, #21
   1961c:	bne	19630 <__assert_fail@plt+0x852c>
   19620:	lsls	r0, r0, #1
   19624:	adcs	r1, r1, r1
   19628:	orrcs	r1, r1, #-2147483648	; 0x80000000
   1962c:	pop	{r4, r5, pc}
   19630:	adds	r4, r4, #4194304	; 0x400000
   19634:	addcc	r1, r1, #1048576	; 0x100000
   19638:	popcc	{r4, r5, pc}
   1963c:	and	r5, r1, #-2147483648	; 0x80000000
   19640:	orr	r1, r5, #2130706432	; 0x7f000000
   19644:	orr	r1, r1, #15728640	; 0xf00000
   19648:	mov	r0, #0
   1964c:	pop	{r4, r5, pc}
   19650:	mvns	ip, r4, asr #21
   19654:	movne	r1, r3
   19658:	movne	r0, r2
   1965c:	mvnseq	ip, r5, asr #21
   19660:	movne	r3, r1
   19664:	movne	r2, r0
   19668:	orrs	r4, r0, r1, lsl #12
   1966c:	orrseq	r5, r2, r3, lsl #12
   19670:	teqeq	r1, r3
   19674:	orrne	r1, r1, #524288	; 0x80000
   19678:	pop	{r4, r5, pc}
   1967c:	teq	r0, #0
   19680:	moveq	r1, #0
   19684:	bxeq	lr
   19688:	push	{r4, r5, lr}
   1968c:	mov	r4, #1024	; 0x400
   19690:	add	r4, r4, #50	; 0x32
   19694:	mov	r5, #0
   19698:	mov	r1, #0
   1969c:	b	19518 <__assert_fail@plt+0x8414>
   196a0:	teq	r0, #0
   196a4:	moveq	r1, #0
   196a8:	bxeq	lr
   196ac:	push	{r4, r5, lr}
   196b0:	mov	r4, #1024	; 0x400
   196b4:	add	r4, r4, #50	; 0x32
   196b8:	ands	r5, r0, #-2147483648	; 0x80000000
   196bc:	rsbmi	r0, r0, #0
   196c0:	mov	r1, #0
   196c4:	b	19518 <__assert_fail@plt+0x8414>
   196c8:	lsls	r2, r0, #1
   196cc:	asr	r1, r2, #3
   196d0:	rrx	r1, r1
   196d4:	lsl	r0, r2, #28
   196d8:	andsne	r3, r2, #-16777216	; 0xff000000
   196dc:	teqne	r3, #-16777216	; 0xff000000
   196e0:	eorne	r1, r1, #939524096	; 0x38000000
   196e4:	bxne	lr
   196e8:	bics	r2, r2, #-16777216	; 0xff000000
   196ec:	bxeq	lr
   196f0:	teq	r3, #-16777216	; 0xff000000
   196f4:	orreq	r1, r1, #524288	; 0x80000
   196f8:	bxeq	lr
   196fc:	push	{r4, r5, lr}
   19700:	mov	r4, #896	; 0x380
   19704:	and	r5, r1, #-2147483648	; 0x80000000
   19708:	bic	r1, r1, #-2147483648	; 0x80000000
   1970c:	b	19518 <__assert_fail@plt+0x8414>
   19710:	orrs	r2, r0, r1
   19714:	bxeq	lr
   19718:	push	{r4, r5, lr}
   1971c:	mov	r5, #0
   19720:	b	19740 <__assert_fail@plt+0x863c>
   19724:	orrs	r2, r0, r1
   19728:	bxeq	lr
   1972c:	push	{r4, r5, lr}
   19730:	ands	r5, r1, #-2147483648	; 0x80000000
   19734:	bpl	19740 <__assert_fail@plt+0x863c>
   19738:	rsbs	r0, r0, #0
   1973c:	rsc	r1, r1, #0
   19740:	mov	r4, #1024	; 0x400
   19744:	add	r4, r4, #50	; 0x32
   19748:	lsrs	ip, r1, #22
   1974c:	beq	194bc <__assert_fail@plt+0x83b8>
   19750:	mov	r2, #3
   19754:	lsrs	ip, ip, #3
   19758:	addne	r2, r2, #3
   1975c:	lsrs	ip, ip, #3
   19760:	addne	r2, r2, #3
   19764:	add	r2, r2, ip, lsr #3
   19768:	rsb	r3, r2, #32
   1976c:	lsl	ip, r0, r3
   19770:	lsr	r0, r0, r2
   19774:	orr	r0, r0, r1, lsl r3
   19778:	lsr	r1, r1, r2
   1977c:	add	r4, r4, r2
   19780:	b	194bc <__assert_fail@plt+0x83b8>
   19784:	cmp	r3, #0
   19788:	cmpeq	r2, #0
   1978c:	bne	197a4 <__assert_fail@plt+0x86a0>
   19790:	cmp	r1, #0
   19794:	cmpeq	r0, #0
   19798:	mvnne	r1, #0
   1979c:	mvnne	r0, #0
   197a0:	b	197c0 <__assert_fail@plt+0x86bc>
   197a4:	sub	sp, sp, #8
   197a8:	push	{sp, lr}
   197ac:	bl	19810 <__assert_fail@plt+0x870c>
   197b0:	ldr	lr, [sp, #4]
   197b4:	add	sp, sp, #8
   197b8:	pop	{r2, r3}
   197bc:	bx	lr
   197c0:	push	{r1, lr}
   197c4:	mov	r0, #8
   197c8:	bl	10e64 <raise@plt>
   197cc:	pop	{r1, pc}
   197d0:	vmov	d6, r0, r1
   197d4:	vldr	d7, [pc, #36]	; 19800 <__assert_fail@plt+0x86fc>
   197d8:	vldr	d5, [pc, #40]	; 19808 <__assert_fail@plt+0x8704>
   197dc:	vmul.f64	d7, d6, d7
   197e0:	vcvt.u32.f64	s14, d7
   197e4:	vcvt.f64.u32	d4, s14
   197e8:	vmov	r1, s14
   197ec:	vmls.f64	d6, d4, d5
   197f0:	vcvt.u32.f64	s15, d6
   197f4:	vmov	r0, s15
   197f8:	bx	lr
   197fc:	nop			; (mov r0, r0)
   19800:	andeq	r0, r0, r0
   19804:	ldclcc	0, cr0, [r0]
   19808:	andeq	r0, r0, r0
   1980c:	mvnsmi	r0, r0
   19810:	cmp	r1, r3
   19814:	cmpeq	r0, r2
   19818:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1981c:	mov	r4, r0
   19820:	movcc	r0, #0
   19824:	mov	r5, r1
   19828:	ldr	lr, [sp, #36]	; 0x24
   1982c:	movcc	r1, r0
   19830:	bcc	1992c <__assert_fail@plt+0x8828>
   19834:	cmp	r3, #0
   19838:	clzeq	ip, r2
   1983c:	clzne	ip, r3
   19840:	addeq	ip, ip, #32
   19844:	cmp	r5, #0
   19848:	clzeq	r1, r4
   1984c:	addeq	r1, r1, #32
   19850:	clzne	r1, r5
   19854:	sub	ip, ip, r1
   19858:	sub	sl, ip, #32
   1985c:	lsl	r9, r3, ip
   19860:	rsb	fp, ip, #32
   19864:	orr	r9, r9, r2, lsl sl
   19868:	orr	r9, r9, r2, lsr fp
   1986c:	lsl	r8, r2, ip
   19870:	cmp	r5, r9
   19874:	cmpeq	r4, r8
   19878:	movcc	r0, #0
   1987c:	movcc	r1, r0
   19880:	bcc	1989c <__assert_fail@plt+0x8798>
   19884:	mov	r0, #1
   19888:	subs	r4, r4, r8
   1988c:	lsl	r1, r0, sl
   19890:	orr	r1, r1, r0, lsr fp
   19894:	lsl	r0, r0, ip
   19898:	sbc	r5, r5, r9
   1989c:	cmp	ip, #0
   198a0:	beq	1992c <__assert_fail@plt+0x8828>
   198a4:	lsr	r6, r8, #1
   198a8:	orr	r6, r6, r9, lsl #31
   198ac:	lsr	r7, r9, #1
   198b0:	mov	r2, ip
   198b4:	b	198d8 <__assert_fail@plt+0x87d4>
   198b8:	subs	r3, r4, r6
   198bc:	sbc	r8, r5, r7
   198c0:	adds	r3, r3, r3
   198c4:	adc	r8, r8, r8
   198c8:	adds	r4, r3, #1
   198cc:	adc	r5, r8, #0
   198d0:	subs	r2, r2, #1
   198d4:	beq	198f4 <__assert_fail@plt+0x87f0>
   198d8:	cmp	r5, r7
   198dc:	cmpeq	r4, r6
   198e0:	bcs	198b8 <__assert_fail@plt+0x87b4>
   198e4:	adds	r4, r4, r4
   198e8:	adc	r5, r5, r5
   198ec:	subs	r2, r2, #1
   198f0:	bne	198d8 <__assert_fail@plt+0x87d4>
   198f4:	lsr	r3, r4, ip
   198f8:	orr	r3, r3, r5, lsl fp
   198fc:	lsr	r2, r5, ip
   19900:	orr	r3, r3, r5, lsr sl
   19904:	adds	r0, r0, r4
   19908:	mov	r4, r3
   1990c:	lsl	r3, r2, ip
   19910:	orr	r3, r3, r4, lsl sl
   19914:	lsl	ip, r4, ip
   19918:	orr	r3, r3, r4, lsr fp
   1991c:	adc	r1, r1, r5
   19920:	subs	r0, r0, ip
   19924:	mov	r5, r2
   19928:	sbc	r1, r1, r3
   1992c:	cmp	lr, #0
   19930:	strdne	r4, [lr]
   19934:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19938:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1993c:	mov	r7, r0
   19940:	ldr	r6, [pc, #72]	; 19990 <__assert_fail@plt+0x888c>
   19944:	ldr	r5, [pc, #72]	; 19994 <__assert_fail@plt+0x8890>
   19948:	add	r6, pc, r6
   1994c:	add	r5, pc, r5
   19950:	sub	r6, r6, r5
   19954:	mov	r8, r1
   19958:	mov	r9, r2
   1995c:	bl	10e20 <fdopen@plt-0x20>
   19960:	asrs	r6, r6, #2
   19964:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   19968:	mov	r4, #0
   1996c:	add	r4, r4, #1
   19970:	ldr	r3, [r5], #4
   19974:	mov	r2, r9
   19978:	mov	r1, r8
   1997c:	mov	r0, r7
   19980:	blx	r3
   19984:	cmp	r6, r4
   19988:	bne	1996c <__assert_fail@plt+0x8868>
   1998c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   19990:	andeq	r1, r1, r4, asr #11
   19994:			; <UNDEFINED> instruction: 0x000115bc
   19998:	bx	lr
   1999c:	ldr	r3, [pc, #12]	; 199b0 <__assert_fail@plt+0x88ac>
   199a0:	mov	r1, #0
   199a4:	add	r3, pc, r3
   199a8:	ldr	r2, [r3]
   199ac:	b	11008 <__cxa_atexit@plt>
   199b0:	andeq	r1, r1, r8, asr r7

Disassembly of section .fini:

000199b4 <.fini>:
   199b4:	push	{r3, lr}
   199b8:	pop	{r3, pc}
