
../repos/coreutils/src/nproc:     file format elf32-littlearm


Disassembly of section .init:

00010dc4 <.init>:
   10dc4:	push	{r3, lr}
   10dc8:	bl	11084 <__assert_fail@plt+0x48>
   10dcc:	pop	{r3, pc}

Disassembly of section .plt:

00010dd0 <calloc@plt-0x14>:
   10dd0:	push	{lr}		; (str lr, [sp, #-4]!)
   10dd4:	ldr	lr, [pc, #4]	; 10de0 <calloc@plt-0x4>
   10dd8:	add	lr, pc, lr
   10ddc:	ldr	pc, [lr, #8]!
   10de0:	andeq	r5, r1, r0, lsr #4

00010de4 <calloc@plt>:
   10de4:	add	ip, pc, #0, 12
   10de8:	add	ip, ip, #86016	; 0x15000
   10dec:	ldr	pc, [ip, #544]!	; 0x220

00010df0 <fputs_unlocked@plt>:
   10df0:	add	ip, pc, #0, 12
   10df4:	add	ip, ip, #86016	; 0x15000
   10df8:	ldr	pc, [ip, #536]!	; 0x218

00010dfc <raise@plt>:
   10dfc:	add	ip, pc, #0, 12
   10e00:	add	ip, ip, #86016	; 0x15000
   10e04:	ldr	pc, [ip, #528]!	; 0x210

00010e08 <strcmp@plt>:
   10e08:	add	ip, pc, #0, 12
   10e0c:	add	ip, ip, #86016	; 0x15000
   10e10:	ldr	pc, [ip, #520]!	; 0x208

00010e14 <fflush@plt>:
   10e14:	add	ip, pc, #0, 12
   10e18:	add	ip, ip, #86016	; 0x15000
   10e1c:	ldr	pc, [ip, #512]!	; 0x200

00010e20 <free@plt>:
   10e20:	add	ip, pc, #0, 12
   10e24:	add	ip, ip, #86016	; 0x15000
   10e28:	ldr	pc, [ip, #504]!	; 0x1f8

00010e2c <_exit@plt>:
   10e2c:	add	ip, pc, #0, 12
   10e30:	add	ip, ip, #86016	; 0x15000
   10e34:	ldr	pc, [ip, #496]!	; 0x1f0

00010e38 <memcpy@plt>:
   10e38:	add	ip, pc, #0, 12
   10e3c:	add	ip, ip, #86016	; 0x15000
   10e40:	ldr	pc, [ip, #488]!	; 0x1e8

00010e44 <mbsinit@plt>:
   10e44:	add	ip, pc, #0, 12
   10e48:	add	ip, ip, #86016	; 0x15000
   10e4c:	ldr	pc, [ip, #480]!	; 0x1e0

00010e50 <__sched_cpucount@plt>:
   10e50:	add	ip, pc, #0, 12
   10e54:	add	ip, ip, #86016	; 0x15000
   10e58:	ldr	pc, [ip, #472]!	; 0x1d8

00010e5c <dcgettext@plt>:
   10e5c:	add	ip, pc, #0, 12
   10e60:	add	ip, ip, #86016	; 0x15000
   10e64:	ldr	pc, [ip, #464]!	; 0x1d0

00010e68 <sysconf@plt>:
   10e68:	add	ip, pc, #0, 12
   10e6c:	add	ip, ip, #86016	; 0x15000
   10e70:	ldr	pc, [ip, #456]!	; 0x1c8

00010e74 <realloc@plt>:
   10e74:	add	ip, pc, #0, 12
   10e78:	add	ip, ip, #86016	; 0x15000
   10e7c:	ldr	pc, [ip, #448]!	; 0x1c0

00010e80 <textdomain@plt>:
   10e80:	add	ip, pc, #0, 12
   10e84:	add	ip, ip, #86016	; 0x15000
   10e88:	ldr	pc, [ip, #440]!	; 0x1b8

00010e8c <iswprint@plt>:
   10e8c:	add	ip, pc, #0, 12
   10e90:	add	ip, ip, #86016	; 0x15000
   10e94:	ldr	pc, [ip, #432]!	; 0x1b0

00010e98 <lseek64@plt>:
   10e98:	add	ip, pc, #0, 12
   10e9c:	add	ip, ip, #86016	; 0x15000
   10ea0:	ldr	pc, [ip, #424]!	; 0x1a8

00010ea4 <__ctype_get_mb_cur_max@plt>:
   10ea4:	add	ip, pc, #0, 12
   10ea8:	add	ip, ip, #86016	; 0x15000
   10eac:	ldr	pc, [ip, #416]!	; 0x1a0

00010eb0 <__fpending@plt>:
   10eb0:	add	ip, pc, #0, 12
   10eb4:	add	ip, ip, #86016	; 0x15000
   10eb8:	ldr	pc, [ip, #408]!	; 0x198

00010ebc <ferror_unlocked@plt>:
   10ebc:	add	ip, pc, #0, 12
   10ec0:	add	ip, ip, #86016	; 0x15000
   10ec4:	ldr	pc, [ip, #400]!	; 0x190

00010ec8 <mbrtowc@plt>:
   10ec8:	add	ip, pc, #0, 12
   10ecc:	add	ip, ip, #86016	; 0x15000
   10ed0:	ldr	pc, [ip, #392]!	; 0x188

00010ed4 <error@plt>:
   10ed4:	add	ip, pc, #0, 12
   10ed8:	add	ip, ip, #86016	; 0x15000
   10edc:	ldr	pc, [ip, #384]!	; 0x180

00010ee0 <getenv@plt>:
   10ee0:	add	ip, pc, #0, 12
   10ee4:	add	ip, ip, #86016	; 0x15000
   10ee8:	ldr	pc, [ip, #376]!	; 0x178

00010eec <malloc@plt>:
   10eec:	add	ip, pc, #0, 12
   10ef0:	add	ip, ip, #86016	; 0x15000
   10ef4:	ldr	pc, [ip, #368]!	; 0x170

00010ef8 <__libc_start_main@plt>:
   10ef8:	add	ip, pc, #0, 12
   10efc:	add	ip, ip, #86016	; 0x15000
   10f00:	ldr	pc, [ip, #360]!	; 0x168

00010f04 <__freading@plt>:
   10f04:	add	ip, pc, #0, 12
   10f08:	add	ip, ip, #86016	; 0x15000
   10f0c:	ldr	pc, [ip, #352]!	; 0x160

00010f10 <__gmon_start__@plt>:
   10f10:	add	ip, pc, #0, 12
   10f14:	add	ip, ip, #86016	; 0x15000
   10f18:	ldr	pc, [ip, #344]!	; 0x158

00010f1c <getopt_long@plt>:
   10f1c:	add	ip, pc, #0, 12
   10f20:	add	ip, ip, #86016	; 0x15000
   10f24:	ldr	pc, [ip, #336]!	; 0x150

00010f28 <__ctype_b_loc@plt>:
   10f28:	add	ip, pc, #0, 12
   10f2c:	add	ip, ip, #86016	; 0x15000
   10f30:	ldr	pc, [ip, #328]!	; 0x148

00010f34 <exit@plt>:
   10f34:	add	ip, pc, #0, 12
   10f38:	add	ip, ip, #86016	; 0x15000
   10f3c:	ldr	pc, [ip, #320]!	; 0x140

00010f40 <bcmp@plt>:
   10f40:	add	ip, pc, #0, 12
   10f44:	add	ip, ip, #86016	; 0x15000
   10f48:	ldr	pc, [ip, #312]!	; 0x138

00010f4c <strtoul@plt>:
   10f4c:	add	ip, pc, #0, 12
   10f50:	add	ip, ip, #86016	; 0x15000
   10f54:	ldr	pc, [ip, #304]!	; 0x130

00010f58 <strlen@plt>:
   10f58:	add	ip, pc, #0, 12
   10f5c:	add	ip, ip, #86016	; 0x15000
   10f60:	ldr	pc, [ip, #296]!	; 0x128

00010f64 <strchr@plt>:
   10f64:	add	ip, pc, #0, 12
   10f68:	add	ip, ip, #86016	; 0x15000
   10f6c:	ldr	pc, [ip, #288]!	; 0x120

00010f70 <__errno_location@plt>:
   10f70:	add	ip, pc, #0, 12
   10f74:	add	ip, ip, #86016	; 0x15000
   10f78:	ldr	pc, [ip, #280]!	; 0x118

00010f7c <__cxa_atexit@plt>:
   10f7c:	add	ip, pc, #0, 12
   10f80:	add	ip, ip, #86016	; 0x15000
   10f84:	ldr	pc, [ip, #272]!	; 0x110

00010f88 <memset@plt>:
   10f88:	add	ip, pc, #0, 12
   10f8c:	add	ip, ip, #86016	; 0x15000
   10f90:	ldr	pc, [ip, #264]!	; 0x108

00010f94 <__printf_chk@plt>:
   10f94:	add	ip, pc, #0, 12
   10f98:	add	ip, ip, #86016	; 0x15000
   10f9c:	ldr	pc, [ip, #256]!	; 0x100

00010fa0 <fileno@plt>:
   10fa0:	add	ip, pc, #0, 12
   10fa4:	add	ip, ip, #86016	; 0x15000
   10fa8:	ldr	pc, [ip, #248]!	; 0xf8

00010fac <strtoumax@plt>:
   10fac:	add	ip, pc, #0, 12
   10fb0:	add	ip, ip, #86016	; 0x15000
   10fb4:	ldr	pc, [ip, #240]!	; 0xf0

00010fb8 <__fprintf_chk@plt>:
   10fb8:	add	ip, pc, #0, 12
   10fbc:	add	ip, ip, #86016	; 0x15000
   10fc0:	ldr	pc, [ip, #232]!	; 0xe8

00010fc4 <fclose@plt>:
   10fc4:	add	ip, pc, #0, 12
   10fc8:	add	ip, ip, #86016	; 0x15000
   10fcc:	ldr	pc, [ip, #224]!	; 0xe0

00010fd0 <fseeko64@plt>:
   10fd0:	add	ip, pc, #0, 12
   10fd4:	add	ip, ip, #86016	; 0x15000
   10fd8:	ldr	pc, [ip, #216]!	; 0xd8

00010fdc <setlocale@plt>:
   10fdc:	add	ip, pc, #0, 12
   10fe0:	add	ip, ip, #86016	; 0x15000
   10fe4:	ldr	pc, [ip, #208]!	; 0xd0

00010fe8 <strrchr@plt>:
   10fe8:	add	ip, pc, #0, 12
   10fec:	add	ip, ip, #86016	; 0x15000
   10ff0:	ldr	pc, [ip, #200]!	; 0xc8

00010ff4 <nl_langinfo@plt>:
   10ff4:	add	ip, pc, #0, 12
   10ff8:	add	ip, ip, #86016	; 0x15000
   10ffc:	ldr	pc, [ip, #192]!	; 0xc0

00011000 <sched_getaffinity@plt>:
   11000:	add	ip, pc, #0, 12
   11004:	add	ip, ip, #86016	; 0x15000
   11008:	ldr	pc, [ip, #184]!	; 0xb8

0001100c <bindtextdomain@plt>:
   1100c:	add	ip, pc, #0, 12
   11010:	add	ip, ip, #86016	; 0x15000
   11014:	ldr	pc, [ip, #176]!	; 0xb0

00011018 <fputs@plt>:
   11018:	add	ip, pc, #0, 12
   1101c:	add	ip, ip, #86016	; 0x15000
   11020:	ldr	pc, [ip, #168]!	; 0xa8

00011024 <strncmp@plt>:
   11024:	add	ip, pc, #0, 12
   11028:	add	ip, ip, #86016	; 0x15000
   1102c:	ldr	pc, [ip, #160]!	; 0xa0

00011030 <abort@plt>:
   11030:	add	ip, pc, #0, 12
   11034:	add	ip, ip, #86016	; 0x15000
   11038:	ldr	pc, [ip, #152]!	; 0x98

0001103c <__assert_fail@plt>:
   1103c:	add	ip, pc, #0, 12
   11040:	add	ip, ip, #86016	; 0x15000
   11044:	ldr	pc, [ip, #144]!	; 0x90

Disassembly of section .text:

00011048 <.text>:
   11048:	mov	fp, #0
   1104c:	mov	lr, #0
   11050:	pop	{r1}		; (ldr r1, [sp], #4)
   11054:	mov	r2, sp
   11058:	push	{r2}		; (str r2, [sp, #-4]!)
   1105c:	push	{r0}		; (str r0, [sp, #-4]!)
   11060:	ldr	ip, [pc, #16]	; 11078 <__assert_fail@plt+0x3c>
   11064:	push	{ip}		; (str ip, [sp, #-4]!)
   11068:	ldr	r0, [pc, #12]	; 1107c <__assert_fail@plt+0x40>
   1106c:	ldr	r3, [pc, #12]	; 11080 <__assert_fail@plt+0x44>
   11070:	bl	10ef8 <__libc_start_main@plt>
   11074:	bl	11030 <abort@plt>
   11078:	andeq	r4, r1, r8, lsl fp
   1107c:	andeq	r1, r1, r8, ror r3
   11080:			; <UNDEFINED> instruction: 0x00014ab8
   11084:	ldr	r3, [pc, #20]	; 110a0 <__assert_fail@plt+0x64>
   11088:	ldr	r2, [pc, #20]	; 110a4 <__assert_fail@plt+0x68>
   1108c:	add	r3, pc, r3
   11090:	ldr	r2, [r3, r2]
   11094:	cmp	r2, #0
   11098:	bxeq	lr
   1109c:	b	10f10 <__gmon_start__@plt>
   110a0:	andeq	r4, r1, ip, ror #30
   110a4:	ldrdeq	r0, [r0], -r8
   110a8:	ldr	r0, [pc, #24]	; 110c8 <__assert_fail@plt+0x8c>
   110ac:	ldr	r3, [pc, #24]	; 110cc <__assert_fail@plt+0x90>
   110b0:	cmp	r3, r0
   110b4:	bxeq	lr
   110b8:	ldr	r3, [pc, #16]	; 110d0 <__assert_fail@plt+0x94>
   110bc:	cmp	r3, #0
   110c0:	bxeq	lr
   110c4:	bx	r3
   110c8:	andeq	r6, r2, r0, lsr r1
   110cc:	andeq	r6, r2, r0, lsr r1
   110d0:	andeq	r0, r0, r0
   110d4:	ldr	r0, [pc, #36]	; 11100 <__assert_fail@plt+0xc4>
   110d8:	ldr	r1, [pc, #36]	; 11104 <__assert_fail@plt+0xc8>
   110dc:	sub	r1, r1, r0
   110e0:	asr	r1, r1, #2
   110e4:	add	r1, r1, r1, lsr #31
   110e8:	asrs	r1, r1, #1
   110ec:	bxeq	lr
   110f0:	ldr	r3, [pc, #16]	; 11108 <__assert_fail@plt+0xcc>
   110f4:	cmp	r3, #0
   110f8:	bxeq	lr
   110fc:	bx	r3
   11100:	andeq	r6, r2, r0, lsr r1
   11104:	andeq	r6, r2, r0, lsr r1
   11108:	andeq	r0, r0, r0
   1110c:	push	{r4, lr}
   11110:	ldr	r4, [pc, #24]	; 11130 <__assert_fail@plt+0xf4>
   11114:	ldrb	r3, [r4]
   11118:	cmp	r3, #0
   1111c:	popne	{r4, pc}
   11120:	bl	110a8 <__assert_fail@plt+0x6c>
   11124:	mov	r3, #1
   11128:	strb	r3, [r4]
   1112c:	pop	{r4, pc}
   11130:	andeq	r6, r2, ip, asr #2
   11134:	b	110d4 <__assert_fail@plt+0x98>
   11138:	push	{fp, lr}
   1113c:	mov	fp, sp
   11140:	sub	sp, sp, #56	; 0x38
   11144:	mov	r8, r0
   11148:	cmp	r0, #0
   1114c:	bne	11338 <__assert_fail@plt+0x2fc>
   11150:	movw	r1, #19307	; 0x4b6b
   11154:	mov	r0, #0
   11158:	mov	r2, #5
   1115c:	movt	r1, #1
   11160:	bl	10e5c <dcgettext@plt>
   11164:	mov	r1, r0
   11168:	movw	r0, #24920	; 0x6158
   1116c:	movt	r0, #2
   11170:	ldr	r2, [r0]
   11174:	mov	r0, #1
   11178:	bl	10f94 <__printf_chk@plt>
   1117c:	movw	r1, #19330	; 0x4b82
   11180:	mov	r0, #0
   11184:	mov	r2, #5
   11188:	movt	r1, #1
   1118c:	bl	10e5c <dcgettext@plt>
   11190:	movw	r9, #24900	; 0x6144
   11194:	movt	r9, #2
   11198:	ldr	r1, [r9]
   1119c:	bl	10df0 <fputs_unlocked@plt>
   111a0:	movw	r1, #19458	; 0x4c02
   111a4:	mov	r0, #0
   111a8:	mov	r2, #5
   111ac:	movt	r1, #1
   111b0:	bl	10e5c <dcgettext@plt>
   111b4:	ldr	r1, [r9]
   111b8:	bl	10df0 <fputs_unlocked@plt>
   111bc:	movw	r1, #19575	; 0x4c77
   111c0:	mov	r0, #0
   111c4:	mov	r2, #5
   111c8:	movt	r1, #1
   111cc:	bl	10e5c <dcgettext@plt>
   111d0:	ldr	r1, [r9]
   111d4:	bl	10df0 <fputs_unlocked@plt>
   111d8:	movw	r1, #19620	; 0x4ca4
   111dc:	mov	r0, #0
   111e0:	mov	r2, #5
   111e4:	movt	r1, #1
   111e8:	bl	10e5c <dcgettext@plt>
   111ec:	ldr	r1, [r9]
   111f0:	bl	10df0 <fputs_unlocked@plt>
   111f4:	movw	r0, #20192	; 0x4ee0
   111f8:	mov	r6, sp
   111fc:	movt	r0, #1
   11200:	mov	r1, r6
   11204:	ldm	r0!, {r2, r3, r4, r5}
   11208:	stmia	r1!, {r2, r3, r4, r5}
   1120c:	ldm	r0!, {r2, r3, r4, r5, r7}
   11210:	stmia	r1!, {r2, r3, r4, r5, r7}
   11214:	ldm	r0, {r2, r3, r4, r5, r7}
   11218:	stm	r1, {r2, r3, r4, r5, r7}
   1121c:	movw	r1, #19773	; 0x4d3d
   11220:	movw	r5, #19674	; 0x4cda
   11224:	movt	r1, #1
   11228:	movt	r5, #1
   1122c:	mov	r0, r5
   11230:	bl	10e08 <strcmp@plt>
   11234:	cmp	r0, #0
   11238:	ldrne	r1, [r6, #8]!
   1123c:	cmpne	r1, #0
   11240:	bne	1122c <__assert_fail@plt+0x1f0>
   11244:	movw	r1, #19868	; 0x4d9c
   11248:	ldr	r6, [r6, #4]
   1124c:	mov	r0, #0
   11250:	mov	r2, #5
   11254:	movt	r1, #1
   11258:	bl	10e5c <dcgettext@plt>
   1125c:	movw	r2, #19704	; 0x4cf8
   11260:	movw	r3, #19891	; 0x4db3
   11264:	mov	r1, r0
   11268:	mov	r0, #1
   1126c:	movt	r2, #1
   11270:	movt	r3, #1
   11274:	bl	10f94 <__printf_chk@plt>
   11278:	cmp	r6, #0
   1127c:	mov	r0, #5
   11280:	mov	r1, #0
   11284:	moveq	r6, r5
   11288:	bl	10fdc <setlocale@plt>
   1128c:	cmp	r0, #0
   11290:	beq	112c8 <__assert_fail@plt+0x28c>
   11294:	movw	r1, #19931	; 0x4ddb
   11298:	mov	r2, #3
   1129c:	movt	r1, #1
   112a0:	bl	11024 <strncmp@plt>
   112a4:	cmp	r0, #0
   112a8:	beq	112c8 <__assert_fail@plt+0x28c>
   112ac:	movw	r1, #19935	; 0x4ddf
   112b0:	mov	r0, #0
   112b4:	mov	r2, #5
   112b8:	movt	r1, #1
   112bc:	bl	10e5c <dcgettext@plt>
   112c0:	ldr	r1, [r9]
   112c4:	bl	10df0 <fputs_unlocked@plt>
   112c8:	movw	r1, #20006	; 0x4e26
   112cc:	mov	r0, #0
   112d0:	mov	r2, #5
   112d4:	movt	r1, #1
   112d8:	bl	10e5c <dcgettext@plt>
   112dc:	movw	r2, #19891	; 0x4db3
   112e0:	mov	r1, r0
   112e4:	mov	r0, #1
   112e8:	mov	r3, r5
   112ec:	movt	r2, #1
   112f0:	bl	10f94 <__printf_chk@plt>
   112f4:	movw	r1, #20033	; 0x4e41
   112f8:	mov	r0, #0
   112fc:	mov	r2, #5
   11300:	movt	r1, #1
   11304:	bl	10e5c <dcgettext@plt>
   11308:	mov	r1, r0
   1130c:	movw	r0, #19801	; 0x4d59
   11310:	movw	r3, #19457	; 0x4c01
   11314:	cmp	r6, r5
   11318:	mov	r2, r6
   1131c:	movt	r0, #1
   11320:	movt	r3, #1
   11324:	moveq	r3, r0
   11328:	mov	r0, #1
   1132c:	bl	10f94 <__printf_chk@plt>
   11330:	mov	r0, r8
   11334:	bl	10f34 <exit@plt>
   11338:	movw	r0, #24896	; 0x6140
   1133c:	movw	r1, #19268	; 0x4b44
   11340:	mov	r2, #5
   11344:	movt	r0, #2
   11348:	movt	r1, #1
   1134c:	ldr	r5, [r0]
   11350:	mov	r0, #0
   11354:	bl	10e5c <dcgettext@plt>
   11358:	mov	r2, r0
   1135c:	movw	r0, #24920	; 0x6158
   11360:	mov	r1, #1
   11364:	movt	r0, #2
   11368:	ldr	r3, [r0]
   1136c:	mov	r0, r5
   11370:	bl	10fb8 <__fprintf_chk@plt>
   11374:	b	11330 <__assert_fail@plt+0x2f4>
   11378:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1137c:	add	fp, sp, #28
   11380:	sub	sp, sp, #20
   11384:	mov	r5, r0
   11388:	ldr	r0, [r1]
   1138c:	mov	r4, r1
   11390:	bl	11830 <__assert_fail@plt+0x7f4>
   11394:	movw	sl, #19457	; 0x4c01
   11398:	mov	r0, #6
   1139c:	movt	sl, #1
   113a0:	mov	r1, sl
   113a4:	bl	10fdc <setlocale@plt>
   113a8:	movw	r6, #19708	; 0x4cfc
   113ac:	movw	r1, #19680	; 0x4ce0
   113b0:	movt	r6, #1
   113b4:	movt	r1, #1
   113b8:	mov	r0, r6
   113bc:	bl	1100c <bindtextdomain@plt>
   113c0:	mov	r0, r6
   113c4:	bl	10e80 <textdomain@plt>
   113c8:	movw	r0, #5504	; 0x1580
   113cc:	movt	r0, #1
   113d0:	bl	14b1c <__assert_fail@plt+0x3ae0>
   113d4:	movw	r8, #20112	; 0x4e90
   113d8:	mov	r7, #2
   113dc:	mov	r6, #0
   113e0:	movt	r8, #1
   113e4:	mov	r9, r7
   113e8:	mov	r7, #0
   113ec:	mov	r0, r5
   113f0:	mov	r1, r4
   113f4:	mov	r2, sl
   113f8:	mov	r3, r8
   113fc:	str	r7, [sp]
   11400:	bl	10f1c <getopt_long@plt>
   11404:	cmp	r0, #255	; 0xff
   11408:	ble	11474 <__assert_fail@plt+0x438>
   1140c:	cmp	r0, #256	; 0x100
   11410:	beq	113e4 <__assert_fail@plt+0x3a8>
   11414:	movw	r1, #257	; 0x101
   11418:	cmp	r0, r1
   1141c:	bne	11558 <__assert_fail@plt+0x51c>
   11420:	movw	r0, #24904	; 0x6148
   11424:	movw	r1, #19736	; 0x4d18
   11428:	mov	r2, #5
   1142c:	movt	r0, #2
   11430:	movt	r1, #1
   11434:	ldr	r6, [r0]
   11438:	mov	r0, #0
   1143c:	bl	10e5c <dcgettext@plt>
   11440:	mvn	r1, #0
   11444:	mov	r2, #0
   11448:	mov	r3, #0
   1144c:	str	r1, [sp]
   11450:	mov	r1, #0
   11454:	stmib	sp, {r1, sl}
   11458:	str	r0, [sp, #12]
   1145c:	mov	r0, r6
   11460:	str	r1, [sp, #16]
   11464:	bl	13d90 <__assert_fail@plt+0x2d54>
   11468:	mov	r6, r0
   1146c:	mov	r7, r9
   11470:	b	113e4 <__assert_fail@plt+0x3a8>
   11474:	cmn	r0, #1
   11478:	bne	114c0 <__assert_fail@plt+0x484>
   1147c:	movw	r7, #24888	; 0x6138
   11480:	movt	r7, #2
   11484:	ldr	r0, [r7]
   11488:	cmp	r0, r5
   1148c:	bne	11520 <__assert_fail@plt+0x4e4>
   11490:	mov	r0, r9
   11494:	bl	11668 <__assert_fail@plt+0x62c>
   11498:	movw	r1, #19768	; 0x4d38
   1149c:	subs	r2, r0, r6
   114a0:	mov	r0, #1
   114a4:	movt	r1, #1
   114a8:	movls	r2, r0
   114ac:	mov	r0, #1
   114b0:	bl	10f94 <__printf_chk@plt>
   114b4:	mov	r0, #0
   114b8:	sub	sp, fp, #28
   114bc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   114c0:	cmn	r0, #3
   114c4:	bne	11510 <__assert_fail@plt+0x4d4>
   114c8:	movw	r0, #24808	; 0x60e8
   114cc:	movw	r2, #19718	; 0x4d06
   114d0:	mov	r1, #0
   114d4:	movt	r0, #2
   114d8:	movt	r2, #1
   114dc:	str	r1, [sp, #4]
   114e0:	movw	r1, #19674	; 0x4cda
   114e4:	movt	r1, #1
   114e8:	ldr	r3, [r0]
   114ec:	movw	r0, #24900	; 0x6144
   114f0:	str	r2, [sp]
   114f4:	movw	r2, #19704	; 0x4cf8
   114f8:	movt	r0, #2
   114fc:	movt	r2, #1
   11500:	ldr	r0, [r0]
   11504:	bl	13720 <__assert_fail@plt+0x26e4>
   11508:	mov	r0, #0
   1150c:	bl	10f34 <exit@plt>
   11510:	cmn	r0, #2
   11514:	bne	11558 <__assert_fail@plt+0x51c>
   11518:	mov	r0, #0
   1151c:	bl	11138 <__assert_fail@plt+0xfc>
   11520:	movw	r1, #19751	; 0x4d27
   11524:	mov	r0, #0
   11528:	mov	r2, #5
   1152c:	movt	r1, #1
   11530:	bl	10e5c <dcgettext@plt>
   11534:	mov	r5, r0
   11538:	ldr	r0, [r7]
   1153c:	ldr	r0, [r4, r0, lsl #2]
   11540:	bl	1321c <__assert_fail@plt+0x21e0>
   11544:	mov	r3, r0
   11548:	mov	r0, #0
   1154c:	mov	r1, #0
   11550:	mov	r2, r5
   11554:	bl	10ed4 <error@plt>
   11558:	mov	r0, #1
   1155c:	bl	11138 <__assert_fail@plt+0xfc>
   11560:	movw	r1, #24912	; 0x6150
   11564:	movt	r1, #2
   11568:	str	r0, [r1]
   1156c:	bx	lr
   11570:	movw	r1, #24916	; 0x6154
   11574:	movt	r1, #2
   11578:	strb	r0, [r1]
   1157c:	bx	lr
   11580:	push	{r4, r5, r6, sl, fp, lr}
   11584:	add	fp, sp, #16
   11588:	sub	sp, sp, #8
   1158c:	movw	r0, #24900	; 0x6144
   11590:	movt	r0, #2
   11594:	ldr	r0, [r0]
   11598:	bl	14528 <__assert_fail@plt+0x34ec>
   1159c:	cmp	r0, #0
   115a0:	beq	115c8 <__assert_fail@plt+0x58c>
   115a4:	movw	r0, #24916	; 0x6154
   115a8:	movt	r0, #2
   115ac:	ldrb	r0, [r0]
   115b0:	cmp	r0, #0
   115b4:	beq	115e8 <__assert_fail@plt+0x5ac>
   115b8:	bl	10f70 <__errno_location@plt>
   115bc:	ldr	r0, [r0]
   115c0:	cmp	r0, #32
   115c4:	bne	115e8 <__assert_fail@plt+0x5ac>
   115c8:	movw	r0, #24896	; 0x6140
   115cc:	movt	r0, #2
   115d0:	ldr	r0, [r0]
   115d4:	bl	14528 <__assert_fail@plt+0x34ec>
   115d8:	cmp	r0, #0
   115dc:	subeq	sp, fp, #16
   115e0:	popeq	{r4, r5, r6, sl, fp, pc}
   115e4:	b	11658 <__assert_fail@plt+0x61c>
   115e8:	movw	r1, #20263	; 0x4f27
   115ec:	mov	r0, #0
   115f0:	mov	r2, #5
   115f4:	movt	r1, #1
   115f8:	bl	10e5c <dcgettext@plt>
   115fc:	mov	r4, r0
   11600:	movw	r0, #24912	; 0x6150
   11604:	movt	r0, #2
   11608:	ldr	r6, [r0]
   1160c:	bl	10f70 <__errno_location@plt>
   11610:	ldr	r5, [r0]
   11614:	cmp	r6, #0
   11618:	bne	11634 <__assert_fail@plt+0x5f8>
   1161c:	movw	r2, #20279	; 0x4f37
   11620:	mov	r0, #0
   11624:	mov	r1, r5
   11628:	mov	r3, r4
   1162c:	movt	r2, #1
   11630:	b	11654 <__assert_fail@plt+0x618>
   11634:	mov	r0, r6
   11638:	bl	12fdc <__assert_fail@plt+0x1fa0>
   1163c:	movw	r2, #20275	; 0x4f33
   11640:	mov	r3, r0
   11644:	str	r4, [sp]
   11648:	mov	r0, #0
   1164c:	mov	r1, r5
   11650:	movt	r2, #1
   11654:	bl	10ed4 <error@plt>
   11658:	movw	r0, #24812	; 0x60ec
   1165c:	movt	r0, #2
   11660:	ldr	r0, [r0]
   11664:	bl	10e2c <_exit@plt>
   11668:	push	{r4, r5, fp, lr}
   1166c:	add	fp, sp, #8
   11670:	mvn	r4, #0
   11674:	cmp	r0, #2
   11678:	bne	116c8 <__assert_fail@plt+0x68c>
   1167c:	movw	r0, #20282	; 0x4f3a
   11680:	movt	r0, #1
   11684:	bl	10ee0 <getenv@plt>
   11688:	bl	11744 <__assert_fail@plt+0x708>
   1168c:	mov	r5, r0
   11690:	movw	r0, #20298	; 0x4f4a
   11694:	movt	r0, #1
   11698:	bl	10ee0 <getenv@plt>
   1169c:	bl	11744 <__assert_fail@plt+0x708>
   116a0:	cmp	r0, #0
   116a4:	mov	r1, r0
   116a8:	mvneq	r1, #0
   116ac:	cmp	r5, r1
   116b0:	mov	r4, r1
   116b4:	movcc	r4, r5
   116b8:	cmp	r5, #0
   116bc:	bne	1173c <__assert_fail@plt+0x700>
   116c0:	mov	r0, #1
   116c4:	mov	r4, r1
   116c8:	cmp	r0, #1
   116cc:	bne	116f8 <__assert_fail@plt+0x6bc>
   116d0:	bl	117ec <__assert_fail@plt+0x7b0>
   116d4:	mov	r5, r0
   116d8:	cmp	r0, #0
   116dc:	bne	11734 <__assert_fail@plt+0x6f8>
   116e0:	mov	r0, #84	; 0x54
   116e4:	bl	10e68 <sysconf@plt>
   116e8:	cmp	r0, #0
   116ec:	mov	r5, r0
   116f0:	movle	r5, #1
   116f4:	b	11734 <__assert_fail@plt+0x6f8>
   116f8:	mov	r0, #83	; 0x53
   116fc:	bl	10e68 <sysconf@plt>
   11700:	mov	r5, r0
   11704:	sub	r0, r0, #1
   11708:	cmp	r0, #1
   1170c:	bhi	11720 <__assert_fail@plt+0x6e4>
   11710:	bl	117ec <__assert_fail@plt+0x7b0>
   11714:	cmp	r0, r5
   11718:	bhi	11724 <__assert_fail@plt+0x6e8>
   1171c:	b	11734 <__assert_fail@plt+0x6f8>
   11720:	mov	r0, r5
   11724:	cmp	r0, #0
   11728:	mov	r5, r0
   1172c:	bgt	11734 <__assert_fail@plt+0x6f8>
   11730:	mov	r5, #1
   11734:	cmp	r5, r4
   11738:	movcc	r4, r5
   1173c:	mov	r0, r4
   11740:	pop	{r4, r5, fp, pc}
   11744:	push	{fp, lr}
   11748:	mov	fp, sp
   1174c:	sub	sp, sp, #8
   11750:	mov	r2, r0
   11754:	mov	r0, #0
   11758:	cmp	r2, #0
   1175c:	beq	117e4 <__assert_fail@plt+0x7a8>
   11760:	ldrb	r1, [r2]
   11764:	sub	r3, r1, #9
   11768:	cmp	r3, #5
   1176c:	bcs	11778 <__assert_fail@plt+0x73c>
   11770:	add	r2, r2, #1
   11774:	b	11760 <__assert_fail@plt+0x724>
   11778:	cmp	r1, #32
   1177c:	beq	11770 <__assert_fail@plt+0x734>
   11780:	sub	r1, r1, #48	; 0x30
   11784:	cmp	r1, #9
   11788:	bhi	117e4 <__assert_fail@plt+0x7a8>
   1178c:	mov	r0, #0
   11790:	add	r1, sp, #4
   11794:	str	r0, [sp, #4]
   11798:	mov	r0, r2
   1179c:	mov	r2, #10
   117a0:	bl	10f4c <strtoul@plt>
   117a4:	ldr	r1, [sp, #4]
   117a8:	cmp	r1, #0
   117ac:	beq	117e0 <__assert_fail@plt+0x7a4>
   117b0:	ldrb	r2, [r1]
   117b4:	sub	r3, r2, #9
   117b8:	cmp	r3, #5
   117bc:	bcs	117c8 <__assert_fail@plt+0x78c>
   117c0:	add	r1, r1, #1
   117c4:	b	117b0 <__assert_fail@plt+0x774>
   117c8:	cmp	r2, #32
   117cc:	beq	117c0 <__assert_fail@plt+0x784>
   117d0:	cmp	r2, #0
   117d4:	cmpne	r2, #44	; 0x2c
   117d8:	beq	117e4 <__assert_fail@plt+0x7a8>
   117dc:	str	r1, [sp, #4]
   117e0:	mov	r0, #0
   117e4:	mov	sp, fp
   117e8:	pop	{fp, pc}
   117ec:	push	{r4, sl, fp, lr}
   117f0:	add	fp, sp, #8
   117f4:	sub	sp, sp, #128	; 0x80
   117f8:	mov	r2, sp
   117fc:	mov	r0, #0
   11800:	mov	r1, #128	; 0x80
   11804:	mov	r4, #0
   11808:	bl	11000 <sched_getaffinity@plt>
   1180c:	cmp	r0, #0
   11810:	bne	11824 <__assert_fail@plt+0x7e8>
   11814:	mov	r1, sp
   11818:	mov	r0, #128	; 0x80
   1181c:	bl	10e50 <__sched_cpucount@plt>
   11820:	mov	r4, r0
   11824:	mov	r0, r4
   11828:	sub	sp, fp, #8
   1182c:	pop	{r4, sl, fp, pc}
   11830:	push	{r4, r5, fp, lr}
   11834:	add	fp, sp, #8
   11838:	cmp	r0, #0
   1183c:	beq	118d0 <__assert_fail@plt+0x894>
   11840:	mov	r1, #47	; 0x2f
   11844:	mov	r4, r0
   11848:	bl	10fe8 <strrchr@plt>
   1184c:	cmp	r0, #0
   11850:	mov	r5, r4
   11854:	addne	r5, r0, #1
   11858:	sub	r0, r5, r4
   1185c:	cmp	r0, #7
   11860:	blt	118b4 <__assert_fail@plt+0x878>
   11864:	movw	r1, #20371	; 0x4f93
   11868:	sub	r0, r5, #7
   1186c:	mov	r2, #7
   11870:	movt	r1, #1
   11874:	bl	11024 <strncmp@plt>
   11878:	cmp	r0, #0
   1187c:	bne	118b4 <__assert_fail@plt+0x878>
   11880:	movw	r1, #20379	; 0x4f9b
   11884:	mov	r0, r5
   11888:	mov	r2, #3
   1188c:	movt	r1, #1
   11890:	bl	11024 <strncmp@plt>
   11894:	cmp	r0, #0
   11898:	beq	118a4 <__assert_fail@plt+0x868>
   1189c:	mov	r4, r5
   118a0:	b	118b4 <__assert_fail@plt+0x878>
   118a4:	movw	r0, #24880	; 0x6130
   118a8:	add	r4, r5, #3
   118ac:	movt	r0, #2
   118b0:	str	r4, [r0]
   118b4:	movw	r0, #24884	; 0x6134
   118b8:	movt	r0, #2
   118bc:	str	r4, [r0]
   118c0:	movw	r0, #24920	; 0x6158
   118c4:	movt	r0, #2
   118c8:	str	r4, [r0]
   118cc:	pop	{r4, r5, fp, pc}
   118d0:	movw	r0, #24896	; 0x6140
   118d4:	movt	r0, #2
   118d8:	ldr	r1, [r0]
   118dc:	movw	r0, #20315	; 0x4f5b
   118e0:	movt	r0, #1
   118e4:	bl	11018 <fputs@plt>
   118e8:	bl	11030 <abort@plt>
   118ec:	push	{r4, r5, r6, sl, fp, lr}
   118f0:	add	fp, sp, #16
   118f4:	mov	r4, r0
   118f8:	movw	r0, #24928	; 0x6160
   118fc:	movt	r0, #2
   11900:	cmp	r4, #0
   11904:	moveq	r4, r0
   11908:	bl	10f70 <__errno_location@plt>
   1190c:	ldr	r6, [r0]
   11910:	mov	r5, r0
   11914:	mov	r0, r4
   11918:	mov	r1, #48	; 0x30
   1191c:	bl	13b78 <__assert_fail@plt+0x2b3c>
   11920:	str	r6, [r5]
   11924:	pop	{r4, r5, r6, sl, fp, pc}
   11928:	movw	r1, #24928	; 0x6160
   1192c:	cmp	r0, #0
   11930:	movt	r1, #2
   11934:	movne	r1, r0
   11938:	ldr	r0, [r1]
   1193c:	bx	lr
   11940:	movw	r2, #24928	; 0x6160
   11944:	cmp	r0, #0
   11948:	movt	r2, #2
   1194c:	movne	r2, r0
   11950:	str	r1, [r2]
   11954:	bx	lr
   11958:	movw	r3, #24928	; 0x6160
   1195c:	cmp	r0, #0
   11960:	and	r2, r2, #1
   11964:	movt	r3, #2
   11968:	movne	r3, r0
   1196c:	ubfx	r0, r1, #5, #3
   11970:	and	r1, r1, #31
   11974:	add	ip, r3, r0, lsl #2
   11978:	mov	r0, #1
   1197c:	ldr	r3, [ip, #8]
   11980:	and	r0, r0, r3, lsr r1
   11984:	eor	r2, r0, r2
   11988:	eor	r1, r3, r2, lsl r1
   1198c:	str	r1, [ip, #8]
   11990:	bx	lr
   11994:	movw	r2, #24928	; 0x6160
   11998:	cmp	r0, #0
   1199c:	movt	r2, #2
   119a0:	movne	r2, r0
   119a4:	ldr	r0, [r2, #4]
   119a8:	str	r1, [r2, #4]
   119ac:	bx	lr
   119b0:	push	{fp, lr}
   119b4:	mov	fp, sp
   119b8:	movw	r3, #24928	; 0x6160
   119bc:	cmp	r0, #0
   119c0:	movt	r3, #2
   119c4:	movne	r3, r0
   119c8:	cmp	r1, #0
   119cc:	mov	r0, #10
   119d0:	cmpne	r2, #0
   119d4:	str	r0, [r3]
   119d8:	bne	119e0 <__assert_fail@plt+0x9a4>
   119dc:	bl	11030 <abort@plt>
   119e0:	str	r1, [r3, #40]	; 0x28
   119e4:	str	r2, [r3, #44]	; 0x2c
   119e8:	pop	{fp, pc}
   119ec:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   119f0:	add	fp, sp, #28
   119f4:	sub	sp, sp, #20
   119f8:	mov	r7, r0
   119fc:	ldr	r0, [fp, #8]
   11a00:	movw	r5, #24928	; 0x6160
   11a04:	mov	r8, r3
   11a08:	mov	r9, r2
   11a0c:	mov	sl, r1
   11a10:	movt	r5, #2
   11a14:	cmp	r0, #0
   11a18:	movne	r5, r0
   11a1c:	bl	10f70 <__errno_location@plt>
   11a20:	ldr	r2, [r5, #40]	; 0x28
   11a24:	ldr	r3, [r5, #44]	; 0x2c
   11a28:	mov	r4, r0
   11a2c:	ldm	r5, {r0, r1}
   11a30:	add	r5, r5, #8
   11a34:	ldr	r6, [r4]
   11a38:	stm	sp, {r0, r1, r5}
   11a3c:	mov	r0, r7
   11a40:	mov	r1, sl
   11a44:	str	r2, [sp, #12]
   11a48:	str	r3, [sp, #16]
   11a4c:	mov	r2, r9
   11a50:	mov	r3, r8
   11a54:	bl	11a64 <__assert_fail@plt+0xa28>
   11a58:	str	r6, [r4]
   11a5c:	sub	sp, fp, #28
   11a60:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11a64:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11a68:	add	fp, sp, #28
   11a6c:	sub	sp, sp, #156	; 0x9c
   11a70:	mov	r5, r0
   11a74:	add	r0, r2, #1
   11a78:	mov	r6, r1
   11a7c:	mov	sl, r3
   11a80:	str	r2, [fp, #-80]	; 0xffffffb0
   11a84:	str	r0, [sp, #72]	; 0x48
   11a88:	ldr	r0, [fp, #12]
   11a8c:	and	r1, r0, #1
   11a90:	str	r1, [sp, #32]
   11a94:	and	r1, r0, #4
   11a98:	str	r1, [sp, #28]
   11a9c:	ubfx	r9, r0, #1, #1
   11aa0:	bl	10ea4 <__ctype_get_mb_cur_max@plt>
   11aa4:	str	r0, [sp, #40]	; 0x28
   11aa8:	ldr	r0, [fp, #24]
   11aac:	ldr	r7, [fp, #8]
   11ab0:	mov	r1, #0
   11ab4:	mov	lr, #0
   11ab8:	str	r5, [fp, #-84]	; 0xffffffac
   11abc:	str	r1, [sp, #60]	; 0x3c
   11ac0:	mov	r1, #1
   11ac4:	str	r1, [fp, #-48]	; 0xffffffd0
   11ac8:	str	r0, [sp, #80]	; 0x50
   11acc:	ldr	r0, [fp, #20]
   11ad0:	str	r0, [sp, #76]	; 0x4c
   11ad4:	mov	r0, #0
   11ad8:	str	r0, [sp, #56]	; 0x38
   11adc:	mov	r0, #0
   11ae0:	str	r0, [fp, #-88]	; 0xffffffa8
   11ae4:	mov	r0, #0
   11ae8:	str	r0, [fp, #-72]	; 0xffffffb8
   11aec:	mov	r0, #0
   11af0:	cmp	r7, #10
   11af4:	bhi	12ad0 <__assert_fail@plt+0x1a94>
   11af8:	add	r1, pc, #24
   11afc:	ldr	r4, [fp, #-80]	; 0xffffffb0
   11b00:	mov	ip, r6
   11b04:	mov	r8, #0
   11b08:	mov	r2, #1
   11b0c:	mov	r6, #0
   11b10:	mov	r3, sl
   11b14:	ldr	pc, [r1, r7, lsl #2]
   11b18:	andeq	r1, r1, r4, lsl #24
   11b1c:	andeq	r1, r1, r8, asr ip
   11b20:	andeq	r1, r1, r8, lsl ip
   11b24:	strdeq	r1, [r1], -ip
   11b28:	andeq	r1, r1, ip, asr #24
   11b2c:	andeq	r1, r1, r0, lsl #25
   11b30:	andeq	r1, r1, r8, lsr #24
   11b34:	andeq	r1, r1, r4, lsl #26
   11b38:	andeq	r1, r1, r4, asr #22
   11b3c:	andeq	r1, r1, r4, asr #22
   11b40:	andeq	r1, r1, r4, lsl #23
   11b44:	movw	r0, #20461	; 0x4fed
   11b48:	mov	r1, r7
   11b4c:	mov	r6, r5
   11b50:	mov	r4, ip
   11b54:	mov	r5, lr
   11b58:	movt	r0, #1
   11b5c:	bl	13234 <__assert_fail@plt+0x21f8>
   11b60:	str	r0, [sp, #76]	; 0x4c
   11b64:	movw	r0, #20463	; 0x4fef
   11b68:	mov	r1, r7
   11b6c:	movt	r0, #1
   11b70:	bl	13234 <__assert_fail@plt+0x21f8>
   11b74:	mov	lr, r5
   11b78:	mov	r5, r6
   11b7c:	mov	ip, r4
   11b80:	str	r0, [sp, #80]	; 0x50
   11b84:	mov	r8, #0
   11b88:	tst	r9, #1
   11b8c:	str	lr, [sp, #44]	; 0x2c
   11b90:	bne	11bc8 <__assert_fail@plt+0xb8c>
   11b94:	ldr	r0, [sp, #76]	; 0x4c
   11b98:	ldrb	r0, [r0]
   11b9c:	cmp	r0, #0
   11ba0:	beq	11bc8 <__assert_fail@plt+0xb8c>
   11ba4:	ldr	r1, [sp, #76]	; 0x4c
   11ba8:	mov	r8, #0
   11bac:	add	r1, r1, #1
   11bb0:	cmp	r8, ip
   11bb4:	strbcc	r0, [r5, r8]
   11bb8:	ldrb	r0, [r1, r8]
   11bbc:	add	r8, r8, #1
   11bc0:	cmp	r0, #0
   11bc4:	bne	11bb0 <__assert_fail@plt+0xb74>
   11bc8:	ldr	r6, [sp, #80]	; 0x50
   11bcc:	mov	r4, ip
   11bd0:	mov	r0, r6
   11bd4:	bl	10f58 <strlen@plt>
   11bd8:	mov	ip, r4
   11bdc:	ldr	r4, [fp, #-80]	; 0xffffffb0
   11be0:	ldr	lr, [sp, #44]	; 0x2c
   11be4:	str	r6, [fp, #-88]	; 0xffffffa8
   11be8:	str	r0, [fp, #-72]	; 0xffffffb8
   11bec:	mov	r2, #1
   11bf0:	mov	r6, r9
   11bf4:	mov	r3, sl
   11bf8:	b	11d04 <__assert_fail@plt+0xcc8>
   11bfc:	mov	r0, #1
   11c00:	b	11c58 <__assert_fail@plt+0xc1c>
   11c04:	mov	r7, #0
   11c08:	mov	r8, #0
   11c0c:	mov	r2, r0
   11c10:	mov	r6, #0
   11c14:	b	11d04 <__assert_fail@plt+0xcc8>
   11c18:	tst	r9, #1
   11c1c:	bne	11c58 <__assert_fail@plt+0xc1c>
   11c20:	mov	r2, r0
   11c24:	b	11cb0 <__assert_fail@plt+0xc74>
   11c28:	mov	r0, #1
   11c2c:	mov	r8, #0
   11c30:	mov	r7, #5
   11c34:	mov	r2, #1
   11c38:	str	r0, [fp, #-72]	; 0xffffffb8
   11c3c:	movw	r0, #20459	; 0x4feb
   11c40:	movt	r0, #1
   11c44:	str	r0, [fp, #-88]	; 0xffffffa8
   11c48:	b	11c78 <__assert_fail@plt+0xc3c>
   11c4c:	mov	r2, #1
   11c50:	tst	r9, #1
   11c54:	beq	11cb0 <__assert_fail@plt+0xc74>
   11c58:	mov	r1, #1
   11c5c:	mov	r8, #0
   11c60:	mov	r7, #2
   11c64:	mov	r2, r0
   11c68:	str	r1, [fp, #-72]	; 0xffffffb8
   11c6c:	movw	r1, #20463	; 0x4fef
   11c70:	movt	r1, #1
   11c74:	str	r1, [fp, #-88]	; 0xffffffa8
   11c78:	mov	r6, #1
   11c7c:	b	11d04 <__assert_fail@plt+0xcc8>
   11c80:	tst	r9, #1
   11c84:	beq	11cd4 <__assert_fail@plt+0xc98>
   11c88:	mov	r0, #1
   11c8c:	mov	r8, #0
   11c90:	mov	r2, #1
   11c94:	mov	r6, #1
   11c98:	mov	r7, #5
   11c9c:	str	r0, [fp, #-72]	; 0xffffffb8
   11ca0:	movw	r0, #20459	; 0x4feb
   11ca4:	movt	r0, #1
   11ca8:	str	r0, [fp, #-88]	; 0xffffffa8
   11cac:	b	11d04 <__assert_fail@plt+0xcc8>
   11cb0:	cmp	ip, #0
   11cb4:	mov	r8, #1
   11cb8:	mov	r6, #0
   11cbc:	mov	r7, #2
   11cc0:	movne	r0, #39	; 0x27
   11cc4:	strbne	r0, [r5]
   11cc8:	movw	r0, #20463	; 0x4fef
   11ccc:	movt	r0, #1
   11cd0:	b	11cf8 <__assert_fail@plt+0xcbc>
   11cd4:	cmp	ip, #0
   11cd8:	mov	r8, #1
   11cdc:	mov	r2, #1
   11ce0:	mov	r7, #5
   11ce4:	mov	r6, #0
   11ce8:	movne	r0, #34	; 0x22
   11cec:	strbne	r0, [r5]
   11cf0:	movw	r0, #20459	; 0x4feb
   11cf4:	movt	r0, #1
   11cf8:	str	r0, [fp, #-88]	; 0xffffffa8
   11cfc:	mov	r0, #1
   11d00:	str	r0, [fp, #-72]	; 0xffffffb8
   11d04:	ldr	r0, [fp, #-72]	; 0xffffffb8
   11d08:	str	r7, [fp, #-68]	; 0xffffffbc
   11d0c:	str	r6, [fp, #-76]	; 0xffffffb4
   11d10:	str	r2, [sp, #84]	; 0x54
   11d14:	cmp	r0, #0
   11d18:	movwne	r0, #1
   11d1c:	and	r1, r0, r6
   11d20:	and	r1, r2, r1
   11d24:	str	r1, [sp, #48]	; 0x30
   11d28:	sub	r1, r7, #2
   11d2c:	clz	r1, r1
   11d30:	lsr	r1, r1, #5
   11d34:	and	r1, r1, r6
   11d38:	str	r1, [sp, #64]	; 0x40
   11d3c:	subs	r1, r7, #2
   11d40:	eor	r7, r6, #1
   11d44:	movwne	r1, #1
   11d48:	str	r7, [sp, #92]	; 0x5c
   11d4c:	orr	r7, r1, r7
   11d50:	and	r1, r1, r2
   11d54:	and	r0, r0, r1
   11d58:	str	r7, [sp, #68]	; 0x44
   11d5c:	mov	r7, #0
   11d60:	str	r0, [fp, #-60]	; 0xffffffc4
   11d64:	orr	r0, r1, r6
   11d68:	ldr	r1, [fp, #16]
   11d6c:	eor	r0, r0, #1
   11d70:	clz	r1, r1
   11d74:	lsr	r1, r1, #5
   11d78:	orr	r0, r1, r0
   11d7c:	str	r0, [fp, #-64]	; 0xffffffc0
   11d80:	eor	r0, r2, #1
   11d84:	str	r0, [sp, #52]	; 0x34
   11d88:	cmn	r3, #1
   11d8c:	beq	11d9c <__assert_fail@plt+0xd60>
   11d90:	cmp	r7, r3
   11d94:	bne	11da8 <__assert_fail@plt+0xd6c>
   11d98:	b	12904 <__assert_fail@plt+0x18c8>
   11d9c:	ldrb	r0, [r4, r7]
   11da0:	cmp	r0, #0
   11da4:	beq	1290c <__assert_fail@plt+0x18d0>
   11da8:	ldr	r0, [fp, #-60]	; 0xffffffc4
   11dac:	cmp	r0, #0
   11db0:	beq	11df8 <__assert_fail@plt+0xdbc>
   11db4:	ldr	r0, [fp, #-72]	; 0xffffffb8
   11db8:	add	r5, r7, r0
   11dbc:	cmp	r0, #2
   11dc0:	bcc	11e0c <__assert_fail@plt+0xdd0>
   11dc4:	mov	r0, #0
   11dc8:	cmn	r3, #1
   11dcc:	str	r0, [fp, #-56]	; 0xffffffc8
   11dd0:	bne	11e14 <__assert_fail@plt+0xdd8>
   11dd4:	mov	r0, r4
   11dd8:	mov	r4, ip
   11ddc:	mov	r6, lr
   11de0:	bl	10f58 <strlen@plt>
   11de4:	mov	ip, r4
   11de8:	ldr	r4, [fp, #-80]	; 0xffffffb0
   11dec:	mov	lr, r6
   11df0:	mov	r3, r0
   11df4:	b	11e14 <__assert_fail@plt+0xdd8>
   11df8:	mov	r0, #0
   11dfc:	mov	sl, r3
   11e00:	str	r0, [fp, #-56]	; 0xffffffc8
   11e04:	mov	r0, #0
   11e08:	b	11e80 <__assert_fail@plt+0xe44>
   11e0c:	mov	r0, #0
   11e10:	str	r0, [fp, #-56]	; 0xffffffc8
   11e14:	cmp	r5, r3
   11e18:	bls	11e2c <__assert_fail@plt+0xdf0>
   11e1c:	ldr	r5, [fp, #-84]	; 0xffffffac
   11e20:	mov	r0, #0
   11e24:	mov	sl, r3
   11e28:	b	11e80 <__assert_fail@plt+0xe44>
   11e2c:	ldr	r1, [fp, #-88]	; 0xffffffa8
   11e30:	ldr	r2, [fp, #-72]	; 0xffffffb8
   11e34:	add	r0, r4, r7
   11e38:	mov	r5, lr
   11e3c:	mov	r6, ip
   11e40:	mov	sl, r3
   11e44:	bl	10f40 <bcmp@plt>
   11e48:	ldr	r2, [sp, #92]	; 0x5c
   11e4c:	cmp	r0, #0
   11e50:	ldr	r3, [fp, #-84]	; 0xffffffac
   11e54:	mov	r1, r0
   11e58:	movwne	r1, #1
   11e5c:	orr	r1, r1, r2
   11e60:	tst	r1, #1
   11e64:	beq	12990 <__assert_fail@plt+0x1954>
   11e68:	ldr	r4, [fp, #-80]	; 0xffffffb0
   11e6c:	clz	r0, r0
   11e70:	mov	lr, r5
   11e74:	mov	ip, r6
   11e78:	mov	r5, r3
   11e7c:	lsr	r0, r0, #5
   11e80:	str	r0, [fp, #-52]	; 0xffffffcc
   11e84:	ldrb	r6, [r4, r7]
   11e88:	cmp	r6, #126	; 0x7e
   11e8c:	bhi	123b4 <__assert_fail@plt+0x1378>
   11e90:	add	r3, pc, #16
   11e94:	mov	r9, #1
   11e98:	mov	r2, #110	; 0x6e
   11e9c:	mov	r0, #97	; 0x61
   11ea0:	mov	r1, #0
   11ea4:	ldr	pc, [r3, r6, lsl #2]
   11ea8:	andeq	r2, r1, r8, lsl r2
   11eac:			; <UNDEFINED> instruction: 0x000123b4
   11eb0:			; <UNDEFINED> instruction: 0x000123b4
   11eb4:			; <UNDEFINED> instruction: 0x000123b4
   11eb8:			; <UNDEFINED> instruction: 0x000123b4
   11ebc:			; <UNDEFINED> instruction: 0x000123b4
   11ec0:			; <UNDEFINED> instruction: 0x000123b4
   11ec4:	andeq	r2, r1, r4, lsr r4
   11ec8:	strdeq	r2, [r1], -r8
   11ecc:	strdeq	r2, [r1], -r0
   11ed0:	andeq	r2, r1, r4, lsl #4
   11ed4:	andeq	r2, r1, ip, lsl r3
   11ed8:	andeq	r2, r1, r8, ror #3
   11edc:	andeq	r2, r1, r0, lsl #4
   11ee0:			; <UNDEFINED> instruction: 0x000123b4
   11ee4:			; <UNDEFINED> instruction: 0x000123b4
   11ee8:			; <UNDEFINED> instruction: 0x000123b4
   11eec:			; <UNDEFINED> instruction: 0x000123b4
   11ef0:			; <UNDEFINED> instruction: 0x000123b4
   11ef4:			; <UNDEFINED> instruction: 0x000123b4
   11ef8:			; <UNDEFINED> instruction: 0x000123b4
   11efc:			; <UNDEFINED> instruction: 0x000123b4
   11f00:			; <UNDEFINED> instruction: 0x000123b4
   11f04:			; <UNDEFINED> instruction: 0x000123b4
   11f08:			; <UNDEFINED> instruction: 0x000123b4
   11f0c:			; <UNDEFINED> instruction: 0x000123b4
   11f10:			; <UNDEFINED> instruction: 0x000123b4
   11f14:			; <UNDEFINED> instruction: 0x000123b4
   11f18:			; <UNDEFINED> instruction: 0x000123b4
   11f1c:			; <UNDEFINED> instruction: 0x000123b4
   11f20:			; <UNDEFINED> instruction: 0x000123b4
   11f24:			; <UNDEFINED> instruction: 0x000123b4
   11f28:	muleq	r1, r8, r1
   11f2c:	muleq	r1, ip, r1
   11f30:	muleq	r1, ip, r1
   11f34:	andeq	r2, r1, r0, lsl #3
   11f38:	muleq	r1, ip, r1
   11f3c:	andeq	r2, r1, r4, lsr #1
   11f40:	muleq	r1, ip, r1
   11f44:	andeq	r2, r1, r4, lsr #6
   11f48:	muleq	r1, ip, r1
   11f4c:	muleq	r1, ip, r1
   11f50:	muleq	r1, ip, r1
   11f54:	andeq	r2, r1, r4, lsr #1
   11f58:	andeq	r2, r1, r4, lsr #1
   11f5c:	andeq	r2, r1, r4, lsr #1
   11f60:	andeq	r2, r1, r4, lsr #1
   11f64:	andeq	r2, r1, r4, lsr #1
   11f68:	andeq	r2, r1, r4, lsr #1
   11f6c:	andeq	r2, r1, r4, lsr #1
   11f70:	andeq	r2, r1, r4, lsr #1
   11f74:	andeq	r2, r1, r4, lsr #1
   11f78:	andeq	r2, r1, r4, lsr #1
   11f7c:	andeq	r2, r1, r4, lsr #1
   11f80:	andeq	r2, r1, r4, lsr #1
   11f84:	andeq	r2, r1, r4, lsr #1
   11f88:	andeq	r2, r1, r4, lsr #1
   11f8c:	andeq	r2, r1, r4, lsr #1
   11f90:	andeq	r2, r1, r4, lsr #1
   11f94:	muleq	r1, ip, r1
   11f98:	muleq	r1, ip, r1
   11f9c:	muleq	r1, ip, r1
   11fa0:	muleq	r1, ip, r1
   11fa4:	strdeq	r2, [r1], -r0
   11fa8:			; <UNDEFINED> instruction: 0x000123b4
   11fac:	andeq	r2, r1, r4, lsr #1
   11fb0:	andeq	r2, r1, r4, lsr #1
   11fb4:	andeq	r2, r1, r4, lsr #1
   11fb8:	andeq	r2, r1, r4, lsr #1
   11fbc:	andeq	r2, r1, r4, lsr #1
   11fc0:	andeq	r2, r1, r4, lsr #1
   11fc4:	andeq	r2, r1, r4, lsr #1
   11fc8:	andeq	r2, r1, r4, lsr #1
   11fcc:	andeq	r2, r1, r4, lsr #1
   11fd0:	andeq	r2, r1, r4, lsr #1
   11fd4:	andeq	r2, r1, r4, lsr #1
   11fd8:	andeq	r2, r1, r4, lsr #1
   11fdc:	andeq	r2, r1, r4, lsr #1
   11fe0:	andeq	r2, r1, r4, lsr #1
   11fe4:	andeq	r2, r1, r4, lsr #1
   11fe8:	andeq	r2, r1, r4, lsr #1
   11fec:	andeq	r2, r1, r4, lsr #1
   11ff0:	andeq	r2, r1, r4, lsr #1
   11ff4:	andeq	r2, r1, r4, lsr #1
   11ff8:	andeq	r2, r1, r4, lsr #1
   11ffc:	andeq	r2, r1, r4, lsr #1
   12000:	andeq	r2, r1, r4, lsr #1
   12004:	andeq	r2, r1, r4, lsr #1
   12008:	andeq	r2, r1, r4, lsr #1
   1200c:	andeq	r2, r1, r4, lsr #1
   12010:	andeq	r2, r1, r4, lsr #1
   12014:	muleq	r1, ip, r1
   12018:	andeq	r2, r1, r4, asr #3
   1201c:	andeq	r2, r1, r4, lsr #1
   12020:	muleq	r1, ip, r1
   12024:	andeq	r2, r1, r4, lsr #1
   12028:	muleq	r1, ip, r1
   1202c:	andeq	r2, r1, r4, lsr #1
   12030:	andeq	r2, r1, r4, lsr #1
   12034:	andeq	r2, r1, r4, lsr #1
   12038:	andeq	r2, r1, r4, lsr #1
   1203c:	andeq	r2, r1, r4, lsr #1
   12040:	andeq	r2, r1, r4, lsr #1
   12044:	andeq	r2, r1, r4, lsr #1
   12048:	andeq	r2, r1, r4, lsr #1
   1204c:	andeq	r2, r1, r4, lsr #1
   12050:	andeq	r2, r1, r4, lsr #1
   12054:	andeq	r2, r1, r4, lsr #1
   12058:	andeq	r2, r1, r4, lsr #1
   1205c:	andeq	r2, r1, r4, lsr #1
   12060:	andeq	r2, r1, r4, lsr #1
   12064:	andeq	r2, r1, r4, lsr #1
   12068:	andeq	r2, r1, r4, lsr #1
   1206c:	andeq	r2, r1, r4, lsr #1
   12070:	andeq	r2, r1, r4, lsr #1
   12074:	andeq	r2, r1, r4, lsr #1
   12078:	andeq	r2, r1, r4, lsr #1
   1207c:	andeq	r2, r1, r4, lsr #1
   12080:	andeq	r2, r1, r4, lsr #1
   12084:	andeq	r2, r1, r4, lsr #1
   12088:	andeq	r2, r1, r4, lsr #1
   1208c:	andeq	r2, r1, r4, lsr #1
   12090:	andeq	r2, r1, r4, lsr #1
   12094:	andeq	r2, r1, r8, asr r1
   12098:	muleq	r1, ip, r1
   1209c:	andeq	r2, r1, r8, asr r1
   120a0:	andeq	r2, r1, r0, lsl #3
   120a4:	ldr	r0, [fp, #-64]	; 0xffffffc0
   120a8:	tst	r0, #1
   120ac:	bne	120d8 <__assert_fail@plt+0x109c>
   120b0:	ldr	r1, [fp, #16]
   120b4:	ubfx	r0, r6, #5, #3
   120b8:	mov	r2, #1
   120bc:	ldr	r0, [r1, r0, lsl #2]
   120c0:	and	r1, r6, #31
   120c4:	tst	r0, r2, lsl r1
   120c8:	beq	120d8 <__assert_fail@plt+0x109c>
   120cc:	mov	r0, r6
   120d0:	mov	r1, r9
   120d4:	b	120ec <__assert_fail@plt+0x10b0>
   120d8:	ldr	r0, [fp, #-52]	; 0xffffffcc
   120dc:	mov	r1, r9
   120e0:	cmp	r0, #0
   120e4:	mov	r0, r6
   120e8:	beq	12838 <__assert_fail@plt+0x17fc>
   120ec:	ldr	r2, [fp, #-76]	; 0xffffffb4
   120f0:	tst	r2, #1
   120f4:	bne	129d4 <__assert_fail@plt+0x1998>
   120f8:	ldr	r2, [fp, #-68]	; 0xffffffbc
   120fc:	subs	r2, r2, #2
   12100:	movwne	r2, #1
   12104:	orr	r2, r2, lr
   12108:	tst	r2, #1
   1210c:	bne	12144 <__assert_fail@plt+0x1108>
   12110:	cmp	r8, ip
   12114:	mov	lr, #1
   12118:	movcc	r2, #39	; 0x27
   1211c:	strbcc	r2, [r5, r8]
   12120:	add	r2, r8, #1
   12124:	cmp	r2, ip
   12128:	movcc	r3, #36	; 0x24
   1212c:	strbcc	r3, [r5, r2]
   12130:	add	r2, r8, #2
   12134:	add	r8, r8, #3
   12138:	cmp	r2, ip
   1213c:	movcc	r3, #39	; 0x27
   12140:	strbcc	r3, [r5, r2]
   12144:	cmp	r8, ip
   12148:	movcc	r2, #92	; 0x5c
   1214c:	strbcc	r2, [r5, r8]
   12150:	add	r8, r8, #1
   12154:	b	12878 <__assert_fail@plt+0x183c>
   12158:	cmp	sl, #1
   1215c:	beq	12180 <__assert_fail@plt+0x1144>
   12160:	mov	r9, #0
   12164:	cmn	sl, #1
   12168:	bne	1218c <__assert_fail@plt+0x1150>
   1216c:	ldrb	r0, [r4, #1]
   12170:	cmp	r0, #0
   12174:	beq	12180 <__assert_fail@plt+0x1144>
   12178:	mvn	sl, #0
   1217c:	b	1218c <__assert_fail@plt+0x1150>
   12180:	mov	r9, #0
   12184:	cmp	r7, #0
   12188:	beq	12198 <__assert_fail@plt+0x115c>
   1218c:	mov	r0, #0
   12190:	str	r0, [fp, #-56]	; 0xffffffc8
   12194:	b	120a4 <__assert_fail@plt+0x1068>
   12198:	mov	r1, #1
   1219c:	ldr	r0, [fp, #-68]	; 0xffffffbc
   121a0:	cmp	r0, #2
   121a4:	bne	121bc <__assert_fail@plt+0x1180>
   121a8:	ldr	r0, [fp, #-76]	; 0xffffffb4
   121ac:	mov	r9, r1
   121b0:	tst	r0, #1
   121b4:	beq	120a4 <__assert_fail@plt+0x1068>
   121b8:	b	129d4 <__assert_fail@plt+0x1998>
   121bc:	mov	r9, r1
   121c0:	b	120a4 <__assert_fail@plt+0x1068>
   121c4:	ldr	r0, [fp, #-68]	; 0xffffffbc
   121c8:	cmp	r0, #2
   121cc:	bne	12410 <__assert_fail@plt+0x13d4>
   121d0:	ldr	r0, [fp, #-76]	; 0xffffffb4
   121d4:	tst	r0, #1
   121d8:	bne	129d4 <__assert_fail@plt+0x1998>
   121dc:	mov	r0, #0
   121e0:	str	r0, [fp, #-56]	; 0xffffffc8
   121e4:	b	12428 <__assert_fail@plt+0x13ec>
   121e8:	mov	r0, #102	; 0x66
   121ec:	b	12434 <__assert_fail@plt+0x13f8>
   121f0:	mov	r2, #116	; 0x74
   121f4:	b	12204 <__assert_fail@plt+0x11c8>
   121f8:	mov	r0, #98	; 0x62
   121fc:	b	12434 <__assert_fail@plt+0x13f8>
   12200:	mov	r2, #114	; 0x72
   12204:	ldr	r0, [sp, #68]	; 0x44
   12208:	tst	r0, #1
   1220c:	mov	r0, r2
   12210:	bne	12434 <__assert_fail@plt+0x13f8>
   12214:	b	129d4 <__assert_fail@plt+0x1998>
   12218:	ldr	r0, [sp, #84]	; 0x54
   1221c:	tst	r0, #1
   12220:	beq	12454 <__assert_fail@plt+0x1418>
   12224:	ldr	r0, [fp, #-76]	; 0xffffffb4
   12228:	tst	r0, #1
   1222c:	bne	12ac0 <__assert_fail@plt+0x1a84>
   12230:	ldr	r0, [fp, #-68]	; 0xffffffbc
   12234:	mov	r2, sl
   12238:	subs	r0, r0, #2
   1223c:	movwne	r0, #1
   12240:	orr	r0, r0, lr
   12244:	tst	r0, #1
   12248:	bne	12280 <__assert_fail@plt+0x1244>
   1224c:	cmp	r8, ip
   12250:	mov	lr, #1
   12254:	movcc	r0, #39	; 0x27
   12258:	strbcc	r0, [r5, r8]
   1225c:	add	r0, r8, #1
   12260:	cmp	r0, ip
   12264:	movcc	r1, #36	; 0x24
   12268:	strbcc	r1, [r5, r0]
   1226c:	add	r0, r8, #2
   12270:	add	r8, r8, #3
   12274:	cmp	r0, ip
   12278:	movcc	r1, #39	; 0x27
   1227c:	strbcc	r1, [r5, r0]
   12280:	mov	r1, #1
   12284:	cmp	r8, ip
   12288:	mov	r9, #0
   1228c:	mov	r6, #48	; 0x30
   12290:	str	r1, [fp, #-56]	; 0xffffffc8
   12294:	ldr	r1, [fp, #-68]	; 0xffffffbc
   12298:	movcc	r0, #92	; 0x5c
   1229c:	strbcc	r0, [r5, r8]
   122a0:	add	r0, r8, #1
   122a4:	cmp	r1, #2
   122a8:	beq	125b0 <__assert_fail@plt+0x1574>
   122ac:	add	r1, r7, #1
   122b0:	cmp	r1, r2
   122b4:	bcs	125b0 <__assert_fail@plt+0x1574>
   122b8:	ldrb	r1, [r4, r1]
   122bc:	sub	r1, r1, #48	; 0x30
   122c0:	uxtb	r1, r1
   122c4:	cmp	r1, #9
   122c8:	bhi	125b0 <__assert_fail@plt+0x1574>
   122cc:	cmp	r0, ip
   122d0:	movcc	r1, #48	; 0x30
   122d4:	strbcc	r1, [r5, r0]
   122d8:	add	r0, r8, #2
   122dc:	add	r8, r8, #3
   122e0:	cmp	r0, ip
   122e4:	movcc	r1, #48	; 0x30
   122e8:	strbcc	r1, [r5, r0]
   122ec:	b	120a4 <__assert_fail@plt+0x1068>
   122f0:	ldr	r0, [fp, #-68]	; 0xffffffbc
   122f4:	mov	r6, #63	; 0x3f
   122f8:	cmp	r0, #5
   122fc:	beq	125b8 <__assert_fail@plt+0x157c>
   12300:	mov	r1, #0
   12304:	cmp	r0, #2
   12308:	str	r1, [fp, #-56]	; 0xffffffc8
   1230c:	bne	1266c <__assert_fail@plt+0x1630>
   12310:	ldr	r0, [fp, #-76]	; 0xffffffb4
   12314:	mov	r9, #0
   12318:	b	121b0 <__assert_fail@plt+0x1174>
   1231c:	mov	r0, #118	; 0x76
   12320:	b	12434 <__assert_fail@plt+0x13f8>
   12324:	mov	r0, #1
   12328:	mov	r6, #39	; 0x27
   1232c:	str	r0, [sp, #60]	; 0x3c
   12330:	ldr	r0, [fp, #-68]	; 0xffffffbc
   12334:	cmp	r0, #2
   12338:	bne	123ac <__assert_fail@plt+0x1370>
   1233c:	ldr	r0, [fp, #-76]	; 0xffffffb4
   12340:	tst	r0, #1
   12344:	bne	129d4 <__assert_fail@plt+0x1998>
   12348:	ldr	r2, [sp, #56]	; 0x38
   1234c:	clz	r1, ip
   12350:	mov	lr, #0
   12354:	lsr	r1, r1, #5
   12358:	cmp	r2, #0
   1235c:	mov	r0, r2
   12360:	movwne	r0, #1
   12364:	orrs	r0, r0, r1
   12368:	moveq	r2, ip
   1236c:	moveq	ip, r0
   12370:	cmp	r8, ip
   12374:	str	r2, [sp, #56]	; 0x38
   12378:	movcc	r0, #39	; 0x27
   1237c:	strbcc	r0, [r5, r8]
   12380:	add	r0, r8, #1
   12384:	cmp	r0, ip
   12388:	movcc	r1, #92	; 0x5c
   1238c:	strbcc	r1, [r5, r0]
   12390:	add	r0, r8, #2
   12394:	add	r8, r8, #3
   12398:	cmp	r0, ip
   1239c:	movcc	r1, #39	; 0x27
   123a0:	strbcc	r1, [r5, r0]
   123a4:	mov	r0, #0
   123a8:	str	r0, [fp, #-56]	; 0xffffffc8
   123ac:	mov	r9, #1
   123b0:	b	120a4 <__assert_fail@plt+0x1068>
   123b4:	ldr	r0, [sp, #40]	; 0x28
   123b8:	str	lr, [sp, #44]	; 0x2c
   123bc:	str	ip, [sp, #88]	; 0x58
   123c0:	cmp	r0, #1
   123c4:	bne	12474 <__assert_fail@plt+0x1438>
   123c8:	str	sl, [sp, #36]	; 0x24
   123cc:	bl	10f28 <__ctype_b_loc@plt>
   123d0:	ldr	r0, [r0]
   123d4:	ldr	r4, [fp, #-80]	; 0xffffffb0
   123d8:	mov	r1, #1
   123dc:	add	r0, r0, r6, lsl #1
   123e0:	ldrb	r0, [r0, #1]
   123e4:	ubfx	r9, r0, #6, #1
   123e8:	ldr	r0, [sp, #52]	; 0x34
   123ec:	ldr	lr, [sp, #44]	; 0x2c
   123f0:	cmp	r1, #1
   123f4:	orr	r3, r9, r0
   123f8:	bhi	12674 <__assert_fail@plt+0x1638>
   123fc:	tst	r3, #1
   12400:	beq	12674 <__assert_fail@plt+0x1638>
   12404:	ldr	sl, [sp, #36]	; 0x24
   12408:	ldr	ip, [sp, #88]	; 0x58
   1240c:	b	120a4 <__assert_fail@plt+0x1068>
   12410:	ldr	r1, [sp, #48]	; 0x30
   12414:	mov	r0, #0
   12418:	str	r0, [fp, #-56]	; 0xffffffc8
   1241c:	mov	r0, #92	; 0x5c
   12420:	cmp	r1, #0
   12424:	beq	12434 <__assert_fail@plt+0x13f8>
   12428:	mov	r6, #92	; 0x5c
   1242c:	mov	r9, #0
   12430:	b	12838 <__assert_fail@plt+0x17fc>
   12434:	mov	r1, #0
   12438:	mov	r9, #0
   1243c:	str	r1, [fp, #-56]	; 0xffffffc8
   12440:	ldr	r1, [sp, #84]	; 0x54
   12444:	tst	r1, #1
   12448:	mov	r1, #0
   1244c:	beq	120a4 <__assert_fail@plt+0x1068>
   12450:	b	120ec <__assert_fail@plt+0x10b0>
   12454:	ldr	r0, [sp, #32]
   12458:	mov	r6, #0
   1245c:	mov	r9, #0
   12460:	cmp	r0, #0
   12464:	mov	r0, #0
   12468:	str	r0, [fp, #-56]	; 0xffffffc8
   1246c:	beq	120a4 <__assert_fail@plt+0x1068>
   12470:	b	12890 <__assert_fail@plt+0x1854>
   12474:	mov	r0, #0
   12478:	cmn	sl, #1
   1247c:	sub	r3, fp, #40	; 0x28
   12480:	str	r0, [fp, #-36]	; 0xffffffdc
   12484:	str	r0, [fp, #-40]	; 0xffffffd8
   12488:	bne	124a0 <__assert_fail@plt+0x1464>
   1248c:	mov	r0, r4
   12490:	bl	10f58 <strlen@plt>
   12494:	ldr	r4, [fp, #-80]	; 0xffffffb0
   12498:	sub	r3, fp, #40	; 0x28
   1249c:	mov	sl, r0
   124a0:	ldr	r0, [sp, #72]	; 0x48
   124a4:	mov	r9, #1
   124a8:	mov	r1, #0
   124ac:	str	sl, [sp, #36]	; 0x24
   124b0:	add	r0, r0, r7
   124b4:	str	r0, [sp, #20]
   124b8:	add	r0, r1, r7
   124bc:	str	r1, [sp, #24]
   124c0:	add	r1, r4, r0
   124c4:	mov	r4, r0
   124c8:	sub	r2, sl, r0
   124cc:	sub	r0, fp, #44	; 0x2c
   124d0:	bl	147a4 <__assert_fail@plt+0x3768>
   124d4:	cmp	r0, #0
   124d8:	beq	128e4 <__assert_fail@plt+0x18a8>
   124dc:	cmn	r0, #1
   124e0:	beq	1289c <__assert_fail@plt+0x1860>
   124e4:	ldr	r2, [sp, #36]	; 0x24
   124e8:	cmn	r0, #2
   124ec:	beq	128a4 <__assert_fail@plt+0x1868>
   124f0:	ldr	r2, [sp, #64]	; 0x40
   124f4:	ldr	ip, [sp, #88]	; 0x58
   124f8:	ldr	r4, [sp, #84]	; 0x54
   124fc:	ldr	lr, [fp, #-48]	; 0xffffffd0
   12500:	cmp	r0, #2
   12504:	mov	r1, #0
   12508:	movwcc	r1, #1
   1250c:	eor	r2, r2, #1
   12510:	orrs	r1, r2, r1
   12514:	bne	12564 <__assert_fail@plt+0x1528>
   12518:	ldr	r1, [sp, #24]
   1251c:	ldr	r2, [sp, #20]
   12520:	add	r1, r2, r1
   12524:	sub	r2, r0, #1
   12528:	ldrb	r3, [r1]
   1252c:	sub	r5, r3, #94	; 0x5e
   12530:	cmp	r5, #30
   12534:	bhi	1254c <__assert_fail@plt+0x1510>
   12538:	mov	r4, #1
   1253c:	mov	sl, #1073741829	; 0x40000005
   12540:	tst	sl, r4, lsl r5
   12544:	ldr	r4, [sp, #84]	; 0x54
   12548:	bne	129ac <__assert_fail@plt+0x1970>
   1254c:	sub	r3, r3, #91	; 0x5b
   12550:	cmp	r3, #2
   12554:	bcc	129ac <__assert_fail@plt+0x1970>
   12558:	add	r1, r1, #1
   1255c:	subs	r2, r2, #1
   12560:	bne	12528 <__assert_fail@plt+0x14ec>
   12564:	ldr	r5, [sp, #24]
   12568:	str	lr, [fp, #-48]	; 0xffffffd0
   1256c:	add	r5, r0, r5
   12570:	ldr	r0, [fp, #-44]	; 0xffffffd4
   12574:	bl	10e8c <iswprint@plt>
   12578:	cmp	r0, #0
   1257c:	sub	r4, fp, #40	; 0x28
   12580:	movwne	r0, #1
   12584:	and	r9, r9, r0
   12588:	mov	r0, r4
   1258c:	bl	10e44 <mbsinit@plt>
   12590:	mov	r1, r5
   12594:	mov	r3, r4
   12598:	ldr	sl, [sp, #36]	; 0x24
   1259c:	ldr	r5, [fp, #-84]	; 0xffffffac
   125a0:	ldr	r4, [fp, #-80]	; 0xffffffb0
   125a4:	cmp	r0, #0
   125a8:	beq	124b8 <__assert_fail@plt+0x147c>
   125ac:	b	123e8 <__assert_fail@plt+0x13ac>
   125b0:	mov	r8, r0
   125b4:	b	120a4 <__assert_fail@plt+0x1068>
   125b8:	mov	r0, #0
   125bc:	str	r0, [fp, #-56]	; 0xffffffc8
   125c0:	ldr	r0, [sp, #28]
   125c4:	cmp	r0, #0
   125c8:	beq	1266c <__assert_fail@plt+0x1630>
   125cc:	add	r0, r7, #2
   125d0:	mov	r1, sl
   125d4:	cmp	r0, sl
   125d8:	bcs	1266c <__assert_fail@plt+0x1630>
   125dc:	add	r1, r7, r4
   125e0:	ldrb	r1, [r1, #1]
   125e4:	cmp	r1, #63	; 0x3f
   125e8:	bne	1266c <__assert_fail@plt+0x1630>
   125ec:	ldrb	r9, [r4, r0]
   125f0:	sub	r2, r9, #33	; 0x21
   125f4:	cmp	r2, #29
   125f8:	bhi	1266c <__assert_fail@plt+0x1630>
   125fc:	mov	r1, r4
   12600:	movw	r4, #20929	; 0x51c1
   12604:	mov	r3, #1
   12608:	movt	r4, #14336	; 0x3800
   1260c:	tst	r4, r3, lsl r2
   12610:	beq	128f8 <__assert_fail@plt+0x18bc>
   12614:	ldr	r2, [fp, #-76]	; 0xffffffb4
   12618:	tst	r2, #1
   1261c:	bne	12ac8 <__assert_fail@plt+0x1a8c>
   12620:	cmp	r8, ip
   12624:	mov	r4, r1
   12628:	mov	r7, r0
   1262c:	mov	r6, r9
   12630:	movcc	r2, #63	; 0x3f
   12634:	strbcc	r2, [r5, r8]
   12638:	add	r2, r8, #1
   1263c:	cmp	r2, ip
   12640:	movcc	r3, #34	; 0x22
   12644:	strbcc	r3, [r5, r2]
   12648:	add	r2, r8, #2
   1264c:	cmp	r2, ip
   12650:	movcc	r3, #34	; 0x22
   12654:	strbcc	r3, [r5, r2]
   12658:	add	r2, r8, #3
   1265c:	add	r8, r8, #4
   12660:	cmp	r2, ip
   12664:	movcc	r3, #63	; 0x3f
   12668:	strbcc	r3, [r5, r2]
   1266c:	mov	r9, #0
   12670:	b	120a4 <__assert_fail@plt+0x1068>
   12674:	ldr	sl, [sp, #36]	; 0x24
   12678:	add	r0, r1, r7
   1267c:	mov	r2, #0
   12680:	str	r3, [sp, #24]
   12684:	str	r0, [fp, #-56]	; 0xffffffc8
   12688:	tst	r3, #1
   1268c:	beq	126b8 <__assert_fail@plt+0x167c>
   12690:	ldr	r0, [fp, #-52]	; 0xffffffcc
   12694:	tst	r0, #1
   12698:	beq	12780 <__assert_fail@plt+0x1744>
   1269c:	ldr	r1, [sp, #88]	; 0x58
   126a0:	mov	r0, r3
   126a4:	cmp	r8, r1
   126a8:	movcc	r1, #92	; 0x5c
   126ac:	strbcc	r1, [r5, r8]
   126b0:	add	r8, r8, #1
   126b4:	b	12784 <__assert_fail@plt+0x1748>
   126b8:	ldr	r1, [fp, #-76]	; 0xffffffb4
   126bc:	tst	r1, #1
   126c0:	bne	129d0 <__assert_fail@plt+0x1994>
   126c4:	ldr	r1, [fp, #-68]	; 0xffffffbc
   126c8:	subs	r2, r1, #2
   126cc:	movwne	r2, #1
   126d0:	orr	r2, r2, lr
   126d4:	tst	r2, #1
   126d8:	bne	1271c <__assert_fail@plt+0x16e0>
   126dc:	ldr	r1, [sp, #88]	; 0x58
   126e0:	add	r2, r8, #1
   126e4:	mov	lr, #1
   126e8:	cmp	r8, r1
   126ec:	movcc	r1, #39	; 0x27
   126f0:	strbcc	r1, [r5, r8]
   126f4:	ldr	r1, [sp, #88]	; 0x58
   126f8:	cmp	r2, r1
   126fc:	movcc	r1, #36	; 0x24
   12700:	strbcc	r1, [r5, r2]
   12704:	ldr	r1, [sp, #88]	; 0x58
   12708:	add	r2, r8, #2
   1270c:	add	r8, r8, #3
   12710:	cmp	r2, r1
   12714:	movcc	r1, #39	; 0x27
   12718:	strbcc	r1, [r5, r2]
   1271c:	ldr	r1, [sp, #88]	; 0x58
   12720:	add	r2, r8, #1
   12724:	mov	r0, r3
   12728:	cmp	r8, r1
   1272c:	movcc	r1, #92	; 0x5c
   12730:	strbcc	r1, [r5, r8]
   12734:	ldr	r1, [sp, #88]	; 0x58
   12738:	cmp	r2, r1
   1273c:	bcs	12750 <__assert_fail@plt+0x1714>
   12740:	uxtb	r3, r6
   12744:	mov	r1, #48	; 0x30
   12748:	orr	r3, r1, r3, lsr #6
   1274c:	strb	r3, [r5, r2]
   12750:	ldr	r1, [sp, #88]	; 0x58
   12754:	add	r2, r8, #2
   12758:	add	r8, r8, #3
   1275c:	cmp	r2, r1
   12760:	lsrcc	r3, r6, #3
   12764:	movcc	r1, #6
   12768:	bficc	r3, r1, #3, #29
   1276c:	mov	r1, #6
   12770:	bfi	r6, r1, #3, #29
   12774:	strbcc	r3, [r5, r2]
   12778:	mov	r2, #1
   1277c:	b	1278c <__assert_fail@plt+0x1750>
   12780:	mov	r0, r3
   12784:	mov	r1, #0
   12788:	str	r1, [fp, #-52]	; 0xffffffcc
   1278c:	mov	ip, r2
   12790:	and	r1, r2, #1
   12794:	ldr	r2, [fp, #-56]	; 0xffffffc8
   12798:	add	r3, r7, #1
   1279c:	cmp	r2, r3
   127a0:	bls	12828 <__assert_fail@plt+0x17ec>
   127a4:	cmp	r1, #0
   127a8:	mvn	r5, lr
   127ac:	movwne	r1, #1
   127b0:	orr	r5, r5, r1
   127b4:	tst	r5, #1
   127b8:	bne	127fc <__assert_fail@plt+0x17c0>
   127bc:	ldr	r1, [sp, #88]	; 0x58
   127c0:	ldr	r5, [fp, #-84]	; 0xffffffac
   127c4:	mov	r2, r4
   127c8:	ldr	r4, [sp, #88]	; 0x58
   127cc:	ldr	r0, [sp, #24]
   127d0:	mov	lr, #0
   127d4:	cmp	r8, r1
   127d8:	movcc	r1, #39	; 0x27
   127dc:	strbcc	r1, [r5, r8]
   127e0:	add	r1, r8, #1
   127e4:	add	r8, r8, #2
   127e8:	cmp	r1, r4
   127ec:	movcc	r4, #39	; 0x27
   127f0:	strbcc	r4, [r5, r1]
   127f4:	mov	r4, r2
   127f8:	b	12800 <__assert_fail@plt+0x17c4>
   127fc:	ldr	r5, [fp, #-84]	; 0xffffffac
   12800:	ldr	r1, [sp, #88]	; 0x58
   12804:	mov	r2, ip
   12808:	cmp	r8, r1
   1280c:	ldr	r1, [sp, #72]	; 0x48
   12810:	strbcc	r6, [r5, r8]
   12814:	add	r8, r8, #1
   12818:	ldrb	r6, [r1, r7]
   1281c:	mov	r7, r3
   12820:	mov	r3, r0
   12824:	b	12688 <__assert_fail@plt+0x164c>
   12828:	ldr	ip, [sp, #88]	; 0x58
   1282c:	cmp	r1, #0
   12830:	movwne	r1, #1
   12834:	str	r1, [fp, #-56]	; 0xffffffc8
   12838:	ldr	r0, [fp, #-56]	; 0xffffffc8
   1283c:	cmp	r0, #0
   12840:	bne	12870 <__assert_fail@plt+0x1834>
   12844:	tst	lr, #1
   12848:	beq	12870 <__assert_fail@plt+0x1834>
   1284c:	cmp	r8, ip
   12850:	mov	lr, #0
   12854:	movcc	r0, #39	; 0x27
   12858:	strbcc	r0, [r5, r8]
   1285c:	add	r0, r8, #1
   12860:	add	r8, r8, #2
   12864:	cmp	r0, ip
   12868:	movcc	r1, #39	; 0x27
   1286c:	strbcc	r1, [r5, r0]
   12870:	mov	r1, r9
   12874:	mov	r0, r6
   12878:	cmp	r8, ip
   1287c:	strbcc	r0, [r5, r8]
   12880:	ldr	r0, [fp, #-48]	; 0xffffffd0
   12884:	add	r8, r8, #1
   12888:	and	r0, r0, r1
   1288c:	str	r0, [fp, #-48]	; 0xffffffd0
   12890:	mov	r3, sl
   12894:	add	r7, r7, #1
   12898:	b	11d88 <__assert_fail@plt+0xd4c>
   1289c:	mov	r9, #0
   128a0:	b	128e4 <__assert_fail@plt+0x18a8>
   128a4:	mov	r9, #0
   128a8:	cmp	r2, r4
   128ac:	bls	128e4 <__assert_fail@plt+0x18a8>
   128b0:	ldr	r4, [fp, #-80]	; 0xffffffb0
   128b4:	ldr	r1, [sp, #24]
   128b8:	add	r0, r4, r7
   128bc:	mov	r3, r1
   128c0:	ldrb	r1, [r0, r1]
   128c4:	cmp	r1, #0
   128c8:	beq	128f0 <__assert_fail@plt+0x18b4>
   128cc:	add	r3, r3, #1
   128d0:	add	r1, r7, r3
   128d4:	cmp	r1, r2
   128d8:	mov	r1, r3
   128dc:	bcc	128bc <__assert_fail@plt+0x1880>
   128e0:	b	123e8 <__assert_fail@plt+0x13ac>
   128e4:	ldr	r4, [fp, #-80]	; 0xffffffb0
   128e8:	ldr	r1, [sp, #24]
   128ec:	b	123e8 <__assert_fail@plt+0x13ac>
   128f0:	mov	r1, r3
   128f4:	b	123e8 <__assert_fail@plt+0x13ac>
   128f8:	mov	r9, #0
   128fc:	mov	r4, r1
   12900:	b	120a4 <__assert_fail@plt+0x1068>
   12904:	mov	sl, r7
   12908:	b	12910 <__assert_fail@plt+0x18d4>
   1290c:	mvn	sl, #0
   12910:	ldr	r1, [fp, #-68]	; 0xffffffbc
   12914:	ldr	r2, [fp, #-76]	; 0xffffffb4
   12918:	eor	r0, r1, #2
   1291c:	orr	r0, r0, r8
   12920:	clz	r0, r0
   12924:	lsr	r0, r0, #5
   12928:	tst	r2, r0
   1292c:	bne	129d4 <__assert_fail@plt+0x1998>
   12930:	subs	r0, r1, #2
   12934:	movwne	r0, #1
   12938:	orr	r0, r2, r0
   1293c:	tst	r0, #1
   12940:	ldreq	r0, [sp, #60]	; 0x3c
   12944:	ldreq	r1, [fp, #-48]	; 0xffffffd0
   12948:	eoreq	r0, r0, #1
   1294c:	tsteq	r0, #1
   12950:	bne	12a68 <__assert_fail@plt+0x1a2c>
   12954:	tst	r1, #1
   12958:	bne	12a34 <__assert_fail@plt+0x19f8>
   1295c:	ldr	r6, [sp, #56]	; 0x38
   12960:	mov	r9, #0
   12964:	cmp	r6, #0
   12968:	beq	12a60 <__assert_fail@plt+0x1a24>
   1296c:	ldr	r0, [sp, #84]	; 0x54
   12970:	mov	r1, #0
   12974:	mov	r7, #2
   12978:	cmp	ip, #0
   1297c:	str	r1, [fp, #-48]	; 0xffffffd0
   12980:	mov	r1, #0
   12984:	str	r1, [fp, #-76]	; 0xffffffb4
   12988:	beq	11af0 <__assert_fail@plt+0xab4>
   1298c:	b	12a68 <__assert_fail@plt+0x1a2c>
   12990:	ldr	r4, [fp, #-80]	; 0xffffffb0
   12994:	ldr	r1, [fp, #12]
   12998:	ldr	r2, [fp, #-68]	; 0xffffffbc
   1299c:	mov	r5, r3
   129a0:	mov	ip, r6
   129a4:	mov	r3, sl
   129a8:	b	129f8 <__assert_fail@plt+0x19bc>
   129ac:	tst	r4, #1
   129b0:	ldr	r5, [fp, #-84]	; 0xffffffac
   129b4:	ldr	r4, [fp, #-80]	; 0xffffffb0
   129b8:	ldr	r1, [fp, #12]
   129bc:	ldr	r3, [sp, #36]	; 0x24
   129c0:	mov	r0, #2
   129c4:	movwne	r0, #4
   129c8:	mov	r2, r0
   129cc:	b	129f8 <__assert_fail@plt+0x19bc>
   129d0:	ldr	ip, [sp, #88]	; 0x58
   129d4:	ldr	r1, [sp, #84]	; 0x54
   129d8:	mov	r0, #2
   129dc:	tst	r1, #1
   129e0:	movwne	r0, #4
   129e4:	ldr	r2, [fp, #-68]	; 0xffffffbc
   129e8:	ldr	r1, [fp, #12]
   129ec:	mov	r3, sl
   129f0:	cmp	r2, #2
   129f4:	moveq	r2, r0
   129f8:	mov	r0, #0
   129fc:	bic	r1, r1, #2
   12a00:	str	r2, [sp]
   12a04:	mov	r2, r4
   12a08:	str	r0, [sp, #8]
   12a0c:	ldr	r0, [sp, #76]	; 0x4c
   12a10:	str	r1, [sp, #4]
   12a14:	mov	r1, ip
   12a18:	str	r0, [sp, #12]
   12a1c:	ldr	r0, [sp, #80]	; 0x50
   12a20:	str	r0, [sp, #16]
   12a24:	mov	r0, r5
   12a28:	bl	11a64 <__assert_fail@plt+0xa28>
   12a2c:	mov	r8, r0
   12a30:	b	12ab4 <__assert_fail@plt+0x1a78>
   12a34:	mov	r0, #5
   12a38:	ldr	r1, [sp, #56]	; 0x38
   12a3c:	ldr	r2, [fp, #-80]	; 0xffffffb0
   12a40:	mov	r3, sl
   12a44:	str	r0, [sp]
   12a48:	ldr	r0, [fp, #12]
   12a4c:	str	r0, [sp, #4]
   12a50:	ldr	r0, [fp, #16]
   12a54:	str	r0, [sp, #8]
   12a58:	ldr	r0, [sp, #76]	; 0x4c
   12a5c:	b	12a18 <__assert_fail@plt+0x19dc>
   12a60:	mov	r0, #0
   12a64:	str	r0, [fp, #-76]	; 0xffffffb4
   12a68:	ldr	r1, [fp, #-88]	; 0xffffffa8
   12a6c:	cmp	r1, #0
   12a70:	beq	12aa8 <__assert_fail@plt+0x1a6c>
   12a74:	ldr	r0, [fp, #-76]	; 0xffffffb4
   12a78:	tst	r0, #1
   12a7c:	bne	12aa8 <__assert_fail@plt+0x1a6c>
   12a80:	ldrb	r0, [r1]
   12a84:	cmp	r0, #0
   12a88:	beq	12aa8 <__assert_fail@plt+0x1a6c>
   12a8c:	add	r1, r1, #1
   12a90:	cmp	r8, ip
   12a94:	strbcc	r0, [r5, r8]
   12a98:	add	r8, r8, #1
   12a9c:	ldrb	r0, [r1], #1
   12aa0:	cmp	r0, #0
   12aa4:	bne	12a90 <__assert_fail@plt+0x1a54>
   12aa8:	cmp	r8, ip
   12aac:	movcc	r0, #0
   12ab0:	strbcc	r0, [r5, r8]
   12ab4:	mov	r0, r8
   12ab8:	sub	sp, fp, #28
   12abc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12ac0:	mov	r0, #4
   12ac4:	b	129e4 <__assert_fail@plt+0x19a8>
   12ac8:	mov	r4, r1
   12acc:	b	129d4 <__assert_fail@plt+0x1998>
   12ad0:	bl	11030 <abort@plt>
   12ad4:	mov	r3, r2
   12ad8:	mov	r2, #0
   12adc:	b	12ae0 <__assert_fail@plt+0x1aa4>
   12ae0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12ae4:	add	fp, sp, #28
   12ae8:	sub	sp, sp, #36	; 0x24
   12aec:	movw	r8, #24928	; 0x6160
   12af0:	cmp	r3, #0
   12af4:	mov	r4, r2
   12af8:	str	r2, [sp, #24]
   12afc:	mov	r5, r1
   12b00:	mov	r6, r0
   12b04:	str	r0, [sp, #20]
   12b08:	movt	r8, #2
   12b0c:	movne	r8, r3
   12b10:	bl	10f70 <__errno_location@plt>
   12b14:	str	r0, [sp, #28]
   12b18:	ldr	r1, [r8, #40]	; 0x28
   12b1c:	ldr	r2, [r8, #44]	; 0x2c
   12b20:	ldr	r7, [r0]
   12b24:	cmp	r4, #0
   12b28:	add	sl, r8, #8
   12b2c:	mov	r0, #0
   12b30:	ldm	r8, {r3, r9}
   12b34:	orreq	r9, r9, #1
   12b38:	stm	sp, {r3, r9, sl}
   12b3c:	str	r1, [sp, #12]
   12b40:	str	r2, [sp, #16]
   12b44:	mov	r1, #0
   12b48:	mov	r2, r6
   12b4c:	mov	r3, r5
   12b50:	str	r7, [sp, #32]
   12b54:	mov	r7, r5
   12b58:	bl	11a64 <__assert_fail@plt+0xa28>
   12b5c:	add	r4, r0, #1
   12b60:	mov	r5, r0
   12b64:	mov	r0, r4
   12b68:	bl	13858 <__assert_fail@plt+0x281c>
   12b6c:	mov	r6, r0
   12b70:	ldr	r0, [r8]
   12b74:	ldr	r2, [r8, #44]	; 0x2c
   12b78:	ldr	r1, [r8, #40]	; 0x28
   12b7c:	mov	r3, r7
   12b80:	stm	sp, {r0, r9, sl}
   12b84:	str	r2, [sp, #16]
   12b88:	ldr	r2, [sp, #20]
   12b8c:	str	r1, [sp, #12]
   12b90:	mov	r0, r6
   12b94:	mov	r1, r4
   12b98:	bl	11a64 <__assert_fail@plt+0xa28>
   12b9c:	ldr	r0, [sp, #24]
   12ba0:	ldr	r1, [sp, #32]
   12ba4:	ldr	r2, [sp, #28]
   12ba8:	cmp	r0, #0
   12bac:	str	r1, [r2]
   12bb0:	strne	r5, [r0]
   12bb4:	mov	r0, r6
   12bb8:	sub	sp, fp, #28
   12bbc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12bc0:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   12bc4:	add	fp, sp, #24
   12bc8:	movw	r5, #24820	; 0x60f4
   12bcc:	movw	r8, #24816	; 0x60f0
   12bd0:	movt	r5, #2
   12bd4:	movt	r8, #2
   12bd8:	ldr	r0, [r5]
   12bdc:	ldr	r4, [r8]
   12be0:	cmp	r0, #2
   12be4:	blt	12c10 <__assert_fail@plt+0x1bd4>
   12be8:	add	r7, r4, #12
   12bec:	mov	r6, #0
   12bf0:	ldr	r0, [r7, r6, lsl #3]
   12bf4:	bl	146a0 <__assert_fail@plt+0x3664>
   12bf8:	ldr	r1, [r5]
   12bfc:	add	r2, r6, #2
   12c00:	add	r0, r6, #1
   12c04:	mov	r6, r0
   12c08:	cmp	r2, r1
   12c0c:	blt	12bf0 <__assert_fail@plt+0x1bb4>
   12c10:	ldr	r0, [r4, #4]
   12c14:	movw	r9, #24976	; 0x6190
   12c18:	movw	r7, #24824	; 0x60f8
   12c1c:	movt	r9, #2
   12c20:	movt	r7, #2
   12c24:	cmp	r0, r9
   12c28:	beq	12c38 <__assert_fail@plt+0x1bfc>
   12c2c:	bl	146a0 <__assert_fail@plt+0x3664>
   12c30:	mov	r0, #256	; 0x100
   12c34:	stm	r7, {r0, r9}
   12c38:	cmp	r4, r7
   12c3c:	beq	12c4c <__assert_fail@plt+0x1c10>
   12c40:	mov	r0, r4
   12c44:	bl	146a0 <__assert_fail@plt+0x3664>
   12c48:	str	r7, [r8]
   12c4c:	mov	r0, #1
   12c50:	str	r0, [r5]
   12c54:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   12c58:	movw	r3, #24928	; 0x6160
   12c5c:	mvn	r2, #0
   12c60:	movt	r3, #2
   12c64:	b	12c68 <__assert_fail@plt+0x1c2c>
   12c68:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12c6c:	add	fp, sp, #28
   12c70:	sub	sp, sp, #44	; 0x2c
   12c74:	mov	r7, r3
   12c78:	str	r2, [sp, #36]	; 0x24
   12c7c:	str	r1, [sp, #32]
   12c80:	mov	r5, r0
   12c84:	bl	10f70 <__errno_location@plt>
   12c88:	cmp	r5, #0
   12c8c:	bmi	12dfc <__assert_fail@plt+0x1dc0>
   12c90:	cmn	r5, #-2147483647	; 0x80000001
   12c94:	beq	12dfc <__assert_fail@plt+0x1dc0>
   12c98:	movw	r8, #24820	; 0x60f4
   12c9c:	movw	r4, #24816	; 0x60f0
   12ca0:	str	r0, [sp, #28]
   12ca4:	ldr	r0, [r0]
   12ca8:	movt	r8, #2
   12cac:	movt	r4, #2
   12cb0:	ldr	r1, [r8]
   12cb4:	ldr	r6, [r4]
   12cb8:	str	r0, [sp, #24]
   12cbc:	cmp	r1, r5
   12cc0:	ble	12ccc <__assert_fail@plt+0x1c90>
   12cc4:	mov	sl, r6
   12cc8:	b	12d38 <__assert_fail@plt+0x1cfc>
   12ccc:	movw	r9, #24824	; 0x60f8
   12cd0:	mov	r0, #8
   12cd4:	str	r1, [fp, #-32]	; 0xffffffe0
   12cd8:	sub	r1, r5, r1
   12cdc:	mvn	r3, #-2147483648	; 0x80000000
   12ce0:	movt	r9, #2
   12ce4:	str	r0, [sp]
   12ce8:	add	r2, r1, #1
   12cec:	sub	r1, fp, #32
   12cf0:	subs	r0, r6, r9
   12cf4:	movne	r0, r6
   12cf8:	bl	13988 <__assert_fail@plt+0x294c>
   12cfc:	mov	sl, r0
   12d00:	cmp	r6, r9
   12d04:	str	r0, [r4]
   12d08:	bne	12d14 <__assert_fail@plt+0x1cd8>
   12d0c:	ldrd	r0, [r9]
   12d10:	stm	sl, {r0, r1}
   12d14:	ldr	r1, [r8]
   12d18:	ldr	r2, [fp, #-32]	; 0xffffffe0
   12d1c:	add	r0, sl, r1, lsl #3
   12d20:	sub	r1, r2, r1
   12d24:	lsl	r2, r1, #3
   12d28:	mov	r1, #0
   12d2c:	bl	10f88 <memset@plt>
   12d30:	ldr	r0, [fp, #-32]	; 0xffffffe0
   12d34:	str	r0, [r8]
   12d38:	mov	r9, sl
   12d3c:	ldm	r7, {r0, r1}
   12d40:	orr	r8, r1, #1
   12d44:	add	r1, r7, #8
   12d48:	ldr	r2, [r7, #40]	; 0x28
   12d4c:	ldr	r3, [r7, #44]	; 0x2c
   12d50:	ldr	r6, [r9, r5, lsl #3]!
   12d54:	str	r1, [sp, #20]
   12d58:	ldr	r4, [r9, #4]!
   12d5c:	stm	sp, {r0, r8}
   12d60:	add	r0, sp, #8
   12d64:	stm	r0, {r1, r2, r3}
   12d68:	ldr	r2, [sp, #32]
   12d6c:	ldr	r3, [sp, #36]	; 0x24
   12d70:	mov	r1, r6
   12d74:	mov	r0, r4
   12d78:	bl	11a64 <__assert_fail@plt+0xa28>
   12d7c:	cmp	r6, r0
   12d80:	bhi	12de4 <__assert_fail@plt+0x1da8>
   12d84:	add	r6, r0, #1
   12d88:	movw	r0, #24976	; 0x6190
   12d8c:	movt	r0, #2
   12d90:	str	r6, [sl, r5, lsl #3]
   12d94:	cmp	r4, r0
   12d98:	beq	12da4 <__assert_fail@plt+0x1d68>
   12d9c:	mov	r0, r4
   12da0:	bl	146a0 <__assert_fail@plt+0x3664>
   12da4:	mov	r0, r6
   12da8:	bl	13858 <__assert_fail@plt+0x281c>
   12dac:	str	r0, [r9]
   12db0:	mov	r4, r0
   12db4:	add	r3, sp, #8
   12db8:	ldr	r0, [r7]
   12dbc:	ldr	r1, [r7, #40]	; 0x28
   12dc0:	ldr	r2, [r7, #44]	; 0x2c
   12dc4:	stm	sp, {r0, r8}
   12dc8:	ldr	r0, [sp, #20]
   12dcc:	stm	r3, {r0, r1, r2}
   12dd0:	ldr	r2, [sp, #32]
   12dd4:	ldr	r3, [sp, #36]	; 0x24
   12dd8:	mov	r0, r4
   12ddc:	mov	r1, r6
   12de0:	bl	11a64 <__assert_fail@plt+0xa28>
   12de4:	ldr	r0, [sp, #28]
   12de8:	ldr	r1, [sp, #24]
   12dec:	str	r1, [r0]
   12df0:	mov	r0, r4
   12df4:	sub	sp, fp, #28
   12df8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12dfc:	bl	11030 <abort@plt>
   12e00:	movw	r3, #24928	; 0x6160
   12e04:	movt	r3, #2
   12e08:	b	12c68 <__assert_fail@plt+0x1c2c>
   12e0c:	movw	r3, #24928	; 0x6160
   12e10:	mov	r1, r0
   12e14:	mov	r0, #0
   12e18:	mvn	r2, #0
   12e1c:	movt	r3, #2
   12e20:	b	12c68 <__assert_fail@plt+0x1c2c>
   12e24:	movw	r3, #24928	; 0x6160
   12e28:	mov	r2, r1
   12e2c:	mov	r1, r0
   12e30:	mov	r0, #0
   12e34:	movt	r3, #2
   12e38:	b	12c68 <__assert_fail@plt+0x1c2c>
   12e3c:	push	{fp, lr}
   12e40:	mov	fp, sp
   12e44:	sub	sp, sp, #48	; 0x30
   12e48:	vmov.i32	q8, #0	; 0x00000000
   12e4c:	mov	ip, #32
   12e50:	mov	r3, sp
   12e54:	mov	lr, r2
   12e58:	cmp	r1, #10
   12e5c:	add	r2, r3, #16
   12e60:	vst1.64	{d16-d17}, [r3], ip
   12e64:	vst1.64	{d16-d17}, [r2]
   12e68:	vst1.64	{d16-d17}, [r3]
   12e6c:	beq	12e8c <__assert_fail@plt+0x1e50>
   12e70:	str	r1, [sp]
   12e74:	mov	r3, sp
   12e78:	mov	r1, lr
   12e7c:	mvn	r2, #0
   12e80:	bl	12c68 <__assert_fail@plt+0x1c2c>
   12e84:	mov	sp, fp
   12e88:	pop	{fp, pc}
   12e8c:	bl	11030 <abort@plt>
   12e90:	push	{r4, sl, fp, lr}
   12e94:	add	fp, sp, #8
   12e98:	sub	sp, sp, #48	; 0x30
   12e9c:	vmov.i32	q8, #0	; 0x00000000
   12ea0:	mov	ip, r3
   12ea4:	mov	r3, sp
   12ea8:	mov	lr, #32
   12eac:	cmp	r1, #10
   12eb0:	add	r4, r3, #16
   12eb4:	vst1.64	{d16-d17}, [r3], lr
   12eb8:	vst1.64	{d16-d17}, [r4]
   12ebc:	vst1.64	{d16-d17}, [r3]
   12ec0:	beq	12ee0 <__assert_fail@plt+0x1ea4>
   12ec4:	str	r1, [sp]
   12ec8:	mov	r1, r2
   12ecc:	mov	r3, sp
   12ed0:	mov	r2, ip
   12ed4:	bl	12c68 <__assert_fail@plt+0x1c2c>
   12ed8:	sub	sp, fp, #8
   12edc:	pop	{r4, sl, fp, pc}
   12ee0:	bl	11030 <abort@plt>
   12ee4:	mov	r2, r1
   12ee8:	mov	r1, r0
   12eec:	mov	r0, #0
   12ef0:	b	12e3c <__assert_fail@plt+0x1e00>
   12ef4:	mov	r3, r2
   12ef8:	mov	r2, r1
   12efc:	mov	r1, r0
   12f00:	mov	r0, #0
   12f04:	b	12e90 <__assert_fail@plt+0x1e54>
   12f08:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   12f0c:	add	fp, sp, #24
   12f10:	sub	sp, sp, #48	; 0x30
   12f14:	movw	r8, #24928	; 0x6160
   12f18:	mov	lr, r0
   12f1c:	mov	r3, sp
   12f20:	mov	ip, r1
   12f24:	movt	r8, #2
   12f28:	mov	r1, r3
   12f2c:	ldm	r8!, {r0, r4, r5, r6, r7, r9}
   12f30:	stmia	r1!, {r0, r4, r5, r6, r7, r9}
   12f34:	ldm	r8, {r0, r4, r5, r6, r7, r9}
   12f38:	stm	r1, {r0, r4, r5, r6, r7, r9}
   12f3c:	ubfx	r0, r2, #5, #3
   12f40:	and	r2, r2, #31
   12f44:	mov	r4, #1
   12f48:	add	r0, r3, r0, lsl #2
   12f4c:	ldr	r1, [r0, #8]
   12f50:	bic	r4, r4, r1, lsr r2
   12f54:	eor	r1, r1, r4, lsl r2
   12f58:	mov	r2, ip
   12f5c:	str	r1, [r0, #8]
   12f60:	mov	r0, #0
   12f64:	mov	r1, lr
   12f68:	bl	12c68 <__assert_fail@plt+0x1c2c>
   12f6c:	sub	sp, fp, #24
   12f70:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   12f74:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   12f78:	add	fp, sp, #24
   12f7c:	sub	sp, sp, #48	; 0x30
   12f80:	movw	lr, #24928	; 0x6160
   12f84:	mov	ip, r0
   12f88:	mov	r3, sp
   12f8c:	movt	lr, #2
   12f90:	mov	r2, r3
   12f94:	ldm	lr!, {r0, r4, r5, r6, r7, r8}
   12f98:	stmia	r2!, {r0, r4, r5, r6, r7, r8}
   12f9c:	ldm	lr, {r0, r4, r5, r6, r7, r8}
   12fa0:	stm	r2, {r0, r4, r5, r6, r7, r8}
   12fa4:	ubfx	r0, r1, #5, #3
   12fa8:	and	r1, r1, #31
   12fac:	mov	r7, #1
   12fb0:	add	r0, r3, r0, lsl #2
   12fb4:	ldr	r2, [r0, #8]
   12fb8:	bic	r7, r7, r2, lsr r1
   12fbc:	eor	r1, r2, r7, lsl r1
   12fc0:	mvn	r2, #0
   12fc4:	str	r1, [r0, #8]
   12fc8:	mov	r0, #0
   12fcc:	mov	r1, ip
   12fd0:	bl	12c68 <__assert_fail@plt+0x1c2c>
   12fd4:	sub	sp, fp, #24
   12fd8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   12fdc:	push	{r4, r5, r6, r7, fp, lr}
   12fe0:	add	fp, sp, #16
   12fe4:	sub	sp, sp, #48	; 0x30
   12fe8:	movw	lr, #24928	; 0x6160
   12fec:	mov	ip, r0
   12ff0:	mov	r3, sp
   12ff4:	movt	lr, #2
   12ff8:	mov	r2, r3
   12ffc:	ldm	lr!, {r0, r1, r4, r5, r6, r7}
   13000:	stmia	r2!, {r0, r1, r4, r5, r6, r7}
   13004:	ldm	lr, {r0, r1, r4, r5, r6, r7}
   13008:	stm	r2, {r0, r1, r4, r5, r6, r7}
   1300c:	mov	r1, ip
   13010:	mvn	r2, #0
   13014:	ldr	r0, [sp, #12]
   13018:	orr	r0, r0, #67108864	; 0x4000000
   1301c:	str	r0, [sp, #12]
   13020:	mov	r0, #0
   13024:	bl	12c68 <__assert_fail@plt+0x1c2c>
   13028:	sub	sp, fp, #16
   1302c:	pop	{r4, r5, r6, r7, fp, pc}
   13030:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   13034:	add	fp, sp, #24
   13038:	sub	sp, sp, #48	; 0x30
   1303c:	movw	r8, #24928	; 0x6160
   13040:	mov	ip, r1
   13044:	mov	lr, r0
   13048:	mov	r3, sp
   1304c:	movt	r8, #2
   13050:	mov	r2, r3
   13054:	ldm	r8!, {r0, r1, r4, r5, r6, r7}
   13058:	stmia	r2!, {r0, r1, r4, r5, r6, r7}
   1305c:	ldm	r8, {r0, r1, r4, r5, r6, r7}
   13060:	stm	r2, {r0, r1, r4, r5, r6, r7}
   13064:	mov	r1, lr
   13068:	mov	r2, ip
   1306c:	ldr	r0, [sp, #12]
   13070:	orr	r0, r0, #67108864	; 0x4000000
   13074:	str	r0, [sp, #12]
   13078:	mov	r0, #0
   1307c:	bl	12c68 <__assert_fail@plt+0x1c2c>
   13080:	sub	sp, fp, #24
   13084:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   13088:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1308c:	add	fp, sp, #24
   13090:	sub	sp, sp, #96	; 0x60
   13094:	vmov.i32	q8, #0	; 0x00000000
   13098:	mov	lr, sp
   1309c:	mov	ip, r2
   130a0:	cmp	r1, #10
   130a4:	add	r3, lr, #16
   130a8:	mov	r2, lr
   130ac:	vst1.64	{d16-d17}, [r3]
   130b0:	mov	r3, #28
   130b4:	vst1.64	{d16-d17}, [r2], r3
   130b8:	vst1.32	{d16-d17}, [r2]
   130bc:	beq	130fc <__assert_fail@plt+0x20c0>
   130c0:	str	r1, [sp, #48]	; 0x30
   130c4:	add	r3, sp, #48	; 0x30
   130c8:	ldm	lr!, {r2, r4, r5, r6, r7}
   130cc:	add	r1, r3, #4
   130d0:	stmia	r1!, {r2, r4, r5, r6, r7}
   130d4:	ldm	lr, {r2, r4, r5, r6, r7, r8}
   130d8:	stm	r1, {r2, r4, r5, r6, r7, r8}
   130dc:	mvn	r2, #0
   130e0:	ldr	r1, [sp, #60]	; 0x3c
   130e4:	orr	r1, r1, #67108864	; 0x4000000
   130e8:	str	r1, [sp, #60]	; 0x3c
   130ec:	mov	r1, ip
   130f0:	bl	12c68 <__assert_fail@plt+0x1c2c>
   130f4:	sub	sp, fp, #24
   130f8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   130fc:	bl	11030 <abort@plt>
   13100:	push	{fp, lr}
   13104:	mov	fp, sp
   13108:	sub	sp, sp, #8
   1310c:	mvn	ip, #0
   13110:	str	ip, [sp]
   13114:	bl	13120 <__assert_fail@plt+0x20e4>
   13118:	mov	sp, fp
   1311c:	pop	{fp, pc}
   13120:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   13124:	add	fp, sp, #24
   13128:	sub	sp, sp, #48	; 0x30
   1312c:	movw	ip, #24928	; 0x6160
   13130:	mov	lr, r3
   13134:	mov	r3, sp
   13138:	cmp	r1, #0
   1313c:	movt	ip, #2
   13140:	cmpne	r2, #0
   13144:	ldm	ip!, {r4, r5, r6, r7, r8, r9}
   13148:	stmia	r3!, {r4, r5, r6, r7, r8, r9}
   1314c:	ldm	ip, {r4, r5, r6, r7, r8, r9}
   13150:	stm	r3, {r4, r5, r6, r7, r8, r9}
   13154:	mov	r3, #10
   13158:	str	r3, [sp]
   1315c:	bne	13164 <__assert_fail@plt+0x2128>
   13160:	bl	11030 <abort@plt>
   13164:	ldr	ip, [fp, #8]
   13168:	str	r2, [sp, #44]	; 0x2c
   1316c:	str	r1, [sp, #40]	; 0x28
   13170:	mov	r3, sp
   13174:	mov	r1, lr
   13178:	mov	r2, ip
   1317c:	bl	12c68 <__assert_fail@plt+0x1c2c>
   13180:	sub	sp, fp, #24
   13184:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   13188:	push	{fp, lr}
   1318c:	mov	fp, sp
   13190:	sub	sp, sp, #8
   13194:	mov	r3, r2
   13198:	mov	r2, r1
   1319c:	mov	r1, r0
   131a0:	mvn	r0, #0
   131a4:	str	r0, [sp]
   131a8:	mov	r0, #0
   131ac:	bl	13120 <__assert_fail@plt+0x20e4>
   131b0:	mov	sp, fp
   131b4:	pop	{fp, pc}
   131b8:	push	{fp, lr}
   131bc:	mov	fp, sp
   131c0:	sub	sp, sp, #8
   131c4:	mov	ip, r2
   131c8:	mov	r2, r1
   131cc:	mov	r1, r0
   131d0:	str	r3, [sp]
   131d4:	mov	r0, #0
   131d8:	mov	r3, ip
   131dc:	bl	13120 <__assert_fail@plt+0x20e4>
   131e0:	mov	sp, fp
   131e4:	pop	{fp, pc}
   131e8:	movw	r3, #24832	; 0x6100
   131ec:	movt	r3, #2
   131f0:	b	12c68 <__assert_fail@plt+0x1c2c>
   131f4:	movw	r3, #24832	; 0x6100
   131f8:	mov	r2, r1
   131fc:	mov	r1, r0
   13200:	mov	r0, #0
   13204:	movt	r3, #2
   13208:	b	12c68 <__assert_fail@plt+0x1c2c>
   1320c:	movw	r3, #24832	; 0x6100
   13210:	mvn	r2, #0
   13214:	movt	r3, #2
   13218:	b	12c68 <__assert_fail@plt+0x1c2c>
   1321c:	movw	r3, #24832	; 0x6100
   13220:	mov	r1, r0
   13224:	mov	r0, #0
   13228:	mvn	r2, #0
   1322c:	movt	r3, #2
   13230:	b	12c68 <__assert_fail@plt+0x1c2c>
   13234:	push	{r4, r5, fp, lr}
   13238:	add	fp, sp, #8
   1323c:	mov	r5, r0
   13240:	mov	r4, r1
   13244:	mov	r0, #0
   13248:	mov	r2, #5
   1324c:	mov	r1, r5
   13250:	bl	10e5c <dcgettext@plt>
   13254:	cmp	r0, r5
   13258:	popne	{r4, r5, fp, pc}
   1325c:	bl	1476c <__assert_fail@plt+0x3730>
   13260:	ldrb	r1, [r0]
   13264:	and	r1, r1, #223	; 0xdf
   13268:	cmp	r1, #71	; 0x47
   1326c:	beq	132d4 <__assert_fail@plt+0x2298>
   13270:	cmp	r1, #85	; 0x55
   13274:	bne	1332c <__assert_fail@plt+0x22f0>
   13278:	ldrb	r1, [r0, #1]
   1327c:	and	r1, r1, #223	; 0xdf
   13280:	cmp	r1, #84	; 0x54
   13284:	bne	1332c <__assert_fail@plt+0x22f0>
   13288:	ldrb	r1, [r0, #2]
   1328c:	and	r1, r1, #223	; 0xdf
   13290:	cmp	r1, #70	; 0x46
   13294:	bne	1332c <__assert_fail@plt+0x22f0>
   13298:	ldrb	r1, [r0, #3]
   1329c:	cmp	r1, #45	; 0x2d
   132a0:	bne	1332c <__assert_fail@plt+0x22f0>
   132a4:	ldrb	r1, [r0, #4]
   132a8:	cmp	r1, #56	; 0x38
   132ac:	bne	1332c <__assert_fail@plt+0x22f0>
   132b0:	ldrb	r0, [r0, #5]
   132b4:	cmp	r0, #0
   132b8:	bne	1332c <__assert_fail@plt+0x22f0>
   132bc:	ldrb	r1, [r5]
   132c0:	movw	r2, #20465	; 0x4ff1
   132c4:	movw	r0, #20469	; 0x4ff5
   132c8:	movt	r2, #1
   132cc:	movt	r0, #1
   132d0:	b	1335c <__assert_fail@plt+0x2320>
   132d4:	ldrb	r1, [r0, #1]
   132d8:	and	r1, r1, #223	; 0xdf
   132dc:	cmp	r1, #66	; 0x42
   132e0:	bne	1332c <__assert_fail@plt+0x22f0>
   132e4:	ldrb	r1, [r0, #2]
   132e8:	cmp	r1, #49	; 0x31
   132ec:	bne	1332c <__assert_fail@plt+0x22f0>
   132f0:	ldrb	r1, [r0, #3]
   132f4:	cmp	r1, #56	; 0x38
   132f8:	bne	1332c <__assert_fail@plt+0x22f0>
   132fc:	ldrb	r1, [r0, #4]
   13300:	cmp	r1, #48	; 0x30
   13304:	bne	1332c <__assert_fail@plt+0x22f0>
   13308:	ldrb	r1, [r0, #5]
   1330c:	cmp	r1, #51	; 0x33
   13310:	bne	1332c <__assert_fail@plt+0x22f0>
   13314:	ldrb	r1, [r0, #6]
   13318:	cmp	r1, #48	; 0x30
   1331c:	bne	1332c <__assert_fail@plt+0x22f0>
   13320:	ldrb	r0, [r0, #7]
   13324:	cmp	r0, #0
   13328:	beq	13348 <__assert_fail@plt+0x230c>
   1332c:	movw	r1, #20459	; 0x4feb
   13330:	movw	r0, #20463	; 0x4fef
   13334:	cmp	r4, #9
   13338:	movt	r1, #1
   1333c:	movt	r0, #1
   13340:	moveq	r0, r1
   13344:	pop	{r4, r5, fp, pc}
   13348:	ldrb	r1, [r5]
   1334c:	movw	r2, #20473	; 0x4ff9
   13350:	movw	r0, #20477	; 0x4ffd
   13354:	movt	r2, #1
   13358:	movt	r0, #1
   1335c:	cmp	r1, #96	; 0x60
   13360:	moveq	r0, r2
   13364:	pop	{r4, r5, fp, pc}
   13368:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1336c:	add	fp, sp, #24
   13370:	sub	sp, sp, #32
   13374:	ldr	r6, [fp, #12]
   13378:	ldr	r7, [fp, #8]
   1337c:	mov	r4, r2
   13380:	mov	r8, r0
   13384:	cmp	r1, #0
   13388:	beq	133b0 <__assert_fail@plt+0x2374>
   1338c:	movw	r2, #20564	; 0x5054
   13390:	mov	r5, r1
   13394:	str	r3, [sp, #4]
   13398:	str	r4, [sp]
   1339c:	mov	r0, r8
   133a0:	mov	r1, #1
   133a4:	movt	r2, #1
   133a8:	mov	r3, r5
   133ac:	b	133c8 <__assert_fail@plt+0x238c>
   133b0:	movw	r2, #20576	; 0x5060
   133b4:	str	r3, [sp]
   133b8:	mov	r0, r8
   133bc:	mov	r1, #1
   133c0:	mov	r3, r4
   133c4:	movt	r2, #1
   133c8:	bl	10fb8 <__fprintf_chk@plt>
   133cc:	movw	r1, #20583	; 0x5067
   133d0:	mov	r0, #0
   133d4:	mov	r2, #5
   133d8:	movt	r1, #1
   133dc:	bl	10e5c <dcgettext@plt>
   133e0:	movw	r2, #21301	; 0x5335
   133e4:	mov	r3, r0
   133e8:	movw	r0, #2022	; 0x7e6
   133ec:	mov	r1, #1
   133f0:	movt	r2, #1
   133f4:	str	r0, [sp]
   133f8:	mov	r0, r8
   133fc:	bl	10fb8 <__fprintf_chk@plt>
   13400:	movw	r4, #19456	; 0x4c00
   13404:	mov	r1, r8
   13408:	movt	r4, #1
   1340c:	mov	r0, r4
   13410:	bl	10df0 <fputs_unlocked@plt>
   13414:	movw	r1, #20587	; 0x506b
   13418:	mov	r0, #0
   1341c:	mov	r2, #5
   13420:	movt	r1, #1
   13424:	bl	10e5c <dcgettext@plt>
   13428:	movw	r3, #20758	; 0x5116
   1342c:	mov	r2, r0
   13430:	mov	r0, r8
   13434:	mov	r1, #1
   13438:	movt	r3, #1
   1343c:	bl	10fb8 <__fprintf_chk@plt>
   13440:	mov	r0, r4
   13444:	mov	r1, r8
   13448:	bl	10df0 <fputs_unlocked@plt>
   1344c:	cmp	r6, #9
   13450:	bhi	134b4 <__assert_fail@plt+0x2478>
   13454:	add	r0, pc, #0
   13458:	ldr	pc, [r0, r6, lsl #2]
   1345c:	andeq	r3, r1, ip, lsl #13
   13460:	andeq	r3, r1, r4, lsl #9
   13464:	andeq	r3, r1, r0, asr #9
   13468:	andeq	r3, r1, r8, ror #9
   1346c:	andeq	r3, r1, r0, lsl r5
   13470:	andeq	r3, r1, r8, lsr r5
   13474:	andeq	r3, r1, r0, ror #10
   13478:	muleq	r1, r8, r5
   1347c:	andeq	r3, r1, r8, lsr r6
   13480:	andeq	r3, r1, r0, ror #11
   13484:	movw	r1, #20792	; 0x5138
   13488:	mov	r0, #0
   1348c:	mov	r2, #5
   13490:	movt	r1, #1
   13494:	bl	10e5c <dcgettext@plt>
   13498:	ldr	r3, [r7]
   1349c:	mov	r2, r0
   134a0:	mov	r0, r8
   134a4:	mov	r1, #1
   134a8:	sub	sp, fp, #24
   134ac:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   134b0:	b	10fb8 <__fprintf_chk@plt>
   134b4:	movw	r1, #21111	; 0x5277
   134b8:	movt	r1, #1
   134bc:	b	135e8 <__assert_fail@plt+0x25ac>
   134c0:	movw	r1, #20808	; 0x5148
   134c4:	mov	r0, #0
   134c8:	mov	r2, #5
   134cc:	movt	r1, #1
   134d0:	bl	10e5c <dcgettext@plt>
   134d4:	mov	r2, r0
   134d8:	ldr	r3, [r7]
   134dc:	ldr	r0, [r7, #4]
   134e0:	str	r0, [sp]
   134e4:	b	135d4 <__assert_fail@plt+0x2598>
   134e8:	movw	r1, #20831	; 0x515f
   134ec:	mov	r0, #0
   134f0:	mov	r2, #5
   134f4:	movt	r1, #1
   134f8:	bl	10e5c <dcgettext@plt>
   134fc:	mov	r2, r0
   13500:	ldr	r3, [r7]
   13504:	ldmib	r7, {r0, r1}
   13508:	stm	sp, {r0, r1}
   1350c:	b	135d4 <__assert_fail@plt+0x2598>
   13510:	movw	r1, #20859	; 0x517b
   13514:	mov	r0, #0
   13518:	mov	r2, #5
   1351c:	movt	r1, #1
   13520:	bl	10e5c <dcgettext@plt>
   13524:	ldr	r3, [r7]
   13528:	mov	r2, r0
   1352c:	ldmib	r7, {r0, r1, r7}
   13530:	stm	sp, {r0, r1, r7}
   13534:	b	135d4 <__assert_fail@plt+0x2598>
   13538:	movw	r1, #20891	; 0x519b
   1353c:	mov	r0, #0
   13540:	mov	r2, #5
   13544:	movt	r1, #1
   13548:	bl	10e5c <dcgettext@plt>
   1354c:	ldr	r3, [r7]
   13550:	mov	r2, r0
   13554:	ldmib	r7, {r0, r1, r6, r7}
   13558:	stm	sp, {r0, r1, r6, r7}
   1355c:	b	135d4 <__assert_fail@plt+0x2598>
   13560:	movw	r1, #20927	; 0x51bf
   13564:	mov	r0, #0
   13568:	mov	r2, #5
   1356c:	movt	r1, #1
   13570:	bl	10e5c <dcgettext@plt>
   13574:	mov	r2, r0
   13578:	ldr	r3, [r7]
   1357c:	ldmib	r7, {r0, r1, r6}
   13580:	ldr	r5, [r7, #16]
   13584:	ldr	r7, [r7, #20]
   13588:	stm	sp, {r0, r1, r6}
   1358c:	str	r5, [sp, #12]
   13590:	str	r7, [sp, #16]
   13594:	b	135d4 <__assert_fail@plt+0x2598>
   13598:	movw	r1, #20967	; 0x51e7
   1359c:	mov	r0, #0
   135a0:	mov	r2, #5
   135a4:	movt	r1, #1
   135a8:	bl	10e5c <dcgettext@plt>
   135ac:	mov	r2, r0
   135b0:	ldr	r3, [r7]
   135b4:	ldmib	r7, {r0, r1, r6}
   135b8:	ldr	r5, [r7, #16]
   135bc:	ldr	r4, [r7, #20]
   135c0:	ldr	r7, [r7, #24]
   135c4:	stm	sp, {r0, r1, r6}
   135c8:	str	r5, [sp, #12]
   135cc:	str	r4, [sp, #16]
   135d0:	str	r7, [sp, #20]
   135d4:	mov	r0, r8
   135d8:	mov	r1, #1
   135dc:	b	13688 <__assert_fail@plt+0x264c>
   135e0:	movw	r1, #21059	; 0x5243
   135e4:	movt	r1, #1
   135e8:	mov	r0, #0
   135ec:	mov	r2, #5
   135f0:	bl	10e5c <dcgettext@plt>
   135f4:	mov	ip, r0
   135f8:	ldr	r3, [r7]
   135fc:	ldr	r0, [r7, #4]
   13600:	ldr	r1, [r7, #8]
   13604:	ldr	r6, [r7, #12]
   13608:	ldr	r5, [r7, #16]
   1360c:	ldr	r4, [r7, #20]
   13610:	ldr	r2, [r7, #24]
   13614:	ldr	lr, [r7, #28]
   13618:	ldr	r7, [r7, #32]
   1361c:	stm	sp, {r0, r1, r6}
   13620:	str	r5, [sp, #12]
   13624:	str	r4, [sp, #16]
   13628:	str	r2, [sp, #20]
   1362c:	str	lr, [sp, #24]
   13630:	str	r7, [sp, #28]
   13634:	b	1367c <__assert_fail@plt+0x2640>
   13638:	movw	r1, #21011	; 0x5213
   1363c:	mov	r0, #0
   13640:	mov	r2, #5
   13644:	movt	r1, #1
   13648:	bl	10e5c <dcgettext@plt>
   1364c:	mov	ip, r0
   13650:	ldr	r3, [r7]
   13654:	ldmib	r7, {r0, r1, r6}
   13658:	ldr	r5, [r7, #16]
   1365c:	ldr	r4, [r7, #20]
   13660:	ldr	r2, [r7, #24]
   13664:	ldr	r7, [r7, #28]
   13668:	stm	sp, {r0, r1, r6}
   1366c:	str	r5, [sp, #12]
   13670:	str	r4, [sp, #16]
   13674:	str	r2, [sp, #20]
   13678:	str	r7, [sp, #24]
   1367c:	mov	r0, r8
   13680:	mov	r1, #1
   13684:	mov	r2, ip
   13688:	bl	10fb8 <__fprintf_chk@plt>
   1368c:	sub	sp, fp, #24
   13690:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   13694:	push	{r4, sl, fp, lr}
   13698:	add	fp, sp, #8
   1369c:	sub	sp, sp, #8
   136a0:	ldr	ip, [fp, #8]
   136a4:	mov	lr, #0
   136a8:	ldr	r4, [ip, lr, lsl #2]
   136ac:	add	lr, lr, #1
   136b0:	cmp	r4, #0
   136b4:	bne	136a8 <__assert_fail@plt+0x266c>
   136b8:	sub	r4, lr, #1
   136bc:	str	ip, [sp]
   136c0:	str	r4, [sp, #4]
   136c4:	bl	13368 <__assert_fail@plt+0x232c>
   136c8:	sub	sp, fp, #8
   136cc:	pop	{r4, sl, fp, pc}
   136d0:	push	{r4, r5, fp, lr}
   136d4:	add	fp, sp, #8
   136d8:	sub	sp, sp, #48	; 0x30
   136dc:	ldr	r4, [fp, #8]
   136e0:	mov	ip, #0
   136e4:	add	lr, sp, #8
   136e8:	ldr	r5, [r4]
   136ec:	cmp	r5, #0
   136f0:	str	r5, [lr, ip, lsl #2]
   136f4:	beq	1370c <__assert_fail@plt+0x26d0>
   136f8:	add	ip, ip, #1
   136fc:	add	r4, r4, #4
   13700:	cmp	ip, #10
   13704:	bne	136e8 <__assert_fail@plt+0x26ac>
   13708:	mov	ip, #10
   1370c:	str	lr, [sp]
   13710:	str	ip, [sp, #4]
   13714:	bl	13368 <__assert_fail@plt+0x232c>
   13718:	sub	sp, fp, #8
   1371c:	pop	{r4, r5, fp, pc}
   13720:	push	{fp, lr}
   13724:	mov	fp, sp
   13728:	sub	sp, sp, #8
   1372c:	add	ip, fp, #8
   13730:	str	ip, [sp, #4]
   13734:	str	ip, [sp]
   13738:	bl	136d0 <__assert_fail@plt+0x2694>
   1373c:	mov	sp, fp
   13740:	pop	{fp, pc}
   13744:	push	{fp, lr}
   13748:	mov	fp, sp
   1374c:	movw	r0, #24900	; 0x6144
   13750:	movt	r0, #2
   13754:	ldr	r1, [r0]
   13758:	movw	r0, #19456	; 0x4c00
   1375c:	movt	r0, #1
   13760:	bl	10df0 <fputs_unlocked@plt>
   13764:	movw	r1, #21171	; 0x52b3
   13768:	mov	r0, #0
   1376c:	mov	r2, #5
   13770:	movt	r1, #1
   13774:	bl	10e5c <dcgettext@plt>
   13778:	movw	r2, #21191	; 0x52c7
   1377c:	mov	r1, r0
   13780:	mov	r0, #1
   13784:	movt	r2, #1
   13788:	bl	10f94 <__printf_chk@plt>
   1378c:	movw	r1, #21213	; 0x52dd
   13790:	mov	r0, #0
   13794:	mov	r2, #5
   13798:	movt	r1, #1
   1379c:	bl	10e5c <dcgettext@plt>
   137a0:	movw	r2, #19704	; 0x4cf8
   137a4:	movw	r3, #19891	; 0x4db3
   137a8:	mov	r1, r0
   137ac:	mov	r0, #1
   137b0:	movt	r2, #1
   137b4:	movt	r3, #1
   137b8:	bl	10f94 <__printf_chk@plt>
   137bc:	movw	r1, #21233	; 0x52f1
   137c0:	mov	r0, #0
   137c4:	mov	r2, #5
   137c8:	movt	r1, #1
   137cc:	bl	10e5c <dcgettext@plt>
   137d0:	movw	r2, #21272	; 0x5318
   137d4:	mov	r1, r0
   137d8:	mov	r0, #1
   137dc:	movt	r2, #1
   137e0:	pop	{fp, lr}
   137e4:	b	10f94 <__printf_chk@plt>
   137e8:	b	137ec <__assert_fail@plt+0x27b0>
   137ec:	push	{r4, r5, r6, sl, fp, lr}
   137f0:	add	fp, sp, #16
   137f4:	mov	r4, r2
   137f8:	mov	r5, r1
   137fc:	mov	r6, r0
   13800:	bl	14808 <__assert_fail@plt+0x37cc>
   13804:	cmp	r0, #0
   13808:	popne	{r4, r5, r6, sl, fp, pc}
   1380c:	cmp	r6, #0
   13810:	beq	13824 <__assert_fail@plt+0x27e8>
   13814:	cmp	r5, #0
   13818:	cmpne	r4, #0
   1381c:	bne	13824 <__assert_fail@plt+0x27e8>
   13820:	pop	{r4, r5, r6, sl, fp, pc}
   13824:	bl	13c54 <__assert_fail@plt+0x2c18>
   13828:	push	{fp, lr}
   1382c:	mov	fp, sp
   13830:	bl	144a8 <__assert_fail@plt+0x346c>
   13834:	cmp	r0, #0
   13838:	popne	{fp, pc}
   1383c:	bl	13c54 <__assert_fail@plt+0x2c18>
   13840:	push	{fp, lr}
   13844:	mov	fp, sp
   13848:	bl	144a8 <__assert_fail@plt+0x346c>
   1384c:	cmp	r0, #0
   13850:	popne	{fp, pc}
   13854:	bl	13c54 <__assert_fail@plt+0x2c18>
   13858:	push	{fp, lr}
   1385c:	mov	fp, sp
   13860:	bl	144a8 <__assert_fail@plt+0x346c>
   13864:	cmp	r0, #0
   13868:	popne	{fp, pc}
   1386c:	bl	13c54 <__assert_fail@plt+0x2c18>
   13870:	push	{r4, r5, fp, lr}
   13874:	add	fp, sp, #8
   13878:	mov	r4, r1
   1387c:	mov	r5, r0
   13880:	bl	144d8 <__assert_fail@plt+0x349c>
   13884:	cmp	r0, #0
   13888:	popne	{r4, r5, fp, pc}
   1388c:	cmp	r5, #0
   13890:	beq	138a0 <__assert_fail@plt+0x2864>
   13894:	cmp	r4, #0
   13898:	bne	138a0 <__assert_fail@plt+0x2864>
   1389c:	pop	{r4, r5, fp, pc}
   138a0:	bl	13c54 <__assert_fail@plt+0x2c18>
   138a4:	push	{fp, lr}
   138a8:	mov	fp, sp
   138ac:	cmp	r1, #0
   138b0:	orreq	r1, r1, #1
   138b4:	bl	144d8 <__assert_fail@plt+0x349c>
   138b8:	cmp	r0, #0
   138bc:	popne	{fp, pc}
   138c0:	bl	13c54 <__assert_fail@plt+0x2c18>
   138c4:	push	{fp, lr}
   138c8:	mov	fp, sp
   138cc:	clz	r3, r2
   138d0:	lsr	ip, r3, #5
   138d4:	clz	r3, r1
   138d8:	lsr	r3, r3, #5
   138dc:	orrs	r3, r3, ip
   138e0:	movwne	r1, #1
   138e4:	movwne	r2, #1
   138e8:	bl	14808 <__assert_fail@plt+0x37cc>
   138ec:	cmp	r0, #0
   138f0:	popne	{fp, pc}
   138f4:	bl	13c54 <__assert_fail@plt+0x2c18>
   138f8:	push	{fp, lr}
   138fc:	mov	fp, sp
   13900:	mov	r2, r1
   13904:	mov	r1, r0
   13908:	mov	r0, #0
   1390c:	bl	14808 <__assert_fail@plt+0x37cc>
   13910:	cmp	r0, #0
   13914:	popne	{fp, pc}
   13918:	bl	13c54 <__assert_fail@plt+0x2c18>
   1391c:	mov	r2, r1
   13920:	mov	r1, r0
   13924:	mov	r0, #0
   13928:	b	138c4 <__assert_fail@plt+0x2888>
   1392c:	mov	r2, #1
   13930:	b	13934 <__assert_fail@plt+0x28f8>
   13934:	push	{r4, r5, fp, lr}
   13938:	add	fp, sp, #8
   1393c:	ldr	r5, [r1]
   13940:	mov	r4, r1
   13944:	cmp	r0, #0
   13948:	beq	13960 <__assert_fail@plt+0x2924>
   1394c:	mov	r1, #1
   13950:	add	r1, r1, r5, lsr #1
   13954:	adds	r5, r5, r1
   13958:	bcc	13978 <__assert_fail@plt+0x293c>
   1395c:	bl	13c54 <__assert_fail@plt+0x2c18>
   13960:	cmp	r5, #0
   13964:	bne	13978 <__assert_fail@plt+0x293c>
   13968:	mov	r1, #64	; 0x40
   1396c:	cmp	r2, #64	; 0x40
   13970:	udiv	r5, r1, r2
   13974:	addhi	r5, r5, #1
   13978:	mov	r1, r5
   1397c:	bl	137ec <__assert_fail@plt+0x27b0>
   13980:	str	r5, [r4]
   13984:	pop	{r4, r5, fp, pc}
   13988:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1398c:	add	fp, sp, #24
   13990:	ldr	r6, [r1]
   13994:	mov	r8, r1
   13998:	ldr	r4, [fp, #8]
   1399c:	add	r1, r6, r6, asr #1
   139a0:	cmp	r1, r6
   139a4:	mvnvs	r1, #-2147483648	; 0x80000000
   139a8:	cmp	r1, r3
   139ac:	mov	r5, r1
   139b0:	movgt	r5, r3
   139b4:	cmn	r3, #1
   139b8:	movle	r5, r1
   139bc:	cmn	r4, #1
   139c0:	ble	139e0 <__assert_fail@plt+0x29a4>
   139c4:	cmp	r4, #0
   139c8:	beq	13a34 <__assert_fail@plt+0x29f8>
   139cc:	cmn	r5, #1
   139d0:	ble	13a08 <__assert_fail@plt+0x29cc>
   139d4:	mvn	r7, #-2147483648	; 0x80000000
   139d8:	udiv	r1, r7, r4
   139dc:	b	139fc <__assert_fail@plt+0x29c0>
   139e0:	cmn	r5, #1
   139e4:	ble	13a24 <__assert_fail@plt+0x29e8>
   139e8:	cmn	r4, #1
   139ec:	beq	13a34 <__assert_fail@plt+0x29f8>
   139f0:	mov	r1, #-2147483648	; 0x80000000
   139f4:	mvn	r7, #-2147483648	; 0x80000000
   139f8:	sdiv	r1, r1, r4
   139fc:	cmp	r1, r5
   13a00:	bge	13a34 <__assert_fail@plt+0x29f8>
   13a04:	b	13a44 <__assert_fail@plt+0x2a08>
   13a08:	beq	13a34 <__assert_fail@plt+0x29f8>
   13a0c:	mov	r1, #-2147483648	; 0x80000000
   13a10:	mvn	r7, #-2147483648	; 0x80000000
   13a14:	sdiv	r1, r1, r5
   13a18:	cmp	r1, r4
   13a1c:	bge	13a34 <__assert_fail@plt+0x29f8>
   13a20:	b	13a44 <__assert_fail@plt+0x2a08>
   13a24:	mvn	r7, #-2147483648	; 0x80000000
   13a28:	sdiv	r1, r7, r4
   13a2c:	cmp	r5, r1
   13a30:	blt	13a44 <__assert_fail@plt+0x2a08>
   13a34:	mul	r1, r5, r4
   13a38:	mov	r7, #64	; 0x40
   13a3c:	cmp	r1, #63	; 0x3f
   13a40:	bgt	13a4c <__assert_fail@plt+0x2a10>
   13a44:	sdiv	r5, r7, r4
   13a48:	mul	r1, r5, r4
   13a4c:	cmp	r0, #0
   13a50:	moveq	r7, #0
   13a54:	streq	r7, [r8]
   13a58:	sub	r7, r5, r6
   13a5c:	cmp	r7, r2
   13a60:	bge	13b04 <__assert_fail@plt+0x2ac8>
   13a64:	add	r5, r6, r2
   13a68:	mov	r2, #0
   13a6c:	mov	r1, #0
   13a70:	cmp	r5, r3
   13a74:	movwgt	r2, #1
   13a78:	cmn	r3, #1
   13a7c:	movwgt	r1, #1
   13a80:	cmp	r5, r6
   13a84:	bvs	13aec <__assert_fail@plt+0x2ab0>
   13a88:	ands	r1, r1, r2
   13a8c:	bne	13aec <__assert_fail@plt+0x2ab0>
   13a90:	cmn	r4, #1
   13a94:	ble	13ab4 <__assert_fail@plt+0x2a78>
   13a98:	cmp	r4, #0
   13a9c:	beq	13b00 <__assert_fail@plt+0x2ac4>
   13aa0:	cmn	r5, #1
   13aa4:	ble	13ad8 <__assert_fail@plt+0x2a9c>
   13aa8:	mvn	r1, #-2147483648	; 0x80000000
   13aac:	udiv	r1, r1, r4
   13ab0:	b	13acc <__assert_fail@plt+0x2a90>
   13ab4:	cmn	r5, #1
   13ab8:	ble	13af0 <__assert_fail@plt+0x2ab4>
   13abc:	cmn	r4, #1
   13ac0:	beq	13b00 <__assert_fail@plt+0x2ac4>
   13ac4:	mov	r1, #-2147483648	; 0x80000000
   13ac8:	sdiv	r1, r1, r4
   13acc:	cmp	r1, r5
   13ad0:	bge	13b00 <__assert_fail@plt+0x2ac4>
   13ad4:	b	13aec <__assert_fail@plt+0x2ab0>
   13ad8:	beq	13b00 <__assert_fail@plt+0x2ac4>
   13adc:	mov	r1, #-2147483648	; 0x80000000
   13ae0:	sdiv	r1, r1, r5
   13ae4:	cmp	r1, r4
   13ae8:	bge	13b00 <__assert_fail@plt+0x2ac4>
   13aec:	bl	13c54 <__assert_fail@plt+0x2c18>
   13af0:	mvn	r1, #-2147483648	; 0x80000000
   13af4:	sdiv	r1, r1, r4
   13af8:	cmp	r5, r1
   13afc:	blt	13aec <__assert_fail@plt+0x2ab0>
   13b00:	mul	r1, r5, r4
   13b04:	bl	13870 <__assert_fail@plt+0x2834>
   13b08:	str	r5, [r8]
   13b0c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   13b10:	push	{fp, lr}
   13b14:	mov	fp, sp
   13b18:	mov	r1, #1
   13b1c:	bl	14454 <__assert_fail@plt+0x3418>
   13b20:	cmp	r0, #0
   13b24:	popne	{fp, pc}
   13b28:	bl	13c54 <__assert_fail@plt+0x2c18>
   13b2c:	push	{fp, lr}
   13b30:	mov	fp, sp
   13b34:	bl	14454 <__assert_fail@plt+0x3418>
   13b38:	cmp	r0, #0
   13b3c:	popne	{fp, pc}
   13b40:	bl	13c54 <__assert_fail@plt+0x2c18>
   13b44:	push	{fp, lr}
   13b48:	mov	fp, sp
   13b4c:	mov	r1, #1
   13b50:	bl	14454 <__assert_fail@plt+0x3418>
   13b54:	cmp	r0, #0
   13b58:	popne	{fp, pc}
   13b5c:	bl	13c54 <__assert_fail@plt+0x2c18>
   13b60:	push	{fp, lr}
   13b64:	mov	fp, sp
   13b68:	bl	14454 <__assert_fail@plt+0x3418>
   13b6c:	cmp	r0, #0
   13b70:	popne	{fp, pc}
   13b74:	bl	13c54 <__assert_fail@plt+0x2c18>
   13b78:	push	{r4, r5, fp, lr}
   13b7c:	add	fp, sp, #8
   13b80:	mov	r5, r0
   13b84:	mov	r0, r1
   13b88:	mov	r4, r1
   13b8c:	bl	144a8 <__assert_fail@plt+0x346c>
   13b90:	cmp	r0, #0
   13b94:	beq	13ba8 <__assert_fail@plt+0x2b6c>
   13b98:	mov	r1, r5
   13b9c:	mov	r2, r4
   13ba0:	pop	{r4, r5, fp, lr}
   13ba4:	b	10e38 <memcpy@plt>
   13ba8:	bl	13c54 <__assert_fail@plt+0x2c18>
   13bac:	push	{r4, r5, fp, lr}
   13bb0:	add	fp, sp, #8
   13bb4:	mov	r5, r0
   13bb8:	mov	r0, r1
   13bbc:	mov	r4, r1
   13bc0:	bl	144a8 <__assert_fail@plt+0x346c>
   13bc4:	cmp	r0, #0
   13bc8:	beq	13bdc <__assert_fail@plt+0x2ba0>
   13bcc:	mov	r1, r5
   13bd0:	mov	r2, r4
   13bd4:	pop	{r4, r5, fp, lr}
   13bd8:	b	10e38 <memcpy@plt>
   13bdc:	bl	13c54 <__assert_fail@plt+0x2c18>
   13be0:	push	{r4, r5, fp, lr}
   13be4:	add	fp, sp, #8
   13be8:	mov	r5, r0
   13bec:	add	r0, r1, #1
   13bf0:	mov	r4, r1
   13bf4:	bl	144a8 <__assert_fail@plt+0x346c>
   13bf8:	cmp	r0, #0
   13bfc:	beq	13c18 <__assert_fail@plt+0x2bdc>
   13c00:	mov	r1, #0
   13c04:	mov	r2, r4
   13c08:	strb	r1, [r0, r4]
   13c0c:	mov	r1, r5
   13c10:	pop	{r4, r5, fp, lr}
   13c14:	b	10e38 <memcpy@plt>
   13c18:	bl	13c54 <__assert_fail@plt+0x2c18>
   13c1c:	push	{r4, r5, fp, lr}
   13c20:	add	fp, sp, #8
   13c24:	mov	r4, r0
   13c28:	bl	10f58 <strlen@plt>
   13c2c:	add	r5, r0, #1
   13c30:	mov	r0, r5
   13c34:	bl	144a8 <__assert_fail@plt+0x346c>
   13c38:	cmp	r0, #0
   13c3c:	beq	13c50 <__assert_fail@plt+0x2c14>
   13c40:	mov	r1, r4
   13c44:	mov	r2, r5
   13c48:	pop	{r4, r5, fp, lr}
   13c4c:	b	10e38 <memcpy@plt>
   13c50:	bl	13c54 <__assert_fail@plt+0x2c18>
   13c54:	push	{fp, lr}
   13c58:	mov	fp, sp
   13c5c:	movw	r0, #24812	; 0x60ec
   13c60:	movw	r1, #21348	; 0x5364
   13c64:	mov	r2, #5
   13c68:	movt	r0, #2
   13c6c:	movt	r1, #1
   13c70:	ldr	r4, [r0]
   13c74:	mov	r0, #0
   13c78:	bl	10e5c <dcgettext@plt>
   13c7c:	movw	r2, #20279	; 0x4f37
   13c80:	mov	r3, r0
   13c84:	mov	r0, r4
   13c88:	mov	r1, #0
   13c8c:	movt	r2, #1
   13c90:	bl	10ed4 <error@plt>
   13c94:	bl	11030 <abort@plt>
   13c98:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   13c9c:	add	fp, sp, #24
   13ca0:	sub	sp, sp, #16
   13ca4:	mov	r8, r0
   13ca8:	ldr	r0, [fp, #16]
   13cac:	mov	r5, r3
   13cb0:	mov	r6, r2
   13cb4:	mov	r2, r1
   13cb8:	add	r3, sp, #8
   13cbc:	mov	r1, #0
   13cc0:	str	r0, [sp]
   13cc4:	mov	r0, r8
   13cc8:	bl	13d98 <__assert_fail@plt+0x2d5c>
   13ccc:	cmp	r0, #0
   13cd0:	bne	13d64 <__assert_fail@plt+0x2d28>
   13cd4:	ldr	r4, [sp, #8]
   13cd8:	ldr	r7, [sp, #12]
   13cdc:	subs	r0, r4, r6
   13ce0:	sbcs	r0, r7, r5
   13ce4:	bcc	13d08 <__assert_fail@plt+0x2ccc>
   13ce8:	ldr	r1, [fp, #8]
   13cec:	ldr	r0, [fp, #12]
   13cf0:	subs	r1, r1, r4
   13cf4:	sbcs	r0, r0, r7
   13cf8:	movcs	r0, r4
   13cfc:	movcs	r1, r7
   13d00:	subcs	sp, fp, #24
   13d04:	popcs	{r4, r5, r6, r7, r8, sl, fp, pc}
   13d08:	bl	10f70 <__errno_location@plt>
   13d0c:	subs	r1, r4, #1073741824	; 0x40000000
   13d10:	sbcs	r1, r7, #0
   13d14:	bcc	13d20 <__assert_fail@plt+0x2ce4>
   13d18:	mov	r1, #75	; 0x4b
   13d1c:	b	13d24 <__assert_fail@plt+0x2ce8>
   13d20:	mov	r1, #34	; 0x22
   13d24:	str	r1, [r0]
   13d28:	ldr	r6, [r0]
   13d2c:	ldr	r4, [fp, #24]
   13d30:	ldr	r5, [fp, #20]
   13d34:	mov	r0, r8
   13d38:	bl	1321c <__assert_fail@plt+0x21e0>
   13d3c:	subs	r1, r6, #22
   13d40:	movw	r2, #20275	; 0x4f33
   13d44:	str	r0, [sp]
   13d48:	mov	r3, r5
   13d4c:	movne	r1, r6
   13d50:	cmp	r4, #0
   13d54:	movt	r2, #1
   13d58:	movweq	r4, #1
   13d5c:	mov	r0, r4
   13d60:	bl	10ed4 <error@plt>
   13d64:	cmp	r0, #1
   13d68:	beq	13d80 <__assert_fail@plt+0x2d44>
   13d6c:	cmp	r0, #3
   13d70:	bne	13d88 <__assert_fail@plt+0x2d4c>
   13d74:	bl	10f70 <__errno_location@plt>
   13d78:	mov	r1, #0
   13d7c:	b	13d24 <__assert_fail@plt+0x2ce8>
   13d80:	bl	10f70 <__errno_location@plt>
   13d84:	b	13d18 <__assert_fail@plt+0x2cdc>
   13d88:	bl	10f70 <__errno_location@plt>
   13d8c:	b	13d28 <__assert_fail@plt+0x2cec>
   13d90:	mov	r1, #10
   13d94:	b	13c98 <__assert_fail@plt+0x2c5c>
   13d98:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13d9c:	add	fp, sp, #28
   13da0:	sub	sp, sp, #20
   13da4:	cmp	r2, #37	; 0x25
   13da8:	bcs	14434 <__assert_fail@plt+0x33f8>
   13dac:	mov	r8, r3
   13db0:	mov	r5, r2
   13db4:	mov	r6, r1
   13db8:	mov	r4, r0
   13dbc:	bl	10f70 <__errno_location@plt>
   13dc0:	mov	r7, r0
   13dc4:	mov	r0, #0
   13dc8:	str	r0, [r7]
   13dcc:	bl	10f28 <__ctype_b_loc@plt>
   13dd0:	ldr	r1, [r0]
   13dd4:	mov	r2, r4
   13dd8:	ldrb	r0, [r2], #1
   13ddc:	add	r3, r1, r0, lsl #1
   13de0:	ldrb	r3, [r3, #1]
   13de4:	tst	r3, #32
   13de8:	bne	13dd8 <__assert_fail@plt+0x2d9c>
   13dec:	cmp	r6, #0
   13df0:	add	sl, sp, #16
   13df4:	movne	sl, r6
   13df8:	mov	r6, #4
   13dfc:	cmp	r0, #45	; 0x2d
   13e00:	beq	14428 <__assert_fail@plt+0x33ec>
   13e04:	mov	r0, r4
   13e08:	mov	r1, sl
   13e0c:	mov	r2, r5
   13e10:	str	r8, [sp, #12]
   13e14:	bl	10fac <strtoumax@plt>
   13e18:	ldr	r5, [sl]
   13e1c:	cmp	r5, r4
   13e20:	beq	13e48 <__assert_fail@plt+0x2e0c>
   13e24:	mov	r8, r0
   13e28:	ldr	r0, [r7]
   13e2c:	mov	r9, r1
   13e30:	cmp	r0, #0
   13e34:	beq	13e7c <__assert_fail@plt+0x2e40>
   13e38:	cmp	r0, #34	; 0x22
   13e3c:	bne	14428 <__assert_fail@plt+0x33ec>
   13e40:	mov	r6, #1
   13e44:	b	13e80 <__assert_fail@plt+0x2e44>
   13e48:	ldr	r0, [fp, #8]
   13e4c:	cmp	r0, #0
   13e50:	beq	14428 <__assert_fail@plt+0x33ec>
   13e54:	ldrb	r1, [r4]
   13e58:	cmp	r1, #0
   13e5c:	beq	14428 <__assert_fail@plt+0x33ec>
   13e60:	bl	10f64 <strchr@plt>
   13e64:	cmp	r0, #0
   13e68:	beq	14428 <__assert_fail@plt+0x33ec>
   13e6c:	mov	r6, #0
   13e70:	mov	r8, #1
   13e74:	mov	r9, #0
   13e78:	b	13e8c <__assert_fail@plt+0x2e50>
   13e7c:	mov	r6, r0
   13e80:	ldr	r0, [fp, #8]
   13e84:	cmp	r0, #0
   13e88:	beq	14420 <__assert_fail@plt+0x33e4>
   13e8c:	ldrb	r7, [r5]
   13e90:	cmp	r7, #0
   13e94:	beq	14420 <__assert_fail@plt+0x33e4>
   13e98:	ldr	r0, [fp, #8]
   13e9c:	mov	r1, r7
   13ea0:	bl	10f64 <strchr@plt>
   13ea4:	cmp	r0, #0
   13ea8:	beq	13fb0 <__assert_fail@plt+0x2f74>
   13eac:	sub	r0, r7, #69	; 0x45
   13eb0:	mov	r1, #1
   13eb4:	mov	r3, #0
   13eb8:	mov	r4, #1024	; 0x400
   13ebc:	cmp	r0, #21
   13ec0:	str	r1, [sp, #8]
   13ec4:	bhi	13edc <__assert_fail@plt+0x2ea0>
   13ec8:	movw	r2, #35141	; 0x8945
   13ecc:	mov	r1, #1
   13ed0:	movt	r2, #48	; 0x30
   13ed4:	tst	r2, r1, lsl r0
   13ed8:	bne	13ef8 <__assert_fail@plt+0x2ebc>
   13edc:	sub	r0, r7, #103	; 0x67
   13ee0:	cmp	r0, #13
   13ee4:	bhi	13f2c <__assert_fail@plt+0x2ef0>
   13ee8:	mov	r1, #1
   13eec:	movw	r2, #8273	; 0x2051
   13ef0:	tst	r2, r1, lsl r0
   13ef4:	beq	13f2c <__assert_fail@plt+0x2ef0>
   13ef8:	ldr	r0, [fp, #8]
   13efc:	mov	r1, #48	; 0x30
   13f00:	bl	10f64 <strchr@plt>
   13f04:	cmp	r0, #0
   13f08:	beq	13f28 <__assert_fail@plt+0x2eec>
   13f0c:	ldrb	r0, [r5, #1]
   13f10:	cmp	r0, #66	; 0x42
   13f14:	cmpne	r0, #68	; 0x44
   13f18:	bne	14040 <__assert_fail@plt+0x3004>
   13f1c:	mov	r4, #1000	; 0x3e8
   13f20:	mov	r0, #2
   13f24:	str	r0, [sp, #8]
   13f28:	mov	r3, #0
   13f2c:	cmp	r7, #89	; 0x59
   13f30:	stm	sp, {r5, r6}
   13f34:	bgt	13fbc <__assert_fail@plt+0x2f80>
   13f38:	sub	r0, r7, #66	; 0x42
   13f3c:	cmp	r0, #14
   13f40:	bhi	14064 <__assert_fail@plt+0x3028>
   13f44:	add	r1, pc, #0
   13f48:	ldr	pc, [r1, r0, lsl #2]
   13f4c:	andeq	r3, r1, r8, lsl #31
   13f50:	andeq	r4, r1, r4, lsl r3
   13f54:	andeq	r4, r1, r4, lsl r3
   13f58:	andeq	r4, r1, r8, lsr #6
   13f5c:	andeq	r4, r1, r4, lsl r3
   13f60:	andeq	r4, r1, r8, lsl r1
   13f64:	andeq	r4, r1, r4, lsl r3
   13f68:	andeq	r4, r1, r4, lsl r3
   13f6c:	andeq	r4, r1, r4, lsl r3
   13f70:	andeq	r4, r1, r4, lsl #3
   13f74:	andeq	r4, r1, r4, lsl r3
   13f78:	andeq	r4, r1, r8, asr #3
   13f7c:	andeq	r4, r1, r4, lsl r3
   13f80:	andeq	r4, r1, r4, lsl r3
   13f84:	muleq	r1, r4, r3
   13f88:	mov	r1, #0
   13f8c:	lsl	r3, r9, #10
   13f90:	lsl	r0, r8, #10
   13f94:	lsr	r2, r9, #22
   13f98:	cmp	r1, r9, lsr #22
   13f9c:	orr	r3, r3, r8, lsr #22
   13fa0:	mvnne	r0, #0
   13fa4:	movwne	r2, #1
   13fa8:	cmp	r1, r9, lsr #22
   13fac:	b	14030 <__assert_fail@plt+0x2ff4>
   13fb0:	ldr	r0, [sp, #12]
   13fb4:	orr	r6, r6, #2
   13fb8:	b	14424 <__assert_fail@plt+0x33e8>
   13fbc:	cmp	r7, #115	; 0x73
   13fc0:	bgt	140e0 <__assert_fail@plt+0x30a4>
   13fc4:	sub	r0, r7, #98	; 0x62
   13fc8:	cmp	r0, #11
   13fcc:	bhi	142a0 <__assert_fail@plt+0x3264>
   13fd0:	add	r1, pc, #4
   13fd4:	mov	r2, #0
   13fd8:	ldr	pc, [r1, r0, lsl #2]
   13fdc:	andeq	r4, r1, ip
   13fe0:	strdeq	r4, [r1], -ip
   13fe4:	andeq	r4, r1, r4, lsl r3
   13fe8:	andeq	r4, r1, r4, lsl r3
   13fec:	andeq	r4, r1, r4, lsl r3
   13ff0:	andeq	r4, r1, r8, lsl r1
   13ff4:	andeq	r4, r1, r4, lsl r3
   13ff8:	andeq	r4, r1, r4, lsl r3
   13ffc:	andeq	r4, r1, r4, lsl r3
   14000:	andeq	r4, r1, r4, lsl #3
   14004:	andeq	r4, r1, r4, lsl r3
   14008:	andeq	r4, r1, r8, asr #3
   1400c:	mov	r1, #0
   14010:	lsl	r3, r9, #9
   14014:	lsl	r0, r8, #9
   14018:	lsr	r2, r9, #23
   1401c:	cmp	r1, r9, lsr #23
   14020:	orr	r3, r3, r8, lsr #23
   14024:	mvnne	r0, #0
   14028:	movwne	r2, #1
   1402c:	cmp	r1, r9, lsr #23
   14030:	mvnne	r3, #0
   14034:	mov	r8, r0
   14038:	mov	r9, r3
   1403c:	b	143fc <__assert_fail@plt+0x33c0>
   14040:	cmp	r0, #105	; 0x69
   14044:	mov	r3, #0
   14048:	bne	13f2c <__assert_fail@plt+0x2ef0>
   1404c:	ldrb	r0, [r5, #2]
   14050:	mov	r1, #1
   14054:	cmp	r0, #66	; 0x42
   14058:	movweq	r1, #3
   1405c:	str	r1, [sp, #8]
   14060:	b	13f2c <__assert_fail@plt+0x2ef0>
   14064:	cmp	r7, #84	; 0x54
   14068:	beq	14234 <__assert_fail@plt+0x31f8>
   1406c:	cmp	r7, #89	; 0x59
   14070:	bne	14314 <__assert_fail@plt+0x32d8>
   14074:	mvn	r0, #0
   14078:	mvn	r1, #0
   1407c:	mov	r2, r4
   14080:	mov	r5, r3
   14084:	bl	14944 <__assert_fail@plt+0x3908>
   14088:	mov	ip, r5
   1408c:	mvn	lr, #0
   14090:	mov	r2, #0
   14094:	mvn	r3, #7
   14098:	mov	r5, r8
   1409c:	mov	r7, r9
   140a0:	umull	r8, r6, r5, r4
   140a4:	mvn	r9, #0
   140a8:	mla	r6, r5, ip, r6
   140ac:	subs	r5, r0, r5
   140b0:	sbcs	r5, r1, r7
   140b4:	mov	r5, #0
   140b8:	movwcc	r5, #1
   140bc:	cmp	r5, #0
   140c0:	mlaeq	r9, r7, r4, r6
   140c4:	movne	r8, lr
   140c8:	orrne	r2, r2, #1
   140cc:	adds	r3, r3, #1
   140d0:	mov	r5, r8
   140d4:	mov	r7, r9
   140d8:	bcc	140a0 <__assert_fail@plt+0x3064>
   140dc:	b	143fc <__assert_fail@plt+0x33c0>
   140e0:	cmp	r7, #116	; 0x74
   140e4:	beq	14234 <__assert_fail@plt+0x31f8>
   140e8:	cmp	r7, #119	; 0x77
   140ec:	bne	14314 <__assert_fail@plt+0x32d8>
   140f0:	lsl	r1, r9, #1
   140f4:	cmp	r9, #0
   140f8:	lsl	r0, r8, #1
   140fc:	lsr	r2, r9, #31
   14100:	orr	r1, r1, r8, lsr #31
   14104:	mvnmi	r0, #0
   14108:	mvnmi	r1, #0
   1410c:	mov	r8, r0
   14110:	mov	r9, r1
   14114:	b	143fc <__assert_fail@plt+0x33c0>
   14118:	mvn	r0, #0
   1411c:	mvn	r1, #0
   14120:	mov	r2, r4
   14124:	mov	r5, r3
   14128:	bl	14944 <__assert_fail@plt+0x3908>
   1412c:	mov	ip, r5
   14130:	mvn	lr, #0
   14134:	mov	r2, #0
   14138:	mvn	r3, #2
   1413c:	mov	r6, r8
   14140:	mov	r5, r9
   14144:	umull	r8, r7, r6, r4
   14148:	mvn	r9, #0
   1414c:	mla	r7, r6, ip, r7
   14150:	subs	r6, r0, r6
   14154:	sbcs	r6, r1, r5
   14158:	mov	r6, #0
   1415c:	movwcc	r6, #1
   14160:	cmp	r6, #0
   14164:	mlaeq	r9, r5, r4, r7
   14168:	movne	r8, lr
   1416c:	orrne	r2, r2, #1
   14170:	adds	r3, r3, #1
   14174:	mov	r6, r8
   14178:	mov	r5, r9
   1417c:	bcc	14144 <__assert_fail@plt+0x3108>
   14180:	b	143fc <__assert_fail@plt+0x33c0>
   14184:	mvn	r0, #0
   14188:	mvn	r1, #0
   1418c:	mov	r2, r4
   14190:	mov	r5, r3
   14194:	bl	14944 <__assert_fail@plt+0x3908>
   14198:	subs	r0, r0, r8
   1419c:	mov	r2, #0
   141a0:	sbcs	r0, r1, r9
   141a4:	umull	r0, r1, r8, r4
   141a8:	movwcc	r2, #1
   141ac:	cmp	r2, #0
   141b0:	mla	r1, r8, r5, r1
   141b4:	mvnne	r0, #0
   141b8:	mla	r9, r9, r4, r1
   141bc:	mvnne	r9, #0
   141c0:	mov	r8, r0
   141c4:	b	143fc <__assert_fail@plt+0x33c0>
   141c8:	mvn	r0, #0
   141cc:	mvn	r1, #0
   141d0:	mov	r2, r4
   141d4:	mov	r5, r3
   141d8:	bl	14944 <__assert_fail@plt+0x3908>
   141dc:	mov	ip, r5
   141e0:	mvn	lr, #0
   141e4:	mov	r2, #0
   141e8:	mvn	r3, #1
   141ec:	mov	r6, r8
   141f0:	mov	r5, r9
   141f4:	umull	r8, r7, r6, r4
   141f8:	mvn	r9, #0
   141fc:	mla	r7, r6, ip, r7
   14200:	subs	r6, r0, r6
   14204:	sbcs	r6, r1, r5
   14208:	mov	r6, #0
   1420c:	movwcc	r6, #1
   14210:	cmp	r6, #0
   14214:	mlaeq	r9, r5, r4, r7
   14218:	movne	r8, lr
   1421c:	orrne	r2, r2, #1
   14220:	adds	r3, r3, #1
   14224:	mov	r6, r8
   14228:	mov	r5, r9
   1422c:	bcc	141f4 <__assert_fail@plt+0x31b8>
   14230:	b	143fc <__assert_fail@plt+0x33c0>
   14234:	mvn	r0, #0
   14238:	mvn	r1, #0
   1423c:	mov	r2, r4
   14240:	mov	r5, r3
   14244:	bl	14944 <__assert_fail@plt+0x3908>
   14248:	mov	ip, r5
   1424c:	mvn	lr, #0
   14250:	mov	r2, #0
   14254:	mvn	r3, #3
   14258:	mov	r6, r8
   1425c:	mov	r5, r9
   14260:	umull	r8, r7, r6, r4
   14264:	mvn	r9, #0
   14268:	mla	r7, r6, ip, r7
   1426c:	subs	r6, r0, r6
   14270:	sbcs	r6, r1, r5
   14274:	mov	r6, #0
   14278:	movwcc	r6, #1
   1427c:	cmp	r6, #0
   14280:	mlaeq	r9, r5, r4, r7
   14284:	movne	r8, lr
   14288:	orrne	r2, r2, #1
   1428c:	adds	r3, r3, #1
   14290:	mov	r6, r8
   14294:	mov	r5, r9
   14298:	bcc	14260 <__assert_fail@plt+0x3224>
   1429c:	b	143fc <__assert_fail@plt+0x33c0>
   142a0:	cmp	r7, #90	; 0x5a
   142a4:	bne	14314 <__assert_fail@plt+0x32d8>
   142a8:	mvn	r0, #0
   142ac:	mvn	r1, #0
   142b0:	mov	r2, r4
   142b4:	mov	r5, r3
   142b8:	bl	14944 <__assert_fail@plt+0x3908>
   142bc:	mov	ip, r5
   142c0:	mvn	lr, #0
   142c4:	mov	r2, #0
   142c8:	mvn	r3, #6
   142cc:	mov	r5, r8
   142d0:	mov	r7, r9
   142d4:	umull	r8, r6, r5, r4
   142d8:	mvn	r9, #0
   142dc:	mla	r6, r5, ip, r6
   142e0:	subs	r5, r0, r5
   142e4:	sbcs	r5, r1, r7
   142e8:	mov	r5, #0
   142ec:	movwcc	r5, #1
   142f0:	cmp	r5, #0
   142f4:	mlaeq	r9, r7, r4, r6
   142f8:	movne	r8, lr
   142fc:	orrne	r2, r2, #1
   14300:	adds	r3, r3, #1
   14304:	mov	r5, r8
   14308:	mov	r7, r9
   1430c:	bcc	142d4 <__assert_fail@plt+0x3298>
   14310:	b	143fc <__assert_fail@plt+0x33c0>
   14314:	ldr	r0, [sp, #12]
   14318:	strd	r8, [r0]
   1431c:	ldr	r6, [sp, #4]
   14320:	orr	r6, r6, #2
   14324:	b	14428 <__assert_fail@plt+0x33ec>
   14328:	mvn	r0, #0
   1432c:	mvn	r1, #0
   14330:	mov	r2, r4
   14334:	mov	r5, r3
   14338:	bl	14944 <__assert_fail@plt+0x3908>
   1433c:	mov	ip, r5
   14340:	mvn	lr, #0
   14344:	mov	r2, #0
   14348:	mvn	r3, #5
   1434c:	mov	r5, r8
   14350:	mov	r7, r9
   14354:	umull	r8, r6, r5, r4
   14358:	mvn	r9, #0
   1435c:	mla	r6, r5, ip, r6
   14360:	subs	r5, r0, r5
   14364:	sbcs	r5, r1, r7
   14368:	mov	r5, #0
   1436c:	movwcc	r5, #1
   14370:	cmp	r5, #0
   14374:	mlaeq	r9, r7, r4, r6
   14378:	movne	r8, lr
   1437c:	orrne	r2, r2, #1
   14380:	adds	r3, r3, #1
   14384:	mov	r5, r8
   14388:	mov	r7, r9
   1438c:	bcc	14354 <__assert_fail@plt+0x3318>
   14390:	b	143fc <__assert_fail@plt+0x33c0>
   14394:	mvn	r0, #0
   14398:	mvn	r1, #0
   1439c:	mov	r2, r4
   143a0:	mov	r5, r3
   143a4:	bl	14944 <__assert_fail@plt+0x3908>
   143a8:	mov	ip, r5
   143ac:	mvn	lr, #0
   143b0:	mov	r2, #0
   143b4:	mvn	r3, #4
   143b8:	mov	r5, r8
   143bc:	mov	r7, r9
   143c0:	umull	r8, r6, r5, r4
   143c4:	mvn	r9, #0
   143c8:	mla	r6, r5, ip, r6
   143cc:	subs	r5, r0, r5
   143d0:	sbcs	r5, r1, r7
   143d4:	mov	r5, #0
   143d8:	movwcc	r5, #1
   143dc:	cmp	r5, #0
   143e0:	mlaeq	r9, r7, r4, r6
   143e4:	movne	r8, lr
   143e8:	orrne	r2, r2, #1
   143ec:	adds	r3, r3, #1
   143f0:	mov	r5, r8
   143f4:	mov	r7, r9
   143f8:	bcc	143c0 <__assert_fail@plt+0x3384>
   143fc:	ldr	r1, [sp]
   14400:	ldr	r3, [sp, #8]
   14404:	ldr	r6, [sp, #4]
   14408:	add	r0, r1, r3
   1440c:	orr	r6, r2, r6
   14410:	str	r0, [sl]
   14414:	ldrb	r0, [r1, r3]
   14418:	cmp	r0, #0
   1441c:	orrne	r6, r6, #2
   14420:	ldr	r0, [sp, #12]
   14424:	strd	r8, [r0]
   14428:	mov	r0, r6
   1442c:	sub	sp, fp, #28
   14430:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14434:	movw	r0, #21365	; 0x5375
   14438:	movw	r1, #21403	; 0x539b
   1443c:	movw	r3, #21419	; 0x53ab
   14440:	mov	r2, #85	; 0x55
   14444:	movt	r0, #1
   14448:	movt	r1, #1
   1444c:	movt	r3, #1
   14450:	bl	1103c <__assert_fail@plt>
   14454:	clz	r2, r1
   14458:	clz	r3, r0
   1445c:	lsr	r2, r2, #5
   14460:	lsr	r3, r3, #5
   14464:	orrs	r2, r3, r2
   14468:	movwne	r1, #1
   1446c:	movwne	r0, #1
   14470:	cmp	r1, #0
   14474:	beq	144a4 <__assert_fail@plt+0x3468>
   14478:	mvn	r2, #-2147483648	; 0x80000000
   1447c:	udiv	r2, r2, r1
   14480:	cmp	r2, r0
   14484:	bcs	144a4 <__assert_fail@plt+0x3468>
   14488:	push	{fp, lr}
   1448c:	mov	fp, sp
   14490:	bl	10f70 <__errno_location@plt>
   14494:	mov	r1, #12
   14498:	str	r1, [r0]
   1449c:	mov	r0, #0
   144a0:	pop	{fp, pc}
   144a4:	b	10de4 <calloc@plt>
   144a8:	cmp	r0, #0
   144ac:	movweq	r0, #1
   144b0:	cmn	r0, #1
   144b4:	ble	144bc <__assert_fail@plt+0x3480>
   144b8:	b	10eec <malloc@plt>
   144bc:	push	{fp, lr}
   144c0:	mov	fp, sp
   144c4:	bl	10f70 <__errno_location@plt>
   144c8:	mov	r1, #12
   144cc:	str	r1, [r0]
   144d0:	mov	r0, #0
   144d4:	pop	{fp, pc}
   144d8:	push	{fp, lr}
   144dc:	mov	fp, sp
   144e0:	cmp	r0, #0
   144e4:	beq	14500 <__assert_fail@plt+0x34c4>
   144e8:	cmp	r1, #0
   144ec:	beq	1450c <__assert_fail@plt+0x34d0>
   144f0:	cmn	r1, #1
   144f4:	ble	14514 <__assert_fail@plt+0x34d8>
   144f8:	pop	{fp, lr}
   144fc:	b	10e74 <realloc@plt>
   14500:	mov	r0, r1
   14504:	pop	{fp, lr}
   14508:	b	144a8 <__assert_fail@plt+0x346c>
   1450c:	bl	146a0 <__assert_fail@plt+0x3664>
   14510:	b	14520 <__assert_fail@plt+0x34e4>
   14514:	bl	10f70 <__errno_location@plt>
   14518:	mov	r1, #12
   1451c:	str	r1, [r0]
   14520:	mov	r0, #0
   14524:	pop	{fp, pc}
   14528:	push	{r4, r5, r6, sl, fp, lr}
   1452c:	add	fp, sp, #16
   14530:	mov	r4, r0
   14534:	bl	10eb0 <__fpending@plt>
   14538:	mov	r5, r0
   1453c:	mov	r0, r4
   14540:	bl	10ebc <ferror_unlocked@plt>
   14544:	mov	r6, r0
   14548:	mov	r0, r4
   1454c:	bl	145a8 <__assert_fail@plt+0x356c>
   14550:	cmp	r6, #0
   14554:	beq	14574 <__assert_fail@plt+0x3538>
   14558:	mvn	r4, #0
   1455c:	cmp	r0, #0
   14560:	bne	145a0 <__assert_fail@plt+0x3564>
   14564:	bl	10f70 <__errno_location@plt>
   14568:	mov	r1, #0
   1456c:	str	r1, [r0]
   14570:	b	145a0 <__assert_fail@plt+0x3564>
   14574:	cmp	r0, #0
   14578:	mov	r4, r0
   1457c:	mvnne	r4, #0
   14580:	cmp	r5, #0
   14584:	bne	145a0 <__assert_fail@plt+0x3564>
   14588:	cmp	r0, #0
   1458c:	beq	145a0 <__assert_fail@plt+0x3564>
   14590:	bl	10f70 <__errno_location@plt>
   14594:	ldr	r0, [r0]
   14598:	subs	r4, r0, #9
   1459c:	mvnne	r4, #0
   145a0:	mov	r0, r4
   145a4:	pop	{r4, r5, r6, sl, fp, pc}
   145a8:	push	{r4, r5, r6, sl, fp, lr}
   145ac:	add	fp, sp, #16
   145b0:	sub	sp, sp, #8
   145b4:	mov	r4, r0
   145b8:	bl	10fa0 <fileno@plt>
   145bc:	cmn	r0, #1
   145c0:	ble	14634 <__assert_fail@plt+0x35f8>
   145c4:	mov	r0, r4
   145c8:	bl	10f04 <__freading@plt>
   145cc:	cmp	r0, #0
   145d0:	beq	145fc <__assert_fail@plt+0x35c0>
   145d4:	mov	r0, r4
   145d8:	bl	10fa0 <fileno@plt>
   145dc:	mov	r1, #1
   145e0:	mov	r2, #0
   145e4:	mov	r3, #0
   145e8:	str	r1, [sp]
   145ec:	bl	10e98 <lseek64@plt>
   145f0:	and	r0, r0, r1
   145f4:	cmn	r0, #1
   145f8:	beq	14634 <__assert_fail@plt+0x35f8>
   145fc:	mov	r0, r4
   14600:	bl	14644 <__assert_fail@plt+0x3608>
   14604:	cmp	r0, #0
   14608:	beq	14634 <__assert_fail@plt+0x35f8>
   1460c:	bl	10f70 <__errno_location@plt>
   14610:	ldr	r6, [r0]
   14614:	mov	r5, r0
   14618:	mov	r0, r4
   1461c:	bl	10fc4 <fclose@plt>
   14620:	cmp	r6, #0
   14624:	strne	r6, [r5]
   14628:	mvnne	r0, #0
   1462c:	sub	sp, fp, #16
   14630:	pop	{r4, r5, r6, sl, fp, pc}
   14634:	mov	r0, r4
   14638:	sub	sp, fp, #16
   1463c:	pop	{r4, r5, r6, sl, fp, lr}
   14640:	b	10fc4 <fclose@plt>
   14644:	push	{r4, sl, fp, lr}
   14648:	add	fp, sp, #8
   1464c:	sub	sp, sp, #8
   14650:	mov	r4, r0
   14654:	cmp	r0, #0
   14658:	beq	14690 <__assert_fail@plt+0x3654>
   1465c:	mov	r0, r4
   14660:	bl	10f04 <__freading@plt>
   14664:	cmp	r0, #0
   14668:	beq	14690 <__assert_fail@plt+0x3654>
   1466c:	ldrb	r0, [r4, #1]
   14670:	tst	r0, #1
   14674:	beq	14690 <__assert_fail@plt+0x3654>
   14678:	mov	r0, #1
   1467c:	mov	r2, #0
   14680:	mov	r3, #0
   14684:	str	r0, [sp]
   14688:	mov	r0, r4
   1468c:	bl	146c8 <__assert_fail@plt+0x368c>
   14690:	mov	r0, r4
   14694:	sub	sp, fp, #8
   14698:	pop	{r4, sl, fp, lr}
   1469c:	b	10e14 <fflush@plt>
   146a0:	push	{r4, r5, r6, sl, fp, lr}
   146a4:	add	fp, sp, #16
   146a8:	mov	r4, r0
   146ac:	bl	10f70 <__errno_location@plt>
   146b0:	ldr	r6, [r0]
   146b4:	mov	r5, r0
   146b8:	mov	r0, r4
   146bc:	bl	10e20 <free@plt>
   146c0:	str	r6, [r5]
   146c4:	pop	{r4, r5, r6, sl, fp, pc}
   146c8:	push	{r4, r5, r6, r7, fp, lr}
   146cc:	add	fp, sp, #16
   146d0:	sub	sp, sp, #8
   146d4:	mov	r4, r0
   146d8:	ldr	r0, [r0, #4]
   146dc:	mov	r5, r3
   146e0:	mov	r6, r2
   146e4:	ldr	r1, [r4, #8]
   146e8:	cmp	r1, r0
   146ec:	bne	14708 <__assert_fail@plt+0x36cc>
   146f0:	ldrd	r0, [r4, #16]
   146f4:	cmp	r1, r0
   146f8:	bne	14708 <__assert_fail@plt+0x36cc>
   146fc:	ldr	r0, [r4, #36]	; 0x24
   14700:	cmp	r0, #0
   14704:	beq	14720 <__assert_fail@plt+0x36e4>
   14708:	mov	r0, r4
   1470c:	mov	r2, r6
   14710:	mov	r3, r5
   14714:	sub	sp, fp, #16
   14718:	pop	{r4, r5, r6, r7, fp, lr}
   1471c:	b	10fd0 <fseeko64@plt>
   14720:	ldr	r7, [fp, #8]
   14724:	mov	r0, r4
   14728:	bl	10fa0 <fileno@plt>
   1472c:	mov	r2, r6
   14730:	mov	r3, r5
   14734:	str	r7, [sp]
   14738:	bl	10e98 <lseek64@plt>
   1473c:	and	r2, r0, r1
   14740:	cmn	r2, #1
   14744:	beq	14760 <__assert_fail@plt+0x3724>
   14748:	strd	r0, [r4, #80]	; 0x50
   1474c:	ldr	r0, [r4]
   14750:	bic	r0, r0, #16
   14754:	str	r0, [r4]
   14758:	mov	r0, #0
   1475c:	b	14764 <__assert_fail@plt+0x3728>
   14760:	mvn	r0, #0
   14764:	sub	sp, fp, #16
   14768:	pop	{r4, r5, r6, r7, fp, pc}
   1476c:	push	{fp, lr}
   14770:	mov	fp, sp
   14774:	mov	r0, #14
   14778:	bl	10ff4 <nl_langinfo@plt>
   1477c:	movw	r1, #19457	; 0x4c01
   14780:	cmp	r0, #0
   14784:	movt	r1, #1
   14788:	movne	r1, r0
   1478c:	movw	r0, #21498	; 0x53fa
   14790:	ldrb	r2, [r1]
   14794:	movt	r0, #1
   14798:	cmp	r2, #0
   1479c:	movne	r0, r1
   147a0:	pop	{fp, pc}
   147a4:	push	{r4, r5, r6, r7, fp, lr}
   147a8:	add	fp, sp, #16
   147ac:	sub	sp, sp, #8
   147b0:	cmp	r0, #0
   147b4:	add	r5, sp, #4
   147b8:	mov	r7, r2
   147bc:	mov	r4, r1
   147c0:	movne	r5, r0
   147c4:	mov	r0, r5
   147c8:	bl	10ec8 <mbrtowc@plt>
   147cc:	mov	r6, r0
   147d0:	cmp	r7, #0
   147d4:	beq	147fc <__assert_fail@plt+0x37c0>
   147d8:	cmn	r6, #2
   147dc:	bcc	147fc <__assert_fail@plt+0x37c0>
   147e0:	mov	r0, #0
   147e4:	bl	14844 <__assert_fail@plt+0x3808>
   147e8:	cmp	r0, #0
   147ec:	bne	147fc <__assert_fail@plt+0x37c0>
   147f0:	ldrb	r0, [r4]
   147f4:	mov	r6, #1
   147f8:	str	r0, [r5]
   147fc:	mov	r0, r6
   14800:	sub	sp, fp, #16
   14804:	pop	{r4, r5, r6, r7, fp, pc}
   14808:	cmp	r2, #0
   1480c:	beq	1483c <__assert_fail@plt+0x3800>
   14810:	mvn	r3, #0
   14814:	udiv	r3, r3, r2
   14818:	cmp	r3, r1
   1481c:	bcs	1483c <__assert_fail@plt+0x3800>
   14820:	push	{fp, lr}
   14824:	mov	fp, sp
   14828:	bl	10f70 <__errno_location@plt>
   1482c:	mov	r1, #12
   14830:	str	r1, [r0]
   14834:	mov	r0, #0
   14838:	pop	{fp, pc}
   1483c:	mul	r1, r2, r1
   14840:	b	144d8 <__assert_fail@plt+0x349c>
   14844:	push	{r4, sl, fp, lr}
   14848:	add	fp, sp, #8
   1484c:	sub	sp, sp, #264	; 0x108
   14850:	add	r1, sp, #7
   14854:	movw	r2, #257	; 0x101
   14858:	bl	148b0 <__assert_fail@plt+0x3874>
   1485c:	mov	r4, #0
   14860:	cmp	r0, #0
   14864:	bne	148a4 <__assert_fail@plt+0x3868>
   14868:	movw	r1, #21504	; 0x5400
   1486c:	add	r0, sp, #7
   14870:	mov	r2, #2
   14874:	movt	r1, #1
   14878:	bl	10f40 <bcmp@plt>
   1487c:	cmp	r0, #0
   14880:	beq	148a4 <__assert_fail@plt+0x3868>
   14884:	movw	r1, #21506	; 0x5402
   14888:	add	r0, sp, #7
   1488c:	mov	r2, #6
   14890:	movt	r1, #1
   14894:	bl	10f40 <bcmp@plt>
   14898:	cmp	r0, #0
   1489c:	mov	r4, r0
   148a0:	movwne	r4, #1
   148a4:	mov	r0, r4
   148a8:	sub	sp, fp, #8
   148ac:	pop	{r4, sl, fp, pc}
   148b0:	push	{r4, r5, r6, r7, fp, lr}
   148b4:	add	fp, sp, #16
   148b8:	mov	r4, r1
   148bc:	mov	r1, #0
   148c0:	mov	r6, r2
   148c4:	bl	10fdc <setlocale@plt>
   148c8:	cmp	r0, #0
   148cc:	beq	148f8 <__assert_fail@plt+0x38bc>
   148d0:	mov	r7, r0
   148d4:	bl	10f58 <strlen@plt>
   148d8:	cmp	r0, r6
   148dc:	bcs	1490c <__assert_fail@plt+0x38d0>
   148e0:	add	r2, r0, #1
   148e4:	mov	r0, r4
   148e8:	mov	r1, r7
   148ec:	bl	10e38 <memcpy@plt>
   148f0:	mov	r5, #0
   148f4:	b	14934 <__assert_fail@plt+0x38f8>
   148f8:	cmp	r6, #0
   148fc:	mov	r5, #22
   14900:	movne	r0, #0
   14904:	strbne	r0, [r4]
   14908:	b	14934 <__assert_fail@plt+0x38f8>
   1490c:	mov	r5, #34	; 0x22
   14910:	cmp	r6, #0
   14914:	beq	14934 <__assert_fail@plt+0x38f8>
   14918:	sub	r6, r6, #1
   1491c:	mov	r0, r4
   14920:	mov	r1, r7
   14924:	mov	r2, r6
   14928:	bl	10e38 <memcpy@plt>
   1492c:	mov	r0, #0
   14930:	strb	r0, [r4, r6]
   14934:	mov	r0, r5
   14938:	pop	{r4, r5, r6, r7, fp, pc}
   1493c:	mov	r1, #0
   14940:	b	10fdc <setlocale@plt>
   14944:	cmp	r3, #0
   14948:	cmpeq	r2, #0
   1494c:	bne	14964 <__assert_fail@plt+0x3928>
   14950:	cmp	r1, #0
   14954:	cmpeq	r0, #0
   14958:	mvnne	r1, #0
   1495c:	mvnne	r0, #0
   14960:	b	14980 <__assert_fail@plt+0x3944>
   14964:	sub	sp, sp, #8
   14968:	push	{sp, lr}
   1496c:	bl	14990 <__assert_fail@plt+0x3954>
   14970:	ldr	lr, [sp, #4]
   14974:	add	sp, sp, #8
   14978:	pop	{r2, r3}
   1497c:	bx	lr
   14980:	push	{r1, lr}
   14984:	mov	r0, #8
   14988:	bl	10dfc <raise@plt>
   1498c:	pop	{r1, pc}
   14990:	cmp	r1, r3
   14994:	cmpeq	r0, r2
   14998:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1499c:	mov	r4, r0
   149a0:	movcc	r0, #0
   149a4:	mov	r5, r1
   149a8:	ldr	lr, [sp, #36]	; 0x24
   149ac:	movcc	r1, r0
   149b0:	bcc	14aac <__assert_fail@plt+0x3a70>
   149b4:	cmp	r3, #0
   149b8:	clzeq	ip, r2
   149bc:	clzne	ip, r3
   149c0:	addeq	ip, ip, #32
   149c4:	cmp	r5, #0
   149c8:	clzeq	r1, r4
   149cc:	addeq	r1, r1, #32
   149d0:	clzne	r1, r5
   149d4:	sub	ip, ip, r1
   149d8:	sub	sl, ip, #32
   149dc:	lsl	r9, r3, ip
   149e0:	rsb	fp, ip, #32
   149e4:	orr	r9, r9, r2, lsl sl
   149e8:	orr	r9, r9, r2, lsr fp
   149ec:	lsl	r8, r2, ip
   149f0:	cmp	r5, r9
   149f4:	cmpeq	r4, r8
   149f8:	movcc	r0, #0
   149fc:	movcc	r1, r0
   14a00:	bcc	14a1c <__assert_fail@plt+0x39e0>
   14a04:	mov	r0, #1
   14a08:	subs	r4, r4, r8
   14a0c:	lsl	r1, r0, sl
   14a10:	orr	r1, r1, r0, lsr fp
   14a14:	lsl	r0, r0, ip
   14a18:	sbc	r5, r5, r9
   14a1c:	cmp	ip, #0
   14a20:	beq	14aac <__assert_fail@plt+0x3a70>
   14a24:	lsr	r6, r8, #1
   14a28:	orr	r6, r6, r9, lsl #31
   14a2c:	lsr	r7, r9, #1
   14a30:	mov	r2, ip
   14a34:	b	14a58 <__assert_fail@plt+0x3a1c>
   14a38:	subs	r3, r4, r6
   14a3c:	sbc	r8, r5, r7
   14a40:	adds	r3, r3, r3
   14a44:	adc	r8, r8, r8
   14a48:	adds	r4, r3, #1
   14a4c:	adc	r5, r8, #0
   14a50:	subs	r2, r2, #1
   14a54:	beq	14a74 <__assert_fail@plt+0x3a38>
   14a58:	cmp	r5, r7
   14a5c:	cmpeq	r4, r6
   14a60:	bcs	14a38 <__assert_fail@plt+0x39fc>
   14a64:	adds	r4, r4, r4
   14a68:	adc	r5, r5, r5
   14a6c:	subs	r2, r2, #1
   14a70:	bne	14a58 <__assert_fail@plt+0x3a1c>
   14a74:	lsr	r3, r4, ip
   14a78:	orr	r3, r3, r5, lsl fp
   14a7c:	lsr	r2, r5, ip
   14a80:	orr	r3, r3, r5, lsr sl
   14a84:	adds	r0, r0, r4
   14a88:	mov	r4, r3
   14a8c:	lsl	r3, r2, ip
   14a90:	orr	r3, r3, r4, lsl sl
   14a94:	lsl	ip, r4, ip
   14a98:	orr	r3, r3, r4, lsr fp
   14a9c:	adc	r1, r1, r5
   14aa0:	subs	r0, r0, ip
   14aa4:	mov	r5, r2
   14aa8:	sbc	r1, r1, r3
   14aac:	cmp	lr, #0
   14ab0:	strdne	r4, [lr]
   14ab4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14ab8:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   14abc:	mov	r7, r0
   14ac0:	ldr	r6, [pc, #72]	; 14b10 <__assert_fail@plt+0x3ad4>
   14ac4:	ldr	r5, [pc, #72]	; 14b14 <__assert_fail@plt+0x3ad8>
   14ac8:	add	r6, pc, r6
   14acc:	add	r5, pc, r5
   14ad0:	sub	r6, r6, r5
   14ad4:	mov	r8, r1
   14ad8:	mov	r9, r2
   14adc:	bl	10dc4 <calloc@plt-0x20>
   14ae0:	asrs	r6, r6, #2
   14ae4:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   14ae8:	mov	r4, #0
   14aec:	add	r4, r4, #1
   14af0:	ldr	r3, [r5], #4
   14af4:	mov	r2, r9
   14af8:	mov	r1, r8
   14afc:	mov	r0, r7
   14b00:	blx	r3
   14b04:	cmp	r6, r4
   14b08:	bne	14aec <__assert_fail@plt+0x3ab0>
   14b0c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   14b10:	andeq	r1, r1, ip, lsr r4
   14b14:	andeq	r1, r1, r4, lsr r4
   14b18:	bx	lr
   14b1c:	ldr	r3, [pc, #12]	; 14b30 <__assert_fail@plt+0x3af4>
   14b20:	mov	r1, #0
   14b24:	add	r3, pc, r3
   14b28:	ldr	r2, [r3]
   14b2c:	b	10f7c <__cxa_atexit@plt>
   14b30:			; <UNDEFINED> instruction: 0x000115b8

Disassembly of section .fini:

00014b34 <.fini>:
   14b34:	push	{r3, lr}
   14b38:	pop	{r3, pc}
