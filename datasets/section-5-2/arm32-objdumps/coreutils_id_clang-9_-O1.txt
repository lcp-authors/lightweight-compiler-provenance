
../repos/coreutils/src/id:     file format elf32-littlearm


Disassembly of section .init:

000110b8 <.init>:
   110b8:	push	{r3, lr}
   110bc:	bl	113fc <__assert_fail@plt+0x48>
   110c0:	pop	{r3, pc}

Disassembly of section .plt:

000110c4 <calloc@plt-0x14>:
   110c4:	push	{lr}		; (str lr, [sp, #-4]!)
   110c8:	ldr	lr, [pc, #4]	; 110d4 <calloc@plt-0x4>
   110cc:	add	lr, pc, lr
   110d0:	ldr	pc, [lr, #8]!
   110d4:	andeq	r6, r1, ip, lsr #30

000110d8 <calloc@plt>:
   110d8:	add	ip, pc, #0, 12
   110dc:	add	ip, ip, #90112	; 0x16000
   110e0:	ldr	pc, [ip, #3884]!	; 0xf2c

000110e4 <endgrent@plt>:
   110e4:	add	ip, pc, #0, 12
   110e8:	add	ip, ip, #90112	; 0x16000
   110ec:	ldr	pc, [ip, #3876]!	; 0xf24

000110f0 <fputs_unlocked@plt>:
   110f0:	add	ip, pc, #0, 12
   110f4:	add	ip, ip, #90112	; 0x16000
   110f8:	ldr	pc, [ip, #3868]!	; 0xf1c

000110fc <raise@plt>:
   110fc:	add	ip, pc, #0, 12
   11100:	add	ip, ip, #90112	; 0x16000
   11104:	ldr	pc, [ip, #3860]!	; 0xf14

00011108 <getpwnam@plt>:
   11108:	add	ip, pc, #0, 12
   1110c:	add	ip, ip, #90112	; 0x16000
   11110:	ldr	pc, [ip, #3852]!	; 0xf0c

00011114 <is_selinux_enabled@plt>:
   11114:	add	ip, pc, #0, 12
   11118:	add	ip, ip, #90112	; 0x16000
   1111c:	ldr	pc, [ip, #3844]!	; 0xf04

00011120 <strcmp@plt>:
   11120:	add	ip, pc, #0, 12
   11124:	add	ip, ip, #90112	; 0x16000
   11128:	ldr	pc, [ip, #3836]!	; 0xefc

0001112c <getpwuid@plt>:
   1112c:	add	ip, pc, #0, 12
   11130:	add	ip, ip, #90112	; 0x16000
   11134:	ldr	pc, [ip, #3828]!	; 0xef4

00011138 <fflush@plt>:
   11138:	add	ip, pc, #0, 12
   1113c:	add	ip, ip, #90112	; 0x16000
   11140:	ldr	pc, [ip, #3820]!	; 0xeec

00011144 <getuid@plt>:
   11144:	add	ip, pc, #0, 12
   11148:	add	ip, ip, #90112	; 0x16000
   1114c:	ldr	pc, [ip, #3812]!	; 0xee4

00011150 <free@plt>:
   11150:	add	ip, pc, #0, 12
   11154:	add	ip, ip, #90112	; 0x16000
   11158:	ldr	pc, [ip, #3804]!	; 0xedc

0001115c <_exit@plt>:
   1115c:	add	ip, pc, #0, 12
   11160:	add	ip, ip, #90112	; 0x16000
   11164:	ldr	pc, [ip, #3796]!	; 0xed4

00011168 <memcpy@plt>:
   11168:	add	ip, pc, #0, 12
   1116c:	add	ip, ip, #90112	; 0x16000
   11170:	ldr	pc, [ip, #3788]!	; 0xecc

00011174 <mbsinit@plt>:
   11174:	add	ip, pc, #0, 12
   11178:	add	ip, ip, #90112	; 0x16000
   1117c:	ldr	pc, [ip, #3780]!	; 0xec4

00011180 <dcgettext@plt>:
   11180:	add	ip, pc, #0, 12
   11184:	add	ip, ip, #90112	; 0x16000
   11188:	ldr	pc, [ip, #3772]!	; 0xebc

0001118c <realloc@plt>:
   1118c:	add	ip, pc, #0, 12
   11190:	add	ip, ip, #90112	; 0x16000
   11194:	ldr	pc, [ip, #3764]!	; 0xeb4

00011198 <textdomain@plt>:
   11198:	add	ip, pc, #0, 12
   1119c:	add	ip, ip, #90112	; 0x16000
   111a0:	ldr	pc, [ip, #3756]!	; 0xeac

000111a4 <geteuid@plt>:
   111a4:	add	ip, pc, #0, 12
   111a8:	add	ip, ip, #90112	; 0x16000
   111ac:	ldr	pc, [ip, #3748]!	; 0xea4

000111b0 <iswprint@plt>:
   111b0:	add	ip, pc, #0, 12
   111b4:	add	ip, ip, #90112	; 0x16000
   111b8:	ldr	pc, [ip, #3740]!	; 0xe9c

000111bc <getegid@plt>:
   111bc:	add	ip, pc, #0, 12
   111c0:	add	ip, ip, #90112	; 0x16000
   111c4:	ldr	pc, [ip, #3732]!	; 0xe94

000111c8 <fwrite@plt>:
   111c8:	add	ip, pc, #0, 12
   111cc:	add	ip, ip, #90112	; 0x16000
   111d0:	ldr	pc, [ip, #3724]!	; 0xe8c

000111d4 <lseek64@plt>:
   111d4:	add	ip, pc, #0, 12
   111d8:	add	ip, ip, #90112	; 0x16000
   111dc:	ldr	pc, [ip, #3716]!	; 0xe84

000111e0 <__ctype_get_mb_cur_max@plt>:
   111e0:	add	ip, pc, #0, 12
   111e4:	add	ip, ip, #90112	; 0x16000
   111e8:	ldr	pc, [ip, #3708]!	; 0xe7c

000111ec <getcon@plt>:
   111ec:	add	ip, pc, #0, 12
   111f0:	add	ip, ip, #90112	; 0x16000
   111f4:	ldr	pc, [ip, #3700]!	; 0xe74

000111f8 <__fpending@plt>:
   111f8:	add	ip, pc, #0, 12
   111fc:	add	ip, ip, #90112	; 0x16000
   11200:	ldr	pc, [ip, #3692]!	; 0xe6c

00011204 <ferror_unlocked@plt>:
   11204:	add	ip, pc, #0, 12
   11208:	add	ip, ip, #90112	; 0x16000
   1120c:	ldr	pc, [ip, #3684]!	; 0xe64

00011210 <mbrtowc@plt>:
   11210:	add	ip, pc, #0, 12
   11214:	add	ip, ip, #90112	; 0x16000
   11218:	ldr	pc, [ip, #3676]!	; 0xe5c

0001121c <error@plt>:
   1121c:	add	ip, pc, #0, 12
   11220:	add	ip, ip, #90112	; 0x16000
   11224:	ldr	pc, [ip, #3668]!	; 0xe54

00011228 <getenv@plt>:
   11228:	add	ip, pc, #0, 12
   1122c:	add	ip, ip, #90112	; 0x16000
   11230:	ldr	pc, [ip, #3660]!	; 0xe4c

00011234 <malloc@plt>:
   11234:	add	ip, pc, #0, 12
   11238:	add	ip, ip, #90112	; 0x16000
   1123c:	ldr	pc, [ip, #3652]!	; 0xe44

00011240 <__libc_start_main@plt>:
   11240:	add	ip, pc, #0, 12
   11244:	add	ip, ip, #90112	; 0x16000
   11248:	ldr	pc, [ip, #3644]!	; 0xe3c

0001124c <__freading@plt>:
   1124c:	add	ip, pc, #0, 12
   11250:	add	ip, ip, #90112	; 0x16000
   11254:	ldr	pc, [ip, #3636]!	; 0xe34

00011258 <__gmon_start__@plt>:
   11258:	add	ip, pc, #0, 12
   1125c:	add	ip, ip, #90112	; 0x16000
   11260:	ldr	pc, [ip, #3628]!	; 0xe2c

00011264 <getopt_long@plt>:
   11264:	add	ip, pc, #0, 12
   11268:	add	ip, ip, #90112	; 0x16000
   1126c:	ldr	pc, [ip, #3620]!	; 0xe24

00011270 <__ctype_b_loc@plt>:
   11270:	add	ip, pc, #0, 12
   11274:	add	ip, ip, #90112	; 0x16000
   11278:	ldr	pc, [ip, #3612]!	; 0xe1c

0001127c <exit@plt>:
   1127c:	add	ip, pc, #0, 12
   11280:	add	ip, ip, #90112	; 0x16000
   11284:	ldr	pc, [ip, #3604]!	; 0xe14

00011288 <bcmp@plt>:
   11288:	add	ip, pc, #0, 12
   1128c:	add	ip, ip, #90112	; 0x16000
   11290:	ldr	pc, [ip, #3596]!	; 0xe0c

00011294 <strtoul@plt>:
   11294:	add	ip, pc, #0, 12
   11298:	add	ip, ip, #90112	; 0x16000
   1129c:	ldr	pc, [ip, #3588]!	; 0xe04

000112a0 <strlen@plt>:
   112a0:	add	ip, pc, #0, 12
   112a4:	add	ip, ip, #90112	; 0x16000
   112a8:	ldr	pc, [ip, #3580]!	; 0xdfc

000112ac <strchr@plt>:
   112ac:	add	ip, pc, #0, 12
   112b0:	add	ip, ip, #90112	; 0x16000
   112b4:	ldr	pc, [ip, #3572]!	; 0xdf4

000112b8 <__errno_location@plt>:
   112b8:	add	ip, pc, #0, 12
   112bc:	add	ip, ip, #90112	; 0x16000
   112c0:	ldr	pc, [ip, #3564]!	; 0xdec

000112c4 <__cxa_atexit@plt>:
   112c4:	add	ip, pc, #0, 12
   112c8:	add	ip, ip, #90112	; 0x16000
   112cc:	ldr	pc, [ip, #3556]!	; 0xde4

000112d0 <getgid@plt>:
   112d0:	add	ip, pc, #0, 12
   112d4:	add	ip, ip, #90112	; 0x16000
   112d8:	ldr	pc, [ip, #3548]!	; 0xddc

000112dc <getgrouplist@plt>:
   112dc:	add	ip, pc, #0, 12
   112e0:	add	ip, ip, #90112	; 0x16000
   112e4:	ldr	pc, [ip, #3540]!	; 0xdd4

000112e8 <memset@plt>:
   112e8:	add	ip, pc, #0, 12
   112ec:	add	ip, ip, #90112	; 0x16000
   112f0:	ldr	pc, [ip, #3532]!	; 0xdcc

000112f4 <__printf_chk@plt>:
   112f4:	add	ip, pc, #0, 12
   112f8:	add	ip, ip, #90112	; 0x16000
   112fc:	ldr	pc, [ip, #3524]!	; 0xdc4

00011300 <fileno@plt>:
   11300:	add	ip, pc, #0, 12
   11304:	add	ip, ip, #90112	; 0x16000
   11308:	ldr	pc, [ip, #3516]!	; 0xdbc

0001130c <__fprintf_chk@plt>:
   1130c:	add	ip, pc, #0, 12
   11310:	add	ip, ip, #90112	; 0x16000
   11314:	ldr	pc, [ip, #3508]!	; 0xdb4

00011318 <fclose@plt>:
   11318:	add	ip, pc, #0, 12
   1131c:	add	ip, ip, #90112	; 0x16000
   11320:	ldr	pc, [ip, #3500]!	; 0xdac

00011324 <fseeko64@plt>:
   11324:	add	ip, pc, #0, 12
   11328:	add	ip, ip, #90112	; 0x16000
   1132c:	ldr	pc, [ip, #3492]!	; 0xda4

00011330 <setlocale@plt>:
   11330:	add	ip, pc, #0, 12
   11334:	add	ip, ip, #90112	; 0x16000
   11338:	ldr	pc, [ip, #3484]!	; 0xd9c

0001133c <endpwent@plt>:
   1133c:	add	ip, pc, #0, 12
   11340:	add	ip, ip, #90112	; 0x16000
   11344:	ldr	pc, [ip, #3476]!	; 0xd94

00011348 <strrchr@plt>:
   11348:	add	ip, pc, #0, 12
   1134c:	add	ip, ip, #90112	; 0x16000
   11350:	ldr	pc, [ip, #3468]!	; 0xd8c

00011354 <nl_langinfo@plt>:
   11354:	add	ip, pc, #0, 12
   11358:	add	ip, ip, #90112	; 0x16000
   1135c:	ldr	pc, [ip, #3460]!	; 0xd84

00011360 <getgroups@plt>:
   11360:	add	ip, pc, #0, 12
   11364:	add	ip, ip, #90112	; 0x16000
   11368:	ldr	pc, [ip, #3452]!	; 0xd7c

0001136c <bindtextdomain@plt>:
   1136c:	add	ip, pc, #0, 12
   11370:	add	ip, ip, #90112	; 0x16000
   11374:	ldr	pc, [ip, #3444]!	; 0xd74

00011378 <strncmp@plt>:
   11378:	add	ip, pc, #0, 12
   1137c:	add	ip, ip, #90112	; 0x16000
   11380:	ldr	pc, [ip, #3436]!	; 0xd6c

00011384 <abort@plt>:
   11384:	add	ip, pc, #0, 12
   11388:	add	ip, ip, #90112	; 0x16000
   1138c:	ldr	pc, [ip, #3428]!	; 0xd64

00011390 <getgrgid@plt>:
   11390:	add	ip, pc, #0, 12
   11394:	add	ip, ip, #90112	; 0x16000
   11398:	ldr	pc, [ip, #3420]!	; 0xd5c

0001139c <getgrnam@plt>:
   1139c:	add	ip, pc, #0, 12
   113a0:	add	ip, ip, #90112	; 0x16000
   113a4:	ldr	pc, [ip, #3412]!	; 0xd54

000113a8 <putchar_unlocked@plt>:
   113a8:	add	ip, pc, #0, 12
   113ac:	add	ip, ip, #90112	; 0x16000
   113b0:	ldr	pc, [ip, #3404]!	; 0xd4c

000113b4 <__assert_fail@plt>:
   113b4:	add	ip, pc, #0, 12
   113b8:	add	ip, ip, #90112	; 0x16000
   113bc:	ldr	pc, [ip, #3396]!	; 0xd44

Disassembly of section .text:

000113c0 <.text>:
   113c0:	mov	fp, #0
   113c4:	mov	lr, #0
   113c8:	pop	{r1}		; (ldr r1, [sp], #4)
   113cc:	mov	r2, sp
   113d0:	push	{r2}		; (str r2, [sp, #-4]!)
   113d4:	push	{r0}		; (str r0, [sp, #-4]!)
   113d8:	ldr	ip, [pc, #16]	; 113f0 <__assert_fail@plt+0x3c>
   113dc:	push	{ip}		; (str ip, [sp, #-4]!)
   113e0:	ldr	r0, [pc, #12]	; 113f4 <__assert_fail@plt+0x40>
   113e4:	ldr	r3, [pc, #12]	; 113f8 <__assert_fail@plt+0x44>
   113e8:	bl	11240 <__libc_start_main@plt>
   113ec:	bl	11384 <abort@plt>
   113f0:	andeq	r6, r1, r4, asr #3
   113f4:	andeq	r1, r1, ip, asr r7
   113f8:	andeq	r6, r1, r4, ror #2
   113fc:	ldr	r3, [pc, #20]	; 11418 <__assert_fail@plt+0x64>
   11400:	ldr	r2, [pc, #20]	; 1141c <__assert_fail@plt+0x68>
   11404:	add	r3, pc, r3
   11408:	ldr	r2, [r3, r2]
   1140c:	cmp	r2, #0
   11410:	bxeq	lr
   11414:	b	11258 <__gmon_start__@plt>
   11418:	strdeq	r6, [r1], -r4
   1141c:	andeq	r0, r0, r4, lsl #2
   11420:	ldr	r0, [pc, #24]	; 11440 <__assert_fail@plt+0x8c>
   11424:	ldr	r3, [pc, #24]	; 11444 <__assert_fail@plt+0x90>
   11428:	cmp	r3, r0
   1142c:	bxeq	lr
   11430:	ldr	r3, [pc, #16]	; 11448 <__assert_fail@plt+0x94>
   11434:	cmp	r3, #0
   11438:	bxeq	lr
   1143c:	bx	r3
   11440:	andeq	r8, r2, r0, ror #2
   11444:	andeq	r8, r2, r0, ror #2
   11448:	andeq	r0, r0, r0
   1144c:	ldr	r0, [pc, #36]	; 11478 <__assert_fail@plt+0xc4>
   11450:	ldr	r1, [pc, #36]	; 1147c <__assert_fail@plt+0xc8>
   11454:	sub	r1, r1, r0
   11458:	asr	r1, r1, #2
   1145c:	add	r1, r1, r1, lsr #31
   11460:	asrs	r1, r1, #1
   11464:	bxeq	lr
   11468:	ldr	r3, [pc, #16]	; 11480 <__assert_fail@plt+0xcc>
   1146c:	cmp	r3, #0
   11470:	bxeq	lr
   11474:	bx	r3
   11478:	andeq	r8, r2, r0, ror #2
   1147c:	andeq	r8, r2, r0, ror #2
   11480:	andeq	r0, r0, r0
   11484:	push	{r4, lr}
   11488:	ldr	r4, [pc, #24]	; 114a8 <__assert_fail@plt+0xf4>
   1148c:	ldrb	r3, [r4]
   11490:	cmp	r3, #0
   11494:	popne	{r4, pc}
   11498:	bl	11420 <__assert_fail@plt+0x6c>
   1149c:	mov	r3, #1
   114a0:	strb	r3, [r4]
   114a4:	pop	{r4, pc}
   114a8:	andeq	r8, r2, r8, ror r1
   114ac:	b	1144c <__assert_fail@plt+0x98>
   114b0:	push	{fp, lr}
   114b4:	mov	fp, sp
   114b8:	mov	r4, r0
   114bc:	cmp	r0, #0
   114c0:	bne	11590 <__assert_fail@plt+0x1dc>
   114c4:	movw	r1, #25107	; 0x6213
   114c8:	movt	r1, #1
   114cc:	mov	r0, #0
   114d0:	mov	r2, #5
   114d4:	bl	11180 <dcgettext@plt>
   114d8:	mov	r1, r0
   114dc:	movw	r0, #33252	; 0x81e4
   114e0:	movt	r0, #2
   114e4:	ldr	r2, [r0]
   114e8:	mov	r0, #1
   114ec:	bl	112f4 <__printf_chk@plt>
   114f0:	movw	r1, #25140	; 0x6234
   114f4:	movt	r1, #1
   114f8:	mov	r0, #0
   114fc:	mov	r2, #5
   11500:	bl	11180 <dcgettext@plt>
   11504:	movw	r5, #33140	; 0x8174
   11508:	movt	r5, #2
   1150c:	ldr	r1, [r5]
   11510:	bl	110f0 <fputs_unlocked@plt>
   11514:	movw	r1, #25248	; 0x62a0
   11518:	movt	r1, #1
   1151c:	mov	r0, #0
   11520:	mov	r2, #5
   11524:	bl	11180 <dcgettext@plt>
   11528:	ldr	r1, [r5]
   1152c:	bl	110f0 <fputs_unlocked@plt>
   11530:	movw	r1, #25769	; 0x64a9
   11534:	movt	r1, #1
   11538:	mov	r0, #0
   1153c:	mov	r2, #5
   11540:	bl	11180 <dcgettext@plt>
   11544:	ldr	r1, [r5]
   11548:	bl	110f0 <fputs_unlocked@plt>
   1154c:	movw	r1, #25814	; 0x64d6
   11550:	movt	r1, #1
   11554:	mov	r0, #0
   11558:	mov	r2, #5
   1155c:	bl	11180 <dcgettext@plt>
   11560:	ldr	r1, [r5]
   11564:	bl	110f0 <fputs_unlocked@plt>
   11568:	movw	r1, #25868	; 0x650c
   1156c:	movt	r1, #1
   11570:	mov	r0, #0
   11574:	mov	r2, #5
   11578:	bl	11180 <dcgettext@plt>
   1157c:	ldr	r1, [r5]
   11580:	bl	110f0 <fputs_unlocked@plt>
   11584:	bl	115d4 <__assert_fail@plt+0x220>
   11588:	mov	r0, r4
   1158c:	bl	1127c <exit@plt>
   11590:	movw	r0, #33136	; 0x8170
   11594:	movt	r0, #2
   11598:	ldr	r5, [r0]
   1159c:	movw	r1, #25068	; 0x61ec
   115a0:	movt	r1, #1
   115a4:	mov	r0, #0
   115a8:	mov	r2, #5
   115ac:	bl	11180 <dcgettext@plt>
   115b0:	mov	r2, r0
   115b4:	movw	r0, #33252	; 0x81e4
   115b8:	movt	r0, #2
   115bc:	ldr	r3, [r0]
   115c0:	mov	r0, r5
   115c4:	mov	r1, #1
   115c8:	bl	1130c <__fprintf_chk@plt>
   115cc:	mov	r0, r4
   115d0:	bl	1127c <exit@plt>
   115d4:	push	{r4, r5, r6, sl, fp, lr}
   115d8:	add	fp, sp, #16
   115dc:	sub	sp, sp, #56	; 0x38
   115e0:	movw	r0, #27088	; 0x69d0
   115e4:	movt	r0, #1
   115e8:	add	r1, r0, #32
   115ec:	mov	r2, #48	; 0x30
   115f0:	vld1.64	{d16-d17}, [r1]
   115f4:	mov	r6, sp
   115f8:	add	r1, r6, #32
   115fc:	add	r3, r0, #16
   11600:	vld1.64	{d18-d19}, [r0], r2
   11604:	vld1.64	{d20-d21}, [r3]
   11608:	vldr	d22, [r0]
   1160c:	vst1.64	{d16-d17}, [r1]
   11610:	add	r0, r6, #16
   11614:	vst1.64	{d20-d21}, [r0]
   11618:	mov	r0, r6
   1161c:	vst1.64	{d18-d19}, [r0], r2
   11620:	vstr	d22, [r0]
   11624:	ldr	r1, [sp]
   11628:	cmp	r1, #0
   1162c:	movw	r4, #25939	; 0x6553
   11630:	movt	r4, #1
   11634:	beq	1165c <__assert_fail@plt+0x2a8>
   11638:	mov	r6, sp
   1163c:	movw	r5, #25939	; 0x6553
   11640:	movt	r5, #1
   11644:	mov	r0, r5
   11648:	bl	11120 <strcmp@plt>
   1164c:	cmp	r0, #0
   11650:	ldrne	r1, [r6, #8]!
   11654:	cmpne	r1, #0
   11658:	bne	11644 <__assert_fail@plt+0x290>
   1165c:	ldr	r5, [r6, #4]
   11660:	movw	r1, #26513	; 0x6791
   11664:	movt	r1, #1
   11668:	mov	r0, #0
   1166c:	mov	r2, #5
   11670:	bl	11180 <dcgettext@plt>
   11674:	mov	r1, r0
   11678:	movw	r2, #26030	; 0x65ae
   1167c:	movt	r2, #1
   11680:	movw	r3, #26536	; 0x67a8
   11684:	movt	r3, #1
   11688:	mov	r0, #1
   1168c:	bl	112f4 <__printf_chk@plt>
   11690:	cmp	r5, #0
   11694:	moveq	r5, r4
   11698:	mov	r0, #5
   1169c:	mov	r1, #0
   116a0:	bl	11330 <setlocale@plt>
   116a4:	cmp	r0, #0
   116a8:	beq	116e8 <__assert_fail@plt+0x334>
   116ac:	movw	r1, #26576	; 0x67d0
   116b0:	movt	r1, #1
   116b4:	mov	r2, #3
   116b8:	bl	11378 <strncmp@plt>
   116bc:	cmp	r0, #0
   116c0:	beq	116e8 <__assert_fail@plt+0x334>
   116c4:	movw	r1, #26580	; 0x67d4
   116c8:	movt	r1, #1
   116cc:	mov	r0, #0
   116d0:	mov	r2, #5
   116d4:	bl	11180 <dcgettext@plt>
   116d8:	movw	r1, #33140	; 0x8174
   116dc:	movt	r1, #2
   116e0:	ldr	r1, [r1]
   116e4:	bl	110f0 <fputs_unlocked@plt>
   116e8:	movw	r1, #26651	; 0x681b
   116ec:	movt	r1, #1
   116f0:	mov	r0, #0
   116f4:	mov	r2, #5
   116f8:	bl	11180 <dcgettext@plt>
   116fc:	mov	r1, r0
   11700:	movw	r2, #26536	; 0x67a8
   11704:	movt	r2, #1
   11708:	mov	r0, #1
   1170c:	mov	r3, r4
   11710:	bl	112f4 <__printf_chk@plt>
   11714:	movw	r0, #26446	; 0x674e
   11718:	movt	r0, #1
   1171c:	movw	r6, #25247	; 0x629f
   11720:	movt	r6, #1
   11724:	cmp	r5, r4
   11728:	moveq	r6, r0
   1172c:	movw	r1, #26678	; 0x6836
   11730:	movt	r1, #1
   11734:	mov	r0, #0
   11738:	mov	r2, #5
   1173c:	bl	11180 <dcgettext@plt>
   11740:	mov	r1, r0
   11744:	mov	r0, #1
   11748:	mov	r2, r5
   1174c:	mov	r3, r6
   11750:	sub	sp, fp, #16
   11754:	pop	{r4, r5, r6, sl, fp, lr}
   11758:	b	112f4 <__printf_chk@plt>
   1175c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11760:	add	fp, sp, #28
   11764:	sub	sp, sp, #20
   11768:	mov	r4, r1
   1176c:	mov	r6, r0
   11770:	bl	11114 <is_selinux_enabled@plt>
   11774:	str	r0, [sp, #16]
   11778:	ldr	r0, [r4]
   1177c:	bl	127ec <__assert_fail@plt+0x1438>
   11780:	movw	r1, #25247	; 0x629f
   11784:	movt	r1, #1
   11788:	mov	r0, #6
   1178c:	bl	11330 <setlocale@plt>
   11790:	movw	r5, #26034	; 0x65b2
   11794:	movt	r5, #1
   11798:	movw	r1, #25942	; 0x6556
   1179c:	movt	r1, #1
   117a0:	mov	r0, r5
   117a4:	bl	1136c <bindtextdomain@plt>
   117a8:	mov	r0, r5
   117ac:	bl	11198 <textdomain@plt>
   117b0:	movw	r0, #9856	; 0x2680
   117b4:	movt	r0, #1
   117b8:	bl	161c8 <__assert_fail@plt+0x4e14>
   117bc:	mov	r9, #0
   117c0:	movw	r7, #25966	; 0x656e
   117c4:	movt	r7, #1
   117c8:	movw	r5, #26928	; 0x6930
   117cc:	movt	r5, #1
   117d0:	movw	sl, #33149	; 0x817d
   117d4:	movt	sl, #2
   117d8:	mov	r8, #1
   117dc:	b	117ec <__assert_fail@plt+0x438>
   117e0:	movw	r0, #33150	; 0x817e
   117e4:	movt	r0, #2
   117e8:	strb	r8, [r0]
   117ec:	str	r9, [sp]
   117f0:	mov	r0, r6
   117f4:	mov	r1, r4
   117f8:	mov	r2, r7
   117fc:	mov	r3, r5
   11800:	bl	11264 <getopt_long@plt>
   11804:	cmp	r0, #70	; 0x46
   11808:	ble	1194c <__assert_fail@plt+0x598>
   1180c:	sub	r1, r0, #71	; 0x47
   11810:	cmp	r1, #51	; 0x33
   11814:	bhi	11dc8 <__assert_fail@plt+0xa14>
   11818:	add	r2, pc, #4
   1181c:	mov	r0, sl
   11820:	ldr	pc, [r2, r1, lsl #2]
   11824:	strdeq	r1, [r1], -r4
   11828:	andeq	r1, r1, r8, asr #27
   1182c:	andeq	r1, r1, r8, asr #27
   11830:	andeq	r1, r1, r8, asr #27
   11834:	andeq	r1, r1, r8, asr #27
   11838:	andeq	r1, r1, r8, asr #27
   1183c:	andeq	r1, r1, r8, asr #27
   11840:	andeq	r1, r1, r8, asr #27
   11844:	andeq	r1, r1, r8, asr #27
   11848:	andeq	r1, r1, r8, asr #27
   1184c:	andeq	r1, r1, r8, asr #27
   11850:	andeq	r1, r1, r8, asr #27
   11854:	andeq	r1, r1, r8, asr #27
   11858:	andeq	r1, r1, r8, asr #27
   1185c:	andeq	r1, r1, r8, asr #27
   11860:	andeq	r1, r1, r8, asr #27
   11864:	andeq	r1, r1, r8, asr #27
   11868:	andeq	r1, r1, r8, asr #27
   1186c:	andeq	r1, r1, r8, asr #27
   11870:	andeq	r1, r1, r4, lsl #18
   11874:	andeq	r1, r1, r8, asr #27
   11878:	andeq	r1, r1, r8, asr #27
   1187c:	andeq	r1, r1, r8, asr #27
   11880:	andeq	r1, r1, r8, asr #27
   11884:	andeq	r1, r1, r8, asr #27
   11888:	andeq	r1, r1, r8, asr #27
   1188c:	andeq	r1, r1, ip, ror #15
   11890:	andeq	r1, r1, r8, asr #27
   11894:	andeq	r1, r1, r8, asr #27
   11898:	andeq	r1, r1, r8, asr #27
   1189c:	andeq	r1, r1, r8, asr #27
   118a0:	andeq	r1, r1, r8, asr #27
   118a4:	andeq	r1, r1, r8, ror #15
   118a8:	andeq	r1, r1, r8, asr #27
   118ac:	andeq	r1, r1, r8, asr #27
   118b0:	andeq	r1, r1, r8, asr #27
   118b4:	andeq	r1, r1, r8, asr #27
   118b8:	andeq	r1, r1, r8, asr #27
   118bc:	andeq	r1, r1, r8, asr #27
   118c0:	andeq	r1, r1, r0, ror #15
   118c4:	andeq	r1, r1, r8, asr #27
   118c8:	andeq	r1, r1, r8, asr #27
   118cc:	andeq	r1, r1, r8, asr #27
   118d0:	andeq	r1, r1, ip, lsr r9
   118d4:	andeq	r1, r1, r8, asr #27
   118d8:	andeq	r1, r1, r8, asr #27
   118dc:	andeq	r1, r1, ip, lsl r9
   118e0:	andeq	r1, r1, r8, asr #27
   118e4:	andeq	r1, r1, r8, asr #27
   118e8:	andeq	r1, r1, r8, asr #27
   118ec:	andeq	r1, r1, r8, asr #27
   118f0:	andeq	r1, r1, ip, lsr #18
   118f4:	movw	r0, #33154	; 0x8182
   118f8:	movt	r0, #2
   118fc:	strb	r8, [r0]
   11900:	b	117ec <__assert_fail@plt+0x438>
   11904:	ldr	r0, [sp, #16]
   11908:	cmp	r0, #0
   1190c:	movw	r0, #33148	; 0x817c
   11910:	movt	r0, #2
   11914:	bgt	117e8 <__assert_fail@plt+0x434>
   11918:	b	11dd0 <__assert_fail@plt+0xa1c>
   1191c:	movw	r0, #33152	; 0x8180
   11920:	movt	r0, #2
   11924:	strb	r8, [r0]
   11928:	b	117ec <__assert_fail@plt+0x438>
   1192c:	movw	r0, #33153	; 0x8181
   11930:	movt	r0, #2
   11934:	strb	r8, [r0]
   11938:	b	117ec <__assert_fail@plt+0x438>
   1193c:	movw	r0, #33151	; 0x817f
   11940:	movt	r0, #2
   11944:	strb	r8, [r0]
   11948:	b	117ec <__assert_fail@plt+0x438>
   1194c:	cmn	r0, #1
   11950:	bne	11d5c <__assert_fail@plt+0x9a8>
   11954:	movw	sl, #33128	; 0x8168
   11958:	movt	sl, #2
   1195c:	ldr	r0, [sl]
   11960:	subs	r0, r6, r0
   11964:	beq	1197c <__assert_fail@plt+0x5c8>
   11968:	movw	r1, #33148	; 0x817c
   1196c:	movt	r1, #2
   11970:	ldrb	r1, [r1]
   11974:	cmp	r1, #1
   11978:	beq	11df4 <__assert_fail@plt+0xa40>
   1197c:	movw	r8, #33152	; 0x8180
   11980:	movt	r8, #2
   11984:	ldrb	r2, [r8]
   11988:	movw	r9, #33149	; 0x817d
   1198c:	movt	r9, #2
   11990:	ldrb	r3, [r9]
   11994:	add	r1, r3, r2
   11998:	movw	r5, #33154	; 0x8182
   1199c:	movt	r5, #2
   119a0:	ldrb	r6, [r5]
   119a4:	add	r7, r1, r6
   119a8:	movw	ip, #33148	; 0x817c
   119ac:	movt	ip, #2
   119b0:	ldrb	r1, [ip]
   119b4:	add	r7, r7, r1
   119b8:	cmp	r7, #2
   119bc:	bcs	11ddc <__assert_fail@plt+0xa28>
   119c0:	orr	r7, r6, r1
   119c4:	orr	r2, r2, r3
   119c8:	orrs	r2, r2, r7
   119cc:	bne	11a0c <__assert_fail@plt+0x658>
   119d0:	movw	r3, #33151	; 0x817f
   119d4:	movt	r3, #2
   119d8:	ldrb	r3, [r3]
   119dc:	cmp	r3, #0
   119e0:	bne	11de8 <__assert_fail@plt+0xa34>
   119e4:	movw	r3, #33150	; 0x817e
   119e8:	movt	r3, #2
   119ec:	ldrb	r3, [r3]
   119f0:	cmp	r3, #1
   119f4:	beq	11de8 <__assert_fail@plt+0xa34>
   119f8:	movw	r3, #33153	; 0x8181
   119fc:	movt	r3, #2
   11a00:	ldrb	r3, [r3]
   11a04:	cmp	r3, #1
   11a08:	beq	11e00 <__assert_fail@plt+0xa4c>
   11a0c:	cmp	r0, #0
   11a10:	beq	11b38 <__assert_fail@plt+0x784>
   11a14:	subs	r1, r0, #1
   11a18:	movwne	r1, #1
   11a1c:	movw	r2, #33160	; 0x8188
   11a20:	movt	r2, #2
   11a24:	strb	r1, [r2]
   11a28:	ldr	r1, [sl]
   11a2c:	add	r9, r1, r0
   11a30:	cmp	r1, r9
   11a34:	bcs	11d44 <__assert_fail@plt+0x990>
   11a38:	mov	r8, #0
   11a3c:	movw	r6, #33164	; 0x818c
   11a40:	movt	r6, #2
   11a44:	b	11aa8 <__assert_fail@plt+0x6f4>
   11a48:	bl	112b8 <__errno_location@plt>
   11a4c:	ldr	r7, [r0]
   11a50:	mov	r0, #0
   11a54:	movw	r1, #26311	; 0x66c7
   11a58:	movt	r1, #1
   11a5c:	mov	r2, #5
   11a60:	bl	11180 <dcgettext@plt>
   11a64:	mov	r5, r0
   11a68:	ldr	r0, [sl]
   11a6c:	ldr	r0, [r4, r0, lsl #2]
   11a70:	bl	13fe0 <__assert_fail@plt+0x2c2c>
   11a74:	mov	r3, r0
   11a78:	mov	r0, #0
   11a7c:	mov	r1, r7
   11a80:	mov	r2, r5
   11a84:	bl	1121c <error@plt>
   11a88:	movw	r0, #33040	; 0x8110
   11a8c:	movt	r0, #2
   11a90:	strb	r8, [r0]
   11a94:	ldr	r0, [sl]
   11a98:	add	r1, r0, #1
   11a9c:	str	r1, [sl]
   11aa0:	cmp	r1, r9
   11aa4:	bcs	11d44 <__assert_fail@plt+0x990>
   11aa8:	ldr	r0, [r4, r1, lsl #2]
   11aac:	ldrb	r1, [r0]
   11ab0:	cmp	r1, #0
   11ab4:	beq	11a48 <__assert_fail@plt+0x694>
   11ab8:	str	r8, [sp]
   11abc:	mov	r1, r6
   11ac0:	mov	r2, #0
   11ac4:	mov	r3, #0
   11ac8:	bl	143f8 <__assert_fail@plt+0x3044>
   11acc:	cmp	r0, #0
   11ad0:	bne	11a48 <__assert_fail@plt+0x694>
   11ad4:	ldr	r0, [r6]
   11ad8:	bl	1112c <getpwuid@plt>
   11adc:	cmp	r0, #0
   11ae0:	beq	11a48 <__assert_fail@plt+0x694>
   11ae4:	mov	r7, r0
   11ae8:	ldr	r0, [r0]
   11aec:	bl	14fd8 <__assert_fail@plt+0x3c24>
   11af0:	mov	r5, r0
   11af4:	ldr	r0, [r7, #8]
   11af8:	ldr	r1, [r7, #12]
   11afc:	str	r0, [r6]
   11b00:	movw	r2, #33168	; 0x8190
   11b04:	movt	r2, #2
   11b08:	str	r0, [r2]
   11b0c:	movw	r0, #33172	; 0x8194
   11b10:	movt	r0, #2
   11b14:	str	r1, [r0]
   11b18:	movw	r0, #33176	; 0x8198
   11b1c:	movt	r0, #2
   11b20:	str	r1, [r0]
   11b24:	mov	r0, r5
   11b28:	bl	11e84 <__assert_fail@plt+0xad0>
   11b2c:	mov	r0, r5
   11b30:	bl	12768 <__assert_fail@plt+0x13b4>
   11b34:	b	11a94 <__assert_fail@plt+0x6e0>
   11b38:	cmp	r1, #0
   11b3c:	mov	r6, ip
   11b40:	mov	r7, r5
   11b44:	bne	11b6c <__assert_fail@plt+0x7b8>
   11b48:	cmp	r2, #0
   11b4c:	bne	11ba0 <__assert_fail@plt+0x7ec>
   11b50:	movw	r0, #26269	; 0x669d
   11b54:	movt	r0, #1
   11b58:	bl	11228 <getenv@plt>
   11b5c:	mov	r5, r7
   11b60:	mov	ip, r6
   11b64:	cmp	r0, #0
   11b68:	bne	11ba0 <__assert_fail@plt+0x7ec>
   11b6c:	ldr	r0, [sp, #16]
   11b70:	cmp	r0, #1
   11b74:	blt	11ba0 <__assert_fail@plt+0x7ec>
   11b78:	movw	r0, #33156	; 0x8184
   11b7c:	movt	r0, #2
   11b80:	bl	111ec <getcon@plt>
   11b84:	mov	r5, r7
   11b88:	mov	ip, r6
   11b8c:	cmp	r0, #0
   11b90:	beq	11ba0 <__assert_fail@plt+0x7ec>
   11b94:	ldrb	r0, [ip]
   11b98:	cmp	r0, #1
   11b9c:	beq	11e24 <__assert_fail@plt+0xa70>
   11ba0:	ldrb	r0, [r8]
   11ba4:	cmp	r0, #1
   11ba8:	bne	11c08 <__assert_fail@plt+0x854>
   11bac:	movw	r0, #33151	; 0x817f
   11bb0:	movt	r0, #2
   11bb4:	ldrb	r0, [r0]
   11bb8:	cmp	r0, #0
   11bbc:	bne	11c74 <__assert_fail@plt+0x8c0>
   11bc0:	bl	112b8 <__errno_location@plt>
   11bc4:	mov	r4, r0
   11bc8:	mov	r0, #0
   11bcc:	str	r0, [r4]
   11bd0:	bl	111a4 <geteuid@plt>
   11bd4:	mov	r5, r7
   11bd8:	mov	ip, r6
   11bdc:	movw	r1, #33164	; 0x818c
   11be0:	movt	r1, #2
   11be4:	str	r0, [r1]
   11be8:	cmn	r0, #1
   11bec:	bne	11c2c <__assert_fail@plt+0x878>
   11bf0:	ldr	r4, [r4]
   11bf4:	cmp	r4, #0
   11bf8:	beq	11c2c <__assert_fail@plt+0x878>
   11bfc:	movw	r1, #26328	; 0x66d8
   11c00:	movt	r1, #1
   11c04:	b	11e68 <__assert_fail@plt+0xab4>
   11c08:	ldrb	r0, [r9]
   11c0c:	cmp	r0, #0
   11c10:	bne	11ce0 <__assert_fail@plt+0x92c>
   11c14:	ldrb	r0, [r5]
   11c18:	cmp	r0, #0
   11c1c:	bne	11c74 <__assert_fail@plt+0x8c0>
   11c20:	ldrb	r0, [ip]
   11c24:	cmp	r0, #0
   11c28:	beq	11bc0 <__assert_fail@plt+0x80c>
   11c2c:	ldrb	r0, [r8]
   11c30:	cmp	r0, #1
   11c34:	bne	11c50 <__assert_fail@plt+0x89c>
   11c38:	movw	r0, #33151	; 0x817f
   11c3c:	movt	r0, #2
   11c40:	ldrb	r0, [r0]
   11c44:	cmp	r0, #0
   11c48:	bne	11c74 <__assert_fail@plt+0x8c0>
   11c4c:	b	11d3c <__assert_fail@plt+0x988>
   11c50:	ldrb	r0, [r9]
   11c54:	cmp	r0, #0
   11c58:	bne	11ce0 <__assert_fail@plt+0x92c>
   11c5c:	ldrb	r0, [r5]
   11c60:	cmp	r0, #0
   11c64:	bne	11c74 <__assert_fail@plt+0x8c0>
   11c68:	ldrb	r0, [ip]
   11c6c:	cmp	r0, #0
   11c70:	bne	11cb0 <__assert_fail@plt+0x8fc>
   11c74:	bl	112b8 <__errno_location@plt>
   11c78:	mov	r4, r0
   11c7c:	mov	r0, #0
   11c80:	str	r0, [r4]
   11c84:	bl	11144 <getuid@plt>
   11c88:	mov	r5, r7
   11c8c:	mov	ip, r6
   11c90:	movw	r1, #33168	; 0x8190
   11c94:	movt	r1, #2
   11c98:	str	r0, [r1]
   11c9c:	cmn	r0, #1
   11ca0:	bne	11cb0 <__assert_fail@plt+0x8fc>
   11ca4:	ldr	r4, [r4]
   11ca8:	cmp	r4, #0
   11cac:	bne	11e60 <__assert_fail@plt+0xaac>
   11cb0:	ldrb	r0, [r8]
   11cb4:	cmp	r0, #0
   11cb8:	bne	11d3c <__assert_fail@plt+0x988>
   11cbc:	ldrb	r0, [r9]
   11cc0:	cmp	r0, #0
   11cc4:	bne	11ce0 <__assert_fail@plt+0x92c>
   11cc8:	ldrb	r0, [r5]
   11ccc:	cmp	r0, #0
   11cd0:	bne	11ce0 <__assert_fail@plt+0x92c>
   11cd4:	ldrb	r0, [ip]
   11cd8:	cmp	r0, #0
   11cdc:	bne	11d3c <__assert_fail@plt+0x988>
   11ce0:	bl	112b8 <__errno_location@plt>
   11ce4:	mov	r4, r0
   11ce8:	mov	r6, #0
   11cec:	str	r6, [r0]
   11cf0:	bl	111bc <getegid@plt>
   11cf4:	movw	r1, #33172	; 0x8194
   11cf8:	movt	r1, #2
   11cfc:	str	r0, [r1]
   11d00:	cmn	r0, #1
   11d04:	bne	11d14 <__assert_fail@plt+0x960>
   11d08:	ldr	r5, [r4]
   11d0c:	cmp	r5, #0
   11d10:	bne	11e30 <__assert_fail@plt+0xa7c>
   11d14:	str	r6, [r4]
   11d18:	bl	112d0 <getgid@plt>
   11d1c:	movw	r1, #33176	; 0x8198
   11d20:	movt	r1, #2
   11d24:	str	r0, [r1]
   11d28:	cmn	r0, #1
   11d2c:	bne	11d3c <__assert_fail@plt+0x988>
   11d30:	ldr	r4, [r4]
   11d34:	cmp	r4, #0
   11d38:	bne	11e54 <__assert_fail@plt+0xaa0>
   11d3c:	mov	r0, #0
   11d40:	bl	11e84 <__assert_fail@plt+0xad0>
   11d44:	movw	r0, #33040	; 0x8110
   11d48:	movt	r0, #2
   11d4c:	ldrb	r0, [r0]
   11d50:	eor	r0, r0, #1
   11d54:	sub	sp, fp, #28
   11d58:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11d5c:	cmn	r0, #3
   11d60:	bne	11db8 <__assert_fail@plt+0xa04>
   11d64:	movw	r0, #33044	; 0x8114
   11d68:	movt	r0, #2
   11d6c:	ldr	r3, [r0]
   11d70:	movw	r0, #33140	; 0x8174
   11d74:	movt	r0, #2
   11d78:	ldr	r0, [r0]
   11d7c:	mov	r1, #0
   11d80:	movw	r2, #26059	; 0x65cb
   11d84:	movt	r2, #1
   11d88:	movw	r7, #26044	; 0x65bc
   11d8c:	movt	r7, #1
   11d90:	str	r7, [sp]
   11d94:	str	r2, [sp, #4]
   11d98:	str	r1, [sp, #8]
   11d9c:	movw	r1, #25939	; 0x6553
   11da0:	movt	r1, #1
   11da4:	movw	r2, #26030	; 0x65ae
   11da8:	movt	r2, #1
   11dac:	bl	14b68 <__assert_fail@plt+0x37b4>
   11db0:	mov	r0, #0
   11db4:	bl	1127c <exit@plt>
   11db8:	cmn	r0, #2
   11dbc:	bne	11dc8 <__assert_fail@plt+0xa14>
   11dc0:	mov	r0, #0
   11dc4:	bl	114b0 <__assert_fail@plt+0xfc>
   11dc8:	mov	r0, #1
   11dcc:	bl	114b0 <__assert_fail@plt+0xfc>
   11dd0:	movw	r1, #25975	; 0x6577
   11dd4:	movt	r1, #1
   11dd8:	b	11e08 <__assert_fail@plt+0xa54>
   11ddc:	movw	r1, #26125	; 0x660d
   11de0:	movt	r1, #1
   11de4:	b	11e08 <__assert_fail@plt+0xa54>
   11de8:	movw	r1, #26169	; 0x6639
   11dec:	movt	r1, #1
   11df0:	b	11e08 <__assert_fail@plt+0xa54>
   11df4:	movw	r1, #26075	; 0x65db
   11df8:	movt	r1, #1
   11dfc:	b	11e08 <__assert_fail@plt+0xa54>
   11e00:	movw	r1, #26223	; 0x666f
   11e04:	movt	r1, #1
   11e08:	mov	r0, #0
   11e0c:	mov	r2, #5
   11e10:	bl	11180 <dcgettext@plt>
   11e14:	mov	r2, r0
   11e18:	mov	r0, #1
   11e1c:	mov	r1, #0
   11e20:	bl	1121c <error@plt>
   11e24:	movw	r1, #26285	; 0x66ad
   11e28:	movt	r1, #1
   11e2c:	b	11e08 <__assert_fail@plt+0xa54>
   11e30:	movw	r1, #26373	; 0x6705
   11e34:	movt	r1, #1
   11e38:	mov	r0, #0
   11e3c:	mov	r2, #5
   11e40:	bl	11180 <dcgettext@plt>
   11e44:	mov	r2, r0
   11e48:	mov	r0, #1
   11e4c:	mov	r1, r5
   11e50:	bl	1121c <error@plt>
   11e54:	movw	r1, #26398	; 0x671e
   11e58:	movt	r1, #1
   11e5c:	b	11e68 <__assert_fail@plt+0xab4>
   11e60:	movw	r1, #26353	; 0x66f1
   11e64:	movt	r1, #1
   11e68:	mov	r0, #0
   11e6c:	mov	r2, #5
   11e70:	bl	11180 <dcgettext@plt>
   11e74:	mov	r2, r0
   11e78:	mov	r0, #1
   11e7c:	mov	r1, r4
   11e80:	bl	1121c <error@plt>
   11e84:	push	{r4, r5, fp, lr}
   11e88:	add	fp, sp, #8
   11e8c:	sub	sp, sp, #8
   11e90:	movw	r1, #33152	; 0x8180
   11e94:	movt	r1, #2
   11e98:	ldrb	r1, [r1]
   11e9c:	cmp	r1, #1
   11ea0:	movw	r5, #33153	; 0x8181
   11ea4:	movt	r5, #2
   11ea8:	bne	11edc <__assert_fail@plt+0xb28>
   11eac:	movw	r0, #33151	; 0x817f
   11eb0:	movt	r0, #2
   11eb4:	ldrb	r0, [r0]
   11eb8:	movw	r1, #33168	; 0x8190
   11ebc:	movt	r1, #2
   11ec0:	movw	r2, #33164	; 0x818c
   11ec4:	movt	r2, #2
   11ec8:	cmp	r0, #0
   11ecc:	movne	r2, r1
   11ed0:	ldr	r0, [r2]
   11ed4:	bl	1203c <__assert_fail@plt+0xc88>
   11ed8:	b	11fa0 <__assert_fail@plt+0xbec>
   11edc:	movw	r1, #33149	; 0x817d
   11ee0:	movt	r1, #2
   11ee4:	ldrb	r1, [r1]
   11ee8:	cmp	r1, #1
   11eec:	bne	11f2c <__assert_fail@plt+0xb78>
   11ef0:	movw	r0, #33151	; 0x817f
   11ef4:	movt	r0, #2
   11ef8:	ldrb	r0, [r0]
   11efc:	movw	r1, #33176	; 0x8198
   11f00:	movt	r1, #2
   11f04:	movw	r2, #33172	; 0x8194
   11f08:	movt	r2, #2
   11f0c:	cmp	r0, #0
   11f10:	movne	r2, r1
   11f14:	ldr	r0, [r2]
   11f18:	movw	r1, #33150	; 0x817e
   11f1c:	movt	r1, #2
   11f20:	ldrb	r1, [r1]
   11f24:	bl	125c4 <__assert_fail@plt+0x1210>
   11f28:	b	11f8c <__assert_fail@plt+0xbd8>
   11f2c:	movw	r1, #33154	; 0x8182
   11f30:	movt	r1, #2
   11f34:	ldrb	r1, [r1]
   11f38:	cmp	r1, #1
   11f3c:	bne	12000 <__assert_fail@plt+0xc4c>
   11f40:	movw	r1, #33172	; 0x8194
   11f44:	movt	r1, #2
   11f48:	ldr	r3, [r1]
   11f4c:	movw	r1, #33176	; 0x8198
   11f50:	movt	r1, #2
   11f54:	ldr	r2, [r1]
   11f58:	movw	r1, #33168	; 0x8190
   11f5c:	movt	r1, #2
   11f60:	ldr	r1, [r1]
   11f64:	ldrb	ip, [r5]
   11f68:	movw	r4, #33150	; 0x817e
   11f6c:	movt	r4, #2
   11f70:	ldrb	lr, [r4]
   11f74:	mov	r4, #32
   11f78:	cmp	ip, #0
   11f7c:	movwne	r4, #0
   11f80:	str	lr, [sp]
   11f84:	str	r4, [sp, #4]
   11f88:	bl	12450 <__assert_fail@plt+0x109c>
   11f8c:	movw	r1, #33040	; 0x8110
   11f90:	movt	r1, #2
   11f94:	ldrb	r2, [r1]
   11f98:	and	r0, r2, r0
   11f9c:	strb	r0, [r1]
   11fa0:	ldrb	r0, [r5]
   11fa4:	cmp	r0, #1
   11fa8:	bne	11fe4 <__assert_fail@plt+0xc30>
   11fac:	movw	r1, #33160	; 0x8188
   11fb0:	movt	r1, #2
   11fb4:	ldrb	r1, [r1]
   11fb8:	cmp	r1, #0
   11fbc:	beq	11fe4 <__assert_fail@plt+0xc30>
   11fc0:	movw	r1, #33154	; 0x8182
   11fc4:	movt	r1, #2
   11fc8:	ldrb	r1, [r1]
   11fcc:	cmp	r1, #0
   11fd0:	beq	11fe4 <__assert_fail@plt+0xc30>
   11fd4:	mov	r4, #0
   11fd8:	mov	r0, #0
   11fdc:	bl	113a8 <putchar_unlocked@plt>
   11fe0:	b	11ff0 <__assert_fail@plt+0xc3c>
   11fe4:	mov	r4, #10
   11fe8:	cmp	r0, #0
   11fec:	movwne	r4, #0
   11ff0:	mov	r0, r4
   11ff4:	sub	sp, fp, #8
   11ff8:	pop	{r4, r5, fp, lr}
   11ffc:	b	113a8 <putchar_unlocked@plt>
   12000:	movw	r1, #33148	; 0x817c
   12004:	movt	r1, #2
   12008:	ldrb	r1, [r1]
   1200c:	cmp	r1, #1
   12010:	bne	12034 <__assert_fail@plt+0xc80>
   12014:	movw	r0, #33140	; 0x8174
   12018:	movt	r0, #2
   1201c:	ldr	r1, [r0]
   12020:	movw	r0, #33156	; 0x8184
   12024:	movt	r0, #2
   12028:	ldr	r0, [r0]
   1202c:	bl	110f0 <fputs_unlocked@plt>
   12030:	b	11fa0 <__assert_fail@plt+0xbec>
   12034:	bl	120d8 <__assert_fail@plt+0xd24>
   12038:	b	11fa0 <__assert_fail@plt+0xbec>
   1203c:	push	{r4, r5, fp, lr}
   12040:	add	fp, sp, #8
   12044:	sub	sp, sp, #8
   12048:	str	r0, [sp, #4]
   1204c:	movw	r1, #33150	; 0x817e
   12050:	movt	r1, #2
   12054:	ldrb	r1, [r1]
   12058:	cmp	r1, #1
   1205c:	bne	120b8 <__assert_fail@plt+0xd04>
   12060:	bl	1112c <getpwuid@plt>
   12064:	cmp	r0, #0
   12068:	beq	12074 <__assert_fail@plt+0xcc0>
   1206c:	ldr	r0, [r0]
   12070:	b	120c0 <__assert_fail@plt+0xd0c>
   12074:	mov	r5, #0
   12078:	movw	r1, #26764	; 0x688c
   1207c:	movt	r1, #1
   12080:	mov	r0, #0
   12084:	mov	r2, #5
   12088:	bl	11180 <dcgettext@plt>
   1208c:	mov	r4, r0
   12090:	add	r0, sp, #4
   12094:	bl	12428 <__assert_fail@plt+0x1074>
   12098:	mov	r3, r0
   1209c:	mov	r0, #0
   120a0:	mov	r1, #0
   120a4:	mov	r2, r4
   120a8:	bl	1121c <error@plt>
   120ac:	movw	r0, #33040	; 0x8110
   120b0:	movt	r0, #2
   120b4:	strb	r5, [r0]
   120b8:	add	r0, sp, #4
   120bc:	bl	12428 <__assert_fail@plt+0x1074>
   120c0:	movw	r1, #33140	; 0x8174
   120c4:	movt	r1, #2
   120c8:	ldr	r1, [r1]
   120cc:	sub	sp, fp, #8
   120d0:	pop	{r4, r5, fp, lr}
   120d4:	b	110f0 <fputs_unlocked@plt>
   120d8:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   120dc:	add	fp, sp, #24
   120e0:	sub	sp, sp, #8
   120e4:	mov	r8, r0
   120e8:	movw	r1, #26811	; 0x68bb
   120ec:	movt	r1, #1
   120f0:	mov	r0, #0
   120f4:	mov	r2, #5
   120f8:	bl	11180 <dcgettext@plt>
   120fc:	mov	r5, r0
   12100:	movw	r7, #33168	; 0x8190
   12104:	movt	r7, #2
   12108:	mov	r0, r7
   1210c:	bl	12428 <__assert_fail@plt+0x1074>
   12110:	mov	r2, r0
   12114:	mov	r0, #1
   12118:	mov	r1, r5
   1211c:	bl	112f4 <__printf_chk@plt>
   12120:	ldr	r0, [r7]
   12124:	bl	1112c <getpwuid@plt>
   12128:	mov	r5, r0
   1212c:	cmp	r0, #0
   12130:	beq	12148 <__assert_fail@plt+0xd94>
   12134:	ldr	r2, [r5]
   12138:	movw	r1, #26796	; 0x68ac
   1213c:	movt	r1, #1
   12140:	mov	r0, #1
   12144:	bl	112f4 <__printf_chk@plt>
   12148:	movw	r1, #26801	; 0x68b1
   1214c:	movt	r1, #1
   12150:	mov	r0, #0
   12154:	mov	r2, #5
   12158:	bl	11180 <dcgettext@plt>
   1215c:	mov	r4, r0
   12160:	movw	r6, #33176	; 0x8198
   12164:	movt	r6, #2
   12168:	mov	r0, r6
   1216c:	bl	1243c <__assert_fail@plt+0x1088>
   12170:	mov	r2, r0
   12174:	mov	r0, #1
   12178:	mov	r1, r4
   1217c:	bl	112f4 <__printf_chk@plt>
   12180:	ldr	r0, [r6]
   12184:	bl	11390 <getgrgid@plt>
   12188:	cmp	r0, #0
   1218c:	beq	121a4 <__assert_fail@plt+0xdf0>
   12190:	ldr	r2, [r0]
   12194:	movw	r1, #26796	; 0x68ac
   12198:	movt	r1, #1
   1219c:	mov	r0, #1
   121a0:	bl	112f4 <__printf_chk@plt>
   121a4:	ldr	r0, [r7]
   121a8:	movw	r7, #33164	; 0x818c
   121ac:	movt	r7, #2
   121b0:	ldr	r1, [r7]
   121b4:	cmp	r1, r0
   121b8:	beq	1221c <__assert_fail@plt+0xe68>
   121bc:	mov	r5, #0
   121c0:	movw	r1, #26809	; 0x68b9
   121c4:	movt	r1, #1
   121c8:	mov	r0, #0
   121cc:	mov	r2, #5
   121d0:	bl	11180 <dcgettext@plt>
   121d4:	mov	r4, r0
   121d8:	mov	r0, r7
   121dc:	bl	12428 <__assert_fail@plt+0x1074>
   121e0:	mov	r2, r0
   121e4:	mov	r0, #1
   121e8:	mov	r1, r4
   121ec:	bl	112f4 <__printf_chk@plt>
   121f0:	ldr	r0, [r7]
   121f4:	bl	1112c <getpwuid@plt>
   121f8:	cmp	r0, #0
   121fc:	beq	1221c <__assert_fail@plt+0xe68>
   12200:	mov	r7, r0
   12204:	ldr	r2, [r0]
   12208:	movw	r1, #26796	; 0x68ac
   1220c:	movt	r1, #1
   12210:	mov	r0, #1
   12214:	bl	112f4 <__printf_chk@plt>
   12218:	mov	r5, r7
   1221c:	ldr	r0, [r6]
   12220:	movw	r6, #33172	; 0x8194
   12224:	movt	r6, #2
   12228:	ldr	r1, [r6]
   1222c:	cmp	r1, r0
   12230:	beq	12288 <__assert_fail@plt+0xed4>
   12234:	movw	r1, #26818	; 0x68c2
   12238:	movt	r1, #1
   1223c:	mov	r0, #0
   12240:	mov	r2, #5
   12244:	bl	11180 <dcgettext@plt>
   12248:	mov	r4, r0
   1224c:	mov	r0, r6
   12250:	bl	1243c <__assert_fail@plt+0x1088>
   12254:	mov	r2, r0
   12258:	mov	r0, #1
   1225c:	mov	r1, r4
   12260:	bl	112f4 <__printf_chk@plt>
   12264:	ldr	r0, [r6]
   12268:	bl	11390 <getgrgid@plt>
   1226c:	cmp	r0, #0
   12270:	beq	12288 <__assert_fail@plt+0xed4>
   12274:	ldr	r2, [r0]
   12278:	movw	r1, #26796	; 0x68ac
   1227c:	movt	r1, #1
   12280:	mov	r0, #1
   12284:	bl	112f4 <__printf_chk@plt>
   12288:	cmp	r8, #0
   1228c:	beq	1229c <__assert_fail@plt+0xee8>
   12290:	cmp	r5, #0
   12294:	beq	122a4 <__assert_fail@plt+0xef0>
   12298:	add	r6, r5, #12
   1229c:	ldr	r1, [r6]
   122a0:	b	122a8 <__assert_fail@plt+0xef4>
   122a4:	mvn	r1, #0
   122a8:	add	r2, sp, #4
   122ac:	mov	r0, r8
   122b0:	bl	1503c <__assert_fail@plt+0x3c88>
   122b4:	cmn	r0, #1
   122b8:	ble	123a4 <__assert_fail@plt+0xff0>
   122bc:	mov	r5, r0
   122c0:	cmp	r0, #0
   122c4:	beq	1235c <__assert_fail@plt+0xfa8>
   122c8:	mov	r6, #0
   122cc:	movw	r1, #26905	; 0x6919
   122d0:	movt	r1, #1
   122d4:	mov	r0, #0
   122d8:	mov	r2, #5
   122dc:	bl	11180 <dcgettext@plt>
   122e0:	movw	r7, #33140	; 0x8174
   122e4:	movt	r7, #2
   122e8:	ldr	r1, [r7]
   122ec:	bl	110f0 <fputs_unlocked@plt>
   122f0:	movw	r4, #26796	; 0x68ac
   122f4:	movt	r4, #1
   122f8:	cmp	r6, #0
   122fc:	bne	12318 <__assert_fail@plt+0xf64>
   12300:	b	12320 <__assert_fail@plt+0xf6c>
   12304:	add	r6, r6, #4
   12308:	subs	r5, r5, #1
   1230c:	beq	1235c <__assert_fail@plt+0xfa8>
   12310:	cmp	r6, #0
   12314:	beq	12320 <__assert_fail@plt+0xf6c>
   12318:	mov	r0, #44	; 0x2c
   1231c:	bl	113a8 <putchar_unlocked@plt>
   12320:	ldr	r0, [sp, #4]
   12324:	add	r0, r0, r6
   12328:	bl	1243c <__assert_fail@plt+0x1088>
   1232c:	ldr	r1, [r7]
   12330:	bl	110f0 <fputs_unlocked@plt>
   12334:	ldr	r0, [sp, #4]
   12338:	ldr	r0, [r0, r6]
   1233c:	bl	11390 <getgrgid@plt>
   12340:	cmp	r0, #0
   12344:	beq	12304 <__assert_fail@plt+0xf50>
   12348:	ldr	r2, [r0]
   1234c:	mov	r0, #1
   12350:	mov	r1, r4
   12354:	bl	112f4 <__printf_chk@plt>
   12358:	b	12304 <__assert_fail@plt+0xf50>
   1235c:	ldr	r0, [sp, #4]
   12360:	bl	12768 <__assert_fail@plt+0x13b4>
   12364:	movw	r4, #33156	; 0x8184
   12368:	movt	r4, #2
   1236c:	ldr	r0, [r4]
   12370:	cmp	r0, #0
   12374:	beq	1239c <__assert_fail@plt+0xfe8>
   12378:	movw	r1, #26914	; 0x6922
   1237c:	movt	r1, #1
   12380:	mov	r0, #0
   12384:	mov	r2, #5
   12388:	bl	11180 <dcgettext@plt>
   1238c:	mov	r1, r0
   12390:	ldr	r2, [r4]
   12394:	mov	r0, #1
   12398:	bl	112f4 <__printf_chk@plt>
   1239c:	sub	sp, fp, #24
   123a0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   123a4:	bl	112b8 <__errno_location@plt>
   123a8:	ldr	r5, [r0]
   123ac:	cmp	r8, #0
   123b0:	beq	123ec <__assert_fail@plt+0x1038>
   123b4:	movw	r1, #26827	; 0x68cb
   123b8:	movt	r1, #1
   123bc:	mov	r0, #0
   123c0:	mov	r2, #5
   123c4:	bl	11180 <dcgettext@plt>
   123c8:	mov	r4, r0
   123cc:	mov	r0, r8
   123d0:	bl	13fe0 <__assert_fail@plt+0x2c2c>
   123d4:	mov	r3, r0
   123d8:	mov	r0, #0
   123dc:	mov	r1, r5
   123e0:	mov	r2, r4
   123e4:	bl	1121c <error@plt>
   123e8:	b	12410 <__assert_fail@plt+0x105c>
   123ec:	movw	r1, #26860	; 0x68ec
   123f0:	movt	r1, #1
   123f4:	mov	r0, #0
   123f8:	mov	r2, #5
   123fc:	bl	11180 <dcgettext@plt>
   12400:	mov	r2, r0
   12404:	mov	r0, #0
   12408:	mov	r1, r5
   1240c:	bl	1121c <error@plt>
   12410:	movw	r0, #33040	; 0x8110
   12414:	movt	r0, #2
   12418:	mov	r1, #0
   1241c:	strb	r1, [r0]
   12420:	sub	sp, fp, #24
   12424:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   12428:	ldr	r0, [r0]
   1242c:	movw	r2, #33180	; 0x819c
   12430:	movt	r2, #2
   12434:	mov	r1, #0
   12438:	b	12790 <__assert_fail@plt+0x13dc>
   1243c:	ldr	r0, [r0]
   12440:	movw	r2, #33201	; 0x81b1
   12444:	movt	r2, #2
   12448:	mov	r1, #0
   1244c:	b	12790 <__assert_fail@plt+0x13dc>
   12450:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12454:	add	fp, sp, #28
   12458:	sub	sp, sp, #4
   1245c:	mov	r8, r3
   12460:	mov	r5, r2
   12464:	mov	r4, r0
   12468:	ldr	r9, [fp, #8]
   1246c:	cmp	r0, #0
   12470:	beq	12490 <__assert_fail@plt+0x10dc>
   12474:	mov	r0, r1
   12478:	bl	1112c <getpwuid@plt>
   1247c:	mov	r6, r0
   12480:	cmp	r0, #0
   12484:	mov	r7, r0
   12488:	movwne	r7, #1
   1248c:	b	12498 <__assert_fail@plt+0x10e4>
   12490:	mov	r6, #0
   12494:	mov	r7, #1
   12498:	ldr	sl, [fp, #12]
   1249c:	mov	r0, r5
   124a0:	mov	r1, r9
   124a4:	bl	125c4 <__assert_fail@plt+0x1210>
   124a8:	and	r7, r7, r0
   124ac:	cmp	r8, r5
   124b0:	beq	124cc <__assert_fail@plt+0x1118>
   124b4:	mov	r0, sl
   124b8:	bl	113a8 <putchar_unlocked@plt>
   124bc:	mov	r0, r8
   124c0:	mov	r1, r9
   124c4:	bl	125c4 <__assert_fail@plt+0x1210>
   124c8:	and	r7, r7, r0
   124cc:	cmp	r6, #0
   124d0:	mov	r1, r8
   124d4:	ldrne	r1, [r6, #12]
   124d8:	mov	r2, sp
   124dc:	mov	r0, r4
   124e0:	bl	1503c <__assert_fail@plt+0x3c88>
   124e4:	cmp	r0, #0
   124e8:	bmi	12548 <__assert_fail@plt+0x1194>
   124ec:	beq	1253c <__assert_fail@plt+0x1188>
   124f0:	mov	r6, r0
   124f4:	mov	r4, #0
   124f8:	b	12508 <__assert_fail@plt+0x1154>
   124fc:	add	r4, r4, #1
   12500:	cmp	r6, r4
   12504:	beq	1253c <__assert_fail@plt+0x1188>
   12508:	ldr	r0, [sp]
   1250c:	ldr	r0, [r0, r4, lsl #2]
   12510:	cmp	r0, r5
   12514:	cmpne	r0, r8
   12518:	beq	124fc <__assert_fail@plt+0x1148>
   1251c:	mov	r0, sl
   12520:	bl	113a8 <putchar_unlocked@plt>
   12524:	ldr	r0, [sp]
   12528:	ldr	r0, [r0, r4, lsl #2]
   1252c:	mov	r1, r9
   12530:	bl	125c4 <__assert_fail@plt+0x1210>
   12534:	and	r7, r7, r0
   12538:	b	124fc <__assert_fail@plt+0x1148>
   1253c:	ldr	r0, [sp]
   12540:	bl	12768 <__assert_fail@plt+0x13b4>
   12544:	b	125b8 <__assert_fail@plt+0x1204>
   12548:	bl	112b8 <__errno_location@plt>
   1254c:	ldr	r6, [r0]
   12550:	mov	r7, #0
   12554:	cmp	r4, #0
   12558:	beq	12594 <__assert_fail@plt+0x11e0>
   1255c:	movw	r1, #26827	; 0x68cb
   12560:	movt	r1, #1
   12564:	mov	r0, #0
   12568:	mov	r2, #5
   1256c:	bl	11180 <dcgettext@plt>
   12570:	mov	r5, r0
   12574:	mov	r0, r4
   12578:	bl	13fe0 <__assert_fail@plt+0x2c2c>
   1257c:	mov	r3, r0
   12580:	mov	r0, #0
   12584:	mov	r1, r6
   12588:	mov	r2, r5
   1258c:	bl	1121c <error@plt>
   12590:	b	125b8 <__assert_fail@plt+0x1204>
   12594:	movw	r1, #26860	; 0x68ec
   12598:	movt	r1, #1
   1259c:	mov	r0, #0
   125a0:	mov	r2, #5
   125a4:	bl	11180 <dcgettext@plt>
   125a8:	mov	r2, r0
   125ac:	mov	r0, #0
   125b0:	mov	r1, r6
   125b4:	bl	1121c <error@plt>
   125b8:	and	r0, r7, #1
   125bc:	sub	sp, fp, #28
   125c0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   125c4:	push	{r4, r5, fp, lr}
   125c8:	add	fp, sp, #8
   125cc:	sub	sp, sp, #8
   125d0:	str	r0, [sp, #4]
   125d4:	mov	r4, #1
   125d8:	cmp	r1, #0
   125dc:	beq	12628 <__assert_fail@plt+0x1274>
   125e0:	mov	r5, r0
   125e4:	bl	11390 <getgrgid@plt>
   125e8:	cmp	r0, #0
   125ec:	beq	125fc <__assert_fail@plt+0x1248>
   125f0:	ldr	r0, [r0]
   125f4:	mov	r4, #1
   125f8:	b	12630 <__assert_fail@plt+0x127c>
   125fc:	mov	r4, #0
   12600:	movw	r1, #27144	; 0x6a08
   12604:	movt	r1, #1
   12608:	mov	r0, #0
   1260c:	mov	r2, #5
   12610:	bl	11180 <dcgettext@plt>
   12614:	mov	r2, r0
   12618:	mov	r0, #0
   1261c:	mov	r1, #0
   12620:	mov	r3, r5
   12624:	bl	1121c <error@plt>
   12628:	add	r0, sp, #4
   1262c:	bl	1264c <__assert_fail@plt+0x1298>
   12630:	movw	r1, #33140	; 0x8174
   12634:	movt	r1, #2
   12638:	ldr	r1, [r1]
   1263c:	bl	110f0 <fputs_unlocked@plt>
   12640:	mov	r0, r4
   12644:	sub	sp, fp, #8
   12648:	pop	{r4, r5, fp, pc}
   1264c:	ldr	r0, [r0]
   12650:	movw	r2, #33222	; 0x81c6
   12654:	movt	r2, #2
   12658:	mov	r1, #0
   1265c:	b	12790 <__assert_fail@plt+0x13dc>
   12660:	movw	r1, #33244	; 0x81dc
   12664:	movt	r1, #2
   12668:	str	r0, [r1]
   1266c:	bx	lr
   12670:	movw	r1, #33248	; 0x81e0
   12674:	movt	r1, #2
   12678:	strb	r0, [r1]
   1267c:	bx	lr
   12680:	push	{r4, r5, r6, sl, fp, lr}
   12684:	add	fp, sp, #16
   12688:	sub	sp, sp, #8
   1268c:	movw	r0, #33140	; 0x8174
   12690:	movt	r0, #2
   12694:	ldr	r0, [r0]
   12698:	bl	15970 <__assert_fail@plt+0x45bc>
   1269c:	cmp	r0, #0
   126a0:	beq	126c8 <__assert_fail@plt+0x1314>
   126a4:	movw	r0, #33248	; 0x81e0
   126a8:	movt	r0, #2
   126ac:	ldrb	r0, [r0]
   126b0:	cmp	r0, #0
   126b4:	beq	126e8 <__assert_fail@plt+0x1334>
   126b8:	bl	112b8 <__errno_location@plt>
   126bc:	ldr	r0, [r0]
   126c0:	cmp	r0, #32
   126c4:	bne	126e8 <__assert_fail@plt+0x1334>
   126c8:	movw	r0, #33136	; 0x8170
   126cc:	movt	r0, #2
   126d0:	ldr	r0, [r0]
   126d4:	bl	15970 <__assert_fail@plt+0x45bc>
   126d8:	cmp	r0, #0
   126dc:	subeq	sp, fp, #16
   126e0:	popeq	{r4, r5, r6, sl, fp, pc}
   126e4:	b	12758 <__assert_fail@plt+0x13a4>
   126e8:	movw	r1, #27193	; 0x6a39
   126ec:	movt	r1, #1
   126f0:	mov	r0, #0
   126f4:	mov	r2, #5
   126f8:	bl	11180 <dcgettext@plt>
   126fc:	mov	r4, r0
   12700:	movw	r0, #33244	; 0x81dc
   12704:	movt	r0, #2
   12708:	ldr	r6, [r0]
   1270c:	bl	112b8 <__errno_location@plt>
   12710:	ldr	r5, [r0]
   12714:	cmp	r6, #0
   12718:	bne	12734 <__assert_fail@plt+0x1380>
   1271c:	movw	r2, #27209	; 0x6a49
   12720:	movt	r2, #1
   12724:	mov	r0, #0
   12728:	mov	r1, r5
   1272c:	mov	r3, r4
   12730:	b	12754 <__assert_fail@plt+0x13a0>
   12734:	mov	r0, r6
   12738:	bl	13e90 <__assert_fail@plt+0x2adc>
   1273c:	mov	r3, r0
   12740:	str	r4, [sp]
   12744:	movw	r2, #27205	; 0x6a45
   12748:	movt	r2, #1
   1274c:	mov	r0, #0
   12750:	mov	r1, r5
   12754:	bl	1121c <error@plt>
   12758:	movw	r0, #33048	; 0x8118
   1275c:	movt	r0, #2
   12760:	ldr	r0, [r0]
   12764:	bl	1115c <_exit@plt>
   12768:	push	{r4, r5, r6, sl, fp, lr}
   1276c:	add	fp, sp, #16
   12770:	mov	r4, r0
   12774:	bl	112b8 <__errno_location@plt>
   12778:	mov	r5, r0
   1277c:	ldr	r6, [r0]
   12780:	mov	r0, r4
   12784:	bl	11150 <free@plt>
   12788:	str	r6, [r5]
   1278c:	pop	{r4, r5, r6, sl, fp, pc}
   12790:	push	{r4, r5, r6, sl, fp, lr}
   12794:	add	fp, sp, #16
   12798:	mov	r4, r1
   1279c:	mov	r5, r0
   127a0:	mov	r0, #0
   127a4:	strb	r0, [r2, #20]
   127a8:	add	r6, r2, #19
   127ac:	mov	r0, r5
   127b0:	mov	r1, r4
   127b4:	mov	r2, #10
   127b8:	mov	r3, #0
   127bc:	bl	15ff0 <__assert_fail@plt+0x4c3c>
   127c0:	add	r2, r0, r0, lsl #2
   127c4:	sub	r2, r5, r2, lsl #1
   127c8:	orr	r2, r2, #48	; 0x30
   127cc:	strb	r2, [r6], #-1
   127d0:	rsbs	r2, r5, #9
   127d4:	rscs	r2, r4, #0
   127d8:	mov	r5, r0
   127dc:	mov	r4, r1
   127e0:	bcc	127ac <__assert_fail@plt+0x13f8>
   127e4:	add	r0, r6, #1
   127e8:	pop	{r4, r5, r6, sl, fp, pc}
   127ec:	push	{r4, r5, fp, lr}
   127f0:	add	fp, sp, #8
   127f4:	cmp	r0, #0
   127f8:	beq	1288c <__assert_fail@plt+0x14d8>
   127fc:	mov	r4, r0
   12800:	mov	r1, #47	; 0x2f
   12804:	bl	11348 <strrchr@plt>
   12808:	cmp	r0, #0
   1280c:	mov	r5, r4
   12810:	addne	r5, r0, #1
   12814:	sub	r0, r5, r4
   12818:	cmp	r0, #7
   1281c:	blt	12870 <__assert_fail@plt+0x14bc>
   12820:	sub	r0, r5, #7
   12824:	movw	r1, #27268	; 0x6a84
   12828:	movt	r1, #1
   1282c:	mov	r2, #7
   12830:	bl	11378 <strncmp@plt>
   12834:	cmp	r0, #0
   12838:	bne	12870 <__assert_fail@plt+0x14bc>
   1283c:	movw	r1, #27276	; 0x6a8c
   12840:	movt	r1, #1
   12844:	mov	r0, r5
   12848:	mov	r2, #3
   1284c:	bl	11378 <strncmp@plt>
   12850:	cmp	r0, #0
   12854:	beq	12860 <__assert_fail@plt+0x14ac>
   12858:	mov	r4, r5
   1285c:	b	12870 <__assert_fail@plt+0x14bc>
   12860:	add	r4, r5, #3
   12864:	movw	r0, #33120	; 0x8160
   12868:	movt	r0, #2
   1286c:	str	r4, [r0]
   12870:	movw	r0, #33124	; 0x8164
   12874:	movt	r0, #2
   12878:	str	r4, [r0]
   1287c:	movw	r0, #33252	; 0x81e4
   12880:	movt	r0, #2
   12884:	str	r4, [r0]
   12888:	pop	{r4, r5, fp, pc}
   1288c:	movw	r0, #33136	; 0x8170
   12890:	movt	r0, #2
   12894:	ldr	r3, [r0]
   12898:	movw	r0, #27212	; 0x6a4c
   1289c:	movt	r0, #1
   128a0:	mov	r1, #55	; 0x37
   128a4:	mov	r2, #1
   128a8:	bl	111c8 <fwrite@plt>
   128ac:	bl	11384 <abort@plt>
   128b0:	push	{r4, r5, r6, sl, fp, lr}
   128b4:	add	fp, sp, #16
   128b8:	mov	r4, r0
   128bc:	movw	r0, #33256	; 0x81e8
   128c0:	movt	r0, #2
   128c4:	cmp	r4, #0
   128c8:	moveq	r4, r0
   128cc:	bl	112b8 <__errno_location@plt>
   128d0:	mov	r5, r0
   128d4:	ldr	r6, [r0]
   128d8:	mov	r0, r4
   128dc:	mov	r1, #48	; 0x30
   128e0:	bl	14f58 <__assert_fail@plt+0x3ba4>
   128e4:	str	r6, [r5]
   128e8:	pop	{r4, r5, r6, sl, fp, pc}
   128ec:	movw	r1, #33256	; 0x81e8
   128f0:	movt	r1, #2
   128f4:	cmp	r0, #0
   128f8:	movne	r1, r0
   128fc:	ldr	r0, [r1]
   12900:	bx	lr
   12904:	movw	r2, #33256	; 0x81e8
   12908:	movt	r2, #2
   1290c:	cmp	r0, #0
   12910:	movne	r2, r0
   12914:	str	r1, [r2]
   12918:	bx	lr
   1291c:	movw	r3, #33256	; 0x81e8
   12920:	movt	r3, #2
   12924:	cmp	r0, #0
   12928:	movne	r3, r0
   1292c:	ubfx	r0, r1, #5, #3
   12930:	add	ip, r3, r0, lsl #2
   12934:	ldr	r3, [ip, #8]
   12938:	and	r1, r1, #31
   1293c:	mov	r0, #1
   12940:	and	r0, r0, r3, lsr r1
   12944:	and	r2, r2, #1
   12948:	eor	r2, r0, r2
   1294c:	eor	r1, r3, r2, lsl r1
   12950:	str	r1, [ip, #8]
   12954:	bx	lr
   12958:	movw	r2, #33256	; 0x81e8
   1295c:	movt	r2, #2
   12960:	cmp	r0, #0
   12964:	movne	r2, r0
   12968:	ldr	r0, [r2, #4]
   1296c:	str	r1, [r2, #4]
   12970:	bx	lr
   12974:	push	{fp, lr}
   12978:	mov	fp, sp
   1297c:	movw	r3, #33256	; 0x81e8
   12980:	movt	r3, #2
   12984:	cmp	r0, #0
   12988:	movne	r3, r0
   1298c:	mov	r0, #10
   12990:	str	r0, [r3]
   12994:	cmp	r1, #0
   12998:	cmpne	r2, #0
   1299c:	bne	129a4 <__assert_fail@plt+0x15f0>
   129a0:	bl	11384 <abort@plt>
   129a4:	str	r1, [r3, #40]	; 0x28
   129a8:	str	r2, [r3, #44]	; 0x2c
   129ac:	pop	{fp, pc}
   129b0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   129b4:	add	fp, sp, #28
   129b8:	sub	sp, sp, #20
   129bc:	mov	r8, r3
   129c0:	mov	r9, r2
   129c4:	mov	sl, r1
   129c8:	mov	r7, r0
   129cc:	ldr	r0, [fp, #8]
   129d0:	movw	r5, #33256	; 0x81e8
   129d4:	movt	r5, #2
   129d8:	cmp	r0, #0
   129dc:	movne	r5, r0
   129e0:	bl	112b8 <__errno_location@plt>
   129e4:	mov	r4, r0
   129e8:	ldm	r5, {r0, r1}
   129ec:	ldr	r2, [r5, #40]	; 0x28
   129f0:	ldr	r3, [r5, #44]	; 0x2c
   129f4:	ldr	r6, [r4]
   129f8:	add	r5, r5, #8
   129fc:	stm	sp, {r0, r1, r5}
   12a00:	str	r2, [sp, #12]
   12a04:	str	r3, [sp, #16]
   12a08:	mov	r0, r7
   12a0c:	mov	r1, sl
   12a10:	mov	r2, r9
   12a14:	mov	r3, r8
   12a18:	bl	12a28 <__assert_fail@plt+0x1674>
   12a1c:	str	r6, [r4]
   12a20:	sub	sp, fp, #28
   12a24:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12a28:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12a2c:	add	fp, sp, #28
   12a30:	sub	sp, sp, #156	; 0x9c
   12a34:	mov	r9, r3
   12a38:	mov	r7, r1
   12a3c:	mov	r6, r0
   12a40:	str	r2, [fp, #-80]	; 0xffffffb0
   12a44:	add	r0, r2, #1
   12a48:	str	r0, [sp, #76]	; 0x4c
   12a4c:	ldr	r0, [fp, #12]
   12a50:	and	r1, r0, #1
   12a54:	str	r1, [sp, #40]	; 0x28
   12a58:	and	r1, r0, #4
   12a5c:	str	r1, [sp, #36]	; 0x24
   12a60:	ubfx	r4, r0, #1, #1
   12a64:	bl	111e0 <__ctype_get_mb_cur_max@plt>
   12a68:	str	r0, [sp, #44]	; 0x2c
   12a6c:	ldr	r0, [fp, #24]
   12a70:	str	r0, [sp, #88]	; 0x58
   12a74:	ldr	r0, [fp, #20]
   12a78:	str	r0, [sp, #80]	; 0x50
   12a7c:	ldr	r1, [fp, #8]
   12a80:	mov	r0, #0
   12a84:	str	r0, [sp, #84]	; 0x54
   12a88:	mov	r0, #0
   12a8c:	str	r0, [fp, #-84]	; 0xffffffac
   12a90:	mov	r0, #0
   12a94:	str	r0, [fp, #-72]	; 0xffffffb8
   12a98:	mov	r0, #0
   12a9c:	mov	r2, #0
   12aa0:	str	r2, [fp, #-56]	; 0xffffffc8
   12aa4:	mov	r2, #0
   12aa8:	str	r2, [sp, #64]	; 0x40
   12aac:	mov	r2, #1
   12ab0:	str	r2, [fp, #-48]	; 0xffffffd0
   12ab4:	cmp	r1, #10
   12ab8:	bhi	139e4 <__assert_fail@plt+0x2630>
   12abc:	mov	sl, r7
   12ac0:	mov	r7, r1
   12ac4:	add	r1, pc, #24
   12ac8:	mov	r8, #0
   12acc:	mov	r2, #1
   12ad0:	mov	r3, #0
   12ad4:	ldr	ip, [fp, #-80]	; 0xffffffb0
   12ad8:	mov	lr, r9
   12adc:	mov	r5, r6
   12ae0:	ldr	pc, [r1, r7, lsl #2]
   12ae4:			; <UNDEFINED> instruction: 0x00012bb8
   12ae8:	strdeq	r2, [r1], -r8
   12aec:	andeq	r2, r1, r8, asr #23
   12af0:			; <UNDEFINED> instruction: 0x00012bb0
   12af4:	andeq	r2, r1, ip, ror #23
   12af8:	andeq	r2, r1, ip, asr #24
   12afc:	ldrdeq	r2, [r1], -r8
   12b00:	andeq	r2, r1, r8, lsr #25
   12b04:	andeq	r2, r1, r0, lsl fp
   12b08:	andeq	r2, r1, r0, lsl fp
   12b0c:	andeq	r2, r1, ip, lsr fp
   12b10:	movw	r0, #27358	; 0x6ade
   12b14:	movt	r0, #1
   12b18:	mov	r1, r7
   12b1c:	bl	13fec <__assert_fail@plt+0x2c38>
   12b20:	str	r0, [sp, #80]	; 0x50
   12b24:	movw	r0, #27360	; 0x6ae0
   12b28:	movt	r0, #1
   12b2c:	mov	r1, r7
   12b30:	bl	13fec <__assert_fail@plt+0x2c38>
   12b34:	mov	r5, r6
   12b38:	str	r0, [sp, #88]	; 0x58
   12b3c:	mov	r8, #0
   12b40:	tst	r4, #1
   12b44:	str	r7, [fp, #-64]	; 0xffffffc0
   12b48:	bne	12b80 <__assert_fail@plt+0x17cc>
   12b4c:	ldr	r0, [sp, #80]	; 0x50
   12b50:	ldrb	r0, [r0]
   12b54:	cmp	r0, #0
   12b58:	beq	12b80 <__assert_fail@plt+0x17cc>
   12b5c:	ldr	r1, [sp, #80]	; 0x50
   12b60:	add	r1, r1, #1
   12b64:	mov	r8, #0
   12b68:	cmp	r8, sl
   12b6c:	strbcc	r0, [r5, r8]
   12b70:	ldrb	r0, [r1, r8]
   12b74:	add	r8, r8, #1
   12b78:	cmp	r0, #0
   12b7c:	bne	12b68 <__assert_fail@plt+0x17b4>
   12b80:	ldr	r7, [sp, #88]	; 0x58
   12b84:	mov	r0, r7
   12b88:	bl	112a0 <strlen@plt>
   12b8c:	mov	r5, r6
   12b90:	str	r0, [fp, #-72]	; 0xffffffb8
   12b94:	str	r7, [fp, #-84]	; 0xffffffac
   12b98:	mov	r2, #1
   12b9c:	mov	r3, r4
   12ba0:	ldr	ip, [fp, #-80]	; 0xffffffb0
   12ba4:	mov	lr, r9
   12ba8:	ldr	r7, [fp, #-64]	; 0xffffffc0
   12bac:	b	12ca8 <__assert_fail@plt+0x18f4>
   12bb0:	mov	r0, #1
   12bb4:	b	12bf8 <__assert_fail@plt+0x1844>
   12bb8:	mov	r7, #0
   12bbc:	mov	r8, #0
   12bc0:	mov	r2, r0
   12bc4:	b	12ca4 <__assert_fail@plt+0x18f0>
   12bc8:	tst	r4, #1
   12bcc:	bne	12bf8 <__assert_fail@plt+0x1844>
   12bd0:	mov	r2, r0
   12bd4:	b	12c20 <__assert_fail@plt+0x186c>
   12bd8:	mov	r0, #1
   12bdc:	str	r0, [fp, #-72]	; 0xffffffb8
   12be0:	mov	r8, #0
   12be4:	mov	r7, #5
   12be8:	b	12c64 <__assert_fail@plt+0x18b0>
   12bec:	mov	r2, #1
   12bf0:	tst	r4, #1
   12bf4:	beq	12c20 <__assert_fail@plt+0x186c>
   12bf8:	mov	r1, #1
   12bfc:	str	r1, [fp, #-72]	; 0xffffffb8
   12c00:	mov	r8, #0
   12c04:	mov	r7, #2
   12c08:	movw	r1, #27360	; 0x6ae0
   12c0c:	movt	r1, #1
   12c10:	str	r1, [fp, #-84]	; 0xffffffac
   12c14:	mov	r2, r0
   12c18:	mov	r3, #1
   12c1c:	b	12ca8 <__assert_fail@plt+0x18f4>
   12c20:	mov	r8, #1
   12c24:	mov	r7, #2
   12c28:	cmp	sl, #0
   12c2c:	movne	r0, #39	; 0x27
   12c30:	strbne	r0, [r5]
   12c34:	movw	r0, #27360	; 0x6ae0
   12c38:	movt	r0, #1
   12c3c:	str	r0, [fp, #-84]	; 0xffffffac
   12c40:	mov	r0, #1
   12c44:	str	r0, [fp, #-72]	; 0xffffffb8
   12c48:	b	12ca4 <__assert_fail@plt+0x18f0>
   12c4c:	mov	r7, #5
   12c50:	tst	r4, #1
   12c54:	beq	12c7c <__assert_fail@plt+0x18c8>
   12c58:	mov	r0, #1
   12c5c:	str	r0, [fp, #-72]	; 0xffffffb8
   12c60:	mov	r8, #0
   12c64:	movw	r0, #27356	; 0x6adc
   12c68:	movt	r0, #1
   12c6c:	str	r0, [fp, #-84]	; 0xffffffac
   12c70:	mov	r2, #1
   12c74:	mov	r3, #1
   12c78:	b	12ca8 <__assert_fail@plt+0x18f4>
   12c7c:	cmp	sl, #0
   12c80:	movne	r0, #34	; 0x22
   12c84:	strbne	r0, [r5]
   12c88:	mov	r8, #1
   12c8c:	movw	r0, #27356	; 0x6adc
   12c90:	movt	r0, #1
   12c94:	str	r0, [fp, #-84]	; 0xffffffac
   12c98:	mov	r0, #1
   12c9c:	str	r0, [fp, #-72]	; 0xffffffb8
   12ca0:	mov	r2, #1
   12ca4:	mov	r3, #0
   12ca8:	ldr	r0, [fp, #-72]	; 0xffffffb8
   12cac:	cmp	r0, #0
   12cb0:	movwne	r0, #1
   12cb4:	and	r1, r0, r3
   12cb8:	and	r1, r2, r1
   12cbc:	str	r1, [sp, #56]	; 0x38
   12cc0:	sub	r1, r7, #2
   12cc4:	clz	r1, r1
   12cc8:	lsr	r1, r1, #5
   12ccc:	and	r1, r1, r3
   12cd0:	str	r1, [sp, #68]	; 0x44
   12cd4:	str	r7, [fp, #-64]	; 0xffffffc0
   12cd8:	subs	r1, r7, #2
   12cdc:	movwne	r1, #1
   12ce0:	eor	r4, r3, #1
   12ce4:	str	r4, [fp, #-88]	; 0xffffffa8
   12ce8:	orr	r4, r1, r4
   12cec:	str	r4, [sp, #72]	; 0x48
   12cf0:	and	r1, r1, r2
   12cf4:	and	r0, r0, r1
   12cf8:	str	r0, [fp, #-60]	; 0xffffffc4
   12cfc:	str	r3, [fp, #-76]	; 0xffffffb4
   12d00:	orr	r0, r1, r3
   12d04:	eor	r0, r0, #1
   12d08:	ldr	r1, [fp, #16]
   12d0c:	clz	r1, r1
   12d10:	lsr	r1, r1, #5
   12d14:	orr	r0, r1, r0
   12d18:	str	r0, [fp, #-68]	; 0xffffffbc
   12d1c:	str	r2, [sp, #92]	; 0x5c
   12d20:	eor	r0, r2, #1
   12d24:	str	r0, [sp, #60]	; 0x3c
   12d28:	mov	r7, #0
   12d2c:	cmn	lr, #1
   12d30:	beq	12d40 <__assert_fail@plt+0x198c>
   12d34:	cmp	r7, lr
   12d38:	bne	12d4c <__assert_fail@plt+0x1998>
   12d3c:	b	13858 <__assert_fail@plt+0x24a4>
   12d40:	ldrb	r0, [ip, r7]
   12d44:	cmp	r0, #0
   12d48:	beq	13858 <__assert_fail@plt+0x24a4>
   12d4c:	mov	r9, #0
   12d50:	ldr	r0, [fp, #-60]	; 0xffffffc4
   12d54:	cmp	r0, #0
   12d58:	beq	12d8c <__assert_fail@plt+0x19d8>
   12d5c:	ldr	r0, [fp, #-72]	; 0xffffffb8
   12d60:	add	r4, r7, r0
   12d64:	cmp	r0, #2
   12d68:	bcc	12d84 <__assert_fail@plt+0x19d0>
   12d6c:	cmn	lr, #1
   12d70:	bne	12d84 <__assert_fail@plt+0x19d0>
   12d74:	mov	r0, ip
   12d78:	bl	112a0 <strlen@plt>
   12d7c:	ldr	ip, [fp, #-80]	; 0xffffffb0
   12d80:	mov	lr, r0
   12d84:	cmp	r4, lr
   12d88:	bls	12d98 <__assert_fail@plt+0x19e4>
   12d8c:	mov	r0, #0
   12d90:	str	r0, [fp, #-52]	; 0xffffffcc
   12d94:	b	12ddc <__assert_fail@plt+0x1a28>
   12d98:	mov	r4, lr
   12d9c:	add	r0, ip, r7
   12da0:	ldr	r1, [fp, #-84]	; 0xffffffac
   12da4:	ldr	r2, [fp, #-72]	; 0xffffffb8
   12da8:	bl	11288 <bcmp@plt>
   12dac:	cmp	r0, #0
   12db0:	mov	r1, r0
   12db4:	movwne	r1, #1
   12db8:	ldr	r2, [fp, #-88]	; 0xffffffa8
   12dbc:	orr	r1, r1, r2
   12dc0:	tst	r1, #1
   12dc4:	beq	1392c <__assert_fail@plt+0x2578>
   12dc8:	clz	r0, r0
   12dcc:	lsr	r0, r0, #5
   12dd0:	str	r0, [fp, #-52]	; 0xffffffcc
   12dd4:	ldr	ip, [fp, #-80]	; 0xffffffb0
   12dd8:	mov	lr, r4
   12ddc:	ldrb	r4, [ip, r7]
   12de0:	cmp	r4, #126	; 0x7e
   12de4:	bhi	13314 <__assert_fail@plt+0x1f60>
   12de8:	mov	r6, #1
   12dec:	mov	r2, #110	; 0x6e
   12df0:	mov	r0, #97	; 0x61
   12df4:	add	r3, pc, #4
   12df8:	mov	r1, #0
   12dfc:	ldr	pc, [r3, r4, lsl #2]
   12e00:	andeq	r3, r1, r4, ror r1
   12e04:	andeq	r3, r1, r4, lsl r3
   12e08:	andeq	r3, r1, r4, lsl r3
   12e0c:	andeq	r3, r1, r4, lsl r3
   12e10:	andeq	r3, r1, r4, lsl r3
   12e14:	andeq	r3, r1, r4, lsl r3
   12e18:	andeq	r3, r1, r4, lsl r3
   12e1c:	andeq	r3, r1, r8, ror #7
   12e20:	andeq	r3, r1, r4, asr r1
   12e24:	andeq	r3, r1, ip, asr #2
   12e28:	andeq	r3, r1, r0, ror #2
   12e2c:	andeq	r3, r1, ip, ror r2
   12e30:	andeq	r3, r1, r4, asr #2
   12e34:	andeq	r3, r1, ip, asr r1
   12e38:	andeq	r3, r1, r4, lsl r3
   12e3c:	andeq	r3, r1, r4, lsl r3
   12e40:	andeq	r3, r1, r4, lsl r3
   12e44:	andeq	r3, r1, r4, lsl r3
   12e48:	andeq	r3, r1, r4, lsl r3
   12e4c:	andeq	r3, r1, r4, lsl r3
   12e50:	andeq	r3, r1, r4, lsl r3
   12e54:	andeq	r3, r1, r4, lsl r3
   12e58:	andeq	r3, r1, r4, lsl r3
   12e5c:	andeq	r3, r1, r4, lsl r3
   12e60:	andeq	r3, r1, r4, lsl r3
   12e64:	andeq	r3, r1, r4, lsl r3
   12e68:	andeq	r3, r1, r4, lsl r3
   12e6c:	andeq	r3, r1, r4, lsl r3
   12e70:	andeq	r3, r1, r4, lsl r3
   12e74:	andeq	r3, r1, r4, lsl r3
   12e78:	andeq	r3, r1, r4, lsl r3
   12e7c:	andeq	r3, r1, r4, lsl r3
   12e80:	strdeq	r3, [r1], -r8
   12e84:	strdeq	r3, [r1], -ip
   12e88:	strdeq	r3, [r1], -ip
   12e8c:	andeq	r3, r1, r4, ror #1
   12e90:	strdeq	r3, [r1], -ip
   12e94:	strdeq	r2, [r1], -ip
   12e98:	strdeq	r3, [r1], -ip
   12e9c:	andeq	r3, r1, r4, lsl #5
   12ea0:	strdeq	r3, [r1], -ip
   12ea4:	strdeq	r3, [r1], -ip
   12ea8:	strdeq	r3, [r1], -ip
   12eac:	strdeq	r2, [r1], -ip
   12eb0:	strdeq	r2, [r1], -ip
   12eb4:	strdeq	r2, [r1], -ip
   12eb8:	strdeq	r2, [r1], -ip
   12ebc:	strdeq	r2, [r1], -ip
   12ec0:	strdeq	r2, [r1], -ip
   12ec4:	strdeq	r2, [r1], -ip
   12ec8:	strdeq	r2, [r1], -ip
   12ecc:	strdeq	r2, [r1], -ip
   12ed0:	strdeq	r2, [r1], -ip
   12ed4:	strdeq	r2, [r1], -ip
   12ed8:	strdeq	r2, [r1], -ip
   12edc:	strdeq	r2, [r1], -ip
   12ee0:	strdeq	r2, [r1], -ip
   12ee4:	strdeq	r2, [r1], -ip
   12ee8:	strdeq	r2, [r1], -ip
   12eec:	strdeq	r3, [r1], -ip
   12ef0:	strdeq	r3, [r1], -ip
   12ef4:	strdeq	r3, [r1], -ip
   12ef8:	strdeq	r3, [r1], -ip
   12efc:	andeq	r3, r1, ip, asr #4
   12f00:	andeq	r3, r1, r4, lsl r3
   12f04:	strdeq	r2, [r1], -ip
   12f08:	strdeq	r2, [r1], -ip
   12f0c:	strdeq	r2, [r1], -ip
   12f10:	strdeq	r2, [r1], -ip
   12f14:	strdeq	r2, [r1], -ip
   12f18:	strdeq	r2, [r1], -ip
   12f1c:	strdeq	r2, [r1], -ip
   12f20:	strdeq	r2, [r1], -ip
   12f24:	strdeq	r2, [r1], -ip
   12f28:	strdeq	r2, [r1], -ip
   12f2c:	strdeq	r2, [r1], -ip
   12f30:	strdeq	r2, [r1], -ip
   12f34:	strdeq	r2, [r1], -ip
   12f38:	strdeq	r2, [r1], -ip
   12f3c:	strdeq	r2, [r1], -ip
   12f40:	strdeq	r2, [r1], -ip
   12f44:	strdeq	r2, [r1], -ip
   12f48:	strdeq	r2, [r1], -ip
   12f4c:	strdeq	r2, [r1], -ip
   12f50:	strdeq	r2, [r1], -ip
   12f54:	strdeq	r2, [r1], -ip
   12f58:	strdeq	r2, [r1], -ip
   12f5c:	strdeq	r2, [r1], -ip
   12f60:	strdeq	r2, [r1], -ip
   12f64:	strdeq	r2, [r1], -ip
   12f68:	strdeq	r2, [r1], -ip
   12f6c:	strdeq	r3, [r1], -ip
   12f70:	andeq	r3, r1, r4, lsr #2
   12f74:	strdeq	r2, [r1], -ip
   12f78:	strdeq	r3, [r1], -ip
   12f7c:	strdeq	r2, [r1], -ip
   12f80:	strdeq	r3, [r1], -ip
   12f84:	strdeq	r2, [r1], -ip
   12f88:	strdeq	r2, [r1], -ip
   12f8c:	strdeq	r2, [r1], -ip
   12f90:	strdeq	r2, [r1], -ip
   12f94:	strdeq	r2, [r1], -ip
   12f98:	strdeq	r2, [r1], -ip
   12f9c:	strdeq	r2, [r1], -ip
   12fa0:	strdeq	r2, [r1], -ip
   12fa4:	strdeq	r2, [r1], -ip
   12fa8:	strdeq	r2, [r1], -ip
   12fac:	strdeq	r2, [r1], -ip
   12fb0:	strdeq	r2, [r1], -ip
   12fb4:	strdeq	r2, [r1], -ip
   12fb8:	strdeq	r2, [r1], -ip
   12fbc:	strdeq	r2, [r1], -ip
   12fc0:	strdeq	r2, [r1], -ip
   12fc4:	strdeq	r2, [r1], -ip
   12fc8:	strdeq	r2, [r1], -ip
   12fcc:	strdeq	r2, [r1], -ip
   12fd0:	strdeq	r2, [r1], -ip
   12fd4:	strdeq	r2, [r1], -ip
   12fd8:	strdeq	r2, [r1], -ip
   12fdc:	strdeq	r2, [r1], -ip
   12fe0:	strdeq	r2, [r1], -ip
   12fe4:	strdeq	r2, [r1], -ip
   12fe8:	strdeq	r2, [r1], -ip
   12fec:	strheq	r3, [r1], -r8
   12ff0:	strdeq	r3, [r1], -ip
   12ff4:	strheq	r3, [r1], -r8
   12ff8:	andeq	r3, r1, r4, ror #1
   12ffc:	ldr	r0, [fp, #-68]	; 0xffffffbc
   13000:	tst	r0, #1
   13004:	bne	13030 <__assert_fail@plt+0x1c7c>
   13008:	ubfx	r0, r4, #5, #3
   1300c:	ldr	r1, [fp, #16]
   13010:	ldr	r0, [r1, r0, lsl #2]
   13014:	and	r1, r4, #31
   13018:	mov	r2, #1
   1301c:	tst	r0, r2, lsl r1
   13020:	beq	13030 <__assert_fail@plt+0x1c7c>
   13024:	mov	r0, r4
   13028:	mov	r1, r6
   1302c:	b	13044 <__assert_fail@plt+0x1c90>
   13030:	ldr	r0, [fp, #-52]	; 0xffffffcc
   13034:	cmp	r0, #0
   13038:	mov	r0, r4
   1303c:	mov	r1, r6
   13040:	beq	1337c <__assert_fail@plt+0x1fc8>
   13044:	ldr	r2, [fp, #-76]	; 0xffffffb4
   13048:	tst	r2, #1
   1304c:	bne	13940 <__assert_fail@plt+0x258c>
   13050:	ldr	r2, [fp, #-64]	; 0xffffffc0
   13054:	subs	r2, r2, #2
   13058:	movwne	r2, #1
   1305c:	ldr	r3, [fp, #-56]	; 0xffffffc8
   13060:	orr	r2, r2, r3
   13064:	tst	r2, #1
   13068:	bne	130a4 <__assert_fail@plt+0x1cf0>
   1306c:	cmp	r8, sl
   13070:	movcc	r2, #39	; 0x27
   13074:	strbcc	r2, [r5, r8]
   13078:	add	r2, r8, #1
   1307c:	cmp	r2, sl
   13080:	movcc	r3, #36	; 0x24
   13084:	strbcc	r3, [r5, r2]
   13088:	add	r2, r8, #2
   1308c:	cmp	r2, sl
   13090:	movcc	r3, #39	; 0x27
   13094:	strbcc	r3, [r5, r2]
   13098:	add	r8, r8, #3
   1309c:	mov	r2, #1
   130a0:	str	r2, [fp, #-56]	; 0xffffffc8
   130a4:	cmp	r8, sl
   130a8:	movcc	r2, #92	; 0x5c
   130ac:	strbcc	r2, [r5, r8]
   130b0:	add	r8, r8, #1
   130b4:	b	133c0 <__assert_fail@plt+0x200c>
   130b8:	cmp	lr, #1
   130bc:	beq	130e4 <__assert_fail@plt+0x1d30>
   130c0:	mov	r6, #0
   130c4:	cmn	lr, #1
   130c8:	bne	130f0 <__assert_fail@plt+0x1d3c>
   130cc:	ldrb	r0, [ip, #1]
   130d0:	cmp	r0, #0
   130d4:	beq	130e4 <__assert_fail@plt+0x1d30>
   130d8:	mvn	lr, #0
   130dc:	mov	r9, #0
   130e0:	b	12ffc <__assert_fail@plt+0x1c48>
   130e4:	mov	r6, #0
   130e8:	cmp	r7, #0
   130ec:	beq	130f8 <__assert_fail@plt+0x1d44>
   130f0:	mov	r9, #0
   130f4:	b	12ffc <__assert_fail@plt+0x1c48>
   130f8:	mov	r1, #1
   130fc:	ldr	r0, [fp, #-64]	; 0xffffffc0
   13100:	cmp	r0, #2
   13104:	bne	1311c <__assert_fail@plt+0x1d68>
   13108:	ldr	r0, [fp, #-76]	; 0xffffffb4
   1310c:	tst	r0, #1
   13110:	mov	r6, r1
   13114:	beq	12ffc <__assert_fail@plt+0x1c48>
   13118:	b	13940 <__assert_fail@plt+0x258c>
   1311c:	mov	r6, r1
   13120:	b	12ffc <__assert_fail@plt+0x1c48>
   13124:	ldr	r0, [fp, #-64]	; 0xffffffc0
   13128:	cmp	r0, #2
   1312c:	bne	13360 <__assert_fail@plt+0x1fac>
   13130:	ldr	r0, [fp, #-76]	; 0xffffffb4
   13134:	tst	r0, #1
   13138:	bne	13940 <__assert_fail@plt+0x258c>
   1313c:	mov	r9, #0
   13140:	b	13374 <__assert_fail@plt+0x1fc0>
   13144:	mov	r0, #102	; 0x66
   13148:	b	133e8 <__assert_fail@plt+0x2034>
   1314c:	mov	r2, #116	; 0x74
   13150:	b	13160 <__assert_fail@plt+0x1dac>
   13154:	mov	r0, #98	; 0x62
   13158:	b	133e8 <__assert_fail@plt+0x2034>
   1315c:	mov	r2, #114	; 0x72
   13160:	ldr	r0, [sp, #72]	; 0x48
   13164:	tst	r0, #1
   13168:	mov	r0, r2
   1316c:	bne	133e8 <__assert_fail@plt+0x2034>
   13170:	b	13940 <__assert_fail@plt+0x258c>
   13174:	ldr	r0, [sp, #92]	; 0x5c
   13178:	tst	r0, #1
   1317c:	beq	13404 <__assert_fail@plt+0x2050>
   13180:	ldr	r0, [fp, #-76]	; 0xffffffb4
   13184:	tst	r0, #1
   13188:	bne	13940 <__assert_fail@plt+0x258c>
   1318c:	ldr	r0, [fp, #-64]	; 0xffffffc0
   13190:	subs	r0, r0, #2
   13194:	movwne	r0, #1
   13198:	ldr	r1, [fp, #-56]	; 0xffffffc8
   1319c:	orr	r0, r0, r1
   131a0:	tst	r0, #1
   131a4:	bne	131e0 <__assert_fail@plt+0x1e2c>
   131a8:	cmp	r8, sl
   131ac:	movcc	r0, #39	; 0x27
   131b0:	strbcc	r0, [r5, r8]
   131b4:	add	r0, r8, #1
   131b8:	cmp	r0, sl
   131bc:	movcc	r1, #36	; 0x24
   131c0:	strbcc	r1, [r5, r0]
   131c4:	add	r0, r8, #2
   131c8:	cmp	r0, sl
   131cc:	movcc	r1, #39	; 0x27
   131d0:	strbcc	r1, [r5, r0]
   131d4:	add	r8, r8, #3
   131d8:	mov	r0, #1
   131dc:	str	r0, [fp, #-56]	; 0xffffffc8
   131e0:	cmp	r8, sl
   131e4:	movcc	r0, #92	; 0x5c
   131e8:	strbcc	r0, [r5, r8]
   131ec:	add	r0, r8, #1
   131f0:	mov	r6, #0
   131f4:	mov	r9, #1
   131f8:	mov	r4, #48	; 0x30
   131fc:	ldr	r1, [fp, #-64]	; 0xffffffc0
   13200:	cmp	r1, #2
   13204:	beq	135c8 <__assert_fail@plt+0x2214>
   13208:	add	r1, r7, #1
   1320c:	cmp	r1, lr
   13210:	bcs	135c8 <__assert_fail@plt+0x2214>
   13214:	ldrb	r1, [ip, r1]
   13218:	sub	r1, r1, #48	; 0x30
   1321c:	uxtb	r1, r1
   13220:	cmp	r1, #9
   13224:	bhi	135c8 <__assert_fail@plt+0x2214>
   13228:	cmp	r0, sl
   1322c:	movcc	r1, #48	; 0x30
   13230:	strbcc	r1, [r5, r0]
   13234:	add	r0, r8, #2
   13238:	cmp	r0, sl
   1323c:	movcc	r1, #48	; 0x30
   13240:	strbcc	r1, [r5, r0]
   13244:	add	r8, r8, #3
   13248:	b	12ffc <__assert_fail@plt+0x1c48>
   1324c:	mov	r9, #0
   13250:	mov	r4, #63	; 0x3f
   13254:	ldr	r0, [fp, #-64]	; 0xffffffc0
   13258:	cmp	r0, #5
   1325c:	beq	135d0 <__assert_fail@plt+0x221c>
   13260:	cmp	r0, #2
   13264:	bne	13678 <__assert_fail@plt+0x22c4>
   13268:	ldr	r0, [fp, #-76]	; 0xffffffb4
   1326c:	tst	r0, #1
   13270:	mov	r6, #0
   13274:	beq	12ffc <__assert_fail@plt+0x1c48>
   13278:	b	13940 <__assert_fail@plt+0x258c>
   1327c:	mov	r0, #118	; 0x76
   13280:	b	133e8 <__assert_fail@plt+0x2034>
   13284:	mov	r4, #39	; 0x27
   13288:	mov	r0, #1
   1328c:	str	r0, [sp, #64]	; 0x40
   13290:	ldr	r0, [fp, #-64]	; 0xffffffc0
   13294:	cmp	r0, #2
   13298:	bne	13420 <__assert_fail@plt+0x206c>
   1329c:	ldr	r0, [fp, #-76]	; 0xffffffb4
   132a0:	tst	r0, #1
   132a4:	bne	13940 <__assert_fail@plt+0x258c>
   132a8:	ldr	r2, [sp, #84]	; 0x54
   132ac:	cmp	r2, #0
   132b0:	mov	r0, r2
   132b4:	movwne	r0, #1
   132b8:	clz	r1, sl
   132bc:	lsr	r1, r1, #5
   132c0:	orrs	r0, r0, r1
   132c4:	moveq	r2, sl
   132c8:	str	r2, [sp, #84]	; 0x54
   132cc:	moveq	sl, r0
   132d0:	cmp	r8, sl
   132d4:	movcc	r0, #39	; 0x27
   132d8:	strbcc	r0, [r5, r8]
   132dc:	add	r0, r8, #1
   132e0:	cmp	r0, sl
   132e4:	movcc	r1, #92	; 0x5c
   132e8:	strbcc	r1, [r5, r0]
   132ec:	add	r0, r8, #2
   132f0:	cmp	r0, sl
   132f4:	movcc	r1, #39	; 0x27
   132f8:	strbcc	r1, [r5, r0]
   132fc:	add	r8, r8, #3
   13300:	mov	r0, #0
   13304:	str	r0, [fp, #-56]	; 0xffffffc8
   13308:	mov	r9, #0
   1330c:	mov	r6, #1
   13310:	b	12ffc <__assert_fail@plt+0x1c48>
   13314:	ldr	r0, [sp, #44]	; 0x2c
   13318:	cmp	r0, #1
   1331c:	bne	13428 <__assert_fail@plt+0x2074>
   13320:	str	lr, [sp, #32]
   13324:	bl	11270 <__ctype_b_loc@plt>
   13328:	ldr	ip, [fp, #-80]	; 0xffffffb0
   1332c:	ldr	r0, [r0]
   13330:	add	r0, r0, r4, lsl #1
   13334:	ldrb	r0, [r0, #1]
   13338:	ubfx	r6, r0, #6, #1
   1333c:	mov	r2, #1
   13340:	ldr	r0, [sp, #60]	; 0x3c
   13344:	orr	r1, r6, r0
   13348:	cmp	r2, #1
   1334c:	bhi	13680 <__assert_fail@plt+0x22cc>
   13350:	tst	r1, #1
   13354:	beq	13680 <__assert_fail@plt+0x22cc>
   13358:	ldr	lr, [sp, #32]
   1335c:	b	12ffc <__assert_fail@plt+0x1c48>
   13360:	mov	r9, #0
   13364:	mov	r0, #92	; 0x5c
   13368:	ldr	r1, [sp, #56]	; 0x38
   1336c:	cmp	r1, #0
   13370:	beq	133e8 <__assert_fail@plt+0x2034>
   13374:	mov	r4, #92	; 0x5c
   13378:	mov	r6, #0
   1337c:	cmp	r9, #0
   13380:	bne	133b8 <__assert_fail@plt+0x2004>
   13384:	ldr	r0, [fp, #-56]	; 0xffffffc8
   13388:	tst	r0, #1
   1338c:	beq	133b8 <__assert_fail@plt+0x2004>
   13390:	cmp	r8, sl
   13394:	movcc	r0, #39	; 0x27
   13398:	strbcc	r0, [r5, r8]
   1339c:	add	r0, r8, #1
   133a0:	cmp	r0, sl
   133a4:	movcc	r1, #39	; 0x27
   133a8:	strbcc	r1, [r5, r0]
   133ac:	add	r8, r8, #2
   133b0:	mov	r0, #0
   133b4:	str	r0, [fp, #-56]	; 0xffffffc8
   133b8:	mov	r1, r6
   133bc:	mov	r0, r4
   133c0:	cmp	r8, sl
   133c4:	strbcc	r0, [r5, r8]
   133c8:	ldr	r0, [fp, #-48]	; 0xffffffd0
   133cc:	and	r0, r0, r1
   133d0:	str	r0, [fp, #-48]	; 0xffffffd0
   133d4:	add	r8, r8, #1
   133d8:	add	r7, r7, #1
   133dc:	cmn	lr, #1
   133e0:	bne	12d34 <__assert_fail@plt+0x1980>
   133e4:	b	12d40 <__assert_fail@plt+0x198c>
   133e8:	mov	r9, #0
   133ec:	ldr	r1, [sp, #92]	; 0x5c
   133f0:	tst	r1, #1
   133f4:	mov	r6, #0
   133f8:	mov	r1, #0
   133fc:	beq	12ffc <__assert_fail@plt+0x1c48>
   13400:	b	13044 <__assert_fail@plt+0x1c90>
   13404:	mov	r4, #0
   13408:	ldr	r0, [sp, #40]	; 0x28
   1340c:	cmp	r0, #0
   13410:	mov	r9, #0
   13414:	mov	r6, #0
   13418:	beq	12ffc <__assert_fail@plt+0x1c48>
   1341c:	b	133d8 <__assert_fail@plt+0x2024>
   13420:	mov	r6, #1
   13424:	b	12ffc <__assert_fail@plt+0x1c48>
   13428:	mov	r0, #0
   1342c:	str	r0, [fp, #-36]	; 0xffffffdc
   13430:	str	r0, [fp, #-40]	; 0xffffffd8
   13434:	cmn	lr, #1
   13438:	bne	1344c <__assert_fail@plt+0x2098>
   1343c:	mov	r0, ip
   13440:	bl	112a0 <strlen@plt>
   13444:	ldr	ip, [fp, #-80]	; 0xffffffb0
   13448:	mov	lr, r0
   1344c:	ldr	r0, [sp, #76]	; 0x4c
   13450:	add	r0, r0, r7
   13454:	str	r0, [sp, #24]
   13458:	mov	r6, #1
   1345c:	mov	r2, #0
   13460:	sub	r0, fp, #40	; 0x28
   13464:	mov	r3, r0
   13468:	str	r5, [sp, #28]
   1346c:	str	lr, [sp, #32]
   13470:	b	134b4 <__assert_fail@plt+0x2100>
   13474:	ldr	r5, [sp, #52]	; 0x34
   13478:	add	r5, r0, r5
   1347c:	ldr	r0, [fp, #-44]	; 0xffffffd4
   13480:	bl	111b0 <iswprint@plt>
   13484:	cmp	r0, #0
   13488:	movwne	r0, #1
   1348c:	and	r6, r6, r0
   13490:	sub	r0, fp, #40	; 0x28
   13494:	bl	11174 <mbsinit@plt>
   13498:	sub	r3, fp, #40	; 0x28
   1349c:	mov	r2, r5
   134a0:	ldr	lr, [sp, #32]
   134a4:	cmp	r0, #0
   134a8:	ldr	r5, [sp, #28]
   134ac:	ldr	ip, [fp, #-80]	; 0xffffffb0
   134b0:	bne	13340 <__assert_fail@plt+0x1f8c>
   134b4:	str	r2, [sp, #52]	; 0x34
   134b8:	add	r0, r2, r7
   134bc:	add	r1, ip, r0
   134c0:	str	r0, [sp, #48]	; 0x30
   134c4:	sub	r2, lr, r0
   134c8:	sub	r0, fp, #44	; 0x2c
   134cc:	bl	15c2c <__assert_fail@plt+0x4878>
   134d0:	cmp	r0, #0
   134d4:	beq	1384c <__assert_fail@plt+0x2498>
   134d8:	cmn	r0, #1
   134dc:	beq	13808 <__assert_fail@plt+0x2454>
   134e0:	cmn	r0, #2
   134e4:	ldr	lr, [sp, #32]
   134e8:	beq	13810 <__assert_fail@plt+0x245c>
   134ec:	cmp	r0, #2
   134f0:	mov	r1, #0
   134f4:	movwcc	r1, #1
   134f8:	ldr	r2, [sp, #68]	; 0x44
   134fc:	eor	r2, r2, #1
   13500:	orrs	r1, r2, r1
   13504:	bne	13474 <__assert_fail@plt+0x20c0>
   13508:	ldr	r1, [sp, #52]	; 0x34
   1350c:	ldr	r2, [sp, #24]
   13510:	add	r1, r2, r1
   13514:	sub	r2, r0, #1
   13518:	b	13528 <__assert_fail@plt+0x2174>
   1351c:	add	r1, r1, #1
   13520:	subs	r2, r2, #1
   13524:	beq	13474 <__assert_fail@plt+0x20c0>
   13528:	ldrb	r3, [r1]
   1352c:	sub	r3, r3, #91	; 0x5b
   13530:	cmp	r3, #33	; 0x21
   13534:	bhi	1351c <__assert_fail@plt+0x2168>
   13538:	add	r5, pc, #0
   1353c:	ldr	pc, [r5, r3, lsl #2]
   13540:	andeq	r3, r1, r8, lsr r9
   13544:	andeq	r3, r1, r8, lsr r9
   13548:	andeq	r3, r1, ip, lsl r5
   1354c:	andeq	r3, r1, r8, lsr r9
   13550:	andeq	r3, r1, ip, lsl r5
   13554:	andeq	r3, r1, r8, lsr r9
   13558:	andeq	r3, r1, ip, lsl r5
   1355c:	andeq	r3, r1, ip, lsl r5
   13560:	andeq	r3, r1, ip, lsl r5
   13564:	andeq	r3, r1, ip, lsl r5
   13568:	andeq	r3, r1, ip, lsl r5
   1356c:	andeq	r3, r1, ip, lsl r5
   13570:	andeq	r3, r1, ip, lsl r5
   13574:	andeq	r3, r1, ip, lsl r5
   13578:	andeq	r3, r1, ip, lsl r5
   1357c:	andeq	r3, r1, ip, lsl r5
   13580:	andeq	r3, r1, ip, lsl r5
   13584:	andeq	r3, r1, ip, lsl r5
   13588:	andeq	r3, r1, ip, lsl r5
   1358c:	andeq	r3, r1, ip, lsl r5
   13590:	andeq	r3, r1, ip, lsl r5
   13594:	andeq	r3, r1, ip, lsl r5
   13598:	andeq	r3, r1, ip, lsl r5
   1359c:	andeq	r3, r1, ip, lsl r5
   135a0:	andeq	r3, r1, ip, lsl r5
   135a4:	andeq	r3, r1, ip, lsl r5
   135a8:	andeq	r3, r1, ip, lsl r5
   135ac:	andeq	r3, r1, ip, lsl r5
   135b0:	andeq	r3, r1, ip, lsl r5
   135b4:	andeq	r3, r1, ip, lsl r5
   135b8:	andeq	r3, r1, ip, lsl r5
   135bc:	andeq	r3, r1, ip, lsl r5
   135c0:	andeq	r3, r1, ip, lsl r5
   135c4:	andeq	r3, r1, r8, lsr r9
   135c8:	mov	r8, r0
   135cc:	b	12ffc <__assert_fail@plt+0x1c48>
   135d0:	ldr	r0, [sp, #36]	; 0x24
   135d4:	cmp	r0, #0
   135d8:	beq	13678 <__assert_fail@plt+0x22c4>
   135dc:	add	r0, r7, #2
   135e0:	cmp	r0, lr
   135e4:	bcs	13678 <__assert_fail@plt+0x22c4>
   135e8:	add	r1, r7, ip
   135ec:	ldrb	r1, [r1, #1]
   135f0:	cmp	r1, #63	; 0x3f
   135f4:	bne	13678 <__assert_fail@plt+0x22c4>
   135f8:	ldrb	r1, [ip, r0]
   135fc:	sub	r2, r1, #33	; 0x21
   13600:	cmp	r2, #29
   13604:	bhi	13678 <__assert_fail@plt+0x22c4>
   13608:	mov	r3, #1
   1360c:	movw	r6, #20929	; 0x51c1
   13610:	movt	r6, #14336	; 0x3800
   13614:	tst	r6, r3, lsl r2
   13618:	beq	13678 <__assert_fail@plt+0x22c4>
   1361c:	ldr	r2, [fp, #-76]	; 0xffffffb4
   13620:	tst	r2, #1
   13624:	bne	13940 <__assert_fail@plt+0x258c>
   13628:	cmp	r8, sl
   1362c:	movcc	r2, #63	; 0x3f
   13630:	strbcc	r2, [r5, r8]
   13634:	add	r2, r8, #1
   13638:	cmp	r2, sl
   1363c:	movcc	r3, #34	; 0x22
   13640:	strbcc	r3, [r5, r2]
   13644:	add	r2, r8, #2
   13648:	cmp	r2, sl
   1364c:	movcc	r3, #34	; 0x22
   13650:	strbcc	r3, [r5, r2]
   13654:	add	r2, r8, #3
   13658:	cmp	r2, sl
   1365c:	movcc	r3, #63	; 0x3f
   13660:	strbcc	r3, [r5, r2]
   13664:	add	r8, r8, #4
   13668:	mov	r7, r0
   1366c:	mov	r4, r1
   13670:	mov	r6, #0
   13674:	b	12ffc <__assert_fail@plt+0x1c48>
   13678:	mov	r6, #0
   1367c:	b	12ffc <__assert_fail@plt+0x1c48>
   13680:	add	r0, r2, r7
   13684:	str	r0, [sp, #52]	; 0x34
   13688:	mov	r2, #0
   1368c:	ldr	lr, [sp, #32]
   13690:	ldr	r0, [fp, #-56]	; 0xffffffc8
   13694:	str	r1, [sp, #48]	; 0x30
   13698:	tst	r1, #1
   1369c:	bne	13778 <__assert_fail@plt+0x23c4>
   136a0:	ldr	r1, [fp, #-76]	; 0xffffffb4
   136a4:	tst	r1, #1
   136a8:	bne	13940 <__assert_fail@plt+0x258c>
   136ac:	mov	r3, r0
   136b0:	ldr	r0, [fp, #-64]	; 0xffffffc0
   136b4:	subs	r1, r0, #2
   136b8:	movwne	r1, #1
   136bc:	orr	r1, r1, r3
   136c0:	tst	r1, #1
   136c4:	bne	136fc <__assert_fail@plt+0x2348>
   136c8:	cmp	r8, sl
   136cc:	movcc	r0, #39	; 0x27
   136d0:	strbcc	r0, [r5, r8]
   136d4:	add	r2, r8, #1
   136d8:	cmp	r2, sl
   136dc:	movcc	r0, #36	; 0x24
   136e0:	strbcc	r0, [r5, r2]
   136e4:	add	r2, r8, #2
   136e8:	cmp	r2, sl
   136ec:	movcc	r0, #39	; 0x27
   136f0:	strbcc	r0, [r5, r2]
   136f4:	add	r8, r8, #3
   136f8:	mov	r3, #1
   136fc:	cmp	r8, sl
   13700:	movcc	r1, #92	; 0x5c
   13704:	strbcc	r1, [r5, r8]
   13708:	add	r2, r8, #1
   1370c:	cmp	r2, sl
   13710:	bcs	13724 <__assert_fail@plt+0x2370>
   13714:	uxtb	r1, r4
   13718:	mov	r0, #48	; 0x30
   1371c:	orr	r1, r0, r1, lsr #6
   13720:	strb	r1, [r5, r2]
   13724:	add	r2, r8, #2
   13728:	cmp	r2, sl
   1372c:	lsrcc	r1, r4, #3
   13730:	movcc	r0, #6
   13734:	bficc	r1, r0, #3, #29
   13738:	strbcc	r1, [r5, r2]
   1373c:	mov	r0, #6
   13740:	bfi	r4, r0, #3, #29
   13744:	add	r8, r8, #3
   13748:	mov	r2, #1
   1374c:	mov	r0, r3
   13750:	b	1379c <__assert_fail@plt+0x23e8>
   13754:	cmp	r8, sl
   13758:	strbcc	r4, [r5, r8]
   1375c:	ldr	r1, [sp, #76]	; 0x4c
   13760:	ldrb	r4, [r1, r7]
   13764:	add	r8, r8, #1
   13768:	mov	r7, r3
   1376c:	ldr	r1, [sp, #48]	; 0x30
   13770:	tst	r1, #1
   13774:	beq	136a0 <__assert_fail@plt+0x22ec>
   13778:	ldr	r1, [fp, #-52]	; 0xffffffcc
   1377c:	tst	r1, #1
   13780:	beq	13794 <__assert_fail@plt+0x23e0>
   13784:	cmp	r8, sl
   13788:	movcc	r1, #92	; 0x5c
   1378c:	strbcc	r1, [r5, r8]
   13790:	add	r8, r8, #1
   13794:	mov	r1, #0
   13798:	str	r1, [fp, #-52]	; 0xffffffcc
   1379c:	and	r9, r2, #1
   137a0:	add	r3, r7, #1
   137a4:	ldr	r1, [sp, #52]	; 0x34
   137a8:	cmp	r1, r3
   137ac:	bls	137f0 <__assert_fail@plt+0x243c>
   137b0:	cmp	r9, #0
   137b4:	movwne	r9, #1
   137b8:	mvn	r1, r0
   137bc:	orr	r1, r1, r9
   137c0:	tst	r1, #1
   137c4:	bne	13754 <__assert_fail@plt+0x23a0>
   137c8:	cmp	r8, sl
   137cc:	movcc	r1, #39	; 0x27
   137d0:	strbcc	r1, [r5, r8]
   137d4:	add	r1, r8, #1
   137d8:	cmp	r1, sl
   137dc:	movcc	r0, #39	; 0x27
   137e0:	strbcc	r0, [r5, r1]
   137e4:	add	r8, r8, #2
   137e8:	mov	r0, #0
   137ec:	b	13754 <__assert_fail@plt+0x23a0>
   137f0:	str	r0, [fp, #-56]	; 0xffffffc8
   137f4:	cmp	r9, #0
   137f8:	movwne	r9, #1
   137fc:	cmp	r9, #0
   13800:	beq	13384 <__assert_fail@plt+0x1fd0>
   13804:	b	133b8 <__assert_fail@plt+0x2004>
   13808:	mov	r6, #0
   1380c:	b	1384c <__assert_fail@plt+0x2498>
   13810:	mov	r6, #0
   13814:	ldr	r0, [sp, #48]	; 0x30
   13818:	cmp	r0, lr
   1381c:	bcs	1384c <__assert_fail@plt+0x2498>
   13820:	ldr	ip, [fp, #-80]	; 0xffffffb0
   13824:	add	r0, ip, r7
   13828:	ldr	r2, [sp, #52]	; 0x34
   1382c:	ldrb	r1, [r0, r2]
   13830:	cmp	r1, #0
   13834:	beq	13340 <__assert_fail@plt+0x1f8c>
   13838:	add	r2, r2, #1
   1383c:	add	r1, r7, r2
   13840:	cmp	r1, lr
   13844:	bcc	1382c <__assert_fail@plt+0x2478>
   13848:	b	13340 <__assert_fail@plt+0x1f8c>
   1384c:	ldr	ip, [fp, #-80]	; 0xffffffb0
   13850:	ldr	r2, [sp, #52]	; 0x34
   13854:	b	13340 <__assert_fail@plt+0x1f8c>
   13858:	ldr	r1, [fp, #-64]	; 0xffffffc0
   1385c:	eor	r0, r1, #2
   13860:	orr	r0, r0, r8
   13864:	clz	r0, r0
   13868:	lsr	r0, r0, #5
   1386c:	ldr	r3, [fp, #-76]	; 0xffffffb4
   13870:	tst	r3, r0
   13874:	bne	13940 <__assert_fail@plt+0x258c>
   13878:	mov	r6, r5
   1387c:	subs	r0, r1, #2
   13880:	movwne	r0, #1
   13884:	orr	r0, r3, r0
   13888:	tst	r0, #1
   1388c:	ldr	r2, [sp, #92]	; 0x5c
   13890:	ldreq	r0, [sp, #64]	; 0x40
   13894:	eoreq	r0, r0, #1
   13898:	tsteq	r0, #1
   1389c:	bne	138dc <__assert_fail@plt+0x2528>
   138a0:	mov	r9, lr
   138a4:	ldr	r0, [fp, #-48]	; 0xffffffd0
   138a8:	tst	r0, #1
   138ac:	bne	139a8 <__assert_fail@plt+0x25f4>
   138b0:	ldr	r0, [sp, #84]	; 0x54
   138b4:	cmp	r0, #0
   138b8:	beq	138dc <__assert_fail@plt+0x2528>
   138bc:	mov	r0, #0
   138c0:	str	r0, [fp, #-48]	; 0xffffffd0
   138c4:	mov	r1, #2
   138c8:	cmp	sl, #0
   138cc:	mov	r0, r2
   138d0:	mov	r4, r3
   138d4:	ldr	r7, [sp, #84]	; 0x54
   138d8:	beq	12ab4 <__assert_fail@plt+0x1700>
   138dc:	ldr	r1, [fp, #-84]	; 0xffffffac
   138e0:	clz	r0, r1
   138e4:	lsr	r0, r0, #5
   138e8:	orr	r0, r0, r3
   138ec:	tst	r0, #1
   138f0:	bne	1391c <__assert_fail@plt+0x2568>
   138f4:	ldrb	r0, [r1]
   138f8:	cmp	r0, #0
   138fc:	beq	1391c <__assert_fail@plt+0x2568>
   13900:	add	r1, r1, #1
   13904:	cmp	r8, sl
   13908:	strbcc	r0, [r6, r8]
   1390c:	add	r8, r8, #1
   13910:	ldrb	r0, [r1], #1
   13914:	cmp	r0, #0
   13918:	bne	13904 <__assert_fail@plt+0x2550>
   1391c:	cmp	r8, sl
   13920:	movcc	r0, #0
   13924:	strbcc	r0, [r6, r8]
   13928:	b	1399c <__assert_fail@plt+0x25e8>
   1392c:	ldr	ip, [fp, #-80]	; 0xffffffb0
   13930:	mov	lr, r4
   13934:	b	13940 <__assert_fail@plt+0x258c>
   13938:	ldr	r5, [sp, #28]
   1393c:	ldr	ip, [fp, #-80]	; 0xffffffb0
   13940:	mov	r0, #0
   13944:	ldr	r1, [fp, #12]
   13948:	bic	r1, r1, #2
   1394c:	mov	r2, #2
   13950:	ldr	r3, [sp, #92]	; 0x5c
   13954:	tst	r3, #1
   13958:	movwne	r2, #4
   1395c:	ldr	r3, [fp, #-64]	; 0xffffffc0
   13960:	cmp	r3, #2
   13964:	movne	r2, r3
   13968:	str	r2, [sp]
   1396c:	str	r1, [sp, #4]
   13970:	str	r0, [sp, #8]
   13974:	ldr	r0, [sp, #80]	; 0x50
   13978:	str	r0, [sp, #12]
   1397c:	ldr	r0, [sp, #88]	; 0x58
   13980:	str	r0, [sp, #16]
   13984:	mov	r0, r5
   13988:	mov	r1, sl
   1398c:	mov	r2, ip
   13990:	mov	r3, lr
   13994:	bl	12a28 <__assert_fail@plt+0x1674>
   13998:	mov	r8, r0
   1399c:	mov	r0, r8
   139a0:	sub	sp, fp, #28
   139a4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   139a8:	mov	r0, #5
   139ac:	str	r0, [sp]
   139b0:	ldr	r0, [fp, #12]
   139b4:	str	r0, [sp, #4]
   139b8:	ldr	r0, [fp, #16]
   139bc:	str	r0, [sp, #8]
   139c0:	ldr	r0, [sp, #80]	; 0x50
   139c4:	str	r0, [sp, #12]
   139c8:	ldr	r0, [sp, #88]	; 0x58
   139cc:	str	r0, [sp, #16]
   139d0:	mov	r0, r6
   139d4:	ldr	r1, [sp, #84]	; 0x54
   139d8:	ldr	r2, [fp, #-80]	; 0xffffffb0
   139dc:	mov	r3, r9
   139e0:	b	13994 <__assert_fail@plt+0x25e0>
   139e4:	bl	11384 <abort@plt>
   139e8:	mov	r3, r2
   139ec:	mov	r2, #0
   139f0:	b	139f4 <__assert_fail@plt+0x2640>
   139f4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   139f8:	add	fp, sp, #28
   139fc:	sub	sp, sp, #36	; 0x24
   13a00:	mov	r4, r2
   13a04:	str	r2, [sp, #24]
   13a08:	mov	r5, r1
   13a0c:	mov	r6, r0
   13a10:	str	r0, [sp, #20]
   13a14:	movw	r8, #33256	; 0x81e8
   13a18:	movt	r8, #2
   13a1c:	cmp	r3, #0
   13a20:	movne	r8, r3
   13a24:	bl	112b8 <__errno_location@plt>
   13a28:	str	r0, [sp, #28]
   13a2c:	ldm	r8, {r3, r9}
   13a30:	ldr	r1, [r8, #40]	; 0x28
   13a34:	ldr	r2, [r8, #44]	; 0x2c
   13a38:	ldr	r7, [r0]
   13a3c:	str	r7, [sp, #32]
   13a40:	add	sl, r8, #8
   13a44:	cmp	r4, #0
   13a48:	orreq	r9, r9, #1
   13a4c:	stm	sp, {r3, r9, sl}
   13a50:	str	r1, [sp, #12]
   13a54:	str	r2, [sp, #16]
   13a58:	mov	r0, #0
   13a5c:	mov	r1, #0
   13a60:	mov	r2, r6
   13a64:	mov	r3, r5
   13a68:	mov	r7, r5
   13a6c:	bl	12a28 <__assert_fail@plt+0x1674>
   13a70:	mov	r5, r0
   13a74:	add	r4, r0, #1
   13a78:	mov	r0, r4
   13a7c:	bl	14cac <__assert_fail@plt+0x38f8>
   13a80:	mov	r6, r0
   13a84:	ldr	r0, [r8]
   13a88:	ldr	r1, [r8, #40]	; 0x28
   13a8c:	ldr	r2, [r8, #44]	; 0x2c
   13a90:	stm	sp, {r0, r9, sl}
   13a94:	str	r1, [sp, #12]
   13a98:	str	r2, [sp, #16]
   13a9c:	mov	r0, r6
   13aa0:	mov	r1, r4
   13aa4:	ldr	r2, [sp, #20]
   13aa8:	mov	r3, r7
   13aac:	bl	12a28 <__assert_fail@plt+0x1674>
   13ab0:	ldr	r0, [sp, #24]
   13ab4:	ldr	r1, [sp, #32]
   13ab8:	ldr	r2, [sp, #28]
   13abc:	str	r1, [r2]
   13ac0:	cmp	r0, #0
   13ac4:	strne	r5, [r0]
   13ac8:	mov	r0, r6
   13acc:	sub	sp, fp, #28
   13ad0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13ad4:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   13ad8:	add	fp, sp, #24
   13adc:	movw	r8, #33056	; 0x8120
   13ae0:	movt	r8, #2
   13ae4:	ldr	r4, [r8]
   13ae8:	movw	r5, #33060	; 0x8124
   13aec:	movt	r5, #2
   13af0:	ldr	r0, [r5]
   13af4:	cmp	r0, #2
   13af8:	blt	13b24 <__assert_fail@plt+0x2770>
   13afc:	add	r7, r4, #12
   13b00:	mov	r6, #0
   13b04:	ldr	r0, [r7, r6, lsl #3]
   13b08:	bl	12768 <__assert_fail@plt+0x13b4>
   13b0c:	add	r0, r6, #1
   13b10:	ldr	r1, [r5]
   13b14:	add	r2, r6, #2
   13b18:	cmp	r2, r1
   13b1c:	mov	r6, r0
   13b20:	blt	13b04 <__assert_fail@plt+0x2750>
   13b24:	ldr	r0, [r4, #4]
   13b28:	movw	r9, #33304	; 0x8218
   13b2c:	movt	r9, #2
   13b30:	cmp	r0, r9
   13b34:	movw	r7, #33064	; 0x8128
   13b38:	movt	r7, #2
   13b3c:	beq	13b4c <__assert_fail@plt+0x2798>
   13b40:	bl	12768 <__assert_fail@plt+0x13b4>
   13b44:	mov	r0, #256	; 0x100
   13b48:	stm	r7, {r0, r9}
   13b4c:	cmp	r4, r7
   13b50:	beq	13b60 <__assert_fail@plt+0x27ac>
   13b54:	mov	r0, r4
   13b58:	bl	12768 <__assert_fail@plt+0x13b4>
   13b5c:	str	r7, [r8]
   13b60:	mov	r0, #1
   13b64:	str	r0, [r5]
   13b68:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   13b6c:	movw	r3, #33256	; 0x81e8
   13b70:	movt	r3, #2
   13b74:	mvn	r2, #0
   13b78:	b	13b7c <__assert_fail@plt+0x27c8>
   13b7c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13b80:	add	fp, sp, #28
   13b84:	sub	sp, sp, #44	; 0x2c
   13b88:	mov	r7, r3
   13b8c:	str	r2, [sp, #36]	; 0x24
   13b90:	str	r1, [sp, #32]
   13b94:	mov	r5, r0
   13b98:	bl	112b8 <__errno_location@plt>
   13b9c:	cmp	r5, #0
   13ba0:	bmi	13d10 <__assert_fail@plt+0x295c>
   13ba4:	cmn	r5, #-2147483647	; 0x80000001
   13ba8:	beq	13d10 <__assert_fail@plt+0x295c>
   13bac:	movw	r4, #33056	; 0x8120
   13bb0:	movt	r4, #2
   13bb4:	ldr	r6, [r4]
   13bb8:	str	r0, [sp, #28]
   13bbc:	ldr	r0, [r0]
   13bc0:	str	r0, [sp, #24]
   13bc4:	movw	r8, #33060	; 0x8124
   13bc8:	movt	r8, #2
   13bcc:	ldr	r1, [r8]
   13bd0:	cmp	r1, r5
   13bd4:	ble	13be0 <__assert_fail@plt+0x282c>
   13bd8:	mov	sl, r6
   13bdc:	b	13c4c <__assert_fail@plt+0x2898>
   13be0:	str	r1, [fp, #-32]	; 0xffffffe0
   13be4:	mov	r0, #8
   13be8:	str	r0, [sp]
   13bec:	movw	r9, #33064	; 0x8128
   13bf0:	movt	r9, #2
   13bf4:	subs	r0, r6, r9
   13bf8:	movne	r0, r6
   13bfc:	sub	r1, r5, r1
   13c00:	add	r2, r1, #1
   13c04:	sub	r1, fp, #32
   13c08:	mvn	r3, #-2147483648	; 0x80000000
   13c0c:	bl	14d88 <__assert_fail@plt+0x39d4>
   13c10:	mov	sl, r0
   13c14:	str	r0, [r4]
   13c18:	cmp	r6, r9
   13c1c:	bne	13c28 <__assert_fail@plt+0x2874>
   13c20:	ldrd	r0, [r9]
   13c24:	stm	sl, {r0, r1}
   13c28:	ldr	r1, [r8]
   13c2c:	add	r0, sl, r1, lsl #3
   13c30:	ldr	r2, [fp, #-32]	; 0xffffffe0
   13c34:	sub	r1, r2, r1
   13c38:	lsl	r2, r1, #3
   13c3c:	mov	r1, #0
   13c40:	bl	112e8 <memset@plt>
   13c44:	ldr	r0, [fp, #-32]	; 0xffffffe0
   13c48:	str	r0, [r8]
   13c4c:	mov	r9, sl
   13c50:	ldr	r6, [r9, r5, lsl #3]!
   13c54:	ldr	r4, [r9, #4]!
   13c58:	ldm	r7, {r0, r1}
   13c5c:	ldr	r2, [r7, #40]	; 0x28
   13c60:	ldr	r3, [r7, #44]	; 0x2c
   13c64:	orr	r8, r1, #1
   13c68:	add	r1, r7, #8
   13c6c:	stm	sp, {r0, r8}
   13c70:	str	r1, [sp, #20]
   13c74:	add	r0, sp, #8
   13c78:	stm	r0, {r1, r2, r3}
   13c7c:	mov	r0, r4
   13c80:	mov	r1, r6
   13c84:	ldr	r2, [sp, #32]
   13c88:	ldr	r3, [sp, #36]	; 0x24
   13c8c:	bl	12a28 <__assert_fail@plt+0x1674>
   13c90:	cmp	r6, r0
   13c94:	bhi	13cf8 <__assert_fail@plt+0x2944>
   13c98:	add	r6, r0, #1
   13c9c:	str	r6, [sl, r5, lsl #3]
   13ca0:	movw	r0, #33304	; 0x8218
   13ca4:	movt	r0, #2
   13ca8:	cmp	r4, r0
   13cac:	beq	13cb8 <__assert_fail@plt+0x2904>
   13cb0:	mov	r0, r4
   13cb4:	bl	12768 <__assert_fail@plt+0x13b4>
   13cb8:	mov	r0, r6
   13cbc:	bl	14cac <__assert_fail@plt+0x38f8>
   13cc0:	mov	r4, r0
   13cc4:	str	r0, [r9]
   13cc8:	ldr	r0, [r7]
   13ccc:	ldr	r1, [r7, #40]	; 0x28
   13cd0:	ldr	r2, [r7, #44]	; 0x2c
   13cd4:	stm	sp, {r0, r8}
   13cd8:	ldr	r0, [sp, #20]
   13cdc:	add	r3, sp, #8
   13ce0:	stm	r3, {r0, r1, r2}
   13ce4:	mov	r0, r4
   13ce8:	mov	r1, r6
   13cec:	ldr	r2, [sp, #32]
   13cf0:	ldr	r3, [sp, #36]	; 0x24
   13cf4:	bl	12a28 <__assert_fail@plt+0x1674>
   13cf8:	ldr	r0, [sp, #28]
   13cfc:	ldr	r1, [sp, #24]
   13d00:	str	r1, [r0]
   13d04:	mov	r0, r4
   13d08:	sub	sp, fp, #28
   13d0c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13d10:	bl	11384 <abort@plt>
   13d14:	movw	r3, #33256	; 0x81e8
   13d18:	movt	r3, #2
   13d1c:	b	13b7c <__assert_fail@plt+0x27c8>
   13d20:	mov	r1, r0
   13d24:	mov	r0, #0
   13d28:	b	13b6c <__assert_fail@plt+0x27b8>
   13d2c:	mov	r2, r1
   13d30:	mov	r1, r0
   13d34:	mov	r0, #0
   13d38:	b	13d14 <__assert_fail@plt+0x2960>
   13d3c:	push	{r4, r5, r6, sl, fp, lr}
   13d40:	add	fp, sp, #16
   13d44:	sub	sp, sp, #48	; 0x30
   13d48:	mov	r4, r2
   13d4c:	mov	r5, r0
   13d50:	mov	r6, sp
   13d54:	mov	r0, r6
   13d58:	bl	13d78 <__assert_fail@plt+0x29c4>
   13d5c:	mov	r0, r5
   13d60:	mov	r1, r4
   13d64:	mvn	r2, #0
   13d68:	mov	r3, r6
   13d6c:	bl	13b7c <__assert_fail@plt+0x27c8>
   13d70:	sub	sp, fp, #16
   13d74:	pop	{r4, r5, r6, sl, fp, pc}
   13d78:	push	{fp, lr}
   13d7c:	mov	fp, sp
   13d80:	vmov.i32	q8, #0	; 0x00000000
   13d84:	mov	r2, #32
   13d88:	mov	r3, r0
   13d8c:	vst1.32	{d16-d17}, [r3], r2
   13d90:	vst1.32	{d16-d17}, [r3]
   13d94:	add	r2, r0, #16
   13d98:	vst1.32	{d16-d17}, [r2]
   13d9c:	cmp	r1, #10
   13da0:	strne	r1, [r0]
   13da4:	popne	{fp, pc}
   13da8:	bl	11384 <abort@plt>
   13dac:	push	{r4, r5, r6, r7, fp, lr}
   13db0:	add	fp, sp, #16
   13db4:	sub	sp, sp, #48	; 0x30
   13db8:	mov	r4, r3
   13dbc:	mov	r5, r2
   13dc0:	mov	r6, r0
   13dc4:	mov	r7, sp
   13dc8:	mov	r0, r7
   13dcc:	bl	13d78 <__assert_fail@plt+0x29c4>
   13dd0:	mov	r0, r6
   13dd4:	mov	r1, r5
   13dd8:	mov	r2, r4
   13ddc:	mov	r3, r7
   13de0:	bl	13b7c <__assert_fail@plt+0x27c8>
   13de4:	sub	sp, fp, #16
   13de8:	pop	{r4, r5, r6, r7, fp, pc}
   13dec:	mov	r2, r1
   13df0:	mov	r1, r0
   13df4:	mov	r0, #0
   13df8:	b	13d3c <__assert_fail@plt+0x2988>
   13dfc:	mov	r3, r2
   13e00:	mov	r2, r1
   13e04:	mov	r1, r0
   13e08:	mov	r0, #0
   13e0c:	b	13dac <__assert_fail@plt+0x29f8>
   13e10:	push	{r4, r5, r6, sl, fp, lr}
   13e14:	add	fp, sp, #16
   13e18:	sub	sp, sp, #48	; 0x30
   13e1c:	mov	r4, r1
   13e20:	mov	r5, r0
   13e24:	movw	r0, #33256	; 0x81e8
   13e28:	movt	r0, #2
   13e2c:	add	r1, r0, #16
   13e30:	mov	r3, #32
   13e34:	vld1.64	{d16-d17}, [r0], r3
   13e38:	vld1.64	{d18-d19}, [r1]
   13e3c:	mov	r6, sp
   13e40:	add	r1, r6, #16
   13e44:	vld1.64	{d20-d21}, [r0]
   13e48:	vst1.64	{d18-d19}, [r1]
   13e4c:	mov	r0, r6
   13e50:	vst1.64	{d16-d17}, [r0], r3
   13e54:	vst1.64	{d20-d21}, [r0]
   13e58:	mov	r0, r6
   13e5c:	mov	r1, r2
   13e60:	mov	r2, #1
   13e64:	bl	1291c <__assert_fail@plt+0x1568>
   13e68:	mov	r0, #0
   13e6c:	mov	r1, r5
   13e70:	mov	r2, r4
   13e74:	mov	r3, r6
   13e78:	bl	13b7c <__assert_fail@plt+0x27c8>
   13e7c:	sub	sp, fp, #16
   13e80:	pop	{r4, r5, r6, sl, fp, pc}
   13e84:	mov	r2, r1
   13e88:	mvn	r1, #0
   13e8c:	b	13e10 <__assert_fail@plt+0x2a5c>
   13e90:	mov	r1, #58	; 0x3a
   13e94:	b	13e84 <__assert_fail@plt+0x2ad0>
   13e98:	mov	r2, #58	; 0x3a
   13e9c:	b	13e10 <__assert_fail@plt+0x2a5c>
   13ea0:	push	{r4, r5, r6, sl, fp, lr}
   13ea4:	add	fp, sp, #16
   13ea8:	sub	sp, sp, #48	; 0x30
   13eac:	mov	r4, r2
   13eb0:	mov	r5, r0
   13eb4:	mov	r6, sp
   13eb8:	mov	r0, r6
   13ebc:	bl	13d78 <__assert_fail@plt+0x29c4>
   13ec0:	mov	r0, r6
   13ec4:	mov	r1, #58	; 0x3a
   13ec8:	mov	r2, #1
   13ecc:	bl	1291c <__assert_fail@plt+0x1568>
   13ed0:	mov	r0, r5
   13ed4:	mov	r1, r4
   13ed8:	mvn	r2, #0
   13edc:	mov	r3, r6
   13ee0:	bl	13b7c <__assert_fail@plt+0x27c8>
   13ee4:	sub	sp, fp, #16
   13ee8:	pop	{r4, r5, r6, sl, fp, pc}
   13eec:	push	{fp, lr}
   13ef0:	mov	fp, sp
   13ef4:	sub	sp, sp, #8
   13ef8:	mvn	ip, #0
   13efc:	str	ip, [sp]
   13f00:	bl	13f0c <__assert_fail@plt+0x2b58>
   13f04:	mov	sp, fp
   13f08:	pop	{fp, pc}
   13f0c:	push	{r4, r5, r6, r7, fp, lr}
   13f10:	add	fp, sp, #16
   13f14:	sub	sp, sp, #48	; 0x30
   13f18:	mov	r7, r3
   13f1c:	mov	r5, r0
   13f20:	movw	r0, #33256	; 0x81e8
   13f24:	movt	r0, #2
   13f28:	add	r3, r0, #16
   13f2c:	mov	r4, #32
   13f30:	vld1.64	{d16-d17}, [r0], r4
   13f34:	vld1.64	{d18-d19}, [r3]
   13f38:	mov	r6, sp
   13f3c:	add	r3, r6, #16
   13f40:	vld1.64	{d20-d21}, [r0]
   13f44:	vst1.64	{d18-d19}, [r3]
   13f48:	mov	r0, r6
   13f4c:	vst1.64	{d16-d17}, [r0], r4
   13f50:	vst1.64	{d20-d21}, [r0]
   13f54:	mov	r0, r6
   13f58:	bl	12974 <__assert_fail@plt+0x15c0>
   13f5c:	ldr	r2, [fp, #8]
   13f60:	mov	r0, r5
   13f64:	mov	r1, r7
   13f68:	mov	r3, r6
   13f6c:	bl	13b7c <__assert_fail@plt+0x27c8>
   13f70:	sub	sp, fp, #16
   13f74:	pop	{r4, r5, r6, r7, fp, pc}
   13f78:	mov	r3, r2
   13f7c:	mov	r2, r1
   13f80:	mov	r1, r0
   13f84:	mov	r0, #0
   13f88:	b	13eec <__assert_fail@plt+0x2b38>
   13f8c:	push	{fp, lr}
   13f90:	mov	fp, sp
   13f94:	sub	sp, sp, #8
   13f98:	mov	ip, r2
   13f9c:	mov	r2, r1
   13fa0:	mov	r1, r0
   13fa4:	str	r3, [sp]
   13fa8:	mov	r0, #0
   13fac:	mov	r3, ip
   13fb0:	bl	13f0c <__assert_fail@plt+0x2b58>
   13fb4:	mov	sp, fp
   13fb8:	pop	{fp, pc}
   13fbc:	movw	r3, #33072	; 0x8130
   13fc0:	movt	r3, #2
   13fc4:	b	13b7c <__assert_fail@plt+0x27c8>
   13fc8:	mov	r2, r1
   13fcc:	mov	r1, r0
   13fd0:	mov	r0, #0
   13fd4:	b	13fbc <__assert_fail@plt+0x2c08>
   13fd8:	mvn	r2, #0
   13fdc:	b	13fbc <__assert_fail@plt+0x2c08>
   13fe0:	mov	r1, r0
   13fe4:	mov	r0, #0
   13fe8:	b	13fd8 <__assert_fail@plt+0x2c24>
   13fec:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   13ff0:	add	fp, sp, #24
   13ff4:	sub	sp, sp, #16
   13ff8:	mov	r4, r1
   13ffc:	mov	r5, r0
   14000:	mov	r7, #0
   14004:	mov	r0, #0
   14008:	mov	r1, r5
   1400c:	mov	r2, #5
   14010:	bl	11180 <dcgettext@plt>
   14014:	cmp	r0, r5
   14018:	beq	14024 <__assert_fail@plt+0x2c70>
   1401c:	sub	sp, fp, #24
   14020:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14024:	bl	15bf4 <__assert_fail@plt+0x4840>
   14028:	mov	r6, r0
   1402c:	mov	r8, #56	; 0x38
   14030:	mov	r0, #45	; 0x2d
   14034:	stm	sp, {r0, r8}
   14038:	str	r7, [sp, #8]
   1403c:	str	r7, [sp, #12]
   14040:	mov	r0, r6
   14044:	mov	r1, #85	; 0x55
   14048:	mov	r2, #84	; 0x54
   1404c:	mov	r3, #70	; 0x46
   14050:	bl	140e8 <__assert_fail@plt+0x2d34>
   14054:	cmp	r0, #0
   14058:	beq	14074 <__assert_fail@plt+0x2cc0>
   1405c:	ldrb	r1, [r5]
   14060:	movw	r2, #27362	; 0x6ae2
   14064:	movt	r2, #1
   14068:	movw	r0, #27366	; 0x6ae6
   1406c:	movt	r0, #1
   14070:	b	140b8 <__assert_fail@plt+0x2d04>
   14074:	mov	r0, #48	; 0x30
   14078:	mov	r1, #51	; 0x33
   1407c:	str	r8, [sp]
   14080:	stmib	sp, {r0, r1}
   14084:	str	r0, [sp, #12]
   14088:	mov	r0, r6
   1408c:	mov	r1, #71	; 0x47
   14090:	mov	r2, #66	; 0x42
   14094:	mov	r3, #49	; 0x31
   14098:	bl	140e8 <__assert_fail@plt+0x2d34>
   1409c:	cmp	r0, #0
   140a0:	beq	140c8 <__assert_fail@plt+0x2d14>
   140a4:	ldrb	r1, [r5]
   140a8:	movw	r2, #27370	; 0x6aea
   140ac:	movt	r2, #1
   140b0:	movw	r0, #27374	; 0x6aee
   140b4:	movt	r0, #1
   140b8:	cmp	r1, #96	; 0x60
   140bc:	moveq	r0, r2
   140c0:	sub	sp, fp, #24
   140c4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   140c8:	movw	r1, #27356	; 0x6adc
   140cc:	movt	r1, #1
   140d0:	movw	r0, #27360	; 0x6ae0
   140d4:	movt	r0, #1
   140d8:	cmp	r4, #9
   140dc:	moveq	r0, r1
   140e0:	sub	sp, fp, #24
   140e4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   140e8:	push	{r4, r5, r6, r7, fp, lr}
   140ec:	add	fp, sp, #16
   140f0:	sub	sp, sp, #16
   140f4:	mov	r4, r3
   140f8:	mov	r5, r2
   140fc:	mov	r7, r1
   14100:	mov	r6, r0
   14104:	mov	r0, r1
   14108:	bl	15900 <__assert_fail@plt+0x454c>
   1410c:	ldrb	r1, [r6]
   14110:	cmp	r0, #0
   14114:	andne	r1, r1, #223	; 0xdf
   14118:	mov	r0, #0
   1411c:	cmp	r1, r7
   14120:	bne	14158 <__assert_fail@plt+0x2da4>
   14124:	cmp	r7, #0
   14128:	beq	14160 <__assert_fail@plt+0x2dac>
   1412c:	ldr	r0, [fp, #20]
   14130:	ldr	r1, [fp, #16]
   14134:	ldr	r2, [fp, #12]
   14138:	ldr	r3, [fp, #8]
   1413c:	str	r2, [sp]
   14140:	str	r1, [sp, #4]
   14144:	str	r0, [sp, #8]
   14148:	mov	r0, r6
   1414c:	mov	r1, r5
   14150:	mov	r2, r4
   14154:	bl	1416c <__assert_fail@plt+0x2db8>
   14158:	sub	sp, fp, #16
   1415c:	pop	{r4, r5, r6, r7, fp, pc}
   14160:	mov	r0, #1
   14164:	sub	sp, fp, #16
   14168:	pop	{r4, r5, r6, r7, fp, pc}
   1416c:	push	{r4, r5, r6, r7, fp, lr}
   14170:	add	fp, sp, #16
   14174:	sub	sp, sp, #8
   14178:	mov	r4, r3
   1417c:	mov	r5, r2
   14180:	mov	r7, r1
   14184:	mov	r6, r0
   14188:	mov	r0, r1
   1418c:	bl	15900 <__assert_fail@plt+0x454c>
   14190:	ldrb	r1, [r6, #1]
   14194:	cmp	r0, #0
   14198:	andne	r1, r1, #223	; 0xdf
   1419c:	mov	r0, #0
   141a0:	cmp	r1, r7
   141a4:	bne	141d4 <__assert_fail@plt+0x2e20>
   141a8:	cmp	r7, #0
   141ac:	beq	141dc <__assert_fail@plt+0x2e28>
   141b0:	ldr	r0, [fp, #16]
   141b4:	ldr	r1, [fp, #12]
   141b8:	ldr	r3, [fp, #8]
   141bc:	str	r1, [sp]
   141c0:	str	r0, [sp, #4]
   141c4:	mov	r0, r6
   141c8:	mov	r1, r5
   141cc:	mov	r2, r4
   141d0:	bl	141e8 <__assert_fail@plt+0x2e34>
   141d4:	sub	sp, fp, #16
   141d8:	pop	{r4, r5, r6, r7, fp, pc}
   141dc:	mov	r0, #1
   141e0:	sub	sp, fp, #16
   141e4:	pop	{r4, r5, r6, r7, fp, pc}
   141e8:	push	{r4, r5, r6, r7, fp, lr}
   141ec:	add	fp, sp, #16
   141f0:	sub	sp, sp, #8
   141f4:	mov	r4, r3
   141f8:	mov	r5, r2
   141fc:	mov	r7, r1
   14200:	mov	r6, r0
   14204:	mov	r0, r1
   14208:	bl	15900 <__assert_fail@plt+0x454c>
   1420c:	ldrb	r1, [r6, #2]
   14210:	cmp	r0, #0
   14214:	andne	r1, r1, #223	; 0xdf
   14218:	mov	r0, #0
   1421c:	cmp	r1, r7
   14220:	bne	14248 <__assert_fail@plt+0x2e94>
   14224:	cmp	r7, #0
   14228:	beq	14250 <__assert_fail@plt+0x2e9c>
   1422c:	ldr	r0, [fp, #12]
   14230:	ldr	r3, [fp, #8]
   14234:	str	r0, [sp]
   14238:	mov	r0, r6
   1423c:	mov	r1, r5
   14240:	mov	r2, r4
   14244:	bl	1425c <__assert_fail@plt+0x2ea8>
   14248:	sub	sp, fp, #16
   1424c:	pop	{r4, r5, r6, r7, fp, pc}
   14250:	mov	r0, #1
   14254:	sub	sp, fp, #16
   14258:	pop	{r4, r5, r6, r7, fp, pc}
   1425c:	push	{r4, r5, r6, r7, fp, lr}
   14260:	add	fp, sp, #16
   14264:	mov	r4, r3
   14268:	mov	r5, r2
   1426c:	mov	r7, r1
   14270:	mov	r6, r0
   14274:	mov	r0, r1
   14278:	bl	15900 <__assert_fail@plt+0x454c>
   1427c:	ldrb	r1, [r6, #3]
   14280:	ldr	r3, [fp, #8]
   14284:	cmp	r0, #0
   14288:	andne	r1, r1, #223	; 0xdf
   1428c:	mov	r0, #0
   14290:	cmp	r1, r7
   14294:	bne	142b8 <__assert_fail@plt+0x2f04>
   14298:	cmp	r7, #0
   1429c:	beq	142b4 <__assert_fail@plt+0x2f00>
   142a0:	mov	r0, r6
   142a4:	mov	r1, r5
   142a8:	mov	r2, r4
   142ac:	pop	{r4, r5, r6, r7, fp, lr}
   142b0:	b	142bc <__assert_fail@plt+0x2f08>
   142b4:	mov	r0, #1
   142b8:	pop	{r4, r5, r6, r7, fp, pc}
   142bc:	push	{r4, r5, r6, r7, fp, lr}
   142c0:	add	fp, sp, #16
   142c4:	mov	r4, r3
   142c8:	mov	r5, r2
   142cc:	mov	r7, r1
   142d0:	mov	r6, r0
   142d4:	mov	r0, r1
   142d8:	bl	15900 <__assert_fail@plt+0x454c>
   142dc:	ldrb	r1, [r6, #4]
   142e0:	cmp	r0, #0
   142e4:	andne	r1, r1, #223	; 0xdf
   142e8:	mov	r0, #0
   142ec:	cmp	r1, r7
   142f0:	bne	14314 <__assert_fail@plt+0x2f60>
   142f4:	cmp	r7, #0
   142f8:	beq	14310 <__assert_fail@plt+0x2f5c>
   142fc:	mov	r0, r6
   14300:	mov	r1, r5
   14304:	mov	r2, r4
   14308:	pop	{r4, r5, r6, r7, fp, lr}
   1430c:	b	14318 <__assert_fail@plt+0x2f64>
   14310:	mov	r0, #1
   14314:	pop	{r4, r5, r6, r7, fp, pc}
   14318:	push	{r4, r5, r6, sl, fp, lr}
   1431c:	add	fp, sp, #16
   14320:	mov	r4, r2
   14324:	mov	r6, r1
   14328:	mov	r5, r0
   1432c:	mov	r0, r1
   14330:	bl	15900 <__assert_fail@plt+0x454c>
   14334:	ldrb	r1, [r5, #5]
   14338:	cmp	r0, #0
   1433c:	andne	r1, r1, #223	; 0xdf
   14340:	mov	r0, #0
   14344:	cmp	r1, r6
   14348:	bne	14368 <__assert_fail@plt+0x2fb4>
   1434c:	cmp	r6, #0
   14350:	beq	14364 <__assert_fail@plt+0x2fb0>
   14354:	mov	r0, r5
   14358:	mov	r1, r4
   1435c:	pop	{r4, r5, r6, sl, fp, lr}
   14360:	b	1436c <__assert_fail@plt+0x2fb8>
   14364:	mov	r0, #1
   14368:	pop	{r4, r5, r6, sl, fp, pc}
   1436c:	push	{r4, r5, fp, lr}
   14370:	add	fp, sp, #8
   14374:	mov	r5, r1
   14378:	mov	r4, r0
   1437c:	mov	r0, r1
   14380:	bl	15900 <__assert_fail@plt+0x454c>
   14384:	ldrb	r1, [r4, #6]
   14388:	cmp	r0, #0
   1438c:	andne	r1, r1, #223	; 0xdf
   14390:	mov	r0, #0
   14394:	cmp	r1, r5
   14398:	popne	{r4, r5, fp, pc}
   1439c:	cmp	r5, #0
   143a0:	beq	143b0 <__assert_fail@plt+0x2ffc>
   143a4:	mov	r0, r4
   143a8:	pop	{r4, r5, fp, lr}
   143ac:	b	143b8 <__assert_fail@plt+0x3004>
   143b0:	mov	r0, #1
   143b4:	pop	{r4, r5, fp, pc}
   143b8:	push	{r4, sl, fp, lr}
   143bc:	add	fp, sp, #8
   143c0:	mov	r4, r0
   143c4:	mov	r0, #0
   143c8:	bl	15900 <__assert_fail@plt+0x454c>
   143cc:	ldrb	r1, [r4, #7]
   143d0:	cmp	r0, #0
   143d4:	beq	143e8 <__assert_fail@plt+0x3034>
   143d8:	tst	r1, #223	; 0xdf
   143dc:	bne	143f0 <__assert_fail@plt+0x303c>
   143e0:	mov	r0, #1
   143e4:	pop	{r4, sl, fp, pc}
   143e8:	cmp	r1, #0
   143ec:	beq	143e0 <__assert_fail@plt+0x302c>
   143f0:	mov	r0, #0
   143f4:	pop	{r4, sl, fp, pc}
   143f8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   143fc:	add	fp, sp, #28
   14400:	sub	sp, sp, #12
   14404:	mov	r9, r3
   14408:	mov	r4, r2
   1440c:	mov	r8, r1
   14410:	mov	r7, r0
   14414:	ldr	sl, [fp, #8]
   14418:	cmp	r2, #0
   1441c:	beq	14434 <__assert_fail@plt+0x3080>
   14420:	mov	r0, r7
   14424:	mov	r1, #58	; 0x3a
   14428:	bl	112ac <strchr@plt>
   1442c:	mov	r6, r0
   14430:	b	14438 <__assert_fail@plt+0x3084>
   14434:	mov	r6, #0
   14438:	stm	sp, {r9, sl}
   1443c:	mov	r0, r7
   14440:	mov	r1, r6
   14444:	mov	r2, r8
   14448:	mov	r3, r4
   1444c:	bl	144b4 <__assert_fail@plt+0x3100>
   14450:	mov	r5, r0
   14454:	cmp	r4, #0
   14458:	beq	144a8 <__assert_fail@plt+0x30f4>
   1445c:	cmp	r6, #0
   14460:	bne	144a8 <__assert_fail@plt+0x30f4>
   14464:	cmp	r5, #0
   14468:	beq	144a8 <__assert_fail@plt+0x30f4>
   1446c:	mov	r0, r7
   14470:	mov	r1, #46	; 0x2e
   14474:	bl	112ac <strchr@plt>
   14478:	cmp	r0, #0
   1447c:	beq	144a8 <__assert_fail@plt+0x30f4>
   14480:	mov	r1, r0
   14484:	stm	sp, {r9, sl}
   14488:	mov	r0, r7
   1448c:	mov	r2, r8
   14490:	mov	r3, r4
   14494:	bl	144b4 <__assert_fail@plt+0x3100>
   14498:	cmp	r0, #0
   1449c:	movne	r0, r5
   144a0:	sub	sp, fp, #28
   144a4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   144a8:	mov	r0, r5
   144ac:	sub	sp, fp, #28
   144b0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   144b4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   144b8:	add	fp, sp, #28
   144bc:	sub	sp, sp, #36	; 0x24
   144c0:	mov	sl, r3
   144c4:	mov	r9, r2
   144c8:	mov	r4, r1
   144cc:	ldr	r3, [r2]
   144d0:	ldr	r2, [fp, #8]
   144d4:	cmp	sl, #0
   144d8:	beq	144e4 <__assert_fail@plt+0x3130>
   144dc:	ldr	r1, [sl]
   144e0:	b	144e8 <__assert_fail@plt+0x3134>
   144e4:	mvn	r1, #0
   144e8:	str	r1, [sp, #8]
   144ec:	ldr	r8, [fp, #12]
   144f0:	cmp	r2, #0
   144f4:	movne	r1, #0
   144f8:	strne	r1, [r2]
   144fc:	cmp	r8, #0
   14500:	movne	r1, #0
   14504:	strne	r1, [r8]
   14508:	cmp	r4, #0
   1450c:	str	r3, [sp, #4]
   14510:	beq	14544 <__assert_fail@plt+0x3190>
   14514:	subs	r5, r4, r0
   14518:	beq	145d4 <__assert_fail@plt+0x3220>
   1451c:	add	r1, r5, #1
   14520:	bl	14f80 <__assert_fail@plt+0x3bcc>
   14524:	mov	r7, r0
   14528:	mov	r0, #0
   1452c:	strb	r0, [r7, r5]
   14530:	mov	r6, r4
   14534:	ldrb	r0, [r6, #1]!
   14538:	cmp	r0, #0
   1453c:	moveq	r6, r0
   14540:	b	1455c <__assert_fail@plt+0x31a8>
   14544:	ldrb	r1, [r0]
   14548:	cmp	r1, #0
   1454c:	beq	146f0 <__assert_fail@plt+0x333c>
   14550:	bl	14fd8 <__assert_fail@plt+0x3c24>
   14554:	mov	r7, r0
   14558:	mov	r6, #0
   1455c:	ldrb	r0, [r7]
   14560:	cmp	r0, #43	; 0x2b
   14564:	beq	145b4 <__assert_fail@plt+0x3200>
   14568:	mov	r0, r7
   1456c:	bl	11108 <getpwnam@plt>
   14570:	cmp	r0, #0
   14574:	beq	145b4 <__assert_fail@plt+0x3200>
   14578:	ldr	r1, [r0, #8]
   1457c:	str	r1, [sp, #4]
   14580:	mov	r5, #0
   14584:	cmp	r4, #0
   14588:	beq	146fc <__assert_fail@plt+0x3348>
   1458c:	cmp	r6, #0
   14590:	bne	146fc <__assert_fail@plt+0x3348>
   14594:	ldr	r4, [r0, #12]
   14598:	mov	r0, r4
   1459c:	bl	11390 <getgrgid@plt>
   145a0:	cmp	r0, #0
   145a4:	str	r4, [sp, #8]
   145a8:	beq	14704 <__assert_fail@plt+0x3350>
   145ac:	ldr	r0, [r0]
   145b0:	b	14714 <__assert_fail@plt+0x3360>
   145b4:	cmp	r4, #0
   145b8:	beq	14694 <__assert_fail@plt+0x32e0>
   145bc:	cmp	r6, #0
   145c0:	bne	14694 <__assert_fail@plt+0x32e0>
   145c4:	movw	r5, #27491	; 0x6b63
   145c8:	movt	r5, #1
   145cc:	mov	r4, #0
   145d0:	b	14720 <__assert_fail@plt+0x336c>
   145d4:	ldrb	r0, [r4, #1]!
   145d8:	cmp	r0, #0
   145dc:	moveq	r4, r0
   145e0:	mov	r7, #0
   145e4:	mov	r6, r4
   145e8:	mov	r4, #0
   145ec:	mov	r5, #0
   145f0:	cmp	r6, #0
   145f4:	beq	1472c <__assert_fail@plt+0x3378>
   145f8:	cmp	r5, #0
   145fc:	bne	1472c <__assert_fail@plt+0x3378>
   14600:	ldrb	r0, [r6]
   14604:	cmp	r0, #43	; 0x2b
   14608:	beq	1462c <__assert_fail@plt+0x3278>
   1460c:	mov	r0, r6
   14610:	bl	1139c <getgrnam@plt>
   14614:	cmp	r0, #0
   14618:	beq	1462c <__assert_fail@plt+0x3278>
   1461c:	ldr	r0, [r0, #8]
   14620:	str	r0, [sp, #8]
   14624:	mov	r5, #0
   14628:	b	14680 <__assert_fail@plt+0x32cc>
   1462c:	movw	r0, #25247	; 0x629f
   14630:	movt	r0, #1
   14634:	str	r0, [sp]
   14638:	add	r3, sp, #12
   1463c:	mov	r0, r6
   14640:	mov	r1, #0
   14644:	mov	r2, #10
   14648:	bl	15070 <__assert_fail@plt+0x3cbc>
   1464c:	clz	r0, r0
   14650:	lsr	r0, r0, #5
   14654:	ldr	r1, [sp, #12]
   14658:	mvn	r2, #0
   1465c:	subs	r2, r1, r2
   14660:	movwne	r2, #1
   14664:	ands	r0, r0, r2
   14668:	ldr	r0, [sp, #8]
   1466c:	movne	r0, r1
   14670:	str	r0, [sp, #8]
   14674:	movw	r5, #27477	; 0x6b55
   14678:	movt	r5, #1
   1467c:	movwne	r5, #0
   14680:	bl	110e4 <endgrent@plt>
   14684:	mov	r0, r6
   14688:	bl	14fd8 <__assert_fail@plt+0x3c24>
   1468c:	mov	r4, r0
   14690:	b	1472c <__assert_fail@plt+0x3378>
   14694:	movw	r0, #25247	; 0x629f
   14698:	movt	r0, #1
   1469c:	str	r0, [sp]
   146a0:	mov	r4, #0
   146a4:	add	r3, sp, #12
   146a8:	mov	r0, r7
   146ac:	mov	r1, #0
   146b0:	mov	r2, #10
   146b4:	bl	15070 <__assert_fail@plt+0x3cbc>
   146b8:	clz	r0, r0
   146bc:	lsr	r0, r0, #5
   146c0:	ldr	r1, [sp, #12]
   146c4:	mvn	r2, #0
   146c8:	subs	r2, r1, r2
   146cc:	movwne	r2, #1
   146d0:	ands	r0, r0, r2
   146d4:	ldr	r0, [sp, #4]
   146d8:	movne	r0, r1
   146dc:	str	r0, [sp, #4]
   146e0:	movw	r5, #27464	; 0x6b48
   146e4:	movt	r5, #1
   146e8:	movwne	r5, #0
   146ec:	b	14720 <__assert_fail@plt+0x336c>
   146f0:	mov	r4, #0
   146f4:	mov	r7, #0
   146f8:	b	14738 <__assert_fail@plt+0x3384>
   146fc:	mov	r4, #0
   14700:	b	14720 <__assert_fail@plt+0x336c>
   14704:	add	r2, sp, #12
   14708:	mov	r0, r4
   1470c:	mov	r1, #0
   14710:	bl	12790 <__assert_fail@plt+0x13dc>
   14714:	bl	14fd8 <__assert_fail@plt+0x3c24>
   14718:	mov	r4, r0
   1471c:	bl	110e4 <endgrent@plt>
   14720:	bl	1133c <endpwent@plt>
   14724:	cmp	r6, #0
   14728:	bne	145f8 <__assert_fail@plt+0x3244>
   1472c:	mov	r6, #0
   14730:	cmp	r5, #0
   14734:	bne	14774 <__assert_fail@plt+0x33c0>
   14738:	ldr	r0, [sp, #4]
   1473c:	str	r0, [r9]
   14740:	cmp	sl, #0
   14744:	ldrne	r0, [sp, #8]
   14748:	strne	r0, [sl]
   1474c:	ldr	r0, [fp, #8]
   14750:	cmp	r0, #0
   14754:	strne	r7, [r0]
   14758:	movne	r7, #0
   1475c:	mov	r6, #1
   14760:	cmp	r8, #0
   14764:	moveq	r5, #0
   14768:	strne	r4, [r8]
   1476c:	movne	r5, #0
   14770:	movne	r4, #0
   14774:	mov	r0, r7
   14778:	bl	12768 <__assert_fail@plt+0x13b4>
   1477c:	mov	r0, r4
   14780:	bl	12768 <__assert_fail@plt+0x13b4>
   14784:	mov	r0, #0
   14788:	cmp	r6, #0
   1478c:	bne	147a0 <__assert_fail@plt+0x33ec>
   14790:	mov	r0, #0
   14794:	mov	r1, r5
   14798:	mov	r2, #5
   1479c:	bl	11180 <dcgettext@plt>
   147a0:	sub	sp, fp, #28
   147a4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   147a8:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   147ac:	add	fp, sp, #24
   147b0:	sub	sp, sp, #32
   147b4:	mov	r4, r2
   147b8:	mov	r8, r0
   147bc:	ldr	r6, [fp, #12]
   147c0:	ldr	r7, [fp, #8]
   147c4:	cmp	r1, #0
   147c8:	beq	147f0 <__assert_fail@plt+0x343c>
   147cc:	mov	r5, r1
   147d0:	str	r4, [sp]
   147d4:	str	r3, [sp, #4]
   147d8:	movw	r2, #27504	; 0x6b70
   147dc:	movt	r2, #1
   147e0:	mov	r0, r8
   147e4:	mov	r1, #1
   147e8:	mov	r3, r5
   147ec:	b	14808 <__assert_fail@plt+0x3454>
   147f0:	str	r3, [sp]
   147f4:	movw	r2, #27516	; 0x6b7c
   147f8:	movt	r2, #1
   147fc:	mov	r0, r8
   14800:	mov	r1, #1
   14804:	mov	r3, r4
   14808:	bl	1130c <__fprintf_chk@plt>
   1480c:	movw	r1, #27523	; 0x6b83
   14810:	movt	r1, #1
   14814:	mov	r0, #0
   14818:	mov	r2, #5
   1481c:	bl	11180 <dcgettext@plt>
   14820:	mov	r3, r0
   14824:	movw	r0, #2022	; 0x7e6
   14828:	str	r0, [sp]
   1482c:	movw	r2, #28241	; 0x6e51
   14830:	movt	r2, #1
   14834:	mov	r0, r8
   14838:	mov	r1, #1
   1483c:	bl	1130c <__fprintf_chk@plt>
   14840:	movw	r4, #25246	; 0x629e
   14844:	movt	r4, #1
   14848:	mov	r0, r4
   1484c:	mov	r1, r8
   14850:	bl	110f0 <fputs_unlocked@plt>
   14854:	movw	r1, #27527	; 0x6b87
   14858:	movt	r1, #1
   1485c:	mov	r0, #0
   14860:	mov	r2, #5
   14864:	bl	11180 <dcgettext@plt>
   14868:	mov	r2, r0
   1486c:	movw	r3, #27698	; 0x6c32
   14870:	movt	r3, #1
   14874:	mov	r0, r8
   14878:	mov	r1, #1
   1487c:	bl	1130c <__fprintf_chk@plt>
   14880:	mov	r0, r4
   14884:	mov	r1, r8
   14888:	bl	110f0 <fputs_unlocked@plt>
   1488c:	cmp	r6, #9
   14890:	bhi	148cc <__assert_fail@plt+0x3518>
   14894:	add	r0, pc, #0
   14898:	ldr	pc, [r0, r6, lsl #2]
   1489c:	andeq	r4, r1, r4, asr #17
   148a0:	ldrdeq	r4, [r1], -r8
   148a4:	andeq	r4, r1, r8, lsl #18
   148a8:	andeq	r4, r1, r0, lsr r9
   148ac:	andeq	r4, r1, r8, asr r9
   148b0:	andeq	r4, r1, r0, lsl #19
   148b4:	andeq	r4, r1, r8, lsr #19
   148b8:	andeq	r4, r1, r0, ror #19
   148bc:	andeq	r4, r1, r0, lsl #21
   148c0:	andeq	r4, r1, r8, lsr #20
   148c4:	sub	sp, fp, #24
   148c8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   148cc:	movw	r1, #28051	; 0x6d93
   148d0:	movt	r1, #1
   148d4:	b	14a30 <__assert_fail@plt+0x367c>
   148d8:	movw	r1, #27732	; 0x6c54
   148dc:	movt	r1, #1
   148e0:	mov	r0, #0
   148e4:	mov	r2, #5
   148e8:	bl	11180 <dcgettext@plt>
   148ec:	mov	r2, r0
   148f0:	ldr	r3, [r7]
   148f4:	mov	r0, r8
   148f8:	mov	r1, #1
   148fc:	sub	sp, fp, #24
   14900:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   14904:	b	1130c <__fprintf_chk@plt>
   14908:	movw	r1, #27748	; 0x6c64
   1490c:	movt	r1, #1
   14910:	mov	r0, #0
   14914:	mov	r2, #5
   14918:	bl	11180 <dcgettext@plt>
   1491c:	mov	r2, r0
   14920:	ldr	r3, [r7]
   14924:	ldr	r0, [r7, #4]
   14928:	str	r0, [sp]
   1492c:	b	14a1c <__assert_fail@plt+0x3668>
   14930:	movw	r1, #27771	; 0x6c7b
   14934:	movt	r1, #1
   14938:	mov	r0, #0
   1493c:	mov	r2, #5
   14940:	bl	11180 <dcgettext@plt>
   14944:	mov	r2, r0
   14948:	ldr	r3, [r7]
   1494c:	ldmib	r7, {r0, r1}
   14950:	stm	sp, {r0, r1}
   14954:	b	14a1c <__assert_fail@plt+0x3668>
   14958:	movw	r1, #27799	; 0x6c97
   1495c:	movt	r1, #1
   14960:	mov	r0, #0
   14964:	mov	r2, #5
   14968:	bl	11180 <dcgettext@plt>
   1496c:	mov	r2, r0
   14970:	ldr	r3, [r7]
   14974:	ldmib	r7, {r0, r1, r7}
   14978:	stm	sp, {r0, r1, r7}
   1497c:	b	14a1c <__assert_fail@plt+0x3668>
   14980:	movw	r1, #27831	; 0x6cb7
   14984:	movt	r1, #1
   14988:	mov	r0, #0
   1498c:	mov	r2, #5
   14990:	bl	11180 <dcgettext@plt>
   14994:	mov	r2, r0
   14998:	ldr	r3, [r7]
   1499c:	ldmib	r7, {r0, r1, r6, r7}
   149a0:	stm	sp, {r0, r1, r6, r7}
   149a4:	b	14a1c <__assert_fail@plt+0x3668>
   149a8:	movw	r1, #27867	; 0x6cdb
   149ac:	movt	r1, #1
   149b0:	mov	r0, #0
   149b4:	mov	r2, #5
   149b8:	bl	11180 <dcgettext@plt>
   149bc:	mov	r2, r0
   149c0:	ldr	r3, [r7]
   149c4:	ldmib	r7, {r0, r1, r6}
   149c8:	ldr	r5, [r7, #16]
   149cc:	ldr	r7, [r7, #20]
   149d0:	stm	sp, {r0, r1, r6}
   149d4:	str	r5, [sp, #12]
   149d8:	str	r7, [sp, #16]
   149dc:	b	14a1c <__assert_fail@plt+0x3668>
   149e0:	movw	r1, #27907	; 0x6d03
   149e4:	movt	r1, #1
   149e8:	mov	r0, #0
   149ec:	mov	r2, #5
   149f0:	bl	11180 <dcgettext@plt>
   149f4:	mov	r2, r0
   149f8:	ldr	r3, [r7]
   149fc:	ldmib	r7, {r0, r1, r6}
   14a00:	ldr	r5, [r7, #16]
   14a04:	ldr	r4, [r7, #20]
   14a08:	ldr	r7, [r7, #24]
   14a0c:	stm	sp, {r0, r1, r6}
   14a10:	str	r5, [sp, #12]
   14a14:	str	r4, [sp, #16]
   14a18:	str	r7, [sp, #20]
   14a1c:	mov	r0, r8
   14a20:	mov	r1, #1
   14a24:	b	14ad0 <__assert_fail@plt+0x371c>
   14a28:	movw	r1, #27999	; 0x6d5f
   14a2c:	movt	r1, #1
   14a30:	mov	r0, #0
   14a34:	mov	r2, #5
   14a38:	bl	11180 <dcgettext@plt>
   14a3c:	mov	ip, r0
   14a40:	ldr	r3, [r7]
   14a44:	ldr	r0, [r7, #4]
   14a48:	ldr	r1, [r7, #8]
   14a4c:	ldr	r6, [r7, #12]
   14a50:	ldr	r5, [r7, #16]
   14a54:	ldr	r4, [r7, #20]
   14a58:	ldr	r2, [r7, #24]
   14a5c:	ldr	lr, [r7, #28]
   14a60:	ldr	r7, [r7, #32]
   14a64:	stm	sp, {r0, r1, r6}
   14a68:	str	r5, [sp, #12]
   14a6c:	str	r4, [sp, #16]
   14a70:	str	r2, [sp, #20]
   14a74:	str	lr, [sp, #24]
   14a78:	str	r7, [sp, #28]
   14a7c:	b	14ac4 <__assert_fail@plt+0x3710>
   14a80:	movw	r1, #27951	; 0x6d2f
   14a84:	movt	r1, #1
   14a88:	mov	r0, #0
   14a8c:	mov	r2, #5
   14a90:	bl	11180 <dcgettext@plt>
   14a94:	mov	ip, r0
   14a98:	ldr	r3, [r7]
   14a9c:	ldmib	r7, {r0, r1, r6}
   14aa0:	ldr	r5, [r7, #16]
   14aa4:	ldr	r4, [r7, #20]
   14aa8:	ldr	r2, [r7, #24]
   14aac:	ldr	r7, [r7, #28]
   14ab0:	stm	sp, {r0, r1, r6}
   14ab4:	str	r5, [sp, #12]
   14ab8:	str	r4, [sp, #16]
   14abc:	str	r2, [sp, #20]
   14ac0:	str	r7, [sp, #24]
   14ac4:	mov	r0, r8
   14ac8:	mov	r1, #1
   14acc:	mov	r2, ip
   14ad0:	bl	1130c <__fprintf_chk@plt>
   14ad4:	sub	sp, fp, #24
   14ad8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14adc:	push	{r4, sl, fp, lr}
   14ae0:	add	fp, sp, #8
   14ae4:	sub	sp, sp, #8
   14ae8:	mov	lr, #0
   14aec:	ldr	ip, [fp, #8]
   14af0:	ldr	r4, [ip, lr, lsl #2]
   14af4:	add	lr, lr, #1
   14af8:	cmp	r4, #0
   14afc:	bne	14af0 <__assert_fail@plt+0x373c>
   14b00:	sub	r4, lr, #1
   14b04:	str	ip, [sp]
   14b08:	str	r4, [sp, #4]
   14b0c:	bl	147a8 <__assert_fail@plt+0x33f4>
   14b10:	sub	sp, fp, #8
   14b14:	pop	{r4, sl, fp, pc}
   14b18:	push	{r4, r5, fp, lr}
   14b1c:	add	fp, sp, #8
   14b20:	sub	sp, sp, #48	; 0x30
   14b24:	mov	ip, #0
   14b28:	ldr	r4, [fp, #8]
   14b2c:	add	lr, sp, #8
   14b30:	ldr	r5, [r4]
   14b34:	str	r5, [lr, ip, lsl #2]
   14b38:	cmp	r5, #0
   14b3c:	beq	14b54 <__assert_fail@plt+0x37a0>
   14b40:	add	ip, ip, #1
   14b44:	add	r4, r4, #4
   14b48:	cmp	ip, #10
   14b4c:	bne	14b30 <__assert_fail@plt+0x377c>
   14b50:	mov	ip, #10
   14b54:	str	lr, [sp]
   14b58:	str	ip, [sp, #4]
   14b5c:	bl	147a8 <__assert_fail@plt+0x33f4>
   14b60:	sub	sp, fp, #8
   14b64:	pop	{r4, r5, fp, pc}
   14b68:	push	{fp, lr}
   14b6c:	mov	fp, sp
   14b70:	sub	sp, sp, #8
   14b74:	add	ip, fp, #8
   14b78:	str	ip, [sp, #4]
   14b7c:	str	ip, [sp]
   14b80:	bl	14b18 <__assert_fail@plt+0x3764>
   14b84:	mov	sp, fp
   14b88:	pop	{fp, pc}
   14b8c:	push	{fp, lr}
   14b90:	mov	fp, sp
   14b94:	movw	r0, #33140	; 0x8174
   14b98:	movt	r0, #2
   14b9c:	ldr	r1, [r0]
   14ba0:	movw	r0, #25246	; 0x629e
   14ba4:	movt	r0, #1
   14ba8:	bl	110f0 <fputs_unlocked@plt>
   14bac:	movw	r1, #28111	; 0x6dcf
   14bb0:	movt	r1, #1
   14bb4:	mov	r0, #0
   14bb8:	mov	r2, #5
   14bbc:	bl	11180 <dcgettext@plt>
   14bc0:	mov	r1, r0
   14bc4:	movw	r2, #28131	; 0x6de3
   14bc8:	movt	r2, #1
   14bcc:	mov	r0, #1
   14bd0:	bl	112f4 <__printf_chk@plt>
   14bd4:	movw	r1, #28153	; 0x6df9
   14bd8:	movt	r1, #1
   14bdc:	mov	r0, #0
   14be0:	mov	r2, #5
   14be4:	bl	11180 <dcgettext@plt>
   14be8:	mov	r1, r0
   14bec:	movw	r2, #26030	; 0x65ae
   14bf0:	movt	r2, #1
   14bf4:	movw	r3, #26536	; 0x67a8
   14bf8:	movt	r3, #1
   14bfc:	mov	r0, #1
   14c00:	bl	112f4 <__printf_chk@plt>
   14c04:	movw	r1, #28173	; 0x6e0d
   14c08:	movt	r1, #1
   14c0c:	mov	r0, #0
   14c10:	mov	r2, #5
   14c14:	bl	11180 <dcgettext@plt>
   14c18:	mov	r1, r0
   14c1c:	movw	r2, #28212	; 0x6e34
   14c20:	movt	r2, #1
   14c24:	mov	r0, #1
   14c28:	pop	{fp, lr}
   14c2c:	b	112f4 <__printf_chk@plt>
   14c30:	b	14c34 <__assert_fail@plt+0x3880>
   14c34:	push	{r4, r5, r6, sl, fp, lr}
   14c38:	add	fp, sp, #16
   14c3c:	mov	r4, r2
   14c40:	mov	r5, r1
   14c44:	mov	r6, r0
   14c48:	bl	15ea4 <__assert_fail@plt+0x4af0>
   14c4c:	cmp	r0, #0
   14c50:	popne	{r4, r5, r6, sl, fp, pc}
   14c54:	cmp	r6, #0
   14c58:	beq	14c6c <__assert_fail@plt+0x38b8>
   14c5c:	cmp	r5, #0
   14c60:	cmpne	r4, #0
   14c64:	bne	14c6c <__assert_fail@plt+0x38b8>
   14c68:	pop	{r4, r5, r6, sl, fp, pc}
   14c6c:	bl	14ff8 <__assert_fail@plt+0x3c44>
   14c70:	push	{fp, lr}
   14c74:	mov	fp, sp
   14c78:	bl	155c8 <__assert_fail@plt+0x4214>
   14c7c:	pop	{fp, lr}
   14c80:	b	14c84 <__assert_fail@plt+0x38d0>
   14c84:	cmp	r0, #0
   14c88:	bxne	lr
   14c8c:	push	{fp, lr}
   14c90:	mov	fp, sp
   14c94:	bl	14ff8 <__assert_fail@plt+0x3c44>
   14c98:	push	{fp, lr}
   14c9c:	mov	fp, sp
   14ca0:	bl	15bc0 <__assert_fail@plt+0x480c>
   14ca4:	pop	{fp, lr}
   14ca8:	b	14c84 <__assert_fail@plt+0x38d0>
   14cac:	b	14c70 <__assert_fail@plt+0x38bc>
   14cb0:	push	{r4, r5, fp, lr}
   14cb4:	add	fp, sp, #8
   14cb8:	mov	r4, r1
   14cbc:	mov	r5, r0
   14cc0:	bl	155f8 <__assert_fail@plt+0x4244>
   14cc4:	cmp	r0, #0
   14cc8:	popne	{r4, r5, fp, pc}
   14ccc:	cmp	r5, #0
   14cd0:	beq	14ce0 <__assert_fail@plt+0x392c>
   14cd4:	cmp	r4, #0
   14cd8:	bne	14ce0 <__assert_fail@plt+0x392c>
   14cdc:	pop	{r4, r5, fp, pc}
   14ce0:	bl	14ff8 <__assert_fail@plt+0x3c44>
   14ce4:	push	{fp, lr}
   14ce8:	mov	fp, sp
   14cec:	bl	15bc4 <__assert_fail@plt+0x4810>
   14cf0:	pop	{fp, lr}
   14cf4:	b	14c84 <__assert_fail@plt+0x38d0>
   14cf8:	push	{fp, lr}
   14cfc:	mov	fp, sp
   14d00:	bl	15bd4 <__assert_fail@plt+0x4820>
   14d04:	pop	{fp, lr}
   14d08:	b	14c84 <__assert_fail@plt+0x38d0>
   14d0c:	mov	r2, r1
   14d10:	mov	r1, r0
   14d14:	mov	r0, #0
   14d18:	b	14c34 <__assert_fail@plt+0x3880>
   14d1c:	mov	r2, r1
   14d20:	mov	r1, r0
   14d24:	mov	r0, #0
   14d28:	b	14cf8 <__assert_fail@plt+0x3944>
   14d2c:	mov	r2, #1
   14d30:	b	14d34 <__assert_fail@plt+0x3980>
   14d34:	push	{r4, r5, fp, lr}
   14d38:	add	fp, sp, #8
   14d3c:	mov	r4, r1
   14d40:	ldr	r5, [r1]
   14d44:	cmp	r0, #0
   14d48:	beq	14d60 <__assert_fail@plt+0x39ac>
   14d4c:	mov	r1, #1
   14d50:	add	r1, r1, r5, lsr #1
   14d54:	adds	r5, r5, r1
   14d58:	bcc	14d78 <__assert_fail@plt+0x39c4>
   14d5c:	bl	14ff8 <__assert_fail@plt+0x3c44>
   14d60:	cmp	r5, #0
   14d64:	bne	14d78 <__assert_fail@plt+0x39c4>
   14d68:	mov	r1, #64	; 0x40
   14d6c:	udiv	r5, r1, r2
   14d70:	cmp	r2, #64	; 0x40
   14d74:	addhi	r5, r5, #1
   14d78:	mov	r1, r5
   14d7c:	bl	14c34 <__assert_fail@plt+0x3880>
   14d80:	str	r5, [r4]
   14d84:	pop	{r4, r5, fp, pc}
   14d88:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   14d8c:	add	fp, sp, #24
   14d90:	mov	r8, r1
   14d94:	ldr	r6, [r1]
   14d98:	add	r1, r6, r6, asr #1
   14d9c:	cmp	r1, r6
   14da0:	mvnvs	r1, #-2147483648	; 0x80000000
   14da4:	cmp	r1, r3
   14da8:	mov	r5, r1
   14dac:	movgt	r5, r3
   14db0:	cmn	r3, #1
   14db4:	movle	r5, r1
   14db8:	ldr	r4, [fp, #8]
   14dbc:	cmn	r4, #1
   14dc0:	ble	14de8 <__assert_fail@plt+0x3a34>
   14dc4:	cmp	r4, #0
   14dc8:	beq	14e3c <__assert_fail@plt+0x3a88>
   14dcc:	cmn	r5, #1
   14dd0:	ble	14e10 <__assert_fail@plt+0x3a5c>
   14dd4:	mvn	r7, #-2147483648	; 0x80000000
   14dd8:	udiv	r1, r7, r4
   14ddc:	cmp	r1, r5
   14de0:	bge	14e3c <__assert_fail@plt+0x3a88>
   14de4:	b	14e4c <__assert_fail@plt+0x3a98>
   14de8:	cmn	r5, #1
   14dec:	ble	14e2c <__assert_fail@plt+0x3a78>
   14df0:	cmn	r4, #1
   14df4:	beq	14e3c <__assert_fail@plt+0x3a88>
   14df8:	mov	r1, #-2147483648	; 0x80000000
   14dfc:	sdiv	r1, r1, r4
   14e00:	mvn	r7, #-2147483648	; 0x80000000
   14e04:	cmp	r1, r5
   14e08:	bge	14e3c <__assert_fail@plt+0x3a88>
   14e0c:	b	14e4c <__assert_fail@plt+0x3a98>
   14e10:	beq	14e3c <__assert_fail@plt+0x3a88>
   14e14:	mov	r1, #-2147483648	; 0x80000000
   14e18:	sdiv	r1, r1, r5
   14e1c:	mvn	r7, #-2147483648	; 0x80000000
   14e20:	cmp	r1, r4
   14e24:	bge	14e3c <__assert_fail@plt+0x3a88>
   14e28:	b	14e4c <__assert_fail@plt+0x3a98>
   14e2c:	mvn	r7, #-2147483648	; 0x80000000
   14e30:	sdiv	r1, r7, r4
   14e34:	cmp	r5, r1
   14e38:	blt	14e4c <__assert_fail@plt+0x3a98>
   14e3c:	mul	r1, r5, r4
   14e40:	mov	r7, #64	; 0x40
   14e44:	cmp	r1, #63	; 0x3f
   14e48:	bgt	14e54 <__assert_fail@plt+0x3aa0>
   14e4c:	sdiv	r5, r7, r4
   14e50:	mul	r1, r5, r4
   14e54:	cmp	r0, #0
   14e58:	moveq	r7, #0
   14e5c:	streq	r7, [r8]
   14e60:	sub	r7, r5, r6
   14e64:	cmp	r7, r2
   14e68:	bge	14f14 <__assert_fail@plt+0x3b60>
   14e6c:	add	r5, r6, r2
   14e70:	mov	r1, #0
   14e74:	cmp	r5, r3
   14e78:	mov	r2, #0
   14e7c:	movwgt	r2, #1
   14e80:	cmn	r3, #1
   14e84:	movwgt	r1, #1
   14e88:	cmp	r5, r6
   14e8c:	bvs	14efc <__assert_fail@plt+0x3b48>
   14e90:	ands	r1, r1, r2
   14e94:	bne	14efc <__assert_fail@plt+0x3b48>
   14e98:	cmn	r4, #1
   14e9c:	ble	14ec4 <__assert_fail@plt+0x3b10>
   14ea0:	cmp	r4, #0
   14ea4:	beq	14f10 <__assert_fail@plt+0x3b5c>
   14ea8:	cmn	r5, #1
   14eac:	ble	14ee8 <__assert_fail@plt+0x3b34>
   14eb0:	mvn	r1, #-2147483648	; 0x80000000
   14eb4:	udiv	r1, r1, r4
   14eb8:	cmp	r1, r5
   14ebc:	bge	14f10 <__assert_fail@plt+0x3b5c>
   14ec0:	b	14efc <__assert_fail@plt+0x3b48>
   14ec4:	cmn	r5, #1
   14ec8:	ble	14f00 <__assert_fail@plt+0x3b4c>
   14ecc:	cmn	r4, #1
   14ed0:	beq	14f10 <__assert_fail@plt+0x3b5c>
   14ed4:	mov	r1, #-2147483648	; 0x80000000
   14ed8:	sdiv	r1, r1, r4
   14edc:	cmp	r1, r5
   14ee0:	bge	14f10 <__assert_fail@plt+0x3b5c>
   14ee4:	b	14efc <__assert_fail@plt+0x3b48>
   14ee8:	beq	14f10 <__assert_fail@plt+0x3b5c>
   14eec:	mov	r1, #-2147483648	; 0x80000000
   14ef0:	sdiv	r1, r1, r5
   14ef4:	cmp	r1, r4
   14ef8:	bge	14f10 <__assert_fail@plt+0x3b5c>
   14efc:	bl	14ff8 <__assert_fail@plt+0x3c44>
   14f00:	mvn	r1, #-2147483648	; 0x80000000
   14f04:	sdiv	r1, r1, r4
   14f08:	cmp	r5, r1
   14f0c:	blt	14efc <__assert_fail@plt+0x3b48>
   14f10:	mul	r1, r5, r4
   14f14:	bl	14cb0 <__assert_fail@plt+0x38fc>
   14f18:	str	r5, [r8]
   14f1c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14f20:	mov	r1, #1
   14f24:	b	14f28 <__assert_fail@plt+0x3b74>
   14f28:	push	{fp, lr}
   14f2c:	mov	fp, sp
   14f30:	bl	15574 <__assert_fail@plt+0x41c0>
   14f34:	pop	{fp, lr}
   14f38:	b	14c84 <__assert_fail@plt+0x38d0>
   14f3c:	mov	r1, #1
   14f40:	b	14f44 <__assert_fail@plt+0x3b90>
   14f44:	push	{fp, lr}
   14f48:	mov	fp, sp
   14f4c:	bl	15bd0 <__assert_fail@plt+0x481c>
   14f50:	pop	{fp, lr}
   14f54:	b	14c84 <__assert_fail@plt+0x38d0>
   14f58:	push	{r4, r5, fp, lr}
   14f5c:	add	fp, sp, #8
   14f60:	mov	r4, r1
   14f64:	mov	r5, r0
   14f68:	mov	r0, r1
   14f6c:	bl	14c70 <__assert_fail@plt+0x38bc>
   14f70:	mov	r1, r5
   14f74:	mov	r2, r4
   14f78:	pop	{r4, r5, fp, lr}
   14f7c:	b	11168 <memcpy@plt>
   14f80:	push	{r4, r5, fp, lr}
   14f84:	add	fp, sp, #8
   14f88:	mov	r4, r1
   14f8c:	mov	r5, r0
   14f90:	mov	r0, r1
   14f94:	bl	14c98 <__assert_fail@plt+0x38e4>
   14f98:	mov	r1, r5
   14f9c:	mov	r2, r4
   14fa0:	pop	{r4, r5, fp, lr}
   14fa4:	b	11168 <memcpy@plt>
   14fa8:	push	{r4, r5, fp, lr}
   14fac:	add	fp, sp, #8
   14fb0:	mov	r4, r1
   14fb4:	mov	r5, r0
   14fb8:	add	r0, r1, #1
   14fbc:	bl	14c98 <__assert_fail@plt+0x38e4>
   14fc0:	mov	r1, #0
   14fc4:	strb	r1, [r0, r4]
   14fc8:	mov	r1, r5
   14fcc:	mov	r2, r4
   14fd0:	pop	{r4, r5, fp, lr}
   14fd4:	b	11168 <memcpy@plt>
   14fd8:	push	{r4, sl, fp, lr}
   14fdc:	add	fp, sp, #8
   14fe0:	mov	r4, r0
   14fe4:	bl	112a0 <strlen@plt>
   14fe8:	add	r1, r0, #1
   14fec:	mov	r0, r4
   14ff0:	pop	{r4, sl, fp, lr}
   14ff4:	b	14f58 <__assert_fail@plt+0x3ba4>
   14ff8:	push	{fp, lr}
   14ffc:	mov	fp, sp
   15000:	movw	r0, #33048	; 0x8118
   15004:	movt	r0, #2
   15008:	ldr	r4, [r0]
   1500c:	movw	r1, #28288	; 0x6e80
   15010:	movt	r1, #1
   15014:	mov	r0, #0
   15018:	mov	r2, #5
   1501c:	bl	11180 <dcgettext@plt>
   15020:	mov	r3, r0
   15024:	movw	r2, #27209	; 0x6a49
   15028:	movt	r2, #1
   1502c:	mov	r0, r4
   15030:	mov	r1, #0
   15034:	bl	1121c <error@plt>
   15038:	bl	11384 <abort@plt>
   1503c:	push	{r4, sl, fp, lr}
   15040:	add	fp, sp, #8
   15044:	bl	15c90 <__assert_fail@plt+0x48dc>
   15048:	mov	r4, r0
   1504c:	cmn	r0, #1
   15050:	bne	15064 <__assert_fail@plt+0x3cb0>
   15054:	bl	112b8 <__errno_location@plt>
   15058:	ldr	r0, [r0]
   1505c:	cmp	r0, #12
   15060:	beq	1506c <__assert_fail@plt+0x3cb8>
   15064:	mov	r0, r4
   15068:	pop	{r4, sl, fp, pc}
   1506c:	bl	14ff8 <__assert_fail@plt+0x3c44>
   15070:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15074:	add	fp, sp, #28
   15078:	sub	sp, sp, #12
   1507c:	cmp	r2, #37	; 0x25
   15080:	bcs	154a4 <__assert_fail@plt+0x40f0>
   15084:	mov	r7, r2
   15088:	mov	r6, r1
   1508c:	mov	r4, r0
   15090:	str	r3, [sp]
   15094:	ldr	sl, [fp, #8]
   15098:	bl	112b8 <__errno_location@plt>
   1509c:	mov	r5, r0
   150a0:	mov	r0, #0
   150a4:	str	r0, [r5]
   150a8:	bl	11270 <__ctype_b_loc@plt>
   150ac:	ldr	r1, [r0]
   150b0:	mov	r2, r4
   150b4:	ldrb	r0, [r2], #1
   150b8:	add	r3, r1, r0, lsl #1
   150bc:	ldrb	r3, [r3, #1]
   150c0:	tst	r3, #32
   150c4:	bne	150b4 <__assert_fail@plt+0x3d00>
   150c8:	add	r9, sp, #8
   150cc:	cmp	r6, #0
   150d0:	movne	r9, r6
   150d4:	mov	r8, #4
   150d8:	cmp	r0, #45	; 0x2d
   150dc:	beq	15498 <__assert_fail@plt+0x40e4>
   150e0:	mov	r0, r4
   150e4:	mov	r1, r9
   150e8:	mov	r2, r7
   150ec:	bl	11294 <strtoul@plt>
   150f0:	str	r0, [sp, #4]
   150f4:	ldr	r7, [r9]
   150f8:	cmp	r7, r4
   150fc:	beq	15124 <__assert_fail@plt+0x3d70>
   15100:	ldr	r0, [r5]
   15104:	cmp	r0, #0
   15108:	beq	15158 <__assert_fail@plt+0x3da4>
   1510c:	cmp	r0, #34	; 0x22
   15110:	bne	15498 <__assert_fail@plt+0x40e4>
   15114:	mov	r8, #1
   15118:	cmp	sl, #0
   1511c:	bne	15164 <__assert_fail@plt+0x3db0>
   15120:	b	1548c <__assert_fail@plt+0x40d8>
   15124:	cmp	sl, #0
   15128:	beq	15498 <__assert_fail@plt+0x40e4>
   1512c:	ldrb	r1, [r7]
   15130:	cmp	r1, #0
   15134:	beq	15498 <__assert_fail@plt+0x40e4>
   15138:	mov	r0, sl
   1513c:	bl	112ac <strchr@plt>
   15140:	cmp	r0, #0
   15144:	beq	15498 <__assert_fail@plt+0x40e4>
   15148:	mov	r0, #1
   1514c:	str	r0, [sp, #4]
   15150:	mov	r8, #0
   15154:	b	15164 <__assert_fail@plt+0x3db0>
   15158:	mov	r8, r0
   1515c:	cmp	sl, #0
   15160:	beq	1548c <__assert_fail@plt+0x40d8>
   15164:	ldrb	r4, [r7]
   15168:	cmp	r4, #0
   1516c:	beq	1548c <__assert_fail@plt+0x40d8>
   15170:	mov	r0, sl
   15174:	mov	r1, r4
   15178:	bl	112ac <strchr@plt>
   1517c:	cmp	r0, #0
   15180:	beq	153ac <__assert_fail@plt+0x3ff8>
   15184:	sub	r0, r4, #69	; 0x45
   15188:	mov	r6, #1
   1518c:	mov	r5, #1024	; 0x400
   15190:	cmp	r0, #47	; 0x2f
   15194:	bhi	152a8 <__assert_fail@plt+0x3ef4>
   15198:	add	r1, pc, #0
   1519c:	ldr	pc, [r1, r0, lsl #2]
   151a0:	andeq	r5, r1, r0, ror #4
   151a4:	andeq	r5, r1, r8, lsr #5
   151a8:	andeq	r5, r1, r0, ror #4
   151ac:	andeq	r5, r1, r8, lsr #5
   151b0:	andeq	r5, r1, r8, lsr #5
   151b4:	andeq	r5, r1, r8, lsr #5
   151b8:	andeq	r5, r1, r0, ror #4
   151bc:	andeq	r5, r1, r8, lsr #5
   151c0:	andeq	r5, r1, r0, ror #4
   151c4:	andeq	r5, r1, r8, lsr #5
   151c8:	andeq	r5, r1, r8, lsr #5
   151cc:	andeq	r5, r1, r0, ror #4
   151d0:	andeq	r5, r1, r8, lsr #5
   151d4:	andeq	r5, r1, r8, lsr #5
   151d8:	andeq	r5, r1, r8, lsr #5
   151dc:	andeq	r5, r1, r0, ror #4
   151e0:	andeq	r5, r1, r8, lsr #5
   151e4:	andeq	r5, r1, r8, lsr #5
   151e8:	andeq	r5, r1, r8, lsr #5
   151ec:	andeq	r5, r1, r8, lsr #5
   151f0:	andeq	r5, r1, r0, ror #4
   151f4:	andeq	r5, r1, r0, ror #4
   151f8:	andeq	r5, r1, r8, lsr #5
   151fc:	andeq	r5, r1, r8, lsr #5
   15200:	andeq	r5, r1, r8, lsr #5
   15204:	andeq	r5, r1, r8, lsr #5
   15208:	andeq	r5, r1, r8, lsr #5
   1520c:	andeq	r5, r1, r8, lsr #5
   15210:	andeq	r5, r1, r8, lsr #5
   15214:	andeq	r5, r1, r8, lsr #5
   15218:	andeq	r5, r1, r8, lsr #5
   1521c:	andeq	r5, r1, r8, lsr #5
   15220:	andeq	r5, r1, r8, lsr #5
   15224:	andeq	r5, r1, r8, lsr #5
   15228:	andeq	r5, r1, r0, ror #4
   1522c:	andeq	r5, r1, r8, lsr #5
   15230:	andeq	r5, r1, r8, lsr #5
   15234:	andeq	r5, r1, r8, lsr #5
   15238:	andeq	r5, r1, r0, ror #4
   1523c:	andeq	r5, r1, r8, lsr #5
   15240:	andeq	r5, r1, r0, ror #4
   15244:	andeq	r5, r1, r8, lsr #5
   15248:	andeq	r5, r1, r8, lsr #5
   1524c:	andeq	r5, r1, r8, lsr #5
   15250:	andeq	r5, r1, r8, lsr #5
   15254:	andeq	r5, r1, r8, lsr #5
   15258:	andeq	r5, r1, r8, lsr #5
   1525c:	andeq	r5, r1, r0, ror #4
   15260:	mov	r0, sl
   15264:	mov	r1, #48	; 0x30
   15268:	bl	112ac <strchr@plt>
   1526c:	cmp	r0, #0
   15270:	beq	152a8 <__assert_fail@plt+0x3ef4>
   15274:	ldrb	r0, [r7, #1]
   15278:	cmp	r0, #66	; 0x42
   1527c:	cmpne	r0, #68	; 0x44
   15280:	bne	15290 <__assert_fail@plt+0x3edc>
   15284:	mov	r6, #2
   15288:	mov	r5, #1000	; 0x3e8
   1528c:	b	152a8 <__assert_fail@plt+0x3ef4>
   15290:	cmp	r0, #105	; 0x69
   15294:	bne	152a8 <__assert_fail@plt+0x3ef4>
   15298:	ldrb	r0, [r7, #2]
   1529c:	mov	r6, #1
   152a0:	cmp	r0, #66	; 0x42
   152a4:	movweq	r6, #3
   152a8:	sub	r1, r4, #66	; 0x42
   152ac:	cmp	r1, #53	; 0x35
   152b0:	bhi	153ac <__assert_fail@plt+0x3ff8>
   152b4:	mov	r0, #0
   152b8:	add	r2, pc, #0
   152bc:	ldr	pc, [r2, r1, lsl #2]
   152c0:	andeq	r5, r1, r0, lsl r4
   152c4:	andeq	r5, r1, ip, lsr #7
   152c8:	andeq	r5, r1, ip, lsr #7
   152cc:	andeq	r5, r1, ip, lsl r4
   152d0:	andeq	r5, r1, ip, lsr #7
   152d4:	muleq	r1, r8, r3
   152d8:	andeq	r5, r1, ip, lsr #7
   152dc:	andeq	r5, r1, ip, lsr #7
   152e0:	andeq	r5, r1, ip, lsr #7
   152e4:	andeq	r5, r1, r0, asr #7
   152e8:	andeq	r5, r1, ip, lsr #7
   152ec:	ldrdeq	r5, [r1], -r4
   152f0:	andeq	r5, r1, ip, lsr #7
   152f4:	andeq	r5, r1, ip, lsr #7
   152f8:	andeq	r5, r1, r0, lsr r4
   152fc:	andeq	r5, r1, ip, lsr #7
   15300:	andeq	r5, r1, ip, lsr #7
   15304:	andeq	r5, r1, ip, lsr #7
   15308:	andeq	r5, r1, r8, ror #7
   1530c:	andeq	r5, r1, ip, lsr #7
   15310:	andeq	r5, r1, ip, lsr #7
   15314:	andeq	r5, r1, ip, lsr #7
   15318:	andeq	r5, r1, ip, lsr #7
   1531c:	andeq	r5, r1, r4, asr #8
   15320:	strdeq	r5, [r1], -ip
   15324:	andeq	r5, r1, ip, lsr #7
   15328:	andeq	r5, r1, ip, lsr #7
   1532c:	andeq	r5, r1, ip, lsr #7
   15330:	andeq	r5, r1, ip, lsr #7
   15334:	andeq	r5, r1, ip, lsr #7
   15338:	andeq	r5, r1, ip, lsr #7
   1533c:	andeq	r5, r1, ip, lsr #7
   15340:	andeq	r5, r1, r8, asr r4
   15344:	andeq	r5, r1, r0, ror r4
   15348:	andeq	r5, r1, ip, lsr #7
   1534c:	andeq	r5, r1, ip, lsr #7
   15350:	andeq	r5, r1, ip, lsr #7
   15354:	muleq	r1, r8, r3
   15358:	andeq	r5, r1, ip, lsr #7
   1535c:	andeq	r5, r1, ip, lsr #7
   15360:	andeq	r5, r1, ip, lsr #7
   15364:	andeq	r5, r1, r0, asr #7
   15368:	andeq	r5, r1, ip, lsr #7
   1536c:	ldrdeq	r5, [r1], -r4
   15370:	andeq	r5, r1, ip, lsr #7
   15374:	andeq	r5, r1, ip, lsr #7
   15378:	andeq	r5, r1, ip, lsr #7
   1537c:	andeq	r5, r1, ip, lsr #7
   15380:	andeq	r5, r1, ip, lsr #7
   15384:	andeq	r5, r1, ip, lsr #7
   15388:	andeq	r5, r1, r8, ror #7
   1538c:	andeq	r5, r1, ip, lsr #7
   15390:	andeq	r5, r1, ip, lsr #7
   15394:	andeq	r5, r1, r4, ror #8
   15398:	add	r0, sp, #4
   1539c:	mov	r1, r5
   153a0:	mov	r2, #3
   153a4:	bl	15528 <__assert_fail@plt+0x4174>
   153a8:	b	15470 <__assert_fail@plt+0x40bc>
   153ac:	ldr	r0, [sp, #4]
   153b0:	ldr	r1, [sp]
   153b4:	str	r0, [r1]
   153b8:	orr	r8, r8, #2
   153bc:	b	15498 <__assert_fail@plt+0x40e4>
   153c0:	add	r0, sp, #4
   153c4:	mov	r1, r5
   153c8:	mov	r2, #1
   153cc:	bl	15528 <__assert_fail@plt+0x4174>
   153d0:	b	15470 <__assert_fail@plt+0x40bc>
   153d4:	add	r0, sp, #4
   153d8:	mov	r1, r5
   153dc:	mov	r2, #2
   153e0:	bl	15528 <__assert_fail@plt+0x4174>
   153e4:	b	15470 <__assert_fail@plt+0x40bc>
   153e8:	add	r0, sp, #4
   153ec:	mov	r1, r5
   153f0:	mov	r2, #4
   153f4:	bl	15528 <__assert_fail@plt+0x4174>
   153f8:	b	15470 <__assert_fail@plt+0x40bc>
   153fc:	add	r0, sp, #4
   15400:	mov	r1, r5
   15404:	mov	r2, #7
   15408:	bl	15528 <__assert_fail@plt+0x4174>
   1540c:	b	15470 <__assert_fail@plt+0x40bc>
   15410:	add	r0, sp, #4
   15414:	mov	r1, #1024	; 0x400
   15418:	b	1546c <__assert_fail@plt+0x40b8>
   1541c:	add	r0, sp, #4
   15420:	mov	r1, r5
   15424:	mov	r2, #6
   15428:	bl	15528 <__assert_fail@plt+0x4174>
   1542c:	b	15470 <__assert_fail@plt+0x40bc>
   15430:	add	r0, sp, #4
   15434:	mov	r1, r5
   15438:	mov	r2, #5
   1543c:	bl	15528 <__assert_fail@plt+0x4174>
   15440:	b	15470 <__assert_fail@plt+0x40bc>
   15444:	add	r0, sp, #4
   15448:	mov	r1, r5
   1544c:	mov	r2, #8
   15450:	bl	15528 <__assert_fail@plt+0x4174>
   15454:	b	15470 <__assert_fail@plt+0x40bc>
   15458:	add	r0, sp, #4
   1545c:	mov	r1, #512	; 0x200
   15460:	b	1546c <__assert_fail@plt+0x40b8>
   15464:	add	r0, sp, #4
   15468:	mov	r1, #2
   1546c:	bl	154c4 <__assert_fail@plt+0x4110>
   15470:	ldr	r1, [r9]
   15474:	add	r2, r1, r6
   15478:	str	r2, [r9]
   1547c:	ldrb	r1, [r1, r6]
   15480:	orr	r8, r0, r8
   15484:	cmp	r1, #0
   15488:	orrne	r8, r8, #2
   1548c:	ldr	r0, [sp, #4]
   15490:	ldr	r1, [sp]
   15494:	str	r0, [r1]
   15498:	mov	r0, r8
   1549c:	sub	sp, fp, #28
   154a0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   154a4:	movw	r0, #28305	; 0x6e91
   154a8:	movt	r0, #1
   154ac:	movw	r1, #28343	; 0x6eb7
   154b0:	movt	r1, #1
   154b4:	movw	r3, #28359	; 0x6ec7
   154b8:	movt	r3, #1
   154bc:	mov	r2, #85	; 0x55
   154c0:	bl	113b4 <__assert_fail@plt>
   154c4:	push	{fp, lr}
   154c8:	mov	fp, sp
   154cc:	cmn	r1, #1
   154d0:	ble	154f8 <__assert_fail@plt+0x4144>
   154d4:	cmp	r1, #0
   154d8:	beq	15510 <__assert_fail@plt+0x415c>
   154dc:	mvn	r3, #0
   154e0:	udiv	ip, r3, r1
   154e4:	ldr	lr, [r0]
   154e8:	mov	r2, #1
   154ec:	cmp	ip, lr
   154f0:	bcs	15510 <__assert_fail@plt+0x415c>
   154f4:	b	1551c <__assert_fail@plt+0x4168>
   154f8:	ldr	r2, [r0]
   154fc:	cmp	r2, #0
   15500:	beq	15510 <__assert_fail@plt+0x415c>
   15504:	mov	r2, #1
   15508:	mvn	r3, #0
   1550c:	b	1551c <__assert_fail@plt+0x4168>
   15510:	ldr	r2, [r0]
   15514:	mul	r3, r2, r1
   15518:	mov	r2, #0
   1551c:	str	r3, [r0]
   15520:	mov	r0, r2
   15524:	pop	{fp, pc}
   15528:	push	{r4, r5, r6, r7, fp, lr}
   1552c:	add	fp, sp, #16
   15530:	cmp	r2, #0
   15534:	beq	15568 <__assert_fail@plt+0x41b4>
   15538:	mov	r4, r2
   1553c:	mov	r5, r1
   15540:	mov	r7, r0
   15544:	mov	r6, #0
   15548:	mov	r0, r7
   1554c:	mov	r1, r5
   15550:	bl	154c4 <__assert_fail@plt+0x4110>
   15554:	orr	r6, r0, r6
   15558:	subs	r4, r4, #1
   1555c:	bne	15548 <__assert_fail@plt+0x4194>
   15560:	mov	r0, r6
   15564:	pop	{r4, r5, r6, r7, fp, pc}
   15568:	mov	r6, #0
   1556c:	mov	r0, r6
   15570:	pop	{r4, r5, r6, r7, fp, pc}
   15574:	clz	r2, r1
   15578:	lsr	r2, r2, #5
   1557c:	clz	r3, r0
   15580:	lsr	r3, r3, #5
   15584:	orrs	r2, r3, r2
   15588:	movwne	r1, #1
   1558c:	movwne	r0, #1
   15590:	cmp	r1, #0
   15594:	beq	155c4 <__assert_fail@plt+0x4210>
   15598:	mvn	r2, #-2147483648	; 0x80000000
   1559c:	udiv	r2, r2, r1
   155a0:	cmp	r2, r0
   155a4:	bcs	155c4 <__assert_fail@plt+0x4210>
   155a8:	push	{fp, lr}
   155ac:	mov	fp, sp
   155b0:	bl	112b8 <__errno_location@plt>
   155b4:	mov	r1, #12
   155b8:	str	r1, [r0]
   155bc:	mov	r0, #0
   155c0:	pop	{fp, pc}
   155c4:	b	110d8 <calloc@plt>
   155c8:	cmp	r0, #0
   155cc:	movweq	r0, #1
   155d0:	cmn	r0, #1
   155d4:	ble	155dc <__assert_fail@plt+0x4228>
   155d8:	b	11234 <malloc@plt>
   155dc:	push	{fp, lr}
   155e0:	mov	fp, sp
   155e4:	bl	112b8 <__errno_location@plt>
   155e8:	mov	r1, #12
   155ec:	str	r1, [r0]
   155f0:	mov	r0, #0
   155f4:	pop	{fp, pc}
   155f8:	push	{fp, lr}
   155fc:	mov	fp, sp
   15600:	cmp	r0, #0
   15604:	beq	15620 <__assert_fail@plt+0x426c>
   15608:	cmp	r1, #0
   1560c:	beq	1562c <__assert_fail@plt+0x4278>
   15610:	cmn	r1, #1
   15614:	ble	15638 <__assert_fail@plt+0x4284>
   15618:	pop	{fp, lr}
   1561c:	b	1118c <realloc@plt>
   15620:	mov	r0, r1
   15624:	pop	{fp, lr}
   15628:	b	155c8 <__assert_fail@plt+0x4214>
   1562c:	bl	12768 <__assert_fail@plt+0x13b4>
   15630:	mov	r0, #0
   15634:	pop	{fp, pc}
   15638:	bl	112b8 <__errno_location@plt>
   1563c:	mov	r1, #12
   15640:	str	r1, [r0]
   15644:	mov	r0, #0
   15648:	pop	{fp, pc}
   1564c:	mov	r1, r0
   15650:	sub	r2, r0, #65	; 0x41
   15654:	mov	r0, #1
   15658:	cmp	r2, #26
   1565c:	subcs	r2, r1, #97	; 0x61
   15660:	cmpcs	r2, #26
   15664:	bcs	1566c <__assert_fail@plt+0x42b8>
   15668:	bx	lr
   1566c:	sub	r1, r1, #48	; 0x30
   15670:	cmp	r1, #10
   15674:	movcs	r0, #0
   15678:	bx	lr
   1567c:	mov	r1, r0
   15680:	sub	r2, r0, #65	; 0x41
   15684:	mov	r0, #1
   15688:	cmp	r2, #26
   1568c:	subcs	r1, r1, #97	; 0x61
   15690:	cmpcs	r1, #26
   15694:	movcs	r0, #0
   15698:	bx	lr
   1569c:	mov	r1, #0
   156a0:	cmp	r0, #128	; 0x80
   156a4:	movwcc	r1, #1
   156a8:	mov	r0, r1
   156ac:	bx	lr
   156b0:	sub	r1, r0, #9
   156b4:	clz	r1, r1
   156b8:	lsr	r1, r1, #5
   156bc:	sub	r0, r0, #32
   156c0:	clz	r0, r0
   156c4:	lsr	r0, r0, #5
   156c8:	orr	r0, r0, r1
   156cc:	bx	lr
   156d0:	mov	r1, r0
   156d4:	mov	r0, #1
   156d8:	cmp	r1, #32
   156dc:	bxcc	lr
   156e0:	cmp	r1, #127	; 0x7f
   156e4:	movne	r0, #0
   156e8:	bx	lr
   156ec:	sub	r1, r0, #48	; 0x30
   156f0:	mov	r0, #0
   156f4:	cmp	r1, #10
   156f8:	movwcc	r0, #1
   156fc:	bx	lr
   15700:	sub	r1, r0, #33	; 0x21
   15704:	mov	r0, #0
   15708:	cmp	r1, #94	; 0x5e
   1570c:	movwcc	r0, #1
   15710:	bx	lr
   15714:	sub	r1, r0, #97	; 0x61
   15718:	mov	r0, #0
   1571c:	cmp	r1, #26
   15720:	movwcc	r0, #1
   15724:	bx	lr
   15728:	sub	r1, r0, #32
   1572c:	mov	r0, #0
   15730:	cmp	r1, #95	; 0x5f
   15734:	movwcc	r0, #1
   15738:	bx	lr
   1573c:	sub	r1, r0, #33	; 0x21
   15740:	cmp	r1, #93	; 0x5d
   15744:	bhi	158d0 <__assert_fail@plt+0x451c>
   15748:	mov	r0, #1
   1574c:	add	r2, pc, #0
   15750:	ldr	pc, [r2, r1, lsl #2]
   15754:	andeq	r5, r1, ip, asr #17
   15758:	andeq	r5, r1, ip, asr #17
   1575c:	andeq	r5, r1, ip, asr #17
   15760:	andeq	r5, r1, ip, asr #17
   15764:	andeq	r5, r1, ip, asr #17
   15768:	andeq	r5, r1, ip, asr #17
   1576c:	andeq	r5, r1, ip, asr #17
   15770:	andeq	r5, r1, ip, asr #17
   15774:	andeq	r5, r1, ip, asr #17
   15778:	andeq	r5, r1, ip, asr #17
   1577c:	andeq	r5, r1, ip, asr #17
   15780:	andeq	r5, r1, ip, asr #17
   15784:	andeq	r5, r1, ip, asr #17
   15788:	andeq	r5, r1, ip, asr #17
   1578c:	andeq	r5, r1, ip, asr #17
   15790:	ldrdeq	r5, [r1], -r0
   15794:	ldrdeq	r5, [r1], -r0
   15798:	ldrdeq	r5, [r1], -r0
   1579c:	ldrdeq	r5, [r1], -r0
   157a0:	ldrdeq	r5, [r1], -r0
   157a4:	ldrdeq	r5, [r1], -r0
   157a8:	ldrdeq	r5, [r1], -r0
   157ac:	ldrdeq	r5, [r1], -r0
   157b0:	ldrdeq	r5, [r1], -r0
   157b4:	ldrdeq	r5, [r1], -r0
   157b8:	andeq	r5, r1, ip, asr #17
   157bc:	andeq	r5, r1, ip, asr #17
   157c0:	andeq	r5, r1, ip, asr #17
   157c4:	andeq	r5, r1, ip, asr #17
   157c8:	andeq	r5, r1, ip, asr #17
   157cc:	andeq	r5, r1, ip, asr #17
   157d0:	andeq	r5, r1, ip, asr #17
   157d4:	ldrdeq	r5, [r1], -r0
   157d8:	ldrdeq	r5, [r1], -r0
   157dc:	ldrdeq	r5, [r1], -r0
   157e0:	ldrdeq	r5, [r1], -r0
   157e4:	ldrdeq	r5, [r1], -r0
   157e8:	ldrdeq	r5, [r1], -r0
   157ec:	ldrdeq	r5, [r1], -r0
   157f0:	ldrdeq	r5, [r1], -r0
   157f4:	ldrdeq	r5, [r1], -r0
   157f8:	ldrdeq	r5, [r1], -r0
   157fc:	ldrdeq	r5, [r1], -r0
   15800:	ldrdeq	r5, [r1], -r0
   15804:	ldrdeq	r5, [r1], -r0
   15808:	ldrdeq	r5, [r1], -r0
   1580c:	ldrdeq	r5, [r1], -r0
   15810:	ldrdeq	r5, [r1], -r0
   15814:	ldrdeq	r5, [r1], -r0
   15818:	ldrdeq	r5, [r1], -r0
   1581c:	ldrdeq	r5, [r1], -r0
   15820:	ldrdeq	r5, [r1], -r0
   15824:	ldrdeq	r5, [r1], -r0
   15828:	ldrdeq	r5, [r1], -r0
   1582c:	ldrdeq	r5, [r1], -r0
   15830:	ldrdeq	r5, [r1], -r0
   15834:	ldrdeq	r5, [r1], -r0
   15838:	ldrdeq	r5, [r1], -r0
   1583c:	andeq	r5, r1, ip, asr #17
   15840:	andeq	r5, r1, ip, asr #17
   15844:	andeq	r5, r1, ip, asr #17
   15848:	andeq	r5, r1, ip, asr #17
   1584c:	andeq	r5, r1, ip, asr #17
   15850:	andeq	r5, r1, ip, asr #17
   15854:	ldrdeq	r5, [r1], -r0
   15858:	ldrdeq	r5, [r1], -r0
   1585c:	ldrdeq	r5, [r1], -r0
   15860:	ldrdeq	r5, [r1], -r0
   15864:	ldrdeq	r5, [r1], -r0
   15868:	ldrdeq	r5, [r1], -r0
   1586c:	ldrdeq	r5, [r1], -r0
   15870:	ldrdeq	r5, [r1], -r0
   15874:	ldrdeq	r5, [r1], -r0
   15878:	ldrdeq	r5, [r1], -r0
   1587c:	ldrdeq	r5, [r1], -r0
   15880:	ldrdeq	r5, [r1], -r0
   15884:	ldrdeq	r5, [r1], -r0
   15888:	ldrdeq	r5, [r1], -r0
   1588c:	ldrdeq	r5, [r1], -r0
   15890:	ldrdeq	r5, [r1], -r0
   15894:	ldrdeq	r5, [r1], -r0
   15898:	ldrdeq	r5, [r1], -r0
   1589c:	ldrdeq	r5, [r1], -r0
   158a0:	ldrdeq	r5, [r1], -r0
   158a4:	ldrdeq	r5, [r1], -r0
   158a8:	ldrdeq	r5, [r1], -r0
   158ac:	ldrdeq	r5, [r1], -r0
   158b0:	ldrdeq	r5, [r1], -r0
   158b4:	ldrdeq	r5, [r1], -r0
   158b8:	ldrdeq	r5, [r1], -r0
   158bc:	andeq	r5, r1, ip, asr #17
   158c0:	andeq	r5, r1, ip, asr #17
   158c4:	andeq	r5, r1, ip, asr #17
   158c8:	andeq	r5, r1, ip, asr #17
   158cc:	bx	lr
   158d0:	mov	r0, #0
   158d4:	bx	lr
   158d8:	sub	r0, r0, #9
   158dc:	cmp	r0, #23
   158e0:	movhi	r0, #0
   158e4:	bxhi	lr
   158e8:	bic	r0, r0, #-16777216	; 0xff000000
   158ec:	movw	r1, #31
   158f0:	movt	r1, #128	; 0x80
   158f4:	mov	r2, #1
   158f8:	and	r0, r2, r1, lsr r0
   158fc:	bx	lr
   15900:	sub	r1, r0, #65	; 0x41
   15904:	mov	r0, #0
   15908:	cmp	r1, #26
   1590c:	movwcc	r0, #1
   15910:	bx	lr
   15914:	mov	r1, r0
   15918:	sub	r2, r0, #48	; 0x30
   1591c:	mov	r0, #1
   15920:	cmp	r2, #22
   15924:	bhi	1593c <__assert_fail@plt+0x4588>
   15928:	mov	ip, #1
   1592c:	movw	r3, #1023	; 0x3ff
   15930:	movt	r3, #126	; 0x7e
   15934:	tst	r3, ip, lsl r2
   15938:	bxne	lr
   1593c:	sub	r1, r1, #97	; 0x61
   15940:	cmp	r1, #6
   15944:	movcs	r0, #0
   15948:	bxcs	lr
   1594c:	bx	lr
   15950:	sub	r1, r0, #65	; 0x41
   15954:	cmp	r1, #26
   15958:	addcc	r0, r0, #32
   1595c:	bx	lr
   15960:	sub	r1, r0, #97	; 0x61
   15964:	cmp	r1, #26
   15968:	subcc	r0, r0, #32
   1596c:	bx	lr
   15970:	push	{r4, r5, r6, sl, fp, lr}
   15974:	add	fp, sp, #16
   15978:	mov	r4, r0
   1597c:	bl	111f8 <__fpending@plt>
   15980:	mov	r5, r0
   15984:	mov	r0, r4
   15988:	bl	11204 <ferror_unlocked@plt>
   1598c:	mov	r6, r0
   15990:	mov	r0, r4
   15994:	bl	159f4 <__assert_fail@plt+0x4640>
   15998:	cmp	r6, #0
   1599c:	beq	159c0 <__assert_fail@plt+0x460c>
   159a0:	mvn	r4, #0
   159a4:	cmp	r0, #0
   159a8:	bne	159ec <__assert_fail@plt+0x4638>
   159ac:	bl	112b8 <__errno_location@plt>
   159b0:	mov	r1, #0
   159b4:	str	r1, [r0]
   159b8:	mov	r0, r4
   159bc:	pop	{r4, r5, r6, sl, fp, pc}
   159c0:	cmp	r0, #0
   159c4:	mov	r4, r0
   159c8:	mvnne	r4, #0
   159cc:	cmp	r5, #0
   159d0:	bne	159ec <__assert_fail@plt+0x4638>
   159d4:	cmp	r0, #0
   159d8:	beq	159ec <__assert_fail@plt+0x4638>
   159dc:	bl	112b8 <__errno_location@plt>
   159e0:	ldr	r0, [r0]
   159e4:	subs	r4, r0, #9
   159e8:	mvnne	r4, #0
   159ec:	mov	r0, r4
   159f0:	pop	{r4, r5, r6, sl, fp, pc}
   159f4:	push	{r4, r5, fp, lr}
   159f8:	add	fp, sp, #8
   159fc:	sub	sp, sp, #8
   15a00:	mov	r4, r0
   15a04:	bl	11300 <fileno@plt>
   15a08:	cmn	r0, #1
   15a0c:	ble	15a84 <__assert_fail@plt+0x46d0>
   15a10:	mov	r0, r4
   15a14:	bl	1124c <__freading@plt>
   15a18:	cmp	r0, #0
   15a1c:	beq	15a48 <__assert_fail@plt+0x4694>
   15a20:	mov	r0, r4
   15a24:	bl	11300 <fileno@plt>
   15a28:	mov	r1, #1
   15a2c:	str	r1, [sp]
   15a30:	mov	r2, #0
   15a34:	mov	r3, #0
   15a38:	bl	111d4 <lseek64@plt>
   15a3c:	and	r0, r0, r1
   15a40:	cmn	r0, #1
   15a44:	beq	15a84 <__assert_fail@plt+0x46d0>
   15a48:	mov	r0, r4
   15a4c:	bl	15a94 <__assert_fail@plt+0x46e0>
   15a50:	cmp	r0, #0
   15a54:	beq	15a84 <__assert_fail@plt+0x46d0>
   15a58:	bl	112b8 <__errno_location@plt>
   15a5c:	ldr	r5, [r0]
   15a60:	mov	r0, r4
   15a64:	bl	11318 <fclose@plt>
   15a68:	cmp	r5, #0
   15a6c:	beq	15a7c <__assert_fail@plt+0x46c8>
   15a70:	bl	112b8 <__errno_location@plt>
   15a74:	str	r5, [r0]
   15a78:	mvn	r0, #0
   15a7c:	sub	sp, fp, #8
   15a80:	pop	{r4, r5, fp, pc}
   15a84:	mov	r0, r4
   15a88:	sub	sp, fp, #8
   15a8c:	pop	{r4, r5, fp, lr}
   15a90:	b	11318 <fclose@plt>
   15a94:	push	{r4, sl, fp, lr}
   15a98:	add	fp, sp, #8
   15a9c:	mov	r4, r0
   15aa0:	cmp	r0, #0
   15aa4:	beq	15abc <__assert_fail@plt+0x4708>
   15aa8:	mov	r0, r4
   15aac:	bl	1124c <__freading@plt>
   15ab0:	cmp	r0, #0
   15ab4:	movne	r0, r4
   15ab8:	blne	15ac8 <__assert_fail@plt+0x4714>
   15abc:	mov	r0, r4
   15ac0:	pop	{r4, sl, fp, lr}
   15ac4:	b	11138 <fflush@plt>
   15ac8:	push	{fp, lr}
   15acc:	mov	fp, sp
   15ad0:	sub	sp, sp, #8
   15ad4:	ldrb	r1, [r0, #1]
   15ad8:	tst	r1, #1
   15adc:	beq	15af4 <__assert_fail@plt+0x4740>
   15ae0:	mov	r1, #1
   15ae4:	str	r1, [sp]
   15ae8:	mov	r2, #0
   15aec:	mov	r3, #0
   15af0:	bl	15afc <__assert_fail@plt+0x4748>
   15af4:	mov	sp, fp
   15af8:	pop	{fp, pc}
   15afc:	push	{r4, r5, r6, r7, fp, lr}
   15b00:	add	fp, sp, #16
   15b04:	sub	sp, sp, #8
   15b08:	mov	r5, r3
   15b0c:	mov	r6, r2
   15b10:	mov	r4, r0
   15b14:	ldr	r0, [r0, #4]
   15b18:	ldr	r1, [r4, #8]
   15b1c:	cmp	r1, r0
   15b20:	bne	15b3c <__assert_fail@plt+0x4788>
   15b24:	ldrd	r0, [r4, #16]
   15b28:	cmp	r1, r0
   15b2c:	bne	15b3c <__assert_fail@plt+0x4788>
   15b30:	ldr	r0, [r4, #36]	; 0x24
   15b34:	cmp	r0, #0
   15b38:	beq	15b54 <__assert_fail@plt+0x47a0>
   15b3c:	mov	r0, r4
   15b40:	mov	r2, r6
   15b44:	mov	r3, r5
   15b48:	sub	sp, fp, #16
   15b4c:	pop	{r4, r5, r6, r7, fp, lr}
   15b50:	b	11324 <fseeko64@plt>
   15b54:	ldr	r7, [fp, #8]
   15b58:	mov	r0, r4
   15b5c:	bl	11300 <fileno@plt>
   15b60:	str	r7, [sp]
   15b64:	mov	r2, r6
   15b68:	mov	r3, r5
   15b6c:	bl	111d4 <lseek64@plt>
   15b70:	and	r2, r0, r1
   15b74:	cmn	r2, #1
   15b78:	beq	15b98 <__assert_fail@plt+0x47e4>
   15b7c:	strd	r0, [r4, #80]	; 0x50
   15b80:	ldr	r0, [r4]
   15b84:	bic	r0, r0, #16
   15b88:	str	r0, [r4]
   15b8c:	mov	r0, #0
   15b90:	sub	sp, fp, #16
   15b94:	pop	{r4, r5, r6, r7, fp, pc}
   15b98:	mvn	r0, #0
   15b9c:	sub	sp, fp, #16
   15ba0:	pop	{r4, r5, r6, r7, fp, pc}
   15ba4:	push	{fp, lr}
   15ba8:	mov	fp, sp
   15bac:	bl	112b8 <__errno_location@plt>
   15bb0:	mov	r1, #12
   15bb4:	str	r1, [r0]
   15bb8:	mov	r0, #0
   15bbc:	pop	{fp, pc}
   15bc0:	b	155c8 <__assert_fail@plt+0x4214>
   15bc4:	cmp	r1, #0
   15bc8:	orreq	r1, r1, #1
   15bcc:	b	155f8 <__assert_fail@plt+0x4244>
   15bd0:	b	15574 <__assert_fail@plt+0x41c0>
   15bd4:	clz	r3, r2
   15bd8:	lsr	ip, r3, #5
   15bdc:	clz	r3, r1
   15be0:	lsr	r3, r3, #5
   15be4:	orrs	r3, r3, ip
   15be8:	movwne	r1, #1
   15bec:	movwne	r2, #1
   15bf0:	b	15ea4 <__assert_fail@plt+0x4af0>
   15bf4:	push	{fp, lr}
   15bf8:	mov	fp, sp
   15bfc:	mov	r0, #14
   15c00:	bl	11354 <nl_langinfo@plt>
   15c04:	movw	r1, #25247	; 0x629f
   15c08:	movt	r1, #1
   15c0c:	cmp	r0, #0
   15c10:	movne	r1, r0
   15c14:	ldrb	r2, [r1]
   15c18:	movw	r0, #28440	; 0x6f18
   15c1c:	movt	r0, #1
   15c20:	cmp	r2, #0
   15c24:	movne	r0, r1
   15c28:	pop	{fp, pc}
   15c2c:	push	{r4, r5, r6, r7, fp, lr}
   15c30:	add	fp, sp, #16
   15c34:	sub	sp, sp, #8
   15c38:	mov	r7, r2
   15c3c:	mov	r4, r1
   15c40:	add	r5, sp, #4
   15c44:	cmp	r0, #0
   15c48:	movne	r5, r0
   15c4c:	mov	r0, r5
   15c50:	bl	11210 <mbrtowc@plt>
   15c54:	mov	r6, r0
   15c58:	cmp	r7, #0
   15c5c:	beq	15c84 <__assert_fail@plt+0x48d0>
   15c60:	cmn	r6, #2
   15c64:	bcc	15c84 <__assert_fail@plt+0x48d0>
   15c68:	mov	r0, #0
   15c6c:	bl	15ee0 <__assert_fail@plt+0x4b2c>
   15c70:	cmp	r0, #0
   15c74:	bne	15c84 <__assert_fail@plt+0x48d0>
   15c78:	ldrb	r0, [r4]
   15c7c:	str	r0, [r5]
   15c80:	mov	r6, #1
   15c84:	mov	r0, r6
   15c88:	sub	sp, fp, #16
   15c8c:	pop	{r4, r5, r6, r7, fp, pc}
   15c90:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15c94:	add	fp, sp, #28
   15c98:	sub	sp, sp, #12
   15c9c:	mov	r5, r2
   15ca0:	mov	sl, r1
   15ca4:	cmp	r0, #0
   15ca8:	beq	15d40 <__assert_fail@plt+0x498c>
   15cac:	mov	r7, r0
   15cb0:	mov	r0, #10
   15cb4:	str	r0, [sp, #8]
   15cb8:	mov	r0, #0
   15cbc:	mov	r1, #10
   15cc0:	bl	15e78 <__assert_fail@plt+0x4ac4>
   15cc4:	mvn	r9, #0
   15cc8:	cmp	r0, #0
   15ccc:	beq	15e6c <__assert_fail@plt+0x4ab8>
   15cd0:	mov	r4, r0
   15cd4:	str	r5, [sp, #4]
   15cd8:	add	r5, sp, #8
   15cdc:	ldr	r8, [sp, #8]
   15ce0:	mov	r0, r7
   15ce4:	mov	r1, sl
   15ce8:	mov	r2, r4
   15cec:	mov	r3, r5
   15cf0:	bl	112dc <getgrouplist@plt>
   15cf4:	mov	r6, r0
   15cf8:	cmn	r0, #1
   15cfc:	bgt	15d10 <__assert_fail@plt+0x495c>
   15d00:	ldr	r0, [sp, #8]
   15d04:	cmp	r8, r0
   15d08:	lsleq	r0, r0, #1
   15d0c:	streq	r0, [sp, #8]
   15d10:	ldr	r1, [sp, #8]
   15d14:	mov	r0, r4
   15d18:	bl	15e78 <__assert_fail@plt+0x4ac4>
   15d1c:	cmp	r0, #0
   15d20:	beq	15e08 <__assert_fail@plt+0x4a54>
   15d24:	cmp	r6, #0
   15d28:	mov	r4, r0
   15d2c:	bmi	15cdc <__assert_fail@plt+0x4928>
   15d30:	ldr	r1, [sp, #4]
   15d34:	str	r0, [r1]
   15d38:	ldr	r9, [sp, #8]
   15d3c:	b	15e6c <__assert_fail@plt+0x4ab8>
   15d40:	mov	r0, #0
   15d44:	mov	r1, #0
   15d48:	bl	11360 <getgroups@plt>
   15d4c:	str	r0, [sp, #8]
   15d50:	cmn	r0, #1
   15d54:	ble	15e14 <__assert_fail@plt+0x4a60>
   15d58:	cmn	sl, #1
   15d5c:	bne	15d68 <__assert_fail@plt+0x49b4>
   15d60:	cmp	r0, #0
   15d64:	bne	15d70 <__assert_fail@plt+0x49bc>
   15d68:	add	r0, r0, #1
   15d6c:	str	r0, [sp, #8]
   15d70:	ldr	r1, [sp, #8]
   15d74:	mov	r0, #0
   15d78:	bl	15e78 <__assert_fail@plt+0x4ac4>
   15d7c:	cmp	r0, #0
   15d80:	beq	15e54 <__assert_fail@plt+0x4aa0>
   15d84:	mov	r7, r0
   15d88:	mvn	r9, #0
   15d8c:	subs	r1, sl, r9
   15d90:	movwne	r1, #1
   15d94:	ldr	r0, [sp, #8]
   15d98:	sub	r0, r0, r1
   15d9c:	add	r1, r7, r1, lsl #2
   15da0:	bl	11360 <getgroups@plt>
   15da4:	cmn	r0, #1
   15da8:	ble	15e5c <__assert_fail@plt+0x4aa8>
   15dac:	cmn	sl, #1
   15db0:	strne	sl, [r7]
   15db4:	addne	r0, r0, #1
   15db8:	str	r7, [r5]
   15dbc:	cmp	r0, #2
   15dc0:	blt	15e68 <__assert_fail@plt+0x4ab4>
   15dc4:	add	r1, r7, r0, lsl #2
   15dc8:	mov	r2, r7
   15dcc:	ldr	r3, [r2], #4
   15dd0:	mov	r9, r0
   15dd4:	b	15de8 <__assert_fail@plt+0x4a34>
   15dd8:	sub	r9, r9, #1
   15ddc:	add	r2, r2, #4
   15de0:	cmp	r2, r1
   15de4:	bcs	15e6c <__assert_fail@plt+0x4ab8>
   15de8:	ldr	r0, [r2]
   15dec:	cmp	r0, r3
   15df0:	beq	15dd8 <__assert_fail@plt+0x4a24>
   15df4:	ldr	r6, [r7]
   15df8:	cmp	r0, r6
   15dfc:	beq	15dd8 <__assert_fail@plt+0x4a24>
   15e00:	str	r0, [r7, #4]!
   15e04:	b	15ddc <__assert_fail@plt+0x4a28>
   15e08:	mov	r0, r4
   15e0c:	bl	12768 <__assert_fail@plt+0x13b4>
   15e10:	b	15e6c <__assert_fail@plt+0x4ab8>
   15e14:	bl	112b8 <__errno_location@plt>
   15e18:	ldr	r0, [r0]
   15e1c:	mvn	r9, #0
   15e20:	cmp	r0, #38	; 0x26
   15e24:	bne	15e6c <__assert_fail@plt+0x4ab8>
   15e28:	mov	r0, #0
   15e2c:	mov	r1, #1
   15e30:	bl	15e78 <__assert_fail@plt+0x4ac4>
   15e34:	cmp	r0, #0
   15e38:	beq	15e6c <__assert_fail@plt+0x4ab8>
   15e3c:	str	r0, [r5]
   15e40:	str	sl, [r0]
   15e44:	mvn	r0, #0
   15e48:	subs	r9, sl, r0
   15e4c:	movwne	r9, #1
   15e50:	b	15e6c <__assert_fail@plt+0x4ab8>
   15e54:	mvn	r9, #0
   15e58:	b	15e6c <__assert_fail@plt+0x4ab8>
   15e5c:	mov	r0, r7
   15e60:	bl	12768 <__assert_fail@plt+0x13b4>
   15e64:	b	15e6c <__assert_fail@plt+0x4ab8>
   15e68:	mov	r9, r0
   15e6c:	mov	r0, r9
   15e70:	sub	sp, fp, #28
   15e74:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15e78:	cmp	r1, #536870912	; 0x20000000
   15e7c:	bcc	15e9c <__assert_fail@plt+0x4ae8>
   15e80:	push	{fp, lr}
   15e84:	mov	fp, sp
   15e88:	bl	112b8 <__errno_location@plt>
   15e8c:	mov	r1, #12
   15e90:	str	r1, [r0]
   15e94:	mov	r0, #0
   15e98:	pop	{fp, pc}
   15e9c:	lsl	r1, r1, #2
   15ea0:	b	155f8 <__assert_fail@plt+0x4244>
   15ea4:	cmp	r2, #0
   15ea8:	beq	15ed8 <__assert_fail@plt+0x4b24>
   15eac:	mvn	r3, #0
   15eb0:	udiv	r3, r3, r2
   15eb4:	cmp	r3, r1
   15eb8:	bcs	15ed8 <__assert_fail@plt+0x4b24>
   15ebc:	push	{fp, lr}
   15ec0:	mov	fp, sp
   15ec4:	bl	112b8 <__errno_location@plt>
   15ec8:	mov	r1, #12
   15ecc:	str	r1, [r0]
   15ed0:	mov	r0, #0
   15ed4:	pop	{fp, pc}
   15ed8:	mul	r1, r2, r1
   15edc:	b	155f8 <__assert_fail@plt+0x4244>
   15ee0:	push	{r4, sl, fp, lr}
   15ee4:	add	fp, sp, #8
   15ee8:	sub	sp, sp, #264	; 0x108
   15eec:	add	r1, sp, #7
   15ef0:	movw	r2, #257	; 0x101
   15ef4:	bl	15f4c <__assert_fail@plt+0x4b98>
   15ef8:	mov	r4, #0
   15efc:	cmp	r0, #0
   15f00:	bne	15f40 <__assert_fail@plt+0x4b8c>
   15f04:	add	r0, sp, #7
   15f08:	movw	r1, #28446	; 0x6f1e
   15f0c:	movt	r1, #1
   15f10:	mov	r2, #2
   15f14:	bl	11288 <bcmp@plt>
   15f18:	cmp	r0, #0
   15f1c:	beq	15f40 <__assert_fail@plt+0x4b8c>
   15f20:	add	r0, sp, #7
   15f24:	movw	r1, #28448	; 0x6f20
   15f28:	movt	r1, #1
   15f2c:	mov	r2, #6
   15f30:	bl	11288 <bcmp@plt>
   15f34:	mov	r4, r0
   15f38:	cmp	r0, #0
   15f3c:	movwne	r4, #1
   15f40:	mov	r0, r4
   15f44:	sub	sp, fp, #8
   15f48:	pop	{r4, sl, fp, pc}
   15f4c:	b	15f50 <__assert_fail@plt+0x4b9c>
   15f50:	push	{r4, r5, r6, r7, fp, lr}
   15f54:	add	fp, sp, #16
   15f58:	mov	r6, r2
   15f5c:	mov	r4, r1
   15f60:	bl	15fe8 <__assert_fail@plt+0x4c34>
   15f64:	cmp	r0, #0
   15f68:	beq	15f98 <__assert_fail@plt+0x4be4>
   15f6c:	mov	r7, r0
   15f70:	bl	112a0 <strlen@plt>
   15f74:	cmp	r0, r6
   15f78:	bcs	15fb4 <__assert_fail@plt+0x4c00>
   15f7c:	add	r2, r0, #1
   15f80:	mov	r0, r4
   15f84:	mov	r1, r7
   15f88:	bl	11168 <memcpy@plt>
   15f8c:	mov	r5, #0
   15f90:	mov	r0, r5
   15f94:	pop	{r4, r5, r6, r7, fp, pc}
   15f98:	mov	r5, #22
   15f9c:	cmp	r6, #0
   15fa0:	beq	15fdc <__assert_fail@plt+0x4c28>
   15fa4:	mov	r0, #0
   15fa8:	strb	r0, [r4]
   15fac:	mov	r0, r5
   15fb0:	pop	{r4, r5, r6, r7, fp, pc}
   15fb4:	mov	r5, #34	; 0x22
   15fb8:	cmp	r6, #0
   15fbc:	beq	15fdc <__assert_fail@plt+0x4c28>
   15fc0:	sub	r6, r6, #1
   15fc4:	mov	r0, r4
   15fc8:	mov	r1, r7
   15fcc:	mov	r2, r6
   15fd0:	bl	11168 <memcpy@plt>
   15fd4:	mov	r0, #0
   15fd8:	strb	r0, [r4, r6]
   15fdc:	mov	r0, r5
   15fe0:	pop	{r4, r5, r6, r7, fp, pc}
   15fe4:	b	15fe8 <__assert_fail@plt+0x4c34>
   15fe8:	mov	r1, #0
   15fec:	b	11330 <setlocale@plt>
   15ff0:	cmp	r3, #0
   15ff4:	cmpeq	r2, #0
   15ff8:	bne	16010 <__assert_fail@plt+0x4c5c>
   15ffc:	cmp	r1, #0
   16000:	cmpeq	r0, #0
   16004:	mvnne	r1, #0
   16008:	mvnne	r0, #0
   1600c:	b	1602c <__assert_fail@plt+0x4c78>
   16010:	sub	sp, sp, #8
   16014:	push	{sp, lr}
   16018:	bl	1603c <__assert_fail@plt+0x4c88>
   1601c:	ldr	lr, [sp, #4]
   16020:	add	sp, sp, #8
   16024:	pop	{r2, r3}
   16028:	bx	lr
   1602c:	push	{r1, lr}
   16030:	mov	r0, #8
   16034:	bl	110fc <raise@plt>
   16038:	pop	{r1, pc}
   1603c:	cmp	r1, r3
   16040:	cmpeq	r0, r2
   16044:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16048:	mov	r4, r0
   1604c:	movcc	r0, #0
   16050:	mov	r5, r1
   16054:	ldr	lr, [sp, #36]	; 0x24
   16058:	movcc	r1, r0
   1605c:	bcc	16158 <__assert_fail@plt+0x4da4>
   16060:	cmp	r3, #0
   16064:	clzeq	ip, r2
   16068:	clzne	ip, r3
   1606c:	addeq	ip, ip, #32
   16070:	cmp	r5, #0
   16074:	clzeq	r1, r4
   16078:	addeq	r1, r1, #32
   1607c:	clzne	r1, r5
   16080:	sub	ip, ip, r1
   16084:	sub	sl, ip, #32
   16088:	lsl	r9, r3, ip
   1608c:	rsb	fp, ip, #32
   16090:	orr	r9, r9, r2, lsl sl
   16094:	orr	r9, r9, r2, lsr fp
   16098:	lsl	r8, r2, ip
   1609c:	cmp	r5, r9
   160a0:	cmpeq	r4, r8
   160a4:	movcc	r0, #0
   160a8:	movcc	r1, r0
   160ac:	bcc	160c8 <__assert_fail@plt+0x4d14>
   160b0:	mov	r0, #1
   160b4:	subs	r4, r4, r8
   160b8:	lsl	r1, r0, sl
   160bc:	orr	r1, r1, r0, lsr fp
   160c0:	lsl	r0, r0, ip
   160c4:	sbc	r5, r5, r9
   160c8:	cmp	ip, #0
   160cc:	beq	16158 <__assert_fail@plt+0x4da4>
   160d0:	lsr	r6, r8, #1
   160d4:	orr	r6, r6, r9, lsl #31
   160d8:	lsr	r7, r9, #1
   160dc:	mov	r2, ip
   160e0:	b	16104 <__assert_fail@plt+0x4d50>
   160e4:	subs	r3, r4, r6
   160e8:	sbc	r8, r5, r7
   160ec:	adds	r3, r3, r3
   160f0:	adc	r8, r8, r8
   160f4:	adds	r4, r3, #1
   160f8:	adc	r5, r8, #0
   160fc:	subs	r2, r2, #1
   16100:	beq	16120 <__assert_fail@plt+0x4d6c>
   16104:	cmp	r5, r7
   16108:	cmpeq	r4, r6
   1610c:	bcs	160e4 <__assert_fail@plt+0x4d30>
   16110:	adds	r4, r4, r4
   16114:	adc	r5, r5, r5
   16118:	subs	r2, r2, #1
   1611c:	bne	16104 <__assert_fail@plt+0x4d50>
   16120:	lsr	r3, r4, ip
   16124:	orr	r3, r3, r5, lsl fp
   16128:	lsr	r2, r5, ip
   1612c:	orr	r3, r3, r5, lsr sl
   16130:	adds	r0, r0, r4
   16134:	mov	r4, r3
   16138:	lsl	r3, r2, ip
   1613c:	orr	r3, r3, r4, lsl sl
   16140:	lsl	ip, r4, ip
   16144:	orr	r3, r3, r4, lsr fp
   16148:	adc	r1, r1, r5
   1614c:	subs	r0, r0, ip
   16150:	mov	r5, r2
   16154:	sbc	r1, r1, r3
   16158:	cmp	lr, #0
   1615c:	strdne	r4, [lr]
   16160:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16164:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   16168:	mov	r7, r0
   1616c:	ldr	r6, [pc, #72]	; 161bc <__assert_fail@plt+0x4e08>
   16170:	ldr	r5, [pc, #72]	; 161c0 <__assert_fail@plt+0x4e0c>
   16174:	add	r6, pc, r6
   16178:	add	r5, pc, r5
   1617c:	sub	r6, r6, r5
   16180:	mov	r8, r1
   16184:	mov	r9, r2
   16188:	bl	110b8 <calloc@plt-0x20>
   1618c:	asrs	r6, r6, #2
   16190:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   16194:	mov	r4, #0
   16198:	add	r4, r4, #1
   1619c:	ldr	r3, [r5], #4
   161a0:	mov	r2, r9
   161a4:	mov	r1, r8
   161a8:	mov	r0, r7
   161ac:	blx	r3
   161b0:	cmp	r6, r4
   161b4:	bne	16198 <__assert_fail@plt+0x4de4>
   161b8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   161bc:	andeq	r1, r1, r8, lsl #27
   161c0:	andeq	r1, r1, r0, lsl #27
   161c4:	bx	lr
   161c8:	ldr	r3, [pc, #12]	; 161dc <__assert_fail@plt+0x4e28>
   161cc:	mov	r1, #0
   161d0:	add	r3, pc, r3
   161d4:	ldr	r2, [r3]
   161d8:	b	112c4 <__cxa_atexit@plt>
   161dc:	andeq	r1, r1, r4, lsr pc

Disassembly of section .fini:

000161e0 <.fini>:
   161e0:	push	{r3, lr}
   161e4:	pop	{r3, pc}
