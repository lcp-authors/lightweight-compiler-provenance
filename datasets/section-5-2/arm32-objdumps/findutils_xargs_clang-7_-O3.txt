
../repos/findutils/xargs/xargs:     file format elf32-littlearm


Disassembly of section .init:

0001140c <.init>:
   1140c:	push	{r3, lr}
   11410:	bl	1184c <__assert_fail@plt+0x48>
   11414:	pop	{r3, pc}

Disassembly of section .plt:

00011418 <fdopen@plt-0x14>:
   11418:	push	{lr}		; (str lr, [sp, #-4]!)
   1141c:	ldr	lr, [pc, #4]	; 11428 <fdopen@plt-0x4>
   11420:	add	lr, pc, lr
   11424:	ldr	pc, [lr, #8]!
   11428:	ldrdeq	ip, [r1], -r8

0001142c <fdopen@plt>:
   1142c:	add	ip, pc, #0, 12
   11430:	add	ip, ip, #28, 20	; 0x1c000
   11434:	ldr	pc, [ip, #3032]!	; 0xbd8

00011438 <calloc@plt>:
   11438:	add	ip, pc, #0, 12
   1143c:	add	ip, ip, #28, 20	; 0x1c000
   11440:	ldr	pc, [ip, #3024]!	; 0xbd0

00011444 <strcmp@plt>:
   11444:	add	ip, pc, #0, 12
   11448:	add	ip, ip, #28, 20	; 0x1c000
   1144c:	ldr	pc, [ip, #3016]!	; 0xbc8

00011450 <strtol@plt>:
   11450:	add	ip, pc, #0, 12
   11454:	add	ip, ip, #28, 20	; 0x1c000
   11458:	ldr	pc, [ip, #3008]!	; 0xbc0

0001145c <printf@plt>:
   1145c:	add	ip, pc, #0, 12
   11460:	add	ip, ip, #28, 20	; 0x1c000
   11464:	ldr	pc, [ip, #3000]!	; 0xbb8

00011468 <read@plt>:
   11468:	add	ip, pc, #0, 12
   1146c:	add	ip, ip, #28, 20	; 0x1c000
   11470:	ldr	pc, [ip, #2992]!	; 0xbb0

00011474 <fflush@plt>:
   11474:	add	ip, pc, #0, 12
   11478:	add	ip, ip, #28, 20	; 0x1c000
   1147c:	ldr	pc, [ip, #2984]!	; 0xba8

00011480 <wcwidth@plt>:
   11480:	add	ip, pc, #0, 12
   11484:	add	ip, ip, #28, 20	; 0x1c000
   11488:	ldr	pc, [ip, #2976]!	; 0xba0

0001148c <free@plt>:
   1148c:	add	ip, pc, #0, 12
   11490:	add	ip, ip, #28, 20	; 0x1c000
   11494:	ldr	pc, [ip, #2968]!	; 0xb98

00011498 <ferror@plt>:
   11498:	add	ip, pc, #0, 12
   1149c:	add	ip, ip, #28, 20	; 0x1c000
   114a0:	ldr	pc, [ip, #2960]!	; 0xb90

000114a4 <_exit@plt>:
   114a4:	add	ip, pc, #0, 12
   114a8:	add	ip, ip, #28, 20	; 0x1c000
   114ac:	ldr	pc, [ip, #2952]!	; 0xb88

000114b0 <memcpy@plt>:
   114b0:	add	ip, pc, #0, 12
   114b4:	add	ip, ip, #28, 20	; 0x1c000
   114b8:	ldr	pc, [ip, #2944]!	; 0xb80

000114bc <execvp@plt>:
   114bc:	add	ip, pc, #0, 12
   114c0:	add	ip, ip, #28, 20	; 0x1c000
   114c4:	ldr	pc, [ip, #2936]!	; 0xb78

000114c8 <mbsinit@plt>:
   114c8:	add	ip, pc, #0, 12
   114cc:	add	ip, ip, #28, 20	; 0x1c000
   114d0:	ldr	pc, [ip, #2928]!	; 0xb70

000114d4 <signal@plt>:
   114d4:	add	ip, pc, #0, 12
   114d8:	add	ip, ip, #28, 20	; 0x1c000
   114dc:	ldr	pc, [ip, #2920]!	; 0xb68

000114e0 <memcmp@plt>:
   114e0:	add	ip, pc, #0, 12
   114e4:	add	ip, ip, #28, 20	; 0x1c000
   114e8:	ldr	pc, [ip, #2912]!	; 0xb60

000114ec <dcgettext@plt>:
   114ec:	add	ip, pc, #0, 12
   114f0:	add	ip, ip, #28, 20	; 0x1c000
   114f4:	ldr	pc, [ip, #2904]!	; 0xb58

000114f8 <sysconf@plt>:
   114f8:	add	ip, pc, #0, 12
   114fc:	add	ip, ip, #28, 20	; 0x1c000
   11500:	ldr	pc, [ip, #2896]!	; 0xb50

00011504 <dup2@plt>:
   11504:	add	ip, pc, #0, 12
   11508:	add	ip, ip, #28, 20	; 0x1c000
   1150c:	ldr	pc, [ip, #2888]!	; 0xb48

00011510 <getrlimit64@plt>:
   11510:	add	ip, pc, #0, 12
   11514:	add	ip, ip, #28, 20	; 0x1c000
   11518:	ldr	pc, [ip, #2880]!	; 0xb40

0001151c <realloc@plt>:
   1151c:	add	ip, pc, #0, 12
   11520:	add	ip, ip, #28, 20	; 0x1c000
   11524:	ldr	pc, [ip, #2872]!	; 0xb38

00011528 <textdomain@plt>:
   11528:	add	ip, pc, #0, 12
   1152c:	add	ip, ip, #28, 20	; 0x1c000
   11530:	ldr	pc, [ip, #2864]!	; 0xb30

00011534 <iswcntrl@plt>:
   11534:	add	ip, pc, #0, 12
   11538:	add	ip, ip, #28, 20	; 0x1c000
   1153c:	ldr	pc, [ip, #2856]!	; 0xb28

00011540 <iswprint@plt>:
   11540:	add	ip, pc, #0, 12
   11544:	add	ip, ip, #28, 20	; 0x1c000
   11548:	ldr	pc, [ip, #2848]!	; 0xb20

0001154c <poll@plt>:
   1154c:	add	ip, pc, #0, 12
   11550:	add	ip, ip, #28, 20	; 0x1c000
   11554:	ldr	pc, [ip, #2840]!	; 0xb18

00011558 <sigaction@plt>:
   11558:	add	ip, pc, #0, 12
   1155c:	add	ip, ip, #28, 20	; 0x1c000
   11560:	ldr	pc, [ip, #2832]!	; 0xb10

00011564 <fwrite@plt>:
   11564:	add	ip, pc, #0, 12
   11568:	add	ip, ip, #28, 20	; 0x1c000
   1156c:	ldr	pc, [ip, #2824]!	; 0xb08

00011570 <lseek64@plt>:
   11570:	add	ip, pc, #0, 12
   11574:	add	ip, ip, #28, 20	; 0x1c000
   11578:	ldr	pc, [ip, #2816]!	; 0xb00

0001157c <waitpid@plt>:
   1157c:	add	ip, pc, #0, 12
   11580:	add	ip, ip, #28, 20	; 0x1c000
   11584:	ldr	pc, [ip, #2808]!	; 0xaf8

00011588 <__ctype_get_mb_cur_max@plt>:
   11588:	add	ip, pc, #0, 12
   1158c:	add	ip, ip, #28, 20	; 0x1c000
   11590:	ldr	pc, [ip, #2800]!	; 0xaf0

00011594 <strcpy@plt>:
   11594:	add	ip, pc, #0, 12
   11598:	add	ip, ip, #28, 20	; 0x1c000
   1159c:	ldr	pc, [ip, #2792]!	; 0xae8

000115a0 <__fpending@plt>:
   115a0:	add	ip, pc, #0, 12
   115a4:	add	ip, ip, #28, 20	; 0x1c000
   115a8:	ldr	pc, [ip, #2784]!	; 0xae0

000115ac <mbrtowc@plt>:
   115ac:	add	ip, pc, #0, 12
   115b0:	add	ip, ip, #28, 20	; 0x1c000
   115b4:	ldr	pc, [ip, #2776]!	; 0xad8

000115b8 <error@plt>:
   115b8:	add	ip, pc, #0, 12
   115bc:	add	ip, ip, #28, 20	; 0x1c000
   115c0:	ldr	pc, [ip, #2768]!	; 0xad0

000115c4 <opendir@plt>:
   115c4:	add	ip, pc, #0, 12
   115c8:	add	ip, ip, #28, 20	; 0x1c000
   115cc:	ldr	pc, [ip, #2760]!	; 0xac8

000115d0 <open64@plt>:
   115d0:	add	ip, pc, #0, 12
   115d4:	add	ip, ip, #28, 20	; 0x1c000
   115d8:	ldr	pc, [ip, #2752]!	; 0xac0

000115dc <getenv@plt>:
   115dc:	add	ip, pc, #0, 12
   115e0:	add	ip, ip, #28, 20	; 0x1c000
   115e4:	ldr	pc, [ip, #2744]!	; 0xab8

000115e8 <malloc@plt>:
   115e8:	add	ip, pc, #0, 12
   115ec:	add	ip, ip, #28, 20	; 0x1c000
   115f0:	ldr	pc, [ip, #2736]!	; 0xab0

000115f4 <__libc_start_main@plt>:
   115f4:	add	ip, pc, #0, 12
   115f8:	add	ip, ip, #28, 20	; 0x1c000
   115fc:	ldr	pc, [ip, #2728]!	; 0xaa8

00011600 <__freading@plt>:
   11600:	add	ip, pc, #0, 12
   11604:	add	ip, ip, #28, 20	; 0x1c000
   11608:	ldr	pc, [ip, #2720]!	; 0xaa0

0001160c <__gmon_start__@plt>:
   1160c:	add	ip, pc, #0, 12
   11610:	add	ip, ip, #28, 20	; 0x1c000
   11614:	ldr	pc, [ip, #2712]!	; 0xa98

00011618 <getopt_long@plt>:
   11618:	add	ip, pc, #0, 12
   1161c:	add	ip, ip, #28, 20	; 0x1c000
   11620:	ldr	pc, [ip, #2704]!	; 0xa90

00011624 <__ctype_b_loc@plt>:
   11624:	add	ip, pc, #0, 12
   11628:	add	ip, ip, #28, 20	; 0x1c000
   1162c:	ldr	pc, [ip, #2696]!	; 0xa88

00011630 <getpid@plt>:
   11630:	add	ip, pc, #0, 12
   11634:	add	ip, ip, #28, 20	; 0x1c000
   11638:	ldr	pc, [ip, #2688]!	; 0xa80

0001163c <exit@plt>:
   1163c:	add	ip, pc, #0, 12
   11640:	add	ip, ip, #28, 20	; 0x1c000
   11644:	ldr	pc, [ip, #2680]!	; 0xa78

00011648 <strtoul@plt>:
   11648:	add	ip, pc, #0, 12
   1164c:	add	ip, ip, #28, 20	; 0x1c000
   11650:	ldr	pc, [ip, #2672]!	; 0xa70

00011654 <strlen@plt>:
   11654:	add	ip, pc, #0, 12
   11658:	add	ip, ip, #28, 20	; 0x1c000
   1165c:	ldr	pc, [ip, #2664]!	; 0xa68

00011660 <strchr@plt>:
   11660:	add	ip, pc, #0, 12
   11664:	add	ip, ip, #28, 20	; 0x1c000
   11668:	ldr	pc, [ip, #2656]!	; 0xa60

0001166c <setenv@plt>:
   1166c:	add	ip, pc, #0, 12
   11670:	add	ip, ip, #28, 20	; 0x1c000
   11674:	ldr	pc, [ip, #2648]!	; 0xa58

00011678 <fprintf@plt>:
   11678:	add	ip, pc, #0, 12
   1167c:	add	ip, ip, #28, 20	; 0x1c000
   11680:	ldr	pc, [ip, #2640]!	; 0xa50

00011684 <__errno_location@plt>:
   11684:	add	ip, pc, #0, 12
   11688:	add	ip, ip, #28, 20	; 0x1c000
   1168c:	ldr	pc, [ip, #2632]!	; 0xa48

00011690 <snprintf@plt>:
   11690:	add	ip, pc, #0, 12
   11694:	add	ip, ip, #28, 20	; 0x1c000
   11698:	ldr	pc, [ip, #2624]!	; 0xa40

0001169c <__cxa_atexit@plt>:
   1169c:	add	ip, pc, #0, 12
   116a0:	add	ip, ip, #28, 20	; 0x1c000
   116a4:	ldr	pc, [ip, #2616]!	; 0xa38

000116a8 <memset@plt>:
   116a8:	add	ip, pc, #0, 12
   116ac:	add	ip, ip, #28, 20	; 0x1c000
   116b0:	ldr	pc, [ip, #2608]!	; 0xa30

000116b4 <strncpy@plt>:
   116b4:	add	ip, pc, #0, 12
   116b8:	add	ip, ip, #28, 20	; 0x1c000
   116bc:	ldr	pc, [ip, #2600]!	; 0xa28

000116c0 <write@plt>:
   116c0:	add	ip, pc, #0, 12
   116c4:	add	ip, ip, #28, 20	; 0x1c000
   116c8:	ldr	pc, [ip, #2592]!	; 0xa20

000116cc <fileno@plt>:
   116cc:	add	ip, pc, #0, 12
   116d0:	add	ip, ip, #28, 20	; 0x1c000
   116d4:	ldr	pc, [ip, #2584]!	; 0xa18

000116d8 <memchr@plt>:
   116d8:	add	ip, pc, #0, 12
   116dc:	add	ip, ip, #28, 20	; 0x1c000
   116e0:	ldr	pc, [ip, #2576]!	; 0xa10

000116e4 <fclose@plt>:
   116e4:	add	ip, pc, #0, 12
   116e8:	add	ip, ip, #28, 20	; 0x1c000
   116ec:	ldr	pc, [ip, #2568]!	; 0xa08

000116f0 <strnlen@plt>:
   116f0:	add	ip, pc, #0, 12
   116f4:	add	ip, ip, #28, 20	; 0x1c000
   116f8:	ldr	pc, [ip, #2560]!	; 0xa00

000116fc <pipe@plt>:
   116fc:	add	ip, pc, #0, 12
   11700:	add	ip, ip, #28, 20	; 0x1c000
   11704:	ldr	pc, [ip, #2552]!	; 0x9f8

00011708 <fseeko64@plt>:
   11708:	add	ip, pc, #0, 12
   1170c:	add	ip, ip, #28, 20	; 0x1c000
   11710:	ldr	pc, [ip, #2544]!	; 0x9f0

00011714 <fcntl64@plt>:
   11714:	add	ip, pc, #0, 12
   11718:	add	ip, ip, #28, 20	; 0x1c000
   1171c:	ldr	pc, [ip, #2536]!	; 0x9e8

00011720 <setlocale@plt>:
   11720:	add	ip, pc, #0, 12
   11724:	add	ip, ip, #28, 20	; 0x1c000
   11728:	ldr	pc, [ip, #2528]!	; 0x9e0

0001172c <sigemptyset@plt>:
   1172c:	add	ip, pc, #0, 12
   11730:	add	ip, ip, #28, 20	; 0x1c000
   11734:	ldr	pc, [ip, #2520]!	; 0x9d8

00011738 <fork@plt>:
   11738:	add	ip, pc, #0, 12
   1173c:	add	ip, ip, #28, 20	; 0x1c000
   11740:	ldr	pc, [ip, #2512]!	; 0x9d0

00011744 <strrchr@plt>:
   11744:	add	ip, pc, #0, 12
   11748:	add	ip, ip, #28, 20	; 0x1c000
   1174c:	ldr	pc, [ip, #2504]!	; 0x9c8

00011750 <nl_langinfo@plt>:
   11750:	add	ip, pc, #0, 12
   11754:	add	ip, ip, #28, 20	; 0x1c000
   11758:	ldr	pc, [ip, #2496]!	; 0x9c0

0001175c <fputc@plt>:
   1175c:	add	ip, pc, #0, 12
   11760:	add	ip, ip, #28, 20	; 0x1c000
   11764:	ldr	pc, [ip, #2488]!	; 0x9b8

00011768 <readdir64@plt>:
   11768:	add	ip, pc, #0, 12
   1176c:	add	ip, ip, #28, 20	; 0x1c000
   11770:	ldr	pc, [ip, #2480]!	; 0x9b0

00011774 <fdopendir@plt>:
   11774:	add	ip, pc, #0, 12
   11778:	add	ip, ip, #28, 20	; 0x1c000
   1177c:	ldr	pc, [ip, #2472]!	; 0x9a8

00011780 <putc@plt>:
   11780:	add	ip, pc, #0, 12
   11784:	add	ip, ip, #28, 20	; 0x1c000
   11788:	ldr	pc, [ip, #2464]!	; 0x9a0

0001178c <dirfd@plt>:
   1178c:	add	ip, pc, #0, 12
   11790:	add	ip, ip, #28, 20	; 0x1c000
   11794:	ldr	pc, [ip, #2456]!	; 0x998

00011798 <bindtextdomain@plt>:
   11798:	add	ip, pc, #0, 12
   1179c:	add	ip, ip, #28, 20	; 0x1c000
   117a0:	ldr	pc, [ip, #2448]!	; 0x990

000117a4 <isatty@plt>:
   117a4:	add	ip, pc, #0, 12
   117a8:	add	ip, ip, #28, 20	; 0x1c000
   117ac:	ldr	pc, [ip, #2440]!	; 0x988

000117b0 <unsetenv@plt>:
   117b0:	add	ip, pc, #0, 12
   117b4:	add	ip, ip, #28, 20	; 0x1c000
   117b8:	ldr	pc, [ip, #2432]!	; 0x980

000117bc <fputs@plt>:
   117bc:	add	ip, pc, #0, 12
   117c0:	add	ip, ip, #28, 20	; 0x1c000
   117c4:	ldr	pc, [ip, #2424]!	; 0x978

000117c8 <strncmp@plt>:
   117c8:	add	ip, pc, #0, 12
   117cc:	add	ip, ip, #28, 20	; 0x1c000
   117d0:	ldr	pc, [ip, #2416]!	; 0x970

000117d4 <abort@plt>:
   117d4:	add	ip, pc, #0, 12
   117d8:	add	ip, ip, #28, 20	; 0x1c000
   117dc:	ldr	pc, [ip, #2408]!	; 0x968

000117e0 <getc@plt>:
   117e0:	add	ip, pc, #0, 12
   117e4:	add	ip, ip, #28, 20	; 0x1c000
   117e8:	ldr	pc, [ip, #2400]!	; 0x960

000117ec <close@plt>:
   117ec:	add	ip, pc, #0, 12
   117f0:	add	ip, ip, #28, 20	; 0x1c000
   117f4:	ldr	pc, [ip, #2392]!	; 0x958

000117f8 <closedir@plt>:
   117f8:	add	ip, pc, #0, 12
   117fc:	add	ip, ip, #28, 20	; 0x1c000
   11800:	ldr	pc, [ip, #2384]!	; 0x950

00011804 <__assert_fail@plt>:
   11804:	add	ip, pc, #0, 12
   11808:	add	ip, ip, #28, 20	; 0x1c000
   1180c:	ldr	pc, [ip, #2376]!	; 0x948

Disassembly of section .text:

00011810 <.text>:
   11810:	mov	fp, #0
   11814:	mov	lr, #0
   11818:	pop	{r1}		; (ldr r1, [sp], #4)
   1181c:	mov	r2, sp
   11820:	push	{r2}		; (str r2, [sp, #-4]!)
   11824:	push	{r0}		; (str r0, [sp, #-4]!)
   11828:	ldr	ip, [pc, #16]	; 11840 <__assert_fail@plt+0x3c>
   1182c:	push	{ip}		; (str ip, [sp, #-4]!)
   11830:	ldr	r0, [pc, #12]	; 11844 <__assert_fail@plt+0x40>
   11834:	ldr	r3, [pc, #12]	; 11848 <__assert_fail@plt+0x44>
   11838:	bl	115f4 <__libc_start_main@plt>
   1183c:	bl	117d4 <abort@plt>
   11840:	andeq	sl, r1, r0, lsr #23
   11844:	andeq	r1, r1, r0, lsl #18
   11848:	andeq	sl, r1, r0, asr #22
   1184c:	ldr	r3, [pc, #20]	; 11868 <__assert_fail@plt+0x64>
   11850:	ldr	r2, [pc, #20]	; 1186c <__assert_fail@plt+0x68>
   11854:	add	r3, pc, r3
   11858:	ldr	r2, [r3, r2]
   1185c:	cmp	r2, #0
   11860:	bxeq	lr
   11864:	b	1160c <__gmon_start__@plt>
   11868:	andeq	ip, r1, r4, lsr #15
   1186c:	andeq	r0, r0, r8, asr r1
   11870:	ldr	r0, [pc, #24]	; 11890 <__assert_fail@plt+0x8c>
   11874:	ldr	r3, [pc, #24]	; 11894 <__assert_fail@plt+0x90>
   11878:	cmp	r3, r0
   1187c:	bxeq	lr
   11880:	ldr	r3, [pc, #16]	; 11898 <__assert_fail@plt+0x94>
   11884:	cmp	r3, #0
   11888:	bxeq	lr
   1188c:	bx	r3
   11890:			; <UNDEFINED> instruction: 0x0002e1b8
   11894:			; <UNDEFINED> instruction: 0x0002e1b8
   11898:	andeq	r0, r0, r0
   1189c:	ldr	r0, [pc, #36]	; 118c8 <__assert_fail@plt+0xc4>
   118a0:	ldr	r1, [pc, #36]	; 118cc <__assert_fail@plt+0xc8>
   118a4:	sub	r1, r1, r0
   118a8:	asr	r1, r1, #2
   118ac:	add	r1, r1, r1, lsr #31
   118b0:	asrs	r1, r1, #1
   118b4:	bxeq	lr
   118b8:	ldr	r3, [pc, #16]	; 118d0 <__assert_fail@plt+0xcc>
   118bc:	cmp	r3, #0
   118c0:	bxeq	lr
   118c4:	bx	r3
   118c8:			; <UNDEFINED> instruction: 0x0002e1b8
   118cc:			; <UNDEFINED> instruction: 0x0002e1b8
   118d0:	andeq	r0, r0, r0
   118d4:	push	{r4, lr}
   118d8:	ldr	r4, [pc, #24]	; 118f8 <__assert_fail@plt+0xf4>
   118dc:	ldrb	r3, [r4]
   118e0:	cmp	r3, #0
   118e4:	popne	{r4, pc}
   118e8:	bl	11870 <__assert_fail@plt+0x6c>
   118ec:	mov	r3, #1
   118f0:	strb	r3, [r4]
   118f4:	pop	{r4, pc}
   118f8:	andeq	lr, r2, r4, ror #3
   118fc:	b	1189c <__assert_fail@plt+0x98>
   11900:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11904:	add	fp, sp, #28
   11908:	sub	sp, sp, #212	; 0xd4
   1190c:	mov	r9, r0
   11910:	mov	r0, #0
   11914:	mov	sl, r1
   11918:	strb	r0, [fp, #-40]	; 0xffffffd8
   1191c:	movw	r0, #25445	; 0x6365
   11920:	movt	r0, #28520	; 0x6f68
   11924:	str	r0, [fp, #-44]	; 0xffffffd4
   11928:	ldr	r0, [r1]
   1192c:	cmp	r0, #0
   11930:	movweq	r0, #43981	; 0xabcd
   11934:	movteq	r0, #1
   11938:	bl	16cec <__assert_fail@plt+0x54e8>
   1193c:	bl	15340 <__assert_fail@plt+0x3b3c>
   11940:	bl	11630 <getpid@plt>
   11944:	movw	r1, #57876	; 0xe214
   11948:	movt	r1, #2
   1194c:	str	r0, [r1, #12]
   11950:	mov	r0, #0
   11954:	str	r0, [r1, #16]
   11958:	movw	r1, #47291	; 0xb8bb
   1195c:	mov	r0, #6
   11960:	movt	r1, #1
   11964:	bl	11720 <setlocale@plt>
   11968:	movw	r4, #51470	; 0xc90e
   1196c:	movw	r1, #43987	; 0xabd3
   11970:	movt	r4, #1
   11974:	movt	r1, #1
   11978:	mov	r0, r4
   1197c:	bl	11798 <bindtextdomain@plt>
   11980:	mov	r0, r4
   11984:	bl	11528 <textdomain@plt>
   11988:	movw	r0, #23656	; 0x5c68
   1198c:	movt	r0, #1
   11990:	bl	1aba4 <__assert_fail@plt+0x93a0>
   11994:	cmp	r0, #0
   11998:	bne	12cf4 <__assert_fail@plt+0x14f0>
   1199c:	movw	r0, #13532	; 0x34dc
   119a0:	movt	r0, #1
   119a4:	bl	1aba4 <__assert_fail@plt+0x93a0>
   119a8:	cmp	r0, #0
   119ac:	bne	12cf4 <__assert_fail@plt+0x14f0>
   119b0:	movw	r0, #57876	; 0xe214
   119b4:	mov	r1, #2048	; 0x800
   119b8:	movt	r0, #2
   119bc:	add	r4, r0, #64	; 0x40
   119c0:	mov	r0, r4
   119c4:	bl	15040 <__assert_fail@plt+0x383c>
   119c8:	mov	r8, r0
   119cc:	sub	r0, r0, #1
   119d0:	str	r4, [sp, #48]	; 0x30
   119d4:	cmp	r0, #2
   119d8:	bcs	119e8 <__assert_fail@plt+0x1e4>
   119dc:	movw	r0, #13664	; 0x3560
   119e0:	movt	r0, #1
   119e4:	b	11a50 <__assert_fail@plt+0x24c>
   119e8:	mov	r0, #0
   119ec:	bl	114f8 <sysconf@plt>
   119f0:	cmp	r0, #1
   119f4:	blt	12710 <__assert_fail@plt+0xf0c>
   119f8:	movw	r1, #57876	; 0xe214
   119fc:	cmp	r0, #2048	; 0x800
   11a00:	movt	r1, #2
   11a04:	ble	12e1c <__assert_fail@plt+0x1618>
   11a08:	mov	r2, r1
   11a0c:	ldr	r1, [r1, #76]	; 0x4c
   11a10:	sub	r0, r0, #2048	; 0x800
   11a14:	cmp	r1, r0
   11a18:	movcc	r0, r1
   11a1c:	str	r0, [r2, #76]	; 0x4c
   11a20:	mov	r1, #0
   11a24:	cmp	r1, r0, lsr #11
   11a28:	beq	12728 <__assert_fail@plt+0xf24>
   11a2c:	movw	r0, #13708	; 0x358c
   11a30:	movw	r1, #57876	; 0xe214
   11a34:	movt	r0, #1
   11a38:	movt	r1, #2
   11a3c:	str	r0, [r1, #96]	; 0x60
   11a40:	mov	r0, r4
   11a44:	bl	15144 <__assert_fail@plt+0x3940>
   11a48:	movw	r0, #13528	; 0x34d8
   11a4c:	movt	r0, #1
   11a50:	str	r0, [sp, #36]	; 0x24
   11a54:	movw	r0, #11928	; 0x2e98
   11a58:	movw	r4, #49988	; 0xc344
   11a5c:	mov	r6, #0
   11a60:	mov	r5, #1
   11a64:	movt	r0, #1
   11a68:	movt	r4, #1
   11a6c:	str	r0, [sp, #44]	; 0x2c
   11a70:	movw	r0, #52199	; 0xcbe7
   11a74:	movt	r0, #1
   11a78:	str	r0, [sp, #32]
   11a7c:	mov	r0, #1
   11a80:	str	r0, [sp, #40]	; 0x28
   11a84:	mov	r0, #0
   11a88:	b	11a94 <__assert_fail@plt+0x290>
   11a8c:	mov	r6, #0
   11a90:	mov	r5, #1
   11a94:	movw	r2, #44131	; 0xac63
   11a98:	mov	r7, r0
   11a9c:	sub	r0, fp, #36	; 0x24
   11aa0:	mov	r1, sl
   11aa4:	mov	r3, r4
   11aa8:	str	r0, [sp]
   11aac:	mov	r0, r9
   11ab0:	movt	r2, #1
   11ab4:	bl	11618 <getopt_long@plt>
   11ab8:	sub	r1, r0, #48	; 0x30
   11abc:	cmp	r1, #208	; 0xd0
   11ac0:	bhi	12554 <__assert_fail@plt+0xd50>
   11ac4:	add	r2, pc, #4
   11ac8:	mov	r0, #1
   11acc:	ldr	pc, [r2, r1, lsl #2]
   11ad0:	muleq	r1, r4, r0
   11ad4:	andeq	r2, r1, r4, ror #25
   11ad8:	andeq	r2, r1, r4, ror #25
   11adc:	andeq	r2, r1, r4, ror #25
   11ae0:	andeq	r2, r1, r4, ror #25
   11ae4:	andeq	r2, r1, r4, ror #25
   11ae8:	andeq	r2, r1, r4, ror #25
   11aec:	andeq	r2, r1, r4, ror #25
   11af0:	andeq	r2, r1, r4, ror #25
   11af4:	andeq	r2, r1, r4, ror #25
   11af8:	andeq	r2, r1, r4, ror #25
   11afc:	andeq	r2, r1, r4, ror #25
   11b00:	andeq	r2, r1, r4, ror #25
   11b04:	andeq	r2, r1, r4, ror #25
   11b08:	andeq	r2, r1, r4, ror #25
   11b0c:	andeq	r2, r1, r4, ror #25
   11b10:	andeq	r2, r1, r4, ror #25
   11b14:	andeq	r2, r1, r4, ror #25
   11b18:	andeq	r2, r1, r4, ror #25
   11b1c:	andeq	r2, r1, r4, ror #25
   11b20:	andeq	r2, r1, r4, ror #25
   11b24:	andeq	r1, r1, r4, lsl lr
   11b28:	andeq	r2, r1, r4, ror #25
   11b2c:	andeq	r2, r1, r4, ror #25
   11b30:	andeq	r2, r1, r4, ror #25
   11b34:	andeq	r1, r1, r4, asr #28
   11b38:	andeq	r2, r1, r4, ror #25
   11b3c:	andeq	r2, r1, r4, ror #25
   11b40:	andeq	r1, r1, ip, asr #31
   11b44:	andeq	r2, r1, r4, ror #25
   11b48:	andeq	r2, r1, r4, ror #25
   11b4c:	andeq	r2, r1, r4, ror #25
   11b50:	muleq	r1, ip, r1
   11b54:	andeq	r2, r1, r4, ror #25
   11b58:	andeq	r2, r1, r4, ror #25
   11b5c:	muleq	r1, r4, sl
   11b60:	andeq	r2, r1, r4, ror #25
   11b64:	andeq	r2, r1, r4, ror #25
   11b68:	andeq	r2, r1, r4, ror #25
   11b6c:	andeq	r2, r1, r4, ror #25
   11b70:	andeq	r2, r1, r4, ror #25
   11b74:	andeq	r2, r1, r4, ror #25
   11b78:	andeq	r2, r1, r4, ror #25
   11b7c:	andeq	r2, r1, r4, ror #25
   11b80:	andeq	r2, r1, r4, ror #25
   11b84:	andeq	r2, r1, r4, ror #25
   11b88:	andeq	r2, r1, r4, ror #25
   11b8c:	andeq	r2, r1, r4, ror #25
   11b90:	andeq	r2, r1, r4, ror #25
   11b94:	muleq	r1, r8, r2
   11b98:	andeq	r2, r1, r4, ror #25
   11b9c:	andeq	r2, r1, r4, ror #25
   11ba0:	andeq	r2, r1, r8, asr #2
   11ba4:	andeq	r1, r1, r4, lsl lr
   11ba8:	andeq	r2, r1, r4, ror #25
   11bac:	andeq	r2, r1, r4, ror #25
   11bb0:	andeq	r2, r1, ip, ror #25
   11bb4:	andeq	r1, r1, r4, asr #28
   11bb8:	andeq	r2, r1, r4, ror #25
   11bbc:	andeq	r2, r1, r4, ror #25
   11bc0:	andeq	r1, r1, r0, lsr #31
   11bc4:	andeq	r2, r1, r4, ror #25
   11bc8:	andeq	r2, r1, r8, ror #3
   11bcc:	andeq	r2, r1, r0, lsl #1
   11bd0:	ldrdeq	r2, [r1], -r0
   11bd4:	andeq	r2, r1, r4, ror #25
   11bd8:	andeq	r1, r1, r4, lsr pc
   11bdc:	strheq	r2, [r1], -r4
   11be0:	andeq	r1, r1, r0, lsr #30
   11be4:	andeq	r2, r1, r4, ror #25
   11be8:	strdeq	r2, [r1], -r8
   11bec:	andeq	r2, r1, r4, ror #25
   11bf0:	andeq	r1, r1, r4, asr #30
   11bf4:	andeq	r2, r1, r4, ror #25
   11bf8:	andeq	r2, r1, r4, ror #25
   11bfc:	andeq	r2, r1, r4, ror #25
   11c00:	andeq	r2, r1, r4, ror #25
   11c04:	andeq	r2, r1, r4, ror #25
   11c08:	andeq	r2, r1, r4, ror #25
   11c0c:	andeq	r2, r1, r4, ror #25
   11c10:	andeq	r2, r1, r4, ror #25
   11c14:	andeq	r2, r1, r4, ror #25
   11c18:	andeq	r2, r1, r4, ror #25
   11c1c:	andeq	r2, r1, r4, ror #25
   11c20:	andeq	r2, r1, r4, ror #25
   11c24:	andeq	r2, r1, r4, ror #25
   11c28:	andeq	r2, r1, r4, ror #25
   11c2c:	andeq	r2, r1, r4, ror #25
   11c30:	andeq	r2, r1, r4, ror #25
   11c34:	andeq	r2, r1, r4, ror #25
   11c38:	andeq	r2, r1, r4, ror #25
   11c3c:	andeq	r2, r1, r4, ror #25
   11c40:	andeq	r2, r1, r4, ror #25
   11c44:	andeq	r2, r1, r4, ror #25
   11c48:	andeq	r2, r1, r4, ror #25
   11c4c:	andeq	r2, r1, r4, ror #25
   11c50:	andeq	r2, r1, r4, ror #25
   11c54:	andeq	r2, r1, r4, ror #25
   11c58:	andeq	r2, r1, r4, ror #25
   11c5c:	andeq	r2, r1, r4, ror #25
   11c60:	andeq	r2, r1, r4, ror #25
   11c64:	andeq	r2, r1, r4, ror #25
   11c68:	andeq	r2, r1, r4, ror #25
   11c6c:	andeq	r2, r1, r4, ror #25
   11c70:	andeq	r2, r1, r4, ror #25
   11c74:	andeq	r2, r1, r4, ror #25
   11c78:	andeq	r2, r1, r4, ror #25
   11c7c:	andeq	r2, r1, r4, ror #25
   11c80:	andeq	r2, r1, r4, ror #25
   11c84:	andeq	r2, r1, r4, ror #25
   11c88:	andeq	r2, r1, r4, ror #25
   11c8c:	andeq	r2, r1, r4, ror #25
   11c90:	andeq	r2, r1, r4, ror #25
   11c94:	andeq	r2, r1, r4, ror #25
   11c98:	andeq	r2, r1, r4, ror #25
   11c9c:	andeq	r2, r1, r4, ror #25
   11ca0:	andeq	r2, r1, r4, ror #25
   11ca4:	andeq	r2, r1, r4, ror #25
   11ca8:	andeq	r2, r1, r4, ror #25
   11cac:	andeq	r2, r1, r4, ror #25
   11cb0:	andeq	r2, r1, r4, ror #25
   11cb4:	andeq	r2, r1, r4, ror #25
   11cb8:	andeq	r2, r1, r4, ror #25
   11cbc:	andeq	r2, r1, r4, ror #25
   11cc0:	andeq	r2, r1, r4, ror #25
   11cc4:	andeq	r2, r1, r4, ror #25
   11cc8:	andeq	r2, r1, r4, ror #25
   11ccc:	andeq	r2, r1, r4, ror #25
   11cd0:	andeq	r2, r1, r4, ror #25
   11cd4:	andeq	r2, r1, r4, ror #25
   11cd8:	andeq	r2, r1, r4, ror #25
   11cdc:	andeq	r2, r1, r4, ror #25
   11ce0:	andeq	r2, r1, r4, ror #25
   11ce4:	andeq	r2, r1, r4, ror #25
   11ce8:	andeq	r2, r1, r4, ror #25
   11cec:	andeq	r2, r1, r4, ror #25
   11cf0:	andeq	r2, r1, r4, ror #25
   11cf4:	andeq	r2, r1, r4, ror #25
   11cf8:	andeq	r2, r1, r4, ror #25
   11cfc:	andeq	r2, r1, r4, ror #25
   11d00:	andeq	r2, r1, r4, ror #25
   11d04:	andeq	r2, r1, r4, ror #25
   11d08:	andeq	r2, r1, r4, ror #25
   11d0c:	andeq	r2, r1, r4, ror #25
   11d10:	andeq	r2, r1, r4, ror #25
   11d14:	andeq	r2, r1, r4, ror #25
   11d18:	andeq	r2, r1, r4, ror #25
   11d1c:	andeq	r2, r1, r4, ror #25
   11d20:	andeq	r2, r1, r4, ror #25
   11d24:	andeq	r2, r1, r4, ror #25
   11d28:	andeq	r2, r1, r4, ror #25
   11d2c:	andeq	r2, r1, r4, ror #25
   11d30:	andeq	r2, r1, r4, ror #25
   11d34:	andeq	r2, r1, r4, ror #25
   11d38:	andeq	r2, r1, r4, ror #25
   11d3c:	andeq	r2, r1, r4, ror #25
   11d40:	andeq	r2, r1, r4, ror #25
   11d44:	andeq	r2, r1, r4, ror #25
   11d48:	andeq	r2, r1, r4, ror #25
   11d4c:	andeq	r2, r1, r4, ror #25
   11d50:	andeq	r2, r1, r4, ror #25
   11d54:	andeq	r2, r1, r4, ror #25
   11d58:	andeq	r2, r1, r4, ror #25
   11d5c:	andeq	r2, r1, r4, ror #25
   11d60:	andeq	r2, r1, r4, ror #25
   11d64:	andeq	r2, r1, r4, ror #25
   11d68:	andeq	r2, r1, r4, ror #25
   11d6c:	andeq	r2, r1, r4, ror #25
   11d70:	andeq	r2, r1, r4, ror #25
   11d74:	andeq	r2, r1, r4, ror #25
   11d78:	andeq	r2, r1, r4, ror #25
   11d7c:	andeq	r2, r1, r4, ror #25
   11d80:	andeq	r2, r1, r4, ror #25
   11d84:	andeq	r2, r1, r4, ror #25
   11d88:	andeq	r2, r1, r4, ror #25
   11d8c:	andeq	r2, r1, r4, ror #25
   11d90:	andeq	r2, r1, r4, ror #25
   11d94:	andeq	r2, r1, r4, ror #25
   11d98:	andeq	r2, r1, r4, ror #25
   11d9c:	andeq	r2, r1, r4, ror #25
   11da0:	andeq	r2, r1, r4, ror #25
   11da4:	andeq	r2, r1, r4, ror #25
   11da8:	andeq	r2, r1, r4, ror #25
   11dac:	andeq	r2, r1, r4, ror #25
   11db0:	andeq	r2, r1, r4, ror #25
   11db4:	andeq	r2, r1, r4, ror #25
   11db8:	andeq	r2, r1, r4, ror #25
   11dbc:	andeq	r2, r1, r4, ror #25
   11dc0:	andeq	r2, r1, r4, ror #25
   11dc4:	andeq	r2, r1, r4, ror #25
   11dc8:	andeq	r2, r1, r4, ror #25
   11dcc:	andeq	r2, r1, r4, ror #25
   11dd0:	andeq	r2, r1, r4, ror #25
   11dd4:	andeq	r2, r1, r4, ror #25
   11dd8:	andeq	r2, r1, r4, ror #25
   11ddc:	andeq	r2, r1, r4, ror #25
   11de0:	andeq	r2, r1, r4, ror #25
   11de4:	andeq	r2, r1, r4, ror #25
   11de8:	andeq	r2, r1, r4, ror #25
   11dec:	andeq	r2, r1, r4, ror #25
   11df0:	andeq	r2, r1, r4, ror #25
   11df4:	andeq	r2, r1, r4, ror #25
   11df8:	andeq	r2, r1, r4, ror #25
   11dfc:	andeq	r2, r1, r4, ror #25
   11e00:	andeq	r2, r1, r4, ror #25
   11e04:	andeq	r2, r1, r4, ror #25
   11e08:	andeq	r2, r1, r4, ror #25
   11e0c:	andeq	r2, r1, r4, ror #25
   11e10:	andeq	r1, r1, r8, asr pc
   11e14:	movw	r0, #57824	; 0xe1e0
   11e18:	movt	r0, #2
   11e1c:	ldr	r0, [r0]
   11e20:	cmp	r0, #0
   11e24:	ldrbne	r1, [r0]
   11e28:	cmpne	r1, #0
   11e2c:	bne	122b0 <__assert_fail@plt+0xaac>
   11e30:	movw	r0, #57876	; 0xe214
   11e34:	movt	r0, #2
   11e38:	str	r6, [r0, #20]
   11e3c:	mov	r0, r7
   11e40:	b	11a94 <__assert_fail@plt+0x290>
   11e44:	movw	r0, #57824	; 0xe1e0
   11e48:	movw	r1, #44164	; 0xac84
   11e4c:	movt	r0, #2
   11e50:	movt	r1, #1
   11e54:	ldr	r0, [r0]
   11e58:	cmp	r0, #0
   11e5c:	moveq	r0, r1
   11e60:	movw	r1, #57876	; 0xe214
   11e64:	movt	r1, #2
   11e68:	str	r0, [r1, #88]	; 0x58
   11e6c:	ldr	r0, [r1, #104]	; 0x68
   11e70:	cmp	r0, #0
   11e74:	beq	11ec0 <__assert_fail@plt+0x6bc>
   11e78:	movw	r1, #45877	; 0xb335
   11e7c:	mov	r0, #0
   11e80:	mov	r2, #5
   11e84:	movt	r1, #1
   11e88:	bl	114ec <dcgettext@plt>
   11e8c:	mov	r2, r0
   11e90:	movw	r0, #44167	; 0xac87
   11e94:	movw	r3, #44183	; 0xac97
   11e98:	mov	r1, #0
   11e9c:	movt	r0, #1
   11ea0:	movt	r3, #1
   11ea4:	str	r0, [sp]
   11ea8:	mov	r0, #0
   11eac:	str	r3, [sp, #4]
   11eb0:	bl	115b8 <error@plt>
   11eb4:	movw	r1, #57876	; 0xe214
   11eb8:	movt	r1, #2
   11ebc:	str	r6, [r1, #104]	; 0x68
   11ec0:	ldr	r0, [r1, #100]	; 0x64
   11ec4:	cmp	r0, #0
   11ec8:	mov	r0, r7
   11ecc:	beq	11a94 <__assert_fail@plt+0x290>
   11ed0:	movw	r1, #45877	; 0xb335
   11ed4:	mov	r0, #0
   11ed8:	mov	r2, #5
   11edc:	movt	r1, #1
   11ee0:	bl	114ec <dcgettext@plt>
   11ee4:	mov	r2, r0
   11ee8:	movw	r0, #44167	; 0xac87
   11eec:	movw	r3, #44194	; 0xaca2
   11ef0:	mov	r1, #0
   11ef4:	movt	r0, #1
   11ef8:	movt	r3, #1
   11efc:	str	r0, [sp]
   11f00:	mov	r0, #0
   11f04:	str	r3, [sp, #4]
   11f08:	bl	115b8 <error@plt>
   11f0c:	movw	r0, #57876	; 0xe214
   11f10:	movt	r0, #2
   11f14:	str	r6, [r0, #100]	; 0x64
   11f18:	mov	r0, r7
   11f1c:	b	11a94 <__assert_fail@plt+0x290>
   11f20:	movw	r0, #57876	; 0xe214
   11f24:	movt	r0, #2
   11f28:	strb	r5, [r0, #1]
   11f2c:	mov	r0, r7
   11f30:	b	11a94 <__assert_fail@plt+0x290>
   11f34:	mov	r0, #0
   11f38:	str	r0, [sp, #40]	; 0x28
   11f3c:	mov	r0, r7
   11f40:	b	11a94 <__assert_fail@plt+0x290>
   11f44:	movw	r0, #57876	; 0xe214
   11f48:	movt	r0, #2
   11f4c:	str	r5, [r0, #64]	; 0x40
   11f50:	mov	r0, r7
   11f54:	b	11a94 <__assert_fail@plt+0x290>
   11f58:	movw	r0, #57824	; 0xe1e0
   11f5c:	mov	r1, #61	; 0x3d
   11f60:	movt	r0, #2
   11f64:	ldr	r5, [r0]
   11f68:	mov	r0, r5
   11f6c:	bl	11660 <strchr@plt>
   11f70:	cmp	r0, #0
   11f74:	bne	12d68 <__assert_fail@plt+0x1564>
   11f78:	movw	r0, #57876	; 0xe214
   11f7c:	movt	r0, #2
   11f80:	str	r5, [r0, #24]
   11f84:	mov	r0, r5
   11f88:	bl	117b0 <unsetenv@plt>
   11f8c:	cmp	r0, #0
   11f90:	mov	r0, r7
   11f94:	mov	r5, #1
   11f98:	beq	11a94 <__assert_fail@plt+0x290>
   11f9c:	b	12d94 <__assert_fail@plt+0x1590>
   11fa0:	movw	r0, #57824	; 0xe1e0
   11fa4:	movt	r0, #2
   11fa8:	ldr	r0, [r0]
   11fac:	cmp	r0, #0
   11fb0:	beq	12374 <__assert_fail@plt+0xb70>
   11fb4:	mov	r1, #108	; 0x6c
   11fb8:	mov	r2, #1
   11fbc:	mvn	r3, #0
   11fc0:	str	r5, [sp]
   11fc4:	bl	13fe8 <__assert_fail@plt+0x27e4>
   11fc8:	b	12378 <__assert_fail@plt+0xb74>
   11fcc:	movw	r0, #57824	; 0xe1e0
   11fd0:	mov	r1, #76	; 0x4c
   11fd4:	mov	r2, #1
   11fd8:	mvn	r3, #0
   11fdc:	str	r5, [sp]
   11fe0:	movt	r0, #2
   11fe4:	ldr	r0, [r0]
   11fe8:	bl	13fe8 <__assert_fail@plt+0x27e4>
   11fec:	movw	r1, #57876	; 0xe214
   11ff0:	movt	r1, #2
   11ff4:	str	r0, [r1, #100]	; 0x64
   11ff8:	ldr	r0, [r1, #104]	; 0x68
   11ffc:	cmp	r0, #0
   12000:	beq	1204c <__assert_fail@plt+0x848>
   12004:	movw	r1, #45877	; 0xb335
   12008:	mov	r0, #0
   1200c:	mov	r2, #5
   12010:	movt	r1, #1
   12014:	bl	114ec <dcgettext@plt>
   12018:	mov	r2, r0
   1201c:	movw	r0, #44206	; 0xacae
   12020:	movw	r3, #44183	; 0xac97
   12024:	mov	r1, #0
   12028:	movt	r0, #1
   1202c:	movt	r3, #1
   12030:	str	r0, [sp]
   12034:	mov	r0, #0
   12038:	str	r3, [sp, #4]
   1203c:	bl	115b8 <error@plt>
   12040:	movw	r1, #57876	; 0xe214
   12044:	movt	r1, #2
   12048:	str	r6, [r1, #104]	; 0x68
   1204c:	ldr	r0, [r1, #88]	; 0x58
   12050:	cmp	r0, #0
   12054:	mov	r0, r7
   12058:	beq	11a94 <__assert_fail@plt+0x290>
   1205c:	movw	r1, #45877	; 0xb335
   12060:	mov	r0, #0
   12064:	mov	r2, #5
   12068:	movt	r1, #1
   1206c:	bl	114ec <dcgettext@plt>
   12070:	mov	r2, r0
   12074:	movw	r0, #44206	; 0xacae
   12078:	movt	r0, #1
   1207c:	b	12408 <__assert_fail@plt+0xc04>
   12080:	movw	r0, #57876	; 0xe214
   12084:	movt	r0, #2
   12088:	strb	r5, [r0, #2]
   1208c:	mov	r0, r7
   12090:	b	11a94 <__assert_fail@plt+0x290>
   12094:	movw	r0, #57876	; 0xe214
   12098:	movt	r0, #2
   1209c:	strb	r6, [r0]
   120a0:	movw	r0, #15248	; 0x3b90
   120a4:	movt	r0, #1
   120a8:	str	r0, [sp, #44]	; 0x2c
   120ac:	mov	r0, r7
   120b0:	b	11a94 <__assert_fail@plt+0x290>
   120b4:	ldr	r0, [sp, #36]	; 0x24
   120b8:	mov	r5, #0
   120bc:	mov	r6, r4
   120c0:	blx	r0
   120c4:	movw	r0, #57876	; 0xe214
   120c8:	mov	r1, #115	; 0x73
   120cc:	mov	r2, #1
   120d0:	str	r5, [sp]
   120d4:	movt	r0, #2
   120d8:	mov	r4, r0
   120dc:	ldr	r3, [r0, #68]	; 0x44
   120e0:	movw	r0, #57824	; 0xe1e0
   120e4:	movt	r0, #2
   120e8:	ldr	r0, [r0]
   120ec:	bl	13fe8 <__assert_fail@plt+0x27e4>
   120f0:	mov	r5, r0
   120f4:	ldr	r0, [r4, #68]	; 0x44
   120f8:	cmp	r5, r0
   120fc:	bls	122c4 <__assert_fail@plt+0xac0>
   12100:	movw	r1, #44248	; 0xacd8
   12104:	mov	r0, #0
   12108:	mov	r2, #5
   1210c:	movt	r1, #1
   12110:	bl	114ec <dcgettext@plt>
   12114:	mov	r2, r0
   12118:	movw	r0, #57876	; 0xe214
   1211c:	mov	r1, #0
   12120:	mov	r3, r5
   12124:	movt	r0, #2
   12128:	ldr	r0, [r0, #68]	; 0x44
   1212c:	str	r0, [sp]
   12130:	mov	r0, #0
   12134:	bl	115b8 <error@plt>
   12138:	movw	r1, #57876	; 0xe214
   1213c:	movt	r1, #2
   12140:	ldr	r5, [r1, #68]	; 0x44
   12144:	b	122c8 <__assert_fail@plt+0xac4>
   12148:	movw	r0, #57824	; 0xe1e0
   1214c:	str	r8, [sp, #28]
   12150:	movt	r0, #2
   12154:	ldr	r4, [r0]
   12158:	mov	r0, r4
   1215c:	bl	11654 <strlen@plt>
   12160:	mov	r1, r0
   12164:	ldrb	r0, [r4]
   12168:	cmp	r1, #1
   1216c:	bne	122d8 <__assert_fail@plt+0xad4>
   12170:	movw	r1, #57876	; 0xe214
   12174:	ldr	r8, [sp, #28]
   12178:	movw	r4, #49988	; 0xc344
   1217c:	movt	r1, #2
   12180:	movt	r4, #1
   12184:	strb	r0, [r1]
   12188:	movw	r0, #15248	; 0x3b90
   1218c:	movt	r0, #1
   12190:	str	r0, [sp, #44]	; 0x2c
   12194:	mov	r0, r7
   12198:	b	11a8c <__assert_fail@plt+0x288>
   1219c:	movw	r0, #57824	; 0xe1e0
   121a0:	mov	r1, #80	; 0x50
   121a4:	mov	r2, #0
   121a8:	mvn	r3, #-2147483648	; 0x80000000
   121ac:	str	r5, [sp]
   121b0:	movt	r0, #2
   121b4:	ldr	r0, [r0]
   121b8:	bl	13fe8 <__assert_fail@plt+0x27e4>
   121bc:	movw	r1, #57704	; 0xe168
   121c0:	movt	r1, #2
   121c4:	str	r0, [r1]
   121c8:	mov	r0, r7
   121cc:	b	11a94 <__assert_fail@plt+0x290>
   121d0:	movw	r0, #57876	; 0xe214
   121d4:	movt	r0, #2
   121d8:	strb	r5, [r0, #1]
   121dc:	strb	r5, [r0, #3]
   121e0:	mov	r0, r7
   121e4:	b	11a94 <__assert_fail@plt+0x290>
   121e8:	movw	r0, #57824	; 0xe1e0
   121ec:	mov	r1, #110	; 0x6e
   121f0:	mov	r2, #1
   121f4:	mvn	r3, #0
   121f8:	str	r5, [sp]
   121fc:	movt	r0, #2
   12200:	ldr	r0, [r0]
   12204:	bl	13fe8 <__assert_fail@plt+0x27e4>
   12208:	movw	r1, #57876	; 0xe214
   1220c:	movt	r1, #2
   12210:	str	r0, [r1, #104]	; 0x68
   12214:	ldr	r0, [r1, #100]	; 0x64
   12218:	cmp	r0, #0
   1221c:	beq	12268 <__assert_fail@plt+0xa64>
   12220:	movw	r1, #45877	; 0xb335
   12224:	mov	r0, #0
   12228:	mov	r2, #5
   1222c:	movt	r1, #1
   12230:	bl	114ec <dcgettext@plt>
   12234:	mov	r2, r0
   12238:	movw	r0, #44234	; 0xacca
   1223c:	movw	r3, #44194	; 0xaca2
   12240:	mov	r1, #0
   12244:	movt	r0, #1
   12248:	movt	r3, #1
   1224c:	str	r0, [sp]
   12250:	mov	r0, #0
   12254:	str	r3, [sp, #4]
   12258:	bl	115b8 <error@plt>
   1225c:	movw	r1, #57876	; 0xe214
   12260:	movt	r1, #2
   12264:	str	r6, [r1, #100]	; 0x64
   12268:	ldr	r0, [r1, #88]	; 0x58
   1226c:	cmp	r0, #0
   12270:	mov	r0, r7
   12274:	beq	11a94 <__assert_fail@plt+0x290>
   12278:	movw	r1, #57876	; 0xe214
   1227c:	movt	r1, #2
   12280:	ldr	r0, [r1, #104]	; 0x68
   12284:	cmp	r0, #1
   12288:	bne	12438 <__assert_fail@plt+0xc34>
   1228c:	str	r6, [r1, #104]	; 0x68
   12290:	mov	r0, r7
   12294:	b	11a94 <__assert_fail@plt+0x290>
   12298:	movw	r0, #57824	; 0xe1e0
   1229c:	movt	r0, #2
   122a0:	ldr	r0, [r0]
   122a4:	str	r0, [sp, #32]
   122a8:	mov	r0, r7
   122ac:	b	11a94 <__assert_fail@plt+0x290>
   122b0:	movw	r1, #57876	; 0xe214
   122b4:	movt	r1, #2
   122b8:	str	r0, [r1, #20]
   122bc:	mov	r0, r7
   122c0:	b	11a94 <__assert_fail@plt+0x290>
   122c4:	mov	r1, r4
   122c8:	mov	r0, r7
   122cc:	mov	r4, r6
   122d0:	str	r5, [r1, #76]	; 0x4c
   122d4:	b	11a8c <__assert_fail@plt+0x288>
   122d8:	cmp	r0, #92	; 0x5c
   122dc:	bne	12d20 <__assert_fail@plt+0x151c>
   122e0:	mov	r5, r4
   122e4:	ldrb	r6, [r5, #1]!
   122e8:	sub	r1, r6, #92	; 0x5c
   122ec:	cmp	r1, #26
   122f0:	bhi	12490 <__assert_fail@plt+0xc8c>
   122f4:	add	r2, pc, #4
   122f8:	mov	r0, #7
   122fc:	ldr	pc, [r2, r1, lsl #2]
   12300:	andeq	r2, r1, ip, ror #6
   12304:	muleq	r1, r0, r4
   12308:	muleq	r1, r0, r4
   1230c:	muleq	r1, r0, r4
   12310:	muleq	r1, r0, r4
   12314:	andeq	r2, r1, r0, ror r1
   12318:	andeq	r2, r1, ip, lsr #9
   1231c:	muleq	r1, r0, r4
   12320:	muleq	r1, r0, r4
   12324:	muleq	r1, r0, r4
   12328:	andeq	r2, r1, r4, asr #9
   1232c:	muleq	r1, r0, r4
   12330:	muleq	r1, r0, r4
   12334:	muleq	r1, r0, r4
   12338:	muleq	r1, r0, r4
   1233c:	muleq	r1, r0, r4
   12340:	muleq	r1, r0, r4
   12344:	muleq	r1, r0, r4
   12348:	andeq	r2, r1, ip, asr #9
   1234c:	muleq	r1, r0, r4
   12350:	muleq	r1, r0, r4
   12354:	muleq	r1, r0, r4
   12358:	andeq	r2, r1, r4, lsr #9
   1235c:	muleq	r1, r0, r4
   12360:			; <UNDEFINED> instruction: 0x000124b4
   12364:	muleq	r1, r0, r4
   12368:			; <UNDEFINED> instruction: 0x000124bc
   1236c:	mov	r0, #92	; 0x5c
   12370:	b	12170 <__assert_fail@plt+0x96c>
   12374:	mov	r0, #1
   12378:	movw	r1, #57876	; 0xe214
   1237c:	movt	r1, #2
   12380:	str	r0, [r1, #100]	; 0x64
   12384:	ldr	r0, [r1, #104]	; 0x68
   12388:	cmp	r0, #0
   1238c:	beq	123d8 <__assert_fail@plt+0xbd4>
   12390:	movw	r1, #45877	; 0xb335
   12394:	mov	r0, #0
   12398:	mov	r2, #5
   1239c:	movt	r1, #1
   123a0:	bl	114ec <dcgettext@plt>
   123a4:	mov	r2, r0
   123a8:	movw	r0, #44219	; 0xacbb
   123ac:	movw	r3, #44183	; 0xac97
   123b0:	mov	r1, #0
   123b4:	movt	r0, #1
   123b8:	movt	r3, #1
   123bc:	str	r0, [sp]
   123c0:	mov	r0, #0
   123c4:	str	r3, [sp, #4]
   123c8:	bl	115b8 <error@plt>
   123cc:	movw	r1, #57876	; 0xe214
   123d0:	movt	r1, #2
   123d4:	str	r6, [r1, #104]	; 0x68
   123d8:	ldr	r0, [r1, #88]	; 0x58
   123dc:	cmp	r0, #0
   123e0:	mov	r0, r7
   123e4:	beq	11a94 <__assert_fail@plt+0x290>
   123e8:	movw	r1, #45877	; 0xb335
   123ec:	mov	r0, #0
   123f0:	mov	r2, #5
   123f4:	movt	r1, #1
   123f8:	bl	114ec <dcgettext@plt>
   123fc:	mov	r2, r0
   12400:	movw	r0, #44219	; 0xacbb
   12404:	movt	r0, #1
   12408:	movw	r3, #44209	; 0xacb1
   1240c:	str	r0, [sp]
   12410:	mov	r0, #0
   12414:	mov	r1, #0
   12418:	movt	r3, #1
   1241c:	str	r3, [sp, #4]
   12420:	bl	115b8 <error@plt>
   12424:	movw	r0, #57876	; 0xe214
   12428:	movt	r0, #2
   1242c:	str	r6, [r0, #88]	; 0x58
   12430:	mov	r0, r7
   12434:	b	11a94 <__assert_fail@plt+0x290>
   12438:	mov	r5, r4
   1243c:	mov	r4, r1
   12440:	movw	r1, #45877	; 0xb335
   12444:	mov	r0, #0
   12448:	mov	r2, #5
   1244c:	movt	r1, #1
   12450:	bl	114ec <dcgettext@plt>
   12454:	mov	r2, r0
   12458:	movw	r0, #44234	; 0xacca
   1245c:	movw	r3, #44209	; 0xacb1
   12460:	mov	r1, #0
   12464:	movt	r0, #1
   12468:	movt	r3, #1
   1246c:	str	r0, [sp]
   12470:	mov	r0, #0
   12474:	str	r3, [sp, #4]
   12478:	bl	115b8 <error@plt>
   1247c:	str	r6, [r4, #88]	; 0x58
   12480:	mov	r4, r5
   12484:	mov	r5, #1
   12488:	mov	r0, r7
   1248c:	b	11a94 <__assert_fail@plt+0x290>
   12490:	cmp	r6, #120	; 0x78
   12494:	bne	124d4 <__assert_fail@plt+0xcd0>
   12498:	add	r5, r4, #2
   1249c:	mov	r6, #16
   124a0:	b	124f0 <__assert_fail@plt+0xcec>
   124a4:	mov	r0, #13
   124a8:	b	12170 <__assert_fail@plt+0x96c>
   124ac:	mov	r0, #8
   124b0:	b	12170 <__assert_fail@plt+0x96c>
   124b4:	mov	r0, #9
   124b8:	b	12170 <__assert_fail@plt+0x96c>
   124bc:	mov	r0, #11
   124c0:	b	12170 <__assert_fail@plt+0x96c>
   124c4:	mov	r0, #12
   124c8:	b	12170 <__assert_fail@plt+0x96c>
   124cc:	mov	r0, #10
   124d0:	b	12170 <__assert_fail@plt+0x96c>
   124d4:	bl	11624 <__ctype_b_loc@plt>
   124d8:	ldr	r0, [r0]
   124dc:	add	r0, r0, r6, lsl #1
   124e0:	mov	r6, #8
   124e4:	ldrb	r0, [r0, #1]
   124e8:	tst	r0, #8
   124ec:	beq	12d2c <__assert_fail@plt+0x1528>
   124f0:	bl	11684 <__errno_location@plt>
   124f4:	mov	r1, #0
   124f8:	mov	r2, r6
   124fc:	str	r1, [r0]
   12500:	str	r1, [sp, #52]	; 0x34
   12504:	mov	r0, r5
   12508:	add	r1, sp, #52	; 0x34
   1250c:	bl	11648 <strtoul@plt>
   12510:	cmp	r0, #256	; 0x100
   12514:	bcs	12d54 <__assert_fail@plt+0x1550>
   12518:	ldr	r5, [sp, #52]	; 0x34
   1251c:	ldrb	r1, [r5]
   12520:	cmp	r1, #0
   12524:	beq	12170 <__assert_fail@plt+0x96c>
   12528:	movw	r1, #45777	; 0xb2d1
   1252c:	mov	r0, #0
   12530:	mov	r2, #5
   12534:	movt	r1, #1
   12538:	bl	114ec <dcgettext@plt>
   1253c:	mov	r2, r0
   12540:	str	r5, [sp]
   12544:	mov	r0, #1
   12548:	mov	r1, #0
   1254c:	mov	r3, r4
   12550:	bl	115b8 <error@plt>
   12554:	cmn	r0, #1
   12558:	bne	12ce4 <__assert_fail@plt+0x14e0>
   1255c:	ldr	r1, [sp, #44]	; 0x2c
   12560:	movw	r0, #15248	; 0x3b90
   12564:	movt	r0, #1
   12568:	cmp	r1, r0
   1256c:	bne	125a8 <__assert_fail@plt+0xda4>
   12570:	movw	r0, #57876	; 0xe214
   12574:	movt	r0, #2
   12578:	ldr	r0, [r0, #20]
   1257c:	cmp	r0, #0
   12580:	beq	125a8 <__assert_fail@plt+0xda4>
   12584:	movw	r1, #44410	; 0xad7a
   12588:	mov	r0, #0
   1258c:	mov	r2, #5
   12590:	movt	r1, #1
   12594:	bl	114ec <dcgettext@plt>
   12598:	mov	r2, r0
   1259c:	mov	r0, #0
   125a0:	mov	r1, #0
   125a4:	bl	115b8 <error@plt>
   125a8:	ldr	r0, [sp, #36]	; 0x24
   125ac:	ldr	r6, [sp, #32]
   125b0:	blx	r0
   125b4:	cmp	r8, #0
   125b8:	bne	12dfc <__assert_fail@plt+0x15f8>
   125bc:	movw	r0, #16712	; 0x4148
   125c0:	add	r5, sp, #52	; 0x34
   125c4:	movt	r0, #1
   125c8:	add	r4, r5, #4
   125cc:	str	r0, [sp, #52]	; 0x34
   125d0:	mov	r0, r4
   125d4:	bl	1172c <sigemptyset@plt>
   125d8:	mov	r8, #0
   125dc:	mov	r0, #10
   125e0:	mov	r1, r5
   125e4:	mov	r2, #0
   125e8:	str	r8, [sp, #184]	; 0xb8
   125ec:	bl	11558 <sigaction@plt>
   125f0:	cmp	r0, #0
   125f4:	beq	12624 <__assert_fail@plt+0xe20>
   125f8:	bl	11684 <__errno_location@plt>
   125fc:	ldr	r5, [r0]
   12600:	movw	r1, #44492	; 0xadcc
   12604:	mov	r0, #0
   12608:	mov	r2, #5
   1260c:	movt	r1, #1
   12610:	bl	114ec <dcgettext@plt>
   12614:	mov	r2, r0
   12618:	mov	r0, #0
   1261c:	mov	r1, r5
   12620:	bl	115b8 <error@plt>
   12624:	movw	r0, #16760	; 0x4178
   12628:	movt	r0, #1
   1262c:	str	r0, [sp, #52]	; 0x34
   12630:	mov	r0, r4
   12634:	bl	1172c <sigemptyset@plt>
   12638:	add	r1, sp, #52	; 0x34
   1263c:	mov	r0, #12
   12640:	mov	r2, #0
   12644:	str	r8, [sp, #184]	; 0xb8
   12648:	bl	11558 <sigaction@plt>
   1264c:	cmp	r0, #0
   12650:	beq	12680 <__assert_fail@plt+0xe7c>
   12654:	bl	11684 <__errno_location@plt>
   12658:	ldr	r4, [r0]
   1265c:	movw	r1, #44526	; 0xadee
   12660:	mov	r0, #0
   12664:	mov	r2, #5
   12668:	movt	r1, #1
   1266c:	bl	114ec <dcgettext@plt>
   12670:	mov	r2, r0
   12674:	mov	r0, #0
   12678:	mov	r1, r4
   1267c:	bl	115b8 <error@plt>
   12680:	movw	r1, #52199	; 0xcbe7
   12684:	mov	r0, r6
   12688:	movt	r1, #1
   1268c:	bl	11444 <strcmp@plt>
   12690:	ldr	r5, [sp, #40]	; 0x28
   12694:	cmp	r0, #0
   12698:	beq	12748 <__assert_fail@plt+0xf44>
   1269c:	movw	r1, #57876	; 0xe214
   126a0:	mov	r0, #1
   126a4:	movt	r1, #2
   126a8:	strb	r0, [r1, #4]
   126ac:	mov	r0, r6
   126b0:	mov	r1, #0
   126b4:	bl	155f0 <__assert_fail@plt+0x3dec>
   126b8:	cmn	r0, #1
   126bc:	ble	12e3c <__assert_fail@plt+0x1638>
   126c0:	movw	r1, #45374	; 0xb13e
   126c4:	mov	r4, r0
   126c8:	movt	r1, #1
   126cc:	bl	1142c <fdopen@plt>
   126d0:	cmp	r0, #0
   126d4:	bne	12754 <__assert_fail@plt+0xf50>
   126d8:	mov	r7, r6
   126dc:	bl	11684 <__errno_location@plt>
   126e0:	ldr	r6, [r0]
   126e4:	mov	r5, r0
   126e8:	mov	r0, r4
   126ec:	bl	117ec <close@plt>
   126f0:	str	r6, [r5]
   126f4:	b	12e48 <__assert_fail@plt+0x1644>
   126f8:	movw	r0, #43981	; 0xabcd
   126fc:	movt	r0, #1
   12700:	bl	158ac <__assert_fail@plt+0x40a8>
   12704:	mov	r0, #0
   12708:	sub	sp, fp, #28
   1270c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12710:	movw	r0, #57876	; 0xe214
   12714:	movt	r0, #2
   12718:	ldr	r0, [r0, #76]	; 0x4c
   1271c:	mov	r1, #0
   12720:	cmp	r1, r0, lsr #11
   12724:	bne	11a2c <__assert_fail@plt+0x228>
   12728:	movw	r0, #44104	; 0xac48
   1272c:	movw	r1, #44073	; 0xac29
   12730:	movw	r3, #44081	; 0xac31
   12734:	movw	r2, #511	; 0x1ff
   12738:	movt	r0, #1
   1273c:	movt	r1, #1
   12740:	movt	r3, #1
   12744:	bl	11804 <__assert_fail@plt>
   12748:	movw	r0, #57816	; 0xe1d8
   1274c:	movt	r0, #2
   12750:	ldr	r0, [r0]
   12754:	movw	r1, #57876	; 0xe214
   12758:	movt	r1, #2
   1275c:	str	r0, [r1, #28]
   12760:	ldr	r0, [r1, #88]	; 0x58
   12764:	cmp	r0, #0
   12768:	ldreq	r0, [r1, #100]	; 0x64
   1276c:	cmpeq	r0, #0
   12770:	beq	1277c <__assert_fail@plt+0xf78>
   12774:	mov	r0, #1
   12778:	str	r0, [r1, #64]	; 0x40
   1277c:	movw	r6, #57800	; 0xe1c8
   12780:	movt	r6, #2
   12784:	ldr	r0, [r6]
   12788:	cmp	r0, r9
   1278c:	bne	127a8 <__assert_fail@plt+0xfa4>
   12790:	mov	r0, #0
   12794:	mov	r9, #1
   12798:	sub	sl, fp, #48	; 0x30
   1279c:	str	r0, [r6]
   127a0:	sub	r0, fp, #44	; 0x2c
   127a4:	str	r0, [fp, #-48]	; 0xffffffd0
   127a8:	cmp	r7, #0
   127ac:	bne	12b14 <__assert_fail@plt+0x1310>
   127b0:	ldr	r0, [r1, #76]	; 0x4c
   127b4:	mov	r4, r1
   127b8:	add	r0, r0, #1
   127bc:	bl	1948c <__assert_fail@plt+0x7c88>
   127c0:	str	r0, [r4, #32]
   127c4:	ldr	r0, [r4, #76]	; 0x4c
   127c8:	add	r0, r0, #1
   127cc:	bl	1948c <__assert_fail@plt+0x7c88>
   127d0:	movw	r7, #57832	; 0xe1e8
   127d4:	mov	r1, #0
   127d8:	movt	r7, #2
   127dc:	str	r0, [r7, #12]
   127e0:	mov	r0, #17
   127e4:	bl	114d4 <signal@plt>
   127e8:	ldr	r0, [r4, #88]	; 0x58
   127ec:	cmp	r0, #0
   127f0:	beq	129b0 <__assert_fail@plt+0x11ac>
   127f4:	lsl	r0, r9, #2
   127f8:	bl	1948c <__assert_fail@plt+0x7c88>
   127fc:	str	r0, [sp, #40]	; 0x28
   12800:	ldr	r0, [r6]
   12804:	ldr	r8, [sp, #48]	; 0x30
   12808:	cmp	r0, r9
   1280c:	bge	12834 <__assert_fail@plt+0x1030>
   12810:	ldr	r1, [sp, #40]	; 0x28
   12814:	sub	r4, r9, r0
   12818:	add	r6, sl, r0, lsl #2
   1281c:	add	r5, r1, r0, lsl #2
   12820:	ldr	r0, [r6], #4
   12824:	bl	11654 <strlen@plt>
   12828:	str	r0, [r5], #4
   1282c:	subs	r4, r4, #1
   12830:	bne	12820 <__assert_fail@plt+0x101c>
   12834:	movw	r0, #57876	; 0xe214
   12838:	str	sl, [sp, #32]
   1283c:	str	r9, [sp, #36]	; 0x24
   12840:	movt	r0, #2
   12844:	mov	r4, r0
   12848:	ldr	r0, [r0, #88]	; 0x58
   1284c:	bl	11654 <strlen@plt>
   12850:	str	r0, [r4, #84]	; 0x54
   12854:	ldr	r0, [sp, #44]	; 0x2c
   12858:	blx	r0
   1285c:	cmn	r0, #1
   12860:	beq	12af4 <__assert_fail@plt+0x12f0>
   12864:	mov	r4, r0
   12868:	ldr	r0, [sp, #32]
   1286c:	mov	sl, #0
   12870:	add	r0, r0, #4
   12874:	str	r0, [sp, #28]
   12878:	ldr	r0, [sp, #40]	; 0x28
   1287c:	add	r0, r0, #4
   12880:	str	r0, [sp, #24]
   12884:	ldr	r0, [sp, #36]	; 0x24
   12888:	sub	r0, r0, #2
   1288c:	str	r0, [sp, #20]
   12890:	mov	r0, r8
   12894:	mov	r1, r7
   12898:	bl	14fb0 <__assert_fail@plt+0x37ac>
   1289c:	movw	r0, #57800	; 0xe1c8
   128a0:	ldr	r1, [sp, #32]
   128a4:	str	sl, [r7, #16]
   128a8:	mov	r9, r7
   128ac:	movt	r0, #2
   128b0:	mov	r5, r0
   128b4:	ldr	r0, [r0]
   128b8:	ldr	r2, [r1, r0, lsl #2]
   128bc:	ldr	r1, [sp, #40]	; 0x28
   128c0:	str	sl, [sp]
   128c4:	str	sl, [sp, #4]
   128c8:	ldr	r0, [r1, r0, lsl #2]
   128cc:	movw	r1, #57876	; 0xe214
   128d0:	movt	r1, #2
   128d4:	mov	r6, r1
   128d8:	ldrb	r1, [r1, #5]
   128dc:	add	r3, r0, #1
   128e0:	mov	r0, r8
   128e4:	eor	r1, r1, #1
   128e8:	str	r1, [sp, #8]
   128ec:	mov	r1, r7
   128f0:	bl	1493c <__assert_fail@plt+0x3138>
   128f4:	mov	r0, #1
   128f8:	ldr	r2, [sp, #36]	; 0x24
   128fc:	strb	r0, [r6, #5]
   12900:	ldr	r0, [r5]
   12904:	add	r1, r0, #1
   12908:	cmp	r1, r2
   1290c:	bge	12984 <__assert_fail@plt+0x1180>
   12910:	ldr	r1, [sp, #28]
   12914:	sub	r4, r4, #1
   12918:	mov	r7, r6
   1291c:	add	r5, r1, r0, lsl #2
   12920:	ldr	r1, [sp, #24]
   12924:	add	r8, r1, r0, lsl #2
   12928:	ldr	r1, [sp, #20]
   1292c:	sub	r6, r1, r0
   12930:	mov	r0, #1
   12934:	b	12948 <__assert_fail@plt+0x1144>
   12938:	ldrb	r0, [r7, #5]
   1293c:	add	r5, r5, #4
   12940:	add	r8, r8, #4
   12944:	sub	r6, r6, #1
   12948:	mov	r1, #1
   1294c:	ldr	r2, [r5]
   12950:	ldr	r3, [r8]
   12954:	str	sl, [sp]
   12958:	str	sl, [sp, #4]
   1295c:	str	r4, [sp, #12]
   12960:	bic	r0, r1, r0
   12964:	ldr	r1, [r7, #32]
   12968:	str	r0, [sp, #16]
   1296c:	ldr	r0, [sp, #48]	; 0x30
   12970:	str	r1, [sp, #8]
   12974:	mov	r1, r9
   12978:	bl	14708 <__assert_fail@plt+0x2f04>
   1297c:	cmp	r6, #0
   12980:	bne	12938 <__assert_fail@plt+0x1134>
   12984:	ldr	r8, [sp, #48]	; 0x30
   12988:	mov	r1, r9
   1298c:	mov	r7, r9
   12990:	mov	r0, r8
   12994:	bl	14bb8 <__assert_fail@plt+0x33b4>
   12998:	ldr	r0, [sp, #44]	; 0x2c
   1299c:	blx	r0
   129a0:	mov	r4, r0
   129a4:	cmn	r0, #1
   129a8:	bne	12890 <__assert_fail@plt+0x108c>
   129ac:	b	12af4 <__assert_fail@plt+0x12f0>
   129b0:	ldr	r0, [r6]
   129b4:	ldr	r7, [sp, #48]	; 0x30
   129b8:	cmp	r0, r9
   129bc:	bge	12a1c <__assert_fail@plt+0x1218>
   129c0:	movw	r4, #57832	; 0xe1e8
   129c4:	mov	r8, #0
   129c8:	movt	r4, #2
   129cc:	ldr	r5, [sl, r0, lsl #2]
   129d0:	mov	r0, r5
   129d4:	bl	11654 <strlen@plt>
   129d8:	movw	r1, #57876	; 0xe214
   129dc:	add	r3, r0, #1
   129e0:	mov	r0, r7
   129e4:	mov	r2, r5
   129e8:	str	r8, [sp]
   129ec:	str	r8, [sp, #4]
   129f0:	movt	r1, #2
   129f4:	ldrb	r1, [r1, #5]
   129f8:	eor	r1, r1, #1
   129fc:	str	r1, [sp, #8]
   12a00:	mov	r1, r4
   12a04:	bl	1493c <__assert_fail@plt+0x3138>
   12a08:	ldr	r0, [r6]
   12a0c:	add	r0, r0, #1
   12a10:	cmp	r0, r9
   12a14:	str	r0, [r6]
   12a18:	blt	129cc <__assert_fail@plt+0x11c8>
   12a1c:	movw	r1, #57876	; 0xe214
   12a20:	movw	r6, #57832	; 0xe1e8
   12a24:	mov	r0, #1
   12a28:	movt	r1, #2
   12a2c:	movt	r6, #2
   12a30:	strb	r0, [r1, #5]
   12a34:	ldr	r0, [r6]
   12a38:	mov	r2, r1
   12a3c:	ldr	r1, [r6, #16]
   12a40:	str	r0, [r2, #92]	; 0x5c
   12a44:	ldr	r0, [sp, #44]	; 0x2c
   12a48:	str	r1, [r6, #20]
   12a4c:	blx	r0
   12a50:	ldr	r8, [sp, #40]	; 0x28
   12a54:	cmn	r0, #1
   12a58:	beq	12ab0 <__assert_fail@plt+0x12ac>
   12a5c:	movw	r4, #57832	; 0xe1e8
   12a60:	mov	r5, #0
   12a64:	movt	r4, #2
   12a68:	movw	r0, #57876	; 0xe214
   12a6c:	movt	r0, #2
   12a70:	mov	r1, r0
   12a74:	ldr	r0, [r0, #36]	; 0x24
   12a78:	ldr	r1, [r1, #100]	; 0x64
   12a7c:	sub	r1, r1, #1
   12a80:	cmp	r1, r0
   12a84:	bcs	12aa0 <__assert_fail@plt+0x129c>
   12a88:	mov	r0, r7
   12a8c:	mov	r1, r4
   12a90:	bl	14bb8 <__assert_fail@plt+0x33b4>
   12a94:	movw	r0, #57876	; 0xe214
   12a98:	movt	r0, #2
   12a9c:	str	r5, [r0, #36]	; 0x24
   12aa0:	ldr	r0, [sp, #44]	; 0x2c
   12aa4:	blx	r0
   12aa8:	cmn	r0, #1
   12aac:	bne	12a68 <__assert_fail@plt+0x1264>
   12ab0:	movw	r0, #57876	; 0xe214
   12ab4:	ldr	r1, [r6]
   12ab8:	movt	r0, #2
   12abc:	ldr	r0, [r0, #92]	; 0x5c
   12ac0:	cmp	r1, r0
   12ac4:	bne	12ae4 <__assert_fail@plt+0x12e0>
   12ac8:	cmp	r8, #0
   12acc:	beq	12af4 <__assert_fail@plt+0x12f0>
   12ad0:	movw	r0, #57876	; 0xe214
   12ad4:	movt	r0, #2
   12ad8:	ldrb	r0, [r0, #6]
   12adc:	cmp	r0, #0
   12ae0:	bne	12af4 <__assert_fail@plt+0x12f0>
   12ae4:	movw	r1, #57832	; 0xe1e8
   12ae8:	mov	r0, r7
   12aec:	movt	r1, #2
   12af0:	bl	14bb8 <__assert_fail@plt+0x33b4>
   12af4:	movw	r0, #57876	; 0xe214
   12af8:	movt	r0, #2
   12afc:	mov	r1, r0
   12b00:	ldr	r0, [r0, #40]	; 0x28
   12b04:	str	r0, [r1, #16]
   12b08:	ldr	r0, [r1, #40]	; 0x28
   12b0c:	sub	sp, fp, #28
   12b10:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12b14:	movw	r8, #57808	; 0xe1d0
   12b18:	movw	r1, #44586	; 0xae2a
   12b1c:	mov	r0, #0
   12b20:	mov	r2, #5
   12b24:	movt	r8, #2
   12b28:	movt	r1, #1
   12b2c:	ldr	r4, [r8]
   12b30:	bl	114ec <dcgettext@plt>
   12b34:	mov	r6, r0
   12b38:	bl	14ff0 <__assert_fail@plt+0x37ec>
   12b3c:	mov	r2, r0
   12b40:	mov	r0, r4
   12b44:	mov	r1, r6
   12b48:	mov	r3, #0
   12b4c:	bl	11678 <fprintf@plt>
   12b50:	ldr	r4, [r8]
   12b54:	movw	r1, #44633	; 0xae59
   12b58:	mov	r0, #0
   12b5c:	mov	r2, #5
   12b60:	movt	r1, #1
   12b64:	bl	114ec <dcgettext@plt>
   12b68:	mov	r1, r0
   12b6c:	movw	r0, #57876	; 0xe214
   12b70:	mov	r3, #0
   12b74:	movt	r0, #2
   12b78:	ldr	r2, [r0, #68]	; 0x44
   12b7c:	mov	r0, r4
   12b80:	bl	11678 <fprintf@plt>
   12b84:	ldr	r4, [r8]
   12b88:	movw	r1, #44691	; 0xae93
   12b8c:	mov	r0, #0
   12b90:	mov	r2, #5
   12b94:	movt	r1, #1
   12b98:	bl	114ec <dcgettext@plt>
   12b9c:	mov	r1, r0
   12ba0:	movw	r0, #57876	; 0xe214
   12ba4:	mov	r3, #0
   12ba8:	movt	r0, #2
   12bac:	ldr	r2, [r0, #72]	; 0x48
   12bb0:	mov	r0, r4
   12bb4:	bl	11678 <fprintf@plt>
   12bb8:	ldr	r4, [r8]
   12bbc:	movw	r1, #44768	; 0xaee0
   12bc0:	mov	r0, #0
   12bc4:	mov	r2, #5
   12bc8:	movt	r1, #1
   12bcc:	bl	114ec <dcgettext@plt>
   12bd0:	mov	r7, r0
   12bd4:	movw	r0, #57876	; 0xe214
   12bd8:	movt	r0, #2
   12bdc:	ldr	r6, [r0, #68]	; 0x44
   12be0:	bl	14ff0 <__assert_fail@plt+0x37ec>
   12be4:	sub	r2, r6, r0
   12be8:	movw	r6, #57800	; 0xe1c8
   12bec:	mov	r0, r4
   12bf0:	mov	r1, r7
   12bf4:	mov	r3, #0
   12bf8:	movt	r6, #2
   12bfc:	bl	11678 <fprintf@plt>
   12c00:	ldr	r4, [r8]
   12c04:	movw	r1, #44823	; 0xaf17
   12c08:	mov	r0, #0
   12c0c:	mov	r2, #5
   12c10:	movt	r1, #1
   12c14:	bl	114ec <dcgettext@plt>
   12c18:	mov	r1, r0
   12c1c:	movw	r0, #57876	; 0xe214
   12c20:	mov	r3, #0
   12c24:	movt	r0, #2
   12c28:	ldr	r2, [r0, #76]	; 0x4c
   12c2c:	mov	r0, r4
   12c30:	bl	11678 <fprintf@plt>
   12c34:	ldr	r4, [r8]
   12c38:	movw	r1, #44875	; 0xaf4b
   12c3c:	mov	r0, #0
   12c40:	mov	r2, #5
   12c44:	movt	r1, #1
   12c48:	bl	114ec <dcgettext@plt>
   12c4c:	mov	r1, r0
   12c50:	mov	r0, r4
   12c54:	mvn	r2, #-2147483648	; 0x80000000
   12c58:	mov	r3, #0
   12c5c:	bl	11678 <fprintf@plt>
   12c60:	mov	r0, #0
   12c64:	bl	117a4 <isatty@plt>
   12c68:	movw	r1, #57876	; 0xe214
   12c6c:	cmp	r0, #0
   12c70:	movt	r1, #2
   12c74:	beq	127b0 <__assert_fail@plt+0xfac>
   12c78:	ldr	r4, [r8]
   12c7c:	movw	r1, #44935	; 0xaf87
   12c80:	mov	r0, #0
   12c84:	mov	r2, #5
   12c88:	movt	r1, #1
   12c8c:	bl	114ec <dcgettext@plt>
   12c90:	mov	r1, r0
   12c94:	mov	r0, r4
   12c98:	bl	11678 <fprintf@plt>
   12c9c:	movw	r1, #57876	; 0xe214
   12ca0:	cmp	r5, #0
   12ca4:	movt	r1, #2
   12ca8:	beq	127b0 <__assert_fail@plt+0xfac>
   12cac:	ldr	r4, [r8]
   12cb0:	movw	r1, #45108	; 0xb034
   12cb4:	mov	r0, #0
   12cb8:	mov	r2, #5
   12cbc:	movt	r1, #1
   12cc0:	bl	114ec <dcgettext@plt>
   12cc4:	mov	r1, r0
   12cc8:	ldr	r0, [r6]
   12ccc:	ldr	r2, [sl, r0, lsl #2]
   12cd0:	mov	r0, r4
   12cd4:	bl	11678 <fprintf@plt>
   12cd8:	movw	r1, #57876	; 0xe214
   12cdc:	movt	r1, #2
   12ce0:	b	127b0 <__assert_fail@plt+0xfac>
   12ce4:	mov	r0, #1
   12ce8:	bl	13cc4 <__assert_fail@plt+0x24c0>
   12cec:	mov	r0, #0
   12cf0:	bl	13cc4 <__assert_fail@plt+0x24c0>
   12cf4:	bl	11684 <__errno_location@plt>
   12cf8:	ldr	r4, [r0]
   12cfc:	movw	r1, #44011	; 0xabeb
   12d00:	mov	r0, #0
   12d04:	mov	r2, #5
   12d08:	movt	r1, #1
   12d0c:	bl	114ec <dcgettext@plt>
   12d10:	mov	r2, r0
   12d14:	mov	r0, #1
   12d18:	mov	r1, r4
   12d1c:	bl	115b8 <error@plt>
   12d20:	movw	r1, #45389	; 0xb14d
   12d24:	movt	r1, #1
   12d28:	b	12d34 <__assert_fail@plt+0x1530>
   12d2c:	movw	r1, #45518	; 0xb1ce
   12d30:	movt	r1, #1
   12d34:	mov	r0, #0
   12d38:	mov	r2, #5
   12d3c:	bl	114ec <dcgettext@plt>
   12d40:	mov	r2, r0
   12d44:	mov	r0, #1
   12d48:	mov	r1, #0
   12d4c:	mov	r3, r4
   12d50:	bl	115b8 <error@plt>
   12d54:	cmp	r6, #16
   12d58:	bne	12dcc <__assert_fail@plt+0x15c8>
   12d5c:	movw	r1, #45579	; 0xb20b
   12d60:	movt	r1, #1
   12d64:	b	12dd4 <__assert_fail@plt+0x15d0>
   12d68:	movw	r1, #44313	; 0xad19
   12d6c:	mov	r0, #0
   12d70:	mov	r2, #5
   12d74:	movt	r1, #1
   12d78:	bl	114ec <dcgettext@plt>
   12d7c:	mov	r2, r0
   12d80:	ldr	r0, [fp, #-36]	; 0xffffffdc
   12d84:	mov	r1, #0
   12d88:	ldr	r3, [r4, r0, lsl #4]
   12d8c:	mov	r0, #1
   12d90:	bl	115b8 <error@plt>
   12d94:	bl	11684 <__errno_location@plt>
   12d98:	ldr	r4, [r0]
   12d9c:	movw	r1, #44370	; 0xad52
   12da0:	mov	r0, #0
   12da4:	mov	r2, #5
   12da8:	movt	r1, #1
   12dac:	bl	114ec <dcgettext@plt>
   12db0:	mov	r2, r0
   12db4:	movw	r0, #57876	; 0xe214
   12db8:	mov	r1, r4
   12dbc:	movt	r0, #2
   12dc0:	ldr	r3, [r0, #24]
   12dc4:	mov	r0, #1
   12dc8:	bl	115b8 <error@plt>
   12dcc:	movw	r1, #45678	; 0xb26e
   12dd0:	movt	r1, #1
   12dd4:	mov	r0, #0
   12dd8:	mov	r2, #5
   12ddc:	bl	114ec <dcgettext@plt>
   12de0:	mov	r2, r0
   12de4:	mov	r0, #255	; 0xff
   12de8:	str	r0, [sp]
   12dec:	mov	r0, #1
   12df0:	mov	r1, #0
   12df4:	mov	r3, r4
   12df8:	bl	115b8 <error@plt>
   12dfc:	movw	r0, #44469	; 0xadb5
   12e00:	movw	r1, #44073	; 0xac29
   12e04:	movw	r3, #44081	; 0xac31
   12e08:	movw	r2, #723	; 0x2d3
   12e0c:	movt	r0, #1
   12e10:	movt	r1, #1
   12e14:	movt	r3, #1
   12e18:	bl	11804 <__assert_fail@plt>
   12e1c:	movw	r0, #44046	; 0xac0e
   12e20:	movw	r1, #44073	; 0xac29
   12e24:	movw	r3, #44081	; 0xac31
   12e28:	movw	r2, #483	; 0x1e3
   12e2c:	movt	r0, #1
   12e30:	movt	r1, #1
   12e34:	movt	r3, #1
   12e38:	bl	11804 <__assert_fail@plt>
   12e3c:	mov	r7, r6
   12e40:	bl	11684 <__errno_location@plt>
   12e44:	mov	r5, r0
   12e48:	movw	r1, #57876	; 0xe214
   12e4c:	mov	r0, #0
   12e50:	mov	r2, #5
   12e54:	movt	r1, #2
   12e58:	str	r0, [r1, #28]
   12e5c:	movw	r1, #44560	; 0xae10
   12e60:	mov	r0, #0
   12e64:	ldr	r4, [r5]
   12e68:	movt	r1, #1
   12e6c:	bl	114ec <dcgettext@plt>
   12e70:	mov	r5, r0
   12e74:	mov	r0, #0
   12e78:	mov	r1, #8
   12e7c:	mov	r2, r7
   12e80:	bl	18698 <__assert_fail@plt+0x6e94>
   12e84:	mov	r3, r0
   12e88:	mov	r0, #1
   12e8c:	mov	r1, r4
   12e90:	mov	r2, r5
   12e94:	bl	115b8 <error@plt>
   12e98:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12e9c:	add	fp, sp, #28
   12ea0:	sub	sp, sp, #28
   12ea4:	movw	r6, #57876	; 0xe214
   12ea8:	mvn	r8, #0
   12eac:	movt	r6, #2
   12eb0:	ldrb	r0, [r6, #7]
   12eb4:	cmp	r0, #0
   12eb8:	bne	132a4 <__assert_fail@plt+0x1aa0>
   12ebc:	movw	r1, #57832	; 0xe1e8
   12ec0:	ldr	r0, [r6, #28]
   12ec4:	ldr	r5, [r6, #76]	; 0x4c
   12ec8:	ldr	r4, [r6, #32]
   12ecc:	movt	r1, #2
   12ed0:	ldr	r7, [r1, #20]
   12ed4:	bl	117e0 <getc@plt>
   12ed8:	cmn	r0, #1
   12edc:	beq	13220 <__assert_fail@plt+0x1a1c>
   12ee0:	add	r1, r4, r5
   12ee4:	mvn	r5, #0
   12ee8:	mov	sl, #0
   12eec:	mov	r9, #1
   12ef0:	sub	r1, r1, r7
   12ef4:	sub	r1, r1, #1
   12ef8:	str	r1, [sp, #16]
   12efc:	mov	r1, #1
   12f00:	str	r1, [sp, #24]
   12f04:	mov	r1, #0
   12f08:	str	r1, [sp, #20]
   12f0c:	mov	r7, r5
   12f10:	tst	sl, #1
   12f14:	beq	12f6c <__assert_fail@plt+0x1768>
   12f18:	mov	r5, r0
   12f1c:	cmp	r9, #1
   12f20:	bne	13018 <__assert_fail@plt+0x1814>
   12f24:	cmp	r5, #127	; 0x7f
   12f28:	bhi	1306c <__assert_fail@plt+0x1868>
   12f2c:	bl	11624 <__ctype_b_loc@plt>
   12f30:	sub	r1, r5, #10
   12f34:	cmp	r1, #4
   12f38:	bcc	12f50 <__assert_fail@plt+0x174c>
   12f3c:	ldr	r0, [r0]
   12f40:	add	r0, r0, r5, lsl #1
   12f44:	ldrh	r0, [r0]
   12f48:	ands	r0, r0, #1
   12f4c:	beq	1303c <__assert_fail@plt+0x1838>
   12f50:	ldr	r0, [r6, #28]
   12f54:	bl	117e0 <getc@plt>
   12f58:	mov	r9, #1
   12f5c:	cmn	r0, #1
   12f60:	mov	r7, r5
   12f64:	bne	12f18 <__assert_fail@plt+0x1714>
   12f68:	b	13218 <__assert_fail@plt+0x1a14>
   12f6c:	mov	r5, r7
   12f70:	mov	r7, r5
   12f74:	mov	r5, r0
   12f78:	cmp	r9, #3
   12f7c:	bhi	1310c <__assert_fail@plt+0x1908>
   12f80:	add	r0, pc, #0
   12f84:	ldr	pc, [r0, r9, lsl #2]
   12f88:	andeq	r2, r1, r4, asr #31
   12f8c:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   12f90:	muleq	r1, r4, r0
   12f94:	strheq	r3, [r1], -r4
   12f98:	cmp	r5, #127	; 0x7f
   12f9c:	bhi	1306c <__assert_fail@plt+0x1868>
   12fa0:	bl	11624 <__ctype_b_loc@plt>
   12fa4:	sub	r1, r5, #10
   12fa8:	cmp	r1, #4
   12fac:	bcc	13000 <__assert_fail@plt+0x17fc>
   12fb0:	ldr	r0, [r0]
   12fb4:	add	r0, r0, r5, lsl #1
   12fb8:	ldrh	r0, [r0]
   12fbc:	ands	r0, r0, #1
   12fc0:	bne	13000 <__assert_fail@plt+0x17fc>
   12fc4:	cmp	r5, #10
   12fc8:	bne	13044 <__assert_fail@plt+0x1840>
   12fcc:	cmp	r7, #127	; 0x7f
   12fd0:	bhi	12fe8 <__assert_fail@plt+0x17e4>
   12fd4:	bl	11624 <__ctype_b_loc@plt>
   12fd8:	ldr	r0, [r0]
   12fdc:	ldrb	r0, [r0, r7, lsl #1]
   12fe0:	tst	r0, #1
   12fe4:	bne	12ff4 <__assert_fail@plt+0x17f0>
   12fe8:	ldr	r0, [r6, #36]	; 0x24
   12fec:	add	r0, r0, #1
   12ff0:	str	r0, [r6, #36]	; 0x24
   12ff4:	ldr	r7, [r6, #32]
   12ff8:	cmp	r4, r7
   12ffc:	bne	13318 <__assert_fail@plt+0x1b14>
   13000:	ldr	r0, [r6, #28]
   13004:	bl	117e0 <getc@plt>
   13008:	mov	r9, #1
   1300c:	cmn	r0, #1
   13010:	bne	12f70 <__assert_fail@plt+0x176c>
   13014:	b	13218 <__assert_fail@plt+0x1a14>
   13018:	cmp	r9, #0
   1301c:	beq	1303c <__assert_fail@plt+0x1838>
   13020:	cmp	r9, #2
   13024:	beq	13094 <__assert_fail@plt+0x1890>
   13028:	cmp	r9, #3
   1302c:	bne	13114 <__assert_fail@plt+0x1910>
   13030:	mov	sl, #1
   13034:	mov	r9, #0
   13038:	b	13118 <__assert_fail@plt+0x1914>
   1303c:	cmp	r5, #10
   13040:	beq	132ec <__assert_fail@plt+0x1ae8>
   13044:	cmp	r5, #127	; 0x7f
   13048:	bhi	1306c <__assert_fail@plt+0x1868>
   1304c:	ldr	r0, [r6, #88]	; 0x58
   13050:	cmp	r0, #0
   13054:	bne	1306c <__assert_fail@plt+0x1868>
   13058:	bl	11624 <__ctype_b_loc@plt>
   1305c:	ldr	r0, [r0]
   13060:	ldrb	r0, [r0, r5, lsl #1]
   13064:	tst	r0, #1
   13068:	bne	1317c <__assert_fail@plt+0x1978>
   1306c:	mov	r9, #3
   13070:	cmp	r5, #92	; 0x5c
   13074:	bne	13150 <__assert_fail@plt+0x194c>
   13078:	mov	r7, r5
   1307c:	ldr	r0, [r6, #28]
   13080:	bl	117e0 <getc@plt>
   13084:	mov	sl, #1
   13088:	cmn	r0, #1
   1308c:	bne	12f10 <__assert_fail@plt+0x170c>
   13090:	b	13218 <__assert_fail@plt+0x1a14>
   13094:	cmp	r5, #10
   13098:	beq	13394 <__assert_fail@plt+0x1b90>
   1309c:	ldr	r7, [sp, #20]
   130a0:	mov	r9, #0
   130a4:	cmp	r5, r7
   130a8:	beq	1307c <__assert_fail@plt+0x1878>
   130ac:	mov	r9, #2
   130b0:	b	13118 <__assert_fail@plt+0x1914>
   130b4:	mov	r9, #0
   130b8:	mov	r7, r5
   130bc:	mov	sl, #0
   130c0:	cmp	r7, #0
   130c4:	ldrbeq	r0, [r6, #8]
   130c8:	cmpeq	r0, #0
   130cc:	bne	1312c <__assert_fail@plt+0x1928>
   130d0:	movw	r1, #46057	; 0xb3e9
   130d4:	mov	r0, #0
   130d8:	mov	r2, #5
   130dc:	movt	r1, #1
   130e0:	bl	114ec <dcgettext@plt>
   130e4:	mov	r2, r0
   130e8:	mov	r0, #0
   130ec:	mov	r1, #0
   130f0:	bl	115b8 <error@plt>
   130f4:	mov	r0, #1
   130f8:	strb	r0, [r6, #8]
   130fc:	ldr	r0, [sp, #16]
   13100:	cmp	r4, r0
   13104:	bcc	13138 <__assert_fail@plt+0x1934>
   13108:	b	133dc <__assert_fail@plt+0x1bd8>
   1310c:	mov	sl, #0
   13110:	b	13118 <__assert_fail@plt+0x1914>
   13114:	mov	sl, #1
   13118:	mov	r7, r5
   1311c:	cmp	r7, #0
   13120:	ldrbeq	r0, [r6, #8]
   13124:	cmpeq	r0, #0
   13128:	beq	130d0 <__assert_fail@plt+0x18cc>
   1312c:	ldr	r0, [sp, #16]
   13130:	cmp	r4, r0
   13134:	bcs	133dc <__assert_fail@plt+0x1bd8>
   13138:	strb	r7, [r4], #1
   1313c:	ldr	r0, [r6, #28]
   13140:	bl	117e0 <getc@plt>
   13144:	cmn	r0, #1
   13148:	bne	12f10 <__assert_fail@plt+0x170c>
   1314c:	b	13218 <__assert_fail@plt+0x1a14>
   13150:	cmp	r5, #34	; 0x22
   13154:	cmpne	r5, #39	; 0x27
   13158:	bne	13030 <__assert_fail@plt+0x182c>
   1315c:	ldr	r0, [r6, #28]
   13160:	bl	117e0 <getc@plt>
   13164:	mov	sl, #1
   13168:	mov	r9, #2
   1316c:	cmn	r0, #1
   13170:	str	r5, [sp, #20]
   13174:	bne	12f0c <__assert_fail@plt+0x1708>
   13178:	b	13230 <__assert_fail@plt+0x1a2c>
   1317c:	mov	r0, #0
   13180:	strb	r0, [r4], #1
   13184:	ldr	r0, [r6, #20]
   13188:	ldr	r7, [r6, #32]
   1318c:	sub	r4, r4, r7
   13190:	cmp	r0, #0
   13194:	beq	131b8 <__assert_fail@plt+0x19b4>
   13198:	ldrb	r1, [r7]
   1319c:	ldrb	r2, [r0]
   131a0:	cmp	r2, r1
   131a4:	bne	131b8 <__assert_fail@plt+0x19b4>
   131a8:	mov	r1, r7
   131ac:	bl	11444 <strcmp@plt>
   131b0:	cmp	r0, #0
   131b4:	beq	13370 <__assert_fail@plt+0x1b6c>
   131b8:	ldrb	r0, [r6, #5]
   131bc:	mov	r1, #0
   131c0:	mov	r2, #0
   131c4:	mov	r3, r4
   131c8:	str	r1, [sp, #24]
   131cc:	movw	r1, #57832	; 0xe1e8
   131d0:	str	r2, [sp]
   131d4:	str	r2, [sp, #4]
   131d8:	mov	r2, r7
   131dc:	movt	r1, #2
   131e0:	eor	r0, r0, #1
   131e4:	str	r0, [sp, #8]
   131e8:	add	r0, r6, #64	; 0x40
   131ec:	bl	1493c <__assert_fail@plt+0x3138>
   131f0:	ldr	r0, [r6, #28]
   131f4:	ldr	r4, [r6, #32]
   131f8:	bl	117e0 <getc@plt>
   131fc:	mov	sl, #1
   13200:	cmn	r0, #1
   13204:	mov	r9, #1
   13208:	bne	12f0c <__assert_fail@plt+0x1708>
   1320c:	ldr	r5, [sp, #20]
   13210:	mov	r9, #1
   13214:	b	13230 <__assert_fail@plt+0x1a2c>
   13218:	ldr	r5, [sp, #20]
   1321c:	b	13230 <__assert_fail@plt+0x1a2c>
   13220:	mov	r0, #1
   13224:	mov	r5, #0
   13228:	mov	r9, #1
   1322c:	str	r0, [sp, #24]
   13230:	mov	r0, #1
   13234:	strb	r0, [r6, #7]
   13238:	ldr	r7, [r6, #32]
   1323c:	cmp	r4, r7
   13240:	beq	132a4 <__assert_fail@plt+0x1aa0>
   13244:	mov	r0, #0
   13248:	cmp	r9, #2
   1324c:	strb	r0, [r4], #1
   13250:	beq	13404 <__assert_fail@plt+0x1c00>
   13254:	ldr	r0, [sp, #24]
   13258:	mvn	r1, r0
   1325c:	ldr	r0, [r6, #20]
   13260:	clz	r2, r0
   13264:	lsr	r2, r2, #5
   13268:	orr	r1, r1, r2
   1326c:	tst	r1, #1
   13270:	bne	13294 <__assert_fail@plt+0x1a90>
   13274:	ldrb	r1, [r7]
   13278:	ldrb	r2, [r0]
   1327c:	cmp	r2, r1
   13280:	bne	13294 <__assert_fail@plt+0x1a90>
   13284:	mov	r1, r7
   13288:	bl	11444 <strcmp@plt>
   1328c:	cmp	r0, #0
   13290:	beq	132a4 <__assert_fail@plt+0x1aa0>
   13294:	sub	r8, r4, r7
   13298:	ldr	r0, [r6, #88]	; 0x58
   1329c:	cmp	r0, #0
   132a0:	beq	132b0 <__assert_fail@plt+0x1aac>
   132a4:	mov	r0, r8
   132a8:	sub	sp, fp, #28
   132ac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   132b0:	ldrb	r0, [r6, #5]
   132b4:	mov	r1, #0
   132b8:	mov	r2, r7
   132bc:	mov	r3, r8
   132c0:	str	r1, [sp]
   132c4:	str	r1, [sp, #4]
   132c8:	movw	r1, #57832	; 0xe1e8
   132cc:	movt	r1, #2
   132d0:	eor	r0, r0, #1
   132d4:	str	r0, [sp, #8]
   132d8:	add	r0, r6, #64	; 0x40
   132dc:	bl	1493c <__assert_fail@plt+0x3138>
   132e0:	mov	r0, r8
   132e4:	sub	sp, fp, #28
   132e8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   132ec:	cmp	r7, #127	; 0x7f
   132f0:	bhi	13308 <__assert_fail@plt+0x1b04>
   132f4:	bl	11624 <__ctype_b_loc@plt>
   132f8:	ldr	r0, [r0]
   132fc:	ldrb	r0, [r0, r7, lsl #1]
   13300:	tst	r0, #1
   13304:	bne	13314 <__assert_fail@plt+0x1b10>
   13308:	ldr	r0, [r6, #36]	; 0x24
   1330c:	add	r0, r0, #1
   13310:	str	r0, [r6, #36]	; 0x24
   13314:	ldr	r7, [r6, #32]
   13318:	mov	r0, #0
   1331c:	strb	r0, [r4], #1
   13320:	ldr	r0, [r6, #20]
   13324:	sub	r8, r4, r7
   13328:	cmp	r0, #0
   1332c:	beq	13298 <__assert_fail@plt+0x1a94>
   13330:	ldrb	r1, [r7]
   13334:	ldrb	r2, [r0]
   13338:	cmp	r2, r1
   1333c:	bne	13298 <__assert_fail@plt+0x1a94>
   13340:	mov	r1, r7
   13344:	bl	11444 <strcmp@plt>
   13348:	cmp	r0, #0
   1334c:	bne	13298 <__assert_fail@plt+0x1a94>
   13350:	mov	r0, #1
   13354:	strb	r0, [r6, #7]
   13358:	ldr	r0, [sp, #24]
   1335c:	tst	r0, #1
   13360:	mvnne	r8, #0
   13364:	mov	r0, r8
   13368:	sub	sp, fp, #28
   1336c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13370:	mov	r0, #1
   13374:	strb	r0, [r6, #7]
   13378:	ldr	r0, [sp, #24]
   1337c:	tst	r0, #1
   13380:	mvnne	r4, #0
   13384:	mov	r8, r4
   13388:	mov	r0, r8
   1338c:	sub	sp, fp, #28
   13390:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13394:	ldr	r0, [r6, #88]	; 0x58
   13398:	cmp	r0, #0
   1339c:	ldrbeq	r0, [r6, #5]
   133a0:	cmpeq	r0, #1
   133a4:	beq	13468 <__assert_fail@plt+0x1c64>
   133a8:	movw	r1, #45955	; 0xb383
   133ac:	mov	r0, #0
   133b0:	mov	r2, #5
   133b4:	movt	r1, #1
   133b8:	bl	114ec <dcgettext@plt>
   133bc:	ldr	r2, [sp, #20]
   133c0:	movw	r1, #46050	; 0xb3e2
   133c4:	mov	r4, r0
   133c8:	movw	r0, #46043	; 0xb3db
   133cc:	movt	r0, #1
   133d0:	movt	r1, #1
   133d4:	cmp	r2, #34	; 0x22
   133d8:	b	13444 <__assert_fail@plt+0x1c40>
   133dc:	bl	14198 <__assert_fail@plt+0x2994>
   133e0:	movw	r1, #46196	; 0xb474
   133e4:	mov	r0, #0
   133e8:	mov	r2, #5
   133ec:	movt	r1, #1
   133f0:	bl	114ec <dcgettext@plt>
   133f4:	mov	r2, r0
   133f8:	mov	r0, #1
   133fc:	mov	r1, #0
   13400:	bl	115b8 <error@plt>
   13404:	ldr	r0, [r6, #88]	; 0x58
   13408:	cmp	r0, #0
   1340c:	ldrbeq	r0, [r6, #5]
   13410:	cmpeq	r0, #1
   13414:	beq	134a0 <__assert_fail@plt+0x1c9c>
   13418:	movw	r1, #45955	; 0xb383
   1341c:	mov	r0, #0
   13420:	mov	r2, #5
   13424:	movt	r1, #1
   13428:	bl	114ec <dcgettext@plt>
   1342c:	movw	r1, #46050	; 0xb3e2
   13430:	mov	r4, r0
   13434:	movw	r0, #46043	; 0xb3db
   13438:	cmp	r5, #34	; 0x22
   1343c:	movt	r0, #1
   13440:	movt	r1, #1
   13444:	moveq	r1, r0
   13448:	mov	r0, #0
   1344c:	mov	r2, #5
   13450:	bl	114ec <dcgettext@plt>
   13454:	mov	r3, r0
   13458:	mov	r0, #1
   1345c:	mov	r1, #0
   13460:	mov	r2, r4
   13464:	bl	115b8 <error@plt>
   13468:	movw	r1, #57832	; 0xe1e8
   1346c:	ldr	r0, [r6, #92]	; 0x5c
   13470:	movt	r1, #2
   13474:	ldr	r1, [r1]
   13478:	cmp	r1, r0
   1347c:	beq	133a8 <__assert_fail@plt+0x1ba4>
   13480:	ldr	r0, [r6, #64]	; 0x40
   13484:	cmp	r0, #0
   13488:	bne	133a8 <__assert_fail@plt+0x1ba4>
   1348c:	movw	r1, #57832	; 0xe1e8
   13490:	add	r0, r6, #64	; 0x40
   13494:	movt	r1, #2
   13498:	bl	14bb8 <__assert_fail@plt+0x33b4>
   1349c:	b	133a8 <__assert_fail@plt+0x1ba4>
   134a0:	movw	r1, #57832	; 0xe1e8
   134a4:	ldr	r0, [r6, #92]	; 0x5c
   134a8:	movt	r1, #2
   134ac:	ldr	r1, [r1]
   134b0:	cmp	r1, r0
   134b4:	beq	13418 <__assert_fail@plt+0x1c14>
   134b8:	ldr	r0, [r6, #64]	; 0x40
   134bc:	cmp	r0, #0
   134c0:	bne	13418 <__assert_fail@plt+0x1c14>
   134c4:	movw	r1, #57832	; 0xe1e8
   134c8:	add	r0, r6, #64	; 0x40
   134cc:	movt	r1, #2
   134d0:	bl	14bb8 <__assert_fail@plt+0x33b4>
   134d4:	b	13418 <__assert_fail@plt+0x1c14>
   134d8:	bx	lr
   134dc:	push	{r4, r5, fp, lr}
   134e0:	add	fp, sp, #8
   134e4:	bl	11630 <getpid@plt>
   134e8:	movw	r4, #57876	; 0xe214
   134ec:	movt	r4, #2
   134f0:	ldr	r1, [r4, #12]
   134f4:	cmp	r0, r1
   134f8:	bne	13538 <__assert_fail@plt+0x1d34>
   134fc:	ldrb	r0, [r4, #10]
   13500:	cmp	r0, #0
   13504:	popne	{r4, r5, fp, pc}
   13508:	mov	r0, #1
   1350c:	mov	r1, #0
   13510:	mov	r5, #0
   13514:	strb	r0, [r4, #10]
   13518:	mov	r0, #1
   1351c:	bl	141f0 <__assert_fail@plt+0x29ec>
   13520:	strb	r5, [r4, #10]
   13524:	ldr	r0, [r4, #16]
   13528:	ldr	r1, [r4, #40]	; 0x28
   1352c:	cmp	r0, r1
   13530:	bne	13558 <__assert_fail@plt+0x1d54>
   13534:	pop	{r4, r5, fp, pc}
   13538:	movw	r0, #46945	; 0xb761
   1353c:	movw	r1, #44073	; 0xac29
   13540:	movw	r3, #46965	; 0xb775
   13544:	movw	r2, #1605	; 0x645
   13548:	movt	r0, #1
   1354c:	movt	r1, #1
   13550:	movt	r3, #1
   13554:	bl	11804 <__assert_fail@plt>
   13558:	ldr	r0, [r4, #40]	; 0x28
   1355c:	bl	114a4 <_exit@plt>
   13560:	push	{fp, lr}
   13564:	mov	fp, sp
   13568:	movw	r1, #45220	; 0xb0a4
   1356c:	mov	r0, #0
   13570:	mov	r2, #5
   13574:	movt	r1, #1
   13578:	bl	114ec <dcgettext@plt>
   1357c:	mov	r2, r0
   13580:	mov	r0, #1
   13584:	mov	r1, #0
   13588:	bl	115b8 <error@plt>
   1358c:	push	{r4, r5, r6, r7, fp, lr}
   13590:	add	fp, sp, #16
   13594:	sub	sp, sp, #32
   13598:	movw	r5, #57704	; 0xe168
   1359c:	mov	r4, r3
   135a0:	movt	r5, #2
   135a4:	ldr	r0, [r5]
   135a8:	cmp	r0, #0
   135ac:	beq	135e4 <__assert_fail@plt+0x1de0>
   135b0:	ldr	r0, [r5]
   135b4:	movw	r6, #57876	; 0xe214
   135b8:	movt	r6, #2
   135bc:	ldr	r1, [r6, #44]	; 0x2c
   135c0:	cmp	r1, r0
   135c4:	bcc	135e4 <__assert_fail@plt+0x1de0>
   135c8:	mov	r0, #0
   135cc:	mov	r1, #1
   135d0:	bl	141f0 <__assert_fail@plt+0x29ec>
   135d4:	ldr	r0, [r5]
   135d8:	ldr	r1, [r6, #44]	; 0x2c
   135dc:	cmp	r1, r0
   135e0:	bcs	135c8 <__assert_fail@plt+0x1dc4>
   135e4:	movw	r7, #57876	; 0xe214
   135e8:	movt	r7, #2
   135ec:	ldrb	r0, [r7, #3]
   135f0:	cmp	r0, #1
   135f4:	bne	13618 <__assert_fail@plt+0x1e14>
   135f8:	mov	r0, #1
   135fc:	mov	r6, #1
   13600:	bl	14508 <__assert_fail@plt+0x2d04>
   13604:	cmp	r0, #0
   13608:	beq	138e0 <__assert_fail@plt+0x20dc>
   1360c:	ldrb	r0, [r7, #3]
   13610:	cmp	r0, #0
   13614:	bne	13628 <__assert_fail@plt+0x1e24>
   13618:	ldrb	r0, [r7, #1]
   1361c:	cmp	r0, #1
   13620:	moveq	r0, #0
   13624:	bleq	14508 <__assert_fail@plt+0x2d04>
   13628:	mov	r0, #0
   1362c:	mov	r1, #0
   13630:	bl	141f0 <__assert_fail@plt+0x29ec>
   13634:	add	r0, sp, #4
   13638:	bl	18d58 <__assert_fail@plt+0x7554>
   1363c:	cmp	r0, #0
   13640:	bne	13b20 <__assert_fail@plt+0x231c>
   13644:	ldr	r0, [sp, #8]
   13648:	mov	r1, #2
   1364c:	mov	r2, #1
   13650:	bl	1a300 <__assert_fail@plt+0x8afc>
   13654:	bl	11738 <fork@plt>
   13658:	mov	r5, r0
   1365c:	cmn	r0, #1
   13660:	ble	13738 <__assert_fail@plt+0x1f34>
   13664:	cmp	r5, #0
   13668:	beq	136e0 <__assert_fail@plt+0x1edc>
   1366c:	cmn	r5, #1
   13670:	beq	13b34 <__assert_fail@plt+0x2330>
   13674:	ldr	r0, [sp, #8]
   13678:	bl	117ec <close@plt>
   1367c:	ldr	r0, [sp, #4]
   13680:	add	r1, sp, #12
   13684:	mov	r2, #4
   13688:	bl	18c80 <__assert_fail@plt+0x747c>
   1368c:	cmp	r0, #4
   13690:	beq	138b8 <__assert_fail@plt+0x20b4>
   13694:	mov	r4, r0
   13698:	cmp	r0, #0
   1369c:	beq	13880 <__assert_fail@plt+0x207c>
   136a0:	cmn	r4, #1
   136a4:	bne	13b48 <__assert_fail@plt+0x2344>
   136a8:	ldr	r0, [sp, #4]
   136ac:	bl	117ec <close@plt>
   136b0:	bl	11684 <__errno_location@plt>
   136b4:	ldr	r4, [r0]
   136b8:	movw	r1, #46265	; 0xb4b9
   136bc:	mov	r0, #0
   136c0:	mov	r2, #5
   136c4:	movt	r1, #1
   136c8:	bl	114ec <dcgettext@plt>
   136cc:	mov	r2, r0
   136d0:	mov	r0, #0
   136d4:	mov	r1, r4
   136d8:	bl	115b8 <error@plt>
   136dc:	b	13970 <__assert_fail@plt+0x216c>
   136e0:	ldr	r0, [sp, #4]
   136e4:	bl	117ec <close@plt>
   136e8:	mov	r0, #0
   136ec:	str	r0, [r7, #40]	; 0x28
   136f0:	bl	156f4 <__assert_fail@plt+0x3ef0>
   136f4:	cmp	r0, #0
   136f8:	beq	13700 <__assert_fail@plt+0x1efc>
   136fc:	bl	15714 <__assert_fail@plt+0x3f10>
   13700:	ldr	r5, [r7, #52]	; 0x34
   13704:	cmp	r5, #0
   13708:	beq	13788 <__assert_fail@plt+0x1f84>
   1370c:	ldr	r0, [r7, #56]	; 0x38
   13710:	mov	r3, #0
   13714:	ldr	r1, [r0, r3, lsl #2]
   13718:	cmp	r1, #0
   1371c:	beq	1372c <__assert_fail@plt+0x1f28>
   13720:	add	r3, r3, #1
   13724:	cmp	r3, r5
   13728:	bcc	13714 <__assert_fail@plt+0x1f10>
   1372c:	cmp	r3, r5
   13730:	beq	1378c <__assert_fail@plt+0x1f88>
   13734:	b	137c8 <__assert_fail@plt+0x1fc4>
   13738:	bl	11684 <__errno_location@plt>
   1373c:	mov	r6, r0
   13740:	ldr	r0, [r0]
   13744:	cmp	r0, #11
   13748:	beq	1375c <__assert_fail@plt+0x1f58>
   1374c:	b	13664 <__assert_fail@plt+0x1e60>
   13750:	ldr	r0, [r6]
   13754:	cmp	r0, #11
   13758:	bne	13664 <__assert_fail@plt+0x1e60>
   1375c:	ldr	r0, [r7, #44]	; 0x2c
   13760:	cmp	r0, #0
   13764:	beq	13664 <__assert_fail@plt+0x1e60>
   13768:	mov	r0, #0
   1376c:	mov	r1, #1
   13770:	bl	141f0 <__assert_fail@plt+0x29ec>
   13774:	bl	11738 <fork@plt>
   13778:	mov	r5, r0
   1377c:	cmp	r0, #0
   13780:	blt	13750 <__assert_fail@plt+0x1f4c>
   13784:	b	13664 <__assert_fail@plt+0x1e60>
   13788:	ldr	r0, [r7, #56]	; 0x38
   1378c:	add	r1, r7, #52	; 0x34
   13790:	mov	r2, #4
   13794:	bl	19638 <__assert_fail@plt+0x7e34>
   13798:	str	r0, [r7, #56]	; 0x38
   1379c:	ldr	r1, [r7, #52]	; 0x34
   137a0:	cmp	r5, r1
   137a4:	bcs	137c4 <__assert_fail@plt+0x1fc0>
   137a8:	mov	r1, #0
   137ac:	mov	r2, r5
   137b0:	str	r1, [r0, r2, lsl #2]
   137b4:	add	r2, r2, #1
   137b8:	ldr	r3, [r7, #52]	; 0x34
   137bc:	cmp	r2, r3
   137c0:	bcc	137b0 <__assert_fail@plt+0x1fac>
   137c4:	mov	r3, r5
   137c8:	ldr	r1, [r0, r3, lsl #2]
   137cc:	cmp	r1, #0
   137d0:	bne	13988 <__assert_fail@plt+0x2184>
   137d4:	mov	r1, #0
   137d8:	movw	r2, #46772	; 0xb6b4
   137dc:	str	r1, [r0, r3, lsl #2]
   137e0:	mov	r0, #1
   137e4:	movt	r2, #1
   137e8:	mov	r1, #19
   137ec:	strb	r0, [r7, #6]
   137f0:	ldr	r0, [r7, #44]	; 0x2c
   137f4:	add	r0, r0, #1
   137f8:	str	r0, [r7, #44]	; 0x2c
   137fc:	add	r0, sp, #12
   13800:	bl	11690 <snprintf@plt>
   13804:	cmp	r0, #20
   13808:	bcs	138ec <__assert_fail@plt+0x20e8>
   1380c:	ldr	r0, [r7, #24]
   13810:	cmp	r0, #0
   13814:	beq	1385c <__assert_fail@plt+0x2058>
   13818:	add	r1, sp, #12
   1381c:	mov	r2, #1
   13820:	bl	1166c <setenv@plt>
   13824:	cmn	r0, #1
   13828:	bgt	1385c <__assert_fail@plt+0x2058>
   1382c:	bl	11684 <__errno_location@plt>
   13830:	ldr	r5, [r0]
   13834:	movw	r1, #46865	; 0xb711
   13838:	mov	r0, #0
   1383c:	mov	r2, #5
   13840:	movt	r1, #1
   13844:	bl	114ec <dcgettext@plt>
   13848:	ldr	r3, [r7, #24]
   1384c:	mov	r2, r0
   13850:	mov	r0, #0
   13854:	mov	r1, r5
   13858:	bl	115b8 <error@plt>
   1385c:	ldrb	r1, [r7, #4]
   13860:	ldrb	r0, [r7, #2]
   13864:	cmp	r1, #0
   13868:	beq	139a8 <__assert_fail@plt+0x21a4>
   1386c:	cmp	r0, #0
   13870:	beq	13a60 <__assert_fail@plt+0x225c>
   13874:	movw	r5, #46631	; 0xb627
   13878:	movt	r5, #1
   1387c:	b	139c0 <__assert_fail@plt+0x21bc>
   13880:	ldr	r4, [r7, #52]	; 0x34
   13884:	cmp	r4, #0
   13888:	beq	1390c <__assert_fail@plt+0x2108>
   1388c:	ldr	r0, [r7, #56]	; 0x38
   13890:	mov	r1, #0
   13894:	ldr	r2, [r0, r1, lsl #2]
   13898:	cmp	r2, #0
   1389c:	beq	138ac <__assert_fail@plt+0x20a8>
   138a0:	add	r1, r1, #1
   138a4:	cmp	r1, r4
   138a8:	bcc	13894 <__assert_fail@plt+0x2090>
   138ac:	cmp	r1, r4
   138b0:	beq	13910 <__assert_fail@plt+0x210c>
   138b4:	b	1394c <__assert_fail@plt+0x2148>
   138b8:	ldr	r0, [sp, #4]
   138bc:	bl	117ec <close@plt>
   138c0:	mov	r1, sp
   138c4:	mov	r0, r5
   138c8:	mov	r2, #0
   138cc:	mov	r6, #0
   138d0:	bl	1157c <waitpid@plt>
   138d4:	ldr	r0, [sp, #12]
   138d8:	cmp	r0, #7
   138dc:	bne	13b78 <__assert_fail@plt+0x2374>
   138e0:	mov	r0, r6
   138e4:	sub	sp, fp, #16
   138e8:	pop	{r4, r5, r6, r7, fp, pc}
   138ec:	movw	r0, #46775	; 0xb6b7
   138f0:	movw	r1, #44073	; 0xac29
   138f4:	movw	r3, #46833	; 0xb6f1
   138f8:	movw	r2, #1190	; 0x4a6
   138fc:	movt	r0, #1
   13900:	movt	r1, #1
   13904:	movt	r3, #1
   13908:	bl	11804 <__assert_fail@plt>
   1390c:	ldr	r0, [r7, #56]	; 0x38
   13910:	add	r1, r7, #52	; 0x34
   13914:	mov	r2, #4
   13918:	bl	19638 <__assert_fail@plt+0x7e34>
   1391c:	str	r0, [r7, #56]	; 0x38
   13920:	ldr	r1, [r7, #52]	; 0x34
   13924:	cmp	r4, r1
   13928:	bcs	13948 <__assert_fail@plt+0x2144>
   1392c:	mov	r1, #0
   13930:	mov	r2, r4
   13934:	str	r1, [r0, r2, lsl #2]
   13938:	add	r2, r2, #1
   1393c:	ldr	r3, [r7, #52]	; 0x34
   13940:	cmp	r2, r3
   13944:	bcc	13934 <__assert_fail@plt+0x2130>
   13948:	mov	r1, r4
   1394c:	ldr	r2, [r0, r1, lsl #2]
   13950:	cmp	r2, #0
   13954:	bne	13988 <__assert_fail@plt+0x2184>
   13958:	str	r5, [r0, r1, lsl #2]
   1395c:	mov	r0, #1
   13960:	strb	r0, [r7, #6]
   13964:	ldr	r0, [r7, #44]	; 0x2c
   13968:	add	r0, r0, #1
   1396c:	str	r0, [r7, #44]	; 0x2c
   13970:	ldr	r0, [sp, #4]
   13974:	bl	117ec <close@plt>
   13978:	mov	r6, #1
   1397c:	mov	r0, r6
   13980:	sub	sp, fp, #16
   13984:	pop	{r4, r5, r6, r7, fp, pc}
   13988:	movw	r0, #46903	; 0xb737
   1398c:	movw	r1, #44073	; 0xac29
   13990:	movw	r3, #46916	; 0xb744
   13994:	movw	r2, #1477	; 0x5c5
   13998:	movt	r0, #1
   1399c:	movt	r1, #1
   139a0:	movt	r3, #1
   139a4:	bl	11804 <__assert_fail@plt>
   139a8:	movw	r1, #46631	; 0xb627
   139ac:	movw	r5, #46707	; 0xb673
   139b0:	cmp	r0, #0
   139b4:	movt	r1, #1
   139b8:	movt	r5, #1
   139bc:	movne	r5, r1
   139c0:	mov	r0, #0
   139c4:	bl	117ec <close@plt>
   139c8:	mov	r0, r5
   139cc:	mov	r1, #0
   139d0:	bl	15f14 <__assert_fail@plt+0x4710>
   139d4:	cmn	r0, #1
   139d8:	bgt	13a18 <__assert_fail@plt+0x2214>
   139dc:	ldrb	r7, [r7, #2]
   139e0:	bl	11684 <__errno_location@plt>
   139e4:	ldr	r6, [r0]
   139e8:	mov	r0, #0
   139ec:	mov	r1, #8
   139f0:	mov	r2, r5
   139f4:	bl	18698 <__assert_fail@plt+0x6e94>
   139f8:	movw	r2, #51571	; 0xc973
   139fc:	mov	r3, r0
   13a00:	cmp	r7, #1
   13a04:	movt	r2, #1
   13a08:	bne	13a54 <__assert_fail@plt+0x2250>
   13a0c:	mov	r0, #1
   13a10:	mov	r1, r6
   13a14:	bl	115b8 <error@plt>
   13a18:	mov	r6, r0
   13a1c:	cmp	r0, #0
   13a20:	beq	13a60 <__assert_fail@plt+0x225c>
   13a24:	mov	r0, r6
   13a28:	mov	r1, #0
   13a2c:	bl	11504 <dup2@plt>
   13a30:	cmp	r0, #0
   13a34:	bne	13af4 <__assert_fail@plt+0x22f0>
   13a38:	mov	r0, r6
   13a3c:	bl	117ec <close@plt>
   13a40:	mov	r0, r4
   13a44:	bl	151f0 <__assert_fail@plt+0x39ec>
   13a48:	cmp	r0, #0
   13a4c:	bne	13a70 <__assert_fail@plt+0x226c>
   13a50:	b	13a84 <__assert_fail@plt+0x2280>
   13a54:	mov	r0, #0
   13a58:	mov	r1, r6
   13a5c:	bl	115b8 <error@plt>
   13a60:	mov	r0, r4
   13a64:	bl	151f0 <__assert_fail@plt+0x39ec>
   13a68:	cmp	r0, #0
   13a6c:	beq	13a84 <__assert_fail@plt+0x2280>
   13a70:	bl	11684 <__errno_location@plt>
   13a74:	mov	r5, r0
   13a78:	mov	r0, #7
   13a7c:	str	r0, [r5]
   13a80:	b	13aa4 <__assert_fail@plt+0x22a0>
   13a84:	ldr	r0, [r4]
   13a88:	mov	r1, r4
   13a8c:	bl	114bc <execvp@plt>
   13a90:	bl	11684 <__errno_location@plt>
   13a94:	mov	r5, r0
   13a98:	ldr	r0, [r0]
   13a9c:	cmp	r0, #0
   13aa0:	beq	13ab4 <__assert_fail@plt+0x22b0>
   13aa4:	ldr	r0, [sp, #8]
   13aa8:	mov	r1, r5
   13aac:	mov	r2, #4
   13ab0:	bl	116c0 <write@plt>
   13ab4:	ldr	r0, [sp, #8]
   13ab8:	bl	117ec <close@plt>
   13abc:	ldr	r1, [r5]
   13ac0:	mov	r0, #126	; 0x7e
   13ac4:	cmp	r1, #7
   13ac8:	beq	13af0 <__assert_fail@plt+0x22ec>
   13acc:	ldr	r3, [r4]
   13ad0:	movw	r2, #51571	; 0xc973
   13ad4:	mov	r0, #0
   13ad8:	movt	r2, #1
   13adc:	bl	115b8 <error@plt>
   13ae0:	ldr	r1, [r5]
   13ae4:	mov	r0, #126	; 0x7e
   13ae8:	cmp	r1, #2
   13aec:	movweq	r0, #127	; 0x7f
   13af0:	bl	114a4 <_exit@plt>
   13af4:	bl	11684 <__errno_location@plt>
   13af8:	ldr	r4, [r0]
   13afc:	movw	r1, #46717	; 0xb67d
   13b00:	movt	r1, #1
   13b04:	mov	r0, #0
   13b08:	mov	r2, #5
   13b0c:	bl	114ec <dcgettext@plt>
   13b10:	mov	r2, r0
   13b14:	mov	r0, #1
   13b18:	mov	r1, r4
   13b1c:	bl	115b8 <error@plt>
   13b20:	bl	11684 <__errno_location@plt>
   13b24:	ldr	r4, [r0]
   13b28:	movw	r1, #46219	; 0xb48b
   13b2c:	movt	r1, #1
   13b30:	b	13b04 <__assert_fail@plt+0x2300>
   13b34:	bl	11684 <__errno_location@plt>
   13b38:	ldr	r4, [r0]
   13b3c:	movw	r1, #46253	; 0xb4ad
   13b40:	movt	r1, #1
   13b44:	b	13b04 <__assert_fail@plt+0x2300>
   13b48:	bl	11684 <__errno_location@plt>
   13b4c:	ldr	r5, [r0]
   13b50:	movw	r1, #46355	; 0xb513
   13b54:	mov	r0, #0
   13b58:	mov	r2, #5
   13b5c:	movt	r1, #1
   13b60:	bl	114ec <dcgettext@plt>
   13b64:	mov	r2, r0
   13b68:	mov	r0, #1
   13b6c:	mov	r1, r5
   13b70:	mov	r3, r4
   13b74:	bl	115b8 <error@plt>
   13b78:	cmp	r0, #2
   13b7c:	bne	13b88 <__assert_fail@plt+0x2384>
   13b80:	mov	r0, #127	; 0x7f
   13b84:	bl	1163c <exit@plt>
   13b88:	mov	r0, #126	; 0x7e
   13b8c:	bl	1163c <exit@plt>
   13b90:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   13b94:	add	fp, sp, #24
   13b98:	sub	sp, sp, #16
   13b9c:	movw	r5, #57876	; 0xe214
   13ba0:	mvn	r8, #0
   13ba4:	movt	r5, #2
   13ba8:	ldrb	r0, [r5, #9]
   13bac:	cmp	r0, #0
   13bb0:	bne	13c38 <__assert_fail@plt+0x2434>
   13bb4:	movw	r1, #57832	; 0xe1e8
   13bb8:	ldr	r0, [r5, #28]
   13bbc:	ldr	r7, [r5, #76]	; 0x4c
   13bc0:	ldr	r6, [r5, #32]
   13bc4:	movt	r1, #2
   13bc8:	ldr	r4, [r1, #20]
   13bcc:	bl	117e0 <getc@plt>
   13bd0:	cmn	r0, #1
   13bd4:	beq	13c0c <__assert_fail@plt+0x2408>
   13bd8:	add	r1, r6, r7
   13bdc:	sub	r1, r1, r4
   13be0:	sub	r7, r1, #1
   13be4:	ldrb	r1, [r5]
   13be8:	cmp	r0, r1
   13bec:	beq	13c44 <__assert_fail@plt+0x2440>
   13bf0:	cmp	r6, r7
   13bf4:	bcs	13c9c <__assert_fail@plt+0x2498>
   13bf8:	strb	r0, [r6], #1
   13bfc:	ldr	r0, [r5, #28]
   13c00:	bl	117e0 <getc@plt>
   13c04:	cmn	r0, #1
   13c08:	bne	13be4 <__assert_fail@plt+0x23e0>
   13c0c:	mov	r0, #1
   13c10:	strb	r0, [r5, #9]
   13c14:	ldr	r2, [r5, #32]
   13c18:	cmp	r6, r2
   13c1c:	beq	13c38 <__assert_fail@plt+0x2434>
   13c20:	mov	r0, #0
   13c24:	strb	r0, [r6], #1
   13c28:	ldr	r1, [r5, #88]	; 0x58
   13c2c:	sub	r8, r6, r2
   13c30:	cmp	r1, #0
   13c34:	beq	13c6c <__assert_fail@plt+0x2468>
   13c38:	mov	r0, r8
   13c3c:	sub	sp, fp, #24
   13c40:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   13c44:	ldr	r0, [r5, #36]	; 0x24
   13c48:	add	r0, r0, #1
   13c4c:	str	r0, [r5, #36]	; 0x24
   13c50:	mov	r0, #0
   13c54:	strb	r0, [r6], #1
   13c58:	ldr	r2, [r5, #32]
   13c5c:	ldr	r1, [r5, #88]	; 0x58
   13c60:	sub	r8, r6, r2
   13c64:	cmp	r1, #0
   13c68:	bne	13c38 <__assert_fail@plt+0x2434>
   13c6c:	ldrb	r1, [r5, #5]
   13c70:	str	r0, [sp]
   13c74:	mov	r3, r8
   13c78:	eor	r1, r1, #1
   13c7c:	stmib	sp, {r0, r1}
   13c80:	movw	r1, #57832	; 0xe1e8
   13c84:	add	r0, r5, #64	; 0x40
   13c88:	movt	r1, #2
   13c8c:	bl	1493c <__assert_fail@plt+0x3138>
   13c90:	mov	r0, r8
   13c94:	sub	sp, fp, #24
   13c98:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   13c9c:	bl	14198 <__assert_fail@plt+0x2994>
   13ca0:	movw	r1, #46196	; 0xb474
   13ca4:	mov	r0, #0
   13ca8:	mov	r2, #5
   13cac:	movt	r1, #1
   13cb0:	bl	114ec <dcgettext@plt>
   13cb4:	mov	r2, r0
   13cb8:	mov	r0, #1
   13cbc:	mov	r1, #0
   13cc0:	bl	115b8 <error@plt>
   13cc4:	push	{fp, lr}
   13cc8:	mov	fp, sp
   13ccc:	cmp	r0, #0
   13cd0:	bne	13fa4 <__assert_fail@plt+0x27a0>
   13cd4:	movw	r5, #57820	; 0xe1dc
   13cd8:	movw	r1, #47165	; 0xb83d
   13cdc:	mov	r0, #0
   13ce0:	mov	r2, #5
   13ce4:	movt	r5, #2
   13ce8:	movt	r1, #1
   13cec:	ldr	r4, [r5]
   13cf0:	bl	114ec <dcgettext@plt>
   13cf4:	movw	r6, #58012	; 0xe29c
   13cf8:	mov	r1, r0
   13cfc:	mov	r0, r4
   13d00:	movt	r6, #2
   13d04:	ldr	r2, [r6]
   13d08:	bl	11678 <fprintf@plt>
   13d0c:	movw	r1, #47214	; 0xb86e
   13d10:	mov	r0, #0
   13d14:	mov	r2, #5
   13d18:	movt	r1, #1
   13d1c:	bl	114ec <dcgettext@plt>
   13d20:	ldr	r1, [r5]
   13d24:	bl	117bc <fputs@plt>
   13d28:	movw	r1, #47292	; 0xb8bc
   13d2c:	mov	r0, #0
   13d30:	mov	r2, #5
   13d34:	movt	r1, #1
   13d38:	bl	114ec <dcgettext@plt>
   13d3c:	ldr	r1, [r5]
   13d40:	bl	117bc <fputs@plt>
   13d44:	movw	r1, #47409	; 0xb931
   13d48:	mov	r0, #0
   13d4c:	mov	r2, #5
   13d50:	movt	r1, #1
   13d54:	bl	114ec <dcgettext@plt>
   13d58:	ldr	r1, [r5]
   13d5c:	bl	117bc <fputs@plt>
   13d60:	movw	r1, #47621	; 0xba05
   13d64:	mov	r0, #0
   13d68:	mov	r2, #5
   13d6c:	movt	r1, #1
   13d70:	bl	114ec <dcgettext@plt>
   13d74:	ldr	r1, [r5]
   13d78:	bl	117bc <fputs@plt>
   13d7c:	movw	r1, #47698	; 0xba52
   13d80:	mov	r0, #0
   13d84:	mov	r2, #5
   13d88:	movt	r1, #1
   13d8c:	bl	114ec <dcgettext@plt>
   13d90:	ldr	r1, [r5]
   13d94:	bl	117bc <fputs@plt>
   13d98:	movw	r1, #47932	; 0xbb3c
   13d9c:	mov	r0, #0
   13da0:	mov	r2, #5
   13da4:	movt	r1, #1
   13da8:	bl	114ec <dcgettext@plt>
   13dac:	ldr	r1, [r5]
   13db0:	bl	117bc <fputs@plt>
   13db4:	movw	r1, #48157	; 0xbc1d
   13db8:	mov	r0, #0
   13dbc:	mov	r2, #5
   13dc0:	movt	r1, #1
   13dc4:	bl	114ec <dcgettext@plt>
   13dc8:	ldr	r1, [r5]
   13dcc:	bl	117bc <fputs@plt>
   13dd0:	movw	r1, #48306	; 0xbcb2
   13dd4:	mov	r0, #0
   13dd8:	mov	r2, #5
   13ddc:	movt	r1, #1
   13de0:	bl	114ec <dcgettext@plt>
   13de4:	ldr	r1, [r5]
   13de8:	bl	117bc <fputs@plt>
   13dec:	movw	r1, #48358	; 0xbce6
   13df0:	mov	r0, #0
   13df4:	mov	r2, #5
   13df8:	movt	r1, #1
   13dfc:	bl	114ec <dcgettext@plt>
   13e00:	ldr	r1, [r5]
   13e04:	bl	117bc <fputs@plt>
   13e08:	movw	r1, #48569	; 0xbdb9
   13e0c:	mov	r0, #0
   13e10:	mov	r2, #5
   13e14:	movt	r1, #1
   13e18:	bl	114ec <dcgettext@plt>
   13e1c:	ldr	r1, [r5]
   13e20:	bl	117bc <fputs@plt>
   13e24:	movw	r1, #48695	; 0xbe37
   13e28:	mov	r0, #0
   13e2c:	mov	r2, #5
   13e30:	movt	r1, #1
   13e34:	bl	114ec <dcgettext@plt>
   13e38:	ldr	r1, [r5]
   13e3c:	bl	117bc <fputs@plt>
   13e40:	movw	r1, #48854	; 0xbed6
   13e44:	mov	r0, #0
   13e48:	mov	r2, #5
   13e4c:	movt	r1, #1
   13e50:	bl	114ec <dcgettext@plt>
   13e54:	ldr	r1, [r5]
   13e58:	bl	117bc <fputs@plt>
   13e5c:	movw	r1, #48934	; 0xbf26
   13e60:	mov	r0, #0
   13e64:	mov	r2, #5
   13e68:	movt	r1, #1
   13e6c:	bl	114ec <dcgettext@plt>
   13e70:	ldr	r1, [r5]
   13e74:	bl	117bc <fputs@plt>
   13e78:	movw	r1, #49150	; 0xbffe
   13e7c:	mov	r0, #0
   13e80:	mov	r2, #5
   13e84:	movt	r1, #1
   13e88:	bl	114ec <dcgettext@plt>
   13e8c:	ldr	r1, [r5]
   13e90:	bl	117bc <fputs@plt>
   13e94:	movw	r1, #49224	; 0xc048
   13e98:	mov	r0, #0
   13e9c:	mov	r2, #5
   13ea0:	movt	r1, #1
   13ea4:	bl	114ec <dcgettext@plt>
   13ea8:	ldr	r1, [r5]
   13eac:	bl	117bc <fputs@plt>
   13eb0:	movw	r1, #49287	; 0xc087
   13eb4:	mov	r0, #0
   13eb8:	mov	r2, #5
   13ebc:	movt	r1, #1
   13ec0:	bl	114ec <dcgettext@plt>
   13ec4:	ldr	r1, [r5]
   13ec8:	bl	117bc <fputs@plt>
   13ecc:	movw	r1, #49367	; 0xc0d7
   13ed0:	mov	r0, #0
   13ed4:	mov	r2, #5
   13ed8:	movt	r1, #1
   13edc:	bl	114ec <dcgettext@plt>
   13ee0:	ldr	r1, [r5]
   13ee4:	bl	117bc <fputs@plt>
   13ee8:	movw	r1, #49580	; 0xc1ac
   13eec:	mov	r0, #0
   13ef0:	mov	r2, #5
   13ef4:	movt	r1, #1
   13ef8:	bl	114ec <dcgettext@plt>
   13efc:	ldr	r1, [r5]
   13f00:	bl	117bc <fputs@plt>
   13f04:	movw	r1, #49654	; 0xc1f6
   13f08:	mov	r0, #0
   13f0c:	mov	r2, #5
   13f10:	movt	r1, #1
   13f14:	bl	114ec <dcgettext@plt>
   13f18:	ldr	r1, [r5]
   13f1c:	bl	117bc <fputs@plt>
   13f20:	movw	r1, #49721	; 0xc239
   13f24:	mov	r0, #0
   13f28:	mov	r2, #5
   13f2c:	movt	r1, #1
   13f30:	bl	114ec <dcgettext@plt>
   13f34:	ldr	r1, [r5]
   13f38:	bl	117bc <fputs@plt>
   13f3c:	movw	r1, #49790	; 0xc27e
   13f40:	mov	r0, #0
   13f44:	mov	r2, #5
   13f48:	movt	r1, #1
   13f4c:	bl	114ec <dcgettext@plt>
   13f50:	ldr	r1, [r5]
   13f54:	bl	117bc <fputs@plt>
   13f58:	movw	r1, #49860	; 0xc2c4
   13f5c:	mov	r0, #0
   13f60:	mov	r2, #5
   13f64:	movt	r1, #1
   13f68:	bl	114ec <dcgettext@plt>
   13f6c:	ldr	r1, [r5]
   13f70:	bl	117bc <fputs@plt>
   13f74:	movw	r1, #49919	; 0xc2ff
   13f78:	mov	r0, #0
   13f7c:	mov	r2, #5
   13f80:	movt	r1, #1
   13f84:	bl	114ec <dcgettext@plt>
   13f88:	ldr	r1, [r5]
   13f8c:	bl	117bc <fputs@plt>
   13f90:	ldr	r0, [r5]
   13f94:	ldr	r1, [r6]
   13f98:	bl	15a68 <__assert_fail@plt+0x4264>
   13f9c:	mov	r0, #0
   13fa0:	bl	1163c <exit@plt>
   13fa4:	mov	r4, r0
   13fa8:	movw	r0, #57808	; 0xe1d0
   13fac:	movw	r1, #47126	; 0xb816
   13fb0:	mov	r2, #5
   13fb4:	movt	r0, #2
   13fb8:	movt	r1, #1
   13fbc:	ldr	r5, [r0]
   13fc0:	mov	r0, #0
   13fc4:	bl	114ec <dcgettext@plt>
   13fc8:	mov	r1, r0
   13fcc:	movw	r0, #58012	; 0xe29c
   13fd0:	movt	r0, #2
   13fd4:	ldr	r2, [r0]
   13fd8:	mov	r0, r5
   13fdc:	bl	11678 <fprintf@plt>
   13fe0:	mov	r0, r4
   13fe4:	bl	1163c <exit@plt>
   13fe8:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   13fec:	add	fp, sp, #24
   13ff0:	sub	sp, sp, #16
   13ff4:	mov	r6, r2
   13ff8:	mov	r5, r1
   13ffc:	add	r1, sp, #12
   14000:	mov	r2, #10
   14004:	mov	r7, r3
   14008:	mov	r4, r0
   1400c:	bl	11450 <strtol@plt>
   14010:	ldr	r1, [sp, #12]
   14014:	cmp	r1, r4
   14018:	beq	14100 <__assert_fail@plt+0x28fc>
   1401c:	ldrb	r1, [r1]
   14020:	cmp	r1, #0
   14024:	bne	14100 <__assert_fail@plt+0x28fc>
   14028:	ldr	r8, [fp, #8]
   1402c:	cmp	r0, r6
   14030:	blt	140b0 <__assert_fail@plt+0x28ac>
   14034:	cmp	r7, #0
   14038:	blt	140a0 <__assert_fail@plt+0x289c>
   1403c:	cmp	r0, r7
   14040:	mov	r6, r0
   14044:	ble	14094 <__assert_fail@plt+0x2890>
   14048:	movw	r0, #57808	; 0xe1d0
   1404c:	movw	r1, #47080	; 0xb7e8
   14050:	mov	r2, #5
   14054:	movt	r0, #2
   14058:	movt	r1, #1
   1405c:	ldr	r6, [r0]
   14060:	mov	r0, #0
   14064:	bl	114ec <dcgettext@plt>
   14068:	mov	r1, r0
   1406c:	movw	r0, #58012	; 0xe29c
   14070:	mov	r3, r4
   14074:	movt	r0, #2
   14078:	ldr	r2, [r0]
   1407c:	mov	r0, r6
   14080:	stm	sp, {r5, r7}
   14084:	bl	11678 <fprintf@plt>
   14088:	cmp	r8, #0
   1408c:	mov	r6, r7
   14090:	bne	140f8 <__assert_fail@plt+0x28f4>
   14094:	mov	r0, r6
   14098:	sub	sp, fp, #24
   1409c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   140a0:	mov	r6, r0
   140a4:	mov	r0, r6
   140a8:	sub	sp, fp, #24
   140ac:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   140b0:	movw	r0, #57808	; 0xe1d0
   140b4:	movw	r1, #47034	; 0xb7ba
   140b8:	mov	r2, #5
   140bc:	movt	r0, #2
   140c0:	movt	r1, #1
   140c4:	ldr	r7, [r0]
   140c8:	mov	r0, #0
   140cc:	bl	114ec <dcgettext@plt>
   140d0:	mov	r1, r0
   140d4:	movw	r0, #58012	; 0xe29c
   140d8:	mov	r3, r4
   140dc:	movt	r0, #2
   140e0:	ldr	r2, [r0]
   140e4:	mov	r0, r7
   140e8:	stm	sp, {r5, r6}
   140ec:	bl	11678 <fprintf@plt>
   140f0:	cmp	r8, #0
   140f4:	beq	14094 <__assert_fail@plt+0x2890>
   140f8:	mov	r0, #1
   140fc:	bl	13cc4 <__assert_fail@plt+0x24c0>
   14100:	movw	r0, #57808	; 0xe1d0
   14104:	movw	r1, #46994	; 0xb792
   14108:	mov	r2, #5
   1410c:	movt	r0, #2
   14110:	movt	r1, #1
   14114:	ldr	r6, [r0]
   14118:	mov	r0, #0
   1411c:	bl	114ec <dcgettext@plt>
   14120:	mov	r1, r0
   14124:	movw	r0, #58012	; 0xe29c
   14128:	mov	r3, r4
   1412c:	str	r5, [sp]
   14130:	movt	r0, #2
   14134:	ldr	r2, [r0]
   14138:	mov	r0, r6
   1413c:	bl	11678 <fprintf@plt>
   14140:	mov	r0, #1
   14144:	bl	13cc4 <__assert_fail@plt+0x24c0>
   14148:	movw	r0, #57704	; 0xe168
   1414c:	movt	r0, #2
   14150:	ldr	r1, [r0]
   14154:	cmn	r1, #-2147483647	; 0x80000001
   14158:	ldrne	r1, [r0]
   1415c:	addne	r1, r1, #1
   14160:	strne	r1, [r0]
   14164:	movw	r0, #57876	; 0xe214
   14168:	mov	r1, #1
   1416c:	movt	r0, #2
   14170:	str	r1, [r0, #48]	; 0x30
   14174:	bx	lr
   14178:	movw	r0, #57704	; 0xe168
   1417c:	movt	r0, #2
   14180:	ldr	r1, [r0]
   14184:	cmp	r1, #2
   14188:	ldrge	r1, [r0]
   1418c:	subge	r1, r1, #1
   14190:	strge	r1, [r0]
   14194:	bx	lr
   14198:	movw	r0, #57876	; 0xe214
   1419c:	movt	r0, #2
   141a0:	ldr	r1, [r0, #88]	; 0x58
   141a4:	cmp	r1, #0
   141a8:	bne	141ec <__assert_fail@plt+0x29e8>
   141ac:	ldrb	r1, [r0, #5]
   141b0:	cmp	r1, #1
   141b4:	bne	141ec <__assert_fail@plt+0x29e8>
   141b8:	movw	r2, #57832	; 0xe1e8
   141bc:	ldr	r1, [r0, #92]	; 0x5c
   141c0:	movt	r2, #2
   141c4:	ldr	r2, [r2]
   141c8:	cmp	r2, r1
   141cc:	bxeq	lr
   141d0:	ldr	r1, [r0, #64]	; 0x40
   141d4:	cmp	r1, #0
   141d8:	bne	141ec <__assert_fail@plt+0x29e8>
   141dc:	movw	r1, #57832	; 0xe1e8
   141e0:	add	r0, r0, #64	; 0x40
   141e4:	movt	r1, #2
   141e8:	b	14bb8 <__assert_fail@plt+0x33b4>
   141ec:	bx	lr
   141f0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   141f4:	add	fp, sp, #28
   141f8:	sub	sp, sp, #20
   141fc:	movw	sl, #57876	; 0xe214
   14200:	movt	sl, #2
   14204:	ldr	r2, [sl, #44]	; 0x2c
   14208:	cmp	r2, #0
   1420c:	beq	144dc <__assert_fail@plt+0x2cd8>
   14210:	eor	r2, r0, #1
   14214:	mov	r4, #0
   14218:	add	r6, sp, #16
   1421c:	mov	r5, #0
   14220:	str	r1, [sp, #12]
   14224:	str	r0, [sp, #8]
   14228:	str	r2, [sp, #4]
   1422c:	cmp	r5, r1
   14230:	mov	r1, #0
   14234:	str	r4, [sl, #48]	; 0x30
   14238:	movwcs	r1, #1
   1423c:	cmp	r0, #0
   14240:	and	r7, r1, r2
   14244:	beq	142e0 <__assert_fail@plt+0x2adc>
   14248:	mvn	r0, #0
   1424c:	mov	r1, r6
   14250:	mov	r2, r7
   14254:	bl	1157c <waitpid@plt>
   14258:	cmn	r0, #1
   1425c:	bne	14290 <__assert_fail@plt+0x2a8c>
   14260:	bl	11684 <__errno_location@plt>
   14264:	mov	r4, r0
   14268:	ldr	r9, [r4]
   1426c:	cmp	r9, #4
   14270:	bne	144e4 <__assert_fail@plt+0x2ce0>
   14274:	ldr	r0, [sl, #48]	; 0x30
   14278:	mov	r1, r6
   1427c:	mov	r2, r7
   14280:	mvn	r0, #0
   14284:	bl	1157c <waitpid@plt>
   14288:	cmn	r0, #1
   1428c:	beq	14268 <__assert_fail@plt+0x2a64>
   14290:	cmp	r0, #0
   14294:	beq	144ac <__assert_fail@plt+0x2ca8>
   14298:	ldr	r2, [sl, #52]	; 0x34
   1429c:	cmp	r2, #0
   142a0:	beq	142d0 <__assert_fail@plt+0x2acc>
   142a4:	ldr	r3, [sl, #56]	; 0x38
   142a8:	mov	r1, #0
   142ac:	ldr	r4, [r3, r1, lsl #2]
   142b0:	cmp	r0, r4
   142b4:	beq	142c4 <__assert_fail@plt+0x2ac0>
   142b8:	add	r1, r1, #1
   142bc:	cmp	r1, r2
   142c0:	bcc	142ac <__assert_fail@plt+0x2aa8>
   142c4:	cmp	r1, r2
   142c8:	beq	14248 <__assert_fail@plt+0x2a44>
   142cc:	b	1437c <__assert_fail@plt+0x2b78>
   142d0:	mov	r1, #0
   142d4:	cmp	r1, r2
   142d8:	beq	14248 <__assert_fail@plt+0x2a44>
   142dc:	b	1437c <__assert_fail@plt+0x2b78>
   142e0:	mvn	r0, #0
   142e4:	mov	r1, r6
   142e8:	mov	r2, r7
   142ec:	bl	1157c <waitpid@plt>
   142f0:	cmn	r0, #1
   142f4:	bne	14330 <__assert_fail@plt+0x2b2c>
   142f8:	bl	11684 <__errno_location@plt>
   142fc:	mov	r8, r0
   14300:	ldr	r9, [r8]
   14304:	cmp	r9, #4
   14308:	bne	144e4 <__assert_fail@plt+0x2ce0>
   1430c:	ldr	r0, [sl, #48]	; 0x30
   14310:	mov	r1, r6
   14314:	cmp	r0, #0
   14318:	mvn	r0, #0
   1431c:	movne	r7, #1
   14320:	mov	r2, r7
   14324:	bl	1157c <waitpid@plt>
   14328:	cmn	r0, #1
   1432c:	beq	14300 <__assert_fail@plt+0x2afc>
   14330:	cmp	r0, #0
   14334:	beq	144ac <__assert_fail@plt+0x2ca8>
   14338:	ldr	r2, [sl, #52]	; 0x34
   1433c:	cmp	r2, #0
   14340:	beq	14370 <__assert_fail@plt+0x2b6c>
   14344:	ldr	r3, [sl, #56]	; 0x38
   14348:	mov	r1, #0
   1434c:	ldr	r4, [r3, r1, lsl #2]
   14350:	cmp	r0, r4
   14354:	beq	14364 <__assert_fail@plt+0x2b60>
   14358:	add	r1, r1, #1
   1435c:	cmp	r1, r2
   14360:	bcc	1434c <__assert_fail@plt+0x2b48>
   14364:	cmp	r1, r2
   14368:	beq	142e0 <__assert_fail@plt+0x2adc>
   1436c:	b	1437c <__assert_fail@plt+0x2b78>
   14370:	mov	r1, #0
   14374:	cmp	r1, r2
   14378:	beq	142e0 <__assert_fail@plt+0x2adc>
   1437c:	ldr	r0, [sl, #56]	; 0x38
   14380:	mov	r4, #0
   14384:	str	r4, [r0, r1, lsl #2]
   14388:	ldr	r0, [sl, #44]	; 0x2c
   1438c:	sub	r0, r0, #1
   14390:	str	r0, [sl, #44]	; 0x2c
   14394:	ldr	r0, [sp, #16]
   14398:	and	r1, r0, #65280	; 0xff00
   1439c:	cmp	r1, #65280	; 0xff00
   143a0:	bne	143dc <__assert_fail@plt+0x2bd8>
   143a4:	movw	r1, #46508	; 0xb5ac
   143a8:	mov	r0, #0
   143ac:	mov	r2, #5
   143b0:	movt	r1, #1
   143b4:	bl	114ec <dcgettext@plt>
   143b8:	mov	r2, r0
   143bc:	movw	r0, #57832	; 0xe1e8
   143c0:	mov	r1, #0
   143c4:	movt	r0, #2
   143c8:	ldr	r0, [r0, #4]
   143cc:	ldr	r3, [r0]
   143d0:	mov	r0, #124	; 0x7c
   143d4:	bl	115b8 <error@plt>
   143d8:	ldr	r0, [sp, #16]
   143dc:	uxtb	r1, r0
   143e0:	cmp	r1, #127	; 0x7f
   143e4:	bne	14428 <__assert_fail@plt+0x2c24>
   143e8:	movw	r1, #46545	; 0xb5d1
   143ec:	mov	r0, #0
   143f0:	mov	r2, #5
   143f4:	movt	r1, #1
   143f8:	bl	114ec <dcgettext@plt>
   143fc:	mov	r2, r0
   14400:	movw	r0, #57832	; 0xe1e8
   14404:	mov	r1, #0
   14408:	movt	r0, #2
   1440c:	ldr	r0, [r0, #4]
   14410:	ldr	r3, [r0]
   14414:	ldrb	r0, [sp, #17]
   14418:	str	r0, [sp]
   1441c:	mov	r0, #125	; 0x7d
   14420:	bl	115b8 <error@plt>
   14424:	ldr	r0, [sp, #16]
   14428:	mov	r1, #2130706432	; 0x7f000000
   1442c:	and	r1, r1, r0, lsl #24
   14430:	add	r1, r1, #16777216	; 0x1000000
   14434:	cmp	r1, #33554432	; 0x2000000
   14438:	blt	14480 <__assert_fail@plt+0x2c7c>
   1443c:	movw	r1, #46570	; 0xb5ea
   14440:	mov	r0, #0
   14444:	mov	r2, #5
   14448:	movt	r1, #1
   1444c:	bl	114ec <dcgettext@plt>
   14450:	mov	r2, r0
   14454:	movw	r0, #57832	; 0xe1e8
   14458:	mov	r1, #0
   1445c:	movt	r0, #2
   14460:	ldr	r0, [r0, #4]
   14464:	ldr	r3, [r0]
   14468:	ldr	r0, [sp, #16]
   1446c:	and	r0, r0, #127	; 0x7f
   14470:	str	r0, [sp]
   14474:	mov	r0, #125	; 0x7d
   14478:	bl	115b8 <error@plt>
   1447c:	ldr	r0, [sp, #16]
   14480:	tst	r0, #65280	; 0xff00
   14484:	ldr	r0, [sp, #8]
   14488:	ldr	r2, [sp, #4]
   1448c:	add	r5, r5, #1
   14490:	movne	r1, #123	; 0x7b
   14494:	strne	r1, [sl, #40]	; 0x28
   14498:	ldr	r1, [sl, #44]	; 0x2c
   1449c:	cmp	r1, #0
   144a0:	ldr	r1, [sp, #12]
   144a4:	bne	1422c <__assert_fail@plt+0x2a28>
   144a8:	b	144dc <__assert_fail@plt+0x2cd8>
   144ac:	tst	r7, #1
   144b0:	bne	144dc <__assert_fail@plt+0x2cd8>
   144b4:	movw	r1, #46465	; 0xb581
   144b8:	mov	r0, #0
   144bc:	mov	r2, #5
   144c0:	movt	r1, #1
   144c4:	bl	114ec <dcgettext@plt>
   144c8:	ldr	r3, [sl, #44]	; 0x2c
   144cc:	mov	r2, r0
   144d0:	mov	r0, #0
   144d4:	mov	r1, #0
   144d8:	bl	115b8 <error@plt>
   144dc:	sub	sp, fp, #28
   144e0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   144e4:	movw	r1, #46433	; 0xb561
   144e8:	mov	r0, #0
   144ec:	mov	r2, #5
   144f0:	movt	r1, #1
   144f4:	bl	114ec <dcgettext@plt>
   144f8:	mov	r2, r0
   144fc:	mov	r0, #1
   14500:	mov	r1, r9
   14504:	bl	115b8 <error@plt>
   14508:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1450c:	add	fp, sp, #28
   14510:	sub	sp, sp, #4
   14514:	movw	r5, #57832	; 0xe1e8
   14518:	mov	r9, r0
   1451c:	movt	r5, #2
   14520:	ldr	r0, [r5]
   14524:	cmp	r0, #1
   14528:	bne	14628 <__assert_fail@plt+0x2e24>
   1452c:	cmp	r9, #0
   14530:	beq	145c4 <__assert_fail@plt+0x2dc0>
   14534:	movw	r6, #57876	; 0xe214
   14538:	movt	r6, #2
   1453c:	ldr	r0, [r6, #60]	; 0x3c
   14540:	cmp	r0, #0
   14544:	bne	1457c <__assert_fail@plt+0x2d78>
   14548:	movw	r0, #46631	; 0xb627
   1454c:	mov	r1, #0
   14550:	movt	r0, #1
   14554:	bl	155f0 <__assert_fail@plt+0x3dec>
   14558:	cmn	r0, #1
   1455c:	ble	146b4 <__assert_fail@plt+0x2eb0>
   14560:	movw	r1, #45374	; 0xb13e
   14564:	mov	r4, r0
   14568:	movt	r1, #1
   1456c:	bl	1142c <fdopen@plt>
   14570:	cmp	r0, #0
   14574:	beq	146c0 <__assert_fail@plt+0x2ebc>
   14578:	str	r0, [r6, #60]	; 0x3c
   1457c:	movw	r4, #57808	; 0xe1d0
   14580:	movw	r0, #46676	; 0xb654
   14584:	mov	r1, #4
   14588:	mov	r2, #1
   1458c:	movt	r4, #2
   14590:	movt	r0, #1
   14594:	ldr	r3, [r4]
   14598:	bl	11564 <fwrite@plt>
   1459c:	ldr	r0, [r4]
   145a0:	bl	1a4e0 <__assert_fail@plt+0x8cdc>
   145a4:	cmp	r0, #0
   145a8:	bne	146a0 <__assert_fail@plt+0x2e9c>
   145ac:	ldr	r0, [r6, #60]	; 0x3c
   145b0:	bl	117e0 <getc@plt>
   145b4:	mov	r4, r0
   145b8:	cmp	r0, #10
   145bc:	bne	145f4 <__assert_fail@plt+0x2df0>
   145c0:	b	14610 <__assert_fail@plt+0x2e0c>
   145c4:	movw	r0, #57808	; 0xe1d0
   145c8:	movt	r0, #2
   145cc:	ldr	r1, [r0]
   145d0:	mov	r0, #10
   145d4:	bl	11780 <putc@plt>
   145d8:	mov	r0, #0
   145dc:	sub	sp, fp, #28
   145e0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   145e4:	ldr	r0, [r6, #60]	; 0x3c
   145e8:	bl	117e0 <getc@plt>
   145ec:	cmp	r0, #10
   145f0:	beq	14610 <__assert_fail@plt+0x2e0c>
   145f4:	cmn	r0, #1
   145f8:	bne	145e4 <__assert_fail@plt+0x2de0>
   145fc:	bl	11684 <__errno_location@plt>
   14600:	ldr	r4, [r0]
   14604:	movw	r1, #46681	; 0xb659
   14608:	movt	r1, #1
   1460c:	b	146ec <__assert_fail@plt+0x2ee8>
   14610:	orr	r1, r4, #32
   14614:	mov	r0, #1
   14618:	cmp	r1, #121	; 0x79
   1461c:	movne	r0, #0
   14620:	sub	sp, fp, #28
   14624:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14628:	movw	sl, #57808	; 0xe1d0
   1462c:	movw	r8, #46598	; 0xb606
   14630:	mov	r4, #0
   14634:	movt	sl, #2
   14638:	movt	r8, #1
   1463c:	movw	r6, #46603	; 0xb60b
   14640:	movw	r0, #47291	; 0xb8bb
   14644:	cmp	r4, #0
   14648:	ldr	r7, [sl]
   1464c:	mov	r1, #3
   14650:	movt	r6, #1
   14654:	movt	r0, #1
   14658:	moveq	r6, r0
   1465c:	ldr	r0, [r5, #4]
   14660:	ldr	r2, [r0, r4, lsl #2]
   14664:	mov	r0, #0
   14668:	bl	18698 <__assert_fail@plt+0x6e94>
   1466c:	mov	r3, r0
   14670:	mov	r0, r7
   14674:	mov	r1, r8
   14678:	mov	r2, r6
   1467c:	bl	11678 <fprintf@plt>
   14680:	cmn	r0, #1
   14684:	ble	146a0 <__assert_fail@plt+0x2e9c>
   14688:	ldr	r0, [r5]
   1468c:	add	r4, r4, #1
   14690:	sub	r0, r0, #1
   14694:	cmp	r4, r0
   14698:	bcc	1463c <__assert_fail@plt+0x2e38>
   1469c:	b	1452c <__assert_fail@plt+0x2d28>
   146a0:	bl	11684 <__errno_location@plt>
   146a4:	ldr	r4, [r0]
   146a8:	movw	r1, #46605	; 0xb60d
   146ac:	movt	r1, #1
   146b0:	b	146ec <__assert_fail@plt+0x2ee8>
   146b4:	bl	11684 <__errno_location@plt>
   146b8:	mov	r5, r0
   146bc:	b	146d8 <__assert_fail@plt+0x2ed4>
   146c0:	bl	11684 <__errno_location@plt>
   146c4:	ldr	r7, [r0]
   146c8:	mov	r5, r0
   146cc:	mov	r0, r4
   146d0:	bl	117ec <close@plt>
   146d4:	str	r7, [r5]
   146d8:	mov	r0, #0
   146dc:	movw	r1, #46640	; 0xb630
   146e0:	str	r0, [r6, #60]	; 0x3c
   146e4:	movt	r1, #1
   146e8:	ldr	r4, [r5]
   146ec:	mov	r0, #0
   146f0:	mov	r2, #5
   146f4:	bl	114ec <dcgettext@plt>
   146f8:	mov	r2, r0
   146fc:	mov	r0, #1
   14700:	mov	r1, r4
   14704:	bl	115b8 <error@plt>
   14708:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1470c:	add	fp, sp, #28
   14710:	sub	sp, sp, #20
   14714:	movw	r4, #57984	; 0xe280
   14718:	mov	r6, r2
   1471c:	str	r1, [sp, #12]
   14720:	mov	r8, r0
   14724:	ldr	r5, [r0, #12]
   14728:	ldr	r0, [fp, #20]
   1472c:	ldr	r1, [fp, #12]
   14730:	ldr	r2, [fp, #8]
   14734:	mov	sl, r3
   14738:	movt	r4, #2
   1473c:	ldr	r7, [r4]
   14740:	cmp	r7, #0
   14744:	bne	1476c <__assert_fail@plt+0x2f68>
   14748:	add	r0, r5, #1
   1474c:	mov	r7, r1
   14750:	mov	r9, r2
   14754:	bl	1948c <__assert_fail@plt+0x7c88>
   14758:	mov	r1, r7
   1475c:	mov	r7, r0
   14760:	ldr	r0, [fp, #20]
   14764:	mov	r2, r9
   14768:	str	r7, [r4]
   1476c:	add	r0, r0, r1
   14770:	sub	r9, r5, #1
   14774:	cmp	r2, #0
   14778:	str	r0, [sp, #16]
   1477c:	beq	14840 <__assert_fail@plt+0x303c>
   14780:	ldr	r1, [r8, #24]
   14784:	mov	r0, r6
   14788:	mov	r4, r8
   1478c:	bl	15f5c <__assert_fail@plt+0x4758>
   14790:	cmp	r0, #0
   14794:	mov	r5, sl
   14798:	subne	r5, r0, r6
   1479c:	cmp	r9, r5
   147a0:	bls	148cc <__assert_fail@plt+0x30c8>
   147a4:	mov	r8, r0
   147a8:	mov	r0, r7
   147ac:	mov	r1, r6
   147b0:	mov	r2, r5
   147b4:	bl	116b4 <strncpy@plt>
   147b8:	sub	sl, sl, r5
   147bc:	add	r6, r6, r5
   147c0:	add	r7, r7, r5
   147c4:	sub	r9, r9, r5
   147c8:	cmp	r8, #0
   147cc:	beq	1482c <__assert_fail@plt+0x3028>
   147d0:	ldr	r5, [sp, #16]
   147d4:	mov	r8, r4
   147d8:	cmp	r9, r5
   147dc:	bls	148d0 <__assert_fail@plt+0x30cc>
   147e0:	ldr	r1, [fp, #8]
   147e4:	mov	r0, r7
   147e8:	bl	11594 <strcpy@plt>
   147ec:	ldr	r0, [fp, #12]
   147f0:	ldr	r1, [fp, #16]
   147f4:	mov	r4, r5
   147f8:	add	r5, r7, r0
   147fc:	mov	r0, r5
   14800:	bl	11594 <strcpy@plt>
   14804:	ldr	r0, [fp, #20]
   14808:	sub	r9, r9, r4
   1480c:	add	r7, r5, r0
   14810:	ldr	r0, [r8, #20]
   14814:	sub	sl, sl, r0
   14818:	add	r6, r6, r0
   1481c:	ldrb	r0, [r6]
   14820:	cmp	r0, #0
   14824:	bne	14780 <__assert_fail@plt+0x2f7c>
   14828:	b	148dc <__assert_fail@plt+0x30d8>
   1482c:	mov	r8, r4
   14830:	ldrb	r0, [r6]
   14834:	cmp	r0, #0
   14838:	bne	14780 <__assert_fail@plt+0x2f7c>
   1483c:	b	148dc <__assert_fail@plt+0x30d8>
   14840:	ldr	r1, [r8, #24]
   14844:	mov	r0, r6
   14848:	bl	15f5c <__assert_fail@plt+0x4758>
   1484c:	cmp	r0, #0
   14850:	mov	r4, sl
   14854:	subne	r4, r0, r6
   14858:	cmp	r9, r4
   1485c:	bls	148d0 <__assert_fail@plt+0x30cc>
   14860:	mov	r5, r0
   14864:	mov	r0, r7
   14868:	mov	r1, r6
   1486c:	mov	r2, r4
   14870:	bl	116b4 <strncpy@plt>
   14874:	sub	sl, sl, r4
   14878:	add	r6, r6, r4
   1487c:	add	r7, r7, r4
   14880:	sub	r9, r9, r4
   14884:	cmp	r5, #0
   14888:	beq	148bc <__assert_fail@plt+0x30b8>
   1488c:	ldr	r4, [sp, #16]
   14890:	cmp	r9, r4
   14894:	bls	148d0 <__assert_fail@plt+0x30cc>
   14898:	ldr	r1, [fp, #16]
   1489c:	mov	r0, r7
   148a0:	bl	11594 <strcpy@plt>
   148a4:	ldr	r0, [fp, #20]
   148a8:	sub	r9, r9, r4
   148ac:	add	r7, r7, r0
   148b0:	ldr	r0, [r8, #20]
   148b4:	sub	sl, sl, r0
   148b8:	add	r6, r6, r0
   148bc:	ldrb	r0, [r6]
   148c0:	cmp	r0, #0
   148c4:	bne	14840 <__assert_fail@plt+0x303c>
   148c8:	b	148dc <__assert_fail@plt+0x30d8>
   148cc:	mov	r8, r4
   148d0:	ldrb	r0, [r6]
   148d4:	cmp	r0, #0
   148d8:	bne	14918 <__assert_fail@plt+0x3114>
   148dc:	movw	r2, #57984	; 0xe280
   148e0:	mov	r1, #0
   148e4:	ldr	r0, [fp, #24]
   148e8:	strb	r1, [r7], #1
   148ec:	movt	r2, #2
   148f0:	str	r1, [sp]
   148f4:	str	r1, [sp, #4]
   148f8:	ldr	r1, [sp, #12]
   148fc:	ldr	r2, [r2]
   14900:	str	r0, [sp, #8]
   14904:	mov	r0, r8
   14908:	sub	r3, r7, r2
   1490c:	bl	1493c <__assert_fail@plt+0x3138>
   14910:	sub	sp, fp, #28
   14914:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14918:	movw	r1, #50292	; 0xc474
   1491c:	mov	r0, #0
   14920:	mov	r2, #5
   14924:	movt	r1, #1
   14928:	bl	114ec <dcgettext@plt>
   1492c:	mov	r2, r0
   14930:	mov	r0, #1
   14934:	mov	r1, #0
   14938:	bl	115b8 <error@plt>
   1493c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14940:	add	fp, sp, #28
   14944:	sub	sp, sp, #4
   14948:	cmp	r2, #0
   1494c:	beq	14b68 <__assert_fail@plt+0x3364>
   14950:	mov	r5, r0
   14954:	ldr	r6, [fp, #16]
   14958:	ldr	r0, [fp, #12]
   1495c:	movw	sl, #51131	; 0xc7bb
   14960:	mov	r9, r3
   14964:	mov	r8, r2
   14968:	mov	r4, r1
   1496c:	movt	sl, #1
   14970:	cmp	r2, sl
   14974:	beq	14a34 <__assert_fail@plt+0x3230>
   14978:	ldr	r1, [r4, #16]
   1497c:	add	r0, r0, r9
   14980:	add	r0, r0, r1
   14984:	ldr	r1, [r5, #12]
   14988:	cmp	r0, r1
   1498c:	bls	149f0 <__assert_fail@plt+0x31ec>
   14990:	cmp	r6, #0
   14994:	bne	14b88 <__assert_fail@plt+0x3384>
   14998:	ldr	r0, [r5, #28]
   1499c:	ldr	r1, [r4]
   149a0:	cmp	r1, r0
   149a4:	beq	14b88 <__assert_fail@plt+0x3384>
   149a8:	ldr	r0, [r5, #24]
   149ac:	cmp	r0, #0
   149b0:	bne	14b94 <__assert_fail@plt+0x3390>
   149b4:	ldr	r0, [r5]
   149b8:	cmp	r0, #0
   149bc:	beq	149d4 <__assert_fail@plt+0x31d0>
   149c0:	ldr	r0, [r5, #36]	; 0x24
   149c4:	cmp	r0, #0
   149c8:	ldreq	r0, [r5, #40]	; 0x28
   149cc:	cmpeq	r0, #0
   149d0:	bne	14b94 <__assert_fail@plt+0x3390>
   149d4:	mov	r0, r5
   149d8:	mov	r1, r4
   149dc:	bl	14bb8 <__assert_fail@plt+0x33b4>
   149e0:	ldr	r0, [r5, #40]	; 0x28
   149e4:	cmp	r0, #0
   149e8:	bne	14a04 <__assert_fail@plt+0x3200>
   149ec:	b	14a18 <__assert_fail@plt+0x3214>
   149f0:	cmp	r6, #0
   149f4:	bne	14a18 <__assert_fail@plt+0x3214>
   149f8:	ldr	r0, [r5, #40]	; 0x28
   149fc:	cmp	r0, #0
   14a00:	beq	14a18 <__assert_fail@plt+0x3214>
   14a04:	ldr	r1, [r5, #28]
   14a08:	ldr	r2, [r4]
   14a0c:	sub	r1, r2, r1
   14a10:	cmp	r1, r0
   14a14:	beq	14a28 <__assert_fail@plt+0x3224>
   14a18:	ldr	r0, [r5, #16]
   14a1c:	ldr	r1, [r4]
   14a20:	cmp	r1, r0
   14a24:	bne	14a34 <__assert_fail@plt+0x3230>
   14a28:	mov	r0, r5
   14a2c:	mov	r1, r4
   14a30:	bl	14bb8 <__assert_fail@plt+0x33b4>
   14a34:	cmp	r6, #0
   14a38:	moveq	r0, #1
   14a3c:	streq	r0, [r4, #28]
   14a40:	ldr	r0, [r4]
   14a44:	ldr	r1, [r4, #8]
   14a48:	cmp	r0, r1
   14a4c:	bcc	14a84 <__assert_fail@plt+0x3280>
   14a50:	ldr	r0, [r4, #4]
   14a54:	cmp	r0, #0
   14a58:	beq	14a70 <__assert_fail@plt+0x326c>
   14a5c:	lsl	r2, r1, #1
   14a60:	lsl	r1, r1, #3
   14a64:	str	r2, [r4, #8]
   14a68:	bl	194d4 <__assert_fail@plt+0x7cd0>
   14a6c:	b	14a80 <__assert_fail@plt+0x327c>
   14a70:	mov	r0, #64	; 0x40
   14a74:	str	r0, [r4, #8]
   14a78:	mov	r0, #256	; 0x100
   14a7c:	bl	1948c <__assert_fail@plt+0x7c88>
   14a80:	str	r0, [r4, #4]
   14a84:	cmp	r8, sl
   14a88:	beq	14b10 <__assert_fail@plt+0x330c>
   14a8c:	ldm	r4, {r2, r3}
   14a90:	mov	sl, r6
   14a94:	ldr	r1, [fp, #8]
   14a98:	ldr	r6, [r4, #12]
   14a9c:	ldr	r0, [r4, #16]
   14aa0:	add	r7, r2, #1
   14aa4:	cmp	r1, #0
   14aa8:	str	r7, [r4]
   14aac:	add	r7, r6, r0
   14ab0:	str	r7, [r3, r2, lsl #2]
   14ab4:	beq	14ad4 <__assert_fail@plt+0x32d0>
   14ab8:	ldr	r2, [r4, #12]
   14abc:	add	r0, r2, r0
   14ac0:	bl	11594 <strcpy@plt>
   14ac4:	ldr	r0, [r4, #16]
   14ac8:	ldr	r1, [fp, #12]
   14acc:	add	r0, r0, r1
   14ad0:	str	r0, [r4, #16]
   14ad4:	ldr	r1, [r4, #12]
   14ad8:	mov	r6, sl
   14adc:	add	r0, r1, r0
   14ae0:	mov	r1, r8
   14ae4:	bl	11594 <strcpy@plt>
   14ae8:	ldr	r0, [r4, #16]
   14aec:	cmp	sl, #0
   14af0:	add	r0, r0, r9
   14af4:	str	r0, [r4, #16]
   14af8:	beq	14b28 <__assert_fail@plt+0x3324>
   14afc:	ldr	r0, [r5, #16]
   14b00:	ldr	r1, [r4]
   14b04:	cmp	r1, r0
   14b08:	beq	14b48 <__assert_fail@plt+0x3344>
   14b0c:	b	14b54 <__assert_fail@plt+0x3350>
   14b10:	ldm	r4, {r0, r1}
   14b14:	add	r2, r0, #1
   14b18:	str	r2, [r4]
   14b1c:	mov	r2, #0
   14b20:	str	r2, [r1, r0, lsl #2]
   14b24:	b	14b54 <__assert_fail@plt+0x3350>
   14b28:	ldr	r0, [r5, #40]	; 0x28
   14b2c:	cmp	r0, #0
   14b30:	beq	14afc <__assert_fail@plt+0x32f8>
   14b34:	ldr	r1, [r5, #28]
   14b38:	ldr	r2, [r4]
   14b3c:	sub	r1, r2, r1
   14b40:	cmp	r1, r0
   14b44:	bne	14afc <__assert_fail@plt+0x32f8>
   14b48:	mov	r0, r5
   14b4c:	mov	r1, r4
   14b50:	bl	14bb8 <__assert_fail@plt+0x33b4>
   14b54:	cmp	r6, #0
   14b58:	ldrne	r0, [r4, #16]
   14b5c:	strne	r0, [r4, #20]
   14b60:	sub	sp, fp, #28
   14b64:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14b68:	movw	r0, #50503	; 0xc547
   14b6c:	movw	r1, #50329	; 0xc499
   14b70:	movw	r3, #50515	; 0xc553
   14b74:	movw	r2, #341	; 0x155
   14b78:	movt	r0, #1
   14b7c:	movt	r1, #1
   14b80:	movt	r3, #1
   14b84:	bl	11804 <__assert_fail@plt>
   14b88:	movw	r1, #50633	; 0xc5c9
   14b8c:	movt	r1, #1
   14b90:	b	14b9c <__assert_fail@plt+0x3398>
   14b94:	movw	r1, #50692	; 0xc604
   14b98:	movt	r1, #1
   14b9c:	mov	r0, #0
   14ba0:	mov	r2, #5
   14ba4:	bl	114ec <dcgettext@plt>
   14ba8:	mov	r2, r0
   14bac:	mov	r0, #1
   14bb0:	mov	r1, #0
   14bb4:	bl	115b8 <error@plt>
   14bb8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14bbc:	add	fp, sp, #28
   14bc0:	sub	sp, sp, #12
   14bc4:	mov	r9, r0
   14bc8:	mov	r0, #1
   14bcc:	mov	r8, r1
   14bd0:	str	r0, [r1, #28]
   14bd4:	ldr	r2, [r1]
   14bd8:	ldmib	r1, {r0, r1}
   14bdc:	cmp	r2, r1
   14be0:	bcc	14c14 <__assert_fail@plt+0x3410>
   14be4:	cmp	r0, #0
   14be8:	beq	14c00 <__assert_fail@plt+0x33fc>
   14bec:	lsl	r2, r1, #1
   14bf0:	lsl	r1, r1, #3
   14bf4:	str	r2, [r8, #8]
   14bf8:	bl	194d4 <__assert_fail@plt+0x7cd0>
   14bfc:	b	14c10 <__assert_fail@plt+0x340c>
   14c00:	mov	r0, #64	; 0x40
   14c04:	str	r0, [r8, #8]
   14c08:	mov	r0, #256	; 0x100
   14c0c:	bl	1948c <__assert_fail@plt+0x7c88>
   14c10:	str	r0, [r8, #4]
   14c14:	ldr	r2, [r8]
   14c18:	mov	r3, #0
   14c1c:	adds	r1, r2, #1
   14c20:	str	r1, [r8]
   14c24:	str	r3, [r0, r2, lsl #2]
   14c28:	beq	14f70 <__assert_fail@plt+0x376c>
   14c2c:	ldr	r0, [r8, #4]
   14c30:	ldr	r0, [r0, r2, lsl #2]
   14c34:	cmp	r0, #0
   14c38:	bne	14f90 <__assert_fail@plt+0x378c>
   14c3c:	mov	r0, #4
   14c40:	add	r0, r0, r1, lsl #2
   14c44:	bl	1948c <__assert_fail@plt+0x7c88>
   14c48:	ldr	r1, [r8]
   14c4c:	mov	sl, r0
   14c50:	ldr	r0, [r9, #28]
   14c54:	mov	lr, #0
   14c58:	str	r9, [sp, #4]
   14c5c:	mov	r5, r1
   14c60:	cmp	r0, #0
   14c64:	beq	14cd4 <__assert_fail@plt+0x34d0>
   14c68:	ldr	ip, [r8, #4]
   14c6c:	mov	r4, #0
   14c70:	cmp	r0, #4
   14c74:	bcc	14cb8 <__assert_fail@plt+0x34b4>
   14c78:	add	r2, ip, r0, lsl #2
   14c7c:	cmp	sl, r2
   14c80:	bcs	14c90 <__assert_fail@plt+0x348c>
   14c84:	add	r2, sl, r0, lsl #2
   14c88:	cmp	r2, ip
   14c8c:	bhi	14cb8 <__assert_fail@plt+0x34b4>
   14c90:	bic	r4, r0, #3
   14c94:	mov	r6, sl
   14c98:	mov	r2, ip
   14c9c:	mov	r3, r4
   14ca0:	vld1.32	{d16-d17}, [r2]!
   14ca4:	subs	r3, r3, #4
   14ca8:	vst1.32	{d16-d17}, [r6]!
   14cac:	bne	14ca0 <__assert_fail@plt+0x349c>
   14cb0:	cmp	r0, r4
   14cb4:	beq	14cd4 <__assert_fail@plt+0x34d0>
   14cb8:	sub	r7, r0, r4
   14cbc:	add	r2, ip, r4, lsl #2
   14cc0:	add	r3, sl, r4, lsl #2
   14cc4:	ldr	r6, [r2], #4
   14cc8:	subs	r7, r7, #1
   14ccc:	str	r6, [r3], #4
   14cd0:	bne	14cc4 <__assert_fail@plt+0x34c0>
   14cd4:	cmp	r0, r5
   14cd8:	mov	r7, r0
   14cdc:	str	lr, [sp, #8]
   14ce0:	bcs	14dac <__assert_fail@plt+0x35a8>
   14ce4:	add	r2, r0, lr
   14ce8:	mov	r7, r0
   14cec:	cmp	r2, r1
   14cf0:	bcs	14dac <__assert_fail@plt+0x35a8>
   14cf4:	add	lr, r0, lr
   14cf8:	sub	r7, r0, r5
   14cfc:	sub	r4, lr, r1
   14d00:	mov	r3, r7
   14d04:	cmp	r4, r7
   14d08:	movhi	r3, r4
   14d0c:	rsb	ip, r3, #0
   14d10:	ldr	r3, [r8, #4]
   14d14:	cmp	ip, #4
   14d18:	bcs	14d24 <__assert_fail@plt+0x3520>
   14d1c:	mov	r7, r0
   14d20:	b	14d90 <__assert_fail@plt+0x358c>
   14d24:	cmp	r4, r7
   14d28:	movhi	r7, r4
   14d2c:	sub	r4, lr, r7
   14d30:	add	r6, r3, r4, lsl #2
   14d34:	add	r4, sl, r0, lsl #2
   14d38:	cmp	r4, r6
   14d3c:	bcs	14d60 <__assert_fail@plt+0x355c>
   14d40:	lsl	r6, r0, #2
   14d44:	sub	r6, r6, r7, lsl #2
   14d48:	add	r7, r3, r2, lsl #2
   14d4c:	add	r6, sl, r6
   14d50:	cmp	r6, r7
   14d54:	bls	14d60 <__assert_fail@plt+0x355c>
   14d58:	mov	r7, r0
   14d5c:	b	14d90 <__assert_fail@plt+0x358c>
   14d60:	bic	r6, ip, #3
   14d64:	add	r9, r3, lr, lsl #2
   14d68:	add	r7, r0, r6
   14d6c:	add	r2, r2, r6
   14d70:	mov	lr, r6
   14d74:	vld1.32	{d16-d17}, [r9]!
   14d78:	subs	lr, lr, #4
   14d7c:	vst1.32	{d16-d17}, [r4]!
   14d80:	bne	14d74 <__assert_fail@plt+0x3570>
   14d84:	ldr	r9, [sp, #4]
   14d88:	cmp	r6, ip
   14d8c:	beq	14dac <__assert_fail@plt+0x35a8>
   14d90:	ldr	r6, [r3, r2, lsl #2]
   14d94:	add	r2, r2, #1
   14d98:	cmp	r2, r1
   14d9c:	str	r6, [sl, r7, lsl #2]
   14da0:	add	r7, r7, #1
   14da4:	cmpcc	r7, r5
   14da8:	bcc	14d90 <__assert_fail@plt+0x358c>
   14dac:	cmp	r7, r0
   14db0:	bcc	14f2c <__assert_fail@plt+0x3728>
   14db4:	mov	r0, #0
   14db8:	mov	r2, r7
   14dbc:	mov	r3, sl
   14dc0:	str	r0, [sl, r7, lsl #2]
   14dc4:	mov	r0, r9
   14dc8:	ldr	r1, [r8, #24]
   14dcc:	ldr	r6, [r9, #32]
   14dd0:	blx	r6
   14dd4:	cmp	r0, #0
   14dd8:	beq	14e04 <__assert_fail@plt+0x3600>
   14ddc:	ldr	r0, [r8, #36]	; 0x24
   14de0:	cmp	r0, r5
   14de4:	bcs	14e44 <__assert_fail@plt+0x3640>
   14de8:	ldr	r3, [sp, #8]
   14dec:	str	r5, [r8, #36]	; 0x24
   14df0:	mov	r0, r5
   14df4:	ldr	r1, [r8, #40]	; 0x28
   14df8:	cmp	r1, r0
   14dfc:	bhi	14e5c <__assert_fail@plt+0x3658>
   14e00:	b	14e88 <__assert_fail@plt+0x3684>
   14e04:	ldr	r0, [r9, #28]
   14e08:	add	r2, r0, #1
   14e0c:	cmp	r5, r2
   14e10:	bls	14f4c <__assert_fail@plt+0x3748>
   14e14:	ldr	r1, [r8, #40]	; 0x28
   14e18:	ldr	lr, [sp, #8]
   14e1c:	sub	r3, r1, #1
   14e20:	cmp	r3, r5
   14e24:	strcs	r5, [r8, #40]	; 0x28
   14e28:	movcs	r1, r5
   14e2c:	ldr	r3, [r8, #36]	; 0x24
   14e30:	cmp	r3, #0
   14e34:	cmpne	r1, r3
   14e38:	bhi	14eb4 <__assert_fail@plt+0x36b0>
   14e3c:	lsr	r1, r5, #1
   14e40:	b	14ecc <__assert_fail@plt+0x36c8>
   14e44:	ldr	r3, [sp, #8]
   14e48:	cmp	r0, #0
   14e4c:	beq	14e88 <__assert_fail@plt+0x3684>
   14e50:	ldr	r1, [r8, #40]	; 0x28
   14e54:	cmp	r1, r0
   14e58:	bls	14e88 <__assert_fail@plt+0x3684>
   14e5c:	sub	r0, r1, r0
   14e60:	mov	r1, #0
   14e64:	cmp	r1, r0, lsr #1
   14e68:	addeq	r5, r5, #1
   14e6c:	lsrne	r0, r0, #1
   14e70:	addne	r5, r0, r5
   14e74:	ldr	r0, [r9, #28]
   14e78:	cmp	r0, #0
   14e7c:	bne	14e9c <__assert_fail@plt+0x3698>
   14e80:	mov	r2, r5
   14e84:	b	14ea8 <__assert_fail@plt+0x36a4>
   14e88:	cmn	r5, #1
   14e8c:	addne	r5, r5, #1
   14e90:	ldr	r0, [r9, #28]
   14e94:	cmp	r0, #0
   14e98:	beq	14e80 <__assert_fail@plt+0x367c>
   14e9c:	add	r2, r0, #1
   14ea0:	cmp	r5, r2
   14ea4:	movhi	r2, r5
   14ea8:	add	r1, r7, r3
   14eac:	sub	lr, r1, r0
   14eb0:	b	14edc <__assert_fail@plt+0x36d8>
   14eb4:	sub	r1, r1, r3
   14eb8:	mov	r3, #0
   14ebc:	cmp	r3, r1, lsr #1
   14ec0:	subeq	r1, r5, #1
   14ec4:	lsrne	r1, r1, #1
   14ec8:	subne	r1, r5, r1
   14ecc:	cmp	r1, r2
   14ed0:	movhi	r2, r1
   14ed4:	cmp	r0, #0
   14ed8:	moveq	r2, r1
   14edc:	ldr	r1, [r8]
   14ee0:	cmp	r2, #0
   14ee4:	add	r7, lr, #1
   14ee8:	movweq	r2, #1
   14eec:	mov	r5, r2
   14ef0:	sub	r3, r1, r0
   14ef4:	cmp	r7, r3
   14ef8:	bcc	14c60 <__assert_fail@plt+0x345c>
   14efc:	mov	r0, sl
   14f00:	bl	1a584 <__assert_fail@plt+0x8d80>
   14f04:	ldr	r0, [r9, #28]
   14f08:	mov	r1, #0
   14f0c:	mvn	r2, #0
   14f10:	str	r1, [r8, #28]
   14f14:	str	r2, [r8, #32]
   14f18:	str	r0, [r8]
   14f1c:	ldr	r0, [r8, #20]
   14f20:	str	r0, [r8, #16]
   14f24:	sub	sp, fp, #28
   14f28:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14f2c:	movw	r0, #51008	; 0xc740
   14f30:	movw	r1, #50329	; 0xc499
   14f34:	movw	r3, #51037	; 0xc75d
   14f38:	mov	r2, #242	; 0xf2
   14f3c:	movt	r0, #1
   14f40:	movt	r1, #1
   14f44:	movt	r3, #1
   14f48:	bl	11804 <__assert_fail@plt>
   14f4c:	movw	r1, #50451	; 0xc513
   14f50:	mov	r0, #0
   14f54:	mov	r2, #5
   14f58:	movt	r1, #1
   14f5c:	bl	114ec <dcgettext@plt>
   14f60:	mov	r2, r0
   14f64:	mov	r0, #1
   14f68:	mov	r1, #0
   14f6c:	bl	115b8 <error@plt>
   14f70:	movw	r0, #50309	; 0xc485
   14f74:	movw	r1, #50329	; 0xc499
   14f78:	movw	r3, #50340	; 0xc4a4
   14f7c:	movw	r2, #261	; 0x105
   14f80:	movt	r0, #1
   14f84:	movt	r1, #1
   14f88:	movt	r3, #1
   14f8c:	bl	11804 <__assert_fail@plt>
   14f90:	movw	r0, #50408	; 0xc4e8
   14f94:	movw	r1, #50329	; 0xc499
   14f98:	movw	r3, #50340	; 0xc4a4
   14f9c:	movw	r2, #262	; 0x106
   14fa0:	movt	r0, #1
   14fa4:	movt	r1, #1
   14fa8:	movt	r3, #1
   14fac:	bl	11804 <__assert_fail@plt>
   14fb0:	ldr	r0, [r0, #28]
   14fb4:	mov	r2, #0
   14fb8:	mvn	r3, #0
   14fbc:	str	r2, [r1, #28]
   14fc0:	str	r3, [r1, #32]
   14fc4:	str	r0, [r1]
   14fc8:	ldr	r0, [r1, #20]
   14fcc:	str	r0, [r1, #16]
   14fd0:	bx	lr
   14fd4:	push	{fp, lr}
   14fd8:	mov	fp, sp
   14fdc:	mov	r0, #0
   14fe0:	bl	114f8 <sysconf@plt>
   14fe4:	cmp	r0, #0
   14fe8:	mvnle	r0, #-2147483648	; 0x80000000
   14fec:	pop	{fp, pc}
   14ff0:	push	{r4, r5, fp, lr}
   14ff4:	add	fp, sp, #8
   14ff8:	movw	r0, #57788	; 0xe1bc
   14ffc:	movt	r0, #2
   15000:	ldr	r1, [r0]
   15004:	ldr	r0, [r1]
   15008:	cmp	r0, #0
   1500c:	moveq	r4, #0
   15010:	moveq	r0, r4
   15014:	popeq	{r4, r5, fp, pc}
   15018:	add	r5, r1, #4
   1501c:	mov	r4, #0
   15020:	bl	11654 <strlen@plt>
   15024:	add	r0, r4, r0
   15028:	add	r4, r0, #1
   1502c:	ldr	r0, [r5], #4
   15030:	cmp	r0, #0
   15034:	bne	15020 <__assert_fail@plt+0x381c>
   15038:	mov	r0, r4
   1503c:	pop	{r4, r5, fp, pc}
   15040:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   15044:	add	fp, sp, #24
   15048:	mov	r4, r0
   1504c:	movw	r0, #57788	; 0xe1bc
   15050:	mov	r5, r1
   15054:	mov	r8, #0
   15058:	mov	r6, #0
   1505c:	movt	r0, #2
   15060:	ldr	r1, [r0]
   15064:	ldr	r0, [r1]
   15068:	cmp	r0, #0
   1506c:	beq	15090 <__assert_fail@plt+0x388c>
   15070:	add	r7, r1, #4
   15074:	mov	r6, #0
   15078:	bl	11654 <strlen@plt>
   1507c:	add	r0, r6, r0
   15080:	add	r6, r0, #1
   15084:	ldr	r0, [r7], #4
   15088:	cmp	r0, #0
   1508c:	bne	15078 <__assert_fail@plt+0x3874>
   15090:	mov	r0, #4096	; 0x1000
   15094:	str	r0, [r4, #8]
   15098:	mov	r0, #0
   1509c:	bl	114f8 <sysconf@plt>
   150a0:	mov	r1, r0
   150a4:	cmp	r0, #0
   150a8:	mov	r0, #1
   150ac:	str	r8, [r4]
   150b0:	mvnle	r1, #-2147483648	; 0x80000000
   150b4:	cmp	r1, r6
   150b8:	str	r1, [r4, #4]
   150bc:	bcc	15118 <__assert_fail@plt+0x3914>
   150c0:	add	r2, r6, r5
   150c4:	mov	r0, #2
   150c8:	cmp	r2, r1
   150cc:	popcs	{r4, r5, r6, r7, r8, sl, fp, pc}
   150d0:	sub	r0, r1, r6
   150d4:	sub	r1, r0, r5
   150d8:	mvn	r0, #1
   150dc:	add	r0, r0, r1, lsr #2
   150e0:	str	r1, [r4, #4]
   150e4:	cmp	r0, #0
   150e8:	str	r0, [r4, #16]
   150ec:	beq	1511c <__assert_fail@plt+0x3918>
   150f0:	movw	r2, #20796	; 0x513c
   150f4:	mov	r0, #0
   150f8:	movt	r2, #1
   150fc:	str	r0, [r4, #20]
   15100:	str	r0, [r4, #24]
   15104:	str	r0, [r4, #28]
   15108:	str	r2, [r4, #32]
   1510c:	str	r0, [r4, #36]	; 0x24
   15110:	str	r0, [r4, #40]	; 0x28
   15114:	str	r1, [r4, #12]
   15118:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1511c:	movw	r0, #50715	; 0xc61b
   15120:	movw	r1, #50329	; 0xc499
   15124:	movw	r3, #50738	; 0xc632
   15128:	movw	r2, #518	; 0x206
   1512c:	movt	r0, #1
   15130:	movt	r1, #1
   15134:	movt	r3, #1
   15138:	bl	11804 <__assert_fail@plt>
   1513c:	mov	r0, #0
   15140:	bx	lr
   15144:	ldr	r1, [r0, #4]
   15148:	mov	r2, #0
   1514c:	cmp	r2, r1, lsr #17
   15150:	beq	15160 <__assert_fail@plt+0x395c>
   15154:	ldr	r1, [r0, #8]
   15158:	cmp	r1, #131072	; 0x20000
   1515c:	movls	r1, #131072	; 0x20000
   15160:	str	r1, [r0, #12]
   15164:	bx	lr
   15168:	push	{r4, r5, r6, sl, fp, lr}
   1516c:	add	fp, sp, #16
   15170:	mov	r6, #0
   15174:	mov	r4, r1
   15178:	str	r6, [r1, #16]
   1517c:	str	r6, [r1]
   15180:	str	r6, [r1, #4]
   15184:	str	r6, [r1, #8]
   15188:	str	r6, [r1, #36]	; 0x24
   1518c:	str	r6, [r1, #40]	; 0x28
   15190:	movw	r1, #63488	; 0xf800
   15194:	ldr	r0, [r0, #12]
   15198:	movt	r1, #32767	; 0x7fff
   1519c:	cmp	r0, r1
   151a0:	bcs	151d0 <__assert_fail@plt+0x39cc>
   151a4:	add	r0, r0, #1
   151a8:	mov	r5, r2
   151ac:	bl	1948c <__assert_fail@plt+0x7c88>
   151b0:	mvn	r1, #0
   151b4:	str	r0, [r4, #12]
   151b8:	str	r6, [r4, #16]
   151bc:	str	r6, [r4, #20]
   151c0:	str	r5, [r4, #24]
   151c4:	str	r6, [r4, #28]
   151c8:	str	r1, [r4, #32]
   151cc:	pop	{r4, r5, r6, sl, fp, pc}
   151d0:	movw	r0, #50813	; 0xc67d
   151d4:	movw	r1, #50329	; 0xc499
   151d8:	movw	r3, #50848	; 0xc6a0
   151dc:	mov	r2, #572	; 0x23c
   151e0:	movt	r0, #1
   151e4:	movt	r1, #1
   151e8:	movt	r3, #1
   151ec:	bl	11804 <__assert_fail@plt>
   151f0:	push	{r4, r5, r6, sl, fp, lr}
   151f4:	add	fp, sp, #16
   151f8:	sub	sp, sp, #16
   151fc:	mov	r1, r0
   15200:	ldr	r0, [r0]
   15204:	cmp	r0, #0
   15208:	beq	15234 <__assert_fail@plt+0x3a30>
   1520c:	add	r6, r1, #4
   15210:	mov	r5, #0
   15214:	mov	r4, #0
   15218:	bl	11654 <strlen@plt>
   1521c:	add	r4, r0, r4
   15220:	ldr	r0, [r6, r5, lsl #2]
   15224:	add	r5, r5, #1
   15228:	cmp	r0, #0
   1522c:	bne	15218 <__assert_fail@plt+0x3a14>
   15230:	b	1523c <__assert_fail@plt+0x3a38>
   15234:	mov	r4, #0
   15238:	mov	r5, #0
   1523c:	movw	r0, #50933	; 0xc6f5
   15240:	movt	r0, #1
   15244:	bl	115dc <getenv@plt>
   15248:	cmp	r0, #0
   1524c:	beq	15280 <__assert_fail@plt+0x3a7c>
   15250:	mov	r1, #0
   15254:	add	r3, sp, #8
   15258:	mov	r2, #10
   1525c:	str	r1, [sp]
   15260:	add	r1, sp, #12
   15264:	bl	19a30 <__assert_fail@plt+0x822c>
   15268:	cmp	r0, #0
   1526c:	bne	152d8 <__assert_fail@plt+0x3ad4>
   15270:	ldr	r1, [sp, #8]
   15274:	mov	r0, #1
   15278:	cmp	r1, r5
   1527c:	bcc	152c4 <__assert_fail@plt+0x3ac0>
   15280:	movw	r0, #50970	; 0xc71a
   15284:	movt	r0, #1
   15288:	bl	115dc <getenv@plt>
   1528c:	cmp	r0, #0
   15290:	beq	152cc <__assert_fail@plt+0x3ac8>
   15294:	mov	r1, #0
   15298:	add	r3, sp, #8
   1529c:	mov	r2, #10
   152a0:	str	r1, [sp]
   152a4:	add	r1, sp, #12
   152a8:	bl	19a30 <__assert_fail@plt+0x822c>
   152ac:	cmp	r0, #0
   152b0:	bne	1530c <__assert_fail@plt+0x3b08>
   152b4:	ldr	r1, [sp, #8]
   152b8:	mov	r0, #1
   152bc:	cmp	r1, r4
   152c0:	movcs	r0, #0
   152c4:	sub	sp, fp, #16
   152c8:	pop	{r4, r5, r6, sl, fp, pc}
   152cc:	mov	r0, #0
   152d0:	sub	sp, fp, #16
   152d4:	pop	{r4, r5, r6, sl, fp, pc}
   152d8:	bl	11684 <__errno_location@plt>
   152dc:	ldr	r4, [r0]
   152e0:	movw	r1, #51143	; 0xc7c7
   152e4:	mov	r0, #0
   152e8:	mov	r2, #5
   152ec:	movt	r1, #1
   152f0:	bl	114ec <dcgettext@plt>
   152f4:	movw	r3, #50933	; 0xc6f5
   152f8:	mov	r2, r0
   152fc:	movt	r3, #1
   15300:	mov	r0, #1
   15304:	mov	r1, r4
   15308:	bl	115b8 <error@plt>
   1530c:	bl	11684 <__errno_location@plt>
   15310:	ldr	r4, [r0]
   15314:	movw	r1, #51143	; 0xc7c7
   15318:	mov	r0, #0
   1531c:	mov	r2, #5
   15320:	movt	r1, #1
   15324:	bl	114ec <dcgettext@plt>
   15328:	movw	r3, #50970	; 0xc71a
   1532c:	mov	r2, r0
   15330:	movt	r3, #1
   15334:	mov	r0, #1
   15338:	mov	r1, r4
   1533c:	bl	115b8 <error@plt>
   15340:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15344:	add	fp, sp, #28
   15348:	sub	sp, sp, #540	; 0x21c
   1534c:	bl	15490 <__assert_fail@plt+0x3c8c>
   15350:	cmn	r0, #-2147483647	; 0x80000001
   15354:	mov	r5, #0
   15358:	addne	r0, r0, #1
   1535c:	str	r5, [sp, #20]
   15360:	str	r5, [sp, #12]
   15364:	str	r5, [sp, #16]
   15368:	cmp	r0, #1
   1536c:	str	r0, [sp, #4]
   15370:	blt	15474 <__assert_fail@plt+0x3c70>
   15374:	add	r0, sp, #12
   15378:	add	r6, sp, #24
   1537c:	mov	sl, #5
   15380:	add	r0, r0, #8
   15384:	str	r0, [sp, #8]
   15388:	ldr	r0, [sp, #4]
   1538c:	sub	r4, r0, r5
   15390:	cmp	r4, #64	; 0x40
   15394:	mov	r7, r4
   15398:	movge	r7, #64	; 0x40
   1539c:	cmp	r4, #1
   153a0:	blt	153cc <__assert_fail@plt+0x3bc8>
   153a4:	mov	r0, #0
   153a8:	mov	r1, #0
   153ac:	add	r2, r6, r0
   153b0:	add	r0, r0, #8
   153b4:	str	sl, [r2, #4]
   153b8:	add	r2, r5, r1
   153bc:	str	r2, [r6, r1, lsl #3]
   153c0:	add	r1, r1, #1
   153c4:	cmp	r1, r7
   153c8:	blt	153ac <__assert_fail@plt+0x3ba8>
   153cc:	mov	r0, r6
   153d0:	mov	r1, r7
   153d4:	mov	r2, #0
   153d8:	bl	1154c <poll@plt>
   153dc:	cmn	r0, #1
   153e0:	beq	15474 <__assert_fail@plt+0x3c70>
   153e4:	cmp	r4, #1
   153e8:	blt	15464 <__assert_fail@plt+0x3c60>
   153ec:	mov	r8, #0
   153f0:	mov	r9, #6
   153f4:	add	r0, r6, r9
   153f8:	ldrh	r0, [r0]
   153fc:	cmp	r0, #32
   15400:	beq	15454 <__assert_fail@plt+0x3c50>
   15404:	ldr	r4, [r6, r8, lsl #3]
   15408:	mov	r1, #1
   1540c:	mov	r0, r4
   15410:	bl	1a300 <__assert_fail@plt+0x8afc>
   15414:	tst	r0, #1
   15418:	bne	15454 <__assert_fail@plt+0x3c50>
   1541c:	ldr	r1, [sp, #16]
   15420:	mov	r2, #4
   15424:	ldr	r0, [sp, #12]
   15428:	add	r1, r2, r1, lsl #2
   1542c:	ldr	r2, [sp, #8]
   15430:	bl	15ad4 <__assert_fail@plt+0x42d0>
   15434:	cmp	r0, #0
   15438:	beq	15474 <__assert_fail@plt+0x3c70>
   1543c:	str	r0, [sp, #12]
   15440:	ldr	r1, [sp, #16]
   15444:	str	r4, [r0, r1, lsl #2]
   15448:	ldr	r0, [sp, #16]
   1544c:	add	r0, r0, #1
   15450:	str	r0, [sp, #16]
   15454:	add	r8, r8, #1
   15458:	add	r9, r9, #8
   1545c:	cmp	r8, r7
   15460:	blt	153f4 <__assert_fail@plt+0x3bf0>
   15464:	ldr	r0, [sp, #4]
   15468:	add	r5, r7, r5
   1546c:	cmp	r5, r0
   15470:	blt	15388 <__assert_fail@plt+0x3b84>
   15474:	ldr	r0, [sp, #12]
   15478:	ldr	r1, [sp, #16]
   1547c:	movw	r2, #57988	; 0xe284
   15480:	movt	r2, #2
   15484:	stmib	r2, {r0, r1}
   15488:	sub	sp, fp, #28
   1548c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15490:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   15494:	add	fp, sp, #24
   15498:	sub	sp, sp, #16
   1549c:	movw	r0, #51438	; 0xc8ee
   154a0:	movt	r0, #1
   154a4:	bl	15e80 <__assert_fail@plt+0x467c>
   154a8:	cmp	r0, #0
   154ac:	beq	15578 <__assert_fail@plt+0x3d74>
   154b0:	mov	r4, r0
   154b4:	bl	11684 <__errno_location@plt>
   154b8:	mov	r7, #0
   154bc:	mov	r6, r0
   154c0:	str	r7, [r0]
   154c4:	mov	r0, r4
   154c8:	bl	11768 <readdir64@plt>
   154cc:	cmp	r0, #0
   154d0:	beq	155bc <__assert_fail@plt+0x3db8>
   154d4:	mov	r8, #0
   154d8:	mvn	r5, #0
   154dc:	mov	r7, #0
   154e0:	mov	r1, r0
   154e4:	ldrb	r2, [r1, #19]!
   154e8:	cmp	r2, #46	; 0x2e
   154ec:	bne	1550c <__assert_fail@plt+0x3d08>
   154f0:	ldrb	r2, [r0, #20]
   154f4:	cmp	r2, #0
   154f8:	beq	15524 <__assert_fail@plt+0x3d20>
   154fc:	cmp	r2, #46	; 0x2e
   15500:	ldrbeq	r0, [r0, #21]
   15504:	cmpeq	r0, #0
   15508:	beq	15524 <__assert_fail@plt+0x3d20>
   1550c:	mov	r0, r1
   15510:	mov	r1, #0
   15514:	bl	1595c <__assert_fail@plt+0x4158>
   15518:	cmp	r0, r5
   1551c:	mov	r7, #1
   15520:	movgt	r5, r0
   15524:	mov	r0, r4
   15528:	str	r8, [r6]
   1552c:	bl	11768 <readdir64@plt>
   15530:	cmp	r0, #0
   15534:	bne	154e0 <__assert_fail@plt+0x3cdc>
   15538:	ldr	r6, [r6]
   1553c:	cmp	r6, #0
   15540:	beq	155cc <__assert_fail@plt+0x3dc8>
   15544:	movw	r2, #51438	; 0xc8ee
   15548:	mov	r0, #0
   1554c:	mov	r1, #8
   15550:	movt	r2, #1
   15554:	bl	18698 <__assert_fail@plt+0x6e94>
   15558:	movw	r2, #51571	; 0xc973
   1555c:	mov	r3, r0
   15560:	mov	r0, #0
   15564:	mov	r1, r6
   15568:	movt	r2, #1
   1556c:	bl	115b8 <error@plt>
   15570:	mov	r0, r4
   15574:	bl	117f8 <closedir@plt>
   15578:	mov	r0, #4
   1557c:	bl	114f8 <sysconf@plt>
   15580:	mov	r5, r0
   15584:	mov	r1, sp
   15588:	mov	r0, #7
   1558c:	bl	11510 <getrlimit64@plt>
   15590:	cmn	r5, #1
   15594:	movweq	r5, #20
   15598:	cmp	r0, #0
   1559c:	bne	155e4 <__assert_fail@plt+0x3de0>
   155a0:	ldm	sp, {r0, r1}
   155a4:	and	r1, r0, r1
   155a8:	cmn	r1, #1
   155ac:	movne	r5, r0
   155b0:	mov	r0, r5
   155b4:	sub	sp, fp, #24
   155b8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   155bc:	mvn	r5, #0
   155c0:	ldr	r6, [r6]
   155c4:	cmp	r6, #0
   155c8:	bne	15544 <__assert_fail@plt+0x3d40>
   155cc:	mov	r0, r4
   155d0:	bl	117f8 <closedir@plt>
   155d4:	cmp	r7, #0
   155d8:	beq	15578 <__assert_fail@plt+0x3d74>
   155dc:	cmn	r5, #1
   155e0:	ble	15578 <__assert_fail@plt+0x3d74>
   155e4:	mov	r0, r5
   155e8:	sub	sp, fp, #24
   155ec:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   155f0:	sub	sp, sp, #8
   155f4:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   155f8:	add	fp, sp, #24
   155fc:	sub	sp, sp, #8
   15600:	tst	r1, #64	; 0x40
   15604:	movw	r9, #57988	; 0xe284
   15608:	mov	r4, r0
   1560c:	str	r3, [fp, #12]
   15610:	str	r2, [fp, #8]
   15614:	mov	r6, #0
   15618:	mov	r5, r1
   1561c:	addne	r0, fp, #8
   15620:	movt	r9, #2
   15624:	orrne	r0, r0, #4
   15628:	strne	r0, [sp, #4]
   1562c:	ldrb	r0, [r9, #1]
   15630:	ldrne	r6, [fp, #8]
   15634:	cmp	r0, #0
   15638:	bne	15684 <__assert_fail@plt+0x3e80>
   1563c:	movw	r0, #53093	; 0xcf65
   15640:	mov	r1, #524288	; 0x80000
   15644:	movt	r0, #1
   15648:	bl	15f14 <__assert_fail@plt+0x4710>
   1564c:	cmp	r0, #0
   15650:	blt	15674 <__assert_fail@plt+0x3e70>
   15654:	mov	r1, #1
   15658:	mov	r7, r0
   1565c:	bl	1a300 <__assert_fail@plt+0x8afc>
   15660:	mov	r8, r0
   15664:	mov	r0, r7
   15668:	bl	117ec <close@plt>
   1566c:	and	r0, r8, #1
   15670:	b	15678 <__assert_fail@plt+0x3e74>
   15674:	mov	r0, #0
   15678:	mov	r1, #1
   1567c:	strb	r1, [r9, #1]
   15680:	strb	r0, [r9]
   15684:	orr	r1, r5, #524288	; 0x80000
   15688:	mov	r0, r4
   1568c:	mov	r2, r6
   15690:	bl	15f14 <__assert_fail@plt+0x4710>
   15694:	mov	r4, r0
   15698:	cmp	r0, #0
   1569c:	blt	156b8 <__assert_fail@plt+0x3eb4>
   156a0:	ldrb	r0, [r9]
   156a4:	cmp	r0, #0
   156a8:	bne	156b8 <__assert_fail@plt+0x3eb4>
   156ac:	mov	r0, r4
   156b0:	mov	r1, #1
   156b4:	bl	15bec <__assert_fail@plt+0x43e8>
   156b8:	mov	r0, r4
   156bc:	sub	sp, fp, #24
   156c0:	pop	{r4, r5, r6, r7, r8, r9, fp, lr}
   156c4:	add	sp, sp, #8
   156c8:	bx	lr
   156cc:	push	{r4, sl, fp, lr}
   156d0:	add	fp, sp, #8
   156d4:	movw	r4, #57988	; 0xe284
   156d8:	movt	r4, #2
   156dc:	ldr	r0, [r4, #4]
   156e0:	bl	1a584 <__assert_fail@plt+0x8d80>
   156e4:	mov	r0, #0
   156e8:	str	r0, [r4, #4]
   156ec:	str	r0, [r4, #8]
   156f0:	pop	{r4, sl, fp, pc}
   156f4:	push	{fp, lr}
   156f8:	mov	fp, sp
   156fc:	movw	r0, #51204	; 0xc804
   15700:	movt	r0, #1
   15704:	bl	115dc <getenv@plt>
   15708:	cmp	r0, #0
   1570c:	movwne	r0, #1
   15710:	pop	{fp, pc}
   15714:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15718:	add	fp, sp, #28
   1571c:	sub	sp, sp, #524	; 0x20c
   15720:	movw	r0, #57988	; 0xe284
   15724:	movt	r0, #2
   15728:	ldr	r1, [r0, #4]
   1572c:	ldr	sl, [r0, #8]
   15730:	str	r1, [sp, #4]
   15734:	bl	15490 <__assert_fail@plt+0x3c8c>
   15738:	mov	r7, r0
   1573c:	cmn	r0, #-2147483647	; 0x80000001
   15740:	addne	r7, r7, #1
   15744:	cmp	r7, #1
   15748:	blt	1585c <__assert_fail@plt+0x4058>
   1574c:	mov	r4, #0
   15750:	add	r5, sp, #8
   15754:	mov	r3, #5
   15758:	mov	r8, #0
   1575c:	str	r7, [sp]
   15760:	sub	r9, r7, r8
   15764:	cmp	r9, #64	; 0x40
   15768:	mov	r6, r9
   1576c:	movge	r6, #64	; 0x40
   15770:	cmp	r9, #1
   15774:	blt	157a0 <__assert_fail@plt+0x3f9c>
   15778:	mov	r0, #0
   1577c:	mov	r1, #0
   15780:	add	r2, r5, r0
   15784:	add	r0, r0, #8
   15788:	str	r3, [r2, #4]
   1578c:	add	r2, r8, r1
   15790:	str	r2, [r5, r1, lsl #3]
   15794:	add	r1, r1, #1
   15798:	cmp	r1, r6
   1579c:	blt	15780 <__assert_fail@plt+0x3f7c>
   157a0:	mov	r0, r5
   157a4:	mov	r1, r6
   157a8:	mov	r2, #0
   157ac:	bl	1154c <poll@plt>
   157b0:	mov	r3, #5
   157b4:	cmn	r0, #1
   157b8:	beq	1585c <__assert_fail@plt+0x4058>
   157bc:	cmp	r9, #1
   157c0:	blt	15840 <__assert_fail@plt+0x403c>
   157c4:	mov	r9, #0
   157c8:	add	r0, r5, r9, lsl #3
   157cc:	ldrh	r0, [r0, #6]
   157d0:	cmp	r0, #32
   157d4:	beq	15834 <__assert_fail@plt+0x4030>
   157d8:	ldr	r7, [r5, r9, lsl #3]
   157dc:	mov	r1, #1
   157e0:	mov	r0, r7
   157e4:	bl	1a300 <__assert_fail@plt+0x8afc>
   157e8:	tst	r0, #1
   157ec:	bne	1581c <__assert_fail@plt+0x4018>
   157f0:	ldr	r1, [sp, #4]
   157f4:	cmp	r4, sl
   157f8:	mov	r3, #5
   157fc:	bcs	15854 <__assert_fail@plt+0x4050>
   15800:	ldr	r0, [r1, r4, lsl #2]
   15804:	cmp	r0, r7
   15808:	bge	15830 <__assert_fail@plt+0x402c>
   1580c:	add	r4, r4, #1
   15810:	cmp	r4, sl
   15814:	bcc	15800 <__assert_fail@plt+0x3ffc>
   15818:	b	15854 <__assert_fail@plt+0x4050>
   1581c:	mov	r3, #5
   15820:	add	r9, r9, #1
   15824:	cmp	r9, r6
   15828:	blt	157c8 <__assert_fail@plt+0x3fc4>
   1582c:	b	15840 <__assert_fail@plt+0x403c>
   15830:	bne	15854 <__assert_fail@plt+0x4050>
   15834:	add	r9, r9, #1
   15838:	cmp	r9, r6
   1583c:	blt	157c8 <__assert_fail@plt+0x3fc4>
   15840:	ldr	r7, [sp]
   15844:	add	r8, r6, r8
   15848:	cmp	r8, r7
   1584c:	blt	15760 <__assert_fail@plt+0x3f5c>
   15850:	b	1585c <__assert_fail@plt+0x4058>
   15854:	cmp	r7, #0
   15858:	bge	15864 <__assert_fail@plt+0x4060>
   1585c:	sub	sp, fp, #28
   15860:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15864:	movw	r1, #51232	; 0xc820
   15868:	mov	r0, #0
   1586c:	mov	r2, #5
   15870:	movt	r1, #1
   15874:	bl	114ec <dcgettext@plt>
   15878:	mov	r2, r0
   1587c:	mov	r0, #0
   15880:	mov	r1, #0
   15884:	mov	r3, r7
   15888:	bl	115b8 <error@plt>
   1588c:	movw	r0, #51384	; 0xc8b8
   15890:	movw	r1, #51393	; 0xc8c1
   15894:	movw	r3, #51402	; 0xc8ca
   15898:	mov	r2, #396	; 0x18c
   1589c:	movt	r0, #1
   158a0:	movt	r1, #1
   158a4:	movt	r3, #1
   158a8:	bl	11804 <__assert_fail@plt>
   158ac:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   158b0:	add	fp, sp, #24
   158b4:	sub	sp, sp, #16
   158b8:	mov	r8, r0
   158bc:	movw	r0, #57808	; 0xe1d0
   158c0:	movt	r0, #2
   158c4:	ldr	r0, [r0]
   158c8:	bl	1a4e0 <__assert_fail@plt+0x8cdc>
   158cc:	movw	r0, #57820	; 0xe1dc
   158d0:	movw	r1, #51480	; 0xc918
   158d4:	mov	r2, #5
   158d8:	mov	r9, #0
   158dc:	movt	r0, #2
   158e0:	movt	r1, #1
   158e4:	ldr	r6, [r0]
   158e8:	movw	r0, #57708	; 0xe16c
   158ec:	movt	r0, #2
   158f0:	ldr	r5, [r0]
   158f4:	mov	r0, #0
   158f8:	bl	114ec <dcgettext@plt>
   158fc:	movw	r1, #51495	; 0xc927
   15900:	mov	r7, r0
   15904:	mov	r0, #0
   15908:	mov	r2, #5
   1590c:	movt	r1, #1
   15910:	bl	114ec <dcgettext@plt>
   15914:	movw	r1, #51510	; 0xc936
   15918:	mov	r4, r0
   1591c:	mov	r0, #0
   15920:	mov	r2, #5
   15924:	movt	r1, #1
   15928:	bl	114ec <dcgettext@plt>
   1592c:	movw	r2, #51466	; 0xc90a
   15930:	str	r0, [sp, #8]
   15934:	mov	r0, r6
   15938:	mov	r1, r8
   1593c:	mov	r3, r5
   15940:	str	r7, [sp]
   15944:	str	r4, [sp, #4]
   15948:	str	r9, [sp, #12]
   1594c:	movt	r2, #1
   15950:	bl	19274 <__assert_fail@plt+0x7a70>
   15954:	sub	sp, fp, #24
   15958:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1595c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   15960:	add	fp, sp, #24
   15964:	sub	sp, sp, #8
   15968:	mov	r5, r1
   1596c:	mov	r4, r0
   15970:	bl	11684 <__errno_location@plt>
   15974:	mov	r6, r0
   15978:	mov	r0, #0
   1597c:	add	r1, sp, #4
   15980:	mov	r2, #10
   15984:	str	r0, [r6]
   15988:	mov	r0, r4
   1598c:	bl	11450 <strtol@plt>
   15990:	add	r1, r0, #-2147483647	; 0x80000001
   15994:	cmp	r1, #1
   15998:	bls	159f8 <__assert_fail@plt+0x41f4>
   1599c:	ldr	r7, [sp, #4]
   159a0:	ldrb	r1, [r7]
   159a4:	cmp	r1, #0
   159a8:	bne	15a10 <__assert_fail@plt+0x420c>
   159ac:	cmp	r7, r4
   159b0:	subne	sp, fp, #24
   159b4:	popne	{r4, r5, r6, r7, r8, sl, fp, pc}
   159b8:	ldr	r6, [r6]
   159bc:	movw	r1, #51550	; 0xc95e
   159c0:	mov	r0, #0
   159c4:	mov	r2, #5
   159c8:	movt	r1, #1
   159cc:	bl	114ec <dcgettext@plt>
   159d0:	mov	r7, r0
   159d4:	mov	r0, #0
   159d8:	mov	r1, r5
   159dc:	mov	r2, r4
   159e0:	bl	18698 <__assert_fail@plt+0x6e94>
   159e4:	mov	r3, r0
   159e8:	mov	r0, #1
   159ec:	mov	r1, r6
   159f0:	mov	r2, r7
   159f4:	bl	115b8 <error@plt>
   159f8:	ldr	r1, [r6]
   159fc:	movw	r2, #51571	; 0xc973
   15a00:	mov	r0, #1
   15a04:	mov	r3, r4
   15a08:	movt	r2, #1
   15a0c:	bl	115b8 <error@plt>
   15a10:	ldr	r8, [r6]
   15a14:	movw	r1, #51523	; 0xc943
   15a18:	mov	r0, #0
   15a1c:	mov	r2, #5
   15a20:	movt	r1, #1
   15a24:	bl	114ec <dcgettext@plt>
   15a28:	mov	r6, r0
   15a2c:	mov	r0, #0
   15a30:	mov	r1, r5
   15a34:	mov	r2, r7
   15a38:	bl	18698 <__assert_fail@plt+0x6e94>
   15a3c:	mov	r7, r0
   15a40:	mov	r0, #1
   15a44:	mov	r1, r5
   15a48:	mov	r2, r4
   15a4c:	bl	18698 <__assert_fail@plt+0x6e94>
   15a50:	str	r0, [sp]
   15a54:	mov	r0, #1
   15a58:	mov	r1, r8
   15a5c:	mov	r2, r6
   15a60:	mov	r3, r7
   15a64:	bl	115b8 <error@plt>
   15a68:	push	{r4, r5, fp, lr}
   15a6c:	add	fp, sp, #8
   15a70:	sub	sp, sp, #16
   15a74:	mov	r4, r1
   15a78:	movw	r1, #51574	; 0xc976
   15a7c:	mov	r5, r0
   15a80:	mov	r0, #0
   15a84:	mov	r2, #5
   15a88:	movt	r1, #1
   15a8c:	bl	114ec <dcgettext@plt>
   15a90:	movw	r2, #51819	; 0xca6b
   15a94:	movw	r3, #51466	; 0xc90a
   15a98:	mov	r1, r0
   15a9c:	movw	r0, #51866	; 0xca9a
   15aa0:	movt	r2, #1
   15aa4:	movt	r0, #1
   15aa8:	movt	r3, #1
   15aac:	str	r2, [sp, #4]
   15ab0:	movw	r2, #51780	; 0xca44
   15ab4:	str	r3, [sp]
   15ab8:	str	r0, [sp, #8]
   15abc:	mov	r0, r5
   15ac0:	mov	r3, r4
   15ac4:	movt	r2, #1
   15ac8:	bl	11678 <fprintf@plt>
   15acc:	sub	sp, fp, #8
   15ad0:	pop	{r4, r5, fp, pc}
   15ad4:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   15ad8:	add	fp, sp, #24
   15adc:	mov	r6, r2
   15ae0:	mov	r7, r1
   15ae4:	mov	r4, r0
   15ae8:	bl	11684 <__errno_location@plt>
   15aec:	cmp	r7, #0
   15af0:	beq	15b88 <__assert_fail@plt+0x4384>
   15af4:	mov	r5, r0
   15af8:	ldr	r8, [r0]
   15afc:	ldr	r0, [r6]
   15b00:	cmp	r0, #0
   15b04:	mov	r1, r0
   15b08:	movweq	r1, #16
   15b0c:	cmp	r1, r7
   15b10:	bcs	15b28 <__assert_fail@plt+0x4324>
   15b14:	lsl	r2, r1, #1
   15b18:	cmp	r1, r1, lsl #1
   15b1c:	mov	r1, r2
   15b20:	bls	15b0c <__assert_fail@plt+0x4308>
   15b24:	mov	r1, r7
   15b28:	cmp	r0, #0
   15b2c:	beq	15b5c <__assert_fail@plt+0x4358>
   15b30:	cmp	r1, r0
   15b34:	beq	15b74 <__assert_fail@plt+0x4370>
   15b38:	mov	r0, r4
   15b3c:	str	r1, [r6]
   15b40:	bl	1a6e0 <__assert_fail@plt+0x8edc>
   15b44:	mov	r4, r0
   15b48:	cmp	r0, #0
   15b4c:	bne	15b7c <__assert_fail@plt+0x4378>
   15b50:	mov	r4, #0
   15b54:	mov	r0, r4
   15b58:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   15b5c:	cmp	r4, #0
   15b60:	bne	15ba8 <__assert_fail@plt+0x43a4>
   15b64:	mov	r0, r1
   15b68:	str	r1, [r6]
   15b6c:	bl	1a650 <__assert_fail@plt+0x8e4c>
   15b70:	mov	r4, r0
   15b74:	cmp	r4, #0
   15b78:	beq	15b50 <__assert_fail@plt+0x434c>
   15b7c:	mov	r0, r4
   15b80:	str	r8, [r5]
   15b84:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   15b88:	movw	r0, #51888	; 0xcab0
   15b8c:	movw	r1, #51900	; 0xcabc
   15b90:	movw	r3, #51912	; 0xcac8
   15b94:	mov	r2, #71	; 0x47
   15b98:	movt	r0, #1
   15b9c:	movt	r1, #1
   15ba0:	movt	r3, #1
   15ba4:	bl	11804 <__assert_fail@plt>
   15ba8:	movw	r0, #51954	; 0xcaf2
   15bac:	movw	r1, #51900	; 0xcabc
   15bb0:	movw	r3, #51912	; 0xcac8
   15bb4:	mov	r2, #79	; 0x4f
   15bb8:	movt	r0, #1
   15bbc:	movt	r1, #1
   15bc0:	movt	r3, #1
   15bc4:	bl	11804 <__assert_fail@plt>
   15bc8:	push	{r4, sl, fp, lr}
   15bcc:	add	fp, sp, #8
   15bd0:	mov	r4, r0
   15bd4:	bl	15ad4 <__assert_fail@plt+0x42d0>
   15bd8:	cmp	r0, #0
   15bdc:	popne	{r4, sl, fp, pc}
   15be0:	mov	r0, r4
   15be4:	bl	1a584 <__assert_fail@plt+0x8d80>
   15be8:	bl	199ec <__assert_fail@plt+0x81e8>
   15bec:	push	{r4, r5, r6, sl, fp, lr}
   15bf0:	add	fp, sp, #16
   15bf4:	mov	r6, r1
   15bf8:	mov	r1, #1
   15bfc:	mov	r2, #0
   15c00:	mov	r4, r0
   15c04:	mov	r5, #0
   15c08:	bl	1a300 <__assert_fail@plt+0x8afc>
   15c0c:	cmp	r0, #0
   15c10:	blt	15c40 <__assert_fail@plt+0x443c>
   15c14:	bic	r2, r0, #1
   15c18:	cmp	r6, #0
   15c1c:	orrne	r2, r0, #1
   15c20:	cmp	r0, r2
   15c24:	beq	15c44 <__assert_fail@plt+0x4440>
   15c28:	mov	r0, r4
   15c2c:	mov	r1, #2
   15c30:	bl	1a300 <__assert_fail@plt+0x8afc>
   15c34:	cmn	r0, #1
   15c38:	movwne	r0, #0
   15c3c:	pop	{r4, r5, r6, sl, fp, pc}
   15c40:	mvn	r5, #0
   15c44:	mov	r0, r5
   15c48:	pop	{r4, r5, r6, sl, fp, pc}
   15c4c:	movw	r1, #1030	; 0x406
   15c50:	mov	r2, #0
   15c54:	b	1a300 <__assert_fail@plt+0x8afc>
   15c58:	movw	r1, #58000	; 0xe290
   15c5c:	movt	r1, #2
   15c60:	str	r0, [r1]
   15c64:	bx	lr
   15c68:	push	{r4, r5, r6, sl, fp, lr}
   15c6c:	add	fp, sp, #16
   15c70:	sub	sp, sp, #8
   15c74:	movw	r6, #57816	; 0xe1d8
   15c78:	movt	r6, #2
   15c7c:	ldr	r5, [r6]
   15c80:	mov	r0, r5
   15c84:	bl	1a548 <__assert_fail@plt+0x8d44>
   15c88:	cmp	r0, #0
   15c8c:	beq	15ccc <__assert_fail@plt+0x44c8>
   15c90:	mov	r0, #1
   15c94:	mov	r2, #0
   15c98:	mov	r3, #0
   15c9c:	mov	r4, #0
   15ca0:	str	r0, [sp]
   15ca4:	mov	r0, r5
   15ca8:	bl	1a5ac <__assert_fail@plt+0x8da8>
   15cac:	cmp	r0, #0
   15cb0:	bne	15cd0 <__assert_fail@plt+0x44cc>
   15cb4:	ldr	r0, [r6]
   15cb8:	bl	1a4e0 <__assert_fail@plt+0x8cdc>
   15cbc:	mov	r4, r0
   15cc0:	cmp	r0, #0
   15cc4:	movwne	r4, #1
   15cc8:	b	15cd0 <__assert_fail@plt+0x44cc>
   15ccc:	mov	r4, #0
   15cd0:	ldr	r0, [r6]
   15cd4:	bl	1a770 <__assert_fail@plt+0x8f6c>
   15cd8:	cmp	r4, #0
   15cdc:	cmpeq	r0, #0
   15ce0:	bne	15cf0 <__assert_fail@plt+0x44ec>
   15ce4:	sub	sp, fp, #16
   15ce8:	pop	{r4, r5, r6, sl, fp, lr}
   15cec:	b	15d94 <__assert_fail@plt+0x4590>
   15cf0:	movw	r1, #51971	; 0xcb03
   15cf4:	mov	r0, #0
   15cf8:	mov	r2, #5
   15cfc:	movt	r1, #1
   15d00:	bl	114ec <dcgettext@plt>
   15d04:	mov	r4, r0
   15d08:	movw	r0, #58000	; 0xe290
   15d0c:	movt	r0, #2
   15d10:	ldr	r6, [r0]
   15d14:	bl	11684 <__errno_location@plt>
   15d18:	ldr	r5, [r0]
   15d1c:	cmp	r6, #0
   15d20:	bne	15d3c <__assert_fail@plt+0x4538>
   15d24:	movw	r2, #51571	; 0xc973
   15d28:	mov	r0, #0
   15d2c:	mov	r1, r5
   15d30:	mov	r3, r4
   15d34:	movt	r2, #1
   15d38:	b	15d5c <__assert_fail@plt+0x4558>
   15d3c:	mov	r0, r6
   15d40:	bl	188e0 <__assert_fail@plt+0x70dc>
   15d44:	movw	r2, #51990	; 0xcb16
   15d48:	mov	r3, r0
   15d4c:	str	r4, [sp]
   15d50:	mov	r0, #0
   15d54:	mov	r1, r5
   15d58:	movt	r2, #1
   15d5c:	bl	115b8 <error@plt>
   15d60:	bl	15d94 <__assert_fail@plt+0x4590>
   15d64:	movw	r0, #57712	; 0xe170
   15d68:	movt	r0, #2
   15d6c:	ldr	r0, [r0]
   15d70:	bl	114a4 <_exit@plt>
   15d74:	movw	r1, #58004	; 0xe294
   15d78:	movt	r1, #2
   15d7c:	str	r0, [r1, #4]
   15d80:	bx	lr
   15d84:	movw	r1, #58004	; 0xe294
   15d88:	movt	r1, #2
   15d8c:	strb	r0, [r1]
   15d90:	bx	lr
   15d94:	push	{r4, r5, r6, sl, fp, lr}
   15d98:	add	fp, sp, #16
   15d9c:	sub	sp, sp, #8
   15da0:	movw	r0, #57820	; 0xe1dc
   15da4:	movt	r0, #2
   15da8:	ldr	r0, [r0]
   15dac:	bl	1a770 <__assert_fail@plt+0x8f6c>
   15db0:	cmp	r0, #0
   15db4:	beq	15ddc <__assert_fail@plt+0x45d8>
   15db8:	movw	r5, #58004	; 0xe294
   15dbc:	movt	r5, #2
   15dc0:	ldrb	r0, [r5]
   15dc4:	cmp	r0, #0
   15dc8:	beq	15e08 <__assert_fail@plt+0x4604>
   15dcc:	bl	11684 <__errno_location@plt>
   15dd0:	ldr	r0, [r0]
   15dd4:	cmp	r0, #32
   15dd8:	bne	15e08 <__assert_fail@plt+0x4604>
   15ddc:	movw	r0, #57808	; 0xe1d0
   15de0:	movt	r0, #2
   15de4:	ldr	r0, [r0]
   15de8:	bl	1a770 <__assert_fail@plt+0x8f6c>
   15dec:	cmp	r0, #0
   15df0:	subeq	sp, fp, #16
   15df4:	popeq	{r4, r5, r6, sl, fp, pc}
   15df8:	movw	r0, #57712	; 0xe170
   15dfc:	movt	r0, #2
   15e00:	ldr	r0, [r0]
   15e04:	bl	114a4 <_exit@plt>
   15e08:	movw	r1, #51997	; 0xcb1d
   15e0c:	mov	r0, #0
   15e10:	mov	r2, #5
   15e14:	movt	r1, #1
   15e18:	bl	114ec <dcgettext@plt>
   15e1c:	ldr	r6, [r5, #4]
   15e20:	mov	r4, r0
   15e24:	bl	11684 <__errno_location@plt>
   15e28:	ldr	r5, [r0]
   15e2c:	cmp	r6, #0
   15e30:	bne	15e4c <__assert_fail@plt+0x4648>
   15e34:	movw	r2, #51571	; 0xc973
   15e38:	mov	r0, #0
   15e3c:	mov	r1, r5
   15e40:	mov	r3, r4
   15e44:	movt	r2, #1
   15e48:	b	15e6c <__assert_fail@plt+0x4668>
   15e4c:	mov	r0, r6
   15e50:	bl	188e0 <__assert_fail@plt+0x70dc>
   15e54:	movw	r2, #51990	; 0xcb16
   15e58:	mov	r3, r0
   15e5c:	str	r4, [sp]
   15e60:	mov	r0, #0
   15e64:	mov	r1, r5
   15e68:	movt	r2, #1
   15e6c:	bl	115b8 <error@plt>
   15e70:	movw	r0, #57712	; 0xe170
   15e74:	movt	r0, #2
   15e78:	ldr	r0, [r0]
   15e7c:	bl	114a4 <_exit@plt>
   15e80:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   15e84:	add	fp, sp, #24
   15e88:	bl	115c4 <opendir@plt>
   15e8c:	cmp	r0, #0
   15e90:	moveq	r5, #0
   15e94:	moveq	r0, r5
   15e98:	popeq	{r4, r5, r6, r7, r8, sl, fp, pc}
   15e9c:	mov	r4, r0
   15ea0:	bl	1178c <dirfd@plt>
   15ea4:	cmp	r0, #2
   15ea8:	movhi	r0, r4
   15eac:	pophi	{r4, r5, r6, r7, r8, sl, fp, pc}
   15eb0:	movw	r1, #1030	; 0x406
   15eb4:	mov	r2, #3
   15eb8:	bl	1a300 <__assert_fail@plt+0x8afc>
   15ebc:	cmn	r0, #1
   15ec0:	ble	15ef0 <__assert_fail@plt+0x46ec>
   15ec4:	mov	r7, r0
   15ec8:	bl	11774 <fdopendir@plt>
   15ecc:	mov	r5, r0
   15ed0:	bl	11684 <__errno_location@plt>
   15ed4:	ldr	r8, [r0]
   15ed8:	mov	r6, r0
   15edc:	cmp	r5, #0
   15ee0:	bne	15f00 <__assert_fail@plt+0x46fc>
   15ee4:	mov	r0, r7
   15ee8:	bl	117ec <close@plt>
   15eec:	b	15efc <__assert_fail@plt+0x46f8>
   15ef0:	bl	11684 <__errno_location@plt>
   15ef4:	ldr	r8, [r0]
   15ef8:	mov	r6, r0
   15efc:	mov	r5, #0
   15f00:	mov	r0, r4
   15f04:	bl	117f8 <closedir@plt>
   15f08:	mov	r0, r5
   15f0c:	str	r8, [r6]
   15f10:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   15f14:	sub	sp, sp, #8
   15f18:	push	{fp, lr}
   15f1c:	mov	fp, sp
   15f20:	sub	sp, sp, #8
   15f24:	str	r2, [fp, #8]
   15f28:	mov	r2, #0
   15f2c:	tst	r1, #64	; 0x40
   15f30:	str	r3, [fp, #12]
   15f34:	addne	r2, fp, #8
   15f38:	orrne	r2, r2, #4
   15f3c:	strne	r2, [sp, #4]
   15f40:	ldrne	r2, [fp, #8]
   15f44:	bl	115d0 <open64@plt>
   15f48:	bl	18d14 <__assert_fail@plt+0x7510>
   15f4c:	mov	sp, fp
   15f50:	pop	{fp, lr}
   15f54:	add	sp, sp, #8
   15f58:	bx	lr
   15f5c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15f60:	add	fp, sp, #28
   15f64:	sub	sp, sp, #308	; 0x134
   15f68:	mov	r5, r1
   15f6c:	mov	r6, r0
   15f70:	bl	11588 <__ctype_get_mb_cur_max@plt>
   15f74:	cmp	r0, #2
   15f78:	bcc	15fc4 <__assert_fail@plt+0x47c0>
   15f7c:	mov	r4, #0
   15f80:	sub	r0, fp, #88	; 0x58
   15f84:	str	r4, [fp, #-80]	; 0xffffffb0
   15f88:	str	r4, [fp, #-84]	; 0xffffffac
   15f8c:	strb	r4, [fp, #-88]	; 0xffffffa8
   15f90:	str	r5, [fp, #-72]	; 0xffffffb8
   15f94:	strb	r4, [fp, #-76]	; 0xffffffb4
   15f98:	bl	16a98 <__assert_fail@plt+0x5294>
   15f9c:	ldrb	r0, [fp, #-64]	; 0xffffffc0
   15fa0:	cmp	r0, #0
   15fa4:	beq	160e4 <__assert_fail@plt+0x48e0>
   15fa8:	ldr	r0, [fp, #-60]	; 0xffffffc4
   15fac:	cmp	r0, #0
   15fb0:	bne	160e4 <__assert_fail@plt+0x48e0>
   15fb4:	mov	r4, r6
   15fb8:	mov	r0, r4
   15fbc:	sub	sp, fp, #28
   15fc0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15fc4:	ldrb	r7, [r5]
   15fc8:	cmp	r7, #0
   15fcc:	beq	16450 <__assert_fail@plt+0x4c4c>
   15fd0:	ldrb	r9, [r6]
   15fd4:	cmp	r9, #0
   15fd8:	beq	16460 <__assert_fail@plt+0x4c5c>
   15fdc:	mov	r3, #1
   15fe0:	mov	ip, #0
   15fe4:	mov	lr, r5
   15fe8:	mov	r8, #0
   15fec:	mov	sl, #0
   15ff0:	str	r7, [sp, #16]
   15ff4:	add	r0, sl, sl, lsl #2
   15ff8:	cmp	r8, r0
   15ffc:	bcc	1608c <__assert_fail@plt+0x4888>
   16000:	tst	r3, #1
   16004:	beq	1608c <__assert_fail@plt+0x4888>
   16008:	cmp	sl, #10
   1600c:	bcc	1608c <__assert_fail@plt+0x4888>
   16010:	cmp	lr, #0
   16014:	str	r3, [sp, #20]
   16018:	beq	1604c <__assert_fail@plt+0x4848>
   1601c:	sub	r1, r8, ip
   16020:	mov	r0, lr
   16024:	mov	r7, lr
   16028:	bl	116f0 <strnlen@plt>
   1602c:	mov	lr, r7
   16030:	mov	ip, r8
   16034:	ldrb	r0, [lr, r0]!
   16038:	cmp	r0, #0
   1603c:	beq	1604c <__assert_fail@plt+0x4848>
   16040:	ldr	r3, [sp, #20]
   16044:	mov	ip, r8
   16048:	b	16088 <__assert_fail@plt+0x4884>
   1604c:	mov	r0, r5
   16050:	mov	r4, ip
   16054:	bl	11654 <strlen@plt>
   16058:	mov	r2, r0
   1605c:	mov	r0, r6
   16060:	mov	r1, r5
   16064:	sub	r3, fp, #88	; 0x58
   16068:	bl	16910 <__assert_fail@plt+0x510c>
   1606c:	cmp	r0, #0
   16070:	bne	164b0 <__assert_fail@plt+0x4cac>
   16074:	ldr	r3, [sp, #20]
   16078:	ldrb	r9, [r6]
   1607c:	mov	lr, #0
   16080:	mov	ip, r4
   16084:	and	r3, r3, r0
   16088:	ldr	r7, [sp, #16]
   1608c:	uxtb	r0, r9
   16090:	cmp	r0, r7
   16094:	bne	160c8 <__assert_fail@plt+0x48c4>
   16098:	mov	r0, #1
   1609c:	ldrb	r1, [r5, r0]
   160a0:	cmp	r1, #0
   160a4:	beq	16470 <__assert_fail@plt+0x4c6c>
   160a8:	ldrb	r2, [r6, r0]
   160ac:	cmp	r2, #0
   160b0:	beq	16480 <__assert_fail@plt+0x4c7c>
   160b4:	add	r0, r0, #1
   160b8:	cmp	r2, r1
   160bc:	beq	1609c <__assert_fail@plt+0x4898>
   160c0:	add	r8, r8, r0
   160c4:	b	160cc <__assert_fail@plt+0x48c8>
   160c8:	add	r8, r8, #1
   160cc:	ldrb	r9, [r6, #1]!
   160d0:	add	sl, sl, #1
   160d4:	mov	r4, #0
   160d8:	cmp	r9, #0
   160dc:	bne	15ff4 <__assert_fail@plt+0x47f0>
   160e0:	b	16454 <__assert_fail@plt+0x4c50>
   160e4:	add	r0, sp, #136	; 0x88
   160e8:	str	r4, [fp, #-136]	; 0xffffff78
   160ec:	str	r4, [fp, #-140]	; 0xffffff74
   160f0:	strb	r4, [fp, #-144]	; 0xffffff70
   160f4:	str	r5, [fp, #-128]	; 0xffffff80
   160f8:	str	r4, [sp, #144]	; 0x90
   160fc:	str	r4, [sp, #140]	; 0x8c
   16100:	str	r6, [sp, #152]	; 0x98
   16104:	strb	r4, [sp, #136]	; 0x88
   16108:	str	r5, [sp, #16]
   1610c:	strb	r4, [fp, #-132]	; 0xffffff7c
   16110:	strb	r4, [sp, #148]	; 0x94
   16114:	bl	16a98 <__assert_fail@plt+0x5294>
   16118:	ldrb	r0, [sp, #160]	; 0xa0
   1611c:	cmp	r0, #0
   16120:	beq	16130 <__assert_fail@plt+0x492c>
   16124:	ldr	r0, [sp, #164]	; 0xa4
   16128:	cmp	r0, #0
   1612c:	beq	16454 <__assert_fail@plt+0x4c50>
   16130:	add	r0, sp, #24
   16134:	mov	r8, #1
   16138:	mov	sl, #0
   1613c:	sub	r5, fp, #144	; 0x90
   16140:	mov	r1, #0
   16144:	mov	r7, #0
   16148:	mov	r9, #0
   1614c:	add	r0, r0, #4
   16150:	str	r0, [sp, #12]
   16154:	add	r0, sp, #136	; 0x88
   16158:	add	r0, r0, #16
   1615c:	str	r0, [sp, #8]
   16160:	add	r0, r9, r9, lsl #2
   16164:	mov	r4, r7
   16168:	cmp	r7, r0
   1616c:	bcc	16214 <__assert_fail@plt+0x4a10>
   16170:	tst	r8, #1
   16174:	beq	16214 <__assert_fail@plt+0x4a10>
   16178:	cmp	r9, #10
   1617c:	bcc	16214 <__assert_fail@plt+0x4a10>
   16180:	subs	r0, r4, r1
   16184:	beq	161c8 <__assert_fail@plt+0x49c4>
   16188:	sub	r7, r1, r4
   1618c:	mov	r0, r5
   16190:	bl	16a98 <__assert_fail@plt+0x5294>
   16194:	ldrb	r0, [fp, #-120]	; 0xffffff88
   16198:	cmp	r0, #0
   1619c:	beq	161ac <__assert_fail@plt+0x49a8>
   161a0:	ldr	r0, [fp, #-116]	; 0xffffff8c
   161a4:	cmp	r0, #0
   161a8:	beq	161c8 <__assert_fail@plt+0x49c4>
   161ac:	strb	sl, [fp, #-132]	; 0xffffff7c
   161b0:	adds	r7, r7, #1
   161b4:	ldr	r0, [fp, #-128]	; 0xffffff80
   161b8:	ldr	r1, [fp, #-124]	; 0xffffff84
   161bc:	add	r0, r0, r1
   161c0:	str	r0, [fp, #-128]	; 0xffffff80
   161c4:	bne	1618c <__assert_fail@plt+0x4988>
   161c8:	mov	r0, r5
   161cc:	bl	16a98 <__assert_fail@plt+0x5294>
   161d0:	ldrb	r0, [fp, #-120]	; 0xffffff88
   161d4:	cmp	r0, #0
   161d8:	beq	16210 <__assert_fail@plt+0x4a0c>
   161dc:	ldr	r0, [fp, #-116]	; 0xffffff8c
   161e0:	mov	r1, r4
   161e4:	cmp	r0, #0
   161e8:	bne	16214 <__assert_fail@plt+0x4a10>
   161ec:	ldr	r1, [sp, #16]
   161f0:	mov	r0, r6
   161f4:	add	r2, sp, #80	; 0x50
   161f8:	bl	164d4 <__assert_fail@plt+0x4cd0>
   161fc:	mov	r8, #0
   16200:	cmp	r0, #0
   16204:	mov	r1, r4
   16208:	beq	16214 <__assert_fail@plt+0x4a10>
   1620c:	b	164c0 <__assert_fail@plt+0x4cbc>
   16210:	mov	r1, r4
   16214:	ldrb	r0, [sp, #160]	; 0xa0
   16218:	add	r7, r4, #1
   1621c:	str	r1, [sp, #20]
   16220:	cmp	r0, #0
   16224:	ldrbne	r0, [fp, #-64]	; 0xffffffc0
   16228:	cmpne	r0, #0
   1622c:	bne	16258 <__assert_fail@plt+0x4a54>
   16230:	ldr	r2, [sp, #156]	; 0x9c
   16234:	ldr	r0, [fp, #-68]	; 0xffffffbc
   16238:	cmp	r2, r0
   1623c:	bne	1640c <__assert_fail@plt+0x4c08>
   16240:	ldr	r1, [fp, #-72]	; 0xffffffb8
   16244:	ldr	r0, [sp, #152]	; 0x98
   16248:	bl	114e0 <memcmp@plt>
   1624c:	cmp	r0, #0
   16250:	bne	1640c <__assert_fail@plt+0x4c08>
   16254:	b	16268 <__assert_fail@plt+0x4a64>
   16258:	ldr	r0, [fp, #-60]	; 0xffffffc4
   1625c:	ldr	r1, [sp, #164]	; 0xa4
   16260:	cmp	r1, r0
   16264:	bne	1640c <__assert_fail@plt+0x4c08>
   16268:	add	r2, sp, #136	; 0x88
   1626c:	mov	r1, #48	; 0x30
   16270:	add	r3, sp, #80	; 0x50
   16274:	str	r9, [sp]
   16278:	str	r8, [sp, #4]
   1627c:	mov	r0, r2
   16280:	add	r2, r2, #32
   16284:	vld1.64	{d16-d17}, [r0], r1
   16288:	ldr	r1, [sp, #8]
   1628c:	vld1.64	{d20-d21}, [r2]
   16290:	vld1.64	{d18-d19}, [r1]
   16294:	add	r1, r3, #16
   16298:	vldr	d22, [r0]
   1629c:	add	r0, r3, #32
   162a0:	vst1.64	{d20-d21}, [r0]
   162a4:	mov	r0, r3
   162a8:	vst1.64	{d18-d19}, [r1]
   162ac:	mov	r1, #12
   162b0:	vst1.64	{d16-d17}, [r0], r1
   162b4:	strb	sl, [r0]
   162b8:	ldr	r0, [sp, #16]
   162bc:	vstr	d22, [sp, #128]	; 0x80
   162c0:	ldr	r1, [sp, #100]	; 0x64
   162c4:	str	r0, [sp, #40]	; 0x28
   162c8:	ldr	r0, [sp, #96]	; 0x60
   162cc:	strb	sl, [sp, #24]
   162d0:	add	r0, r0, r1
   162d4:	str	r0, [sp, #96]	; 0x60
   162d8:	ldr	r0, [sp, #12]
   162dc:	str	sl, [r0]
   162e0:	str	sl, [r0, #4]
   162e4:	add	r0, sp, #24
   162e8:	strb	sl, [sp, #36]	; 0x24
   162ec:	bl	16a98 <__assert_fail@plt+0x5294>
   162f0:	ldrb	r0, [sp, #48]	; 0x30
   162f4:	cmp	r0, #0
   162f8:	beq	16308 <__assert_fail@plt+0x4b04>
   162fc:	ldr	r0, [sp, #52]	; 0x34
   16300:	cmp	r0, #0
   16304:	beq	164d0 <__assert_fail@plt+0x4ccc>
   16308:	strb	sl, [sp, #36]	; 0x24
   1630c:	ldr	r0, [sp, #40]	; 0x28
   16310:	ldr	r1, [sp, #44]	; 0x2c
   16314:	add	r0, r0, r1
   16318:	str	r0, [sp, #40]	; 0x28
   1631c:	add	r0, sp, #24
   16320:	bl	16a98 <__assert_fail@plt+0x5294>
   16324:	ldrb	r0, [sp, #48]	; 0x30
   16328:	cmp	r0, #0
   1632c:	beq	1633c <__assert_fail@plt+0x4b38>
   16330:	ldr	r0, [sp, #52]	; 0x34
   16334:	cmp	r0, #0
   16338:	beq	16490 <__assert_fail@plt+0x4c8c>
   1633c:	add	r7, r4, #2
   16340:	add	r0, sp, #80	; 0x50
   16344:	bl	16a98 <__assert_fail@plt+0x5294>
   16348:	ldr	r0, [sp, #108]	; 0x6c
   1634c:	ldrb	r1, [sp, #104]	; 0x68
   16350:	cmp	r0, #0
   16354:	bne	16360 <__assert_fail@plt+0x4b5c>
   16358:	cmp	r1, #0
   1635c:	bne	164a0 <__assert_fail@plt+0x4c9c>
   16360:	cmp	r1, #0
   16364:	ldrbne	r1, [sp, #48]	; 0x30
   16368:	cmpne	r1, #0
   1636c:	bne	163a8 <__assert_fail@plt+0x4ba4>
   16370:	ldr	r4, [sp, #100]	; 0x64
   16374:	ldr	r0, [sp, #44]	; 0x2c
   16378:	cmp	r4, r0
   1637c:	bne	16404 <__assert_fail@plt+0x4c00>
   16380:	ldr	r8, [sp, #40]	; 0x28
   16384:	ldr	r9, [sp, #96]	; 0x60
   16388:	mov	r2, r4
   1638c:	mov	r0, r9
   16390:	mov	r1, r8
   16394:	bl	114e0 <memcmp@plt>
   16398:	cmp	r0, #0
   1639c:	mov	r0, r4
   163a0:	beq	163c4 <__assert_fail@plt+0x4bc0>
   163a4:	b	16404 <__assert_fail@plt+0x4c00>
   163a8:	ldr	r1, [sp, #52]	; 0x34
   163ac:	cmp	r0, r1
   163b0:	bne	16404 <__assert_fail@plt+0x4c00>
   163b4:	ldr	r8, [sp, #40]	; 0x28
   163b8:	ldr	r4, [sp, #44]	; 0x2c
   163bc:	ldr	r9, [sp, #96]	; 0x60
   163c0:	ldr	r0, [sp, #100]	; 0x64
   163c4:	add	r0, r9, r0
   163c8:	strb	sl, [sp, #92]	; 0x5c
   163cc:	strb	sl, [sp, #36]	; 0x24
   163d0:	str	r0, [sp, #96]	; 0x60
   163d4:	add	r0, r8, r4
   163d8:	str	r0, [sp, #40]	; 0x28
   163dc:	add	r0, sp, #24
   163e0:	bl	16a98 <__assert_fail@plt+0x5294>
   163e4:	ldrb	r0, [sp, #48]	; 0x30
   163e8:	add	r7, r7, #1
   163ec:	cmp	r0, #0
   163f0:	beq	16340 <__assert_fail@plt+0x4b3c>
   163f4:	ldr	r0, [sp, #52]	; 0x34
   163f8:	cmp	r0, #0
   163fc:	bne	16340 <__assert_fail@plt+0x4b3c>
   16400:	b	16490 <__assert_fail@plt+0x4c8c>
   16404:	ldr	r8, [sp, #4]
   16408:	ldr	r9, [sp]
   1640c:	mov	r4, #0
   16410:	add	r9, r9, #1
   16414:	strb	r4, [sp, #148]	; 0x94
   16418:	ldr	r0, [sp, #152]	; 0x98
   1641c:	ldr	r1, [sp, #156]	; 0x9c
   16420:	add	r0, r0, r1
   16424:	str	r0, [sp, #152]	; 0x98
   16428:	add	r0, sp, #136	; 0x88
   1642c:	bl	16a98 <__assert_fail@plt+0x5294>
   16430:	ldrb	r0, [sp, #160]	; 0xa0
   16434:	ldr	r1, [sp, #20]
   16438:	cmp	r0, #0
   1643c:	beq	16160 <__assert_fail@plt+0x495c>
   16440:	ldr	r0, [sp, #164]	; 0xa4
   16444:	cmp	r0, #0
   16448:	bne	16160 <__assert_fail@plt+0x495c>
   1644c:	b	16454 <__assert_fail@plt+0x4c50>
   16450:	mov	r4, r6
   16454:	mov	r0, r4
   16458:	sub	sp, fp, #28
   1645c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16460:	mov	r4, #0
   16464:	mov	r0, r4
   16468:	sub	sp, fp, #28
   1646c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16470:	mov	r4, r6
   16474:	mov	r0, r4
   16478:	sub	sp, fp, #28
   1647c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16480:	mov	r4, #0
   16484:	mov	r0, r4
   16488:	sub	sp, fp, #28
   1648c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16490:	ldr	r4, [sp, #152]	; 0x98
   16494:	mov	r0, r4
   16498:	sub	sp, fp, #28
   1649c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   164a0:	mov	r4, #0
   164a4:	mov	r0, r4
   164a8:	sub	sp, fp, #28
   164ac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   164b0:	ldr	r4, [fp, #-88]	; 0xffffffa8
   164b4:	mov	r0, r4
   164b8:	sub	sp, fp, #28
   164bc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   164c0:	ldr	r4, [sp, #80]	; 0x50
   164c4:	mov	r0, r4
   164c8:	sub	sp, fp, #28
   164cc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   164d0:	bl	117d4 <abort@plt>
   164d4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   164d8:	add	fp, sp, #28
   164dc:	sub	sp, sp, #132	; 0x84
   164e0:	mov	r7, r0
   164e4:	mov	r0, r1
   164e8:	mov	r6, r2
   164ec:	mov	r4, r1
   164f0:	bl	1a9dc <__assert_fail@plt+0x91d8>
   164f4:	mov	sl, r0
   164f8:	movw	r0, #47662	; 0xba2e
   164fc:	mov	r5, #0
   16500:	movt	r0, #744	; 0x2e8
   16504:	cmp	sl, r0
   16508:	bhi	1653c <__assert_fail@plt+0x4d38>
   1650c:	mov	r0, #44	; 0x2c
   16510:	mul	r0, sl, r0
   16514:	cmp	r0, #4016	; 0xfb0
   16518:	bhi	16548 <__assert_fail@plt+0x4d44>
   1651c:	add	r0, r0, #22
   16520:	bic	r0, r0, #7
   16524:	sub	r0, sp, r0
   16528:	add	r1, r0, #15
   1652c:	bic	r9, r1, #15
   16530:	mov	sp, r0
   16534:	cmp	r9, #0
   16538:	bne	16558 <__assert_fail@plt+0x4d54>
   1653c:	mov	r0, r5
   16540:	sub	sp, fp, #28
   16544:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16548:	bl	1a894 <__assert_fail@plt+0x9090>
   1654c:	mov	r9, r0
   16550:	cmp	r9, #0
   16554:	beq	1653c <__assert_fail@plt+0x4d38>
   16558:	str	r6, [fp, #-152]	; 0xffffff68
   1655c:	mov	r6, #0
   16560:	str	r7, [fp, #-156]	; 0xffffff64
   16564:	str	r6, [fp, #-80]	; 0xffffffb0
   16568:	str	r6, [fp, #-84]	; 0xffffffac
   1656c:	strb	r6, [fp, #-88]	; 0xffffffa8
   16570:	str	r4, [fp, #-72]	; 0xffffffb8
   16574:	sub	r4, fp, #88	; 0x58
   16578:	strb	r6, [fp, #-76]	; 0xffffffb4
   1657c:	mov	r0, r4
   16580:	bl	16a98 <__assert_fail@plt+0x5294>
   16584:	add	r0, sl, sl, lsl #2
   16588:	add	r8, r9, r0, lsl #3
   1658c:	ldrb	r0, [fp, #-64]	; 0xffffffc0
   16590:	cmp	r0, #0
   16594:	beq	165a4 <__assert_fail@plt+0x4da0>
   16598:	ldr	r0, [fp, #-60]	; 0xffffffc4
   1659c:	cmp	r0, #0
   165a0:	beq	16624 <__assert_fail@plt+0x4e20>
   165a4:	add	r7, r9, #16
   165a8:	add	r5, r4, #32
   165ac:	ldr	r0, [fp, #-72]	; 0xffffffb8
   165b0:	cmp	r0, r5
   165b4:	bne	165cc <__assert_fail@plt+0x4dc8>
   165b8:	ldr	r2, [fp, #-68]	; 0xffffffbc
   165bc:	mov	r0, r7
   165c0:	mov	r1, r5
   165c4:	bl	114b0 <memcpy@plt>
   165c8:	mov	r0, r7
   165cc:	str	r0, [r7, #-16]
   165d0:	ldr	r0, [fp, #-68]	; 0xffffffbc
   165d4:	str	r0, [r7, #-12]
   165d8:	ldrb	r0, [fp, #-64]	; 0xffffffc0
   165dc:	strb	r0, [r7, #-8]
   165e0:	cmp	r0, #0
   165e4:	ldrne	r0, [fp, #-60]	; 0xffffffc4
   165e8:	strne	r0, [r7, #-4]
   165ec:	strb	r6, [fp, #-76]	; 0xffffffb4
   165f0:	ldr	r0, [fp, #-72]	; 0xffffffb8
   165f4:	ldr	r1, [fp, #-68]	; 0xffffffbc
   165f8:	add	r0, r0, r1
   165fc:	str	r0, [fp, #-72]	; 0xffffffb8
   16600:	mov	r0, r4
   16604:	bl	16a98 <__assert_fail@plt+0x5294>
   16608:	ldrb	r1, [fp, #-64]	; 0xffffffc0
   1660c:	ldr	r0, [fp, #-60]	; 0xffffffc4
   16610:	add	r7, r7, #40	; 0x28
   16614:	cmp	r1, #0
   16618:	beq	165ac <__assert_fail@plt+0x4da8>
   1661c:	cmp	r0, #0
   16620:	bne	165ac <__assert_fail@plt+0x4da8>
   16624:	mov	r0, #1
   16628:	cmp	sl, #3
   1662c:	str	sl, [fp, #-148]	; 0xffffff6c
   16630:	str	r0, [r8, #4]
   16634:	bcc	16730 <__assert_fail@plt+0x4f2c>
   16638:	mov	sl, #2
   1663c:	mov	r7, #0
   16640:	add	r0, sl, sl, lsl #2
   16644:	add	r0, r9, r0, lsl #3
   16648:	ldrb	r1, [r0, #-32]	; 0xffffffe0
   1664c:	sub	r6, r0, #40	; 0x28
   16650:	sub	r4, r0, #36	; 0x24
   16654:	cmp	r1, #0
   16658:	beq	166c4 <__assert_fail@plt+0x4ec0>
   1665c:	sub	r5, r0, #28
   16660:	b	1666c <__assert_fail@plt+0x4e68>
   16664:	ldr	r0, [r8, r7, lsl #2]
   16668:	sub	r7, r7, r0
   1666c:	add	r0, r7, r7, lsl #2
   16670:	add	r1, r9, r0, lsl #3
   16674:	ldrb	r2, [r1, #8]
   16678:	cmp	r2, #0
   1667c:	beq	16694 <__assert_fail@plt+0x4e90>
   16680:	ldr	r0, [r1, #12]
   16684:	ldr	r1, [r5]
   16688:	cmp	r1, r0
   1668c:	bne	166b8 <__assert_fail@plt+0x4eb4>
   16690:	b	16714 <__assert_fail@plt+0x4f10>
   16694:	ldr	r1, [r1, #4]
   16698:	ldr	r2, [r4]
   1669c:	cmp	r2, r1
   166a0:	bne	166b8 <__assert_fail@plt+0x4eb4>
   166a4:	ldr	r1, [r9, r0, lsl #3]
   166a8:	ldr	r0, [r6]
   166ac:	bl	114e0 <memcmp@plt>
   166b0:	cmp	r0, #0
   166b4:	beq	16714 <__assert_fail@plt+0x4f10>
   166b8:	cmp	r7, #0
   166bc:	bne	16664 <__assert_fail@plt+0x4e60>
   166c0:	b	16708 <__assert_fail@plt+0x4f04>
   166c4:	ldr	r4, [r4]
   166c8:	b	166d4 <__assert_fail@plt+0x4ed0>
   166cc:	ldr	r0, [r8, r7, lsl #2]
   166d0:	sub	r7, r7, r0
   166d4:	add	r0, r7, r7, lsl #2
   166d8:	add	r1, r9, r0, lsl #3
   166dc:	ldr	r1, [r1, #4]
   166e0:	cmp	r4, r1
   166e4:	bne	16700 <__assert_fail@plt+0x4efc>
   166e8:	ldr	r1, [r9, r0, lsl #3]
   166ec:	ldr	r0, [r6]
   166f0:	mov	r2, r4
   166f4:	bl	114e0 <memcmp@plt>
   166f8:	cmp	r0, #0
   166fc:	beq	16714 <__assert_fail@plt+0x4f10>
   16700:	cmp	r7, #0
   16704:	bne	166cc <__assert_fail@plt+0x4ec8>
   16708:	mov	r7, #0
   1670c:	mov	r0, sl
   16710:	b	1671c <__assert_fail@plt+0x4f18>
   16714:	add	r7, r7, #1
   16718:	sub	r0, sl, r7
   1671c:	str	r0, [r8, sl, lsl #2]
   16720:	ldr	r0, [fp, #-148]	; 0xffffff6c
   16724:	add	sl, sl, #1
   16728:	cmp	sl, r0
   1672c:	bne	16640 <__assert_fail@plt+0x4e3c>
   16730:	ldr	r0, [fp, #-152]	; 0xffffff68
   16734:	mov	r6, #0
   16738:	str	r6, [r0]
   1673c:	ldr	r0, [fp, #-156]	; 0xffffff64
   16740:	str	r6, [fp, #-80]	; 0xffffffb0
   16744:	str	r6, [fp, #-84]	; 0xffffffac
   16748:	strb	r6, [fp, #-88]	; 0xffffffa8
   1674c:	str	r6, [fp, #-136]	; 0xffffff78
   16750:	str	r6, [fp, #-140]	; 0xffffff74
   16754:	str	r0, [fp, #-72]	; 0xffffffb8
   16758:	str	r0, [fp, #-128]	; 0xffffff80
   1675c:	sub	r0, fp, #144	; 0x90
   16760:	strb	r6, [fp, #-144]	; 0xffffff70
   16764:	strb	r6, [fp, #-76]	; 0xffffffb4
   16768:	strb	r6, [fp, #-132]	; 0xffffff7c
   1676c:	bl	16a98 <__assert_fail@plt+0x5294>
   16770:	ldr	r0, [fp, #-116]	; 0xffffff8c
   16774:	ldrb	r1, [fp, #-120]	; 0xffffff88
   16778:	cmp	r0, #0
   1677c:	bne	16788 <__assert_fail@plt+0x4f84>
   16780:	cmp	r1, #0
   16784:	bne	168f4 <__assert_fail@plt+0x50f0>
   16788:	clz	r1, r1
   1678c:	sub	r4, fp, #88	; 0x58
   16790:	mov	sl, #0
   16794:	lsr	r1, r1, #5
   16798:	add	r2, sl, sl, lsl #2
   1679c:	tst	r1, #1
   167a0:	add	r3, r9, r2, lsl #3
   167a4:	bne	167cc <__assert_fail@plt+0x4fc8>
   167a8:	ldrb	r1, [r3, #8]
   167ac:	cmp	r1, #0
   167b0:	beq	167cc <__assert_fail@plt+0x4fc8>
   167b4:	ldr	r1, [r3, #12]
   167b8:	cmp	r1, r0
   167bc:	bne	167f8 <__assert_fail@plt+0x4ff4>
   167c0:	ldr	r7, [fp, #-128]	; 0xffffff80
   167c4:	ldr	r5, [fp, #-124]	; 0xffffff84
   167c8:	b	16850 <__assert_fail@plt+0x504c>
   167cc:	ldr	r5, [r3, #4]
   167d0:	ldr	r0, [fp, #-124]	; 0xffffff84
   167d4:	cmp	r5, r0
   167d8:	bne	167f8 <__assert_fail@plt+0x4ff4>
   167dc:	ldr	r7, [fp, #-128]	; 0xffffff80
   167e0:	ldr	r0, [r9, r2, lsl #3]
   167e4:	mov	r2, r5
   167e8:	mov	r1, r7
   167ec:	bl	114e0 <memcmp@plt>
   167f0:	cmp	r0, #0
   167f4:	beq	16850 <__assert_fail@plt+0x504c>
   167f8:	cmp	sl, #0
   167fc:	beq	16870 <__assert_fail@plt+0x506c>
   16800:	ldr	r5, [r8, sl, lsl #2]
   16804:	sub	sl, sl, r5
   16808:	cmp	r5, #0
   1680c:	beq	168bc <__assert_fail@plt+0x50b8>
   16810:	mov	r0, r4
   16814:	bl	16a98 <__assert_fail@plt+0x5294>
   16818:	ldrb	r0, [fp, #-64]	; 0xffffffc0
   1681c:	cmp	r0, #0
   16820:	beq	16830 <__assert_fail@plt+0x502c>
   16824:	ldr	r0, [fp, #-60]	; 0xffffffc4
   16828:	cmp	r0, #0
   1682c:	beq	1690c <__assert_fail@plt+0x5108>
   16830:	strb	r6, [fp, #-76]	; 0xffffffb4
   16834:	subs	r5, r5, #1
   16838:	ldr	r0, [fp, #-72]	; 0xffffffb8
   1683c:	ldr	r1, [fp, #-68]	; 0xffffffbc
   16840:	add	r0, r0, r1
   16844:	str	r0, [fp, #-72]	; 0xffffffb8
   16848:	bne	16810 <__assert_fail@plt+0x500c>
   1684c:	b	168bc <__assert_fail@plt+0x50b8>
   16850:	add	r0, r7, r5
   16854:	strb	r6, [fp, #-132]	; 0xffffff7c
   16858:	add	sl, sl, #1
   1685c:	str	r0, [fp, #-128]	; 0xffffff80
   16860:	ldr	r0, [fp, #-148]	; 0xffffff6c
   16864:	cmp	sl, r0
   16868:	bne	168bc <__assert_fail@plt+0x50b8>
   1686c:	b	168e8 <__assert_fail@plt+0x50e4>
   16870:	mov	r0, r4
   16874:	bl	16a98 <__assert_fail@plt+0x5294>
   16878:	ldrb	r0, [fp, #-64]	; 0xffffffc0
   1687c:	cmp	r0, #0
   16880:	beq	16890 <__assert_fail@plt+0x508c>
   16884:	ldr	r0, [fp, #-60]	; 0xffffffc4
   16888:	cmp	r0, #0
   1688c:	beq	1690c <__assert_fail@plt+0x5108>
   16890:	mov	sl, #0
   16894:	strb	sl, [fp, #-76]	; 0xffffffb4
   16898:	strb	sl, [fp, #-132]	; 0xffffff7c
   1689c:	ldr	r0, [fp, #-72]	; 0xffffffb8
   168a0:	ldr	r1, [fp, #-68]	; 0xffffffbc
   168a4:	add	r0, r0, r1
   168a8:	ldr	r1, [fp, #-124]	; 0xffffff84
   168ac:	str	r0, [fp, #-72]	; 0xffffffb8
   168b0:	ldr	r0, [fp, #-128]	; 0xffffff80
   168b4:	add	r0, r0, r1
   168b8:	str	r0, [fp, #-128]	; 0xffffff80
   168bc:	sub	r0, fp, #144	; 0x90
   168c0:	bl	16a98 <__assert_fail@plt+0x5294>
   168c4:	ldrb	r2, [fp, #-120]	; 0xffffff88
   168c8:	clz	r0, r2
   168cc:	lsr	r1, r0, #5
   168d0:	ldr	r0, [fp, #-116]	; 0xffffff8c
   168d4:	cmp	r0, #0
   168d8:	bne	16798 <__assert_fail@plt+0x4f94>
   168dc:	cmp	r2, #0
   168e0:	beq	16798 <__assert_fail@plt+0x4f94>
   168e4:	b	168f4 <__assert_fail@plt+0x50f0>
   168e8:	ldr	r0, [fp, #-72]	; 0xffffffb8
   168ec:	ldr	r1, [fp, #-152]	; 0xffffff68
   168f0:	str	r0, [r1]
   168f4:	mov	r0, r9
   168f8:	bl	1a904 <__assert_fail@plt+0x9100>
   168fc:	mov	r5, #1
   16900:	mov	r0, r5
   16904:	sub	sp, fp, #28
   16908:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1690c:	bl	117d4 <abort@plt>
   16910:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   16914:	add	fp, sp, #24
   16918:	mov	r4, #0
   1691c:	cmn	r2, #-536870911	; 0xe0000001
   16920:	bhi	16a74 <__assert_fail@plt+0x5270>
   16924:	mov	r7, r0
   16928:	lsl	r0, r2, #2
   1692c:	mov	r8, r3
   16930:	mov	r5, r2
   16934:	mov	r6, r1
   16938:	cmp	r0, #4016	; 0xfb0
   1693c:	bhi	16a68 <__assert_fail@plt+0x5264>
   16940:	add	r0, r0, #22
   16944:	bic	r0, r0, #7
   16948:	sub	r1, sp, r0
   1694c:	add	r0, r1, #15
   16950:	bic	r0, r0, #15
   16954:	mov	sp, r1
   16958:	cmp	r0, #0
   1695c:	beq	16a74 <__assert_fail@plt+0x5270>
   16960:	mov	r1, #1
   16964:	cmp	r5, #3
   16968:	str	r1, [r0, #4]
   1696c:	bcc	169e0 <__assert_fail@plt+0x51dc>
   16970:	mov	r1, #2
   16974:	mov	r2, #0
   16978:	add	r3, r6, r1
   1697c:	ldrb	r4, [r6, r2]
   16980:	ldrb	r3, [r3, #-1]
   16984:	cmp	r3, r4
   16988:	bne	169a4 <__assert_fail@plt+0x51a0>
   1698c:	b	169c8 <__assert_fail@plt+0x51c4>
   16990:	ldr	r4, [r0, r2, lsl #2]
   16994:	sub	r2, r2, r4
   16998:	ldrb	r4, [r6, r2]
   1699c:	cmp	r3, r4
   169a0:	beq	169c8 <__assert_fail@plt+0x51c4>
   169a4:	cmp	r2, #0
   169a8:	bne	16990 <__assert_fail@plt+0x518c>
   169ac:	mov	r2, #0
   169b0:	mov	r3, r1
   169b4:	str	r3, [r0, r1, lsl #2]
   169b8:	add	r1, r1, #1
   169bc:	cmp	r1, r5
   169c0:	bne	16978 <__assert_fail@plt+0x5174>
   169c4:	b	169e0 <__assert_fail@plt+0x51dc>
   169c8:	add	r2, r2, #1
   169cc:	sub	r3, r1, r2
   169d0:	str	r3, [r0, r1, lsl #2]
   169d4:	add	r1, r1, #1
   169d8:	cmp	r1, r5
   169dc:	bne	16978 <__assert_fail@plt+0x5174>
   169e0:	mov	r1, #0
   169e4:	str	r1, [r8]
   169e8:	ldrb	r3, [r7]
   169ec:	cmp	r3, #0
   169f0:	beq	16a84 <__assert_fail@plt+0x5280>
   169f4:	mov	r2, r7
   169f8:	ldrb	r4, [r6, r1]
   169fc:	uxtb	r3, r3
   16a00:	cmp	r4, r3
   16a04:	bne	16a28 <__assert_fail@plt+0x5224>
   16a08:	add	r1, r1, #1
   16a0c:	cmp	r1, r5
   16a10:	beq	16a80 <__assert_fail@plt+0x527c>
   16a14:	add	r7, r7, #1
   16a18:	ldrb	r3, [r7]
   16a1c:	cmp	r3, #0
   16a20:	bne	169f8 <__assert_fail@plt+0x51f4>
   16a24:	b	16a84 <__assert_fail@plt+0x5280>
   16a28:	cmp	r1, #0
   16a2c:	beq	16a4c <__assert_fail@plt+0x5248>
   16a30:	ldr	r3, [r0, r1, lsl #2]
   16a34:	sub	r1, r1, r3
   16a38:	add	r2, r2, r3
   16a3c:	ldrb	r3, [r7]
   16a40:	cmp	r3, #0
   16a44:	bne	169f8 <__assert_fail@plt+0x51f4>
   16a48:	b	16a84 <__assert_fail@plt+0x5280>
   16a4c:	add	r7, r7, #1
   16a50:	add	r2, r2, #1
   16a54:	mov	r1, #0
   16a58:	ldrb	r3, [r7]
   16a5c:	cmp	r3, #0
   16a60:	bne	169f8 <__assert_fail@plt+0x51f4>
   16a64:	b	16a84 <__assert_fail@plt+0x5280>
   16a68:	bl	1a894 <__assert_fail@plt+0x9090>
   16a6c:	cmp	r0, #0
   16a70:	bne	16960 <__assert_fail@plt+0x515c>
   16a74:	mov	r0, r4
   16a78:	sub	sp, fp, #24
   16a7c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   16a80:	str	r2, [r8]
   16a84:	bl	1a904 <__assert_fail@plt+0x9100>
   16a88:	mov	r4, #1
   16a8c:	mov	r0, r4
   16a90:	sub	sp, fp, #24
   16a94:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   16a98:	push	{r4, r5, r6, r7, fp, lr}
   16a9c:	add	fp, sp, #16
   16aa0:	mov	r4, r0
   16aa4:	ldrb	r0, [r0, #12]
   16aa8:	cmp	r0, #0
   16aac:	popne	{r4, r5, r6, r7, fp, pc}
   16ab0:	ldrb	r0, [r4]
   16ab4:	ldr	r6, [r4, #16]
   16ab8:	cmp	r0, #0
   16abc:	beq	16b24 <__assert_fail@plt+0x5320>
   16ac0:	add	r5, r4, #4
   16ac4:	bl	11588 <__ctype_get_mb_cur_max@plt>
   16ac8:	mov	r1, r0
   16acc:	mov	r0, r6
   16ad0:	bl	18ce4 <__assert_fail@plt+0x74e0>
   16ad4:	add	r7, r4, #28
   16ad8:	mov	r2, r0
   16adc:	mov	r1, r6
   16ae0:	mov	r3, r5
   16ae4:	mov	r0, r7
   16ae8:	bl	1a680 <__assert_fail@plt+0x8e7c>
   16aec:	cmn	r0, #2
   16af0:	str	r0, [r4, #20]
   16af4:	beq	16bb0 <__assert_fail@plt+0x53ac>
   16af8:	cmp	r0, #0
   16afc:	beq	16b64 <__assert_fail@plt+0x5360>
   16b00:	cmn	r0, #1
   16b04:	bne	16b88 <__assert_fail@plt+0x5384>
   16b08:	mov	r0, #0
   16b0c:	strb	r0, [r4, #24]
   16b10:	mov	r0, #1
   16b14:	str	r0, [r4, #20]
   16b18:	mov	r0, #1
   16b1c:	strb	r0, [r4, #12]
   16b20:	pop	{r4, r5, r6, r7, fp, pc}
   16b24:	ldrb	r0, [r6]
   16b28:	movw	r2, #53304	; 0xd038
   16b2c:	movt	r2, #1
   16b30:	ubfx	r1, r0, #5, #3
   16b34:	ldr	r1, [r2, r1, lsl #2]
   16b38:	and	r2, r0, #31
   16b3c:	mov	r0, #1
   16b40:	tst	r1, r0, lsl r2
   16b44:	beq	16bd0 <__assert_fail@plt+0x53cc>
   16b48:	str	r0, [r4, #20]
   16b4c:	ldrb	r1, [r6]
   16b50:	strb	r0, [r4, #24]
   16b54:	str	r1, [r4, #28]
   16b58:	mov	r0, #1
   16b5c:	strb	r0, [r4, #12]
   16b60:	pop	{r4, r5, r6, r7, fp, pc}
   16b64:	mov	r0, #1
   16b68:	str	r0, [r4, #20]
   16b6c:	ldr	r0, [r4, #16]
   16b70:	ldrb	r0, [r0]
   16b74:	cmp	r0, #0
   16b78:	bne	16bf0 <__assert_fail@plt+0x53ec>
   16b7c:	ldr	r0, [r7]
   16b80:	cmp	r0, #0
   16b84:	bne	16c10 <__assert_fail@plt+0x540c>
   16b88:	mov	r0, #1
   16b8c:	strb	r0, [r4, #24]
   16b90:	mov	r0, r5
   16b94:	bl	114c8 <mbsinit@plt>
   16b98:	cmp	r0, #0
   16b9c:	movne	r0, #0
   16ba0:	strbne	r0, [r4]
   16ba4:	mov	r0, #1
   16ba8:	strb	r0, [r4, #12]
   16bac:	pop	{r4, r5, r6, r7, fp, pc}
   16bb0:	ldr	r0, [r4, #16]
   16bb4:	bl	11654 <strlen@plt>
   16bb8:	str	r0, [r4, #20]
   16bbc:	mov	r0, #0
   16bc0:	strb	r0, [r4, #24]
   16bc4:	mov	r0, #1
   16bc8:	strb	r0, [r4, #12]
   16bcc:	pop	{r4, r5, r6, r7, fp, pc}
   16bd0:	add	r5, r4, #4
   16bd4:	mov	r0, r5
   16bd8:	bl	114c8 <mbsinit@plt>
   16bdc:	cmp	r0, #0
   16be0:	beq	16c30 <__assert_fail@plt+0x542c>
   16be4:	mov	r0, #1
   16be8:	strb	r0, [r4]
   16bec:	b	16ac4 <__assert_fail@plt+0x52c0>
   16bf0:	movw	r0, #52092	; 0xcb7c
   16bf4:	movw	r1, #52032	; 0xcb40
   16bf8:	movw	r3, #52044	; 0xcb4c
   16bfc:	mov	r2, #171	; 0xab
   16c00:	movt	r0, #1
   16c04:	movt	r1, #1
   16c08:	movt	r3, #1
   16c0c:	bl	11804 <__assert_fail@plt>
   16c10:	movw	r0, #52115	; 0xcb93
   16c14:	movw	r1, #52032	; 0xcb40
   16c18:	movw	r3, #52044	; 0xcb4c
   16c1c:	mov	r2, #172	; 0xac
   16c20:	movt	r0, #1
   16c24:	movt	r1, #1
   16c28:	movt	r3, #1
   16c2c:	bl	11804 <__assert_fail@plt>
   16c30:	movw	r0, #52009	; 0xcb29
   16c34:	movw	r1, #52032	; 0xcb40
   16c38:	movw	r3, #52044	; 0xcb4c
   16c3c:	mov	r2, #143	; 0x8f
   16c40:	movt	r0, #1
   16c44:	movt	r1, #1
   16c48:	movt	r3, #1
   16c4c:	bl	11804 <__assert_fail@plt>
   16c50:	ldr	r2, [r0, #16]
   16c54:	add	r1, r2, r1
   16c58:	str	r1, [r0, #16]
   16c5c:	bx	lr
   16c60:	push	{r4, r5, r6, sl, fp, lr}
   16c64:	add	fp, sp, #16
   16c68:	mov	r5, r1
   16c6c:	ldrb	r1, [r1]
   16c70:	mov	r4, r0
   16c74:	strb	r1, [r0], #4
   16c78:	cmp	r1, #0
   16c7c:	beq	16c8c <__assert_fail@plt+0x5488>
   16c80:	ldmib	r5, {r1, r2}
   16c84:	stm	r0, {r1, r2}
   16c88:	b	16c98 <__assert_fail@plt+0x5494>
   16c8c:	mov	r1, #0
   16c90:	str	r1, [r0]
   16c94:	str	r1, [r0, #4]
   16c98:	ldrb	r0, [r5, #12]
   16c9c:	strb	r0, [r4, #12]
   16ca0:	add	r0, r5, #32
   16ca4:	ldr	r1, [r5, #16]
   16ca8:	cmp	r1, r0
   16cac:	beq	16cb8 <__assert_fail@plt+0x54b4>
   16cb0:	mov	r6, r1
   16cb4:	b	16cc8 <__assert_fail@plt+0x54c4>
   16cb8:	ldr	r2, [r5, #20]
   16cbc:	add	r6, r4, #32
   16cc0:	mov	r0, r6
   16cc4:	bl	114b0 <memcpy@plt>
   16cc8:	str	r6, [r4, #16]
   16ccc:	ldr	r0, [r5, #20]
   16cd0:	str	r0, [r4, #20]
   16cd4:	ldrb	r0, [r5, #24]
   16cd8:	strb	r0, [r4, #24]
   16cdc:	cmp	r0, #0
   16ce0:	ldrne	r0, [r5, #28]
   16ce4:	strne	r0, [r4, #28]
   16ce8:	pop	{r4, r5, r6, sl, fp, pc}
   16cec:	push	{r4, r5, fp, lr}
   16cf0:	add	fp, sp, #8
   16cf4:	cmp	r0, #0
   16cf8:	beq	16d8c <__assert_fail@plt+0x5588>
   16cfc:	mov	r1, #47	; 0x2f
   16d00:	mov	r4, r0
   16d04:	bl	11744 <strrchr@plt>
   16d08:	cmp	r0, #0
   16d0c:	mov	r5, r4
   16d10:	addne	r5, r0, #1
   16d14:	sub	r0, r5, r4
   16d18:	cmp	r0, #7
   16d1c:	blt	16d70 <__assert_fail@plt+0x556c>
   16d20:	movw	r1, #52189	; 0xcbdd
   16d24:	sub	r0, r5, #7
   16d28:	mov	r2, #7
   16d2c:	movt	r1, #1
   16d30:	bl	117c8 <strncmp@plt>
   16d34:	cmp	r0, #0
   16d38:	bne	16d70 <__assert_fail@plt+0x556c>
   16d3c:	movw	r1, #52197	; 0xcbe5
   16d40:	mov	r0, r5
   16d44:	mov	r2, #3
   16d48:	movt	r1, #1
   16d4c:	bl	117c8 <strncmp@plt>
   16d50:	cmp	r0, #0
   16d54:	beq	16d60 <__assert_fail@plt+0x555c>
   16d58:	mov	r4, r5
   16d5c:	b	16d70 <__assert_fail@plt+0x556c>
   16d60:	movw	r0, #57784	; 0xe1b8
   16d64:	add	r4, r5, #3
   16d68:	movt	r0, #2
   16d6c:	str	r4, [r0]
   16d70:	movw	r0, #57792	; 0xe1c0
   16d74:	movt	r0, #2
   16d78:	str	r4, [r0]
   16d7c:	movw	r0, #58012	; 0xe29c
   16d80:	movt	r0, #2
   16d84:	str	r4, [r0]
   16d88:	pop	{r4, r5, fp, pc}
   16d8c:	movw	r0, #57808	; 0xe1d0
   16d90:	mov	r1, #55	; 0x37
   16d94:	mov	r2, #1
   16d98:	movt	r0, #2
   16d9c:	ldr	r3, [r0]
   16da0:	movw	r0, #52133	; 0xcba5
   16da4:	movt	r0, #1
   16da8:	bl	11564 <fwrite@plt>
   16dac:	bl	117d4 <abort@plt>
   16db0:	push	{r4, r5, r6, sl, fp, lr}
   16db4:	add	fp, sp, #16
   16db8:	mov	r4, r0
   16dbc:	movw	r0, #58016	; 0xe2a0
   16dc0:	movt	r0, #2
   16dc4:	cmp	r4, #0
   16dc8:	moveq	r4, r0
   16dcc:	bl	11684 <__errno_location@plt>
   16dd0:	ldr	r6, [r0]
   16dd4:	mov	r5, r0
   16dd8:	mov	r0, r4
   16ddc:	mov	r1, #48	; 0x30
   16de0:	bl	198ec <__assert_fail@plt+0x80e8>
   16de4:	str	r6, [r5]
   16de8:	pop	{r4, r5, r6, sl, fp, pc}
   16dec:	movw	r1, #58016	; 0xe2a0
   16df0:	cmp	r0, #0
   16df4:	movt	r1, #2
   16df8:	movne	r1, r0
   16dfc:	ldr	r0, [r1]
   16e00:	bx	lr
   16e04:	movw	r2, #58016	; 0xe2a0
   16e08:	cmp	r0, #0
   16e0c:	movt	r2, #2
   16e10:	movne	r2, r0
   16e14:	str	r1, [r2]
   16e18:	bx	lr
   16e1c:	movw	r3, #58016	; 0xe2a0
   16e20:	cmp	r0, #0
   16e24:	movt	r3, #2
   16e28:	movne	r3, r0
   16e2c:	ubfx	r0, r1, #5, #3
   16e30:	and	r1, r1, #31
   16e34:	add	r0, r3, r0, lsl #2
   16e38:	ldr	r3, [r0, #8]
   16e3c:	eor	r2, r2, r3, lsr r1
   16e40:	and	r2, r2, #1
   16e44:	eor	r2, r3, r2, lsl r1
   16e48:	str	r2, [r0, #8]
   16e4c:	mov	r0, #1
   16e50:	and	r0, r0, r3, lsr r1
   16e54:	bx	lr
   16e58:	movw	r2, #58016	; 0xe2a0
   16e5c:	cmp	r0, #0
   16e60:	movt	r2, #2
   16e64:	movne	r2, r0
   16e68:	ldr	r0, [r2, #4]
   16e6c:	str	r1, [r2, #4]
   16e70:	bx	lr
   16e74:	movw	r3, #58016	; 0xe2a0
   16e78:	cmp	r0, #0
   16e7c:	movt	r3, #2
   16e80:	movne	r3, r0
   16e84:	cmp	r1, #0
   16e88:	mov	r0, #10
   16e8c:	cmpne	r2, #0
   16e90:	str	r0, [r3]
   16e94:	bne	16ea4 <__assert_fail@plt+0x56a0>
   16e98:	push	{fp, lr}
   16e9c:	mov	fp, sp
   16ea0:	bl	117d4 <abort@plt>
   16ea4:	str	r1, [r3, #40]	; 0x28
   16ea8:	str	r2, [r3, #44]	; 0x2c
   16eac:	bx	lr
   16eb0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16eb4:	add	fp, sp, #28
   16eb8:	sub	sp, sp, #20
   16ebc:	mov	r7, r0
   16ec0:	ldr	r0, [fp, #8]
   16ec4:	movw	r5, #58016	; 0xe2a0
   16ec8:	mov	r8, r3
   16ecc:	mov	r9, r2
   16ed0:	mov	sl, r1
   16ed4:	movt	r5, #2
   16ed8:	cmp	r0, #0
   16edc:	movne	r5, r0
   16ee0:	bl	11684 <__errno_location@plt>
   16ee4:	mov	r4, r0
   16ee8:	ldm	r5, {r0, r1}
   16eec:	ldr	r2, [r5, #40]	; 0x28
   16ef0:	ldr	r3, [r5, #44]	; 0x2c
   16ef4:	add	r5, r5, #8
   16ef8:	ldr	r6, [r4]
   16efc:	stm	sp, {r0, r1, r5}
   16f00:	str	r2, [sp, #12]
   16f04:	str	r3, [sp, #16]
   16f08:	mov	r0, r7
   16f0c:	mov	r1, sl
   16f10:	mov	r2, r9
   16f14:	mov	r3, r8
   16f18:	bl	16f28 <__assert_fail@plt+0x5724>
   16f1c:	str	r6, [r4]
   16f20:	sub	sp, fp, #28
   16f24:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16f28:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16f2c:	add	fp, sp, #28
   16f30:	sub	sp, sp, #156	; 0x9c
   16f34:	str	r0, [sp, #76]	; 0x4c
   16f38:	ldr	r0, [fp, #12]
   16f3c:	mov	r6, r1
   16f40:	str	r3, [sp, #84]	; 0x54
   16f44:	str	r2, [fp, #-84]	; 0xffffffac
   16f48:	and	r1, r0, #4
   16f4c:	str	r1, [sp, #24]
   16f50:	and	r1, r0, #1
   16f54:	str	r1, [sp, #28]
   16f58:	ubfx	r8, r0, #1, #1
   16f5c:	bl	11588 <__ctype_get_mb_cur_max@plt>
   16f60:	str	r0, [sp, #32]
   16f64:	ldr	r0, [fp, #24]
   16f68:	ldr	r7, [fp, #8]
   16f6c:	mov	r1, #0
   16f70:	mov	r2, #0
   16f74:	mov	r4, #1
   16f78:	str	r1, [sp, #52]	; 0x34
   16f7c:	str	r0, [sp, #72]	; 0x48
   16f80:	ldr	r0, [fp, #20]
   16f84:	str	r0, [sp, #68]	; 0x44
   16f88:	mov	r0, #0
   16f8c:	str	r0, [sp, #48]	; 0x30
   16f90:	mov	r0, #0
   16f94:	str	r0, [sp, #92]	; 0x5c
   16f98:	mov	r0, #0
   16f9c:	str	r0, [fp, #-76]	; 0xffffffb4
   16fa0:	mov	r0, #0
   16fa4:	cmp	r7, #10
   16fa8:	bhi	18290 <__assert_fail@plt+0x6a8c>
   16fac:	add	r1, pc, #28
   16fb0:	mov	sl, r6
   16fb4:	ldr	r6, [sp, #76]	; 0x4c
   16fb8:	ldr	ip, [fp, #-84]	; 0xffffffac
   16fbc:	ldr	lr, [sp, #84]	; 0x54
   16fc0:	mov	r9, #0
   16fc4:	mov	r3, #1
   16fc8:	mov	r5, #0
   16fcc:	ldr	pc, [r1, r7, lsl #2]
   16fd0:	andeq	r7, r1, r0, lsr #1
   16fd4:	ldrdeq	r7, [r1], -ip
   16fd8:	strheq	r7, [r1], -r0
   16fdc:	muleq	r1, r8, r0
   16fe0:	ldrdeq	r7, [r1], -r0
   16fe4:	andeq	r7, r1, r4, lsl #2
   16fe8:	andeq	r7, r1, r0, asr #1
   16fec:	andeq	r7, r1, r0, lsl r3
   16ff0:	strdeq	r6, [r1], -ip
   16ff4:	strdeq	r6, [r1], -ip
   16ff8:	andeq	r7, r1, r4, lsr #5
   16ffc:	mov	r9, r4
   17000:	movw	r4, #52279	; 0xcc37
   17004:	mov	r5, r8
   17008:	mov	r8, r2
   1700c:	mov	r0, #0
   17010:	mov	r2, #5
   17014:	movt	r4, #1
   17018:	mov	r1, r4
   1701c:	bl	114ec <dcgettext@plt>
   17020:	cmp	r0, r4
   17024:	str	r0, [sp, #68]	; 0x44
   17028:	bne	171b8 <__assert_fail@plt+0x59b4>
   1702c:	bl	1a85c <__assert_fail@plt+0x9058>
   17030:	ldrb	r1, [r0]
   17034:	and	r1, r1, #223	; 0xdf
   17038:	cmp	r1, #71	; 0x47
   1703c:	beq	17184 <__assert_fail@plt+0x5980>
   17040:	cmp	r1, #85	; 0x55
   17044:	bne	1719c <__assert_fail@plt+0x5998>
   17048:	ldrb	r1, [r0, #1]
   1704c:	and	r1, r1, #223	; 0xdf
   17050:	cmp	r1, #84	; 0x54
   17054:	bne	1719c <__assert_fail@plt+0x5998>
   17058:	ldrb	r1, [r0, #2]
   1705c:	and	r1, r1, #223	; 0xdf
   17060:	cmp	r1, #70	; 0x46
   17064:	bne	1719c <__assert_fail@plt+0x5998>
   17068:	ldrb	r1, [r0, #3]
   1706c:	cmp	r1, #45	; 0x2d
   17070:	ldrbeq	r1, [r0, #4]
   17074:	cmpeq	r1, #56	; 0x38
   17078:	bne	1719c <__assert_fail@plt+0x5998>
   1707c:	ldrb	r0, [r0, #5]
   17080:	cmp	r0, #0
   17084:	movw	r0, #52281	; 0xcc39
   17088:	movt	r0, #1
   1708c:	str	r0, [sp, #68]	; 0x44
   17090:	bne	1719c <__assert_fail@plt+0x5998>
   17094:	b	171b8 <__assert_fail@plt+0x59b4>
   17098:	mov	r0, #1
   1709c:	b	170dc <__assert_fail@plt+0x58d8>
   170a0:	mov	r7, #0
   170a4:	mov	r9, #0
   170a8:	mov	r3, r0
   170ac:	b	1717c <__assert_fail@plt+0x5978>
   170b0:	tst	r8, #1
   170b4:	bne	170dc <__assert_fail@plt+0x58d8>
   170b8:	mov	r3, r0
   170bc:	b	17134 <__assert_fail@plt+0x5930>
   170c0:	mov	r0, #1
   170c4:	mov	r9, #0
   170c8:	mov	r7, #5
   170cc:	b	17118 <__assert_fail@plt+0x5914>
   170d0:	mov	r3, #1
   170d4:	tst	r8, #1
   170d8:	beq	17134 <__assert_fail@plt+0x5930>
   170dc:	mov	r1, #1
   170e0:	mov	r9, #0
   170e4:	mov	r7, #2
   170e8:	mov	r3, r0
   170ec:	mov	r5, #1
   170f0:	str	r1, [fp, #-76]	; 0xffffffb4
   170f4:	movw	r1, #52113	; 0xcb91
   170f8:	movt	r1, #1
   170fc:	str	r1, [sp, #92]	; 0x5c
   17100:	b	17310 <__assert_fail@plt+0x5b0c>
   17104:	mov	r7, #5
   17108:	tst	r8, #1
   1710c:	beq	17154 <__assert_fail@plt+0x5950>
   17110:	mov	r0, #1
   17114:	mov	r9, #0
   17118:	str	r0, [fp, #-76]	; 0xffffffb4
   1711c:	movw	r0, #52277	; 0xcc35
   17120:	mov	r3, #1
   17124:	mov	r5, #1
   17128:	movt	r0, #1
   1712c:	str	r0, [sp, #92]	; 0x5c
   17130:	b	17310 <__assert_fail@plt+0x5b0c>
   17134:	cmp	sl, #0
   17138:	mov	r9, #1
   1713c:	mov	r7, #2
   17140:	movne	r0, #39	; 0x27
   17144:	strbne	r0, [r6]
   17148:	movw	r0, #52113	; 0xcb91
   1714c:	movt	r0, #1
   17150:	b	17170 <__assert_fail@plt+0x596c>
   17154:	cmp	sl, #0
   17158:	mov	r9, #1
   1715c:	mov	r3, #1
   17160:	movne	r0, #34	; 0x22
   17164:	strbne	r0, [r6]
   17168:	movw	r0, #52277	; 0xcc35
   1716c:	movt	r0, #1
   17170:	str	r0, [sp, #92]	; 0x5c
   17174:	mov	r0, #1
   17178:	str	r0, [fp, #-76]	; 0xffffffb4
   1717c:	mov	r5, #0
   17180:	b	17310 <__assert_fail@plt+0x5b0c>
   17184:	ldrb	r1, [r0, #1]
   17188:	and	r1, r1, #223	; 0xdf
   1718c:	cmp	r1, #66	; 0x42
   17190:	ldrbeq	r1, [r0, #2]
   17194:	cmpeq	r1, #49	; 0x31
   17198:	beq	180b8 <__assert_fail@plt+0x68b4>
   1719c:	movw	r0, #52113	; 0xcb91
   171a0:	movw	r1, #52277	; 0xcc35
   171a4:	cmp	r7, #9
   171a8:	movt	r0, #1
   171ac:	movt	r1, #1
   171b0:	moveq	r0, r1
   171b4:	str	r0, [sp, #68]	; 0x44
   171b8:	movw	r4, #52113	; 0xcb91
   171bc:	mov	r0, #0
   171c0:	mov	r2, #5
   171c4:	movt	r4, #1
   171c8:	mov	r1, r4
   171cc:	bl	114ec <dcgettext@plt>
   171d0:	cmp	r0, r4
   171d4:	str	r0, [sp, #72]	; 0x48
   171d8:	beq	171e8 <__assert_fail@plt+0x59e4>
   171dc:	mov	r4, r9
   171e0:	mov	r2, r8
   171e4:	b	172a0 <__assert_fail@plt+0x5a9c>
   171e8:	bl	1a85c <__assert_fail@plt+0x9058>
   171ec:	ldrb	r1, [r0]
   171f0:	mov	r4, r9
   171f4:	and	r1, r1, #223	; 0xdf
   171f8:	cmp	r1, #71	; 0x47
   171fc:	beq	17258 <__assert_fail@plt+0x5a54>
   17200:	cmp	r1, #85	; 0x55
   17204:	mov	r2, r8
   17208:	bne	17280 <__assert_fail@plt+0x5a7c>
   1720c:	ldrb	r1, [r0, #1]
   17210:	and	r1, r1, #223	; 0xdf
   17214:	cmp	r1, #84	; 0x54
   17218:	bne	17280 <__assert_fail@plt+0x5a7c>
   1721c:	ldrb	r1, [r0, #2]
   17220:	and	r1, r1, #223	; 0xdf
   17224:	cmp	r1, #70	; 0x46
   17228:	ldrbeq	r1, [r0, #3]
   1722c:	cmpeq	r1, #45	; 0x2d
   17230:	bne	17280 <__assert_fail@plt+0x5a7c>
   17234:	ldrb	r1, [r0, #4]
   17238:	cmp	r1, #56	; 0x38
   1723c:	ldrbeq	r0, [r0, #5]
   17240:	cmpeq	r0, #0
   17244:	bne	17280 <__assert_fail@plt+0x5a7c>
   17248:	movw	r0, #52285	; 0xcc3d
   1724c:	movt	r0, #1
   17250:	str	r0, [sp, #72]	; 0x48
   17254:	b	172a0 <__assert_fail@plt+0x5a9c>
   17258:	ldrb	r1, [r0, #1]
   1725c:	mov	r2, r8
   17260:	and	r1, r1, #223	; 0xdf
   17264:	cmp	r1, #66	; 0x42
   17268:	bne	17280 <__assert_fail@plt+0x5a7c>
   1726c:	ldrb	r1, [r0, #2]
   17270:	cmp	r1, #49	; 0x31
   17274:	ldrbeq	r1, [r0, #3]
   17278:	cmpeq	r1, #56	; 0x38
   1727c:	beq	180fc <__assert_fail@plt+0x68f8>
   17280:	movw	r0, #52113	; 0xcb91
   17284:	cmp	r7, #9
   17288:	movt	r0, #1
   1728c:	mov	r1, r0
   17290:	movw	r0, #52277	; 0xcc35
   17294:	movt	r0, #1
   17298:	moveq	r1, r0
   1729c:	str	r1, [sp, #72]	; 0x48
   172a0:	mov	r8, r5
   172a4:	mov	r9, #0
   172a8:	tst	r8, #1
   172ac:	mov	r5, r8
   172b0:	str	r2, [fp, #-48]	; 0xffffffd0
   172b4:	bne	172ec <__assert_fail@plt+0x5ae8>
   172b8:	ldr	r0, [sp, #68]	; 0x44
   172bc:	ldrb	r0, [r0]
   172c0:	cmp	r0, #0
   172c4:	beq	172ec <__assert_fail@plt+0x5ae8>
   172c8:	ldr	r1, [sp, #68]	; 0x44
   172cc:	mov	r9, #0
   172d0:	add	r1, r1, #1
   172d4:	cmp	r9, sl
   172d8:	strbcc	r0, [r6, r9]
   172dc:	ldrb	r0, [r1, r9]
   172e0:	add	r9, r9, #1
   172e4:	cmp	r0, #0
   172e8:	bne	172d4 <__assert_fail@plt+0x5ad0>
   172ec:	ldr	r8, [sp, #72]	; 0x48
   172f0:	mov	r0, r8
   172f4:	bl	11654 <strlen@plt>
   172f8:	ldr	ip, [fp, #-84]	; 0xffffffac
   172fc:	ldr	lr, [sp, #84]	; 0x54
   17300:	ldr	r2, [fp, #-48]	; 0xffffffd0
   17304:	str	r0, [fp, #-76]	; 0xffffffb4
   17308:	str	r8, [sp, #92]	; 0x5c
   1730c:	mov	r3, #1
   17310:	ldr	r0, [fp, #16]
   17314:	str	r7, [fp, #-64]	; 0xffffffc0
   17318:	str	r5, [fp, #-72]	; 0xffffffb8
   1731c:	str	r3, [sp, #80]	; 0x50
   17320:	cmp	r0, #0
   17324:	movwne	r0, #1
   17328:	and	r0, r0, r5
   1732c:	str	r0, [fp, #-88]	; 0xffffffa8
   17330:	ldr	r0, [fp, #-76]	; 0xffffffb4
   17334:	cmp	r0, #0
   17338:	movwne	r0, #1
   1733c:	subs	r7, r7, #2
   17340:	and	r1, r0, r5
   17344:	str	r7, [fp, #-80]	; 0xffffffb0
   17348:	and	r1, r3, r1
   1734c:	str	r1, [sp, #40]	; 0x28
   17350:	clz	r1, r7
   17354:	lsr	r1, r1, #5
   17358:	and	r1, r1, r5
   1735c:	eor	r5, r5, #1
   17360:	str	r1, [sp, #36]	; 0x24
   17364:	mov	r1, r7
   17368:	str	r5, [sp, #88]	; 0x58
   1736c:	mov	r7, #0
   17370:	movwne	r1, #1
   17374:	orr	r5, r1, r5
   17378:	and	r1, r1, r3
   1737c:	and	r0, r0, r1
   17380:	str	r5, [sp, #60]	; 0x3c
   17384:	str	r1, [fp, #-68]	; 0xffffffbc
   17388:	str	r0, [fp, #-60]	; 0xffffffc4
   1738c:	eor	r0, r3, #1
   17390:	str	r0, [sp, #44]	; 0x2c
   17394:	cmn	lr, #1
   17398:	beq	173a8 <__assert_fail@plt+0x5ba4>
   1739c:	cmp	r7, lr
   173a0:	bne	173b4 <__assert_fail@plt+0x5bb0>
   173a4:	b	1802c <__assert_fail@plt+0x6828>
   173a8:	ldrb	r0, [ip, r7]
   173ac:	cmp	r0, #0
   173b0:	beq	18034 <__assert_fail@plt+0x6830>
   173b4:	ldr	r0, [fp, #-60]	; 0xffffffc4
   173b8:	mov	r8, #0
   173bc:	str	r4, [fp, #-52]	; 0xffffffcc
   173c0:	str	r2, [fp, #-48]	; 0xffffffd0
   173c4:	cmp	r0, #0
   173c8:	beq	173fc <__assert_fail@plt+0x5bf8>
   173cc:	ldr	r0, [fp, #-76]	; 0xffffffb4
   173d0:	add	r4, r7, r0
   173d4:	cmp	r0, #2
   173d8:	bcc	173f4 <__assert_fail@plt+0x5bf0>
   173dc:	cmn	lr, #1
   173e0:	bne	173f4 <__assert_fail@plt+0x5bf0>
   173e4:	mov	r0, ip
   173e8:	bl	11654 <strlen@plt>
   173ec:	ldr	ip, [fp, #-84]	; 0xffffffac
   173f0:	mov	lr, r0
   173f4:	cmp	r4, lr
   173f8:	bls	17414 <__assert_fail@plt+0x5c10>
   173fc:	mov	r0, #0
   17400:	str	r0, [fp, #-56]	; 0xffffffc8
   17404:	ldrb	r5, [ip, r7]
   17408:	cmp	r5, #126	; 0x7e
   1740c:	bls	17464 <__assert_fail@plt+0x5c60>
   17410:	b	1786c <__assert_fail@plt+0x6068>
   17414:	ldr	r1, [sp, #92]	; 0x5c
   17418:	ldr	r2, [fp, #-76]	; 0xffffffb4
   1741c:	add	r0, ip, r7
   17420:	mov	r4, lr
   17424:	bl	114e0 <memcmp@plt>
   17428:	ldr	r2, [sp, #88]	; 0x58
   1742c:	cmp	r0, #0
   17430:	mov	r1, r0
   17434:	movwne	r1, #1
   17438:	orr	r1, r1, r2
   1743c:	tst	r1, #1
   17440:	beq	18140 <__assert_fail@plt+0x693c>
   17444:	ldr	ip, [fp, #-84]	; 0xffffffac
   17448:	clz	r0, r0
   1744c:	mov	lr, r4
   17450:	lsr	r0, r0, #5
   17454:	str	r0, [fp, #-56]	; 0xffffffc8
   17458:	ldrb	r5, [ip, r7]
   1745c:	cmp	r5, #126	; 0x7e
   17460:	bhi	1786c <__assert_fail@plt+0x6068>
   17464:	add	r3, pc, #16
   17468:	mov	r4, #1
   1746c:	mov	r2, #110	; 0x6e
   17470:	mov	r0, #97	; 0x61
   17474:	mov	r1, #0
   17478:	ldr	pc, [r3, r5, lsl #2]
   1747c:	andeq	r7, r1, ip, asr #14
   17480:	andeq	r7, r1, ip, ror #16
   17484:	andeq	r7, r1, ip, ror #16
   17488:	andeq	r7, r1, ip, ror #16
   1748c:	andeq	r7, r1, ip, ror #16
   17490:	andeq	r7, r1, ip, ror #16
   17494:	andeq	r7, r1, ip, ror #16
   17498:	andeq	r7, r1, r8, asr #18
   1749c:	andeq	r7, r1, ip, lsr #14
   174a0:	andeq	r7, r1, r4, lsl r7
   174a4:	andeq	r7, r1, r8, lsr r7
   174a8:	andeq	r7, r1, r8, asr #15
   174ac:	andeq	r7, r1, ip, lsl #14
   174b0:	andeq	r7, r1, r4, lsr r7
   174b4:	andeq	r7, r1, ip, ror #16
   174b8:	andeq	r7, r1, ip, ror #16
   174bc:	andeq	r7, r1, ip, ror #16
   174c0:	andeq	r7, r1, ip, ror #16
   174c4:	andeq	r7, r1, ip, ror #16
   174c8:	andeq	r7, r1, ip, ror #16
   174cc:	andeq	r7, r1, ip, ror #16
   174d0:	andeq	r7, r1, ip, ror #16
   174d4:	andeq	r7, r1, ip, ror #16
   174d8:	andeq	r7, r1, ip, ror #16
   174dc:	andeq	r7, r1, ip, ror #16
   174e0:	andeq	r7, r1, ip, ror #16
   174e4:	andeq	r7, r1, ip, ror #16
   174e8:	andeq	r7, r1, ip, ror #16
   174ec:	andeq	r7, r1, ip, ror #16
   174f0:	andeq	r7, r1, ip, ror #16
   174f4:	andeq	r7, r1, ip, ror #16
   174f8:	andeq	r7, r1, ip, ror #16
   174fc:	andeq	r7, r1, r4, asr #17
   17500:	andeq	r7, r1, r8, asr #17
   17504:	andeq	r7, r1, r8, asr #17
   17508:	muleq	r1, r8, r6
   1750c:	andeq	r7, r1, r8, asr #17
   17510:	andeq	r7, r1, r8, ror r6
   17514:	andeq	r7, r1, r8, asr #17
   17518:	ldrdeq	r7, [r1], -r0
   1751c:	andeq	r7, r1, r8, asr #17
   17520:	andeq	r7, r1, r8, asr #17
   17524:	andeq	r7, r1, r8, asr #17
   17528:	andeq	r7, r1, r8, ror r6
   1752c:	andeq	r7, r1, r8, ror r6
   17530:	andeq	r7, r1, r8, ror r6
   17534:	andeq	r7, r1, r8, ror r6
   17538:	andeq	r7, r1, r8, ror r6
   1753c:	andeq	r7, r1, r8, ror r6
   17540:	andeq	r7, r1, r8, ror r6
   17544:	andeq	r7, r1, r8, ror r6
   17548:	andeq	r7, r1, r8, ror r6
   1754c:	andeq	r7, r1, r8, ror r6
   17550:	andeq	r7, r1, r8, ror r6
   17554:	andeq	r7, r1, r8, ror r6
   17558:	andeq	r7, r1, r8, ror r6
   1755c:	andeq	r7, r1, r8, ror r6
   17560:	andeq	r7, r1, r8, ror r6
   17564:	andeq	r7, r1, r8, ror r6
   17568:	andeq	r7, r1, r8, asr #17
   1756c:	andeq	r7, r1, r8, asr #17
   17570:	andeq	r7, r1, r8, asr #17
   17574:	andeq	r7, r1, r8, asr #17
   17578:	andeq	r7, r1, ip, lsl #15
   1757c:	andeq	r7, r1, ip, ror #16
   17580:	andeq	r7, r1, r8, ror r6
   17584:	andeq	r7, r1, r8, ror r6
   17588:	andeq	r7, r1, r8, ror r6
   1758c:	andeq	r7, r1, r8, ror r6
   17590:	andeq	r7, r1, r8, ror r6
   17594:	andeq	r7, r1, r8, ror r6
   17598:	andeq	r7, r1, r8, ror r6
   1759c:	andeq	r7, r1, r8, ror r6
   175a0:	andeq	r7, r1, r8, ror r6
   175a4:	andeq	r7, r1, r8, ror r6
   175a8:	andeq	r7, r1, r8, ror r6
   175ac:	andeq	r7, r1, r8, ror r6
   175b0:	andeq	r7, r1, r8, ror r6
   175b4:	andeq	r7, r1, r8, ror r6
   175b8:	andeq	r7, r1, r8, ror r6
   175bc:	andeq	r7, r1, r8, ror r6
   175c0:	andeq	r7, r1, r8, ror r6
   175c4:	andeq	r7, r1, r8, ror r6
   175c8:	andeq	r7, r1, r8, ror r6
   175cc:	andeq	r7, r1, r8, ror r6
   175d0:	andeq	r7, r1, r8, ror r6
   175d4:	andeq	r7, r1, r8, ror r6
   175d8:	andeq	r7, r1, r8, ror r6
   175dc:	andeq	r7, r1, r8, ror r6
   175e0:	andeq	r7, r1, r8, ror r6
   175e4:	andeq	r7, r1, r8, ror r6
   175e8:	andeq	r7, r1, r8, asr #17
   175ec:	ldrdeq	r7, [r1], -r8
   175f0:	andeq	r7, r1, r8, ror r6
   175f4:	andeq	r7, r1, r8, asr #17
   175f8:	andeq	r7, r1, r8, ror r6
   175fc:	andeq	r7, r1, r8, asr #17
   17600:	andeq	r7, r1, r8, ror r6
   17604:	andeq	r7, r1, r8, ror r6
   17608:	andeq	r7, r1, r8, ror r6
   1760c:	andeq	r7, r1, r8, ror r6
   17610:	andeq	r7, r1, r8, ror r6
   17614:	andeq	r7, r1, r8, ror r6
   17618:	andeq	r7, r1, r8, ror r6
   1761c:	andeq	r7, r1, r8, ror r6
   17620:	andeq	r7, r1, r8, ror r6
   17624:	andeq	r7, r1, r8, ror r6
   17628:	andeq	r7, r1, r8, ror r6
   1762c:	andeq	r7, r1, r8, ror r6
   17630:	andeq	r7, r1, r8, ror r6
   17634:	andeq	r7, r1, r8, ror r6
   17638:	andeq	r7, r1, r8, ror r6
   1763c:	andeq	r7, r1, r8, ror r6
   17640:	andeq	r7, r1, r8, ror r6
   17644:	andeq	r7, r1, r8, ror r6
   17648:	andeq	r7, r1, r8, ror r6
   1764c:	andeq	r7, r1, r8, ror r6
   17650:	andeq	r7, r1, r8, ror r6
   17654:	andeq	r7, r1, r8, ror r6
   17658:	andeq	r7, r1, r8, ror r6
   1765c:	andeq	r7, r1, r8, ror r6
   17660:	andeq	r7, r1, r8, ror r6
   17664:	andeq	r7, r1, r8, ror r6
   17668:			; <UNDEFINED> instruction: 0x000176b8
   1766c:	andeq	r7, r1, r8, asr #17
   17670:			; <UNDEFINED> instruction: 0x000176b8
   17674:	muleq	r1, r8, r6
   17678:	ldr	r0, [fp, #-68]	; 0xffffffbc
   1767c:	cmp	r0, #0
   17680:	beq	1795c <__assert_fail@plt+0x6158>
   17684:	ldr	r0, [fp, #16]
   17688:	cmp	r0, #0
   1768c:	mov	r0, r5
   17690:	bne	1796c <__assert_fail@plt+0x6168>
   17694:	b	1798c <__assert_fail@plt+0x6188>
   17698:	mov	r4, #0
   1769c:	cmp	r7, #0
   176a0:	beq	178c4 <__assert_fail@plt+0x60c0>
   176a4:	mov	r8, #0
   176a8:	ldr	r0, [fp, #-68]	; 0xffffffbc
   176ac:	cmp	r0, #0
   176b0:	bne	17684 <__assert_fail@plt+0x5e80>
   176b4:	b	1795c <__assert_fail@plt+0x6158>
   176b8:	mov	r4, #0
   176bc:	cmn	lr, #1
   176c0:	beq	1789c <__assert_fail@plt+0x6098>
   176c4:	cmp	r7, #0
   176c8:	bne	176a4 <__assert_fail@plt+0x5ea0>
   176cc:	cmp	lr, #1
   176d0:	beq	178c4 <__assert_fail@plt+0x60c0>
   176d4:	b	176a4 <__assert_fail@plt+0x5ea0>
   176d8:	ldr	r0, [fp, #-64]	; 0xffffffc0
   176dc:	cmp	r0, #2
   176e0:	bne	178f4 <__assert_fail@plt+0x60f0>
   176e4:	ldr	r0, [fp, #-72]	; 0xffffffb8
   176e8:	tst	r0, #1
   176ec:	bne	18154 <__assert_fail@plt+0x6950>
   176f0:	mov	r8, #0
   176f4:	mov	r0, #92	; 0x5c
   176f8:	mov	r4, #0
   176fc:	cmp	r8, #0
   17700:	beq	17914 <__assert_fail@plt+0x6110>
   17704:	ldr	r2, [fp, #-48]	; 0xffffffd0
   17708:	b	17a08 <__assert_fail@plt+0x6204>
   1770c:	mov	r0, #102	; 0x66
   17710:	b	17948 <__assert_fail@plt+0x6144>
   17714:	mov	r2, #116	; 0x74
   17718:	ldr	r0, [sp, #60]	; 0x3c
   1771c:	tst	r0, #1
   17720:	mov	r0, r2
   17724:	bne	17948 <__assert_fail@plt+0x6144>
   17728:	b	18154 <__assert_fail@plt+0x6950>
   1772c:	mov	r0, #98	; 0x62
   17730:	b	17948 <__assert_fail@plt+0x6144>
   17734:	mov	r2, #114	; 0x72
   17738:	ldr	r0, [sp, #60]	; 0x3c
   1773c:	tst	r0, #1
   17740:	mov	r0, r2
   17744:	bne	17948 <__assert_fail@plt+0x6144>
   17748:	b	18154 <__assert_fail@plt+0x6950>
   1774c:	ldr	r0, [sp, #80]	; 0x50
   17750:	tst	r0, #1
   17754:	beq	17a30 <__assert_fail@plt+0x622c>
   17758:	ldr	r0, [fp, #-72]	; 0xffffffb8
   1775c:	tst	r0, #1
   17760:	bne	1827c <__assert_fail@plt+0x6a78>
   17764:	ldr	r0, [fp, #-64]	; 0xffffffc0
   17768:	ldr	r2, [fp, #-48]	; 0xffffffd0
   1776c:	cmp	r0, #2
   17770:	ldr	r0, [fp, #-80]	; 0xffffffb0
   17774:	movwne	r0, #1
   17778:	orr	r0, r0, r2
   1777c:	tst	r0, #1
   17780:	beq	17d28 <__assert_fail@plt+0x6524>
   17784:	mov	r0, r9
   17788:	b	17d5c <__assert_fail@plt+0x6558>
   1778c:	ldr	r0, [fp, #-64]	; 0xffffffc0
   17790:	mov	r8, #0
   17794:	mov	r5, #63	; 0x3f
   17798:	cmp	r0, #5
   1779c:	beq	17be4 <__assert_fail@plt+0x63e0>
   177a0:	cmp	r0, #2
   177a4:	bne	17c94 <__assert_fail@plt+0x6490>
   177a8:	ldr	r0, [fp, #-72]	; 0xffffffb8
   177ac:	tst	r0, #1
   177b0:	bne	18154 <__assert_fail@plt+0x6950>
   177b4:	mov	r4, #0
   177b8:	ldr	r0, [fp, #-68]	; 0xffffffbc
   177bc:	cmp	r0, #0
   177c0:	bne	17684 <__assert_fail@plt+0x5e80>
   177c4:	b	1795c <__assert_fail@plt+0x6158>
   177c8:	mov	r0, #118	; 0x76
   177cc:	b	17948 <__assert_fail@plt+0x6144>
   177d0:	mov	r0, #1
   177d4:	mov	r5, #39	; 0x27
   177d8:	str	r0, [sp, #52]	; 0x34
   177dc:	ldr	r0, [fp, #-64]	; 0xffffffc0
   177e0:	cmp	r0, #2
   177e4:	bne	17858 <__assert_fail@plt+0x6054>
   177e8:	ldr	r0, [fp, #-72]	; 0xffffffb8
   177ec:	tst	r0, #1
   177f0:	bne	18154 <__assert_fail@plt+0x6950>
   177f4:	ldr	r2, [sp, #48]	; 0x30
   177f8:	clz	r1, sl
   177fc:	mov	r8, #0
   17800:	lsr	r1, r1, #5
   17804:	cmp	r2, #0
   17808:	mov	r0, r2
   1780c:	movwne	r0, #1
   17810:	orrs	r0, r0, r1
   17814:	moveq	r2, sl
   17818:	moveq	sl, r0
   1781c:	cmp	r9, sl
   17820:	str	r2, [sp, #48]	; 0x30
   17824:	movcc	r0, #39	; 0x27
   17828:	strbcc	r0, [r6, r9]
   1782c:	add	r0, r9, #1
   17830:	cmp	r0, sl
   17834:	movcc	r1, #92	; 0x5c
   17838:	strbcc	r1, [r6, r0]
   1783c:	add	r0, r9, #2
   17840:	add	r9, r9, #3
   17844:	cmp	r0, sl
   17848:	movcc	r1, #39	; 0x27
   1784c:	strbcc	r1, [r6, r0]
   17850:	mov	r0, #0
   17854:	str	r0, [fp, #-48]	; 0xffffffd0
   17858:	mov	r4, #1
   1785c:	ldr	r0, [fp, #-68]	; 0xffffffbc
   17860:	cmp	r0, #0
   17864:	bne	17684 <__assert_fail@plt+0x5e80>
   17868:	b	1795c <__assert_fail@plt+0x6158>
   1786c:	ldr	r0, [sp, #32]
   17870:	cmp	r0, #1
   17874:	bne	17a60 <__assert_fail@plt+0x625c>
   17878:	str	lr, [sp, #84]	; 0x54
   1787c:	bl	11624 <__ctype_b_loc@plt>
   17880:	ldr	r0, [r0]
   17884:	ldr	ip, [fp, #-84]	; 0xffffffac
   17888:	mov	r1, #1
   1788c:	add	r0, r0, r5, lsl #1
   17890:	ldrb	r0, [r0, #1]
   17894:	ubfx	r4, r0, #6, #1
   17898:	b	17e58 <__assert_fail@plt+0x6654>
   1789c:	cmp	r7, #0
   178a0:	ldrbeq	r0, [ip, #1]
   178a4:	cmpeq	r0, #0
   178a8:	beq	178c4 <__assert_fail@plt+0x60c0>
   178ac:	mvn	lr, #0
   178b0:	mov	r8, #0
   178b4:	ldr	r0, [fp, #-68]	; 0xffffffbc
   178b8:	cmp	r0, #0
   178bc:	bne	17684 <__assert_fail@plt+0x5e80>
   178c0:	b	1795c <__assert_fail@plt+0x6158>
   178c4:	mov	r1, #1
   178c8:	ldr	r0, [fp, #-64]	; 0xffffffc0
   178cc:	cmp	r0, #2
   178d0:	bne	178e0 <__assert_fail@plt+0x60dc>
   178d4:	ldr	r0, [fp, #-72]	; 0xffffffb8
   178d8:	tst	r0, #1
   178dc:	bne	18154 <__assert_fail@plt+0x6950>
   178e0:	mov	r4, r1
   178e4:	ldr	r0, [fp, #-68]	; 0xffffffbc
   178e8:	cmp	r0, #0
   178ec:	bne	17684 <__assert_fail@plt+0x5e80>
   178f0:	b	1795c <__assert_fail@plt+0x6158>
   178f4:	ldr	r1, [sp, #40]	; 0x28
   178f8:	mov	r8, #0
   178fc:	mov	r0, #92	; 0x5c
   17900:	cmp	r1, #0
   17904:	beq	17948 <__assert_fail@plt+0x6144>
   17908:	mov	r4, #0
   1790c:	cmp	r8, #0
   17910:	bne	17704 <__assert_fail@plt+0x5f00>
   17914:	ldr	r2, [fp, #-48]	; 0xffffffd0
   17918:	tst	r2, #1
   1791c:	beq	17a08 <__assert_fail@plt+0x6204>
   17920:	cmp	r9, sl
   17924:	movcc	r1, #39	; 0x27
   17928:	strbcc	r1, [r6, r9]
   1792c:	add	r1, r9, #1
   17930:	add	r9, r9, #2
   17934:	cmp	r1, sl
   17938:	movcc	r2, #39	; 0x27
   1793c:	strbcc	r2, [r6, r1]
   17940:	mov	r2, #0
   17944:	b	17a08 <__assert_fail@plt+0x6204>
   17948:	ldr	r1, [sp, #80]	; 0x50
   1794c:	mov	r4, #0
   17950:	mov	r8, #0
   17954:	tst	r1, #1
   17958:	bne	17998 <__assert_fail@plt+0x6194>
   1795c:	ldr	r0, [fp, #-88]	; 0xffffffa8
   17960:	cmp	r0, #0
   17964:	mov	r0, r5
   17968:	beq	1798c <__assert_fail@plt+0x6188>
   1796c:	ldr	r1, [fp, #16]
   17970:	ubfx	r0, r5, #5, #3
   17974:	mov	r2, #1
   17978:	ldr	r0, [r1, r0, lsl #2]
   1797c:	and	r1, r5, #31
   17980:	tst	r0, r2, lsl r1
   17984:	mov	r0, r5
   17988:	bne	17998 <__assert_fail@plt+0x6194>
   1798c:	ldr	r1, [fp, #-56]	; 0xffffffc8
   17990:	cmp	r1, #0
   17994:	beq	17df0 <__assert_fail@plt+0x65ec>
   17998:	ldr	r1, [fp, #-72]	; 0xffffffb8
   1799c:	tst	r1, #1
   179a0:	bne	18134 <__assert_fail@plt+0x6930>
   179a4:	ldr	r1, [fp, #-64]	; 0xffffffc0
   179a8:	ldr	r2, [fp, #-48]	; 0xffffffd0
   179ac:	cmp	r1, #2
   179b0:	ldr	r1, [fp, #-80]	; 0xffffffb0
   179b4:	movwne	r1, #1
   179b8:	orr	r1, r1, r2
   179bc:	tst	r1, #1
   179c0:	bne	179f8 <__assert_fail@plt+0x61f4>
   179c4:	cmp	r9, sl
   179c8:	movcc	r1, #39	; 0x27
   179cc:	strbcc	r1, [r6, r9]
   179d0:	add	r1, r9, #1
   179d4:	cmp	r1, sl
   179d8:	movcc	r2, #36	; 0x24
   179dc:	strbcc	r2, [r6, r1]
   179e0:	add	r1, r9, #2
   179e4:	add	r9, r9, #3
   179e8:	cmp	r1, sl
   179ec:	movcc	r2, #39	; 0x27
   179f0:	strbcc	r2, [r6, r1]
   179f4:	mov	r2, #1
   179f8:	cmp	r9, sl
   179fc:	movcc	r1, #92	; 0x5c
   17a00:	strbcc	r1, [r6, r9]
   17a04:	add	r9, r9, #1
   17a08:	cmp	r9, sl
   17a0c:	add	r7, r7, #1
   17a10:	strbcc	r0, [r6, r9]
   17a14:	ldr	r0, [fp, #-52]	; 0xffffffcc
   17a18:	add	r9, r9, #1
   17a1c:	and	r0, r0, r4
   17a20:	mov	r4, r0
   17a24:	cmn	lr, #1
   17a28:	bne	1739c <__assert_fail@plt+0x5b98>
   17a2c:	b	173a8 <__assert_fail@plt+0x5ba4>
   17a30:	ldr	r0, [sp, #28]
   17a34:	mov	r4, #0
   17a38:	mov	r8, #0
   17a3c:	mov	r5, #0
   17a40:	cmp	r0, #0
   17a44:	beq	1795c <__assert_fail@plt+0x6158>
   17a48:	ldr	r4, [fp, #-52]	; 0xffffffcc
   17a4c:	ldr	r2, [fp, #-48]	; 0xffffffd0
   17a50:	add	r7, r7, #1
   17a54:	cmn	lr, #1
   17a58:	bne	1739c <__assert_fail@plt+0x5b98>
   17a5c:	b	173a8 <__assert_fail@plt+0x5ba4>
   17a60:	mov	r0, #0
   17a64:	cmn	lr, #1
   17a68:	str	r0, [fp, #-36]	; 0xffffffdc
   17a6c:	str	r0, [fp, #-40]	; 0xffffffd8
   17a70:	bne	17a84 <__assert_fail@plt+0x6280>
   17a74:	mov	r0, ip
   17a78:	bl	11654 <strlen@plt>
   17a7c:	ldr	ip, [fp, #-84]	; 0xffffffac
   17a80:	mov	lr, r0
   17a84:	ldr	r0, [sp, #36]	; 0x24
   17a88:	str	sl, [sp, #56]	; 0x38
   17a8c:	str	lr, [sp, #84]	; 0x54
   17a90:	cmp	r0, #0
   17a94:	beq	17cac <__assert_fail@plt+0x64a8>
   17a98:	add	r0, ip, r7
   17a9c:	mov	r4, #1
   17aa0:	mov	r6, #0
   17aa4:	sub	sl, fp, #40	; 0x28
   17aa8:	str	r0, [sp, #20]
   17aac:	str	r6, [sp, #64]	; 0x40
   17ab0:	add	r6, r6, r7
   17ab4:	sub	r0, fp, #44	; 0x2c
   17ab8:	mov	r3, sl
   17abc:	add	r1, ip, r6
   17ac0:	sub	r2, lr, r6
   17ac4:	bl	1a680 <__assert_fail@plt+0x8e7c>
   17ac8:	cmn	r0, #2
   17acc:	beq	17e08 <__assert_fail@plt+0x6604>
   17ad0:	ldr	sl, [sp, #56]	; 0x38
   17ad4:	cmn	r0, #1
   17ad8:	beq	17dfc <__assert_fail@plt+0x65f8>
   17adc:	cmp	r0, #0
   17ae0:	beq	17e00 <__assert_fail@plt+0x65fc>
   17ae4:	cmp	r0, #2
   17ae8:	bcc	17ba8 <__assert_fail@plt+0x63a4>
   17aec:	ldr	r1, [sp, #64]	; 0x40
   17af0:	ldr	r2, [sp, #20]
   17af4:	add	r1, r2, r1
   17af8:	mov	r2, #1
   17afc:	ldrb	r3, [r1, r2]
   17b00:	sub	r3, r3, #91	; 0x5b
   17b04:	cmp	r3, #33	; 0x21
   17b08:	bhi	17b9c <__assert_fail@plt+0x6398>
   17b0c:	add	r6, pc, #0
   17b10:	ldr	pc, [r6, r3, lsl #2]
   17b14:	andeq	r8, r1, r0, ror #2
   17b18:	andeq	r8, r1, r0, ror #2
   17b1c:	muleq	r1, ip, fp
   17b20:	andeq	r8, r1, r0, ror #2
   17b24:	muleq	r1, ip, fp
   17b28:	andeq	r8, r1, r0, ror #2
   17b2c:	muleq	r1, ip, fp
   17b30:	muleq	r1, ip, fp
   17b34:	muleq	r1, ip, fp
   17b38:	muleq	r1, ip, fp
   17b3c:	muleq	r1, ip, fp
   17b40:	muleq	r1, ip, fp
   17b44:	muleq	r1, ip, fp
   17b48:	muleq	r1, ip, fp
   17b4c:	muleq	r1, ip, fp
   17b50:	muleq	r1, ip, fp
   17b54:	muleq	r1, ip, fp
   17b58:	muleq	r1, ip, fp
   17b5c:	muleq	r1, ip, fp
   17b60:	muleq	r1, ip, fp
   17b64:	muleq	r1, ip, fp
   17b68:	muleq	r1, ip, fp
   17b6c:	muleq	r1, ip, fp
   17b70:	muleq	r1, ip, fp
   17b74:	muleq	r1, ip, fp
   17b78:	muleq	r1, ip, fp
   17b7c:	muleq	r1, ip, fp
   17b80:	muleq	r1, ip, fp
   17b84:	muleq	r1, ip, fp
   17b88:	muleq	r1, ip, fp
   17b8c:	muleq	r1, ip, fp
   17b90:	muleq	r1, ip, fp
   17b94:	muleq	r1, ip, fp
   17b98:	andeq	r8, r1, r0, ror #2
   17b9c:	add	r2, r2, #1
   17ba0:	cmp	r2, r0
   17ba4:	bcc	17afc <__assert_fail@plt+0x62f8>
   17ba8:	ldr	r6, [sp, #64]	; 0x40
   17bac:	add	r6, r0, r6
   17bb0:	ldr	r0, [fp, #-44]	; 0xffffffd4
   17bb4:	bl	11540 <iswprint@plt>
   17bb8:	cmp	r0, #0
   17bbc:	sub	sl, fp, #40	; 0x28
   17bc0:	movwne	r0, #1
   17bc4:	and	r4, r4, r0
   17bc8:	mov	r0, sl
   17bcc:	bl	114c8 <mbsinit@plt>
   17bd0:	ldr	ip, [fp, #-84]	; 0xffffffac
   17bd4:	ldr	lr, [sp, #84]	; 0x54
   17bd8:	cmp	r0, #0
   17bdc:	beq	17aac <__assert_fail@plt+0x62a8>
   17be0:	b	17e4c <__assert_fail@plt+0x6648>
   17be4:	ldr	r0, [sp, #24]
   17be8:	cmp	r0, #0
   17bec:	beq	17c94 <__assert_fail@plt+0x6490>
   17bf0:	add	r0, r7, #2
   17bf4:	cmp	r0, lr
   17bf8:	bcs	17c94 <__assert_fail@plt+0x6490>
   17bfc:	add	r1, ip, r7
   17c00:	ldrb	r1, [r1, #1]
   17c04:	cmp	r1, #63	; 0x3f
   17c08:	bne	17c94 <__assert_fail@plt+0x6490>
   17c0c:	ldrb	r5, [ip, r0]
   17c10:	sub	r1, r5, #33	; 0x21
   17c14:	cmp	r1, #29
   17c18:	bhi	17c94 <__assert_fail@plt+0x6490>
   17c1c:	movw	r3, #20929	; 0x51c1
   17c20:	mov	r2, #1
   17c24:	movt	r3, #14336	; 0x3800
   17c28:	tst	r3, r2, lsl r1
   17c2c:	beq	17c94 <__assert_fail@plt+0x6490>
   17c30:	ldr	r1, [fp, #-72]	; 0xffffffb8
   17c34:	tst	r1, #1
   17c38:	bne	18284 <__assert_fail@plt+0x6a80>
   17c3c:	cmp	r9, sl
   17c40:	mov	r7, r0
   17c44:	mov	r4, #0
   17c48:	movcc	r1, #63	; 0x3f
   17c4c:	strbcc	r1, [r6, r9]
   17c50:	add	r1, r9, #1
   17c54:	cmp	r1, sl
   17c58:	movcc	r2, #34	; 0x22
   17c5c:	strbcc	r2, [r6, r1]
   17c60:	add	r1, r9, #2
   17c64:	cmp	r1, sl
   17c68:	movcc	r2, #34	; 0x22
   17c6c:	strbcc	r2, [r6, r1]
   17c70:	add	r1, r9, #3
   17c74:	add	r9, r9, #4
   17c78:	cmp	r1, sl
   17c7c:	movcc	r2, #63	; 0x3f
   17c80:	strbcc	r2, [r6, r1]
   17c84:	ldr	r0, [fp, #-68]	; 0xffffffbc
   17c88:	cmp	r0, #0
   17c8c:	bne	17684 <__assert_fail@plt+0x5e80>
   17c90:	b	1795c <__assert_fail@plt+0x6158>
   17c94:	mov	r5, #63	; 0x3f
   17c98:	mov	r4, #0
   17c9c:	ldr	r0, [fp, #-68]	; 0xffffffbc
   17ca0:	cmp	r0, #0
   17ca4:	bne	17684 <__assert_fail@plt+0x5e80>
   17ca8:	b	1795c <__assert_fail@plt+0x6158>
   17cac:	mov	r4, #1
   17cb0:	mov	r6, #0
   17cb4:	sub	sl, fp, #40	; 0x28
   17cb8:	str	r6, [sp, #64]	; 0x40
   17cbc:	add	r6, r6, r7
   17cc0:	sub	r0, fp, #44	; 0x2c
   17cc4:	mov	r3, sl
   17cc8:	add	r1, ip, r6
   17ccc:	sub	r2, lr, r6
   17cd0:	bl	1a680 <__assert_fail@plt+0x8e7c>
   17cd4:	cmn	r0, #2
   17cd8:	beq	17e08 <__assert_fail@plt+0x6604>
   17cdc:	cmn	r0, #1
   17ce0:	beq	17dfc <__assert_fail@plt+0x65f8>
   17ce4:	ldr	r6, [sp, #64]	; 0x40
   17ce8:	cmp	r0, #0
   17cec:	beq	17e48 <__assert_fail@plt+0x6644>
   17cf0:	add	r6, r0, r6
   17cf4:	ldr	r0, [fp, #-44]	; 0xffffffd4
   17cf8:	bl	11540 <iswprint@plt>
   17cfc:	cmp	r0, #0
   17d00:	sub	sl, fp, #40	; 0x28
   17d04:	movwne	r0, #1
   17d08:	and	r4, r4, r0
   17d0c:	mov	r0, sl
   17d10:	bl	114c8 <mbsinit@plt>
   17d14:	ldr	ip, [fp, #-84]	; 0xffffffac
   17d18:	ldr	lr, [sp, #84]	; 0x54
   17d1c:	cmp	r0, #0
   17d20:	beq	17cb8 <__assert_fail@plt+0x64b4>
   17d24:	b	17e4c <__assert_fail@plt+0x6648>
   17d28:	cmp	r9, sl
   17d2c:	mov	r2, #1
   17d30:	movcc	r0, #39	; 0x27
   17d34:	strbcc	r0, [r6, r9]
   17d38:	add	r0, r9, #1
   17d3c:	cmp	r0, sl
   17d40:	movcc	r1, #36	; 0x24
   17d44:	strbcc	r1, [r6, r0]
   17d48:	add	r0, r9, #2
   17d4c:	cmp	r0, sl
   17d50:	movcc	r1, #39	; 0x27
   17d54:	strbcc	r1, [r6, r0]
   17d58:	add	r0, r9, #3
   17d5c:	cmp	r0, sl
   17d60:	add	r9, r0, #1
   17d64:	str	r2, [fp, #-48]	; 0xffffffd0
   17d68:	movcc	r1, #92	; 0x5c
   17d6c:	strbcc	r1, [r6, r0]
   17d70:	ldr	r1, [fp, #-64]	; 0xffffffc0
   17d74:	cmp	r1, #2
   17d78:	beq	17dd8 <__assert_fail@plt+0x65d4>
   17d7c:	add	r1, r7, #1
   17d80:	mov	r4, #0
   17d84:	mov	r8, #1
   17d88:	mov	r5, #48	; 0x30
   17d8c:	cmp	r1, lr
   17d90:	bcs	17678 <__assert_fail@plt+0x5e74>
   17d94:	ldrb	r1, [ip, r1]
   17d98:	sub	r1, r1, #48	; 0x30
   17d9c:	uxtb	r1, r1
   17da0:	cmp	r1, #9
   17da4:	bhi	17678 <__assert_fail@plt+0x5e74>
   17da8:	cmp	r9, sl
   17dac:	movcc	r1, #48	; 0x30
   17db0:	strbcc	r1, [r6, r9]
   17db4:	add	r1, r0, #2
   17db8:	add	r9, r0, #3
   17dbc:	cmp	r1, sl
   17dc0:	movcc	r2, #48	; 0x30
   17dc4:	strbcc	r2, [r6, r1]
   17dc8:	ldr	r0, [fp, #-68]	; 0xffffffbc
   17dcc:	cmp	r0, #0
   17dd0:	bne	17684 <__assert_fail@plt+0x5e80>
   17dd4:	b	1795c <__assert_fail@plt+0x6158>
   17dd8:	mov	r0, #48	; 0x30
   17ddc:	mov	r8, #1
   17de0:	mov	r4, #0
   17de4:	ldr	r1, [fp, #-56]	; 0xffffffc8
   17de8:	cmp	r1, #0
   17dec:	bne	17998 <__assert_fail@plt+0x6194>
   17df0:	cmp	r8, #0
   17df4:	beq	17914 <__assert_fail@plt+0x6110>
   17df8:	b	17704 <__assert_fail@plt+0x5f00>
   17dfc:	mov	r4, #0
   17e00:	ldr	ip, [fp, #-84]	; 0xffffffac
   17e04:	b	17e40 <__assert_fail@plt+0x663c>
   17e08:	ldr	r1, [sp, #84]	; 0x54
   17e0c:	ldr	ip, [fp, #-84]	; 0xffffffac
   17e10:	mov	r4, #0
   17e14:	cmp	r6, r1
   17e18:	bcs	17e40 <__assert_fail@plt+0x663c>
   17e1c:	ldrb	r0, [ip, r6]
   17e20:	cmp	r0, #0
   17e24:	beq	17e40 <__assert_fail@plt+0x663c>
   17e28:	ldr	r0, [sp, #64]	; 0x40
   17e2c:	add	r0, r0, #1
   17e30:	add	r6, r0, r7
   17e34:	str	r0, [sp, #64]	; 0x40
   17e38:	cmp	r6, r1
   17e3c:	bcc	17e1c <__assert_fail@plt+0x6618>
   17e40:	ldr	r6, [sp, #64]	; 0x40
   17e44:	b	17e4c <__assert_fail@plt+0x6648>
   17e48:	ldr	ip, [fp, #-84]	; 0xffffffac
   17e4c:	mov	r1, r6
   17e50:	ldr	r6, [sp, #76]	; 0x4c
   17e54:	ldr	sl, [sp, #56]	; 0x38
   17e58:	ldr	r0, [sp, #44]	; 0x2c
   17e5c:	cmp	r1, #1
   17e60:	orr	r2, r4, r0
   17e64:	mov	r0, r1
   17e68:	bhi	17e88 <__assert_fail@plt+0x6684>
   17e6c:	tst	r2, #1
   17e70:	beq	17e88 <__assert_fail@plt+0x6684>
   17e74:	ldr	lr, [sp, #84]	; 0x54
   17e78:	ldr	r0, [fp, #-68]	; 0xffffffbc
   17e7c:	cmp	r0, #0
   17e80:	bne	17684 <__assert_fail@plt+0x5e80>
   17e84:	b	1795c <__assert_fail@plt+0x6158>
   17e88:	str	r2, [sp, #64]	; 0x40
   17e8c:	add	r0, r0, r7
   17e90:	add	r1, r7, #1
   17e94:	ldr	lr, [sp, #84]	; 0x54
   17e98:	ldr	r7, [fp, #-64]	; 0xffffffc0
   17e9c:	ldr	r2, [fp, #-48]	; 0xffffffd0
   17ea0:	mov	r3, #0
   17ea4:	str	r0, [sp, #56]	; 0x38
   17ea8:	ldr	r0, [sp, #64]	; 0x40
   17eac:	tst	r0, #1
   17eb0:	bne	17f98 <__assert_fail@plt+0x6794>
   17eb4:	ldr	r0, [fp, #-72]	; 0xffffffb8
   17eb8:	tst	r0, #1
   17ebc:	bne	18138 <__assert_fail@plt+0x6934>
   17ec0:	ldr	r3, [fp, #-80]	; 0xffffffb0
   17ec4:	cmp	r7, #2
   17ec8:	movwne	r3, #1
   17ecc:	orr	r3, r3, r2
   17ed0:	tst	r3, #1
   17ed4:	bne	17f0c <__assert_fail@plt+0x6708>
   17ed8:	cmp	r9, sl
   17edc:	add	r3, r9, #1
   17ee0:	movcc	r2, #39	; 0x27
   17ee4:	strbcc	r2, [r6, r9]
   17ee8:	cmp	r3, sl
   17eec:	movcc	r2, #36	; 0x24
   17ef0:	strbcc	r2, [r6, r3]
   17ef4:	add	r3, r9, #2
   17ef8:	add	r9, r9, #3
   17efc:	cmp	r3, sl
   17f00:	movcc	r2, #39	; 0x27
   17f04:	strbcc	r2, [r6, r3]
   17f08:	mov	r2, #1
   17f0c:	cmp	r9, sl
   17f10:	mov	r0, r2
   17f14:	movcc	r3, #92	; 0x5c
   17f18:	strbcc	r3, [r6, r9]
   17f1c:	add	r3, r9, #1
   17f20:	cmp	r3, sl
   17f24:	andcc	r7, r5, #192	; 0xc0
   17f28:	movcc	r2, #48	; 0x30
   17f2c:	orrcc	r7, r2, r7, lsr #6
   17f30:	strbcc	r7, [r6, r3]
   17f34:	add	r3, r9, #2
   17f38:	add	r9, r9, #3
   17f3c:	cmp	r3, sl
   17f40:	lsrcc	r7, r5, #3
   17f44:	movcc	r2, #6
   17f48:	bficc	r7, r2, #3, #29
   17f4c:	mov	r2, #6
   17f50:	strbcc	r7, [r6, r3]
   17f54:	bfi	r5, r2, #3, #29
   17f58:	mov	r3, #1
   17f5c:	mov	r2, r0
   17f60:	ldr	r0, [sp, #56]	; 0x38
   17f64:	and	r8, r3, #1
   17f68:	cmp	r0, r1
   17f6c:	bhi	17fcc <__assert_fail@plt+0x67c8>
   17f70:	b	1800c <__assert_fail@plt+0x6808>
   17f74:	cmp	r9, sl
   17f78:	ldr	r7, [fp, #-64]	; 0xffffffc0
   17f7c:	strbcc	r5, [r6, r9]
   17f80:	add	r9, r9, #1
   17f84:	ldrb	r5, [ip, r1]
   17f88:	add	r1, r1, #1
   17f8c:	ldr	r0, [sp, #64]	; 0x40
   17f90:	tst	r0, #1
   17f94:	beq	17eb4 <__assert_fail@plt+0x66b0>
   17f98:	ldr	r7, [fp, #-56]	; 0xffffffc8
   17f9c:	tst	r7, #1
   17fa0:	beq	17fb4 <__assert_fail@plt+0x67b0>
   17fa4:	cmp	r9, sl
   17fa8:	movcc	r7, #92	; 0x5c
   17fac:	strbcc	r7, [r6, r9]
   17fb0:	add	r9, r9, #1
   17fb4:	mov	r7, #0
   17fb8:	str	r7, [fp, #-56]	; 0xffffffc8
   17fbc:	ldr	r0, [sp, #56]	; 0x38
   17fc0:	and	r8, r3, #1
   17fc4:	cmp	r0, r1
   17fc8:	bls	1800c <__assert_fail@plt+0x6808>
   17fcc:	cmp	r8, #0
   17fd0:	mvn	r7, r2
   17fd4:	movwne	r8, #1
   17fd8:	orr	r7, r7, r8
   17fdc:	tst	r7, #1
   17fe0:	bne	17f74 <__assert_fail@plt+0x6770>
   17fe4:	cmp	r9, sl
   17fe8:	movcc	r7, #39	; 0x27
   17fec:	strbcc	r7, [r6, r9]
   17ff0:	add	r7, r9, #1
   17ff4:	add	r9, r9, #2
   17ff8:	cmp	r7, sl
   17ffc:	movcc	r2, #39	; 0x27
   18000:	strbcc	r2, [r6, r7]
   18004:	mov	r2, #0
   18008:	b	17f74 <__assert_fail@plt+0x6770>
   1800c:	cmp	r8, #0
   18010:	sub	r7, r1, #1
   18014:	mov	r0, r5
   18018:	str	r2, [fp, #-48]	; 0xffffffd0
   1801c:	movwne	r8, #1
   18020:	cmp	r8, #0
   18024:	beq	17914 <__assert_fail@plt+0x6110>
   18028:	b	17704 <__assert_fail@plt+0x5f00>
   1802c:	mov	lr, r7
   18030:	b	18038 <__assert_fail@plt+0x6834>
   18034:	mvn	lr, #0
   18038:	ldr	r7, [fp, #-64]	; 0xffffffc0
   1803c:	ldr	r1, [fp, #-72]	; 0xffffffb8
   18040:	eor	r0, r7, #2
   18044:	orr	r0, r0, r9
   18048:	clz	r0, r0
   1804c:	lsr	r0, r0, #5
   18050:	tst	r1, r0
   18054:	bne	18154 <__assert_fail@plt+0x6950>
   18058:	mov	r0, r1
   1805c:	ldr	r1, [fp, #-80]	; 0xffffffb0
   18060:	cmp	r7, #2
   18064:	movwne	r1, #1
   18068:	orr	r0, r0, r1
   1806c:	tst	r0, #1
   18070:	ldreq	r0, [sp, #52]	; 0x34
   18074:	streq	lr, [sp, #84]	; 0x54
   18078:	eoreq	r0, r0, #1
   1807c:	tsteq	r0, #1
   18080:	bne	18218 <__assert_fail@plt+0x6a14>
   18084:	tst	r4, #1
   18088:	bne	181d4 <__assert_fail@plt+0x69d0>
   1808c:	ldr	r6, [sp, #48]	; 0x30
   18090:	mov	r8, #0
   18094:	cmp	r6, #0
   18098:	beq	18210 <__assert_fail@plt+0x6a0c>
   1809c:	ldr	r0, [sp, #80]	; 0x50
   180a0:	mov	r1, #0
   180a4:	cmp	sl, #0
   180a8:	mov	r4, #0
   180ac:	str	r1, [fp, #-72]	; 0xffffffb8
   180b0:	beq	16fa4 <__assert_fail@plt+0x57a0>
   180b4:	b	18218 <__assert_fail@plt+0x6a14>
   180b8:	ldrb	r1, [r0, #3]
   180bc:	cmp	r1, #56	; 0x38
   180c0:	ldrbeq	r1, [r0, #4]
   180c4:	cmpeq	r1, #48	; 0x30
   180c8:	bne	1719c <__assert_fail@plt+0x5998>
   180cc:	ldrb	r1, [r0, #5]
   180d0:	cmp	r1, #51	; 0x33
   180d4:	ldrbeq	r1, [r0, #6]
   180d8:	cmpeq	r1, #48	; 0x30
   180dc:	bne	1719c <__assert_fail@plt+0x5998>
   180e0:	ldrb	r0, [r0, #7]
   180e4:	cmp	r0, #0
   180e8:	movw	r0, #52289	; 0xcc41
   180ec:	movt	r0, #1
   180f0:	str	r0, [sp, #68]	; 0x44
   180f4:	bne	1719c <__assert_fail@plt+0x5998>
   180f8:	b	171b8 <__assert_fail@plt+0x59b4>
   180fc:	ldrb	r1, [r0, #4]
   18100:	cmp	r1, #48	; 0x30
   18104:	ldrbeq	r1, [r0, #5]
   18108:	cmpeq	r1, #51	; 0x33
   1810c:	bne	17280 <__assert_fail@plt+0x5a7c>
   18110:	ldrb	r1, [r0, #6]
   18114:	cmp	r1, #48	; 0x30
   18118:	ldrbeq	r0, [r0, #7]
   1811c:	cmpeq	r0, #0
   18120:	bne	17280 <__assert_fail@plt+0x5a7c>
   18124:	movw	r0, #52293	; 0xcc45
   18128:	movt	r0, #1
   1812c:	str	r0, [sp, #72]	; 0x48
   18130:	b	172a0 <__assert_fail@plt+0x5a9c>
   18134:	ldr	r7, [fp, #-64]	; 0xffffffc0
   18138:	ldr	r2, [sp, #80]	; 0x50
   1813c:	b	18174 <__assert_fail@plt+0x6970>
   18140:	ldr	ip, [fp, #-84]	; 0xffffffac
   18144:	mov	r2, #1
   18148:	mov	lr, r4
   1814c:	ldr	r7, [fp, #-64]	; 0xffffffc0
   18150:	b	18174 <__assert_fail@plt+0x6970>
   18154:	ldr	r2, [sp, #80]	; 0x50
   18158:	mov	r7, #2
   1815c:	b	18174 <__assert_fail@plt+0x6970>
   18160:	ldr	r6, [sp, #76]	; 0x4c
   18164:	ldr	ip, [fp, #-84]	; 0xffffffac
   18168:	ldr	lr, [sp, #84]	; 0x54
   1816c:	ldr	r2, [sp, #80]	; 0x50
   18170:	mov	r7, #2
   18174:	mov	r0, #0
   18178:	ldr	r1, [fp, #12]
   1817c:	tst	r2, #1
   18180:	mov	r2, r7
   18184:	mov	r3, lr
   18188:	str	r0, [sp, #8]
   1818c:	ldr	r0, [sp, #68]	; 0x44
   18190:	movwne	r2, #4
   18194:	cmp	r7, #2
   18198:	movne	r2, r7
   1819c:	str	r2, [sp]
   181a0:	mov	r2, ip
   181a4:	bic	r1, r1, #2
   181a8:	str	r0, [sp, #12]
   181ac:	ldr	r0, [sp, #72]	; 0x48
   181b0:	str	r1, [sp, #4]
   181b4:	mov	r1, sl
   181b8:	str	r0, [sp, #16]
   181bc:	mov	r0, r6
   181c0:	bl	16f28 <__assert_fail@plt+0x5724>
   181c4:	mov	r9, r0
   181c8:	mov	r0, r9
   181cc:	sub	sp, fp, #28
   181d0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   181d4:	mov	r0, #5
   181d8:	ldr	r1, [sp, #48]	; 0x30
   181dc:	ldr	r2, [fp, #-84]	; 0xffffffac
   181e0:	ldr	r3, [sp, #84]	; 0x54
   181e4:	str	r0, [sp]
   181e8:	ldr	r0, [fp, #12]
   181ec:	str	r0, [sp, #4]
   181f0:	ldr	r0, [fp, #16]
   181f4:	str	r0, [sp, #8]
   181f8:	ldr	r0, [sp, #68]	; 0x44
   181fc:	str	r0, [sp, #12]
   18200:	ldr	r0, [sp, #72]	; 0x48
   18204:	str	r0, [sp, #16]
   18208:	ldr	r0, [sp, #76]	; 0x4c
   1820c:	b	181c0 <__assert_fail@plt+0x69bc>
   18210:	mov	r0, #0
   18214:	str	r0, [fp, #-72]	; 0xffffffb8
   18218:	ldr	r1, [sp, #92]	; 0x5c
   1821c:	cmp	r1, #0
   18220:	beq	18260 <__assert_fail@plt+0x6a5c>
   18224:	ldr	r0, [fp, #-72]	; 0xffffffb8
   18228:	ldr	r2, [sp, #76]	; 0x4c
   1822c:	tst	r0, #1
   18230:	bne	18264 <__assert_fail@plt+0x6a60>
   18234:	ldrb	r0, [r1]
   18238:	cmp	r0, #0
   1823c:	beq	18264 <__assert_fail@plt+0x6a60>
   18240:	add	r1, r1, #1
   18244:	cmp	r9, sl
   18248:	strbcc	r0, [r2, r9]
   1824c:	add	r9, r9, #1
   18250:	ldrb	r0, [r1], #1
   18254:	cmp	r0, #0
   18258:	bne	18244 <__assert_fail@plt+0x6a40>
   1825c:	b	18264 <__assert_fail@plt+0x6a60>
   18260:	ldr	r2, [sp, #76]	; 0x4c
   18264:	cmp	r9, sl
   18268:	movcc	r0, #0
   1826c:	strbcc	r0, [r2, r9]
   18270:	mov	r0, r9
   18274:	sub	sp, fp, #28
   18278:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1827c:	mov	r2, #1
   18280:	b	1814c <__assert_fail@plt+0x6948>
   18284:	ldr	r2, [sp, #80]	; 0x50
   18288:	mov	r7, #5
   1828c:	b	18174 <__assert_fail@plt+0x6970>
   18290:	bl	117d4 <abort@plt>
   18294:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18298:	add	fp, sp, #28
   1829c:	sub	sp, sp, #28
   182a0:	movw	r5, #58016	; 0xe2a0
   182a4:	cmp	r2, #0
   182a8:	mov	r4, r1
   182ac:	mov	r7, r0
   182b0:	str	r0, [sp, #20]
   182b4:	movt	r5, #2
   182b8:	movne	r5, r2
   182bc:	bl	11684 <__errno_location@plt>
   182c0:	mov	sl, r0
   182c4:	ldm	r5, {r0, r1}
   182c8:	ldr	r2, [r5, #40]	; 0x28
   182cc:	ldr	r3, [r5, #44]	; 0x2c
   182d0:	add	r9, r5, #8
   182d4:	ldr	r6, [sl]
   182d8:	orr	r8, r1, #1
   182dc:	mov	r1, #0
   182e0:	str	r6, [sp, #24]
   182e4:	stm	sp, {r0, r8, r9}
   182e8:	str	r2, [sp, #12]
   182ec:	str	r3, [sp, #16]
   182f0:	mov	r0, #0
   182f4:	mov	r2, r7
   182f8:	mov	r3, r4
   182fc:	mov	r6, r4
   18300:	bl	16f28 <__assert_fail@plt+0x5724>
   18304:	add	r7, r0, #1
   18308:	mov	r0, r7
   1830c:	bl	194bc <__assert_fail@plt+0x7cb8>
   18310:	mov	r4, r0
   18314:	ldr	r0, [r5]
   18318:	ldr	r2, [r5, #44]	; 0x2c
   1831c:	ldr	r1, [r5, #40]	; 0x28
   18320:	mov	r3, r6
   18324:	stm	sp, {r0, r8, r9}
   18328:	str	r2, [sp, #16]
   1832c:	str	r1, [sp, #12]
   18330:	mov	r0, r4
   18334:	mov	r1, r7
   18338:	ldr	r2, [sp, #20]
   1833c:	bl	16f28 <__assert_fail@plt+0x5724>
   18340:	ldr	r0, [sp, #24]
   18344:	str	r0, [sl]
   18348:	mov	r0, r4
   1834c:	sub	sp, fp, #28
   18350:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18354:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18358:	add	fp, sp, #28
   1835c:	sub	sp, sp, #36	; 0x24
   18360:	movw	r8, #58016	; 0xe2a0
   18364:	cmp	r3, #0
   18368:	mov	r4, r2
   1836c:	str	r2, [sp, #24]
   18370:	mov	r5, r1
   18374:	mov	r6, r0
   18378:	str	r0, [sp, #20]
   1837c:	movt	r8, #2
   18380:	movne	r8, r3
   18384:	bl	11684 <__errno_location@plt>
   18388:	str	r0, [sp, #28]
   1838c:	cmp	r4, #0
   18390:	add	sl, r8, #8
   18394:	ldm	r8, {r3, r9}
   18398:	ldr	r7, [r0]
   1839c:	ldr	r1, [r8, #40]	; 0x28
   183a0:	ldr	r2, [r8, #44]	; 0x2c
   183a4:	mov	r0, #0
   183a8:	orreq	r9, r9, #1
   183ac:	str	r7, [sp, #32]
   183b0:	mov	r7, r5
   183b4:	stm	sp, {r3, r9, sl}
   183b8:	str	r1, [sp, #12]
   183bc:	str	r2, [sp, #16]
   183c0:	mov	r1, #0
   183c4:	mov	r2, r6
   183c8:	mov	r3, r5
   183cc:	bl	16f28 <__assert_fail@plt+0x5724>
   183d0:	add	r4, r0, #1
   183d4:	mov	r5, r0
   183d8:	mov	r0, r4
   183dc:	bl	194bc <__assert_fail@plt+0x7cb8>
   183e0:	mov	r6, r0
   183e4:	ldr	r0, [r8]
   183e8:	ldr	r2, [r8, #44]	; 0x2c
   183ec:	ldr	r1, [r8, #40]	; 0x28
   183f0:	mov	r3, r7
   183f4:	stm	sp, {r0, r9, sl}
   183f8:	str	r2, [sp, #16]
   183fc:	str	r1, [sp, #12]
   18400:	mov	r0, r6
   18404:	mov	r1, r4
   18408:	ldr	r2, [sp, #20]
   1840c:	bl	16f28 <__assert_fail@plt+0x5724>
   18410:	ldr	r0, [sp, #24]
   18414:	ldr	r1, [sp, #32]
   18418:	ldr	r2, [sp, #28]
   1841c:	cmp	r0, #0
   18420:	str	r1, [r2]
   18424:	strne	r5, [r0]
   18428:	mov	r0, r6
   1842c:	sub	sp, fp, #28
   18430:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18434:	push	{r4, r5, r6, r7, fp, lr}
   18438:	add	fp, sp, #16
   1843c:	movw	r4, #57768	; 0xe1a8
   18440:	movt	r4, #2
   18444:	ldrd	r6, [r4]
   18448:	cmp	r7, #2
   1844c:	blt	18478 <__assert_fail@plt+0x6c74>
   18450:	add	r5, r6, #12
   18454:	mov	r7, #0
   18458:	ldr	r0, [r5, r7, lsl #3]
   1845c:	bl	1a584 <__assert_fail@plt+0x8d80>
   18460:	ldr	r1, [r4, #4]
   18464:	add	r2, r7, #2
   18468:	add	r0, r7, #1
   1846c:	mov	r7, r0
   18470:	cmp	r2, r1
   18474:	blt	18458 <__assert_fail@plt+0x6c54>
   18478:	ldr	r0, [r6, #4]
   1847c:	movw	r5, #58064	; 0xe2d0
   18480:	movt	r5, #2
   18484:	cmp	r0, r5
   18488:	beq	1849c <__assert_fail@plt+0x6c98>
   1848c:	bl	1a584 <__assert_fail@plt+0x8d80>
   18490:	mov	r0, #256	; 0x100
   18494:	str	r0, [r4, #8]
   18498:	str	r5, [r4, #12]
   1849c:	add	r5, r4, #8
   184a0:	cmp	r6, r5
   184a4:	beq	184b4 <__assert_fail@plt+0x6cb0>
   184a8:	mov	r0, r6
   184ac:	bl	1a584 <__assert_fail@plt+0x8d80>
   184b0:	str	r5, [r4]
   184b4:	mov	r0, #1
   184b8:	str	r0, [r4, #4]
   184bc:	pop	{r4, r5, r6, r7, fp, pc}
   184c0:	movw	r3, #58016	; 0xe2a0
   184c4:	mvn	r2, #0
   184c8:	movt	r3, #2
   184cc:	b	184d0 <__assert_fail@plt+0x6ccc>
   184d0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   184d4:	add	fp, sp, #28
   184d8:	sub	sp, sp, #44	; 0x2c
   184dc:	mov	r7, r3
   184e0:	str	r2, [sp, #36]	; 0x24
   184e4:	str	r1, [sp, #32]
   184e8:	mov	r5, r0
   184ec:	bl	11684 <__errno_location@plt>
   184f0:	cmp	r5, #0
   184f4:	blt	18658 <__assert_fail@plt+0x6e54>
   184f8:	cmn	r5, #-2147483647	; 0x80000001
   184fc:	beq	18658 <__assert_fail@plt+0x6e54>
   18500:	movw	r8, #57768	; 0xe1a8
   18504:	mov	r4, r0
   18508:	movt	r8, #2
   1850c:	ldr	r6, [r8]
   18510:	ldr	r1, [r8, #4]
   18514:	ldr	r0, [r0]
   18518:	str	r4, [sp, #28]
   1851c:	cmp	r1, r5
   18520:	str	r0, [sp, #24]
   18524:	ble	18530 <__assert_fail@plt+0x6d2c>
   18528:	mov	sl, r6
   1852c:	b	18594 <__assert_fail@plt+0x6d90>
   18530:	mov	r0, #8
   18534:	add	r9, r8, #8
   18538:	add	r2, r5, #1
   1853c:	str	r1, [fp, #-32]	; 0xffffffe0
   18540:	mvn	r3, #-2147483648	; 0x80000000
   18544:	str	r0, [sp]
   18548:	subs	r0, r6, r9
   1854c:	sub	r2, r2, r1
   18550:	sub	r1, fp, #32
   18554:	movne	r0, r6
   18558:	bl	196bc <__assert_fail@plt+0x7eb8>
   1855c:	str	r0, [r8]
   18560:	cmp	r6, r9
   18564:	mov	sl, r0
   18568:	ldrdeq	r0, [r8, #8]
   1856c:	stmeq	sl, {r0, r1}
   18570:	ldr	r1, [r8, #4]
   18574:	ldr	r2, [fp, #-32]	; 0xffffffe0
   18578:	add	r0, sl, r1, lsl #3
   1857c:	sub	r1, r2, r1
   18580:	lsl	r2, r1, #3
   18584:	mov	r1, #0
   18588:	bl	116a8 <memset@plt>
   1858c:	ldr	r0, [fp, #-32]	; 0xffffffe0
   18590:	str	r0, [r8, #4]
   18594:	mov	r9, sl
   18598:	ldr	r6, [r9, r5, lsl #3]!
   1859c:	ldr	r4, [r9, #4]!
   185a0:	ldm	r7, {r0, r1}
   185a4:	ldr	r2, [r7, #40]	; 0x28
   185a8:	ldr	r3, [r7, #44]	; 0x2c
   185ac:	orr	r8, r1, #1
   185b0:	add	r1, r7, #8
   185b4:	stm	sp, {r0, r8}
   185b8:	add	r0, sp, #8
   185bc:	str	r1, [sp, #20]
   185c0:	stm	r0, {r1, r2, r3}
   185c4:	mov	r0, r4
   185c8:	mov	r1, r6
   185cc:	ldr	r2, [sp, #32]
   185d0:	ldr	r3, [sp, #36]	; 0x24
   185d4:	bl	16f28 <__assert_fail@plt+0x5724>
   185d8:	cmp	r6, r0
   185dc:	bhi	18640 <__assert_fail@plt+0x6e3c>
   185e0:	add	r6, r0, #1
   185e4:	movw	r0, #58064	; 0xe2d0
   185e8:	movt	r0, #2
   185ec:	str	r6, [sl, r5, lsl #3]
   185f0:	cmp	r4, r0
   185f4:	beq	18600 <__assert_fail@plt+0x6dfc>
   185f8:	mov	r0, r4
   185fc:	bl	1a584 <__assert_fail@plt+0x8d80>
   18600:	mov	r0, r6
   18604:	bl	194bc <__assert_fail@plt+0x7cb8>
   18608:	str	r0, [r9]
   1860c:	mov	r4, r0
   18610:	add	r3, sp, #8
   18614:	ldr	r0, [r7]
   18618:	ldr	r1, [r7, #40]	; 0x28
   1861c:	ldr	r2, [r7, #44]	; 0x2c
   18620:	stm	sp, {r0, r8}
   18624:	ldr	r0, [sp, #20]
   18628:	stm	r3, {r0, r1, r2}
   1862c:	mov	r0, r4
   18630:	mov	r1, r6
   18634:	ldr	r2, [sp, #32]
   18638:	ldr	r3, [sp, #36]	; 0x24
   1863c:	bl	16f28 <__assert_fail@plt+0x5724>
   18640:	ldr	r1, [sp, #24]
   18644:	ldr	r0, [sp, #28]
   18648:	str	r1, [r0]
   1864c:	mov	r0, r4
   18650:	sub	sp, fp, #28
   18654:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18658:	bl	117d4 <abort@plt>
   1865c:	movw	r3, #58016	; 0xe2a0
   18660:	movt	r3, #2
   18664:	b	184d0 <__assert_fail@plt+0x6ccc>
   18668:	movw	r3, #58016	; 0xe2a0
   1866c:	mov	r1, r0
   18670:	mov	r0, #0
   18674:	mvn	r2, #0
   18678:	movt	r3, #2
   1867c:	b	184d0 <__assert_fail@plt+0x6ccc>
   18680:	movw	r3, #58016	; 0xe2a0
   18684:	mov	r2, r1
   18688:	mov	r1, r0
   1868c:	mov	r0, #0
   18690:	movt	r3, #2
   18694:	b	184d0 <__assert_fail@plt+0x6ccc>
   18698:	push	{fp, lr}
   1869c:	mov	fp, sp
   186a0:	sub	sp, sp, #48	; 0x30
   186a4:	vmov.i32	q8, #0	; 0x00000000
   186a8:	mov	ip, #32
   186ac:	mov	r3, sp
   186b0:	mov	lr, r2
   186b4:	cmp	r1, #10
   186b8:	add	r2, r3, #16
   186bc:	vst1.64	{d16-d17}, [r3], ip
   186c0:	vst1.64	{d16-d17}, [r3]
   186c4:	vst1.64	{d16-d17}, [r2]
   186c8:	beq	186e8 <__assert_fail@plt+0x6ee4>
   186cc:	str	r1, [sp]
   186d0:	mov	r3, sp
   186d4:	mov	r1, lr
   186d8:	mvn	r2, #0
   186dc:	bl	184d0 <__assert_fail@plt+0x6ccc>
   186e0:	mov	sp, fp
   186e4:	pop	{fp, pc}
   186e8:	bl	117d4 <abort@plt>
   186ec:	push	{r4, sl, fp, lr}
   186f0:	add	fp, sp, #8
   186f4:	sub	sp, sp, #48	; 0x30
   186f8:	mov	ip, r3
   186fc:	mov	r3, sp
   18700:	vmov.i32	q8, #0	; 0x00000000
   18704:	mov	lr, #32
   18708:	cmp	r1, #10
   1870c:	add	r4, r3, #16
   18710:	vst1.64	{d16-d17}, [r3], lr
   18714:	vst1.64	{d16-d17}, [r3]
   18718:	vst1.64	{d16-d17}, [r4]
   1871c:	beq	1873c <__assert_fail@plt+0x6f38>
   18720:	str	r1, [sp]
   18724:	mov	r1, r2
   18728:	mov	r3, sp
   1872c:	mov	r2, ip
   18730:	bl	184d0 <__assert_fail@plt+0x6ccc>
   18734:	sub	sp, fp, #8
   18738:	pop	{r4, sl, fp, pc}
   1873c:	bl	117d4 <abort@plt>
   18740:	push	{fp, lr}
   18744:	mov	fp, sp
   18748:	sub	sp, sp, #48	; 0x30
   1874c:	mov	r3, sp
   18750:	vmov.i32	q8, #0	; 0x00000000
   18754:	mov	ip, #32
   18758:	cmp	r0, #10
   1875c:	add	r2, r3, #16
   18760:	vst1.64	{d16-d17}, [r3], ip
   18764:	vst1.64	{d16-d17}, [r3]
   18768:	vst1.64	{d16-d17}, [r2]
   1876c:	beq	1878c <__assert_fail@plt+0x6f88>
   18770:	str	r0, [sp]
   18774:	mov	r3, sp
   18778:	mov	r0, #0
   1877c:	mvn	r2, #0
   18780:	bl	184d0 <__assert_fail@plt+0x6ccc>
   18784:	mov	sp, fp
   18788:	pop	{fp, pc}
   1878c:	bl	117d4 <abort@plt>
   18790:	push	{fp, lr}
   18794:	mov	fp, sp
   18798:	sub	sp, sp, #48	; 0x30
   1879c:	mov	r3, sp
   187a0:	vmov.i32	q8, #0	; 0x00000000
   187a4:	mov	ip, #32
   187a8:	cmp	r0, #10
   187ac:	add	lr, r3, #16
   187b0:	vst1.64	{d16-d17}, [r3], ip
   187b4:	vst1.64	{d16-d17}, [r3]
   187b8:	vst1.64	{d16-d17}, [lr]
   187bc:	beq	187d8 <__assert_fail@plt+0x6fd4>
   187c0:	str	r0, [sp]
   187c4:	mov	r3, sp
   187c8:	mov	r0, #0
   187cc:	bl	184d0 <__assert_fail@plt+0x6ccc>
   187d0:	mov	sp, fp
   187d4:	pop	{fp, pc}
   187d8:	bl	117d4 <abort@plt>
   187dc:	push	{r4, sl, fp, lr}
   187e0:	add	fp, sp, #8
   187e4:	sub	sp, sp, #48	; 0x30
   187e8:	mov	lr, r0
   187ec:	movw	r0, #58016	; 0xe2a0
   187f0:	mov	r3, #32
   187f4:	mov	ip, r1
   187f8:	mov	r4, #1
   187fc:	movt	r0, #2
   18800:	add	r1, r0, #16
   18804:	vld1.64	{d16-d17}, [r0], r3
   18808:	mov	r3, sp
   1880c:	vld1.64	{d18-d19}, [r1]
   18810:	add	r1, r3, #16
   18814:	vld1.64	{d20-d21}, [r0]
   18818:	add	r0, r3, #32
   1881c:	vst1.64	{d18-d19}, [r1]
   18820:	mov	r1, r3
   18824:	vst1.64	{d20-d21}, [r0]
   18828:	mov	r0, #28
   1882c:	and	r0, r0, r2, lsr #3
   18830:	and	r2, r2, #31
   18834:	vst1.64	{d16-d17}, [r1], r0
   18838:	ldr	r0, [r1, #8]
   1883c:	bic	r4, r4, r0, lsr r2
   18840:	eor	r0, r0, r4, lsl r2
   18844:	mov	r2, ip
   18848:	str	r0, [r1, #8]
   1884c:	mov	r0, #0
   18850:	mov	r1, lr
   18854:	bl	184d0 <__assert_fail@plt+0x6ccc>
   18858:	sub	sp, fp, #8
   1885c:	pop	{r4, sl, fp, pc}
   18860:	push	{fp, lr}
   18864:	mov	fp, sp
   18868:	sub	sp, sp, #48	; 0x30
   1886c:	mov	ip, r0
   18870:	movw	r0, #58016	; 0xe2a0
   18874:	mov	r3, #32
   18878:	movt	r0, #2
   1887c:	add	r2, r0, #16
   18880:	vld1.64	{d16-d17}, [r0], r3
   18884:	mov	r3, sp
   18888:	vld1.64	{d18-d19}, [r2]
   1888c:	add	r2, r3, #16
   18890:	vld1.64	{d20-d21}, [r0]
   18894:	add	r0, r3, #32
   18898:	vst1.64	{d18-d19}, [r2]
   1889c:	mov	r2, r3
   188a0:	vst1.64	{d20-d21}, [r0]
   188a4:	mov	r0, #28
   188a8:	and	r0, r0, r1, lsr #3
   188ac:	and	r1, r1, #31
   188b0:	vst1.64	{d16-d17}, [r2], r0
   188b4:	mov	r0, #1
   188b8:	ldr	lr, [r2, #8]
   188bc:	bic	r0, r0, lr, lsr r1
   188c0:	eor	r0, lr, r0, lsl r1
   188c4:	mov	r1, ip
   188c8:	str	r0, [r2, #8]
   188cc:	mov	r0, #0
   188d0:	mvn	r2, #0
   188d4:	bl	184d0 <__assert_fail@plt+0x6ccc>
   188d8:	mov	sp, fp
   188dc:	pop	{fp, pc}
   188e0:	push	{fp, lr}
   188e4:	mov	fp, sp
   188e8:	sub	sp, sp, #48	; 0x30
   188ec:	movw	r2, #58016	; 0xe2a0
   188f0:	mov	r3, #32
   188f4:	mov	r1, r0
   188f8:	movt	r2, #2
   188fc:	add	r0, r2, #16
   18900:	vld1.64	{d16-d17}, [r2], r3
   18904:	mov	r3, sp
   18908:	vld1.64	{d18-d19}, [r0]
   1890c:	add	r0, r3, #16
   18910:	vld1.64	{d20-d21}, [r2]
   18914:	mov	r2, r3
   18918:	vst1.64	{d18-d19}, [r0]
   1891c:	add	r0, r3, #32
   18920:	vst1.64	{d20-d21}, [r0]
   18924:	mov	r0, #12
   18928:	vst1.64	{d16-d17}, [r2], r0
   1892c:	ldr	r0, [r2]
   18930:	orr	r0, r0, #67108864	; 0x4000000
   18934:	str	r0, [r2]
   18938:	mov	r0, #0
   1893c:	mvn	r2, #0
   18940:	bl	184d0 <__assert_fail@plt+0x6ccc>
   18944:	mov	sp, fp
   18948:	pop	{fp, pc}
   1894c:	push	{fp, lr}
   18950:	mov	fp, sp
   18954:	sub	sp, sp, #48	; 0x30
   18958:	mov	ip, r1
   1895c:	mov	r1, r0
   18960:	movw	r0, #58016	; 0xe2a0
   18964:	mov	r3, #32
   18968:	movt	r0, #2
   1896c:	add	r2, r0, #16
   18970:	vld1.64	{d16-d17}, [r0], r3
   18974:	mov	r3, sp
   18978:	vld1.64	{d18-d19}, [r2]
   1897c:	add	r2, r3, #16
   18980:	vld1.64	{d20-d21}, [r0]
   18984:	add	r0, r3, #32
   18988:	vst1.64	{d18-d19}, [r2]
   1898c:	mov	r2, r3
   18990:	vst1.64	{d20-d21}, [r0]
   18994:	mov	r0, #12
   18998:	vst1.64	{d16-d17}, [r2], r0
   1899c:	ldr	r0, [r2]
   189a0:	orr	r0, r0, #67108864	; 0x4000000
   189a4:	str	r0, [r2]
   189a8:	mov	r0, #0
   189ac:	mov	r2, ip
   189b0:	bl	184d0 <__assert_fail@plt+0x6ccc>
   189b4:	mov	sp, fp
   189b8:	pop	{fp, pc}
   189bc:	push	{r4, sl, fp, lr}
   189c0:	add	fp, sp, #8
   189c4:	sub	sp, sp, #96	; 0x60
   189c8:	mov	ip, r2
   189cc:	mov	r2, sp
   189d0:	vmov.i32	q8, #0	; 0x00000000
   189d4:	mov	r4, #28
   189d8:	cmp	r1, #10
   189dc:	mov	r3, r2
   189e0:	add	lr, r2, #16
   189e4:	vst1.64	{d16-d17}, [r3], r4
   189e8:	vst1.64	{d16-d17}, [lr]
   189ec:	vst1.32	{d16-d17}, [r3]
   189f0:	beq	18a40 <__assert_fail@plt+0x723c>
   189f4:	vld1.64	{d16-d17}, [r2], r4
   189f8:	vld1.64	{d18-d19}, [lr]
   189fc:	add	r3, sp, #48	; 0x30
   18a00:	add	r4, r3, #4
   18a04:	vld1.32	{d20-d21}, [r2]
   18a08:	add	r2, r3, #20
   18a0c:	vst1.32	{d16-d17}, [r4]
   18a10:	vst1.32	{d18-d19}, [r2]
   18a14:	add	r2, r3, #32
   18a18:	vst1.32	{d20-d21}, [r2]
   18a1c:	str	r1, [sp, #48]	; 0x30
   18a20:	mvn	r2, #0
   18a24:	ldr	r1, [sp, #60]	; 0x3c
   18a28:	orr	r1, r1, #67108864	; 0x4000000
   18a2c:	str	r1, [sp, #60]	; 0x3c
   18a30:	mov	r1, ip
   18a34:	bl	184d0 <__assert_fail@plt+0x6ccc>
   18a38:	sub	sp, fp, #8
   18a3c:	pop	{r4, sl, fp, pc}
   18a40:	bl	117d4 <abort@plt>
   18a44:	push	{r4, r5, fp, lr}
   18a48:	add	fp, sp, #8
   18a4c:	sub	sp, sp, #48	; 0x30
   18a50:	mov	ip, r3
   18a54:	movw	r3, #58016	; 0xe2a0
   18a58:	mov	lr, #32
   18a5c:	cmp	r1, #0
   18a60:	mov	r5, sp
   18a64:	movt	r3, #2
   18a68:	cmpne	r2, #0
   18a6c:	add	r4, r3, #16
   18a70:	vld1.64	{d16-d17}, [r3], lr
   18a74:	vld1.64	{d18-d19}, [r4]
   18a78:	add	r4, r5, #16
   18a7c:	vld1.64	{d20-d21}, [r3]
   18a80:	vst1.64	{d16-d17}, [r5], lr
   18a84:	mov	r3, #10
   18a88:	vst1.64	{d18-d19}, [r4]
   18a8c:	vst1.64	{d20-d21}, [r5]
   18a90:	str	r3, [sp]
   18a94:	bne	18a9c <__assert_fail@plt+0x7298>
   18a98:	bl	117d4 <abort@plt>
   18a9c:	str	r2, [sp, #44]	; 0x2c
   18aa0:	str	r1, [sp, #40]	; 0x28
   18aa4:	mov	r3, sp
   18aa8:	mov	r1, ip
   18aac:	mvn	r2, #0
   18ab0:	bl	184d0 <__assert_fail@plt+0x6ccc>
   18ab4:	sub	sp, fp, #8
   18ab8:	pop	{r4, r5, fp, pc}
   18abc:	push	{r4, r5, fp, lr}
   18ac0:	add	fp, sp, #8
   18ac4:	sub	sp, sp, #48	; 0x30
   18ac8:	mov	lr, r3
   18acc:	movw	r3, #58016	; 0xe2a0
   18ad0:	mov	ip, #32
   18ad4:	cmp	r1, #0
   18ad8:	mov	r5, sp
   18adc:	movt	r3, #2
   18ae0:	cmpne	r2, #0
   18ae4:	add	r4, r3, #16
   18ae8:	vld1.64	{d16-d17}, [r3], ip
   18aec:	vld1.64	{d18-d19}, [r4]
   18af0:	add	r4, r5, #16
   18af4:	vld1.64	{d20-d21}, [r3]
   18af8:	vst1.64	{d16-d17}, [r5], ip
   18afc:	mov	r3, #10
   18b00:	vst1.64	{d18-d19}, [r4]
   18b04:	vst1.64	{d20-d21}, [r5]
   18b08:	str	r3, [sp]
   18b0c:	bne	18b14 <__assert_fail@plt+0x7310>
   18b10:	bl	117d4 <abort@plt>
   18b14:	ldr	ip, [fp, #8]
   18b18:	str	r2, [sp, #44]	; 0x2c
   18b1c:	str	r1, [sp, #40]	; 0x28
   18b20:	mov	r3, sp
   18b24:	mov	r1, lr
   18b28:	mov	r2, ip
   18b2c:	bl	184d0 <__assert_fail@plt+0x6ccc>
   18b30:	sub	sp, fp, #8
   18b34:	pop	{r4, r5, fp, pc}
   18b38:	push	{r4, sl, fp, lr}
   18b3c:	add	fp, sp, #8
   18b40:	sub	sp, sp, #48	; 0x30
   18b44:	mov	ip, r2
   18b48:	movw	r2, #58016	; 0xe2a0
   18b4c:	mov	lr, #32
   18b50:	cmp	r0, #0
   18b54:	mov	r4, sp
   18b58:	movt	r2, #2
   18b5c:	cmpne	r1, #0
   18b60:	add	r3, r2, #16
   18b64:	vld1.64	{d16-d17}, [r2], lr
   18b68:	vld1.64	{d18-d19}, [r3]
   18b6c:	add	r3, r4, #16
   18b70:	vld1.64	{d20-d21}, [r2]
   18b74:	vst1.64	{d16-d17}, [r4], lr
   18b78:	mov	r2, #10
   18b7c:	vst1.64	{d18-d19}, [r3]
   18b80:	vst1.64	{d20-d21}, [r4]
   18b84:	str	r2, [sp]
   18b88:	bne	18b90 <__assert_fail@plt+0x738c>
   18b8c:	bl	117d4 <abort@plt>
   18b90:	str	r1, [sp, #44]	; 0x2c
   18b94:	str	r0, [sp, #40]	; 0x28
   18b98:	mov	r3, sp
   18b9c:	mov	r0, #0
   18ba0:	mov	r1, ip
   18ba4:	mvn	r2, #0
   18ba8:	bl	184d0 <__assert_fail@plt+0x6ccc>
   18bac:	sub	sp, fp, #8
   18bb0:	pop	{r4, sl, fp, pc}
   18bb4:	push	{r4, r5, fp, lr}
   18bb8:	add	fp, sp, #8
   18bbc:	sub	sp, sp, #48	; 0x30
   18bc0:	mov	lr, r2
   18bc4:	movw	r2, #58016	; 0xe2a0
   18bc8:	mov	ip, r3
   18bcc:	mov	r3, #32
   18bd0:	cmp	r0, #0
   18bd4:	mov	r5, sp
   18bd8:	movt	r2, #2
   18bdc:	cmpne	r1, #0
   18be0:	add	r4, r2, #16
   18be4:	vld1.64	{d16-d17}, [r2], r3
   18be8:	vld1.64	{d18-d19}, [r4]
   18bec:	add	r4, r5, #16
   18bf0:	vld1.64	{d20-d21}, [r2]
   18bf4:	vst1.64	{d16-d17}, [r5], r3
   18bf8:	mov	r2, #10
   18bfc:	vst1.64	{d18-d19}, [r4]
   18c00:	vst1.64	{d20-d21}, [r5]
   18c04:	str	r2, [sp]
   18c08:	bne	18c10 <__assert_fail@plt+0x740c>
   18c0c:	bl	117d4 <abort@plt>
   18c10:	str	r1, [sp, #44]	; 0x2c
   18c14:	str	r0, [sp, #40]	; 0x28
   18c18:	mov	r3, sp
   18c1c:	mov	r0, #0
   18c20:	mov	r1, lr
   18c24:	mov	r2, ip
   18c28:	bl	184d0 <__assert_fail@plt+0x6ccc>
   18c2c:	sub	sp, fp, #8
   18c30:	pop	{r4, r5, fp, pc}
   18c34:	movw	r3, #57720	; 0xe178
   18c38:	movt	r3, #2
   18c3c:	b	184d0 <__assert_fail@plt+0x6ccc>
   18c40:	movw	r3, #57720	; 0xe178
   18c44:	mov	r2, r1
   18c48:	mov	r1, r0
   18c4c:	mov	r0, #0
   18c50:	movt	r3, #2
   18c54:	b	184d0 <__assert_fail@plt+0x6ccc>
   18c58:	movw	r3, #57720	; 0xe178
   18c5c:	mvn	r2, #0
   18c60:	movt	r3, #2
   18c64:	b	184d0 <__assert_fail@plt+0x6ccc>
   18c68:	movw	r3, #57720	; 0xe178
   18c6c:	mov	r1, r0
   18c70:	mov	r0, #0
   18c74:	mvn	r2, #0
   18c78:	movt	r3, #2
   18c7c:	b	184d0 <__assert_fail@plt+0x6ccc>
   18c80:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   18c84:	add	fp, sp, #24
   18c88:	movw	r8, #0
   18c8c:	mov	r6, r2
   18c90:	mov	r4, r1
   18c94:	mov	r5, r0
   18c98:	movt	r8, #32752	; 0x7ff0
   18c9c:	mov	r0, r5
   18ca0:	mov	r1, r4
   18ca4:	mov	r2, r6
   18ca8:	bl	11468 <read@plt>
   18cac:	mov	r7, r0
   18cb0:	cmn	r0, #1
   18cb4:	bgt	18cdc <__assert_fail@plt+0x74d8>
   18cb8:	bl	11684 <__errno_location@plt>
   18cbc:	ldr	r0, [r0]
   18cc0:	cmp	r0, #4
   18cc4:	beq	18c9c <__assert_fail@plt+0x7498>
   18cc8:	cmp	r6, r8
   18ccc:	bls	18cdc <__assert_fail@plt+0x74d8>
   18cd0:	cmp	r0, #22
   18cd4:	mov	r6, r8
   18cd8:	beq	18c9c <__assert_fail@plt+0x7498>
   18cdc:	mov	r0, r7
   18ce0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   18ce4:	push	{r4, r5, fp, lr}
   18ce8:	add	fp, sp, #8
   18cec:	mov	r4, r1
   18cf0:	mov	r1, #0
   18cf4:	mov	r5, r0
   18cf8:	mov	r2, r4
   18cfc:	bl	116d8 <memchr@plt>
   18d00:	rsb	r1, r5, #1
   18d04:	cmp	r0, #0
   18d08:	addne	r4, r1, r0
   18d0c:	mov	r0, r4
   18d10:	pop	{r4, r5, fp, pc}
   18d14:	push	{r4, r5, r6, r7, fp, lr}
   18d18:	add	fp, sp, #16
   18d1c:	mov	r4, r0
   18d20:	cmp	r0, #2
   18d24:	movhi	r0, r4
   18d28:	pophi	{r4, r5, r6, r7, fp, pc}
   18d2c:	mov	r0, r4
   18d30:	bl	1ab34 <__assert_fail@plt+0x9330>
   18d34:	mov	r5, r0
   18d38:	bl	11684 <__errno_location@plt>
   18d3c:	ldr	r7, [r0]
   18d40:	mov	r6, r0
   18d44:	mov	r0, r4
   18d48:	bl	117ec <close@plt>
   18d4c:	mov	r0, r5
   18d50:	str	r7, [r6]
   18d54:	pop	{r4, r5, r6, r7, fp, pc}
   18d58:	push	{r4, r5, r6, sl, fp, lr}
   18d5c:	add	fp, sp, #16
   18d60:	mov	r4, r0
   18d64:	bl	116fc <pipe@plt>
   18d68:	mvn	r5, #0
   18d6c:	cmp	r0, #0
   18d70:	beq	18d7c <__assert_fail@plt+0x7578>
   18d74:	mov	r0, r5
   18d78:	pop	{r4, r5, r6, sl, fp, pc}
   18d7c:	ldr	r0, [r4]
   18d80:	bl	18d14 <__assert_fail@plt+0x7510>
   18d84:	cmn	r0, #1
   18d88:	str	r0, [r4]
   18d8c:	ble	18dac <__assert_fail@plt+0x75a8>
   18d90:	ldr	r0, [r4, #4]
   18d94:	bl	18d14 <__assert_fail@plt+0x7510>
   18d98:	mov	r5, #0
   18d9c:	cmp	r0, #0
   18da0:	str	r0, [r4, #4]
   18da4:	bge	18d74 <__assert_fail@plt+0x7570>
   18da8:	b	18db0 <__assert_fail@plt+0x75ac>
   18dac:	mov	r5, #1
   18db0:	bl	11684 <__errno_location@plt>
   18db4:	mov	r6, r0
   18db8:	ldr	r0, [r4, r5, lsl #2]
   18dbc:	ldr	r4, [r6]
   18dc0:	bl	117ec <close@plt>
   18dc4:	mvn	r5, #0
   18dc8:	str	r4, [r6]
   18dcc:	mov	r0, r5
   18dd0:	pop	{r4, r5, r6, sl, fp, pc}
   18dd4:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   18dd8:	add	fp, sp, #24
   18ddc:	sub	sp, sp, #32
   18de0:	ldr	r7, [fp, #12]
   18de4:	ldr	r6, [fp, #8]
   18de8:	mov	r4, r2
   18dec:	mov	r5, r0
   18df0:	cmp	r1, #0
   18df4:	beq	18e14 <__assert_fail@plt+0x7610>
   18df8:	mov	r2, r1
   18dfc:	movw	r1, #52380	; 0xcc9c
   18e00:	str	r3, [sp]
   18e04:	mov	r0, r5
   18e08:	mov	r3, r4
   18e0c:	movt	r1, #1
   18e10:	b	18e24 <__assert_fail@plt+0x7620>
   18e14:	movw	r1, #52392	; 0xcca8
   18e18:	mov	r0, r5
   18e1c:	mov	r2, r4
   18e20:	movt	r1, #1
   18e24:	bl	11678 <fprintf@plt>
   18e28:	movw	r1, #52399	; 0xccaf
   18e2c:	mov	r0, #0
   18e30:	mov	r2, #5
   18e34:	movt	r1, #1
   18e38:	bl	114ec <dcgettext@plt>
   18e3c:	movw	r1, #53095	; 0xcf67
   18e40:	mov	r2, r0
   18e44:	mov	r0, r5
   18e48:	movw	r3, #2022	; 0x7e6
   18e4c:	movt	r1, #1
   18e50:	bl	11678 <fprintf@plt>
   18e54:	mov	r0, #10
   18e58:	mov	r1, r5
   18e5c:	bl	1175c <fputc@plt>
   18e60:	movw	r1, #52403	; 0xccb3
   18e64:	mov	r0, #0
   18e68:	mov	r2, #5
   18e6c:	movt	r1, #1
   18e70:	bl	114ec <dcgettext@plt>
   18e74:	movw	r2, #52574	; 0xcd5e
   18e78:	mov	r1, r0
   18e7c:	mov	r0, r5
   18e80:	movt	r2, #1
   18e84:	bl	11678 <fprintf@plt>
   18e88:	mov	r0, #10
   18e8c:	mov	r1, r5
   18e90:	bl	1175c <fputc@plt>
   18e94:	cmp	r7, #9
   18e98:	bhi	18ed4 <__assert_fail@plt+0x76d0>
   18e9c:	add	r0, pc, #0
   18ea0:	ldr	pc, [r0, r7, lsl #2]
   18ea4:	andeq	r8, r1, ip, asr #29
   18ea8:	andeq	r8, r1, r0, ror #29
   18eac:	andeq	r8, r1, ip, lsl #30
   18eb0:	andeq	r8, r1, r8, lsr pc
   18eb4:	andeq	r8, r1, ip, ror #30
   18eb8:	andeq	r8, r1, r4, lsr #31
   18ebc:	andeq	r8, r1, r4, ror #31
   18ec0:	andeq	r9, r1, ip, lsr #32
   18ec4:	andeq	r9, r1, r8, asr #1
   18ec8:	andeq	r9, r1, r0, ror r0
   18ecc:	sub	sp, fp, #24
   18ed0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   18ed4:	movw	r1, #52927	; 0xcebf
   18ed8:	movt	r1, #1
   18edc:	b	19078 <__assert_fail@plt+0x7874>
   18ee0:	movw	r1, #52608	; 0xcd80
   18ee4:	mov	r0, #0
   18ee8:	mov	r2, #5
   18eec:	movt	r1, #1
   18ef0:	bl	114ec <dcgettext@plt>
   18ef4:	ldr	r2, [r6]
   18ef8:	mov	r1, r0
   18efc:	mov	r0, r5
   18f00:	sub	sp, fp, #24
   18f04:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   18f08:	b	11678 <fprintf@plt>
   18f0c:	movw	r1, #52624	; 0xcd90
   18f10:	mov	r0, #0
   18f14:	mov	r2, #5
   18f18:	movt	r1, #1
   18f1c:	bl	114ec <dcgettext@plt>
   18f20:	ldm	r6, {r2, r3}
   18f24:	mov	r1, r0
   18f28:	mov	r0, r5
   18f2c:	sub	sp, fp, #24
   18f30:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   18f34:	b	11678 <fprintf@plt>
   18f38:	movw	r1, #52647	; 0xcda7
   18f3c:	mov	r0, #0
   18f40:	mov	r2, #5
   18f44:	movt	r1, #1
   18f48:	bl	114ec <dcgettext@plt>
   18f4c:	mov	r1, r0
   18f50:	ldm	r6, {r2, r3}
   18f54:	ldr	r0, [r6, #8]
   18f58:	str	r0, [sp]
   18f5c:	mov	r0, r5
   18f60:	bl	11678 <fprintf@plt>
   18f64:	sub	sp, fp, #24
   18f68:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   18f6c:	movw	r1, #52675	; 0xcdc3
   18f70:	mov	r0, #0
   18f74:	mov	r2, #5
   18f78:	movt	r1, #1
   18f7c:	bl	114ec <dcgettext@plt>
   18f80:	ldm	r6, {r2, r3}
   18f84:	mov	r1, r0
   18f88:	ldr	r0, [r6, #8]
   18f8c:	ldr	r7, [r6, #12]
   18f90:	stm	sp, {r0, r7}
   18f94:	mov	r0, r5
   18f98:	bl	11678 <fprintf@plt>
   18f9c:	sub	sp, fp, #24
   18fa0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   18fa4:	movw	r1, #52707	; 0xcde3
   18fa8:	mov	r0, #0
   18fac:	mov	r2, #5
   18fb0:	movt	r1, #1
   18fb4:	bl	114ec <dcgettext@plt>
   18fb8:	ldm	r6, {r2, r3}
   18fbc:	mov	r1, r0
   18fc0:	ldr	r0, [r6, #8]
   18fc4:	ldr	r7, [r6, #12]
   18fc8:	ldr	r6, [r6, #16]
   18fcc:	stm	sp, {r0, r7}
   18fd0:	str	r6, [sp, #8]
   18fd4:	mov	r0, r5
   18fd8:	bl	11678 <fprintf@plt>
   18fdc:	sub	sp, fp, #24
   18fe0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   18fe4:	movw	r1, #52743	; 0xce07
   18fe8:	mov	r0, #0
   18fec:	mov	r2, #5
   18ff0:	movt	r1, #1
   18ff4:	bl	114ec <dcgettext@plt>
   18ff8:	ldm	r6, {r2, r3}
   18ffc:	mov	r1, r0
   19000:	ldr	r0, [r6, #8]
   19004:	ldr	r7, [r6, #12]
   19008:	ldr	r4, [r6, #16]
   1900c:	ldr	r6, [r6, #20]
   19010:	stm	sp, {r0, r7}
   19014:	str	r4, [sp, #8]
   19018:	str	r6, [sp, #12]
   1901c:	mov	r0, r5
   19020:	bl	11678 <fprintf@plt>
   19024:	sub	sp, fp, #24
   19028:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1902c:	movw	r1, #52783	; 0xce2f
   19030:	mov	r0, #0
   19034:	mov	r2, #5
   19038:	movt	r1, #1
   1903c:	bl	114ec <dcgettext@plt>
   19040:	ldm	r6, {r2, r3}
   19044:	mov	ip, r0
   19048:	ldr	r0, [r6, #8]
   1904c:	ldr	r7, [r6, #12]
   19050:	ldr	r4, [r6, #16]
   19054:	ldr	r1, [r6, #20]
   19058:	ldr	r6, [r6, #24]
   1905c:	stm	sp, {r0, r7}
   19060:	str	r4, [sp, #8]
   19064:	str	r1, [sp, #12]
   19068:	str	r6, [sp, #16]
   1906c:	b	19110 <__assert_fail@plt+0x790c>
   19070:	movw	r1, #52875	; 0xce8b
   19074:	movt	r1, #1
   19078:	mov	r0, #0
   1907c:	mov	r2, #5
   19080:	bl	114ec <dcgettext@plt>
   19084:	mov	ip, r0
   19088:	ldr	r2, [r6]
   1908c:	ldr	r3, [r6, #4]
   19090:	ldr	r0, [r6, #8]
   19094:	ldr	r7, [r6, #12]
   19098:	ldr	r4, [r6, #16]
   1909c:	ldr	r1, [r6, #20]
   190a0:	ldr	lr, [r6, #24]
   190a4:	ldr	r8, [r6, #28]
   190a8:	ldr	r6, [r6, #32]
   190ac:	stm	sp, {r0, r7}
   190b0:	str	r4, [sp, #8]
   190b4:	str	r1, [sp, #12]
   190b8:	str	lr, [sp, #16]
   190bc:	str	r8, [sp, #20]
   190c0:	str	r6, [sp, #24]
   190c4:	b	19110 <__assert_fail@plt+0x790c>
   190c8:	movw	r1, #52827	; 0xce5b
   190cc:	mov	r0, #0
   190d0:	mov	r2, #5
   190d4:	movt	r1, #1
   190d8:	bl	114ec <dcgettext@plt>
   190dc:	ldm	r6, {r2, r3}
   190e0:	mov	ip, r0
   190e4:	ldr	r0, [r6, #8]
   190e8:	ldr	r7, [r6, #12]
   190ec:	ldr	r4, [r6, #16]
   190f0:	ldr	r1, [r6, #20]
   190f4:	ldr	lr, [r6, #24]
   190f8:	ldr	r6, [r6, #28]
   190fc:	stm	sp, {r0, r7}
   19100:	str	r4, [sp, #8]
   19104:	str	r1, [sp, #12]
   19108:	str	lr, [sp, #16]
   1910c:	str	r6, [sp, #20]
   19110:	mov	r0, r5
   19114:	mov	r1, ip
   19118:	bl	11678 <fprintf@plt>
   1911c:	sub	sp, fp, #24
   19120:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   19124:	push	{r4, sl, fp, lr}
   19128:	add	fp, sp, #8
   1912c:	sub	sp, sp, #8
   19130:	ldr	ip, [fp, #8]
   19134:	mov	lr, #0
   19138:	ldr	r4, [ip, lr, lsl #2]
   1913c:	add	lr, lr, #1
   19140:	cmp	r4, #0
   19144:	bne	19138 <__assert_fail@plt+0x7934>
   19148:	sub	r4, lr, #1
   1914c:	str	ip, [sp]
   19150:	str	r4, [sp, #4]
   19154:	bl	18dd4 <__assert_fail@plt+0x75d0>
   19158:	sub	sp, fp, #8
   1915c:	pop	{r4, sl, fp, pc}
   19160:	push	{fp, lr}
   19164:	mov	fp, sp
   19168:	sub	sp, sp, #48	; 0x30
   1916c:	ldr	ip, [fp, #8]
   19170:	ldr	lr, [ip]
   19174:	cmp	lr, #0
   19178:	str	lr, [sp, #8]
   1917c:	beq	19218 <__assert_fail@plt+0x7a14>
   19180:	ldr	lr, [ip, #4]
   19184:	cmp	lr, #0
   19188:	str	lr, [sp, #12]
   1918c:	beq	19220 <__assert_fail@plt+0x7a1c>
   19190:	ldr	lr, [ip, #8]
   19194:	cmp	lr, #0
   19198:	str	lr, [sp, #16]
   1919c:	beq	19228 <__assert_fail@plt+0x7a24>
   191a0:	ldr	lr, [ip, #12]
   191a4:	cmp	lr, #0
   191a8:	str	lr, [sp, #20]
   191ac:	beq	19230 <__assert_fail@plt+0x7a2c>
   191b0:	ldr	lr, [ip, #16]
   191b4:	cmp	lr, #0
   191b8:	str	lr, [sp, #24]
   191bc:	beq	19238 <__assert_fail@plt+0x7a34>
   191c0:	ldr	lr, [ip, #20]
   191c4:	cmp	lr, #0
   191c8:	str	lr, [sp, #28]
   191cc:	beq	19240 <__assert_fail@plt+0x7a3c>
   191d0:	ldr	lr, [ip, #24]
   191d4:	cmp	lr, #0
   191d8:	str	lr, [sp, #32]
   191dc:	beq	19248 <__assert_fail@plt+0x7a44>
   191e0:	ldr	lr, [ip, #28]
   191e4:	cmp	lr, #0
   191e8:	str	lr, [sp, #36]	; 0x24
   191ec:	beq	19250 <__assert_fail@plt+0x7a4c>
   191f0:	ldr	lr, [ip, #32]
   191f4:	cmp	lr, #0
   191f8:	str	lr, [sp, #40]	; 0x28
   191fc:	beq	19258 <__assert_fail@plt+0x7a54>
   19200:	ldr	lr, [ip, #36]	; 0x24
   19204:	mov	ip, #10
   19208:	cmp	lr, #0
   1920c:	str	lr, [sp, #44]	; 0x2c
   19210:	movweq	ip, #9
   19214:	b	1925c <__assert_fail@plt+0x7a58>
   19218:	mov	ip, #0
   1921c:	b	1925c <__assert_fail@plt+0x7a58>
   19220:	mov	ip, #1
   19224:	b	1925c <__assert_fail@plt+0x7a58>
   19228:	mov	ip, #2
   1922c:	b	1925c <__assert_fail@plt+0x7a58>
   19230:	mov	ip, #3
   19234:	b	1925c <__assert_fail@plt+0x7a58>
   19238:	mov	ip, #4
   1923c:	b	1925c <__assert_fail@plt+0x7a58>
   19240:	mov	ip, #5
   19244:	b	1925c <__assert_fail@plt+0x7a58>
   19248:	mov	ip, #6
   1924c:	b	1925c <__assert_fail@plt+0x7a58>
   19250:	mov	ip, #7
   19254:	b	1925c <__assert_fail@plt+0x7a58>
   19258:	mov	ip, #8
   1925c:	add	lr, sp, #8
   19260:	str	ip, [sp, #4]
   19264:	str	lr, [sp]
   19268:	bl	18dd4 <__assert_fail@plt+0x75d0>
   1926c:	mov	sp, fp
   19270:	pop	{fp, pc}
   19274:	push	{fp, lr}
   19278:	mov	fp, sp
   1927c:	sub	sp, sp, #56	; 0x38
   19280:	add	ip, fp, #8
   19284:	str	ip, [sp, #12]
   19288:	ldr	lr, [fp, #8]
   1928c:	cmp	lr, #0
   19290:	str	lr, [sp, #16]
   19294:	beq	19330 <__assert_fail@plt+0x7b2c>
   19298:	ldr	lr, [ip, #4]
   1929c:	cmp	lr, #0
   192a0:	str	lr, [sp, #20]
   192a4:	beq	19338 <__assert_fail@plt+0x7b34>
   192a8:	ldr	lr, [ip, #8]
   192ac:	cmp	lr, #0
   192b0:	str	lr, [sp, #24]
   192b4:	beq	19340 <__assert_fail@plt+0x7b3c>
   192b8:	ldr	lr, [ip, #12]
   192bc:	cmp	lr, #0
   192c0:	str	lr, [sp, #28]
   192c4:	beq	19348 <__assert_fail@plt+0x7b44>
   192c8:	ldr	lr, [ip, #16]
   192cc:	cmp	lr, #0
   192d0:	str	lr, [sp, #32]
   192d4:	beq	19350 <__assert_fail@plt+0x7b4c>
   192d8:	ldr	lr, [ip, #20]
   192dc:	cmp	lr, #0
   192e0:	str	lr, [sp, #36]	; 0x24
   192e4:	beq	19358 <__assert_fail@plt+0x7b54>
   192e8:	ldr	lr, [ip, #24]
   192ec:	cmp	lr, #0
   192f0:	str	lr, [sp, #40]	; 0x28
   192f4:	beq	19360 <__assert_fail@plt+0x7b5c>
   192f8:	ldr	lr, [ip, #28]
   192fc:	cmp	lr, #0
   19300:	str	lr, [sp, #44]	; 0x2c
   19304:	beq	19368 <__assert_fail@plt+0x7b64>
   19308:	ldr	lr, [ip, #32]
   1930c:	cmp	lr, #0
   19310:	str	lr, [sp, #48]	; 0x30
   19314:	beq	19370 <__assert_fail@plt+0x7b6c>
   19318:	ldr	lr, [ip, #36]	; 0x24
   1931c:	mov	ip, #10
   19320:	cmp	lr, #0
   19324:	str	lr, [sp, #52]	; 0x34
   19328:	movweq	ip, #9
   1932c:	b	19374 <__assert_fail@plt+0x7b70>
   19330:	mov	ip, #0
   19334:	b	19374 <__assert_fail@plt+0x7b70>
   19338:	mov	ip, #1
   1933c:	b	19374 <__assert_fail@plt+0x7b70>
   19340:	mov	ip, #2
   19344:	b	19374 <__assert_fail@plt+0x7b70>
   19348:	mov	ip, #3
   1934c:	b	19374 <__assert_fail@plt+0x7b70>
   19350:	mov	ip, #4
   19354:	b	19374 <__assert_fail@plt+0x7b70>
   19358:	mov	ip, #5
   1935c:	b	19374 <__assert_fail@plt+0x7b70>
   19360:	mov	ip, #6
   19364:	b	19374 <__assert_fail@plt+0x7b70>
   19368:	mov	ip, #7
   1936c:	b	19374 <__assert_fail@plt+0x7b70>
   19370:	mov	ip, #8
   19374:	add	lr, sp, #16
   19378:	str	ip, [sp, #4]
   1937c:	str	lr, [sp]
   19380:	bl	18dd4 <__assert_fail@plt+0x75d0>
   19384:	mov	sp, fp
   19388:	pop	{fp, pc}
   1938c:	push	{fp, lr}
   19390:	mov	fp, sp
   19394:	movw	r0, #57820	; 0xe1dc
   19398:	movt	r0, #2
   1939c:	ldr	r1, [r0]
   193a0:	mov	r0, #10
   193a4:	bl	1175c <fputc@plt>
   193a8:	movw	r1, #52987	; 0xcefb
   193ac:	mov	r0, #0
   193b0:	mov	r2, #5
   193b4:	movt	r1, #1
   193b8:	bl	114ec <dcgettext@plt>
   193bc:	movw	r1, #51866	; 0xca9a
   193c0:	movt	r1, #1
   193c4:	bl	1145c <printf@plt>
   193c8:	movw	r1, #53007	; 0xcf0f
   193cc:	mov	r0, #0
   193d0:	mov	r2, #5
   193d4:	movt	r1, #1
   193d8:	bl	114ec <dcgettext@plt>
   193dc:	movw	r1, #51466	; 0xc90a
   193e0:	movw	r2, #51780	; 0xca44
   193e4:	movt	r1, #1
   193e8:	movt	r2, #1
   193ec:	bl	1145c <printf@plt>
   193f0:	movw	r1, #53027	; 0xcf23
   193f4:	mov	r0, #0
   193f8:	mov	r2, #5
   193fc:	movt	r1, #1
   19400:	bl	114ec <dcgettext@plt>
   19404:	movw	r1, #53066	; 0xcf4a
   19408:	movt	r1, #1
   1940c:	pop	{fp, lr}
   19410:	b	1145c <printf@plt>
   19414:	push	{r4, r5, r6, sl, fp, lr}
   19418:	add	fp, sp, #16
   1941c:	mov	r4, r2
   19420:	mov	r5, r1
   19424:	mov	r6, r0
   19428:	bl	1a734 <__assert_fail@plt+0x8f30>
   1942c:	cmp	r0, #0
   19430:	popne	{r4, r5, r6, sl, fp, pc}
   19434:	cmp	r6, #0
   19438:	beq	1944c <__assert_fail@plt+0x7c48>
   1943c:	cmp	r5, #0
   19440:	cmpne	r4, #0
   19444:	bne	1944c <__assert_fail@plt+0x7c48>
   19448:	pop	{r4, r5, r6, sl, fp, pc}
   1944c:	bl	199ec <__assert_fail@plt+0x81e8>
   19450:	push	{r4, r5, r6, sl, fp, lr}
   19454:	add	fp, sp, #16
   19458:	mov	r4, r2
   1945c:	mov	r5, r1
   19460:	mov	r6, r0
   19464:	bl	1a734 <__assert_fail@plt+0x8f30>
   19468:	cmp	r0, #0
   1946c:	popne	{r4, r5, r6, sl, fp, pc}
   19470:	cmp	r6, #0
   19474:	beq	19488 <__assert_fail@plt+0x7c84>
   19478:	cmp	r5, #0
   1947c:	cmpne	r4, #0
   19480:	bne	19488 <__assert_fail@plt+0x7c84>
   19484:	pop	{r4, r5, r6, sl, fp, pc}
   19488:	bl	199ec <__assert_fail@plt+0x81e8>
   1948c:	push	{fp, lr}
   19490:	mov	fp, sp
   19494:	bl	1a650 <__assert_fail@plt+0x8e4c>
   19498:	cmp	r0, #0
   1949c:	popne	{fp, pc}
   194a0:	bl	199ec <__assert_fail@plt+0x81e8>
   194a4:	push	{fp, lr}
   194a8:	mov	fp, sp
   194ac:	bl	1a650 <__assert_fail@plt+0x8e4c>
   194b0:	cmp	r0, #0
   194b4:	popne	{fp, pc}
   194b8:	bl	199ec <__assert_fail@plt+0x81e8>
   194bc:	push	{fp, lr}
   194c0:	mov	fp, sp
   194c4:	bl	1a650 <__assert_fail@plt+0x8e4c>
   194c8:	cmp	r0, #0
   194cc:	popne	{fp, pc}
   194d0:	bl	199ec <__assert_fail@plt+0x81e8>
   194d4:	push	{r4, r5, fp, lr}
   194d8:	add	fp, sp, #8
   194dc:	mov	r4, r1
   194e0:	mov	r5, r0
   194e4:	bl	1a6e0 <__assert_fail@plt+0x8edc>
   194e8:	cmp	r0, #0
   194ec:	popne	{r4, r5, fp, pc}
   194f0:	cmp	r5, #0
   194f4:	beq	19504 <__assert_fail@plt+0x7d00>
   194f8:	cmp	r4, #0
   194fc:	bne	19504 <__assert_fail@plt+0x7d00>
   19500:	pop	{r4, r5, fp, pc}
   19504:	bl	199ec <__assert_fail@plt+0x81e8>
   19508:	push	{fp, lr}
   1950c:	mov	fp, sp
   19510:	cmp	r1, #0
   19514:	orreq	r1, r1, #1
   19518:	bl	1a6e0 <__assert_fail@plt+0x8edc>
   1951c:	cmp	r0, #0
   19520:	popne	{fp, pc}
   19524:	bl	199ec <__assert_fail@plt+0x81e8>
   19528:	push	{fp, lr}
   1952c:	mov	fp, sp
   19530:	clz	r3, r2
   19534:	lsr	ip, r3, #5
   19538:	clz	r3, r1
   1953c:	lsr	r3, r3, #5
   19540:	orrs	r3, r3, ip
   19544:	movwne	r1, #1
   19548:	movwne	r2, #1
   1954c:	bl	1a734 <__assert_fail@plt+0x8f30>
   19550:	cmp	r0, #0
   19554:	popne	{fp, pc}
   19558:	bl	199ec <__assert_fail@plt+0x81e8>
   1955c:	push	{fp, lr}
   19560:	mov	fp, sp
   19564:	mov	r2, r1
   19568:	mov	r1, r0
   1956c:	mov	r0, #0
   19570:	bl	1a734 <__assert_fail@plt+0x8f30>
   19574:	cmp	r0, #0
   19578:	popne	{fp, pc}
   1957c:	bl	199ec <__assert_fail@plt+0x81e8>
   19580:	push	{fp, lr}
   19584:	mov	fp, sp
   19588:	mov	r2, r1
   1958c:	mov	r1, r0
   19590:	clz	r0, r2
   19594:	clz	r3, r1
   19598:	lsr	r0, r0, #5
   1959c:	lsr	r3, r3, #5
   195a0:	orrs	r0, r3, r0
   195a4:	movwne	r1, #1
   195a8:	movwne	r2, #1
   195ac:	mov	r0, #0
   195b0:	bl	1a734 <__assert_fail@plt+0x8f30>
   195b4:	cmp	r0, #0
   195b8:	popne	{fp, pc}
   195bc:	bl	199ec <__assert_fail@plt+0x81e8>
   195c0:	push	{r4, r5, r6, sl, fp, lr}
   195c4:	add	fp, sp, #16
   195c8:	ldr	r5, [r1]
   195cc:	mov	r4, r1
   195d0:	mov	r6, r0
   195d4:	cmp	r0, #0
   195d8:	beq	195f0 <__assert_fail@plt+0x7dec>
   195dc:	mov	r0, #1
   195e0:	add	r0, r0, r5, lsr #1
   195e4:	adds	r5, r5, r0
   195e8:	bcc	195f8 <__assert_fail@plt+0x7df4>
   195ec:	b	19634 <__assert_fail@plt+0x7e30>
   195f0:	cmp	r5, #0
   195f4:	movweq	r5, #64	; 0x40
   195f8:	mov	r0, r6
   195fc:	mov	r1, r5
   19600:	mov	r2, #1
   19604:	bl	1a734 <__assert_fail@plt+0x8f30>
   19608:	cmp	r5, #0
   1960c:	mov	r1, r5
   19610:	movwne	r1, #1
   19614:	cmp	r0, #0
   19618:	bne	1962c <__assert_fail@plt+0x7e28>
   1961c:	clz	r2, r6
   19620:	lsr	r2, r2, #5
   19624:	orrs	r1, r2, r1
   19628:	bne	19634 <__assert_fail@plt+0x7e30>
   1962c:	str	r5, [r4]
   19630:	pop	{r4, r5, r6, sl, fp, pc}
   19634:	bl	199ec <__assert_fail@plt+0x81e8>
   19638:	push	{r4, r5, r6, r7, fp, lr}
   1963c:	add	fp, sp, #16
   19640:	ldr	r5, [r1]
   19644:	mov	r6, r2
   19648:	mov	r4, r1
   1964c:	mov	r7, r0
   19650:	cmp	r0, #0
   19654:	beq	1966c <__assert_fail@plt+0x7e68>
   19658:	mov	r0, #1
   1965c:	add	r0, r0, r5, lsr #1
   19660:	adds	r5, r5, r0
   19664:	bcc	19684 <__assert_fail@plt+0x7e80>
   19668:	b	196b8 <__assert_fail@plt+0x7eb4>
   1966c:	cmp	r5, #0
   19670:	bne	19684 <__assert_fail@plt+0x7e80>
   19674:	mov	r0, #64	; 0x40
   19678:	cmp	r6, #64	; 0x40
   1967c:	udiv	r5, r0, r6
   19680:	addhi	r5, r5, #1
   19684:	mov	r0, r7
   19688:	mov	r1, r5
   1968c:	mov	r2, r6
   19690:	bl	1a734 <__assert_fail@plt+0x8f30>
   19694:	cmp	r0, #0
   19698:	bne	196b0 <__assert_fail@plt+0x7eac>
   1969c:	cmp	r7, #0
   196a0:	beq	196b8 <__assert_fail@plt+0x7eb4>
   196a4:	cmp	r6, #0
   196a8:	cmpne	r5, #0
   196ac:	bne	196b8 <__assert_fail@plt+0x7eb4>
   196b0:	str	r5, [r4]
   196b4:	pop	{r4, r5, r6, r7, fp, pc}
   196b8:	bl	199ec <__assert_fail@plt+0x81e8>
   196bc:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   196c0:	add	fp, sp, #24
   196c4:	mov	r8, r1
   196c8:	ldr	r1, [r1]
   196cc:	mov	r5, r0
   196d0:	add	r0, r1, r1, asr #1
   196d4:	cmp	r0, r1
   196d8:	mvnvs	r0, #-2147483648	; 0x80000000
   196dc:	cmp	r0, r3
   196e0:	mov	r7, r0
   196e4:	movgt	r7, r3
   196e8:	cmn	r3, #1
   196ec:	movle	r7, r0
   196f0:	ldr	r0, [fp, #8]
   196f4:	cmn	r0, #1
   196f8:	ble	19720 <__assert_fail@plt+0x7f1c>
   196fc:	cmp	r0, #0
   19700:	beq	19774 <__assert_fail@plt+0x7f70>
   19704:	cmn	r7, #1
   19708:	ble	19748 <__assert_fail@plt+0x7f44>
   1970c:	mvn	r4, #-2147483648	; 0x80000000
   19710:	udiv	r6, r4, r0
   19714:	cmp	r6, r7
   19718:	bge	19774 <__assert_fail@plt+0x7f70>
   1971c:	b	19784 <__assert_fail@plt+0x7f80>
   19720:	cmn	r7, #1
   19724:	ble	19764 <__assert_fail@plt+0x7f60>
   19728:	cmn	r0, #1
   1972c:	beq	19774 <__assert_fail@plt+0x7f70>
   19730:	mov	r6, #-2147483648	; 0x80000000
   19734:	mvn	r4, #-2147483648	; 0x80000000
   19738:	sdiv	r6, r6, r0
   1973c:	cmp	r6, r7
   19740:	bge	19774 <__assert_fail@plt+0x7f70>
   19744:	b	19784 <__assert_fail@plt+0x7f80>
   19748:	beq	19774 <__assert_fail@plt+0x7f70>
   1974c:	mov	r6, #-2147483648	; 0x80000000
   19750:	mvn	r4, #-2147483648	; 0x80000000
   19754:	sdiv	r6, r6, r7
   19758:	cmp	r6, r0
   1975c:	bge	19774 <__assert_fail@plt+0x7f70>
   19760:	b	19784 <__assert_fail@plt+0x7f80>
   19764:	mvn	r4, #-2147483648	; 0x80000000
   19768:	sdiv	r6, r4, r0
   1976c:	cmp	r7, r6
   19770:	blt	19784 <__assert_fail@plt+0x7f80>
   19774:	mul	r6, r7, r0
   19778:	mov	r4, #64	; 0x40
   1977c:	cmp	r6, #63	; 0x3f
   19780:	bgt	1978c <__assert_fail@plt+0x7f88>
   19784:	sdiv	r7, r4, r0
   19788:	mul	r6, r7, r0
   1978c:	cmp	r5, #0
   19790:	moveq	r4, #0
   19794:	streq	r4, [r8]
   19798:	sub	r4, r7, r1
   1979c:	cmp	r4, r2
   197a0:	bge	1984c <__assert_fail@plt+0x8048>
   197a4:	add	r7, r1, r2
   197a8:	mov	r6, #0
   197ac:	mov	r2, #0
   197b0:	cmp	r7, r3
   197b4:	movwgt	r6, #1
   197b8:	cmn	r3, #1
   197bc:	movwgt	r2, #1
   197c0:	cmp	r7, r1
   197c4:	bvs	19880 <__assert_fail@plt+0x807c>
   197c8:	ands	r1, r2, r6
   197cc:	bne	19880 <__assert_fail@plt+0x807c>
   197d0:	cmn	r0, #1
   197d4:	ble	197fc <__assert_fail@plt+0x7ff8>
   197d8:	cmp	r0, #0
   197dc:	beq	19848 <__assert_fail@plt+0x8044>
   197e0:	cmn	r7, #1
   197e4:	ble	19820 <__assert_fail@plt+0x801c>
   197e8:	mvn	r1, #-2147483648	; 0x80000000
   197ec:	udiv	r1, r1, r0
   197f0:	cmp	r1, r7
   197f4:	bge	19848 <__assert_fail@plt+0x8044>
   197f8:	b	19880 <__assert_fail@plt+0x807c>
   197fc:	cmn	r7, #1
   19800:	ble	19838 <__assert_fail@plt+0x8034>
   19804:	cmn	r0, #1
   19808:	beq	19848 <__assert_fail@plt+0x8044>
   1980c:	mov	r1, #-2147483648	; 0x80000000
   19810:	sdiv	r1, r1, r0
   19814:	cmp	r1, r7
   19818:	bge	19848 <__assert_fail@plt+0x8044>
   1981c:	b	19880 <__assert_fail@plt+0x807c>
   19820:	beq	19848 <__assert_fail@plt+0x8044>
   19824:	mov	r1, #-2147483648	; 0x80000000
   19828:	sdiv	r1, r1, r7
   1982c:	cmp	r1, r0
   19830:	bge	19848 <__assert_fail@plt+0x8044>
   19834:	b	19880 <__assert_fail@plt+0x807c>
   19838:	mvn	r1, #-2147483648	; 0x80000000
   1983c:	sdiv	r1, r1, r0
   19840:	cmp	r7, r1
   19844:	blt	19880 <__assert_fail@plt+0x807c>
   19848:	mul	r6, r7, r0
   1984c:	mov	r0, r5
   19850:	mov	r1, r6
   19854:	bl	1a6e0 <__assert_fail@plt+0x8edc>
   19858:	cmp	r6, #0
   1985c:	movwne	r6, #1
   19860:	cmp	r0, #0
   19864:	bne	19878 <__assert_fail@plt+0x8074>
   19868:	clz	r1, r5
   1986c:	lsr	r1, r1, #5
   19870:	orrs	r1, r1, r6
   19874:	bne	19880 <__assert_fail@plt+0x807c>
   19878:	str	r7, [r8]
   1987c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   19880:	bl	199ec <__assert_fail@plt+0x81e8>
   19884:	push	{fp, lr}
   19888:	mov	fp, sp
   1988c:	mov	r1, #1
   19890:	bl	1a2ac <__assert_fail@plt+0x8aa8>
   19894:	cmp	r0, #0
   19898:	popne	{fp, pc}
   1989c:	bl	199ec <__assert_fail@plt+0x81e8>
   198a0:	push	{fp, lr}
   198a4:	mov	fp, sp
   198a8:	bl	1a2ac <__assert_fail@plt+0x8aa8>
   198ac:	cmp	r0, #0
   198b0:	popne	{fp, pc}
   198b4:	bl	199ec <__assert_fail@plt+0x81e8>
   198b8:	push	{fp, lr}
   198bc:	mov	fp, sp
   198c0:	mov	r1, #1
   198c4:	bl	1a2ac <__assert_fail@plt+0x8aa8>
   198c8:	cmp	r0, #0
   198cc:	popne	{fp, pc}
   198d0:	bl	199ec <__assert_fail@plt+0x81e8>
   198d4:	push	{fp, lr}
   198d8:	mov	fp, sp
   198dc:	bl	1a2ac <__assert_fail@plt+0x8aa8>
   198e0:	cmp	r0, #0
   198e4:	popne	{fp, pc}
   198e8:	bl	199ec <__assert_fail@plt+0x81e8>
   198ec:	push	{r4, r5, r6, sl, fp, lr}
   198f0:	add	fp, sp, #16
   198f4:	mov	r5, r0
   198f8:	mov	r0, r1
   198fc:	mov	r4, r1
   19900:	bl	1a650 <__assert_fail@plt+0x8e4c>
   19904:	cmp	r0, #0
   19908:	beq	19924 <__assert_fail@plt+0x8120>
   1990c:	mov	r1, r5
   19910:	mov	r2, r4
   19914:	mov	r6, r0
   19918:	bl	114b0 <memcpy@plt>
   1991c:	mov	r0, r6
   19920:	pop	{r4, r5, r6, sl, fp, pc}
   19924:	bl	199ec <__assert_fail@plt+0x81e8>
   19928:	push	{r4, r5, r6, sl, fp, lr}
   1992c:	add	fp, sp, #16
   19930:	mov	r5, r0
   19934:	mov	r0, r1
   19938:	mov	r4, r1
   1993c:	bl	1a650 <__assert_fail@plt+0x8e4c>
   19940:	cmp	r0, #0
   19944:	beq	19960 <__assert_fail@plt+0x815c>
   19948:	mov	r1, r5
   1994c:	mov	r2, r4
   19950:	mov	r6, r0
   19954:	bl	114b0 <memcpy@plt>
   19958:	mov	r0, r6
   1995c:	pop	{r4, r5, r6, sl, fp, pc}
   19960:	bl	199ec <__assert_fail@plt+0x81e8>
   19964:	push	{r4, r5, r6, sl, fp, lr}
   19968:	add	fp, sp, #16
   1996c:	mov	r5, r0
   19970:	add	r0, r1, #1
   19974:	mov	r4, r1
   19978:	bl	1a650 <__assert_fail@plt+0x8e4c>
   1997c:	cmp	r0, #0
   19980:	beq	199a8 <__assert_fail@plt+0x81a4>
   19984:	mov	r6, r0
   19988:	mov	r0, #0
   1998c:	mov	r1, r5
   19990:	mov	r2, r4
   19994:	strb	r0, [r6, r4]
   19998:	mov	r0, r6
   1999c:	bl	114b0 <memcpy@plt>
   199a0:	mov	r0, r6
   199a4:	pop	{r4, r5, r6, sl, fp, pc}
   199a8:	bl	199ec <__assert_fail@plt+0x81e8>
   199ac:	push	{r4, r5, r6, sl, fp, lr}
   199b0:	add	fp, sp, #16
   199b4:	mov	r4, r0
   199b8:	bl	11654 <strlen@plt>
   199bc:	add	r5, r0, #1
   199c0:	mov	r0, r5
   199c4:	bl	1a650 <__assert_fail@plt+0x8e4c>
   199c8:	cmp	r0, #0
   199cc:	beq	199e8 <__assert_fail@plt+0x81e4>
   199d0:	mov	r1, r4
   199d4:	mov	r2, r5
   199d8:	mov	r6, r0
   199dc:	bl	114b0 <memcpy@plt>
   199e0:	mov	r0, r6
   199e4:	pop	{r4, r5, r6, sl, fp, pc}
   199e8:	bl	199ec <__assert_fail@plt+0x81e8>
   199ec:	push	{fp, lr}
   199f0:	mov	fp, sp
   199f4:	movw	r0, #57712	; 0xe170
   199f8:	movw	r1, #53142	; 0xcf96
   199fc:	mov	r2, #5
   19a00:	movt	r0, #2
   19a04:	movt	r1, #1
   19a08:	ldr	r4, [r0]
   19a0c:	mov	r0, #0
   19a10:	bl	114ec <dcgettext@plt>
   19a14:	movw	r2, #51571	; 0xc973
   19a18:	mov	r3, r0
   19a1c:	mov	r0, r4
   19a20:	mov	r1, #0
   19a24:	movt	r2, #1
   19a28:	bl	115b8 <error@plt>
   19a2c:	bl	117d4 <abort@plt>
   19a30:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19a34:	add	fp, sp, #28
   19a38:	sub	sp, sp, #20
   19a3c:	cmp	r2, #37	; 0x25
   19a40:	bcs	1a28c <__assert_fail@plt+0x8a88>
   19a44:	ldr	r9, [fp, #8]
   19a48:	mov	r5, r2
   19a4c:	mov	r4, r1
   19a50:	mov	r7, r0
   19a54:	str	r3, [sp, #12]
   19a58:	bl	11684 <__errno_location@plt>
   19a5c:	mov	r8, r0
   19a60:	mov	r0, #0
   19a64:	str	r0, [r8]
   19a68:	bl	11624 <__ctype_b_loc@plt>
   19a6c:	ldr	r1, [r0]
   19a70:	mov	r2, r7
   19a74:	ldrb	r0, [r2], #1
   19a78:	add	r3, r1, r0, lsl #1
   19a7c:	ldrb	r3, [r3, #1]
   19a80:	tst	r3, #32
   19a84:	bne	19a74 <__assert_fail@plt+0x8270>
   19a88:	add	r6, sp, #16
   19a8c:	cmp	r4, #0
   19a90:	mov	sl, #4
   19a94:	movne	r6, r4
   19a98:	cmp	r0, #45	; 0x2d
   19a9c:	beq	19c28 <__assert_fail@plt+0x8424>
   19aa0:	mov	r0, r7
   19aa4:	mov	r1, r6
   19aa8:	mov	r2, r5
   19aac:	bl	11648 <strtoul@plt>
   19ab0:	ldr	r5, [r6]
   19ab4:	cmp	r5, r7
   19ab8:	beq	19c18 <__assert_fail@plt+0x8414>
   19abc:	mov	r4, r0
   19ac0:	ldr	r0, [r8]
   19ac4:	cmp	r0, #0
   19ac8:	beq	19c34 <__assert_fail@plt+0x8430>
   19acc:	cmp	r0, #34	; 0x22
   19ad0:	bne	19c28 <__assert_fail@plt+0x8424>
   19ad4:	mov	sl, #1
   19ad8:	cmp	r9, #0
   19adc:	beq	1a278 <__assert_fail@plt+0x8a74>
   19ae0:	ldrb	r7, [r5]
   19ae4:	cmp	r7, #0
   19ae8:	beq	1a278 <__assert_fail@plt+0x8a74>
   19aec:	mov	r0, r9
   19af0:	mov	r1, r7
   19af4:	bl	11660 <strchr@plt>
   19af8:	cmp	r0, #0
   19afc:	beq	19df8 <__assert_fail@plt+0x85f4>
   19b00:	sub	r0, r7, #69	; 0x45
   19b04:	mov	lr, #1
   19b08:	mov	r8, #1024	; 0x400
   19b0c:	cmp	r0, #47	; 0x2f
   19b10:	bhi	19cac <__assert_fail@plt+0x84a8>
   19b14:	add	r1, pc, #0
   19b18:	ldr	pc, [r1, r0, lsl #2]
   19b1c:	ldrdeq	r9, [r1], -ip
   19b20:	andeq	r9, r1, ip, lsr #25
   19b24:	ldrdeq	r9, [r1], -ip
   19b28:	andeq	r9, r1, ip, lsr #25
   19b2c:	andeq	r9, r1, ip, lsr #25
   19b30:	andeq	r9, r1, ip, lsr #25
   19b34:	ldrdeq	r9, [r1], -ip
   19b38:	andeq	r9, r1, ip, lsr #25
   19b3c:	ldrdeq	r9, [r1], -ip
   19b40:	andeq	r9, r1, ip, lsr #25
   19b44:	andeq	r9, r1, ip, lsr #25
   19b48:	ldrdeq	r9, [r1], -ip
   19b4c:	andeq	r9, r1, ip, lsr #25
   19b50:	andeq	r9, r1, ip, lsr #25
   19b54:	andeq	r9, r1, ip, lsr #25
   19b58:	ldrdeq	r9, [r1], -ip
   19b5c:	andeq	r9, r1, ip, lsr #25
   19b60:	andeq	r9, r1, ip, lsr #25
   19b64:	andeq	r9, r1, ip, lsr #25
   19b68:	andeq	r9, r1, ip, lsr #25
   19b6c:	ldrdeq	r9, [r1], -ip
   19b70:	ldrdeq	r9, [r1], -ip
   19b74:	andeq	r9, r1, ip, lsr #25
   19b78:	andeq	r9, r1, ip, lsr #25
   19b7c:	andeq	r9, r1, ip, lsr #25
   19b80:	andeq	r9, r1, ip, lsr #25
   19b84:	andeq	r9, r1, ip, lsr #25
   19b88:	andeq	r9, r1, ip, lsr #25
   19b8c:	andeq	r9, r1, ip, lsr #25
   19b90:	andeq	r9, r1, ip, lsr #25
   19b94:	andeq	r9, r1, ip, lsr #25
   19b98:	andeq	r9, r1, ip, lsr #25
   19b9c:	andeq	r9, r1, ip, lsr #25
   19ba0:	andeq	r9, r1, ip, lsr #25
   19ba4:	ldrdeq	r9, [r1], -ip
   19ba8:	andeq	r9, r1, ip, lsr #25
   19bac:	andeq	r9, r1, ip, lsr #25
   19bb0:	andeq	r9, r1, ip, lsr #25
   19bb4:	ldrdeq	r9, [r1], -ip
   19bb8:	andeq	r9, r1, ip, lsr #25
   19bbc:	ldrdeq	r9, [r1], -ip
   19bc0:	andeq	r9, r1, ip, lsr #25
   19bc4:	andeq	r9, r1, ip, lsr #25
   19bc8:	andeq	r9, r1, ip, lsr #25
   19bcc:	andeq	r9, r1, ip, lsr #25
   19bd0:	andeq	r9, r1, ip, lsr #25
   19bd4:	andeq	r9, r1, ip, lsr #25
   19bd8:	ldrdeq	r9, [r1], -ip
   19bdc:	mov	r0, r9
   19be0:	mov	r1, #48	; 0x30
   19be4:	bl	11660 <strchr@plt>
   19be8:	cmp	r0, #0
   19bec:	beq	19c6c <__assert_fail@plt+0x8468>
   19bf0:	ldrb	r0, [r5, #1]
   19bf4:	cmp	r0, #66	; 0x42
   19bf8:	cmpne	r0, #68	; 0x44
   19bfc:	bne	19c80 <__assert_fail@plt+0x847c>
   19c00:	mov	lr, #2
   19c04:	mov	r8, #1000	; 0x3e8
   19c08:	sub	r1, r7, #66	; 0x42
   19c0c:	cmp	r1, #53	; 0x35
   19c10:	bls	19cb8 <__assert_fail@plt+0x84b4>
   19c14:	b	19df8 <__assert_fail@plt+0x85f4>
   19c18:	cmp	r9, #0
   19c1c:	ldrbne	r1, [r7]
   19c20:	cmpne	r1, #0
   19c24:	bne	19c44 <__assert_fail@plt+0x8440>
   19c28:	mov	r0, sl
   19c2c:	sub	sp, fp, #28
   19c30:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19c34:	mov	sl, r0
   19c38:	cmp	r9, #0
   19c3c:	bne	19ae0 <__assert_fail@plt+0x82dc>
   19c40:	b	1a278 <__assert_fail@plt+0x8a74>
   19c44:	mov	r0, r9
   19c48:	bl	11660 <strchr@plt>
   19c4c:	cmp	r0, #0
   19c50:	beq	19c28 <__assert_fail@plt+0x8424>
   19c54:	mov	r4, #1
   19c58:	mov	sl, #0
   19c5c:	ldrb	r7, [r5]
   19c60:	cmp	r7, #0
   19c64:	bne	19aec <__assert_fail@plt+0x82e8>
   19c68:	b	1a278 <__assert_fail@plt+0x8a74>
   19c6c:	mov	lr, #1
   19c70:	sub	r1, r7, #66	; 0x42
   19c74:	cmp	r1, #53	; 0x35
   19c78:	bls	19cb8 <__assert_fail@plt+0x84b4>
   19c7c:	b	19df8 <__assert_fail@plt+0x85f4>
   19c80:	cmp	r0, #105	; 0x69
   19c84:	bne	19ca8 <__assert_fail@plt+0x84a4>
   19c88:	ldrb	r0, [r5, #2]
   19c8c:	mov	lr, #1
   19c90:	cmp	r0, #66	; 0x42
   19c94:	movweq	lr, #3
   19c98:	sub	r1, r7, #66	; 0x42
   19c9c:	cmp	r1, #53	; 0x35
   19ca0:	bls	19cb8 <__assert_fail@plt+0x84b4>
   19ca4:	b	19df8 <__assert_fail@plt+0x85f4>
   19ca8:	mov	lr, #1
   19cac:	sub	r1, r7, #66	; 0x42
   19cb0:	cmp	r1, #53	; 0x35
   19cb4:	bhi	19df8 <__assert_fail@plt+0x85f4>
   19cb8:	add	r2, pc, #4
   19cbc:	mov	r0, #0
   19cc0:	ldr	pc, [r2, r1, lsl #2]
   19cc4:	andeq	r9, r1, r0, asr #31
   19cc8:	strdeq	r9, [r1], -r8
   19ccc:	strdeq	r9, [r1], -r8
   19cd0:	ldrdeq	r9, [r1], -ip
   19cd4:	strdeq	r9, [r1], -r8
   19cd8:	muleq	r1, ip, sp
   19cdc:	strdeq	r9, [r1], -r8
   19ce0:	strdeq	r9, [r1], -r8
   19ce4:	strdeq	r9, [r1], -r8
   19ce8:	andeq	r9, r1, r0, lsl lr
   19cec:	strdeq	r9, [r1], -r8
   19cf0:	andeq	r9, r1, r0, lsr lr
   19cf4:	strdeq	r9, [r1], -r8
   19cf8:	strdeq	r9, [r1], -r8
   19cfc:	muleq	r1, r4, r0
   19d00:	strdeq	r9, [r1], -r8
   19d04:	strdeq	r9, [r1], -r8
   19d08:	strdeq	r9, [r1], -r8
   19d0c:	andeq	r9, r1, r0, ror lr
   19d10:	strdeq	r9, [r1], -r8
   19d14:	strdeq	r9, [r1], -r8
   19d18:	strdeq	r9, [r1], -r8
   19d1c:	strdeq	r9, [r1], -r8
   19d20:	andeq	sl, r1, r0, lsr r1
   19d24:	andeq	r9, r1, r8, ror #29
   19d28:	strdeq	r9, [r1], -r8
   19d2c:	strdeq	r9, [r1], -r8
   19d30:	strdeq	r9, [r1], -r8
   19d34:	strdeq	r9, [r1], -r8
   19d38:	strdeq	r9, [r1], -r8
   19d3c:	strdeq	r9, [r1], -r8
   19d40:	strdeq	r9, [r1], -r8
   19d44:	andeq	sl, r1, r8, lsr #4
   19d48:	andeq	sl, r1, r0, ror #4
   19d4c:	strdeq	r9, [r1], -r8
   19d50:	strdeq	r9, [r1], -r8
   19d54:	strdeq	r9, [r1], -r8
   19d58:	muleq	r1, ip, sp
   19d5c:	strdeq	r9, [r1], -r8
   19d60:	strdeq	r9, [r1], -r8
   19d64:	strdeq	r9, [r1], -r8
   19d68:	andeq	r9, r1, r0, lsl lr
   19d6c:	strdeq	r9, [r1], -r8
   19d70:	andeq	r9, r1, r0, lsr lr
   19d74:	strdeq	r9, [r1], -r8
   19d78:	strdeq	r9, [r1], -r8
   19d7c:	strdeq	r9, [r1], -r8
   19d80:	strdeq	r9, [r1], -r8
   19d84:	strdeq	r9, [r1], -r8
   19d88:	strdeq	r9, [r1], -r8
   19d8c:	andeq	r9, r1, r0, ror lr
   19d90:	strdeq	r9, [r1], -r8
   19d94:	strdeq	r9, [r1], -r8
   19d98:	andeq	sl, r1, ip, asr #4
   19d9c:	mvn	r0, #0
   19da0:	mul	r1, r4, r8
   19da4:	mov	r7, #0
   19da8:	udiv	r0, r0, r8
   19dac:	cmp	r0, r4
   19db0:	mvncc	r1, #0
   19db4:	mul	r2, r1, r8
   19db8:	cmp	r0, r1
   19dbc:	mvncc	r2, #0
   19dc0:	cmp	r0, r2
   19dc4:	mul	r3, r2, r8
   19dc8:	mov	r2, #0
   19dcc:	mvncc	r3, #0
   19dd0:	movwcc	r7, #1
   19dd4:	cmp	r0, r1
   19dd8:	mov	r1, #0
   19ddc:	movwcc	r1, #1
   19de0:	cmp	r0, r4
   19de4:	mov	r4, r3
   19de8:	movwcc	r2, #1
   19dec:	orr	r0, r2, r1
   19df0:	orr	r0, r0, r7
   19df4:	b	1a260 <__assert_fail@plt+0x8a5c>
   19df8:	ldr	r0, [sp, #12]
   19dfc:	orr	sl, sl, #2
   19e00:	str	r4, [r0]
   19e04:	mov	r0, sl
   19e08:	sub	sp, fp, #28
   19e0c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19e10:	mvn	r0, #0
   19e14:	mul	r1, r4, r8
   19e18:	udiv	r0, r0, r8
   19e1c:	cmp	r0, r4
   19e20:	mov	r0, #0
   19e24:	mvncc	r1, #0
   19e28:	movwcc	r0, #1
   19e2c:	b	1a25c <__assert_fail@plt+0x8a58>
   19e30:	mvn	r0, #0
   19e34:	mul	r1, r4, r8
   19e38:	mov	r3, #0
   19e3c:	udiv	r0, r0, r8
   19e40:	cmp	r0, r4
   19e44:	mvncc	r1, #0
   19e48:	cmp	r0, r1
   19e4c:	mul	r2, r1, r8
   19e50:	mov	r1, #0
   19e54:	mvncc	r2, #0
   19e58:	movwcc	r3, #1
   19e5c:	cmp	r0, r4
   19e60:	movwcc	r1, #1
   19e64:	mov	r4, r2
   19e68:	orr	r0, r1, r3
   19e6c:	b	1a260 <__assert_fail@plt+0x8a5c>
   19e70:	mvn	r0, #0
   19e74:	mul	r1, r4, r8
   19e78:	mov	r7, #0
   19e7c:	udiv	r0, r0, r8
   19e80:	cmp	r0, r4
   19e84:	mvncc	r1, #0
   19e88:	mul	r2, r1, r8
   19e8c:	cmp	r0, r1
   19e90:	mvncc	r2, #0
   19e94:	mul	r3, r2, r8
   19e98:	cmp	r0, r2
   19e9c:	mvncc	r3, #0
   19ea0:	cmp	r0, r3
   19ea4:	mul	ip, r3, r8
   19ea8:	mov	r3, #0
   19eac:	mvncc	ip, #0
   19eb0:	movwcc	r7, #1
   19eb4:	cmp	r0, r2
   19eb8:	mov	r2, #0
   19ebc:	movwcc	r2, #1
   19ec0:	cmp	r0, r1
   19ec4:	mov	r1, #0
   19ec8:	movwcc	r1, #1
   19ecc:	cmp	r0, r4
   19ed0:	mov	r4, ip
   19ed4:	movwcc	r3, #1
   19ed8:	orr	r0, r3, r1
   19edc:	orr	r0, r0, r2
   19ee0:	orr	r0, r0, r7
   19ee4:	b	1a260 <__assert_fail@plt+0x8a5c>
   19ee8:	mvn	r0, #0
   19eec:	str	lr, [sp, #8]
   19ef0:	mul	lr, r4, r8
   19ef4:	udiv	r0, r0, r8
   19ef8:	cmp	r0, r4
   19efc:	mvncc	lr, #0
   19f00:	mul	r9, lr, r8
   19f04:	cmp	r0, lr
   19f08:	mvncc	r9, #0
   19f0c:	mul	r7, r9, r8
   19f10:	cmp	r0, r9
   19f14:	mvncc	r7, #0
   19f18:	mul	r3, r7, r8
   19f1c:	cmp	r0, r7
   19f20:	mvncc	r3, #0
   19f24:	mul	r1, r3, r8
   19f28:	cmp	r0, r3
   19f2c:	mvncc	r1, #0
   19f30:	mul	r2, r1, r8
   19f34:	cmp	r0, r1
   19f38:	mvncc	r2, #0
   19f3c:	mul	ip, r2, r8
   19f40:	cmp	r0, r2
   19f44:	mov	r8, #0
   19f48:	mov	r2, #0
   19f4c:	mvncc	ip, #0
   19f50:	movwcc	r8, #1
   19f54:	cmp	r0, r1
   19f58:	mov	r1, #0
   19f5c:	movwcc	r1, #1
   19f60:	cmp	r0, r3
   19f64:	mov	r3, #0
   19f68:	movwcc	r3, #1
   19f6c:	cmp	r0, r7
   19f70:	mov	r7, #0
   19f74:	movwcc	r7, #1
   19f78:	cmp	r0, r9
   19f7c:	mov	r9, #0
   19f80:	movwcc	r9, #1
   19f84:	cmp	r0, lr
   19f88:	mov	lr, #0
   19f8c:	movwcc	lr, #1
   19f90:	cmp	r0, r4
   19f94:	mov	r4, ip
   19f98:	movwcc	r2, #1
   19f9c:	orr	r0, r2, lr
   19fa0:	ldr	lr, [sp, #8]
   19fa4:	orr	r0, r0, r9
   19fa8:	orr	r0, r0, r7
   19fac:	orr	r0, r0, r3
   19fb0:	orr	r0, r0, r1
   19fb4:	orr	r0, r0, r8
   19fb8:	and	r0, r0, #1
   19fbc:	b	1a260 <__assert_fail@plt+0x8a5c>
   19fc0:	mov	r1, #0
   19fc4:	lsr	r0, r4, #22
   19fc8:	cmp	r1, r4, lsr #22
   19fcc:	lsl	r4, r4, #10
   19fd0:	movwne	r0, #1
   19fd4:	mvnne	r4, #0
   19fd8:	b	1a260 <__assert_fail@plt+0x8a5c>
   19fdc:	mvn	r0, #0
   19fe0:	mul	ip, r4, r8
   19fe4:	str	lr, [sp, #8]
   19fe8:	mov	r9, #0
   19fec:	udiv	r0, r0, r8
   19ff0:	cmp	r0, r4
   19ff4:	mvncc	ip, #0
   19ff8:	mul	r2, ip, r8
   19ffc:	cmp	r0, ip
   1a000:	mvncc	r2, #0
   1a004:	mul	r3, r2, r8
   1a008:	cmp	r0, r2
   1a00c:	mvncc	r3, #0
   1a010:	mul	r7, r3, r8
   1a014:	cmp	r0, r3
   1a018:	mvncc	r7, #0
   1a01c:	mul	r1, r7, r8
   1a020:	cmp	r0, r7
   1a024:	mvncc	r1, #0
   1a028:	mul	lr, r1, r8
   1a02c:	cmp	r0, r1
   1a030:	mov	r8, #0
   1a034:	mov	r1, #0
   1a038:	mvncc	lr, #0
   1a03c:	movwcc	r8, #1
   1a040:	cmp	r0, r7
   1a044:	mov	r7, #0
   1a048:	movwcc	r7, #1
   1a04c:	cmp	r0, r3
   1a050:	mov	r3, #0
   1a054:	movwcc	r3, #1
   1a058:	cmp	r0, r2
   1a05c:	mov	r2, #0
   1a060:	movwcc	r2, #1
   1a064:	cmp	r0, ip
   1a068:	movwcc	r1, #1
   1a06c:	cmp	r0, r4
   1a070:	mov	r4, lr
   1a074:	ldr	lr, [sp, #8]
   1a078:	movwcc	r9, #1
   1a07c:	orr	r0, r9, r1
   1a080:	orr	r0, r0, r2
   1a084:	orr	r0, r0, r3
   1a088:	orr	r0, r0, r7
   1a08c:	orr	r0, r0, r8
   1a090:	b	1a260 <__assert_fail@plt+0x8a5c>
   1a094:	mvn	r0, #0
   1a098:	mul	r1, r4, r8
   1a09c:	udiv	r0, r0, r8
   1a0a0:	cmp	r0, r4
   1a0a4:	mvncc	r1, #0
   1a0a8:	mul	r2, r1, r8
   1a0ac:	cmp	r0, r1
   1a0b0:	mvncc	r2, #0
   1a0b4:	mul	r3, r2, r8
   1a0b8:	cmp	r0, r2
   1a0bc:	mvncc	r3, #0
   1a0c0:	mul	r7, r3, r8
   1a0c4:	cmp	r0, r3
   1a0c8:	mvncc	r7, #0
   1a0cc:	mul	ip, r7, r8
   1a0d0:	cmp	r0, r7
   1a0d4:	mov	r8, lr
   1a0d8:	mov	lr, #0
   1a0dc:	mov	r7, #0
   1a0e0:	mvncc	ip, #0
   1a0e4:	movwcc	lr, #1
   1a0e8:	cmp	r0, r3
   1a0ec:	mov	r3, #0
   1a0f0:	movwcc	r3, #1
   1a0f4:	cmp	r0, r2
   1a0f8:	mov	r2, #0
   1a0fc:	movwcc	r2, #1
   1a100:	cmp	r0, r1
   1a104:	mov	r1, #0
   1a108:	movwcc	r1, #1
   1a10c:	cmp	r0, r4
   1a110:	mov	r4, ip
   1a114:	movwcc	r7, #1
   1a118:	orr	r0, r7, r1
   1a11c:	orr	r0, r0, r2
   1a120:	orr	r0, r0, r3
   1a124:	orr	r0, r0, lr
   1a128:	mov	lr, r8
   1a12c:	b	1a260 <__assert_fail@plt+0x8a5c>
   1a130:	mvn	r0, #0
   1a134:	str	lr, [sp, #8]
   1a138:	mul	lr, r4, r8
   1a13c:	udiv	r0, r0, r8
   1a140:	cmp	r0, r4
   1a144:	mvncc	lr, #0
   1a148:	mul	r9, lr, r8
   1a14c:	cmp	r0, lr
   1a150:	mvncc	r9, #0
   1a154:	mul	r7, r9, r8
   1a158:	cmp	r0, r9
   1a15c:	mvncc	r7, #0
   1a160:	mul	r3, r7, r8
   1a164:	cmp	r0, r7
   1a168:	mvncc	r3, #0
   1a16c:	mul	r1, r3, r8
   1a170:	cmp	r0, r3
   1a174:	mvncc	r1, #0
   1a178:	mul	r2, r1, r8
   1a17c:	cmp	r0, r1
   1a180:	mvncc	r2, #0
   1a184:	mul	ip, r2, r8
   1a188:	cmp	r0, r2
   1a18c:	mvncc	ip, #0
   1a190:	mul	r8, ip, r8
   1a194:	cmp	r0, ip
   1a198:	mov	ip, #0
   1a19c:	mvncc	r8, #0
   1a1a0:	str	r8, [sp, #4]
   1a1a4:	mov	r8, #0
   1a1a8:	movwcc	r8, #1
   1a1ac:	cmp	r0, r2
   1a1b0:	mov	r2, #0
   1a1b4:	movwcc	r2, #1
   1a1b8:	cmp	r0, r1
   1a1bc:	mov	r1, #0
   1a1c0:	movwcc	r1, #1
   1a1c4:	cmp	r0, r3
   1a1c8:	mov	r3, #0
   1a1cc:	movwcc	r3, #1
   1a1d0:	cmp	r0, r7
   1a1d4:	mov	r7, #0
   1a1d8:	movwcc	r7, #1
   1a1dc:	cmp	r0, r9
   1a1e0:	mov	r9, #0
   1a1e4:	movwcc	r9, #1
   1a1e8:	cmp	r0, lr
   1a1ec:	mov	lr, #0
   1a1f0:	movwcc	lr, #1
   1a1f4:	cmp	r0, r4
   1a1f8:	ldr	r4, [sp, #4]
   1a1fc:	movwcc	ip, #1
   1a200:	orr	r0, ip, lr
   1a204:	ldr	lr, [sp, #8]
   1a208:	orr	r0, r0, r9
   1a20c:	orr	r0, r0, r7
   1a210:	orr	r0, r0, r3
   1a214:	orr	r0, r0, r1
   1a218:	orr	r0, r0, r2
   1a21c:	orr	r0, r0, r8
   1a220:	and	r0, r0, #1
   1a224:	b	1a260 <__assert_fail@plt+0x8a5c>
   1a228:	movw	r0, #65535	; 0xffff
   1a22c:	movt	r0, #63	; 0x3f
   1a230:	add	r1, r0, #4194304	; 0x400000
   1a234:	mov	r0, #0
   1a238:	cmp	r4, r1
   1a23c:	lsl	r4, r4, #9
   1a240:	movwhi	r0, #1
   1a244:	mvnhi	r4, #0
   1a248:	b	1a260 <__assert_fail@plt+0x8a5c>
   1a24c:	lsl	r1, r4, #1
   1a250:	cmp	r4, #0
   1a254:	lsr	r0, r4, #31
   1a258:	mvnlt	r1, #0
   1a25c:	mov	r4, r1
   1a260:	add	r1, r5, lr
   1a264:	orr	sl, r0, sl
   1a268:	str	r1, [r6]
   1a26c:	ldrb	r1, [r5, lr]
   1a270:	cmp	r1, #0
   1a274:	orrne	sl, sl, #2
   1a278:	ldr	r0, [sp, #12]
   1a27c:	str	r4, [r0]
   1a280:	mov	r0, sl
   1a284:	sub	sp, fp, #28
   1a288:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a28c:	movw	r0, #53159	; 0xcfa7
   1a290:	movw	r1, #53197	; 0xcfcd
   1a294:	movw	r3, #53209	; 0xcfd9
   1a298:	mov	r2, #84	; 0x54
   1a29c:	movt	r0, #1
   1a2a0:	movt	r1, #1
   1a2a4:	movt	r3, #1
   1a2a8:	bl	11804 <__assert_fail@plt>
   1a2ac:	clz	r2, r1
   1a2b0:	clz	r3, r0
   1a2b4:	lsr	r2, r2, #5
   1a2b8:	lsr	r3, r3, #5
   1a2bc:	orrs	r2, r3, r2
   1a2c0:	movwne	r1, #1
   1a2c4:	movwne	r0, #1
   1a2c8:	cmp	r1, #0
   1a2cc:	beq	1a2fc <__assert_fail@plt+0x8af8>
   1a2d0:	mvn	r2, #-2147483648	; 0x80000000
   1a2d4:	udiv	r2, r2, r1
   1a2d8:	cmp	r2, r0
   1a2dc:	bcs	1a2fc <__assert_fail@plt+0x8af8>
   1a2e0:	push	{fp, lr}
   1a2e4:	mov	fp, sp
   1a2e8:	bl	11684 <__errno_location@plt>
   1a2ec:	mov	r1, #12
   1a2f0:	str	r1, [r0]
   1a2f4:	mov	r0, #0
   1a2f8:	pop	{fp, pc}
   1a2fc:	b	11438 <calloc@plt>
   1a300:	sub	sp, sp, #8
   1a304:	push	{r4, r5, r6, r7, fp, lr}
   1a308:	add	fp, sp, #16
   1a30c:	sub	sp, sp, #8
   1a310:	mov	r5, r0
   1a314:	add	r0, fp, #8
   1a318:	cmp	r1, #11
   1a31c:	str	r3, [fp, #12]
   1a320:	str	r2, [fp, #8]
   1a324:	str	r0, [sp, #4]
   1a328:	bhi	1a364 <__assert_fail@plt+0x8b60>
   1a32c:	mov	r0, #1
   1a330:	movw	r2, #1300	; 0x514
   1a334:	tst	r2, r0, lsl r1
   1a338:	bne	1a424 <__assert_fail@plt+0x8c20>
   1a33c:	movw	r2, #2570	; 0xa0a
   1a340:	tst	r2, r0, lsl r1
   1a344:	bne	1a38c <__assert_fail@plt+0x8b88>
   1a348:	cmp	r1, #0
   1a34c:	bne	1a364 <__assert_fail@plt+0x8b60>
   1a350:	ldr	r0, [sp, #4]
   1a354:	add	r1, r0, #4
   1a358:	str	r1, [sp, #4]
   1a35c:	mov	r1, #0
   1a360:	b	1a430 <__assert_fail@plt+0x8c2c>
   1a364:	sub	r0, r1, #1024	; 0x400
   1a368:	cmp	r0, #10
   1a36c:	bhi	1a424 <__assert_fail@plt+0x8c20>
   1a370:	mov	r2, #1
   1a374:	movw	r3, #645	; 0x285
   1a378:	tst	r3, r2, lsl r0
   1a37c:	bne	1a424 <__assert_fail@plt+0x8c20>
   1a380:	movw	r3, #1282	; 0x502
   1a384:	tst	r3, r2, lsl r0
   1a388:	beq	1a398 <__assert_fail@plt+0x8b94>
   1a38c:	mov	r0, r5
   1a390:	bl	11714 <fcntl64@plt>
   1a394:	b	1a43c <__assert_fail@plt+0x8c38>
   1a398:	cmp	r0, #6
   1a39c:	bne	1a424 <__assert_fail@plt+0x8c20>
   1a3a0:	ldr	r0, [sp, #4]
   1a3a4:	movw	r7, #58320	; 0xe3d0
   1a3a8:	movt	r7, #2
   1a3ac:	add	r1, r0, #4
   1a3b0:	str	r1, [sp, #4]
   1a3b4:	ldr	r6, [r0]
   1a3b8:	ldr	r0, [r7]
   1a3bc:	cmp	r0, #0
   1a3c0:	blt	1a460 <__assert_fail@plt+0x8c5c>
   1a3c4:	mov	r0, r5
   1a3c8:	movw	r1, #1030	; 0x406
   1a3cc:	mov	r2, r6
   1a3d0:	bl	11714 <fcntl64@plt>
   1a3d4:	mov	r4, r0
   1a3d8:	cmn	r0, #1
   1a3dc:	bgt	1a454 <__assert_fail@plt+0x8c50>
   1a3e0:	bl	11684 <__errno_location@plt>
   1a3e4:	ldr	r0, [r0]
   1a3e8:	cmp	r0, #22
   1a3ec:	bne	1a454 <__assert_fail@plt+0x8c50>
   1a3f0:	mov	r0, r5
   1a3f4:	mov	r1, #0
   1a3f8:	mov	r2, r6
   1a3fc:	bl	11714 <fcntl64@plt>
   1a400:	mov	r4, r0
   1a404:	cmp	r0, #0
   1a408:	blt	1a440 <__assert_fail@plt+0x8c3c>
   1a40c:	mvn	r0, #0
   1a410:	str	r0, [r7]
   1a414:	mov	r0, #1
   1a418:	cmp	r0, #0
   1a41c:	bne	1a48c <__assert_fail@plt+0x8c88>
   1a420:	b	1a440 <__assert_fail@plt+0x8c3c>
   1a424:	ldr	r0, [sp, #4]
   1a428:	add	r2, r0, #4
   1a42c:	str	r2, [sp, #4]
   1a430:	ldr	r2, [r0]
   1a434:	mov	r0, r5
   1a438:	bl	11714 <fcntl64@plt>
   1a43c:	mov	r4, r0
   1a440:	mov	r0, r4
   1a444:	sub	sp, fp, #16
   1a448:	pop	{r4, r5, r6, r7, fp, lr}
   1a44c:	add	sp, sp, #8
   1a450:	bx	lr
   1a454:	mov	r0, #1
   1a458:	str	r0, [r7]
   1a45c:	b	1a440 <__assert_fail@plt+0x8c3c>
   1a460:	mov	r0, r5
   1a464:	mov	r1, #0
   1a468:	mov	r2, r6
   1a46c:	bl	11714 <fcntl64@plt>
   1a470:	mov	r4, r0
   1a474:	ldr	r0, [r7]
   1a478:	add	r0, r0, #1
   1a47c:	clz	r0, r0
   1a480:	lsr	r0, r0, #5
   1a484:	cmp	r0, #0
   1a488:	beq	1a440 <__assert_fail@plt+0x8c3c>
   1a48c:	cmp	r4, #0
   1a490:	blt	1a440 <__assert_fail@plt+0x8c3c>
   1a494:	mov	r0, r4
   1a498:	mov	r1, #1
   1a49c:	bl	11714 <fcntl64@plt>
   1a4a0:	cmp	r0, #0
   1a4a4:	blt	1a4c0 <__assert_fail@plt+0x8cbc>
   1a4a8:	orr	r2, r0, #1
   1a4ac:	mov	r0, r4
   1a4b0:	mov	r1, #2
   1a4b4:	bl	11714 <fcntl64@plt>
   1a4b8:	cmn	r0, #1
   1a4bc:	bne	1a440 <__assert_fail@plt+0x8c3c>
   1a4c0:	bl	11684 <__errno_location@plt>
   1a4c4:	ldr	r6, [r0]
   1a4c8:	mov	r5, r0
   1a4cc:	mov	r0, r4
   1a4d0:	bl	117ec <close@plt>
   1a4d4:	str	r6, [r5]
   1a4d8:	mvn	r4, #0
   1a4dc:	b	1a440 <__assert_fail@plt+0x8c3c>
   1a4e0:	push	{r4, sl, fp, lr}
   1a4e4:	add	fp, sp, #8
   1a4e8:	sub	sp, sp, #8
   1a4ec:	mov	r4, r0
   1a4f0:	cmp	r0, #0
   1a4f4:	beq	1a510 <__assert_fail@plt+0x8d0c>
   1a4f8:	mov	r0, r4
   1a4fc:	bl	11600 <__freading@plt>
   1a500:	cmp	r0, #0
   1a504:	ldrbne	r0, [r4, #1]
   1a508:	tstne	r0, #1
   1a50c:	bne	1a520 <__assert_fail@plt+0x8d1c>
   1a510:	mov	r0, r4
   1a514:	sub	sp, fp, #8
   1a518:	pop	{r4, sl, fp, lr}
   1a51c:	b	11474 <fflush@plt>
   1a520:	mov	r0, #1
   1a524:	mov	r2, #0
   1a528:	mov	r3, #0
   1a52c:	str	r0, [sp]
   1a530:	mov	r0, r4
   1a534:	bl	1a5ac <__assert_fail@plt+0x8da8>
   1a538:	mov	r0, r4
   1a53c:	sub	sp, fp, #8
   1a540:	pop	{r4, sl, fp, lr}
   1a544:	b	11474 <fflush@plt>
   1a548:	ldrd	r2, [r0, #16]
   1a54c:	mov	r1, #0
   1a550:	cmp	r3, r2
   1a554:	bhi	1a57c <__assert_fail@plt+0x8d78>
   1a558:	ldmib	r0, {r1, r2}
   1a55c:	ldrb	r3, [r0, #1]
   1a560:	sub	r1, r2, r1
   1a564:	mov	r2, #0
   1a568:	tst	r3, #1
   1a56c:	ldrne	r2, [r0, #36]	; 0x24
   1a570:	ldrne	r0, [r0, #44]	; 0x2c
   1a574:	subne	r2, r0, r2
   1a578:	add	r1, r1, r2
   1a57c:	mov	r0, r1
   1a580:	bx	lr
   1a584:	push	{r4, r5, r6, sl, fp, lr}
   1a588:	add	fp, sp, #16
   1a58c:	mov	r4, r0
   1a590:	bl	11684 <__errno_location@plt>
   1a594:	ldr	r6, [r0]
   1a598:	mov	r5, r0
   1a59c:	mov	r0, r4
   1a5a0:	bl	1148c <free@plt>
   1a5a4:	str	r6, [r5]
   1a5a8:	pop	{r4, r5, r6, sl, fp, pc}
   1a5ac:	push	{r4, r5, r6, r7, fp, lr}
   1a5b0:	add	fp, sp, #16
   1a5b4:	sub	sp, sp, #8
   1a5b8:	mov	r4, r0
   1a5bc:	ldr	r0, [r0, #4]
   1a5c0:	mov	r5, r3
   1a5c4:	mov	r6, r2
   1a5c8:	ldr	r1, [r4, #8]
   1a5cc:	cmp	r1, r0
   1a5d0:	bne	1a5ec <__assert_fail@plt+0x8de8>
   1a5d4:	ldrd	r0, [r4, #16]
   1a5d8:	cmp	r1, r0
   1a5dc:	bne	1a5ec <__assert_fail@plt+0x8de8>
   1a5e0:	ldr	r0, [r4, #36]	; 0x24
   1a5e4:	cmp	r0, #0
   1a5e8:	beq	1a604 <__assert_fail@plt+0x8e00>
   1a5ec:	mov	r0, r4
   1a5f0:	mov	r2, r6
   1a5f4:	mov	r3, r5
   1a5f8:	sub	sp, fp, #16
   1a5fc:	pop	{r4, r5, r6, r7, fp, lr}
   1a600:	b	11708 <fseeko64@plt>
   1a604:	ldr	r7, [fp, #8]
   1a608:	mov	r0, r4
   1a60c:	bl	116cc <fileno@plt>
   1a610:	mov	r2, r6
   1a614:	mov	r3, r5
   1a618:	str	r7, [sp]
   1a61c:	bl	11570 <lseek64@plt>
   1a620:	and	r2, r0, r1
   1a624:	cmn	r2, #1
   1a628:	mvneq	r0, #0
   1a62c:	subeq	sp, fp, #16
   1a630:	popeq	{r4, r5, r6, r7, fp, pc}
   1a634:	strd	r0, [r4, #80]	; 0x50
   1a638:	ldr	r0, [r4]
   1a63c:	bic	r0, r0, #16
   1a640:	str	r0, [r4]
   1a644:	mov	r0, #0
   1a648:	sub	sp, fp, #16
   1a64c:	pop	{r4, r5, r6, r7, fp, pc}
   1a650:	cmp	r0, #0
   1a654:	movweq	r0, #1
   1a658:	cmn	r0, #1
   1a65c:	ble	1a664 <__assert_fail@plt+0x8e60>
   1a660:	b	115e8 <malloc@plt>
   1a664:	push	{fp, lr}
   1a668:	mov	fp, sp
   1a66c:	bl	11684 <__errno_location@plt>
   1a670:	mov	r1, #12
   1a674:	str	r1, [r0]
   1a678:	mov	r0, #0
   1a67c:	pop	{fp, pc}
   1a680:	push	{r4, r5, r6, r7, fp, lr}
   1a684:	add	fp, sp, #16
   1a688:	sub	sp, sp, #8
   1a68c:	add	r5, sp, #4
   1a690:	cmp	r0, #0
   1a694:	mov	r7, r2
   1a698:	mov	r4, r1
   1a69c:	movne	r5, r0
   1a6a0:	mov	r0, r5
   1a6a4:	bl	115ac <mbrtowc@plt>
   1a6a8:	mov	r6, r0
   1a6ac:	cmp	r7, #0
   1a6b0:	beq	1a6d4 <__assert_fail@plt+0x8ed0>
   1a6b4:	cmn	r6, #2
   1a6b8:	bcc	1a6d4 <__assert_fail@plt+0x8ed0>
   1a6bc:	mov	r0, #0
   1a6c0:	bl	1a7f8 <__assert_fail@plt+0x8ff4>
   1a6c4:	cmp	r0, #0
   1a6c8:	ldrbeq	r0, [r4]
   1a6cc:	moveq	r6, #1
   1a6d0:	streq	r0, [r5]
   1a6d4:	mov	r0, r6
   1a6d8:	sub	sp, fp, #16
   1a6dc:	pop	{r4, r5, r6, r7, fp, pc}
   1a6e0:	push	{fp, lr}
   1a6e4:	mov	fp, sp
   1a6e8:	cmp	r0, #0
   1a6ec:	beq	1a708 <__assert_fail@plt+0x8f04>
   1a6f0:	cmp	r1, #0
   1a6f4:	beq	1a714 <__assert_fail@plt+0x8f10>
   1a6f8:	cmn	r1, #1
   1a6fc:	ble	1a720 <__assert_fail@plt+0x8f1c>
   1a700:	pop	{fp, lr}
   1a704:	b	1151c <realloc@plt>
   1a708:	mov	r0, r1
   1a70c:	pop	{fp, lr}
   1a710:	b	1a650 <__assert_fail@plt+0x8e4c>
   1a714:	bl	1a584 <__assert_fail@plt+0x8d80>
   1a718:	mov	r0, #0
   1a71c:	pop	{fp, pc}
   1a720:	bl	11684 <__errno_location@plt>
   1a724:	mov	r1, #12
   1a728:	str	r1, [r0]
   1a72c:	mov	r0, #0
   1a730:	pop	{fp, pc}
   1a734:	cmp	r2, #0
   1a738:	beq	1a768 <__assert_fail@plt+0x8f64>
   1a73c:	mvn	r3, #0
   1a740:	udiv	r3, r3, r2
   1a744:	cmp	r3, r1
   1a748:	bcs	1a768 <__assert_fail@plt+0x8f64>
   1a74c:	push	{fp, lr}
   1a750:	mov	fp, sp
   1a754:	bl	11684 <__errno_location@plt>
   1a758:	mov	r1, #12
   1a75c:	str	r1, [r0]
   1a760:	mov	r0, #0
   1a764:	pop	{fp, pc}
   1a768:	mul	r1, r2, r1
   1a76c:	b	1a6e0 <__assert_fail@plt+0x8edc>
   1a770:	push	{r4, r5, r6, sl, fp, lr}
   1a774:	add	fp, sp, #16
   1a778:	mov	r4, r0
   1a77c:	bl	115a0 <__fpending@plt>
   1a780:	mov	r5, r0
   1a784:	mov	r0, r4
   1a788:	bl	11498 <ferror@plt>
   1a78c:	mov	r6, r0
   1a790:	mov	r0, r4
   1a794:	bl	116e4 <fclose@plt>
   1a798:	cmp	r6, #0
   1a79c:	beq	1a7bc <__assert_fail@plt+0x8fb8>
   1a7a0:	mvn	r4, #0
   1a7a4:	cmp	r0, #0
   1a7a8:	bne	1a7f0 <__assert_fail@plt+0x8fec>
   1a7ac:	bl	11684 <__errno_location@plt>
   1a7b0:	mov	r1, #0
   1a7b4:	str	r1, [r0]
   1a7b8:	b	1a7f0 <__assert_fail@plt+0x8fec>
   1a7bc:	cmp	r0, #0
   1a7c0:	mov	r4, r0
   1a7c4:	mvnne	r4, #0
   1a7c8:	cmp	r5, #0
   1a7cc:	bne	1a7f0 <__assert_fail@plt+0x8fec>
   1a7d0:	cmp	r0, #0
   1a7d4:	beq	1a7f0 <__assert_fail@plt+0x8fec>
   1a7d8:	bl	11684 <__errno_location@plt>
   1a7dc:	ldr	r0, [r0]
   1a7e0:	subs	r4, r0, #9
   1a7e4:	mvnne	r4, #0
   1a7e8:	mov	r0, r4
   1a7ec:	pop	{r4, r5, r6, sl, fp, pc}
   1a7f0:	mov	r0, r4
   1a7f4:	pop	{r4, r5, r6, sl, fp, pc}
   1a7f8:	push	{r4, sl, fp, lr}
   1a7fc:	add	fp, sp, #8
   1a800:	sub	sp, sp, #264	; 0x108
   1a804:	add	r1, sp, #7
   1a808:	movw	r2, #257	; 0x101
   1a80c:	bl	1aa90 <__assert_fail@plt+0x928c>
   1a810:	mov	r4, #0
   1a814:	cmp	r0, #0
   1a818:	bne	1a850 <__assert_fail@plt+0x904c>
   1a81c:	movw	r1, #53290	; 0xd02a
   1a820:	add	r0, sp, #7
   1a824:	movt	r1, #1
   1a828:	bl	11444 <strcmp@plt>
   1a82c:	cmp	r0, #0
   1a830:	beq	1a850 <__assert_fail@plt+0x904c>
   1a834:	movw	r1, #53292	; 0xd02c
   1a838:	add	r0, sp, #7
   1a83c:	movt	r1, #1
   1a840:	bl	11444 <strcmp@plt>
   1a844:	mov	r4, r0
   1a848:	cmp	r0, #0
   1a84c:	movwne	r4, #1
   1a850:	mov	r0, r4
   1a854:	sub	sp, fp, #8
   1a858:	pop	{r4, sl, fp, pc}
   1a85c:	push	{fp, lr}
   1a860:	mov	fp, sp
   1a864:	mov	r0, #14
   1a868:	bl	11750 <nl_langinfo@plt>
   1a86c:	movw	r1, #47291	; 0xb8bb
   1a870:	cmp	r0, #0
   1a874:	movt	r1, #1
   1a878:	movne	r1, r0
   1a87c:	movw	r0, #53298	; 0xd032
   1a880:	ldrb	r2, [r1]
   1a884:	movt	r0, #1
   1a888:	cmp	r2, #0
   1a88c:	movne	r0, r1
   1a890:	pop	{fp, pc}
   1a894:	push	{r4, sl, fp, lr}
   1a898:	add	fp, sp, #8
   1a89c:	mov	r4, #0
   1a8a0:	adds	r0, r0, #16
   1a8a4:	adc	r1, r4, #0
   1a8a8:	rsb	r2, r1, #0
   1a8ac:	eors	r2, r2, r1
   1a8b0:	movwne	r2, #1
   1a8b4:	cmp	r0, #0
   1a8b8:	blt	1a8d8 <__assert_fail@plt+0x90d4>
   1a8bc:	cmp	r2, #0
   1a8c0:	asreq	r2, r0, #31
   1a8c4:	eoreq	r3, r0, r0
   1a8c8:	andeq	r2, r2, #1
   1a8cc:	eoreq	r1, r1, r2
   1a8d0:	orrseq	r1, r3, r1
   1a8d4:	beq	1a8e0 <__assert_fail@plt+0x90dc>
   1a8d8:	mov	r0, r4
   1a8dc:	pop	{r4, sl, fp, pc}
   1a8e0:	bl	115e8 <malloc@plt>
   1a8e4:	cmp	r0, #0
   1a8e8:	addne	r4, r0, #8
   1a8ec:	movne	r1, #8
   1a8f0:	bfine	r4, r1, #0, #4
   1a8f4:	subne	r0, r4, r0
   1a8f8:	strbne	r0, [r4, #-1]
   1a8fc:	mov	r0, r4
   1a900:	pop	{r4, sl, fp, pc}
   1a904:	tst	r0, #7
   1a908:	bne	1a920 <__assert_fail@plt+0x911c>
   1a90c:	tst	r0, #8
   1a910:	bxeq	lr
   1a914:	ldrb	r1, [r0, #-1]
   1a918:	sub	r0, r0, r1
   1a91c:	b	1a584 <__assert_fail@plt+0x8d80>
   1a920:	push	{fp, lr}
   1a924:	mov	fp, sp
   1a928:	bl	117d4 <abort@plt>
   1a92c:	push	{r4, sl, fp, lr}
   1a930:	add	fp, sp, #8
   1a934:	mov	r4, r0
   1a938:	bl	11480 <wcwidth@plt>
   1a93c:	cmn	r0, #1
   1a940:	popgt	{r4, sl, fp, pc}
   1a944:	mov	r0, r4
   1a948:	bl	11534 <iswcntrl@plt>
   1a94c:	clz	r0, r0
   1a950:	lsr	r0, r0, #5
   1a954:	pop	{r4, sl, fp, pc}
   1a958:	push	{r4, r5, r6, sl, fp, lr}
   1a95c:	add	fp, sp, #16
   1a960:	mov	r4, r0
   1a964:	mov	r0, r1
   1a968:	mov	r5, r1
   1a96c:	ldr	r1, [r0], #16
   1a970:	cmp	r1, r0
   1a974:	beq	1a980 <__assert_fail@plt+0x917c>
   1a978:	mov	r6, r1
   1a97c:	b	1a990 <__assert_fail@plt+0x918c>
   1a980:	ldr	r2, [r5, #4]
   1a984:	add	r6, r4, #16
   1a988:	mov	r0, r6
   1a98c:	bl	114b0 <memcpy@plt>
   1a990:	str	r6, [r4]
   1a994:	ldr	r0, [r5, #4]
   1a998:	str	r0, [r4, #4]
   1a99c:	ldrb	r0, [r5, #8]
   1a9a0:	strb	r0, [r4, #8]
   1a9a4:	cmp	r0, #0
   1a9a8:	ldrne	r0, [r5, #12]
   1a9ac:	strne	r0, [r4, #12]
   1a9b0:	pop	{r4, r5, r6, sl, fp, pc}
   1a9b4:	movw	r2, #53304	; 0xd038
   1a9b8:	ubfx	r1, r0, #5, #3
   1a9bc:	and	r0, r0, #31
   1a9c0:	movt	r2, #1
   1a9c4:	ldr	r1, [r2, r1, lsl #2]
   1a9c8:	mov	r2, #1
   1a9cc:	and	r0, r1, r2, lsl r0
   1a9d0:	cmp	r0, #0
   1a9d4:	movwne	r0, #1
   1a9d8:	bx	lr
   1a9dc:	push	{r4, r5, r6, sl, fp, lr}
   1a9e0:	add	fp, sp, #16
   1a9e4:	sub	sp, sp, #56	; 0x38
   1a9e8:	mov	r5, r0
   1a9ec:	bl	11588 <__ctype_get_mb_cur_max@plt>
   1a9f0:	cmp	r0, #2
   1a9f4:	bcc	1aa80 <__assert_fail@plt+0x927c>
   1a9f8:	mov	r4, #0
   1a9fc:	mov	r0, sp
   1aa00:	str	r4, [sp, #8]
   1aa04:	str	r4, [sp, #4]
   1aa08:	strb	r4, [sp]
   1aa0c:	str	r5, [sp, #16]
   1aa10:	strb	r4, [sp, #12]
   1aa14:	bl	16a98 <__assert_fail@plt+0x5294>
   1aa18:	ldrb	r0, [sp, #24]
   1aa1c:	cmp	r0, #0
   1aa20:	beq	1aa30 <__assert_fail@plt+0x922c>
   1aa24:	ldr	r0, [sp, #28]
   1aa28:	cmp	r0, #0
   1aa2c:	beq	1aa74 <__assert_fail@plt+0x9270>
   1aa30:	mov	r6, #0
   1aa34:	mov	r5, sp
   1aa38:	mov	r4, #0
   1aa3c:	strb	r6, [sp, #12]
   1aa40:	ldr	r0, [sp, #16]
   1aa44:	ldr	r1, [sp, #20]
   1aa48:	add	r0, r0, r1
   1aa4c:	str	r0, [sp, #16]
   1aa50:	mov	r0, r5
   1aa54:	bl	16a98 <__assert_fail@plt+0x5294>
   1aa58:	ldrb	r1, [sp, #24]
   1aa5c:	ldr	r0, [sp, #28]
   1aa60:	add	r4, r4, #1
   1aa64:	cmp	r1, #0
   1aa68:	beq	1aa3c <__assert_fail@plt+0x9238>
   1aa6c:	cmp	r0, #0
   1aa70:	bne	1aa3c <__assert_fail@plt+0x9238>
   1aa74:	mov	r0, r4
   1aa78:	sub	sp, fp, #16
   1aa7c:	pop	{r4, r5, r6, sl, fp, pc}
   1aa80:	mov	r0, r5
   1aa84:	sub	sp, fp, #16
   1aa88:	pop	{r4, r5, r6, sl, fp, lr}
   1aa8c:	b	11654 <strlen@plt>
   1aa90:	push	{r4, r5, r6, r7, fp, lr}
   1aa94:	add	fp, sp, #16
   1aa98:	mov	r4, r1
   1aa9c:	mov	r1, #0
   1aaa0:	mov	r6, r2
   1aaa4:	bl	11720 <setlocale@plt>
   1aaa8:	cmp	r0, #0
   1aaac:	beq	1aadc <__assert_fail@plt+0x92d8>
   1aab0:	mov	r7, r0
   1aab4:	bl	11654 <strlen@plt>
   1aab8:	cmp	r0, r6
   1aabc:	bcs	1aafc <__assert_fail@plt+0x92f8>
   1aac0:	add	r2, r0, #1
   1aac4:	mov	r0, r4
   1aac8:	mov	r1, r7
   1aacc:	bl	114b0 <memcpy@plt>
   1aad0:	mov	r5, #0
   1aad4:	mov	r0, r5
   1aad8:	pop	{r4, r5, r6, r7, fp, pc}
   1aadc:	cmp	r6, #0
   1aae0:	mov	r5, #22
   1aae4:	movne	r0, #0
   1aae8:	strbne	r0, [r4]
   1aaec:	movne	r0, r5
   1aaf0:	popne	{r4, r5, r6, r7, fp, pc}
   1aaf4:	mov	r0, r5
   1aaf8:	pop	{r4, r5, r6, r7, fp, pc}
   1aafc:	mov	r5, #34	; 0x22
   1ab00:	cmp	r6, #0
   1ab04:	beq	1ab24 <__assert_fail@plt+0x9320>
   1ab08:	sub	r6, r6, #1
   1ab0c:	mov	r0, r4
   1ab10:	mov	r1, r7
   1ab14:	mov	r2, r6
   1ab18:	bl	114b0 <memcpy@plt>
   1ab1c:	mov	r0, #0
   1ab20:	strb	r0, [r4, r6]
   1ab24:	mov	r0, r5
   1ab28:	pop	{r4, r5, r6, r7, fp, pc}
   1ab2c:	mov	r1, #0
   1ab30:	b	11720 <setlocale@plt>
   1ab34:	mov	r1, #0
   1ab38:	mov	r2, #3
   1ab3c:	b	1a300 <__assert_fail@plt+0x8afc>
   1ab40:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1ab44:	mov	r7, r0
   1ab48:	ldr	r6, [pc, #72]	; 1ab98 <__assert_fail@plt+0x9394>
   1ab4c:	ldr	r5, [pc, #72]	; 1ab9c <__assert_fail@plt+0x9398>
   1ab50:	add	r6, pc, r6
   1ab54:	add	r5, pc, r5
   1ab58:	sub	r6, r6, r5
   1ab5c:	mov	r8, r1
   1ab60:	mov	r9, r2
   1ab64:	bl	1140c <fdopen@plt-0x20>
   1ab68:	asrs	r6, r6, #2
   1ab6c:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   1ab70:	mov	r4, #0
   1ab74:	add	r4, r4, #1
   1ab78:	ldr	r3, [r5], #4
   1ab7c:	mov	r2, r9
   1ab80:	mov	r1, r8
   1ab84:	mov	r0, r7
   1ab88:	blx	r3
   1ab8c:	cmp	r6, r4
   1ab90:	bne	1ab74 <__assert_fail@plt+0x9370>
   1ab94:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1ab98:			; <UNDEFINED> instruction: 0x000133b4
   1ab9c:	andeq	r3, r1, ip, lsr #7
   1aba0:	bx	lr
   1aba4:	ldr	r3, [pc, #12]	; 1abb8 <__assert_fail@plt+0x93b4>
   1aba8:	mov	r1, #0
   1abac:	add	r3, pc, r3
   1abb0:	ldr	r2, [r3]
   1abb4:	b	1169c <__cxa_atexit@plt>
   1abb8:			; <UNDEFINED> instruction: 0x000135b0

Disassembly of section .fini:

0001abbc <.fini>:
   1abbc:	push	{r3, lr}
   1abc0:	pop	{r3, pc}
