
../repos/coreutils/src/csplit:     file format elf32-littlearm


Disassembly of section .init:

00011398 <.init>:
   11398:	push	{r3, lr}
   1139c:	bl	117ac <__assert_fail@plt+0x4c>
   113a0:	pop	{r3, pc}

Disassembly of section .plt:

000113a4 <pthread_mutex_unlock@plt-0x14>:
   113a4:	push	{lr}		; (str lr, [sp, #-4]!)
   113a8:	ldr	lr, [pc, #4]	; 113b4 <pthread_mutex_unlock@plt-0x4>
   113ac:	add	lr, pc, lr
   113b0:	ldr	pc, [lr, #8]!
   113b4:	andeq	lr, r2, ip, asr #24

000113b8 <pthread_mutex_unlock@plt>:
   113b8:	add	ip, pc, #0, 12
   113bc:	add	ip, ip, #188416	; 0x2e000
   113c0:	ldr	pc, [ip, #3148]!	; 0xc4c

000113c4 <fdopen@plt>:
   113c4:	add	ip, pc, #0, 12
   113c8:	add	ip, ip, #188416	; 0x2e000
   113cc:	ldr	pc, [ip, #3140]!	; 0xc44

000113d0 <calloc@plt>:
   113d0:	add	ip, pc, #0, 12
   113d4:	add	ip, ip, #188416	; 0x2e000
   113d8:	ldr	pc, [ip, #3132]!	; 0xc3c

000113dc <fputs_unlocked@plt>:
   113dc:	add	ip, pc, #0, 12
   113e0:	add	ip, ip, #188416	; 0x2e000
   113e4:	ldr	pc, [ip, #3124]!	; 0xc34

000113e8 <wctype@plt>:
   113e8:	add	ip, pc, #0, 12
   113ec:	add	ip, ip, #188416	; 0x2e000
   113f0:	ldr	pc, [ip, #3116]!	; 0xc2c

000113f4 <raise@plt>:
   113f4:	add	ip, pc, #0, 12
   113f8:	add	ip, ip, #188416	; 0x2e000
   113fc:	ldr	pc, [ip, #3108]!	; 0xc24

00011400 <wcrtomb@plt>:
   11400:	add	ip, pc, #0, 12
   11404:	add	ip, ip, #188416	; 0x2e000
   11408:	ldr	pc, [ip, #3100]!	; 0xc1c

0001140c <iswctype@plt>:
   1140c:	add	ip, pc, #0, 12
   11410:	add	ip, ip, #188416	; 0x2e000
   11414:	ldr	pc, [ip, #3092]!	; 0xc14

00011418 <strcmp@plt>:
   11418:	add	ip, pc, #0, 12
   1141c:	add	ip, ip, #188416	; 0x2e000
   11420:	ldr	pc, [ip, #3084]!	; 0xc0c

00011424 <read@plt>:
   11424:	add	ip, pc, #0, 12
   11428:	add	ip, ip, #188416	; 0x2e000
   1142c:	ldr	pc, [ip, #3076]!	; 0xc04

00011430 <pthread_mutex_destroy@plt>:
   11430:	add	ip, pc, #0, 12
   11434:	add	ip, ip, #188416	; 0x2e000
   11438:	ldr	pc, [ip, #3068]!	; 0xbfc

0001143c <fflush@plt>:
   1143c:	add	ip, pc, #0, 12
   11440:	add	ip, ip, #188416	; 0x2e000
   11444:	ldr	pc, [ip, #3060]!	; 0xbf4

00011448 <sigprocmask@plt>:
   11448:	add	ip, pc, #0, 12
   1144c:	add	ip, ip, #188416	; 0x2e000
   11450:	ldr	pc, [ip, #3052]!	; 0xbec

00011454 <memmove@plt>:
   11454:	add	ip, pc, #0, 12
   11458:	add	ip, ip, #188416	; 0x2e000
   1145c:	ldr	pc, [ip, #3044]!	; 0xbe4

00011460 <free@plt>:
   11460:	add	ip, pc, #0, 12
   11464:	add	ip, ip, #188416	; 0x2e000
   11468:	ldr	pc, [ip, #3036]!	; 0xbdc

0001146c <pthread_mutex_lock@plt>:
   1146c:	add	ip, pc, #0, 12
   11470:	add	ip, ip, #188416	; 0x2e000
   11474:	ldr	pc, [ip, #3028]!	; 0xbd4

00011478 <_exit@plt>:
   11478:	add	ip, pc, #0, 12
   1147c:	add	ip, ip, #188416	; 0x2e000
   11480:	ldr	pc, [ip, #3020]!	; 0xbcc

00011484 <memcpy@plt>:
   11484:	add	ip, pc, #0, 12
   11488:	add	ip, ip, #188416	; 0x2e000
   1148c:	ldr	pc, [ip, #3012]!	; 0xbc4

00011490 <pthread_mutex_init@plt>:
   11490:	add	ip, pc, #0, 12
   11494:	add	ip, ip, #188416	; 0x2e000
   11498:	ldr	pc, [ip, #3004]!	; 0xbbc

0001149c <__strtoull_internal@plt>:
   1149c:	add	ip, pc, #0, 12
   114a0:	add	ip, ip, #188416	; 0x2e000
   114a4:	ldr	pc, [ip, #2996]!	; 0xbb4

000114a8 <towlower@plt>:
   114a8:	add	ip, pc, #0, 12
   114ac:	add	ip, ip, #188416	; 0x2e000
   114b0:	ldr	pc, [ip, #2988]!	; 0xbac

000114b4 <mbsinit@plt>:
   114b4:	add	ip, pc, #0, 12
   114b8:	add	ip, ip, #188416	; 0x2e000
   114bc:	ldr	pc, [ip, #2980]!	; 0xba4

000114c0 <signal@plt>:
   114c0:	add	ip, pc, #0, 12
   114c4:	add	ip, ip, #188416	; 0x2e000
   114c8:	ldr	pc, [ip, #2972]!	; 0xb9c

000114cc <fwrite_unlocked@plt>:
   114cc:	add	ip, pc, #0, 12
   114d0:	add	ip, ip, #188416	; 0x2e000
   114d4:	ldr	pc, [ip, #2964]!	; 0xb94

000114d8 <dcgettext@plt>:
   114d8:	add	ip, pc, #0, 12
   114dc:	add	ip, ip, #188416	; 0x2e000
   114e0:	ldr	pc, [ip, #2956]!	; 0xb8c

000114e4 <unlink@plt>:
   114e4:	add	ip, pc, #0, 12
   114e8:	add	ip, ip, #188416	; 0x2e000
   114ec:	ldr	pc, [ip, #2948]!	; 0xb84

000114f0 <dup2@plt>:
   114f0:	add	ip, pc, #0, 12
   114f4:	add	ip, ip, #188416	; 0x2e000
   114f8:	ldr	pc, [ip, #2940]!	; 0xb7c

000114fc <realloc@plt>:
   114fc:	add	ip, pc, #0, 12
   11500:	add	ip, ip, #188416	; 0x2e000
   11504:	ldr	pc, [ip, #2932]!	; 0xb74

00011508 <sigismember@plt>:
   11508:	add	ip, pc, #0, 12
   1150c:	add	ip, ip, #188416	; 0x2e000
   11510:	ldr	pc, [ip, #2924]!	; 0xb6c

00011514 <textdomain@plt>:
   11514:	add	ip, pc, #0, 12
   11518:	add	ip, ip, #188416	; 0x2e000
   1151c:	ldr	pc, [ip, #2916]!	; 0xb64

00011520 <rawmemchr@plt>:
   11520:	add	ip, pc, #0, 12
   11524:	add	ip, ip, #188416	; 0x2e000
   11528:	ldr	pc, [ip, #2908]!	; 0xb5c

0001152c <iswprint@plt>:
   1152c:	add	ip, pc, #0, 12
   11530:	add	ip, ip, #188416	; 0x2e000
   11534:	ldr	pc, [ip, #2900]!	; 0xb54

00011538 <sigaction@plt>:
   11538:	add	ip, pc, #0, 12
   1153c:	add	ip, ip, #188416	; 0x2e000
   11540:	ldr	pc, [ip, #2892]!	; 0xb4c

00011544 <fwrite@plt>:
   11544:	add	ip, pc, #0, 12
   11548:	add	ip, ip, #188416	; 0x2e000
   1154c:	ldr	pc, [ip, #2884]!	; 0xb44

00011550 <lseek64@plt>:
   11550:	add	ip, pc, #0, 12
   11554:	add	ip, ip, #188416	; 0x2e000
   11558:	ldr	pc, [ip, #2876]!	; 0xb3c

0001155c <__ctype_get_mb_cur_max@plt>:
   1155c:	add	ip, pc, #0, 12
   11560:	add	ip, ip, #188416	; 0x2e000
   11564:	ldr	pc, [ip, #2868]!	; 0xb34

00011568 <strcpy@plt>:
   11568:	add	ip, pc, #0, 12
   1156c:	add	ip, ip, #188416	; 0x2e000
   11570:	ldr	pc, [ip, #2860]!	; 0xb2c

00011574 <__fpending@plt>:
   11574:	add	ip, pc, #0, 12
   11578:	add	ip, ip, #188416	; 0x2e000
   1157c:	ldr	pc, [ip, #2852]!	; 0xb24

00011580 <mbrtowc@plt>:
   11580:	add	ip, pc, #0, 12
   11584:	add	ip, ip, #188416	; 0x2e000
   11588:	ldr	pc, [ip, #2844]!	; 0xb1c

0001158c <error@plt>:
   1158c:	add	ip, pc, #0, 12
   11590:	add	ip, ip, #188416	; 0x2e000
   11594:	ldr	pc, [ip, #2836]!	; 0xb14

00011598 <open64@plt>:
   11598:	add	ip, pc, #0, 12
   1159c:	add	ip, ip, #188416	; 0x2e000
   115a0:	ldr	pc, [ip, #2828]!	; 0xb0c

000115a4 <malloc@plt>:
   115a4:	add	ip, pc, #0, 12
   115a8:	add	ip, ip, #188416	; 0x2e000
   115ac:	ldr	pc, [ip, #2820]!	; 0xb04

000115b0 <sigaddset@plt>:
   115b0:	add	ip, pc, #0, 12
   115b4:	add	ip, ip, #188416	; 0x2e000
   115b8:	ldr	pc, [ip, #2812]!	; 0xafc

000115bc <__libc_start_main@plt>:
   115bc:	add	ip, pc, #0, 12
   115c0:	add	ip, ip, #188416	; 0x2e000
   115c4:	ldr	pc, [ip, #2804]!	; 0xaf4

000115c8 <__freading@plt>:
   115c8:	add	ip, pc, #0, 12
   115cc:	add	ip, ip, #188416	; 0x2e000
   115d0:	ldr	pc, [ip, #2796]!	; 0xaec

000115d4 <__ctype_tolower_loc@plt>:
   115d4:	add	ip, pc, #0, 12
   115d8:	add	ip, ip, #188416	; 0x2e000
   115dc:	ldr	pc, [ip, #2788]!	; 0xae4

000115e0 <__ctype_toupper_loc@plt>:
   115e0:	add	ip, pc, #0, 12
   115e4:	add	ip, ip, #188416	; 0x2e000
   115e8:	ldr	pc, [ip, #2780]!	; 0xadc

000115ec <__gmon_start__@plt>:
   115ec:	add	ip, pc, #0, 12
   115f0:	add	ip, ip, #188416	; 0x2e000
   115f4:	ldr	pc, [ip, #2772]!	; 0xad4

000115f8 <getopt_long@plt>:
   115f8:	add	ip, pc, #0, 12
   115fc:	add	ip, ip, #188416	; 0x2e000
   11600:	ldr	pc, [ip, #2764]!	; 0xacc

00011604 <__ctype_b_loc@plt>:
   11604:	add	ip, pc, #0, 12
   11608:	add	ip, ip, #188416	; 0x2e000
   1160c:	ldr	pc, [ip, #2756]!	; 0xac4

00011610 <exit@plt>:
   11610:	add	ip, pc, #0, 12
   11614:	add	ip, ip, #188416	; 0x2e000
   11618:	ldr	pc, [ip, #2748]!	; 0xabc

0001161c <bcmp@plt>:
   1161c:	add	ip, pc, #0, 12
   11620:	add	ip, ip, #188416	; 0x2e000
   11624:	ldr	pc, [ip, #2740]!	; 0xab4

00011628 <strlen@plt>:
   11628:	add	ip, pc, #0, 12
   1162c:	add	ip, ip, #188416	; 0x2e000
   11630:	ldr	pc, [ip, #2732]!	; 0xaac

00011634 <strchr@plt>:
   11634:	add	ip, pc, #0, 12
   11638:	add	ip, ip, #188416	; 0x2e000
   1163c:	ldr	pc, [ip, #2724]!	; 0xaa4

00011640 <__errno_location@plt>:
   11640:	add	ip, pc, #0, 12
   11644:	add	ip, ip, #188416	; 0x2e000
   11648:	ldr	pc, [ip, #2716]!	; 0xa9c

0001164c <iswalnum@plt>:
   1164c:	add	ip, pc, #0, 12
   11650:	add	ip, ip, #188416	; 0x2e000
   11654:	ldr	pc, [ip, #2708]!	; 0xa94

00011658 <__sprintf_chk@plt>:
   11658:	add	ip, pc, #0, 12
   1165c:	add	ip, ip, #188416	; 0x2e000
   11660:	ldr	pc, [ip, #2700]!	; 0xa8c

00011664 <__cxa_atexit@plt>:
   11664:	add	ip, pc, #0, 12
   11668:	add	ip, ip, #188416	; 0x2e000
   1166c:	ldr	pc, [ip, #2692]!	; 0xa84

00011670 <memset@plt>:
   11670:	add	ip, pc, #0, 12
   11674:	add	ip, ip, #188416	; 0x2e000
   11678:	ldr	pc, [ip, #2684]!	; 0xa7c

0001167c <btowc@plt>:
   1167c:	add	ip, pc, #0, 12
   11680:	add	ip, ip, #188416	; 0x2e000
   11684:	ldr	pc, [ip, #2676]!	; 0xa74

00011688 <__printf_chk@plt>:
   11688:	add	ip, pc, #0, 12
   1168c:	add	ip, ip, #188416	; 0x2e000
   11690:	ldr	pc, [ip, #2668]!	; 0xa6c

00011694 <fileno@plt>:
   11694:	add	ip, pc, #0, 12
   11698:	add	ip, ip, #188416	; 0x2e000
   1169c:	ldr	pc, [ip, #2660]!	; 0xa64

000116a0 <__fprintf_chk@plt>:
   116a0:	add	ip, pc, #0, 12
   116a4:	add	ip, ip, #188416	; 0x2e000
   116a8:	ldr	pc, [ip, #2652]!	; 0xa5c

000116ac <fclose@plt>:
   116ac:	add	ip, pc, #0, 12
   116b0:	add	ip, ip, #188416	; 0x2e000
   116b4:	ldr	pc, [ip, #2644]!	; 0xa54

000116b8 <fseeko64@plt>:
   116b8:	add	ip, pc, #0, 12
   116bc:	add	ip, ip, #188416	; 0x2e000
   116c0:	ldr	pc, [ip, #2636]!	; 0xa4c

000116c4 <fcntl64@plt>:
   116c4:	add	ip, pc, #0, 12
   116c8:	add	ip, ip, #188416	; 0x2e000
   116cc:	ldr	pc, [ip, #2628]!	; 0xa44

000116d0 <setlocale@plt>:
   116d0:	add	ip, pc, #0, 12
   116d4:	add	ip, ip, #188416	; 0x2e000
   116d8:	ldr	pc, [ip, #2620]!	; 0xa3c

000116dc <sigemptyset@plt>:
   116dc:	add	ip, pc, #0, 12
   116e0:	add	ip, ip, #188416	; 0x2e000
   116e4:	ldr	pc, [ip, #2612]!	; 0xa34

000116e8 <strrchr@plt>:
   116e8:	add	ip, pc, #0, 12
   116ec:	add	ip, ip, #188416	; 0x2e000
   116f0:	ldr	pc, [ip, #2604]!	; 0xa2c

000116f4 <nl_langinfo@plt>:
   116f4:	add	ip, pc, #0, 12
   116f8:	add	ip, ip, #188416	; 0x2e000
   116fc:	ldr	pc, [ip, #2596]!	; 0xa24

00011700 <__strtoll_internal@plt>:
   11700:	add	ip, pc, #0, 12
   11704:	add	ip, ip, #188416	; 0x2e000
   11708:	ldr	pc, [ip, #2588]!	; 0xa1c

0001170c <fopen64@plt>:
   1170c:	add	ip, pc, #0, 12
   11710:	add	ip, ip, #188416	; 0x2e000
   11714:	ldr	pc, [ip, #2580]!	; 0xa14

00011718 <bindtextdomain@plt>:
   11718:	add	ip, pc, #0, 12
   1171c:	add	ip, ip, #188416	; 0x2e000
   11720:	ldr	pc, [ip, #2572]!	; 0xa0c

00011724 <towupper@plt>:
   11724:	add	ip, pc, #0, 12
   11728:	add	ip, ip, #188416	; 0x2e000
   1172c:	ldr	pc, [ip, #2564]!	; 0xa04

00011730 <strncmp@plt>:
   11730:	add	ip, pc, #0, 12
   11734:	add	ip, ip, #188416	; 0x2e000
   11738:	ldr	pc, [ip, #2556]!	; 0x9fc

0001173c <abort@plt>:
   1173c:	add	ip, pc, #0, 12
   11740:	add	ip, ip, #188416	; 0x2e000
   11744:	ldr	pc, [ip, #2548]!	; 0x9f4

00011748 <close@plt>:
   11748:	add	ip, pc, #0, 12
   1174c:	add	ip, ip, #188416	; 0x2e000
   11750:	ldr	pc, [ip, #2540]!	; 0x9ec

00011754 <__snprintf_chk@plt>:
   11754:	add	ip, pc, #0, 12
   11758:	add	ip, ip, #188416	; 0x2e000
   1175c:	ldr	pc, [ip, #2532]!	; 0x9e4

00011760 <__assert_fail@plt>:
   11760:	add	ip, pc, #0, 12
   11764:	add	ip, ip, #188416	; 0x2e000
   11768:	ldr	pc, [ip, #2524]!	; 0x9dc

Disassembly of section .text:

00011770 <.text>:
   11770:	mov	fp, #0
   11774:	mov	lr, #0
   11778:	pop	{r1}		; (ldr r1, [sp], #4)
   1177c:	mov	r2, sp
   11780:	push	{r2}		; (str r2, [sp, #-4]!)
   11784:	push	{r0}		; (str r0, [sp, #-4]!)
   11788:	ldr	ip, [pc, #16]	; 117a0 <__assert_fail@plt+0x40>
   1178c:	push	{ip}		; (str ip, [sp, #-4]!)
   11790:	ldr	r0, [pc, #12]	; 117a4 <__assert_fail@plt+0x44>
   11794:	ldr	r3, [pc, #12]	; 117a8 <__assert_fail@plt+0x48>
   11798:	bl	115bc <__libc_start_main@plt>
   1179c:	bl	1173c <abort@plt>
   117a0:	andeq	lr, r2, r4, asr #17
   117a4:	andeq	r1, r1, ip, lsr #17
   117a8:	andeq	lr, r2, r4, ror #16
   117ac:	ldr	r3, [pc, #20]	; 117c8 <__assert_fail@plt+0x68>
   117b0:	ldr	r2, [pc, #20]	; 117cc <__assert_fail@plt+0x6c>
   117b4:	add	r3, pc, r3
   117b8:	ldr	r2, [r3, r2]
   117bc:	cmp	r2, #0
   117c0:	bxeq	lr
   117c4:	b	115ec <__gmon_start__@plt>
   117c8:	andeq	lr, r2, r4, asr #16
   117cc:	andeq	r0, r0, r8, asr #2
   117d0:	ldr	r0, [pc, #24]	; 117f0 <__assert_fail@plt+0x90>
   117d4:	ldr	r3, [pc, #24]	; 117f4 <__assert_fail@plt+0x94>
   117d8:	cmp	r3, r0
   117dc:	bxeq	lr
   117e0:	ldr	r3, [pc, #16]	; 117f8 <__assert_fail@plt+0x98>
   117e4:	cmp	r3, #0
   117e8:	bxeq	lr
   117ec:	bx	r3
   117f0:	andeq	r0, r4, r8, lsr #3
   117f4:	andeq	r0, r4, r8, lsr #3
   117f8:	andeq	r0, r0, r0
   117fc:	ldr	r0, [pc, #36]	; 11828 <__assert_fail@plt+0xc8>
   11800:	ldr	r1, [pc, #36]	; 1182c <__assert_fail@plt+0xcc>
   11804:	sub	r1, r1, r0
   11808:	asr	r1, r1, #2
   1180c:	add	r1, r1, r1, lsr #31
   11810:	asrs	r1, r1, #1
   11814:	bxeq	lr
   11818:	ldr	r3, [pc, #16]	; 11830 <__assert_fail@plt+0xd0>
   1181c:	cmp	r3, #0
   11820:	bxeq	lr
   11824:	bx	r3
   11828:	andeq	r0, r4, r8, lsr #3
   1182c:	andeq	r0, r4, r8, lsr #3
   11830:	andeq	r0, r0, r0
   11834:	push	{r4, lr}
   11838:	ldr	r4, [pc, #24]	; 11858 <__assert_fail@plt+0xf8>
   1183c:	ldrb	r3, [r4]
   11840:	cmp	r3, #0
   11844:	popne	{r4, pc}
   11848:	bl	117d0 <__assert_fail@plt+0x70>
   1184c:	mov	r3, #1
   11850:	strb	r3, [r4]
   11854:	pop	{r4, pc}
   11858:	andeq	r0, r4, r4, asr #3
   1185c:	b	117fc <__assert_fail@plt+0x9c>
   11860:	push	{fp, lr}
   11864:	mov	fp, sp
   11868:	movw	r1, #59628	; 0xe8ec
   1186c:	mov	r0, #0
   11870:	mov	r2, #5
   11874:	movt	r1, #2
   11878:	bl	114d8 <dcgettext@plt>
   1187c:	movw	r2, #61575	; 0xf087
   11880:	mov	r3, r0
   11884:	mov	r0, #0
   11888:	mov	r1, #0
   1188c:	movt	r2, #2
   11890:	bl	1158c <error@plt>
   11894:	bl	11898 <__assert_fail@plt+0x138>
   11898:	push	{fp, lr}
   1189c:	mov	fp, sp
   118a0:	bl	135bc <__assert_fail@plt+0x1e5c>
   118a4:	mov	r0, #1
   118a8:	bl	11610 <exit@plt>
   118ac:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   118b0:	add	fp, sp, #28
   118b4:	sub	sp, sp, #4
   118b8:	vpush	{d8-d9}
   118bc:	sub	sp, sp, #208	; 0xd0
   118c0:	str	r0, [sp, #44]	; 0x2c
   118c4:	ldr	r0, [r1]
   118c8:	mov	r6, r1
   118cc:	bl	14650 <__assert_fail@plt+0x2ef0>
   118d0:	movw	r1, #61035	; 0xee6b
   118d4:	mov	r0, #6
   118d8:	movt	r1, #2
   118dc:	bl	116d0 <setlocale@plt>
   118e0:	movw	r4, #59709	; 0xe93d
   118e4:	movw	r1, #59645	; 0xe8fd
   118e8:	movt	r4, #2
   118ec:	movt	r1, #2
   118f0:	mov	r0, r4
   118f4:	bl	11718 <bindtextdomain@plt>
   118f8:	mov	r0, r4
   118fc:	bl	11514 <textdomain@plt>
   11900:	movw	r0, #16836	; 0x41c4
   11904:	movt	r0, #1
   11908:	bl	2e8c8 <__assert_fail@plt+0x1d168>
   1190c:	movw	r1, #584	; 0x248
   11910:	mov	sl, #1
   11914:	movw	r0, #59669	; 0xe915
   11918:	movw	r7, #62392	; 0xf3b8
   1191c:	movw	r9, #448	; 0x1c0
   11920:	movw	r4, #344	; 0x158
   11924:	mov	r5, #0
   11928:	movt	r1, #4
   1192c:	movt	r0, #2
   11930:	movt	r7, #2
   11934:	movt	r9, #4
   11938:	movt	r4, #4
   1193c:	strb	sl, [r1, #1]
   11940:	str	r6, [r1, #8]
   11944:	str	r6, [sp, #40]	; 0x28
   11948:	movw	r6, #59672	; 0xe918
   1194c:	str	r5, [r1, #12]
   11950:	str	r5, [r1, #16]
   11954:	strb	r5, [r1]
   11958:	strb	r5, [r1, #2]
   1195c:	str	r0, [r1, #20]
   11960:	movt	r6, #2
   11964:	ldr	r0, [sp, #44]	; 0x2c
   11968:	ldr	r1, [sp, #40]	; 0x28
   1196c:	mov	r2, r6
   11970:	mov	r3, r7
   11974:	str	r5, [sp]
   11978:	bl	115f8 <getopt_long@plt>
   1197c:	cmp	r0, #97	; 0x61
   11980:	ble	11ac0 <__assert_fail@plt+0x360>
   11984:	sub	r1, r0, #98	; 0x62
   11988:	cmp	r1, #24
   1198c:	bhi	11a0c <__assert_fail@plt+0x2ac>
   11990:	add	r0, pc, #0
   11994:	ldr	pc, [r0, r1, lsl #2]
   11998:	andeq	r1, r1, r8, lsl #21
   1199c:	andeq	r3, r1, ip, asr #2
   119a0:	andeq	r3, r1, ip, asr #2
   119a4:	andeq	r3, r1, ip, asr #2
   119a8:	andeq	r1, r1, ip, lsr #21
   119ac:	andeq	r3, r1, ip, asr #2
   119b0:	andeq	r3, r1, ip, asr #2
   119b4:	andeq	r3, r1, ip, asr #2
   119b8:	andeq	r3, r1, ip, asr #2
   119bc:	muleq	r1, ip, sl
   119c0:	andeq	r3, r1, ip, asr #2
   119c4:	andeq	r3, r1, ip, asr #2
   119c8:	andeq	r1, r1, r4, lsr #20
   119cc:	andeq	r3, r1, ip, asr #2
   119d0:	andeq	r3, r1, ip, asr #2
   119d4:	strdeq	r1, [r1], -ip
   119d8:	andeq	r3, r1, ip, asr #2
   119dc:	strdeq	r1, [r1], -ip
   119e0:	andeq	r3, r1, ip, asr #2
   119e4:	andeq	r3, r1, ip, asr #2
   119e8:	andeq	r3, r1, ip, asr #2
   119ec:	andeq	r3, r1, ip, asr #2
   119f0:	andeq	r3, r1, ip, asr #2
   119f4:	andeq	r3, r1, ip, asr #2
   119f8:	andeq	r1, r1, r8, ror sl
   119fc:	movw	r0, #584	; 0x248
   11a00:	movt	r0, #4
   11a04:	strb	sl, [r0]
   11a08:	b	11964 <__assert_fail@plt+0x204>
   11a0c:	cmp	r0, #256	; 0x100
   11a10:	bne	1314c <__assert_fail@plt+0x19ec>
   11a14:	movw	r0, #584	; 0x248
   11a18:	movt	r0, #4
   11a1c:	strb	sl, [r0, #2]
   11a20:	b	11964 <__assert_fail@plt+0x204>
   11a24:	movw	r1, #59683	; 0xe923
   11a28:	mov	r8, r4
   11a2c:	ldr	r4, [r9]
   11a30:	mov	r0, #0
   11a34:	mov	r2, #5
   11a38:	movt	r1, #2
   11a3c:	bl	114d8 <dcgettext@plt>
   11a40:	mvn	r1, #-2147483648	; 0x80000000
   11a44:	mov	r2, #0
   11a48:	mov	r3, #0
   11a4c:	stm	sp, {r1, r5}
   11a50:	movw	r1, #61035	; 0xee6b
   11a54:	str	r0, [sp, #12]
   11a58:	mov	r0, r4
   11a5c:	str	r5, [sp, #16]
   11a60:	mov	r4, r8
   11a64:	movt	r1, #2
   11a68:	str	r1, [sp, #8]
   11a6c:	bl	2ba1c <__assert_fail@plt+0x1a2bc>
   11a70:	str	r0, [r8]
   11a74:	b	11964 <__assert_fail@plt+0x204>
   11a78:	movw	r0, #584	; 0x248
   11a7c:	movt	r0, #4
   11a80:	strb	sl, [r0, #3]
   11a84:	b	11964 <__assert_fail@plt+0x204>
   11a88:	ldr	r0, [r9]
   11a8c:	movw	r1, #584	; 0x248
   11a90:	movt	r1, #4
   11a94:	str	r0, [r1, #24]
   11a98:	b	11964 <__assert_fail@plt+0x204>
   11a9c:	movw	r0, #584	; 0x248
   11aa0:	movt	r0, #4
   11aa4:	strb	r5, [r0, #1]
   11aa8:	b	11964 <__assert_fail@plt+0x204>
   11aac:	ldr	r0, [r9]
   11ab0:	movw	r1, #584	; 0x248
   11ab4:	movt	r1, #4
   11ab8:	str	r0, [r1, #20]
   11abc:	b	11964 <__assert_fail@plt+0x204>
   11ac0:	cmn	r0, #1
   11ac4:	bne	12e38 <__assert_fail@plt+0x16d8>
   11ac8:	movw	r8, #432	; 0x1b0
   11acc:	ldr	r1, [sp, #44]	; 0x2c
   11ad0:	movw	sl, #584	; 0x248
   11ad4:	movt	r8, #4
   11ad8:	movt	sl, #4
   11adc:	ldr	r0, [r8]
   11ae0:	sub	r1, r1, r0
   11ae4:	cmp	r1, #1
   11ae8:	ble	13100 <__assert_fail@plt+0x19a0>
   11aec:	ldr	r0, [sl, #20]
   11af0:	bl	11628 <strlen@plt>
   11af4:	mov	r9, r0
   11af8:	ldr	r0, [sl, #24]
   11afc:	cmp	r0, #0
   11b00:	beq	12d10 <__assert_fail@plt+0x15b0>
   11b04:	ldr	lr, [sl, #24]
   11b08:	mov	r5, #0
   11b0c:	mvn	r1, #34	; 0x22
   11b10:	mvn	sl, #47	; 0x2f
   11b14:	mvn	r3, #87	; 0x57
   11b18:	mov	ip, #100	; 0x64
   11b1c:	mov	r0, lr
   11b20:	ldrb	r4, [r0]
   11b24:	cmp	r4, #37	; 0x25
   11b28:	beq	11b44 <__assert_fail@plt+0x3e4>
   11b2c:	cmp	r4, #0
   11b30:	beq	11d28 <__assert_fail@plt+0x5c8>
   11b34:	add	r0, r0, #1
   11b38:	ldrb	r4, [r0]
   11b3c:	cmp	r4, #37	; 0x25
   11b40:	bne	11b2c <__assert_fail@plt+0x3cc>
   11b44:	mov	r4, r0
   11b48:	ldrb	r6, [r4, #1]!
   11b4c:	cmp	r6, #37	; 0x25
   11b50:	bne	11b6c <__assert_fail@plt+0x40c>
   11b54:	mov	r0, r4
   11b58:	add	r0, r0, #1
   11b5c:	ldrb	r4, [r0]
   11b60:	cmp	r4, #37	; 0x25
   11b64:	bne	11b2c <__assert_fail@plt+0x3cc>
   11b68:	b	11b44 <__assert_fail@plt+0x3e4>
   11b6c:	tst	r5, #1
   11b70:	bne	12fe0 <__assert_fail@plt+0x1880>
   11b74:	add	r0, r0, #2
   11b78:	mov	r5, #0
   11b7c:	uxtab	r4, r1, r6
   11b80:	cmp	r4, #13
   11b84:	bls	11ba0 <__assert_fail@plt+0x440>
   11b88:	b	11bf4 <__assert_fail@plt+0x494>
   11b8c:	orr	r5, r5, #2
   11b90:	ldrb	r6, [r0], #1
   11b94:	uxtab	r4, r1, r6
   11b98:	cmp	r4, #13
   11b9c:	bhi	11bf4 <__assert_fail@plt+0x494>
   11ba0:	add	r7, pc, #0
   11ba4:	ldr	pc, [r7, r4, lsl #2]
   11ba8:	andeq	r1, r1, ip, lsl #23
   11bac:	strdeq	r1, [r1], -r4
   11bb0:	strdeq	r1, [r1], -r4
   11bb4:	strdeq	r1, [r1], -r4
   11bb8:	andeq	r1, r1, r0, ror #23
   11bbc:	strdeq	r1, [r1], -r4
   11bc0:	strdeq	r1, [r1], -r4
   11bc4:	strdeq	r1, [r1], -r4
   11bc8:	strdeq	r1, [r1], -r4
   11bcc:	strdeq	r1, [r1], -r4
   11bd0:	muleq	r1, r0, fp
   11bd4:	strdeq	r1, [r1], -r4
   11bd8:	strdeq	r1, [r1], -r4
   11bdc:	muleq	r1, r0, fp
   11be0:	ldrb	r6, [r0], #1
   11be4:	orr	r5, r5, #1
   11be8:	uxtab	r4, r1, r6
   11bec:	cmp	r4, #13
   11bf0:	bls	11ba0 <__assert_fail@plt+0x440>
   11bf4:	uxtab	r4, sl, r6
   11bf8:	cmp	r4, #9
   11bfc:	bhi	11c10 <__assert_fail@plt+0x4b0>
   11c00:	ldrb	r6, [r0], #1
   11c04:	sub	r4, r6, #48	; 0x30
   11c08:	cmp	r4, #10
   11c0c:	bcc	11c00 <__assert_fail@plt+0x4a0>
   11c10:	uxtb	r4, r6
   11c14:	sub	r0, r0, #1
   11c18:	cmp	r4, #46	; 0x2e
   11c1c:	bne	11c30 <__assert_fail@plt+0x4d0>
   11c20:	ldrb	r6, [r0, #1]!
   11c24:	sub	r4, r6, #48	; 0x30
   11c28:	cmp	r4, #10
   11c2c:	bcc	11c20 <__assert_fail@plt+0x4c0>
   11c30:	uxtab	r7, r3, r6
   11c34:	uxtb	r6, r6
   11c38:	cmp	r7, #32
   11c3c:	bhi	12f4c <__assert_fail@plt+0x17ec>
   11c40:	add	r2, pc, #4
   11c44:	mvn	r4, #1
   11c48:	ldr	pc, [r2, r7, lsl #2]
   11c4c:	ldrdeq	r1, [r1], -r0
   11c50:	andeq	r2, r1, r0, ror #30
   11c54:	andeq	r2, r1, r0, ror #30
   11c58:	andeq	r2, r1, r0, ror #30
   11c5c:	andeq	r2, r1, r0, ror #30
   11c60:	andeq	r2, r1, r0, ror #30
   11c64:	andeq	r2, r1, r0, ror #30
   11c68:	andeq	r2, r1, r0, ror #30
   11c6c:	andeq	r2, r1, r0, ror #30
   11c70:	andeq	r2, r1, r0, ror #30
   11c74:	andeq	r2, r1, r0, ror #30
   11c78:	andeq	r2, r1, r0, ror #30
   11c7c:	ldrdeq	r1, [r1], -r4
   11c80:	andeq	r2, r1, r0, ror #30
   11c84:	andeq	r2, r1, r0, ror #30
   11c88:	andeq	r2, r1, r0, ror #30
   11c8c:	andeq	r2, r1, r0, ror #30
   11c90:	ldrdeq	r1, [r1], -r4
   11c94:	andeq	r2, r1, r0, ror #30
   11c98:	andeq	r2, r1, r0, ror #30
   11c9c:	andeq	r2, r1, r0, ror #30
   11ca0:	andeq	r2, r1, r0, ror #30
   11ca4:	andeq	r2, r1, r0, ror #30
   11ca8:	ldrdeq	r1, [r1], -r0
   11cac:	andeq	r2, r1, r0, ror #30
   11cb0:	andeq	r2, r1, r0, ror #30
   11cb4:	andeq	r2, r1, r0, ror #30
   11cb8:	andeq	r2, r1, r0, ror #30
   11cbc:	andeq	r2, r1, r0, ror #30
   11cc0:	andeq	r1, r1, r4, ror #25
   11cc4:	andeq	r2, r1, r0, ror #30
   11cc8:	andeq	r2, r1, r0, ror #30
   11ccc:	ldrdeq	r1, [r1], -r0
   11cd0:	mvn	r4, #2
   11cd4:	ands	r4, r4, r5
   11cd8:	mov	r5, #1
   11cdc:	beq	11b34 <__assert_fail@plt+0x3d4>
   11ce0:	b	11cf4 <__assert_fail@plt+0x594>
   11ce4:	strb	ip, [r0]
   11ce8:	ands	r4, r4, r5
   11cec:	mov	r5, #1
   11cf0:	beq	11b34 <__assert_fail@plt+0x3d4>
   11cf4:	movw	r1, #61382	; 0xefc6
   11cf8:	mov	r0, #0
   11cfc:	mov	r2, #5
   11d00:	movt	r1, #2
   11d04:	bl	114d8 <dcgettext@plt>
   11d08:	tst	r4, #2
   11d0c:	mov	r3, #35	; 0x23
   11d10:	mov	r2, r0
   11d14:	str	r6, [sp]
   11d18:	movweq	r3, #39	; 0x27
   11d1c:	mov	r0, #1
   11d20:	mov	r1, #0
   11d24:	bl	1158c <error@plt>
   11d28:	tst	r5, #1
   11d2c:	beq	13154 <__assert_fail@plt+0x19f4>
   11d30:	mvn	r0, #-2147483648	; 0x80000000
   11d34:	mov	r1, #0
   11d38:	mov	r2, #1
   11d3c:	mvn	r3, #0
   11d40:	str	lr, [sp]
   11d44:	str	r0, [sp, #4]
   11d48:	mov	r0, #0
   11d4c:	bl	11754 <__snprintf_chk@plt>
   11d50:	movw	sl, #584	; 0x248
   11d54:	cmn	r0, #1
   11d58:	movt	sl, #4
   11d5c:	ble	12d30 <__assert_fail@plt+0x15d0>
   11d60:	add	r0, r0, r9
   11d64:	add	r0, r0, #1
   11d68:	cmp	r0, r9
   11d6c:	bvs	12d30 <__assert_fail@plt+0x15d0>
   11d70:	bl	2b3f0 <__assert_fail@plt+0x19c90>
   11d74:	str	r0, [sl, #28]
   11d78:	movw	r1, #62724	; 0xf504
   11d7c:	ldr	r0, [r8]
   11d80:	ldr	r9, [sp, #40]	; 0x28
   11d84:	movt	r1, #2
   11d88:	add	r5, r0, #1
   11d8c:	str	r5, [r8]
   11d90:	ldr	r6, [r9, r0, lsl #2]
   11d94:	mov	r0, r6
   11d98:	bl	11418 <strcmp@plt>
   11d9c:	cmp	r0, #0
   11da0:	beq	11dc4 <__assert_fail@plt+0x664>
   11da4:	mov	r0, #0
   11da8:	mov	r1, r6
   11dac:	mov	r2, #0
   11db0:	mov	r3, #0
   11db4:	bl	1434c <__assert_fail@plt+0x2bec>
   11db8:	cmp	r0, #0
   11dbc:	bmi	13160 <__assert_fail@plt+0x1a00>
   11dc0:	ldr	r5, [r8]
   11dc4:	ldr	r0, [sp, #44]	; 0x2c
   11dc8:	cmp	r5, r0
   11dcc:	bge	12138 <__assert_fail@plt+0x9d8>
   11dd0:	vmov.i32	q4, #0	; 0x00000000
   11dd4:	add	r0, sl, #44	; 0x2c
   11dd8:	str	r0, [sp, #28]
   11ddc:	b	11df8 <__assert_fail@plt+0x698>
   11de0:	mov	r5, r7
   11de4:	ldr	r0, [sp, #44]	; 0x2c
   11de8:	movw	sl, #584	; 0x248
   11dec:	movt	sl, #4
   11df0:	cmp	r5, r0
   11df4:	bge	12138 <__assert_fail@plt+0x9d8>
   11df8:	ldr	r7, [r9, r5, lsl #2]
   11dfc:	ldrb	r4, [r7]
   11e00:	cmp	r4, #47	; 0x2f
   11e04:	cmpne	r4, #37	; 0x25
   11e08:	bne	11fa4 <__assert_fail@plt+0x844>
   11e0c:	add	r9, r7, #1
   11e10:	mov	r1, r4
   11e14:	mov	r0, r9
   11e18:	bl	116e8 <strrchr@plt>
   11e1c:	cmp	r0, #0
   11e20:	beq	12ec0 <__assert_fail@plt+0x1760>
   11e24:	mov	r6, r0
   11e28:	mvn	r0, r7
   11e2c:	ldr	r1, [sl, #16]
   11e30:	sub	r2, r4, #37	; 0x25
   11e34:	str	r7, [sp, #32]
   11e38:	add	r0, r6, r0
   11e3c:	clz	r2, r2
   11e40:	str	r0, [sp, #36]	; 0x24
   11e44:	ldr	r0, [sl, #44]	; 0x2c
   11e48:	lsr	r4, r2, #5
   11e4c:	cmp	r1, r0
   11e50:	bne	11e7c <__assert_fail@plt+0x71c>
   11e54:	mov	r1, #64	; 0x40
   11e58:	ldr	r0, [sl, #12]
   11e5c:	mov	r2, #1
   11e60:	mvn	r3, #0
   11e64:	str	r1, [sp]
   11e68:	ldr	r1, [sp, #28]
   11e6c:	bl	2b608 <__assert_fail@plt+0x19ea8>
   11e70:	str	r0, [sl, #12]
   11e74:	ldr	r1, [sl, #16]
   11e78:	b	11e80 <__assert_fail@plt+0x720>
   11e7c:	ldr	r0, [sl, #12]
   11e80:	add	r2, r1, #1
   11e84:	mov	r7, #0
   11e88:	mov	r8, r5
   11e8c:	str	r2, [sl, #16]
   11e90:	add	sl, r0, r1, lsl #6
   11e94:	mov	r0, #1
   11e98:	mov	r1, #20
   11e9c:	strb	r7, [sl, #28]
   11ea0:	str	r7, [sl, #16]
   11ea4:	str	r7, [sl, #36]	; 0x24
   11ea8:	strb	r0, [sl, #30]
   11eac:	mov	r0, sl
   11eb0:	strb	r4, [sl, #29]
   11eb4:	str	r5, [sl, #24]
   11eb8:	mov	r4, sl
   11ebc:	vst1.64	{d8-d9}, [r0], r1
   11ec0:	str	r7, [r0]
   11ec4:	mov	r0, #256	; 0x100
   11ec8:	str	r7, [r4, #32]!
   11ecc:	bl	2b3d8 <__assert_fail@plt+0x19c78>
   11ed0:	str	r0, [sl, #48]	; 0x30
   11ed4:	movw	r0, #1004	; 0x3ec
   11ed8:	str	r7, [sl, #52]	; 0x34
   11edc:	movw	r1, #710	; 0x2c6
   11ee0:	mov	r2, r4
   11ee4:	mov	r5, #0
   11ee8:	movt	r0, #4
   11eec:	str	r1, [r0]
   11ef0:	ldr	r1, [sp, #36]	; 0x24
   11ef4:	mov	r0, r9
   11ef8:	bl	16630 <__assert_fail@plt+0x4ed0>
   11efc:	cmp	r0, #0
   11f00:	bne	12eec <__assert_fail@plt+0x178c>
   11f04:	ldrb	r0, [r6, #1]!
   11f08:	ldr	r9, [sp, #40]	; 0x28
   11f0c:	cmp	r0, #0
   11f10:	beq	11f3c <__assert_fail@plt+0x7dc>
   11f14:	movw	r0, #61035	; 0xee6b
   11f18:	mov	r1, #0
   11f1c:	mov	r2, #10
   11f20:	mov	r3, sl
   11f24:	movt	r0, #2
   11f28:	str	r0, [sp]
   11f2c:	mov	r0, r6
   11f30:	bl	2ba24 <__assert_fail@plt+0x1a2c4>
   11f34:	cmp	r0, #0
   11f38:	bne	12f94 <__assert_fail@plt+0x1834>
   11f3c:	ldr	r0, [sp, #44]	; 0x2c
   11f40:	add	r7, r8, #1
   11f44:	cmp	r7, r0
   11f48:	bge	11de0 <__assert_fail@plt+0x680>
   11f4c:	ldr	r6, [r9, r7, lsl #2]
   11f50:	ldrb	r0, [r6]
   11f54:	cmp	r0, #123	; 0x7b
   11f58:	bne	11de0 <__assert_fail@plt+0x680>
   11f5c:	mov	r0, r6
   11f60:	bl	11628 <strlen@plt>
   11f64:	sub	r4, r0, #1
   11f68:	mov	r1, r0
   11f6c:	ldrb	r0, [r6, r4]
   11f70:	cmp	r0, #125	; 0x7d
   11f74:	bne	130a4 <__assert_fail@plt+0x1944>
   11f78:	add	r0, r6, #1
   11f7c:	cmp	r1, #3
   11f80:	strb	r5, [r6, r4]
   11f84:	bne	11fe0 <__assert_fail@plt+0x880>
   11f88:	ldrb	r1, [r0]
   11f8c:	cmp	r1, #42	; 0x2a
   11f90:	bne	11fe0 <__assert_fail@plt+0x880>
   11f94:	mov	r0, #1
   11f98:	mov	r5, r8
   11f9c:	strb	r0, [sl, #28]
   11fa0:	b	1201c <__assert_fail@plt+0x8bc>
   11fa4:	ldr	r7, [sl, #16]
   11fa8:	ldr	r0, [sl, #44]	; 0x2c
   11fac:	cmp	r7, r0
   11fb0:	bne	1202c <__assert_fail@plt+0x8cc>
   11fb4:	mov	r1, #64	; 0x40
   11fb8:	ldr	r0, [sl, #12]
   11fbc:	mov	r2, #1
   11fc0:	mvn	r3, #0
   11fc4:	str	r1, [sp]
   11fc8:	ldr	r1, [sp, #28]
   11fcc:	bl	2b608 <__assert_fail@plt+0x19ea8>
   11fd0:	str	r0, [sl, #12]
   11fd4:	mov	r6, r0
   11fd8:	ldr	r7, [sl, #16]
   11fdc:	b	12030 <__assert_fail@plt+0x8d0>
   11fe0:	movw	r1, #61035	; 0xee6b
   11fe4:	mov	r2, #10
   11fe8:	add	r3, sp, #48	; 0x30
   11fec:	movt	r1, #2
   11ff0:	str	r1, [sp]
   11ff4:	mov	r1, #0
   11ff8:	bl	2d384 <__assert_fail@plt+0x1bc24>
   11ffc:	cmp	r0, #0
   12000:	bne	12fb4 <__assert_fail@plt+0x1854>
   12004:	ldr	r1, [sp, #52]	; 0x34
   12008:	cmn	r1, #1
   1200c:	ble	12fb4 <__assert_fail@plt+0x1854>
   12010:	ldr	r0, [sp, #48]	; 0x30
   12014:	mov	r5, r8
   12018:	strd	r0, [sl, #16]
   1201c:	mov	r0, #125	; 0x7d
   12020:	add	r5, r5, #2
   12024:	strb	r0, [r6, r4]
   12028:	b	11de4 <__assert_fail@plt+0x684>
   1202c:	ldr	r6, [sl, #12]
   12030:	add	r0, r7, #1
   12034:	mov	r1, #0
   12038:	mov	r2, #20
   1203c:	sub	r3, fp, #64	; 0x40
   12040:	str	r0, [sl, #16]
   12044:	add	sl, r6, r7, lsl #6
   12048:	mov	r0, sl
   1204c:	strb	r1, [sl, #28]
   12050:	strb	r1, [sl, #30]
   12054:	str	r1, [sl, #16]
   12058:	str	r5, [sl, #24]
   1205c:	vst1.64	{d8-d9}, [r0], r2
   12060:	mov	r2, r5
   12064:	mov	r5, #0
   12068:	str	r1, [r0]
   1206c:	movw	r1, #61035	; 0xee6b
   12070:	mov	r8, r2
   12074:	ldr	r0, [r9, r2, lsl #2]
   12078:	movt	r1, #2
   1207c:	mov	r2, #10
   12080:	str	r1, [sp]
   12084:	mov	r1, #0
   12088:	bl	2d384 <__assert_fail@plt+0x1bc24>
   1208c:	cmp	r0, #0
   12090:	bne	12f2c <__assert_fail@plt+0x17cc>
   12094:	ldr	r1, [fp, #-60]	; 0xffffffc4
   12098:	cmn	r1, #1
   1209c:	ble	12f2c <__assert_fail@plt+0x17cc>
   120a0:	ldr	r0, [fp, #-64]	; 0xffffffc0
   120a4:	orrs	r2, r0, r1
   120a8:	beq	13004 <__assert_fail@plt+0x18a4>
   120ac:	movw	r2, #584	; 0x248
   120b0:	movt	r2, #4
   120b4:	ldrd	r2, [r2, #72]	; 0x48
   120b8:	subs	r4, r0, r2
   120bc:	sbcs	r4, r1, r3
   120c0:	bcc	1302c <__assert_fail@plt+0x18cc>
   120c4:	eor	r2, r0, r2
   120c8:	eor	r3, r1, r3
   120cc:	orrs	r2, r2, r3
   120d0:	bne	12110 <__assert_fail@plt+0x9b0>
   120d4:	movw	r1, #61578	; 0xf08a
   120d8:	mov	r0, #0
   120dc:	mov	r2, #5
   120e0:	movt	r1, #2
   120e4:	bl	114d8 <dcgettext@plt>
   120e8:	mov	r4, r0
   120ec:	ldr	r0, [r9, r8, lsl #2]
   120f0:	bl	16614 <__assert_fail@plt+0x4eb4>
   120f4:	mov	r3, r0
   120f8:	mov	r0, #0
   120fc:	mov	r1, #0
   12100:	mov	r2, r4
   12104:	bl	1158c <error@plt>
   12108:	ldr	r0, [fp, #-64]	; 0xffffffc0
   1210c:	ldr	r1, [fp, #-60]	; 0xffffffc4
   12110:	movw	r2, #584	; 0x248
   12114:	movt	r2, #4
   12118:	strd	r0, [r2, #72]	; 0x48
   1211c:	add	r2, r6, r7, lsl #6
   12120:	strd	r0, [r2, #8]
   12124:	ldr	r0, [sp, #44]	; 0x2c
   12128:	add	r7, r8, #1
   1212c:	cmp	r7, r0
   12130:	bge	11de0 <__assert_fail@plt+0x680>
   12134:	b	11f4c <__assert_fail@plt+0x7ec>
   12138:	movw	r0, #456	; 0x1c8
   1213c:	movt	r0, #4
   12140:	bl	116dc <sigemptyset@plt>
   12144:	add	r2, sp, #48	; 0x30
   12148:	mov	r0, #14
   1214c:	mov	r1, #0
   12150:	bl	11538 <sigaction@plt>
   12154:	ldr	r0, [sp, #48]	; 0x30
   12158:	cmp	r0, #1
   1215c:	beq	12170 <__assert_fail@plt+0xa10>
   12160:	movw	r0, #456	; 0x1c8
   12164:	mov	r1, #14
   12168:	movt	r0, #4
   1216c:	bl	115b0 <sigaddset@plt>
   12170:	add	r2, sp, #48	; 0x30
   12174:	mov	r0, #1
   12178:	mov	r1, #0
   1217c:	bl	11538 <sigaction@plt>
   12180:	ldr	r0, [sp, #48]	; 0x30
   12184:	cmp	r0, #1
   12188:	beq	1219c <__assert_fail@plt+0xa3c>
   1218c:	movw	r0, #456	; 0x1c8
   12190:	mov	r1, #1
   12194:	movt	r0, #4
   12198:	bl	115b0 <sigaddset@plt>
   1219c:	add	r2, sp, #48	; 0x30
   121a0:	mov	r0, #2
   121a4:	mov	r1, #0
   121a8:	bl	11538 <sigaction@plt>
   121ac:	ldr	r0, [sp, #48]	; 0x30
   121b0:	cmp	r0, #1
   121b4:	beq	121c8 <__assert_fail@plt+0xa68>
   121b8:	movw	r0, #456	; 0x1c8
   121bc:	mov	r1, #2
   121c0:	movt	r0, #4
   121c4:	bl	115b0 <sigaddset@plt>
   121c8:	add	r2, sp, #48	; 0x30
   121cc:	mov	r0, #13
   121d0:	mov	r1, #0
   121d4:	bl	11538 <sigaction@plt>
   121d8:	ldr	r0, [sp, #48]	; 0x30
   121dc:	cmp	r0, #1
   121e0:	beq	121f4 <__assert_fail@plt+0xa94>
   121e4:	movw	r0, #456	; 0x1c8
   121e8:	mov	r1, #13
   121ec:	movt	r0, #4
   121f0:	bl	115b0 <sigaddset@plt>
   121f4:	add	r2, sp, #48	; 0x30
   121f8:	mov	r0, #3
   121fc:	mov	r1, #0
   12200:	bl	11538 <sigaction@plt>
   12204:	ldr	r0, [sp, #48]	; 0x30
   12208:	cmp	r0, #1
   1220c:	beq	12220 <__assert_fail@plt+0xac0>
   12210:	movw	r0, #456	; 0x1c8
   12214:	mov	r1, #3
   12218:	movt	r0, #4
   1221c:	bl	115b0 <sigaddset@plt>
   12220:	add	r2, sp, #48	; 0x30
   12224:	mov	r0, #15
   12228:	mov	r1, #0
   1222c:	bl	11538 <sigaction@plt>
   12230:	ldr	r0, [sp, #48]	; 0x30
   12234:	cmp	r0, #1
   12238:	beq	1224c <__assert_fail@plt+0xaec>
   1223c:	movw	r0, #456	; 0x1c8
   12240:	mov	r1, #15
   12244:	movt	r0, #4
   12248:	bl	115b0 <sigaddset@plt>
   1224c:	add	r2, sp, #48	; 0x30
   12250:	mov	r0, #29
   12254:	mov	r1, #0
   12258:	bl	11538 <sigaction@plt>
   1225c:	ldr	r0, [sp, #48]	; 0x30
   12260:	cmp	r0, #1
   12264:	beq	12278 <__assert_fail@plt+0xb18>
   12268:	movw	r0, #456	; 0x1c8
   1226c:	mov	r1, #29
   12270:	movt	r0, #4
   12274:	bl	115b0 <sigaddset@plt>
   12278:	add	r2, sp, #48	; 0x30
   1227c:	mov	r0, #27
   12280:	mov	r1, #0
   12284:	bl	11538 <sigaction@plt>
   12288:	ldr	r0, [sp, #48]	; 0x30
   1228c:	cmp	r0, #1
   12290:	beq	122a4 <__assert_fail@plt+0xb44>
   12294:	movw	r0, #456	; 0x1c8
   12298:	mov	r1, #27
   1229c:	movt	r0, #4
   122a0:	bl	115b0 <sigaddset@plt>
   122a4:	add	r2, sp, #48	; 0x30
   122a8:	mov	r0, #26
   122ac:	mov	r1, #0
   122b0:	bl	11538 <sigaction@plt>
   122b4:	ldr	r0, [sp, #48]	; 0x30
   122b8:	cmp	r0, #1
   122bc:	beq	122d0 <__assert_fail@plt+0xb70>
   122c0:	movw	r0, #456	; 0x1c8
   122c4:	mov	r1, #26
   122c8:	movt	r0, #4
   122cc:	bl	115b0 <sigaddset@plt>
   122d0:	add	r2, sp, #48	; 0x30
   122d4:	mov	r0, #24
   122d8:	mov	r1, #0
   122dc:	bl	11538 <sigaction@plt>
   122e0:	ldr	r0, [sp, #48]	; 0x30
   122e4:	cmp	r0, #1
   122e8:	beq	122fc <__assert_fail@plt+0xb9c>
   122ec:	movw	r0, #456	; 0x1c8
   122f0:	mov	r1, #24
   122f4:	movt	r0, #4
   122f8:	bl	115b0 <sigaddset@plt>
   122fc:	add	r4, sp, #48	; 0x30
   12300:	mov	r0, #25
   12304:	mov	r1, #0
   12308:	mov	r5, #0
   1230c:	mov	r2, r4
   12310:	bl	11538 <sigaction@plt>
   12314:	ldr	r0, [sp, #48]	; 0x30
   12318:	cmp	r0, #1
   1231c:	beq	12330 <__assert_fail@plt+0xbd0>
   12320:	movw	r0, #456	; 0x1c8
   12324:	mov	r1, #25
   12328:	movt	r0, #4
   1232c:	bl	115b0 <sigaddset@plt>
   12330:	movw	r0, #13548	; 0x34ec
   12334:	mov	r2, #128	; 0x80
   12338:	movt	r0, #1
   1233c:	str	r0, [sp, #48]	; 0x30
   12340:	add	r0, r4, #4
   12344:	movw	r4, #456	; 0x1c8
   12348:	movt	r4, #4
   1234c:	mov	r1, r4
   12350:	bl	11484 <memcpy@plt>
   12354:	mov	r0, r4
   12358:	mov	r1, #14
   1235c:	str	r5, [sp, #180]	; 0xb4
   12360:	bl	11508 <sigismember@plt>
   12364:	cmp	r0, #0
   12368:	beq	1237c <__assert_fail@plt+0xc1c>
   1236c:	add	r1, sp, #48	; 0x30
   12370:	mov	r0, #14
   12374:	mov	r2, #0
   12378:	bl	11538 <sigaction@plt>
   1237c:	movw	r0, #456	; 0x1c8
   12380:	mov	r1, #1
   12384:	movt	r0, #4
   12388:	bl	11508 <sigismember@plt>
   1238c:	cmp	r0, #0
   12390:	beq	123a4 <__assert_fail@plt+0xc44>
   12394:	add	r1, sp, #48	; 0x30
   12398:	mov	r0, #1
   1239c:	mov	r2, #0
   123a0:	bl	11538 <sigaction@plt>
   123a4:	movw	r0, #456	; 0x1c8
   123a8:	mov	r1, #2
   123ac:	movt	r0, #4
   123b0:	bl	11508 <sigismember@plt>
   123b4:	cmp	r0, #0
   123b8:	beq	123cc <__assert_fail@plt+0xc6c>
   123bc:	add	r1, sp, #48	; 0x30
   123c0:	mov	r0, #2
   123c4:	mov	r2, #0
   123c8:	bl	11538 <sigaction@plt>
   123cc:	movw	r0, #456	; 0x1c8
   123d0:	mov	r1, #13
   123d4:	movt	r0, #4
   123d8:	bl	11508 <sigismember@plt>
   123dc:	cmp	r0, #0
   123e0:	beq	123f4 <__assert_fail@plt+0xc94>
   123e4:	add	r1, sp, #48	; 0x30
   123e8:	mov	r0, #13
   123ec:	mov	r2, #0
   123f0:	bl	11538 <sigaction@plt>
   123f4:	movw	r0, #456	; 0x1c8
   123f8:	mov	r1, #3
   123fc:	movt	r0, #4
   12400:	bl	11508 <sigismember@plt>
   12404:	cmp	r0, #0
   12408:	beq	1241c <__assert_fail@plt+0xcbc>
   1240c:	add	r1, sp, #48	; 0x30
   12410:	mov	r0, #3
   12414:	mov	r2, #0
   12418:	bl	11538 <sigaction@plt>
   1241c:	movw	r0, #456	; 0x1c8
   12420:	mov	r1, #15
   12424:	movt	r0, #4
   12428:	bl	11508 <sigismember@plt>
   1242c:	cmp	r0, #0
   12430:	beq	12444 <__assert_fail@plt+0xce4>
   12434:	add	r1, sp, #48	; 0x30
   12438:	mov	r0, #15
   1243c:	mov	r2, #0
   12440:	bl	11538 <sigaction@plt>
   12444:	movw	r0, #456	; 0x1c8
   12448:	mov	r1, #29
   1244c:	movt	r0, #4
   12450:	bl	11508 <sigismember@plt>
   12454:	cmp	r0, #0
   12458:	beq	1246c <__assert_fail@plt+0xd0c>
   1245c:	add	r1, sp, #48	; 0x30
   12460:	mov	r0, #29
   12464:	mov	r2, #0
   12468:	bl	11538 <sigaction@plt>
   1246c:	movw	r0, #456	; 0x1c8
   12470:	mov	r1, #27
   12474:	movt	r0, #4
   12478:	bl	11508 <sigismember@plt>
   1247c:	cmp	r0, #0
   12480:	beq	12494 <__assert_fail@plt+0xd34>
   12484:	add	r1, sp, #48	; 0x30
   12488:	mov	r0, #27
   1248c:	mov	r2, #0
   12490:	bl	11538 <sigaction@plt>
   12494:	movw	r0, #456	; 0x1c8
   12498:	mov	r1, #26
   1249c:	movt	r0, #4
   124a0:	bl	11508 <sigismember@plt>
   124a4:	cmp	r0, #0
   124a8:	beq	124bc <__assert_fail@plt+0xd5c>
   124ac:	add	r1, sp, #48	; 0x30
   124b0:	mov	r0, #26
   124b4:	mov	r2, #0
   124b8:	bl	11538 <sigaction@plt>
   124bc:	movw	r0, #456	; 0x1c8
   124c0:	mov	r1, #24
   124c4:	movt	r0, #4
   124c8:	bl	11508 <sigismember@plt>
   124cc:	cmp	r0, #0
   124d0:	beq	124e4 <__assert_fail@plt+0xd84>
   124d4:	add	r1, sp, #48	; 0x30
   124d8:	mov	r0, #24
   124dc:	mov	r2, #0
   124e0:	bl	11538 <sigaction@plt>
   124e4:	movw	r0, #456	; 0x1c8
   124e8:	mov	r1, #25
   124ec:	movt	r0, #4
   124f0:	bl	11508 <sigismember@plt>
   124f4:	cmp	r0, #0
   124f8:	beq	1250c <__assert_fail@plt+0xdac>
   124fc:	add	r1, sp, #48	; 0x30
   12500:	mov	r0, #25
   12504:	mov	r2, #0
   12508:	bl	11538 <sigaction@plt>
   1250c:	ldr	r0, [sl, #16]
   12510:	cmp	r0, #0
   12514:	ble	12c9c <__assert_fail@plt+0x153c>
   12518:	ldr	r0, [sl, #12]
   1251c:	mov	r7, #0
   12520:	add	r1, r0, r7, lsl #6
   12524:	str	r7, [sp, #40]	; 0x28
   12528:	ldrb	r1, [r1, #30]
   1252c:	cmp	r1, #0
   12530:	beq	12a18 <__assert_fail@plt+0x12b8>
   12534:	mov	r9, #0
   12538:	mov	r4, #0
   1253c:	b	12594 <__assert_fail@plt+0xe34>
   12540:	ldr	r0, [sp, #44]	; 0x2c
   12544:	cmp	r0, #0
   12548:	bleq	136e8 <__assert_fail@plt+0x1f88>
   1254c:	ldr	r0, [sp, #36]	; 0x24
   12550:	movw	sl, #584	; 0x248
   12554:	ldr	r4, [sp, #28]
   12558:	movt	sl, #4
   1255c:	ldrd	r0, [r0]
   12560:	subs	r0, r0, #1
   12564:	sbcs	r0, r1, #0
   12568:	ldr	r0, [sp, #32]
   1256c:	strge	r0, [sl, #80]	; 0x50
   12570:	strge	r8, [sl, #84]	; 0x54
   12574:	ldrb	r0, [sl, #2]
   12578:	cmp	r0, #1
   1257c:	bleq	13aa8 <__assert_fail@plt+0x2348>
   12580:	ldr	r9, [sp, #24]
   12584:	ldr	r0, [sl, #12]
   12588:	ldr	r7, [sp, #40]	; 0x28
   1258c:	adds	r9, r9, #1
   12590:	adc	r4, r4, #0
   12594:	add	r6, r0, r7, lsl #6
   12598:	mov	r8, r6
   1259c:	ldrb	r1, [r8, #28]!
   125a0:	cmp	r1, #0
   125a4:	bne	125b8 <__assert_fail@plt+0xe58>
   125a8:	ldrd	r2, [r6, #16]
   125ac:	subs	r1, r2, r9
   125b0:	sbcs	r1, r3, r4
   125b4:	blt	12c8c <__assert_fail@plt+0x152c>
   125b8:	ldrb	r0, [r6, #29]
   125bc:	cmp	r0, #0
   125c0:	str	r0, [sp, #44]	; 0x2c
   125c4:	bleq	13880 <__assert_fail@plt+0x2120>
   125c8:	add	r0, r6, #32
   125cc:	str	r4, [sp, #28]
   125d0:	str	r6, [sp, #36]	; 0x24
   125d4:	str	r0, [sp, #32]
   125d8:	ldr	r0, [r6, #4]
   125dc:	cmn	r0, #1
   125e0:	ble	12760 <__assert_fail@plt+0x1000>
   125e4:	ldr	r0, [sp, #44]	; 0x2c
   125e8:	str	r9, [sp, #24]
   125ec:	cmp	r0, #0
   125f0:	beq	12834 <__assert_fail@plt+0x10d4>
   125f4:	ldrd	r0, [sl, #80]	; 0x50
   125f8:	ldr	r4, [sl, #48]	; 0x30
   125fc:	adds	r5, r0, #1
   12600:	adc	r9, r1, #0
   12604:	cmp	r4, #0
   12608:	str	r5, [sl, #80]	; 0x50
   1260c:	str	r9, [sl, #84]	; 0x54
   12610:	bne	12624 <__assert_fail@plt+0xec4>
   12614:	bl	13c3c <__assert_fail@plt+0x24dc>
   12618:	cmp	r0, #0
   1261c:	beq	12d6c <__assert_fail@plt+0x160c>
   12620:	ldr	r4, [sl, #48]	; 0x30
   12624:	ldrd	r0, [r4, #8]
   12628:	mov	r7, #1
   1262c:	subs	r2, r5, r0
   12630:	sbcs	r2, r9, r1
   12634:	blt	12d84 <__assert_fail@plt+0x1624>
   12638:	cmp	r4, #0
   1263c:	beq	12dd0 <__assert_fail@plt+0x1670>
   12640:	ldr	r2, [r4, #24]
   12644:	adds	r3, r0, r2
   12648:	adc	r1, r1, r2, asr #31
   1264c:	subs	r2, r5, r3
   12650:	sbcs	r1, r9, r1
   12654:	bge	126a4 <__assert_fail@plt+0xf44>
   12658:	ldr	r1, [r4, #32]
   1265c:	sub	r0, r5, r0
   12660:	cmp	r0, #80	; 0x50
   12664:	blt	126cc <__assert_fail@plt+0xf6c>
   12668:	ldr	r6, [sp, #36]	; 0x24
   1266c:	ldr	r1, [r1, #652]	; 0x28c
   12670:	sub	r0, r0, #80	; 0x50
   12674:	cmp	r0, #79	; 0x4f
   12678:	bgt	1266c <__assert_fail@plt+0xf0c>
   1267c:	b	126d0 <__assert_fail@plt+0xf70>
   12680:	ldr	r0, [r1, #8]
   12684:	ldr	r2, [r1, #24]
   12688:	ldr	r3, [r1, #12]
   1268c:	adds	r4, r0, r2
   12690:	adc	r2, r3, r2, asr #31
   12694:	subs	r3, r5, r4
   12698:	mov	r4, r1
   1269c:	sbcs	r2, r9, r2
   126a0:	blt	12658 <__assert_fail@plt+0xef8>
   126a4:	ldr	r1, [r4, #40]	; 0x28
   126a8:	cmp	r1, #0
   126ac:	bne	12680 <__assert_fail@plt+0xf20>
   126b0:	bl	13c3c <__assert_fail@plt+0x24dc>
   126b4:	cmp	r0, #0
   126b8:	beq	12d84 <__assert_fail@plt+0x1624>
   126bc:	ldr	r1, [r4, #40]	; 0x28
   126c0:	cmp	r1, #0
   126c4:	bne	12680 <__assert_fail@plt+0xf20>
   126c8:	b	12dd0 <__assert_fail@plt+0x1670>
   126cc:	ldr	r6, [sp, #36]	; 0x24
   126d0:	add	r0, r1, r0, lsl #3
   126d4:	ldr	r2, [r0, #12]
   126d8:	ldr	r1, [r0, #16]
   126dc:	sub	r0, r2, #1
   126e0:	ldrb	r3, [r1, r0]
   126e4:	cmp	r3, #10
   126e8:	mov	r3, #0
   126ec:	moveq	r2, r0
   126f0:	mov	r0, #0
   126f4:	str	r0, [sp, #4]
   126f8:	ldr	r0, [sp, #32]
   126fc:	str	r2, [sp]
   12700:	bl	1be64 <__assert_fail@plt+0xa704>
   12704:	cmn	r0, #1
   12708:	bne	1294c <__assert_fail@plt+0x11ec>
   1270c:	bl	13aa8 <__assert_fail@plt+0x2348>
   12710:	b	125f4 <__assert_fail@plt+0xe94>
   12714:	ldr	r0, [r1, #8]
   12718:	ldr	r2, [r1, #24]
   1271c:	ldr	r3, [r1, #12]
   12720:	adds	r4, r0, r2
   12724:	adc	r2, r3, r2, asr #31
   12728:	subs	r3, r5, r4
   1272c:	mov	r4, r1
   12730:	sbcs	r2, r7, r2
   12734:	blt	127c0 <__assert_fail@plt+0x1060>
   12738:	ldr	r1, [r4, #40]	; 0x28
   1273c:	cmp	r1, #0
   12740:	bne	12714 <__assert_fail@plt+0xfb4>
   12744:	bl	13c3c <__assert_fail@plt+0x24dc>
   12748:	cmp	r0, #0
   1274c:	beq	12d34 <__assert_fail@plt+0x15d4>
   12750:	ldr	r1, [r4, #40]	; 0x28
   12754:	cmp	r1, #0
   12758:	bne	12714 <__assert_fail@plt+0xfb4>
   1275c:	b	12dd0 <__assert_fail@plt+0x1670>
   12760:	ldrd	r0, [sl, #80]	; 0x50
   12764:	ldr	r4, [sl, #48]	; 0x30
   12768:	adds	r5, r0, #1
   1276c:	adc	r7, r1, #0
   12770:	cmp	r4, #0
   12774:	str	r5, [sl, #80]	; 0x50
   12778:	str	r7, [sl, #84]	; 0x54
   1277c:	bne	12790 <__assert_fail@plt+0x1030>
   12780:	bl	13c3c <__assert_fail@plt+0x24dc>
   12784:	cmp	r0, #0
   12788:	beq	12d34 <__assert_fail@plt+0x15d4>
   1278c:	ldr	r4, [sl, #48]	; 0x30
   12790:	ldrd	r0, [r4, #8]
   12794:	subs	r2, r5, r0
   12798:	sbcs	r2, r7, r1
   1279c:	blt	12d34 <__assert_fail@plt+0x15d4>
   127a0:	cmp	r4, #0
   127a4:	beq	12dd0 <__assert_fail@plt+0x1670>
   127a8:	ldr	r2, [r4, #24]
   127ac:	adds	r3, r0, r2
   127b0:	adc	r1, r1, r2, asr #31
   127b4:	subs	r2, r5, r3
   127b8:	sbcs	r1, r7, r1
   127bc:	bge	12738 <__assert_fail@plt+0xfd8>
   127c0:	ldr	r1, [r4, #32]
   127c4:	sub	r0, r5, r0
   127c8:	cmp	r0, #80	; 0x50
   127cc:	blt	127e0 <__assert_fail@plt+0x1080>
   127d0:	ldr	r1, [r1, #652]	; 0x28c
   127d4:	sub	r0, r0, #80	; 0x50
   127d8:	cmp	r0, #79	; 0x4f
   127dc:	bgt	127d0 <__assert_fail@plt+0x1070>
   127e0:	add	r0, r1, r0, lsl #3
   127e4:	ldr	r2, [r0, #12]
   127e8:	ldr	r1, [r0, #16]
   127ec:	sub	r0, r2, #1
   127f0:	ldrb	r3, [r1, r0]
   127f4:	cmp	r3, #10
   127f8:	mov	r3, #0
   127fc:	moveq	r2, r0
   12800:	mov	r0, #0
   12804:	str	r0, [sp, #4]
   12808:	ldr	r0, [sp, #32]
   1280c:	str	r2, [sp]
   12810:	bl	1be64 <__assert_fail@plt+0xa704>
   12814:	cmn	r0, #1
   12818:	beq	12760 <__assert_fail@plt+0x1000>
   1281c:	str	r9, [sp, #24]
   12820:	cmn	r0, #2
   12824:	bne	12954 <__assert_fail@plt+0x11f4>
   12828:	b	130d8 <__assert_fail@plt+0x1978>
   1282c:	bl	13aa8 <__assert_fail@plt+0x2348>
   12830:	bl	13ba4 <__assert_fail@plt+0x2444>
   12834:	ldrd	r0, [sl, #80]	; 0x50
   12838:	ldr	r4, [sl, #48]	; 0x30
   1283c:	adds	r5, r0, #1
   12840:	adc	r9, r1, #0
   12844:	cmp	r4, #0
   12848:	str	r5, [sl, #80]	; 0x50
   1284c:	str	r9, [sl, #84]	; 0x54
   12850:	bne	12864 <__assert_fail@plt+0x1104>
   12854:	bl	13c3c <__assert_fail@plt+0x24dc>
   12858:	cmp	r0, #0
   1285c:	beq	12d80 <__assert_fail@plt+0x1620>
   12860:	ldr	r4, [sl, #48]	; 0x30
   12864:	ldrd	r0, [r4, #8]
   12868:	mov	r7, #0
   1286c:	subs	r2, r5, r0
   12870:	sbcs	r2, r9, r1
   12874:	blt	12d84 <__assert_fail@plt+0x1624>
   12878:	cmp	r4, #0
   1287c:	beq	12dd0 <__assert_fail@plt+0x1670>
   12880:	ldr	r2, [r4, #24]
   12884:	adds	r3, r0, r2
   12888:	adc	r1, r1, r2, asr #31
   1288c:	subs	r2, r5, r3
   12890:	sbcs	r1, r9, r1
   12894:	bge	128e4 <__assert_fail@plt+0x1184>
   12898:	ldr	r1, [r4, #32]
   1289c:	sub	r0, r5, r0
   128a0:	cmp	r0, #80	; 0x50
   128a4:	blt	1290c <__assert_fail@plt+0x11ac>
   128a8:	ldr	r6, [sp, #36]	; 0x24
   128ac:	ldr	r1, [r1, #652]	; 0x28c
   128b0:	sub	r0, r0, #80	; 0x50
   128b4:	cmp	r0, #79	; 0x4f
   128b8:	bgt	128ac <__assert_fail@plt+0x114c>
   128bc:	b	12910 <__assert_fail@plt+0x11b0>
   128c0:	ldr	r0, [r1, #8]
   128c4:	ldr	r2, [r1, #24]
   128c8:	ldr	r3, [r1, #12]
   128cc:	adds	r4, r0, r2
   128d0:	adc	r2, r3, r2, asr #31
   128d4:	subs	r3, r5, r4
   128d8:	mov	r4, r1
   128dc:	sbcs	r2, r9, r2
   128e0:	blt	12898 <__assert_fail@plt+0x1138>
   128e4:	ldr	r1, [r4, #40]	; 0x28
   128e8:	cmp	r1, #0
   128ec:	bne	128c0 <__assert_fail@plt+0x1160>
   128f0:	bl	13c3c <__assert_fail@plt+0x24dc>
   128f4:	cmp	r0, #0
   128f8:	beq	12d84 <__assert_fail@plt+0x1624>
   128fc:	ldr	r1, [r4, #40]	; 0x28
   12900:	cmp	r1, #0
   12904:	bne	128c0 <__assert_fail@plt+0x1160>
   12908:	b	12dd0 <__assert_fail@plt+0x1670>
   1290c:	ldr	r6, [sp, #36]	; 0x24
   12910:	add	r0, r1, r0, lsl #3
   12914:	ldr	r2, [r0, #12]
   12918:	ldr	r1, [r0, #16]
   1291c:	sub	r0, r2, #1
   12920:	ldrb	r3, [r1, r0]
   12924:	cmp	r3, #10
   12928:	mov	r3, #0
   1292c:	moveq	r2, r0
   12930:	mov	r0, #0
   12934:	str	r0, [sp, #4]
   12938:	ldr	r0, [sp, #32]
   1293c:	str	r2, [sp]
   12940:	bl	1be64 <__assert_fail@plt+0xa704>
   12944:	cmn	r0, #1
   12948:	beq	1282c <__assert_fail@plt+0x10cc>
   1294c:	cmn	r0, #2
   12950:	beq	130d8 <__assert_fail@plt+0x1978>
   12954:	ldrd	r2, [sl, #80]	; 0x50
   12958:	ldrd	r4, [r6]
   1295c:	ldr	r0, [sl, #48]	; 0x30
   12960:	adds	r7, r4, r2
   12964:	ldr	r4, [r6, #24]
   12968:	adc	r8, r5, r3
   1296c:	cmp	r0, #0
   12970:	bne	12984 <__assert_fail@plt+0x1224>
   12974:	bl	13c3c <__assert_fail@plt+0x24dc>
   12978:	cmp	r0, #0
   1297c:	beq	12e94 <__assert_fail@plt+0x1734>
   12980:	ldr	r0, [sl, #48]	; 0x30
   12984:	str	r4, [sp, #20]
   12988:	ldrd	r0, [r0, #16]
   1298c:	subs	r2, r7, r0
   12990:	sbcs	r2, r8, r1
   12994:	blt	12df0 <__assert_fail@plt+0x1690>
   12998:	str	r7, [sp, #32]
   1299c:	subs	r7, r7, r0
   129a0:	sbc	r6, r8, r1
   129a4:	subs	r0, r7, #1
   129a8:	sbcs	r0, r6, #0
   129ac:	blt	12540 <__assert_fail@plt+0xde0>
   129b0:	ldr	r0, [sp, #44]	; 0x2c
   129b4:	cmp	r0, #0
   129b8:	beq	129e8 <__assert_fail@plt+0x1288>
   129bc:	mov	r4, #0
   129c0:	mov	r5, #0
   129c4:	bl	13aa8 <__assert_fail@plt+0x2348>
   129c8:	cmp	r0, #0
   129cc:	beq	12df0 <__assert_fail@plt+0x1690>
   129d0:	adds	r4, r4, #1
   129d4:	adc	r5, r5, #0
   129d8:	subs	r0, r4, r7
   129dc:	sbcs	r0, r5, r6
   129e0:	blt	129c4 <__assert_fail@plt+0x1264>
   129e4:	b	12540 <__assert_fail@plt+0xde0>
   129e8:	mov	r9, #0
   129ec:	mov	sl, #0
   129f0:	bl	13aa8 <__assert_fail@plt+0x2348>
   129f4:	cmp	r0, #0
   129f8:	beq	12df0 <__assert_fail@plt+0x1690>
   129fc:	bl	13ba4 <__assert_fail@plt+0x2444>
   12a00:	adds	r9, r9, #1
   12a04:	adc	sl, sl, #0
   12a08:	subs	r0, r9, r7
   12a0c:	sbcs	r0, sl, r6
   12a10:	blt	129f0 <__assert_fail@plt+0x1290>
   12a14:	b	12540 <__assert_fail@plt+0xde0>
   12a18:	mov	r8, #0
   12a1c:	mov	r5, #0
   12a20:	add	r6, r0, r7, lsl #6
   12a24:	ldrb	r1, [r6, #28]
   12a28:	cmp	r1, #0
   12a2c:	bne	12a6c <__assert_fail@plt+0x130c>
   12a30:	b	12a5c <__assert_fail@plt+0x12fc>
   12a34:	ldrb	r0, [sl, #2]
   12a38:	cmp	r0, #0
   12a3c:	beq	12dc0 <__assert_fail@plt+0x1660>
   12a40:	ldr	r0, [sl, #12]
   12a44:	ldr	r5, [sp, #44]	; 0x2c
   12a48:	ldr	r7, [sp, #40]	; 0x28
   12a4c:	add	r6, r0, r7, lsl #6
   12a50:	ldrb	r1, [r6, #28]
   12a54:	cmp	r1, #0
   12a58:	bne	12a6c <__assert_fail@plt+0x130c>
   12a5c:	ldrd	r2, [r6, #16]
   12a60:	subs	r1, r2, r8
   12a64:	sbcs	r1, r3, r5
   12a68:	blt	12c8c <__assert_fail@plt+0x152c>
   12a6c:	str	r8, [sp, #36]	; 0x24
   12a70:	adds	r8, r8, #1
   12a74:	str	r5, [sp, #32]
   12a78:	adc	r0, r5, #0
   12a7c:	str	r0, [sp, #44]	; 0x2c
   12a80:	ldrd	r4, [r6, #8]
   12a84:	bl	13880 <__assert_fail@plt+0x2120>
   12a88:	ldrd	r0, [sl, #80]	; 0x50
   12a8c:	ldr	r7, [sl, #48]	; 0x30
   12a90:	adds	r9, r0, #1
   12a94:	adc	sl, r1, #0
   12a98:	cmp	r7, #0
   12a9c:	beq	12b1c <__assert_fail@plt+0x13bc>
   12aa0:	ldrd	r0, [r7, #8]
   12aa4:	subs	r2, r9, r0
   12aa8:	sbcs	r2, sl, r1
   12aac:	blt	12b44 <__assert_fail@plt+0x13e4>
   12ab0:	cmp	r7, #0
   12ab4:	beq	12dd0 <__assert_fail@plt+0x1670>
   12ab8:	ldr	r2, [r7, #24]
   12abc:	adds	r0, r0, r2
   12ac0:	adc	r1, r1, r2, asr #31
   12ac4:	subs	r0, r9, r0
   12ac8:	sbcs	r0, sl, r1
   12acc:	bge	12af4 <__assert_fail@plt+0x1394>
   12ad0:	b	12b58 <__assert_fail@plt+0x13f8>
   12ad4:	ldrd	r2, [r0, #8]
   12ad8:	ldr	r1, [r0, #24]
   12adc:	mov	r7, r0
   12ae0:	adds	r2, r2, r1
   12ae4:	adc	r1, r3, r1, asr #31
   12ae8:	subs	r2, r9, r2
   12aec:	sbcs	r1, sl, r1
   12af0:	blt	12b58 <__assert_fail@plt+0x13f8>
   12af4:	ldr	r0, [r7, #40]	; 0x28
   12af8:	cmp	r0, #0
   12afc:	bne	12ad4 <__assert_fail@plt+0x1374>
   12b00:	bl	13c3c <__assert_fail@plt+0x24dc>
   12b04:	cmp	r0, #0
   12b08:	beq	12b44 <__assert_fail@plt+0x13e4>
   12b0c:	ldr	r0, [r7, #40]	; 0x28
   12b10:	cmp	r0, #0
   12b14:	bne	12ad4 <__assert_fail@plt+0x1374>
   12b18:	b	12dd0 <__assert_fail@plt+0x1670>
   12b1c:	bl	13c3c <__assert_fail@plt+0x24dc>
   12b20:	cmp	r0, #0
   12b24:	beq	12b44 <__assert_fail@plt+0x13e4>
   12b28:	movw	r0, #584	; 0x248
   12b2c:	movt	r0, #4
   12b30:	ldr	r7, [r0, #48]	; 0x30
   12b34:	ldrd	r0, [r7, #8]
   12b38:	subs	r2, r9, r0
   12b3c:	sbcs	r2, sl, r1
   12b40:	bge	12ab0 <__assert_fail@plt+0x1350>
   12b44:	movw	r0, #584	; 0x248
   12b48:	movt	r0, #4
   12b4c:	ldrb	r0, [r0, #2]
   12b50:	cmp	r0, #1
   12b54:	beq	12dc0 <__assert_fail@plt+0x1660>
   12b58:	movw	sl, #584	; 0x248
   12b5c:	movt	sl, #4
   12b60:	ldr	r0, [sl, #48]	; 0x30
   12b64:	cmp	r0, #0
   12b68:	bne	12b7c <__assert_fail@plt+0x141c>
   12b6c:	bl	13c3c <__assert_fail@plt+0x24dc>
   12b70:	cmp	r0, #0
   12b74:	beq	12e94 <__assert_fail@plt+0x1734>
   12b78:	ldr	r0, [sl, #48]	; 0x30
   12b7c:	ldr	r2, [sp, #44]	; 0x2c
   12b80:	umull	r7, r1, r4, r8
   12b84:	ldr	r9, [r0, #20]
   12b88:	mla	r1, r4, r2, r1
   12b8c:	mla	r4, r5, r8, r1
   12b90:	ldr	r5, [r0, #16]
   12b94:	subs	r0, r5, r7
   12b98:	sbcs	r0, r9, r4
   12b9c:	bge	12bc4 <__assert_fail@plt+0x1464>
   12ba0:	adds	r5, r5, #1
   12ba4:	adc	r9, r9, #0
   12ba8:	bl	13aa8 <__assert_fail@plt+0x2348>
   12bac:	cmp	r0, #0
   12bb0:	beq	12dc0 <__assert_fail@plt+0x1660>
   12bb4:	bl	13ba4 <__assert_fail@plt+0x2444>
   12bb8:	subs	r0, r5, r7
   12bbc:	sbcs	r0, r9, r4
   12bc0:	blt	12ba0 <__assert_fail@plt+0x1440>
   12bc4:	bl	136e8 <__assert_fail@plt+0x1f88>
   12bc8:	ldrb	r0, [sl, #2]
   12bcc:	cmp	r0, #1
   12bd0:	bleq	13aa8 <__assert_fail@plt+0x2348>
   12bd4:	ldrd	r0, [sl, #80]	; 0x50
   12bd8:	ldr	r7, [sl, #48]	; 0x30
   12bdc:	adds	r4, r0, #1
   12be0:	adc	r5, r1, #0
   12be4:	cmp	r7, #0
   12be8:	beq	12c68 <__assert_fail@plt+0x1508>
   12bec:	ldrd	r0, [r7, #8]
   12bf0:	subs	r2, r4, r0
   12bf4:	sbcs	r2, r5, r1
   12bf8:	blt	12a34 <__assert_fail@plt+0x12d4>
   12bfc:	cmp	r7, #0
   12c00:	beq	12dd0 <__assert_fail@plt+0x1670>
   12c04:	ldr	r2, [r7, #24]
   12c08:	adds	r0, r0, r2
   12c0c:	adc	r1, r1, r2, asr #31
   12c10:	subs	r0, r4, r0
   12c14:	sbcs	r0, r5, r1
   12c18:	bge	12c40 <__assert_fail@plt+0x14e0>
   12c1c:	b	12a40 <__assert_fail@plt+0x12e0>
   12c20:	ldrd	r2, [r0, #8]
   12c24:	ldr	r1, [r0, #24]
   12c28:	mov	r7, r0
   12c2c:	adds	r2, r2, r1
   12c30:	adc	r1, r3, r1, asr #31
   12c34:	subs	r2, r4, r2
   12c38:	sbcs	r1, r5, r1
   12c3c:	blt	12a40 <__assert_fail@plt+0x12e0>
   12c40:	ldr	r0, [r7, #40]	; 0x28
   12c44:	cmp	r0, #0
   12c48:	bne	12c20 <__assert_fail@plt+0x14c0>
   12c4c:	bl	13c3c <__assert_fail@plt+0x24dc>
   12c50:	cmp	r0, #0
   12c54:	beq	12a34 <__assert_fail@plt+0x12d4>
   12c58:	ldr	r0, [r7, #40]	; 0x28
   12c5c:	cmp	r0, #0
   12c60:	bne	12c20 <__assert_fail@plt+0x14c0>
   12c64:	b	12dd0 <__assert_fail@plt+0x1670>
   12c68:	bl	13c3c <__assert_fail@plt+0x24dc>
   12c6c:	cmp	r0, #0
   12c70:	beq	12a34 <__assert_fail@plt+0x12d4>
   12c74:	ldr	r7, [sl, #48]	; 0x30
   12c78:	ldrd	r0, [r7, #8]
   12c7c:	subs	r2, r4, r0
   12c80:	sbcs	r2, r5, r1
   12c84:	blt	12a34 <__assert_fail@plt+0x12d4>
   12c88:	b	12bfc <__assert_fail@plt+0x149c>
   12c8c:	ldr	r1, [sl, #16]
   12c90:	add	r7, r7, #1
   12c94:	cmp	r7, r1
   12c98:	blt	12520 <__assert_fail@plt+0xdc0>
   12c9c:	bl	13880 <__assert_fail@plt+0x2120>
   12ca0:	bl	13aa8 <__assert_fail@plt+0x2348>
   12ca4:	cmp	r0, #0
   12ca8:	beq	12cbc <__assert_fail@plt+0x155c>
   12cac:	bl	13ba4 <__assert_fail@plt+0x2444>
   12cb0:	bl	13aa8 <__assert_fail@plt+0x2348>
   12cb4:	cmp	r0, #0
   12cb8:	bne	12cac <__assert_fail@plt+0x154c>
   12cbc:	bl	136e8 <__assert_fail@plt+0x1f88>
   12cc0:	mov	r0, #0
   12cc4:	bl	11748 <close@plt>
   12cc8:	cmp	r0, #0
   12ccc:	moveq	r0, #0
   12cd0:	subeq	sp, fp, #48	; 0x30
   12cd4:	vpopeq	{d8-d9}
   12cd8:	addeq	sp, sp, #4
   12cdc:	popeq	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12ce0:	bl	11640 <__errno_location@plt>
   12ce4:	movw	r1, #59788	; 0xe98c
   12ce8:	ldr	r4, [r0]
   12cec:	mov	r0, #0
   12cf0:	mov	r2, #5
   12cf4:	movt	r1, #2
   12cf8:	bl	114d8 <dcgettext@plt>
   12cfc:	mov	r2, r0
   12d00:	mov	r0, #0
   12d04:	mov	r1, r4
   12d08:	bl	1158c <error@plt>
   12d0c:	bl	11898 <__assert_fail@plt+0x138>
   12d10:	ldr	r1, [r4]
   12d14:	mov	r0, #11
   12d18:	cmp	r1, #11
   12d1c:	ldrcs	r0, [r4]
   12d20:	add	r0, r0, r9
   12d24:	add	r0, r0, #1
   12d28:	cmp	r0, r9
   12d2c:	bvc	11d70 <__assert_fail@plt+0x610>
   12d30:	bl	11860 <__assert_fail@plt+0x100>
   12d34:	ldrb	r0, [r8]
   12d38:	cmp	r0, #0
   12d3c:	beq	131e0 <__assert_fail@plt+0x1a80>
   12d40:	ldr	r0, [sp, #44]	; 0x2c
   12d44:	cmp	r0, #0
   12d48:	bne	12db8 <__assert_fail@plt+0x1658>
   12d4c:	bl	13aa8 <__assert_fail@plt+0x2348>
   12d50:	cmp	r0, #0
   12d54:	beq	12db4 <__assert_fail@plt+0x1654>
   12d58:	bl	13ba4 <__assert_fail@plt+0x2444>
   12d5c:	bl	13aa8 <__assert_fail@plt+0x2348>
   12d60:	cmp	r0, #0
   12d64:	bne	12d58 <__assert_fail@plt+0x15f8>
   12d68:	b	12db4 <__assert_fail@plt+0x1654>
   12d6c:	mov	r7, #1
   12d70:	ldrb	r0, [r8]
   12d74:	cmp	r0, #0
   12d78:	bne	12d90 <__assert_fail@plt+0x1630>
   12d7c:	b	131cc <__assert_fail@plt+0x1a6c>
   12d80:	mov	r7, #0
   12d84:	ldrb	r0, [r8]
   12d88:	cmp	r0, #0
   12d8c:	beq	131cc <__assert_fail@plt+0x1a6c>
   12d90:	cmp	r7, #0
   12d94:	bne	12db8 <__assert_fail@plt+0x1658>
   12d98:	bl	13aa8 <__assert_fail@plt+0x2348>
   12d9c:	cmp	r0, #0
   12da0:	beq	12db4 <__assert_fail@plt+0x1654>
   12da4:	bl	13ba4 <__assert_fail@plt+0x2444>
   12da8:	bl	13aa8 <__assert_fail@plt+0x2348>
   12dac:	cmp	r0, #0
   12db0:	bne	12da4 <__assert_fail@plt+0x1644>
   12db4:	bl	136e8 <__assert_fail@plt+0x1f88>
   12db8:	mov	r0, #0
   12dbc:	bl	11610 <exit@plt>
   12dc0:	ldr	r2, [sp, #36]	; 0x24
   12dc4:	ldr	r3, [sp, #32]
   12dc8:	mov	r0, r6
   12dcc:	bl	140d0 <__assert_fail@plt+0x2970>
   12dd0:	movw	r0, #61859	; 0xf1a3
   12dd4:	movw	r1, #61861	; 0xf1a5
   12dd8:	movw	r3, #61874	; 0xf1b2
   12ddc:	movw	r2, #583	; 0x247
   12de0:	movt	r0, #2
   12de4:	movt	r1, #2
   12de8:	movt	r3, #2
   12dec:	bl	11760 <__assert_fail@plt>
   12df0:	movw	r1, #61975	; 0xf217
   12df4:	mov	r0, #0
   12df8:	mov	r2, #5
   12dfc:	movt	r1, #2
   12e00:	bl	114d8 <dcgettext@plt>
   12e04:	mov	r4, r0
   12e08:	movw	r0, #584	; 0x248
   12e0c:	ldr	r1, [sp, #20]
   12e10:	movt	r0, #4
   12e14:	ldr	r0, [r0, #8]
   12e18:	ldr	r0, [r0, r1, lsl #2]
   12e1c:	bl	16614 <__assert_fail@plt+0x4eb4>
   12e20:	mov	r3, r0
   12e24:	mov	r0, #0
   12e28:	mov	r1, #0
   12e2c:	mov	r2, r4
   12e30:	bl	1158c <error@plt>
   12e34:	bl	11898 <__assert_fail@plt+0x138>
   12e38:	cmn	r0, #3
   12e3c:	bne	12f84 <__assert_fail@plt+0x1824>
   12e40:	movw	r0, #348	; 0x15c
   12e44:	movw	r2, #59731	; 0xe953
   12e48:	mov	r1, #0
   12e4c:	movw	r7, #59719	; 0xe947
   12e50:	movt	r0, #4
   12e54:	movt	r2, #2
   12e58:	str	r1, [sp, #8]
   12e5c:	movw	r1, #59698	; 0xe932
   12e60:	movt	r7, #2
   12e64:	movt	r1, #2
   12e68:	ldr	r3, [r0]
   12e6c:	movw	r0, #444	; 0x1bc
   12e70:	str	r2, [sp, #4]
   12e74:	movw	r2, #59705	; 0xe939
   12e78:	str	r7, [sp]
   12e7c:	movt	r0, #4
   12e80:	movt	r2, #2
   12e84:	ldr	r0, [r0]
   12e88:	bl	2b1a4 <__assert_fail@plt+0x19a44>
   12e8c:	mov	r0, #0
   12e90:	bl	11610 <exit@plt>
   12e94:	bl	11640 <__errno_location@plt>
   12e98:	movw	r1, #61953	; 0xf201
   12e9c:	ldr	r4, [r0]
   12ea0:	mov	r0, #0
   12ea4:	mov	r2, #5
   12ea8:	movt	r1, #2
   12eac:	bl	114d8 <dcgettext@plt>
   12eb0:	mov	r2, r0
   12eb4:	mov	r0, #1
   12eb8:	mov	r1, r4
   12ebc:	bl	1158c <error@plt>
   12ec0:	movw	r1, #61639	; 0xf0c7
   12ec4:	mov	r0, #0
   12ec8:	mov	r2, #5
   12ecc:	movt	r1, #2
   12ed0:	bl	114d8 <dcgettext@plt>
   12ed4:	mov	r2, r0
   12ed8:	mov	r0, #1
   12edc:	mov	r1, #0
   12ee0:	mov	r3, r7
   12ee4:	str	r4, [sp]
   12ee8:	bl	1158c <error@plt>
   12eec:	movw	r1, #61674	; 0xf0ea
   12ef0:	mov	r4, r0
   12ef4:	mov	r0, #0
   12ef8:	mov	r2, #5
   12efc:	movt	r1, #2
   12f00:	bl	114d8 <dcgettext@plt>
   12f04:	mov	r5, r0
   12f08:	ldr	r0, [sp, #32]
   12f0c:	bl	16614 <__assert_fail@plt+0x4eb4>
   12f10:	mov	r3, r0
   12f14:	mov	r0, #0
   12f18:	mov	r1, #0
   12f1c:	mov	r2, r5
   12f20:	str	r4, [sp]
   12f24:	bl	1158c <error@plt>
   12f28:	bl	11898 <__assert_fail@plt+0x138>
   12f2c:	movw	r1, #61459	; 0xf013
   12f30:	mov	r0, #0
   12f34:	mov	r2, #5
   12f38:	movt	r1, #2
   12f3c:	bl	114d8 <dcgettext@plt>
   12f40:	mov	r4, r0
   12f44:	ldr	r0, [r9, r8, lsl #2]
   12f48:	b	130c0 <__assert_fail@plt+0x1960>
   12f4c:	cmp	r6, #0
   12f50:	bne	12f60 <__assert_fail@plt+0x1800>
   12f54:	movw	r1, #61254	; 0xef46
   12f58:	movt	r1, #2
   12f5c:	b	12fe8 <__assert_fail@plt+0x1888>
   12f60:	bl	11604 <__ctype_b_loc@plt>
   12f64:	ldr	r0, [r0]
   12f68:	add	r0, r0, r6, lsl #1
   12f6c:	ldrb	r0, [r0, #1]
   12f70:	tst	r0, #64	; 0x40
   12f74:	bne	1307c <__assert_fail@plt+0x191c>
   12f78:	movw	r1, #61336	; 0xef98
   12f7c:	movt	r1, #2
   12f80:	b	13084 <__assert_fail@plt+0x1924>
   12f84:	cmn	r0, #2
   12f88:	bne	1314c <__assert_fail@plt+0x19ec>
   12f8c:	mov	r0, #0
   12f90:	bl	13200 <__assert_fail@plt+0x1aa0>
   12f94:	movw	r1, #61709	; 0xf10d
   12f98:	mov	r0, #0
   12f9c:	mov	r2, #5
   12fa0:	movt	r1, #2
   12fa4:	bl	114d8 <dcgettext@plt>
   12fa8:	mov	r4, r0
   12fac:	ldr	r0, [sp, #32]
   12fb0:	b	130c0 <__assert_fail@plt+0x1960>
   12fb4:	movw	r1, #61782	; 0xf156
   12fb8:	mov	r0, #0
   12fbc:	mov	r2, #5
   12fc0:	movt	r1, #2
   12fc4:	bl	114d8 <dcgettext@plt>
   12fc8:	mov	r4, r0
   12fcc:	movw	r0, #584	; 0x248
   12fd0:	movt	r0, #4
   12fd4:	ldr	r0, [r0, #8]
   12fd8:	ldr	r0, [r0, r7, lsl #2]
   12fdc:	b	130c0 <__assert_fail@plt+0x1960>
   12fe0:	movw	r1, #61160	; 0xeee8
   12fe4:	movt	r1, #2
   12fe8:	mov	r0, #0
   12fec:	mov	r2, #5
   12ff0:	bl	114d8 <dcgettext@plt>
   12ff4:	mov	r2, r0
   12ff8:	mov	r0, #1
   12ffc:	mov	r1, #0
   13000:	bl	1158c <error@plt>
   13004:	movw	r1, #61479	; 0xf027
   13008:	mov	r0, #0
   1300c:	mov	r2, #5
   13010:	movt	r1, #2
   13014:	bl	114d8 <dcgettext@plt>
   13018:	ldr	r3, [r9, r8, lsl #2]
   1301c:	mov	r2, r0
   13020:	mov	r0, #1
   13024:	mov	r1, #0
   13028:	bl	1158c <error@plt>
   1302c:	movw	r1, #61521	; 0xf051
   13030:	mov	r0, #0
   13034:	mov	r2, #5
   13038:	movt	r1, #2
   1303c:	bl	114d8 <dcgettext@plt>
   13040:	mov	r4, r0
   13044:	ldr	r0, [r9, r8, lsl #2]
   13048:	bl	16614 <__assert_fail@plt+0x4eb4>
   1304c:	mov	r5, r0
   13050:	movw	r0, #584	; 0x248
   13054:	add	r2, sp, #48	; 0x30
   13058:	movt	r0, #4
   1305c:	ldrd	r0, [r0, #72]	; 0x48
   13060:	bl	14590 <__assert_fail@plt+0x2e30>
   13064:	str	r0, [sp]
   13068:	mov	r0, #1
   1306c:	mov	r1, #0
   13070:	mov	r2, r4
   13074:	mov	r3, r5
   13078:	bl	1158c <error@plt>
   1307c:	movw	r1, #61293	; 0xef6d
   13080:	movt	r1, #2
   13084:	mov	r0, #0
   13088:	mov	r2, #5
   1308c:	bl	114d8 <dcgettext@plt>
   13090:	mov	r2, r0
   13094:	mov	r0, #1
   13098:	mov	r1, #0
   1309c:	mov	r3, r6
   130a0:	bl	1158c <error@plt>
   130a4:	movw	r1, #61746	; 0xf132
   130a8:	mov	r0, #0
   130ac:	mov	r2, #5
   130b0:	movt	r1, #2
   130b4:	bl	114d8 <dcgettext@plt>
   130b8:	mov	r4, r0
   130bc:	mov	r0, r6
   130c0:	bl	16614 <__assert_fail@plt+0x4eb4>
   130c4:	mov	r3, r0
   130c8:	mov	r0, #1
   130cc:	mov	r1, #0
   130d0:	mov	r2, r4
   130d4:	bl	1158c <error@plt>
   130d8:	movw	r1, #61824	; 0xf180
   130dc:	mov	r0, #0
   130e0:	mov	r2, #5
   130e4:	movt	r1, #2
   130e8:	bl	114d8 <dcgettext@plt>
   130ec:	mov	r2, r0
   130f0:	mov	r0, #0
   130f4:	mov	r1, #0
   130f8:	bl	1158c <error@plt>
   130fc:	bl	11898 <__assert_fail@plt+0x138>
   13100:	ldr	r1, [sp, #44]	; 0x2c
   13104:	cmp	r0, r1
   13108:	bge	131a0 <__assert_fail@plt+0x1a40>
   1310c:	movw	r1, #59763	; 0xe973
   13110:	mov	r0, #0
   13114:	mov	r2, #5
   13118:	movt	r1, #2
   1311c:	bl	114d8 <dcgettext@plt>
   13120:	mov	r4, r0
   13124:	ldr	r0, [sp, #40]	; 0x28
   13128:	ldr	r1, [sp, #44]	; 0x2c
   1312c:	add	r0, r0, r1, lsl #2
   13130:	ldr	r0, [r0, #-4]
   13134:	bl	16614 <__assert_fail@plt+0x4eb4>
   13138:	mov	r3, r0
   1313c:	mov	r0, #0
   13140:	mov	r1, #0
   13144:	mov	r2, r4
   13148:	bl	1158c <error@plt>
   1314c:	mov	r0, #1
   13150:	bl	13200 <__assert_fail@plt+0x1aa0>
   13154:	movw	r1, #61208	; 0xef18
   13158:	movt	r1, #2
   1315c:	b	12fe8 <__assert_fail@plt+0x1888>
   13160:	bl	11640 <__errno_location@plt>
   13164:	movw	r1, #61432	; 0xeff8
   13168:	ldr	r4, [r0]
   1316c:	mov	r0, #0
   13170:	mov	r2, #5
   13174:	movt	r1, #2
   13178:	bl	114d8 <dcgettext@plt>
   1317c:	mov	r5, r0
   13180:	mov	r0, #4
   13184:	mov	r1, r6
   13188:	bl	160ec <__assert_fail@plt+0x498c>
   1318c:	mov	r3, r0
   13190:	mov	r0, #1
   13194:	mov	r1, r4
   13198:	mov	r2, r5
   1319c:	bl	1158c <error@plt>
   131a0:	movw	r1, #59747	; 0xe963
   131a4:	mov	r0, #0
   131a8:	mov	r2, #5
   131ac:	movt	r1, #2
   131b0:	bl	114d8 <dcgettext@plt>
   131b4:	mov	r2, r0
   131b8:	mov	r0, #0
   131bc:	mov	r1, #0
   131c0:	bl	1158c <error@plt>
   131c4:	mov	r0, #1
   131c8:	bl	13200 <__assert_fail@plt+0x1aa0>
   131cc:	ldr	r0, [sp, #36]	; 0x24
   131d0:	ldr	r2, [sp, #24]
   131d4:	ldr	r3, [sp, #28]
   131d8:	str	r7, [sp]
   131dc:	bl	139a0 <__assert_fail@plt+0x2240>
   131e0:	ldr	r0, [sp, #44]	; 0x2c
   131e4:	ldr	r3, [sp, #28]
   131e8:	mov	r2, r9
   131ec:	cmp	r0, #0
   131f0:	movwne	r0, #1
   131f4:	str	r0, [sp]
   131f8:	mov	r0, r6
   131fc:	bl	139a0 <__assert_fail@plt+0x2240>
   13200:	push	{fp, lr}
   13204:	mov	fp, sp
   13208:	sub	sp, sp, #56	; 0x38
   1320c:	mov	r4, r0
   13210:	cmp	r0, #0
   13214:	bne	134a8 <__assert_fail@plt+0x1d48>
   13218:	movw	r1, #59838	; 0xe9be
   1321c:	mov	r0, #0
   13220:	mov	r2, #5
   13224:	movt	r1, #2
   13228:	bl	114d8 <dcgettext@plt>
   1322c:	mov	r1, r0
   13230:	movw	r0, #688	; 0x2b0
   13234:	movt	r0, #4
   13238:	ldr	r2, [r0]
   1323c:	mov	r0, #1
   13240:	bl	11688 <__printf_chk@plt>
   13244:	movw	r1, #59877	; 0xe9e5
   13248:	mov	r0, #0
   1324c:	mov	r2, #5
   13250:	movt	r1, #2
   13254:	bl	114d8 <dcgettext@plt>
   13258:	movw	r7, #444	; 0x1bc
   1325c:	movt	r7, #4
   13260:	ldr	r1, [r7]
   13264:	bl	113dc <fputs_unlocked@plt>
   13268:	movw	r1, #60011	; 0xea6b
   1326c:	mov	r0, #0
   13270:	mov	r2, #5
   13274:	movt	r1, #2
   13278:	bl	114d8 <dcgettext@plt>
   1327c:	ldr	r1, [r7]
   13280:	bl	113dc <fputs_unlocked@plt>
   13284:	movw	r1, #62006	; 0xf236
   13288:	mov	r0, #0
   1328c:	mov	r2, #5
   13290:	movt	r1, #2
   13294:	bl	114d8 <dcgettext@plt>
   13298:	ldr	r1, [r7]
   1329c:	bl	113dc <fputs_unlocked@plt>
   132a0:	movw	r1, #60046	; 0xea8e
   132a4:	mov	r0, #0
   132a8:	mov	r2, #5
   132ac:	movt	r1, #2
   132b0:	bl	114d8 <dcgettext@plt>
   132b4:	ldr	r1, [r7]
   132b8:	bl	113dc <fputs_unlocked@plt>
   132bc:	movw	r1, #60234	; 0xeb4a
   132c0:	mov	r0, #0
   132c4:	mov	r2, #5
   132c8:	movt	r1, #2
   132cc:	bl	114d8 <dcgettext@plt>
   132d0:	ldr	r1, [r7]
   132d4:	bl	113dc <fputs_unlocked@plt>
   132d8:	movw	r1, #60300	; 0xeb8c
   132dc:	mov	r0, #0
   132e0:	mov	r2, #5
   132e4:	movt	r1, #2
   132e8:	bl	114d8 <dcgettext@plt>
   132ec:	ldr	r1, [r7]
   132f0:	bl	113dc <fputs_unlocked@plt>
   132f4:	movw	r1, #60499	; 0xec53
   132f8:	mov	r0, #0
   132fc:	mov	r2, #5
   13300:	movt	r1, #2
   13304:	bl	114d8 <dcgettext@plt>
   13308:	ldr	r1, [r7]
   1330c:	bl	113dc <fputs_unlocked@plt>
   13310:	movw	r1, #60544	; 0xec80
   13314:	mov	r0, #0
   13318:	mov	r2, #5
   1331c:	movt	r1, #2
   13320:	bl	114d8 <dcgettext@plt>
   13324:	ldr	r1, [r7]
   13328:	bl	113dc <fputs_unlocked@plt>
   1332c:	movw	r1, #60598	; 0xecb6
   13330:	mov	r0, #0
   13334:	mov	r2, #5
   13338:	movt	r1, #2
   1333c:	bl	114d8 <dcgettext@plt>
   13340:	ldr	r1, [r7]
   13344:	bl	113dc <fputs_unlocked@plt>
   13348:	movw	r0, #62568	; 0xf468
   1334c:	mov	r2, #48	; 0x30
   13350:	mov	r6, sp
   13354:	movw	r5, #59698	; 0xe932
   13358:	movt	r0, #2
   1335c:	movt	r5, #2
   13360:	add	r1, r0, #32
   13364:	add	r3, r0, #16
   13368:	vld1.64	{d18-d19}, [r0], r2
   1336c:	vld1.64	{d16-d17}, [r1]
   13370:	vld1.64	{d20-d21}, [r3]
   13374:	vldr	d22, [r0]
   13378:	add	r1, r6, #32
   1337c:	add	r0, r6, #16
   13380:	vst1.64	{d16-d17}, [r1]
   13384:	movw	r1, #62081	; 0xf281
   13388:	vst1.64	{d20-d21}, [r0]
   1338c:	mov	r0, r6
   13390:	movt	r1, #2
   13394:	vst1.64	{d18-d19}, [r0], r2
   13398:	vstr	d22, [r0]
   1339c:	mov	r0, r5
   133a0:	bl	11418 <strcmp@plt>
   133a4:	cmp	r0, #0
   133a8:	ldrne	r1, [r6, #8]!
   133ac:	cmpne	r1, #0
   133b0:	bne	1339c <__assert_fail@plt+0x1c3c>
   133b4:	movw	r1, #62176	; 0xf2e0
   133b8:	ldr	r6, [r6, #4]
   133bc:	mov	r0, #0
   133c0:	mov	r2, #5
   133c4:	movt	r1, #2
   133c8:	bl	114d8 <dcgettext@plt>
   133cc:	movw	r2, #59705	; 0xe939
   133d0:	movw	r3, #62199	; 0xf2f7
   133d4:	mov	r1, r0
   133d8:	mov	r0, #1
   133dc:	movt	r2, #2
   133e0:	movt	r3, #2
   133e4:	bl	11688 <__printf_chk@plt>
   133e8:	cmp	r6, #0
   133ec:	mov	r0, #5
   133f0:	mov	r1, #0
   133f4:	moveq	r6, r5
   133f8:	bl	116d0 <setlocale@plt>
   133fc:	cmp	r0, #0
   13400:	beq	13438 <__assert_fail@plt+0x1cd8>
   13404:	movw	r1, #62239	; 0xf31f
   13408:	mov	r2, #3
   1340c:	movt	r1, #2
   13410:	bl	11730 <strncmp@plt>
   13414:	cmp	r0, #0
   13418:	beq	13438 <__assert_fail@plt+0x1cd8>
   1341c:	movw	r1, #62243	; 0xf323
   13420:	mov	r0, #0
   13424:	mov	r2, #5
   13428:	movt	r1, #2
   1342c:	bl	114d8 <dcgettext@plt>
   13430:	ldr	r1, [r7]
   13434:	bl	113dc <fputs_unlocked@plt>
   13438:	movw	r1, #62314	; 0xf36a
   1343c:	mov	r0, #0
   13440:	mov	r2, #5
   13444:	movt	r1, #2
   13448:	bl	114d8 <dcgettext@plt>
   1344c:	movw	r2, #62199	; 0xf2f7
   13450:	mov	r1, r0
   13454:	mov	r0, #1
   13458:	mov	r3, r5
   1345c:	movt	r2, #2
   13460:	bl	11688 <__printf_chk@plt>
   13464:	movw	r1, #62341	; 0xf385
   13468:	mov	r0, #0
   1346c:	mov	r2, #5
   13470:	movt	r1, #2
   13474:	bl	114d8 <dcgettext@plt>
   13478:	mov	r1, r0
   1347c:	movw	r0, #62109	; 0xf29d
   13480:	movw	r3, #61035	; 0xee6b
   13484:	cmp	r6, r5
   13488:	mov	r2, r6
   1348c:	movt	r0, #2
   13490:	movt	r3, #2
   13494:	moveq	r3, r0
   13498:	mov	r0, #1
   1349c:	bl	11688 <__printf_chk@plt>
   134a0:	mov	r0, r4
   134a4:	bl	11610 <exit@plt>
   134a8:	movw	r0, #440	; 0x1b8
   134ac:	movw	r1, #59799	; 0xe997
   134b0:	mov	r2, #5
   134b4:	movt	r0, #4
   134b8:	movt	r1, #2
   134bc:	ldr	r5, [r0]
   134c0:	mov	r0, #0
   134c4:	bl	114d8 <dcgettext@plt>
   134c8:	mov	r2, r0
   134cc:	movw	r0, #688	; 0x2b0
   134d0:	mov	r1, #1
   134d4:	movt	r0, #4
   134d8:	ldr	r3, [r0]
   134dc:	mov	r0, r5
   134e0:	bl	116a0 <__fprintf_chk@plt>
   134e4:	mov	r0, r4
   134e8:	bl	11610 <exit@plt>
   134ec:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   134f0:	add	fp, sp, #28
   134f4:	sub	sp, sp, #12
   134f8:	movw	r6, #584	; 0x248
   134fc:	mov	r8, r0
   13500:	movt	r6, #4
   13504:	ldrb	r0, [r6, #1]
   13508:	cmp	r0, #0
   1350c:	beq	135a0 <__assert_fail@plt+0x1e40>
   13510:	ldr	r7, [r6, #40]	; 0x28
   13514:	cmp	r7, #1
   13518:	blt	13598 <__assert_fail@plt+0x1e38>
   1351c:	movw	r9, #344	; 0x158
   13520:	movw	sl, #61055	; 0xee7f
   13524:	movt	r9, #4
   13528:	movt	sl, #2
   1352c:	b	13558 <__assert_fail@plt+0x1df8>
   13530:	ldr	r1, [r9]
   13534:	mvn	r2, #0
   13538:	mov	r3, sl
   1353c:	stm	sp, {r1, r7}
   13540:	mov	r1, #1
   13544:	bl	11658 <__sprintf_chk@plt>
   13548:	ldr	r0, [r6, #28]
   1354c:	bl	114e4 <unlink@plt>
   13550:	cmp	r7, #0
   13554:	ble	13598 <__assert_fail@plt+0x1e38>
   13558:	ldr	r0, [r6, #28]
   1355c:	ldr	r1, [r6, #20]
   13560:	bl	11568 <strcpy@plt>
   13564:	ldr	r4, [r6, #24]
   13568:	ldr	r5, [r6, #28]
   1356c:	ldr	r0, [r6, #20]
   13570:	bl	11628 <strlen@plt>
   13574:	add	r0, r5, r0
   13578:	sub	r7, r7, #1
   1357c:	cmp	r4, #0
   13580:	beq	13530 <__assert_fail@plt+0x1dd0>
   13584:	ldr	r3, [r6, #24]
   13588:	str	r7, [sp]
   1358c:	mov	r1, #1
   13590:	mvn	r2, #0
   13594:	b	13544 <__assert_fail@plt+0x1de4>
   13598:	mov	r0, #0
   1359c:	str	r0, [r6, #40]	; 0x28
   135a0:	mov	r0, r8
   135a4:	mov	r1, #0
   135a8:	bl	114c0 <signal@plt>
   135ac:	mov	r0, r8
   135b0:	sub	sp, fp, #28
   135b4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   135b8:	b	113f4 <raise@plt>
   135bc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   135c0:	add	fp, sp, #28
   135c4:	sub	sp, sp, #140	; 0x8c
   135c8:	bl	136e8 <__assert_fail@plt+0x1f88>
   135cc:	movw	r1, #456	; 0x1c8
   135d0:	add	r2, sp, #12
   135d4:	mov	r0, #0
   135d8:	movt	r1, #4
   135dc:	bl	11448 <sigprocmask@plt>
   135e0:	movw	r5, #584	; 0x248
   135e4:	movt	r5, #4
   135e8:	ldrb	r0, [r5, #1]
   135ec:	cmp	r0, #0
   135f0:	beq	136d0 <__assert_fail@plt+0x1f70>
   135f4:	ldr	r4, [r5, #40]	; 0x28
   135f8:	cmp	r4, #1
   135fc:	blt	136c8 <__assert_fail@plt+0x1f68>
   13600:	movw	sl, #344	; 0x158
   13604:	movw	r9, #61055	; 0xee7f
   13608:	movw	r8, #61575	; 0xf087
   1360c:	movt	sl, #4
   13610:	movt	r9, #2
   13614:	movt	r8, #2
   13618:	b	13624 <__assert_fail@plt+0x1ec4>
   1361c:	cmp	r4, #0
   13620:	ble	136c8 <__assert_fail@plt+0x1f68>
   13624:	ldr	r0, [r5, #28]
   13628:	ldr	r1, [r5, #20]
   1362c:	bl	11568 <strcpy@plt>
   13630:	ldr	r6, [r5, #24]
   13634:	ldr	r7, [r5, #28]
   13638:	ldr	r0, [r5, #20]
   1363c:	bl	11628 <strlen@plt>
   13640:	add	r0, r7, r0
   13644:	sub	r4, r4, #1
   13648:	cmp	r6, #0
   1364c:	beq	13664 <__assert_fail@plt+0x1f04>
   13650:	ldr	r3, [r5, #24]
   13654:	str	r4, [sp]
   13658:	mov	r1, #1
   1365c:	mvn	r2, #0
   13660:	b	13678 <__assert_fail@plt+0x1f18>
   13664:	ldr	r1, [sl]
   13668:	mvn	r2, #0
   1366c:	mov	r3, r9
   13670:	stm	sp, {r1, r4}
   13674:	mov	r1, #1
   13678:	bl	11658 <__sprintf_chk@plt>
   1367c:	ldr	r6, [r5, #28]
   13680:	mov	r0, r6
   13684:	bl	114e4 <unlink@plt>
   13688:	cmp	r0, #0
   1368c:	beq	1361c <__assert_fail@plt+0x1ebc>
   13690:	bl	11640 <__errno_location@plt>
   13694:	ldr	r7, [r0]
   13698:	cmp	r7, #2
   1369c:	beq	1361c <__assert_fail@plt+0x1ebc>
   136a0:	mov	r0, #0
   136a4:	mov	r1, #3
   136a8:	mov	r2, r6
   136ac:	bl	16368 <__assert_fail@plt+0x4c08>
   136b0:	mov	r3, r0
   136b4:	mov	r0, #0
   136b8:	mov	r1, r7
   136bc:	mov	r2, r8
   136c0:	bl	1158c <error@plt>
   136c4:	b	1361c <__assert_fail@plt+0x1ebc>
   136c8:	mov	r0, #0
   136cc:	str	r0, [r5, #40]	; 0x28
   136d0:	add	r1, sp, #12
   136d4:	mov	r0, #2
   136d8:	mov	r2, #0
   136dc:	bl	11448 <sigprocmask@plt>
   136e0:	sub	sp, fp, #28
   136e4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   136e8:	push	{r4, r5, r6, r7, fp, lr}
   136ec:	add	fp, sp, #16
   136f0:	sub	sp, sp, #128	; 0x80
   136f4:	movw	r7, #584	; 0x248
   136f8:	movt	r7, #4
   136fc:	ldr	r0, [r7, #32]
   13700:	cmp	r0, #0
   13704:	beq	137f8 <__assert_fail@plt+0x2098>
   13708:	ldrb	r1, [r0]
   1370c:	tst	r1, #32
   13710:	bne	13800 <__assert_fail@plt+0x20a0>
   13714:	bl	142b0 <__assert_fail@plt+0x2b50>
   13718:	cmp	r0, #0
   1371c:	bne	13844 <__assert_fail@plt+0x20e4>
   13720:	ldrd	r0, [r7, #64]	; 0x40
   13724:	orrs	r2, r0, r1
   13728:	bne	137b8 <__assert_fail@plt+0x2058>
   1372c:	ldrb	r2, [r7, #3]
   13730:	cmp	r2, #1
   13734:	bne	137b8 <__assert_fail@plt+0x2058>
   13738:	movw	r1, #456	; 0x1c8
   1373c:	mov	r5, sp
   13740:	mov	r0, #0
   13744:	movt	r1, #4
   13748:	mov	r2, r5
   1374c:	bl	11448 <sigprocmask@plt>
   13750:	ldr	r0, [r7, #36]	; 0x24
   13754:	bl	114e4 <unlink@plt>
   13758:	mov	r6, r0
   1375c:	bl	11640 <__errno_location@plt>
   13760:	ldr	r4, [r0]
   13764:	ldr	r0, [r7, #40]	; 0x28
   13768:	mov	r1, r5
   1376c:	mov	r2, #0
   13770:	sub	r0, r0, #1
   13774:	str	r0, [r7, #40]	; 0x28
   13778:	mov	r0, #2
   1377c:	bl	11448 <sigprocmask@plt>
   13780:	cmp	r6, #0
   13784:	cmpne	r4, #2
   13788:	beq	137f0 <__assert_fail@plt+0x2090>
   1378c:	ldr	r2, [r7, #36]	; 0x24
   13790:	mov	r0, #0
   13794:	mov	r1, #3
   13798:	bl	16368 <__assert_fail@plt+0x4c08>
   1379c:	movw	r2, #61575	; 0xf087
   137a0:	mov	r3, r0
   137a4:	mov	r0, #0
   137a8:	mov	r1, r4
   137ac:	movt	r2, #2
   137b0:	bl	1158c <error@plt>
   137b4:	b	137f0 <__assert_fail@plt+0x2090>
   137b8:	ldrb	r2, [r7]
   137bc:	cmp	r2, #0
   137c0:	bne	137f0 <__assert_fail@plt+0x2090>
   137c4:	movw	r2, #444	; 0x1bc
   137c8:	movt	r2, #4
   137cc:	ldr	r4, [r2]
   137d0:	mov	r2, sp
   137d4:	bl	14590 <__assert_fail@plt+0x2e30>
   137d8:	movw	r2, #63489	; 0xf801
   137dc:	mov	r3, r0
   137e0:	mov	r0, r4
   137e4:	mov	r1, #1
   137e8:	movt	r2, #2
   137ec:	bl	116a0 <__fprintf_chk@plt>
   137f0:	mov	r0, #0
   137f4:	str	r0, [r7, #32]
   137f8:	sub	sp, fp, #16
   137fc:	pop	{r4, r5, r6, r7, fp, pc}
   13800:	movw	r1, #61036	; 0xee6c
   13804:	mov	r0, #0
   13808:	mov	r2, #5
   1380c:	mov	r5, #0
   13810:	movt	r1, #2
   13814:	bl	114d8 <dcgettext@plt>
   13818:	ldr	r1, [r7, #36]	; 0x24
   1381c:	mov	r4, r0
   13820:	mov	r0, #4
   13824:	bl	160ec <__assert_fail@plt+0x498c>
   13828:	mov	r3, r0
   1382c:	mov	r0, #0
   13830:	mov	r1, #0
   13834:	mov	r2, r4
   13838:	bl	1158c <error@plt>
   1383c:	str	r5, [r7, #32]
   13840:	bl	11898 <__assert_fail@plt+0x138>
   13844:	bl	11640 <__errno_location@plt>
   13848:	ldr	r2, [r7, #36]	; 0x24
   1384c:	ldr	r4, [r0]
   13850:	mov	r0, #0
   13854:	mov	r1, #3
   13858:	mov	r5, #0
   1385c:	bl	16368 <__assert_fail@plt+0x4c08>
   13860:	movw	r2, #61575	; 0xf087
   13864:	mov	r3, r0
   13868:	mov	r0, #0
   1386c:	mov	r1, r4
   13870:	movt	r2, #2
   13874:	bl	1158c <error@plt>
   13878:	str	r5, [r7, #32]
   1387c:	bl	11898 <__assert_fail@plt+0x138>
   13880:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   13884:	add	fp, sp, #24
   13888:	sub	sp, sp, #136	; 0x88
   1388c:	movw	r7, #584	; 0x248
   13890:	movt	r7, #4
   13894:	ldr	r4, [r7, #40]	; 0x28
   13898:	ldr	r0, [r7, #28]
   1389c:	ldr	r1, [r7, #20]
   138a0:	bl	11568 <strcpy@plt>
   138a4:	ldr	r5, [r7, #24]
   138a8:	ldr	r6, [r7, #28]
   138ac:	ldr	r0, [r7, #20]
   138b0:	bl	11628 <strlen@plt>
   138b4:	add	r0, r6, r0
   138b8:	cmp	r5, #0
   138bc:	beq	138cc <__assert_fail@plt+0x216c>
   138c0:	ldr	r3, [r7, #24]
   138c4:	str	r4, [sp]
   138c8:	b	138e4 <__assert_fail@plt+0x2184>
   138cc:	movw	r1, #344	; 0x158
   138d0:	movw	r3, #61055	; 0xee7f
   138d4:	movt	r1, #4
   138d8:	movt	r3, #2
   138dc:	ldr	r1, [r1]
   138e0:	stm	sp, {r1, r4}
   138e4:	mov	r1, #1
   138e8:	mvn	r2, #0
   138ec:	bl	11658 <__sprintf_chk@plt>
   138f0:	ldr	r2, [r7, #28]
   138f4:	cmn	r4, #-2147483647	; 0x80000001
   138f8:	str	r2, [r7, #36]	; 0x24
   138fc:	beq	13998 <__assert_fail@plt+0x2238>
   13900:	movw	r1, #456	; 0x1c8
   13904:	add	r5, sp, #8
   13908:	mov	r0, #0
   1390c:	mov	r9, #0
   13910:	movt	r1, #4
   13914:	mov	r2, r5
   13918:	bl	11448 <sigprocmask@plt>
   1391c:	ldr	r0, [r7, #36]	; 0x24
   13920:	movw	r1, #62004	; 0xf234
   13924:	movt	r1, #2
   13928:	bl	14410 <__assert_fail@plt+0x2cb0>
   1392c:	cmp	r0, #0
   13930:	mov	r6, r0
   13934:	str	r0, [r7, #32]
   13938:	addne	r4, r4, #1
   1393c:	bl	11640 <__errno_location@plt>
   13940:	ldr	r8, [r0]
   13944:	mov	r0, #2
   13948:	mov	r1, r5
   1394c:	mov	r2, #0
   13950:	str	r4, [r7, #40]	; 0x28
   13954:	bl	11448 <sigprocmask@plt>
   13958:	cmp	r6, #0
   1395c:	strne	r9, [r7, #64]	; 0x40
   13960:	strne	r9, [r7, #68]	; 0x44
   13964:	subne	sp, fp, #24
   13968:	popne	{r4, r5, r6, r7, r8, r9, fp, pc}
   1396c:	ldr	r2, [r7, #36]	; 0x24
   13970:	mov	r0, #0
   13974:	mov	r1, #3
   13978:	bl	16368 <__assert_fail@plt+0x4c08>
   1397c:	movw	r2, #61575	; 0xf087
   13980:	mov	r3, r0
   13984:	mov	r0, #0
   13988:	mov	r1, r8
   1398c:	movt	r2, #2
   13990:	bl	1158c <error@plt>
   13994:	bl	11898 <__assert_fail@plt+0x138>
   13998:	mov	r8, #75	; 0x4b
   1399c:	b	13970 <__assert_fail@plt+0x2210>
   139a0:	push	{fp, lr}
   139a4:	mov	fp, sp
   139a8:	sub	sp, sp, #32
   139ac:	movw	r9, #440	; 0x1b8
   139b0:	movw	r1, #61910	; 0xf1d6
   139b4:	mov	r5, r2
   139b8:	mov	r6, r0
   139bc:	mov	r0, #0
   139c0:	mov	r2, #5
   139c4:	mov	r8, r3
   139c8:	movt	r9, #4
   139cc:	movt	r1, #2
   139d0:	ldr	r7, [r9]
   139d4:	bl	114d8 <dcgettext@plt>
   139d8:	movw	r1, #584	; 0x248
   139dc:	mov	r4, r0
   139e0:	ldr	r0, [r6, #24]
   139e4:	movt	r1, #4
   139e8:	ldr	r1, [r1, #8]
   139ec:	ldr	r0, [r1, r0, lsl #2]
   139f0:	movw	r1, #688	; 0x2b0
   139f4:	movt	r1, #4
   139f8:	ldr	r6, [r1]
   139fc:	bl	16614 <__assert_fail@plt+0x4eb4>
   13a00:	str	r0, [sp]
   13a04:	mov	r0, r7
   13a08:	mov	r1, #1
   13a0c:	mov	r2, r4
   13a10:	mov	r3, r6
   13a14:	bl	116a0 <__fprintf_chk@plt>
   13a18:	ldr	r7, [fp, #8]
   13a1c:	orrs	r0, r5, r8
   13a20:	beq	13a70 <__assert_fail@plt+0x2310>
   13a24:	movw	r1, #61934	; 0xf1ee
   13a28:	ldr	r4, [r9]
   13a2c:	mov	r0, #0
   13a30:	mov	r2, #5
   13a34:	movt	r1, #2
   13a38:	bl	114d8 <dcgettext@plt>
   13a3c:	mov	r6, r0
   13a40:	add	r2, sp, #11
   13a44:	mov	r0, r5
   13a48:	mov	r1, r8
   13a4c:	bl	14590 <__assert_fail@plt+0x2e30>
   13a50:	mov	r3, r0
   13a54:	mov	r0, r4
   13a58:	mov	r1, #1
   13a5c:	mov	r2, r6
   13a60:	bl	116a0 <__fprintf_chk@plt>
   13a64:	cmp	r7, #0
   13a68:	beq	13a94 <__assert_fail@plt+0x2334>
   13a6c:	b	13aa4 <__assert_fail@plt+0x2344>
   13a70:	ldr	r0, [r9]
   13a74:	movw	r2, #61034	; 0xee6a
   13a78:	mov	r1, #1
   13a7c:	movt	r2, #2
   13a80:	bl	116a0 <__fprintf_chk@plt>
   13a84:	cmp	r7, #0
   13a88:	beq	13a94 <__assert_fail@plt+0x2334>
   13a8c:	b	13aa4 <__assert_fail@plt+0x2344>
   13a90:	bl	13ba4 <__assert_fail@plt+0x2444>
   13a94:	bl	13aa8 <__assert_fail@plt+0x2348>
   13a98:	cmp	r0, #0
   13a9c:	bne	13a90 <__assert_fail@plt+0x2330>
   13aa0:	bl	136e8 <__assert_fail@plt+0x1f88>
   13aa4:	bl	11898 <__assert_fail@plt+0x138>
   13aa8:	push	{r4, r5, r6, r7, fp, lr}
   13aac:	add	fp, sp, #16
   13ab0:	movw	r5, #584	; 0x248
   13ab4:	movt	r5, #4
   13ab8:	ldr	r4, [r5, #60]	; 0x3c
   13abc:	cmp	r4, #0
   13ac0:	beq	13afc <__assert_fail@plt+0x239c>
   13ac4:	ldr	r0, [r4, #32]
   13ac8:	cmp	r0, #0
   13acc:	beq	13ae4 <__assert_fail@plt+0x2384>
   13ad0:	ldr	r6, [r0, #652]	; 0x28c
   13ad4:	bl	144c0 <__assert_fail@plt+0x2d60>
   13ad8:	cmp	r6, #0
   13adc:	mov	r0, r6
   13ae0:	bne	13ad0 <__assert_fail@plt+0x2370>
   13ae4:	ldr	r0, [r4, #28]
   13ae8:	bl	144c0 <__assert_fail@plt+0x2d60>
   13aec:	mov	r0, r4
   13af0:	bl	144c0 <__assert_fail@plt+0x2d60>
   13af4:	mov	r0, #0
   13af8:	str	r0, [r5, #60]	; 0x3c
   13afc:	ldr	r0, [r5, #48]	; 0x30
   13b00:	cmp	r0, #0
   13b04:	bne	13b1c <__assert_fail@plt+0x23bc>
   13b08:	mov	r4, #0
   13b0c:	bl	13c3c <__assert_fail@plt+0x24dc>
   13b10:	cmp	r0, #0
   13b14:	beq	13b88 <__assert_fail@plt+0x2428>
   13b18:	ldr	r0, [r5, #48]	; 0x30
   13b1c:	mov	r1, r0
   13b20:	ldr	r4, [r5, #80]	; 0x50
   13b24:	ldr	r7, [r5, #84]	; 0x54
   13b28:	ldr	r2, [r1, #16]!
   13b2c:	ldr	r3, [r1, #4]
   13b30:	subs	r6, r4, r2
   13b34:	sbcs	r7, r7, r3
   13b38:	strdlt	r2, [r5, #80]	; 0x50
   13b3c:	adds	r2, r2, #1
   13b40:	adc	r3, r3, #0
   13b44:	strd	r2, [r1]
   13b48:	ldr	r1, [r0, #36]	; 0x24
   13b4c:	ldr	r3, [r1, #8]
   13b50:	ldr	r2, [r1]
   13b54:	add	r7, r3, #1
   13b58:	add	r3, r1, r3, lsl #3
   13b5c:	cmp	r7, r2
   13b60:	str	r7, [r1, #8]
   13b64:	add	r4, r3, #12
   13b68:	bne	13b88 <__assert_fail@plt+0x2428>
   13b6c:	ldr	r1, [r1, #652]	; 0x28c
   13b70:	cmp	r1, #0
   13b74:	str	r1, [r0, #36]	; 0x24
   13b78:	beq	13b90 <__assert_fail@plt+0x2430>
   13b7c:	ldr	r1, [r1]
   13b80:	cmp	r1, #0
   13b84:	beq	13b90 <__assert_fail@plt+0x2430>
   13b88:	mov	r0, r4
   13b8c:	pop	{r4, r5, r6, r7, fp, pc}
   13b90:	str	r0, [r5, #60]	; 0x3c
   13b94:	ldr	r0, [r0, #40]	; 0x28
   13b98:	str	r0, [r5, #48]	; 0x30
   13b9c:	mov	r0, r4
   13ba0:	pop	{r4, r5, r6, r7, fp, pc}
   13ba4:	push	{r4, r5, r6, r7, fp, lr}
   13ba8:	add	fp, sp, #16
   13bac:	movw	r6, #584	; 0x248
   13bb0:	mov	r4, r0
   13bb4:	ldr	r2, [r0]
   13bb8:	ldr	r0, [r0, #4]
   13bbc:	mov	r1, #1
   13bc0:	movt	r6, #4
   13bc4:	ldr	r3, [r6, #32]
   13bc8:	bl	114cc <fwrite_unlocked@plt>
   13bcc:	ldr	r1, [r4]
   13bd0:	cmp	r0, r1
   13bd4:	bne	13bf0 <__assert_fail@plt+0x2490>
   13bd8:	ldr	r0, [r6, #64]	; 0x40
   13bdc:	ldr	r3, [r6, #68]	; 0x44
   13be0:	adds	r0, r0, r1
   13be4:	adc	r1, r3, r1, asr #31
   13be8:	strd	r0, [r6, #64]	; 0x40
   13bec:	pop	{r4, r5, r6, r7, fp, pc}
   13bf0:	bl	11640 <__errno_location@plt>
   13bf4:	movw	r1, #61036	; 0xee6c
   13bf8:	ldr	r4, [r0]
   13bfc:	mov	r0, #0
   13c00:	mov	r2, #5
   13c04:	mov	r7, #0
   13c08:	movt	r1, #2
   13c0c:	bl	114d8 <dcgettext@plt>
   13c10:	ldr	r1, [r6, #36]	; 0x24
   13c14:	mov	r5, r0
   13c18:	mov	r0, #4
   13c1c:	bl	160ec <__assert_fail@plt+0x498c>
   13c20:	mov	r3, r0
   13c24:	mov	r0, #0
   13c28:	mov	r1, r4
   13c2c:	mov	r2, r5
   13c30:	bl	1158c <error@plt>
   13c34:	str	r7, [r6, #32]
   13c38:	bl	11898 <__assert_fail@plt+0x138>
   13c3c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13c40:	add	fp, sp, #28
   13c44:	sub	sp, sp, #12
   13c48:	movw	r8, #584	; 0x248
   13c4c:	mov	r0, #0
   13c50:	movt	r8, #4
   13c54:	ldrb	r1, [r8, #4]
   13c58:	cmp	r1, #0
   13c5c:	bne	14048 <__assert_fail@plt+0x28e8>
   13c60:	ldr	r0, [r8, #52]	; 0x34
   13c64:	movw	r1, #8190	; 0x1ffe
   13c68:	movw	r5, #8191	; 0x1fff
   13c6c:	mov	r9, #0
   13c70:	cmp	r0, r1
   13c74:	addgt	r5, r0, #1
   13c78:	b	13c90 <__assert_fail@plt+0x2530>
   13c7c:	ldr	r0, [r4, #28]
   13c80:	lsl	r5, r5, #1
   13c84:	bl	144c0 <__assert_fail@plt+0x2d60>
   13c88:	mov	r0, r4
   13c8c:	bl	144c0 <__assert_fail@plt+0x2d60>
   13c90:	mov	r0, #48	; 0x30
   13c94:	bl	2b3d8 <__assert_fail@plt+0x19c78>
   13c98:	mov	r4, r0
   13c9c:	str	r9, [r0]
   13ca0:	mov	r0, #1
   13ca4:	mov	r2, r5
   13ca8:	mvn	r3, #0
   13cac:	str	r0, [sp]
   13cb0:	mov	r0, #0
   13cb4:	mov	r1, r4
   13cb8:	bl	2b608 <__assert_fail@plt+0x19ea8>
   13cbc:	str	r0, [r4, #28]
   13cc0:	mov	r5, r0
   13cc4:	ldrd	r0, [r8, #88]	; 0x58
   13cc8:	str	r9, [r4, #4]
   13ccc:	str	r9, [r4, #32]
   13cd0:	str	r9, [r4, #40]	; 0x28
   13cd4:	str	r9, [r4, #24]
   13cd8:	str	r9, [r4, #36]	; 0x24
   13cdc:	ldr	r6, [r8, #52]	; 0x34
   13ce0:	adds	r0, r0, #1
   13ce4:	vmov.32	d16[0], r0
   13ce8:	adc	r1, r1, #0
   13cec:	add	r0, r4, #8
   13cf0:	cmp	r6, #0
   13cf4:	str	r0, [sp, #8]
   13cf8:	vmov.32	d16[1], r1
   13cfc:	vorr	d17, d16, d16
   13d00:	vst1.64	{d16-d17}, [r0]
   13d04:	ldr	r7, [r4]
   13d08:	beq	13d34 <__assert_fail@plt+0x25d4>
   13d0c:	ldr	r1, [r8, #56]	; 0x38
   13d10:	mov	r0, r5
   13d14:	mov	r2, r6
   13d18:	bl	11484 <memcpy@plt>
   13d1c:	ldr	r0, [r4, #4]
   13d20:	sub	r7, r7, r6
   13d24:	add	r5, r5, r6
   13d28:	str	r9, [r8, #52]	; 0x34
   13d2c:	add	r0, r0, r6
   13d30:	str	r0, [r4, #4]
   13d34:	subs	r2, r7, #1
   13d38:	mov	r0, #0
   13d3c:	beq	13d5c <__assert_fail@plt+0x25fc>
   13d40:	mov	r0, #0
   13d44:	mov	r1, r5
   13d48:	bl	2aca8 <__assert_fail@plt+0x19548>
   13d4c:	cmp	r0, #0
   13d50:	beq	13d70 <__assert_fail@plt+0x2610>
   13d54:	cmn	r0, #1
   13d58:	beq	140a0 <__assert_fail@plt+0x2940>
   13d5c:	ldr	r1, [r4, #4]
   13d60:	adds	r0, r1, r0
   13d64:	str	r0, [r4, #4]
   13d68:	bne	13d8c <__assert_fail@plt+0x262c>
   13d6c:	b	13f84 <__assert_fail@plt+0x2824>
   13d70:	mov	r0, #1
   13d74:	strb	r0, [r8, #4]
   13d78:	mov	r0, #0
   13d7c:	ldr	r1, [r4, #4]
   13d80:	adds	r0, r1, r0
   13d84:	str	r0, [r4, #4]
   13d88:	beq	13f84 <__assert_fail@plt+0x2824>
   13d8c:	ldr	r5, [r4, #28]
   13d90:	mov	r1, #10
   13d94:	mov	r8, r5
   13d98:	strb	r1, [r8, r0]!
   13d9c:	mov	r0, r5
   13da0:	mov	r1, #10
   13da4:	bl	11520 <rawmemchr@plt>
   13da8:	cmp	r0, r8
   13dac:	beq	13e90 <__assert_fail@plt+0x2730>
   13db0:	mov	r6, r0
   13db4:	mov	r9, #0
   13db8:	ldr	r0, [r4, #32]
   13dbc:	sub	r7, r6, r5
   13dc0:	cmp	r0, #0
   13dc4:	bne	13e18 <__assert_fail@plt+0x26b8>
   13dc8:	b	13e30 <__assert_fail@plt+0x26d0>
   13dcc:	ldr	r2, [r0, #4]
   13dd0:	add	r1, r1, #1
   13dd4:	add	r3, r0, r2, lsl #3
   13dd8:	add	r2, r2, #1
   13ddc:	str	sl, [r3, #12]
   13de0:	str	r5, [r3, #16]
   13de4:	add	r5, r6, #1
   13de8:	stm	r0, {r1, r2}
   13dec:	mov	r1, #10
   13df0:	mov	r0, r5
   13df4:	bl	11520 <rawmemchr@plt>
   13df8:	mov	r6, r0
   13dfc:	add	r9, r9, #1
   13e00:	cmp	r0, r8
   13e04:	beq	13e94 <__assert_fail@plt+0x2734>
   13e08:	ldr	r0, [r4, #32]
   13e0c:	sub	r7, r6, r5
   13e10:	cmp	r0, #0
   13e14:	beq	13e30 <__assert_fail@plt+0x26d0>
   13e18:	ldr	r0, [r4, #36]	; 0x24
   13e1c:	ldr	r1, [r0]
   13e20:	add	sl, r7, #1
   13e24:	cmp	r1, #80	; 0x50
   13e28:	bne	13dcc <__assert_fail@plt+0x266c>
   13e2c:	b	13e64 <__assert_fail@plt+0x2704>
   13e30:	mov	r0, #656	; 0x290
   13e34:	bl	2b3d8 <__assert_fail@plt+0x19c78>
   13e38:	mov	r1, #0
   13e3c:	str	r0, [r4, #32]
   13e40:	str	r0, [r4, #36]	; 0x24
   13e44:	str	r1, [r0, #652]	; 0x28c
   13e48:	str	r1, [r0]
   13e4c:	str	r1, [r0, #4]
   13e50:	str	r1, [r0, #8]
   13e54:	ldr	r1, [r0]
   13e58:	add	sl, r7, #1
   13e5c:	cmp	r1, #80	; 0x50
   13e60:	bne	13dcc <__assert_fail@plt+0x266c>
   13e64:	mov	r0, #656	; 0x290
   13e68:	bl	2b3d8 <__assert_fail@plt+0x19c78>
   13e6c:	ldr	r2, [r4, #36]	; 0x24
   13e70:	mov	r1, #0
   13e74:	str	r1, [r0, #652]	; 0x28c
   13e78:	str	r1, [r0]
   13e7c:	str	r1, [r0, #4]
   13e80:	str	r1, [r0, #8]
   13e84:	str	r0, [r2, #652]	; 0x28c
   13e88:	str	r0, [r4, #36]	; 0x24
   13e8c:	b	13dcc <__assert_fail@plt+0x266c>
   13e90:	mov	r9, #0
   13e94:	subs	r6, r8, r5
   13e98:	beq	13f1c <__assert_fail@plt+0x27bc>
   13e9c:	movw	r8, #584	; 0x248
   13ea0:	ldr	r7, [sp, #8]
   13ea4:	movt	r8, #4
   13ea8:	ldrb	r0, [r8, #4]
   13eac:	cmp	r0, #1
   13eb0:	bne	13f2c <__assert_fail@plt+0x27cc>
   13eb4:	ldr	r0, [r4, #32]
   13eb8:	cmp	r0, #0
   13ebc:	beq	13fe0 <__assert_fail@plt+0x2880>
   13ec0:	ldr	r0, [r4, #36]	; 0x24
   13ec4:	ldr	r1, [r0]
   13ec8:	cmp	r1, #80	; 0x50
   13ecc:	bne	13ef8 <__assert_fail@plt+0x2798>
   13ed0:	mov	r0, #656	; 0x290
   13ed4:	bl	2b3d8 <__assert_fail@plt+0x19c78>
   13ed8:	ldr	r2, [r4, #36]	; 0x24
   13edc:	mov	r1, #0
   13ee0:	str	r1, [r0, #652]	; 0x28c
   13ee4:	str	r1, [r0]
   13ee8:	str	r1, [r0, #4]
   13eec:	str	r1, [r0, #8]
   13ef0:	str	r0, [r2, #652]	; 0x28c
   13ef4:	str	r0, [r4, #36]	; 0x24
   13ef8:	ldr	r2, [r0, #4]
   13efc:	add	r1, r1, #1
   13f00:	add	r9, r9, #1
   13f04:	add	r3, r0, r2, lsl #3
   13f08:	add	r2, r2, #1
   13f0c:	str	r6, [r3, #12]
   13f10:	str	r5, [r3, #16]
   13f14:	stm	r0, {r1, r2}
   13f18:	b	13f4c <__assert_fail@plt+0x27ec>
   13f1c:	ldr	r7, [sp, #8]
   13f20:	movw	r8, #584	; 0x248
   13f24:	movt	r8, #4
   13f28:	b	13f4c <__assert_fail@plt+0x27ec>
   13f2c:	mov	r0, r5
   13f30:	mov	r1, r6
   13f34:	bl	2b86c <__assert_fail@plt+0x1a10c>
   13f38:	mov	r5, r0
   13f3c:	ldr	r0, [r8, #56]	; 0x38
   13f40:	bl	144c0 <__assert_fail@plt+0x2d60>
   13f44:	str	r6, [r8, #52]	; 0x34
   13f48:	str	r5, [r8, #56]	; 0x38
   13f4c:	ldrd	r0, [r8, #88]	; 0x58
   13f50:	str	r9, [r4, #24]
   13f54:	adds	r2, r0, #1
   13f58:	vmov.32	d16[0], r2
   13f5c:	adc	r3, r1, #0
   13f60:	adds	r0, r0, r9
   13f64:	adc	r1, r1, r9, asr #31
   13f68:	cmp	r9, #0
   13f6c:	mov	r9, #0
   13f70:	strd	r0, [r8, #88]	; 0x58
   13f74:	vmov.32	d16[1], r3
   13f78:	vorr	d17, d16, d16
   13f7c:	vst1.64	{d16-d17}, [r7]
   13f80:	bne	14050 <__assert_fail@plt+0x28f0>
   13f84:	ldrb	r0, [r8, #4]
   13f88:	cmp	r0, #0
   13f8c:	bne	14014 <__assert_fail@plt+0x28b4>
   13f90:	ldr	r5, [r4]
   13f94:	cmn	r5, #1
   13f98:	ble	13fa8 <__assert_fail@plt+0x2848>
   13f9c:	cmp	r5, #1073741824	; 0x40000000
   13fa0:	blt	13fbc <__assert_fail@plt+0x285c>
   13fa4:	b	1409c <__assert_fail@plt+0x293c>
   13fa8:	beq	13fbc <__assert_fail@plt+0x285c>
   13fac:	mov	r0, #-2147483648	; 0x80000000
   13fb0:	sdiv	r0, r0, r5
   13fb4:	cmp	r0, #2
   13fb8:	blt	1409c <__assert_fail@plt+0x293c>
   13fbc:	ldr	r0, [r4, #32]
   13fc0:	cmp	r0, #0
   13fc4:	beq	13c7c <__assert_fail@plt+0x251c>
   13fc8:	ldr	r6, [r0, #652]	; 0x28c
   13fcc:	bl	144c0 <__assert_fail@plt+0x2d60>
   13fd0:	cmp	r6, #0
   13fd4:	mov	r0, r6
   13fd8:	bne	13fc8 <__assert_fail@plt+0x2868>
   13fdc:	b	13c7c <__assert_fail@plt+0x251c>
   13fe0:	mov	r0, #656	; 0x290
   13fe4:	bl	2b3d8 <__assert_fail@plt+0x19c78>
   13fe8:	mov	r1, #0
   13fec:	str	r0, [r4, #32]
   13ff0:	str	r0, [r4, #36]	; 0x24
   13ff4:	str	r1, [r0, #652]	; 0x28c
   13ff8:	str	r1, [r0]
   13ffc:	str	r1, [r0, #4]
   14000:	str	r1, [r0, #8]
   14004:	ldr	r1, [r0]
   14008:	cmp	r1, #80	; 0x50
   1400c:	beq	13ed0 <__assert_fail@plt+0x2770>
   14010:	b	13ef8 <__assert_fail@plt+0x2798>
   14014:	ldr	r0, [r4, #32]
   14018:	cmp	r0, #0
   1401c:	beq	14034 <__assert_fail@plt+0x28d4>
   14020:	ldr	r5, [r0, #652]	; 0x28c
   14024:	bl	144c0 <__assert_fail@plt+0x2d60>
   14028:	cmp	r5, #0
   1402c:	mov	r0, r5
   14030:	bne	14020 <__assert_fail@plt+0x28c0>
   14034:	ldr	r0, [r4, #28]
   14038:	bl	144c0 <__assert_fail@plt+0x2d60>
   1403c:	mov	r0, r4
   14040:	bl	144c0 <__assert_fail@plt+0x2d60>
   14044:	mov	r0, #0
   14048:	sub	sp, fp, #28
   1404c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14050:	ldr	r1, [r4, #32]
   14054:	mov	r0, #0
   14058:	str	r1, [r4, #36]	; 0x24
   1405c:	str	r0, [r4, #40]	; 0x28
   14060:	ldr	r0, [r8, #48]	; 0x30
   14064:	cmp	r0, #0
   14068:	beq	1408c <__assert_fail@plt+0x292c>
   1406c:	mov	r1, r0
   14070:	ldr	r0, [r0, #40]	; 0x28
   14074:	cmp	r0, #0
   14078:	bne	1406c <__assert_fail@plt+0x290c>
   1407c:	str	r4, [r1, #40]	; 0x28
   14080:	mov	r0, #1
   14084:	sub	sp, fp, #28
   14088:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1408c:	str	r4, [r8, #48]	; 0x30
   14090:	mov	r0, #1
   14094:	sub	sp, fp, #28
   14098:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1409c:	bl	11860 <__assert_fail@plt+0x100>
   140a0:	bl	11640 <__errno_location@plt>
   140a4:	movw	r1, #59788	; 0xe98c
   140a8:	ldr	r4, [r0]
   140ac:	mov	r0, #0
   140b0:	mov	r2, #5
   140b4:	movt	r1, #2
   140b8:	bl	114d8 <dcgettext@plt>
   140bc:	mov	r2, r0
   140c0:	mov	r0, #0
   140c4:	mov	r1, r4
   140c8:	bl	1158c <error@plt>
   140cc:	bl	11898 <__assert_fail@plt+0x138>
   140d0:	push	{fp, lr}
   140d4:	mov	fp, sp
   140d8:	sub	sp, sp, #32
   140dc:	movw	sl, #440	; 0x1b8
   140e0:	movw	r1, #61971	; 0xf213
   140e4:	mov	r9, r2
   140e8:	mov	r6, r0
   140ec:	mov	r0, #0
   140f0:	mov	r2, #5
   140f4:	mov	r8, r3
   140f8:	movt	sl, #4
   140fc:	movt	r1, #2
   14100:	ldr	r7, [sl]
   14104:	bl	114d8 <dcgettext@plt>
   14108:	mov	r4, r0
   1410c:	movw	r0, #688	; 0x2b0
   14110:	add	r2, sp, #11
   14114:	movt	r0, #4
   14118:	ldr	r5, [r0]
   1411c:	ldrd	r0, [r6, #8]
   14120:	bl	14590 <__assert_fail@plt+0x2e30>
   14124:	bl	16614 <__assert_fail@plt+0x4eb4>
   14128:	str	r0, [sp]
   1412c:	mov	r0, r7
   14130:	mov	r1, #1
   14134:	mov	r2, r4
   14138:	mov	r3, r5
   1413c:	bl	116a0 <__fprintf_chk@plt>
   14140:	ldr	r6, [sl]
   14144:	orrs	r0, r9, r8
   14148:	bne	14164 <__assert_fail@plt+0x2a04>
   1414c:	movw	r2, #61034	; 0xee6a
   14150:	mov	r0, r6
   14154:	mov	r1, #1
   14158:	movt	r2, #2
   1415c:	bl	116a0 <__fprintf_chk@plt>
   14160:	bl	11898 <__assert_fail@plt+0x138>
   14164:	movw	r1, #61934	; 0xf1ee
   14168:	mov	r0, #0
   1416c:	mov	r2, #5
   14170:	movt	r1, #2
   14174:	bl	114d8 <dcgettext@plt>
   14178:	mov	r4, r0
   1417c:	add	r2, sp, #11
   14180:	mov	r0, r9
   14184:	mov	r1, r8
   14188:	bl	14590 <__assert_fail@plt+0x2e30>
   1418c:	mov	r3, r0
   14190:	mov	r0, r6
   14194:	mov	r1, #1
   14198:	mov	r2, r4
   1419c:	bl	116a0 <__fprintf_chk@plt>
   141a0:	bl	11898 <__assert_fail@plt+0x138>
   141a4:	movw	r1, #680	; 0x2a8
   141a8:	movt	r1, #4
   141ac:	str	r0, [r1, #4]
   141b0:	bx	lr
   141b4:	movw	r1, #680	; 0x2a8
   141b8:	movt	r1, #4
   141bc:	strb	r0, [r1]
   141c0:	bx	lr
   141c4:	push	{r4, r5, r6, sl, fp, lr}
   141c8:	add	fp, sp, #16
   141cc:	sub	sp, sp, #8
   141d0:	movw	r0, #444	; 0x1bc
   141d4:	movt	r0, #4
   141d8:	ldr	r0, [r0]
   141dc:	bl	2e110 <__assert_fail@plt+0x1c9b0>
   141e0:	cmp	r0, #0
   141e4:	beq	1420c <__assert_fail@plt+0x2aac>
   141e8:	movw	r5, #680	; 0x2a8
   141ec:	movt	r5, #4
   141f0:	ldrb	r0, [r5]
   141f4:	cmp	r0, #0
   141f8:	beq	14238 <__assert_fail@plt+0x2ad8>
   141fc:	bl	11640 <__errno_location@plt>
   14200:	ldr	r0, [r0]
   14204:	cmp	r0, #32
   14208:	bne	14238 <__assert_fail@plt+0x2ad8>
   1420c:	movw	r0, #440	; 0x1b8
   14210:	movt	r0, #4
   14214:	ldr	r0, [r0]
   14218:	bl	2e110 <__assert_fail@plt+0x1c9b0>
   1421c:	cmp	r0, #0
   14220:	subeq	sp, fp, #16
   14224:	popeq	{r4, r5, r6, sl, fp, pc}
   14228:	movw	r0, #352	; 0x160
   1422c:	movt	r0, #4
   14230:	ldr	r0, [r0]
   14234:	bl	11478 <_exit@plt>
   14238:	movw	r1, #62639	; 0xf4af
   1423c:	mov	r0, #0
   14240:	mov	r2, #5
   14244:	movt	r1, #2
   14248:	bl	114d8 <dcgettext@plt>
   1424c:	ldr	r6, [r5, #4]
   14250:	mov	r4, r0
   14254:	bl	11640 <__errno_location@plt>
   14258:	ldr	r5, [r0]
   1425c:	cmp	r6, #0
   14260:	bne	1427c <__assert_fail@plt+0x2b1c>
   14264:	movw	r2, #61575	; 0xf087
   14268:	mov	r0, #0
   1426c:	mov	r1, r5
   14270:	mov	r3, r4
   14274:	movt	r2, #2
   14278:	b	1429c <__assert_fail@plt+0x2b3c>
   1427c:	mov	r0, r6
   14280:	bl	1628c <__assert_fail@plt+0x4b2c>
   14284:	movw	r2, #62651	; 0xf4bb
   14288:	mov	r3, r0
   1428c:	str	r4, [sp]
   14290:	mov	r0, #0
   14294:	mov	r1, r5
   14298:	movt	r2, #2
   1429c:	bl	1158c <error@plt>
   142a0:	movw	r0, #352	; 0x160
   142a4:	movt	r0, #4
   142a8:	ldr	r0, [r0]
   142ac:	bl	11478 <_exit@plt>
   142b0:	push	{r4, r5, r6, sl, fp, lr}
   142b4:	add	fp, sp, #16
   142b8:	sub	sp, sp, #8
   142bc:	mov	r4, r0
   142c0:	bl	11694 <fileno@plt>
   142c4:	cmn	r0, #1
   142c8:	ble	1433c <__assert_fail@plt+0x2bdc>
   142cc:	mov	r0, r4
   142d0:	bl	115c8 <__freading@plt>
   142d4:	cmp	r0, #0
   142d8:	beq	14304 <__assert_fail@plt+0x2ba4>
   142dc:	mov	r0, r4
   142e0:	bl	11694 <fileno@plt>
   142e4:	mov	r1, #1
   142e8:	mov	r2, #0
   142ec:	mov	r3, #0
   142f0:	str	r1, [sp]
   142f4:	bl	11550 <lseek64@plt>
   142f8:	and	r0, r0, r1
   142fc:	cmn	r0, #1
   14300:	beq	1433c <__assert_fail@plt+0x2bdc>
   14304:	mov	r0, r4
   14308:	bl	143b4 <__assert_fail@plt+0x2c54>
   1430c:	cmp	r0, #0
   14310:	beq	1433c <__assert_fail@plt+0x2bdc>
   14314:	bl	11640 <__errno_location@plt>
   14318:	ldr	r6, [r0]
   1431c:	mov	r5, r0
   14320:	mov	r0, r4
   14324:	bl	116ac <fclose@plt>
   14328:	cmp	r6, #0
   1432c:	strne	r6, [r5]
   14330:	mvnne	r0, #0
   14334:	sub	sp, fp, #16
   14338:	pop	{r4, r5, r6, sl, fp, pc}
   1433c:	mov	r0, r4
   14340:	sub	sp, fp, #16
   14344:	pop	{r4, r5, r6, sl, fp, lr}
   14348:	b	116ac <fclose@plt>
   1434c:	push	{r4, r5, r6, r7, fp, lr}
   14350:	add	fp, sp, #16
   14354:	mov	r5, r0
   14358:	mov	r0, r1
   1435c:	mov	r1, r2
   14360:	mov	r2, r3
   14364:	bl	11598 <open64@plt>
   14368:	mov	r4, r0
   1436c:	cmp	r0, r5
   14370:	beq	143ac <__assert_fail@plt+0x2c4c>
   14374:	cmp	r4, #0
   14378:	bmi	143ac <__assert_fail@plt+0x2c4c>
   1437c:	mov	r0, r4
   14380:	mov	r1, r5
   14384:	bl	114f0 <dup2@plt>
   14388:	mov	r5, r0
   1438c:	bl	11640 <__errno_location@plt>
   14390:	ldr	r7, [r0]
   14394:	mov	r6, r0
   14398:	mov	r0, r4
   1439c:	bl	11748 <close@plt>
   143a0:	mov	r0, r5
   143a4:	str	r7, [r6]
   143a8:	pop	{r4, r5, r6, r7, fp, pc}
   143ac:	mov	r0, r4
   143b0:	pop	{r4, r5, r6, r7, fp, pc}
   143b4:	push	{r4, sl, fp, lr}
   143b8:	add	fp, sp, #8
   143bc:	sub	sp, sp, #8
   143c0:	mov	r4, r0
   143c4:	cmp	r0, #0
   143c8:	beq	14400 <__assert_fail@plt+0x2ca0>
   143cc:	mov	r0, r4
   143d0:	bl	115c8 <__freading@plt>
   143d4:	cmp	r0, #0
   143d8:	beq	14400 <__assert_fail@plt+0x2ca0>
   143dc:	ldrb	r0, [r4, #1]
   143e0:	tst	r0, #1
   143e4:	beq	14400 <__assert_fail@plt+0x2ca0>
   143e8:	mov	r0, #1
   143ec:	mov	r2, #0
   143f0:	mov	r3, #0
   143f4:	str	r0, [sp]
   143f8:	mov	r0, r4
   143fc:	bl	144e8 <__assert_fail@plt+0x2d88>
   14400:	mov	r0, r4
   14404:	sub	sp, fp, #8
   14408:	pop	{r4, sl, fp, lr}
   1440c:	b	1143c <fflush@plt>
   14410:	push	{r4, r5, r6, r7, fp, lr}
   14414:	add	fp, sp, #16
   14418:	mov	r5, r1
   1441c:	bl	1170c <fopen64@plt>
   14420:	mov	r4, #0
   14424:	cmp	r0, #0
   14428:	beq	14490 <__assert_fail@plt+0x2d30>
   1442c:	mov	r6, r0
   14430:	bl	11694 <fileno@plt>
   14434:	cmp	r0, #2
   14438:	bhi	14498 <__assert_fail@plt+0x2d38>
   1443c:	bl	2ad0c <__assert_fail@plt+0x195ac>
   14440:	cmn	r0, #1
   14444:	ble	144a0 <__assert_fail@plt+0x2d40>
   14448:	mov	r7, r0
   1444c:	mov	r0, r6
   14450:	bl	142b0 <__assert_fail@plt+0x2b50>
   14454:	cmp	r0, #0
   14458:	bne	14474 <__assert_fail@plt+0x2d14>
   1445c:	mov	r0, r7
   14460:	mov	r1, r5
   14464:	bl	113c4 <fdopen@plt>
   14468:	mov	r4, r0
   1446c:	cmp	r0, #0
   14470:	bne	14490 <__assert_fail@plt+0x2d30>
   14474:	bl	11640 <__errno_location@plt>
   14478:	ldr	r5, [r0]
   1447c:	mov	r4, r0
   14480:	mov	r0, r7
   14484:	bl	11748 <close@plt>
   14488:	str	r5, [r4]
   1448c:	mov	r4, #0
   14490:	mov	r0, r4
   14494:	pop	{r4, r5, r6, r7, fp, pc}
   14498:	mov	r0, r6
   1449c:	pop	{r4, r5, r6, r7, fp, pc}
   144a0:	bl	11640 <__errno_location@plt>
   144a4:	ldr	r7, [r0]
   144a8:	mov	r5, r0
   144ac:	mov	r0, r6
   144b0:	bl	142b0 <__assert_fail@plt+0x2b50>
   144b4:	mov	r0, r4
   144b8:	str	r7, [r5]
   144bc:	pop	{r4, r5, r6, r7, fp, pc}
   144c0:	push	{r4, r5, r6, sl, fp, lr}
   144c4:	add	fp, sp, #16
   144c8:	mov	r4, r0
   144cc:	bl	11640 <__errno_location@plt>
   144d0:	ldr	r6, [r0]
   144d4:	mov	r5, r0
   144d8:	mov	r0, r4
   144dc:	bl	11460 <free@plt>
   144e0:	str	r6, [r5]
   144e4:	pop	{r4, r5, r6, sl, fp, pc}
   144e8:	push	{r4, r5, r6, r7, fp, lr}
   144ec:	add	fp, sp, #16
   144f0:	sub	sp, sp, #8
   144f4:	mov	r4, r0
   144f8:	ldr	r0, [r0, #4]
   144fc:	mov	r5, r3
   14500:	mov	r6, r2
   14504:	ldr	r1, [r4, #8]
   14508:	cmp	r1, r0
   1450c:	bne	14528 <__assert_fail@plt+0x2dc8>
   14510:	ldrd	r0, [r4, #16]
   14514:	cmp	r1, r0
   14518:	bne	14528 <__assert_fail@plt+0x2dc8>
   1451c:	ldr	r0, [r4, #36]	; 0x24
   14520:	cmp	r0, #0
   14524:	beq	14540 <__assert_fail@plt+0x2de0>
   14528:	mov	r0, r4
   1452c:	mov	r2, r6
   14530:	mov	r3, r5
   14534:	sub	sp, fp, #16
   14538:	pop	{r4, r5, r6, r7, fp, lr}
   1453c:	b	116b8 <fseeko64@plt>
   14540:	ldr	r7, [fp, #8]
   14544:	mov	r0, r4
   14548:	bl	11694 <fileno@plt>
   1454c:	mov	r2, r6
   14550:	mov	r3, r5
   14554:	str	r7, [sp]
   14558:	bl	11550 <lseek64@plt>
   1455c:	and	r2, r0, r1
   14560:	cmn	r2, #1
   14564:	beq	14584 <__assert_fail@plt+0x2e24>
   14568:	strd	r0, [r4, #80]	; 0x50
   1456c:	ldr	r0, [r4]
   14570:	bic	r0, r0, #16
   14574:	str	r0, [r4]
   14578:	mov	r0, #0
   1457c:	sub	sp, fp, #16
   14580:	pop	{r4, r5, r6, r7, fp, pc}
   14584:	mvn	r0, #0
   14588:	sub	sp, fp, #16
   1458c:	pop	{r4, r5, r6, r7, fp, pc}
   14590:	push	{r4, r5, r6, sl, fp, lr}
   14594:	add	fp, sp, #16
   14598:	mov	r5, r0
   1459c:	mov	r0, #0
   145a0:	mov	r4, r1
   145a4:	add	r6, r2, #19
   145a8:	cmp	r1, #0
   145ac:	strb	r0, [r2, #20]
   145b0:	bmi	14600 <__assert_fail@plt+0x2ea0>
   145b4:	mov	r0, r5
   145b8:	mov	r1, r4
   145bc:	mov	r2, #10
   145c0:	mov	r3, #0
   145c4:	bl	2e61c <__assert_fail@plt+0x1cebc>
   145c8:	add	r2, r0, r0, lsl #2
   145cc:	sub	r2, r5, r2, lsl #1
   145d0:	add	r2, r2, #48	; 0x30
   145d4:	strb	r2, [r6], #-1
   145d8:	adds	r2, r5, #9
   145dc:	mov	r5, r0
   145e0:	adc	r3, r4, #0
   145e4:	rsbs	r2, r2, #18
   145e8:	mov	r4, r1
   145ec:	rscs	r2, r3, #0
   145f0:	bcc	145b4 <__assert_fail@plt+0x2e54>
   145f4:	add	r6, r6, #1
   145f8:	mov	r0, r6
   145fc:	pop	{r4, r5, r6, sl, fp, pc}
   14600:	mov	r0, r5
   14604:	mov	r1, r4
   14608:	mov	r2, #10
   1460c:	mov	r3, #0
   14610:	bl	2e61c <__assert_fail@plt+0x1cebc>
   14614:	add	r2, r0, r0, lsl #2
   14618:	rsb	r2, r5, r2, lsl #1
   1461c:	add	r2, r2, #48	; 0x30
   14620:	strb	r2, [r6], #-1
   14624:	adds	r2, r5, #9
   14628:	mov	r5, r0
   1462c:	adc	r3, r4, #0
   14630:	rsbs	r2, r2, #18
   14634:	mov	r4, r1
   14638:	rscs	r2, r3, #0
   1463c:	bcc	14600 <__assert_fail@plt+0x2ea0>
   14640:	mov	r0, #45	; 0x2d
   14644:	strb	r0, [r6]
   14648:	mov	r0, r6
   1464c:	pop	{r4, r5, r6, sl, fp, pc}
   14650:	push	{r4, r5, fp, lr}
   14654:	add	fp, sp, #8
   14658:	cmp	r0, #0
   1465c:	beq	146f0 <__assert_fail@plt+0x2f90>
   14660:	mov	r1, #47	; 0x2f
   14664:	mov	r4, r0
   14668:	bl	116e8 <strrchr@plt>
   1466c:	cmp	r0, #0
   14670:	mov	r5, r4
   14674:	addne	r5, r0, #1
   14678:	sub	r0, r5, r4
   1467c:	cmp	r0, #7
   14680:	blt	146d4 <__assert_fail@plt+0x2f74>
   14684:	movw	r1, #62714	; 0xf4fa
   14688:	sub	r0, r5, #7
   1468c:	mov	r2, #7
   14690:	movt	r1, #2
   14694:	bl	11730 <strncmp@plt>
   14698:	cmp	r0, #0
   1469c:	bne	146d4 <__assert_fail@plt+0x2f74>
   146a0:	movw	r1, #62722	; 0xf502
   146a4:	mov	r0, r5
   146a8:	mov	r2, #3
   146ac:	movt	r1, #2
   146b0:	bl	11730 <strncmp@plt>
   146b4:	cmp	r0, #0
   146b8:	beq	146c4 <__assert_fail@plt+0x2f64>
   146bc:	mov	r4, r5
   146c0:	b	146d4 <__assert_fail@plt+0x2f74>
   146c4:	movw	r0, #424	; 0x1a8
   146c8:	add	r4, r5, #3
   146cc:	movt	r0, #4
   146d0:	str	r4, [r0]
   146d4:	movw	r0, #428	; 0x1ac
   146d8:	movt	r0, #4
   146dc:	str	r4, [r0]
   146e0:	movw	r0, #688	; 0x2b0
   146e4:	movt	r0, #4
   146e8:	str	r4, [r0]
   146ec:	pop	{r4, r5, fp, pc}
   146f0:	movw	r0, #440	; 0x1b8
   146f4:	mov	r1, #55	; 0x37
   146f8:	mov	r2, #1
   146fc:	movt	r0, #4
   14700:	ldr	r3, [r0]
   14704:	movw	r0, #62658	; 0xf4c2
   14708:	movt	r0, #2
   1470c:	bl	11544 <fwrite@plt>
   14710:	bl	1173c <abort@plt>
   14714:	push	{r4, r5, r6, sl, fp, lr}
   14718:	add	fp, sp, #16
   1471c:	mov	r4, r0
   14720:	movw	r0, #696	; 0x2b8
   14724:	movt	r0, #4
   14728:	cmp	r4, #0
   1472c:	moveq	r4, r0
   14730:	bl	11640 <__errno_location@plt>
   14734:	ldr	r6, [r0]
   14738:	mov	r5, r0
   1473c:	mov	r0, r4
   14740:	mov	r1, #48	; 0x30
   14744:	bl	2b838 <__assert_fail@plt+0x1a0d8>
   14748:	str	r6, [r5]
   1474c:	pop	{r4, r5, r6, sl, fp, pc}
   14750:	movw	r1, #696	; 0x2b8
   14754:	cmp	r0, #0
   14758:	movt	r1, #4
   1475c:	movne	r1, r0
   14760:	ldr	r0, [r1]
   14764:	bx	lr
   14768:	movw	r2, #696	; 0x2b8
   1476c:	cmp	r0, #0
   14770:	movt	r2, #4
   14774:	movne	r2, r0
   14778:	str	r1, [r2]
   1477c:	bx	lr
   14780:	movw	r3, #696	; 0x2b8
   14784:	cmp	r0, #0
   14788:	and	r2, r2, #1
   1478c:	movt	r3, #4
   14790:	movne	r3, r0
   14794:	ubfx	r0, r1, #5, #3
   14798:	and	r1, r1, #31
   1479c:	add	ip, r3, r0, lsl #2
   147a0:	mov	r0, #1
   147a4:	ldr	r3, [ip, #8]
   147a8:	and	r0, r0, r3, lsr r1
   147ac:	eor	r2, r0, r2
   147b0:	eor	r1, r3, r2, lsl r1
   147b4:	str	r1, [ip, #8]
   147b8:	bx	lr
   147bc:	movw	r2, #696	; 0x2b8
   147c0:	cmp	r0, #0
   147c4:	movt	r2, #4
   147c8:	movne	r2, r0
   147cc:	ldr	r0, [r2, #4]
   147d0:	str	r1, [r2, #4]
   147d4:	bx	lr
   147d8:	push	{fp, lr}
   147dc:	mov	fp, sp
   147e0:	movw	r3, #696	; 0x2b8
   147e4:	cmp	r0, #0
   147e8:	movt	r3, #4
   147ec:	movne	r3, r0
   147f0:	cmp	r1, #0
   147f4:	mov	r0, #10
   147f8:	cmpne	r2, #0
   147fc:	str	r0, [r3]
   14800:	bne	14808 <__assert_fail@plt+0x30a8>
   14804:	bl	1173c <abort@plt>
   14808:	str	r1, [r3, #40]	; 0x28
   1480c:	str	r2, [r3, #44]	; 0x2c
   14810:	pop	{fp, pc}
   14814:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14818:	add	fp, sp, #28
   1481c:	sub	sp, sp, #20
   14820:	mov	r7, r0
   14824:	ldr	r0, [fp, #8]
   14828:	movw	r5, #696	; 0x2b8
   1482c:	mov	r8, r3
   14830:	mov	r9, r2
   14834:	mov	sl, r1
   14838:	movt	r5, #4
   1483c:	cmp	r0, #0
   14840:	movne	r5, r0
   14844:	bl	11640 <__errno_location@plt>
   14848:	ldr	r2, [r5, #40]	; 0x28
   1484c:	ldr	r3, [r5, #44]	; 0x2c
   14850:	mov	r4, r0
   14854:	ldm	r5, {r0, r1}
   14858:	add	r5, r5, #8
   1485c:	ldr	r6, [r4]
   14860:	stm	sp, {r0, r1, r5}
   14864:	mov	r0, r7
   14868:	mov	r1, sl
   1486c:	str	r2, [sp, #12]
   14870:	str	r3, [sp, #16]
   14874:	mov	r2, r9
   14878:	mov	r3, r8
   1487c:	bl	1488c <__assert_fail@plt+0x312c>
   14880:	str	r6, [r4]
   14884:	sub	sp, fp, #28
   14888:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1488c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14890:	add	fp, sp, #28
   14894:	sub	sp, sp, #156	; 0x9c
   14898:	str	r0, [fp, #-84]	; 0xffffffac
   1489c:	add	r0, r2, #1
   148a0:	mov	r6, r1
   148a4:	mov	r7, r3
   148a8:	str	r2, [fp, #-80]	; 0xffffffb0
   148ac:	str	r0, [sp, #80]	; 0x50
   148b0:	ldr	r0, [fp, #12]
   148b4:	and	r1, r0, #1
   148b8:	str	r1, [sp, #36]	; 0x24
   148bc:	and	r1, r0, #4
   148c0:	str	r1, [sp, #32]
   148c4:	ubfx	r8, r0, #1, #1
   148c8:	bl	1155c <__ctype_get_mb_cur_max@plt>
   148cc:	str	r0, [sp, #40]	; 0x28
   148d0:	ldr	r0, [fp, #24]
   148d4:	ldr	r4, [fp, #8]
   148d8:	mov	r1, #0
   148dc:	str	r1, [fp, #-52]	; 0xffffffcc
   148e0:	mov	r1, #0
   148e4:	str	r1, [sp, #60]	; 0x3c
   148e8:	mov	r1, #1
   148ec:	str	r1, [sp, #84]	; 0x54
   148f0:	str	r0, [sp, #76]	; 0x4c
   148f4:	ldr	r0, [fp, #20]
   148f8:	str	r0, [sp, #72]	; 0x48
   148fc:	mov	r0, #0
   14900:	str	r0, [sp, #56]	; 0x38
   14904:	mov	r0, #0
   14908:	str	r0, [fp, #-88]	; 0xffffffa8
   1490c:	mov	r0, #0
   14910:	str	r0, [fp, #-72]	; 0xffffffb8
   14914:	mov	r0, #0
   14918:	cmp	r4, #10
   1491c:	bhi	15c38 <__assert_fail@plt+0x44d8>
   14920:	add	r1, pc, #24
   14924:	ldr	ip, [fp, #-84]	; 0xffffffac
   14928:	ldr	lr, [fp, #-80]	; 0xffffffb0
   1492c:	mov	r5, r6
   14930:	mov	r9, #0
   14934:	mov	r2, #1
   14938:	mov	r3, #0
   1493c:	ldr	pc, [r1, r4, lsl #2]
   14940:	andeq	r4, r1, r8, lsl #20
   14944:	andeq	r4, r1, r4, asr #20
   14948:	andeq	r4, r1, r8, lsl sl
   1494c:	andeq	r4, r1, r0, lsl #20
   14950:	andeq	r4, r1, r8, lsr sl
   14954:	muleq	r1, ip, sl
   14958:	andeq	r4, r1, r8, lsr #20
   1495c:	andeq	r4, r1, r4, lsl sp
   14960:	andeq	r4, r1, ip, ror #18
   14964:	andeq	r4, r1, ip, ror #18
   14968:	andeq	r4, r1, r4, lsr #23
   1496c:	movw	r6, #62804	; 0xf554
   14970:	mov	r0, #0
   14974:	mov	r2, #5
   14978:	movt	r6, #2
   1497c:	mov	r1, r6
   14980:	bl	114d8 <dcgettext@plt>
   14984:	cmp	r0, r6
   14988:	str	r0, [sp, #72]	; 0x48
   1498c:	bne	14b7c <__assert_fail@plt+0x341c>
   14990:	bl	2e438 <__assert_fail@plt+0x1ccd8>
   14994:	ldrb	r1, [r0]
   14998:	and	r1, r1, #223	; 0xdf
   1499c:	cmp	r1, #71	; 0x47
   149a0:	beq	14afc <__assert_fail@plt+0x339c>
   149a4:	cmp	r1, #85	; 0x55
   149a8:	bne	14b60 <__assert_fail@plt+0x3400>
   149ac:	ldrb	r1, [r0, #1]
   149b0:	and	r1, r1, #223	; 0xdf
   149b4:	cmp	r1, #84	; 0x54
   149b8:	bne	14b60 <__assert_fail@plt+0x3400>
   149bc:	ldrb	r1, [r0, #2]
   149c0:	and	r1, r1, #223	; 0xdf
   149c4:	cmp	r1, #70	; 0x46
   149c8:	bne	14b60 <__assert_fail@plt+0x3400>
   149cc:	ldrb	r1, [r0, #3]
   149d0:	cmp	r1, #45	; 0x2d
   149d4:	bne	14b60 <__assert_fail@plt+0x3400>
   149d8:	ldrb	r1, [r0, #4]
   149dc:	cmp	r1, #56	; 0x38
   149e0:	bne	14b60 <__assert_fail@plt+0x3400>
   149e4:	ldrb	r0, [r0, #5]
   149e8:	cmp	r0, #0
   149ec:	movw	r0, #62806	; 0xf556
   149f0:	movt	r0, #2
   149f4:	str	r0, [sp, #72]	; 0x48
   149f8:	bne	14b60 <__assert_fail@plt+0x3400>
   149fc:	b	14b7c <__assert_fail@plt+0x341c>
   14a00:	mov	r0, #1
   14a04:	b	14a44 <__assert_fail@plt+0x32e4>
   14a08:	mov	r4, #0
   14a0c:	mov	r9, #0
   14a10:	mov	r2, r0
   14a14:	b	14a94 <__assert_fail@plt+0x3334>
   14a18:	tst	r8, #1
   14a1c:	bne	14a44 <__assert_fail@plt+0x32e4>
   14a20:	mov	r2, r0
   14a24:	b	14a6c <__assert_fail@plt+0x330c>
   14a28:	mov	r0, #1
   14a2c:	mov	r9, #0
   14a30:	mov	r4, #5
   14a34:	b	14ab0 <__assert_fail@plt+0x3350>
   14a38:	mov	r2, #1
   14a3c:	tst	r8, #1
   14a40:	beq	14a6c <__assert_fail@plt+0x330c>
   14a44:	mov	r1, #1
   14a48:	mov	r9, #0
   14a4c:	mov	r4, #2
   14a50:	mov	r2, r0
   14a54:	mov	r3, #1
   14a58:	str	r1, [fp, #-72]	; 0xffffffb8
   14a5c:	movw	r1, #61822	; 0xf17e
   14a60:	movt	r1, #2
   14a64:	str	r1, [fp, #-88]	; 0xffffffa8
   14a68:	b	14d14 <__assert_fail@plt+0x35b4>
   14a6c:	cmp	r5, #0
   14a70:	mov	r9, #1
   14a74:	mov	r4, #2
   14a78:	movne	r0, #39	; 0x27
   14a7c:	strbne	r0, [ip]
   14a80:	movw	r0, #61822	; 0xf17e
   14a84:	movt	r0, #2
   14a88:	str	r0, [fp, #-88]	; 0xffffffa8
   14a8c:	mov	r0, #1
   14a90:	str	r0, [fp, #-72]	; 0xffffffb8
   14a94:	mov	r3, #0
   14a98:	b	14d14 <__assert_fail@plt+0x35b4>
   14a9c:	mov	r4, #5
   14aa0:	tst	r8, #1
   14aa4:	beq	14acc <__assert_fail@plt+0x336c>
   14aa8:	mov	r0, #1
   14aac:	mov	r9, #0
   14ab0:	str	r0, [fp, #-72]	; 0xffffffb8
   14ab4:	movw	r0, #62802	; 0xf552
   14ab8:	mov	r2, #1
   14abc:	mov	r3, #1
   14ac0:	movt	r0, #2
   14ac4:	str	r0, [fp, #-88]	; 0xffffffa8
   14ac8:	b	14d14 <__assert_fail@plt+0x35b4>
   14acc:	cmp	r5, #0
   14ad0:	mov	r3, #0
   14ad4:	mov	r9, #1
   14ad8:	mov	r2, #1
   14adc:	movne	r0, #34	; 0x22
   14ae0:	strbne	r0, [ip]
   14ae4:	movw	r0, #62802	; 0xf552
   14ae8:	movt	r0, #2
   14aec:	str	r0, [fp, #-88]	; 0xffffffa8
   14af0:	mov	r0, #1
   14af4:	str	r0, [fp, #-72]	; 0xffffffb8
   14af8:	b	14d14 <__assert_fail@plt+0x35b4>
   14afc:	ldrb	r1, [r0, #1]
   14b00:	and	r1, r1, #223	; 0xdf
   14b04:	cmp	r1, #66	; 0x42
   14b08:	bne	14b60 <__assert_fail@plt+0x3400>
   14b0c:	ldrb	r1, [r0, #2]
   14b10:	cmp	r1, #49	; 0x31
   14b14:	bne	14b60 <__assert_fail@plt+0x3400>
   14b18:	ldrb	r1, [r0, #3]
   14b1c:	cmp	r1, #56	; 0x38
   14b20:	bne	14b60 <__assert_fail@plt+0x3400>
   14b24:	ldrb	r1, [r0, #4]
   14b28:	cmp	r1, #48	; 0x30
   14b2c:	bne	14b60 <__assert_fail@plt+0x3400>
   14b30:	ldrb	r1, [r0, #5]
   14b34:	cmp	r1, #51	; 0x33
   14b38:	bne	14b60 <__assert_fail@plt+0x3400>
   14b3c:	ldrb	r1, [r0, #6]
   14b40:	cmp	r1, #48	; 0x30
   14b44:	bne	14b60 <__assert_fail@plt+0x3400>
   14b48:	ldrb	r0, [r0, #7]
   14b4c:	cmp	r0, #0
   14b50:	movw	r0, #62814	; 0xf55e
   14b54:	movt	r0, #2
   14b58:	str	r0, [sp, #72]	; 0x48
   14b5c:	beq	14b7c <__assert_fail@plt+0x341c>
   14b60:	movw	r1, #62802	; 0xf552
   14b64:	movw	r0, #61822	; 0xf17e
   14b68:	cmp	r4, #9
   14b6c:	movt	r1, #2
   14b70:	movt	r0, #2
   14b74:	moveq	r0, r1
   14b78:	str	r0, [sp, #72]	; 0x48
   14b7c:	movw	r6, #61822	; 0xf17e
   14b80:	mov	r0, #0
   14b84:	mov	r2, #5
   14b88:	movt	r6, #2
   14b8c:	mov	r1, r6
   14b90:	bl	114d8 <dcgettext@plt>
   14b94:	cmp	r0, r6
   14b98:	str	r0, [sp, #76]	; 0x4c
   14b9c:	beq	14be8 <__assert_fail@plt+0x3488>
   14ba0:	ldr	ip, [fp, #-84]	; 0xffffffac
   14ba4:	mov	r9, #0
   14ba8:	tst	r8, #1
   14bac:	bne	14cf0 <__assert_fail@plt+0x3590>
   14bb0:	ldr	r0, [sp, #72]	; 0x48
   14bb4:	ldrb	r0, [r0]
   14bb8:	cmp	r0, #0
   14bbc:	beq	14cf0 <__assert_fail@plt+0x3590>
   14bc0:	ldr	r1, [sp, #72]	; 0x48
   14bc4:	mov	r9, #0
   14bc8:	add	r1, r1, #1
   14bcc:	cmp	r9, r5
   14bd0:	strbcc	r0, [ip, r9]
   14bd4:	ldrb	r0, [r1, r9]
   14bd8:	add	r9, r9, #1
   14bdc:	cmp	r0, #0
   14be0:	bne	14bcc <__assert_fail@plt+0x346c>
   14be4:	b	14cf0 <__assert_fail@plt+0x3590>
   14be8:	bl	2e438 <__assert_fail@plt+0x1ccd8>
   14bec:	ldrb	r1, [r0]
   14bf0:	and	r1, r1, #223	; 0xdf
   14bf4:	cmp	r1, #71	; 0x47
   14bf8:	beq	14c68 <__assert_fail@plt+0x3508>
   14bfc:	ldr	ip, [fp, #-84]	; 0xffffffac
   14c00:	cmp	r1, #85	; 0x55
   14c04:	bne	14cc4 <__assert_fail@plt+0x3564>
   14c08:	ldrb	r1, [r0, #1]
   14c0c:	and	r1, r1, #223	; 0xdf
   14c10:	cmp	r1, #84	; 0x54
   14c14:	bne	14cc4 <__assert_fail@plt+0x3564>
   14c18:	ldrb	r1, [r0, #2]
   14c1c:	and	r1, r1, #223	; 0xdf
   14c20:	cmp	r1, #70	; 0x46
   14c24:	bne	14cc4 <__assert_fail@plt+0x3564>
   14c28:	ldrb	r1, [r0, #3]
   14c2c:	cmp	r1, #45	; 0x2d
   14c30:	bne	14cc4 <__assert_fail@plt+0x3564>
   14c34:	ldrb	r1, [r0, #4]
   14c38:	cmp	r1, #56	; 0x38
   14c3c:	bne	14cc4 <__assert_fail@plt+0x3564>
   14c40:	ldrb	r0, [r0, #5]
   14c44:	cmp	r0, #0
   14c48:	bne	14cc4 <__assert_fail@plt+0x3564>
   14c4c:	movw	r0, #62810	; 0xf55a
   14c50:	movt	r0, #2
   14c54:	str	r0, [sp, #76]	; 0x4c
   14c58:	mov	r9, #0
   14c5c:	tst	r8, #1
   14c60:	beq	14bb0 <__assert_fail@plt+0x3450>
   14c64:	b	14cf0 <__assert_fail@plt+0x3590>
   14c68:	ldrb	r1, [r0, #1]
   14c6c:	ldr	ip, [fp, #-84]	; 0xffffffac
   14c70:	and	r1, r1, #223	; 0xdf
   14c74:	cmp	r1, #66	; 0x42
   14c78:	bne	14cc4 <__assert_fail@plt+0x3564>
   14c7c:	ldrb	r1, [r0, #2]
   14c80:	cmp	r1, #49	; 0x31
   14c84:	bne	14cc4 <__assert_fail@plt+0x3564>
   14c88:	ldrb	r1, [r0, #3]
   14c8c:	cmp	r1, #56	; 0x38
   14c90:	bne	14cc4 <__assert_fail@plt+0x3564>
   14c94:	ldrb	r1, [r0, #4]
   14c98:	cmp	r1, #48	; 0x30
   14c9c:	bne	14cc4 <__assert_fail@plt+0x3564>
   14ca0:	ldrb	r1, [r0, #5]
   14ca4:	cmp	r1, #51	; 0x33
   14ca8:	bne	14cc4 <__assert_fail@plt+0x3564>
   14cac:	ldrb	r1, [r0, #6]
   14cb0:	cmp	r1, #48	; 0x30
   14cb4:	bne	14cc4 <__assert_fail@plt+0x3564>
   14cb8:	ldrb	r0, [r0, #7]
   14cbc:	cmp	r0, #0
   14cc0:	beq	15ad8 <__assert_fail@plt+0x4378>
   14cc4:	movw	r0, #61822	; 0xf17e
   14cc8:	cmp	r4, #9
   14ccc:	movt	r0, #2
   14cd0:	mov	r1, r0
   14cd4:	movw	r0, #62802	; 0xf552
   14cd8:	movt	r0, #2
   14cdc:	moveq	r1, r0
   14ce0:	str	r1, [sp, #76]	; 0x4c
   14ce4:	mov	r9, #0
   14ce8:	tst	r8, #1
   14cec:	beq	14bb0 <__assert_fail@plt+0x3450>
   14cf0:	ldr	r6, [sp, #76]	; 0x4c
   14cf4:	mov	r0, r6
   14cf8:	bl	11628 <strlen@plt>
   14cfc:	ldr	ip, [fp, #-84]	; 0xffffffac
   14d00:	ldr	lr, [fp, #-80]	; 0xffffffb0
   14d04:	str	r0, [fp, #-72]	; 0xffffffb8
   14d08:	str	r6, [fp, #-88]	; 0xffffffa8
   14d0c:	mov	r2, #1
   14d10:	mov	r3, r8
   14d14:	ldr	r0, [fp, #-72]	; 0xffffffb8
   14d18:	str	r4, [fp, #-64]	; 0xffffffc0
   14d1c:	mov	sl, #0
   14d20:	str	r3, [fp, #-76]	; 0xffffffb4
   14d24:	str	r2, [sp, #88]	; 0x58
   14d28:	cmp	r0, #0
   14d2c:	movwne	r0, #1
   14d30:	and	r1, r0, r3
   14d34:	and	r1, r2, r1
   14d38:	str	r1, [sp, #48]	; 0x30
   14d3c:	sub	r1, r4, #2
   14d40:	clz	r1, r1
   14d44:	lsr	r1, r1, #5
   14d48:	and	r1, r1, r3
   14d4c:	str	r1, [sp, #44]	; 0x2c
   14d50:	subs	r1, r4, #2
   14d54:	eor	r4, r3, #1
   14d58:	movwne	r1, #1
   14d5c:	str	r4, [sp, #92]	; 0x5c
   14d60:	orr	r4, r1, r4
   14d64:	and	r1, r1, r2
   14d68:	and	r0, r0, r1
   14d6c:	str	r4, [sp, #64]	; 0x40
   14d70:	ldr	r4, [sp, #84]	; 0x54
   14d74:	str	r0, [fp, #-60]	; 0xffffffc4
   14d78:	orr	r0, r1, r3
   14d7c:	ldr	r1, [fp, #16]
   14d80:	eor	r0, r0, #1
   14d84:	clz	r1, r1
   14d88:	lsr	r1, r1, #5
   14d8c:	orr	r0, r1, r0
   14d90:	str	r0, [fp, #-68]	; 0xffffffbc
   14d94:	eor	r0, r2, #1
   14d98:	str	r0, [sp, #52]	; 0x34
   14d9c:	cmn	r7, #1
   14da0:	beq	14db0 <__assert_fail@plt+0x3650>
   14da4:	cmp	sl, r7
   14da8:	bne	14dbc <__assert_fail@plt+0x365c>
   14dac:	b	15a50 <__assert_fail@plt+0x42f0>
   14db0:	ldrb	r0, [lr, sl]
   14db4:	cmp	r0, #0
   14db8:	beq	15a58 <__assert_fail@plt+0x42f8>
   14dbc:	ldr	r0, [fp, #-60]	; 0xffffffc4
   14dc0:	cmp	r0, #0
   14dc4:	beq	14e24 <__assert_fail@plt+0x36c4>
   14dc8:	ldr	r0, [fp, #-72]	; 0xffffffb8
   14dcc:	mov	r6, r5
   14dd0:	add	r5, sl, r0
   14dd4:	cmp	r0, #2
   14dd8:	bcc	14e44 <__assert_fail@plt+0x36e4>
   14ddc:	mov	r0, #0
   14de0:	cmn	r7, #1
   14de4:	str	r0, [fp, #-56]	; 0xffffffc8
   14de8:	bne	14e00 <__assert_fail@plt+0x36a0>
   14dec:	mov	r0, lr
   14df0:	bl	11628 <strlen@plt>
   14df4:	ldr	lr, [fp, #-80]	; 0xffffffb0
   14df8:	ldr	ip, [fp, #-84]	; 0xffffffac
   14dfc:	mov	r7, r0
   14e00:	cmp	r5, r7
   14e04:	bls	14e54 <__assert_fail@plt+0x36f4>
   14e08:	mov	r0, #0
   14e0c:	mov	r5, r6
   14e10:	str	r0, [fp, #-48]	; 0xffffffd0
   14e14:	ldrb	r6, [lr, sl]
   14e18:	cmp	r6, #126	; 0x7e
   14e1c:	bls	14ea4 <__assert_fail@plt+0x3744>
   14e20:	b	15400 <__assert_fail@plt+0x3ca0>
   14e24:	mov	r0, #0
   14e28:	str	r0, [fp, #-56]	; 0xffffffc8
   14e2c:	mov	r0, #0
   14e30:	str	r0, [fp, #-48]	; 0xffffffd0
   14e34:	ldrb	r6, [lr, sl]
   14e38:	cmp	r6, #126	; 0x7e
   14e3c:	bls	14ea4 <__assert_fail@plt+0x3744>
   14e40:	b	15400 <__assert_fail@plt+0x3ca0>
   14e44:	mov	r0, #0
   14e48:	str	r0, [fp, #-56]	; 0xffffffc8
   14e4c:	cmp	r5, r7
   14e50:	bhi	14e08 <__assert_fail@plt+0x36a8>
   14e54:	ldr	r1, [fp, #-88]	; 0xffffffa8
   14e58:	ldr	r2, [fp, #-72]	; 0xffffffb8
   14e5c:	add	r0, lr, sl
   14e60:	bl	1161c <bcmp@plt>
   14e64:	ldr	r2, [sp, #92]	; 0x5c
   14e68:	cmp	r0, #0
   14e6c:	mov	r1, r0
   14e70:	mov	r5, r6
   14e74:	movwne	r1, #1
   14e78:	orr	r1, r1, r2
   14e7c:	tst	r1, #1
   14e80:	beq	15b18 <__assert_fail@plt+0x43b8>
   14e84:	ldr	ip, [fp, #-84]	; 0xffffffac
   14e88:	ldr	lr, [fp, #-80]	; 0xffffffb0
   14e8c:	clz	r0, r0
   14e90:	lsr	r0, r0, #5
   14e94:	str	r0, [fp, #-48]	; 0xffffffd0
   14e98:	ldrb	r6, [lr, sl]
   14e9c:	cmp	r6, #126	; 0x7e
   14ea0:	bhi	15400 <__assert_fail@plt+0x3ca0>
   14ea4:	add	r3, pc, #16
   14ea8:	mov	r8, #1
   14eac:	mov	r2, #110	; 0x6e
   14eb0:	mov	r0, #97	; 0x61
   14eb4:	mov	r1, #0
   14eb8:	ldr	pc, [r3, r6, lsl #2]
   14ebc:			; <UNDEFINED> instruction: 0x000151b8
   14ec0:	andeq	r5, r1, r0, lsl #8
   14ec4:	andeq	r5, r1, r0, lsl #8
   14ec8:	andeq	r5, r1, r0, lsl #8
   14ecc:	andeq	r5, r1, r0, lsl #8
   14ed0:	andeq	r5, r1, r0, lsl #8
   14ed4:	andeq	r5, r1, r0, lsl #8
   14ed8:			; <UNDEFINED> instruction: 0x000154b4
   14edc:	muleq	r1, r8, r1
   14ee0:	muleq	r1, r0, r1
   14ee4:	andeq	r5, r1, r4, lsr #3
   14ee8:	ldrdeq	r5, [r1], -r4
   14eec:	andeq	r5, r1, r8, lsl #3
   14ef0:	andeq	r5, r1, r0, lsr #3
   14ef4:	andeq	r5, r1, r0, lsl #8
   14ef8:	andeq	r5, r1, r0, lsl #8
   14efc:	andeq	r5, r1, r0, lsl #8
   14f00:	andeq	r5, r1, r0, lsl #8
   14f04:	andeq	r5, r1, r0, lsl #8
   14f08:	andeq	r5, r1, r0, lsl #8
   14f0c:	andeq	r5, r1, r0, lsl #8
   14f10:	andeq	r5, r1, r0, lsl #8
   14f14:	andeq	r5, r1, r0, lsl #8
   14f18:	andeq	r5, r1, r0, lsl #8
   14f1c:	andeq	r5, r1, r0, lsl #8
   14f20:	andeq	r5, r1, r0, lsl #8
   14f24:	andeq	r5, r1, r0, lsl #8
   14f28:	andeq	r5, r1, r0, lsl #8
   14f2c:	andeq	r5, r1, r0, lsl #8
   14f30:	andeq	r5, r1, r0, lsl #8
   14f34:	andeq	r5, r1, r0, lsl #8
   14f38:	andeq	r5, r1, r0, lsl #8
   14f3c:	andeq	r5, r1, ip, lsr #2
   14f40:	andeq	r5, r1, r0, lsr r1
   14f44:	andeq	r5, r1, r0, lsr r1
   14f48:	andeq	r5, r1, r0, lsr #2
   14f4c:	andeq	r5, r1, r0, lsr r1
   14f50:	strheq	r5, [r1], -r8
   14f54:	andeq	r5, r1, r0, lsr r1
   14f58:	ldrdeq	r5, [r1], -ip
   14f5c:	andeq	r5, r1, r0, lsr r1
   14f60:	andeq	r5, r1, r0, lsr r1
   14f64:	andeq	r5, r1, r0, lsr r1
   14f68:	strheq	r5, [r1], -r8
   14f6c:	strheq	r5, [r1], -r8
   14f70:	strheq	r5, [r1], -r8
   14f74:	strheq	r5, [r1], -r8
   14f78:	strheq	r5, [r1], -r8
   14f7c:	strheq	r5, [r1], -r8
   14f80:	strheq	r5, [r1], -r8
   14f84:	strheq	r5, [r1], -r8
   14f88:	strheq	r5, [r1], -r8
   14f8c:	strheq	r5, [r1], -r8
   14f90:	strheq	r5, [r1], -r8
   14f94:	strheq	r5, [r1], -r8
   14f98:	strheq	r5, [r1], -r8
   14f9c:	strheq	r5, [r1], -r8
   14fa0:	strheq	r5, [r1], -r8
   14fa4:	strheq	r5, [r1], -r8
   14fa8:	andeq	r5, r1, r0, lsr r1
   14fac:	andeq	r5, r1, r0, lsr r1
   14fb0:	andeq	r5, r1, r0, lsr r1
   14fb4:	andeq	r5, r1, r0, lsr r1
   14fb8:	andeq	r5, r1, r0, lsr #5
   14fbc:	andeq	r5, r1, r0, lsl #8
   14fc0:	strheq	r5, [r1], -r8
   14fc4:	strheq	r5, [r1], -r8
   14fc8:	strheq	r5, [r1], -r8
   14fcc:	strheq	r5, [r1], -r8
   14fd0:	strheq	r5, [r1], -r8
   14fd4:	strheq	r5, [r1], -r8
   14fd8:	strheq	r5, [r1], -r8
   14fdc:	strheq	r5, [r1], -r8
   14fe0:	strheq	r5, [r1], -r8
   14fe4:	strheq	r5, [r1], -r8
   14fe8:	strheq	r5, [r1], -r8
   14fec:	strheq	r5, [r1], -r8
   14ff0:	strheq	r5, [r1], -r8
   14ff4:	strheq	r5, [r1], -r8
   14ff8:	strheq	r5, [r1], -r8
   14ffc:	strheq	r5, [r1], -r8
   15000:	strheq	r5, [r1], -r8
   15004:	strheq	r5, [r1], -r8
   15008:	strheq	r5, [r1], -r8
   1500c:	strheq	r5, [r1], -r8
   15010:	strheq	r5, [r1], -r8
   15014:	strheq	r5, [r1], -r8
   15018:	strheq	r5, [r1], -r8
   1501c:	strheq	r5, [r1], -r8
   15020:	strheq	r5, [r1], -r8
   15024:	strheq	r5, [r1], -r8
   15028:	andeq	r5, r1, r0, lsr r1
   1502c:	andeq	r5, r1, r4, ror #2
   15030:	strheq	r5, [r1], -r8
   15034:	andeq	r5, r1, r0, lsr r1
   15038:	strheq	r5, [r1], -r8
   1503c:	andeq	r5, r1, r0, lsr r1
   15040:	strheq	r5, [r1], -r8
   15044:	strheq	r5, [r1], -r8
   15048:	strheq	r5, [r1], -r8
   1504c:	strheq	r5, [r1], -r8
   15050:	strheq	r5, [r1], -r8
   15054:	strheq	r5, [r1], -r8
   15058:	strheq	r5, [r1], -r8
   1505c:	strheq	r5, [r1], -r8
   15060:	strheq	r5, [r1], -r8
   15064:	strheq	r5, [r1], -r8
   15068:	strheq	r5, [r1], -r8
   1506c:	strheq	r5, [r1], -r8
   15070:	strheq	r5, [r1], -r8
   15074:	strheq	r5, [r1], -r8
   15078:	strheq	r5, [r1], -r8
   1507c:	strheq	r5, [r1], -r8
   15080:	strheq	r5, [r1], -r8
   15084:	strheq	r5, [r1], -r8
   15088:	strheq	r5, [r1], -r8
   1508c:	strheq	r5, [r1], -r8
   15090:	strheq	r5, [r1], -r8
   15094:	strheq	r5, [r1], -r8
   15098:	strheq	r5, [r1], -r8
   1509c:	strheq	r5, [r1], -r8
   150a0:	strheq	r5, [r1], -r8
   150a4:	strheq	r5, [r1], -r8
   150a8:	strdeq	r5, [r1], -r8
   150ac:	andeq	r5, r1, r0, lsr r1
   150b0:	strdeq	r5, [r1], -r8
   150b4:	andeq	r5, r1, r0, lsr #2
   150b8:	ldr	r0, [fp, #-68]	; 0xffffffbc
   150bc:	tst	r0, #1
   150c0:	bne	15378 <__assert_fail@plt+0x3c18>
   150c4:	ldr	r1, [fp, #16]
   150c8:	ubfx	r0, r6, #5, #3
   150cc:	mov	r2, #1
   150d0:	ldr	r0, [r1, r0, lsl #2]
   150d4:	and	r1, r6, #31
   150d8:	tst	r0, r2, lsl r1
   150dc:	beq	15378 <__assert_fail@plt+0x3c18>
   150e0:	mov	r0, r6
   150e4:	mov	r1, r8
   150e8:	ldr	r2, [fp, #-76]	; 0xffffffb4
   150ec:	tst	r2, #1
   150f0:	beq	15398 <__assert_fail@plt+0x3c38>
   150f4:	b	15af4 <__assert_fail@plt+0x4394>
   150f8:	cmp	r7, #1
   150fc:	beq	15120 <__assert_fail@plt+0x39c0>
   15100:	mov	r8, #0
   15104:	cmn	r7, #1
   15108:	bne	15364 <__assert_fail@plt+0x3c04>
   1510c:	ldrb	r0, [lr, #1]
   15110:	cmp	r0, #0
   15114:	beq	15120 <__assert_fail@plt+0x39c0>
   15118:	mvn	r7, #0
   1511c:	b	15364 <__assert_fail@plt+0x3c04>
   15120:	mov	r8, #0
   15124:	cmp	sl, #0
   15128:	bne	15364 <__assert_fail@plt+0x3c04>
   1512c:	mov	r1, #1
   15130:	ldr	r0, [fp, #-64]	; 0xffffffc0
   15134:	cmp	r0, #2
   15138:	bne	15150 <__assert_fail@plt+0x39f0>
   1513c:	ldr	r0, [fp, #-76]	; 0xffffffb4
   15140:	mov	r8, r1
   15144:	tst	r0, #1
   15148:	beq	150b8 <__assert_fail@plt+0x3958>
   1514c:	b	15af4 <__assert_fail@plt+0x4394>
   15150:	mov	r8, r1
   15154:	ldr	r0, [fp, #-68]	; 0xffffffbc
   15158:	tst	r0, #1
   1515c:	beq	150c4 <__assert_fail@plt+0x3964>
   15160:	b	15378 <__assert_fail@plt+0x3c18>
   15164:	ldr	r0, [fp, #-64]	; 0xffffffc0
   15168:	cmp	r0, #2
   1516c:	bne	1542c <__assert_fail@plt+0x3ccc>
   15170:	ldr	r0, [fp, #-76]	; 0xffffffb4
   15174:	tst	r0, #1
   15178:	bne	15af4 <__assert_fail@plt+0x4394>
   1517c:	mov	r0, #0
   15180:	str	r0, [fp, #-56]	; 0xffffffc8
   15184:	b	15444 <__assert_fail@plt+0x3ce4>
   15188:	mov	r0, #102	; 0x66
   1518c:	b	154b4 <__assert_fail@plt+0x3d54>
   15190:	mov	r2, #116	; 0x74
   15194:	b	151a4 <__assert_fail@plt+0x3a44>
   15198:	mov	r0, #98	; 0x62
   1519c:	b	154b4 <__assert_fail@plt+0x3d54>
   151a0:	mov	r2, #114	; 0x72
   151a4:	ldr	r0, [sp, #64]	; 0x40
   151a8:	tst	r0, #1
   151ac:	mov	r0, r2
   151b0:	bne	154b4 <__assert_fail@plt+0x3d54>
   151b4:	b	15af4 <__assert_fail@plt+0x4394>
   151b8:	ldr	r0, [sp, #88]	; 0x58
   151bc:	tst	r0, #1
   151c0:	beq	154d4 <__assert_fail@plt+0x3d74>
   151c4:	ldr	r0, [fp, #-76]	; 0xffffffb4
   151c8:	tst	r0, #1
   151cc:	bne	15c30 <__assert_fail@plt+0x44d0>
   151d0:	ldr	r0, [fp, #-64]	; 0xffffffc0
   151d4:	ldr	r1, [fp, #-52]	; 0xffffffcc
   151d8:	subs	r0, r0, #2
   151dc:	movwne	r0, #1
   151e0:	orr	r0, r0, r1
   151e4:	tst	r0, #1
   151e8:	bne	15224 <__assert_fail@plt+0x3ac4>
   151ec:	cmp	r9, r5
   151f0:	movcc	r0, #39	; 0x27
   151f4:	strbcc	r0, [ip, r9]
   151f8:	add	r0, r9, #1
   151fc:	cmp	r0, r5
   15200:	movcc	r1, #36	; 0x24
   15204:	strbcc	r1, [ip, r0]
   15208:	add	r0, r9, #2
   1520c:	add	r9, r9, #3
   15210:	cmp	r0, r5
   15214:	movcc	r1, #39	; 0x27
   15218:	strbcc	r1, [ip, r0]
   1521c:	mov	r0, #1
   15220:	str	r0, [fp, #-52]	; 0xffffffcc
   15224:	mov	r1, #1
   15228:	cmp	r9, r5
   1522c:	mov	r8, #0
   15230:	mov	r6, #48	; 0x30
   15234:	str	r1, [fp, #-56]	; 0xffffffc8
   15238:	ldr	r1, [fp, #-64]	; 0xffffffc0
   1523c:	movcc	r0, #92	; 0x5c
   15240:	strbcc	r0, [ip, r9]
   15244:	add	r0, r9, #1
   15248:	cmp	r1, #2
   1524c:	beq	156a0 <__assert_fail@plt+0x3f40>
   15250:	add	r1, sl, #1
   15254:	cmp	r1, r7
   15258:	bcs	156a0 <__assert_fail@plt+0x3f40>
   1525c:	ldrb	r1, [lr, r1]
   15260:	sub	r1, r1, #48	; 0x30
   15264:	uxtb	r1, r1
   15268:	cmp	r1, #9
   1526c:	bhi	156a0 <__assert_fail@plt+0x3f40>
   15270:	cmp	r0, r5
   15274:	movcc	r1, #48	; 0x30
   15278:	strbcc	r1, [ip, r0]
   1527c:	add	r0, r9, #2
   15280:	add	r9, r9, #3
   15284:	cmp	r0, r5
   15288:	movcc	r1, #48	; 0x30
   1528c:	strbcc	r1, [ip, r0]
   15290:	ldr	r0, [fp, #-68]	; 0xffffffbc
   15294:	tst	r0, #1
   15298:	beq	150c4 <__assert_fail@plt+0x3964>
   1529c:	b	15378 <__assert_fail@plt+0x3c18>
   152a0:	ldr	r0, [fp, #-64]	; 0xffffffc0
   152a4:	mov	r6, #63	; 0x3f
   152a8:	cmp	r0, #5
   152ac:	beq	156b4 <__assert_fail@plt+0x3f54>
   152b0:	mov	r1, #0
   152b4:	cmp	r0, #2
   152b8:	str	r1, [fp, #-56]	; 0xffffffc8
   152bc:	bne	1577c <__assert_fail@plt+0x401c>
   152c0:	ldr	r0, [fp, #-76]	; 0xffffffb4
   152c4:	mov	r8, #0
   152c8:	tst	r0, #1
   152cc:	beq	150b8 <__assert_fail@plt+0x3958>
   152d0:	b	15af4 <__assert_fail@plt+0x4394>
   152d4:	mov	r0, #118	; 0x76
   152d8:	b	154b4 <__assert_fail@plt+0x3d54>
   152dc:	mov	r0, #1
   152e0:	mov	r6, #39	; 0x27
   152e4:	str	r0, [sp, #60]	; 0x3c
   152e8:	ldr	r0, [fp, #-64]	; 0xffffffc0
   152ec:	cmp	r0, #2
   152f0:	bne	154f4 <__assert_fail@plt+0x3d94>
   152f4:	ldr	r0, [fp, #-76]	; 0xffffffb4
   152f8:	tst	r0, #1
   152fc:	bne	15af4 <__assert_fail@plt+0x4394>
   15300:	ldr	r2, [sp, #56]	; 0x38
   15304:	clz	r1, r5
   15308:	mov	r8, #1
   1530c:	lsr	r1, r1, #5
   15310:	cmp	r2, #0
   15314:	mov	r0, r2
   15318:	movwne	r0, #1
   1531c:	orrs	r0, r0, r1
   15320:	moveq	r2, r5
   15324:	moveq	r5, r0
   15328:	cmp	r9, r5
   1532c:	str	r2, [sp, #56]	; 0x38
   15330:	movcc	r0, #39	; 0x27
   15334:	strbcc	r0, [ip, r9]
   15338:	add	r0, r9, #1
   1533c:	cmp	r0, r5
   15340:	movcc	r1, #92	; 0x5c
   15344:	strbcc	r1, [ip, r0]
   15348:	add	r0, r9, #2
   1534c:	add	r9, r9, #3
   15350:	cmp	r0, r5
   15354:	movcc	r1, #39	; 0x27
   15358:	strbcc	r1, [ip, r0]
   1535c:	mov	r0, #0
   15360:	str	r0, [fp, #-52]	; 0xffffffcc
   15364:	mov	r0, #0
   15368:	str	r0, [fp, #-56]	; 0xffffffc8
   1536c:	ldr	r0, [fp, #-68]	; 0xffffffbc
   15370:	tst	r0, #1
   15374:	beq	150c4 <__assert_fail@plt+0x3964>
   15378:	ldr	r0, [fp, #-48]	; 0xffffffd0
   1537c:	mov	r1, r8
   15380:	cmp	r0, #0
   15384:	mov	r0, r6
   15388:	beq	1544c <__assert_fail@plt+0x3cec>
   1538c:	ldr	r2, [fp, #-76]	; 0xffffffb4
   15390:	tst	r2, #1
   15394:	bne	15af4 <__assert_fail@plt+0x4394>
   15398:	ldr	r2, [fp, #-64]	; 0xffffffc0
   1539c:	ldr	r3, [fp, #-52]	; 0xffffffcc
   153a0:	subs	r2, r2, #2
   153a4:	movwne	r2, #1
   153a8:	orr	r2, r2, r3
   153ac:	tst	r2, #1
   153b0:	bne	153ec <__assert_fail@plt+0x3c8c>
   153b4:	cmp	r9, r5
   153b8:	movcc	r2, #39	; 0x27
   153bc:	strbcc	r2, [ip, r9]
   153c0:	add	r2, r9, #1
   153c4:	cmp	r2, r5
   153c8:	movcc	r3, #36	; 0x24
   153cc:	strbcc	r3, [ip, r2]
   153d0:	add	r2, r9, #2
   153d4:	add	r9, r9, #3
   153d8:	cmp	r2, r5
   153dc:	movcc	r3, #39	; 0x27
   153e0:	strbcc	r3, [ip, r2]
   153e4:	mov	r2, #1
   153e8:	str	r2, [fp, #-52]	; 0xffffffcc
   153ec:	cmp	r9, r5
   153f0:	movcc	r2, #92	; 0x5c
   153f4:	strbcc	r2, [ip, r9]
   153f8:	add	r9, r9, #1
   153fc:	b	15494 <__assert_fail@plt+0x3d34>
   15400:	ldr	r0, [sp, #40]	; 0x28
   15404:	cmp	r0, #1
   15408:	bne	15508 <__assert_fail@plt+0x3da8>
   1540c:	bl	11604 <__ctype_b_loc@plt>
   15410:	ldr	r0, [r0]
   15414:	ldr	lr, [fp, #-80]	; 0xffffffb0
   15418:	mov	r1, #1
   1541c:	add	r0, r0, r6, lsl #1
   15420:	ldrb	r0, [r0, #1]
   15424:	ubfx	r8, r0, #6, #1
   15428:	b	15860 <__assert_fail@plt+0x4100>
   1542c:	ldr	r1, [sp, #48]	; 0x30
   15430:	mov	r0, #0
   15434:	str	r0, [fp, #-56]	; 0xffffffc8
   15438:	mov	r0, #92	; 0x5c
   1543c:	cmp	r1, #0
   15440:	beq	154b4 <__assert_fail@plt+0x3d54>
   15444:	mov	r6, #92	; 0x5c
   15448:	mov	r8, #0
   1544c:	ldr	r0, [fp, #-56]	; 0xffffffc8
   15450:	cmp	r0, #0
   15454:	bne	1548c <__assert_fail@plt+0x3d2c>
   15458:	ldr	r0, [fp, #-52]	; 0xffffffcc
   1545c:	tst	r0, #1
   15460:	beq	1548c <__assert_fail@plt+0x3d2c>
   15464:	cmp	r9, r5
   15468:	movcc	r0, #39	; 0x27
   1546c:	strbcc	r0, [ip, r9]
   15470:	add	r0, r9, #1
   15474:	add	r9, r9, #2
   15478:	cmp	r0, r5
   1547c:	movcc	r1, #39	; 0x27
   15480:	strbcc	r1, [ip, r0]
   15484:	mov	r0, #0
   15488:	str	r0, [fp, #-52]	; 0xffffffcc
   1548c:	mov	r1, r8
   15490:	mov	r0, r6
   15494:	cmp	r9, r5
   15498:	and	r4, r4, r1
   1549c:	strbcc	r0, [ip, r9]
   154a0:	add	r9, r9, #1
   154a4:	add	sl, sl, #1
   154a8:	cmn	r7, #1
   154ac:	bne	14da4 <__assert_fail@plt+0x3644>
   154b0:	b	14db0 <__assert_fail@plt+0x3650>
   154b4:	mov	r1, #0
   154b8:	mov	r8, #0
   154bc:	str	r1, [fp, #-56]	; 0xffffffc8
   154c0:	ldr	r1, [sp, #88]	; 0x58
   154c4:	tst	r1, #1
   154c8:	mov	r1, #0
   154cc:	beq	150b8 <__assert_fail@plt+0x3958>
   154d0:	b	1538c <__assert_fail@plt+0x3c2c>
   154d4:	ldr	r0, [sp, #36]	; 0x24
   154d8:	mov	r6, #0
   154dc:	mov	r8, #0
   154e0:	cmp	r0, #0
   154e4:	mov	r0, #0
   154e8:	str	r0, [fp, #-56]	; 0xffffffc8
   154ec:	bne	154a4 <__assert_fail@plt+0x3d44>
   154f0:	b	150b8 <__assert_fail@plt+0x3958>
   154f4:	mov	r8, #1
   154f8:	ldr	r0, [fp, #-68]	; 0xffffffbc
   154fc:	tst	r0, #1
   15500:	beq	150c4 <__assert_fail@plt+0x3964>
   15504:	b	15378 <__assert_fail@plt+0x3c18>
   15508:	mov	r0, #0
   1550c:	cmn	r7, #1
   15510:	str	r0, [fp, #-36]	; 0xffffffdc
   15514:	str	r0, [fp, #-40]	; 0xffffffd8
   15518:	bne	1552c <__assert_fail@plt+0x3dcc>
   1551c:	mov	r0, lr
   15520:	bl	11628 <strlen@plt>
   15524:	ldr	lr, [fp, #-80]	; 0xffffffb0
   15528:	mov	r7, r0
   1552c:	ldr	r0, [sp, #44]	; 0x2c
   15530:	str	r4, [sp, #84]	; 0x54
   15534:	str	r5, [sp, #28]
   15538:	cmp	r0, #0
   1553c:	beq	15790 <__assert_fail@plt+0x4030>
   15540:	ldr	r0, [sp, #80]	; 0x50
   15544:	mov	r8, #1
   15548:	mov	r5, #0
   1554c:	add	r0, r0, sl
   15550:	str	r0, [sp, #24]
   15554:	sub	r0, fp, #40	; 0x28
   15558:	mov	r3, r0
   1555c:	b	15598 <__assert_fail@plt+0x3e38>
   15560:	ldr	r5, [sp, #68]	; 0x44
   15564:	add	r5, r0, r5
   15568:	ldr	r0, [fp, #-44]	; 0xffffffd4
   1556c:	bl	1152c <iswprint@plt>
   15570:	cmp	r0, #0
   15574:	sub	r4, fp, #40	; 0x28
   15578:	movwne	r0, #1
   1557c:	and	r8, r8, r0
   15580:	mov	r0, r4
   15584:	bl	114b4 <mbsinit@plt>
   15588:	ldr	lr, [fp, #-80]	; 0xffffffb0
   1558c:	mov	r3, r4
   15590:	cmp	r0, #0
   15594:	bne	15854 <__assert_fail@plt+0x40f4>
   15598:	str	r5, [sp, #68]	; 0x44
   1559c:	add	r5, r5, sl
   155a0:	sub	r0, fp, #44	; 0x2c
   155a4:	add	r1, lr, r5
   155a8:	sub	r2, r7, r5
   155ac:	bl	2e470 <__assert_fail@plt+0x1cd10>
   155b0:	cmn	r0, #2
   155b4:	beq	15814 <__assert_fail@plt+0x40b4>
   155b8:	ldr	ip, [fp, #-84]	; 0xffffffac
   155bc:	cmn	r0, #1
   155c0:	beq	15808 <__assert_fail@plt+0x40a8>
   155c4:	cmp	r0, #0
   155c8:	beq	1580c <__assert_fail@plt+0x40ac>
   155cc:	cmp	r0, #2
   155d0:	bcc	15560 <__assert_fail@plt+0x3e00>
   155d4:	ldr	r1, [sp, #68]	; 0x44
   155d8:	ldr	r2, [sp, #24]
   155dc:	add	r1, r2, r1
   155e0:	sub	r2, r0, #1
   155e4:	ldrb	r3, [r1]
   155e8:	sub	r3, r3, #91	; 0x5b
   155ec:	cmp	r3, #33	; 0x21
   155f0:	bls	15610 <__assert_fail@plt+0x3eb0>
   155f4:	add	r1, r1, #1
   155f8:	subs	r2, r2, #1
   155fc:	beq	15560 <__assert_fail@plt+0x3e00>
   15600:	ldrb	r3, [r1]
   15604:	sub	r3, r3, #91	; 0x5b
   15608:	cmp	r3, #33	; 0x21
   1560c:	bhi	155f4 <__assert_fail@plt+0x3e94>
   15610:	add	r5, pc, #0
   15614:	ldr	pc, [r5, r3, lsl #2]
   15618:	andeq	r5, r1, ip, lsr #22
   1561c:	andeq	r5, r1, ip, lsr #22
   15620:	strdeq	r5, [r1], -r4
   15624:	andeq	r5, r1, ip, lsr #22
   15628:	strdeq	r5, [r1], -r4
   1562c:	andeq	r5, r1, ip, lsr #22
   15630:	strdeq	r5, [r1], -r4
   15634:	strdeq	r5, [r1], -r4
   15638:	strdeq	r5, [r1], -r4
   1563c:	strdeq	r5, [r1], -r4
   15640:	strdeq	r5, [r1], -r4
   15644:	strdeq	r5, [r1], -r4
   15648:	strdeq	r5, [r1], -r4
   1564c:	strdeq	r5, [r1], -r4
   15650:	strdeq	r5, [r1], -r4
   15654:	strdeq	r5, [r1], -r4
   15658:	strdeq	r5, [r1], -r4
   1565c:	strdeq	r5, [r1], -r4
   15660:	strdeq	r5, [r1], -r4
   15664:	strdeq	r5, [r1], -r4
   15668:	strdeq	r5, [r1], -r4
   1566c:	strdeq	r5, [r1], -r4
   15670:	strdeq	r5, [r1], -r4
   15674:	strdeq	r5, [r1], -r4
   15678:	strdeq	r5, [r1], -r4
   1567c:	strdeq	r5, [r1], -r4
   15680:	strdeq	r5, [r1], -r4
   15684:	strdeq	r5, [r1], -r4
   15688:	strdeq	r5, [r1], -r4
   1568c:	strdeq	r5, [r1], -r4
   15690:	strdeq	r5, [r1], -r4
   15694:	strdeq	r5, [r1], -r4
   15698:	strdeq	r5, [r1], -r4
   1569c:	andeq	r5, r1, ip, lsr #22
   156a0:	mov	r9, r0
   156a4:	ldr	r0, [fp, #-68]	; 0xffffffbc
   156a8:	tst	r0, #1
   156ac:	beq	150c4 <__assert_fail@plt+0x3964>
   156b0:	b	15378 <__assert_fail@plt+0x3c18>
   156b4:	mov	r0, #0
   156b8:	str	r0, [fp, #-56]	; 0xffffffc8
   156bc:	ldr	r0, [sp, #32]
   156c0:	cmp	r0, #0
   156c4:	beq	1577c <__assert_fail@plt+0x401c>
   156c8:	add	r0, sl, #2
   156cc:	mov	r1, r7
   156d0:	cmp	r0, r7
   156d4:	bcs	1577c <__assert_fail@plt+0x401c>
   156d8:	add	r1, sl, lr
   156dc:	ldrb	r1, [r1, #1]
   156e0:	cmp	r1, #63	; 0x3f
   156e4:	bne	1577c <__assert_fail@plt+0x401c>
   156e8:	ldrb	r8, [lr, r0]
   156ec:	sub	r2, r8, #33	; 0x21
   156f0:	cmp	r2, #29
   156f4:	bhi	1577c <__assert_fail@plt+0x401c>
   156f8:	mov	r1, r4
   156fc:	movw	r4, #20929	; 0x51c1
   15700:	mov	r3, #1
   15704:	movt	r4, #14336	; 0x3800
   15708:	tst	r4, r3, lsl r2
   1570c:	beq	15a38 <__assert_fail@plt+0x42d8>
   15710:	ldr	r2, [fp, #-76]	; 0xffffffb4
   15714:	tst	r2, #1
   15718:	bne	15af4 <__assert_fail@plt+0x4394>
   1571c:	cmp	r9, r5
   15720:	mov	r6, r8
   15724:	mov	r4, r1
   15728:	mov	sl, r0
   1572c:	mov	r8, #0
   15730:	movcc	r2, #63	; 0x3f
   15734:	strbcc	r2, [ip, r9]
   15738:	add	r2, r9, #1
   1573c:	cmp	r2, r5
   15740:	movcc	r3, #34	; 0x22
   15744:	strbcc	r3, [ip, r2]
   15748:	add	r2, r9, #2
   1574c:	cmp	r2, r5
   15750:	movcc	r3, #34	; 0x22
   15754:	strbcc	r3, [ip, r2]
   15758:	add	r2, r9, #3
   1575c:	add	r9, r9, #4
   15760:	cmp	r2, r5
   15764:	movcc	r3, #63	; 0x3f
   15768:	strbcc	r3, [ip, r2]
   1576c:	ldr	r0, [fp, #-68]	; 0xffffffbc
   15770:	tst	r0, #1
   15774:	beq	150c4 <__assert_fail@plt+0x3964>
   15778:	b	15378 <__assert_fail@plt+0x3c18>
   1577c:	mov	r8, #0
   15780:	ldr	r0, [fp, #-68]	; 0xffffffbc
   15784:	tst	r0, #1
   15788:	beq	150c4 <__assert_fail@plt+0x3964>
   1578c:	b	15378 <__assert_fail@plt+0x3c18>
   15790:	mov	r8, #1
   15794:	mov	r5, #0
   15798:	sub	r4, fp, #40	; 0x28
   1579c:	str	r5, [sp, #68]	; 0x44
   157a0:	add	r5, r5, sl
   157a4:	sub	r0, fp, #44	; 0x2c
   157a8:	mov	r3, r4
   157ac:	add	r1, lr, r5
   157b0:	sub	r2, r7, r5
   157b4:	bl	2e470 <__assert_fail@plt+0x1cd10>
   157b8:	cmn	r0, #2
   157bc:	beq	15814 <__assert_fail@plt+0x40b4>
   157c0:	cmn	r0, #1
   157c4:	beq	15808 <__assert_fail@plt+0x40a8>
   157c8:	ldr	r5, [sp, #68]	; 0x44
   157cc:	cmp	r0, #0
   157d0:	beq	15850 <__assert_fail@plt+0x40f0>
   157d4:	add	r5, r0, r5
   157d8:	ldr	r0, [fp, #-44]	; 0xffffffd4
   157dc:	bl	1152c <iswprint@plt>
   157e0:	cmp	r0, #0
   157e4:	sub	r4, fp, #40	; 0x28
   157e8:	movwne	r0, #1
   157ec:	and	r8, r8, r0
   157f0:	mov	r0, r4
   157f4:	bl	114b4 <mbsinit@plt>
   157f8:	ldr	lr, [fp, #-80]	; 0xffffffb0
   157fc:	cmp	r0, #0
   15800:	beq	1579c <__assert_fail@plt+0x403c>
   15804:	b	15854 <__assert_fail@plt+0x40f4>
   15808:	mov	r8, #0
   1580c:	ldr	lr, [fp, #-80]	; 0xffffffb0
   15810:	b	15848 <__assert_fail@plt+0x40e8>
   15814:	ldr	lr, [fp, #-80]	; 0xffffffb0
   15818:	mov	r8, #0
   1581c:	cmp	r5, r7
   15820:	bcs	15848 <__assert_fail@plt+0x40e8>
   15824:	ldrb	r0, [lr, r5]
   15828:	cmp	r0, #0
   1582c:	beq	15848 <__assert_fail@plt+0x40e8>
   15830:	ldr	r0, [sp, #68]	; 0x44
   15834:	add	r0, r0, #1
   15838:	add	r5, r0, sl
   1583c:	str	r0, [sp, #68]	; 0x44
   15840:	cmp	r5, r7
   15844:	bcc	15824 <__assert_fail@plt+0x40c4>
   15848:	ldr	r5, [sp, #68]	; 0x44
   1584c:	b	15854 <__assert_fail@plt+0x40f4>
   15850:	ldr	lr, [fp, #-80]	; 0xffffffb0
   15854:	mov	r1, r5
   15858:	ldr	r5, [sp, #28]
   1585c:	ldr	r4, [sp, #84]	; 0x54
   15860:	ldr	r0, [sp, #52]	; 0x34
   15864:	ldr	ip, [fp, #-84]	; 0xffffffac
   15868:	cmp	r1, #1
   1586c:	orr	r2, r8, r0
   15870:	mov	r0, r1
   15874:	bhi	15880 <__assert_fail@plt+0x4120>
   15878:	tst	r2, #1
   1587c:	bne	150b8 <__assert_fail@plt+0x3958>
   15880:	add	r0, r0, sl
   15884:	str	r2, [sp, #84]	; 0x54
   15888:	str	r0, [fp, #-56]	; 0xffffffc8
   1588c:	mov	r0, #0
   15890:	tst	r2, #1
   15894:	bne	15974 <__assert_fail@plt+0x4214>
   15898:	ldr	r1, [fp, #-76]	; 0xffffffb4
   1589c:	tst	r1, #1
   158a0:	bne	15af4 <__assert_fail@plt+0x4394>
   158a4:	ldr	r1, [fp, #-64]	; 0xffffffc0
   158a8:	ldr	r0, [fp, #-52]	; 0xffffffcc
   158ac:	subs	r2, r1, #2
   158b0:	movwne	r2, #1
   158b4:	orr	r2, r2, r0
   158b8:	tst	r2, #1
   158bc:	bne	158f8 <__assert_fail@plt+0x4198>
   158c0:	cmp	r9, r5
   158c4:	add	r2, r9, #1
   158c8:	mov	r0, #1
   158cc:	movcc	r1, #39	; 0x27
   158d0:	str	r0, [fp, #-52]	; 0xffffffcc
   158d4:	strbcc	r1, [ip, r9]
   158d8:	cmp	r2, r5
   158dc:	movcc	r1, #36	; 0x24
   158e0:	strbcc	r1, [ip, r2]
   158e4:	add	r2, r9, #2
   158e8:	add	r9, r9, #3
   158ec:	cmp	r2, r5
   158f0:	movcc	r1, #39	; 0x27
   158f4:	strbcc	r1, [ip, r2]
   158f8:	cmp	r9, r5
   158fc:	add	r2, r9, #1
   15900:	movcc	r1, #92	; 0x5c
   15904:	strbcc	r1, [ip, r9]
   15908:	cmp	r2, r5
   1590c:	bcs	15920 <__assert_fail@plt+0x41c0>
   15910:	uxtb	r3, r6
   15914:	mov	r1, #48	; 0x30
   15918:	orr	r3, r1, r3, lsr #6
   1591c:	strb	r3, [ip, r2]
   15920:	add	r2, r9, #2
   15924:	add	r9, r9, #3
   15928:	cmp	r2, r5
   1592c:	lsrcc	r3, r6, #3
   15930:	movcc	r1, #6
   15934:	bficc	r3, r1, #3, #29
   15938:	mov	r1, #6
   1593c:	bfi	r6, r1, #3, #29
   15940:	strbcc	r3, [ip, r2]
   15944:	mov	r2, #1
   15948:	b	159a8 <__assert_fail@plt+0x4248>
   1594c:	ldr	r1, [sp, #80]	; 0x50
   15950:	cmp	r9, r2
   15954:	mov	r5, r2
   15958:	ldr	r2, [sp, #84]	; 0x54
   1595c:	strbcc	r6, [ip, r9]
   15960:	add	r9, r9, #1
   15964:	ldrb	r6, [r1, sl]
   15968:	mov	sl, r3
   1596c:	tst	r2, #1
   15970:	beq	15898 <__assert_fail@plt+0x4138>
   15974:	ldr	r1, [fp, #-48]	; 0xffffffd0
   15978:	tst	r1, #1
   1597c:	beq	1599c <__assert_fail@plt+0x423c>
   15980:	cmp	r9, r5
   15984:	mov	r2, r0
   15988:	movcc	r1, #92	; 0x5c
   1598c:	strbcc	r1, [ip, r9]
   15990:	add	r9, r9, #1
   15994:	mov	r1, #0
   15998:	b	159a4 <__assert_fail@plt+0x4244>
   1599c:	mov	r1, #0
   159a0:	mov	r2, r0
   159a4:	str	r1, [fp, #-48]	; 0xffffffd0
   159a8:	mov	r0, r2
   159ac:	and	r1, r2, #1
   159b0:	ldr	r2, [fp, #-56]	; 0xffffffc8
   159b4:	add	r3, sl, #1
   159b8:	cmp	r2, r3
   159bc:	bls	15a1c <__assert_fail@plt+0x42bc>
   159c0:	mov	r2, r5
   159c4:	ldr	r5, [fp, #-52]	; 0xffffffcc
   159c8:	cmp	r1, #0
   159cc:	movwne	r1, #1
   159d0:	mvn	r5, r5
   159d4:	orr	r5, r5, r1
   159d8:	tst	r5, #1
   159dc:	bne	1594c <__assert_fail@plt+0x41ec>
   159e0:	cmp	r9, r2
   159e4:	movcc	r5, r4
   159e8:	movcc	r4, #39	; 0x27
   159ec:	strbcc	r4, [ip, r9]
   159f0:	movcc	r4, r5
   159f4:	add	r5, r9, #1
   159f8:	add	r9, r9, #2
   159fc:	cmp	r5, r2
   15a00:	movcc	r1, r4
   15a04:	movcc	r4, #39	; 0x27
   15a08:	strbcc	r4, [ip, r5]
   15a0c:	movcc	r4, r1
   15a10:	mov	r1, #0
   15a14:	str	r1, [fp, #-52]	; 0xffffffcc
   15a18:	b	1594c <__assert_fail@plt+0x41ec>
   15a1c:	cmp	r1, #0
   15a20:	movwne	r1, #1
   15a24:	str	r1, [fp, #-56]	; 0xffffffc8
   15a28:	ldr	r0, [fp, #-56]	; 0xffffffc8
   15a2c:	cmp	r0, #0
   15a30:	beq	15458 <__assert_fail@plt+0x3cf8>
   15a34:	b	1548c <__assert_fail@plt+0x3d2c>
   15a38:	mov	r8, #0
   15a3c:	mov	r4, r1
   15a40:	ldr	r0, [fp, #-68]	; 0xffffffbc
   15a44:	tst	r0, #1
   15a48:	beq	150c4 <__assert_fail@plt+0x3964>
   15a4c:	b	15378 <__assert_fail@plt+0x3c18>
   15a50:	mov	r7, sl
   15a54:	b	15a5c <__assert_fail@plt+0x42fc>
   15a58:	mvn	r7, #0
   15a5c:	ldr	r1, [fp, #-64]	; 0xffffffc0
   15a60:	ldr	r3, [fp, #-76]	; 0xffffffb4
   15a64:	ldr	r2, [sp, #88]	; 0x58
   15a68:	eor	r0, r1, #2
   15a6c:	orr	r0, r0, r9
   15a70:	clz	r0, r0
   15a74:	lsr	r0, r0, #5
   15a78:	tst	r3, r0
   15a7c:	bne	15af4 <__assert_fail@plt+0x4394>
   15a80:	subs	r0, r1, #2
   15a84:	movwne	r0, #1
   15a88:	orr	r0, r3, r0
   15a8c:	tst	r0, #1
   15a90:	ldreq	r0, [sp, #60]	; 0x3c
   15a94:	eoreq	r0, r0, #1
   15a98:	tsteq	r0, #1
   15a9c:	bne	15bd0 <__assert_fail@plt+0x4470>
   15aa0:	tst	r4, #1
   15aa4:	bne	15b94 <__assert_fail@plt+0x4434>
   15aa8:	ldr	r6, [sp, #56]	; 0x38
   15aac:	mov	r8, #0
   15ab0:	cmp	r6, #0
   15ab4:	beq	15bcc <__assert_fail@plt+0x446c>
   15ab8:	mov	r1, #0
   15abc:	mov	r4, #2
   15ac0:	cmp	r5, #0
   15ac4:	mov	r0, r2
   15ac8:	mov	r3, #0
   15acc:	str	r1, [sp, #84]	; 0x54
   15ad0:	beq	14918 <__assert_fail@plt+0x31b8>
   15ad4:	b	15bd0 <__assert_fail@plt+0x4470>
   15ad8:	movw	r0, #62818	; 0xf562
   15adc:	movt	r0, #2
   15ae0:	str	r0, [sp, #76]	; 0x4c
   15ae4:	mov	r9, #0
   15ae8:	tst	r8, #1
   15aec:	beq	14bb0 <__assert_fail@plt+0x3450>
   15af0:	b	14cf0 <__assert_fail@plt+0x3590>
   15af4:	ldr	r1, [sp, #88]	; 0x58
   15af8:	mov	r0, #2
   15afc:	tst	r1, #1
   15b00:	movwne	r0, #4
   15b04:	ldr	r2, [fp, #-64]	; 0xffffffc0
   15b08:	ldr	r1, [fp, #12]
   15b0c:	cmp	r2, #2
   15b10:	moveq	r2, r0
   15b14:	b	15b4c <__assert_fail@plt+0x43ec>
   15b18:	ldr	ip, [fp, #-84]	; 0xffffffac
   15b1c:	ldr	lr, [fp, #-80]	; 0xffffffb0
   15b20:	ldr	r1, [fp, #12]
   15b24:	ldr	r2, [fp, #-64]	; 0xffffffc0
   15b28:	b	15b4c <__assert_fail@plt+0x43ec>
   15b2c:	ldr	r1, [sp, #88]	; 0x58
   15b30:	ldr	lr, [fp, #-80]	; 0xffffffb0
   15b34:	ldr	r5, [sp, #28]
   15b38:	mov	r0, #2
   15b3c:	tst	r1, #1
   15b40:	ldr	r1, [fp, #12]
   15b44:	movwne	r0, #4
   15b48:	mov	r2, r0
   15b4c:	mov	r0, #0
   15b50:	bic	r1, r1, #2
   15b54:	str	r2, [sp]
   15b58:	mov	r2, lr
   15b5c:	str	r0, [sp, #8]
   15b60:	ldr	r0, [sp, #72]	; 0x48
   15b64:	str	r1, [sp, #4]
   15b68:	mov	r1, r5
   15b6c:	str	r0, [sp, #12]
   15b70:	ldr	r0, [sp, #76]	; 0x4c
   15b74:	str	r0, [sp, #16]
   15b78:	mov	r0, ip
   15b7c:	mov	r3, r7
   15b80:	bl	1488c <__assert_fail@plt+0x312c>
   15b84:	mov	r9, r0
   15b88:	mov	r0, r9
   15b8c:	sub	sp, fp, #28
   15b90:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15b94:	mov	r0, #5
   15b98:	ldr	r1, [sp, #56]	; 0x38
   15b9c:	ldr	r2, [fp, #-80]	; 0xffffffb0
   15ba0:	str	r0, [sp]
   15ba4:	ldr	r0, [fp, #12]
   15ba8:	str	r0, [sp, #4]
   15bac:	ldr	r0, [fp, #16]
   15bb0:	str	r0, [sp, #8]
   15bb4:	ldr	r0, [sp, #72]	; 0x48
   15bb8:	str	r0, [sp, #12]
   15bbc:	ldr	r0, [sp, #76]	; 0x4c
   15bc0:	str	r0, [sp, #16]
   15bc4:	ldr	r0, [fp, #-84]	; 0xffffffac
   15bc8:	b	15b7c <__assert_fail@plt+0x441c>
   15bcc:	mov	r3, #0
   15bd0:	ldr	r1, [fp, #-88]	; 0xffffffa8
   15bd4:	cmp	r1, #0
   15bd8:	beq	15c14 <__assert_fail@plt+0x44b4>
   15bdc:	ldr	r2, [fp, #-84]	; 0xffffffac
   15be0:	tst	r3, #1
   15be4:	bne	15c18 <__assert_fail@plt+0x44b8>
   15be8:	ldrb	r0, [r1]
   15bec:	cmp	r0, #0
   15bf0:	beq	15c18 <__assert_fail@plt+0x44b8>
   15bf4:	add	r1, r1, #1
   15bf8:	cmp	r9, r5
   15bfc:	strbcc	r0, [r2, r9]
   15c00:	add	r9, r9, #1
   15c04:	ldrb	r0, [r1], #1
   15c08:	cmp	r0, #0
   15c0c:	bne	15bf8 <__assert_fail@plt+0x4498>
   15c10:	b	15c18 <__assert_fail@plt+0x44b8>
   15c14:	ldr	r2, [fp, #-84]	; 0xffffffac
   15c18:	cmp	r9, r5
   15c1c:	movcc	r0, #0
   15c20:	strbcc	r0, [r2, r9]
   15c24:	mov	r0, r9
   15c28:	sub	sp, fp, #28
   15c2c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15c30:	mov	r0, #4
   15c34:	b	15b04 <__assert_fail@plt+0x43a4>
   15c38:	bl	1173c <abort@plt>
   15c3c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15c40:	add	fp, sp, #28
   15c44:	sub	sp, sp, #28
   15c48:	movw	r5, #696	; 0x2b8
   15c4c:	cmp	r2, #0
   15c50:	mov	r4, r1
   15c54:	mov	r7, r0
   15c58:	str	r0, [sp, #20]
   15c5c:	movt	r5, #4
   15c60:	movne	r5, r2
   15c64:	bl	11640 <__errno_location@plt>
   15c68:	mov	sl, r0
   15c6c:	ldr	r2, [r5, #40]	; 0x28
   15c70:	ldr	r3, [r5, #44]	; 0x2c
   15c74:	ldm	r5, {r0, r1}
   15c78:	orr	r8, r1, #1
   15c7c:	add	r9, r5, #8
   15c80:	mov	r1, #0
   15c84:	ldr	r6, [sl]
   15c88:	stm	sp, {r0, r8, r9}
   15c8c:	mov	r0, #0
   15c90:	str	r2, [sp, #12]
   15c94:	str	r3, [sp, #16]
   15c98:	mov	r2, r7
   15c9c:	mov	r3, r4
   15ca0:	str	r6, [sp, #24]
   15ca4:	mov	r6, r4
   15ca8:	bl	1488c <__assert_fail@plt+0x312c>
   15cac:	add	r7, r0, #1
   15cb0:	mov	r0, r7
   15cb4:	bl	2b408 <__assert_fail@plt+0x19ca8>
   15cb8:	mov	r4, r0
   15cbc:	ldr	r0, [r5]
   15cc0:	ldr	r2, [r5, #44]	; 0x2c
   15cc4:	ldr	r1, [r5, #40]	; 0x28
   15cc8:	mov	r3, r6
   15ccc:	stm	sp, {r0, r8, r9}
   15cd0:	str	r2, [sp, #16]
   15cd4:	ldr	r2, [sp, #20]
   15cd8:	str	r1, [sp, #12]
   15cdc:	mov	r0, r4
   15ce0:	mov	r1, r7
   15ce4:	bl	1488c <__assert_fail@plt+0x312c>
   15ce8:	ldr	r0, [sp, #24]
   15cec:	str	r0, [sl]
   15cf0:	mov	r0, r4
   15cf4:	sub	sp, fp, #28
   15cf8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15cfc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15d00:	add	fp, sp, #28
   15d04:	sub	sp, sp, #36	; 0x24
   15d08:	movw	r8, #696	; 0x2b8
   15d0c:	cmp	r3, #0
   15d10:	mov	r4, r2
   15d14:	str	r2, [sp, #24]
   15d18:	mov	r5, r1
   15d1c:	mov	r6, r0
   15d20:	str	r0, [sp, #20]
   15d24:	movt	r8, #4
   15d28:	movne	r8, r3
   15d2c:	bl	11640 <__errno_location@plt>
   15d30:	str	r0, [sp, #28]
   15d34:	ldr	r1, [r8, #40]	; 0x28
   15d38:	ldr	r2, [r8, #44]	; 0x2c
   15d3c:	ldr	r7, [r0]
   15d40:	cmp	r4, #0
   15d44:	add	sl, r8, #8
   15d48:	mov	r0, #0
   15d4c:	ldm	r8, {r3, r9}
   15d50:	orreq	r9, r9, #1
   15d54:	stm	sp, {r3, r9, sl}
   15d58:	str	r1, [sp, #12]
   15d5c:	str	r2, [sp, #16]
   15d60:	mov	r1, #0
   15d64:	mov	r2, r6
   15d68:	mov	r3, r5
   15d6c:	str	r7, [sp, #32]
   15d70:	mov	r7, r5
   15d74:	bl	1488c <__assert_fail@plt+0x312c>
   15d78:	add	r4, r0, #1
   15d7c:	mov	r5, r0
   15d80:	mov	r0, r4
   15d84:	bl	2b408 <__assert_fail@plt+0x19ca8>
   15d88:	mov	r6, r0
   15d8c:	ldr	r0, [r8]
   15d90:	ldr	r2, [r8, #44]	; 0x2c
   15d94:	ldr	r1, [r8, #40]	; 0x28
   15d98:	mov	r3, r7
   15d9c:	stm	sp, {r0, r9, sl}
   15da0:	str	r2, [sp, #16]
   15da4:	ldr	r2, [sp, #20]
   15da8:	str	r1, [sp, #12]
   15dac:	mov	r0, r6
   15db0:	mov	r1, r4
   15db4:	bl	1488c <__assert_fail@plt+0x312c>
   15db8:	ldr	r0, [sp, #24]
   15dbc:	ldr	r1, [sp, #32]
   15dc0:	ldr	r2, [sp, #28]
   15dc4:	cmp	r0, #0
   15dc8:	str	r1, [r2]
   15dcc:	strne	r5, [r0]
   15dd0:	mov	r0, r6
   15dd4:	sub	sp, fp, #28
   15dd8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15ddc:	push	{r4, r5, r6, r7, fp, lr}
   15de0:	add	fp, sp, #16
   15de4:	movw	r4, #408	; 0x198
   15de8:	movt	r4, #4
   15dec:	ldrd	r6, [r4]
   15df0:	cmp	r7, #2
   15df4:	blt	15e20 <__assert_fail@plt+0x46c0>
   15df8:	add	r5, r6, #12
   15dfc:	mov	r7, #0
   15e00:	ldr	r0, [r5, r7, lsl #3]
   15e04:	bl	144c0 <__assert_fail@plt+0x2d60>
   15e08:	ldr	r1, [r4, #4]
   15e0c:	add	r2, r7, #2
   15e10:	add	r0, r7, #1
   15e14:	mov	r7, r0
   15e18:	cmp	r2, r1
   15e1c:	blt	15e00 <__assert_fail@plt+0x46a0>
   15e20:	ldr	r0, [r6, #4]
   15e24:	movw	r5, #744	; 0x2e8
   15e28:	movt	r5, #4
   15e2c:	cmp	r0, r5
   15e30:	beq	15e44 <__assert_fail@plt+0x46e4>
   15e34:	bl	144c0 <__assert_fail@plt+0x2d60>
   15e38:	mov	r0, #256	; 0x100
   15e3c:	str	r0, [r4, #8]
   15e40:	str	r5, [r4, #12]
   15e44:	add	r5, r4, #8
   15e48:	cmp	r6, r5
   15e4c:	beq	15e5c <__assert_fail@plt+0x46fc>
   15e50:	mov	r0, r6
   15e54:	bl	144c0 <__assert_fail@plt+0x2d60>
   15e58:	str	r5, [r4]
   15e5c:	mov	r0, #1
   15e60:	str	r0, [r4, #4]
   15e64:	pop	{r4, r5, r6, r7, fp, pc}
   15e68:	movw	r3, #696	; 0x2b8
   15e6c:	mvn	r2, #0
   15e70:	movt	r3, #4
   15e74:	b	15e78 <__assert_fail@plt+0x4718>
   15e78:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15e7c:	add	fp, sp, #28
   15e80:	sub	sp, sp, #44	; 0x2c
   15e84:	mov	r7, r3
   15e88:	str	r2, [sp, #36]	; 0x24
   15e8c:	str	r1, [sp, #32]
   15e90:	mov	r5, r0
   15e94:	bl	11640 <__errno_location@plt>
   15e98:	cmp	r5, #0
   15e9c:	bmi	16004 <__assert_fail@plt+0x48a4>
   15ea0:	cmn	r5, #-2147483647	; 0x80000001
   15ea4:	beq	16004 <__assert_fail@plt+0x48a4>
   15ea8:	movw	r8, #408	; 0x198
   15eac:	mov	r4, r0
   15eb0:	ldr	r0, [r0]
   15eb4:	movt	r8, #4
   15eb8:	str	r4, [sp, #28]
   15ebc:	ldr	r1, [r8, #4]
   15ec0:	ldr	r6, [r8]
   15ec4:	str	r0, [sp, #24]
   15ec8:	cmp	r1, r5
   15ecc:	ble	15ed8 <__assert_fail@plt+0x4778>
   15ed0:	mov	sl, r6
   15ed4:	b	15f40 <__assert_fail@plt+0x47e0>
   15ed8:	mov	r0, #8
   15edc:	add	r9, r8, #8
   15ee0:	str	r1, [fp, #-32]	; 0xffffffe0
   15ee4:	sub	r1, r5, r1
   15ee8:	mvn	r3, #-2147483648	; 0x80000000
   15eec:	str	r0, [sp]
   15ef0:	subs	r0, r6, r9
   15ef4:	add	r2, r1, #1
   15ef8:	sub	r1, fp, #32
   15efc:	movne	r0, r6
   15f00:	bl	2b608 <__assert_fail@plt+0x19ea8>
   15f04:	mov	sl, r0
   15f08:	cmp	r6, r9
   15f0c:	str	r0, [r8]
   15f10:	bne	15f1c <__assert_fail@plt+0x47bc>
   15f14:	ldrd	r0, [r8, #8]
   15f18:	stm	sl, {r0, r1}
   15f1c:	ldr	r1, [r8, #4]
   15f20:	ldr	r2, [fp, #-32]	; 0xffffffe0
   15f24:	add	r0, sl, r1, lsl #3
   15f28:	sub	r1, r2, r1
   15f2c:	lsl	r2, r1, #3
   15f30:	mov	r1, #0
   15f34:	bl	11670 <memset@plt>
   15f38:	ldr	r0, [fp, #-32]	; 0xffffffe0
   15f3c:	str	r0, [r8, #4]
   15f40:	mov	r9, sl
   15f44:	ldm	r7, {r0, r1}
   15f48:	orr	r8, r1, #1
   15f4c:	add	r1, r7, #8
   15f50:	ldr	r2, [r7, #40]	; 0x28
   15f54:	ldr	r3, [r7, #44]	; 0x2c
   15f58:	ldr	r6, [r9, r5, lsl #3]!
   15f5c:	str	r1, [sp, #20]
   15f60:	ldr	r4, [r9, #4]!
   15f64:	stm	sp, {r0, r8}
   15f68:	add	r0, sp, #8
   15f6c:	stm	r0, {r1, r2, r3}
   15f70:	ldr	r2, [sp, #32]
   15f74:	ldr	r3, [sp, #36]	; 0x24
   15f78:	mov	r1, r6
   15f7c:	mov	r0, r4
   15f80:	bl	1488c <__assert_fail@plt+0x312c>
   15f84:	cmp	r6, r0
   15f88:	bhi	15fec <__assert_fail@plt+0x488c>
   15f8c:	add	r6, r0, #1
   15f90:	movw	r0, #744	; 0x2e8
   15f94:	movt	r0, #4
   15f98:	str	r6, [sl, r5, lsl #3]
   15f9c:	cmp	r4, r0
   15fa0:	beq	15fac <__assert_fail@plt+0x484c>
   15fa4:	mov	r0, r4
   15fa8:	bl	144c0 <__assert_fail@plt+0x2d60>
   15fac:	mov	r0, r6
   15fb0:	bl	2b408 <__assert_fail@plt+0x19ca8>
   15fb4:	str	r0, [r9]
   15fb8:	mov	r4, r0
   15fbc:	add	r3, sp, #8
   15fc0:	ldr	r0, [r7]
   15fc4:	ldr	r1, [r7, #40]	; 0x28
   15fc8:	ldr	r2, [r7, #44]	; 0x2c
   15fcc:	stm	sp, {r0, r8}
   15fd0:	ldr	r0, [sp, #20]
   15fd4:	stm	r3, {r0, r1, r2}
   15fd8:	ldr	r2, [sp, #32]
   15fdc:	ldr	r3, [sp, #36]	; 0x24
   15fe0:	mov	r0, r4
   15fe4:	mov	r1, r6
   15fe8:	bl	1488c <__assert_fail@plt+0x312c>
   15fec:	ldr	r1, [sp, #24]
   15ff0:	ldr	r0, [sp, #28]
   15ff4:	str	r1, [r0]
   15ff8:	mov	r0, r4
   15ffc:	sub	sp, fp, #28
   16000:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16004:	bl	1173c <abort@plt>
   16008:	movw	r3, #696	; 0x2b8
   1600c:	movt	r3, #4
   16010:	b	15e78 <__assert_fail@plt+0x4718>
   16014:	movw	r3, #696	; 0x2b8
   16018:	mov	r1, r0
   1601c:	mov	r0, #0
   16020:	mvn	r2, #0
   16024:	movt	r3, #4
   16028:	b	15e78 <__assert_fail@plt+0x4718>
   1602c:	movw	r3, #696	; 0x2b8
   16030:	mov	r2, r1
   16034:	mov	r1, r0
   16038:	mov	r0, #0
   1603c:	movt	r3, #4
   16040:	b	15e78 <__assert_fail@plt+0x4718>
   16044:	push	{fp, lr}
   16048:	mov	fp, sp
   1604c:	sub	sp, sp, #48	; 0x30
   16050:	vmov.i32	q8, #0	; 0x00000000
   16054:	mov	ip, #32
   16058:	mov	r3, sp
   1605c:	mov	lr, r2
   16060:	cmp	r1, #10
   16064:	add	r2, r3, #16
   16068:	vst1.64	{d16-d17}, [r3], ip
   1606c:	vst1.64	{d16-d17}, [r2]
   16070:	vst1.64	{d16-d17}, [r3]
   16074:	beq	16094 <__assert_fail@plt+0x4934>
   16078:	str	r1, [sp]
   1607c:	mov	r3, sp
   16080:	mov	r1, lr
   16084:	mvn	r2, #0
   16088:	bl	15e78 <__assert_fail@plt+0x4718>
   1608c:	mov	sp, fp
   16090:	pop	{fp, pc}
   16094:	bl	1173c <abort@plt>
   16098:	push	{r4, sl, fp, lr}
   1609c:	add	fp, sp, #8
   160a0:	sub	sp, sp, #48	; 0x30
   160a4:	vmov.i32	q8, #0	; 0x00000000
   160a8:	mov	ip, r3
   160ac:	mov	r3, sp
   160b0:	mov	lr, #32
   160b4:	cmp	r1, #10
   160b8:	add	r4, r3, #16
   160bc:	vst1.64	{d16-d17}, [r3], lr
   160c0:	vst1.64	{d16-d17}, [r4]
   160c4:	vst1.64	{d16-d17}, [r3]
   160c8:	beq	160e8 <__assert_fail@plt+0x4988>
   160cc:	str	r1, [sp]
   160d0:	mov	r1, r2
   160d4:	mov	r3, sp
   160d8:	mov	r2, ip
   160dc:	bl	15e78 <__assert_fail@plt+0x4718>
   160e0:	sub	sp, fp, #8
   160e4:	pop	{r4, sl, fp, pc}
   160e8:	bl	1173c <abort@plt>
   160ec:	push	{fp, lr}
   160f0:	mov	fp, sp
   160f4:	sub	sp, sp, #48	; 0x30
   160f8:	vmov.i32	q8, #0	; 0x00000000
   160fc:	mov	r3, sp
   16100:	mov	ip, #32
   16104:	cmp	r0, #10
   16108:	add	r2, r3, #16
   1610c:	vst1.64	{d16-d17}, [r3], ip
   16110:	vst1.64	{d16-d17}, [r2]
   16114:	vst1.64	{d16-d17}, [r3]
   16118:	beq	16138 <__assert_fail@plt+0x49d8>
   1611c:	str	r0, [sp]
   16120:	mov	r3, sp
   16124:	mov	r0, #0
   16128:	mvn	r2, #0
   1612c:	bl	15e78 <__assert_fail@plt+0x4718>
   16130:	mov	sp, fp
   16134:	pop	{fp, pc}
   16138:	bl	1173c <abort@plt>
   1613c:	push	{fp, lr}
   16140:	mov	fp, sp
   16144:	sub	sp, sp, #48	; 0x30
   16148:	vmov.i32	q8, #0	; 0x00000000
   1614c:	mov	r3, sp
   16150:	mov	ip, #32
   16154:	cmp	r0, #10
   16158:	add	lr, r3, #16
   1615c:	vst1.64	{d16-d17}, [r3], ip
   16160:	vst1.64	{d16-d17}, [lr]
   16164:	vst1.64	{d16-d17}, [r3]
   16168:	beq	16184 <__assert_fail@plt+0x4a24>
   1616c:	str	r0, [sp]
   16170:	mov	r3, sp
   16174:	mov	r0, #0
   16178:	bl	15e78 <__assert_fail@plt+0x4718>
   1617c:	mov	sp, fp
   16180:	pop	{fp, pc}
   16184:	bl	1173c <abort@plt>
   16188:	push	{r4, sl, fp, lr}
   1618c:	add	fp, sp, #8
   16190:	sub	sp, sp, #48	; 0x30
   16194:	mov	lr, r0
   16198:	movw	r0, #696	; 0x2b8
   1619c:	mov	ip, r1
   161a0:	mov	r1, #32
   161a4:	mov	r4, #1
   161a8:	movt	r0, #4
   161ac:	add	r3, r0, #16
   161b0:	vld1.64	{d16-d17}, [r0], r1
   161b4:	vld1.64	{d20-d21}, [r0]
   161b8:	vld1.64	{d18-d19}, [r3]
   161bc:	mov	r3, sp
   161c0:	add	r0, r3, #32
   161c4:	add	r1, r3, #16
   161c8:	vst1.64	{d20-d21}, [r0]
   161cc:	mov	r0, #28
   161d0:	vst1.64	{d18-d19}, [r1]
   161d4:	mov	r1, r3
   161d8:	and	r0, r0, r2, lsr #3
   161dc:	and	r2, r2, #31
   161e0:	vst1.64	{d16-d17}, [r1], r0
   161e4:	ldr	r0, [r1, #8]
   161e8:	bic	r4, r4, r0, lsr r2
   161ec:	eor	r0, r0, r4, lsl r2
   161f0:	mov	r2, ip
   161f4:	str	r0, [r1, #8]
   161f8:	mov	r0, #0
   161fc:	mov	r1, lr
   16200:	bl	15e78 <__assert_fail@plt+0x4718>
   16204:	sub	sp, fp, #8
   16208:	pop	{r4, sl, fp, pc}
   1620c:	push	{fp, lr}
   16210:	mov	fp, sp
   16214:	sub	sp, sp, #48	; 0x30
   16218:	mov	ip, r0
   1621c:	movw	r0, #696	; 0x2b8
   16220:	mov	r2, #32
   16224:	movt	r0, #4
   16228:	add	r3, r0, #16
   1622c:	vld1.64	{d16-d17}, [r0], r2
   16230:	vld1.64	{d20-d21}, [r0]
   16234:	vld1.64	{d18-d19}, [r3]
   16238:	mov	r3, sp
   1623c:	add	r0, r3, #32
   16240:	add	r2, r3, #16
   16244:	vst1.64	{d20-d21}, [r0]
   16248:	mov	r0, #28
   1624c:	vst1.64	{d18-d19}, [r2]
   16250:	mov	r2, r3
   16254:	and	r0, r0, r1, lsr #3
   16258:	and	r1, r1, #31
   1625c:	vst1.64	{d16-d17}, [r2], r0
   16260:	mov	r0, #1
   16264:	ldr	lr, [r2, #8]
   16268:	bic	r0, r0, lr, lsr r1
   1626c:	eor	r0, lr, r0, lsl r1
   16270:	mov	r1, ip
   16274:	str	r0, [r2, #8]
   16278:	mov	r0, #0
   1627c:	mvn	r2, #0
   16280:	bl	15e78 <__assert_fail@plt+0x4718>
   16284:	mov	sp, fp
   16288:	pop	{fp, pc}
   1628c:	push	{fp, lr}
   16290:	mov	fp, sp
   16294:	sub	sp, sp, #48	; 0x30
   16298:	mov	r1, r0
   1629c:	movw	r0, #696	; 0x2b8
   162a0:	mov	r3, #32
   162a4:	movt	r0, #4
   162a8:	add	r2, r0, #16
   162ac:	vld1.64	{d16-d17}, [r0], r3
   162b0:	mov	r3, sp
   162b4:	vld1.64	{d18-d19}, [r2]
   162b8:	vld1.64	{d20-d21}, [r0]
   162bc:	add	r2, r3, #16
   162c0:	add	r0, r3, #32
   162c4:	vst1.64	{d18-d19}, [r2]
   162c8:	vst1.64	{d20-d21}, [r0]
   162cc:	mov	r0, #12
   162d0:	mov	r2, r3
   162d4:	vst1.64	{d16-d17}, [r2], r0
   162d8:	ldr	r0, [r2]
   162dc:	orr	r0, r0, #67108864	; 0x4000000
   162e0:	str	r0, [r2]
   162e4:	mov	r0, #0
   162e8:	mvn	r2, #0
   162ec:	bl	15e78 <__assert_fail@plt+0x4718>
   162f0:	mov	sp, fp
   162f4:	pop	{fp, pc}
   162f8:	push	{fp, lr}
   162fc:	mov	fp, sp
   16300:	sub	sp, sp, #48	; 0x30
   16304:	mov	ip, r1
   16308:	mov	r1, r0
   1630c:	movw	r0, #696	; 0x2b8
   16310:	mov	r2, #32
   16314:	movt	r0, #4
   16318:	add	r3, r0, #16
   1631c:	vld1.64	{d16-d17}, [r0], r2
   16320:	vld1.64	{d18-d19}, [r3]
   16324:	vld1.64	{d20-d21}, [r0]
   16328:	mov	r3, sp
   1632c:	add	r2, r3, #16
   16330:	add	r0, r3, #32
   16334:	vst1.64	{d18-d19}, [r2]
   16338:	vst1.64	{d20-d21}, [r0]
   1633c:	mov	r0, #12
   16340:	mov	r2, r3
   16344:	vst1.64	{d16-d17}, [r2], r0
   16348:	ldr	r0, [r2]
   1634c:	orr	r0, r0, #67108864	; 0x4000000
   16350:	str	r0, [r2]
   16354:	mov	r0, #0
   16358:	mov	r2, ip
   1635c:	bl	15e78 <__assert_fail@plt+0x4718>
   16360:	mov	sp, fp
   16364:	pop	{fp, pc}
   16368:	push	{r4, sl, fp, lr}
   1636c:	add	fp, sp, #8
   16370:	sub	sp, sp, #96	; 0x60
   16374:	vmov.i32	q8, #0	; 0x00000000
   16378:	mov	ip, r2
   1637c:	mov	r2, sp
   16380:	mov	r4, #28
   16384:	cmp	r1, #10
   16388:	mov	r3, r2
   1638c:	add	lr, r2, #16
   16390:	vst1.64	{d16-d17}, [r3], r4
   16394:	vst1.64	{d16-d17}, [lr]
   16398:	vst1.32	{d16-d17}, [r3]
   1639c:	beq	163ec <__assert_fail@plt+0x4c8c>
   163a0:	vld1.64	{d16-d17}, [r2], r4
   163a4:	vld1.64	{d18-d19}, [lr]
   163a8:	add	r3, sp, #48	; 0x30
   163ac:	vld1.32	{d20-d21}, [r2]
   163b0:	add	r2, r3, #20
   163b4:	add	r4, r3, #4
   163b8:	vst1.32	{d18-d19}, [r2]
   163bc:	add	r2, r3, #32
   163c0:	vst1.32	{d16-d17}, [r4]
   163c4:	vst1.32	{d20-d21}, [r2]
   163c8:	str	r1, [sp, #48]	; 0x30
   163cc:	mvn	r2, #0
   163d0:	ldr	r1, [sp, #60]	; 0x3c
   163d4:	orr	r1, r1, #67108864	; 0x4000000
   163d8:	str	r1, [sp, #60]	; 0x3c
   163dc:	mov	r1, ip
   163e0:	bl	15e78 <__assert_fail@plt+0x4718>
   163e4:	sub	sp, fp, #8
   163e8:	pop	{r4, sl, fp, pc}
   163ec:	bl	1173c <abort@plt>
   163f0:	push	{r4, r5, r6, sl, fp, lr}
   163f4:	add	fp, sp, #16
   163f8:	sub	sp, sp, #48	; 0x30
   163fc:	mov	ip, r3
   16400:	movw	r3, #696	; 0x2b8
   16404:	mov	r6, #32
   16408:	cmp	r1, #0
   1640c:	mov	r4, sp
   16410:	movt	r3, #4
   16414:	cmpne	r2, #0
   16418:	add	r5, r4, #16
   1641c:	add	lr, r3, #16
   16420:	vld1.64	{d16-d17}, [r3], r6
   16424:	vld1.64	{d18-d19}, [lr]
   16428:	vld1.64	{d20-d21}, [r3]
   1642c:	mov	r3, #10
   16430:	vst1.64	{d16-d17}, [r4], r6
   16434:	vst1.64	{d18-d19}, [r5]
   16438:	vst1.64	{d20-d21}, [r4]
   1643c:	str	r3, [sp]
   16440:	bne	16448 <__assert_fail@plt+0x4ce8>
   16444:	bl	1173c <abort@plt>
   16448:	str	r2, [sp, #44]	; 0x2c
   1644c:	str	r1, [sp, #40]	; 0x28
   16450:	mov	r3, sp
   16454:	mov	r1, ip
   16458:	mvn	r2, #0
   1645c:	bl	15e78 <__assert_fail@plt+0x4718>
   16460:	sub	sp, fp, #16
   16464:	pop	{r4, r5, r6, sl, fp, pc}
   16468:	push	{r4, r5, r6, sl, fp, lr}
   1646c:	add	fp, sp, #16
   16470:	sub	sp, sp, #48	; 0x30
   16474:	mov	lr, r3
   16478:	movw	r3, #696	; 0x2b8
   1647c:	mov	r6, #32
   16480:	cmp	r1, #0
   16484:	mov	r4, sp
   16488:	movt	r3, #4
   1648c:	cmpne	r2, #0
   16490:	add	r5, r4, #16
   16494:	add	ip, r3, #16
   16498:	vld1.64	{d16-d17}, [r3], r6
   1649c:	vld1.64	{d18-d19}, [ip]
   164a0:	vld1.64	{d20-d21}, [r3]
   164a4:	mov	r3, #10
   164a8:	vst1.64	{d16-d17}, [r4], r6
   164ac:	vst1.64	{d18-d19}, [r5]
   164b0:	vst1.64	{d20-d21}, [r4]
   164b4:	str	r3, [sp]
   164b8:	bne	164c0 <__assert_fail@plt+0x4d60>
   164bc:	bl	1173c <abort@plt>
   164c0:	ldr	ip, [fp, #8]
   164c4:	str	r2, [sp, #44]	; 0x2c
   164c8:	str	r1, [sp, #40]	; 0x28
   164cc:	mov	r3, sp
   164d0:	mov	r1, lr
   164d4:	mov	r2, ip
   164d8:	bl	15e78 <__assert_fail@plt+0x4718>
   164dc:	sub	sp, fp, #16
   164e0:	pop	{r4, r5, r6, sl, fp, pc}
   164e4:	push	{r4, sl, fp, lr}
   164e8:	add	fp, sp, #8
   164ec:	sub	sp, sp, #48	; 0x30
   164f0:	movw	r3, #696	; 0x2b8
   164f4:	mov	lr, #32
   164f8:	mov	ip, r2
   164fc:	cmp	r0, #0
   16500:	movt	r3, #4
   16504:	cmpne	r1, #0
   16508:	add	r2, r3, #16
   1650c:	vld1.64	{d16-d17}, [r3], lr
   16510:	vld1.64	{d20-d21}, [r3]
   16514:	vld1.64	{d18-d19}, [r2]
   16518:	mov	r2, sp
   1651c:	add	r4, r2, #16
   16520:	vst1.64	{d16-d17}, [r2], lr
   16524:	vst1.64	{d20-d21}, [r2]
   16528:	mov	r2, #10
   1652c:	vst1.64	{d18-d19}, [r4]
   16530:	str	r2, [sp]
   16534:	bne	1653c <__assert_fail@plt+0x4ddc>
   16538:	bl	1173c <abort@plt>
   1653c:	str	r1, [sp, #44]	; 0x2c
   16540:	str	r0, [sp, #40]	; 0x28
   16544:	mov	r3, sp
   16548:	mov	r0, #0
   1654c:	mov	r1, ip
   16550:	mvn	r2, #0
   16554:	bl	15e78 <__assert_fail@plt+0x4718>
   16558:	sub	sp, fp, #8
   1655c:	pop	{r4, sl, fp, pc}
   16560:	push	{r4, r5, fp, lr}
   16564:	add	fp, sp, #8
   16568:	sub	sp, sp, #48	; 0x30
   1656c:	mov	ip, r3
   16570:	movw	r3, #696	; 0x2b8
   16574:	mov	r4, #32
   16578:	mov	lr, r2
   1657c:	cmp	r0, #0
   16580:	movt	r3, #4
   16584:	cmpne	r1, #0
   16588:	add	r2, r3, #16
   1658c:	vld1.64	{d16-d17}, [r3], r4
   16590:	vld1.64	{d20-d21}, [r3]
   16594:	vld1.64	{d18-d19}, [r2]
   16598:	mov	r2, sp
   1659c:	add	r5, r2, #16
   165a0:	vst1.64	{d16-d17}, [r2], r4
   165a4:	vst1.64	{d20-d21}, [r2]
   165a8:	mov	r2, #10
   165ac:	vst1.64	{d18-d19}, [r5]
   165b0:	str	r2, [sp]
   165b4:	bne	165bc <__assert_fail@plt+0x4e5c>
   165b8:	bl	1173c <abort@plt>
   165bc:	str	r1, [sp, #44]	; 0x2c
   165c0:	str	r0, [sp, #40]	; 0x28
   165c4:	mov	r3, sp
   165c8:	mov	r0, #0
   165cc:	mov	r1, lr
   165d0:	mov	r2, ip
   165d4:	bl	15e78 <__assert_fail@plt+0x4718>
   165d8:	sub	sp, fp, #8
   165dc:	pop	{r4, r5, fp, pc}
   165e0:	movw	r3, #360	; 0x168
   165e4:	movt	r3, #4
   165e8:	b	15e78 <__assert_fail@plt+0x4718>
   165ec:	movw	r3, #360	; 0x168
   165f0:	mov	r2, r1
   165f4:	mov	r1, r0
   165f8:	mov	r0, #0
   165fc:	movt	r3, #4
   16600:	b	15e78 <__assert_fail@plt+0x4718>
   16604:	movw	r3, #360	; 0x168
   16608:	mvn	r2, #0
   1660c:	movt	r3, #4
   16610:	b	15e78 <__assert_fail@plt+0x4718>
   16614:	movw	r3, #360	; 0x168
   16618:	mov	r1, r0
   1661c:	mov	r0, #0
   16620:	mvn	r2, #0
   16624:	movt	r3, #4
   16628:	b	15e78 <__assert_fail@plt+0x4718>
   1662c:	andeq	r0, r0, r0
   16630:	push	{fp, lr}
   16634:	mov	fp, sp
   16638:	mov	lr, r0
   1663c:	movw	r0, #1004	; 0x3ec
   16640:	mov	ip, r1
   16644:	ldrb	r1, [r2, #28]
   16648:	movt	r0, #4
   1664c:	ldr	r3, [r0]
   16650:	mov	r0, #16
   16654:	and	r1, r1, #111	; 0x6f
   16658:	and	r0, r0, r3, lsr #21
   1665c:	orr	r0, r1, r0
   16660:	mov	r1, lr
   16664:	orr	r0, r0, #128	; 0x80
   16668:	strb	r0, [r2, #28]
   1666c:	mov	r0, r2
   16670:	mov	r2, ip
   16674:	bl	166b0 <__assert_fail@plt+0x4f50>
   16678:	cmp	r0, #0
   1667c:	beq	166a8 <__assert_fail@plt+0x4f48>
   16680:	movw	r1, #63296	; 0xf740
   16684:	mov	r2, #5
   16688:	movt	r1, #2
   1668c:	ldr	r0, [r1, r0, lsl #2]
   16690:	movw	r1, #62912	; 0xf5c0
   16694:	movt	r1, #2
   16698:	add	r1, r1, r0
   1669c:	mov	r0, #0
   166a0:	pop	{fp, lr}
   166a4:	b	114d8 <dcgettext@plt>
   166a8:	mov	r0, #0
   166ac:	pop	{fp, pc}
   166b0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   166b4:	add	fp, sp, #28
   166b8:	sub	sp, sp, #140	; 0x8c
   166bc:	mov	sl, r0
   166c0:	mov	r0, #0
   166c4:	mov	r9, r3
   166c8:	mov	r7, r2
   166cc:	str	r1, [sp, #28]
   166d0:	str	r0, [fp, #-52]	; 0xffffffcc
   166d4:	str	r0, [sl, #24]
   166d8:	str	r0, [sl, #8]
   166dc:	str	r3, [sl, #12]
   166e0:	ldrb	r0, [sl, #28]
   166e4:	and	r0, r0, #144	; 0x90
   166e8:	strb	r0, [sl, #28]
   166ec:	ldr	r0, [sl, #4]
   166f0:	ldr	r5, [sl]
   166f4:	cmp	r0, #159	; 0x9f
   166f8:	bls	17214 <__assert_fail@plt+0x5ab4>
   166fc:	mov	r0, #160	; 0xa0
   16700:	mov	r1, #0
   16704:	mov	r2, #160	; 0xa0
   16708:	str	r0, [sl, #8]
   1670c:	mov	r0, r5
   16710:	bl	11670 <memset@plt>
   16714:	mov	r0, #31
   16718:	str	r0, [r5, #64]	; 0x40
   1671c:	movw	r0, #43689	; 0xaaa9
   16720:	movt	r0, #2730	; 0xaaa
   16724:	cmp	r7, r0
   16728:	bhi	16b28 <__assert_fail@plt+0x53c8>
   1672c:	add	r8, r7, #1
   16730:	lsl	r0, r8, #3
   16734:	str	r8, [r5, #4]
   16738:	bl	2e08c <__assert_fail@plt+0x1c92c>
   1673c:	str	r0, [r5]
   16740:	mov	r0, #1
   16744:	mov	r6, r0
   16748:	lsl	r0, r0, #1
   1674c:	cmp	r6, r7
   16750:	bls	16744 <__assert_fail@plt+0x4fe4>
   16754:	mov	r0, #12
   16758:	mov	r1, r6
   1675c:	bl	2e038 <__assert_fail@plt+0x1c8d8>
   16760:	sub	r1, r6, #1
   16764:	str	r1, [r5, #68]	; 0x44
   16768:	str	r0, [r5, #32]
   1676c:	bl	1155c <__ctype_get_mb_cur_max@plt>
   16770:	str	r0, [r5, #92]	; 0x5c
   16774:	mov	r0, #14
   16778:	bl	116f4 <nl_langinfo@plt>
   1677c:	ldrb	r1, [r0]
   16780:	orr	r1, r1, #32
   16784:	cmp	r1, #117	; 0x75
   16788:	bne	167d8 <__assert_fail@plt+0x5078>
   1678c:	ldrb	r1, [r0, #1]
   16790:	orr	r1, r1, #32
   16794:	cmp	r1, #116	; 0x74
   16798:	bne	167d8 <__assert_fail@plt+0x5078>
   1679c:	ldrb	r1, [r0, #2]
   167a0:	orr	r1, r1, #32
   167a4:	cmp	r1, #102	; 0x66
   167a8:	bne	167d8 <__assert_fail@plt+0x5078>
   167ac:	ldrb	r1, [r0, #3]!
   167b0:	cmp	r1, #45	; 0x2d
   167b4:	movw	r1, #63412	; 0xf7b4
   167b8:	movt	r1, #2
   167bc:	addeq	r0, r0, #1
   167c0:	bl	11418 <strcmp@plt>
   167c4:	cmp	r0, #0
   167c8:	bne	167d8 <__assert_fail@plt+0x5078>
   167cc:	ldrb	r0, [r5, #88]	; 0x58
   167d0:	orr	r0, r0, #4
   167d4:	strb	r0, [r5, #88]	; 0x58
   167d8:	ldrb	r0, [r5, #88]	; 0x58
   167dc:	and	r1, r0, #247	; 0xf7
   167e0:	strb	r1, [r5, #88]	; 0x58
   167e4:	ldr	r1, [r5, #92]	; 0x5c
   167e8:	cmp	r1, #2
   167ec:	blt	16b14 <__assert_fail@plt+0x53b4>
   167f0:	tst	r0, #4
   167f4:	bne	16870 <__assert_fail@plt+0x5110>
   167f8:	mov	r0, #32
   167fc:	mov	r1, #1
   16800:	mov	r4, #1
   16804:	bl	2e038 <__assert_fail@plt+0x1c8d8>
   16808:	cmp	r0, #0
   1680c:	str	r0, [r5, #60]	; 0x3c
   16810:	beq	16b28 <__assert_fail@plt+0x53c8>
   16814:	mov	r6, #0
   16818:	mov	r0, r6
   1681c:	bl	1167c <btowc@plt>
   16820:	cmn	r0, #1
   16824:	bne	16848 <__assert_fail@plt+0x50e8>
   16828:	b	16858 <__assert_fail@plt+0x50f8>
   1682c:	add	r6, r6, #1
   16830:	cmp	r6, #32
   16834:	beq	16880 <__assert_fail@plt+0x5120>
   16838:	mov	r0, r6
   1683c:	bl	1167c <btowc@plt>
   16840:	cmn	r0, #1
   16844:	beq	16858 <__assert_fail@plt+0x50f8>
   16848:	ldr	r1, [r5, #60]	; 0x3c
   1684c:	ldr	r2, [r1]
   16850:	orr	r2, r2, r4, lsl r6
   16854:	str	r2, [r1]
   16858:	cmp	r6, r0
   1685c:	beq	1682c <__assert_fail@plt+0x50cc>
   16860:	ldrb	r0, [r5, #88]	; 0x58
   16864:	orr	r0, r0, #8
   16868:	strb	r0, [r5, #88]	; 0x58
   1686c:	b	1682c <__assert_fail@plt+0x50cc>
   16870:	movw	r0, #63364	; 0xf784
   16874:	movt	r0, #2
   16878:	str	r0, [r5, #60]	; 0x3c
   1687c:	b	16b14 <__assert_fail@plt+0x53b4>
   16880:	mov	r6, #32
   16884:	mov	r4, #1
   16888:	mov	r0, r6
   1688c:	bl	1167c <btowc@plt>
   16890:	cmn	r0, #1
   16894:	bne	168c0 <__assert_fail@plt+0x5160>
   16898:	b	168d4 <__assert_fail@plt+0x5174>
   1689c:	sub	r1, r6, #31
   168a0:	add	r0, r6, #1
   168a4:	cmp	r1, #32
   168a8:	mov	r6, r0
   168ac:	beq	168ec <__assert_fail@plt+0x518c>
   168b0:	mov	r0, r6
   168b4:	bl	1167c <btowc@plt>
   168b8:	cmn	r0, #1
   168bc:	beq	168d4 <__assert_fail@plt+0x5174>
   168c0:	ldr	r2, [r5, #60]	; 0x3c
   168c4:	sub	r1, r6, #32
   168c8:	ldr	r3, [r2, #4]
   168cc:	orr	r1, r3, r4, lsl r1
   168d0:	str	r1, [r2, #4]
   168d4:	cmp	r0, r6
   168d8:	beq	1689c <__assert_fail@plt+0x513c>
   168dc:	ldrb	r0, [r5, #88]	; 0x58
   168e0:	orr	r0, r0, #8
   168e4:	strb	r0, [r5, #88]	; 0x58
   168e8:	b	1689c <__assert_fail@plt+0x513c>
   168ec:	mov	r6, #64	; 0x40
   168f0:	mov	r4, #1
   168f4:	mov	r0, r6
   168f8:	bl	1167c <btowc@plt>
   168fc:	cmn	r0, #1
   16900:	bne	1692c <__assert_fail@plt+0x51cc>
   16904:	b	16940 <__assert_fail@plt+0x51e0>
   16908:	sub	r1, r6, #63	; 0x3f
   1690c:	add	r0, r6, #1
   16910:	cmp	r1, #32
   16914:	mov	r6, r0
   16918:	beq	16958 <__assert_fail@plt+0x51f8>
   1691c:	mov	r0, r6
   16920:	bl	1167c <btowc@plt>
   16924:	cmn	r0, #1
   16928:	beq	16940 <__assert_fail@plt+0x51e0>
   1692c:	ldr	r2, [r5, #60]	; 0x3c
   16930:	sub	r1, r6, #64	; 0x40
   16934:	ldr	r3, [r2, #8]
   16938:	orr	r1, r3, r4, lsl r1
   1693c:	str	r1, [r2, #8]
   16940:	cmp	r0, r6
   16944:	beq	16908 <__assert_fail@plt+0x51a8>
   16948:	ldrb	r0, [r5, #88]	; 0x58
   1694c:	orr	r0, r0, #8
   16950:	strb	r0, [r5, #88]	; 0x58
   16954:	b	16908 <__assert_fail@plt+0x51a8>
   16958:	mov	r6, #96	; 0x60
   1695c:	mov	r4, #1
   16960:	mov	r0, r6
   16964:	bl	1167c <btowc@plt>
   16968:	cmn	r0, #1
   1696c:	bne	16998 <__assert_fail@plt+0x5238>
   16970:	b	169ac <__assert_fail@plt+0x524c>
   16974:	sub	r1, r6, #95	; 0x5f
   16978:	add	r0, r6, #1
   1697c:	cmp	r1, #32
   16980:	mov	r6, r0
   16984:	beq	169c4 <__assert_fail@plt+0x5264>
   16988:	mov	r0, r6
   1698c:	bl	1167c <btowc@plt>
   16990:	cmn	r0, #1
   16994:	beq	169ac <__assert_fail@plt+0x524c>
   16998:	ldr	r2, [r5, #60]	; 0x3c
   1699c:	sub	r1, r6, #96	; 0x60
   169a0:	ldr	r3, [r2, #12]
   169a4:	orr	r1, r3, r4, lsl r1
   169a8:	str	r1, [r2, #12]
   169ac:	cmp	r0, r6
   169b0:	beq	16974 <__assert_fail@plt+0x5214>
   169b4:	ldrb	r0, [r5, #88]	; 0x58
   169b8:	orr	r0, r0, #8
   169bc:	strb	r0, [r5, #88]	; 0x58
   169c0:	b	16974 <__assert_fail@plt+0x5214>
   169c4:	mov	r6, #128	; 0x80
   169c8:	mov	r4, #1
   169cc:	mov	r0, r6
   169d0:	bl	1167c <btowc@plt>
   169d4:	cmn	r0, #1
   169d8:	bne	16a00 <__assert_fail@plt+0x52a0>
   169dc:	sub	r1, r6, #127	; 0x7f
   169e0:	add	r0, r6, #1
   169e4:	cmp	r1, #32
   169e8:	mov	r6, r0
   169ec:	beq	16a18 <__assert_fail@plt+0x52b8>
   169f0:	mov	r0, r6
   169f4:	bl	1167c <btowc@plt>
   169f8:	cmn	r0, #1
   169fc:	beq	169dc <__assert_fail@plt+0x527c>
   16a00:	ldr	r1, [r5, #60]	; 0x3c
   16a04:	sub	r0, r6, #128	; 0x80
   16a08:	ldr	r2, [r1, #16]
   16a0c:	orr	r0, r2, r4, lsl r0
   16a10:	str	r0, [r1, #16]
   16a14:	b	169dc <__assert_fail@plt+0x527c>
   16a18:	mov	r6, #160	; 0xa0
   16a1c:	mov	r4, #1
   16a20:	mov	r0, r6
   16a24:	bl	1167c <btowc@plt>
   16a28:	cmn	r0, #1
   16a2c:	bne	16a54 <__assert_fail@plt+0x52f4>
   16a30:	sub	r1, r6, #159	; 0x9f
   16a34:	add	r0, r6, #1
   16a38:	cmp	r1, #32
   16a3c:	mov	r6, r0
   16a40:	beq	16a6c <__assert_fail@plt+0x530c>
   16a44:	mov	r0, r6
   16a48:	bl	1167c <btowc@plt>
   16a4c:	cmn	r0, #1
   16a50:	beq	16a30 <__assert_fail@plt+0x52d0>
   16a54:	ldr	r1, [r5, #60]	; 0x3c
   16a58:	sub	r0, r6, #160	; 0xa0
   16a5c:	ldr	r2, [r1, #20]
   16a60:	orr	r0, r2, r4, lsl r0
   16a64:	str	r0, [r1, #20]
   16a68:	b	16a30 <__assert_fail@plt+0x52d0>
   16a6c:	mov	r6, #192	; 0xc0
   16a70:	mov	r4, #1
   16a74:	mov	r0, r6
   16a78:	bl	1167c <btowc@plt>
   16a7c:	cmn	r0, #1
   16a80:	bne	16aa8 <__assert_fail@plt+0x5348>
   16a84:	sub	r1, r6, #191	; 0xbf
   16a88:	add	r0, r6, #1
   16a8c:	cmp	r1, #32
   16a90:	mov	r6, r0
   16a94:	beq	16ac0 <__assert_fail@plt+0x5360>
   16a98:	mov	r0, r6
   16a9c:	bl	1167c <btowc@plt>
   16aa0:	cmn	r0, #1
   16aa4:	beq	16a84 <__assert_fail@plt+0x5324>
   16aa8:	ldr	r1, [r5, #60]	; 0x3c
   16aac:	sub	r0, r6, #192	; 0xc0
   16ab0:	ldr	r2, [r1, #24]
   16ab4:	orr	r0, r2, r4, lsl r0
   16ab8:	str	r0, [r1, #24]
   16abc:	b	16a84 <__assert_fail@plt+0x5324>
   16ac0:	mov	r6, #224	; 0xe0
   16ac4:	mov	r4, #1
   16ac8:	mov	r0, r6
   16acc:	bl	1167c <btowc@plt>
   16ad0:	cmn	r0, #1
   16ad4:	bne	16afc <__assert_fail@plt+0x539c>
   16ad8:	sub	r1, r6, #223	; 0xdf
   16adc:	add	r0, r6, #1
   16ae0:	cmp	r1, #32
   16ae4:	mov	r6, r0
   16ae8:	beq	16b14 <__assert_fail@plt+0x53b4>
   16aec:	mov	r0, r6
   16af0:	bl	1167c <btowc@plt>
   16af4:	cmn	r0, #1
   16af8:	beq	16ad8 <__assert_fail@plt+0x5378>
   16afc:	ldr	r1, [r5, #60]	; 0x3c
   16b00:	sub	r0, r6, #224	; 0xe0
   16b04:	ldr	r2, [r1, #28]
   16b08:	orr	r0, r2, r4, lsl r0
   16b0c:	str	r0, [r1, #28]
   16b10:	b	16ad8 <__assert_fail@plt+0x5378>
   16b14:	ldr	r0, [r5]
   16b18:	cmp	r0, #0
   16b1c:	ldrne	r0, [r5, #32]
   16b20:	cmpne	r0, #0
   16b24:	bne	16b50 <__assert_fail@plt+0x53f0>
   16b28:	mov	r4, #12
   16b2c:	mov	r0, r5
   16b30:	str	r4, [fp, #-52]	; 0xffffffcc
   16b34:	bl	18ce4 <__assert_fail@plt+0x7584>
   16b38:	mov	r0, #0
   16b3c:	str	r0, [sl]
   16b40:	str	r0, [sl, #4]
   16b44:	mov	r0, r4
   16b48:	sub	sp, fp, #28
   16b4c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16b50:	movw	r0, #0
   16b54:	movw	r1, #0
   16b58:	mov	r6, #0
   16b5c:	movt	r0, #0
   16b60:	movt	r1, #0
   16b64:	str	r6, [fp, #-52]	; 0xffffffcc
   16b68:	orrs	r4, r1, r0
   16b6c:	beq	16b84 <__assert_fail@plt+0x5424>
   16b70:	add	r0, r5, #136	; 0x88
   16b74:	mov	r1, #0
   16b78:	bl	11490 <pthread_mutex_init@plt>
   16b7c:	cmp	r0, #0
   16b80:	bne	16b28 <__assert_fail@plt+0x53c8>
   16b84:	vmov.i32	q8, #0	; 0x00000000
   16b88:	add	r1, sp, #32
   16b8c:	str	r4, [sp, #8]
   16b90:	ldr	r4, [sl, #20]
   16b94:	ldr	r3, [sp, #28]
   16b98:	add	r0, r1, #64	; 0x40
   16b9c:	vst1.32	{d16-d17}, [r0]
   16ba0:	add	r0, r1, #52	; 0x34
   16ba4:	vst1.32	{d16-d17}, [r0]
   16ba8:	add	r0, r1, #36	; 0x24
   16bac:	vst1.32	{d16-d17}, [r0]
   16bb0:	add	r0, r1, #20
   16bb4:	vst1.32	{d16-d17}, [r0]
   16bb8:	add	r0, r1, #4
   16bbc:	add	r1, r1, #44	; 0x2c
   16bc0:	vst1.32	{d16-d17}, [r0]
   16bc4:	str	r3, [sp, #32]
   16bc8:	ubfx	r0, r9, #22, #1
   16bcc:	str	r9, [sp, #24]
   16bd0:	vdup.32	q8, r7
   16bd4:	str	r5, [sp, #20]
   16bd8:	strb	r0, [sp, #104]	; 0x68
   16bdc:	and	r0, r9, #4194304	; 0x400000
   16be0:	str	r4, [sp, #96]	; 0x60
   16be4:	orrs	r9, r0, r4
   16be8:	str	r0, [sp, #12]
   16bec:	movwne	r9, #1
   16bf0:	cmp	r7, #1
   16bf4:	strb	r9, [sp, #107]	; 0x6b
   16bf8:	ldr	r0, [r5, #92]	; 0x5c
   16bfc:	str	r0, [sp, #112]	; 0x70
   16c00:	ldrb	r2, [r5, #88]	; 0x58
   16c04:	vst1.32	{d16-d17}, [r1]
   16c08:	ubfx	r1, r2, #3, #1
   16c0c:	strb	r1, [sp, #106]	; 0x6a
   16c10:	ubfx	r1, r2, #2, #1
   16c14:	strb	r1, [sp, #105]	; 0x69
   16c18:	blt	16c90 <__assert_fail@plt+0x5530>
   16c1c:	cmp	r0, #2
   16c20:	blt	16c4c <__assert_fail@plt+0x54ec>
   16c24:	mov	r6, #12
   16c28:	cmn	r7, #-1073741822	; 0xc0000002
   16c2c:	bhi	171f8 <__assert_fail@plt+0x5a98>
   16c30:	lsl	r1, r8, #2
   16c34:	mov	r0, #0
   16c38:	bl	2e0bc <__assert_fail@plt+0x1c95c>
   16c3c:	cmp	r0, #0
   16c40:	beq	171f8 <__assert_fail@plt+0x5a98>
   16c44:	ldr	r3, [sp, #28]
   16c48:	str	r0, [sp, #40]	; 0x28
   16c4c:	cmp	r9, #0
   16c50:	mov	r6, #0
   16c54:	mov	r9, #0
   16c58:	beq	16c80 <__assert_fail@plt+0x5520>
   16c5c:	mov	r0, #0
   16c60:	mov	r1, r8
   16c64:	bl	2e0bc <__assert_fail@plt+0x1c95c>
   16c68:	cmp	r0, #0
   16c6c:	beq	171f4 <__assert_fail@plt+0x5a94>
   16c70:	ldr	r3, [sp, #28]
   16c74:	mov	r6, r0
   16c78:	mov	r9, #1
   16c7c:	str	r0, [sp, #36]	; 0x24
   16c80:	ldr	r0, [sp, #20]
   16c84:	str	r8, [sp, #68]	; 0x44
   16c88:	ldr	r0, [r0, #92]	; 0x5c
   16c8c:	b	16c94 <__assert_fail@plt+0x5534>
   16c90:	mov	r8, #0
   16c94:	ldr	r1, [sp, #12]
   16c98:	cmp	r9, #0
   16c9c:	moveq	r6, r3
   16ca0:	str	r6, [sp, #36]	; 0x24
   16ca4:	cmp	r1, #0
   16ca8:	beq	16d98 <__assert_fail@plt+0x5638>
   16cac:	cmp	r0, #2
   16cb0:	blt	16db0 <__assert_fail@plt+0x5650>
   16cb4:	add	r0, sp, #32
   16cb8:	bl	1c110 <__assert_fail@plt+0xa9b0>
   16cbc:	ldr	r9, [sp, #20]
   16cc0:	cmp	r0, #0
   16cc4:	bne	171ec <__assert_fail@plt+0x5a8c>
   16cc8:	add	r5, sp, #32
   16ccc:	ldr	r0, [sp, #64]	; 0x40
   16cd0:	cmp	r0, r7
   16cd4:	blt	16cfc <__assert_fail@plt+0x559c>
   16cd8:	b	16ea4 <__assert_fail@plt+0x5744>
   16cdc:	mov	r0, r5
   16ce0:	str	r4, [sp, #68]	; 0x44
   16ce4:	bl	1c110 <__assert_fail@plt+0xa9b0>
   16ce8:	cmp	r0, #0
   16cec:	bne	171ec <__assert_fail@plt+0x5a8c>
   16cf0:	ldr	r0, [sp, #64]	; 0x40
   16cf4:	cmp	r0, r7
   16cf8:	bge	16ea4 <__assert_fail@plt+0x5744>
   16cfc:	ldr	r0, [r9, #92]	; 0x5c
   16d00:	ldr	r2, [sp, #60]	; 0x3c
   16d04:	ldr	r1, [sp, #68]	; 0x44
   16d08:	add	r0, r0, r2
   16d0c:	cmp	r1, r0
   16d10:	bgt	16ea4 <__assert_fail@plt+0x5744>
   16d14:	ldr	r0, [sp, #112]	; 0x70
   16d18:	lsl	r4, r1, #1
   16d1c:	cmp	r0, #2
   16d20:	blt	16d70 <__assert_fail@plt+0x5610>
   16d24:	mov	r6, #12
   16d28:	cmn	r4, #-1073741823	; 0xc0000001
   16d2c:	bhi	171f8 <__assert_fail@plt+0x5a98>
   16d30:	ldr	r0, [sp, #40]	; 0x28
   16d34:	lsl	r8, r1, #3
   16d38:	mov	r1, r8
   16d3c:	bl	2e0bc <__assert_fail@plt+0x1c95c>
   16d40:	cmp	r0, #0
   16d44:	beq	171f8 <__assert_fail@plt+0x5a98>
   16d48:	str	r0, [sp, #40]	; 0x28
   16d4c:	ldr	r0, [sp, #44]	; 0x2c
   16d50:	cmp	r0, #0
   16d54:	beq	16d70 <__assert_fail@plt+0x5610>
   16d58:	mov	r1, r8
   16d5c:	bl	2e0bc <__assert_fail@plt+0x1c95c>
   16d60:	cmp	r0, #0
   16d64:	beq	171f8 <__assert_fail@plt+0x5a98>
   16d68:	ldr	r9, [sp, #20]
   16d6c:	str	r0, [sp, #44]	; 0x2c
   16d70:	ldrb	r0, [sp, #107]	; 0x6b
   16d74:	cmp	r0, #0
   16d78:	beq	16cdc <__assert_fail@plt+0x557c>
   16d7c:	ldr	r0, [sp, #36]	; 0x24
   16d80:	mov	r1, r4
   16d84:	bl	2e0bc <__assert_fail@plt+0x1c95c>
   16d88:	cmp	r0, #0
   16d8c:	beq	171f4 <__assert_fail@plt+0x5a94>
   16d90:	str	r0, [sp, #36]	; 0x24
   16d94:	b	16cdc <__assert_fail@plt+0x557c>
   16d98:	cmp	r0, #2
   16d9c:	blt	16e30 <__assert_fail@plt+0x56d0>
   16da0:	add	r0, sp, #32
   16da4:	bl	1ca30 <__assert_fail@plt+0xb2d0>
   16da8:	ldr	r9, [sp, #20]
   16dac:	b	16ea4 <__assert_fail@plt+0x5744>
   16db0:	ldr	r9, [sp, #20]
   16db4:	cmp	r8, r7
   16db8:	movgt	r8, r7
   16dbc:	cmp	r8, #1
   16dc0:	blt	16e98 <__assert_fail@plt+0x5738>
   16dc4:	mov	r6, #0
   16dc8:	bl	115e0 <__ctype_toupper_loc@plt>
   16dcc:	ldr	r3, [sp, #28]
   16dd0:	mov	r1, #0
   16dd4:	add	r2, r3, r6
   16dd8:	cmp	r4, #0
   16ddc:	ldrb	r2, [r2, r1]
   16de0:	beq	16e0c <__assert_fail@plt+0x56ac>
   16de4:	b	16e08 <__assert_fail@plt+0x56a8>
   16de8:	ldr	r3, [sp, #32]
   16dec:	ldr	r6, [sp, #56]	; 0x38
   16df0:	ldr	r4, [sp, #96]	; 0x60
   16df4:	mov	r1, r2
   16df8:	add	r2, r3, r6
   16dfc:	cmp	r4, #0
   16e00:	ldrb	r2, [r2, r1]
   16e04:	beq	16e0c <__assert_fail@plt+0x56ac>
   16e08:	ldrb	r2, [r4, r2]
   16e0c:	ldr	r3, [r0]
   16e10:	ldr	r2, [r3, r2, lsl #2]
   16e14:	ldr	r3, [sp, #36]	; 0x24
   16e18:	strb	r2, [r3, r1]
   16e1c:	add	r2, r1, #1
   16e20:	cmp	r2, r8
   16e24:	blt	16de8 <__assert_fail@plt+0x5688>
   16e28:	add	r0, r1, #1
   16e2c:	b	16e9c <__assert_fail@plt+0x573c>
   16e30:	ldr	r9, [sp, #20]
   16e34:	cmp	r4, #0
   16e38:	beq	1714c <__assert_fail@plt+0x59ec>
   16e3c:	cmp	r8, r7
   16e40:	movgt	r8, r7
   16e44:	cmp	r8, #1
   16e48:	blt	16e98 <__assert_fail@plt+0x5738>
   16e4c:	ldrb	r0, [r3]
   16e50:	cmp	r8, #1
   16e54:	ldrb	r0, [r4, r0]
   16e58:	strb	r0, [r6]
   16e5c:	mov	r0, #1
   16e60:	beq	16e9c <__assert_fail@plt+0x573c>
   16e64:	mov	r0, #1
   16e68:	ldr	r1, [sp, #32]
   16e6c:	ldr	r3, [sp, #56]	; 0x38
   16e70:	ldr	r7, [sp, #96]	; 0x60
   16e74:	ldr	r2, [sp, #36]	; 0x24
   16e78:	add	r1, r1, r3
   16e7c:	ldrb	r1, [r1, r0]
   16e80:	ldrb	r1, [r7, r1]
   16e84:	strb	r1, [r2, r0]
   16e88:	add	r0, r0, #1
   16e8c:	cmp	r0, r8
   16e90:	blt	16e68 <__assert_fail@plt+0x5708>
   16e94:	b	16e9c <__assert_fail@plt+0x573c>
   16e98:	mov	r0, #0
   16e9c:	str	r0, [sp, #64]	; 0x40
   16ea0:	str	r0, [sp, #60]	; 0x3c
   16ea4:	mov	r5, #0
   16ea8:	ldr	r4, [sp, #24]
   16eac:	sub	r8, fp, #48	; 0x30
   16eb0:	add	r6, sp, #32
   16eb4:	str	r5, [fp, #-52]	; 0xffffffcc
   16eb8:	str	r5, [sl, #24]
   16ebc:	mov	r0, r8
   16ec0:	mov	r1, r6
   16ec4:	ldr	r7, [sl]
   16ec8:	orr	r2, r4, #8388608	; 0x800000
   16ecc:	str	r4, [r7, #128]	; 0x80
   16ed0:	bl	1cfc8 <__assert_fail@plt+0xb868>
   16ed4:	ldr	r1, [sp, #72]	; 0x48
   16ed8:	mov	r2, r8
   16edc:	mov	r3, r4
   16ee0:	str	r5, [sp]
   16ee4:	add	r0, r1, r0
   16ee8:	mov	r1, sl
   16eec:	str	r0, [sp, #72]	; 0x48
   16ef0:	sub	r0, fp, #52	; 0x34
   16ef4:	str	r0, [sp, #4]
   16ef8:	mov	r0, r6
   16efc:	bl	1cc40 <__assert_fail@plt+0xb4e0>
   16f00:	mov	r4, r0
   16f04:	cmp	r0, #0
   16f08:	bne	16f18 <__assert_fail@plt+0x57b8>
   16f0c:	ldr	r0, [fp, #-52]	; 0xffffffcc
   16f10:	cmp	r0, #0
   16f14:	bne	172a0 <__assert_fail@plt+0x5b40>
   16f18:	ldr	r1, [r7, #64]	; 0x40
   16f1c:	cmp	r1, #31
   16f20:	beq	17238 <__assert_fail@plt+0x5ad8>
   16f24:	ldr	r0, [r7, #56]	; 0x38
   16f28:	add	r0, r0, r1, lsl #5
   16f2c:	add	r2, r1, #1
   16f30:	vmov.i32	q8, #0	; 0x00000000
   16f34:	mov	r1, #0
   16f38:	str	r2, [r7, #64]	; 0x40
   16f3c:	mov	r2, #2
   16f40:	add	r6, r0, #4
   16f44:	str	r1, [r0, #20]
   16f48:	str	r1, [r0, #24]
   16f4c:	str	r2, [r0, #28]
   16f50:	mov	r0, #28
   16f54:	mov	r1, r6
   16f58:	vst1.32	{d16-d17}, [r1], r0
   16f5c:	mvn	r0, #0
   16f60:	str	r0, [r1]
   16f64:	cmp	r4, #0
   16f68:	mov	r0, r6
   16f6c:	beq	16fc0 <__assert_fail@plt+0x5860>
   16f70:	ldr	r1, [r7, #64]	; 0x40
   16f74:	cmp	r1, #31
   16f78:	beq	17270 <__assert_fail@plt+0x5b10>
   16f7c:	ldr	r0, [r7, #56]	; 0x38
   16f80:	add	r0, r0, r1, lsl #5
   16f84:	add	r2, r1, #1
   16f88:	mov	r1, #0
   16f8c:	cmp	r6, #0
   16f90:	mvn	r3, #0
   16f94:	str	r2, [r7, #64]	; 0x40
   16f98:	mov	r2, #16
   16f9c:	str	r1, [r0, #4]!
   16fa0:	add	ip, r0, #20
   16fa4:	stmib	r0, {r4, r6}
   16fa8:	str	r1, [r0, #12]
   16fac:	str	r1, [r0, #16]
   16fb0:	stm	ip, {r1, r2, r3}
   16fb4:	str	r0, [r4]
   16fb8:	beq	17298 <__assert_fail@plt+0x5b38>
   16fbc:	str	r0, [r6]
   16fc0:	cmp	r6, #0
   16fc4:	cmpne	r0, #0
   16fc8:	beq	17298 <__assert_fail@plt+0x5b38>
   16fcc:	str	r0, [r9, #52]	; 0x34
   16fd0:	ldr	r8, [sl]
   16fd4:	ldr	r0, [r8, #4]
   16fd8:	lsl	r0, r0, #2
   16fdc:	bl	2e08c <__assert_fail@plt+0x1c92c>
   16fe0:	str	r0, [r8, #12]
   16fe4:	ldr	r0, [r8, #4]
   16fe8:	lsl	r0, r0, #2
   16fec:	bl	2e08c <__assert_fail@plt+0x1c92c>
   16ff0:	str	r0, [r8, #16]
   16ff4:	ldr	r0, [r8, #4]
   16ff8:	add	r0, r0, r0, lsl #1
   16ffc:	lsl	r0, r0, #2
   17000:	bl	2e08c <__assert_fail@plt+0x1c92c>
   17004:	str	r0, [r8, #20]
   17008:	ldr	r0, [r8, #4]
   1700c:	add	r0, r0, r0, lsl #1
   17010:	lsl	r0, r0, #2
   17014:	bl	2e08c <__assert_fail@plt+0x1c92c>
   17018:	str	r0, [r8, #24]
   1701c:	ldr	r1, [r8, #12]
   17020:	cmp	r1, #0
   17024:	ldrne	r1, [r8, #16]
   17028:	cmpne	r1, #0
   1702c:	beq	17040 <__assert_fail@plt+0x58e0>
   17030:	cmp	r0, #0
   17034:	ldrne	r0, [r8, #20]
   17038:	cmpne	r0, #0
   1703c:	bne	170e8 <__assert_fail@plt+0x5988>
   17040:	mov	r0, #12
   17044:	str	r0, [fp, #-52]	; 0xffffffcc
   17048:	ldr	r4, [sl]
   1704c:	ldr	r0, [r4, #56]	; 0x38
   17050:	cmp	r0, #0
   17054:	beq	1706c <__assert_fail@plt+0x590c>
   17058:	ldr	r5, [r0]
   1705c:	bl	144c0 <__assert_fail@plt+0x2d60>
   17060:	cmp	r5, #0
   17064:	mov	r0, r5
   17068:	bne	17058 <__assert_fail@plt+0x58f8>
   1706c:	mov	r0, #31
   17070:	mov	r5, #0
   17074:	str	r0, [r4, #64]	; 0x40
   17078:	str	r5, [r4, #52]	; 0x34
   1707c:	str	r5, [r4, #56]	; 0x38
   17080:	ldr	r0, [r4, #16]
   17084:	bl	144c0 <__assert_fail@plt+0x2d60>
   17088:	str	r5, [r4, #16]
   1708c:	ldr	r0, [sp, #40]	; 0x28
   17090:	bl	144c0 <__assert_fail@plt+0x2d60>
   17094:	ldr	r0, [sp, #44]	; 0x2c
   17098:	bl	144c0 <__assert_fail@plt+0x2d60>
   1709c:	ldrb	r0, [sp, #107]	; 0x6b
   170a0:	cmp	r0, #0
   170a4:	beq	170b0 <__assert_fail@plt+0x5950>
   170a8:	ldr	r0, [sp, #36]	; 0x24
   170ac:	bl	144c0 <__assert_fail@plt+0x2d60>
   170b0:	ldr	r0, [sp, #8]
   170b4:	cmp	r0, #0
   170b8:	beq	170c4 <__assert_fail@plt+0x5964>
   170bc:	add	r0, r9, #136	; 0x88
   170c0:	bl	11430 <pthread_mutex_destroy@plt>
   170c4:	mov	r0, r9
   170c8:	bl	18ce4 <__assert_fail@plt+0x7584>
   170cc:	mov	r0, #0
   170d0:	str	r0, [sl]
   170d4:	str	r0, [sl, #4]
   170d8:	ldr	r4, [fp, #-52]	; 0xffffffcc
   170dc:	mov	r0, r4
   170e0:	sub	sp, fp, #28
   170e4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   170e8:	ldr	r0, [sl, #24]
   170ec:	lsl	r0, r0, #2
   170f0:	bl	2e08c <__assert_fail@plt+0x1c92c>
   170f4:	cmp	r0, #0
   170f8:	str	r0, [r8, #132]	; 0x84
   170fc:	beq	174b4 <__assert_fail@plt+0x5d54>
   17100:	ldr	r1, [sl, #24]
   17104:	cmp	r1, #0
   17108:	beq	172e0 <__assert_fail@plt+0x5b80>
   1710c:	mov	r2, #0
   17110:	cmp	r1, #4
   17114:	bcc	172d0 <__assert_fail@plt+0x5b70>
   17118:	bic	r2, r1, #3
   1711c:	mov	r3, #1
   17120:	add	r7, pc, #872	; 0x368
   17124:	sub	r6, r2, #4
   17128:	add	r3, r3, r6, lsr #2
   1712c:	cmp	r6, #12
   17130:	and	ip, r3, #3
   17134:	bcs	17158 <__assert_fail@plt+0x59f8>
   17138:	vld1.64	{d16-d17}, [r7 :128]
   1713c:	mov	r7, #0
   17140:	cmp	ip, #0
   17144:	bne	171c8 <__assert_fail@plt+0x5a68>
   17148:	b	172d8 <__assert_fail@plt+0x5b78>
   1714c:	str	r8, [sp, #64]	; 0x40
   17150:	str	r8, [sp, #60]	; 0x3c
   17154:	b	16ea4 <__assert_fail@plt+0x5744>
   17158:	sub	r6, r3, ip
   1715c:	add	r3, pc, #812	; 0x32c
   17160:	vmov.i32	q9, #12	; 0x0000000c
   17164:	vmov.i32	q10, #8	; 0x00000008
   17168:	vmov.i32	q11, #4	; 0x00000004
   1716c:	vmov.i32	q12, #16	; 0x00000010
   17170:	mov	r7, #0
   17174:	mov	lr, #64	; 0x40
   17178:	mov	r4, r0
   1717c:	vld1.64	{d16-d17}, [r3 :128]
   17180:	mov	r3, r0
   17184:	vadd.i32	q13, q8, q9
   17188:	add	r5, r3, #48	; 0x30
   1718c:	vadd.i32	q14, q8, q10
   17190:	vadd.i32	q15, q8, q11
   17194:	subs	r6, r6, #4
   17198:	add	r7, r7, #16
   1719c:	vst1.32	{d26-d27}, [r5]
   171a0:	vst1.32	{d16-d17}, [r4], lr
   171a4:	vadd.i32	q8, q8, q12
   171a8:	add	r5, r3, #32
   171ac:	add	r3, r3, #16
   171b0:	vst1.32	{d28-d29}, [r5]
   171b4:	vst1.32	{d30-d31}, [r3]
   171b8:	mov	r3, r4
   171bc:	bne	17184 <__assert_fail@plt+0x5a24>
   171c0:	cmp	ip, #0
   171c4:	beq	172d8 <__assert_fail@plt+0x5b78>
   171c8:	vmov.i32	q9, #4	; 0x00000004
   171cc:	add	r3, r0, r7, lsl #2
   171d0:	rsb	r7, ip, #0
   171d4:	vadd.i32	q10, q8, q9
   171d8:	vst1.32	{d16-d17}, [r3]!
   171dc:	adds	r7, r7, #1
   171e0:	vorr	q8, q10, q10
   171e4:	bcc	171d4 <__assert_fail@plt+0x5a74>
   171e8:	b	172d8 <__assert_fail@plt+0x5b78>
   171ec:	mov	r6, r0
   171f0:	b	171f8 <__assert_fail@plt+0x5a98>
   171f4:	mov	r6, #12
   171f8:	ldr	r9, [sp, #20]
   171fc:	str	r6, [fp, #-52]	; 0xffffffcc
   17200:	ldr	r4, [sl]
   17204:	ldr	r0, [r4, #56]	; 0x38
   17208:	cmp	r0, #0
   1720c:	bne	17058 <__assert_fail@plt+0x58f8>
   17210:	b	1706c <__assert_fail@plt+0x590c>
   17214:	mov	r0, r5
   17218:	mov	r1, #160	; 0xa0
   1721c:	mov	r4, #160	; 0xa0
   17220:	bl	2e0bc <__assert_fail@plt+0x1c95c>
   17224:	cmp	r0, #0
   17228:	beq	17260 <__assert_fail@plt+0x5b00>
   1722c:	mov	r5, r0
   17230:	stm	sl, {r0, r4}
   17234:	b	166fc <__assert_fail@plt+0x4f9c>
   17238:	mov	r0, #996	; 0x3e4
   1723c:	bl	2e08c <__assert_fail@plt+0x1c92c>
   17240:	cmp	r0, #0
   17244:	beq	172bc <__assert_fail@plt+0x5b5c>
   17248:	ldr	r1, [r7, #56]	; 0x38
   1724c:	str	r1, [r0]
   17250:	mov	r1, #0
   17254:	str	r1, [r7, #64]	; 0x40
   17258:	str	r0, [r7, #56]	; 0x38
   1725c:	b	16f28 <__assert_fail@plt+0x57c8>
   17260:	mov	r4, #12
   17264:	mov	r0, r4
   17268:	sub	sp, fp, #28
   1726c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17270:	mov	r0, #996	; 0x3e4
   17274:	bl	2e08c <__assert_fail@plt+0x1c92c>
   17278:	cmp	r0, #0
   1727c:	beq	17298 <__assert_fail@plt+0x5b38>
   17280:	ldr	r1, [r7, #56]	; 0x38
   17284:	str	r1, [r0]
   17288:	mov	r1, #0
   1728c:	str	r1, [r7, #64]	; 0x40
   17290:	str	r0, [r7, #56]	; 0x38
   17294:	b	16f80 <__assert_fail@plt+0x5820>
   17298:	mov	r0, #12
   1729c:	str	r0, [fp, #-52]	; 0xffffffcc
   172a0:	mov	r0, #0
   172a4:	str	r0, [r9, #52]	; 0x34
   172a8:	ldr	r4, [sl]
   172ac:	ldr	r0, [r4, #56]	; 0x38
   172b0:	cmp	r0, #0
   172b4:	bne	17058 <__assert_fail@plt+0x58f8>
   172b8:	b	1706c <__assert_fail@plt+0x590c>
   172bc:	mov	r6, #0
   172c0:	cmp	r4, #0
   172c4:	mov	r0, r6
   172c8:	bne	16f70 <__assert_fail@plt+0x5810>
   172cc:	b	16fc0 <__assert_fail@plt+0x5860>
   172d0:	str	r2, [r0, r2, lsl #2]
   172d4:	add	r2, r2, #1
   172d8:	cmp	r1, r2
   172dc:	bne	172d0 <__assert_fail@plt+0x5b70>
   172e0:	ldr	r2, [r8, #52]	; 0x34
   172e4:	ldrb	r1, [r2, #24]
   172e8:	cmp	r1, #17
   172ec:	beq	17318 <__assert_fail@plt+0x5bb8>
   172f0:	cmp	r1, #4
   172f4:	bne	17368 <__assert_fail@plt+0x5c08>
   172f8:	ldr	r1, [r2, #20]
   172fc:	mov	r3, #1
   17300:	ldr	r0, [r0, r1, lsl #2]
   17304:	str	r0, [r2, #20]
   17308:	ldr	r1, [r8, #80]	; 0x50
   1730c:	orr	r0, r1, r3, lsl r0
   17310:	str	r0, [r8, #80]	; 0x50
   17314:	b	17368 <__assert_fail@plt+0x5c08>
   17318:	ldr	r1, [r2, #4]
   1731c:	cmp	r1, #0
   17320:	beq	17368 <__assert_fail@plt+0x5c08>
   17324:	ldrb	r3, [r1, #24]
   17328:	cmp	r3, #17
   1732c:	bne	17368 <__assert_fail@plt+0x5c08>
   17330:	ldr	r3, [r1, #4]
   17334:	ldr	r1, [r1, #20]
   17338:	cmp	r3, #0
   1733c:	str	r3, [r2, #4]
   17340:	strne	r2, [r3]
   17344:	cmp	r1, #31
   17348:	ldr	r3, [r2, #20]
   1734c:	ldr	r3, [r0, r3, lsl #2]
   17350:	str	r3, [r0, r1, lsl #2]
   17354:	bgt	17368 <__assert_fail@plt+0x5c08>
   17358:	ldr	r0, [r8, #80]	; 0x50
   1735c:	mov	r3, #1
   17360:	bic	r0, r0, r3, lsl r1
   17364:	b	17310 <__assert_fail@plt+0x5bb0>
   17368:	mov	r0, #1
   1736c:	ldr	r7, [r2, #4]
   17370:	cmp	r7, #0
   17374:	bne	173a4 <__assert_fail@plt+0x5c44>
   17378:	mov	r3, #0
   1737c:	ldr	r7, [r2, #8]
   17380:	mov	r1, r2
   17384:	cmp	r7, r3
   17388:	cmpne	r7, #0
   1738c:	bne	173a4 <__assert_fail@plt+0x5c44>
   17390:	ldr	r2, [r1]
   17394:	mov	r3, r1
   17398:	cmp	r2, #0
   1739c:	bne	1737c <__assert_fail@plt+0x5c1c>
   173a0:	b	17454 <__assert_fail@plt+0x5cf4>
   173a4:	ldrb	r1, [r7, #24]
   173a8:	cmp	r1, #17
   173ac:	beq	173f8 <__assert_fail@plt+0x5c98>
   173b0:	cmp	r1, #4
   173b4:	mov	r2, r7
   173b8:	bne	1736c <__assert_fail@plt+0x5c0c>
   173bc:	ldr	r1, [r8, #132]	; 0x84
   173c0:	mov	r2, r7
   173c4:	cmp	r1, #0
   173c8:	beq	1736c <__assert_fail@plt+0x5c0c>
   173cc:	ldr	r2, [r7, #20]
   173d0:	ldr	r1, [r1, r2, lsl #2]
   173d4:	str	r1, [r7, #20]
   173d8:	ldr	r2, [r8, #80]	; 0x50
   173dc:	orr	r1, r2, r0, lsl r1
   173e0:	str	r1, [r8, #80]	; 0x50
   173e4:	mov	r2, r7
   173e8:	ldr	r7, [r2, #4]
   173ec:	cmp	r7, #0
   173f0:	bne	173a4 <__assert_fail@plt+0x5c44>
   173f4:	b	17378 <__assert_fail@plt+0x5c18>
   173f8:	ldr	r3, [r7, #4]
   173fc:	mov	r2, r7
   17400:	cmp	r3, #0
   17404:	beq	1736c <__assert_fail@plt+0x5c0c>
   17408:	ldrb	r1, [r3, #24]
   1740c:	mov	r2, r7
   17410:	cmp	r1, #17
   17414:	bne	1736c <__assert_fail@plt+0x5c0c>
   17418:	ldr	r1, [r3, #4]
   1741c:	ldr	r3, [r3, #20]
   17420:	cmp	r1, #0
   17424:	str	r1, [r7, #4]
   17428:	strne	r7, [r1]
   1742c:	cmp	r3, #31
   17430:	ldr	r1, [r7, #20]
   17434:	ldr	r2, [r8, #132]	; 0x84
   17438:	ldr	r1, [r2, r1, lsl #2]
   1743c:	str	r1, [r2, r3, lsl #2]
   17440:	mov	r2, r7
   17444:	bgt	1736c <__assert_fail@plt+0x5c0c>
   17448:	ldr	r1, [r8, #80]	; 0x50
   1744c:	bic	r1, r1, r0, lsl r3
   17450:	b	173e0 <__assert_fail@plt+0x5c80>
   17454:	ldr	r1, [sl, #24]
   17458:	cmp	r1, #0
   1745c:	beq	17484 <__assert_fail@plt+0x5d24>
   17460:	ldr	r0, [r8, #132]	; 0x84
   17464:	mov	r2, #0
   17468:	ldr	r3, [r0, r2, lsl #2]
   1746c:	cmp	r2, r3
   17470:	bne	174a0 <__assert_fail@plt+0x5d40>
   17474:	add	r2, r2, #1
   17478:	cmp	r1, r2
   1747c:	bne	17468 <__assert_fail@plt+0x5d08>
   17480:	b	174a8 <__assert_fail@plt+0x5d48>
   17484:	ldr	r0, [r8, #132]	; 0x84
   17488:	b	174a8 <__assert_fail@plt+0x5d48>
   1748c:	nop	{0}
   17490:	andeq	r0, r0, r0
   17494:	andeq	r0, r0, r1
   17498:	andeq	r0, r0, r2
   1749c:	andeq	r0, r0, r3
   174a0:	cmp	r1, r2
   174a4:	bne	174b4 <__assert_fail@plt+0x5d54>
   174a8:	bl	144c0 <__assert_fail@plt+0x2d60>
   174ac:	mov	r0, #0
   174b0:	str	r0, [r8, #132]	; 0x84
   174b4:	ldr	r0, [r8, #52]	; 0x34
   174b8:	str	r8, [sp, #24]
   174bc:	mov	r7, #0
   174c0:	sub	r8, fp, #48	; 0x30
   174c4:	mov	r4, r0
   174c8:	ldr	r0, [r0, #4]
   174cc:	cmp	r0, #0
   174d0:	bne	174c4 <__assert_fail@plt+0x5d64>
   174d4:	ldr	r0, [r4, #8]
   174d8:	cmp	r0, #0
   174dc:	bne	174c4 <__assert_fail@plt+0x5d64>
   174e0:	mov	r3, #0
   174e4:	cmp	r3, #0
   174e8:	str	r7, [fp, #-48]	; 0xffffffd0
   174ec:	beq	17518 <__assert_fail@plt+0x5db8>
   174f0:	ldrb	r0, [r3, #24]
   174f4:	cmp	r0, #17
   174f8:	bne	17518 <__assert_fail@plt+0x5db8>
   174fc:	ldrb	r2, [sl, #28]
   17500:	ldr	r1, [sl]
   17504:	mov	r0, r8
   17508:	bl	217c0 <__assert_fail@plt+0x10060>
   1750c:	cmp	r0, #0
   17510:	str	r0, [r4, #4]
   17514:	strne	r4, [r0]
   17518:	ldr	r3, [r4, #8]
   1751c:	cmp	r3, #0
   17520:	beq	1754c <__assert_fail@plt+0x5dec>
   17524:	ldrb	r0, [r3, #24]
   17528:	cmp	r0, #17
   1752c:	bne	1754c <__assert_fail@plt+0x5dec>
   17530:	ldrb	r2, [sl, #28]
   17534:	ldr	r1, [sl]
   17538:	mov	r0, r8
   1753c:	bl	217c0 <__assert_fail@plt+0x10060>
   17540:	cmp	r0, #0
   17544:	str	r0, [r4, #8]
   17548:	strne	r4, [r0]
   1754c:	ldr	r0, [fp, #-48]	; 0xffffffd0
   17550:	cmp	r0, #0
   17554:	bne	17044 <__assert_fail@plt+0x58e4>
   17558:	ldr	r1, [r4]
   1755c:	cmp	r1, #0
   17560:	beq	1758c <__assert_fail@plt+0x5e2c>
   17564:	ldr	r0, [r1, #8]
   17568:	cmp	r0, r4
   1756c:	cmpne	r0, #0
   17570:	bne	174c4 <__assert_fail@plt+0x5d64>
   17574:	ldr	r3, [r1, #4]
   17578:	mov	r4, r1
   1757c:	cmp	r3, #0
   17580:	str	r7, [fp, #-48]	; 0xffffffd0
   17584:	bne	174f0 <__assert_fail@plt+0x5d90>
   17588:	b	17518 <__assert_fail@plt+0x5db8>
   1758c:	ldr	r8, [sp, #24]
   17590:	ldr	r0, [r8, #52]	; 0x34
   17594:	mov	r4, r0
   17598:	ldr	r0, [r0, #4]
   1759c:	cmp	r0, #0
   175a0:	bne	17594 <__assert_fail@plt+0x5e34>
   175a4:	ldr	r0, [r4, #8]
   175a8:	cmp	r0, #0
   175ac:	bne	17594 <__assert_fail@plt+0x5e34>
   175b0:	ldr	r2, [r4, #24]
   175b4:	uxtb	r0, r2
   175b8:	cmp	r0, #16
   175bc:	bne	17600 <__assert_fail@plt+0x5ea0>
   175c0:	ldr	r0, [r4, #4]
   175c4:	ldr	r1, [r0, #12]
   175c8:	str	r1, [r4, #12]
   175cc:	ldr	r0, [r0, #28]
   175d0:	str	r0, [r4, #28]
   175d4:	ldr	r1, [r4]
   175d8:	cmp	r1, #0
   175dc:	beq	1764c <__assert_fail@plt+0x5eec>
   175e0:	ldr	r0, [r1, #8]
   175e4:	cmp	r0, r4
   175e8:	mov	r4, r1
   175ec:	beq	175b0 <__assert_fail@plt+0x5e50>
   175f0:	cmp	r0, #0
   175f4:	mov	r4, r1
   175f8:	beq	175b0 <__assert_fail@plt+0x5e50>
   175fc:	b	17594 <__assert_fail@plt+0x5e34>
   17600:	str	r4, [r4, #12]
   17604:	mov	r0, r8
   17608:	ldr	r1, [r4, #20]
   1760c:	bl	21aa8 <__assert_fail@plt+0x10348>
   17610:	cmn	r0, #1
   17614:	str	r0, [r4, #28]
   17618:	beq	17040 <__assert_fail@plt+0x58e0>
   1761c:	ldrb	r1, [r4, #24]
   17620:	cmp	r1, #12
   17624:	bne	17640 <__assert_fail@plt+0x5ee0>
   17628:	ldr	r1, [r8]
   1762c:	ldr	r2, [r4, #20]
   17630:	add	r0, r1, r0, lsl #3
   17634:	ldr	r1, [r0, #4]
   17638:	bfi	r1, r2, #8, #10
   1763c:	str	r1, [r0, #4]
   17640:	ldr	r1, [r4]
   17644:	cmp	r1, #0
   17648:	bne	175e0 <__assert_fail@plt+0x5e80>
   1764c:	ldr	r4, [r8, #52]	; 0x34
   17650:	ldrb	r0, [r4, #24]
   17654:	cmp	r0, #16
   17658:	beq	1767c <__assert_fail@plt+0x5f1c>
   1765c:	cmp	r0, #11
   17660:	bne	1768c <__assert_fail@plt+0x5f2c>
   17664:	ldr	r0, [r4, #4]
   17668:	str	r4, [r0, #16]
   1766c:	mov	r1, r4
   17670:	cmp	r0, #0
   17674:	bne	176d0 <__assert_fail@plt+0x5f70>
   17678:	b	17734 <__assert_fail@plt+0x5fd4>
   1767c:	ldmib	r4, {r0, r1}
   17680:	ldr	r2, [r1, #12]
   17684:	str	r2, [r0, #16]
   17688:	b	176a8 <__assert_fail@plt+0x5f48>
   1768c:	ldr	r0, [r4, #4]
   17690:	cmp	r0, #0
   17694:	ldrne	r1, [r4, #16]
   17698:	strne	r1, [r0, #16]
   1769c:	ldr	r1, [r4, #8]
   176a0:	cmp	r1, #0
   176a4:	beq	176b0 <__assert_fail@plt+0x5f50>
   176a8:	ldr	r2, [r4, #16]
   176ac:	str	r2, [r1, #16]
   176b0:	mov	r1, r4
   176b4:	cmp	r0, #0
   176b8:	bne	176d0 <__assert_fail@plt+0x5f70>
   176bc:	b	17734 <__assert_fail@plt+0x5fd4>
   176c0:	ldr	r0, [r1, #4]
   176c4:	str	r1, [r0, #16]
   176c8:	cmp	r0, #0
   176cc:	beq	17734 <__assert_fail@plt+0x5fd4>
   176d0:	mov	r1, r0
   176d4:	ldrb	r0, [r0, #24]
   176d8:	cmp	r0, #16
   176dc:	beq	17718 <__assert_fail@plt+0x5fb8>
   176e0:	cmp	r0, #11
   176e4:	beq	176c0 <__assert_fail@plt+0x5f60>
   176e8:	ldr	r0, [r1, #4]
   176ec:	cmp	r0, #0
   176f0:	ldrne	r2, [r1, #16]
   176f4:	strne	r2, [r0, #16]
   176f8:	ldr	r2, [r1, #8]
   176fc:	cmp	r2, #0
   17700:	beq	176c8 <__assert_fail@plt+0x5f68>
   17704:	ldr	r3, [r1, #16]
   17708:	str	r3, [r2, #16]
   1770c:	cmp	r0, #0
   17710:	bne	176d0 <__assert_fail@plt+0x5f70>
   17714:	b	17734 <__assert_fail@plt+0x5fd4>
   17718:	ldmib	r1, {r0, r2}
   1771c:	ldr	r3, [r2, #12]
   17720:	str	r3, [r0, #16]
   17724:	ldr	r3, [r1, #16]
   17728:	str	r3, [r2, #16]
   1772c:	cmp	r0, #0
   17730:	bne	176d0 <__assert_fail@plt+0x5f70>
   17734:	mov	r3, #0
   17738:	ldr	r0, [r1, #8]
   1773c:	mov	r2, r1
   17740:	cmp	r0, r3
   17744:	cmpne	r0, #0
   17748:	bne	176d0 <__assert_fail@plt+0x5f70>
   1774c:	ldr	r1, [r2]
   17750:	mov	r3, r2
   17754:	cmp	r1, #0
   17758:	bne	17738 <__assert_fail@plt+0x5fd8>
   1775c:	mov	r0, r8
   17760:	mov	r1, r4
   17764:	bl	21624 <__assert_fail@plt+0xfec4>
   17768:	cmp	r0, #0
   1776c:	beq	1778c <__assert_fail@plt+0x602c>
   17770:	b	17044 <__assert_fail@plt+0x58e4>
   17774:	mov	r0, r8
   17778:	mov	r1, r7
   1777c:	bl	21624 <__assert_fail@plt+0xfec4>
   17780:	cmp	r0, #0
   17784:	mov	r4, r7
   17788:	bne	17044 <__assert_fail@plt+0x58e4>
   1778c:	ldr	r7, [r4, #4]
   17790:	cmp	r7, #0
   17794:	bne	17774 <__assert_fail@plt+0x6014>
   17798:	mov	r1, #0
   1779c:	ldr	r7, [r4, #8]
   177a0:	mov	r0, r4
   177a4:	cmp	r7, r1
   177a8:	cmpne	r7, #0
   177ac:	bne	17774 <__assert_fail@plt+0x6014>
   177b0:	ldr	r4, [r0]
   177b4:	mov	r1, r0
   177b8:	cmp	r4, #0
   177bc:	bne	1779c <__assert_fail@plt+0x603c>
   177c0:	mov	r5, #0
   177c4:	sub	r4, fp, #48	; 0x30
   177c8:	mov	r7, #0
   177cc:	b	177fc <__assert_fail@plt+0x609c>
   177d0:	mov	r1, r5
   177d4:	ldr	r2, [r8, #8]
   177d8:	add	r0, r7, #1
   177dc:	subs	r3, r0, r2
   177e0:	mov	r7, r3
   177e4:	movwne	r3, #1
   177e8:	movne	r7, r0
   177ec:	tst	r1, #1
   177f0:	and	r5, r1, r3
   177f4:	cmpeq	r0, r2
   177f8:	beq	17858 <__assert_fail@plt+0x60f8>
   177fc:	ldr	r0, [r8, #24]
   17800:	add	r6, r7, r7, lsl #1
   17804:	add	r0, r0, r6, lsl #2
   17808:	ldr	r0, [r0, #4]
   1780c:	cmp	r0, #0
   17810:	bne	177d0 <__assert_fail@plt+0x6070>
   17814:	mov	r0, r4
   17818:	mov	r1, r8
   1781c:	mov	r2, r7
   17820:	mov	r3, #1
   17824:	bl	21c80 <__assert_fail@plt+0x10520>
   17828:	cmp	r0, #0
   1782c:	bne	17044 <__assert_fail@plt+0x58e4>
   17830:	ldr	r0, [r8, #24]
   17834:	mov	r1, r5
   17838:	add	r0, r0, r6, lsl #2
   1783c:	ldr	r0, [r0, #4]
   17840:	cmp	r0, #0
   17844:	bne	177d4 <__assert_fail@plt+0x6074>
   17848:	ldr	r0, [fp, #-40]	; 0xffffffd8
   1784c:	bl	144c0 <__assert_fail@plt+0x2d60>
   17850:	mov	r1, #1
   17854:	b	177d4 <__assert_fail@plt+0x6074>
   17858:	ldrb	r1, [sl, #28]
   1785c:	tst	r1, #16
   17860:	bne	1787c <__assert_fail@plt+0x611c>
   17864:	ldr	r1, [sl, #24]
   17868:	cmp	r1, #0
   1786c:	beq	1787c <__assert_fail@plt+0x611c>
   17870:	ldrb	r1, [r8, #88]	; 0x58
   17874:	tst	r1, #1
   17878:	bne	17888 <__assert_fail@plt+0x6128>
   1787c:	ldr	r1, [r8, #76]	; 0x4c
   17880:	cmp	r1, #0
   17884:	beq	179cc <__assert_fail@plt+0x626c>
   17888:	add	r0, r0, r0, lsl #1
   1788c:	lsl	r0, r0, #2
   17890:	bl	2e08c <__assert_fail@plt+0x1c92c>
   17894:	cmp	r0, #0
   17898:	str	r0, [r8, #28]
   1789c:	beq	17e80 <__assert_fail@plt+0x6720>
   178a0:	ldr	r1, [r8, #8]
   178a4:	cmp	r1, #0
   178a8:	beq	179cc <__assert_fail@plt+0x626c>
   178ac:	mov	r1, #0
   178b0:	str	r1, [r0]
   178b4:	str	r1, [r0, #4]
   178b8:	str	r1, [r0, #8]
   178bc:	ldr	r0, [r8, #8]
   178c0:	cmp	r0, #2
   178c4:	bcc	178f4 <__assert_fail@plt+0x6194>
   178c8:	mov	r2, #1
   178cc:	mov	r3, #12
   178d0:	ldr	r0, [r8, #28]
   178d4:	add	r2, r2, #1
   178d8:	str	r1, [r0, r3]!
   178dc:	add	r3, r3, #12
   178e0:	str	r1, [r0, #4]
   178e4:	str	r1, [r0, #8]
   178e8:	ldr	r0, [r8, #8]
   178ec:	cmp	r2, r0
   178f0:	bcc	178d0 <__assert_fail@plt+0x6170>
   178f4:	cmp	r0, #0
   178f8:	beq	179cc <__assert_fail@plt+0x626c>
   178fc:	ldr	ip, [r8, #24]
   17900:	mov	r7, #0
   17904:	str	sl, [sp, #16]
   17908:	b	17920 <__assert_fail@plt+0x61c0>
   1790c:	ldr	r0, [r8, #8]
   17910:	ldr	sl, [sp, #16]
   17914:	add	r7, r7, #1
   17918:	cmp	r7, r0
   1791c:	bcs	179cc <__assert_fail@plt+0x626c>
   17920:	add	r9, r7, r7, lsl #1
   17924:	add	r2, ip, r9, lsl #2
   17928:	ldr	r3, [r2, #4]
   1792c:	cmp	r3, #1
   17930:	blt	17914 <__assert_fail@plt+0x61b4>
   17934:	ldr	r1, [r2, #8]
   17938:	mov	r6, #0
   1793c:	str	r1, [sp, #28]
   17940:	b	1796c <__assert_fail@plt+0x620c>
   17944:	add	r0, r4, r0, lsl #2
   17948:	ldr	r0, [r0, #8]
   1794c:	add	r3, r2, #1
   17950:	add	r6, r6, #1
   17954:	str	r3, [sl]
   17958:	str	r7, [r0, r2, lsl #2]
   1795c:	add	r0, ip, r9, lsl #2
   17960:	ldr	r0, [r0, #4]
   17964:	cmp	r6, r0
   17968:	bge	1790c <__assert_fail@plt+0x61ac>
   1796c:	ldr	r0, [r1, r6, lsl #2]
   17970:	ldr	r4, [r8, #28]
   17974:	add	r0, r0, r0, lsl #1
   17978:	mov	r3, r4
   1797c:	ldr	r5, [r3, r0, lsl #2]!
   17980:	mov	sl, r3
   17984:	ldr	r2, [sl, #4]!
   17988:	cmp	r5, r2
   1798c:	bne	17944 <__assert_fail@plt+0x61e4>
   17990:	mov	r1, #2
   17994:	add	r8, r4, r0, lsl #2
   17998:	add	r1, r1, r5, lsl #1
   1799c:	str	r1, [r3]
   179a0:	lsl	r1, r1, #2
   179a4:	ldr	r0, [r8, #8]!
   179a8:	bl	2e0bc <__assert_fail@plt+0x1c95c>
   179ac:	cmp	r0, #0
   179b0:	beq	17e7c <__assert_fail@plt+0x671c>
   179b4:	str	r0, [r8]
   179b8:	ldr	r8, [sp, #24]
   179bc:	ldr	r1, [sp, #28]
   179c0:	ldr	r2, [sl]
   179c4:	ldr	ip, [r8, #24]
   179c8:	b	1794c <__assert_fail@plt+0x61ec>
   179cc:	mov	r0, #0
   179d0:	str	r0, [fp, #-52]	; 0xffffffcc
   179d4:	ldr	r0, [sp, #12]
   179d8:	cmp	r0, #0
   179dc:	bne	17b98 <__assert_fail@plt+0x6438>
   179e0:	ldr	r0, [sp, #20]
   179e4:	ldrb	r2, [r0, #88]	; 0x58
   179e8:	ands	r0, r2, #4
   179ec:	beq	17b98 <__assert_fail@plt+0x6438>
   179f0:	ldr	r0, [sl, #20]
   179f4:	cmp	r0, #0
   179f8:	bne	17b98 <__assert_fail@plt+0x6438>
   179fc:	ldr	r0, [sp, #20]
   17a00:	mov	r9, #0
   17a04:	ldr	r7, [r0, #8]
   17a08:	cmp	r7, #0
   17a0c:	beq	17a2c <__assert_fail@plt+0x62cc>
   17a10:	ldr	r3, [r0]
   17a14:	mov	r8, #0
   17a18:	mov	ip, #1
   17a1c:	mov	lr, #139	; 0x8b
   17a20:	mov	r6, #0
   17a24:	mov	r4, #0
   17a28:	b	17a80 <__assert_fail@plt+0x6320>
   17a2c:	mov	r8, #0
   17a30:	ldr	r3, [sp, #20]
   17a34:	mov	r0, #1
   17a38:	and	r1, r2, #249	; 0xf9
   17a3c:	str	r0, [r3, #92]	; 0x5c
   17a40:	ldr	r0, [r3, #76]	; 0x4c
   17a44:	cmp	r0, #0
   17a48:	movwgt	r9, #1
   17a4c:	orr	r0, r8, r9
   17a50:	and	r0, r0, #1
   17a54:	orr	r0, r1, r0, lsl #1
   17a58:	strb	r0, [r3, #88]	; 0x58
   17a5c:	b	17b98 <__assert_fail@plt+0x6438>
   17a60:	ldrsb	r0, [r5]
   17a64:	cmp	r0, #0
   17a68:	mov	r0, #0
   17a6c:	movwmi	r0, #1
   17a70:	orr	r6, r6, r0
   17a74:	add	r4, r4, #1
   17a78:	cmp	r7, r4
   17a7c:	beq	17b30 <__assert_fail@plt+0x63d0>
   17a80:	add	r5, r3, r4, lsl #3
   17a84:	ldrb	r1, [r5, #4]
   17a88:	sub	r1, r1, #1
   17a8c:	cmp	r1, #11
   17a90:	bhi	17ed0 <__assert_fail@plt+0x6770>
   17a94:	add	r0, pc, #0
   17a98:	ldr	pc, [r0, r1, lsl #2]
   17a9c:	andeq	r7, r1, r0, ror #20
   17aa0:	andeq	r7, r1, r4, ror sl
   17aa4:	andeq	r7, r1, ip, asr #21
   17aa8:	andeq	r7, r1, r4, ror sl
   17aac:	andeq	r7, r1, r0, lsr #22
   17ab0:	muleq	r1, r8, fp
   17ab4:	ldrdeq	r7, [r1], -r0
   17ab8:	andeq	r7, r1, r4, ror sl
   17abc:	andeq	r7, r1, r4, ror sl
   17ac0:	andeq	r7, r1, r4, ror sl
   17ac4:	andeq	r7, r1, r4, ror sl
   17ac8:	andeq	r7, r1, r0, lsl #22
   17acc:	ldr	r5, [r3, r4, lsl #3]
   17ad0:	ldr	r0, [r5, #16]
   17ad4:	cmp	r0, #0
   17ad8:	bne	17b98 <__assert_fail@plt+0x6438>
   17adc:	ldr	r0, [r5, #20]
   17ae0:	cmp	r0, #0
   17ae4:	ldreq	r0, [r5, #24]
   17ae8:	cmpeq	r0, #0
   17aec:	bne	17b98 <__assert_fail@plt+0x6438>
   17af0:	ldr	r0, [r5, #28]
   17af4:	cmp	r0, #0
   17af8:	beq	17a74 <__assert_fail@plt+0x6314>
   17afc:	b	17b98 <__assert_fail@plt+0x6438>
   17b00:	ldr	r0, [r3, r4, lsl #3]
   17b04:	sub	r0, r0, #16
   17b08:	ror	r1, r0, #4
   17b0c:	cmp	r1, #7
   17b10:	bhi	17b98 <__assert_fail@plt+0x6438>
   17b14:	tst	lr, ip, lsl r1
   17b18:	bne	17a74 <__assert_fail@plt+0x6314>
   17b1c:	b	17b98 <__assert_fail@plt+0x6438>
   17b20:	mov	r8, #1
   17b24:	add	r4, r4, #1
   17b28:	cmp	r7, r4
   17b2c:	bne	17a80 <__assert_fail@plt+0x6320>
   17b30:	orr	r0, r6, r8
   17b34:	tst	r0, #1
   17b38:	beq	17a30 <__assert_fail@plt+0x62d0>
   17b3c:	mov	r2, #0
   17b40:	mov	r7, #7
   17b44:	add	r3, r3, r2, lsl #3
   17b48:	ldr	r6, [r3, #4]
   17b4c:	uxtb	r1, r6
   17b50:	cmp	r1, #5
   17b54:	beq	17b74 <__assert_fail@plt+0x6414>
   17b58:	cmp	r1, #1
   17b5c:	bne	17b7c <__assert_fail@plt+0x641c>
   17b60:	ldrsb	r0, [r3]
   17b64:	cmn	r0, #1
   17b68:	bicle	r0, r6, #2097152	; 0x200000
   17b6c:	strle	r0, [r3, #4]
   17b70:	b	17b7c <__assert_fail@plt+0x641c>
   17b74:	bfi	r6, r7, #0, #8
   17b78:	str	r6, [r3, #4]
   17b7c:	ldr	r1, [sp, #20]
   17b80:	add	r2, r2, #1
   17b84:	ldr	r0, [r1, #8]
   17b88:	cmp	r2, r0
   17b8c:	bcs	17e94 <__assert_fail@plt+0x6734>
   17b90:	ldr	r3, [r1]
   17b94:	b	17b44 <__assert_fail@plt+0x63e4>
   17b98:	ldr	r8, [sp, #20]
   17b9c:	ldr	r1, [r8, #52]	; 0x34
   17ba0:	ldr	r0, [r8, #24]
   17ba4:	ldr	r1, [r1, #12]
   17ba8:	ldr	r1, [r1, #28]
   17bac:	str	r1, [r8, #72]	; 0x48
   17bb0:	add	r1, r1, r1, lsl #1
   17bb4:	add	r5, r0, r1, lsl #2
   17bb8:	mov	r4, r5
   17bbc:	ldr	r7, [r4, #4]!
   17bc0:	str	r7, [fp, #-44]	; 0xffffffd4
   17bc4:	ldr	r0, [r4]
   17bc8:	cmp	r0, #1
   17bcc:	blt	17d24 <__assert_fail@plt+0x65c4>
   17bd0:	lsl	r0, r7, #2
   17bd4:	str	r7, [fp, #-48]	; 0xffffffd0
   17bd8:	bl	2e08c <__assert_fail@plt+0x1c92c>
   17bdc:	cmp	r0, #0
   17be0:	str	r0, [fp, #-40]	; 0xffffffd8
   17be4:	beq	17eb8 <__assert_fail@plt+0x6758>
   17be8:	mov	r6, r0
   17bec:	ldr	r0, [r4]
   17bf0:	ldr	r1, [r5, #8]
   17bf4:	lsl	r2, r0, #2
   17bf8:	mov	r0, r6
   17bfc:	bl	11484 <memcpy@plt>
   17c00:	mov	r0, #0
   17c04:	cmp	r7, #1
   17c08:	str	r0, [fp, #-32]	; 0xffffffe0
   17c0c:	blt	17d38 <__assert_fail@plt+0x65d8>
   17c10:	ldr	r0, [sp, #20]
   17c14:	ldr	r0, [r0, #76]	; 0x4c
   17c18:	cmp	r0, #1
   17c1c:	blt	17d38 <__assert_fail@plt+0x65d8>
   17c20:	mov	r0, #0
   17c24:	sub	r8, fp, #48	; 0x30
   17c28:	mov	r9, #1
   17c2c:	ldr	r2, [sp, #20]
   17c30:	ldr	r1, [r6, r0, lsl #2]
   17c34:	ldr	r2, [r2]
   17c38:	add	r3, r2, r1, lsl #3
   17c3c:	ldrb	r3, [r3, #4]
   17c40:	cmp	r3, #4
   17c44:	bne	17d10 <__assert_fail@plt+0x65b0>
   17c48:	mov	r3, #0
   17c4c:	cmp	r7, #1
   17c50:	bge	17c64 <__assert_fail@plt+0x6504>
   17c54:	b	17c88 <__assert_fail@plt+0x6528>
   17c58:	add	r3, r3, #1
   17c5c:	cmp	r7, r3
   17c60:	beq	17d10 <__assert_fail@plt+0x65b0>
   17c64:	ldr	r5, [r6, r3, lsl #2]
   17c68:	add	r4, r2, r5, lsl #3
   17c6c:	ldrb	r4, [r4, #4]
   17c70:	cmp	r4, #9
   17c74:	bne	17c58 <__assert_fail@plt+0x64f8>
   17c78:	ldr	r4, [r2, r1, lsl #3]
   17c7c:	ldr	r5, [r2, r5, lsl #3]
   17c80:	cmp	r5, r4
   17c84:	bne	17c58 <__assert_fail@plt+0x64f8>
   17c88:	cmp	r3, r7
   17c8c:	beq	17d10 <__assert_fail@plt+0x65b0>
   17c90:	ldr	r2, [sp, #20]
   17c94:	add	r1, r1, r1, lsl #1
   17c98:	cmp	r7, #1
   17c9c:	ldr	r2, [r2, #20]
   17ca0:	add	r1, r2, r1, lsl #2
   17ca4:	ldr	r1, [r1, #8]
   17ca8:	ldr	ip, [r1]
   17cac:	blt	17ce8 <__assert_fail@plt+0x6588>
   17cb0:	mov	r2, #0
   17cb4:	subs	r3, r7, #1
   17cb8:	beq	17cdc <__assert_fail@plt+0x657c>
   17cbc:	add	r5, r2, r3
   17cc0:	lsr	r4, r5, #1
   17cc4:	ldr	r1, [r6, r4, lsl #2]
   17cc8:	cmp	r1, ip
   17ccc:	addlt	r2, r9, r5, lsr #1
   17cd0:	movge	r3, r4
   17cd4:	cmp	r2, r3
   17cd8:	bcc	17cbc <__assert_fail@plt+0x655c>
   17cdc:	ldr	r1, [r6, r2, lsl #2]
   17ce0:	cmp	r1, ip
   17ce4:	beq	17d10 <__assert_fail@plt+0x65b0>
   17ce8:	ldr	r0, [sp, #20]
   17cec:	add	r1, ip, ip, lsl #1
   17cf0:	ldr	r0, [r0, #24]
   17cf4:	add	r1, r0, r1, lsl #2
   17cf8:	mov	r0, r8
   17cfc:	bl	22338 <__assert_fail@plt+0x10bd8>
   17d00:	cmp	r0, #0
   17d04:	bne	17e8c <__assert_fail@plt+0x672c>
   17d08:	ldr	r7, [fp, #-44]	; 0xffffffd4
   17d0c:	mov	r0, #0
   17d10:	add	r0, r0, #1
   17d14:	cmp	r0, r7
   17d18:	bge	17d38 <__assert_fail@plt+0x65d8>
   17d1c:	ldr	r6, [fp, #-40]	; 0xffffffd8
   17d20:	b	17c2c <__assert_fail@plt+0x64cc>
   17d24:	mov	r0, #0
   17d28:	str	r0, [fp, #-44]	; 0xffffffd4
   17d2c:	str	r0, [fp, #-48]	; 0xffffffd0
   17d30:	str	r0, [fp, #-40]	; 0xffffffd8
   17d34:	str	r0, [fp, #-32]	; 0xffffffe0
   17d38:	ldr	r8, [sp, #20]
   17d3c:	sub	r0, fp, #32
   17d40:	sub	r2, fp, #48	; 0x30
   17d44:	mov	r3, #0
   17d48:	mov	r1, r8
   17d4c:	bl	22658 <__assert_fail@plt+0x10ef8>
   17d50:	cmp	r0, #0
   17d54:	str	r0, [r8, #36]	; 0x24
   17d58:	beq	17dd8 <__assert_fail@plt+0x6678>
   17d5c:	ldrsb	r1, [r0, #52]	; 0x34
   17d60:	cmn	r1, #1
   17d64:	ble	17d78 <__assert_fail@plt+0x6618>
   17d68:	str	r0, [r8, #40]	; 0x28
   17d6c:	str	r0, [r8, #44]	; 0x2c
   17d70:	str	r0, [r8, #48]	; 0x30
   17d74:	b	17dec <__assert_fail@plt+0x668c>
   17d78:	sub	r4, fp, #32
   17d7c:	sub	r6, fp, #48	; 0x30
   17d80:	mov	r1, r8
   17d84:	mov	r3, #1
   17d88:	mov	r0, r4
   17d8c:	mov	r2, r6
   17d90:	bl	22658 <__assert_fail@plt+0x10ef8>
   17d94:	str	r0, [r8, #40]	; 0x28
   17d98:	mov	r0, r4
   17d9c:	mov	r1, r8
   17da0:	mov	r2, r6
   17da4:	mov	r3, #2
   17da8:	bl	22658 <__assert_fail@plt+0x10ef8>
   17dac:	str	r0, [r8, #44]	; 0x2c
   17db0:	mov	r0, r4
   17db4:	mov	r1, r8
   17db8:	mov	r2, r6
   17dbc:	mov	r3, #6
   17dc0:	bl	22658 <__assert_fail@plt+0x10ef8>
   17dc4:	str	r0, [r8, #48]	; 0x30
   17dc8:	ldr	r1, [r8, #40]	; 0x28
   17dcc:	cmp	r1, #0
   17dd0:	cmpne	r0, #0
   17dd4:	bne	17de0 <__assert_fail@plt+0x6680>
   17dd8:	ldr	r0, [fp, #-32]	; 0xffffffe0
   17ddc:	b	17df8 <__assert_fail@plt+0x6698>
   17de0:	ldr	r0, [r8, #44]	; 0x2c
   17de4:	cmp	r0, #0
   17de8:	beq	17dd8 <__assert_fail@plt+0x6678>
   17dec:	ldr	r0, [fp, #-40]	; 0xffffffd8
   17df0:	bl	144c0 <__assert_fail@plt+0x2d60>
   17df4:	mov	r0, #0
   17df8:	str	r0, [fp, #-52]	; 0xffffffcc
   17dfc:	ldr	r5, [sl]
   17e00:	ldr	r0, [r5, #56]	; 0x38
   17e04:	cmp	r0, #0
   17e08:	beq	17e20 <__assert_fail@plt+0x66c0>
   17e0c:	ldr	r4, [r0]
   17e10:	bl	144c0 <__assert_fail@plt+0x2d60>
   17e14:	cmp	r4, #0
   17e18:	mov	r0, r4
   17e1c:	bne	17e0c <__assert_fail@plt+0x66ac>
   17e20:	mov	r0, #31
   17e24:	mov	r4, #0
   17e28:	str	r0, [r5, #64]	; 0x40
   17e2c:	str	r4, [r5, #52]	; 0x34
   17e30:	str	r4, [r5, #56]	; 0x38
   17e34:	ldr	r0, [r5, #16]
   17e38:	bl	144c0 <__assert_fail@plt+0x2d60>
   17e3c:	str	r4, [r5, #16]
   17e40:	ldr	r0, [sp, #40]	; 0x28
   17e44:	bl	144c0 <__assert_fail@plt+0x2d60>
   17e48:	ldr	r0, [sp, #44]	; 0x2c
   17e4c:	bl	144c0 <__assert_fail@plt+0x2d60>
   17e50:	ldrb	r0, [sp, #107]	; 0x6b
   17e54:	cmp	r0, #0
   17e58:	beq	17e64 <__assert_fail@plt+0x6704>
   17e5c:	ldr	r0, [sp, #36]	; 0x24
   17e60:	bl	144c0 <__assert_fail@plt+0x2d60>
   17e64:	ldr	r0, [fp, #-52]	; 0xffffffcc
   17e68:	cmp	r0, #0
   17e6c:	bne	17e9c <__assert_fail@plt+0x673c>
   17e70:	mov	r0, r4
   17e74:	sub	sp, fp, #28
   17e78:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17e7c:	ldr	sl, [sp, #16]
   17e80:	mov	r0, #12
   17e84:	ldr	r9, [sp, #20]
   17e88:	b	17044 <__assert_fail@plt+0x58e4>
   17e8c:	ldr	r8, [sp, #20]
   17e90:	b	17df8 <__assert_fail@plt+0x6698>
   17e94:	ldrb	r2, [r1, #88]	; 0x58
   17e98:	b	17a30 <__assert_fail@plt+0x62d0>
   17e9c:	ldr	r0, [sp, #8]
   17ea0:	cmp	r0, #0
   17ea4:	beq	17eb0 <__assert_fail@plt+0x6750>
   17ea8:	add	r0, r8, #136	; 0x88
   17eac:	bl	11430 <pthread_mutex_destroy@plt>
   17eb0:	mov	r0, r8
   17eb4:	b	170c8 <__assert_fail@plt+0x5968>
   17eb8:	mov	r0, #0
   17ebc:	str	r0, [fp, #-48]	; 0xffffffd0
   17ec0:	str	r0, [fp, #-44]	; 0xffffffd4
   17ec4:	mov	r0, #12
   17ec8:	str	r0, [fp, #-32]	; 0xffffffe0
   17ecc:	b	17df8 <__assert_fail@plt+0x6698>
   17ed0:	bl	1173c <abort@plt>
   17ed4:	movw	r2, #1004	; 0x3ec
   17ed8:	movt	r2, #4
   17edc:	ldr	r1, [r2]
   17ee0:	str	r0, [r2]
   17ee4:	mov	r0, r1
   17ee8:	bx	lr
   17eec:	push	{r4, r5, r6, sl, fp, lr}
   17ef0:	add	fp, sp, #16
   17ef4:	ldr	r5, [r0, #16]
   17ef8:	ldr	r6, [r0]
   17efc:	mov	r4, r0
   17f00:	mov	r1, #0
   17f04:	mov	r2, #256	; 0x100
   17f08:	mov	r0, r5
   17f0c:	bl	11670 <memset@plt>
   17f10:	ldr	r1, [r6, #36]	; 0x24
   17f14:	mov	r0, r4
   17f18:	mov	r2, r5
   17f1c:	bl	17f84 <__assert_fail@plt+0x6824>
   17f20:	ldr	r0, [r6, #36]	; 0x24
   17f24:	ldr	r1, [r6, #40]	; 0x28
   17f28:	cmp	r0, r1
   17f2c:	beq	17f40 <__assert_fail@plt+0x67e0>
   17f30:	mov	r0, r4
   17f34:	mov	r2, r5
   17f38:	bl	17f84 <__assert_fail@plt+0x6824>
   17f3c:	ldr	r0, [r6, #36]	; 0x24
   17f40:	ldr	r1, [r6, #44]	; 0x2c
   17f44:	cmp	r0, r1
   17f48:	beq	17f5c <__assert_fail@plt+0x67fc>
   17f4c:	mov	r0, r4
   17f50:	mov	r2, r5
   17f54:	bl	17f84 <__assert_fail@plt+0x6824>
   17f58:	ldr	r0, [r6, #36]	; 0x24
   17f5c:	ldr	r1, [r6, #48]	; 0x30
   17f60:	cmp	r0, r1
   17f64:	movne	r0, r4
   17f68:	movne	r2, r5
   17f6c:	blne	17f84 <__assert_fail@plt+0x6824>
   17f70:	ldrb	r0, [r4, #28]
   17f74:	orr	r0, r0, #8
   17f78:	strb	r0, [r4, #28]
   17f7c:	mov	r0, #0
   17f80:	pop	{r4, r5, r6, sl, fp, pc}
   17f84:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17f88:	add	fp, sp, #28
   17f8c:	sub	sp, sp, #348	; 0x15c
   17f90:	ldr	r3, [r0]
   17f94:	mov	r8, r0
   17f98:	mov	sl, r2
   17f9c:	mov	r2, #0
   17fa0:	str	r2, [sp, #40]	; 0x28
   17fa4:	ldr	r0, [r3, #92]	; 0x5c
   17fa8:	cmp	r0, #1
   17fac:	bne	17fbc <__assert_fail@plt+0x685c>
   17fb0:	ldrb	r0, [r8, #14]
   17fb4:	ubfx	r0, r0, #6, #1
   17fb8:	str	r0, [sp, #40]	; 0x28
   17fbc:	ldr	r0, [r1, #8]
   17fc0:	cmp	r0, #1
   17fc4:	blt	18a6c <__assert_fail@plt+0x730c>
   17fc8:	mvn	r0, #5
   17fcc:	mov	r7, #0
   17fd0:	mov	lr, #1
   17fd4:	mov	r2, #0
   17fd8:	str	r8, [sp, #28]
   17fdc:	str	sl, [sp, #68]	; 0x44
   17fe0:	str	r1, [sp, #48]	; 0x30
   17fe4:	str	r3, [sp, #64]	; 0x40
   17fe8:	sub	r0, r0, sl
   17fec:	str	r0, [sp, #24]
   17ff0:	add	r0, sl, #7
   17ff4:	str	r0, [sp, #20]
   17ff8:	add	r0, sl, #5
   17ffc:	str	r0, [sp, #16]
   18000:	add	r0, sl, #4
   18004:	str	r0, [sp, #12]
   18008:	add	r0, sl, #3
   1800c:	str	r0, [sp, #8]
   18010:	add	r0, sp, #72	; 0x48
   18014:	add	r0, r0, #1
   18018:	str	r0, [sp, #4]
   1801c:	b	18040 <__assert_fail@plt+0x68e0>
   18020:	mov	lr, #1
   18024:	ldr	r1, [sp, #48]	; 0x30
   18028:	ldr	r2, [sp, #52]	; 0x34
   1802c:	ldr	r3, [sp, #64]	; 0x40
   18030:	ldr	r0, [r1, #8]
   18034:	add	r2, r2, #1
   18038:	cmp	r2, r0
   1803c:	bge	18a6c <__assert_fail@plt+0x730c>
   18040:	ldr	r0, [r1, #12]
   18044:	str	r2, [sp, #52]	; 0x34
   18048:	ldr	r6, [r0, r2, lsl #2]
   1804c:	ldr	r2, [r3]
   18050:	add	r0, r2, r6, lsl #3
   18054:	ldrb	r4, [r0, #4]
   18058:	sub	r0, r4, #1
   1805c:	cmp	r0, #6
   18060:	bhi	18024 <__assert_fail@plt+0x68c4>
   18064:	add	r1, pc, #0
   18068:	ldr	pc, [r1, r0, lsl #2]
   1806c:	andeq	r8, r1, r8, lsl #1
   18070:	andeq	r8, r1, r8, asr #20
   18074:	muleq	r1, r0, r1
   18078:	andeq	r8, r1, r4, lsr #32
   1807c:	andeq	r8, r1, r8, asr #20
   18080:	andeq	r8, r1, r8, asr #4
   18084:	andeq	r8, r1, r8, asr #20
   18088:	ldrb	r4, [r2, r6, lsl #3]
   1808c:	ldr	r0, [sp, #40]	; 0x28
   18090:	cmp	r0, #0
   18094:	strb	lr, [sl, r4]
   18098:	beq	180b0 <__assert_fail@plt+0x6950>
   1809c:	bl	115d4 <__ctype_tolower_loc@plt>
   180a0:	ldr	r0, [r0]
   180a4:	mov	lr, #1
   180a8:	ldr	r0, [r0, r4, lsl #2]
   180ac:	strb	lr, [sl, r0]
   180b0:	ldrb	r0, [r8, #14]
   180b4:	tst	r0, #64	; 0x40
   180b8:	beq	18024 <__assert_fail@plt+0x68c4>
   180bc:	ldr	r0, [sp, #64]	; 0x40
   180c0:	ldr	r0, [r0, #92]	; 0x5c
   180c4:	cmp	r0, #2
   180c8:	blt	18024 <__assert_fail@plt+0x68c4>
   180cc:	ldr	ip, [sp, #64]	; 0x40
   180d0:	add	r1, r6, #1
   180d4:	movw	r4, #1
   180d8:	mov	r9, #1
   180dc:	add	r5, sp, #72	; 0x48
   180e0:	movt	r4, #32
   180e4:	ldr	r0, [ip]
   180e8:	ldrb	r0, [r0, r6, lsl #3]
   180ec:	strb	r0, [sp, #72]	; 0x48
   180f0:	ldr	r0, [ip, #8]
   180f4:	cmp	r1, r0
   180f8:	ldr	r0, [sp, #4]
   180fc:	bcs	18140 <__assert_fail@plt+0x69e0>
   18100:	ldr	r0, [sp, #4]
   18104:	ldr	r1, [ip]
   18108:	add	r3, r4, #254	; 0xfe
   1810c:	add	r1, r1, r6, lsl #3
   18110:	ldr	r2, [r1, #12]
   18114:	and	r2, r2, r3
   18118:	cmp	r2, r4
   1811c:	bne	18140 <__assert_fail@plt+0x69e0>
   18120:	ldrb	r1, [r1, #8]
   18124:	add	r3, r6, #2
   18128:	strb	r1, [r0], #1
   1812c:	add	r1, r6, #1
   18130:	ldr	r2, [ip, #8]
   18134:	mov	r6, r1
   18138:	cmp	r3, r2
   1813c:	bcc	18104 <__assert_fail@plt+0x69a4>
   18140:	sub	r4, r0, r5
   18144:	sub	r0, fp, #36	; 0x24
   18148:	mov	r1, r5
   1814c:	sub	r3, fp, #48	; 0x30
   18150:	str	r7, [fp, #-44]	; 0xffffffd4
   18154:	str	r7, [fp, #-48]	; 0xffffffd0
   18158:	mov	r2, r4
   1815c:	bl	2e470 <__assert_fail@plt+0x1cd10>
   18160:	cmp	r0, r4
   18164:	bne	18020 <__assert_fail@plt+0x68c0>
   18168:	ldr	r0, [fp, #-36]	; 0xffffffdc
   1816c:	bl	114a8 <towlower@plt>
   18170:	mov	r1, r0
   18174:	mov	r0, r5
   18178:	sub	r2, fp, #48	; 0x30
   1817c:	bl	11400 <wcrtomb@plt>
   18180:	cmn	r0, #1
   18184:	ldrbne	r0, [sp, #72]	; 0x48
   18188:	strbne	r9, [sl, r0]
   1818c:	b	18020 <__assert_fail@plt+0x68c0>
   18190:	ldr	r0, [sp, #40]	; 0x28
   18194:	cmp	r0, #0
   18198:	beq	1842c <__assert_fail@plt+0x6ccc>
   1819c:	ldr	r0, [r2, r6, lsl #3]
   181a0:	ldr	r1, [sp, #16]
   181a4:	ldr	r2, [sp, #12]
   181a8:	ldr	r7, [sp, #8]
   181ac:	mov	lr, #0
   181b0:	mov	r3, #4
   181b4:	str	r6, [sp, #44]	; 0x2c
   181b8:	ldr	r0, [r0]
   181bc:	str	r0, [sp, #60]	; 0x3c
   181c0:	ldr	r0, [sp, #20]
   181c4:	b	181f0 <__assert_fail@plt+0x6a90>
   181c8:	ldr	r1, [sp, #68]	; 0x44
   181cc:	strb	r2, [r1, r0]
   181d0:	add	lr, r8, #1
   181d4:	add	r0, r6, #1
   181d8:	add	r1, r5, #1
   181dc:	add	r2, r9, #1
   181e0:	add	r7, sl, #1
   181e4:	add	r3, r4, #4
   181e8:	cmp	lr, #32
   181ec:	beq	185d4 <__assert_fail@plt+0x6e74>
   181f0:	mov	r6, r0
   181f4:	ldr	r0, [sp, #60]	; 0x3c
   181f8:	mov	r9, r2
   181fc:	mov	r2, #1
   18200:	mov	r8, lr
   18204:	mov	r4, r3
   18208:	mov	sl, r7
   1820c:	mov	r5, r1
   18210:	tst	r0, r2, lsl lr
   18214:	beq	181d0 <__assert_fail@plt+0x6a70>
   18218:	ldr	r0, [sp, #68]	; 0x44
   1821c:	strb	r2, [r0, r8]
   18220:	add	r0, r8, #128	; 0x80
   18224:	lsr	r0, r0, #7
   18228:	cmp	r0, #2
   1822c:	mov	r0, r8
   18230:	bhi	181c8 <__assert_fail@plt+0x6a68>
   18234:	bl	115d4 <__ctype_tolower_loc@plt>
   18238:	ldr	r0, [r0]
   1823c:	mov	r2, #1
   18240:	ldr	r0, [r0, r8, lsl #2]
   18244:	b	181c8 <__assert_fail@plt+0x6a68>
   18248:	ldr	r0, [sp, #64]	; 0x40
   1824c:	ldr	r4, [r2, r6, lsl #3]
   18250:	ldr	r0, [r0, #92]	; 0x5c
   18254:	cmp	r0, #2
   18258:	blt	182d0 <__assert_fail@plt+0x6b70>
   1825c:	ldr	r0, [r4, #36]	; 0x24
   18260:	cmp	r0, #0
   18264:	bne	18280 <__assert_fail@plt+0x6b20>
   18268:	ldrb	r0, [r4, #16]
   1826c:	tst	r0, #1
   18270:	bne	18280 <__assert_fail@plt+0x6b20>
   18274:	ldr	r0, [r4, #32]
   18278:	cmp	r0, #0
   1827c:	beq	182d0 <__assert_fail@plt+0x6b70>
   18280:	add	r4, sp, #72	; 0x48
   18284:	sub	r5, fp, #48	; 0x30
   18288:	strb	r7, [fp, #-48]	; 0xffffffd0
   1828c:	mov	r0, #0
   18290:	mov	r1, r5
   18294:	mov	r2, #1
   18298:	mov	r3, r4
   1829c:	str	r7, [sp, #76]	; 0x4c
   182a0:	str	r7, [sp, #72]	; 0x48
   182a4:	bl	2e470 <__assert_fail@plt+0x1cd10>
   182a8:	ldrb	r1, [fp, #-48]	; 0xffffffd0
   182ac:	cmn	r0, #2
   182b0:	mov	lr, #1
   182b4:	add	r0, r1, #1
   182b8:	strbeq	lr, [sl, r1]
   182bc:	uxtb	r1, r0
   182c0:	strb	r0, [fp, #-48]	; 0xffffffd0
   182c4:	cmp	r1, r0
   182c8:	beq	1828c <__assert_fail@plt+0x6b2c>
   182cc:	b	18024 <__assert_fail@plt+0x68c4>
   182d0:	ldr	r0, [r4, #20]
   182d4:	cmp	r0, #1
   182d8:	blt	18024 <__assert_fail@plt+0x68c4>
   182dc:	ldr	r0, [sp, #40]	; 0x28
   182e0:	mov	r5, #0
   182e4:	cmp	r0, #0
   182e8:	bne	18304 <__assert_fail@plt+0x6ba4>
   182ec:	b	183ac <__assert_fail@plt+0x6c4c>
   182f0:	ldr	r0, [r4, #20]
   182f4:	add	r5, r5, #1
   182f8:	mov	r7, #0
   182fc:	cmp	r5, r0
   18300:	bge	18024 <__assert_fail@plt+0x68c4>
   18304:	str	r7, [fp, #-44]	; 0xffffffd4
   18308:	str	r7, [fp, #-48]	; 0xffffffd0
   1830c:	sub	r9, fp, #48	; 0x30
   18310:	add	r7, sp, #72	; 0x48
   18314:	ldr	r0, [r4]
   18318:	mov	r2, r9
   1831c:	ldr	r1, [r0, r5, lsl #2]
   18320:	mov	r0, r7
   18324:	bl	11400 <wcrtomb@plt>
   18328:	mov	lr, #1
   1832c:	cmn	r0, #1
   18330:	beq	18350 <__assert_fail@plt+0x6bf0>
   18334:	ldrb	r6, [sp, #72]	; 0x48
   18338:	strb	lr, [sl, r6]
   1833c:	bl	115d4 <__ctype_tolower_loc@plt>
   18340:	ldr	r0, [r0]
   18344:	mov	lr, #1
   18348:	ldr	r0, [r0, r6, lsl #2]
   1834c:	strb	lr, [sl, r0]
   18350:	ldrb	r0, [r8, #14]
   18354:	tst	r0, #64	; 0x40
   18358:	beq	182f0 <__assert_fail@plt+0x6b90>
   1835c:	ldr	r0, [sp, #64]	; 0x40
   18360:	ldr	r0, [r0, #92]	; 0x5c
   18364:	cmp	r0, #2
   18368:	blt	182f0 <__assert_fail@plt+0x6b90>
   1836c:	ldr	r0, [r4]
   18370:	ldr	r0, [r0, r5, lsl #2]
   18374:	bl	114a8 <towlower@plt>
   18378:	mov	r1, r0
   1837c:	mov	r0, r7
   18380:	mov	r2, r9
   18384:	bl	11400 <wcrtomb@plt>
   18388:	cmn	r0, #1
   1838c:	mov	lr, #1
   18390:	ldrbne	r0, [sp, #72]	; 0x48
   18394:	strbne	lr, [sl, r0]
   18398:	b	182f0 <__assert_fail@plt+0x6b90>
   1839c:	ldr	r0, [r4, #20]
   183a0:	add	r5, r5, #1
   183a4:	cmp	r5, r0
   183a8:	bge	18024 <__assert_fail@plt+0x68c4>
   183ac:	str	r7, [fp, #-44]	; 0xffffffd4
   183b0:	str	r7, [fp, #-48]	; 0xffffffd0
   183b4:	sub	r9, fp, #48	; 0x30
   183b8:	add	r6, sp, #72	; 0x48
   183bc:	ldr	r0, [r4]
   183c0:	mov	r2, r9
   183c4:	ldr	r1, [r0, r5, lsl #2]
   183c8:	mov	r0, r6
   183cc:	bl	11400 <wcrtomb@plt>
   183d0:	cmn	r0, #1
   183d4:	mov	lr, #1
   183d8:	ldrbne	r0, [sp, #72]	; 0x48
   183dc:	strbne	lr, [sl, r0]
   183e0:	ldrb	r0, [r8, #14]
   183e4:	tst	r0, #64	; 0x40
   183e8:	beq	1839c <__assert_fail@plt+0x6c3c>
   183ec:	ldr	r0, [sp, #64]	; 0x40
   183f0:	ldr	r0, [r0, #92]	; 0x5c
   183f4:	cmp	r0, #2
   183f8:	blt	1839c <__assert_fail@plt+0x6c3c>
   183fc:	ldr	r0, [r4]
   18400:	ldr	r0, [r0, r5, lsl #2]
   18404:	bl	114a8 <towlower@plt>
   18408:	mov	r1, r0
   1840c:	mov	r0, r6
   18410:	mov	r2, r9
   18414:	bl	11400 <wcrtomb@plt>
   18418:	cmn	r0, #1
   1841c:	mov	lr, #1
   18420:	ldrbne	r0, [sp, #72]	; 0x48
   18424:	strbne	lr, [sl, r0]
   18428:	b	1839c <__assert_fail@plt+0x6c3c>
   1842c:	mov	r0, #0
   18430:	mov	r1, #31
   18434:	ldr	r2, [r2, r6, lsl #3]
   18438:	ldr	r2, [r2, r0]
   1843c:	tst	r2, #1
   18440:	addne	r3, sl, r1
   18444:	strbne	lr, [r3, #-31]	; 0xffffffe1
   18448:	tst	r2, #2
   1844c:	addne	r3, sl, r0, lsl #3
   18450:	strbne	lr, [r3, #1]
   18454:	tst	r2, #4
   18458:	addne	r3, sl, r0, lsl #3
   1845c:	strbne	lr, [r3, #2]
   18460:	tst	r2, #8
   18464:	addne	r3, sl, r0, lsl #3
   18468:	strbne	lr, [r3, #3]
   1846c:	tst	r2, #16
   18470:	addne	r3, sl, r0, lsl #3
   18474:	strbne	lr, [r3, #4]
   18478:	tst	r2, #32
   1847c:	addne	r3, sl, r0, lsl #3
   18480:	strbne	lr, [r3, #5]
   18484:	tst	r2, #64	; 0x40
   18488:	addne	r3, sl, r0, lsl #3
   1848c:	strbne	lr, [r3, #6]
   18490:	tst	r2, #128	; 0x80
   18494:	addne	r3, sl, r0, lsl #3
   18498:	strbne	lr, [r3, #7]
   1849c:	tst	r2, #256	; 0x100
   184a0:	addne	r3, sl, r0, lsl #3
   184a4:	strbne	lr, [r3, #8]
   184a8:	tst	r2, #512	; 0x200
   184ac:	addne	r3, sl, r0, lsl #3
   184b0:	strbne	lr, [r3, #9]
   184b4:	tst	r2, #1024	; 0x400
   184b8:	addne	r3, sl, r0, lsl #3
   184bc:	strbne	lr, [r3, #10]
   184c0:	tst	r2, #2048	; 0x800
   184c4:	addne	r3, sl, r0, lsl #3
   184c8:	strbne	lr, [r3, #11]
   184cc:	tst	r2, #4096	; 0x1000
   184d0:	addne	r3, sl, r0, lsl #3
   184d4:	strbne	lr, [r3, #12]
   184d8:	tst	r2, #8192	; 0x2000
   184dc:	addne	r3, sl, r0, lsl #3
   184e0:	strbne	lr, [r3, #13]
   184e4:	tst	r2, #16384	; 0x4000
   184e8:	addne	r3, sl, r0, lsl #3
   184ec:	strbne	lr, [r3, #14]
   184f0:	tst	r2, #32768	; 0x8000
   184f4:	addne	r3, sl, r0, lsl #3
   184f8:	strbne	lr, [r3, #15]
   184fc:	tst	r2, #65536	; 0x10000
   18500:	addne	r3, sl, r0, lsl #3
   18504:	strbne	lr, [r3, #16]
   18508:	tst	r2, #131072	; 0x20000
   1850c:	addne	r3, sl, r0, lsl #3
   18510:	strbne	lr, [r3, #17]
   18514:	tst	r2, #262144	; 0x40000
   18518:	addne	r3, sl, r0, lsl #3
   1851c:	strbne	lr, [r3, #18]
   18520:	tst	r2, #524288	; 0x80000
   18524:	addne	r3, sl, r0, lsl #3
   18528:	strbne	lr, [r3, #19]
   1852c:	tst	r2, #1048576	; 0x100000
   18530:	addne	r3, sl, r0, lsl #3
   18534:	strbne	lr, [r3, #20]
   18538:	tst	r2, #2097152	; 0x200000
   1853c:	addne	r3, sl, r0, lsl #3
   18540:	strbne	lr, [r3, #21]
   18544:	tst	r2, #4194304	; 0x400000
   18548:	addne	r3, sl, r0, lsl #3
   1854c:	strbne	lr, [r3, #22]
   18550:	tst	r2, #8388608	; 0x800000
   18554:	addne	r3, sl, r0, lsl #3
   18558:	strbne	lr, [r3, #23]
   1855c:	tst	r2, #16777216	; 0x1000000
   18560:	addne	r3, sl, r0, lsl #3
   18564:	strbne	lr, [r3, #24]
   18568:	tst	r2, #33554432	; 0x2000000
   1856c:	addne	r3, sl, r0, lsl #3
   18570:	strbne	lr, [r3, #25]
   18574:	tst	r2, #67108864	; 0x4000000
   18578:	addne	r3, sl, r0, lsl #3
   1857c:	strbne	lr, [r3, #26]
   18580:	tst	r2, #134217728	; 0x8000000
   18584:	addne	r3, sl, r0, lsl #3
   18588:	strbne	lr, [r3, #27]
   1858c:	tst	r2, #268435456	; 0x10000000
   18590:	addne	r3, sl, r0, lsl #3
   18594:	strbne	lr, [r3, #28]
   18598:	tst	r2, #536870912	; 0x20000000
   1859c:	addne	r3, sl, r0, lsl #3
   185a0:	strbne	lr, [r3, #29]
   185a4:	tst	r2, #1073741824	; 0x40000000
   185a8:	addne	r3, sl, r0, lsl #3
   185ac:	strbne	lr, [r3, #30]
   185b0:	cmn	r2, #1
   185b4:	strble	lr, [sl, r1]
   185b8:	cmp	r0, #28
   185bc:	beq	18024 <__assert_fail@plt+0x68c4>
   185c0:	ldr	r2, [sp, #64]	; 0x40
   185c4:	add	r1, r1, #32
   185c8:	add	r0, r0, #4
   185cc:	ldr	r2, [r2]
   185d0:	b	18434 <__assert_fail@plt+0x6cd4>
   185d4:	ldr	r0, [sp, #68]	; 0x44
   185d8:	ldr	r1, [sp, #44]	; 0x2c
   185dc:	mov	ip, r5
   185e0:	mov	r5, r8
   185e4:	str	r8, [sp, #36]	; 0x24
   185e8:	add	r3, r0, lr
   185ec:	ldr	r0, [sp, #64]	; 0x40
   185f0:	ldr	r0, [r0]
   185f4:	ldr	r0, [r0, r1, lsl #3]
   185f8:	mov	r1, ip
   185fc:	ldr	r0, [r0, #4]
   18600:	str	r0, [sp, #60]	; 0x3c
   18604:	mov	r0, #0
   18608:	b	18670 <__assert_fail@plt+0x6f10>
   1860c:	mov	r9, r7
   18610:	str	sl, [sp, #56]	; 0x38
   18614:	mov	r6, ip
   18618:	mov	sl, lr
   1861c:	mov	r7, r3
   18620:	bl	115d4 <__ctype_tolower_loc@plt>
   18624:	ldr	r0, [r0]
   18628:	mov	lr, sl
   1862c:	ldr	sl, [sp, #56]	; 0x38
   18630:	ldr	r1, [sp, #68]	; 0x44
   18634:	mov	r3, r7
   18638:	mov	r7, r9
   1863c:	mov	ip, r6
   18640:	mov	r2, #1
   18644:	ldr	r0, [r0, r4]
   18648:	strb	r2, [r1, r0]
   1864c:	add	r0, r8, #1
   18650:	mov	r2, sl
   18654:	add	r6, ip, #1
   18658:	add	r1, r7, #1
   1865c:	add	r9, r5, #1
   18660:	add	sl, sl, #1
   18664:	add	r4, r4, #4
   18668:	cmp	r0, #32
   1866c:	beq	186b8 <__assert_fail@plt+0x6f58>
   18670:	mov	r7, r1
   18674:	ldr	r1, [sp, #60]	; 0x3c
   18678:	mov	r8, r0
   1867c:	mov	r0, #1
   18680:	mov	r5, r9
   18684:	mov	ip, r6
   18688:	tst	r1, r0, lsl r8
   1868c:	beq	1864c <__assert_fail@plt+0x6eec>
   18690:	strb	r0, [r3, r8]
   18694:	add	r0, lr, r8
   18698:	add	r0, r0, #128	; 0x80
   1869c:	lsr	r0, r0, #7
   186a0:	cmp	r0, #2
   186a4:	bls	1860c <__assert_fail@plt+0x6eac>
   186a8:	ldr	r1, [sp, #68]	; 0x44
   186ac:	add	r0, lr, r8
   186b0:	mov	r2, #1
   186b4:	b	18648 <__assert_fail@plt+0x6ee8>
   186b8:	add	r9, lr, r0
   186bc:	ldr	r0, [sp, #64]	; 0x40
   186c0:	ldr	r1, [sp, #44]	; 0x2c
   186c4:	mov	lr, #1
   186c8:	mov	r6, r2
   186cc:	str	r8, [sp, #60]	; 0x3c
   186d0:	ldr	r0, [r0]
   186d4:	ldr	r0, [r0, r1, lsl #3]
   186d8:	ldr	sl, [r0, #8]
   186dc:	mov	r0, #0
   186e0:	b	1870c <__assert_fail@plt+0x6fac>
   186e4:	ldr	r7, [sp, #68]	; 0x44
   186e8:	strb	lr, [r7, r0]
   186ec:	add	r0, r1, #1
   186f0:	add	ip, r2, #1
   186f4:	add	r7, r3, #1
   186f8:	add	r5, r4, #1
   186fc:	add	r6, r8, #1
   18700:	add	r9, r9, #1
   18704:	cmp	r0, #32
   18708:	beq	18778 <__assert_fail@plt+0x7018>
   1870c:	tst	sl, lr, lsl r0
   18710:	mov	r1, r0
   18714:	mov	r8, r6
   18718:	mov	r4, r5
   1871c:	mov	r3, r7
   18720:	mov	r2, ip
   18724:	beq	186ec <__assert_fail@plt+0x6f8c>
   18728:	ldr	r0, [sp, #68]	; 0x44
   1872c:	strb	lr, [r0, r9]
   18730:	add	r0, r9, #128	; 0x80
   18734:	lsr	r0, r0, #7
   18738:	cmp	r0, #2
   1873c:	mov	r0, r9
   18740:	bhi	186e4 <__assert_fail@plt+0x6f84>
   18744:	mov	r6, sl
   18748:	mov	r7, r1
   1874c:	mov	r5, r2
   18750:	mov	sl, r3
   18754:	bl	115d4 <__ctype_tolower_loc@plt>
   18758:	ldr	r0, [r0]
   1875c:	mov	r3, sl
   18760:	mov	sl, r6
   18764:	mov	r2, r5
   18768:	mov	r1, r7
   1876c:	mov	lr, #1
   18770:	ldr	r0, [r0, r9, lsl #2]
   18774:	b	186e4 <__assert_fail@plt+0x6f84>
   18778:	ldr	r0, [sp, #64]	; 0x40
   1877c:	str	r1, [sp, #56]	; 0x38
   18780:	ldr	r1, [sp, #44]	; 0x2c
   18784:	ldr	r0, [r0]
   18788:	ldr	r0, [r0, r1, lsl #3]
   1878c:	ldr	r5, [r0, #12]
   18790:	mov	r0, #0
   18794:	b	187c4 <__assert_fail@plt+0x7064>
   18798:	ldr	r1, [sp, #68]	; 0x44
   1879c:	strb	lr, [r1, r0]
   187a0:	mov	r1, r4
   187a4:	add	r0, r1, #1
   187a8:	add	r2, sl, #1
   187ac:	add	r3, r7, #1
   187b0:	add	r4, r6, #1
   187b4:	add	r8, r8, #1
   187b8:	add	r9, r9, #1
   187bc:	cmp	r0, #32
   187c0:	beq	1880c <__assert_fail@plt+0x70ac>
   187c4:	tst	r5, lr, lsl r0
   187c8:	mov	r1, r0
   187cc:	mov	r6, r4
   187d0:	mov	r7, r3
   187d4:	mov	sl, r2
   187d8:	beq	187a4 <__assert_fail@plt+0x7044>
   187dc:	add	r0, r9, #128	; 0x80
   187e0:	mov	r4, r1
   187e4:	strb	lr, [r8]
   187e8:	lsr	r0, r0, #7
   187ec:	cmp	r0, #2
   187f0:	mov	r0, r9
   187f4:	bhi	18798 <__assert_fail@plt+0x7038>
   187f8:	bl	115d4 <__ctype_tolower_loc@plt>
   187fc:	ldr	r0, [r0]
   18800:	mov	lr, #1
   18804:	ldr	r0, [r0, r9, lsl #2]
   18808:	b	18798 <__assert_fail@plt+0x7038>
   1880c:	ldr	r0, [sp, #64]	; 0x40
   18810:	str	r1, [sp, #32]
   18814:	ldr	r1, [sp, #44]	; 0x2c
   18818:	ldr	r0, [r0]
   1881c:	ldr	r0, [r0, r1, lsl #3]
   18820:	ldr	r2, [r0, #16]
   18824:	mov	r0, #0
   18828:	b	18850 <__assert_fail@plt+0x70f0>
   1882c:	ldr	r1, [sp, #68]	; 0x44
   18830:	strb	lr, [r1, r0]
   18834:	add	r0, r8, #1
   18838:	add	sl, r5, #1
   1883c:	add	r7, r4, #1
   18840:	add	r6, r6, #1
   18844:	add	r9, r9, #1
   18848:	cmp	r0, #32
   1884c:	beq	18898 <__assert_fail@plt+0x7138>
   18850:	tst	r2, lr, lsl r0
   18854:	mov	r8, r0
   18858:	mov	r4, r7
   1885c:	mov	r5, sl
   18860:	beq	18834 <__assert_fail@plt+0x70d4>
   18864:	add	r0, r9, #128	; 0x80
   18868:	strb	lr, [r6]
   1886c:	lsr	r0, r0, #7
   18870:	cmp	r0, #2
   18874:	mov	r0, r9
   18878:	bhi	1882c <__assert_fail@plt+0x70cc>
   1887c:	mov	r7, r2
   18880:	bl	115d4 <__ctype_tolower_loc@plt>
   18884:	ldr	r0, [r0]
   18888:	mov	r2, r7
   1888c:	mov	lr, #1
   18890:	ldr	r0, [r0, r9, lsl #2]
   18894:	b	1882c <__assert_fail@plt+0x70cc>
   18898:	ldr	r0, [sp, #64]	; 0x40
   1889c:	ldr	r1, [sp, #44]	; 0x2c
   188a0:	ldr	r0, [r0]
   188a4:	ldr	r0, [r0, r1, lsl #3]
   188a8:	ldr	sl, [r0, #20]
   188ac:	mov	r0, #0
   188b0:	tst	sl, lr, lsl r0
   188b4:	mov	r7, r0
   188b8:	mov	r6, r5
   188bc:	bne	188f4 <__assert_fail@plt+0x7194>
   188c0:	b	188cc <__assert_fail@plt+0x716c>
   188c4:	ldr	r1, [sp, #68]	; 0x44
   188c8:	strb	lr, [r1, r0]
   188cc:	add	r0, r7, #1
   188d0:	add	r5, r6, #1
   188d4:	add	r4, r4, #1
   188d8:	add	r9, r9, #1
   188dc:	cmp	r0, #32
   188e0:	beq	18920 <__assert_fail@plt+0x71c0>
   188e4:	tst	sl, lr, lsl r0
   188e8:	mov	r7, r0
   188ec:	mov	r6, r5
   188f0:	beq	188cc <__assert_fail@plt+0x716c>
   188f4:	add	r0, r9, #128	; 0x80
   188f8:	strb	lr, [r4]
   188fc:	lsr	r0, r0, #7
   18900:	cmp	r0, #2
   18904:	mov	r0, r9
   18908:	bhi	188c4 <__assert_fail@plt+0x7164>
   1890c:	bl	115d4 <__ctype_tolower_loc@plt>
   18910:	ldr	r0, [r0]
   18914:	mov	lr, #1
   18918:	ldr	r0, [r0, r9, lsl #2]
   1891c:	b	188c4 <__assert_fail@plt+0x7164>
   18920:	ldr	r0, [sp, #24]
   18924:	ldr	r1, [sp, #36]	; 0x24
   18928:	ldr	sl, [sp, #68]	; 0x44
   1892c:	sub	r0, r0, r1
   18930:	ldr	r1, [sp, #60]	; 0x3c
   18934:	sub	r0, r0, r1
   18938:	ldr	r1, [sp, #56]	; 0x38
   1893c:	sub	r0, r0, r1
   18940:	ldr	r1, [sp, #32]
   18944:	sub	r0, r0, r1
   18948:	ldr	r1, [sp, #44]	; 0x2c
   1894c:	sub	r0, r0, r8
   18950:	sub	r5, r0, r7
   18954:	ldr	r0, [sp, #64]	; 0x40
   18958:	mov	r7, #0
   1895c:	ldr	r0, [r0]
   18960:	ldr	r0, [r0, r1, lsl #3]
   18964:	ldr	r8, [r0, #24]
   18968:	tst	r8, lr, lsl r7
   1896c:	mov	r4, r6
   18970:	bne	189a0 <__assert_fail@plt+0x7240>
   18974:	b	1897c <__assert_fail@plt+0x721c>
   18978:	strb	lr, [sl, r0]
   1897c:	add	r7, r7, #1
   18980:	add	r6, r4, #1
   18984:	sub	r5, r5, #1
   18988:	add	r9, r9, #1
   1898c:	cmp	r7, #32
   18990:	beq	189d0 <__assert_fail@plt+0x7270>
   18994:	tst	r8, lr, lsl r7
   18998:	mov	r4, r6
   1899c:	beq	1897c <__assert_fail@plt+0x721c>
   189a0:	mov	r0, #0
   189a4:	strb	lr, [r0, -r5]
   189a8:	add	r0, r9, #128	; 0x80
   189ac:	lsr	r0, r0, #7
   189b0:	cmp	r0, #2
   189b4:	mov	r0, r9
   189b8:	bhi	18978 <__assert_fail@plt+0x7218>
   189bc:	bl	115d4 <__ctype_tolower_loc@plt>
   189c0:	ldr	r0, [r0]
   189c4:	mov	lr, #1
   189c8:	ldr	r0, [r0, r9, lsl #2]
   189cc:	b	18978 <__assert_fail@plt+0x7218>
   189d0:	ldr	r0, [sp, #64]	; 0x40
   189d4:	ldr	r1, [sp, #44]	; 0x2c
   189d8:	ldr	r8, [sp, #28]
   189dc:	mov	r6, #0
   189e0:	mov	r7, #0
   189e4:	ldr	r0, [r0]
   189e8:	ldr	r0, [r0, r1, lsl #3]
   189ec:	ldr	r5, [r0, #28]
   189f0:	tst	r5, lr, lsl r6
   189f4:	bne	18a1c <__assert_fail@plt+0x72bc>
   189f8:	b	18a00 <__assert_fail@plt+0x72a0>
   189fc:	strb	lr, [sl, r0]
   18a00:	add	r6, r6, #1
   18a04:	add	r4, r4, #1
   18a08:	add	r9, r9, #1
   18a0c:	cmp	r6, #32
   18a10:	beq	18024 <__assert_fail@plt+0x68c4>
   18a14:	tst	r5, lr, lsl r6
   18a18:	beq	18a00 <__assert_fail@plt+0x72a0>
   18a1c:	add	r0, r9, #128	; 0x80
   18a20:	strb	lr, [r4]
   18a24:	lsr	r0, r0, #7
   18a28:	cmp	r0, #2
   18a2c:	mov	r0, r9
   18a30:	bhi	189fc <__assert_fail@plt+0x729c>
   18a34:	bl	115d4 <__ctype_tolower_loc@plt>
   18a38:	ldr	r0, [r0]
   18a3c:	mov	lr, #1
   18a40:	ldr	r0, [r0, r9, lsl #2]
   18a44:	b	189fc <__assert_fail@plt+0x729c>
   18a48:	mov	r0, sl
   18a4c:	mov	r1, #1
   18a50:	mov	r2, #256	; 0x100
   18a54:	bl	11670 <memset@plt>
   18a58:	cmp	r4, #2
   18a5c:	bne	18a6c <__assert_fail@plt+0x730c>
   18a60:	ldrb	r0, [r8, #28]
   18a64:	orr	r0, r0, #1
   18a68:	strb	r0, [r8, #28]
   18a6c:	sub	sp, fp, #28
   18a70:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18a74:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   18a78:	add	fp, sp, #24
   18a7c:	mov	r4, r0
   18a80:	mov	r0, #0
   18a84:	mov	r6, r2
   18a88:	mov	r5, r1
   18a8c:	str	r0, [r4]
   18a90:	str	r0, [r4, #4]
   18a94:	str	r0, [r4, #8]
   18a98:	mov	r0, #256	; 0x100
   18a9c:	bl	2e08c <__assert_fail@plt+0x1c92c>
   18aa0:	cmp	r0, #0
   18aa4:	str	r0, [r4, #16]
   18aa8:	beq	18bd8 <__assert_fail@plt+0x7478>
   18aac:	movw	r0, #45820	; 0xb2fc
   18ab0:	tst	r6, #1
   18ab4:	and	r1, r6, #2
   18ab8:	movt	r0, #3
   18abc:	movweq	r0, #710	; 0x2c6
   18ac0:	movteq	r0, #257	; 0x101
   18ac4:	tst	r6, #4
   18ac8:	orr	r7, r0, r1, lsl #21
   18acc:	bne	18ae0 <__assert_fail@plt+0x7380>
   18ad0:	ldrb	r0, [r4, #28]
   18ad4:	and	r0, r0, #127	; 0x7f
   18ad8:	strb	r0, [r4, #28]
   18adc:	b	18b00 <__assert_fail@plt+0x73a0>
   18ae0:	ldrb	r0, [r4, #28]
   18ae4:	mvn	r1, #127	; 0x7f
   18ae8:	orr	r0, r0, r1
   18aec:	movw	r1, #45758	; 0xb2be
   18af0:	movt	r1, #323	; 0x143
   18af4:	strb	r0, [r4, #28]
   18af8:	and	r1, r7, r1
   18afc:	orr	r7, r1, #256	; 0x100
   18b00:	and	r1, r6, #8
   18b04:	and	r0, r0, #239	; 0xef
   18b08:	mov	r8, #0
   18b0c:	orr	r0, r0, r1, lsl #1
   18b10:	str	r8, [r4, #20]
   18b14:	strb	r0, [r4, #28]
   18b18:	mov	r0, r5
   18b1c:	bl	11628 <strlen@plt>
   18b20:	mov	r2, r0
   18b24:	mov	r0, r4
   18b28:	mov	r1, r5
   18b2c:	mov	r3, r7
   18b30:	bl	166b0 <__assert_fail@plt+0x4f50>
   18b34:	cmp	r0, #16
   18b38:	mov	r5, r0
   18b3c:	movweq	r5, #8
   18b40:	cmp	r5, #0
   18b44:	bne	18be4 <__assert_fail@plt+0x7484>
   18b48:	ldr	r5, [r4, #16]
   18b4c:	ldr	r6, [r4]
   18b50:	mov	r1, #0
   18b54:	mov	r2, #256	; 0x100
   18b58:	mov	r0, r5
   18b5c:	bl	11670 <memset@plt>
   18b60:	ldr	r1, [r6, #36]	; 0x24
   18b64:	mov	r0, r4
   18b68:	mov	r2, r5
   18b6c:	bl	17f84 <__assert_fail@plt+0x6824>
   18b70:	ldr	r0, [r6, #36]	; 0x24
   18b74:	ldr	r1, [r6, #40]	; 0x28
   18b78:	cmp	r0, r1
   18b7c:	beq	18b90 <__assert_fail@plt+0x7430>
   18b80:	mov	r0, r4
   18b84:	mov	r2, r5
   18b88:	bl	17f84 <__assert_fail@plt+0x6824>
   18b8c:	ldr	r0, [r6, #36]	; 0x24
   18b90:	ldr	r1, [r6, #44]	; 0x2c
   18b94:	cmp	r0, r1
   18b98:	beq	18bac <__assert_fail@plt+0x744c>
   18b9c:	mov	r0, r4
   18ba0:	mov	r2, r5
   18ba4:	bl	17f84 <__assert_fail@plt+0x6824>
   18ba8:	ldr	r0, [r6, #36]	; 0x24
   18bac:	ldr	r1, [r6, #48]	; 0x30
   18bb0:	cmp	r0, r1
   18bb4:	movne	r0, r4
   18bb8:	movne	r2, r5
   18bbc:	blne	17f84 <__assert_fail@plt+0x6824>
   18bc0:	ldrb	r0, [r4, #28]
   18bc4:	mov	r5, #0
   18bc8:	orr	r0, r0, #8
   18bcc:	strb	r0, [r4, #28]
   18bd0:	mov	r0, r5
   18bd4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   18bd8:	mov	r5, #12
   18bdc:	mov	r0, r5
   18be0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   18be4:	ldr	r0, [r4, #16]
   18be8:	bl	144c0 <__assert_fail@plt+0x2d60>
   18bec:	mov	r0, r5
   18bf0:	str	r8, [r4, #16]
   18bf4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   18bf8:	push	{r4, r5, r6, r7, fp, lr}
   18bfc:	add	fp, sp, #16
   18c00:	cmp	r0, #17
   18c04:	bcs	18c78 <__assert_fail@plt+0x7518>
   18c08:	movw	r1, #63296	; 0xf740
   18c0c:	mov	r4, r2
   18c10:	mov	r2, #5
   18c14:	mov	r5, r3
   18c18:	movt	r1, #2
   18c1c:	ldr	r0, [r1, r0, lsl #2]
   18c20:	movw	r1, #62912	; 0xf5c0
   18c24:	movt	r1, #2
   18c28:	add	r1, r1, r0
   18c2c:	mov	r0, #0
   18c30:	bl	114d8 <dcgettext@plt>
   18c34:	mov	r6, r0
   18c38:	bl	11628 <strlen@plt>
   18c3c:	add	r7, r0, #1
   18c40:	cmp	r5, #0
   18c44:	beq	18c60 <__assert_fail@plt+0x7500>
   18c48:	cmp	r7, r5
   18c4c:	mov	r2, r7
   18c50:	bhi	18c68 <__assert_fail@plt+0x7508>
   18c54:	mov	r0, r4
   18c58:	mov	r1, r6
   18c5c:	bl	11484 <memcpy@plt>
   18c60:	mov	r0, r7
   18c64:	pop	{r4, r5, r6, r7, fp, pc}
   18c68:	sub	r2, r5, #1
   18c6c:	mov	r0, #0
   18c70:	strb	r0, [r4, r2]
   18c74:	b	18c54 <__assert_fail@plt+0x74f4>
   18c78:	bl	1173c <abort@plt>
   18c7c:	push	{r4, r5, fp, lr}
   18c80:	add	fp, sp, #8
   18c84:	ldr	r5, [r0]
   18c88:	mov	r4, r0
   18c8c:	cmp	r5, #0
   18c90:	beq	18cbc <__assert_fail@plt+0x755c>
   18c94:	movw	r0, #0
   18c98:	movw	r1, #0
   18c9c:	movt	r0, #0
   18ca0:	movt	r1, #0
   18ca4:	orrs	r0, r1, r0
   18ca8:	beq	18cb4 <__assert_fail@plt+0x7554>
   18cac:	add	r0, r5, #136	; 0x88
   18cb0:	bl	11430 <pthread_mutex_destroy@plt>
   18cb4:	mov	r0, r5
   18cb8:	bl	18ce4 <__assert_fail@plt+0x7584>
   18cbc:	mov	r5, #0
   18cc0:	str	r5, [r4]
   18cc4:	str	r5, [r4, #4]
   18cc8:	ldr	r0, [r4, #16]
   18ccc:	bl	144c0 <__assert_fail@plt+0x2d60>
   18cd0:	str	r5, [r4, #16]
   18cd4:	ldr	r0, [r4, #20]
   18cd8:	bl	144c0 <__assert_fail@plt+0x2d60>
   18cdc:	str	r5, [r4, #20]
   18ce0:	pop	{r4, r5, fp, pc}
   18ce4:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   18ce8:	add	fp, sp, #24
   18cec:	mov	r8, r0
   18cf0:	ldr	r0, [r0]
   18cf4:	cmp	r0, #0
   18cf8:	beq	18d7c <__assert_fail@plt+0x761c>
   18cfc:	ldr	r1, [r8, #8]
   18d00:	cmp	r1, #0
   18d04:	beq	18d7c <__assert_fail@plt+0x761c>
   18d08:	movw	r7, #255	; 0xff
   18d0c:	mov	r6, #0
   18d10:	movt	r7, #4
   18d14:	add	r1, r0, r6, lsl #3
   18d18:	ldr	r1, [r1, #4]
   18d1c:	and	r1, r1, r7
   18d20:	cmp	r1, #3
   18d24:	beq	18d58 <__assert_fail@plt+0x75f8>
   18d28:	cmp	r1, #6
   18d2c:	bne	18d64 <__assert_fail@plt+0x7604>
   18d30:	ldr	r5, [r0, r6, lsl #3]
   18d34:	ldr	r0, [r5]
   18d38:	bl	144c0 <__assert_fail@plt+0x2d60>
   18d3c:	ldr	r0, [r5, #4]
   18d40:	bl	144c0 <__assert_fail@plt+0x2d60>
   18d44:	ldr	r0, [r5, #8]
   18d48:	bl	144c0 <__assert_fail@plt+0x2d60>
   18d4c:	ldr	r0, [r5, #12]
   18d50:	bl	144c0 <__assert_fail@plt+0x2d60>
   18d54:	b	18d5c <__assert_fail@plt+0x75fc>
   18d58:	ldr	r5, [r0, r6, lsl #3]
   18d5c:	mov	r0, r5
   18d60:	bl	144c0 <__assert_fail@plt+0x2d60>
   18d64:	ldr	r0, [r8, #8]
   18d68:	add	r6, r6, #1
   18d6c:	cmp	r6, r0
   18d70:	bcs	18d7c <__assert_fail@plt+0x761c>
   18d74:	ldr	r0, [r8]
   18d78:	b	18d14 <__assert_fail@plt+0x75b4>
   18d7c:	ldr	r0, [r8, #12]
   18d80:	bl	144c0 <__assert_fail@plt+0x2d60>
   18d84:	ldr	r0, [r8, #8]
   18d88:	cmp	r0, #0
   18d8c:	beq	18dfc <__assert_fail@plt+0x769c>
   18d90:	mov	r5, #0
   18d94:	mov	r6, #8
   18d98:	ldr	r0, [r8, #24]
   18d9c:	cmp	r0, #0
   18da0:	bne	18dc8 <__assert_fail@plt+0x7668>
   18da4:	b	18dd0 <__assert_fail@plt+0x7670>
   18da8:	ldr	r0, [r8, #8]
   18dac:	add	r5, r5, #1
   18db0:	add	r6, r6, #12
   18db4:	cmp	r5, r0
   18db8:	bcs	18dfc <__assert_fail@plt+0x769c>
   18dbc:	ldr	r0, [r8, #24]
   18dc0:	cmp	r0, #0
   18dc4:	beq	18dd0 <__assert_fail@plt+0x7670>
   18dc8:	ldr	r0, [r0, r6]
   18dcc:	bl	144c0 <__assert_fail@plt+0x2d60>
   18dd0:	ldr	r0, [r8, #28]
   18dd4:	cmp	r0, #0
   18dd8:	beq	18de4 <__assert_fail@plt+0x7684>
   18ddc:	ldr	r0, [r0, r6]
   18de0:	bl	144c0 <__assert_fail@plt+0x2d60>
   18de4:	ldr	r0, [r8, #20]
   18de8:	cmp	r0, #0
   18dec:	beq	18da8 <__assert_fail@plt+0x7648>
   18df0:	ldr	r0, [r0, r6]
   18df4:	bl	144c0 <__assert_fail@plt+0x2d60>
   18df8:	b	18da8 <__assert_fail@plt+0x7648>
   18dfc:	ldr	r0, [r8, #20]
   18e00:	bl	144c0 <__assert_fail@plt+0x2d60>
   18e04:	ldr	r0, [r8, #24]
   18e08:	bl	144c0 <__assert_fail@plt+0x2d60>
   18e0c:	ldr	r0, [r8, #28]
   18e10:	bl	144c0 <__assert_fail@plt+0x2d60>
   18e14:	ldr	r0, [r8]
   18e18:	bl	144c0 <__assert_fail@plt+0x2d60>
   18e1c:	ldr	r5, [r8, #32]
   18e20:	cmp	r5, #0
   18e24:	beq	18e84 <__assert_fail@plt+0x7724>
   18e28:	mov	r6, #0
   18e2c:	add	r0, r6, r6, lsl #1
   18e30:	ldr	r0, [r5, r0, lsl #2]!
   18e34:	add	r7, r5, #8
   18e38:	cmp	r0, #1
   18e3c:	blt	18e60 <__assert_fail@plt+0x7700>
   18e40:	mov	r4, #0
   18e44:	ldr	r0, [r7]
   18e48:	ldr	r0, [r0, r4, lsl #2]
   18e4c:	bl	1c0b0 <__assert_fail@plt+0xa950>
   18e50:	ldr	r0, [r5]
   18e54:	add	r4, r4, #1
   18e58:	cmp	r4, r0
   18e5c:	blt	18e44 <__assert_fail@plt+0x76e4>
   18e60:	ldr	r0, [r7]
   18e64:	bl	144c0 <__assert_fail@plt+0x2d60>
   18e68:	ldr	r0, [r8, #68]	; 0x44
   18e6c:	cmp	r6, r0
   18e70:	bcs	18e80 <__assert_fail@plt+0x7720>
   18e74:	ldr	r5, [r8, #32]
   18e78:	add	r6, r6, #1
   18e7c:	b	18e2c <__assert_fail@plt+0x76cc>
   18e80:	ldr	r5, [r8, #32]
   18e84:	mov	r0, r5
   18e88:	bl	144c0 <__assert_fail@plt+0x2d60>
   18e8c:	ldr	r0, [r8, #60]	; 0x3c
   18e90:	movw	r1, #63364	; 0xf784
   18e94:	movt	r1, #2
   18e98:	cmp	r0, r1
   18e9c:	beq	18ea4 <__assert_fail@plt+0x7744>
   18ea0:	bl	144c0 <__assert_fail@plt+0x2d60>
   18ea4:	ldr	r0, [r8, #132]	; 0x84
   18ea8:	bl	144c0 <__assert_fail@plt+0x2d60>
   18eac:	mov	r0, r8
   18eb0:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   18eb4:	b	144c0 <__assert_fail@plt+0x2d60>
   18eb8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18ebc:	add	fp, sp, #28
   18ec0:	sub	sp, sp, #28
   18ec4:	ldr	sl, [fp, #8]
   18ec8:	mov	r7, #2
   18ecc:	cmp	sl, #7
   18ed0:	bhi	18fa4 <__assert_fail@plt+0x7844>
   18ed4:	mov	r5, r0
   18ed8:	ldr	r0, [r0]
   18edc:	mov	r6, r3
   18ee0:	mov	r9, r2
   18ee4:	mov	r4, r1
   18ee8:	tst	sl, #4
   18eec:	str	r0, [sp, #24]
   18ef0:	bne	18f08 <__assert_fail@plt+0x77a8>
   18ef4:	mov	r0, r4
   18ef8:	bl	11628 <strlen@plt>
   18efc:	mov	r7, r0
   18f00:	mov	r8, #0
   18f04:	b	18f10 <__assert_fail@plt+0x77b0>
   18f08:	ldr	r8, [r6]
   18f0c:	ldr	r7, [r6, #4]
   18f10:	movw	r0, #0
   18f14:	movw	r1, #0
   18f18:	movt	r0, #0
   18f1c:	movt	r1, #0
   18f20:	orrs	r0, r1, r0
   18f24:	str	r0, [sp, #20]
   18f28:	beq	18f38 <__assert_fail@plt+0x77d8>
   18f2c:	ldr	r0, [sp, #24]
   18f30:	add	r0, r0, #136	; 0x88
   18f34:	bl	1146c <pthread_mutex_lock@plt>
   18f38:	ldrb	r0, [r5, #28]
   18f3c:	tst	r0, #16
   18f40:	bne	18f54 <__assert_fail@plt+0x77f4>
   18f44:	str	r7, [sp]
   18f48:	stmib	sp, {r7, r9}
   18f4c:	str	r6, [sp, #12]
   18f50:	b	18f68 <__assert_fail@plt+0x7808>
   18f54:	mov	r0, #0
   18f58:	str	r7, [sp]
   18f5c:	str	r7, [sp, #4]
   18f60:	str	r0, [sp, #8]
   18f64:	str	r0, [sp, #12]
   18f68:	mov	r0, r5
   18f6c:	mov	r1, r4
   18f70:	mov	r2, r7
   18f74:	mov	r3, r8
   18f78:	str	sl, [sp, #16]
   18f7c:	bl	18fb0 <__assert_fail@plt+0x7850>
   18f80:	mov	r7, r0
   18f84:	ldr	r0, [sp, #20]
   18f88:	cmp	r0, #0
   18f8c:	beq	18f9c <__assert_fail@plt+0x783c>
   18f90:	ldr	r0, [sp, #24]
   18f94:	add	r0, r0, #136	; 0x88
   18f98:	bl	113b8 <pthread_mutex_unlock@plt>
   18f9c:	cmp	r7, #0
   18fa0:	movwne	r7, #1
   18fa4:	mov	r0, r7
   18fa8:	sub	sp, fp, #28
   18fac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18fb0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18fb4:	add	fp, sp, #28
   18fb8:	sub	sp, sp, #412	; 0x19c
   18fbc:	ldr	r7, [r0]
   18fc0:	str	r2, [sp, #76]	; 0x4c
   18fc4:	str	r1, [sp, #100]	; 0x64
   18fc8:	mov	r4, r0
   18fcc:	add	r0, sp, #104	; 0x68
   18fd0:	mov	r1, #0
   18fd4:	mov	r2, #136	; 0x88
   18fd8:	mov	r6, r3
   18fdc:	mov	r9, #0
   18fe0:	bl	11670 <memset@plt>
   18fe4:	str	r7, [sp, #188]	; 0xbc
   18fe8:	ldr	r0, [fp, #16]
   18fec:	ldr	sl, [fp, #8]
   18ff0:	mov	r5, #0
   18ff4:	ldr	r1, [r4, #16]
   18ff8:	cmp	r1, #0
   18ffc:	beq	19018 <__assert_fail@plt+0x78b8>
   19000:	ldrb	r2, [r4, #28]
   19004:	and	r2, r2, #9
   19008:	cmp	r2, #8
   1900c:	movne	r1, #0
   19010:	subs	r5, r6, sl
   19014:	movne	r5, r1
   19018:	ldr	r2, [r4, #24]
   1901c:	ldr	r1, [r4, #8]
   19020:	mov	r8, #1
   19024:	mvn	r3, r2
   19028:	cmp	r2, r0
   1902c:	addcc	r9, r3, r0
   19030:	cmp	r1, #0
   19034:	beq	1b628 <__assert_fail@plt+0x9ec8>
   19038:	ldr	r1, [r7, #36]	; 0x24
   1903c:	cmp	r1, #0
   19040:	ldrne	r2, [r7, #40]	; 0x28
   19044:	cmpne	r2, #0
   19048:	beq	1b628 <__assert_fail@plt+0x9ec8>
   1904c:	ldr	r3, [r7, #44]	; 0x2c
   19050:	cmp	r3, #0
   19054:	strne	r7, [sp, #96]	; 0x60
   19058:	ldrne	r7, [r7, #48]	; 0x30
   1905c:	cmpne	r7, #0
   19060:	beq	1b628 <__assert_fail@plt+0x9ec8>
   19064:	ldr	r1, [r1, #8]
   19068:	ldr	ip, [r4, #20]
   1906c:	cmp	r1, #0
   19070:	beq	1907c <__assert_fail@plt+0x791c>
   19074:	ldr	lr, [sp, #96]	; 0x60
   19078:	b	1908c <__assert_fail@plt+0x792c>
   1907c:	ldr	r1, [r2, #8]
   19080:	ldr	lr, [sp, #96]	; 0x60
   19084:	cmp	r1, #0
   19088:	beq	1a740 <__assert_fail@plt+0x8fe0>
   1908c:	str	sl, [sp, #80]	; 0x50
   19090:	subs	r0, r0, r9
   19094:	str	r9, [sp, #32]
   19098:	str	r0, [sp, #92]	; 0x5c
   1909c:	mov	r0, #1
   190a0:	str	r0, [sp, #56]	; 0x38
   190a4:	bne	190b8 <__assert_fail@plt+0x7958>
   190a8:	ldr	r0, [lr, #76]	; 0x4c
   190ac:	cmp	r0, #0
   190b0:	movwne	r0, #1
   190b4:	str	r0, [sp, #56]	; 0x38
   190b8:	ldr	r0, [r4, #12]
   190bc:	ldr	r2, [lr, #92]	; 0x5c
   190c0:	ldr	r3, [sp, #100]	; 0x64
   190c4:	ldr	r1, [lr, #8]
   190c8:	str	ip, [sp, #168]	; 0xa8
   190cc:	mov	r7, r4
   190d0:	str	r3, [sp, #104]	; 0x68
   190d4:	str	r2, [sp, #184]	; 0xb8
   190d8:	ubfx	r3, r0, #22, #1
   190dc:	ldr	r4, [sp, #76]	; 0x4c
   190e0:	and	r0, r0, #4194304	; 0x400000
   190e4:	add	r9, r1, #1
   190e8:	orrs	sl, ip, r0
   190ec:	strb	r3, [sp, #176]	; 0xb0
   190f0:	mov	r3, lr
   190f4:	add	r3, sp, #104	; 0x68
   190f8:	movwne	sl, #1
   190fc:	add	r3, r3, #44	; 0x2c
   19100:	cmp	r2, r9
   19104:	strb	sl, [sp, #179]	; 0xb3
   19108:	movgt	r9, r2
   1910c:	vdup.32	q8, r4
   19110:	ldrb	r0, [lr, #88]	; 0x58
   19114:	vst1.32	{d16-d17}, [r3]
   19118:	ubfx	r3, r0, #3, #1
   1911c:	strb	r3, [sp, #178]	; 0xb2
   19120:	ubfx	r0, r0, #2, #1
   19124:	str	r7, [sp, #64]	; 0x40
   19128:	str	r5, [sp, #88]	; 0x58
   1912c:	str	ip, [sp, #84]	; 0x54
   19130:	strb	r0, [sp, #177]	; 0xb1
   19134:	add	r0, r4, #1
   19138:	cmp	r0, r9
   1913c:	movlt	r9, r0
   19140:	cmp	r2, #2
   19144:	blt	19178 <__assert_fail@plt+0x7a18>
   19148:	mov	r8, #12
   1914c:	cmn	r9, #-1073741823	; 0xc0000001
   19150:	bhi	1b5d4 <__assert_fail@plt+0x9e74>
   19154:	lsl	r1, r9, #2
   19158:	mov	r0, #0
   1915c:	bl	2e0bc <__assert_fail@plt+0x1c95c>
   19160:	ldr	ip, [sp, #84]	; 0x54
   19164:	ldr	r5, [sp, #88]	; 0x58
   19168:	cmp	r0, #0
   1916c:	beq	1b5d4 <__assert_fail@plt+0x9e74>
   19170:	ldr	r7, [sp, #64]	; 0x40
   19174:	str	r0, [sp, #112]	; 0x70
   19178:	ldr	r4, [sp, #96]	; 0x60
   1917c:	mov	r8, #1
   19180:	cmp	sl, #0
   19184:	beq	191ac <__assert_fail@plt+0x7a4c>
   19188:	mov	r0, #0
   1918c:	mov	r1, r9
   19190:	mov	r8, #0
   19194:	bl	2e0bc <__assert_fail@plt+0x1c95c>
   19198:	cmp	r0, #0
   1919c:	beq	1b63c <__assert_fail@plt+0x9edc>
   191a0:	ldr	r5, [sp, #88]	; 0x58
   191a4:	ldr	ip, [sp, #84]	; 0x54
   191a8:	str	r0, [sp, #108]	; 0x6c
   191ac:	add	r1, r4, #96	; 0x60
   191b0:	str	r9, [sp, #140]	; 0x8c
   191b4:	ldr	r0, [fp, #12]
   191b8:	cmp	r8, #0
   191bc:	str	r1, [sp, #172]	; 0xac
   191c0:	ldrb	r1, [r4, #88]	; 0x58
   191c4:	ubfx	r1, r1, #4, #1
   191c8:	strb	r1, [sp, #182]	; 0xb6
   191cc:	mov	r1, #0
   191d0:	beq	191ec <__assert_fail@plt+0x7a8c>
   191d4:	ldr	r1, [sp, #100]	; 0x64
   191d8:	str	r1, [sp, #108]	; 0x6c
   191dc:	ldr	r1, [r4, #92]	; 0x5c
   191e0:	cmp	r1, #1
   191e4:	ldr	r1, [sp, #76]	; 0x4c
   191e8:	movwgt	r1, #0
   191ec:	str	r0, [sp, #160]	; 0xa0
   191f0:	str	r1, [sp, #136]	; 0x88
   191f4:	str	r1, [sp, #132]	; 0x84
   191f8:	str	r0, [sp, #156]	; 0x9c
   191fc:	ldrb	r0, [r7, #28]
   19200:	lsr	r0, r0, #7
   19204:	strb	r0, [sp, #181]	; 0xb5
   19208:	mvn	r0, #0
   1920c:	ldr	sl, [r4, #76]	; 0x4c
   19210:	str	r0, [sp, #196]	; 0xc4
   19214:	ldr	r0, [fp, #24]
   19218:	lsl	r4, sl, #1
   1921c:	cmp	sl, #1
   19220:	str	r0, [sp, #192]	; 0xc0
   19224:	blt	19274 <__assert_fail@plt+0x7b14>
   19228:	movw	r0, #43690	; 0xaaaa
   1922c:	mov	r8, #12
   19230:	movt	r0, #2730	; 0xaaa
   19234:	cmp	r4, r0
   19238:	bhi	1b5d4 <__assert_fail@plt+0x9e74>
   1923c:	add	r0, sl, sl, lsl #1
   19240:	lsl	r0, r0, #4
   19244:	bl	2e08c <__assert_fail@plt+0x1c92c>
   19248:	mov	r5, r0
   1924c:	str	r0, [sp, #220]	; 0xdc
   19250:	lsl	r0, sl, #3
   19254:	bl	2e08c <__assert_fail@plt+0x1c92c>
   19258:	cmp	r0, #0
   1925c:	str	r0, [sp, #236]	; 0xec
   19260:	beq	1b5d4 <__assert_fail@plt+0x9e74>
   19264:	cmp	r5, #0
   19268:	ldr	r5, [sp, #88]	; 0x58
   1926c:	ldr	ip, [sp, #84]	; 0x54
   19270:	beq	1b5d4 <__assert_fail@plt+0x9e74>
   19274:	mov	r0, #1
   19278:	str	r4, [sp, #232]	; 0xe8
   1927c:	str	r0, [sp, #224]	; 0xe0
   19280:	ldr	r0, [sp, #92]	; 0x5c
   19284:	str	r4, [sp, #216]	; 0xd8
   19288:	cmp	r0, #1
   1928c:	bhi	192a0 <__assert_fail@plt+0x7b40>
   19290:	ldr	r0, [sp, #96]	; 0x60
   19294:	ldrb	r0, [r0, #88]	; 0x58
   19298:	tst	r0, #2
   1929c:	beq	192cc <__assert_fail@plt+0x7b6c>
   192a0:	mov	r8, #12
   192a4:	cmn	r9, #-1073741822	; 0xc0000002
   192a8:	bhi	1b5d4 <__assert_fail@plt+0x9e74>
   192ac:	mov	r0, #4
   192b0:	add	r0, r0, r9, lsl #2
   192b4:	bl	2e08c <__assert_fail@plt+0x1c92c>
   192b8:	ldr	ip, [sp, #84]	; 0x54
   192bc:	ldr	r5, [sp, #88]	; 0x58
   192c0:	cmp	r0, #0
   192c4:	str	r0, [sp, #204]	; 0xcc
   192c8:	beq	1b5d4 <__assert_fail@plt+0x9e74>
   192cc:	ldr	r1, [fp, #24]
   192d0:	ldr	r2, [sp, #80]	; 0x50
   192d4:	str	r6, [fp, #-200]	; 0xffffff38
   192d8:	mov	r0, #4
   192dc:	mov	r9, #1
   192e0:	mov	sl, #1
   192e4:	mov	r4, r6
   192e8:	tst	r1, #1
   192ec:	mov	r1, #4
   192f0:	mov	r7, r2
   192f4:	movweq	r1, #6
   192f8:	cmp	r2, r6
   192fc:	str	r1, [sp, #164]	; 0xa4
   19300:	ldr	r1, [sp, #96]	; 0x60
   19304:	mvnlt	sl, #0
   19308:	movlt	r7, r6
   1930c:	movlt	r4, r2
   19310:	cmp	r5, #0
   19314:	ldr	r1, [r1, #92]	; 0x5c
   19318:	str	r1, [sp, #60]	; 0x3c
   1931c:	beq	19360 <__assert_fail@plt+0x7c00>
   19320:	cmp	r1, #1
   19324:	beq	19344 <__assert_fail@plt+0x7be4>
   19328:	ldr	r0, [sp, #64]	; 0x40
   1932c:	ldr	r0, [r0, #12]
   19330:	and	r0, r0, #4194304	; 0x400000
   19334:	orr	r0, ip, r0
   19338:	clz	r0, r0
   1933c:	lsr	r0, r0, #5
   19340:	lsl	r0, r0, #2
   19344:	cmp	ip, #0
   19348:	mov	r1, ip
   1934c:	movwne	r1, #1
   19350:	cmp	r2, r6
   19354:	orrge	r1, r1, #2
   19358:	orr	r0, r1, r0
   1935c:	b	19364 <__assert_fail@plt+0x7c04>
   19360:	mov	r0, #8
   19364:	add	r1, sp, #104	; 0x68
   19368:	cmp	r2, r6
   1936c:	sub	r0, r0, #4
   19370:	str	sl, [sp, #68]	; 0x44
   19374:	str	r7, [sp, #52]	; 0x34
   19378:	str	r4, [sp, #48]	; 0x30
   1937c:	add	r1, r1, #32
   19380:	str	r0, [sp, #80]	; 0x50
   19384:	str	r1, [sp, #24]
   19388:	sub	r1, fp, #200	; 0xc8
   1938c:	movwlt	r1, #0
   19390:	cmp	r1, #0
   19394:	str	r1, [sp, #40]	; 0x28
   19398:	movwne	r1, #1
   1939c:	str	r1, [sp, #44]	; 0x2c
   193a0:	sub	r1, fp, #192	; 0xc0
   193a4:	add	r1, r1, #16
   193a8:	str	r1, [sp, #36]	; 0x24
   193ac:	ldr	r1, [sp, #80]	; 0x50
   193b0:	cmp	r1, #4
   193b4:	bhi	19428 <__assert_fail@plt+0x7cc8>
   193b8:	add	r0, pc, #0
   193bc:	ldr	pc, [r0, r1, lsl #2]
   193c0:	ldrdeq	r9, [r1], -r4
   193c4:	ldrdeq	r9, [r1], -r4
   193c8:	andeq	r9, r1, r4, asr #9
   193cc:	strdeq	r9, [r1], -r4
   193d0:	andeq	r9, r1, ip, lsr #10
   193d4:	mov	r8, #1
   193d8:	cmp	r6, r4
   193dc:	blt	1b5d4 <__assert_fail@plt+0x9e74>
   193e0:	cmp	ip, #0
   193e4:	beq	1a070 <__assert_fail@plt+0x8910>
   193e8:	ldr	r1, [sp, #76]	; 0x4c
   193ec:	mov	r0, #0
   193f0:	cmp	r6, r1
   193f4:	bge	19400 <__assert_fail@plt+0x7ca0>
   193f8:	ldr	r0, [sp, #100]	; 0x64
   193fc:	ldrb	r0, [r0, r6]
   19400:	ldrb	r0, [ip, r0]
   19404:	ldrb	r0, [r5, r0]
   19408:	cmp	r0, #0
   1940c:	bne	1952c <__assert_fail@plt+0x7dcc>
   19410:	sub	r0, r6, #1
   19414:	cmp	r6, r4
   19418:	mov	r6, r0
   1941c:	str	r0, [fp, #-200]	; 0xffffff38
   19420:	bgt	193ec <__assert_fail@plt+0x7c8c>
   19424:	b	1b5d4 <__assert_fail@plt+0x9e74>
   19428:	ldr	r0, [sp, #128]	; 0x80
   1942c:	ldr	r2, [sp, #136]	; 0x88
   19430:	sub	r1, r6, r0
   19434:	cmp	r1, r2
   19438:	bcs	19480 <__assert_fail@plt+0x7d20>
   1943c:	ldr	r3, [sp, #132]	; 0x84
   19440:	mov	r2, #0
   19444:	cmp	r1, r3
   19448:	bcs	19454 <__assert_fail@plt+0x7cf4>
   1944c:	ldr	r2, [sp, #108]	; 0x6c
   19450:	ldrb	r2, [r2, r1]
   19454:	ldrb	r1, [r5, r2]
   19458:	cmp	r1, #0
   1945c:	bne	1952c <__assert_fail@plt+0x7dcc>
   19460:	add	r6, r6, sl
   19464:	mov	r8, #1
   19468:	cmp	r6, r4
   1946c:	str	r6, [fp, #-200]	; 0xffffff38
   19470:	blt	1b5d4 <__assert_fail@plt+0x9e74>
   19474:	cmp	r6, r7
   19478:	ble	1942c <__assert_fail@plt+0x7ccc>
   1947c:	b	1b5d4 <__assert_fail@plt+0x9e74>
   19480:	ldr	r2, [fp, #24]
   19484:	add	r0, sp, #104	; 0x68
   19488:	mov	r1, r6
   1948c:	bl	231fc <__assert_fail@plt+0x11a9c>
   19490:	cmp	r0, #0
   19494:	bne	1b6d4 <__assert_fail@plt+0x9f74>
   19498:	ldr	r0, [sp, #128]	; 0x80
   1949c:	ldr	r6, [fp, #-200]	; 0xffffff38
   194a0:	ldr	r5, [sp, #88]	; 0x58
   194a4:	ldr	r7, [sp, #52]	; 0x34
   194a8:	ldr	r4, [sp, #48]	; 0x30
   194ac:	sub	r1, r6, r0
   194b0:	ldr	r3, [sp, #132]	; 0x84
   194b4:	mov	r2, #0
   194b8:	cmp	r1, r3
   194bc:	bcc	1944c <__assert_fail@plt+0x7cec>
   194c0:	b	19454 <__assert_fail@plt+0x7cf4>
   194c4:	ldr	r1, [sp, #100]	; 0x64
   194c8:	cmp	r6, r7
   194cc:	bge	19524 <__assert_fail@plt+0x7dc4>
   194d0:	ldrb	r0, [r1, r6]
   194d4:	ldrb	r0, [r5, r0]
   194d8:	cmp	r0, #0
   194dc:	bne	19524 <__assert_fail@plt+0x7dc4>
   194e0:	add	r6, r6, #1
   194e4:	cmp	r6, r7
   194e8:	str	r6, [fp, #-200]	; 0xffffff38
   194ec:	blt	194d0 <__assert_fail@plt+0x7d70>
   194f0:	b	19524 <__assert_fail@plt+0x7dc4>
   194f4:	cmp	r6, r7
   194f8:	bge	19524 <__assert_fail@plt+0x7dc4>
   194fc:	ldr	r1, [sp, #100]	; 0x64
   19500:	ldrb	r0, [r1, r6]
   19504:	ldrb	r0, [ip, r0]
   19508:	ldrb	r0, [r5, r0]
   1950c:	cmp	r0, #0
   19510:	bne	19524 <__assert_fail@plt+0x7dc4>
   19514:	add	r6, r6, #1
   19518:	cmp	r6, r7
   1951c:	str	r6, [fp, #-200]	; 0xffffff38
   19520:	blt	19500 <__assert_fail@plt+0x7da0>
   19524:	cmp	r6, r7
   19528:	beq	1a444 <__assert_fail@plt+0x8ce4>
   1952c:	ldr	r2, [fp, #24]
   19530:	add	r0, sp, #104	; 0x68
   19534:	mov	r1, r6
   19538:	bl	231fc <__assert_fail@plt+0x11a9c>
   1953c:	cmp	r0, #0
   19540:	bne	1b6d4 <__assert_fail@plt+0x9f74>
   19544:	ldr	r0, [sp, #60]	; 0x3c
   19548:	cmp	r0, #1
   1954c:	ldrne	r0, [sp, #132]	; 0x84
   19550:	cmpne	r0, #0
   19554:	bne	19fdc <__assert_fail@plt+0x887c>
   19558:	mov	r0, #0
   1955c:	str	r0, [sp, #212]	; 0xd4
   19560:	str	r0, [sp, #224]	; 0xe0
   19564:	str	r0, [sp, #208]	; 0xd0
   19568:	str	r0, [fp, #-196]	; 0xffffff3c
   1956c:	ldr	r4, [sp, #188]	; 0xbc
   19570:	ldr	ip, [sp, #144]	; 0x90
   19574:	ldr	r6, [r4, #36]	; 0x24
   19578:	ldrsb	r0, [r6, #52]	; 0x34
   1957c:	cmn	r0, #1
   19580:	ble	19ff0 <__assert_fail@plt+0x8890>
   19584:	ldr	r7, [sp, #44]	; 0x2c
   19588:	cmp	r6, #0
   1958c:	beq	1b63c <__assert_fail@plt+0x9edc>
   19590:	ldr	r0, [sp, #204]	; 0xcc
   19594:	mov	r8, r7
   19598:	cmp	r0, #0
   1959c:	beq	195b4 <__assert_fail@plt+0x7e54>
   195a0:	str	r6, [r0, ip, lsl #2]
   195a4:	mov	r8, r7
   195a8:	ldr	r0, [r4, #76]	; 0x4c
   195ac:	cmp	r0, #0
   195b0:	bne	1a324 <__assert_fail@plt+0x8bc4>
   195b4:	ldrb	r0, [r6, #52]	; 0x34
   195b8:	tst	r0, #16
   195bc:	bne	1a2fc <__assert_fail@plt+0x8b9c>
   195c0:	mov	r0, #0
   195c4:	mvn	r4, #0
   195c8:	str	r0, [sp, #72]	; 0x48
   195cc:	ldr	r0, [sp, #144]	; 0x90
   195d0:	ldr	r1, [sp, #160]	; 0xa0
   195d4:	cmp	r1, r0
   195d8:	ble	19da8 <__assert_fail@plt+0x8648>
   195dc:	ldr	sl, [sp, #40]	; 0x28
   195e0:	b	195f4 <__assert_fail@plt+0x7e94>
   195e4:	ldr	r0, [sp, #144]	; 0x90
   195e8:	ldr	r1, [sp, #160]	; 0xa0
   195ec:	cmp	r1, r0
   195f0:	ble	19dac <__assert_fail@plt+0x864c>
   195f4:	ldr	r2, [sp, #140]	; 0x8c
   195f8:	ldr	r1, [sp, #152]	; 0x98
   195fc:	add	r7, r0, #1
   19600:	mov	r5, r6
   19604:	cmp	r7, r2
   19608:	blt	19614 <__assert_fail@plt+0x7eb4>
   1960c:	cmp	r2, r1
   19610:	blt	19c3c <__assert_fail@plt+0x84dc>
   19614:	ldr	r2, [sp, #132]	; 0x84
   19618:	cmp	r7, r2
   1961c:	blt	19628 <__assert_fail@plt+0x7ec8>
   19620:	cmp	r2, r1
   19624:	blt	19c3c <__assert_fail@plt+0x84dc>
   19628:	ldrb	r0, [r5, #52]	; 0x34
   1962c:	tst	r0, #32
   19630:	bne	197ec <__assert_fail@plt+0x808c>
   19634:	ldr	r1, [sp, #144]	; 0x90
   19638:	ldr	r0, [sp, #108]	; 0x6c
   1963c:	add	r2, r1, #1
   19640:	str	r2, [sp, #144]	; 0x90
   19644:	ldrb	r6, [r0, r1]
   19648:	ldr	r0, [r5, #44]	; 0x2c
   1964c:	cmp	r0, #0
   19650:	bne	19690 <__assert_fail@plt+0x7f30>
   19654:	ldr	r2, [r5, #48]	; 0x30
   19658:	cmp	r2, #0
   1965c:	bne	19c60 <__assert_fail@plt+0x8500>
   19660:	ldr	r0, [sp, #188]	; 0xbc
   19664:	mov	r1, r5
   19668:	mov	r9, r8
   1966c:	mov	r8, ip
   19670:	bl	26f10 <__assert_fail@plt+0x157b0>
   19674:	mov	ip, r8
   19678:	mov	r8, r9
   1967c:	mov	r9, #1
   19680:	cmp	r0, #0
   19684:	bne	19648 <__assert_fail@plt+0x7ee8>
   19688:	mov	r0, #12
   1968c:	b	19d28 <__assert_fail@plt+0x85c8>
   19690:	ldr	r6, [r0, r6, lsl #2]
   19694:	ldr	r0, [sp, #204]	; 0xcc
   19698:	cmp	r0, #0
   1969c:	beq	196bc <__assert_fail@plt+0x7f5c>
   196a0:	mov	r2, r6
   196a4:	sub	r0, fp, #196	; 0xc4
   196a8:	add	r1, sp, #104	; 0x68
   196ac:	mov	r6, ip
   196b0:	bl	24c68 <__assert_fail@plt+0x13508>
   196b4:	mov	ip, r6
   196b8:	mov	r6, r0
   196bc:	cmp	r6, #0
   196c0:	beq	19734 <__assert_fail@plt+0x7fd4>
   196c4:	sub	r0, r5, r6
   196c8:	clz	r0, r0
   196cc:	lsr	r0, r0, #5
   196d0:	ands	r8, r8, r0
   196d4:	ldrb	r0, [r6, #52]	; 0x34
   196d8:	moveq	r7, ip
   196dc:	mov	ip, r7
   196e0:	tst	r0, #16
   196e4:	beq	195e4 <__assert_fail@plt+0x7e84>
   196e8:	sxtb	r0, r0
   196ec:	cmn	r0, #1
   196f0:	bgt	19714 <__assert_fail@plt+0x7fb4>
   196f4:	ldr	r2, [sp, #144]	; 0x90
   196f8:	add	r0, sp, #104	; 0x68
   196fc:	mov	r1, r6
   19700:	mov	r5, ip
   19704:	bl	23c5c <__assert_fail@plt+0x124fc>
   19708:	mov	ip, r5
   1970c:	cmp	r0, #0
   19710:	beq	195e4 <__assert_fail@plt+0x7e84>
   19714:	ldr	r0, [sp, #56]	; 0x38
   19718:	ldr	r4, [sp, #144]	; 0x90
   1971c:	cmp	r0, #0
   19720:	beq	19dbc <__assert_fail@plt+0x865c>
   19724:	mov	sl, #0
   19728:	mov	r0, #1
   1972c:	str	r0, [sp, #72]	; 0x48
   19730:	b	195e4 <__assert_fail@plt+0x7e84>
   19734:	ldr	r0, [fp, #-196]	; 0xffffff3c
   19738:	cmp	r0, #0
   1973c:	bne	1b63c <__assert_fail@plt+0x9edc>
   19740:	ldr	r0, [sp, #72]	; 0x48
   19744:	ldr	r1, [sp, #56]	; 0x38
   19748:	cmp	r0, #0
   1974c:	mvn	r1, r1
   19750:	movwne	r0, #1
   19754:	tst	r1, r0
   19758:	bne	19dac <__assert_fail@plt+0x864c>
   1975c:	ldr	r0, [sp, #204]	; 0xcc
   19760:	cmp	r0, #0
   19764:	beq	19dac <__assert_fail@plt+0x864c>
   19768:	ldr	r2, [sp, #144]	; 0x90
   1976c:	ldr	r1, [sp, #208]	; 0xd0
   19770:	add	r0, r0, #4
   19774:	cmp	r2, r1
   19778:	bge	19dac <__assert_fail@plt+0x864c>
   1977c:	add	r3, r2, #1
   19780:	str	r3, [sp, #144]	; 0x90
   19784:	ldr	r2, [r0, r2, lsl #2]
   19788:	cmp	r2, #0
   1978c:	mov	r2, r3
   19790:	beq	19774 <__assert_fail@plt+0x8014>
   19794:	sub	r0, fp, #196	; 0xc4
   19798:	add	r1, sp, #104	; 0x68
   1979c:	mov	r2, #0
   197a0:	mov	r9, r8
   197a4:	mov	r8, ip
   197a8:	bl	24c68 <__assert_fail@plt+0x13508>
   197ac:	cmp	r0, #0
   197b0:	mov	r6, r0
   197b4:	ldreq	r0, [fp, #-196]	; 0xffffff3c
   197b8:	cmpeq	r0, #0
   197bc:	bne	197d4 <__assert_fail@plt+0x8074>
   197c0:	ldr	r0, [sp, #204]	; 0xcc
   197c4:	mov	ip, r8
   197c8:	mov	r8, r9
   197cc:	mov	r9, #1
   197d0:	b	19768 <__assert_fail@plt+0x8008>
   197d4:	mov	ip, r8
   197d8:	mov	r8, r9
   197dc:	cmp	r6, #0
   197e0:	mov	r9, #1
   197e4:	bne	196c4 <__assert_fail@plt+0x7f64>
   197e8:	b	19dac <__assert_fail@plt+0x864c>
   197ec:	ldr	r0, [r5, #8]
   197f0:	cmp	r0, #1
   197f4:	blt	19cac <__assert_fail@plt+0x854c>
   197f8:	ldr	lr, [sp, #188]	; 0xbc
   197fc:	mov	r3, #0
   19800:	str	ip, [sp, #8]
   19804:	str	lr, [sp, #16]
   19808:	b	1981c <__assert_fail@plt+0x80bc>
   1980c:	ldr	r0, [r5, #8]
   19810:	add	r3, r3, #1
   19814:	cmp	r3, r0
   19818:	bge	19cac <__assert_fail@plt+0x854c>
   1981c:	ldr	r0, [r5, #12]
   19820:	ldr	r2, [r0, r3, lsl #2]
   19824:	ldr	r0, [lr]
   19828:	add	r0, r0, r2, lsl #3
   1982c:	mov	r1, r2
   19830:	str	r2, [sp, #28]
   19834:	ldr	r1, [r0, #4]
   19838:	tst	r1, #1048576	; 0x100000
   1983c:	beq	1980c <__assert_fail@plt+0x80ac>
   19840:	movw	r0, #65280	; 0xff00
   19844:	str	r3, [sp, #20]
   19848:	movt	r0, #3
   1984c:	tst	r1, r0
   19850:	beq	19964 <__assert_fail@plt+0x8204>
   19854:	ldr	r0, [sp, #144]	; 0x90
   19858:	str	r1, [sp, #12]
   1985c:	cmn	r0, #1
   19860:	ble	1989c <__assert_fail@plt+0x813c>
   19864:	ldr	r1, [sp, #152]	; 0x98
   19868:	cmp	r1, r0
   1986c:	beq	19b80 <__assert_fail@plt+0x8420>
   19870:	ldr	r1, [sp, #184]	; 0xb8
   19874:	cmp	r1, #2
   19878:	blt	198a4 <__assert_fail@plt+0x8144>
   1987c:	ldr	r1, [sp, #112]	; 0x70
   19880:	ldr	r3, [sp, #20]
   19884:	ldr	r6, [r1, r0, lsl #2]
   19888:	cmn	r6, #1
   1988c:	bne	198e0 <__assert_fail@plt+0x8180>
   19890:	sub	r0, r0, #1
   19894:	cmn	r0, #1
   19898:	bne	19884 <__assert_fail@plt+0x8124>
   1989c:	ldr	r1, [sp, #164]	; 0xa4
   198a0:	b	19908 <__assert_fail@plt+0x81a8>
   198a4:	ldr	r1, [sp, #108]	; 0x6c
   198a8:	ldr	r2, [sp, #172]	; 0xac
   198ac:	ldrb	r0, [r1, r0]
   198b0:	ubfx	r1, r0, #5, #3
   198b4:	and	r6, r0, #31
   198b8:	ldr	r3, [r2, r1, lsl #2]
   198bc:	mov	r1, #1
   198c0:	mov	r2, #0
   198c4:	tst	r3, r1, lsl r6
   198c8:	ldr	r3, [sp, #20]
   198cc:	bne	19924 <__assert_fail@plt+0x81c4>
   198d0:	mov	r1, #0
   198d4:	cmp	r0, #10
   198d8:	beq	198f8 <__assert_fail@plt+0x8198>
   198dc:	b	19908 <__assert_fail@plt+0x81a8>
   198e0:	ldrb	r0, [sp, #182]	; 0xb6
   198e4:	cmp	r0, #0
   198e8:	bne	19bb0 <__assert_fail@plt+0x8450>
   198ec:	mov	r1, #0
   198f0:	cmp	r6, #10
   198f4:	bne	19908 <__assert_fail@plt+0x81a8>
   198f8:	ldrb	r0, [sp, #181]	; 0xb5
   198fc:	cmp	r0, #0
   19900:	movwne	r0, #1
   19904:	lsl	r1, r0, #1
   19908:	ldr	r6, [sp, #12]
   1990c:	and	r0, r1, #1
   19910:	eor	r2, r0, #1
   19914:	tst	r6, #1024	; 0x400
   19918:	beq	19924 <__assert_fail@plt+0x81c4>
   1991c:	cmp	r0, #0
   19920:	beq	1980c <__assert_fail@plt+0x80ac>
   19924:	ldr	r0, [lr]
   19928:	ldr	r6, [sp, #28]
   1992c:	cmp	r2, #0
   19930:	add	r0, r0, r6, lsl #3
   19934:	ldr	r0, [r0, #4]
   19938:	bne	19944 <__assert_fail@plt+0x81e4>
   1993c:	ands	r2, r0, #2048	; 0x800
   19940:	bne	1980c <__assert_fail@plt+0x80ac>
   19944:	tst	r1, #2
   19948:	bne	19954 <__assert_fail@plt+0x81f4>
   1994c:	ands	r2, r0, #8192	; 0x2000
   19950:	bne	1980c <__assert_fail@plt+0x80ac>
   19954:	tst	r1, #8
   19958:	bne	19964 <__assert_fail@plt+0x8204>
   1995c:	ands	r0, r0, #32768	; 0x8000
   19960:	bne	1980c <__assert_fail@plt+0x80ac>
   19964:	ldr	r3, [sp, #144]	; 0x90
   19968:	ldr	r1, [sp, #28]
   1996c:	mov	r0, lr
   19970:	add	r2, sp, #104	; 0x68
   19974:	bl	26954 <__assert_fail@plt+0x151f4>
   19978:	ldr	r3, [sp, #20]
   1997c:	ldr	lr, [sp, #16]
   19980:	ldr	ip, [sp, #8]
   19984:	cmp	r0, #0
   19988:	beq	1980c <__assert_fail@plt+0x80ac>
   1998c:	ldr	r1, [sp, #224]	; 0xe0
   19990:	cmp	r1, r0
   19994:	movlt	r1, r0
   19998:	str	r1, [sp, #224]	; 0xe0
   1999c:	ldr	r3, [sp, #144]	; 0x90
   199a0:	ldr	r2, [sp, #140]	; 0x8c
   199a4:	ldr	r1, [sp, #152]	; 0x98
   199a8:	ldr	r6, [sp, #208]	; 0xd0
   199ac:	add	r3, r3, r0
   199b0:	cmp	r2, r3
   199b4:	str	r3, [sp, #12]
   199b8:	cmple	r2, r1
   199bc:	blt	199d0 <__assert_fail@plt+0x8270>
   199c0:	ldr	r0, [sp, #132]	; 0x84
   199c4:	cmp	r0, r3
   199c8:	cmple	r0, r1
   199cc:	bge	199ec <__assert_fail@plt+0x828c>
   199d0:	add	r1, r3, #1
   199d4:	add	r0, sp, #104	; 0x68
   199d8:	bl	24a64 <__assert_fail@plt+0x13304>
   199dc:	ldr	r3, [sp, #12]
   199e0:	ldr	lr, [sp, #16]
   199e4:	cmp	r0, #0
   199e8:	bne	19d20 <__assert_fail@plt+0x85c0>
   199ec:	cmp	r3, r6
   199f0:	ble	19a1c <__assert_fail@plt+0x82bc>
   199f4:	sub	r0, r3, r6
   199f8:	mov	r1, #0
   199fc:	lsl	r2, r0, #2
   19a00:	ldr	r0, [sp, #204]	; 0xcc
   19a04:	add	r0, r0, r6, lsl #2
   19a08:	add	r0, r0, #4
   19a0c:	bl	11670 <memset@plt>
   19a10:	ldr	r3, [sp, #12]
   19a14:	ldr	lr, [sp, #16]
   19a18:	str	r3, [sp, #208]	; 0xd0
   19a1c:	mov	r0, #0
   19a20:	ldr	r2, [sp, #28]
   19a24:	str	r0, [fp, #-48]	; 0xffffffd0
   19a28:	ldr	r0, [sp, #204]	; 0xcc
   19a2c:	ldr	r1, [lr, #24]
   19a30:	ldr	r6, [r0, r3, lsl #2]
   19a34:	ldr	r0, [lr, #12]
   19a38:	ldr	r0, [r0, r2, lsl #2]
   19a3c:	cmp	r6, #0
   19a40:	add	r0, r0, r0, lsl #1
   19a44:	add	r2, r1, r0, lsl #2
   19a48:	beq	19a6c <__assert_fail@plt+0x830c>
   19a4c:	ldr	r1, [r6, #40]	; 0x28
   19a50:	sub	r0, fp, #192	; 0xc0
   19a54:	bl	24ea8 <__assert_fail@plt+0x13748>
   19a58:	ldr	r3, [sp, #12]
   19a5c:	cmp	r0, #0
   19a60:	str	r0, [fp, #-48]	; 0xffffffd0
   19a64:	beq	19a7c <__assert_fail@plt+0x831c>
   19a68:	b	19d40 <__assert_fail@plt+0x85e0>
   19a6c:	vldr	d16, [r2]
   19a70:	ldr	r0, [r2, #8]
   19a74:	str	r0, [fp, #-184]	; 0xffffff48
   19a78:	vstr	d16, [fp, #-192]	; 0xffffff40
   19a7c:	cmp	r3, #0
   19a80:	str	r6, [sp, #4]
   19a84:	ble	19b94 <__assert_fail@plt+0x8434>
   19a88:	ldr	r1, [sp, #152]	; 0x98
   19a8c:	sub	r0, r3, #1
   19a90:	cmp	r1, r0
   19a94:	ldr	r1, [sp, #16]
   19a98:	beq	19ba0 <__assert_fail@plt+0x8440>
   19a9c:	ldr	r2, [sp, #184]	; 0xb8
   19aa0:	cmp	r2, #2
   19aa4:	blt	19acc <__assert_fail@plt+0x836c>
   19aa8:	ldr	r2, [sp, #112]	; 0x70
   19aac:	ldr	r6, [r2, r0, lsl #2]
   19ab0:	cmn	r6, #1
   19ab4:	bne	19afc <__assert_fail@plt+0x839c>
   19ab8:	sub	r0, r0, #1
   19abc:	cmn	r0, #1
   19ac0:	bne	19aac <__assert_fail@plt+0x834c>
   19ac4:	ldr	r3, [sp, #164]	; 0xa4
   19ac8:	b	19b24 <__assert_fail@plt+0x83c4>
   19acc:	ldr	r3, [sp, #108]	; 0x6c
   19ad0:	ldr	r2, [sp, #172]	; 0xac
   19ad4:	ldrb	r0, [r3, r0]
   19ad8:	ubfx	r3, r0, #5, #3
   19adc:	ldr	r6, [r2, r3, lsl #2]
   19ae0:	and	r2, r0, #31
   19ae4:	mov	r3, #1
   19ae8:	tst	r6, r3, lsl r2
   19aec:	moveq	r3, #0
   19af0:	cmpeq	r0, #10
   19af4:	bne	19b24 <__assert_fail@plt+0x83c4>
   19af8:	b	19b14 <__assert_fail@plt+0x83b4>
   19afc:	ldrb	r0, [sp, #182]	; 0xb6
   19b00:	cmp	r0, #0
   19b04:	bne	19bf0 <__assert_fail@plt+0x8490>
   19b08:	mov	r3, #0
   19b0c:	cmp	r6, #10
   19b10:	bne	19b24 <__assert_fail@plt+0x83c4>
   19b14:	ldrb	r0, [sp, #181]	; 0xb5
   19b18:	cmp	r0, #0
   19b1c:	movwne	r0, #1
   19b20:	lsl	r3, r0, #1
   19b24:	sub	r0, fp, #48	; 0x30
   19b28:	sub	r2, fp, #192	; 0xc0
   19b2c:	bl	22658 <__assert_fail@plt+0x10ef8>
   19b30:	ldr	r1, [sp, #204]	; 0xcc
   19b34:	ldr	r2, [sp, #12]
   19b38:	str	r0, [r1, r2, lsl #2]
   19b3c:	ldr	r0, [sp, #4]
   19b40:	cmp	r0, #0
   19b44:	beq	19b54 <__assert_fail@plt+0x83f4>
   19b48:	ldr	r0, [fp, #-184]	; 0xffffff48
   19b4c:	bl	144c0 <__assert_fail@plt+0x2d60>
   19b50:	ldr	r2, [sp, #12]
   19b54:	ldr	r0, [sp, #204]	; 0xcc
   19b58:	ldr	ip, [sp, #8]
   19b5c:	ldr	lr, [sp, #16]
   19b60:	ldr	r3, [sp, #20]
   19b64:	ldr	r0, [r0, r2, lsl #2]
   19b68:	cmp	r0, #0
   19b6c:	bne	1980c <__assert_fail@plt+0x80ac>
   19b70:	ldr	r0, [fp, #-48]	; 0xffffffd0
   19b74:	cmp	r0, #0
   19b78:	beq	1980c <__assert_fail@plt+0x80ac>
   19b7c:	b	19d28 <__assert_fail@plt+0x85c8>
   19b80:	ldr	r0, [sp, #192]	; 0xc0
   19b84:	ldr	r3, [sp, #20]
   19b88:	and	r0, r0, #2
   19b8c:	eor	r1, r0, #10
   19b90:	b	19908 <__assert_fail@plt+0x81a8>
   19b94:	ldr	r3, [sp, #164]	; 0xa4
   19b98:	ldr	r1, [sp, #16]
   19b9c:	b	19b24 <__assert_fail@plt+0x83c4>
   19ba0:	ldr	r0, [sp, #192]	; 0xc0
   19ba4:	and	r0, r0, #2
   19ba8:	eor	r3, r0, #10
   19bac:	b	19b24 <__assert_fail@plt+0x83c4>
   19bb0:	mov	r0, r6
   19bb4:	str	r8, [sp, #4]
   19bb8:	mov	r8, ip
   19bbc:	bl	1164c <iswalnum@plt>
   19bc0:	mov	r1, #1
   19bc4:	mov	r2, #0
   19bc8:	cmp	r6, #95	; 0x5f
   19bcc:	beq	19c18 <__assert_fail@plt+0x84b8>
   19bd0:	mov	ip, r8
   19bd4:	ldr	r8, [sp, #4]
   19bd8:	ldr	lr, [sp, #16]
   19bdc:	ldr	r3, [sp, #20]
   19be0:	cmp	r0, #0
   19be4:	mov	r9, #1
   19be8:	beq	198ec <__assert_fail@plt+0x818c>
   19bec:	b	19924 <__assert_fail@plt+0x81c4>
   19bf0:	mov	r0, r6
   19bf4:	bl	1164c <iswalnum@plt>
   19bf8:	mov	r3, #1
   19bfc:	cmp	r6, #95	; 0x5f
   19c00:	beq	19c30 <__assert_fail@plt+0x84d0>
   19c04:	ldr	r1, [sp, #16]
   19c08:	cmp	r0, #0
   19c0c:	mov	r9, #1
   19c10:	beq	19b08 <__assert_fail@plt+0x83a8>
   19c14:	b	19b24 <__assert_fail@plt+0x83c4>
   19c18:	mov	ip, r8
   19c1c:	ldr	r8, [sp, #4]
   19c20:	ldr	lr, [sp, #16]
   19c24:	ldr	r3, [sp, #20]
   19c28:	mov	r9, #1
   19c2c:	b	19924 <__assert_fail@plt+0x81c4>
   19c30:	ldr	r1, [sp, #16]
   19c34:	mov	r9, #1
   19c38:	b	19b24 <__assert_fail@plt+0x83c4>
   19c3c:	add	r1, r0, #2
   19c40:	add	r0, sp, #104	; 0x68
   19c44:	mov	r6, ip
   19c48:	bl	24a64 <__assert_fail@plt+0x13304>
   19c4c:	mov	ip, r6
   19c50:	cmp	r0, #0
   19c54:	str	r0, [fp, #-196]	; 0xffffff3c
   19c58:	beq	19628 <__assert_fail@plt+0x7ec8>
   19c5c:	b	1b63c <__assert_fail@plt+0x9edc>
   19c60:	ldr	r0, [sp, #144]	; 0x90
   19c64:	cmp	r0, #0
   19c68:	ble	19ca4 <__assert_fail@plt+0x8544>
   19c6c:	ldr	r1, [sp, #152]	; 0x98
   19c70:	sub	r3, r0, #1
   19c74:	cmp	r1, r3
   19c78:	beq	19d48 <__assert_fail@plt+0x85e8>
   19c7c:	ldr	r1, [sp, #184]	; 0xb8
   19c80:	cmp	r1, #2
   19c84:	blt	19cb8 <__assert_fail@plt+0x8558>
   19c88:	ldr	r1, [sp, #112]	; 0x70
   19c8c:	ldr	r0, [r1, r3, lsl #2]
   19c90:	cmn	r0, #1
   19c94:	bne	19ce0 <__assert_fail@plt+0x8580>
   19c98:	sub	r3, r3, #1
   19c9c:	cmn	r3, #1
   19ca0:	bne	19c8c <__assert_fail@plt+0x852c>
   19ca4:	ldr	r1, [sp, #164]	; 0xa4
   19ca8:	b	19d08 <__assert_fail@plt+0x85a8>
   19cac:	mov	r0, #0
   19cb0:	str	r0, [fp, #-196]	; 0xffffff3c
   19cb4:	b	19634 <__assert_fail@plt+0x7ed4>
   19cb8:	ldr	r1, [sp, #108]	; 0x6c
   19cbc:	ldr	lr, [sp, #172]	; 0xac
   19cc0:	ldrb	r0, [r1, r3]
   19cc4:	ubfx	r1, r0, #5, #3
   19cc8:	and	r3, r0, #31
   19ccc:	ldr	lr, [lr, r1, lsl #2]
   19cd0:	mov	r1, #1
   19cd4:	tst	lr, r1, lsl r3
   19cd8:	bne	19d08 <__assert_fail@plt+0x85a8>
   19cdc:	b	19cec <__assert_fail@plt+0x858c>
   19ce0:	ldrb	r1, [sp, #182]	; 0xb6
   19ce4:	cmp	r1, #0
   19ce8:	bne	19d50 <__assert_fail@plt+0x85f0>
   19cec:	mov	r1, #0
   19cf0:	cmp	r0, #10
   19cf4:	bne	19d08 <__assert_fail@plt+0x85a8>
   19cf8:	ldrb	r0, [sp, #181]	; 0xb5
   19cfc:	cmp	r0, #0
   19d00:	movwne	r0, #1
   19d04:	lsl	r1, r0, #1
   19d08:	bfi	r6, r1, #8, #1
   19d0c:	ldr	r6, [r2, r6, lsl #2]
   19d10:	ldr	r0, [sp, #204]	; 0xcc
   19d14:	cmp	r0, #0
   19d18:	bne	196a0 <__assert_fail@plt+0x7f40>
   19d1c:	b	196bc <__assert_fail@plt+0x7f5c>
   19d20:	ldr	ip, [sp, #8]
   19d24:	str	r0, [fp, #-48]	; 0xffffffd0
   19d28:	mov	r6, #0
   19d2c:	str	r0, [fp, #-196]	; 0xffffff3c
   19d30:	ldr	r0, [sp, #204]	; 0xcc
   19d34:	cmp	r0, #0
   19d38:	bne	196a0 <__assert_fail@plt+0x7f40>
   19d3c:	b	196bc <__assert_fail@plt+0x7f5c>
   19d40:	ldr	ip, [sp, #8]
   19d44:	b	19d28 <__assert_fail@plt+0x85c8>
   19d48:	mov	r1, #10
   19d4c:	b	19d08 <__assert_fail@plt+0x85a8>
   19d50:	str	r8, [sp, #4]
   19d54:	str	r2, [sp, #28]
   19d58:	mov	r8, ip
   19d5c:	mov	r9, r0
   19d60:	bl	1164c <iswalnum@plt>
   19d64:	mov	r1, #1
   19d68:	cmp	r9, #95	; 0x5f
   19d6c:	beq	19d94 <__assert_fail@plt+0x8634>
   19d70:	mov	ip, r8
   19d74:	ldr	r8, [sp, #4]
   19d78:	ldr	r2, [sp, #28]
   19d7c:	mov	r3, r9
   19d80:	cmp	r0, #0
   19d84:	mov	r9, #1
   19d88:	mov	r0, r3
   19d8c:	beq	19cec <__assert_fail@plt+0x858c>
   19d90:	b	19d08 <__assert_fail@plt+0x85a8>
   19d94:	mov	ip, r8
   19d98:	ldr	r8, [sp, #4]
   19d9c:	ldr	r2, [sp, #28]
   19da0:	mov	r9, #1
   19da4:	b	19d08 <__assert_fail@plt+0x85a8>
   19da8:	ldr	sl, [sp, #40]	; 0x28
   19dac:	cmp	sl, #0
   19db0:	ldrne	r0, [sl]
   19db4:	addne	r0, r0, ip
   19db8:	strne	r0, [sl]
   19dbc:	ldr	sl, [sp, #68]	; 0x44
   19dc0:	cmn	r4, #1
   19dc4:	beq	1a210 <__assert_fail@plt+0x8ab0>
   19dc8:	cmn	r4, #2
   19dcc:	beq	1b63c <__assert_fail@plt+0x9edc>
   19dd0:	ldr	sl, [sp, #64]	; 0x40
   19dd4:	str	r4, [sp, #196]	; 0xc4
   19dd8:	ldr	r1, [sp, #92]	; 0x5c
   19ddc:	ldr	r9, [sp, #96]	; 0x60
   19de0:	ldrb	r0, [sl, #28]
   19de4:	cmp	r1, #2
   19de8:	bcc	19df4 <__assert_fail@plt+0x8694>
   19dec:	ands	r1, r0, #16
   19df0:	beq	19e00 <__assert_fail@plt+0x86a0>
   19df4:	ldr	r1, [r9, #76]	; 0x4c
   19df8:	cmp	r1, #0
   19dfc:	beq	19e1c <__assert_fail@plt+0x86bc>
   19e00:	ldr	r0, [sp, #204]	; 0xcc
   19e04:	mov	r2, r4
   19e08:	ldr	r1, [r0, r4, lsl #2]
   19e0c:	add	r0, sp, #104	; 0x68
   19e10:	bl	23c5c <__assert_fail@plt+0x124fc>
   19e14:	str	r0, [sp, #200]	; 0xc8
   19e18:	ldrb	r0, [sl, #28]
   19e1c:	ldr	r1, [sp, #92]	; 0x5c
   19e20:	cmp	r1, #2
   19e24:	bcc	19e3c <__assert_fail@plt+0x86dc>
   19e28:	ands	r0, r0, #16
   19e2c:	bne	19e3c <__assert_fail@plt+0x86dc>
   19e30:	ldrb	r0, [r9, #88]	; 0x58
   19e34:	tst	r0, #1
   19e38:	bne	19e48 <__assert_fail@plt+0x86e8>
   19e3c:	ldr	r0, [r9, #76]	; 0x4c
   19e40:	cmp	r0, #0
   19e44:	beq	1a59c <__assert_fail@plt+0x8e3c>
   19e48:	ldr	r9, [sp, #196]	; 0xc4
   19e4c:	cmn	r9, #-1073741823	; 0xc0000001
   19e50:	bcs	1b63c <__assert_fail@plt+0x9edc>
   19e54:	ldr	r0, [sp, #188]	; 0xbc
   19e58:	ldr	r5, [sp, #200]	; 0xc8
   19e5c:	str	r0, [sp, #72]	; 0x48
   19e60:	mov	r0, #4
   19e64:	add	r4, r0, r9, lsl #2
   19e68:	mov	r0, r4
   19e6c:	bl	2e08c <__assert_fail@plt+0x1c92c>
   19e70:	mov	r6, r0
   19e74:	cmp	r0, #0
   19e78:	beq	1b6fc <__assert_fail@plt+0x9f9c>
   19e7c:	ldr	r0, [sp, #72]	; 0x48
   19e80:	ldr	r0, [r0, #76]	; 0x4c
   19e84:	cmp	r0, #0
   19e88:	beq	1a0ac <__assert_fail@plt+0x894c>
   19e8c:	mov	r0, r4
   19e90:	bl	2e08c <__assert_fail@plt+0x1c92c>
   19e94:	cmp	r0, #0
   19e98:	beq	1b6fc <__assert_fail@plt+0x9f9c>
   19e9c:	add	r7, r9, #1
   19ea0:	mov	r1, #0
   19ea4:	mov	r4, r0
   19ea8:	lsl	r2, r7, #2
   19eac:	bl	11670 <memset@plt>
   19eb0:	ldr	r0, [sp, #36]	; 0x24
   19eb4:	mov	r1, #0
   19eb8:	str	r9, [fp, #-180]	; 0xffffff4c
   19ebc:	str	r5, [fp, #-184]	; 0xffffff48
   19ec0:	str	r4, [fp, #-188]	; 0xffffff44
   19ec4:	str	r6, [fp, #-192]	; 0xffffff40
   19ec8:	str	r4, [sp, #28]
   19ecc:	str	r1, [r0]
   19ed0:	str	r1, [r0, #4]
   19ed4:	str	r1, [r0, #8]
   19ed8:	add	r0, sp, #104	; 0x68
   19edc:	sub	r1, fp, #192	; 0xc0
   19ee0:	bl	28c30 <__assert_fail@plt+0x174d0>
   19ee4:	mov	r8, r0
   19ee8:	mov	r0, #0
   19eec:	bl	144c0 <__assert_fail@plt+0x2d60>
   19ef0:	cmp	r8, #0
   19ef4:	bne	1a4fc <__assert_fail@plt+0x8d9c>
   19ef8:	ldr	r0, [r6]
   19efc:	sub	r4, fp, #48	; 0x30
   19f00:	cmp	r0, #0
   19f04:	beq	1a104 <__assert_fail@plt+0x89a4>
   19f08:	ldr	sl, [sp, #64]	; 0x40
   19f0c:	mov	r1, #0
   19f10:	cmp	r9, #0
   19f14:	mov	r8, #0
   19f18:	str	r5, [sp, #16]
   19f1c:	str	r6, [sp, #20]
   19f20:	str	r1, [sp, #12]
   19f24:	bmi	19fc0 <__assert_fail@plt+0x8860>
   19f28:	ldr	r1, [sp, #20]
   19f2c:	sub	r6, r7, #1
   19f30:	ldr	r7, [sp, #28]
   19f34:	add	r5, r1, #4
   19f38:	ldr	r2, [r7]
   19f3c:	cmp	r0, #0
   19f40:	bne	19f60 <__assert_fail@plt+0x8800>
   19f44:	b	19fb0 <__assert_fail@plt+0x8850>
   19f48:	ldr	r0, [r5], #4
   19f4c:	add	r7, r7, #4
   19f50:	sub	r6, r6, #1
   19f54:	ldr	r2, [r7]
   19f58:	cmp	r0, #0
   19f5c:	beq	19fb0 <__assert_fail@plt+0x8850>
   19f60:	cmp	r2, #0
   19f64:	beq	19fb4 <__assert_fail@plt+0x8854>
   19f68:	add	r1, r0, #4
   19f6c:	add	r2, r2, #4
   19f70:	mov	r0, r4
   19f74:	bl	24ea8 <__assert_fail@plt+0x13748>
   19f78:	cmp	r0, #0
   19f7c:	str	r0, [fp, #-196]	; 0xffffff3c
   19f80:	bne	1a2f4 <__assert_fail@plt+0x8b94>
   19f84:	ldr	r1, [sp, #72]	; 0x48
   19f88:	sub	r0, fp, #196	; 0xc4
   19f8c:	mov	r2, r4
   19f90:	bl	26624 <__assert_fail@plt+0x14ec4>
   19f94:	str	r0, [r5, #-4]
   19f98:	ldr	r0, [fp, #-40]	; 0xffffffd8
   19f9c:	bl	144c0 <__assert_fail@plt+0x2d60>
   19fa0:	ldr	r8, [fp, #-196]	; 0xffffff3c
   19fa4:	cmp	r8, #0
   19fa8:	beq	19fb4 <__assert_fail@plt+0x8854>
   19fac:	b	19fc0 <__assert_fail@plt+0x8860>
   19fb0:	str	r2, [r5, #-4]
   19fb4:	cmp	r6, #0
   19fb8:	bne	19f48 <__assert_fail@plt+0x87e8>
   19fbc:	mov	r8, #0
   19fc0:	ldr	r0, [sp, #28]
   19fc4:	bl	144c0 <__assert_fail@plt+0x2d60>
   19fc8:	ldr	r6, [sp, #20]
   19fcc:	ldr	r5, [sp, #16]
   19fd0:	cmp	r8, #0
   19fd4:	beq	1a574 <__assert_fail@plt+0x8e14>
   19fd8:	b	1a53c <__assert_fail@plt+0x8ddc>
   19fdc:	ldr	r0, [sp, #112]	; 0x70
   19fe0:	ldr	r0, [r0]
   19fe4:	cmn	r0, #1
   19fe8:	bne	19558 <__assert_fail@plt+0x7df8>
   19fec:	b	1a218 <__assert_fail@plt+0x8ab8>
   19ff0:	cmp	ip, #0
   19ff4:	ble	1a474 <__assert_fail@plt+0x8d14>
   19ff8:	ldr	r1, [sp, #152]	; 0x98
   19ffc:	ldr	r7, [sp, #44]	; 0x2c
   1a000:	sub	r0, ip, #1
   1a004:	cmp	r1, r0
   1a008:	beq	1a488 <__assert_fail@plt+0x8d28>
   1a00c:	ldr	r1, [sp, #184]	; 0xb8
   1a010:	cmp	r1, #2
   1a014:	blt	1a044 <__assert_fail@plt+0x88e4>
   1a018:	ldr	r1, [sp, #112]	; 0x70
   1a01c:	ldr	r5, [r1, r0, lsl #2]
   1a020:	cmn	r5, #1
   1a024:	bne	1a24c <__assert_fail@plt+0x8aec>
   1a028:	sub	r0, r0, #1
   1a02c:	cmn	r0, #1
   1a030:	bne	1a01c <__assert_fail@plt+0x88bc>
   1a034:	ldr	r3, [sp, #164]	; 0xa4
   1a038:	tst	r3, #1
   1a03c:	beq	1a278 <__assert_fail@plt+0x8b18>
   1a040:	b	1a49c <__assert_fail@plt+0x8d3c>
   1a044:	ldr	r1, [sp, #108]	; 0x6c
   1a048:	ldr	r2, [sp, #172]	; 0xac
   1a04c:	ldrb	r0, [r1, r0]
   1a050:	ubfx	r1, r0, #5, #3
   1a054:	ldr	r1, [r2, r1, lsl #2]
   1a058:	and	r2, r0, #31
   1a05c:	tst	r1, r9, lsl r2
   1a060:	bne	1a49c <__assert_fail@plt+0x8d3c>
   1a064:	cmp	r0, #10
   1a068:	beq	1a260 <__assert_fail@plt+0x8b00>
   1a06c:	b	1a4a0 <__assert_fail@plt+0x8d40>
   1a070:	ldr	r1, [sp, #76]	; 0x4c
   1a074:	mov	r0, #0
   1a078:	cmp	r6, r1
   1a07c:	bge	1a088 <__assert_fail@plt+0x8928>
   1a080:	ldr	r0, [sp, #100]	; 0x64
   1a084:	ldrb	r0, [r0, r6]
   1a088:	ldrb	r0, [r5, r0]
   1a08c:	cmp	r0, #0
   1a090:	bne	1952c <__assert_fail@plt+0x7dcc>
   1a094:	sub	r0, r6, #1
   1a098:	cmp	r6, r4
   1a09c:	mov	r6, r0
   1a0a0:	str	r0, [fp, #-200]	; 0xffffff38
   1a0a4:	bgt	1a074 <__assert_fail@plt+0x8914>
   1a0a8:	b	1b5d4 <__assert_fail@plt+0x9e74>
   1a0ac:	ldr	r0, [sp, #36]	; 0x24
   1a0b0:	mov	r1, #0
   1a0b4:	str	r9, [fp, #-180]	; 0xffffff4c
   1a0b8:	str	r5, [fp, #-184]	; 0xffffff48
   1a0bc:	str	r1, [fp, #-188]	; 0xffffff44
   1a0c0:	str	r6, [fp, #-192]	; 0xffffff40
   1a0c4:	str	r1, [r0]
   1a0c8:	str	r1, [r0, #4]
   1a0cc:	str	r1, [r0, #8]
   1a0d0:	add	r0, sp, #104	; 0x68
   1a0d4:	sub	r1, fp, #192	; 0xc0
   1a0d8:	bl	28c30 <__assert_fail@plt+0x174d0>
   1a0dc:	mov	r8, r0
   1a0e0:	mov	r0, #0
   1a0e4:	bl	144c0 <__assert_fail@plt+0x2d60>
   1a0e8:	cmp	r8, #0
   1a0ec:	bne	1a504 <__assert_fail@plt+0x8da4>
   1a0f0:	ldr	r0, [r6]
   1a0f4:	mov	r8, #0
   1a0f8:	cmp	r0, #0
   1a0fc:	beq	1a1f8 <__assert_fail@plt+0x8a98>
   1a100:	b	1a574 <__assert_fail@plt+0x8e14>
   1a104:	ldr	r8, [sp, #28]
   1a108:	ldr	r1, [r8]
   1a10c:	cmp	r1, #0
   1a110:	bne	1a2ec <__assert_fail@plt+0x8b8c>
   1a114:	cmp	r9, #1
   1a118:	blt	1a1f8 <__assert_fail@plt+0x8a98>
   1a11c:	ldr	r0, [sp, #204]	; 0xcc
   1a120:	lsl	r4, r9, #2
   1a124:	add	sl, r9, #1
   1a128:	sub	r0, r0, #4
   1a12c:	ldr	r1, [r0, r4]
   1a130:	cmp	r1, #0
   1a134:	bne	1a154 <__assert_fail@plt+0x89f4>
   1a138:	sub	sl, sl, #1
   1a13c:	sub	r4, r4, #4
   1a140:	cmp	sl, #2
   1a144:	blt	1a1f8 <__assert_fail@plt+0x8a98>
   1a148:	ldr	r1, [r0, r4]
   1a14c:	cmp	r1, #0
   1a150:	beq	1a138 <__assert_fail@plt+0x89d8>
   1a154:	ldrb	r2, [r1, #52]	; 0x34
   1a158:	tst	r2, #16
   1a15c:	beq	1a138 <__assert_fail@plt+0x89d8>
   1a160:	sub	r9, sl, #2
   1a164:	add	r5, sp, #104	; 0x68
   1a168:	mov	r0, r5
   1a16c:	mov	r2, r9
   1a170:	bl	23c5c <__assert_fail@plt+0x124fc>
   1a174:	mov	r5, r0
   1a178:	mov	r0, r8
   1a17c:	mov	r1, #0
   1a180:	mov	r2, r4
   1a184:	bl	11670 <memset@plt>
   1a188:	ldr	r0, [sp, #36]	; 0x24
   1a18c:	mov	r1, #0
   1a190:	str	r9, [fp, #-180]	; 0xffffff4c
   1a194:	str	r5, [fp, #-184]	; 0xffffff48
   1a198:	str	r8, [fp, #-188]	; 0xffffff44
   1a19c:	str	r6, [fp, #-192]	; 0xffffff40
   1a1a0:	mov	r7, r5
   1a1a4:	str	r1, [r0]
   1a1a8:	str	r1, [r0, #4]
   1a1ac:	str	r1, [r0, #8]
   1a1b0:	add	r0, sp, #104	; 0x68
   1a1b4:	sub	r1, fp, #192	; 0xc0
   1a1b8:	bl	28c30 <__assert_fail@plt+0x174d0>
   1a1bc:	mov	r8, r0
   1a1c0:	mov	r0, #0
   1a1c4:	bl	144c0 <__assert_fail@plt+0x2d60>
   1a1c8:	cmp	r8, #0
   1a1cc:	bne	1a530 <__assert_fail@plt+0x8dd0>
   1a1d0:	ldr	r0, [r6]
   1a1d4:	sub	r1, sl, #1
   1a1d8:	mov	r5, r7
   1a1dc:	sub	r4, fp, #48	; 0x30
   1a1e0:	mov	r7, r1
   1a1e4:	cmp	r0, #0
   1a1e8:	beq	1a104 <__assert_fail@plt+0x89a4>
   1a1ec:	sub	r9, sl, #2
   1a1f0:	sub	r7, sl, #1
   1a1f4:	b	19f08 <__assert_fail@plt+0x87a8>
   1a1f8:	mov	r0, r6
   1a1fc:	bl	144c0 <__assert_fail@plt+0x2d60>
   1a200:	mov	r0, r8
   1a204:	bl	144c0 <__assert_fail@plt+0x2d60>
   1a208:	ldr	sl, [sp, #68]	; 0x44
   1a20c:	mov	r9, #1
   1a210:	add	r0, sp, #104	; 0x68
   1a214:	bl	23e04 <__assert_fail@plt+0x126a4>
   1a218:	ldr	r0, [fp, #-200]	; 0xffffff38
   1a21c:	ldr	r4, [sp, #48]	; 0x30
   1a220:	ldr	r7, [sp, #52]	; 0x34
   1a224:	mov	r8, #1
   1a228:	add	r6, r0, sl
   1a22c:	cmp	r6, r4
   1a230:	str	r6, [fp, #-200]	; 0xffffff38
   1a234:	blt	1b5d4 <__assert_fail@plt+0x9e74>
   1a238:	ldr	r5, [sp, #88]	; 0x58
   1a23c:	ldr	ip, [sp, #84]	; 0x54
   1a240:	cmp	r7, r6
   1a244:	bge	193ac <__assert_fail@plt+0x7c4c>
   1a248:	b	1b5d4 <__assert_fail@plt+0x9e74>
   1a24c:	ldrb	r0, [sp, #182]	; 0xb6
   1a250:	cmp	r0, #0
   1a254:	bne	1a50c <__assert_fail@plt+0x8dac>
   1a258:	cmp	r5, #10
   1a25c:	bne	1a4a0 <__assert_fail@plt+0x8d40>
   1a260:	ldrb	r0, [sp, #181]	; 0xb5
   1a264:	cmp	r0, #0
   1a268:	movwne	r0, #1
   1a26c:	lsl	r3, r0, #1
   1a270:	tst	r3, #1
   1a274:	bne	1a49c <__assert_fail@plt+0x8d3c>
   1a278:	cmp	r3, #0
   1a27c:	beq	1a4a0 <__assert_fail@plt+0x8d40>
   1a280:	ands	r1, r3, #2
   1a284:	and	r0, r3, #4
   1a288:	cmpne	r0, #0
   1a28c:	bne	1a2cc <__assert_fail@plt+0x8b6c>
   1a290:	cmp	r1, #0
   1a294:	bne	1a2dc <__assert_fail@plt+0x8b7c>
   1a298:	ldr	r6, [r4, #36]	; 0x24
   1a29c:	cmp	r0, #0
   1a2a0:	beq	1a4a0 <__assert_fail@plt+0x8d40>
   1a2a4:	ldr	r2, [r6, #40]	; 0x28
   1a2a8:	sub	r0, fp, #196	; 0xc4
   1a2ac:	mov	r1, r4
   1a2b0:	mov	r5, ip
   1a2b4:	bl	22658 <__assert_fail@plt+0x10ef8>
   1a2b8:	mov	ip, r5
   1a2bc:	mov	r6, r0
   1a2c0:	cmp	r6, #0
   1a2c4:	bne	19590 <__assert_fail@plt+0x7e30>
   1a2c8:	b	1b63c <__assert_fail@plt+0x9edc>
   1a2cc:	ldr	r6, [r4, #48]	; 0x30
   1a2d0:	cmp	r6, #0
   1a2d4:	bne	19590 <__assert_fail@plt+0x7e30>
   1a2d8:	b	1b63c <__assert_fail@plt+0x9edc>
   1a2dc:	ldr	r6, [r4, #44]	; 0x2c
   1a2e0:	cmp	r6, #0
   1a2e4:	bne	19590 <__assert_fail@plt+0x7e30>
   1a2e8:	b	1b63c <__assert_fail@plt+0x9edc>
   1a2ec:	mov	r2, r7
   1a2f0:	b	19f08 <__assert_fail@plt+0x87a8>
   1a2f4:	mov	r8, r0
   1a2f8:	b	19fc0 <__assert_fail@plt+0x8860>
   1a2fc:	sxtb	r0, r0
   1a300:	cmn	r0, #1
   1a304:	ble	1a4ac <__assert_fail@plt+0x8d4c>
   1a308:	mov	r0, #1
   1a30c:	mov	r4, ip
   1a310:	str	r0, [sp, #72]	; 0x48
   1a314:	ldr	r0, [sp, #56]	; 0x38
   1a318:	cmp	r0, #0
   1a31c:	bne	195cc <__assert_fail@plt+0x7e6c>
   1a320:	b	1a4ec <__assert_fail@plt+0x8d8c>
   1a324:	ldr	r0, [r6, #8]
   1a328:	cmp	r0, #1
   1a32c:	blt	1a400 <__assert_fail@plt+0x8ca0>
   1a330:	ldr	r4, [sp, #188]	; 0xbc
   1a334:	mov	r5, #0
   1a338:	str	ip, [sp, #8]
   1a33c:	b	1a36c <__assert_fail@plt+0x8c0c>
   1a340:	add	r1, r1, #1
   1a344:	str	r7, [r0, #4]
   1a348:	ldr	ip, [sp, #8]
   1a34c:	mov	r9, #1
   1a350:	str	r1, [sp, #228]	; 0xe4
   1a354:	mov	r1, #0
   1a358:	str	r1, [r0]
   1a35c:	ldr	r0, [r6, #8]
   1a360:	add	r5, r5, #1
   1a364:	cmp	r5, r0
   1a368:	bge	1a400 <__assert_fail@plt+0x8ca0>
   1a36c:	ldr	r1, [r6, #12]
   1a370:	ldr	r7, [r1, r5, lsl #2]
   1a374:	ldr	r1, [r4]
   1a378:	add	r2, r1, r7, lsl #3
   1a37c:	ldrb	r2, [r2, #4]
   1a380:	cmp	r2, #8
   1a384:	bne	1a360 <__assert_fail@plt+0x8c00>
   1a388:	ldr	r1, [r1, r7, lsl #3]
   1a38c:	cmp	r1, #31
   1a390:	bgt	1a360 <__assert_fail@plt+0x8c00>
   1a394:	ldr	r2, [r4, #80]	; 0x50
   1a398:	tst	r2, r9, lsl r1
   1a39c:	beq	1a360 <__assert_fail@plt+0x8c00>
   1a3a0:	ldr	r0, [sp, #228]	; 0xe4
   1a3a4:	ldr	r9, [sp, #232]	; 0xe8
   1a3a8:	cmp	r0, r9
   1a3ac:	beq	1a3dc <__assert_fail@plt+0x8c7c>
   1a3b0:	mov	r0, #1
   1a3b4:	mov	r1, #24
   1a3b8:	bl	2e038 <__assert_fail@plt+0x1c8d8>
   1a3bc:	ldr	r1, [sp, #228]	; 0xe4
   1a3c0:	ldr	r2, [sp, #236]	; 0xec
   1a3c4:	str	r0, [r2, r1, lsl #2]
   1a3c8:	ldr	r0, [sp, #236]	; 0xec
   1a3cc:	ldr	r0, [r0, r1, lsl #2]
   1a3d0:	cmp	r0, #0
   1a3d4:	bne	1a340 <__assert_fail@plt+0x8be0>
   1a3d8:	b	1a56c <__assert_fail@plt+0x8e0c>
   1a3dc:	ldr	r0, [sp, #236]	; 0xec
   1a3e0:	lsl	r1, r9, #3
   1a3e4:	bl	2e0bc <__assert_fail@plt+0x1c95c>
   1a3e8:	cmp	r0, #0
   1a3ec:	beq	1a56c <__assert_fail@plt+0x8e0c>
   1a3f0:	str	r0, [sp, #236]	; 0xec
   1a3f4:	lsl	r0, r9, #1
   1a3f8:	str	r0, [sp, #232]	; 0xe8
   1a3fc:	b	1a3b0 <__assert_fail@plt+0x8c50>
   1a400:	mov	r8, #0
   1a404:	str	r8, [fp, #-196]	; 0xffffff3c
   1a408:	ldrb	r0, [r6, #52]	; 0x34
   1a40c:	tst	r0, #64	; 0x40
   1a410:	beq	195b4 <__assert_fail@plt+0x7e54>
   1a414:	add	r1, r6, #4
   1a418:	add	r0, sp, #104	; 0x68
   1a41c:	mov	r4, ip
   1a420:	bl	24090 <__assert_fail@plt+0x12930>
   1a424:	mov	ip, r4
   1a428:	cmp	r0, #0
   1a42c:	str	r0, [fp, #-196]	; 0xffffff3c
   1a430:	beq	195b4 <__assert_fail@plt+0x7e54>
   1a434:	mov	r4, r0
   1a438:	cmn	r4, #1
   1a43c:	bne	19dc8 <__assert_fail@plt+0x8668>
   1a440:	b	1a210 <__assert_fail@plt+0x8ab0>
   1a444:	ldr	r1, [sp, #76]	; 0x4c
   1a448:	mov	r0, #0
   1a44c:	mov	r6, r7
   1a450:	cmp	r7, r1
   1a454:	ldr	r1, [sp, #100]	; 0x64
   1a458:	ldrblt	r0, [r1, r7]
   1a45c:	cmp	ip, #0
   1a460:	ldrbne	r0, [ip, r0]
   1a464:	ldrb	r0, [r5, r0]
   1a468:	cmp	r0, #0
   1a46c:	bne	1952c <__assert_fail@plt+0x7dcc>
   1a470:	b	1b83c <__assert_fail@plt+0xa0dc>
   1a474:	ldr	r3, [sp, #164]	; 0xa4
   1a478:	ldr	r7, [sp, #44]	; 0x2c
   1a47c:	tst	r3, #1
   1a480:	beq	1a278 <__assert_fail@plt+0x8b18>
   1a484:	b	1a49c <__assert_fail@plt+0x8d3c>
   1a488:	ldr	r0, [sp, #192]	; 0xc0
   1a48c:	and	r0, r0, #2
   1a490:	eor	r3, r0, #10
   1a494:	tst	r3, #1
   1a498:	beq	1a278 <__assert_fail@plt+0x8b18>
   1a49c:	ldr	r6, [r4, #40]	; 0x28
   1a4a0:	cmp	r6, #0
   1a4a4:	bne	19590 <__assert_fail@plt+0x7e30>
   1a4a8:	b	1b63c <__assert_fail@plt+0x9edc>
   1a4ac:	add	r0, sp, #104	; 0x68
   1a4b0:	mov	r1, r6
   1a4b4:	mov	r2, ip
   1a4b8:	mov	r4, ip
   1a4bc:	bl	23c5c <__assert_fail@plt+0x124fc>
   1a4c0:	clz	r1, r0
   1a4c4:	cmp	r0, #0
   1a4c8:	mov	ip, r4
   1a4cc:	lsr	r2, r1, #5
   1a4d0:	ldr	r1, [sp, #56]	; 0x38
   1a4d4:	movwne	r0, #1
   1a4d8:	mvneq	r4, #0
   1a4dc:	str	r0, [sp, #72]	; 0x48
   1a4e0:	orr	r1, r1, r2
   1a4e4:	cmp	r1, #0
   1a4e8:	bne	195cc <__assert_fail@plt+0x7e6c>
   1a4ec:	mov	r4, ip
   1a4f0:	cmn	r4, #1
   1a4f4:	bne	19dc8 <__assert_fail@plt+0x8668>
   1a4f8:	b	1a210 <__assert_fail@plt+0x8ab0>
   1a4fc:	ldr	r0, [sp, #28]
   1a500:	b	1a538 <__assert_fail@plt+0x8dd8>
   1a504:	mov	r0, #0
   1a508:	b	1a538 <__assert_fail@plt+0x8dd8>
   1a50c:	mov	r0, r5
   1a510:	mov	r8, ip
   1a514:	bl	1164c <iswalnum@plt>
   1a518:	mov	ip, r8
   1a51c:	cmp	r5, #95	; 0x5f
   1a520:	beq	1a49c <__assert_fail@plt+0x8d3c>
   1a524:	cmp	r0, #0
   1a528:	beq	1a258 <__assert_fail@plt+0x8af8>
   1a52c:	b	1a49c <__assert_fail@plt+0x8d3c>
   1a530:	ldr	r0, [sp, #28]
   1a534:	ldr	sl, [sp, #64]	; 0x40
   1a538:	str	r0, [sp, #12]
   1a53c:	mov	r0, r6
   1a540:	bl	144c0 <__assert_fail@plt+0x2d60>
   1a544:	ldr	r0, [sp, #12]
   1a548:	bl	144c0 <__assert_fail@plt+0x2d60>
   1a54c:	ldr	r9, [sp, #96]	; 0x60
   1a550:	cmp	r8, #0
   1a554:	beq	1a59c <__assert_fail@plt+0x8e3c>
   1a558:	ldr	sl, [sp, #68]	; 0x44
   1a55c:	cmp	r8, #1
   1a560:	mov	r9, #1
   1a564:	beq	1a210 <__assert_fail@plt+0x8ab0>
   1a568:	b	1b5d4 <__assert_fail@plt+0x9e74>
   1a56c:	mov	r4, #12
   1a570:	b	19dd0 <__assert_fail@plt+0x8670>
   1a574:	ldr	r0, [sp, #204]	; 0xcc
   1a578:	bl	144c0 <__assert_fail@plt+0x2d60>
   1a57c:	mov	r0, #0
   1a580:	str	r5, [sp, #200]	; 0xc8
   1a584:	str	r6, [sp, #204]	; 0xcc
   1a588:	str	r9, [sp, #196]	; 0xc4
   1a58c:	bl	144c0 <__assert_fail@plt+0x2d60>
   1a590:	mov	r0, #0
   1a594:	bl	144c0 <__assert_fail@plt+0x2d60>
   1a598:	ldr	r9, [sp, #96]	; 0x60
   1a59c:	ldr	r0, [sp, #92]	; 0x5c
   1a5a0:	cmp	r0, #0
   1a5a4:	beq	1b5d0 <__assert_fail@plt+0x9e70>
   1a5a8:	ldr	r0, [sp, #92]	; 0x5c
   1a5ac:	ldr	r1, [fp, #16]
   1a5b0:	ldr	r8, [fp, #20]
   1a5b4:	cmp	r0, #1
   1a5b8:	beq	1a5d8 <__assert_fail@plt+0x8e78>
   1a5bc:	ldr	r0, [sp, #32]
   1a5c0:	mvn	r0, r0
   1a5c4:	add	r0, r0, r1
   1a5c8:	mov	r1, #255	; 0xff
   1a5cc:	lsl	r2, r0, #3
   1a5d0:	add	r0, r8, #8
   1a5d4:	bl	11670 <memset@plt>
   1a5d8:	mov	r0, #0
   1a5dc:	ldr	r1, [sp, #196]	; 0xc4
   1a5e0:	stm	r8, {r0, r1}
   1a5e4:	ldr	r0, [sp, #92]	; 0x5c
   1a5e8:	cmp	r0, #2
   1a5ec:	bcc	1b4d0 <__assert_fail@plt+0x9d70>
   1a5f0:	ldrb	r0, [sl, #28]
   1a5f4:	ands	r0, r0, #16
   1a5f8:	bne	1b4d0 <__assert_fail@plt+0x9d70>
   1a5fc:	ldrb	r1, [r9, #88]	; 0x58
   1a600:	sub	r5, fp, #48	; 0x30
   1a604:	mov	r0, #0
   1a608:	tst	r1, #1
   1a60c:	mov	r1, #0
   1a610:	beq	1a624 <__assert_fail@plt+0x8ec4>
   1a614:	ldr	r2, [r9, #76]	; 0x4c
   1a618:	mov	r1, #0
   1a61c:	cmp	r2, #0
   1a620:	movwgt	r1, #1
   1a624:	movw	r2, #63400	; 0xf7a8
   1a628:	ldr	r7, [sl]
   1a62c:	cmp	r1, #0
   1a630:	mov	r6, #0
   1a634:	movt	r2, #2
   1a638:	vldr	d16, [r2]
   1a63c:	ldr	r2, [r2, #8]
   1a640:	str	r2, [fp, #-40]	; 0xffffffd8
   1a644:	sub	r2, fp, #192	; 0xc0
   1a648:	add	r4, r2, #12
   1a64c:	mov	r2, #16
   1a650:	vstr	d16, [fp, #-48]	; 0xffffffd0
   1a654:	str	r4, [fp, #-184]	; 0xffffff48
   1a658:	str	r2, [fp, #-188]	; 0xffffff44
   1a65c:	str	r0, [fp, #-192]	; 0xffffff40
   1a660:	beq	1a680 <__assert_fail@plt+0x8f20>
   1a664:	mov	r0, #48	; 0x30
   1a668:	bl	2e08c <__assert_fail@plt+0x1c92c>
   1a66c:	cmp	r0, #0
   1a670:	str	r0, [fp, #-40]	; 0xffffffd8
   1a674:	beq	1b63c <__assert_fail@plt+0x9edc>
   1a678:	ldr	r0, [fp, #-192]	; 0xffffff40
   1a67c:	mov	r6, r5
   1a680:	ldr	r5, [sp, #92]	; 0x5c
   1a684:	ldr	sl, [r7, #72]	; 0x48
   1a688:	str	r4, [sp, #88]	; 0x58
   1a68c:	cmp	r0, r5
   1a690:	bcs	1a778 <__assert_fail@plt+0x9018>
   1a694:	sub	r0, fp, #192	; 0xc0
   1a698:	mov	r1, r5
   1a69c:	mov	r2, r4
   1a6a0:	mov	r3, #8
   1a6a4:	bl	2e194 <__assert_fail@plt+0x1ca34>
   1a6a8:	cmp	r0, #0
   1a6ac:	bne	1a77c <__assert_fail@plt+0x901c>
   1a6b0:	ldr	r1, [sp, #88]	; 0x58
   1a6b4:	ldr	r0, [fp, #-184]	; 0xffffff48
   1a6b8:	mov	r4, r6
   1a6bc:	mov	r5, r1
   1a6c0:	cmp	r0, r1
   1a6c4:	beq	1a6cc <__assert_fail@plt+0x8f6c>
   1a6c8:	bl	144c0 <__assert_fail@plt+0x2d60>
   1a6cc:	mov	r0, #16
   1a6d0:	str	r5, [fp, #-184]	; 0xffffff48
   1a6d4:	mov	r8, #12
   1a6d8:	cmp	r4, #0
   1a6dc:	str	r0, [fp, #-188]	; 0xffffff44
   1a6e0:	mov	r0, #0
   1a6e4:	str	r0, [fp, #-192]	; 0xffffff40
   1a6e8:	beq	1b5d4 <__assert_fail@plt+0x9e74>
   1a6ec:	ldr	r1, [r4]
   1a6f0:	mov	r0, r4
   1a6f4:	ldr	r0, [r4, #8]
   1a6f8:	cmp	r1, #1
   1a6fc:	blt	1b6cc <__assert_fail@plt+0x9f6c>
   1a700:	mov	r5, #0
   1a704:	mov	r6, #0
   1a708:	add	r0, r0, r5
   1a70c:	ldr	r0, [r0, #20]
   1a710:	bl	144c0 <__assert_fail@plt+0x2d60>
   1a714:	ldr	r0, [r4, #8]
   1a718:	add	r0, r0, r5
   1a71c:	ldr	r0, [r0, #8]
   1a720:	bl	144c0 <__assert_fail@plt+0x2d60>
   1a724:	ldr	r1, [r4]
   1a728:	ldr	r0, [r4, #8]
   1a72c:	add	r6, r6, #1
   1a730:	add	r5, r5, #24
   1a734:	cmp	r6, r1
   1a738:	blt	1a708 <__assert_fail@plt+0x8fa8>
   1a73c:	b	1b6cc <__assert_fail@plt+0x9f6c>
   1a740:	ldr	r1, [r3, #8]
   1a744:	cmp	r1, #0
   1a748:	beq	1a758 <__assert_fail@plt+0x8ff8>
   1a74c:	ldrsb	r1, [r4, #28]
   1a750:	cmp	r1, #0
   1a754:	bmi	1908c <__assert_fail@plt+0x792c>
   1a758:	mov	r1, #0
   1a75c:	cmp	r6, #0
   1a760:	str	r1, [sp, #80]	; 0x50
   1a764:	beq	1b634 <__assert_fail@plt+0x9ed4>
   1a768:	cmp	sl, #0
   1a76c:	mov	r6, #0
   1a770:	bne	1b628 <__assert_fail@plt+0x9ec8>
   1a774:	b	19090 <__assert_fail@plt+0x7930>
   1a778:	str	r5, [fp, #-192]	; 0xffffff40
   1a77c:	ldr	r0, [fp, #-184]	; 0xffffff48
   1a780:	lsl	r2, r5, #3
   1a784:	mov	r1, r8
   1a788:	str	r2, [sp, #76]	; 0x4c
   1a78c:	str	r0, [sp, #84]	; 0x54
   1a790:	bl	11484 <memcpy@plt>
   1a794:	ldr	r4, [r8]
   1a798:	ldr	r0, [r8, #4]
   1a79c:	mov	ip, #0
   1a7a0:	cmp	r4, r0
   1a7a4:	ble	1a830 <__assert_fail@plt+0x90d0>
   1a7a8:	mov	r0, ip
   1a7ac:	bl	144c0 <__assert_fail@plt+0x2d60>
   1a7b0:	ldr	r0, [fp, #-184]	; 0xffffff48
   1a7b4:	ldr	r4, [sp, #88]	; 0x58
   1a7b8:	cmp	r0, r4
   1a7bc:	beq	1a7c4 <__assert_fail@plt+0x9064>
   1a7c0:	bl	144c0 <__assert_fail@plt+0x2d60>
   1a7c4:	mov	r0, #16
   1a7c8:	str	r4, [fp, #-184]	; 0xffffff48
   1a7cc:	cmp	r6, #0
   1a7d0:	str	r0, [fp, #-188]	; 0xffffff44
   1a7d4:	mov	r0, #0
   1a7d8:	str	r0, [fp, #-192]	; 0xffffff40
   1a7dc:	beq	1b4d0 <__assert_fail@plt+0x9d70>
   1a7e0:	ldr	r1, [r6]
   1a7e4:	ldr	r0, [r6, #8]
   1a7e8:	cmp	r1, #1
   1a7ec:	blt	1b4c8 <__assert_fail@plt+0x9d68>
   1a7f0:	mov	r4, #0
   1a7f4:	mov	r5, #0
   1a7f8:	add	r0, r0, r4
   1a7fc:	ldr	r0, [r0, #20]
   1a800:	bl	144c0 <__assert_fail@plt+0x2d60>
   1a804:	ldr	r0, [r6, #8]
   1a808:	add	r0, r0, r4
   1a80c:	ldr	r0, [r0, #8]
   1a810:	bl	144c0 <__assert_fail@plt+0x2d60>
   1a814:	ldr	r1, [r6]
   1a818:	ldr	r0, [r6, #8]
   1a81c:	add	r5, r5, #1
   1a820:	add	r4, r4, #24
   1a824:	cmp	r5, r1
   1a828:	blt	1a7f8 <__assert_fail@plt+0x9098>
   1a82c:	b	1b4c8 <__assert_fail@plt+0x9d68>
   1a830:	add	r0, r8, #4
   1a834:	mov	lr, #1
   1a838:	mov	r5, #0
   1a83c:	mov	ip, #0
   1a840:	mov	r3, #0
   1a844:	str	r7, [sp, #60]	; 0x3c
   1a848:	str	r6, [sp, #68]	; 0x44
   1a84c:	str	r0, [sp, #64]	; 0x40
   1a850:	ldr	r0, [sp, #92]	; 0x5c
   1a854:	lsl	r0, r0, #4
   1a858:	str	r0, [sp, #44]	; 0x2c
   1a85c:	mov	r0, #0
   1a860:	str	r0, [sp, #72]	; 0x48
   1a864:	ldr	r0, [r7]
   1a868:	add	r1, r0, sl, lsl #3
   1a86c:	ldr	r1, [r1, #4]
   1a870:	uxtb	r2, r1
   1a874:	cmp	r2, #9
   1a878:	beq	1a8ac <__assert_fail@plt+0x914c>
   1a87c:	cmp	r2, #8
   1a880:	bne	1a928 <__assert_fail@plt+0x91c8>
   1a884:	ldr	r0, [r0, sl, lsl #3]
   1a888:	ldr	r1, [sp, #92]	; 0x5c
   1a88c:	add	r0, r0, #1
   1a890:	cmp	r0, r1
   1a894:	bge	1a928 <__assert_fail@plt+0x91c8>
   1a898:	mov	r1, r8
   1a89c:	str	r4, [r1, r0, lsl #3]!
   1a8a0:	mvn	r0, #0
   1a8a4:	str	r0, [r1, #4]
   1a8a8:	b	1a928 <__assert_fail@plt+0x91c8>
   1a8ac:	ldr	r0, [r0, sl, lsl #3]
   1a8b0:	ldr	r2, [sp, #92]	; 0x5c
   1a8b4:	add	r0, r0, #1
   1a8b8:	cmp	r0, r2
   1a8bc:	bge	1a928 <__assert_fail@plt+0x91c8>
   1a8c0:	ldr	r2, [r8, r0, lsl #3]
   1a8c4:	cmp	r2, r4
   1a8c8:	bge	1a8e0 <__assert_fail@plt+0x9180>
   1a8cc:	add	r0, r8, r0, lsl #3
   1a8d0:	mov	r1, r8
   1a8d4:	str	r4, [r0, #4]
   1a8d8:	ldr	r0, [sp, #84]	; 0x54
   1a8dc:	b	1a900 <__assert_fail@plt+0x91a0>
   1a8e0:	tst	r1, #524288	; 0x80000
   1a8e4:	beq	1a920 <__assert_fail@plt+0x91c0>
   1a8e8:	ldr	r1, [sp, #84]	; 0x54
   1a8ec:	ldr	r1, [r1, r0, lsl #3]
   1a8f0:	cmn	r1, #1
   1a8f4:	beq	1a920 <__assert_fail@plt+0x91c0>
   1a8f8:	ldr	r1, [sp, #84]	; 0x54
   1a8fc:	mov	r0, r8
   1a900:	ldr	r2, [sp, #76]	; 0x4c
   1a904:	mov	r7, ip
   1a908:	str	r3, [sp, #48]	; 0x30
   1a90c:	bl	11484 <memcpy@plt>
   1a910:	ldr	r3, [sp, #48]	; 0x30
   1a914:	mov	ip, r7
   1a918:	mov	lr, #1
   1a91c:	b	1a928 <__assert_fail@plt+0x91c8>
   1a920:	add	r0, r8, r0, lsl #3
   1a924:	str	r4, [r0, #4]
   1a928:	ldr	r0, [r8, #4]
   1a92c:	cmp	r4, r0
   1a930:	ldreq	r0, [sp, #200]	; 0xc8
   1a934:	cmpeq	sl, r0
   1a938:	beq	1a994 <__assert_fail@plt+0x9234>
   1a93c:	cmp	r6, #0
   1a940:	beq	1aa6c <__assert_fail@plt+0x930c>
   1a944:	cmp	r3, #1
   1a948:	blt	1aa6c <__assert_fail@plt+0x930c>
   1a94c:	str	ip, [sp, #52]	; 0x34
   1a950:	mov	ip, r3
   1a954:	mov	r0, #0
   1a958:	subs	r1, r3, #1
   1a95c:	beq	1a980 <__assert_fail@plt+0x9220>
   1a960:	add	r2, r0, r1
   1a964:	lsr	r3, r2, #1
   1a968:	ldr	r7, [r5, r3, lsl #2]
   1a96c:	cmp	r7, sl
   1a970:	addlt	r0, lr, r2, lsr #1
   1a974:	movge	r1, r3
   1a978:	cmp	r0, r1
   1a97c:	bcc	1a960 <__assert_fail@plt+0x9200>
   1a980:	ldr	r0, [r5, r0, lsl #2]
   1a984:	mov	r3, ip
   1a988:	ldr	ip, [sp, #52]	; 0x34
   1a98c:	cmp	r0, sl
   1a990:	bne	1aa6c <__assert_fail@plt+0x930c>
   1a994:	ldr	r4, [sp, #88]	; 0x58
   1a998:	cmp	r6, #0
   1a99c:	beq	1b448 <__assert_fail@plt+0x9ce8>
   1a9a0:	ldr	r0, [sp, #92]	; 0x5c
   1a9a4:	ldr	r1, [sp, #64]	; 0x40
   1a9a8:	ldr	r2, [r1, #-4]
   1a9ac:	cmp	r2, #0
   1a9b0:	bpl	1a9cc <__assert_fail@plt+0x926c>
   1a9b4:	subs	r0, r0, #1
   1a9b8:	add	r1, r1, #8
   1a9bc:	beq	1b448 <__assert_fail@plt+0x9ce8>
   1a9c0:	ldr	r2, [r1, #-4]
   1a9c4:	cmp	r2, #0
   1a9c8:	bmi	1a9b4 <__assert_fail@plt+0x9254>
   1a9cc:	ldr	r2, [r1]
   1a9d0:	cmn	r2, #1
   1a9d4:	bne	1a9b4 <__assert_fail@plt+0x9254>
   1a9d8:	ldr	r0, [r6]
   1a9dc:	cmp	r0, #0
   1a9e0:	beq	1b448 <__assert_fail@plt+0x9ce8>
   1a9e4:	sub	r1, r0, #1
   1a9e8:	ldr	r7, [sp, #76]	; 0x4c
   1a9ec:	mov	r0, r8
   1a9f0:	mov	r8, ip
   1a9f4:	str	r1, [r6]
   1a9f8:	add	sl, r1, r1, lsl #1
   1a9fc:	ldr	r4, [r6, #8]
   1aa00:	mov	r2, r7
   1aa04:	ldr	r1, [r4, sl, lsl #3]!
   1aa08:	str	r1, [sp, #100]	; 0x64
   1aa0c:	ldr	r1, [r4, #8]
   1aa10:	bl	11484 <memcpy@plt>
   1aa14:	ldr	r0, [r4, #8]
   1aa18:	ldr	r1, [sp, #92]	; 0x5c
   1aa1c:	mov	r2, r7
   1aa20:	add	r1, r0, r1, lsl #3
   1aa24:	ldr	r0, [sp, #84]	; 0x54
   1aa28:	bl	11484 <memcpy@plt>
   1aa2c:	mov	r0, r8
   1aa30:	bl	144c0 <__assert_fail@plt+0x2d60>
   1aa34:	ldr	r0, [r6, #8]
   1aa38:	add	r0, r0, sl, lsl #3
   1aa3c:	ldr	r0, [r0, #8]
   1aa40:	bl	144c0 <__assert_fail@plt+0x2d60>
   1aa44:	ldr	r0, [r6, #8]
   1aa48:	mov	lr, #1
   1aa4c:	add	r0, r0, sl, lsl #3
   1aa50:	ldr	ip, [r0, #20]
   1aa54:	ldr	r1, [r0, #12]
   1aa58:	ldr	sl, [r0, #4]
   1aa5c:	ldr	r3, [r0, #16]
   1aa60:	mov	r5, ip
   1aa64:	str	r1, [sp, #72]	; 0x48
   1aa68:	b	1aa70 <__assert_fail@plt+0x9310>
   1aa6c:	str	r4, [sp, #100]	; 0x64
   1aa70:	ldr	r4, [sp, #188]	; 0xbc
   1aa74:	ldr	r0, [r4]
   1aa78:	add	r1, r0, sl, lsl #3
   1aa7c:	ldr	r1, [r1, #4]
   1aa80:	tst	r1, #8
   1aa84:	bne	1ab58 <__assert_fail@plt+0x93f8>
   1aa88:	tst	r1, #1048576	; 0x100000
   1aa8c:	bne	1abe8 <__assert_fail@plt+0x9488>
   1aa90:	uxtb	r1, r1
   1aa94:	cmp	r1, #4
   1aa98:	bne	1ac14 <__assert_fail@plt+0x94b4>
   1aa9c:	ldr	r0, [r0, sl, lsl #3]
   1aaa0:	ldr	r2, [sp, #92]	; 0x5c
   1aaa4:	str	r5, [sp, #56]	; 0x38
   1aaa8:	mov	r7, #0
   1aaac:	mov	r5, r2
   1aab0:	add	r0, r0, #1
   1aab4:	cmp	r0, r2
   1aab8:	bge	1aacc <__assert_fail@plt+0x936c>
   1aabc:	ldr	r1, [fp, #20]
   1aac0:	ldr	r2, [r1, r0, lsl #3]!
   1aac4:	ldr	r1, [r1, #4]
   1aac8:	sub	r7, r1, r2
   1aacc:	ldr	r8, [sp, #100]	; 0x64
   1aad0:	cmp	r6, #0
   1aad4:	beq	1aed8 <__assert_fail@plt+0x9778>
   1aad8:	cmp	r0, r5
   1aadc:	bge	1ab3c <__assert_fail@plt+0x93dc>
   1aae0:	ldr	r2, [fp, #20]
   1aae4:	ldr	r1, [r2, r0, lsl #3]
   1aae8:	cmn	r1, #1
   1aaec:	beq	1ab3c <__assert_fail@plt+0x93dc>
   1aaf0:	add	r0, r2, r0, lsl #3
   1aaf4:	ldr	r0, [r0, #4]
   1aaf8:	cmn	r0, #1
   1aafc:	beq	1ab3c <__assert_fail@plt+0x93dc>
   1ab00:	cmp	r7, #0
   1ab04:	beq	1af50 <__assert_fail@plt+0x97f0>
   1ab08:	ldr	r0, [sp, #132]	; 0x84
   1ab0c:	sub	r0, r0, r8
   1ab10:	cmp	r0, r7
   1ab14:	blt	1ab3c <__assert_fail@plt+0x93dc>
   1ab18:	ldr	r2, [sp, #108]	; 0x6c
   1ab1c:	str	ip, [sp, #52]	; 0x34
   1ab20:	add	r0, r2, r1
   1ab24:	add	r1, r2, r8
   1ab28:	mov	r2, r7
   1ab2c:	bl	1161c <bcmp@plt>
   1ab30:	cmp	r0, #0
   1ab34:	beq	1b10c <__assert_fail@plt+0x99ac>
   1ab38:	ldr	ip, [sp, #52]	; 0x34
   1ab3c:	mov	sl, r5
   1ab40:	ldr	r5, [sp, #56]	; 0x38
   1ab44:	ldr	r4, [sp, #88]	; 0x58
   1ab48:	ldr	r0, [r6]
   1ab4c:	cmp	r0, #0
   1ab50:	bne	1b148 <__assert_fail@plt+0x99e8>
   1ab54:	b	1b644 <__assert_fail@plt+0x9ee4>
   1ab58:	ldr	r0, [sp, #204]	; 0xcc
   1ab5c:	ldr	r1, [sp, #100]	; 0x64
   1ab60:	ldr	r8, [r4, #20]
   1ab64:	cmp	r3, #1
   1ab68:	ldr	r7, [r0, r1, lsl #2]
   1ab6c:	blt	1abc0 <__assert_fail@plt+0x9460>
   1ab70:	mov	r4, r3
   1ab74:	mov	r0, #0
   1ab78:	subs	r1, r3, #1
   1ab7c:	str	r7, [sp, #80]	; 0x50
   1ab80:	beq	1aba4 <__assert_fail@plt+0x9444>
   1ab84:	add	r2, r0, r1
   1ab88:	lsr	r3, r2, #1
   1ab8c:	ldr	r7, [r5, r3, lsl #2]
   1ab90:	cmp	r7, sl
   1ab94:	addlt	r0, lr, r2, lsr #1
   1ab98:	movge	r1, r3
   1ab9c:	cmp	r0, r1
   1aba0:	bcc	1ab84 <__assert_fail@plt+0x9424>
   1aba4:	ldr	r0, [r5, r0, lsl #2]
   1aba8:	ldr	r7, [sp, #80]	; 0x50
   1abac:	mov	r3, r4
   1abb0:	cmp	r0, sl
   1abb4:	bne	1abc0 <__assert_fail@plt+0x9460>
   1abb8:	str	r5, [sp, #56]	; 0x38
   1abbc:	b	1ad08 <__assert_fail@plt+0x95a8>
   1abc0:	ldr	r0, [sp, #72]	; 0x48
   1abc4:	cmp	r0, #0
   1abc8:	beq	1acdc <__assert_fail@plt+0x957c>
   1abcc:	cmp	r3, #0
   1abd0:	str	r5, [sp, #56]	; 0x38
   1abd4:	bne	1b1e8 <__assert_fail@plt+0x9a88>
   1abd8:	mov	r0, r5
   1abdc:	str	sl, [r5]
   1abe0:	mov	r3, #1
   1abe4:	b	1ad08 <__assert_fail@plt+0x95a8>
   1abe8:	ldr	r3, [sp, #100]	; 0x64
   1abec:	mov	r0, r4
   1abf0:	mov	r1, sl
   1abf4:	add	r2, sp, #104	; 0x68
   1abf8:	mov	r8, ip
   1abfc:	bl	26954 <__assert_fail@plt+0x151f4>
   1ac00:	mov	lr, #1
   1ac04:	mov	r1, r0
   1ac08:	cmp	r1, #0
   1ac0c:	mov	ip, r8
   1ac10:	bne	1ac40 <__assert_fail@plt+0x94e0>
   1ac14:	ldr	r0, [r4]
   1ac18:	ldr	r2, [sp, #100]	; 0x64
   1ac1c:	mov	r6, ip
   1ac20:	add	r1, r0, sl, lsl #3
   1ac24:	add	r0, sp, #104	; 0x68
   1ac28:	bl	26ce0 <__assert_fail@plt+0x15580>
   1ac2c:	mov	ip, r6
   1ac30:	mov	lr, #1
   1ac34:	mov	r1, #1
   1ac38:	cmp	r0, #0
   1ac3c:	beq	1ad28 <__assert_fail@plt+0x95c8>
   1ac40:	ldr	r0, [r4, #12]
   1ac44:	ldr	r2, [sp, #100]	; 0x64
   1ac48:	ldr	r6, [sp, #68]	; 0x44
   1ac4c:	ldr	r7, [r0, sl, lsl #2]
   1ac50:	add	r2, r1, r2
   1ac54:	cmp	r6, #0
   1ac58:	beq	1add0 <__assert_fail@plt+0x9670>
   1ac5c:	ldr	r0, [sp, #196]	; 0xc4
   1ac60:	ldr	r4, [sp, #88]	; 0x58
   1ac64:	cmp	r2, r0
   1ac68:	bgt	1b138 <__assert_fail@plt+0x99d8>
   1ac6c:	ldr	r0, [sp, #204]	; 0xcc
   1ac70:	ldr	r0, [r0, r2, lsl #2]
   1ac74:	cmp	r0, #0
   1ac78:	beq	1b138 <__assert_fail@plt+0x99d8>
   1ac7c:	ldr	r1, [r0, #8]
   1ac80:	cmp	r1, #1
   1ac84:	blt	1b138 <__assert_fail@plt+0x99d8>
   1ac88:	ldr	r0, [r0, #12]
   1ac8c:	str	r2, [sp, #100]	; 0x64
   1ac90:	mov	r8, r5
   1ac94:	subs	r1, r1, #1
   1ac98:	mov	r2, #0
   1ac9c:	beq	1acc4 <__assert_fail@plt+0x9564>
   1aca0:	mov	r2, #0
   1aca4:	add	r3, r2, r1
   1aca8:	lsr	r6, r3, #1
   1acac:	ldr	r5, [r0, r6, lsl #2]
   1acb0:	cmp	r5, r7
   1acb4:	addlt	r2, lr, r3, lsr #1
   1acb8:	movge	r1, r6
   1acbc:	cmp	r2, r1
   1acc0:	bcc	1aca4 <__assert_fail@plt+0x9544>
   1acc4:	ldr	r0, [r0, r2, lsl #2]
   1acc8:	mov	r3, #0
   1accc:	mov	r5, r8
   1acd0:	cmp	r0, r7
   1acd4:	bne	1ad28 <__assert_fail@plt+0x95c8>
   1acd8:	b	1aebc <__assert_fail@plt+0x975c>
   1acdc:	mov	r0, #4
   1ace0:	bl	2e08c <__assert_fail@plt+0x1c92c>
   1ace4:	cmp	r0, #0
   1ace8:	beq	1b844 <__assert_fail@plt+0xa0e4>
   1acec:	mov	ip, r0
   1acf0:	str	sl, [r0]
   1acf4:	mov	r0, #1
   1acf8:	mov	r3, #1
   1acfc:	mov	lr, #1
   1ad00:	str	r0, [sp, #72]	; 0x48
   1ad04:	str	ip, [sp, #56]	; 0x38
   1ad08:	add	r0, sl, sl, lsl #1
   1ad0c:	add	r1, r8, r0, lsl #2
   1ad10:	ldr	sl, [r1, #4]
   1ad14:	cmp	sl, #1
   1ad18:	ldrge	r2, [r7, #8]
   1ad1c:	subsge	r2, r2, #1
   1ad20:	bge	1ad4c <__assert_fail@plt+0x95ec>
   1ad24:	ldr	r5, [sp, #56]	; 0x38
   1ad28:	ldr	r6, [sp, #68]	; 0x44
   1ad2c:	cmp	r6, #0
   1ad30:	beq	1b6dc <__assert_fail@plt+0x9f7c>
   1ad34:	ldr	sl, [sp, #92]	; 0x5c
   1ad38:	ldr	r4, [sp, #88]	; 0x58
   1ad3c:	ldr	r0, [r6]
   1ad40:	cmp	r0, #0
   1ad44:	bne	1b148 <__assert_fail@plt+0x99e8>
   1ad48:	b	1b644 <__assert_fail@plt+0x9ee4>
   1ad4c:	str	r3, [sp, #48]	; 0x30
   1ad50:	ldr	r1, [r1, #8]
   1ad54:	ldr	r3, [r7, #12]
   1ad58:	cmp	r2, #0
   1ad5c:	beq	1adfc <__assert_fail@plt+0x969c>
   1ad60:	mov	r5, #0
   1ad64:	mvn	lr, #0
   1ad68:	str	ip, [sp, #52]	; 0x34
   1ad6c:	str	r2, [sp, #80]	; 0x50
   1ad70:	b	1ad84 <__assert_fail@plt+0x9624>
   1ad74:	ldr	r2, [sp, #80]	; 0x50
   1ad78:	add	r5, r5, #1
   1ad7c:	cmp	r5, sl
   1ad80:	beq	1adec <__assert_fail@plt+0x968c>
   1ad84:	ldr	r4, [r1, r5, lsl #2]
   1ad88:	mov	r7, #0
   1ad8c:	mov	ip, #1
   1ad90:	add	r6, r7, r2
   1ad94:	lsr	r0, r6, #1
   1ad98:	ldr	r9, [r3, r0, lsl #2]
   1ad9c:	cmp	r9, r4
   1ada0:	addlt	r7, ip, r6, lsr #1
   1ada4:	movge	r2, r0
   1ada8:	cmp	r7, r2
   1adac:	bcc	1ad90 <__assert_fail@plt+0x9630>
   1adb0:	ldr	r0, [r3, r7, lsl #2]
   1adb4:	cmp	r0, r4
   1adb8:	bne	1ad74 <__assert_fail@plt+0x9614>
   1adbc:	cmn	lr, #1
   1adc0:	mov	r7, lr
   1adc4:	mov	lr, r4
   1adc8:	beq	1ad74 <__assert_fail@plt+0x9614>
   1adcc:	b	1ae40 <__assert_fail@plt+0x96e0>
   1add0:	str	r2, [sp, #100]	; 0x64
   1add4:	mov	r3, #0
   1add8:	cmn	r7, #1
   1addc:	bgt	1aec4 <__assert_fail@plt+0x9764>
   1ade0:	cmn	r7, #2
   1ade4:	bne	1ad28 <__assert_fail@plt+0x95c8>
   1ade8:	b	1b7a4 <__assert_fail@plt+0xa044>
   1adec:	ldr	ip, [sp, #52]	; 0x34
   1adf0:	mov	r7, lr
   1adf4:	mov	lr, #1
   1adf8:	b	1aeb4 <__assert_fail@plt+0x9754>
   1adfc:	ldr	r4, [r3]
   1ae00:	mvn	r7, #0
   1ae04:	ldr	r2, [r1]
   1ae08:	cmp	r4, r2
   1ae0c:	beq	1ae30 <__assert_fail@plt+0x96d0>
   1ae10:	mov	r2, r7
   1ae14:	add	r1, r1, #4
   1ae18:	subs	sl, sl, #1
   1ae1c:	mov	r7, r2
   1ae20:	beq	1aeb0 <__assert_fail@plt+0x9750>
   1ae24:	ldr	r2, [r1]
   1ae28:	cmp	r4, r2
   1ae2c:	bne	1ae10 <__assert_fail@plt+0x96b0>
   1ae30:	cmn	r7, #1
   1ae34:	mov	r2, r4
   1ae38:	beq	1ae14 <__assert_fail@plt+0x96b4>
   1ae3c:	str	ip, [sp, #52]	; 0x34
   1ae40:	ldr	r3, [sp, #48]	; 0x30
   1ae44:	ldr	sl, [sp, #68]	; 0x44
   1ae48:	ldr	ip, [sp, #52]	; 0x34
   1ae4c:	ldr	r8, [sp, #56]	; 0x38
   1ae50:	mov	lr, #1
   1ae54:	cmp	r3, #1
   1ae58:	blt	1af04 <__assert_fail@plt+0x97a4>
   1ae5c:	mov	r0, #0
   1ae60:	mov	r5, r8
   1ae64:	subs	r1, r3, #1
   1ae68:	beq	1ae8c <__assert_fail@plt+0x972c>
   1ae6c:	add	r2, r0, r1
   1ae70:	lsr	r3, r2, #1
   1ae74:	ldr	r6, [r5, r3, lsl #2]
   1ae78:	cmp	r6, r7
   1ae7c:	addlt	r0, lr, r2, lsr #1
   1ae80:	movge	r1, r3
   1ae84:	cmp	r0, r1
   1ae88:	bcc	1ae6c <__assert_fail@plt+0x970c>
   1ae8c:	ldr	r0, [r5, r0, lsl #2]
   1ae90:	ldr	r3, [sp, #48]	; 0x30
   1ae94:	cmp	r0, r7
   1ae98:	bne	1af04 <__assert_fail@plt+0x97a4>
   1ae9c:	mov	r7, r4
   1aea0:	mov	r5, r8
   1aea4:	cmn	r7, #1
   1aea8:	bgt	1aec4 <__assert_fail@plt+0x9764>
   1aeac:	b	1ade0 <__assert_fail@plt+0x9680>
   1aeb0:	mov	r7, r2
   1aeb4:	ldr	r5, [sp, #56]	; 0x38
   1aeb8:	ldr	r3, [sp, #48]	; 0x30
   1aebc:	cmn	r7, #1
   1aec0:	ble	1ade0 <__assert_fail@plt+0x9680>
   1aec4:	ldr	r8, [fp, #20]
   1aec8:	ldr	r6, [sp, #68]	; 0x44
   1aecc:	ldr	r4, [sp, #100]	; 0x64
   1aed0:	mov	sl, r7
   1aed4:	b	1b1d0 <__assert_fail@plt+0x9a70>
   1aed8:	cmp	r7, #0
   1aedc:	beq	1af50 <__assert_fail@plt+0x97f0>
   1aee0:	ldr	r0, [r4, #12]
   1aee4:	add	r8, r7, r8
   1aee8:	ldr	r5, [sp, #56]	; 0x38
   1aeec:	mov	r3, #0
   1aef0:	str	r8, [sp, #100]	; 0x64
   1aef4:	ldr	r7, [r0, sl, lsl #2]
   1aef8:	cmn	r7, #1
   1aefc:	bgt	1aec4 <__assert_fail@plt+0x9764>
   1af00:	b	1ade0 <__assert_fail@plt+0x9680>
   1af04:	cmp	sl, #0
   1af08:	beq	1af78 <__assert_fail@plt+0x9818>
   1af0c:	ldr	r6, [sl]
   1af10:	ldr	r0, [sl, #4]
   1af14:	add	r1, r6, #1
   1af18:	cmp	r1, r0
   1af1c:	str	r1, [sl]
   1af20:	bne	1af88 <__assert_fail@plt+0x9828>
   1af24:	ldr	r0, [sl, #8]
   1af28:	add	r1, r1, r1, lsl #1
   1af2c:	lsl	r1, r1, #4
   1af30:	bl	2e0bc <__assert_fail@plt+0x1c95c>
   1af34:	cmp	r0, #0
   1af38:	beq	1b7a0 <__assert_fail@plt+0xa040>
   1af3c:	str	r0, [sl, #8]
   1af40:	ldr	r1, [sl, #4]
   1af44:	lsl	r1, r1, #1
   1af48:	str	r1, [sl, #4]
   1af4c:	b	1af8c <__assert_fail@plt+0x982c>
   1af50:	ldr	r0, [sp, #72]	; 0x48
   1af54:	str	r7, [sp, #80]	; 0x50
   1af58:	cmp	r0, #0
   1af5c:	beq	1b05c <__assert_fail@plt+0x98fc>
   1af60:	cmp	r3, #0
   1af64:	bne	1b32c <__assert_fail@plt+0x9bcc>
   1af68:	ldr	r5, [sp, #56]	; 0x38
   1af6c:	mov	r2, #1
   1af70:	str	sl, [r5]
   1af74:	b	1b088 <__assert_fail@plt+0x9928>
   1af78:	mov	r5, r8
   1af7c:	cmn	r7, #1
   1af80:	bgt	1aec4 <__assert_fail@plt+0x9764>
   1af84:	b	1ade0 <__assert_fail@plt+0x9680>
   1af88:	ldr	r0, [sl, #8]
   1af8c:	ldr	r1, [sp, #100]	; 0x64
   1af90:	add	r6, r6, r6, lsl #1
   1af94:	str	r1, [r0, r6, lsl #3]!
   1af98:	str	r4, [r0, #4]
   1af9c:	ldr	r0, [sp, #44]	; 0x2c
   1afa0:	bl	2e08c <__assert_fail@plt+0x1c92c>
   1afa4:	ldr	r1, [sl, #8]
   1afa8:	cmp	r0, #0
   1afac:	add	r4, r1, r6, lsl #3
   1afb0:	str	r0, [r4, #8]!
   1afb4:	beq	1b798 <__assert_fail@plt+0xa038>
   1afb8:	ldr	r9, [sp, #76]	; 0x4c
   1afbc:	ldr	r1, [fp, #20]
   1afc0:	mov	r2, r9
   1afc4:	bl	11484 <memcpy@plt>
   1afc8:	ldr	r0, [r4]
   1afcc:	ldr	r1, [sp, #92]	; 0x5c
   1afd0:	mov	r2, r9
   1afd4:	add	r0, r0, r1, lsl #3
   1afd8:	ldr	r1, [sp, #84]	; 0x54
   1afdc:	bl	11484 <memcpy@plt>
   1afe0:	ldr	r0, [sl, #8]
   1afe4:	ldr	r3, [sp, #48]	; 0x30
   1afe8:	add	r5, r0, r6, lsl #3
   1afec:	cmp	r3, #1
   1aff0:	mov	r6, r5
   1aff4:	str	r3, [r6, #16]!
   1aff8:	sub	sl, r6, #4
   1affc:	blt	1b034 <__assert_fail@plt+0x98d4>
   1b000:	lsl	r4, r3, #2
   1b004:	str	r3, [sl]
   1b008:	mov	r0, r4
   1b00c:	bl	2e08c <__assert_fail@plt+0x1c92c>
   1b010:	cmp	r0, #0
   1b014:	str	r0, [r5, #20]
   1b018:	beq	1b84c <__assert_fail@plt+0xa0ec>
   1b01c:	ldr	r5, [sp, #52]	; 0x34
   1b020:	mov	r2, r4
   1b024:	mov	r1, r5
   1b028:	bl	11484 <memcpy@plt>
   1b02c:	mov	ip, r5
   1b030:	b	1adf4 <__assert_fail@plt+0x9694>
   1b034:	ldr	ip, [sp, #52]	; 0x34
   1b038:	ldr	r5, [sp, #56]	; 0x38
   1b03c:	mov	r0, #0
   1b040:	mov	lr, #1
   1b044:	str	r0, [sl]
   1b048:	str	r0, [sl, #4]
   1b04c:	str	r0, [sl, #8]
   1b050:	cmn	r7, #1
   1b054:	bgt	1aec4 <__assert_fail@plt+0x9764>
   1b058:	b	1ade0 <__assert_fail@plt+0x9680>
   1b05c:	mov	r0, #4
   1b060:	bl	2e08c <__assert_fail@plt+0x1c92c>
   1b064:	cmp	r0, #0
   1b068:	beq	1b844 <__assert_fail@plt+0xa0e4>
   1b06c:	mov	ip, r0
   1b070:	str	sl, [r0]
   1b074:	mov	r0, #1
   1b078:	mov	r2, #1
   1b07c:	mov	lr, #1
   1b080:	str	r0, [sp, #72]	; 0x48
   1b084:	mov	r5, ip
   1b088:	ldr	r0, [sp, #204]	; 0xcc
   1b08c:	ldr	r0, [r0, r8, lsl #2]
   1b090:	ldr	r1, [r0, #8]
   1b094:	cmp	r1, #1
   1b098:	blt	1ac14 <__assert_fail@plt+0x94b4>
   1b09c:	mov	r9, r2
   1b0a0:	ldr	r2, [r4, #20]
   1b0a4:	add	r3, sl, sl, lsl #1
   1b0a8:	mov	r8, ip
   1b0ac:	ldr	ip, [r0, #12]
   1b0b0:	add	r2, r2, r3, lsl #2
   1b0b4:	ldr	r2, [r2, #8]
   1b0b8:	ldr	r7, [r2]
   1b0bc:	subs	r2, r1, #1
   1b0c0:	mov	r1, #0
   1b0c4:	beq	1b0e8 <__assert_fail@plt+0x9988>
   1b0c8:	add	r3, r1, r2
   1b0cc:	lsr	r6, r3, #1
   1b0d0:	ldr	r0, [ip, r6, lsl #2]
   1b0d4:	cmp	r0, r7
   1b0d8:	addlt	r1, lr, r3, lsr #1
   1b0dc:	movge	r2, r6
   1b0e0:	cmp	r1, r2
   1b0e4:	bcc	1b0c8 <__assert_fail@plt+0x9968>
   1b0e8:	ldr	r0, [ip, r1, lsl #2]
   1b0ec:	ldr	r1, [sp, #80]	; 0x50
   1b0f0:	cmp	r0, r7
   1b0f4:	bne	1ac08 <__assert_fail@plt+0x94a8>
   1b0f8:	mov	ip, r8
   1b0fc:	mov	r3, r9
   1b100:	cmn	r7, #1
   1b104:	bgt	1aec4 <__assert_fail@plt+0x9764>
   1b108:	b	1ade0 <__assert_fail@plt+0x9680>
   1b10c:	ldr	r0, [r4, #12]
   1b110:	add	r8, r7, r8
   1b114:	ldr	ip, [sp, #52]	; 0x34
   1b118:	ldr	r5, [sp, #56]	; 0x38
   1b11c:	mov	lr, #1
   1b120:	mov	r2, r8
   1b124:	ldr	r7, [r0, sl, lsl #2]
   1b128:	ldr	r0, [sp, #196]	; 0xc4
   1b12c:	ldr	r4, [sp, #88]	; 0x58
   1b130:	cmp	r2, r0
   1b134:	ble	1ac6c <__assert_fail@plt+0x950c>
   1b138:	ldr	sl, [sp, #92]	; 0x5c
   1b13c:	ldr	r0, [r6]
   1b140:	cmp	r0, #0
   1b144:	beq	1b644 <__assert_fail@plt+0x9ee4>
   1b148:	sub	r0, r0, #1
   1b14c:	ldr	r7, [sp, #76]	; 0x4c
   1b150:	ldr	r8, [fp, #20]
   1b154:	mov	r9, ip
   1b158:	str	r0, [r6]
   1b15c:	add	r5, r0, r0, lsl #1
   1b160:	ldr	r4, [r6, #8]
   1b164:	mov	r2, r7
   1b168:	ldr	r0, [r4, r5, lsl #3]!
   1b16c:	ldr	r1, [r4, #8]
   1b170:	str	r0, [sp, #100]	; 0x64
   1b174:	mov	r0, r8
   1b178:	bl	11484 <memcpy@plt>
   1b17c:	ldr	r0, [r4, #8]
   1b180:	mov	r2, r7
   1b184:	add	r1, r0, sl, lsl #3
   1b188:	ldr	r0, [sp, #84]	; 0x54
   1b18c:	bl	11484 <memcpy@plt>
   1b190:	ldr	r4, [sp, #100]	; 0x64
   1b194:	mov	r0, r9
   1b198:	bl	144c0 <__assert_fail@plt+0x2d60>
   1b19c:	ldr	r0, [r6, #8]
   1b1a0:	add	r0, r0, r5, lsl #3
   1b1a4:	ldr	r0, [r0, #8]
   1b1a8:	bl	144c0 <__assert_fail@plt+0x2d60>
   1b1ac:	ldr	r0, [r6, #8]
   1b1b0:	mov	lr, #1
   1b1b4:	add	r0, r0, r5, lsl #3
   1b1b8:	ldr	ip, [r0, #20]
   1b1bc:	ldr	r1, [r0, #12]
   1b1c0:	ldr	sl, [r0, #4]
   1b1c4:	ldr	r3, [r0, #16]
   1b1c8:	mov	r5, ip
   1b1cc:	str	r1, [sp, #72]	; 0x48
   1b1d0:	ldr	r0, [r8, #4]
   1b1d4:	ldr	r9, [sp, #96]	; 0x60
   1b1d8:	ldr	r7, [sp, #60]	; 0x3c
   1b1dc:	cmp	r4, r0
   1b1e0:	ble	1a864 <__assert_fail@plt+0x9104>
   1b1e4:	b	1a7a8 <__assert_fail@plt+0x9048>
   1b1e8:	ldr	r0, [sp, #72]	; 0x48
   1b1ec:	str	r8, [sp, #52]	; 0x34
   1b1f0:	mov	r4, ip
   1b1f4:	mov	r8, r3
   1b1f8:	str	r7, [sp, #80]	; 0x50
   1b1fc:	cmp	r0, r3
   1b200:	bne	1b234 <__assert_fail@plt+0x9ad4>
   1b204:	ldr	r0, [sp, #72]	; 0x48
   1b208:	lsl	r1, r0, #3
   1b20c:	mov	r0, r4
   1b210:	bl	2e0bc <__assert_fail@plt+0x1c95c>
   1b214:	ldr	r5, [sp, #56]	; 0x38
   1b218:	cmp	r0, #0
   1b21c:	beq	1b7a4 <__assert_fail@plt+0xa044>
   1b220:	ldr	r1, [sp, #72]	; 0x48
   1b224:	mov	r4, r0
   1b228:	str	r0, [sp, #56]	; 0x38
   1b22c:	lsl	r1, r1, #1
   1b230:	str	r1, [sp, #72]	; 0x48
   1b234:	ldr	r0, [sp, #56]	; 0x38
   1b238:	ldr	r0, [r0]
   1b23c:	cmp	r0, sl
   1b240:	ble	1b2d0 <__assert_fail@plt+0x9b70>
   1b244:	mov	ip, r8
   1b248:	cmp	r8, #1
   1b24c:	blt	1b308 <__assert_fail@plt+0x9ba8>
   1b250:	mov	r0, r8
   1b254:	ands	r1, r8, #3
   1b258:	sub	r2, r8, #1
   1b25c:	beq	1b28c <__assert_fail@plt+0x9b2c>
   1b260:	ldr	r0, [sp, #56]	; 0x38
   1b264:	mov	r3, r8
   1b268:	add	r7, r0, r8, lsl #2
   1b26c:	mov	r0, r8
   1b270:	mov	r3, r7
   1b274:	ldr	r6, [r3, #-4]!
   1b278:	subs	r1, r1, #1
   1b27c:	sub	r0, r0, #1
   1b280:	str	r6, [r7]
   1b284:	mov	r7, r3
   1b288:	bne	1b274 <__assert_fail@plt+0x9b14>
   1b28c:	mov	ip, #0
   1b290:	cmp	r2, #3
   1b294:	bcc	1b308 <__assert_fail@plt+0x9ba8>
   1b298:	ldr	r1, [sp, #56]	; 0x38
   1b29c:	add	r2, r1, r0, lsl #2
   1b2a0:	sub	r2, r2, #8
   1b2a4:	ldr	r6, [r2]
   1b2a8:	ldr	r1, [r2, #4]
   1b2ac:	ldmdb	r2, {r3, r7}
   1b2b0:	sub	r0, r0, #4
   1b2b4:	cmp	r0, #0
   1b2b8:	stmda	r2, {r3, r7}
   1b2bc:	str	r6, [r2, #4]
   1b2c0:	str	r1, [r2, #8]
   1b2c4:	sub	r2, r2, #16
   1b2c8:	bgt	1b2a4 <__assert_fail@plt+0x9b44>
   1b2cc:	b	1b308 <__assert_fail@plt+0x9ba8>
   1b2d0:	ldr	r0, [sp, #56]	; 0x38
   1b2d4:	mov	ip, r8
   1b2d8:	add	r0, r0, r8, lsl #2
   1b2dc:	ldr	r2, [r0, #-4]
   1b2e0:	cmp	r2, sl
   1b2e4:	ble	1b308 <__assert_fail@plt+0x9ba8>
   1b2e8:	sub	r1, r8, #2
   1b2ec:	str	r2, [r0]
   1b2f0:	sub	r1, r1, #1
   1b2f4:	ldr	r2, [r0, #-8]
   1b2f8:	sub	r0, r0, #4
   1b2fc:	cmp	r2, sl
   1b300:	bgt	1b2ec <__assert_fail@plt+0x9b8c>
   1b304:	add	ip, r1, #2
   1b308:	ldr	r0, [sp, #56]	; 0x38
   1b30c:	mov	r3, r8
   1b310:	add	r3, r8, #1
   1b314:	ldr	r7, [sp, #80]	; 0x50
   1b318:	ldr	r8, [sp, #52]	; 0x34
   1b31c:	mov	lr, #1
   1b320:	str	sl, [r0, ip, lsl #2]
   1b324:	mov	ip, r4
   1b328:	b	1ad08 <__assert_fail@plt+0x95a8>
   1b32c:	ldr	r0, [sp, #72]	; 0x48
   1b330:	ldr	r5, [sp, #56]	; 0x38
   1b334:	mov	r8, ip
   1b338:	mov	r9, r3
   1b33c:	cmp	r0, r3
   1b340:	bne	1b370 <__assert_fail@plt+0x9c10>
   1b344:	ldr	r0, [sp, #72]	; 0x48
   1b348:	lsl	r1, r0, #3
   1b34c:	mov	r0, r8
   1b350:	bl	2e0bc <__assert_fail@plt+0x1c95c>
   1b354:	cmp	r0, #0
   1b358:	beq	1b7a4 <__assert_fail@plt+0xa044>
   1b35c:	ldr	r1, [sp, #72]	; 0x48
   1b360:	mov	r8, r0
   1b364:	mov	r5, r0
   1b368:	lsl	r1, r1, #1
   1b36c:	str	r1, [sp, #72]	; 0x48
   1b370:	ldr	r0, [r5]
   1b374:	mov	ip, r9
   1b378:	cmp	r0, sl
   1b37c:	ble	1b3fc <__assert_fail@plt+0x9c9c>
   1b380:	cmp	r9, #1
   1b384:	blt	1b42c <__assert_fail@plt+0x9ccc>
   1b388:	mov	r0, r9
   1b38c:	ands	r1, r9, #3
   1b390:	sub	r2, r9, #1
   1b394:	beq	1b3bc <__assert_fail@plt+0x9c5c>
   1b398:	add	r7, r5, r9, lsl #2
   1b39c:	mov	r0, r9
   1b3a0:	mov	r3, r7
   1b3a4:	ldr	r6, [r3, #-4]!
   1b3a8:	subs	r1, r1, #1
   1b3ac:	sub	r0, r0, #1
   1b3b0:	str	r6, [r7]
   1b3b4:	mov	r7, r3
   1b3b8:	bne	1b3a4 <__assert_fail@plt+0x9c44>
   1b3bc:	mov	ip, #0
   1b3c0:	cmp	r2, #3
   1b3c4:	bcc	1b42c <__assert_fail@plt+0x9ccc>
   1b3c8:	add	r2, r5, r0, lsl #2
   1b3cc:	sub	r2, r2, #8
   1b3d0:	ldr	r6, [r2]
   1b3d4:	ldr	r1, [r2, #4]
   1b3d8:	ldmdb	r2, {r3, r7}
   1b3dc:	sub	r0, r0, #4
   1b3e0:	cmp	r0, #0
   1b3e4:	stmda	r2, {r3, r7}
   1b3e8:	str	r6, [r2, #4]
   1b3ec:	str	r1, [r2, #8]
   1b3f0:	sub	r2, r2, #16
   1b3f4:	bgt	1b3d0 <__assert_fail@plt+0x9c70>
   1b3f8:	b	1b42c <__assert_fail@plt+0x9ccc>
   1b3fc:	add	r0, r5, r9, lsl #2
   1b400:	ldr	r2, [r0, #-4]
   1b404:	cmp	r2, sl
   1b408:	ble	1b42c <__assert_fail@plt+0x9ccc>
   1b40c:	sub	r1, r9, #2
   1b410:	str	r2, [r0]
   1b414:	sub	r1, r1, #1
   1b418:	ldr	r2, [r0, #-8]
   1b41c:	sub	r0, r0, #4
   1b420:	cmp	r2, sl
   1b424:	bgt	1b410 <__assert_fail@plt+0x9cb0>
   1b428:	add	ip, r1, #2
   1b42c:	str	sl, [r5, ip, lsl #2]
   1b430:	mov	ip, r8
   1b434:	ldr	r8, [sp, #100]	; 0x64
   1b438:	mov	r2, r9
   1b43c:	add	r2, r9, #1
   1b440:	mov	lr, #1
   1b444:	b	1b088 <__assert_fail@plt+0x9928>
   1b448:	mov	r0, ip
   1b44c:	bl	144c0 <__assert_fail@plt+0x2d60>
   1b450:	ldr	r0, [fp, #-184]	; 0xffffff48
   1b454:	cmp	r0, r4
   1b458:	beq	1b460 <__assert_fail@plt+0x9d00>
   1b45c:	bl	144c0 <__assert_fail@plt+0x2d60>
   1b460:	mov	r0, #16
   1b464:	str	r4, [fp, #-184]	; 0xffffff48
   1b468:	cmp	r6, #0
   1b46c:	str	r0, [fp, #-188]	; 0xffffff44
   1b470:	mov	r0, #0
   1b474:	str	r0, [fp, #-192]	; 0xffffff40
   1b478:	beq	1b4d0 <__assert_fail@plt+0x9d70>
   1b47c:	ldr	r1, [r6]
   1b480:	ldr	r0, [r6, #8]
   1b484:	cmp	r1, #1
   1b488:	blt	1b4c8 <__assert_fail@plt+0x9d68>
   1b48c:	mov	r4, #0
   1b490:	mov	r5, #0
   1b494:	add	r0, r0, r4
   1b498:	ldr	r0, [r0, #20]
   1b49c:	bl	144c0 <__assert_fail@plt+0x2d60>
   1b4a0:	ldr	r0, [r6, #8]
   1b4a4:	add	r0, r0, r4
   1b4a8:	ldr	r0, [r0, #8]
   1b4ac:	bl	144c0 <__assert_fail@plt+0x2d60>
   1b4b0:	ldr	r1, [r6]
   1b4b4:	ldr	r0, [r6, #8]
   1b4b8:	add	r5, r5, #1
   1b4bc:	add	r4, r4, #24
   1b4c0:	cmp	r5, r1
   1b4c4:	blt	1b494 <__assert_fail@plt+0x9d34>
   1b4c8:	bl	144c0 <__assert_fail@plt+0x2d60>
   1b4cc:	ldr	r8, [fp, #20]
   1b4d0:	ldrb	r0, [sp, #180]	; 0xb4
   1b4d4:	cmp	r0, #0
   1b4d8:	bne	1b714 <__assert_fail@plt+0x9fb4>
   1b4dc:	ldr	r1, [fp, #-200]	; 0xffffff38
   1b4e0:	ldr	r2, [sp, #92]	; 0x5c
   1b4e4:	ldr	r5, [sp, #32]
   1b4e8:	add	r0, r8, #4
   1b4ec:	ldr	r3, [r0, #-4]
   1b4f0:	cmn	r3, #1
   1b4f4:	bne	1b510 <__assert_fail@plt+0x9db0>
   1b4f8:	add	r0, r0, #8
   1b4fc:	subs	r2, r2, #1
   1b500:	beq	1b530 <__assert_fail@plt+0x9dd0>
   1b504:	ldr	r3, [r0, #-4]
   1b508:	cmn	r3, #1
   1b50c:	beq	1b4f8 <__assert_fail@plt+0x9d98>
   1b510:	add	r3, r3, r1
   1b514:	str	r3, [r0, #-4]
   1b518:	ldr	r3, [r0]
   1b51c:	add	r3, r3, r1
   1b520:	str	r3, [r0]
   1b524:	add	r0, r0, #8
   1b528:	subs	r2, r2, #1
   1b52c:	bne	1b504 <__assert_fail@plt+0x9da4>
   1b530:	cmp	r5, #1
   1b534:	blt	1b54c <__assert_fail@plt+0x9dec>
   1b538:	ldr	r0, [sp, #92]	; 0x5c
   1b53c:	lsl	r2, r5, #3
   1b540:	mov	r1, #255	; 0xff
   1b544:	add	r0, r8, r0, lsl #3
   1b548:	bl	11670 <memset@plt>
   1b54c:	ldr	r0, [r9, #132]	; 0x84
   1b550:	mov	r8, #0
   1b554:	cmp	r0, #0
   1b558:	beq	1b5d4 <__assert_fail@plt+0x9e74>
   1b55c:	ldr	r1, [sp, #92]	; 0x5c
   1b560:	cmp	r1, #2
   1b564:	bcc	1b5d4 <__assert_fail@plt+0x9e74>
   1b568:	ldr	r1, [sp, #32]
   1b56c:	ldr	r2, [fp, #16]
   1b570:	ldr	r6, [fp, #20]
   1b574:	mvn	r1, r1
   1b578:	add	r1, r1, r2
   1b57c:	mov	r2, #0
   1b580:	ldr	r3, [r0, r2, lsl #2]
   1b584:	cmp	r2, r3
   1b588:	bne	1b5a4 <__assert_fail@plt+0x9e44>
   1b58c:	add	r2, r2, #1
   1b590:	cmp	r1, r2
   1b594:	beq	1b5d0 <__assert_fail@plt+0x9e70>
   1b598:	ldr	r3, [r0, r2, lsl #2]
   1b59c:	cmp	r2, r3
   1b5a0:	beq	1b58c <__assert_fail@plt+0x9e2c>
   1b5a4:	add	r3, r6, r3, lsl #3
   1b5a8:	add	r7, r6, r2, lsl #3
   1b5ac:	ldr	r3, [r3, #8]
   1b5b0:	str	r3, [r7, #8]
   1b5b4:	ldr	r3, [r0, r2, lsl #2]
   1b5b8:	add	r3, r6, r3, lsl #3
   1b5bc:	ldr	r3, [r3, #12]
   1b5c0:	str	r3, [r7, #12]
   1b5c4:	add	r2, r2, #1
   1b5c8:	cmp	r1, r2
   1b5cc:	bne	1b598 <__assert_fail@plt+0x9e38>
   1b5d0:	mov	r8, #0
   1b5d4:	ldr	r0, [sp, #204]	; 0xcc
   1b5d8:	bl	144c0 <__assert_fail@plt+0x2d60>
   1b5dc:	ldr	r0, [sp, #96]	; 0x60
   1b5e0:	ldr	r0, [r0, #76]	; 0x4c
   1b5e4:	cmp	r0, #0
   1b5e8:	beq	1b604 <__assert_fail@plt+0x9ea4>
   1b5ec:	add	r0, sp, #104	; 0x68
   1b5f0:	bl	23e04 <__assert_fail@plt+0x126a4>
   1b5f4:	ldr	r0, [sp, #236]	; 0xec
   1b5f8:	bl	144c0 <__assert_fail@plt+0x2d60>
   1b5fc:	ldr	r0, [sp, #220]	; 0xdc
   1b600:	bl	144c0 <__assert_fail@plt+0x2d60>
   1b604:	ldr	r0, [sp, #112]	; 0x70
   1b608:	bl	144c0 <__assert_fail@plt+0x2d60>
   1b60c:	ldr	r0, [sp, #116]	; 0x74
   1b610:	bl	144c0 <__assert_fail@plt+0x2d60>
   1b614:	ldrb	r0, [sp, #179]	; 0xb3
   1b618:	cmp	r0, #0
   1b61c:	beq	1b628 <__assert_fail@plt+0x9ec8>
   1b620:	ldr	r0, [sp, #108]	; 0x6c
   1b624:	bl	144c0 <__assert_fail@plt+0x2d60>
   1b628:	mov	r0, r8
   1b62c:	sub	sp, fp, #28
   1b630:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b634:	mov	r6, #0
   1b638:	b	19090 <__assert_fail@plt+0x7930>
   1b63c:	mov	r8, #12
   1b640:	b	1b5d4 <__assert_fail@plt+0x9e74>
   1b644:	mov	r0, r5
   1b648:	mov	r5, #0
   1b64c:	bl	144c0 <__assert_fail@plt+0x2d60>
   1b650:	ldr	r0, [fp, #-184]	; 0xffffff48
   1b654:	cmp	r0, r4
   1b658:	beq	1b660 <__assert_fail@plt+0x9f00>
   1b65c:	bl	144c0 <__assert_fail@plt+0x2d60>
   1b660:	mov	r0, #16
   1b664:	str	r4, [fp, #-184]	; 0xffffff48
   1b668:	mov	r8, #1
   1b66c:	cmp	r5, #0
   1b670:	str	r0, [fp, #-188]	; 0xffffff44
   1b674:	mov	r0, #0
   1b678:	str	r0, [fp, #-192]	; 0xffffff40
   1b67c:	bne	1b5d4 <__assert_fail@plt+0x9e74>
   1b680:	ldr	r1, [r6]
   1b684:	ldr	r0, [r6, #8]
   1b688:	cmp	r1, #1
   1b68c:	blt	1b6cc <__assert_fail@plt+0x9f6c>
   1b690:	mov	r5, #0
   1b694:	mov	r4, #0
   1b698:	add	r0, r0, r5
   1b69c:	ldr	r0, [r0, #20]
   1b6a0:	bl	144c0 <__assert_fail@plt+0x2d60>
   1b6a4:	ldr	r0, [r6, #8]
   1b6a8:	add	r0, r0, r5
   1b6ac:	ldr	r0, [r0, #8]
   1b6b0:	bl	144c0 <__assert_fail@plt+0x2d60>
   1b6b4:	ldr	r1, [r6]
   1b6b8:	ldr	r0, [r6, #8]
   1b6bc:	add	r4, r4, #1
   1b6c0:	add	r5, r5, #24
   1b6c4:	cmp	r4, r1
   1b6c8:	blt	1b698 <__assert_fail@plt+0x9f38>
   1b6cc:	bl	144c0 <__assert_fail@plt+0x2d60>
   1b6d0:	b	1b5d4 <__assert_fail@plt+0x9e74>
   1b6d4:	mov	r8, r0
   1b6d8:	b	1b5d4 <__assert_fail@plt+0x9e74>
   1b6dc:	ldr	r4, [sp, #88]	; 0x58
   1b6e0:	mov	r0, r5
   1b6e4:	mov	r5, #1
   1b6e8:	bl	144c0 <__assert_fail@plt+0x2d60>
   1b6ec:	ldr	r0, [fp, #-184]	; 0xffffff48
   1b6f0:	cmp	r0, r4
   1b6f4:	bne	1b65c <__assert_fail@plt+0x9efc>
   1b6f8:	b	1b660 <__assert_fail@plt+0x9f00>
   1b6fc:	mov	r0, r6
   1b700:	bl	144c0 <__assert_fail@plt+0x2d60>
   1b704:	mov	r0, #0
   1b708:	bl	144c0 <__assert_fail@plt+0x2d60>
   1b70c:	mov	r8, #12
   1b710:	b	1b5d4 <__assert_fail@plt+0x9e74>
   1b714:	ldr	r1, [sp, #92]	; 0x5c
   1b718:	ldr	r5, [sp, #32]
   1b71c:	add	r0, r8, #4
   1b720:	ldr	r2, [r0, #-4]
   1b724:	cmn	r2, #1
   1b728:	bne	1b744 <__assert_fail@plt+0x9fe4>
   1b72c:	add	r0, r0, #8
   1b730:	subs	r1, r1, #1
   1b734:	beq	1b530 <__assert_fail@plt+0x9dd0>
   1b738:	ldr	r2, [r0, #-4]
   1b73c:	cmn	r2, #1
   1b740:	beq	1b72c <__assert_fail@plt+0x9fcc>
   1b744:	ldr	r3, [sp, #132]	; 0x84
   1b748:	ldr	r7, [sp, #24]
   1b74c:	ldr	ip, [sp, #116]	; 0x74
   1b750:	cmp	r2, r3
   1b754:	mov	r6, r7
   1b758:	addne	r6, ip, r2, lsl #2
   1b75c:	ldr	r2, [r6]
   1b760:	str	r2, [r0, #-4]
   1b764:	ldr	r6, [r0]
   1b768:	cmp	r6, r3
   1b76c:	addne	r7, ip, r6, lsl #2
   1b770:	ldr	r3, [r7]
   1b774:	ldr	r7, [fp, #-200]	; 0xffffff38
   1b778:	add	r3, r3, r7
   1b77c:	add	r2, r2, r7
   1b780:	str	r3, [r0]
   1b784:	str	r2, [r0, #-4]
   1b788:	add	r0, r0, #8
   1b78c:	subs	r1, r1, #1
   1b790:	bne	1b738 <__assert_fail@plt+0x9fd8>
   1b794:	b	1b530 <__assert_fail@plt+0x9dd0>
   1b798:	ldr	r5, [sp, #56]	; 0x38
   1b79c:	b	1b7a4 <__assert_fail@plt+0xa044>
   1b7a0:	mov	r5, r8
   1b7a4:	mov	r0, r5
   1b7a8:	bl	144c0 <__assert_fail@plt+0x2d60>
   1b7ac:	ldr	r0, [fp, #-184]	; 0xffffff48
   1b7b0:	ldr	r4, [sp, #88]	; 0x58
   1b7b4:	cmp	r0, r4
   1b7b8:	beq	1b7c0 <__assert_fail@plt+0xa060>
   1b7bc:	bl	144c0 <__assert_fail@plt+0x2d60>
   1b7c0:	mov	r0, #16
   1b7c4:	str	r4, [fp, #-184]	; 0xffffff48
   1b7c8:	mov	r8, #12
   1b7cc:	str	r0, [fp, #-188]	; 0xffffff44
   1b7d0:	mov	r0, #0
   1b7d4:	str	r0, [fp, #-192]	; 0xffffff40
   1b7d8:	ldr	r0, [sp, #68]	; 0x44
   1b7dc:	cmp	r0, #0
   1b7e0:	beq	1b5d4 <__assert_fail@plt+0x9e74>
   1b7e4:	ldr	r0, [sp, #68]	; 0x44
   1b7e8:	ldr	r1, [r0]
   1b7ec:	mov	r4, r0
   1b7f0:	ldr	r0, [r0, #8]
   1b7f4:	cmp	r1, #1
   1b7f8:	blt	1b6cc <__assert_fail@plt+0x9f6c>
   1b7fc:	mov	r5, #0
   1b800:	mov	r6, #0
   1b804:	add	r0, r0, r5
   1b808:	ldr	r0, [r0, #20]
   1b80c:	bl	144c0 <__assert_fail@plt+0x2d60>
   1b810:	ldr	r0, [r4, #8]
   1b814:	add	r0, r0, r5
   1b818:	ldr	r0, [r0, #8]
   1b81c:	bl	144c0 <__assert_fail@plt+0x2d60>
   1b820:	ldr	r1, [r4]
   1b824:	ldr	r0, [r4, #8]
   1b828:	add	r6, r6, #1
   1b82c:	add	r5, r5, #24
   1b830:	cmp	r6, r1
   1b834:	blt	1b804 <__assert_fail@plt+0xa0a4>
   1b838:	b	1b6cc <__assert_fail@plt+0x9f6c>
   1b83c:	mov	r8, #1
   1b840:	b	1b5d4 <__assert_fail@plt+0x9e74>
   1b844:	mov	r5, #0
   1b848:	b	1b7a4 <__assert_fail@plt+0xa044>
   1b84c:	ldr	r5, [sp, #56]	; 0x38
   1b850:	mov	r0, #0
   1b854:	str	r0, [r6]
   1b858:	str	r0, [sl]
   1b85c:	b	1b7a4 <__assert_fail@plt+0xa044>
   1b860:	push	{fp, lr}
   1b864:	mov	fp, sp
   1b868:	sub	sp, sp, #16
   1b86c:	mov	ip, #1
   1b870:	str	r2, [sp, #4]
   1b874:	str	ip, [sp, #12]
   1b878:	mov	ip, #0
   1b87c:	str	ip, [sp]
   1b880:	ldr	ip, [fp, #8]
   1b884:	str	ip, [sp, #8]
   1b888:	bl	1b894 <__assert_fail@plt+0xa134>
   1b88c:	mov	sp, fp
   1b890:	pop	{fp, pc}
   1b894:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b898:	add	fp, sp, #28
   1b89c:	sub	sp, sp, #60	; 0x3c
   1b8a0:	mvn	r4, #0
   1b8a4:	cmp	r3, #0
   1b8a8:	bmi	1bacc <__assert_fail@plt+0xa36c>
   1b8ac:	mov	r6, r3
   1b8b0:	mov	r7, r2
   1b8b4:	cmp	r3, r2
   1b8b8:	bgt	1bacc <__assert_fail@plt+0xa36c>
   1b8bc:	mov	r5, r0
   1b8c0:	ldr	r0, [fp, #8]
   1b8c4:	str	r1, [sp, #44]	; 0x2c
   1b8c8:	movw	r1, #0
   1b8cc:	mov	r8, r7
   1b8d0:	ldr	r4, [r5]
   1b8d4:	movt	r1, #0
   1b8d8:	add	r0, r0, r6
   1b8dc:	cmp	r0, r7
   1b8e0:	bicle	r8, r0, r0, asr #31
   1b8e4:	movw	r0, #0
   1b8e8:	movt	r0, #0
   1b8ec:	orrs	r9, r1, r0
   1b8f0:	beq	1b8fc <__assert_fail@plt+0xa19c>
   1b8f4:	add	r0, r4, #136	; 0x88
   1b8f8:	bl	1146c <pthread_mutex_lock@plt>
   1b8fc:	ldrb	r0, [r5, #28]
   1b900:	ldr	r2, [fp, #16]
   1b904:	cmp	r8, r6
   1b908:	ubfx	r1, r0, #5, #2
   1b90c:	str	r4, [sp, #36]	; 0x24
   1b910:	str	r6, [fp, #-36]	; 0xffffffdc
   1b914:	str	r1, [sp, #40]	; 0x28
   1b918:	ble	1b9b8 <__assert_fail@plt+0xa258>
   1b91c:	tst	r0, #8
   1b920:	bne	1b9b8 <__assert_fail@plt+0xa258>
   1b924:	ldr	r6, [r5, #16]
   1b928:	cmp	r6, #0
   1b92c:	beq	1b9b8 <__assert_fail@plt+0xa258>
   1b930:	ldr	r4, [r5]
   1b934:	mov	sl, r2
   1b938:	mov	r0, r6
   1b93c:	mov	r1, #0
   1b940:	mov	r2, #256	; 0x100
   1b944:	bl	11670 <memset@plt>
   1b948:	ldr	r1, [r4, #36]	; 0x24
   1b94c:	mov	r0, r5
   1b950:	mov	r2, r6
   1b954:	bl	17f84 <__assert_fail@plt+0x6824>
   1b958:	ldr	r0, [r4, #36]	; 0x24
   1b95c:	ldr	r1, [r4, #40]	; 0x28
   1b960:	cmp	r0, r1
   1b964:	beq	1b978 <__assert_fail@plt+0xa218>
   1b968:	mov	r0, r5
   1b96c:	mov	r2, r6
   1b970:	bl	17f84 <__assert_fail@plt+0x6824>
   1b974:	ldr	r0, [r4, #36]	; 0x24
   1b978:	ldr	r1, [r4, #44]	; 0x2c
   1b97c:	cmp	r0, r1
   1b980:	beq	1b994 <__assert_fail@plt+0xa234>
   1b984:	mov	r0, r5
   1b988:	mov	r2, r6
   1b98c:	bl	17f84 <__assert_fail@plt+0x6824>
   1b990:	ldr	r0, [r4, #36]	; 0x24
   1b994:	ldr	r1, [r4, #48]	; 0x30
   1b998:	cmp	r0, r1
   1b99c:	movne	r0, r5
   1b9a0:	movne	r2, r6
   1b9a4:	blne	17f84 <__assert_fail@plt+0x6824>
   1b9a8:	ldrb	r0, [r5, #28]
   1b9ac:	mov	r2, sl
   1b9b0:	orr	r0, r0, #8
   1b9b4:	strb	r0, [r5, #28]
   1b9b8:	str	r9, [fp, #-40]	; 0xffffffd8
   1b9bc:	mov	sl, #1
   1b9c0:	mov	r9, #0
   1b9c4:	cmp	r2, #0
   1b9c8:	str	r5, [fp, #-32]	; 0xffffffe0
   1b9cc:	beq	1ba20 <__assert_fail@plt+0xa2c0>
   1b9d0:	ldr	r4, [fp, #-36]	; 0xffffffdc
   1b9d4:	ands	r1, r0, #16
   1b9d8:	bne	1ba58 <__assert_fail@plt+0xa2f8>
   1b9dc:	and	r0, r0, #6
   1b9e0:	cmp	r0, #4
   1b9e4:	bne	1ba48 <__assert_fail@plt+0xa2e8>
   1b9e8:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1b9ec:	ldr	sl, [r2]
   1b9f0:	ldr	r0, [r0, #24]
   1b9f4:	cmp	sl, r0
   1b9f8:	bhi	1ba50 <__assert_fail@plt+0xa2f0>
   1b9fc:	cmp	sl, #1
   1ba00:	bge	1ba54 <__assert_fail@plt+0xa2f4>
   1ba04:	mov	sl, #1
   1ba08:	mov	r9, #0
   1ba0c:	lsl	r0, sl, #3
   1ba10:	bl	2e08c <__assert_fail@plt+0x1c92c>
   1ba14:	cmp	r0, #0
   1ba18:	bne	1ba68 <__assert_fail@plt+0xa308>
   1ba1c:	b	1ba34 <__assert_fail@plt+0xa2d4>
   1ba20:	ldr	r4, [fp, #-36]	; 0xffffffdc
   1ba24:	lsl	r0, sl, #3
   1ba28:	bl	2e08c <__assert_fail@plt+0x1c92c>
   1ba2c:	cmp	r0, #0
   1ba30:	bne	1ba68 <__assert_fail@plt+0xa308>
   1ba34:	ldr	r5, [fp, #-40]	; 0xffffffd8
   1ba38:	mvn	r4, #1
   1ba3c:	cmp	r5, #0
   1ba40:	bne	1bac0 <__assert_fail@plt+0xa360>
   1ba44:	b	1bacc <__assert_fail@plt+0xa36c>
   1ba48:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1ba4c:	ldr	r0, [r0, #24]
   1ba50:	add	sl, r0, #1
   1ba54:	mov	r9, r2
   1ba58:	lsl	r0, sl, #3
   1ba5c:	bl	2e08c <__assert_fail@plt+0x1c92c>
   1ba60:	cmp	r0, #0
   1ba64:	beq	1ba34 <__assert_fail@plt+0xa2d4>
   1ba68:	mov	r6, r0
   1ba6c:	ldr	r0, [fp, #12]
   1ba70:	str	r8, [sp]
   1ba74:	ldr	r1, [sp, #44]	; 0x2c
   1ba78:	mov	r2, r7
   1ba7c:	mov	r3, r4
   1ba80:	stmib	sp, {r0, sl}
   1ba84:	ldr	r0, [sp, #40]	; 0x28
   1ba88:	str	r6, [sp, #12]
   1ba8c:	str	r0, [sp, #16]
   1ba90:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1ba94:	bl	18fb0 <__assert_fail@plt+0x7850>
   1ba98:	cmp	r0, #0
   1ba9c:	beq	1bad8 <__assert_fail@plt+0xa378>
   1baa0:	cmp	r0, #1
   1baa4:	mvn	r4, #1
   1baa8:	mvneq	r4, #0
   1baac:	ldr	r5, [fp, #-40]	; 0xffffffd8
   1bab0:	mov	r0, r6
   1bab4:	bl	144c0 <__assert_fail@plt+0x2d60>
   1bab8:	cmp	r5, #0
   1babc:	beq	1bacc <__assert_fail@plt+0xa36c>
   1bac0:	ldr	r0, [sp, #36]	; 0x24
   1bac4:	add	r0, r0, #136	; 0x88
   1bac8:	bl	113b8 <pthread_mutex_unlock@plt>
   1bacc:	mov	r0, r4
   1bad0:	sub	sp, fp, #28
   1bad4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1bad8:	cmp	r9, #0
   1badc:	beq	1bdc0 <__assert_fail@plt+0xa660>
   1bae0:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1bae4:	add	r8, sl, #1
   1bae8:	ldrb	r0, [r0, #28]
   1baec:	ubfx	r0, r0, #1, #2
   1baf0:	cmp	r0, #1
   1baf4:	beq	1bb44 <__assert_fail@plt+0xa3e4>
   1baf8:	cmp	r0, #0
   1bafc:	bne	1bb70 <__assert_fail@plt+0xa410>
   1bb00:	lsl	r5, r8, #2
   1bb04:	mov	r0, r5
   1bb08:	bl	2e08c <__assert_fail@plt+0x1c92c>
   1bb0c:	mov	r7, #0
   1bb10:	cmp	r0, #0
   1bb14:	str	r0, [r9, #4]
   1bb18:	beq	1bda4 <__assert_fail@plt+0xa644>
   1bb1c:	mov	r0, r5
   1bb20:	bl	2e08c <__assert_fail@plt+0x1c92c>
   1bb24:	cmp	r0, #0
   1bb28:	str	r0, [r9, #8]
   1bb2c:	beq	1be40 <__assert_fail@plt+0xa6e0>
   1bb30:	str	r8, [r9]
   1bb34:	mov	lr, #1
   1bb38:	cmp	sl, #1
   1bb3c:	bge	1bb80 <__assert_fail@plt+0xa420>
   1bb40:	b	1bb60 <__assert_fail@plt+0xa400>
   1bb44:	ldr	r0, [r9]
   1bb48:	mov	lr, #1
   1bb4c:	cmp	r8, r0
   1bb50:	bhi	1bde8 <__assert_fail@plt+0xa688>
   1bb54:	mov	r8, r0
   1bb58:	cmp	sl, #1
   1bb5c:	bge	1bb80 <__assert_fail@plt+0xa420>
   1bb60:	mov	sl, #0
   1bb64:	cmp	sl, r8
   1bb68:	bcc	1bd80 <__assert_fail@plt+0xa620>
   1bb6c:	b	1bda0 <__assert_fail@plt+0xa640>
   1bb70:	ldr	r8, [r9]
   1bb74:	mov	lr, #2
   1bb78:	cmp	sl, #1
   1bb7c:	blt	1bb60 <__assert_fail@plt+0xa400>
   1bb80:	ldr	r5, [r9, #4]
   1bb84:	ldr	r4, [r9, #8]
   1bb88:	mov	r2, #0
   1bb8c:	cmp	sl, #3
   1bb90:	str	r6, [sp, #44]	; 0x2c
   1bb94:	bhi	1bc28 <__assert_fail@plt+0xa4c8>
   1bb98:	tst	sl, #1
   1bb9c:	mov	r3, r2
   1bba0:	beq	1bbbc <__assert_fail@plt+0xa45c>
   1bba4:	ldr	r0, [sp, #44]	; 0x2c
   1bba8:	orr	r3, r2, #1
   1bbac:	ldr	r1, [r0, r2, lsl #3]!
   1bbb0:	str	r1, [r5, r2, lsl #2]
   1bbb4:	ldr	r0, [r0, #4]
   1bbb8:	str	r0, [r4, r2, lsl #2]
   1bbbc:	orr	r0, r2, #1
   1bbc0:	cmp	sl, r0
   1bbc4:	beq	1bd6c <__assert_fail@plt+0xa60c>
   1bbc8:	ldr	r7, [sp, #44]	; 0x2c
   1bbcc:	add	r2, r3, #1
   1bbd0:	sub	r0, sl, r3
   1bbd4:	mov	r6, #0
   1bbd8:	add	r1, r5, r2, lsl #2
   1bbdc:	add	r2, r4, r2, lsl #2
   1bbe0:	add	ip, r7, r3, lsl #3
   1bbe4:	add	r7, ip, #12
   1bbe8:	ldr	r4, [r7, #-12]
   1bbec:	add	r5, r1, r6
   1bbf0:	subs	r0, r0, #2
   1bbf4:	str	r4, [r5, #-4]
   1bbf8:	add	r4, ip, r6, lsl #1
   1bbfc:	add	r5, r2, r6
   1bc00:	ldr	r3, [r4, #4]
   1bc04:	str	r3, [r5, #-4]
   1bc08:	ldr	r3, [r4, #8]
   1bc0c:	str	r3, [r1, r6]
   1bc10:	ldr	r3, [r7]
   1bc14:	add	r7, r7, #16
   1bc18:	str	r3, [r2, r6]
   1bc1c:	add	r6, r6, #8
   1bc20:	bne	1bbe8 <__assert_fail@plt+0xa488>
   1bc24:	b	1bd6c <__assert_fail@plt+0xa60c>
   1bc28:	ldr	r0, [sp, #44]	; 0x2c
   1bc2c:	str	lr, [sp, #40]	; 0x28
   1bc30:	add	lr, r4, sl, lsl #2
   1bc34:	add	r6, r5, sl, lsl #2
   1bc38:	mov	r8, #0
   1bc3c:	mov	r1, #0
   1bc40:	mov	r3, #0
   1bc44:	mov	r2, #0
   1bc48:	add	r7, r0, sl, lsl #3
   1bc4c:	cmp	r0, lr
   1bc50:	movwcc	r8, #1
   1bc54:	cmp	r7, r4
   1bc58:	movwhi	r1, #1
   1bc5c:	cmp	r0, r6
   1bc60:	mov	r0, #0
   1bc64:	movwcc	r3, #1
   1bc68:	cmp	r7, r5
   1bc6c:	mov	r7, #0
   1bc70:	movwhi	r7, #1
   1bc74:	cmp	r4, r6
   1bc78:	mov	r6, #0
   1bc7c:	movwcc	r6, #1
   1bc80:	cmp	r5, lr
   1bc84:	movwcc	r0, #1
   1bc88:	tst	r0, r6
   1bc8c:	bne	1bd18 <__assert_fail@plt+0xa5b8>
   1bc90:	ands	r0, r7, r3
   1bc94:	bne	1bd18 <__assert_fail@plt+0xa5b8>
   1bc98:	ldr	lr, [sp, #40]	; 0x28
   1bc9c:	ands	r0, r1, r8
   1bca0:	bne	1bb98 <__assert_fail@plt+0xa438>
   1bca4:	bic	r0, sl, #3
   1bca8:	mov	r1, #1
   1bcac:	str	r4, [sp, #32]
   1bcb0:	str	r0, [sp, #28]
   1bcb4:	subs	r0, r0, #4
   1bcb8:	add	r0, r1, r0, lsr #2
   1bcbc:	and	r1, r0, #1
   1bcc0:	str	r1, [sp, #24]
   1bcc4:	beq	1bd2c <__assert_fail@plt+0xa5cc>
   1bcc8:	ldr	r6, [sp, #44]	; 0x2c
   1bccc:	sub	r7, r0, r1
   1bcd0:	mov	r8, r4
   1bcd4:	mov	r3, #0
   1bcd8:	mov	r1, #32
   1bcdc:	mov	r4, #64	; 0x40
   1bce0:	mov	lr, r5
   1bce4:	add	ip, r6, #32
   1bce8:	vld2.32	{d16-d19}, [r6], r4
   1bcec:	add	r2, lr, #16
   1bcf0:	add	r0, r8, #16
   1bcf4:	subs	r7, r7, #2
   1bcf8:	add	r3, r3, #8
   1bcfc:	vst1.32	{d16-d17}, [lr], r1
   1bd00:	vst1.32	{d18-d19}, [r8], r1
   1bd04:	vld2.32	{d16-d19}, [ip]
   1bd08:	vst1.32	{d16-d17}, [r2]
   1bd0c:	vst1.32	{d18-d19}, [r0]
   1bd10:	bne	1bce4 <__assert_fail@plt+0xa584>
   1bd14:	b	1bd30 <__assert_fail@plt+0xa5d0>
   1bd18:	ldr	lr, [sp, #40]	; 0x28
   1bd1c:	tst	sl, #1
   1bd20:	mov	r3, r2
   1bd24:	bne	1bba4 <__assert_fail@plt+0xa444>
   1bd28:	b	1bbbc <__assert_fail@plt+0xa45c>
   1bd2c:	mov	r3, #0
   1bd30:	ldr	r0, [sp, #24]
   1bd34:	ldr	lr, [sp, #40]	; 0x28
   1bd38:	ldr	r4, [sp, #32]
   1bd3c:	cmp	r0, #0
   1bd40:	beq	1bd60 <__assert_fail@plt+0xa600>
   1bd44:	ldr	r0, [sp, #44]	; 0x2c
   1bd48:	add	r0, r0, r3, lsl #3
   1bd4c:	vld2.32	{d16-d19}, [r0]
   1bd50:	add	r0, r5, r3, lsl #2
   1bd54:	vst1.32	{d16-d17}, [r0]
   1bd58:	add	r0, r4, r3, lsl #2
   1bd5c:	vst1.32	{d18-d19}, [r0]
   1bd60:	ldr	r2, [sp, #28]
   1bd64:	cmp	sl, r2
   1bd68:	bne	1bb98 <__assert_fail@plt+0xa438>
   1bd6c:	ldr	r8, [r9]
   1bd70:	ldr	r4, [fp, #-36]	; 0xffffffdc
   1bd74:	ldr	r6, [sp, #44]	; 0x2c
   1bd78:	cmp	sl, r8
   1bd7c:	bcs	1bda0 <__assert_fail@plt+0xa640>
   1bd80:	ldmib	r9, {r0, r1}
   1bd84:	mvn	r2, #0
   1bd88:	str	r2, [r1, sl, lsl #2]
   1bd8c:	str	r2, [r0, sl, lsl #2]
   1bd90:	add	sl, sl, #1
   1bd94:	ldr	r3, [r9]
   1bd98:	cmp	sl, r3
   1bd9c:	bcc	1bd88 <__assert_fail@plt+0xa628>
   1bda0:	mov	r7, lr
   1bda4:	ldr	r1, [fp, #-32]	; 0xffffffe0
   1bda8:	cmp	r7, #0
   1bdac:	ldrb	r0, [r1, #28]
   1bdb0:	and	r0, r0, #249	; 0xf9
   1bdb4:	orr	r0, r0, r7, lsl #1
   1bdb8:	strb	r0, [r1, #28]
   1bdbc:	beq	1bde0 <__assert_fail@plt+0xa680>
   1bdc0:	ldr	r0, [fp, #20]
   1bdc4:	cmp	r0, #0
   1bdc8:	beq	1bdd8 <__assert_fail@plt+0xa678>
   1bdcc:	ldr	r0, [r6, #4]
   1bdd0:	sub	r4, r0, r4
   1bdd4:	b	1baac <__assert_fail@plt+0xa34c>
   1bdd8:	ldr	r4, [r6]
   1bddc:	b	1baac <__assert_fail@plt+0xa34c>
   1bde0:	mvn	r4, #1
   1bde4:	b	1baac <__assert_fail@plt+0xa34c>
   1bde8:	ldr	r0, [r9, #4]
   1bdec:	lsl	r1, r8, #2
   1bdf0:	str	r6, [sp, #44]	; 0x2c
   1bdf4:	mov	r6, r1
   1bdf8:	bl	2e0bc <__assert_fail@plt+0x1c95c>
   1bdfc:	mov	r7, #0
   1be00:	cmp	r0, #0
   1be04:	beq	1be4c <__assert_fail@plt+0xa6ec>
   1be08:	mov	r5, r0
   1be0c:	ldr	r0, [r9, #8]
   1be10:	mov	r1, r6
   1be14:	bl	2e0bc <__assert_fail@plt+0x1c95c>
   1be18:	cmp	r0, #0
   1be1c:	beq	1be54 <__assert_fail@plt+0xa6f4>
   1be20:	ldr	r6, [sp, #44]	; 0x2c
   1be24:	str	r8, [r9]
   1be28:	str	r5, [r9, #4]
   1be2c:	str	r0, [r9, #8]
   1be30:	mov	lr, #1
   1be34:	cmp	sl, #1
   1be38:	bge	1bb80 <__assert_fail@plt+0xa420>
   1be3c:	b	1bb60 <__assert_fail@plt+0xa400>
   1be40:	ldr	r0, [r9, #4]
   1be44:	bl	144c0 <__assert_fail@plt+0x2d60>
   1be48:	b	1bda4 <__assert_fail@plt+0xa644>
   1be4c:	ldr	r6, [sp, #44]	; 0x2c
   1be50:	b	1bda4 <__assert_fail@plt+0xa644>
   1be54:	mov	r0, r5
   1be58:	bl	144c0 <__assert_fail@plt+0x2d60>
   1be5c:	ldr	r6, [sp, #44]	; 0x2c
   1be60:	b	1bda4 <__assert_fail@plt+0xa644>
   1be64:	push	{fp, lr}
   1be68:	mov	fp, sp
   1be6c:	sub	sp, sp, #16
   1be70:	mov	ip, #0
   1be74:	str	r2, [sp, #4]
   1be78:	str	ip, [sp, #12]
   1be7c:	ldr	ip, [fp, #12]
   1be80:	str	ip, [sp, #8]
   1be84:	ldr	ip, [fp, #8]
   1be88:	str	ip, [sp]
   1be8c:	bl	1b894 <__assert_fail@plt+0xa134>
   1be90:	mov	sp, fp
   1be94:	pop	{fp, pc}
   1be98:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1be9c:	add	fp, sp, #28
   1bea0:	sub	sp, sp, #20
   1bea4:	ldr	r4, [fp, #8]
   1bea8:	mov	r8, r1
   1beac:	mov	r1, r0
   1beb0:	mov	r6, r2
   1beb4:	orr	r0, r4, r2
   1beb8:	ldr	r2, [fp, #20]
   1bebc:	orrs	r0, r0, r2
   1bec0:	bmi	1bf80 <__assert_fail@plt+0xa820>
   1bec4:	adds	sl, r6, r4
   1bec8:	bvs	1bf80 <__assert_fail@plt+0xa820>
   1becc:	mov	r5, #0
   1bed0:	cmp	r4, #1
   1bed4:	blt	1bf2c <__assert_fail@plt+0xa7cc>
   1bed8:	mov	r9, r3
   1bedc:	cmp	r6, #1
   1bee0:	blt	1bf34 <__assert_fail@plt+0xa7d4>
   1bee4:	mov	r0, sl
   1bee8:	mov	r5, r1
   1beec:	bl	2e08c <__assert_fail@plt+0x1c92c>
   1bef0:	cmp	r0, #0
   1bef4:	beq	1bf80 <__assert_fail@plt+0xa820>
   1bef8:	mov	r1, r8
   1befc:	mov	r2, r6
   1bf00:	mov	r7, r0
   1bf04:	bl	11484 <memcpy@plt>
   1bf08:	add	r0, r7, r6
   1bf0c:	mov	r1, r9
   1bf10:	mov	r2, r4
   1bf14:	bl	11484 <memcpy@plt>
   1bf18:	ldr	r2, [fp, #20]
   1bf1c:	mov	r1, r5
   1bf20:	mov	r4, r7
   1bf24:	mov	r5, #0
   1bf28:	b	1bf3c <__assert_fail@plt+0xa7dc>
   1bf2c:	mov	r7, r8
   1bf30:	b	1bf38 <__assert_fail@plt+0xa7d8>
   1bf34:	mov	r7, r9
   1bf38:	mov	r4, #0
   1bf3c:	ldr	r0, [fp, #16]
   1bf40:	ldr	r3, [fp, #12]
   1bf44:	mov	r6, #1
   1bf48:	str	r2, [sp, #4]
   1bf4c:	mov	r2, sl
   1bf50:	str	r5, [sp]
   1bf54:	str	r6, [sp, #12]
   1bf58:	str	r0, [sp, #8]
   1bf5c:	mov	r0, r1
   1bf60:	mov	r1, r7
   1bf64:	bl	1b894 <__assert_fail@plt+0xa134>
   1bf68:	mov	r5, r0
   1bf6c:	mov	r0, r4
   1bf70:	bl	144c0 <__assert_fail@plt+0x2d60>
   1bf74:	mov	r0, r5
   1bf78:	sub	sp, fp, #28
   1bf7c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1bf80:	mvn	r0, #1
   1bf84:	sub	sp, fp, #28
   1bf88:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1bf8c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1bf90:	add	fp, sp, #28
   1bf94:	sub	sp, sp, #20
   1bf98:	ldr	r4, [fp, #8]
   1bf9c:	mov	r8, r1
   1bfa0:	mov	r1, r0
   1bfa4:	mov	r6, r2
   1bfa8:	orr	r0, r4, r2
   1bfac:	ldr	r2, [fp, #24]
   1bfb0:	orrs	r0, r0, r2
   1bfb4:	bmi	1c074 <__assert_fail@plt+0xa914>
   1bfb8:	adds	sl, r6, r4
   1bfbc:	bvs	1c074 <__assert_fail@plt+0xa914>
   1bfc0:	mov	r5, #0
   1bfc4:	cmp	r4, #1
   1bfc8:	blt	1c020 <__assert_fail@plt+0xa8c0>
   1bfcc:	mov	r9, r3
   1bfd0:	cmp	r6, #1
   1bfd4:	blt	1c028 <__assert_fail@plt+0xa8c8>
   1bfd8:	mov	r0, sl
   1bfdc:	mov	r5, r1
   1bfe0:	bl	2e08c <__assert_fail@plt+0x1c92c>
   1bfe4:	cmp	r0, #0
   1bfe8:	beq	1c074 <__assert_fail@plt+0xa914>
   1bfec:	mov	r1, r8
   1bff0:	mov	r2, r6
   1bff4:	mov	r7, r0
   1bff8:	bl	11484 <memcpy@plt>
   1bffc:	add	r0, r7, r6
   1c000:	mov	r1, r9
   1c004:	mov	r2, r4
   1c008:	bl	11484 <memcpy@plt>
   1c00c:	ldr	r2, [fp, #24]
   1c010:	mov	r1, r5
   1c014:	mov	r4, r7
   1c018:	mov	r5, #0
   1c01c:	b	1c030 <__assert_fail@plt+0xa8d0>
   1c020:	mov	r7, r8
   1c024:	b	1c02c <__assert_fail@plt+0xa8cc>
   1c028:	mov	r7, r9
   1c02c:	mov	r4, #0
   1c030:	ldr	r0, [fp, #20]
   1c034:	ldr	r6, [fp, #16]
   1c038:	ldr	r3, [fp, #12]
   1c03c:	str	r2, [sp, #4]
   1c040:	mov	r2, sl
   1c044:	str	r5, [sp, #12]
   1c048:	str	r0, [sp, #8]
   1c04c:	mov	r0, r1
   1c050:	mov	r1, r7
   1c054:	str	r6, [sp]
   1c058:	bl	1b894 <__assert_fail@plt+0xa134>
   1c05c:	mov	r5, r0
   1c060:	mov	r0, r4
   1c064:	bl	144c0 <__assert_fail@plt+0x2d60>
   1c068:	mov	r0, r5
   1c06c:	sub	sp, fp, #28
   1c070:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c074:	mvn	r0, #1
   1c078:	sub	sp, fp, #28
   1c07c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c080:	ldrb	ip, [r0, #28]
   1c084:	cmp	r2, #0
   1c088:	bic	ip, ip, #6
   1c08c:	orrne	ip, ip, #2
   1c090:	strb	ip, [r0, #28]
   1c094:	ldr	r0, [sp]
   1c098:	moveq	r0, r2
   1c09c:	cmp	r2, #0
   1c0a0:	moveq	r3, r2
   1c0a4:	stm	r1, {r2, r3}
   1c0a8:	str	r0, [r1, #8]
   1c0ac:	bx	lr
   1c0b0:	push	{r4, sl, fp, lr}
   1c0b4:	add	fp, sp, #8
   1c0b8:	mov	r4, r0
   1c0bc:	ldr	r0, [r0, #24]
   1c0c0:	bl	144c0 <__assert_fail@plt+0x2d60>
   1c0c4:	ldr	r0, [r4, #36]	; 0x24
   1c0c8:	bl	144c0 <__assert_fail@plt+0x2d60>
   1c0cc:	ldr	r0, [r4, #40]	; 0x28
   1c0d0:	add	r1, r4, #4
   1c0d4:	cmp	r0, r1
   1c0d8:	beq	1c0ec <__assert_fail@plt+0xa98c>
   1c0dc:	ldr	r0, [r0, #8]
   1c0e0:	bl	144c0 <__assert_fail@plt+0x2d60>
   1c0e4:	ldr	r0, [r4, #40]	; 0x28
   1c0e8:	bl	144c0 <__assert_fail@plt+0x2d60>
   1c0ec:	ldr	r0, [r4, #12]
   1c0f0:	bl	144c0 <__assert_fail@plt+0x2d60>
   1c0f4:	ldr	r0, [r4, #48]	; 0x30
   1c0f8:	bl	144c0 <__assert_fail@plt+0x2d60>
   1c0fc:	ldr	r0, [r4, #44]	; 0x2c
   1c100:	bl	144c0 <__assert_fail@plt+0x2d60>
   1c104:	mov	r0, r4
   1c108:	pop	{r4, sl, fp, lr}
   1c10c:	b	144c0 <__assert_fail@plt+0x2d60>
   1c110:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c114:	add	fp, sp, #28
   1c118:	sub	sp, sp, #108	; 0x6c
   1c11c:	mov	r3, r0
   1c120:	ldrb	r0, [r0, #74]	; 0x4a
   1c124:	ldr	r9, [r3, #36]	; 0x24
   1c128:	ldr	r1, [r3, #48]	; 0x30
   1c12c:	ldr	r8, [r3, #28]
   1c130:	str	r3, [sp, #20]
   1c134:	cmp	r9, r1
   1c138:	movgt	r9, r1
   1c13c:	cmp	r0, #0
   1c140:	bne	1c15c <__assert_fail@plt+0xa9fc>
   1c144:	ldr	r0, [r3, #64]	; 0x40
   1c148:	cmp	r0, #0
   1c14c:	bne	1c15c <__assert_fail@plt+0xa9fc>
   1c150:	ldrb	r0, [r3, #76]	; 0x4c
   1c154:	cmp	r0, #0
   1c158:	beq	1c164 <__assert_fail@plt+0xaa04>
   1c15c:	ldr	r7, [r3, #32]
   1c160:	b	1c3a0 <__assert_fail@plt+0xac40>
   1c164:	cmp	r9, r8
   1c168:	ble	1c378 <__assert_fail@plt+0xac18>
   1c16c:	add	r5, r3, #16
   1c170:	add	sl, sp, #32
   1c174:	str	r9, [sp, #16]
   1c178:	b	1c198 <__assert_fail@plt+0xaa38>
   1c17c:	mov	r8, r9
   1c180:	ldr	r9, [sp, #16]
   1c184:	mov	r3, sl
   1c188:	add	sl, sp, #32
   1c18c:	cmp	r9, r8
   1c190:	mov	r7, r8
   1c194:	ble	1c770 <__assert_fail@plt+0xb010>
   1c198:	ldr	r6, [r3, #24]
   1c19c:	ldr	r4, [r3]
   1c1a0:	add	r0, r6, r8
   1c1a4:	ldrb	r7, [r4, r0]
   1c1a8:	tst	r7, #128	; 0x80
   1c1ac:	bne	1c204 <__assert_fail@plt+0xaaa4>
   1c1b0:	mov	r0, r5
   1c1b4:	bl	114b4 <mbsinit@plt>
   1c1b8:	cmp	r0, #0
   1c1bc:	beq	1c204 <__assert_fail@plt+0xaaa4>
   1c1c0:	mov	r0, r7
   1c1c4:	bl	11724 <towupper@plt>
   1c1c8:	cmp	r0, #128	; 0x80
   1c1cc:	bcs	1c1f8 <__assert_fail@plt+0xaa98>
   1c1d0:	ldr	r3, [sp, #20]
   1c1d4:	ldr	r1, [r3, #4]
   1c1d8:	strb	r0, [r1, r8]
   1c1dc:	ldr	r1, [r3, #8]
   1c1e0:	str	r0, [r1, r8, lsl #2]
   1c1e4:	add	r8, r8, #1
   1c1e8:	cmp	r9, r8
   1c1ec:	mov	r7, r8
   1c1f0:	bgt	1c198 <__assert_fail@plt+0xaa38>
   1c1f4:	b	1c770 <__assert_fail@plt+0xb010>
   1c1f8:	ldr	r0, [sp, #20]
   1c1fc:	ldr	r4, [r0]
   1c200:	ldr	r6, [r0, #24]
   1c204:	ldm	r5, {r0, r1}
   1c208:	str	r1, [fp, #-36]	; 0xffffffdc
   1c20c:	sub	r2, r9, r8
   1c210:	mov	r3, r5
   1c214:	str	r0, [fp, #-40]	; 0xffffffd8
   1c218:	add	r0, r4, r6
   1c21c:	add	r1, r0, r8
   1c220:	add	r0, sp, #28
   1c224:	bl	2e470 <__assert_fail@plt+0x1cd10>
   1c228:	sub	r4, r0, #1
   1c22c:	mov	r6, r0
   1c230:	cmn	r4, #4
   1c234:	bhi	1c320 <__assert_fail@plt+0xabc0>
   1c238:	ldr	r0, [sp, #28]
   1c23c:	bl	11724 <towupper@plt>
   1c240:	mov	r7, r0
   1c244:	ldr	r0, [sp, #28]
   1c248:	cmp	r7, r0
   1c24c:	bne	1c270 <__assert_fail@plt+0xab10>
   1c250:	ldr	sl, [sp, #20]
   1c254:	ldr	r1, [sl]
   1c258:	ldr	r2, [sl, #24]
   1c25c:	ldr	r0, [sl, #4]
   1c260:	add	r1, r1, r2
   1c264:	add	r0, r0, r8
   1c268:	add	r1, r1, r8
   1c26c:	b	1c298 <__assert_fail@plt+0xab38>
   1c270:	mov	r0, sl
   1c274:	mov	r1, r7
   1c278:	sub	r2, fp, #40	; 0x28
   1c27c:	bl	11400 <wcrtomb@plt>
   1c280:	cmp	r6, r0
   1c284:	bne	1c380 <__assert_fail@plt+0xac20>
   1c288:	mov	r1, sl
   1c28c:	ldr	sl, [sp, #20]
   1c290:	ldr	r0, [sl, #4]
   1c294:	add	r0, r0, r8
   1c298:	mov	r2, r6
   1c29c:	bl	11484 <memcpy@plt>
   1c2a0:	ldr	r0, [sl, #8]
   1c2a4:	add	r9, r8, #1
   1c2a8:	str	r7, [r0, r8, lsl #2]
   1c2ac:	add	r7, r6, r8
   1c2b0:	cmp	r9, r7
   1c2b4:	bge	1c17c <__assert_fail@plt+0xaa1c>
   1c2b8:	add	r0, r0, r8, lsl #2
   1c2bc:	mvn	r1, #3
   1c2c0:	add	r2, r1, r6, lsl #2
   1c2c4:	mov	r1, #255	; 0xff
   1c2c8:	add	r0, r0, #4
   1c2cc:	bl	11670 <memset@plt>
   1c2d0:	sub	r0, r6, #2
   1c2d4:	ands	r1, r4, #7
   1c2d8:	add	sl, sp, #32
   1c2dc:	beq	1c2ec <__assert_fail@plt+0xab8c>
   1c2e0:	subs	r1, r1, #1
   1c2e4:	add	r9, r9, #1
   1c2e8:	bne	1c2e0 <__assert_fail@plt+0xab80>
   1c2ec:	ldr	r3, [sp, #20]
   1c2f0:	cmp	r0, #7
   1c2f4:	bcc	1c308 <__assert_fail@plt+0xaba8>
   1c2f8:	add	r0, r6, r8
   1c2fc:	sub	r0, r0, r9
   1c300:	subs	r0, r0, #8
   1c304:	bne	1c300 <__assert_fail@plt+0xaba0>
   1c308:	ldr	r9, [sp, #16]
   1c30c:	mov	r8, r7
   1c310:	cmp	r9, r8
   1c314:	mov	r7, r8
   1c318:	bgt	1c198 <__assert_fail@plt+0xaa38>
   1c31c:	b	1c770 <__assert_fail@plt+0xb010>
   1c320:	ldr	r3, [sp, #20]
   1c324:	add	r0, r6, #1
   1c328:	cmp	r0, #2
   1c32c:	bcc	1c340 <__assert_fail@plt+0xabe0>
   1c330:	ldr	r0, [r3, #36]	; 0x24
   1c334:	ldr	r1, [r3, #48]	; 0x30
   1c338:	cmp	r0, r1
   1c33c:	blt	1c38c <__assert_fail@plt+0xac2c>
   1c340:	ldr	r0, [r3, #4]
   1c344:	cmn	r6, #1
   1c348:	strb	r7, [r0, r8]
   1c34c:	ldr	r0, [r3, #8]
   1c350:	str	r7, [r0, r8, lsl #2]
   1c354:	add	r8, r8, #1
   1c358:	bne	1c18c <__assert_fail@plt+0xaa2c>
   1c35c:	ldr	r0, [fp, #-40]	; 0xffffffd8
   1c360:	ldr	r1, [fp, #-36]	; 0xffffffdc
   1c364:	stm	r5, {r0, r1}
   1c368:	cmp	r9, r8
   1c36c:	mov	r7, r8
   1c370:	bgt	1c198 <__assert_fail@plt+0xaa38>
   1c374:	b	1c770 <__assert_fail@plt+0xb010>
   1c378:	mov	r7, r8
   1c37c:	b	1c770 <__assert_fail@plt+0xb010>
   1c380:	ldr	r3, [sp, #20]
   1c384:	mov	r7, r8
   1c388:	b	1c3a8 <__assert_fail@plt+0xac48>
   1c38c:	ldr	r0, [fp, #-40]	; 0xffffffd8
   1c390:	ldr	r1, [fp, #-36]	; 0xffffffdc
   1c394:	mov	r7, r8
   1c398:	stm	r5, {r0, r1}
   1c39c:	b	1c770 <__assert_fail@plt+0xb010>
   1c3a0:	cmp	r8, r9
   1c3a4:	bge	1c770 <__assert_fail@plt+0xb010>
   1c3a8:	mov	r4, r3
   1c3ac:	mov	sl, r9
   1c3b0:	sub	r2, r9, r8
   1c3b4:	ldr	r0, [r4, #16]!
   1c3b8:	ldr	r1, [r4, #4]
   1c3bc:	str	r0, [fp, #-40]	; 0xffffffd8
   1c3c0:	str	r1, [fp, #-36]	; 0xffffffdc
   1c3c4:	ldr	r0, [r4, #48]	; 0x30
   1c3c8:	cmp	r0, #0
   1c3cc:	bne	1c4ec <__assert_fail@plt+0xad8c>
   1c3d0:	ldr	r0, [r3]
   1c3d4:	ldr	r1, [r3, #24]
   1c3d8:	mov	r9, r7
   1c3dc:	add	r0, r0, r1
   1c3e0:	add	r7, r0, r7
   1c3e4:	add	r0, sp, #24
   1c3e8:	mov	r1, r7
   1c3ec:	mov	r3, r4
   1c3f0:	bl	2e470 <__assert_fail@plt+0x1cd10>
   1c3f4:	mov	r5, r0
   1c3f8:	sub	r0, r0, #1
   1c3fc:	cmn	r0, #4
   1c400:	str	r0, [sp, #16]
   1c404:	bhi	1c540 <__assert_fail@plt+0xade0>
   1c408:	ldr	r0, [sp, #24]
   1c40c:	bl	11724 <towupper@plt>
   1c410:	mov	r6, r0
   1c414:	ldr	r0, [sp, #24]
   1c418:	cmp	r6, r0
   1c41c:	bne	1c42c <__assert_fail@plt+0xaccc>
   1c420:	ldr	r4, [sp, #20]
   1c424:	mov	r1, r7
   1c428:	b	1c44c <__assert_fail@plt+0xacec>
   1c42c:	add	r0, sp, #32
   1c430:	sub	r2, fp, #40	; 0x28
   1c434:	mov	r1, r6
   1c438:	bl	11400 <wcrtomb@plt>
   1c43c:	cmp	r0, r5
   1c440:	bne	1c5c0 <__assert_fail@plt+0xae60>
   1c444:	ldr	r4, [sp, #20]
   1c448:	add	r1, sp, #32
   1c44c:	ldr	r0, [r4, #4]
   1c450:	add	r0, r0, r8
   1c454:	mov	r2, r5
   1c458:	bl	11484 <memcpy@plt>
   1c45c:	ldrb	r0, [r4, #76]	; 0x4c
   1c460:	mov	r7, r9
   1c464:	mov	r9, sl
   1c468:	mov	r3, r4
   1c46c:	cmp	r0, #0
   1c470:	bne	1c674 <__assert_fail@plt+0xaf14>
   1c474:	ldr	r0, [r3, #8]
   1c478:	add	r4, r5, r8
   1c47c:	add	r7, r5, r7
   1c480:	str	r6, [r0, r8, lsl #2]
   1c484:	add	r6, r8, #1
   1c488:	cmp	r6, r4
   1c48c:	bge	1c4e4 <__assert_fail@plt+0xad84>
   1c490:	mvn	r1, #3
   1c494:	add	r0, r0, r6, lsl #2
   1c498:	add	r2, r1, r5, lsl #2
   1c49c:	mov	r1, #255	; 0xff
   1c4a0:	bl	11670 <memset@plt>
   1c4a4:	ldr	r1, [sp, #16]
   1c4a8:	sub	r0, r5, #2
   1c4ac:	ands	r1, r1, #7
   1c4b0:	beq	1c4c0 <__assert_fail@plt+0xad60>
   1c4b4:	subs	r1, r1, #1
   1c4b8:	add	r6, r6, #1
   1c4bc:	bne	1c4b4 <__assert_fail@plt+0xad54>
   1c4c0:	ldr	r3, [sp, #20]
   1c4c4:	cmp	r0, #7
   1c4c8:	bcc	1c4dc <__assert_fail@plt+0xad7c>
   1c4cc:	add	r0, r5, r8
   1c4d0:	sub	r0, r0, r6
   1c4d4:	subs	r0, r0, #8
   1c4d8:	bne	1c4d4 <__assert_fail@plt+0xad74>
   1c4dc:	mov	r8, r4
   1c4e0:	b	1c3a0 <__assert_fail@plt+0xac40>
   1c4e4:	mov	r8, r6
   1c4e8:	b	1c3a0 <__assert_fail@plt+0xac40>
   1c4ec:	cmp	r2, #1
   1c4f0:	mov	r9, r7
   1c4f4:	add	r7, sp, #32
   1c4f8:	ldrge	r1, [r3, #80]	; 0x50
   1c4fc:	cmpge	r1, #1
   1c500:	blt	1c3e4 <__assert_fail@plt+0xac84>
   1c504:	ldr	r7, [r3, #24]
   1c508:	ldr	r6, [r3]
   1c50c:	add	r7, r9, r7
   1c510:	add	r3, r6, r7
   1c514:	mov	r6, #0
   1c518:	add	r7, sp, #32
   1c51c:	ldrb	r5, [r3, r6]
   1c520:	ldrb	r5, [r0, r5]
   1c524:	strb	r5, [r7, r6]
   1c528:	add	r6, r6, #1
   1c52c:	cmp	r6, r2
   1c530:	bge	1c3e4 <__assert_fail@plt+0xac84>
   1c534:	cmp	r6, r1
   1c538:	blt	1c51c <__assert_fail@plt+0xadbc>
   1c53c:	b	1c3e4 <__assert_fail@plt+0xac84>
   1c540:	ldr	r3, [sp, #20]
   1c544:	add	r0, r5, #1
   1c548:	cmp	r0, #2
   1c54c:	bcc	1c560 <__assert_fail@plt+0xae00>
   1c550:	ldr	r0, [r3, #36]	; 0x24
   1c554:	ldr	r1, [r3, #48]	; 0x30
   1c558:	cmp	r0, r1
   1c55c:	blt	1c760 <__assert_fail@plt+0xb000>
   1c560:	ldr	r2, [r3, #24]
   1c564:	ldr	r0, [r3]
   1c568:	ldr	r1, [r3, #64]	; 0x40
   1c56c:	mov	r7, r9
   1c570:	add	r2, r2, r9
   1c574:	cmp	r1, #0
   1c578:	ldrb	r0, [r0, r2]
   1c57c:	bne	1c9f4 <__assert_fail@plt+0xb294>
   1c580:	ldr	r1, [r3, #4]
   1c584:	mov	r9, sl
   1c588:	strb	r0, [r1, r8]
   1c58c:	ldrb	r1, [r3, #76]	; 0x4c
   1c590:	cmp	r1, #0
   1c594:	bne	1c9fc <__assert_fail@plt+0xb29c>
   1c598:	ldr	r1, [r3, #8]
   1c59c:	add	r7, r7, #1
   1c5a0:	cmn	r5, #1
   1c5a4:	str	r0, [r1, r8, lsl #2]
   1c5a8:	add	r8, r8, #1
   1c5ac:	bne	1c3a0 <__assert_fail@plt+0xac40>
   1c5b0:	ldr	r0, [fp, #-40]	; 0xffffffd8
   1c5b4:	ldr	r1, [fp, #-36]	; 0xffffffdc
   1c5b8:	stm	r4, {r0, r1}
   1c5bc:	b	1c3a0 <__assert_fail@plt+0xac40>
   1c5c0:	ldr	r3, [sp, #20]
   1c5c4:	mov	r2, r0
   1c5c8:	cmn	r0, #1
   1c5cc:	beq	1c6f0 <__assert_fail@plt+0xaf90>
   1c5d0:	ldr	r1, [r3, #36]	; 0x24
   1c5d4:	add	r0, r2, r8
   1c5d8:	cmp	r0, r1
   1c5dc:	bhi	1c760 <__assert_fail@plt+0xb000>
   1c5e0:	str	r0, [sp, #12]
   1c5e4:	ldr	r0, [r3, #12]
   1c5e8:	mov	r7, r9
   1c5ec:	cmp	r0, #0
   1c5f0:	bne	1c614 <__assert_fail@plt+0xaeb4>
   1c5f4:	lsl	r0, r1, #2
   1c5f8:	mov	r4, r2
   1c5fc:	bl	2e08c <__assert_fail@plt+0x1c92c>
   1c600:	ldr	r3, [sp, #20]
   1c604:	mov	r2, r4
   1c608:	cmp	r0, #0
   1c60c:	str	r0, [r3, #12]
   1c610:	beq	1c9e8 <__assert_fail@plt+0xb288>
   1c614:	ldrb	r1, [r3, #76]	; 0x4c
   1c618:	ldr	r9, [sp, #16]
   1c61c:	cmp	r1, #0
   1c620:	bne	1c840 <__assert_fail@plt+0xb0e0>
   1c624:	cmp	r8, #0
   1c628:	beq	1c838 <__assert_fail@plt+0xb0d8>
   1c62c:	mov	r1, #0
   1c630:	cmp	r8, #4
   1c634:	bcc	1c828 <__assert_fail@plt+0xb0c8>
   1c638:	bic	r1, r8, #3
   1c63c:	stmib	sp, {r2, r7}
   1c640:	mov	r2, #1
   1c644:	add	r3, pc, #964	; 0x3c4
   1c648:	sub	r7, r1, #4
   1c64c:	add	r2, r2, r7, lsr #2
   1c650:	cmp	r7, #12
   1c654:	and	r4, r2, #3
   1c658:	bcs	1c784 <__assert_fail@plt+0xb024>
   1c65c:	vld1.64	{d16-d17}, [r3 :128]
   1c660:	mov	sl, r4
   1c664:	mov	r3, #0
   1c668:	cmp	sl, #0
   1c66c:	bne	1c7f8 <__assert_fail@plt+0xb098>
   1c670:	b	1c818 <__assert_fail@plt+0xb0b8>
   1c674:	ldr	lr, [r3, #12]
   1c678:	mov	r1, #0
   1c67c:	cmp	r5, #4
   1c680:	bcc	1c73c <__assert_fail@plt+0xafdc>
   1c684:	vdup.32	q8, r7
   1c688:	bic	r1, r5, #3
   1c68c:	mov	r3, #1
   1c690:	mov	r9, r7
   1c694:	subs	r2, r1, #4
   1c698:	add	r2, r3, r2, lsr #2
   1c69c:	add	r3, pc, #876	; 0x36c
   1c6a0:	and	ip, r2, #1
   1c6a4:	beq	1c708 <__assert_fail@plt+0xafa8>
   1c6a8:	sub	r4, r2, ip
   1c6ac:	add	r2, pc, #860	; 0x35c
   1c6b0:	vmov.i32	q10, #4	; 0x00000004
   1c6b4:	vmov.i32	q11, #8	; 0x00000008
   1c6b8:	add	r7, lr, r8, lsl #2
   1c6bc:	mov	r3, #0
   1c6c0:	vld1.64	{d18-d19}, [r2 :128]
   1c6c4:	mov	r2, #32
   1c6c8:	vadd.i32	q12, q9, q8
   1c6cc:	vadd.i32	q9, q9, q11
   1c6d0:	add	r0, r7, #16
   1c6d4:	subs	r4, r4, #2
   1c6d8:	add	r3, r3, #8
   1c6dc:	vadd.i32	q13, q12, q10
   1c6e0:	vst1.32	{d24-d25}, [r7], r2
   1c6e4:	vst1.32	{d26-d27}, [r0]
   1c6e8:	bne	1c6c8 <__assert_fail@plt+0xaf68>
   1c6ec:	b	1c710 <__assert_fail@plt+0xafb0>
   1c6f0:	ldr	r0, [r3, #4]
   1c6f4:	mov	r1, r7
   1c6f8:	mov	r2, r5
   1c6fc:	mov	r4, r3
   1c700:	add	r0, r0, r8
   1c704:	b	1c458 <__assert_fail@plt+0xacf8>
   1c708:	vld1.64	{d18-d19}, [r3 :128]
   1c70c:	mov	r3, #0
   1c710:	cmp	ip, #0
   1c714:	beq	1c728 <__assert_fail@plt+0xafc8>
   1c718:	add	r0, r3, r8
   1c71c:	vadd.i32	q8, q9, q8
   1c720:	add	r0, lr, r0, lsl #2
   1c724:	vst1.32	{d16-d17}, [r0]
   1c728:	ldr	r3, [sp, #20]
   1c72c:	mov	r7, r9
   1c730:	cmp	r5, r1
   1c734:	mov	r9, sl
   1c738:	beq	1c474 <__assert_fail@plt+0xad14>
   1c73c:	add	r0, r8, r1
   1c740:	add	r2, r7, r1
   1c744:	sub	r4, r5, r1
   1c748:	add	r0, lr, r0, lsl #2
   1c74c:	str	r2, [r0], #4
   1c750:	add	r2, r2, #1
   1c754:	subs	r4, r4, #1
   1c758:	bne	1c74c <__assert_fail@plt+0xafec>
   1c75c:	b	1c474 <__assert_fail@plt+0xad14>
   1c760:	ldr	r0, [fp, #-40]	; 0xffffffd8
   1c764:	mov	r7, r9
   1c768:	ldr	r1, [fp, #-36]	; 0xffffffdc
   1c76c:	stm	r4, {r0, r1}
   1c770:	str	r8, [r3, #28]
   1c774:	str	r7, [r3, #32]
   1c778:	mov	r0, #0
   1c77c:	sub	sp, fp, #28
   1c780:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c784:	mov	sl, r4
   1c788:	sub	r4, r2, r4
   1c78c:	add	r2, pc, #636	; 0x27c
   1c790:	vmov.i32	q9, #12	; 0x0000000c
   1c794:	vmov.i32	q10, #8	; 0x00000008
   1c798:	vmov.i32	q11, #4	; 0x00000004
   1c79c:	vmov.i32	q12, #16	; 0x00000010
   1c7a0:	mov	r3, #0
   1c7a4:	mov	lr, #64	; 0x40
   1c7a8:	mov	r7, r0
   1c7ac:	vld1.64	{d16-d17}, [r2 :128]
   1c7b0:	mov	r2, r0
   1c7b4:	vadd.i32	q13, q8, q9
   1c7b8:	add	ip, r2, #48	; 0x30
   1c7bc:	vadd.i32	q14, q8, q10
   1c7c0:	vadd.i32	q15, q8, q11
   1c7c4:	subs	r4, r4, #4
   1c7c8:	add	r3, r3, #16
   1c7cc:	vst1.32	{d26-d27}, [ip]
   1c7d0:	vst1.32	{d16-d17}, [r7], lr
   1c7d4:	vadd.i32	q8, q8, q12
   1c7d8:	add	ip, r2, #32
   1c7dc:	add	r2, r2, #16
   1c7e0:	vst1.32	{d28-d29}, [ip]
   1c7e4:	vst1.32	{d30-d31}, [r2]
   1c7e8:	mov	r2, r7
   1c7ec:	bne	1c7b4 <__assert_fail@plt+0xb054>
   1c7f0:	cmp	sl, #0
   1c7f4:	beq	1c818 <__assert_fail@plt+0xb0b8>
   1c7f8:	vmov.i32	q9, #4	; 0x00000004
   1c7fc:	add	r2, r0, r3, lsl #2
   1c800:	rsb	r3, sl, #0
   1c804:	vadd.i32	q10, q8, q9
   1c808:	vst1.32	{d16-d17}, [r2]!
   1c80c:	adds	r3, r3, #1
   1c810:	vorr	q8, q10, q10
   1c814:	bcc	1c804 <__assert_fail@plt+0xb0a4>
   1c818:	ldr	r3, [sp, #20]
   1c81c:	ldmib	sp, {r2, r7}
   1c820:	cmp	r8, r1
   1c824:	beq	1c838 <__assert_fail@plt+0xb0d8>
   1c828:	str	r1, [r0, r1, lsl #2]
   1c82c:	add	r1, r1, #1
   1c830:	cmp	r8, r1
   1c834:	bne	1c828 <__assert_fail@plt+0xb0c8>
   1c838:	mov	r0, #1
   1c83c:	strb	r0, [r3, #76]	; 0x4c
   1c840:	ldr	r0, [r3, #4]
   1c844:	add	r1, sp, #32
   1c848:	mov	r4, r3
   1c84c:	mov	sl, r2
   1c850:	add	r0, r0, r8
   1c854:	bl	11484 <memcpy@plt>
   1c858:	ldr	r0, [r4, #8]
   1c85c:	cmp	sl, #2
   1c860:	str	r6, [r0, r8, lsl #2]
   1c864:	mov	r6, r7
   1c868:	ldr	r1, [r4, #12]
   1c86c:	str	r7, [r1, r8, lsl #2]
   1c870:	bcc	1c9a0 <__assert_fail@plt+0xb240>
   1c874:	sub	lr, sl, #1
   1c878:	mov	ip, r6
   1c87c:	mov	r2, #1
   1c880:	cmp	lr, #4
   1c884:	bcc	1c908 <__assert_fail@plt+0xb1a8>
   1c888:	add	r7, sl, r8
   1c88c:	add	r4, r8, #1
   1c890:	str	ip, [sp, #8]
   1c894:	add	r6, r0, r4, lsl #2
   1c898:	add	r3, r0, r7, lsl #2
   1c89c:	add	r4, r1, r4, lsl #2
   1c8a0:	cmp	r4, r3
   1c8a4:	addcc	r3, r1, r7, lsl #2
   1c8a8:	cmpcc	r6, r3
   1c8ac:	bcc	1c908 <__assert_fail@plt+0xb1a8>
   1c8b0:	add	r2, pc, #360	; 0x168
   1c8b4:	ldr	r3, [sp, #8]
   1c8b8:	vdup.32	q9, r9
   1c8bc:	vdup.32	q10, r5
   1c8c0:	vmov.i32	q12, #4	; 0x00000004
   1c8c4:	vmov.i8	q13, #255	; 0xff
   1c8c8:	vld1.64	{d22-d23}, [r2 :128]
   1c8cc:	vdup.32	q8, r3
   1c8d0:	bic	r3, lr, #3
   1c8d4:	orr	r2, r3, #1
   1c8d8:	mov	r7, r3
   1c8dc:	vcgt.u32	q14, q10, q11
   1c8e0:	subs	r7, r7, #4
   1c8e4:	vbsl	q14, q11, q9
   1c8e8:	vadd.i32	q11, q11, q12
   1c8ec:	vadd.i32	q14, q14, q8
   1c8f0:	vst1.32	{d28-d29}, [r4]!
   1c8f4:	vst1.32	{d26-d27}, [r6]!
   1c8f8:	bne	1c8dc <__assert_fail@plt+0xb17c>
   1c8fc:	cmp	lr, r3
   1c900:	mov	r6, ip
   1c904:	beq	1c9a0 <__assert_fail@plt+0xb240>
   1c908:	tst	sl, #1
   1c90c:	mov	r3, r2
   1c910:	bne	1c938 <__assert_fail@plt+0xb1d8>
   1c914:	cmp	r2, r5
   1c918:	mov	r3, r9
   1c91c:	add	r7, r2, r8
   1c920:	movcc	r3, r2
   1c924:	add	r3, r3, ip
   1c928:	str	r3, [r1, r7, lsl #2]
   1c92c:	mvn	r3, #0
   1c930:	str	r3, [r0, r7, lsl #2]
   1c934:	add	r3, r2, #1
   1c938:	add	r2, r2, #1
   1c93c:	mov	r6, ip
   1c940:	cmp	sl, r2
   1c944:	beq	1c9a0 <__assert_fail@plt+0xb240>
   1c948:	add	r2, r8, r3
   1c94c:	add	r2, r2, #1
   1c950:	add	r1, r1, r2, lsl #2
   1c954:	add	r0, r0, r2, lsl #2
   1c958:	mvn	r2, #0
   1c95c:	cmp	r3, r5
   1c960:	mov	r7, r9
   1c964:	movcc	r7, r3
   1c968:	add	r7, r7, r6
   1c96c:	str	r7, [r1, #-4]
   1c970:	add	r7, r3, #1
   1c974:	add	r3, r3, #2
   1c978:	str	r2, [r0, #-4]
   1c97c:	cmp	r7, r5
   1c980:	movcs	r7, r9
   1c984:	cmp	r3, sl
   1c988:	add	r7, r7, r6
   1c98c:	str	r7, [r1]
   1c990:	str	r2, [r0]
   1c994:	add	r1, r1, #8
   1c998:	add	r0, r0, #8
   1c99c:	bne	1c95c <__assert_fail@plt+0xb1fc>
   1c9a0:	ldr	r3, [sp, #20]
   1c9a4:	sub	r1, sl, r5
   1c9a8:	mov	r7, r6
   1c9ac:	ldr	r0, [r3, #48]	; 0x30
   1c9b0:	ldr	r2, [r3, #52]	; 0x34
   1c9b4:	add	r0, r0, r1
   1c9b8:	cmp	r2, r6
   1c9bc:	str	r0, [r3, #48]	; 0x30
   1c9c0:	ble	1c9d0 <__assert_fail@plt+0xb270>
   1c9c4:	ldr	r2, [r3, #56]	; 0x38
   1c9c8:	add	r1, r2, r1
   1c9cc:	str	r1, [r3, #56]	; 0x38
   1c9d0:	ldr	r9, [r3, #36]	; 0x24
   1c9d4:	ldr	r8, [sp, #12]
   1c9d8:	add	r7, r5, r7
   1c9dc:	cmp	r9, r0
   1c9e0:	movgt	r9, r0
   1c9e4:	b	1c3a0 <__assert_fail@plt+0xac40>
   1c9e8:	mov	r0, #12
   1c9ec:	sub	sp, fp, #28
   1c9f0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c9f4:	ldrb	r0, [r1, r0]
   1c9f8:	b	1c580 <__assert_fail@plt+0xae20>
   1c9fc:	ldr	r1, [r3, #12]
   1ca00:	str	r7, [r1, r8, lsl #2]
   1ca04:	b	1c598 <__assert_fail@plt+0xae38>
   1ca08:	nop	{0}
   1ca0c:	nop	{0}
   1ca10:	andeq	r0, r0, r0
   1ca14:	andeq	r0, r0, r1
   1ca18:	andeq	r0, r0, r2
   1ca1c:	andeq	r0, r0, r3
   1ca20:	andeq	r0, r0, r1
   1ca24:	andeq	r0, r0, r2
   1ca28:	andeq	r0, r0, r3
   1ca2c:	andeq	r0, r0, r4
   1ca30:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ca34:	add	fp, sp, #28
   1ca38:	sub	sp, sp, #68	; 0x44
   1ca3c:	mov	r4, r0
   1ca40:	ldr	r8, [r0, #28]
   1ca44:	ldr	r5, [r0, #36]	; 0x24
   1ca48:	ldr	r0, [r0, #48]	; 0x30
   1ca4c:	cmp	r5, r0
   1ca50:	movgt	r5, r0
   1ca54:	cmp	r5, r8
   1ca58:	ble	1cc30 <__assert_fail@plt+0xb4d0>
   1ca5c:	add	r9, r4, #16
   1ca60:	mov	r0, sp
   1ca64:	ldr	r3, [r4, #64]	; 0x40
   1ca68:	ldm	r9, {r6, sl}
   1ca6c:	sub	r2, r5, r8
   1ca70:	cmp	r3, #0
   1ca74:	bne	1cb74 <__assert_fail@plt+0xb414>
   1ca78:	ldr	r3, [r4]
   1ca7c:	ldr	r1, [r4, #24]
   1ca80:	add	r1, r3, r1
   1ca84:	add	r1, r1, r8
   1ca88:	mov	r3, r9
   1ca8c:	bl	2e470 <__assert_fail@plt+0x1cd10>
   1ca90:	mov	r7, r0
   1ca94:	add	r0, r0, #1
   1ca98:	cmp	r0, #2
   1ca9c:	bcc	1cab8 <__assert_fail@plt+0xb358>
   1caa0:	cmn	r7, #2
   1caa4:	bne	1cae4 <__assert_fail@plt+0xb384>
   1caa8:	ldr	r0, [r4, #36]	; 0x24
   1caac:	ldr	r1, [r4, #48]	; 0x30
   1cab0:	cmp	r0, r1
   1cab4:	blt	1cc2c <__assert_fail@plt+0xb4cc>
   1cab8:	ldr	r1, [r4, #24]
   1cabc:	ldr	r0, [r4]
   1cac0:	add	r1, r1, r8
   1cac4:	ldrb	r0, [r0, r1]
   1cac8:	str	r0, [sp]
   1cacc:	ldr	r1, [r4, #64]	; 0x40
   1cad0:	cmp	r1, #0
   1cad4:	bne	1cc20 <__assert_fail@plt+0xb4c0>
   1cad8:	mov	r7, #1
   1cadc:	stm	r9, {r6, sl}
   1cae0:	b	1cae8 <__assert_fail@plt+0xb388>
   1cae4:	ldr	r0, [sp]
   1cae8:	ldr	r1, [r4, #8]
   1caec:	add	sl, r7, r8
   1caf0:	add	r6, r8, #1
   1caf4:	cmp	r6, sl
   1caf8:	str	r0, [r1, r8, lsl #2]
   1cafc:	bge	1cb60 <__assert_fail@plt+0xb400>
   1cb00:	mvn	r0, #3
   1cb04:	add	r2, r0, r7, lsl #2
   1cb08:	add	r0, r1, r8, lsl #2
   1cb0c:	mov	r1, #255	; 0xff
   1cb10:	add	r0, r0, #4
   1cb14:	bl	11670 <memset@plt>
   1cb18:	sub	r1, r7, #1
   1cb1c:	sub	r0, r7, #2
   1cb20:	ands	r1, r1, #7
   1cb24:	beq	1cb34 <__assert_fail@plt+0xb3d4>
   1cb28:	subs	r1, r1, #1
   1cb2c:	add	r6, r6, #1
   1cb30:	bne	1cb28 <__assert_fail@plt+0xb3c8>
   1cb34:	cmp	r0, #7
   1cb38:	bcc	1cb4c <__assert_fail@plt+0xb3ec>
   1cb3c:	add	r0, r7, r8
   1cb40:	sub	r0, r0, r6
   1cb44:	subs	r0, r0, #8
   1cb48:	bne	1cb44 <__assert_fail@plt+0xb3e4>
   1cb4c:	mov	r8, sl
   1cb50:	mov	r0, sp
   1cb54:	cmp	r5, r8
   1cb58:	bgt	1ca64 <__assert_fail@plt+0xb304>
   1cb5c:	b	1cc30 <__assert_fail@plt+0xb4d0>
   1cb60:	mov	r8, r6
   1cb64:	mov	r0, sp
   1cb68:	cmp	r5, r8
   1cb6c:	bgt	1ca64 <__assert_fail@plt+0xb304>
   1cb70:	b	1cc30 <__assert_fail@plt+0xb4d0>
   1cb74:	cmp	r2, #1
   1cb78:	add	r1, sp, #4
   1cb7c:	blt	1ca88 <__assert_fail@plt+0xb328>
   1cb80:	ldr	r1, [r4, #80]	; 0x50
   1cb84:	cmp	r1, #1
   1cb88:	add	r1, sp, #4
   1cb8c:	blt	1ca88 <__assert_fail@plt+0xb328>
   1cb90:	ldr	r7, [r4, #24]
   1cb94:	ldm	r4, {r1, ip}
   1cb98:	cmp	r2, #2
   1cb9c:	add	r7, r8, r7
   1cba0:	ldrb	r1, [r1, r7]
   1cba4:	ldrb	r1, [r3, r1]
   1cba8:	strb	r1, [ip, r8]
   1cbac:	strb	r1, [sp, #4]
   1cbb0:	add	r1, sp, #4
   1cbb4:	blt	1ca88 <__assert_fail@plt+0xb328>
   1cbb8:	ldr	r1, [r4, #80]	; 0x50
   1cbbc:	cmp	r1, #2
   1cbc0:	add	r1, sp, #4
   1cbc4:	blt	1ca88 <__assert_fail@plt+0xb328>
   1cbc8:	mov	lr, r0
   1cbcc:	mov	r0, #1
   1cbd0:	ldr	r7, [r4, #24]
   1cbd4:	ldm	r4, {r1, ip}
   1cbd8:	ldr	r3, [r4, #64]	; 0x40
   1cbdc:	add	r1, r1, r7
   1cbe0:	add	r1, r1, r8
   1cbe4:	ldrb	r1, [r1, r0]
   1cbe8:	ldrb	r1, [r3, r1]
   1cbec:	add	r3, ip, r8
   1cbf0:	strb	r1, [r3, r0]
   1cbf4:	add	r3, sp, #4
   1cbf8:	strb	r1, [r3, r0]
   1cbfc:	add	r0, r0, #1
   1cc00:	cmp	r0, r2
   1cc04:	bge	1cc14 <__assert_fail@plt+0xb4b4>
   1cc08:	ldr	r1, [r4, #80]	; 0x50
   1cc0c:	cmp	r0, r1
   1cc10:	blt	1cbd0 <__assert_fail@plt+0xb470>
   1cc14:	add	r1, sp, #4
   1cc18:	mov	r0, lr
   1cc1c:	b	1ca88 <__assert_fail@plt+0xb328>
   1cc20:	ldrb	r0, [r1, r0]
   1cc24:	str	r0, [sp]
   1cc28:	b	1cad8 <__assert_fail@plt+0xb378>
   1cc2c:	stm	r9, {r6, sl}
   1cc30:	str	r8, [r4, #28]
   1cc34:	str	r8, [r4, #32]
   1cc38:	sub	sp, fp, #28
   1cc3c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1cc40:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1cc44:	add	fp, sp, #28
   1cc48:	sub	sp, sp, #28
   1cc4c:	ldr	r8, [r1]
   1cc50:	mov	r7, r0
   1cc54:	ldr	r6, [fp, #12]
   1cc58:	mov	r5, r2
   1cc5c:	str	r1, [sp, #20]
   1cc60:	str	r3, [sp, #24]
   1cc64:	ldr	r0, [r8, #84]	; 0x54
   1cc68:	str	r6, [sp, #4]
   1cc6c:	str	r0, [sp, #16]
   1cc70:	ldr	r0, [fp, #8]
   1cc74:	str	r0, [sp]
   1cc78:	mov	r0, r7
   1cc7c:	bl	1d81c <__assert_fail@plt+0xc0bc>
   1cc80:	mov	r4, r0
   1cc84:	cmp	r0, #0
   1cc88:	bne	1cc98 <__assert_fail@plt+0xb538>
   1cc8c:	ldr	r0, [r6]
   1cc90:	cmp	r0, #0
   1cc94:	bne	1cfbc <__assert_fail@plt+0xb85c>
   1cc98:	ldrb	r0, [r5, #4]
   1cc9c:	cmp	r0, #10
   1cca0:	bne	1cdec <__assert_fail@plt+0xb68c>
   1cca4:	ldr	r0, [sp, #24]
   1cca8:	mov	r9, #0
   1ccac:	orr	sl, r0, #8388608	; 0x800000
   1ccb0:	ldr	r0, [fp, #8]
   1ccb4:	str	sl, [sp, #12]
   1ccb8:	cmp	r0, #0
   1ccbc:	beq	1ce20 <__assert_fail@plt+0xb6c0>
   1ccc0:	mov	r0, r5
   1ccc4:	mov	r1, r7
   1ccc8:	mov	r2, sl
   1cccc:	bl	1cfc8 <__assert_fail@plt+0xb868>
   1ccd0:	ldr	r1, [r7, #40]	; 0x28
   1ccd4:	mov	r6, #0
   1ccd8:	add	r0, r1, r0
   1ccdc:	str	r0, [r7, #40]	; 0x28
   1cce0:	ldrb	r0, [r5, #4]
   1cce4:	orr	r1, r0, #8
   1cce8:	cmp	r1, #10
   1ccec:	bne	1cd50 <__assert_fail@plt+0xb5f0>
   1ccf0:	ldr	r1, [r8, #64]	; 0x40
   1ccf4:	cmp	r1, #31
   1ccf8:	beq	1cdc4 <__assert_fail@plt+0xb664>
   1ccfc:	ldr	r0, [r8, #56]	; 0x38
   1cd00:	add	r0, r0, r1, lsl #5
   1cd04:	add	r2, r1, #1
   1cd08:	mov	r1, #10
   1cd0c:	cmp	r4, #0
   1cd10:	str	r2, [r8, #64]	; 0x40
   1cd14:	str	r9, [r0, #4]!
   1cd18:	stmib	r0, {r4, r6, r9}
   1cd1c:	str	r9, [r0, #16]
   1cd20:	str	r9, [r0, #20]
   1cd24:	str	r1, [r0, #24]
   1cd28:	mvn	r1, #0
   1cd2c:	str	r1, [r0, #28]
   1cd30:	strne	r0, [r4]
   1cd34:	cmp	r6, #0
   1cd38:	mov	r4, r0
   1cd3c:	strne	r0, [r6]
   1cd40:	ldrb	r1, [r5, #4]
   1cd44:	cmp	r1, #10
   1cd48:	beq	1ccc0 <__assert_fail@plt+0xb560>
   1cd4c:	b	1cf04 <__assert_fail@plt+0xb7a4>
   1cd50:	cmp	r0, #9
   1cd54:	mov	r6, #0
   1cd58:	beq	1ccf0 <__assert_fail@plt+0xb590>
   1cd5c:	ldr	r0, [sp, #16]
   1cd60:	ldr	sl, [r8, #84]	; 0x54
   1cd64:	ldr	r1, [sp, #20]
   1cd68:	ldr	r3, [sp, #24]
   1cd6c:	mov	r2, r5
   1cd70:	str	r0, [r8, #84]	; 0x54
   1cd74:	ldr	r0, [fp, #8]
   1cd78:	str	r0, [sp]
   1cd7c:	ldr	r0, [fp, #12]
   1cd80:	str	r0, [sp, #4]
   1cd84:	mov	r0, r7
   1cd88:	bl	1d81c <__assert_fail@plt+0xc0bc>
   1cd8c:	mov	r6, r0
   1cd90:	cmp	r0, #0
   1cd94:	bne	1cda8 <__assert_fail@plt+0xb648>
   1cd98:	ldr	r0, [fp, #12]
   1cd9c:	ldr	r0, [r0]
   1cda0:	cmp	r0, #0
   1cda4:	bne	1cf0c <__assert_fail@plt+0xb7ac>
   1cda8:	ldr	r0, [r8, #84]	; 0x54
   1cdac:	orr	r0, r0, sl
   1cdb0:	ldr	sl, [sp, #12]
   1cdb4:	str	r0, [r8, #84]	; 0x54
   1cdb8:	ldr	r1, [r8, #64]	; 0x40
   1cdbc:	cmp	r1, #31
   1cdc0:	bne	1ccfc <__assert_fail@plt+0xb59c>
   1cdc4:	mov	r0, #996	; 0x3e4
   1cdc8:	bl	2e08c <__assert_fail@plt+0x1c92c>
   1cdcc:	cmp	r0, #0
   1cdd0:	beq	1cfb0 <__assert_fail@plt+0xb850>
   1cdd4:	ldr	r1, [r8, #56]	; 0x38
   1cdd8:	str	r1, [r0]
   1cddc:	mov	r1, #0
   1cde0:	str	r1, [r8, #64]	; 0x40
   1cde4:	str	r0, [r8, #56]	; 0x38
   1cde8:	b	1cd00 <__assert_fail@plt+0xb5a0>
   1cdec:	mov	r0, r4
   1cdf0:	sub	sp, fp, #28
   1cdf4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1cdf8:	mov	r0, #996	; 0x3e4
   1cdfc:	bl	2e08c <__assert_fail@plt+0x1c92c>
   1ce00:	cmp	r0, #0
   1ce04:	beq	1cfb0 <__assert_fail@plt+0xb850>
   1ce08:	ldr	r1, [r8, #56]	; 0x38
   1ce0c:	str	r1, [r0]
   1ce10:	mov	r1, #0
   1ce14:	str	r1, [r8, #64]	; 0x40
   1ce18:	str	r0, [r8, #56]	; 0x38
   1ce1c:	b	1ceb8 <__assert_fail@plt+0xb758>
   1ce20:	mov	r0, r5
   1ce24:	mov	r1, r7
   1ce28:	mov	r2, sl
   1ce2c:	bl	1cfc8 <__assert_fail@plt+0xb868>
   1ce30:	ldr	r1, [r7, #40]	; 0x28
   1ce34:	mov	r6, #0
   1ce38:	add	r0, r1, r0
   1ce3c:	str	r0, [r7, #40]	; 0x28
   1ce40:	ldrb	r0, [r5, #4]
   1ce44:	orr	r0, r0, #8
   1ce48:	cmp	r0, #10
   1ce4c:	beq	1cea8 <__assert_fail@plt+0xb748>
   1ce50:	ldr	r0, [sp, #16]
   1ce54:	ldr	sl, [r8, #84]	; 0x54
   1ce58:	ldr	r1, [sp, #20]
   1ce5c:	ldr	r3, [sp, #24]
   1ce60:	mov	r2, r5
   1ce64:	str	r0, [r8, #84]	; 0x54
   1ce68:	ldr	r0, [fp, #12]
   1ce6c:	str	r9, [sp]
   1ce70:	str	r0, [sp, #4]
   1ce74:	mov	r0, r7
   1ce78:	bl	1d81c <__assert_fail@plt+0xc0bc>
   1ce7c:	mov	r6, r0
   1ce80:	cmp	r0, #0
   1ce84:	bne	1ce98 <__assert_fail@plt+0xb738>
   1ce88:	ldr	r0, [fp, #12]
   1ce8c:	ldr	r0, [r0]
   1ce90:	cmp	r0, #0
   1ce94:	bne	1cf0c <__assert_fail@plt+0xb7ac>
   1ce98:	ldr	r0, [r8, #84]	; 0x54
   1ce9c:	orr	r0, r0, sl
   1cea0:	ldr	sl, [sp, #12]
   1cea4:	str	r0, [r8, #84]	; 0x54
   1cea8:	ldr	r1, [r8, #64]	; 0x40
   1ceac:	cmp	r1, #31
   1ceb0:	beq	1cdf8 <__assert_fail@plt+0xb698>
   1ceb4:	ldr	r0, [r8, #56]	; 0x38
   1ceb8:	add	r0, r0, r1, lsl #5
   1cebc:	add	r2, r1, #1
   1cec0:	mov	r1, #10
   1cec4:	cmp	r4, #0
   1cec8:	str	r2, [r8, #64]	; 0x40
   1cecc:	str	r9, [r0, #4]!
   1ced0:	stmib	r0, {r4, r6, r9}
   1ced4:	str	r9, [r0, #16]
   1ced8:	str	r9, [r0, #20]
   1cedc:	str	r1, [r0, #24]
   1cee0:	mvn	r1, #0
   1cee4:	str	r1, [r0, #28]
   1cee8:	strne	r0, [r4]
   1ceec:	cmp	r6, #0
   1cef0:	mov	r4, r0
   1cef4:	strne	r0, [r6]
   1cef8:	ldrb	r1, [r5, #4]
   1cefc:	cmp	r1, #10
   1cf00:	beq	1ce20 <__assert_fail@plt+0xb6c0>
   1cf04:	sub	sp, fp, #28
   1cf08:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1cf0c:	cmp	r4, #0
   1cf10:	beq	1cfbc <__assert_fail@plt+0xb85c>
   1cf14:	movw	r5, #255	; 0xff
   1cf18:	movt	r5, #4
   1cf1c:	mov	r6, r4
   1cf20:	ldr	r4, [r4, #4]
   1cf24:	cmp	r4, #0
   1cf28:	bne	1cf1c <__assert_fail@plt+0xb7bc>
   1cf2c:	ldr	r4, [r6, #8]
   1cf30:	cmp	r4, #0
   1cf34:	bne	1cf1c <__assert_fail@plt+0xb7bc>
   1cf38:	ldr	r0, [r6, #24]
   1cf3c:	and	r0, r0, r5
   1cf40:	cmp	r0, #3
   1cf44:	beq	1cf78 <__assert_fail@plt+0xb818>
   1cf48:	cmp	r0, #6
   1cf4c:	bne	1cf84 <__assert_fail@plt+0xb824>
   1cf50:	ldr	r4, [r6, #20]
   1cf54:	ldr	r0, [r4]
   1cf58:	bl	144c0 <__assert_fail@plt+0x2d60>
   1cf5c:	ldr	r0, [r4, #4]
   1cf60:	bl	144c0 <__assert_fail@plt+0x2d60>
   1cf64:	ldr	r0, [r4, #8]
   1cf68:	bl	144c0 <__assert_fail@plt+0x2d60>
   1cf6c:	ldr	r0, [r4, #12]
   1cf70:	bl	144c0 <__assert_fail@plt+0x2d60>
   1cf74:	b	1cf7c <__assert_fail@plt+0xb81c>
   1cf78:	ldr	r4, [r6, #20]
   1cf7c:	mov	r0, r4
   1cf80:	bl	144c0 <__assert_fail@plt+0x2d60>
   1cf84:	ldr	r0, [r6]
   1cf88:	cmp	r0, #0
   1cf8c:	beq	1cfbc <__assert_fail@plt+0xb85c>
   1cf90:	ldr	r4, [r0, #8]
   1cf94:	cmp	r4, r6
   1cf98:	mov	r6, r0
   1cf9c:	beq	1cf38 <__assert_fail@plt+0xb7d8>
   1cfa0:	cmp	r4, #0
   1cfa4:	mov	r6, r0
   1cfa8:	beq	1cf38 <__assert_fail@plt+0xb7d8>
   1cfac:	b	1cf1c <__assert_fail@plt+0xb7bc>
   1cfb0:	ldr	r1, [fp, #12]
   1cfb4:	mov	r0, #12
   1cfb8:	str	r0, [r1]
   1cfbc:	mov	r0, #0
   1cfc0:	sub	sp, fp, #28
   1cfc4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1cfc8:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1cfcc:	add	fp, sp, #24
   1cfd0:	sub	sp, sp, #8
   1cfd4:	mov	r9, r0
   1cfd8:	mov	r7, r1
   1cfdc:	ldr	r0, [r1, #40]	; 0x28
   1cfe0:	ldr	r1, [r1, #56]	; 0x38
   1cfe4:	cmp	r1, r0
   1cfe8:	ble	1d0d0 <__assert_fail@plt+0xb970>
   1cfec:	ldr	r1, [r7, #4]
   1cff0:	mov	r5, r9
   1cff4:	mov	r8, r2
   1cff8:	ldrb	r6, [r1, r0]
   1cffc:	strb	r6, [r5], #4
   1d000:	ldr	r0, [r5]
   1d004:	bic	r1, r0, #6291456	; 0x600000
   1d008:	str	r1, [r5]
   1d00c:	ldr	r3, [r7, #80]	; 0x50
   1d010:	cmp	r3, #2
   1d014:	blt	1d038 <__assert_fail@plt+0xb8d8>
   1d018:	ldr	r2, [r7, #28]
   1d01c:	ldr	r1, [r7, #40]	; 0x28
   1d020:	cmp	r1, r2
   1d024:	beq	1d038 <__assert_fail@plt+0xb8d8>
   1d028:	ldr	r2, [r7, #8]
   1d02c:	ldr	r1, [r2, r1, lsl #2]
   1d030:	cmn	r1, #1
   1d034:	beq	1d514 <__assert_fail@plt+0xbdb4>
   1d038:	movw	r1, #65280	; 0xff00
   1d03c:	cmp	r6, #92	; 0x5c
   1d040:	movt	r1, #65439	; 0xff9f
   1d044:	bne	1d0e8 <__assert_fail@plt+0xb988>
   1d048:	ldr	r6, [r7, #40]	; 0x28
   1d04c:	ldr	r4, [r7, #48]	; 0x30
   1d050:	add	r2, r6, #1
   1d054:	cmp	r2, r4
   1d058:	bge	1d13c <__assert_fail@plt+0xb9dc>
   1d05c:	ldrb	r4, [r7, #75]	; 0x4b
   1d060:	cmp	r4, #0
   1d064:	bne	1d7a8 <__assert_fail@plt+0xc048>
   1d068:	ldr	r3, [r7, #4]
   1d06c:	ldrb	r6, [r3, r2]
   1d070:	and	r0, r0, r1
   1d074:	strb	r6, [r9]
   1d078:	orr	r4, r0, #1
   1d07c:	str	r4, [r9, #4]
   1d080:	ldr	r0, [r7, #80]	; 0x50
   1d084:	cmp	r0, #2
   1d088:	blt	1d360 <__assert_fail@plt+0xbc00>
   1d08c:	ldr	r0, [r7, #8]
   1d090:	ldr	r1, [r7, #40]	; 0x28
   1d094:	add	r0, r0, r1, lsl #2
   1d098:	ldr	r4, [r0, #4]
   1d09c:	mov	r0, r4
   1d0a0:	bl	1164c <iswalnum@plt>
   1d0a4:	sub	r1, r4, #95	; 0x5f
   1d0a8:	cmp	r0, #0
   1d0ac:	clz	r1, r1
   1d0b0:	movwne	r0, #1
   1d0b4:	lsr	r1, r1, #5
   1d0b8:	orr	r0, r1, r0
   1d0bc:	ldr	r1, [r5]
   1d0c0:	bic	r1, r1, #4194304	; 0x400000
   1d0c4:	orr	r0, r1, r0, lsl #22
   1d0c8:	uxtb	r1, r6
   1d0cc:	b	1d384 <__assert_fail@plt+0xbc24>
   1d0d0:	mov	r0, #2
   1d0d4:	mov	r4, #0
   1d0d8:	strb	r0, [r9, #4]
   1d0dc:	mov	r0, r4
   1d0e0:	sub	sp, fp, #24
   1d0e4:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1d0e8:	and	r0, r0, r1
   1d0ec:	orr	r4, r0, #1
   1d0f0:	str	r4, [r5]
   1d0f4:	ldr	r0, [r7, #80]	; 0x50
   1d0f8:	cmp	r0, #2
   1d0fc:	blt	1d148 <__assert_fail@plt+0xb9e8>
   1d100:	ldr	r0, [r7, #8]
   1d104:	ldr	r1, [r7, #40]	; 0x28
   1d108:	ldr	r4, [r0, r1, lsl #2]
   1d10c:	mov	r0, r4
   1d110:	bl	1164c <iswalnum@plt>
   1d114:	sub	r1, r4, #95	; 0x5f
   1d118:	cmp	r0, #0
   1d11c:	clz	r1, r1
   1d120:	movwne	r0, #1
   1d124:	lsr	r1, r1, #5
   1d128:	orr	r0, r1, r0
   1d12c:	ldr	r1, [r5]
   1d130:	bic	r1, r1, #4194304	; 0x400000
   1d134:	orr	r0, r1, r0, lsl #22
   1d138:	b	1d168 <__assert_fail@plt+0xba08>
   1d13c:	and	r0, r0, r1
   1d140:	orr	r0, r0, #36	; 0x24
   1d144:	b	1d528 <__assert_fail@plt+0xbdc8>
   1d148:	bl	11604 <__ctype_b_loc@plt>
   1d14c:	ldr	r0, [r0]
   1d150:	cmp	r6, #95	; 0x5f
   1d154:	add	r0, r0, r6, lsl #1
   1d158:	ldrh	r0, [r0]
   1d15c:	ubfx	r0, r0, #3, #1
   1d160:	movweq	r0, #1
   1d164:	orr	r0, r4, r0, lsl #22
   1d168:	sub	r1, r6, #10
   1d16c:	mov	r4, #1
   1d170:	str	r0, [r5]
   1d174:	cmp	r1, #115	; 0x73
   1d178:	bhi	1d79c <__assert_fail@plt+0xc03c>
   1d17c:	add	r2, pc, #0
   1d180:	ldr	pc, [r2, r1, lsl #2]
   1d184:	andeq	sp, r1, r4, asr r3
   1d188:	muleq	r1, ip, r7
   1d18c:	muleq	r1, ip, r7
   1d190:	muleq	r1, ip, r7
   1d194:	muleq	r1, ip, r7
   1d198:	muleq	r1, ip, r7
   1d19c:	muleq	r1, ip, r7
   1d1a0:	muleq	r1, ip, r7
   1d1a4:	muleq	r1, ip, r7
   1d1a8:	muleq	r1, ip, r7
   1d1ac:	muleq	r1, ip, r7
   1d1b0:	muleq	r1, ip, r7
   1d1b4:	muleq	r1, ip, r7
   1d1b8:	muleq	r1, ip, r7
   1d1bc:	muleq	r1, ip, r7
   1d1c0:	muleq	r1, ip, r7
   1d1c4:	muleq	r1, ip, r7
   1d1c8:	muleq	r1, ip, r7
   1d1cc:	muleq	r1, ip, r7
   1d1d0:	muleq	r1, ip, r7
   1d1d4:	muleq	r1, ip, r7
   1d1d8:	muleq	r1, ip, r7
   1d1dc:	muleq	r1, ip, r7
   1d1e0:	muleq	r1, ip, r7
   1d1e4:	muleq	r1, ip, r7
   1d1e8:	muleq	r1, ip, r7
   1d1ec:	andeq	sp, r1, ip, lsr r5
   1d1f0:	muleq	r1, ip, r7
   1d1f4:	muleq	r1, ip, r7
   1d1f8:	muleq	r1, ip, r7
   1d1fc:	muleq	r1, r4, r5
   1d200:	andeq	sp, r1, r0, lsr #11
   1d204:	andeq	sp, r1, ip, lsr #11
   1d208:			; <UNDEFINED> instruction: 0x0001d5b4
   1d20c:	muleq	r1, ip, r7
   1d210:	muleq	r1, ip, r7
   1d214:	andeq	sp, r1, r4, asr #11
   1d218:	muleq	r1, ip, r7
   1d21c:	muleq	r1, ip, r7
   1d220:	muleq	r1, ip, r7
   1d224:	muleq	r1, ip, r7
   1d228:	muleq	r1, ip, r7
   1d22c:	muleq	r1, ip, r7
   1d230:	muleq	r1, ip, r7
   1d234:	muleq	r1, ip, r7
   1d238:	muleq	r1, ip, r7
   1d23c:	muleq	r1, ip, r7
   1d240:	muleq	r1, ip, r7
   1d244:	muleq	r1, ip, r7
   1d248:	muleq	r1, ip, r7
   1d24c:	muleq	r1, ip, r7
   1d250:	muleq	r1, ip, r7
   1d254:	muleq	r1, ip, r7
   1d258:	andeq	sp, r1, ip, asr #11
   1d25c:	muleq	r1, ip, r7
   1d260:	muleq	r1, ip, r7
   1d264:	muleq	r1, ip, r7
   1d268:	muleq	r1, ip, r7
   1d26c:	muleq	r1, ip, r7
   1d270:	muleq	r1, ip, r7
   1d274:	muleq	r1, ip, r7
   1d278:	muleq	r1, ip, r7
   1d27c:	muleq	r1, ip, r7
   1d280:	muleq	r1, ip, r7
   1d284:	muleq	r1, ip, r7
   1d288:	muleq	r1, ip, r7
   1d28c:	muleq	r1, ip, r7
   1d290:	muleq	r1, ip, r7
   1d294:	muleq	r1, ip, r7
   1d298:	muleq	r1, ip, r7
   1d29c:	muleq	r1, ip, r7
   1d2a0:	muleq	r1, ip, r7
   1d2a4:	muleq	r1, ip, r7
   1d2a8:	muleq	r1, ip, r7
   1d2ac:	muleq	r1, ip, r7
   1d2b0:	muleq	r1, ip, r7
   1d2b4:	muleq	r1, ip, r7
   1d2b8:	muleq	r1, ip, r7
   1d2bc:	muleq	r1, ip, r7
   1d2c0:	muleq	r1, ip, r7
   1d2c4:	muleq	r1, ip, r7
   1d2c8:	ldrdeq	sp, [r1], -ip
   1d2cc:	muleq	r1, ip, r7
   1d2d0:	muleq	r1, ip, r7
   1d2d4:	andeq	sp, r1, r4, ror #11
   1d2d8:	muleq	r1, ip, r7
   1d2dc:	muleq	r1, ip, r7
   1d2e0:	muleq	r1, ip, r7
   1d2e4:	muleq	r1, ip, r7
   1d2e8:	muleq	r1, ip, r7
   1d2ec:	muleq	r1, ip, r7
   1d2f0:	muleq	r1, ip, r7
   1d2f4:	muleq	r1, ip, r7
   1d2f8:	muleq	r1, ip, r7
   1d2fc:	muleq	r1, ip, r7
   1d300:	muleq	r1, ip, r7
   1d304:	muleq	r1, ip, r7
   1d308:	muleq	r1, ip, r7
   1d30c:	muleq	r1, ip, r7
   1d310:	muleq	r1, ip, r7
   1d314:	muleq	r1, ip, r7
   1d318:	muleq	r1, ip, r7
   1d31c:	muleq	r1, ip, r7
   1d320:	muleq	r1, ip, r7
   1d324:	muleq	r1, ip, r7
   1d328:	muleq	r1, ip, r7
   1d32c:	muleq	r1, ip, r7
   1d330:	muleq	r1, ip, r7
   1d334:	muleq	r1, ip, r7
   1d338:	muleq	r1, ip, r7
   1d33c:	muleq	r1, ip, r7
   1d340:	muleq	r1, ip, r7
   1d344:	muleq	r1, ip, r7
   1d348:	andeq	sp, r1, r4, lsl r6
   1d34c:	andeq	sp, r1, r4, lsr #12
   1d350:	andeq	sp, r1, r8, lsr r6
   1d354:	tst	r8, #2048	; 0x800
   1d358:	bne	1d630 <__assert_fail@plt+0xbed0>
   1d35c:	b	1d79c <__assert_fail@plt+0xc03c>
   1d360:	bl	11604 <__ctype_b_loc@plt>
   1d364:	ldr	r0, [r0]
   1d368:	uxtb	r1, r6
   1d36c:	cmp	r1, #95	; 0x5f
   1d370:	add	r0, r0, r1, lsl #1
   1d374:	ldrh	r0, [r0]
   1d378:	ubfx	r0, r0, #3, #1
   1d37c:	movweq	r0, #1
   1d380:	orr	r0, r4, r0, lsl #22
   1d384:	mvn	r2, #38	; 0x26
   1d388:	mov	r4, #2
   1d38c:	str	r0, [r5]
   1d390:	uxtab	r2, r2, r6
   1d394:	cmp	r2, #86	; 0x56
   1d398:	bhi	1d79c <__assert_fail@plt+0xc03c>
   1d39c:	add	r3, pc, #0
   1d3a0:	ldr	pc, [r3, r2, lsl #2]
   1d3a4:	andeq	sp, r1, r4, ror r6
   1d3a8:	andeq	sp, r1, r4, lsl #13
   1d3ac:	muleq	r1, r4, r6
   1d3b0:	muleq	r1, ip, r7
   1d3b4:	andeq	sp, r1, r4, lsr #13
   1d3b8:	muleq	r1, ip, r7
   1d3bc:	muleq	r1, ip, r7
   1d3c0:	muleq	r1, ip, r7
   1d3c4:	muleq	r1, ip, r7
   1d3c8:	muleq	r1, ip, r7
   1d3cc:	andeq	sp, r1, r0, lsl #10
   1d3d0:	andeq	sp, r1, r0, lsl #10
   1d3d4:	andeq	sp, r1, r0, lsl #10
   1d3d8:	andeq	sp, r1, r0, lsl #10
   1d3dc:	andeq	sp, r1, r0, lsl #10
   1d3e0:	andeq	sp, r1, r0, lsl #10
   1d3e4:	andeq	sp, r1, r0, lsl #10
   1d3e8:	andeq	sp, r1, r0, lsl #10
   1d3ec:	andeq	sp, r1, r0, lsl #10
   1d3f0:	muleq	r1, ip, r7
   1d3f4:	muleq	r1, ip, r7
   1d3f8:			; <UNDEFINED> instruction: 0x0001d6bc
   1d3fc:	muleq	r1, ip, r7
   1d400:	andeq	sp, r1, ip, asr #13
   1d404:	ldrdeq	sp, [r1], -ip
   1d408:	muleq	r1, ip, r7
   1d40c:	muleq	r1, ip, r7
   1d410:	strdeq	sp, [r1], -r4
   1d414:	muleq	r1, ip, r7
   1d418:	muleq	r1, ip, r7
   1d41c:	muleq	r1, ip, r7
   1d420:	muleq	r1, ip, r7
   1d424:	muleq	r1, ip, r7
   1d428:	muleq	r1, ip, r7
   1d42c:	muleq	r1, ip, r7
   1d430:	muleq	r1, ip, r7
   1d434:	muleq	r1, ip, r7
   1d438:	muleq	r1, ip, r7
   1d43c:	muleq	r1, ip, r7
   1d440:	muleq	r1, ip, r7
   1d444:	muleq	r1, ip, r7
   1d448:	muleq	r1, ip, r7
   1d44c:	muleq	r1, ip, r7
   1d450:	muleq	r1, ip, r7
   1d454:	andeq	sp, r1, r4, lsl #14
   1d458:	muleq	r1, ip, r7
   1d45c:	muleq	r1, ip, r7
   1d460:	muleq	r1, ip, r7
   1d464:	andeq	sp, r1, r4, lsl r7
   1d468:	muleq	r1, ip, r7
   1d46c:	muleq	r1, ip, r7
   1d470:	muleq	r1, ip, r7
   1d474:	muleq	r1, ip, r7
   1d478:	muleq	r1, ip, r7
   1d47c:	muleq	r1, ip, r7
   1d480:	muleq	r1, ip, r7
   1d484:	muleq	r1, ip, r7
   1d488:	andeq	sp, r1, r4, lsr #14
   1d48c:	muleq	r1, ip, r7
   1d490:	andeq	sp, r1, r4, lsr r7
   1d494:	muleq	r1, ip, r7
   1d498:	muleq	r1, ip, r7
   1d49c:	muleq	r1, ip, r7
   1d4a0:	muleq	r1, ip, r7
   1d4a4:	muleq	r1, ip, r7
   1d4a8:	muleq	r1, ip, r7
   1d4ac:	muleq	r1, ip, r7
   1d4b0:	muleq	r1, ip, r7
   1d4b4:	muleq	r1, ip, r7
   1d4b8:	muleq	r1, ip, r7
   1d4bc:	muleq	r1, ip, r7
   1d4c0:	muleq	r1, ip, r7
   1d4c4:	muleq	r1, ip, r7
   1d4c8:	muleq	r1, ip, r7
   1d4cc:	muleq	r1, ip, r7
   1d4d0:	muleq	r1, ip, r7
   1d4d4:	andeq	sp, r1, r4, asr #14
   1d4d8:	muleq	r1, ip, r7
   1d4dc:	muleq	r1, ip, r7
   1d4e0:	muleq	r1, ip, r7
   1d4e4:	andeq	sp, r1, r4, asr r7
   1d4e8:	muleq	r1, ip, r7
   1d4ec:	muleq	r1, ip, r7
   1d4f0:	muleq	r1, ip, r7
   1d4f4:	andeq	sp, r1, r4, ror #14
   1d4f8:	andeq	sp, r1, r8, ror r7
   1d4fc:	andeq	sp, r1, r4, lsl #15
   1d500:	tst	r8, #16384	; 0x4000
   1d504:	bne	1d79c <__assert_fail@plt+0xc03c>
   1d508:	sub	r1, r1, #49	; 0x31
   1d50c:	mov	r2, #4
   1d510:	b	1d5fc <__assert_fail@plt+0xbe9c>
   1d514:	movw	r1, #65280	; 0xff00
   1d518:	movt	r1, #65439	; 0xff9f
   1d51c:	and	r0, r0, r1
   1d520:	orr	r0, r0, #1
   1d524:	orr	r0, r0, #2097152	; 0x200000
   1d528:	str	r0, [r5]
   1d52c:	mov	r4, #1
   1d530:	mov	r0, r4
   1d534:	sub	sp, fp, #24
   1d538:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1d53c:	tst	r8, #8
   1d540:	bne	1d58c <__assert_fail@plt+0xbe2c>
   1d544:	ldr	r1, [r7, #40]	; 0x28
   1d548:	ldr	r2, [r7, #48]	; 0x30
   1d54c:	add	r1, r1, #1
   1d550:	cmp	r1, r2
   1d554:	beq	1d58c <__assert_fail@plt+0xbe2c>
   1d558:	str	r1, [r7, #40]	; 0x28
   1d55c:	mov	r0, sp
   1d560:	mov	r1, r7
   1d564:	mov	r2, r8
   1d568:	bl	1cfc8 <__assert_fail@plt+0xb868>
   1d56c:	ldr	r0, [r7, #40]	; 0x28
   1d570:	sub	r0, r0, #1
   1d574:	str	r0, [r7, #40]	; 0x28
   1d578:	ldrb	r0, [sp, #4]
   1d57c:	sub	r0, r0, #9
   1d580:	cmp	r0, #1
   1d584:	bhi	1d79c <__assert_fail@plt+0xc03c>
   1d588:	ldr	r0, [r5]
   1d58c:	mov	r1, #32
   1d590:	b	1d5f8 <__assert_fail@plt+0xbe98>
   1d594:	tst	r8, #8192	; 0x2000
   1d598:	bne	1d68c <__assert_fail@plt+0xbf2c>
   1d59c:	b	1d79c <__assert_fail@plt+0xc03c>
   1d5a0:	tst	r8, #8192	; 0x2000
   1d5a4:	bne	1d69c <__assert_fail@plt+0xbf3c>
   1d5a8:	b	1d79c <__assert_fail@plt+0xc03c>
   1d5ac:	mov	r1, #11
   1d5b0:	b	1d794 <__assert_fail@plt+0xc034>
   1d5b4:	movw	r1, #1026	; 0x402
   1d5b8:	tst	r8, r1
   1d5bc:	bne	1d79c <__assert_fail@plt+0xc03c>
   1d5c0:	b	1d6b4 <__assert_fail@plt+0xbf54>
   1d5c4:	mov	r1, #5
   1d5c8:	b	1d794 <__assert_fail@plt+0xc034>
   1d5cc:	movw	r1, #1026	; 0x402
   1d5d0:	tst	r8, r1
   1d5d4:	bne	1d79c <__assert_fail@plt+0xc03c>
   1d5d8:	b	1d6ec <__assert_fail@plt+0xbf8c>
   1d5dc:	mov	r1, #20
   1d5e0:	b	1d794 <__assert_fail@plt+0xc034>
   1d5e4:	movw	r1, #8
   1d5e8:	movt	r1, #128	; 0x80
   1d5ec:	tst	r8, r1
   1d5f0:	beq	1d648 <__assert_fail@plt+0xbee8>
   1d5f4:	mov	r1, #16
   1d5f8:	mov	r2, #12
   1d5fc:	bfi	r0, r2, #0, #8
   1d600:	str	r1, [r9]
   1d604:	str	r0, [r9, #4]
   1d608:	mov	r0, r4
   1d60c:	sub	sp, fp, #24
   1d610:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1d614:	and	r1, r8, #4608	; 0x1200
   1d618:	cmp	r1, #4608	; 0x1200
   1d61c:	beq	1d770 <__assert_fail@plt+0xc010>
   1d620:	b	1d79c <__assert_fail@plt+0xc03c>
   1d624:	and	r1, r8, #33792	; 0x8400
   1d628:	cmp	r1, #32768	; 0x8000
   1d62c:	bne	1d79c <__assert_fail@plt+0xc03c>
   1d630:	mov	r1, #10
   1d634:	b	1d794 <__assert_fail@plt+0xc034>
   1d638:	and	r1, r8, #4608	; 0x1200
   1d63c:	cmp	r1, #4608	; 0x1200
   1d640:	beq	1d790 <__assert_fail@plt+0xc030>
   1d644:	b	1d79c <__assert_fail@plt+0xc03c>
   1d648:	ldr	r1, [r7, #40]	; 0x28
   1d64c:	cmp	r1, #0
   1d650:	beq	1d5f4 <__assert_fail@plt+0xbe94>
   1d654:	tst	r8, #2048	; 0x800
   1d658:	beq	1d79c <__assert_fail@plt+0xc03c>
   1d65c:	ldr	r2, [r7, #4]
   1d660:	add	r1, r1, r2
   1d664:	ldrb	r1, [r1, #-1]
   1d668:	cmp	r1, #10
   1d66c:	beq	1d5f4 <__assert_fail@plt+0xbe94>
   1d670:	b	1d79c <__assert_fail@plt+0xc03c>
   1d674:	tst	r8, #524288	; 0x80000
   1d678:	bne	1d79c <__assert_fail@plt+0xc03c>
   1d67c:	mov	r1, #128	; 0x80
   1d680:	b	1d5f8 <__assert_fail@plt+0xbe98>
   1d684:	tst	r8, #8192	; 0x2000
   1d688:	bne	1d79c <__assert_fail@plt+0xc03c>
   1d68c:	mov	r1, #8
   1d690:	b	1d794 <__assert_fail@plt+0xc034>
   1d694:	tst	r8, #8192	; 0x2000
   1d698:	bne	1d79c <__assert_fail@plt+0xc03c>
   1d69c:	mov	r1, #9
   1d6a0:	b	1d794 <__assert_fail@plt+0xc034>
   1d6a4:	movw	r1, #1026	; 0x402
   1d6a8:	and	r1, r8, r1
   1d6ac:	cmp	r1, #2
   1d6b0:	bne	1d79c <__assert_fail@plt+0xc03c>
   1d6b4:	mov	r1, #18
   1d6b8:	b	1d794 <__assert_fail@plt+0xc034>
   1d6bc:	tst	r8, #524288	; 0x80000
   1d6c0:	bne	1d79c <__assert_fail@plt+0xc03c>
   1d6c4:	mov	r1, #6
   1d6c8:	b	1d5f8 <__assert_fail@plt+0xbe98>
   1d6cc:	tst	r8, #524288	; 0x80000
   1d6d0:	bne	1d79c <__assert_fail@plt+0xc03c>
   1d6d4:	mov	r1, #9
   1d6d8:	b	1d5f8 <__assert_fail@plt+0xbe98>
   1d6dc:	movw	r1, #1026	; 0x402
   1d6e0:	and	r1, r8, r1
   1d6e4:	cmp	r1, #2
   1d6e8:	bne	1d79c <__assert_fail@plt+0xc03c>
   1d6ec:	mov	r1, #19
   1d6f0:	b	1d794 <__assert_fail@plt+0xc034>
   1d6f4:	tst	r8, #524288	; 0x80000
   1d6f8:	bne	1d79c <__assert_fail@plt+0xc03c>
   1d6fc:	mov	r1, #512	; 0x200
   1d700:	b	1d5f8 <__assert_fail@plt+0xbe98>
   1d704:	tst	r8, #524288	; 0x80000
   1d708:	bne	1d79c <__assert_fail@plt+0xc03c>
   1d70c:	mov	r1, #35	; 0x23
   1d710:	b	1d794 <__assert_fail@plt+0xc034>
   1d714:	tst	r8, #524288	; 0x80000
   1d718:	bne	1d79c <__assert_fail@plt+0xc03c>
   1d71c:	mov	r1, #33	; 0x21
   1d720:	b	1d794 <__assert_fail@plt+0xc034>
   1d724:	tst	r8, #524288	; 0x80000
   1d728:	bne	1d79c <__assert_fail@plt+0xc03c>
   1d72c:	mov	r1, #64	; 0x40
   1d730:	b	1d5f8 <__assert_fail@plt+0xbe98>
   1d734:	tst	r8, #524288	; 0x80000
   1d738:	bne	1d79c <__assert_fail@plt+0xc03c>
   1d73c:	mov	r1, #256	; 0x100
   1d740:	b	1d5f8 <__assert_fail@plt+0xbe98>
   1d744:	tst	r8, #524288	; 0x80000
   1d748:	bne	1d79c <__assert_fail@plt+0xc03c>
   1d74c:	mov	r1, #34	; 0x22
   1d750:	b	1d794 <__assert_fail@plt+0xc034>
   1d754:	tst	r8, #524288	; 0x80000
   1d758:	bne	1d79c <__assert_fail@plt+0xc03c>
   1d75c:	mov	r1, #32
   1d760:	b	1d794 <__assert_fail@plt+0xc034>
   1d764:	and	r1, r8, #4608	; 0x1200
   1d768:	cmp	r1, #512	; 0x200
   1d76c:	bne	1d79c <__assert_fail@plt+0xc03c>
   1d770:	mov	r1, #23
   1d774:	b	1d794 <__assert_fail@plt+0xc034>
   1d778:	tst	r8, #33792	; 0x8400
   1d77c:	bne	1d79c <__assert_fail@plt+0xc03c>
   1d780:	b	1d630 <__assert_fail@plt+0xbed0>
   1d784:	and	r1, r8, #4608	; 0x1200
   1d788:	cmp	r1, #512	; 0x200
   1d78c:	bne	1d79c <__assert_fail@plt+0xc03c>
   1d790:	mov	r1, #24
   1d794:	bfi	r0, r1, #0, #8
   1d798:	str	r0, [r5]
   1d79c:	mov	r0, r4
   1d7a0:	sub	sp, fp, #24
   1d7a4:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1d7a8:	cmp	r3, #2
   1d7ac:	blt	1d7dc <__assert_fail@plt+0xc07c>
   1d7b0:	ldr	r3, [r7, #8]
   1d7b4:	ldr	r4, [r3, r2, lsl #2]
   1d7b8:	cmn	r4, #1
   1d7bc:	beq	1d068 <__assert_fail@plt+0xb908>
   1d7c0:	ldr	r4, [r7, #28]
   1d7c4:	add	r6, r6, #2
   1d7c8:	cmp	r4, r6
   1d7cc:	beq	1d7dc <__assert_fail@plt+0xc07c>
   1d7d0:	ldr	r3, [r3, r6, lsl #2]
   1d7d4:	cmn	r3, #1
   1d7d8:	beq	1d068 <__assert_fail@plt+0xb908>
   1d7dc:	ldrb	r3, [r7, #76]	; 0x4c
   1d7e0:	mov	r6, r2
   1d7e4:	cmp	r3, #0
   1d7e8:	beq	1d7f4 <__assert_fail@plt+0xc094>
   1d7ec:	ldr	r6, [r7, #12]
   1d7f0:	ldr	r6, [r6, r2, lsl #2]
   1d7f4:	ldr	r4, [r7, #24]
   1d7f8:	ldr	ip, [r7]
   1d7fc:	cmp	r3, #0
   1d800:	add	r6, r4, r6
   1d804:	add	r6, ip, r6
   1d808:	ldrsb	r6, [r6]
   1d80c:	beq	1d070 <__assert_fail@plt+0xb910>
   1d810:	cmn	r6, #1
   1d814:	ble	1d068 <__assert_fail@plt+0xb908>
   1d818:	b	1d070 <__assert_fail@plt+0xb910>
   1d81c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d820:	add	fp, sp, #28
   1d824:	sub	sp, sp, #12
   1d828:	mov	r4, r1
   1d82c:	ldr	r8, [r1]
   1d830:	ldr	r1, [fp, #8]
   1d834:	ldr	r5, [fp, #12]
   1d838:	mov	r7, r2
   1d83c:	str	r0, [sp, #8]
   1d840:	mov	sl, r3
   1d844:	mov	r9, r1
   1d848:	str	r1, [sp]
   1d84c:	mov	r1, r4
   1d850:	str	r5, [sp, #4]
   1d854:	bl	1dc80 <__assert_fail@plt+0xc520>
   1d858:	mov	r3, r5
   1d85c:	mov	r5, r0
   1d860:	mov	r0, #0
   1d864:	cmp	r5, #0
   1d868:	bne	1d878 <__assert_fail@plt+0xc118>
   1d86c:	ldr	r1, [r3]
   1d870:	cmp	r1, #0
   1d874:	bne	1da7c <__assert_fail@plt+0xc31c>
   1d878:	cmp	r9, #0
   1d87c:	beq	1d970 <__assert_fail@plt+0xc210>
   1d880:	ldrb	r0, [r7, #4]
   1d884:	orr	r1, r0, #8
   1d888:	cmp	r1, #10
   1d88c:	cmpne	r0, #9
   1d890:	beq	1da78 <__assert_fail@plt+0xc318>
   1d894:	ldr	r0, [sp, #8]
   1d898:	str	r3, [sp, #4]
   1d89c:	mov	r1, r4
   1d8a0:	mov	r2, r7
   1d8a4:	mov	r3, sl
   1d8a8:	str	r9, [sp]
   1d8ac:	bl	1dc80 <__assert_fail@plt+0xc520>
   1d8b0:	ldr	r3, [fp, #12]
   1d8b4:	cmp	r5, #0
   1d8b8:	mov	r2, r5
   1d8bc:	mov	r6, r0
   1d8c0:	movwne	r2, #1
   1d8c4:	cmp	r0, #0
   1d8c8:	bne	1d8d8 <__assert_fail@plt+0xc178>
   1d8cc:	ldr	r1, [r3]
   1d8d0:	cmp	r1, #0
   1d8d4:	bne	1da84 <__assert_fail@plt+0xc324>
   1d8d8:	cmp	r5, #0
   1d8dc:	cmpne	r6, #0
   1d8e0:	bne	1d8f0 <__assert_fail@plt+0xc190>
   1d8e4:	cmp	r5, #0
   1d8e8:	moveq	r5, r6
   1d8ec:	b	1d880 <__assert_fail@plt+0xc120>
   1d8f0:	ldr	r1, [r8, #64]	; 0x40
   1d8f4:	cmp	r1, #31
   1d8f8:	beq	1d944 <__assert_fail@plt+0xc1e4>
   1d8fc:	ldr	r0, [r8, #56]	; 0x38
   1d900:	add	r0, r0, r1, lsl #5
   1d904:	add	r2, r1, #1
   1d908:	mov	r1, #0
   1d90c:	str	r2, [r8, #64]	; 0x40
   1d910:	str	r1, [r0, #4]!
   1d914:	stmib	r0, {r5, r6}
   1d918:	str	r1, [r0, #12]
   1d91c:	str	r1, [r0, #16]
   1d920:	str	r1, [r0, #20]
   1d924:	mov	r1, #16
   1d928:	str	r1, [r0, #24]
   1d92c:	mvn	r1, #0
   1d930:	str	r1, [r0, #28]
   1d934:	str	r0, [r5]
   1d938:	str	r0, [r6]
   1d93c:	mov	r5, r0
   1d940:	b	1d880 <__assert_fail@plt+0xc120>
   1d944:	mov	r0, #996	; 0x3e4
   1d948:	bl	2e08c <__assert_fail@plt+0x1c92c>
   1d94c:	cmp	r0, #0
   1d950:	beq	1db30 <__assert_fail@plt+0xc3d0>
   1d954:	ldr	r1, [r8, #56]	; 0x38
   1d958:	ldr	r3, [fp, #12]
   1d95c:	str	r1, [r0]
   1d960:	mov	r1, #0
   1d964:	str	r1, [r8, #64]	; 0x40
   1d968:	str	r0, [r8, #56]	; 0x38
   1d96c:	b	1d900 <__assert_fail@plt+0xc1a0>
   1d970:	mov	r9, #0
   1d974:	ldrb	r0, [r7, #4]
   1d978:	orr	r0, r0, #8
   1d97c:	cmp	r0, #10
   1d980:	bne	1d9a0 <__assert_fail@plt+0xc240>
   1d984:	b	1da78 <__assert_fail@plt+0xc318>
   1d988:	cmp	r5, #0
   1d98c:	moveq	r5, r6
   1d990:	ldrb	r0, [r7, #4]
   1d994:	orr	r0, r0, #8
   1d998:	cmp	r0, #10
   1d99c:	beq	1da78 <__assert_fail@plt+0xc318>
   1d9a0:	ldr	r0, [sp, #8]
   1d9a4:	str	r3, [sp, #4]
   1d9a8:	mov	r1, r4
   1d9ac:	mov	r2, r7
   1d9b0:	mov	r3, sl
   1d9b4:	str	r9, [sp]
   1d9b8:	bl	1dc80 <__assert_fail@plt+0xc520>
   1d9bc:	ldr	r3, [fp, #12]
   1d9c0:	cmp	r5, #0
   1d9c4:	mov	r2, r5
   1d9c8:	mov	r6, r0
   1d9cc:	movwne	r2, #1
   1d9d0:	cmp	r0, #0
   1d9d4:	bne	1d9e4 <__assert_fail@plt+0xc284>
   1d9d8:	ldr	r1, [r3]
   1d9dc:	cmp	r1, #0
   1d9e0:	bne	1da84 <__assert_fail@plt+0xc324>
   1d9e4:	cmp	r5, #0
   1d9e8:	cmpne	r6, #0
   1d9ec:	beq	1d988 <__assert_fail@plt+0xc228>
   1d9f0:	ldr	r1, [r8, #64]	; 0x40
   1d9f4:	cmp	r1, #31
   1d9f8:	beq	1da4c <__assert_fail@plt+0xc2ec>
   1d9fc:	ldr	r0, [r8, #56]	; 0x38
   1da00:	add	r0, r0, r1, lsl #5
   1da04:	add	r2, r1, #1
   1da08:	mov	r1, #16
   1da0c:	str	r2, [r8, #64]	; 0x40
   1da10:	str	r9, [r0, #4]!
   1da14:	stmib	r0, {r5, r6, r9}
   1da18:	str	r9, [r0, #16]
   1da1c:	str	r9, [r0, #20]
   1da20:	str	r1, [r0, #24]
   1da24:	mvn	r1, #0
   1da28:	str	r1, [r0, #28]
   1da2c:	str	r0, [r5]
   1da30:	str	r0, [r6]
   1da34:	mov	r5, r0
   1da38:	ldrb	r0, [r7, #4]
   1da3c:	orr	r0, r0, #8
   1da40:	cmp	r0, #10
   1da44:	bne	1d9a0 <__assert_fail@plt+0xc240>
   1da48:	b	1da78 <__assert_fail@plt+0xc318>
   1da4c:	mov	r0, #996	; 0x3e4
   1da50:	bl	2e08c <__assert_fail@plt+0x1c92c>
   1da54:	cmp	r0, #0
   1da58:	beq	1db30 <__assert_fail@plt+0xc3d0>
   1da5c:	ldr	r1, [r8, #56]	; 0x38
   1da60:	ldr	r3, [fp, #12]
   1da64:	str	r1, [r0]
   1da68:	mov	r1, #0
   1da6c:	str	r1, [r8, #64]	; 0x40
   1da70:	str	r0, [r8, #56]	; 0x38
   1da74:	b	1da00 <__assert_fail@plt+0xc2a0>
   1da78:	mov	r0, r5
   1da7c:	sub	sp, fp, #28
   1da80:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1da84:	mov	r0, #0
   1da88:	cmp	r2, #0
   1da8c:	beq	1da7c <__assert_fail@plt+0xc31c>
   1da90:	movw	r6, #255	; 0xff
   1da94:	movt	r6, #4
   1da98:	mov	r7, r5
   1da9c:	ldr	r5, [r5, #4]
   1daa0:	cmp	r5, #0
   1daa4:	bne	1da98 <__assert_fail@plt+0xc338>
   1daa8:	ldr	r5, [r7, #8]
   1daac:	cmp	r5, #0
   1dab0:	bne	1da98 <__assert_fail@plt+0xc338>
   1dab4:	ldr	r1, [r7, #24]
   1dab8:	and	r1, r1, r6
   1dabc:	cmp	r1, #3
   1dac0:	beq	1daf4 <__assert_fail@plt+0xc394>
   1dac4:	cmp	r1, #6
   1dac8:	bne	1db04 <__assert_fail@plt+0xc3a4>
   1dacc:	ldr	r4, [r7, #20]
   1dad0:	ldr	r0, [r4]
   1dad4:	bl	144c0 <__assert_fail@plt+0x2d60>
   1dad8:	ldr	r0, [r4, #4]
   1dadc:	bl	144c0 <__assert_fail@plt+0x2d60>
   1dae0:	ldr	r0, [r4, #8]
   1dae4:	bl	144c0 <__assert_fail@plt+0x2d60>
   1dae8:	ldr	r0, [r4, #12]
   1daec:	bl	144c0 <__assert_fail@plt+0x2d60>
   1daf0:	b	1daf8 <__assert_fail@plt+0xc398>
   1daf4:	ldr	r4, [r7, #20]
   1daf8:	mov	r0, r4
   1dafc:	bl	144c0 <__assert_fail@plt+0x2d60>
   1db00:	mov	r0, #0
   1db04:	ldr	r1, [r7]
   1db08:	cmp	r1, #0
   1db0c:	beq	1da7c <__assert_fail@plt+0xc31c>
   1db10:	ldr	r5, [r1, #8]
   1db14:	cmp	r5, r7
   1db18:	mov	r7, r1
   1db1c:	beq	1dab4 <__assert_fail@plt+0xc354>
   1db20:	cmp	r5, #0
   1db24:	mov	r7, r1
   1db28:	beq	1dab4 <__assert_fail@plt+0xc354>
   1db2c:	b	1da98 <__assert_fail@plt+0xc338>
   1db30:	ldr	r1, [fp, #12]
   1db34:	movw	r8, #255	; 0xff
   1db38:	movt	r8, #4
   1db3c:	mov	r7, r6
   1db40:	ldr	r6, [r6, #4]
   1db44:	cmp	r6, #0
   1db48:	bne	1db3c <__assert_fail@plt+0xc3dc>
   1db4c:	ldr	r6, [r7, #8]
   1db50:	cmp	r6, #0
   1db54:	bne	1db3c <__assert_fail@plt+0xc3dc>
   1db58:	ldr	r0, [r7, #24]
   1db5c:	and	r0, r0, r8
   1db60:	cmp	r0, #3
   1db64:	beq	1db98 <__assert_fail@plt+0xc438>
   1db68:	cmp	r0, #6
   1db6c:	bne	1dba8 <__assert_fail@plt+0xc448>
   1db70:	ldr	r4, [r7, #20]
   1db74:	ldr	r0, [r4]
   1db78:	bl	144c0 <__assert_fail@plt+0x2d60>
   1db7c:	ldr	r0, [r4, #4]
   1db80:	bl	144c0 <__assert_fail@plt+0x2d60>
   1db84:	ldr	r0, [r4, #8]
   1db88:	bl	144c0 <__assert_fail@plt+0x2d60>
   1db8c:	ldr	r0, [r4, #12]
   1db90:	bl	144c0 <__assert_fail@plt+0x2d60>
   1db94:	b	1db9c <__assert_fail@plt+0xc43c>
   1db98:	ldr	r4, [r7, #20]
   1db9c:	mov	r0, r4
   1dba0:	bl	144c0 <__assert_fail@plt+0x2d60>
   1dba4:	ldr	r1, [fp, #12]
   1dba8:	ldr	r0, [r7]
   1dbac:	cmp	r0, #0
   1dbb0:	beq	1dbd4 <__assert_fail@plt+0xc474>
   1dbb4:	ldr	r6, [r0, #8]
   1dbb8:	cmp	r6, r7
   1dbbc:	mov	r7, r0
   1dbc0:	beq	1db58 <__assert_fail@plt+0xc3f8>
   1dbc4:	cmp	r6, #0
   1dbc8:	mov	r7, r0
   1dbcc:	beq	1db58 <__assert_fail@plt+0xc3f8>
   1dbd0:	b	1db3c <__assert_fail@plt+0xc3dc>
   1dbd4:	mov	r6, r5
   1dbd8:	ldr	r5, [r5, #4]
   1dbdc:	cmp	r5, #0
   1dbe0:	bne	1dbd4 <__assert_fail@plt+0xc474>
   1dbe4:	ldr	r5, [r6, #8]
   1dbe8:	cmp	r5, #0
   1dbec:	bne	1dbd4 <__assert_fail@plt+0xc474>
   1dbf0:	ldr	r0, [r6, #24]
   1dbf4:	and	r0, r0, r8
   1dbf8:	cmp	r0, #3
   1dbfc:	beq	1dc30 <__assert_fail@plt+0xc4d0>
   1dc00:	cmp	r0, #6
   1dc04:	bne	1dc40 <__assert_fail@plt+0xc4e0>
   1dc08:	ldr	r4, [r6, #20]
   1dc0c:	ldr	r0, [r4]
   1dc10:	bl	144c0 <__assert_fail@plt+0x2d60>
   1dc14:	ldr	r0, [r4, #4]
   1dc18:	bl	144c0 <__assert_fail@plt+0x2d60>
   1dc1c:	ldr	r0, [r4, #8]
   1dc20:	bl	144c0 <__assert_fail@plt+0x2d60>
   1dc24:	ldr	r0, [r4, #12]
   1dc28:	bl	144c0 <__assert_fail@plt+0x2d60>
   1dc2c:	b	1dc34 <__assert_fail@plt+0xc4d4>
   1dc30:	ldr	r4, [r6, #20]
   1dc34:	mov	r0, r4
   1dc38:	bl	144c0 <__assert_fail@plt+0x2d60>
   1dc3c:	ldr	r1, [fp, #12]
   1dc40:	ldr	r0, [r6]
   1dc44:	cmp	r0, #0
   1dc48:	beq	1dc6c <__assert_fail@plt+0xc50c>
   1dc4c:	ldr	r5, [r0, #8]
   1dc50:	cmp	r5, r6
   1dc54:	mov	r6, r0
   1dc58:	beq	1dbf0 <__assert_fail@plt+0xc490>
   1dc5c:	cmp	r5, #0
   1dc60:	mov	r6, r0
   1dc64:	beq	1dbf0 <__assert_fail@plt+0xc490>
   1dc68:	b	1dbd4 <__assert_fail@plt+0xc474>
   1dc6c:	mov	r0, #12
   1dc70:	str	r0, [r1]
   1dc74:	mov	r0, #0
   1dc78:	sub	sp, fp, #28
   1dc7c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1dc80:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1dc84:	add	fp, sp, #28
   1dc88:	sub	sp, sp, #156	; 0x9c
   1dc8c:	mov	r5, r0
   1dc90:	mov	lr, r2
   1dc94:	ldr	r0, [r2, #4]
   1dc98:	ldr	r2, [fp, #12]
   1dc9c:	mov	r7, r1
   1dca0:	mvn	r1, #0
   1dca4:	mov	r9, #0
   1dca8:	mov	ip, r3
   1dcac:	ldr	sl, [r7]
   1dcb0:	str	r2, [sp, #20]
   1dcb4:	uxtab	r1, r1, r0
   1dcb8:	ldr	r6, [fp, #8]
   1dcbc:	add	r2, pc, #12
   1dcc0:	str	r5, [sp, #28]
   1dcc4:	str	r3, [sp, #48]	; 0x30
   1dcc8:	str	lr, [sp, #44]	; 0x2c
   1dccc:	ldr	pc, [r2, r1, lsl #2]
   1dcd0:	andeq	sp, r1, r8, ror #31
   1dcd4:	andeq	pc, r1, r8, lsr sp	; <UNPREDICTABLE>
   1dcd8:	andeq	r0, r2, ip, asr #7
   1dcdc:			; <UNDEFINED> instruction: 0x0001e1b0
   1dce0:	andeq	lr, r1, r0, lsr r2
   1dce4:	andeq	r0, r2, ip, asr #7
   1dce8:	andeq	r0, r2, ip, asr #7
   1dcec:	muleq	r1, r8, r2
   1dcf0:	andeq	sp, r1, r0, lsl #27
   1dcf4:	andeq	pc, r1, r8, lsr sp	; <UNPREDICTABLE>
   1dcf8:	andeq	sp, r1, r0, ror sp
   1dcfc:	andeq	sp, r1, r4, ror lr
   1dd00:	andeq	r0, r2, ip, asr #7
   1dd04:	andeq	r0, r2, ip, asr #7
   1dd08:	andeq	r0, r2, ip, asr #7
   1dd0c:	andeq	r0, r2, ip, asr #7
   1dd10:	andeq	r0, r2, ip, asr #7
   1dd14:	andeq	sp, r1, r0, ror sp
   1dd18:	andeq	sp, r1, r0, ror sp
   1dd1c:	andeq	sp, r1, r4, ror pc
   1dd20:	andeq	r0, r2, ip, asr #7
   1dd24:	andeq	r0, r2, ip, asr #7
   1dd28:	andeq	lr, r1, ip, lsl r3
   1dd2c:	muleq	r1, r0, sp
   1dd30:	andeq	r0, r2, ip, asr #7
   1dd34:	andeq	r0, r2, ip, asr #7
   1dd38:	andeq	r0, r2, ip, asr #7
   1dd3c:	andeq	r0, r2, ip, asr #7
   1dd40:	andeq	r0, r2, ip, asr #7
   1dd44:	andeq	r0, r2, ip, asr #7
   1dd48:	andeq	r0, r2, ip, asr #7
   1dd4c:	andeq	sp, r1, ip, ror #27
   1dd50:	andeq	sp, r1, ip, ror #27
   1dd54:	andeq	sp, r1, ip, lsl #28
   1dd58:	andeq	sp, r1, ip, lsl #28
   1dd5c:	andeq	lr, r1, ip, lsr #6
   1dd60:	andeq	r0, r0, r0
   1dd64:	mvnseq	r0, #0
   1dd68:			; <UNDEFINED> instruction: 0x87fffffe
   1dd6c:			; <UNDEFINED> instruction: 0x07fffffe
   1dd70:	tst	ip, #32
   1dd74:	bne	1e324 <__assert_fail@plt+0xcbc4>
   1dd78:	tst	ip, #16
   1dd7c:	bne	1e33c <__assert_fail@plt+0xcbdc>
   1dd80:	tst	ip, #131072	; 0x20000
   1dd84:	uxtbeq	r1, r0
   1dd88:	cmpeq	r1, #9
   1dd8c:	beq	1e37c <__assert_fail@plt+0xcc1c>
   1dd90:	mov	r1, #1
   1dd94:	bfi	r0, r1, #0, #8
   1dd98:	str	r0, [lr, #4]
   1dd9c:	ldr	r1, [sl, #64]	; 0x40
   1dda0:	cmp	r1, #31
   1dda4:	beq	1fef4 <__assert_fail@plt+0xe794>
   1dda8:	ldr	r0, [sl, #56]	; 0x38
   1ddac:	add	r7, r0, r1, lsl #5
   1ddb0:	add	r2, r1, #1
   1ddb4:	mov	r0, #0
   1ddb8:	mvn	r3, #0
   1ddbc:	str	r2, [sl, #64]	; 0x40
   1ddc0:	str	r0, [r7, #4]!
   1ddc4:	str	r0, [r7, #8]
   1ddc8:	str	r0, [r7, #4]
   1ddcc:	ldm	lr, {r1, r2}
   1ddd0:	str	r3, [r7, #28]
   1ddd4:	str	r0, [r7, #16]
   1ddd8:	str	r0, [r7, #12]
   1dddc:	bic	r0, r2, #786432	; 0xc0000
   1dde0:	str	r1, [r7, #20]
   1dde4:	str	r0, [r7, #24]
   1dde8:	b	1edd8 <__assert_fail@plt+0xd678>
   1ddec:	mvn	r2, #32
   1ddf0:	ldr	r1, [r5, #64]	; 0x40
   1ddf4:	movw	r3, #62241	; 0xf321
   1ddf8:	uxtab	r0, r2, r0
   1ddfc:	movw	r2, #63414	; 0xf7b6
   1de00:	movt	r3, #2
   1de04:	movt	r2, #2
   1de08:	b	1de28 <__assert_fail@plt+0xc6c8>
   1de0c:	mvn	r2, #34	; 0x22
   1de10:	ldr	r1, [r5, #64]	; 0x40
   1de14:	movw	r3, #61035	; 0xee6b
   1de18:	uxtab	r0, r2, r0
   1de1c:	movw	r2, #63420	; 0xf7bc
   1de20:	movt	r3, #2
   1de24:	movt	r2, #2
   1de28:	clz	r0, r0
   1de2c:	lsr	r0, r0, #5
   1de30:	str	r0, [sp]
   1de34:	ldr	r4, [sp, #20]
   1de38:	str	r4, [sp, #4]
   1de3c:	mov	r0, sl
   1de40:	bl	203cc <__assert_fail@plt+0xec6c>
   1de44:	mov	r7, r0
   1de48:	cmp	r0, #0
   1de4c:	bne	1de68 <__assert_fail@plt+0xc708>
   1de50:	ldr	r0, [r4]
   1de54:	cmp	r0, #0
   1de58:	ldr	ip, [sp, #48]	; 0x30
   1de5c:	ldr	lr, [sp, #44]	; 0x2c
   1de60:	beq	1edd8 <__assert_fail@plt+0xd678>
   1de64:	b	1fd38 <__assert_fail@plt+0xe5d8>
   1de68:	ldr	ip, [sp, #48]	; 0x30
   1de6c:	ldr	lr, [sp, #44]	; 0x2c
   1de70:	b	1edd8 <__assert_fail@plt+0xd678>
   1de74:	ldr	r0, [lr]
   1de78:	movw	r1, #783	; 0x30f
   1de7c:	tst	r0, r1
   1de80:	beq	1dec8 <__assert_fail@plt+0xc768>
   1de84:	ldrb	r0, [sl, #88]	; 0x58
   1de88:	tst	r0, #16
   1de8c:	bne	1dec4 <__assert_fail@plt+0xc764>
   1de90:	orr	r1, r0, #16
   1de94:	tst	r0, #8
   1de98:	strb	r1, [sl, #88]	; 0x58
   1de9c:	bne	20194 <__assert_fail@plt+0xea34>
   1dea0:	sub	r1, pc, #328	; 0x148
   1dea4:	tst	r0, #4
   1dea8:	vld1.64	{d16-d17}, [r1 :128]
   1deac:	add	r1, sl, #96	; 0x60
   1deb0:	vst1.32	{d16-d17}, [r1]
   1deb4:	beq	201a0 <__assert_fail@plt+0xea40>
   1deb8:	vmov.i32	q8, #0	; 0x00000000
   1debc:	add	r0, sl, #112	; 0x70
   1dec0:	vst1.32	{d16-d17}, [r0]
   1dec4:	ldr	r0, [lr]
   1dec8:	cmp	r0, #512	; 0x200
   1decc:	beq	1ebc4 <__assert_fail@plt+0xd464>
   1ded0:	cmp	r0, #256	; 0x100
   1ded4:	bne	1ecdc <__assert_fail@plt+0xd57c>
   1ded8:	mov	r0, #6
   1dedc:	str	r0, [lr]
   1dee0:	ldr	r1, [sl, #64]	; 0x40
   1dee4:	cmp	r1, #31
   1dee8:	beq	200f4 <__assert_fail@plt+0xe994>
   1deec:	ldr	r0, [sl, #56]	; 0x38
   1def0:	add	r4, r0, r1, lsl #5
   1def4:	add	r2, r1, #1
   1def8:	mov	r0, #0
   1defc:	mvn	r3, #0
   1df00:	str	r2, [sl, #64]	; 0x40
   1df04:	str	r0, [r4, #4]!
   1df08:	str	r0, [r4, #8]
   1df0c:	str	r0, [r4, #4]
   1df10:	ldm	lr, {r1, r2}
   1df14:	str	r3, [r4, #28]
   1df18:	str	r0, [r4, #16]
   1df1c:	str	r0, [r4, #12]
   1df20:	bic	r0, r2, #786432	; 0xc0000
   1df24:	str	r1, [r4, #20]
   1df28:	str	r0, [r4, #24]
   1df2c:	mov	r0, #9
   1df30:	str	r0, [lr]
   1df34:	ldr	r1, [sl, #64]	; 0x40
   1df38:	cmp	r1, #31
   1df3c:	bne	1ec2c <__assert_fail@plt+0xd4cc>
   1df40:	mov	r0, #996	; 0x3e4
   1df44:	bl	2e08c <__assert_fail@plt+0x1c92c>
   1df48:	cmp	r0, #0
   1df4c:	beq	20230 <__assert_fail@plt+0xead0>
   1df50:	ldr	r1, [sl, #56]	; 0x38
   1df54:	ldr	ip, [sp, #48]	; 0x30
   1df58:	ldr	lr, [sp, #44]	; 0x2c
   1df5c:	mov	r9, #0
   1df60:	str	r1, [r0]
   1df64:	mov	r1, #0
   1df68:	str	r1, [sl, #64]	; 0x40
   1df6c:	str	r0, [sl, #56]	; 0x38
   1df70:	b	1ec30 <__assert_fail@plt+0xd4d0>
   1df74:	mov	r9, #0
   1df78:	mov	r0, #32
   1df7c:	mov	r1, #1
   1df80:	str	r9, [fp, #-32]	; 0xffffffe0
   1df84:	bl	2e038 <__assert_fail@plt+0x1c8d8>
   1df88:	mov	r8, r0
   1df8c:	mov	r0, #40	; 0x28
   1df90:	mov	r1, #1
   1df94:	bl	2e038 <__assert_fail@plt+0x1c8d8>
   1df98:	mov	r7, r0
   1df9c:	cmp	r8, #0
   1dfa0:	cmpne	r7, #0
   1dfa4:	beq	1ff54 <__assert_fail@plt+0xe7f4>
   1dfa8:	ldr	r6, [sp, #44]	; 0x2c
   1dfac:	ldr	r4, [sp, #48]	; 0x30
   1dfb0:	mov	r1, r5
   1dfb4:	mov	r0, r6
   1dfb8:	mov	r2, r4
   1dfbc:	bl	207c0 <__assert_fail@plt+0xf060>
   1dfc0:	mov	r3, r0
   1dfc4:	ldr	r0, [r6, #4]
   1dfc8:	str	r7, [sp, #60]	; 0x3c
   1dfcc:	uxtb	r1, r0
   1dfd0:	cmp	r1, #25
   1dfd4:	beq	1e384 <__assert_fail@plt+0xcc24>
   1dfd8:	cmp	r1, #2
   1dfdc:	beq	1ff40 <__assert_fail@plt+0xe7e0>
   1dfe0:	mov	r1, #0
   1dfe4:	b	1e3dc <__assert_fail@plt+0xcc7c>
   1dfe8:	ldr	r1, [sl, #64]	; 0x40
   1dfec:	cmp	r1, #31
   1dff0:	beq	1ff68 <__assert_fail@plt+0xe808>
   1dff4:	ldr	r0, [sl, #56]	; 0x38
   1dff8:	add	r4, r0, r1, lsl #5
   1dffc:	add	r2, r1, #1
   1e000:	mov	r0, #0
   1e004:	mvn	r3, #0
   1e008:	str	r2, [sl, #64]	; 0x40
   1e00c:	str	r0, [r4, #4]!
   1e010:	str	r0, [r4, #8]
   1e014:	str	r0, [r4, #4]
   1e018:	ldm	lr, {r1, r2}
   1e01c:	str	r3, [r4, #28]
   1e020:	str	r0, [r4, #16]
   1e024:	str	r0, [r4, #12]
   1e028:	bic	r0, r2, #786432	; 0xc0000
   1e02c:	str	r1, [r4, #20]
   1e030:	str	r0, [r4, #24]
   1e034:	ldr	r0, [sl, #92]	; 0x5c
   1e038:	cmp	r0, #2
   1e03c:	blt	1e334 <__assert_fail@plt+0xcbd4>
   1e040:	ldr	r0, [r5, #40]	; 0x28
   1e044:	ldr	r1, [r5, #56]	; 0x38
   1e048:	cmp	r1, r0
   1e04c:	ble	1e334 <__assert_fail@plt+0xcbd4>
   1e050:	mov	r8, #0
   1e054:	mvn	r9, #0
   1e058:	ldr	r1, [r5, #28]
   1e05c:	cmp	r0, r1
   1e060:	beq	1e334 <__assert_fail@plt+0xcbd4>
   1e064:	ldr	r1, [r5, #8]
   1e068:	ldr	r0, [r1, r0, lsl #2]
   1e06c:	cmn	r0, #1
   1e070:	bne	1e334 <__assert_fail@plt+0xcbd4>
   1e074:	mov	r0, lr
   1e078:	mov	r1, r5
   1e07c:	mov	r2, ip
   1e080:	bl	1cfc8 <__assert_fail@plt+0xb868>
   1e084:	ldr	r1, [r5, #40]	; 0x28
   1e088:	add	r0, r1, r0
   1e08c:	str	r0, [r5, #40]	; 0x28
   1e090:	ldr	r1, [sl, #64]	; 0x40
   1e094:	cmp	r1, #31
   1e098:	beq	1e140 <__assert_fail@plt+0xc9e0>
   1e09c:	ldr	r0, [sl, #56]	; 0x38
   1e0a0:	add	r6, r0, r1, lsl #5
   1e0a4:	ldr	lr, [sp, #44]	; 0x2c
   1e0a8:	add	r2, r1, #1
   1e0ac:	ldr	ip, [sp, #48]	; 0x30
   1e0b0:	str	r2, [sl, #64]	; 0x40
   1e0b4:	str	r8, [r6, #4]!
   1e0b8:	str	r8, [r6, #8]
   1e0bc:	str	r8, [r6, #4]
   1e0c0:	ldm	lr, {r0, r1}
   1e0c4:	str	r9, [r6, #28]
   1e0c8:	str	r8, [r6, #16]
   1e0cc:	str	r8, [r6, #12]
   1e0d0:	str	r0, [r6, #20]
   1e0d4:	bic	r0, r1, #786432	; 0xc0000
   1e0d8:	str	r0, [r6, #24]
   1e0dc:	ldr	r1, [sl, #64]	; 0x40
   1e0e0:	cmp	r1, #31
   1e0e4:	beq	1e180 <__assert_fail@plt+0xca20>
   1e0e8:	ldr	r0, [sl, #56]	; 0x38
   1e0ec:	add	r7, r0, r1, lsl #5
   1e0f0:	add	r2, r1, #1
   1e0f4:	mov	r0, #16
   1e0f8:	cmp	r6, #0
   1e0fc:	str	r2, [sl, #64]	; 0x40
   1e100:	str	r8, [r7, #4]!
   1e104:	stmib	r7, {r4, r6, r8}
   1e108:	str	r8, [r7, #16]
   1e10c:	str	r8, [r7, #20]
   1e110:	str	r0, [r7, #24]
   1e114:	str	r9, [r7, #28]
   1e118:	str	r7, [r4]
   1e11c:	beq	2018c <__assert_fail@plt+0xea2c>
   1e120:	ldr	r5, [sp, #28]
   1e124:	str	r7, [r6]
   1e128:	mov	r4, r7
   1e12c:	ldr	r0, [r5, #40]	; 0x28
   1e130:	ldr	r1, [r5, #56]	; 0x38
   1e134:	cmp	r1, r0
   1e138:	bgt	1e058 <__assert_fail@plt+0xc8f8>
   1e13c:	b	1edd8 <__assert_fail@plt+0xd678>
   1e140:	mov	r0, #996	; 0x3e4
   1e144:	bl	2e08c <__assert_fail@plt+0x1c92c>
   1e148:	cmp	r0, #0
   1e14c:	beq	1e168 <__assert_fail@plt+0xca08>
   1e150:	ldr	r1, [sl, #56]	; 0x38
   1e154:	str	r1, [r0]
   1e158:	mov	r1, #0
   1e15c:	str	r1, [sl, #64]	; 0x40
   1e160:	str	r0, [sl, #56]	; 0x38
   1e164:	b	1e0a0 <__assert_fail@plt+0xc940>
   1e168:	ldr	ip, [sp, #48]	; 0x30
   1e16c:	ldr	lr, [sp, #44]	; 0x2c
   1e170:	mov	r6, #0
   1e174:	ldr	r1, [sl, #64]	; 0x40
   1e178:	cmp	r1, #31
   1e17c:	bne	1e0e8 <__assert_fail@plt+0xc988>
   1e180:	mov	r0, #996	; 0x3e4
   1e184:	bl	2e08c <__assert_fail@plt+0x1c92c>
   1e188:	ldr	lr, [sp, #44]	; 0x2c
   1e18c:	ldr	ip, [sp, #48]	; 0x30
   1e190:	cmp	r0, #0
   1e194:	beq	2018c <__assert_fail@plt+0xea2c>
   1e198:	ldr	r1, [sl, #56]	; 0x38
   1e19c:	str	r1, [r0]
   1e1a0:	mov	r1, #0
   1e1a4:	str	r1, [sl, #64]	; 0x40
   1e1a8:	str	r0, [sl, #56]	; 0x38
   1e1ac:	b	1e0ec <__assert_fail@plt+0xc98c>
   1e1b0:	ldr	r0, [lr]
   1e1b4:	ldr	r2, [sl, #84]	; 0x54
   1e1b8:	mov	r1, #1
   1e1bc:	tst	r2, r1, lsl r0
   1e1c0:	beq	1ff9c <__assert_fail@plt+0xe83c>
   1e1c4:	lsl	r0, r1, r0
   1e1c8:	ldr	r1, [sl, #64]	; 0x40
   1e1cc:	ldr	r2, [sl, #80]	; 0x50
   1e1d0:	orr	r0, r2, r0
   1e1d4:	cmp	r1, #31
   1e1d8:	str	r0, [sl, #80]	; 0x50
   1e1dc:	beq	1ffd8 <__assert_fail@plt+0xe878>
   1e1e0:	ldr	r0, [sl, #56]	; 0x38
   1e1e4:	add	r7, r0, r1, lsl #5
   1e1e8:	add	r2, r1, #1
   1e1ec:	mov	r0, #0
   1e1f0:	mvn	r3, #0
   1e1f4:	str	r2, [sl, #64]	; 0x40
   1e1f8:	str	r0, [r7, #4]!
   1e1fc:	str	r0, [r7, #8]
   1e200:	str	r0, [r7, #4]
   1e204:	ldm	lr, {r1, r2}
   1e208:	str	r3, [r7, #28]
   1e20c:	str	r0, [r7, #16]
   1e210:	str	r0, [r7, #12]
   1e214:	bic	r0, r2, #786432	; 0xc0000
   1e218:	str	r1, [r7, #20]
   1e21c:	str	r0, [r7, #24]
   1e220:	ldr	r0, [sl, #76]	; 0x4c
   1e224:	add	r0, r0, #1
   1e228:	str	r0, [sl, #76]	; 0x4c
   1e22c:	b	1e288 <__assert_fail@plt+0xcb28>
   1e230:	ldr	r1, [sl, #64]	; 0x40
   1e234:	cmp	r1, #31
   1e238:	beq	1ffa4 <__assert_fail@plt+0xe844>
   1e23c:	ldr	r0, [sl, #56]	; 0x38
   1e240:	add	r7, r0, r1, lsl #5
   1e244:	add	r2, r1, #1
   1e248:	mov	r0, #0
   1e24c:	mvn	r3, #0
   1e250:	str	r2, [sl, #64]	; 0x40
   1e254:	str	r0, [r7, #4]!
   1e258:	str	r0, [r7, #8]
   1e25c:	str	r0, [r7, #4]
   1e260:	ldm	lr, {r1, r2}
   1e264:	str	r3, [r7, #28]
   1e268:	str	r0, [r7, #16]
   1e26c:	str	r0, [r7, #12]
   1e270:	bic	r0, r2, #786432	; 0xc0000
   1e274:	str	r1, [r7, #20]
   1e278:	str	r0, [r7, #24]
   1e27c:	ldr	r0, [sl, #92]	; 0x5c
   1e280:	cmp	r0, #2
   1e284:	blt	1edd8 <__assert_fail@plt+0xd678>
   1e288:	ldrb	r0, [sl, #88]	; 0x58
   1e28c:	orr	r0, r0, #2
   1e290:	strb	r0, [sl, #88]	; 0x58
   1e294:	b	1edd8 <__assert_fail@plt+0xd678>
   1e298:	ldr	r4, [r7, #24]
   1e29c:	orr	r2, ip, #8388608	; 0x800000
   1e2a0:	mov	r1, r5
   1e2a4:	add	r0, r4, #1
   1e2a8:	str	r0, [r7, #24]
   1e2ac:	mov	r0, lr
   1e2b0:	bl	1cfc8 <__assert_fail@plt+0xb868>
   1e2b4:	ldr	r1, [r5, #40]	; 0x28
   1e2b8:	ldr	lr, [sp, #44]	; 0x2c
   1e2bc:	mov	r9, #0
   1e2c0:	add	r0, r1, r0
   1e2c4:	str	r0, [r5, #40]	; 0x28
   1e2c8:	ldrb	r0, [lr, #4]
   1e2cc:	cmp	r0, #9
   1e2d0:	beq	1ed68 <__assert_fail@plt+0xd608>
   1e2d4:	add	r0, r6, #1
   1e2d8:	mov	r1, r7
   1e2dc:	mov	r2, lr
   1e2e0:	mov	r7, lr
   1e2e4:	str	r0, [sp]
   1e2e8:	mov	r0, r5
   1e2ec:	ldr	r6, [sp, #20]
   1e2f0:	str	r6, [sp, #4]
   1e2f4:	ldr	r3, [sp, #48]	; 0x30
   1e2f8:	bl	1cc40 <__assert_fail@plt+0xb4e0>
   1e2fc:	mov	r9, r0
   1e300:	ldr	r0, [r6]
   1e304:	cmp	r0, #0
   1e308:	beq	1ed58 <__assert_fail@plt+0xd5f8>
   1e30c:	mov	r9, #0
   1e310:	mov	r0, r9
   1e314:	sub	sp, fp, #28
   1e318:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e31c:	tst	ip, #16777216	; 0x1000000
   1e320:	beq	1dd70 <__assert_fail@plt+0xc610>
   1e324:	mov	r0, #13
   1e328:	b	1ecc8 <__assert_fail@plt+0xd568>
   1e32c:	mov	r0, #5
   1e330:	b	1ecc8 <__assert_fail@plt+0xd568>
   1e334:	mov	r7, r4
   1e338:	b	1edd8 <__assert_fail@plt+0xd678>
   1e33c:	mov	r0, lr
   1e340:	mov	r1, r5
   1e344:	mov	r2, ip
   1e348:	mov	r4, ip
   1e34c:	mov	r6, lr
   1e350:	bl	1cfc8 <__assert_fail@plt+0xb868>
   1e354:	ldr	r1, [r5, #40]	; 0x28
   1e358:	mov	r2, r6
   1e35c:	mov	r3, r4
   1e360:	add	r0, r1, r0
   1e364:	mov	r1, r7
   1e368:	str	r0, [r5, #40]	; 0x28
   1e36c:	mov	r0, r5
   1e370:	sub	sp, fp, #28
   1e374:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e378:	b	1dc80 <__assert_fail@plt+0xc520>
   1e37c:	mov	r0, #16
   1e380:	b	1ecc8 <__assert_fail@plt+0xd568>
   1e384:	ldrb	r0, [r7, #16]
   1e388:	tst	r4, #256	; 0x100
   1e38c:	orr	r0, r0, #1
   1e390:	strb	r0, [r7, #16]
   1e394:	beq	1e3a4 <__assert_fail@plt+0xcc44>
   1e398:	ldr	r0, [r8]
   1e39c:	orr	r0, r0, #1024	; 0x400
   1e3a0:	str	r0, [r8]
   1e3a4:	ldr	r0, [r5, #40]	; 0x28
   1e3a8:	mov	r1, r5
   1e3ac:	mov	r2, r4
   1e3b0:	add	r0, r0, r3
   1e3b4:	str	r0, [r5, #40]	; 0x28
   1e3b8:	mov	r0, r6
   1e3bc:	bl	207c0 <__assert_fail@plt+0xf060>
   1e3c0:	ldr	r6, [sp, #44]	; 0x2c
   1e3c4:	mov	r3, r0
   1e3c8:	ldr	r0, [r6, #4]
   1e3cc:	uxtb	r1, r0
   1e3d0:	cmp	r1, #2
   1e3d4:	beq	1ff40 <__assert_fail@plt+0xe7e0>
   1e3d8:	mov	r1, #1
   1e3dc:	str	r1, [sp, #56]	; 0x38
   1e3e0:	uxtb	r1, r0
   1e3e4:	mov	r2, r6
   1e3e8:	ldr	r7, [sp, #48]	; 0x30
   1e3ec:	cmp	r1, #21
   1e3f0:	moveq	r1, #1
   1e3f4:	bfieq	r0, r1, #0, #8
   1e3f8:	mov	r1, r5
   1e3fc:	streq	r0, [r6, #4]
   1e400:	sub	r0, fp, #80	; 0x50
   1e404:	str	r0, [fp, #-36]	; 0xffffffdc
   1e408:	mov	r0, #3
   1e40c:	str	r0, [fp, #-40]	; 0xffffffd8
   1e410:	mov	r0, #1
   1e414:	str	r7, [sp]
   1e418:	str	r0, [sp, #4]
   1e41c:	sub	r0, fp, #40	; 0x28
   1e420:	bl	20968 <__assert_fail@plt+0xf208>
   1e424:	cmp	r0, #0
   1e428:	bne	1ff28 <__assert_fail@plt+0xe7c8>
   1e42c:	and	r0, r7, #65536	; 0x10000
   1e430:	mov	r2, r7
   1e434:	str	r0, [sp, #40]	; 0x28
   1e438:	mov	r0, #0
   1e43c:	str	r0, [sp, #36]	; 0x24
   1e440:	mov	r0, #0
   1e444:	str	r0, [sp, #32]
   1e448:	ldr	r4, [sp, #44]	; 0x2c
   1e44c:	ldr	r7, [sp, #60]	; 0x3c
   1e450:	mov	r0, r4
   1e454:	mov	r1, r5
   1e458:	bl	207c0 <__assert_fail@plt+0xf060>
   1e45c:	ldr	r6, [fp, #-40]	; 0xffffffd8
   1e460:	mov	r9, r0
   1e464:	cmp	r6, #2
   1e468:	beq	1e690 <__assert_fail@plt+0xcf30>
   1e46c:	cmp	r6, #4
   1e470:	bne	1e4b4 <__assert_fail@plt+0xcd54>
   1e474:	ldr	r5, [sp, #28]
   1e478:	ldr	r1, [fp, #-36]	; 0xffffffdc
   1e47c:	mov	r2, r7
   1e480:	sub	r3, fp, #32
   1e484:	ldr	r0, [r5, #64]	; 0x40
   1e488:	str	r1, [sp]
   1e48c:	ldr	r1, [sp, #48]	; 0x30
   1e490:	str	r1, [sp, #4]
   1e494:	mov	r1, r8
   1e498:	bl	20c74 <__assert_fail@plt+0xf514>
   1e49c:	ldr	r1, [sp, #20]
   1e4a0:	ldr	lr, [sp, #44]	; 0x2c
   1e4a4:	cmp	r0, #0
   1e4a8:	str	r0, [r1]
   1e4ac:	beq	1e6d8 <__assert_fail@plt+0xcf78>
   1e4b0:	b	1fea0 <__assert_fail@plt+0xe740>
   1e4b4:	ldr	r0, [sp, #44]	; 0x2c
   1e4b8:	ldr	r2, [sp, #48]	; 0x30
   1e4bc:	mov	r4, r9
   1e4c0:	mov	r9, #7
   1e4c4:	str	sl, [sp, #52]	; 0x34
   1e4c8:	ldrb	r0, [r0, #4]
   1e4cc:	cmp	r0, #22
   1e4d0:	beq	1e4e0 <__assert_fail@plt+0xcd80>
   1e4d4:	cmp	r0, #2
   1e4d8:	bne	1e638 <__assert_fail@plt+0xced8>
   1e4dc:	b	1fe8c <__assert_fail@plt+0xe72c>
   1e4e0:	ldr	r7, [sp, #28]
   1e4e4:	mov	r5, r4
   1e4e8:	ldr	r0, [r7, #40]	; 0x28
   1e4ec:	mov	r1, r7
   1e4f0:	add	r0, r0, r4
   1e4f4:	str	r0, [r7, #40]	; 0x28
   1e4f8:	add	r0, sp, #64	; 0x40
   1e4fc:	bl	207c0 <__assert_fail@plt+0xf060>
   1e500:	mov	r3, r0
   1e504:	ldrb	r0, [sp, #68]	; 0x44
   1e508:	cmp	r0, #21
   1e50c:	beq	1e620 <__assert_fail@plt+0xcec0>
   1e510:	ldr	r4, [sp, #48]	; 0x30
   1e514:	cmp	r0, #2
   1e518:	beq	1fe8c <__assert_fail@plt+0xe72c>
   1e51c:	mov	r0, #3
   1e520:	str	r8, [sp, #24]
   1e524:	add	r2, sp, #64	; 0x40
   1e528:	str	r0, [fp, #-48]	; 0xffffffd0
   1e52c:	add	r0, sp, #72	; 0x48
   1e530:	str	r0, [fp, #-44]	; 0xffffffd4
   1e534:	mov	r0, #1
   1e538:	str	r4, [sp]
   1e53c:	str	r0, [sp, #4]
   1e540:	sub	r0, fp, #48	; 0x30
   1e544:	ldr	r7, [sp, #28]
   1e548:	mov	r1, r7
   1e54c:	bl	20968 <__assert_fail@plt+0xf208>
   1e550:	cmp	r0, #0
   1e554:	bne	20328 <__assert_fail@plt+0xebc8>
   1e558:	ldr	r0, [sp, #44]	; 0x2c
   1e55c:	mov	r1, r7
   1e560:	mov	r2, r4
   1e564:	bl	207c0 <__assert_fail@plt+0xf060>
   1e568:	ldr	r8, [fp, #-48]	; 0xffffffd0
   1e56c:	mov	r9, #11
   1e570:	str	r0, [sp, #16]
   1e574:	cmp	r8, #2
   1e578:	beq	1fe88 <__assert_fail@plt+0xe728>
   1e57c:	cmp	r8, #4
   1e580:	beq	1fe88 <__assert_fail@plt+0xe728>
   1e584:	cmp	r6, #3
   1e588:	bne	1e59c <__assert_fail@plt+0xce3c>
   1e58c:	ldr	r0, [fp, #-36]	; 0xffffffdc
   1e590:	bl	11628 <strlen@plt>
   1e594:	cmp	r0, #1
   1e598:	bhi	20334 <__assert_fail@plt+0xebd4>
   1e59c:	cmp	r8, #3
   1e5a0:	bne	1e5b4 <__assert_fail@plt+0xce54>
   1e5a4:	ldr	r0, [fp, #-44]	; 0xffffffd4
   1e5a8:	bl	11628 <strlen@plt>
   1e5ac:	cmp	r0, #1
   1e5b0:	bhi	20334 <__assert_fail@plt+0xebd4>
   1e5b4:	ldr	lr, [sp, #44]	; 0x2c
   1e5b8:	cmp	r6, #3
   1e5bc:	beq	1e788 <__assert_fail@plt+0xd028>
   1e5c0:	cmp	r6, #0
   1e5c4:	mov	r7, #0
   1e5c8:	ldrbeq	r7, [fp, #-36]	; 0xffffffdc
   1e5cc:	cmp	r8, #3
   1e5d0:	beq	1e798 <__assert_fail@plt+0xd038>
   1e5d4:	cmp	r8, #0
   1e5d8:	mov	sl, #0
   1e5dc:	ldrbeq	sl, [fp, #-44]	; 0xffffffd4
   1e5e0:	cmp	r6, #3
   1e5e4:	cmpne	r6, #0
   1e5e8:	bne	1e7ac <__assert_fail@plt+0xd04c>
   1e5ec:	ldr	r0, [sp, #52]	; 0x34
   1e5f0:	ldr	r0, [r0, #92]	; 0x5c
   1e5f4:	cmp	r0, #2
   1e5f8:	blt	1e7b0 <__assert_fail@plt+0xd050>
   1e5fc:	mov	r0, r7
   1e600:	bl	1167c <btowc@plt>
   1e604:	ldr	lr, [sp, #44]	; 0x2c
   1e608:	mov	r7, r0
   1e60c:	cmp	r8, #3
   1e610:	cmpne	r8, #0
   1e614:	beq	1e7bc <__assert_fail@plt+0xd05c>
   1e618:	ldr	sl, [fp, #-44]	; 0xffffffd4
   1e61c:	b	1e7dc <__assert_fail@plt+0xd07c>
   1e620:	ldr	r0, [r7, #40]	; 0x28
   1e624:	mov	r1, #1
   1e628:	sub	r0, r0, r5
   1e62c:	str	r0, [r7, #40]	; 0x28
   1e630:	ldr	r0, [sp, #44]	; 0x2c
   1e634:	strb	r1, [r0, #4]
   1e638:	add	r0, pc, #12
   1e63c:	ldr	sl, [sp, #52]	; 0x34
   1e640:	ldr	r7, [sp, #60]	; 0x3c
   1e644:	mov	r9, r4
   1e648:	ldr	pc, [r0, r6, lsl #2]
   1e64c:	andeq	lr, r1, ip, asr r6
   1e650:	andeq	lr, r1, r4, lsr r7
   1e654:	muleq	r1, r0, r6
   1e658:	andeq	lr, r1, r0, ror r7
   1e65c:	ldrb	r0, [fp, #-36]	; 0xffffffdc
   1e660:	mov	r3, #1
   1e664:	ubfx	r1, r0, #5, #3
   1e668:	and	r0, r0, #31
   1e66c:	ldr	r5, [sp, #28]
   1e670:	ldr	lr, [sp, #44]	; 0x2c
   1e674:	ldr	r2, [r8, r1, lsl #2]
   1e678:	orr	r0, r2, r3, lsl r0
   1e67c:	str	r0, [r8, r1, lsl #2]
   1e680:	ldrb	r0, [lr, #4]
   1e684:	cmp	r0, #21
   1e688:	bne	1e6e4 <__assert_fail@plt+0xcf84>
   1e68c:	b	1e960 <__assert_fail@plt+0xd200>
   1e690:	ldr	r7, [fp, #-36]	; 0xffffffdc
   1e694:	mov	r0, r7
   1e698:	bl	11628 <strlen@plt>
   1e69c:	cmp	r0, #1
   1e6a0:	bne	2009c <__assert_fail@plt+0xe93c>
   1e6a4:	ldrb	r0, [r7]
   1e6a8:	mov	r3, #1
   1e6ac:	ubfx	r1, r0, #5, #3
   1e6b0:	and	r0, r0, #31
   1e6b4:	ldr	r2, [r8, r1, lsl #2]
   1e6b8:	orr	r0, r2, r3, lsl r0
   1e6bc:	str	r0, [r8, r1, lsl #2]
   1e6c0:	mov	r1, #0
   1e6c4:	ldr	r0, [sp, #20]
   1e6c8:	ldr	r5, [sp, #28]
   1e6cc:	ldr	lr, [sp, #44]	; 0x2c
   1e6d0:	ldr	r7, [sp, #60]	; 0x3c
   1e6d4:	str	r1, [r0]
   1e6d8:	ldrb	r0, [lr, #4]
   1e6dc:	cmp	r0, #21
   1e6e0:	beq	1e960 <__assert_fail@plt+0xd200>
   1e6e4:	cmp	r0, #2
   1e6e8:	ldr	r0, [sp, #48]	; 0x30
   1e6ec:	beq	1ff34 <__assert_fail@plt+0xe7d4>
   1e6f0:	sub	r1, fp, #80	; 0x50
   1e6f4:	mov	r2, lr
   1e6f8:	mov	r3, r9
   1e6fc:	mov	r4, lr
   1e700:	str	r1, [fp, #-36]	; 0xffffffdc
   1e704:	mov	r1, #3
   1e708:	str	r1, [fp, #-40]	; 0xffffffd8
   1e70c:	str	r0, [sp]
   1e710:	mov	r0, #0
   1e714:	mov	r1, r5
   1e718:	str	r0, [sp, #4]
   1e71c:	sub	r0, fp, #40	; 0x28
   1e720:	bl	20968 <__assert_fail@plt+0xf208>
   1e724:	ldr	r2, [sp, #48]	; 0x30
   1e728:	cmp	r0, #0
   1e72c:	beq	1e450 <__assert_fail@plt+0xccf0>
   1e730:	b	1ff28 <__assert_fail@plt+0xe7c8>
   1e734:	ldr	r1, [r7, #20]
   1e738:	ldr	r0, [sp, #36]	; 0x24
   1e73c:	cmp	r0, r1
   1e740:	beq	1e8c4 <__assert_fail@plt+0xd164>
   1e744:	ldr	r0, [r7]
   1e748:	ldr	r5, [sp, #28]
   1e74c:	ldr	lr, [sp, #44]	; 0x2c
   1e750:	ldr	r3, [fp, #-36]	; 0xffffffdc
   1e754:	add	r2, r1, #1
   1e758:	str	r2, [r7, #20]
   1e75c:	str	r3, [r0, r1, lsl #2]
   1e760:	ldrb	r0, [lr, #4]
   1e764:	cmp	r0, #21
   1e768:	bne	1e6e4 <__assert_fail@plt+0xcf84>
   1e76c:	b	1e960 <__assert_fail@plt+0xd200>
   1e770:	ldr	r7, [fp, #-36]	; 0xffffffdc
   1e774:	mov	r0, r7
   1e778:	bl	11628 <strlen@plt>
   1e77c:	cmp	r0, #1
   1e780:	beq	1e6a4 <__assert_fail@plt+0xcf44>
   1e784:	b	200a0 <__assert_fail@plt+0xe940>
   1e788:	ldr	r0, [fp, #-36]	; 0xffffffdc
   1e78c:	ldrb	r7, [r0]
   1e790:	cmp	r8, #3
   1e794:	bne	1e5d4 <__assert_fail@plt+0xce74>
   1e798:	ldr	r0, [fp, #-44]	; 0xffffffd4
   1e79c:	ldrb	sl, [r0]
   1e7a0:	cmp	r6, #3
   1e7a4:	cmpne	r6, #0
   1e7a8:	beq	1e5ec <__assert_fail@plt+0xce8c>
   1e7ac:	ldr	r7, [fp, #-36]	; 0xffffffdc
   1e7b0:	cmp	r8, #3
   1e7b4:	cmpne	r8, #0
   1e7b8:	bne	1e618 <__assert_fail@plt+0xceb8>
   1e7bc:	ldr	r0, [sp, #52]	; 0x34
   1e7c0:	ldr	r0, [r0, #92]	; 0x5c
   1e7c4:	cmp	r0, #2
   1e7c8:	blt	1e7dc <__assert_fail@plt+0xd07c>
   1e7cc:	mov	r0, sl
   1e7d0:	bl	1167c <btowc@plt>
   1e7d4:	ldr	lr, [sp, #44]	; 0x2c
   1e7d8:	mov	sl, r0
   1e7dc:	ldr	r8, [sp, #24]
   1e7e0:	cmn	r7, #1
   1e7e4:	mov	r9, #3
   1e7e8:	cmnne	sl, #1
   1e7ec:	beq	1fe8c <__assert_fail@plt+0xe72c>
   1e7f0:	ldr	r0, [sp, #40]	; 0x28
   1e7f4:	cmp	r0, #0
   1e7f8:	beq	1e808 <__assert_fail@plt+0xd0a8>
   1e7fc:	cmp	r7, sl
   1e800:	mov	r9, #11
   1e804:	bhi	1fe8c <__assert_fail@plt+0xe72c>
   1e808:	ldr	r0, [sp, #52]	; 0x34
   1e80c:	ldr	r0, [r0, #92]	; 0x5c
   1e810:	cmp	r0, #2
   1e814:	blt	1e84c <__assert_fail@plt+0xd0ec>
   1e818:	ldr	r4, [sp, #60]	; 0x3c
   1e81c:	ldr	r1, [sp, #32]
   1e820:	ldr	r5, [sp, #28]
   1e824:	ldr	r0, [r4, #32]
   1e828:	cmp	r1, r0
   1e82c:	beq	1e904 <__assert_fail@plt+0xd1a4>
   1e830:	ldmib	r4, {r6, r9}
   1e834:	str	r7, [r6, r0, lsl #2]
   1e838:	ldr	r0, [r4, #32]
   1e83c:	add	r1, r0, #1
   1e840:	str	r1, [r4, #32]
   1e844:	str	sl, [r9, r0, lsl #2]
   1e848:	b	1e850 <__assert_fail@plt+0xd0f0>
   1e84c:	ldr	r5, [sp, #28]
   1e850:	ldr	r9, [sp, #16]
   1e854:	mov	r0, #0
   1e858:	cmp	r7, r0
   1e85c:	cmpls	r0, sl
   1e860:	bls	1e87c <__assert_fail@plt+0xd11c>
   1e864:	add	r0, r0, #1
   1e868:	cmp	r0, #256	; 0x100
   1e86c:	beq	1e8a0 <__assert_fail@plt+0xd140>
   1e870:	cmp	r7, r0
   1e874:	cmpls	r0, sl
   1e878:	bhi	1e864 <__assert_fail@plt+0xd104>
   1e87c:	ubfx	r1, r0, #5, #3
   1e880:	and	r3, r0, #31
   1e884:	mov	r4, #1
   1e888:	ldr	r2, [r8, r1, lsl #2]
   1e88c:	orr	r2, r2, r4, lsl r3
   1e890:	str	r2, [r8, r1, lsl #2]
   1e894:	add	r0, r0, #1
   1e898:	cmp	r0, #256	; 0x100
   1e89c:	bne	1e870 <__assert_fail@plt+0xd110>
   1e8a0:	ldr	r0, [sp, #20]
   1e8a4:	ldr	sl, [sp, #52]	; 0x34
   1e8a8:	ldr	r7, [sp, #60]	; 0x3c
   1e8ac:	mov	r1, #0
   1e8b0:	str	r1, [r0]
   1e8b4:	ldrb	r0, [lr, #4]
   1e8b8:	cmp	r0, #21
   1e8bc:	bne	1e6e4 <__assert_fail@plt+0xcf84>
   1e8c0:	b	1e960 <__assert_fail@plt+0xd200>
   1e8c4:	ldr	r1, [sp, #36]	; 0x24
   1e8c8:	mov	r0, #1
   1e8cc:	orr	r1, r0, r1, lsl #1
   1e8d0:	ldr	r0, [r7]
   1e8d4:	str	r1, [sp, #36]	; 0x24
   1e8d8:	lsl	r1, r1, #2
   1e8dc:	bl	2e0bc <__assert_fail@plt+0x1c95c>
   1e8e0:	cmp	r0, #0
   1e8e4:	beq	20398 <__assert_fail@plt+0xec38>
   1e8e8:	ldr	r7, [sp, #60]	; 0x3c
   1e8ec:	ldr	r5, [sp, #28]
   1e8f0:	ldr	lr, [sp, #44]	; 0x2c
   1e8f4:	mov	r9, r4
   1e8f8:	str	r0, [r7]
   1e8fc:	ldr	r1, [r7, #20]
   1e900:	b	1e750 <__assert_fail@plt+0xcff0>
   1e904:	ldr	r1, [sp, #32]
   1e908:	mov	r0, #1
   1e90c:	orr	r1, r0, r1, lsl #1
   1e910:	ldr	r0, [r4, #4]
   1e914:	lsl	r9, r1, #2
   1e918:	str	r1, [sp, #32]
   1e91c:	mov	r1, r9
   1e920:	bl	2e0bc <__assert_fail@plt+0x1c95c>
   1e924:	mov	r6, r0
   1e928:	ldr	r0, [r4, #8]
   1e92c:	mov	r1, r9
   1e930:	bl	2e0bc <__assert_fail@plt+0x1c95c>
   1e934:	mov	r9, r0
   1e938:	cmp	r6, #0
   1e93c:	cmpne	r9, #0
   1e940:	beq	203b0 <__assert_fail@plt+0xec50>
   1e944:	ldr	r4, [sp, #60]	; 0x3c
   1e948:	stmib	r4, {r6, r9}
   1e94c:	ldr	r0, [r4, #32]
   1e950:	ldr	r5, [sp, #28]
   1e954:	ldr	lr, [sp, #44]	; 0x2c
   1e958:	ldr	r8, [sp, #24]
   1e95c:	b	1e834 <__assert_fail@plt+0xd0d4>
   1e960:	ldr	r0, [r5, #40]	; 0x28
   1e964:	ldr	ip, [sp, #48]	; 0x30
   1e968:	add	r0, r0, r9
   1e96c:	str	r0, [r5, #40]	; 0x28
   1e970:	ldr	r0, [sp, #56]	; 0x38
   1e974:	cmp	r0, #0
   1e978:	beq	1e9b4 <__assert_fail@plt+0xd254>
   1e97c:	vld1.32	{d16-d17}, [r8]
   1e980:	mov	r0, r8
   1e984:	vmvn	q8, q8
   1e988:	vst1.32	{d16-d17}, [r0]!
   1e98c:	vld1.32	{d16-d17}, [r0]
   1e990:	vmvn	q8, q8
   1e994:	vst1.32	{d16-d17}, [r0]
   1e998:	ldr	r0, [sl, #92]	; 0x5c
   1e99c:	cmp	r0, #2
   1e9a0:	bge	1e9c0 <__assert_fail@plt+0xd260>
   1e9a4:	ldr	r1, [r7, #20]
   1e9a8:	cmp	r1, #0
   1e9ac:	bne	1ea70 <__assert_fail@plt+0xd310>
   1e9b0:	b	1ea4c <__assert_fail@plt+0xd2ec>
   1e9b4:	ldr	r0, [sl, #92]	; 0x5c
   1e9b8:	cmp	r0, #2
   1e9bc:	blt	1e9a4 <__assert_fail@plt+0xd244>
   1e9c0:	ldr	r6, [sl, #60]	; 0x3c
   1e9c4:	ldm	r8, {r1, r2, r3, r7}
   1e9c8:	ldr	r5, [r6]
   1e9cc:	and	r1, r1, r5
   1e9d0:	ldr	r5, [sp, #28]
   1e9d4:	str	r1, [r8]
   1e9d8:	ldr	r1, [r6, #4]
   1e9dc:	and	r1, r2, r1
   1e9e0:	str	r1, [r8, #4]
   1e9e4:	ldr	r1, [r6, #8]
   1e9e8:	and	r1, r3, r1
   1e9ec:	str	r1, [r8, #8]
   1e9f0:	ldr	r1, [r6, #12]
   1e9f4:	and	r1, r7, r1
   1e9f8:	ldr	r7, [sp, #60]	; 0x3c
   1e9fc:	str	r1, [r8, #12]
   1ea00:	ldr	r1, [r8, #16]
   1ea04:	ldr	r2, [r6, #16]
   1ea08:	and	r1, r1, r2
   1ea0c:	str	r1, [r8, #16]
   1ea10:	ldr	r1, [r6, #20]
   1ea14:	ldr	r2, [r8, #20]
   1ea18:	and	r1, r2, r1
   1ea1c:	str	r1, [r8, #20]
   1ea20:	ldr	r1, [r6, #24]
   1ea24:	ldr	r2, [r8, #24]
   1ea28:	and	r1, r2, r1
   1ea2c:	str	r1, [r8, #24]
   1ea30:	ldr	r1, [r6, #28]
   1ea34:	ldr	r2, [r8, #28]
   1ea38:	and	r1, r2, r1
   1ea3c:	str	r1, [r8, #28]
   1ea40:	ldr	r1, [r7, #20]
   1ea44:	cmp	r1, #0
   1ea48:	bne	1ea70 <__assert_fail@plt+0xd310>
   1ea4c:	ldr	r1, [r7, #24]
   1ea50:	cmp	r1, #0
   1ea54:	bne	1ea70 <__assert_fail@plt+0xd310>
   1ea58:	ldr	r1, [r7, #28]
   1ea5c:	cmp	r1, #0
   1ea60:	bne	1ea70 <__assert_fail@plt+0xd310>
   1ea64:	ldr	r1, [r7, #32]
   1ea68:	cmp	r1, #0
   1ea6c:	beq	1fde8 <__assert_fail@plt+0xe688>
   1ea70:	ldrb	r0, [sl, #88]	; 0x58
   1ea74:	orr	r0, r0, #2
   1ea78:	strb	r0, [sl, #88]	; 0x58
   1ea7c:	ldr	r1, [sl, #64]	; 0x40
   1ea80:	cmp	r1, #31
   1ea84:	beq	2000c <__assert_fail@plt+0xe8ac>
   1ea88:	ldr	r0, [sl, #56]	; 0x38
   1ea8c:	add	r0, r0, r1, lsl #5
   1ea90:	add	r2, r1, #1
   1ea94:	vmov.i32	q8, #0	; 0x00000000
   1ea98:	mov	r1, #6
   1ea9c:	str	r2, [sl, #64]	; 0x40
   1eaa0:	mov	r2, #0
   1eaa4:	add	r4, r0, #4
   1eaa8:	str	r2, [r0, #20]
   1eaac:	str	r7, [r0, #24]
   1eab0:	str	r1, [r0, #28]
   1eab4:	mov	r0, #28
   1eab8:	mov	r1, r4
   1eabc:	vst1.32	{d16-d17}, [r1], r0
   1eac0:	mvn	r0, #0
   1eac4:	str	r0, [r1]
   1eac8:	ldr	r0, [r8]
   1eacc:	cmp	r0, #0
   1ead0:	bne	1eb28 <__assert_fail@plt+0xd3c8>
   1ead4:	ldr	r0, [r8, #4]
   1ead8:	cmp	r0, #0
   1eadc:	bne	1eb28 <__assert_fail@plt+0xd3c8>
   1eae0:	ldr	r0, [r8, #8]
   1eae4:	cmp	r0, #0
   1eae8:	bne	1eb28 <__assert_fail@plt+0xd3c8>
   1eaec:	ldr	r0, [r8, #12]
   1eaf0:	cmp	r0, #0
   1eaf4:	bne	1eb28 <__assert_fail@plt+0xd3c8>
   1eaf8:	ldr	r0, [r8, #16]
   1eafc:	cmp	r0, #0
   1eb00:	bne	1eb28 <__assert_fail@plt+0xd3c8>
   1eb04:	ldr	r0, [r8, #20]
   1eb08:	cmp	r0, #0
   1eb0c:	bne	1eb28 <__assert_fail@plt+0xd3c8>
   1eb10:	ldr	r0, [r8, #24]
   1eb14:	cmp	r0, #0
   1eb18:	bne	1eb28 <__assert_fail@plt+0xd3c8>
   1eb1c:	ldr	r0, [r8, #28]
   1eb20:	cmp	r0, #0
   1eb24:	beq	200a8 <__assert_fail@plt+0xe948>
   1eb28:	ldr	r1, [sl, #64]	; 0x40
   1eb2c:	cmp	r1, #31
   1eb30:	beq	2003c <__assert_fail@plt+0xe8dc>
   1eb34:	ldr	r0, [sl, #56]	; 0x38
   1eb38:	add	r0, r0, r1, lsl #5
   1eb3c:	add	r2, r1, #1
   1eb40:	vmov.i32	q8, #0	; 0x00000000
   1eb44:	mov	r1, #3
   1eb48:	str	r2, [sl, #64]	; 0x40
   1eb4c:	mov	r2, #0
   1eb50:	add	r6, r0, #4
   1eb54:	str	r2, [r0, #20]
   1eb58:	str	r8, [r0, #24]
   1eb5c:	str	r1, [r0, #28]
   1eb60:	mov	r0, #28
   1eb64:	mov	r1, r6
   1eb68:	vst1.32	{d16-d17}, [r1], r0
   1eb6c:	mvn	r0, #0
   1eb70:	str	r0, [r1]
   1eb74:	ldr	r1, [sl, #64]	; 0x40
   1eb78:	cmp	r1, #31
   1eb7c:	beq	2006c <__assert_fail@plt+0xe90c>
   1eb80:	ldr	r0, [sl, #56]	; 0x38
   1eb84:	add	r7, r0, r1, lsl #5
   1eb88:	add	r2, r1, #1
   1eb8c:	mov	r0, #0
   1eb90:	mov	r1, #10
   1eb94:	str	r2, [sl, #64]	; 0x40
   1eb98:	mvn	r2, #0
   1eb9c:	str	r0, [r7, #4]!
   1eba0:	add	r3, r7, #20
   1eba4:	str	r6, [r7, #4]
   1eba8:	str	r4, [r7, #8]
   1ebac:	str	r0, [r7, #12]
   1ebb0:	str	r0, [r7, #16]
   1ebb4:	stm	r3, {r0, r1, r2}
   1ebb8:	str	r7, [r6]
   1ebbc:	str	r7, [r4]
   1ebc0:	b	1edd8 <__assert_fail@plt+0xd678>
   1ebc4:	mov	r0, #5
   1ebc8:	str	r0, [lr]
   1ebcc:	ldr	r1, [sl, #64]	; 0x40
   1ebd0:	cmp	r1, #31
   1ebd4:	beq	20128 <__assert_fail@plt+0xe9c8>
   1ebd8:	ldr	r0, [sl, #56]	; 0x38
   1ebdc:	add	r4, r0, r1, lsl #5
   1ebe0:	add	r2, r1, #1
   1ebe4:	mov	r0, #0
   1ebe8:	mvn	r3, #0
   1ebec:	str	r2, [sl, #64]	; 0x40
   1ebf0:	str	r0, [r4, #4]!
   1ebf4:	str	r0, [r4, #8]
   1ebf8:	str	r0, [r4, #4]
   1ebfc:	ldm	lr, {r1, r2}
   1ec00:	str	r3, [r4, #28]
   1ec04:	str	r0, [r4, #16]
   1ec08:	str	r0, [r4, #12]
   1ec0c:	bic	r0, r2, #786432	; 0xc0000
   1ec10:	str	r1, [r4, #20]
   1ec14:	str	r0, [r4, #24]
   1ec18:	mov	r0, #10
   1ec1c:	str	r0, [lr]
   1ec20:	ldr	r1, [sl, #64]	; 0x40
   1ec24:	cmp	r1, #31
   1ec28:	beq	1df40 <__assert_fail@plt+0xc7e0>
   1ec2c:	ldr	r0, [sl, #56]	; 0x38
   1ec30:	add	r5, r0, r1, lsl #5
   1ec34:	add	r2, r1, #1
   1ec38:	mov	r0, #0
   1ec3c:	mvn	r3, #0
   1ec40:	str	r2, [sl, #64]	; 0x40
   1ec44:	str	r0, [r5, #4]!
   1ec48:	str	r0, [r5, #8]
   1ec4c:	str	r0, [r5, #4]
   1ec50:	ldm	lr, {r1, r2}
   1ec54:	str	r3, [r5, #28]
   1ec58:	str	r0, [r5, #16]
   1ec5c:	str	r0, [r5, #12]
   1ec60:	bic	r0, r2, #786432	; 0xc0000
   1ec64:	str	r1, [r5, #20]
   1ec68:	str	r0, [r5, #24]
   1ec6c:	ldr	r1, [sl, #64]	; 0x40
   1ec70:	cmp	r1, #31
   1ec74:	beq	2024c <__assert_fail@plt+0xeaec>
   1ec78:	ldr	r0, [sl, #56]	; 0x38
   1ec7c:	add	r6, r0, r1, lsl #5
   1ec80:	add	r2, r1, #1
   1ec84:	mov	r0, #0
   1ec88:	cmp	r4, #0
   1ec8c:	mov	r1, #10
   1ec90:	str	r2, [sl, #64]	; 0x40
   1ec94:	mvn	r2, #0
   1ec98:	str	r0, [r6, #4]!
   1ec9c:	add	r3, r6, #20
   1eca0:	stmib	r6, {r4, r5}
   1eca4:	str	r0, [r6, #12]
   1eca8:	str	r0, [r6, #16]
   1ecac:	stm	r3, {r0, r1, r2}
   1ecb0:	strne	r6, [r4]
   1ecb4:	cmp	r5, #0
   1ecb8:	strne	r6, [r5]
   1ecbc:	cmpne	r4, #0
   1ecc0:	bne	1ed28 <__assert_fail@plt+0xd5c8>
   1ecc4:	mov	r0, #12
   1ecc8:	ldr	r1, [sp, #20]
   1eccc:	str	r0, [r1]
   1ecd0:	mov	r0, r9
   1ecd4:	sub	sp, fp, #28
   1ecd8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ecdc:	ldr	r1, [sl, #64]	; 0x40
   1ece0:	cmp	r1, #31
   1ece4:	beq	2015c <__assert_fail@plt+0xe9fc>
   1ece8:	ldr	r0, [sl, #56]	; 0x38
   1ecec:	add	r6, r0, r1, lsl #5
   1ecf0:	add	r2, r1, #1
   1ecf4:	mov	r0, #0
   1ecf8:	mvn	r3, #0
   1ecfc:	str	r2, [sl, #64]	; 0x40
   1ed00:	str	r0, [r6, #4]!
   1ed04:	str	r0, [r6, #8]
   1ed08:	str	r0, [r6, #4]
   1ed0c:	ldm	lr, {r1, r2}
   1ed10:	str	r3, [r6, #28]
   1ed14:	str	r0, [r6, #16]
   1ed18:	str	r0, [r6, #12]
   1ed1c:	bic	r0, r2, #786432	; 0xc0000
   1ed20:	str	r1, [r6, #20]
   1ed24:	str	r0, [r6, #24]
   1ed28:	ldr	r4, [sp, #28]
   1ed2c:	mov	r0, lr
   1ed30:	mov	r2, ip
   1ed34:	mov	r1, r4
   1ed38:	bl	1cfc8 <__assert_fail@plt+0xb868>
   1ed3c:	ldr	r1, [r4, #40]	; 0x28
   1ed40:	mov	r9, r6
   1ed44:	add	r0, r1, r0
   1ed48:	str	r0, [r4, #40]	; 0x28
   1ed4c:	mov	r0, r9
   1ed50:	sub	sp, fp, #28
   1ed54:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ed58:	ldrb	r0, [r7, #4]
   1ed5c:	cmp	r0, #9
   1ed60:	bne	2027c <__assert_fail@plt+0xeb1c>
   1ed64:	mov	lr, r7
   1ed68:	cmp	r4, #8
   1ed6c:	bhi	1ed80 <__assert_fail@plt+0xd620>
   1ed70:	ldr	r0, [sl, #84]	; 0x54
   1ed74:	mov	r1, #1
   1ed78:	orr	r0, r0, r1, lsl r4
   1ed7c:	str	r0, [sl, #84]	; 0x54
   1ed80:	ldr	r1, [sl, #64]	; 0x40
   1ed84:	ldr	ip, [sp, #48]	; 0x30
   1ed88:	cmp	r1, #31
   1ed8c:	beq	200c0 <__assert_fail@plt+0xe960>
   1ed90:	ldr	r0, [sl, #56]	; 0x38
   1ed94:	add	r0, r0, r1, lsl #5
   1ed98:	add	r2, r1, #1
   1ed9c:	mov	r1, #0
   1eda0:	cmp	r9, #0
   1eda4:	mvn	r3, #0
   1eda8:	str	r2, [sl, #64]	; 0x40
   1edac:	mov	r2, #17
   1edb0:	mov	r7, r0
   1edb4:	str	r1, [r7, #4]!
   1edb8:	add	r6, r7, #20
   1edbc:	str	r9, [r7, #4]
   1edc0:	str	r1, [r7, #8]
   1edc4:	str	r1, [r7, #12]
   1edc8:	str	r1, [r7, #16]
   1edcc:	stm	r6, {r1, r2, r3}
   1edd0:	strne	r7, [r9]
   1edd4:	str	r4, [r0, #24]
   1edd8:	mov	r0, lr
   1eddc:	mov	r1, r5
   1ede0:	mov	r2, ip
   1ede4:	bl	1cfc8 <__assert_fail@plt+0xb868>
   1ede8:	ldr	r1, [r5, #40]	; 0x28
   1edec:	ldr	ip, [sp, #48]	; 0x30
   1edf0:	ldr	lr, [sp, #44]	; 0x2c
   1edf4:	mov	r4, #0
   1edf8:	add	r0, r1, r0
   1edfc:	str	r0, [r5, #40]	; 0x28
   1ee00:	and	r0, ip, #16777216	; 0x1000000
   1ee04:	str	r0, [sp, #32]
   1ee08:	and	r0, ip, #2097152	; 0x200000
   1ee0c:	str	r0, [sp, #16]
   1ee10:	add	r0, sl, #56	; 0x38
   1ee14:	str	r0, [sp, #60]	; 0x3c
   1ee18:	add	r0, sl, #64	; 0x40
   1ee1c:	str	r0, [sp, #24]
   1ee20:	ldrb	r0, [lr, #4]
   1ee24:	mov	r9, r7
   1ee28:	cmp	r0, #23
   1ee2c:	bls	1ee54 <__assert_fail@plt+0xd6f4>
   1ee30:	b	1fd38 <__assert_fail@plt+0xe5d8>
   1ee34:	ldrb	r1, [lr, #4]
   1ee38:	cmp	r1, #23
   1ee3c:	cmpne	r1, #11
   1ee40:	beq	1fc84 <__assert_fail@plt+0xe524>
   1ee44:	ldrb	r0, [lr, #4]
   1ee48:	mov	r9, r7
   1ee4c:	cmp	r0, #23
   1ee50:	bhi	1fd38 <__assert_fail@plt+0xe5d8>
   1ee54:	movw	r2, #2048	; 0x800
   1ee58:	mov	r1, #1
   1ee5c:	movt	r2, #140	; 0x8c
   1ee60:	tst	r2, r1, lsl r0
   1ee64:	beq	1fd38 <__assert_fail@plt+0xe5d8>
   1ee68:	cmp	r0, #23
   1ee6c:	str	r9, [sp, #40]	; 0x28
   1ee70:	bne	1ef20 <__assert_fail@plt+0xd7c0>
   1ee74:	ldr	r9, [r5, #40]	; 0x28
   1ee78:	ldm	lr, {r7, sl}
   1ee7c:	mov	r6, r5
   1ee80:	mvn	r2, #0
   1ee84:	mov	r8, r2
   1ee88:	mov	r0, lr
   1ee8c:	mov	r1, r6
   1ee90:	mov	r2, ip
   1ee94:	mov	r5, r6
   1ee98:	bl	1cfc8 <__assert_fail@plt+0xb868>
   1ee9c:	ldr	r1, [r6, #40]	; 0x28
   1eea0:	ldr	lr, [sp, #44]	; 0x2c
   1eea4:	add	r0, r1, r0
   1eea8:	str	r0, [r6, #40]	; 0x28
   1eeac:	ldrb	r0, [lr, #4]
   1eeb0:	ldrb	r1, [lr]
   1eeb4:	cmp	r0, #24
   1eeb8:	beq	1ef3c <__assert_fail@plt+0xd7dc>
   1eebc:	cmp	r0, #2
   1eec0:	beq	1f598 <__assert_fail@plt+0xde38>
   1eec4:	cmp	r1, #44	; 0x2c
   1eec8:	beq	1ef3c <__assert_fail@plt+0xd7dc>
   1eecc:	ldr	ip, [sp, #48]	; 0x30
   1eed0:	mvn	r2, #1
   1eed4:	cmp	r1, #48	; 0x30
   1eed8:	bcc	1ee84 <__assert_fail@plt+0xd724>
   1eedc:	cmp	r0, #1
   1eee0:	bne	1ee84 <__assert_fail@plt+0xd724>
   1eee4:	cmn	r8, #2
   1eee8:	beq	1ee84 <__assert_fail@plt+0xd724>
   1eeec:	cmp	r1, #57	; 0x39
   1eef0:	bhi	1ee84 <__assert_fail@plt+0xd724>
   1eef4:	cmn	r8, #1
   1eef8:	beq	1ef18 <__assert_fail@plt+0xd7b8>
   1eefc:	add	r0, r8, r8, lsl #2
   1ef00:	add	r0, r1, r0, lsl #1
   1ef04:	movw	r1, #32816	; 0x8030
   1ef08:	cmp	r0, r1
   1ef0c:	movge	r0, r1
   1ef10:	sub	r2, r0, #48	; 0x30
   1ef14:	b	1ee84 <__assert_fail@plt+0xd724>
   1ef18:	sub	r2, r1, #48	; 0x30
   1ef1c:	b	1ee84 <__assert_fail@plt+0xd724>
   1ef20:	cmp	r0, #19
   1ef24:	sub	r0, r0, #18
   1ef28:	mvn	sl, #0
   1ef2c:	clz	r0, r0
   1ef30:	movweq	sl, #1
   1ef34:	lsr	r8, r0, #5
   1ef38:	b	1f0f0 <__assert_fail@plt+0xd990>
   1ef3c:	cmn	r8, #1
   1ef40:	bne	1ef84 <__assert_fail@plt+0xd824>
   1ef44:	ldr	ip, [sp, #48]	; 0x30
   1ef48:	cmp	r1, #44	; 0x2c
   1ef4c:	moveq	r8, #0
   1ef50:	cmpeq	r0, #1
   1ef54:	beq	1efe0 <__assert_fail@plt+0xd880>
   1ef58:	ldr	r0, [sp, #20]
   1ef5c:	mov	r1, #10
   1ef60:	str	r1, [r0]
   1ef64:	ldr	r9, [sp, #40]	; 0x28
   1ef68:	mov	r7, #0
   1ef6c:	mov	r5, r6
   1ef70:	clz	r0, r7
   1ef74:	cmp	r7, #0
   1ef78:	lsr	r0, r0, #5
   1ef7c:	beq	1fc64 <__assert_fail@plt+0xe504>
   1ef80:	b	1fc74 <__assert_fail@plt+0xe514>
   1ef84:	ldr	ip, [sp, #48]	; 0x30
   1ef88:	cmn	r8, #2
   1ef8c:	beq	1efa4 <__assert_fail@plt+0xd844>
   1ef90:	cmp	r0, #24
   1ef94:	beq	1f09c <__assert_fail@plt+0xd93c>
   1ef98:	cmp	r0, #1
   1ef9c:	cmpeq	r1, #44	; 0x2c
   1efa0:	beq	1efe0 <__assert_fail@plt+0xd880>
   1efa4:	ldr	r1, [sp, #16]
   1efa8:	cmp	r1, #0
   1efac:	beq	1f5a8 <__assert_fail@plt+0xde48>
   1efb0:	mov	r0, #1
   1efb4:	str	r9, [r6, #40]	; 0x28
   1efb8:	mov	r5, r6
   1efbc:	bfi	sl, r0, #0, #8
   1efc0:	stm	lr, {r7, sl}
   1efc4:	ldr	r9, [sp, #40]	; 0x28
   1efc8:	mov	r7, r9
   1efcc:	clz	r0, r7
   1efd0:	cmp	r7, #0
   1efd4:	lsr	r0, r0, #5
   1efd8:	beq	1fc64 <__assert_fail@plt+0xe504>
   1efdc:	b	1fc74 <__assert_fail@plt+0xe514>
   1efe0:	mvn	r2, #0
   1efe4:	str	r9, [sp, #56]	; 0x38
   1efe8:	mov	r9, r2
   1efec:	mov	r0, lr
   1eff0:	mov	r1, r6
   1eff4:	mov	r2, ip
   1eff8:	mov	r5, r6
   1effc:	bl	1cfc8 <__assert_fail@plt+0xb868>
   1f000:	ldr	r1, [r6, #40]	; 0x28
   1f004:	ldr	lr, [sp, #44]	; 0x2c
   1f008:	add	r0, r1, r0
   1f00c:	str	r0, [r6, #40]	; 0x28
   1f010:	ldrb	r0, [lr, #4]
   1f014:	cmp	r0, #24
   1f018:	beq	1f084 <__assert_fail@plt+0xd924>
   1f01c:	cmp	r0, #2
   1f020:	beq	1fa04 <__assert_fail@plt+0xe2a4>
   1f024:	ldrb	r1, [lr]
   1f028:	ldr	ip, [sp, #48]	; 0x30
   1f02c:	cmp	r1, #44	; 0x2c
   1f030:	beq	1f088 <__assert_fail@plt+0xd928>
   1f034:	mvn	r2, #1
   1f038:	cmp	r1, #48	; 0x30
   1f03c:	bcc	1efe8 <__assert_fail@plt+0xd888>
   1f040:	cmp	r0, #1
   1f044:	bne	1efe8 <__assert_fail@plt+0xd888>
   1f048:	cmn	r9, #2
   1f04c:	beq	1efe8 <__assert_fail@plt+0xd888>
   1f050:	cmp	r1, #57	; 0x39
   1f054:	bhi	1efe8 <__assert_fail@plt+0xd888>
   1f058:	cmn	r9, #1
   1f05c:	beq	1f07c <__assert_fail@plt+0xd91c>
   1f060:	add	r0, r9, r9, lsl #2
   1f064:	add	r0, r1, r0, lsl #1
   1f068:	movw	r1, #32816	; 0x8030
   1f06c:	cmp	r0, r1
   1f070:	movge	r0, r1
   1f074:	sub	r2, r0, #48	; 0x30
   1f078:	b	1efe8 <__assert_fail@plt+0xd888>
   1f07c:	sub	r2, r1, #48	; 0x30
   1f080:	b	1efe8 <__assert_fail@plt+0xd888>
   1f084:	ldr	ip, [sp, #48]	; 0x30
   1f088:	mov	r2, r9
   1f08c:	ldr	r9, [sp, #56]	; 0x38
   1f090:	cmn	r2, #2
   1f094:	bne	1f0a8 <__assert_fail@plt+0xd948>
   1f098:	b	1efa4 <__assert_fail@plt+0xd844>
   1f09c:	mov	r2, r8
   1f0a0:	cmn	r2, #2
   1f0a4:	beq	1efa4 <__assert_fail@plt+0xd844>
   1f0a8:	ldr	r9, [sp, #40]	; 0x28
   1f0ac:	cmp	r8, r2
   1f0b0:	mov	r1, #0
   1f0b4:	mov	r5, r6
   1f0b8:	movwle	r1, #1
   1f0bc:	cmp	r0, #24
   1f0c0:	bne	1f9c4 <__assert_fail@plt+0xe264>
   1f0c4:	add	r0, r2, #1
   1f0c8:	mov	sl, r2
   1f0cc:	clz	r0, r0
   1f0d0:	lsr	r0, r0, #5
   1f0d4:	orrs	r0, r1, r0
   1f0d8:	beq	1f9c4 <__assert_fail@plt+0xe264>
   1f0dc:	cmn	sl, #1
   1f0e0:	mov	r0, sl
   1f0e4:	moveq	r0, r8
   1f0e8:	cmp	r0, #32768	; 0x8000
   1f0ec:	bge	1fb94 <__assert_fail@plt+0xe434>
   1f0f0:	mov	r0, lr
   1f0f4:	mov	r1, r5
   1f0f8:	mov	r2, ip
   1f0fc:	bl	1cfc8 <__assert_fail@plt+0xb868>
   1f100:	ldr	r1, [r5, #40]	; 0x28
   1f104:	mov	r7, #0
   1f108:	cmp	r9, #0
   1f10c:	add	r0, r1, r0
   1f110:	str	r0, [r5, #40]	; 0x28
   1f114:	beq	1f5c0 <__assert_fail@plt+0xde60>
   1f118:	ldr	ip, [sp, #48]	; 0x30
   1f11c:	orrs	r0, sl, r8
   1f120:	beq	1f5dc <__assert_fail@plt+0xde7c>
   1f124:	mov	r0, #0
   1f128:	cmp	r8, #1
   1f12c:	mov	r7, r9
   1f130:	str	r0, [sp, #36]	; 0x24
   1f134:	ldr	lr, [sp, #44]	; 0x2c
   1f138:	ldr	r5, [sp, #24]
   1f13c:	bge	1f6a0 <__assert_fail@plt+0xdf40>
   1f140:	ldrb	r0, [r7, #24]
   1f144:	cmp	r0, #17
   1f148:	bne	1f1bc <__assert_fail@plt+0xda5c>
   1f14c:	ldr	r0, [r7, #20]
   1f150:	mov	r2, r7
   1f154:	mov	r1, r2
   1f158:	ldr	r2, [r2, #4]
   1f15c:	cmp	r2, #0
   1f160:	bne	1f154 <__assert_fail@plt+0xd9f4>
   1f164:	ldr	r2, [r1, #8]
   1f168:	cmp	r2, #0
   1f16c:	bne	1f154 <__assert_fail@plt+0xd9f4>
   1f170:	ldr	r2, [r1, #24]
   1f174:	uxtb	r3, r2
   1f178:	cmp	r3, #17
   1f17c:	bne	1f190 <__assert_fail@plt+0xda30>
   1f180:	ldr	r3, [r1, #20]
   1f184:	cmp	r3, r0
   1f188:	orreq	r2, r2, #524288	; 0x80000
   1f18c:	streq	r2, [r1, #24]
   1f190:	ldr	r3, [r1]
   1f194:	cmp	r3, #0
   1f198:	beq	1f1bc <__assert_fail@plt+0xda5c>
   1f19c:	ldr	r2, [r3, #8]
   1f1a0:	cmp	r2, r1
   1f1a4:	mov	r1, r3
   1f1a8:	beq	1f170 <__assert_fail@plt+0xda10>
   1f1ac:	cmp	r2, #0
   1f1b0:	mov	r1, r3
   1f1b4:	beq	1f170 <__assert_fail@plt+0xda10>
   1f1b8:	b	1f154 <__assert_fail@plt+0xd9f4>
   1f1bc:	ldr	r1, [r5]
   1f1c0:	cmn	sl, #1
   1f1c4:	mov	r6, #10
   1f1c8:	movweq	r6, #11
   1f1cc:	cmp	r1, #31
   1f1d0:	beq	1f968 <__assert_fail@plt+0xe208>
   1f1d4:	ldr	r0, [sp, #60]	; 0x3c
   1f1d8:	ldr	r0, [r0]
   1f1dc:	add	r9, r0, r1, lsl #5
   1f1e0:	add	r2, r1, #1
   1f1e4:	mvn	r0, #0
   1f1e8:	str	r2, [r5]
   1f1ec:	str	r4, [r9, #4]!
   1f1f0:	str	r7, [r9, #4]
   1f1f4:	str	r4, [r9, #8]
   1f1f8:	str	r4, [r9, #12]
   1f1fc:	str	r4, [r9, #16]
   1f200:	str	r4, [r9, #20]
   1f204:	str	r6, [r9, #24]
   1f208:	str	r0, [r9, #28]
   1f20c:	add	r0, r8, #2
   1f210:	str	r9, [r7]
   1f214:	cmp	r0, sl
   1f218:	bgt	1f518 <__assert_fail@plt+0xddb8>
   1f21c:	str	sl, [sp, #52]	; 0x34
   1f220:	mov	sl, r9
   1f224:	ldr	r1, [r5]
   1f228:	str	r0, [sp, #56]	; 0x38
   1f22c:	cmp	r1, #31
   1f230:	beq	1f450 <__assert_fail@plt+0xdcf0>
   1f234:	ldr	r0, [sp, #60]	; 0x3c
   1f238:	ldr	r0, [r0]
   1f23c:	add	r8, r0, r1, lsl #5
   1f240:	add	r3, r1, #1
   1f244:	add	r2, r7, #20
   1f248:	sub	r6, fp, #80	; 0x50
   1f24c:	str	r3, [r5]
   1f250:	str	r4, [r8, #4]!
   1f254:	str	r4, [r8, #8]
   1f258:	str	r4, [r8, #4]
   1f25c:	ldm	r2, {r0, r1}
   1f260:	mvn	r2, #0
   1f264:	str	r2, [r8, #28]
   1f268:	str	r4, [r8, #16]
   1f26c:	str	r4, [r8, #12]
   1f270:	str	r0, [r8, #20]
   1f274:	bic	r0, r1, #786432	; 0xc0000
   1f278:	str	r0, [r8, #24]
   1f27c:	mov	r0, r8
   1f280:	str	r8, [fp, #-80]	; 0xffffffb0
   1f284:	str	r9, [r0]
   1f288:	ldr	r0, [r6]
   1f28c:	ldr	r1, [r0, #24]
   1f290:	orr	r1, r1, #262144	; 0x40000
   1f294:	str	r1, [r0, #24]
   1f298:	ldr	r0, [r7, #4]
   1f29c:	ldr	r9, [r6]
   1f2a0:	cmp	r0, #0
   1f2a4:	beq	1f308 <__assert_fail@plt+0xdba8>
   1f2a8:	add	r6, r9, #4
   1f2ac:	mov	r7, r0
   1f2b0:	ldr	r1, [r5]
   1f2b4:	cmp	r1, #31
   1f2b8:	beq	1f348 <__assert_fail@plt+0xdbe8>
   1f2bc:	ldr	r0, [sp, #60]	; 0x3c
   1f2c0:	ldr	r0, [r0]
   1f2c4:	add	r0, r0, r1, lsl #5
   1f2c8:	add	r3, r1, #1
   1f2cc:	add	r2, r7, #20
   1f2d0:	str	r3, [r5]
   1f2d4:	mvn	r3, #0
   1f2d8:	str	r4, [r0, #4]!
   1f2dc:	str	r4, [r0, #8]
   1f2e0:	str	r4, [r0, #4]
   1f2e4:	ldm	r2, {r1, r2}
   1f2e8:	str	r3, [r0, #28]
   1f2ec:	str	r4, [r0, #16]
   1f2f0:	str	r4, [r0, #12]
   1f2f4:	str	r1, [r0, #20]
   1f2f8:	bic	r1, r2, #786432	; 0xc0000
   1f2fc:	str	r1, [r0, #24]
   1f300:	str	r0, [r6]
   1f304:	b	1f284 <__assert_fail@plt+0xdb24>
   1f308:	mov	r1, #0
   1f30c:	mov	r0, r7
   1f310:	ldr	r7, [r7, #8]
   1f314:	cmp	r7, r1
   1f318:	cmpne	r7, #0
   1f31c:	bne	1f338 <__assert_fail@plt+0xdbd8>
   1f320:	ldr	r7, [r0]
   1f324:	ldr	r9, [r9]
   1f328:	mov	r1, r0
   1f32c:	cmp	r7, #0
   1f330:	bne	1f30c <__assert_fail@plt+0xdbac>
   1f334:	b	1f37c <__assert_fail@plt+0xdc1c>
   1f338:	add	r6, r9, #8
   1f33c:	ldr	r1, [r5]
   1f340:	cmp	r1, #31
   1f344:	bne	1f2bc <__assert_fail@plt+0xdb5c>
   1f348:	mov	r0, #996	; 0x3e4
   1f34c:	bl	2e08c <__assert_fail@plt+0x1c92c>
   1f350:	cmp	r0, #0
   1f354:	beq	1f4c4 <__assert_fail@plt+0xdd64>
   1f358:	ldr	r2, [sp, #60]	; 0x3c
   1f35c:	ldr	ip, [sp, #48]	; 0x30
   1f360:	ldr	lr, [sp, #44]	; 0x2c
   1f364:	ldr	r1, [r2]
   1f368:	str	r1, [r0]
   1f36c:	mov	r1, #0
   1f370:	str	r0, [r2]
   1f374:	str	r1, [r5]
   1f378:	b	1f2c4 <__assert_fail@plt+0xdb64>
   1f37c:	mov	r7, r8
   1f380:	ldr	r1, [r5]
   1f384:	cmp	r1, #31
   1f388:	beq	1f4e0 <__assert_fail@plt+0xdd80>
   1f38c:	ldr	r0, [sp, #60]	; 0x3c
   1f390:	ldr	r0, [r0]
   1f394:	add	r6, r0, r1, lsl #5
   1f398:	add	r2, r1, #1
   1f39c:	mov	r0, #16
   1f3a0:	cmp	r7, #0
   1f3a4:	str	r2, [r5]
   1f3a8:	str	r4, [r6, #4]!
   1f3ac:	str	sl, [r6, #4]
   1f3b0:	str	r7, [r6, #8]
   1f3b4:	str	r4, [r6, #12]
   1f3b8:	str	r4, [r6, #16]
   1f3bc:	str	r4, [r6, #20]
   1f3c0:	str	r0, [r6, #24]
   1f3c4:	mvn	r0, #0
   1f3c8:	str	r0, [r6, #28]
   1f3cc:	str	r6, [sl]
   1f3d0:	beq	1fc3c <__assert_fail@plt+0xe4dc>
   1f3d4:	str	r6, [r7]
   1f3d8:	ldr	r1, [r5]
   1f3dc:	cmp	r1, #31
   1f3e0:	beq	1f484 <__assert_fail@plt+0xdd24>
   1f3e4:	ldr	r0, [sp, #60]	; 0x3c
   1f3e8:	ldr	r0, [r0]
   1f3ec:	add	sl, r0, r1, lsl #5
   1f3f0:	add	r2, r1, #1
   1f3f4:	mov	r0, #10
   1f3f8:	ldr	r1, [sp, #56]	; 0x38
   1f3fc:	str	r2, [r5]
   1f400:	str	r4, [sl, #4]!
   1f404:	str	r6, [sl, #4]
   1f408:	str	r4, [sl, #8]
   1f40c:	str	r4, [sl, #12]
   1f410:	str	r4, [sl, #16]
   1f414:	str	r4, [sl, #20]
   1f418:	str	r0, [sl, #24]
   1f41c:	mvn	r0, #0
   1f420:	str	r0, [sl, #28]
   1f424:	ldr	r0, [sp, #52]	; 0x34
   1f428:	str	sl, [r6]
   1f42c:	cmp	r1, r0
   1f430:	bge	1f514 <__assert_fail@plt+0xddb4>
   1f434:	ldr	r9, [r7]
   1f438:	mov	r0, r1
   1f43c:	add	r0, r1, #1
   1f440:	ldr	r1, [r5]
   1f444:	str	r0, [sp, #56]	; 0x38
   1f448:	cmp	r1, #31
   1f44c:	bne	1f234 <__assert_fail@plt+0xdad4>
   1f450:	mov	r0, #996	; 0x3e4
   1f454:	bl	2e08c <__assert_fail@plt+0x1c92c>
   1f458:	cmp	r0, #0
   1f45c:	beq	1f4b8 <__assert_fail@plt+0xdd58>
   1f460:	ldr	r2, [sp, #60]	; 0x3c
   1f464:	ldr	ip, [sp, #48]	; 0x30
   1f468:	ldr	lr, [sp, #44]	; 0x2c
   1f46c:	ldr	r1, [r2]
   1f470:	str	r1, [r0]
   1f474:	mov	r1, #0
   1f478:	str	r0, [r2]
   1f47c:	str	r1, [r5]
   1f480:	b	1f23c <__assert_fail@plt+0xdadc>
   1f484:	mov	r0, #996	; 0x3e4
   1f488:	bl	2e08c <__assert_fail@plt+0x1c92c>
   1f48c:	ldr	lr, [sp, #44]	; 0x2c
   1f490:	ldr	ip, [sp, #48]	; 0x30
   1f494:	cmp	r0, #0
   1f498:	beq	1fc3c <__assert_fail@plt+0xe4dc>
   1f49c:	ldr	r2, [sp, #60]	; 0x3c
   1f4a0:	ldr	r1, [r2]
   1f4a4:	str	r1, [r0]
   1f4a8:	mov	r1, #0
   1f4ac:	str	r0, [r2]
   1f4b0:	str	r1, [r5]
   1f4b4:	b	1f3ec <__assert_fail@plt+0xdc8c>
   1f4b8:	mov	r7, #0
   1f4bc:	str	r7, [fp, #-80]	; 0xffffffb0
   1f4c0:	b	1f4cc <__assert_fail@plt+0xdd6c>
   1f4c4:	mov	r7, #0
   1f4c8:	str	r7, [r6]
   1f4cc:	ldr	ip, [sp, #48]	; 0x30
   1f4d0:	ldr	lr, [sp, #44]	; 0x2c
   1f4d4:	ldr	r1, [r5]
   1f4d8:	cmp	r1, #31
   1f4dc:	bne	1f38c <__assert_fail@plt+0xdc2c>
   1f4e0:	mov	r0, #996	; 0x3e4
   1f4e4:	bl	2e08c <__assert_fail@plt+0x1c92c>
   1f4e8:	ldr	lr, [sp, #44]	; 0x2c
   1f4ec:	ldr	ip, [sp, #48]	; 0x30
   1f4f0:	cmp	r0, #0
   1f4f4:	beq	1fc3c <__assert_fail@plt+0xe4dc>
   1f4f8:	ldr	r2, [sp, #60]	; 0x3c
   1f4fc:	ldr	r1, [r2]
   1f500:	str	r1, [r0]
   1f504:	mov	r1, #0
   1f508:	str	r0, [r2]
   1f50c:	str	r1, [r5]
   1f510:	b	1f394 <__assert_fail@plt+0xdc34>
   1f514:	mov	r9, sl
   1f518:	ldr	r6, [sp, #36]	; 0x24
   1f51c:	ldr	r8, [sp, #28]
   1f520:	cmp	r6, #0
   1f524:	beq	1f57c <__assert_fail@plt+0xde1c>
   1f528:	ldr	r1, [r5]
   1f52c:	cmp	r1, #31
   1f530:	beq	1f9d0 <__assert_fail@plt+0xe270>
   1f534:	ldr	r0, [sp, #60]	; 0x3c
   1f538:	ldr	r0, [r0]
   1f53c:	add	r7, r0, r1, lsl #5
   1f540:	add	r2, r1, #1
   1f544:	mov	r0, #0
   1f548:	mov	r1, #16
   1f54c:	str	r2, [r5]
   1f550:	str	r0, [r7, #4]!
   1f554:	stmib	r7, {r6, r9}
   1f558:	str	r0, [r7, #12]
   1f55c:	str	r0, [r7, #16]
   1f560:	str	r0, [r7, #20]
   1f564:	str	r1, [r7, #24]
   1f568:	mvn	r1, #0
   1f56c:	str	r1, [r7, #28]
   1f570:	str	r7, [r6]
   1f574:	str	r7, [r9]
   1f578:	b	1f584 <__assert_fail@plt+0xde24>
   1f57c:	mov	r0, #0
   1f580:	mov	r7, r9
   1f584:	mov	r5, r8
   1f588:	ldr	r1, [sp, #32]
   1f58c:	cmp	r1, #0
   1f590:	beq	1ee44 <__assert_fail@plt+0xd6e4>
   1f594:	b	1ee34 <__assert_fail@plt+0xd6d4>
   1f598:	ldr	ip, [sp, #48]	; 0x30
   1f59c:	ldr	r1, [sp, #16]
   1f5a0:	cmp	r1, #0
   1f5a4:	bne	1efb0 <__assert_fail@plt+0xd850>
   1f5a8:	ldr	r1, [sp, #20]
   1f5ac:	cmp	r0, #2
   1f5b0:	mov	r0, #10
   1f5b4:	movweq	r0, #9
   1f5b8:	str	r0, [r1]
   1f5bc:	b	1ef64 <__assert_fail@plt+0xd804>
   1f5c0:	ldr	ip, [sp, #48]	; 0x30
   1f5c4:	ldr	lr, [sp, #44]	; 0x2c
   1f5c8:	clz	r0, r7
   1f5cc:	cmp	r7, #0
   1f5d0:	lsr	r0, r0, #5
   1f5d4:	beq	1fc64 <__assert_fail@plt+0xe504>
   1f5d8:	b	1fc74 <__assert_fail@plt+0xe514>
   1f5dc:	ldr	lr, [sp, #44]	; 0x2c
   1f5e0:	mov	r0, r9
   1f5e4:	mov	r6, r0
   1f5e8:	ldr	r0, [r0, #4]
   1f5ec:	cmp	r0, #0
   1f5f0:	bne	1f5e4 <__assert_fail@plt+0xde84>
   1f5f4:	ldr	r0, [r6, #8]
   1f5f8:	cmp	r0, #0
   1f5fc:	bne	1f5e4 <__assert_fail@plt+0xde84>
   1f600:	ldr	r0, [r6, #24]
   1f604:	movw	r1, #255	; 0xff
   1f608:	movt	r1, #4
   1f60c:	and	r0, r0, r1
   1f610:	cmp	r0, #3
   1f614:	beq	1f648 <__assert_fail@plt+0xdee8>
   1f618:	cmp	r0, #6
   1f61c:	bne	1f65c <__assert_fail@plt+0xdefc>
   1f620:	ldr	r5, [r6, #20]
   1f624:	ldr	r0, [r5]
   1f628:	bl	144c0 <__assert_fail@plt+0x2d60>
   1f62c:	ldr	r0, [r5, #4]
   1f630:	bl	144c0 <__assert_fail@plt+0x2d60>
   1f634:	ldr	r0, [r5, #8]
   1f638:	bl	144c0 <__assert_fail@plt+0x2d60>
   1f63c:	ldr	r0, [r5, #12]
   1f640:	bl	144c0 <__assert_fail@plt+0x2d60>
   1f644:	b	1f64c <__assert_fail@plt+0xdeec>
   1f648:	ldr	r5, [r6, #20]
   1f64c:	mov	r0, r5
   1f650:	bl	144c0 <__assert_fail@plt+0x2d60>
   1f654:	ldr	ip, [sp, #48]	; 0x30
   1f658:	ldr	lr, [sp, #44]	; 0x2c
   1f65c:	ldr	r1, [r6]
   1f660:	cmp	r1, #0
   1f664:	beq	1f688 <__assert_fail@plt+0xdf28>
   1f668:	ldr	r0, [r1, #8]
   1f66c:	cmp	r0, r6
   1f670:	mov	r6, r1
   1f674:	beq	1f600 <__assert_fail@plt+0xdea0>
   1f678:	cmp	r0, #0
   1f67c:	mov	r6, r1
   1f680:	beq	1f600 <__assert_fail@plt+0xdea0>
   1f684:	b	1f5e4 <__assert_fail@plt+0xde84>
   1f688:	ldr	r5, [sp, #28]
   1f68c:	clz	r0, r7
   1f690:	cmp	r7, #0
   1f694:	lsr	r0, r0, #5
   1f698:	beq	1fc64 <__assert_fail@plt+0xe504>
   1f69c:	b	1fc74 <__assert_fail@plt+0xe514>
   1f6a0:	mov	r3, r9
   1f6a4:	str	sl, [sp, #52]	; 0x34
   1f6a8:	str	r9, [sp, #36]	; 0x24
   1f6ac:	beq	1f99c <__assert_fail@plt+0xe23c>
   1f6b0:	ldr	sl, [sp, #40]	; 0x28
   1f6b4:	ldr	r0, [sl]
   1f6b8:	mov	r3, sl
   1f6bc:	str	r0, [sp, #36]	; 0x24
   1f6c0:	mov	r0, #2
   1f6c4:	ldr	r1, [r5]
   1f6c8:	str	r0, [sp, #56]	; 0x38
   1f6cc:	cmp	r1, #31
   1f6d0:	beq	1f8ac <__assert_fail@plt+0xe14c>
   1f6d4:	ldr	r0, [sp, #60]	; 0x3c
   1f6d8:	ldr	r0, [r0]
   1f6dc:	add	r6, r0, r1, lsl #5
   1f6e0:	add	r2, r3, #20
   1f6e4:	mov	r9, r3
   1f6e8:	add	r3, r1, #1
   1f6ec:	sub	r7, fp, #80	; 0x50
   1f6f0:	str	r3, [r5]
   1f6f4:	str	r4, [r6, #4]!
   1f6f8:	str	r4, [r6, #8]
   1f6fc:	str	r4, [r6, #4]
   1f700:	ldm	r2, {r0, r1}
   1f704:	mvn	r2, #0
   1f708:	str	r2, [r6, #28]
   1f70c:	str	r4, [r6, #16]
   1f710:	str	r4, [r6, #12]
   1f714:	str	r0, [r6, #20]
   1f718:	bic	r0, r1, #786432	; 0xc0000
   1f71c:	str	r0, [r6, #24]
   1f720:	mov	r0, r6
   1f724:	str	r6, [fp, #-80]	; 0xffffffb0
   1f728:	ldr	r1, [sp, #36]	; 0x24
   1f72c:	str	r1, [r0]
   1f730:	ldr	r0, [r7]
   1f734:	ldr	r1, [r0, #24]
   1f738:	orr	r1, r1, #262144	; 0x40000
   1f73c:	str	r1, [r0, #24]
   1f740:	ldr	r0, [r9, #4]
   1f744:	ldr	r1, [r7]
   1f748:	cmp	r0, #0
   1f74c:	str	r1, [sp, #36]	; 0x24
   1f750:	beq	1f7b4 <__assert_fail@plt+0xe054>
   1f754:	add	r7, r1, #4
   1f758:	mov	r9, r0
   1f75c:	ldr	r1, [r5]
   1f760:	cmp	r1, #31
   1f764:	beq	1f800 <__assert_fail@plt+0xe0a0>
   1f768:	ldr	r0, [sp, #60]	; 0x3c
   1f76c:	ldr	r0, [r0]
   1f770:	add	r0, r0, r1, lsl #5
   1f774:	add	r3, r1, #1
   1f778:	add	r2, r9, #20
   1f77c:	str	r3, [r5]
   1f780:	mvn	r3, #0
   1f784:	str	r4, [r0, #4]!
   1f788:	str	r4, [r0, #8]
   1f78c:	str	r4, [r0, #4]
   1f790:	ldm	r2, {r1, r2}
   1f794:	str	r3, [r0, #28]
   1f798:	str	r4, [r0, #16]
   1f79c:	str	r4, [r0, #12]
   1f7a0:	str	r1, [r0, #20]
   1f7a4:	bic	r1, r2, #786432	; 0xc0000
   1f7a8:	str	r1, [r0, #24]
   1f7ac:	str	r0, [r7]
   1f7b0:	b	1f728 <__assert_fail@plt+0xdfc8>
   1f7b4:	mov	r1, #0
   1f7b8:	mov	r0, r9
   1f7bc:	ldr	r9, [r9, #8]
   1f7c0:	cmp	r9, r1
   1f7c4:	cmpne	r9, #0
   1f7c8:	bne	1f7ec <__assert_fail@plt+0xe08c>
   1f7cc:	ldr	r1, [sp, #36]	; 0x24
   1f7d0:	ldr	r9, [r0]
   1f7d4:	ldr	r1, [r1]
   1f7d8:	cmp	r9, #0
   1f7dc:	str	r1, [sp, #36]	; 0x24
   1f7e0:	mov	r1, r0
   1f7e4:	bne	1f7b8 <__assert_fail@plt+0xe058>
   1f7e8:	b	1f834 <__assert_fail@plt+0xe0d4>
   1f7ec:	ldr	r0, [sp, #36]	; 0x24
   1f7f0:	add	r7, r0, #8
   1f7f4:	ldr	r1, [r5]
   1f7f8:	cmp	r1, #31
   1f7fc:	bne	1f768 <__assert_fail@plt+0xe008>
   1f800:	mov	r0, #996	; 0x3e4
   1f804:	bl	2e08c <__assert_fail@plt+0x1c92c>
   1f808:	cmp	r0, #0
   1f80c:	beq	1f948 <__assert_fail@plt+0xe1e8>
   1f810:	ldr	r2, [sp, #60]	; 0x3c
   1f814:	ldr	ip, [sp, #48]	; 0x30
   1f818:	ldr	lr, [sp, #44]	; 0x2c
   1f81c:	ldr	r1, [r2]
   1f820:	str	r1, [r0]
   1f824:	mov	r1, #0
   1f828:	str	r0, [r2]
   1f82c:	str	r1, [r5]
   1f830:	b	1f770 <__assert_fail@plt+0xe010>
   1f834:	mov	r3, r6
   1f838:	ldr	r1, [r5]
   1f83c:	cmp	r1, #31
   1f840:	beq	1f90c <__assert_fail@plt+0xe1ac>
   1f844:	ldr	r0, [sp, #60]	; 0x3c
   1f848:	ldr	r0, [r0]
   1f84c:	add	r2, r1, #1
   1f850:	add	r1, r0, r1, lsl #5
   1f854:	mov	r0, #16
   1f858:	cmp	r3, #0
   1f85c:	str	r2, [r5]
   1f860:	str	r4, [r1, #4]!
   1f864:	str	sl, [r1, #4]
   1f868:	str	r3, [r1, #8]
   1f86c:	str	r4, [r1, #12]
   1f870:	str	r4, [r1, #16]
   1f874:	str	r4, [r1, #20]
   1f878:	str	r0, [r1, #24]
   1f87c:	mvn	r0, #0
   1f880:	str	r1, [sp, #36]	; 0x24
   1f884:	str	r0, [r1, #28]
   1f888:	str	r1, [sl]
   1f88c:	beq	1fc3c <__assert_fail@plt+0xe4dc>
   1f890:	ldr	r1, [sp, #56]	; 0x38
   1f894:	ldr	sl, [sp, #36]	; 0x24
   1f898:	add	r0, r1, #1
   1f89c:	cmp	r1, r8
   1f8a0:	str	sl, [r3]
   1f8a4:	bne	1f6c4 <__assert_fail@plt+0xdf64>
   1f8a8:	b	1f99c <__assert_fail@plt+0xe23c>
   1f8ac:	mov	r0, #996	; 0x3e4
   1f8b0:	mov	r6, r3
   1f8b4:	bl	2e08c <__assert_fail@plt+0x1c92c>
   1f8b8:	cmp	r0, #0
   1f8bc:	beq	1f8ec <__assert_fail@plt+0xe18c>
   1f8c0:	ldr	r2, [sp, #60]	; 0x3c
   1f8c4:	ldr	r5, [sp, #24]
   1f8c8:	ldr	ip, [sp, #48]	; 0x30
   1f8cc:	ldr	lr, [sp, #44]	; 0x2c
   1f8d0:	mov	r3, r6
   1f8d4:	ldr	r1, [r2]
   1f8d8:	str	r1, [r0]
   1f8dc:	mov	r1, #0
   1f8e0:	str	r0, [r2]
   1f8e4:	str	r1, [r5]
   1f8e8:	b	1f6dc <__assert_fail@plt+0xdf7c>
   1f8ec:	ldr	ip, [sp, #48]	; 0x30
   1f8f0:	ldr	lr, [sp, #44]	; 0x2c
   1f8f4:	ldr	r5, [sp, #24]
   1f8f8:	mov	r3, #0
   1f8fc:	str	r3, [fp, #-80]	; 0xffffffb0
   1f900:	ldr	r1, [r5]
   1f904:	cmp	r1, #31
   1f908:	bne	1f844 <__assert_fail@plt+0xe0e4>
   1f90c:	mov	r0, #996	; 0x3e4
   1f910:	mov	r6, r3
   1f914:	bl	2e08c <__assert_fail@plt+0x1c92c>
   1f918:	ldr	lr, [sp, #44]	; 0x2c
   1f91c:	ldr	ip, [sp, #48]	; 0x30
   1f920:	cmp	r0, #0
   1f924:	beq	1fc3c <__assert_fail@plt+0xe4dc>
   1f928:	ldr	r2, [sp, #60]	; 0x3c
   1f92c:	mov	r3, r6
   1f930:	ldr	r1, [r2]
   1f934:	str	r1, [r0]
   1f938:	mov	r1, #0
   1f93c:	str	r0, [r2]
   1f940:	str	r1, [r5]
   1f944:	b	1f84c <__assert_fail@plt+0xe0ec>
   1f948:	ldr	ip, [sp, #48]	; 0x30
   1f94c:	ldr	lr, [sp, #44]	; 0x2c
   1f950:	mov	r3, #0
   1f954:	str	r3, [r7]
   1f958:	ldr	r1, [r5]
   1f95c:	cmp	r1, #31
   1f960:	bne	1f844 <__assert_fail@plt+0xe0e4>
   1f964:	b	1f90c <__assert_fail@plt+0xe1ac>
   1f968:	mov	r0, #996	; 0x3e4
   1f96c:	bl	2e08c <__assert_fail@plt+0x1c92c>
   1f970:	ldr	lr, [sp, #44]	; 0x2c
   1f974:	ldr	ip, [sp, #48]	; 0x30
   1f978:	cmp	r0, #0
   1f97c:	beq	1fc3c <__assert_fail@plt+0xe4dc>
   1f980:	ldr	r2, [sp, #60]	; 0x3c
   1f984:	ldr	r1, [r2]
   1f988:	str	r1, [r0]
   1f98c:	mov	r1, #0
   1f990:	str	r0, [r2]
   1f994:	str	r1, [r5]
   1f998:	b	1f1dc <__assert_fail@plt+0xda7c>
   1f99c:	ldr	sl, [sp, #52]	; 0x34
   1f9a0:	mov	r0, #0
   1f9a4:	cmp	r8, sl
   1f9a8:	bne	1fa1c <__assert_fail@plt+0xe2bc>
   1f9ac:	ldr	r7, [sp, #36]	; 0x24
   1f9b0:	ldr	r5, [sp, #28]
   1f9b4:	ldr	r1, [sp, #32]
   1f9b8:	cmp	r1, #0
   1f9bc:	beq	1ee44 <__assert_fail@plt+0xd6e4>
   1f9c0:	b	1ee34 <__assert_fail@plt+0xd6d4>
   1f9c4:	ldr	r0, [sp, #20]
   1f9c8:	mov	r1, #10
   1f9cc:	b	1fb9c <__assert_fail@plt+0xe43c>
   1f9d0:	mov	r0, #996	; 0x3e4
   1f9d4:	bl	2e08c <__assert_fail@plt+0x1c92c>
   1f9d8:	cmp	r0, #0
   1f9dc:	beq	1fbb8 <__assert_fail@plt+0xe458>
   1f9e0:	ldr	r2, [sp, #60]	; 0x3c
   1f9e4:	ldr	ip, [sp, #48]	; 0x30
   1f9e8:	ldr	lr, [sp, #44]	; 0x2c
   1f9ec:	ldr	r1, [r2]
   1f9f0:	str	r1, [r0]
   1f9f4:	mov	r1, #0
   1f9f8:	str	r0, [r2]
   1f9fc:	str	r1, [r5]
   1fa00:	b	1f53c <__assert_fail@plt+0xdddc>
   1fa04:	ldr	ip, [sp, #48]	; 0x30
   1fa08:	ldr	r9, [sp, #56]	; 0x38
   1fa0c:	ldr	r1, [sp, #16]
   1fa10:	cmp	r1, #0
   1fa14:	bne	1efb0 <__assert_fail@plt+0xd850>
   1fa18:	b	1f5a8 <__assert_fail@plt+0xde48>
   1fa1c:	mov	r6, r3
   1fa20:	ldr	r1, [r5]
   1fa24:	ldr	r9, [r6], #20
   1fa28:	cmp	r1, #31
   1fa2c:	beq	1fbe0 <__assert_fail@plt+0xe480>
   1fa30:	ldr	r0, [sp, #60]	; 0x3c
   1fa34:	ldr	r0, [r0]
   1fa38:	add	r7, r0, r1, lsl #5
   1fa3c:	add	r2, r1, #1
   1fa40:	str	r2, [r5]
   1fa44:	mvn	r2, #0
   1fa48:	str	r4, [r7, #4]!
   1fa4c:	str	r4, [r7, #8]
   1fa50:	str	r4, [r7, #4]
   1fa54:	ldm	r6, {r0, r1}
   1fa58:	str	r2, [r7, #28]
   1fa5c:	str	r4, [r7, #16]
   1fa60:	str	r4, [r7, #12]
   1fa64:	sub	r6, fp, #80	; 0x50
   1fa68:	str	r0, [r7, #20]
   1fa6c:	bic	r0, r1, #786432	; 0xc0000
   1fa70:	str	r0, [r7, #24]
   1fa74:	mov	r0, r7
   1fa78:	str	r7, [fp, #-80]	; 0xffffffb0
   1fa7c:	str	r9, [r0]
   1fa80:	ldr	r0, [r6]
   1fa84:	ldr	r1, [r0, #24]
   1fa88:	orr	r1, r1, #262144	; 0x40000
   1fa8c:	str	r1, [r0, #24]
   1fa90:	ldr	r0, [r3, #4]
   1fa94:	ldr	r9, [r6]
   1fa98:	cmp	r0, #0
   1fa9c:	beq	1fb0c <__assert_fail@plt+0xe3ac>
   1faa0:	add	r2, r9, #4
   1faa4:	mov	r6, r0
   1faa8:	ldr	r1, [r5]
   1faac:	str	r2, [sp, #56]	; 0x38
   1fab0:	cmp	r1, #31
   1fab4:	beq	1fb50 <__assert_fail@plt+0xe3f0>
   1fab8:	ldr	r0, [sp, #60]	; 0x3c
   1fabc:	ldr	r0, [r0]
   1fac0:	add	r0, r0, r1, lsl #5
   1fac4:	add	r3, r1, #1
   1fac8:	add	r2, r6, #20
   1facc:	str	r3, [r5]
   1fad0:	mvn	r3, #0
   1fad4:	str	r4, [r0, #4]!
   1fad8:	str	r4, [r0, #8]
   1fadc:	str	r4, [r0, #4]
   1fae0:	ldm	r2, {r1, r2}
   1fae4:	str	r3, [r0, #28]
   1fae8:	mov	r3, r6
   1faec:	ldr	r6, [sp, #56]	; 0x38
   1faf0:	str	r4, [r0, #16]
   1faf4:	str	r4, [r0, #12]
   1faf8:	str	r1, [r0, #20]
   1fafc:	bic	r1, r2, #786432	; 0xc0000
   1fb00:	str	r1, [r0, #24]
   1fb04:	str	r0, [r6]
   1fb08:	b	1fa7c <__assert_fail@plt+0xe31c>
   1fb0c:	mov	r1, #0
   1fb10:	ldr	r6, [r3, #8]
   1fb14:	mov	r0, r3
   1fb18:	cmp	r6, r1
   1fb1c:	cmpne	r6, #0
   1fb20:	bne	1fb3c <__assert_fail@plt+0xe3dc>
   1fb24:	ldr	r3, [r0]
   1fb28:	ldr	r9, [r9]
   1fb2c:	mov	r1, r0
   1fb30:	cmp	r3, #0
   1fb34:	bne	1fb10 <__assert_fail@plt+0xe3b0>
   1fb38:	b	1f140 <__assert_fail@plt+0xd9e0>
   1fb3c:	add	r2, r9, #8
   1fb40:	ldr	r1, [r5]
   1fb44:	str	r2, [sp, #56]	; 0x38
   1fb48:	cmp	r1, #31
   1fb4c:	bne	1fab8 <__assert_fail@plt+0xe358>
   1fb50:	mov	r0, #996	; 0x3e4
   1fb54:	str	r6, [sp, #12]
   1fb58:	bl	2e08c <__assert_fail@plt+0x1c92c>
   1fb5c:	cmp	r0, #0
   1fb60:	beq	1fc2c <__assert_fail@plt+0xe4cc>
   1fb64:	ldr	r2, [sp, #60]	; 0x3c
   1fb68:	ldr	r5, [sp, #24]
   1fb6c:	ldr	ip, [sp, #48]	; 0x30
   1fb70:	ldr	lr, [sp, #44]	; 0x2c
   1fb74:	ldr	sl, [sp, #52]	; 0x34
   1fb78:	ldr	r6, [sp, #12]
   1fb7c:	ldr	r1, [r2]
   1fb80:	str	r1, [r0]
   1fb84:	mov	r1, #0
   1fb88:	str	r0, [r2]
   1fb8c:	str	r1, [r5]
   1fb90:	b	1fac0 <__assert_fail@plt+0xe360>
   1fb94:	ldr	r0, [sp, #20]
   1fb98:	mov	r1, #15
   1fb9c:	str	r1, [r0]
   1fba0:	mov	r7, #0
   1fba4:	clz	r0, r7
   1fba8:	cmp	r7, #0
   1fbac:	lsr	r0, r0, #5
   1fbb0:	beq	1fc64 <__assert_fail@plt+0xe504>
   1fbb4:	b	1fc74 <__assert_fail@plt+0xe514>
   1fbb8:	ldr	ip, [sp, #48]	; 0x30
   1fbbc:	ldr	lr, [sp, #44]	; 0x2c
   1fbc0:	ldr	r9, [sp, #40]	; 0x28
   1fbc4:	mov	r7, #0
   1fbc8:	mov	r5, r8
   1fbcc:	clz	r0, r7
   1fbd0:	cmp	r7, #0
   1fbd4:	lsr	r0, r0, #5
   1fbd8:	beq	1fc64 <__assert_fail@plt+0xe504>
   1fbdc:	b	1fc74 <__assert_fail@plt+0xe514>
   1fbe0:	mov	r0, #996	; 0x3e4
   1fbe4:	mov	r7, r3
   1fbe8:	bl	2e08c <__assert_fail@plt+0x1c92c>
   1fbec:	cmp	r0, #0
   1fbf0:	beq	1fc24 <__assert_fail@plt+0xe4c4>
   1fbf4:	ldr	r2, [sp, #60]	; 0x3c
   1fbf8:	ldr	r5, [sp, #24]
   1fbfc:	ldr	ip, [sp, #48]	; 0x30
   1fc00:	ldr	lr, [sp, #44]	; 0x2c
   1fc04:	ldr	sl, [sp, #52]	; 0x34
   1fc08:	mov	r3, r7
   1fc0c:	ldr	r1, [r2]
   1fc10:	str	r1, [r0]
   1fc14:	mov	r1, #0
   1fc18:	str	r0, [r2]
   1fc1c:	str	r1, [r5]
   1fc20:	b	1fa38 <__assert_fail@plt+0xe2d8>
   1fc24:	str	r4, [fp, #-80]	; 0xffffffb0
   1fc28:	b	1fc34 <__assert_fail@plt+0xe4d4>
   1fc2c:	ldr	r0, [sp, #56]	; 0x38
   1fc30:	str	r4, [r0]
   1fc34:	ldr	ip, [sp, #48]	; 0x30
   1fc38:	ldr	lr, [sp, #44]	; 0x2c
   1fc3c:	ldr	r0, [sp, #20]
   1fc40:	ldr	r5, [sp, #28]
   1fc44:	ldr	r9, [sp, #40]	; 0x28
   1fc48:	mov	r1, #12
   1fc4c:	mov	r7, #0
   1fc50:	str	r1, [r0]
   1fc54:	clz	r0, r7
   1fc58:	cmp	r7, #0
   1fc5c:	lsr	r0, r0, #5
   1fc60:	bne	1fc74 <__assert_fail@plt+0xe514>
   1fc64:	ldr	r1, [sp, #20]
   1fc68:	ldr	r1, [r1]
   1fc6c:	cmp	r1, #0
   1fc70:	bne	1fd44 <__assert_fail@plt+0xe5e4>
   1fc74:	ldr	r1, [sp, #32]
   1fc78:	cmp	r1, #0
   1fc7c:	beq	1ee44 <__assert_fail@plt+0xd6e4>
   1fc80:	b	1ee34 <__assert_fail@plt+0xd6d4>
   1fc84:	movw	r6, #255	; 0xff
   1fc88:	cmp	r0, #0
   1fc8c:	movt	r6, #4
   1fc90:	bne	1fd28 <__assert_fail@plt+0xe5c8>
   1fc94:	mov	r5, r7
   1fc98:	ldr	r7, [r7, #4]
   1fc9c:	cmp	r7, #0
   1fca0:	bne	1fc94 <__assert_fail@plt+0xe534>
   1fca4:	ldr	r7, [r5, #8]
   1fca8:	cmp	r7, #0
   1fcac:	bne	1fc94 <__assert_fail@plt+0xe534>
   1fcb0:	ldr	r0, [r5, #24]
   1fcb4:	and	r0, r0, r6
   1fcb8:	cmp	r0, #3
   1fcbc:	beq	1fcf0 <__assert_fail@plt+0xe590>
   1fcc0:	cmp	r0, #6
   1fcc4:	bne	1fcfc <__assert_fail@plt+0xe59c>
   1fcc8:	ldr	r4, [r5, #20]
   1fccc:	ldr	r0, [r4]
   1fcd0:	bl	144c0 <__assert_fail@plt+0x2d60>
   1fcd4:	ldr	r0, [r4, #4]
   1fcd8:	bl	144c0 <__assert_fail@plt+0x2d60>
   1fcdc:	ldr	r0, [r4, #8]
   1fce0:	bl	144c0 <__assert_fail@plt+0x2d60>
   1fce4:	ldr	r0, [r4, #12]
   1fce8:	bl	144c0 <__assert_fail@plt+0x2d60>
   1fcec:	b	1fcf4 <__assert_fail@plt+0xe594>
   1fcf0:	ldr	r4, [r5, #20]
   1fcf4:	mov	r0, r4
   1fcf8:	bl	144c0 <__assert_fail@plt+0x2d60>
   1fcfc:	ldr	r0, [r5]
   1fd00:	cmp	r0, #0
   1fd04:	beq	1fd28 <__assert_fail@plt+0xe5c8>
   1fd08:	ldr	r7, [r0, #8]
   1fd0c:	cmp	r7, r5
   1fd10:	mov	r5, r0
   1fd14:	beq	1fcb0 <__assert_fail@plt+0xe550>
   1fd18:	cmp	r7, #0
   1fd1c:	mov	r5, r0
   1fd20:	beq	1fcb0 <__assert_fail@plt+0xe550>
   1fd24:	b	1fc94 <__assert_fail@plt+0xe534>
   1fd28:	mov	r0, #13
   1fd2c:	ldr	r1, [sp, #20]
   1fd30:	mov	r9, #0
   1fd34:	str	r0, [r1]
   1fd38:	mov	r0, r9
   1fd3c:	sub	sp, fp, #28
   1fd40:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1fd44:	cmp	r9, #0
   1fd48:	beq	1e30c <__assert_fail@plt+0xcbac>
   1fd4c:	movw	r6, #255	; 0xff
   1fd50:	movt	r6, #4
   1fd54:	mov	r5, r9
   1fd58:	ldr	r9, [r9, #4]
   1fd5c:	cmp	r9, #0
   1fd60:	bne	1fd54 <__assert_fail@plt+0xe5f4>
   1fd64:	ldr	r9, [r5, #8]
   1fd68:	cmp	r9, #0
   1fd6c:	bne	1fd54 <__assert_fail@plt+0xe5f4>
   1fd70:	ldr	r0, [r5, #24]
   1fd74:	and	r0, r0, r6
   1fd78:	cmp	r0, #3
   1fd7c:	beq	1fdb0 <__assert_fail@plt+0xe650>
   1fd80:	cmp	r0, #6
   1fd84:	bne	1fdbc <__assert_fail@plt+0xe65c>
   1fd88:	ldr	r4, [r5, #20]
   1fd8c:	ldr	r0, [r4]
   1fd90:	bl	144c0 <__assert_fail@plt+0x2d60>
   1fd94:	ldr	r0, [r4, #4]
   1fd98:	bl	144c0 <__assert_fail@plt+0x2d60>
   1fd9c:	ldr	r0, [r4, #8]
   1fda0:	bl	144c0 <__assert_fail@plt+0x2d60>
   1fda4:	ldr	r0, [r4, #12]
   1fda8:	bl	144c0 <__assert_fail@plt+0x2d60>
   1fdac:	b	1fdb4 <__assert_fail@plt+0xe654>
   1fdb0:	ldr	r4, [r5, #20]
   1fdb4:	mov	r0, r4
   1fdb8:	bl	144c0 <__assert_fail@plt+0x2d60>
   1fdbc:	ldr	r0, [r5]
   1fdc0:	cmp	r0, #0
   1fdc4:	beq	1e30c <__assert_fail@plt+0xcbac>
   1fdc8:	ldr	r9, [r0, #8]
   1fdcc:	cmp	r9, r5
   1fdd0:	mov	r5, r0
   1fdd4:	beq	1fd70 <__assert_fail@plt+0xe610>
   1fdd8:	cmp	r9, #0
   1fddc:	mov	r5, r0
   1fde0:	beq	1fd70 <__assert_fail@plt+0xe610>
   1fde4:	b	1fd54 <__assert_fail@plt+0xe5f4>
   1fde8:	cmp	r0, #2
   1fdec:	blt	1fe08 <__assert_fail@plt+0xe6a8>
   1fdf0:	ldr	r0, [r7, #36]	; 0x24
   1fdf4:	cmp	r0, #0
   1fdf8:	bne	1ea70 <__assert_fail@plt+0xd310>
   1fdfc:	ldrb	r0, [r7, #16]
   1fe00:	tst	r0, #1
   1fe04:	bne	1ea70 <__assert_fail@plt+0xd310>
   1fe08:	ldr	r0, [r7]
   1fe0c:	bl	144c0 <__assert_fail@plt+0x2d60>
   1fe10:	ldr	r0, [r7, #4]
   1fe14:	bl	144c0 <__assert_fail@plt+0x2d60>
   1fe18:	ldr	r0, [r7, #8]
   1fe1c:	bl	144c0 <__assert_fail@plt+0x2d60>
   1fe20:	ldr	r0, [r7, #12]
   1fe24:	bl	144c0 <__assert_fail@plt+0x2d60>
   1fe28:	mov	r0, r7
   1fe2c:	bl	144c0 <__assert_fail@plt+0x2d60>
   1fe30:	ldr	r1, [sl, #64]	; 0x40
   1fe34:	cmp	r1, #31
   1fe38:	beq	20370 <__assert_fail@plt+0xec10>
   1fe3c:	ldr	r0, [sl, #56]	; 0x38
   1fe40:	add	r0, r0, r1, lsl #5
   1fe44:	add	r2, r1, #1
   1fe48:	vmov.i32	q8, #0	; 0x00000000
   1fe4c:	ldr	ip, [sp, #48]	; 0x30
   1fe50:	ldr	lr, [sp, #44]	; 0x2c
   1fe54:	mov	r1, #3
   1fe58:	str	r2, [sl, #64]	; 0x40
   1fe5c:	mov	r2, #0
   1fe60:	add	r7, r0, #4
   1fe64:	str	r2, [r0, #20]
   1fe68:	str	r8, [r0, #24]
   1fe6c:	str	r1, [r0, #28]
   1fe70:	mov	r0, #28
   1fe74:	mov	r1, r7
   1fe78:	vst1.32	{d16-d17}, [r1], r0
   1fe7c:	mvn	r0, #0
   1fe80:	str	r0, [r1]
   1fe84:	b	1edd8 <__assert_fail@plt+0xd678>
   1fe88:	ldr	r8, [sp, #24]
   1fe8c:	ldr	r0, [sp, #20]
   1fe90:	ldr	r5, [sp, #28]
   1fe94:	ldr	sl, [sp, #52]	; 0x34
   1fe98:	ldr	r7, [sp, #60]	; 0x3c
   1fe9c:	str	r9, [r0]
   1fea0:	ldr	r4, [sp, #20]
   1fea4:	mov	r0, r8
   1fea8:	bl	144c0 <__assert_fail@plt+0x2d60>
   1feac:	ldr	r0, [r7]
   1feb0:	bl	144c0 <__assert_fail@plt+0x2d60>
   1feb4:	ldr	r0, [r7, #4]
   1feb8:	bl	144c0 <__assert_fail@plt+0x2d60>
   1febc:	ldr	r0, [r7, #8]
   1fec0:	bl	144c0 <__assert_fail@plt+0x2d60>
   1fec4:	ldr	r0, [r7, #12]
   1fec8:	bl	144c0 <__assert_fail@plt+0x2d60>
   1fecc:	mov	r0, r7
   1fed0:	bl	144c0 <__assert_fail@plt+0x2d60>
   1fed4:	ldr	r0, [r4]
   1fed8:	mov	r7, #0
   1fedc:	mov	r9, #0
   1fee0:	cmp	r0, #0
   1fee4:	ldr	ip, [sp, #48]	; 0x30
   1fee8:	ldr	lr, [sp, #44]	; 0x2c
   1feec:	beq	1edd8 <__assert_fail@plt+0xd678>
   1fef0:	b	1fd38 <__assert_fail@plt+0xe5d8>
   1fef4:	mov	r0, #996	; 0x3e4
   1fef8:	bl	2e08c <__assert_fail@plt+0x1c92c>
   1fefc:	cmp	r0, #0
   1ff00:	beq	2018c <__assert_fail@plt+0xea2c>
   1ff04:	ldr	r1, [sl, #56]	; 0x38
   1ff08:	ldr	r5, [sp, #28]
   1ff0c:	ldr	ip, [sp, #48]	; 0x30
   1ff10:	ldr	lr, [sp, #44]	; 0x2c
   1ff14:	str	r1, [r0]
   1ff18:	mov	r1, #0
   1ff1c:	str	r1, [sl, #64]	; 0x40
   1ff20:	str	r0, [sl, #56]	; 0x38
   1ff24:	b	1ddac <__assert_fail@plt+0xc64c>
   1ff28:	mov	r9, r0
   1ff2c:	str	sl, [sp, #52]	; 0x34
   1ff30:	b	1fe8c <__assert_fail@plt+0xe72c>
   1ff34:	mov	r9, #7
   1ff38:	str	sl, [sp, #52]	; 0x34
   1ff3c:	b	1fe8c <__assert_fail@plt+0xe72c>
   1ff40:	ldr	r4, [sp, #20]
   1ff44:	ldr	r7, [sp, #60]	; 0x3c
   1ff48:	mov	r0, #2
   1ff4c:	str	r0, [r4]
   1ff50:	b	1fea4 <__assert_fail@plt+0xe744>
   1ff54:	mov	r0, r8
   1ff58:	bl	144c0 <__assert_fail@plt+0x2d60>
   1ff5c:	mov	r0, r7
   1ff60:	bl	144c0 <__assert_fail@plt+0x2d60>
   1ff64:	b	1ecc4 <__assert_fail@plt+0xd564>
   1ff68:	mov	r0, #996	; 0x3e4
   1ff6c:	bl	2e08c <__assert_fail@plt+0x1c92c>
   1ff70:	cmp	r0, #0
   1ff74:	beq	2018c <__assert_fail@plt+0xea2c>
   1ff78:	ldr	r1, [sl, #56]	; 0x38
   1ff7c:	ldr	r5, [sp, #28]
   1ff80:	ldr	ip, [sp, #48]	; 0x30
   1ff84:	ldr	lr, [sp, #44]	; 0x2c
   1ff88:	str	r1, [r0]
   1ff8c:	mov	r1, #0
   1ff90:	str	r1, [sl, #64]	; 0x40
   1ff94:	str	r0, [sl, #56]	; 0x38
   1ff98:	b	1dff8 <__assert_fail@plt+0xc898>
   1ff9c:	mov	r0, #6
   1ffa0:	b	1ecc8 <__assert_fail@plt+0xd568>
   1ffa4:	mov	r0, #996	; 0x3e4
   1ffa8:	bl	2e08c <__assert_fail@plt+0x1c92c>
   1ffac:	cmp	r0, #0
   1ffb0:	beq	2018c <__assert_fail@plt+0xea2c>
   1ffb4:	ldr	r1, [sl, #56]	; 0x38
   1ffb8:	ldr	r5, [sp, #28]
   1ffbc:	ldr	ip, [sp, #48]	; 0x30
   1ffc0:	ldr	lr, [sp, #44]	; 0x2c
   1ffc4:	str	r1, [r0]
   1ffc8:	mov	r1, #0
   1ffcc:	str	r1, [sl, #64]	; 0x40
   1ffd0:	str	r0, [sl, #56]	; 0x38
   1ffd4:	b	1e240 <__assert_fail@plt+0xcae0>
   1ffd8:	mov	r0, #996	; 0x3e4
   1ffdc:	bl	2e08c <__assert_fail@plt+0x1c92c>
   1ffe0:	cmp	r0, #0
   1ffe4:	beq	2018c <__assert_fail@plt+0xea2c>
   1ffe8:	ldr	r1, [sl, #56]	; 0x38
   1ffec:	ldr	r5, [sp, #28]
   1fff0:	ldr	ip, [sp, #48]	; 0x30
   1fff4:	ldr	lr, [sp, #44]	; 0x2c
   1fff8:	str	r1, [r0]
   1fffc:	mov	r1, #0
   20000:	str	r1, [sl, #64]	; 0x40
   20004:	str	r0, [sl, #56]	; 0x38
   20008:	b	1e1e4 <__assert_fail@plt+0xca84>
   2000c:	mov	r0, #996	; 0x3e4
   20010:	bl	2e08c <__assert_fail@plt+0x1c92c>
   20014:	cmp	r0, #0
   20018:	beq	203a0 <__assert_fail@plt+0xec40>
   2001c:	ldr	r1, [sl, #56]	; 0x38
   20020:	ldr	ip, [sp, #48]	; 0x30
   20024:	ldr	lr, [sp, #44]	; 0x2c
   20028:	str	r1, [r0]
   2002c:	mov	r1, #0
   20030:	str	r1, [sl, #64]	; 0x40
   20034:	str	r0, [sl, #56]	; 0x38
   20038:	b	1ea8c <__assert_fail@plt+0xd32c>
   2003c:	mov	r0, #996	; 0x3e4
   20040:	bl	2e08c <__assert_fail@plt+0x1c92c>
   20044:	cmp	r0, #0
   20048:	beq	203a0 <__assert_fail@plt+0xec40>
   2004c:	ldr	r1, [sl, #56]	; 0x38
   20050:	ldr	ip, [sp, #48]	; 0x30
   20054:	ldr	lr, [sp, #44]	; 0x2c
   20058:	str	r1, [r0]
   2005c:	mov	r1, #0
   20060:	str	r1, [sl, #64]	; 0x40
   20064:	str	r0, [sl, #56]	; 0x38
   20068:	b	1eb38 <__assert_fail@plt+0xd3d8>
   2006c:	mov	r0, #996	; 0x3e4
   20070:	bl	2e08c <__assert_fail@plt+0x1c92c>
   20074:	cmp	r0, #0
   20078:	beq	203a0 <__assert_fail@plt+0xec40>
   2007c:	ldr	r1, [sl, #56]	; 0x38
   20080:	ldr	ip, [sp, #48]	; 0x30
   20084:	ldr	lr, [sp, #44]	; 0x2c
   20088:	str	r1, [r0]
   2008c:	mov	r1, #0
   20090:	str	r1, [sl, #64]	; 0x40
   20094:	str	r0, [sl, #56]	; 0x38
   20098:	b	1eb84 <__assert_fail@plt+0xd424>
   2009c:	str	sl, [sp, #52]	; 0x34
   200a0:	mov	r9, #3
   200a4:	b	1fe8c <__assert_fail@plt+0xe72c>
   200a8:	mov	r0, r8
   200ac:	bl	144c0 <__assert_fail@plt+0x2d60>
   200b0:	ldr	lr, [sp, #44]	; 0x2c
   200b4:	ldr	ip, [sp, #48]	; 0x30
   200b8:	mov	r7, r4
   200bc:	b	1edd8 <__assert_fail@plt+0xd678>
   200c0:	mov	r0, #996	; 0x3e4
   200c4:	bl	2e08c <__assert_fail@plt+0x1c92c>
   200c8:	cmp	r0, #0
   200cc:	beq	2018c <__assert_fail@plt+0xea2c>
   200d0:	ldr	r1, [sl, #56]	; 0x38
   200d4:	ldr	r5, [sp, #28]
   200d8:	ldr	ip, [sp, #48]	; 0x30
   200dc:	ldr	lr, [sp, #44]	; 0x2c
   200e0:	str	r1, [r0]
   200e4:	mov	r1, #0
   200e8:	str	r1, [sl, #64]	; 0x40
   200ec:	str	r0, [sl, #56]	; 0x38
   200f0:	b	1ed94 <__assert_fail@plt+0xd634>
   200f4:	mov	r0, #996	; 0x3e4
   200f8:	bl	2e08c <__assert_fail@plt+0x1c92c>
   200fc:	cmp	r0, #0
   20100:	beq	2033c <__assert_fail@plt+0xebdc>
   20104:	ldr	r1, [sl, #56]	; 0x38
   20108:	ldr	ip, [sp, #48]	; 0x30
   2010c:	ldr	lr, [sp, #44]	; 0x2c
   20110:	mov	r9, #0
   20114:	str	r1, [r0]
   20118:	mov	r1, #0
   2011c:	str	r1, [sl, #64]	; 0x40
   20120:	str	r0, [sl, #56]	; 0x38
   20124:	b	1def0 <__assert_fail@plt+0xc790>
   20128:	mov	r0, #996	; 0x3e4
   2012c:	bl	2e08c <__assert_fail@plt+0x1c92c>
   20130:	cmp	r0, #0
   20134:	beq	20348 <__assert_fail@plt+0xebe8>
   20138:	ldr	r1, [sl, #56]	; 0x38
   2013c:	ldr	ip, [sp, #48]	; 0x30
   20140:	ldr	lr, [sp, #44]	; 0x2c
   20144:	mov	r9, #0
   20148:	str	r1, [r0]
   2014c:	mov	r1, #0
   20150:	str	r1, [sl, #64]	; 0x40
   20154:	str	r0, [sl, #56]	; 0x38
   20158:	b	1ebdc <__assert_fail@plt+0xd47c>
   2015c:	mov	r0, #996	; 0x3e4
   20160:	bl	2e08c <__assert_fail@plt+0x1c92c>
   20164:	cmp	r0, #0
   20168:	beq	2018c <__assert_fail@plt+0xea2c>
   2016c:	ldr	r1, [sl, #56]	; 0x38
   20170:	ldr	ip, [sp, #48]	; 0x30
   20174:	ldr	lr, [sp, #44]	; 0x2c
   20178:	str	r1, [r0]
   2017c:	mov	r1, #0
   20180:	str	r1, [sl, #64]	; 0x40
   20184:	str	r0, [sl, #56]	; 0x38
   20188:	b	1ecec <__assert_fail@plt+0xd58c>
   2018c:	mov	r0, #12
   20190:	b	1fd2c <__assert_fail@plt+0xe5cc>
   20194:	mov	r4, #0
   20198:	mov	r5, #0
   2019c:	b	201a8 <__assert_fail@plt+0xea48>
   201a0:	mov	r5, #4
   201a4:	mov	r4, #128	; 0x80
   201a8:	bl	11604 <__ctype_b_loc@plt>
   201ac:	ldr	r0, [r0]
   201b0:	ldr	ip, [sp, #48]	; 0x30
   201b4:	ldr	lr, [sp, #44]	; 0x2c
   201b8:	mov	r1, #1
   201bc:	mov	r9, #0
   201c0:	add	r7, r0, r4, lsl #1
   201c4:	b	201dc <__assert_fail@plt+0xea7c>
   201c8:	add	r5, r5, #1
   201cc:	add	r7, r7, #64	; 0x40
   201d0:	add	r4, r4, #32
   201d4:	cmp	r5, #8
   201d8:	beq	1dec4 <__assert_fail@plt+0xc764>
   201dc:	add	r0, sl, r5, lsl #2
   201e0:	mov	r3, #0
   201e4:	add	r2, r0, #96	; 0x60
   201e8:	mov	r0, r7
   201ec:	add	r6, r4, r3
   201f0:	cmp	r6, #95	; 0x5f
   201f4:	bne	20220 <__assert_fail@plt+0xeac0>
   201f8:	ldr	r6, [r2]
   201fc:	orr	r6, r6, r1, lsl r3
   20200:	str	r6, [r2]
   20204:	add	r3, r3, #1
   20208:	add	r0, r0, #2
   2020c:	cmp	r3, #32
   20210:	beq	201c8 <__assert_fail@plt+0xea68>
   20214:	add	r6, r4, r3
   20218:	cmp	r6, #95	; 0x5f
   2021c:	beq	201f8 <__assert_fail@plt+0xea98>
   20220:	ldrh	r6, [r0]
   20224:	ands	r6, r6, #8
   20228:	beq	20204 <__assert_fail@plt+0xeaa4>
   2022c:	b	201f8 <__assert_fail@plt+0xea98>
   20230:	ldr	ip, [sp, #48]	; 0x30
   20234:	ldr	lr, [sp, #44]	; 0x2c
   20238:	mov	r5, #0
   2023c:	mov	r9, #0
   20240:	ldr	r1, [sl, #64]	; 0x40
   20244:	cmp	r1, #31
   20248:	bne	1ec78 <__assert_fail@plt+0xd518>
   2024c:	mov	r0, #996	; 0x3e4
   20250:	bl	2e08c <__assert_fail@plt+0x1c92c>
   20254:	ldr	lr, [sp, #44]	; 0x2c
   20258:	ldr	ip, [sp, #48]	; 0x30
   2025c:	cmp	r0, #0
   20260:	beq	1ecc4 <__assert_fail@plt+0xd564>
   20264:	ldr	r1, [sl, #56]	; 0x38
   20268:	str	r1, [r0]
   2026c:	mov	r1, #0
   20270:	str	r1, [sl, #64]	; 0x40
   20274:	str	r0, [sl, #56]	; 0x38
   20278:	b	1ec7c <__assert_fail@plt+0xd51c>
   2027c:	cmp	r9, #0
   20280:	beq	20320 <__assert_fail@plt+0xebc0>
   20284:	movw	r5, #255	; 0xff
   20288:	movt	r5, #4
   2028c:	mov	r6, r9
   20290:	ldr	r9, [r9, #4]
   20294:	cmp	r9, #0
   20298:	bne	2028c <__assert_fail@plt+0xeb2c>
   2029c:	ldr	r9, [r6, #8]
   202a0:	cmp	r9, #0
   202a4:	bne	2028c <__assert_fail@plt+0xeb2c>
   202a8:	ldr	r0, [r6, #24]
   202ac:	and	r0, r0, r5
   202b0:	cmp	r0, #3
   202b4:	beq	202e8 <__assert_fail@plt+0xeb88>
   202b8:	cmp	r0, #6
   202bc:	bne	202f4 <__assert_fail@plt+0xeb94>
   202c0:	ldr	r4, [r6, #20]
   202c4:	ldr	r0, [r4]
   202c8:	bl	144c0 <__assert_fail@plt+0x2d60>
   202cc:	ldr	r0, [r4, #4]
   202d0:	bl	144c0 <__assert_fail@plt+0x2d60>
   202d4:	ldr	r0, [r4, #8]
   202d8:	bl	144c0 <__assert_fail@plt+0x2d60>
   202dc:	ldr	r0, [r4, #12]
   202e0:	bl	144c0 <__assert_fail@plt+0x2d60>
   202e4:	b	202ec <__assert_fail@plt+0xeb8c>
   202e8:	ldr	r4, [r6, #20]
   202ec:	mov	r0, r4
   202f0:	bl	144c0 <__assert_fail@plt+0x2d60>
   202f4:	ldr	r0, [r6]
   202f8:	cmp	r0, #0
   202fc:	beq	20320 <__assert_fail@plt+0xebc0>
   20300:	ldr	r9, [r0, #8]
   20304:	cmp	r9, r6
   20308:	mov	r6, r0
   2030c:	beq	202a8 <__assert_fail@plt+0xeb48>
   20310:	cmp	r9, #0
   20314:	mov	r6, r0
   20318:	beq	202a8 <__assert_fail@plt+0xeb48>
   2031c:	b	2028c <__assert_fail@plt+0xeb2c>
   20320:	mov	r0, #8
   20324:	b	1fd2c <__assert_fail@plt+0xe5cc>
   20328:	ldr	r8, [sp, #24]
   2032c:	mov	r9, r0
   20330:	b	1fe8c <__assert_fail@plt+0xe72c>
   20334:	ldr	r8, [sp, #24]
   20338:	b	200a0 <__assert_fail@plt+0xe940>
   2033c:	mov	r4, #0
   20340:	mov	r0, #9
   20344:	b	20350 <__assert_fail@plt+0xebf0>
   20348:	mov	r4, #0
   2034c:	mov	r0, #10
   20350:	ldr	ip, [sp, #48]	; 0x30
   20354:	ldr	lr, [sp, #44]	; 0x2c
   20358:	mov	r9, #0
   2035c:	str	r0, [lr]
   20360:	ldr	r1, [sl, #64]	; 0x40
   20364:	cmp	r1, #31
   20368:	bne	1ec2c <__assert_fail@plt+0xd4cc>
   2036c:	b	1df40 <__assert_fail@plt+0xc7e0>
   20370:	mov	r0, #996	; 0x3e4
   20374:	bl	2e08c <__assert_fail@plt+0x1c92c>
   20378:	cmp	r0, #0
   2037c:	beq	203a0 <__assert_fail@plt+0xec40>
   20380:	ldr	r1, [sl, #56]	; 0x38
   20384:	str	r1, [r0]
   20388:	mov	r1, #0
   2038c:	str	r1, [sl, #64]	; 0x40
   20390:	str	r0, [sl, #56]	; 0x38
   20394:	b	1fe40 <__assert_fail@plt+0xe6e0>
   20398:	ldr	r5, [sp, #28]
   2039c:	ldr	r7, [sp, #60]	; 0x3c
   203a0:	ldr	r4, [sp, #20]
   203a4:	mov	r0, #12
   203a8:	str	r0, [r4]
   203ac:	b	1fea4 <__assert_fail@plt+0xe744>
   203b0:	mov	r0, r6
   203b4:	bl	144c0 <__assert_fail@plt+0x2d60>
   203b8:	mov	r0, r9
   203bc:	bl	144c0 <__assert_fail@plt+0x2d60>
   203c0:	ldr	r8, [sp, #24]
   203c4:	mov	r9, #12
   203c8:	b	1fe8c <__assert_fail@plt+0xe72c>
   203cc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   203d0:	add	fp, sp, #28
   203d4:	sub	sp, sp, #12
   203d8:	mov	r9, r1
   203dc:	mov	r6, r0
   203e0:	mov	r4, #0
   203e4:	mov	r0, #32
   203e8:	mov	r1, #1
   203ec:	mov	sl, r3
   203f0:	mov	r5, r2
   203f4:	str	r4, [sp, #8]
   203f8:	bl	2e038 <__assert_fail@plt+0x1c8d8>
   203fc:	ldr	r1, [fp, #12]
   20400:	cmp	r0, #0
   20404:	beq	20784 <__assert_fail@plt+0xf024>
   20408:	mov	r7, r0
   2040c:	mov	r0, #40	; 0x28
   20410:	mov	r1, #1
   20414:	bl	2e038 <__assert_fail@plt+0x1c8d8>
   20418:	cmp	r0, #0
   2041c:	beq	206bc <__assert_fail@plt+0xef5c>
   20420:	mov	r8, r0
   20424:	ldrb	r0, [r0, #16]
   20428:	ldr	r1, [fp, #8]
   2042c:	mov	r4, #0
   20430:	add	r3, sp, #8
   20434:	str	r5, [sp]
   20438:	mov	r2, r8
   2043c:	str	r4, [sp, #4]
   20440:	and	r0, r0, #254	; 0xfe
   20444:	orr	r0, r0, r1
   20448:	mov	r1, r7
   2044c:	strb	r0, [r8, #16]
   20450:	mov	r0, r9
   20454:	bl	20c74 <__assert_fail@plt+0xf514>
   20458:	cmp	r0, #0
   2045c:	bne	206e0 <__assert_fail@plt+0xef80>
   20460:	ldrb	r0, [sl]
   20464:	cmp	r0, #0
   20468:	beq	20494 <__assert_fail@plt+0xed34>
   2046c:	add	r1, sl, #1
   20470:	mov	r2, #1
   20474:	ubfx	r3, r0, #5, #3
   20478:	and	r0, r0, #31
   2047c:	ldr	r5, [r7, r3, lsl #2]
   20480:	orr	r0, r5, r2, lsl r0
   20484:	str	r0, [r7, r3, lsl #2]
   20488:	ldrb	r0, [r1], #1
   2048c:	cmp	r0, #0
   20490:	bne	20474 <__assert_fail@plt+0xed14>
   20494:	ldr	r0, [fp, #8]
   20498:	cmp	r0, #0
   2049c:	beq	205cc <__assert_fail@plt+0xee6c>
   204a0:	vld1.32	{d16-d17}, [r7]
   204a4:	mov	r0, r7
   204a8:	vmvn	q8, q8
   204ac:	vst1.32	{d16-d17}, [r0]!
   204b0:	vld1.32	{d16-d17}, [r0]
   204b4:	vmvn	q8, q8
   204b8:	vst1.32	{d16-d17}, [r0]
   204bc:	ldr	r0, [r6, #92]	; 0x5c
   204c0:	cmp	r0, #2
   204c4:	bge	205d8 <__assert_fail@plt+0xee78>
   204c8:	ldr	r1, [r6, #64]	; 0x40
   204cc:	cmp	r1, #31
   204d0:	beq	2065c <__assert_fail@plt+0xeefc>
   204d4:	ldr	r0, [r6, #56]	; 0x38
   204d8:	add	r0, r0, r1, lsl #5
   204dc:	add	r2, r1, #1
   204e0:	vmov.i32	q8, #0	; 0x00000000
   204e4:	mov	r1, #3
   204e8:	str	r2, [r6, #64]	; 0x40
   204ec:	mov	r2, #0
   204f0:	add	r5, r0, #4
   204f4:	str	r2, [r0, #20]
   204f8:	str	r7, [r0, #24]
   204fc:	str	r1, [r0, #28]
   20500:	mov	r0, #28
   20504:	mov	r1, r5
   20508:	vst1.32	{d16-d17}, [r1], r0
   2050c:	mvn	r0, #0
   20510:	str	r0, [r1]
   20514:	ldr	r0, [r6, #92]	; 0x5c
   20518:	cmp	r0, #2
   2051c:	blt	20684 <__assert_fail@plt+0xef24>
   20520:	ldrb	r0, [r6, #88]	; 0x58
   20524:	orr	r0, r0, #2
   20528:	strb	r0, [r6, #88]	; 0x58
   2052c:	ldr	r1, [r6, #64]	; 0x40
   20530:	cmp	r1, #31
   20534:	beq	20728 <__assert_fail@plt+0xefc8>
   20538:	ldr	r0, [r6, #56]	; 0x38
   2053c:	add	r0, r0, r1, lsl #5
   20540:	vmov.i32	q8, #0	; 0x00000000
   20544:	add	r2, r1, #1
   20548:	mov	r1, #6
   2054c:	mov	r4, #0
   20550:	str	r2, [r6, #64]	; 0x40
   20554:	add	r7, r0, #4
   20558:	str	r4, [r0, #20]
   2055c:	str	r8, [r0, #24]
   20560:	str	r1, [r0, #28]
   20564:	mov	r0, #28
   20568:	mov	r1, r7
   2056c:	vst1.32	{d16-d17}, [r1], r0
   20570:	mvn	r0, #0
   20574:	str	r0, [r1]
   20578:	ldr	r1, [r6, #64]	; 0x40
   2057c:	cmp	r1, #31
   20580:	beq	20798 <__assert_fail@plt+0xf038>
   20584:	ldr	r0, [r6, #56]	; 0x38
   20588:	add	r4, r0, r1, lsl #5
   2058c:	add	r2, r1, #1
   20590:	mov	r0, #0
   20594:	mov	r1, #10
   20598:	str	r2, [r6, #64]	; 0x40
   2059c:	mvn	r2, #0
   205a0:	str	r0, [r4, #4]!
   205a4:	add	r3, r4, #20
   205a8:	stmib	r4, {r5, r7}
   205ac:	str	r0, [r4, #12]
   205b0:	str	r0, [r4, #16]
   205b4:	stm	r3, {r0, r1, r2}
   205b8:	str	r4, [r5]
   205bc:	str	r4, [r7]
   205c0:	mov	r0, r4
   205c4:	sub	sp, fp, #28
   205c8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   205cc:	ldr	r0, [r6, #92]	; 0x5c
   205d0:	cmp	r0, #2
   205d4:	blt	204c8 <__assert_fail@plt+0xed68>
   205d8:	ldr	r5, [r6, #60]	; 0x3c
   205dc:	ldm	r7, {r0, r1, r2, ip}
   205e0:	ldr	r3, [r5]
   205e4:	and	r0, r0, r3
   205e8:	str	r0, [r7]
   205ec:	ldr	r0, [r5, #4]
   205f0:	and	r0, r1, r0
   205f4:	str	r0, [r7, #4]
   205f8:	ldr	r0, [r5, #8]
   205fc:	and	r0, r2, r0
   20600:	str	r0, [r7, #8]
   20604:	ldr	r0, [r5, #12]
   20608:	and	r0, ip, r0
   2060c:	str	r0, [r7, #12]
   20610:	ldr	r0, [r7, #16]
   20614:	ldr	r1, [r5, #16]
   20618:	and	r0, r0, r1
   2061c:	str	r0, [r7, #16]
   20620:	ldr	r0, [r5, #20]
   20624:	ldr	r1, [r7, #20]
   20628:	and	r0, r1, r0
   2062c:	str	r0, [r7, #20]
   20630:	ldr	r0, [r5, #24]
   20634:	ldr	r1, [r7, #24]
   20638:	and	r0, r1, r0
   2063c:	str	r0, [r7, #24]
   20640:	ldr	r0, [r5, #28]
   20644:	ldr	r1, [r7, #28]
   20648:	and	r0, r1, r0
   2064c:	str	r0, [r7, #28]
   20650:	ldr	r1, [r6, #64]	; 0x40
   20654:	cmp	r1, #31
   20658:	bne	204d4 <__assert_fail@plt+0xed74>
   2065c:	mov	r0, #996	; 0x3e4
   20660:	bl	2e08c <__assert_fail@plt+0x1c92c>
   20664:	cmp	r0, #0
   20668:	beq	20750 <__assert_fail@plt+0xeff0>
   2066c:	ldr	r1, [r6, #56]	; 0x38
   20670:	str	r1, [r0]
   20674:	mov	r1, #0
   20678:	str	r1, [r6, #64]	; 0x40
   2067c:	str	r0, [r6, #56]	; 0x38
   20680:	b	204d8 <__assert_fail@plt+0xed78>
   20684:	ldr	r0, [r8]
   20688:	bl	144c0 <__assert_fail@plt+0x2d60>
   2068c:	ldr	r0, [r8, #4]
   20690:	bl	144c0 <__assert_fail@plt+0x2d60>
   20694:	ldr	r0, [r8, #8]
   20698:	bl	144c0 <__assert_fail@plt+0x2d60>
   2069c:	ldr	r0, [r8, #12]
   206a0:	bl	144c0 <__assert_fail@plt+0x2d60>
   206a4:	mov	r0, r8
   206a8:	bl	144c0 <__assert_fail@plt+0x2d60>
   206ac:	mov	r4, r5
   206b0:	mov	r0, r4
   206b4:	sub	sp, fp, #28
   206b8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   206bc:	mov	r0, r7
   206c0:	bl	144c0 <__assert_fail@plt+0x2d60>
   206c4:	ldr	r1, [fp, #12]
   206c8:	mov	r0, #12
   206cc:	mov	r4, #0
   206d0:	str	r0, [r1]
   206d4:	mov	r0, r4
   206d8:	sub	sp, fp, #28
   206dc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   206e0:	mov	r5, r0
   206e4:	mov	r0, r7
   206e8:	bl	144c0 <__assert_fail@plt+0x2d60>
   206ec:	ldr	r0, [r8]
   206f0:	bl	144c0 <__assert_fail@plt+0x2d60>
   206f4:	ldr	r0, [r8, #4]
   206f8:	bl	144c0 <__assert_fail@plt+0x2d60>
   206fc:	ldr	r0, [r8, #8]
   20700:	bl	144c0 <__assert_fail@plt+0x2d60>
   20704:	ldr	r0, [r8, #12]
   20708:	bl	144c0 <__assert_fail@plt+0x2d60>
   2070c:	mov	r0, r8
   20710:	bl	144c0 <__assert_fail@plt+0x2d60>
   20714:	ldr	r0, [fp, #12]
   20718:	str	r5, [r0]
   2071c:	mov	r0, r4
   20720:	sub	sp, fp, #28
   20724:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20728:	mov	r0, #996	; 0x3e4
   2072c:	bl	2e08c <__assert_fail@plt+0x1c92c>
   20730:	cmp	r0, #0
   20734:	beq	20750 <__assert_fail@plt+0xeff0>
   20738:	ldr	r1, [r6, #56]	; 0x38
   2073c:	str	r1, [r0]
   20740:	mov	r1, #0
   20744:	str	r1, [r6, #64]	; 0x40
   20748:	str	r0, [r6, #56]	; 0x38
   2074c:	b	2053c <__assert_fail@plt+0xeddc>
   20750:	mov	r0, r7
   20754:	bl	144c0 <__assert_fail@plt+0x2d60>
   20758:	ldr	r0, [r8]
   2075c:	bl	144c0 <__assert_fail@plt+0x2d60>
   20760:	ldr	r0, [r8, #4]
   20764:	bl	144c0 <__assert_fail@plt+0x2d60>
   20768:	ldr	r0, [r8, #8]
   2076c:	bl	144c0 <__assert_fail@plt+0x2d60>
   20770:	ldr	r0, [r8, #12]
   20774:	bl	144c0 <__assert_fail@plt+0x2d60>
   20778:	mov	r0, r8
   2077c:	bl	144c0 <__assert_fail@plt+0x2d60>
   20780:	ldr	r1, [fp, #12]
   20784:	mov	r0, #12
   20788:	str	r0, [r1]
   2078c:	mov	r0, r4
   20790:	sub	sp, fp, #28
   20794:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20798:	mov	r0, #996	; 0x3e4
   2079c:	bl	2e08c <__assert_fail@plt+0x1c92c>
   207a0:	cmp	r0, #0
   207a4:	beq	206b0 <__assert_fail@plt+0xef50>
   207a8:	ldr	r1, [r6, #56]	; 0x38
   207ac:	str	r1, [r0]
   207b0:	mov	r1, #0
   207b4:	str	r1, [r6, #64]	; 0x40
   207b8:	str	r0, [r6, #56]	; 0x38
   207bc:	b	20588 <__assert_fail@plt+0xee28>
   207c0:	push	{fp, lr}
   207c4:	mov	fp, sp
   207c8:	ldr	ip, [r1, #40]	; 0x28
   207cc:	ldr	r3, [r1, #56]	; 0x38
   207d0:	cmp	r3, ip
   207d4:	ble	20854 <__assert_fail@plt+0xf0f4>
   207d8:	ldr	r3, [r1, #4]
   207dc:	ldrb	lr, [r3, ip]
   207e0:	strb	lr, [r0]
   207e4:	ldr	r3, [r1, #80]	; 0x50
   207e8:	cmp	r3, #2
   207ec:	blt	20810 <__assert_fail@plt+0xf0b0>
   207f0:	ldr	r3, [r1, #28]
   207f4:	ldr	ip, [r1, #40]	; 0x28
   207f8:	cmp	ip, r3
   207fc:	beq	20810 <__assert_fail@plt+0xf0b0>
   20800:	ldr	r3, [r1, #8]
   20804:	ldr	r3, [r3, ip, lsl #2]
   20808:	cmn	r3, #1
   2080c:	beq	20928 <__assert_fail@plt+0xf1c8>
   20810:	tst	r2, #1
   20814:	beq	20868 <__assert_fail@plt+0xf108>
   20818:	cmp	lr, #92	; 0x5c
   2081c:	bne	20868 <__assert_fail@plt+0xf108>
   20820:	ldr	r2, [r1, #40]	; 0x28
   20824:	ldr	r3, [r1, #48]	; 0x30
   20828:	add	r2, r2, #1
   2082c:	cmp	r2, r3
   20830:	bge	20928 <__assert_fail@plt+0xf1c8>
   20834:	str	r2, [r1, #40]	; 0x28
   20838:	ldr	r1, [r1, #4]
   2083c:	ldrb	r2, [r1, r2]
   20840:	mov	r1, #1
   20844:	strb	r1, [r0, #4]
   20848:	strb	r2, [r0]
   2084c:	mov	r0, r1
   20850:	pop	{fp, pc}
   20854:	mov	r1, #2
   20858:	strb	r1, [r0, #4]
   2085c:	mov	r1, #0
   20860:	mov	r0, r1
   20864:	pop	{fp, pc}
   20868:	cmp	lr, #92	; 0x5c
   2086c:	bgt	208cc <__assert_fail@plt+0xf16c>
   20870:	cmp	lr, #45	; 0x2d
   20874:	beq	208f0 <__assert_fail@plt+0xf190>
   20878:	cmp	lr, #91	; 0x5b
   2087c:	bne	20928 <__assert_fail@plt+0xf1c8>
   20880:	ldr	r3, [r1, #40]	; 0x28
   20884:	ldr	ip, [r1, #48]	; 0x30
   20888:	add	r3, r3, #1
   2088c:	cmp	r3, ip
   20890:	bge	20918 <__assert_fail@plt+0xf1b8>
   20894:	ldr	r1, [r1, #4]
   20898:	ldrb	r1, [r1, r3]
   2089c:	cmp	r1, #61	; 0x3d
   208a0:	strb	r1, [r0]
   208a4:	beq	20938 <__assert_fail@plt+0xf1d8>
   208a8:	cmp	r1, #58	; 0x3a
   208ac:	beq	2094c <__assert_fail@plt+0xf1ec>
   208b0:	cmp	r1, #46	; 0x2e
   208b4:	bne	20920 <__assert_fail@plt+0xf1c0>
   208b8:	mov	r1, #26
   208bc:	strb	r1, [r0, #4]
   208c0:	mov	r1, #2
   208c4:	mov	r0, r1
   208c8:	pop	{fp, pc}
   208cc:	cmp	lr, #93	; 0x5d
   208d0:	beq	20904 <__assert_fail@plt+0xf1a4>
   208d4:	cmp	lr, #94	; 0x5e
   208d8:	bne	20928 <__assert_fail@plt+0xf1c8>
   208dc:	mov	r1, #25
   208e0:	strb	r1, [r0, #4]
   208e4:	mov	r1, #1
   208e8:	mov	r0, r1
   208ec:	pop	{fp, pc}
   208f0:	mov	r1, #22
   208f4:	strb	r1, [r0, #4]
   208f8:	mov	r1, #1
   208fc:	mov	r0, r1
   20900:	pop	{fp, pc}
   20904:	mov	r1, #21
   20908:	strb	r1, [r0, #4]
   2090c:	mov	r1, #1
   20910:	mov	r0, r1
   20914:	pop	{fp, pc}
   20918:	mov	r1, #0
   2091c:	strb	r1, [r0]
   20920:	mov	r1, #91	; 0x5b
   20924:	strb	r1, [r0]
   20928:	mov	r1, #1
   2092c:	strb	r1, [r0, #4]
   20930:	mov	r0, r1
   20934:	pop	{fp, pc}
   20938:	mov	r1, #28
   2093c:	strb	r1, [r0, #4]
   20940:	mov	r1, #2
   20944:	mov	r0, r1
   20948:	pop	{fp, pc}
   2094c:	tst	r2, #4
   20950:	beq	20920 <__assert_fail@plt+0xf1c0>
   20954:	mov	r1, #30
   20958:	strb	r1, [r0, #4]
   2095c:	mov	r1, #2
   20960:	mov	r0, r1
   20964:	pop	{fp, pc}
   20968:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   2096c:	add	fp, sp, #24
   20970:	sub	sp, sp, #8
   20974:	mov	r5, r2
   20978:	ldr	r2, [r1, #80]	; 0x50
   2097c:	mov	r9, r0
   20980:	ldr	r0, [r1, #40]	; 0x28
   20984:	cmp	r2, #1
   20988:	beq	20a00 <__assert_fail@plt+0xf2a0>
   2098c:	ldr	r2, [r1, #28]
   20990:	add	r6, r0, #1
   20994:	cmp	r6, r2
   20998:	bge	20a00 <__assert_fail@plt+0xf2a0>
   2099c:	ldr	lr, [r1, #8]
   209a0:	sub	r4, r0, r2
   209a4:	sub	ip, r2, r0
   209a8:	mvn	r2, #0
   209ac:	add	r6, lr, r0, lsl #2
   209b0:	ldr	r7, [r6, -r2, lsl #2]
   209b4:	cmn	r7, #1
   209b8:	bne	209cc <__assert_fail@plt+0xf26c>
   209bc:	sub	r2, r2, #1
   209c0:	cmp	r4, r2
   209c4:	bne	209b0 <__assert_fail@plt+0xf250>
   209c8:	b	209d8 <__assert_fail@plt+0xf278>
   209cc:	rsb	ip, r2, #0
   209d0:	cmp	ip, #2
   209d4:	bcc	20a00 <__assert_fail@plt+0xf2a0>
   209d8:	mov	r2, #1
   209dc:	str	r2, [r9]
   209e0:	ldr	r0, [lr, r0, lsl #2]
   209e4:	str	r0, [r9, #4]
   209e8:	ldr	r0, [r1, #40]	; 0x28
   209ec:	add	r0, r0, ip
   209f0:	str	r0, [r1, #40]	; 0x28
   209f4:	mov	r0, #0
   209f8:	sub	sp, fp, #24
   209fc:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   20a00:	add	r2, r0, r3
   20a04:	str	r2, [r1, #40]	; 0x28
   20a08:	ldrb	r6, [r5, #4]
   20a0c:	sub	r0, r6, #22
   20a10:	cmp	r0, #8
   20a14:	bhi	20c5c <__assert_fail@plt+0xf4fc>
   20a18:	add	r3, pc, #0
   20a1c:	ldr	pc, [r3, r0, lsl #2]
   20a20:	andeq	r0, r2, r4, lsr ip
   20a24:	andeq	r0, r2, ip, asr ip
   20a28:	andeq	r0, r2, ip, asr ip
   20a2c:	andeq	r0, r2, ip, asr ip
   20a30:	andeq	r0, r2, r4, asr #20
   20a34:	andeq	r0, r2, ip, asr ip
   20a38:	andeq	r0, r2, r4, asr #20
   20a3c:	andeq	r0, r2, ip, asr ip
   20a40:	andeq	r0, r2, r4, asr #20
   20a44:	ldr	r3, [r1, #56]	; 0x38
   20a48:	mov	r0, #7
   20a4c:	cmp	r3, r2
   20a50:	ble	20c6c <__assert_fail@plt+0xf50c>
   20a54:	ldrb	r3, [r5]
   20a58:	mov	r2, #0
   20a5c:	uxtb	r7, r6
   20a60:	cmp	r7, #30
   20a64:	bne	20a74 <__assert_fail@plt+0xf314>
   20a68:	ldrb	r7, [r1, #75]	; 0x4b
   20a6c:	cmp	r7, #0
   20a70:	bne	20ad8 <__assert_fail@plt+0xf378>
   20a74:	ldr	r4, [r1, #40]	; 0x28
   20a78:	ldr	r7, [r1, #4]
   20a7c:	add	r6, r4, #1
   20a80:	str	r6, [r1, #40]	; 0x28
   20a84:	ldrb	r4, [r7, r4]
   20a88:	ldr	r7, [r1, #56]	; 0x38
   20a8c:	cmp	r7, r6
   20a90:	ble	20c6c <__assert_fail@plt+0xf50c>
   20a94:	uxtb	r7, r4
   20a98:	cmp	r7, r3
   20a9c:	bne	20ab0 <__assert_fail@plt+0xf350>
   20aa0:	ldr	r7, [r1, #4]
   20aa4:	ldrb	r7, [r7, r6]
   20aa8:	cmp	r7, #93	; 0x5d
   20aac:	beq	20bd4 <__assert_fail@plt+0xf474>
   20ab0:	ldr	r7, [r9, #4]
   20ab4:	strb	r4, [r7, r2]
   20ab8:	add	r2, r2, #1
   20abc:	cmp	r2, #32
   20ac0:	beq	20c6c <__assert_fail@plt+0xf50c>
   20ac4:	ldrb	r6, [r5, #4]
   20ac8:	uxtb	r7, r6
   20acc:	cmp	r7, #30
   20ad0:	beq	20a68 <__assert_fail@plt+0xf308>
   20ad4:	b	20a74 <__assert_fail@plt+0xf314>
   20ad8:	ldrb	r7, [r1, #76]	; 0x4c
   20adc:	cmp	r7, #0
   20ae0:	beq	20b88 <__assert_fail@plt+0xf428>
   20ae4:	ldr	lr, [r1, #28]
   20ae8:	ldr	ip, [r1, #40]	; 0x28
   20aec:	cmp	lr, ip
   20af0:	beq	20b04 <__assert_fail@plt+0xf3a4>
   20af4:	ldr	r4, [r1, #8]
   20af8:	ldr	r4, [r4, ip, lsl #2]
   20afc:	cmn	r4, #1
   20b00:	beq	20bb4 <__assert_fail@plt+0xf454>
   20b04:	ldr	r6, [r1, #12]
   20b08:	ldr	r7, [r1, #24]
   20b0c:	ldr	r4, [r1]
   20b10:	ldr	r6, [r6, ip, lsl #2]
   20b14:	add	r6, r7, r6
   20b18:	add	r4, r4, r6
   20b1c:	ldrsb	r4, [r4]
   20b20:	cmn	r4, #1
   20b24:	ble	20bb4 <__assert_fail@plt+0xf454>
   20b28:	ldr	r7, [r1, #80]	; 0x50
   20b2c:	mov	r6, #1
   20b30:	cmp	r7, #1
   20b34:	beq	20b70 <__assert_fail@plt+0xf410>
   20b38:	add	r7, ip, #1
   20b3c:	cmp	r7, lr
   20b40:	bge	20b70 <__assert_fail@plt+0xf410>
   20b44:	ldr	r6, [r1, #8]
   20b48:	sub	lr, lr, ip
   20b4c:	add	r8, r6, ip, lsl #2
   20b50:	mov	r6, #1
   20b54:	ldr	r7, [r8, r6, lsl #2]
   20b58:	cmn	r7, #1
   20b5c:	bne	20b70 <__assert_fail@plt+0xf410>
   20b60:	add	r6, r6, #1
   20b64:	cmp	lr, r6
   20b68:	bne	20b54 <__assert_fail@plt+0xf3f4>
   20b6c:	mov	r6, lr
   20b70:	add	r6, r6, ip
   20b74:	str	r6, [r1, #40]	; 0x28
   20b78:	ldr	r7, [r1, #56]	; 0x38
   20b7c:	cmp	r7, r6
   20b80:	bgt	20a94 <__assert_fail@plt+0xf334>
   20b84:	b	20c6c <__assert_fail@plt+0xf50c>
   20b88:	ldr	r7, [r1, #40]	; 0x28
   20b8c:	ldr	r4, [r1, #24]
   20b90:	ldr	ip, [r1]
   20b94:	add	r6, r7, #1
   20b98:	add	r7, r7, r4
   20b9c:	str	r6, [r1, #40]	; 0x28
   20ba0:	ldrb	r4, [ip, r7]
   20ba4:	ldr	r7, [r1, #56]	; 0x38
   20ba8:	cmp	r7, r6
   20bac:	bgt	20a94 <__assert_fail@plt+0xf334>
   20bb0:	b	20c6c <__assert_fail@plt+0xf50c>
   20bb4:	add	r6, ip, #1
   20bb8:	str	r6, [r1, #40]	; 0x28
   20bbc:	ldr	r7, [r1, #4]
   20bc0:	ldrb	r4, [r7, ip]
   20bc4:	ldr	r7, [r1, #56]	; 0x38
   20bc8:	cmp	r7, r6
   20bcc:	bgt	20a94 <__assert_fail@plt+0xf334>
   20bd0:	b	20c6c <__assert_fail@plt+0xf50c>
   20bd4:	add	r0, r6, #1
   20bd8:	str	r0, [r1, #40]	; 0x28
   20bdc:	mov	r0, #0
   20be0:	ldr	r1, [r9, #4]
   20be4:	strb	r0, [r1, r2]
   20be8:	ldrb	r1, [r5, #4]
   20bec:	cmp	r1, #30
   20bf0:	beq	20c14 <__assert_fail@plt+0xf4b4>
   20bf4:	cmp	r1, #28
   20bf8:	beq	20c24 <__assert_fail@plt+0xf4c4>
   20bfc:	cmp	r1, #26
   20c00:	bne	20c6c <__assert_fail@plt+0xf50c>
   20c04:	mov	r1, #3
   20c08:	str	r1, [r9]
   20c0c:	sub	sp, fp, #24
   20c10:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   20c14:	mov	r1, #4
   20c18:	str	r1, [r9]
   20c1c:	sub	sp, fp, #24
   20c20:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   20c24:	mov	r1, #2
   20c28:	str	r1, [r9]
   20c2c:	sub	sp, fp, #24
   20c30:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   20c34:	ldr	r0, [fp, #12]
   20c38:	cmp	r0, #0
   20c3c:	bne	20c5c <__assert_fail@plt+0xf4fc>
   20c40:	ldr	r2, [fp, #8]
   20c44:	mov	r0, sp
   20c48:	bl	207c0 <__assert_fail@plt+0xf060>
   20c4c:	ldrb	r1, [sp, #4]
   20c50:	mov	r0, #11
   20c54:	cmp	r1, #21
   20c58:	bne	20c6c <__assert_fail@plt+0xf50c>
   20c5c:	mov	r0, #0
   20c60:	str	r0, [r9]
   20c64:	ldrb	r1, [r5]
   20c68:	strb	r1, [r9, #4]
   20c6c:	sub	sp, fp, #24
   20c70:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   20c74:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   20c78:	add	fp, sp, #24
   20c7c:	mov	r8, r0
   20c80:	ldrb	r0, [fp, #14]
   20c84:	ldr	r6, [fp, #8]
   20c88:	mov	r5, r3
   20c8c:	mov	r7, r2
   20c90:	mov	r4, r1
   20c94:	tst	r0, #64	; 0x40
   20c98:	beq	20cd4 <__assert_fail@plt+0xf574>
   20c9c:	movw	r1, #63426	; 0xf7c2
   20ca0:	mov	r0, r6
   20ca4:	movt	r1, #2
   20ca8:	bl	11418 <strcmp@plt>
   20cac:	cmp	r0, #0
   20cb0:	beq	20ccc <__assert_fail@plt+0xf56c>
   20cb4:	movw	r1, #63432	; 0xf7c8
   20cb8:	mov	r0, r6
   20cbc:	movt	r1, #2
   20cc0:	bl	11418 <strcmp@plt>
   20cc4:	cmp	r0, #0
   20cc8:	bne	20cd4 <__assert_fail@plt+0xf574>
   20ccc:	movw	r6, #63438	; 0xf7ce
   20cd0:	movt	r6, #2
   20cd4:	ldr	r0, [r5]
   20cd8:	ldr	r1, [r7, #36]	; 0x24
   20cdc:	cmp	r0, r1
   20ce0:	beq	212a8 <__assert_fail@plt+0xfb48>
   20ce4:	mov	r0, r6
   20ce8:	bl	113e8 <wctype@plt>
   20cec:	ldr	r2, [r7, #36]	; 0x24
   20cf0:	ldr	r1, [r7, #12]
   20cf4:	add	r3, r2, #1
   20cf8:	str	r3, [r7, #36]	; 0x24
   20cfc:	str	r0, [r1, r2, lsl #2]
   20d00:	movw	r1, #63414	; 0xf7b6
   20d04:	mov	r0, r6
   20d08:	movt	r1, #2
   20d0c:	bl	11418 <strcmp@plt>
   20d10:	cmp	r0, #0
   20d14:	beq	20e44 <__assert_fail@plt+0xf6e4>
   20d18:	movw	r1, #63444	; 0xf7d4
   20d1c:	mov	r0, r6
   20d20:	movt	r1, #2
   20d24:	bl	11418 <strcmp@plt>
   20d28:	cmp	r0, #0
   20d2c:	beq	20eb0 <__assert_fail@plt+0xf750>
   20d30:	movw	r1, #63432	; 0xf7c8
   20d34:	mov	r0, r6
   20d38:	movt	r1, #2
   20d3c:	bl	11418 <strcmp@plt>
   20d40:	cmp	r0, #0
   20d44:	beq	20f1c <__assert_fail@plt+0xf7bc>
   20d48:	movw	r1, #63420	; 0xf7bc
   20d4c:	mov	r0, r6
   20d50:	movt	r1, #2
   20d54:	bl	11418 <strcmp@plt>
   20d58:	cmp	r0, #0
   20d5c:	beq	20f88 <__assert_fail@plt+0xf828>
   20d60:	movw	r1, #63438	; 0xf7ce
   20d64:	mov	r0, r6
   20d68:	movt	r1, #2
   20d6c:	bl	11418 <strcmp@plt>
   20d70:	cmp	r0, #0
   20d74:	beq	2102c <__assert_fail@plt+0xf8cc>
   20d78:	movw	r1, #63475	; 0xf7f3
   20d7c:	mov	r0, r6
   20d80:	movt	r1, #2
   20d84:	bl	11418 <strcmp@plt>
   20d88:	cmp	r0, #0
   20d8c:	beq	21098 <__assert_fail@plt+0xf938>
   20d90:	movw	r1, #63450	; 0xf7da
   20d94:	mov	r0, r6
   20d98:	movt	r1, #2
   20d9c:	bl	11418 <strcmp@plt>
   20da0:	cmp	r0, #0
   20da4:	beq	21104 <__assert_fail@plt+0xf9a4>
   20da8:	movw	r1, #63426	; 0xf7c2
   20dac:	mov	r0, r6
   20db0:	movt	r1, #2
   20db4:	bl	11418 <strcmp@plt>
   20db8:	cmp	r0, #0
   20dbc:	beq	21158 <__assert_fail@plt+0xf9f8>
   20dc0:	movw	r1, #63456	; 0xf7e0
   20dc4:	mov	r0, r6
   20dc8:	movt	r1, #2
   20dcc:	bl	11418 <strcmp@plt>
   20dd0:	cmp	r0, #0
   20dd4:	beq	211ac <__assert_fail@plt+0xfa4c>
   20dd8:	movw	r1, #63462	; 0xf7e6
   20ddc:	mov	r0, r6
   20de0:	movt	r1, #2
   20de4:	bl	11418 <strcmp@plt>
   20de8:	cmp	r0, #0
   20dec:	beq	21200 <__assert_fail@plt+0xfaa0>
   20df0:	movw	r1, #63468	; 0xf7ec
   20df4:	mov	r0, r6
   20df8:	movt	r1, #2
   20dfc:	bl	11418 <strcmp@plt>
   20e00:	cmp	r0, #0
   20e04:	beq	21254 <__assert_fail@plt+0xfaf4>
   20e08:	movw	r1, #63474	; 0xf7f2
   20e0c:	mov	r0, r6
   20e10:	movt	r1, #2
   20e14:	bl	11418 <strcmp@plt>
   20e18:	mov	r1, r0
   20e1c:	mov	r0, #4
   20e20:	cmp	r1, #0
   20e24:	bne	21618 <__assert_fail@plt+0xfeb8>
   20e28:	bl	11604 <__ctype_b_loc@plt>
   20e2c:	ldr	r1, [r0]
   20e30:	mov	r2, #0
   20e34:	mov	r3, #1
   20e38:	cmp	r8, #0
   20e3c:	beq	21008 <__assert_fail@plt+0xf8a8>
   20e40:	b	21550 <__assert_fail@plt+0xfdf0>
   20e44:	bl	11604 <__ctype_b_loc@plt>
   20e48:	ldr	r1, [r0]
   20e4c:	cmp	r8, #0
   20e50:	bne	21348 <__assert_fail@plt+0xfbe8>
   20e54:	mov	r0, #0
   20e58:	mov	r2, #1
   20e5c:	ldrb	r3, [r1]
   20e60:	tst	r3, #8
   20e64:	bne	20e84 <__assert_fail@plt+0xf724>
   20e68:	add	r0, r0, #1
   20e6c:	add	r1, r1, #2
   20e70:	cmp	r0, #256	; 0x100
   20e74:	beq	20ea8 <__assert_fail@plt+0xf748>
   20e78:	ldrb	r3, [r1]
   20e7c:	tst	r3, #8
   20e80:	beq	20e68 <__assert_fail@plt+0xf708>
   20e84:	ubfx	r3, r0, #5, #3
   20e88:	and	r6, r0, #31
   20e8c:	ldr	r7, [r4, r3, lsl #2]
   20e90:	orr	r7, r7, r2, lsl r6
   20e94:	str	r7, [r4, r3, lsl #2]
   20e98:	add	r0, r0, #1
   20e9c:	add	r1, r1, #2
   20ea0:	cmp	r0, #256	; 0x100
   20ea4:	bne	20e78 <__assert_fail@plt+0xf718>
   20ea8:	mov	r0, #0
   20eac:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   20eb0:	bl	11604 <__ctype_b_loc@plt>
   20eb4:	ldr	r1, [r0]
   20eb8:	cmp	r8, #0
   20ebc:	bne	213d4 <__assert_fail@plt+0xfc74>
   20ec0:	mov	r0, #0
   20ec4:	mov	r2, #1
   20ec8:	ldrb	r3, [r1]
   20ecc:	tst	r3, #2
   20ed0:	bne	20ef0 <__assert_fail@plt+0xf790>
   20ed4:	add	r0, r0, #1
   20ed8:	add	r1, r1, #2
   20edc:	cmp	r0, #256	; 0x100
   20ee0:	beq	20f14 <__assert_fail@plt+0xf7b4>
   20ee4:	ldrb	r3, [r1]
   20ee8:	tst	r3, #2
   20eec:	beq	20ed4 <__assert_fail@plt+0xf774>
   20ef0:	ubfx	r3, r0, #5, #3
   20ef4:	and	r6, r0, #31
   20ef8:	ldr	r7, [r4, r3, lsl #2]
   20efc:	orr	r7, r7, r2, lsl r6
   20f00:	str	r7, [r4, r3, lsl #2]
   20f04:	add	r0, r0, #1
   20f08:	add	r1, r1, #2
   20f0c:	cmp	r0, #256	; 0x100
   20f10:	bne	20ee4 <__assert_fail@plt+0xf784>
   20f14:	mov	r0, #0
   20f18:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   20f1c:	bl	11604 <__ctype_b_loc@plt>
   20f20:	ldr	r1, [r0]
   20f24:	cmp	r8, #0
   20f28:	bne	21460 <__assert_fail@plt+0xfd00>
   20f2c:	mov	r0, #0
   20f30:	mov	r2, #1
   20f34:	ldrb	r3, [r1, #1]
   20f38:	tst	r3, #2
   20f3c:	bne	20f5c <__assert_fail@plt+0xf7fc>
   20f40:	add	r0, r0, #1
   20f44:	add	r1, r1, #2
   20f48:	cmp	r0, #256	; 0x100
   20f4c:	beq	20f80 <__assert_fail@plt+0xf820>
   20f50:	ldrb	r3, [r1, #1]
   20f54:	tst	r3, #2
   20f58:	beq	20f40 <__assert_fail@plt+0xf7e0>
   20f5c:	ubfx	r3, r0, #5, #3
   20f60:	and	r6, r0, #31
   20f64:	ldr	r7, [r4, r3, lsl #2]
   20f68:	orr	r7, r7, r2, lsl r6
   20f6c:	str	r7, [r4, r3, lsl #2]
   20f70:	add	r0, r0, #1
   20f74:	add	r1, r1, #2
   20f78:	cmp	r0, #256	; 0x100
   20f7c:	bne	20f50 <__assert_fail@plt+0xf7f0>
   20f80:	mov	r0, #0
   20f84:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   20f88:	bl	11604 <__ctype_b_loc@plt>
   20f8c:	ldr	r1, [r0]
   20f90:	cmp	r8, #0
   20f94:	bne	214ec <__assert_fail@plt+0xfd8c>
   20f98:	mov	r0, #0
   20f9c:	mov	r2, #1
   20fa0:	ldrb	r3, [r1, #1]
   20fa4:	tst	r3, #32
   20fa8:	bne	20fc8 <__assert_fail@plt+0xf868>
   20fac:	add	r0, r0, #1
   20fb0:	add	r1, r1, #2
   20fb4:	cmp	r0, #256	; 0x100
   20fb8:	beq	20fec <__assert_fail@plt+0xf88c>
   20fbc:	ldrb	r3, [r1, #1]
   20fc0:	tst	r3, #32
   20fc4:	beq	20fac <__assert_fail@plt+0xf84c>
   20fc8:	ubfx	r3, r0, #5, #3
   20fcc:	and	r6, r0, #31
   20fd0:	ldr	r7, [r4, r3, lsl #2]
   20fd4:	orr	r7, r7, r2, lsl r6
   20fd8:	str	r7, [r4, r3, lsl #2]
   20fdc:	add	r0, r0, #1
   20fe0:	add	r1, r1, #2
   20fe4:	cmp	r0, #256	; 0x100
   20fe8:	bne	20fbc <__assert_fail@plt+0xf85c>
   20fec:	mov	r0, #0
   20ff0:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   20ff4:	add	r2, r2, #1
   20ff8:	add	r1, r1, #2
   20ffc:	mov	r0, #0
   21000:	cmp	r2, #256	; 0x100
   21004:	beq	21618 <__assert_fail@plt+0xfeb8>
   21008:	ldrb	r0, [r1, #1]
   2100c:	tst	r0, #16
   21010:	beq	20ff4 <__assert_fail@plt+0xf894>
   21014:	ubfx	r0, r2, #5, #3
   21018:	and	r6, r2, #31
   2101c:	ldr	r7, [r4, r0, lsl #2]
   21020:	orr	r7, r7, r3, lsl r6
   21024:	str	r7, [r4, r0, lsl #2]
   21028:	b	20ff4 <__assert_fail@plt+0xf894>
   2102c:	bl	11604 <__ctype_b_loc@plt>
   21030:	ldr	r1, [r0]
   21034:	cmp	r8, #0
   21038:	bne	21578 <__assert_fail@plt+0xfe18>
   2103c:	mov	r0, #0
   21040:	mov	r2, #1
   21044:	ldrb	r3, [r1, #1]
   21048:	tst	r3, #4
   2104c:	bne	2106c <__assert_fail@plt+0xf90c>
   21050:	add	r0, r0, #1
   21054:	add	r1, r1, #2
   21058:	cmp	r0, #256	; 0x100
   2105c:	beq	21090 <__assert_fail@plt+0xf930>
   21060:	ldrb	r3, [r1, #1]
   21064:	tst	r3, #4
   21068:	beq	21050 <__assert_fail@plt+0xf8f0>
   2106c:	ubfx	r3, r0, #5, #3
   21070:	and	r6, r0, #31
   21074:	ldr	r7, [r4, r3, lsl #2]
   21078:	orr	r7, r7, r2, lsl r6
   2107c:	str	r7, [r4, r3, lsl #2]
   21080:	add	r0, r0, #1
   21084:	add	r1, r1, #2
   21088:	cmp	r0, #256	; 0x100
   2108c:	bne	21060 <__assert_fail@plt+0xf900>
   21090:	mov	r0, #0
   21094:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   21098:	bl	11604 <__ctype_b_loc@plt>
   2109c:	ldr	r1, [r0]
   210a0:	cmp	r8, #0
   210a4:	bne	215c8 <__assert_fail@plt+0xfe68>
   210a8:	mov	r0, #0
   210ac:	mov	r2, #1
   210b0:	ldrb	r3, [r1, #1]
   210b4:	tst	r3, #8
   210b8:	bne	210d8 <__assert_fail@plt+0xf978>
   210bc:	add	r0, r0, #1
   210c0:	add	r1, r1, #2
   210c4:	cmp	r0, #256	; 0x100
   210c8:	beq	210fc <__assert_fail@plt+0xf99c>
   210cc:	ldrb	r3, [r1, #1]
   210d0:	tst	r3, #8
   210d4:	beq	210bc <__assert_fail@plt+0xf95c>
   210d8:	ubfx	r3, r0, #5, #3
   210dc:	and	r6, r0, #31
   210e0:	ldr	r7, [r4, r3, lsl #2]
   210e4:	orr	r7, r7, r2, lsl r6
   210e8:	str	r7, [r4, r3, lsl #2]
   210ec:	add	r0, r0, #1
   210f0:	add	r1, r1, #2
   210f4:	cmp	r0, #256	; 0x100
   210f8:	bne	210cc <__assert_fail@plt+0xf96c>
   210fc:	mov	r0, #0
   21100:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   21104:	bl	11604 <__ctype_b_loc@plt>
   21108:	ldr	r1, [r0]
   2110c:	mov	r2, #0
   21110:	mov	r3, #1
   21114:	cmp	r8, #0
   21118:	beq	21134 <__assert_fail@plt+0xf9d4>
   2111c:	b	212e4 <__assert_fail@plt+0xfb84>
   21120:	add	r2, r2, #1
   21124:	add	r1, r1, #2
   21128:	mov	r0, #0
   2112c:	cmp	r2, #256	; 0x100
   21130:	beq	21618 <__assert_fail@plt+0xfeb8>
   21134:	ldrb	r0, [r1, #1]
   21138:	tst	r0, #64	; 0x40
   2113c:	beq	21120 <__assert_fail@plt+0xf9c0>
   21140:	ubfx	r0, r2, #5, #3
   21144:	and	r6, r2, #31
   21148:	ldr	r7, [r4, r0, lsl #2]
   2114c:	orr	r7, r7, r3, lsl r6
   21150:	str	r7, [r4, r0, lsl #2]
   21154:	b	21120 <__assert_fail@plt+0xf9c0>
   21158:	bl	11604 <__ctype_b_loc@plt>
   2115c:	ldr	r1, [r0]
   21160:	mov	r2, #0
   21164:	mov	r3, #1
   21168:	cmp	r8, #0
   2116c:	beq	21188 <__assert_fail@plt+0xfa28>
   21170:	b	21320 <__assert_fail@plt+0xfbc0>
   21174:	add	r2, r2, #1
   21178:	add	r1, r1, #2
   2117c:	mov	r0, #0
   21180:	cmp	r2, #256	; 0x100
   21184:	beq	21618 <__assert_fail@plt+0xfeb8>
   21188:	ldrb	r0, [r1, #1]
   2118c:	tst	r0, #1
   21190:	beq	21174 <__assert_fail@plt+0xfa14>
   21194:	ubfx	r0, r2, #5, #3
   21198:	and	r6, r2, #31
   2119c:	ldr	r7, [r4, r0, lsl #2]
   211a0:	orr	r7, r7, r3, lsl r6
   211a4:	str	r7, [r4, r0, lsl #2]
   211a8:	b	21174 <__assert_fail@plt+0xfa14>
   211ac:	bl	11604 <__ctype_b_loc@plt>
   211b0:	ldr	r1, [r0]
   211b4:	mov	r2, #0
   211b8:	mov	r3, #1
   211bc:	cmp	r8, #0
   211c0:	beq	211dc <__assert_fail@plt+0xfa7c>
   211c4:	b	213ac <__assert_fail@plt+0xfc4c>
   211c8:	add	r2, r2, #1
   211cc:	add	r1, r1, #2
   211d0:	mov	r0, #0
   211d4:	cmp	r2, #256	; 0x100
   211d8:	beq	21618 <__assert_fail@plt+0xfeb8>
   211dc:	ldrb	r0, [r1]
   211e0:	tst	r0, #1
   211e4:	beq	211c8 <__assert_fail@plt+0xfa68>
   211e8:	ubfx	r0, r2, #5, #3
   211ec:	and	r6, r2, #31
   211f0:	ldr	r7, [r4, r0, lsl #2]
   211f4:	orr	r7, r7, r3, lsl r6
   211f8:	str	r7, [r4, r0, lsl #2]
   211fc:	b	211c8 <__assert_fail@plt+0xfa68>
   21200:	bl	11604 <__ctype_b_loc@plt>
   21204:	ldr	r1, [r0]
   21208:	mov	r2, #0
   2120c:	mov	r3, #1
   21210:	cmp	r8, #0
   21214:	beq	21230 <__assert_fail@plt+0xfad0>
   21218:	b	21438 <__assert_fail@plt+0xfcd8>
   2121c:	add	r2, r2, #1
   21220:	add	r1, r1, #2
   21224:	mov	r0, #0
   21228:	cmp	r2, #256	; 0x100
   2122c:	beq	21618 <__assert_fail@plt+0xfeb8>
   21230:	ldrsh	r0, [r1]
   21234:	cmn	r0, #1
   21238:	bgt	2121c <__assert_fail@plt+0xfabc>
   2123c:	ubfx	r0, r2, #5, #3
   21240:	and	r6, r2, #31
   21244:	ldr	r7, [r4, r0, lsl #2]
   21248:	orr	r7, r7, r3, lsl r6
   2124c:	str	r7, [r4, r0, lsl #2]
   21250:	b	2121c <__assert_fail@plt+0xfabc>
   21254:	bl	11604 <__ctype_b_loc@plt>
   21258:	ldr	r1, [r0]
   2125c:	mov	r2, #0
   21260:	mov	r3, #1
   21264:	cmp	r8, #0
   21268:	beq	21284 <__assert_fail@plt+0xfb24>
   2126c:	b	214c4 <__assert_fail@plt+0xfd64>
   21270:	add	r2, r2, #1
   21274:	add	r1, r1, #2
   21278:	mov	r0, #0
   2127c:	cmp	r2, #256	; 0x100
   21280:	beq	21618 <__assert_fail@plt+0xfeb8>
   21284:	ldrb	r0, [r1]
   21288:	tst	r0, #4
   2128c:	beq	21270 <__assert_fail@plt+0xfb10>
   21290:	ubfx	r0, r2, #5, #3
   21294:	and	r6, r2, #31
   21298:	ldr	r7, [r4, r0, lsl #2]
   2129c:	orr	r7, r7, r3, lsl r6
   212a0:	str	r7, [r4, r0, lsl #2]
   212a4:	b	21270 <__assert_fail@plt+0xfb10>
   212a8:	mov	r1, #1
   212ac:	orr	r9, r1, r0, lsl #1
   212b0:	ldr	r0, [r7, #12]
   212b4:	lsl	r1, r9, #2
   212b8:	bl	2e0bc <__assert_fail@plt+0x1c95c>
   212bc:	cmp	r0, #0
   212c0:	beq	2161c <__assert_fail@plt+0xfebc>
   212c4:	str	r0, [r7, #12]
   212c8:	str	r9, [r5]
   212cc:	b	20ce4 <__assert_fail@plt+0xf584>
   212d0:	add	r2, r2, #1
   212d4:	add	r1, r1, #2
   212d8:	mov	r0, #0
   212dc:	cmp	r2, #256	; 0x100
   212e0:	beq	21618 <__assert_fail@plt+0xfeb8>
   212e4:	ldrb	r0, [r1, #1]
   212e8:	tst	r0, #64	; 0x40
   212ec:	beq	212d0 <__assert_fail@plt+0xfb70>
   212f0:	ldrb	r0, [r8, r2]
   212f4:	ubfx	r7, r0, #5, #3
   212f8:	and	r0, r0, #31
   212fc:	ldr	r6, [r4, r7, lsl #2]
   21300:	orr	r0, r6, r3, lsl r0
   21304:	str	r0, [r4, r7, lsl #2]
   21308:	b	212d0 <__assert_fail@plt+0xfb70>
   2130c:	add	r2, r2, #1
   21310:	add	r1, r1, #2
   21314:	mov	r0, #0
   21318:	cmp	r2, #256	; 0x100
   2131c:	beq	21618 <__assert_fail@plt+0xfeb8>
   21320:	ldrb	r0, [r1, #1]
   21324:	tst	r0, #1
   21328:	beq	2130c <__assert_fail@plt+0xfbac>
   2132c:	ldrb	r0, [r8, r2]
   21330:	ubfx	r7, r0, #5, #3
   21334:	and	r0, r0, #31
   21338:	ldr	r6, [r4, r7, lsl #2]
   2133c:	orr	r0, r6, r3, lsl r0
   21340:	str	r0, [r4, r7, lsl #2]
   21344:	b	2130c <__assert_fail@plt+0xfbac>
   21348:	mov	r2, #0
   2134c:	mov	r3, #1
   21350:	ldrb	r0, [r1]
   21354:	tst	r0, #8
   21358:	bne	2137c <__assert_fail@plt+0xfc1c>
   2135c:	add	r2, r2, #1
   21360:	add	r1, r1, #2
   21364:	mov	r0, #0
   21368:	cmp	r2, #256	; 0x100
   2136c:	beq	21618 <__assert_fail@plt+0xfeb8>
   21370:	ldrb	r0, [r1]
   21374:	tst	r0, #8
   21378:	beq	2135c <__assert_fail@plt+0xfbfc>
   2137c:	ldrb	r0, [r8, r2]
   21380:	ubfx	r7, r0, #5, #3
   21384:	and	r0, r0, #31
   21388:	ldr	r6, [r4, r7, lsl #2]
   2138c:	orr	r0, r6, r3, lsl r0
   21390:	str	r0, [r4, r7, lsl #2]
   21394:	b	2135c <__assert_fail@plt+0xfbfc>
   21398:	add	r2, r2, #1
   2139c:	add	r1, r1, #2
   213a0:	mov	r0, #0
   213a4:	cmp	r2, #256	; 0x100
   213a8:	beq	21618 <__assert_fail@plt+0xfeb8>
   213ac:	ldrb	r0, [r1]
   213b0:	tst	r0, #1
   213b4:	beq	21398 <__assert_fail@plt+0xfc38>
   213b8:	ldrb	r0, [r8, r2]
   213bc:	ubfx	r7, r0, #5, #3
   213c0:	and	r0, r0, #31
   213c4:	ldr	r6, [r4, r7, lsl #2]
   213c8:	orr	r0, r6, r3, lsl r0
   213cc:	str	r0, [r4, r7, lsl #2]
   213d0:	b	21398 <__assert_fail@plt+0xfc38>
   213d4:	mov	r2, #0
   213d8:	mov	r3, #1
   213dc:	ldrb	r0, [r1]
   213e0:	tst	r0, #2
   213e4:	bne	21408 <__assert_fail@plt+0xfca8>
   213e8:	add	r2, r2, #1
   213ec:	add	r1, r1, #2
   213f0:	mov	r0, #0
   213f4:	cmp	r2, #256	; 0x100
   213f8:	beq	21618 <__assert_fail@plt+0xfeb8>
   213fc:	ldrb	r0, [r1]
   21400:	tst	r0, #2
   21404:	beq	213e8 <__assert_fail@plt+0xfc88>
   21408:	ldrb	r0, [r8, r2]
   2140c:	ubfx	r7, r0, #5, #3
   21410:	and	r0, r0, #31
   21414:	ldr	r6, [r4, r7, lsl #2]
   21418:	orr	r0, r6, r3, lsl r0
   2141c:	str	r0, [r4, r7, lsl #2]
   21420:	b	213e8 <__assert_fail@plt+0xfc88>
   21424:	add	r2, r2, #1
   21428:	add	r1, r1, #2
   2142c:	mov	r0, #0
   21430:	cmp	r2, #256	; 0x100
   21434:	beq	21618 <__assert_fail@plt+0xfeb8>
   21438:	ldrsh	r0, [r1]
   2143c:	cmn	r0, #1
   21440:	bgt	21424 <__assert_fail@plt+0xfcc4>
   21444:	ldrb	r0, [r8, r2]
   21448:	ubfx	r7, r0, #5, #3
   2144c:	and	r0, r0, #31
   21450:	ldr	r6, [r4, r7, lsl #2]
   21454:	orr	r0, r6, r3, lsl r0
   21458:	str	r0, [r4, r7, lsl #2]
   2145c:	b	21424 <__assert_fail@plt+0xfcc4>
   21460:	mov	r2, #0
   21464:	mov	r3, #1
   21468:	ldrb	r0, [r1, #1]
   2146c:	tst	r0, #2
   21470:	bne	21494 <__assert_fail@plt+0xfd34>
   21474:	add	r2, r2, #1
   21478:	add	r1, r1, #2
   2147c:	mov	r0, #0
   21480:	cmp	r2, #256	; 0x100
   21484:	beq	21618 <__assert_fail@plt+0xfeb8>
   21488:	ldrb	r0, [r1, #1]
   2148c:	tst	r0, #2
   21490:	beq	21474 <__assert_fail@plt+0xfd14>
   21494:	ldrb	r0, [r8, r2]
   21498:	ubfx	r7, r0, #5, #3
   2149c:	and	r0, r0, #31
   214a0:	ldr	r6, [r4, r7, lsl #2]
   214a4:	orr	r0, r6, r3, lsl r0
   214a8:	str	r0, [r4, r7, lsl #2]
   214ac:	b	21474 <__assert_fail@plt+0xfd14>
   214b0:	add	r2, r2, #1
   214b4:	add	r1, r1, #2
   214b8:	mov	r0, #0
   214bc:	cmp	r2, #256	; 0x100
   214c0:	beq	21618 <__assert_fail@plt+0xfeb8>
   214c4:	ldrb	r0, [r1]
   214c8:	tst	r0, #4
   214cc:	beq	214b0 <__assert_fail@plt+0xfd50>
   214d0:	ldrb	r0, [r8, r2]
   214d4:	ubfx	r7, r0, #5, #3
   214d8:	and	r0, r0, #31
   214dc:	ldr	r6, [r4, r7, lsl #2]
   214e0:	orr	r0, r6, r3, lsl r0
   214e4:	str	r0, [r4, r7, lsl #2]
   214e8:	b	214b0 <__assert_fail@plt+0xfd50>
   214ec:	mov	r2, #0
   214f0:	mov	r3, #1
   214f4:	ldrb	r0, [r1, #1]
   214f8:	tst	r0, #32
   214fc:	bne	21520 <__assert_fail@plt+0xfdc0>
   21500:	add	r2, r2, #1
   21504:	add	r1, r1, #2
   21508:	mov	r0, #0
   2150c:	cmp	r2, #256	; 0x100
   21510:	beq	21618 <__assert_fail@plt+0xfeb8>
   21514:	ldrb	r0, [r1, #1]
   21518:	tst	r0, #32
   2151c:	beq	21500 <__assert_fail@plt+0xfda0>
   21520:	ldrb	r0, [r8, r2]
   21524:	ubfx	r7, r0, #5, #3
   21528:	and	r0, r0, #31
   2152c:	ldr	r6, [r4, r7, lsl #2]
   21530:	orr	r0, r6, r3, lsl r0
   21534:	str	r0, [r4, r7, lsl #2]
   21538:	b	21500 <__assert_fail@plt+0xfda0>
   2153c:	add	r2, r2, #1
   21540:	add	r1, r1, #2
   21544:	mov	r0, #0
   21548:	cmp	r2, #256	; 0x100
   2154c:	beq	21618 <__assert_fail@plt+0xfeb8>
   21550:	ldrb	r0, [r1, #1]
   21554:	tst	r0, #16
   21558:	beq	2153c <__assert_fail@plt+0xfddc>
   2155c:	ldrb	r0, [r8, r2]
   21560:	ubfx	r7, r0, #5, #3
   21564:	and	r0, r0, #31
   21568:	ldr	r6, [r4, r7, lsl #2]
   2156c:	orr	r0, r6, r3, lsl r0
   21570:	str	r0, [r4, r7, lsl #2]
   21574:	b	2153c <__assert_fail@plt+0xfddc>
   21578:	mov	r2, #0
   2157c:	mov	r3, #1
   21580:	ldrb	r0, [r1, #1]
   21584:	tst	r0, #4
   21588:	bne	215ac <__assert_fail@plt+0xfe4c>
   2158c:	add	r2, r2, #1
   21590:	add	r1, r1, #2
   21594:	mov	r0, #0
   21598:	cmp	r2, #256	; 0x100
   2159c:	beq	21618 <__assert_fail@plt+0xfeb8>
   215a0:	ldrb	r0, [r1, #1]
   215a4:	tst	r0, #4
   215a8:	beq	2158c <__assert_fail@plt+0xfe2c>
   215ac:	ldrb	r0, [r8, r2]
   215b0:	ubfx	r7, r0, #5, #3
   215b4:	and	r0, r0, #31
   215b8:	ldr	r6, [r4, r7, lsl #2]
   215bc:	orr	r0, r6, r3, lsl r0
   215c0:	str	r0, [r4, r7, lsl #2]
   215c4:	b	2158c <__assert_fail@plt+0xfe2c>
   215c8:	mov	r2, #0
   215cc:	mov	r3, #1
   215d0:	ldrb	r0, [r1, #1]
   215d4:	tst	r0, #8
   215d8:	bne	215fc <__assert_fail@plt+0xfe9c>
   215dc:	add	r2, r2, #1
   215e0:	add	r1, r1, #2
   215e4:	mov	r0, #0
   215e8:	cmp	r2, #256	; 0x100
   215ec:	beq	21618 <__assert_fail@plt+0xfeb8>
   215f0:	ldrb	r0, [r1, #1]
   215f4:	tst	r0, #8
   215f8:	beq	215dc <__assert_fail@plt+0xfe7c>
   215fc:	ldrb	r0, [r8, r2]
   21600:	ubfx	r7, r0, #5, #3
   21604:	and	r0, r0, #31
   21608:	ldr	r6, [r4, r7, lsl #2]
   2160c:	orr	r0, r6, r3, lsl r0
   21610:	str	r0, [r4, r7, lsl #2]
   21614:	b	215dc <__assert_fail@plt+0xfe7c>
   21618:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   2161c:	mov	r0, #12
   21620:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   21624:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   21628:	add	fp, sp, #24
   2162c:	ldr	r3, [r1, #24]
   21630:	mvn	r7, #1
   21634:	ldr	r2, [r1, #28]
   21638:	mov	r4, #0
   2163c:	uxtab	r3, r7, r3
   21640:	cmp	r3, #14
   21644:	bhi	21768 <__assert_fail@plt+0x10008>
   21648:	add	r7, pc, #0
   2164c:	ldr	pc, [r7, r3, lsl #2]
   21650:	muleq	r2, ip, r7
   21654:	andeq	r1, r2, r8, ror #14
   21658:	andeq	r1, r2, r0, lsl #15
   2165c:	andeq	r1, r2, r8, ror #14
   21660:	andeq	r1, r2, r8, ror #14
   21664:	andeq	r1, r2, r8, ror #14
   21668:	andeq	r1, r2, ip, lsl #13
   2166c:	andeq	r1, r2, ip, lsl #13
   21670:	andeq	r1, r2, r0, ror #13
   21674:	andeq	r1, r2, r0, ror #13
   21678:	andeq	r1, r2, ip, lsl #13
   2167c:	andeq	r1, r2, r8, ror #14
   21680:	andeq	r1, r2, r8, ror #14
   21684:	andeq	r1, r2, r8, ror #14
   21688:	muleq	r2, ip, r7
   2168c:	ldr	r1, [r1, #16]
   21690:	ldr	r5, [r1, #28]
   21694:	ldr	r6, [r0, #20]
   21698:	add	r0, r2, r2, lsl #1
   2169c:	mov	r1, #1
   216a0:	str	r1, [r6, r0, lsl #2]!
   216a4:	mov	r0, #4
   216a8:	mov	r7, r6
   216ac:	str	r1, [r7, #4]!
   216b0:	bl	2e08c <__assert_fail@plt+0x1c92c>
   216b4:	cmp	r0, #0
   216b8:	str	r0, [r6, #8]
   216bc:	strne	r5, [r0]
   216c0:	movne	r0, r4
   216c4:	popne	{r4, r5, r6, r7, r8, r9, fp, pc}
   216c8:	mov	r0, #0
   216cc:	str	r0, [r7]
   216d0:	str	r0, [r6]
   216d4:	mov	r4, #12
   216d8:	mov	r0, r4
   216dc:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   216e0:	ldrb	r3, [r0, #88]	; 0x58
   216e4:	add	r6, r1, #16
   216e8:	add	r5, r2, r2, lsl #1
   216ec:	orr	r3, r3, #1
   216f0:	strb	r3, [r0, #88]	; 0x58
   216f4:	mov	r3, r6
   216f8:	ldr	r7, [r1, #4]
   216fc:	ldr	r1, [r1, #8]
   21700:	cmp	r1, #0
   21704:	addne	r3, r1, #12
   21708:	cmp	r7, #0
   2170c:	ldr	r1, [r3]
   21710:	addne	r6, r7, #12
   21714:	ldr	r8, [r1, #28]
   21718:	ldr	r1, [r6]
   2171c:	ldr	r6, [r0, #20]
   21720:	mov	r0, #2
   21724:	ldr	r9, [r1, #28]
   21728:	mov	r7, r6
   2172c:	str	r0, [r7, r5, lsl #2]!
   21730:	mov	r0, #8
   21734:	bl	2e08c <__assert_fail@plt+0x1c92c>
   21738:	cmp	r0, #0
   2173c:	str	r0, [r7, #8]
   21740:	beq	216d4 <__assert_fail@plt+0xff74>
   21744:	add	r1, r6, r5, lsl #2
   21748:	cmp	r9, r8
   2174c:	add	r1, r1, #4
   21750:	bne	217a4 <__assert_fail@plt+0x10044>
   21754:	mov	r2, #1
   21758:	str	r2, [r1]
   2175c:	str	r9, [r0]
   21760:	mov	r0, r4
   21764:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   21768:	ldr	r1, [r1, #16]
   2176c:	ldr	r0, [r0, #12]
   21770:	ldr	r1, [r1, #28]
   21774:	str	r1, [r0, r2, lsl #2]
   21778:	mov	r0, r4
   2177c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   21780:	ldr	r7, [r1, #16]
   21784:	ldr	r3, [r0, #12]
   21788:	ldr	r5, [r7, #28]
   2178c:	str	r5, [r3, r2, lsl #2]
   21790:	ldrb	r1, [r1, #24]
   21794:	cmp	r1, #4
   21798:	beq	21694 <__assert_fail@plt+0xff34>
   2179c:	mov	r0, r4
   217a0:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   217a4:	mov	r2, #2
   217a8:	str	r2, [r1]
   217ac:	stmcs	r0, {r8, r9}
   217b0:	strcc	r9, [r0]
   217b4:	strcc	r8, [r0, #4]
   217b8:	mov	r0, r4
   217bc:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   217c0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   217c4:	add	fp, sp, #28
   217c8:	sub	sp, sp, #4
   217cc:	ldr	r6, [r3, #4]
   217d0:	tst	r2, #16
   217d4:	mov	r9, r3
   217d8:	mov	r7, r1
   217dc:	mov	r8, r0
   217e0:	cmpne	r6, #0
   217e4:	bne	2199c <__assert_fail@plt+0x1023c>
   217e8:	ldr	r1, [r7, #64]	; 0x40
   217ec:	cmp	r1, #31
   217f0:	beq	219c4 <__assert_fail@plt+0x10264>
   217f4:	ldr	r0, [r7, #56]	; 0x38
   217f8:	add	r0, r0, r1, lsl #5
   217fc:	add	r2, r1, #1
   21800:	vmov.i32	q8, #0	; 0x00000000
   21804:	mov	r1, #0
   21808:	str	r2, [r7, #64]	; 0x40
   2180c:	mov	r2, #8
   21810:	add	sl, r0, #4
   21814:	str	r1, [r0, #20]
   21818:	str	r1, [r0, #24]
   2181c:	str	r2, [r0, #28]
   21820:	mov	r0, #28
   21824:	mov	r1, sl
   21828:	vst1.32	{d16-d17}, [r1], r0
   2182c:	mvn	r0, #0
   21830:	str	r0, [r1]
   21834:	ldr	r1, [r7, #64]	; 0x40
   21838:	cmp	r1, #31
   2183c:	beq	21a24 <__assert_fail@plt+0x102c4>
   21840:	ldr	r0, [r7, #56]	; 0x38
   21844:	add	r0, r0, r1, lsl #5
   21848:	add	r2, r1, #1
   2184c:	vmov.i32	q8, #0	; 0x00000000
   21850:	mov	r1, #0
   21854:	str	r2, [r7, #64]	; 0x40
   21858:	mov	r2, #9
   2185c:	add	r5, r0, #4
   21860:	str	r1, [r0, #20]
   21864:	str	r1, [r0, #24]
   21868:	str	r2, [r0, #28]
   2186c:	mov	r0, #28
   21870:	mov	r1, r5
   21874:	vst1.32	{d16-d17}, [r1], r0
   21878:	mvn	r0, #0
   2187c:	str	r0, [r1]
   21880:	cmp	r6, #0
   21884:	mov	r4, r5
   21888:	beq	218dc <__assert_fail@plt+0x1017c>
   2188c:	ldr	r1, [r7, #64]	; 0x40
   21890:	cmp	r1, #31
   21894:	beq	219ec <__assert_fail@plt+0x1028c>
   21898:	ldr	r0, [r7, #56]	; 0x38
   2189c:	add	r4, r0, r1, lsl #5
   218a0:	add	r2, r1, #1
   218a4:	mov	r0, #0
   218a8:	cmp	r5, #0
   218ac:	mov	r1, #16
   218b0:	str	r2, [r7, #64]	; 0x40
   218b4:	mvn	r2, #0
   218b8:	str	r0, [r4, #4]!
   218bc:	add	r3, r4, #20
   218c0:	str	r6, [r4, #4]
   218c4:	str	r5, [r4, #8]
   218c8:	str	r0, [r4, #12]
   218cc:	str	r0, [r4, #16]
   218d0:	stm	r3, {r0, r1, r2}
   218d4:	str	r4, [r6]
   218d8:	strne	r4, [r5]
   218dc:	ldr	r1, [r7, #64]	; 0x40
   218e0:	cmp	r1, #31
   218e4:	beq	21a70 <__assert_fail@plt+0x10310>
   218e8:	ldr	r0, [r7, #56]	; 0x38
   218ec:	add	r6, r0, r1, lsl #5
   218f0:	add	r2, r1, #1
   218f4:	mov	r0, #0
   218f8:	cmp	sl, #0
   218fc:	mov	r1, #16
   21900:	str	r2, [r7, #64]	; 0x40
   21904:	mvn	r2, #0
   21908:	str	r0, [r6, #4]!
   2190c:	add	r3, r6, #20
   21910:	str	sl, [r6, #4]
   21914:	str	r4, [r6, #8]
   21918:	str	r0, [r6, #12]
   2191c:	str	r0, [r6, #16]
   21920:	stm	r3, {r0, r1, r2}
   21924:	strne	r6, [sl]
   21928:	cmp	r4, #0
   2192c:	strne	r6, [r4]
   21930:	cmp	r5, #0
   21934:	beq	21944 <__assert_fail@plt+0x101e4>
   21938:	cmp	sl, #0
   2193c:	cmpne	r4, #0
   21940:	bne	2195c <__assert_fail@plt+0x101fc>
   21944:	mov	r0, #12
   21948:	mov	r6, #0
   2194c:	str	r0, [r8]
   21950:	mov	r0, r6
   21954:	sub	sp, fp, #28
   21958:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2195c:	cmp	r6, #0
   21960:	beq	21944 <__assert_fail@plt+0x101e4>
   21964:	ldr	r0, [r9, #20]
   21968:	str	r0, [r5, #20]
   2196c:	str	r0, [sl, #20]
   21970:	ldr	r1, [r9, #24]
   21974:	ldr	r0, [r5, #24]
   21978:	lsr	r1, r1, #19
   2197c:	bfi	r0, r1, #19, #1
   21980:	str	r0, [r5, #24]
   21984:	ldr	r0, [sl, #24]
   21988:	bfi	r0, r1, #19, #1
   2198c:	str	r0, [sl, #24]
   21990:	mov	r0, r6
   21994:	sub	sp, fp, #28
   21998:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2199c:	ldr	r0, [r9, #20]
   219a0:	cmp	r0, #31
   219a4:	bgt	219b8 <__assert_fail@plt+0x10258>
   219a8:	ldr	r1, [r7, #80]	; 0x50
   219ac:	mov	r2, #1
   219b0:	tst	r1, r2, lsl r0
   219b4:	bne	217e8 <__assert_fail@plt+0x10088>
   219b8:	mov	r0, r6
   219bc:	sub	sp, fp, #28
   219c0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   219c4:	mov	r0, #996	; 0x3e4
   219c8:	bl	2e08c <__assert_fail@plt+0x1c92c>
   219cc:	cmp	r0, #0
   219d0:	beq	21a14 <__assert_fail@plt+0x102b4>
   219d4:	ldr	r1, [r7, #56]	; 0x38
   219d8:	str	r1, [r0]
   219dc:	mov	r1, #0
   219e0:	str	r1, [r7, #64]	; 0x40
   219e4:	str	r0, [r7, #56]	; 0x38
   219e8:	b	217f8 <__assert_fail@plt+0x10098>
   219ec:	mov	r0, #996	; 0x3e4
   219f0:	bl	2e08c <__assert_fail@plt+0x1c92c>
   219f4:	cmp	r0, #0
   219f8:	beq	21a60 <__assert_fail@plt+0x10300>
   219fc:	ldr	r1, [r7, #56]	; 0x38
   21a00:	str	r1, [r0]
   21a04:	mov	r1, #0
   21a08:	str	r1, [r7, #64]	; 0x40
   21a0c:	str	r0, [r7, #56]	; 0x38
   21a10:	b	2189c <__assert_fail@plt+0x1013c>
   21a14:	mov	sl, #0
   21a18:	ldr	r1, [r7, #64]	; 0x40
   21a1c:	cmp	r1, #31
   21a20:	bne	21840 <__assert_fail@plt+0x100e0>
   21a24:	mov	r0, #996	; 0x3e4
   21a28:	bl	2e08c <__assert_fail@plt+0x1c92c>
   21a2c:	cmp	r0, #0
   21a30:	beq	21a4c <__assert_fail@plt+0x102ec>
   21a34:	ldr	r1, [r7, #56]	; 0x38
   21a38:	str	r1, [r0]
   21a3c:	mov	r1, #0
   21a40:	str	r1, [r7, #64]	; 0x40
   21a44:	str	r0, [r7, #56]	; 0x38
   21a48:	b	21844 <__assert_fail@plt+0x100e4>
   21a4c:	mov	r5, #0
   21a50:	cmp	r6, #0
   21a54:	mov	r4, r5
   21a58:	bne	2188c <__assert_fail@plt+0x1012c>
   21a5c:	b	218dc <__assert_fail@plt+0x1017c>
   21a60:	mov	r4, #0
   21a64:	ldr	r1, [r7, #64]	; 0x40
   21a68:	cmp	r1, #31
   21a6c:	bne	218e8 <__assert_fail@plt+0x10188>
   21a70:	mov	r0, #996	; 0x3e4
   21a74:	bl	2e08c <__assert_fail@plt+0x1c92c>
   21a78:	cmp	r0, #0
   21a7c:	beq	21a98 <__assert_fail@plt+0x10338>
   21a80:	ldr	r1, [r7, #56]	; 0x38
   21a84:	str	r1, [r0]
   21a88:	mov	r1, #0
   21a8c:	str	r1, [r7, #64]	; 0x40
   21a90:	str	r0, [r7, #56]	; 0x38
   21a94:	b	218ec <__assert_fail@plt+0x1018c>
   21a98:	mov	r6, #0
   21a9c:	cmp	r5, #0
   21aa0:	bne	21938 <__assert_fail@plt+0x101d8>
   21aa4:	b	21944 <__assert_fail@plt+0x101e4>
   21aa8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21aac:	add	fp, sp, #28
   21ab0:	sub	sp, sp, #12
   21ab4:	mov	r4, r0
   21ab8:	ldr	r7, [r0, #4]
   21abc:	ldr	r0, [r0, #8]
   21ac0:	mov	r5, r2
   21ac4:	mov	r9, r1
   21ac8:	cmp	r0, r7
   21acc:	bcs	21b98 <__assert_fail@plt+0x10438>
   21ad0:	ldr	r1, [r4]
   21ad4:	str	r9, [r1, r0, lsl #3]!
   21ad8:	str	r5, [r1, #4]
   21adc:	ldr	r0, [r4]
   21ae0:	ldr	r1, [r4, #8]
   21ae4:	add	r0, r0, r1, lsl #3
   21ae8:	ldr	r1, [r0, #4]
   21aec:	bfc	r1, #8, #10
   21af0:	str	r1, [r0, #4]
   21af4:	uxtb	r1, r5
   21af8:	cmp	r1, #5
   21afc:	bne	21b10 <__assert_fail@plt+0x103b0>
   21b00:	ldr	r2, [r4, #92]	; 0x5c
   21b04:	mov	r0, #1048576	; 0x100000
   21b08:	cmp	r2, #1
   21b0c:	bgt	21b20 <__assert_fail@plt+0x103c0>
   21b10:	sub	r0, r1, #6
   21b14:	clz	r0, r0
   21b18:	lsr	r0, r0, #5
   21b1c:	lsl	r0, r0, #20
   21b20:	ldr	r1, [r4]
   21b24:	ldr	r2, [r4, #8]
   21b28:	add	r1, r1, r2, lsl #3
   21b2c:	ldr	r2, [r1, #4]
   21b30:	bic	r2, r2, #1048576	; 0x100000
   21b34:	orr	r0, r2, r0
   21b38:	mvn	r2, #0
   21b3c:	str	r0, [r1, #4]
   21b40:	ldr	r0, [r4, #8]
   21b44:	ldr	r1, [r4, #12]
   21b48:	str	r2, [r1, r0, lsl #2]
   21b4c:	mov	r2, #0
   21b50:	ldr	r0, [r4, #8]
   21b54:	ldr	r1, [r4, #20]
   21b58:	add	r0, r0, r0, lsl #1
   21b5c:	str	r2, [r1, r0, lsl #2]!
   21b60:	str	r2, [r1, #4]
   21b64:	str	r2, [r1, #8]
   21b68:	ldr	r0, [r4, #8]
   21b6c:	ldr	r1, [r4, #24]
   21b70:	add	r0, r0, r0, lsl #1
   21b74:	str	r2, [r1, r0, lsl #2]!
   21b78:	str	r2, [r1, #4]
   21b7c:	str	r2, [r1, #8]
   21b80:	ldr	r6, [r4, #8]
   21b84:	add	r0, r6, #1
   21b88:	str	r0, [r4, #8]
   21b8c:	mov	r0, r6
   21b90:	sub	sp, fp, #28
   21b94:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21b98:	movw	r0, #21845	; 0x5555
   21b9c:	lsl	r1, r7, #1
   21ba0:	mvn	r6, #0
   21ba4:	movt	r0, #5461	; 0x1555
   21ba8:	cmp	r1, r0
   21bac:	bhi	21b8c <__assert_fail@plt+0x1042c>
   21bb0:	ldr	r0, [r4]
   21bb4:	str	r1, [sp, #8]
   21bb8:	lsl	r1, r7, #4
   21bbc:	bl	2e0bc <__assert_fail@plt+0x1c95c>
   21bc0:	cmp	r0, #0
   21bc4:	beq	21b8c <__assert_fail@plt+0x1042c>
   21bc8:	str	r0, [r4]
   21bcc:	lsl	r8, r7, #3
   21bd0:	ldr	r0, [r4, #12]
   21bd4:	mov	r1, r8
   21bd8:	bl	2e0bc <__assert_fail@plt+0x1c95c>
   21bdc:	str	r0, [sp, #4]
   21be0:	ldr	r0, [r4, #16]
   21be4:	mov	r1, r8
   21be8:	bl	2e0bc <__assert_fail@plt+0x1c95c>
   21bec:	mov	r2, r0
   21bf0:	add	r1, r7, r7, lsl #1
   21bf4:	ldr	r0, [r4, #20]
   21bf8:	mov	r7, r2
   21bfc:	lsl	r8, r1, #3
   21c00:	mov	r1, r8
   21c04:	bl	2e0bc <__assert_fail@plt+0x1c95c>
   21c08:	mov	sl, r0
   21c0c:	ldr	r0, [r4, #24]
   21c10:	mov	r1, r8
   21c14:	bl	2e0bc <__assert_fail@plt+0x1c95c>
   21c18:	mov	r8, r0
   21c1c:	ldr	r0, [sp, #4]
   21c20:	cmp	r0, #0
   21c24:	beq	21c34 <__assert_fail@plt+0x104d4>
   21c28:	cmp	r7, #0
   21c2c:	cmpne	sl, #0
   21c30:	bne	21c5c <__assert_fail@plt+0x104fc>
   21c34:	bl	144c0 <__assert_fail@plt+0x2d60>
   21c38:	mov	r0, r7
   21c3c:	bl	144c0 <__assert_fail@plt+0x2d60>
   21c40:	mov	r0, sl
   21c44:	bl	144c0 <__assert_fail@plt+0x2d60>
   21c48:	mov	r0, r8
   21c4c:	bl	144c0 <__assert_fail@plt+0x2d60>
   21c50:	mov	r0, r6
   21c54:	sub	sp, fp, #28
   21c58:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21c5c:	cmp	r8, #0
   21c60:	beq	21c34 <__assert_fail@plt+0x104d4>
   21c64:	add	r1, r4, #12
   21c68:	stm	r1, {r0, r7, sl}
   21c6c:	str	r8, [r4, #24]
   21c70:	ldr	r0, [sp, #8]
   21c74:	str	r0, [r4, #4]
   21c78:	ldr	r0, [r4, #8]
   21c7c:	b	21ad0 <__assert_fail@plt+0x10370>
   21c80:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21c84:	add	fp, sp, #28
   21c88:	sub	sp, sp, #44	; 0x2c
   21c8c:	mov	r8, r0
   21c90:	ldr	r0, [r1, #20]
   21c94:	add	r4, r2, r2, lsl #1
   21c98:	mov	r5, r1
   21c9c:	mov	r1, #0
   21ca0:	mov	r9, r3
   21ca4:	mov	r6, r2
   21ca8:	add	r0, r0, r4, lsl #2
   21cac:	ldr	r0, [r0, #4]
   21cb0:	str	r1, [sp, #36]	; 0x24
   21cb4:	add	r0, r0, #1
   21cb8:	str	r0, [sp, #32]
   21cbc:	lsl	r0, r0, #2
   21cc0:	bl	2e08c <__assert_fail@plt+0x1c92c>
   21cc4:	cmp	r0, #0
   21cc8:	str	r0, [sp, #40]	; 0x28
   21ccc:	beq	21e9c <__assert_fail@plt+0x1073c>
   21cd0:	mov	r1, #1
   21cd4:	str	r6, [r0]
   21cd8:	str	r1, [sp, #36]	; 0x24
   21cdc:	mvn	r1, #0
   21ce0:	ldr	r0, [r5, #24]
   21ce4:	add	r0, r0, r4, lsl #2
   21ce8:	str	r1, [r0, #4]
   21cec:	ldr	r2, [r5]
   21cf0:	add	r0, r2, r6, lsl #3
   21cf4:	ldr	r0, [r0, #4]
   21cf8:	ubfx	r1, r0, #8, #10
   21cfc:	cmp	r1, #0
   21d00:	beq	21d5c <__assert_fail@plt+0x105fc>
   21d04:	ldr	r3, [r5, #20]
   21d08:	add	r3, r3, r4, lsl #2
   21d0c:	ldr	r7, [r3, #4]
   21d10:	cmp	r7, #0
   21d14:	beq	21d5c <__assert_fail@plt+0x105fc>
   21d18:	ldr	r3, [r3, #8]
   21d1c:	ldr	r3, [r3]
   21d20:	add	r2, r2, r3, lsl #3
   21d24:	ldrb	r2, [r2, #6]
   21d28:	tst	r2, #4
   21d2c:	bne	21d5c <__assert_fail@plt+0x105fc>
   21d30:	str	r1, [sp]
   21d34:	mov	r0, r5
   21d38:	mov	r1, r6
   21d3c:	mov	r2, r6
   21d40:	mov	r3, r6
   21d44:	bl	21ea8 <__assert_fail@plt+0x10748>
   21d48:	cmp	r0, #0
   21d4c:	bne	21e94 <__assert_fail@plt+0x10734>
   21d50:	ldr	r0, [r5]
   21d54:	add	r0, r0, r6, lsl #3
   21d58:	ldr	r0, [r0, #4]
   21d5c:	tst	r0, #8
   21d60:	beq	21e68 <__assert_fail@plt+0x10708>
   21d64:	ldr	r0, [r5, #20]
   21d68:	add	r1, r0, r4, lsl #2
   21d6c:	ldr	r1, [r1, #4]
   21d70:	cmp	r1, #1
   21d74:	blt	21e68 <__assert_fail@plt+0x10708>
   21d78:	str	r8, [sp, #12]
   21d7c:	mov	r8, #0
   21d80:	add	r7, sp, #16
   21d84:	add	sl, sp, #32
   21d88:	mov	r6, #0
   21d8c:	str	r9, [sp, #8]
   21d90:	b	21db0 <__assert_fail@plt+0x10650>
   21d94:	mov	r8, #1
   21d98:	ldr	r0, [r5, #20]
   21d9c:	add	r6, r6, #1
   21da0:	add	r1, r0, r4, lsl #2
   21da4:	ldr	r1, [r1, #4]
   21da8:	cmp	r6, r1
   21dac:	bge	21e3c <__assert_fail@plt+0x106dc>
   21db0:	add	r0, r0, r4, lsl #2
   21db4:	ldr	r0, [r0, #8]
   21db8:	ldr	r2, [r0, r6, lsl #2]
   21dbc:	ldr	r0, [r5, #24]
   21dc0:	add	r9, r2, r2, lsl #1
   21dc4:	add	r0, r0, r9, lsl #2
   21dc8:	ldr	r1, [r0, #4]
   21dcc:	cmn	r1, #1
   21dd0:	beq	21d94 <__assert_fail@plt+0x10634>
   21dd4:	cmp	r1, #0
   21dd8:	bne	21df8 <__assert_fail@plt+0x10698>
   21ddc:	mov	r0, r7
   21de0:	mov	r1, r5
   21de4:	mov	r3, #0
   21de8:	bl	21c80 <__assert_fail@plt+0x10520>
   21dec:	cmp	r0, #0
   21df0:	beq	21e08 <__assert_fail@plt+0x106a8>
   21df4:	b	21e94 <__assert_fail@plt+0x10734>
   21df8:	vldr	d16, [r0]
   21dfc:	ldr	r0, [r0, #8]
   21e00:	str	r0, [sp, #24]
   21e04:	vstr	d16, [sp, #16]
   21e08:	mov	r0, sl
   21e0c:	mov	r1, r7
   21e10:	bl	22338 <__assert_fail@plt+0x10bd8>
   21e14:	cmp	r0, #0
   21e18:	bne	21e94 <__assert_fail@plt+0x10734>
   21e1c:	ldr	r0, [r5, #24]
   21e20:	add	r0, r0, r9, lsl #2
   21e24:	ldr	r0, [r0, #4]
   21e28:	cmp	r0, #0
   21e2c:	bne	21d98 <__assert_fail@plt+0x10638>
   21e30:	ldr	r0, [sp, #24]
   21e34:	bl	144c0 <__assert_fail@plt+0x2d60>
   21e38:	b	21d94 <__assert_fail@plt+0x10634>
   21e3c:	tst	r8, #1
   21e40:	ldr	r8, [sp, #12]
   21e44:	ldr	r0, [sp, #8]
   21e48:	beq	21e68 <__assert_fail@plt+0x10708>
   21e4c:	cmp	r0, #0
   21e50:	bne	21e68 <__assert_fail@plt+0x10708>
   21e54:	ldr	r0, [r5, #24]
   21e58:	mov	r1, #0
   21e5c:	add	r0, r0, r4, lsl #2
   21e60:	str	r1, [r0, #4]
   21e64:	b	21e80 <__assert_fail@plt+0x10720>
   21e68:	ldr	r0, [r5, #24]
   21e6c:	vldr	d16, [sp, #32]
   21e70:	ldr	r1, [sp, #40]	; 0x28
   21e74:	add	r0, r0, r4, lsl #2
   21e78:	str	r1, [r0, #8]
   21e7c:	vstr	d16, [r0]
   21e80:	ldr	r0, [sp, #40]	; 0x28
   21e84:	vldr	d16, [sp, #32]
   21e88:	str	r0, [r8, #8]
   21e8c:	mov	r0, #0
   21e90:	vstr	d16, [r8]
   21e94:	sub	sp, fp, #28
   21e98:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21e9c:	mov	r0, #12
   21ea0:	sub	sp, fp, #28
   21ea4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21ea8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21eac:	add	fp, sp, #28
   21eb0:	sub	sp, sp, #20
   21eb4:	mov	r9, r0
   21eb8:	ldr	r0, [fp, #8]
   21ebc:	mov	r8, r2
   21ec0:	mov	r5, r1
   21ec4:	str	r3, [sp, #8]
   21ec8:	str	r0, [sp, #12]
   21ecc:	ldr	r1, [sp, #12]
   21ed0:	movw	r0, #65280	; 0xff00
   21ed4:	movt	r0, #3
   21ed8:	and	r0, r0, r1, lsl #8
   21edc:	str	r0, [sp, #16]
   21ee0:	ldr	r2, [r9]
   21ee4:	add	r3, r2, r5, lsl #3
   21ee8:	ldrb	r0, [r3, #4]!
   21eec:	cmp	r0, #4
   21ef0:	bne	21fc8 <__assert_fail@plt+0x10868>
   21ef4:	ldr	r0, [r9, #12]
   21ef8:	ldr	r1, [r9, #20]
   21efc:	add	r7, r8, r8, lsl #1
   21f00:	ldr	r6, [r0, r5, lsl #2]
   21f04:	add	r0, r1, r7, lsl #2
   21f08:	mov	r1, #0
   21f0c:	str	r1, [r0, #4]
   21f10:	mov	r0, r9
   21f14:	ldr	r1, [r2, r6, lsl #3]!
   21f18:	ldr	r2, [r2, #4]
   21f1c:	bl	21aa8 <__assert_fail@plt+0x10348>
   21f20:	cmn	r0, #1
   21f24:	beq	22328 <__assert_fail@plt+0x10bc8>
   21f28:	mov	r4, r0
   21f2c:	ldr	r0, [r9]
   21f30:	movw	r2, #255	; 0xff
   21f34:	movt	r2, #65532	; 0xfffc
   21f38:	add	r0, r0, r4, lsl #3
   21f3c:	ldr	r1, [r0, #4]
   21f40:	and	r1, r1, r2
   21f44:	ldr	r2, [sp, #16]
   21f48:	orr	r1, r1, r2
   21f4c:	movw	r2, #65280	; 0xff00
   21f50:	str	r1, [r0, #4]
   21f54:	movt	r2, #3
   21f58:	ldr	r0, [r9]
   21f5c:	add	r1, r0, r6, lsl #3
   21f60:	add	r0, r0, r4, lsl #3
   21f64:	ldr	r1, [r1, #4]
   21f68:	and	r1, r1, r2
   21f6c:	ldr	r2, [r0, #4]
   21f70:	orr	r1, r1, r2
   21f74:	str	r1, [r0, #4]
   21f78:	ldr	r0, [r9]
   21f7c:	add	r0, r0, r4, lsl #3
   21f80:	ldr	r1, [r0, #4]
   21f84:	orr	r1, r1, #262144	; 0x40000
   21f88:	str	r1, [r0, #4]
   21f8c:	ldr	r0, [r9, #16]
   21f90:	str	r6, [r0, r4, lsl #2]
   21f94:	ldr	r0, [r9, #12]
   21f98:	ldr	r1, [r0, r5, lsl #2]
   21f9c:	str	r1, [r0, r8, lsl #2]
   21fa0:	mov	r1, r4
   21fa4:	ldr	r0, [r9, #20]
   21fa8:	add	r0, r0, r7, lsl #2
   21fac:	bl	224d8 <__assert_fail@plt+0x10d78>
   21fb0:	cmp	r0, #0
   21fb4:	mov	r5, r6
   21fb8:	mov	r8, r4
   21fbc:	mov	r7, #12
   21fc0:	bne	21ee0 <__assert_fail@plt+0x10780>
   21fc4:	b	222f8 <__assert_fail@plt+0x10b98>
   21fc8:	ldr	r0, [r9, #20]
   21fcc:	add	ip, r5, r5, lsl #1
   21fd0:	add	r7, r0, ip, lsl #2
   21fd4:	ldr	r1, [r7, #4]
   21fd8:	cmp	r1, #0
   21fdc:	beq	222dc <__assert_fail@plt+0x10b7c>
   21fe0:	ldr	r7, [r7, #8]
   21fe4:	add	r4, r8, r8, lsl #1
   21fe8:	cmp	r1, #1
   21fec:	add	r0, r0, r4, lsl #2
   21ff0:	ldr	sl, [r7]
   21ff4:	mov	r7, #0
   21ff8:	str	r7, [r0, #4]
   21ffc:	beq	22204 <__assert_fail@plt+0x10aa4>
   22000:	ldr	r1, [r9, #8]
   22004:	mov	r8, r4
   22008:	ldr	r4, [sp, #12]
   2200c:	sub	r3, r1, #1
   22010:	cmp	r3, #1
   22014:	blt	22064 <__assert_fail@plt+0x10904>
   22018:	add	r3, r2, r3, lsl #3
   2201c:	ldr	r7, [r3, #4]
   22020:	ands	r3, r7, #262144	; 0x40000
   22024:	beq	22064 <__assert_fail@plt+0x10904>
   22028:	ldr	r6, [r9, #16]
   2202c:	sub	r3, r2, #12
   22030:	sub	r6, r6, #4
   22034:	ldr	r5, [r6, r1, lsl #2]
   22038:	cmp	r5, sl
   2203c:	ubfxeq	r7, r7, #8, #10
   22040:	cmpeq	r7, r4
   22044:	beq	221e8 <__assert_fail@plt+0x10a88>
   22048:	sub	r7, r1, #2
   2204c:	cmp	r7, #1
   22050:	blt	22064 <__assert_fail@plt+0x10904>
   22054:	ldr	r7, [r3, r1, lsl #3]
   22058:	sub	r1, r1, #1
   2205c:	ands	r5, r7, #262144	; 0x40000
   22060:	bne	22034 <__assert_fail@plt+0x108d4>
   22064:	ldr	r1, [r2, sl, lsl #3]!
   22068:	mov	r0, r9
   2206c:	mov	r5, ip
   22070:	ldr	r2, [r2, #4]
   22074:	bl	21aa8 <__assert_fail@plt+0x10348>
   22078:	mov	r7, #12
   2207c:	cmn	r0, #1
   22080:	beq	222f8 <__assert_fail@plt+0x10b98>
   22084:	mov	r6, r0
   22088:	ldr	r0, [r9]
   2208c:	movw	r2, #255	; 0xff
   22090:	mov	r4, r8
   22094:	movt	r2, #65532	; 0xfffc
   22098:	add	r0, r0, r6, lsl #3
   2209c:	ldr	r1, [r0, #4]
   220a0:	and	r1, r1, r2
   220a4:	ldr	r2, [sp, #16]
   220a8:	orr	r1, r1, r2
   220ac:	movw	r2, #65280	; 0xff00
   220b0:	str	r1, [r0, #4]
   220b4:	movt	r2, #3
   220b8:	ldr	r0, [r9]
   220bc:	add	r1, r0, sl, lsl #3
   220c0:	add	r0, r0, r6, lsl #3
   220c4:	ldr	r1, [r1, #4]
   220c8:	and	r1, r1, r2
   220cc:	ldr	r2, [r0, #4]
   220d0:	orr	r1, r1, r2
   220d4:	str	r1, [r0, #4]
   220d8:	ldr	r0, [r9]
   220dc:	add	r0, r0, r6, lsl #3
   220e0:	ldr	r1, [r0, #4]
   220e4:	orr	r1, r1, #262144	; 0x40000
   220e8:	str	r1, [r0, #4]
   220ec:	mov	r1, r6
   220f0:	ldr	r0, [r9, #16]
   220f4:	str	sl, [r0, r6, lsl #2]
   220f8:	ldr	r0, [r9, #20]
   220fc:	add	r0, r0, r8, lsl #2
   22100:	bl	224d8 <__assert_fail@plt+0x10d78>
   22104:	cmp	r0, #0
   22108:	beq	222f8 <__assert_fail@plt+0x10b98>
   2210c:	ldr	r0, [sp, #12]
   22110:	ldr	r3, [sp, #8]
   22114:	mov	r1, sl
   22118:	mov	r2, r6
   2211c:	str	r0, [sp]
   22120:	mov	r0, r9
   22124:	bl	21ea8 <__assert_fail@plt+0x10748>
   22128:	cmp	r0, #0
   2212c:	bne	222f4 <__assert_fail@plt+0x10b94>
   22130:	ldr	r1, [r9, #20]
   22134:	ldr	r0, [r9]
   22138:	add	r1, r1, r5, lsl #2
   2213c:	ldr	r1, [r1, #8]
   22140:	ldr	r5, [r1, #4]
   22144:	ldr	r1, [r0, r5, lsl #3]!
   22148:	ldr	r2, [r0, #4]
   2214c:	mov	r0, r9
   22150:	bl	21aa8 <__assert_fail@plt+0x10348>
   22154:	mov	r7, #12
   22158:	cmn	r0, #1
   2215c:	beq	222f8 <__assert_fail@plt+0x10b98>
   22160:	mov	r8, r0
   22164:	ldr	r0, [r9]
   22168:	movw	r2, #255	; 0xff
   2216c:	movt	r2, #65532	; 0xfffc
   22170:	add	r0, r0, r8, lsl #3
   22174:	ldr	r1, [r0, #4]
   22178:	and	r1, r1, r2
   2217c:	ldr	r2, [sp, #16]
   22180:	orr	r1, r1, r2
   22184:	movw	r2, #65280	; 0xff00
   22188:	str	r1, [r0, #4]
   2218c:	movt	r2, #3
   22190:	ldr	r0, [r9]
   22194:	add	r1, r0, r5, lsl #3
   22198:	add	r0, r0, r8, lsl #3
   2219c:	ldr	r1, [r1, #4]
   221a0:	and	r1, r1, r2
   221a4:	ldr	r2, [r0, #4]
   221a8:	orr	r1, r1, r2
   221ac:	str	r1, [r0, #4]
   221b0:	ldr	r0, [r9]
   221b4:	add	r0, r0, r8, lsl #3
   221b8:	ldr	r1, [r0, #4]
   221bc:	orr	r1, r1, #262144	; 0x40000
   221c0:	str	r1, [r0, #4]
   221c4:	mov	r1, r8
   221c8:	ldr	r0, [r9, #16]
   221cc:	str	r5, [r0, r8, lsl #2]
   221d0:	ldr	r0, [r9, #20]
   221d4:	add	r0, r0, r4, lsl #2
   221d8:	bl	224d8 <__assert_fail@plt+0x10d78>
   221dc:	cmp	r0, #0
   221e0:	bne	21ee0 <__assert_fail@plt+0x10780>
   221e4:	b	222f8 <__assert_fail@plt+0x10b98>
   221e8:	sub	r1, r1, #1
   221ec:	mov	r5, ip
   221f0:	bl	224d8 <__assert_fail@plt+0x10d78>
   221f4:	cmp	r0, #0
   221f8:	mov	r4, r8
   221fc:	bne	22130 <__assert_fail@plt+0x109d0>
   22200:	b	22328 <__assert_fail@plt+0x10bc8>
   22204:	ldr	r1, [sp, #8]
   22208:	cmp	r5, r1
   2220c:	bne	22218 <__assert_fail@plt+0x10ab8>
   22210:	cmp	r8, r5
   22214:	bne	22304 <__assert_fail@plt+0x10ba4>
   22218:	ldr	r1, [r2, sl, lsl #3]!
   2221c:	ldr	r6, [r3]
   22220:	mov	r0, r9
   22224:	ldr	r2, [r2, #4]
   22228:	bl	21aa8 <__assert_fail@plt+0x10348>
   2222c:	mov	r8, r0
   22230:	ubfx	r0, r6, #8, #10
   22234:	mov	r7, #12
   22238:	cmn	r8, #1
   2223c:	beq	222f8 <__assert_fail@plt+0x10b98>
   22240:	ldr	r1, [sp, #12]
   22244:	movw	r7, #255	; 0xff
   22248:	movt	r7, #65532	; 0xfffc
   2224c:	orr	r1, r0, r1
   22250:	movw	r0, #65280	; 0xff00
   22254:	movt	r0, #3
   22258:	str	r1, [sp, #12]
   2225c:	mov	r3, r0
   22260:	and	r0, r0, r1, lsl #8
   22264:	ldr	r1, [r9]
   22268:	add	r1, r1, r8, lsl #3
   2226c:	ldr	r2, [r1, #4]
   22270:	and	r2, r2, r7
   22274:	mov	r7, #12
   22278:	orr	r0, r2, r0
   2227c:	str	r0, [r1, #4]
   22280:	ldr	r0, [r9]
   22284:	add	r1, r0, sl, lsl #3
   22288:	add	r0, r0, r8, lsl #3
   2228c:	ldr	r1, [r1, #4]
   22290:	ldr	r2, [r0, #4]
   22294:	and	r1, r1, r3
   22298:	orr	r1, r1, r2
   2229c:	str	r1, [r0, #4]
   222a0:	ldr	r0, [r9]
   222a4:	add	r0, r0, r8, lsl #3
   222a8:	ldr	r1, [r0, #4]
   222ac:	orr	r1, r1, #262144	; 0x40000
   222b0:	str	r1, [r0, #4]
   222b4:	mov	r1, r8
   222b8:	ldr	r0, [r9, #16]
   222bc:	str	sl, [r0, r8, lsl #2]
   222c0:	ldr	r0, [r9, #20]
   222c4:	add	r0, r0, r4, lsl #2
   222c8:	bl	224d8 <__assert_fail@plt+0x10d78>
   222cc:	cmp	r0, #0
   222d0:	mov	r5, sl
   222d4:	bne	21ecc <__assert_fail@plt+0x1076c>
   222d8:	b	222f8 <__assert_fail@plt+0x10b98>
   222dc:	ldr	r0, [r9, #12]
   222e0:	ldr	r1, [r0, r5, lsl #2]
   222e4:	str	r1, [r0, r8, lsl #2]
   222e8:	mov	r0, #0
   222ec:	sub	sp, fp, #28
   222f0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   222f4:	mov	r7, r0
   222f8:	mov	r0, r7
   222fc:	sub	sp, fp, #28
   22300:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   22304:	mov	r1, sl
   22308:	bl	224d8 <__assert_fail@plt+0x10d78>
   2230c:	mov	r1, r0
   22310:	mov	r7, #12
   22314:	mov	r0, #0
   22318:	cmp	r1, #0
   2231c:	moveq	r0, r7
   22320:	sub	sp, fp, #28
   22324:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   22328:	mov	r7, #12
   2232c:	mov	r0, r7
   22330:	sub	sp, fp, #28
   22334:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   22338:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   2233c:	add	fp, sp, #24
   22340:	mov	r8, #0
   22344:	cmp	r1, #0
   22348:	beq	224ac <__assert_fail@plt+0x10d4c>
   2234c:	mov	r6, r1
   22350:	ldr	r1, [r1, #4]
   22354:	cmp	r1, #0
   22358:	beq	224ac <__assert_fail@plt+0x10d4c>
   2235c:	mov	r9, r0
   22360:	ldr	r2, [r0]
   22364:	ldr	r0, [r0, #4]
   22368:	add	r3, r0, r1, lsl #1
   2236c:	cmp	r2, r3
   22370:	bge	2239c <__assert_fail@plt+0x10c3c>
   22374:	ldr	r0, [r9, #8]
   22378:	add	r7, r2, r1
   2237c:	lsl	r1, r7, #3
   22380:	bl	2e0bc <__assert_fail@plt+0x1c95c>
   22384:	cmp	r0, #0
   22388:	beq	224cc <__assert_fail@plt+0x10d6c>
   2238c:	str	r0, [r9, #8]
   22390:	lsl	r0, r7, #1
   22394:	str	r0, [r9]
   22398:	ldr	r0, [r9, #4]
   2239c:	cmp	r0, #0
   223a0:	beq	224b4 <__assert_fail@plt+0x10d54>
   223a4:	ldr	r2, [r6, #4]
   223a8:	sub	r1, r0, #1
   223ac:	add	r7, r0, r2, lsl #1
   223b0:	sub	r0, r2, #1
   223b4:	orrs	r2, r0, r1
   223b8:	bmi	22414 <__assert_fail@plt+0x10cb4>
   223bc:	ldr	r2, [r6, #8]
   223c0:	ldr	r3, [r9, #8]
   223c4:	ldr	r4, [r2, r0, lsl #2]
   223c8:	ldr	r5, [r3, r1, lsl #2]
   223cc:	cmp	r5, r4
   223d0:	beq	22400 <__assert_fail@plt+0x10ca0>
   223d4:	sublt	r7, r7, #1
   223d8:	subge	r1, r1, #1
   223dc:	sublt	r0, r0, #1
   223e0:	strlt	r4, [r3, r7, lsl #2]
   223e4:	orr	r5, r0, r1
   223e8:	cmn	r5, #1
   223ec:	ble	22414 <__assert_fail@plt+0x10cb4>
   223f0:	ldr	r4, [r2, r0, lsl #2]
   223f4:	ldr	r5, [r3, r1, lsl #2]
   223f8:	cmp	r5, r4
   223fc:	bne	223d4 <__assert_fail@plt+0x10c74>
   22400:	sub	r1, r1, #1
   22404:	sub	r0, r0, #1
   22408:	orr	r5, r0, r1
   2240c:	cmn	r5, #1
   22410:	bgt	223f0 <__assert_fail@plt+0x10c90>
   22414:	cmp	r0, #0
   22418:	bmi	22438 <__assert_fail@plt+0x10cd8>
   2241c:	add	r2, r0, #1
   22420:	ldr	r0, [r9, #8]
   22424:	ldr	r1, [r6, #8]
   22428:	sub	r7, r7, r2
   2242c:	lsl	r2, r2, #2
   22430:	add	r0, r0, r7, lsl #2
   22434:	bl	11484 <memcpy@plt>
   22438:	ldr	r0, [r9, #4]
   2243c:	ldr	r2, [r6, #4]
   22440:	sub	r1, r0, #1
   22444:	add	r3, r1, r2, lsl #1
   22448:	sub	r2, r3, r7
   2244c:	adds	r2, r2, #1
   22450:	bcs	224ac <__assert_fail@plt+0x10d4c>
   22454:	add	r0, r2, r0
   22458:	str	r0, [r9, #4]
   2245c:	ldr	r0, [r9, #8]
   22460:	ldr	r6, [r0, r1, lsl #2]
   22464:	ldr	r5, [r0, r3, lsl #2]
   22468:	cmp	r5, r6
   2246c:	ble	22488 <__assert_fail@plt+0x10d28>
   22470:	add	r6, r2, r1
   22474:	subs	r2, r2, #1
   22478:	sub	r3, r3, #1
   2247c:	str	r5, [r0, r6, lsl #2]
   22480:	bne	22460 <__assert_fail@plt+0x10d00>
   22484:	b	224ac <__assert_fail@plt+0x10d4c>
   22488:	add	r5, r2, r1
   2248c:	cmp	r1, #0
   22490:	str	r6, [r0, r5, lsl #2]
   22494:	sub	r6, r1, #1
   22498:	mov	r1, r6
   2249c:	bgt	22460 <__assert_fail@plt+0x10d00>
   224a0:	add	r1, r0, r7, lsl #2
   224a4:	lsl	r2, r2, #2
   224a8:	bl	11484 <memcpy@plt>
   224ac:	mov	r0, r8
   224b0:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   224b4:	ldr	r0, [r6, #4]
   224b8:	str	r0, [r9, #4]
   224bc:	ldr	r0, [r9, #8]
   224c0:	ldr	r2, [r6, #4]
   224c4:	ldr	r1, [r6, #8]
   224c8:	b	224a4 <__assert_fail@plt+0x10d44>
   224cc:	mov	r8, #12
   224d0:	mov	r0, r8
   224d4:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   224d8:	push	{r4, r5, r6, sl, fp, lr}
   224dc:	add	fp, sp, #16
   224e0:	ldr	r2, [r0]
   224e4:	mov	r5, r1
   224e8:	mov	r4, r0
   224ec:	cmp	r2, #0
   224f0:	beq	22520 <__assert_fail@plt+0x10dc0>
   224f4:	ldr	r1, [r4, #4]
   224f8:	cmp	r1, #0
   224fc:	bne	2255c <__assert_fail@plt+0x10dfc>
   22500:	ldr	r0, [r4, #8]
   22504:	str	r5, [r0]
   22508:	ldr	r0, [r4, #4]
   2250c:	mov	r6, #1
   22510:	add	r0, r0, #1
   22514:	str	r0, [r4, #4]
   22518:	mov	r0, r6
   2251c:	pop	{r4, r5, r6, sl, fp, pc}
   22520:	mov	r6, #1
   22524:	mov	r0, #4
   22528:	str	r6, [r4]
   2252c:	str	r6, [r4, #4]
   22530:	bl	2e08c <__assert_fail@plt+0x1c92c>
   22534:	cmp	r0, #0
   22538:	str	r0, [r4, #8]
   2253c:	strne	r5, [r0]
   22540:	movne	r0, r6
   22544:	popne	{r4, r5, r6, sl, fp, pc}
   22548:	mov	r6, #0
   2254c:	mov	r0, r6
   22550:	str	r6, [r4]
   22554:	str	r6, [r4, #4]
   22558:	pop	{r4, r5, r6, sl, fp, pc}
   2255c:	cmp	r2, r1
   22560:	bne	22598 <__assert_fail@plt+0x10e38>
   22564:	lsl	r0, r2, #1
   22568:	lsl	r1, r2, #3
   2256c:	str	r0, [r4]
   22570:	ldr	r0, [r4, #8]
   22574:	bl	2e0bc <__assert_fail@plt+0x1c95c>
   22578:	cmp	r0, #0
   2257c:	beq	2264c <__assert_fail@plt+0x10eec>
   22580:	str	r0, [r4, #8]
   22584:	ldr	r1, [r4, #4]
   22588:	ldr	r2, [r0]
   2258c:	cmp	r2, r5
   22590:	bgt	225a8 <__assert_fail@plt+0x10e48>
   22594:	b	22614 <__assert_fail@plt+0x10eb4>
   22598:	ldr	r0, [r4, #8]
   2259c:	ldr	r2, [r0]
   225a0:	cmp	r2, r5
   225a4:	ble	22614 <__assert_fail@plt+0x10eb4>
   225a8:	cmp	r1, #1
   225ac:	blt	22644 <__assert_fail@plt+0x10ee4>
   225b0:	ands	r3, r1, #3
   225b4:	sub	ip, r1, #1
   225b8:	beq	225dc <__assert_fail@plt+0x10e7c>
   225bc:	add	lr, r0, r1, lsl #2
   225c0:	mov	r6, lr
   225c4:	ldr	r2, [r6, #-4]!
   225c8:	subs	r3, r3, #1
   225cc:	sub	r1, r1, #1
   225d0:	str	r2, [lr]
   225d4:	mov	lr, r6
   225d8:	bne	225c4 <__assert_fail@plt+0x10e64>
   225dc:	cmp	ip, #3
   225e0:	bcc	2260c <__assert_fail@plt+0x10eac>
   225e4:	add	r2, r0, r1, lsl #2
   225e8:	sub	r2, r2, #8
   225ec:	sub	lr, r2, #8
   225f0:	sub	r1, r1, #4
   225f4:	sub	sl, r2, #4
   225f8:	sub	r2, r2, #16
   225fc:	ldm	lr, {r3, r6, ip, lr}
   22600:	cmp	r1, #0
   22604:	stm	sl, {r3, r6, ip, lr}
   22608:	bgt	225ec <__assert_fail@plt+0x10e8c>
   2260c:	mov	r1, #0
   22610:	b	22644 <__assert_fail@plt+0x10ee4>
   22614:	add	r2, r0, r1, lsl #2
   22618:	ldr	r3, [r2, #-4]
   2261c:	cmp	r3, r5
   22620:	ble	22644 <__assert_fail@plt+0x10ee4>
   22624:	sub	r1, r1, #2
   22628:	str	r3, [r2]
   2262c:	sub	r1, r1, #1
   22630:	ldr	r3, [r2, #-8]
   22634:	sub	r2, r2, #4
   22638:	cmp	r3, r5
   2263c:	bgt	22628 <__assert_fail@plt+0x10ec8>
   22640:	add	r1, r1, #2
   22644:	str	r5, [r0, r1, lsl #2]
   22648:	b	22508 <__assert_fail@plt+0x10da8>
   2264c:	mov	r6, #0
   22650:	mov	r0, r6
   22654:	pop	{r4, r5, r6, sl, fp, pc}
   22658:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2265c:	add	fp, sp, #28
   22660:	sub	sp, sp, #28
   22664:	ldr	sl, [r2, #4]
   22668:	cmp	sl, #0
   2266c:	beq	22890 <__assert_fail@plt+0x11130>
   22670:	mov	r9, r3
   22674:	add	r7, sl, r3
   22678:	cmp	sl, #1
   2267c:	str	r1, [sp, #16]
   22680:	str	r2, [sp, #20]
   22684:	str	r0, [sp]
   22688:	blt	22770 <__assert_fail@plt+0x11010>
   2268c:	ldr	ip, [r2, #8]
   22690:	mov	r8, #0
   22694:	cmp	sl, #4
   22698:	bcc	22758 <__assert_fail@plt+0x10ff8>
   2269c:	mov	r3, #0
   226a0:	bic	r8, sl, #3
   226a4:	mov	r1, #1
   226a8:	vdup.32	q8, r3
   226ac:	sub	r4, r8, #4
   226b0:	add	r1, r1, r4, lsr #2
   226b4:	cmp	r4, #12
   226b8:	and	lr, r1, #3
   226bc:	vmov.32	d16[0], r7
   226c0:	bcc	22714 <__assert_fail@plt+0x10fb4>
   226c4:	sub	r6, r1, lr
   226c8:	mov	r3, #0
   226cc:	mov	r4, #64	; 0x40
   226d0:	mov	r7, ip
   226d4:	mov	r1, ip
   226d8:	vld1.32	{d18-d19}, [r1], r4
   226dc:	add	r5, r7, #16
   226e0:	add	r2, r7, #32
   226e4:	subs	r6, r6, #4
   226e8:	add	r3, r3, #16
   226ec:	vld1.32	{d20-d21}, [r5]
   226f0:	vadd.i32	q8, q9, q8
   226f4:	vld1.32	{d18-d19}, [r2]
   226f8:	add	r2, r7, #48	; 0x30
   226fc:	mov	r7, r1
   22700:	vadd.i32	q8, q10, q8
   22704:	vld1.32	{d20-d21}, [r2]
   22708:	vadd.i32	q8, q9, q8
   2270c:	vadd.i32	q8, q10, q8
   22710:	bne	226d8 <__assert_fail@plt+0x10f78>
   22714:	cmp	lr, #0
   22718:	beq	22734 <__assert_fail@plt+0x10fd4>
   2271c:	add	r1, ip, r3, lsl #2
   22720:	rsb	r3, lr, #0
   22724:	vld1.32	{d18-d19}, [r1]!
   22728:	adds	r3, r3, #1
   2272c:	vadd.i32	q8, q9, q8
   22730:	bcc	22724 <__assert_fail@plt+0x10fc4>
   22734:	vext.8	q9, q8, q8, #8
   22738:	ldr	r1, [sp, #16]
   2273c:	ldr	r2, [sp, #20]
   22740:	cmp	sl, r8
   22744:	vadd.i32	q8, q8, q9
   22748:	vdup.32	q9, d16[1]
   2274c:	vadd.i32	q8, q8, q9
   22750:	vmov.32	r7, d16[0]
   22754:	beq	22770 <__assert_fail@plt+0x11010>
   22758:	add	r0, ip, r8, lsl #2
   2275c:	sub	r6, sl, r8
   22760:	ldr	r3, [r0], #4
   22764:	subs	r6, r6, #1
   22768:	add	r7, r3, r7
   2276c:	bne	22760 <__assert_fail@plt+0x11000>
   22770:	ldr	r0, [r1, #32]
   22774:	ldr	r1, [r1, #68]	; 0x44
   22778:	and	r1, r1, r7
   2277c:	add	r3, r1, r1, lsl #1
   22780:	ldr	r1, [r0, r3, lsl #2]
   22784:	cmp	r1, #1
   22788:	blt	22828 <__assert_fail@plt+0x110c8>
   2278c:	cmp	r2, #0
   22790:	beq	22828 <__assert_fail@plt+0x110c8>
   22794:	add	r0, r0, r3, lsl #2
   22798:	sub	ip, sl, #1
   2279c:	mov	r6, #0
   227a0:	ldr	lr, [r0, #8]
   227a4:	ldr	r8, [lr, r6, lsl #2]
   227a8:	ldr	r3, [r8]
   227ac:	cmp	r3, r7
   227b0:	beq	227d0 <__assert_fail@plt+0x11070>
   227b4:	add	r6, r6, #1
   227b8:	cmp	r6, r1
   227bc:	bge	22828 <__assert_fail@plt+0x110c8>
   227c0:	ldr	r8, [lr, r6, lsl #2]
   227c4:	ldr	r3, [r8]
   227c8:	cmp	r3, r7
   227cc:	bne	227b4 <__assert_fail@plt+0x11054>
   227d0:	ldrb	r3, [r8, #52]	; 0x34
   227d4:	and	r3, r3, #15
   227d8:	cmp	r3, r9
   227dc:	bne	227b4 <__assert_fail@plt+0x11054>
   227e0:	ldr	r4, [r8, #40]	; 0x28
   227e4:	cmp	r4, #0
   227e8:	beq	227b4 <__assert_fail@plt+0x11054>
   227ec:	ldr	r3, [r4, #4]
   227f0:	cmp	r3, sl
   227f4:	bne	227b4 <__assert_fail@plt+0x11054>
   227f8:	mov	r3, ip
   227fc:	add	r5, r3, #1
   22800:	cmp	r5, #1
   22804:	blt	23064 <__assert_fail@plt+0x11904>
   22808:	ldr	r5, [r2, #8]
   2280c:	ldr	r0, [r4, #8]
   22810:	ldr	r5, [r5, r3, lsl #2]
   22814:	ldr	r0, [r0, r3, lsl #2]
   22818:	sub	r3, r3, #1
   2281c:	cmp	r0, r5
   22820:	beq	227fc <__assert_fail@plt+0x1109c>
   22824:	b	227b4 <__assert_fail@plt+0x11054>
   22828:	mov	r0, #56	; 0x38
   2282c:	mov	r1, #1
   22830:	bl	2e038 <__assert_fail@plt+0x1c8d8>
   22834:	cmp	r0, #0
   22838:	beq	23084 <__assert_fail@plt+0x11924>
   2283c:	ldr	ip, [sp, #20]
   22840:	mov	r8, r0
   22844:	add	r6, r0, #4
   22848:	ldr	r3, [ip, #4]
   2284c:	cmp	r3, #1
   22850:	str	r3, [r0, #8]
   22854:	blt	228a4 <__assert_fail@plt+0x11144>
   22858:	lsl	r0, r3, #2
   2285c:	str	r3, [r8, #4]
   22860:	bl	2e08c <__assert_fail@plt+0x1c92c>
   22864:	cmp	r0, #0
   22868:	str	r0, [r8, #12]
   2286c:	beq	230a0 <__assert_fail@plt+0x11940>
   22870:	ldr	r4, [sp, #20]
   22874:	ldr	r5, [r4, #4]
   22878:	ldr	r1, [r4, #8]
   2287c:	lsl	r2, r5, #2
   22880:	bl	11484 <memcpy@plt>
   22884:	mov	r3, r5
   22888:	mov	ip, r4
   2288c:	b	228b4 <__assert_fail@plt+0x11154>
   22890:	mov	r8, #0
   22894:	str	r8, [r0]
   22898:	mov	r0, r8
   2289c:	sub	sp, fp, #28
   228a0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   228a4:	mov	r0, #0
   228a8:	str	r0, [r6]
   228ac:	str	r0, [r6, #4]
   228b0:	str	r0, [r6, #8]
   228b4:	mov	sl, r8
   228b8:	and	r1, r9, #15
   228bc:	cmp	r3, #1
   228c0:	str	r6, [sp, #24]
   228c4:	ldrb	r0, [sl, #52]!	; 0x34
   228c8:	str	r6, [sl, #-12]
   228cc:	and	r0, r0, #240	; 0xf0
   228d0:	orr	r0, r0, r1
   228d4:	strb	r0, [sl]
   228d8:	ldr	r0, [sp, #16]
   228dc:	blt	23050 <__assert_fail@plt+0x118f0>
   228e0:	and	r1, r9, #4
   228e4:	tst	r9, #1
   228e8:	str	sl, [sp, #8]
   228ec:	str	r1, [sp, #12]
   228f0:	and	r1, r9, #2
   228f4:	bne	22ad4 <__assert_fail@plt+0x11374>
   228f8:	movw	r9, #65280	; 0xff00
   228fc:	mov	r6, #0
   22900:	mov	lr, #0
   22904:	cmp	r1, #0
   22908:	movt	r9, #3
   2290c:	add	r5, r9, #255	; 0xff
   22910:	bne	22cb0 <__assert_fail@plt+0x11550>
   22914:	str	r5, [sp, #4]
   22918:	b	22930 <__assert_fail@plt+0x111d0>
   2291c:	mov	r3, r5
   22920:	ldr	r5, [sp, #4]
   22924:	add	r6, r6, #1
   22928:	cmp	r6, r3
   2292c:	bge	23050 <__assert_fail@plt+0x118f0>
   22930:	ldr	r1, [ip, #8]
   22934:	ldr	r2, [r0]
   22938:	ldr	r1, [r1, r6, lsl #2]
   2293c:	add	r1, r2, r1, lsl #3
   22940:	ldr	r4, [r1, #4]
   22944:	and	r1, r4, r5
   22948:	cmp	r1, #1
   2294c:	beq	22924 <__assert_fail@plt+0x111c4>
   22950:	mov	r5, r3
   22954:	ldrb	r3, [sl]
   22958:	mov	r2, #32
   2295c:	and	r1, r4, r9
   22960:	and	r2, r2, r4, lsr #15
   22964:	orr	r2, r3, r2
   22968:	uxtb	r3, r4
   2296c:	strb	r2, [sl]
   22970:	cmp	r3, #4
   22974:	beq	22988 <__assert_fail@plt+0x11228>
   22978:	cmp	r3, #2
   2297c:	bne	22994 <__assert_fail@plt+0x11234>
   22980:	mov	r3, #16
   22984:	b	2298c <__assert_fail@plt+0x1122c>
   22988:	mov	r3, #64	; 0x40
   2298c:	orr	r2, r2, r3
   22990:	strb	r2, [sl]
   22994:	cmp	r1, #0
   22998:	beq	2291c <__assert_fail@plt+0x111bc>
   2299c:	ldr	r1, [r8, #40]	; 0x28
   229a0:	ldr	r2, [sp, #24]
   229a4:	mov	r3, r5
   229a8:	cmp	r1, r2
   229ac:	beq	229d4 <__assert_fail@plt+0x11274>
   229b0:	ldr	r5, [sp, #4]
   229b4:	tst	r4, #4352	; 0x1100
   229b8:	bne	22a78 <__assert_fail@plt+0x11318>
   229bc:	ldr	r1, [sp, #12]
   229c0:	cmp	r1, #0
   229c4:	bne	22924 <__assert_fail@plt+0x111c4>
   229c8:	ands	r1, r4, #16384	; 0x4000
   229cc:	bne	22a78 <__assert_fail@plt+0x11318>
   229d0:	b	22924 <__assert_fail@plt+0x111c4>
   229d4:	mov	r0, #12
   229d8:	bl	2e08c <__assert_fail@plt+0x1c92c>
   229dc:	cmp	r0, #0
   229e0:	beq	2307c <__assert_fail@plt+0x1191c>
   229e4:	ldr	ip, [sp, #20]
   229e8:	str	r0, [r8, #40]	; 0x28
   229ec:	mov	sl, r0
   229f0:	mov	r5, r0
   229f4:	ldr	r3, [ip, #4]
   229f8:	str	r3, [sl, #4]!
   229fc:	cmp	r3, #0
   22a00:	ble	22a44 <__assert_fail@plt+0x112e4>
   22a04:	lsl	r0, r3, #2
   22a08:	str	r3, [r5]
   22a0c:	bl	2e08c <__assert_fail@plt+0x1c92c>
   22a10:	cmp	r0, #0
   22a14:	str	r0, [r5, #8]
   22a18:	beq	23070 <__assert_fail@plt+0x11910>
   22a1c:	ldr	r5, [sp, #20]
   22a20:	ldr	r9, [r5, #4]
   22a24:	ldr	r1, [r5, #8]
   22a28:	lsl	r2, r9, #2
   22a2c:	bl	11484 <memcpy@plt>
   22a30:	mov	r3, r9
   22a34:	movw	r9, #65280	; 0xff00
   22a38:	mov	ip, r5
   22a3c:	movt	r9, #3
   22a40:	b	22a54 <__assert_fail@plt+0x112f4>
   22a44:	mov	r0, #0
   22a48:	str	r0, [r5]
   22a4c:	str	r0, [r5, #4]
   22a50:	str	r0, [r5, #8]
   22a54:	ldr	sl, [sp, #8]
   22a58:	mov	lr, #0
   22a5c:	ldrb	r0, [sl]
   22a60:	orr	r0, r0, #128	; 0x80
   22a64:	strb	r0, [sl]
   22a68:	ldr	r0, [sp, #16]
   22a6c:	ldr	r5, [sp, #4]
   22a70:	tst	r4, #4352	; 0x1100
   22a74:	beq	229bc <__assert_fail@plt+0x1125c>
   22a78:	subs	r1, r6, lr
   22a7c:	bmi	22a98 <__assert_fail@plt+0x11338>
   22a80:	ldr	r2, [r8, #8]
   22a84:	cmp	r2, r1
   22a88:	subgt	r2, r2, #1
   22a8c:	strgt	r2, [r8, #8]
   22a90:	cmpgt	r2, r1
   22a94:	bgt	22aac <__assert_fail@plt+0x1134c>
   22a98:	add	lr, lr, #1
   22a9c:	add	r6, r6, #1
   22aa0:	cmp	r6, r3
   22aa4:	blt	22930 <__assert_fail@plt+0x111d0>
   22aa8:	b	23050 <__assert_fail@plt+0x118f0>
   22aac:	ldr	r2, [r8, #12]
   22ab0:	add	r3, r2, r1, lsl #2
   22ab4:	ldr	r3, [r3, #4]
   22ab8:	str	r3, [r2, r1, lsl #2]
   22abc:	add	r1, r1, #1
   22ac0:	ldr	r3, [r8, #8]
   22ac4:	cmp	r1, r3
   22ac8:	blt	22ab0 <__assert_fail@plt+0x11350>
   22acc:	ldr	r3, [ip, #4]
   22ad0:	b	22a98 <__assert_fail@plt+0x11338>
   22ad4:	cmp	r1, #0
   22ad8:	bne	22e70 <__assert_fail@plt+0x11710>
   22adc:	movw	r9, #65280	; 0xff00
   22ae0:	mov	r6, #0
   22ae4:	mov	lr, #0
   22ae8:	movt	r9, #3
   22aec:	add	r5, r9, #255	; 0xff
   22af0:	str	r5, [sp, #4]
   22af4:	b	22b0c <__assert_fail@plt+0x113ac>
   22af8:	mov	r3, r5
   22afc:	ldr	r5, [sp, #4]
   22b00:	add	r6, r6, #1
   22b04:	cmp	r6, r3
   22b08:	bge	23050 <__assert_fail@plt+0x118f0>
   22b0c:	ldr	r1, [ip, #8]
   22b10:	ldr	r2, [r0]
   22b14:	ldr	r1, [r1, r6, lsl #2]
   22b18:	add	r1, r2, r1, lsl #3
   22b1c:	ldr	r4, [r1, #4]
   22b20:	and	r1, r4, r5
   22b24:	cmp	r1, #1
   22b28:	beq	22b00 <__assert_fail@plt+0x113a0>
   22b2c:	mov	r5, r3
   22b30:	ldrb	r3, [sl]
   22b34:	mov	r2, #32
   22b38:	and	r1, r4, r9
   22b3c:	and	r2, r2, r4, lsr #15
   22b40:	orr	r2, r3, r2
   22b44:	uxtb	r3, r4
   22b48:	strb	r2, [sl]
   22b4c:	cmp	r3, #4
   22b50:	beq	22b64 <__assert_fail@plt+0x11404>
   22b54:	cmp	r3, #2
   22b58:	bne	22b70 <__assert_fail@plt+0x11410>
   22b5c:	mov	r3, #16
   22b60:	b	22b68 <__assert_fail@plt+0x11408>
   22b64:	mov	r3, #64	; 0x40
   22b68:	orr	r2, r2, r3
   22b6c:	strb	r2, [sl]
   22b70:	cmp	r1, #0
   22b74:	beq	22af8 <__assert_fail@plt+0x11398>
   22b78:	ldr	r1, [r8, #40]	; 0x28
   22b7c:	ldr	r2, [sp, #24]
   22b80:	mov	r3, r5
   22b84:	cmp	r1, r2
   22b88:	beq	22bb0 <__assert_fail@plt+0x11450>
   22b8c:	ldr	r5, [sp, #4]
   22b90:	tst	r4, #4608	; 0x1200
   22b94:	bne	22c54 <__assert_fail@plt+0x114f4>
   22b98:	ldr	r1, [sp, #12]
   22b9c:	cmp	r1, #0
   22ba0:	bne	22b00 <__assert_fail@plt+0x113a0>
   22ba4:	ands	r1, r4, #16384	; 0x4000
   22ba8:	bne	22c54 <__assert_fail@plt+0x114f4>
   22bac:	b	22b00 <__assert_fail@plt+0x113a0>
   22bb0:	mov	r0, #12
   22bb4:	bl	2e08c <__assert_fail@plt+0x1c92c>
   22bb8:	cmp	r0, #0
   22bbc:	beq	2307c <__assert_fail@plt+0x1191c>
   22bc0:	ldr	ip, [sp, #20]
   22bc4:	str	r0, [r8, #40]	; 0x28
   22bc8:	mov	sl, r0
   22bcc:	mov	r5, r0
   22bd0:	ldr	r3, [ip, #4]
   22bd4:	str	r3, [sl, #4]!
   22bd8:	cmp	r3, #0
   22bdc:	ble	22c20 <__assert_fail@plt+0x114c0>
   22be0:	lsl	r0, r3, #2
   22be4:	str	r3, [r5]
   22be8:	bl	2e08c <__assert_fail@plt+0x1c92c>
   22bec:	cmp	r0, #0
   22bf0:	str	r0, [r5, #8]
   22bf4:	beq	23070 <__assert_fail@plt+0x11910>
   22bf8:	ldr	r5, [sp, #20]
   22bfc:	ldr	r9, [r5, #4]
   22c00:	ldr	r1, [r5, #8]
   22c04:	lsl	r2, r9, #2
   22c08:	bl	11484 <memcpy@plt>
   22c0c:	mov	r3, r9
   22c10:	movw	r9, #65280	; 0xff00
   22c14:	mov	ip, r5
   22c18:	movt	r9, #3
   22c1c:	b	22c30 <__assert_fail@plt+0x114d0>
   22c20:	mov	r0, #0
   22c24:	str	r0, [r5]
   22c28:	str	r0, [r5, #4]
   22c2c:	str	r0, [r5, #8]
   22c30:	ldr	sl, [sp, #8]
   22c34:	mov	lr, #0
   22c38:	ldrb	r0, [sl]
   22c3c:	orr	r0, r0, #128	; 0x80
   22c40:	strb	r0, [sl]
   22c44:	ldr	r0, [sp, #16]
   22c48:	ldr	r5, [sp, #4]
   22c4c:	tst	r4, #4608	; 0x1200
   22c50:	beq	22b98 <__assert_fail@plt+0x11438>
   22c54:	subs	r1, r6, lr
   22c58:	bmi	22c74 <__assert_fail@plt+0x11514>
   22c5c:	ldr	r2, [r8, #8]
   22c60:	cmp	r2, r1
   22c64:	subgt	r2, r2, #1
   22c68:	strgt	r2, [r8, #8]
   22c6c:	cmpgt	r2, r1
   22c70:	bgt	22c88 <__assert_fail@plt+0x11528>
   22c74:	add	lr, lr, #1
   22c78:	add	r6, r6, #1
   22c7c:	cmp	r6, r3
   22c80:	blt	22b0c <__assert_fail@plt+0x113ac>
   22c84:	b	23050 <__assert_fail@plt+0x118f0>
   22c88:	ldr	r2, [r8, #12]
   22c8c:	add	r3, r2, r1, lsl #2
   22c90:	ldr	r3, [r3, #4]
   22c94:	str	r3, [r2, r1, lsl #2]
   22c98:	add	r1, r1, #1
   22c9c:	ldr	r3, [r8, #8]
   22ca0:	cmp	r1, r3
   22ca4:	blt	22c8c <__assert_fail@plt+0x1152c>
   22ca8:	ldr	r3, [ip, #4]
   22cac:	b	22c74 <__assert_fail@plt+0x11514>
   22cb0:	str	r5, [sp, #4]
   22cb4:	b	22ccc <__assert_fail@plt+0x1156c>
   22cb8:	mov	r3, r5
   22cbc:	ldr	r5, [sp, #4]
   22cc0:	add	r6, r6, #1
   22cc4:	cmp	r6, r3
   22cc8:	bge	23050 <__assert_fail@plt+0x118f0>
   22ccc:	ldr	r1, [ip, #8]
   22cd0:	ldr	r2, [r0]
   22cd4:	ldr	r1, [r1, r6, lsl #2]
   22cd8:	add	r1, r2, r1, lsl #3
   22cdc:	ldr	r4, [r1, #4]
   22ce0:	and	r1, r4, r5
   22ce4:	cmp	r1, #1
   22ce8:	beq	22cc0 <__assert_fail@plt+0x11560>
   22cec:	mov	r5, r3
   22cf0:	ldrb	r3, [sl]
   22cf4:	mov	r2, #32
   22cf8:	and	r1, r4, r9
   22cfc:	and	r2, r2, r4, lsr #15
   22d00:	orr	r2, r3, r2
   22d04:	uxtb	r3, r4
   22d08:	strb	r2, [sl]
   22d0c:	cmp	r3, #4
   22d10:	beq	22d24 <__assert_fail@plt+0x115c4>
   22d14:	cmp	r3, #2
   22d18:	bne	22d30 <__assert_fail@plt+0x115d0>
   22d1c:	mov	r3, #16
   22d20:	b	22d28 <__assert_fail@plt+0x115c8>
   22d24:	mov	r3, #64	; 0x40
   22d28:	orr	r2, r2, r3
   22d2c:	strb	r2, [sl]
   22d30:	cmp	r1, #0
   22d34:	beq	22cb8 <__assert_fail@plt+0x11558>
   22d38:	ldr	r1, [r8, #40]	; 0x28
   22d3c:	ldr	r2, [sp, #24]
   22d40:	mov	r3, r5
   22d44:	cmp	r1, r2
   22d48:	beq	22d70 <__assert_fail@plt+0x11610>
   22d4c:	ldr	r5, [sp, #4]
   22d50:	tst	r4, #256	; 0x100
   22d54:	bne	22e14 <__assert_fail@plt+0x116b4>
   22d58:	ldr	r1, [sp, #12]
   22d5c:	cmp	r1, #0
   22d60:	bne	22cc0 <__assert_fail@plt+0x11560>
   22d64:	ands	r1, r4, #16384	; 0x4000
   22d68:	bne	22e14 <__assert_fail@plt+0x116b4>
   22d6c:	b	22cc0 <__assert_fail@plt+0x11560>
   22d70:	mov	r0, #12
   22d74:	bl	2e08c <__assert_fail@plt+0x1c92c>
   22d78:	cmp	r0, #0
   22d7c:	beq	2307c <__assert_fail@plt+0x1191c>
   22d80:	ldr	ip, [sp, #20]
   22d84:	str	r0, [r8, #40]	; 0x28
   22d88:	mov	sl, r0
   22d8c:	mov	r5, r0
   22d90:	ldr	r3, [ip, #4]
   22d94:	str	r3, [sl, #4]!
   22d98:	cmp	r3, #0
   22d9c:	ble	22de0 <__assert_fail@plt+0x11680>
   22da0:	lsl	r0, r3, #2
   22da4:	str	r3, [r5]
   22da8:	bl	2e08c <__assert_fail@plt+0x1c92c>
   22dac:	cmp	r0, #0
   22db0:	str	r0, [r5, #8]
   22db4:	beq	23070 <__assert_fail@plt+0x11910>
   22db8:	ldr	r5, [sp, #20]
   22dbc:	ldr	r9, [r5, #4]
   22dc0:	ldr	r1, [r5, #8]
   22dc4:	lsl	r2, r9, #2
   22dc8:	bl	11484 <memcpy@plt>
   22dcc:	mov	r3, r9
   22dd0:	movw	r9, #65280	; 0xff00
   22dd4:	mov	ip, r5
   22dd8:	movt	r9, #3
   22ddc:	b	22df0 <__assert_fail@plt+0x11690>
   22de0:	mov	r0, #0
   22de4:	str	r0, [r5]
   22de8:	str	r0, [r5, #4]
   22dec:	str	r0, [r5, #8]
   22df0:	ldr	sl, [sp, #8]
   22df4:	mov	lr, #0
   22df8:	ldrb	r0, [sl]
   22dfc:	orr	r0, r0, #128	; 0x80
   22e00:	strb	r0, [sl]
   22e04:	ldr	r0, [sp, #16]
   22e08:	ldr	r5, [sp, #4]
   22e0c:	tst	r4, #256	; 0x100
   22e10:	beq	22d58 <__assert_fail@plt+0x115f8>
   22e14:	subs	r1, r6, lr
   22e18:	bmi	22e34 <__assert_fail@plt+0x116d4>
   22e1c:	ldr	r2, [r8, #8]
   22e20:	cmp	r2, r1
   22e24:	subgt	r2, r2, #1
   22e28:	strgt	r2, [r8, #8]
   22e2c:	cmpgt	r2, r1
   22e30:	bgt	22e48 <__assert_fail@plt+0x116e8>
   22e34:	add	lr, lr, #1
   22e38:	add	r6, r6, #1
   22e3c:	cmp	r6, r3
   22e40:	blt	22ccc <__assert_fail@plt+0x1156c>
   22e44:	b	23050 <__assert_fail@plt+0x118f0>
   22e48:	ldr	r2, [r8, #12]
   22e4c:	add	r3, r2, r1, lsl #2
   22e50:	ldr	r3, [r3, #4]
   22e54:	str	r3, [r2, r1, lsl #2]
   22e58:	add	r1, r1, #1
   22e5c:	ldr	r3, [r8, #8]
   22e60:	cmp	r1, r3
   22e64:	blt	22e4c <__assert_fail@plt+0x116ec>
   22e68:	ldr	r3, [ip, #4]
   22e6c:	b	22e34 <__assert_fail@plt+0x116d4>
   22e70:	movw	lr, #65280	; 0xff00
   22e74:	mov	r9, #0
   22e78:	mov	r4, #0
   22e7c:	movt	lr, #3
   22e80:	add	r5, lr, #255	; 0xff
   22e84:	str	r5, [sp, #4]
   22e88:	b	22ea0 <__assert_fail@plt+0x11740>
   22e8c:	mov	r3, r5
   22e90:	ldr	r5, [sp, #4]
   22e94:	add	r9, r9, #1
   22e98:	cmp	r9, r3
   22e9c:	bge	23050 <__assert_fail@plt+0x118f0>
   22ea0:	ldr	r1, [ip, #8]
   22ea4:	ldr	r2, [r0]
   22ea8:	ldr	r1, [r1, r9, lsl #2]
   22eac:	add	r1, r2, r1, lsl #3
   22eb0:	ldr	r6, [r1, #4]
   22eb4:	and	r1, r6, r5
   22eb8:	cmp	r1, #1
   22ebc:	beq	22e94 <__assert_fail@plt+0x11734>
   22ec0:	mov	r5, r3
   22ec4:	ldrb	r3, [sl]
   22ec8:	mov	r2, #32
   22ecc:	and	r1, r6, lr
   22ed0:	and	r2, r2, r6, lsr #15
   22ed4:	orr	r2, r3, r2
   22ed8:	uxtb	r3, r6
   22edc:	strb	r2, [sl]
   22ee0:	cmp	r3, #2
   22ee4:	beq	22ef8 <__assert_fail@plt+0x11798>
   22ee8:	cmp	r3, #4
   22eec:	bne	22f04 <__assert_fail@plt+0x117a4>
   22ef0:	mov	r3, #64	; 0x40
   22ef4:	b	22efc <__assert_fail@plt+0x1179c>
   22ef8:	mov	r3, #16
   22efc:	orr	r2, r2, r3
   22f00:	strb	r2, [sl]
   22f04:	cmp	r1, #0
   22f08:	beq	22e8c <__assert_fail@plt+0x1172c>
   22f0c:	ldr	r1, [r8, #40]	; 0x28
   22f10:	ldr	r2, [sp, #24]
   22f14:	mov	r3, r5
   22f18:	cmp	r1, r2
   22f1c:	beq	22f44 <__assert_fail@plt+0x117e4>
   22f20:	ldr	r5, [sp, #4]
   22f24:	tst	r6, #512	; 0x200
   22f28:	bne	22fe8 <__assert_fail@plt+0x11888>
   22f2c:	ldr	r1, [sp, #12]
   22f30:	cmp	r1, #0
   22f34:	bne	22e94 <__assert_fail@plt+0x11734>
   22f38:	ands	r1, r6, #16384	; 0x4000
   22f3c:	bne	22fe8 <__assert_fail@plt+0x11888>
   22f40:	b	22e94 <__assert_fail@plt+0x11734>
   22f44:	mov	r0, #12
   22f48:	bl	2e08c <__assert_fail@plt+0x1c92c>
   22f4c:	cmp	r0, #0
   22f50:	beq	2307c <__assert_fail@plt+0x1191c>
   22f54:	ldr	ip, [sp, #20]
   22f58:	str	r0, [r8, #40]	; 0x28
   22f5c:	mov	sl, r0
   22f60:	mov	r5, r0
   22f64:	ldr	r3, [ip, #4]
   22f68:	str	r3, [sl, #4]!
   22f6c:	cmp	r3, #1
   22f70:	blt	22fac <__assert_fail@plt+0x1184c>
   22f74:	lsl	r0, r3, #2
   22f78:	str	r3, [r5]
   22f7c:	bl	2e08c <__assert_fail@plt+0x1c92c>
   22f80:	cmp	r0, #0
   22f84:	str	r0, [r5, #8]
   22f88:	beq	23070 <__assert_fail@plt+0x11910>
   22f8c:	ldr	r4, [sp, #20]
   22f90:	ldr	r5, [r4, #4]
   22f94:	ldr	r1, [r4, #8]
   22f98:	lsl	r2, r5, #2
   22f9c:	bl	11484 <memcpy@plt>
   22fa0:	mov	r3, r5
   22fa4:	mov	ip, r4
   22fa8:	b	22fbc <__assert_fail@plt+0x1185c>
   22fac:	mov	r0, #0
   22fb0:	str	r0, [r5]
   22fb4:	str	r0, [r5, #4]
   22fb8:	str	r0, [r5, #8]
   22fbc:	ldr	sl, [sp, #8]
   22fc0:	movw	lr, #65280	; 0xff00
   22fc4:	mov	r4, #0
   22fc8:	movt	lr, #3
   22fcc:	ldrb	r0, [sl]
   22fd0:	orr	r0, r0, #128	; 0x80
   22fd4:	strb	r0, [sl]
   22fd8:	ldr	r0, [sp, #16]
   22fdc:	ldr	r5, [sp, #4]
   22fe0:	tst	r6, #512	; 0x200
   22fe4:	beq	22f2c <__assert_fail@plt+0x117cc>
   22fe8:	subs	r1, r9, r4
   22fec:	bmi	23008 <__assert_fail@plt+0x118a8>
   22ff0:	ldr	r2, [r8, #8]
   22ff4:	cmp	r2, r1
   22ff8:	subgt	r2, r2, #1
   22ffc:	strgt	r2, [r8, #8]
   23000:	cmpgt	r2, r1
   23004:	bgt	2301c <__assert_fail@plt+0x118bc>
   23008:	add	r4, r4, #1
   2300c:	add	r9, r9, #1
   23010:	cmp	r9, r3
   23014:	blt	22ea0 <__assert_fail@plt+0x11740>
   23018:	b	23050 <__assert_fail@plt+0x118f0>
   2301c:	ldr	r2, [r8, #12]
   23020:	add	r3, r2, r1, lsl #2
   23024:	ldr	r3, [r3, #4]
   23028:	str	r3, [r2, r1, lsl #2]
   2302c:	add	r1, r1, #1
   23030:	ldr	r3, [r8, #8]
   23034:	cmp	r1, r3
   23038:	blt	23020 <__assert_fail@plt+0x118c0>
   2303c:	ldr	r3, [ip, #4]
   23040:	add	r4, r4, #1
   23044:	add	r9, r9, #1
   23048:	cmp	r9, r3
   2304c:	blt	22ea0 <__assert_fail@plt+0x11740>
   23050:	mov	r1, r8
   23054:	mov	r2, r7
   23058:	bl	230b8 <__assert_fail@plt+0x11958>
   2305c:	cmp	r0, #0
   23060:	bne	2307c <__assert_fail@plt+0x1191c>
   23064:	mov	r0, r8
   23068:	sub	sp, fp, #28
   2306c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   23070:	mov	r0, #0
   23074:	str	r0, [sl]
   23078:	str	r0, [r5]
   2307c:	mov	r0, r8
   23080:	bl	1c0b0 <__assert_fail@plt+0xa950>
   23084:	ldr	r1, [sp]
   23088:	mov	r0, #12
   2308c:	mov	r8, #0
   23090:	str	r0, [r1]
   23094:	mov	r0, r8
   23098:	sub	sp, fp, #28
   2309c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   230a0:	mov	r0, #0
   230a4:	str	r0, [r8, #4]
   230a8:	str	r0, [r8, #8]
   230ac:	mov	r0, r8
   230b0:	bl	144c0 <__assert_fail@plt+0x2d60>
   230b4:	b	23084 <__assert_fail@plt+0x11924>
   230b8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   230bc:	add	fp, sp, #28
   230c0:	sub	sp, sp, #4
   230c4:	str	r2, [r1]
   230c8:	mov	r4, r1
   230cc:	mov	r7, r0
   230d0:	mov	r0, #0
   230d4:	mov	r9, r2
   230d8:	ldr	r1, [r1, #8]
   230dc:	str	r1, [r4, #16]
   230e0:	str	r0, [r4, #20]
   230e4:	lsl	r0, r1, #2
   230e8:	bl	2e08c <__assert_fail@plt+0x1c92c>
   230ec:	mov	r8, #12
   230f0:	cmp	r0, #0
   230f4:	str	r0, [r4, #24]
   230f8:	beq	231c0 <__assert_fail@plt+0x11a60>
   230fc:	ldr	r1, [r4, #8]
   23100:	cmp	r1, #1
   23104:	blt	23180 <__assert_fail@plt+0x11a20>
   23108:	mov	r5, #0
   2310c:	mov	sl, #2
   23110:	b	23130 <__assert_fail@plt+0x119d0>
   23114:	add	r2, r1, #1
   23118:	str	r2, [r4, #20]
   2311c:	str	r6, [r0, r1, lsl #2]
   23120:	ldr	r1, [r4, #8]
   23124:	add	r5, r5, #1
   23128:	cmp	r5, r1
   2312c:	bge	23180 <__assert_fail@plt+0x11a20>
   23130:	ldr	r2, [r4, #12]
   23134:	ldr	r6, [r2, r5, lsl #2]
   23138:	ldr	r2, [r7]
   2313c:	add	r2, r2, r6, lsl #3
   23140:	ldrb	r2, [r2, #4]
   23144:	tst	r2, #8
   23148:	bne	23124 <__assert_fail@plt+0x119c4>
   2314c:	ldr	r2, [r4, #16]
   23150:	ldr	r1, [r4, #20]
   23154:	cmp	r2, r1
   23158:	bne	23114 <__assert_fail@plt+0x119b4>
   2315c:	add	r1, sl, r2, lsl #1
   23160:	str	r1, [r4, #16]
   23164:	lsl	r1, r1, #2
   23168:	bl	2e0bc <__assert_fail@plt+0x1c95c>
   2316c:	cmp	r0, #0
   23170:	beq	231c0 <__assert_fail@plt+0x11a60>
   23174:	str	r0, [r4, #24]
   23178:	ldr	r1, [r4, #20]
   2317c:	b	23114 <__assert_fail@plt+0x119b4>
   23180:	ldr	r1, [r7, #68]	; 0x44
   23184:	ldr	r0, [r7, #32]
   23188:	and	r1, r1, r9
   2318c:	mov	r5, r0
   23190:	add	r2, r1, r1, lsl #1
   23194:	ldr	r1, [r5, r2, lsl #2]!
   23198:	mov	r6, r5
   2319c:	ldr	r3, [r6, #4]!
   231a0:	cmp	r3, r1
   231a4:	ble	231cc <__assert_fail@plt+0x11a6c>
   231a8:	add	r0, r0, r2, lsl #2
   231ac:	ldr	r0, [r0, #8]
   231b0:	add	r2, r1, #1
   231b4:	mov	r8, #0
   231b8:	str	r2, [r5]
   231bc:	str	r4, [r0, r1, lsl #2]
   231c0:	mov	r0, r8
   231c4:	sub	sp, fp, #28
   231c8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   231cc:	add	r7, r0, r2, lsl #2
   231d0:	mov	r2, #2
   231d4:	add	r9, r2, r1, lsl #1
   231d8:	ldr	r0, [r7, #8]!
   231dc:	lsl	r1, r9, #2
   231e0:	bl	2e0bc <__assert_fail@plt+0x1c95c>
   231e4:	cmp	r0, #0
   231e8:	beq	231c0 <__assert_fail@plt+0x11a60>
   231ec:	str	r0, [r7]
   231f0:	str	r9, [r6]
   231f4:	ldr	r1, [r5]
   231f8:	b	231b0 <__assert_fail@plt+0x11a50>
   231fc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   23200:	add	fp, sp, #28
   23204:	sub	sp, sp, #36	; 0x24
   23208:	mov	r4, r0
   2320c:	ldr	r0, [r0, #24]
   23210:	mov	r6, r2
   23214:	mov	r9, r1
   23218:	cmp	r0, r1
   2321c:	ble	23434 <__assert_fail@plt+0x11cd4>
   23220:	ldr	r0, [r4, #80]	; 0x50
   23224:	mov	r1, #4
   23228:	cmp	r0, #2
   2322c:	movge	r0, #0
   23230:	strge	r0, [r4, #16]
   23234:	strge	r0, [r4, #20]
   23238:	mov	r0, #0
   2323c:	tst	r6, #1
   23240:	strb	r0, [r4, #76]	; 0x4c
   23244:	str	r0, [r4, #24]
   23248:	str	r0, [r4, #28]
   2324c:	str	r0, [r4, #32]
   23250:	movweq	r1, #6
   23254:	ldr	r2, [r4, #44]	; 0x2c
   23258:	ldr	r3, [r4, #52]	; 0x34
   2325c:	str	r2, [r4, #48]	; 0x30
   23260:	str	r3, [r4, #56]	; 0x38
   23264:	str	r1, [r4, #60]	; 0x3c
   23268:	ldrb	r1, [r4, #75]	; 0x4b
   2326c:	cmp	r1, #0
   23270:	bne	2327c <__assert_fail@plt+0x11b1c>
   23274:	ldr	r1, [r4]
   23278:	str	r1, [r4, #4]
   2327c:	mov	r5, r9
   23280:	cmp	r5, #0
   23284:	beq	233b0 <__assert_fail@plt+0x11c50>
   23288:	ldr	r1, [r4, #32]
   2328c:	cmp	r5, r1
   23290:	bge	23444 <__assert_fail@plt+0x11ce4>
   23294:	ldrb	r0, [r4, #76]	; 0x4c
   23298:	cmp	r0, #0
   2329c:	bne	235f8 <__assert_fail@plt+0x11e98>
   232a0:	cmp	r5, #0
   232a4:	ble	232e0 <__assert_fail@plt+0x11b80>
   232a8:	ldr	r1, [r4, #48]	; 0x30
   232ac:	sub	r0, r5, #1
   232b0:	cmp	r1, r0
   232b4:	beq	236c0 <__assert_fail@plt+0x11f60>
   232b8:	ldr	r1, [r4, #80]	; 0x50
   232bc:	cmp	r1, #2
   232c0:	blt	232f8 <__assert_fail@plt+0x11b98>
   232c4:	ldr	r1, [r4, #8]
   232c8:	ldr	r6, [r1, r0, lsl #2]
   232cc:	cmn	r6, #1
   232d0:	bne	23328 <__assert_fail@plt+0x11bc8>
   232d4:	sub	r0, r0, #1
   232d8:	cmn	r0, #1
   232dc:	bne	232c8 <__assert_fail@plt+0x11b68>
   232e0:	ldr	r1, [r4, #60]	; 0x3c
   232e4:	str	r1, [r4, #60]	; 0x3c
   232e8:	ldr	r0, [r4, #80]	; 0x50
   232ec:	cmp	r0, #2
   232f0:	bge	23360 <__assert_fail@plt+0x11c00>
   232f4:	b	23378 <__assert_fail@plt+0x11c18>
   232f8:	ldr	r1, [r4, #4]
   232fc:	ldr	r2, [r4, #68]	; 0x44
   23300:	ldrb	r0, [r1, r0]
   23304:	ubfx	r1, r0, #5, #3
   23308:	and	r3, r0, #31
   2330c:	ldr	r2, [r2, r1, lsl #2]
   23310:	mov	r1, #1
   23314:	tst	r2, r1, lsl r3
   23318:	moveq	r1, #0
   2331c:	cmpeq	r0, #10
   23320:	bne	23350 <__assert_fail@plt+0x11bf0>
   23324:	b	23340 <__assert_fail@plt+0x11be0>
   23328:	ldrb	r0, [r4, #78]	; 0x4e
   2332c:	cmp	r0, #0
   23330:	bne	2388c <__assert_fail@plt+0x1212c>
   23334:	mov	r1, #0
   23338:	cmp	r6, #10
   2333c:	bne	23350 <__assert_fail@plt+0x11bf0>
   23340:	ldrb	r0, [r4, #77]	; 0x4d
   23344:	cmp	r0, #0
   23348:	movwne	r0, #1
   2334c:	lsl	r1, r0, #1
   23350:	str	r1, [r4, #60]	; 0x3c
   23354:	ldr	r0, [r4, #80]	; 0x50
   23358:	cmp	r0, #2
   2335c:	blt	23378 <__assert_fail@plt+0x11c18>
   23360:	ldr	r2, [r4, #28]
   23364:	ldr	r0, [r4, #8]
   23368:	sub	r2, r2, r5
   2336c:	add	r1, r0, r5, lsl #2
   23370:	lsl	r2, r2, #2
   23374:	bl	11454 <memmove@plt>
   23378:	ldrb	r0, [r4, #75]	; 0x4b
   2337c:	cmp	r0, #0
   23380:	bne	236a8 <__assert_fail@plt+0x11f48>
   23384:	ldr	r0, [r4, #28]
   23388:	ldr	r1, [r4, #32]
   2338c:	sub	r0, r0, r5
   23390:	sub	r1, r1, r5
   23394:	str	r0, [r4, #28]
   23398:	str	r1, [r4, #32]
   2339c:	ldrb	r0, [r4, #75]	; 0x4b
   233a0:	cmp	r0, #0
   233a4:	ldreq	r0, [r4, #4]
   233a8:	addeq	r0, r0, r5
   233ac:	streq	r0, [r4, #4]
   233b0:	str	r9, [r4, #24]
   233b4:	ldr	r0, [r4, #48]	; 0x30
   233b8:	ldr	r3, [r4, #80]	; 0x50
   233bc:	ldr	r1, [r4, #56]	; 0x38
   233c0:	sub	r2, r0, r5
   233c4:	cmp	r3, #2
   233c8:	sub	r0, r1, r5
   233cc:	str	r2, [r4, #48]	; 0x30
   233d0:	str	r0, [r4, #56]	; 0x38
   233d4:	blt	233fc <__assert_fail@plt+0x11c9c>
   233d8:	ldrb	r0, [r4, #72]	; 0x48
   233dc:	cmp	r0, #0
   233e0:	beq	2341c <__assert_fail@plt+0x11cbc>
   233e4:	mov	r0, r4
   233e8:	bl	1c110 <__assert_fail@plt+0xa9b0>
   233ec:	cmp	r0, #0
   233f0:	beq	23424 <__assert_fail@plt+0x11cc4>
   233f4:	sub	sp, fp, #28
   233f8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   233fc:	ldrb	r0, [r4, #75]	; 0x4b
   23400:	cmp	r0, #0
   23404:	bne	236dc <__assert_fail@plt+0x11f7c>
   23408:	str	r2, [r4, #28]
   2340c:	mov	r0, #0
   23410:	str	r0, [r4, #40]	; 0x28
   23414:	sub	sp, fp, #28
   23418:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2341c:	mov	r0, r4
   23420:	bl	1ca30 <__assert_fail@plt+0xb2d0>
   23424:	mov	r0, #0
   23428:	str	r0, [r4, #40]	; 0x28
   2342c:	sub	sp, fp, #28
   23430:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   23434:	sub	r5, r9, r0
   23438:	cmp	r5, #0
   2343c:	bne	23288 <__assert_fail@plt+0x11b28>
   23440:	b	233b0 <__assert_fail@plt+0x11c50>
   23444:	ldrb	r2, [r4, #76]	; 0x4c
   23448:	ldr	lr, [r4, #28]
   2344c:	cmp	r2, #0
   23450:	bne	23a2c <__assert_fail@plt+0x122cc>
   23454:	mov	r2, #0
   23458:	str	r2, [r4, #28]
   2345c:	ldr	r3, [r4, #80]	; 0x50
   23460:	cmp	r3, #2
   23464:	blt	2374c <__assert_fail@plt+0x11fec>
   23468:	ldrb	r2, [r4, #73]	; 0x49
   2346c:	cmp	r2, #0
   23470:	beq	2352c <__assert_fail@plt+0x11dcc>
   23474:	ldr	r7, [r4]
   23478:	sub	r3, r5, r3
   2347c:	add	ip, r7, r0
   23480:	add	r3, ip, r3
   23484:	add	r8, ip, r5
   23488:	cmp	r3, r7
   2348c:	movcc	r3, r7
   23490:	mov	r7, r8
   23494:	sub	r7, r7, #1
   23498:	cmp	r7, r3
   2349c:	bcc	2352c <__assert_fail@plt+0x11dcc>
   234a0:	ldrb	r2, [r7]
   234a4:	and	r2, r2, #192	; 0xc0
   234a8:	cmp	r2, #128	; 0x80
   234ac:	beq	23494 <__assert_fail@plt+0x11d34>
   234b0:	ldr	r0, [r4, #48]	; 0x30
   234b4:	mov	sl, lr
   234b8:	mov	r1, r7
   234bc:	add	r0, ip, r0
   234c0:	sub	r2, r0, r7
   234c4:	ldr	r0, [r4, #64]	; 0x40
   234c8:	cmp	r0, #0
   234cc:	bne	23bf8 <__assert_fail@plt+0x12498>
   234d0:	mov	r0, #0
   234d4:	add	r3, sp, #24
   234d8:	str	r0, [sp, #28]
   234dc:	str	r0, [sp, #24]
   234e0:	add	r0, sp, #20
   234e4:	bl	2e470 <__assert_fail@plt+0x1cd10>
   234e8:	sub	r1, r8, r7
   234ec:	mvn	r7, #0
   234f0:	cmp	r0, r1
   234f4:	bcc	23518 <__assert_fail@plt+0x11db8>
   234f8:	cmn	r0, #3
   234fc:	bhi	23518 <__assert_fail@plt+0x11db8>
   23500:	mov	r2, #0
   23504:	sub	r0, r0, r1
   23508:	str	r2, [r4, #16]
   2350c:	str	r2, [r4, #20]
   23510:	str	r0, [r4, #28]
   23514:	ldr	r7, [sp, #20]
   23518:	cmn	r7, #1
   2351c:	bne	235dc <__assert_fail@plt+0x11e7c>
   23520:	ldr	r0, [r4, #24]
   23524:	ldr	r1, [r4, #32]
   23528:	mov	lr, sl
   2352c:	add	r8, r1, r0
   23530:	cmp	r8, r9
   23534:	bge	238ac <__assert_fail@plt+0x1214c>
   23538:	add	sl, r4, #16
   2353c:	str	lr, [sp]
   23540:	ldr	r0, [r4]
   23544:	ldr	r2, [r4, #44]	; 0x2c
   23548:	mov	r3, sl
   2354c:	add	r1, r0, r8
   23550:	ldr	r0, [sl]
   23554:	sub	r7, r2, r8
   23558:	mov	r2, r7
   2355c:	str	r0, [sp, #8]
   23560:	ldr	r0, [sl, #4]
   23564:	str	r0, [sp, #4]
   23568:	add	r0, sp, #24
   2356c:	bl	2e470 <__assert_fail@plt+0x1cd10>
   23570:	sub	r1, r0, #1
   23574:	cmn	r1, #3
   23578:	bcs	23590 <__assert_fail@plt+0x11e30>
   2357c:	ldr	r7, [sp, #24]
   23580:	add	r8, r0, r8
   23584:	cmp	r8, r9
   23588:	blt	23540 <__assert_fail@plt+0x11de0>
   2358c:	b	235c8 <__assert_fail@plt+0x11e68>
   23590:	ldr	r3, [sp, #4]
   23594:	ldr	r2, [sp, #8]
   23598:	cmp	r7, #0
   2359c:	mov	r1, #0
   235a0:	cmpne	r0, #0
   235a4:	beq	235b0 <__assert_fail@plt+0x11e50>
   235a8:	ldr	r0, [r4]
   235ac:	ldrb	r1, [r0, r8]
   235b0:	stm	sl, {r2, r3}
   235b4:	mov	r0, #1
   235b8:	mov	r7, r1
   235bc:	add	r8, r0, r8
   235c0:	cmp	r8, r9
   235c4:	blt	23540 <__assert_fail@plt+0x11de0>
   235c8:	ldr	lr, [sp]
   235cc:	sub	r0, r8, r9
   235d0:	cmn	r7, #1
   235d4:	str	r0, [r4, #28]
   235d8:	beq	238b4 <__assert_fail@plt+0x12154>
   235dc:	ldrb	r0, [r4, #78]	; 0x4e
   235e0:	cmp	r0, #0
   235e4:	bne	23bc8 <__assert_fail@plt+0x12468>
   235e8:	mov	r1, #0
   235ec:	cmp	r7, #10
   235f0:	beq	23a00 <__assert_fail@plt+0x122a0>
   235f4:	b	23a10 <__assert_fail@plt+0x122b0>
   235f8:	ldr	ip, [r4, #12]
   235fc:	ldr	r0, [r4, #28]
   23600:	mov	r2, #0
   23604:	b	23614 <__assert_fail@plt+0x11eb4>
   23608:	cmp	r2, r3
   2360c:	mov	r0, r3
   23610:	bge	23640 <__assert_fail@plt+0x11ee0>
   23614:	add	r1, r2, r0
   23618:	add	r1, r1, r1, lsr #31
   2361c:	asr	r1, r1, #1
   23620:	ldr	r7, [ip, r1, lsl #2]
   23624:	mov	r3, r1
   23628:	cmp	r7, r5
   2362c:	bgt	23608 <__assert_fail@plt+0x11ea8>
   23630:	bge	23640 <__assert_fail@plt+0x11ee0>
   23634:	add	r2, r1, #1
   23638:	mov	r3, r0
   2363c:	b	23608 <__assert_fail@plt+0x11ea8>
   23640:	cmp	r7, r5
   23644:	mov	r0, #0
   23648:	movwlt	r0, #1
   2364c:	add	r7, r1, r0
   23650:	cmp	r7, #0
   23654:	ble	23690 <__assert_fail@plt+0x11f30>
   23658:	ldr	r1, [r4, #48]	; 0x30
   2365c:	sub	r0, r7, #1
   23660:	cmp	r1, r0
   23664:	beq	23a54 <__assert_fail@plt+0x122f4>
   23668:	ldr	r1, [r4, #80]	; 0x50
   2366c:	cmp	r1, #2
   23670:	blt	23798 <__assert_fail@plt+0x12038>
   23674:	ldr	r1, [r4, #8]
   23678:	ldr	r6, [r1, r0, lsl #2]
   2367c:	cmn	r6, #1
   23680:	bne	237c8 <__assert_fail@plt+0x12068>
   23684:	sub	r0, r0, #1
   23688:	cmn	r0, #1
   2368c:	bne	23678 <__assert_fail@plt+0x11f18>
   23690:	ldr	r1, [r4, #60]	; 0x3c
   23694:	str	r1, [r4, #60]	; 0x3c
   23698:	cmp	r7, r5
   2369c:	ldr	r2, [r4, #28]
   236a0:	beq	23800 <__assert_fail@plt+0x120a0>
   236a4:	b	23a6c <__assert_fail@plt+0x1230c>
   236a8:	ldr	r2, [r4, #28]
   236ac:	ldr	r0, [r4, #4]
   236b0:	add	r1, r0, r5
   236b4:	sub	r2, r2, r5
   236b8:	bl	11454 <memmove@plt>
   236bc:	b	23384 <__assert_fail@plt+0x11c24>
   236c0:	and	r0, r6, #2
   236c4:	eor	r1, r0, #10
   236c8:	str	r1, [r4, #60]	; 0x3c
   236cc:	ldr	r0, [r4, #80]	; 0x50
   236d0:	cmp	r0, #2
   236d4:	bge	23360 <__assert_fail@plt+0x11c00>
   236d8:	b	23378 <__assert_fail@plt+0x11c18>
   236dc:	ldrb	r0, [r4, #72]	; 0x48
   236e0:	cmp	r0, #0
   236e4:	beq	238fc <__assert_fail@plt+0x1219c>
   236e8:	ldr	r6, [r4, #36]	; 0x24
   236ec:	ldr	r5, [r4, #28]
   236f0:	cmp	r6, r2
   236f4:	movgt	r6, r2
   236f8:	cmp	r5, r6
   236fc:	bge	23988 <__assert_fail@plt+0x12228>
   23700:	bl	115e0 <__ctype_toupper_loc@plt>
   23704:	ldr	r1, [r4]
   23708:	ldr	r2, [r4, #64]	; 0x40
   2370c:	add	r1, r1, r9
   23710:	cmp	r2, #0
   23714:	ldrb	r1, [r1, r5]
   23718:	bne	23744 <__assert_fail@plt+0x11fe4>
   2371c:	ldr	r2, [r0]
   23720:	ldr	r1, [r2, r1, lsl #2]
   23724:	ldr	r2, [r4, #4]
   23728:	strb	r1, [r2, r5]
   2372c:	add	r1, r5, #1
   23730:	cmp	r1, r6
   23734:	bge	23984 <__assert_fail@plt+0x12224>
   23738:	ldr	r9, [r4, #24]
   2373c:	mov	r5, r1
   23740:	b	23704 <__assert_fail@plt+0x11fa4>
   23744:	ldrb	r1, [r2, r1]
   23748:	b	2371c <__assert_fail@plt+0x11fbc>
   2374c:	ldr	r3, [r4]
   23750:	add	r0, r5, r0
   23754:	ldr	r1, [r4, #64]	; 0x40
   23758:	add	r0, r0, r3
   2375c:	cmp	r1, #0
   23760:	ldrb	r0, [r0, #-1]
   23764:	str	r2, [r4, #32]
   23768:	ldrbne	r0, [r1, r0]
   2376c:	ldr	r1, [r4, #68]	; 0x44
   23770:	ubfx	r2, r0, #5, #3
   23774:	and	r3, r0, #31
   23778:	ldr	r2, [r1, r2, lsl #2]
   2377c:	mov	r1, #1
   23780:	tst	r2, r1, lsl r3
   23784:	moveq	r1, #0
   23788:	cmpeq	r0, #10
   2378c:	beq	239d4 <__assert_fail@plt+0x12274>
   23790:	str	r1, [r4, #60]	; 0x3c
   23794:	b	2339c <__assert_fail@plt+0x11c3c>
   23798:	ldr	r1, [r4, #4]
   2379c:	ldr	r2, [r4, #68]	; 0x44
   237a0:	ldrb	r0, [r1, r0]
   237a4:	ubfx	r1, r0, #5, #3
   237a8:	and	r3, r0, #31
   237ac:	ldr	r2, [r2, r1, lsl #2]
   237b0:	mov	r1, #1
   237b4:	tst	r2, r1, lsl r3
   237b8:	moveq	r1, #0
   237bc:	cmpeq	r0, #10
   237c0:	bne	237f0 <__assert_fail@plt+0x12090>
   237c4:	b	237e0 <__assert_fail@plt+0x12080>
   237c8:	ldrb	r0, [r4, #78]	; 0x4e
   237cc:	cmp	r0, #0
   237d0:	bne	23ba8 <__assert_fail@plt+0x12448>
   237d4:	mov	r1, #0
   237d8:	cmp	r6, #10
   237dc:	bne	237f0 <__assert_fail@plt+0x12090>
   237e0:	ldrb	r0, [r4, #77]	; 0x4d
   237e4:	cmp	r0, #0
   237e8:	movwne	r0, #1
   237ec:	lsl	r1, r0, #1
   237f0:	str	r1, [r4, #60]	; 0x3c
   237f4:	cmp	r7, r5
   237f8:	ldr	r2, [r4, #28]
   237fc:	bne	23a6c <__assert_fail@plt+0x1230c>
   23800:	cmp	r2, r5
   23804:	ble	23a6c <__assert_fail@plt+0x1230c>
   23808:	ldr	r0, [r4, #12]
   2380c:	ldr	r0, [r0, r5, lsl #2]
   23810:	cmp	r0, r5
   23814:	bne	23a6c <__assert_fail@plt+0x1230c>
   23818:	ldr	r0, [r4, #8]
   2381c:	sub	r2, r2, r5
   23820:	lsl	r2, r2, #2
   23824:	add	r1, r0, r5, lsl #2
   23828:	bl	11454 <memmove@plt>
   2382c:	ldr	r2, [r4, #28]
   23830:	ldr	r0, [r4, #4]
   23834:	add	r1, r0, r5
   23838:	sub	r2, r2, r5
   2383c:	bl	11454 <memmove@plt>
   23840:	ldr	r0, [r4, #28]
   23844:	ldr	r1, [r4, #32]
   23848:	sub	r0, r0, r5
   2384c:	sub	r1, r1, r5
   23850:	cmp	r0, #1
   23854:	str	r0, [r4, #28]
   23858:	str	r1, [r4, #32]
   2385c:	blt	2339c <__assert_fail@plt+0x11c3c>
   23860:	ldr	r0, [r4, #12]
   23864:	mov	r2, #0
   23868:	add	r1, r0, r5, lsl #2
   2386c:	ldr	r3, [r1, r2, lsl #2]
   23870:	sub	r3, r3, r5
   23874:	str	r3, [r0, r2, lsl #2]
   23878:	add	r2, r2, #1
   2387c:	ldr	r3, [r4, #28]
   23880:	cmp	r2, r3
   23884:	blt	2386c <__assert_fail@plt+0x1210c>
   23888:	b	2339c <__assert_fail@plt+0x11c3c>
   2388c:	mov	r0, r6
   23890:	bl	1164c <iswalnum@plt>
   23894:	mov	r1, #1
   23898:	cmp	r6, #95	; 0x5f
   2389c:	beq	23350 <__assert_fail@plt+0x11bf0>
   238a0:	cmp	r0, #0
   238a4:	beq	23334 <__assert_fail@plt+0x11bd4>
   238a8:	b	23350 <__assert_fail@plt+0x11bf0>
   238ac:	sub	r0, r8, r9
   238b0:	str	r0, [r4, #28]
   238b4:	cmp	lr, #0
   238b8:	ble	238f4 <__assert_fail@plt+0x12194>
   238bc:	ldr	r1, [r4, #48]	; 0x30
   238c0:	sub	r0, lr, #1
   238c4:	cmp	r1, r0
   238c8:	beq	23b9c <__assert_fail@plt+0x1243c>
   238cc:	ldr	r1, [r4, #80]	; 0x50
   238d0:	cmp	r1, #2
   238d4:	blt	239a0 <__assert_fail@plt+0x12240>
   238d8:	ldr	r1, [r4, #8]
   238dc:	ldr	r6, [r1, r0, lsl #2]
   238e0:	cmn	r6, #1
   238e4:	bne	239e8 <__assert_fail@plt+0x12288>
   238e8:	sub	r0, r0, #1
   238ec:	cmn	r0, #1
   238f0:	bne	238dc <__assert_fail@plt+0x1217c>
   238f4:	ldr	r1, [r4, #60]	; 0x3c
   238f8:	b	23a10 <__assert_fail@plt+0x122b0>
   238fc:	ldr	r3, [r4, #64]	; 0x40
   23900:	cmp	r3, #0
   23904:	beq	23424 <__assert_fail@plt+0x11cc4>
   23908:	ldr	r1, [r4, #36]	; 0x24
   2390c:	ldr	r0, [r4, #28]
   23910:	cmp	r1, r2
   23914:	movgt	r1, r2
   23918:	cmp	r0, r1
   2391c:	bge	2396c <__assert_fail@plt+0x1220c>
   23920:	ldr	r7, [r4]
   23924:	add	r2, r0, r9
   23928:	ldr	r6, [r4, #4]
   2392c:	ldrb	r2, [r7, r2]
   23930:	ldrb	r2, [r3, r2]
   23934:	strb	r2, [r6, r0]
   23938:	add	r0, r0, #1
   2393c:	cmp	r0, r1
   23940:	bge	2396c <__assert_fail@plt+0x1220c>
   23944:	ldr	r7, [r4, #24]
   23948:	ldm	r4, {r2, r3}
   2394c:	ldr	r6, [r4, #64]	; 0x40
   23950:	add	r2, r2, r7
   23954:	ldrb	r2, [r2, r0]
   23958:	ldrb	r2, [r6, r2]
   2395c:	strb	r2, [r3, r0]
   23960:	add	r0, r0, #1
   23964:	cmp	r0, r1
   23968:	blt	23944 <__assert_fail@plt+0x121e4>
   2396c:	str	r0, [r4, #28]
   23970:	str	r0, [r4, #32]
   23974:	mov	r0, #0
   23978:	str	r0, [r4, #40]	; 0x28
   2397c:	sub	sp, fp, #28
   23980:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   23984:	add	r5, r5, #1
   23988:	str	r5, [r4, #28]
   2398c:	str	r5, [r4, #32]
   23990:	mov	r0, #0
   23994:	str	r0, [r4, #40]	; 0x28
   23998:	sub	sp, fp, #28
   2399c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   239a0:	ldr	r1, [r4, #4]
   239a4:	ldr	r2, [r4, #68]	; 0x44
   239a8:	ldrb	r0, [r1, r0]
   239ac:	ubfx	r1, r0, #5, #3
   239b0:	and	r3, r0, #31
   239b4:	ldr	r2, [r2, r1, lsl #2]
   239b8:	mov	r1, #1
   239bc:	tst	r2, r1, lsl r3
   239c0:	bne	23a10 <__assert_fail@plt+0x122b0>
   239c4:	mov	r1, #0
   239c8:	cmp	r0, #10
   239cc:	beq	23a00 <__assert_fail@plt+0x122a0>
   239d0:	b	23a10 <__assert_fail@plt+0x122b0>
   239d4:	ldrb	r0, [r4, #77]	; 0x4d
   239d8:	cmp	r0, #0
   239dc:	movwne	r0, #1
   239e0:	lsl	r1, r0, #1
   239e4:	b	23790 <__assert_fail@plt+0x12030>
   239e8:	ldrb	r0, [r4, #78]	; 0x4e
   239ec:	cmp	r0, #0
   239f0:	bne	23c34 <__assert_fail@plt+0x124d4>
   239f4:	mov	r1, #0
   239f8:	cmp	r6, #10
   239fc:	bne	23a10 <__assert_fail@plt+0x122b0>
   23a00:	ldrb	r0, [r4, #77]	; 0x4d
   23a04:	cmp	r0, #0
   23a08:	movwne	r0, #1
   23a0c:	lsl	r1, r0, #1
   23a10:	str	r1, [r4, #60]	; 0x3c
   23a14:	mov	r0, #0
   23a18:	ldr	r2, [r4, #28]
   23a1c:	cmp	r2, #0
   23a20:	bne	23b54 <__assert_fail@plt+0x123f4>
   23a24:	str	r0, [r4, #32]
   23a28:	b	2339c <__assert_fail@plt+0x11c3c>
   23a2c:	mov	r2, #0
   23a30:	strb	r2, [r4, #76]	; 0x4c
   23a34:	sub	r2, r5, r9
   23a38:	ldr	r3, [r4, #44]	; 0x2c
   23a3c:	ldr	r7, [r4, #52]	; 0x34
   23a40:	add	r3, r2, r3
   23a44:	add	r2, r2, r7
   23a48:	str	r3, [r4, #48]	; 0x30
   23a4c:	str	r2, [r4, #56]	; 0x38
   23a50:	b	23454 <__assert_fail@plt+0x11cf4>
   23a54:	and	r0, r6, #2
   23a58:	eor	r1, r0, #10
   23a5c:	str	r1, [r4, #60]	; 0x3c
   23a60:	cmp	r7, r5
   23a64:	ldr	r2, [r4, #28]
   23a68:	beq	23800 <__assert_fail@plt+0x120a0>
   23a6c:	mov	r0, #0
   23a70:	strb	r0, [r4, #76]	; 0x4c
   23a74:	sub	r0, r5, r9
   23a78:	ldr	r1, [r4, #44]	; 0x2c
   23a7c:	ldr	r3, [r4, #52]	; 0x34
   23a80:	add	r1, r0, r1
   23a84:	add	r0, r0, r3
   23a88:	str	r1, [r4, #48]	; 0x30
   23a8c:	sub	r1, r7, #1
   23a90:	str	r0, [r4, #56]	; 0x38
   23a94:	add	r0, r1, #1
   23a98:	cmp	r0, #1
   23a9c:	blt	23ab4 <__assert_fail@plt+0x12354>
   23aa0:	ldr	r3, [r4, #12]
   23aa4:	ldr	r3, [r3, r1, lsl #2]
   23aa8:	sub	r1, r1, #1
   23aac:	cmp	r3, r5
   23ab0:	beq	23a94 <__assert_fail@plt+0x12334>
   23ab4:	cmp	r0, r2
   23ab8:	bge	23adc <__assert_fail@plt+0x1237c>
   23abc:	ldr	r1, [r4, #8]
   23ac0:	ldr	r3, [r1, r0, lsl #2]
   23ac4:	cmn	r3, #1
   23ac8:	bne	23adc <__assert_fail@plt+0x1237c>
   23acc:	add	r0, r0, #1
   23ad0:	cmp	r2, r0
   23ad4:	bne	23ac0 <__assert_fail@plt+0x12360>
   23ad8:	b	23ae4 <__assert_fail@plt+0x12384>
   23adc:	cmp	r0, r2
   23ae0:	bne	23af4 <__assert_fail@plt+0x12394>
   23ae4:	mov	r0, #0
   23ae8:	str	r0, [r4, #28]
   23aec:	str	r0, [r4, #32]
   23af0:	b	2339c <__assert_fail@plt+0x11c3c>
   23af4:	ldr	r1, [r4, #12]
   23af8:	ldr	r0, [r1, r0, lsl #2]
   23afc:	subs	r2, r0, r5
   23b00:	str	r2, [r4, #28]
   23b04:	beq	23b48 <__assert_fail@plt+0x123e8>
   23b08:	cmp	r2, #1
   23b0c:	blt	23b30 <__assert_fail@plt+0x123d0>
   23b10:	ldr	r0, [r4, #8]
   23b14:	mov	r1, #0
   23b18:	mvn	r3, #0
   23b1c:	str	r3, [r0, r1, lsl #2]
   23b20:	add	r1, r1, #1
   23b24:	ldr	r2, [r4, #28]
   23b28:	cmp	r1, r2
   23b2c:	blt	23b1c <__assert_fail@plt+0x123bc>
   23b30:	ldr	r0, [r4, #4]
   23b34:	mov	r1, #255	; 0xff
   23b38:	bl	11670 <memset@plt>
   23b3c:	ldr	r0, [r4, #28]
   23b40:	str	r0, [r4, #32]
   23b44:	b	2339c <__assert_fail@plt+0x11c3c>
   23b48:	mov	r0, #0
   23b4c:	str	r0, [r4, #32]
   23b50:	b	2339c <__assert_fail@plt+0x11c3c>
   23b54:	cmp	r2, #1
   23b58:	blt	23b7c <__assert_fail@plt+0x1241c>
   23b5c:	ldr	r0, [r4, #8]
   23b60:	mov	r1, #0
   23b64:	mvn	r3, #0
   23b68:	str	r3, [r0, r1, lsl #2]
   23b6c:	add	r1, r1, #1
   23b70:	ldr	r2, [r4, #28]
   23b74:	cmp	r1, r2
   23b78:	blt	23b68 <__assert_fail@plt+0x12408>
   23b7c:	ldrb	r0, [r4, #75]	; 0x4b
   23b80:	cmp	r0, #0
   23b84:	beq	23bec <__assert_fail@plt+0x1248c>
   23b88:	ldr	r0, [r4, #4]
   23b8c:	mov	r1, #255	; 0xff
   23b90:	bl	11670 <memset@plt>
   23b94:	ldr	r0, [r4, #28]
   23b98:	b	23a24 <__assert_fail@plt+0x122c4>
   23b9c:	and	r0, r6, #2
   23ba0:	eor	r1, r0, #10
   23ba4:	b	23a10 <__assert_fail@plt+0x122b0>
   23ba8:	mov	r0, r6
   23bac:	bl	1164c <iswalnum@plt>
   23bb0:	mov	r1, #1
   23bb4:	cmp	r6, #95	; 0x5f
   23bb8:	beq	237f0 <__assert_fail@plt+0x12090>
   23bbc:	cmp	r0, #0
   23bc0:	beq	237d4 <__assert_fail@plt+0x12074>
   23bc4:	b	237f0 <__assert_fail@plt+0x12090>
   23bc8:	mov	r0, r7
   23bcc:	bl	1164c <iswalnum@plt>
   23bd0:	mov	r1, #1
   23bd4:	cmp	r7, #95	; 0x5f
   23bd8:	beq	23a10 <__assert_fail@plt+0x122b0>
   23bdc:	cmp	r0, #0
   23be0:	mov	r2, r7
   23be4:	beq	235e8 <__assert_fail@plt+0x11e88>
   23be8:	b	23a10 <__assert_fail@plt+0x122b0>
   23bec:	mov	r0, r2
   23bf0:	str	r2, [r4, #32]
   23bf4:	b	2339c <__assert_fail@plt+0x11c3c>
   23bf8:	cmp	r2, #1
   23bfc:	blt	23c54 <__assert_fail@plt+0x124f4>
   23c00:	cmp	r2, #6
   23c04:	mov	r1, r2
   23c08:	movge	r1, #6
   23c0c:	sub	ip, r1, #1
   23c10:	add	r1, sp, #14
   23c14:	ldrb	r3, [r7, ip]
   23c18:	cmp	ip, #0
   23c1c:	ldrb	r3, [r0, r3]
   23c20:	strb	r3, [r1, ip]
   23c24:	sub	r3, ip, #1
   23c28:	mov	ip, r3
   23c2c:	bgt	23c14 <__assert_fail@plt+0x124b4>
   23c30:	b	234d0 <__assert_fail@plt+0x11d70>
   23c34:	mov	r0, r6
   23c38:	bl	1164c <iswalnum@plt>
   23c3c:	mov	r1, #1
   23c40:	cmp	r6, #95	; 0x5f
   23c44:	beq	23a10 <__assert_fail@plt+0x122b0>
   23c48:	cmp	r0, #0
   23c4c:	beq	239f4 <__assert_fail@plt+0x12294>
   23c50:	b	23a10 <__assert_fail@plt+0x122b0>
   23c54:	add	r1, sp, #14
   23c58:	b	234d0 <__assert_fail@plt+0x11d70>
   23c5c:	push	{r4, r5, r6, sl, fp, lr}
   23c60:	add	fp, sp, #16
   23c64:	mov	r3, r2
   23c68:	ldr	r2, [r0, #88]	; 0x58
   23c6c:	mov	r5, r1
   23c70:	mov	r4, r0
   23c74:	mov	r1, r3
   23c78:	bl	23eb4 <__assert_fail@plt+0x12754>
   23c7c:	ldr	r1, [r5, #8]
   23c80:	cmp	r1, #1
   23c84:	blt	23dfc <__assert_fail@plt+0x1269c>
   23c88:	ldr	r3, [r5, #12]
   23c8c:	ldr	r5, [r4, #84]	; 0x54
   23c90:	movw	lr, #65280	; 0xff00
   23c94:	and	ip, r0, #8
   23c98:	and	r2, r0, #2
   23c9c:	tst	r0, #1
   23ca0:	movt	lr, #3
   23ca4:	ldr	r5, [r5]
   23ca8:	bne	23d04 <__assert_fail@plt+0x125a4>
   23cac:	cmp	r2, #0
   23cb0:	bne	23d5c <__assert_fail@plt+0x125fc>
   23cb4:	mov	r2, #0
   23cb8:	b	23cc8 <__assert_fail@plt+0x12568>
   23cbc:	add	r2, r2, #1
   23cc0:	cmp	r2, r1
   23cc4:	bge	23dfc <__assert_fail@plt+0x1269c>
   23cc8:	ldr	r0, [r3, r2, lsl #2]
   23ccc:	add	r4, r5, r0, lsl #3
   23cd0:	ldr	r4, [r4, #4]
   23cd4:	uxtb	r6, r4
   23cd8:	cmp	r6, #2
   23cdc:	bne	23cbc <__assert_fail@plt+0x1255c>
   23ce0:	tst	r4, lr
   23ce4:	beq	23e00 <__assert_fail@plt+0x126a0>
   23ce8:	tst	r4, #9216	; 0x2400
   23cec:	bne	23cbc <__assert_fail@plt+0x1255c>
   23cf0:	cmp	ip, #0
   23cf4:	bne	23e00 <__assert_fail@plt+0x126a0>
   23cf8:	ands	r4, r4, #32768	; 0x8000
   23cfc:	bne	23cbc <__assert_fail@plt+0x1255c>
   23d00:	b	23e00 <__assert_fail@plt+0x126a0>
   23d04:	cmp	r2, #0
   23d08:	bne	23dac <__assert_fail@plt+0x1264c>
   23d0c:	mov	r2, #0
   23d10:	b	23d20 <__assert_fail@plt+0x125c0>
   23d14:	add	r2, r2, #1
   23d18:	cmp	r2, r1
   23d1c:	bge	23dfc <__assert_fail@plt+0x1269c>
   23d20:	ldr	r0, [r3, r2, lsl #2]
   23d24:	add	r4, r5, r0, lsl #3
   23d28:	ldr	r4, [r4, #4]
   23d2c:	uxtb	r6, r4
   23d30:	cmp	r6, #2
   23d34:	bne	23d14 <__assert_fail@plt+0x125b4>
   23d38:	tst	r4, lr
   23d3c:	beq	23e00 <__assert_fail@plt+0x126a0>
   23d40:	tst	r4, #10240	; 0x2800
   23d44:	bne	23d14 <__assert_fail@plt+0x125b4>
   23d48:	cmp	ip, #0
   23d4c:	bne	23e00 <__assert_fail@plt+0x126a0>
   23d50:	ands	r4, r4, #32768	; 0x8000
   23d54:	bne	23d14 <__assert_fail@plt+0x125b4>
   23d58:	b	23e00 <__assert_fail@plt+0x126a0>
   23d5c:	mov	r2, #0
   23d60:	b	23d70 <__assert_fail@plt+0x12610>
   23d64:	add	r2, r2, #1
   23d68:	cmp	r2, r1
   23d6c:	bge	23dfc <__assert_fail@plt+0x1269c>
   23d70:	ldr	r0, [r3, r2, lsl #2]
   23d74:	add	r4, r5, r0, lsl #3
   23d78:	ldr	r4, [r4, #4]
   23d7c:	uxtb	r6, r4
   23d80:	cmp	r6, #2
   23d84:	bne	23d64 <__assert_fail@plt+0x12604>
   23d88:	tst	r4, lr
   23d8c:	beq	23e00 <__assert_fail@plt+0x126a0>
   23d90:	tst	r4, #1024	; 0x400
   23d94:	bne	23d64 <__assert_fail@plt+0x12604>
   23d98:	cmp	ip, #0
   23d9c:	bne	23e00 <__assert_fail@plt+0x126a0>
   23da0:	ands	r4, r4, #32768	; 0x8000
   23da4:	bne	23d64 <__assert_fail@plt+0x12604>
   23da8:	b	23e00 <__assert_fail@plt+0x126a0>
   23dac:	mov	r2, #0
   23db0:	b	23dc0 <__assert_fail@plt+0x12660>
   23db4:	add	r2, r2, #1
   23db8:	cmp	r2, r1
   23dbc:	bge	23dfc <__assert_fail@plt+0x1269c>
   23dc0:	ldr	r0, [r3, r2, lsl #2]
   23dc4:	add	r4, r5, r0, lsl #3
   23dc8:	ldr	r4, [r4, #4]
   23dcc:	uxtb	r6, r4
   23dd0:	cmp	r6, #2
   23dd4:	bne	23db4 <__assert_fail@plt+0x12654>
   23dd8:	tst	r4, lr
   23ddc:	beq	23e00 <__assert_fail@plt+0x126a0>
   23de0:	tst	r4, #2048	; 0x800
   23de4:	bne	23db4 <__assert_fail@plt+0x12654>
   23de8:	cmp	ip, #0
   23dec:	bne	23e00 <__assert_fail@plt+0x126a0>
   23df0:	ands	r4, r4, #32768	; 0x8000
   23df4:	bne	23db4 <__assert_fail@plt+0x12654>
   23df8:	b	23e00 <__assert_fail@plt+0x126a0>
   23dfc:	mov	r0, #0
   23e00:	pop	{r4, r5, r6, sl, fp, pc}
   23e04:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   23e08:	add	fp, sp, #24
   23e0c:	mov	r8, r0
   23e10:	ldr	r0, [r0, #124]	; 0x7c
   23e14:	cmp	r0, #1
   23e18:	blt	23ea4 <__assert_fail@plt+0x12744>
   23e1c:	mov	r7, #0
   23e20:	b	23e3c <__assert_fail@plt+0x126dc>
   23e24:	mov	r0, r5
   23e28:	bl	144c0 <__assert_fail@plt+0x2d60>
   23e2c:	ldr	r0, [r8, #124]	; 0x7c
   23e30:	add	r7, r7, #1
   23e34:	cmp	r7, r0
   23e38:	bge	23ea4 <__assert_fail@plt+0x12744>
   23e3c:	ldr	r0, [r8, #132]	; 0x84
   23e40:	ldr	r5, [r0, r7, lsl #2]
   23e44:	ldr	r0, [r5, #16]
   23e48:	cmp	r0, #1
   23e4c:	blt	23e7c <__assert_fail@plt+0x1271c>
   23e50:	mov	r4, #0
   23e54:	ldr	r0, [r5, #20]
   23e58:	ldr	r6, [r0, r4, lsl #2]
   23e5c:	ldr	r0, [r6, #16]
   23e60:	bl	144c0 <__assert_fail@plt+0x2d60>
   23e64:	mov	r0, r6
   23e68:	bl	144c0 <__assert_fail@plt+0x2d60>
   23e6c:	ldr	r0, [r5, #16]
   23e70:	add	r4, r4, #1
   23e74:	cmp	r4, r0
   23e78:	blt	23e54 <__assert_fail@plt+0x126f4>
   23e7c:	ldr	r0, [r5, #20]
   23e80:	bl	144c0 <__assert_fail@plt+0x2d60>
   23e84:	ldr	r0, [r5, #8]
   23e88:	cmp	r0, #0
   23e8c:	beq	23e24 <__assert_fail@plt+0x126c4>
   23e90:	ldr	r0, [r0, #8]
   23e94:	bl	144c0 <__assert_fail@plt+0x2d60>
   23e98:	ldr	r0, [r5, #8]
   23e9c:	bl	144c0 <__assert_fail@plt+0x2d60>
   23ea0:	b	23e24 <__assert_fail@plt+0x126c4>
   23ea4:	mov	r0, #0
   23ea8:	str	r0, [r8, #108]	; 0x6c
   23eac:	str	r0, [r8, #124]	; 0x7c
   23eb0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   23eb4:	push	{r4, r5, fp, lr}
   23eb8:	add	fp, sp, #8
   23ebc:	mov	r4, r0
   23ec0:	cmn	r1, #1
   23ec4:	ble	23efc <__assert_fail@plt+0x1279c>
   23ec8:	ldr	r0, [r4, #48]	; 0x30
   23ecc:	cmp	r0, r1
   23ed0:	beq	23f60 <__assert_fail@plt+0x12800>
   23ed4:	ldr	r0, [r4, #80]	; 0x50
   23ed8:	cmp	r0, #2
   23edc:	blt	23f04 <__assert_fail@plt+0x127a4>
   23ee0:	ldr	r0, [r4, #8]
   23ee4:	ldr	r5, [r0, r1, lsl #2]
   23ee8:	cmn	r5, #1
   23eec:	bne	23f34 <__assert_fail@plt+0x127d4>
   23ef0:	sub	r1, r1, #1
   23ef4:	cmn	r1, #1
   23ef8:	bne	23ee4 <__assert_fail@plt+0x12784>
   23efc:	ldr	r0, [r4, #60]	; 0x3c
   23f00:	pop	{r4, r5, fp, pc}
   23f04:	ldr	r0, [r4, #4]
   23f08:	ldr	r2, [r4, #68]	; 0x44
   23f0c:	ldrb	r1, [r0, r1]
   23f10:	ubfx	r0, r1, #5, #3
   23f14:	and	r3, r1, #31
   23f18:	ldr	r2, [r2, r0, lsl #2]
   23f1c:	mov	r0, #1
   23f20:	tst	r2, r0, lsl r3
   23f24:	moveq	r0, #0
   23f28:	cmpeq	r1, #10
   23f2c:	bne	23f5c <__assert_fail@plt+0x127fc>
   23f30:	b	23f4c <__assert_fail@plt+0x127ec>
   23f34:	ldrb	r0, [r4, #78]	; 0x4e
   23f38:	cmp	r0, #0
   23f3c:	bne	23f6c <__assert_fail@plt+0x1280c>
   23f40:	mov	r0, #0
   23f44:	cmp	r5, #10
   23f48:	popne	{r4, r5, fp, pc}
   23f4c:	ldrb	r0, [r4, #77]	; 0x4d
   23f50:	cmp	r0, #0
   23f54:	movwne	r0, #1
   23f58:	lsl	r0, r0, #1
   23f5c:	pop	{r4, r5, fp, pc}
   23f60:	and	r0, r2, #2
   23f64:	eor	r0, r0, #10
   23f68:	pop	{r4, r5, fp, pc}
   23f6c:	mov	r0, r5
   23f70:	bl	1164c <iswalnum@plt>
   23f74:	mov	r1, r0
   23f78:	mov	r0, #1
   23f7c:	cmp	r5, #95	; 0x5f
   23f80:	beq	23f5c <__assert_fail@plt+0x127fc>
   23f84:	cmp	r1, #0
   23f88:	beq	23f40 <__assert_fail@plt+0x127e0>
   23f8c:	b	23f5c <__assert_fail@plt+0x127fc>
   23f90:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   23f94:	add	fp, sp, #28
   23f98:	sub	sp, sp, #4
   23f9c:	mov	sl, r0
   23fa0:	ldr	r0, [r1, #4]
   23fa4:	cmp	r0, #1
   23fa8:	blt	24078 <__assert_fail@plt+0x12918>
   23fac:	ldr	r7, [sl, #84]	; 0x54
   23fb0:	mov	r8, r2
   23fb4:	mov	r5, r1
   23fb8:	mov	r4, #0
   23fbc:	b	23fcc <__assert_fail@plt+0x1286c>
   23fc0:	add	r4, r4, #1
   23fc4:	cmp	r4, r0
   23fc8:	bge	24078 <__assert_fail@plt+0x12918>
   23fcc:	ldr	r1, [r5, #8]
   23fd0:	ldr	r6, [r1, r4, lsl #2]
   23fd4:	ldr	r1, [r7]
   23fd8:	add	r2, r1, r6, lsl #3
   23fdc:	ldrb	r2, [r2, #4]
   23fe0:	cmp	r2, #8
   23fe4:	bne	23fc0 <__assert_fail@plt+0x12860>
   23fe8:	ldr	r1, [r1, r6, lsl #3]
   23fec:	cmp	r1, #31
   23ff0:	bgt	23fc0 <__assert_fail@plt+0x12860>
   23ff4:	ldr	r2, [r7, #80]	; 0x50
   23ff8:	mov	r3, #1
   23ffc:	tst	r2, r3, lsl r1
   24000:	beq	23fc0 <__assert_fail@plt+0x12860>
   24004:	ldr	r0, [sl, #124]	; 0x7c
   24008:	ldr	r9, [sl, #128]	; 0x80
   2400c:	cmp	r0, r9
   24010:	beq	24054 <__assert_fail@plt+0x128f4>
   24014:	mov	r0, #1
   24018:	mov	r1, #24
   2401c:	bl	2e038 <__assert_fail@plt+0x1c8d8>
   24020:	ldr	r1, [sl, #124]	; 0x7c
   24024:	ldr	r2, [sl, #132]	; 0x84
   24028:	str	r0, [r2, r1, lsl #2]
   2402c:	ldr	r0, [sl, #132]	; 0x84
   24030:	ldr	r0, [r0, r1, lsl #2]
   24034:	cmp	r0, #0
   24038:	beq	24084 <__assert_fail@plt+0x12924>
   2403c:	add	r1, r1, #1
   24040:	str	r6, [r0, #4]
   24044:	str	r1, [sl, #124]	; 0x7c
   24048:	str	r8, [r0]
   2404c:	ldr	r0, [r5, #4]
   24050:	b	23fc0 <__assert_fail@plt+0x12860>
   24054:	ldr	r0, [sl, #132]	; 0x84
   24058:	lsl	r1, r9, #3
   2405c:	bl	2e0bc <__assert_fail@plt+0x1c95c>
   24060:	cmp	r0, #0
   24064:	beq	24084 <__assert_fail@plt+0x12924>
   24068:	lsl	r1, r9, #1
   2406c:	str	r1, [sl, #128]	; 0x80
   24070:	str	r0, [sl, #132]	; 0x84
   24074:	b	24014 <__assert_fail@plt+0x128b4>
   24078:	mov	r0, #0
   2407c:	sub	sp, fp, #28
   24080:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   24084:	mov	r0, #12
   24088:	sub	sp, fp, #28
   2408c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   24090:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   24094:	add	fp, sp, #28
   24098:	sub	sp, sp, #76	; 0x4c
   2409c:	mov	ip, r0
   240a0:	ldr	r0, [r1, #4]
   240a4:	cmp	r0, #1
   240a8:	blt	24a18 <__assert_fail@plt+0x132b8>
   240ac:	ldr	r2, [ip, #84]	; 0x54
   240b0:	ldr	r0, [ip, #40]	; 0x28
   240b4:	mov	r3, #0
   240b8:	str	ip, [sp, #44]	; 0x2c
   240bc:	str	r1, [sp, #12]
   240c0:	str	r0, [sp, #52]	; 0x34
   240c4:	str	r2, [sp, #24]
   240c8:	b	240e8 <__assert_fail@plt+0x12988>
   240cc:	ldr	r1, [sp, #12]
   240d0:	ldr	r3, [sp, #16]
   240d4:	ldr	r2, [sp, #24]
   240d8:	ldr	r0, [r1, #4]
   240dc:	add	r3, r3, #1
   240e0:	cmp	r3, r0
   240e4:	bge	24a18 <__assert_fail@plt+0x132b8>
   240e8:	ldr	r0, [r1, #8]
   240ec:	str	r3, [sp, #16]
   240f0:	ldr	r3, [r0, r3, lsl #2]
   240f4:	ldr	r0, [r2]
   240f8:	add	r4, r0, r3, lsl #3
   240fc:	mov	r1, r3
   24100:	str	r3, [sp, #48]	; 0x30
   24104:	ldr	r5, [r4, #4]!
   24108:	uxtb	r0, r5
   2410c:	cmp	r0, #4
   24110:	bne	240cc <__assert_fail@plt+0x1296c>
   24114:	movw	r0, #65280	; 0xff00
   24118:	movt	r0, #3
   2411c:	tst	r5, r0
   24120:	beq	24230 <__assert_fail@plt+0x12ad0>
   24124:	ldr	r1, [sp, #52]	; 0x34
   24128:	cmn	r1, #1
   2412c:	ble	24168 <__assert_fail@plt+0x12a08>
   24130:	ldr	r0, [ip, #48]	; 0x30
   24134:	cmp	r0, r1
   24138:	beq	249bc <__assert_fail@plt+0x1325c>
   2413c:	ldr	r0, [ip, #80]	; 0x50
   24140:	cmp	r0, #2
   24144:	blt	24188 <__assert_fail@plt+0x12a28>
   24148:	ldr	r0, [ip, #8]
   2414c:	ldr	r1, [sp, #52]	; 0x34
   24150:	ldr	r6, [r0, r1, lsl #2]
   24154:	cmn	r6, #1
   24158:	bne	241c4 <__assert_fail@plt+0x12a64>
   2415c:	sub	r1, r1, #1
   24160:	cmn	r1, #1
   24164:	bne	24150 <__assert_fail@plt+0x129f0>
   24168:	ldr	r1, [ip, #60]	; 0x3c
   2416c:	and	r0, r1, #1
   24170:	tst	r5, #1024	; 0x400
   24174:	eor	r2, r0, #1
   24178:	beq	241fc <__assert_fail@plt+0x12a9c>
   2417c:	cmp	r0, #0
   24180:	beq	240cc <__assert_fail@plt+0x1296c>
   24184:	b	241fc <__assert_fail@plt+0x12a9c>
   24188:	ldr	r0, [ip, #4]
   2418c:	ldr	r2, [sp, #52]	; 0x34
   24190:	ldr	r1, [ip, #68]	; 0x44
   24194:	ldrb	r0, [r0, r2]
   24198:	ubfx	r2, r0, #5, #3
   2419c:	and	r7, r0, #31
   241a0:	ldr	r3, [r1, r2, lsl #2]
   241a4:	mov	r1, #1
   241a8:	mov	r2, #0
   241ac:	tst	r3, r1, lsl r7
   241b0:	bne	241fc <__assert_fail@plt+0x12a9c>
   241b4:	mov	r1, #0
   241b8:	cmp	r0, #10
   241bc:	beq	241dc <__assert_fail@plt+0x12a7c>
   241c0:	b	241ec <__assert_fail@plt+0x12a8c>
   241c4:	ldrb	r0, [ip, #78]	; 0x4e
   241c8:	cmp	r0, #0
   241cc:	bne	249dc <__assert_fail@plt+0x1327c>
   241d0:	mov	r1, #0
   241d4:	cmp	r6, #10
   241d8:	bne	241ec <__assert_fail@plt+0x12a8c>
   241dc:	ldrb	r0, [ip, #77]	; 0x4d
   241e0:	cmp	r0, #0
   241e4:	movwne	r0, #1
   241e8:	lsl	r1, r0, #1
   241ec:	and	r0, r1, #1
   241f0:	tst	r5, #1024	; 0x400
   241f4:	eor	r2, r0, #1
   241f8:	bne	2417c <__assert_fail@plt+0x12a1c>
   241fc:	ldr	r0, [r4]
   24200:	cmp	r2, #0
   24204:	bne	24210 <__assert_fail@plt+0x12ab0>
   24208:	ands	r2, r0, #2048	; 0x800
   2420c:	bne	240cc <__assert_fail@plt+0x1296c>
   24210:	tst	r1, #2
   24214:	bne	24220 <__assert_fail@plt+0x12ac0>
   24218:	ands	r2, r0, #8192	; 0x2000
   2421c:	bne	240cc <__assert_fail@plt+0x1296c>
   24220:	tst	r1, #8
   24224:	bne	24230 <__assert_fail@plt+0x12ad0>
   24228:	ands	r0, r0, #32768	; 0x8000
   2422c:	bne	240cc <__assert_fail@plt+0x1296c>
   24230:	ldr	r2, [ip, #108]	; 0x6c
   24234:	ldr	r0, [ip, #84]	; 0x54
   24238:	ldr	r9, [ip, #4]
   2423c:	cmp	r2, #1
   24240:	str	r0, [sp, #36]	; 0x24
   24244:	str	r2, [sp, #20]
   24248:	blt	242dc <__assert_fail@plt+0x12b7c>
   2424c:	ldr	r4, [sp, #52]	; 0x34
   24250:	ldr	r1, [ip, #116]	; 0x74
   24254:	mov	r0, #0
   24258:	mov	r5, #1
   2425c:	mov	lr, r4
   24260:	add	r3, r2, r0
   24264:	add	r3, r3, r3, lsr #31
   24268:	asr	r7, r3, #1
   2426c:	add	r6, r7, r7, lsl #1
   24270:	add	r6, r1, r6, lsl #3
   24274:	ldr	r6, [r6, #4]
   24278:	cmp	r6, lr
   2427c:	addlt	r0, r5, r3, asr #1
   24280:	movge	r2, r7
   24284:	cmp	r0, r2
   24288:	blt	24260 <__assert_fail@plt+0x12b00>
   2428c:	ldr	r1, [sp, #20]
   24290:	cmp	r0, r1
   24294:	bge	242f4 <__assert_fail@plt+0x12b94>
   24298:	cmn	r0, #1
   2429c:	beq	242f4 <__assert_fail@plt+0x12b94>
   242a0:	ldr	r1, [ip, #116]	; 0x74
   242a4:	add	r0, r0, r0, lsl #1
   242a8:	add	r0, r1, r0, lsl #3
   242ac:	ldr	r1, [r0, #4]
   242b0:	cmp	r1, lr
   242b4:	bne	242f4 <__assert_fail@plt+0x12b94>
   242b8:	ldr	r1, [r0]
   242bc:	ldr	r2, [sp, #48]	; 0x30
   242c0:	cmp	r1, r2
   242c4:	beq	246fc <__assert_fail@plt+0x12f9c>
   242c8:	ldrb	r1, [r0, #20]
   242cc:	add	r0, r0, #24
   242d0:	cmp	r1, #0
   242d4:	bne	242b8 <__assert_fail@plt+0x12b58>
   242d8:	b	242f4 <__assert_fail@plt+0x12b94>
   242dc:	ldr	r4, [sp, #52]	; 0x34
   242e0:	mov	r0, #0
   242e4:	mov	lr, r4
   242e8:	ldr	r1, [sp, #20]
   242ec:	cmp	r0, r1
   242f0:	blt	24298 <__assert_fail@plt+0x12b38>
   242f4:	ldr	r0, [ip, #124]	; 0x7c
   242f8:	cmp	r0, #1
   242fc:	ldr	r0, [sp, #20]
   24300:	blt	24700 <__assert_fail@plt+0x12fa0>
   24304:	ldr	r0, [sp, #36]	; 0x24
   24308:	ldr	r1, [sp, #48]	; 0x30
   2430c:	mov	r3, #0
   24310:	ldr	r0, [r0]
   24314:	ldr	r2, [r0, r1, lsl #3]
   24318:	str	r2, [sp, #32]
   2431c:	ldr	r1, [ip, #132]	; 0x84
   24320:	str	r3, [sp, #28]
   24324:	ldr	r6, [r1, r3, lsl #2]
   24328:	ldr	r1, [r6, #4]
   2432c:	ldr	r0, [r0, r1, lsl #3]
   24330:	cmp	r0, r2
   24334:	bne	246d0 <__assert_fail@plt+0x12f70>
   24338:	ldr	r0, [r6, #16]
   2433c:	ldr	r1, [r6]
   24340:	mov	r8, #0
   24344:	mov	r7, lr
   24348:	str	r6, [sp, #40]	; 0x28
   2434c:	cmp	r0, #1
   24350:	blt	24488 <__assert_fail@plt+0x12d28>
   24354:	mov	r5, r1
   24358:	ldr	r1, [r6, #20]
   2435c:	ldr	r4, [r1, r8, lsl #2]
   24360:	ldr	r1, [r4, #4]
   24364:	sub	sl, r1, r5
   24368:	str	r1, [fp, #-48]	; 0xffffffd0
   2436c:	cmp	sl, #1
   24370:	blt	243a4 <__assert_fail@plt+0x12c44>
   24374:	ldr	r1, [ip, #28]
   24378:	add	r3, sl, r7
   2437c:	cmp	r3, r1
   24380:	bgt	243f8 <__assert_fail@plt+0x12c98>
   24384:	add	r0, r9, r7
   24388:	add	r1, r9, r5
   2438c:	mov	r2, sl
   24390:	bl	1161c <bcmp@plt>
   24394:	ldr	ip, [sp, #44]	; 0x2c
   24398:	ldr	lr, [sp, #52]	; 0x34
   2439c:	cmp	r0, #0
   243a0:	bne	24480 <__assert_fail@plt+0x12d20>
   243a4:	ldr	r3, [sp, #48]	; 0x30
   243a8:	mov	r2, r4
   243ac:	mov	r0, ip
   243b0:	mov	r1, r6
   243b4:	str	lr, [sp]
   243b8:	mov	r4, ip
   243bc:	bl	25138 <__assert_fail@plt+0x139d8>
   243c0:	cmp	r0, #1
   243c4:	bhi	24a2c <__assert_fail@plt+0x132cc>
   243c8:	ldr	r1, [fp, #-48]	; 0xffffffd0
   243cc:	ldr	r0, [r6, #16]
   243d0:	ldr	r9, [r4, #4]
   243d4:	mov	ip, r4
   243d8:	ldr	r4, [sp, #52]	; 0x34
   243dc:	add	r8, r8, #1
   243e0:	add	r7, sl, r7
   243e4:	cmp	r8, r0
   243e8:	mov	r5, r1
   243ec:	mov	lr, r4
   243f0:	blt	24358 <__assert_fail@plt+0x12bf8>
   243f4:	b	24488 <__assert_fail@plt+0x12d28>
   243f8:	ldr	r2, [ip, #48]	; 0x30
   243fc:	cmp	r3, r2
   24400:	bgt	246c4 <__assert_fail@plt+0x12f64>
   24404:	ldr	r0, [ip, #36]	; 0x24
   24408:	ldr	r6, [ip, #104]	; 0x68
   2440c:	cmp	r0, r3
   24410:	cmple	r0, r2
   24414:	blt	24424 <__assert_fail@plt+0x12cc4>
   24418:	cmp	r1, r3
   2441c:	cmple	r1, r2
   24420:	bge	24444 <__assert_fail@plt+0x12ce4>
   24424:	add	r1, r3, #1
   24428:	mov	r0, ip
   2442c:	mov	r9, r3
   24430:	bl	24a64 <__assert_fail@plt+0x13304>
   24434:	ldr	ip, [sp, #44]	; 0x2c
   24438:	mov	r3, r9
   2443c:	cmp	r0, #0
   24440:	bne	24a2c <__assert_fail@plt+0x132cc>
   24444:	cmp	r3, r6
   24448:	ble	24474 <__assert_fail@plt+0x12d14>
   2444c:	sub	r0, r3, r6
   24450:	mov	r1, #0
   24454:	lsl	r2, r0, #2
   24458:	ldr	r0, [ip, #100]	; 0x64
   2445c:	add	r0, r0, r6, lsl #2
   24460:	mov	r6, r3
   24464:	add	r0, r0, #4
   24468:	bl	11670 <memset@plt>
   2446c:	ldr	ip, [sp, #44]	; 0x2c
   24470:	str	r6, [ip, #104]	; 0x68
   24474:	ldr	r9, [ip, #4]
   24478:	ldr	r6, [sp, #40]	; 0x28
   2447c:	b	24384 <__assert_fail@plt+0x12c24>
   24480:	ldr	r0, [r6, #16]
   24484:	mov	r1, r5
   24488:	cmp	r8, r0
   2448c:	blt	246d0 <__assert_fail@plt+0x12f70>
   24490:	cmp	r8, #0
   24494:	addne	r1, r1, #1
   24498:	cmp	r1, lr
   2449c:	ble	244b8 <__assert_fail@plt+0x12d58>
   244a0:	b	246d0 <__assert_fail@plt+0x12f70>
   244a4:	ldr	r6, [sp, #40]	; 0x28
   244a8:	add	r1, sl, #1
   244ac:	cmp	sl, lr
   244b0:	mov	r9, r8
   244b4:	bge	246d0 <__assert_fail@plt+0x12f70>
   244b8:	ldr	r0, [r6]
   244bc:	mov	sl, r1
   244c0:	cmp	r1, r0
   244c4:	ble	244f0 <__assert_fail@plt+0x12d90>
   244c8:	ldr	r0, [ip, #28]
   244cc:	cmp	r7, r0
   244d0:	bge	24654 <__assert_fail@plt+0x12ef4>
   244d4:	add	r5, r7, #1
   244d8:	add	r1, sl, r9
   244dc:	ldrb	r0, [r9, r7]
   244e0:	ldrb	r1, [r1, #-1]
   244e4:	cmp	r0, r1
   244e8:	beq	244f4 <__assert_fail@plt+0x12d94>
   244ec:	b	246d0 <__assert_fail@plt+0x12f70>
   244f0:	mov	r5, r7
   244f4:	ldr	r0, [ip, #100]	; 0x64
   244f8:	mov	r8, r9
   244fc:	mov	r7, r5
   24500:	ldr	r2, [r0, sl, lsl #2]
   24504:	cmp	r2, #0
   24508:	beq	244a4 <__assert_fail@plt+0x12d44>
   2450c:	ldr	r0, [r2, #8]
   24510:	cmp	r0, #1
   24514:	blt	244a4 <__assert_fail@plt+0x12d44>
   24518:	ldr	r1, [sp, #36]	; 0x24
   2451c:	ldr	r2, [r2, #12]
   24520:	ldr	r4, [sp, #32]
   24524:	ldr	r1, [r1]
   24528:	b	24538 <__assert_fail@plt+0x12dd8>
   2452c:	add	r2, r2, #4
   24530:	subs	r0, r0, #1
   24534:	beq	244a4 <__assert_fail@plt+0x12d44>
   24538:	ldr	r5, [r2]
   2453c:	add	r3, r1, r5, lsl #3
   24540:	ldrb	r3, [r3, #4]
   24544:	cmp	r3, #9
   24548:	bne	2452c <__assert_fail@plt+0x12dcc>
   2454c:	ldr	r3, [r1, r5, lsl #3]
   24550:	cmp	r3, r4
   24554:	bne	2452c <__assert_fail@plt+0x12dcc>
   24558:	cmn	r5, #1
   2455c:	beq	244a4 <__assert_fail@plt+0x12d44>
   24560:	ldr	r1, [r6, #8]
   24564:	mov	r4, lr
   24568:	str	r7, [fp, #-48]	; 0xffffffd0
   2456c:	cmp	r1, #0
   24570:	bne	245a0 <__assert_fail@plt+0x12e40>
   24574:	ldr	r0, [r6]
   24578:	mov	r9, #12
   2457c:	sub	r0, sl, r0
   24580:	add	r1, r0, #1
   24584:	mov	r0, #12
   24588:	bl	2e038 <__assert_fail@plt+0x1c8d8>
   2458c:	ldr	ip, [sp, #44]	; 0x2c
   24590:	mov	r1, r0
   24594:	cmp	r0, #0
   24598:	str	r0, [r6, #8]
   2459c:	beq	24a1c <__assert_fail@plt+0x132bc>
   245a0:	ldr	r3, [r6]
   245a4:	ldr	r2, [r6, #4]
   245a8:	mov	r0, #9
   245ac:	stm	sp, {r5, sl}
   245b0:	str	r0, [sp, #8]
   245b4:	mov	r0, ip
   245b8:	bl	25310 <__assert_fail@plt+0x13bb0>
   245bc:	ldr	ip, [sp, #44]	; 0x2c
   245c0:	ldr	r7, [fp, #-48]	; 0xffffffd0
   245c4:	cmp	r0, #1
   245c8:	mov	lr, r4
   245cc:	beq	244a4 <__assert_fail@plt+0x12d44>
   245d0:	mov	r9, r0
   245d4:	cmp	r0, #0
   245d8:	bne	24a1c <__assert_fail@plt+0x132bc>
   245dc:	ldr	r7, [sp, #40]	; 0x28
   245e0:	ldr	r1, [r7, #12]
   245e4:	ldr	r0, [r7, #16]
   245e8:	cmp	r0, r1
   245ec:	beq	2469c <__assert_fail@plt+0x12f3c>
   245f0:	mov	r0, #1
   245f4:	mov	r1, #20
   245f8:	bl	2e038 <__assert_fail@plt+0x1c8d8>
   245fc:	cmp	r0, #0
   24600:	beq	24a4c <__assert_fail@plt+0x132ec>
   24604:	mov	r2, r0
   24608:	ldr	r0, [r7, #16]
   2460c:	ldr	r1, [r7, #20]
   24610:	ldr	r3, [sp, #48]	; 0x30
   24614:	str	r2, [r1, r0, lsl #2]
   24618:	stm	r2, {r5, sl}
   2461c:	ldr	r5, [sp, #44]	; 0x2c
   24620:	add	r0, r0, #1
   24624:	mov	r1, r7
   24628:	str	r0, [r7, #16]
   2462c:	str	r4, [sp]
   24630:	mov	r0, r5
   24634:	bl	25138 <__assert_fail@plt+0x139d8>
   24638:	cmp	r0, #1
   2463c:	bhi	24a2c <__assert_fail@plt+0x132cc>
   24640:	ldr	r8, [r5, #4]
   24644:	ldr	r7, [fp, #-48]	; 0xffffffd0
   24648:	mov	ip, r5
   2464c:	mov	lr, r4
   24650:	b	244a4 <__assert_fail@plt+0x12d44>
   24654:	ldr	r0, [ip, #48]	; 0x30
   24658:	cmp	r7, r0
   2465c:	bge	246d0 <__assert_fail@plt+0x12f70>
   24660:	add	r5, r7, #1
   24664:	mov	r0, ip
   24668:	mov	r8, r7
   2466c:	mov	r4, ip
   24670:	mov	r1, r5
   24674:	bl	24a64 <__assert_fail@plt+0x13304>
   24678:	cmp	r0, #0
   2467c:	bne	24a2c <__assert_fail@plt+0x132cc>
   24680:	ldr	r9, [r4, #4]
   24684:	mov	ip, r4
   24688:	ldr	r4, [sp, #52]	; 0x34
   2468c:	ldr	r6, [sp, #40]	; 0x28
   24690:	mov	r7, r8
   24694:	mov	lr, r4
   24698:	b	244d8 <__assert_fail@plt+0x12d78>
   2469c:	mov	r1, #1
   246a0:	orr	r6, r1, r0, lsl #1
   246a4:	ldr	r0, [r7, #20]
   246a8:	lsl	r1, r6, #2
   246ac:	bl	2e0bc <__assert_fail@plt+0x1c95c>
   246b0:	cmp	r0, #0
   246b4:	beq	24a4c <__assert_fail@plt+0x132ec>
   246b8:	str	r6, [r7, #12]
   246bc:	str	r0, [r7, #20]
   246c0:	b	245f0 <__assert_fail@plt+0x12e90>
   246c4:	mov	r1, r5
   246c8:	cmp	r8, r0
   246cc:	bge	24490 <__assert_fail@plt+0x12d30>
   246d0:	ldr	r3, [sp, #28]
   246d4:	ldr	r0, [ip, #124]	; 0x7c
   246d8:	add	r3, r3, #1
   246dc:	cmp	r3, r0
   246e0:	bge	246f4 <__assert_fail@plt+0x12f94>
   246e4:	ldr	r0, [sp, #36]	; 0x24
   246e8:	ldr	r2, [sp, #32]
   246ec:	ldr	r0, [r0]
   246f0:	b	2431c <__assert_fail@plt+0x12bbc>
   246f4:	ldr	r0, [ip, #108]	; 0x6c
   246f8:	b	24700 <__assert_fail@plt+0x12fa0>
   246fc:	ldr	r0, [sp, #20]
   24700:	ldr	r7, [sp, #20]
   24704:	mov	r1, #0
   24708:	str	r1, [fp, #-32]	; 0xffffffe0
   2470c:	cmp	r7, r0
   24710:	blt	24728 <__assert_fail@plt+0x12fc8>
   24714:	b	240cc <__assert_fail@plt+0x1296c>
   24718:	ldr	r0, [ip, #108]	; 0x6c
   2471c:	add	r7, r7, #1
   24720:	cmp	r7, r0
   24724:	bge	240cc <__assert_fail@plt+0x1296c>
   24728:	ldr	r0, [ip, #116]	; 0x74
   2472c:	add	r1, r7, r7, lsl #1
   24730:	ldr	r3, [sp, #48]	; 0x30
   24734:	ldr	r2, [r0, r1, lsl #3]
   24738:	cmp	r2, r3
   2473c:	bne	24718 <__assert_fail@plt+0x12fb8>
   24740:	add	r0, r0, r1, lsl #3
   24744:	ldr	r2, [sp, #52]	; 0x34
   24748:	ldr	r1, [r0, #4]
   2474c:	cmp	r1, r2
   24750:	bne	24718 <__assert_fail@plt+0x12fb8>
   24754:	str	r7, [sp, #20]
   24758:	ldr	r4, [r0, #8]
   2475c:	ldr	r7, [r0, #12]
   24760:	ldr	r0, [sp, #24]
   24764:	ldr	r8, [r0, #24]
   24768:	cmp	r7, r4
   2476c:	bne	24788 <__assert_fail@plt+0x13028>
   24770:	ldr	r1, [sp, #48]	; 0x30
   24774:	ldr	r0, [r0, #20]
   24778:	add	r1, r1, r1, lsl #1
   2477c:	add	r0, r0, r1, lsl #2
   24780:	ldr	r0, [r0, #8]
   24784:	b	24794 <__assert_fail@plt+0x13034>
   24788:	ldr	r0, [r0, #12]
   2478c:	ldr	r1, [sp, #48]	; 0x30
   24790:	add	r0, r0, r1, lsl #2
   24794:	ldr	r9, [r0]
   24798:	ldr	r0, [sp, #52]	; 0x34
   2479c:	add	r0, r7, r0
   247a0:	sub	r5, r0, r4
   247a4:	cmp	r5, #0
   247a8:	ble	247e4 <__assert_fail@plt+0x13084>
   247ac:	ldr	r1, [ip, #48]	; 0x30
   247b0:	sub	r0, r5, #1
   247b4:	cmp	r1, r0
   247b8:	beq	24980 <__assert_fail@plt+0x13220>
   247bc:	ldr	r1, [ip, #80]	; 0x50
   247c0:	cmp	r1, #2
   247c4:	blt	247ec <__assert_fail@plt+0x1308c>
   247c8:	ldr	r1, [ip, #8]
   247cc:	ldr	r6, [r1, r0, lsl #2]
   247d0:	cmn	r6, #1
   247d4:	bne	2481c <__assert_fail@plt+0x130bc>
   247d8:	sub	r0, r0, #1
   247dc:	cmn	r0, #1
   247e0:	bne	247cc <__assert_fail@plt+0x1306c>
   247e4:	ldr	sl, [ip, #60]	; 0x3c
   247e8:	b	24844 <__assert_fail@plt+0x130e4>
   247ec:	ldr	r1, [ip, #4]
   247f0:	ldr	r2, [ip, #68]	; 0x44
   247f4:	mov	sl, #1
   247f8:	ldrb	r0, [r1, r0]
   247fc:	ubfx	r1, r0, #5, #3
   24800:	ldr	r1, [r2, r1, lsl #2]
   24804:	and	r2, r0, #31
   24808:	tst	r1, sl, lsl r2
   2480c:	moveq	sl, #0
   24810:	cmpeq	r0, #10
   24814:	bne	24844 <__assert_fail@plt+0x130e4>
   24818:	b	24834 <__assert_fail@plt+0x130d4>
   2481c:	ldrb	r0, [ip, #78]	; 0x4e
   24820:	cmp	r0, #0
   24824:	bne	24990 <__assert_fail@plt+0x13230>
   24828:	mov	sl, #0
   2482c:	cmp	r6, #10
   24830:	bne	24844 <__assert_fail@plt+0x130e4>
   24834:	ldrb	r0, [ip, #77]	; 0x4d
   24838:	cmp	r0, #0
   2483c:	movwne	r0, #1
   24840:	lsl	sl, r0, #1
   24844:	ldr	r0, [ip, #100]	; 0x64
   24848:	ldr	r2, [sp, #52]	; 0x34
   2484c:	add	r1, r9, r9, lsl #1
   24850:	ldr	r2, [r0, r2, lsl #2]
   24854:	ldr	r0, [r0, r5, lsl #2]
   24858:	cmp	r2, #0
   2485c:	beq	24868 <__assert_fail@plt+0x13108>
   24860:	ldr	r2, [r2, #8]
   24864:	b	2486c <__assert_fail@plt+0x1310c>
   24868:	mov	r2, #0
   2486c:	add	r8, r8, r1, lsl #2
   24870:	sub	r6, fp, #44	; 0x2c
   24874:	cmp	r0, #0
   24878:	str	r2, [fp, #-48]	; 0xffffffd0
   2487c:	beq	248e8 <__assert_fail@plt+0x13188>
   24880:	ldr	r1, [r0, #40]	; 0x28
   24884:	mov	r0, r6
   24888:	mov	r2, r8
   2488c:	bl	24ea8 <__assert_fail@plt+0x13748>
   24890:	cmp	r0, #0
   24894:	str	r0, [fp, #-32]	; 0xffffffe0
   24898:	bne	24a34 <__assert_fail@plt+0x132d4>
   2489c:	ldr	r1, [sp, #24]
   248a0:	sub	r0, fp, #32
   248a4:	mov	r2, r6
   248a8:	mov	r3, sl
   248ac:	bl	22658 <__assert_fail@plt+0x10ef8>
   248b0:	ldr	r6, [sp, #44]	; 0x2c
   248b4:	ldr	r1, [r6, #100]	; 0x64
   248b8:	str	r0, [r1, r5, lsl #2]
   248bc:	ldr	r0, [fp, #-36]	; 0xffffffdc
   248c0:	bl	144c0 <__assert_fail@plt+0x2d60>
   248c4:	ldr	r0, [r6, #100]	; 0x64
   248c8:	mov	ip, r6
   248cc:	ldr	r1, [r0, r5, lsl #2]
   248d0:	cmp	r1, #0
   248d4:	bne	24918 <__assert_fail@plt+0x131b8>
   248d8:	ldr	r9, [fp, #-32]	; 0xffffffe0
   248dc:	cmp	r9, #0
   248e0:	beq	24918 <__assert_fail@plt+0x131b8>
   248e4:	b	24a20 <__assert_fail@plt+0x132c0>
   248e8:	ldr	r1, [sp, #24]
   248ec:	sub	r0, fp, #32
   248f0:	mov	r2, r8
   248f4:	mov	r3, sl
   248f8:	bl	22658 <__assert_fail@plt+0x10ef8>
   248fc:	ldr	ip, [sp, #44]	; 0x2c
   24900:	ldr	r1, [ip, #100]	; 0x64
   24904:	str	r0, [r1, r5, lsl #2]
   24908:	ldr	r0, [ip, #100]	; 0x64
   2490c:	ldr	r1, [r0, r5, lsl #2]
   24910:	cmp	r1, #0
   24914:	beq	248d8 <__assert_fail@plt+0x13178>
   24918:	cmp	r7, r4
   2491c:	ldr	r7, [sp, #20]
   24920:	bne	24718 <__assert_fail@plt+0x12fb8>
   24924:	ldr	r1, [sp, #52]	; 0x34
   24928:	ldr	r0, [r0, r1, lsl #2]
   2492c:	ldr	r1, [fp, #-48]	; 0xffffffd0
   24930:	ldr	r0, [r0, #8]
   24934:	cmp	r0, r1
   24938:	ble	24718 <__assert_fail@plt+0x12fb8>
   2493c:	ldr	r2, [sp, #52]	; 0x34
   24940:	mov	r0, ip
   24944:	mov	r1, r8
   24948:	mov	r4, ip
   2494c:	bl	23f90 <__assert_fail@plt+0x12830>
   24950:	cmp	r0, #0
   24954:	str	r0, [fp, #-32]	; 0xffffffe0
   24958:	bne	24a54 <__assert_fail@plt+0x132f4>
   2495c:	mov	r0, r4
   24960:	mov	r1, r8
   24964:	bl	24090 <__assert_fail@plt+0x12930>
   24968:	ldr	r7, [sp, #20]
   2496c:	cmp	r0, #0
   24970:	mov	ip, r4
   24974:	str	r0, [fp, #-32]	; 0xffffffe0
   24978:	beq	24718 <__assert_fail@plt+0x12fb8>
   2497c:	b	24a54 <__assert_fail@plt+0x132f4>
   24980:	ldr	r0, [ip, #88]	; 0x58
   24984:	and	r0, r0, #2
   24988:	eor	sl, r0, #10
   2498c:	b	24844 <__assert_fail@plt+0x130e4>
   24990:	mov	r0, r6
   24994:	bl	1164c <iswalnum@plt>
   24998:	mov	sl, #1
   2499c:	cmp	r6, #95	; 0x5f
   249a0:	beq	249b4 <__assert_fail@plt+0x13254>
   249a4:	ldr	ip, [sp, #44]	; 0x2c
   249a8:	cmp	r0, #0
   249ac:	beq	24828 <__assert_fail@plt+0x130c8>
   249b0:	b	24844 <__assert_fail@plt+0x130e4>
   249b4:	ldr	ip, [sp, #44]	; 0x2c
   249b8:	b	24844 <__assert_fail@plt+0x130e4>
   249bc:	ldr	r0, [ip, #88]	; 0x58
   249c0:	and	r0, r0, #2
   249c4:	eor	r1, r0, #10
   249c8:	and	r0, r1, #1
   249cc:	tst	r5, #1024	; 0x400
   249d0:	eor	r2, r0, #1
   249d4:	bne	2417c <__assert_fail@plt+0x12a1c>
   249d8:	b	241fc <__assert_fail@plt+0x12a9c>
   249dc:	mov	r0, r6
   249e0:	bl	1164c <iswalnum@plt>
   249e4:	mov	r1, #1
   249e8:	mov	r2, #0
   249ec:	cmp	r6, #95	; 0x5f
   249f0:	beq	24a04 <__assert_fail@plt+0x132a4>
   249f4:	ldr	ip, [sp, #44]	; 0x2c
   249f8:	cmp	r0, #0
   249fc:	beq	241d0 <__assert_fail@plt+0x12a70>
   24a00:	b	241fc <__assert_fail@plt+0x12a9c>
   24a04:	ldr	ip, [sp, #44]	; 0x2c
   24a08:	ldr	r0, [r4]
   24a0c:	cmp	r2, #0
   24a10:	beq	24208 <__assert_fail@plt+0x12aa8>
   24a14:	b	24210 <__assert_fail@plt+0x12ab0>
   24a18:	mov	r9, #0
   24a1c:	str	r9, [fp, #-32]	; 0xffffffe0
   24a20:	mov	r0, r9
   24a24:	sub	sp, fp, #28
   24a28:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   24a2c:	mov	r9, r0
   24a30:	b	24a1c <__assert_fail@plt+0x132bc>
   24a34:	mov	r9, r0
   24a38:	ldr	r0, [fp, #-36]	; 0xffffffdc
   24a3c:	bl	144c0 <__assert_fail@plt+0x2d60>
   24a40:	mov	r0, r9
   24a44:	sub	sp, fp, #28
   24a48:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   24a4c:	mov	r9, #12
   24a50:	b	24a1c <__assert_fail@plt+0x132bc>
   24a54:	mov	r9, r0
   24a58:	mov	r0, r9
   24a5c:	sub	sp, fp, #28
   24a60:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   24a64:	push	{r4, r5, r6, r7, fp, lr}
   24a68:	add	fp, sp, #16
   24a6c:	mov	r4, r0
   24a70:	ldr	r0, [r0, #36]	; 0x24
   24a74:	mov	r5, #12
   24a78:	cmn	r0, #-536870910	; 0xe0000002
   24a7c:	bhi	24c60 <__assert_fail@plt+0x13500>
   24a80:	ldr	r6, [r4, #48]	; 0x30
   24a84:	ldr	r2, [r4, #80]	; 0x50
   24a88:	cmp	r6, r0, lsl #1
   24a8c:	lslge	r6, r0, #1
   24a90:	cmp	r6, r1
   24a94:	movle	r6, r1
   24a98:	cmp	r2, #2
   24a9c:	blt	24ae4 <__assert_fail@plt+0x13384>
   24aa0:	cmn	r6, #-1073741823	; 0xc0000001
   24aa4:	bhi	24c60 <__assert_fail@plt+0x13500>
   24aa8:	ldr	r0, [r4, #8]
   24aac:	lsl	r7, r6, #2
   24ab0:	mov	r1, r7
   24ab4:	bl	2e0bc <__assert_fail@plt+0x1c95c>
   24ab8:	cmp	r0, #0
   24abc:	beq	24c60 <__assert_fail@plt+0x13500>
   24ac0:	str	r0, [r4, #8]
   24ac4:	ldr	r0, [r4, #12]
   24ac8:	cmp	r0, #0
   24acc:	beq	24ae4 <__assert_fail@plt+0x13384>
   24ad0:	mov	r1, r7
   24ad4:	bl	2e0bc <__assert_fail@plt+0x1c95c>
   24ad8:	cmp	r0, #0
   24adc:	beq	24c60 <__assert_fail@plt+0x13500>
   24ae0:	str	r0, [r4, #12]
   24ae4:	ldrb	r0, [r4, #75]	; 0x4b
   24ae8:	cmp	r0, #0
   24aec:	beq	24b08 <__assert_fail@plt+0x133a8>
   24af0:	ldr	r0, [r4, #4]
   24af4:	mov	r1, r6
   24af8:	bl	2e0bc <__assert_fail@plt+0x1c95c>
   24afc:	cmp	r0, #0
   24b00:	beq	24c60 <__assert_fail@plt+0x13500>
   24b04:	str	r0, [r4, #4]
   24b08:	str	r6, [r4, #36]	; 0x24
   24b0c:	ldr	r0, [r4, #100]	; 0x64
   24b10:	cmp	r0, #0
   24b14:	beq	24b30 <__assert_fail@plt+0x133d0>
   24b18:	mov	r1, #4
   24b1c:	add	r1, r1, r6, lsl #2
   24b20:	bl	2e0bc <__assert_fail@plt+0x1c95c>
   24b24:	cmp	r0, #0
   24b28:	beq	24c60 <__assert_fail@plt+0x13500>
   24b2c:	str	r0, [r4, #100]	; 0x64
   24b30:	ldrb	r1, [r4, #72]	; 0x48
   24b34:	ldr	r0, [r4, #80]	; 0x50
   24b38:	cmp	r1, #0
   24b3c:	beq	24b5c <__assert_fail@plt+0x133fc>
   24b40:	cmp	r0, #2
   24b44:	blt	24b70 <__assert_fail@plt+0x13410>
   24b48:	mov	r0, r4
   24b4c:	bl	1c110 <__assert_fail@plt+0xa9b0>
   24b50:	cmp	r0, #0
   24b54:	beq	24c5c <__assert_fail@plt+0x134fc>
   24b58:	pop	{r4, r5, r6, r7, fp, pc}
   24b5c:	cmp	r0, #2
   24b60:	blt	24be0 <__assert_fail@plt+0x13480>
   24b64:	mov	r0, r4
   24b68:	bl	1ca30 <__assert_fail@plt+0xb2d0>
   24b6c:	b	24c5c <__assert_fail@plt+0x134fc>
   24b70:	ldr	r6, [r4, #36]	; 0x24
   24b74:	ldr	r0, [r4, #48]	; 0x30
   24b78:	ldr	r5, [r4, #28]
   24b7c:	cmp	r6, r0
   24b80:	movgt	r6, r0
   24b84:	cmp	r5, r6
   24b88:	bge	24bd4 <__assert_fail@plt+0x13474>
   24b8c:	bl	115e0 <__ctype_toupper_loc@plt>
   24b90:	ldr	r1, [r4]
   24b94:	ldr	r3, [r4, #24]
   24b98:	ldr	r2, [r4, #64]	; 0x40
   24b9c:	add	r1, r1, r3
   24ba0:	cmp	r2, #0
   24ba4:	ldrb	r1, [r1, r5]
   24ba8:	bne	24bcc <__assert_fail@plt+0x1346c>
   24bac:	ldr	r2, [r0]
   24bb0:	ldr	r1, [r2, r1, lsl #2]
   24bb4:	ldr	r2, [r4, #4]
   24bb8:	strb	r1, [r2, r5]
   24bbc:	add	r5, r5, #1
   24bc0:	cmp	r5, r6
   24bc4:	blt	24b90 <__assert_fail@plt+0x13430>
   24bc8:	b	24bd4 <__assert_fail@plt+0x13474>
   24bcc:	ldrb	r1, [r2, r1]
   24bd0:	b	24bac <__assert_fail@plt+0x1344c>
   24bd4:	str	r5, [r4, #28]
   24bd8:	str	r5, [r4, #32]
   24bdc:	b	24c5c <__assert_fail@plt+0x134fc>
   24be0:	ldr	r2, [r4, #64]	; 0x40
   24be4:	cmp	r2, #0
   24be8:	beq	24c5c <__assert_fail@plt+0x134fc>
   24bec:	ldr	r1, [r4, #36]	; 0x24
   24bf0:	ldr	r3, [r4, #48]	; 0x30
   24bf4:	ldr	r0, [r4, #28]
   24bf8:	cmp	r1, r3
   24bfc:	movgt	r1, r3
   24c00:	cmp	r0, r1
   24c04:	bge	24c54 <__assert_fail@plt+0x134f4>
   24c08:	ldr	r6, [r4, #24]
   24c0c:	ldm	r4, {r3, r7}
   24c10:	add	r6, r6, r0
   24c14:	ldrb	r3, [r3, r6]
   24c18:	ldrb	r2, [r2, r3]
   24c1c:	strb	r2, [r7, r0]
   24c20:	add	r0, r0, #1
   24c24:	cmp	r0, r1
   24c28:	bge	24c54 <__assert_fail@plt+0x134f4>
   24c2c:	ldr	r7, [r4, #24]
   24c30:	ldm	r4, {r2, r3}
   24c34:	ldr	r6, [r4, #64]	; 0x40
   24c38:	add	r2, r2, r7
   24c3c:	ldrb	r2, [r2, r0]
   24c40:	ldrb	r2, [r6, r2]
   24c44:	strb	r2, [r3, r0]
   24c48:	add	r0, r0, #1
   24c4c:	cmp	r0, r1
   24c50:	blt	24c2c <__assert_fail@plt+0x134cc>
   24c54:	str	r0, [r4, #28]
   24c58:	str	r0, [r4, #32]
   24c5c:	mov	r5, #0
   24c60:	mov	r0, r5
   24c64:	pop	{r4, r5, r6, r7, fp, pc}
   24c68:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   24c6c:	add	fp, sp, #24
   24c70:	sub	sp, sp, #16
   24c74:	mov	r9, r0
   24c78:	mov	r4, r1
   24c7c:	ldr	r5, [r1, #40]	; 0x28
   24c80:	ldr	r7, [r1, #84]	; 0x54
   24c84:	ldr	r0, [r1, #100]	; 0x64
   24c88:	ldr	r1, [r1, #104]	; 0x68
   24c8c:	mov	r6, r2
   24c90:	cmp	r5, r1
   24c94:	ble	24cb4 <__assert_fail@plt+0x13554>
   24c98:	str	r6, [r0, r5, lsl #2]
   24c9c:	str	r5, [r4, #104]	; 0x68
   24ca0:	cmp	r6, #0
   24ca4:	ldrne	r0, [r7, #76]	; 0x4c
   24ca8:	cmpne	r0, #0
   24cac:	beq	24e04 <__assert_fail@plt+0x136a4>
   24cb0:	b	24e10 <__assert_fail@plt+0x136b0>
   24cb4:	ldr	r1, [r0, r5, lsl #2]
   24cb8:	cmp	r1, #0
   24cbc:	beq	24d34 <__assert_fail@plt+0x135d4>
   24cc0:	ldr	r2, [r1, #40]	; 0x28
   24cc4:	cmp	r6, #0
   24cc8:	beq	24d7c <__assert_fail@plt+0x1361c>
   24ccc:	ldr	r8, [r6, #40]	; 0x28
   24cd0:	mov	r0, sp
   24cd4:	mov	r1, r8
   24cd8:	bl	24ea8 <__assert_fail@plt+0x13748>
   24cdc:	cmp	r0, #0
   24ce0:	str	r0, [r9]
   24ce4:	bne	24e68 <__assert_fail@plt+0x13708>
   24ce8:	ldr	r0, [r4, #40]	; 0x28
   24cec:	cmp	r0, #0
   24cf0:	ble	24d2c <__assert_fail@plt+0x135cc>
   24cf4:	ldr	r1, [r4, #48]	; 0x30
   24cf8:	sub	r0, r0, #1
   24cfc:	cmp	r1, r0
   24d00:	beq	24e78 <__assert_fail@plt+0x13718>
   24d04:	ldr	r1, [r4, #80]	; 0x50
   24d08:	cmp	r1, #2
   24d0c:	blt	24d4c <__assert_fail@plt+0x135ec>
   24d10:	ldr	r1, [r4, #8]
   24d14:	ldr	r6, [r1, r0, lsl #2]
   24d18:	cmn	r6, #1
   24d1c:	bne	24da0 <__assert_fail@plt+0x13640>
   24d20:	sub	r0, r0, #1
   24d24:	cmn	r0, #1
   24d28:	bne	24d14 <__assert_fail@plt+0x135b4>
   24d2c:	ldr	r3, [r4, #60]	; 0x3c
   24d30:	b	24dc8 <__assert_fail@plt+0x13668>
   24d34:	str	r6, [r0, r5, lsl #2]
   24d38:	cmp	r6, #0
   24d3c:	ldrne	r0, [r7, #76]	; 0x4c
   24d40:	cmpne	r0, #0
   24d44:	beq	24e04 <__assert_fail@plt+0x136a4>
   24d48:	b	24e10 <__assert_fail@plt+0x136b0>
   24d4c:	ldr	r1, [r4, #4]
   24d50:	ldr	r2, [r4, #68]	; 0x44
   24d54:	mov	r3, #1
   24d58:	ldrb	r0, [r1, r0]
   24d5c:	ubfx	r1, r0, #5, #3
   24d60:	ldr	r1, [r2, r1, lsl #2]
   24d64:	and	r2, r0, #31
   24d68:	tst	r1, r3, lsl r2
   24d6c:	moveq	r3, #0
   24d70:	cmpeq	r0, #10
   24d74:	bne	24dc8 <__assert_fail@plt+0x13668>
   24d78:	b	24db8 <__assert_fail@plt+0x13658>
   24d7c:	vldr	d16, [r2]
   24d80:	ldr	r0, [r2, #8]
   24d84:	mov	r8, #0
   24d88:	str	r0, [sp, #8]
   24d8c:	mov	r0, r5
   24d90:	vstr	d16, [sp]
   24d94:	cmp	r0, #0
   24d98:	bgt	24cf4 <__assert_fail@plt+0x13594>
   24d9c:	b	24d2c <__assert_fail@plt+0x135cc>
   24da0:	ldrb	r0, [r4, #78]	; 0x4e
   24da4:	cmp	r0, #0
   24da8:	bne	24e88 <__assert_fail@plt+0x13728>
   24dac:	mov	r3, #0
   24db0:	cmp	r6, #10
   24db4:	bne	24dc8 <__assert_fail@plt+0x13668>
   24db8:	ldrb	r0, [r4, #77]	; 0x4d
   24dbc:	cmp	r0, #0
   24dc0:	movwne	r0, #1
   24dc4:	lsl	r3, r0, #1
   24dc8:	mov	r2, sp
   24dcc:	mov	r0, r9
   24dd0:	mov	r1, r7
   24dd4:	bl	22658 <__assert_fail@plt+0x10ef8>
   24dd8:	mov	r6, r0
   24ddc:	ldr	r0, [r4, #100]	; 0x64
   24de0:	cmp	r8, #0
   24de4:	str	r6, [r0, r5, lsl #2]
   24de8:	beq	24df4 <__assert_fail@plt+0x13694>
   24dec:	ldr	r0, [sp, #8]
   24df0:	bl	144c0 <__assert_fail@plt+0x2d60>
   24df4:	cmp	r6, #0
   24df8:	ldrne	r0, [r7, #76]	; 0x4c
   24dfc:	cmpne	r0, #0
   24e00:	bne	24e10 <__assert_fail@plt+0x136b0>
   24e04:	mov	r0, r6
   24e08:	sub	sp, fp, #24
   24e0c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   24e10:	add	r7, r6, #4
   24e14:	mov	r0, r4
   24e18:	mov	r2, r5
   24e1c:	mov	r1, r7
   24e20:	bl	23f90 <__assert_fail@plt+0x12830>
   24e24:	cmp	r0, #0
   24e28:	str	r0, [r9]
   24e2c:	bne	24e68 <__assert_fail@plt+0x13708>
   24e30:	ldrb	r0, [r6, #52]	; 0x34
   24e34:	tst	r0, #64	; 0x40
   24e38:	beq	24e04 <__assert_fail@plt+0x136a4>
   24e3c:	mov	r0, r4
   24e40:	mov	r1, r7
   24e44:	bl	24090 <__assert_fail@plt+0x12930>
   24e48:	str	r0, [r9]
   24e4c:	cmp	r0, #0
   24e50:	mov	r6, #0
   24e54:	ldreq	r0, [r4, #100]	; 0x64
   24e58:	ldreq	r6, [r0, r5, lsl #2]
   24e5c:	mov	r0, r6
   24e60:	sub	sp, fp, #24
   24e64:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   24e68:	mov	r6, #0
   24e6c:	mov	r0, r6
   24e70:	sub	sp, fp, #24
   24e74:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   24e78:	ldr	r0, [r4, #88]	; 0x58
   24e7c:	and	r0, r0, #2
   24e80:	eor	r3, r0, #10
   24e84:	b	24dc8 <__assert_fail@plt+0x13668>
   24e88:	mov	r0, r6
   24e8c:	bl	1164c <iswalnum@plt>
   24e90:	mov	r3, #1
   24e94:	cmp	r6, #95	; 0x5f
   24e98:	beq	24dc8 <__assert_fail@plt+0x13668>
   24e9c:	cmp	r0, #0
   24ea0:	beq	24dac <__assert_fail@plt+0x1364c>
   24ea4:	b	24dc8 <__assert_fail@plt+0x13668>
   24ea8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   24eac:	add	fp, sp, #28
   24eb0:	sub	sp, sp, #20
   24eb4:	mov	sl, r2
   24eb8:	cmp	r1, #0
   24ebc:	str	r0, [sp, #16]
   24ec0:	beq	25034 <__assert_fail@plt+0x138d4>
   24ec4:	ldr	r0, [r1, #4]
   24ec8:	mov	r8, r1
   24ecc:	cmp	sl, #0
   24ed0:	beq	24ff0 <__assert_fail@plt+0x13890>
   24ed4:	cmp	r0, #1
   24ed8:	blt	24ff0 <__assert_fail@plt+0x13890>
   24edc:	ldr	r1, [sl, #4]
   24ee0:	cmp	r1, #1
   24ee4:	blt	24ff0 <__assert_fail@plt+0x13890>
   24ee8:	ldr	r4, [sp, #16]
   24eec:	add	r0, r1, r0
   24ef0:	str	r0, [r4]
   24ef4:	lsl	r0, r0, #2
   24ef8:	bl	2e08c <__assert_fail@plt+0x1c92c>
   24efc:	cmp	r0, #0
   24f00:	str	r0, [r4, #8]
   24f04:	beq	2512c <__assert_fail@plt+0x139cc>
   24f08:	ldr	r9, [sl, #4]
   24f0c:	ldr	lr, [r8, #4]
   24f10:	mov	r7, #0
   24f14:	mov	r1, #0
   24f18:	cmp	r9, #0
   24f1c:	movwgt	r1, #1
   24f20:	cmp	lr, #1
   24f24:	blt	250b0 <__assert_fail@plt+0x13950>
   24f28:	mov	r2, #0
   24f2c:	mov	ip, #0
   24f30:	str	r2, [sp, #8]
   24f34:	mov	r2, #0
   24f38:	str	r2, [sp, #12]
   24f3c:	mov	r2, #0
   24f40:	ldr	r4, [sp, #12]
   24f44:	mov	r7, ip
   24f48:	tst	r1, #1
   24f4c:	beq	250e0 <__assert_fail@plt+0x13980>
   24f50:	ldr	r1, [sl, #8]
   24f54:	ldr	r5, [r1, r7, lsl #2]
   24f58:	ldr	r1, [r8, #8]
   24f5c:	ldr	r3, [r1, r2, lsl #2]
   24f60:	cmp	r3, r5
   24f64:	ble	24f8c <__assert_fail@plt+0x1382c>
   24f68:	add	r7, r7, #1
   24f6c:	str	r5, [r0, r4, lsl #2]
   24f70:	mov	r1, #0
   24f74:	add	r4, r4, #1
   24f78:	cmp	r9, r7
   24f7c:	movwgt	r1, #1
   24f80:	cmp	lr, r2
   24f84:	bgt	24f48 <__assert_fail@plt+0x137e8>
   24f88:	b	250b4 <__assert_fail@plt+0x13954>
   24f8c:	str	r3, [r0, r4, lsl #2]
   24f90:	ldr	r6, [sp, #8]
   24f94:	add	r1, r7, #1
   24f98:	mov	ip, r7
   24f9c:	add	r2, r2, #1
   24fa0:	ldr	r9, [sl, #4]
   24fa4:	ldr	lr, [r8, #4]
   24fa8:	moveq	ip, r1
   24fac:	str	r1, [sp, #4]
   24fb0:	mov	r1, #0
   24fb4:	sub	r6, r6, #1
   24fb8:	cmp	r9, ip
   24fbc:	str	r6, [sp, #8]
   24fc0:	add	r6, r4, #1
   24fc4:	movwgt	r1, #1
   24fc8:	cmp	lr, r2
   24fcc:	str	r6, [sp, #12]
   24fd0:	bgt	24f40 <__assert_fail@plt+0x137e0>
   24fd4:	ldr	r2, [sp, #4]
   24fd8:	cmp	r3, r5
   24fdc:	add	r4, r4, #1
   24fe0:	moveq	r7, r2
   24fe4:	cmp	r1, #0
   24fe8:	bne	250bc <__assert_fail@plt+0x1395c>
   24fec:	b	25108 <__assert_fail@plt+0x139a8>
   24ff0:	cmp	r0, #1
   24ff4:	blt	25034 <__assert_fail@plt+0x138d4>
   24ff8:	ldr	r1, [sp, #16]
   24ffc:	str	r0, [r1, #4]
   25000:	ldr	r1, [r8, #4]
   25004:	cmp	r1, #1
   25008:	blt	25094 <__assert_fail@plt+0x13934>
   2500c:	ldr	r4, [sp, #16]
   25010:	str	r0, [r4]
   25014:	lsl	r0, r0, #2
   25018:	bl	2e08c <__assert_fail@plt+0x1c92c>
   2501c:	cmp	r0, #0
   25020:	str	r0, [r4, #8]
   25024:	beq	2511c <__assert_fail@plt+0x139bc>
   25028:	ldr	r2, [r8, #4]
   2502c:	ldr	r1, [r8, #8]
   25030:	b	25080 <__assert_fail@plt+0x13920>
   25034:	cmp	sl, #0
   25038:	beq	25094 <__assert_fail@plt+0x13934>
   2503c:	ldr	r0, [sl, #4]
   25040:	cmp	r0, #1
   25044:	blt	25094 <__assert_fail@plt+0x13934>
   25048:	ldr	r1, [sp, #16]
   2504c:	str	r0, [r1, #4]
   25050:	ldr	r1, [sl, #4]
   25054:	cmp	r1, #1
   25058:	blt	25094 <__assert_fail@plt+0x13934>
   2505c:	ldr	r4, [sp, #16]
   25060:	str	r0, [r4]
   25064:	lsl	r0, r0, #2
   25068:	bl	2e08c <__assert_fail@plt+0x1c92c>
   2506c:	cmp	r0, #0
   25070:	str	r0, [r4, #8]
   25074:	beq	2511c <__assert_fail@plt+0x139bc>
   25078:	ldr	r2, [sl, #4]
   2507c:	ldr	r1, [sl, #8]
   25080:	lsl	r2, r2, #2
   25084:	bl	11484 <memcpy@plt>
   25088:	mov	r0, #0
   2508c:	sub	sp, fp, #28
   25090:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   25094:	ldr	r1, [sp, #16]
   25098:	mov	r0, #0
   2509c:	str	r0, [r1]
   250a0:	str	r0, [r1, #4]
   250a4:	str	r0, [r1, #8]
   250a8:	sub	sp, fp, #28
   250ac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   250b0:	mov	r4, #0
   250b4:	cmp	r1, #0
   250b8:	beq	25108 <__assert_fail@plt+0x139a8>
   250bc:	ldr	r1, [sl, #8]
   250c0:	sub	r2, r9, r7
   250c4:	add	r0, r0, r4, lsl #2
   250c8:	lsl	r2, r2, #2
   250cc:	add	r1, r1, r7, lsl #2
   250d0:	bl	11484 <memcpy@plt>
   250d4:	sub	r0, r4, r7
   250d8:	add	r4, r0, r9
   250dc:	b	25108 <__assert_fail@plt+0x139a8>
   250e0:	ldr	r1, [r8, #8]
   250e4:	add	r0, r0, r4, lsl #2
   250e8:	add	r1, r1, r2, lsl #2
   250ec:	sub	r2, lr, r2
   250f0:	lsl	r2, r2, #2
   250f4:	bl	11484 <memcpy@plt>
   250f8:	ldr	r0, [r8, #4]
   250fc:	ldr	r1, [sp, #8]
   25100:	add	r0, r0, r1
   25104:	add	r4, r0, r4
   25108:	ldr	r0, [sp, #16]
   2510c:	str	r4, [r0, #4]
   25110:	mov	r0, #0
   25114:	sub	sp, fp, #28
   25118:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2511c:	ldr	r1, [sp, #16]
   25120:	mov	r0, #0
   25124:	str	r0, [r1]
   25128:	str	r0, [r1, #4]
   2512c:	mov	r0, #12
   25130:	sub	sp, fp, #28
   25134:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   25138:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2513c:	add	fp, sp, #28
   25140:	sub	sp, sp, #12
   25144:	mov	r6, r2
   25148:	mov	r7, r3
   2514c:	ldr	r2, [r2]
   25150:	mov	r4, r0
   25154:	mov	r0, #8
   25158:	mov	r8, r1
   2515c:	ldr	r9, [fp, #8]
   25160:	ldr	r3, [r6, #4]
   25164:	str	r0, [sp, #8]
   25168:	add	r1, r6, #8
   2516c:	mov	r0, r4
   25170:	stm	sp, {r7, r9}
   25174:	bl	25310 <__assert_fail@plt+0x13bb0>
   25178:	mov	r5, r0
   2517c:	cmp	r0, #0
   25180:	beq	25190 <__assert_fail@plt+0x13a30>
   25184:	mov	r0, r5
   25188:	sub	sp, fp, #28
   2518c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   25190:	ldr	r0, [r4, #108]	; 0x6c
   25194:	ldr	r1, [r4, #112]	; 0x70
   25198:	ldr	sl, [r6, #4]
   2519c:	ldr	r5, [r8]
   251a0:	cmp	r0, r1
   251a4:	blt	251f4 <__assert_fail@plt+0x13a94>
   251a8:	ldr	r0, [r4, #116]	; 0x74
   251ac:	add	r1, r1, r1, lsl #1
   251b0:	lsl	r1, r1, #4
   251b4:	bl	2e0bc <__assert_fail@plt+0x1c95c>
   251b8:	cmp	r0, #0
   251bc:	beq	252f8 <__assert_fail@plt+0x13b98>
   251c0:	str	r0, [r4, #116]	; 0x74
   251c4:	ldr	r1, [r4, #108]	; 0x6c
   251c8:	ldr	r2, [r4, #112]	; 0x70
   251cc:	add	r1, r1, r1, lsl #1
   251d0:	add	r0, r0, r1, lsl #3
   251d4:	add	r1, r2, r2, lsl #1
   251d8:	lsl	r2, r1, #3
   251dc:	mov	r1, #0
   251e0:	bl	11670 <memset@plt>
   251e4:	ldr	r1, [r4, #112]	; 0x70
   251e8:	ldr	r0, [r4, #108]	; 0x6c
   251ec:	lsl	r1, r1, #1
   251f0:	str	r1, [r4, #112]	; 0x70
   251f4:	ldr	r1, [r4, #116]	; 0x74
   251f8:	cmp	r0, #1
   251fc:	blt	2521c <__assert_fail@plt+0x13abc>
   25200:	sub	r2, r0, #1
   25204:	add	r2, r2, r2, lsl #1
   25208:	add	r2, r1, r2, lsl #3
   2520c:	ldr	r3, [r2, #4]
   25210:	cmp	r3, r9
   25214:	moveq	r3, #1
   25218:	strbeq	r3, [r2, #20]
   2521c:	add	r2, r0, r0, lsl #1
   25220:	cmp	sl, r5
   25224:	mov	r3, #0
   25228:	mov	ip, #0
   2522c:	add	r0, r0, #1
   25230:	mvneq	r3, #0
   25234:	str	r7, [r1, r2, lsl #3]!
   25238:	str	r9, [r1, #4]
   2523c:	str	r5, [r1, #8]
   25240:	str	sl, [r1, #12]
   25244:	str	r3, [r1, #16]
   25248:	str	r0, [r4, #108]	; 0x6c
   2524c:	strb	ip, [r1, #20]
   25250:	sub	r0, sl, r5
   25254:	ldr	r1, [r4, #120]	; 0x78
   25258:	cmp	r1, r0
   2525c:	strlt	r0, [r4, #120]	; 0x78
   25260:	ldr	r0, [r6, #4]
   25264:	ldr	r1, [r8]
   25268:	ldr	r7, [r4, #104]	; 0x68
   2526c:	add	r0, r0, r9
   25270:	sub	r6, r0, r1
   25274:	ldr	r0, [r4, #36]	; 0x24
   25278:	cmp	r0, r6
   2527c:	bgt	2528c <__assert_fail@plt+0x13b2c>
   25280:	ldr	r1, [r4, #48]	; 0x30
   25284:	cmp	r0, r1
   25288:	blt	252a4 <__assert_fail@plt+0x13b44>
   2528c:	ldr	r0, [r4, #28]
   25290:	cmp	r0, r6
   25294:	bgt	252bc <__assert_fail@plt+0x13b5c>
   25298:	ldr	r1, [r4, #48]	; 0x30
   2529c:	cmp	r0, r1
   252a0:	bge	252bc <__assert_fail@plt+0x13b5c>
   252a4:	add	r1, r6, #1
   252a8:	mov	r0, r4
   252ac:	bl	24a64 <__assert_fail@plt+0x13304>
   252b0:	mov	r5, r0
   252b4:	cmp	r0, #0
   252b8:	bne	25184 <__assert_fail@plt+0x13a24>
   252bc:	mov	r5, #0
   252c0:	cmp	r6, r7
   252c4:	ble	25184 <__assert_fail@plt+0x13a24>
   252c8:	sub	r0, r6, r7
   252cc:	mov	r1, #0
   252d0:	mov	r5, #0
   252d4:	lsl	r2, r0, #2
   252d8:	ldr	r0, [r4, #100]	; 0x64
   252dc:	add	r0, r0, r7, lsl #2
   252e0:	add	r0, r0, #4
   252e4:	bl	11670 <memset@plt>
   252e8:	str	r6, [r4, #104]	; 0x68
   252ec:	mov	r0, r5
   252f0:	sub	sp, fp, #28
   252f4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   252f8:	ldr	r0, [r4, #116]	; 0x74
   252fc:	bl	144c0 <__assert_fail@plt+0x2d60>
   25300:	mov	r5, #12
   25304:	mov	r0, r5
   25308:	sub	sp, fp, #28
   2530c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   25310:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   25314:	add	fp, sp, #28
   25318:	sub	sp, sp, #84	; 0x54
   2531c:	ldr	r7, [r0, #84]	; 0x54
   25320:	mov	ip, r1
   25324:	mov	r1, #0
   25328:	mov	lr, r2
   2532c:	mov	r9, r3
   25330:	str	r0, [sp, #44]	; 0x2c
   25334:	str	r1, [fp, #-52]	; 0xffffffcc
   25338:	ldr	r4, [ip, #4]
   2533c:	ldr	r1, [r7]
   25340:	str	r7, [sp, #24]
   25344:	ldr	sl, [r1, r2, lsl #3]
   25348:	ldr	r1, [r0, #120]	; 0x78
   2534c:	ldr	r2, [fp, #12]
   25350:	add	r2, r1, r2
   25354:	cmp	r4, r2
   25358:	str	sl, [sp, #20]
   2535c:	ble	25cc8 <__assert_fail@plt+0x14568>
   25360:	ldr	r2, [r0, #100]	; 0x64
   25364:	ldr	r5, [ip]
   25368:	ldr	r4, [r0, #40]	; 0x28
   2536c:	ldr	r1, [r0, #88]	; 0x58
   25370:	str	r2, [sp, #8]
   25374:	ldr	r2, [ip, #8]
   25378:	cmp	r5, #0
   2537c:	str	r4, [sp, #12]
   25380:	moveq	r5, r9
   25384:	cmp	r5, #0
   25388:	str	r2, [r0, #100]	; 0x64
   2538c:	str	r5, [r0, #40]	; 0x28
   25390:	ble	25d38 <__assert_fail@plt+0x145d8>
   25394:	ldr	r2, [r0, #48]	; 0x30
   25398:	sub	r3, r5, #1
   2539c:	cmp	r2, r3
   253a0:	beq	25d4c <__assert_fail@plt+0x145ec>
   253a4:	ldr	r1, [r0, #80]	; 0x50
   253a8:	cmp	r1, #2
   253ac:	blt	25420 <__assert_fail@plt+0x13cc0>
   253b0:	ldr	r1, [r0, #8]
   253b4:	ldr	r6, [r1, r3, lsl #2]
   253b8:	cmn	r6, #1
   253bc:	bne	25450 <__assert_fail@plt+0x13cf0>
   253c0:	sub	r3, r3, #1
   253c4:	cmn	r3, #1
   253c8:	bne	253b4 <__assert_fail@plt+0x13c54>
   253cc:	ldr	r0, [sp, #44]	; 0x2c
   253d0:	ldr	r8, [r0, #60]	; 0x3c
   253d4:	cmp	r5, r9
   253d8:	str	ip, [sp, #16]
   253dc:	beq	2548c <__assert_fail@plt+0x13d2c>
   253e0:	ldr	r9, [sp, #44]	; 0x2c
   253e4:	ldr	r0, [r9, #100]	; 0x64
   253e8:	ldr	r6, [r0, r5, lsl #2]
   253ec:	cmp	r6, #0
   253f0:	beq	25558 <__assert_fail@plt+0x13df8>
   253f4:	ldrb	r0, [r6, #52]	; 0x34
   253f8:	tst	r0, #64	; 0x40
   253fc:	bne	25578 <__assert_fail@plt+0x13e18>
   25400:	mov	r0, #0
   25404:	str	r0, [sp, #52]	; 0x34
   25408:	str	r0, [sp, #48]	; 0x30
   2540c:	str	r0, [sp, #56]	; 0x38
   25410:	ldr	r4, [fp, #12]
   25414:	cmp	r5, r4
   25418:	blt	255d0 <__assert_fail@plt+0x13e70>
   2541c:	b	25bb0 <__assert_fail@plt+0x14450>
   25420:	ldr	r1, [r0, #4]
   25424:	ldr	r2, [r0, #68]	; 0x44
   25428:	mov	r8, #1
   2542c:	ldrb	r0, [r1, r3]
   25430:	ubfx	r1, r0, #5, #3
   25434:	ldr	r1, [r2, r1, lsl #2]
   25438:	and	r2, r0, #31
   2543c:	tst	r1, r8, lsl r2
   25440:	moveq	r8, #0
   25444:	cmpeq	r0, #10
   25448:	bne	25480 <__assert_fail@plt+0x13d20>
   2544c:	b	2546c <__assert_fail@plt+0x13d0c>
   25450:	ldr	r0, [sp, #44]	; 0x2c
   25454:	ldrb	r0, [r0, #78]	; 0x4e
   25458:	cmp	r0, #0
   2545c:	bne	25d9c <__assert_fail@plt+0x1463c>
   25460:	mov	r8, #0
   25464:	cmp	r6, #10
   25468:	bne	25480 <__assert_fail@plt+0x13d20>
   2546c:	ldr	r0, [sp, #44]	; 0x2c
   25470:	ldrb	r0, [r0, #77]	; 0x4d
   25474:	cmp	r0, #0
   25478:	movwne	r0, #1
   2547c:	lsl	r8, r0, #1
   25480:	cmp	r5, r9
   25484:	str	ip, [sp, #16]
   25488:	bne	253e0 <__assert_fail@plt+0x13c80>
   2548c:	mov	r0, #1
   25490:	mov	r6, lr
   25494:	str	r0, [sp, #52]	; 0x34
   25498:	str	r0, [sp, #48]	; 0x30
   2549c:	mov	r0, #4
   254a0:	bl	2e08c <__assert_fail@plt+0x1c92c>
   254a4:	cmp	r0, #0
   254a8:	str	r0, [sp, #56]	; 0x38
   254ac:	beq	25d7c <__assert_fail@plt+0x1461c>
   254b0:	ldr	r3, [fp, #16]
   254b4:	str	r6, [r0]
   254b8:	mov	r0, #0
   254bc:	add	r1, sp, #48	; 0x30
   254c0:	mov	r2, sl
   254c4:	str	r0, [fp, #-52]	; 0xffffffcc
   254c8:	mov	r0, r7
   254cc:	bl	25de4 <__assert_fail@plt+0x14684>
   254d0:	cmp	r0, #0
   254d4:	str	r0, [fp, #-52]	; 0xffffffcc
   254d8:	bne	25d64 <__assert_fail@plt+0x14604>
   254dc:	ldr	r0, [sp, #52]	; 0x34
   254e0:	ldr	r9, [sp, #44]	; 0x2c
   254e4:	cmp	r0, #0
   254e8:	beq	25514 <__assert_fail@plt+0x13db4>
   254ec:	ldr	r0, [fp, #16]
   254f0:	ldr	r3, [sp, #20]
   254f4:	add	r1, sp, #48	; 0x30
   254f8:	mov	r2, r5
   254fc:	str	r0, [sp]
   25500:	mov	r0, r9
   25504:	bl	25f2c <__assert_fail@plt+0x147cc>
   25508:	cmp	r0, #0
   2550c:	str	r0, [fp, #-52]	; 0xffffffcc
   25510:	bne	25d64 <__assert_fail@plt+0x14604>
   25514:	ldr	r1, [sp, #24]
   25518:	sub	r0, fp, #52	; 0x34
   2551c:	add	r2, sp, #48	; 0x30
   25520:	mov	r3, r8
   25524:	bl	22658 <__assert_fail@plt+0x10ef8>
   25528:	mov	r6, r0
   2552c:	cmp	r0, #0
   25530:	bne	25540 <__assert_fail@plt+0x13de0>
   25534:	ldr	r0, [fp, #-52]	; 0xffffffcc
   25538:	cmp	r0, #0
   2553c:	bne	25c9c <__assert_fail@plt+0x1453c>
   25540:	ldr	r0, [r9, #100]	; 0x64
   25544:	str	r6, [r0, r5, lsl #2]
   25548:	ldr	r4, [fp, #12]
   2554c:	cmp	r5, r4
   25550:	blt	255d0 <__assert_fail@plt+0x13e70>
   25554:	b	25bb0 <__assert_fail@plt+0x14450>
   25558:	mov	r6, #0
   2555c:	str	r6, [sp, #52]	; 0x34
   25560:	str	r6, [sp, #48]	; 0x30
   25564:	str	r6, [sp, #56]	; 0x38
   25568:	ldr	r4, [fp, #12]
   2556c:	cmp	r5, r4
   25570:	blt	255d0 <__assert_fail@plt+0x13e70>
   25574:	b	25bb0 <__assert_fail@plt+0x14450>
   25578:	ldr	r0, [r6, #8]
   2557c:	cmp	r0, #1
   25580:	str	r0, [sp, #52]	; 0x34
   25584:	blt	25c60 <__assert_fail@plt+0x14500>
   25588:	str	r0, [sp, #48]	; 0x30
   2558c:	lsl	r0, r0, #2
   25590:	bl	2e08c <__assert_fail@plt+0x1c92c>
   25594:	cmp	r0, #0
   25598:	str	r0, [sp, #56]	; 0x38
   2559c:	beq	25d7c <__assert_fail@plt+0x1461c>
   255a0:	ldr	r2, [r6, #8]
   255a4:	ldr	r1, [r6, #12]
   255a8:	lsl	r2, r2, #2
   255ac:	bl	11484 <memcpy@plt>
   255b0:	ldrb	r0, [r6, #52]	; 0x34
   255b4:	mov	r1, #0
   255b8:	str	r1, [fp, #-52]	; 0xffffffcc
   255bc:	tst	r0, #64	; 0x40
   255c0:	bne	254ec <__assert_fail@plt+0x13d8c>
   255c4:	ldr	r4, [fp, #12]
   255c8:	cmp	r5, r4
   255cc:	bge	25bb0 <__assert_fail@plt+0x14450>
   255d0:	ldr	r7, [sp, #24]
   255d4:	ldr	sl, [sp, #20]
   255d8:	ldr	r4, [fp, #16]
   255dc:	add	r8, sp, #48	; 0x30
   255e0:	mov	r0, #0
   255e4:	str	r6, [sp, #40]	; 0x28
   255e8:	b	25618 <__assert_fail@plt+0x13eb8>
   255ec:	ldr	r1, [sp, #40]	; 0x28
   255f0:	ldr	r0, [r9, #100]	; 0x64
   255f4:	ldr	r5, [sp, #28]
   255f8:	str	r1, [r0, r5, lsl #2]
   255fc:	cmp	r1, #0
   25600:	ldr	r1, [sp, #32]
   25604:	mov	r0, #0
   25608:	addeq	r0, r1, #1
   2560c:	ldr	r1, [fp, #12]
   25610:	cmp	r5, r1
   25614:	beq	25bac <__assert_fail@plt+0x1444c>
   25618:	str	r0, [sp, #32]
   2561c:	ldr	r0, [r9, #120]	; 0x78
   25620:	ldr	r1, [sp, #32]
   25624:	cmp	r1, r0
   25628:	bgt	25bb0 <__assert_fail@plt+0x14450>
   2562c:	mov	r0, #0
   25630:	add	r1, r5, #1
   25634:	str	r0, [sp, #52]	; 0x34
   25638:	str	r1, [sp, #28]
   2563c:	ldr	r0, [r9, #100]	; 0x64
   25640:	ldr	r0, [r0, r1, lsl #2]
   25644:	cmp	r0, #0
   25648:	beq	25664 <__assert_fail@plt+0x13f04>
   2564c:	add	r1, r0, #4
   25650:	mov	r0, r8
   25654:	bl	22338 <__assert_fail@plt+0x10bd8>
   25658:	cmp	r0, #0
   2565c:	str	r0, [fp, #-52]	; 0xffffffcc
   25660:	bne	25c9c <__assert_fail@plt+0x1453c>
   25664:	ldr	r1, [sp, #40]	; 0x28
   25668:	cmp	r1, #0
   2566c:	beq	25a64 <__assert_fail@plt+0x14304>
   25670:	mov	r0, #0
   25674:	ldr	r8, [r9, #84]	; 0x54
   25678:	str	r0, [fp, #-32]	; 0xffffffe0
   2567c:	str	r0, [fp, #-44]	; 0xffffffd4
   25680:	str	r0, [fp, #-48]	; 0xffffffd0
   25684:	str	r0, [fp, #-40]	; 0xffffffd8
   25688:	ldr	r1, [r1, #20]
   2568c:	cmp	r1, #1
   25690:	blt	25a50 <__assert_fail@plt+0x142f0>
   25694:	ldr	r7, [sp, #40]	; 0x28
   25698:	mov	r4, #0
   2569c:	b	256d0 <__assert_fail@plt+0x13f70>
   256a0:	ldr	r1, [sp, #52]	; 0x34
   256a4:	cmp	r1, #0
   256a8:	bne	2585c <__assert_fail@plt+0x140fc>
   256ac:	ldr	r0, [sp, #56]	; 0x38
   256b0:	str	r6, [r0]
   256b4:	ldr	r0, [sp, #52]	; 0x34
   256b8:	add	r0, r0, #1
   256bc:	str	r0, [sp, #52]	; 0x34
   256c0:	ldr	r0, [r7, #20]
   256c4:	add	r4, r4, #1
   256c8:	cmp	r4, r0
   256cc:	bge	25a44 <__assert_fail@plt+0x142e4>
   256d0:	ldr	r0, [r7, #24]
   256d4:	ldr	sl, [r0, r4, lsl #2]
   256d8:	ldr	r0, [r8]
   256dc:	add	r1, r0, sl, lsl #3
   256e0:	ldrb	r1, [r1, #6]
   256e4:	tst	r1, #16
   256e8:	beq	257f8 <__assert_fail@plt+0x14098>
   256ec:	mov	r0, r8
   256f0:	mov	r1, sl
   256f4:	mov	r2, r9
   256f8:	mov	r3, r5
   256fc:	bl	26954 <__assert_fail@plt+0x151f4>
   25700:	mov	r9, r0
   25704:	cmp	r0, #2
   25708:	blt	257e4 <__assert_fail@plt+0x14084>
   2570c:	ldr	r0, [sp, #44]	; 0x2c
   25710:	ldr	r1, [r8, #12]
   25714:	add	r6, r9, r5
   25718:	ldr	r0, [r0, #100]	; 0x64
   2571c:	ldr	r1, [r1, sl, lsl #2]
   25720:	ldr	r0, [r0, r6, lsl #2]
   25724:	str	r1, [sp, #36]	; 0x24
   25728:	mov	r1, #0
   2572c:	str	r1, [fp, #-44]	; 0xffffffd4
   25730:	cmp	r0, #0
   25734:	beq	25750 <__assert_fail@plt+0x13ff0>
   25738:	add	r1, r0, #4
   2573c:	sub	r0, fp, #48	; 0x30
   25740:	bl	22338 <__assert_fail@plt+0x10bd8>
   25744:	cmp	r0, #0
   25748:	str	r0, [fp, #-32]	; 0xffffffe0
   2574c:	bne	25c8c <__assert_fail@plt+0x1452c>
   25750:	ldr	r2, [fp, #-48]	; 0xffffffd0
   25754:	cmp	r2, #0
   25758:	beq	25784 <__assert_fail@plt+0x14024>
   2575c:	ldr	r1, [fp, #-44]	; 0xffffffd4
   25760:	ldr	r7, [sp, #36]	; 0x24
   25764:	cmp	r1, #0
   25768:	bne	2594c <__assert_fail@plt+0x141ec>
   2576c:	ldr	r0, [fp, #-40]	; 0xffffffd8
   25770:	str	r7, [r0]
   25774:	ldr	r0, [fp, #-44]	; 0xffffffd4
   25778:	add	r0, r0, #1
   2577c:	str	r0, [fp, #-44]	; 0xffffffd4
   25780:	b	257ac <__assert_fail@plt+0x1404c>
   25784:	mov	r0, #1
   25788:	str	r0, [fp, #-44]	; 0xffffffd4
   2578c:	str	r0, [fp, #-48]	; 0xffffffd0
   25790:	mov	r0, #4
   25794:	bl	2e08c <__assert_fail@plt+0x1c92c>
   25798:	ldr	r1, [sp, #36]	; 0x24
   2579c:	cmp	r0, #0
   257a0:	str	r0, [fp, #-40]	; 0xffffffd8
   257a4:	beq	25cb4 <__assert_fail@plt+0x14554>
   257a8:	str	r1, [r0]
   257ac:	sub	r0, fp, #32
   257b0:	mov	r1, r8
   257b4:	sub	r2, fp, #48	; 0x30
   257b8:	bl	26624 <__assert_fail@plt+0x14ec4>
   257bc:	ldr	r2, [sp, #44]	; 0x2c
   257c0:	ldr	r1, [r2, #100]	; 0x64
   257c4:	str	r0, [r1, r6, lsl #2]
   257c8:	ldr	r0, [r2, #100]	; 0x64
   257cc:	ldr	r0, [r0, r6, lsl #2]
   257d0:	cmp	r0, #0
   257d4:	bne	257e4 <__assert_fail@plt+0x14084>
   257d8:	ldr	r7, [fp, #-32]	; 0xffffffe0
   257dc:	cmp	r7, #0
   257e0:	bne	25c90 <__assert_fail@plt+0x14530>
   257e4:	cmp	r9, #0
   257e8:	ldr	r9, [sp, #44]	; 0x2c
   257ec:	ldr	r7, [sp, #40]	; 0x28
   257f0:	bne	25810 <__assert_fail@plt+0x140b0>
   257f4:	ldr	r0, [r8]
   257f8:	add	r1, r0, sl, lsl #3
   257fc:	mov	r0, r9
   25800:	mov	r2, r5
   25804:	bl	26ce0 <__assert_fail@plt+0x15580>
   25808:	cmp	r0, #0
   2580c:	beq	256c0 <__assert_fail@plt+0x13f60>
   25810:	ldr	r0, [r8, #12]
   25814:	ldr	r2, [sp, #48]	; 0x30
   25818:	ldr	r6, [r0, sl, lsl #2]
   2581c:	cmp	r2, #0
   25820:	bne	256a0 <__assert_fail@plt+0x13f40>
   25824:	mov	r0, #1
   25828:	str	r0, [sp, #52]	; 0x34
   2582c:	str	r0, [sp, #48]	; 0x30
   25830:	mov	r0, #4
   25834:	bl	2e08c <__assert_fail@plt+0x1c92c>
   25838:	cmp	r0, #0
   2583c:	str	r0, [sp, #56]	; 0x38
   25840:	beq	25c78 <__assert_fail@plt+0x14518>
   25844:	str	r6, [r0]
   25848:	ldr	r0, [r7, #20]
   2584c:	add	r4, r4, #1
   25850:	cmp	r4, r0
   25854:	blt	256d0 <__assert_fail@plt+0x13f70>
   25858:	b	25a44 <__assert_fail@plt+0x142e4>
   2585c:	cmp	r2, r1
   25860:	bne	258c8 <__assert_fail@plt+0x14168>
   25864:	lsl	r0, r2, #1
   25868:	lsl	r1, r2, #3
   2586c:	str	r0, [sp, #48]	; 0x30
   25870:	ldr	r0, [sp, #56]	; 0x38
   25874:	bl	2e0bc <__assert_fail@plt+0x1c95c>
   25878:	cmp	r0, #0
   2587c:	beq	25c84 <__assert_fail@plt+0x14524>
   25880:	str	r0, [sp, #56]	; 0x38
   25884:	ldr	r1, [sp, #52]	; 0x34
   25888:	ldr	r2, [r0]
   2588c:	cmp	r2, r6
   25890:	bgt	258d8 <__assert_fail@plt+0x14178>
   25894:	add	r2, r0, r1, lsl #2
   25898:	ldr	r3, [r2, #-4]
   2589c:	cmp	r3, r6
   258a0:	ble	25944 <__assert_fail@plt+0x141e4>
   258a4:	sub	r1, r1, #2
   258a8:	str	r3, [r2]
   258ac:	sub	r1, r1, #1
   258b0:	ldr	r3, [r2, #-8]
   258b4:	sub	r2, r2, #4
   258b8:	cmp	r3, r6
   258bc:	bgt	258a8 <__assert_fail@plt+0x14148>
   258c0:	add	r1, r1, #2
   258c4:	b	25944 <__assert_fail@plt+0x141e4>
   258c8:	ldr	r0, [sp, #56]	; 0x38
   258cc:	ldr	r2, [r0]
   258d0:	cmp	r2, r6
   258d4:	ble	25894 <__assert_fail@plt+0x14134>
   258d8:	cmp	r1, #1
   258dc:	blt	25944 <__assert_fail@plt+0x141e4>
   258e0:	ands	r7, r1, #3
   258e4:	sub	ip, r1, #1
   258e8:	beq	2590c <__assert_fail@plt+0x141ac>
   258ec:	add	lr, r0, r1, lsl #2
   258f0:	mov	r3, lr
   258f4:	ldr	r2, [r3, #-4]!
   258f8:	subs	r7, r7, #1
   258fc:	sub	r1, r1, #1
   25900:	str	r2, [lr]
   25904:	mov	lr, r3
   25908:	bne	258f4 <__assert_fail@plt+0x14194>
   2590c:	cmp	ip, #3
   25910:	bcc	2593c <__assert_fail@plt+0x141dc>
   25914:	add	r2, r0, r1, lsl #2
   25918:	sub	r2, r2, #8
   2591c:	sub	lr, r2, #8
   25920:	sub	r1, r1, #4
   25924:	sub	sl, r2, #4
   25928:	sub	r2, r2, #16
   2592c:	ldm	lr, {r3, r7, ip, lr}
   25930:	cmp	r1, #0
   25934:	stm	sl, {r3, r7, ip, lr}
   25938:	bgt	2591c <__assert_fail@plt+0x141bc>
   2593c:	ldr	r7, [sp, #40]	; 0x28
   25940:	mov	r1, #0
   25944:	str	r6, [r0, r1, lsl #2]
   25948:	b	256b4 <__assert_fail@plt+0x13f54>
   2594c:	cmp	r2, r1
   25950:	bne	259b8 <__assert_fail@plt+0x14258>
   25954:	lsl	r0, r2, #1
   25958:	lsl	r1, r2, #3
   2595c:	str	r0, [fp, #-48]	; 0xffffffd0
   25960:	ldr	r0, [fp, #-40]	; 0xffffffd8
   25964:	bl	2e0bc <__assert_fail@plt+0x1c95c>
   25968:	cmp	r0, #0
   2596c:	beq	25c84 <__assert_fail@plt+0x14524>
   25970:	str	r0, [fp, #-40]	; 0xffffffd8
   25974:	ldr	r1, [fp, #-44]	; 0xffffffd4
   25978:	ldr	r2, [r0]
   2597c:	cmp	r2, r7
   25980:	bgt	259c8 <__assert_fail@plt+0x14268>
   25984:	add	r2, r0, r1, lsl #2
   25988:	ldr	r3, [r2, #-4]
   2598c:	cmp	r3, r7
   25990:	ble	25a3c <__assert_fail@plt+0x142dc>
   25994:	sub	r1, r1, #2
   25998:	str	r3, [r2]
   2599c:	sub	r1, r1, #1
   259a0:	ldr	r3, [r2, #-8]
   259a4:	sub	r2, r2, #4
   259a8:	cmp	r3, r7
   259ac:	bgt	25998 <__assert_fail@plt+0x14238>
   259b0:	add	r1, r1, #2
   259b4:	b	25a3c <__assert_fail@plt+0x142dc>
   259b8:	ldr	r0, [fp, #-40]	; 0xffffffd8
   259bc:	ldr	r2, [r0]
   259c0:	cmp	r2, r7
   259c4:	ble	25984 <__assert_fail@plt+0x14224>
   259c8:	cmp	r1, #1
   259cc:	blt	25a3c <__assert_fail@plt+0x142dc>
   259d0:	ands	r3, r1, #3
   259d4:	sub	ip, r1, #1
   259d8:	beq	259fc <__assert_fail@plt+0x1429c>
   259dc:	add	lr, r0, r1, lsl #2
   259e0:	mov	r7, lr
   259e4:	ldr	r2, [r7, #-4]!
   259e8:	subs	r3, r3, #1
   259ec:	sub	r1, r1, #1
   259f0:	str	r2, [lr]
   259f4:	mov	lr, r7
   259f8:	bne	259e4 <__assert_fail@plt+0x14284>
   259fc:	cmp	ip, #3
   25a00:	bcc	25a34 <__assert_fail@plt+0x142d4>
   25a04:	add	r2, r0, r1, lsl #2
   25a08:	sub	r2, r2, #8
   25a0c:	sub	lr, r2, #8
   25a10:	sub	r1, r1, #4
   25a14:	ldm	lr, {r3, r7, ip, lr}
   25a18:	cmp	r1, #0
   25a1c:	str	r3, [r2, #-4]
   25a20:	str	r7, [r2]
   25a24:	str	ip, [r2, #4]
   25a28:	str	lr, [r2, #8]
   25a2c:	sub	r2, r2, #16
   25a30:	bgt	25a0c <__assert_fail@plt+0x142ac>
   25a34:	ldr	r7, [sp, #36]	; 0x24
   25a38:	mov	r1, #0
   25a3c:	str	r7, [r0, r1, lsl #2]
   25a40:	b	25774 <__assert_fail@plt+0x14014>
   25a44:	ldr	r0, [fp, #-40]	; 0xffffffd8
   25a48:	ldr	r7, [sp, #24]
   25a4c:	ldr	sl, [sp, #20]
   25a50:	bl	144c0 <__assert_fail@plt+0x2d60>
   25a54:	ldr	r4, [fp, #16]
   25a58:	mov	r0, #0
   25a5c:	add	r8, sp, #48	; 0x30
   25a60:	str	r0, [fp, #-52]	; 0xffffffcc
   25a64:	ldr	r0, [sp, #52]	; 0x34
   25a68:	cmp	r0, #0
   25a6c:	beq	25ab4 <__assert_fail@plt+0x14354>
   25a70:	mov	r0, r7
   25a74:	mov	r1, r8
   25a78:	mov	r2, sl
   25a7c:	mov	r3, r4
   25a80:	bl	25de4 <__assert_fail@plt+0x14684>
   25a84:	cmp	r0, #0
   25a88:	str	r0, [fp, #-52]	; 0xffffffcc
   25a8c:	bne	25c9c <__assert_fail@plt+0x1453c>
   25a90:	ldr	r2, [sp, #28]
   25a94:	mov	r0, r9
   25a98:	mov	r1, r8
   25a9c:	mov	r3, sl
   25aa0:	str	r4, [sp]
   25aa4:	bl	25f2c <__assert_fail@plt+0x147cc>
   25aa8:	cmp	r0, #0
   25aac:	str	r0, [fp, #-52]	; 0xffffffcc
   25ab0:	bne	25c9c <__assert_fail@plt+0x1453c>
   25ab4:	cmn	r5, #1
   25ab8:	ble	25af0 <__assert_fail@plt+0x14390>
   25abc:	ldr	r0, [r9, #48]	; 0x30
   25ac0:	cmp	r0, r5
   25ac4:	beq	25b7c <__assert_fail@plt+0x1441c>
   25ac8:	ldr	r0, [r9, #80]	; 0x50
   25acc:	cmp	r0, #2
   25ad0:	blt	25af8 <__assert_fail@plt+0x14398>
   25ad4:	ldr	r0, [r9, #8]
   25ad8:	ldr	r6, [r0, r5, lsl #2]
   25adc:	cmn	r6, #1
   25ae0:	bne	25b28 <__assert_fail@plt+0x143c8>
   25ae4:	sub	r5, r5, #1
   25ae8:	cmn	r5, #1
   25aec:	bne	25ad8 <__assert_fail@plt+0x14378>
   25af0:	ldr	r3, [r9, #60]	; 0x3c
   25af4:	b	25b50 <__assert_fail@plt+0x143f0>
   25af8:	ldr	r0, [r9, #4]
   25afc:	ldr	r1, [r9, #68]	; 0x44
   25b00:	mov	r3, #1
   25b04:	ldrb	r0, [r0, r5]
   25b08:	ubfx	r2, r0, #5, #3
   25b0c:	ldr	r1, [r1, r2, lsl #2]
   25b10:	and	r2, r0, #31
   25b14:	tst	r1, r3, lsl r2
   25b18:	moveq	r3, #0
   25b1c:	cmpeq	r0, #10
   25b20:	bne	25b50 <__assert_fail@plt+0x143f0>
   25b24:	b	25b40 <__assert_fail@plt+0x143e0>
   25b28:	ldrb	r0, [r9, #78]	; 0x4e
   25b2c:	cmp	r0, #0
   25b30:	bne	25b8c <__assert_fail@plt+0x1442c>
   25b34:	mov	r3, #0
   25b38:	cmp	r6, #10
   25b3c:	bne	25b50 <__assert_fail@plt+0x143f0>
   25b40:	ldrb	r0, [r9, #77]	; 0x4d
   25b44:	cmp	r0, #0
   25b48:	movwne	r0, #1
   25b4c:	lsl	r3, r0, #1
   25b50:	sub	r0, fp, #52	; 0x34
   25b54:	mov	r1, r7
   25b58:	mov	r2, r8
   25b5c:	bl	22658 <__assert_fail@plt+0x10ef8>
   25b60:	cmp	r0, #0
   25b64:	str	r0, [sp, #40]	; 0x28
   25b68:	bne	255ec <__assert_fail@plt+0x13e8c>
   25b6c:	ldr	r0, [fp, #-52]	; 0xffffffcc
   25b70:	cmp	r0, #0
   25b74:	beq	255ec <__assert_fail@plt+0x13e8c>
   25b78:	b	25c9c <__assert_fail@plt+0x1453c>
   25b7c:	ldr	r0, [r9, #88]	; 0x58
   25b80:	and	r0, r0, #2
   25b84:	eor	r3, r0, #10
   25b88:	b	25b50 <__assert_fail@plt+0x143f0>
   25b8c:	mov	r0, r6
   25b90:	bl	1164c <iswalnum@plt>
   25b94:	mov	r3, #1
   25b98:	cmp	r6, #95	; 0x5f
   25b9c:	beq	25b50 <__assert_fail@plt+0x143f0>
   25ba0:	cmp	r0, #0
   25ba4:	beq	25b34 <__assert_fail@plt+0x143d4>
   25ba8:	b	25b50 <__assert_fail@plt+0x143f0>
   25bac:	ldr	r5, [fp, #12]
   25bb0:	ldr	r0, [sp, #56]	; 0x38
   25bb4:	bl	144c0 <__assert_fail@plt+0x2d60>
   25bb8:	ldr	r0, [r9, #100]	; 0x64
   25bbc:	ldr	r1, [fp, #12]
   25bc0:	mov	sl, #1
   25bc4:	ldr	r1, [r0, r1, lsl #2]
   25bc8:	ldr	r0, [sp, #16]
   25bcc:	str	r5, [r0]
   25bd0:	ldr	r0, [sp, #12]
   25bd4:	cmp	r1, #0
   25bd8:	addne	r1, r1, #4
   25bdc:	str	r0, [r9, #40]	; 0x28
   25be0:	ldr	r0, [sp, #8]
   25be4:	str	r0, [r9, #100]	; 0x64
   25be8:	beq	25c44 <__assert_fail@plt+0x144e4>
   25bec:	ldr	r2, [r1, #4]
   25bf0:	cmp	r2, #1
   25bf4:	blt	25c50 <__assert_fail@plt+0x144f0>
   25bf8:	ldr	r0, [fp, #8]
   25bfc:	ldr	r1, [r1, #8]
   25c00:	subs	r2, r2, #1
   25c04:	mov	sl, #0
   25c08:	mov	r3, #0
   25c0c:	beq	25c38 <__assert_fail@plt+0x144d8>
   25c10:	mov	r3, #0
   25c14:	mov	r7, #1
   25c18:	add	r5, r3, r2
   25c1c:	lsr	r4, r5, #1
   25c20:	ldr	r6, [r1, r4, lsl #2]
   25c24:	cmp	r6, r0
   25c28:	addlt	r3, r7, r5, lsr #1
   25c2c:	movge	r2, r4
   25c30:	cmp	r3, r2
   25c34:	bcc	25c18 <__assert_fail@plt+0x144b8>
   25c38:	ldr	r1, [r1, r3, lsl #2]
   25c3c:	cmp	r1, r0
   25c40:	movne	sl, #1
   25c44:	mov	r0, sl
   25c48:	sub	sp, fp, #28
   25c4c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   25c50:	mov	sl, #1
   25c54:	mov	r0, sl
   25c58:	sub	sp, fp, #28
   25c5c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   25c60:	mov	r0, #0
   25c64:	str	r0, [sp, #52]	; 0x34
   25c68:	str	r0, [sp, #48]	; 0x30
   25c6c:	str	r0, [sp, #56]	; 0x38
   25c70:	str	r0, [fp, #-52]	; 0xffffffcc
   25c74:	b	25514 <__assert_fail@plt+0x13db4>
   25c78:	mov	r0, #0
   25c7c:	str	r0, [sp, #48]	; 0x30
   25c80:	str	r0, [sp, #52]	; 0x34
   25c84:	mov	r7, #12
   25c88:	b	25c90 <__assert_fail@plt+0x14530>
   25c8c:	mov	r7, r0
   25c90:	ldr	r0, [fp, #-40]	; 0xffffffd8
   25c94:	bl	144c0 <__assert_fail@plt+0x2d60>
   25c98:	str	r7, [fp, #-52]	; 0xffffffcc
   25c9c:	ldr	r0, [sp, #56]	; 0x38
   25ca0:	bl	144c0 <__assert_fail@plt+0x2d60>
   25ca4:	ldr	sl, [fp, #-52]	; 0xffffffcc
   25ca8:	mov	r0, sl
   25cac:	sub	sp, fp, #28
   25cb0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   25cb4:	mov	r0, #0
   25cb8:	mov	r7, #12
   25cbc:	str	r0, [fp, #-48]	; 0xffffffd0
   25cc0:	str	r0, [fp, #-44]	; 0xffffffd4
   25cc4:	b	25c94 <__assert_fail@plt+0x14534>
   25cc8:	mvn	r1, #-2147483648	; 0x80000000
   25ccc:	mov	sl, #12
   25cd0:	sub	r1, r1, r4
   25cd4:	cmp	r1, r2
   25cd8:	ble	25c44 <__assert_fail@plt+0x144e4>
   25cdc:	add	r8, r2, #1
   25ce0:	str	lr, [sp, #40]	; 0x28
   25ce4:	add	r5, r8, r4
   25ce8:	cmn	r5, #-1073741823	; 0xc0000001
   25cec:	bhi	25c44 <__assert_fail@plt+0x144e4>
   25cf0:	ldr	r0, [ip, #8]
   25cf4:	lsl	r1, r5, #2
   25cf8:	mov	r6, ip
   25cfc:	bl	2e0bc <__assert_fail@plt+0x1c95c>
   25d00:	cmp	r0, #0
   25d04:	beq	25c44 <__assert_fail@plt+0x144e4>
   25d08:	str	r5, [r6, #4]
   25d0c:	str	r0, [r6, #8]
   25d10:	add	r0, r0, r4, lsl #2
   25d14:	lsl	r2, r8, #2
   25d18:	mov	r1, #0
   25d1c:	bl	11670 <memset@plt>
   25d20:	ldr	r0, [sp, #44]	; 0x2c
   25d24:	ldr	r7, [sp, #24]
   25d28:	ldr	sl, [sp, #20]
   25d2c:	ldr	lr, [sp, #40]	; 0x28
   25d30:	mov	ip, r6
   25d34:	b	25360 <__assert_fail@plt+0x13c00>
   25d38:	ldr	r8, [r0, #60]	; 0x3c
   25d3c:	cmp	r5, r9
   25d40:	str	ip, [sp, #16]
   25d44:	beq	2548c <__assert_fail@plt+0x13d2c>
   25d48:	b	253e0 <__assert_fail@plt+0x13c80>
   25d4c:	and	r0, r1, #2
   25d50:	eor	r8, r0, #10
   25d54:	cmp	r5, r9
   25d58:	str	ip, [sp, #16]
   25d5c:	beq	2548c <__assert_fail@plt+0x13d2c>
   25d60:	b	253e0 <__assert_fail@plt+0x13c80>
   25d64:	mov	sl, r0
   25d68:	ldr	r0, [sp, #56]	; 0x38
   25d6c:	bl	144c0 <__assert_fail@plt+0x2d60>
   25d70:	mov	r0, sl
   25d74:	sub	sp, fp, #28
   25d78:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   25d7c:	mov	r0, #0
   25d80:	mov	sl, #12
   25d84:	str	r0, [sp, #48]	; 0x30
   25d88:	str	r0, [sp, #52]	; 0x34
   25d8c:	str	sl, [fp, #-52]	; 0xffffffcc
   25d90:	mov	r0, sl
   25d94:	sub	sp, fp, #28
   25d98:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   25d9c:	mov	r0, r6
   25da0:	str	lr, [sp, #40]	; 0x28
   25da4:	mov	r4, ip
   25da8:	bl	1164c <iswalnum@plt>
   25dac:	mov	r8, #1
   25db0:	cmp	r6, #95	; 0x5f
   25db4:	beq	25dcc <__assert_fail@plt+0x1466c>
   25db8:	ldr	lr, [sp, #40]	; 0x28
   25dbc:	cmp	r0, #0
   25dc0:	mov	ip, r4
   25dc4:	beq	25460 <__assert_fail@plt+0x13d00>
   25dc8:	b	25480 <__assert_fail@plt+0x13d20>
   25dcc:	ldr	lr, [sp, #40]	; 0x28
   25dd0:	mov	ip, r4
   25dd4:	cmp	r5, r9
   25dd8:	str	ip, [sp, #16]
   25ddc:	beq	2548c <__assert_fail@plt+0x13d2c>
   25de0:	b	253e0 <__assert_fail@plt+0x13c80>
   25de4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   25de8:	add	fp, sp, #28
   25dec:	sub	sp, sp, #20
   25df0:	str	r0, [sp, #4]
   25df4:	ldr	r0, [r1, #4]
   25df8:	mov	sl, r1
   25dfc:	mov	r1, #0
   25e00:	mov	r5, r3
   25e04:	mov	r8, r2
   25e08:	str	r1, [sp, #12]
   25e0c:	str	r0, [sp, #8]
   25e10:	lsl	r0, r0, #2
   25e14:	bl	2e08c <__assert_fail@plt+0x1c92c>
   25e18:	cmp	r0, #0
   25e1c:	str	r0, [sp, #16]
   25e20:	beq	25f1c <__assert_fail@plt+0x147bc>
   25e24:	ldr	r0, [sl, #4]
   25e28:	cmp	r0, #1
   25e2c:	blt	25edc <__assert_fail@plt+0x1477c>
   25e30:	mov	r9, #0
   25e34:	ldr	r0, [sl, #8]
   25e38:	ldr	r1, [sp, #4]
   25e3c:	ldr	r2, [r0, r9, lsl #2]
   25e40:	ldr	r1, [r1, #24]
   25e44:	add	r0, r2, r2, lsl #1
   25e48:	add	r1, r1, r0, lsl #2
   25e4c:	ldr	r0, [r1, #4]
   25e50:	cmp	r0, #1
   25e54:	blt	25ebc <__assert_fail@plt+0x1475c>
   25e58:	ldr	r7, [sp, #4]
   25e5c:	ldr	r3, [r1, #8]
   25e60:	ldr	r7, [r7]
   25e64:	b	25e74 <__assert_fail@plt+0x14714>
   25e68:	add	r3, r3, #4
   25e6c:	subs	r0, r0, #1
   25e70:	beq	25ebc <__assert_fail@plt+0x1475c>
   25e74:	ldr	r6, [r3]
   25e78:	add	r4, r7, r6, lsl #3
   25e7c:	ldrb	r4, [r4, #4]
   25e80:	cmp	r4, r5
   25e84:	bne	25e68 <__assert_fail@plt+0x14708>
   25e88:	ldr	r4, [r7, r6, lsl #3]
   25e8c:	cmp	r4, r8
   25e90:	bne	25e68 <__assert_fail@plt+0x14708>
   25e94:	cmn	r6, #1
   25e98:	beq	25ebc <__assert_fail@plt+0x1475c>
   25e9c:	ldr	r0, [sp, #4]
   25ea0:	add	r1, sp, #8
   25ea4:	mov	r3, r8
   25ea8:	str	r5, [sp]
   25eac:	bl	264e0 <__assert_fail@plt+0x14d80>
   25eb0:	cmp	r0, #0
   25eb4:	beq	25ecc <__assert_fail@plt+0x1476c>
   25eb8:	b	25f04 <__assert_fail@plt+0x147a4>
   25ebc:	add	r0, sp, #8
   25ec0:	bl	22338 <__assert_fail@plt+0x10bd8>
   25ec4:	cmp	r0, #0
   25ec8:	bne	25f04 <__assert_fail@plt+0x147a4>
   25ecc:	ldr	r0, [sl, #4]
   25ed0:	add	r9, r9, #1
   25ed4:	cmp	r9, r0
   25ed8:	blt	25e34 <__assert_fail@plt+0x146d4>
   25edc:	ldr	r0, [sl, #8]
   25ee0:	bl	144c0 <__assert_fail@plt+0x2d60>
   25ee4:	vldr	d16, [sp, #8]
   25ee8:	ldr	r0, [sp, #16]
   25eec:	mov	r7, #0
   25ef0:	str	r0, [sl, #8]
   25ef4:	vstr	d16, [sl]
   25ef8:	mov	r0, r7
   25efc:	sub	sp, fp, #28
   25f00:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   25f04:	mov	r7, r0
   25f08:	ldr	r0, [sp, #16]
   25f0c:	bl	144c0 <__assert_fail@plt+0x2d60>
   25f10:	mov	r0, r7
   25f14:	sub	sp, fp, #28
   25f18:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   25f1c:	mov	r7, #12
   25f20:	mov	r0, r7
   25f24:	sub	sp, fp, #28
   25f28:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   25f2c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   25f30:	add	fp, sp, #28
   25f34:	sub	sp, sp, #52	; 0x34
   25f38:	ldr	ip, [r0, #108]	; 0x6c
   25f3c:	mov	lr, r1
   25f40:	ldr	r1, [r0, #84]	; 0x54
   25f44:	str	r0, [sp, #24]
   25f48:	mov	sl, r2
   25f4c:	mov	r8, #0
   25f50:	mov	r0, #0
   25f54:	cmp	ip, #1
   25f58:	str	r1, [sp, #28]
   25f5c:	blt	25fa0 <__assert_fail@plt+0x14840>
   25f60:	ldr	r0, [sp, #24]
   25f64:	mov	r7, #1
   25f68:	mov	r1, ip
   25f6c:	ldr	r2, [r0, #116]	; 0x74
   25f70:	mov	r0, #0
   25f74:	add	r6, r1, r0
   25f78:	add	r6, r6, r6, lsr #31
   25f7c:	asr	r4, r6, #1
   25f80:	add	r5, r4, r4, lsl #1
   25f84:	add	r5, r2, r5, lsl #3
   25f88:	ldr	r5, [r5, #4]
   25f8c:	cmp	r5, sl
   25f90:	addlt	r0, r7, r6, asr #1
   25f94:	movge	r1, r4
   25f98:	cmp	r0, r1
   25f9c:	blt	25f74 <__assert_fail@plt+0x14814>
   25fa0:	cmp	r0, ip
   25fa4:	bge	264c4 <__assert_fail@plt+0x14d64>
   25fa8:	cmn	r0, #1
   25fac:	beq	264c4 <__assert_fail@plt+0x14d64>
   25fb0:	ldr	r1, [sp, #24]
   25fb4:	add	r0, r0, r0, lsl #1
   25fb8:	str	r0, [sp, #8]
   25fbc:	ldr	r1, [r1, #116]	; 0x74
   25fc0:	add	r0, r1, r0, lsl #3
   25fc4:	ldr	r0, [r0, #4]
   25fc8:	cmp	r0, sl
   25fcc:	bne	264c4 <__assert_fail@plt+0x14d64>
   25fd0:	str	r3, [sp, #12]
   25fd4:	mov	r9, #1
   25fd8:	str	lr, [sp, #16]
   25fdc:	ldr	r0, [sp, #8]
   25fe0:	add	r0, r1, r0, lsl #3
   25fe4:	mov	r8, r0
   25fe8:	ldr	r0, [lr, #4]
   25fec:	cmp	r0, #1
   25ff0:	bge	260a4 <__assert_fail@plt+0x14944>
   25ff4:	b	26084 <__assert_fail@plt+0x14924>
   25ff8:	mov	r0, #4
   25ffc:	str	r9, [sp, #36]	; 0x24
   26000:	mov	r4, r1
   26004:	str	r9, [sp, #32]
   26008:	bl	2e08c <__assert_fail@plt+0x1c92c>
   2600c:	cmp	r0, #0
   26010:	str	r0, [sp, #40]	; 0x28
   26014:	beq	26338 <__assert_fail@plt+0x14bd8>
   26018:	str	r4, [r0]
   2601c:	mov	r0, #0
   26020:	str	r0, [fp, #-32]	; 0xffffffe0
   26024:	ldr	r1, [sp, #28]
   26028:	sub	r0, fp, #32
   2602c:	add	r2, sp, #32
   26030:	bl	26624 <__assert_fail@plt+0x14ec4>
   26034:	ldr	r4, [sp, #24]
   26038:	ldr	r1, [r4, #100]	; 0x64
   2603c:	str	r0, [r1, r7, lsl #2]
   26040:	ldr	r0, [sp, #40]	; 0x28
   26044:	bl	144c0 <__assert_fail@plt+0x2d60>
   26048:	ldr	r0, [r4, #100]	; 0x64
   2604c:	ldr	r1, [fp, #-32]	; 0xffffffe0
   26050:	ldr	r0, [r0, r7, lsl #2]
   26054:	cmp	r1, #0
   26058:	mov	r2, r1
   2605c:	movwne	r2, #1
   26060:	clz	r0, r0
   26064:	lsr	r0, r0, #5
   26068:	ands	r0, r0, r2
   2606c:	ldreq	r1, [sp, #20]
   26070:	str	r1, [sp, #20]
   26074:	ldr	lr, [sp, #16]
   26078:	cmp	r0, #0
   2607c:	cmpne	r0, #4
   26080:	bne	264ac <__assert_fail@plt+0x14d4c>
   26084:	ldrb	r1, [r8, #20]
   26088:	add	r0, r8, #24
   2608c:	cmp	r1, #0
   26090:	beq	264c0 <__assert_fail@plt+0x14d60>
   26094:	mov	r8, r0
   26098:	ldr	r0, [lr, #4]
   2609c:	cmp	r0, #1
   260a0:	blt	26084 <__assert_fail@plt+0x14924>
   260a4:	subs	r6, r0, #1
   260a8:	ldr	r2, [r8]
   260ac:	ldr	r0, [lr, #8]
   260b0:	mov	r3, #0
   260b4:	beq	260dc <__assert_fail@plt+0x1497c>
   260b8:	mov	r1, r6
   260bc:	add	r7, r3, r1
   260c0:	lsr	r5, r7, #1
   260c4:	ldr	r4, [r0, r5, lsl #2]
   260c8:	cmp	r4, r2
   260cc:	addlt	r3, r9, r7, lsr #1
   260d0:	movge	r1, r5
   260d4:	cmp	r3, r1
   260d8:	bcc	260bc <__assert_fail@plt+0x1495c>
   260dc:	ldr	r1, [r0, r3, lsl #2]
   260e0:	cmp	r1, r2
   260e4:	bne	26084 <__assert_fail@plt+0x14924>
   260e8:	ldr	r3, [r8, #12]
   260ec:	ldr	r1, [r8, #8]
   260f0:	add	r3, r3, sl
   260f4:	sub	r7, r3, r1
   260f8:	cmp	r7, sl
   260fc:	bne	261f4 <__assert_fail@plt+0x14a94>
   26100:	ldr	r1, [sp, #28]
   26104:	add	r2, r2, r2, lsl #1
   26108:	cmp	r6, #0
   2610c:	ldr	r1, [r1, #20]
   26110:	add	r1, r1, r2, lsl #2
   26114:	mov	r2, #0
   26118:	ldr	r1, [r1, #8]
   2611c:	ldr	r4, [r1]
   26120:	beq	26144 <__assert_fail@plt+0x149e4>
   26124:	add	r1, r2, r6
   26128:	lsr	r3, r1, #1
   2612c:	ldr	r7, [r0, r3, lsl #2]
   26130:	cmp	r7, r4
   26134:	addlt	r2, r9, r1, lsr #1
   26138:	movge	r6, r3
   2613c:	cmp	r2, r6
   26140:	bcc	26124 <__assert_fail@plt+0x149c4>
   26144:	ldr	r1, [r0, r2, lsl #2]
   26148:	mov	r0, #4
   2614c:	cmp	r1, r4
   26150:	beq	26078 <__assert_fail@plt+0x14918>
   26154:	mov	r0, #4
   26158:	str	r9, [sp, #36]	; 0x24
   2615c:	str	r9, [sp, #32]
   26160:	bl	2e08c <__assert_fail@plt+0x1c92c>
   26164:	cmp	r0, #0
   26168:	str	r0, [sp, #40]	; 0x28
   2616c:	beq	26324 <__assert_fail@plt+0x14bc4>
   26170:	mov	r6, #0
   26174:	str	r4, [r0]
   26178:	ldr	r0, [sp, #28]
   2617c:	ldr	r2, [sp, #12]
   26180:	ldr	r3, [fp, #8]
   26184:	add	r4, sp, #32
   26188:	str	r6, [fp, #-32]	; 0xffffffe0
   2618c:	mov	r1, r4
   26190:	bl	25de4 <__assert_fail@plt+0x14684>
   26194:	ldr	r5, [sp, #16]
   26198:	mov	r7, r0
   2619c:	mov	r1, r4
   261a0:	mov	r0, r5
   261a4:	bl	22338 <__assert_fail@plt+0x10bd8>
   261a8:	mov	r4, r0
   261ac:	ldr	r0, [sp, #40]	; 0x28
   261b0:	bl	144c0 <__assert_fail@plt+0x2d60>
   261b4:	orr	r0, r7, r6
   261b8:	mov	lr, r5
   261bc:	orrs	r0, r0, r4
   261c0:	mov	r0, #2
   261c4:	beq	26078 <__assert_fail@plt+0x14918>
   261c8:	cmp	r7, #0
   261cc:	mov	r0, #1
   261d0:	movne	r4, r7
   261d4:	cmp	r6, #0
   261d8:	movne	r4, r6
   261dc:	str	r4, [fp, #-32]	; 0xffffffe0
   261e0:	str	r4, [sp, #20]
   261e4:	cmp	r0, #0
   261e8:	cmpne	r0, #4
   261ec:	beq	26084 <__assert_fail@plt+0x14924>
   261f0:	b	264ac <__assert_fail@plt+0x14d4c>
   261f4:	ldr	r0, [sp, #24]
   261f8:	ldr	r0, [r0, #100]	; 0x64
   261fc:	ldr	r5, [r0, r7, lsl #2]
   26200:	ldr	r0, [sp, #28]
   26204:	ldr	r0, [r0, #12]
   26208:	cmp	r5, #0
   2620c:	ldr	r1, [r0, r2, lsl #2]
   26210:	beq	25ff8 <__assert_fail@plt+0x14898>
   26214:	ldr	ip, [r5, #8]
   26218:	cmp	ip, #0
   2621c:	ble	262dc <__assert_fail@plt+0x14b7c>
   26220:	ldr	r0, [r5, #12]
   26224:	subs	r3, ip, #1
   26228:	mov	r2, #0
   2622c:	str	r7, [sp, #4]
   26230:	beq	26254 <__assert_fail@plt+0x14af4>
   26234:	add	r6, r2, r3
   26238:	lsr	r7, r6, #1
   2623c:	ldr	r4, [r0, r7, lsl #2]
   26240:	cmp	r4, r1
   26244:	addlt	r2, r9, r6, lsr #1
   26248:	movge	r3, r7
   2624c:	cmp	r2, r3
   26250:	bcc	26234 <__assert_fail@plt+0x14ad4>
   26254:	ldr	r2, [r0, r2, lsl #2]
   26258:	mov	r0, #4
   2625c:	cmp	r2, r1
   26260:	beq	26078 <__assert_fail@plt+0x14918>
   26264:	ldr	r7, [sp, #4]
   26268:	mov	r4, r1
   2626c:	cmp	ip, #1
   26270:	str	ip, [sp, #36]	; 0x24
   26274:	blt	262e4 <__assert_fail@plt+0x14b84>
   26278:	lsl	r0, ip, #2
   2627c:	str	ip, [sp, #32]
   26280:	bl	2e08c <__assert_fail@plt+0x1c92c>
   26284:	cmp	r0, #0
   26288:	str	r0, [sp, #40]	; 0x28
   2628c:	beq	2638c <__assert_fail@plt+0x14c2c>
   26290:	ldr	r2, [r5, #8]
   26294:	ldr	r1, [r5, #12]
   26298:	mov	r5, r0
   2629c:	lsl	r2, r2, #2
   262a0:	bl	11484 <memcpy@plt>
   262a4:	ldr	r1, [sp, #32]
   262a8:	mov	r6, #0
   262ac:	str	r6, [fp, #-32]	; 0xffffffe0
   262b0:	cmp	r1, #0
   262b4:	beq	262f8 <__assert_fail@plt+0x14b98>
   262b8:	ldr	r0, [sp, #36]	; 0x24
   262bc:	cmp	r0, #0
   262c0:	bne	263a0 <__assert_fail@plt+0x14c40>
   262c4:	str	r4, [r5]
   262c8:	str	r9, [sp, #36]	; 0x24
   262cc:	mov	r6, #0
   262d0:	cmp	r6, #0
   262d4:	beq	26024 <__assert_fail@plt+0x148c4>
   262d8:	b	26364 <__assert_fail@plt+0x14c04>
   262dc:	mov	r4, r1
   262e0:	str	ip, [sp, #36]	; 0x24
   262e4:	mov	r6, #0
   262e8:	str	r6, [sp, #36]	; 0x24
   262ec:	str	r6, [sp, #32]
   262f0:	str	r6, [sp, #40]	; 0x28
   262f4:	str	r6, [fp, #-32]	; 0xffffffe0
   262f8:	mov	r0, #4
   262fc:	str	r9, [sp, #36]	; 0x24
   26300:	str	r9, [sp, #32]
   26304:	bl	2e08c <__assert_fail@plt+0x1c92c>
   26308:	cmp	r0, #0
   2630c:	str	r0, [sp, #40]	; 0x28
   26310:	beq	26358 <__assert_fail@plt+0x14bf8>
   26314:	str	r4, [r0]
   26318:	cmp	r6, #0
   2631c:	beq	26024 <__assert_fail@plt+0x148c4>
   26320:	b	26364 <__assert_fail@plt+0x14c04>
   26324:	mov	r0, #0
   26328:	mov	r6, #12
   2632c:	str	r0, [sp, #32]
   26330:	str	r0, [sp, #36]	; 0x24
   26334:	b	26178 <__assert_fail@plt+0x14a18>
   26338:	mov	r0, #0
   2633c:	mov	r1, #12
   26340:	str	r0, [sp, #32]
   26344:	str	r0, [sp, #36]	; 0x24
   26348:	mov	r0, #12
   2634c:	str	r1, [fp, #-32]	; 0xffffffe0
   26350:	str	r0, [sp, #20]
   26354:	b	26384 <__assert_fail@plt+0x14c24>
   26358:	mov	r0, #0
   2635c:	str	r0, [sp, #32]
   26360:	str	r0, [sp, #36]	; 0x24
   26364:	clz	r0, r6
   26368:	lsr	r4, r0, #5
   2636c:	ldr	r0, [sp, #40]	; 0x28
   26370:	bl	144c0 <__assert_fail@plt+0x2d60>
   26374:	cmp	r4, #0
   26378:	movwne	r6, #12
   2637c:	str	r6, [sp, #20]
   26380:	str	r6, [fp, #-32]	; 0xffffffe0
   26384:	mov	r0, #1
   26388:	b	26074 <__assert_fail@plt+0x14914>
   2638c:	mov	r0, #0
   26390:	mov	r6, #12
   26394:	str	r0, [sp, #32]
   26398:	str	r0, [sp, #36]	; 0x24
   2639c:	b	262f4 <__assert_fail@plt+0x14b94>
   263a0:	cmp	r1, r0
   263a4:	bne	263d0 <__assert_fail@plt+0x14c70>
   263a8:	lsl	r0, r1, #1
   263ac:	lsl	r1, r1, #3
   263b0:	str	r0, [sp, #32]
   263b4:	mov	r0, r5
   263b8:	bl	2e0bc <__assert_fail@plt+0x1c95c>
   263bc:	cmp	r0, #0
   263c0:	beq	264a4 <__assert_fail@plt+0x14d44>
   263c4:	str	r0, [sp, #40]	; 0x28
   263c8:	mov	r5, r0
   263cc:	ldr	r0, [sp, #36]	; 0x24
   263d0:	ldr	r1, [r5]
   263d4:	cmp	r1, r4
   263d8:	ble	2644c <__assert_fail@plt+0x14cec>
   263dc:	cmp	r0, #1
   263e0:	blt	26480 <__assert_fail@plt+0x14d20>
   263e4:	ands	r2, r0, #3
   263e8:	sub	r1, r0, #1
   263ec:	beq	26410 <__assert_fail@plt+0x14cb0>
   263f0:	add	r6, r5, r0, lsl #2
   263f4:	mov	r3, r6
   263f8:	ldr	r7, [r3, #-4]!
   263fc:	subs	r2, r2, #1
   26400:	sub	r0, r0, #1
   26404:	str	r7, [r6]
   26408:	mov	r6, r3
   2640c:	bne	263f8 <__assert_fail@plt+0x14c98>
   26410:	cmp	r1, #3
   26414:	bcc	26444 <__assert_fail@plt+0x14ce4>
   26418:	add	r1, r5, r0, lsl #2
   2641c:	sub	r1, r1, #8
   26420:	ldr	r6, [r1, #4]
   26424:	ldmda	r1, {r2, r3, r7}
   26428:	sub	ip, r1, #4
   2642c:	sub	r0, r0, #4
   26430:	cmp	r0, #0
   26434:	stm	ip, {r2, r3, r7}
   26438:	str	r6, [r1, #8]
   2643c:	sub	r1, r1, #16
   26440:	bgt	26420 <__assert_fail@plt+0x14cc0>
   26444:	mov	r0, #0
   26448:	b	26480 <__assert_fail@plt+0x14d20>
   2644c:	add	r1, r5, r0, lsl #2
   26450:	ldr	r2, [r1, #-4]
   26454:	cmp	r2, r4
   26458:	ble	26480 <__assert_fail@plt+0x14d20>
   2645c:	sub	r0, r0, #2
   26460:	mov	r3, r4
   26464:	str	r2, [r1]
   26468:	sub	r0, r0, #1
   2646c:	ldr	r2, [r1, #-8]
   26470:	sub	r1, r1, #4
   26474:	cmp	r2, r3
   26478:	bgt	26464 <__assert_fail@plt+0x14d04>
   2647c:	add	r0, r0, #2
   26480:	str	r4, [r5, r0, lsl #2]
   26484:	ldr	r7, [sp, #4]
   26488:	mov	r6, #0
   2648c:	ldr	r0, [sp, #36]	; 0x24
   26490:	add	r0, r0, #1
   26494:	str	r0, [sp, #36]	; 0x24
   26498:	cmp	r6, #0
   2649c:	beq	26024 <__assert_fail@plt+0x148c4>
   264a0:	b	26364 <__assert_fail@plt+0x14c04>
   264a4:	mov	r6, #0
   264a8:	b	26364 <__assert_fail@plt+0x14c04>
   264ac:	cmp	r0, #2
   264b0:	bne	264d0 <__assert_fail@plt+0x14d70>
   264b4:	ldr	r0, [sp, #24]
   264b8:	ldr	r1, [r0, #116]	; 0x74
   264bc:	b	25fdc <__assert_fail@plt+0x1487c>
   264c0:	mov	r8, #0
   264c4:	mov	r0, r8
   264c8:	sub	sp, fp, #28
   264cc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   264d0:	ldr	r8, [sp, #20]
   264d4:	mov	r0, r8
   264d8:	sub	sp, fp, #28
   264dc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   264e0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   264e4:	add	fp, sp, #28
   264e8:	sub	sp, sp, #4
   264ec:	ldr	r4, [fp, #8]
   264f0:	mov	r9, r3
   264f4:	mov	r7, r2
   264f8:	mov	r8, r1
   264fc:	mov	sl, r0
   26500:	mov	r5, #1
   26504:	ldr	r0, [r8, #4]
   26508:	cmp	r0, #1
   2650c:	bge	26534 <__assert_fail@plt+0x14dd4>
   26510:	b	26578 <__assert_fail@plt+0x14e18>
   26514:	cmp	r2, #0
   26518:	beq	2660c <__assert_fail@plt+0x14eac>
   2651c:	add	r0, r0, r7, lsl #2
   26520:	ldr	r0, [r0, #8]
   26524:	ldr	r7, [r0]
   26528:	ldr	r0, [r8, #4]
   2652c:	cmp	r0, #1
   26530:	blt	26578 <__assert_fail@plt+0x14e18>
   26534:	subs	r2, r0, #1
   26538:	ldr	r0, [r8, #8]
   2653c:	mov	ip, r4
   26540:	mov	r1, #0
   26544:	beq	26568 <__assert_fail@plt+0x14e08>
   26548:	add	r3, r1, r2
   2654c:	lsr	r6, r3, #1
   26550:	ldr	r4, [r0, r6, lsl #2]
   26554:	cmp	r4, r7
   26558:	addlt	r1, r5, r3, lsr #1
   2655c:	movge	r2, r6
   26560:	cmp	r1, r2
   26564:	bcc	26548 <__assert_fail@plt+0x14de8>
   26568:	ldr	r0, [r0, r1, lsl #2]
   2656c:	mov	r4, ip
   26570:	cmp	r0, r7
   26574:	beq	2660c <__assert_fail@plt+0x14eac>
   26578:	ldr	r0, [sl]
   2657c:	add	r1, r0, r7, lsl #3
   26580:	ldrb	r1, [r1, #4]
   26584:	cmp	r1, r4
   26588:	bne	26598 <__assert_fail@plt+0x14e38>
   2658c:	ldr	r0, [r0, r7, lsl #3]
   26590:	cmp	r0, r9
   26594:	beq	265f0 <__assert_fail@plt+0x14e90>
   26598:	mov	r0, r8
   2659c:	mov	r1, r7
   265a0:	bl	224d8 <__assert_fail@plt+0x10d78>
   265a4:	cmp	r0, #0
   265a8:	beq	26618 <__assert_fail@plt+0x14eb8>
   265ac:	ldr	r0, [sl, #20]
   265b0:	add	r7, r7, r7, lsl #1
   265b4:	add	r1, r0, r7, lsl #2
   265b8:	ldr	r2, [r1, #4]
   265bc:	cmp	r2, #2
   265c0:	bne	26514 <__assert_fail@plt+0x14db4>
   265c4:	ldr	r0, [r1, #8]
   265c8:	mov	r1, r8
   265cc:	mov	r3, r9
   265d0:	ldr	r2, [r0, #4]
   265d4:	mov	r0, sl
   265d8:	str	r4, [sp]
   265dc:	bl	264e0 <__assert_fail@plt+0x14d80>
   265e0:	cmp	r0, #0
   265e4:	bne	26610 <__assert_fail@plt+0x14eb0>
   265e8:	ldr	r0, [sl, #20]
   265ec:	b	2651c <__assert_fail@plt+0x14dbc>
   265f0:	cmp	r4, #9
   265f4:	bne	2660c <__assert_fail@plt+0x14eac>
   265f8:	mov	r0, r8
   265fc:	mov	r1, r7
   26600:	bl	224d8 <__assert_fail@plt+0x10d78>
   26604:	cmp	r0, #0
   26608:	beq	26618 <__assert_fail@plt+0x14eb8>
   2660c:	mov	r0, #0
   26610:	sub	sp, fp, #28
   26614:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   26618:	mov	r0, #12
   2661c:	sub	sp, fp, #28
   26620:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   26624:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   26628:	add	fp, sp, #28
   2662c:	sub	sp, sp, #4
   26630:	ldr	r9, [r2, #4]
   26634:	cmp	r9, #0
   26638:	beq	26904 <__assert_fail@plt+0x151a4>
   2663c:	mov	r6, r2
   26640:	mov	r8, r1
   26644:	cmp	r9, #1
   26648:	mov	r7, r9
   2664c:	blt	26738 <__assert_fail@plt+0x14fd8>
   26650:	ldr	ip, [r6, #8]
   26654:	mov	sl, #0
   26658:	cmp	r9, #4
   2665c:	mov	r7, r9
   26660:	bcc	26720 <__assert_fail@plt+0x14fc0>
   26664:	mov	r3, #0
   26668:	bic	sl, r9, #3
   2666c:	mov	r1, #1
   26670:	str	r8, [sp]
   26674:	vdup.32	q8, r3
   26678:	sub	r4, sl, #4
   2667c:	add	r1, r1, r4, lsr #2
   26680:	cmp	r4, #12
   26684:	and	lr, r1, #3
   26688:	vmov.32	d16[0], r9
   2668c:	bcc	266e0 <__assert_fail@plt+0x14f80>
   26690:	sub	r5, r1, lr
   26694:	mov	r3, #0
   26698:	mov	r4, #64	; 0x40
   2669c:	mov	r7, ip
   266a0:	mov	r1, ip
   266a4:	vld1.32	{d18-d19}, [r1], r4
   266a8:	add	r8, r7, #16
   266ac:	add	r2, r7, #32
   266b0:	subs	r5, r5, #4
   266b4:	add	r3, r3, #16
   266b8:	vld1.32	{d20-d21}, [r8]
   266bc:	vadd.i32	q8, q9, q8
   266c0:	vld1.32	{d18-d19}, [r2]
   266c4:	add	r2, r7, #48	; 0x30
   266c8:	mov	r7, r1
   266cc:	vadd.i32	q8, q10, q8
   266d0:	vld1.32	{d20-d21}, [r2]
   266d4:	vadd.i32	q8, q9, q8
   266d8:	vadd.i32	q8, q10, q8
   266dc:	bne	266a4 <__assert_fail@plt+0x14f44>
   266e0:	cmp	lr, #0
   266e4:	beq	26700 <__assert_fail@plt+0x14fa0>
   266e8:	add	r1, ip, r3, lsl #2
   266ec:	rsb	r3, lr, #0
   266f0:	vld1.32	{d18-d19}, [r1]!
   266f4:	adds	r3, r3, #1
   266f8:	vadd.i32	q8, q9, q8
   266fc:	bcc	266f0 <__assert_fail@plt+0x14f90>
   26700:	vext.8	q9, q8, q8, #8
   26704:	ldr	r8, [sp]
   26708:	cmp	r9, sl
   2670c:	vadd.i32	q8, q8, q9
   26710:	vdup.32	q9, d16[1]
   26714:	vadd.i32	q8, q8, q9
   26718:	vmov.32	r7, d16[0]
   2671c:	beq	26738 <__assert_fail@plt+0x14fd8>
   26720:	add	r1, ip, sl, lsl #2
   26724:	sub	r2, r9, sl
   26728:	ldr	r3, [r1], #4
   2672c:	subs	r2, r2, #1
   26730:	add	r7, r3, r7
   26734:	bne	26728 <__assert_fail@plt+0x14fc8>
   26738:	ldr	r1, [r8, #68]	; 0x44
   2673c:	ldr	r2, [r8, #32]
   26740:	str	r0, [sp]
   26744:	and	r1, r1, r7
   26748:	add	r3, r1, r1, lsl #1
   2674c:	ldr	r1, [r2, r3, lsl #2]
   26750:	cmp	r1, #1
   26754:	blt	267d8 <__assert_fail@plt+0x15078>
   26758:	cmp	r6, #0
   2675c:	beq	267d8 <__assert_fail@plt+0x15078>
   26760:	add	r2, r2, r3, lsl #2
   26764:	sub	ip, r9, #1
   26768:	mov	r5, #0
   2676c:	ldr	lr, [r2, #8]
   26770:	ldr	r4, [lr, r5, lsl #2]
   26774:	ldr	r3, [r4]
   26778:	cmp	r7, r3
   2677c:	beq	2679c <__assert_fail@plt+0x1503c>
   26780:	add	r5, r5, #1
   26784:	cmp	r5, r1
   26788:	bge	267d8 <__assert_fail@plt+0x15078>
   2678c:	ldr	r4, [lr, r5, lsl #2]
   26790:	ldr	r3, [r4]
   26794:	cmp	r7, r3
   26798:	bne	26780 <__assert_fail@plt+0x15020>
   2679c:	ldr	r3, [r4, #8]
   267a0:	cmp	r3, r9
   267a4:	bne	26780 <__assert_fail@plt+0x15020>
   267a8:	mov	r3, ip
   267ac:	add	r0, r3, #1
   267b0:	cmp	r0, #1
   267b4:	blt	268f8 <__assert_fail@plt+0x15198>
   267b8:	ldr	r0, [r6, #8]
   267bc:	ldr	r2, [r4, #12]
   267c0:	ldr	r0, [r0, r3, lsl #2]
   267c4:	ldr	r2, [r2, r3, lsl #2]
   267c8:	sub	r3, r3, #1
   267cc:	cmp	r2, r0
   267d0:	beq	267ac <__assert_fail@plt+0x1504c>
   267d4:	b	26780 <__assert_fail@plt+0x15020>
   267d8:	mov	r0, #56	; 0x38
   267dc:	mov	r1, #1
   267e0:	bl	2e038 <__assert_fail@plt+0x1c8d8>
   267e4:	cmp	r0, #0
   267e8:	beq	26938 <__assert_fail@plt+0x151d8>
   267ec:	mov	r4, r0
   267f0:	ldr	r0, [r6, #4]
   267f4:	add	sl, r4, #4
   267f8:	cmp	r0, #1
   267fc:	str	r0, [r4, #8]
   26800:	blt	268c8 <__assert_fail@plt+0x15168>
   26804:	str	r0, [r4, #4]
   26808:	lsl	r0, r0, #2
   2680c:	bl	2e08c <__assert_fail@plt+0x1c92c>
   26810:	cmp	r0, #0
   26814:	str	r0, [r4, #12]
   26818:	beq	26924 <__assert_fail@plt+0x151c4>
   2681c:	ldmib	r6, {r5, r6}
   26820:	mov	r1, r6
   26824:	mov	r9, r8
   26828:	lsl	r2, r5, #2
   2682c:	bl	11484 <memcpy@plt>
   26830:	cmp	r5, #1
   26834:	str	sl, [r4, #40]	; 0x28
   26838:	blt	268e0 <__assert_fail@plt+0x15180>
   2683c:	movw	ip, #65280	; 0xff00
   26840:	ldr	sl, [r9]
   26844:	mov	lr, #32
   26848:	movt	ip, #3
   2684c:	add	r8, ip, #255	; 0xff
   26850:	b	26874 <__assert_fail@plt+0x15114>
   26854:	ldr	r0, [r1]
   26858:	tst	r0, ip
   2685c:	beq	26868 <__assert_fail@plt+0x15108>
   26860:	orr	r0, r3, #128	; 0x80
   26864:	strb	r0, [r4, #52]	; 0x34
   26868:	add	r6, r6, #4
   2686c:	subs	r5, r5, #1
   26870:	beq	268e0 <__assert_fail@plt+0x15180>
   26874:	ldr	r0, [r6]
   26878:	add	r1, sl, r0, lsl #3
   2687c:	ldr	r0, [r1, #4]!
   26880:	and	r3, r0, r8
   26884:	cmp	r3, #1
   26888:	beq	26868 <__assert_fail@plt+0x15108>
   2688c:	ldrb	r2, [r4, #52]	; 0x34
   26890:	and	r3, lr, r0, lsr #15
   26894:	uxtb	r0, r0
   26898:	cmp	r0, #12
   2689c:	orr	r3, r2, r3
   268a0:	strb	r3, [r4, #52]	; 0x34
   268a4:	beq	26860 <__assert_fail@plt+0x15100>
   268a8:	cmp	r0, #4
   268ac:	beq	268c0 <__assert_fail@plt+0x15160>
   268b0:	cmp	r0, #2
   268b4:	bne	26854 <__assert_fail@plt+0x150f4>
   268b8:	orr	r0, r3, #16
   268bc:	b	26864 <__assert_fail@plt+0x15104>
   268c0:	orr	r0, r3, #64	; 0x40
   268c4:	b	26864 <__assert_fail@plt+0x15104>
   268c8:	mov	r0, #0
   268cc:	mov	r9, r8
   268d0:	str	r0, [sl]
   268d4:	str	r0, [sl, #4]
   268d8:	str	r0, [sl, #8]
   268dc:	str	sl, [r4, #40]	; 0x28
   268e0:	mov	r0, r9
   268e4:	mov	r1, r4
   268e8:	mov	r2, r7
   268ec:	bl	230b8 <__assert_fail@plt+0x11958>
   268f0:	cmp	r0, #0
   268f4:	bne	26918 <__assert_fail@plt+0x151b8>
   268f8:	mov	r0, r4
   268fc:	sub	sp, fp, #28
   26900:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   26904:	mov	r4, #0
   26908:	str	r4, [r0]
   2690c:	mov	r0, r4
   26910:	sub	sp, fp, #28
   26914:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   26918:	mov	r0, r4
   2691c:	bl	1c0b0 <__assert_fail@plt+0xa950>
   26920:	b	26938 <__assert_fail@plt+0x151d8>
   26924:	mov	r0, #0
   26928:	str	r0, [r4, #4]
   2692c:	str	r0, [r4, #8]
   26930:	mov	r0, r4
   26934:	bl	144c0 <__assert_fail@plt+0x2d60>
   26938:	ldr	r1, [sp]
   2693c:	mov	r0, #12
   26940:	mov	r4, #0
   26944:	str	r0, [r1]
   26948:	mov	r0, r4
   2694c:	sub	sp, fp, #28
   26950:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   26954:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   26958:	add	fp, sp, #24
   2695c:	ldr	lr, [r0]
   26960:	add	r7, lr, r1, lsl #3
   26964:	ldrb	r9, [r7, #4]
   26968:	cmp	r9, #7
   2696c:	beq	26b6c <__assert_fail@plt+0x1540c>
   26970:	ldr	ip, [r2, #80]	; 0x50
   26974:	mov	r6, #1
   26978:	cmp	ip, #1
   2697c:	beq	269bc <__assert_fail@plt+0x1525c>
   26980:	ldr	r5, [r2, #28]
   26984:	add	r7, r3, #1
   26988:	cmp	r7, r5
   2698c:	bge	269bc <__assert_fail@plt+0x1525c>
   26990:	ldr	r6, [r2, #8]
   26994:	sub	r5, r5, r3
   26998:	add	r7, r6, r3, lsl #2
   2699c:	mov	r6, #1
   269a0:	ldr	r4, [r7, r6, lsl #2]
   269a4:	cmn	r4, #1
   269a8:	bne	269bc <__assert_fail@plt+0x1525c>
   269ac:	add	r6, r6, #1
   269b0:	cmp	r5, r6
   269b4:	bne	269a0 <__assert_fail@plt+0x15240>
   269b8:	mov	r6, r5
   269bc:	mov	r8, #0
   269c0:	cmp	r9, #5
   269c4:	bne	26a0c <__assert_fail@plt+0x152ac>
   269c8:	cmp	r6, #2
   269cc:	blt	26b3c <__assert_fail@plt+0x153dc>
   269d0:	ldr	r0, [r0, #128]	; 0x80
   269d4:	tst	r0, #64	; 0x40
   269d8:	bne	269ec <__assert_fail@plt+0x1528c>
   269dc:	ldr	r1, [r2, #4]
   269e0:	ldrb	r1, [r1, r3]
   269e4:	cmp	r1, #10
   269e8:	beq	26b3c <__assert_fail@plt+0x153dc>
   269ec:	tst	r0, #128	; 0x80
   269f0:	beq	26b38 <__assert_fail@plt+0x153d8>
   269f4:	ldr	r0, [r2, #4]
   269f8:	ldrb	r0, [r0, r3]
   269fc:	cmp	r0, #0
   26a00:	movne	r8, r6
   26a04:	mov	r0, r8
   26a08:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   26a0c:	cmp	r9, #6
   26a10:	bne	26b3c <__assert_fail@plt+0x153dc>
   26a14:	cmp	r6, #2
   26a18:	blt	26b3c <__assert_fail@plt+0x153dc>
   26a1c:	ldr	r7, [lr, r1, lsl #3]
   26a20:	ldr	r0, [r7, #32]
   26a24:	cmp	r0, #0
   26a28:	bne	26a44 <__assert_fail@plt+0x152e4>
   26a2c:	ldr	r1, [r7, #36]	; 0x24
   26a30:	cmp	r1, #0
   26a34:	bne	26a44 <__assert_fail@plt+0x152e4>
   26a38:	ldr	r1, [r7, #20]
   26a3c:	cmp	r1, #0
   26a40:	beq	26b58 <__assert_fail@plt+0x153f8>
   26a44:	cmp	ip, #1
   26a48:	bne	26a64 <__assert_fail@plt+0x15304>
   26a4c:	ldr	r1, [r2, #4]
   26a50:	ldrb	r5, [r1, r3]
   26a54:	ldr	r1, [r7, #20]
   26a58:	cmp	r1, #1
   26a5c:	bge	26a78 <__assert_fail@plt+0x15318>
   26a60:	b	26a98 <__assert_fail@plt+0x15338>
   26a64:	ldr	r1, [r2, #8]
   26a68:	ldr	r5, [r1, r3, lsl #2]
   26a6c:	ldr	r1, [r7, #20]
   26a70:	cmp	r1, #1
   26a74:	blt	26a98 <__assert_fail@plt+0x15338>
   26a78:	ldr	r2, [r7]
   26a7c:	mov	r3, #0
   26a80:	ldr	r4, [r2, r3, lsl #2]
   26a84:	cmp	r5, r4
   26a88:	beq	26b18 <__assert_fail@plt+0x153b8>
   26a8c:	add	r3, r3, #1
   26a90:	cmp	r3, r1
   26a94:	blt	26a80 <__assert_fail@plt+0x15320>
   26a98:	ldr	r1, [r7, #36]	; 0x24
   26a9c:	cmp	r1, #1
   26aa0:	blt	26ad4 <__assert_fail@plt+0x15374>
   26aa4:	mov	r4, #0
   26aa8:	ldr	r0, [r7, #12]
   26aac:	ldr	r1, [r0, r4, lsl #2]
   26ab0:	mov	r0, r5
   26ab4:	bl	1140c <iswctype@plt>
   26ab8:	cmp	r0, #0
   26abc:	bne	26b18 <__assert_fail@plt+0x153b8>
   26ac0:	ldr	r0, [r7, #36]	; 0x24
   26ac4:	add	r4, r4, #1
   26ac8:	cmp	r4, r0
   26acc:	blt	26aa8 <__assert_fail@plt+0x15348>
   26ad0:	ldr	r0, [r7, #32]
   26ad4:	cmp	r0, #1
   26ad8:	blt	26b44 <__assert_fail@plt+0x153e4>
   26adc:	ldr	r1, [r7, #4]
   26ae0:	mov	r2, #0
   26ae4:	ldr	r3, [r1, r2, lsl #2]
   26ae8:	cmp	r3, r5
   26aec:	bls	26b08 <__assert_fail@plt+0x153a8>
   26af0:	add	r2, r2, #1
   26af4:	cmp	r2, r0
   26af8:	bge	26b44 <__assert_fail@plt+0x153e4>
   26afc:	ldr	r3, [r1, r2, lsl #2]
   26b00:	cmp	r3, r5
   26b04:	bhi	26af0 <__assert_fail@plt+0x15390>
   26b08:	ldr	r3, [r7, #8]
   26b0c:	ldr	r3, [r3, r2, lsl #2]
   26b10:	cmp	r5, r3
   26b14:	bhi	26af0 <__assert_fail@plt+0x15390>
   26b18:	mov	r0, r6
   26b1c:	ldrb	r1, [r7, #16]
   26b20:	tst	r1, #1
   26b24:	beq	26b54 <__assert_fail@plt+0x153f4>
   26b28:	cmp	r0, #0
   26b2c:	bgt	26b3c <__assert_fail@plt+0x153dc>
   26b30:	cmp	r6, #1
   26b34:	movle	r6, #1
   26b38:	mov	r8, r6
   26b3c:	mov	r0, r8
   26b40:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   26b44:	mov	r0, #0
   26b48:	ldrb	r1, [r7, #16]
   26b4c:	tst	r1, #1
   26b50:	bne	26b28 <__assert_fail@plt+0x153c8>
   26b54:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   26b58:	mov	r5, #0
   26b5c:	ldr	r1, [r7, #20]
   26b60:	cmp	r1, #1
   26b64:	bge	26a78 <__assert_fail@plt+0x15318>
   26b68:	b	26a98 <__assert_fail@plt+0x15338>
   26b6c:	ldr	r0, [r2, #4]
   26b70:	mov	r8, #0
   26b74:	ldrb	r6, [r0, r3]
   26b78:	cmp	r6, #194	; 0xc2
   26b7c:	bcc	26b3c <__assert_fail@plt+0x153dc>
   26b80:	ldr	r2, [r2, #48]	; 0x30
   26b84:	add	r1, r3, #2
   26b88:	cmp	r1, r2
   26b8c:	bgt	26b3c <__assert_fail@plt+0x153dc>
   26b90:	add	r1, r3, r0
   26b94:	cmp	r6, #223	; 0xdf
   26b98:	ldrb	r7, [r1, #1]
   26b9c:	bhi	26bc4 <__assert_fail@plt+0x15464>
   26ba0:	cmp	r7, #192	; 0xc0
   26ba4:	mov	r0, #0
   26ba8:	movwcc	r0, #1
   26bac:	lsl	r8, r0, #1
   26bb0:	sxtb	r0, r7
   26bb4:	cmn	r0, #1
   26bb8:	movwgt	r8, #0
   26bbc:	mov	r0, r8
   26bc0:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   26bc4:	cmp	r6, #239	; 0xef
   26bc8:	bhi	26be4 <__assert_fail@plt+0x15484>
   26bcc:	mov	r0, #3
   26bd0:	cmp	r6, #224	; 0xe0
   26bd4:	bne	26c40 <__assert_fail@plt+0x154e0>
   26bd8:	cmp	r7, #160	; 0xa0
   26bdc:	bcc	26b3c <__assert_fail@plt+0x153dc>
   26be0:	b	26c40 <__assert_fail@plt+0x154e0>
   26be4:	cmp	r6, #247	; 0xf7
   26be8:	bhi	26c04 <__assert_fail@plt+0x154a4>
   26bec:	mov	r0, #4
   26bf0:	cmp	r6, #240	; 0xf0
   26bf4:	bne	26c40 <__assert_fail@plt+0x154e0>
   26bf8:	cmp	r7, #144	; 0x90
   26bfc:	bcc	26b3c <__assert_fail@plt+0x153dc>
   26c00:	b	26c40 <__assert_fail@plt+0x154e0>
   26c04:	cmp	r6, #251	; 0xfb
   26c08:	bhi	26c24 <__assert_fail@plt+0x154c4>
   26c0c:	mov	r0, #5
   26c10:	cmp	r6, #248	; 0xf8
   26c14:	bne	26c40 <__assert_fail@plt+0x154e0>
   26c18:	cmp	r7, #136	; 0x88
   26c1c:	bcc	26b3c <__assert_fail@plt+0x153dc>
   26c20:	b	26c40 <__assert_fail@plt+0x154e0>
   26c24:	cmp	r6, #253	; 0xfd
   26c28:	bhi	26b3c <__assert_fail@plt+0x153dc>
   26c2c:	mov	r0, #6
   26c30:	cmp	r6, #252	; 0xfc
   26c34:	bne	26c40 <__assert_fail@plt+0x154e0>
   26c38:	cmp	r7, #132	; 0x84
   26c3c:	bcc	26b3c <__assert_fail@plt+0x153dc>
   26c40:	add	r3, r0, r3
   26c44:	cmp	r3, r2
   26c48:	bgt	26b3c <__assert_fail@plt+0x153dc>
   26c4c:	ldrb	r2, [r1, #1]
   26c50:	sxtb	r3, r2
   26c54:	cmn	r3, #1
   26c58:	bgt	26b3c <__assert_fail@plt+0x153dc>
   26c5c:	cmp	r2, #191	; 0xbf
   26c60:	bhi	26b3c <__assert_fail@plt+0x153dc>
   26c64:	ldrb	r2, [r1, #2]
   26c68:	sxtb	r3, r2
   26c6c:	cmn	r3, #1
   26c70:	bgt	26b3c <__assert_fail@plt+0x153dc>
   26c74:	cmp	r2, #191	; 0xbf
   26c78:	bhi	26b3c <__assert_fail@plt+0x153dc>
   26c7c:	cmp	r0, #3
   26c80:	beq	26b54 <__assert_fail@plt+0x153f4>
   26c84:	ldrb	r2, [r1, #3]
   26c88:	sxtb	r3, r2
   26c8c:	cmn	r3, #1
   26c90:	bgt	26b3c <__assert_fail@plt+0x153dc>
   26c94:	cmp	r2, #191	; 0xbf
   26c98:	bhi	26b3c <__assert_fail@plt+0x153dc>
   26c9c:	cmp	r0, #4
   26ca0:	beq	26b54 <__assert_fail@plt+0x153f4>
   26ca4:	ldrb	r2, [r1, #4]
   26ca8:	sxtb	r3, r2
   26cac:	cmn	r3, #1
   26cb0:	bgt	26b3c <__assert_fail@plt+0x153dc>
   26cb4:	cmp	r2, #191	; 0xbf
   26cb8:	bhi	26b3c <__assert_fail@plt+0x153dc>
   26cbc:	cmp	r0, #5
   26cc0:	beq	26b54 <__assert_fail@plt+0x153f4>
   26cc4:	ldrsb	r1, [r1, #5]
   26cc8:	uxtb	r2, r1
   26ccc:	cmp	r2, #191	; 0xbf
   26cd0:	movwhi	r0, #0
   26cd4:	cmn	r1, #1
   26cd8:	movwgt	r0, #0
   26cdc:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   26ce0:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   26ce4:	add	fp, sp, #24
   26ce8:	ldr	r4, [r1, #4]
   26cec:	mov	r6, r0
   26cf0:	mvn	r0, #0
   26cf4:	mov	r8, #0
   26cf8:	uxtab	r3, r0, r4
   26cfc:	cmp	r3, #6
   26d00:	bhi	26eac <__assert_fail@plt+0x1574c>
   26d04:	ldr	r0, [r6, #4]
   26d08:	mov	r9, r1
   26d0c:	ldrb	r1, [r0, r2]
   26d10:	add	r7, pc, #4
   26d14:	sxtb	r0, r1
   26d18:	ldr	pc, [r7, r3, lsl #2]
   26d1c:	andeq	r6, r2, r8, lsr sp
   26d20:	andeq	r6, r2, ip, lsr #29
   26d24:	andeq	r6, r2, ip, asr #26
   26d28:	andeq	r6, r2, ip, lsr #29
   26d2c:	andeq	r6, r2, r4, ror sp
   26d30:	andeq	r6, r2, ip, lsr #29
   26d34:	andeq	r6, r2, ip, ror #26
   26d38:	ldrb	r3, [r9]
   26d3c:	uxtb	r7, r0
   26d40:	cmp	r3, r7
   26d44:	beq	26d94 <__assert_fail@plt+0x15634>
   26d48:	b	26eac <__assert_fail@plt+0x1574c>
   26d4c:	ldr	r3, [r9]
   26d50:	ubfx	r7, r1, #5, #3
   26d54:	mov	r5, #1
   26d58:	ldr	r3, [r3, r7, lsl #2]
   26d5c:	and	r7, r1, #31
   26d60:	tst	r3, r5, lsl r7
   26d64:	bne	26d94 <__assert_fail@plt+0x15634>
   26d68:	b	26eac <__assert_fail@plt+0x1574c>
   26d6c:	cmp	r0, #0
   26d70:	bmi	26eac <__assert_fail@plt+0x1574c>
   26d74:	cmp	r1, #0
   26d78:	beq	26e3c <__assert_fail@plt+0x156dc>
   26d7c:	cmp	r1, #10
   26d80:	bne	26d94 <__assert_fail@plt+0x15634>
   26d84:	ldr	r3, [r6, #84]	; 0x54
   26d88:	ldrb	r3, [r3, #128]	; 0x80
   26d8c:	tst	r3, #64	; 0x40
   26d90:	beq	26eac <__assert_fail@plt+0x1574c>
   26d94:	movw	r3, #65280	; 0xff00
   26d98:	movt	r3, #3
   26d9c:	tst	r4, r3
   26da0:	beq	26e00 <__assert_fail@plt+0x156a0>
   26da4:	cmn	r2, #1
   26da8:	ble	26de0 <__assert_fail@plt+0x15680>
   26dac:	ldr	r3, [r6, #48]	; 0x30
   26db0:	cmp	r3, r2
   26db4:	beq	26ecc <__assert_fail@plt+0x1576c>
   26db8:	ldr	r3, [r6, #80]	; 0x50
   26dbc:	cmp	r3, #2
   26dc0:	blt	26e0c <__assert_fail@plt+0x156ac>
   26dc4:	ldr	r0, [r6, #8]
   26dc8:	ldr	r7, [r0, r2, lsl #2]
   26dcc:	cmn	r7, #1
   26dd0:	bne	26e50 <__assert_fail@plt+0x156f0>
   26dd4:	sub	r2, r2, #1
   26dd8:	cmn	r2, #1
   26ddc:	bne	26dc8 <__assert_fail@plt+0x15668>
   26de0:	ldr	r1, [r6, #60]	; 0x3c
   26de4:	and	r0, r1, #1
   26de8:	tst	r4, #1024	; 0x400
   26dec:	eor	r2, r0, #1
   26df0:	beq	26e88 <__assert_fail@plt+0x15728>
   26df4:	cmp	r0, #0
   26df8:	beq	26eac <__assert_fail@plt+0x1574c>
   26dfc:	b	26e88 <__assert_fail@plt+0x15728>
   26e00:	mov	r8, #1
   26e04:	mov	r0, r8
   26e08:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   26e0c:	ldr	r2, [r6, #68]	; 0x44
   26e10:	ubfx	r3, r1, #5, #3
   26e14:	and	r7, r1, #31
   26e18:	mov	r1, #1
   26e1c:	ldr	r3, [r2, r3, lsl #2]
   26e20:	mov	r2, #0
   26e24:	tst	r3, r1, lsl r7
   26e28:	bne	26e88 <__assert_fail@plt+0x15728>
   26e2c:	mov	r1, #0
   26e30:	cmp	r0, #10
   26e34:	beq	26e68 <__assert_fail@plt+0x15708>
   26e38:	b	26e78 <__assert_fail@plt+0x15718>
   26e3c:	ldr	r3, [r6, #84]	; 0x54
   26e40:	ldrb	r3, [r3, #128]	; 0x80
   26e44:	tst	r3, #128	; 0x80
   26e48:	bne	26eac <__assert_fail@plt+0x1574c>
   26e4c:	b	26d94 <__assert_fail@plt+0x15634>
   26e50:	ldrb	r0, [r6, #78]	; 0x4e
   26e54:	cmp	r0, #0
   26e58:	bne	26eec <__assert_fail@plt+0x1578c>
   26e5c:	mov	r1, #0
   26e60:	cmp	r7, #10
   26e64:	bne	26e78 <__assert_fail@plt+0x15718>
   26e68:	ldrb	r0, [r6, #77]	; 0x4d
   26e6c:	cmp	r0, #0
   26e70:	movwne	r0, #1
   26e74:	lsl	r1, r0, #1
   26e78:	and	r0, r1, #1
   26e7c:	tst	r4, #1024	; 0x400
   26e80:	eor	r2, r0, #1
   26e84:	bne	26df4 <__assert_fail@plt+0x15694>
   26e88:	ldr	r0, [r9, #4]
   26e8c:	cmp	r2, #0
   26e90:	bne	26e9c <__assert_fail@plt+0x1573c>
   26e94:	ands	r2, r0, #2048	; 0x800
   26e98:	bne	26eac <__assert_fail@plt+0x1574c>
   26e9c:	tst	r1, #2
   26ea0:	bne	26eb4 <__assert_fail@plt+0x15754>
   26ea4:	ands	r2, r0, #8192	; 0x2000
   26ea8:	beq	26eb4 <__assert_fail@plt+0x15754>
   26eac:	mov	r0, r8
   26eb0:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   26eb4:	uxth	r0, r0
   26eb8:	mov	r2, #1
   26ebc:	and	r1, r1, #8
   26ec0:	eor	r0, r2, r0, lsr #15
   26ec4:	orr	r0, r0, r1, lsr #3
   26ec8:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   26ecc:	ldr	r0, [r6, #88]	; 0x58
   26ed0:	and	r0, r0, #2
   26ed4:	eor	r1, r0, #10
   26ed8:	and	r0, r1, #1
   26edc:	tst	r4, #1024	; 0x400
   26ee0:	eor	r2, r0, #1
   26ee4:	bne	26df4 <__assert_fail@plt+0x15694>
   26ee8:	b	26e88 <__assert_fail@plt+0x15728>
   26eec:	mov	r0, r7
   26ef0:	bl	1164c <iswalnum@plt>
   26ef4:	mov	r1, #1
   26ef8:	mov	r2, #0
   26efc:	cmp	r7, #95	; 0x5f
   26f00:	beq	26e88 <__assert_fail@plt+0x15728>
   26f04:	cmp	r0, #0
   26f08:	beq	26e5c <__assert_fail@plt+0x156fc>
   26f0c:	b	26e88 <__assert_fail@plt+0x15728>
   26f10:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   26f14:	add	fp, sp, #28
   26f18:	sub	sp, sp, #4
   26f1c:	vpush	{d8-d9}
   26f20:	sub	sp, sp, #2272	; 0x8e0
   26f24:	sub	sp, sp, #12288	; 0x3000
   26f28:	sub	lr, fp, #1024	; 0x400
   26f2c:	vmov.i32	q4, #0	; 0x00000000
   26f30:	mov	r8, r0
   26f34:	mov	r0, #0
   26f38:	str	r1, [sp, #104]	; 0x68
   26f3c:	sub	r3, lr, #56	; 0x38
   26f40:	str	r0, [r1, #44]	; 0x2c
   26f44:	str	r0, [r1, #48]	; 0x30
   26f48:	mov	r0, r3
   26f4c:	vst1.64	{d8-d9}, [r0]!
   26f50:	vst1.64	{d8-d9}, [r0]
   26f54:	ldr	r0, [r1, #8]
   26f58:	cmp	r0, #0
   26f5c:	ble	286b4 <__assert_fail@plt+0x16f54>
   26f60:	add	r0, sp, #168	; 0xa8
   26f64:	add	r2, r8, #96	; 0x60
   26f68:	mov	r1, #0
   26f6c:	str	r8, [sp, #96]	; 0x60
   26f70:	add	r0, r0, #28
   26f74:	str	r2, [sp]
   26f78:	str	r0, [sp, #12]
   26f7c:	add	r0, r2, #16
   26f80:	str	r0, [sp, #4]
   26f84:	add	r0, r3, #16
   26f88:	str	r0, [sp, #8]
   26f8c:	mov	r0, #0
   26f90:	str	r0, [sp, #164]	; 0xa4
   26f94:	b	26fc4 <__assert_fail@plt+0x15864>
   26f98:	sub	lr, fp, #1024	; 0x400
   26f9c:	sub	r0, lr, #56	; 0x38
   26fa0:	vst1.64	{d8-d9}, [r0]!
   26fa4:	vst1.64	{d8-d9}, [r0]
   26fa8:	ldr	r8, [sp, #96]	; 0x60
   26fac:	ldr	r1, [sp, #100]	; 0x64
   26fb0:	ldr	r0, [sp, #104]	; 0x68
   26fb4:	add	r1, r1, #1
   26fb8:	ldr	r0, [r0, #8]
   26fbc:	cmp	r1, r0
   26fc0:	bge	27d28 <__assert_fail@plt+0x165c8>
   26fc4:	ldr	r0, [sp, #104]	; 0x68
   26fc8:	ldr	r9, [r8]
   26fcc:	str	r1, [sp, #100]	; 0x64
   26fd0:	ldr	r0, [r0, #12]
   26fd4:	ldr	ip, [r0, r1, lsl #2]
   26fd8:	add	r0, r9, ip, lsl #3
   26fdc:	ldr	r0, [r0, #4]
   26fe0:	uxtb	r6, r0
   26fe4:	cmp	r6, #1
   26fe8:	bne	270dc <__assert_fail@plt+0x1597c>
   26fec:	ldrb	r1, [r9, ip, lsl #3]
   26ff0:	sub	lr, fp, #1024	; 0x400
   26ff4:	mov	r5, #1
   26ff8:	sub	r3, lr, #56	; 0x38
   26ffc:	add	lr, sp, #168	; 0xa8
   27000:	mov	r7, r3
   27004:	ubfx	r2, r1, #5, #3
   27008:	and	r1, r1, #31
   2700c:	ldr	r3, [r3, r2, lsl #2]
   27010:	orr	r1, r3, r5, lsl r1
   27014:	str	r1, [r7, r2, lsl #2]
   27018:	movw	r1, #65280	; 0xff00
   2701c:	ldr	r7, [sp, #12]
   27020:	movt	r1, #3
   27024:	ands	r1, r0, r1
   27028:	beq	27428 <__assert_fail@plt+0x15cc8>
   2702c:	tst	r0, #8192	; 0x2000
   27030:	beq	2705c <__assert_fail@plt+0x158fc>
   27034:	ldr	r1, [fp, #-1080]	; 0xfffffbc8
   27038:	sub	r2, fp, #1024	; 0x400
   2703c:	sub	r2, r2, #56	; 0x38
   27040:	vst1.64	{d8-d9}, [r2]!
   27044:	vst1.64	{d8-d9}, [r2]
   27048:	tst	r1, #1024	; 0x400
   2704c:	beq	26fa8 <__assert_fail@plt+0x15848>
   27050:	ldr	r7, [sp, #12]
   27054:	mov	r1, #1024	; 0x400
   27058:	str	r1, [fp, #-1080]	; 0xfffffbc8
   2705c:	tst	r0, #32768	; 0x8000
   27060:	bne	26f98 <__assert_fail@plt+0x15838>
   27064:	tst	r0, #1024	; 0x400
   27068:	bne	271cc <__assert_fail@plt+0x15a6c>
   2706c:	tst	r0, #2048	; 0x800
   27070:	beq	27428 <__assert_fail@plt+0x15cc8>
   27074:	tst	r0, #4194304	; 0x400000
   27078:	beq	27084 <__assert_fail@plt+0x15924>
   2707c:	cmp	r6, #1
   27080:	beq	26f98 <__assert_fail@plt+0x15838>
   27084:	ldr	r1, [sp, #96]	; 0x60
   27088:	ldr	r0, [r1, #92]	; 0x5c
   2708c:	cmp	r0, #1
   27090:	ble	273b0 <__assert_fail@plt+0x15c50>
   27094:	ldr	r0, [r1, #60]	; 0x3c
   27098:	ldr	r1, [sp]
   2709c:	vld1.32	{d16-d17}, [r1]
   270a0:	vld1.32	{d18-d19}, [r0]!
   270a4:	sub	r1, fp, #1024	; 0x400
   270a8:	sub	r1, r1, #56	; 0x38
   270ac:	vld1.64	{d20-d21}, [r1]
   270b0:	vand	q8, q9, q8
   270b4:	vbic	q9, q10, q8
   270b8:	vst1.64	{d18-d19}, [r1]
   270bc:	ldr	r1, [sp, #4]
   270c0:	vld1.32	{d20-d21}, [r0]
   270c4:	ldr	r0, [sp, #8]
   270c8:	vld1.32	{d16-d17}, [r1]
   270cc:	vld1.32	{d22-d23}, [r0]
   270d0:	vand	q8, q10, q8
   270d4:	vbic	q8, q11, q8
   270d8:	b	273e0 <__assert_fail@plt+0x15c80>
   270dc:	cmp	r6, #7
   270e0:	add	lr, sp, #168	; 0xa8
   270e4:	beq	2712c <__assert_fail@plt+0x159cc>
   270e8:	cmp	r6, #5
   270ec:	beq	2717c <__assert_fail@plt+0x15a1c>
   270f0:	cmp	r6, #3
   270f4:	bne	271c4 <__assert_fail@plt+0x15a64>
   270f8:	ldr	r1, [r9, ip, lsl #3]
   270fc:	sub	r2, fp, #1024	; 0x400
   27100:	sub	r2, r2, #56	; 0x38
   27104:	vld1.64	{d16-d17}, [r2]
   27108:	vld1.32	{d18-d19}, [r1]!
   2710c:	vorr	q8, q8, q9
   27110:	vst1.64	{d16-d17}, [r2]
   27114:	vld1.32	{d16-d17}, [r1]
   27118:	ldr	r1, [sp, #8]
   2711c:	vld1.32	{d18-d19}, [r1]
   27120:	vorr	q8, q9, q8
   27124:	vst1.32	{d16-d17}, [r1]
   27128:	b	27018 <__assert_fail@plt+0x158b8>
   2712c:	mvn	r1, #0
   27130:	str	r1, [fp, #-1068]	; 0xfffffbd4
   27134:	str	r1, [fp, #-1072]	; 0xfffffbd0
   27138:	str	r1, [fp, #-1076]	; 0xfffffbcc
   2713c:	str	r1, [fp, #-1080]	; 0xfffffbc8
   27140:	ldr	r1, [sp, #96]	; 0x60
   27144:	ldr	r2, [r1, #128]	; 0x80
   27148:	and	r1, r2, #128	; 0x80
   2714c:	ands	r2, r2, #64	; 0x40
   27150:	beq	2715c <__assert_fail@plt+0x159fc>
   27154:	cmp	r1, #0
   27158:	beq	27018 <__assert_fail@plt+0x158b8>
   2715c:	cmp	r2, #0
   27160:	mvn	r2, #1
   27164:	movweq	r2, #64510	; 0xfbfe
   27168:	movteq	r2, #65535	; 0xffff
   2716c:	cmp	r1, #0
   27170:	mvneq	r2, #1024	; 0x400
   27174:	str	r2, [fp, #-1080]	; 0xfffffbc8
   27178:	b	27018 <__assert_fail@plt+0x158b8>
   2717c:	ldr	r3, [sp, #96]	; 0x60
   27180:	ldr	r1, [r3, #92]	; 0x5c
   27184:	cmp	r1, #2
   27188:	blt	27284 <__assert_fail@plt+0x15b24>
   2718c:	ldr	r1, [r3, #60]	; 0x3c
   27190:	sub	r2, fp, #1024	; 0x400
   27194:	sub	r2, r2, #56	; 0x38
   27198:	vld1.64	{d16-d17}, [r2]
   2719c:	vld1.32	{d18-d19}, [r1]!
   271a0:	vorr	q8, q8, q9
   271a4:	vst1.64	{d16-d17}, [r2]
   271a8:	vld1.32	{d18-d19}, [r1]
   271ac:	ldr	r1, [sp, #8]
   271b0:	vld1.32	{d20-d21}, [r1]
   271b4:	vorr	q9, q10, q9
   271b8:	vst1.32	{d18-d19}, [r1]
   271bc:	vmov.32	r1, d16[0]
   271c0:	b	272a8 <__assert_fail@plt+0x15b48>
   271c4:	ldr	r8, [sp, #96]	; 0x60
   271c8:	b	26fb0 <__assert_fail@plt+0x15850>
   271cc:	movw	r1, #255	; 0xff
   271d0:	movt	r1, #64	; 0x40
   271d4:	and	r1, r0, r1
   271d8:	cmp	r1, #1
   271dc:	beq	26f98 <__assert_fail@plt+0x15838>
   271e0:	ldr	r7, [sp, #96]	; 0x60
   271e4:	ldr	r1, [r7, #92]	; 0x5c
   271e8:	cmp	r1, #1
   271ec:	ble	272d4 <__assert_fail@plt+0x15b74>
   271f0:	ldr	r1, [r7, #60]	; 0x3c
   271f4:	ldr	r2, [sp]
   271f8:	vld1.32	{d16-d17}, [r2]
   271fc:	vld1.32	{d18-d19}, [r1]!
   27200:	sub	r2, fp, #1024	; 0x400
   27204:	sub	r2, r2, #56	; 0x38
   27208:	vld1.64	{d20-d21}, [r2]
   2720c:	vorn	q8, q8, q9
   27210:	vand	q8, q10, q8
   27214:	vst1.64	{d16-d17}, [r2]
   27218:	vmov.32	r2, d16[1]
   2721c:	vld1.32	{d18-d19}, [r1]
   27220:	ldr	r1, [sp, #4]
   27224:	vld1.32	{d20-d21}, [r1]
   27228:	ldr	r1, [sp, #8]
   2722c:	vld1.32	{d22-d23}, [r1]
   27230:	vorn	q9, q10, q9
   27234:	vand	q9, q11, q9
   27238:	vst1.32	{d18-d19}, [r1]
   2723c:	vmov.32	r1, d16[0]
   27240:	orr	r1, r2, r1
   27244:	vmov.32	r2, d17[0]
   27248:	orr	r1, r1, r2
   2724c:	vmov.32	r2, d17[1]
   27250:	orr	r1, r1, r2
   27254:	vmov.32	r2, d18[0]
   27258:	orr	r1, r1, r2
   2725c:	vmov.32	r2, d18[1]
   27260:	orr	r1, r1, r2
   27264:	vmov.32	r2, d19[0]
   27268:	orr	r1, r1, r2
   2726c:	vmov.32	r2, d19[1]
   27270:	orr	r1, r1, r2
   27274:	ldr	r7, [sp, #12]
   27278:	cmp	r1, #0
   2727c:	bne	2706c <__assert_fail@plt+0x1590c>
   27280:	b	26fa8 <__assert_fail@plt+0x15848>
   27284:	mvn	r1, #0
   27288:	str	r1, [fp, #-1052]	; 0xfffffbe4
   2728c:	str	r1, [fp, #-1056]	; 0xfffffbe0
   27290:	str	r1, [fp, #-1060]	; 0xfffffbdc
   27294:	str	r1, [fp, #-1064]	; 0xfffffbd8
   27298:	str	r1, [fp, #-1068]	; 0xfffffbd4
   2729c:	str	r1, [fp, #-1072]	; 0xfffffbd0
   272a0:	str	r1, [fp, #-1076]	; 0xfffffbcc
   272a4:	str	r1, [fp, #-1080]	; 0xfffffbc8
   272a8:	ldr	r2, [r3, #128]	; 0x80
   272ac:	ands	r3, r2, #64	; 0x40
   272b0:	and	r2, r2, #128	; 0x80
   272b4:	biceq	r1, r1, #1024	; 0x400
   272b8:	beq	272c4 <__assert_fail@plt+0x15b64>
   272bc:	cmp	r2, #0
   272c0:	beq	27018 <__assert_fail@plt+0x158b8>
   272c4:	cmp	r2, #0
   272c8:	bicne	r1, r1, #1
   272cc:	str	r1, [fp, #-1080]	; 0xfffffbc8
   272d0:	b	27018 <__assert_fail@plt+0x158b8>
   272d4:	ldr	r1, [r7, #112]	; 0x70
   272d8:	add	sl, r7, #96	; 0x60
   272dc:	ldr	r4, [fp, #-1080]	; 0xfffffbc8
   272e0:	ldr	r5, [fp, #-1076]	; 0xfffffbcc
   272e4:	ldm	sl, {r2, r3, r8, sl}
   272e8:	str	ip, [sp, #28]
   272ec:	str	r9, [sp, #24]
   272f0:	ldr	r9, [sp, #24]
   272f4:	str	r1, [sp, #148]	; 0x94
   272f8:	ldr	r1, [r7, #116]	; 0x74
   272fc:	and	ip, r5, r3
   27300:	and	lr, r4, r2
   27304:	ldr	r2, [sp, #148]	; 0x94
   27308:	str	r1, [sp, #152]	; 0x98
   2730c:	ldr	r1, [r7, #120]	; 0x78
   27310:	str	r1, [sp, #156]	; 0x9c
   27314:	ldr	r1, [r7, #124]	; 0x7c
   27318:	ldr	r7, [fp, #-1072]	; 0xfffffbd0
   2731c:	ldr	r3, [sp, #156]	; 0x9c
   27320:	str	r1, [sp, #160]	; 0xa0
   27324:	ldr	r1, [fp, #-1068]	; 0xfffffbd4
   27328:	and	r8, r7, r8
   2732c:	str	lr, [fp, #-1080]	; 0xfffffbc8
   27330:	str	ip, [fp, #-1076]	; 0xfffffbcc
   27334:	str	r8, [fp, #-1072]	; 0xfffffbd0
   27338:	ldr	r7, [sp, #160]	; 0xa0
   2733c:	and	r1, r1, sl
   27340:	add	sl, sp, #168	; 0xa8
   27344:	str	r1, [fp, #-1068]	; 0xfffffbd4
   27348:	ldr	r5, [fp, #-1064]	; 0xfffffbd8
   2734c:	and	r5, r5, r2
   27350:	ldr	r2, [sp, #152]	; 0x98
   27354:	str	r5, [fp, #-1064]	; 0xfffffbd8
   27358:	ldr	r4, [fp, #-1060]	; 0xfffffbdc
   2735c:	and	r4, r4, r2
   27360:	str	r4, [fp, #-1060]	; 0xfffffbdc
   27364:	ldr	r2, [fp, #-1056]	; 0xfffffbe0
   27368:	and	r2, r2, r3
   2736c:	str	r2, [fp, #-1056]	; 0xfffffbe0
   27370:	ldr	r3, [fp, #-1052]	; 0xfffffbe4
   27374:	and	r3, r3, r7
   27378:	orr	r7, ip, lr
   2737c:	ldr	ip, [sp, #28]
   27380:	mov	lr, sl
   27384:	orr	r7, r7, r8
   27388:	str	r3, [fp, #-1052]	; 0xfffffbe4
   2738c:	orr	r1, r7, r1
   27390:	orr	r1, r1, r5
   27394:	orr	r1, r1, r4
   27398:	orr	r1, r1, r2
   2739c:	orr	r1, r1, r3
   273a0:	ldr	r7, [sp, #12]
   273a4:	cmp	r1, #0
   273a8:	bne	2706c <__assert_fail@plt+0x1590c>
   273ac:	b	26fa8 <__assert_fail@plt+0x15848>
   273b0:	ldr	r0, [sp]
   273b4:	vld1.32	{d16-d17}, [r0]
   273b8:	sub	r0, fp, #1024	; 0x400
   273bc:	sub	r0, r0, #56	; 0x38
   273c0:	vld1.64	{d18-d19}, [r0]
   273c4:	vbic	q9, q9, q8
   273c8:	vst1.64	{d18-d19}, [r0]
   273cc:	ldr	r0, [sp, #4]
   273d0:	vld1.32	{d16-d17}, [r0]
   273d4:	ldr	r0, [sp, #8]
   273d8:	vld1.32	{d20-d21}, [r0]
   273dc:	vbic	q8, q10, q8
   273e0:	vst1.32	{d16-d17}, [r0]
   273e4:	vmov.32	r0, d18[0]
   273e8:	vmov.32	r1, d18[1]
   273ec:	ldr	r7, [sp, #12]
   273f0:	orr	r0, r1, r0
   273f4:	vmov.32	r1, d19[0]
   273f8:	orr	r0, r0, r1
   273fc:	vmov.32	r1, d19[1]
   27400:	orr	r0, r0, r1
   27404:	vmov.32	r1, d16[0]
   27408:	orr	r0, r0, r1
   2740c:	vmov.32	r1, d16[1]
   27410:	orr	r0, r0, r1
   27414:	vmov.32	r1, d17[0]
   27418:	orr	r0, r0, r1
   2741c:	vmov.32	r1, d17[1]
   27420:	orrs	r0, r0, r1
   27424:	beq	26fa8 <__assert_fail@plt+0x15848>
   27428:	ldr	r0, [sp, #164]	; 0xa4
   2742c:	cmp	r0, #1
   27430:	blt	2789c <__assert_fail@plt+0x1613c>
   27434:	ldr	r0, [fp, #-1060]	; 0xfffffbdc
   27438:	ldr	r2, [fp, #-1052]	; 0xfffffbe4
   2743c:	ldr	r3, [fp, #-1056]	; 0xfffffbe0
   27440:	ldr	r1, [fp, #-1080]	; 0xfffffbc8
   27444:	cmp	r6, #1
   27448:	mov	r4, #0
   2744c:	str	r0, [sp, #140]	; 0x8c
   27450:	ldr	r0, [fp, #-1064]	; 0xfffffbd8
   27454:	str	r1, [sp, #120]	; 0x78
   27458:	str	r2, [sp, #144]	; 0x90
   2745c:	str	r3, [sp, #152]	; 0x98
   27460:	str	r0, [sp, #160]	; 0xa0
   27464:	ldr	r0, [fp, #-1076]	; 0xfffffbcc
   27468:	str	r0, [sp, #156]	; 0x9c
   2746c:	ldr	r0, [fp, #-1072]	; 0xfffffbd0
   27470:	str	r0, [sp, #132]	; 0x84
   27474:	ldr	r0, [fp, #-1068]	; 0xfffffbd4
   27478:	str	r0, [sp, #148]	; 0x94
   2747c:	bne	278b8 <__assert_fail@plt+0x16158>
   27480:	ldr	r3, [sp, #148]	; 0x94
   27484:	sub	r0, fp, #6144	; 0x1800
   27488:	str	r7, [sp, #128]	; 0x80
   2748c:	str	ip, [sp, #28]
   27490:	str	r9, [sp, #24]
   27494:	sub	r6, r0, #104	; 0x68
   27498:	str	r6, [sp, #124]	; 0x7c
   2749c:	b	274d0 <__assert_fail@plt+0x15d70>
   274a0:	mov	r8, ip
   274a4:	ldr	r0, [sp, #128]	; 0x80
   274a8:	add	r4, r4, #1
   274ac:	mov	ip, r8
   274b0:	add	r0, r0, #32
   274b4:	str	r0, [sp, #128]	; 0x80
   274b8:	ldr	r0, [sp, #124]	; 0x7c
   274bc:	add	r0, r0, #12
   274c0:	str	r0, [sp, #124]	; 0x7c
   274c4:	ldr	r0, [sp, #164]	; 0xa4
   274c8:	cmp	r4, r0
   274cc:	bge	27864 <__assert_fail@plt+0x16104>
   274d0:	ldrb	r0, [r9, ip, lsl #3]
   274d4:	mov	r2, #1
   274d8:	ubfx	r1, r0, #5, #3
   274dc:	and	r0, r0, #31
   274e0:	add	r1, lr, r1, lsl #2
   274e4:	ldr	r1, [r1, r4, lsl #5]
   274e8:	tst	r1, r2, lsl r0
   274ec:	beq	274a0 <__assert_fail@plt+0x15d40>
   274f0:	add	r9, lr, r4, lsl #5
   274f4:	ldr	r2, [sp, #132]	; 0x84
   274f8:	str	r4, [sp, #136]	; 0x88
   274fc:	ldr	r4, [sp, #120]	; 0x78
   27500:	ldr	sl, [sp, #156]	; 0x9c
   27504:	str	r3, [sp, #148]	; 0x94
   27508:	ldr	ip, [sp, #152]	; 0x98
   2750c:	ldr	r0, [r9, #8]
   27510:	ldr	r6, [r9, #4]
   27514:	ldr	r7, [r9, #12]
   27518:	ldr	r5, [r9, #16]
   2751c:	and	r1, r0, r2
   27520:	str	r0, [sp, #88]	; 0x58
   27524:	ldr	r0, [sp, #128]	; 0x80
   27528:	str	r6, [sp, #108]	; 0x6c
   2752c:	and	r6, r6, sl
   27530:	str	r7, [sp, #112]	; 0x70
   27534:	str	r5, [sp, #92]	; 0x5c
   27538:	str	r1, [sp, #84]	; 0x54
   2753c:	str	r6, [sp, #76]	; 0x4c
   27540:	ldr	lr, [r0, #-28]	; 0xffffffe4
   27544:	ldr	r8, [r0]
   27548:	and	r0, lr, r4
   2754c:	str	r8, [sp, #116]	; 0x74
   27550:	str	r0, [sp, #80]	; 0x50
   27554:	orr	r0, r6, r0
   27558:	orr	r0, r0, r1
   2755c:	and	r1, r7, r3
   27560:	ldr	r7, [sp, #160]	; 0xa0
   27564:	ldr	r3, [sp, #140]	; 0x8c
   27568:	str	r1, [sp, #72]	; 0x48
   2756c:	orr	r0, r0, r1
   27570:	and	r1, r5, r7
   27574:	str	r1, [sp, #68]	; 0x44
   27578:	orr	r0, r0, r1
   2757c:	ldr	r1, [r9, #20]
   27580:	and	r6, r1, r3
   27584:	ldr	r3, [r9, #24]
   27588:	str	r6, [sp, #64]	; 0x40
   2758c:	orr	r0, r0, r6
   27590:	ldr	r6, [sp, #144]	; 0x90
   27594:	and	r5, r3, ip
   27598:	orr	r0, r0, r5
   2759c:	and	r6, r8, r6
   275a0:	orrs	r0, r0, r6
   275a4:	beq	27750 <__assert_fail@plt+0x15ff0>
   275a8:	bic	r0, r4, lr
   275ac:	ldr	ip, [sp, #88]	; 0x58
   275b0:	str	r5, [sp, #20]
   275b4:	ldr	r5, [sp, #148]	; 0x94
   275b8:	str	r6, [sp, #16]
   275bc:	ldr	r6, [sp, #92]	; 0x5c
   275c0:	ldr	r8, [sp, #140]	; 0x8c
   275c4:	bic	lr, lr, r4
   275c8:	ldr	r4, [sp, #148]	; 0x94
   275cc:	str	r0, [sp, #60]	; 0x3c
   275d0:	ldr	r0, [sp, #108]	; 0x6c
   275d4:	bic	r0, sl, r0
   275d8:	str	r0, [sp, #56]	; 0x38
   275dc:	bic	r0, r2, ip
   275e0:	bic	r2, ip, r2
   275e4:	str	r0, [sp, #52]	; 0x34
   275e8:	ldr	r0, [sp, #112]	; 0x70
   275ec:	str	r2, [sp, #156]	; 0x9c
   275f0:	bic	r0, r5, r0
   275f4:	ldr	r5, [sp, #144]	; 0x90
   275f8:	str	r0, [sp, #48]	; 0x30
   275fc:	bic	r0, r7, r6
   27600:	str	r0, [sp, #44]	; 0x2c
   27604:	bic	r0, r8, r1
   27608:	bic	r1, r1, r8
   2760c:	str	r0, [sp, #40]	; 0x28
   27610:	ldr	r0, [sp, #152]	; 0x98
   27614:	bic	r0, r0, r3
   27618:	str	r0, [sp, #36]	; 0x24
   2761c:	ldr	r0, [sp, #116]	; 0x74
   27620:	bic	r0, r5, r0
   27624:	str	r0, [sp, #32]
   27628:	ldr	r0, [sp, #108]	; 0x6c
   2762c:	bic	sl, r0, sl
   27630:	orr	r0, sl, lr
   27634:	orr	r0, r0, r2
   27638:	ldr	r2, [sp, #112]	; 0x70
   2763c:	bic	ip, r2, r4
   27640:	ldr	r4, [sp, #152]	; 0x98
   27644:	bic	r2, r6, r7
   27648:	orr	r0, r0, ip
   2764c:	orr	r0, r0, r2
   27650:	orr	r0, r0, r1
   27654:	bic	r3, r3, r4
   27658:	orr	r4, r0, r3
   2765c:	ldr	r0, [sp, #116]	; 0x74
   27660:	bic	r0, r0, r5
   27664:	orrs	r4, r4, r0
   27668:	beq	27768 <__assert_fail@plt+0x16008>
   2766c:	ldr	r5, [sp, #164]	; 0xa4
   27670:	ldr	r7, [sp, #156]	; 0x9c
   27674:	mov	r6, sl
   27678:	add	sl, sp, #168	; 0xa8
   2767c:	add	r4, sl, r5, lsl #5
   27680:	str	lr, [sl, r5, lsl #5]
   27684:	sub	lr, fp, #6144	; 0x1800
   27688:	str	r5, [sp, #164]	; 0xa4
   2768c:	str	r6, [r4, #4]
   27690:	str	r7, [r4, #8]
   27694:	str	ip, [r4, #12]
   27698:	str	r2, [r4, #16]
   2769c:	str	r1, [r4, #20]
   276a0:	str	r3, [r4, #24]
   276a4:	str	r0, [r4, #28]
   276a8:	ldr	r0, [sp, #128]	; 0x80
   276ac:	ldr	r1, [sp, #80]	; 0x50
   276b0:	ldr	r6, [sp, #124]	; 0x7c
   276b4:	mov	ip, r5
   276b8:	str	r1, [r0, #-28]	; 0xffffffe4
   276bc:	ldr	r1, [sp, #76]	; 0x4c
   276c0:	str	r1, [r9, #4]
   276c4:	ldr	r1, [sp, #84]	; 0x54
   276c8:	str	r1, [r9, #8]
   276cc:	ldr	r1, [sp, #72]	; 0x48
   276d0:	str	r1, [r9, #12]
   276d4:	ldr	r1, [sp, #68]	; 0x44
   276d8:	str	r1, [r9, #16]
   276dc:	ldr	r1, [sp, #64]	; 0x40
   276e0:	str	r1, [r9, #20]
   276e4:	ldr	r1, [sp, #20]
   276e8:	str	r1, [r9, #24]
   276ec:	ldr	r1, [sp, #16]
   276f0:	str	r1, [r0]
   276f4:	add	r0, r5, r5, lsl #1
   276f8:	sub	r1, lr, #104	; 0x68
   276fc:	add	r5, r1, r0, lsl #2
   27700:	ldr	r0, [r6, #4]
   27704:	mov	r4, r5
   27708:	str	r0, [r4, #4]!
   2770c:	ldr	r8, [r6, #4]
   27710:	cmp	r8, #0
   27714:	ble	2778c <__assert_fail@plt+0x1602c>
   27718:	str	r0, [r5]
   2771c:	lsl	r0, r0, #2
   27720:	bl	2e08c <__assert_fail@plt+0x1c92c>
   27724:	ldr	r9, [sp, #44]	; 0x2c
   27728:	ldr	r7, [sp, #40]	; 0x28
   2772c:	ldr	sl, [sp, #32]
   27730:	cmp	r0, #0
   27734:	str	r0, [r5, #8]
   27738:	beq	285f8 <__assert_fail@plt+0x16e98>
   2773c:	ldr	r1, [r6, #8]
   27740:	lsl	r2, r8, #2
   27744:	bl	11484 <memcpy@plt>
   27748:	ldr	r4, [sp, #136]	; 0x88
   2774c:	b	277ac <__assert_fail@plt+0x1604c>
   27750:	ldr	r4, [sp, #136]	; 0x88
   27754:	ldr	r8, [sp, #28]
   27758:	ldr	r9, [sp, #24]
   2775c:	ldr	r3, [sp, #148]	; 0x94
   27760:	add	lr, sp, #168	; 0xa8
   27764:	b	274a4 <__assert_fail@plt+0x15d44>
   27768:	add	sl, sp, #168	; 0xa8
   2776c:	ldr	r4, [sp, #136]	; 0x88
   27770:	ldr	r6, [sp, #124]	; 0x7c
   27774:	ldr	r5, [sp, #48]	; 0x30
   27778:	ldr	r9, [sp, #44]	; 0x2c
   2777c:	ldr	r7, [sp, #40]	; 0x28
   27780:	mov	r8, sl
   27784:	ldr	sl, [sp, #32]
   27788:	b	277c0 <__assert_fail@plt+0x16060>
   2778c:	mov	r0, #0
   27790:	ldr	r4, [sp, #136]	; 0x88
   27794:	ldr	r9, [sp, #44]	; 0x2c
   27798:	ldr	r7, [sp, #40]	; 0x28
   2779c:	ldr	sl, [sp, #32]
   277a0:	str	r0, [r5]
   277a4:	str	r0, [r5, #4]
   277a8:	str	r0, [r5, #8]
   277ac:	ldr	r5, [sp, #48]	; 0x30
   277b0:	ldr	r0, [sp, #164]	; 0xa4
   277b4:	add	r8, sp, #168	; 0xa8
   277b8:	add	r0, r0, #1
   277bc:	str	r0, [sp, #164]	; 0xa4
   277c0:	ldr	r0, [sp, #104]	; 0x68
   277c4:	ldr	r1, [sp, #100]	; 0x64
   277c8:	ldr	r0, [r0, #12]
   277cc:	ldr	r1, [r0, r1, lsl #2]
   277d0:	mov	r0, r6
   277d4:	bl	224d8 <__assert_fail@plt+0x10d78>
   277d8:	cmp	r0, #0
   277dc:	beq	2857c <__assert_fail@plt+0x16e1c>
   277e0:	ldr	r1, [sp, #60]	; 0x3c
   277e4:	ldr	r2, [sp, #56]	; 0x38
   277e8:	ldr	r3, [sp, #52]	; 0x34
   277ec:	ldr	ip, [sp, #36]	; 0x24
   277f0:	mov	lr, r8
   277f4:	mov	r6, r9
   277f8:	str	r9, [sp, #160]	; 0xa0
   277fc:	ldr	r8, [sp, #28]
   27800:	str	sl, [sp, #144]	; 0x90
   27804:	str	r7, [sp, #140]	; 0x8c
   27808:	orr	r0, r2, r1
   2780c:	str	ip, [sp, #152]	; 0x98
   27810:	str	r2, [sp, #156]	; 0x9c
   27814:	str	r1, [sp, #120]	; 0x78
   27818:	orr	r0, r0, r3
   2781c:	orr	r0, r0, r5
   27820:	orr	r0, r0, r9
   27824:	ldr	r9, [sp, #24]
   27828:	orr	r0, r0, r7
   2782c:	orr	r0, r0, ip
   27830:	orrs	r0, r0, sl
   27834:	mov	r0, r3
   27838:	mov	r3, r5
   2783c:	str	r0, [sp, #132]	; 0x84
   27840:	bne	274a4 <__assert_fail@plt+0x15d44>
   27844:	str	sl, [sp, #144]	; 0x90
   27848:	str	ip, [sp, #152]	; 0x98
   2784c:	str	r7, [sp, #140]	; 0x8c
   27850:	str	r6, [sp, #160]	; 0xa0
   27854:	mov	r3, r5
   27858:	str	r0, [sp, #132]	; 0x84
   2785c:	str	r2, [sp, #156]	; 0x9c
   27860:	str	r1, [sp, #120]	; 0x78
   27864:	ldr	r0, [sp, #144]	; 0x90
   27868:	ldr	r8, [sp, #96]	; 0x60
   2786c:	str	r0, [fp, #-1052]	; 0xfffffbe4
   27870:	ldr	r0, [sp, #152]	; 0x98
   27874:	str	r0, [fp, #-1056]	; 0xfffffbe0
   27878:	ldr	r0, [sp, #140]	; 0x8c
   2787c:	str	r0, [fp, #-1060]	; 0xfffffbdc
   27880:	ldr	r0, [sp, #160]	; 0xa0
   27884:	str	r0, [fp, #-1064]	; 0xfffffbd8
   27888:	ldr	r0, [sp, #132]	; 0x84
   2788c:	str	r3, [fp, #-1068]	; 0xfffffbd4
   27890:	str	r0, [fp, #-1072]	; 0xfffffbd0
   27894:	ldr	r0, [sp, #156]	; 0x9c
   27898:	b	27c88 <__assert_fail@plt+0x16528>
   2789c:	ldr	r8, [sp, #96]	; 0x60
   278a0:	mov	r4, #0
   278a4:	ldr	r0, [sp, #164]	; 0xa4
   278a8:	ldr	r1, [sp, #100]	; 0x64
   278ac:	cmp	r4, r0
   278b0:	bne	26fb0 <__assert_fail@plt+0x15850>
   278b4:	b	27ca4 <__assert_fail@plt+0x16544>
   278b8:	ldr	r0, [fp, #-1076]	; 0xfffffbcc
   278bc:	sub	lr, fp, #6144	; 0x1800
   278c0:	ldr	ip, [sp, #164]	; 0xa4
   278c4:	ldr	sl, [sp, #132]	; 0x84
   278c8:	str	r0, [sp, #48]	; 0x30
   278cc:	ldr	r0, [fp, #-1072]	; 0xfffffbd0
   278d0:	str	r0, [sp, #44]	; 0x2c
   278d4:	ldr	r0, [fp, #-1068]	; 0xfffffbd4
   278d8:	str	r0, [sp, #40]	; 0x28
   278dc:	sub	r0, lr, #104	; 0x68
   278e0:	mov	lr, r1
   278e4:	str	r0, [sp, #128]	; 0x80
   278e8:	ldr	r0, [sp, #156]	; 0x9c
   278ec:	b	27928 <__assert_fail@plt+0x161c8>
   278f0:	ldr	r4, [sp, #136]	; 0x88
   278f4:	ldr	ip, [sp, #164]	; 0xa4
   278f8:	ldr	r8, [sp, #96]	; 0x60
   278fc:	ldr	r0, [sp, #156]	; 0x9c
   27900:	ldr	sl, [sp, #132]	; 0x84
   27904:	ldr	lr, [sp, #124]	; 0x7c
   27908:	ldr	r7, [sp, #116]	; 0x74
   2790c:	ldr	r1, [sp, #128]	; 0x80
   27910:	add	r4, r4, #1
   27914:	cmp	r4, ip
   27918:	add	r7, r7, #32
   2791c:	add	r1, r1, #12
   27920:	str	r1, [sp, #128]	; 0x80
   27924:	bge	27c50 <__assert_fail@plt+0x164f0>
   27928:	add	r1, sp, #168	; 0xa8
   2792c:	str	r4, [sp, #136]	; 0x88
   27930:	str	lr, [sp, #124]	; 0x7c
   27934:	str	ip, [sp, #164]	; 0xa4
   27938:	ldr	ip, [sp, #160]	; 0xa0
   2793c:	str	sl, [sp, #132]	; 0x84
   27940:	str	r7, [sp, #116]	; 0x74
   27944:	ldr	r3, [r7]
   27948:	str	r0, [sp, #156]	; 0x9c
   2794c:	add	r8, r1, r4, lsl #5
   27950:	ldr	r4, [r7, #-28]	; 0xffffffe4
   27954:	ldr	r7, [sp, #140]	; 0x8c
   27958:	ldr	r5, [r8, #4]
   2795c:	ldr	r1, [r8, #8]
   27960:	ldr	r2, [r8, #12]
   27964:	ldr	r9, [r8, #16]
   27968:	str	r4, [sp, #108]	; 0x6c
   2796c:	and	r4, r4, lr
   27970:	ldr	lr, [sp, #148]	; 0x94
   27974:	str	r4, [sp, #72]	; 0x48
   27978:	and	r6, r5, r0
   2797c:	str	r1, [sp, #80]	; 0x50
   27980:	and	r1, r1, sl
   27984:	ldr	sl, [r8, #20]
   27988:	str	r9, [sp, #84]	; 0x54
   2798c:	str	r5, [sp, #112]	; 0x70
   27990:	str	r2, [sp, #88]	; 0x58
   27994:	orr	r0, r6, r4
   27998:	str	r1, [sp, #76]	; 0x4c
   2799c:	str	r6, [sp, #68]	; 0x44
   279a0:	ldr	r6, [sp, #152]	; 0x98
   279a4:	orr	r0, r0, r1
   279a8:	and	r1, r2, lr
   279ac:	str	r1, [sp, #64]	; 0x40
   279b0:	orr	r0, r0, r1
   279b4:	and	r1, r9, ip
   279b8:	ldr	r9, [sp, #144]	; 0x90
   279bc:	and	r4, sl, r7
   279c0:	orr	r0, r0, r1
   279c4:	str	r1, [sp, #60]	; 0x3c
   279c8:	str	r4, [sp, #56]	; 0x38
   279cc:	orr	r0, r0, r4
   279d0:	ldr	r4, [r8, #24]
   279d4:	and	r5, r4, r6
   279d8:	str	r5, [sp, #52]	; 0x34
   279dc:	orr	r0, r0, r5
   279e0:	and	r5, r3, r9
   279e4:	orrs	r0, r0, r5
   279e8:	beq	278f0 <__assert_fail@plt+0x16190>
   279ec:	ldr	r0, [sp, #124]	; 0x7c
   279f0:	ldr	r1, [sp, #108]	; 0x6c
   279f4:	ldr	r2, [sp, #156]	; 0x9c
   279f8:	str	r5, [sp, #20]
   279fc:	ldr	r5, [sp, #132]	; 0x84
   27a00:	ldr	ip, [sp, #84]	; 0x54
   27a04:	str	r3, [sp, #92]	; 0x5c
   27a08:	ldr	r3, [sp, #108]	; 0x6c
   27a0c:	bic	r0, r0, r1
   27a10:	ldr	r1, [sp, #88]	; 0x58
   27a14:	str	r0, [sp, #120]	; 0x78
   27a18:	ldr	r0, [sp, #112]	; 0x70
   27a1c:	bic	r0, r2, r0
   27a20:	ldr	r2, [sp, #80]	; 0x50
   27a24:	str	r0, [sp, #48]	; 0x30
   27a28:	bic	r0, r5, r2
   27a2c:	bic	r2, r2, r5
   27a30:	ldr	r5, [sp, #156]	; 0x9c
   27a34:	str	r0, [sp, #44]	; 0x2c
   27a38:	bic	r0, lr, r1
   27a3c:	str	r2, [sp, #156]	; 0x9c
   27a40:	str	r0, [sp, #40]	; 0x28
   27a44:	ldr	r0, [sp, #160]	; 0xa0
   27a48:	bic	r0, r0, ip
   27a4c:	str	r0, [sp, #32]
   27a50:	bic	r0, r7, sl
   27a54:	str	r0, [sp, #28]
   27a58:	bic	r0, r6, r4
   27a5c:	bic	r4, r4, r6
   27a60:	str	r0, [sp, #24]
   27a64:	ldr	r0, [sp, #92]	; 0x5c
   27a68:	bic	r0, r9, r0
   27a6c:	str	r0, [sp, #36]	; 0x24
   27a70:	ldr	r0, [sp, #124]	; 0x7c
   27a74:	bic	r0, r3, r0
   27a78:	ldr	r3, [sp, #112]	; 0x70
   27a7c:	bic	r3, r3, r5
   27a80:	orr	r5, r3, r0
   27a84:	str	r3, [sp, #132]	; 0x84
   27a88:	orr	r3, r5, r2
   27a8c:	bic	r5, r1, lr
   27a90:	ldr	r1, [sp, #160]	; 0xa0
   27a94:	orr	r2, r3, r5
   27a98:	bic	r3, ip, r1
   27a9c:	bic	r1, sl, r7
   27aa0:	orr	r2, r2, r3
   27aa4:	orr	r7, r2, r1
   27aa8:	orr	r2, r7, r4
   27aac:	ldr	r7, [sp, #92]	; 0x5c
   27ab0:	bic	r7, r7, r9
   27ab4:	orrs	r2, r2, r7
   27ab8:	beq	27b88 <__assert_fail@plt+0x16428>
   27abc:	ldr	r2, [sp, #164]	; 0xa4
   27ac0:	ldr	r6, [sp, #132]	; 0x84
   27ac4:	add	sl, sp, #168	; 0xa8
   27ac8:	sub	lr, fp, #6144	; 0x1800
   27acc:	str	r0, [sl, r2, lsl #5]
   27ad0:	add	r0, sl, r2, lsl #5
   27ad4:	str	r6, [r0, #4]
   27ad8:	ldr	r6, [sp, #156]	; 0x9c
   27adc:	str	r6, [r0, #8]
   27ae0:	str	r5, [r0, #12]
   27ae4:	str	r3, [r0, #16]
   27ae8:	add	r0, r0, #20
   27aec:	stm	r0, {r1, r4, r7}
   27af0:	ldr	r0, [sp, #116]	; 0x74
   27af4:	ldr	r1, [sp, #72]	; 0x48
   27af8:	ldr	r7, [sp, #128]	; 0x80
   27afc:	str	r1, [r0, #-28]	; 0xffffffe4
   27b00:	ldr	r1, [sp, #68]	; 0x44
   27b04:	str	r1, [r8, #4]
   27b08:	ldr	r1, [sp, #76]	; 0x4c
   27b0c:	str	r1, [r8, #8]
   27b10:	ldr	r1, [sp, #64]	; 0x40
   27b14:	str	r1, [r8, #12]
   27b18:	ldr	r1, [sp, #60]	; 0x3c
   27b1c:	str	r1, [r8, #16]
   27b20:	ldr	r1, [sp, #56]	; 0x38
   27b24:	str	r1, [r8, #20]
   27b28:	ldr	r1, [sp, #52]	; 0x34
   27b2c:	str	r1, [r8, #24]
   27b30:	ldr	r1, [sp, #20]
   27b34:	str	r1, [r0]
   27b38:	add	r0, r2, r2, lsl #1
   27b3c:	sub	r1, lr, #104	; 0x68
   27b40:	add	r6, r1, r0, lsl #2
   27b44:	ldr	r0, [r7, #4]
   27b48:	mov	r4, r6
   27b4c:	str	r0, [r4, #4]!
   27b50:	ldr	r5, [r7, #4]
   27b54:	cmp	r5, #1
   27b58:	blt	27ba0 <__assert_fail@plt+0x16440>
   27b5c:	str	r0, [r6]
   27b60:	lsl	r0, r0, #2
   27b64:	bl	2e08c <__assert_fail@plt+0x1c92c>
   27b68:	ldr	r9, [sp, #36]	; 0x24
   27b6c:	cmp	r0, #0
   27b70:	str	r0, [r6, #8]
   27b74:	beq	285bc <__assert_fail@plt+0x16e5c>
   27b78:	ldr	r1, [r7, #8]
   27b7c:	lsl	r2, r5, #2
   27b80:	bl	11484 <memcpy@plt>
   27b84:	b	27bb4 <__assert_fail@plt+0x16454>
   27b88:	ldr	r8, [sp, #96]	; 0x60
   27b8c:	ldr	r5, [sp, #100]	; 0x64
   27b90:	ldr	r4, [sp, #136]	; 0x88
   27b94:	ldr	r7, [sp, #128]	; 0x80
   27b98:	ldr	r9, [sp, #36]	; 0x24
   27b9c:	b	27bcc <__assert_fail@plt+0x1646c>
   27ba0:	ldr	r9, [sp, #36]	; 0x24
   27ba4:	mov	r0, #0
   27ba8:	str	r0, [r6]
   27bac:	str	r0, [r6, #4]
   27bb0:	str	r0, [r6, #8]
   27bb4:	ldr	r0, [sp, #164]	; 0xa4
   27bb8:	ldr	r8, [sp, #96]	; 0x60
   27bbc:	ldr	r5, [sp, #100]	; 0x64
   27bc0:	ldr	r4, [sp, #136]	; 0x88
   27bc4:	add	r0, r0, #1
   27bc8:	str	r0, [sp, #164]	; 0xa4
   27bcc:	ldr	r0, [sp, #104]	; 0x68
   27bd0:	ldr	r0, [r0, #12]
   27bd4:	ldr	r1, [r0, r5, lsl #2]
   27bd8:	mov	r0, r7
   27bdc:	bl	224d8 <__assert_fail@plt+0x10d78>
   27be0:	cmp	r0, #0
   27be4:	beq	28540 <__assert_fail@plt+0x16de0>
   27be8:	ldr	lr, [sp, #120]	; 0x78
   27bec:	ldr	r2, [sp, #48]	; 0x30
   27bf0:	ldr	sl, [sp, #44]	; 0x2c
   27bf4:	ldr	r5, [sp, #40]	; 0x28
   27bf8:	ldr	r7, [sp, #32]
   27bfc:	ldr	r6, [sp, #28]
   27c00:	ldr	r1, [sp, #24]
   27c04:	ldr	ip, [sp, #164]	; 0xa4
   27c08:	str	r9, [sp, #144]	; 0x90
   27c0c:	orr	r0, r2, lr
   27c10:	str	r1, [sp, #152]	; 0x98
   27c14:	str	r6, [sp, #140]	; 0x8c
   27c18:	str	r7, [sp, #160]	; 0xa0
   27c1c:	str	r5, [sp, #148]	; 0x94
   27c20:	orr	r0, r0, sl
   27c24:	orr	r0, r0, r5
   27c28:	orr	r0, r0, r7
   27c2c:	orr	r0, r0, r6
   27c30:	orr	r0, r0, r1
   27c34:	orrs	r0, r0, r9
   27c38:	mov	r0, r2
   27c3c:	bne	27908 <__assert_fail@plt+0x161a8>
   27c40:	str	r9, [sp, #144]	; 0x90
   27c44:	str	r1, [sp, #152]	; 0x98
   27c48:	str	r6, [sp, #140]	; 0x8c
   27c4c:	str	r7, [sp, #160]	; 0xa0
   27c50:	ldr	r0, [sp, #144]	; 0x90
   27c54:	str	ip, [sp, #164]	; 0xa4
   27c58:	str	r0, [fp, #-1052]	; 0xfffffbe4
   27c5c:	ldr	r0, [sp, #152]	; 0x98
   27c60:	str	r0, [fp, #-1056]	; 0xfffffbe0
   27c64:	ldr	r0, [sp, #140]	; 0x8c
   27c68:	str	r0, [fp, #-1060]	; 0xfffffbdc
   27c6c:	ldr	r0, [sp, #160]	; 0xa0
   27c70:	str	r0, [fp, #-1064]	; 0xfffffbd8
   27c74:	ldr	r0, [sp, #40]	; 0x28
   27c78:	str	r0, [fp, #-1068]	; 0xfffffbd4
   27c7c:	ldr	r0, [sp, #44]	; 0x2c
   27c80:	str	r0, [fp, #-1072]	; 0xfffffbd0
   27c84:	ldr	r0, [sp, #48]	; 0x30
   27c88:	str	r0, [fp, #-1076]	; 0xfffffbcc
   27c8c:	ldr	r0, [sp, #120]	; 0x78
   27c90:	str	r0, [fp, #-1080]	; 0xfffffbc8
   27c94:	ldr	r0, [sp, #164]	; 0xa4
   27c98:	ldr	r1, [sp, #100]	; 0x64
   27c9c:	cmp	r4, r0
   27ca0:	bne	26fb0 <__assert_fail@plt+0x15850>
   27ca4:	sub	lr, fp, #1024	; 0x400
   27ca8:	sub	r7, lr, #56	; 0x38
   27cac:	sub	lr, fp, #6144	; 0x1800
   27cb0:	mov	r0, r7
   27cb4:	mov	r8, r7
   27cb8:	sub	r2, lr, #104	; 0x68
   27cbc:	vld1.32	{d16-d17}, [r0]!
   27cc0:	vld1.64	{d18-d19}, [r0]
   27cc4:	add	r0, sp, #168	; 0xa8
   27cc8:	add	r0, r0, r4, lsl #5
   27ccc:	vst1.32	{d16-d17}, [r0]!
   27cd0:	vst1.32	{d18-d19}, [r0]
   27cd4:	ldr	r0, [sp, #104]	; 0x68
   27cd8:	ldr	r0, [r0, #12]
   27cdc:	ldr	r7, [r0, r1, lsl #2]
   27ce0:	add	r0, r4, r4, lsl #1
   27ce4:	mov	r1, #1
   27ce8:	add	r5, r2, r0, lsl #2
   27cec:	str	r1, [r2, r0, lsl #2]
   27cf0:	mov	r0, #4
   27cf4:	mov	r6, r5
   27cf8:	str	r1, [r6, #4]!
   27cfc:	bl	2e08c <__assert_fail@plt+0x1c92c>
   27d00:	cmp	r0, #0
   27d04:	str	r0, [r5, #8]
   27d08:	beq	2868c <__assert_fail@plt+0x16f2c>
   27d0c:	str	r7, [r0]
   27d10:	mov	r0, r8
   27d14:	vst1.64	{d8-d9}, [r0]!
   27d18:	vst1.64	{d8-d9}, [r0]
   27d1c:	add	r0, r4, #1
   27d20:	str	r0, [sp, #164]	; 0xa4
   27d24:	b	26fa8 <__assert_fail@plt+0x15848>
   27d28:	ldr	r0, [sp, #164]	; 0xa4
   27d2c:	cmp	r0, #0
   27d30:	ble	286ac <__assert_fail@plt+0x16f4c>
   27d34:	ldr	r0, [sp, #164]	; 0xa4
   27d38:	mov	r4, #0
   27d3c:	str	r4, [fp, #-3136]	; 0xfffff3c0
   27d40:	add	r0, r0, #1
   27d44:	str	r0, [fp, #-3140]	; 0xfffff3bc
   27d48:	lsl	r0, r0, #2
   27d4c:	bl	2e08c <__assert_fail@plt+0x1c92c>
   27d50:	cmp	r0, #0
   27d54:	str	r0, [fp, #-3132]	; 0xfffff3c4
   27d58:	moveq	r4, #12
   27d5c:	cmp	r0, #0
   27d60:	str	r4, [fp, #-56]	; 0xffffffc8
   27d64:	beq	286e0 <__assert_fail@plt+0x16f80>
   27d68:	vmov.i32	q8, #0	; 0x00000000
   27d6c:	sub	lr, fp, #3072	; 0xc00
   27d70:	mov	r1, #0
   27d74:	mov	r7, #0
   27d78:	mov	r2, #0
   27d7c:	mov	r6, #0
   27d80:	mov	r5, #0
   27d84:	mov	r9, #0
   27d88:	sub	r0, lr, #104	; 0x68
   27d8c:	sub	lr, fp, #3072	; 0xc00
   27d90:	vst1.64	{d16-d17}, [r0]!
   27d94:	vst1.64	{d16-d17}, [r0]
   27d98:	sub	r0, lr, #56	; 0x38
   27d9c:	str	r0, [sp, #128]	; 0x80
   27da0:	mov	r0, #0
   27da4:	str	r0, [sp, #148]	; 0x94
   27da8:	mov	r0, #0
   27dac:	str	r0, [sp, #152]	; 0x98
   27db0:	mov	r0, #0
   27db4:	str	r0, [sp, #156]	; 0x9c
   27db8:	mov	r0, #0
   27dbc:	str	r0, [sp, #160]	; 0xa0
   27dc0:	mov	r0, #0
   27dc4:	str	r0, [sp, #132]	; 0x84
   27dc8:	b	27e94 <__assert_fail@plt+0x16734>
   27dcc:	ldrsb	r0, [r7, #52]	; 0x34
   27dd0:	cmn	r0, #1
   27dd4:	ble	27f6c <__assert_fail@plt+0x1680c>
   27dd8:	sub	lr, fp, #3072	; 0xc00
   27ddc:	sub	r0, lr, #56	; 0x38
   27de0:	sub	lr, fp, #2048	; 0x800
   27de4:	str	r7, [r0, r9, lsl #2]
   27de8:	sub	r0, lr, #56	; 0x38
   27dec:	str	r7, [r0, r9, lsl #2]
   27df0:	add	r0, sp, #168	; 0xa8
   27df4:	ldr	r3, [sp, #148]	; 0x94
   27df8:	ldr	sl, [sp, #164]	; 0xa4
   27dfc:	ldr	r8, [sp, #96]	; 0x60
   27e00:	mov	r2, r0
   27e04:	ldr	r0, [r0, r9, lsl #5]
   27e08:	orr	r5, r5, r0
   27e0c:	add	r0, r2, r9, lsl #5
   27e10:	add	r9, r9, #1
   27e14:	mov	ip, r5
   27e18:	cmp	r9, sl
   27e1c:	ldr	r2, [r0, #4]
   27e20:	ldr	lr, [r0, #8]
   27e24:	ldr	r7, [r0, #12]
   27e28:	ldr	r5, [r0, #16]
   27e2c:	ldr	r4, [r0, #20]
   27e30:	str	r2, [sp, #136]	; 0x88
   27e34:	mov	r2, r6
   27e38:	ldr	r6, [r0, #24]
   27e3c:	ldr	r0, [r0, #28]
   27e40:	orr	r3, r3, r0
   27e44:	ldr	r0, [sp, #152]	; 0x98
   27e48:	str	r3, [sp, #148]	; 0x94
   27e4c:	orr	r0, r0, r6
   27e50:	mov	r6, r2
   27e54:	ldr	r2, [sp, #144]	; 0x90
   27e58:	str	r0, [sp, #152]	; 0x98
   27e5c:	ldr	r0, [sp, #156]	; 0x9c
   27e60:	orr	r2, r2, lr
   27e64:	orr	r0, r0, r4
   27e68:	str	r0, [sp, #156]	; 0x9c
   27e6c:	ldr	r0, [sp, #160]	; 0xa0
   27e70:	orr	r0, r0, r5
   27e74:	mov	r5, ip
   27e78:	str	r0, [sp, #160]	; 0xa0
   27e7c:	ldr	r0, [sp, #140]	; 0x8c
   27e80:	orr	r0, r0, r7
   27e84:	mov	r7, r0
   27e88:	ldr	r0, [sp, #136]	; 0x88
   27e8c:	orr	r6, r6, r0
   27e90:	beq	28034 <__assert_fail@plt+0x168d4>
   27e94:	mov	r0, #0
   27e98:	sub	lr, fp, #6144	; 0x1800
   27e9c:	str	r2, [sp, #144]	; 0x90
   27ea0:	str	r7, [sp, #140]	; 0x8c
   27ea4:	str	r0, [fp, #-3136]	; 0xfffff3c0
   27ea8:	add	r0, r9, r9, lsl #1
   27eac:	sub	r2, lr, #104	; 0x68
   27eb0:	add	r2, r2, r0, lsl #2
   27eb4:	mov	r7, r2
   27eb8:	ldr	r0, [r7, #4]!
   27ebc:	cmp	r0, #1
   27ec0:	blt	27f2c <__assert_fail@plt+0x167cc>
   27ec4:	mov	r4, r9
   27ec8:	add	sl, r2, #8
   27ecc:	mov	r9, #0
   27ed0:	b	27ee8 <__assert_fail@plt+0x16788>
   27ed4:	ldr	r0, [r7]
   27ed8:	mov	r1, #0
   27edc:	add	r9, r9, #1
   27ee0:	cmp	r9, r0
   27ee4:	bge	27f24 <__assert_fail@plt+0x167c4>
   27ee8:	ldr	r2, [sl]
   27eec:	ldr	r3, [r8, #12]
   27ef0:	ldr	r2, [r2, r9, lsl #2]
   27ef4:	ldr	r2, [r3, r2, lsl #2]
   27ef8:	cmn	r2, #1
   27efc:	beq	27edc <__assert_fail@plt+0x1677c>
   27f00:	ldr	r0, [r8, #24]
   27f04:	add	r1, r2, r2, lsl #1
   27f08:	sub	lr, fp, #3072	; 0xc00
   27f0c:	add	r1, r0, r1, lsl #2
   27f10:	sub	r0, lr, #68	; 0x44
   27f14:	bl	22338 <__assert_fail@plt+0x10bd8>
   27f18:	cmp	r0, #0
   27f1c:	beq	27ed4 <__assert_fail@plt+0x16774>
   27f20:	b	284c8 <__assert_fail@plt+0x16d68>
   27f24:	mov	r9, r4
   27f28:	str	r1, [fp, #-56]	; 0xffffffc8
   27f2c:	sub	lr, fp, #3072	; 0xc00
   27f30:	sub	r0, fp, #56	; 0x38
   27f34:	mov	r1, r8
   27f38:	mov	r3, #0
   27f3c:	sub	r2, lr, #68	; 0x44
   27f40:	bl	22658 <__assert_fail@plt+0x10ef8>
   27f44:	ldr	r1, [fp, #-56]	; 0xffffffc8
   27f48:	mov	r7, r0
   27f4c:	sub	lr, fp, #1024	; 0x400
   27f50:	sub	r0, lr, #56	; 0x38
   27f54:	cmp	r7, #0
   27f58:	str	r7, [r0, r9, lsl #2]
   27f5c:	bne	27dcc <__assert_fail@plt+0x1666c>
   27f60:	cmp	r1, #0
   27f64:	beq	27dcc <__assert_fail@plt+0x1666c>
   27f68:	b	28000 <__assert_fail@plt+0x168a0>
   27f6c:	sub	lr, fp, #3072	; 0xc00
   27f70:	sub	r0, fp, #56	; 0x38
   27f74:	mov	r1, r8
   27f78:	mov	r3, #1
   27f7c:	sub	r2, lr, #68	; 0x44
   27f80:	bl	22658 <__assert_fail@plt+0x10ef8>
   27f84:	sub	lr, fp, #2048	; 0x800
   27f88:	cmp	r0, #0
   27f8c:	sub	r1, lr, #56	; 0x38
   27f90:	str	r0, [r1, r9, lsl #2]
   27f94:	bne	27fa4 <__assert_fail@plt+0x16844>
   27f98:	ldr	r1, [fp, #-56]	; 0xffffffc8
   27f9c:	cmp	r1, #0
   27fa0:	bne	28000 <__assert_fail@plt+0x168a0>
   27fa4:	cmp	r7, r0
   27fa8:	beq	27fc8 <__assert_fail@plt+0x16868>
   27fac:	ldr	r0, [r8, #92]	; 0x5c
   27fb0:	ldr	r1, [sp, #132]	; 0x84
   27fb4:	cmp	r0, #1
   27fb8:	mov	r0, #0
   27fbc:	movwgt	r0, #1
   27fc0:	orr	r1, r1, r0
   27fc4:	str	r1, [sp, #132]	; 0x84
   27fc8:	sub	lr, fp, #3072	; 0xc00
   27fcc:	sub	r0, fp, #56	; 0x38
   27fd0:	mov	r1, r8
   27fd4:	mov	r3, #2
   27fd8:	sub	r2, lr, #68	; 0x44
   27fdc:	bl	22658 <__assert_fail@plt+0x10ef8>
   27fe0:	sub	lr, fp, #3072	; 0xc00
   27fe4:	cmp	r0, #0
   27fe8:	sub	r1, lr, #56	; 0x38
   27fec:	str	r0, [r1, r9, lsl #2]
   27ff0:	ldr	r1, [fp, #-56]	; 0xffffffc8
   27ff4:	bne	27df0 <__assert_fail@plt+0x16690>
   27ff8:	cmp	r1, #0
   27ffc:	beq	27df0 <__assert_fail@plt+0x16690>
   28000:	ldr	r0, [sp, #148]	; 0x94
   28004:	str	r0, [fp, #-3148]	; 0xfffff3b4
   28008:	ldr	r0, [sp, #152]	; 0x98
   2800c:	str	r0, [fp, #-3152]	; 0xfffff3b0
   28010:	ldr	r0, [sp, #156]	; 0x9c
   28014:	str	r0, [fp, #-3156]	; 0xfffff3ac
   28018:	ldr	r0, [sp, #160]	; 0xa0
   2801c:	str	r0, [fp, #-3160]	; 0xfffff3a8
   28020:	ldr	r0, [sp, #140]	; 0x8c
   28024:	str	r0, [fp, #-3164]	; 0xfffff3a4
   28028:	ldr	r0, [sp, #144]	; 0x90
   2802c:	str	r0, [fp, #-3168]	; 0xfffff3a0
   28030:	b	284fc <__assert_fail@plt+0x16d9c>
   28034:	ldr	r0, [sp, #148]	; 0x94
   28038:	ldr	r8, [sp, #132]	; 0x84
   2803c:	ldr	r4, [sp, #104]	; 0x68
   28040:	str	r0, [fp, #-3148]	; 0xfffff3b4
   28044:	ldr	r0, [sp, #152]	; 0x98
   28048:	tst	r8, #1
   2804c:	str	r0, [fp, #-3152]	; 0xfffff3b0
   28050:	ldr	r0, [sp, #156]	; 0x9c
   28054:	str	r0, [fp, #-3156]	; 0xfffff3ac
   28058:	ldr	r0, [sp, #160]	; 0xa0
   2805c:	str	r0, [fp, #-3160]	; 0xfffff3a8
   28060:	mov	r0, #4
   28064:	str	r7, [fp, #-3164]	; 0xfffff3a4
   28068:	str	r2, [fp, #-3168]	; 0xfffff3a0
   2806c:	str	r6, [fp, #-3172]	; 0xfffff39c
   28070:	str	r5, [fp, #-3176]	; 0xfffff398
   28074:	bne	286ec <__assert_fail@plt+0x16f8c>
   28078:	mov	r1, #256	; 0x100
   2807c:	bl	2e038 <__assert_fail@plt+0x1c8d8>
   28080:	cmp	r0, #0
   28084:	str	r0, [r4, #44]	; 0x2c
   28088:	beq	28504 <__assert_fail@plt+0x16da4>
   2808c:	ldr	ip, [fp, #-3176]	; 0xfffff398
   28090:	cmp	ip, #0
   28094:	beq	28114 <__assert_fail@plt+0x169b4>
   28098:	mov	r2, #0
   2809c:	mov	r3, #1
   280a0:	mov	r1, ip
   280a4:	mov	r7, #0
   280a8:	tst	r1, #1
   280ac:	bne	280cc <__assert_fail@plt+0x1696c>
   280b0:	lsr	r6, r1, #1
   280b4:	cmp	r2, r1, lsr #1
   280b8:	add	r7, r7, #1
   280bc:	lsl	r3, r3, #1
   280c0:	mov	r1, r6
   280c4:	bne	280a8 <__assert_fail@plt+0x16948>
   280c8:	b	28114 <__assert_fail@plt+0x169b4>
   280cc:	mov	r6, #0
   280d0:	add	r4, sp, #168	; 0xa8
   280d4:	ldr	r5, [r4, r6, lsl #3]
   280d8:	add	r6, r6, #4
   280dc:	tst	r5, r3
   280e0:	beq	280d4 <__assert_fail@plt+0x16974>
   280e4:	ldr	r5, [sp]
   280e8:	sub	lr, fp, #2048	; 0x800
   280ec:	ldr	r5, [r5]
   280f0:	tst	r5, r3
   280f4:	sub	r5, lr, #56	; 0x38
   280f8:	sub	lr, fp, #1024	; 0x400
   280fc:	sub	r4, lr, #56	; 0x38
   28100:	moveq	r5, r4
   28104:	add	r6, r5, r6
   28108:	ldr	r6, [r6, #-4]
   2810c:	str	r6, [r0, r7, lsl #2]
   28110:	b	280b0 <__assert_fail@plt+0x16950>
   28114:	ldr	r2, [fp, #-3172]	; 0xfffff39c
   28118:	cmp	r2, #0
   2811c:	beq	2819c <__assert_fail@plt+0x16a3c>
   28120:	add	r1, sp, #168	; 0xa8
   28124:	mov	r7, #32
   28128:	mov	r6, #1
   2812c:	mov	r5, #0
   28130:	add	lr, r1, #4
   28134:	tst	r2, #1
   28138:	bne	28158 <__assert_fail@plt+0x169f8>
   2813c:	lsr	r1, r2, #1
   28140:	cmp	r5, r2, lsr #1
   28144:	add	r7, r7, #1
   28148:	lsl	r6, r6, #1
   2814c:	mov	r2, r1
   28150:	bne	28134 <__assert_fail@plt+0x169d4>
   28154:	b	2819c <__assert_fail@plt+0x16a3c>
   28158:	mov	r1, #0
   2815c:	ldr	r4, [lr, r1, lsl #3]
   28160:	add	r1, r1, #4
   28164:	tst	r4, r6
   28168:	beq	2815c <__assert_fail@plt+0x169fc>
   2816c:	ldr	r3, [sp, #96]	; 0x60
   28170:	ldr	r4, [r3, #100]	; 0x64
   28174:	sub	r3, fp, #2048	; 0x800
   28178:	tst	r4, r6
   2817c:	sub	r4, r3, #56	; 0x38
   28180:	sub	r3, fp, #1024	; 0x400
   28184:	sub	r3, r3, #56	; 0x38
   28188:	moveq	r4, r3
   2818c:	add	r1, r4, r1
   28190:	ldr	r1, [r1, #-4]
   28194:	str	r1, [r0, r7, lsl #2]
   28198:	b	2813c <__assert_fail@plt+0x169dc>
   2819c:	ldr	r2, [fp, #-3168]	; 0xfffff3a0
   281a0:	cmp	r2, #0
   281a4:	beq	28224 <__assert_fail@plt+0x16ac4>
   281a8:	add	r1, sp, #168	; 0xa8
   281ac:	mov	r7, #64	; 0x40
   281b0:	mov	r6, #1
   281b4:	mov	r5, #0
   281b8:	add	lr, r1, #8
   281bc:	tst	r2, #1
   281c0:	bne	281e0 <__assert_fail@plt+0x16a80>
   281c4:	lsr	r1, r2, #1
   281c8:	cmp	r5, r2, lsr #1
   281cc:	add	r7, r7, #1
   281d0:	lsl	r6, r6, #1
   281d4:	mov	r2, r1
   281d8:	bne	281bc <__assert_fail@plt+0x16a5c>
   281dc:	b	28224 <__assert_fail@plt+0x16ac4>
   281e0:	mov	r1, #0
   281e4:	ldr	r4, [lr, r1, lsl #3]
   281e8:	add	r1, r1, #4
   281ec:	tst	r4, r6
   281f0:	beq	281e4 <__assert_fail@plt+0x16a84>
   281f4:	ldr	r3, [sp, #96]	; 0x60
   281f8:	ldr	r4, [r3, #104]	; 0x68
   281fc:	sub	r3, fp, #2048	; 0x800
   28200:	tst	r4, r6
   28204:	sub	r4, r3, #56	; 0x38
   28208:	sub	r3, fp, #1024	; 0x400
   2820c:	sub	r3, r3, #56	; 0x38
   28210:	moveq	r4, r3
   28214:	add	r1, r4, r1
   28218:	ldr	r1, [r1, #-4]
   2821c:	str	r1, [r0, r7, lsl #2]
   28220:	b	281c4 <__assert_fail@plt+0x16a64>
   28224:	ldr	r2, [fp, #-3164]	; 0xfffff3a4
   28228:	cmp	r2, #0
   2822c:	beq	282ac <__assert_fail@plt+0x16b4c>
   28230:	add	r1, sp, #168	; 0xa8
   28234:	mov	r7, #96	; 0x60
   28238:	mov	r6, #1
   2823c:	mov	r5, #0
   28240:	add	lr, r1, #12
   28244:	tst	r2, #1
   28248:	bne	28268 <__assert_fail@plt+0x16b08>
   2824c:	lsr	r1, r2, #1
   28250:	cmp	r5, r2, lsr #1
   28254:	add	r7, r7, #1
   28258:	lsl	r6, r6, #1
   2825c:	mov	r2, r1
   28260:	bne	28244 <__assert_fail@plt+0x16ae4>
   28264:	b	282ac <__assert_fail@plt+0x16b4c>
   28268:	mov	r1, #0
   2826c:	ldr	r4, [lr, r1, lsl #3]
   28270:	add	r1, r1, #4
   28274:	tst	r4, r6
   28278:	beq	2826c <__assert_fail@plt+0x16b0c>
   2827c:	ldr	r3, [sp, #96]	; 0x60
   28280:	ldr	r4, [r3, #108]	; 0x6c
   28284:	sub	r3, fp, #2048	; 0x800
   28288:	tst	r4, r6
   2828c:	sub	r4, r3, #56	; 0x38
   28290:	sub	r3, fp, #1024	; 0x400
   28294:	sub	r3, r3, #56	; 0x38
   28298:	moveq	r4, r3
   2829c:	add	r1, r4, r1
   282a0:	ldr	r1, [r1, #-4]
   282a4:	str	r1, [r0, r7, lsl #2]
   282a8:	b	2824c <__assert_fail@plt+0x16aec>
   282ac:	ldr	r2, [fp, #-3160]	; 0xfffff3a8
   282b0:	cmp	r2, #0
   282b4:	beq	28334 <__assert_fail@plt+0x16bd4>
   282b8:	add	r1, sp, #168	; 0xa8
   282bc:	mov	r7, #128	; 0x80
   282c0:	mov	r6, #1
   282c4:	mov	r5, #0
   282c8:	add	lr, r1, #16
   282cc:	tst	r2, #1
   282d0:	bne	282f0 <__assert_fail@plt+0x16b90>
   282d4:	lsr	r1, r2, #1
   282d8:	cmp	r5, r2, lsr #1
   282dc:	add	r7, r7, #1
   282e0:	lsl	r6, r6, #1
   282e4:	mov	r2, r1
   282e8:	bne	282cc <__assert_fail@plt+0x16b6c>
   282ec:	b	28334 <__assert_fail@plt+0x16bd4>
   282f0:	mov	r1, #0
   282f4:	ldr	r4, [lr, r1, lsl #3]
   282f8:	add	r1, r1, #4
   282fc:	tst	r4, r6
   28300:	beq	282f4 <__assert_fail@plt+0x16b94>
   28304:	ldr	r3, [sp, #4]
   28308:	ldr	r4, [r3]
   2830c:	sub	r3, fp, #2048	; 0x800
   28310:	tst	r4, r6
   28314:	sub	r4, r3, #56	; 0x38
   28318:	sub	r3, fp, #1024	; 0x400
   2831c:	sub	r3, r3, #56	; 0x38
   28320:	moveq	r4, r3
   28324:	add	r1, r4, r1
   28328:	ldr	r1, [r1, #-4]
   2832c:	str	r1, [r0, r7, lsl #2]
   28330:	b	282d4 <__assert_fail@plt+0x16b74>
   28334:	ldr	r2, [fp, #-3156]	; 0xfffff3ac
   28338:	cmp	r2, #0
   2833c:	beq	283bc <__assert_fail@plt+0x16c5c>
   28340:	add	r1, sp, #168	; 0xa8
   28344:	mov	r7, #160	; 0xa0
   28348:	mov	r6, #1
   2834c:	mov	r5, #0
   28350:	add	lr, r1, #20
   28354:	tst	r2, #1
   28358:	bne	28378 <__assert_fail@plt+0x16c18>
   2835c:	lsr	r1, r2, #1
   28360:	cmp	r5, r2, lsr #1
   28364:	add	r7, r7, #1
   28368:	lsl	r6, r6, #1
   2836c:	mov	r2, r1
   28370:	bne	28354 <__assert_fail@plt+0x16bf4>
   28374:	b	283bc <__assert_fail@plt+0x16c5c>
   28378:	mov	r1, #0
   2837c:	ldr	r4, [lr, r1, lsl #3]
   28380:	add	r1, r1, #4
   28384:	tst	r4, r6
   28388:	beq	2837c <__assert_fail@plt+0x16c1c>
   2838c:	ldr	r3, [sp, #96]	; 0x60
   28390:	ldr	r4, [r3, #116]	; 0x74
   28394:	sub	r3, fp, #2048	; 0x800
   28398:	tst	r4, r6
   2839c:	sub	r4, r3, #56	; 0x38
   283a0:	sub	r3, fp, #1024	; 0x400
   283a4:	sub	r3, r3, #56	; 0x38
   283a8:	moveq	r4, r3
   283ac:	add	r1, r4, r1
   283b0:	ldr	r1, [r1, #-4]
   283b4:	str	r1, [r0, r7, lsl #2]
   283b8:	b	2835c <__assert_fail@plt+0x16bfc>
   283bc:	ldr	r2, [fp, #-3152]	; 0xfffff3b0
   283c0:	cmp	r2, #0
   283c4:	beq	28444 <__assert_fail@plt+0x16ce4>
   283c8:	add	r1, sp, #168	; 0xa8
   283cc:	mov	r7, #192	; 0xc0
   283d0:	mov	r6, #1
   283d4:	mov	r5, #0
   283d8:	add	lr, r1, #24
   283dc:	tst	r2, #1
   283e0:	bne	28400 <__assert_fail@plt+0x16ca0>
   283e4:	lsr	r1, r2, #1
   283e8:	cmp	r5, r2, lsr #1
   283ec:	add	r7, r7, #1
   283f0:	lsl	r6, r6, #1
   283f4:	mov	r2, r1
   283f8:	bne	283dc <__assert_fail@plt+0x16c7c>
   283fc:	b	28444 <__assert_fail@plt+0x16ce4>
   28400:	mov	r1, #0
   28404:	ldr	r4, [lr, r1, lsl #3]
   28408:	add	r1, r1, #4
   2840c:	tst	r4, r6
   28410:	beq	28404 <__assert_fail@plt+0x16ca4>
   28414:	ldr	r3, [sp, #96]	; 0x60
   28418:	ldr	r4, [r3, #120]	; 0x78
   2841c:	sub	r3, fp, #2048	; 0x800
   28420:	tst	r4, r6
   28424:	sub	r4, r3, #56	; 0x38
   28428:	sub	r3, fp, #1024	; 0x400
   2842c:	sub	r3, r3, #56	; 0x38
   28430:	moveq	r4, r3
   28434:	add	r1, r4, r1
   28438:	ldr	r1, [r1, #-4]
   2843c:	str	r1, [r0, r7, lsl #2]
   28440:	b	283e4 <__assert_fail@plt+0x16c84>
   28444:	ldr	r2, [fp, #-3148]	; 0xfffff3b4
   28448:	cmp	r2, #0
   2844c:	beq	28ba4 <__assert_fail@plt+0x17444>
   28450:	mov	r3, #224	; 0xe0
   28454:	mov	r7, #1
   28458:	mov	r6, #0
   2845c:	tst	r2, #1
   28460:	bne	28480 <__assert_fail@plt+0x16d20>
   28464:	lsr	r1, r2, #1
   28468:	cmp	r6, r2, lsr #1
   2846c:	add	r3, r3, #1
   28470:	lsl	r7, r7, #1
   28474:	mov	r2, r1
   28478:	bne	2845c <__assert_fail@plt+0x16cfc>
   2847c:	b	28ba4 <__assert_fail@plt+0x17444>
   28480:	ldr	r4, [sp, #12]
   28484:	mov	r1, #0
   28488:	ldr	r5, [r4, r1, lsl #3]
   2848c:	add	r1, r1, #4
   28490:	tst	r5, r7
   28494:	beq	28488 <__assert_fail@plt+0x16d28>
   28498:	ldr	r5, [sp, #96]	; 0x60
   2849c:	sub	lr, fp, #2048	; 0x800
   284a0:	ldr	r5, [r5, #124]	; 0x7c
   284a4:	tst	r5, r7
   284a8:	sub	r5, lr, #56	; 0x38
   284ac:	sub	lr, fp, #1024	; 0x400
   284b0:	sub	r4, lr, #56	; 0x38
   284b4:	moveq	r5, r4
   284b8:	add	r1, r5, r1
   284bc:	ldr	r1, [r1, #-4]
   284c0:	str	r1, [r0, r3, lsl #2]
   284c4:	b	28464 <__assert_fail@plt+0x16d04>
   284c8:	ldr	r1, [sp, #148]	; 0x94
   284cc:	str	r0, [fp, #-56]	; 0xffffffc8
   284d0:	str	r1, [fp, #-3148]	; 0xfffff3b4
   284d4:	ldr	r1, [sp, #152]	; 0x98
   284d8:	str	r1, [fp, #-3152]	; 0xfffff3b0
   284dc:	ldr	r1, [sp, #156]	; 0x9c
   284e0:	str	r1, [fp, #-3156]	; 0xfffff3ac
   284e4:	ldr	r1, [sp, #160]	; 0xa0
   284e8:	str	r1, [fp, #-3160]	; 0xfffff3a8
   284ec:	ldr	r1, [sp, #140]	; 0x8c
   284f0:	str	r1, [fp, #-3164]	; 0xfffff3a4
   284f4:	ldr	r1, [sp, #144]	; 0x90
   284f8:	str	r1, [fp, #-3168]	; 0xfffff3a0
   284fc:	str	r6, [fp, #-3172]	; 0xfffff39c
   28500:	str	r5, [fp, #-3176]	; 0xfffff398
   28504:	ldr	r0, [fp, #-3132]	; 0xfffff3c4
   28508:	bl	144c0 <__assert_fail@plt+0x2d60>
   2850c:	ldr	r0, [sp, #164]	; 0xa4
   28510:	cmp	r0, #1
   28514:	blt	28678 <__assert_fail@plt+0x16f18>
   28518:	sub	lr, fp, #6144	; 0x1800
   2851c:	sub	r0, lr, #104	; 0x68
   28520:	add	r4, r0, #8
   28524:	ldr	r0, [r4], #12
   28528:	bl	144c0 <__assert_fail@plt+0x2d60>
   2852c:	ldr	r0, [sp, #164]	; 0xa4
   28530:	subs	r0, r0, #1
   28534:	str	r0, [sp, #164]	; 0xa4
   28538:	bne	28524 <__assert_fail@plt+0x16dc4>
   2853c:	b	28678 <__assert_fail@plt+0x16f18>
   28540:	ldr	r0, [sp, #24]
   28544:	str	r9, [fp, #-1052]	; 0xfffffbe4
   28548:	str	r0, [fp, #-1056]	; 0xfffffbe0
   2854c:	ldr	r0, [sp, #28]
   28550:	str	r0, [fp, #-1060]	; 0xfffffbdc
   28554:	ldr	r0, [sp, #32]
   28558:	str	r0, [fp, #-1064]	; 0xfffffbd8
   2855c:	ldr	r0, [sp, #40]	; 0x28
   28560:	str	r0, [fp, #-1068]	; 0xfffffbd4
   28564:	ldr	r0, [sp, #44]	; 0x2c
   28568:	str	r0, [fp, #-1072]	; 0xfffffbd0
   2856c:	ldr	r0, [sp, #48]	; 0x30
   28570:	str	r0, [fp, #-1076]	; 0xfffffbcc
   28574:	ldr	r0, [sp, #120]	; 0x78
   28578:	b	285a8 <__assert_fail@plt+0x16e48>
   2857c:	ldr	r0, [sp, #36]	; 0x24
   28580:	str	sl, [fp, #-1052]	; 0xfffffbe4
   28584:	str	r0, [fp, #-1056]	; 0xfffffbe0
   28588:	ldr	r0, [sp, #52]	; 0x34
   2858c:	str	r7, [fp, #-1060]	; 0xfffffbdc
   28590:	str	r9, [fp, #-1064]	; 0xfffffbd8
   28594:	str	r5, [fp, #-1068]	; 0xfffffbd4
   28598:	str	r0, [fp, #-1072]	; 0xfffffbd0
   2859c:	ldr	r0, [sp, #56]	; 0x38
   285a0:	str	r0, [fp, #-1076]	; 0xfffffbcc
   285a4:	ldr	r0, [sp, #60]	; 0x3c
   285a8:	str	r0, [fp, #-1080]	; 0xfffffbc8
   285ac:	ldr	r0, [sp, #164]	; 0xa4
   285b0:	cmp	r0, #1
   285b4:	bge	28654 <__assert_fail@plt+0x16ef4>
   285b8:	b	28678 <__assert_fail@plt+0x16f18>
   285bc:	ldr	r0, [sp, #24]
   285c0:	str	r9, [fp, #-1052]	; 0xfffffbe4
   285c4:	str	r0, [fp, #-1056]	; 0xfffffbe0
   285c8:	ldr	r0, [sp, #28]
   285cc:	str	r0, [fp, #-1060]	; 0xfffffbdc
   285d0:	ldr	r0, [sp, #32]
   285d4:	str	r0, [fp, #-1064]	; 0xfffffbd8
   285d8:	ldr	r0, [sp, #40]	; 0x28
   285dc:	str	r0, [fp, #-1068]	; 0xfffffbd4
   285e0:	ldr	r0, [sp, #44]	; 0x2c
   285e4:	str	r0, [fp, #-1072]	; 0xfffffbd0
   285e8:	ldr	r0, [sp, #48]	; 0x30
   285ec:	str	r0, [fp, #-1076]	; 0xfffffbcc
   285f0:	ldr	r0, [sp, #120]	; 0x78
   285f4:	b	28628 <__assert_fail@plt+0x16ec8>
   285f8:	ldr	r0, [sp, #36]	; 0x24
   285fc:	str	sl, [fp, #-1052]	; 0xfffffbe4
   28600:	str	r0, [fp, #-1056]	; 0xfffffbe0
   28604:	ldr	r0, [sp, #48]	; 0x30
   28608:	str	r7, [fp, #-1060]	; 0xfffffbdc
   2860c:	str	r9, [fp, #-1064]	; 0xfffffbd8
   28610:	str	r0, [fp, #-1068]	; 0xfffffbd4
   28614:	ldr	r0, [sp, #52]	; 0x34
   28618:	str	r0, [fp, #-1072]	; 0xfffffbd0
   2861c:	ldr	r0, [sp, #56]	; 0x38
   28620:	str	r0, [fp, #-1076]	; 0xfffffbcc
   28624:	ldr	r0, [sp, #60]	; 0x3c
   28628:	ldr	r1, [sp, #164]	; 0xa4
   2862c:	sub	lr, fp, #6144	; 0x1800
   28630:	str	r0, [fp, #-1080]	; 0xfffffbc8
   28634:	mov	r0, #0
   28638:	sub	r2, lr, #104	; 0x68
   2863c:	str	r0, [r4]
   28640:	add	r1, r1, r1, lsl #1
   28644:	str	r0, [r2, r1, lsl #2]
   28648:	ldr	r0, [sp, #164]	; 0xa4
   2864c:	cmp	r0, #1
   28650:	blt	28678 <__assert_fail@plt+0x16f18>
   28654:	sub	lr, fp, #6144	; 0x1800
   28658:	sub	r0, lr, #104	; 0x68
   2865c:	add	r4, r0, #8
   28660:	ldr	r0, [r4], #12
   28664:	bl	144c0 <__assert_fail@plt+0x2d60>
   28668:	ldr	r0, [sp, #164]	; 0xa4
   2866c:	subs	r0, r0, #1
   28670:	str	r0, [sp, #164]	; 0xa4
   28674:	bne	28660 <__assert_fail@plt+0x16f00>
   28678:	mov	r0, #0
   2867c:	sub	sp, fp, #48	; 0x30
   28680:	vpop	{d8-d9}
   28684:	add	sp, sp, #4
   28688:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2868c:	mov	r0, #0
   28690:	str	r4, [sp, #164]	; 0xa4
   28694:	str	r0, [r6]
   28698:	str	r0, [r5]
   2869c:	ldr	r0, [sp, #164]	; 0xa4
   286a0:	cmp	r0, #1
   286a4:	bge	28654 <__assert_fail@plt+0x16ef4>
   286a8:	b	28678 <__assert_fail@plt+0x16f18>
   286ac:	mov	r0, #0
   286b0:	bne	286d0 <__assert_fail@plt+0x16f70>
   286b4:	mov	r0, #4
   286b8:	mov	r1, #256	; 0x100
   286bc:	bl	2e038 <__assert_fail@plt+0x1c8d8>
   286c0:	ldr	r1, [sp, #104]	; 0x68
   286c4:	cmp	r0, #0
   286c8:	str	r0, [r1, #44]	; 0x2c
   286cc:	movwne	r0, #1
   286d0:	sub	sp, fp, #48	; 0x30
   286d4:	vpop	{d8-d9}
   286d8:	add	sp, sp, #4
   286dc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   286e0:	ldr	r0, [fp, #-3132]	; 0xfffff3c4
   286e4:	bl	144c0 <__assert_fail@plt+0x2d60>
   286e8:	b	28518 <__assert_fail@plt+0x16db8>
   286ec:	mov	r1, #512	; 0x200
   286f0:	bl	2e038 <__assert_fail@plt+0x1c8d8>
   286f4:	cmp	r0, #0
   286f8:	str	r0, [r4, #48]	; 0x30
   286fc:	beq	28504 <__assert_fail@plt+0x16da4>
   28700:	ldr	ip, [fp, #-3176]	; 0xfffff398
   28704:	cmp	ip, #0
   28708:	beq	28794 <__assert_fail@plt+0x17034>
   2870c:	sub	lr, fp, #1024	; 0x400
   28710:	mov	r7, #0
   28714:	mov	r6, #1
   28718:	add	r4, sp, #168	; 0xa8
   2871c:	mov	r5, ip
   28720:	sub	r1, lr, #56	; 0x38
   28724:	sub	lr, r1, #4
   28728:	sub	r1, fp, #2048	; 0x800
   2872c:	sub	r1, r1, #56	; 0x38
   28730:	sub	r8, r1, #4
   28734:	mov	r1, #0
   28738:	tst	r5, #1
   2873c:	bne	2875c <__assert_fail@plt+0x16ffc>
   28740:	lsr	r2, r5, #1
   28744:	cmp	r7, r5, lsr #1
   28748:	add	r1, r1, #1
   2874c:	lsl	r6, r6, #1
   28750:	mov	r5, r2
   28754:	bne	28738 <__assert_fail@plt+0x16fd8>
   28758:	b	28794 <__assert_fail@plt+0x17034>
   2875c:	mov	r3, r4
   28760:	mov	sl, lr
   28764:	mov	r9, r8
   28768:	ldr	r2, [r3], #32
   2876c:	add	sl, sl, #4
   28770:	add	r9, r9, #4
   28774:	tst	r2, r6
   28778:	beq	28768 <__assert_fail@plt+0x17008>
   2877c:	ldr	r2, [sl]
   28780:	mov	r3, r0
   28784:	str	r2, [r3, r1, lsl #2]!
   28788:	ldr	r2, [r9]
   2878c:	str	r2, [r3, #1024]	; 0x400
   28790:	b	28740 <__assert_fail@plt+0x16fe0>
   28794:	ldr	r2, [fp, #-3172]	; 0xfffff39c
   28798:	cmp	r2, #0
   2879c:	beq	28828 <__assert_fail@plt+0x170c8>
   287a0:	add	r1, sp, #168	; 0xa8
   287a4:	sub	lr, fp, #2048	; 0x800
   287a8:	mov	r5, #32
   287ac:	mov	r3, #0
   287b0:	add	r4, r1, #4
   287b4:	sub	r1, lr, #56	; 0x38
   287b8:	sub	lr, r1, #4
   287bc:	sub	r1, fp, #1024	; 0x400
   287c0:	sub	r1, r1, #56	; 0x38
   287c4:	sub	r8, r1, #4
   287c8:	mov	r1, #1
   287cc:	tst	r2, #1
   287d0:	bne	287f0 <__assert_fail@plt+0x17090>
   287d4:	lsr	r6, r2, #1
   287d8:	cmp	r3, r2, lsr #1
   287dc:	add	r5, r5, #1
   287e0:	lsl	r1, r1, #1
   287e4:	mov	r2, r6
   287e8:	bne	287cc <__assert_fail@plt+0x1706c>
   287ec:	b	28828 <__assert_fail@plt+0x170c8>
   287f0:	mov	r7, r4
   287f4:	mov	r9, lr
   287f8:	mov	sl, r8
   287fc:	ldr	r6, [r7], #32
   28800:	add	r9, r9, #4
   28804:	add	sl, sl, #4
   28808:	tst	r6, r1
   2880c:	beq	287fc <__assert_fail@plt+0x1709c>
   28810:	ldr	r6, [sl]
   28814:	mov	r7, r0
   28818:	str	r6, [r7, r5, lsl #2]!
   2881c:	ldr	r6, [r9]
   28820:	str	r6, [r7, #1024]	; 0x400
   28824:	b	287d4 <__assert_fail@plt+0x17074>
   28828:	ldr	r2, [fp, #-3168]	; 0xfffff3a0
   2882c:	cmp	r2, #0
   28830:	beq	288bc <__assert_fail@plt+0x1715c>
   28834:	add	r1, sp, #168	; 0xa8
   28838:	sub	lr, fp, #2048	; 0x800
   2883c:	mov	r5, #64	; 0x40
   28840:	mov	r3, #0
   28844:	add	r4, r1, #8
   28848:	sub	r1, lr, #56	; 0x38
   2884c:	sub	lr, r1, #4
   28850:	sub	r1, fp, #1024	; 0x400
   28854:	sub	r1, r1, #56	; 0x38
   28858:	sub	r8, r1, #4
   2885c:	mov	r1, #1
   28860:	tst	r2, #1
   28864:	bne	28884 <__assert_fail@plt+0x17124>
   28868:	lsr	r6, r2, #1
   2886c:	cmp	r3, r2, lsr #1
   28870:	add	r5, r5, #1
   28874:	lsl	r1, r1, #1
   28878:	mov	r2, r6
   2887c:	bne	28860 <__assert_fail@plt+0x17100>
   28880:	b	288bc <__assert_fail@plt+0x1715c>
   28884:	mov	r7, r4
   28888:	mov	r9, lr
   2888c:	mov	sl, r8
   28890:	ldr	r6, [r7], #32
   28894:	add	r9, r9, #4
   28898:	add	sl, sl, #4
   2889c:	tst	r6, r1
   288a0:	beq	28890 <__assert_fail@plt+0x17130>
   288a4:	ldr	r6, [sl]
   288a8:	mov	r7, r0
   288ac:	str	r6, [r7, r5, lsl #2]!
   288b0:	ldr	r6, [r9]
   288b4:	str	r6, [r7, #1024]	; 0x400
   288b8:	b	28868 <__assert_fail@plt+0x17108>
   288bc:	ldr	r2, [fp, #-3164]	; 0xfffff3a4
   288c0:	cmp	r2, #0
   288c4:	beq	28950 <__assert_fail@plt+0x171f0>
   288c8:	add	r1, sp, #168	; 0xa8
   288cc:	sub	lr, fp, #2048	; 0x800
   288d0:	mov	r5, #96	; 0x60
   288d4:	mov	r3, #0
   288d8:	add	r4, r1, #12
   288dc:	sub	r1, lr, #56	; 0x38
   288e0:	sub	lr, r1, #4
   288e4:	sub	r1, fp, #1024	; 0x400
   288e8:	sub	r1, r1, #56	; 0x38
   288ec:	sub	r8, r1, #4
   288f0:	mov	r1, #1
   288f4:	tst	r2, #1
   288f8:	bne	28918 <__assert_fail@plt+0x171b8>
   288fc:	lsr	r6, r2, #1
   28900:	cmp	r3, r2, lsr #1
   28904:	add	r5, r5, #1
   28908:	lsl	r1, r1, #1
   2890c:	mov	r2, r6
   28910:	bne	288f4 <__assert_fail@plt+0x17194>
   28914:	b	28950 <__assert_fail@plt+0x171f0>
   28918:	mov	r7, r4
   2891c:	mov	r9, lr
   28920:	mov	sl, r8
   28924:	ldr	r6, [r7], #32
   28928:	add	r9, r9, #4
   2892c:	add	sl, sl, #4
   28930:	tst	r6, r1
   28934:	beq	28924 <__assert_fail@plt+0x171c4>
   28938:	ldr	r6, [sl]
   2893c:	mov	r7, r0
   28940:	str	r6, [r7, r5, lsl #2]!
   28944:	ldr	r6, [r9]
   28948:	str	r6, [r7, #1024]	; 0x400
   2894c:	b	288fc <__assert_fail@plt+0x1719c>
   28950:	ldr	r2, [fp, #-3160]	; 0xfffff3a8
   28954:	cmp	r2, #0
   28958:	beq	289e4 <__assert_fail@plt+0x17284>
   2895c:	add	r1, sp, #168	; 0xa8
   28960:	sub	lr, fp, #2048	; 0x800
   28964:	mov	r5, #128	; 0x80
   28968:	mov	r3, #0
   2896c:	add	r4, r1, #16
   28970:	sub	r1, lr, #56	; 0x38
   28974:	sub	lr, r1, #4
   28978:	sub	r1, fp, #1024	; 0x400
   2897c:	sub	r1, r1, #56	; 0x38
   28980:	sub	r8, r1, #4
   28984:	mov	r1, #1
   28988:	tst	r2, #1
   2898c:	bne	289ac <__assert_fail@plt+0x1724c>
   28990:	lsr	r6, r2, #1
   28994:	cmp	r3, r2, lsr #1
   28998:	add	r5, r5, #1
   2899c:	lsl	r1, r1, #1
   289a0:	mov	r2, r6
   289a4:	bne	28988 <__assert_fail@plt+0x17228>
   289a8:	b	289e4 <__assert_fail@plt+0x17284>
   289ac:	mov	r7, r4
   289b0:	mov	r9, lr
   289b4:	mov	sl, r8
   289b8:	ldr	r6, [r7], #32
   289bc:	add	r9, r9, #4
   289c0:	add	sl, sl, #4
   289c4:	tst	r6, r1
   289c8:	beq	289b8 <__assert_fail@plt+0x17258>
   289cc:	ldr	r6, [sl]
   289d0:	mov	r7, r0
   289d4:	str	r6, [r7, r5, lsl #2]!
   289d8:	ldr	r6, [r9]
   289dc:	str	r6, [r7, #1024]	; 0x400
   289e0:	b	28990 <__assert_fail@plt+0x17230>
   289e4:	ldr	r2, [fp, #-3156]	; 0xfffff3ac
   289e8:	cmp	r2, #0
   289ec:	beq	28a78 <__assert_fail@plt+0x17318>
   289f0:	add	r1, sp, #168	; 0xa8
   289f4:	sub	lr, fp, #2048	; 0x800
   289f8:	mov	r5, #160	; 0xa0
   289fc:	mov	r3, #0
   28a00:	add	r4, r1, #20
   28a04:	sub	r1, lr, #56	; 0x38
   28a08:	sub	lr, r1, #4
   28a0c:	sub	r1, fp, #1024	; 0x400
   28a10:	sub	r1, r1, #56	; 0x38
   28a14:	sub	r8, r1, #4
   28a18:	mov	r1, #1
   28a1c:	tst	r2, #1
   28a20:	bne	28a40 <__assert_fail@plt+0x172e0>
   28a24:	lsr	r6, r2, #1
   28a28:	cmp	r3, r2, lsr #1
   28a2c:	add	r5, r5, #1
   28a30:	lsl	r1, r1, #1
   28a34:	mov	r2, r6
   28a38:	bne	28a1c <__assert_fail@plt+0x172bc>
   28a3c:	b	28a78 <__assert_fail@plt+0x17318>
   28a40:	mov	r7, r4
   28a44:	mov	r9, lr
   28a48:	mov	sl, r8
   28a4c:	ldr	r6, [r7], #32
   28a50:	add	r9, r9, #4
   28a54:	add	sl, sl, #4
   28a58:	tst	r6, r1
   28a5c:	beq	28a4c <__assert_fail@plt+0x172ec>
   28a60:	ldr	r6, [sl]
   28a64:	mov	r7, r0
   28a68:	str	r6, [r7, r5, lsl #2]!
   28a6c:	ldr	r6, [r9]
   28a70:	str	r6, [r7, #1024]	; 0x400
   28a74:	b	28a24 <__assert_fail@plt+0x172c4>
   28a78:	ldr	r2, [fp, #-3152]	; 0xfffff3b0
   28a7c:	cmp	r2, #0
   28a80:	beq	28b0c <__assert_fail@plt+0x173ac>
   28a84:	add	r1, sp, #168	; 0xa8
   28a88:	sub	lr, fp, #2048	; 0x800
   28a8c:	mov	r5, #192	; 0xc0
   28a90:	mov	r3, #0
   28a94:	add	r4, r1, #24
   28a98:	sub	r1, lr, #56	; 0x38
   28a9c:	sub	lr, r1, #4
   28aa0:	sub	r1, fp, #1024	; 0x400
   28aa4:	sub	r1, r1, #56	; 0x38
   28aa8:	sub	r8, r1, #4
   28aac:	mov	r1, #1
   28ab0:	tst	r2, #1
   28ab4:	bne	28ad4 <__assert_fail@plt+0x17374>
   28ab8:	lsr	r6, r2, #1
   28abc:	cmp	r3, r2, lsr #1
   28ac0:	add	r5, r5, #1
   28ac4:	lsl	r1, r1, #1
   28ac8:	mov	r2, r6
   28acc:	bne	28ab0 <__assert_fail@plt+0x17350>
   28ad0:	b	28b0c <__assert_fail@plt+0x173ac>
   28ad4:	mov	r7, r4
   28ad8:	mov	r9, lr
   28adc:	mov	sl, r8
   28ae0:	ldr	r6, [r7], #32
   28ae4:	add	r9, r9, #4
   28ae8:	add	sl, sl, #4
   28aec:	tst	r6, r1
   28af0:	beq	28ae0 <__assert_fail@plt+0x17380>
   28af4:	ldr	r6, [sl]
   28af8:	mov	r7, r0
   28afc:	str	r6, [r7, r5, lsl #2]!
   28b00:	ldr	r6, [r9]
   28b04:	str	r6, [r7, #1024]	; 0x400
   28b08:	b	28ab8 <__assert_fail@plt+0x17358>
   28b0c:	ldr	r2, [fp, #-3148]	; 0xfffff3b4
   28b10:	cmp	r2, #0
   28b14:	beq	28ba0 <__assert_fail@plt+0x17440>
   28b18:	add	r1, sp, #168	; 0xa8
   28b1c:	sub	lr, fp, #2048	; 0x800
   28b20:	mov	r5, #224	; 0xe0
   28b24:	mov	r3, #0
   28b28:	add	r4, r1, #28
   28b2c:	sub	r1, lr, #56	; 0x38
   28b30:	sub	lr, r1, #4
   28b34:	sub	r1, fp, #1024	; 0x400
   28b38:	sub	r1, r1, #56	; 0x38
   28b3c:	sub	r8, r1, #4
   28b40:	mov	r1, #1
   28b44:	tst	r2, #1
   28b48:	bne	28b68 <__assert_fail@plt+0x17408>
   28b4c:	lsr	r6, r2, #1
   28b50:	cmp	r3, r2, lsr #1
   28b54:	add	r5, r5, #1
   28b58:	lsl	r1, r1, #1
   28b5c:	mov	r2, r6
   28b60:	bne	28b44 <__assert_fail@plt+0x173e4>
   28b64:	b	28ba0 <__assert_fail@plt+0x17440>
   28b68:	mov	r7, r4
   28b6c:	mov	r9, lr
   28b70:	mov	sl, r8
   28b74:	ldr	r6, [r7], #32
   28b78:	add	r9, r9, #4
   28b7c:	add	sl, sl, #4
   28b80:	tst	r6, r1
   28b84:	beq	28b74 <__assert_fail@plt+0x17414>
   28b88:	ldr	r6, [sl]
   28b8c:	mov	r7, r0
   28b90:	str	r6, [r7, r5, lsl #2]!
   28b94:	ldr	r6, [r9]
   28b98:	str	r6, [r7, #1024]	; 0x400
   28b9c:	b	28b4c <__assert_fail@plt+0x173ec>
   28ba0:	ldr	r8, [sp, #132]	; 0x84
   28ba4:	tst	ip, #1024	; 0x400
   28ba8:	add	r3, sp, #168	; 0xa8
   28bac:	beq	28bf0 <__assert_fail@plt+0x17490>
   28bb0:	ldr	r1, [sp, #164]	; 0xa4
   28bb4:	ldrb	r2, [r3, #1]
   28bb8:	tst	r2, #4
   28bbc:	bne	28bdc <__assert_fail@plt+0x1747c>
   28bc0:	ldr	r2, [sp, #128]	; 0x80
   28bc4:	add	r3, r3, #32
   28bc8:	subs	r1, r1, #1
   28bcc:	add	r2, r2, #4
   28bd0:	str	r2, [sp, #128]	; 0x80
   28bd4:	bne	28bb4 <__assert_fail@plt+0x17454>
   28bd8:	b	28bf0 <__assert_fail@plt+0x17490>
   28bdc:	ldr	r1, [sp, #128]	; 0x80
   28be0:	tst	r8, #1
   28be4:	ldr	r1, [r1]
   28be8:	str	r1, [r0, #40]	; 0x28
   28bec:	strne	r1, [r0, #1064]	; 0x428
   28bf0:	ldr	r0, [fp, #-3132]	; 0xfffff3c4
   28bf4:	bl	144c0 <__assert_fail@plt+0x2d60>
   28bf8:	sub	lr, fp, #6144	; 0x1800
   28bfc:	sub	r0, lr, #104	; 0x68
   28c00:	add	r4, r0, #8
   28c04:	ldr	r0, [r4], #12
   28c08:	bl	144c0 <__assert_fail@plt+0x2d60>
   28c0c:	ldr	r0, [sp, #164]	; 0xa4
   28c10:	subs	r0, r0, #1
   28c14:	str	r0, [sp, #164]	; 0xa4
   28c18:	bne	28c04 <__assert_fail@plt+0x174a4>
   28c1c:	mov	r0, #1
   28c20:	sub	sp, fp, #48	; 0x30
   28c24:	vpop	{d8-d9}
   28c28:	add	sp, sp, #4
   28c2c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   28c30:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   28c34:	add	fp, sp, #28
   28c38:	sub	sp, sp, #68	; 0x44
   28c3c:	ldr	r4, [r1, #8]
   28c40:	ldr	r6, [r1, #12]
   28c44:	mov	r8, r0
   28c48:	mov	r0, #1
   28c4c:	mov	r5, r1
   28c50:	str	r0, [fp, #-36]	; 0xffffffdc
   28c54:	str	r0, [fp, #-40]	; 0xffffffd8
   28c58:	mov	r0, #4
   28c5c:	bl	2e08c <__assert_fail@plt+0x1c92c>
   28c60:	cmp	r0, #0
   28c64:	str	r0, [fp, #-32]	; 0xffffffe0
   28c68:	beq	29348 <__assert_fail@plt+0x17be8>
   28c6c:	str	r4, [r0]
   28c70:	sub	r3, fp, #40	; 0x28
   28c74:	mov	r0, r8
   28c78:	mov	r1, r5
   28c7c:	mov	r2, r6
   28c80:	str	r5, [sp, #28]
   28c84:	bl	2936c <__assert_fail@plt+0x17c0c>
   28c88:	cmp	r0, #0
   28c8c:	bne	29340 <__assert_fail@plt+0x17be0>
   28c90:	mov	r4, r6
   28c94:	mov	r9, #1
   28c98:	mov	r1, #0
   28c9c:	str	r8, [sp, #48]	; 0x30
   28ca0:	cmp	r4, #1
   28ca4:	bge	28cd4 <__assert_fail@plt+0x17574>
   28ca8:	b	29300 <__assert_fail@plt+0x17ba0>
   28cac:	mov	r0, r8
   28cb0:	mov	r1, lr
   28cb4:	mov	r2, r4
   28cb8:	sub	r3, fp, #40	; 0x28
   28cbc:	bl	2936c <__assert_fail@plt+0x17c0c>
   28cc0:	ldr	r1, [sp, #4]
   28cc4:	cmp	r0, #0
   28cc8:	bne	29340 <__assert_fail@plt+0x17be0>
   28ccc:	cmp	r4, #1
   28cd0:	blt	29300 <__assert_fail@plt+0x17ba0>
   28cd4:	ldr	lr, [sp, #28]
   28cd8:	ldr	r0, [lr]
   28cdc:	ldr	r2, [r0, r4, lsl #2]
   28ce0:	cmp	r2, #0
   28ce4:	mov	r2, #0
   28ce8:	addeq	r2, r1, #1
   28cec:	ldr	r1, [r8, #120]	; 0x78
   28cf0:	cmp	r2, r1
   28cf4:	bgt	29308 <__assert_fail@plt+0x17ba8>
   28cf8:	mov	r0, #0
   28cfc:	str	r4, [sp, #36]	; 0x24
   28d00:	sub	r4, r4, #1
   28d04:	str	r2, [sp, #4]
   28d08:	str	r0, [fp, #-36]	; 0xffffffdc
   28d0c:	ldr	r0, [r8, #100]	; 0x64
   28d10:	ldr	r1, [r0, r4, lsl #2]
   28d14:	cmp	r1, #0
   28d18:	beq	28cac <__assert_fail@plt+0x1754c>
   28d1c:	ldr	r0, [r1, #20]
   28d20:	cmp	r0, #1
   28d24:	blt	28cac <__assert_fail@plt+0x1754c>
   28d28:	ldr	r0, [r8, #84]	; 0x54
   28d2c:	mov	r2, #0
   28d30:	str	r4, [sp, #32]
   28d34:	str	r1, [sp, #16]
   28d38:	str	r0, [sp, #24]
   28d3c:	b	28d88 <__assert_fail@plt+0x17628>
   28d40:	ldr	r2, [fp, #-40]	; 0xffffffd8
   28d44:	cmp	r2, #0
   28d48:	beq	28fd0 <__assert_fail@plt+0x17870>
   28d4c:	ldr	r1, [fp, #-36]	; 0xffffffdc
   28d50:	ldr	r6, [fp, #-44]	; 0xffffffd4
   28d54:	cmp	r1, #0
   28d58:	bne	29208 <__assert_fail@plt+0x17aa8>
   28d5c:	ldr	r0, [fp, #-32]	; 0xffffffe0
   28d60:	str	r6, [r0]
   28d64:	ldr	r0, [fp, #-36]	; 0xffffffdc
   28d68:	add	r0, r0, #1
   28d6c:	str	r0, [fp, #-36]	; 0xffffffdc
   28d70:	ldr	r1, [sp, #16]
   28d74:	ldr	r2, [sp, #20]
   28d78:	ldr	r0, [r1, #20]
   28d7c:	add	r2, r2, #1
   28d80:	cmp	r2, r0
   28d84:	bge	28cac <__assert_fail@plt+0x1754c>
   28d88:	ldr	r0, [r1, #24]
   28d8c:	str	r2, [sp, #20]
   28d90:	ldr	r2, [r0, r2, lsl #2]
   28d94:	ldr	r0, [sp, #24]
   28d98:	ldr	r0, [r0]
   28d9c:	mov	r1, r2
   28da0:	str	r2, [fp, #-44]	; 0xffffffd4
   28da4:	add	r0, r0, r2, lsl #3
   28da8:	ldrb	r0, [r0, #6]
   28dac:	tst	r0, #16
   28db0:	bne	28e50 <__assert_fail@plt+0x176f0>
   28db4:	ldr	r0, [sp, #24]
   28db8:	ldr	r1, [fp, #-44]	; 0xffffffd4
   28dbc:	mov	r2, r4
   28dc0:	ldr	r0, [r0]
   28dc4:	add	r1, r0, r1, lsl #3
   28dc8:	mov	r0, r8
   28dcc:	bl	26ce0 <__assert_fail@plt+0x15580>
   28dd0:	ldr	lr, [sp, #28]
   28dd4:	cmp	r0, #0
   28dd8:	beq	28d70 <__assert_fail@plt+0x17610>
   28ddc:	ldr	r0, [lr]
   28de0:	ldr	r1, [sp, #36]	; 0x24
   28de4:	ldr	r0, [r0, r1, lsl #2]
   28de8:	cmp	r0, #0
   28dec:	beq	28d70 <__assert_fail@plt+0x17610>
   28df0:	ldr	r2, [r0, #8]
   28df4:	cmp	r2, #1
   28df8:	blt	28d70 <__assert_fail@plt+0x17610>
   28dfc:	ldr	r1, [sp, #24]
   28e00:	ldr	r3, [fp, #-44]	; 0xffffffd4
   28e04:	ldr	r0, [r0, #12]
   28e08:	ldr	r1, [r1, #12]
   28e0c:	ldr	r1, [r1, r3, lsl #2]
   28e10:	subs	r3, r2, #1
   28e14:	mov	r2, #0
   28e18:	beq	28e3c <__assert_fail@plt+0x176dc>
   28e1c:	add	r7, r2, r3
   28e20:	lsr	r6, r7, #1
   28e24:	ldr	r5, [r0, r6, lsl #2]
   28e28:	cmp	r5, r1
   28e2c:	addlt	r2, r9, r7, lsr #1
   28e30:	movge	r3, r6
   28e34:	cmp	r2, r3
   28e38:	bcc	28e1c <__assert_fail@plt+0x176bc>
   28e3c:	ldr	r2, [r0, r2, lsl #2]
   28e40:	mov	r0, #1
   28e44:	cmp	r2, r1
   28e48:	bne	28d70 <__assert_fail@plt+0x17610>
   28e4c:	b	28eac <__assert_fail@plt+0x1774c>
   28e50:	ldr	r7, [r8, #84]	; 0x54
   28e54:	ldr	r1, [fp, #-44]	; 0xffffffd4
   28e58:	mov	r5, r4
   28e5c:	ldr	r4, [lr, #12]
   28e60:	mov	r2, r8
   28e64:	mov	r3, r5
   28e68:	mov	r0, r7
   28e6c:	bl	26954 <__assert_fail@plt+0x151f4>
   28e70:	cmp	r0, #1
   28e74:	blt	28e9c <__assert_fail@plt+0x1773c>
   28e78:	add	r1, r0, r5
   28e7c:	cmp	r1, r4
   28e80:	ble	28f54 <__assert_fail@plt+0x177f4>
   28e84:	ldr	lr, [sp, #28]
   28e88:	ldr	r4, [sp, #32]
   28e8c:	ldr	ip, [lr, #20]
   28e90:	cmp	ip, #0
   28e94:	bne	28eb8 <__assert_fail@plt+0x17758>
   28e98:	b	28d40 <__assert_fail@plt+0x175e0>
   28e9c:	ldr	lr, [sp, #28]
   28ea0:	cmp	r0, #0
   28ea4:	mov	r4, r5
   28ea8:	beq	28db4 <__assert_fail@plt+0x17654>
   28eac:	ldr	ip, [lr, #20]
   28eb0:	cmp	ip, #0
   28eb4:	beq	28d40 <__assert_fail@plt+0x175e0>
   28eb8:	add	r0, r0, r4
   28ebc:	ldr	r1, [fp, #-44]	; 0xffffffd4
   28ec0:	str	r0, [sp, #40]	; 0x28
   28ec4:	ldr	r0, [sp, #24]
   28ec8:	ldr	r0, [r0, #12]
   28ecc:	ldr	r0, [r0, r1, lsl #2]
   28ed0:	str	r0, [sp, #8]
   28ed4:	ldr	r0, [r8, #108]	; 0x6c
   28ed8:	cmp	r0, #1
   28edc:	blt	28ffc <__assert_fail@plt+0x1789c>
   28ee0:	ldr	r2, [r8, #116]	; 0x74
   28ee4:	ldr	r1, [sp, #40]	; 0x28
   28ee8:	mov	sl, #0
   28eec:	mov	r3, r0
   28ef0:	add	r7, r3, sl
   28ef4:	add	r7, r7, r7, lsr #31
   28ef8:	asr	r6, r7, #1
   28efc:	add	r5, r6, r6, lsl #1
   28f00:	add	r5, r2, r5, lsl #3
   28f04:	ldr	r5, [r5, #4]
   28f08:	cmp	r5, r1
   28f0c:	addlt	sl, r9, r7, asr #1
   28f10:	movge	r3, r6
   28f14:	cmp	sl, r3
   28f18:	blt	28ef0 <__assert_fail@plt+0x17790>
   28f1c:	cmp	sl, r0
   28f20:	bge	2900c <__assert_fail@plt+0x178ac>
   28f24:	ldr	r2, [r8, #116]	; 0x74
   28f28:	add	r3, sl, sl, lsl #1
   28f2c:	add	r2, r2, r3, lsl #3
   28f30:	ldr	r2, [r2, #4]
   28f34:	cmp	r2, r1
   28f38:	mvnne	sl, #0
   28f3c:	cmp	r0, #1
   28f40:	bge	29018 <__assert_fail@plt+0x178b8>
   28f44:	mov	r5, #0
   28f48:	cmp	r5, r0
   28f4c:	blt	29058 <__assert_fail@plt+0x178f8>
   28f50:	b	2907c <__assert_fail@plt+0x1791c>
   28f54:	ldr	lr, [sp, #28]
   28f58:	ldr	r4, [sp, #32]
   28f5c:	ldr	r2, [lr]
   28f60:	ldr	r2, [r2, r1, lsl #2]
   28f64:	cmp	r2, #0
   28f68:	beq	28db4 <__assert_fail@plt+0x17654>
   28f6c:	ldr	r3, [r2, #8]
   28f70:	cmp	r3, #1
   28f74:	blt	28db4 <__assert_fail@plt+0x17654>
   28f78:	ldr	r1, [r7, #12]
   28f7c:	ldr	r7, [fp, #-44]	; 0xffffffd4
   28f80:	ldr	r2, [r2, #12]
   28f84:	ldr	r1, [r1, r7, lsl #2]
   28f88:	subs	r7, r3, #1
   28f8c:	mov	r3, #0
   28f90:	beq	28fb4 <__assert_fail@plt+0x17854>
   28f94:	add	r6, r3, r7
   28f98:	lsr	r5, r6, #1
   28f9c:	ldr	r4, [r2, r5, lsl #2]
   28fa0:	cmp	r4, r1
   28fa4:	addlt	r3, r9, r6, lsr #1
   28fa8:	movge	r7, r5
   28fac:	cmp	r3, r7
   28fb0:	bcc	28f94 <__assert_fail@plt+0x17834>
   28fb4:	ldr	r4, [sp, #32]
   28fb8:	cmp	r0, #0
   28fbc:	beq	28db4 <__assert_fail@plt+0x17654>
   28fc0:	ldr	r2, [r2, r3, lsl #2]
   28fc4:	cmp	r2, r1
   28fc8:	beq	28eac <__assert_fail@plt+0x1774c>
   28fcc:	b	28db4 <__assert_fail@plt+0x17654>
   28fd0:	mov	r0, #4
   28fd4:	str	r9, [fp, #-36]	; 0xffffffdc
   28fd8:	str	r9, [fp, #-40]	; 0xffffffd8
   28fdc:	bl	2e08c <__assert_fail@plt+0x1c92c>
   28fe0:	ldr	r1, [fp, #-44]	; 0xffffffd4
   28fe4:	cmp	r0, #0
   28fe8:	str	r0, [fp, #-32]	; 0xffffffe0
   28fec:	beq	2932c <__assert_fail@plt+0x17bcc>
   28ff0:	ldr	lr, [sp, #28]
   28ff4:	str	r1, [r0]
   28ff8:	b	28d70 <__assert_fail@plt+0x17610>
   28ffc:	ldr	r1, [sp, #40]	; 0x28
   29000:	mov	sl, #0
   29004:	cmp	sl, r0
   29008:	blt	28f24 <__assert_fail@plt+0x177c4>
   2900c:	mvn	sl, #0
   29010:	cmp	r0, #1
   29014:	blt	28f44 <__assert_fail@plt+0x177e4>
   29018:	ldr	r2, [r8, #116]	; 0x74
   2901c:	mov	r5, #0
   29020:	mov	r3, r0
   29024:	add	r7, r3, r5
   29028:	add	r7, r7, r7, lsr #31
   2902c:	asr	r6, r7, #1
   29030:	add	r1, r6, r6, lsl #1
   29034:	add	r1, r2, r1, lsl #3
   29038:	ldr	r1, [r1, #4]
   2903c:	cmp	r1, r4
   29040:	addlt	r5, r9, r7, asr #1
   29044:	movge	r3, r6
   29048:	cmp	r5, r3
   2904c:	blt	29024 <__assert_fail@plt+0x178c4>
   29050:	cmp	r5, r0
   29054:	bge	2907c <__assert_fail@plt+0x1791c>
   29058:	ldr	r0, [r8, #116]	; 0x74
   2905c:	add	r1, r5, r5, lsl #1
   29060:	add	r0, r0, r1, lsl #3
   29064:	ldr	r0, [r0, #4]
   29068:	cmp	r0, r4
   2906c:	mvnne	r5, #0
   29070:	cmp	ip, #1
   29074:	bge	29088 <__assert_fail@plt+0x17928>
   29078:	b	28d40 <__assert_fail@plt+0x175e0>
   2907c:	mvn	r5, #0
   29080:	cmp	ip, #1
   29084:	blt	28d40 <__assert_fail@plt+0x175e0>
   29088:	ldr	ip, [r8, #84]	; 0x54
   2908c:	mov	r6, #0
   29090:	str	ip, [sp, #12]
   29094:	ldr	r0, [lr, #24]
   29098:	ldr	r3, [r8, #116]	; 0x74
   2909c:	ldr	r4, [ip]
   290a0:	mvn	r8, #0
   290a4:	ldr	r2, [r0, r6, lsl #2]
   290a8:	mov	r0, r3
   290ac:	add	r1, r2, r2, lsl #1
   290b0:	ldr	r7, [r0, r1, lsl #3]!
   290b4:	ldr	r0, [r0, #8]
   290b8:	ldr	r4, [r4, r7, lsl #3]
   290bc:	ldr	r7, [sp, #40]	; 0x28
   290c0:	cmp	r0, r7
   290c4:	str	r4, [sp, #44]	; 0x2c
   290c8:	ble	290e4 <__assert_fail@plt+0x17984>
   290cc:	mvn	r9, #0
   290d0:	ldr	r1, [sp, #36]	; 0x24
   290d4:	ldr	r4, [sp, #32]
   290d8:	cmp	r0, r1
   290dc:	blt	29168 <__assert_fail@plt+0x17a08>
   290e0:	b	291e4 <__assert_fail@plt+0x17a84>
   290e4:	add	r1, r3, r1, lsl #3
   290e8:	mov	r9, #1
   290ec:	ldr	r1, [r1, #12]
   290f0:	cmp	r1, r7
   290f4:	blt	29158 <__assert_fail@plt+0x179f8>
   290f8:	sub	r1, r1, r7
   290fc:	cmp	r0, r7
   29100:	mov	r7, #1
   29104:	clz	r1, r1
   29108:	lsr	r4, r1, #5
   2910c:	lsl	r1, r4, #1
   29110:	orreq	r1, r7, r4, lsl #1
   29114:	cmp	r1, #0
   29118:	beq	291c8 <__assert_fail@plt+0x17a68>
   2911c:	ldr	r4, [sp, #48]	; 0x30
   29120:	ldr	r2, [sp, #44]	; 0x2c
   29124:	ldr	r3, [sp, #8]
   29128:	str	sl, [sp]
   2912c:	mov	r0, r4
   29130:	bl	2a968 <__assert_fail@plt+0x19208>
   29134:	ldr	lr, [sp, #28]
   29138:	mov	r9, r0
   2913c:	ldr	r3, [r4, #116]	; 0x74
   29140:	ldr	ip, [sp, #12]
   29144:	ldr	r0, [lr, #24]
   29148:	ldr	r2, [r0, r6, lsl #2]
   2914c:	add	r0, r2, r2, lsl #1
   29150:	add	r0, r3, r0, lsl #3
   29154:	ldr	r0, [r0, #8]
   29158:	ldr	r1, [sp, #36]	; 0x24
   2915c:	ldr	r4, [sp, #32]
   29160:	cmp	r0, r1
   29164:	bge	291e4 <__assert_fail@plt+0x17a84>
   29168:	add	r1, r2, r2, lsl #1
   2916c:	mov	r8, #1
   29170:	add	r1, r3, r1, lsl #3
   29174:	ldr	r1, [r1, #12]
   29178:	cmp	r1, r4
   2917c:	blt	291e4 <__assert_fail@plt+0x17a84>
   29180:	sub	r1, r1, r4
   29184:	cmp	r0, r4
   29188:	mov	r0, #1
   2918c:	clz	r1, r1
   29190:	lsr	r2, r1, #5
   29194:	lsl	r1, r2, #1
   29198:	orreq	r1, r0, r2, lsl #1
   2919c:	cmp	r1, #0
   291a0:	beq	291e0 <__assert_fail@plt+0x17a80>
   291a4:	ldr	r0, [sp, #48]	; 0x30
   291a8:	ldr	r2, [sp, #44]	; 0x2c
   291ac:	ldr	r3, [fp, #-44]	; 0xffffffd4
   291b0:	str	r5, [sp]
   291b4:	bl	2a968 <__assert_fail@plt+0x19208>
   291b8:	ldr	ip, [sp, #12]
   291bc:	ldr	lr, [sp, #28]
   291c0:	mov	r8, r0
   291c4:	b	291e4 <__assert_fail@plt+0x17a84>
   291c8:	mov	r9, #0
   291cc:	ldr	r1, [sp, #36]	; 0x24
   291d0:	ldr	r4, [sp, #32]
   291d4:	cmp	r0, r1
   291d8:	blt	29168 <__assert_fail@plt+0x17a08>
   291dc:	b	291e4 <__assert_fail@plt+0x17a84>
   291e0:	mov	r8, #0
   291e4:	cmp	r8, r9
   291e8:	ldr	r8, [sp, #48]	; 0x30
   291ec:	mov	r9, #1
   291f0:	bne	28d70 <__assert_fail@plt+0x17610>
   291f4:	ldr	r0, [lr, #20]
   291f8:	add	r6, r6, #1
   291fc:	cmp	r6, r0
   29200:	blt	29094 <__assert_fail@plt+0x17934>
   29204:	b	28d40 <__assert_fail@plt+0x175e0>
   29208:	cmp	r2, r1
   2920c:	bne	29248 <__assert_fail@plt+0x17ae8>
   29210:	lsl	r0, r2, #1
   29214:	lsl	r1, r2, #3
   29218:	str	r0, [fp, #-40]	; 0xffffffd8
   2921c:	ldr	r0, [fp, #-32]	; 0xffffffe0
   29220:	bl	2e0bc <__assert_fail@plt+0x1c95c>
   29224:	cmp	r0, #0
   29228:	beq	29364 <__assert_fail@plt+0x17c04>
   2922c:	str	r0, [fp, #-32]	; 0xffffffe0
   29230:	ldr	lr, [sp, #28]
   29234:	ldr	r1, [fp, #-36]	; 0xffffffdc
   29238:	ldr	r2, [r0]
   2923c:	cmp	r2, r6
   29240:	bgt	29258 <__assert_fail@plt+0x17af8>
   29244:	b	292c8 <__assert_fail@plt+0x17b68>
   29248:	ldr	r0, [fp, #-32]	; 0xffffffe0
   2924c:	ldr	r2, [r0]
   29250:	cmp	r2, r6
   29254:	ble	292c8 <__assert_fail@plt+0x17b68>
   29258:	cmp	r1, #1
   2925c:	blt	292f8 <__assert_fail@plt+0x17b98>
   29260:	ands	r3, r1, #3
   29264:	sub	ip, r1, #1
   29268:	beq	2928c <__assert_fail@plt+0x17b2c>
   2926c:	add	r2, r0, r1, lsl #2
   29270:	mov	r7, r2
   29274:	ldr	r5, [r7, #-4]!
   29278:	subs	r3, r3, #1
   2927c:	sub	r1, r1, #1
   29280:	str	r5, [r2]
   29284:	mov	r2, r7
   29288:	bne	29274 <__assert_fail@plt+0x17b14>
   2928c:	cmp	ip, #3
   29290:	bcc	292c0 <__assert_fail@plt+0x17b60>
   29294:	add	r2, r0, r1, lsl #2
   29298:	sub	r2, r2, #8
   2929c:	ldr	r5, [r2, #4]
   292a0:	ldmda	r2, {r3, r7, ip}
   292a4:	sub	sl, r2, #4
   292a8:	sub	r1, r1, #4
   292ac:	cmp	r1, #0
   292b0:	stm	sl, {r3, r7, ip}
   292b4:	str	r5, [r2, #8]
   292b8:	sub	r2, r2, #16
   292bc:	bgt	2929c <__assert_fail@plt+0x17b3c>
   292c0:	mov	r1, #0
   292c4:	b	292f8 <__assert_fail@plt+0x17b98>
   292c8:	add	r2, r0, r1, lsl #2
   292cc:	ldr	r3, [r2, #-4]
   292d0:	cmp	r3, r6
   292d4:	ble	292f8 <__assert_fail@plt+0x17b98>
   292d8:	sub	r1, r1, #2
   292dc:	str	r3, [r2]
   292e0:	sub	r1, r1, #1
   292e4:	ldr	r3, [r2, #-8]
   292e8:	sub	r2, r2, #4
   292ec:	cmp	r3, r6
   292f0:	bgt	292dc <__assert_fail@plt+0x17b7c>
   292f4:	add	r1, r1, #2
   292f8:	str	r6, [r0, r1, lsl #2]
   292fc:	b	28d64 <__assert_fail@plt+0x17604>
   29300:	mov	r7, #0
   29304:	b	29318 <__assert_fail@plt+0x17bb8>
   29308:	lsl	r2, r4, #2
   2930c:	mov	r1, #0
   29310:	mov	r7, #0
   29314:	bl	11670 <memset@plt>
   29318:	ldr	r0, [fp, #-32]	; 0xffffffe0
   2931c:	bl	144c0 <__assert_fail@plt+0x2d60>
   29320:	mov	r0, r7
   29324:	sub	sp, fp, #28
   29328:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2932c:	mov	r0, #0
   29330:	mov	r7, #12
   29334:	str	r0, [fp, #-40]	; 0xffffffd8
   29338:	str	r0, [fp, #-36]	; 0xffffffdc
   2933c:	b	29318 <__assert_fail@plt+0x17bb8>
   29340:	mov	r7, r0
   29344:	b	29318 <__assert_fail@plt+0x17bb8>
   29348:	mov	r0, #0
   2934c:	mov	r7, #12
   29350:	str	r0, [fp, #-40]	; 0xffffffd8
   29354:	str	r0, [fp, #-36]	; 0xffffffdc
   29358:	mov	r0, r7
   2935c:	sub	sp, fp, #28
   29360:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   29364:	mov	r7, #12
   29368:	b	29318 <__assert_fail@plt+0x17bb8>
   2936c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   29370:	add	fp, sp, #28
   29374:	sub	sp, sp, #140	; 0x8c
   29378:	mov	r5, r1
   2937c:	ldr	r1, [r0, #84]	; 0x54
   29380:	mov	ip, r2
   29384:	mov	r2, #0
   29388:	str	r0, [sp, #76]	; 0x4c
   2938c:	str	r2, [fp, #-76]	; 0xffffffb4
   29390:	str	ip, [sp, #80]	; 0x50
   29394:	str	r5, [sp, #84]	; 0x54
   29398:	str	r1, [fp, #-80]	; 0xffffffb0
   2939c:	ldr	r1, [r0, #100]	; 0x64
   293a0:	ldr	r8, [r1, ip, lsl #2]
   293a4:	ldr	r1, [r3, #4]
   293a8:	cmp	r8, #0
   293ac:	mov	r6, r8
   293b0:	addne	r6, r6, #4
   293b4:	cmp	r1, #0
   293b8:	str	r6, [sp, #68]	; 0x44
   293bc:	beq	297a0 <__assert_fail@plt+0x18040>
   293c0:	mov	r9, r3
   293c4:	cmp	r8, #0
   293c8:	beq	297c0 <__assert_fail@plt+0x18060>
   293cc:	ldr	r1, [fp, #-80]	; 0xffffffb0
   293d0:	mov	r0, #0
   293d4:	mov	r2, r9
   293d8:	str	r9, [sp, #60]	; 0x3c
   293dc:	str	r0, [fp, #-72]	; 0xffffffb8
   293e0:	sub	r0, fp, #72	; 0x48
   293e4:	bl	26624 <__assert_fail@plt+0x14ec4>
   293e8:	ldr	r9, [fp, #-72]	; 0xffffffb8
   293ec:	cmp	r9, #0
   293f0:	bne	2a278 <__assert_fail@plt+0x18b18>
   293f4:	mov	r4, r0
   293f8:	mov	r5, r0
   293fc:	ldr	r0, [r4, #28]!
   29400:	cmp	r0, #0
   29404:	bne	2949c <__assert_fail@plt+0x17d3c>
   29408:	ldr	r0, [sp, #60]	; 0x3c
   2940c:	mov	r1, #0
   29410:	ldr	r0, [r0, #4]
   29414:	str	r0, [r5, #28]
   29418:	lsl	r0, r0, #2
   2941c:	str	r1, [r5, #32]
   29420:	bl	2e08c <__assert_fail@plt+0x1c92c>
   29424:	cmp	r0, #0
   29428:	mov	r1, #12
   2942c:	mov	r9, #12
   29430:	str	r0, [r5, #36]	; 0x24
   29434:	movne	r1, #0
   29438:	cmp	r0, #0
   2943c:	str	r1, [fp, #-72]	; 0xffffffb8
   29440:	beq	2a278 <__assert_fail@plt+0x18b18>
   29444:	ldr	r0, [sp, #60]	; 0x3c
   29448:	ldr	r0, [r0, #4]
   2944c:	cmp	r0, #1
   29450:	blt	2949c <__assert_fail@plt+0x17d3c>
   29454:	ldr	r7, [sp, #60]	; 0x3c
   29458:	mov	r5, #0
   2945c:	ldr	r0, [r7, #8]
   29460:	ldr	r1, [fp, #-80]	; 0xffffffb0
   29464:	ldr	r0, [r0, r5, lsl #2]
   29468:	ldr	r1, [r1, #28]
   2946c:	add	r0, r0, r0, lsl #1
   29470:	add	r1, r1, r0, lsl #2
   29474:	mov	r0, r4
   29478:	bl	22338 <__assert_fail@plt+0x10bd8>
   2947c:	cmp	r0, #0
   29480:	bne	2a274 <__assert_fail@plt+0x18b14>
   29484:	ldr	r0, [r7, #4]
   29488:	add	r5, r5, #1
   2948c:	cmp	r5, r0
   29490:	blt	2945c <__assert_fail@plt+0x17cfc>
   29494:	mov	r0, #0
   29498:	str	r0, [fp, #-72]	; 0xffffffb8
   2949c:	ldr	r0, [sp, #60]	; 0x3c
   294a0:	mov	r1, r6
   294a4:	mov	r2, r4
   294a8:	bl	2a2e8 <__assert_fail@plt+0x18b88>
   294ac:	cmp	r0, #0
   294b0:	str	r0, [fp, #-76]	; 0xffffffb4
   294b4:	bne	2a2a0 <__assert_fail@plt+0x18b40>
   294b8:	ldr	r5, [sp, #84]	; 0x54
   294bc:	ldr	r9, [sp, #60]	; 0x3c
   294c0:	ldr	r0, [r5, #20]
   294c4:	cmp	r0, #0
   294c8:	beq	297c0 <__assert_fail@plt+0x18060>
   294cc:	ldr	lr, [sp, #80]	; 0x50
   294d0:	cmp	r0, #1
   294d4:	str	r8, [sp, #56]	; 0x38
   294d8:	blt	297b4 <__assert_fail@plt+0x18054>
   294dc:	ldr	r0, [sp, #76]	; 0x4c
   294e0:	mov	r1, #0
   294e4:	ldr	r0, [r0, #116]	; 0x74
   294e8:	str	r0, [sp, #64]	; 0x40
   294ec:	b	29504 <__assert_fail@plt+0x17da4>
   294f0:	ldr	r1, [sp, #72]	; 0x48
   294f4:	ldr	r0, [r5, #20]
   294f8:	add	r1, r1, #1
   294fc:	cmp	r1, r0
   29500:	bge	297b4 <__assert_fail@plt+0x18054>
   29504:	ldr	r0, [r5, #24]
   29508:	str	r1, [sp, #72]	; 0x48
   2950c:	ldr	r0, [r0, r1, lsl #2]
   29510:	ldr	r1, [sp, #64]	; 0x40
   29514:	add	r0, r0, r0, lsl #1
   29518:	add	r1, r1, r0, lsl #3
   2951c:	ldr	r2, [r1, #8]
   29520:	cmp	r2, lr
   29524:	bge	294f0 <__assert_fail@plt+0x17d90>
   29528:	ldr	r1, [r1, #4]
   2952c:	cmp	r1, lr
   29530:	blt	294f0 <__assert_fail@plt+0x17d90>
   29534:	ldr	r1, [sp, #64]	; 0x40
   29538:	ldr	r2, [fp, #-80]	; 0xffffffb0
   2953c:	ldr	r0, [r1, r0, lsl #3]!
   29540:	ldr	r2, [r2]
   29544:	ldr	r1, [r1, #12]
   29548:	ldr	r6, [r2, r0, lsl #3]
   2954c:	ldr	r0, [r9, #4]
   29550:	cmp	r1, lr
   29554:	bne	29730 <__assert_fail@plt+0x17fd0>
   29558:	cmp	r0, #1
   2955c:	blt	294f0 <__assert_fail@plt+0x17d90>
   29560:	ldr	r3, [r9, #8]
   29564:	mvn	r8, #0
   29568:	mvn	r1, #0
   2956c:	b	2958c <__assert_fail@plt+0x17e2c>
   29570:	ldr	r4, [r2, r7, lsl #3]
   29574:	cmp	r6, r4
   29578:	moveq	r8, r7
   2957c:	mov	r4, #1
   29580:	add	r3, r3, #4
   29584:	subs	r0, r0, #1
   29588:	beq	295c4 <__assert_fail@plt+0x17e64>
   2958c:	ldr	r7, [r3]
   29590:	add	r4, r2, r7, lsl #3
   29594:	ldrb	r4, [r4, #4]
   29598:	cmp	r4, #9
   2959c:	beq	29570 <__assert_fail@plt+0x17e10>
   295a0:	cmp	r4, #8
   295a4:	bne	2957c <__assert_fail@plt+0x17e1c>
   295a8:	ldr	r4, [r2, r7, lsl #3]
   295ac:	cmp	r6, r4
   295b0:	moveq	r1, r7
   295b4:	mov	r4, #1
   295b8:	add	r3, r3, #4
   295bc:	subs	r0, r0, #1
   295c0:	bne	2958c <__assert_fail@plt+0x17e2c>
   295c4:	ldr	r3, [sp, #68]	; 0x44
   295c8:	cmp	r1, #0
   295cc:	bmi	295e8 <__assert_fail@plt+0x17e88>
   295d0:	ldr	r0, [fp, #-80]	; 0xffffffb0
   295d4:	ldr	r2, [sp, #60]	; 0x3c
   295d8:	bl	2a4dc <__assert_fail@plt+0x18d7c>
   295dc:	ldr	lr, [sp, #80]	; 0x50
   295e0:	cmp	r0, #0
   295e4:	bne	2a228 <__assert_fail@plt+0x18ac8>
   295e8:	ldr	r9, [sp, #60]	; 0x3c
   295ec:	cmp	r8, #0
   295f0:	bmi	294f0 <__assert_fail@plt+0x17d90>
   295f4:	ldr	ip, [r9, #4]
   295f8:	cmp	ip, #1
   295fc:	blt	294f0 <__assert_fail@plt+0x17d90>
   29600:	mov	sl, #0
   29604:	b	2963c <__assert_fail@plt+0x17edc>
   29608:	ldr	r0, [fp, #-80]	; 0xffffffb0
   2960c:	ldr	r3, [sp, #68]	; 0x44
   29610:	mov	r2, r9
   29614:	bl	2a4dc <__assert_fail@plt+0x18d7c>
   29618:	cmp	r0, #0
   2961c:	bne	2a228 <__assert_fail@plt+0x18ac8>
   29620:	ldr	ip, [r9, #4]
   29624:	ldr	lr, [sp, #80]	; 0x50
   29628:	sub	sl, sl, #1
   2962c:	mov	r1, r9
   29630:	add	sl, sl, #1
   29634:	cmp	sl, ip
   29638:	bge	294f0 <__assert_fail@plt+0x17d90>
   2963c:	ldr	r1, [r9, #8]
   29640:	ldr	r0, [fp, #-80]	; 0xffffffb0
   29644:	ldr	r1, [r1, sl, lsl #2]
   29648:	ldr	r3, [r0, #28]
   2964c:	add	r2, r1, r1, lsl #1
   29650:	add	r3, r3, r2, lsl #2
   29654:	ldr	r7, [r3, #4]
   29658:	cmp	r7, #1
   2965c:	blt	296bc <__assert_fail@plt+0x17f5c>
   29660:	ldr	r3, [r3, #8]
   29664:	mov	lr, ip
   29668:	subs	r6, r7, #1
   2966c:	beq	296a0 <__assert_fail@plt+0x17f40>
   29670:	mov	r7, #0
   29674:	add	r4, r7, r6
   29678:	mov	ip, #1
   2967c:	lsr	r0, r4, #1
   29680:	ldr	r5, [r3, r0, lsl #2]
   29684:	cmp	r5, r8
   29688:	addlt	r7, ip, r4, lsr #1
   2968c:	movge	r6, r0
   29690:	mov	r4, #1
   29694:	cmp	r7, r6
   29698:	bcc	29674 <__assert_fail@plt+0x17f14>
   2969c:	b	296a4 <__assert_fail@plt+0x17f44>
   296a0:	mov	r7, #0
   296a4:	ldr	r0, [r3, r7, lsl #2]
   296a8:	mov	ip, lr
   296ac:	ldr	r5, [sp, #84]	; 0x54
   296b0:	ldr	lr, [sp, #80]	; 0x50
   296b4:	cmp	r0, r8
   296b8:	beq	29630 <__assert_fail@plt+0x17ed0>
   296bc:	ldr	r0, [fp, #-80]	; 0xffffffb0
   296c0:	ldr	r0, [r0, #24]
   296c4:	add	r2, r0, r2, lsl #2
   296c8:	ldr	r3, [r2, #4]
   296cc:	cmp	r3, #1
   296d0:	blt	29608 <__assert_fail@plt+0x17ea8>
   296d4:	ldr	r2, [r2, #8]
   296d8:	subs	r7, r3, #1
   296dc:	beq	29718 <__assert_fail@plt+0x17fb8>
   296e0:	mov	r3, #0
   296e4:	add	r0, r3, r7
   296e8:	lsr	r6, r0, #1
   296ec:	ldr	r5, [r2, r6, lsl #2]
   296f0:	cmp	r5, r8
   296f4:	addlt	r3, r4, r0, lsr #1
   296f8:	movge	r7, r6
   296fc:	cmp	r3, r7
   29700:	bcc	296e4 <__assert_fail@plt+0x17f84>
   29704:	ldr	r0, [r2, r3, lsl #2]
   29708:	ldr	r5, [sp, #84]	; 0x54
   2970c:	cmp	r0, r8
   29710:	bne	29608 <__assert_fail@plt+0x17ea8>
   29714:	b	29630 <__assert_fail@plt+0x17ed0>
   29718:	mov	r3, #0
   2971c:	ldr	r0, [r2, r3, lsl #2]
   29720:	ldr	r5, [sp, #84]	; 0x54
   29724:	cmp	r0, r8
   29728:	beq	29630 <__assert_fail@plt+0x17ed0>
   2972c:	b	29608 <__assert_fail@plt+0x17ea8>
   29730:	cmp	r0, #1
   29734:	blt	294f0 <__assert_fail@plt+0x17d90>
   29738:	mov	r7, #0
   2973c:	ldr	r1, [r9, #8]
   29740:	ldr	r1, [r1, r7, lsl #2]
   29744:	add	r3, r2, r1, lsl #3
   29748:	ldrb	r3, [r3, #4]
   2974c:	orr	r3, r3, #1
   29750:	cmp	r3, #9
   29754:	bne	29788 <__assert_fail@plt+0x18028>
   29758:	ldr	r2, [r2, r1, lsl #3]
   2975c:	cmp	r6, r2
   29760:	bne	29788 <__assert_fail@plt+0x18028>
   29764:	ldr	r0, [fp, #-80]	; 0xffffffb0
   29768:	ldr	r3, [sp, #68]	; 0x44
   2976c:	mov	r2, r9
   29770:	bl	2a4dc <__assert_fail@plt+0x18d7c>
   29774:	cmp	r0, #0
   29778:	bne	2a228 <__assert_fail@plt+0x18ac8>
   2977c:	ldr	r0, [r9, #4]
   29780:	ldr	lr, [sp, #80]	; 0x50
   29784:	mov	r1, r9
   29788:	add	r7, r7, #1
   2978c:	cmp	r7, r0
   29790:	bge	294f0 <__assert_fail@plt+0x17d90>
   29794:	ldr	r1, [fp, #-80]	; 0xffffffb0
   29798:	ldr	r2, [r1]
   2979c:	b	2973c <__assert_fail@plt+0x17fdc>
   297a0:	ldr	r1, [r5]
   297a4:	str	r2, [r1, ip, lsl #2]
   297a8:	cmp	r8, #0
   297ac:	bne	297f4 <__assert_fail@plt+0x18094>
   297b0:	b	2a218 <__assert_fail@plt+0x18ab8>
   297b4:	ldr	r8, [sp, #56]	; 0x38
   297b8:	mov	r0, #0
   297bc:	str	r0, [fp, #-76]	; 0xffffffb4
   297c0:	ldr	r1, [fp, #-80]	; 0xffffffb0
   297c4:	sub	r0, fp, #76	; 0x4c
   297c8:	mov	r2, r9
   297cc:	bl	26624 <__assert_fail@plt+0x14ec4>
   297d0:	ldr	r1, [r5]
   297d4:	ldr	ip, [sp, #80]	; 0x50
   297d8:	str	r0, [r1, ip, lsl #2]
   297dc:	ldr	r0, [sp, #76]	; 0x4c
   297e0:	ldr	r9, [fp, #-76]	; 0xffffffb4
   297e4:	cmp	r9, #0
   297e8:	bne	2a21c <__assert_fail@plt+0x18abc>
   297ec:	cmp	r8, #0
   297f0:	beq	2a218 <__assert_fail@plt+0x18ab8>
   297f4:	ldr	r1, [r0, #100]	; 0x64
   297f8:	ldr	r1, [r1, ip, lsl #2]
   297fc:	ldrb	r1, [r1, #52]	; 0x34
   29800:	tst	r1, #64	; 0x40
   29804:	beq	2a218 <__assert_fail@plt+0x18ab8>
   29808:	ldr	lr, [r0, #108]	; 0x6c
   2980c:	ldr	r8, [r0, #84]	; 0x54
   29810:	cmp	lr, #1
   29814:	blt	2a204 <__assert_fail@plt+0x18aa4>
   29818:	ldr	r1, [r0, #116]	; 0x74
   2981c:	mov	r4, #0
   29820:	mov	r2, #1
   29824:	mov	r3, lr
   29828:	add	r7, r3, r4
   2982c:	add	r7, r7, r7, lsr #31
   29830:	asr	r6, r7, #1
   29834:	add	r5, r6, r6, lsl #1
   29838:	add	r5, r1, r5, lsl #3
   2983c:	ldr	r5, [r5, #4]
   29840:	cmp	r5, ip
   29844:	addlt	r4, r2, r7, asr #1
   29848:	movge	r3, r6
   2984c:	cmp	r4, r3
   29850:	blt	29828 <__assert_fail@plt+0x180c8>
   29854:	cmp	r4, lr
   29858:	bge	2a210 <__assert_fail@plt+0x18ab0>
   2985c:	cmn	r4, #1
   29860:	beq	2a210 <__assert_fail@plt+0x18ab0>
   29864:	ldr	r0, [sp, #76]	; 0x4c
   29868:	add	r1, r4, r4, lsl #1
   2986c:	str	r1, [sp, #28]
   29870:	ldr	r0, [r0, #116]	; 0x74
   29874:	add	r0, r0, r1, lsl #3
   29878:	ldr	r0, [r0, #4]
   2987c:	cmp	r0, ip
   29880:	bne	2a210 <__assert_fail@plt+0x18ab0>
   29884:	ldr	r1, [sp, #68]	; 0x44
   29888:	mov	r2, #0
   2988c:	str	r2, [fp, #-72]	; 0xffffffb8
   29890:	ldr	r0, [r1, #4]
   29894:	cmp	r0, #0
   29898:	ble	2a23c <__assert_fail@plt+0x18adc>
   2989c:	str	r4, [sp, #20]
   298a0:	add	r0, ip, #1
   298a4:	ldr	r4, [sp, #84]	; 0x54
   298a8:	mov	r9, #0
   298ac:	str	r8, [sp, #36]	; 0x24
   298b0:	str	r0, [sp, #12]
   298b4:	sub	r0, fp, #72	; 0x48
   298b8:	add	r0, r0, #16
   298bc:	str	r0, [sp, #8]
   298c0:	mov	r0, #0
   298c4:	str	r0, [sp, #48]	; 0x30
   298c8:	b	298e0 <__assert_fail@plt+0x18180>
   298cc:	ldr	r1, [sp, #68]	; 0x44
   298d0:	add	r9, r9, #1
   298d4:	ldr	r0, [r1, #4]
   298d8:	cmp	r9, r0
   298dc:	bge	2a244 <__assert_fail@plt+0x18ae4>
   298e0:	ldr	r0, [r1, #8]
   298e4:	ldr	r1, [r4, #8]
   298e8:	ldr	r3, [r0, r9, lsl #2]
   298ec:	ldr	r0, [r8]
   298f0:	add	r0, r0, r3, lsl #3
   298f4:	cmp	r3, r1
   298f8:	ldrb	r0, [r0, #4]
   298fc:	bne	29918 <__assert_fail@plt+0x181b8>
   29900:	cmp	r0, #4
   29904:	bne	298cc <__assert_fail@plt+0x1816c>
   29908:	ldr	r0, [r4, #12]
   2990c:	cmp	r0, ip
   29910:	bne	29920 <__assert_fail@plt+0x181c0>
   29914:	b	298cc <__assert_fail@plt+0x1816c>
   29918:	cmp	r0, #4
   2991c:	bne	298cc <__assert_fail@plt+0x1816c>
   29920:	ldr	r0, [sp, #76]	; 0x4c
   29924:	ldr	r1, [sp, #28]
   29928:	ldr	r5, [sp, #20]
   2992c:	str	r9, [sp, #40]	; 0x28
   29930:	str	r3, [sp, #56]	; 0x38
   29934:	ldr	r0, [r0, #116]	; 0x74
   29938:	add	r7, r0, r1, lsl #3
   2993c:	ldr	r0, [r7]
   29940:	cmp	r0, r3
   29944:	beq	2a090 <__assert_fail@plt+0x18930>
   29948:	b	2a1e8 <__assert_fail@plt+0x18a88>
   2994c:	mov	r8, lr
   29950:	ldr	r4, [sp, #84]	; 0x54
   29954:	ldr	r3, [sp, #56]	; 0x38
   29958:	ldr	r5, [fp, #-80]	; 0xffffffb0
   2995c:	ldr	lr, [sp, #64]	; 0x40
   29960:	b	2a1e8 <__assert_fail@plt+0x18a88>
   29964:	mov	r9, #0
   29968:	ldr	r3, [sp, #76]	; 0x4c
   2996c:	cmp	r9, r0
   29970:	blt	2a17c <__assert_fail@plt+0x18a1c>
   29974:	mvn	r9, #0
   29978:	cmp	r0, #1
   2997c:	blt	2a19c <__assert_fail@plt+0x18a3c>
   29980:	ldr	r1, [r3, #116]	; 0x74
   29984:	ldr	lr, [sp, #64]	; 0x40
   29988:	mov	r8, #0
   2998c:	mov	r2, r0
   29990:	add	r3, r2, r8
   29994:	add	r3, r3, r3, lsr #31
   29998:	asr	r6, r3, #1
   2999c:	add	r5, r6, r6, lsl #1
   299a0:	add	r5, r1, r5, lsl #3
   299a4:	ldr	r5, [r5, #4]
   299a8:	cmp	r5, sl
   299ac:	addlt	r8, r4, r3, asr #1
   299b0:	movge	r2, r6
   299b4:	cmp	r8, r2
   299b8:	blt	29990 <__assert_fail@plt+0x18230>
   299bc:	ldr	r3, [sp, #76]	; 0x4c
   299c0:	cmp	r8, r0
   299c4:	bge	2a1b0 <__assert_fail@plt+0x18a50>
   299c8:	ldr	r0, [r3, #116]	; 0x74
   299cc:	add	r1, r8, r8, lsl #1
   299d0:	add	r0, r0, r1, lsl #3
   299d4:	ldr	r0, [r0, #4]
   299d8:	cmp	r0, sl
   299dc:	mvnne	r8, #0
   299e0:	ldr	r5, [sp, #84]	; 0x54
   299e4:	ldr	r4, [r5, #20]
   299e8:	cmp	r4, #1
   299ec:	blt	29b70 <__assert_fail@plt+0x18410>
   299f0:	ldr	r0, [r3, #84]	; 0x54
   299f4:	mov	r6, #0
   299f8:	str	r0, [sp, #60]	; 0x3c
   299fc:	ldr	r0, [r5, #24]
   29a00:	ldr	r3, [r3, #116]	; 0x74
   29a04:	ldr	r4, [sp, #60]	; 0x3c
   29a08:	ldr	r2, [r0, r6, lsl #2]
   29a0c:	mov	r0, r3
   29a10:	ldr	r4, [r4]
   29a14:	add	r1, r2, r2, lsl #1
   29a18:	ldr	r5, [r0, r1, lsl #3]!
   29a1c:	ldr	r0, [r0, #8]
   29a20:	ldr	r4, [r4, r5, lsl #3]
   29a24:	mvn	r5, #0
   29a28:	cmp	r0, ip
   29a2c:	str	r4, [sp, #72]	; 0x48
   29a30:	ble	29a44 <__assert_fail@plt+0x182e4>
   29a34:	mvn	r4, #0
   29a38:	cmp	r0, sl
   29a3c:	ble	29acc <__assert_fail@plt+0x1836c>
   29a40:	b	29b28 <__assert_fail@plt+0x183c8>
   29a44:	add	r1, r3, r1, lsl #3
   29a48:	mov	r4, #1
   29a4c:	ldr	r1, [r1, #12]
   29a50:	cmp	r1, ip
   29a54:	blt	29ac4 <__assert_fail@plt+0x18364>
   29a58:	sub	r1, r1, ip
   29a5c:	cmp	r0, ip
   29a60:	mov	lr, #1
   29a64:	clz	r1, r1
   29a68:	lsr	r4, r1, #5
   29a6c:	lsl	r1, r4, #1
   29a70:	orreq	r1, lr, r4, lsl #1
   29a74:	cmp	r1, #0
   29a78:	beq	29abc <__assert_fail@plt+0x1835c>
   29a7c:	ldr	r0, [sp, #76]	; 0x4c
   29a80:	ldr	r2, [sp, #72]	; 0x48
   29a84:	ldr	r3, [sp, #56]	; 0x38
   29a88:	str	r9, [sp]
   29a8c:	bl	2a968 <__assert_fail@plt+0x19208>
   29a90:	mov	r4, r0
   29a94:	ldr	r0, [sp, #84]	; 0x54
   29a98:	ldr	r1, [sp, #76]	; 0x4c
   29a9c:	ldr	ip, [sp, #80]	; 0x50
   29aa0:	ldr	r0, [r0, #24]
   29aa4:	ldr	r3, [r1, #116]	; 0x74
   29aa8:	ldr	r2, [r0, r6, lsl #2]
   29aac:	add	r0, r2, r2, lsl #1
   29ab0:	add	r0, r3, r0, lsl #3
   29ab4:	ldr	r0, [r0, #8]
   29ab8:	b	29ac0 <__assert_fail@plt+0x18360>
   29abc:	mov	r4, #0
   29ac0:	ldr	lr, [sp, #64]	; 0x40
   29ac4:	cmp	r0, sl
   29ac8:	bgt	29b28 <__assert_fail@plt+0x183c8>
   29acc:	add	r1, r2, r2, lsl #1
   29ad0:	mov	r5, #1
   29ad4:	add	r1, r3, r1, lsl #3
   29ad8:	ldr	r1, [r1, #12]
   29adc:	cmp	r1, sl
   29ae0:	blt	29b28 <__assert_fail@plt+0x183c8>
   29ae4:	sub	r1, r1, sl
   29ae8:	cmp	r0, sl
   29aec:	mov	r0, #1
   29af0:	clz	r1, r1
   29af4:	lsr	r2, r1, #5
   29af8:	lsl	r1, r2, #1
   29afc:	orreq	r1, r0, r2, lsl #1
   29b00:	cmp	r1, #0
   29b04:	beq	29b4c <__assert_fail@plt+0x183ec>
   29b08:	ldr	r0, [sp, #76]	; 0x4c
   29b0c:	ldr	r2, [sp, #72]	; 0x48
   29b10:	ldr	r3, [sp, #52]	; 0x34
   29b14:	str	r8, [sp]
   29b18:	bl	2a968 <__assert_fail@plt+0x19208>
   29b1c:	ldr	lr, [sp, #64]	; 0x40
   29b20:	ldr	ip, [sp, #80]	; 0x50
   29b24:	mov	r5, r0
   29b28:	cmp	r5, r4
   29b2c:	bne	29b58 <__assert_fail@plt+0x183f8>
   29b30:	ldr	r5, [sp, #84]	; 0x54
   29b34:	ldr	r3, [sp, #76]	; 0x4c
   29b38:	add	r6, r6, #1
   29b3c:	ldr	r4, [r5, #20]
   29b40:	cmp	r6, r4
   29b44:	blt	299fc <__assert_fail@plt+0x1829c>
   29b48:	b	29b70 <__assert_fail@plt+0x18410>
   29b4c:	mov	r5, #0
   29b50:	cmp	r5, r4
   29b54:	beq	29b30 <__assert_fail@plt+0x183d0>
   29b58:	ldr	r4, [sp, #84]	; 0x54
   29b5c:	ldr	r8, [sp, #36]	; 0x24
   29b60:	ldr	r9, [sp, #40]	; 0x28
   29b64:	ldr	r3, [sp, #56]	; 0x38
   29b68:	ldr	r5, [fp, #-80]	; 0xffffffb0
   29b6c:	b	2a1e8 <__assert_fail@plt+0x18a88>
   29b70:	ldr	r0, [sp, #48]	; 0x30
   29b74:	cmp	r0, #0
   29b78:	beq	29bb8 <__assert_fail@plt+0x18458>
   29b7c:	ldr	r0, [sp, #56]	; 0x38
   29b80:	str	ip, [fp, #-60]	; 0xffffffc4
   29b84:	ldr	r8, [sp, #36]	; 0x24
   29b88:	ldr	r9, [fp, #-80]	; 0xffffffb0
   29b8c:	str	r0, [fp, #-64]	; 0xffffffc0
   29b90:	ldr	r0, [sp, #24]
   29b94:	cmp	r0, #0
   29b98:	beq	29d3c <__assert_fail@plt+0x185dc>
   29b9c:	ldr	r6, [sp, #44]	; 0x2c
   29ba0:	cmp	r6, #0
   29ba4:	bne	2a070 <__assert_fail@plt+0x18910>
   29ba8:	mov	r6, #1
   29bac:	str	r9, [lr]
   29bb0:	str	lr, [sp, #32]
   29bb4:	b	29dc8 <__assert_fail@plt+0x18668>
   29bb8:	mov	r0, r5
   29bbc:	mov	r1, #12
   29bc0:	ldr	r8, [sp, #36]	; 0x24
   29bc4:	ldr	r9, [fp, #-80]	; 0xffffffb0
   29bc8:	cmp	r4, #1
   29bcc:	vld1.32	{d16-d17}, [r0], r1
   29bd0:	sub	r1, fp, #72	; 0x48
   29bd4:	vld1.32	{d18-d19}, [r0]
   29bd8:	add	r0, r1, #12
   29bdc:	vst1.32	{d18-d19}, [r0]
   29be0:	mov	r0, r1
   29be4:	mov	r1, #20
   29be8:	vst1.64	{d16-d17}, [r0], r1
   29bec:	str	r4, [r0]
   29bf0:	blt	29d1c <__assert_fail@plt+0x185bc>
   29bf4:	lsl	r0, r4, #2
   29bf8:	str	r4, [fp, #-56]	; 0xffffffc8
   29bfc:	bl	2e08c <__assert_fail@plt+0x1c92c>
   29c00:	cmp	r0, #0
   29c04:	str	r0, [fp, #-48]	; 0xffffffd0
   29c08:	beq	2a2b0 <__assert_fail@plt+0x18b50>
   29c0c:	ldr	r2, [r5, #20]
   29c10:	ldr	r1, [r5, #24]
   29c14:	mov	r6, r0
   29c18:	lsl	r2, r2, #2
   29c1c:	bl	11484 <memcpy@plt>
   29c20:	ldr	r0, [sp, #80]	; 0x50
   29c24:	mov	r2, r6
   29c28:	mov	r6, r4
   29c2c:	mov	lr, r2
   29c30:	str	r0, [fp, #-60]	; 0xffffffc4
   29c34:	ldr	r0, [sp, #56]	; 0x38
   29c38:	str	r0, [fp, #-64]	; 0xffffffc0
   29c3c:	lsl	r0, r6, #1
   29c40:	lsl	r1, r6, #3
   29c44:	mov	r4, lr
   29c48:	str	r0, [sp, #24]
   29c4c:	str	r0, [fp, #-56]	; 0xffffffc8
   29c50:	mov	r0, r2
   29c54:	bl	2e0bc <__assert_fail@plt+0x1c95c>
   29c58:	cmp	r0, #0
   29c5c:	beq	2a2d0 <__assert_fail@plt+0x18b70>
   29c60:	ldr	ip, [sp, #80]	; 0x50
   29c64:	mov	lr, r0
   29c68:	mov	r2, r0
   29c6c:	str	r0, [fp, #-48]	; 0xffffffd0
   29c70:	str	r0, [sp, #16]
   29c74:	ldr	r0, [lr]
   29c78:	str	r2, [sp, #32]
   29c7c:	cmp	r0, r9
   29c80:	ble	29d84 <__assert_fail@plt+0x18624>
   29c84:	ldr	r3, [sp, #76]	; 0x4c
   29c88:	cmp	r6, #1
   29c8c:	mov	r1, r6
   29c90:	blt	29dbc <__assert_fail@plt+0x1865c>
   29c94:	mov	sl, r3
   29c98:	ands	r1, r6, #3
   29c9c:	sub	r2, r6, #1
   29ca0:	mov	r4, r6
   29ca4:	mov	r0, r6
   29ca8:	beq	29cd0 <__assert_fail@plt+0x18570>
   29cac:	add	r7, lr, r4, lsl #2
   29cb0:	mov	r0, r4
   29cb4:	mov	r3, r7
   29cb8:	ldr	r6, [r3, #-4]!
   29cbc:	subs	r1, r1, #1
   29cc0:	sub	r0, r0, #1
   29cc4:	str	r6, [r7]
   29cc8:	mov	r7, r3
   29ccc:	bne	29cb8 <__assert_fail@plt+0x18558>
   29cd0:	mov	r1, #0
   29cd4:	cmp	r2, #3
   29cd8:	bcc	29d10 <__assert_fail@plt+0x185b0>
   29cdc:	add	r2, lr, r0, lsl #2
   29ce0:	sub	r2, r2, #8
   29ce4:	ldr	r6, [r2]
   29ce8:	ldr	r5, [r2, #4]
   29cec:	ldmdb	r2, {r3, r7}
   29cf0:	sub	r0, r0, #4
   29cf4:	cmp	r0, #0
   29cf8:	stmda	r2, {r3, r7}
   29cfc:	str	r6, [r2, #4]
   29d00:	str	r5, [r2, #8]
   29d04:	sub	r2, r2, #16
   29d08:	bgt	29ce4 <__assert_fail@plt+0x18584>
   29d0c:	ldr	r5, [sp, #84]	; 0x54
   29d10:	mov	r6, r4
   29d14:	mov	r3, sl
   29d18:	b	29dbc <__assert_fail@plt+0x1865c>
   29d1c:	ldr	r1, [sp, #8]
   29d20:	mov	r0, #0
   29d24:	str	r0, [r1]
   29d28:	str	r0, [r1, #4]
   29d2c:	str	r0, [r1, #8]
   29d30:	ldr	r0, [sp, #56]	; 0x38
   29d34:	str	ip, [fp, #-60]	; 0xffffffc4
   29d38:	str	r0, [fp, #-64]	; 0xffffffc0
   29d3c:	mov	r0, #1
   29d40:	str	r0, [fp, #-52]	; 0xffffffcc
   29d44:	str	r0, [fp, #-56]	; 0xffffffc8
   29d48:	mov	r0, #4
   29d4c:	bl	2e08c <__assert_fail@plt+0x1c92c>
   29d50:	cmp	r0, #0
   29d54:	str	r0, [fp, #-48]	; 0xffffffd0
   29d58:	beq	2a2b0 <__assert_fail@plt+0x18b50>
   29d5c:	ldr	ip, [sp, #80]	; 0x50
   29d60:	ldr	r3, [sp, #76]	; 0x4c
   29d64:	str	r9, [r0]
   29d68:	str	r0, [sp, #16]
   29d6c:	str	r0, [sp, #64]	; 0x40
   29d70:	str	r0, [sp, #32]
   29d74:	mov	r0, #1
   29d78:	mov	r6, #1
   29d7c:	str	r0, [sp, #24]
   29d80:	b	29dcc <__assert_fail@plt+0x1866c>
   29d84:	add	r0, lr, r6, lsl #2
   29d88:	ldr	r3, [sp, #76]	; 0x4c
   29d8c:	mov	r1, r6
   29d90:	ldr	r2, [r0, #-4]
   29d94:	cmp	r2, r9
   29d98:	ble	29dbc <__assert_fail@plt+0x1865c>
   29d9c:	sub	r1, r6, #2
   29da0:	str	r2, [r0]
   29da4:	sub	r1, r1, #1
   29da8:	ldr	r2, [r0, #-8]
   29dac:	sub	r0, r0, #4
   29db0:	cmp	r2, r9
   29db4:	bgt	29da0 <__assert_fail@plt+0x18640>
   29db8:	add	r1, r1, #2
   29dbc:	add	r6, r6, #1
   29dc0:	str	r9, [lr, r1, lsl #2]
   29dc4:	str	lr, [sp, #64]	; 0x40
   29dc8:	str	r6, [fp, #-52]	; 0xffffffcc
   29dcc:	ldr	r0, [fp, #-72]	; 0xffffffb8
   29dd0:	sub	r1, fp, #72	; 0x48
   29dd4:	ldr	sl, [r0, ip, lsl #2]
   29dd8:	str	r0, [sp, #48]	; 0x30
   29ddc:	mov	r0, r3
   29de0:	bl	28c30 <__assert_fail@plt+0x174d0>
   29de4:	cmp	r0, #0
   29de8:	bne	2a288 <__assert_fail@plt+0x18b28>
   29dec:	ldr	r5, [r5, #4]
   29df0:	ldr	ip, [sp, #80]	; 0x50
   29df4:	ldr	lr, [sp, #64]	; 0x40
   29df8:	str	r6, [sp, #44]	; 0x2c
   29dfc:	cmp	r5, #0
   29e00:	beq	29ea8 <__assert_fail@plt+0x18748>
   29e04:	cmp	ip, #0
   29e08:	bmi	29ea4 <__assert_fail@plt+0x18744>
   29e0c:	ldr	r6, [sp, #48]	; 0x30
   29e10:	ldr	r7, [sp, #12]
   29e14:	ldr	r1, [r5]
   29e18:	ldr	r0, [r6]
   29e1c:	cmp	r1, #0
   29e20:	bne	29e48 <__assert_fail@plt+0x186e8>
   29e24:	str	r0, [r5]
   29e28:	add	r5, r5, #4
   29e2c:	add	r6, r6, #4
   29e30:	subs	r7, r7, #1
   29e34:	beq	29ea4 <__assert_fail@plt+0x18744>
   29e38:	ldr	r1, [r5]
   29e3c:	ldr	r0, [r6]
   29e40:	cmp	r1, #0
   29e44:	beq	29e24 <__assert_fail@plt+0x186c4>
   29e48:	cmp	r0, #0
   29e4c:	beq	29e28 <__assert_fail@plt+0x186c8>
   29e50:	sub	r4, fp, #44	; 0x2c
   29e54:	add	r2, r0, #4
   29e58:	add	r1, r1, #4
   29e5c:	mov	r0, r4
   29e60:	bl	24ea8 <__assert_fail@plt+0x13748>
   29e64:	cmp	r0, #0
   29e68:	str	r0, [fp, #-32]	; 0xffffffe0
   29e6c:	bne	2a288 <__assert_fail@plt+0x18b28>
   29e70:	sub	r0, fp, #32
   29e74:	mov	r1, r8
   29e78:	mov	r2, r4
   29e7c:	bl	26624 <__assert_fail@plt+0x14ec4>
   29e80:	str	r0, [r5]
   29e84:	ldr	r0, [fp, #-36]	; 0xffffffdc
   29e88:	bl	144c0 <__assert_fail@plt+0x2d60>
   29e8c:	ldr	r9, [fp, #-32]	; 0xffffffe0
   29e90:	ldr	ip, [sp, #80]	; 0x50
   29e94:	ldr	lr, [sp, #64]	; 0x40
   29e98:	cmp	r9, #0
   29e9c:	beq	29e28 <__assert_fail@plt+0x186c8>
   29ea0:	b	2a248 <__assert_fail@plt+0x18ae8>
   29ea4:	ldr	r6, [sp, #44]	; 0x2c
   29ea8:	ldr	r0, [sp, #48]	; 0x30
   29eac:	cmp	r6, #1
   29eb0:	str	sl, [r0, ip, lsl #2]
   29eb4:	blt	29f48 <__assert_fail@plt+0x187e8>
   29eb8:	ldr	r4, [sp, #84]	; 0x54
   29ebc:	ldr	r5, [fp, #-80]	; 0xffffffb0
   29ec0:	subs	sl, r6, #1
   29ec4:	mov	r9, #20
   29ec8:	mov	r1, #0
   29ecc:	beq	29ef8 <__assert_fail@plt+0x18798>
   29ed0:	mov	r2, sl
   29ed4:	mov	r0, #1
   29ed8:	add	r3, r1, r2
   29edc:	lsr	r7, r3, #1
   29ee0:	ldr	r6, [lr, r7, lsl #2]
   29ee4:	cmp	r6, r5
   29ee8:	addlt	r1, r0, r3, lsr #1
   29eec:	movge	r2, r7
   29ef0:	cmp	r1, r2
   29ef4:	bcc	29ed8 <__assert_fail@plt+0x18778>
   29ef8:	ldr	r2, [lr, r1, lsl #2]
   29efc:	mov	r3, #1
   29f00:	cmp	r2, r5
   29f04:	mov	r2, r1
   29f08:	mvnne	r2, #0
   29f0c:	cmp	r2, #0
   29f10:	bmi	29f5c <__assert_fail@plt+0x187fc>
   29f14:	ldr	r0, [sp, #44]	; 0x2c
   29f18:	cmp	r0, r2
   29f1c:	ble	29f5c <__assert_fail@plt+0x187fc>
   29f20:	cmp	sl, r2
   29f24:	str	sl, [fp, #-52]	; 0xffffffcc
   29f28:	ble	29f68 <__assert_fail@plt+0x18808>
   29f2c:	mvn	r2, r1
   29f30:	str	sl, [sp, #72]	; 0x48
   29f34:	add	sl, r0, r2
   29f38:	cmp	sl, #4
   29f3c:	bcs	29f78 <__assert_fail@plt+0x18818>
   29f40:	ldr	r9, [sp, #40]	; 0x28
   29f44:	b	2a02c <__assert_fail@plt+0x188cc>
   29f48:	ldr	r4, [sp, #84]	; 0x54
   29f4c:	ldr	r9, [sp, #40]	; 0x28
   29f50:	ldr	r3, [sp, #56]	; 0x38
   29f54:	ldr	r5, [fp, #-80]	; 0xffffffb0
   29f58:	b	2a05c <__assert_fail@plt+0x188fc>
   29f5c:	ldr	r0, [sp, #16]
   29f60:	ldr	r9, [sp, #40]	; 0x28
   29f64:	b	2a054 <__assert_fail@plt+0x188f4>
   29f68:	ldr	r0, [sp, #16]
   29f6c:	ldr	r9, [sp, #40]	; 0x28
   29f70:	str	sl, [sp, #44]	; 0x2c
   29f74:	b	2a054 <__assert_fail@plt+0x188f4>
   29f78:	bic	lr, sl, #3
   29f7c:	subs	r7, lr, #4
   29f80:	add	r6, r3, r7, lsr #2
   29f84:	and	ip, r6, #1
   29f88:	beq	29fcc <__assert_fail@plt+0x1886c>
   29f8c:	ldr	r3, [sp, #64]	; 0x40
   29f90:	sub	r2, ip, r6
   29f94:	mov	r6, #0
   29f98:	add	r3, r3, r1, lsl #2
   29f9c:	add	r7, r3, #4
   29fa0:	mov	r4, r3
   29fa4:	adds	r2, r2, #2
   29fa8:	add	r6, r6, #8
   29fac:	vld1.32	{d16-d17}, [r7]
   29fb0:	vst1.32	{d16-d17}, [r4], r9
   29fb4:	vld1.32	{d16-d17}, [r4]
   29fb8:	add	r4, r3, #16
   29fbc:	add	r3, r3, #32
   29fc0:	vst1.32	{d16-d17}, [r4]
   29fc4:	bne	29f9c <__assert_fail@plt+0x1883c>
   29fc8:	b	29fd0 <__assert_fail@plt+0x18870>
   29fcc:	mov	r6, #0
   29fd0:	cmp	ip, #0
   29fd4:	beq	29ff0 <__assert_fail@plt+0x18890>
   29fd8:	ldr	r7, [sp, #64]	; 0x40
   29fdc:	add	r3, r1, r6
   29fe0:	add	r3, r7, r3, lsl #2
   29fe4:	add	r7, r3, #4
   29fe8:	vld1.32	{d16-d17}, [r7]
   29fec:	vst1.32	{d16-d17}, [r3]
   29ff0:	ldr	r4, [sp, #84]	; 0x54
   29ff4:	ldr	r9, [sp, #40]	; 0x28
   29ff8:	cmp	sl, lr
   29ffc:	bne	2a01c <__assert_fail@plt+0x188bc>
   2a000:	ldr	r0, [sp, #16]
   2a004:	ldr	ip, [sp, #80]	; 0x50
   2a008:	ldr	lr, [sp, #64]	; 0x40
   2a00c:	str	r0, [sp, #32]
   2a010:	ldr	r0, [sp, #72]	; 0x48
   2a014:	str	r0, [sp, #44]	; 0x2c
   2a018:	b	2a058 <__assert_fail@plt+0x188f8>
   2a01c:	add	r1, r1, lr
   2a020:	ldr	ip, [sp, #80]	; 0x50
   2a024:	ldr	lr, [sp, #64]	; 0x40
   2a028:	ldr	r0, [sp, #44]	; 0x2c
   2a02c:	ldr	r6, [sp, #72]	; 0x48
   2a030:	sub	r2, r0, #1
   2a034:	add	r3, lr, r1, lsl #2
   2a038:	ldr	r3, [r3, #4]
   2a03c:	str	r3, [lr, r1, lsl #2]
   2a040:	add	r1, r1, #1
   2a044:	cmp	r2, r1
   2a048:	bne	2a034 <__assert_fail@plt+0x188d4>
   2a04c:	ldr	r0, [sp, #16]
   2a050:	str	r6, [sp, #44]	; 0x2c
   2a054:	str	r0, [sp, #32]
   2a058:	ldr	r3, [sp, #56]	; 0x38
   2a05c:	ldr	r0, [sp, #76]	; 0x4c
   2a060:	add	r1, r5, r5, lsl #1
   2a064:	ldr	r0, [r0, #116]	; 0x74
   2a068:	add	r0, r0, r1, lsl #3
   2a06c:	b	2a1ec <__assert_fail@plt+0x18a8c>
   2a070:	ldr	r0, [sp, #24]
   2a074:	ldr	r2, [sp, #32]
   2a078:	cmp	r0, r6
   2a07c:	beq	29c3c <__assert_fail@plt+0x184dc>
   2a080:	b	29c74 <__assert_fail@plt+0x18514>
   2a084:	ldr	r0, [r7]
   2a088:	cmp	r0, r3
   2a08c:	bne	2a1e8 <__assert_fail@plt+0x18a88>
   2a090:	ldr	r0, [r7, #8]
   2a094:	ldr	r1, [r7, #12]
   2a098:	str	r5, [fp, #-80]	; 0xffffffb0
   2a09c:	subs	r0, r1, r0
   2a0a0:	add	sl, r0, ip
   2a0a4:	beq	2a1c8 <__assert_fail@plt+0x18a68>
   2a0a8:	ldr	r0, [r8, #12]
   2a0ac:	add	r0, r0, r3, lsl #2
   2a0b0:	ldr	r1, [r4, #12]
   2a0b4:	cmp	sl, r1
   2a0b8:	bgt	2a1e4 <__assert_fail@plt+0x18a84>
   2a0bc:	ldr	r1, [r4]
   2a0c0:	ldr	r1, [r1, sl, lsl #2]
   2a0c4:	cmp	r1, #0
   2a0c8:	beq	2a1e4 <__assert_fail@plt+0x18a84>
   2a0cc:	ldr	r2, [r1, #8]
   2a0d0:	cmp	r2, #1
   2a0d4:	blt	2a1e4 <__assert_fail@plt+0x18a84>
   2a0d8:	str	lr, [sp, #64]	; 0x40
   2a0dc:	mov	lr, r8
   2a0e0:	ldr	r8, [r0]
   2a0e4:	ldr	r0, [r1, #12]
   2a0e8:	subs	r2, r2, #1
   2a0ec:	mov	r1, #0
   2a0f0:	mov	r4, #1
   2a0f4:	beq	2a118 <__assert_fail@plt+0x189b8>
   2a0f8:	add	r3, r1, r2
   2a0fc:	lsr	r6, r3, #1
   2a100:	ldr	r5, [r0, r6, lsl #2]
   2a104:	cmp	r5, r8
   2a108:	addlt	r1, r4, r3, lsr #1
   2a10c:	movge	r2, r6
   2a110:	cmp	r1, r2
   2a114:	bcc	2a0f8 <__assert_fail@plt+0x18998>
   2a118:	ldr	r0, [r0, r1, lsl #2]
   2a11c:	cmp	r0, r8
   2a120:	bne	2994c <__assert_fail@plt+0x181ec>
   2a124:	ldr	r1, [sp, #76]	; 0x4c
   2a128:	str	r8, [sp, #52]	; 0x34
   2a12c:	ldr	r0, [r1, #108]	; 0x6c
   2a130:	cmp	r0, #1
   2a134:	blt	29964 <__assert_fail@plt+0x18204>
   2a138:	ldr	r1, [r1, #116]	; 0x74
   2a13c:	mov	r9, #0
   2a140:	mov	r2, r0
   2a144:	add	r3, r2, r9
   2a148:	add	r3, r3, r3, lsr #31
   2a14c:	asr	r6, r3, #1
   2a150:	add	r5, r6, r6, lsl #1
   2a154:	add	r5, r1, r5, lsl #3
   2a158:	ldr	r5, [r5, #4]
   2a15c:	cmp	r5, ip
   2a160:	addlt	r9, r4, r3, asr #1
   2a164:	movge	r2, r6
   2a168:	cmp	r9, r2
   2a16c:	blt	2a144 <__assert_fail@plt+0x189e4>
   2a170:	ldr	r3, [sp, #76]	; 0x4c
   2a174:	cmp	r9, r0
   2a178:	bge	29974 <__assert_fail@plt+0x18214>
   2a17c:	ldr	r1, [r3, #116]	; 0x74
   2a180:	add	r2, r9, r9, lsl #1
   2a184:	add	r1, r1, r2, lsl #3
   2a188:	ldr	r1, [r1, #4]
   2a18c:	cmp	r1, ip
   2a190:	mvnne	r9, #0
   2a194:	cmp	r0, #1
   2a198:	bge	29980 <__assert_fail@plt+0x18220>
   2a19c:	ldr	lr, [sp, #64]	; 0x40
   2a1a0:	mov	r8, #0
   2a1a4:	ldr	r3, [sp, #76]	; 0x4c
   2a1a8:	cmp	r8, r0
   2a1ac:	blt	299c8 <__assert_fail@plt+0x18268>
   2a1b0:	mvn	r8, #0
   2a1b4:	ldr	r5, [sp, #84]	; 0x54
   2a1b8:	ldr	r4, [r5, #20]
   2a1bc:	cmp	r4, #1
   2a1c0:	bge	299f0 <__assert_fail@plt+0x18290>
   2a1c4:	b	29b70 <__assert_fail@plt+0x18410>
   2a1c8:	ldr	r0, [r8, #20]
   2a1cc:	add	r1, r3, r3, lsl #1
   2a1d0:	add	r0, r0, r1, lsl #2
   2a1d4:	ldr	r0, [r0, #8]
   2a1d8:	ldr	r1, [r4, #12]
   2a1dc:	cmp	sl, r1
   2a1e0:	ble	2a0bc <__assert_fail@plt+0x1895c>
   2a1e4:	ldr	r5, [fp, #-80]	; 0xffffffb0
   2a1e8:	mov	r0, r7
   2a1ec:	add	r7, r0, #24
   2a1f0:	ldrb	r0, [r0, #20]
   2a1f4:	add	r5, r5, #1
   2a1f8:	cmp	r0, #0
   2a1fc:	bne	2a084 <__assert_fail@plt+0x18924>
   2a200:	b	298cc <__assert_fail@plt+0x1816c>
   2a204:	mov	r4, #0
   2a208:	cmp	r4, lr
   2a20c:	blt	2985c <__assert_fail@plt+0x180fc>
   2a210:	mov	r0, #0
   2a214:	str	r0, [fp, #-76]	; 0xffffffb4
   2a218:	mov	r9, #0
   2a21c:	mov	r0, r9
   2a220:	sub	sp, fp, #28
   2a224:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2a228:	mov	r9, r0
   2a22c:	str	r0, [fp, #-76]	; 0xffffffb4
   2a230:	mov	r0, r9
   2a234:	sub	sp, fp, #28
   2a238:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2a23c:	str	r2, [fp, #-76]	; 0xffffffb4
   2a240:	b	2a218 <__assert_fail@plt+0x18ab8>
   2a244:	mov	r9, #0
   2a248:	ldr	r0, [fp, #-72]	; 0xffffffb8
   2a24c:	cmp	r0, #0
   2a250:	beq	2a25c <__assert_fail@plt+0x18afc>
   2a254:	mov	r0, lr
   2a258:	bl	144c0 <__assert_fail@plt+0x2d60>
   2a25c:	cmp	r9, #0
   2a260:	str	r9, [fp, #-76]	; 0xffffffb4
   2a264:	moveq	r9, #0
   2a268:	mov	r0, r9
   2a26c:	sub	sp, fp, #28
   2a270:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2a274:	str	r0, [fp, #-72]	; 0xffffffb8
   2a278:	str	r9, [fp, #-76]	; 0xffffffb4
   2a27c:	mov	r0, r9
   2a280:	sub	sp, fp, #28
   2a284:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2a288:	ldr	lr, [sp, #64]	; 0x40
   2a28c:	mov	r9, r0
   2a290:	ldr	r0, [fp, #-72]	; 0xffffffb8
   2a294:	cmp	r0, #0
   2a298:	bne	2a254 <__assert_fail@plt+0x18af4>
   2a29c:	b	2a25c <__assert_fail@plt+0x18afc>
   2a2a0:	mov	r9, r0
   2a2a4:	mov	r0, r9
   2a2a8:	sub	sp, fp, #28
   2a2ac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2a2b0:	mov	lr, #0
   2a2b4:	mov	r9, #12
   2a2b8:	str	lr, [fp, #-56]	; 0xffffffc8
   2a2bc:	str	lr, [fp, #-52]	; 0xffffffcc
   2a2c0:	ldr	r0, [fp, #-72]	; 0xffffffb8
   2a2c4:	cmp	r0, #0
   2a2c8:	bne	2a254 <__assert_fail@plt+0x18af4>
   2a2cc:	b	2a25c <__assert_fail@plt+0x18afc>
   2a2d0:	mov	r9, #12
   2a2d4:	mov	lr, r4
   2a2d8:	ldr	r0, [fp, #-72]	; 0xffffffb8
   2a2dc:	cmp	r0, #0
   2a2e0:	bne	2a254 <__assert_fail@plt+0x18af4>
   2a2e4:	b	2a25c <__assert_fail@plt+0x18afc>
   2a2e8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2a2ec:	add	fp, sp, #28
   2a2f0:	sub	sp, sp, #4
   2a2f4:	mov	r9, r0
   2a2f8:	ldr	r0, [r1, #4]
   2a2fc:	mov	r8, #0
   2a300:	cmp	r0, #0
   2a304:	beq	2a4c0 <__assert_fail@plt+0x18d60>
   2a308:	mov	r5, r2
   2a30c:	ldr	r2, [r2, #4]
   2a310:	cmp	r2, #0
   2a314:	beq	2a4c0 <__assert_fail@plt+0x18d60>
   2a318:	mov	sl, r1
   2a31c:	ldr	r1, [r9, #4]
   2a320:	ldr	r7, [r9]
   2a324:	add	r3, r2, r0
   2a328:	add	r6, r1, r3
   2a32c:	cmp	r6, r7
   2a330:	ble	2a360 <__assert_fail@plt+0x18c00>
   2a334:	ldr	r0, [r9, #8]
   2a338:	add	r4, r7, r3
   2a33c:	lsl	r1, r4, #2
   2a340:	bl	2e0bc <__assert_fail@plt+0x1c95c>
   2a344:	cmp	r0, #0
   2a348:	beq	2a4cc <__assert_fail@plt+0x18d6c>
   2a34c:	str	r4, [r9]
   2a350:	str	r0, [r9, #8]
   2a354:	ldr	r1, [r9, #4]
   2a358:	ldr	r2, [r5, #4]
   2a35c:	ldr	r0, [sl, #4]
   2a360:	ldr	lr, [r5, #8]
   2a364:	ldr	r4, [sl, #8]
   2a368:	add	r3, r0, r1
   2a36c:	sub	r7, r1, #1
   2a370:	add	ip, r3, r2
   2a374:	sub	r0, r0, #1
   2a378:	sub	r3, r2, #1
   2a37c:	ldr	r1, [lr, r3, lsl #2]
   2a380:	ldr	r6, [r4, r0, lsl #2]
   2a384:	cmp	r6, r1
   2a388:	beq	2a3b4 <__assert_fail@plt+0x18c54>
   2a38c:	blt	2a3a4 <__assert_fail@plt+0x18c44>
   2a390:	sub	r6, r0, #1
   2a394:	cmp	r0, #0
   2a398:	mov	r0, r6
   2a39c:	bgt	2a380 <__assert_fail@plt+0x18c20>
   2a3a0:	b	2a424 <__assert_fail@plt+0x18cc4>
   2a3a4:	cmp	r2, #2
   2a3a8:	mov	r2, r3
   2a3ac:	bge	2a378 <__assert_fail@plt+0x18c18>
   2a3b0:	b	2a424 <__assert_fail@plt+0x18cc4>
   2a3b4:	cmp	r7, #0
   2a3b8:	bmi	2a400 <__assert_fail@plt+0x18ca0>
   2a3bc:	ldr	r8, [r9, #8]
   2a3c0:	mov	r1, r7
   2a3c4:	ldr	r7, [r8, r1, lsl #2]
   2a3c8:	cmp	r7, r6
   2a3cc:	ble	2a3e4 <__assert_fail@plt+0x18c84>
   2a3d0:	sub	r7, r1, #1
   2a3d4:	cmp	r1, #0
   2a3d8:	mov	r1, r7
   2a3dc:	bgt	2a3c4 <__assert_fail@plt+0x18c64>
   2a3e0:	b	2a400 <__assert_fail@plt+0x18ca0>
   2a3e4:	mov	r7, r1
   2a3e8:	bne	2a400 <__assert_fail@plt+0x18ca0>
   2a3ec:	mov	r7, r1
   2a3f0:	cmp	r0, #1
   2a3f4:	mov	r8, #0
   2a3f8:	bge	2a418 <__assert_fail@plt+0x18cb8>
   2a3fc:	b	2a424 <__assert_fail@plt+0x18cc4>
   2a400:	ldr	r1, [r9, #8]
   2a404:	sub	ip, ip, #1
   2a408:	str	r6, [r1, ip, lsl #2]
   2a40c:	cmp	r0, #1
   2a410:	mov	r8, #0
   2a414:	blt	2a424 <__assert_fail@plt+0x18cc4>
   2a418:	cmp	r2, #2
   2a41c:	mov	r2, r3
   2a420:	bge	2a374 <__assert_fail@plt+0x18c14>
   2a424:	ldr	r2, [r9, #4]
   2a428:	ldr	lr, [sl, #4]
   2a42c:	ldr	r4, [r5, #4]
   2a430:	ldr	r0, [r9, #8]
   2a434:	subs	r1, r2, #1
   2a438:	add	r3, r1, lr
   2a43c:	add	r3, r3, r4
   2a440:	sub	r7, r3, ip
   2a444:	add	r6, r7, #1
   2a448:	add	r5, r6, r2
   2a44c:	str	r5, [r9, #4]
   2a450:	blt	2a4b0 <__assert_fail@plt+0x18d50>
   2a454:	cmp	r7, #0
   2a458:	bmi	2a4b0 <__assert_fail@plt+0x18d50>
   2a45c:	add	r2, r2, r4
   2a460:	add	r2, r2, lr
   2a464:	sub	r2, r2, ip
   2a468:	add	r7, r0, r2, lsl #2
   2a46c:	ldr	r2, [r0, r1, lsl #2]
   2a470:	ldr	r5, [r0, r3, lsl #2]
   2a474:	cmp	r5, r2
   2a478:	bgt	2a494 <__assert_fail@plt+0x18d34>
   2a47c:	str	r2, [r7, r1, lsl #2]
   2a480:	sub	r2, r1, #1
   2a484:	cmp	r1, #0
   2a488:	mov	r1, r2
   2a48c:	bgt	2a46c <__assert_fail@plt+0x18d0c>
   2a490:	b	2a4b0 <__assert_fail@plt+0x18d50>
   2a494:	str	r5, [r7, r1, lsl #2]
   2a498:	sub	r7, r7, #4
   2a49c:	subs	r6, r6, #1
   2a4a0:	sub	r3, r3, #1
   2a4a4:	mov	r2, #0
   2a4a8:	bne	2a46c <__assert_fail@plt+0x18d0c>
   2a4ac:	b	2a4b4 <__assert_fail@plt+0x18d54>
   2a4b0:	mov	r2, r6
   2a4b4:	add	r1, r0, ip, lsl #2
   2a4b8:	lsl	r2, r2, #2
   2a4bc:	bl	11484 <memcpy@plt>
   2a4c0:	mov	r0, r8
   2a4c4:	sub	sp, fp, #28
   2a4c8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2a4cc:	mov	r8, #12
   2a4d0:	mov	r0, r8
   2a4d4:	sub	sp, fp, #28
   2a4d8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2a4dc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2a4e0:	add	fp, sp, #28
   2a4e4:	sub	sp, sp, #44	; 0x2c
   2a4e8:	mov	ip, r0
   2a4ec:	ldr	r0, [r0, #28]
   2a4f0:	str	r3, [sp, #4]
   2a4f4:	add	r3, r1, r1, lsl #1
   2a4f8:	mov	r4, #0
   2a4fc:	str	r4, [sp, #36]	; 0x24
   2a500:	str	r4, [sp, #32]
   2a504:	str	r4, [sp, #40]	; 0x28
   2a508:	add	r3, r0, r3, lsl #2
   2a50c:	mov	r0, r3
   2a510:	ldr	lr, [r0, #4]!
   2a514:	str	r0, [sp, #24]
   2a518:	cmp	lr, #1
   2a51c:	blt	2a85c <__assert_fail@plt+0x190fc>
   2a520:	add	r4, r3, #8
   2a524:	mov	r9, #0
   2a528:	mov	sl, #1
   2a52c:	str	r2, [sp, #28]
   2a530:	str	r3, [sp]
   2a534:	str	r1, [sp, #12]
   2a538:	str	ip, [sp, #8]
   2a53c:	str	r4, [sp, #20]
   2a540:	ldr	r3, [r4]
   2a544:	ldr	r0, [r3, r9, lsl #2]
   2a548:	cmp	r0, r1
   2a54c:	bne	2a56c <__assert_fail@plt+0x18e0c>
   2a550:	add	r9, r9, #1
   2a554:	cmp	r9, lr
   2a558:	bge	2a71c <__assert_fail@plt+0x18fbc>
   2a55c:	ldr	r3, [r4]
   2a560:	ldr	r0, [r3, r9, lsl #2]
   2a564:	cmp	r0, r1
   2a568:	beq	2a550 <__assert_fail@plt+0x18df0>
   2a56c:	ldr	r2, [ip]
   2a570:	add	r2, r2, r0, lsl #3
   2a574:	ldrb	r2, [r2, #4]
   2a578:	tst	r2, #8
   2a57c:	beq	2a550 <__assert_fail@plt+0x18df0>
   2a580:	ldr	r2, [ip, #20]
   2a584:	add	r0, r0, r0, lsl #1
   2a588:	mvn	r8, #0
   2a58c:	str	r0, [sp, #16]
   2a590:	add	r0, r2, r0, lsl #2
   2a594:	ldr	r7, [r0, #4]
   2a598:	ldr	r0, [r0, #8]
   2a59c:	cmp	r7, #2
   2a5a0:	ldr	r5, [r0]
   2a5a4:	ldrge	r8, [r0, #4]
   2a5a8:	cmp	lr, #1
   2a5ac:	blt	2a5ec <__assert_fail@plt+0x18e8c>
   2a5b0:	mov	r2, #0
   2a5b4:	subs	r7, lr, #1
   2a5b8:	beq	2a5dc <__assert_fail@plt+0x18e7c>
   2a5bc:	add	r6, r2, r7
   2a5c0:	lsr	r4, r6, #1
   2a5c4:	ldr	r0, [r3, r4, lsl #2]
   2a5c8:	cmp	r0, r5
   2a5cc:	addlt	r2, sl, r6, lsr #1
   2a5d0:	movge	r7, r4
   2a5d4:	cmp	r2, r7
   2a5d8:	bcc	2a5bc <__assert_fail@plt+0x18e5c>
   2a5dc:	ldr	r0, [r3, r2, lsl #2]
   2a5e0:	ldr	r4, [sp, #20]
   2a5e4:	cmp	r0, r5
   2a5e8:	beq	2a648 <__assert_fail@plt+0x18ee8>
   2a5ec:	ldr	r0, [sp, #28]
   2a5f0:	ldr	r0, [r0, #4]
   2a5f4:	cmp	r0, #1
   2a5f8:	blt	2a648 <__assert_fail@plt+0x18ee8>
   2a5fc:	subs	r7, r0, #1
   2a600:	ldr	r0, [sp, #28]
   2a604:	mov	r6, #0
   2a608:	ldr	r1, [r0, #8]
   2a60c:	beq	2a630 <__assert_fail@plt+0x18ed0>
   2a610:	add	r0, r6, r7
   2a614:	lsr	r4, r0, #1
   2a618:	ldr	ip, [r1, r4, lsl #2]
   2a61c:	cmp	ip, r5
   2a620:	addlt	r6, sl, r0, lsr #1
   2a624:	movge	r7, r4
   2a628:	cmp	r6, r7
   2a62c:	bcc	2a610 <__assert_fail@plt+0x18eb0>
   2a630:	ldr	r0, [r1, r6, lsl #2]
   2a634:	ldr	r1, [sp, #12]
   2a638:	ldr	ip, [sp, #8]
   2a63c:	ldr	r4, [sp, #20]
   2a640:	cmp	r0, r5
   2a644:	beq	2a6e0 <__assert_fail@plt+0x18f80>
   2a648:	cmp	r8, #1
   2a64c:	blt	2a550 <__assert_fail@plt+0x18df0>
   2a650:	cmp	lr, #1
   2a654:	blt	2a690 <__assert_fail@plt+0x18f30>
   2a658:	mov	r2, #0
   2a65c:	subs	r7, lr, #1
   2a660:	beq	2a684 <__assert_fail@plt+0x18f24>
   2a664:	add	r0, r2, r7
   2a668:	lsr	r6, r0, #1
   2a66c:	ldr	r5, [r3, r6, lsl #2]
   2a670:	cmp	r5, r8
   2a674:	addlt	r2, sl, r0, lsr #1
   2a678:	movge	r7, r6
   2a67c:	cmp	r2, r7
   2a680:	bcc	2a664 <__assert_fail@plt+0x18f04>
   2a684:	ldr	r0, [r3, r2, lsl #2]
   2a688:	cmp	r0, r8
   2a68c:	beq	2a550 <__assert_fail@plt+0x18df0>
   2a690:	ldr	r2, [sp, #28]
   2a694:	ldr	r0, [r2, #4]
   2a698:	cmp	r0, #1
   2a69c:	blt	2a550 <__assert_fail@plt+0x18df0>
   2a6a0:	ldr	r4, [r2, #8]
   2a6a4:	subs	r7, r0, #1
   2a6a8:	mov	r3, #0
   2a6ac:	beq	2a6d0 <__assert_fail@plt+0x18f70>
   2a6b0:	add	r0, r3, r7
   2a6b4:	lsr	r6, r0, #1
   2a6b8:	ldr	r5, [r4, r6, lsl #2]
   2a6bc:	cmp	r5, r8
   2a6c0:	addlt	r3, sl, r0, lsr #1
   2a6c4:	movge	r7, r6
   2a6c8:	cmp	r3, r7
   2a6cc:	bcc	2a6b0 <__assert_fail@plt+0x18f50>
   2a6d0:	ldr	r0, [r4, r3, lsl #2]
   2a6d4:	ldr	r4, [sp, #20]
   2a6d8:	cmp	r0, r8
   2a6dc:	bne	2a550 <__assert_fail@plt+0x18df0>
   2a6e0:	ldr	r0, [ip, #28]
   2a6e4:	ldr	r1, [sp, #16]
   2a6e8:	add	r2, r0, r1, lsl #2
   2a6ec:	ldr	r1, [sp, #4]
   2a6f0:	add	r0, sp, #32
   2a6f4:	bl	2a2e8 <__assert_fail@plt+0x18b88>
   2a6f8:	cmp	r0, #0
   2a6fc:	bne	2a94c <__assert_fail@plt+0x191ec>
   2a700:	ldr	r0, [sp, #24]
   2a704:	ldr	r1, [sp, #12]
   2a708:	ldr	ip, [sp, #8]
   2a70c:	ldr	lr, [r0]
   2a710:	add	r9, r9, #1
   2a714:	cmp	r9, lr
   2a718:	blt	2a55c <__assert_fail@plt+0x18dfc>
   2a71c:	ldr	r2, [sp, #28]
   2a720:	ldr	r0, [sp]
   2a724:	cmp	lr, #0
   2a728:	mov	r4, #0
   2a72c:	ble	2a85c <__assert_fail@plt+0x190fc>
   2a730:	ldr	r1, [sp, #36]	; 0x24
   2a734:	ldr	r9, [r0, #8]
   2a738:	ldr	r0, [sp, #40]	; 0x28
   2a73c:	subs	lr, r1, #1
   2a740:	str	r9, [sp, #20]
   2a744:	blt	2a870 <__assert_fail@plt+0x19110>
   2a748:	mov	ip, #0
   2a74c:	mov	r7, #1
   2a750:	ldr	r6, [r9, ip, lsl #2]
   2a754:	cmp	lr, #0
   2a758:	mov	r1, #0
   2a75c:	bne	2a788 <__assert_fail@plt+0x19028>
   2a760:	b	2a7b0 <__assert_fail@plt+0x19050>
   2a764:	ldr	r1, [sp, #24]
   2a768:	add	ip, ip, #1
   2a76c:	ldr	r1, [r1]
   2a770:	cmp	ip, r1
   2a774:	bge	2a938 <__assert_fail@plt+0x191d8>
   2a778:	ldr	r6, [r9, ip, lsl #2]
   2a77c:	cmp	lr, #0
   2a780:	mov	r1, #0
   2a784:	beq	2a7b0 <__assert_fail@plt+0x19050>
   2a788:	mov	r1, #0
   2a78c:	mov	r2, lr
   2a790:	add	r5, r1, r2
   2a794:	lsr	r4, r5, #1
   2a798:	ldr	r3, [r0, r4, lsl #2]
   2a79c:	cmp	r3, r6
   2a7a0:	addlt	r1, r7, r5, lsr #1
   2a7a4:	movge	r2, r4
   2a7a8:	cmp	r1, r2
   2a7ac:	bcc	2a790 <__assert_fail@plt+0x19030>
   2a7b0:	ldr	r1, [r0, r1, lsl #2]
   2a7b4:	cmp	r1, r6
   2a7b8:	ldr	r1, [sp, #28]
   2a7bc:	beq	2a764 <__assert_fail@plt+0x19004>
   2a7c0:	ldr	sl, [r1, #4]
   2a7c4:	cmp	sl, #1
   2a7c8:	blt	2a764 <__assert_fail@plt+0x19004>
   2a7cc:	ldr	r5, [r1, #8]
   2a7d0:	subs	r4, sl, #1
   2a7d4:	beq	2a804 <__assert_fail@plt+0x190a4>
   2a7d8:	mov	r1, #0
   2a7dc:	mov	r8, r4
   2a7e0:	add	r3, r1, r4
   2a7e4:	lsr	r2, r3, #1
   2a7e8:	ldr	r9, [r5, r2, lsl #2]
   2a7ec:	cmp	r9, r6
   2a7f0:	addlt	r1, r7, r3, lsr #1
   2a7f4:	movge	r4, r2
   2a7f8:	cmp	r1, r4
   2a7fc:	bcc	2a7e0 <__assert_fail@plt+0x19080>
   2a800:	b	2a80c <__assert_fail@plt+0x190ac>
   2a804:	mov	r8, r4
   2a808:	mov	r1, #0
   2a80c:	ldr	r2, [r5, r1, lsl #2]
   2a810:	ldr	r3, [sp, #28]
   2a814:	ldr	r9, [sp, #20]
   2a818:	mov	r4, r1
   2a81c:	cmp	r2, r6
   2a820:	mvnne	r4, #0
   2a824:	cmp	r4, #0
   2a828:	bmi	2a764 <__assert_fail@plt+0x19004>
   2a82c:	cmp	sl, r4
   2a830:	strgt	r8, [r3, #4]
   2a834:	cmpgt	r8, r4
   2a838:	ble	2a764 <__assert_fail@plt+0x19004>
   2a83c:	add	r2, r5, r1, lsl #2
   2a840:	ldr	r2, [r2, #4]
   2a844:	str	r2, [r5, r1, lsl #2]
   2a848:	add	r1, r1, #1
   2a84c:	ldr	r2, [r3, #4]
   2a850:	cmp	r1, r2
   2a854:	blt	2a83c <__assert_fail@plt+0x190dc>
   2a858:	b	2a764 <__assert_fail@plt+0x19004>
   2a85c:	ldr	r0, [sp, #40]	; 0x28
   2a860:	bl	144c0 <__assert_fail@plt+0x2d60>
   2a864:	mov	r0, r4
   2a868:	sub	sp, fp, #28
   2a86c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2a870:	ldr	r7, [r2, #4]
   2a874:	mov	sl, #0
   2a878:	mov	r9, #1
   2a87c:	cmp	r7, #1
   2a880:	bge	2a8a8 <__assert_fail@plt+0x19148>
   2a884:	b	2a88c <__assert_fail@plt+0x1912c>
   2a888:	ldr	r2, [sp, #28]
   2a88c:	ldr	r1, [sp, #24]
   2a890:	add	sl, sl, #1
   2a894:	ldr	r1, [r1]
   2a898:	cmp	sl, r1
   2a89c:	bge	2a938 <__assert_fail@plt+0x191d8>
   2a8a0:	cmp	r7, #1
   2a8a4:	blt	2a88c <__assert_fail@plt+0x1912c>
   2a8a8:	ldr	r1, [sp, #20]
   2a8ac:	ldr	r6, [r2, #8]
   2a8b0:	subs	lr, r7, #1
   2a8b4:	mov	r5, #0
   2a8b8:	ldr	r1, [r1, sl, lsl #2]
   2a8bc:	beq	2a8e4 <__assert_fail@plt+0x19184>
   2a8c0:	mov	r4, lr
   2a8c4:	add	r3, r5, r4
   2a8c8:	lsr	r2, r3, #1
   2a8cc:	ldr	ip, [r6, r2, lsl #2]
   2a8d0:	cmp	ip, r1
   2a8d4:	addlt	r5, r9, r3, lsr #1
   2a8d8:	movge	r4, r2
   2a8dc:	cmp	r5, r4
   2a8e0:	bcc	2a8c4 <__assert_fail@plt+0x19164>
   2a8e4:	ldr	r2, [r6, r5, lsl #2]
   2a8e8:	cmp	r2, r1
   2a8ec:	mov	r1, r5
   2a8f0:	mvnne	r1, #0
   2a8f4:	cmp	r1, #0
   2a8f8:	bmi	2a888 <__assert_fail@plt+0x19128>
   2a8fc:	ldr	r2, [sp, #28]
   2a900:	cmp	r7, r1
   2a904:	ble	2a88c <__assert_fail@plt+0x1912c>
   2a908:	cmp	lr, r1
   2a90c:	mov	r7, lr
   2a910:	str	lr, [r2, #4]
   2a914:	ble	2a88c <__assert_fail@plt+0x1912c>
   2a918:	add	r1, r6, r5, lsl #2
   2a91c:	ldr	r1, [r1, #4]
   2a920:	str	r1, [r6, r5, lsl #2]
   2a924:	add	r5, r5, #1
   2a928:	ldr	r7, [r2, #4]
   2a92c:	cmp	r5, r7
   2a930:	blt	2a918 <__assert_fail@plt+0x191b8>
   2a934:	b	2a88c <__assert_fail@plt+0x1912c>
   2a938:	mov	r4, #0
   2a93c:	bl	144c0 <__assert_fail@plt+0x2d60>
   2a940:	mov	r0, r4
   2a944:	sub	sp, fp, #28
   2a948:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2a94c:	mov	r1, r0
   2a950:	ldr	r0, [sp, #40]	; 0x28
   2a954:	mov	r4, r1
   2a958:	bl	144c0 <__assert_fail@plt+0x2d60>
   2a95c:	mov	r0, r4
   2a960:	sub	sp, fp, #28
   2a964:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2a968:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2a96c:	add	fp, sp, #28
   2a970:	sub	sp, sp, #44	; 0x2c
   2a974:	ldr	r4, [r0, #84]	; 0x54
   2a978:	mov	r7, r0
   2a97c:	str	r1, [fp, #-32]	; 0xffffffe0
   2a980:	add	r1, r3, r3, lsl #1
   2a984:	mov	r6, r2
   2a988:	str	r3, [sp, #36]	; 0x24
   2a98c:	ldr	r0, [r4, #24]
   2a990:	add	r0, r0, r1, lsl #2
   2a994:	mov	r2, r0
   2a998:	ldr	r1, [r2, #4]!
   2a99c:	str	r2, [sp, #28]
   2a9a0:	cmp	r1, #1
   2a9a4:	blt	2ac70 <__assert_fail@plt+0x19510>
   2a9a8:	mov	r1, #1
   2a9ac:	cmp	r6, #31
   2a9b0:	add	r0, r0, #8
   2a9b4:	mov	sl, #0
   2a9b8:	mvn	r2, r1, lsl r6
   2a9bc:	lsl	r1, r1, r6
   2a9c0:	str	r0, [sp, #32]
   2a9c4:	str	r2, [sp, #16]
   2a9c8:	ldr	r2, [fp, #-32]	; 0xffffffe0
   2a9cc:	str	r1, [sp, #24]
   2a9d0:	mov	r1, #0
   2a9d4:	movwgt	r1, #1
   2a9d8:	and	r3, r2, #2
   2a9dc:	and	r0, r2, #1
   2a9e0:	orr	r1, r1, r3, lsr #1
   2a9e4:	str	r3, [sp, #20]
   2a9e8:	str	r0, [sp, #8]
   2a9ec:	str	r1, [sp, #12]
   2a9f0:	b	2aa08 <__assert_fail@plt+0x192a8>
   2a9f4:	ldr	r0, [sp, #28]
   2a9f8:	add	sl, sl, #1
   2a9fc:	ldr	r0, [r0]
   2aa00:	cmp	sl, r0
   2aa04:	bge	2ac70 <__assert_fail@plt+0x19510>
   2aa08:	ldr	r0, [sp, #32]
   2aa0c:	ldr	r0, [r0]
   2aa10:	ldr	r8, [r0, sl, lsl #2]
   2aa14:	ldr	r0, [r4]
   2aa18:	add	r1, r0, r8, lsl #3
   2aa1c:	ldrb	r1, [r1, #4]
   2aa20:	cmp	r1, #9
   2aa24:	beq	2aa70 <__assert_fail@plt+0x19310>
   2aa28:	cmp	r1, #8
   2aa2c:	beq	2aa8c <__assert_fail@plt+0x1932c>
   2aa30:	cmp	r1, #4
   2aa34:	bne	2a9f4 <__assert_fail@plt+0x19294>
   2aa38:	ldr	r0, [fp, #8]
   2aa3c:	cmn	r0, #1
   2aa40:	beq	2a9f4 <__assert_fail@plt+0x19294>
   2aa44:	ldr	r1, [fp, #8]
   2aa48:	ldr	r0, [r7, #116]	; 0x74
   2aa4c:	cmp	r6, #31
   2aa50:	add	r1, r1, r1, lsl #1
   2aa54:	bgt	2ab48 <__assert_fail@plt+0x193e8>
   2aa58:	add	r0, r0, r1, lsl #3
   2aa5c:	add	r9, r0, #16
   2aa60:	ldr	r0, [r9, #-16]
   2aa64:	cmp	r0, r8
   2aa68:	bne	2aac0 <__assert_fail@plt+0x19360>
   2aa6c:	b	2aadc <__assert_fail@plt+0x1937c>
   2aa70:	ldr	r1, [sp, #20]
   2aa74:	cmp	r1, #0
   2aa78:	beq	2a9f4 <__assert_fail@plt+0x19294>
   2aa7c:	ldr	r0, [r0, r8, lsl #3]
   2aa80:	cmp	r0, r6
   2aa84:	bne	2a9f4 <__assert_fail@plt+0x19294>
   2aa88:	b	2ac90 <__assert_fail@plt+0x19530>
   2aa8c:	ldr	r1, [sp, #8]
   2aa90:	cmp	r1, #0
   2aa94:	beq	2a9f4 <__assert_fail@plt+0x19294>
   2aa98:	ldr	r0, [r0, r8, lsl #3]
   2aa9c:	cmp	r0, r6
   2aaa0:	bne	2a9f4 <__assert_fail@plt+0x19294>
   2aaa4:	b	2ac9c <__assert_fail@plt+0x1953c>
   2aaa8:	cmn	r0, #1
   2aaac:	beq	2ac68 <__assert_fail@plt+0x19508>
   2aab0:	ldr	r0, [r9]
   2aab4:	ldr	r1, [sp, #16]
   2aab8:	and	r0, r0, r1
   2aabc:	str	r0, [r9]
   2aac0:	ldrb	r0, [r9, #4]
   2aac4:	add	r9, r9, #24
   2aac8:	cmp	r0, #0
   2aacc:	beq	2a9f4 <__assert_fail@plt+0x19294>
   2aad0:	ldr	r0, [r9, #-16]
   2aad4:	cmp	r0, r8
   2aad8:	bne	2aac0 <__assert_fail@plt+0x19360>
   2aadc:	ldr	r0, [r9]
   2aae0:	ldr	r1, [sp, #24]
   2aae4:	tst	r0, r1
   2aae8:	beq	2aac0 <__assert_fail@plt+0x19360>
   2aaec:	ldr	r0, [r4, #20]
   2aaf0:	add	r1, r8, r8, lsl #1
   2aaf4:	add	r0, r0, r1, lsl #2
   2aaf8:	ldr	r0, [r0, #8]
   2aafc:	ldr	r3, [r0]
   2ab00:	ldr	r0, [sp, #36]	; 0x24
   2ab04:	cmp	r3, r0
   2ab08:	beq	2ac80 <__assert_fail@plt+0x19520>
   2ab0c:	ldr	r0, [fp, #8]
   2ab10:	ldr	r1, [fp, #-32]	; 0xffffffe0
   2ab14:	mov	r2, r6
   2ab18:	str	r0, [sp]
   2ab1c:	mov	r0, r7
   2ab20:	bl	2a968 <__assert_fail@plt+0x19208>
   2ab24:	cmp	r0, #0
   2ab28:	bne	2aaa8 <__assert_fail@plt+0x19348>
   2ab2c:	ldr	r0, [sp, #12]
   2ab30:	cmp	r0, #0
   2ab34:	beq	2aab0 <__assert_fail@plt+0x19350>
   2ab38:	ldr	r0, [sp, #20]
   2ab3c:	cmp	r0, #0
   2ab40:	beq	2aac0 <__assert_fail@plt+0x19360>
   2ab44:	b	2ac90 <__assert_fail@plt+0x19530>
   2ab48:	ldr	r2, [sp, #12]
   2ab4c:	cmp	r2, #0
   2ab50:	beq	2abdc <__assert_fail@plt+0x1947c>
   2ab54:	add	r5, r0, r1, lsl #3
   2ab58:	ldr	r0, [r5]
   2ab5c:	cmp	r0, r8
   2ab60:	bne	2ab74 <__assert_fail@plt+0x19414>
   2ab64:	b	2ab90 <__assert_fail@plt+0x19430>
   2ab68:	ldr	r0, [sp, #20]
   2ab6c:	cmp	r0, #0
   2ab70:	bne	2ac90 <__assert_fail@plt+0x19530>
   2ab74:	ldrb	r0, [r5, #20]
   2ab78:	add	r5, r5, #24
   2ab7c:	cmp	r0, #0
   2ab80:	beq	2a9f4 <__assert_fail@plt+0x19294>
   2ab84:	ldr	r0, [r5]
   2ab88:	cmp	r0, r8
   2ab8c:	bne	2ab74 <__assert_fail@plt+0x19414>
   2ab90:	ldr	r0, [r4, #20]
   2ab94:	add	r1, r8, r8, lsl #1
   2ab98:	add	r0, r0, r1, lsl #2
   2ab9c:	ldr	r0, [r0, #8]
   2aba0:	ldr	r3, [r0]
   2aba4:	ldr	r0, [sp, #36]	; 0x24
   2aba8:	cmp	r3, r0
   2abac:	beq	2ac80 <__assert_fail@plt+0x19520>
   2abb0:	ldr	r0, [fp, #8]
   2abb4:	ldr	r1, [fp, #-32]	; 0xffffffe0
   2abb8:	mov	r2, r6
   2abbc:	str	r0, [sp]
   2abc0:	mov	r0, r7
   2abc4:	bl	2a968 <__assert_fail@plt+0x19208>
   2abc8:	cmp	r0, #0
   2abcc:	beq	2ab68 <__assert_fail@plt+0x19408>
   2abd0:	cmn	r0, #1
   2abd4:	bne	2ab74 <__assert_fail@plt+0x19414>
   2abd8:	b	2ac68 <__assert_fail@plt+0x19508>
   2abdc:	add	r0, r0, r1, lsl #3
   2abe0:	add	r5, r0, #16
   2abe4:	ldr	r0, [r5, #-16]
   2abe8:	cmp	r0, r8
   2abec:	bne	2ac04 <__assert_fail@plt+0x194a4>
   2abf0:	b	2ac20 <__assert_fail@plt+0x194c0>
   2abf4:	ldr	r0, [r5]
   2abf8:	ldr	r1, [sp, #16]
   2abfc:	and	r0, r0, r1
   2ac00:	str	r0, [r5]
   2ac04:	ldrb	r0, [r5, #4]
   2ac08:	add	r5, r5, #24
   2ac0c:	cmp	r0, #0
   2ac10:	beq	2a9f4 <__assert_fail@plt+0x19294>
   2ac14:	ldr	r0, [r5, #-16]
   2ac18:	cmp	r0, r8
   2ac1c:	bne	2ac04 <__assert_fail@plt+0x194a4>
   2ac20:	ldr	r0, [r4, #20]
   2ac24:	add	r1, r8, r8, lsl #1
   2ac28:	add	r0, r0, r1, lsl #2
   2ac2c:	ldr	r0, [r0, #8]
   2ac30:	ldr	r3, [r0]
   2ac34:	ldr	r0, [sp, #36]	; 0x24
   2ac38:	cmp	r3, r0
   2ac3c:	beq	2ac80 <__assert_fail@plt+0x19520>
   2ac40:	ldr	r0, [fp, #8]
   2ac44:	ldr	r1, [fp, #-32]	; 0xffffffe0
   2ac48:	mov	r2, r6
   2ac4c:	str	r0, [sp]
   2ac50:	mov	r0, r7
   2ac54:	bl	2a968 <__assert_fail@plt+0x19208>
   2ac58:	cmp	r0, #0
   2ac5c:	beq	2abf4 <__assert_fail@plt+0x19494>
   2ac60:	cmn	r0, #1
   2ac64:	bne	2ac04 <__assert_fail@plt+0x194a4>
   2ac68:	sub	sp, fp, #28
   2ac6c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2ac70:	ldr	r0, [fp, #-32]	; 0xffffffe0
   2ac74:	ubfx	r0, r0, #1, #1
   2ac78:	sub	sp, fp, #28
   2ac7c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2ac80:	ldr	r0, [sp, #8]
   2ac84:	rsb	r0, r0, #0
   2ac88:	sub	sp, fp, #28
   2ac8c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2ac90:	mov	r0, #0
   2ac94:	sub	sp, fp, #28
   2ac98:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2ac9c:	mvn	r0, #0
   2aca0:	sub	sp, fp, #28
   2aca4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2aca8:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   2acac:	add	fp, sp, #24
   2acb0:	movw	r8, #0
   2acb4:	mov	r6, r2
   2acb8:	mov	r4, r1
   2acbc:	mov	r5, r0
   2acc0:	movt	r8, #32752	; 0x7ff0
   2acc4:	mov	r0, r5
   2acc8:	mov	r1, r4
   2accc:	mov	r2, r6
   2acd0:	bl	11424 <read@plt>
   2acd4:	mov	r7, r0
   2acd8:	cmn	r0, #1
   2acdc:	bgt	2ad04 <__assert_fail@plt+0x195a4>
   2ace0:	bl	11640 <__errno_location@plt>
   2ace4:	ldr	r0, [r0]
   2ace8:	cmp	r0, #4
   2acec:	beq	2acc4 <__assert_fail@plt+0x19564>
   2acf0:	cmp	r6, r8
   2acf4:	bls	2ad04 <__assert_fail@plt+0x195a4>
   2acf8:	cmp	r0, #22
   2acfc:	mov	r6, r8
   2ad00:	beq	2acc4 <__assert_fail@plt+0x19564>
   2ad04:	mov	r0, r7
   2ad08:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   2ad0c:	mov	r1, #0
   2ad10:	mov	r2, #3
   2ad14:	b	2e258 <__assert_fail@plt+0x1caf8>
   2ad18:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   2ad1c:	add	fp, sp, #24
   2ad20:	sub	sp, sp, #32
   2ad24:	ldr	r6, [fp, #12]
   2ad28:	ldr	r7, [fp, #8]
   2ad2c:	mov	r4, r2
   2ad30:	mov	r8, r0
   2ad34:	cmp	r1, #0
   2ad38:	beq	2ad60 <__assert_fail@plt+0x19600>
   2ad3c:	movw	r2, #63481	; 0xf7f9
   2ad40:	mov	r5, r1
   2ad44:	str	r3, [sp, #4]
   2ad48:	str	r4, [sp]
   2ad4c:	mov	r0, r8
   2ad50:	mov	r1, #1
   2ad54:	movt	r2, #2
   2ad58:	mov	r3, r5
   2ad5c:	b	2ad78 <__assert_fail@plt+0x19618>
   2ad60:	movw	r2, #63493	; 0xf805
   2ad64:	str	r3, [sp]
   2ad68:	mov	r0, r8
   2ad6c:	mov	r1, #1
   2ad70:	mov	r3, r4
   2ad74:	movt	r2, #2
   2ad78:	bl	116a0 <__fprintf_chk@plt>
   2ad7c:	movw	r1, #63500	; 0xf80c
   2ad80:	mov	r0, #0
   2ad84:	mov	r2, #5
   2ad88:	movt	r1, #2
   2ad8c:	bl	114d8 <dcgettext@plt>
   2ad90:	movw	r2, #64218	; 0xfada
   2ad94:	mov	r3, r0
   2ad98:	movw	r0, #2022	; 0x7e6
   2ad9c:	mov	r1, #1
   2ada0:	movt	r2, #2
   2ada4:	str	r0, [sp]
   2ada8:	mov	r0, r8
   2adac:	bl	116a0 <__fprintf_chk@plt>
   2adb0:	movw	r4, #61034	; 0xee6a
   2adb4:	mov	r1, r8
   2adb8:	movt	r4, #2
   2adbc:	mov	r0, r4
   2adc0:	bl	113dc <fputs_unlocked@plt>
   2adc4:	movw	r1, #63504	; 0xf810
   2adc8:	mov	r0, #0
   2adcc:	mov	r2, #5
   2add0:	movt	r1, #2
   2add4:	bl	114d8 <dcgettext@plt>
   2add8:	movw	r3, #63675	; 0xf8bb
   2addc:	mov	r2, r0
   2ade0:	mov	r0, r8
   2ade4:	mov	r1, #1
   2ade8:	movt	r3, #2
   2adec:	bl	116a0 <__fprintf_chk@plt>
   2adf0:	mov	r0, r4
   2adf4:	mov	r1, r8
   2adf8:	bl	113dc <fputs_unlocked@plt>
   2adfc:	cmp	r6, #9
   2ae00:	bhi	2ae3c <__assert_fail@plt+0x196dc>
   2ae04:	add	r0, pc, #0
   2ae08:	ldr	pc, [r0, r6, lsl #2]
   2ae0c:	andeq	sl, r2, r4, lsr lr
   2ae10:	andeq	sl, r2, r8, asr #28
   2ae14:	andeq	sl, r2, r8, ror lr
   2ae18:	andeq	sl, r2, r0, lsr #29
   2ae1c:	andeq	sl, r2, r8, asr #29
   2ae20:	strdeq	sl, [r2], -r0
   2ae24:	andeq	sl, r2, r8, lsl pc
   2ae28:	andeq	sl, r2, r0, asr pc
   2ae2c:	strdeq	sl, [r2], -r8
   2ae30:	andeq	sl, r2, r0, lsr #31
   2ae34:	sub	sp, fp, #24
   2ae38:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   2ae3c:	movw	r1, #64028	; 0xfa1c
   2ae40:	movt	r1, #2
   2ae44:	b	2afa8 <__assert_fail@plt+0x19848>
   2ae48:	movw	r1, #63709	; 0xf8dd
   2ae4c:	mov	r0, #0
   2ae50:	mov	r2, #5
   2ae54:	movt	r1, #2
   2ae58:	bl	114d8 <dcgettext@plt>
   2ae5c:	ldr	r3, [r7]
   2ae60:	mov	r2, r0
   2ae64:	mov	r0, r8
   2ae68:	mov	r1, #1
   2ae6c:	sub	sp, fp, #24
   2ae70:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   2ae74:	b	116a0 <__fprintf_chk@plt>
   2ae78:	movw	r1, #63725	; 0xf8ed
   2ae7c:	mov	r0, #0
   2ae80:	mov	r2, #5
   2ae84:	movt	r1, #2
   2ae88:	bl	114d8 <dcgettext@plt>
   2ae8c:	mov	r2, r0
   2ae90:	ldr	r3, [r7]
   2ae94:	ldr	r0, [r7, #4]
   2ae98:	str	r0, [sp]
   2ae9c:	b	2af8c <__assert_fail@plt+0x1982c>
   2aea0:	movw	r1, #63748	; 0xf904
   2aea4:	mov	r0, #0
   2aea8:	mov	r2, #5
   2aeac:	movt	r1, #2
   2aeb0:	bl	114d8 <dcgettext@plt>
   2aeb4:	mov	r2, r0
   2aeb8:	ldr	r3, [r7]
   2aebc:	ldmib	r7, {r0, r1}
   2aec0:	stm	sp, {r0, r1}
   2aec4:	b	2af8c <__assert_fail@plt+0x1982c>
   2aec8:	movw	r1, #63776	; 0xf920
   2aecc:	mov	r0, #0
   2aed0:	mov	r2, #5
   2aed4:	movt	r1, #2
   2aed8:	bl	114d8 <dcgettext@plt>
   2aedc:	ldr	r3, [r7]
   2aee0:	mov	r2, r0
   2aee4:	ldmib	r7, {r0, r1, r7}
   2aee8:	stm	sp, {r0, r1, r7}
   2aeec:	b	2af8c <__assert_fail@plt+0x1982c>
   2aef0:	movw	r1, #63808	; 0xf940
   2aef4:	mov	r0, #0
   2aef8:	mov	r2, #5
   2aefc:	movt	r1, #2
   2af00:	bl	114d8 <dcgettext@plt>
   2af04:	ldr	r3, [r7]
   2af08:	mov	r2, r0
   2af0c:	ldmib	r7, {r0, r1, r6, r7}
   2af10:	stm	sp, {r0, r1, r6, r7}
   2af14:	b	2af8c <__assert_fail@plt+0x1982c>
   2af18:	movw	r1, #63844	; 0xf964
   2af1c:	mov	r0, #0
   2af20:	mov	r2, #5
   2af24:	movt	r1, #2
   2af28:	bl	114d8 <dcgettext@plt>
   2af2c:	mov	r2, r0
   2af30:	ldr	r3, [r7]
   2af34:	ldmib	r7, {r0, r1, r6}
   2af38:	ldr	r5, [r7, #16]
   2af3c:	ldr	r7, [r7, #20]
   2af40:	stm	sp, {r0, r1, r6}
   2af44:	str	r5, [sp, #12]
   2af48:	str	r7, [sp, #16]
   2af4c:	b	2af8c <__assert_fail@plt+0x1982c>
   2af50:	movw	r1, #63884	; 0xf98c
   2af54:	mov	r0, #0
   2af58:	mov	r2, #5
   2af5c:	movt	r1, #2
   2af60:	bl	114d8 <dcgettext@plt>
   2af64:	mov	r2, r0
   2af68:	ldr	r3, [r7]
   2af6c:	ldmib	r7, {r0, r1, r6}
   2af70:	ldr	r5, [r7, #16]
   2af74:	ldr	r4, [r7, #20]
   2af78:	ldr	r7, [r7, #24]
   2af7c:	stm	sp, {r0, r1, r6}
   2af80:	str	r5, [sp, #12]
   2af84:	str	r4, [sp, #16]
   2af88:	str	r7, [sp, #20]
   2af8c:	mov	r0, r8
   2af90:	mov	r1, #1
   2af94:	bl	116a0 <__fprintf_chk@plt>
   2af98:	sub	sp, fp, #24
   2af9c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   2afa0:	movw	r1, #63976	; 0xf9e8
   2afa4:	movt	r1, #2
   2afa8:	mov	r0, #0
   2afac:	mov	r2, #5
   2afb0:	bl	114d8 <dcgettext@plt>
   2afb4:	mov	ip, r0
   2afb8:	ldr	r3, [r7]
   2afbc:	ldr	r0, [r7, #4]
   2afc0:	ldr	r1, [r7, #8]
   2afc4:	ldr	r6, [r7, #12]
   2afc8:	ldr	r5, [r7, #16]
   2afcc:	ldr	r4, [r7, #20]
   2afd0:	ldr	r2, [r7, #24]
   2afd4:	ldr	lr, [r7, #28]
   2afd8:	ldr	r7, [r7, #32]
   2afdc:	stm	sp, {r0, r1, r6}
   2afe0:	str	r5, [sp, #12]
   2afe4:	str	r4, [sp, #16]
   2afe8:	str	r2, [sp, #20]
   2afec:	str	lr, [sp, #24]
   2aff0:	str	r7, [sp, #28]
   2aff4:	b	2b03c <__assert_fail@plt+0x198dc>
   2aff8:	movw	r1, #63928	; 0xf9b8
   2affc:	mov	r0, #0
   2b000:	mov	r2, #5
   2b004:	movt	r1, #2
   2b008:	bl	114d8 <dcgettext@plt>
   2b00c:	mov	ip, r0
   2b010:	ldr	r3, [r7]
   2b014:	ldmib	r7, {r0, r1, r6}
   2b018:	ldr	r5, [r7, #16]
   2b01c:	ldr	r4, [r7, #20]
   2b020:	ldr	r2, [r7, #24]
   2b024:	ldr	r7, [r7, #28]
   2b028:	stm	sp, {r0, r1, r6}
   2b02c:	str	r5, [sp, #12]
   2b030:	str	r4, [sp, #16]
   2b034:	str	r2, [sp, #20]
   2b038:	str	r7, [sp, #24]
   2b03c:	mov	r0, r8
   2b040:	mov	r1, #1
   2b044:	mov	r2, ip
   2b048:	bl	116a0 <__fprintf_chk@plt>
   2b04c:	sub	sp, fp, #24
   2b050:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   2b054:	push	{r4, sl, fp, lr}
   2b058:	add	fp, sp, #8
   2b05c:	sub	sp, sp, #8
   2b060:	ldr	ip, [fp, #8]
   2b064:	mov	lr, #0
   2b068:	ldr	r4, [ip, lr, lsl #2]
   2b06c:	add	lr, lr, #1
   2b070:	cmp	r4, #0
   2b074:	bne	2b068 <__assert_fail@plt+0x19908>
   2b078:	sub	r4, lr, #1
   2b07c:	str	ip, [sp]
   2b080:	str	r4, [sp, #4]
   2b084:	bl	2ad18 <__assert_fail@plt+0x195b8>
   2b088:	sub	sp, fp, #8
   2b08c:	pop	{r4, sl, fp, pc}
   2b090:	push	{fp, lr}
   2b094:	mov	fp, sp
   2b098:	sub	sp, sp, #48	; 0x30
   2b09c:	ldr	ip, [fp, #8]
   2b0a0:	ldr	lr, [ip]
   2b0a4:	cmp	lr, #0
   2b0a8:	str	lr, [sp, #8]
   2b0ac:	beq	2b148 <__assert_fail@plt+0x199e8>
   2b0b0:	ldr	lr, [ip, #4]
   2b0b4:	cmp	lr, #0
   2b0b8:	str	lr, [sp, #12]
   2b0bc:	beq	2b150 <__assert_fail@plt+0x199f0>
   2b0c0:	ldr	lr, [ip, #8]
   2b0c4:	cmp	lr, #0
   2b0c8:	str	lr, [sp, #16]
   2b0cc:	beq	2b158 <__assert_fail@plt+0x199f8>
   2b0d0:	ldr	lr, [ip, #12]
   2b0d4:	cmp	lr, #0
   2b0d8:	str	lr, [sp, #20]
   2b0dc:	beq	2b160 <__assert_fail@plt+0x19a00>
   2b0e0:	ldr	lr, [ip, #16]
   2b0e4:	cmp	lr, #0
   2b0e8:	str	lr, [sp, #24]
   2b0ec:	beq	2b168 <__assert_fail@plt+0x19a08>
   2b0f0:	ldr	lr, [ip, #20]
   2b0f4:	cmp	lr, #0
   2b0f8:	str	lr, [sp, #28]
   2b0fc:	beq	2b170 <__assert_fail@plt+0x19a10>
   2b100:	ldr	lr, [ip, #24]
   2b104:	cmp	lr, #0
   2b108:	str	lr, [sp, #32]
   2b10c:	beq	2b178 <__assert_fail@plt+0x19a18>
   2b110:	ldr	lr, [ip, #28]
   2b114:	cmp	lr, #0
   2b118:	str	lr, [sp, #36]	; 0x24
   2b11c:	beq	2b180 <__assert_fail@plt+0x19a20>
   2b120:	ldr	lr, [ip, #32]
   2b124:	cmp	lr, #0
   2b128:	str	lr, [sp, #40]	; 0x28
   2b12c:	beq	2b188 <__assert_fail@plt+0x19a28>
   2b130:	ldr	lr, [ip, #36]	; 0x24
   2b134:	mov	ip, #10
   2b138:	cmp	lr, #0
   2b13c:	str	lr, [sp, #44]	; 0x2c
   2b140:	movweq	ip, #9
   2b144:	b	2b18c <__assert_fail@plt+0x19a2c>
   2b148:	mov	ip, #0
   2b14c:	b	2b18c <__assert_fail@plt+0x19a2c>
   2b150:	mov	ip, #1
   2b154:	b	2b18c <__assert_fail@plt+0x19a2c>
   2b158:	mov	ip, #2
   2b15c:	b	2b18c <__assert_fail@plt+0x19a2c>
   2b160:	mov	ip, #3
   2b164:	b	2b18c <__assert_fail@plt+0x19a2c>
   2b168:	mov	ip, #4
   2b16c:	b	2b18c <__assert_fail@plt+0x19a2c>
   2b170:	mov	ip, #5
   2b174:	b	2b18c <__assert_fail@plt+0x19a2c>
   2b178:	mov	ip, #6
   2b17c:	b	2b18c <__assert_fail@plt+0x19a2c>
   2b180:	mov	ip, #7
   2b184:	b	2b18c <__assert_fail@plt+0x19a2c>
   2b188:	mov	ip, #8
   2b18c:	add	lr, sp, #8
   2b190:	str	ip, [sp, #4]
   2b194:	str	lr, [sp]
   2b198:	bl	2ad18 <__assert_fail@plt+0x195b8>
   2b19c:	mov	sp, fp
   2b1a0:	pop	{fp, pc}
   2b1a4:	push	{fp, lr}
   2b1a8:	mov	fp, sp
   2b1ac:	sub	sp, sp, #56	; 0x38
   2b1b0:	add	ip, fp, #8
   2b1b4:	str	ip, [sp, #12]
   2b1b8:	ldr	lr, [fp, #8]
   2b1bc:	cmp	lr, #0
   2b1c0:	str	lr, [sp, #16]
   2b1c4:	beq	2b260 <__assert_fail@plt+0x19b00>
   2b1c8:	ldr	lr, [ip, #4]
   2b1cc:	cmp	lr, #0
   2b1d0:	str	lr, [sp, #20]
   2b1d4:	beq	2b268 <__assert_fail@plt+0x19b08>
   2b1d8:	ldr	lr, [ip, #8]
   2b1dc:	cmp	lr, #0
   2b1e0:	str	lr, [sp, #24]
   2b1e4:	beq	2b270 <__assert_fail@plt+0x19b10>
   2b1e8:	ldr	lr, [ip, #12]
   2b1ec:	cmp	lr, #0
   2b1f0:	str	lr, [sp, #28]
   2b1f4:	beq	2b278 <__assert_fail@plt+0x19b18>
   2b1f8:	ldr	lr, [ip, #16]
   2b1fc:	cmp	lr, #0
   2b200:	str	lr, [sp, #32]
   2b204:	beq	2b280 <__assert_fail@plt+0x19b20>
   2b208:	ldr	lr, [ip, #20]
   2b20c:	cmp	lr, #0
   2b210:	str	lr, [sp, #36]	; 0x24
   2b214:	beq	2b288 <__assert_fail@plt+0x19b28>
   2b218:	ldr	lr, [ip, #24]
   2b21c:	cmp	lr, #0
   2b220:	str	lr, [sp, #40]	; 0x28
   2b224:	beq	2b290 <__assert_fail@plt+0x19b30>
   2b228:	ldr	lr, [ip, #28]
   2b22c:	cmp	lr, #0
   2b230:	str	lr, [sp, #44]	; 0x2c
   2b234:	beq	2b298 <__assert_fail@plt+0x19b38>
   2b238:	ldr	lr, [ip, #32]
   2b23c:	cmp	lr, #0
   2b240:	str	lr, [sp, #48]	; 0x30
   2b244:	beq	2b2a0 <__assert_fail@plt+0x19b40>
   2b248:	ldr	lr, [ip, #36]	; 0x24
   2b24c:	mov	ip, #10
   2b250:	cmp	lr, #0
   2b254:	str	lr, [sp, #52]	; 0x34
   2b258:	movweq	ip, #9
   2b25c:	b	2b2a4 <__assert_fail@plt+0x19b44>
   2b260:	mov	ip, #0
   2b264:	b	2b2a4 <__assert_fail@plt+0x19b44>
   2b268:	mov	ip, #1
   2b26c:	b	2b2a4 <__assert_fail@plt+0x19b44>
   2b270:	mov	ip, #2
   2b274:	b	2b2a4 <__assert_fail@plt+0x19b44>
   2b278:	mov	ip, #3
   2b27c:	b	2b2a4 <__assert_fail@plt+0x19b44>
   2b280:	mov	ip, #4
   2b284:	b	2b2a4 <__assert_fail@plt+0x19b44>
   2b288:	mov	ip, #5
   2b28c:	b	2b2a4 <__assert_fail@plt+0x19b44>
   2b290:	mov	ip, #6
   2b294:	b	2b2a4 <__assert_fail@plt+0x19b44>
   2b298:	mov	ip, #7
   2b29c:	b	2b2a4 <__assert_fail@plt+0x19b44>
   2b2a0:	mov	ip, #8
   2b2a4:	add	lr, sp, #16
   2b2a8:	str	ip, [sp, #4]
   2b2ac:	str	lr, [sp]
   2b2b0:	bl	2ad18 <__assert_fail@plt+0x195b8>
   2b2b4:	mov	sp, fp
   2b2b8:	pop	{fp, pc}
   2b2bc:	push	{fp, lr}
   2b2c0:	mov	fp, sp
   2b2c4:	movw	r0, #444	; 0x1bc
   2b2c8:	movt	r0, #4
   2b2cc:	ldr	r1, [r0]
   2b2d0:	movw	r0, #61034	; 0xee6a
   2b2d4:	movt	r0, #2
   2b2d8:	bl	113dc <fputs_unlocked@plt>
   2b2dc:	movw	r1, #64088	; 0xfa58
   2b2e0:	mov	r0, #0
   2b2e4:	mov	r2, #5
   2b2e8:	movt	r1, #2
   2b2ec:	bl	114d8 <dcgettext@plt>
   2b2f0:	movw	r2, #64108	; 0xfa6c
   2b2f4:	mov	r1, r0
   2b2f8:	mov	r0, #1
   2b2fc:	movt	r2, #2
   2b300:	bl	11688 <__printf_chk@plt>
   2b304:	movw	r1, #64130	; 0xfa82
   2b308:	mov	r0, #0
   2b30c:	mov	r2, #5
   2b310:	movt	r1, #2
   2b314:	bl	114d8 <dcgettext@plt>
   2b318:	movw	r2, #59705	; 0xe939
   2b31c:	movw	r3, #62199	; 0xf2f7
   2b320:	mov	r1, r0
   2b324:	mov	r0, #1
   2b328:	movt	r2, #2
   2b32c:	movt	r3, #2
   2b330:	bl	11688 <__printf_chk@plt>
   2b334:	movw	r1, #64150	; 0xfa96
   2b338:	mov	r0, #0
   2b33c:	mov	r2, #5
   2b340:	movt	r1, #2
   2b344:	bl	114d8 <dcgettext@plt>
   2b348:	movw	r2, #64189	; 0xfabd
   2b34c:	mov	r1, r0
   2b350:	mov	r0, #1
   2b354:	movt	r2, #2
   2b358:	pop	{fp, lr}
   2b35c:	b	11688 <__printf_chk@plt>
   2b360:	push	{r4, r5, r6, sl, fp, lr}
   2b364:	add	fp, sp, #16
   2b368:	mov	r4, r2
   2b36c:	mov	r5, r1
   2b370:	mov	r6, r0
   2b374:	bl	2e4d4 <__assert_fail@plt+0x1cd74>
   2b378:	cmp	r0, #0
   2b37c:	popne	{r4, r5, r6, sl, fp, pc}
   2b380:	cmp	r6, #0
   2b384:	beq	2b398 <__assert_fail@plt+0x19c38>
   2b388:	cmp	r5, #0
   2b38c:	cmpne	r4, #0
   2b390:	bne	2b398 <__assert_fail@plt+0x19c38>
   2b394:	pop	{r4, r5, r6, sl, fp, pc}
   2b398:	bl	11860 <__assert_fail@plt+0x100>
   2b39c:	push	{r4, r5, r6, sl, fp, lr}
   2b3a0:	add	fp, sp, #16
   2b3a4:	mov	r4, r2
   2b3a8:	mov	r5, r1
   2b3ac:	mov	r6, r0
   2b3b0:	bl	2e4d4 <__assert_fail@plt+0x1cd74>
   2b3b4:	cmp	r0, #0
   2b3b8:	popne	{r4, r5, r6, sl, fp, pc}
   2b3bc:	cmp	r6, #0
   2b3c0:	beq	2b3d4 <__assert_fail@plt+0x19c74>
   2b3c4:	cmp	r5, #0
   2b3c8:	cmpne	r4, #0
   2b3cc:	bne	2b3d4 <__assert_fail@plt+0x19c74>
   2b3d0:	pop	{r4, r5, r6, sl, fp, pc}
   2b3d4:	bl	11860 <__assert_fail@plt+0x100>
   2b3d8:	push	{fp, lr}
   2b3dc:	mov	fp, sp
   2b3e0:	bl	2e08c <__assert_fail@plt+0x1c92c>
   2b3e4:	cmp	r0, #0
   2b3e8:	popne	{fp, pc}
   2b3ec:	bl	11860 <__assert_fail@plt+0x100>
   2b3f0:	push	{fp, lr}
   2b3f4:	mov	fp, sp
   2b3f8:	bl	2e08c <__assert_fail@plt+0x1c92c>
   2b3fc:	cmp	r0, #0
   2b400:	popne	{fp, pc}
   2b404:	bl	11860 <__assert_fail@plt+0x100>
   2b408:	push	{fp, lr}
   2b40c:	mov	fp, sp
   2b410:	bl	2e08c <__assert_fail@plt+0x1c92c>
   2b414:	cmp	r0, #0
   2b418:	popne	{fp, pc}
   2b41c:	bl	11860 <__assert_fail@plt+0x100>
   2b420:	push	{r4, r5, fp, lr}
   2b424:	add	fp, sp, #8
   2b428:	mov	r4, r1
   2b42c:	mov	r5, r0
   2b430:	bl	2e0bc <__assert_fail@plt+0x1c95c>
   2b434:	cmp	r0, #0
   2b438:	popne	{r4, r5, fp, pc}
   2b43c:	cmp	r5, #0
   2b440:	beq	2b450 <__assert_fail@plt+0x19cf0>
   2b444:	cmp	r4, #0
   2b448:	bne	2b450 <__assert_fail@plt+0x19cf0>
   2b44c:	pop	{r4, r5, fp, pc}
   2b450:	bl	11860 <__assert_fail@plt+0x100>
   2b454:	push	{fp, lr}
   2b458:	mov	fp, sp
   2b45c:	cmp	r1, #0
   2b460:	orreq	r1, r1, #1
   2b464:	bl	2e0bc <__assert_fail@plt+0x1c95c>
   2b468:	cmp	r0, #0
   2b46c:	popne	{fp, pc}
   2b470:	bl	11860 <__assert_fail@plt+0x100>
   2b474:	push	{fp, lr}
   2b478:	mov	fp, sp
   2b47c:	clz	r3, r2
   2b480:	lsr	ip, r3, #5
   2b484:	clz	r3, r1
   2b488:	lsr	r3, r3, #5
   2b48c:	orrs	r3, r3, ip
   2b490:	movwne	r1, #1
   2b494:	movwne	r2, #1
   2b498:	bl	2e4d4 <__assert_fail@plt+0x1cd74>
   2b49c:	cmp	r0, #0
   2b4a0:	popne	{fp, pc}
   2b4a4:	bl	11860 <__assert_fail@plt+0x100>
   2b4a8:	push	{fp, lr}
   2b4ac:	mov	fp, sp
   2b4b0:	mov	r2, r1
   2b4b4:	mov	r1, r0
   2b4b8:	mov	r0, #0
   2b4bc:	bl	2e4d4 <__assert_fail@plt+0x1cd74>
   2b4c0:	cmp	r0, #0
   2b4c4:	popne	{fp, pc}
   2b4c8:	bl	11860 <__assert_fail@plt+0x100>
   2b4cc:	push	{fp, lr}
   2b4d0:	mov	fp, sp
   2b4d4:	mov	r2, r1
   2b4d8:	mov	r1, r0
   2b4dc:	clz	r0, r2
   2b4e0:	clz	r3, r1
   2b4e4:	lsr	r0, r0, #5
   2b4e8:	lsr	r3, r3, #5
   2b4ec:	orrs	r0, r3, r0
   2b4f0:	mov	r0, #0
   2b4f4:	movwne	r1, #1
   2b4f8:	movwne	r2, #1
   2b4fc:	bl	2e4d4 <__assert_fail@plt+0x1cd74>
   2b500:	cmp	r0, #0
   2b504:	popne	{fp, pc}
   2b508:	bl	11860 <__assert_fail@plt+0x100>
   2b50c:	push	{r4, r5, r6, sl, fp, lr}
   2b510:	add	fp, sp, #16
   2b514:	ldr	r5, [r1]
   2b518:	mov	r4, r1
   2b51c:	mov	r6, r0
   2b520:	cmp	r0, #0
   2b524:	beq	2b53c <__assert_fail@plt+0x19ddc>
   2b528:	mov	r0, #1
   2b52c:	add	r0, r0, r5, lsr #1
   2b530:	adds	r5, r5, r0
   2b534:	bcc	2b544 <__assert_fail@plt+0x19de4>
   2b538:	b	2b580 <__assert_fail@plt+0x19e20>
   2b53c:	cmp	r5, #0
   2b540:	movweq	r5, #64	; 0x40
   2b544:	mov	r0, r6
   2b548:	mov	r1, r5
   2b54c:	mov	r2, #1
   2b550:	bl	2e4d4 <__assert_fail@plt+0x1cd74>
   2b554:	cmp	r5, #0
   2b558:	mov	r1, r5
   2b55c:	movwne	r1, #1
   2b560:	cmp	r0, #0
   2b564:	bne	2b578 <__assert_fail@plt+0x19e18>
   2b568:	clz	r2, r6
   2b56c:	lsr	r2, r2, #5
   2b570:	orrs	r1, r2, r1
   2b574:	bne	2b580 <__assert_fail@plt+0x19e20>
   2b578:	str	r5, [r4]
   2b57c:	pop	{r4, r5, r6, sl, fp, pc}
   2b580:	bl	11860 <__assert_fail@plt+0x100>
   2b584:	push	{r4, r5, r6, r7, fp, lr}
   2b588:	add	fp, sp, #16
   2b58c:	ldr	r5, [r1]
   2b590:	mov	r6, r2
   2b594:	mov	r4, r1
   2b598:	mov	r7, r0
   2b59c:	cmp	r0, #0
   2b5a0:	beq	2b5b8 <__assert_fail@plt+0x19e58>
   2b5a4:	mov	r0, #1
   2b5a8:	add	r0, r0, r5, lsr #1
   2b5ac:	adds	r5, r5, r0
   2b5b0:	bcc	2b5d0 <__assert_fail@plt+0x19e70>
   2b5b4:	b	2b604 <__assert_fail@plt+0x19ea4>
   2b5b8:	cmp	r5, #0
   2b5bc:	bne	2b5d0 <__assert_fail@plt+0x19e70>
   2b5c0:	mov	r0, #64	; 0x40
   2b5c4:	cmp	r6, #64	; 0x40
   2b5c8:	udiv	r5, r0, r6
   2b5cc:	addhi	r5, r5, #1
   2b5d0:	mov	r0, r7
   2b5d4:	mov	r1, r5
   2b5d8:	mov	r2, r6
   2b5dc:	bl	2e4d4 <__assert_fail@plt+0x1cd74>
   2b5e0:	cmp	r0, #0
   2b5e4:	bne	2b5fc <__assert_fail@plt+0x19e9c>
   2b5e8:	cmp	r7, #0
   2b5ec:	beq	2b604 <__assert_fail@plt+0x19ea4>
   2b5f0:	cmp	r6, #0
   2b5f4:	cmpne	r5, #0
   2b5f8:	bne	2b604 <__assert_fail@plt+0x19ea4>
   2b5fc:	str	r5, [r4]
   2b600:	pop	{r4, r5, r6, r7, fp, pc}
   2b604:	bl	11860 <__assert_fail@plt+0x100>
   2b608:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   2b60c:	add	fp, sp, #24
   2b610:	mov	r8, r1
   2b614:	ldr	r1, [r1]
   2b618:	mov	r5, r0
   2b61c:	add	r0, r1, r1, asr #1
   2b620:	cmp	r0, r1
   2b624:	mvnvs	r0, #-2147483648	; 0x80000000
   2b628:	cmp	r0, r3
   2b62c:	mov	r7, r0
   2b630:	movgt	r7, r3
   2b634:	cmn	r3, #1
   2b638:	movle	r7, r0
   2b63c:	ldr	r0, [fp, #8]
   2b640:	cmn	r0, #1
   2b644:	ble	2b66c <__assert_fail@plt+0x19f0c>
   2b648:	cmp	r0, #0
   2b64c:	beq	2b6c0 <__assert_fail@plt+0x19f60>
   2b650:	cmn	r7, #1
   2b654:	ble	2b694 <__assert_fail@plt+0x19f34>
   2b658:	mvn	r4, #-2147483648	; 0x80000000
   2b65c:	udiv	r6, r4, r0
   2b660:	cmp	r6, r7
   2b664:	bge	2b6c0 <__assert_fail@plt+0x19f60>
   2b668:	b	2b6d0 <__assert_fail@plt+0x19f70>
   2b66c:	cmn	r7, #1
   2b670:	ble	2b6b0 <__assert_fail@plt+0x19f50>
   2b674:	cmn	r0, #1
   2b678:	beq	2b6c0 <__assert_fail@plt+0x19f60>
   2b67c:	mov	r6, #-2147483648	; 0x80000000
   2b680:	mvn	r4, #-2147483648	; 0x80000000
   2b684:	sdiv	r6, r6, r0
   2b688:	cmp	r6, r7
   2b68c:	bge	2b6c0 <__assert_fail@plt+0x19f60>
   2b690:	b	2b6d0 <__assert_fail@plt+0x19f70>
   2b694:	beq	2b6c0 <__assert_fail@plt+0x19f60>
   2b698:	mov	r6, #-2147483648	; 0x80000000
   2b69c:	mvn	r4, #-2147483648	; 0x80000000
   2b6a0:	sdiv	r6, r6, r7
   2b6a4:	cmp	r6, r0
   2b6a8:	bge	2b6c0 <__assert_fail@plt+0x19f60>
   2b6ac:	b	2b6d0 <__assert_fail@plt+0x19f70>
   2b6b0:	mvn	r4, #-2147483648	; 0x80000000
   2b6b4:	sdiv	r6, r4, r0
   2b6b8:	cmp	r7, r6
   2b6bc:	blt	2b6d0 <__assert_fail@plt+0x19f70>
   2b6c0:	mul	r6, r7, r0
   2b6c4:	mov	r4, #64	; 0x40
   2b6c8:	cmp	r6, #63	; 0x3f
   2b6cc:	bgt	2b6d8 <__assert_fail@plt+0x19f78>
   2b6d0:	sdiv	r7, r4, r0
   2b6d4:	mul	r6, r7, r0
   2b6d8:	cmp	r5, #0
   2b6dc:	moveq	r4, #0
   2b6e0:	streq	r4, [r8]
   2b6e4:	sub	r4, r7, r1
   2b6e8:	cmp	r4, r2
   2b6ec:	bge	2b798 <__assert_fail@plt+0x1a038>
   2b6f0:	add	r7, r1, r2
   2b6f4:	mov	r6, #0
   2b6f8:	mov	r2, #0
   2b6fc:	cmp	r7, r3
   2b700:	movwgt	r6, #1
   2b704:	cmn	r3, #1
   2b708:	movwgt	r2, #1
   2b70c:	cmp	r7, r1
   2b710:	bvs	2b7cc <__assert_fail@plt+0x1a06c>
   2b714:	ands	r1, r2, r6
   2b718:	bne	2b7cc <__assert_fail@plt+0x1a06c>
   2b71c:	cmn	r0, #1
   2b720:	ble	2b748 <__assert_fail@plt+0x19fe8>
   2b724:	cmp	r0, #0
   2b728:	beq	2b794 <__assert_fail@plt+0x1a034>
   2b72c:	cmn	r7, #1
   2b730:	ble	2b76c <__assert_fail@plt+0x1a00c>
   2b734:	mvn	r1, #-2147483648	; 0x80000000
   2b738:	udiv	r1, r1, r0
   2b73c:	cmp	r1, r7
   2b740:	bge	2b794 <__assert_fail@plt+0x1a034>
   2b744:	b	2b7cc <__assert_fail@plt+0x1a06c>
   2b748:	cmn	r7, #1
   2b74c:	ble	2b784 <__assert_fail@plt+0x1a024>
   2b750:	cmn	r0, #1
   2b754:	beq	2b794 <__assert_fail@plt+0x1a034>
   2b758:	mov	r1, #-2147483648	; 0x80000000
   2b75c:	sdiv	r1, r1, r0
   2b760:	cmp	r1, r7
   2b764:	bge	2b794 <__assert_fail@plt+0x1a034>
   2b768:	b	2b7cc <__assert_fail@plt+0x1a06c>
   2b76c:	beq	2b794 <__assert_fail@plt+0x1a034>
   2b770:	mov	r1, #-2147483648	; 0x80000000
   2b774:	sdiv	r1, r1, r7
   2b778:	cmp	r1, r0
   2b77c:	bge	2b794 <__assert_fail@plt+0x1a034>
   2b780:	b	2b7cc <__assert_fail@plt+0x1a06c>
   2b784:	mvn	r1, #-2147483648	; 0x80000000
   2b788:	sdiv	r1, r1, r0
   2b78c:	cmp	r7, r1
   2b790:	blt	2b7cc <__assert_fail@plt+0x1a06c>
   2b794:	mul	r6, r7, r0
   2b798:	mov	r0, r5
   2b79c:	mov	r1, r6
   2b7a0:	bl	2e0bc <__assert_fail@plt+0x1c95c>
   2b7a4:	cmp	r6, #0
   2b7a8:	movwne	r6, #1
   2b7ac:	cmp	r0, #0
   2b7b0:	bne	2b7c4 <__assert_fail@plt+0x1a064>
   2b7b4:	clz	r1, r5
   2b7b8:	lsr	r1, r1, #5
   2b7bc:	orrs	r1, r1, r6
   2b7c0:	bne	2b7cc <__assert_fail@plt+0x1a06c>
   2b7c4:	str	r7, [r8]
   2b7c8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   2b7cc:	bl	11860 <__assert_fail@plt+0x100>
   2b7d0:	push	{fp, lr}
   2b7d4:	mov	fp, sp
   2b7d8:	mov	r1, #1
   2b7dc:	bl	2e038 <__assert_fail@plt+0x1c8d8>
   2b7e0:	cmp	r0, #0
   2b7e4:	popne	{fp, pc}
   2b7e8:	bl	11860 <__assert_fail@plt+0x100>
   2b7ec:	push	{fp, lr}
   2b7f0:	mov	fp, sp
   2b7f4:	bl	2e038 <__assert_fail@plt+0x1c8d8>
   2b7f8:	cmp	r0, #0
   2b7fc:	popne	{fp, pc}
   2b800:	bl	11860 <__assert_fail@plt+0x100>
   2b804:	push	{fp, lr}
   2b808:	mov	fp, sp
   2b80c:	mov	r1, #1
   2b810:	bl	2e038 <__assert_fail@plt+0x1c8d8>
   2b814:	cmp	r0, #0
   2b818:	popne	{fp, pc}
   2b81c:	bl	11860 <__assert_fail@plt+0x100>
   2b820:	push	{fp, lr}
   2b824:	mov	fp, sp
   2b828:	bl	2e038 <__assert_fail@plt+0x1c8d8>
   2b82c:	cmp	r0, #0
   2b830:	popne	{fp, pc}
   2b834:	bl	11860 <__assert_fail@plt+0x100>
   2b838:	push	{r4, r5, fp, lr}
   2b83c:	add	fp, sp, #8
   2b840:	mov	r5, r0
   2b844:	mov	r0, r1
   2b848:	mov	r4, r1
   2b84c:	bl	2e08c <__assert_fail@plt+0x1c92c>
   2b850:	cmp	r0, #0
   2b854:	beq	2b868 <__assert_fail@plt+0x1a108>
   2b858:	mov	r1, r5
   2b85c:	mov	r2, r4
   2b860:	pop	{r4, r5, fp, lr}
   2b864:	b	11484 <memcpy@plt>
   2b868:	bl	11860 <__assert_fail@plt+0x100>
   2b86c:	push	{r4, r5, fp, lr}
   2b870:	add	fp, sp, #8
   2b874:	mov	r5, r0
   2b878:	mov	r0, r1
   2b87c:	mov	r4, r1
   2b880:	bl	2e08c <__assert_fail@plt+0x1c92c>
   2b884:	cmp	r0, #0
   2b888:	beq	2b89c <__assert_fail@plt+0x1a13c>
   2b88c:	mov	r1, r5
   2b890:	mov	r2, r4
   2b894:	pop	{r4, r5, fp, lr}
   2b898:	b	11484 <memcpy@plt>
   2b89c:	bl	11860 <__assert_fail@plt+0x100>
   2b8a0:	push	{r4, r5, fp, lr}
   2b8a4:	add	fp, sp, #8
   2b8a8:	mov	r5, r0
   2b8ac:	add	r0, r1, #1
   2b8b0:	mov	r4, r1
   2b8b4:	bl	2e08c <__assert_fail@plt+0x1c92c>
   2b8b8:	cmp	r0, #0
   2b8bc:	beq	2b8d8 <__assert_fail@plt+0x1a178>
   2b8c0:	mov	r1, #0
   2b8c4:	mov	r2, r4
   2b8c8:	strb	r1, [r0, r4]
   2b8cc:	mov	r1, r5
   2b8d0:	pop	{r4, r5, fp, lr}
   2b8d4:	b	11484 <memcpy@plt>
   2b8d8:	bl	11860 <__assert_fail@plt+0x100>
   2b8dc:	push	{r4, r5, fp, lr}
   2b8e0:	add	fp, sp, #8
   2b8e4:	mov	r4, r0
   2b8e8:	bl	11628 <strlen@plt>
   2b8ec:	add	r5, r0, #1
   2b8f0:	mov	r0, r5
   2b8f4:	bl	2e08c <__assert_fail@plt+0x1c92c>
   2b8f8:	cmp	r0, #0
   2b8fc:	beq	2b910 <__assert_fail@plt+0x1a1b0>
   2b900:	mov	r1, r4
   2b904:	mov	r2, r5
   2b908:	pop	{r4, r5, fp, lr}
   2b90c:	b	11484 <memcpy@plt>
   2b910:	bl	11860 <__assert_fail@plt+0x100>
   2b914:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   2b918:	add	fp, sp, #24
   2b91c:	sub	sp, sp, #16
   2b920:	mov	r8, r0
   2b924:	ldr	r0, [fp, #16]
   2b928:	mov	r7, r3
   2b92c:	mov	r4, r2
   2b930:	mov	r2, r1
   2b934:	add	r3, sp, #8
   2b938:	mov	r1, #0
   2b93c:	str	r0, [sp]
   2b940:	mov	r0, r8
   2b944:	bl	2ba24 <__assert_fail@plt+0x1a2c4>
   2b948:	cmp	r0, #0
   2b94c:	bne	2b9f8 <__assert_fail@plt+0x1a298>
   2b950:	ldr	r6, [sp, #8]
   2b954:	ldr	r5, [sp, #12]
   2b958:	subs	r0, r6, r4
   2b95c:	sbcs	r0, r5, r7
   2b960:	blt	2b984 <__assert_fail@plt+0x1a224>
   2b964:	ldr	r1, [fp, #8]
   2b968:	ldr	r0, [fp, #12]
   2b96c:	subs	r1, r1, r6
   2b970:	sbcs	r0, r0, r5
   2b974:	movge	r0, r6
   2b978:	movge	r1, r5
   2b97c:	subge	sp, fp, #24
   2b980:	popge	{r4, r5, r6, r7, r8, sl, fp, pc}
   2b984:	subs	r0, r6, #1073741824	; 0x40000000
   2b988:	sbcs	r0, r5, #0
   2b98c:	blt	2b99c <__assert_fail@plt+0x1a23c>
   2b990:	bl	11640 <__errno_location@plt>
   2b994:	mov	r1, #75	; 0x4b
   2b998:	b	2b9b8 <__assert_fail@plt+0x1a258>
   2b99c:	bl	11640 <__errno_location@plt>
   2b9a0:	mvn	r2, #1073741824	; 0x40000000
   2b9a4:	mvn	r1, #0
   2b9a8:	subs	r2, r2, r6
   2b9ac:	sbcs	r1, r1, r5
   2b9b0:	movlt	r1, #34	; 0x22
   2b9b4:	movge	r1, #75	; 0x4b
   2b9b8:	str	r1, [r0]
   2b9bc:	ldr	r6, [r0]
   2b9c0:	ldr	r4, [fp, #24]
   2b9c4:	ldr	r5, [fp, #20]
   2b9c8:	mov	r0, r8
   2b9cc:	bl	16614 <__assert_fail@plt+0x4eb4>
   2b9d0:	subs	r1, r6, #22
   2b9d4:	movw	r2, #62651	; 0xf4bb
   2b9d8:	str	r0, [sp]
   2b9dc:	mov	r3, r5
   2b9e0:	movne	r1, r6
   2b9e4:	cmp	r4, #0
   2b9e8:	movt	r2, #2
   2b9ec:	movweq	r4, #1
   2b9f0:	mov	r0, r4
   2b9f4:	bl	1158c <error@plt>
   2b9f8:	cmp	r0, #1
   2b9fc:	beq	2b990 <__assert_fail@plt+0x1a230>
   2ba00:	cmp	r0, #3
   2ba04:	bne	2ba14 <__assert_fail@plt+0x1a2b4>
   2ba08:	bl	11640 <__errno_location@plt>
   2ba0c:	mov	r1, #0
   2ba10:	b	2b9b8 <__assert_fail@plt+0x1a258>
   2ba14:	bl	11640 <__errno_location@plt>
   2ba18:	b	2b9bc <__assert_fail@plt+0x1a25c>
   2ba1c:	mov	r1, #10
   2ba20:	b	2b914 <__assert_fail@plt+0x1a1b4>
   2ba24:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2ba28:	add	fp, sp, #28
   2ba2c:	sub	sp, sp, #36	; 0x24
   2ba30:	cmp	r2, #37	; 0x25
   2ba34:	bcs	2d364 <__assert_fail@plt+0x1bc04>
   2ba38:	ldr	r8, [fp, #8]
   2ba3c:	mov	r9, r3
   2ba40:	mov	r6, r2
   2ba44:	mov	r7, r1
   2ba48:	mov	r4, r0
   2ba4c:	bl	11640 <__errno_location@plt>
   2ba50:	cmp	r7, #0
   2ba54:	add	sl, sp, #32
   2ba58:	mov	r5, r0
   2ba5c:	mov	r0, #0
   2ba60:	mov	r2, r6
   2ba64:	mov	r3, #0
   2ba68:	movne	sl, r7
   2ba6c:	str	r0, [r5]
   2ba70:	mov	r0, r4
   2ba74:	mov	r1, sl
   2ba78:	bl	11700 <__strtoll_internal@plt>
   2ba7c:	mov	r7, r1
   2ba80:	ldr	r1, [sl]
   2ba84:	cmp	r1, r4
   2ba88:	beq	2bac4 <__assert_fail@plt+0x1a364>
   2ba8c:	mov	r6, r0
   2ba90:	ldr	r0, [r5]
   2ba94:	cmp	r0, #0
   2ba98:	beq	2bc50 <__assert_fail@plt+0x1a4f0>
   2ba9c:	mov	r5, #4
   2baa0:	cmp	r0, #34	; 0x22
   2baa4:	bne	2bea8 <__assert_fail@plt+0x1a748>
   2baa8:	mov	r5, #1
   2baac:	cmp	r8, #0
   2bab0:	beq	2bc5c <__assert_fail@plt+0x1a4fc>
   2bab4:	ldrb	r4, [r1]
   2bab8:	cmp	r4, #0
   2babc:	bne	2bb0c <__assert_fail@plt+0x1a3ac>
   2bac0:	b	2bc5c <__assert_fail@plt+0x1a4fc>
   2bac4:	mov	r5, #4
   2bac8:	cmp	r8, #0
   2bacc:	beq	2bea8 <__assert_fail@plt+0x1a748>
   2bad0:	mov	r6, r1
   2bad4:	ldrb	r1, [r4]
   2bad8:	cmp	r1, #0
   2badc:	beq	2bea8 <__assert_fail@plt+0x1a748>
   2bae0:	mov	r0, r8
   2bae4:	bl	11634 <strchr@plt>
   2bae8:	cmp	r0, #0
   2baec:	beq	2bea8 <__assert_fail@plt+0x1a748>
   2baf0:	mov	r1, r6
   2baf4:	mov	r5, #0
   2baf8:	mov	r6, #1
   2bafc:	mov	r7, #0
   2bb00:	ldrb	r4, [r1]
   2bb04:	cmp	r4, #0
   2bb08:	beq	2bc5c <__assert_fail@plt+0x1a4fc>
   2bb0c:	str	r1, [sp, #20]
   2bb10:	mov	r0, r8
   2bb14:	mov	r1, r4
   2bb18:	bl	11634 <strchr@plt>
   2bb1c:	cmp	r0, #0
   2bb20:	beq	2bea0 <__assert_fail@plt+0x1a740>
   2bb24:	sub	r0, r4, #69	; 0x45
   2bb28:	mov	r1, #1
   2bb2c:	mov	r3, #0
   2bb30:	mov	r2, #1024	; 0x400
   2bb34:	cmp	r0, #47	; 0x2f
   2bb38:	str	r1, [sp, #16]
   2bb3c:	bhi	2bc74 <__assert_fail@plt+0x1a514>
   2bb40:	add	r1, pc, #0
   2bb44:	ldr	pc, [r1, r0, lsl #2]
   2bb48:	andeq	fp, r2, r8, lsl #24
   2bb4c:	andeq	fp, r2, r4, ror ip
   2bb50:	andeq	fp, r2, r8, lsl #24
   2bb54:	andeq	fp, r2, r4, ror ip
   2bb58:	andeq	fp, r2, r4, ror ip
   2bb5c:	andeq	fp, r2, r4, ror ip
   2bb60:	andeq	fp, r2, r8, lsl #24
   2bb64:	andeq	fp, r2, r4, ror ip
   2bb68:	andeq	fp, r2, r8, lsl #24
   2bb6c:	andeq	fp, r2, r4, ror ip
   2bb70:	andeq	fp, r2, r4, ror ip
   2bb74:	andeq	fp, r2, r8, lsl #24
   2bb78:	andeq	fp, r2, r4, ror ip
   2bb7c:	andeq	fp, r2, r4, ror ip
   2bb80:	andeq	fp, r2, r4, ror ip
   2bb84:	andeq	fp, r2, r8, lsl #24
   2bb88:	andeq	fp, r2, r4, ror ip
   2bb8c:	andeq	fp, r2, r4, ror ip
   2bb90:	andeq	fp, r2, r4, ror ip
   2bb94:	andeq	fp, r2, r4, ror ip
   2bb98:	andeq	fp, r2, r8, lsl #24
   2bb9c:	andeq	fp, r2, r8, lsl #24
   2bba0:	andeq	fp, r2, r4, ror ip
   2bba4:	andeq	fp, r2, r4, ror ip
   2bba8:	andeq	fp, r2, r4, ror ip
   2bbac:	andeq	fp, r2, r4, ror ip
   2bbb0:	andeq	fp, r2, r4, ror ip
   2bbb4:	andeq	fp, r2, r4, ror ip
   2bbb8:	andeq	fp, r2, r4, ror ip
   2bbbc:	andeq	fp, r2, r4, ror ip
   2bbc0:	andeq	fp, r2, r4, ror ip
   2bbc4:	andeq	fp, r2, r4, ror ip
   2bbc8:	andeq	fp, r2, r4, ror ip
   2bbcc:	andeq	fp, r2, r4, ror ip
   2bbd0:	andeq	fp, r2, r8, lsl #24
   2bbd4:	andeq	fp, r2, r4, ror ip
   2bbd8:	andeq	fp, r2, r4, ror ip
   2bbdc:	andeq	fp, r2, r4, ror ip
   2bbe0:	andeq	fp, r2, r8, lsl #24
   2bbe4:	andeq	fp, r2, r4, ror ip
   2bbe8:	andeq	fp, r2, r8, lsl #24
   2bbec:	andeq	fp, r2, r4, ror ip
   2bbf0:	andeq	fp, r2, r4, ror ip
   2bbf4:	andeq	fp, r2, r4, ror ip
   2bbf8:	andeq	fp, r2, r4, ror ip
   2bbfc:	andeq	fp, r2, r4, ror ip
   2bc00:	andeq	fp, r2, r4, ror ip
   2bc04:	andeq	fp, r2, r8, lsl #24
   2bc08:	mov	r0, r8
   2bc0c:	mov	r1, #48	; 0x30
   2bc10:	bl	11634 <strchr@plt>
   2bc14:	cmp	r0, #0
   2bc18:	beq	2bc6c <__assert_fail@plt+0x1a50c>
   2bc1c:	ldr	r1, [sp, #20]
   2bc20:	ldrb	r0, [r1, #1]
   2bc24:	cmp	r0, #66	; 0x42
   2bc28:	cmpne	r0, #68	; 0x44
   2bc2c:	bne	2bda8 <__assert_fail@plt+0x1a648>
   2bc30:	mov	r0, #2
   2bc34:	mov	r2, #1000	; 0x3e8
   2bc38:	mov	r3, #0
   2bc3c:	str	r0, [sp, #16]
   2bc40:	sub	r0, r4, #66	; 0x42
   2bc44:	cmp	r0, #53	; 0x35
   2bc48:	bls	2bc80 <__assert_fail@plt+0x1a520>
   2bc4c:	b	2bea0 <__assert_fail@plt+0x1a740>
   2bc50:	mov	r5, r0
   2bc54:	cmp	r8, #0
   2bc58:	bne	2bab4 <__assert_fail@plt+0x1a354>
   2bc5c:	strd	r6, [r9]
   2bc60:	mov	r0, r5
   2bc64:	sub	sp, fp, #28
   2bc68:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2bc6c:	mov	r3, #0
   2bc70:	mov	r2, #1024	; 0x400
   2bc74:	sub	r0, r4, #66	; 0x42
   2bc78:	cmp	r0, #53	; 0x35
   2bc7c:	bhi	2bea0 <__assert_fail@plt+0x1a740>
   2bc80:	add	r1, pc, #8
   2bc84:	str	r3, [sp, #28]
   2bc88:	str	r2, [sp, #24]
   2bc8c:	ldr	pc, [r1, r0, lsl #2]
   2bc90:	strdeq	fp, [r2], -r8
   2bc94:	andeq	fp, r2, r0, lsr #29
   2bc98:	andeq	fp, r2, r0, lsr #29
   2bc9c:	andeq	fp, r2, ip, lsl #30
   2bca0:	andeq	fp, r2, r0, lsr #29
   2bca4:	andeq	fp, r2, r8, ror #26
   2bca8:	andeq	fp, r2, r0, lsr #29
   2bcac:	andeq	fp, r2, r0, lsr #29
   2bcb0:	andeq	fp, r2, r0, lsr #29
   2bcb4:	ldrdeq	fp, [r2], -ip
   2bcb8:	andeq	fp, r2, r0, lsr #29
   2bcbc:	andeq	fp, r2, ip, lsl #28
   2bcc0:	andeq	fp, r2, r0, lsr #29
   2bcc4:	andeq	fp, r2, r0, lsr #29
   2bcc8:	andeq	fp, r2, r0, asr pc
   2bccc:	andeq	fp, r2, r0, lsr #29
   2bcd0:	andeq	fp, r2, r0, lsr #29
   2bcd4:	andeq	fp, r2, r0, lsr #29
   2bcd8:	andeq	fp, r2, ip, asr #28
   2bcdc:	andeq	fp, r2, r0, lsr #29
   2bce0:	andeq	fp, r2, r0, lsr #29
   2bce4:	andeq	fp, r2, r0, lsr #29
   2bce8:	andeq	fp, r2, r0, lsr #29
   2bcec:	muleq	r2, r4, pc	; <UNPREDICTABLE>
   2bcf0:			; <UNDEFINED> instruction: 0x0002beb4
   2bcf4:	andeq	fp, r2, r0, lsr #29
   2bcf8:	andeq	fp, r2, r0, lsr #29
   2bcfc:	andeq	fp, r2, r0, lsr #29
   2bd00:	andeq	fp, r2, r0, lsr #29
   2bd04:	andeq	fp, r2, r0, lsr #29
   2bd08:	andeq	fp, r2, r0, lsr #29
   2bd0c:	andeq	fp, r2, r0, lsr #29
   2bd10:	ldrdeq	fp, [r2], -r8
   2bd14:	andeq	ip, r2, r0, asr pc
   2bd18:	andeq	fp, r2, r0, lsr #29
   2bd1c:	andeq	fp, r2, r0, lsr #29
   2bd20:	andeq	fp, r2, r0, lsr #29
   2bd24:	andeq	fp, r2, r8, ror #26
   2bd28:	andeq	fp, r2, r0, lsr #29
   2bd2c:	andeq	fp, r2, r0, lsr #29
   2bd30:	andeq	fp, r2, r0, lsr #29
   2bd34:	ldrdeq	fp, [r2], -ip
   2bd38:	andeq	fp, r2, r0, lsr #29
   2bd3c:	andeq	fp, r2, ip, lsl #28
   2bd40:	andeq	fp, r2, r0, lsr #29
   2bd44:	andeq	fp, r2, r0, lsr #29
   2bd48:	andeq	fp, r2, r0, lsr #29
   2bd4c:	andeq	fp, r2, r0, lsr #29
   2bd50:	andeq	fp, r2, r0, lsr #29
   2bd54:	andeq	fp, r2, r0, lsr #29
   2bd58:	andeq	fp, r2, ip, asr #28
   2bd5c:	andeq	fp, r2, r0, lsr #29
   2bd60:	andeq	fp, r2, r0, lsr #29
   2bd64:	andeq	fp, r2, ip, ror #31
   2bd68:	cmn	r7, #1
   2bd6c:	str	r9, [sp, #12]
   2bd70:	ble	2c000 <__assert_fail@plt+0x1a8a0>
   2bd74:	ldr	r3, [sp, #28]
   2bd78:	mvn	r0, #0
   2bd7c:	mvn	r1, #-2147483648	; 0x80000000
   2bd80:	mvn	r8, #0
   2bd84:	mvn	r9, #-2147483648	; 0x80000000
   2bd88:	bl	2e6f0 <__assert_fail@plt+0x1cf90>
   2bd8c:	ldr	r2, [sp, #24]
   2bd90:	ldr	r3, [sp, #28]
   2bd94:	subs	r0, r0, r6
   2bd98:	mov	r4, #1
   2bd9c:	sbcs	r0, r1, r7
   2bda0:	bge	2c040 <__assert_fail@plt+0x1a8e0>
   2bda4:	b	2c058 <__assert_fail@plt+0x1a8f8>
   2bda8:	cmp	r0, #105	; 0x69
   2bdac:	mov	r3, #0
   2bdb0:	bne	2be90 <__assert_fail@plt+0x1a730>
   2bdb4:	ldrb	r0, [r1, #2]
   2bdb8:	mov	r1, #1
   2bdbc:	mov	r2, #1024	; 0x400
   2bdc0:	cmp	r0, #66	; 0x42
   2bdc4:	movweq	r1, #3
   2bdc8:	str	r1, [sp, #16]
   2bdcc:	sub	r0, r4, #66	; 0x42
   2bdd0:	cmp	r0, #53	; 0x35
   2bdd4:	bls	2bc80 <__assert_fail@plt+0x1a520>
   2bdd8:	b	2bea0 <__assert_fail@plt+0x1a740>
   2bddc:	cmn	r7, #1
   2bde0:	ble	2c094 <__assert_fail@plt+0x1a934>
   2bde4:	ldr	r3, [sp, #28]
   2bde8:	mvn	r0, #0
   2bdec:	mvn	r1, #-2147483648	; 0x80000000
   2bdf0:	bl	2e6f0 <__assert_fail@plt+0x1cf90>
   2bdf4:	ldr	r2, [sp, #24]
   2bdf8:	ldr	r3, [sp, #28]
   2bdfc:	subs	r0, r0, r6
   2be00:	sbcs	r0, r1, r7
   2be04:	bge	2c0c8 <__assert_fail@plt+0x1a968>
   2be08:	b	2c7d8 <__assert_fail@plt+0x1b078>
   2be0c:	cmn	r7, #1
   2be10:	str	r9, [sp, #12]
   2be14:	ble	2c0dc <__assert_fail@plt+0x1a97c>
   2be18:	ldr	r3, [sp, #28]
   2be1c:	mvn	r0, #0
   2be20:	mvn	r1, #-2147483648	; 0x80000000
   2be24:	mvn	r8, #0
   2be28:	mvn	r9, #-2147483648	; 0x80000000
   2be2c:	bl	2e6f0 <__assert_fail@plt+0x1cf90>
   2be30:	ldr	r2, [sp, #24]
   2be34:	ldr	r3, [sp, #28]
   2be38:	subs	r0, r0, r6
   2be3c:	mov	r4, #1
   2be40:	sbcs	r0, r1, r7
   2be44:	bge	2c11c <__assert_fail@plt+0x1a9bc>
   2be48:	b	2c134 <__assert_fail@plt+0x1a9d4>
   2be4c:	cmn	r7, #1
   2be50:	str	r9, [sp, #12]
   2be54:	ble	2c16c <__assert_fail@plt+0x1aa0c>
   2be58:	ldr	r3, [sp, #28]
   2be5c:	mvn	r0, #0
   2be60:	mvn	r1, #-2147483648	; 0x80000000
   2be64:	mvn	r9, #-2147483648	; 0x80000000
   2be68:	str	r0, [sp, #8]
   2be6c:	mvn	r0, #0
   2be70:	bl	2e6f0 <__assert_fail@plt+0x1cf90>
   2be74:	ldr	r2, [sp, #24]
   2be78:	ldr	r3, [sp, #28]
   2be7c:	subs	r0, r0, r6
   2be80:	mov	r4, #1
   2be84:	sbcs	r0, r1, r7
   2be88:	bge	2c1b0 <__assert_fail@plt+0x1aa50>
   2be8c:	b	2c1cc <__assert_fail@plt+0x1aa6c>
   2be90:	mov	r2, #1024	; 0x400
   2be94:	sub	r0, r4, #66	; 0x42
   2be98:	cmp	r0, #53	; 0x35
   2be9c:	bls	2bc80 <__assert_fail@plt+0x1a520>
   2bea0:	orr	r5, r5, #2
   2bea4:	strd	r6, [r9]
   2bea8:	mov	r0, r5
   2beac:	sub	sp, fp, #28
   2beb0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2beb4:	cmp	r7, #0
   2beb8:	str	r9, [sp, #12]
   2bebc:	bmi	2c4b4 <__assert_fail@plt+0x1ad54>
   2bec0:	ldr	r3, [sp, #28]
   2bec4:	mvn	r0, #0
   2bec8:	mvn	r1, #-2147483648	; 0x80000000
   2becc:	mvn	r9, #-2147483648	; 0x80000000
   2bed0:	str	r0, [sp, #8]
   2bed4:	mvn	r0, #0
   2bed8:	bl	2e6f0 <__assert_fail@plt+0x1cf90>
   2bedc:	ldr	r2, [sp, #24]
   2bee0:	ldr	r3, [sp, #28]
   2bee4:	subs	r0, r0, r6
   2bee8:	mov	r4, #1
   2beec:	sbcs	r0, r1, r7
   2bef0:	bge	2c4f8 <__assert_fail@plt+0x1ad98>
   2bef4:	b	2c514 <__assert_fail@plt+0x1adb4>
   2bef8:	cmn	r7, #1
   2befc:	ble	2c550 <__assert_fail@plt+0x1adf0>
   2bf00:	cmp	r7, #2097152	; 0x200000
   2bf04:	blt	2c580 <__assert_fail@plt+0x1ae20>
   2bf08:	b	2c7d8 <__assert_fail@plt+0x1b078>
   2bf0c:	cmp	r7, #0
   2bf10:	str	r9, [sp, #12]
   2bf14:	bmi	2c590 <__assert_fail@plt+0x1ae30>
   2bf18:	ldr	r3, [sp, #28]
   2bf1c:	mvn	r0, #0
   2bf20:	mvn	r1, #-2147483648	; 0x80000000
   2bf24:	mvn	r9, #-2147483648	; 0x80000000
   2bf28:	str	r0, [sp, #8]
   2bf2c:	mvn	r0, #0
   2bf30:	bl	2e6f0 <__assert_fail@plt+0x1cf90>
   2bf34:	ldr	r2, [sp, #24]
   2bf38:	ldr	r3, [sp, #28]
   2bf3c:	subs	r0, r0, r6
   2bf40:	mov	r4, #1
   2bf44:	sbcs	r0, r1, r7
   2bf48:	bge	2c5d4 <__assert_fail@plt+0x1ae74>
   2bf4c:	b	2c5f0 <__assert_fail@plt+0x1ae90>
   2bf50:	cmp	r7, #0
   2bf54:	str	r9, [sp, #12]
   2bf58:	bmi	2c62c <__assert_fail@plt+0x1aecc>
   2bf5c:	ldr	r3, [sp, #28]
   2bf60:	mvn	r0, #0
   2bf64:	mvn	r1, #-2147483648	; 0x80000000
   2bf68:	mvn	r8, #-2147483648	; 0x80000000
   2bf6c:	str	r0, [sp, #8]
   2bf70:	mvn	r0, #0
   2bf74:	bl	2e6f0 <__assert_fail@plt+0x1cf90>
   2bf78:	ldr	r2, [sp, #24]
   2bf7c:	ldr	r3, [sp, #28]
   2bf80:	subs	r0, r0, r6
   2bf84:	mov	r4, #1
   2bf88:	sbcs	r0, r1, r7
   2bf8c:	bge	2c670 <__assert_fail@plt+0x1af10>
   2bf90:	b	2c68c <__assert_fail@plt+0x1af2c>
   2bf94:	cmp	r7, #0
   2bf98:	str	r9, [sp, #12]
   2bf9c:	bmi	2c6c8 <__assert_fail@plt+0x1af68>
   2bfa0:	ldr	r3, [sp, #28]
   2bfa4:	mvn	r0, #0
   2bfa8:	mvn	r1, #-2147483648	; 0x80000000
   2bfac:	mvn	r9, #-2147483648	; 0x80000000
   2bfb0:	str	r0, [sp, #8]
   2bfb4:	mvn	r0, #0
   2bfb8:	bl	2e6f0 <__assert_fail@plt+0x1cf90>
   2bfbc:	ldr	r2, [sp, #24]
   2bfc0:	ldr	r3, [sp, #28]
   2bfc4:	subs	r0, r0, r6
   2bfc8:	mov	r4, #1
   2bfcc:	sbcs	r0, r1, r7
   2bfd0:	bge	2c70c <__assert_fail@plt+0x1afac>
   2bfd4:	b	2c728 <__assert_fail@plt+0x1afc8>
   2bfd8:	cmn	r7, #1
   2bfdc:	ble	2c768 <__assert_fail@plt+0x1b008>
   2bfe0:	cmp	r7, #4194304	; 0x400000
   2bfe4:	blt	2c798 <__assert_fail@plt+0x1b038>
   2bfe8:	b	2c7d8 <__assert_fail@plt+0x1b078>
   2bfec:	cmn	r7, #1
   2bff0:	ble	2c7a8 <__assert_fail@plt+0x1b048>
   2bff4:	cmp	r7, #1073741824	; 0x40000000
   2bff8:	bge	2c7d8 <__assert_fail@plt+0x1b078>
   2bffc:	b	2c7f8 <__assert_fail@plt+0x1b098>
   2c000:	and	r0, r6, r7
   2c004:	cmn	r0, #1
   2c008:	beq	2c040 <__assert_fail@plt+0x1a8e0>
   2c00c:	mov	r0, #0
   2c010:	mov	r1, #-2147483648	; 0x80000000
   2c014:	mov	r2, r6
   2c018:	mov	r3, r7
   2c01c:	mov	r8, #0
   2c020:	mov	r9, #-2147483648	; 0x80000000
   2c024:	bl	2e61c <__assert_fail@plt+0x1cebc>
   2c028:	ldr	r2, [sp, #24]
   2c02c:	ldr	r3, [sp, #28]
   2c030:	mov	r4, #1
   2c034:	subs	r0, r0, r2
   2c038:	sbcs	r0, r1, r3
   2c03c:	blt	2c208 <__assert_fail@plt+0x1aaa8>
   2c040:	umull	r8, r0, r6, r2
   2c044:	mov	r4, #0
   2c048:	mla	r0, r6, r3, r0
   2c04c:	mla	r9, r7, r2, r0
   2c050:	cmp	r9, #0
   2c054:	bmi	2c208 <__assert_fail@plt+0x1aaa8>
   2c058:	ldr	r3, [sp, #28]
   2c05c:	mvn	r0, #-2147483648	; 0x80000000
   2c060:	mvn	r1, #-2147483648	; 0x80000000
   2c064:	mov	r6, r4
   2c068:	mvn	r4, #0
   2c06c:	str	r0, [sp, #8]
   2c070:	mvn	r0, #0
   2c074:	bl	2e6f0 <__assert_fail@plt+0x1cf90>
   2c078:	ldr	r2, [sp, #24]
   2c07c:	ldr	r3, [sp, #28]
   2c080:	subs	r0, r0, r8
   2c084:	mov	r7, #1
   2c088:	sbcs	r0, r1, r9
   2c08c:	bge	2c244 <__assert_fail@plt+0x1aae4>
   2c090:	b	2c260 <__assert_fail@plt+0x1ab00>
   2c094:	and	r0, r6, r7
   2c098:	cmn	r0, #1
   2c09c:	beq	2c0c8 <__assert_fail@plt+0x1a968>
   2c0a0:	mov	r0, #0
   2c0a4:	mov	r1, #-2147483648	; 0x80000000
   2c0a8:	mov	r2, r6
   2c0ac:	mov	r3, r7
   2c0b0:	bl	2e61c <__assert_fail@plt+0x1cebc>
   2c0b4:	ldr	r2, [sp, #24]
   2c0b8:	ldr	r3, [sp, #28]
   2c0bc:	subs	r0, r0, r2
   2c0c0:	sbcs	r0, r1, r3
   2c0c4:	blt	2c7d8 <__assert_fail@plt+0x1b078>
   2c0c8:	umull	r0, r1, r6, r2
   2c0cc:	mla	r1, r6, r3, r1
   2c0d0:	mla	r7, r7, r2, r1
   2c0d4:	mov	r6, r0
   2c0d8:	b	2cf50 <__assert_fail@plt+0x1b7f0>
   2c0dc:	and	r0, r6, r7
   2c0e0:	cmn	r0, #1
   2c0e4:	beq	2c11c <__assert_fail@plt+0x1a9bc>
   2c0e8:	mov	r0, #0
   2c0ec:	mov	r1, #-2147483648	; 0x80000000
   2c0f0:	mov	r2, r6
   2c0f4:	mov	r3, r7
   2c0f8:	mov	r8, #0
   2c0fc:	mov	r9, #-2147483648	; 0x80000000
   2c100:	bl	2e61c <__assert_fail@plt+0x1cebc>
   2c104:	ldr	r2, [sp, #24]
   2c108:	ldr	r3, [sp, #28]
   2c10c:	mov	r4, #1
   2c110:	subs	r0, r0, r2
   2c114:	sbcs	r0, r1, r3
   2c118:	blt	2c2f4 <__assert_fail@plt+0x1ab94>
   2c11c:	umull	r8, r0, r6, r2
   2c120:	mov	r4, #0
   2c124:	mla	r0, r6, r3, r0
   2c128:	mla	r9, r7, r2, r0
   2c12c:	cmp	r9, #0
   2c130:	bmi	2c2f4 <__assert_fail@plt+0x1ab94>
   2c134:	ldr	r3, [sp, #28]
   2c138:	mvn	r0, #0
   2c13c:	mvn	r1, #-2147483648	; 0x80000000
   2c140:	str	r4, [sp, #8]
   2c144:	mvn	r6, #0
   2c148:	mvn	r7, #-2147483648	; 0x80000000
   2c14c:	bl	2e6f0 <__assert_fail@plt+0x1cf90>
   2c150:	ldr	r4, [sp, #24]
   2c154:	ldr	r3, [sp, #28]
   2c158:	subs	r0, r0, r8
   2c15c:	mov	r2, #1
   2c160:	sbcs	r0, r1, r9
   2c164:	bge	2c32c <__assert_fail@plt+0x1abcc>
   2c168:	b	2c464 <__assert_fail@plt+0x1ad04>
   2c16c:	and	r0, r6, r7
   2c170:	cmn	r0, #1
   2c174:	beq	2c1b0 <__assert_fail@plt+0x1aa50>
   2c178:	mov	r0, #0
   2c17c:	mov	r1, #-2147483648	; 0x80000000
   2c180:	mov	r2, r6
   2c184:	mov	r3, r7
   2c188:	bl	2e61c <__assert_fail@plt+0x1cebc>
   2c18c:	ldr	r2, [sp, #24]
   2c190:	ldr	r3, [sp, #28]
   2c194:	mov	r4, #1
   2c198:	mov	r9, #-2147483648	; 0x80000000
   2c19c:	subs	r0, r0, r2
   2c1a0:	sbcs	r0, r1, r3
   2c1a4:	mov	r0, #0
   2c1a8:	str	r0, [sp, #8]
   2c1ac:	blt	2c340 <__assert_fail@plt+0x1abe0>
   2c1b0:	umull	r1, r0, r6, r2
   2c1b4:	mov	r4, #0
   2c1b8:	mla	r0, r6, r3, r0
   2c1bc:	mla	r9, r7, r2, r0
   2c1c0:	str	r1, [sp, #8]
   2c1c4:	cmp	r9, #0
   2c1c8:	bmi	2c340 <__assert_fail@plt+0x1abe0>
   2c1cc:	ldr	r3, [sp, #28]
   2c1d0:	mvn	r0, #0
   2c1d4:	mvn	r1, #-2147483648	; 0x80000000
   2c1d8:	str	r4, [sp, #4]
   2c1dc:	mvn	r6, #0
   2c1e0:	mvn	r8, #-2147483648	; 0x80000000
   2c1e4:	bl	2e6f0 <__assert_fail@plt+0x1cf90>
   2c1e8:	ldr	r4, [sp, #8]
   2c1ec:	ldr	r2, [sp, #24]
   2c1f0:	ldr	r3, [sp, #28]
   2c1f4:	mov	r7, #1
   2c1f8:	subs	r0, r0, r4
   2c1fc:	sbcs	r0, r1, r9
   2c200:	bge	2c37c <__assert_fail@plt+0x1ac1c>
   2c204:	b	2c394 <__assert_fail@plt+0x1ac34>
   2c208:	mov	r0, #-2147483648	; 0x80000000
   2c20c:	mov	r1, #-2147483648	; 0x80000000
   2c210:	mov	r2, r8
   2c214:	mov	r3, r9
   2c218:	mov	r6, r4
   2c21c:	mov	r4, #0
   2c220:	str	r0, [sp, #8]
   2c224:	mov	r0, #0
   2c228:	bl	2e61c <__assert_fail@plt+0x1cebc>
   2c22c:	ldr	r2, [sp, #24]
   2c230:	ldr	r3, [sp, #28]
   2c234:	mov	r7, #1
   2c238:	subs	r0, r0, r2
   2c23c:	sbcs	r0, r1, r3
   2c240:	blt	2c2b4 <__assert_fail@plt+0x1ab54>
   2c244:	umull	r4, r0, r8, r2
   2c248:	mov	r7, r6
   2c24c:	mla	r0, r8, r3, r0
   2c250:	mla	r0, r9, r2, r0
   2c254:	cmp	r0, #0
   2c258:	str	r0, [sp, #8]
   2c25c:	bmi	2c2b4 <__assert_fail@plt+0x1ab54>
   2c260:	ldr	r3, [sp, #28]
   2c264:	mvn	r0, #0
   2c268:	mvn	r1, #-2147483648	; 0x80000000
   2c26c:	mov	r9, r7
   2c270:	mvn	r6, #0
   2c274:	mvn	r7, #-2147483648	; 0x80000000
   2c278:	bl	2e6f0 <__assert_fail@plt+0x1cf90>
   2c27c:	ldr	r8, [sp, #8]
   2c280:	ldr	r3, [sp, #24]
   2c284:	ldr	ip, [sp, #28]
   2c288:	subs	r0, r0, r4
   2c28c:	mov	r2, #1
   2c290:	sbcs	r0, r1, r8
   2c294:	blt	2c2a8 <__assert_fail@plt+0x1ab48>
   2c298:	umull	r6, r0, r4, r3
   2c29c:	mov	r2, #0
   2c2a0:	mla	r0, r4, ip, r0
   2c2a4:	mla	r7, r8, r3, r0
   2c2a8:	orr	r3, r2, r9
   2c2ac:	ldr	r9, [sp, #12]
   2c2b0:	b	2cf50 <__assert_fail@plt+0x1b7f0>
   2c2b4:	ldr	r8, [sp, #8]
   2c2b8:	mov	r0, #0
   2c2bc:	mov	r1, #-2147483648	; 0x80000000
   2c2c0:	mov	r2, r4
   2c2c4:	mov	r9, r7
   2c2c8:	mov	r6, #0
   2c2cc:	mov	r7, #-2147483648	; 0x80000000
   2c2d0:	mov	r3, r8
   2c2d4:	bl	2e61c <__assert_fail@plt+0x1cebc>
   2c2d8:	ldr	r3, [sp, #24]
   2c2dc:	ldr	ip, [sp, #28]
   2c2e0:	mov	r2, #1
   2c2e4:	subs	r0, r0, r3
   2c2e8:	sbcs	r0, r1, ip
   2c2ec:	bge	2c298 <__assert_fail@plt+0x1ab38>
   2c2f0:	b	2c2a8 <__assert_fail@plt+0x1ab48>
   2c2f4:	mov	r0, #0
   2c2f8:	mov	r1, #-2147483648	; 0x80000000
   2c2fc:	mov	r2, r8
   2c300:	mov	r3, r9
   2c304:	str	r4, [sp, #8]
   2c308:	mov	r6, #0
   2c30c:	mov	r7, #-2147483648	; 0x80000000
   2c310:	bl	2e61c <__assert_fail@plt+0x1cebc>
   2c314:	ldr	r4, [sp, #24]
   2c318:	ldr	r3, [sp, #28]
   2c31c:	mov	r2, #1
   2c320:	subs	r0, r0, r4
   2c324:	sbcs	r0, r1, r3
   2c328:	blt	2c464 <__assert_fail@plt+0x1ad04>
   2c32c:	umull	r6, r0, r8, r4
   2c330:	mov	r2, #0
   2c334:	mla	r0, r8, r3, r0
   2c338:	mla	r7, r9, r4, r0
   2c33c:	b	2c464 <__assert_fail@plt+0x1ad04>
   2c340:	str	r4, [sp, #4]
   2c344:	ldr	r4, [sp, #8]
   2c348:	mov	r0, #0
   2c34c:	mov	r1, #-2147483648	; 0x80000000
   2c350:	mov	r3, r9
   2c354:	mov	r2, r4
   2c358:	bl	2e61c <__assert_fail@plt+0x1cebc>
   2c35c:	ldr	r2, [sp, #24]
   2c360:	ldr	r3, [sp, #28]
   2c364:	mov	r7, #1
   2c368:	mov	r6, #0
   2c36c:	mov	r8, #-2147483648	; 0x80000000
   2c370:	subs	r0, r0, r2
   2c374:	sbcs	r0, r1, r3
   2c378:	blt	2c3cc <__assert_fail@plt+0x1ac6c>
   2c37c:	umull	r6, r0, r4, r2
   2c380:	ldr	r7, [sp, #4]
   2c384:	mla	r0, r4, r3, r0
   2c388:	mla	r8, r9, r2, r0
   2c38c:	cmp	r8, #0
   2c390:	bmi	2c3cc <__assert_fail@plt+0x1ac6c>
   2c394:	ldr	r3, [sp, #28]
   2c398:	mvn	r0, #0
   2c39c:	mvn	r1, #-2147483648	; 0x80000000
   2c3a0:	str	r7, [sp, #8]
   2c3a4:	mvn	r4, #0
   2c3a8:	mvn	r9, #-2147483648	; 0x80000000
   2c3ac:	bl	2e6f0 <__assert_fail@plt+0x1cf90>
   2c3b0:	ldr	r2, [sp, #24]
   2c3b4:	ldr	r3, [sp, #28]
   2c3b8:	subs	r0, r0, r6
   2c3bc:	mov	r7, #1
   2c3c0:	sbcs	r0, r1, r8
   2c3c4:	bge	2c404 <__assert_fail@plt+0x1aca4>
   2c3c8:	b	2c41c <__assert_fail@plt+0x1acbc>
   2c3cc:	mov	r0, #0
   2c3d0:	mov	r1, #-2147483648	; 0x80000000
   2c3d4:	mov	r2, r6
   2c3d8:	mov	r3, r8
   2c3dc:	str	r7, [sp, #8]
   2c3e0:	bl	2e61c <__assert_fail@plt+0x1cebc>
   2c3e4:	ldr	r2, [sp, #24]
   2c3e8:	ldr	r3, [sp, #28]
   2c3ec:	mov	r7, #1
   2c3f0:	mov	r4, #0
   2c3f4:	mov	r9, #-2147483648	; 0x80000000
   2c3f8:	subs	r0, r0, r2
   2c3fc:	sbcs	r0, r1, r3
   2c400:	blt	2c474 <__assert_fail@plt+0x1ad14>
   2c404:	umull	r4, r0, r6, r2
   2c408:	ldr	r7, [sp, #8]
   2c40c:	mla	r0, r6, r3, r0
   2c410:	mla	r9, r8, r2, r0
   2c414:	cmp	r9, #0
   2c418:	bmi	2c474 <__assert_fail@plt+0x1ad14>
   2c41c:	ldr	r3, [sp, #28]
   2c420:	mvn	r0, #0
   2c424:	mvn	r1, #-2147483648	; 0x80000000
   2c428:	str	r7, [sp, #8]
   2c42c:	mvn	r6, #0
   2c430:	mvn	r7, #-2147483648	; 0x80000000
   2c434:	bl	2e6f0 <__assert_fail@plt+0x1cf90>
   2c438:	ldr	r3, [sp, #24]
   2c43c:	ldr	ip, [sp, #28]
   2c440:	subs	r0, r0, r4
   2c444:	mov	r2, #1
   2c448:	mov	r8, r4
   2c44c:	sbcs	r0, r1, r9
   2c450:	blt	2c464 <__assert_fail@plt+0x1ad04>
   2c454:	umull	r6, r0, r8, r3
   2c458:	mov	r2, #0
   2c45c:	mla	r0, r8, ip, r0
   2c460:	mla	r7, r9, r3, r0
   2c464:	ldr	r0, [sp, #8]
   2c468:	ldr	r9, [sp, #12]
   2c46c:	orr	r3, r2, r0
   2c470:	b	2cf50 <__assert_fail@plt+0x1b7f0>
   2c474:	mov	r0, #0
   2c478:	mov	r1, #-2147483648	; 0x80000000
   2c47c:	mov	r2, r4
   2c480:	mov	r3, r9
   2c484:	str	r7, [sp, #8]
   2c488:	mov	r8, r4
   2c48c:	bl	2e61c <__assert_fail@plt+0x1cebc>
   2c490:	ldr	r3, [sp, #24]
   2c494:	ldr	ip, [sp, #28]
   2c498:	mov	r2, #1
   2c49c:	mov	r6, #0
   2c4a0:	mov	r7, #-2147483648	; 0x80000000
   2c4a4:	subs	r0, r0, r3
   2c4a8:	sbcs	r0, r1, ip
   2c4ac:	bge	2c454 <__assert_fail@plt+0x1acf4>
   2c4b0:	b	2c464 <__assert_fail@plt+0x1ad04>
   2c4b4:	and	r0, r6, r7
   2c4b8:	cmn	r0, #1
   2c4bc:	beq	2c4f8 <__assert_fail@plt+0x1ad98>
   2c4c0:	mov	r0, #0
   2c4c4:	mov	r1, #-2147483648	; 0x80000000
   2c4c8:	mov	r2, r6
   2c4cc:	mov	r3, r7
   2c4d0:	bl	2e61c <__assert_fail@plt+0x1cebc>
   2c4d4:	ldr	r2, [sp, #24]
   2c4d8:	ldr	r3, [sp, #28]
   2c4dc:	mov	r4, #1
   2c4e0:	mov	r9, #-2147483648	; 0x80000000
   2c4e4:	subs	r0, r0, r2
   2c4e8:	sbcs	r0, r1, r3
   2c4ec:	mov	r0, #0
   2c4f0:	str	r0, [sp, #8]
   2c4f4:	blt	2c808 <__assert_fail@plt+0x1b0a8>
   2c4f8:	umull	r1, r0, r6, r2
   2c4fc:	mov	r4, #0
   2c500:	mla	r0, r6, r3, r0
   2c504:	mla	r9, r7, r2, r0
   2c508:	str	r1, [sp, #8]
   2c50c:	cmp	r9, #0
   2c510:	bmi	2c808 <__assert_fail@plt+0x1b0a8>
   2c514:	ldr	r3, [sp, #28]
   2c518:	mvn	r0, #0
   2c51c:	mvn	r1, #-2147483648	; 0x80000000
   2c520:	str	r4, [sp, #4]
   2c524:	mvn	r8, #0
   2c528:	mvn	r4, #-2147483648	; 0x80000000
   2c52c:	bl	2e6f0 <__assert_fail@plt+0x1cf90>
   2c530:	ldr	r6, [sp, #8]
   2c534:	ldr	r2, [sp, #24]
   2c538:	ldr	r3, [sp, #28]
   2c53c:	mov	r7, #1
   2c540:	subs	r0, r0, r6
   2c544:	sbcs	r0, r1, r9
   2c548:	bge	2c844 <__assert_fail@plt+0x1b0e4>
   2c54c:	b	2c85c <__assert_fail@plt+0x1b0fc>
   2c550:	and	r0, r6, r7
   2c554:	cmn	r0, #1
   2c558:	beq	2c580 <__assert_fail@plt+0x1ae20>
   2c55c:	mov	r0, #0
   2c560:	mov	r1, #-2147483648	; 0x80000000
   2c564:	mov	r2, r6
   2c568:	mov	r3, r7
   2c56c:	bl	2e61c <__assert_fail@plt+0x1cebc>
   2c570:	ldr	r3, [sp, #28]
   2c574:	subs	r0, r0, #1024	; 0x400
   2c578:	sbcs	r0, r1, #0
   2c57c:	blt	2c7d8 <__assert_fail@plt+0x1b078>
   2c580:	lsl	r0, r7, #10
   2c584:	orr	r7, r0, r6, lsr #22
   2c588:	lsl	r6, r6, #10
   2c58c:	b	2cf50 <__assert_fail@plt+0x1b7f0>
   2c590:	and	r0, r6, r7
   2c594:	cmn	r0, #1
   2c598:	beq	2c5d4 <__assert_fail@plt+0x1ae74>
   2c59c:	mov	r0, #0
   2c5a0:	mov	r1, #-2147483648	; 0x80000000
   2c5a4:	mov	r2, r6
   2c5a8:	mov	r3, r7
   2c5ac:	bl	2e61c <__assert_fail@plt+0x1cebc>
   2c5b0:	ldr	r2, [sp, #24]
   2c5b4:	ldr	r3, [sp, #28]
   2c5b8:	mov	r4, #1
   2c5bc:	mov	r9, #-2147483648	; 0x80000000
   2c5c0:	subs	r0, r0, r2
   2c5c4:	sbcs	r0, r1, r3
   2c5c8:	mov	r0, #0
   2c5cc:	str	r0, [sp, #8]
   2c5d0:	blt	2cb20 <__assert_fail@plt+0x1b3c0>
   2c5d4:	umull	r1, r0, r6, r2
   2c5d8:	mov	r4, #0
   2c5dc:	mla	r0, r6, r3, r0
   2c5e0:	mla	r9, r7, r2, r0
   2c5e4:	str	r1, [sp, #8]
   2c5e8:	cmp	r9, #0
   2c5ec:	bmi	2cb20 <__assert_fail@plt+0x1b3c0>
   2c5f0:	ldr	r3, [sp, #28]
   2c5f4:	mvn	r0, #0
   2c5f8:	mvn	r1, #-2147483648	; 0x80000000
   2c5fc:	str	r4, [sp, #4]
   2c600:	mvn	r8, #0
   2c604:	mvn	r4, #-2147483648	; 0x80000000
   2c608:	bl	2e6f0 <__assert_fail@plt+0x1cf90>
   2c60c:	ldr	r6, [sp, #8]
   2c610:	ldr	r2, [sp, #24]
   2c614:	ldr	r3, [sp, #28]
   2c618:	mov	r7, #1
   2c61c:	subs	r0, r0, r6
   2c620:	sbcs	r0, r1, r9
   2c624:	bge	2cb5c <__assert_fail@plt+0x1b3fc>
   2c628:	b	2cb74 <__assert_fail@plt+0x1b414>
   2c62c:	and	r0, r6, r7
   2c630:	cmn	r0, #1
   2c634:	beq	2c670 <__assert_fail@plt+0x1af10>
   2c638:	mov	r0, #0
   2c63c:	mov	r1, #-2147483648	; 0x80000000
   2c640:	mov	r2, r6
   2c644:	mov	r3, r7
   2c648:	bl	2e61c <__assert_fail@plt+0x1cebc>
   2c64c:	ldr	r2, [sp, #24]
   2c650:	ldr	r3, [sp, #28]
   2c654:	mov	r4, #1
   2c658:	mov	r8, #-2147483648	; 0x80000000
   2c65c:	subs	r0, r0, r2
   2c660:	sbcs	r0, r1, r3
   2c664:	mov	r0, #0
   2c668:	str	r0, [sp, #8]
   2c66c:	blt	2cd9c <__assert_fail@plt+0x1b63c>
   2c670:	umull	r1, r0, r6, r2
   2c674:	mov	r4, #0
   2c678:	mla	r0, r6, r3, r0
   2c67c:	mla	r8, r7, r2, r0
   2c680:	str	r1, [sp, #8]
   2c684:	cmp	r8, #0
   2c688:	bmi	2cd9c <__assert_fail@plt+0x1b63c>
   2c68c:	ldr	r3, [sp, #28]
   2c690:	mvn	r0, #0
   2c694:	mvn	r1, #-2147483648	; 0x80000000
   2c698:	str	r4, [sp, #4]
   2c69c:	mvn	r9, #0
   2c6a0:	mvn	r4, #-2147483648	; 0x80000000
   2c6a4:	bl	2e6f0 <__assert_fail@plt+0x1cf90>
   2c6a8:	ldr	r6, [sp, #8]
   2c6ac:	ldr	r2, [sp, #24]
   2c6b0:	ldr	r3, [sp, #28]
   2c6b4:	mov	r7, #1
   2c6b8:	subs	r0, r0, r6
   2c6bc:	sbcs	r0, r1, r8
   2c6c0:	bge	2cdd8 <__assert_fail@plt+0x1b678>
   2c6c4:	b	2cdf0 <__assert_fail@plt+0x1b690>
   2c6c8:	and	r0, r6, r7
   2c6cc:	cmn	r0, #1
   2c6d0:	beq	2c70c <__assert_fail@plt+0x1afac>
   2c6d4:	mov	r0, #0
   2c6d8:	mov	r1, #-2147483648	; 0x80000000
   2c6dc:	mov	r2, r6
   2c6e0:	mov	r3, r7
   2c6e4:	bl	2e61c <__assert_fail@plt+0x1cebc>
   2c6e8:	ldr	r2, [sp, #24]
   2c6ec:	ldr	r3, [sp, #28]
   2c6f0:	mov	r4, #1
   2c6f4:	mov	r9, #-2147483648	; 0x80000000
   2c6f8:	subs	r0, r0, r2
   2c6fc:	sbcs	r0, r1, r3
   2c700:	mov	r0, #0
   2c704:	str	r0, [sp, #8]
   2c708:	blt	2cfb8 <__assert_fail@plt+0x1b858>
   2c70c:	umull	r1, r0, r6, r2
   2c710:	mov	r4, #0
   2c714:	mla	r0, r6, r3, r0
   2c718:	mla	r9, r7, r2, r0
   2c71c:	str	r1, [sp, #8]
   2c720:	cmp	r9, #0
   2c724:	bmi	2cfb8 <__assert_fail@plt+0x1b858>
   2c728:	ldr	r3, [sp, #28]
   2c72c:	mvn	r0, #0
   2c730:	mvn	r1, #-2147483648	; 0x80000000
   2c734:	str	r4, [sp]
   2c738:	mvn	r8, #-2147483648	; 0x80000000
   2c73c:	str	r0, [sp, #4]
   2c740:	mvn	r0, #0
   2c744:	bl	2e6f0 <__assert_fail@plt+0x1cf90>
   2c748:	ldr	r6, [sp, #8]
   2c74c:	ldr	r2, [sp, #24]
   2c750:	ldr	r3, [sp, #28]
   2c754:	mov	r7, #1
   2c758:	subs	r0, r0, r6
   2c75c:	sbcs	r0, r1, r9
   2c760:	bge	2cff8 <__assert_fail@plt+0x1b898>
   2c764:	b	2d014 <__assert_fail@plt+0x1b8b4>
   2c768:	and	r0, r6, r7
   2c76c:	cmn	r0, #1
   2c770:	beq	2c798 <__assert_fail@plt+0x1b038>
   2c774:	mov	r0, #0
   2c778:	mov	r1, #-2147483648	; 0x80000000
   2c77c:	mov	r2, r6
   2c780:	mov	r3, r7
   2c784:	bl	2e61c <__assert_fail@plt+0x1cebc>
   2c788:	ldr	r3, [sp, #28]
   2c78c:	subs	r0, r0, #512	; 0x200
   2c790:	sbcs	r0, r1, #0
   2c794:	blt	2c7d8 <__assert_fail@plt+0x1b078>
   2c798:	lsl	r0, r7, #9
   2c79c:	orr	r7, r0, r6, lsr #23
   2c7a0:	lsl	r6, r6, #9
   2c7a4:	b	2cf50 <__assert_fail@plt+0x1b7f0>
   2c7a8:	and	r0, r6, r7
   2c7ac:	cmn	r0, #1
   2c7b0:	beq	2c7f8 <__assert_fail@plt+0x1b098>
   2c7b4:	mov	r0, #0
   2c7b8:	mov	r1, #-2147483648	; 0x80000000
   2c7bc:	mov	r2, r6
   2c7c0:	mov	r3, r7
   2c7c4:	bl	2e61c <__assert_fail@plt+0x1cebc>
   2c7c8:	ldr	r3, [sp, #28]
   2c7cc:	subs	r0, r0, #2
   2c7d0:	sbcs	r0, r1, #0
   2c7d4:	bge	2c7f8 <__assert_fail@plt+0x1b098>
   2c7d8:	cmp	r7, #0
   2c7dc:	mvn	r0, #-2147483648	; 0x80000000
   2c7e0:	mvn	r6, #0
   2c7e4:	mov	r3, #1
   2c7e8:	movmi	r0, #-2147483648	; 0x80000000
   2c7ec:	movwmi	r6, #0
   2c7f0:	mov	r7, r0
   2c7f4:	b	2cf50 <__assert_fail@plt+0x1b7f0>
   2c7f8:	lsl	r0, r7, #1
   2c7fc:	orr	r7, r0, r6, lsr #31
   2c800:	lsl	r6, r6, #1
   2c804:	b	2cf50 <__assert_fail@plt+0x1b7f0>
   2c808:	ldr	r6, [sp, #8]
   2c80c:	mov	r0, #0
   2c810:	mov	r1, #-2147483648	; 0x80000000
   2c814:	mov	r3, r9
   2c818:	str	r4, [sp, #4]
   2c81c:	mov	r2, r6
   2c820:	bl	2e61c <__assert_fail@plt+0x1cebc>
   2c824:	ldr	r2, [sp, #24]
   2c828:	ldr	r3, [sp, #28]
   2c82c:	mov	r7, #1
   2c830:	mov	r8, #0
   2c834:	mov	r4, #-2147483648	; 0x80000000
   2c838:	subs	r0, r0, r2
   2c83c:	sbcs	r0, r1, r3
   2c840:	blt	2c894 <__assert_fail@plt+0x1b134>
   2c844:	umull	r8, r0, r6, r2
   2c848:	ldr	r7, [sp, #4]
   2c84c:	mla	r0, r6, r3, r0
   2c850:	mla	r4, r9, r2, r0
   2c854:	cmp	r4, #0
   2c858:	bmi	2c894 <__assert_fail@plt+0x1b134>
   2c85c:	ldr	r3, [sp, #28]
   2c860:	mvn	r0, #0
   2c864:	mvn	r1, #-2147483648	; 0x80000000
   2c868:	str	r7, [sp, #8]
   2c86c:	mvn	r7, #0
   2c870:	mvn	r9, #-2147483648	; 0x80000000
   2c874:	bl	2e6f0 <__assert_fail@plt+0x1cf90>
   2c878:	ldr	r2, [sp, #24]
   2c87c:	ldr	r3, [sp, #28]
   2c880:	subs	r0, r0, r8
   2c884:	mov	r6, #1
   2c888:	sbcs	r0, r1, r4
   2c88c:	bge	2c8cc <__assert_fail@plt+0x1b16c>
   2c890:	b	2c8e4 <__assert_fail@plt+0x1b184>
   2c894:	mov	r0, #0
   2c898:	mov	r1, #-2147483648	; 0x80000000
   2c89c:	mov	r2, r8
   2c8a0:	mov	r3, r4
   2c8a4:	str	r7, [sp, #8]
   2c8a8:	bl	2e61c <__assert_fail@plt+0x1cebc>
   2c8ac:	ldr	r2, [sp, #24]
   2c8b0:	ldr	r3, [sp, #28]
   2c8b4:	mov	r6, #1
   2c8b8:	mov	r7, #0
   2c8bc:	mov	r9, #-2147483648	; 0x80000000
   2c8c0:	subs	r0, r0, r2
   2c8c4:	sbcs	r0, r1, r3
   2c8c8:	blt	2c924 <__assert_fail@plt+0x1b1c4>
   2c8cc:	umull	r7, r0, r8, r2
   2c8d0:	ldr	r6, [sp, #8]
   2c8d4:	mla	r0, r8, r3, r0
   2c8d8:	mla	r9, r4, r2, r0
   2c8dc:	cmp	r9, #0
   2c8e0:	bmi	2c924 <__assert_fail@plt+0x1b1c4>
   2c8e4:	ldr	r3, [sp, #28]
   2c8e8:	mvn	r0, #0
   2c8ec:	mvn	r1, #-2147483648	; 0x80000000
   2c8f0:	str	r6, [sp, #8]
   2c8f4:	mvn	r8, #0
   2c8f8:	mvn	r4, #-2147483648	; 0x80000000
   2c8fc:	bl	2e6f0 <__assert_fail@plt+0x1cf90>
   2c900:	ldr	r2, [sp, #24]
   2c904:	ldr	r3, [sp, #28]
   2c908:	subs	r0, r0, r7
   2c90c:	sbcs	r0, r1, r9
   2c910:	bge	2c968 <__assert_fail@plt+0x1b208>
   2c914:	mov	r0, #1
   2c918:	mov	r6, #0
   2c91c:	str	r0, [sp, #8]
   2c920:	b	2c980 <__assert_fail@plt+0x1b220>
   2c924:	mov	r0, #0
   2c928:	mov	r1, #-2147483648	; 0x80000000
   2c92c:	mov	r2, r7
   2c930:	mov	r3, r9
   2c934:	str	r6, [sp, #8]
   2c938:	bl	2e61c <__assert_fail@plt+0x1cebc>
   2c93c:	ldr	r2, [sp, #24]
   2c940:	ldr	r3, [sp, #28]
   2c944:	subs	r0, r0, r2
   2c948:	sbcs	r0, r1, r3
   2c94c:	bge	2c968 <__assert_fail@plt+0x1b208>
   2c950:	mov	r0, #1
   2c954:	mov	r8, #0
   2c958:	mov	r4, #-2147483648	; 0x80000000
   2c95c:	mov	r6, #0
   2c960:	str	r0, [sp, #8]
   2c964:	b	2c9b8 <__assert_fail@plt+0x1b258>
   2c968:	umull	r8, r0, r7, r2
   2c96c:	mov	r6, #0
   2c970:	mla	r0, r7, r3, r0
   2c974:	mla	r4, r9, r2, r0
   2c978:	cmp	r4, #0
   2c97c:	bmi	2c9b8 <__assert_fail@plt+0x1b258>
   2c980:	ldr	r3, [sp, #28]
   2c984:	mvn	r0, #0
   2c988:	mvn	r1, #-2147483648	; 0x80000000
   2c98c:	mvn	r9, #0
   2c990:	mvn	r7, #-2147483648	; 0x80000000
   2c994:	bl	2e6f0 <__assert_fail@plt+0x1cf90>
   2c998:	ldr	r2, [sp, #24]
   2c99c:	ldr	r3, [sp, #28]
   2c9a0:	subs	r0, r0, r8
   2c9a4:	sbcs	r0, r1, r4
   2c9a8:	bge	2c9f4 <__assert_fail@plt+0x1b294>
   2c9ac:	mov	r0, #1
   2c9b0:	str	r0, [sp, #8]
   2c9b4:	b	2ca08 <__assert_fail@plt+0x1b2a8>
   2c9b8:	mov	r0, #0
   2c9bc:	mov	r1, #-2147483648	; 0x80000000
   2c9c0:	mov	r2, r8
   2c9c4:	mov	r3, r4
   2c9c8:	bl	2e61c <__assert_fail@plt+0x1cebc>
   2c9cc:	ldr	r2, [sp, #24]
   2c9d0:	ldr	r3, [sp, #28]
   2c9d4:	subs	r0, r0, r2
   2c9d8:	sbcs	r0, r1, r3
   2c9dc:	bge	2c9f4 <__assert_fail@plt+0x1b294>
   2c9e0:	mov	r0, #1
   2c9e4:	mov	r9, #0
   2c9e8:	mov	r7, #-2147483648	; 0x80000000
   2c9ec:	str	r0, [sp, #8]
   2c9f0:	b	2ca44 <__assert_fail@plt+0x1b2e4>
   2c9f4:	umull	r9, r0, r8, r2
   2c9f8:	mla	r0, r8, r3, r0
   2c9fc:	mla	r7, r4, r2, r0
   2ca00:	cmp	r7, #0
   2ca04:	bmi	2ca44 <__assert_fail@plt+0x1b2e4>
   2ca08:	ldr	r3, [sp, #28]
   2ca0c:	mvn	r0, #0
   2ca10:	mvn	r1, #-2147483648	; 0x80000000
   2ca14:	mvn	r8, #0
   2ca18:	mvn	r4, #-2147483648	; 0x80000000
   2ca1c:	bl	2e6f0 <__assert_fail@plt+0x1cf90>
   2ca20:	ldr	r2, [sp, #24]
   2ca24:	ldr	r3, [sp, #28]
   2ca28:	subs	r0, r0, r9
   2ca2c:	sbcs	r0, r1, r7
   2ca30:	bge	2ca84 <__assert_fail@plt+0x1b324>
   2ca34:	ldr	r9, [sp, #12]
   2ca38:	mov	r0, #1
   2ca3c:	str	r0, [sp, #8]
   2ca40:	b	2ca9c <__assert_fail@plt+0x1b33c>
   2ca44:	mov	r0, #0
   2ca48:	mov	r1, #-2147483648	; 0x80000000
   2ca4c:	mov	r2, r9
   2ca50:	mov	r3, r7
   2ca54:	bl	2e61c <__assert_fail@plt+0x1cebc>
   2ca58:	ldr	r2, [sp, #24]
   2ca5c:	ldr	r3, [sp, #28]
   2ca60:	subs	r0, r0, r2
   2ca64:	sbcs	r0, r1, r3
   2ca68:	bge	2ca84 <__assert_fail@plt+0x1b324>
   2ca6c:	ldr	r9, [sp, #12]
   2ca70:	mov	r0, #1
   2ca74:	mov	r8, #0
   2ca78:	mov	r4, #-2147483648	; 0x80000000
   2ca7c:	str	r0, [sp, #8]
   2ca80:	b	2caec <__assert_fail@plt+0x1b38c>
   2ca84:	umull	r8, r0, r9, r2
   2ca88:	mla	r0, r9, r3, r0
   2ca8c:	ldr	r9, [sp, #12]
   2ca90:	mla	r4, r7, r2, r0
   2ca94:	cmp	r4, #0
   2ca98:	bmi	2caec <__assert_fail@plt+0x1b38c>
   2ca9c:	ldr	r3, [sp, #28]
   2caa0:	mvn	r0, #0
   2caa4:	mvn	r1, #-2147483648	; 0x80000000
   2caa8:	mvn	r6, #0
   2caac:	bl	2e6f0 <__assert_fail@plt+0x1cf90>
   2cab0:	ldr	r7, [sp, #24]
   2cab4:	ldr	r3, [sp, #28]
   2cab8:	subs	r0, r0, r8
   2cabc:	mov	r2, #1
   2cac0:	sbcs	r0, r1, r4
   2cac4:	mvn	r0, #-2147483648	; 0x80000000
   2cac8:	blt	2cadc <__assert_fail@plt+0x1b37c>
   2cacc:	umull	r6, r0, r8, r7
   2cad0:	mov	r2, #0
   2cad4:	mla	r0, r8, r3, r0
   2cad8:	mla	r0, r4, r7, r0
   2cadc:	ldr	r1, [sp, #8]
   2cae0:	mov	r7, r0
   2cae4:	orr	r3, r2, r1
   2cae8:	b	2cf50 <__assert_fail@plt+0x1b7f0>
   2caec:	mov	r0, #0
   2caf0:	mov	r1, #-2147483648	; 0x80000000
   2caf4:	mov	r2, r8
   2caf8:	mov	r3, r4
   2cafc:	bl	2e61c <__assert_fail@plt+0x1cebc>
   2cb00:	ldr	r7, [sp, #24]
   2cb04:	ldr	r3, [sp, #28]
   2cb08:	mov	r2, #1
   2cb0c:	subs	r0, r0, r7
   2cb10:	sbcs	r0, r1, r3
   2cb14:	mov	r0, #-2147483648	; 0x80000000
   2cb18:	bge	2cacc <__assert_fail@plt+0x1b36c>
   2cb1c:	b	2cadc <__assert_fail@plt+0x1b37c>
   2cb20:	ldr	r6, [sp, #8]
   2cb24:	mov	r0, #0
   2cb28:	mov	r1, #-2147483648	; 0x80000000
   2cb2c:	mov	r3, r9
   2cb30:	str	r4, [sp, #4]
   2cb34:	mov	r2, r6
   2cb38:	bl	2e61c <__assert_fail@plt+0x1cebc>
   2cb3c:	ldr	r2, [sp, #24]
   2cb40:	ldr	r3, [sp, #28]
   2cb44:	mov	r7, #1
   2cb48:	mov	r8, #0
   2cb4c:	mov	r4, #-2147483648	; 0x80000000
   2cb50:	subs	r0, r0, r2
   2cb54:	sbcs	r0, r1, r3
   2cb58:	blt	2cbb0 <__assert_fail@plt+0x1b450>
   2cb5c:	umull	r8, r0, r6, r2
   2cb60:	ldr	r7, [sp, #4]
   2cb64:	mla	r0, r6, r3, r0
   2cb68:	mla	r4, r9, r2, r0
   2cb6c:	cmp	r4, #0
   2cb70:	bmi	2cbb0 <__assert_fail@plt+0x1b450>
   2cb74:	ldr	r3, [sp, #28]
   2cb78:	mvn	r0, #0
   2cb7c:	mvn	r1, #-2147483648	; 0x80000000
   2cb80:	str	r7, [sp, #4]
   2cb84:	mvn	r7, #0
   2cb88:	mvn	r9, #-2147483648	; 0x80000000
   2cb8c:	bl	2e6f0 <__assert_fail@plt+0x1cf90>
   2cb90:	ldr	r2, [sp, #24]
   2cb94:	ldr	r3, [sp, #28]
   2cb98:	subs	r0, r0, r8
   2cb9c:	mov	r6, #1
   2cba0:	sbcs	r0, r1, r4
   2cba4:	str	r6, [sp, #8]
   2cba8:	bge	2cbec <__assert_fail@plt+0x1b48c>
   2cbac:	b	2cc08 <__assert_fail@plt+0x1b4a8>
   2cbb0:	mov	r0, #0
   2cbb4:	mov	r1, #-2147483648	; 0x80000000
   2cbb8:	mov	r2, r8
   2cbbc:	mov	r3, r4
   2cbc0:	str	r7, [sp, #4]
   2cbc4:	bl	2e61c <__assert_fail@plt+0x1cebc>
   2cbc8:	ldr	r2, [sp, #24]
   2cbcc:	ldr	r3, [sp, #28]
   2cbd0:	mov	r7, #1
   2cbd4:	mov	r9, #-2147483648	; 0x80000000
   2cbd8:	str	r7, [sp, #8]
   2cbdc:	mov	r7, #0
   2cbe0:	subs	r0, r0, r2
   2cbe4:	sbcs	r0, r1, r3
   2cbe8:	blt	2cc40 <__assert_fail@plt+0x1b4e0>
   2cbec:	umull	r7, r0, r8, r2
   2cbf0:	mla	r0, r8, r3, r0
   2cbf4:	mla	r9, r4, r2, r0
   2cbf8:	ldr	r0, [sp, #4]
   2cbfc:	cmp	r9, #0
   2cc00:	str	r0, [sp, #8]
   2cc04:	bmi	2cc40 <__assert_fail@plt+0x1b4e0>
   2cc08:	ldr	r3, [sp, #28]
   2cc0c:	mvn	r0, #0
   2cc10:	mvn	r1, #-2147483648	; 0x80000000
   2cc14:	mvn	r4, #0
   2cc18:	mvn	r8, #-2147483648	; 0x80000000
   2cc1c:	bl	2e6f0 <__assert_fail@plt+0x1cf90>
   2cc20:	ldr	r2, [sp, #24]
   2cc24:	ldr	r3, [sp, #28]
   2cc28:	subs	r0, r0, r7
   2cc2c:	sbcs	r0, r1, r9
   2cc30:	bge	2cc7c <__assert_fail@plt+0x1b51c>
   2cc34:	mov	r0, #1
   2cc38:	str	r0, [sp, #8]
   2cc3c:	b	2cc90 <__assert_fail@plt+0x1b530>
   2cc40:	mov	r0, #0
   2cc44:	mov	r1, #-2147483648	; 0x80000000
   2cc48:	mov	r2, r7
   2cc4c:	mov	r3, r9
   2cc50:	bl	2e61c <__assert_fail@plt+0x1cebc>
   2cc54:	ldr	r2, [sp, #24]
   2cc58:	ldr	r3, [sp, #28]
   2cc5c:	subs	r0, r0, r2
   2cc60:	sbcs	r0, r1, r3
   2cc64:	bge	2cc7c <__assert_fail@plt+0x1b51c>
   2cc68:	mov	r0, #1
   2cc6c:	mov	r4, #0
   2cc70:	mov	r8, #-2147483648	; 0x80000000
   2cc74:	str	r0, [sp, #8]
   2cc78:	b	2ccc4 <__assert_fail@plt+0x1b564>
   2cc7c:	umull	r4, r0, r7, r2
   2cc80:	mla	r0, r7, r3, r0
   2cc84:	mla	r8, r9, r2, r0
   2cc88:	cmp	r8, #0
   2cc8c:	bmi	2ccc4 <__assert_fail@plt+0x1b564>
   2cc90:	ldr	r3, [sp, #28]
   2cc94:	mvn	r0, #0
   2cc98:	mvn	r1, #-2147483648	; 0x80000000
   2cc9c:	mvn	r6, #0
   2cca0:	mvn	r9, #-2147483648	; 0x80000000
   2cca4:	bl	2e6f0 <__assert_fail@plt+0x1cf90>
   2cca8:	ldr	r2, [sp, #24]
   2ccac:	ldr	r3, [sp, #28]
   2ccb0:	subs	r0, r0, r4
   2ccb4:	sbcs	r0, r1, r8
   2ccb8:	bge	2ccfc <__assert_fail@plt+0x1b59c>
   2ccbc:	mov	r8, #1
   2ccc0:	b	2cd14 <__assert_fail@plt+0x1b5b4>
   2ccc4:	mov	r0, #0
   2ccc8:	mov	r1, #-2147483648	; 0x80000000
   2cccc:	mov	r2, r4
   2ccd0:	mov	r3, r8
   2ccd4:	bl	2e61c <__assert_fail@plt+0x1cebc>
   2ccd8:	ldr	r2, [sp, #24]
   2ccdc:	ldr	r3, [sp, #28]
   2cce0:	subs	r0, r0, r2
   2cce4:	sbcs	r0, r1, r3
   2cce8:	bge	2ccfc <__assert_fail@plt+0x1b59c>
   2ccec:	mov	r8, #1
   2ccf0:	mov	r6, #0
   2ccf4:	mov	r9, #-2147483648	; 0x80000000
   2ccf8:	b	2cd64 <__assert_fail@plt+0x1b604>
   2ccfc:	umull	r6, r0, r4, r2
   2cd00:	mla	r0, r4, r3, r0
   2cd04:	mla	r9, r8, r2, r0
   2cd08:	ldr	r8, [sp, #8]
   2cd0c:	cmp	r9, #0
   2cd10:	bmi	2cd64 <__assert_fail@plt+0x1b604>
   2cd14:	ldr	r3, [sp, #28]
   2cd18:	mvn	r0, #0
   2cd1c:	mvn	r1, #-2147483648	; 0x80000000
   2cd20:	mvn	r4, #0
   2cd24:	mvn	r7, #-2147483648	; 0x80000000
   2cd28:	bl	2e6f0 <__assert_fail@plt+0x1cf90>
   2cd2c:	ldr	r3, [sp, #24]
   2cd30:	ldr	ip, [sp, #28]
   2cd34:	subs	r0, r0, r6
   2cd38:	mov	r2, #1
   2cd3c:	sbcs	r0, r1, r9
   2cd40:	blt	2cd54 <__assert_fail@plt+0x1b5f4>
   2cd44:	umull	r4, r0, r6, r3
   2cd48:	mov	r2, #0
   2cd4c:	mla	r0, r6, ip, r0
   2cd50:	mla	r7, r9, r3, r0
   2cd54:	ldr	r9, [sp, #12]
   2cd58:	orr	r3, r2, r8
   2cd5c:	mov	r6, r4
   2cd60:	b	2cf50 <__assert_fail@plt+0x1b7f0>
   2cd64:	mov	r0, #0
   2cd68:	mov	r1, #-2147483648	; 0x80000000
   2cd6c:	mov	r2, r6
   2cd70:	mov	r3, r9
   2cd74:	bl	2e61c <__assert_fail@plt+0x1cebc>
   2cd78:	ldr	r3, [sp, #24]
   2cd7c:	ldr	ip, [sp, #28]
   2cd80:	mov	r2, #1
   2cd84:	mov	r4, #0
   2cd88:	mov	r7, #-2147483648	; 0x80000000
   2cd8c:	subs	r0, r0, r3
   2cd90:	sbcs	r0, r1, ip
   2cd94:	bge	2cd44 <__assert_fail@plt+0x1b5e4>
   2cd98:	b	2cd54 <__assert_fail@plt+0x1b5f4>
   2cd9c:	ldr	r6, [sp, #8]
   2cda0:	mov	r0, #0
   2cda4:	mov	r1, #-2147483648	; 0x80000000
   2cda8:	mov	r3, r8
   2cdac:	str	r4, [sp, #4]
   2cdb0:	mov	r2, r6
   2cdb4:	bl	2e61c <__assert_fail@plt+0x1cebc>
   2cdb8:	ldr	r2, [sp, #24]
   2cdbc:	ldr	r3, [sp, #28]
   2cdc0:	mov	r7, #1
   2cdc4:	mov	r9, #0
   2cdc8:	mov	r4, #-2147483648	; 0x80000000
   2cdcc:	subs	r0, r0, r2
   2cdd0:	sbcs	r0, r1, r3
   2cdd4:	blt	2ce2c <__assert_fail@plt+0x1b6cc>
   2cdd8:	umull	r9, r0, r6, r2
   2cddc:	ldr	r7, [sp, #4]
   2cde0:	mla	r0, r6, r3, r0
   2cde4:	mla	r4, r8, r2, r0
   2cde8:	cmp	r4, #0
   2cdec:	bmi	2ce2c <__assert_fail@plt+0x1b6cc>
   2cdf0:	ldr	r3, [sp, #28]
   2cdf4:	mvn	r0, #0
   2cdf8:	mvn	r1, #-2147483648	; 0x80000000
   2cdfc:	str	r7, [sp, #4]
   2ce00:	mvn	r8, #0
   2ce04:	mvn	r7, #-2147483648	; 0x80000000
   2ce08:	bl	2e6f0 <__assert_fail@plt+0x1cf90>
   2ce0c:	ldr	r2, [sp, #24]
   2ce10:	ldr	r3, [sp, #28]
   2ce14:	subs	r0, r0, r9
   2ce18:	mov	r6, #1
   2ce1c:	sbcs	r0, r1, r4
   2ce20:	str	r6, [sp, #8]
   2ce24:	bge	2ce68 <__assert_fail@plt+0x1b708>
   2ce28:	b	2ce84 <__assert_fail@plt+0x1b724>
   2ce2c:	mov	r0, #0
   2ce30:	mov	r1, #-2147483648	; 0x80000000
   2ce34:	mov	r2, r9
   2ce38:	mov	r3, r4
   2ce3c:	str	r7, [sp, #4]
   2ce40:	bl	2e61c <__assert_fail@plt+0x1cebc>
   2ce44:	ldr	r2, [sp, #24]
   2ce48:	ldr	r3, [sp, #28]
   2ce4c:	mov	r7, #1
   2ce50:	mov	r8, #0
   2ce54:	str	r7, [sp, #8]
   2ce58:	mov	r7, #-2147483648	; 0x80000000
   2ce5c:	subs	r0, r0, r2
   2ce60:	sbcs	r0, r1, r3
   2ce64:	blt	2ceb8 <__assert_fail@plt+0x1b758>
   2ce68:	umull	r8, r0, r9, r2
   2ce6c:	mla	r0, r9, r3, r0
   2ce70:	mla	r7, r4, r2, r0
   2ce74:	ldr	r0, [sp, #4]
   2ce78:	cmp	r7, #0
   2ce7c:	str	r0, [sp, #8]
   2ce80:	bmi	2ceb8 <__assert_fail@plt+0x1b758>
   2ce84:	ldr	r3, [sp, #28]
   2ce88:	mvn	r0, #0
   2ce8c:	mvn	r1, #-2147483648	; 0x80000000
   2ce90:	mvn	r4, #0
   2ce94:	mvn	r9, #-2147483648	; 0x80000000
   2ce98:	bl	2e6f0 <__assert_fail@plt+0x1cf90>
   2ce9c:	ldr	r2, [sp, #24]
   2cea0:	ldr	r3, [sp, #28]
   2cea4:	subs	r0, r0, r8
   2cea8:	sbcs	r0, r1, r7
   2ceac:	bge	2cef0 <__assert_fail@plt+0x1b790>
   2ceb0:	mov	r8, #1
   2ceb4:	b	2cf08 <__assert_fail@plt+0x1b7a8>
   2ceb8:	mov	r0, #0
   2cebc:	mov	r1, #-2147483648	; 0x80000000
   2cec0:	mov	r2, r8
   2cec4:	mov	r3, r7
   2cec8:	bl	2e61c <__assert_fail@plt+0x1cebc>
   2cecc:	ldr	r2, [sp, #24]
   2ced0:	ldr	r3, [sp, #28]
   2ced4:	subs	r0, r0, r2
   2ced8:	sbcs	r0, r1, r3
   2cedc:	bge	2cef0 <__assert_fail@plt+0x1b790>
   2cee0:	mov	r8, #1
   2cee4:	mov	r4, #0
   2cee8:	mov	r9, #-2147483648	; 0x80000000
   2ceec:	b	2cf80 <__assert_fail@plt+0x1b820>
   2cef0:	umull	r4, r0, r8, r2
   2cef4:	mla	r0, r8, r3, r0
   2cef8:	ldr	r8, [sp, #8]
   2cefc:	mla	r9, r7, r2, r0
   2cf00:	cmp	r9, #0
   2cf04:	bmi	2cf80 <__assert_fail@plt+0x1b820>
   2cf08:	ldr	r3, [sp, #28]
   2cf0c:	mvn	r0, #0
   2cf10:	mvn	r1, #-2147483648	; 0x80000000
   2cf14:	mvn	r6, #0
   2cf18:	mvn	r7, #-2147483648	; 0x80000000
   2cf1c:	bl	2e6f0 <__assert_fail@plt+0x1cf90>
   2cf20:	ldr	r3, [sp, #24]
   2cf24:	ldr	ip, [sp, #28]
   2cf28:	subs	r0, r0, r4
   2cf2c:	mov	r2, #1
   2cf30:	sbcs	r0, r1, r9
   2cf34:	blt	2cf48 <__assert_fail@plt+0x1b7e8>
   2cf38:	umull	r6, r0, r4, r3
   2cf3c:	mov	r2, #0
   2cf40:	mla	r0, r4, ip, r0
   2cf44:	mla	r7, r9, r3, r0
   2cf48:	ldr	r9, [sp, #12]
   2cf4c:	orr	r3, r2, r8
   2cf50:	ldr	r1, [sp, #20]
   2cf54:	ldr	r2, [sp, #16]
   2cf58:	orr	r5, r3, r5
   2cf5c:	add	r0, r1, r2
   2cf60:	str	r0, [sl]
   2cf64:	ldrb	r0, [r1, r2]
   2cf68:	cmp	r0, #0
   2cf6c:	orrne	r5, r5, #2
   2cf70:	strd	r6, [r9]
   2cf74:	mov	r0, r5
   2cf78:	sub	sp, fp, #28
   2cf7c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2cf80:	mov	r0, #0
   2cf84:	mov	r1, #-2147483648	; 0x80000000
   2cf88:	mov	r2, r4
   2cf8c:	mov	r3, r9
   2cf90:	bl	2e61c <__assert_fail@plt+0x1cebc>
   2cf94:	ldr	r3, [sp, #24]
   2cf98:	ldr	ip, [sp, #28]
   2cf9c:	mov	r2, #1
   2cfa0:	mov	r6, #0
   2cfa4:	mov	r7, #-2147483648	; 0x80000000
   2cfa8:	subs	r0, r0, r3
   2cfac:	sbcs	r0, r1, ip
   2cfb0:	bge	2cf38 <__assert_fail@plt+0x1b7d8>
   2cfb4:	b	2cf48 <__assert_fail@plt+0x1b7e8>
   2cfb8:	ldr	r6, [sp, #8]
   2cfbc:	mov	r0, #0
   2cfc0:	mov	r1, #-2147483648	; 0x80000000
   2cfc4:	mov	r3, r9
   2cfc8:	str	r4, [sp]
   2cfcc:	mov	r2, r6
   2cfd0:	bl	2e61c <__assert_fail@plt+0x1cebc>
   2cfd4:	ldr	r2, [sp, #24]
   2cfd8:	ldr	r3, [sp, #28]
   2cfdc:	mov	r7, #1
   2cfe0:	mov	r8, #-2147483648	; 0x80000000
   2cfe4:	subs	r0, r0, r2
   2cfe8:	sbcs	r0, r1, r3
   2cfec:	mov	r0, #0
   2cff0:	str	r0, [sp, #4]
   2cff4:	blt	2d054 <__assert_fail@plt+0x1b8f4>
   2cff8:	umull	r1, r0, r6, r2
   2cffc:	ldr	r7, [sp]
   2d000:	mla	r0, r6, r3, r0
   2d004:	mla	r8, r9, r2, r0
   2d008:	str	r1, [sp, #4]
   2d00c:	cmp	r8, #0
   2d010:	bmi	2d054 <__assert_fail@plt+0x1b8f4>
   2d014:	ldr	r3, [sp, #28]
   2d018:	mvn	r0, #0
   2d01c:	mvn	r1, #-2147483648	; 0x80000000
   2d020:	str	r7, [sp]
   2d024:	mvn	r7, #0
   2d028:	mvn	r4, #-2147483648	; 0x80000000
   2d02c:	bl	2e6f0 <__assert_fail@plt+0x1cf90>
   2d030:	mov	r6, #1
   2d034:	ldr	r2, [sp, #24]
   2d038:	ldr	r3, [sp, #28]
   2d03c:	str	r6, [sp, #8]
   2d040:	ldr	r6, [sp, #4]
   2d044:	subs	r0, r0, r6
   2d048:	sbcs	r0, r1, r8
   2d04c:	bge	2d094 <__assert_fail@plt+0x1b934>
   2d050:	b	2d0b0 <__assert_fail@plt+0x1b950>
   2d054:	ldr	r6, [sp, #4]
   2d058:	mov	r0, #0
   2d05c:	mov	r1, #-2147483648	; 0x80000000
   2d060:	mov	r3, r8
   2d064:	str	r7, [sp]
   2d068:	mov	r2, r6
   2d06c:	bl	2e61c <__assert_fail@plt+0x1cebc>
   2d070:	ldr	r2, [sp, #24]
   2d074:	ldr	r3, [sp, #28]
   2d078:	mov	r7, #1
   2d07c:	mov	r4, #-2147483648	; 0x80000000
   2d080:	str	r7, [sp, #8]
   2d084:	mov	r7, #0
   2d088:	subs	r0, r0, r2
   2d08c:	sbcs	r0, r1, r3
   2d090:	blt	2d0e8 <__assert_fail@plt+0x1b988>
   2d094:	umull	r7, r0, r6, r2
   2d098:	mla	r0, r6, r3, r0
   2d09c:	mla	r4, r8, r2, r0
   2d0a0:	ldr	r0, [sp]
   2d0a4:	cmp	r4, #0
   2d0a8:	str	r0, [sp, #8]
   2d0ac:	bmi	2d0e8 <__assert_fail@plt+0x1b988>
   2d0b0:	ldr	r3, [sp, #28]
   2d0b4:	mvn	r0, #0
   2d0b8:	mvn	r1, #-2147483648	; 0x80000000
   2d0bc:	mvn	r9, #0
   2d0c0:	mvn	r8, #-2147483648	; 0x80000000
   2d0c4:	bl	2e6f0 <__assert_fail@plt+0x1cf90>
   2d0c8:	ldr	r2, [sp, #24]
   2d0cc:	ldr	r3, [sp, #28]
   2d0d0:	subs	r0, r0, r7
   2d0d4:	sbcs	r0, r1, r4
   2d0d8:	bge	2d124 <__assert_fail@plt+0x1b9c4>
   2d0dc:	mov	r0, #1
   2d0e0:	str	r0, [sp, #8]
   2d0e4:	b	2d138 <__assert_fail@plt+0x1b9d8>
   2d0e8:	mov	r0, #0
   2d0ec:	mov	r1, #-2147483648	; 0x80000000
   2d0f0:	mov	r2, r7
   2d0f4:	mov	r3, r4
   2d0f8:	bl	2e61c <__assert_fail@plt+0x1cebc>
   2d0fc:	ldr	r2, [sp, #24]
   2d100:	ldr	r3, [sp, #28]
   2d104:	subs	r0, r0, r2
   2d108:	sbcs	r0, r1, r3
   2d10c:	bge	2d124 <__assert_fail@plt+0x1b9c4>
   2d110:	mov	r0, #1
   2d114:	mov	r9, #0
   2d118:	mov	r8, #-2147483648	; 0x80000000
   2d11c:	str	r0, [sp, #8]
   2d120:	b	2d170 <__assert_fail@plt+0x1ba10>
   2d124:	umull	r9, r0, r7, r2
   2d128:	mla	r0, r7, r3, r0
   2d12c:	mla	r8, r4, r2, r0
   2d130:	cmp	r8, #0
   2d134:	bmi	2d170 <__assert_fail@plt+0x1ba10>
   2d138:	ldr	r3, [sp, #28]
   2d13c:	mvn	r0, #0
   2d140:	mvn	r1, #-2147483648	; 0x80000000
   2d144:	mvn	r4, #0
   2d148:	mvn	r7, #-2147483648	; 0x80000000
   2d14c:	bl	2e6f0 <__assert_fail@plt+0x1cf90>
   2d150:	ldr	r2, [sp, #24]
   2d154:	ldr	r3, [sp, #28]
   2d158:	subs	r0, r0, r9
   2d15c:	sbcs	r0, r1, r8
   2d160:	bge	2d1ac <__assert_fail@plt+0x1ba4c>
   2d164:	mov	r0, #1
   2d168:	str	r0, [sp, #8]
   2d16c:	b	2d1c0 <__assert_fail@plt+0x1ba60>
   2d170:	mov	r0, #0
   2d174:	mov	r1, #-2147483648	; 0x80000000
   2d178:	mov	r2, r9
   2d17c:	mov	r3, r8
   2d180:	bl	2e61c <__assert_fail@plt+0x1cebc>
   2d184:	ldr	r2, [sp, #24]
   2d188:	ldr	r3, [sp, #28]
   2d18c:	subs	r0, r0, r2
   2d190:	sbcs	r0, r1, r3
   2d194:	bge	2d1ac <__assert_fail@plt+0x1ba4c>
   2d198:	mov	r0, #1
   2d19c:	mov	r4, #0
   2d1a0:	mov	r7, #-2147483648	; 0x80000000
   2d1a4:	str	r0, [sp, #8]
   2d1a8:	b	2d1f8 <__assert_fail@plt+0x1ba98>
   2d1ac:	umull	r4, r0, r9, r2
   2d1b0:	mla	r0, r9, r3, r0
   2d1b4:	mla	r7, r8, r2, r0
   2d1b8:	cmp	r7, #0
   2d1bc:	bmi	2d1f8 <__assert_fail@plt+0x1ba98>
   2d1c0:	ldr	r3, [sp, #28]
   2d1c4:	mvn	r0, #0
   2d1c8:	mvn	r1, #-2147483648	; 0x80000000
   2d1cc:	mvn	r8, #0
   2d1d0:	mvn	r9, #-2147483648	; 0x80000000
   2d1d4:	bl	2e6f0 <__assert_fail@plt+0x1cf90>
   2d1d8:	ldr	r2, [sp, #24]
   2d1dc:	ldr	r3, [sp, #28]
   2d1e0:	subs	r0, r0, r4
   2d1e4:	sbcs	r0, r1, r7
   2d1e8:	bge	2d234 <__assert_fail@plt+0x1bad4>
   2d1ec:	mov	r0, #1
   2d1f0:	str	r0, [sp, #8]
   2d1f4:	b	2d248 <__assert_fail@plt+0x1bae8>
   2d1f8:	mov	r0, #0
   2d1fc:	mov	r1, #-2147483648	; 0x80000000
   2d200:	mov	r2, r4
   2d204:	mov	r3, r7
   2d208:	bl	2e61c <__assert_fail@plt+0x1cebc>
   2d20c:	ldr	r2, [sp, #24]
   2d210:	ldr	r3, [sp, #28]
   2d214:	subs	r0, r0, r2
   2d218:	sbcs	r0, r1, r3
   2d21c:	bge	2d234 <__assert_fail@plt+0x1bad4>
   2d220:	mov	r0, #1
   2d224:	mov	r8, #0
   2d228:	mov	r9, #-2147483648	; 0x80000000
   2d22c:	str	r0, [sp, #8]
   2d230:	b	2d284 <__assert_fail@plt+0x1bb24>
   2d234:	umull	r8, r0, r4, r2
   2d238:	mla	r0, r4, r3, r0
   2d23c:	mla	r9, r7, r2, r0
   2d240:	cmp	r9, #0
   2d244:	bmi	2d284 <__assert_fail@plt+0x1bb24>
   2d248:	ldr	r3, [sp, #28]
   2d24c:	mvn	r0, #0
   2d250:	mvn	r1, #-2147483648	; 0x80000000
   2d254:	mvn	r4, #0
   2d258:	mvn	r6, #-2147483648	; 0x80000000
   2d25c:	bl	2e6f0 <__assert_fail@plt+0x1cf90>
   2d260:	ldr	r2, [sp, #24]
   2d264:	ldr	r3, [sp, #28]
   2d268:	subs	r0, r0, r8
   2d26c:	sbcs	r0, r1, r9
   2d270:	bge	2d2c4 <__assert_fail@plt+0x1bb64>
   2d274:	ldr	r9, [sp, #12]
   2d278:	mov	r0, #1
   2d27c:	str	r0, [sp, #8]
   2d280:	b	2d2dc <__assert_fail@plt+0x1bb7c>
   2d284:	mov	r0, #0
   2d288:	mov	r1, #-2147483648	; 0x80000000
   2d28c:	mov	r2, r8
   2d290:	mov	r3, r9
   2d294:	bl	2e61c <__assert_fail@plt+0x1cebc>
   2d298:	ldr	r2, [sp, #24]
   2d29c:	ldr	r3, [sp, #28]
   2d2a0:	subs	r0, r0, r2
   2d2a4:	sbcs	r0, r1, r3
   2d2a8:	bge	2d2c4 <__assert_fail@plt+0x1bb64>
   2d2ac:	ldr	r9, [sp, #12]
   2d2b0:	mov	r0, #1
   2d2b4:	mov	r4, #0
   2d2b8:	mov	r6, #-2147483648	; 0x80000000
   2d2bc:	str	r0, [sp, #8]
   2d2c0:	b	2d328 <__assert_fail@plt+0x1bbc8>
   2d2c4:	umull	r4, r0, r8, r2
   2d2c8:	mla	r0, r8, r3, r0
   2d2cc:	mla	r6, r9, r2, r0
   2d2d0:	ldr	r9, [sp, #12]
   2d2d4:	cmp	r6, #0
   2d2d8:	bmi	2d328 <__assert_fail@plt+0x1bbc8>
   2d2dc:	ldr	r3, [sp, #28]
   2d2e0:	mvn	r0, #0
   2d2e4:	mvn	r1, #-2147483648	; 0x80000000
   2d2e8:	mov	r8, r6
   2d2ec:	mvn	r6, #0
   2d2f0:	mvn	r7, #-2147483648	; 0x80000000
   2d2f4:	bl	2e6f0 <__assert_fail@plt+0x1cf90>
   2d2f8:	ldr	r3, [sp, #24]
   2d2fc:	ldr	ip, [sp, #28]
   2d300:	subs	r0, r0, r4
   2d304:	mov	r2, #1
   2d308:	sbcs	r0, r1, r8
   2d30c:	blt	2d320 <__assert_fail@plt+0x1bbc0>
   2d310:	umull	r6, r0, r4, r3
   2d314:	mov	r2, #0
   2d318:	mla	r0, r4, ip, r0
   2d31c:	mla	r7, r8, r3, r0
   2d320:	ldr	r0, [sp, #8]
   2d324:	b	2c46c <__assert_fail@plt+0x1ad0c>
   2d328:	mov	r0, #0
   2d32c:	mov	r1, #-2147483648	; 0x80000000
   2d330:	mov	r2, r4
   2d334:	mov	r3, r6
   2d338:	bl	2e61c <__assert_fail@plt+0x1cebc>
   2d33c:	ldr	r3, [sp, #24]
   2d340:	ldr	ip, [sp, #28]
   2d344:	mov	r8, r6
   2d348:	mov	r2, #1
   2d34c:	mov	r6, #0
   2d350:	mov	r7, #-2147483648	; 0x80000000
   2d354:	subs	r0, r0, r3
   2d358:	sbcs	r0, r1, ip
   2d35c:	bge	2d310 <__assert_fail@plt+0x1bbb0>
   2d360:	b	2d320 <__assert_fail@plt+0x1bbc0>
   2d364:	movw	r0, #64265	; 0xfb09
   2d368:	movw	r1, #64303	; 0xfb2f
   2d36c:	movw	r3, #64319	; 0xfb3f
   2d370:	mov	r2, #85	; 0x55
   2d374:	movt	r0, #2
   2d378:	movt	r1, #2
   2d37c:	movt	r3, #2
   2d380:	bl	11760 <__assert_fail@plt>
   2d384:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2d388:	add	fp, sp, #28
   2d38c:	sub	sp, sp, #44	; 0x2c
   2d390:	cmp	r2, #37	; 0x25
   2d394:	bcs	2e018 <__assert_fail@plt+0x1c8b8>
   2d398:	ldr	sl, [fp, #8]
   2d39c:	mov	r6, r2
   2d3a0:	mov	r7, r1
   2d3a4:	mov	r4, r0
   2d3a8:	str	r3, [sp, #36]	; 0x24
   2d3ac:	bl	11640 <__errno_location@plt>
   2d3b0:	mov	r5, r0
   2d3b4:	mov	r0, #0
   2d3b8:	str	r0, [r5]
   2d3bc:	bl	11604 <__ctype_b_loc@plt>
   2d3c0:	ldr	r1, [r0]
   2d3c4:	mov	r2, r4
   2d3c8:	ldrb	r0, [r2], #1
   2d3cc:	add	r3, r1, r0, lsl #1
   2d3d0:	ldrb	r3, [r3, #1]
   2d3d4:	tst	r3, #32
   2d3d8:	bne	2d3c8 <__assert_fail@plt+0x1bc68>
   2d3dc:	cmp	r7, #0
   2d3e0:	sub	r9, fp, #32
   2d3e4:	mov	r8, #4
   2d3e8:	movne	r9, r7
   2d3ec:	cmp	r0, #45	; 0x2d
   2d3f0:	beq	2d7b0 <__assert_fail@plt+0x1c050>
   2d3f4:	mov	r0, r4
   2d3f8:	mov	r1, r9
   2d3fc:	mov	r2, r6
   2d400:	mov	r3, #0
   2d404:	bl	1149c <__strtoull_internal@plt>
   2d408:	mov	r7, r1
   2d40c:	ldr	r1, [r9]
   2d410:	cmp	r1, r4
   2d414:	beq	2d44c <__assert_fail@plt+0x1bcec>
   2d418:	mov	r6, r0
   2d41c:	ldr	r0, [r5]
   2d420:	cmp	r0, #0
   2d424:	beq	2d768 <__assert_fail@plt+0x1c008>
   2d428:	cmp	r0, #34	; 0x22
   2d42c:	bne	2d7b0 <__assert_fail@plt+0x1c050>
   2d430:	mov	r8, #1
   2d434:	cmp	sl, #0
   2d438:	beq	2e004 <__assert_fail@plt+0x1c8a4>
   2d43c:	ldrb	r4, [r1]
   2d440:	cmp	r4, #0
   2d444:	bne	2d490 <__assert_fail@plt+0x1bd30>
   2d448:	b	2e004 <__assert_fail@plt+0x1c8a4>
   2d44c:	cmp	sl, #0
   2d450:	beq	2d7b0 <__assert_fail@plt+0x1c050>
   2d454:	mov	r5, r1
   2d458:	ldrb	r1, [r4]
   2d45c:	cmp	r1, #0
   2d460:	beq	2d7b0 <__assert_fail@plt+0x1c050>
   2d464:	mov	r0, sl
   2d468:	bl	11634 <strchr@plt>
   2d46c:	cmp	r0, #0
   2d470:	beq	2d7b0 <__assert_fail@plt+0x1c050>
   2d474:	mov	r1, r5
   2d478:	mov	r8, #0
   2d47c:	mov	r6, #1
   2d480:	mov	r7, #0
   2d484:	ldrb	r4, [r1]
   2d488:	cmp	r4, #0
   2d48c:	beq	2e004 <__assert_fail@plt+0x1c8a4>
   2d490:	str	r1, [sp, #32]
   2d494:	mov	r0, sl
   2d498:	mov	r1, r4
   2d49c:	bl	11634 <strchr@plt>
   2d4a0:	cmp	r0, #0
   2d4a4:	beq	2d7a4 <__assert_fail@plt+0x1c044>
   2d4a8:	sub	r0, r4, #69	; 0x45
   2d4ac:	mov	r1, #1
   2d4b0:	mov	r3, #0
   2d4b4:	mov	r5, #1024	; 0x400
   2d4b8:	cmp	r0, #47	; 0x2f
   2d4bc:	str	r1, [sp, #28]
   2d4c0:	bhi	2d5c4 <__assert_fail@plt+0x1be64>
   2d4c4:	add	r1, pc, #0
   2d4c8:	ldr	pc, [r1, r0, lsl #2]
   2d4cc:	andeq	sp, r2, ip, lsl #11
   2d4d0:	andeq	sp, r2, r4, asr #11
   2d4d4:	andeq	sp, r2, ip, lsl #11
   2d4d8:	andeq	sp, r2, r4, asr #11
   2d4dc:	andeq	sp, r2, r4, asr #11
   2d4e0:	andeq	sp, r2, r4, asr #11
   2d4e4:	andeq	sp, r2, ip, lsl #11
   2d4e8:	andeq	sp, r2, r4, asr #11
   2d4ec:	andeq	sp, r2, ip, lsl #11
   2d4f0:	andeq	sp, r2, r4, asr #11
   2d4f4:	andeq	sp, r2, r4, asr #11
   2d4f8:	andeq	sp, r2, ip, lsl #11
   2d4fc:	andeq	sp, r2, r4, asr #11
   2d500:	andeq	sp, r2, r4, asr #11
   2d504:	andeq	sp, r2, r4, asr #11
   2d508:	andeq	sp, r2, ip, lsl #11
   2d50c:	andeq	sp, r2, r4, asr #11
   2d510:	andeq	sp, r2, r4, asr #11
   2d514:	andeq	sp, r2, r4, asr #11
   2d518:	andeq	sp, r2, r4, asr #11
   2d51c:	andeq	sp, r2, ip, lsl #11
   2d520:	andeq	sp, r2, ip, lsl #11
   2d524:	andeq	sp, r2, r4, asr #11
   2d528:	andeq	sp, r2, r4, asr #11
   2d52c:	andeq	sp, r2, r4, asr #11
   2d530:	andeq	sp, r2, r4, asr #11
   2d534:	andeq	sp, r2, r4, asr #11
   2d538:	andeq	sp, r2, r4, asr #11
   2d53c:	andeq	sp, r2, r4, asr #11
   2d540:	andeq	sp, r2, r4, asr #11
   2d544:	andeq	sp, r2, r4, asr #11
   2d548:	andeq	sp, r2, r4, asr #11
   2d54c:	andeq	sp, r2, r4, asr #11
   2d550:	andeq	sp, r2, r4, asr #11
   2d554:	andeq	sp, r2, ip, lsl #11
   2d558:	andeq	sp, r2, r4, asr #11
   2d55c:	andeq	sp, r2, r4, asr #11
   2d560:	andeq	sp, r2, r4, asr #11
   2d564:	andeq	sp, r2, ip, lsl #11
   2d568:	andeq	sp, r2, r4, asr #11
   2d56c:	andeq	sp, r2, ip, lsl #11
   2d570:	andeq	sp, r2, r4, asr #11
   2d574:	andeq	sp, r2, r4, asr #11
   2d578:	andeq	sp, r2, r4, asr #11
   2d57c:	andeq	sp, r2, r4, asr #11
   2d580:	andeq	sp, r2, r4, asr #11
   2d584:	andeq	sp, r2, r4, asr #11
   2d588:	andeq	sp, r2, ip, lsl #11
   2d58c:	mov	r0, sl
   2d590:	mov	r1, #48	; 0x30
   2d594:	bl	11634 <strchr@plt>
   2d598:	cmp	r0, #0
   2d59c:	beq	2d5c0 <__assert_fail@plt+0x1be60>
   2d5a0:	ldr	r1, [sp, #32]
   2d5a4:	ldrb	r0, [r1, #1]
   2d5a8:	cmp	r0, #66	; 0x42
   2d5ac:	cmpne	r0, #68	; 0x44
   2d5b0:	bne	2d778 <__assert_fail@plt+0x1c018>
   2d5b4:	mov	r5, #1000	; 0x3e8
   2d5b8:	mov	r0, #2
   2d5bc:	str	r0, [sp, #28]
   2d5c0:	mov	r3, #0
   2d5c4:	sub	r0, r4, #66	; 0x42
   2d5c8:	cmp	r0, #53	; 0x35
   2d5cc:	bhi	2d7a4 <__assert_fail@plt+0x1c044>
   2d5d0:	add	r1, pc, #0
   2d5d4:	ldr	pc, [r1, r0, lsl #2]
   2d5d8:	andeq	sp, r2, r4, lsl fp
   2d5dc:	andeq	sp, r2, r4, lsr #15
   2d5e0:	andeq	sp, r2, r4, lsr #15
   2d5e4:	andeq	sp, r2, ip, lsr fp
   2d5e8:	andeq	sp, r2, r4, lsr #15
   2d5ec:			; <UNDEFINED> instruction: 0x0002d6b0
   2d5f0:	andeq	sp, r2, r4, lsr #15
   2d5f4:	andeq	sp, r2, r4, lsr #15
   2d5f8:	andeq	sp, r2, r4, lsr #15
   2d5fc:			; <UNDEFINED> instruction: 0x0002d7bc
   2d600:	andeq	sp, r2, r4, lsr #15
   2d604:	andeq	sp, r2, r4, lsl #16
   2d608:	andeq	sp, r2, r4, lsr #15
   2d60c:	andeq	sp, r2, r4, lsr #15
   2d610:	muleq	r2, r0, ip
   2d614:	andeq	sp, r2, r4, lsr #15
   2d618:	andeq	sp, r2, r4, lsr #15
   2d61c:	andeq	sp, r2, r4, lsr #15
   2d620:	muleq	r2, r0, r8
   2d624:	andeq	sp, r2, r4, lsr #15
   2d628:	andeq	sp, r2, r4, lsr #15
   2d62c:	andeq	sp, r2, r4, lsr #15
   2d630:	andeq	sp, r2, r4, lsr #15
   2d634:			; <UNDEFINED> instruction: 0x0002ddb8
   2d638:	andeq	sp, r2, r8, ror r9
   2d63c:	andeq	sp, r2, r4, lsr #15
   2d640:	andeq	sp, r2, r4, lsr #15
   2d644:	andeq	sp, r2, r4, lsr #15
   2d648:	andeq	sp, r2, r4, lsr #15
   2d64c:	andeq	sp, r2, r4, lsr #15
   2d650:	andeq	sp, r2, r4, lsr #15
   2d654:	andeq	sp, r2, r4, lsr #15
   2d658:	andeq	sp, r2, ip, lsl #31
   2d65c:	andeq	sp, r2, r4, ror #31
   2d660:	andeq	sp, r2, r4, lsr #15
   2d664:	andeq	sp, r2, r4, lsr #15
   2d668:	andeq	sp, r2, r4, lsr #15
   2d66c:			; <UNDEFINED> instruction: 0x0002d6b0
   2d670:	andeq	sp, r2, r4, lsr #15
   2d674:	andeq	sp, r2, r4, lsr #15
   2d678:	andeq	sp, r2, r4, lsr #15
   2d67c:			; <UNDEFINED> instruction: 0x0002d7bc
   2d680:	andeq	sp, r2, r4, lsr #15
   2d684:	andeq	sp, r2, r4, lsl #16
   2d688:	andeq	sp, r2, r4, lsr #15
   2d68c:	andeq	sp, r2, r4, lsr #15
   2d690:	andeq	sp, r2, r4, lsr #15
   2d694:	andeq	sp, r2, r4, lsr #15
   2d698:	andeq	sp, r2, r4, lsr #15
   2d69c:	andeq	sp, r2, r4, lsr #15
   2d6a0:	muleq	r2, r0, r8
   2d6a4:	andeq	sp, r2, r4, lsr #15
   2d6a8:	andeq	sp, r2, r4, lsr #15
   2d6ac:	andeq	sp, r2, r0, asr #31
   2d6b0:	mvn	r0, #0
   2d6b4:	mvn	r1, #0
   2d6b8:	mov	r2, r5
   2d6bc:	mov	sl, r3
   2d6c0:	bl	2e6f0 <__assert_fail@plt+0x1cf90>
   2d6c4:	subs	r3, r0, r6
   2d6c8:	umull	r4, r2, r6, r5
   2d6cc:	mov	lr, #0
   2d6d0:	str	r1, [sp, #20]
   2d6d4:	sbcs	r3, r1, r7
   2d6d8:	movwcc	lr, #1
   2d6dc:	mla	ip, r6, sl, r2
   2d6e0:	mov	r2, r1
   2d6e4:	mov	r2, #0
   2d6e8:	cmp	lr, #0
   2d6ec:	mla	r7, r7, r5, ip
   2d6f0:	mvnne	r4, #0
   2d6f4:	mvnne	r7, #0
   2d6f8:	subs	r6, r0, r4
   2d6fc:	sbcs	r6, r1, r7
   2d700:	umull	r3, r6, r4, r5
   2d704:	movwcc	r2, #1
   2d708:	cmp	r2, #0
   2d70c:	mvnne	r3, #0
   2d710:	cmp	r2, #0
   2d714:	str	r6, [sp, #16]
   2d718:	umull	r6, ip, r3, r5
   2d71c:	mla	r1, r3, sl, ip
   2d720:	ldr	ip, [sp, #16]
   2d724:	str	r1, [sp, #12]
   2d728:	mla	r4, r4, sl, ip
   2d72c:	mla	r4, r7, r5, r4
   2d730:	mvnne	r4, #0
   2d734:	subs	r0, r0, r3
   2d738:	ldr	r0, [sp, #20]
   2d73c:	ldr	r7, [sp, #12]
   2d740:	sbcs	r0, r0, r4
   2d744:	mov	r0, #0
   2d748:	mla	r7, r4, r5, r7
   2d74c:	movwcc	r0, #1
   2d750:	cmp	r0, #0
   2d754:	mov	r1, r0
   2d758:	orr	r0, lr, r2
   2d75c:	mvnne	r7, #0
   2d760:	mvnne	r6, #0
   2d764:	b	2ddb0 <__assert_fail@plt+0x1c650>
   2d768:	mov	r8, r0
   2d76c:	cmp	sl, #0
   2d770:	bne	2d43c <__assert_fail@plt+0x1bcdc>
   2d774:	b	2e004 <__assert_fail@plt+0x1c8a4>
   2d778:	cmp	r0, #105	; 0x69
   2d77c:	mov	r3, #0
   2d780:	bne	2d5c4 <__assert_fail@plt+0x1be64>
   2d784:	ldrb	r0, [r1, #2]
   2d788:	mov	r1, #1
   2d78c:	cmp	r0, #66	; 0x42
   2d790:	movweq	r1, #3
   2d794:	str	r1, [sp, #28]
   2d798:	sub	r0, r4, #66	; 0x42
   2d79c:	cmp	r0, #53	; 0x35
   2d7a0:	bls	2d5d0 <__assert_fail@plt+0x1be70>
   2d7a4:	ldr	r0, [sp, #36]	; 0x24
   2d7a8:	orr	r8, r8, #2
   2d7ac:	strd	r6, [r0]
   2d7b0:	mov	r0, r8
   2d7b4:	sub	sp, fp, #28
   2d7b8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2d7bc:	mvn	r0, #0
   2d7c0:	mvn	r1, #0
   2d7c4:	mov	r2, r5
   2d7c8:	mov	r4, r3
   2d7cc:	bl	2e6f0 <__assert_fail@plt+0x1cf90>
   2d7d0:	subs	r0, r0, r6
   2d7d4:	mov	r2, #0
   2d7d8:	sbcs	r0, r1, r7
   2d7dc:	umull	r0, r1, r6, r5
   2d7e0:	movwcc	r2, #1
   2d7e4:	cmp	r2, #0
   2d7e8:	mla	r1, r6, r4, r1
   2d7ec:	mov	r3, r2
   2d7f0:	mvnne	r0, #0
   2d7f4:	mla	r7, r7, r5, r1
   2d7f8:	mvnne	r7, #0
   2d7fc:	mov	r6, r0
   2d800:	b	2dfe4 <__assert_fail@plt+0x1c884>
   2d804:	mvn	r0, #0
   2d808:	mvn	r1, #0
   2d80c:	mov	r2, r5
   2d810:	str	r3, [sp, #24]
   2d814:	bl	2e6f0 <__assert_fail@plt+0x1cf90>
   2d818:	subs	r3, r0, r6
   2d81c:	mov	ip, r0
   2d820:	umull	r4, r0, r6, r5
   2d824:	mov	sl, #0
   2d828:	sbcs	r3, r1, r7
   2d82c:	mov	r3, #0
   2d830:	movwcc	r3, #1
   2d834:	cmp	r3, #0
   2d838:	str	r0, [sp, #20]
   2d83c:	ldr	r0, [sp, #24]
   2d840:	mvnne	r4, #0
   2d844:	cmp	r3, #0
   2d848:	umull	lr, r2, r4, r5
   2d84c:	mla	r2, r4, r0, r2
   2d850:	str	r2, [sp, #16]
   2d854:	ldr	r2, [sp, #20]
   2d858:	mla	r6, r6, r0, r2
   2d85c:	ldr	r0, [sp, #16]
   2d860:	mla	r6, r7, r5, r6
   2d864:	mvnne	r6, #0
   2d868:	mla	r7, r6, r5, r0
   2d86c:	subs	r0, ip, r4
   2d870:	sbcs	r0, r1, r6
   2d874:	movwcc	sl, #1
   2d878:	cmp	sl, #0
   2d87c:	orr	r3, r3, sl
   2d880:	mvnne	lr, #0
   2d884:	mvnne	r7, #0
   2d888:	mov	r6, lr
   2d88c:	b	2dfe4 <__assert_fail@plt+0x1c884>
   2d890:	mvn	r0, #0
   2d894:	mvn	r1, #0
   2d898:	mov	r2, r5
   2d89c:	mov	sl, r3
   2d8a0:	bl	2e6f0 <__assert_fail@plt+0x1cf90>
   2d8a4:	subs	r3, r0, r6
   2d8a8:	mov	ip, r1
   2d8ac:	umull	r2, lr, r6, r5
   2d8b0:	str	r0, [sp, #20]
   2d8b4:	sbcs	r3, r1, r7
   2d8b8:	mov	r1, #0
   2d8bc:	str	ip, [sp, #16]
   2d8c0:	movwcc	r1, #1
   2d8c4:	mla	r6, r6, sl, lr
   2d8c8:	mov	lr, #0
   2d8cc:	cmp	r1, #0
   2d8d0:	mla	r7, r7, r5, r6
   2d8d4:	mvnne	r2, #0
   2d8d8:	cmp	r1, #0
   2d8dc:	umull	r3, r4, r2, r5
   2d8e0:	mvnne	r7, #0
   2d8e4:	mla	r4, r2, sl, r4
   2d8e8:	subs	r2, r0, r2
   2d8ec:	sbcs	r2, ip, r7
   2d8f0:	mla	r4, r7, r5, r4
   2d8f4:	mov	r2, #0
   2d8f8:	movwcc	lr, #1
   2d8fc:	cmp	lr, #0
   2d900:	mvnne	r3, #0
   2d904:	mvnne	r4, #0
   2d908:	subs	r7, r0, r3
   2d90c:	mov	r0, r5
   2d910:	sbcs	r7, ip, r4
   2d914:	umull	r5, r7, r3, r5
   2d918:	movwcc	r2, #1
   2d91c:	cmp	r2, #0
   2d920:	mla	r3, r3, sl, r7
   2d924:	mvnne	r5, #0
   2d928:	cmp	r2, #0
   2d92c:	mla	r3, r4, r0, r3
   2d930:	umull	r6, ip, r5, r0
   2d934:	mvnne	r3, #0
   2d938:	mla	ip, r5, sl, ip
   2d93c:	mla	r7, r3, r0, ip
   2d940:	ldr	r0, [sp, #20]
   2d944:	subs	r0, r0, r5
   2d948:	ldr	r0, [sp, #16]
   2d94c:	sbcs	r0, r0, r3
   2d950:	mov	r0, #0
   2d954:	movwcc	r0, #1
   2d958:	cmp	r0, #0
   2d95c:	mov	r3, r0
   2d960:	orr	r0, r1, lr
   2d964:	orr	r0, r0, r2
   2d968:	mvnne	r7, #0
   2d96c:	mvnne	r6, #0
   2d970:	orr	r3, r0, r3
   2d974:	b	2dfe4 <__assert_fail@plt+0x1c884>
   2d978:	mvn	r0, #0
   2d97c:	mvn	r1, #0
   2d980:	mov	r2, r5
   2d984:	mov	r4, r3
   2d988:	str	r3, [sp, #24]
   2d98c:	bl	2e6f0 <__assert_fail@plt+0x1cf90>
   2d990:	umull	r3, r2, r6, r5
   2d994:	mla	r2, r6, r4, r2
   2d998:	subs	r6, r0, r6
   2d99c:	sbcs	r6, r1, r7
   2d9a0:	mov	r6, #0
   2d9a4:	mla	r2, r7, r5, r2
   2d9a8:	mov	r7, #0
   2d9ac:	movwcc	r6, #1
   2d9b0:	cmp	r6, #0
   2d9b4:	str	r6, [sp, #20]
   2d9b8:	mvnne	r3, #0
   2d9bc:	mvnne	r2, #0
   2d9c0:	subs	r4, r0, r3
   2d9c4:	umull	r6, ip, r3, r5
   2d9c8:	sbcs	r4, r1, r2
   2d9cc:	ldr	r4, [sp, #24]
   2d9d0:	movwcc	r7, #1
   2d9d4:	cmp	r7, #0
   2d9d8:	mov	lr, r7
   2d9dc:	str	r7, [sp, #16]
   2d9e0:	mvnne	r6, #0
   2d9e4:	cmp	lr, #0
   2d9e8:	mov	lr, #0
   2d9ec:	umull	sl, r7, r6, r5
   2d9f0:	mla	r3, r3, r4, ip
   2d9f4:	mla	r2, r2, r5, r3
   2d9f8:	mvnne	r2, #0
   2d9fc:	subs	r3, r0, r6
   2da00:	mla	r7, r6, r4, r7
   2da04:	mov	r4, r0
   2da08:	mov	r0, #0
   2da0c:	mla	r7, r2, r5, r7
   2da10:	sbcs	r2, r1, r2
   2da14:	mov	r3, r4
   2da18:	movwcc	r0, #1
   2da1c:	str	r3, [sp, #4]
   2da20:	cmp	r0, #0
   2da24:	str	r0, [sp, #12]
   2da28:	mov	r0, r1
   2da2c:	mvnne	sl, #0
   2da30:	mvnne	r7, #0
   2da34:	str	r0, [sp, #8]
   2da38:	subs	r2, r4, sl
   2da3c:	ldr	r4, [sp, #24]
   2da40:	sbcs	r2, r1, r7
   2da44:	umull	r6, r2, sl, r5
   2da48:	movwcc	lr, #1
   2da4c:	cmp	lr, #0
   2da50:	mvnne	r6, #0
   2da54:	mla	r2, sl, r4, r2
   2da58:	cmp	lr, #0
   2da5c:	umull	r1, ip, r6, r5
   2da60:	mla	r2, r7, r5, r2
   2da64:	mvnne	r2, #0
   2da68:	mla	ip, r6, r4, ip
   2da6c:	subs	r6, r3, r6
   2da70:	mla	r7, r2, r5, ip
   2da74:	sbcs	r2, r0, r2
   2da78:	mov	ip, #0
   2da7c:	mov	r2, #0
   2da80:	movwcc	ip, #1
   2da84:	cmp	ip, #0
   2da88:	mvnne	r1, #0
   2da8c:	mvnne	r7, #0
   2da90:	subs	r6, r3, r1
   2da94:	ldr	r3, [sp, #24]
   2da98:	sbcs	r6, r0, r7
   2da9c:	umull	r0, sl, r1, r5
   2daa0:	movwcc	r2, #1
   2daa4:	cmp	r2, #0
   2daa8:	mvnne	r0, #0
   2daac:	mla	r1, r1, r3, sl
   2dab0:	cmp	r2, #0
   2dab4:	umull	r6, r4, r0, r5
   2dab8:	mla	r1, r7, r5, r1
   2dabc:	mvnne	r1, #0
   2dac0:	mla	r4, r0, r3, r4
   2dac4:	ldr	r3, [sp, #4]
   2dac8:	mla	r7, r1, r5, r4
   2dacc:	ldr	r5, [sp, #16]
   2dad0:	subs	r0, r3, r0
   2dad4:	ldr	r0, [sp, #8]
   2dad8:	sbcs	r0, r0, r1
   2dadc:	mov	r0, #0
   2dae0:	movwcc	r0, #1
   2dae4:	cmp	r0, #0
   2dae8:	mov	r1, r0
   2daec:	ldr	r0, [sp, #20]
   2daf0:	mvnne	r7, #0
   2daf4:	mvnne	r6, #0
   2daf8:	orr	r0, r0, r5
   2dafc:	ldr	r5, [sp, #12]
   2db00:	orr	r0, r0, r5
   2db04:	orr	r0, r0, lr
   2db08:	orr	r0, r0, ip
   2db0c:	orr	r0, r0, r2
   2db10:	b	2df80 <__assert_fail@plt+0x1c820>
   2db14:	mov	r1, #0
   2db18:	lsl	r2, r7, #10
   2db1c:	lsl	r0, r6, #10
   2db20:	lsr	r3, r7, #22
   2db24:	cmp	r1, r7, lsr #22
   2db28:	orr	r2, r2, r6, lsr #22
   2db2c:	mvnne	r0, #0
   2db30:	movwne	r3, #1
   2db34:	cmp	r1, r7, lsr #22
   2db38:	b	2dfb0 <__assert_fail@plt+0x1c850>
   2db3c:	mvn	r0, #0
   2db40:	mvn	r1, #0
   2db44:	mov	r2, r5
   2db48:	mov	sl, r3
   2db4c:	bl	2e6f0 <__assert_fail@plt+0x1cf90>
   2db50:	subs	r2, r0, r6
   2db54:	mov	ip, r0
   2db58:	mov	r0, #0
   2db5c:	sbcs	r2, r1, r7
   2db60:	umull	r4, r2, r6, r5
   2db64:	movwcc	r0, #1
   2db68:	cmp	r0, #0
   2db6c:	mla	r2, r6, sl, r2
   2db70:	str	r0, [sp, #20]
   2db74:	mvnne	r4, #0
   2db78:	cmp	r0, #0
   2db7c:	mla	r2, r7, r5, r2
   2db80:	mov	r0, #0
   2db84:	umull	lr, r3, r4, r5
   2db88:	mvnne	r2, #0
   2db8c:	mla	r3, r4, sl, r3
   2db90:	mla	r6, r2, r5, r3
   2db94:	subs	r3, ip, r4
   2db98:	mov	r3, r1
   2db9c:	sbcs	r2, r1, r2
   2dba0:	str	r3, [sp, #8]
   2dba4:	movwcc	r0, #1
   2dba8:	cmp	r0, #0
   2dbac:	str	r0, [sp, #16]
   2dbb0:	mov	r0, ip
   2dbb4:	mvnne	lr, #0
   2dbb8:	mvnne	r6, #0
   2dbbc:	str	r0, [sp, #12]
   2dbc0:	subs	r2, ip, lr
   2dbc4:	umull	r7, r4, lr, r5
   2dbc8:	sbcs	r2, r1, r6
   2dbcc:	mov	r2, #0
   2dbd0:	movwcc	r2, #1
   2dbd4:	mla	r4, lr, sl, r4
   2dbd8:	cmp	r2, #0
   2dbdc:	mla	r6, r6, r5, r4
   2dbe0:	mov	r4, #0
   2dbe4:	mvnne	r7, #0
   2dbe8:	cmp	r2, #0
   2dbec:	umull	r1, ip, r7, r5
   2dbf0:	mvnne	r6, #0
   2dbf4:	mla	ip, r7, sl, ip
   2dbf8:	subs	r7, r0, r7
   2dbfc:	sbcs	r7, r3, r6
   2dc00:	mla	lr, r6, r5, ip
   2dc04:	mov	ip, #0
   2dc08:	movwcc	ip, #1
   2dc0c:	cmp	ip, #0
   2dc10:	mvnne	r1, #0
   2dc14:	mvnne	lr, #0
   2dc18:	subs	r7, r0, r1
   2dc1c:	sbcs	r7, r3, lr
   2dc20:	umull	r0, r7, r1, r5
   2dc24:	movwcc	r4, #1
   2dc28:	cmp	r4, #0
   2dc2c:	mla	r1, r1, sl, r7
   2dc30:	mvnne	r0, #0
   2dc34:	cmp	r4, #0
   2dc38:	mla	r1, lr, r5, r1
   2dc3c:	umull	r6, r3, r0, r5
   2dc40:	mvnne	r1, #0
   2dc44:	mla	r3, r0, sl, r3
   2dc48:	mla	r7, r1, r5, r3
   2dc4c:	ldr	r3, [sp, #12]
   2dc50:	subs	r0, r3, r0
   2dc54:	ldr	r0, [sp, #8]
   2dc58:	ldr	r3, [sp, #16]
   2dc5c:	sbcs	r0, r0, r1
   2dc60:	mov	r0, #0
   2dc64:	movwcc	r0, #1
   2dc68:	cmp	r0, #0
   2dc6c:	mov	r1, r0
   2dc70:	ldr	r0, [sp, #20]
   2dc74:	mvnne	r7, #0
   2dc78:	mvnne	r6, #0
   2dc7c:	orr	r0, r0, r3
   2dc80:	orr	r0, r0, r2
   2dc84:	orr	r0, r0, ip
   2dc88:	orr	r0, r0, r4
   2dc8c:	b	2ddb0 <__assert_fail@plt+0x1c650>
   2dc90:	mvn	r0, #0
   2dc94:	mvn	r1, #0
   2dc98:	mov	r2, r5
   2dc9c:	mov	sl, r3
   2dca0:	bl	2e6f0 <__assert_fail@plt+0x1cf90>
   2dca4:	umull	r3, r2, r6, r5
   2dca8:	mov	lr, r1
   2dcac:	mov	r1, r0
   2dcb0:	mla	r2, r6, sl, r2
   2dcb4:	subs	r6, r0, r6
   2dcb8:	mov	r0, #0
   2dcbc:	sbcs	r6, lr, r7
   2dcc0:	mla	r2, r7, r5, r2
   2dcc4:	movwcc	r0, #1
   2dcc8:	cmp	r0, #0
   2dccc:	str	r0, [sp, #20]
   2dcd0:	mov	r0, r1
   2dcd4:	mvnne	r3, #0
   2dcd8:	mvnne	r2, #0
   2dcdc:	str	r0, [sp, #16]
   2dce0:	subs	r4, r1, r3
   2dce4:	umull	r7, ip, r3, r5
   2dce8:	sbcs	r4, lr, r2
   2dcec:	mov	r4, #0
   2dcf0:	movwcc	r4, #1
   2dcf4:	mla	r3, r3, sl, ip
   2dcf8:	mov	ip, #0
   2dcfc:	cmp	r4, #0
   2dd00:	mla	r2, r2, r5, r3
   2dd04:	mvnne	r7, #0
   2dd08:	cmp	r4, #0
   2dd0c:	umull	r1, r6, r7, r5
   2dd10:	mvnne	r2, #0
   2dd14:	mla	r6, r7, sl, r6
   2dd18:	mla	r3, r2, r5, r6
   2dd1c:	subs	r6, r0, r7
   2dd20:	sbcs	r2, lr, r2
   2dd24:	mov	r2, #0
   2dd28:	movwcc	ip, #1
   2dd2c:	cmp	ip, #0
   2dd30:	mvnne	r1, #0
   2dd34:	mvnne	r3, #0
   2dd38:	subs	r6, r0, r1
   2dd3c:	sbcs	r6, lr, r3
   2dd40:	umull	r0, r6, r1, r5
   2dd44:	movwcc	r2, #1
   2dd48:	cmp	r2, #0
   2dd4c:	mvnne	r0, #0
   2dd50:	cmp	r2, #0
   2dd54:	str	r6, [sp, #12]
   2dd58:	umull	r6, r7, r0, r5
   2dd5c:	mla	r7, r0, sl, r7
   2dd60:	str	r7, [sp, #8]
   2dd64:	ldr	r7, [sp, #12]
   2dd68:	mla	r1, r1, sl, r7
   2dd6c:	mla	r1, r3, r5, r1
   2dd70:	ldr	r3, [sp, #8]
   2dd74:	mvnne	r1, #0
   2dd78:	mla	r7, r1, r5, r3
   2dd7c:	ldr	r3, [sp, #16]
   2dd80:	subs	r0, r3, r0
   2dd84:	sbcs	r0, lr, r1
   2dd88:	mov	r0, #0
   2dd8c:	movwcc	r0, #1
   2dd90:	cmp	r0, #0
   2dd94:	mov	r1, r0
   2dd98:	ldr	r0, [sp, #20]
   2dd9c:	mvnne	r7, #0
   2dda0:	mvnne	r6, #0
   2dda4:	orr	r0, r0, r4
   2dda8:	orr	r0, r0, ip
   2ddac:	orr	r0, r0, r2
   2ddb0:	orr	r3, r0, r1
   2ddb4:	b	2dfe4 <__assert_fail@plt+0x1c884>
   2ddb8:	mvn	r0, #0
   2ddbc:	mvn	r1, #0
   2ddc0:	mov	r2, r5
   2ddc4:	mov	sl, r3
   2ddc8:	bl	2e6f0 <__assert_fail@plt+0x1cf90>
   2ddcc:	mov	ip, r1
   2ddd0:	subs	r1, r0, r6
   2ddd4:	umull	r3, lr, r6, r5
   2ddd8:	mov	r2, r5
   2dddc:	sbcs	r1, ip, r7
   2dde0:	mov	r1, #0
   2dde4:	str	ip, [sp, #4]
   2dde8:	movwcc	r1, #1
   2ddec:	mla	r6, r6, sl, lr
   2ddf0:	cmp	r1, #0
   2ddf4:	mla	r7, r7, r2, r6
   2ddf8:	str	r1, [sp, #20]
   2ddfc:	mvnne	r3, #0
   2de00:	cmp	r1, #0
   2de04:	mov	r1, r0
   2de08:	umull	r4, r5, r3, r5
   2de0c:	mvnne	r7, #0
   2de10:	mov	lr, r1
   2de14:	mla	r5, r3, sl, r5
   2de18:	subs	r3, r0, r3
   2de1c:	sbcs	r0, ip, r7
   2de20:	mov	r0, #0
   2de24:	mla	r5, r7, r2, r5
   2de28:	movwcc	r0, #1
   2de2c:	cmp	r0, #0
   2de30:	str	r0, [sp, #16]
   2de34:	mvnne	r4, #0
   2de38:	mvnne	r5, #0
   2de3c:	subs	r0, r1, r4
   2de40:	mov	r1, #0
   2de44:	sbcs	r0, ip, r5
   2de48:	umull	r3, r0, r4, r2
   2de4c:	movwcc	r1, #1
   2de50:	cmp	r1, #0
   2de54:	mla	r0, r4, sl, r0
   2de58:	mov	r4, lr
   2de5c:	str	r1, [sp, #12]
   2de60:	mvnne	r3, #0
   2de64:	cmp	r1, #0
   2de68:	mla	r0, r5, r2, r0
   2de6c:	str	r4, [sp]
   2de70:	umull	r7, r6, r3, r2
   2de74:	mvnne	r0, #0
   2de78:	mla	r6, r3, sl, r6
   2de7c:	subs	r3, lr, r3
   2de80:	mov	r3, #0
   2de84:	mla	r5, r0, r2, r6
   2de88:	sbcs	r0, ip, r0
   2de8c:	mov	r0, #0
   2de90:	movwcc	r0, #1
   2de94:	cmp	r0, #0
   2de98:	str	r0, [sp, #8]
   2de9c:	mvnne	r7, #0
   2dea0:	mvnne	r5, #0
   2dea4:	subs	r0, lr, r7
   2dea8:	sbcs	r0, ip, r5
   2deac:	umull	r6, r0, r7, r2
   2deb0:	movwcc	r3, #1
   2deb4:	cmp	r3, #0
   2deb8:	mla	r7, r7, sl, r0
   2debc:	mov	r0, ip
   2dec0:	mvnne	r6, #0
   2dec4:	cmp	r3, #0
   2dec8:	mla	r7, r5, r2, r7
   2decc:	mov	r5, #0
   2ded0:	umull	r1, lr, r6, r2
   2ded4:	mvnne	r7, #0
   2ded8:	mla	lr, r6, sl, lr
   2dedc:	subs	r6, r4, r6
   2dee0:	mla	lr, r7, r2, lr
   2dee4:	sbcs	r7, ip, r7
   2dee8:	mov	ip, #0
   2deec:	movwcc	ip, #1
   2def0:	cmp	ip, #0
   2def4:	mvnne	r1, #0
   2def8:	mvnne	lr, #0
   2defc:	subs	r7, r4, r1
   2df00:	sbcs	r7, r0, lr
   2df04:	umull	r0, r7, r1, r2
   2df08:	movwcc	r5, #1
   2df0c:	cmp	r5, #0
   2df10:	mla	r1, r1, sl, r7
   2df14:	mvnne	r0, #0
   2df18:	cmp	r5, #0
   2df1c:	mla	r1, lr, r2, r1
   2df20:	umull	r6, r4, r0, r2
   2df24:	mvnne	r1, #0
   2df28:	mla	r4, r0, sl, r4
   2df2c:	mla	r7, r1, r2, r4
   2df30:	ldr	r2, [sp]
   2df34:	subs	r0, r2, r0
   2df38:	ldr	r0, [sp, #4]
   2df3c:	ldr	r2, [sp, #16]
   2df40:	sbcs	r0, r0, r1
   2df44:	mov	r0, #0
   2df48:	movwcc	r0, #1
   2df4c:	cmp	r0, #0
   2df50:	mov	r1, r0
   2df54:	ldr	r0, [sp, #20]
   2df58:	mvnne	r7, #0
   2df5c:	mvnne	r6, #0
   2df60:	orr	r0, r0, r2
   2df64:	ldr	r2, [sp, #12]
   2df68:	orr	r0, r0, r2
   2df6c:	ldr	r2, [sp, #8]
   2df70:	orr	r0, r0, r2
   2df74:	orr	r0, r0, r3
   2df78:	orr	r0, r0, ip
   2df7c:	orr	r0, r0, r5
   2df80:	orr	r0, r0, r1
   2df84:	and	r3, r0, #1
   2df88:	b	2dfe4 <__assert_fail@plt+0x1c884>
   2df8c:	mov	r1, #0
   2df90:	lsl	r2, r7, #9
   2df94:	lsl	r0, r6, #9
   2df98:	lsr	r3, r7, #23
   2df9c:	cmp	r1, r7, lsr #23
   2dfa0:	orr	r2, r2, r6, lsr #23
   2dfa4:	mvnne	r0, #0
   2dfa8:	movwne	r3, #1
   2dfac:	cmp	r1, r7, lsr #23
   2dfb0:	mvnne	r2, #0
   2dfb4:	mov	r6, r0
   2dfb8:	mov	r7, r2
   2dfbc:	b	2dfe4 <__assert_fail@plt+0x1c884>
   2dfc0:	lsl	r1, r7, #1
   2dfc4:	cmp	r7, #0
   2dfc8:	lsl	r0, r6, #1
   2dfcc:	lsr	r3, r7, #31
   2dfd0:	orr	r1, r1, r6, lsr #31
   2dfd4:	mvnmi	r0, #0
   2dfd8:	mvnmi	r1, #0
   2dfdc:	mov	r6, r0
   2dfe0:	mov	r7, r1
   2dfe4:	ldr	r1, [sp, #32]
   2dfe8:	ldr	r2, [sp, #28]
   2dfec:	orr	r8, r3, r8
   2dff0:	add	r0, r1, r2
   2dff4:	str	r0, [r9]
   2dff8:	ldrb	r0, [r1, r2]
   2dffc:	cmp	r0, #0
   2e000:	orrne	r8, r8, #2
   2e004:	ldr	r0, [sp, #36]	; 0x24
   2e008:	strd	r6, [r0]
   2e00c:	mov	r0, r8
   2e010:	sub	sp, fp, #28
   2e014:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2e018:	movw	r0, #64265	; 0xfb09
   2e01c:	movw	r1, #64303	; 0xfb2f
   2e020:	movw	r3, #64397	; 0xfb8d
   2e024:	mov	r2, #85	; 0x55
   2e028:	movt	r0, #2
   2e02c:	movt	r1, #2
   2e030:	movt	r3, #2
   2e034:	bl	11760 <__assert_fail@plt>
   2e038:	clz	r2, r1
   2e03c:	clz	r3, r0
   2e040:	lsr	r2, r2, #5
   2e044:	lsr	r3, r3, #5
   2e048:	orrs	r2, r3, r2
   2e04c:	movwne	r1, #1
   2e050:	movwne	r0, #1
   2e054:	cmp	r1, #0
   2e058:	beq	2e088 <__assert_fail@plt+0x1c928>
   2e05c:	mvn	r2, #-2147483648	; 0x80000000
   2e060:	udiv	r2, r2, r1
   2e064:	cmp	r2, r0
   2e068:	bcs	2e088 <__assert_fail@plt+0x1c928>
   2e06c:	push	{fp, lr}
   2e070:	mov	fp, sp
   2e074:	bl	11640 <__errno_location@plt>
   2e078:	mov	r1, #12
   2e07c:	str	r1, [r0]
   2e080:	mov	r0, #0
   2e084:	pop	{fp, pc}
   2e088:	b	113d0 <calloc@plt>
   2e08c:	cmp	r0, #0
   2e090:	movweq	r0, #1
   2e094:	cmn	r0, #1
   2e098:	ble	2e0a0 <__assert_fail@plt+0x1c940>
   2e09c:	b	115a4 <malloc@plt>
   2e0a0:	push	{fp, lr}
   2e0a4:	mov	fp, sp
   2e0a8:	bl	11640 <__errno_location@plt>
   2e0ac:	mov	r1, #12
   2e0b0:	str	r1, [r0]
   2e0b4:	mov	r0, #0
   2e0b8:	pop	{fp, pc}
   2e0bc:	push	{fp, lr}
   2e0c0:	mov	fp, sp
   2e0c4:	cmp	r0, #0
   2e0c8:	beq	2e0e4 <__assert_fail@plt+0x1c984>
   2e0cc:	cmp	r1, #0
   2e0d0:	beq	2e0f0 <__assert_fail@plt+0x1c990>
   2e0d4:	cmn	r1, #1
   2e0d8:	ble	2e0fc <__assert_fail@plt+0x1c99c>
   2e0dc:	pop	{fp, lr}
   2e0e0:	b	114fc <realloc@plt>
   2e0e4:	mov	r0, r1
   2e0e8:	pop	{fp, lr}
   2e0ec:	b	2e08c <__assert_fail@plt+0x1c92c>
   2e0f0:	bl	144c0 <__assert_fail@plt+0x2d60>
   2e0f4:	mov	r0, #0
   2e0f8:	pop	{fp, pc}
   2e0fc:	bl	11640 <__errno_location@plt>
   2e100:	mov	r1, #12
   2e104:	str	r1, [r0]
   2e108:	mov	r0, #0
   2e10c:	pop	{fp, pc}
   2e110:	push	{r4, r5, r6, sl, fp, lr}
   2e114:	add	fp, sp, #16
   2e118:	mov	r4, r0
   2e11c:	bl	11574 <__fpending@plt>
   2e120:	ldr	r6, [r4]
   2e124:	mov	r5, r0
   2e128:	mov	r0, r4
   2e12c:	bl	142b0 <__assert_fail@plt+0x2b50>
   2e130:	tst	r6, #32
   2e134:	bne	2e16c <__assert_fail@plt+0x1ca0c>
   2e138:	cmp	r0, #0
   2e13c:	mov	r4, r0
   2e140:	mvnne	r4, #0
   2e144:	cmp	r5, #0
   2e148:	bne	2e178 <__assert_fail@plt+0x1ca18>
   2e14c:	cmp	r0, #0
   2e150:	beq	2e178 <__assert_fail@plt+0x1ca18>
   2e154:	bl	11640 <__errno_location@plt>
   2e158:	ldr	r0, [r0]
   2e15c:	subs	r4, r0, #9
   2e160:	mvnne	r4, #0
   2e164:	mov	r0, r4
   2e168:	pop	{r4, r5, r6, sl, fp, pc}
   2e16c:	mvn	r4, #0
   2e170:	cmp	r0, #0
   2e174:	beq	2e180 <__assert_fail@plt+0x1ca20>
   2e178:	mov	r0, r4
   2e17c:	pop	{r4, r5, r6, sl, fp, pc}
   2e180:	bl	11640 <__errno_location@plt>
   2e184:	mov	r1, #0
   2e188:	str	r1, [r0]
   2e18c:	mov	r0, r4
   2e190:	pop	{r4, r5, r6, sl, fp, pc}
   2e194:	push	{r4, r5, r6, r7, fp, lr}
   2e198:	add	fp, sp, #16
   2e19c:	mov	r4, r0
   2e1a0:	ldr	r0, [r0, #4]
   2e1a4:	mov	r5, r1
   2e1a8:	cmp	r0, r1
   2e1ac:	bcs	2e1e0 <__assert_fail@plt+0x1ca80>
   2e1b0:	mov	r6, r3
   2e1b4:	cmp	r3, #0
   2e1b8:	beq	2e1ec <__assert_fail@plt+0x1ca8c>
   2e1bc:	mvn	r0, #0
   2e1c0:	udiv	r0, r0, r6
   2e1c4:	cmp	r0, r5
   2e1c8:	bcs	2e1ec <__assert_fail@plt+0x1ca8c>
   2e1cc:	bl	11640 <__errno_location@plt>
   2e1d0:	mov	r1, #12
   2e1d4:	str	r1, [r0]
   2e1d8:	mov	r0, #0
   2e1dc:	pop	{r4, r5, r6, r7, fp, pc}
   2e1e0:	mov	r0, #1
   2e1e4:	str	r5, [r4]
   2e1e8:	pop	{r4, r5, r6, r7, fp, pc}
   2e1ec:	ldr	r0, [r4, #8]
   2e1f0:	mul	r1, r6, r5
   2e1f4:	cmp	r0, r2
   2e1f8:	beq	2e210 <__assert_fail@plt+0x1cab0>
   2e1fc:	bl	2e0bc <__assert_fail@plt+0x1c95c>
   2e200:	mov	r7, r0
   2e204:	cmp	r0, #0
   2e208:	bne	2e240 <__assert_fail@plt+0x1cae0>
   2e20c:	b	2e250 <__assert_fail@plt+0x1caf0>
   2e210:	mov	r0, r1
   2e214:	bl	2e08c <__assert_fail@plt+0x1c92c>
   2e218:	cmp	r0, #0
   2e21c:	beq	2e250 <__assert_fail@plt+0x1caf0>
   2e220:	ldr	r1, [r4, #8]
   2e224:	mov	r7, r0
   2e228:	cmp	r1, #0
   2e22c:	beq	2e240 <__assert_fail@plt+0x1cae0>
   2e230:	ldr	r0, [r4]
   2e234:	mul	r2, r0, r6
   2e238:	mov	r0, r7
   2e23c:	bl	11484 <memcpy@plt>
   2e240:	mov	r0, #1
   2e244:	str	r5, [r4]
   2e248:	stmib	r4, {r5, r7}
   2e24c:	pop	{r4, r5, r6, r7, fp, pc}
   2e250:	mov	r0, #0
   2e254:	pop	{r4, r5, r6, r7, fp, pc}
   2e258:	sub	sp, sp, #8
   2e25c:	push	{r4, r5, r6, r7, fp, lr}
   2e260:	add	fp, sp, #16
   2e264:	sub	sp, sp, #8
   2e268:	mov	r5, r0
   2e26c:	add	r0, fp, #8
   2e270:	cmp	r1, #11
   2e274:	str	r2, [fp, #8]
   2e278:	str	r3, [fp, #12]
   2e27c:	str	r0, [sp, #4]
   2e280:	bhi	2e2bc <__assert_fail@plt+0x1cb5c>
   2e284:	mov	r0, #1
   2e288:	movw	r2, #1300	; 0x514
   2e28c:	tst	r2, r0, lsl r1
   2e290:	bne	2e37c <__assert_fail@plt+0x1cc1c>
   2e294:	movw	r2, #2570	; 0xa0a
   2e298:	tst	r2, r0, lsl r1
   2e29c:	bne	2e2e4 <__assert_fail@plt+0x1cb84>
   2e2a0:	cmp	r1, #0
   2e2a4:	bne	2e2bc <__assert_fail@plt+0x1cb5c>
   2e2a8:	ldr	r0, [sp, #4]
   2e2ac:	add	r1, r0, #4
   2e2b0:	str	r1, [sp, #4]
   2e2b4:	mov	r1, #0
   2e2b8:	b	2e388 <__assert_fail@plt+0x1cc28>
   2e2bc:	sub	r0, r1, #1024	; 0x400
   2e2c0:	cmp	r0, #10
   2e2c4:	bhi	2e37c <__assert_fail@plt+0x1cc1c>
   2e2c8:	mov	r2, #1
   2e2cc:	movw	r3, #645	; 0x285
   2e2d0:	tst	r3, r2, lsl r0
   2e2d4:	bne	2e37c <__assert_fail@plt+0x1cc1c>
   2e2d8:	movw	r3, #1282	; 0x502
   2e2dc:	tst	r3, r2, lsl r0
   2e2e0:	beq	2e2f0 <__assert_fail@plt+0x1cb90>
   2e2e4:	mov	r0, r5
   2e2e8:	bl	116c4 <fcntl64@plt>
   2e2ec:	b	2e394 <__assert_fail@plt+0x1cc34>
   2e2f0:	cmp	r0, #6
   2e2f4:	bne	2e37c <__assert_fail@plt+0x1cc1c>
   2e2f8:	ldr	r0, [sp, #4]
   2e2fc:	movw	r7, #1000	; 0x3e8
   2e300:	movt	r7, #4
   2e304:	add	r1, r0, #4
   2e308:	str	r1, [sp, #4]
   2e30c:	ldr	r6, [r0]
   2e310:	ldr	r0, [r7]
   2e314:	cmp	r0, #0
   2e318:	bmi	2e3b8 <__assert_fail@plt+0x1cc58>
   2e31c:	mov	r0, r5
   2e320:	movw	r1, #1030	; 0x406
   2e324:	mov	r2, r6
   2e328:	bl	116c4 <fcntl64@plt>
   2e32c:	mov	r4, r0
   2e330:	cmn	r0, #1
   2e334:	bgt	2e3ac <__assert_fail@plt+0x1cc4c>
   2e338:	bl	11640 <__errno_location@plt>
   2e33c:	ldr	r0, [r0]
   2e340:	cmp	r0, #22
   2e344:	bne	2e3ac <__assert_fail@plt+0x1cc4c>
   2e348:	mov	r0, r5
   2e34c:	mov	r1, #0
   2e350:	mov	r2, r6
   2e354:	bl	116c4 <fcntl64@plt>
   2e358:	mov	r4, r0
   2e35c:	cmp	r0, #0
   2e360:	bmi	2e398 <__assert_fail@plt+0x1cc38>
   2e364:	mvn	r0, #0
   2e368:	str	r0, [r7]
   2e36c:	mov	r0, #1
   2e370:	cmp	r0, #0
   2e374:	bne	2e3e4 <__assert_fail@plt+0x1cc84>
   2e378:	b	2e398 <__assert_fail@plt+0x1cc38>
   2e37c:	ldr	r0, [sp, #4]
   2e380:	add	r2, r0, #4
   2e384:	str	r2, [sp, #4]
   2e388:	ldr	r2, [r0]
   2e38c:	mov	r0, r5
   2e390:	bl	116c4 <fcntl64@plt>
   2e394:	mov	r4, r0
   2e398:	mov	r0, r4
   2e39c:	sub	sp, fp, #16
   2e3a0:	pop	{r4, r5, r6, r7, fp, lr}
   2e3a4:	add	sp, sp, #8
   2e3a8:	bx	lr
   2e3ac:	mov	r0, #1
   2e3b0:	str	r0, [r7]
   2e3b4:	b	2e398 <__assert_fail@plt+0x1cc38>
   2e3b8:	mov	r0, r5
   2e3bc:	mov	r1, #0
   2e3c0:	mov	r2, r6
   2e3c4:	bl	116c4 <fcntl64@plt>
   2e3c8:	mov	r4, r0
   2e3cc:	ldr	r0, [r7]
   2e3d0:	add	r0, r0, #1
   2e3d4:	clz	r0, r0
   2e3d8:	lsr	r0, r0, #5
   2e3dc:	cmp	r0, #0
   2e3e0:	beq	2e398 <__assert_fail@plt+0x1cc38>
   2e3e4:	cmp	r4, #0
   2e3e8:	bmi	2e398 <__assert_fail@plt+0x1cc38>
   2e3ec:	mov	r0, r4
   2e3f0:	mov	r1, #1
   2e3f4:	bl	116c4 <fcntl64@plt>
   2e3f8:	cmp	r0, #0
   2e3fc:	bmi	2e418 <__assert_fail@plt+0x1ccb8>
   2e400:	orr	r2, r0, #1
   2e404:	mov	r0, r4
   2e408:	mov	r1, #2
   2e40c:	bl	116c4 <fcntl64@plt>
   2e410:	cmn	r0, #1
   2e414:	bne	2e398 <__assert_fail@plt+0x1cc38>
   2e418:	bl	11640 <__errno_location@plt>
   2e41c:	ldr	r6, [r0]
   2e420:	mov	r5, r0
   2e424:	mov	r0, r4
   2e428:	bl	11748 <close@plt>
   2e42c:	str	r6, [r5]
   2e430:	mvn	r4, #0
   2e434:	b	2e398 <__assert_fail@plt+0x1cc38>
   2e438:	push	{fp, lr}
   2e43c:	mov	fp, sp
   2e440:	mov	r0, #14
   2e444:	bl	116f4 <nl_langinfo@plt>
   2e448:	movw	r1, #61035	; 0xee6b
   2e44c:	cmp	r0, #0
   2e450:	movt	r1, #2
   2e454:	movne	r1, r0
   2e458:	movw	r0, #64476	; 0xfbdc
   2e45c:	ldrb	r2, [r1]
   2e460:	movt	r0, #2
   2e464:	cmp	r2, #0
   2e468:	movne	r0, r1
   2e46c:	pop	{fp, pc}
   2e470:	push	{r4, r5, r6, r7, fp, lr}
   2e474:	add	fp, sp, #16
   2e478:	sub	sp, sp, #8
   2e47c:	cmp	r0, #0
   2e480:	add	r5, sp, #4
   2e484:	mov	r7, r2
   2e488:	mov	r4, r1
   2e48c:	movne	r5, r0
   2e490:	mov	r0, r5
   2e494:	bl	11580 <mbrtowc@plt>
   2e498:	mov	r6, r0
   2e49c:	cmp	r7, #0
   2e4a0:	beq	2e4c8 <__assert_fail@plt+0x1cd68>
   2e4a4:	cmn	r6, #2
   2e4a8:	bcc	2e4c8 <__assert_fail@plt+0x1cd68>
   2e4ac:	mov	r0, #0
   2e4b0:	bl	2e510 <__assert_fail@plt+0x1cdb0>
   2e4b4:	cmp	r0, #0
   2e4b8:	bne	2e4c8 <__assert_fail@plt+0x1cd68>
   2e4bc:	ldrb	r0, [r4]
   2e4c0:	mov	r6, #1
   2e4c4:	str	r0, [r5]
   2e4c8:	mov	r0, r6
   2e4cc:	sub	sp, fp, #16
   2e4d0:	pop	{r4, r5, r6, r7, fp, pc}
   2e4d4:	cmp	r2, #0
   2e4d8:	beq	2e508 <__assert_fail@plt+0x1cda8>
   2e4dc:	mvn	r3, #0
   2e4e0:	udiv	r3, r3, r2
   2e4e4:	cmp	r3, r1
   2e4e8:	bcs	2e508 <__assert_fail@plt+0x1cda8>
   2e4ec:	push	{fp, lr}
   2e4f0:	mov	fp, sp
   2e4f4:	bl	11640 <__errno_location@plt>
   2e4f8:	mov	r1, #12
   2e4fc:	str	r1, [r0]
   2e500:	mov	r0, #0
   2e504:	pop	{fp, pc}
   2e508:	mul	r1, r2, r1
   2e50c:	b	2e0bc <__assert_fail@plt+0x1c95c>
   2e510:	push	{r4, sl, fp, lr}
   2e514:	add	fp, sp, #8
   2e518:	sub	sp, sp, #264	; 0x108
   2e51c:	add	r1, sp, #7
   2e520:	movw	r2, #257	; 0x101
   2e524:	bl	2e57c <__assert_fail@plt+0x1ce1c>
   2e528:	mov	r4, #0
   2e52c:	cmp	r0, #0
   2e530:	bne	2e570 <__assert_fail@plt+0x1ce10>
   2e534:	movw	r1, #64482	; 0xfbe2
   2e538:	add	r0, sp, #7
   2e53c:	mov	r2, #2
   2e540:	movt	r1, #2
   2e544:	bl	1161c <bcmp@plt>
   2e548:	cmp	r0, #0
   2e54c:	beq	2e570 <__assert_fail@plt+0x1ce10>
   2e550:	movw	r1, #64484	; 0xfbe4
   2e554:	add	r0, sp, #7
   2e558:	mov	r2, #6
   2e55c:	movt	r1, #2
   2e560:	bl	1161c <bcmp@plt>
   2e564:	cmp	r0, #0
   2e568:	mov	r4, r0
   2e56c:	movwne	r4, #1
   2e570:	mov	r0, r4
   2e574:	sub	sp, fp, #8
   2e578:	pop	{r4, sl, fp, pc}
   2e57c:	push	{r4, r5, r6, r7, fp, lr}
   2e580:	add	fp, sp, #16
   2e584:	mov	r4, r1
   2e588:	mov	r1, #0
   2e58c:	mov	r6, r2
   2e590:	bl	116d0 <setlocale@plt>
   2e594:	cmp	r0, #0
   2e598:	beq	2e5c8 <__assert_fail@plt+0x1ce68>
   2e59c:	mov	r7, r0
   2e5a0:	bl	11628 <strlen@plt>
   2e5a4:	cmp	r0, r6
   2e5a8:	bcs	2e5e4 <__assert_fail@plt+0x1ce84>
   2e5ac:	add	r2, r0, #1
   2e5b0:	mov	r0, r4
   2e5b4:	mov	r1, r7
   2e5b8:	bl	11484 <memcpy@plt>
   2e5bc:	mov	r5, #0
   2e5c0:	mov	r0, r5
   2e5c4:	pop	{r4, r5, r6, r7, fp, pc}
   2e5c8:	mov	r5, #22
   2e5cc:	cmp	r6, #0
   2e5d0:	beq	2e60c <__assert_fail@plt+0x1ceac>
   2e5d4:	mov	r0, #0
   2e5d8:	strb	r0, [r4]
   2e5dc:	mov	r0, r5
   2e5e0:	pop	{r4, r5, r6, r7, fp, pc}
   2e5e4:	mov	r5, #34	; 0x22
   2e5e8:	cmp	r6, #0
   2e5ec:	beq	2e60c <__assert_fail@plt+0x1ceac>
   2e5f0:	sub	r6, r6, #1
   2e5f4:	mov	r0, r4
   2e5f8:	mov	r1, r7
   2e5fc:	mov	r2, r6
   2e600:	bl	11484 <memcpy@plt>
   2e604:	mov	r0, #0
   2e608:	strb	r0, [r4, r6]
   2e60c:	mov	r0, r5
   2e610:	pop	{r4, r5, r6, r7, fp, pc}
   2e614:	mov	r1, #0
   2e618:	b	116d0 <setlocale@plt>
   2e61c:	cmp	r3, #0
   2e620:	cmpeq	r2, #0
   2e624:	bne	2e648 <__assert_fail@plt+0x1cee8>
   2e628:	cmp	r1, #0
   2e62c:	movlt	r1, #-2147483648	; 0x80000000
   2e630:	movlt	r0, #0
   2e634:	blt	2e644 <__assert_fail@plt+0x1cee4>
   2e638:	cmpeq	r0, #0
   2e63c:	mvnne	r1, #-2147483648	; 0x80000000
   2e640:	mvnne	r0, #0
   2e644:	b	2e72c <__assert_fail@plt+0x1cfcc>
   2e648:	sub	sp, sp, #8
   2e64c:	push	{sp, lr}
   2e650:	cmp	r1, #0
   2e654:	blt	2e674 <__assert_fail@plt+0x1cf14>
   2e658:	cmp	r3, #0
   2e65c:	blt	2e6a8 <__assert_fail@plt+0x1cf48>
   2e660:	bl	2e73c <__assert_fail@plt+0x1cfdc>
   2e664:	ldr	lr, [sp, #4]
   2e668:	add	sp, sp, #8
   2e66c:	pop	{r2, r3}
   2e670:	bx	lr
   2e674:	rsbs	r0, r0, #0
   2e678:	sbc	r1, r1, r1, lsl #1
   2e67c:	cmp	r3, #0
   2e680:	blt	2e6cc <__assert_fail@plt+0x1cf6c>
   2e684:	bl	2e73c <__assert_fail@plt+0x1cfdc>
   2e688:	ldr	lr, [sp, #4]
   2e68c:	add	sp, sp, #8
   2e690:	pop	{r2, r3}
   2e694:	rsbs	r0, r0, #0
   2e698:	sbc	r1, r1, r1, lsl #1
   2e69c:	rsbs	r2, r2, #0
   2e6a0:	sbc	r3, r3, r3, lsl #1
   2e6a4:	bx	lr
   2e6a8:	rsbs	r2, r2, #0
   2e6ac:	sbc	r3, r3, r3, lsl #1
   2e6b0:	bl	2e73c <__assert_fail@plt+0x1cfdc>
   2e6b4:	ldr	lr, [sp, #4]
   2e6b8:	add	sp, sp, #8
   2e6bc:	pop	{r2, r3}
   2e6c0:	rsbs	r0, r0, #0
   2e6c4:	sbc	r1, r1, r1, lsl #1
   2e6c8:	bx	lr
   2e6cc:	rsbs	r2, r2, #0
   2e6d0:	sbc	r3, r3, r3, lsl #1
   2e6d4:	bl	2e73c <__assert_fail@plt+0x1cfdc>
   2e6d8:	ldr	lr, [sp, #4]
   2e6dc:	add	sp, sp, #8
   2e6e0:	pop	{r2, r3}
   2e6e4:	rsbs	r2, r2, #0
   2e6e8:	sbc	r3, r3, r3, lsl #1
   2e6ec:	bx	lr
   2e6f0:	cmp	r3, #0
   2e6f4:	cmpeq	r2, #0
   2e6f8:	bne	2e710 <__assert_fail@plt+0x1cfb0>
   2e6fc:	cmp	r1, #0
   2e700:	cmpeq	r0, #0
   2e704:	mvnne	r1, #0
   2e708:	mvnne	r0, #0
   2e70c:	b	2e72c <__assert_fail@plt+0x1cfcc>
   2e710:	sub	sp, sp, #8
   2e714:	push	{sp, lr}
   2e718:	bl	2e73c <__assert_fail@plt+0x1cfdc>
   2e71c:	ldr	lr, [sp, #4]
   2e720:	add	sp, sp, #8
   2e724:	pop	{r2, r3}
   2e728:	bx	lr
   2e72c:	push	{r1, lr}
   2e730:	mov	r0, #8
   2e734:	bl	113f4 <raise@plt>
   2e738:	pop	{r1, pc}
   2e73c:	cmp	r1, r3
   2e740:	cmpeq	r0, r2
   2e744:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2e748:	mov	r4, r0
   2e74c:	movcc	r0, #0
   2e750:	mov	r5, r1
   2e754:	ldr	lr, [sp, #36]	; 0x24
   2e758:	movcc	r1, r0
   2e75c:	bcc	2e858 <__assert_fail@plt+0x1d0f8>
   2e760:	cmp	r3, #0
   2e764:	clzeq	ip, r2
   2e768:	clzne	ip, r3
   2e76c:	addeq	ip, ip, #32
   2e770:	cmp	r5, #0
   2e774:	clzeq	r1, r4
   2e778:	addeq	r1, r1, #32
   2e77c:	clzne	r1, r5
   2e780:	sub	ip, ip, r1
   2e784:	sub	sl, ip, #32
   2e788:	lsl	r9, r3, ip
   2e78c:	rsb	fp, ip, #32
   2e790:	orr	r9, r9, r2, lsl sl
   2e794:	orr	r9, r9, r2, lsr fp
   2e798:	lsl	r8, r2, ip
   2e79c:	cmp	r5, r9
   2e7a0:	cmpeq	r4, r8
   2e7a4:	movcc	r0, #0
   2e7a8:	movcc	r1, r0
   2e7ac:	bcc	2e7c8 <__assert_fail@plt+0x1d068>
   2e7b0:	mov	r0, #1
   2e7b4:	subs	r4, r4, r8
   2e7b8:	lsl	r1, r0, sl
   2e7bc:	orr	r1, r1, r0, lsr fp
   2e7c0:	lsl	r0, r0, ip
   2e7c4:	sbc	r5, r5, r9
   2e7c8:	cmp	ip, #0
   2e7cc:	beq	2e858 <__assert_fail@plt+0x1d0f8>
   2e7d0:	lsr	r6, r8, #1
   2e7d4:	orr	r6, r6, r9, lsl #31
   2e7d8:	lsr	r7, r9, #1
   2e7dc:	mov	r2, ip
   2e7e0:	b	2e804 <__assert_fail@plt+0x1d0a4>
   2e7e4:	subs	r3, r4, r6
   2e7e8:	sbc	r8, r5, r7
   2e7ec:	adds	r3, r3, r3
   2e7f0:	adc	r8, r8, r8
   2e7f4:	adds	r4, r3, #1
   2e7f8:	adc	r5, r8, #0
   2e7fc:	subs	r2, r2, #1
   2e800:	beq	2e820 <__assert_fail@plt+0x1d0c0>
   2e804:	cmp	r5, r7
   2e808:	cmpeq	r4, r6
   2e80c:	bcs	2e7e4 <__assert_fail@plt+0x1d084>
   2e810:	adds	r4, r4, r4
   2e814:	adc	r5, r5, r5
   2e818:	subs	r2, r2, #1
   2e81c:	bne	2e804 <__assert_fail@plt+0x1d0a4>
   2e820:	lsr	r3, r4, ip
   2e824:	orr	r3, r3, r5, lsl fp
   2e828:	lsr	r2, r5, ip
   2e82c:	orr	r3, r3, r5, lsr sl
   2e830:	adds	r0, r0, r4
   2e834:	mov	r4, r3
   2e838:	lsl	r3, r2, ip
   2e83c:	orr	r3, r3, r4, lsl sl
   2e840:	lsl	ip, r4, ip
   2e844:	orr	r3, r3, r4, lsr fp
   2e848:	adc	r1, r1, r5
   2e84c:	subs	r0, r0, ip
   2e850:	mov	r5, r2
   2e854:	sbc	r1, r1, r3
   2e858:	cmp	lr, #0
   2e85c:	strdne	r4, [lr]
   2e860:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2e864:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   2e868:	mov	r7, r0
   2e86c:	ldr	r6, [pc, #72]	; 2e8bc <__assert_fail@plt+0x1d15c>
   2e870:	ldr	r5, [pc, #72]	; 2e8c0 <__assert_fail@plt+0x1d160>
   2e874:	add	r6, pc, r6
   2e878:	add	r5, pc, r5
   2e87c:	sub	r6, r6, r5
   2e880:	mov	r8, r1
   2e884:	mov	r9, r2
   2e888:	bl	11398 <pthread_mutex_unlock@plt-0x20>
   2e88c:	asrs	r6, r6, #2
   2e890:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   2e894:	mov	r4, #0
   2e898:	add	r4, r4, #1
   2e89c:	ldr	r3, [r5], #4
   2e8a0:	mov	r2, r9
   2e8a4:	mov	r1, r8
   2e8a8:	mov	r0, r7
   2e8ac:	blx	r3
   2e8b0:	cmp	r6, r4
   2e8b4:	bne	2e898 <__assert_fail@plt+0x1d138>
   2e8b8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   2e8bc:	muleq	r1, r0, r6
   2e8c0:	andeq	r1, r1, r8, lsl #13
   2e8c4:	bx	lr
   2e8c8:	ldr	r3, [pc, #12]	; 2e8dc <__assert_fail@plt+0x1d17c>
   2e8cc:	mov	r1, #0
   2e8d0:	add	r3, pc, r3
   2e8d4:	ldr	r2, [r3]
   2e8d8:	b	11664 <__cxa_atexit@plt>
   2e8dc:	andeq	r1, r1, ip, ror r8

Disassembly of section .fini:

0002e8e0 <.fini>:
   2e8e0:	push	{r3, lr}
   2e8e4:	pop	{r3, pc}
