
../repos/coreutils/src/basenc:     file format elf32-littlearm


Disassembly of section .init:

00010e64 <.init>:
   10e64:	push	{r3, lr}
   10e68:	bl	11148 <__assert_fail@plt+0x48>
   10e6c:	pop	{r3, pc}

Disassembly of section .plt:

00010e70 <calloc@plt-0x14>:
   10e70:	push	{lr}		; (str lr, [sp, #-4]!)
   10e74:	ldr	lr, [pc, #4]	; 10e80 <calloc@plt-0x4>
   10e78:	add	lr, pc, lr
   10e7c:	ldr	pc, [lr, #8]!
   10e80:	andeq	r8, r1, r0, lsl #3

00010e84 <calloc@plt>:
   10e84:	add	ip, pc, #0, 12
   10e88:	add	ip, ip, #24, 20	; 0x18000
   10e8c:	ldr	pc, [ip, #384]!	; 0x180

00010e90 <fputs_unlocked@plt>:
   10e90:	add	ip, pc, #0, 12
   10e94:	add	ip, ip, #24, 20	; 0x18000
   10e98:	ldr	pc, [ip, #376]!	; 0x178

00010e9c <raise@plt>:
   10e9c:	add	ip, pc, #0, 12
   10ea0:	add	ip, ip, #24, 20	; 0x18000
   10ea4:	ldr	pc, [ip, #368]!	; 0x170

00010ea8 <strcmp@plt>:
   10ea8:	add	ip, pc, #0, 12
   10eac:	add	ip, ip, #24, 20	; 0x18000
   10eb0:	ldr	pc, [ip, #360]!	; 0x168

00010eb4 <posix_fadvise64@plt>:
   10eb4:	add	ip, pc, #0, 12
   10eb8:	add	ip, ip, #24, 20	; 0x18000
   10ebc:	ldr	pc, [ip, #352]!	; 0x160

00010ec0 <fflush@plt>:
   10ec0:	add	ip, pc, #0, 12
   10ec4:	add	ip, ip, #24, 20	; 0x18000
   10ec8:	ldr	pc, [ip, #344]!	; 0x158

00010ecc <memmove@plt>:
   10ecc:	add	ip, pc, #0, 12
   10ed0:	add	ip, ip, #24, 20	; 0x18000
   10ed4:	ldr	pc, [ip, #336]!	; 0x150

00010ed8 <free@plt>:
   10ed8:	add	ip, pc, #0, 12
   10edc:	add	ip, ip, #24, 20	; 0x18000
   10ee0:	ldr	pc, [ip, #328]!	; 0x148

00010ee4 <_exit@plt>:
   10ee4:	add	ip, pc, #0, 12
   10ee8:	add	ip, ip, #24, 20	; 0x18000
   10eec:	ldr	pc, [ip, #320]!	; 0x140

00010ef0 <memcpy@plt>:
   10ef0:	add	ip, pc, #0, 12
   10ef4:	add	ip, ip, #24, 20	; 0x18000
   10ef8:	ldr	pc, [ip, #312]!	; 0x138

00010efc <mbsinit@plt>:
   10efc:	add	ip, pc, #0, 12
   10f00:	add	ip, ip, #24, 20	; 0x18000
   10f04:	ldr	pc, [ip, #304]!	; 0x130

00010f08 <fwrite_unlocked@plt>:
   10f08:	add	ip, pc, #0, 12
   10f0c:	add	ip, ip, #24, 20	; 0x18000
   10f10:	ldr	pc, [ip, #296]!	; 0x128

00010f14 <memcmp@plt>:
   10f14:	add	ip, pc, #0, 12
   10f18:	add	ip, ip, #24, 20	; 0x18000
   10f1c:	ldr	pc, [ip, #288]!	; 0x120

00010f20 <fputc_unlocked@plt>:
   10f20:	add	ip, pc, #0, 12
   10f24:	add	ip, ip, #24, 20	; 0x18000
   10f28:	ldr	pc, [ip, #280]!	; 0x118

00010f2c <dcgettext@plt>:
   10f2c:	add	ip, pc, #0, 12
   10f30:	add	ip, ip, #24, 20	; 0x18000
   10f34:	ldr	pc, [ip, #272]!	; 0x110

00010f38 <realloc@plt>:
   10f38:	add	ip, pc, #0, 12
   10f3c:	add	ip, ip, #24, 20	; 0x18000
   10f40:	ldr	pc, [ip, #264]!	; 0x108

00010f44 <textdomain@plt>:
   10f44:	add	ip, pc, #0, 12
   10f48:	add	ip, ip, #24, 20	; 0x18000
   10f4c:	ldr	pc, [ip, #256]!	; 0x100

00010f50 <iswprint@plt>:
   10f50:	add	ip, pc, #0, 12
   10f54:	add	ip, ip, #24, 20	; 0x18000
   10f58:	ldr	pc, [ip, #248]!	; 0xf8

00010f5c <fwrite@plt>:
   10f5c:	add	ip, pc, #0, 12
   10f60:	add	ip, ip, #24, 20	; 0x18000
   10f64:	ldr	pc, [ip, #240]!	; 0xf0

00010f68 <lseek64@plt>:
   10f68:	add	ip, pc, #0, 12
   10f6c:	add	ip, ip, #24, 20	; 0x18000
   10f70:	ldr	pc, [ip, #232]!	; 0xe8

00010f74 <__ctype_get_mb_cur_max@plt>:
   10f74:	add	ip, pc, #0, 12
   10f78:	add	ip, ip, #24, 20	; 0x18000
   10f7c:	ldr	pc, [ip, #224]!	; 0xe0

00010f80 <__fpending@plt>:
   10f80:	add	ip, pc, #0, 12
   10f84:	add	ip, ip, #24, 20	; 0x18000
   10f88:	ldr	pc, [ip, #216]!	; 0xd8

00010f8c <ferror_unlocked@plt>:
   10f8c:	add	ip, pc, #0, 12
   10f90:	add	ip, ip, #24, 20	; 0x18000
   10f94:	ldr	pc, [ip, #208]!	; 0xd0

00010f98 <mbrtowc@plt>:
   10f98:	add	ip, pc, #0, 12
   10f9c:	add	ip, ip, #24, 20	; 0x18000
   10fa0:	ldr	pc, [ip, #200]!	; 0xc8

00010fa4 <error@plt>:
   10fa4:	add	ip, pc, #0, 12
   10fa8:	add	ip, ip, #24, 20	; 0x18000
   10fac:	ldr	pc, [ip, #192]!	; 0xc0

00010fb0 <malloc@plt>:
   10fb0:	add	ip, pc, #0, 12
   10fb4:	add	ip, ip, #24, 20	; 0x18000
   10fb8:	ldr	pc, [ip, #184]!	; 0xb8

00010fbc <__libc_start_main@plt>:
   10fbc:	add	ip, pc, #0, 12
   10fc0:	add	ip, ip, #24, 20	; 0x18000
   10fc4:	ldr	pc, [ip, #176]!	; 0xb0

00010fc8 <__freading@plt>:
   10fc8:	add	ip, pc, #0, 12
   10fcc:	add	ip, ip, #24, 20	; 0x18000
   10fd0:	ldr	pc, [ip, #168]!	; 0xa8

00010fd4 <__gmon_start__@plt>:
   10fd4:	add	ip, pc, #0, 12
   10fd8:	add	ip, ip, #24, 20	; 0x18000
   10fdc:	ldr	pc, [ip, #160]!	; 0xa0

00010fe0 <getopt_long@plt>:
   10fe0:	add	ip, pc, #0, 12
   10fe4:	add	ip, ip, #24, 20	; 0x18000
   10fe8:	ldr	pc, [ip, #152]!	; 0x98

00010fec <__ctype_b_loc@plt>:
   10fec:	add	ip, pc, #0, 12
   10ff0:	add	ip, ip, #24, 20	; 0x18000
   10ff4:	ldr	pc, [ip, #144]!	; 0x90

00010ff8 <exit@plt>:
   10ff8:	add	ip, pc, #0, 12
   10ffc:	add	ip, ip, #24, 20	; 0x18000
   11000:	ldr	pc, [ip, #136]!	; 0x88

00011004 <strlen@plt>:
   11004:	add	ip, pc, #0, 12
   11008:	add	ip, ip, #24, 20	; 0x18000
   1100c:	ldr	pc, [ip, #128]!	; 0x80

00011010 <strchr@plt>:
   11010:	add	ip, pc, #0, 12
   11014:	add	ip, ip, #24, 20	; 0x18000
   11018:	ldr	pc, [ip, #120]!	; 0x78

0001101c <__errno_location@plt>:
   1101c:	add	ip, pc, #0, 12
   11020:	add	ip, ip, #24, 20	; 0x18000
   11024:	ldr	pc, [ip, #112]!	; 0x70

00011028 <__cxa_atexit@plt>:
   11028:	add	ip, pc, #0, 12
   1102c:	add	ip, ip, #24, 20	; 0x18000
   11030:	ldr	pc, [ip, #104]!	; 0x68

00011034 <memset@plt>:
   11034:	add	ip, pc, #0, 12
   11038:	add	ip, ip, #24, 20	; 0x18000
   1103c:	ldr	pc, [ip, #96]!	; 0x60

00011040 <__printf_chk@plt>:
   11040:	add	ip, pc, #0, 12
   11044:	add	ip, ip, #24, 20	; 0x18000
   11048:	ldr	pc, [ip, #88]!	; 0x58

0001104c <fileno@plt>:
   1104c:	add	ip, pc, #0, 12
   11050:	add	ip, ip, #24, 20	; 0x18000
   11054:	ldr	pc, [ip, #80]!	; 0x50

00011058 <__fprintf_chk@plt>:
   11058:	add	ip, pc, #0, 12
   1105c:	add	ip, ip, #24, 20	; 0x18000
   11060:	ldr	pc, [ip, #72]!	; 0x48

00011064 <memchr@plt>:
   11064:	add	ip, pc, #0, 12
   11068:	add	ip, ip, #24, 20	; 0x18000
   1106c:	ldr	pc, [ip, #64]!	; 0x40

00011070 <strtoimax@plt>:
   11070:	add	ip, pc, #0, 12
   11074:	add	ip, ip, #24, 20	; 0x18000
   11078:	ldr	pc, [ip, #56]!	; 0x38

0001107c <fclose@plt>:
   1107c:	add	ip, pc, #0, 12
   11080:	add	ip, ip, #24, 20	; 0x18000
   11084:	ldr	pc, [ip, #48]!	; 0x30

00011088 <fseeko64@plt>:
   11088:	add	ip, pc, #0, 12
   1108c:	add	ip, ip, #24, 20	; 0x18000
   11090:	ldr	pc, [ip, #40]!	; 0x28

00011094 <setlocale@plt>:
   11094:	add	ip, pc, #0, 12
   11098:	add	ip, ip, #24, 20	; 0x18000
   1109c:	ldr	pc, [ip, #32]!

000110a0 <strrchr@plt>:
   110a0:	add	ip, pc, #0, 12
   110a4:	add	ip, ip, #24, 20	; 0x18000
   110a8:	ldr	pc, [ip, #24]!

000110ac <nl_langinfo@plt>:
   110ac:	add	ip, pc, #0, 12
   110b0:	add	ip, ip, #24, 20	; 0x18000
   110b4:	ldr	pc, [ip, #16]!

000110b8 <fopen64@plt>:
   110b8:	add	ip, pc, #0, 12
   110bc:	add	ip, ip, #24, 20	; 0x18000
   110c0:	ldr	pc, [ip, #8]!

000110c4 <bindtextdomain@plt>:
   110c4:	add	ip, pc, #0, 12
   110c8:	add	ip, ip, #24, 20	; 0x18000
   110cc:	ldr	pc, [ip, #0]!

000110d0 <fread_unlocked@plt>:
   110d0:	add	ip, pc, #0, 12
   110d4:	add	ip, ip, #94208	; 0x17000
   110d8:	ldr	pc, [ip, #4088]!	; 0xff8

000110dc <strncmp@plt>:
   110dc:	add	ip, pc, #0, 12
   110e0:	add	ip, ip, #94208	; 0x17000
   110e4:	ldr	pc, [ip, #4080]!	; 0xff0

000110e8 <abort@plt>:
   110e8:	add	ip, pc, #0, 12
   110ec:	add	ip, ip, #94208	; 0x17000
   110f0:	ldr	pc, [ip, #4072]!	; 0xfe8

000110f4 <feof_unlocked@plt>:
   110f4:	add	ip, pc, #0, 12
   110f8:	add	ip, ip, #94208	; 0x17000
   110fc:	ldr	pc, [ip, #4064]!	; 0xfe0

00011100 <__assert_fail@plt>:
   11100:	add	ip, pc, #0, 12
   11104:	add	ip, ip, #94208	; 0x17000
   11108:	ldr	pc, [ip, #4056]!	; 0xfd8

Disassembly of section .text:

0001110c <.text>:
   1110c:	mov	fp, #0
   11110:	mov	lr, #0
   11114:	pop	{r1}		; (ldr r1, [sp], #4)
   11118:	mov	r2, sp
   1111c:	push	{r2}		; (str r2, [sp, #-4]!)
   11120:	push	{r0}		; (str r0, [sp, #-4]!)
   11124:	ldr	ip, [pc, #16]	; 1113c <__assert_fail@plt+0x3c>
   11128:	push	{ip}		; (str ip, [sp, #-4]!)
   1112c:	ldr	r0, [pc, #12]	; 11140 <__assert_fail@plt+0x40>
   11130:	ldr	r3, [pc, #12]	; 11144 <__assert_fail@plt+0x44>
   11134:	bl	10fbc <__libc_start_main@plt>
   11138:	bl	110e8 <abort@plt>
   1113c:	andeq	r7, r1, r4, asr #5
   11140:	andeq	r1, r1, ip, ror #11
   11144:	andeq	r7, r1, r4, ror #4
   11148:	ldr	r3, [pc, #20]	; 11164 <__assert_fail@plt+0x64>
   1114c:	ldr	r2, [pc, #20]	; 11168 <__assert_fail@plt+0x68>
   11150:	add	r3, pc, r3
   11154:	ldr	r2, [r3, r2]
   11158:	cmp	r2, #0
   1115c:	bxeq	lr
   11160:	b	10fd4 <__gmon_start__@plt>
   11164:	andeq	r7, r1, r8, lsr #29
   11168:	andeq	r0, r0, r4, ror #1
   1116c:	ldr	r0, [pc, #24]	; 1118c <__assert_fail@plt+0x8c>
   11170:	ldr	r3, [pc, #24]	; 11190 <__assert_fail@plt+0x90>
   11174:	cmp	r3, r0
   11178:	bxeq	lr
   1117c:	ldr	r3, [pc, #16]	; 11194 <__assert_fail@plt+0x94>
   11180:	cmp	r3, #0
   11184:	bxeq	lr
   11188:	bx	r3
   1118c:	andeq	r9, r2, r8, lsr r1
   11190:	andeq	r9, r2, r8, lsr r1
   11194:	andeq	r0, r0, r0
   11198:	ldr	r0, [pc, #36]	; 111c4 <__assert_fail@plt+0xc4>
   1119c:	ldr	r1, [pc, #36]	; 111c8 <__assert_fail@plt+0xc8>
   111a0:	sub	r1, r1, r0
   111a4:	asr	r1, r1, #2
   111a8:	add	r1, r1, r1, lsr #31
   111ac:	asrs	r1, r1, #1
   111b0:	bxeq	lr
   111b4:	ldr	r3, [pc, #16]	; 111cc <__assert_fail@plt+0xcc>
   111b8:	cmp	r3, #0
   111bc:	bxeq	lr
   111c0:	bx	r3
   111c4:	andeq	r9, r2, r8, lsr r1
   111c8:	andeq	r9, r2, r8, lsr r1
   111cc:	andeq	r0, r0, r0
   111d0:	push	{r4, lr}
   111d4:	ldr	r4, [pc, #24]	; 111f4 <__assert_fail@plt+0xf4>
   111d8:	ldrb	r3, [r4]
   111dc:	cmp	r3, #0
   111e0:	popne	{r4, pc}
   111e4:	bl	1116c <__assert_fail@plt+0x6c>
   111e8:	mov	r3, #1
   111ec:	strb	r3, [r4]
   111f0:	pop	{r4, pc}
   111f4:	andeq	r9, r2, ip, asr r1
   111f8:	b	11198 <__assert_fail@plt+0x98>
   111fc:	push	{fp, lr}
   11200:	mov	fp, sp
   11204:	mov	r4, r0
   11208:	cmp	r0, #0
   1120c:	bne	113c4 <__assert_fail@plt+0x2c4>
   11210:	movw	r1, #29467	; 0x731b
   11214:	movt	r1, #1
   11218:	mov	r0, #0
   1121c:	mov	r2, #5
   11220:	bl	10f2c <dcgettext@plt>
   11224:	mov	r1, r0
   11228:	movw	r0, #37244	; 0x917c
   1122c:	movt	r0, #2
   11230:	ldr	r2, [r0]
   11234:	mov	r0, #1
   11238:	bl	11040 <__printf_chk@plt>
   1123c:	movw	r1, #29497	; 0x7339
   11240:	movt	r1, #1
   11244:	mov	r0, #0
   11248:	mov	r2, #5
   1124c:	bl	10f2c <dcgettext@plt>
   11250:	movw	r5, #37204	; 0x9154
   11254:	movt	r5, #2
   11258:	ldr	r1, [r5]
   1125c:	bl	10e90 <fputs_unlocked@plt>
   11260:	bl	11408 <__assert_fail@plt+0x308>
   11264:	bl	11438 <__assert_fail@plt+0x338>
   11268:	movw	r1, #29567	; 0x737f
   1126c:	movt	r1, #1
   11270:	mov	r0, #0
   11274:	mov	r2, #5
   11278:	bl	10f2c <dcgettext@plt>
   1127c:	ldr	r1, [r5]
   11280:	bl	10e90 <fputs_unlocked@plt>
   11284:	movw	r1, #29637	; 0x73c5
   11288:	movt	r1, #1
   1128c:	mov	r0, #0
   11290:	mov	r2, #5
   11294:	bl	10f2c <dcgettext@plt>
   11298:	ldr	r1, [r5]
   1129c:	bl	10e90 <fputs_unlocked@plt>
   112a0:	movw	r1, #29708	; 0x740c
   112a4:	movt	r1, #1
   112a8:	mov	r0, #0
   112ac:	mov	r2, #5
   112b0:	bl	10f2c <dcgettext@plt>
   112b4:	ldr	r1, [r5]
   112b8:	bl	10e90 <fputs_unlocked@plt>
   112bc:	movw	r1, #29778	; 0x7452
   112c0:	movt	r1, #1
   112c4:	mov	r0, #0
   112c8:	mov	r2, #5
   112cc:	bl	10f2c <dcgettext@plt>
   112d0:	ldr	r1, [r5]
   112d4:	bl	10e90 <fputs_unlocked@plt>
   112d8:	movw	r1, #29852	; 0x749c
   112dc:	movt	r1, #1
   112e0:	mov	r0, #0
   112e4:	mov	r2, #5
   112e8:	bl	10f2c <dcgettext@plt>
   112ec:	ldr	r1, [r5]
   112f0:	bl	10e90 <fputs_unlocked@plt>
   112f4:	movw	r1, #29910	; 0x74d6
   112f8:	movt	r1, #1
   112fc:	mov	r0, #0
   11300:	mov	r2, #5
   11304:	bl	10f2c <dcgettext@plt>
   11308:	ldr	r1, [r5]
   1130c:	bl	10e90 <fputs_unlocked@plt>
   11310:	movw	r1, #29984	; 0x7520
   11314:	movt	r1, #1
   11318:	mov	r0, #0
   1131c:	mov	r2, #5
   11320:	bl	10f2c <dcgettext@plt>
   11324:	ldr	r1, [r5]
   11328:	bl	10e90 <fputs_unlocked@plt>
   1132c:	movw	r1, #30059	; 0x756b
   11330:	movt	r1, #1
   11334:	mov	r0, #0
   11338:	mov	r2, #5
   1133c:	bl	10f2c <dcgettext@plt>
   11340:	ldr	r1, [r5]
   11344:	bl	10e90 <fputs_unlocked@plt>
   11348:	movw	r1, #30301	; 0x765d
   1134c:	movt	r1, #1
   11350:	mov	r0, #0
   11354:	mov	r2, #5
   11358:	bl	10f2c <dcgettext@plt>
   1135c:	ldr	r1, [r5]
   11360:	bl	10e90 <fputs_unlocked@plt>
   11364:	movw	r1, #30523	; 0x773b
   11368:	movt	r1, #1
   1136c:	mov	r0, #0
   11370:	mov	r2, #5
   11374:	bl	10f2c <dcgettext@plt>
   11378:	ldr	r1, [r5]
   1137c:	bl	10e90 <fputs_unlocked@plt>
   11380:	movw	r1, #30568	; 0x7768
   11384:	movt	r1, #1
   11388:	mov	r0, #0
   1138c:	mov	r2, #5
   11390:	bl	10f2c <dcgettext@plt>
   11394:	ldr	r1, [r5]
   11398:	bl	10e90 <fputs_unlocked@plt>
   1139c:	movw	r1, #30622	; 0x779e
   113a0:	movt	r1, #1
   113a4:	mov	r0, #0
   113a8:	mov	r2, #5
   113ac:	bl	10f2c <dcgettext@plt>
   113b0:	ldr	r1, [r5]
   113b4:	bl	10e90 <fputs_unlocked@plt>
   113b8:	bl	11468 <__assert_fail@plt+0x368>
   113bc:	mov	r0, r4
   113c0:	bl	10ff8 <exit@plt>
   113c4:	movw	r0, #37192	; 0x9148
   113c8:	movt	r0, #2
   113cc:	ldr	r5, [r0]
   113d0:	movw	r1, #29428	; 0x72f4
   113d4:	movt	r1, #1
   113d8:	mov	r0, #0
   113dc:	mov	r2, #5
   113e0:	bl	10f2c <dcgettext@plt>
   113e4:	mov	r2, r0
   113e8:	movw	r0, #37244	; 0x917c
   113ec:	movt	r0, #2
   113f0:	ldr	r3, [r0]
   113f4:	mov	r0, r5
   113f8:	mov	r1, #1
   113fc:	bl	11058 <__fprintf_chk@plt>
   11400:	mov	r0, r4
   11404:	bl	10ff8 <exit@plt>
   11408:	push	{fp, lr}
   1140c:	mov	fp, sp
   11410:	movw	r1, #30966	; 0x78f6
   11414:	movt	r1, #1
   11418:	mov	r0, #0
   1141c:	mov	r2, #5
   11420:	bl	10f2c <dcgettext@plt>
   11424:	movw	r1, #37204	; 0x9154
   11428:	movt	r1, #2
   1142c:	ldr	r1, [r1]
   11430:	pop	{fp, lr}
   11434:	b	10e90 <fputs_unlocked@plt>
   11438:	push	{fp, lr}
   1143c:	mov	fp, sp
   11440:	movw	r1, #31022	; 0x792e
   11444:	movt	r1, #1
   11448:	mov	r0, #0
   1144c:	mov	r2, #5
   11450:	bl	10f2c <dcgettext@plt>
   11454:	movw	r1, #37204	; 0x9154
   11458:	movt	r1, #2
   1145c:	ldr	r1, [r1]
   11460:	pop	{fp, lr}
   11464:	b	10e90 <fputs_unlocked@plt>
   11468:	push	{r4, r5, fp, lr}
   1146c:	add	fp, sp, #8
   11470:	sub	sp, sp, #56	; 0x38
   11474:	movw	r0, #32000	; 0x7d00
   11478:	movt	r0, #1
   1147c:	add	r1, r0, #32
   11480:	mov	r5, sp
   11484:	mov	r2, #48	; 0x30
   11488:	vld1.64	{d16-d17}, [r1]
   1148c:	add	r1, r5, #32
   11490:	add	r3, r0, #16
   11494:	vld1.64	{d18-d19}, [r0], r2
   11498:	vld1.64	{d20-d21}, [r3]
   1149c:	vldr	d22, [r0]
   114a0:	vst1.64	{d16-d17}, [r1]
   114a4:	add	r0, r5, #16
   114a8:	vst1.64	{d20-d21}, [r0]
   114ac:	mov	r0, r5
   114b0:	vst1.64	{d18-d19}, [r0], r2
   114b4:	vstr	d22, [r0]
   114b8:	ldr	r1, [sp]
   114bc:	cmp	r1, #0
   114c0:	beq	114e8 <__assert_fail@plt+0x3e8>
   114c4:	mov	r5, sp
   114c8:	movw	r4, #30820	; 0x7864
   114cc:	movt	r4, #1
   114d0:	mov	r0, r4
   114d4:	bl	10ea8 <strcmp@plt>
   114d8:	cmp	r0, #0
   114dc:	ldrne	r1, [r5, #8]!
   114e0:	cmpne	r1, #0
   114e4:	bne	114d0 <__assert_fail@plt+0x3d0>
   114e8:	ldr	r4, [r5, #4]
   114ec:	movw	r1, #31192	; 0x79d8
   114f0:	movt	r1, #1
   114f4:	mov	r0, #0
   114f8:	mov	r2, #5
   114fc:	bl	10f2c <dcgettext@plt>
   11500:	mov	r1, r0
   11504:	movw	r2, #30881	; 0x78a1
   11508:	movt	r2, #1
   1150c:	movw	r3, #31215	; 0x79ef
   11510:	movt	r3, #1
   11514:	mov	r0, #1
   11518:	bl	11040 <__printf_chk@plt>
   1151c:	movw	r5, #30820	; 0x7864
   11520:	movt	r5, #1
   11524:	cmp	r4, #0
   11528:	moveq	r4, r5
   1152c:	mov	r0, #5
   11530:	mov	r1, #0
   11534:	bl	11094 <setlocale@plt>
   11538:	cmp	r0, #0
   1153c:	beq	1157c <__assert_fail@plt+0x47c>
   11540:	movw	r1, #31255	; 0x7a17
   11544:	movt	r1, #1
   11548:	mov	r2, #3
   1154c:	bl	110dc <strncmp@plt>
   11550:	cmp	r0, #0
   11554:	beq	1157c <__assert_fail@plt+0x47c>
   11558:	movw	r1, #31259	; 0x7a1b
   1155c:	movt	r1, #1
   11560:	mov	r0, #0
   11564:	mov	r2, #5
   11568:	bl	10f2c <dcgettext@plt>
   1156c:	movw	r1, #37204	; 0x9154
   11570:	movt	r1, #2
   11574:	ldr	r1, [r1]
   11578:	bl	10e90 <fputs_unlocked@plt>
   1157c:	movw	r1, #31330	; 0x7a62
   11580:	movt	r1, #1
   11584:	mov	r0, #0
   11588:	mov	r2, #5
   1158c:	bl	10f2c <dcgettext@plt>
   11590:	mov	r1, r0
   11594:	movw	r2, #31215	; 0x79ef
   11598:	movt	r2, #1
   1159c:	mov	r0, #1
   115a0:	mov	r3, r5
   115a4:	bl	11040 <__printf_chk@plt>
   115a8:	movw	r1, #31357	; 0x7a7d
   115ac:	movt	r1, #1
   115b0:	mov	r0, #0
   115b4:	mov	r2, #5
   115b8:	bl	10f2c <dcgettext@plt>
   115bc:	mov	r1, r0
   115c0:	movw	r0, #31125	; 0x7995
   115c4:	movt	r0, #1
   115c8:	movw	r3, #31407	; 0x7aaf
   115cc:	movt	r3, #1
   115d0:	cmp	r4, r5
   115d4:	moveq	r3, r0
   115d8:	mov	r0, #1
   115dc:	mov	r2, r4
   115e0:	bl	11040 <__printf_chk@plt>
   115e4:	sub	sp, fp, #8
   115e8:	pop	{r4, r5, fp, pc}
   115ec:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   115f0:	add	fp, sp, #28
   115f4:	sub	sp, sp, #36	; 0x24
   115f8:	mov	r4, r1
   115fc:	mov	r6, r0
   11600:	ldr	r0, [r1]
   11604:	bl	1426c <__assert_fail@plt+0x316c>
   11608:	movw	r1, #31407	; 0x7aaf
   1160c:	movt	r1, #1
   11610:	mov	r0, #6
   11614:	bl	11094 <setlocale@plt>
   11618:	movw	r5, #30885	; 0x78a5
   1161c:	movt	r5, #1
   11620:	movw	r1, #30827	; 0x786b
   11624:	movt	r1, #1
   11628:	mov	r0, r5
   1162c:	bl	110c4 <bindtextdomain@plt>
   11630:	mov	r0, r5
   11634:	bl	10f44 <textdomain@plt>
   11638:	movw	r0, #16160	; 0x3f20
   1163c:	movt	r0, #1
   11640:	bl	172c8 <__assert_fail@plt+0x61c8>
   11644:	mov	sl, #0
   11648:	mov	r9, #76	; 0x4c
   1164c:	movw	r7, #30851	; 0x7883
   11650:	movt	r7, #1
   11654:	movw	r5, #31776	; 0x7c20
   11658:	movt	r5, #1
   1165c:	mov	r0, #0
   11660:	str	r0, [sp, #20]
   11664:	mov	r0, #0
   11668:	str	r0, [sp, #16]
   1166c:	mov	r0, #0
   11670:	b	11678 <__assert_fail@plt+0x578>
   11674:	mov	r0, r8
   11678:	mov	r8, r0
   1167c:	str	sl, [sp]
   11680:	mov	r0, r6
   11684:	mov	r1, r4
   11688:	mov	r2, r7
   1168c:	mov	r3, r5
   11690:	bl	10fe0 <getopt_long@plt>
   11694:	sub	r1, r0, #256	; 0x100
   11698:	cmp	r1, #8
   1169c:	bcc	11678 <__assert_fail@plt+0x578>
   116a0:	cmp	r0, #99	; 0x63
   116a4:	ble	11734 <__assert_fail@plt+0x634>
   116a8:	cmp	r0, #100	; 0x64
   116ac:	beq	1171c <__assert_fail@plt+0x61c>
   116b0:	cmp	r0, #105	; 0x69
   116b4:	beq	11728 <__assert_fail@plt+0x628>
   116b8:	cmp	r0, #119	; 0x77
   116bc:	bne	11888 <__assert_fail@plt+0x788>
   116c0:	movw	r0, #37208	; 0x9158
   116c4:	movt	r0, #2
   116c8:	ldr	r0, [r0]
   116cc:	movw	r1, #31407	; 0x7aaf
   116d0:	movt	r1, #1
   116d4:	str	r1, [sp]
   116d8:	mov	r1, #0
   116dc:	mov	r2, #10
   116e0:	add	r3, sp, #24
   116e4:	bl	167b4 <__assert_fail@plt+0x56b4>
   116e8:	cmp	r0, #1
   116ec:	bhi	11994 <__assert_fail@plt+0x894>
   116f0:	ldr	r1, [sp, #28]
   116f4:	cmn	r1, #1
   116f8:	ble	11994 <__assert_fail@plt+0x894>
   116fc:	ldr	r2, [sp, #24]
   11700:	mvn	r3, #-2147483648	; 0x80000000
   11704:	subs	r3, r3, r2
   11708:	rscs	r1, r1, #0
   1170c:	movwlt	r2, #0
   11710:	subs	r9, r0, #1
   11714:	movne	r9, r2
   11718:	b	11674 <__assert_fail@plt+0x574>
   1171c:	mov	r0, #1
   11720:	str	r0, [sp, #20]
   11724:	b	11674 <__assert_fail@plt+0x574>
   11728:	mov	r0, #1
   1172c:	str	r0, [sp, #16]
   11730:	b	11674 <__assert_fail@plt+0x574>
   11734:	cmn	r0, #3
   11738:	beq	1182c <__assert_fail@plt+0x72c>
   1173c:	cmn	r0, #2
   11740:	beq	11880 <__assert_fail@plt+0x780>
   11744:	cmn	r0, #1
   11748:	bne	11888 <__assert_fail@plt+0x788>
   1174c:	sub	r0, r8, #256	; 0x100
   11750:	cmp	r0, #8
   11754:	bcs	11890 <__assert_fail@plt+0x790>
   11758:	movw	r1, #32352	; 0x7e60
   1175c:	movt	r1, #1
   11760:	ldr	r1, [r1, r0, lsl #2]
   11764:	movw	r2, #37220	; 0x9164
   11768:	movt	r2, #2
   1176c:	str	r1, [r2]
   11770:	movw	r1, #32320	; 0x7e40
   11774:	movt	r1, #1
   11778:	ldr	r1, [r1, r0, lsl #2]
   1177c:	movw	r2, #37216	; 0x9160
   11780:	movt	r2, #2
   11784:	str	r1, [r2]
   11788:	movw	r1, #32384	; 0x7e80
   1178c:	movt	r1, #1
   11790:	ldr	r1, [r1, r0, lsl #2]
   11794:	movw	r2, #37224	; 0x9168
   11798:	movt	r2, #2
   1179c:	str	r1, [r2]
   117a0:	movw	r1, #32416	; 0x7ea0
   117a4:	movt	r1, #1
   117a8:	ldr	r1, [r1, r0, lsl #2]
   117ac:	movw	r2, #37228	; 0x916c
   117b0:	movt	r2, #2
   117b4:	str	r1, [r2]
   117b8:	movw	r1, #32448	; 0x7ec0
   117bc:	movt	r1, #1
   117c0:	ldr	r0, [r1, r0, lsl #2]
   117c4:	movw	r1, #37232	; 0x9170
   117c8:	movt	r1, #2
   117cc:	str	r0, [r1]
   117d0:	movw	r7, #37184	; 0x9140
   117d4:	movt	r7, #2
   117d8:	ldr	r0, [r7]
   117dc:	sub	r1, r6, r0
   117e0:	cmp	r1, #2
   117e4:	blt	118bc <__assert_fail@plt+0x7bc>
   117e8:	movw	r1, #30946	; 0x78e2
   117ec:	movt	r1, #1
   117f0:	mov	r0, #0
   117f4:	mov	r2, #5
   117f8:	bl	10f2c <dcgettext@plt>
   117fc:	mov	r5, r0
   11800:	ldr	r0, [r7]
   11804:	add	r0, r4, r0, lsl #2
   11808:	ldr	r0, [r0, #4]
   1180c:	bl	15aa4 <__assert_fail@plt+0x49a4>
   11810:	mov	r3, r0
   11814:	mov	r0, #0
   11818:	mov	r1, #0
   1181c:	mov	r2, r5
   11820:	bl	10fa4 <error@plt>
   11824:	mov	r0, #1
   11828:	bl	111fc <__assert_fail@plt+0xfc>
   1182c:	movw	r0, #37104	; 0x90f0
   11830:	movt	r0, #2
   11834:	ldr	r3, [r0]
   11838:	movw	r0, #37204	; 0x9154
   1183c:	movt	r0, #2
   11840:	ldr	r0, [r0]
   11844:	mov	r1, #0
   11848:	movw	r2, #30911	; 0x78bf
   1184c:	movt	r2, #1
   11850:	movw	r7, #30895	; 0x78af
   11854:	movt	r7, #1
   11858:	str	r7, [sp]
   1185c:	str	r2, [sp, #4]
   11860:	str	r1, [sp, #8]
   11864:	movw	r1, #30820	; 0x7864
   11868:	movt	r1, #1
   1186c:	movw	r2, #30881	; 0x78a1
   11870:	movt	r2, #1
   11874:	bl	162b0 <__assert_fail@plt+0x51b0>
   11878:	mov	r0, #0
   1187c:	bl	10ff8 <exit@plt>
   11880:	mov	r0, #0
   11884:	bl	111fc <__assert_fail@plt+0xfc>
   11888:	mov	r0, #1
   1188c:	bl	111fc <__assert_fail@plt+0xfc>
   11890:	movw	r1, #30924	; 0x78cc
   11894:	movt	r1, #1
   11898:	mov	r0, #0
   1189c:	mov	r2, #5
   118a0:	bl	10f2c <dcgettext@plt>
   118a4:	mov	r2, r0
   118a8:	mov	r0, #0
   118ac:	mov	r1, #0
   118b0:	bl	10fa4 <error@plt>
   118b4:	mov	r0, #1
   118b8:	bl	111fc <__assert_fail@plt+0xfc>
   118bc:	cmp	r0, r6
   118c0:	ldrlt	r4, [r4, r0, lsl #2]
   118c4:	movwge	r4, #33185	; 0x81a1
   118c8:	movtge	r4, #1
   118cc:	movw	r1, #33185	; 0x81a1
   118d0:	movt	r1, #1
   118d4:	mov	r0, r4
   118d8:	bl	10ea8 <strcmp@plt>
   118dc:	cmp	r0, #0
   118e0:	bne	11900 <__assert_fail@plt+0x800>
   118e4:	mov	r0, #0
   118e8:	mov	r1, #0
   118ec:	bl	167b0 <__assert_fail@plt+0x56b0>
   118f0:	movw	r0, #37200	; 0x9150
   118f4:	movt	r0, #2
   118f8:	ldr	r5, [r0]
   118fc:	b	1194c <__assert_fail@plt+0x84c>
   11900:	movw	r1, #30963	; 0x78f3
   11904:	movt	r1, #1
   11908:	mov	r0, r4
   1190c:	bl	110b8 <fopen64@plt>
   11910:	mov	r5, r0
   11914:	cmp	r0, #0
   11918:	bne	1194c <__assert_fail@plt+0x84c>
   1191c:	bl	1101c <__errno_location@plt>
   11920:	ldr	r5, [r0]
   11924:	mov	r0, #0
   11928:	mov	r1, #3
   1192c:	mov	r2, r4
   11930:	bl	15964 <__assert_fail@plt+0x4864>
   11934:	mov	r3, r0
   11938:	movw	r2, #30860	; 0x788c
   1193c:	movt	r2, #1
   11940:	mov	r0, #1
   11944:	mov	r1, r5
   11948:	bl	10fa4 <error@plt>
   1194c:	mov	r0, r5
   11950:	mov	r1, #2
   11954:	bl	1400c <__assert_fail@plt+0x2f0c>
   11958:	movw	r0, #37204	; 0x9154
   1195c:	movt	r0, #2
   11960:	ldr	r2, [r0]
   11964:	ldr	r0, [sp, #20]
   11968:	tst	r0, #1
   1196c:	beq	11984 <__assert_fail@plt+0x884>
   11970:	ldr	r0, [sp, #16]
   11974:	and	r3, r0, #1
   11978:	mov	r0, r5
   1197c:	mov	r1, r4
   11980:	bl	123f0 <__assert_fail@plt+0x12f0>
   11984:	mov	r0, r5
   11988:	mov	r1, r4
   1198c:	mov	r3, r9
   11990:	bl	12664 <__assert_fail@plt+0x1564>
   11994:	movw	r1, #30863	; 0x788f
   11998:	movt	r1, #1
   1199c:	mov	r0, #0
   119a0:	mov	r2, #5
   119a4:	bl	10f2c <dcgettext@plt>
   119a8:	mov	r4, r0
   119ac:	movw	r0, #37208	; 0x9158
   119b0:	movt	r0, #2
   119b4:	ldr	r0, [r0]
   119b8:	bl	15aa4 <__assert_fail@plt+0x49a4>
   119bc:	str	r0, [sp]
   119c0:	movw	r2, #30856	; 0x7888
   119c4:	movt	r2, #1
   119c8:	mov	r0, #1
   119cc:	mov	r1, #0
   119d0:	mov	r3, r4
   119d4:	bl	10fa4 <error@plt>
   119d8:	add	r0, r0, #2
   119dc:	movw	r1, #21846	; 0x5556
   119e0:	movt	r1, #21845	; 0x5555
   119e4:	smmul	r0, r0, r1
   119e8:	add	r0, r0, r0, lsr #31
   119ec:	lsl	r0, r0, #2
   119f0:	bx	lr
   119f4:	add	r0, r0, #4
   119f8:	b	136bc <__assert_fail@plt+0x25bc>
   119fc:	push	{r4, sl, fp, lr}
   11a00:	add	fp, sp, #8
   11a04:	sub	sp, sp, #8
   11a08:	mov	r4, r0
   11a0c:	ldr	r0, [fp, #8]
   11a10:	str	r0, [sp]
   11a14:	add	r0, r4, #4
   11a18:	bl	136c8 <__assert_fail@plt+0x25c8>
   11a1c:	ldr	r1, [r4, #4]
   11a20:	str	r1, [r4]
   11a24:	sub	sp, fp, #8
   11a28:	pop	{r4, sl, fp, pc}
   11a2c:	mov	r1, r0
   11a30:	mov	r0, #1
   11a34:	cmp	r1, #46	; 0x2e
   11a38:	bgt	11a50 <__assert_fail@plt+0x950>
   11a3c:	cmp	r1, #43	; 0x2b
   11a40:	beq	11a68 <__assert_fail@plt+0x968>
   11a44:	cmp	r1, #45	; 0x2d
   11a48:	bne	11a60 <__assert_fail@plt+0x960>
   11a4c:	bx	lr
   11a50:	cmp	r1, #47	; 0x2f
   11a54:	beq	11a68 <__assert_fail@plt+0x968>
   11a58:	cmp	r1, #95	; 0x5f
   11a5c:	bxeq	lr
   11a60:	mov	r0, r1
   11a64:	b	13690 <__assert_fail@plt+0x2590>
   11a68:	mov	r0, #0
   11a6c:	bx	lr
   11a70:	push	{r4, r5, fp, lr}
   11a74:	add	fp, sp, #8
   11a78:	mov	r4, r3
   11a7c:	mov	r5, r2
   11a80:	bl	133b0 <__assert_fail@plt+0x22b0>
   11a84:	b	11a8c <__assert_fail@plt+0x98c>
   11a88:	add	r5, r5, #1
   11a8c:	cmp	r4, #0
   11a90:	popeq	{r4, r5, fp, pc}
   11a94:	sub	r4, r4, #1
   11a98:	ldrb	r0, [r5]
   11a9c:	cmp	r0, #43	; 0x2b
   11aa0:	beq	11ab4 <__assert_fail@plt+0x9b4>
   11aa4:	cmp	r0, #47	; 0x2f
   11aa8:	bne	11a88 <__assert_fail@plt+0x988>
   11aac:	mov	r0, #95	; 0x5f
   11ab0:	b	11ab8 <__assert_fail@plt+0x9b8>
   11ab4:	mov	r0, #45	; 0x2d
   11ab8:	strb	r0, [r5]
   11abc:	b	11a88 <__assert_fail@plt+0x988>
   11ac0:	push	{r4, sl, fp, lr}
   11ac4:	add	fp, sp, #8
   11ac8:	mov	r4, r0
   11acc:	add	r0, r0, #4
   11ad0:	bl	136bc <__assert_fail@plt+0x25bc>
   11ad4:	mov	r0, r4
   11ad8:	pop	{r4, sl, fp, lr}
   11adc:	b	12800 <__assert_fail@plt+0x1700>
   11ae0:	push	{r4, r5, r6, r7, fp, lr}
   11ae4:	add	fp, sp, #16
   11ae8:	sub	sp, sp, #8
   11aec:	mov	r5, r3
   11af0:	mov	r6, r2
   11af4:	mov	r7, r1
   11af8:	mov	r4, r0
   11afc:	mov	r1, r2
   11b00:	bl	12824 <__assert_fail@plt+0x1724>
   11b04:	ldr	r0, [r4, #16]
   11b08:	mov	r1, r7
   11b0c:	mov	r2, r6
   11b10:	bl	10ef0 <memcpy@plt>
   11b14:	ldr	r0, [fp, #8]
   11b18:	cmp	r6, #0
   11b1c:	beq	11b88 <__assert_fail@plt+0xa88>
   11b20:	ldr	r1, [r4, #16]
   11b24:	mov	r2, r6
   11b28:	ldrb	r3, [r1]
   11b2c:	cmp	r3, #46	; 0x2e
   11b30:	bgt	11b4c <__assert_fail@plt+0xa4c>
   11b34:	mov	r7, #43	; 0x2b
   11b38:	cmp	r3, #45	; 0x2d
   11b3c:	beq	11b58 <__assert_fail@plt+0xa58>
   11b40:	cmp	r3, #43	; 0x2b
   11b44:	bne	11b5c <__assert_fail@plt+0xa5c>
   11b48:	b	11b74 <__assert_fail@plt+0xa74>
   11b4c:	cmp	r3, #95	; 0x5f
   11b50:	bne	11b6c <__assert_fail@plt+0xa6c>
   11b54:	mov	r7, #47	; 0x2f
   11b58:	strb	r7, [r1]
   11b5c:	subs	r2, r2, #1
   11b60:	add	r1, r1, #1
   11b64:	bne	11b28 <__assert_fail@plt+0xa28>
   11b68:	b	11b88 <__assert_fail@plt+0xa88>
   11b6c:	cmp	r3, #47	; 0x2f
   11b70:	bne	11b5c <__assert_fail@plt+0xa5c>
   11b74:	mov	r1, #0
   11b78:	str	r1, [r0]
   11b7c:	mov	r0, #0
   11b80:	sub	sp, fp, #16
   11b84:	pop	{r4, r5, r6, r7, fp, pc}
   11b88:	ldr	r1, [r4, #16]
   11b8c:	str	r0, [sp]
   11b90:	add	r0, r4, #4
   11b94:	mov	r2, r6
   11b98:	mov	r3, r5
   11b9c:	bl	136c8 <__assert_fail@plt+0x25c8>
   11ba0:	ldr	r1, [r4, #4]
   11ba4:	str	r1, [r4]
   11ba8:	sub	sp, fp, #16
   11bac:	pop	{r4, r5, r6, r7, fp, pc}
   11bb0:	add	r0, r0, #4
   11bb4:	movw	r1, #26215	; 0x6667
   11bb8:	movt	r1, #26214	; 0x6666
   11bbc:	smmul	r0, r0, r1
   11bc0:	lsr	r1, r0, #1
   11bc4:	add	r0, r1, r0, lsr #31
   11bc8:	lsl	r0, r0, #3
   11bcc:	bx	lr
   11bd0:	add	r0, r0, #4
   11bd4:	b	12d80 <__assert_fail@plt+0x1c80>
   11bd8:	push	{r4, sl, fp, lr}
   11bdc:	add	fp, sp, #8
   11be0:	sub	sp, sp, #8
   11be4:	mov	r4, r0
   11be8:	ldr	r0, [fp, #8]
   11bec:	str	r0, [sp]
   11bf0:	add	r0, r4, #4
   11bf4:	bl	12d8c <__assert_fail@plt+0x1c8c>
   11bf8:	ldr	r1, [r4, #4]
   11bfc:	str	r1, [r4]
   11c00:	sub	sp, fp, #8
   11c04:	pop	{r4, sl, fp, pc}
   11c08:	sub	r1, r0, #65	; 0x41
   11c0c:	uxtb	r1, r1
   11c10:	mov	r2, #0
   11c14:	cmp	r1, #22
   11c18:	mov	r1, #0
   11c1c:	movwcc	r1, #1
   11c20:	sub	r0, r0, #48	; 0x30
   11c24:	uxtb	r0, r0
   11c28:	cmp	r0, #10
   11c2c:	movwcc	r2, #1
   11c30:	orr	r0, r2, r1
   11c34:	bx	lr
   11c38:	push	{r4, r5, fp, lr}
   11c3c:	add	fp, sp, #8
   11c40:	mov	r4, r3
   11c44:	mov	r5, r2
   11c48:	bl	129f4 <__assert_fail@plt+0x18f4>
   11c4c:	cmp	r4, #0
   11c50:	popeq	{r4, r5, fp, pc}
   11c54:	movw	r0, #32056	; 0x7d38
   11c58:	movt	r0, #1
   11c5c:	ldrb	r1, [r5]
   11c60:	sub	r2, r1, #50	; 0x32
   11c64:	uxtb	r2, r2
   11c68:	cmp	r2, #41	; 0x29
   11c6c:	bcs	11c88 <__assert_fail@plt+0xb88>
   11c70:	subs	r4, r4, #1
   11c74:	add	r1, r0, r1
   11c78:	ldrb	r1, [r1, #-50]	; 0xffffffce
   11c7c:	strb	r1, [r5], #1
   11c80:	bne	11c5c <__assert_fail@plt+0xb5c>
   11c84:	pop	{r4, r5, fp, pc}
   11c88:	movw	r0, #31513	; 0x7b19
   11c8c:	movt	r0, #1
   11c90:	movw	r1, #31538	; 0x7b32
   11c94:	movt	r1, #1
   11c98:	movw	r3, #31551	; 0x7b3f
   11c9c:	movt	r3, #1
   11ca0:	mov	r2, #452	; 0x1c4
   11ca4:	bl	11100 <__assert_fail@plt>
   11ca8:	push	{r4, sl, fp, lr}
   11cac:	add	fp, sp, #8
   11cb0:	mov	r4, r0
   11cb4:	add	r0, r0, #4
   11cb8:	bl	12d80 <__assert_fail@plt+0x1c80>
   11cbc:	mov	r0, r4
   11cc0:	pop	{r4, sl, fp, lr}
   11cc4:	b	12800 <__assert_fail@plt+0x1700>
   11cc8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11ccc:	add	fp, sp, #28
   11cd0:	sub	sp, sp, #12
   11cd4:	str	r3, [sp, #8]
   11cd8:	mov	r8, r2
   11cdc:	mov	r7, r1
   11ce0:	mov	r4, r0
   11ce4:	mov	r1, r2
   11ce8:	bl	12824 <__assert_fail@plt+0x1724>
   11cec:	cmp	r8, #0
   11cf0:	beq	11d30 <__assert_fail@plt+0xc30>
   11cf4:	ldr	r6, [r4, #16]
   11cf8:	movw	r9, #32097	; 0x7d61
   11cfc:	movt	r9, #1
   11d00:	mov	sl, r8
   11d04:	ldrb	r5, [r7]
   11d08:	sub	sl, sl, #1
   11d0c:	mov	r0, r5
   11d10:	bl	11c08 <__assert_fail@plt+0xb08>
   11d14:	cmp	r0, #0
   11d18:	addne	r0, r9, r5
   11d1c:	ldrbne	r5, [r0, #-48]	; 0xffffffd0
   11d20:	strb	r5, [r6], #1
   11d24:	add	r7, r7, #1
   11d28:	cmp	sl, #0
   11d2c:	bne	11d04 <__assert_fail@plt+0xc04>
   11d30:	ldr	r1, [r4, #16]
   11d34:	ldr	r0, [fp, #8]
   11d38:	str	r0, [sp]
   11d3c:	add	r0, r4, #4
   11d40:	mov	r2, r8
   11d44:	ldr	r3, [sp, #8]
   11d48:	bl	12d8c <__assert_fail@plt+0x1c8c>
   11d4c:	ldr	r1, [r4, #4]
   11d50:	str	r1, [r4]
   11d54:	sub	sp, fp, #28
   11d58:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11d5c:	lsl	r0, r0, #1
   11d60:	bx	lr
   11d64:	sub	r1, r0, #65	; 0x41
   11d68:	uxtb	r1, r1
   11d6c:	mov	r2, #0
   11d70:	cmp	r1, #6
   11d74:	mov	r1, #0
   11d78:	movwcc	r1, #1
   11d7c:	sub	r0, r0, #48	; 0x30
   11d80:	uxtb	r0, r0
   11d84:	cmp	r0, #10
   11d88:	movwcc	r2, #1
   11d8c:	orr	r0, r2, r1
   11d90:	bx	lr
   11d94:	push	{fp, lr}
   11d98:	mov	fp, sp
   11d9c:	cmp	r1, #0
   11da0:	popeq	{fp, pc}
   11da4:	movw	ip, #32480	; 0x7ee0
   11da8:	movt	ip, #1
   11dac:	ldrb	lr, [r0], #1
   11db0:	ldrb	r3, [ip, lr, lsr #4]
   11db4:	strb	r3, [r2]
   11db8:	and	r3, lr, #15
   11dbc:	ldrb	r3, [ip, r3]
   11dc0:	strb	r3, [r2, #1]
   11dc4:	add	r2, r2, #2
   11dc8:	subs	r1, r1, #1
   11dcc:	bne	11dac <__assert_fail@plt+0xcac>
   11dd0:	pop	{fp, pc}
   11dd4:	push	{r4, sl, fp, lr}
   11dd8:	add	fp, sp, #8
   11ddc:	mov	r4, r0
   11de0:	bl	12800 <__assert_fail@plt+0x1700>
   11de4:	mov	r0, #1
   11de8:	str	r0, [r4]
   11dec:	mov	r0, #0
   11df0:	strb	r0, [r4, #5]
   11df4:	pop	{r4, sl, fp, pc}
   11df8:	push	{r4, r5, fp, lr}
   11dfc:	add	fp, sp, #8
   11e00:	ldr	ip, [fp, #8]
   11e04:	mov	r4, #0
   11e08:	str	r4, [ip]
   11e0c:	cmp	r2, #0
   11e10:	bne	11e30 <__assert_fail@plt+0xd30>
   11e14:	ldrb	r0, [r0, #5]
   11e18:	clz	r0, r0
   11e1c:	lsr	r0, r0, #5
   11e20:	pop	{r4, r5, fp, pc}
   11e24:	ldrb	r5, [r0, #5]
   11e28:	eor	r5, r5, #1
   11e2c:	strb	r5, [r0, #5]
   11e30:	cmp	r2, #0
   11e34:	moveq	r0, #1
   11e38:	popeq	{r4, r5, fp, pc}
   11e3c:	sub	r2, r2, #1
   11e40:	ldrb	lr, [r1], #1
   11e44:	cmp	lr, #10
   11e48:	beq	11e30 <__assert_fail@plt+0xd30>
   11e4c:	sub	r4, lr, #48	; 0x30
   11e50:	uxtb	r5, r4
   11e54:	mvn	r4, #47	; 0x2f
   11e58:	cmp	r5, #10
   11e5c:	bcc	11e78 <__assert_fail@plt+0xd78>
   11e60:	sub	r4, lr, #65	; 0x41
   11e64:	uxtb	r5, r4
   11e68:	mvn	r4, #54	; 0x36
   11e6c:	cmp	r5, #5
   11e70:	movhi	r0, #0
   11e74:	pophi	{r4, r5, fp, pc}
   11e78:	add	r4, r4, lr
   11e7c:	ldrb	r5, [r0, #5]
   11e80:	cmp	r5, #0
   11e84:	beq	11ea4 <__assert_fail@plt+0xda4>
   11e88:	ldrb	r5, [r0, #4]
   11e8c:	add	r5, r4, r5, lsl #4
   11e90:	strb	r5, [r3], #1
   11e94:	ldr	r5, [ip]
   11e98:	add	r5, r5, #1
   11e9c:	str	r5, [ip]
   11ea0:	b	11e24 <__assert_fail@plt+0xd24>
   11ea4:	strb	r4, [r0, #4]
   11ea8:	b	11e24 <__assert_fail@plt+0xd24>
   11eac:	lsl	r0, r0, #3
   11eb0:	bx	lr
   11eb4:	orr	r0, r0, #1
   11eb8:	sub	r0, r0, #49	; 0x31
   11ebc:	clz	r0, r0
   11ec0:	lsr	r0, r0, #5
   11ec4:	bx	lr
   11ec8:	push	{fp, lr}
   11ecc:	mov	fp, sp
   11ed0:	cmp	r1, #0
   11ed4:	popeq	{fp, pc}
   11ed8:	ldrb	ip, [r0]
   11edc:	mov	lr, #0
   11ee0:	sxtb	r3, ip
   11ee4:	cmn	r3, #1
   11ee8:	mov	r3, #49	; 0x31
   11eec:	movwgt	r3, #48	; 0x30
   11ef0:	strb	r3, [r2, lr]
   11ef4:	add	lr, lr, #1
   11ef8:	lsl	ip, ip, #1
   11efc:	cmp	lr, #8
   11f00:	bne	11ee0 <__assert_fail@plt+0xde0>
   11f04:	add	r0, r0, #1
   11f08:	add	r2, r2, #8
   11f0c:	subs	r1, r1, #1
   11f10:	bne	11ed8 <__assert_fail@plt+0xdd8>
   11f14:	pop	{fp, pc}
   11f18:	push	{r4, sl, fp, lr}
   11f1c:	add	fp, sp, #8
   11f20:	mov	r4, r0
   11f24:	bl	12800 <__assert_fail@plt+0x1700>
   11f28:	mov	r0, #0
   11f2c:	str	r0, [r4]
   11f30:	strb	r0, [r4, #4]
   11f34:	pop	{r4, sl, fp, pc}
   11f38:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11f3c:	add	fp, sp, #28
   11f40:	sub	sp, sp, #4
   11f44:	mov	r5, r0
   11f48:	ldr	r8, [fp, #8]
   11f4c:	mov	r9, #0
   11f50:	str	r9, [r8]
   11f54:	cmp	r2, #0
   11f58:	beq	12004 <__assert_fail@plt+0xf04>
   11f5c:	mov	r4, r3
   11f60:	mov	r6, r1
   11f64:	add	r6, r6, #1
   11f68:	rsb	sl, r2, #1
   11f6c:	ldrb	r7, [r6, #-1]
   11f70:	cmp	r7, #10
   11f74:	bne	11f8c <__assert_fail@plt+0xe8c>
   11f78:	add	r6, r6, #1
   11f7c:	add	sl, sl, #1
   11f80:	cmp	sl, #1
   11f84:	bne	11f6c <__assert_fail@plt+0xe6c>
   11f88:	b	11ff8 <__assert_fail@plt+0xef8>
   11f8c:	mov	r0, r7
   11f90:	bl	11eb4 <__assert_fail@plt+0xdb4>
   11f94:	cmp	r0, #0
   11f98:	beq	12018 <__assert_fail@plt+0xf18>
   11f9c:	ldr	r0, [r5]
   11fa0:	cmp	r0, #0
   11fa4:	moveq	r0, #8
   11fa8:	streq	r0, [r5]
   11fac:	ldr	r0, [r5]
   11fb0:	subs	r0, r0, #1
   11fb4:	str	r0, [r5]
   11fb8:	ldrb	r1, [r5, #4]
   11fbc:	sub	r2, r7, #49	; 0x31
   11fc0:	clz	r2, r2
   11fc4:	lsr	r2, r2, #5
   11fc8:	orr	r0, r1, r2, lsl r0
   11fcc:	strb	r0, [r5, #4]
   11fd0:	bne	11fec <__assert_fail@plt+0xeec>
   11fd4:	strb	r0, [r4], #1
   11fd8:	strb	r9, [r5, #4]
   11fdc:	ldr	r0, [r8]
   11fe0:	add	r0, r0, #1
   11fe4:	str	r0, [r8]
   11fe8:	str	r9, [r5]
   11fec:	rsb	r2, sl, #0
   11ff0:	cmp	sl, #0
   11ff4:	bne	11f64 <__assert_fail@plt+0xe64>
   11ff8:	mov	r0, #1
   11ffc:	sub	sp, fp, #28
   12000:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12004:	ldr	r0, [r5]
   12008:	clz	r0, r0
   1200c:	lsr	r0, r0, #5
   12010:	sub	sp, fp, #28
   12014:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12018:	mov	r0, #0
   1201c:	sub	sp, fp, #28
   12020:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12024:	push	{r4, sl, fp, lr}
   12028:	add	fp, sp, #8
   1202c:	cmp	r1, #0
   12030:	popeq	{r4, sl, fp, pc}
   12034:	mov	ip, #24
   12038:	ldrb	lr, [r0]
   1203c:	mov	r3, #0
   12040:	mov	r4, lr
   12044:	bfi	r4, ip, #1, #31
   12048:	strb	r4, [r2, r3]
   1204c:	add	r3, r3, #1
   12050:	ubfx	lr, lr, #1, #7
   12054:	cmp	r3, #8
   12058:	bne	12040 <__assert_fail@plt+0xf40>
   1205c:	add	r0, r0, #1
   12060:	add	r2, r2, #8
   12064:	subs	r1, r1, #1
   12068:	bne	12038 <__assert_fail@plt+0xf38>
   1206c:	pop	{r4, sl, fp, pc}
   12070:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12074:	add	fp, sp, #28
   12078:	sub	sp, sp, #4
   1207c:	mov	r5, r0
   12080:	ldr	r8, [fp, #8]
   12084:	mov	r9, #0
   12088:	str	r9, [r8]
   1208c:	cmp	r2, #0
   12090:	beq	12130 <__assert_fail@plt+0x1030>
   12094:	mov	sl, r3
   12098:	mov	r6, r1
   1209c:	add	r6, r6, #1
   120a0:	rsb	r4, r2, #1
   120a4:	ldrb	r7, [r6, #-1]
   120a8:	cmp	r7, #10
   120ac:	bne	120c4 <__assert_fail@plt+0xfc4>
   120b0:	add	r6, r6, #1
   120b4:	add	r4, r4, #1
   120b8:	cmp	r4, #1
   120bc:	bne	120a4 <__assert_fail@plt+0xfa4>
   120c0:	b	12124 <__assert_fail@plt+0x1024>
   120c4:	mov	r0, r7
   120c8:	bl	11eb4 <__assert_fail@plt+0xdb4>
   120cc:	cmp	r0, #0
   120d0:	beq	12144 <__assert_fail@plt+0x1044>
   120d4:	ldr	r1, [r5]
   120d8:	ldrb	r0, [r5, #4]
   120dc:	sub	r2, r7, #49	; 0x31
   120e0:	clz	r2, r2
   120e4:	lsr	r2, r2, #5
   120e8:	orr	r0, r0, r2, lsl r1
   120ec:	strb	r0, [r5, #4]
   120f0:	add	r1, r1, #1
   120f4:	str	r1, [r5]
   120f8:	cmp	r1, #8
   120fc:	bne	12118 <__assert_fail@plt+0x1018>
   12100:	strb	r0, [sl], #1
   12104:	strb	r9, [r5, #4]
   12108:	ldr	r0, [r8]
   1210c:	add	r0, r0, #1
   12110:	str	r0, [r8]
   12114:	str	r9, [r5]
   12118:	rsb	r2, r4, #0
   1211c:	cmp	r4, #0
   12120:	bne	1209c <__assert_fail@plt+0xf9c>
   12124:	mov	r0, #1
   12128:	sub	sp, fp, #28
   1212c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12130:	ldr	r0, [r5]
   12134:	clz	r0, r0
   12138:	lsr	r0, r0, #5
   1213c:	sub	sp, fp, #28
   12140:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12144:	mov	r0, #0
   12148:	sub	sp, fp, #28
   1214c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12150:	add	r0, r0, r0, lsl #2
   12154:	asr	r1, r0, #31
   12158:	add	r0, r0, r1, lsr #30
   1215c:	asr	r0, r0, #2
   12160:	bx	lr
   12164:	push	{r4, sl, fp, lr}
   12168:	add	fp, sp, #8
   1216c:	mov	r4, r0
   12170:	bl	13bdc <__assert_fail@plt+0x2adc>
   12174:	mov	r1, r0
   12178:	mov	r0, #1
   1217c:	cmp	r1, #0
   12180:	popne	{r4, sl, fp, pc}
   12184:	movw	r0, #31625	; 0x7b89
   12188:	movt	r0, #1
   1218c:	mov	r1, r4
   12190:	mov	r2, #24
   12194:	bl	11064 <memchr@plt>
   12198:	cmp	r0, #0
   1219c:	movwne	r0, #1
   121a0:	pop	{r4, sl, fp, pc}
   121a4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   121a8:	add	fp, sp, #28
   121ac:	sub	sp, sp, #12
   121b0:	cmp	r1, #0
   121b4:	beq	1225c <__assert_fail@plt+0x115c>
   121b8:	mov	r4, r3
   121bc:	mov	r5, r2
   121c0:	mov	r6, #0
   121c4:	add	r7, sp, #8
   121c8:	mov	sl, #85	; 0x55
   121cc:	movw	r8, #32138	; 0x7d8a
   121d0:	movt	r8, #1
   121d4:	mov	r3, #0
   121d8:	ldrb	r2, [r0], #1
   121dc:	strb	r2, [r7, r3]
   121e0:	sub	r1, r1, #1
   121e4:	add	r3, r3, #1
   121e8:	cmp	r3, #4
   121ec:	bne	1224c <__assert_fail@plt+0x114c>
   121f0:	stm	sp, {r0, r1}
   121f4:	ldr	r0, [sp, #8]
   121f8:	rev	r7, r0
   121fc:	mov	r1, #0
   12200:	mov	r9, #4
   12204:	mov	r0, r7
   12208:	mov	r2, #85	; 0x55
   1220c:	mov	r3, #0
   12210:	bl	17058 <__assert_fail@plt+0x5f58>
   12214:	add	r2, r6, r9
   12218:	cmp	r2, r4
   1221c:	mlslt	r2, r0, sl, r7
   12220:	ldrblt	r2, [r8, r2]
   12224:	strblt	r2, [r5, r9]
   12228:	sub	r9, r9, #1
   1222c:	cmn	r9, #1
   12230:	mov	r7, r0
   12234:	bne	12204 <__assert_fail@plt+0x1104>
   12238:	add	r6, r6, #5
   1223c:	add	r5, r5, #5
   12240:	mov	r3, #0
   12244:	ldm	sp, {r0, r1}
   12248:	add	r7, sp, #8
   1224c:	cmp	r1, #0
   12250:	bne	121d8 <__assert_fail@plt+0x10d8>
   12254:	cmp	r3, #0
   12258:	bne	12264 <__assert_fail@plt+0x1164>
   1225c:	sub	sp, fp, #28
   12260:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12264:	movw	r1, #31649	; 0x7ba1
   12268:	movt	r1, #1
   1226c:	mov	r0, #0
   12270:	mov	r2, #5
   12274:	bl	10f2c <dcgettext@plt>
   12278:	mov	r2, r0
   1227c:	mov	r0, #1
   12280:	mov	r1, #0
   12284:	bl	10fa4 <error@plt>
   12288:	push	{r4, sl, fp, lr}
   1228c:	add	fp, sp, #8
   12290:	mov	r4, r0
   12294:	bl	12800 <__assert_fail@plt+0x1700>
   12298:	mov	r0, #1
   1229c:	mov	r1, #0
   122a0:	stm	r4, {r0, r1}
   122a4:	pop	{r4, sl, fp, pc}
   122a8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   122ac:	add	fp, sp, #28
   122b0:	ldr	lr, [fp, #8]
   122b4:	mov	ip, #0
   122b8:	str	ip, [lr]
   122bc:	cmp	r2, #0
   122c0:	beq	123dc <__assert_fail@plt+0x12dc>
   122c4:	movw	sl, #32223	; 0x7ddf
   122c8:	movt	sl, #1
   122cc:	movw	r9, #33969	; 0x84b1
   122d0:	movt	r9, #796	; 0x31c
   122d4:	add	r1, r1, #1
   122d8:	rsb	r6, r2, #1
   122dc:	ldrb	r7, [r1, #-1]
   122e0:	cmp	r7, #10
   122e4:	bne	122fc <__assert_fail@plt+0x11fc>
   122e8:	add	r1, r1, #1
   122ec:	add	r6, r6, #1
   122f0:	cmp	r6, #1
   122f4:	bne	122dc <__assert_fail@plt+0x11dc>
   122f8:	b	123c8 <__assert_fail@plt+0x12c8>
   122fc:	sub	r2, r7, #33	; 0x21
   12300:	uxtb	r8, r2
   12304:	mov	r2, #0
   12308:	cmp	r8, #92	; 0x5c
   1230c:	bhi	123d4 <__assert_fail@plt+0x12d4>
   12310:	add	r7, sl, r7
   12314:	ldrsb	r7, [r7, #-33]	; 0xffffffdf
   12318:	cmp	r7, #0
   1231c:	blt	123d4 <__assert_fail@plt+0x12d4>
   12320:	mov	r4, r0
   12324:	ldr	r5, [r4, #4]!
   12328:	add	r8, r5, #1
   1232c:	mov	r2, r4
   12330:	str	r8, [r2], r5
   12334:	strb	r7, [r2, #4]
   12338:	ldr	r2, [r4]
   1233c:	cmp	r2, #5
   12340:	bne	123bc <__assert_fail@plt+0x12bc>
   12344:	ldrb	r8, [r0, #8]
   12348:	ldrb	r2, [r0, #9]
   1234c:	ldrb	r5, [r0, #10]
   12350:	ldrb	r7, [r0, #11]
   12354:	movw	r4, #24301	; 0x5eed
   12358:	movt	r4, #9
   1235c:	mul	r2, r2, r4
   12360:	movw	r4, #7225	; 0x1c39
   12364:	smlabb	r2, r5, r4, r2
   12368:	mov	r4, #85	; 0x55
   1236c:	smlabb	r2, r7, r4, r2
   12370:	ldrb	r5, [r0, #12]
   12374:	add	r7, r2, r5
   12378:	mov	r2, #0
   1237c:	mov	r5, #0
   12380:	umlal	r7, r5, r8, r9
   12384:	tst	r5, #7
   12388:	bne	123d4 <__assert_fail@plt+0x12d4>
   1238c:	strb	r7, [r3, #3]
   12390:	lsr	r2, r7, #16
   12394:	strb	r2, [r3, #1]
   12398:	lsr	r2, r7, #24
   1239c:	strb	r2, [r3]
   123a0:	lsr	r2, r7, #8
   123a4:	strb	r2, [r3, #2]
   123a8:	ldr	r2, [lr]
   123ac:	add	r2, r2, #4
   123b0:	str	r2, [lr]
   123b4:	str	ip, [r0, #4]
   123b8:	add	r3, r3, #4
   123bc:	rsb	r2, r6, #0
   123c0:	cmp	r6, #0
   123c4:	bne	122d4 <__assert_fail@plt+0x11d4>
   123c8:	ldr	r1, [r0, #4]
   123cc:	str	r1, [r0]
   123d0:	mov	r2, #1
   123d4:	mov	r0, r2
   123d8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   123dc:	ldr	r0, [r0, #4]
   123e0:	cmp	r0, #1
   123e4:	movwlt	ip, #1
   123e8:	mov	r0, ip
   123ec:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   123f0:	push	{fp, lr}
   123f4:	mov	fp, sp
   123f8:	sub	sp, sp, #48	; 0x30
   123fc:	stmib	sp, {r1, r2, r3}
   12400:	mov	r8, r0
   12404:	movw	r5, #37216	; 0x9160
   12408:	movt	r5, #2
   1240c:	ldr	r1, [r5]
   12410:	movw	r0, #4200	; 0x1068
   12414:	blx	r1
   12418:	bl	163b8 <__assert_fail@plt+0x52b8>
   1241c:	mov	r4, r0
   12420:	movw	r0, #4200	; 0x1068
   12424:	bl	163b8 <__assert_fail@plt+0x52b8>
   12428:	mov	r9, r0
   1242c:	mov	sl, #0
   12430:	str	sl, [sp, #40]	; 0x28
   12434:	movw	r0, #37228	; 0x916c
   12438:	movt	r0, #2
   1243c:	ldr	r1, [r0]
   12440:	add	r0, sp, #24
   12444:	blx	r1
   12448:	str	r8, [sp, #16]
   1244c:	ldr	r1, [r5]
   12450:	movw	r0, #4200	; 0x1068
   12454:	blx	r1
   12458:	add	r1, r4, sl
   1245c:	sub	r2, r0, sl
   12460:	mov	r5, r1
   12464:	mov	r0, r1
   12468:	mov	r1, #1
   1246c:	mov	r3, r8
   12470:	bl	110d0 <fread_unlocked@plt>
   12474:	mov	r8, r0
   12478:	cmp	r0, #1
   1247c:	blt	124f0 <__assert_fail@plt+0x13f0>
   12480:	ldr	r0, [sp, #12]
   12484:	cmp	r0, #0
   12488:	beq	124f0 <__assert_fail@plt+0x13f0>
   1248c:	mov	r6, #0
   12490:	add	r7, r6, sl
   12494:	ldrb	r0, [r4, r7]
   12498:	movw	r1, #37220	; 0x9164
   1249c:	movt	r1, #2
   124a0:	ldr	r1, [r1]
   124a4:	blx	r1
   124a8:	cmp	r0, #0
   124ac:	bne	124bc <__assert_fail@plt+0x13bc>
   124b0:	ldrb	r0, [r4, r7]
   124b4:	cmp	r0, #61	; 0x3d
   124b8:	bne	124d4 <__assert_fail@plt+0x13d4>
   124bc:	add	r6, r6, #1
   124c0:	cmp	r8, #1
   124c4:	blt	124f0 <__assert_fail@plt+0x13f0>
   124c8:	cmp	r6, r8
   124cc:	blt	12490 <__assert_fail@plt+0x1390>
   124d0:	b	124f0 <__assert_fail@plt+0x13f0>
   124d4:	sub	r8, r8, #1
   124d8:	sub	r2, r8, r6
   124dc:	add	r0, r5, r6
   124e0:	add	r1, r0, #1
   124e4:	bl	10ecc <memmove@plt>
   124e8:	cmp	r8, #1
   124ec:	bge	124c8 <__assert_fail@plt+0x13c8>
   124f0:	ldr	r0, [sp, #16]
   124f4:	bl	10f8c <ferror_unlocked@plt>
   124f8:	cmp	r0, #0
   124fc:	bne	12650 <__assert_fail@plt+0x1550>
   12500:	add	sl, r8, sl
   12504:	movw	r5, #37216	; 0x9160
   12508:	movt	r5, #2
   1250c:	ldr	r1, [r5]
   12510:	movw	r0, #4200	; 0x1068
   12514:	blx	r1
   12518:	cmp	sl, r0
   1251c:	ldr	r8, [sp, #16]
   12520:	bge	12534 <__assert_fail@plt+0x1434>
   12524:	mov	r0, r8
   12528:	bl	110f4 <feof_unlocked@plt>
   1252c:	cmp	r0, #0
   12530:	beq	1244c <__assert_fail@plt+0x134c>
   12534:	mov	r0, r8
   12538:	bl	110f4 <feof_unlocked@plt>
   1253c:	mov	r6, #0
   12540:	ldr	r5, [sp, #8]
   12544:	cmp	r6, #1
   12548:	ldreq	r0, [sp, #24]
   1254c:	cmpeq	r0, #0
   12550:	beq	125d8 <__assert_fail@plt+0x14d8>
   12554:	movw	r0, #4200	; 0x1068
   12558:	str	r0, [sp, #20]
   1255c:	movw	r0, #37232	; 0x9170
   12560:	movt	r0, #2
   12564:	ldr	r7, [r0]
   12568:	add	r0, sp, #20
   1256c:	str	r0, [sp]
   12570:	cmp	r6, #0
   12574:	mov	r2, #0
   12578:	moveq	r2, sl
   1257c:	add	r0, sp, #24
   12580:	mov	r1, r4
   12584:	mov	r3, r9
   12588:	blx	r7
   1258c:	mov	r7, r0
   12590:	ldr	r2, [sp, #20]
   12594:	mov	r0, r9
   12598:	mov	r1, #1
   1259c:	mov	r3, r5
   125a0:	bl	10f08 <fwrite_unlocked@plt>
   125a4:	ldr	r1, [sp, #20]
   125a8:	cmp	r0, r1
   125ac:	bcc	12600 <__assert_fail@plt+0x1500>
   125b0:	cmp	r7, #0
   125b4:	beq	1262c <__assert_fail@plt+0x152c>
   125b8:	mov	r0, r8
   125bc:	bl	110f4 <feof_unlocked@plt>
   125c0:	cmp	r0, #0
   125c4:	mov	r0, #2
   125c8:	movweq	r0, #1
   125cc:	add	r6, r6, #1
   125d0:	cmp	r6, r0
   125d4:	bcc	12544 <__assert_fail@plt+0x1444>
   125d8:	mov	r0, r8
   125dc:	bl	110f4 <feof_unlocked@plt>
   125e0:	mov	sl, #0
   125e4:	cmp	r0, #0
   125e8:	movw	r5, #37216	; 0x9160
   125ec:	movt	r5, #2
   125f0:	beq	1244c <__assert_fail@plt+0x134c>
   125f4:	mov	r0, r8
   125f8:	ldr	r1, [sp, #4]
   125fc:	bl	12858 <__assert_fail@plt+0x1758>
   12600:	bl	1101c <__errno_location@plt>
   12604:	ldr	r4, [r0]
   12608:	movw	r1, #31716	; 0x7be4
   1260c:	movt	r1, #1
   12610:	mov	r0, #0
   12614:	mov	r2, #5
   12618:	bl	10f2c <dcgettext@plt>
   1261c:	mov	r2, r0
   12620:	mov	r0, #1
   12624:	mov	r1, r4
   12628:	bl	10fa4 <error@plt>
   1262c:	movw	r1, #31728	; 0x7bf0
   12630:	movt	r1, #1
   12634:	mov	r0, #0
   12638:	mov	r2, #5
   1263c:	bl	10f2c <dcgettext@plt>
   12640:	mov	r2, r0
   12644:	mov	r0, #1
   12648:	mov	r1, #0
   1264c:	bl	10fa4 <error@plt>
   12650:	bl	1101c <__errno_location@plt>
   12654:	ldr	r4, [r0]
   12658:	movw	r1, #31705	; 0x7bd9
   1265c:	movt	r1, #1
   12660:	b	12610 <__assert_fail@plt+0x1510>
   12664:	push	{fp, lr}
   12668:	mov	fp, sp
   1266c:	sub	sp, sp, #16
   12670:	mov	sl, r3
   12674:	stmib	sp, {r1, r2}
   12678:	mov	r5, r0
   1267c:	mov	r4, #0
   12680:	str	r4, [fp, #-4]
   12684:	mov	r0, #30720	; 0x7800
   12688:	bl	163b8 <__assert_fail@plt+0x52b8>
   1268c:	mov	r6, r0
   12690:	movw	r8, #37216	; 0x9160
   12694:	movt	r8, #2
   12698:	ldr	r1, [r8]
   1269c:	mov	r0, #30720	; 0x7800
   126a0:	blx	r1
   126a4:	bl	163b8 <__assert_fail@plt+0x52b8>
   126a8:	mov	r7, r0
   126ac:	b	126e8 <__assert_fail@plt+0x15e8>
   126b0:	mov	r0, r5
   126b4:	bl	10f8c <ferror_unlocked@plt>
   126b8:	cmp	r4, #30720	; 0x7800
   126bc:	bne	1277c <__assert_fail@plt+0x167c>
   126c0:	cmp	r0, #0
   126c4:	mov	r4, #0
   126c8:	beq	126e8 <__assert_fail@plt+0x15e8>
   126cc:	b	1277c <__assert_fail@plt+0x167c>
   126d0:	mov	r0, r5
   126d4:	bl	10f8c <ferror_unlocked@plt>
   126d8:	cmp	r4, #30720	; 0x7800
   126dc:	bge	12710 <__assert_fail@plt+0x1610>
   126e0:	cmp	r0, #0
   126e4:	bne	12710 <__assert_fail@plt+0x1610>
   126e8:	add	r0, r6, r4
   126ec:	rsb	r2, r4, #30720	; 0x7800
   126f0:	mov	r1, #1
   126f4:	mov	r3, r5
   126f8:	bl	110d0 <fread_unlocked@plt>
   126fc:	add	r4, r0, r4
   12700:	mov	r0, r5
   12704:	bl	110f4 <feof_unlocked@plt>
   12708:	cmp	r0, #0
   1270c:	beq	126d0 <__assert_fail@plt+0x15d0>
   12710:	cmp	r4, #1
   12714:	blt	1276c <__assert_fail@plt+0x166c>
   12718:	movw	r0, #37224	; 0x9168
   1271c:	movt	r0, #2
   12720:	ldr	r9, [r0]
   12724:	ldr	r1, [r8]
   12728:	mov	r0, r4
   1272c:	blx	r1
   12730:	mov	r3, r0
   12734:	mov	r0, r6
   12738:	mov	r1, r4
   1273c:	mov	r2, r7
   12740:	blx	r9
   12744:	ldr	r1, [r8]
   12748:	mov	r0, r4
   1274c:	blx	r1
   12750:	mov	r1, r0
   12754:	ldr	r0, [sp, #8]
   12758:	str	r0, [sp]
   1275c:	mov	r0, r7
   12760:	mov	r2, sl
   12764:	sub	r3, fp, #4
   12768:	bl	128e8 <__assert_fail@plt+0x17e8>
   1276c:	mov	r0, r5
   12770:	bl	110f4 <feof_unlocked@plt>
   12774:	cmp	r0, #0
   12778:	beq	126b0 <__assert_fail@plt+0x15b0>
   1277c:	cmp	sl, #0
   12780:	beq	127b8 <__assert_fail@plt+0x16b8>
   12784:	ldr	r0, [fp, #-4]
   12788:	cmp	r0, #1
   1278c:	blt	127b8 <__assert_fail@plt+0x16b8>
   12790:	mov	r0, #10
   12794:	ldr	r1, [sp, #8]
   12798:	bl	10f20 <fputc_unlocked@plt>
   1279c:	cmn	r0, #1
   127a0:	bne	127b8 <__assert_fail@plt+0x16b8>
   127a4:	bl	1101c <__errno_location@plt>
   127a8:	ldr	r4, [r0]
   127ac:	movw	r1, #31716	; 0x7be4
   127b0:	movt	r1, #1
   127b4:	b	127e4 <__assert_fail@plt+0x16e4>
   127b8:	mov	r0, r5
   127bc:	bl	10f8c <ferror_unlocked@plt>
   127c0:	cmp	r0, #0
   127c4:	bne	127d4 <__assert_fail@plt+0x16d4>
   127c8:	mov	r0, r5
   127cc:	ldr	r1, [sp, #4]
   127d0:	bl	12858 <__assert_fail@plt+0x1758>
   127d4:	bl	1101c <__errno_location@plt>
   127d8:	ldr	r4, [r0]
   127dc:	movw	r1, #31705	; 0x7bd9
   127e0:	movt	r1, #1
   127e4:	mov	r0, #0
   127e8:	mov	r2, #5
   127ec:	bl	10f2c <dcgettext@plt>
   127f0:	mov	r2, r0
   127f4:	mov	r0, #1
   127f8:	mov	r1, r4
   127fc:	bl	10fa4 <error@plt>
   12800:	push	{r4, sl, fp, lr}
   12804:	add	fp, sp, #8
   12808:	mov	r4, r0
   1280c:	movw	r0, #4200	; 0x1068
   12810:	str	r0, [r4, #20]
   12814:	movw	r0, #4200	; 0x1068
   12818:	bl	163f4 <__assert_fail@plt+0x52f4>
   1281c:	str	r0, [r4, #16]
   12820:	pop	{r4, sl, fp, pc}
   12824:	push	{r4, sl, fp, lr}
   12828:	add	fp, sp, #8
   1282c:	mov	r4, r0
   12830:	ldr	r0, [r0, #20]
   12834:	cmp	r0, r1
   12838:	popge	{r4, sl, fp, pc}
   1283c:	lsl	r1, r1, #1
   12840:	str	r1, [r4, #20]
   12844:	ldr	r0, [r4, #16]
   12848:	mov	r2, #1
   1284c:	bl	16378 <__assert_fail@plt+0x5278>
   12850:	str	r0, [r4, #16]
   12854:	pop	{r4, sl, fp, pc}
   12858:	push	{fp, lr}
   1285c:	mov	fp, sp
   12860:	mov	r5, r1
   12864:	bl	14048 <__assert_fail@plt+0x2f48>
   12868:	cmp	r0, #0
   1286c:	bne	12878 <__assert_fail@plt+0x1778>
   12870:	mov	r0, #0
   12874:	bl	10ff8 <exit@plt>
   12878:	movw	r1, #33185	; 0x81a1
   1287c:	movt	r1, #1
   12880:	mov	r0, r5
   12884:	bl	10ea8 <strcmp@plt>
   12888:	mov	r6, r0
   1288c:	bl	1101c <__errno_location@plt>
   12890:	ldr	r4, [r0]
   12894:	cmp	r6, #0
   12898:	bne	128c0 <__assert_fail@plt+0x17c0>
   1289c:	movw	r1, #31742	; 0x7bfe
   128a0:	movt	r1, #1
   128a4:	mov	r0, #0
   128a8:	mov	r2, #5
   128ac:	bl	10f2c <dcgettext@plt>
   128b0:	mov	r2, r0
   128b4:	mov	r0, #1
   128b8:	mov	r1, r4
   128bc:	bl	10fa4 <error@plt>
   128c0:	mov	r0, #0
   128c4:	mov	r1, #3
   128c8:	mov	r2, r5
   128cc:	bl	15964 <__assert_fail@plt+0x4864>
   128d0:	mov	r3, r0
   128d4:	movw	r2, #30860	; 0x788c
   128d8:	movt	r2, #1
   128dc:	mov	r0, #1
   128e0:	mov	r1, r4
   128e4:	bl	10fa4 <error@plt>
   128e8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   128ec:	add	fp, sp, #28
   128f0:	sub	sp, sp, #4
   128f4:	mov	r4, r1
   128f8:	mov	r9, r0
   128fc:	cmp	r2, #0
   12900:	beq	1299c <__assert_fail@plt+0x189c>
   12904:	cmp	r4, #1
   12908:	blt	129c0 <__assert_fail@plt+0x18c0>
   1290c:	mov	r6, r3
   12910:	mov	r7, r2
   12914:	movw	r8, #37204	; 0x9154
   12918:	movt	r8, #2
   1291c:	mov	sl, #0
   12920:	sub	r5, r4, sl
   12924:	ldr	r0, [r6]
   12928:	sub	r0, r7, r0
   1292c:	cmp	r0, r5
   12930:	movlt	r5, r0
   12934:	cmp	r5, #0
   12938:	beq	12974 <__assert_fail@plt+0x1874>
   1293c:	add	r0, r9, sl
   12940:	ldr	r3, [r8]
   12944:	mov	r1, #1
   12948:	mov	r2, r5
   1294c:	bl	10f08 <fwrite_unlocked@plt>
   12950:	cmp	r0, r5
   12954:	bcc	129c8 <__assert_fail@plt+0x18c8>
   12958:	ldr	r0, [r6]
   1295c:	add	r0, r0, r5
   12960:	str	r0, [r6]
   12964:	add	sl, r5, sl
   12968:	cmp	sl, r4
   1296c:	blt	12920 <__assert_fail@plt+0x1820>
   12970:	b	129c0 <__assert_fail@plt+0x18c0>
   12974:	mov	r0, #10
   12978:	ldr	r1, [fp, #8]
   1297c:	bl	10f20 <fputc_unlocked@plt>
   12980:	cmn	r0, #1
   12984:	beq	129c8 <__assert_fail@plt+0x18c8>
   12988:	mov	r0, #0
   1298c:	str	r0, [r6]
   12990:	cmp	sl, r4
   12994:	blt	12920 <__assert_fail@plt+0x1820>
   12998:	b	129c0 <__assert_fail@plt+0x18c0>
   1299c:	movw	r0, #37204	; 0x9154
   129a0:	movt	r0, #2
   129a4:	ldr	r3, [r0]
   129a8:	mov	r0, r9
   129ac:	mov	r1, #1
   129b0:	mov	r2, r4
   129b4:	bl	10f08 <fwrite_unlocked@plt>
   129b8:	cmp	r0, r4
   129bc:	bcc	129c8 <__assert_fail@plt+0x18c8>
   129c0:	sub	sp, fp, #28
   129c4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   129c8:	bl	1101c <__errno_location@plt>
   129cc:	ldr	r4, [r0]
   129d0:	movw	r1, #31716	; 0x7be4
   129d4:	movt	r1, #1
   129d8:	mov	r0, #0
   129dc:	mov	r2, #5
   129e0:	bl	10f2c <dcgettext@plt>
   129e4:	mov	r2, r0
   129e8:	mov	r0, #1
   129ec:	mov	r1, r4
   129f0:	bl	10fa4 <error@plt>
   129f4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   129f8:	add	fp, sp, #28
   129fc:	sub	sp, sp, #36	; 0x24
   12a00:	str	r2, [sp, #32]
   12a04:	cmp	r1, #0
   12a08:	cmpne	r3, #0
   12a0c:	bne	12a2c <__assert_fail@plt+0x192c>
   12a10:	cmp	r3, #0
   12a14:	beq	12a24 <__assert_fail@plt+0x1924>
   12a18:	mov	r0, #0
   12a1c:	ldr	r1, [sp, #32]
   12a20:	strb	r0, [r1]
   12a24:	sub	sp, fp, #28
   12a28:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12a2c:	mov	r6, r1
   12a30:	mov	r9, r0
   12a34:	sub	r0, r3, #7
   12a38:	str	r0, [sp, #4]
   12a3c:	sub	r0, r3, #6
   12a40:	str	r0, [sp, #8]
   12a44:	sub	r0, r3, #5
   12a48:	str	r0, [sp, #12]
   12a4c:	sub	r0, r3, #4
   12a50:	str	r0, [sp, #16]
   12a54:	sub	r0, r3, #3
   12a58:	str	r0, [sp, #20]
   12a5c:	sub	r0, r3, #2
   12a60:	str	r0, [sp, #24]
   12a64:	sub	r0, r3, #1
   12a68:	str	r0, [sp, #28]
   12a6c:	sub	r0, r3, #8
   12a70:	str	r0, [sp]
   12a74:	mov	r7, #0
   12a78:	movw	r8, #32511	; 0x7eff
   12a7c:	movt	r8, #1
   12a80:	ldrb	r0, [r9]
   12a84:	bl	12ca0 <__assert_fail@plt+0x1ba0>
   12a88:	ldrb	r0, [r8, r0, lsr #3]
   12a8c:	ldr	r4, [sp, #32]
   12a90:	strb	r0, [r4, r7]!
   12a94:	ldr	r0, [sp, #28]
   12a98:	cmp	r0, r7
   12a9c:	beq	12a24 <__assert_fail@plt+0x1924>
   12aa0:	ldrb	r0, [r9]
   12aa4:	bl	12ca0 <__assert_fail@plt+0x1ba0>
   12aa8:	lsl	r5, r0, #2
   12aac:	mov	r0, #0
   12ab0:	cmp	r6, #1
   12ab4:	beq	12ac4 <__assert_fail@plt+0x19c4>
   12ab8:	ldrb	r0, [r9, #1]
   12abc:	bl	12ca0 <__assert_fail@plt+0x1ba0>
   12ac0:	lsr	r0, r0, #6
   12ac4:	add	r0, r0, r5
   12ac8:	and	r0, r0, #31
   12acc:	ldrb	r0, [r8, r0]
   12ad0:	strb	r0, [r4, #1]
   12ad4:	ldr	r0, [sp, #24]
   12ad8:	cmp	r0, r7
   12adc:	beq	12a24 <__assert_fail@plt+0x1924>
   12ae0:	mov	r0, #61	; 0x3d
   12ae4:	cmp	r6, #1
   12ae8:	beq	12afc <__assert_fail@plt+0x19fc>
   12aec:	ldrb	r0, [r9, #1]
   12af0:	bl	12ca0 <__assert_fail@plt+0x1ba0>
   12af4:	ubfx	r0, r0, #1, #5
   12af8:	ldrb	r0, [r8, r0]
   12afc:	strb	r0, [r4, #2]
   12b00:	ldr	r0, [sp, #20]
   12b04:	cmp	r0, r7
   12b08:	beq	12a24 <__assert_fail@plt+0x1924>
   12b0c:	cmp	r6, #1
   12b10:	beq	12b38 <__assert_fail@plt+0x1a38>
   12b14:	ldrb	r0, [r9, #1]
   12b18:	bl	12ca0 <__assert_fail@plt+0x1ba0>
   12b1c:	subs	r6, r6, #2
   12b20:	lsl	r5, r0, #4
   12b24:	beq	12b44 <__assert_fail@plt+0x1a44>
   12b28:	ldrb	r0, [r9, #2]
   12b2c:	bl	12ca0 <__assert_fail@plt+0x1ba0>
   12b30:	lsr	r0, r0, #4
   12b34:	b	12b48 <__assert_fail@plt+0x1a48>
   12b38:	mov	r0, #61	; 0x3d
   12b3c:	mov	r6, #0
   12b40:	b	12b54 <__assert_fail@plt+0x1a54>
   12b44:	mov	r0, #0
   12b48:	add	r0, r0, r5
   12b4c:	and	r0, r0, #31
   12b50:	ldrb	r0, [r8, r0]
   12b54:	strb	r0, [r4, #3]
   12b58:	ldr	r0, [sp, #16]
   12b5c:	cmp	r0, r7
   12b60:	beq	12a24 <__assert_fail@plt+0x1924>
   12b64:	cmp	r6, #0
   12b68:	beq	12b90 <__assert_fail@plt+0x1a90>
   12b6c:	ldrb	r0, [r9, #2]
   12b70:	bl	12ca0 <__assert_fail@plt+0x1ba0>
   12b74:	subs	r6, r6, #1
   12b78:	lsl	r5, r0, #1
   12b7c:	beq	12b9c <__assert_fail@plt+0x1a9c>
   12b80:	ldrb	r0, [r9, #3]
   12b84:	bl	12ca0 <__assert_fail@plt+0x1ba0>
   12b88:	lsr	r0, r0, #7
   12b8c:	b	12ba0 <__assert_fail@plt+0x1aa0>
   12b90:	mov	r0, #61	; 0x3d
   12b94:	mov	r6, #0
   12b98:	b	12bac <__assert_fail@plt+0x1aac>
   12b9c:	mov	r0, #0
   12ba0:	add	r0, r0, r5
   12ba4:	and	r0, r0, #31
   12ba8:	ldrb	r0, [r8, r0]
   12bac:	strb	r0, [r4, #4]
   12bb0:	ldr	r0, [sp, #12]
   12bb4:	cmp	r0, r7
   12bb8:	beq	12a24 <__assert_fail@plt+0x1924>
   12bbc:	cmp	r6, #0
   12bc0:	beq	12bd8 <__assert_fail@plt+0x1ad8>
   12bc4:	ldrb	r0, [r9, #3]
   12bc8:	bl	12ca0 <__assert_fail@plt+0x1ba0>
   12bcc:	ubfx	r0, r0, #2, #5
   12bd0:	ldrb	r0, [r8, r0]
   12bd4:	b	12bdc <__assert_fail@plt+0x1adc>
   12bd8:	mov	r0, #61	; 0x3d
   12bdc:	strb	r0, [r4, #5]
   12be0:	ldr	r0, [sp, #8]
   12be4:	cmp	r0, r7
   12be8:	beq	12a24 <__assert_fail@plt+0x1924>
   12bec:	cmp	r6, #0
   12bf0:	beq	12c18 <__assert_fail@plt+0x1b18>
   12bf4:	ldrb	r0, [r9, #3]
   12bf8:	bl	12ca0 <__assert_fail@plt+0x1ba0>
   12bfc:	subs	sl, r6, #1
   12c00:	lsl	r5, r0, #3
   12c04:	beq	12c24 <__assert_fail@plt+0x1b24>
   12c08:	ldrb	r0, [r9, #4]
   12c0c:	bl	12ca0 <__assert_fail@plt+0x1ba0>
   12c10:	lsr	r0, r0, #5
   12c14:	b	12c28 <__assert_fail@plt+0x1b28>
   12c18:	mov	r0, #61	; 0x3d
   12c1c:	mov	sl, #0
   12c20:	b	12c34 <__assert_fail@plt+0x1b34>
   12c24:	mov	r0, #0
   12c28:	add	r0, r0, r5
   12c2c:	and	r0, r0, #31
   12c30:	ldrb	r0, [r8, r0]
   12c34:	strb	r0, [r4, #6]
   12c38:	ldr	r0, [sp, #4]
   12c3c:	cmp	r0, r7
   12c40:	beq	12a24 <__assert_fail@plt+0x1924>
   12c44:	cmp	sl, #0
   12c48:	beq	12c60 <__assert_fail@plt+0x1b60>
   12c4c:	ldrb	r0, [r9, #4]
   12c50:	bl	12ca0 <__assert_fail@plt+0x1ba0>
   12c54:	and	r0, r0, #31
   12c58:	ldrb	r0, [r8, r0]
   12c5c:	b	12c64 <__assert_fail@plt+0x1b64>
   12c60:	mov	r0, #61	; 0x3d
   12c64:	strb	r0, [r4, #7]
   12c68:	ldr	r0, [sp]
   12c6c:	cmp	r0, r7
   12c70:	beq	12a24 <__assert_fail@plt+0x1924>
   12c74:	sub	r6, sl, #1
   12c78:	cmp	sl, #0
   12c7c:	movne	sl, r6
   12c80:	cmp	sl, #0
   12c84:	addne	r9, r9, #5
   12c88:	add	r7, r7, #8
   12c8c:	bne	12a80 <__assert_fail@plt+0x1980>
   12c90:	ldr	r0, [sp, #32]
   12c94:	add	r0, r0, r7
   12c98:	str	r0, [sp, #32]
   12c9c:	b	12a18 <__assert_fail@plt+0x1918>
   12ca0:	bx	lr
   12ca4:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   12ca8:	add	fp, sp, #24
   12cac:	mov	r6, r2
   12cb0:	mov	r4, r1
   12cb4:	mov	r8, r0
   12cb8:	movw	r0, #26215	; 0x6667
   12cbc:	movt	r0, #26214	; 0x6666
   12cc0:	smmul	r0, r1, r0
   12cc4:	asr	r1, r0, #1
   12cc8:	add	r0, r1, r0, lsr #31
   12ccc:	add	r1, r0, r0, lsl #2
   12cd0:	subs	r1, r4, r1
   12cd4:	addne	r0, r0, #1
   12cd8:	cmn	r0, #1
   12cdc:	ble	12cec <__assert_fail@plt+0x1bec>
   12ce0:	cmn	r0, #-268435455	; 0xf0000001
   12ce4:	ble	12d00 <__assert_fail@plt+0x1c00>
   12ce8:	b	12d44 <__assert_fail@plt+0x1c44>
   12cec:	beq	12d00 <__assert_fail@plt+0x1c00>
   12cf0:	mov	r1, #-2147483648	; 0x80000000
   12cf4:	sdiv	r1, r1, r0
   12cf8:	cmp	r1, #8
   12cfc:	blt	12d44 <__assert_fail@plt+0x1c44>
   12d00:	cmn	r4, #1
   12d04:	ble	12d44 <__assert_fail@plt+0x1c44>
   12d08:	lsl	r7, r0, #3
   12d0c:	orr	r5, r7, #1
   12d10:	mov	r0, r5
   12d14:	bl	14238 <__assert_fail@plt+0x3138>
   12d18:	str	r0, [r6]
   12d1c:	cmp	r0, #0
   12d20:	moveq	r0, r5
   12d24:	popeq	{r4, r5, r6, r7, r8, sl, fp, pc}
   12d28:	mov	r2, r0
   12d2c:	mov	r0, r8
   12d30:	mov	r1, r4
   12d34:	mov	r3, r5
   12d38:	bl	129f4 <__assert_fail@plt+0x18f4>
   12d3c:	mov	r0, r7
   12d40:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   12d44:	mov	r7, #0
   12d48:	str	r7, [r6]
   12d4c:	mov	r0, r7
   12d50:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   12d54:	push	{fp, lr}
   12d58:	mov	fp, sp
   12d5c:	bl	12ca0 <__assert_fail@plt+0x1ba0>
   12d60:	movw	r1, #32543	; 0x7f1f
   12d64:	movt	r1, #1
   12d68:	add	r0, r1, r0
   12d6c:	ldrsb	r1, [r0]
   12d70:	mov	r0, #0
   12d74:	cmn	r1, #1
   12d78:	movwgt	r0, #1
   12d7c:	pop	{fp, pc}
   12d80:	mov	r1, #0
   12d84:	str	r1, [r0]
   12d88:	bx	lr
   12d8c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12d90:	add	fp, sp, #28
   12d94:	sub	sp, sp, #28
   12d98:	mov	r9, r0
   12d9c:	str	r2, [sp, #20]
   12da0:	str	r1, [sp, #24]
   12da4:	str	r3, [sp, #16]
   12da8:	ldr	r0, [fp, #8]
   12dac:	ldr	r0, [r0]
   12db0:	str	r0, [sp, #12]
   12db4:	mov	r0, #0
   12db8:	cmp	r9, #0
   12dbc:	mov	r4, #0
   12dc0:	beq	12dd8 <__assert_fail@plt+0x1cd8>
   12dc4:	clz	r0, r2
   12dc8:	lsr	r4, r0, #5
   12dcc:	ldr	r0, [r9]
   12dd0:	cmp	r0, #0
   12dd4:	movwne	r0, #1
   12dd8:	orr	r8, r0, r4
   12ddc:	clz	r0, r9
   12de0:	lsr	r0, r0, #5
   12de4:	str	r0, [sp, #8]
   12de8:	add	r7, sp, #16
   12dec:	add	r5, sp, #12
   12df0:	str	r4, [sp, #4]
   12df4:	b	12e04 <__assert_fail@plt+0x1d04>
   12df8:	ldr	r0, [sp, #24]
   12dfc:	sub	r0, r6, r0
   12e00:	str	r0, [sp, #20]
   12e04:	ldr	sl, [sp, #12]
   12e08:	cmp	r8, #0
   12e0c:	beq	12e18 <__assert_fail@plt+0x1d18>
   12e10:	ldr	r6, [sp, #20]
   12e14:	b	12e70 <__assert_fail@plt+0x1d70>
   12e18:	ldr	r6, [sp, #20]
   12e1c:	ldr	r4, [sp, #24]
   12e20:	mov	r0, r4
   12e24:	mov	r1, r6
   12e28:	mov	r2, r7
   12e2c:	mov	r3, r5
   12e30:	bl	12f70 <__assert_fail@plt+0x1e70>
   12e34:	cmp	r0, #0
   12e38:	beq	12e6c <__assert_fail@plt+0x1d6c>
   12e3c:	ldr	sl, [sp, #12]
   12e40:	add	r4, r4, #8
   12e44:	sub	r6, r6, #8
   12e48:	mov	r0, r4
   12e4c:	mov	r1, r6
   12e50:	mov	r2, r7
   12e54:	mov	r3, r5
   12e58:	bl	12f70 <__assert_fail@plt+0x1e70>
   12e5c:	cmp	r0, #0
   12e60:	bne	12e3c <__assert_fail@plt+0x1d3c>
   12e64:	str	r6, [sp, #20]
   12e68:	str	r4, [sp, #24]
   12e6c:	ldr	r4, [sp, #4]
   12e70:	cmp	r6, #0
   12e74:	mov	r0, r6
   12e78:	movwne	r0, #1
   12e7c:	orr	r0, r4, r0
   12e80:	cmp	r0, #1
   12e84:	bne	12f44 <__assert_fail@plt+0x1e44>
   12e88:	cmp	r6, #0
   12e8c:	beq	12eac <__assert_fail@plt+0x1dac>
   12e90:	ldr	r0, [sp, #24]
   12e94:	ldrb	r1, [r0]
   12e98:	subs	r1, r1, #10
   12e9c:	movwne	r1, #1
   12ea0:	ldr	r2, [sp, #8]
   12ea4:	orrs	r1, r1, r2
   12ea8:	beq	12f28 <__assert_fail@plt+0x1e28>
   12eac:	ldr	r0, [sp, #12]
   12eb0:	str	sl, [sp, #12]
   12eb4:	sub	r0, r0, sl
   12eb8:	ldr	r1, [sp, #16]
   12ebc:	add	r0, r1, r0
   12ec0:	str	r0, [sp, #16]
   12ec4:	ldr	r0, [sp, #24]
   12ec8:	add	r6, r0, r6
   12ecc:	cmp	r9, #0
   12ed0:	beq	12ee8 <__assert_fail@plt+0x1de8>
   12ed4:	mov	r0, r9
   12ed8:	add	r1, sp, #24
   12edc:	mov	r2, r6
   12ee0:	add	r3, sp, #20
   12ee4:	bl	13258 <__assert_fail@plt+0x2158>
   12ee8:	ldr	r1, [sp, #20]
   12eec:	cmp	r1, #0
   12ef0:	beq	12f3c <__assert_fail@plt+0x1e3c>
   12ef4:	cmp	r1, #7
   12ef8:	mov	r2, #0
   12efc:	movwgt	r2, #1
   12f00:	orr	r2, r4, r2
   12f04:	ldr	r3, [sp, #8]
   12f08:	orrs	r2, r2, r3
   12f0c:	beq	12f3c <__assert_fail@plt+0x1e3c>
   12f10:	mov	r2, r7
   12f14:	mov	r3, r5
   12f18:	bl	12f70 <__assert_fail@plt+0x1e70>
   12f1c:	cmp	r0, #0
   12f20:	bne	12df8 <__assert_fail@plt+0x1cf8>
   12f24:	b	12f44 <__assert_fail@plt+0x1e44>
   12f28:	add	r0, r0, #1
   12f2c:	str	r0, [sp, #24]
   12f30:	sub	r0, r6, #1
   12f34:	str	r0, [sp, #20]
   12f38:	b	12e04 <__assert_fail@plt+0x1d04>
   12f3c:	mov	r0, #0
   12f40:	str	r0, [sp, #20]
   12f44:	ldr	r0, [fp, #8]
   12f48:	mov	r2, r0
   12f4c:	ldr	r0, [r0]
   12f50:	ldr	r1, [sp, #12]
   12f54:	sub	r0, r0, r1
   12f58:	str	r0, [r2]
   12f5c:	ldr	r0, [sp, #20]
   12f60:	clz	r0, r0
   12f64:	lsr	r0, r0, #5
   12f68:	sub	sp, fp, #28
   12f6c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12f70:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12f74:	add	fp, sp, #28
   12f78:	sub	sp, sp, #4
   12f7c:	mov	r5, #0
   12f80:	cmp	r1, #8
   12f84:	blt	130cc <__assert_fail@plt+0x1fcc>
   12f88:	mov	sl, r3
   12f8c:	mov	r8, r2
   12f90:	mov	r6, r0
   12f94:	ldr	r9, [r2]
   12f98:	ldrb	r7, [r0]
   12f9c:	mov	r0, r7
   12fa0:	bl	12d54 <__assert_fail@plt+0x1c54>
   12fa4:	cmp	r0, #0
   12fa8:	beq	130cc <__assert_fail@plt+0x1fcc>
   12fac:	ldrb	r4, [r6, #1]
   12fb0:	mov	r0, r4
   12fb4:	bl	12d54 <__assert_fail@plt+0x1c54>
   12fb8:	cmp	r0, #0
   12fbc:	beq	130cc <__assert_fail@plt+0x1fcc>
   12fc0:	ldr	r0, [sl]
   12fc4:	cmp	r0, #0
   12fc8:	beq	13008 <__assert_fail@plt+0x1f08>
   12fcc:	mov	r0, r7
   12fd0:	bl	12ca0 <__assert_fail@plt+0x1ba0>
   12fd4:	mov	r0, r4
   12fd8:	bl	12ca0 <__assert_fail@plt+0x1ba0>
   12fdc:	movw	r0, #32543	; 0x7f1f
   12fe0:	movt	r0, #1
   12fe4:	ldrb	r1, [r0, r7]
   12fe8:	add	r0, r0, r4
   12fec:	ldrsb	r0, [r0]
   12ff0:	lsr	r0, r0, #2
   12ff4:	orr	r0, r0, r1, lsl #3
   12ff8:	strb	r0, [r9], #1
   12ffc:	ldr	r0, [sl]
   13000:	sub	r0, r0, #1
   13004:	str	r0, [sl]
   13008:	ldrb	r7, [r6, #2]
   1300c:	cmp	r7, #61	; 0x3d
   13010:	bne	1302c <__assert_fail@plt+0x1f2c>
   13014:	ldrb	r0, [r6, #3]
   13018:	cmp	r0, #61	; 0x3d
   1301c:	ldrbeq	r0, [r6, #4]
   13020:	cmpeq	r0, #61	; 0x3d
   13024:	bne	130c8 <__assert_fail@plt+0x1fc8>
   13028:	b	130b4 <__assert_fail@plt+0x1fb4>
   1302c:	mov	r0, r7
   13030:	bl	12d54 <__assert_fail@plt+0x1c54>
   13034:	cmp	r0, #0
   13038:	beq	130c8 <__assert_fail@plt+0x1fc8>
   1303c:	ldrb	r0, [r6, #3]
   13040:	str	r0, [sp]
   13044:	bl	12d54 <__assert_fail@plt+0x1c54>
   13048:	cmp	r0, #0
   1304c:	beq	130c8 <__assert_fail@plt+0x1fc8>
   13050:	ldr	r0, [sl]
   13054:	cmp	r0, #0
   13058:	beq	130a8 <__assert_fail@plt+0x1fa8>
   1305c:	mov	r0, r4
   13060:	bl	12ca0 <__assert_fail@plt+0x1ba0>
   13064:	mov	r0, r7
   13068:	bl	12ca0 <__assert_fail@plt+0x1ba0>
   1306c:	ldr	r0, [sp]
   13070:	bl	12ca0 <__assert_fail@plt+0x1ba0>
   13074:	movw	r3, #32543	; 0x7f1f
   13078:	movt	r3, #1
   1307c:	ldrb	r1, [r3, r4]
   13080:	ldrb	r2, [r3, r7]
   13084:	lsl	r2, r2, #1
   13088:	orr	r1, r2, r1, lsl #6
   1308c:	add	r0, r3, r0
   13090:	ldrsb	r0, [r0]
   13094:	orr	r0, r1, r0, lsr #4
   13098:	strb	r0, [r9], #1
   1309c:	ldr	r0, [sl]
   130a0:	sub	r0, r0, #1
   130a4:	str	r0, [sl]
   130a8:	ldrb	r4, [r6, #4]
   130ac:	cmp	r4, #61	; 0x3d
   130b0:	bne	130d8 <__assert_fail@plt+0x1fd8>
   130b4:	ldrb	r0, [r6, #5]
   130b8:	cmp	r0, #61	; 0x3d
   130bc:	ldrbeq	r0, [r6, #6]
   130c0:	cmpeq	r0, #61	; 0x3d
   130c4:	beq	13158 <__assert_fail@plt+0x2058>
   130c8:	str	r9, [r8]
   130cc:	mov	r0, r5
   130d0:	sub	sp, fp, #28
   130d4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   130d8:	mov	r0, r4
   130dc:	bl	12d54 <__assert_fail@plt+0x1c54>
   130e0:	cmp	r0, #0
   130e4:	beq	130c8 <__assert_fail@plt+0x1fc8>
   130e8:	ldr	r0, [sl]
   130ec:	cmp	r0, #0
   130f0:	beq	13134 <__assert_fail@plt+0x2034>
   130f4:	ldr	r7, [sp]
   130f8:	mov	r0, r7
   130fc:	bl	12ca0 <__assert_fail@plt+0x1ba0>
   13100:	mov	r0, r4
   13104:	bl	12ca0 <__assert_fail@plt+0x1ba0>
   13108:	movw	r0, #32543	; 0x7f1f
   1310c:	movt	r0, #1
   13110:	ldrb	r1, [r0, r7]
   13114:	add	r0, r0, r4
   13118:	ldrsb	r0, [r0]
   1311c:	lsr	r0, r0, #1
   13120:	orr	r0, r0, r1, lsl #4
   13124:	strb	r0, [r9], #1
   13128:	ldr	r0, [sl]
   1312c:	sub	r0, r0, #1
   13130:	str	r0, [sl]
   13134:	ldrb	r4, [r6, #5]
   13138:	cmp	r4, #61	; 0x3d
   1313c:	bne	13170 <__assert_fail@plt+0x2070>
   13140:	ldrb	r0, [r6, #6]
   13144:	cmp	r0, #61	; 0x3d
   13148:	ldrbeq	r0, [r6, #7]
   1314c:	cmpeq	r0, #61	; 0x3d
   13150:	bne	130c8 <__assert_fail@plt+0x1fc8>
   13154:	b	13164 <__assert_fail@plt+0x2064>
   13158:	ldrb	r0, [r6, #7]
   1315c:	cmp	r0, #61	; 0x3d
   13160:	bne	130c8 <__assert_fail@plt+0x1fc8>
   13164:	str	r9, [r8]
   13168:	mov	r5, #1
   1316c:	b	130cc <__assert_fail@plt+0x1fcc>
   13170:	mov	r0, r4
   13174:	bl	12d54 <__assert_fail@plt+0x1c54>
   13178:	cmp	r0, #0
   1317c:	beq	130c8 <__assert_fail@plt+0x1fc8>
   13180:	ldrb	r7, [r6, #6]
   13184:	mov	r0, r7
   13188:	bl	12d54 <__assert_fail@plt+0x1c54>
   1318c:	cmp	r0, #0
   13190:	beq	130c8 <__assert_fail@plt+0x1fc8>
   13194:	ldr	r0, [sl]
   13198:	cmp	r0, #0
   1319c:	beq	131f4 <__assert_fail@plt+0x20f4>
   131a0:	ldrb	r0, [r6, #4]
   131a4:	str	r0, [sp]
   131a8:	bl	12ca0 <__assert_fail@plt+0x1ba0>
   131ac:	mov	r0, r4
   131b0:	bl	12ca0 <__assert_fail@plt+0x1ba0>
   131b4:	mov	r0, r7
   131b8:	bl	12ca0 <__assert_fail@plt+0x1ba0>
   131bc:	movw	r0, #32543	; 0x7f1f
   131c0:	movt	r0, #1
   131c4:	ldr	r1, [sp]
   131c8:	ldrb	r1, [r0, r1]
   131cc:	ldrb	r2, [r0, r4]
   131d0:	lsl	r2, r2, #2
   131d4:	orr	r1, r2, r1, lsl #7
   131d8:	add	r0, r0, r7
   131dc:	ldrsb	r0, [r0]
   131e0:	orr	r0, r1, r0, lsr #3
   131e4:	strb	r0, [r9], #1
   131e8:	ldr	r0, [sl]
   131ec:	sub	r0, r0, #1
   131f0:	str	r0, [sl]
   131f4:	ldrb	r4, [r6, #7]
   131f8:	cmp	r4, #61	; 0x3d
   131fc:	beq	13164 <__assert_fail@plt+0x2064>
   13200:	mov	r0, r4
   13204:	bl	12d54 <__assert_fail@plt+0x1c54>
   13208:	cmp	r0, #0
   1320c:	beq	130c8 <__assert_fail@plt+0x1fc8>
   13210:	ldr	r0, [sl]
   13214:	cmp	r0, #0
   13218:	beq	13164 <__assert_fail@plt+0x2064>
   1321c:	ldrb	r5, [r6, #6]
   13220:	mov	r0, r5
   13224:	bl	12ca0 <__assert_fail@plt+0x1ba0>
   13228:	mov	r0, r4
   1322c:	bl	12ca0 <__assert_fail@plt+0x1ba0>
   13230:	movw	r0, #32543	; 0x7f1f
   13234:	movt	r0, #1
   13238:	ldrb	r1, [r0, r4]
   1323c:	ldrb	r0, [r0, r5]
   13240:	orr	r0, r1, r0, lsl #5
   13244:	strb	r0, [r9], #1
   13248:	ldr	r0, [sl]
   1324c:	sub	r0, r0, #1
   13250:	str	r0, [sl]
   13254:	b	13164 <__assert_fail@plt+0x2064>
   13258:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1325c:	add	fp, sp, #24
   13260:	mov	r8, r3
   13264:	mov	r7, r2
   13268:	mov	r6, r1
   1326c:	mov	r4, r0
   13270:	ldr	r0, [r0]
   13274:	cmp	r0, #0
   13278:	beq	1328c <__assert_fail@plt+0x218c>
   1327c:	cmp	r0, #8
   13280:	bne	132b8 <__assert_fail@plt+0x21b8>
   13284:	mov	r0, #0
   13288:	str	r0, [r4]
   1328c:	ldr	r5, [r6]
   13290:	sub	r0, r7, r5
   13294:	cmp	r0, #8
   13298:	blt	132b8 <__assert_fail@plt+0x21b8>
   1329c:	mov	r9, #8
   132a0:	mov	r0, r5
   132a4:	mov	r1, #10
   132a8:	mov	r2, #8
   132ac:	bl	11064 <memchr@plt>
   132b0:	cmp	r0, #0
   132b4:	beq	13308 <__assert_fail@plt+0x2208>
   132b8:	ldr	r0, [r6]
   132bc:	cmp	r0, r7
   132c0:	bcs	132f4 <__assert_fail@plt+0x21f4>
   132c4:	add	r0, r0, #1
   132c8:	ldrb	r1, [r0, #-1]
   132cc:	cmp	r1, #10
   132d0:	beq	132bc <__assert_fail@plt+0x21bc>
   132d4:	ldr	r2, [r4]
   132d8:	add	r3, r2, #1
   132dc:	mov	r5, r4
   132e0:	str	r3, [r5], r2
   132e4:	strb	r1, [r5, #4]
   132e8:	ldr	r1, [r4]
   132ec:	cmp	r1, #8
   132f0:	bne	132bc <__assert_fail@plt+0x21bc>
   132f4:	str	r0, [r6]
   132f8:	ldr	r0, [r4], #4
   132fc:	str	r0, [r8]
   13300:	mov	r0, r4
   13304:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   13308:	add	r0, r5, #8
   1330c:	str	r0, [r6]
   13310:	str	r9, [r8]
   13314:	mov	r0, r5
   13318:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1331c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   13320:	add	fp, sp, #24
   13324:	sub	sp, sp, #8
   13328:	mov	r4, r3
   1332c:	mov	r6, r2
   13330:	mov	r8, r1
   13334:	mov	r7, r0
   13338:	asr	r0, r2, #3
   1333c:	add	r0, r0, r0, lsl #2
   13340:	add	r0, r0, #5
   13344:	str	r0, [sp, #4]
   13348:	bl	14238 <__assert_fail@plt+0x3138>
   1334c:	str	r0, [r4]
   13350:	mov	r5, #1
   13354:	cmp	r0, #0
   13358:	beq	133a4 <__assert_fail@plt+0x22a4>
   1335c:	mov	r3, r0
   13360:	add	r0, sp, #4
   13364:	str	r0, [sp]
   13368:	mov	r0, r7
   1336c:	mov	r1, r8
   13370:	mov	r2, r6
   13374:	bl	12d8c <__assert_fail@plt+0x1c8c>
   13378:	cmp	r0, #0
   1337c:	beq	13394 <__assert_fail@plt+0x2294>
   13380:	ldr	r0, [fp, #8]
   13384:	cmp	r0, #0
   13388:	ldrne	r1, [sp, #4]
   1338c:	strne	r1, [r0]
   13390:	b	133a4 <__assert_fail@plt+0x22a4>
   13394:	ldr	r0, [r4]
   13398:	bl	14150 <__assert_fail@plt+0x3050>
   1339c:	mov	r5, #0
   133a0:	str	r5, [r4]
   133a4:	mov	r0, r5
   133a8:	sub	sp, fp, #24
   133ac:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   133b0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   133b4:	add	fp, sp, #28
   133b8:	sub	sp, sp, #20
   133bc:	mov	r9, r2
   133c0:	mov	r6, r1
   133c4:	mov	r5, r0
   133c8:	tst	r3, #3
   133cc:	bne	133f8 <__assert_fail@plt+0x22f8>
   133d0:	asr	r0, r3, #2
   133d4:	add	r0, r0, r0, lsl #1
   133d8:	cmp	r0, r6
   133dc:	bne	133f8 <__assert_fail@plt+0x22f8>
   133e0:	mov	r0, r5
   133e4:	mov	r1, r6
   133e8:	mov	r2, r9
   133ec:	sub	sp, fp, #28
   133f0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   133f4:	b	13554 <__assert_fail@plt+0x2454>
   133f8:	cmp	r6, #0
   133fc:	cmpne	r3, #0
   13400:	bne	1341c <__assert_fail@plt+0x231c>
   13404:	cmp	r3, #0
   13408:	beq	13414 <__assert_fail@plt+0x2314>
   1340c:	mov	r0, #0
   13410:	strb	r0, [r9]
   13414:	sub	sp, fp, #28
   13418:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1341c:	sub	r0, r3, #3
   13420:	str	r0, [sp, #8]
   13424:	sub	r0, r3, #2
   13428:	str	r0, [sp, #12]
   1342c:	sub	r0, r3, #1
   13430:	str	r0, [sp, #16]
   13434:	sub	r0, r3, #4
   13438:	str	r0, [sp, #4]
   1343c:	mov	r7, #0
   13440:	movw	r8, #32799	; 0x801f
   13444:	movt	r8, #1
   13448:	ldrb	r0, [r5]
   1344c:	bl	135e0 <__assert_fail@plt+0x24e0>
   13450:	ldrb	r0, [r8, r0, lsr #2]
   13454:	mov	r4, r9
   13458:	strb	r0, [r4, r7]!
   1345c:	ldr	r0, [sp, #16]
   13460:	cmp	r0, r7
   13464:	beq	13414 <__assert_fail@plt+0x2314>
   13468:	ldrb	r0, [r5]
   1346c:	bl	135e0 <__assert_fail@plt+0x24e0>
   13470:	lsl	sl, r0, #4
   13474:	mov	r0, #0
   13478:	cmp	r6, #1
   1347c:	beq	1348c <__assert_fail@plt+0x238c>
   13480:	ldrb	r0, [r5, #1]
   13484:	bl	135e0 <__assert_fail@plt+0x24e0>
   13488:	lsr	r0, r0, #4
   1348c:	add	r0, r0, sl
   13490:	and	r0, r0, #63	; 0x3f
   13494:	ldrb	r0, [r8, r0]
   13498:	strb	r0, [r4, #1]
   1349c:	ldr	r0, [sp, #12]
   134a0:	cmp	r0, r7
   134a4:	beq	13414 <__assert_fail@plt+0x2314>
   134a8:	cmp	r6, #1
   134ac:	beq	134d4 <__assert_fail@plt+0x23d4>
   134b0:	ldrb	r0, [r5, #1]
   134b4:	bl	135e0 <__assert_fail@plt+0x24e0>
   134b8:	subs	sl, r6, #2
   134bc:	lsl	r6, r0, #2
   134c0:	beq	134e0 <__assert_fail@plt+0x23e0>
   134c4:	ldrb	r0, [r5, #2]
   134c8:	bl	135e0 <__assert_fail@plt+0x24e0>
   134cc:	lsr	r0, r0, #6
   134d0:	b	134e4 <__assert_fail@plt+0x23e4>
   134d4:	mov	r0, #61	; 0x3d
   134d8:	mov	sl, #0
   134dc:	b	134f0 <__assert_fail@plt+0x23f0>
   134e0:	mov	r0, #0
   134e4:	add	r0, r0, r6
   134e8:	and	r0, r0, #63	; 0x3f
   134ec:	ldrb	r0, [r8, r0]
   134f0:	strb	r0, [r4, #2]
   134f4:	ldr	r0, [sp, #8]
   134f8:	cmp	r0, r7
   134fc:	beq	13414 <__assert_fail@plt+0x2314>
   13500:	cmp	sl, #0
   13504:	beq	1351c <__assert_fail@plt+0x241c>
   13508:	ldrb	r0, [r5, #2]
   1350c:	bl	135e0 <__assert_fail@plt+0x24e0>
   13510:	and	r0, r0, #63	; 0x3f
   13514:	ldrb	r0, [r8, r0]
   13518:	b	13520 <__assert_fail@plt+0x2420>
   1351c:	mov	r0, #61	; 0x3d
   13520:	strb	r0, [r4, #3]
   13524:	ldr	r0, [sp, #4]
   13528:	cmp	r0, r7
   1352c:	beq	13414 <__assert_fail@plt+0x2314>
   13530:	sub	r6, sl, #1
   13534:	cmp	sl, #0
   13538:	movne	sl, r6
   1353c:	cmp	sl, #0
   13540:	addne	r5, r5, #3
   13544:	add	r7, r7, #4
   13548:	bne	13448 <__assert_fail@plt+0x2348>
   1354c:	add	r9, r9, r7
   13550:	b	1340c <__assert_fail@plt+0x230c>
   13554:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   13558:	add	fp, sp, #24
   1355c:	cmp	r1, #0
   13560:	popeq	{r4, r5, r6, r7, r8, r9, fp, pc}
   13564:	mov	r4, r2
   13568:	mov	r8, r1
   1356c:	mov	r6, r0
   13570:	movw	r9, #32799	; 0x801f
   13574:	movt	r9, #1
   13578:	ldrb	r7, [r6]
   1357c:	mov	r0, r7
   13580:	bl	135e0 <__assert_fail@plt+0x24e0>
   13584:	ldrb	r0, [r9, r7, lsr #2]
   13588:	strb	r0, [r4]
   1358c:	ldrb	r5, [r6, #1]
   13590:	mov	r0, r5
   13594:	bl	135e0 <__assert_fail@plt+0x24e0>
   13598:	lsr	r0, r5, #4
   1359c:	bfi	r0, r7, #4, #2
   135a0:	ldrb	r0, [r9, r0]
   135a4:	strb	r0, [r4, #1]
   135a8:	ldrb	r0, [r6, #2]
   135ac:	bl	135e0 <__assert_fail@plt+0x24e0>
   135b0:	and	r1, r0, #63	; 0x3f
   135b4:	ldrb	r1, [r9, r1]
   135b8:	strb	r1, [r4, #3]
   135bc:	lsr	r0, r0, #6
   135c0:	bfi	r0, r5, #2, #4
   135c4:	ldrb	r0, [r9, r0]
   135c8:	strb	r0, [r4, #2]
   135cc:	add	r4, r4, #4
   135d0:	add	r6, r6, #3
   135d4:	subs	r8, r8, #3
   135d8:	bne	13578 <__assert_fail@plt+0x2478>
   135dc:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   135e0:	bx	lr
   135e4:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   135e8:	add	fp, sp, #24
   135ec:	mov	r6, r2
   135f0:	mov	r4, r1
   135f4:	mov	r8, r0
   135f8:	movw	r0, #21846	; 0x5556
   135fc:	movt	r0, #21845	; 0x5555
   13600:	smmul	r0, r1, r0
   13604:	add	r0, r0, r0, lsr #31
   13608:	add	r1, r0, r0, lsl #1
   1360c:	subs	r1, r4, r1
   13610:	addne	r0, r0, #1
   13614:	cmn	r0, #1
   13618:	ble	13628 <__assert_fail@plt+0x2528>
   1361c:	cmn	r0, #-536870911	; 0xe0000001
   13620:	ble	1363c <__assert_fail@plt+0x253c>
   13624:	b	13680 <__assert_fail@plt+0x2580>
   13628:	beq	1363c <__assert_fail@plt+0x253c>
   1362c:	mov	r1, #-2147483648	; 0x80000000
   13630:	sdiv	r1, r1, r0
   13634:	cmp	r1, #4
   13638:	blt	13680 <__assert_fail@plt+0x2580>
   1363c:	cmn	r4, #1
   13640:	ble	13680 <__assert_fail@plt+0x2580>
   13644:	lsl	r7, r0, #2
   13648:	orr	r5, r7, #1
   1364c:	mov	r0, r5
   13650:	bl	14238 <__assert_fail@plt+0x3138>
   13654:	str	r0, [r6]
   13658:	cmp	r0, #0
   1365c:	moveq	r0, r5
   13660:	popeq	{r4, r5, r6, r7, r8, sl, fp, pc}
   13664:	mov	r2, r0
   13668:	mov	r0, r8
   1366c:	mov	r1, r4
   13670:	mov	r3, r5
   13674:	bl	133b0 <__assert_fail@plt+0x22b0>
   13678:	mov	r0, r7
   1367c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   13680:	mov	r7, #0
   13684:	str	r7, [r6]
   13688:	mov	r0, r7
   1368c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   13690:	push	{fp, lr}
   13694:	mov	fp, sp
   13698:	bl	135e0 <__assert_fail@plt+0x24e0>
   1369c:	movw	r1, #32863	; 0x805f
   136a0:	movt	r1, #1
   136a4:	add	r0, r1, r0
   136a8:	ldrsb	r1, [r0]
   136ac:	mov	r0, #0
   136b0:	cmn	r1, #1
   136b4:	movwgt	r0, #1
   136b8:	pop	{fp, pc}
   136bc:	mov	r1, #0
   136c0:	str	r1, [r0]
   136c4:	bx	lr
   136c8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   136cc:	add	fp, sp, #28
   136d0:	sub	sp, sp, #28
   136d4:	mov	r9, r0
   136d8:	str	r2, [sp, #20]
   136dc:	str	r1, [sp, #24]
   136e0:	str	r3, [sp, #16]
   136e4:	ldr	r0, [fp, #8]
   136e8:	ldr	r0, [r0]
   136ec:	str	r0, [sp, #12]
   136f0:	mov	r0, #0
   136f4:	cmp	r9, #0
   136f8:	mov	r4, #0
   136fc:	beq	13714 <__assert_fail@plt+0x2614>
   13700:	clz	r0, r2
   13704:	lsr	r4, r0, #5
   13708:	ldr	r0, [r9]
   1370c:	cmp	r0, #0
   13710:	movwne	r0, #1
   13714:	orr	r8, r0, r4
   13718:	clz	r0, r9
   1371c:	lsr	r0, r0, #5
   13720:	str	r0, [sp, #8]
   13724:	add	r7, sp, #16
   13728:	add	r5, sp, #12
   1372c:	str	r4, [sp, #4]
   13730:	b	13740 <__assert_fail@plt+0x2640>
   13734:	ldr	r0, [sp, #24]
   13738:	sub	r0, r6, r0
   1373c:	str	r0, [sp, #20]
   13740:	ldr	sl, [sp, #12]
   13744:	cmp	r8, #0
   13748:	beq	13754 <__assert_fail@plt+0x2654>
   1374c:	ldr	r6, [sp, #20]
   13750:	b	137ac <__assert_fail@plt+0x26ac>
   13754:	ldr	r6, [sp, #20]
   13758:	ldr	r4, [sp, #24]
   1375c:	mov	r0, r4
   13760:	mov	r1, r6
   13764:	mov	r2, r7
   13768:	mov	r3, r5
   1376c:	bl	138ac <__assert_fail@plt+0x27ac>
   13770:	cmp	r0, #0
   13774:	beq	137a8 <__assert_fail@plt+0x26a8>
   13778:	ldr	sl, [sp, #12]
   1377c:	add	r4, r4, #4
   13780:	sub	r6, r6, #4
   13784:	mov	r0, r4
   13788:	mov	r1, r6
   1378c:	mov	r2, r7
   13790:	mov	r3, r5
   13794:	bl	138ac <__assert_fail@plt+0x27ac>
   13798:	cmp	r0, #0
   1379c:	bne	13778 <__assert_fail@plt+0x2678>
   137a0:	str	r6, [sp, #20]
   137a4:	str	r4, [sp, #24]
   137a8:	ldr	r4, [sp, #4]
   137ac:	cmp	r6, #0
   137b0:	mov	r0, r6
   137b4:	movwne	r0, #1
   137b8:	orr	r0, r4, r0
   137bc:	cmp	r0, #1
   137c0:	bne	13880 <__assert_fail@plt+0x2780>
   137c4:	cmp	r6, #0
   137c8:	beq	137e8 <__assert_fail@plt+0x26e8>
   137cc:	ldr	r0, [sp, #24]
   137d0:	ldrb	r1, [r0]
   137d4:	subs	r1, r1, #10
   137d8:	movwne	r1, #1
   137dc:	ldr	r2, [sp, #8]
   137e0:	orrs	r1, r1, r2
   137e4:	beq	13864 <__assert_fail@plt+0x2764>
   137e8:	ldr	r0, [sp, #12]
   137ec:	str	sl, [sp, #12]
   137f0:	sub	r0, r0, sl
   137f4:	ldr	r1, [sp, #16]
   137f8:	add	r0, r1, r0
   137fc:	str	r0, [sp, #16]
   13800:	ldr	r0, [sp, #24]
   13804:	add	r6, r0, r6
   13808:	cmp	r9, #0
   1380c:	beq	13824 <__assert_fail@plt+0x2724>
   13810:	mov	r0, r9
   13814:	add	r1, sp, #24
   13818:	mov	r2, r6
   1381c:	add	r3, sp, #20
   13820:	bl	13a84 <__assert_fail@plt+0x2984>
   13824:	ldr	r1, [sp, #20]
   13828:	cmp	r1, #0
   1382c:	beq	13878 <__assert_fail@plt+0x2778>
   13830:	cmp	r1, #3
   13834:	mov	r2, #0
   13838:	movwgt	r2, #1
   1383c:	orr	r2, r4, r2
   13840:	ldr	r3, [sp, #8]
   13844:	orrs	r2, r2, r3
   13848:	beq	13878 <__assert_fail@plt+0x2778>
   1384c:	mov	r2, r7
   13850:	mov	r3, r5
   13854:	bl	138ac <__assert_fail@plt+0x27ac>
   13858:	cmp	r0, #0
   1385c:	bne	13734 <__assert_fail@plt+0x2634>
   13860:	b	13880 <__assert_fail@plt+0x2780>
   13864:	add	r0, r0, #1
   13868:	str	r0, [sp, #24]
   1386c:	sub	r0, r6, #1
   13870:	str	r0, [sp, #20]
   13874:	b	13740 <__assert_fail@plt+0x2640>
   13878:	mov	r0, #0
   1387c:	str	r0, [sp, #20]
   13880:	ldr	r0, [fp, #8]
   13884:	mov	r2, r0
   13888:	ldr	r0, [r0]
   1388c:	ldr	r1, [sp, #12]
   13890:	sub	r0, r0, r1
   13894:	str	r0, [r2]
   13898:	ldr	r0, [sp, #20]
   1389c:	clz	r0, r0
   138a0:	lsr	r0, r0, #5
   138a4:	sub	sp, fp, #28
   138a8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   138ac:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   138b0:	add	fp, sp, #28
   138b4:	sub	sp, sp, #4
   138b8:	mov	sl, #0
   138bc:	cmp	r1, #2
   138c0:	blt	139f0 <__assert_fail@plt+0x28f0>
   138c4:	mov	r8, r3
   138c8:	mov	r9, r2
   138cc:	mov	r7, r1
   138d0:	mov	r6, r0
   138d4:	ldr	r5, [r2]
   138d8:	ldrb	r4, [r0]
   138dc:	mov	r0, r4
   138e0:	bl	13690 <__assert_fail@plt+0x2590>
   138e4:	cmp	r0, #0
   138e8:	beq	139f0 <__assert_fail@plt+0x28f0>
   138ec:	str	r5, [sp]
   138f0:	ldrb	r5, [r6, #1]
   138f4:	mov	r0, r5
   138f8:	bl	13690 <__assert_fail@plt+0x2590>
   138fc:	cmp	r0, #0
   13900:	beq	139f0 <__assert_fail@plt+0x28f0>
   13904:	ldr	r0, [r8]
   13908:	cmp	r0, #0
   1390c:	beq	13954 <__assert_fail@plt+0x2854>
   13910:	mov	r0, r4
   13914:	bl	135e0 <__assert_fail@plt+0x24e0>
   13918:	mov	r0, r5
   1391c:	bl	135e0 <__assert_fail@plt+0x24e0>
   13920:	movw	r0, #32863	; 0x805f
   13924:	movt	r0, #1
   13928:	ldrb	r1, [r0, r4]
   1392c:	add	r0, r0, r5
   13930:	ldrsb	r0, [r0]
   13934:	lsr	r0, r0, #4
   13938:	orr	r0, r0, r1, lsl #2
   1393c:	ldr	r1, [sp]
   13940:	strb	r0, [r1], #1
   13944:	str	r1, [sp]
   13948:	ldr	r0, [r8]
   1394c:	sub	r0, r0, #1
   13950:	str	r0, [r8]
   13954:	cmp	r7, #2
   13958:	beq	139e8 <__assert_fail@plt+0x28e8>
   1395c:	ldrb	r4, [r6, #2]
   13960:	cmp	r4, #61	; 0x3d
   13964:	bne	13980 <__assert_fail@plt+0x2880>
   13968:	cmp	r7, #4
   1396c:	ldrbeq	r0, [r6, #3]
   13970:	cmpeq	r0, #61	; 0x3d
   13974:	bne	139e8 <__assert_fail@plt+0x28e8>
   13978:	ldr	r5, [sp]
   1397c:	b	13a70 <__assert_fail@plt+0x2970>
   13980:	mov	r0, r4
   13984:	bl	13690 <__assert_fail@plt+0x2590>
   13988:	cmp	r0, #0
   1398c:	beq	139e8 <__assert_fail@plt+0x28e8>
   13990:	ldr	r0, [r8]
   13994:	cmp	r0, #0
   13998:	beq	139fc <__assert_fail@plt+0x28fc>
   1399c:	mov	r0, r5
   139a0:	bl	135e0 <__assert_fail@plt+0x24e0>
   139a4:	mov	r0, r4
   139a8:	bl	135e0 <__assert_fail@plt+0x24e0>
   139ac:	movw	r0, #32863	; 0x805f
   139b0:	movt	r0, #1
   139b4:	ldrb	r1, [r0, r5]
   139b8:	add	r0, r0, r4
   139bc:	ldrsb	r0, [r0]
   139c0:	lsr	r0, r0, #2
   139c4:	orr	r0, r0, r1, lsl #4
   139c8:	ldr	r5, [sp]
   139cc:	strb	r0, [r5], #1
   139d0:	ldr	r0, [r8]
   139d4:	sub	r0, r0, #1
   139d8:	str	r0, [r8]
   139dc:	cmp	r7, #3
   139e0:	beq	13a7c <__assert_fail@plt+0x297c>
   139e4:	b	13a08 <__assert_fail@plt+0x2908>
   139e8:	ldr	r0, [sp]
   139ec:	str	r0, [r9]
   139f0:	mov	r0, sl
   139f4:	sub	sp, fp, #28
   139f8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   139fc:	ldr	r5, [sp]
   13a00:	cmp	r7, #3
   13a04:	beq	13a7c <__assert_fail@plt+0x297c>
   13a08:	ldrb	r6, [r6, #3]
   13a0c:	cmp	r6, #61	; 0x3d
   13a10:	bne	13a20 <__assert_fail@plt+0x2920>
   13a14:	cmp	r7, #4
   13a18:	bne	13a7c <__assert_fail@plt+0x297c>
   13a1c:	b	13a70 <__assert_fail@plt+0x2970>
   13a20:	mov	r0, r6
   13a24:	bl	13690 <__assert_fail@plt+0x2590>
   13a28:	cmp	r0, #0
   13a2c:	beq	13a7c <__assert_fail@plt+0x297c>
   13a30:	ldr	r0, [r8]
   13a34:	cmp	r0, #0
   13a38:	beq	13a70 <__assert_fail@plt+0x2970>
   13a3c:	mov	r0, r4
   13a40:	bl	135e0 <__assert_fail@plt+0x24e0>
   13a44:	mov	r0, r6
   13a48:	bl	135e0 <__assert_fail@plt+0x24e0>
   13a4c:	movw	r0, #32863	; 0x805f
   13a50:	movt	r0, #1
   13a54:	ldrb	r1, [r0, r4]
   13a58:	ldrb	r0, [r0, r6]
   13a5c:	orr	r0, r0, r1, lsl #6
   13a60:	strb	r0, [r5], #1
   13a64:	ldr	r0, [r8]
   13a68:	sub	r0, r0, #1
   13a6c:	str	r0, [r8]
   13a70:	str	r5, [r9]
   13a74:	mov	sl, #1
   13a78:	b	139f0 <__assert_fail@plt+0x28f0>
   13a7c:	str	r5, [r9]
   13a80:	b	139f0 <__assert_fail@plt+0x28f0>
   13a84:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   13a88:	add	fp, sp, #24
   13a8c:	mov	r8, r3
   13a90:	mov	r7, r2
   13a94:	mov	r6, r1
   13a98:	mov	r4, r0
   13a9c:	ldr	r0, [r0]
   13aa0:	cmp	r0, #0
   13aa4:	beq	13ab8 <__assert_fail@plt+0x29b8>
   13aa8:	cmp	r0, #4
   13aac:	bne	13ae4 <__assert_fail@plt+0x29e4>
   13ab0:	mov	r0, #0
   13ab4:	str	r0, [r4]
   13ab8:	ldr	r5, [r6]
   13abc:	sub	r0, r7, r5
   13ac0:	cmp	r0, #4
   13ac4:	blt	13ae4 <__assert_fail@plt+0x29e4>
   13ac8:	mov	r9, #4
   13acc:	mov	r0, r5
   13ad0:	mov	r1, #10
   13ad4:	mov	r2, #4
   13ad8:	bl	11064 <memchr@plt>
   13adc:	cmp	r0, #0
   13ae0:	beq	13b34 <__assert_fail@plt+0x2a34>
   13ae4:	ldr	r0, [r6]
   13ae8:	cmp	r0, r7
   13aec:	bcs	13b20 <__assert_fail@plt+0x2a20>
   13af0:	add	r0, r0, #1
   13af4:	ldrb	r1, [r0, #-1]
   13af8:	cmp	r1, #10
   13afc:	beq	13ae8 <__assert_fail@plt+0x29e8>
   13b00:	ldr	r2, [r4]
   13b04:	add	r3, r2, #1
   13b08:	mov	r5, r4
   13b0c:	str	r3, [r5], r2
   13b10:	strb	r1, [r5, #4]
   13b14:	ldr	r1, [r4]
   13b18:	cmp	r1, #4
   13b1c:	bne	13ae8 <__assert_fail@plt+0x29e8>
   13b20:	str	r0, [r6]
   13b24:	ldr	r0, [r4], #4
   13b28:	str	r0, [r8]
   13b2c:	mov	r0, r4
   13b30:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   13b34:	add	r0, r5, #4
   13b38:	str	r0, [r6]
   13b3c:	str	r9, [r8]
   13b40:	mov	r0, r5
   13b44:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   13b48:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   13b4c:	add	fp, sp, #24
   13b50:	sub	sp, sp, #8
   13b54:	mov	r4, r3
   13b58:	mov	r6, r2
   13b5c:	mov	r8, r1
   13b60:	mov	r7, r0
   13b64:	asr	r0, r2, #2
   13b68:	add	r0, r0, r0, lsl #1
   13b6c:	add	r0, r0, #3
   13b70:	str	r0, [sp, #4]
   13b74:	bl	14238 <__assert_fail@plt+0x3138>
   13b78:	str	r0, [r4]
   13b7c:	mov	r5, #1
   13b80:	cmp	r0, #0
   13b84:	beq	13bd0 <__assert_fail@plt+0x2ad0>
   13b88:	mov	r3, r0
   13b8c:	add	r0, sp, #4
   13b90:	str	r0, [sp]
   13b94:	mov	r0, r7
   13b98:	mov	r1, r8
   13b9c:	mov	r2, r6
   13ba0:	bl	136c8 <__assert_fail@plt+0x25c8>
   13ba4:	cmp	r0, #0
   13ba8:	beq	13bc0 <__assert_fail@plt+0x2ac0>
   13bac:	ldr	r0, [fp, #8]
   13bb0:	cmp	r0, #0
   13bb4:	ldrne	r1, [sp, #4]
   13bb8:	strne	r1, [r0]
   13bbc:	b	13bd0 <__assert_fail@plt+0x2ad0>
   13bc0:	ldr	r0, [r4]
   13bc4:	bl	14150 <__assert_fail@plt+0x3050>
   13bc8:	mov	r5, #0
   13bcc:	str	r5, [r4]
   13bd0:	mov	r0, r5
   13bd4:	sub	sp, fp, #24
   13bd8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   13bdc:	mov	r1, r0
   13be0:	sub	r2, r0, #65	; 0x41
   13be4:	mov	r0, #1
   13be8:	cmp	r2, #26
   13bec:	subcs	r2, r1, #97	; 0x61
   13bf0:	cmpcs	r2, #26
   13bf4:	bcs	13bfc <__assert_fail@plt+0x2afc>
   13bf8:	bx	lr
   13bfc:	sub	r1, r1, #48	; 0x30
   13c00:	cmp	r1, #10
   13c04:	movcs	r0, #0
   13c08:	bx	lr
   13c0c:	mov	r1, r0
   13c10:	sub	r2, r0, #65	; 0x41
   13c14:	mov	r0, #1
   13c18:	cmp	r2, #26
   13c1c:	subcs	r1, r1, #97	; 0x61
   13c20:	cmpcs	r1, #26
   13c24:	movcs	r0, #0
   13c28:	bx	lr
   13c2c:	mov	r1, #0
   13c30:	cmp	r0, #128	; 0x80
   13c34:	movwcc	r1, #1
   13c38:	mov	r0, r1
   13c3c:	bx	lr
   13c40:	sub	r1, r0, #9
   13c44:	clz	r1, r1
   13c48:	lsr	r1, r1, #5
   13c4c:	sub	r0, r0, #32
   13c50:	clz	r0, r0
   13c54:	lsr	r0, r0, #5
   13c58:	orr	r0, r0, r1
   13c5c:	bx	lr
   13c60:	mov	r1, r0
   13c64:	mov	r0, #1
   13c68:	cmp	r1, #32
   13c6c:	bxcc	lr
   13c70:	cmp	r1, #127	; 0x7f
   13c74:	movne	r0, #0
   13c78:	bx	lr
   13c7c:	sub	r1, r0, #48	; 0x30
   13c80:	mov	r0, #0
   13c84:	cmp	r1, #10
   13c88:	movwcc	r0, #1
   13c8c:	bx	lr
   13c90:	sub	r1, r0, #33	; 0x21
   13c94:	mov	r0, #0
   13c98:	cmp	r1, #94	; 0x5e
   13c9c:	movwcc	r0, #1
   13ca0:	bx	lr
   13ca4:	sub	r1, r0, #97	; 0x61
   13ca8:	mov	r0, #0
   13cac:	cmp	r1, #26
   13cb0:	movwcc	r0, #1
   13cb4:	bx	lr
   13cb8:	sub	r1, r0, #32
   13cbc:	mov	r0, #0
   13cc0:	cmp	r1, #95	; 0x5f
   13cc4:	movwcc	r0, #1
   13cc8:	bx	lr
   13ccc:	sub	r1, r0, #33	; 0x21
   13cd0:	cmp	r1, #93	; 0x5d
   13cd4:	bhi	13e60 <__assert_fail@plt+0x2d60>
   13cd8:	mov	r0, #1
   13cdc:	add	r2, pc, #0
   13ce0:	ldr	pc, [r2, r1, lsl #2]
   13ce4:	andeq	r3, r1, ip, asr lr
   13ce8:	andeq	r3, r1, ip, asr lr
   13cec:	andeq	r3, r1, ip, asr lr
   13cf0:	andeq	r3, r1, ip, asr lr
   13cf4:	andeq	r3, r1, ip, asr lr
   13cf8:	andeq	r3, r1, ip, asr lr
   13cfc:	andeq	r3, r1, ip, asr lr
   13d00:	andeq	r3, r1, ip, asr lr
   13d04:	andeq	r3, r1, ip, asr lr
   13d08:	andeq	r3, r1, ip, asr lr
   13d0c:	andeq	r3, r1, ip, asr lr
   13d10:	andeq	r3, r1, ip, asr lr
   13d14:	andeq	r3, r1, ip, asr lr
   13d18:	andeq	r3, r1, ip, asr lr
   13d1c:	andeq	r3, r1, ip, asr lr
   13d20:	andeq	r3, r1, r0, ror #28
   13d24:	andeq	r3, r1, r0, ror #28
   13d28:	andeq	r3, r1, r0, ror #28
   13d2c:	andeq	r3, r1, r0, ror #28
   13d30:	andeq	r3, r1, r0, ror #28
   13d34:	andeq	r3, r1, r0, ror #28
   13d38:	andeq	r3, r1, r0, ror #28
   13d3c:	andeq	r3, r1, r0, ror #28
   13d40:	andeq	r3, r1, r0, ror #28
   13d44:	andeq	r3, r1, r0, ror #28
   13d48:	andeq	r3, r1, ip, asr lr
   13d4c:	andeq	r3, r1, ip, asr lr
   13d50:	andeq	r3, r1, ip, asr lr
   13d54:	andeq	r3, r1, ip, asr lr
   13d58:	andeq	r3, r1, ip, asr lr
   13d5c:	andeq	r3, r1, ip, asr lr
   13d60:	andeq	r3, r1, ip, asr lr
   13d64:	andeq	r3, r1, r0, ror #28
   13d68:	andeq	r3, r1, r0, ror #28
   13d6c:	andeq	r3, r1, r0, ror #28
   13d70:	andeq	r3, r1, r0, ror #28
   13d74:	andeq	r3, r1, r0, ror #28
   13d78:	andeq	r3, r1, r0, ror #28
   13d7c:	andeq	r3, r1, r0, ror #28
   13d80:	andeq	r3, r1, r0, ror #28
   13d84:	andeq	r3, r1, r0, ror #28
   13d88:	andeq	r3, r1, r0, ror #28
   13d8c:	andeq	r3, r1, r0, ror #28
   13d90:	andeq	r3, r1, r0, ror #28
   13d94:	andeq	r3, r1, r0, ror #28
   13d98:	andeq	r3, r1, r0, ror #28
   13d9c:	andeq	r3, r1, r0, ror #28
   13da0:	andeq	r3, r1, r0, ror #28
   13da4:	andeq	r3, r1, r0, ror #28
   13da8:	andeq	r3, r1, r0, ror #28
   13dac:	andeq	r3, r1, r0, ror #28
   13db0:	andeq	r3, r1, r0, ror #28
   13db4:	andeq	r3, r1, r0, ror #28
   13db8:	andeq	r3, r1, r0, ror #28
   13dbc:	andeq	r3, r1, r0, ror #28
   13dc0:	andeq	r3, r1, r0, ror #28
   13dc4:	andeq	r3, r1, r0, ror #28
   13dc8:	andeq	r3, r1, r0, ror #28
   13dcc:	andeq	r3, r1, ip, asr lr
   13dd0:	andeq	r3, r1, ip, asr lr
   13dd4:	andeq	r3, r1, ip, asr lr
   13dd8:	andeq	r3, r1, ip, asr lr
   13ddc:	andeq	r3, r1, ip, asr lr
   13de0:	andeq	r3, r1, ip, asr lr
   13de4:	andeq	r3, r1, r0, ror #28
   13de8:	andeq	r3, r1, r0, ror #28
   13dec:	andeq	r3, r1, r0, ror #28
   13df0:	andeq	r3, r1, r0, ror #28
   13df4:	andeq	r3, r1, r0, ror #28
   13df8:	andeq	r3, r1, r0, ror #28
   13dfc:	andeq	r3, r1, r0, ror #28
   13e00:	andeq	r3, r1, r0, ror #28
   13e04:	andeq	r3, r1, r0, ror #28
   13e08:	andeq	r3, r1, r0, ror #28
   13e0c:	andeq	r3, r1, r0, ror #28
   13e10:	andeq	r3, r1, r0, ror #28
   13e14:	andeq	r3, r1, r0, ror #28
   13e18:	andeq	r3, r1, r0, ror #28
   13e1c:	andeq	r3, r1, r0, ror #28
   13e20:	andeq	r3, r1, r0, ror #28
   13e24:	andeq	r3, r1, r0, ror #28
   13e28:	andeq	r3, r1, r0, ror #28
   13e2c:	andeq	r3, r1, r0, ror #28
   13e30:	andeq	r3, r1, r0, ror #28
   13e34:	andeq	r3, r1, r0, ror #28
   13e38:	andeq	r3, r1, r0, ror #28
   13e3c:	andeq	r3, r1, r0, ror #28
   13e40:	andeq	r3, r1, r0, ror #28
   13e44:	andeq	r3, r1, r0, ror #28
   13e48:	andeq	r3, r1, r0, ror #28
   13e4c:	andeq	r3, r1, ip, asr lr
   13e50:	andeq	r3, r1, ip, asr lr
   13e54:	andeq	r3, r1, ip, asr lr
   13e58:	andeq	r3, r1, ip, asr lr
   13e5c:	bx	lr
   13e60:	mov	r0, #0
   13e64:	bx	lr
   13e68:	sub	r0, r0, #9
   13e6c:	cmp	r0, #23
   13e70:	movhi	r0, #0
   13e74:	bxhi	lr
   13e78:	bic	r0, r0, #-16777216	; 0xff000000
   13e7c:	movw	r1, #31
   13e80:	movt	r1, #128	; 0x80
   13e84:	mov	r2, #1
   13e88:	and	r0, r2, r1, lsr r0
   13e8c:	bx	lr
   13e90:	sub	r1, r0, #65	; 0x41
   13e94:	mov	r0, #0
   13e98:	cmp	r1, #26
   13e9c:	movwcc	r0, #1
   13ea0:	bx	lr
   13ea4:	mov	r1, r0
   13ea8:	sub	r2, r0, #48	; 0x30
   13eac:	mov	r0, #1
   13eb0:	cmp	r2, #22
   13eb4:	bhi	13ecc <__assert_fail@plt+0x2dcc>
   13eb8:	mov	ip, #1
   13ebc:	movw	r3, #1023	; 0x3ff
   13ec0:	movt	r3, #126	; 0x7e
   13ec4:	tst	r3, ip, lsl r2
   13ec8:	bxne	lr
   13ecc:	sub	r1, r1, #97	; 0x61
   13ed0:	cmp	r1, #6
   13ed4:	movcs	r0, #0
   13ed8:	bxcs	lr
   13edc:	bx	lr
   13ee0:	sub	r1, r0, #65	; 0x41
   13ee4:	cmp	r1, #26
   13ee8:	addcc	r0, r0, #32
   13eec:	bx	lr
   13ef0:	sub	r1, r0, #97	; 0x61
   13ef4:	cmp	r1, #26
   13ef8:	subcc	r0, r0, #32
   13efc:	bx	lr
   13f00:	movw	r1, #37236	; 0x9174
   13f04:	movt	r1, #2
   13f08:	str	r0, [r1]
   13f0c:	bx	lr
   13f10:	movw	r1, #37240	; 0x9178
   13f14:	movt	r1, #2
   13f18:	strb	r0, [r1]
   13f1c:	bx	lr
   13f20:	push	{r4, r5, r6, sl, fp, lr}
   13f24:	add	fp, sp, #16
   13f28:	sub	sp, sp, #8
   13f2c:	movw	r0, #37204	; 0x9154
   13f30:	movt	r0, #2
   13f34:	ldr	r0, [r0]
   13f38:	bl	16e2c <__assert_fail@plt+0x5d2c>
   13f3c:	cmp	r0, #0
   13f40:	beq	13f68 <__assert_fail@plt+0x2e68>
   13f44:	movw	r0, #37240	; 0x9178
   13f48:	movt	r0, #2
   13f4c:	ldrb	r0, [r0]
   13f50:	cmp	r0, #0
   13f54:	beq	13f88 <__assert_fail@plt+0x2e88>
   13f58:	bl	1101c <__errno_location@plt>
   13f5c:	ldr	r0, [r0]
   13f60:	cmp	r0, #32
   13f64:	bne	13f88 <__assert_fail@plt+0x2e88>
   13f68:	movw	r0, #37192	; 0x9148
   13f6c:	movt	r0, #2
   13f70:	ldr	r0, [r0]
   13f74:	bl	16e2c <__assert_fail@plt+0x5d2c>
   13f78:	cmp	r0, #0
   13f7c:	subeq	sp, fp, #16
   13f80:	popeq	{r4, r5, r6, sl, fp, pc}
   13f84:	b	13ff8 <__assert_fail@plt+0x2ef8>
   13f88:	movw	r1, #31716	; 0x7be4
   13f8c:	movt	r1, #1
   13f90:	mov	r0, #0
   13f94:	mov	r2, #5
   13f98:	bl	10f2c <dcgettext@plt>
   13f9c:	mov	r4, r0
   13fa0:	movw	r0, #37236	; 0x9174
   13fa4:	movt	r0, #2
   13fa8:	ldr	r6, [r0]
   13fac:	bl	1101c <__errno_location@plt>
   13fb0:	ldr	r5, [r0]
   13fb4:	cmp	r6, #0
   13fb8:	bne	13fd4 <__assert_fail@plt+0x2ed4>
   13fbc:	movw	r2, #30860	; 0x788c
   13fc0:	movt	r2, #1
   13fc4:	mov	r0, #0
   13fc8:	mov	r1, r5
   13fcc:	mov	r3, r4
   13fd0:	b	13ff4 <__assert_fail@plt+0x2ef4>
   13fd4:	mov	r0, r6
   13fd8:	bl	15954 <__assert_fail@plt+0x4854>
   13fdc:	mov	r3, r0
   13fe0:	str	r4, [sp]
   13fe4:	movw	r2, #30856	; 0x7888
   13fe8:	movt	r2, #1
   13fec:	mov	r0, #0
   13ff0:	mov	r1, r5
   13ff4:	bl	10fa4 <error@plt>
   13ff8:	movw	r0, #37108	; 0x90f4
   13ffc:	movt	r0, #2
   14000:	ldr	r0, [r0]
   14004:	bl	10ee4 <_exit@plt>
   14008:	b	10eb4 <posix_fadvise64@plt>
   1400c:	cmp	r0, #0
   14010:	bxeq	lr
   14014:	push	{r4, sl, fp, lr}
   14018:	add	fp, sp, #8
   1401c:	sub	sp, sp, #16
   14020:	mov	r4, r1
   14024:	bl	1104c <fileno@plt>
   14028:	mov	r1, #0
   1402c:	str	r1, [sp]
   14030:	stmib	sp, {r1, r4}
   14034:	mov	r2, #0
   14038:	mov	r3, #0
   1403c:	bl	14008 <__assert_fail@plt+0x2f08>
   14040:	sub	sp, fp, #8
   14044:	pop	{r4, sl, fp, pc}
   14048:	push	{r4, r5, fp, lr}
   1404c:	add	fp, sp, #8
   14050:	sub	sp, sp, #8
   14054:	mov	r4, r0
   14058:	bl	1104c <fileno@plt>
   1405c:	cmn	r0, #1
   14060:	ble	140d8 <__assert_fail@plt+0x2fd8>
   14064:	mov	r0, r4
   14068:	bl	10fc8 <__freading@plt>
   1406c:	cmp	r0, #0
   14070:	beq	1409c <__assert_fail@plt+0x2f9c>
   14074:	mov	r0, r4
   14078:	bl	1104c <fileno@plt>
   1407c:	mov	r1, #1
   14080:	str	r1, [sp]
   14084:	mov	r2, #0
   14088:	mov	r3, #0
   1408c:	bl	10f68 <lseek64@plt>
   14090:	and	r0, r0, r1
   14094:	cmn	r0, #1
   14098:	beq	140d8 <__assert_fail@plt+0x2fd8>
   1409c:	mov	r0, r4
   140a0:	bl	140e8 <__assert_fail@plt+0x2fe8>
   140a4:	cmp	r0, #0
   140a8:	beq	140d8 <__assert_fail@plt+0x2fd8>
   140ac:	bl	1101c <__errno_location@plt>
   140b0:	ldr	r5, [r0]
   140b4:	mov	r0, r4
   140b8:	bl	1107c <fclose@plt>
   140bc:	cmp	r5, #0
   140c0:	beq	140d0 <__assert_fail@plt+0x2fd0>
   140c4:	bl	1101c <__errno_location@plt>
   140c8:	str	r5, [r0]
   140cc:	mvn	r0, #0
   140d0:	sub	sp, fp, #8
   140d4:	pop	{r4, r5, fp, pc}
   140d8:	mov	r0, r4
   140dc:	sub	sp, fp, #8
   140e0:	pop	{r4, r5, fp, lr}
   140e4:	b	1107c <fclose@plt>
   140e8:	push	{r4, sl, fp, lr}
   140ec:	add	fp, sp, #8
   140f0:	mov	r4, r0
   140f4:	cmp	r0, #0
   140f8:	beq	14110 <__assert_fail@plt+0x3010>
   140fc:	mov	r0, r4
   14100:	bl	10fc8 <__freading@plt>
   14104:	cmp	r0, #0
   14108:	movne	r0, r4
   1410c:	blne	1411c <__assert_fail@plt+0x301c>
   14110:	mov	r0, r4
   14114:	pop	{r4, sl, fp, lr}
   14118:	b	10ec0 <fflush@plt>
   1411c:	ldrb	r1, [r0, #1]
   14120:	tst	r1, #1
   14124:	bxeq	lr
   14128:	push	{fp, lr}
   1412c:	mov	fp, sp
   14130:	sub	sp, sp, #8
   14134:	mov	r1, #1
   14138:	str	r1, [sp]
   1413c:	mov	r2, #0
   14140:	mov	r3, #0
   14144:	bl	14178 <__assert_fail@plt+0x3078>
   14148:	mov	sp, fp
   1414c:	pop	{fp, pc}
   14150:	push	{r4, r5, r6, sl, fp, lr}
   14154:	add	fp, sp, #16
   14158:	mov	r4, r0
   1415c:	bl	1101c <__errno_location@plt>
   14160:	mov	r5, r0
   14164:	ldr	r6, [r0]
   14168:	mov	r0, r4
   1416c:	bl	10ed8 <free@plt>
   14170:	str	r6, [r5]
   14174:	pop	{r4, r5, r6, sl, fp, pc}
   14178:	push	{r4, r5, r6, r7, fp, lr}
   1417c:	add	fp, sp, #16
   14180:	sub	sp, sp, #8
   14184:	mov	r5, r3
   14188:	mov	r6, r2
   1418c:	mov	r4, r0
   14190:	ldr	r0, [r0, #4]
   14194:	ldr	r1, [r4, #8]
   14198:	cmp	r1, r0
   1419c:	bne	141b8 <__assert_fail@plt+0x30b8>
   141a0:	ldrd	r0, [r4, #16]
   141a4:	cmp	r1, r0
   141a8:	bne	141b8 <__assert_fail@plt+0x30b8>
   141ac:	ldr	r0, [r4, #36]	; 0x24
   141b0:	cmp	r0, #0
   141b4:	beq	141d0 <__assert_fail@plt+0x30d0>
   141b8:	mov	r0, r4
   141bc:	mov	r2, r6
   141c0:	mov	r3, r5
   141c4:	sub	sp, fp, #16
   141c8:	pop	{r4, r5, r6, r7, fp, lr}
   141cc:	b	11088 <fseeko64@plt>
   141d0:	ldr	r7, [fp, #8]
   141d4:	mov	r0, r4
   141d8:	bl	1104c <fileno@plt>
   141dc:	str	r7, [sp]
   141e0:	mov	r2, r6
   141e4:	mov	r3, r5
   141e8:	bl	10f68 <lseek64@plt>
   141ec:	and	r2, r0, r1
   141f0:	cmn	r2, #1
   141f4:	mvneq	r0, #0
   141f8:	subeq	sp, fp, #16
   141fc:	popeq	{r4, r5, r6, r7, fp, pc}
   14200:	strd	r0, [r4, #80]	; 0x50
   14204:	ldr	r0, [r4]
   14208:	bic	r0, r0, #16
   1420c:	str	r0, [r4]
   14210:	mov	r0, #0
   14214:	sub	sp, fp, #16
   14218:	pop	{r4, r5, r6, r7, fp, pc}
   1421c:	push	{fp, lr}
   14220:	mov	fp, sp
   14224:	bl	1101c <__errno_location@plt>
   14228:	mov	r1, #12
   1422c:	str	r1, [r0]
   14230:	mov	r0, #0
   14234:	pop	{fp, pc}
   14238:	b	16d98 <__assert_fail@plt+0x5c98>
   1423c:	cmp	r1, #0
   14240:	orreq	r1, r1, #1
   14244:	b	16dc8 <__assert_fail@plt+0x5cc8>
   14248:	b	16d44 <__assert_fail@plt+0x5c44>
   1424c:	clz	r3, r2
   14250:	lsr	ip, r3, #5
   14254:	clz	r3, r1
   14258:	lsr	r3, r3, #5
   1425c:	orrs	r3, r3, ip
   14260:	movwne	r1, #1
   14264:	movwne	r2, #1
   14268:	b	15eb8 <__assert_fail@plt+0x4db8>
   1426c:	push	{r4, r5, fp, lr}
   14270:	add	fp, sp, #8
   14274:	cmp	r0, #0
   14278:	beq	1430c <__assert_fail@plt+0x320c>
   1427c:	mov	r4, r0
   14280:	mov	r1, #47	; 0x2f
   14284:	bl	110a0 <strrchr@plt>
   14288:	cmp	r0, #0
   1428c:	mov	r5, r4
   14290:	addne	r5, r0, #1
   14294:	sub	r0, r5, r4
   14298:	cmp	r0, #7
   1429c:	blt	142f0 <__assert_fail@plt+0x31f0>
   142a0:	sub	r0, r5, #7
   142a4:	movw	r1, #33175	; 0x8197
   142a8:	movt	r1, #1
   142ac:	mov	r2, #7
   142b0:	bl	110dc <strncmp@plt>
   142b4:	cmp	r0, #0
   142b8:	bne	142f0 <__assert_fail@plt+0x31f0>
   142bc:	movw	r1, #33183	; 0x819f
   142c0:	movt	r1, #1
   142c4:	mov	r0, r5
   142c8:	mov	r2, #3
   142cc:	bl	110dc <strncmp@plt>
   142d0:	cmp	r0, #0
   142d4:	beq	142e0 <__assert_fail@plt+0x31e0>
   142d8:	mov	r4, r5
   142dc:	b	142f0 <__assert_fail@plt+0x31f0>
   142e0:	add	r4, r5, #3
   142e4:	movw	r0, #37176	; 0x9138
   142e8:	movt	r0, #2
   142ec:	str	r4, [r0]
   142f0:	movw	r0, #37180	; 0x913c
   142f4:	movt	r0, #2
   142f8:	str	r4, [r0]
   142fc:	movw	r0, #37244	; 0x917c
   14300:	movt	r0, #2
   14304:	str	r4, [r0]
   14308:	pop	{r4, r5, fp, pc}
   1430c:	movw	r0, #37192	; 0x9148
   14310:	movt	r0, #2
   14314:	ldr	r3, [r0]
   14318:	movw	r0, #33119	; 0x815f
   1431c:	movt	r0, #1
   14320:	mov	r1, #55	; 0x37
   14324:	mov	r2, #1
   14328:	bl	10f5c <fwrite@plt>
   1432c:	bl	110e8 <abort@plt>
   14330:	push	{r4, r5, r6, sl, fp, lr}
   14334:	add	fp, sp, #16
   14338:	mov	r4, r0
   1433c:	movw	r0, #37248	; 0x9180
   14340:	movt	r0, #2
   14344:	cmp	r4, #0
   14348:	moveq	r4, r0
   1434c:	bl	1101c <__errno_location@plt>
   14350:	mov	r5, r0
   14354:	ldr	r6, [r0]
   14358:	mov	r0, r4
   1435c:	mov	r1, #48	; 0x30
   14360:	bl	166ac <__assert_fail@plt+0x55ac>
   14364:	str	r6, [r5]
   14368:	pop	{r4, r5, r6, sl, fp, pc}
   1436c:	movw	r1, #37248	; 0x9180
   14370:	movt	r1, #2
   14374:	cmp	r0, #0
   14378:	movne	r1, r0
   1437c:	ldr	r0, [r1]
   14380:	bx	lr
   14384:	movw	r2, #37248	; 0x9180
   14388:	movt	r2, #2
   1438c:	cmp	r0, #0
   14390:	movne	r2, r0
   14394:	str	r1, [r2]
   14398:	bx	lr
   1439c:	movw	r3, #37248	; 0x9180
   143a0:	movt	r3, #2
   143a4:	cmp	r0, #0
   143a8:	movne	r3, r0
   143ac:	ubfx	r0, r1, #5, #3
   143b0:	add	r0, r3, r0, lsl #2
   143b4:	ldr	r3, [r0, #8]
   143b8:	and	r1, r1, #31
   143bc:	eor	r2, r2, r3, lsr r1
   143c0:	and	r2, r2, #1
   143c4:	eor	r2, r3, r2, lsl r1
   143c8:	str	r2, [r0, #8]
   143cc:	mov	r0, #1
   143d0:	and	r0, r0, r3, lsr r1
   143d4:	bx	lr
   143d8:	movw	r2, #37248	; 0x9180
   143dc:	movt	r2, #2
   143e0:	cmp	r0, #0
   143e4:	movne	r2, r0
   143e8:	ldr	r0, [r2, #4]
   143ec:	str	r1, [r2, #4]
   143f0:	bx	lr
   143f4:	movw	r3, #37248	; 0x9180
   143f8:	movt	r3, #2
   143fc:	cmp	r0, #0
   14400:	movne	r3, r0
   14404:	mov	r0, #10
   14408:	str	r0, [r3]
   1440c:	cmp	r1, #0
   14410:	cmpne	r2, #0
   14414:	bne	14424 <__assert_fail@plt+0x3324>
   14418:	push	{fp, lr}
   1441c:	mov	fp, sp
   14420:	bl	110e8 <abort@plt>
   14424:	str	r1, [r3, #40]	; 0x28
   14428:	str	r2, [r3, #44]	; 0x2c
   1442c:	bx	lr
   14430:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14434:	add	fp, sp, #28
   14438:	sub	sp, sp, #20
   1443c:	mov	r8, r3
   14440:	mov	r9, r2
   14444:	mov	sl, r1
   14448:	mov	r7, r0
   1444c:	ldr	r0, [fp, #8]
   14450:	movw	r5, #37248	; 0x9180
   14454:	movt	r5, #2
   14458:	cmp	r0, #0
   1445c:	movne	r5, r0
   14460:	bl	1101c <__errno_location@plt>
   14464:	mov	r4, r0
   14468:	ldm	r5, {r0, r1}
   1446c:	ldr	r2, [r5, #40]	; 0x28
   14470:	ldr	r3, [r5, #44]	; 0x2c
   14474:	ldr	r6, [r4]
   14478:	add	r5, r5, #8
   1447c:	stm	sp, {r0, r1, r5}
   14480:	str	r2, [sp, #12]
   14484:	str	r3, [sp, #16]
   14488:	mov	r0, r7
   1448c:	mov	r1, sl
   14490:	mov	r2, r9
   14494:	mov	r3, r8
   14498:	bl	144a8 <__assert_fail@plt+0x33a8>
   1449c:	str	r6, [r4]
   144a0:	sub	sp, fp, #28
   144a4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   144a8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   144ac:	add	fp, sp, #28
   144b0:	sub	sp, sp, #156	; 0x9c
   144b4:	mov	r9, r3
   144b8:	str	r2, [fp, #-84]	; 0xffffffac
   144bc:	mov	r6, r1
   144c0:	mov	r7, r0
   144c4:	ldr	r0, [fp, #12]
   144c8:	and	r1, r0, #4
   144cc:	str	r1, [sp, #32]
   144d0:	and	r1, r0, #1
   144d4:	str	r1, [sp, #36]	; 0x24
   144d8:	ubfx	sl, r0, #1, #1
   144dc:	bl	10f74 <__ctype_get_mb_cur_max@plt>
   144e0:	str	r0, [sp, #40]	; 0x28
   144e4:	ldr	r0, [fp, #24]
   144e8:	str	r0, [sp, #76]	; 0x4c
   144ec:	ldr	r0, [fp, #20]
   144f0:	str	r0, [sp, #68]	; 0x44
   144f4:	ldr	r0, [fp, #8]
   144f8:	str	r0, [fp, #-60]	; 0xffffffc4
   144fc:	mov	r0, #0
   14500:	str	r0, [sp, #72]	; 0x48
   14504:	mov	r0, #0
   14508:	str	r0, [sp, #92]	; 0x5c
   1450c:	mov	r0, #0
   14510:	str	r0, [fp, #-72]	; 0xffffffb8
   14514:	mov	r0, #0
   14518:	mov	r1, #0
   1451c:	str	r1, [fp, #-56]	; 0xffffffc8
   14520:	mov	r1, #0
   14524:	str	r1, [sp, #56]	; 0x38
   14528:	mov	r5, #1
   1452c:	str	r7, [sp, #80]	; 0x50
   14530:	mov	r4, r6
   14534:	ldr	r6, [fp, #-60]	; 0xffffffc4
   14538:	cmp	r6, #10
   1453c:	bhi	154a4 <__assert_fail@plt+0x43a4>
   14540:	add	r1, pc, #20
   14544:	mov	r8, #0
   14548:	mov	r2, #1
   1454c:	mov	r3, #0
   14550:	ldr	ip, [fp, #-84]	; 0xffffffac
   14554:	mov	lr, r9
   14558:	ldr	pc, [r1, r6, lsl #2]
   1455c:	andeq	r4, r1, r4, lsr r6
   14560:	andeq	r4, r1, r4, ror #12
   14564:	andeq	r4, r1, r4, lsr #12
   14568:	andeq	r4, r1, ip, lsl r6
   1456c:	andeq	r4, r1, r8, asr r6
   14570:			; <UNDEFINED> instruction: 0x000146b8
   14574:	andeq	r4, r1, r4, asr #12
   14578:	andeq	r4, r1, r4, lsl r7
   1457c:	andeq	r4, r1, r8, lsl #11
   14580:	andeq	r4, r1, r8, lsl #11
   14584:			; <UNDEFINED> instruction: 0x000145b0
   14588:	movw	r0, #33265	; 0x81f1
   1458c:	movt	r0, #1
   14590:	mov	r1, r6
   14594:	bl	15ab0 <__assert_fail@plt+0x49b0>
   14598:	str	r0, [sp, #68]	; 0x44
   1459c:	movw	r0, #33267	; 0x81f3
   145a0:	movt	r0, #1
   145a4:	mov	r1, r6
   145a8:	bl	15ab0 <__assert_fail@plt+0x49b0>
   145ac:	str	r0, [sp, #76]	; 0x4c
   145b0:	mov	r8, #0
   145b4:	tst	sl, #1
   145b8:	bne	145f0 <__assert_fail@plt+0x34f0>
   145bc:	ldr	r0, [sp, #68]	; 0x44
   145c0:	ldrb	r0, [r0]
   145c4:	cmp	r0, #0
   145c8:	beq	145f0 <__assert_fail@plt+0x34f0>
   145cc:	ldr	r1, [sp, #68]	; 0x44
   145d0:	add	r1, r1, #1
   145d4:	mov	r8, #0
   145d8:	cmp	r8, r4
   145dc:	strbcc	r0, [r7, r8]
   145e0:	ldrb	r0, [r1, r8]
   145e4:	add	r8, r8, #1
   145e8:	cmp	r0, #0
   145ec:	bne	145d8 <__assert_fail@plt+0x34d8>
   145f0:	ldr	r6, [sp, #76]	; 0x4c
   145f4:	mov	r0, r6
   145f8:	bl	11004 <strlen@plt>
   145fc:	str	r0, [fp, #-72]	; 0xffffffb8
   14600:	str	r6, [sp, #92]	; 0x5c
   14604:	mov	r2, #1
   14608:	mov	r3, sl
   1460c:	ldr	ip, [fp, #-84]	; 0xffffffac
   14610:	mov	lr, r9
   14614:	ldr	r6, [fp, #-60]	; 0xffffffc4
   14618:	b	14714 <__assert_fail@plt+0x3614>
   1461c:	mov	r0, #1
   14620:	b	14664 <__assert_fail@plt+0x3564>
   14624:	tst	sl, #1
   14628:	bne	14664 <__assert_fail@plt+0x3564>
   1462c:	mov	r2, r0
   14630:	b	1468c <__assert_fail@plt+0x358c>
   14634:	mov	r6, #0
   14638:	mov	r8, #0
   1463c:	mov	r2, r0
   14640:	b	14710 <__assert_fail@plt+0x3610>
   14644:	mov	r0, #1
   14648:	str	r0, [fp, #-72]	; 0xffffffb8
   1464c:	mov	r8, #0
   14650:	mov	r6, #5
   14654:	b	146d0 <__assert_fail@plt+0x35d0>
   14658:	mov	r2, #1
   1465c:	tst	sl, #1
   14660:	beq	1468c <__assert_fail@plt+0x358c>
   14664:	mov	r1, #1
   14668:	str	r1, [fp, #-72]	; 0xffffffb8
   1466c:	mov	r8, #0
   14670:	mov	r6, #2
   14674:	movw	r1, #33267	; 0x81f3
   14678:	movt	r1, #1
   1467c:	str	r1, [sp, #92]	; 0x5c
   14680:	mov	r2, r0
   14684:	mov	r3, #1
   14688:	b	14714 <__assert_fail@plt+0x3614>
   1468c:	mov	r8, #1
   14690:	mov	r6, #2
   14694:	cmp	r4, #0
   14698:	movne	r0, #39	; 0x27
   1469c:	strbne	r0, [r7]
   146a0:	movw	r0, #33267	; 0x81f3
   146a4:	movt	r0, #1
   146a8:	str	r0, [sp, #92]	; 0x5c
   146ac:	mov	r0, #1
   146b0:	str	r0, [fp, #-72]	; 0xffffffb8
   146b4:	b	14710 <__assert_fail@plt+0x3610>
   146b8:	mov	r6, #5
   146bc:	tst	sl, #1
   146c0:	beq	146e8 <__assert_fail@plt+0x35e8>
   146c4:	mov	r0, #1
   146c8:	str	r0, [fp, #-72]	; 0xffffffb8
   146cc:	mov	r8, #0
   146d0:	movw	r0, #33263	; 0x81ef
   146d4:	movt	r0, #1
   146d8:	str	r0, [sp, #92]	; 0x5c
   146dc:	mov	r2, #1
   146e0:	mov	r3, #1
   146e4:	b	14714 <__assert_fail@plt+0x3614>
   146e8:	cmp	r4, #0
   146ec:	movne	r0, #34	; 0x22
   146f0:	strbne	r0, [r7]
   146f4:	mov	r8, #1
   146f8:	movw	r0, #33263	; 0x81ef
   146fc:	movt	r0, #1
   14700:	str	r0, [sp, #92]	; 0x5c
   14704:	mov	r0, #1
   14708:	str	r0, [fp, #-72]	; 0xffffffb8
   1470c:	mov	r2, #1
   14710:	mov	r3, #0
   14714:	ldr	r0, [fp, #16]
   14718:	cmp	r0, #0
   1471c:	movwne	r0, #1
   14720:	and	r0, r0, r3
   14724:	str	r0, [fp, #-88]	; 0xffffffa8
   14728:	ldr	r0, [fp, #-72]	; 0xffffffb8
   1472c:	cmp	r0, #0
   14730:	movwne	r0, #1
   14734:	and	r1, r0, r3
   14738:	and	r1, r2, r1
   1473c:	str	r1, [sp, #48]	; 0x30
   14740:	str	r6, [fp, #-60]	; 0xffffffc4
   14744:	subs	r6, r6, #2
   14748:	clz	r1, r6
   1474c:	lsr	r1, r1, #5
   14750:	and	r1, r1, r3
   14754:	str	r1, [sp, #60]	; 0x3c
   14758:	str	r6, [fp, #-80]	; 0xffffffb0
   1475c:	mov	r1, r6
   14760:	movwne	r1, #1
   14764:	str	r3, [fp, #-76]	; 0xffffffb4
   14768:	eor	r3, r3, #1
   1476c:	str	r3, [sp, #88]	; 0x58
   14770:	orr	r3, r1, r3
   14774:	str	r3, [sp, #64]	; 0x40
   14778:	and	r1, r1, r2
   1477c:	str	r1, [fp, #-68]	; 0xffffffbc
   14780:	and	r0, r0, r1
   14784:	str	r0, [fp, #-64]	; 0xffffffc0
   14788:	str	r2, [sp, #84]	; 0x54
   1478c:	eor	r0, r2, #1
   14790:	str	r0, [sp, #52]	; 0x34
   14794:	mov	r6, #0
   14798:	cmn	lr, #1
   1479c:	beq	147ac <__assert_fail@plt+0x36ac>
   147a0:	cmp	r6, lr
   147a4:	bne	147b8 <__assert_fail@plt+0x36b8>
   147a8:	b	15324 <__assert_fail@plt+0x4224>
   147ac:	ldrb	r0, [ip, r6]
   147b0:	cmp	r0, #0
   147b4:	beq	15324 <__assert_fail@plt+0x4224>
   147b8:	str	r5, [fp, #-48]	; 0xffffffd0
   147bc:	mov	sl, #0
   147c0:	ldr	r0, [fp, #-64]	; 0xffffffc0
   147c4:	cmp	r0, #0
   147c8:	beq	147fc <__assert_fail@plt+0x36fc>
   147cc:	ldr	r0, [fp, #-72]	; 0xffffffb8
   147d0:	add	r5, r6, r0
   147d4:	cmp	r0, #2
   147d8:	bcc	147f4 <__assert_fail@plt+0x36f4>
   147dc:	cmn	lr, #1
   147e0:	bne	147f4 <__assert_fail@plt+0x36f4>
   147e4:	mov	r0, ip
   147e8:	bl	11004 <strlen@plt>
   147ec:	ldr	ip, [fp, #-84]	; 0xffffffac
   147f0:	mov	lr, r0
   147f4:	cmp	r5, lr
   147f8:	bls	14808 <__assert_fail@plt+0x3708>
   147fc:	mov	r0, #0
   14800:	str	r0, [fp, #-52]	; 0xffffffcc
   14804:	b	14854 <__assert_fail@plt+0x3754>
   14808:	mov	r5, r4
   1480c:	mov	r4, lr
   14810:	add	r0, ip, r6
   14814:	ldr	r1, [sp, #92]	; 0x5c
   14818:	ldr	r2, [fp, #-72]	; 0xffffffb8
   1481c:	bl	10f14 <memcmp@plt>
   14820:	cmp	r0, #0
   14824:	mov	r1, r0
   14828:	movwne	r1, #1
   1482c:	ldr	r2, [sp, #88]	; 0x58
   14830:	orr	r1, r1, r2
   14834:	tst	r1, #1
   14838:	beq	153e8 <__assert_fail@plt+0x42e8>
   1483c:	clz	r0, r0
   14840:	lsr	r0, r0, #5
   14844:	str	r0, [fp, #-52]	; 0xffffffcc
   14848:	ldr	ip, [fp, #-84]	; 0xffffffac
   1484c:	mov	lr, r4
   14850:	mov	r4, r5
   14854:	ldrb	r5, [ip, r6]
   14858:	cmp	r5, #126	; 0x7e
   1485c:	bhi	14c18 <__assert_fail@plt+0x3b18>
   14860:	mov	r9, #1
   14864:	mov	r2, #110	; 0x6e
   14868:	mov	r0, #97	; 0x61
   1486c:	add	r3, pc, #4
   14870:	mov	r1, #0
   14874:	ldr	pc, [r3, r5, lsl #2]
   14878:	andeq	r4, r1, r0, lsl fp
   1487c:	andeq	r4, r1, r8, lsl ip
   14880:	andeq	r4, r1, r8, lsl ip
   14884:	andeq	r4, r1, r8, lsl ip
   14888:	andeq	r4, r1, r8, lsl ip
   1488c:	andeq	r4, r1, r8, lsl ip
   14890:	andeq	r4, r1, r8, lsl ip
   14894:	ldrdeq	r4, [r1], -ip
   14898:	strdeq	r4, [r1], -r0
   1489c:	andeq	r4, r1, r8, ror #21
   148a0:	strdeq	r4, [r1], -ip
   148a4:	andeq	r4, r1, r0, lsl #23
   148a8:	andeq	r4, r1, r0, ror #21
   148ac:	strdeq	r4, [r1], -r8
   148b0:	andeq	r4, r1, r8, lsl ip
   148b4:	andeq	r4, r1, r8, lsl ip
   148b8:	andeq	r4, r1, r8, lsl ip
   148bc:	andeq	r4, r1, r8, lsl ip
   148c0:	andeq	r4, r1, r8, lsl ip
   148c4:	andeq	r4, r1, r8, lsl ip
   148c8:	andeq	r4, r1, r8, lsl ip
   148cc:	andeq	r4, r1, r8, lsl ip
   148d0:	andeq	r4, r1, r8, lsl ip
   148d4:	andeq	r4, r1, r8, lsl ip
   148d8:	andeq	r4, r1, r8, lsl ip
   148dc:	andeq	r4, r1, r8, lsl ip
   148e0:	andeq	r4, r1, r8, lsl ip
   148e4:	andeq	r4, r1, r8, lsl ip
   148e8:	andeq	r4, r1, r8, lsl ip
   148ec:	andeq	r4, r1, r8, lsl ip
   148f0:	andeq	r4, r1, r8, lsl ip
   148f4:	andeq	r4, r1, r8, lsl ip
   148f8:	andeq	r4, r1, ip, lsl #25
   148fc:	muleq	r1, r0, ip
   14900:	muleq	r1, r0, ip
   14904:	andeq	r4, r1, r8, lsl #21
   14908:	muleq	r1, r0, ip
   1490c:	andeq	r4, r1, r4, ror sl
   14910:	muleq	r1, r0, ip
   14914:	andeq	r4, r1, r8, lsl #23
   14918:	muleq	r1, r0, ip
   1491c:	muleq	r1, r0, ip
   14920:	muleq	r1, r0, ip
   14924:	andeq	r4, r1, r4, ror sl
   14928:	andeq	r4, r1, r4, ror sl
   1492c:	andeq	r4, r1, r4, ror sl
   14930:	andeq	r4, r1, r4, ror sl
   14934:	andeq	r4, r1, r4, ror sl
   14938:	andeq	r4, r1, r4, ror sl
   1493c:	andeq	r4, r1, r4, ror sl
   14940:	andeq	r4, r1, r4, ror sl
   14944:	andeq	r4, r1, r4, ror sl
   14948:	andeq	r4, r1, r4, ror sl
   1494c:	andeq	r4, r1, r4, ror sl
   14950:	andeq	r4, r1, r4, ror sl
   14954:	andeq	r4, r1, r4, ror sl
   14958:	andeq	r4, r1, r4, ror sl
   1495c:	andeq	r4, r1, r4, ror sl
   14960:	andeq	r4, r1, r4, ror sl
   14964:	muleq	r1, r0, ip
   14968:	muleq	r1, r0, ip
   1496c:	muleq	r1, r0, ip
   14970:	muleq	r1, r0, ip
   14974:	andeq	r4, r1, r0, asr fp
   14978:	andeq	r4, r1, r8, lsl ip
   1497c:	andeq	r4, r1, r4, ror sl
   14980:	andeq	r4, r1, r4, ror sl
   14984:	andeq	r4, r1, r4, ror sl
   14988:	andeq	r4, r1, r4, ror sl
   1498c:	andeq	r4, r1, r4, ror sl
   14990:	andeq	r4, r1, r4, ror sl
   14994:	andeq	r4, r1, r4, ror sl
   14998:	andeq	r4, r1, r4, ror sl
   1499c:	andeq	r4, r1, r4, ror sl
   149a0:	andeq	r4, r1, r4, ror sl
   149a4:	andeq	r4, r1, r4, ror sl
   149a8:	andeq	r4, r1, r4, ror sl
   149ac:	andeq	r4, r1, r4, ror sl
   149b0:	andeq	r4, r1, r4, ror sl
   149b4:	andeq	r4, r1, r4, ror sl
   149b8:	andeq	r4, r1, r4, ror sl
   149bc:	andeq	r4, r1, r4, ror sl
   149c0:	andeq	r4, r1, r4, ror sl
   149c4:	andeq	r4, r1, r4, ror sl
   149c8:	andeq	r4, r1, r4, ror sl
   149cc:	andeq	r4, r1, r4, ror sl
   149d0:	andeq	r4, r1, r4, ror sl
   149d4:	andeq	r4, r1, r4, ror sl
   149d8:	andeq	r4, r1, r4, ror sl
   149dc:	andeq	r4, r1, r4, ror sl
   149e0:	andeq	r4, r1, r4, ror sl
   149e4:	muleq	r1, r0, ip
   149e8:			; <UNDEFINED> instruction: 0x00014abc
   149ec:	andeq	r4, r1, r4, ror sl
   149f0:	muleq	r1, r0, ip
   149f4:	andeq	r4, r1, r4, ror sl
   149f8:	muleq	r1, r0, ip
   149fc:	andeq	r4, r1, r4, ror sl
   14a00:	andeq	r4, r1, r4, ror sl
   14a04:	andeq	r4, r1, r4, ror sl
   14a08:	andeq	r4, r1, r4, ror sl
   14a0c:	andeq	r4, r1, r4, ror sl
   14a10:	andeq	r4, r1, r4, ror sl
   14a14:	andeq	r4, r1, r4, ror sl
   14a18:	andeq	r4, r1, r4, ror sl
   14a1c:	andeq	r4, r1, r4, ror sl
   14a20:	andeq	r4, r1, r4, ror sl
   14a24:	andeq	r4, r1, r4, ror sl
   14a28:	andeq	r4, r1, r4, ror sl
   14a2c:	andeq	r4, r1, r4, ror sl
   14a30:	andeq	r4, r1, r4, ror sl
   14a34:	andeq	r4, r1, r4, ror sl
   14a38:	andeq	r4, r1, r4, ror sl
   14a3c:	andeq	r4, r1, r4, ror sl
   14a40:	andeq	r4, r1, r4, ror sl
   14a44:	andeq	r4, r1, r4, ror sl
   14a48:	andeq	r4, r1, r4, ror sl
   14a4c:	andeq	r4, r1, r4, ror sl
   14a50:	andeq	r4, r1, r4, ror sl
   14a54:	andeq	r4, r1, r4, ror sl
   14a58:	andeq	r4, r1, r4, ror sl
   14a5c:	andeq	r4, r1, r4, ror sl
   14a60:	andeq	r4, r1, r4, ror sl
   14a64:	muleq	r1, ip, sl
   14a68:	muleq	r1, r0, ip
   14a6c:	muleq	r1, ip, sl
   14a70:	andeq	r4, r1, r8, lsl #21
   14a74:	ldr	r0, [fp, #-68]	; 0xffffffbc
   14a78:	cmp	r0, #0
   14a7c:	beq	14cf0 <__assert_fail@plt+0x3bf0>
   14a80:	ldr	r0, [fp, #16]
   14a84:	b	14cf4 <__assert_fail@plt+0x3bf4>
   14a88:	mov	r9, #0
   14a8c:	cmp	r6, #0
   14a90:	beq	14c8c <__assert_fail@plt+0x3b8c>
   14a94:	mov	sl, #0
   14a98:	b	14a74 <__assert_fail@plt+0x3974>
   14a9c:	mov	r9, #0
   14aa0:	cmn	lr, #1
   14aa4:	beq	14c70 <__assert_fail@plt+0x3b70>
   14aa8:	cmp	r6, #0
   14aac:	bne	14a94 <__assert_fail@plt+0x3994>
   14ab0:	cmp	lr, #1
   14ab4:	beq	14c8c <__assert_fail@plt+0x3b8c>
   14ab8:	b	14a94 <__assert_fail@plt+0x3994>
   14abc:	ldr	r0, [fp, #-60]	; 0xffffffc4
   14ac0:	cmp	r0, #2
   14ac4:	bne	14cb8 <__assert_fail@plt+0x3bb8>
   14ac8:	ldr	r0, [fp, #-76]	; 0xffffffb4
   14acc:	tst	r0, #1
   14ad0:	bne	15400 <__assert_fail@plt+0x4300>
   14ad4:	mov	sl, #0
   14ad8:	mov	r0, #92	; 0x5c
   14adc:	b	14ccc <__assert_fail@plt+0x3bcc>
   14ae0:	mov	r0, #102	; 0x66
   14ae4:	b	14cdc <__assert_fail@plt+0x3bdc>
   14ae8:	mov	r2, #116	; 0x74
   14aec:	b	14afc <__assert_fail@plt+0x39fc>
   14af0:	mov	r0, #98	; 0x62
   14af4:	b	14cdc <__assert_fail@plt+0x3bdc>
   14af8:	mov	r2, #114	; 0x72
   14afc:	ldr	r0, [sp, #64]	; 0x40
   14b00:	tst	r0, #1
   14b04:	mov	r0, r2
   14b08:	bne	14cdc <__assert_fail@plt+0x3bdc>
   14b0c:	b	15400 <__assert_fail@plt+0x4300>
   14b10:	ldr	r0, [sp, #84]	; 0x54
   14b14:	tst	r0, #1
   14b18:	beq	14dcc <__assert_fail@plt+0x3ccc>
   14b1c:	ldr	r0, [fp, #-76]	; 0xffffffb4
   14b20:	tst	r0, #1
   14b24:	bne	15400 <__assert_fail@plt+0x4300>
   14b28:	ldr	r0, [fp, #-60]	; 0xffffffc4
   14b2c:	cmp	r0, #2
   14b30:	ldr	r0, [fp, #-80]	; 0xffffffb0
   14b34:	movwne	r0, #1
   14b38:	ldr	r2, [fp, #-56]	; 0xffffffc8
   14b3c:	orr	r0, r0, r2
   14b40:	tst	r0, #1
   14b44:	beq	151c0 <__assert_fail@plt+0x40c0>
   14b48:	mov	r0, r8
   14b4c:	b	151f4 <__assert_fail@plt+0x40f4>
   14b50:	mov	sl, #0
   14b54:	mov	r5, #63	; 0x3f
   14b58:	ldr	r0, [fp, #-60]	; 0xffffffc4
   14b5c:	cmp	r0, #5
   14b60:	beq	14f80 <__assert_fail@plt+0x3e80>
   14b64:	cmp	r0, #2
   14b68:	bne	15020 <__assert_fail@plt+0x3f20>
   14b6c:	ldr	r0, [fp, #-76]	; 0xffffffb4
   14b70:	tst	r0, #1
   14b74:	mov	r9, #0
   14b78:	beq	14a74 <__assert_fail@plt+0x3974>
   14b7c:	b	15400 <__assert_fail@plt+0x4300>
   14b80:	mov	r0, #118	; 0x76
   14b84:	b	14cdc <__assert_fail@plt+0x3bdc>
   14b88:	mov	r5, #39	; 0x27
   14b8c:	mov	r0, #1
   14b90:	str	r0, [sp, #56]	; 0x38
   14b94:	ldr	r0, [fp, #-60]	; 0xffffffc4
   14b98:	cmp	r0, #2
   14b9c:	bne	14dec <__assert_fail@plt+0x3cec>
   14ba0:	ldr	r0, [fp, #-76]	; 0xffffffb4
   14ba4:	tst	r0, #1
   14ba8:	bne	15400 <__assert_fail@plt+0x4300>
   14bac:	ldr	r2, [sp, #72]	; 0x48
   14bb0:	cmp	r2, #0
   14bb4:	mov	r0, r2
   14bb8:	movwne	r0, #1
   14bbc:	clz	r1, r4
   14bc0:	lsr	r1, r1, #5
   14bc4:	orrs	r0, r0, r1
   14bc8:	moveq	r2, r4
   14bcc:	str	r2, [sp, #72]	; 0x48
   14bd0:	moveq	r4, r0
   14bd4:	cmp	r8, r4
   14bd8:	movcc	r0, #39	; 0x27
   14bdc:	strbcc	r0, [r7, r8]
   14be0:	add	r0, r8, #1
   14be4:	cmp	r0, r4
   14be8:	movcc	r1, #92	; 0x5c
   14bec:	strbcc	r1, [r7, r0]
   14bf0:	add	r0, r8, #2
   14bf4:	cmp	r0, r4
   14bf8:	movcc	r1, #39	; 0x27
   14bfc:	strbcc	r1, [r7, r0]
   14c00:	add	r8, r8, #3
   14c04:	mov	r0, #0
   14c08:	str	r0, [fp, #-56]	; 0xffffffc8
   14c0c:	mov	sl, #0
   14c10:	mov	r9, #1
   14c14:	b	14a74 <__assert_fail@plt+0x3974>
   14c18:	str	r4, [sp, #24]
   14c1c:	ldr	r0, [sp, #40]	; 0x28
   14c20:	cmp	r0, #1
   14c24:	bne	14df4 <__assert_fail@plt+0x3cf4>
   14c28:	str	lr, [sp, #28]
   14c2c:	bl	10fec <__ctype_b_loc@plt>
   14c30:	ldr	ip, [fp, #-84]	; 0xffffffac
   14c34:	ldr	r0, [r0]
   14c38:	add	r0, r0, r5, lsl #1
   14c3c:	ldrb	r0, [r0, #1]
   14c40:	ubfx	r9, r0, #6, #1
   14c44:	mov	r1, #1
   14c48:	ldr	r4, [sp, #24]
   14c4c:	ldr	r0, [sp, #52]	; 0x34
   14c50:	orr	r0, r9, r0
   14c54:	mov	r2, r1
   14c58:	cmp	r1, #1
   14c5c:	bhi	15028 <__assert_fail@plt+0x3f28>
   14c60:	tst	r0, #1
   14c64:	beq	15028 <__assert_fail@plt+0x3f28>
   14c68:	ldr	lr, [sp, #28]
   14c6c:	b	14a74 <__assert_fail@plt+0x3974>
   14c70:	cmp	r6, #0
   14c74:	ldrbeq	r0, [ip, #1]
   14c78:	cmpeq	r0, #0
   14c7c:	beq	14c8c <__assert_fail@plt+0x3b8c>
   14c80:	mvn	lr, #0
   14c84:	mov	sl, #0
   14c88:	b	14a74 <__assert_fail@plt+0x3974>
   14c8c:	mov	r1, #1
   14c90:	ldr	r0, [fp, #-60]	; 0xffffffc4
   14c94:	cmp	r0, #2
   14c98:	bne	14cb0 <__assert_fail@plt+0x3bb0>
   14c9c:	ldr	r0, [fp, #-76]	; 0xffffffb4
   14ca0:	tst	r0, #1
   14ca4:	mov	r9, r1
   14ca8:	beq	14a74 <__assert_fail@plt+0x3974>
   14cac:	b	15400 <__assert_fail@plt+0x4300>
   14cb0:	mov	r9, r1
   14cb4:	b	14a74 <__assert_fail@plt+0x3974>
   14cb8:	mov	sl, #0
   14cbc:	mov	r0, #92	; 0x5c
   14cc0:	ldr	r1, [sp, #48]	; 0x30
   14cc4:	cmp	r1, #0
   14cc8:	beq	14cdc <__assert_fail@plt+0x3bdc>
   14ccc:	mov	r9, #0
   14cd0:	cmp	sl, #0
   14cd4:	beq	1528c <__assert_fail@plt+0x418c>
   14cd8:	b	152c8 <__assert_fail@plt+0x41c8>
   14cdc:	mov	r9, #0
   14ce0:	ldr	r1, [sp, #84]	; 0x54
   14ce4:	tst	r1, #1
   14ce8:	mov	sl, #0
   14cec:	bne	14d2c <__assert_fail@plt+0x3c2c>
   14cf0:	ldr	r0, [fp, #-88]	; 0xffffffa8
   14cf4:	cmp	r0, #0
   14cf8:	mov	r0, r5
   14cfc:	beq	14d20 <__assert_fail@plt+0x3c20>
   14d00:	ubfx	r0, r5, #5, #3
   14d04:	ldr	r1, [fp, #16]
   14d08:	ldr	r0, [r1, r0, lsl #2]
   14d0c:	and	r1, r5, #31
   14d10:	mov	r2, #1
   14d14:	tst	r0, r2, lsl r1
   14d18:	mov	r0, r5
   14d1c:	bne	14d2c <__assert_fail@plt+0x3c2c>
   14d20:	ldr	r1, [fp, #-52]	; 0xffffffcc
   14d24:	cmp	r1, #0
   14d28:	beq	15284 <__assert_fail@plt+0x4184>
   14d2c:	ldr	r1, [fp, #-76]	; 0xffffffb4
   14d30:	tst	r1, #1
   14d34:	bne	15400 <__assert_fail@plt+0x4300>
   14d38:	ldr	r1, [fp, #-60]	; 0xffffffc4
   14d3c:	cmp	r1, #2
   14d40:	ldr	r1, [fp, #-80]	; 0xffffffb0
   14d44:	movwne	r1, #1
   14d48:	ldr	r2, [fp, #-56]	; 0xffffffc8
   14d4c:	orr	r1, r1, r2
   14d50:	tst	r1, #1
   14d54:	beq	14d60 <__assert_fail@plt+0x3c60>
   14d58:	ldr	r5, [fp, #-48]	; 0xffffffd0
   14d5c:	b	14d9c <__assert_fail@plt+0x3c9c>
   14d60:	cmp	r8, r4
   14d64:	movcc	r1, #39	; 0x27
   14d68:	strbcc	r1, [r7, r8]
   14d6c:	add	r1, r8, #1
   14d70:	cmp	r1, r4
   14d74:	ldr	r5, [fp, #-48]	; 0xffffffd0
   14d78:	movcc	r2, #36	; 0x24
   14d7c:	strbcc	r2, [r7, r1]
   14d80:	add	r1, r8, #2
   14d84:	cmp	r1, r4
   14d88:	movcc	r2, #39	; 0x27
   14d8c:	strbcc	r2, [r7, r1]
   14d90:	add	r8, r8, #3
   14d94:	mov	r1, #1
   14d98:	str	r1, [fp, #-56]	; 0xffffffc8
   14d9c:	cmp	r8, r4
   14da0:	movcc	r1, #92	; 0x5c
   14da4:	strbcc	r1, [r7, r8]
   14da8:	add	r8, r8, #1
   14dac:	cmp	r8, r4
   14db0:	strbcc	r0, [r7, r8]
   14db4:	and	r5, r5, r9
   14db8:	add	r8, r8, #1
   14dbc:	add	r6, r6, #1
   14dc0:	cmn	lr, #1
   14dc4:	bne	147a0 <__assert_fail@plt+0x36a0>
   14dc8:	b	147ac <__assert_fail@plt+0x36ac>
   14dcc:	mov	r9, #0
   14dd0:	ldr	r0, [sp, #36]	; 0x24
   14dd4:	cmp	r0, #0
   14dd8:	mov	sl, #0
   14ddc:	mov	r5, #0
   14de0:	beq	14cf0 <__assert_fail@plt+0x3bf0>
   14de4:	ldr	r5, [fp, #-48]	; 0xffffffd0
   14de8:	b	14dbc <__assert_fail@plt+0x3cbc>
   14dec:	mov	r9, #1
   14df0:	b	14a74 <__assert_fail@plt+0x3974>
   14df4:	mov	r0, #0
   14df8:	str	r0, [fp, #-36]	; 0xffffffdc
   14dfc:	str	r0, [fp, #-40]	; 0xffffffd8
   14e00:	cmn	lr, #1
   14e04:	bne	14e18 <__assert_fail@plt+0x3d18>
   14e08:	mov	r0, ip
   14e0c:	bl	11004 <strlen@plt>
   14e10:	ldr	ip, [fp, #-84]	; 0xffffffac
   14e14:	mov	lr, r0
   14e18:	add	r0, ip, r6
   14e1c:	str	r0, [sp, #20]
   14e20:	mov	r9, #1
   14e24:	mov	r7, #0
   14e28:	sub	r4, fp, #40	; 0x28
   14e2c:	str	lr, [sp, #28]
   14e30:	str	r7, [sp, #44]	; 0x2c
   14e34:	add	r7, r7, r6
   14e38:	add	r1, ip, r7
   14e3c:	sub	r2, lr, r7
   14e40:	sub	r0, fp, #44	; 0x2c
   14e44:	mov	r3, r4
   14e48:	bl	16eec <__assert_fail@plt+0x5dec>
   14e4c:	cmp	r0, #0
   14e50:	beq	15310 <__assert_fail@plt+0x4210>
   14e54:	cmn	r0, #1
   14e58:	beq	152d0 <__assert_fail@plt+0x41d0>
   14e5c:	cmn	r0, #2
   14e60:	ldr	lr, [sp, #28]
   14e64:	beq	152d8 <__assert_fail@plt+0x41d8>
   14e68:	cmp	r0, #2
   14e6c:	mov	r1, #0
   14e70:	movwcc	r1, #1
   14e74:	ldr	r2, [sp, #60]	; 0x3c
   14e78:	eor	r2, r2, #1
   14e7c:	orrs	r1, r2, r1
   14e80:	ldr	r4, [sp, #24]
   14e84:	bne	14f44 <__assert_fail@plt+0x3e44>
   14e88:	ldr	r1, [sp, #44]	; 0x2c
   14e8c:	ldr	r2, [sp, #20]
   14e90:	add	r1, r2, r1
   14e94:	mov	r2, #1
   14e98:	ldrb	r3, [r1, r2]
   14e9c:	sub	r3, r3, #91	; 0x5b
   14ea0:	cmp	r3, #33	; 0x21
   14ea4:	bhi	14f38 <__assert_fail@plt+0x3e38>
   14ea8:	add	r7, pc, #0
   14eac:	ldr	pc, [r7, r3, lsl #2]
   14eb0:	strdeq	r5, [r1], -r8
   14eb4:	strdeq	r5, [r1], -r8
   14eb8:	andeq	r4, r1, r8, lsr pc
   14ebc:	strdeq	r5, [r1], -r8
   14ec0:	andeq	r4, r1, r8, lsr pc
   14ec4:	strdeq	r5, [r1], -r8
   14ec8:	andeq	r4, r1, r8, lsr pc
   14ecc:	andeq	r4, r1, r8, lsr pc
   14ed0:	andeq	r4, r1, r8, lsr pc
   14ed4:	andeq	r4, r1, r8, lsr pc
   14ed8:	andeq	r4, r1, r8, lsr pc
   14edc:	andeq	r4, r1, r8, lsr pc
   14ee0:	andeq	r4, r1, r8, lsr pc
   14ee4:	andeq	r4, r1, r8, lsr pc
   14ee8:	andeq	r4, r1, r8, lsr pc
   14eec:	andeq	r4, r1, r8, lsr pc
   14ef0:	andeq	r4, r1, r8, lsr pc
   14ef4:	andeq	r4, r1, r8, lsr pc
   14ef8:	andeq	r4, r1, r8, lsr pc
   14efc:	andeq	r4, r1, r8, lsr pc
   14f00:	andeq	r4, r1, r8, lsr pc
   14f04:	andeq	r4, r1, r8, lsr pc
   14f08:	andeq	r4, r1, r8, lsr pc
   14f0c:	andeq	r4, r1, r8, lsr pc
   14f10:	andeq	r4, r1, r8, lsr pc
   14f14:	andeq	r4, r1, r8, lsr pc
   14f18:	andeq	r4, r1, r8, lsr pc
   14f1c:	andeq	r4, r1, r8, lsr pc
   14f20:	andeq	r4, r1, r8, lsr pc
   14f24:	andeq	r4, r1, r8, lsr pc
   14f28:	andeq	r4, r1, r8, lsr pc
   14f2c:	andeq	r4, r1, r8, lsr pc
   14f30:	andeq	r4, r1, r8, lsr pc
   14f34:	strdeq	r5, [r1], -r8
   14f38:	add	r2, r2, #1
   14f3c:	cmp	r2, r0
   14f40:	bcc	14e98 <__assert_fail@plt+0x3d98>
   14f44:	ldr	r7, [sp, #44]	; 0x2c
   14f48:	add	r7, r0, r7
   14f4c:	ldr	r0, [fp, #-44]	; 0xffffffd4
   14f50:	bl	10f50 <iswprint@plt>
   14f54:	cmp	r0, #0
   14f58:	movwne	r0, #1
   14f5c:	and	r9, r9, r0
   14f60:	sub	r4, fp, #40	; 0x28
   14f64:	mov	r0, r4
   14f68:	bl	10efc <mbsinit@plt>
   14f6c:	ldr	lr, [sp, #28]
   14f70:	cmp	r0, #0
   14f74:	ldr	ip, [fp, #-84]	; 0xffffffac
   14f78:	beq	14e30 <__assert_fail@plt+0x3d30>
   14f7c:	b	15318 <__assert_fail@plt+0x4218>
   14f80:	ldr	r0, [sp, #32]
   14f84:	cmp	r0, #0
   14f88:	beq	15020 <__assert_fail@plt+0x3f20>
   14f8c:	add	r0, r6, #2
   14f90:	cmp	r0, lr
   14f94:	bcs	15020 <__assert_fail@plt+0x3f20>
   14f98:	add	r1, ip, r6
   14f9c:	ldrb	r1, [r1, #1]
   14fa0:	cmp	r1, #63	; 0x3f
   14fa4:	bne	15020 <__assert_fail@plt+0x3f20>
   14fa8:	ldrb	r9, [ip, r0]
   14fac:	sub	r2, r9, #33	; 0x21
   14fb0:	cmp	r2, #29
   14fb4:	bhi	15020 <__assert_fail@plt+0x3f20>
   14fb8:	mov	r3, #1
   14fbc:	movw	r1, #20929	; 0x51c1
   14fc0:	movt	r1, #14336	; 0x3800
   14fc4:	tst	r1, r3, lsl r2
   14fc8:	beq	15020 <__assert_fail@plt+0x3f20>
   14fcc:	ldr	r1, [fp, #-76]	; 0xffffffb4
   14fd0:	tst	r1, #1
   14fd4:	bne	15400 <__assert_fail@plt+0x4300>
   14fd8:	cmp	r8, r4
   14fdc:	movcc	r1, #63	; 0x3f
   14fe0:	strbcc	r1, [r7, r8]
   14fe4:	add	r2, r8, #1
   14fe8:	cmp	r2, r4
   14fec:	movcc	r1, #34	; 0x22
   14ff0:	strbcc	r1, [r7, r2]
   14ff4:	add	r2, r8, #2
   14ff8:	cmp	r2, r4
   14ffc:	movcc	r1, #34	; 0x22
   15000:	strbcc	r1, [r7, r2]
   15004:	add	r2, r8, #3
   15008:	cmp	r2, r4
   1500c:	movcc	r1, #63	; 0x3f
   15010:	strbcc	r1, [r7, r2]
   15014:	add	r8, r8, #4
   15018:	mov	r6, r0
   1501c:	mov	r5, r9
   15020:	mov	r9, #0
   15024:	b	14a74 <__assert_fail@plt+0x3974>
   15028:	add	r1, r2, r6
   1502c:	str	r1, [sp, #44]	; 0x2c
   15030:	add	r1, r6, #1
   15034:	mov	r3, #0
   15038:	ldr	lr, [sp, #28]
   1503c:	ldr	r6, [fp, #-60]	; 0xffffffc4
   15040:	tst	r0, #1
   15044:	bne	15138 <__assert_fail@plt+0x4038>
   15048:	ldr	r2, [fp, #-76]	; 0xffffffb4
   1504c:	tst	r2, #1
   15050:	bne	15400 <__assert_fail@plt+0x4300>
   15054:	cmp	r6, #2
   15058:	ldr	r3, [fp, #-80]	; 0xffffffb0
   1505c:	movwne	r3, #1
   15060:	ldr	r2, [fp, #-56]	; 0xffffffc8
   15064:	orr	r3, r3, r2
   15068:	tst	r3, #1
   1506c:	bne	150a8 <__assert_fail@plt+0x3fa8>
   15070:	cmp	r8, r4
   15074:	movcc	r2, #39	; 0x27
   15078:	strbcc	r2, [r7, r8]
   1507c:	add	r3, r8, #1
   15080:	cmp	r3, r4
   15084:	movcc	r2, #36	; 0x24
   15088:	strbcc	r2, [r7, r3]
   1508c:	add	r3, r8, #2
   15090:	cmp	r3, r4
   15094:	movcc	r2, #39	; 0x27
   15098:	strbcc	r2, [r7, r3]
   1509c:	add	r8, r8, #3
   150a0:	mov	r2, #1
   150a4:	str	r2, [fp, #-56]	; 0xffffffc8
   150a8:	cmp	r8, r4
   150ac:	movcc	r2, #92	; 0x5c
   150b0:	strbcc	r2, [r7, r8]
   150b4:	add	r3, r8, #1
   150b8:	cmp	r3, r4
   150bc:	bcs	150dc <__assert_fail@plt+0x3fdc>
   150c0:	and	r7, r5, #192	; 0xc0
   150c4:	mov	r2, #48	; 0x30
   150c8:	orr	r7, r2, r7, lsr #6
   150cc:	ldr	r6, [sp, #80]	; 0x50
   150d0:	strb	r7, [r6, r3]
   150d4:	ldr	r6, [fp, #-60]	; 0xffffffc4
   150d8:	ldr	r7, [sp, #80]	; 0x50
   150dc:	add	r3, r8, #2
   150e0:	cmp	r3, r4
   150e4:	bcs	15104 <__assert_fail@plt+0x4004>
   150e8:	lsr	r7, r5, #3
   150ec:	mov	r2, #6
   150f0:	bfi	r7, r2, #3, #29
   150f4:	ldr	r6, [sp, #80]	; 0x50
   150f8:	strb	r7, [r6, r3]
   150fc:	ldr	r6, [fp, #-60]	; 0xffffffc4
   15100:	ldr	r7, [sp, #80]	; 0x50
   15104:	mov	r2, #6
   15108:	bfi	r5, r2, #3, #29
   1510c:	add	r8, r8, #3
   15110:	mov	r3, #1
   15114:	b	1515c <__assert_fail@plt+0x405c>
   15118:	ldr	r7, [sp, #80]	; 0x50
   1511c:	cmp	r8, r4
   15120:	strbcc	r5, [r7, r8]
   15124:	ldrb	r5, [ip, r1]
   15128:	add	r1, r1, #1
   1512c:	add	r8, r8, #1
   15130:	tst	r0, #1
   15134:	beq	15048 <__assert_fail@plt+0x3f48>
   15138:	ldr	r2, [fp, #-52]	; 0xffffffcc
   1513c:	tst	r2, #1
   15140:	beq	15154 <__assert_fail@plt+0x4054>
   15144:	cmp	r8, r4
   15148:	movcc	r2, #92	; 0x5c
   1514c:	strbcc	r2, [r7, r8]
   15150:	add	r8, r8, #1
   15154:	mov	r2, #0
   15158:	str	r2, [fp, #-52]	; 0xffffffcc
   1515c:	and	sl, r3, #1
   15160:	ldr	r2, [sp, #44]	; 0x2c
   15164:	cmp	r2, r1
   15168:	bls	15274 <__assert_fail@plt+0x4174>
   1516c:	cmp	sl, #0
   15170:	movwne	sl, #1
   15174:	ldr	r2, [fp, #-56]	; 0xffffffc8
   15178:	mvn	r7, r2
   1517c:	orr	r7, r7, sl
   15180:	tst	r7, #1
   15184:	bne	15118 <__assert_fail@plt+0x4018>
   15188:	cmp	r8, r4
   1518c:	ldrcc	r7, [sp, #80]	; 0x50
   15190:	movcc	r2, #39	; 0x27
   15194:	strbcc	r2, [r7, r8]
   15198:	add	r7, r8, #1
   1519c:	cmp	r7, r4
   151a0:	ldrcc	r6, [sp, #80]	; 0x50
   151a4:	movcc	r2, #39	; 0x27
   151a8:	strbcc	r2, [r6, r7]
   151ac:	ldrcc	r6, [fp, #-60]	; 0xffffffc4
   151b0:	add	r8, r8, #2
   151b4:	mov	r2, #0
   151b8:	str	r2, [fp, #-56]	; 0xffffffc8
   151bc:	b	15118 <__assert_fail@plt+0x4018>
   151c0:	cmp	r8, r4
   151c4:	movcc	r0, #39	; 0x27
   151c8:	strbcc	r0, [r7, r8]
   151cc:	add	r0, r8, #1
   151d0:	cmp	r0, r4
   151d4:	movcc	r1, #36	; 0x24
   151d8:	strbcc	r1, [r7, r0]
   151dc:	add	r0, r8, #2
   151e0:	cmp	r0, r4
   151e4:	movcc	r1, #39	; 0x27
   151e8:	strbcc	r1, [r7, r0]
   151ec:	add	r0, r8, #3
   151f0:	mov	r2, #1
   151f4:	cmp	r0, r4
   151f8:	movcc	r1, #92	; 0x5c
   151fc:	strbcc	r1, [r7, r0]
   15200:	str	r2, [fp, #-56]	; 0xffffffc8
   15204:	add	r8, r0, #1
   15208:	ldr	r1, [fp, #-60]	; 0xffffffc4
   1520c:	cmp	r1, #2
   15210:	beq	15264 <__assert_fail@plt+0x4164>
   15214:	add	r1, r6, #1
   15218:	mov	r9, #0
   1521c:	mov	sl, #1
   15220:	mov	r5, #48	; 0x30
   15224:	cmp	r1, lr
   15228:	bcs	14a74 <__assert_fail@plt+0x3974>
   1522c:	ldrb	r1, [ip, r1]
   15230:	sub	r1, r1, #48	; 0x30
   15234:	uxtb	r1, r1
   15238:	cmp	r1, #9
   1523c:	bhi	14a74 <__assert_fail@plt+0x3974>
   15240:	cmp	r8, r4
   15244:	movcc	r1, #48	; 0x30
   15248:	strbcc	r1, [r7, r8]
   1524c:	add	r1, r0, #2
   15250:	cmp	r1, r4
   15254:	movcc	r2, #48	; 0x30
   15258:	strbcc	r2, [r7, r1]
   1525c:	add	r8, r0, #3
   15260:	b	14a74 <__assert_fail@plt+0x3974>
   15264:	mov	r0, #48	; 0x30
   15268:	mov	sl, #1
   1526c:	mov	r9, #0
   15270:	b	14d20 <__assert_fail@plt+0x3c20>
   15274:	sub	r6, r1, #1
   15278:	cmp	sl, #0
   1527c:	movwne	sl, #1
   15280:	mov	r0, r5
   15284:	cmp	sl, #0
   15288:	bne	152c8 <__assert_fail@plt+0x41c8>
   1528c:	ldr	r1, [fp, #-56]	; 0xffffffc8
   15290:	tst	r1, #1
   15294:	beq	152c8 <__assert_fail@plt+0x41c8>
   15298:	cmp	r8, r4
   1529c:	ldr	r5, [fp, #-48]	; 0xffffffd0
   152a0:	movcc	r1, #39	; 0x27
   152a4:	strbcc	r1, [r7, r8]
   152a8:	add	r1, r8, #1
   152ac:	cmp	r1, r4
   152b0:	movcc	r2, #39	; 0x27
   152b4:	strbcc	r2, [r7, r1]
   152b8:	add	r8, r8, #2
   152bc:	mov	r1, #0
   152c0:	str	r1, [fp, #-56]	; 0xffffffc8
   152c4:	b	14dac <__assert_fail@plt+0x3cac>
   152c8:	ldr	r5, [fp, #-48]	; 0xffffffd0
   152cc:	b	14dac <__assert_fail@plt+0x3cac>
   152d0:	mov	r9, #0
   152d4:	b	15310 <__assert_fail@plt+0x4210>
   152d8:	mov	r9, #0
   152dc:	cmp	r7, lr
   152e0:	bcs	15310 <__assert_fail@plt+0x4210>
   152e4:	ldr	ip, [fp, #-84]	; 0xffffffac
   152e8:	ldr	r7, [sp, #44]	; 0x2c
   152ec:	ldr	r0, [sp, #20]
   152f0:	ldrb	r0, [r0, r7]
   152f4:	cmp	r0, #0
   152f8:	beq	15318 <__assert_fail@plt+0x4218>
   152fc:	add	r7, r7, #1
   15300:	add	r0, r6, r7
   15304:	cmp	r0, lr
   15308:	bcc	152ec <__assert_fail@plt+0x41ec>
   1530c:	b	15318 <__assert_fail@plt+0x4218>
   15310:	ldr	ip, [fp, #-84]	; 0xffffffac
   15314:	ldr	r7, [sp, #44]	; 0x2c
   15318:	mov	r1, r7
   1531c:	ldr	r7, [sp, #80]	; 0x50
   15320:	b	14c48 <__assert_fail@plt+0x3b48>
   15324:	ldr	r1, [fp, #-60]	; 0xffffffc4
   15328:	eor	r0, r1, #2
   1532c:	orr	r0, r0, r8
   15330:	clz	r0, r0
   15334:	lsr	r0, r0, #5
   15338:	ldr	r2, [fp, #-76]	; 0xffffffb4
   1533c:	tst	r2, r0
   15340:	bne	15400 <__assert_fail@plt+0x4300>
   15344:	cmp	r1, #2
   15348:	ldr	r0, [fp, #-80]	; 0xffffffb0
   1534c:	movwne	r0, #1
   15350:	orr	r0, r2, r0
   15354:	tst	r0, #1
   15358:	ldreq	r0, [sp, #56]	; 0x38
   1535c:	eoreq	r0, r0, #1
   15360:	tsteq	r0, #1
   15364:	bne	15398 <__assert_fail@plt+0x4298>
   15368:	mov	r9, lr
   1536c:	tst	r5, #1
   15370:	bne	15468 <__assert_fail@plt+0x4368>
   15374:	ldr	r0, [sp, #72]	; 0x48
   15378:	cmp	r0, #0
   1537c:	beq	15398 <__assert_fail@plt+0x4298>
   15380:	mov	r5, #0
   15384:	cmp	r4, #0
   15388:	ldr	r0, [sp, #84]	; 0x54
   1538c:	mov	sl, r2
   15390:	ldr	r6, [sp, #72]	; 0x48
   15394:	beq	14530 <__assert_fail@plt+0x3430>
   15398:	ldr	r1, [sp, #92]	; 0x5c
   1539c:	clz	r0, r1
   153a0:	lsr	r0, r0, #5
   153a4:	orr	r0, r0, r2
   153a8:	tst	r0, #1
   153ac:	bne	153d8 <__assert_fail@plt+0x42d8>
   153b0:	ldrb	r0, [r1]
   153b4:	cmp	r0, #0
   153b8:	beq	153d8 <__assert_fail@plt+0x42d8>
   153bc:	add	r1, r1, #1
   153c0:	cmp	r8, r4
   153c4:	strbcc	r0, [r7, r8]
   153c8:	add	r8, r8, #1
   153cc:	ldrb	r0, [r1], #1
   153d0:	cmp	r0, #0
   153d4:	bne	153c0 <__assert_fail@plt+0x42c0>
   153d8:	cmp	r8, r4
   153dc:	movcc	r0, #0
   153e0:	strbcc	r0, [r7, r8]
   153e4:	b	1545c <__assert_fail@plt+0x435c>
   153e8:	ldr	ip, [fp, #-84]	; 0xffffffac
   153ec:	mov	lr, r4
   153f0:	mov	r4, r5
   153f4:	b	15400 <__assert_fail@plt+0x4300>
   153f8:	ldr	r7, [sp, #80]	; 0x50
   153fc:	ldr	ip, [fp, #-84]	; 0xffffffac
   15400:	mov	r0, #0
   15404:	ldr	r1, [fp, #12]
   15408:	bic	r1, r1, #2
   1540c:	ldr	r2, [sp, #84]	; 0x54
   15410:	tst	r2, #1
   15414:	ldr	r3, [fp, #-60]	; 0xffffffc4
   15418:	mov	r2, r3
   1541c:	movwne	r2, #4
   15420:	cmp	r3, #2
   15424:	movne	r2, r3
   15428:	str	r2, [sp]
   1542c:	str	r1, [sp, #4]
   15430:	str	r0, [sp, #8]
   15434:	ldr	r0, [sp, #68]	; 0x44
   15438:	str	r0, [sp, #12]
   1543c:	ldr	r0, [sp, #76]	; 0x4c
   15440:	str	r0, [sp, #16]
   15444:	mov	r0, r7
   15448:	mov	r1, r4
   1544c:	mov	r2, ip
   15450:	mov	r3, lr
   15454:	bl	144a8 <__assert_fail@plt+0x33a8>
   15458:	mov	r8, r0
   1545c:	mov	r0, r8
   15460:	sub	sp, fp, #28
   15464:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15468:	mov	r0, #5
   1546c:	str	r0, [sp]
   15470:	ldr	r0, [fp, #12]
   15474:	str	r0, [sp, #4]
   15478:	ldr	r0, [fp, #16]
   1547c:	str	r0, [sp, #8]
   15480:	ldr	r0, [sp, #68]	; 0x44
   15484:	str	r0, [sp, #12]
   15488:	ldr	r0, [sp, #76]	; 0x4c
   1548c:	str	r0, [sp, #16]
   15490:	mov	r0, r7
   15494:	ldr	r1, [sp, #72]	; 0x48
   15498:	ldr	r2, [fp, #-84]	; 0xffffffac
   1549c:	mov	r3, r9
   154a0:	b	15454 <__assert_fail@plt+0x4354>
   154a4:	bl	110e8 <abort@plt>
   154a8:	mov	r3, r2
   154ac:	mov	r2, #0
   154b0:	b	154b4 <__assert_fail@plt+0x43b4>
   154b4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   154b8:	add	fp, sp, #28
   154bc:	sub	sp, sp, #36	; 0x24
   154c0:	mov	r4, r2
   154c4:	str	r2, [sp, #24]
   154c8:	mov	r5, r1
   154cc:	mov	r6, r0
   154d0:	str	r0, [sp, #20]
   154d4:	movw	r8, #37248	; 0x9180
   154d8:	movt	r8, #2
   154dc:	cmp	r3, #0
   154e0:	movne	r8, r3
   154e4:	bl	1101c <__errno_location@plt>
   154e8:	str	r0, [sp, #28]
   154ec:	ldm	r8, {r3, r9}
   154f0:	ldr	r1, [r8, #40]	; 0x28
   154f4:	ldr	r2, [r8, #44]	; 0x2c
   154f8:	ldr	r7, [r0]
   154fc:	str	r7, [sp, #32]
   15500:	add	sl, r8, #8
   15504:	cmp	r4, #0
   15508:	orreq	r9, r9, #1
   1550c:	stm	sp, {r3, r9, sl}
   15510:	str	r1, [sp, #12]
   15514:	str	r2, [sp, #16]
   15518:	mov	r0, #0
   1551c:	mov	r1, #0
   15520:	mov	r2, r6
   15524:	mov	r3, r5
   15528:	mov	r7, r5
   1552c:	bl	144a8 <__assert_fail@plt+0x33a8>
   15530:	mov	r5, r0
   15534:	add	r4, r0, #1
   15538:	mov	r0, r4
   1553c:	bl	163f4 <__assert_fail@plt+0x52f4>
   15540:	mov	r6, r0
   15544:	ldr	r0, [r8]
   15548:	ldr	r1, [r8, #40]	; 0x28
   1554c:	ldr	r2, [r8, #44]	; 0x2c
   15550:	stm	sp, {r0, r9, sl}
   15554:	str	r1, [sp, #12]
   15558:	str	r2, [sp, #16]
   1555c:	mov	r0, r6
   15560:	mov	r1, r4
   15564:	ldr	r2, [sp, #20]
   15568:	mov	r3, r7
   1556c:	bl	144a8 <__assert_fail@plt+0x33a8>
   15570:	ldr	r0, [sp, #24]
   15574:	ldr	r1, [sp, #32]
   15578:	ldr	r2, [sp, #28]
   1557c:	str	r1, [r2]
   15580:	cmp	r0, #0
   15584:	strne	r5, [r0]
   15588:	mov	r0, r6
   1558c:	sub	sp, fp, #28
   15590:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15594:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   15598:	add	fp, sp, #24
   1559c:	movw	r8, #37112	; 0x90f8
   155a0:	movt	r8, #2
   155a4:	ldr	r4, [r8]
   155a8:	movw	r5, #37116	; 0x90fc
   155ac:	movt	r5, #2
   155b0:	ldr	r0, [r5]
   155b4:	cmp	r0, #2
   155b8:	blt	155e4 <__assert_fail@plt+0x44e4>
   155bc:	add	r7, r4, #12
   155c0:	mov	r6, #0
   155c4:	ldr	r0, [r7, r6, lsl #3]
   155c8:	bl	14150 <__assert_fail@plt+0x3050>
   155cc:	add	r0, r6, #1
   155d0:	ldr	r1, [r5]
   155d4:	add	r2, r6, #2
   155d8:	cmp	r2, r1
   155dc:	mov	r6, r0
   155e0:	blt	155c4 <__assert_fail@plt+0x44c4>
   155e4:	ldr	r0, [r4, #4]
   155e8:	movw	r7, #37296	; 0x91b0
   155ec:	movt	r7, #2
   155f0:	cmp	r0, r7
   155f4:	beq	1560c <__assert_fail@plt+0x450c>
   155f8:	bl	14150 <__assert_fail@plt+0x3050>
   155fc:	movw	r0, #37120	; 0x9100
   15600:	movt	r0, #2
   15604:	mov	r6, #256	; 0x100
   15608:	strd	r6, [r0]
   1560c:	movw	r6, #37120	; 0x9100
   15610:	movt	r6, #2
   15614:	cmp	r4, r6
   15618:	beq	15628 <__assert_fail@plt+0x4528>
   1561c:	mov	r0, r4
   15620:	bl	14150 <__assert_fail@plt+0x3050>
   15624:	str	r6, [r8]
   15628:	mov	r0, #1
   1562c:	str	r0, [r5]
   15630:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   15634:	movw	r3, #37248	; 0x9180
   15638:	movt	r3, #2
   1563c:	mvn	r2, #0
   15640:	b	15644 <__assert_fail@plt+0x4544>
   15644:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15648:	add	fp, sp, #28
   1564c:	sub	sp, sp, #44	; 0x2c
   15650:	mov	r7, r3
   15654:	str	r2, [sp, #36]	; 0x24
   15658:	str	r1, [sp, #32]
   1565c:	mov	r5, r0
   15660:	bl	1101c <__errno_location@plt>
   15664:	cmp	r5, #0
   15668:	blt	157d4 <__assert_fail@plt+0x46d4>
   1566c:	cmn	r5, #-2147483647	; 0x80000001
   15670:	beq	157d4 <__assert_fail@plt+0x46d4>
   15674:	movw	r4, #37112	; 0x90f8
   15678:	movt	r4, #2
   1567c:	ldr	r6, [r4]
   15680:	str	r0, [sp, #28]
   15684:	ldr	r0, [r0]
   15688:	str	r0, [sp, #24]
   1568c:	movw	r8, #37116	; 0x90fc
   15690:	movt	r8, #2
   15694:	ldr	r1, [r8]
   15698:	cmp	r1, r5
   1569c:	ble	156a8 <__assert_fail@plt+0x45a8>
   156a0:	mov	sl, r6
   156a4:	b	15710 <__assert_fail@plt+0x4610>
   156a8:	str	r1, [fp, #-32]	; 0xffffffe0
   156ac:	mov	r0, #8
   156b0:	str	r0, [sp]
   156b4:	movw	r9, #37120	; 0x9100
   156b8:	movt	r9, #2
   156bc:	subs	r0, r6, r9
   156c0:	movne	r0, r6
   156c4:	add	r2, r5, #1
   156c8:	sub	r2, r2, r1
   156cc:	sub	r1, fp, #32
   156d0:	mvn	r3, #-2147483648	; 0x80000000
   156d4:	bl	164dc <__assert_fail@plt+0x53dc>
   156d8:	mov	sl, r0
   156dc:	str	r0, [r4]
   156e0:	cmp	r6, r9
   156e4:	ldrdeq	r0, [r9]
   156e8:	stmeq	sl, {r0, r1}
   156ec:	ldr	r1, [r8]
   156f0:	add	r0, sl, r1, lsl #3
   156f4:	ldr	r2, [fp, #-32]	; 0xffffffe0
   156f8:	sub	r1, r2, r1
   156fc:	lsl	r2, r1, #3
   15700:	mov	r1, #0
   15704:	bl	11034 <memset@plt>
   15708:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1570c:	str	r0, [r8]
   15710:	mov	r9, sl
   15714:	ldr	r6, [r9, r5, lsl #3]!
   15718:	ldr	r4, [r9, #4]!
   1571c:	ldm	r7, {r0, r1}
   15720:	ldr	r2, [r7, #40]	; 0x28
   15724:	ldr	r3, [r7, #44]	; 0x2c
   15728:	orr	r8, r1, #1
   1572c:	add	r1, r7, #8
   15730:	stm	sp, {r0, r8}
   15734:	str	r1, [sp, #20]
   15738:	add	r0, sp, #8
   1573c:	stm	r0, {r1, r2, r3}
   15740:	mov	r0, r4
   15744:	mov	r1, r6
   15748:	ldr	r2, [sp, #32]
   1574c:	ldr	r3, [sp, #36]	; 0x24
   15750:	bl	144a8 <__assert_fail@plt+0x33a8>
   15754:	cmp	r6, r0
   15758:	bhi	157bc <__assert_fail@plt+0x46bc>
   1575c:	add	r6, r0, #1
   15760:	str	r6, [sl, r5, lsl #3]
   15764:	movw	r0, #37296	; 0x91b0
   15768:	movt	r0, #2
   1576c:	cmp	r4, r0
   15770:	beq	1577c <__assert_fail@plt+0x467c>
   15774:	mov	r0, r4
   15778:	bl	14150 <__assert_fail@plt+0x3050>
   1577c:	mov	r0, r6
   15780:	bl	163f4 <__assert_fail@plt+0x52f4>
   15784:	mov	r4, r0
   15788:	str	r0, [r9]
   1578c:	ldr	r0, [r7]
   15790:	ldr	r1, [r7, #40]	; 0x28
   15794:	ldr	r2, [r7, #44]	; 0x2c
   15798:	stm	sp, {r0, r8}
   1579c:	ldr	r0, [sp, #20]
   157a0:	add	r3, sp, #8
   157a4:	stm	r3, {r0, r1, r2}
   157a8:	mov	r0, r4
   157ac:	mov	r1, r6
   157b0:	ldr	r2, [sp, #32]
   157b4:	ldr	r3, [sp, #36]	; 0x24
   157b8:	bl	144a8 <__assert_fail@plt+0x33a8>
   157bc:	ldr	r0, [sp, #28]
   157c0:	ldr	r1, [sp, #24]
   157c4:	str	r1, [r0]
   157c8:	mov	r0, r4
   157cc:	sub	sp, fp, #28
   157d0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   157d4:	bl	110e8 <abort@plt>
   157d8:	movw	r3, #37248	; 0x9180
   157dc:	movt	r3, #2
   157e0:	b	15644 <__assert_fail@plt+0x4544>
   157e4:	mov	r1, r0
   157e8:	mov	r0, #0
   157ec:	b	15634 <__assert_fail@plt+0x4534>
   157f0:	mov	r2, r1
   157f4:	mov	r1, r0
   157f8:	mov	r0, #0
   157fc:	b	157d8 <__assert_fail@plt+0x46d8>
   15800:	push	{r4, r5, r6, sl, fp, lr}
   15804:	add	fp, sp, #16
   15808:	sub	sp, sp, #48	; 0x30
   1580c:	mov	r4, r2
   15810:	mov	r5, r0
   15814:	mov	r6, sp
   15818:	mov	r0, r6
   1581c:	bl	1583c <__assert_fail@plt+0x473c>
   15820:	mov	r0, r5
   15824:	mov	r1, r4
   15828:	mvn	r2, #0
   1582c:	mov	r3, r6
   15830:	bl	15644 <__assert_fail@plt+0x4544>
   15834:	sub	sp, fp, #16
   15838:	pop	{r4, r5, r6, sl, fp, pc}
   1583c:	vmov.i32	q8, #0	; 0x00000000
   15840:	mov	r2, #32
   15844:	mov	r3, r0
   15848:	vst1.32	{d16-d17}, [r3], r2
   1584c:	vst1.32	{d16-d17}, [r3]
   15850:	add	r2, r0, #16
   15854:	vst1.32	{d16-d17}, [r2]
   15858:	cmp	r1, #10
   1585c:	strne	r1, [r0]
   15860:	bxne	lr
   15864:	push	{fp, lr}
   15868:	mov	fp, sp
   1586c:	bl	110e8 <abort@plt>
   15870:	push	{r4, r5, r6, r7, fp, lr}
   15874:	add	fp, sp, #16
   15878:	sub	sp, sp, #48	; 0x30
   1587c:	mov	r4, r3
   15880:	mov	r5, r2
   15884:	mov	r6, r0
   15888:	mov	r7, sp
   1588c:	mov	r0, r7
   15890:	bl	1583c <__assert_fail@plt+0x473c>
   15894:	mov	r0, r6
   15898:	mov	r1, r5
   1589c:	mov	r2, r4
   158a0:	mov	r3, r7
   158a4:	bl	15644 <__assert_fail@plt+0x4544>
   158a8:	sub	sp, fp, #16
   158ac:	pop	{r4, r5, r6, r7, fp, pc}
   158b0:	mov	r2, r1
   158b4:	mov	r1, r0
   158b8:	mov	r0, #0
   158bc:	b	15800 <__assert_fail@plt+0x4700>
   158c0:	mov	r3, r2
   158c4:	mov	r2, r1
   158c8:	mov	r1, r0
   158cc:	mov	r0, #0
   158d0:	b	15870 <__assert_fail@plt+0x4770>
   158d4:	push	{r4, r5, r6, sl, fp, lr}
   158d8:	add	fp, sp, #16
   158dc:	sub	sp, sp, #48	; 0x30
   158e0:	mov	r4, r1
   158e4:	mov	r5, r0
   158e8:	mov	r0, #32
   158ec:	movw	r1, #37248	; 0x9180
   158f0:	movt	r1, #2
   158f4:	add	r3, r1, #16
   158f8:	vld1.64	{d16-d17}, [r1], r0
   158fc:	mov	r6, sp
   15900:	vld1.64	{d18-d19}, [r3]
   15904:	add	r3, r6, #16
   15908:	vld1.64	{d20-d21}, [r1]
   1590c:	vst1.64	{d18-d19}, [r3]
   15910:	mov	r1, r6
   15914:	vst1.64	{d16-d17}, [r1], r0
   15918:	vst1.64	{d20-d21}, [r1]
   1591c:	mov	r0, r6
   15920:	mov	r1, r2
   15924:	mov	r2, #1
   15928:	bl	1439c <__assert_fail@plt+0x329c>
   1592c:	mov	r0, #0
   15930:	mov	r1, r5
   15934:	mov	r2, r4
   15938:	mov	r3, r6
   1593c:	bl	15644 <__assert_fail@plt+0x4544>
   15940:	sub	sp, fp, #16
   15944:	pop	{r4, r5, r6, sl, fp, pc}
   15948:	mov	r2, r1
   1594c:	mvn	r1, #0
   15950:	b	158d4 <__assert_fail@plt+0x47d4>
   15954:	mov	r1, #58	; 0x3a
   15958:	b	15948 <__assert_fail@plt+0x4848>
   1595c:	mov	r2, #58	; 0x3a
   15960:	b	158d4 <__assert_fail@plt+0x47d4>
   15964:	push	{r4, r5, r6, sl, fp, lr}
   15968:	add	fp, sp, #16
   1596c:	sub	sp, sp, #48	; 0x30
   15970:	mov	r4, r2
   15974:	mov	r5, r0
   15978:	mov	r6, sp
   1597c:	mov	r0, r6
   15980:	bl	1583c <__assert_fail@plt+0x473c>
   15984:	mov	r0, r6
   15988:	mov	r1, #58	; 0x3a
   1598c:	mov	r2, #1
   15990:	bl	1439c <__assert_fail@plt+0x329c>
   15994:	mov	r0, r5
   15998:	mov	r1, r4
   1599c:	mvn	r2, #0
   159a0:	mov	r3, r6
   159a4:	bl	15644 <__assert_fail@plt+0x4544>
   159a8:	sub	sp, fp, #16
   159ac:	pop	{r4, r5, r6, sl, fp, pc}
   159b0:	push	{fp, lr}
   159b4:	mov	fp, sp
   159b8:	sub	sp, sp, #8
   159bc:	mvn	ip, #0
   159c0:	str	ip, [sp]
   159c4:	bl	159d0 <__assert_fail@plt+0x48d0>
   159c8:	mov	sp, fp
   159cc:	pop	{fp, pc}
   159d0:	push	{r4, r5, r6, r7, fp, lr}
   159d4:	add	fp, sp, #16
   159d8:	sub	sp, sp, #48	; 0x30
   159dc:	mov	r7, r3
   159e0:	mov	r5, r0
   159e4:	mov	r0, #32
   159e8:	movw	r3, #37248	; 0x9180
   159ec:	movt	r3, #2
   159f0:	add	r4, r3, #16
   159f4:	vld1.64	{d16-d17}, [r3], r0
   159f8:	mov	r6, sp
   159fc:	vld1.64	{d18-d19}, [r4]
   15a00:	add	r4, r6, #16
   15a04:	vld1.64	{d20-d21}, [r3]
   15a08:	vst1.64	{d18-d19}, [r4]
   15a0c:	mov	r3, r6
   15a10:	vst1.64	{d16-d17}, [r3], r0
   15a14:	vst1.64	{d20-d21}, [r3]
   15a18:	mov	r0, r6
   15a1c:	bl	143f4 <__assert_fail@plt+0x32f4>
   15a20:	ldr	r2, [fp, #8]
   15a24:	mov	r0, r5
   15a28:	mov	r1, r7
   15a2c:	mov	r3, r6
   15a30:	bl	15644 <__assert_fail@plt+0x4544>
   15a34:	sub	sp, fp, #16
   15a38:	pop	{r4, r5, r6, r7, fp, pc}
   15a3c:	mov	r3, r2
   15a40:	mov	r2, r1
   15a44:	mov	r1, r0
   15a48:	mov	r0, #0
   15a4c:	b	159b0 <__assert_fail@plt+0x48b0>
   15a50:	push	{fp, lr}
   15a54:	mov	fp, sp
   15a58:	sub	sp, sp, #8
   15a5c:	mov	ip, r2
   15a60:	mov	r2, r1
   15a64:	mov	r1, r0
   15a68:	str	r3, [sp]
   15a6c:	mov	r0, #0
   15a70:	mov	r3, ip
   15a74:	bl	159d0 <__assert_fail@plt+0x48d0>
   15a78:	mov	sp, fp
   15a7c:	pop	{fp, pc}
   15a80:	movw	r3, #37128	; 0x9108
   15a84:	movt	r3, #2
   15a88:	b	15644 <__assert_fail@plt+0x4544>
   15a8c:	mov	r2, r1
   15a90:	mov	r1, r0
   15a94:	mov	r0, #0
   15a98:	b	15a80 <__assert_fail@plt+0x4980>
   15a9c:	mvn	r2, #0
   15aa0:	b	15a80 <__assert_fail@plt+0x4980>
   15aa4:	mov	r1, r0
   15aa8:	mov	r0, #0
   15aac:	b	15a9c <__assert_fail@plt+0x499c>
   15ab0:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   15ab4:	add	fp, sp, #24
   15ab8:	sub	sp, sp, #16
   15abc:	mov	r4, r1
   15ac0:	mov	r5, r0
   15ac4:	mov	r7, #0
   15ac8:	mov	r0, #0
   15acc:	mov	r1, r5
   15ad0:	mov	r2, #5
   15ad4:	bl	10f2c <dcgettext@plt>
   15ad8:	cmp	r0, r5
   15adc:	beq	15ae8 <__assert_fail@plt+0x49e8>
   15ae0:	sub	sp, fp, #24
   15ae4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   15ae8:	bl	16eb4 <__assert_fail@plt+0x5db4>
   15aec:	mov	r6, r0
   15af0:	mov	r8, #56	; 0x38
   15af4:	mov	r0, #45	; 0x2d
   15af8:	stm	sp, {r0, r8}
   15afc:	str	r7, [sp, #8]
   15b00:	str	r7, [sp, #12]
   15b04:	mov	r0, r6
   15b08:	mov	r1, #85	; 0x55
   15b0c:	mov	r2, #84	; 0x54
   15b10:	mov	r3, #70	; 0x46
   15b14:	bl	15bac <__assert_fail@plt+0x4aac>
   15b18:	cmp	r0, #0
   15b1c:	beq	15b38 <__assert_fail@plt+0x4a38>
   15b20:	ldrb	r1, [r5]
   15b24:	movw	r2, #33269	; 0x81f5
   15b28:	movt	r2, #1
   15b2c:	movw	r0, #33273	; 0x81f9
   15b30:	movt	r0, #1
   15b34:	b	15b7c <__assert_fail@plt+0x4a7c>
   15b38:	mov	r0, #48	; 0x30
   15b3c:	mov	r1, #51	; 0x33
   15b40:	str	r8, [sp]
   15b44:	stmib	sp, {r0, r1}
   15b48:	str	r0, [sp, #12]
   15b4c:	mov	r0, r6
   15b50:	mov	r1, #71	; 0x47
   15b54:	mov	r2, #66	; 0x42
   15b58:	mov	r3, #49	; 0x31
   15b5c:	bl	15bac <__assert_fail@plt+0x4aac>
   15b60:	cmp	r0, #0
   15b64:	beq	15b8c <__assert_fail@plt+0x4a8c>
   15b68:	ldrb	r1, [r5]
   15b6c:	movw	r2, #33277	; 0x81fd
   15b70:	movt	r2, #1
   15b74:	movw	r0, #33281	; 0x8201
   15b78:	movt	r0, #1
   15b7c:	cmp	r1, #96	; 0x60
   15b80:	moveq	r0, r2
   15b84:	sub	sp, fp, #24
   15b88:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   15b8c:	movw	r1, #33263	; 0x81ef
   15b90:	movt	r1, #1
   15b94:	movw	r0, #33267	; 0x81f3
   15b98:	movt	r0, #1
   15b9c:	cmp	r4, #9
   15ba0:	moveq	r0, r1
   15ba4:	sub	sp, fp, #24
   15ba8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   15bac:	push	{r4, r5, r6, r7, fp, lr}
   15bb0:	add	fp, sp, #16
   15bb4:	sub	sp, sp, #16
   15bb8:	mov	r4, r3
   15bbc:	mov	r5, r2
   15bc0:	mov	r7, r1
   15bc4:	mov	r6, r0
   15bc8:	mov	r0, r1
   15bcc:	bl	13e90 <__assert_fail@plt+0x2d90>
   15bd0:	ldrb	r1, [r6]
   15bd4:	cmp	r0, #0
   15bd8:	andne	r1, r1, #223	; 0xdf
   15bdc:	mov	r0, #0
   15be0:	cmp	r1, r7
   15be4:	bne	15c24 <__assert_fail@plt+0x4b24>
   15be8:	cmp	r7, #0
   15bec:	moveq	r0, #1
   15bf0:	subeq	sp, fp, #16
   15bf4:	popeq	{r4, r5, r6, r7, fp, pc}
   15bf8:	ldr	r0, [fp, #20]
   15bfc:	ldr	r1, [fp, #16]
   15c00:	ldr	r2, [fp, #12]
   15c04:	ldr	r3, [fp, #8]
   15c08:	str	r2, [sp]
   15c0c:	str	r1, [sp, #4]
   15c10:	str	r0, [sp, #8]
   15c14:	mov	r0, r6
   15c18:	mov	r1, r5
   15c1c:	mov	r2, r4
   15c20:	bl	15c2c <__assert_fail@plt+0x4b2c>
   15c24:	sub	sp, fp, #16
   15c28:	pop	{r4, r5, r6, r7, fp, pc}
   15c2c:	push	{r4, r5, r6, r7, fp, lr}
   15c30:	add	fp, sp, #16
   15c34:	sub	sp, sp, #8
   15c38:	mov	r4, r3
   15c3c:	mov	r5, r2
   15c40:	mov	r7, r1
   15c44:	mov	r6, r0
   15c48:	mov	r0, r1
   15c4c:	bl	13e90 <__assert_fail@plt+0x2d90>
   15c50:	ldrb	r1, [r6, #1]
   15c54:	cmp	r0, #0
   15c58:	andne	r1, r1, #223	; 0xdf
   15c5c:	mov	r0, #0
   15c60:	cmp	r1, r7
   15c64:	bne	15c9c <__assert_fail@plt+0x4b9c>
   15c68:	cmp	r7, #0
   15c6c:	moveq	r0, #1
   15c70:	subeq	sp, fp, #16
   15c74:	popeq	{r4, r5, r6, r7, fp, pc}
   15c78:	ldr	r0, [fp, #16]
   15c7c:	ldr	r1, [fp, #12]
   15c80:	ldr	r3, [fp, #8]
   15c84:	str	r1, [sp]
   15c88:	str	r0, [sp, #4]
   15c8c:	mov	r0, r6
   15c90:	mov	r1, r5
   15c94:	mov	r2, r4
   15c98:	bl	15ca4 <__assert_fail@plt+0x4ba4>
   15c9c:	sub	sp, fp, #16
   15ca0:	pop	{r4, r5, r6, r7, fp, pc}
   15ca4:	push	{r4, r5, r6, r7, fp, lr}
   15ca8:	add	fp, sp, #16
   15cac:	sub	sp, sp, #8
   15cb0:	mov	r4, r3
   15cb4:	mov	r5, r2
   15cb8:	mov	r7, r1
   15cbc:	mov	r6, r0
   15cc0:	mov	r0, r1
   15cc4:	bl	13e90 <__assert_fail@plt+0x2d90>
   15cc8:	ldrb	r1, [r6, #2]
   15ccc:	cmp	r0, #0
   15cd0:	andne	r1, r1, #223	; 0xdf
   15cd4:	mov	r0, #0
   15cd8:	cmp	r1, r7
   15cdc:	bne	15d0c <__assert_fail@plt+0x4c0c>
   15ce0:	cmp	r7, #0
   15ce4:	moveq	r0, #1
   15ce8:	subeq	sp, fp, #16
   15cec:	popeq	{r4, r5, r6, r7, fp, pc}
   15cf0:	ldr	r0, [fp, #12]
   15cf4:	ldr	r3, [fp, #8]
   15cf8:	str	r0, [sp]
   15cfc:	mov	r0, r6
   15d00:	mov	r1, r5
   15d04:	mov	r2, r4
   15d08:	bl	15d14 <__assert_fail@plt+0x4c14>
   15d0c:	sub	sp, fp, #16
   15d10:	pop	{r4, r5, r6, r7, fp, pc}
   15d14:	push	{r4, r5, r6, r7, fp, lr}
   15d18:	add	fp, sp, #16
   15d1c:	mov	r4, r3
   15d20:	mov	r5, r2
   15d24:	mov	r7, r1
   15d28:	mov	r6, r0
   15d2c:	mov	r0, r1
   15d30:	bl	13e90 <__assert_fail@plt+0x2d90>
   15d34:	ldrb	r1, [r6, #3]
   15d38:	ldr	r3, [fp, #8]
   15d3c:	cmp	r0, #0
   15d40:	andne	r1, r1, #223	; 0xdf
   15d44:	mov	r0, #0
   15d48:	cmp	r1, r7
   15d4c:	popne	{r4, r5, r6, r7, fp, pc}
   15d50:	cmp	r7, #0
   15d54:	beq	15d6c <__assert_fail@plt+0x4c6c>
   15d58:	mov	r0, r6
   15d5c:	mov	r1, r5
   15d60:	mov	r2, r4
   15d64:	pop	{r4, r5, r6, r7, fp, lr}
   15d68:	b	15d74 <__assert_fail@plt+0x4c74>
   15d6c:	mov	r0, #1
   15d70:	pop	{r4, r5, r6, r7, fp, pc}
   15d74:	push	{r4, r5, r6, r7, fp, lr}
   15d78:	add	fp, sp, #16
   15d7c:	mov	r4, r3
   15d80:	mov	r5, r2
   15d84:	mov	r7, r1
   15d88:	mov	r6, r0
   15d8c:	mov	r0, r1
   15d90:	bl	13e90 <__assert_fail@plt+0x2d90>
   15d94:	ldrb	r1, [r6, #4]
   15d98:	cmp	r0, #0
   15d9c:	andne	r1, r1, #223	; 0xdf
   15da0:	mov	r0, #0
   15da4:	cmp	r1, r7
   15da8:	popne	{r4, r5, r6, r7, fp, pc}
   15dac:	cmp	r7, #0
   15db0:	beq	15dc8 <__assert_fail@plt+0x4cc8>
   15db4:	mov	r0, r6
   15db8:	mov	r1, r5
   15dbc:	mov	r2, r4
   15dc0:	pop	{r4, r5, r6, r7, fp, lr}
   15dc4:	b	15dd0 <__assert_fail@plt+0x4cd0>
   15dc8:	mov	r0, #1
   15dcc:	pop	{r4, r5, r6, r7, fp, pc}
   15dd0:	push	{r4, r5, r6, sl, fp, lr}
   15dd4:	add	fp, sp, #16
   15dd8:	mov	r4, r2
   15ddc:	mov	r6, r1
   15de0:	mov	r5, r0
   15de4:	mov	r0, r1
   15de8:	bl	13e90 <__assert_fail@plt+0x2d90>
   15dec:	ldrb	r1, [r5, #5]
   15df0:	cmp	r0, #0
   15df4:	andne	r1, r1, #223	; 0xdf
   15df8:	mov	r0, #0
   15dfc:	cmp	r1, r6
   15e00:	popne	{r4, r5, r6, sl, fp, pc}
   15e04:	cmp	r6, #0
   15e08:	beq	15e1c <__assert_fail@plt+0x4d1c>
   15e0c:	mov	r0, r5
   15e10:	mov	r1, r4
   15e14:	pop	{r4, r5, r6, sl, fp, lr}
   15e18:	b	15e24 <__assert_fail@plt+0x4d24>
   15e1c:	mov	r0, #1
   15e20:	pop	{r4, r5, r6, sl, fp, pc}
   15e24:	push	{r4, r5, fp, lr}
   15e28:	add	fp, sp, #8
   15e2c:	mov	r5, r1
   15e30:	mov	r4, r0
   15e34:	mov	r0, r1
   15e38:	bl	13e90 <__assert_fail@plt+0x2d90>
   15e3c:	ldrb	r1, [r4, #6]
   15e40:	cmp	r0, #0
   15e44:	andne	r1, r1, #223	; 0xdf
   15e48:	mov	r0, #0
   15e4c:	cmp	r1, r5
   15e50:	popne	{r4, r5, fp, pc}
   15e54:	cmp	r5, #0
   15e58:	beq	15e68 <__assert_fail@plt+0x4d68>
   15e5c:	mov	r0, r4
   15e60:	pop	{r4, r5, fp, lr}
   15e64:	b	15e70 <__assert_fail@plt+0x4d70>
   15e68:	mov	r0, #1
   15e6c:	pop	{r4, r5, fp, pc}
   15e70:	push	{r4, sl, fp, lr}
   15e74:	add	fp, sp, #8
   15e78:	mov	r4, r0
   15e7c:	mov	r0, #0
   15e80:	bl	13e90 <__assert_fail@plt+0x2d90>
   15e84:	ldrb	r1, [r4, #7]
   15e88:	cmp	r0, #0
   15e8c:	beq	15ea4 <__assert_fail@plt+0x4da4>
   15e90:	tst	r1, #223	; 0xdf
   15e94:	moveq	r0, #1
   15e98:	popeq	{r4, sl, fp, pc}
   15e9c:	mov	r0, #0
   15ea0:	pop	{r4, sl, fp, pc}
   15ea4:	cmp	r1, #0
   15ea8:	moveq	r0, #1
   15eac:	popeq	{r4, sl, fp, pc}
   15eb0:	mov	r0, #0
   15eb4:	pop	{r4, sl, fp, pc}
   15eb8:	cmp	r2, #0
   15ebc:	beq	15eec <__assert_fail@plt+0x4dec>
   15ec0:	mvn	r3, #0
   15ec4:	udiv	r3, r3, r2
   15ec8:	cmp	r3, r1
   15ecc:	bcs	15eec <__assert_fail@plt+0x4dec>
   15ed0:	push	{fp, lr}
   15ed4:	mov	fp, sp
   15ed8:	bl	1101c <__errno_location@plt>
   15edc:	mov	r1, #12
   15ee0:	str	r1, [r0]
   15ee4:	mov	r0, #0
   15ee8:	pop	{fp, pc}
   15eec:	mul	r1, r2, r1
   15ef0:	b	16dc8 <__assert_fail@plt+0x5cc8>
   15ef4:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   15ef8:	add	fp, sp, #24
   15efc:	sub	sp, sp, #32
   15f00:	mov	r4, r2
   15f04:	mov	r8, r0
   15f08:	ldr	r6, [fp, #12]
   15f0c:	ldr	r7, [fp, #8]
   15f10:	cmp	r1, #0
   15f14:	beq	15f3c <__assert_fail@plt+0x4e3c>
   15f18:	mov	r5, r1
   15f1c:	str	r4, [sp]
   15f20:	str	r3, [sp, #4]
   15f24:	movw	r2, #33368	; 0x8258
   15f28:	movt	r2, #1
   15f2c:	mov	r0, r8
   15f30:	mov	r1, #1
   15f34:	mov	r3, r5
   15f38:	b	15f54 <__assert_fail@plt+0x4e54>
   15f3c:	str	r3, [sp]
   15f40:	movw	r2, #33380	; 0x8264
   15f44:	movt	r2, #1
   15f48:	mov	r0, r8
   15f4c:	mov	r1, #1
   15f50:	mov	r3, r4
   15f54:	bl	11058 <__fprintf_chk@plt>
   15f58:	movw	r1, #33387	; 0x826b
   15f5c:	movt	r1, #1
   15f60:	mov	r0, #0
   15f64:	mov	r2, #5
   15f68:	bl	10f2c <dcgettext@plt>
   15f6c:	mov	r3, r0
   15f70:	movw	r0, #2022	; 0x7e6
   15f74:	str	r0, [sp]
   15f78:	movw	r2, #34105	; 0x8539
   15f7c:	movt	r2, #1
   15f80:	mov	r0, r8
   15f84:	mov	r1, #1
   15f88:	bl	11058 <__fprintf_chk@plt>
   15f8c:	movw	r4, #31406	; 0x7aae
   15f90:	movt	r4, #1
   15f94:	mov	r0, r4
   15f98:	mov	r1, r8
   15f9c:	bl	10e90 <fputs_unlocked@plt>
   15fa0:	movw	r1, #33391	; 0x826f
   15fa4:	movt	r1, #1
   15fa8:	mov	r0, #0
   15fac:	mov	r2, #5
   15fb0:	bl	10f2c <dcgettext@plt>
   15fb4:	mov	r2, r0
   15fb8:	movw	r3, #33562	; 0x831a
   15fbc:	movt	r3, #1
   15fc0:	mov	r0, r8
   15fc4:	mov	r1, #1
   15fc8:	bl	11058 <__fprintf_chk@plt>
   15fcc:	mov	r0, r4
   15fd0:	mov	r1, r8
   15fd4:	bl	10e90 <fputs_unlocked@plt>
   15fd8:	cmp	r6, #9
   15fdc:	bhi	16018 <__assert_fail@plt+0x4f18>
   15fe0:	add	r0, pc, #0
   15fe4:	ldr	pc, [r0, r6, lsl #2]
   15fe8:	andeq	r6, r1, r0, lsl r0
   15fec:	andeq	r6, r1, r4, lsr #32
   15ff0:	andeq	r6, r1, r4, asr r0
   15ff4:	andeq	r6, r1, ip, ror r0
   15ff8:	andeq	r6, r1, r4, lsr #1
   15ffc:	andeq	r6, r1, ip, asr #1
   16000:	strdeq	r6, [r1], -r4
   16004:	andeq	r6, r1, ip, lsr #2
   16008:	andeq	r6, r1, ip, asr #3
   1600c:	andeq	r6, r1, r4, ror r1
   16010:	sub	sp, fp, #24
   16014:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   16018:	movw	r1, #33915	; 0x847b
   1601c:	movt	r1, #1
   16020:	b	1617c <__assert_fail@plt+0x507c>
   16024:	movw	r1, #33596	; 0x833c
   16028:	movt	r1, #1
   1602c:	mov	r0, #0
   16030:	mov	r2, #5
   16034:	bl	10f2c <dcgettext@plt>
   16038:	mov	r2, r0
   1603c:	ldr	r3, [r7]
   16040:	mov	r0, r8
   16044:	mov	r1, #1
   16048:	sub	sp, fp, #24
   1604c:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   16050:	b	11058 <__fprintf_chk@plt>
   16054:	movw	r1, #33612	; 0x834c
   16058:	movt	r1, #1
   1605c:	mov	r0, #0
   16060:	mov	r2, #5
   16064:	bl	10f2c <dcgettext@plt>
   16068:	mov	r2, r0
   1606c:	ldr	r3, [r7]
   16070:	ldr	r0, [r7, #4]
   16074:	str	r0, [sp]
   16078:	b	16168 <__assert_fail@plt+0x5068>
   1607c:	movw	r1, #33635	; 0x8363
   16080:	movt	r1, #1
   16084:	mov	r0, #0
   16088:	mov	r2, #5
   1608c:	bl	10f2c <dcgettext@plt>
   16090:	mov	r2, r0
   16094:	ldr	r3, [r7]
   16098:	ldmib	r7, {r0, r1}
   1609c:	stm	sp, {r0, r1}
   160a0:	b	16168 <__assert_fail@plt+0x5068>
   160a4:	movw	r1, #33663	; 0x837f
   160a8:	movt	r1, #1
   160ac:	mov	r0, #0
   160b0:	mov	r2, #5
   160b4:	bl	10f2c <dcgettext@plt>
   160b8:	mov	r2, r0
   160bc:	ldr	r3, [r7]
   160c0:	ldmib	r7, {r0, r1, r7}
   160c4:	stm	sp, {r0, r1, r7}
   160c8:	b	16168 <__assert_fail@plt+0x5068>
   160cc:	movw	r1, #33695	; 0x839f
   160d0:	movt	r1, #1
   160d4:	mov	r0, #0
   160d8:	mov	r2, #5
   160dc:	bl	10f2c <dcgettext@plt>
   160e0:	mov	r2, r0
   160e4:	ldr	r3, [r7]
   160e8:	ldmib	r7, {r0, r1, r6, r7}
   160ec:	stm	sp, {r0, r1, r6, r7}
   160f0:	b	16168 <__assert_fail@plt+0x5068>
   160f4:	movw	r1, #33731	; 0x83c3
   160f8:	movt	r1, #1
   160fc:	mov	r0, #0
   16100:	mov	r2, #5
   16104:	bl	10f2c <dcgettext@plt>
   16108:	mov	r2, r0
   1610c:	ldr	r3, [r7]
   16110:	ldmib	r7, {r0, r1, r6}
   16114:	ldr	r5, [r7, #16]
   16118:	ldr	r7, [r7, #20]
   1611c:	stm	sp, {r0, r1, r6}
   16120:	str	r5, [sp, #12]
   16124:	str	r7, [sp, #16]
   16128:	b	16168 <__assert_fail@plt+0x5068>
   1612c:	movw	r1, #33771	; 0x83eb
   16130:	movt	r1, #1
   16134:	mov	r0, #0
   16138:	mov	r2, #5
   1613c:	bl	10f2c <dcgettext@plt>
   16140:	mov	r2, r0
   16144:	ldr	r3, [r7]
   16148:	ldmib	r7, {r0, r1, r6}
   1614c:	ldr	r5, [r7, #16]
   16150:	ldr	r4, [r7, #20]
   16154:	ldr	r7, [r7, #24]
   16158:	stm	sp, {r0, r1, r6}
   1615c:	str	r5, [sp, #12]
   16160:	str	r4, [sp, #16]
   16164:	str	r7, [sp, #20]
   16168:	mov	r0, r8
   1616c:	mov	r1, #1
   16170:	b	1621c <__assert_fail@plt+0x511c>
   16174:	movw	r1, #33863	; 0x8447
   16178:	movt	r1, #1
   1617c:	mov	r0, #0
   16180:	mov	r2, #5
   16184:	bl	10f2c <dcgettext@plt>
   16188:	mov	ip, r0
   1618c:	ldr	r3, [r7]
   16190:	ldr	r0, [r7, #4]
   16194:	ldr	r1, [r7, #8]
   16198:	ldr	r6, [r7, #12]
   1619c:	ldr	r5, [r7, #16]
   161a0:	ldr	r4, [r7, #20]
   161a4:	ldr	r2, [r7, #24]
   161a8:	ldr	lr, [r7, #28]
   161ac:	ldr	r7, [r7, #32]
   161b0:	stm	sp, {r0, r1, r6}
   161b4:	str	r5, [sp, #12]
   161b8:	str	r4, [sp, #16]
   161bc:	str	r2, [sp, #20]
   161c0:	str	lr, [sp, #24]
   161c4:	str	r7, [sp, #28]
   161c8:	b	16210 <__assert_fail@plt+0x5110>
   161cc:	movw	r1, #33815	; 0x8417
   161d0:	movt	r1, #1
   161d4:	mov	r0, #0
   161d8:	mov	r2, #5
   161dc:	bl	10f2c <dcgettext@plt>
   161e0:	mov	ip, r0
   161e4:	ldr	r3, [r7]
   161e8:	ldmib	r7, {r0, r1, r6}
   161ec:	ldr	r5, [r7, #16]
   161f0:	ldr	r4, [r7, #20]
   161f4:	ldr	r2, [r7, #24]
   161f8:	ldr	r7, [r7, #28]
   161fc:	stm	sp, {r0, r1, r6}
   16200:	str	r5, [sp, #12]
   16204:	str	r4, [sp, #16]
   16208:	str	r2, [sp, #20]
   1620c:	str	r7, [sp, #24]
   16210:	mov	r0, r8
   16214:	mov	r1, #1
   16218:	mov	r2, ip
   1621c:	bl	11058 <__fprintf_chk@plt>
   16220:	sub	sp, fp, #24
   16224:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   16228:	push	{r4, sl, fp, lr}
   1622c:	add	fp, sp, #8
   16230:	sub	sp, sp, #8
   16234:	mov	lr, #0
   16238:	ldr	ip, [fp, #8]
   1623c:	ldr	r4, [ip, lr, lsl #2]
   16240:	add	lr, lr, #1
   16244:	cmp	r4, #0
   16248:	bne	1623c <__assert_fail@plt+0x513c>
   1624c:	sub	r4, lr, #1
   16250:	str	ip, [sp]
   16254:	str	r4, [sp, #4]
   16258:	bl	15ef4 <__assert_fail@plt+0x4df4>
   1625c:	sub	sp, fp, #8
   16260:	pop	{r4, sl, fp, pc}
   16264:	push	{r4, r5, fp, lr}
   16268:	add	fp, sp, #8
   1626c:	sub	sp, sp, #48	; 0x30
   16270:	mov	ip, #0
   16274:	ldr	r4, [fp, #8]
   16278:	add	lr, sp, #8
   1627c:	ldr	r5, [r4]
   16280:	str	r5, [lr, ip, lsl #2]
   16284:	cmp	r5, #0
   16288:	beq	1629c <__assert_fail@plt+0x519c>
   1628c:	add	ip, ip, #1
   16290:	add	r4, r4, #4
   16294:	cmp	ip, #10
   16298:	bcc	1627c <__assert_fail@plt+0x517c>
   1629c:	str	lr, [sp]
   162a0:	str	ip, [sp, #4]
   162a4:	bl	15ef4 <__assert_fail@plt+0x4df4>
   162a8:	sub	sp, fp, #8
   162ac:	pop	{r4, r5, fp, pc}
   162b0:	push	{fp, lr}
   162b4:	mov	fp, sp
   162b8:	sub	sp, sp, #8
   162bc:	add	ip, fp, #8
   162c0:	str	ip, [sp, #4]
   162c4:	str	ip, [sp]
   162c8:	bl	16264 <__assert_fail@plt+0x5164>
   162cc:	mov	sp, fp
   162d0:	pop	{fp, pc}
   162d4:	push	{fp, lr}
   162d8:	mov	fp, sp
   162dc:	movw	r0, #37204	; 0x9154
   162e0:	movt	r0, #2
   162e4:	ldr	r1, [r0]
   162e8:	movw	r0, #31406	; 0x7aae
   162ec:	movt	r0, #1
   162f0:	bl	10e90 <fputs_unlocked@plt>
   162f4:	movw	r1, #33975	; 0x84b7
   162f8:	movt	r1, #1
   162fc:	mov	r0, #0
   16300:	mov	r2, #5
   16304:	bl	10f2c <dcgettext@plt>
   16308:	mov	r1, r0
   1630c:	movw	r2, #33995	; 0x84cb
   16310:	movt	r2, #1
   16314:	mov	r0, #1
   16318:	bl	11040 <__printf_chk@plt>
   1631c:	movw	r1, #34017	; 0x84e1
   16320:	movt	r1, #1
   16324:	mov	r0, #0
   16328:	mov	r2, #5
   1632c:	bl	10f2c <dcgettext@plt>
   16330:	mov	r1, r0
   16334:	movw	r2, #30881	; 0x78a1
   16338:	movt	r2, #1
   1633c:	movw	r3, #31215	; 0x79ef
   16340:	movt	r3, #1
   16344:	mov	r0, #1
   16348:	bl	11040 <__printf_chk@plt>
   1634c:	movw	r1, #34037	; 0x84f5
   16350:	movt	r1, #1
   16354:	mov	r0, #0
   16358:	mov	r2, #5
   1635c:	bl	10f2c <dcgettext@plt>
   16360:	mov	r1, r0
   16364:	movw	r2, #34076	; 0x851c
   16368:	movt	r2, #1
   1636c:	mov	r0, #1
   16370:	pop	{fp, lr}
   16374:	b	11040 <__printf_chk@plt>
   16378:	b	1637c <__assert_fail@plt+0x527c>
   1637c:	push	{r4, r5, r6, sl, fp, lr}
   16380:	add	fp, sp, #16
   16384:	mov	r4, r2
   16388:	mov	r5, r1
   1638c:	mov	r6, r0
   16390:	bl	15eb8 <__assert_fail@plt+0x4db8>
   16394:	cmp	r0, #0
   16398:	popne	{r4, r5, r6, sl, fp, pc}
   1639c:	cmp	r6, #0
   163a0:	beq	163b4 <__assert_fail@plt+0x52b4>
   163a4:	cmp	r5, #0
   163a8:	cmpne	r4, #0
   163ac:	bne	163b4 <__assert_fail@plt+0x52b4>
   163b0:	pop	{r4, r5, r6, sl, fp, pc}
   163b4:	bl	16768 <__assert_fail@plt+0x5668>
   163b8:	push	{fp, lr}
   163bc:	mov	fp, sp
   163c0:	bl	16d98 <__assert_fail@plt+0x5c98>
   163c4:	bl	163cc <__assert_fail@plt+0x52cc>
   163c8:	pop	{fp, pc}
   163cc:	cmp	r0, #0
   163d0:	bxne	lr
   163d4:	push	{fp, lr}
   163d8:	mov	fp, sp
   163dc:	bl	16768 <__assert_fail@plt+0x5668>
   163e0:	push	{fp, lr}
   163e4:	mov	fp, sp
   163e8:	bl	14238 <__assert_fail@plt+0x3138>
   163ec:	bl	163cc <__assert_fail@plt+0x52cc>
   163f0:	pop	{fp, pc}
   163f4:	b	163b8 <__assert_fail@plt+0x52b8>
   163f8:	push	{r4, r5, fp, lr}
   163fc:	add	fp, sp, #8
   16400:	mov	r4, r1
   16404:	mov	r5, r0
   16408:	bl	16dc8 <__assert_fail@plt+0x5cc8>
   1640c:	cmp	r0, #0
   16410:	popne	{r4, r5, fp, pc}
   16414:	cmp	r5, #0
   16418:	beq	16428 <__assert_fail@plt+0x5328>
   1641c:	cmp	r4, #0
   16420:	bne	16428 <__assert_fail@plt+0x5328>
   16424:	pop	{r4, r5, fp, pc}
   16428:	bl	16768 <__assert_fail@plt+0x5668>
   1642c:	push	{fp, lr}
   16430:	mov	fp, sp
   16434:	bl	1423c <__assert_fail@plt+0x313c>
   16438:	bl	163cc <__assert_fail@plt+0x52cc>
   1643c:	pop	{fp, pc}
   16440:	push	{fp, lr}
   16444:	mov	fp, sp
   16448:	bl	1424c <__assert_fail@plt+0x314c>
   1644c:	bl	163cc <__assert_fail@plt+0x52cc>
   16450:	pop	{fp, pc}
   16454:	push	{fp, lr}
   16458:	mov	fp, sp
   1645c:	mov	r2, r1
   16460:	mov	r1, r0
   16464:	mov	r0, #0
   16468:	bl	1637c <__assert_fail@plt+0x527c>
   1646c:	pop	{fp, pc}
   16470:	mov	r2, r1
   16474:	mov	r1, r0
   16478:	mov	r0, #0
   1647c:	b	16440 <__assert_fail@plt+0x5340>
   16480:	mov	r2, #1
   16484:	b	16488 <__assert_fail@plt+0x5388>
   16488:	push	{r4, r5, fp, lr}
   1648c:	add	fp, sp, #8
   16490:	mov	r4, r1
   16494:	ldr	r5, [r1]
   16498:	cmp	r0, #0
   1649c:	beq	164b4 <__assert_fail@plt+0x53b4>
   164a0:	mov	r1, #1
   164a4:	add	r1, r1, r5, lsr #1
   164a8:	adds	r5, r5, r1
   164ac:	bcc	164cc <__assert_fail@plt+0x53cc>
   164b0:	bl	16768 <__assert_fail@plt+0x5668>
   164b4:	cmp	r5, #0
   164b8:	bne	164cc <__assert_fail@plt+0x53cc>
   164bc:	mov	r1, #64	; 0x40
   164c0:	udiv	r5, r1, r2
   164c4:	cmp	r2, #64	; 0x40
   164c8:	addhi	r5, r5, #1
   164cc:	mov	r1, r5
   164d0:	bl	1637c <__assert_fail@plt+0x527c>
   164d4:	str	r5, [r4]
   164d8:	pop	{r4, r5, fp, pc}
   164dc:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   164e0:	add	fp, sp, #24
   164e4:	mov	r8, r1
   164e8:	ldr	r6, [r1]
   164ec:	add	r1, r6, r6, asr #1
   164f0:	cmp	r1, r6
   164f4:	mvnvs	r1, #-2147483648	; 0x80000000
   164f8:	cmp	r1, r3
   164fc:	mov	r5, r1
   16500:	movgt	r5, r3
   16504:	cmn	r3, #1
   16508:	movle	r5, r1
   1650c:	ldr	r4, [fp, #8]
   16510:	cmn	r4, #1
   16514:	ble	1653c <__assert_fail@plt+0x543c>
   16518:	cmp	r4, #0
   1651c:	beq	16590 <__assert_fail@plt+0x5490>
   16520:	cmn	r5, #1
   16524:	ble	16564 <__assert_fail@plt+0x5464>
   16528:	mvn	r7, #-2147483648	; 0x80000000
   1652c:	udiv	r1, r7, r4
   16530:	cmp	r1, r5
   16534:	bge	16590 <__assert_fail@plt+0x5490>
   16538:	b	165a0 <__assert_fail@plt+0x54a0>
   1653c:	cmn	r5, #1
   16540:	ble	16580 <__assert_fail@plt+0x5480>
   16544:	cmn	r4, #1
   16548:	beq	16590 <__assert_fail@plt+0x5490>
   1654c:	mov	r1, #-2147483648	; 0x80000000
   16550:	sdiv	r1, r1, r4
   16554:	mvn	r7, #-2147483648	; 0x80000000
   16558:	cmp	r1, r5
   1655c:	bge	16590 <__assert_fail@plt+0x5490>
   16560:	b	165a0 <__assert_fail@plt+0x54a0>
   16564:	beq	16590 <__assert_fail@plt+0x5490>
   16568:	mov	r1, #-2147483648	; 0x80000000
   1656c:	sdiv	r1, r1, r5
   16570:	mvn	r7, #-2147483648	; 0x80000000
   16574:	cmp	r1, r4
   16578:	bge	16590 <__assert_fail@plt+0x5490>
   1657c:	b	165a0 <__assert_fail@plt+0x54a0>
   16580:	mvn	r7, #-2147483648	; 0x80000000
   16584:	sdiv	r1, r7, r4
   16588:	cmp	r5, r1
   1658c:	blt	165a0 <__assert_fail@plt+0x54a0>
   16590:	mul	r1, r5, r4
   16594:	mov	r7, #64	; 0x40
   16598:	cmp	r1, #63	; 0x3f
   1659c:	bgt	165a8 <__assert_fail@plt+0x54a8>
   165a0:	sdiv	r5, r7, r4
   165a4:	mul	r1, r5, r4
   165a8:	cmp	r0, #0
   165ac:	moveq	r7, #0
   165b0:	streq	r7, [r8]
   165b4:	sub	r7, r5, r6
   165b8:	cmp	r7, r2
   165bc:	bge	16668 <__assert_fail@plt+0x5568>
   165c0:	add	r5, r6, r2
   165c4:	mov	r1, #0
   165c8:	cmp	r5, r3
   165cc:	mov	r2, #0
   165d0:	movwgt	r2, #1
   165d4:	cmn	r3, #1
   165d8:	movwgt	r1, #1
   165dc:	cmp	r5, r6
   165e0:	bvs	16650 <__assert_fail@plt+0x5550>
   165e4:	ands	r1, r1, r2
   165e8:	bne	16650 <__assert_fail@plt+0x5550>
   165ec:	cmn	r4, #1
   165f0:	ble	16618 <__assert_fail@plt+0x5518>
   165f4:	cmp	r4, #0
   165f8:	beq	16664 <__assert_fail@plt+0x5564>
   165fc:	cmn	r5, #1
   16600:	ble	1663c <__assert_fail@plt+0x553c>
   16604:	mvn	r1, #-2147483648	; 0x80000000
   16608:	udiv	r1, r1, r4
   1660c:	cmp	r1, r5
   16610:	bge	16664 <__assert_fail@plt+0x5564>
   16614:	b	16650 <__assert_fail@plt+0x5550>
   16618:	cmn	r5, #1
   1661c:	ble	16654 <__assert_fail@plt+0x5554>
   16620:	cmn	r4, #1
   16624:	beq	16664 <__assert_fail@plt+0x5564>
   16628:	mov	r1, #-2147483648	; 0x80000000
   1662c:	sdiv	r1, r1, r4
   16630:	cmp	r1, r5
   16634:	bge	16664 <__assert_fail@plt+0x5564>
   16638:	b	16650 <__assert_fail@plt+0x5550>
   1663c:	beq	16664 <__assert_fail@plt+0x5564>
   16640:	mov	r1, #-2147483648	; 0x80000000
   16644:	sdiv	r1, r1, r5
   16648:	cmp	r1, r4
   1664c:	bge	16664 <__assert_fail@plt+0x5564>
   16650:	bl	16768 <__assert_fail@plt+0x5668>
   16654:	mvn	r1, #-2147483648	; 0x80000000
   16658:	sdiv	r1, r1, r4
   1665c:	cmp	r5, r1
   16660:	blt	16650 <__assert_fail@plt+0x5550>
   16664:	mul	r1, r5, r4
   16668:	bl	163f8 <__assert_fail@plt+0x52f8>
   1666c:	str	r5, [r8]
   16670:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   16674:	mov	r1, #1
   16678:	b	1667c <__assert_fail@plt+0x557c>
   1667c:	push	{fp, lr}
   16680:	mov	fp, sp
   16684:	bl	16d44 <__assert_fail@plt+0x5c44>
   16688:	bl	163cc <__assert_fail@plt+0x52cc>
   1668c:	pop	{fp, pc}
   16690:	mov	r1, #1
   16694:	b	16698 <__assert_fail@plt+0x5598>
   16698:	push	{fp, lr}
   1669c:	mov	fp, sp
   166a0:	bl	14248 <__assert_fail@plt+0x3148>
   166a4:	bl	163cc <__assert_fail@plt+0x52cc>
   166a8:	pop	{fp, pc}
   166ac:	push	{r4, r5, r6, sl, fp, lr}
   166b0:	add	fp, sp, #16
   166b4:	mov	r4, r1
   166b8:	mov	r5, r0
   166bc:	mov	r0, r1
   166c0:	bl	163b8 <__assert_fail@plt+0x52b8>
   166c4:	mov	r6, r0
   166c8:	mov	r1, r5
   166cc:	mov	r2, r4
   166d0:	bl	10ef0 <memcpy@plt>
   166d4:	mov	r0, r6
   166d8:	pop	{r4, r5, r6, sl, fp, pc}
   166dc:	push	{r4, r5, r6, sl, fp, lr}
   166e0:	add	fp, sp, #16
   166e4:	mov	r4, r1
   166e8:	mov	r5, r0
   166ec:	mov	r0, r1
   166f0:	bl	163e0 <__assert_fail@plt+0x52e0>
   166f4:	mov	r6, r0
   166f8:	mov	r1, r5
   166fc:	mov	r2, r4
   16700:	bl	10ef0 <memcpy@plt>
   16704:	mov	r0, r6
   16708:	pop	{r4, r5, r6, sl, fp, pc}
   1670c:	push	{r4, r5, r6, sl, fp, lr}
   16710:	add	fp, sp, #16
   16714:	mov	r4, r1
   16718:	mov	r5, r0
   1671c:	add	r0, r1, #1
   16720:	bl	163e0 <__assert_fail@plt+0x52e0>
   16724:	mov	r6, r0
   16728:	mov	r0, #0
   1672c:	strb	r0, [r6, r4]
   16730:	mov	r0, r6
   16734:	mov	r1, r5
   16738:	mov	r2, r4
   1673c:	bl	10ef0 <memcpy@plt>
   16740:	mov	r0, r6
   16744:	pop	{r4, r5, r6, sl, fp, pc}
   16748:	push	{r4, sl, fp, lr}
   1674c:	add	fp, sp, #8
   16750:	mov	r4, r0
   16754:	bl	11004 <strlen@plt>
   16758:	add	r1, r0, #1
   1675c:	mov	r0, r4
   16760:	pop	{r4, sl, fp, lr}
   16764:	b	166ac <__assert_fail@plt+0x55ac>
   16768:	push	{fp, lr}
   1676c:	mov	fp, sp
   16770:	movw	r0, #37108	; 0x90f4
   16774:	movt	r0, #2
   16778:	ldr	r4, [r0]
   1677c:	movw	r1, #34152	; 0x8568
   16780:	movt	r1, #1
   16784:	mov	r0, #0
   16788:	mov	r2, #5
   1678c:	bl	10f2c <dcgettext@plt>
   16790:	mov	r3, r0
   16794:	movw	r2, #30860	; 0x788c
   16798:	movt	r2, #1
   1679c:	mov	r0, r4
   167a0:	mov	r1, #0
   167a4:	bl	10fa4 <error@plt>
   167a8:	bl	110e8 <abort@plt>
   167ac:	bx	lr
   167b0:	b	16e24 <__assert_fail@plt+0x5d24>
   167b4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   167b8:	add	fp, sp, #28
   167bc:	sub	sp, sp, #20
   167c0:	cmp	r2, #37	; 0x25
   167c4:	bcs	16bd8 <__assert_fail@plt+0x5ad8>
   167c8:	mov	r9, r3
   167cc:	mov	r7, r2
   167d0:	mov	r6, r1
   167d4:	mov	r4, r0
   167d8:	ldr	sl, [fp, #8]
   167dc:	bl	1101c <__errno_location@plt>
   167e0:	mov	r5, r0
   167e4:	mov	r0, #0
   167e8:	str	r0, [r5]
   167ec:	add	r8, sp, #16
   167f0:	cmp	r6, #0
   167f4:	movne	r8, r6
   167f8:	mov	r0, r4
   167fc:	mov	r1, r8
   16800:	mov	r2, r7
   16804:	bl	11070 <strtoimax@plt>
   16808:	str	r1, [sp, #12]
   1680c:	str	r0, [sp, #8]
   16810:	ldr	r7, [r8]
   16814:	cmp	r7, r4
   16818:	beq	16844 <__assert_fail@plt+0x5744>
   1681c:	ldr	r0, [r5]
   16820:	cmp	r0, #0
   16824:	beq	1687c <__assert_fail@plt+0x577c>
   16828:	mov	r5, #4
   1682c:	cmp	r0, #34	; 0x22
   16830:	bne	16bcc <__assert_fail@plt+0x5acc>
   16834:	mov	r5, #1
   16838:	cmp	sl, #0
   1683c:	bne	16888 <__assert_fail@plt+0x5788>
   16840:	b	16bc0 <__assert_fail@plt+0x5ac0>
   16844:	mov	r5, #4
   16848:	cmp	sl, #0
   1684c:	ldrbne	r1, [r7]
   16850:	cmpne	r1, #0
   16854:	beq	16bcc <__assert_fail@plt+0x5acc>
   16858:	mov	r0, sl
   1685c:	bl	11010 <strchr@plt>
   16860:	cmp	r0, #0
   16864:	beq	16bcc <__assert_fail@plt+0x5acc>
   16868:	mov	r5, #0
   1686c:	str	r5, [sp, #12]
   16870:	mov	r0, #1
   16874:	str	r0, [sp, #8]
   16878:	b	16888 <__assert_fail@plt+0x5788>
   1687c:	mov	r5, r0
   16880:	cmp	sl, #0
   16884:	beq	16bc0 <__assert_fail@plt+0x5ac0>
   16888:	ldrb	r4, [r7]
   1688c:	cmp	r4, #0
   16890:	beq	16bc0 <__assert_fail@plt+0x5ac0>
   16894:	mov	r0, sl
   16898:	mov	r1, r4
   1689c:	bl	11010 <strchr@plt>
   168a0:	cmp	r0, #0
   168a4:	beq	16abc <__assert_fail@plt+0x59bc>
   168a8:	sub	r0, r4, #69	; 0x45
   168ac:	mov	r1, #1
   168b0:	str	r1, [sp, #4]
   168b4:	mov	r6, #1024	; 0x400
   168b8:	cmp	r0, #47	; 0x2f
   168bc:	bhi	169b8 <__assert_fail@plt+0x58b8>
   168c0:	add	r1, pc, #0
   168c4:	ldr	pc, [r1, r0, lsl #2]
   168c8:	andeq	r6, r1, r8, lsl #19
   168cc:			; <UNDEFINED> instruction: 0x000169b8
   168d0:	andeq	r6, r1, r8, lsl #19
   168d4:			; <UNDEFINED> instruction: 0x000169b8
   168d8:			; <UNDEFINED> instruction: 0x000169b8
   168dc:			; <UNDEFINED> instruction: 0x000169b8
   168e0:	andeq	r6, r1, r8, lsl #19
   168e4:			; <UNDEFINED> instruction: 0x000169b8
   168e8:	andeq	r6, r1, r8, lsl #19
   168ec:			; <UNDEFINED> instruction: 0x000169b8
   168f0:			; <UNDEFINED> instruction: 0x000169b8
   168f4:	andeq	r6, r1, r8, lsl #19
   168f8:			; <UNDEFINED> instruction: 0x000169b8
   168fc:			; <UNDEFINED> instruction: 0x000169b8
   16900:			; <UNDEFINED> instruction: 0x000169b8
   16904:	andeq	r6, r1, r8, lsl #19
   16908:			; <UNDEFINED> instruction: 0x000169b8
   1690c:			; <UNDEFINED> instruction: 0x000169b8
   16910:			; <UNDEFINED> instruction: 0x000169b8
   16914:			; <UNDEFINED> instruction: 0x000169b8
   16918:	andeq	r6, r1, r8, lsl #19
   1691c:	andeq	r6, r1, r8, lsl #19
   16920:			; <UNDEFINED> instruction: 0x000169b8
   16924:			; <UNDEFINED> instruction: 0x000169b8
   16928:			; <UNDEFINED> instruction: 0x000169b8
   1692c:			; <UNDEFINED> instruction: 0x000169b8
   16930:			; <UNDEFINED> instruction: 0x000169b8
   16934:			; <UNDEFINED> instruction: 0x000169b8
   16938:			; <UNDEFINED> instruction: 0x000169b8
   1693c:			; <UNDEFINED> instruction: 0x000169b8
   16940:			; <UNDEFINED> instruction: 0x000169b8
   16944:			; <UNDEFINED> instruction: 0x000169b8
   16948:			; <UNDEFINED> instruction: 0x000169b8
   1694c:			; <UNDEFINED> instruction: 0x000169b8
   16950:	andeq	r6, r1, r8, lsl #19
   16954:			; <UNDEFINED> instruction: 0x000169b8
   16958:			; <UNDEFINED> instruction: 0x000169b8
   1695c:			; <UNDEFINED> instruction: 0x000169b8
   16960:	andeq	r6, r1, r8, lsl #19
   16964:			; <UNDEFINED> instruction: 0x000169b8
   16968:	andeq	r6, r1, r8, lsl #19
   1696c:			; <UNDEFINED> instruction: 0x000169b8
   16970:			; <UNDEFINED> instruction: 0x000169b8
   16974:			; <UNDEFINED> instruction: 0x000169b8
   16978:			; <UNDEFINED> instruction: 0x000169b8
   1697c:			; <UNDEFINED> instruction: 0x000169b8
   16980:			; <UNDEFINED> instruction: 0x000169b8
   16984:	andeq	r6, r1, r8, lsl #19
   16988:	mov	r0, sl
   1698c:	mov	r1, #48	; 0x30
   16990:	bl	11010 <strchr@plt>
   16994:	cmp	r0, #0
   16998:	beq	169b8 <__assert_fail@plt+0x58b8>
   1699c:	ldrb	r0, [r7, #1]
   169a0:	cmp	r0, #66	; 0x42
   169a4:	cmpne	r0, #68	; 0x44
   169a8:	bne	16ad0 <__assert_fail@plt+0x59d0>
   169ac:	mov	r0, #2
   169b0:	str	r0, [sp, #4]
   169b4:	mov	r6, #1000	; 0x3e8
   169b8:	sub	r1, r4, #66	; 0x42
   169bc:	cmp	r1, #53	; 0x35
   169c0:	bhi	16abc <__assert_fail@plt+0x59bc>
   169c4:	mov	r0, #0
   169c8:	add	r2, pc, #0
   169cc:	ldr	pc, [r2, r1, lsl #2]
   169d0:	andeq	r6, r1, r0, asr #22
   169d4:			; <UNDEFINED> instruction: 0x00016abc
   169d8:			; <UNDEFINED> instruction: 0x00016abc
   169dc:	andeq	r6, r1, ip, asr #22
   169e0:			; <UNDEFINED> instruction: 0x00016abc
   169e4:	andeq	r6, r1, r8, lsr #21
   169e8:			; <UNDEFINED> instruction: 0x00016abc
   169ec:			; <UNDEFINED> instruction: 0x00016abc
   169f0:			; <UNDEFINED> instruction: 0x00016abc
   169f4:	strdeq	r6, [r1], -r0
   169f8:			; <UNDEFINED> instruction: 0x00016abc
   169fc:	andeq	r6, r1, r4, lsl #22
   16a00:			; <UNDEFINED> instruction: 0x00016abc
   16a04:			; <UNDEFINED> instruction: 0x00016abc
   16a08:	andeq	r6, r1, r0, ror #22
   16a0c:			; <UNDEFINED> instruction: 0x00016abc
   16a10:			; <UNDEFINED> instruction: 0x00016abc
   16a14:			; <UNDEFINED> instruction: 0x00016abc
   16a18:	andeq	r6, r1, r8, lsl fp
   16a1c:			; <UNDEFINED> instruction: 0x00016abc
   16a20:			; <UNDEFINED> instruction: 0x00016abc
   16a24:			; <UNDEFINED> instruction: 0x00016abc
   16a28:			; <UNDEFINED> instruction: 0x00016abc
   16a2c:	andeq	r6, r1, r4, ror fp
   16a30:	andeq	r6, r1, ip, lsr #22
   16a34:			; <UNDEFINED> instruction: 0x00016abc
   16a38:			; <UNDEFINED> instruction: 0x00016abc
   16a3c:			; <UNDEFINED> instruction: 0x00016abc
   16a40:			; <UNDEFINED> instruction: 0x00016abc
   16a44:			; <UNDEFINED> instruction: 0x00016abc
   16a48:			; <UNDEFINED> instruction: 0x00016abc
   16a4c:			; <UNDEFINED> instruction: 0x00016abc
   16a50:	andeq	r6, r1, r8, lsl #23
   16a54:	andeq	r6, r1, r0, lsr #23
   16a58:			; <UNDEFINED> instruction: 0x00016abc
   16a5c:			; <UNDEFINED> instruction: 0x00016abc
   16a60:			; <UNDEFINED> instruction: 0x00016abc
   16a64:	andeq	r6, r1, r8, lsr #21
   16a68:			; <UNDEFINED> instruction: 0x00016abc
   16a6c:			; <UNDEFINED> instruction: 0x00016abc
   16a70:			; <UNDEFINED> instruction: 0x00016abc
   16a74:	strdeq	r6, [r1], -r0
   16a78:			; <UNDEFINED> instruction: 0x00016abc
   16a7c:	andeq	r6, r1, r4, lsl #22
   16a80:			; <UNDEFINED> instruction: 0x00016abc
   16a84:			; <UNDEFINED> instruction: 0x00016abc
   16a88:			; <UNDEFINED> instruction: 0x00016abc
   16a8c:			; <UNDEFINED> instruction: 0x00016abc
   16a90:			; <UNDEFINED> instruction: 0x00016abc
   16a94:			; <UNDEFINED> instruction: 0x00016abc
   16a98:	andeq	r6, r1, r8, lsl fp
   16a9c:			; <UNDEFINED> instruction: 0x00016abc
   16aa0:			; <UNDEFINED> instruction: 0x00016abc
   16aa4:	muleq	r1, r4, fp
   16aa8:	add	r0, sp, #8
   16aac:	mov	r1, r6
   16ab0:	mov	r2, #3
   16ab4:	bl	16cfc <__assert_fail@plt+0x5bfc>
   16ab8:	b	16ba0 <__assert_fail@plt+0x5aa0>
   16abc:	ldr	r0, [sp, #8]
   16ac0:	ldr	r1, [sp, #12]
   16ac4:	strd	r0, [r9]
   16ac8:	orr	r5, r5, #2
   16acc:	b	16bcc <__assert_fail@plt+0x5acc>
   16ad0:	cmp	r0, #105	; 0x69
   16ad4:	bne	169b8 <__assert_fail@plt+0x58b8>
   16ad8:	ldrb	r0, [r7, #2]
   16adc:	mov	r1, #1
   16ae0:	cmp	r0, #66	; 0x42
   16ae4:	movweq	r1, #3
   16ae8:	str	r1, [sp, #4]
   16aec:	b	169b8 <__assert_fail@plt+0x58b8>
   16af0:	add	r0, sp, #8
   16af4:	mov	r1, r6
   16af8:	mov	r2, #1
   16afc:	bl	16cfc <__assert_fail@plt+0x5bfc>
   16b00:	b	16ba0 <__assert_fail@plt+0x5aa0>
   16b04:	add	r0, sp, #8
   16b08:	mov	r1, r6
   16b0c:	mov	r2, #2
   16b10:	bl	16cfc <__assert_fail@plt+0x5bfc>
   16b14:	b	16ba0 <__assert_fail@plt+0x5aa0>
   16b18:	add	r0, sp, #8
   16b1c:	mov	r1, r6
   16b20:	mov	r2, #4
   16b24:	bl	16cfc <__assert_fail@plt+0x5bfc>
   16b28:	b	16ba0 <__assert_fail@plt+0x5aa0>
   16b2c:	add	r0, sp, #8
   16b30:	mov	r1, r6
   16b34:	mov	r2, #7
   16b38:	bl	16cfc <__assert_fail@plt+0x5bfc>
   16b3c:	b	16ba0 <__assert_fail@plt+0x5aa0>
   16b40:	add	r0, sp, #8
   16b44:	mov	r1, #1024	; 0x400
   16b48:	b	16b9c <__assert_fail@plt+0x5a9c>
   16b4c:	add	r0, sp, #8
   16b50:	mov	r1, r6
   16b54:	mov	r2, #6
   16b58:	bl	16cfc <__assert_fail@plt+0x5bfc>
   16b5c:	b	16ba0 <__assert_fail@plt+0x5aa0>
   16b60:	add	r0, sp, #8
   16b64:	mov	r1, r6
   16b68:	mov	r2, #5
   16b6c:	bl	16cfc <__assert_fail@plt+0x5bfc>
   16b70:	b	16ba0 <__assert_fail@plt+0x5aa0>
   16b74:	add	r0, sp, #8
   16b78:	mov	r1, r6
   16b7c:	mov	r2, #8
   16b80:	bl	16cfc <__assert_fail@plt+0x5bfc>
   16b84:	b	16ba0 <__assert_fail@plt+0x5aa0>
   16b88:	add	r0, sp, #8
   16b8c:	mov	r1, #512	; 0x200
   16b90:	b	16b9c <__assert_fail@plt+0x5a9c>
   16b94:	add	r0, sp, #8
   16b98:	mov	r1, #2
   16b9c:	bl	16bf8 <__assert_fail@plt+0x5af8>
   16ba0:	ldr	r1, [r8]
   16ba4:	ldr	r3, [sp, #4]
   16ba8:	add	r2, r1, r3
   16bac:	str	r2, [r8]
   16bb0:	ldrb	r1, [r1, r3]
   16bb4:	orr	r5, r0, r5
   16bb8:	cmp	r1, #0
   16bbc:	orrne	r5, r5, #2
   16bc0:	ldr	r0, [sp, #8]
   16bc4:	ldr	r1, [sp, #12]
   16bc8:	strd	r0, [r9]
   16bcc:	mov	r0, r5
   16bd0:	sub	sp, fp, #28
   16bd4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16bd8:	movw	r0, #34169	; 0x8579
   16bdc:	movt	r0, #1
   16be0:	movw	r1, #34207	; 0x859f
   16be4:	movt	r1, #1
   16be8:	movw	r3, #34223	; 0x85af
   16bec:	movt	r3, #1
   16bf0:	mov	r2, #85	; 0x55
   16bf4:	bl	11100 <__assert_fail@plt>
   16bf8:	push	{r4, r5, r6, r7, fp, lr}
   16bfc:	add	fp, sp, #16
   16c00:	mov	r5, r1
   16c04:	mov	r4, r0
   16c08:	cmn	r1, #1
   16c0c:	ble	16c34 <__assert_fail@plt+0x5b34>
   16c10:	cmp	r5, #0
   16c14:	beq	16c98 <__assert_fail@plt+0x5b98>
   16c18:	ldrd	r6, [r4]
   16c1c:	cmn	r7, #1
   16c20:	ble	16c6c <__assert_fail@plt+0x5b6c>
   16c24:	asr	r3, r5, #31
   16c28:	mvn	r0, #0
   16c2c:	mvn	r1, #-2147483648	; 0x80000000
   16c30:	b	16c54 <__assert_fail@plt+0x5b54>
   16c34:	ldrd	r6, [r4]
   16c38:	cmn	r7, #1
   16c3c:	ble	16cb4 <__assert_fail@plt+0x5bb4>
   16c40:	cmn	r5, #1
   16c44:	beq	16c98 <__assert_fail@plt+0x5b98>
   16c48:	asr	r3, r5, #31
   16c4c:	mov	r0, #0
   16c50:	mov	r1, #-2147483648	; 0x80000000
   16c54:	mov	r2, r5
   16c58:	bl	17058 <__assert_fail@plt+0x5f58>
   16c5c:	subs	r0, r0, r6
   16c60:	sbcs	r0, r1, r7
   16c64:	bge	16c98 <__assert_fail@plt+0x5b98>
   16c68:	b	16cd4 <__assert_fail@plt+0x5bd4>
   16c6c:	and	r0, r6, r7
   16c70:	cmn	r0, #1
   16c74:	beq	16c98 <__assert_fail@plt+0x5b98>
   16c78:	mov	r0, #0
   16c7c:	mov	r1, #-2147483648	; 0x80000000
   16c80:	mov	r2, r6
   16c84:	mov	r3, r7
   16c88:	bl	17058 <__assert_fail@plt+0x5f58>
   16c8c:	subs	r0, r0, r5
   16c90:	sbcs	r0, r1, r5, asr #31
   16c94:	blt	16cd4 <__assert_fail@plt+0x5bd4>
   16c98:	ldrd	r0, [r4]
   16c9c:	umull	r2, r3, r0, r5
   16ca0:	asr	r7, r5, #31
   16ca4:	mla	r0, r0, r7, r3
   16ca8:	mla	r1, r1, r5, r0
   16cac:	mov	r0, #0
   16cb0:	b	16cf0 <__assert_fail@plt+0x5bf0>
   16cb4:	asr	r3, r5, #31
   16cb8:	mvn	r0, #0
   16cbc:	mvn	r1, #-2147483648	; 0x80000000
   16cc0:	mov	r2, r5
   16cc4:	bl	17058 <__assert_fail@plt+0x5f58>
   16cc8:	subs	r0, r6, r0
   16ccc:	sbcs	r0, r7, r1
   16cd0:	bge	16c98 <__assert_fail@plt+0x5b98>
   16cd4:	ldr	r0, [r4, #4]
   16cd8:	mvn	r1, #-2147483648	; 0x80000000
   16cdc:	cmp	r0, #0
   16ce0:	movlt	r1, #-2147483648	; 0x80000000
   16ce4:	mvn	r2, #0
   16ce8:	movwlt	r2, #0
   16cec:	mov	r0, #1
   16cf0:	str	r2, [r4]
   16cf4:	str	r1, [r4, #4]
   16cf8:	pop	{r4, r5, r6, r7, fp, pc}
   16cfc:	push	{r4, r5, r6, r7, fp, lr}
   16d00:	add	fp, sp, #16
   16d04:	cmp	r2, #0
   16d08:	moveq	r6, #0
   16d0c:	moveq	r0, r6
   16d10:	popeq	{r4, r5, r6, r7, fp, pc}
   16d14:	mov	r4, r2
   16d18:	mov	r5, r1
   16d1c:	mov	r7, r0
   16d20:	mov	r6, #0
   16d24:	mov	r0, r7
   16d28:	mov	r1, r5
   16d2c:	bl	16bf8 <__assert_fail@plt+0x5af8>
   16d30:	orr	r6, r0, r6
   16d34:	subs	r4, r4, #1
   16d38:	bne	16d24 <__assert_fail@plt+0x5c24>
   16d3c:	mov	r0, r6
   16d40:	pop	{r4, r5, r6, r7, fp, pc}
   16d44:	clz	r2, r1
   16d48:	lsr	r2, r2, #5
   16d4c:	clz	r3, r0
   16d50:	lsr	r3, r3, #5
   16d54:	orrs	r2, r3, r2
   16d58:	movwne	r1, #1
   16d5c:	movwne	r0, #1
   16d60:	cmp	r1, #0
   16d64:	beq	16d94 <__assert_fail@plt+0x5c94>
   16d68:	mvn	r2, #-2147483648	; 0x80000000
   16d6c:	udiv	r2, r2, r1
   16d70:	cmp	r2, r0
   16d74:	bcs	16d94 <__assert_fail@plt+0x5c94>
   16d78:	push	{fp, lr}
   16d7c:	mov	fp, sp
   16d80:	bl	1101c <__errno_location@plt>
   16d84:	mov	r1, #12
   16d88:	str	r1, [r0]
   16d8c:	mov	r0, #0
   16d90:	pop	{fp, pc}
   16d94:	b	10e84 <calloc@plt>
   16d98:	cmp	r0, #0
   16d9c:	movweq	r0, #1
   16da0:	cmn	r0, #1
   16da4:	ble	16dac <__assert_fail@plt+0x5cac>
   16da8:	b	10fb0 <malloc@plt>
   16dac:	push	{fp, lr}
   16db0:	mov	fp, sp
   16db4:	bl	1101c <__errno_location@plt>
   16db8:	mov	r1, #12
   16dbc:	str	r1, [r0]
   16dc0:	mov	r0, #0
   16dc4:	pop	{fp, pc}
   16dc8:	push	{fp, lr}
   16dcc:	mov	fp, sp
   16dd0:	cmp	r0, #0
   16dd4:	beq	16df0 <__assert_fail@plt+0x5cf0>
   16dd8:	cmp	r1, #0
   16ddc:	beq	16dfc <__assert_fail@plt+0x5cfc>
   16de0:	cmn	r1, #1
   16de4:	ble	16e08 <__assert_fail@plt+0x5d08>
   16de8:	pop	{fp, lr}
   16dec:	b	10f38 <realloc@plt>
   16df0:	mov	r0, r1
   16df4:	pop	{fp, lr}
   16df8:	b	16d98 <__assert_fail@plt+0x5c98>
   16dfc:	bl	14150 <__assert_fail@plt+0x3050>
   16e00:	mov	r0, #0
   16e04:	pop	{fp, pc}
   16e08:	bl	1101c <__errno_location@plt>
   16e0c:	mov	r1, #12
   16e10:	str	r1, [r0]
   16e14:	mov	r0, #0
   16e18:	pop	{fp, pc}
   16e1c:	mov	r0, #0
   16e20:	bx	lr
   16e24:	mov	r0, #0
   16e28:	bx	lr
   16e2c:	push	{r4, r5, r6, sl, fp, lr}
   16e30:	add	fp, sp, #16
   16e34:	mov	r4, r0
   16e38:	bl	10f80 <__fpending@plt>
   16e3c:	mov	r5, r0
   16e40:	mov	r0, r4
   16e44:	bl	10f8c <ferror_unlocked@plt>
   16e48:	mov	r6, r0
   16e4c:	mov	r0, r4
   16e50:	bl	14048 <__assert_fail@plt+0x2f48>
   16e54:	cmp	r6, #0
   16e58:	beq	16e78 <__assert_fail@plt+0x5d78>
   16e5c:	mvn	r4, #0
   16e60:	cmp	r0, #0
   16e64:	bne	16eac <__assert_fail@plt+0x5dac>
   16e68:	bl	1101c <__errno_location@plt>
   16e6c:	mov	r1, #0
   16e70:	str	r1, [r0]
   16e74:	b	16eac <__assert_fail@plt+0x5dac>
   16e78:	cmp	r0, #0
   16e7c:	mov	r4, r0
   16e80:	mvnne	r4, #0
   16e84:	cmp	r5, #0
   16e88:	bne	16eac <__assert_fail@plt+0x5dac>
   16e8c:	cmp	r0, #0
   16e90:	beq	16eac <__assert_fail@plt+0x5dac>
   16e94:	bl	1101c <__errno_location@plt>
   16e98:	ldr	r0, [r0]
   16e9c:	subs	r4, r0, #9
   16ea0:	mvnne	r4, #0
   16ea4:	mov	r0, r4
   16ea8:	pop	{r4, r5, r6, sl, fp, pc}
   16eac:	mov	r0, r4
   16eb0:	pop	{r4, r5, r6, sl, fp, pc}
   16eb4:	push	{fp, lr}
   16eb8:	mov	fp, sp
   16ebc:	mov	r0, #14
   16ec0:	bl	110ac <nl_langinfo@plt>
   16ec4:	movw	r1, #31407	; 0x7aaf
   16ec8:	movt	r1, #1
   16ecc:	cmp	r0, #0
   16ed0:	movne	r1, r0
   16ed4:	ldrb	r2, [r1]
   16ed8:	movw	r0, #34301	; 0x85fd
   16edc:	movt	r0, #1
   16ee0:	cmp	r2, #0
   16ee4:	movne	r0, r1
   16ee8:	pop	{fp, pc}
   16eec:	push	{r4, r5, r6, r7, fp, lr}
   16ef0:	add	fp, sp, #16
   16ef4:	sub	sp, sp, #8
   16ef8:	mov	r7, r2
   16efc:	mov	r4, r1
   16f00:	add	r5, sp, #4
   16f04:	cmp	r0, #0
   16f08:	movne	r5, r0
   16f0c:	mov	r0, r5
   16f10:	bl	10f98 <mbrtowc@plt>
   16f14:	mov	r6, r0
   16f18:	cmp	r7, #0
   16f1c:	beq	16f40 <__assert_fail@plt+0x5e40>
   16f20:	cmn	r6, #2
   16f24:	bcc	16f40 <__assert_fail@plt+0x5e40>
   16f28:	mov	r0, #0
   16f2c:	bl	16f4c <__assert_fail@plt+0x5e4c>
   16f30:	cmp	r0, #0
   16f34:	ldrbeq	r0, [r4]
   16f38:	streq	r0, [r5]
   16f3c:	moveq	r6, #1
   16f40:	mov	r0, r6
   16f44:	sub	sp, fp, #16
   16f48:	pop	{r4, r5, r6, r7, fp, pc}
   16f4c:	push	{r4, sl, fp, lr}
   16f50:	add	fp, sp, #8
   16f54:	sub	sp, sp, #264	; 0x108
   16f58:	add	r1, sp, #7
   16f5c:	movw	r2, #257	; 0x101
   16f60:	bl	16fb0 <__assert_fail@plt+0x5eb0>
   16f64:	mov	r4, #0
   16f68:	cmp	r0, #0
   16f6c:	bne	16fa4 <__assert_fail@plt+0x5ea4>
   16f70:	add	r0, sp, #7
   16f74:	movw	r1, #34307	; 0x8603
   16f78:	movt	r1, #1
   16f7c:	bl	10ea8 <strcmp@plt>
   16f80:	cmp	r0, #0
   16f84:	beq	16fa4 <__assert_fail@plt+0x5ea4>
   16f88:	add	r0, sp, #7
   16f8c:	movw	r1, #34309	; 0x8605
   16f90:	movt	r1, #1
   16f94:	bl	10ea8 <strcmp@plt>
   16f98:	mov	r4, r0
   16f9c:	cmp	r0, #0
   16fa0:	movwne	r4, #1
   16fa4:	mov	r0, r4
   16fa8:	sub	sp, fp, #8
   16fac:	pop	{r4, sl, fp, pc}
   16fb0:	b	16fb4 <__assert_fail@plt+0x5eb4>
   16fb4:	push	{r4, r5, r6, r7, fp, lr}
   16fb8:	add	fp, sp, #16
   16fbc:	mov	r6, r2
   16fc0:	mov	r4, r1
   16fc4:	bl	17050 <__assert_fail@plt+0x5f50>
   16fc8:	cmp	r0, #0
   16fcc:	beq	16ffc <__assert_fail@plt+0x5efc>
   16fd0:	mov	r7, r0
   16fd4:	bl	11004 <strlen@plt>
   16fd8:	cmp	r0, r6
   16fdc:	bcs	1701c <__assert_fail@plt+0x5f1c>
   16fe0:	add	r2, r0, #1
   16fe4:	mov	r0, r4
   16fe8:	mov	r1, r7
   16fec:	bl	10ef0 <memcpy@plt>
   16ff0:	mov	r5, #0
   16ff4:	mov	r0, r5
   16ff8:	pop	{r4, r5, r6, r7, fp, pc}
   16ffc:	mov	r5, #22
   17000:	cmp	r6, #0
   17004:	movne	r0, #0
   17008:	strbne	r0, [r4]
   1700c:	movne	r0, r5
   17010:	popne	{r4, r5, r6, r7, fp, pc}
   17014:	mov	r0, r5
   17018:	pop	{r4, r5, r6, r7, fp, pc}
   1701c:	mov	r5, #34	; 0x22
   17020:	cmp	r6, #0
   17024:	beq	17044 <__assert_fail@plt+0x5f44>
   17028:	sub	r6, r6, #1
   1702c:	mov	r0, r4
   17030:	mov	r1, r7
   17034:	mov	r2, r6
   17038:	bl	10ef0 <memcpy@plt>
   1703c:	mov	r0, #0
   17040:	strb	r0, [r4, r6]
   17044:	mov	r0, r5
   17048:	pop	{r4, r5, r6, r7, fp, pc}
   1704c:	b	17050 <__assert_fail@plt+0x5f50>
   17050:	mov	r1, #0
   17054:	b	11094 <setlocale@plt>
   17058:	cmp	r3, #0
   1705c:	cmpeq	r2, #0
   17060:	bne	17084 <__assert_fail@plt+0x5f84>
   17064:	cmp	r1, #0
   17068:	movlt	r1, #-2147483648	; 0x80000000
   1706c:	movlt	r0, #0
   17070:	blt	17080 <__assert_fail@plt+0x5f80>
   17074:	cmpeq	r0, #0
   17078:	mvnne	r1, #-2147483648	; 0x80000000
   1707c:	mvnne	r0, #0
   17080:	b	1712c <__assert_fail@plt+0x602c>
   17084:	sub	sp, sp, #8
   17088:	push	{sp, lr}
   1708c:	cmp	r1, #0
   17090:	blt	170b0 <__assert_fail@plt+0x5fb0>
   17094:	cmp	r3, #0
   17098:	blt	170e4 <__assert_fail@plt+0x5fe4>
   1709c:	bl	1713c <__assert_fail@plt+0x603c>
   170a0:	ldr	lr, [sp, #4]
   170a4:	add	sp, sp, #8
   170a8:	pop	{r2, r3}
   170ac:	bx	lr
   170b0:	rsbs	r0, r0, #0
   170b4:	sbc	r1, r1, r1, lsl #1
   170b8:	cmp	r3, #0
   170bc:	blt	17108 <__assert_fail@plt+0x6008>
   170c0:	bl	1713c <__assert_fail@plt+0x603c>
   170c4:	ldr	lr, [sp, #4]
   170c8:	add	sp, sp, #8
   170cc:	pop	{r2, r3}
   170d0:	rsbs	r0, r0, #0
   170d4:	sbc	r1, r1, r1, lsl #1
   170d8:	rsbs	r2, r2, #0
   170dc:	sbc	r3, r3, r3, lsl #1
   170e0:	bx	lr
   170e4:	rsbs	r2, r2, #0
   170e8:	sbc	r3, r3, r3, lsl #1
   170ec:	bl	1713c <__assert_fail@plt+0x603c>
   170f0:	ldr	lr, [sp, #4]
   170f4:	add	sp, sp, #8
   170f8:	pop	{r2, r3}
   170fc:	rsbs	r0, r0, #0
   17100:	sbc	r1, r1, r1, lsl #1
   17104:	bx	lr
   17108:	rsbs	r2, r2, #0
   1710c:	sbc	r3, r3, r3, lsl #1
   17110:	bl	1713c <__assert_fail@plt+0x603c>
   17114:	ldr	lr, [sp, #4]
   17118:	add	sp, sp, #8
   1711c:	pop	{r2, r3}
   17120:	rsbs	r2, r2, #0
   17124:	sbc	r3, r3, r3, lsl #1
   17128:	bx	lr
   1712c:	push	{r1, lr}
   17130:	mov	r0, #8
   17134:	bl	10e9c <raise@plt>
   17138:	pop	{r1, pc}
   1713c:	cmp	r1, r3
   17140:	cmpeq	r0, r2
   17144:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17148:	mov	r4, r0
   1714c:	movcc	r0, #0
   17150:	mov	r5, r1
   17154:	ldr	lr, [sp, #36]	; 0x24
   17158:	movcc	r1, r0
   1715c:	bcc	17258 <__assert_fail@plt+0x6158>
   17160:	cmp	r3, #0
   17164:	clzeq	ip, r2
   17168:	clzne	ip, r3
   1716c:	addeq	ip, ip, #32
   17170:	cmp	r5, #0
   17174:	clzeq	r1, r4
   17178:	addeq	r1, r1, #32
   1717c:	clzne	r1, r5
   17180:	sub	ip, ip, r1
   17184:	sub	sl, ip, #32
   17188:	lsl	r9, r3, ip
   1718c:	rsb	fp, ip, #32
   17190:	orr	r9, r9, r2, lsl sl
   17194:	orr	r9, r9, r2, lsr fp
   17198:	lsl	r8, r2, ip
   1719c:	cmp	r5, r9
   171a0:	cmpeq	r4, r8
   171a4:	movcc	r0, #0
   171a8:	movcc	r1, r0
   171ac:	bcc	171c8 <__assert_fail@plt+0x60c8>
   171b0:	mov	r0, #1
   171b4:	subs	r4, r4, r8
   171b8:	lsl	r1, r0, sl
   171bc:	orr	r1, r1, r0, lsr fp
   171c0:	lsl	r0, r0, ip
   171c4:	sbc	r5, r5, r9
   171c8:	cmp	ip, #0
   171cc:	beq	17258 <__assert_fail@plt+0x6158>
   171d0:	lsr	r6, r8, #1
   171d4:	orr	r6, r6, r9, lsl #31
   171d8:	lsr	r7, r9, #1
   171dc:	mov	r2, ip
   171e0:	b	17204 <__assert_fail@plt+0x6104>
   171e4:	subs	r3, r4, r6
   171e8:	sbc	r8, r5, r7
   171ec:	adds	r3, r3, r3
   171f0:	adc	r8, r8, r8
   171f4:	adds	r4, r3, #1
   171f8:	adc	r5, r8, #0
   171fc:	subs	r2, r2, #1
   17200:	beq	17220 <__assert_fail@plt+0x6120>
   17204:	cmp	r5, r7
   17208:	cmpeq	r4, r6
   1720c:	bcs	171e4 <__assert_fail@plt+0x60e4>
   17210:	adds	r4, r4, r4
   17214:	adc	r5, r5, r5
   17218:	subs	r2, r2, #1
   1721c:	bne	17204 <__assert_fail@plt+0x6104>
   17220:	lsr	r3, r4, ip
   17224:	orr	r3, r3, r5, lsl fp
   17228:	lsr	r2, r5, ip
   1722c:	orr	r3, r3, r5, lsr sl
   17230:	adds	r0, r0, r4
   17234:	mov	r4, r3
   17238:	lsl	r3, r2, ip
   1723c:	orr	r3, r3, r4, lsl sl
   17240:	lsl	ip, r4, ip
   17244:	orr	r3, r3, r4, lsr fp
   17248:	adc	r1, r1, r5
   1724c:	subs	r0, r0, ip
   17250:	mov	r5, r2
   17254:	sbc	r1, r1, r3
   17258:	cmp	lr, #0
   1725c:	strdne	r4, [lr]
   17260:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17264:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   17268:	mov	r7, r0
   1726c:	ldr	r6, [pc, #72]	; 172bc <__assert_fail@plt+0x61bc>
   17270:	ldr	r5, [pc, #72]	; 172c0 <__assert_fail@plt+0x61c0>
   17274:	add	r6, pc, r6
   17278:	add	r5, pc, r5
   1727c:	sub	r6, r6, r5
   17280:	mov	r8, r1
   17284:	mov	r9, r2
   17288:	bl	10e64 <calloc@plt-0x20>
   1728c:	asrs	r6, r6, #2
   17290:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   17294:	mov	r4, #0
   17298:	add	r4, r4, #1
   1729c:	ldr	r3, [r5], #4
   172a0:	mov	r2, r9
   172a4:	mov	r1, r8
   172a8:	mov	r0, r7
   172ac:	blx	r3
   172b0:	cmp	r6, r4
   172b4:	bne	17298 <__assert_fail@plt+0x6198>
   172b8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   172bc:	muleq	r1, r0, ip
   172c0:	andeq	r1, r1, r8, lsl #25
   172c4:	bx	lr
   172c8:	ldr	r3, [pc, #12]	; 172dc <__assert_fail@plt+0x61dc>
   172cc:	mov	r1, #0
   172d0:	add	r3, pc, r3
   172d4:	ldr	r2, [r3]
   172d8:	b	11028 <__cxa_atexit@plt>
   172dc:	andeq	r1, r1, r4, lsl lr

Disassembly of section .fini:

000172e0 <.fini>:
   172e0:	push	{r3, lr}
   172e4:	pop	{r3, pc}
