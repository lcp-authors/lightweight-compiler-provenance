
../repos/findutils/xargs/xargs:     file format elf32-littlearm


Disassembly of section .init:

0001119c <.init>:
   1119c:	push	{r3, lr}
   111a0:	bl	1275c <__assert_fail@plt+0x11bc>
   111a4:	pop	{r3, pc}

Disassembly of section .plt:

000111a8 <fdopen@plt-0x14>:
   111a8:	push	{lr}		; (str lr, [sp, #-4]!)
   111ac:	ldr	lr, [pc, #4]	; 111b8 <fdopen@plt-0x4>
   111b0:	add	lr, pc, lr
   111b4:	ldr	pc, [lr, #8]!
   111b8:	andeq	fp, r1, r8, asr #28

000111bc <fdopen@plt>:
   111bc:	add	ip, pc, #0, 12
   111c0:	add	ip, ip, #110592	; 0x1b000
   111c4:	ldr	pc, [ip, #3656]!	; 0xe48

000111c8 <calloc@plt>:
   111c8:	add	ip, pc, #0, 12
   111cc:	add	ip, ip, #110592	; 0x1b000
   111d0:	ldr	pc, [ip, #3648]!	; 0xe40

000111d4 <raise@plt>:
   111d4:	add	ip, pc, #0, 12
   111d8:	add	ip, ip, #110592	; 0x1b000
   111dc:	ldr	pc, [ip, #3640]!	; 0xe38

000111e0 <strcmp@plt>:
   111e0:	add	ip, pc, #0, 12
   111e4:	add	ip, ip, #110592	; 0x1b000
   111e8:	ldr	pc, [ip, #3632]!	; 0xe30

000111ec <strtol@plt>:
   111ec:	add	ip, pc, #0, 12
   111f0:	add	ip, ip, #110592	; 0x1b000
   111f4:	ldr	pc, [ip, #3624]!	; 0xe28

000111f8 <printf@plt>:
   111f8:	add	ip, pc, #0, 12
   111fc:	add	ip, ip, #110592	; 0x1b000
   11200:	ldr	pc, [ip, #3616]!	; 0xe20

00011204 <read@plt>:
   11204:	add	ip, pc, #0, 12
   11208:	add	ip, ip, #110592	; 0x1b000
   1120c:	ldr	pc, [ip, #3608]!	; 0xe18

00011210 <fflush@plt>:
   11210:	add	ip, pc, #0, 12
   11214:	add	ip, ip, #110592	; 0x1b000
   11218:	ldr	pc, [ip, #3600]!	; 0xe10

0001121c <wcwidth@plt>:
   1121c:	add	ip, pc, #0, 12
   11220:	add	ip, ip, #110592	; 0x1b000
   11224:	ldr	pc, [ip, #3592]!	; 0xe08

00011228 <free@plt>:
   11228:	add	ip, pc, #0, 12
   1122c:	add	ip, ip, #110592	; 0x1b000
   11230:	ldr	pc, [ip, #3584]!	; 0xe00

00011234 <ferror@plt>:
   11234:	add	ip, pc, #0, 12
   11238:	add	ip, ip, #110592	; 0x1b000
   1123c:	ldr	pc, [ip, #3576]!	; 0xdf8

00011240 <_exit@plt>:
   11240:	add	ip, pc, #0, 12
   11244:	add	ip, ip, #110592	; 0x1b000
   11248:	ldr	pc, [ip, #3568]!	; 0xdf0

0001124c <memcpy@plt>:
   1124c:	add	ip, pc, #0, 12
   11250:	add	ip, ip, #110592	; 0x1b000
   11254:	ldr	pc, [ip, #3560]!	; 0xde8

00011258 <execvp@plt>:
   11258:	add	ip, pc, #0, 12
   1125c:	add	ip, ip, #110592	; 0x1b000
   11260:	ldr	pc, [ip, #3552]!	; 0xde0

00011264 <mbsinit@plt>:
   11264:	add	ip, pc, #0, 12
   11268:	add	ip, ip, #110592	; 0x1b000
   1126c:	ldr	pc, [ip, #3544]!	; 0xdd8

00011270 <signal@plt>:
   11270:	add	ip, pc, #0, 12
   11274:	add	ip, ip, #110592	; 0x1b000
   11278:	ldr	pc, [ip, #3536]!	; 0xdd0

0001127c <memcmp@plt>:
   1127c:	add	ip, pc, #0, 12
   11280:	add	ip, ip, #110592	; 0x1b000
   11284:	ldr	pc, [ip, #3528]!	; 0xdc8

00011288 <dcgettext@plt>:
   11288:	add	ip, pc, #0, 12
   1128c:	add	ip, ip, #110592	; 0x1b000
   11290:	ldr	pc, [ip, #3520]!	; 0xdc0

00011294 <sysconf@plt>:
   11294:	add	ip, pc, #0, 12
   11298:	add	ip, ip, #110592	; 0x1b000
   1129c:	ldr	pc, [ip, #3512]!	; 0xdb8

000112a0 <dup2@plt>:
   112a0:	add	ip, pc, #0, 12
   112a4:	add	ip, ip, #110592	; 0x1b000
   112a8:	ldr	pc, [ip, #3504]!	; 0xdb0

000112ac <getrlimit64@plt>:
   112ac:	add	ip, pc, #0, 12
   112b0:	add	ip, ip, #110592	; 0x1b000
   112b4:	ldr	pc, [ip, #3496]!	; 0xda8

000112b8 <realloc@plt>:
   112b8:	add	ip, pc, #0, 12
   112bc:	add	ip, ip, #110592	; 0x1b000
   112c0:	ldr	pc, [ip, #3488]!	; 0xda0

000112c4 <textdomain@plt>:
   112c4:	add	ip, pc, #0, 12
   112c8:	add	ip, ip, #110592	; 0x1b000
   112cc:	ldr	pc, [ip, #3480]!	; 0xd98

000112d0 <iswcntrl@plt>:
   112d0:	add	ip, pc, #0, 12
   112d4:	add	ip, ip, #110592	; 0x1b000
   112d8:	ldr	pc, [ip, #3472]!	; 0xd90

000112dc <iswprint@plt>:
   112dc:	add	ip, pc, #0, 12
   112e0:	add	ip, ip, #110592	; 0x1b000
   112e4:	ldr	pc, [ip, #3464]!	; 0xd88

000112e8 <poll@plt>:
   112e8:	add	ip, pc, #0, 12
   112ec:	add	ip, ip, #110592	; 0x1b000
   112f0:	ldr	pc, [ip, #3456]!	; 0xd80

000112f4 <sigaction@plt>:
   112f4:	add	ip, pc, #0, 12
   112f8:	add	ip, ip, #110592	; 0x1b000
   112fc:	ldr	pc, [ip, #3448]!	; 0xd78

00011300 <fwrite@plt>:
   11300:	add	ip, pc, #0, 12
   11304:	add	ip, ip, #110592	; 0x1b000
   11308:	ldr	pc, [ip, #3440]!	; 0xd70

0001130c <lseek64@plt>:
   1130c:	add	ip, pc, #0, 12
   11310:	add	ip, ip, #110592	; 0x1b000
   11314:	ldr	pc, [ip, #3432]!	; 0xd68

00011318 <waitpid@plt>:
   11318:	add	ip, pc, #0, 12
   1131c:	add	ip, ip, #110592	; 0x1b000
   11320:	ldr	pc, [ip, #3424]!	; 0xd60

00011324 <__ctype_get_mb_cur_max@plt>:
   11324:	add	ip, pc, #0, 12
   11328:	add	ip, ip, #110592	; 0x1b000
   1132c:	ldr	pc, [ip, #3416]!	; 0xd58

00011330 <strcpy@plt>:
   11330:	add	ip, pc, #0, 12
   11334:	add	ip, ip, #110592	; 0x1b000
   11338:	ldr	pc, [ip, #3408]!	; 0xd50

0001133c <__fpending@plt>:
   1133c:	add	ip, pc, #0, 12
   11340:	add	ip, ip, #110592	; 0x1b000
   11344:	ldr	pc, [ip, #3400]!	; 0xd48

00011348 <mbrtowc@plt>:
   11348:	add	ip, pc, #0, 12
   1134c:	add	ip, ip, #110592	; 0x1b000
   11350:	ldr	pc, [ip, #3392]!	; 0xd40

00011354 <error@plt>:
   11354:	add	ip, pc, #0, 12
   11358:	add	ip, ip, #110592	; 0x1b000
   1135c:	ldr	pc, [ip, #3384]!	; 0xd38

00011360 <opendir@plt>:
   11360:	add	ip, pc, #0, 12
   11364:	add	ip, ip, #110592	; 0x1b000
   11368:	ldr	pc, [ip, #3376]!	; 0xd30

0001136c <open64@plt>:
   1136c:	add	ip, pc, #0, 12
   11370:	add	ip, ip, #110592	; 0x1b000
   11374:	ldr	pc, [ip, #3368]!	; 0xd28

00011378 <getenv@plt>:
   11378:	add	ip, pc, #0, 12
   1137c:	add	ip, ip, #110592	; 0x1b000
   11380:	ldr	pc, [ip, #3360]!	; 0xd20

00011384 <malloc@plt>:
   11384:	add	ip, pc, #0, 12
   11388:	add	ip, ip, #110592	; 0x1b000
   1138c:	ldr	pc, [ip, #3352]!	; 0xd18

00011390 <__libc_start_main@plt>:
   11390:	add	ip, pc, #0, 12
   11394:	add	ip, ip, #110592	; 0x1b000
   11398:	ldr	pc, [ip, #3344]!	; 0xd10

0001139c <__freading@plt>:
   1139c:	add	ip, pc, #0, 12
   113a0:	add	ip, ip, #110592	; 0x1b000
   113a4:	ldr	pc, [ip, #3336]!	; 0xd08

000113a8 <__gmon_start__@plt>:
   113a8:	add	ip, pc, #0, 12
   113ac:	add	ip, ip, #110592	; 0x1b000
   113b0:	ldr	pc, [ip, #3328]!	; 0xd00

000113b4 <getopt_long@plt>:
   113b4:	add	ip, pc, #0, 12
   113b8:	add	ip, ip, #110592	; 0x1b000
   113bc:	ldr	pc, [ip, #3320]!	; 0xcf8

000113c0 <__ctype_b_loc@plt>:
   113c0:	add	ip, pc, #0, 12
   113c4:	add	ip, ip, #110592	; 0x1b000
   113c8:	ldr	pc, [ip, #3312]!	; 0xcf0

000113cc <getpid@plt>:
   113cc:	add	ip, pc, #0, 12
   113d0:	add	ip, ip, #110592	; 0x1b000
   113d4:	ldr	pc, [ip, #3304]!	; 0xce8

000113d8 <exit@plt>:
   113d8:	add	ip, pc, #0, 12
   113dc:	add	ip, ip, #110592	; 0x1b000
   113e0:	ldr	pc, [ip, #3296]!	; 0xce0

000113e4 <strtoul@plt>:
   113e4:	add	ip, pc, #0, 12
   113e8:	add	ip, ip, #110592	; 0x1b000
   113ec:	ldr	pc, [ip, #3288]!	; 0xcd8

000113f0 <strlen@plt>:
   113f0:	add	ip, pc, #0, 12
   113f4:	add	ip, ip, #110592	; 0x1b000
   113f8:	ldr	pc, [ip, #3280]!	; 0xcd0

000113fc <strchr@plt>:
   113fc:	add	ip, pc, #0, 12
   11400:	add	ip, ip, #110592	; 0x1b000
   11404:	ldr	pc, [ip, #3272]!	; 0xcc8

00011408 <setenv@plt>:
   11408:	add	ip, pc, #0, 12
   1140c:	add	ip, ip, #110592	; 0x1b000
   11410:	ldr	pc, [ip, #3264]!	; 0xcc0

00011414 <fprintf@plt>:
   11414:	add	ip, pc, #0, 12
   11418:	add	ip, ip, #110592	; 0x1b000
   1141c:	ldr	pc, [ip, #3256]!	; 0xcb8

00011420 <__errno_location@plt>:
   11420:	add	ip, pc, #0, 12
   11424:	add	ip, ip, #110592	; 0x1b000
   11428:	ldr	pc, [ip, #3248]!	; 0xcb0

0001142c <snprintf@plt>:
   1142c:	add	ip, pc, #0, 12
   11430:	add	ip, ip, #110592	; 0x1b000
   11434:	ldr	pc, [ip, #3240]!	; 0xca8

00011438 <__cxa_atexit@plt>:
   11438:	add	ip, pc, #0, 12
   1143c:	add	ip, ip, #110592	; 0x1b000
   11440:	ldr	pc, [ip, #3232]!	; 0xca0

00011444 <memset@plt>:
   11444:	add	ip, pc, #0, 12
   11448:	add	ip, ip, #110592	; 0x1b000
   1144c:	ldr	pc, [ip, #3224]!	; 0xc98

00011450 <strncpy@plt>:
   11450:	add	ip, pc, #0, 12
   11454:	add	ip, ip, #110592	; 0x1b000
   11458:	ldr	pc, [ip, #3216]!	; 0xc90

0001145c <write@plt>:
   1145c:	add	ip, pc, #0, 12
   11460:	add	ip, ip, #110592	; 0x1b000
   11464:	ldr	pc, [ip, #3208]!	; 0xc88

00011468 <fileno@plt>:
   11468:	add	ip, pc, #0, 12
   1146c:	add	ip, ip, #110592	; 0x1b000
   11470:	ldr	pc, [ip, #3200]!	; 0xc80

00011474 <memchr@plt>:
   11474:	add	ip, pc, #0, 12
   11478:	add	ip, ip, #110592	; 0x1b000
   1147c:	ldr	pc, [ip, #3192]!	; 0xc78

00011480 <fclose@plt>:
   11480:	add	ip, pc, #0, 12
   11484:	add	ip, ip, #110592	; 0x1b000
   11488:	ldr	pc, [ip, #3184]!	; 0xc70

0001148c <strnlen@plt>:
   1148c:	add	ip, pc, #0, 12
   11490:	add	ip, ip, #110592	; 0x1b000
   11494:	ldr	pc, [ip, #3176]!	; 0xc68

00011498 <pipe@plt>:
   11498:	add	ip, pc, #0, 12
   1149c:	add	ip, ip, #110592	; 0x1b000
   114a0:	ldr	pc, [ip, #3168]!	; 0xc60

000114a4 <fseeko64@plt>:
   114a4:	add	ip, pc, #0, 12
   114a8:	add	ip, ip, #110592	; 0x1b000
   114ac:	ldr	pc, [ip, #3160]!	; 0xc58

000114b0 <fcntl64@plt>:
   114b0:	add	ip, pc, #0, 12
   114b4:	add	ip, ip, #110592	; 0x1b000
   114b8:	ldr	pc, [ip, #3152]!	; 0xc50

000114bc <setlocale@plt>:
   114bc:	add	ip, pc, #0, 12
   114c0:	add	ip, ip, #110592	; 0x1b000
   114c4:	ldr	pc, [ip, #3144]!	; 0xc48

000114c8 <sigemptyset@plt>:
   114c8:	add	ip, pc, #0, 12
   114cc:	add	ip, ip, #110592	; 0x1b000
   114d0:	ldr	pc, [ip, #3136]!	; 0xc40

000114d4 <fork@plt>:
   114d4:	add	ip, pc, #0, 12
   114d8:	add	ip, ip, #110592	; 0x1b000
   114dc:	ldr	pc, [ip, #3128]!	; 0xc38

000114e0 <strrchr@plt>:
   114e0:	add	ip, pc, #0, 12
   114e4:	add	ip, ip, #110592	; 0x1b000
   114e8:	ldr	pc, [ip, #3120]!	; 0xc30

000114ec <nl_langinfo@plt>:
   114ec:	add	ip, pc, #0, 12
   114f0:	add	ip, ip, #110592	; 0x1b000
   114f4:	ldr	pc, [ip, #3112]!	; 0xc28

000114f8 <fputc@plt>:
   114f8:	add	ip, pc, #0, 12
   114fc:	add	ip, ip, #110592	; 0x1b000
   11500:	ldr	pc, [ip, #3104]!	; 0xc20

00011504 <readdir64@plt>:
   11504:	add	ip, pc, #0, 12
   11508:	add	ip, ip, #110592	; 0x1b000
   1150c:	ldr	pc, [ip, #3096]!	; 0xc18

00011510 <fdopendir@plt>:
   11510:	add	ip, pc, #0, 12
   11514:	add	ip, ip, #110592	; 0x1b000
   11518:	ldr	pc, [ip, #3088]!	; 0xc10

0001151c <putc@plt>:
   1151c:	add	ip, pc, #0, 12
   11520:	add	ip, ip, #110592	; 0x1b000
   11524:	ldr	pc, [ip, #3080]!	; 0xc08

00011528 <dirfd@plt>:
   11528:	add	ip, pc, #0, 12
   1152c:	add	ip, ip, #110592	; 0x1b000
   11530:	ldr	pc, [ip, #3072]!	; 0xc00

00011534 <bindtextdomain@plt>:
   11534:	add	ip, pc, #0, 12
   11538:	add	ip, ip, #110592	; 0x1b000
   1153c:	ldr	pc, [ip, #3064]!	; 0xbf8

00011540 <isatty@plt>:
   11540:	add	ip, pc, #0, 12
   11544:	add	ip, ip, #110592	; 0x1b000
   11548:	ldr	pc, [ip, #3056]!	; 0xbf0

0001154c <unsetenv@plt>:
   1154c:	add	ip, pc, #0, 12
   11550:	add	ip, ip, #110592	; 0x1b000
   11554:	ldr	pc, [ip, #3048]!	; 0xbe8

00011558 <fputs@plt>:
   11558:	add	ip, pc, #0, 12
   1155c:	add	ip, ip, #110592	; 0x1b000
   11560:	ldr	pc, [ip, #3040]!	; 0xbe0

00011564 <strncmp@plt>:
   11564:	add	ip, pc, #0, 12
   11568:	add	ip, ip, #110592	; 0x1b000
   1156c:	ldr	pc, [ip, #3032]!	; 0xbd8

00011570 <abort@plt>:
   11570:	add	ip, pc, #0, 12
   11574:	add	ip, ip, #110592	; 0x1b000
   11578:	ldr	pc, [ip, #3024]!	; 0xbd0

0001157c <getc@plt>:
   1157c:	add	ip, pc, #0, 12
   11580:	add	ip, ip, #110592	; 0x1b000
   11584:	ldr	pc, [ip, #3016]!	; 0xbc8

00011588 <close@plt>:
   11588:	add	ip, pc, #0, 12
   1158c:	add	ip, ip, #110592	; 0x1b000
   11590:	ldr	pc, [ip, #3008]!	; 0xbc0

00011594 <closedir@plt>:
   11594:	add	ip, pc, #0, 12
   11598:	add	ip, ip, #110592	; 0x1b000
   1159c:	ldr	pc, [ip, #3000]!	; 0xbb8

000115a0 <__assert_fail@plt>:
   115a0:	add	ip, pc, #0, 12
   115a4:	add	ip, ip, #110592	; 0x1b000
   115a8:	ldr	pc, [ip, #2992]!	; 0xbb0

Disassembly of section .text:

000115ac <.text>:
   115ac:	ldr	r3, [pc, #4076]	; 125a0 <__assert_fail@plt+0x1000>
   115b0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   115b4:	sub	sp, sp, #228	; 0xe4
   115b8:	ldr	r2, [r1]
   115bc:	str	r1, [sp, #32]
   115c0:	mov	r8, r0
   115c4:	ldm	r3, {r0, r1}
   115c8:	cmp	r2, #0
   115cc:	ldr	fp, [pc, #4048]	; 125a4 <__assert_fail@plt+0x1004>
   115d0:	str	r0, [sp, #76]	; 0x4c
   115d4:	movne	r0, r2
   115d8:	ldreq	r0, [pc, #4040]	; 125a8 <__assert_fail@plt+0x1008>
   115dc:	strb	r1, [sp, #80]	; 0x50
   115e0:	bl	16bc4 <__assert_fail@plt+0x5624>
   115e4:	bl	14d78 <__assert_fail@plt+0x37d8>
   115e8:	bl	113cc <getpid@plt>
   115ec:	mov	r3, #0
   115f0:	ldr	r1, [pc, #4020]	; 125ac <__assert_fail@plt+0x100c>
   115f4:	str	r3, [fp, #172]	; 0xac
   115f8:	str	r0, [fp, #164]	; 0xa4
   115fc:	mov	r0, #6
   11600:	bl	114bc <setlocale@plt>
   11604:	ldr	r1, [pc, #4004]	; 125b0 <__assert_fail@plt+0x1010>
   11608:	ldr	r0, [pc, #4004]	; 125b4 <__assert_fail@plt+0x1014>
   1160c:	bl	11534 <bindtextdomain@plt>
   11610:	ldr	r0, [pc, #3996]	; 125b4 <__assert_fail@plt+0x1014>
   11614:	bl	112c4 <textdomain@plt>
   11618:	ldr	r0, [pc, #3992]	; 125b8 <__assert_fail@plt+0x1018>
   1161c:	bl	1a9bc <__assert_fail@plt+0x941c>
   11620:	cmp	r0, #0
   11624:	bne	1253c <__assert_fail@plt+0xf9c>
   11628:	ldr	r0, [pc, #3980]	; 125bc <__assert_fail@plt+0x101c>
   1162c:	bl	1a9bc <__assert_fail@plt+0x941c>
   11630:	subs	r9, r0, #0
   11634:	bne	1253c <__assert_fail@plt+0xf9c>
   11638:	mov	r1, #2048	; 0x800
   1163c:	add	r0, fp, #88	; 0x58
   11640:	bl	14860 <__assert_fail@plt+0x32c0>
   11644:	sub	r3, r0, #1
   11648:	cmp	r3, #1
   1164c:	str	r0, [sp, #48]	; 0x30
   11650:	bls	11d60 <__assert_fail@plt+0x7c0>
   11654:	mov	r0, r9
   11658:	bl	11294 <sysconf@plt>
   1165c:	cmp	r0, #0
   11660:	ble	11680 <__assert_fail@plt+0xe0>
   11664:	cmp	r0, #2048	; 0x800
   11668:	ble	126f8 <__assert_fail@plt+0x1158>
   1166c:	ldr	r3, [fp, #100]	; 0x64
   11670:	sub	r0, r0, #2048	; 0x800
   11674:	cmp	r3, r0
   11678:	movcc	r0, r3
   1167c:	str	r0, [fp, #100]	; 0x64
   11680:	ldr	r3, [fp, #100]	; 0x64
   11684:	cmp	r3, #2048	; 0x800
   11688:	bcc	1270c <__assert_fail@plt+0x116c>
   1168c:	ldr	r3, [pc, #3884]	; 125c0 <__assert_fail@plt+0x1020>
   11690:	ldr	r0, [pc, #3884]	; 125c4 <__assert_fail@plt+0x1024>
   11694:	str	r3, [fp, #120]	; 0x78
   11698:	ldr	r3, [pc, #3880]	; 125c8 <__assert_fail@plt+0x1028>
   1169c:	str	r3, [sp, #52]	; 0x34
   116a0:	bl	1492c <__assert_fail@plt+0x338c>
   116a4:	ldr	r3, [pc, #3872]	; 125cc <__assert_fail@plt+0x102c>
   116a8:	ldr	r5, [pc, #3872]	; 125d0 <__assert_fail@plt+0x1030>
   116ac:	str	r3, [sp, #36]	; 0x24
   116b0:	ldr	r4, [pc, #3868]	; 125d4 <__assert_fail@plt+0x1034>
   116b4:	ldr	r3, [pc, #3868]	; 125d8 <__assert_fail@plt+0x1038>
   116b8:	ldr	sl, [pc, #3868]	; 125dc <__assert_fail@plt+0x103c>
   116bc:	add	r6, sp, #68	; 0x44
   116c0:	str	r3, [sp, #28]
   116c4:	mov	r3, #1
   116c8:	str	r9, [sp, #40]	; 0x28
   116cc:	str	r3, [sp, #44]	; 0x2c
   116d0:	str	r6, [sp]
   116d4:	mov	r3, r5
   116d8:	mov	r2, r4
   116dc:	ldr	r1, [sp, #32]
   116e0:	mov	r0, r8
   116e4:	bl	113b4 <getopt_long@plt>
   116e8:	cmn	r0, #1
   116ec:	beq	11e20 <__assert_fail@plt+0x880>
   116f0:	sub	r0, r0, #48	; 0x30
   116f4:	cmp	r0, #208	; 0xd0
   116f8:	ldrls	pc, [pc, r0, lsl #2]
   116fc:	b	11d58 <__assert_fail@plt+0x7b8>
   11700:	andeq	r1, r1, r0, lsl #25
   11704:	andeq	r1, r1, r8, asr sp
   11708:	andeq	r1, r1, r8, asr sp
   1170c:	andeq	r1, r1, r8, asr sp
   11710:	andeq	r1, r1, r8, asr sp
   11714:	andeq	r1, r1, r8, asr sp
   11718:	andeq	r1, r1, r8, asr sp
   1171c:	andeq	r1, r1, r8, asr sp
   11720:	andeq	r1, r1, r8, asr sp
   11724:	andeq	r1, r1, r8, asr sp
   11728:	andeq	r1, r1, r8, asr sp
   1172c:	andeq	r1, r1, r8, asr sp
   11730:	andeq	r1, r1, r8, asr sp
   11734:	andeq	r1, r1, r8, asr sp
   11738:	andeq	r1, r1, r8, asr sp
   1173c:	andeq	r1, r1, r8, asr sp
   11740:	andeq	r1, r1, r8, asr sp
   11744:	andeq	r1, r1, r8, asr sp
   11748:	andeq	r1, r1, r8, asr sp
   1174c:	andeq	r1, r1, r8, asr sp
   11750:	andeq	r1, r1, r8, asr sp
   11754:	andeq	r1, r1, r0, ror #24
   11758:	andeq	r1, r1, r8, asr sp
   1175c:	andeq	r1, r1, r8, asr sp
   11760:	andeq	r1, r1, r8, asr sp
   11764:	andeq	r1, r1, ip, lsl ip
   11768:	andeq	r1, r1, r8, asr sp
   1176c:	andeq	r1, r1, r8, asr sp
   11770:	ldrdeq	r1, [r1], -r0
   11774:	andeq	r1, r1, r8, asr sp
   11778:	andeq	r1, r1, r8, asr sp
   1177c:	andeq	r1, r1, r8, asr sp
   11780:	andeq	r1, r1, r8, lsr #23
   11784:	andeq	r1, r1, r8, asr sp
   11788:	andeq	r1, r1, r8, asr sp
   1178c:	muleq	r1, ip, fp
   11790:	andeq	r1, r1, r8, asr sp
   11794:	andeq	r1, r1, r8, asr sp
   11798:	andeq	r1, r1, r8, asr sp
   1179c:	andeq	r1, r1, r8, asr sp
   117a0:	andeq	r1, r1, r8, asr sp
   117a4:	andeq	r1, r1, r8, asr sp
   117a8:	andeq	r1, r1, r8, asr sp
   117ac:	andeq	r1, r1, r8, asr sp
   117b0:	andeq	r1, r1, r8, asr sp
   117b4:	andeq	r1, r1, r8, asr sp
   117b8:	andeq	r1, r1, r8, asr sp
   117bc:	andeq	r1, r1, r8, asr sp
   117c0:	andeq	r1, r1, r8, asr sp
   117c4:	muleq	r1, r0, fp
   117c8:	andeq	r1, r1, r8, asr sp
   117cc:	andeq	r1, r1, r8, asr sp
   117d0:	andeq	r1, r1, r4, lsr #22
   117d4:	andeq	r1, r1, r0, ror #24
   117d8:	andeq	r1, r1, r8, asr sp
   117dc:	andeq	r1, r1, r8, asr sp
   117e0:	andeq	r1, r1, ip, lsl fp
   117e4:	andeq	r1, r1, ip, lsl ip
   117e8:	andeq	r1, r1, r8, asr sp
   117ec:	andeq	r1, r1, r8, asr sp
   117f0:	andeq	r1, r1, r8, asr #21
   117f4:	andeq	r1, r1, r8, asr sp
   117f8:	andeq	r1, r1, r8, ror #20
   117fc:	andeq	r1, r1, ip, asr sl
   11800:	andeq	r1, r1, ip, asr #20
   11804:	andeq	r1, r1, r8, asr sp
   11808:	andeq	r1, r1, r4, asr #20
   1180c:	andeq	r1, r1, ip, lsl sp
   11810:	andeq	r1, r1, r0, lsl sp
   11814:	andeq	r1, r1, r8, asr sp
   11818:	strdeq	r1, [r1], -ip
   1181c:	andeq	r1, r1, r8, asr sp
   11820:	strdeq	r1, [r1], -r0
   11824:	andeq	r1, r1, r8, asr sp
   11828:	andeq	r1, r1, r8, asr sp
   1182c:	andeq	r1, r1, r8, asr sp
   11830:	andeq	r1, r1, r8, asr sp
   11834:	andeq	r1, r1, r8, asr sp
   11838:	andeq	r1, r1, r8, asr sp
   1183c:	andeq	r1, r1, r8, asr sp
   11840:	andeq	r1, r1, r8, asr sp
   11844:	andeq	r1, r1, r8, asr sp
   11848:	andeq	r1, r1, r8, asr sp
   1184c:	andeq	r1, r1, r8, asr sp
   11850:	andeq	r1, r1, r8, asr sp
   11854:	andeq	r1, r1, r8, asr sp
   11858:	andeq	r1, r1, r8, asr sp
   1185c:	andeq	r1, r1, r8, asr sp
   11860:	andeq	r1, r1, r8, asr sp
   11864:	andeq	r1, r1, r8, asr sp
   11868:	andeq	r1, r1, r8, asr sp
   1186c:	andeq	r1, r1, r8, asr sp
   11870:	andeq	r1, r1, r8, asr sp
   11874:	andeq	r1, r1, r8, asr sp
   11878:	andeq	r1, r1, r8, asr sp
   1187c:	andeq	r1, r1, r8, asr sp
   11880:	andeq	r1, r1, r8, asr sp
   11884:	andeq	r1, r1, r8, asr sp
   11888:	andeq	r1, r1, r8, asr sp
   1188c:	andeq	r1, r1, r8, asr sp
   11890:	andeq	r1, r1, r8, asr sp
   11894:	andeq	r1, r1, r8, asr sp
   11898:	andeq	r1, r1, r8, asr sp
   1189c:	andeq	r1, r1, r8, asr sp
   118a0:	andeq	r1, r1, r8, asr sp
   118a4:	andeq	r1, r1, r8, asr sp
   118a8:	andeq	r1, r1, r8, asr sp
   118ac:	andeq	r1, r1, r8, asr sp
   118b0:	andeq	r1, r1, r8, asr sp
   118b4:	andeq	r1, r1, r8, asr sp
   118b8:	andeq	r1, r1, r8, asr sp
   118bc:	andeq	r1, r1, r8, asr sp
   118c0:	andeq	r1, r1, r8, asr sp
   118c4:	andeq	r1, r1, r8, asr sp
   118c8:	andeq	r1, r1, r8, asr sp
   118cc:	andeq	r1, r1, r8, asr sp
   118d0:	andeq	r1, r1, r8, asr sp
   118d4:	andeq	r1, r1, r8, asr sp
   118d8:	andeq	r1, r1, r8, asr sp
   118dc:	andeq	r1, r1, r8, asr sp
   118e0:	andeq	r1, r1, r8, asr sp
   118e4:	andeq	r1, r1, r8, asr sp
   118e8:	andeq	r1, r1, r8, asr sp
   118ec:	andeq	r1, r1, r8, asr sp
   118f0:	andeq	r1, r1, r8, asr sp
   118f4:	andeq	r1, r1, r8, asr sp
   118f8:	andeq	r1, r1, r8, asr sp
   118fc:	andeq	r1, r1, r8, asr sp
   11900:	andeq	r1, r1, r8, asr sp
   11904:	andeq	r1, r1, r8, asr sp
   11908:	andeq	r1, r1, r8, asr sp
   1190c:	andeq	r1, r1, r8, asr sp
   11910:	andeq	r1, r1, r8, asr sp
   11914:	andeq	r1, r1, r8, asr sp
   11918:	andeq	r1, r1, r8, asr sp
   1191c:	andeq	r1, r1, r8, asr sp
   11920:	andeq	r1, r1, r8, asr sp
   11924:	andeq	r1, r1, r8, asr sp
   11928:	andeq	r1, r1, r8, asr sp
   1192c:	andeq	r1, r1, r8, asr sp
   11930:	andeq	r1, r1, r8, asr sp
   11934:	andeq	r1, r1, r8, asr sp
   11938:	andeq	r1, r1, r8, asr sp
   1193c:	andeq	r1, r1, r8, asr sp
   11940:	andeq	r1, r1, r8, asr sp
   11944:	andeq	r1, r1, r8, asr sp
   11948:	andeq	r1, r1, r8, asr sp
   1194c:	andeq	r1, r1, r8, asr sp
   11950:	andeq	r1, r1, r8, asr sp
   11954:	andeq	r1, r1, r8, asr sp
   11958:	andeq	r1, r1, r8, asr sp
   1195c:	andeq	r1, r1, r8, asr sp
   11960:	andeq	r1, r1, r8, asr sp
   11964:	andeq	r1, r1, r8, asr sp
   11968:	andeq	r1, r1, r8, asr sp
   1196c:	andeq	r1, r1, r8, asr sp
   11970:	andeq	r1, r1, r8, asr sp
   11974:	andeq	r1, r1, r8, asr sp
   11978:	andeq	r1, r1, r8, asr sp
   1197c:	andeq	r1, r1, r8, asr sp
   11980:	andeq	r1, r1, r8, asr sp
   11984:	andeq	r1, r1, r8, asr sp
   11988:	andeq	r1, r1, r8, asr sp
   1198c:	andeq	r1, r1, r8, asr sp
   11990:	andeq	r1, r1, r8, asr sp
   11994:	andeq	r1, r1, r8, asr sp
   11998:	andeq	r1, r1, r8, asr sp
   1199c:	andeq	r1, r1, r8, asr sp
   119a0:	andeq	r1, r1, r8, asr sp
   119a4:	andeq	r1, r1, r8, asr sp
   119a8:	andeq	r1, r1, r8, asr sp
   119ac:	andeq	r1, r1, r8, asr sp
   119b0:	andeq	r1, r1, r8, asr sp
   119b4:	andeq	r1, r1, r8, asr sp
   119b8:	andeq	r1, r1, r8, asr sp
   119bc:	andeq	r1, r1, r8, asr sp
   119c0:	andeq	r1, r1, r8, asr sp
   119c4:	andeq	r1, r1, r8, asr sp
   119c8:	andeq	r1, r1, r8, asr sp
   119cc:	andeq	r1, r1, r8, asr sp
   119d0:	andeq	r1, r1, r8, asr sp
   119d4:	andeq	r1, r1, r8, asr sp
   119d8:	andeq	r1, r1, r8, asr sp
   119dc:	andeq	r1, r1, r8, asr sp
   119e0:	andeq	r1, r1, r8, asr sp
   119e4:	andeq	r1, r1, r8, asr sp
   119e8:	andeq	r1, r1, r8, asr sp
   119ec:	andeq	r1, r1, r8, asr sp
   119f0:	andeq	r1, r1, r8, asr sp
   119f4:	andeq	r1, r1, r8, asr sp
   119f8:	andeq	r1, r1, r8, asr sp
   119fc:	andeq	r1, r1, r8, asr sp
   11a00:	andeq	r1, r1, r8, asr sp
   11a04:	andeq	r1, r1, r8, asr sp
   11a08:	andeq	r1, r1, r8, asr sp
   11a0c:	andeq	r1, r1, r8, asr sp
   11a10:	andeq	r1, r1, r8, asr sp
   11a14:	andeq	r1, r1, r8, asr sp
   11a18:	andeq	r1, r1, r8, asr sp
   11a1c:	andeq	r1, r1, r8, asr sp
   11a20:	andeq	r1, r1, r8, asr sp
   11a24:	andeq	r1, r1, r8, asr sp
   11a28:	andeq	r1, r1, r8, asr sp
   11a2c:	andeq	r1, r1, r8, asr sp
   11a30:	andeq	r1, r1, r8, asr sp
   11a34:	andeq	r1, r1, r8, asr sp
   11a38:	andeq	r1, r1, r8, asr sp
   11a3c:	andeq	r1, r1, r8, asr sp
   11a40:	muleq	r1, r4, ip
   11a44:	str	r9, [sp, #44]	; 0x2c
   11a48:	b	116d0 <__assert_fail@plt+0x130>
   11a4c:	mov	r3, #1
   11a50:	strb	r3, [fp, #72]	; 0x48
   11a54:	strb	r3, [fp, #73]	; 0x49
   11a58:	b	116d0 <__assert_fail@plt+0x130>
   11a5c:	mov	r3, #1
   11a60:	strb	r3, [fp, #84]	; 0x54
   11a64:	b	116d0 <__assert_fail@plt+0x130>
   11a68:	mov	r2, #1
   11a6c:	str	r2, [sp]
   11a70:	mvn	r3, #0
   11a74:	mov	r1, #110	; 0x6e
   11a78:	ldr	r0, [sl]
   11a7c:	bl	12f7c <__assert_fail@plt+0x19dc>
   11a80:	ldr	r3, [fp, #124]	; 0x7c
   11a84:	cmp	r3, #0
   11a88:	str	r0, [fp, #128]	; 0x80
   11a8c:	bne	120e0 <__assert_fail@plt+0xb40>
   11a90:	ldr	r3, [fp, #112]	; 0x70
   11a94:	cmp	r3, #0
   11a98:	beq	116d0 <__assert_fail@plt+0x130>
   11a9c:	ldr	r3, [fp, #128]	; 0x80
   11aa0:	cmp	r3, #1
   11aa4:	moveq	r3, #0
   11aa8:	streq	r3, [fp, #128]	; 0x80
   11aac:	beq	116d0 <__assert_fail@plt+0x130>
   11ab0:	ldr	r1, [pc, #2856]	; 125e0 <__assert_fail@plt+0x1040>
   11ab4:	ldr	r0, [pc, #2856]	; 125e4 <__assert_fail@plt+0x1044>
   11ab8:	bl	1289c <__assert_fail@plt+0x12fc>
   11abc:	mov	r3, #0
   11ac0:	str	r3, [fp, #112]	; 0x70
   11ac4:	b	116d0 <__assert_fail@plt+0x130>
   11ac8:	ldr	r0, [sl]
   11acc:	cmp	r0, #0
   11ad0:	beq	120d4 <__assert_fail@plt+0xb34>
   11ad4:	mov	r2, #1
   11ad8:	str	r2, [sp]
   11adc:	mvn	r3, #0
   11ae0:	mov	r1, #108	; 0x6c
   11ae4:	bl	12f7c <__assert_fail@plt+0x19dc>
   11ae8:	str	r0, [fp, #124]	; 0x7c
   11aec:	ldr	r3, [fp, #128]	; 0x80
   11af0:	cmp	r3, #0
   11af4:	bne	120f8 <__assert_fail@plt+0xb58>
   11af8:	ldr	r3, [fp, #112]	; 0x70
   11afc:	cmp	r3, #0
   11b00:	beq	116d0 <__assert_fail@plt+0x130>
   11b04:	ldr	r1, [pc, #2772]	; 125e0 <__assert_fail@plt+0x1040>
   11b08:	ldr	r0, [pc, #2776]	; 125e8 <__assert_fail@plt+0x1048>
   11b0c:	bl	1289c <__assert_fail@plt+0x12fc>
   11b10:	mov	r3, #0
   11b14:	str	r3, [fp, #112]	; 0x70
   11b18:	b	116d0 <__assert_fail@plt+0x130>
   11b1c:	mov	r0, #0
   11b20:	bl	12c68 <__assert_fail@plt+0x16c8>
   11b24:	ldr	r3, [sl]
   11b28:	mov	r0, r3
   11b2c:	str	r3, [sp, #36]	; 0x24
   11b30:	bl	113f0 <strlen@plt>
   11b34:	ldr	r3, [sp, #36]	; 0x24
   11b38:	cmp	r0, #1
   11b3c:	ldrbeq	r7, [r3]
   11b40:	beq	11b80 <__assert_fail@plt+0x5e0>
   11b44:	ldrb	r2, [r3]
   11b48:	cmp	r2, #92	; 0x5c
   11b4c:	bne	12578 <__assert_fail@plt+0xfd8>
   11b50:	ldrb	r7, [r3, #1]
   11b54:	cmp	r7, #102	; 0x66
   11b58:	beq	124bc <__assert_fail@plt+0xf1c>
   11b5c:	bls	11d74 <__assert_fail@plt+0x7d4>
   11b60:	cmp	r7, #114	; 0x72
   11b64:	beq	124b4 <__assert_fail@plt+0xf14>
   11b68:	bls	124a4 <__assert_fail@plt+0xf04>
   11b6c:	cmp	r7, #116	; 0x74
   11b70:	beq	12180 <__assert_fail@plt+0xbe0>
   11b74:	cmp	r7, #118	; 0x76
   11b78:	moveq	r7, #11
   11b7c:	bne	11d8c <__assert_fail@plt+0x7ec>
   11b80:	ldr	r3, [pc, #2660]	; 125ec <__assert_fail@plt+0x104c>
   11b84:	strb	r7, [fp, #144]	; 0x90
   11b88:	str	r3, [sp, #36]	; 0x24
   11b8c:	b	116d0 <__assert_fail@plt+0x130>
   11b90:	ldr	r3, [sl]
   11b94:	str	r3, [sp, #28]
   11b98:	b	116d0 <__assert_fail@plt+0x130>
   11b9c:	mov	r3, #1
   11ba0:	str	r3, [sp, #40]	; 0x28
   11ba4:	b	116d0 <__assert_fail@plt+0x130>
   11ba8:	mov	r3, #1
   11bac:	str	r3, [sp]
   11bb0:	mov	r2, #0
   11bb4:	mvn	r3, #-2147483648	; 0x80000000
   11bb8:	mov	r1, #80	; 0x50
   11bbc:	ldr	r0, [sl]
   11bc0:	bl	12f7c <__assert_fail@plt+0x19dc>
   11bc4:	ldr	r3, [pc, #2596]	; 125f0 <__assert_fail@plt+0x1050>
   11bc8:	str	r0, [r3]
   11bcc:	b	116d0 <__assert_fail@plt+0x130>
   11bd0:	mov	r2, #1
   11bd4:	str	r2, [sp]
   11bd8:	mvn	r3, #0
   11bdc:	mov	r1, #76	; 0x4c
   11be0:	ldr	r0, [sl]
   11be4:	bl	12f7c <__assert_fail@plt+0x19dc>
   11be8:	ldr	r3, [fp, #128]	; 0x80
   11bec:	cmp	r3, #0
   11bf0:	str	r0, [fp, #124]	; 0x7c
   11bf4:	bne	12128 <__assert_fail@plt+0xb88>
   11bf8:	ldr	r3, [fp, #112]	; 0x70
   11bfc:	cmp	r3, #0
   11c00:	beq	116d0 <__assert_fail@plt+0x130>
   11c04:	ldr	r1, [pc, #2516]	; 125e0 <__assert_fail@plt+0x1040>
   11c08:	ldr	r0, [pc, #2532]	; 125f4 <__assert_fail@plt+0x1054>
   11c0c:	bl	1289c <__assert_fail@plt+0x12fc>
   11c10:	mov	r3, #0
   11c14:	str	r3, [fp, #112]	; 0x70
   11c18:	b	116d0 <__assert_fail@plt+0x130>
   11c1c:	ldr	r3, [sl]
   11c20:	ldr	r2, [fp, #128]	; 0x80
   11c24:	ldr	r1, [pc, #2508]	; 125f8 <__assert_fail@plt+0x1058>
   11c28:	cmp	r3, #0
   11c2c:	moveq	r3, r1
   11c30:	cmp	r2, #0
   11c34:	str	r3, [fp, #112]	; 0x70
   11c38:	bne	12110 <__assert_fail@plt+0xb70>
   11c3c:	ldr	r3, [fp, #124]	; 0x7c
   11c40:	cmp	r3, #0
   11c44:	beq	116d0 <__assert_fail@plt+0x130>
   11c48:	ldr	r1, [pc, #2476]	; 125fc <__assert_fail@plt+0x105c>
   11c4c:	ldr	r0, [pc, #2476]	; 12600 <__assert_fail@plt+0x1060>
   11c50:	bl	1289c <__assert_fail@plt+0x12fc>
   11c54:	mov	r3, #0
   11c58:	str	r3, [fp, #124]	; 0x7c
   11c5c:	b	116d0 <__assert_fail@plt+0x130>
   11c60:	ldr	r3, [sl]
   11c64:	cmp	r3, #0
   11c68:	beq	11d6c <__assert_fail@plt+0x7cc>
   11c6c:	ldrb	r2, [r3]
   11c70:	cmp	r2, #0
   11c74:	beq	11d6c <__assert_fail@plt+0x7cc>
   11c78:	str	r3, [fp, #156]	; 0x9c
   11c7c:	b	116d0 <__assert_fail@plt+0x130>
   11c80:	mov	r3, #0
   11c84:	strb	r3, [fp, #144]	; 0x90
   11c88:	ldr	r3, [pc, #2396]	; 125ec <__assert_fail@plt+0x104c>
   11c8c:	str	r3, [sp, #36]	; 0x24
   11c90:	b	116d0 <__assert_fail@plt+0x130>
   11c94:	ldr	r7, [sl]
   11c98:	mov	r1, #61	; 0x3d
   11c9c:	mov	r0, r7
   11ca0:	bl	113fc <strchr@plt>
   11ca4:	subs	r3, r0, #0
   11ca8:	str	r3, [sp, #56]	; 0x38
   11cac:	bne	126c8 <__assert_fail@plt+0x1128>
   11cb0:	mov	r0, r7
   11cb4:	str	r7, [fp, #76]	; 0x4c
   11cb8:	bl	1154c <unsetenv@plt>
   11cbc:	cmp	r0, #0
   11cc0:	beq	116d0 <__assert_fail@plt+0x130>
   11cc4:	bl	11420 <__errno_location@plt>
   11cc8:	mov	r2, #5
   11ccc:	ldr	r1, [pc, #2352]	; 12604 <__assert_fail@plt+0x1064>
   11cd0:	ldr	r4, [r0]
   11cd4:	ldr	r0, [sp, #56]	; 0x38
   11cd8:	bl	11288 <dcgettext@plt>
   11cdc:	mov	r3, r7
   11ce0:	mov	r1, r4
   11ce4:	mov	r2, r0
   11ce8:	mov	r0, #1
   11cec:	bl	11354 <error@plt>
   11cf0:	mov	r3, #1
   11cf4:	str	r3, [fp, #88]	; 0x58
   11cf8:	b	116d0 <__assert_fail@plt+0x130>
   11cfc:	ldr	r0, [pc, #2212]	; 125a8 <__assert_fail@plt+0x1008>
   11d00:	bl	14f84 <__assert_fail@plt+0x39e4>
   11d04:	mov	r0, r9
   11d08:	add	sp, sp, #228	; 0xe4
   11d0c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11d10:	mov	r3, #1
   11d14:	strb	r3, [fp, #73]	; 0x49
   11d18:	b	116d0 <__assert_fail@plt+0x130>
   11d1c:	ldr	r3, [sp, #52]	; 0x34
   11d20:	mov	r7, #0
   11d24:	blx	r3
   11d28:	str	r7, [sp]
   11d2c:	ldr	r3, [fp, #92]	; 0x5c
   11d30:	mov	r2, #1
   11d34:	mov	r1, #115	; 0x73
   11d38:	ldr	r0, [sl]
   11d3c:	bl	12f7c <__assert_fail@plt+0x19dc>
   11d40:	ldr	r2, [fp, #92]	; 0x5c
   11d44:	cmp	r0, r2
   11d48:	mov	r3, r0
   11d4c:	bhi	12140 <__assert_fail@plt+0xba0>
   11d50:	str	r3, [fp, #100]	; 0x64
   11d54:	b	116d0 <__assert_fail@plt+0x130>
   11d58:	mov	r0, #1
   11d5c:	bl	12c68 <__assert_fail@plt+0x16c8>
   11d60:	ldr	r3, [pc, #2208]	; 12608 <__assert_fail@plt+0x1068>
   11d64:	str	r3, [sp, #52]	; 0x34
   11d68:	b	116a4 <__assert_fail@plt+0x104>
   11d6c:	mov	r3, #0
   11d70:	b	11c78 <__assert_fail@plt+0x6d8>
   11d74:	cmp	r7, #97	; 0x61
   11d78:	beq	124c4 <__assert_fail@plt+0xf24>
   11d7c:	cmp	r7, #98	; 0x62
   11d80:	beq	12178 <__assert_fail@plt+0xbd8>
   11d84:	cmp	r7, #92	; 0x5c
   11d88:	beq	11b80 <__assert_fail@plt+0x5e0>
   11d8c:	cmp	r7, #120	; 0x78
   11d90:	moveq	r1, #16
   11d94:	addeq	r2, r3, #2
   11d98:	streq	r1, [sp, #36]	; 0x24
   11d9c:	beq	11dcc <__assert_fail@plt+0x82c>
   11da0:	str	r3, [sp, #36]	; 0x24
   11da4:	bl	113c0 <__ctype_b_loc@plt>
   11da8:	lsl	r7, r7, #1
   11dac:	ldr	r3, [sp, #36]	; 0x24
   11db0:	ldr	r2, [r0]
   11db4:	ldrh	r2, [r2, r7]
   11db8:	ands	r7, r2, #2048	; 0x800
   11dbc:	beq	1269c <__assert_fail@plt+0x10fc>
   11dc0:	add	r2, r3, #1
   11dc4:	mov	r1, #8
   11dc8:	str	r1, [sp, #36]	; 0x24
   11dcc:	str	r3, [sp, #60]	; 0x3c
   11dd0:	str	r2, [sp, #56]	; 0x38
   11dd4:	bl	11420 <__errno_location@plt>
   11dd8:	ldr	r2, [sp, #56]	; 0x38
   11ddc:	add	r1, sp, #224	; 0xe0
   11de0:	mov	r7, #0
   11de4:	str	r7, [r1, #-140]!	; 0xffffff74
   11de8:	mov	ip, r0
   11dec:	mov	r0, r2
   11df0:	str	r7, [ip]
   11df4:	ldr	r2, [sp, #36]	; 0x24
   11df8:	bl	113e4 <strtoul@plt>
   11dfc:	ldr	r3, [sp, #60]	; 0x3c
   11e00:	cmp	r0, #255	; 0xff
   11e04:	bhi	124dc <__assert_fail@plt+0xf3c>
   11e08:	ldr	r2, [sp, #84]	; 0x54
   11e0c:	ldrb	r2, [r2]
   11e10:	cmp	r2, #0
   11e14:	bne	126ac <__assert_fail@plt+0x110c>
   11e18:	uxtb	r7, r0
   11e1c:	b	11b80 <__assert_fail@plt+0x5e0>
   11e20:	ldr	r3, [fp, #156]	; 0x9c
   11e24:	ldr	r2, [pc, #1984]	; 125ec <__assert_fail@plt+0x104c>
   11e28:	ldr	r1, [sp, #36]	; 0x24
   11e2c:	adds	r3, r3, #0
   11e30:	movne	r3, #1
   11e34:	cmp	r1, r2
   11e38:	movne	r3, #0
   11e3c:	cmp	r3, #0
   11e40:	bne	12518 <__assert_fail@plt+0xf78>
   11e44:	ldr	r3, [sp, #52]	; 0x34
   11e48:	blx	r3
   11e4c:	ldr	r3, [sp, #48]	; 0x30
   11e50:	cmp	r3, #0
   11e54:	bne	12564 <__assert_fail@plt+0xfc4>
   11e58:	ldr	r3, [pc, #1964]	; 1260c <__assert_fail@plt+0x106c>
   11e5c:	add	r4, sp, #224	; 0xe0
   11e60:	str	r3, [r4, #-140]!	; 0xffffff74
   11e64:	add	r0, r4, #4
   11e68:	bl	114c8 <sigemptyset@plt>
   11e6c:	ldr	r3, [sp, #48]	; 0x30
   11e70:	mov	r1, r4
   11e74:	mov	r2, r3
   11e78:	mov	r0, #10
   11e7c:	str	r3, [sp, #216]	; 0xd8
   11e80:	bl	112f4 <sigaction@plt>
   11e84:	cmp	r0, #0
   11e88:	bne	1244c <__assert_fail@plt+0xeac>
   11e8c:	ldr	r3, [pc, #1916]	; 12610 <__assert_fail@plt+0x1070>
   11e90:	mov	r5, #0
   11e94:	add	r0, r4, #4
   11e98:	str	r3, [sp, #84]	; 0x54
   11e9c:	bl	114c8 <sigemptyset@plt>
   11ea0:	mov	r1, r4
   11ea4:	mov	r2, r5
   11ea8:	mov	r0, #12
   11eac:	str	r5, [sp, #216]	; 0xd8
   11eb0:	bl	112f4 <sigaction@plt>
   11eb4:	cmp	r0, r5
   11eb8:	bne	12420 <__assert_fail@plt+0xe80>
   11ebc:	ldr	r1, [pc, #1812]	; 125d8 <__assert_fail@plt+0x1038>
   11ec0:	ldr	r0, [sp, #28]
   11ec4:	bl	111e0 <strcmp@plt>
   11ec8:	cmp	r0, #0
   11ecc:	bne	123c0 <__assert_fail@plt+0xe20>
   11ed0:	ldr	r3, [pc, #1852]	; 12614 <__assert_fail@plt+0x1074>
   11ed4:	ldr	r3, [r3]
   11ed8:	str	r3, [fp, #140]	; 0x8c
   11edc:	ldr	r3, [fp, #112]	; 0x70
   11ee0:	cmp	r3, #0
   11ee4:	beq	124cc <__assert_fail@plt+0xf2c>
   11ee8:	mov	r3, #1
   11eec:	str	r3, [fp, #88]	; 0x58
   11ef0:	ldr	r3, [pc, #1824]	; 12618 <__assert_fail@plt+0x1078>
   11ef4:	ldr	r3, [r3]
   11ef8:	cmp	r8, r3
   11efc:	beq	1247c <__assert_fail@plt+0xedc>
   11f00:	ldr	r3, [sp, #40]	; 0x28
   11f04:	cmp	r3, #0
   11f08:	bne	12248 <__assert_fail@plt+0xca8>
   11f0c:	ldr	r0, [fp, #100]	; 0x64
   11f10:	add	r0, r0, #1
   11f14:	bl	1906c <__assert_fail@plt+0x7acc>
   11f18:	ldr	r3, [fp, #100]	; 0x64
   11f1c:	str	r0, [fp, #132]	; 0x84
   11f20:	add	r0, r3, #1
   11f24:	bl	1906c <__assert_fail@plt+0x7acc>
   11f28:	mov	r1, #0
   11f2c:	str	r0, [fp, #28]
   11f30:	mov	r0, #17
   11f34:	bl	11270 <signal@plt>
   11f38:	ldr	r4, [fp, #112]	; 0x70
   11f3c:	cmp	r4, #0
   11f40:	beq	12188 <__assert_fail@plt+0xbe8>
   11f44:	lsl	r5, r8, #2
   11f48:	mov	r0, r5
   11f4c:	bl	1906c <__assert_fail@plt+0x7acc>
   11f50:	ldr	r3, [pc, #1728]	; 12618 <__assert_fail@plt+0x1078>
   11f54:	ldr	r6, [r3]
   11f58:	cmp	r8, r6
   11f5c:	str	r0, [sp, #40]	; 0x28
   11f60:	ble	11f90 <__assert_fail@plt+0x9f0>
   11f64:	ldr	r3, [sp, #32]
   11f68:	lsl	r6, r6, #2
   11f6c:	add	r4, r3, r6
   11f70:	add	r5, r3, r5
   11f74:	ldr	r3, [sp, #40]	; 0x28
   11f78:	add	r6, r3, r6
   11f7c:	ldr	r0, [r4], #4
   11f80:	bl	113f0 <strlen@plt>
   11f84:	cmp	r4, r5
   11f88:	str	r0, [r6], #4
   11f8c:	bne	11f7c <__assert_fail@plt+0x9dc>
   11f90:	ldr	r0, [fp, #112]	; 0x70
   11f94:	bl	113f0 <strlen@plt>
   11f98:	ldr	r9, [pc, #1660]	; 1261c <__assert_fail@plt+0x107c>
   11f9c:	ldr	sl, [pc, #1612]	; 125f0 <__assert_fail@plt+0x1050>
   11fa0:	mov	r6, #0
   11fa4:	str	r8, [sp, #28]
   11fa8:	str	r0, [fp, #108]	; 0x6c
   11fac:	ldr	r3, [sp, #36]	; 0x24
   11fb0:	blx	r3
   11fb4:	cmn	r0, #1
   11fb8:	mov	r8, r0
   11fbc:	beq	120c4 <__assert_fail@plt+0xb24>
   11fc0:	mov	r1, r9
   11fc4:	ldr	r0, [pc, #1528]	; 125c4 <__assert_fail@plt+0x1024>
   11fc8:	bl	149d0 <__assert_fail@plt+0x3430>
   11fcc:	ldr	r3, [pc, #1604]	; 12618 <__assert_fail@plt+0x1078>
   11fd0:	ldrb	r0, [sl, #4]
   11fd4:	ldr	r7, [sp, #32]
   11fd8:	ldr	r2, [r3]
   11fdc:	ldr	r3, [sp, #40]	; 0x28
   11fe0:	mov	r1, r9
   11fe4:	sub	r8, r8, #1
   11fe8:	ldr	r3, [r3, r2, lsl #2]
   11fec:	ldr	r2, [r7, r2, lsl #2]
   11ff0:	add	r3, r3, #1
   11ff4:	str	r0, [sp, #8]
   11ff8:	str	r6, [sp, #4]
   11ffc:	str	r6, [sp]
   12000:	ldr	r0, [pc, #1468]	; 125c4 <__assert_fail@plt+0x1024>
   12004:	str	r6, [fp, #32]
   12008:	bl	140ac <__assert_fail@plt+0x2b0c>
   1200c:	ldr	r2, [pc, #1540]	; 12618 <__assert_fail@plt+0x1078>
   12010:	strb	r6, [sl, #4]
   12014:	ldr	r5, [r2]
   12018:	ldr	r2, [sp, #28]
   1201c:	add	r4, r5, #1
   12020:	cmp	r2, r4
   12024:	ble	12080 <__assert_fail@plt+0xae0>
   12028:	ldr	r3, [sp, #40]	; 0x28
   1202c:	lsl	r5, r5, #2
   12030:	add	r7, r7, r5
   12034:	mov	r0, r6
   12038:	add	r5, r3, r5
   1203c:	b	12044 <__assert_fail@plt+0xaa4>
   12040:	ldrb	r0, [sl, #4]
   12044:	ldr	r1, [fp, #132]	; 0x84
   12048:	ldr	r3, [r5, #4]!
   1204c:	ldr	r2, [r7, #4]!
   12050:	str	r0, [sp, #16]
   12054:	str	r1, [sp, #8]
   12058:	str	r8, [sp, #12]
   1205c:	str	r6, [sp, #4]
   12060:	str	r6, [sp]
   12064:	mov	r1, r9
   12068:	ldr	r0, [pc, #1364]	; 125c4 <__assert_fail@plt+0x1024>
   1206c:	bl	14358 <__assert_fail@plt+0x2db8>
   12070:	ldr	r3, [sp, #28]
   12074:	add	r4, r4, #1
   12078:	cmp	r3, r4
   1207c:	bne	12040 <__assert_fail@plt+0xaa0>
   12080:	mov	r1, r9
   12084:	ldr	r0, [pc, #1336]	; 125c4 <__assert_fail@plt+0x1024>
   12088:	bl	14514 <__assert_fail@plt+0x2f74>
   1208c:	b	11fac <__assert_fail@plt+0xa0c>
   12090:	ldr	r2, [fp, #16]
   12094:	ldr	r3, [fp, #116]	; 0x74
   12098:	cmp	r2, r3
   1209c:	bne	120b8 <__assert_fail@plt+0xb18>
   120a0:	ldr	r3, [sp, #44]	; 0x2c
   120a4:	cmp	r3, #0
   120a8:	beq	120c4 <__assert_fail@plt+0xb24>
   120ac:	ldrb	r3, [fp, #64]	; 0x40
   120b0:	cmp	r3, #0
   120b4:	bne	120c4 <__assert_fail@plt+0xb24>
   120b8:	ldr	r1, [pc, #1372]	; 1261c <__assert_fail@plt+0x107c>
   120bc:	add	r0, r1, #72	; 0x48
   120c0:	bl	14514 <__assert_fail@plt+0x2f74>
   120c4:	ldr	r3, [fp, #60]	; 0x3c
   120c8:	str	r3, [fp, #172]	; 0xac
   120cc:	ldr	r9, [fp, #60]	; 0x3c
   120d0:	b	11d04 <__assert_fail@plt+0x764>
   120d4:	mov	r3, #1
   120d8:	str	r3, [fp, #124]	; 0x7c
   120dc:	b	11aec <__assert_fail@plt+0x54c>
   120e0:	ldr	r1, [pc, #1300]	; 125fc <__assert_fail@plt+0x105c>
   120e4:	ldr	r0, [pc, #1272]	; 125e4 <__assert_fail@plt+0x1044>
   120e8:	bl	1289c <__assert_fail@plt+0x12fc>
   120ec:	mov	r3, #0
   120f0:	str	r3, [fp, #124]	; 0x7c
   120f4:	b	11a90 <__assert_fail@plt+0x4f0>
   120f8:	ldr	r1, [pc, #1312]	; 12620 <__assert_fail@plt+0x1080>
   120fc:	ldr	r0, [pc, #1252]	; 125e8 <__assert_fail@plt+0x1048>
   12100:	bl	1289c <__assert_fail@plt+0x12fc>
   12104:	mov	r3, #0
   12108:	str	r3, [fp, #128]	; 0x80
   1210c:	b	11af8 <__assert_fail@plt+0x558>
   12110:	ldr	r1, [pc, #1288]	; 12620 <__assert_fail@plt+0x1080>
   12114:	ldr	r0, [pc, #1252]	; 12600 <__assert_fail@plt+0x1060>
   12118:	bl	1289c <__assert_fail@plt+0x12fc>
   1211c:	mov	r3, #0
   12120:	str	r3, [fp, #128]	; 0x80
   12124:	b	11c3c <__assert_fail@plt+0x69c>
   12128:	ldr	r1, [pc, #1264]	; 12620 <__assert_fail@plt+0x1080>
   1212c:	ldr	r0, [pc, #1216]	; 125f4 <__assert_fail@plt+0x1054>
   12130:	bl	1289c <__assert_fail@plt+0x12fc>
   12134:	mov	r3, #0
   12138:	str	r3, [fp, #128]	; 0x80
   1213c:	b	11bf8 <__assert_fail@plt+0x658>
   12140:	str	r0, [sp, #56]	; 0x38
   12144:	mov	r2, #5
   12148:	ldr	r1, [pc, #1236]	; 12624 <__assert_fail@plt+0x1084>
   1214c:	mov	r0, r7
   12150:	bl	11288 <dcgettext@plt>
   12154:	ldr	r2, [fp, #92]	; 0x5c
   12158:	ldr	r3, [sp, #56]	; 0x38
   1215c:	str	r2, [sp]
   12160:	mov	r1, r7
   12164:	mov	r2, r0
   12168:	mov	r0, r7
   1216c:	bl	11354 <error@plt>
   12170:	ldr	r3, [fp, #92]	; 0x5c
   12174:	b	11d50 <__assert_fail@plt+0x7b0>
   12178:	mov	r7, #8
   1217c:	b	11b80 <__assert_fail@plt+0x5e0>
   12180:	mov	r7, #9
   12184:	b	11b80 <__assert_fail@plt+0x5e0>
   12188:	ldr	r5, [pc, #1120]	; 125f0 <__assert_fail@plt+0x1050>
   1218c:	ldr	r6, [pc, #1160]	; 1261c <__assert_fail@plt+0x107c>
   12190:	ldr	r7, [sp, #32]
   12194:	b	121dc <__assert_fail@plt+0xc3c>
   12198:	ldr	r9, [r7, r3, lsl #2]
   1219c:	mov	r0, r9
   121a0:	bl	113f0 <strlen@plt>
   121a4:	ldrb	r3, [r5, #4]
   121a8:	mov	r2, r9
   121ac:	str	r4, [sp, #4]
   121b0:	str	r3, [sp, #8]
   121b4:	str	r4, [sp]
   121b8:	mov	r1, r6
   121bc:	add	r3, r0, #1
   121c0:	ldr	r0, [pc, #1020]	; 125c4 <__assert_fail@plt+0x1024>
   121c4:	bl	140ac <__assert_fail@plt+0x2b0c>
   121c8:	ldr	r3, [pc, #1096]	; 12618 <__assert_fail@plt+0x1078>
   121cc:	ldr	r2, [pc, #1092]	; 12618 <__assert_fail@plt+0x1078>
   121d0:	ldr	r3, [r3]
   121d4:	add	r3, r3, #1
   121d8:	str	r3, [r2]
   121dc:	ldr	r3, [pc, #1076]	; 12618 <__assert_fail@plt+0x1078>
   121e0:	ldr	r3, [r3]
   121e4:	cmp	r8, r3
   121e8:	bgt	12198 <__assert_fail@plt+0xbf8>
   121ec:	mov	r3, #0
   121f0:	strb	r3, [r5, #4]
   121f4:	ldr	r5, [pc, #1056]	; 1261c <__assert_fail@plt+0x107c>
   121f8:	ldr	r1, [fp, #16]
   121fc:	ldr	r2, [fp, #32]
   12200:	mov	r4, r3
   12204:	str	r1, [fp, #116]	; 0x74
   12208:	str	r2, [fp, #36]	; 0x24
   1220c:	ldr	r3, [sp, #36]	; 0x24
   12210:	blx	r3
   12214:	cmn	r0, #1
   12218:	beq	12090 <__assert_fail@plt+0xaf0>
   1221c:	ldr	r3, [fp, #124]	; 0x7c
   12220:	cmp	r3, #0
   12224:	beq	1220c <__assert_fail@plt+0xc6c>
   12228:	ldr	r2, [fp, #148]	; 0x94
   1222c:	cmp	r3, r2
   12230:	bhi	1220c <__assert_fail@plt+0xc6c>
   12234:	mov	r1, r5
   12238:	ldr	r0, [pc, #900]	; 125c4 <__assert_fail@plt+0x1024>
   1223c:	bl	14514 <__assert_fail@plt+0x2f74>
   12240:	str	r4, [fp, #148]	; 0x94
   12244:	b	1220c <__assert_fail@plt+0xc6c>
   12248:	ldr	r4, [pc, #984]	; 12628 <__assert_fail@plt+0x1088>
   1224c:	mov	r2, #5
   12250:	ldr	r1, [pc, #980]	; 1262c <__assert_fail@plt+0x108c>
   12254:	mov	r0, #0
   12258:	ldr	r5, [r4]
   1225c:	bl	11288 <dcgettext@plt>
   12260:	mov	r6, r0
   12264:	bl	14814 <__assert_fail@plt+0x3274>
   12268:	mov	r1, r6
   1226c:	mov	r3, #0
   12270:	mov	r2, r0
   12274:	mov	r0, r5
   12278:	bl	11414 <fprintf@plt>
   1227c:	mov	r2, #5
   12280:	ldr	r1, [pc, #936]	; 12630 <__assert_fail@plt+0x1090>
   12284:	mov	r0, #0
   12288:	ldr	r5, [r4]
   1228c:	bl	11288 <dcgettext@plt>
   12290:	mov	r3, #0
   12294:	ldr	r2, [fp, #92]	; 0x5c
   12298:	mov	r1, r0
   1229c:	mov	r0, r5
   122a0:	bl	11414 <fprintf@plt>
   122a4:	mov	r2, #5
   122a8:	ldr	r1, [pc, #900]	; 12634 <__assert_fail@plt+0x1094>
   122ac:	mov	r0, #0
   122b0:	ldr	r5, [r4]
   122b4:	bl	11288 <dcgettext@plt>
   122b8:	mov	r3, #0
   122bc:	ldr	r2, [fp, #96]	; 0x60
   122c0:	mov	r1, r0
   122c4:	mov	r0, r5
   122c8:	bl	11414 <fprintf@plt>
   122cc:	mov	r2, #5
   122d0:	ldr	r1, [pc, #864]	; 12638 <__assert_fail@plt+0x1098>
   122d4:	mov	r0, #0
   122d8:	ldr	r5, [r4]
   122dc:	bl	11288 <dcgettext@plt>
   122e0:	ldr	r6, [fp, #92]	; 0x5c
   122e4:	mov	r7, r0
   122e8:	bl	14814 <__assert_fail@plt+0x3274>
   122ec:	mov	r3, #0
   122f0:	mov	r1, r7
   122f4:	sub	r2, r6, r0
   122f8:	mov	r0, r5
   122fc:	bl	11414 <fprintf@plt>
   12300:	mov	r2, #5
   12304:	ldr	r1, [pc, #816]	; 1263c <__assert_fail@plt+0x109c>
   12308:	mov	r0, #0
   1230c:	ldr	r5, [r4]
   12310:	bl	11288 <dcgettext@plt>
   12314:	mov	r3, #0
   12318:	ldr	r2, [fp, #100]	; 0x64
   1231c:	mov	r1, r0
   12320:	mov	r0, r5
   12324:	bl	11414 <fprintf@plt>
   12328:	mov	r2, #5
   1232c:	ldr	r1, [pc, #780]	; 12640 <__assert_fail@plt+0x10a0>
   12330:	mov	r0, #0
   12334:	ldr	r5, [r4]
   12338:	bl	11288 <dcgettext@plt>
   1233c:	mvn	r2, #-2147483648	; 0x80000000
   12340:	mov	r3, #0
   12344:	mov	r1, r0
   12348:	mov	r0, r5
   1234c:	bl	11414 <fprintf@plt>
   12350:	mov	r0, #0
   12354:	bl	11540 <isatty@plt>
   12358:	cmp	r0, #0
   1235c:	beq	11f0c <__assert_fail@plt+0x96c>
   12360:	mov	r2, #5
   12364:	ldr	r1, [pc, #728]	; 12644 <__assert_fail@plt+0x10a4>
   12368:	mov	r0, #0
   1236c:	ldr	r5, [r4]
   12370:	bl	11288 <dcgettext@plt>
   12374:	mov	r1, r0
   12378:	mov	r0, r5
   1237c:	bl	11414 <fprintf@plt>
   12380:	ldr	r3, [sp, #44]	; 0x2c
   12384:	cmp	r3, #0
   12388:	beq	11f0c <__assert_fail@plt+0x96c>
   1238c:	mov	r2, #5
   12390:	ldr	r1, [pc, #688]	; 12648 <__assert_fail@plt+0x10a8>
   12394:	mov	r0, #0
   12398:	ldr	r4, [r4]
   1239c:	bl	11288 <dcgettext@plt>
   123a0:	ldr	r3, [pc, #624]	; 12618 <__assert_fail@plt+0x1078>
   123a4:	ldr	r2, [sp, #32]
   123a8:	ldr	r3, [r3]
   123ac:	ldr	r2, [r2, r3, lsl #2]
   123b0:	mov	r1, r0
   123b4:	mov	r0, r4
   123b8:	bl	11414 <fprintf@plt>
   123bc:	b	11f0c <__assert_fail@plt+0x96c>
   123c0:	mov	r4, #1
   123c4:	ldr	r0, [sp, #28]
   123c8:	str	r4, [fp, #80]	; 0x50
   123cc:	bl	130c4 <__assert_fail@plt+0x1b24>
   123d0:	cmp	r0, #0
   123d4:	mov	r5, r0
   123d8:	str	r0, [fp, #140]	; 0x8c
   123dc:	bne	11edc <__assert_fail@plt+0x93c>
   123e0:	bl	11420 <__errno_location@plt>
   123e4:	mov	r2, #5
   123e8:	ldr	r1, [pc, #604]	; 1264c <__assert_fail@plt+0x10ac>
   123ec:	ldr	r6, [r0]
   123f0:	mov	r0, r5
   123f4:	bl	11288 <dcgettext@plt>
   123f8:	ldr	r2, [sp, #28]
   123fc:	mov	r1, #8
   12400:	mov	r7, r0
   12404:	mov	r0, r5
   12408:	bl	187d8 <__assert_fail@plt+0x7238>
   1240c:	mov	r2, r7
   12410:	mov	r1, r6
   12414:	mov	r3, r0
   12418:	mov	r0, r4
   1241c:	bl	11354 <error@plt>
   12420:	bl	11420 <__errno_location@plt>
   12424:	mov	r2, #5
   12428:	ldr	r1, [pc, #544]	; 12650 <__assert_fail@plt+0x10b0>
   1242c:	ldr	r4, [r0]
   12430:	mov	r0, r5
   12434:	bl	11288 <dcgettext@plt>
   12438:	mov	r1, r4
   1243c:	mov	r2, r0
   12440:	mov	r0, r5
   12444:	bl	11354 <error@plt>
   12448:	b	11ebc <__assert_fail@plt+0x91c>
   1244c:	bl	11420 <__errno_location@plt>
   12450:	ldr	r6, [sp, #48]	; 0x30
   12454:	mov	r2, #5
   12458:	ldr	r1, [pc, #500]	; 12654 <__assert_fail@plt+0x10b4>
   1245c:	ldr	r5, [r0]
   12460:	mov	r0, r6
   12464:	bl	11288 <dcgettext@plt>
   12468:	mov	r1, r5
   1246c:	mov	r2, r0
   12470:	mov	r0, r6
   12474:	bl	11354 <error@plt>
   12478:	b	11e8c <__assert_fail@plt+0x8ec>
   1247c:	add	r3, sp, #224	; 0xe0
   12480:	mov	r2, r3
   12484:	add	r3, sp, #76	; 0x4c
   12488:	str	r3, [r2, #-152]!	; 0xffffff68
   1248c:	str	r2, [sp, #32]
   12490:	ldr	r2, [pc, #384]	; 12618 <__assert_fail@plt+0x1078>
   12494:	mov	r3, #0
   12498:	mov	r8, #1
   1249c:	str	r3, [r2]
   124a0:	b	11f00 <__assert_fail@plt+0x960>
   124a4:	cmp	r7, #110	; 0x6e
   124a8:	moveq	r7, #10
   124ac:	beq	11b80 <__assert_fail@plt+0x5e0>
   124b0:	b	11d8c <__assert_fail@plt+0x7ec>
   124b4:	mov	r7, #13
   124b8:	b	11b80 <__assert_fail@plt+0x5e0>
   124bc:	mov	r7, #12
   124c0:	b	11b80 <__assert_fail@plt+0x5e0>
   124c4:	mov	r7, #7
   124c8:	b	11b80 <__assert_fail@plt+0x5e0>
   124cc:	ldr	r3, [fp, #124]	; 0x7c
   124d0:	cmp	r3, #0
   124d4:	beq	11ef0 <__assert_fail@plt+0x950>
   124d8:	b	11ee8 <__assert_fail@plt+0x948>
   124dc:	ldr	r2, [sp, #36]	; 0x24
   124e0:	mov	r0, r7
   124e4:	cmp	r2, #16
   124e8:	mov	r2, #5
   124ec:	ldreq	r1, [pc, #356]	; 12658 <__assert_fail@plt+0x10b8>
   124f0:	ldrne	r1, [pc, #356]	; 1265c <__assert_fail@plt+0x10bc>
   124f4:	str	r3, [sp, #28]
   124f8:	bl	11288 <dcgettext@plt>
   124fc:	mov	r2, #255	; 0xff
   12500:	str	r2, [sp]
   12504:	ldr	r3, [sp, #28]
   12508:	mov	r2, r0
   1250c:	mov	r1, r7
   12510:	mov	r0, #1
   12514:	bl	11354 <error@plt>
   12518:	mov	r2, #5
   1251c:	ldr	r1, [pc, #316]	; 12660 <__assert_fail@plt+0x10c0>
   12520:	mov	r0, #0
   12524:	bl	11288 <dcgettext@plt>
   12528:	mov	r1, #0
   1252c:	mov	r2, r0
   12530:	mov	r0, r1
   12534:	bl	11354 <error@plt>
   12538:	b	11e44 <__assert_fail@plt+0x8a4>
   1253c:	bl	11420 <__errno_location@plt>
   12540:	mov	r2, #5
   12544:	ldr	r1, [pc, #280]	; 12664 <__assert_fail@plt+0x10c4>
   12548:	ldr	r4, [r0]
   1254c:	mov	r0, #0
   12550:	bl	11288 <dcgettext@plt>
   12554:	mov	r1, r4
   12558:	mov	r2, r0
   1255c:	mov	r0, #1
   12560:	bl	11354 <error@plt>
   12564:	ldr	r3, [pc, #300]	; 12698 <__assert_fail@plt+0x10f8>
   12568:	ldr	r2, [pc, #248]	; 12668 <__assert_fail@plt+0x10c8>
   1256c:	ldr	r1, [pc, #284]	; 12690 <__assert_fail@plt+0x10f0>
   12570:	ldr	r0, [pc, #244]	; 1266c <__assert_fail@plt+0x10cc>
   12574:	bl	115a0 <__assert_fail@plt>
   12578:	ldr	r1, [pc, #240]	; 12670 <__assert_fail@plt+0x10d0>
   1257c:	mov	r2, #5
   12580:	str	r3, [sp, #28]
   12584:	mov	r0, #0
   12588:	bl	11288 <dcgettext@plt>
   1258c:	ldr	r3, [sp, #28]
   12590:	mov	r1, #0
   12594:	mov	r2, r0
   12598:	mov	r0, #1
   1259c:	bl	11354 <error@plt>
   125a0:	andeq	ip, r1, r8, asr r2
   125a4:	andeq	sp, r2, r8, ror #3
   125a8:	andeq	fp, r1, r8, lsl #23
   125ac:	ldrdeq	fp, [r1], -r4
   125b0:	muleq	r1, r0, fp
   125b4:	andeq	ip, r1, r8, lsl #13
   125b8:	andeq	r5, r1, r8, asr r3
   125bc:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   125c0:	andeq	r3, r1, r4, ror #5
   125c4:	andeq	sp, r2, r0, asr #4
   125c8:	andeq	r2, r1, r8, asr #16
   125cc:	andeq	r3, r1, r0, lsr #18
   125d0:	andeq	sl, r1, r8, lsl sl
   125d4:	strdeq	fp, [r1], -r8
   125d8:	andeq	fp, r1, r4, lsl #23
   125dc:	andeq	sp, r2, r0, ror #3
   125e0:	andeq	fp, r1, r4, lsr #28
   125e4:	andeq	fp, r1, r0, asr #28
   125e8:	andeq	fp, r1, r0, lsr lr
   125ec:	ldrdeq	r3, [r1], -r8
   125f0:	andeq	sp, r2, r8, ror #2
   125f4:	andeq	fp, r1, r0, lsr #28
   125f8:	strdeq	fp, [r1], -r4
   125fc:	andeq	fp, r1, r4, lsl lr
   12600:	andeq	fp, r1, r4, lsl #28
   12604:	ldrdeq	fp, [r1], -r0
   12608:	andeq	r2, r1, r4, ror #17
   1260c:	andeq	r2, r1, ip, asr #16
   12610:	andeq	r2, r1, ip, ror r8
   12614:	ldrdeq	sp, [r2], -r8
   12618:	andeq	sp, r2, r8, asr #3
   1261c:	strdeq	sp, [r2], -r8
   12620:	strdeq	fp, [r1], -r8
   12624:	andeq	fp, r1, r0, asr lr
   12628:	ldrdeq	sp, [r2], -r0
   1262c:	ldrdeq	fp, [r1], -r4
   12630:	andeq	ip, r1, r4
   12634:	andeq	ip, r1, r0, asr #32
   12638:	muleq	r1, r0, r0
   1263c:	andeq	ip, r1, r8, asr #1
   12640:	strdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   12644:	andeq	ip, r1, r8, lsr r1
   12648:	andeq	ip, r1, r8, ror #3
   1264c:			; <UNDEFINED> instruction: 0x0001bfb8
   12650:	muleq	r1, r4, pc	; <UNPREDICTABLE>
   12654:	andeq	fp, r1, r0, ror pc
   12658:	andeq	fp, r1, r4, asr #24
   1265c:	andeq	fp, r1, r8, lsr #25
   12660:	andeq	fp, r1, ip, lsl pc
   12664:	andeq	fp, r1, r8, lsr #23
   12668:	ldrdeq	r0, [r0], -r3
   1266c:	andeq	fp, r1, r8, asr pc
   12670:	andeq	fp, r1, r0, ror sp
   12674:	andeq	fp, r1, r4, lsl #24
   12678:	andeq	fp, r1, ip, lsl #26
   1267c:	muleq	r1, r4, lr
   12680:	andeq	sl, r1, r0, ror #19
   12684:	andeq	r0, r0, r3, ror #3
   12688:	andeq	fp, r1, ip, asr #23
   1268c:	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   12690:	andeq	sl, r1, r8, ror #24
   12694:	andeq	fp, r1, r8, ror #23
   12698:	andeq	sl, r1, r0, lsl sl
   1269c:	str	r3, [sp, #28]
   126a0:	mov	r2, #5
   126a4:	ldr	r1, [pc, #-56]	; 12674 <__assert_fail@plt+0x10d4>
   126a8:	b	12584 <__assert_fail@plt+0xfe4>
   126ac:	mov	r2, #5
   126b0:	ldr	r1, [pc, #-64]	; 12678 <__assert_fail@plt+0x10d8>
   126b4:	mov	r0, r7
   126b8:	str	r3, [sp, #28]
   126bc:	bl	11288 <dcgettext@plt>
   126c0:	ldr	r2, [sp, #84]	; 0x54
   126c4:	b	12500 <__assert_fail@plt+0xf60>
   126c8:	mov	r2, #5
   126cc:	ldr	r1, [pc, #-88]	; 1267c <__assert_fail@plt+0x10dc>
   126d0:	mov	r0, #0
   126d4:	bl	11288 <dcgettext@plt>
   126d8:	ldr	r2, [sp, #68]	; 0x44
   126dc:	ldr	r3, [pc, #-100]	; 12680 <__assert_fail@plt+0x10e0>
   126e0:	mov	r1, #0
   126e4:	add	r3, r3, r2, lsl #4
   126e8:	ldr	r3, [r3, #56]	; 0x38
   126ec:	mov	r2, r0
   126f0:	mov	r0, #1
   126f4:	bl	11354 <error@plt>
   126f8:	ldr	r3, [pc, #-104]	; 12698 <__assert_fail@plt+0x10f8>
   126fc:	ldr	r2, [pc, #-128]	; 12684 <__assert_fail@plt+0x10e4>
   12700:	ldr	r1, [pc, #-120]	; 12690 <__assert_fail@plt+0x10f0>
   12704:	ldr	r0, [pc, #-132]	; 12688 <__assert_fail@plt+0x10e8>
   12708:	bl	115a0 <__assert_fail@plt>
   1270c:	ldr	r3, [pc, #-124]	; 12698 <__assert_fail@plt+0x10f8>
   12710:	ldr	r2, [pc, #-140]	; 1268c <__assert_fail@plt+0x10ec>
   12714:	ldr	r1, [pc, #-140]	; 12690 <__assert_fail@plt+0x10f0>
   12718:	ldr	r0, [pc, #-140]	; 12694 <__assert_fail@plt+0x10f4>
   1271c:	bl	115a0 <__assert_fail@plt>
   12720:	mov	fp, #0
   12724:	mov	lr, #0
   12728:	pop	{r1}		; (ldr r1, [sp], #4)
   1272c:	mov	r2, sp
   12730:	push	{r2}		; (str r2, [sp, #-4]!)
   12734:	push	{r0}		; (str r0, [sp, #-4]!)
   12738:	ldr	ip, [pc, #16]	; 12750 <__assert_fail@plt+0x11b0>
   1273c:	push	{ip}		; (str ip, [sp, #-4]!)
   12740:	ldr	r0, [pc, #12]	; 12754 <__assert_fail@plt+0x11b4>
   12744:	ldr	r3, [pc, #12]	; 12758 <__assert_fail@plt+0x11b8>
   12748:	bl	11390 <__libc_start_main@plt>
   1274c:	bl	11570 <abort@plt>
   12750:			; <UNDEFINED> instruction: 0x0001a9b8
   12754:	andeq	r1, r1, ip, lsr #11
   12758:	andeq	sl, r1, r8, asr r9
   1275c:	ldr	r3, [pc, #20]	; 12778 <__assert_fail@plt+0x11d8>
   12760:	ldr	r2, [pc, #20]	; 1277c <__assert_fail@plt+0x11dc>
   12764:	add	r3, pc, r3
   12768:	ldr	r2, [r3, r2]
   1276c:	cmp	r2, #0
   12770:	bxeq	lr
   12774:	b	113a8 <__gmon_start__@plt>
   12778:	muleq	r1, r4, r8
   1277c:	andeq	r0, r0, ip, asr r1
   12780:	ldr	r3, [pc, #28]	; 127a4 <__assert_fail@plt+0x1204>
   12784:	ldr	r0, [pc, #28]	; 127a8 <__assert_fail@plt+0x1208>
   12788:	sub	r3, r3, r0
   1278c:	cmp	r3, #6
   12790:	bxls	lr
   12794:	ldr	r3, [pc, #16]	; 127ac <__assert_fail@plt+0x120c>
   12798:	cmp	r3, #0
   1279c:	bxeq	lr
   127a0:	bx	r3
   127a4:			; <UNDEFINED> instruction: 0x0002d1bb
   127a8:			; <UNDEFINED> instruction: 0x0002d1b8
   127ac:	andeq	r0, r0, r0
   127b0:	ldr	r1, [pc, #36]	; 127dc <__assert_fail@plt+0x123c>
   127b4:	ldr	r0, [pc, #36]	; 127e0 <__assert_fail@plt+0x1240>
   127b8:	sub	r1, r1, r0
   127bc:	asr	r1, r1, #2
   127c0:	add	r1, r1, r1, lsr #31
   127c4:	asrs	r1, r1, #1
   127c8:	bxeq	lr
   127cc:	ldr	r3, [pc, #16]	; 127e4 <__assert_fail@plt+0x1244>
   127d0:	cmp	r3, #0
   127d4:	bxeq	lr
   127d8:	bx	r3
   127dc:			; <UNDEFINED> instruction: 0x0002d1b8
   127e0:			; <UNDEFINED> instruction: 0x0002d1b8
   127e4:	andeq	r0, r0, r0
   127e8:	push	{r4, lr}
   127ec:	ldr	r4, [pc, #24]	; 1280c <__assert_fail@plt+0x126c>
   127f0:	ldrb	r3, [r4]
   127f4:	cmp	r3, #0
   127f8:	popne	{r4, pc}
   127fc:	bl	12780 <__assert_fail@plt+0x11e0>
   12800:	mov	r3, #1
   12804:	strb	r3, [r4]
   12808:	pop	{r4, pc}
   1280c:	andeq	sp, r2, r4, ror #3
   12810:	ldr	r0, [pc, #40]	; 12840 <__assert_fail@plt+0x12a0>
   12814:	ldr	r3, [r0]
   12818:	cmp	r3, #0
   1281c:	bne	12824 <__assert_fail@plt+0x1284>
   12820:	b	127b0 <__assert_fail@plt+0x1210>
   12824:	ldr	r3, [pc, #24]	; 12844 <__assert_fail@plt+0x12a4>
   12828:	cmp	r3, #0
   1282c:	beq	12820 <__assert_fail@plt+0x1280>
   12830:	push	{r4, lr}
   12834:	blx	r3
   12838:	pop	{r4, lr}
   1283c:	b	127b0 <__assert_fail@plt+0x1210>
   12840:	andeq	ip, r2, r4, lsl pc
   12844:	andeq	r0, r0, r0
   12848:	bx	lr
   1284c:	ldr	r3, [pc, #32]	; 12874 <__assert_fail@plt+0x12d4>
   12850:	ldr	r2, [r3]
   12854:	cmn	r2, #-2147483647	; 0x80000001
   12858:	ldrne	r2, [r3]
   1285c:	addne	r2, r2, #1
   12860:	strne	r2, [r3]
   12864:	ldr	r3, [pc, #12]	; 12878 <__assert_fail@plt+0x12d8>
   12868:	mov	r2, #1
   1286c:	str	r2, [r3]
   12870:	bx	lr
   12874:	andeq	sp, r2, r8, ror #2
   12878:	andeq	sp, r2, r8, ror #3
   1287c:	ldr	r3, [pc, #20]	; 12898 <__assert_fail@plt+0x12f8>
   12880:	ldr	r2, [r3]
   12884:	cmp	r2, #1
   12888:	ldrgt	r2, [r3]
   1288c:	subgt	r2, r2, #1
   12890:	strgt	r2, [r3]
   12894:	bx	lr
   12898:	andeq	sp, r2, r8, ror #2
   1289c:	push	{r4, r5, lr}
   128a0:	mov	r2, #5
   128a4:	sub	sp, sp, #12
   128a8:	mov	r4, r1
   128ac:	mov	r5, r0
   128b0:	ldr	r1, [pc, #40]	; 128e0 <__assert_fail@plt+0x1340>
   128b4:	mov	r0, #0
   128b8:	bl	11288 <dcgettext@plt>
   128bc:	mov	r1, #0
   128c0:	str	r5, [sp]
   128c4:	str	r4, [sp, #4]
   128c8:	mov	r3, r4
   128cc:	mov	r2, r0
   128d0:	mov	r0, r1
   128d4:	bl	11354 <error@plt>
   128d8:	add	sp, sp, #12
   128dc:	pop	{r4, r5, pc}
   128e0:	andeq	sl, r1, r8, asr #22
   128e4:	mov	r2, #5
   128e8:	ldr	r1, [pc, #24]	; 12908 <__assert_fail@plt+0x1368>
   128ec:	push	{r4, lr}
   128f0:	mov	r0, #0
   128f4:	bl	11288 <dcgettext@plt>
   128f8:	mov	r1, #0
   128fc:	mov	r2, r0
   12900:	mov	r0, #1
   12904:	bl	11354 <error@plt>
   12908:	muleq	r1, r8, fp
   1290c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12910:	sub	sp, sp, #28
   12914:	ldr	r5, [pc, #560]	; 12b4c <__assert_fail@plt+0x15ac>
   12918:	ldr	r3, [r5, #4]
   1291c:	cmp	r3, #0
   12920:	beq	12978 <__assert_fail@plt+0x13d8>
   12924:	mov	r7, #0
   12928:	mov	sl, r1
   1292c:	mov	r8, r0
   12930:	mov	r9, r7
   12934:	eor	fp, r0, #1
   12938:	mvn	r6, #0
   1293c:	cmp	sl, r7
   12940:	movhi	r4, #0
   12944:	andls	r4, fp, #1
   12948:	str	r9, [r5]
   1294c:	mov	r2, r4
   12950:	add	r1, sp, #20
   12954:	mov	r0, r6
   12958:	bl	11318 <waitpid@plt>
   1295c:	cmn	r0, #1
   12960:	mov	ip, r0
   12964:	beq	12a68 <__assert_fail@plt+0x14c8>
   12968:	cmp	r0, #0
   1296c:	bne	12980 <__assert_fail@plt+0x13e0>
   12970:	cmp	r4, #0
   12974:	beq	12afc <__assert_fail@plt+0x155c>
   12978:	add	sp, sp, #28
   1297c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12980:	ldr	lr, [r5, #8]
   12984:	cmp	lr, #0
   12988:	beq	1294c <__assert_fail@plt+0x13ac>
   1298c:	ldr	r1, [r5, #12]
   12990:	ldr	r3, [r1]
   12994:	cmp	r0, r3
   12998:	beq	129c4 <__assert_fail@plt+0x1424>
   1299c:	add	r2, r1, #4
   129a0:	mov	r3, #0
   129a4:	add	r3, r3, #1
   129a8:	cmp	r3, lr
   129ac:	beq	1294c <__assert_fail@plt+0x13ac>
   129b0:	mov	r1, r2
   129b4:	add	r2, r2, #4
   129b8:	ldr	r0, [r1]
   129bc:	cmp	ip, r0
   129c0:	bne	129a4 <__assert_fail@plt+0x1404>
   129c4:	str	r9, [r1]
   129c8:	ldr	r1, [sp, #20]
   129cc:	ldr	r3, [r5, #4]
   129d0:	add	r7, r7, #1
   129d4:	asr	r2, r1, #8
   129d8:	sub	r3, r3, #1
   129dc:	uxtb	r2, r2
   129e0:	cmp	r2, #255	; 0xff
   129e4:	str	r3, [r5, #4]
   129e8:	beq	12acc <__assert_fail@plt+0x152c>
   129ec:	uxtb	r3, r1
   129f0:	cmp	r3, #127	; 0x7f
   129f4:	beq	12a94 <__assert_fail@plt+0x14f4>
   129f8:	and	r3, r1, #127	; 0x7f
   129fc:	add	r3, r3, #1
   12a00:	sxtb	r3, r3
   12a04:	cmp	r3, #1
   12a08:	ble	12a44 <__assert_fail@plt+0x14a4>
   12a0c:	mov	r2, #5
   12a10:	ldr	r1, [pc, #312]	; 12b50 <__assert_fail@plt+0x15b0>
   12a14:	mov	r0, r9
   12a18:	bl	11288 <dcgettext@plt>
   12a1c:	ldr	r3, [r5, #20]
   12a20:	ldr	r2, [sp, #20]
   12a24:	mov	r1, r9
   12a28:	and	r2, r2, #127	; 0x7f
   12a2c:	ldr	r3, [r3]
   12a30:	str	r2, [sp]
   12a34:	mov	r2, r0
   12a38:	mov	r0, #125	; 0x7d
   12a3c:	bl	11354 <error@plt>
   12a40:	ldr	r1, [sp, #20]
   12a44:	asr	r1, r1, #8
   12a48:	tst	r1, #255	; 0xff
   12a4c:	movne	r3, #123	; 0x7b
   12a50:	strne	r3, [r5, #60]	; 0x3c
   12a54:	ldr	r3, [r5, #4]
   12a58:	cmp	r3, #0
   12a5c:	bne	1293c <__assert_fail@plt+0x139c>
   12a60:	add	sp, sp, #28
   12a64:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12a68:	bl	11420 <__errno_location@plt>
   12a6c:	ldr	r3, [r0]
   12a70:	cmp	r3, #4
   12a74:	bne	12b24 <__assert_fail@plt+0x1584>
   12a78:	ldr	r3, [r5]
   12a7c:	cmp	r3, #0
   12a80:	movne	r3, r8
   12a84:	orreq	r3, r8, #1
   12a88:	cmp	r3, #0
   12a8c:	moveq	r4, #1
   12a90:	b	1294c <__assert_fail@plt+0x13ac>
   12a94:	mov	r2, #5
   12a98:	ldr	r1, [pc, #180]	; 12b54 <__assert_fail@plt+0x15b4>
   12a9c:	mov	r0, r9
   12aa0:	bl	11288 <dcgettext@plt>
   12aa4:	ldrb	r2, [sp, #21]
   12aa8:	ldr	r3, [r5, #20]
   12aac:	mov	r1, r9
   12ab0:	ldr	r3, [r3]
   12ab4:	str	r2, [sp]
   12ab8:	mov	r2, r0
   12abc:	mov	r0, #125	; 0x7d
   12ac0:	bl	11354 <error@plt>
   12ac4:	ldr	r1, [sp, #20]
   12ac8:	b	129f8 <__assert_fail@plt+0x1458>
   12acc:	mov	r2, #5
   12ad0:	ldr	r1, [pc, #128]	; 12b58 <__assert_fail@plt+0x15b8>
   12ad4:	mov	r0, r9
   12ad8:	bl	11288 <dcgettext@plt>
   12adc:	ldr	r3, [r5, #20]
   12ae0:	mov	r1, r9
   12ae4:	ldr	r3, [r3]
   12ae8:	mov	r2, r0
   12aec:	mov	r0, #124	; 0x7c
   12af0:	bl	11354 <error@plt>
   12af4:	ldr	r1, [sp, #20]
   12af8:	b	129ec <__assert_fail@plt+0x144c>
   12afc:	mov	r2, #5
   12b00:	ldr	r1, [pc, #84]	; 12b5c <__assert_fail@plt+0x15bc>
   12b04:	bl	11288 <dcgettext@plt>
   12b08:	ldr	r3, [r5, #4]
   12b0c:	mov	r1, r4
   12b10:	mov	r2, r0
   12b14:	mov	r0, r4
   12b18:	bl	11354 <error@plt>
   12b1c:	add	sp, sp, #28
   12b20:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12b24:	mov	r2, #5
   12b28:	ldr	r1, [pc, #48]	; 12b60 <__assert_fail@plt+0x15c0>
   12b2c:	mov	r0, #0
   12b30:	str	r3, [sp, #12]
   12b34:	bl	11288 <dcgettext@plt>
   12b38:	ldr	r3, [sp, #12]
   12b3c:	mov	r1, r3
   12b40:	mov	r2, r0
   12b44:	mov	r0, #1
   12b48:	bl	11354 <error@plt>
   12b4c:	andeq	sp, r2, r8, ror #3
   12b50:	andeq	sl, r1, ip, asr #24
   12b54:	andeq	sl, r1, r0, lsr ip
   12b58:	andeq	sl, r1, r8, lsl #24
   12b5c:	ldrdeq	sl, [r1], -ip
   12b60:			; <UNDEFINED> instruction: 0x0001abbc
   12b64:	push	{r4, r5, r6, r7, r8, lr}
   12b68:	mov	r7, r0
   12b6c:	ldr	r6, [pc, #220]	; 12c50 <__assert_fail@plt+0x16b0>
   12b70:	ldr	r5, [r6, #8]
   12b74:	ldr	r0, [r6, #12]
   12b78:	cmp	r5, #0
   12b7c:	moveq	r4, r5
   12b80:	beq	12bc0 <__assert_fail@plt+0x1620>
   12b84:	ldr	r4, [r0]
   12b88:	cmp	r4, #0
   12b8c:	beq	12c34 <__assert_fail@plt+0x1694>
   12b90:	add	r3, r0, #4
   12b94:	mov	r4, #0
   12b98:	b	12bb0 <__assert_fail@plt+0x1610>
   12b9c:	mov	r2, r3
   12ba0:	add	r3, r3, #4
   12ba4:	ldr	r1, [r2]
   12ba8:	cmp	r1, #0
   12bac:	beq	12c14 <__assert_fail@plt+0x1674>
   12bb0:	add	r4, r4, #1
   12bb4:	cmp	r4, r5
   12bb8:	bne	12b9c <__assert_fail@plt+0x15fc>
   12bbc:	lsl	r5, r4, #2
   12bc0:	mov	r2, #4
   12bc4:	ldr	r1, [pc, #136]	; 12c54 <__assert_fail@plt+0x16b4>
   12bc8:	bl	19174 <__assert_fail@plt+0x7bd4>
   12bcc:	ldr	r3, [r6, #8]
   12bd0:	cmp	r3, r4
   12bd4:	str	r0, [r6, #12]
   12bd8:	addls	r2, r0, r5
   12bdc:	ldrls	r3, [r0, r5]
   12be0:	bls	12c0c <__assert_fail@plt+0x166c>
   12be4:	add	r2, r0, r4, lsl #2
   12be8:	mov	r3, r4
   12bec:	mov	ip, #0
   12bf0:	str	ip, [r2], #4
   12bf4:	ldr	r1, [r6, #8]
   12bf8:	add	r3, r3, #1
   12bfc:	cmp	r1, r3
   12c00:	bhi	12bf0 <__assert_fail@plt+0x1650>
   12c04:	ldr	r3, [r0, r5]
   12c08:	add	r2, r0, r5
   12c0c:	cmp	r3, #0
   12c10:	bne	12c3c <__assert_fail@plt+0x169c>
   12c14:	ldr	r3, [r6, #4]
   12c18:	mov	r1, #1
   12c1c:	add	r3, r3, r1
   12c20:	str	r7, [r2]
   12c24:	str	r3, [r6, #4]
   12c28:	strb	r1, [r6, #64]	; 0x40
   12c2c:	mov	r0, r4
   12c30:	pop	{r4, r5, r6, r7, r8, pc}
   12c34:	mov	r2, r0
   12c38:	b	12c14 <__assert_fail@plt+0x1674>
   12c3c:	ldr	r3, [pc, #20]	; 12c58 <__assert_fail@plt+0x16b8>
   12c40:	ldr	r2, [pc, #20]	; 12c5c <__assert_fail@plt+0x16bc>
   12c44:	ldr	r1, [pc, #20]	; 12c60 <__assert_fail@plt+0x16c0>
   12c48:	ldr	r0, [pc, #20]	; 12c64 <__assert_fail@plt+0x16c4>
   12c4c:	bl	115a0 <__assert_fail@plt>
   12c50:	andeq	sp, r2, r8, ror #3
   12c54:	strdeq	sp, [r2], -r0
   12c58:	andeq	sl, r1, r0, ror #19
   12c5c:	andeq	r0, r0, r5, asr #11
   12c60:	andeq	sl, r1, r8, ror #24
   12c64:	andeq	sl, r1, r0, ror ip
   12c68:	subs	r4, r0, #0
   12c6c:	push	{r7, lr}
   12c70:	beq	12ca8 <__assert_fail@plt+0x1708>
   12c74:	ldr	r3, [pc, #656]	; 12f0c <__assert_fail@plt+0x196c>
   12c78:	mov	r2, #5
   12c7c:	ldr	r1, [pc, #652]	; 12f10 <__assert_fail@plt+0x1970>
   12c80:	mov	r0, #0
   12c84:	ldr	r5, [r3]
   12c88:	bl	11288 <dcgettext@plt>
   12c8c:	ldr	r3, [pc, #640]	; 12f14 <__assert_fail@plt+0x1974>
   12c90:	ldr	r2, [r3]
   12c94:	mov	r1, r0
   12c98:	mov	r0, r5
   12c9c:	bl	11414 <fprintf@plt>
   12ca0:	mov	r0, r4
   12ca4:	bl	113d8 <exit@plt>
   12ca8:	ldr	r5, [pc, #616]	; 12f18 <__assert_fail@plt+0x1978>
   12cac:	mov	r2, #5
   12cb0:	ldr	r1, [pc, #612]	; 12f1c <__assert_fail@plt+0x197c>
   12cb4:	ldr	r7, [r5]
   12cb8:	bl	11288 <dcgettext@plt>
   12cbc:	ldr	r6, [pc, #592]	; 12f14 <__assert_fail@plt+0x1974>
   12cc0:	ldr	r2, [r6]
   12cc4:	mov	r1, r0
   12cc8:	mov	r0, r7
   12ccc:	bl	11414 <fprintf@plt>
   12cd0:	mov	r2, #5
   12cd4:	ldr	r1, [pc, #580]	; 12f20 <__assert_fail@plt+0x1980>
   12cd8:	mov	r0, r4
   12cdc:	bl	11288 <dcgettext@plt>
   12ce0:	ldr	r1, [r5]
   12ce4:	bl	11558 <fputs@plt>
   12ce8:	mov	r2, #5
   12cec:	ldr	r1, [pc, #560]	; 12f24 <__assert_fail@plt+0x1984>
   12cf0:	mov	r0, r4
   12cf4:	bl	11288 <dcgettext@plt>
   12cf8:	ldr	r1, [r5]
   12cfc:	bl	11558 <fputs@plt>
   12d00:	mov	r2, #5
   12d04:	ldr	r1, [pc, #540]	; 12f28 <__assert_fail@plt+0x1988>
   12d08:	mov	r0, r4
   12d0c:	bl	11288 <dcgettext@plt>
   12d10:	ldr	r1, [r5]
   12d14:	bl	11558 <fputs@plt>
   12d18:	mov	r2, #5
   12d1c:	ldr	r1, [pc, #520]	; 12f2c <__assert_fail@plt+0x198c>
   12d20:	mov	r0, r4
   12d24:	bl	11288 <dcgettext@plt>
   12d28:	ldr	r1, [r5]
   12d2c:	bl	11558 <fputs@plt>
   12d30:	mov	r2, #5
   12d34:	ldr	r1, [pc, #500]	; 12f30 <__assert_fail@plt+0x1990>
   12d38:	mov	r0, r4
   12d3c:	bl	11288 <dcgettext@plt>
   12d40:	ldr	r1, [r5]
   12d44:	bl	11558 <fputs@plt>
   12d48:	mov	r2, #5
   12d4c:	ldr	r1, [pc, #480]	; 12f34 <__assert_fail@plt+0x1994>
   12d50:	mov	r0, r4
   12d54:	bl	11288 <dcgettext@plt>
   12d58:	ldr	r1, [r5]
   12d5c:	bl	11558 <fputs@plt>
   12d60:	mov	r2, #5
   12d64:	ldr	r1, [pc, #460]	; 12f38 <__assert_fail@plt+0x1998>
   12d68:	mov	r0, r4
   12d6c:	bl	11288 <dcgettext@plt>
   12d70:	ldr	r1, [r5]
   12d74:	bl	11558 <fputs@plt>
   12d78:	mov	r2, #5
   12d7c:	ldr	r1, [pc, #440]	; 12f3c <__assert_fail@plt+0x199c>
   12d80:	mov	r0, r4
   12d84:	bl	11288 <dcgettext@plt>
   12d88:	ldr	r1, [r5]
   12d8c:	bl	11558 <fputs@plt>
   12d90:	mov	r2, #5
   12d94:	ldr	r1, [pc, #420]	; 12f40 <__assert_fail@plt+0x19a0>
   12d98:	mov	r0, r4
   12d9c:	bl	11288 <dcgettext@plt>
   12da0:	ldr	r1, [r5]
   12da4:	bl	11558 <fputs@plt>
   12da8:	mov	r2, #5
   12dac:	ldr	r1, [pc, #400]	; 12f44 <__assert_fail@plt+0x19a4>
   12db0:	mov	r0, r4
   12db4:	bl	11288 <dcgettext@plt>
   12db8:	ldr	r1, [r5]
   12dbc:	bl	11558 <fputs@plt>
   12dc0:	mov	r2, #5
   12dc4:	ldr	r1, [pc, #380]	; 12f48 <__assert_fail@plt+0x19a8>
   12dc8:	mov	r0, r4
   12dcc:	bl	11288 <dcgettext@plt>
   12dd0:	ldr	r1, [r5]
   12dd4:	bl	11558 <fputs@plt>
   12dd8:	mov	r2, #5
   12ddc:	ldr	r1, [pc, #360]	; 12f4c <__assert_fail@plt+0x19ac>
   12de0:	mov	r0, r4
   12de4:	bl	11288 <dcgettext@plt>
   12de8:	ldr	r1, [r5]
   12dec:	bl	11558 <fputs@plt>
   12df0:	mov	r2, #5
   12df4:	ldr	r1, [pc, #340]	; 12f50 <__assert_fail@plt+0x19b0>
   12df8:	mov	r0, r4
   12dfc:	bl	11288 <dcgettext@plt>
   12e00:	ldr	r1, [r5]
   12e04:	bl	11558 <fputs@plt>
   12e08:	mov	r2, #5
   12e0c:	ldr	r1, [pc, #320]	; 12f54 <__assert_fail@plt+0x19b4>
   12e10:	mov	r0, r4
   12e14:	bl	11288 <dcgettext@plt>
   12e18:	ldr	r1, [r5]
   12e1c:	bl	11558 <fputs@plt>
   12e20:	mov	r2, #5
   12e24:	ldr	r1, [pc, #300]	; 12f58 <__assert_fail@plt+0x19b8>
   12e28:	mov	r0, r4
   12e2c:	bl	11288 <dcgettext@plt>
   12e30:	ldr	r1, [r5]
   12e34:	bl	11558 <fputs@plt>
   12e38:	mov	r2, #5
   12e3c:	ldr	r1, [pc, #280]	; 12f5c <__assert_fail@plt+0x19bc>
   12e40:	mov	r0, r4
   12e44:	bl	11288 <dcgettext@plt>
   12e48:	ldr	r1, [r5]
   12e4c:	bl	11558 <fputs@plt>
   12e50:	mov	r2, #5
   12e54:	ldr	r1, [pc, #260]	; 12f60 <__assert_fail@plt+0x19c0>
   12e58:	mov	r0, r4
   12e5c:	bl	11288 <dcgettext@plt>
   12e60:	ldr	r1, [r5]
   12e64:	bl	11558 <fputs@plt>
   12e68:	mov	r2, #5
   12e6c:	ldr	r1, [pc, #240]	; 12f64 <__assert_fail@plt+0x19c4>
   12e70:	mov	r0, r4
   12e74:	bl	11288 <dcgettext@plt>
   12e78:	ldr	r1, [r5]
   12e7c:	bl	11558 <fputs@plt>
   12e80:	mov	r2, #5
   12e84:	ldr	r1, [pc, #220]	; 12f68 <__assert_fail@plt+0x19c8>
   12e88:	mov	r0, r4
   12e8c:	bl	11288 <dcgettext@plt>
   12e90:	ldr	r1, [r5]
   12e94:	bl	11558 <fputs@plt>
   12e98:	mov	r2, #5
   12e9c:	ldr	r1, [pc, #200]	; 12f6c <__assert_fail@plt+0x19cc>
   12ea0:	mov	r0, r4
   12ea4:	bl	11288 <dcgettext@plt>
   12ea8:	ldr	r1, [r5]
   12eac:	bl	11558 <fputs@plt>
   12eb0:	mov	r2, #5
   12eb4:	ldr	r1, [pc, #180]	; 12f70 <__assert_fail@plt+0x19d0>
   12eb8:	mov	r0, r4
   12ebc:	bl	11288 <dcgettext@plt>
   12ec0:	ldr	r1, [r5]
   12ec4:	bl	11558 <fputs@plt>
   12ec8:	mov	r2, #5
   12ecc:	ldr	r1, [pc, #160]	; 12f74 <__assert_fail@plt+0x19d4>
   12ed0:	mov	r0, r4
   12ed4:	bl	11288 <dcgettext@plt>
   12ed8:	ldr	r1, [r5]
   12edc:	bl	11558 <fputs@plt>
   12ee0:	mov	r2, #5
   12ee4:	ldr	r1, [pc, #140]	; 12f78 <__assert_fail@plt+0x19d8>
   12ee8:	mov	r0, r4
   12eec:	bl	11288 <dcgettext@plt>
   12ef0:	ldr	r1, [r5]
   12ef4:	bl	11558 <fputs@plt>
   12ef8:	ldr	r1, [r6]
   12efc:	ldr	r0, [r5]
   12f00:	bl	1513c <__assert_fail@plt+0x3b9c>
   12f04:	mov	r0, r4
   12f08:	bl	113d8 <exit@plt>
   12f0c:	ldrdeq	sp, [r2], -r0
   12f10:	andeq	sl, r1, r0, lsl #25
   12f14:			; <UNDEFINED> instruction: 0x0002d2b4
   12f18:	ldrdeq	sp, [r2], -ip
   12f1c:	andeq	sl, r1, r8, lsr #25
   12f20:	ldrdeq	sl, [r1], -ip
   12f24:	andeq	sl, r1, ip, lsr #26
   12f28:	andeq	sl, r1, r4, lsr #27
   12f2c:	andeq	sl, r1, r8, ror lr
   12f30:	andeq	sl, r1, r8, asr #29
   12f34:			; <UNDEFINED> instruction: 0x0001afb4
   12f38:	muleq	r1, r8, r0
   12f3c:	andeq	fp, r1, r0, lsr r1
   12f40:	andeq	fp, r1, r4, ror #2
   12f44:	andeq	fp, r1, r8, lsr r2
   12f48:			; <UNDEFINED> instruction: 0x0001b2b8
   12f4c:	andeq	fp, r1, r8, asr r3
   12f50:	andeq	fp, r1, r8, lsr #7
   12f54:	andeq	fp, r1, r0, lsl #9
   12f58:	andeq	fp, r1, ip, asr #9
   12f5c:	andeq	fp, r1, ip, lsl #10
   12f60:	andeq	fp, r1, ip, asr r5
   12f64:	andeq	fp, r1, r4, lsr r6
   12f68:	andeq	fp, r1, r0, lsl #13
   12f6c:	andeq	fp, r1, r4, asr #13
   12f70:	andeq	fp, r1, ip, lsl #14
   12f74:	andeq	fp, r1, r4, asr r7
   12f78:	muleq	r1, r0, r7
   12f7c:	push	{r4, r5, r6, r7, lr}
   12f80:	sub	sp, sp, #20
   12f84:	mov	r7, r1
   12f88:	mov	r5, r2
   12f8c:	add	r1, sp, #12
   12f90:	mov	r2, #10
   12f94:	mov	r4, r3
   12f98:	mov	r6, r0
   12f9c:	bl	111ec <strtol@plt>
   12fa0:	ldr	r3, [sp, #12]
   12fa4:	cmp	r6, r3
   12fa8:	beq	13074 <__assert_fail@plt+0x1ad4>
   12fac:	ldrb	r3, [r3]
   12fb0:	cmp	r3, #0
   12fb4:	bne	13074 <__assert_fail@plt+0x1ad4>
   12fb8:	cmp	r0, r5
   12fbc:	blt	13024 <__assert_fail@plt+0x1a84>
   12fc0:	cmp	r4, #0
   12fc4:	cmpge	r0, r4
   12fc8:	bgt	12fd4 <__assert_fail@plt+0x1a34>
   12fcc:	add	sp, sp, #20
   12fd0:	pop	{r4, r5, r6, r7, pc}
   12fd4:	ldr	ip, [pc, #212]	; 130b0 <__assert_fail@plt+0x1b10>
   12fd8:	mov	r0, r3
   12fdc:	mov	r2, #5
   12fe0:	ldr	r1, [pc, #204]	; 130b4 <__assert_fail@plt+0x1b14>
   12fe4:	ldr	r5, [ip]
   12fe8:	bl	11288 <dcgettext@plt>
   12fec:	ldr	r3, [pc, #196]	; 130b8 <__assert_fail@plt+0x1b18>
   12ff0:	str	r4, [sp, #4]
   12ff4:	str	r7, [sp]
   12ff8:	ldr	r2, [r3]
   12ffc:	mov	r3, r6
   13000:	mov	r1, r0
   13004:	mov	r0, r5
   13008:	bl	11414 <fprintf@plt>
   1300c:	ldr	r3, [sp, #40]	; 0x28
   13010:	cmp	r3, #0
   13014:	bne	1306c <__assert_fail@plt+0x1acc>
   13018:	mov	r0, r4
   1301c:	add	sp, sp, #20
   13020:	pop	{r4, r5, r6, r7, pc}
   13024:	ldr	ip, [pc, #132]	; 130b0 <__assert_fail@plt+0x1b10>
   13028:	mov	r0, r3
   1302c:	mov	r2, #5
   13030:	ldr	r1, [pc, #132]	; 130bc <__assert_fail@plt+0x1b1c>
   13034:	ldr	r4, [ip]
   13038:	bl	11288 <dcgettext@plt>
   1303c:	ldr	r3, [pc, #116]	; 130b8 <__assert_fail@plt+0x1b18>
   13040:	str	r5, [sp, #4]
   13044:	str	r7, [sp]
   13048:	ldr	r2, [r3]
   1304c:	mov	r3, r6
   13050:	mov	r1, r0
   13054:	mov	r0, r4
   13058:	bl	11414 <fprintf@plt>
   1305c:	ldr	r3, [sp, #40]	; 0x28
   13060:	cmp	r3, #0
   13064:	moveq	r0, r5
   13068:	beq	12fcc <__assert_fail@plt+0x1a2c>
   1306c:	mov	r0, #1
   13070:	bl	12c68 <__assert_fail@plt+0x16c8>
   13074:	ldr	r3, [pc, #52]	; 130b0 <__assert_fail@plt+0x1b10>
   13078:	mov	r2, #5
   1307c:	ldr	r1, [pc, #60]	; 130c0 <__assert_fail@plt+0x1b20>
   13080:	mov	r0, #0
   13084:	ldr	r4, [r3]
   13088:	bl	11288 <dcgettext@plt>
   1308c:	ldr	r2, [pc, #36]	; 130b8 <__assert_fail@plt+0x1b18>
   13090:	str	r7, [sp]
   13094:	mov	r3, r6
   13098:	ldr	r2, [r2]
   1309c:	mov	r1, r0
   130a0:	mov	r0, r4
   130a4:	bl	11414 <fprintf@plt>
   130a8:	mov	r0, #1
   130ac:	bl	12c68 <__assert_fail@plt+0x16c8>
   130b0:	ldrdeq	sp, [r2], -r0
   130b4:	andeq	fp, r1, r0, lsr r8
   130b8:			; <UNDEFINED> instruction: 0x0002d2b4
   130bc:	andeq	fp, r1, r0, lsl #16
   130c0:	ldrdeq	fp, [r1], -r8
   130c4:	push	{r4, r5, r6, lr}
   130c8:	mov	r1, #0
   130cc:	bl	14dd4 <__assert_fail@plt+0x3834>
   130d0:	subs	r5, r0, #0
   130d4:	blt	130f0 <__assert_fail@plt+0x1b50>
   130d8:	ldr	r1, [pc, #52]	; 13114 <__assert_fail@plt+0x1b74>
   130dc:	bl	111bc <fdopen@plt>
   130e0:	subs	r4, r0, #0
   130e4:	beq	130f8 <__assert_fail@plt+0x1b58>
   130e8:	mov	r0, r4
   130ec:	pop	{r4, r5, r6, pc}
   130f0:	mov	r4, #0
   130f4:	b	130e8 <__assert_fail@plt+0x1b48>
   130f8:	bl	11420 <__errno_location@plt>
   130fc:	mov	r6, r0
   13100:	mov	r0, r5
   13104:	ldr	r5, [r6]
   13108:	bl	11588 <close@plt>
   1310c:	str	r5, [r6]
   13110:	b	130e8 <__assert_fail@plt+0x1b48>
   13114:	muleq	r1, r0, pc	; <UNPREDICTABLE>
   13118:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1311c:	sub	sp, sp, #12
   13120:	ldr	r5, [pc, #404]	; 132bc <__assert_fail@plt+0x1d1c>
   13124:	str	r0, [sp, #4]
   13128:	ldr	r3, [r5, #16]
   1312c:	cmp	r3, #1
   13130:	beq	1319c <__assert_fail@plt+0x1bfc>
   13134:	ldr	fp, [pc, #388]	; 132c0 <__assert_fail@plt+0x1d20>
   13138:	ldr	sl, [pc, #388]	; 132c4 <__assert_fail@plt+0x1d24>
   1313c:	ldr	r9, [pc, #388]	; 132c8 <__assert_fail@plt+0x1d28>
   13140:	ldr	r8, [pc, #388]	; 132cc <__assert_fail@plt+0x1d2c>
   13144:	mov	r4, #0
   13148:	ldr	r3, [r5, #20]
   1314c:	cmp	r4, #0
   13150:	mov	r1, #3
   13154:	ldr	r2, [r3, r4, lsl #2]
   13158:	mov	r0, #0
   1315c:	moveq	r7, sl
   13160:	movne	r7, r9
   13164:	ldr	r6, [fp]
   13168:	bl	187d8 <__assert_fail@plt+0x7238>
   1316c:	mov	r2, r7
   13170:	mov	r1, r8
   13174:	mov	r3, r0
   13178:	mov	r0, r6
   1317c:	bl	11414 <fprintf@plt>
   13180:	cmp	r0, #0
   13184:	blt	13284 <__assert_fail@plt+0x1ce4>
   13188:	ldr	r3, [r5, #16]
   1318c:	add	r4, r4, #1
   13190:	sub	r3, r3, #1
   13194:	cmp	r3, r4
   13198:	bhi	13148 <__assert_fail@plt+0x1ba8>
   1319c:	ldr	r3, [sp, #4]
   131a0:	cmp	r3, #0
   131a4:	beq	13228 <__assert_fail@plt+0x1c88>
   131a8:	ldr	r3, [r5, #68]	; 0x44
   131ac:	cmp	r3, #0
   131b0:	beq	13244 <__assert_fail@plt+0x1ca4>
   131b4:	ldr	r4, [pc, #260]	; 132c0 <__assert_fail@plt+0x1d20>
   131b8:	mov	r2, #4
   131bc:	mov	r1, #1
   131c0:	ldr	r3, [r4]
   131c4:	ldr	r0, [pc, #260]	; 132d0 <__assert_fail@plt+0x1d30>
   131c8:	bl	11300 <fwrite@plt>
   131cc:	ldr	r0, [r4]
   131d0:	bl	19da4 <__assert_fail@plt+0x8804>
   131d4:	cmp	r0, #0
   131d8:	bne	13284 <__assert_fail@plt+0x1ce4>
   131dc:	ldr	r0, [r5, #68]	; 0x44
   131e0:	bl	1157c <getc@plt>
   131e4:	cmp	r0, #10
   131e8:	cmnne	r0, #1
   131ec:	mov	r4, r0
   131f0:	beq	13208 <__assert_fail@plt+0x1c68>
   131f4:	ldr	r0, [r5, #68]	; 0x44
   131f8:	bl	1157c <getc@plt>
   131fc:	cmp	r0, #10
   13200:	cmnne	r0, #1
   13204:	bne	131f4 <__assert_fail@plt+0x1c54>
   13208:	cmn	r0, #1
   1320c:	beq	132ac <__assert_fail@plt+0x1d0c>
   13210:	bic	r0, r4, #32
   13214:	sub	r0, r0, #89	; 0x59
   13218:	clz	r0, r0
   1321c:	lsr	r0, r0, #5
   13220:	add	sp, sp, #12
   13224:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13228:	ldr	r3, [pc, #144]	; 132c0 <__assert_fail@plt+0x1d20>
   1322c:	mov	r0, #10
   13230:	ldr	r1, [r3]
   13234:	bl	1151c <putc@plt>
   13238:	ldr	r0, [sp, #4]
   1323c:	add	sp, sp, #12
   13240:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13244:	ldr	r0, [pc, #136]	; 132d4 <__assert_fail@plt+0x1d34>
   13248:	bl	130c4 <__assert_fail@plt+0x1b24>
   1324c:	cmp	r0, #0
   13250:	mov	r4, r0
   13254:	str	r0, [r5, #68]	; 0x44
   13258:	bne	131b4 <__assert_fail@plt+0x1c14>
   1325c:	bl	11420 <__errno_location@plt>
   13260:	mov	r2, #5
   13264:	ldr	r1, [pc, #108]	; 132d8 <__assert_fail@plt+0x1d38>
   13268:	ldr	r5, [r0]
   1326c:	mov	r0, r4
   13270:	bl	11288 <dcgettext@plt>
   13274:	mov	r1, r5
   13278:	mov	r2, r0
   1327c:	mov	r0, #1
   13280:	bl	11354 <error@plt>
   13284:	bl	11420 <__errno_location@plt>
   13288:	ldr	r1, [pc, #76]	; 132dc <__assert_fail@plt+0x1d3c>
   1328c:	mov	r2, #5
   13290:	ldr	r4, [r0]
   13294:	mov	r0, #0
   13298:	bl	11288 <dcgettext@plt>
   1329c:	mov	r1, r4
   132a0:	mov	r2, r0
   132a4:	mov	r0, #1
   132a8:	bl	11354 <error@plt>
   132ac:	bl	11420 <__errno_location@plt>
   132b0:	mov	r2, #5
   132b4:	ldr	r1, [pc, #36]	; 132e0 <__assert_fail@plt+0x1d40>
   132b8:	b	13290 <__assert_fail@plt+0x1cf0>
   132bc:	andeq	sp, r2, r8, ror #3
   132c0:	ldrdeq	sp, [r2], -r0
   132c4:	ldrdeq	fp, [r1], -r4
   132c8:	andeq	fp, r1, r0, ror #16
   132cc:	andeq	fp, r1, r4, ror #16
   132d0:			; <UNDEFINED> instruction: 0x0001b8b8
   132d4:	andeq	fp, r1, r8, lsl #17
   132d8:	muleq	r1, r4, r8
   132dc:	andeq	fp, r1, ip, ror #16
   132e0:	andeq	fp, r1, r0, asr #17
   132e4:	push	{r4, r5, r6, r7, r8, r9, lr}
   132e8:	mov	r8, r3
   132ec:	ldr	r5, [pc, #1108]	; 13748 <__assert_fail@plt+0x21a8>
   132f0:	sub	sp, sp, #36	; 0x24
   132f4:	ldr	r4, [pc, #1104]	; 1374c <__assert_fail@plt+0x21ac>
   132f8:	ldr	r3, [r5]
   132fc:	cmp	r3, #0
   13300:	beq	13338 <__assert_fail@plt+0x1d98>
   13304:	ldr	r3, [r5]
   13308:	ldr	r2, [r4, #4]
   1330c:	cmp	r2, r3
   13310:	bcc	13338 <__assert_fail@plt+0x1d98>
   13314:	mov	r7, #1
   13318:	mov	r6, #0
   1331c:	mov	r1, r7
   13320:	mov	r0, r6
   13324:	bl	1290c <__assert_fail@plt+0x136c>
   13328:	ldr	r3, [r5]
   1332c:	ldr	r2, [r4, #4]
   13330:	cmp	r2, r3
   13334:	bcs	1331c <__assert_fail@plt+0x1d7c>
   13338:	ldrb	r3, [r4, #72]	; 0x48
   1333c:	cmp	r3, #0
   13340:	bne	13574 <__assert_fail@plt+0x1fd4>
   13344:	ldrb	r3, [r4, #73]	; 0x49
   13348:	cmp	r3, #0
   1334c:	bne	13608 <__assert_fail@plt+0x2068>
   13350:	mov	r1, #0
   13354:	mov	r0, r1
   13358:	bl	1290c <__assert_fail@plt+0x136c>
   1335c:	add	r0, sp, #4
   13360:	bl	18b6c <__assert_fail@plt+0x75cc>
   13364:	subs	r9, r0, #0
   13368:	bne	136fc <__assert_fail@plt+0x215c>
   1336c:	mov	r2, #1
   13370:	mov	r1, #2
   13374:	ldr	r0, [sp, #8]
   13378:	bl	19bd0 <__assert_fail@plt+0x8630>
   1337c:	mov	r7, #1
   13380:	mov	r6, r9
   13384:	b	133b0 <__assert_fail@plt+0x1e10>
   13388:	bl	11420 <__errno_location@plt>
   1338c:	ldr	r3, [r0]
   13390:	cmp	r3, #11
   13394:	bne	133bc <__assert_fail@plt+0x1e1c>
   13398:	ldr	r3, [r4, #4]
   1339c:	cmp	r3, #0
   133a0:	beq	133bc <__assert_fail@plt+0x1e1c>
   133a4:	mov	r1, r7
   133a8:	mov	r0, r6
   133ac:	bl	1290c <__assert_fail@plt+0x136c>
   133b0:	bl	114d4 <fork@plt>
   133b4:	subs	r5, r0, #0
   133b8:	blt	13388 <__assert_fail@plt+0x1de8>
   133bc:	cmn	r5, #1
   133c0:	beq	1354c <__assert_fail@plt+0x1fac>
   133c4:	cmp	r5, #0
   133c8:	bne	134ec <__assert_fail@plt+0x1f4c>
   133cc:	ldr	r0, [sp, #4]
   133d0:	bl	11588 <close@plt>
   133d4:	str	r5, [r4, #60]	; 0x3c
   133d8:	bl	14eb0 <__assert_fail@plt+0x3910>
   133dc:	cmp	r0, #0
   133e0:	bne	13630 <__assert_fail@plt+0x2090>
   133e4:	mov	r0, #0
   133e8:	bl	12b64 <__assert_fail@plt+0x15c4>
   133ec:	ldr	r2, [pc, #860]	; 13750 <__assert_fail@plt+0x21b0>
   133f0:	mov	r1, #19
   133f4:	mov	r3, r0
   133f8:	add	r0, sp, #12
   133fc:	bl	1142c <snprintf@plt>
   13400:	cmp	r0, #19
   13404:	bhi	1370c <__assert_fail@plt+0x216c>
   13408:	ldr	r6, [r4, #76]	; 0x4c
   1340c:	cmp	r6, #0
   13410:	beq	1342c <__assert_fail@plt+0x1e8c>
   13414:	add	r1, sp, #12
   13418:	mov	r2, #1
   1341c:	mov	r0, r6
   13420:	bl	11408 <setenv@plt>
   13424:	cmp	r0, #0
   13428:	blt	136b0 <__assert_fail@plt+0x2110>
   1342c:	bl	11420 <__errno_location@plt>
   13430:	mov	r5, r0
   13434:	ldr	r3, [r4, #80]	; 0x50
   13438:	cmp	r3, #0
   1343c:	bne	13594 <__assert_fail@plt+0x1ff4>
   13440:	ldrb	r2, [r4, #84]	; 0x54
   13444:	ldr	r3, [pc, #776]	; 13754 <__assert_fail@plt+0x21b4>
   13448:	ldr	r6, [pc, #776]	; 13758 <__assert_fail@plt+0x21b8>
   1344c:	cmp	r2, #0
   13450:	movne	r6, r3
   13454:	mov	r0, #0
   13458:	bl	11588 <close@plt>
   1345c:	mov	r1, #0
   13460:	mov	r0, r6
   13464:	bl	1560c <__assert_fail@plt+0x406c>
   13468:	subs	r7, r0, #0
   1346c:	blt	13678 <__assert_fail@plt+0x20d8>
   13470:	beq	1348c <__assert_fail@plt+0x1eec>
   13474:	mov	r1, #0
   13478:	bl	112a0 <dup2@plt>
   1347c:	cmp	r0, #0
   13480:	bne	136ec <__assert_fail@plt+0x214c>
   13484:	mov	r0, r7
   13488:	bl	11588 <close@plt>
   1348c:	mov	r0, r8
   13490:	bl	149f4 <__assert_fail@plt+0x3454>
   13494:	cmp	r0, #0
   13498:	beq	13614 <__assert_fail@plt+0x2074>
   1349c:	mov	r3, #7
   134a0:	str	r3, [r5]
   134a4:	mov	r2, #4
   134a8:	mov	r1, r5
   134ac:	ldr	r0, [sp, #8]
   134b0:	bl	1145c <write@plt>
   134b4:	ldr	r0, [sp, #8]
   134b8:	bl	11588 <close@plt>
   134bc:	ldr	r1, [r5]
   134c0:	cmp	r1, #7
   134c4:	beq	13600 <__assert_fail@plt+0x2060>
   134c8:	ldr	r3, [r8]
   134cc:	mov	r0, #0
   134d0:	ldr	r2, [pc, #644]	; 1375c <__assert_fail@plt+0x21bc>
   134d4:	bl	11354 <error@plt>
   134d8:	ldr	r3, [r5]
   134dc:	cmp	r3, #2
   134e0:	moveq	r0, #127	; 0x7f
   134e4:	bne	13600 <__assert_fail@plt+0x2060>
   134e8:	bl	11240 <_exit@plt>
   134ec:	ldr	r0, [sp, #8]
   134f0:	bl	11588 <close@plt>
   134f4:	mov	r2, #4
   134f8:	mov	r1, sp
   134fc:	ldr	r0, [sp, #4]
   13500:	bl	18a9c <__assert_fail@plt+0x74fc>
   13504:	cmp	r0, #4
   13508:	mov	r4, r0
   1350c:	beq	13638 <__assert_fail@plt+0x2098>
   13510:	cmn	r0, #1
   13514:	beq	135b8 <__assert_fail@plt+0x2018>
   13518:	cmp	r0, #0
   1351c:	beq	1366c <__assert_fail@plt+0x20cc>
   13520:	bl	11420 <__errno_location@plt>
   13524:	mov	r2, #5
   13528:	ldr	r1, [pc, #560]	; 13760 <__assert_fail@plt+0x21c0>
   1352c:	ldr	r5, [r0]
   13530:	mov	r0, #0
   13534:	bl	11288 <dcgettext@plt>
   13538:	mov	r3, r4
   1353c:	mov	r1, r5
   13540:	mov	r2, r0
   13544:	mov	r0, #1
   13548:	bl	11354 <error@plt>
   1354c:	bl	11420 <__errno_location@plt>
   13550:	ldr	r1, [pc, #524]	; 13764 <__assert_fail@plt+0x21c4>
   13554:	mov	r2, #5
   13558:	ldr	r4, [r0]
   1355c:	mov	r0, #0
   13560:	bl	11288 <dcgettext@plt>
   13564:	mov	r1, r4
   13568:	mov	r2, r0
   1356c:	mov	r0, #1
   13570:	bl	11354 <error@plt>
   13574:	mov	r0, #1
   13578:	bl	13118 <__assert_fail@plt+0x1b78>
   1357c:	cmp	r0, #0
   13580:	beq	135a8 <__assert_fail@plt+0x2008>
   13584:	ldrb	r3, [r4, #72]	; 0x48
   13588:	cmp	r3, #0
   1358c:	bne	13350 <__assert_fail@plt+0x1db0>
   13590:	b	13344 <__assert_fail@plt+0x1da4>
   13594:	ldrb	r3, [r4, #84]	; 0x54
   13598:	cmp	r3, #0
   1359c:	beq	1348c <__assert_fail@plt+0x1eec>
   135a0:	ldr	r6, [pc, #428]	; 13754 <__assert_fail@plt+0x21b4>
   135a4:	b	13454 <__assert_fail@plt+0x1eb4>
   135a8:	mov	r9, #1
   135ac:	mov	r0, r9
   135b0:	add	sp, sp, #36	; 0x24
   135b4:	pop	{r4, r5, r6, r7, r8, r9, pc}
   135b8:	ldr	r0, [sp, #4]
   135bc:	bl	11588 <close@plt>
   135c0:	bl	11420 <__errno_location@plt>
   135c4:	mov	r2, #5
   135c8:	ldr	r1, [pc, #408]	; 13768 <__assert_fail@plt+0x21c8>
   135cc:	ldr	r4, [r0]
   135d0:	mov	r0, #0
   135d4:	bl	11288 <dcgettext@plt>
   135d8:	mov	r1, r4
   135dc:	mov	r2, r0
   135e0:	mov	r0, #0
   135e4:	bl	11354 <error@plt>
   135e8:	ldr	r0, [sp, #4]
   135ec:	bl	11588 <close@plt>
   135f0:	mov	r9, #1
   135f4:	mov	r0, r9
   135f8:	add	sp, sp, #36	; 0x24
   135fc:	pop	{r4, r5, r6, r7, r8, r9, pc}
   13600:	mov	r0, #126	; 0x7e
   13604:	b	134e8 <__assert_fail@plt+0x1f48>
   13608:	mov	r0, #0
   1360c:	bl	13118 <__assert_fail@plt+0x1b78>
   13610:	b	13350 <__assert_fail@plt+0x1db0>
   13614:	mov	r1, r8
   13618:	ldr	r0, [r8]
   1361c:	bl	11258 <execvp@plt>
   13620:	ldr	r3, [r5]
   13624:	cmp	r3, #0
   13628:	beq	134b4 <__assert_fail@plt+0x1f14>
   1362c:	b	134a4 <__assert_fail@plt+0x1f04>
   13630:	bl	14ecc <__assert_fail@plt+0x392c>
   13634:	b	133e4 <__assert_fail@plt+0x1e44>
   13638:	ldr	r0, [sp, #4]
   1363c:	bl	11588 <close@plt>
   13640:	mov	r0, r5
   13644:	mov	r2, #0
   13648:	add	r1, sp, #12
   1364c:	bl	11318 <waitpid@plt>
   13650:	ldr	r3, [sp]
   13654:	cmp	r3, #7
   13658:	beq	135ac <__assert_fail@plt+0x200c>
   1365c:	cmp	r3, #2
   13660:	beq	136e4 <__assert_fail@plt+0x2144>
   13664:	mov	r0, #126	; 0x7e
   13668:	bl	113d8 <exit@plt>
   1366c:	mov	r0, r5
   13670:	bl	12b64 <__assert_fail@plt+0x15c4>
   13674:	b	135e8 <__assert_fail@plt+0x2048>
   13678:	ldrb	r4, [r4, #84]	; 0x54
   1367c:	cmp	r4, #0
   13680:	bne	13720 <__assert_fail@plt+0x2180>
   13684:	mov	r2, r6
   13688:	mov	r1, #8
   1368c:	mov	r0, r4
   13690:	ldr	r7, [r5]
   13694:	bl	187d8 <__assert_fail@plt+0x7238>
   13698:	mov	r1, r7
   1369c:	ldr	r2, [pc, #184]	; 1375c <__assert_fail@plt+0x21bc>
   136a0:	mov	r3, r0
   136a4:	mov	r0, r4
   136a8:	bl	11354 <error@plt>
   136ac:	b	1348c <__assert_fail@plt+0x1eec>
   136b0:	bl	11420 <__errno_location@plt>
   136b4:	mov	r2, #5
   136b8:	ldr	r1, [pc, #172]	; 1376c <__assert_fail@plt+0x21cc>
   136bc:	ldr	r7, [r0]
   136c0:	mov	r5, r0
   136c4:	mov	r0, #0
   136c8:	bl	11288 <dcgettext@plt>
   136cc:	mov	r3, r6
   136d0:	mov	r1, r7
   136d4:	mov	r2, r0
   136d8:	mov	r0, #0
   136dc:	bl	11354 <error@plt>
   136e0:	b	13434 <__assert_fail@plt+0x1e94>
   136e4:	mov	r0, #127	; 0x7f
   136e8:	bl	113d8 <exit@plt>
   136ec:	ldr	r4, [r5]
   136f0:	mov	r2, #5
   136f4:	ldr	r1, [pc, #116]	; 13770 <__assert_fail@plt+0x21d0>
   136f8:	b	1355c <__assert_fail@plt+0x1fbc>
   136fc:	bl	11420 <__errno_location@plt>
   13700:	mov	r2, #5
   13704:	ldr	r1, [pc, #104]	; 13774 <__assert_fail@plt+0x21d4>
   13708:	b	13558 <__assert_fail@plt+0x1fb8>
   1370c:	ldr	r3, [pc, #100]	; 13778 <__assert_fail@plt+0x21d8>
   13710:	ldr	r2, [pc, #100]	; 1377c <__assert_fail@plt+0x21dc>
   13714:	ldr	r1, [pc, #100]	; 13780 <__assert_fail@plt+0x21e0>
   13718:	ldr	r0, [pc, #100]	; 13784 <__assert_fail@plt+0x21e4>
   1371c:	bl	115a0 <__assert_fail@plt>
   13720:	mov	r2, r6
   13724:	mov	r1, #8
   13728:	mov	r0, #0
   1372c:	ldr	r4, [r5]
   13730:	bl	187d8 <__assert_fail@plt+0x7238>
   13734:	mov	r1, r4
   13738:	ldr	r2, [pc, #28]	; 1375c <__assert_fail@plt+0x21bc>
   1373c:	mov	r3, r0
   13740:	mov	r0, #1
   13744:	bl	11354 <error@plt>
   13748:	andeq	sp, r2, r8, ror #2
   1374c:	andeq	sp, r2, r8, ror #3
   13750:	andeq	fp, r1, r8, lsl r9
   13754:	andeq	fp, r1, r8, lsl #17
   13758:	ldrdeq	fp, [r1], -ip
   1375c:	andeq	ip, r1, r8, ror #16
   13760:	andeq	fp, r1, r4, lsl sl
   13764:	andeq	fp, r1, ip, lsl #18
   13768:			; <UNDEFINED> instruction: 0x0001b9b8
   1376c:	andeq	fp, r1, r8, asr r9
   13770:	andeq	fp, r1, r0, lsl #19
   13774:	andeq	fp, r1, r8, ror #17
   13778:	andeq	sl, r1, ip, ror #19
   1377c:	andeq	r0, r0, r6, lsr #9
   13780:	andeq	sl, r1, r8, ror #24
   13784:	andeq	fp, r1, ip, lsl r9
   13788:	ldr	r0, [pc, #64]	; 137d0 <__assert_fail@plt+0x2230>
   1378c:	ldr	r3, [r0, #112]	; 0x70
   13790:	cmp	r3, #0
   13794:	bxne	lr
   13798:	ldr	r3, [pc, #52]	; 137d4 <__assert_fail@plt+0x2234>
   1379c:	ldrb	r3, [r3, #4]
   137a0:	cmp	r3, #0
   137a4:	bxne	lr
   137a8:	ldr	r2, [r0, #16]
   137ac:	ldr	r3, [r0, #116]	; 0x74
   137b0:	cmp	r2, r3
   137b4:	bxeq	lr
   137b8:	ldr	r3, [r0, #88]	; 0x58
   137bc:	cmp	r3, #0
   137c0:	bxne	lr
   137c4:	add	r1, r0, #16
   137c8:	add	r0, r0, #88	; 0x58
   137cc:	b	14514 <__assert_fail@plt+0x2f74>
   137d0:	andeq	sp, r2, r8, ror #3
   137d4:	andeq	sp, r2, r8, ror #2
   137d8:	push	{r4, r5, r6, lr}
   137dc:	sub	sp, sp, #16
   137e0:	ldr	r5, [pc, #296]	; 13910 <__assert_fail@plt+0x2370>
   137e4:	ldr	r6, [r5, #100]	; 0x64
   137e8:	ldrb	r3, [r5, #136]	; 0x88
   137ec:	ldr	r2, [r5, #36]	; 0x24
   137f0:	sub	r6, r6, #1
   137f4:	ldr	r4, [r5, #132]	; 0x84
   137f8:	sub	r6, r6, r2
   137fc:	cmp	r3, #0
   13800:	add	r6, r4, r6
   13804:	beq	13824 <__assert_fail@plt+0x2284>
   13808:	b	138bc <__assert_fail@plt+0x231c>
   1380c:	ldrb	r3, [r5, #144]	; 0x90
   13810:	cmp	r0, r3
   13814:	beq	1386c <__assert_fail@plt+0x22cc>
   13818:	cmp	r4, r6
   1381c:	bcs	138ec <__assert_fail@plt+0x234c>
   13820:	strb	r0, [r4], #1
   13824:	ldr	r0, [r5, #140]	; 0x8c
   13828:	bl	1157c <getc@plt>
   1382c:	cmn	r0, #1
   13830:	bne	1380c <__assert_fail@plt+0x226c>
   13834:	ldr	r2, [r5, #132]	; 0x84
   13838:	mov	r3, #1
   1383c:	cmp	r4, r2
   13840:	strb	r3, [r5, #136]	; 0x88
   13844:	beq	138bc <__assert_fail@plt+0x231c>
   13848:	mov	r3, #0
   1384c:	strb	r3, [r4], #1
   13850:	ldr	r3, [r5, #112]	; 0x70
   13854:	sub	r4, r4, r2
   13858:	cmp	r3, #0
   1385c:	beq	138c4 <__assert_fail@plt+0x2324>
   13860:	mov	r0, r4
   13864:	add	sp, sp, #16
   13868:	pop	{r4, r5, r6, pc}
   1386c:	mov	r3, #0
   13870:	strb	r3, [r4], #1
   13874:	ldr	r3, [r5, #148]	; 0x94
   13878:	ldr	r0, [r5, #112]	; 0x70
   1387c:	ldr	r2, [r5, #132]	; 0x84
   13880:	add	r3, r3, #1
   13884:	cmp	r0, #0
   13888:	sub	r4, r4, r2
   1388c:	str	r3, [r5, #148]	; 0x94
   13890:	bne	13860 <__assert_fail@plt+0x22c0>
   13894:	ldr	r3, [pc, #120]	; 13914 <__assert_fail@plt+0x2374>
   13898:	str	r0, [sp, #4]
   1389c:	ldr	r1, [pc, #116]	; 13918 <__assert_fail@plt+0x2378>
   138a0:	ldrb	r3, [r3, #4]
   138a4:	str	r0, [sp]
   138a8:	add	r0, r1, #72	; 0x48
   138ac:	str	r3, [sp, #8]
   138b0:	mov	r3, r4
   138b4:	bl	140ac <__assert_fail@plt+0x2b0c>
   138b8:	b	13860 <__assert_fail@plt+0x22c0>
   138bc:	mvn	r4, #0
   138c0:	b	13860 <__assert_fail@plt+0x22c0>
   138c4:	ldr	r0, [pc, #72]	; 13914 <__assert_fail@plt+0x2374>
   138c8:	str	r3, [sp, #4]
   138cc:	ldr	r1, [pc, #68]	; 13918 <__assert_fail@plt+0x2378>
   138d0:	ldrb	r0, [r0, #4]
   138d4:	str	r3, [sp]
   138d8:	mov	r3, r4
   138dc:	str	r0, [sp, #8]
   138e0:	add	r0, r1, #72	; 0x48
   138e4:	bl	140ac <__assert_fail@plt+0x2b0c>
   138e8:	b	13860 <__assert_fail@plt+0x22c0>
   138ec:	bl	13788 <__assert_fail@plt+0x21e8>
   138f0:	mov	r2, #5
   138f4:	ldr	r1, [pc, #32]	; 1391c <__assert_fail@plt+0x237c>
   138f8:	mov	r0, #0
   138fc:	bl	11288 <dcgettext@plt>
   13900:	mov	r1, #0
   13904:	mov	r2, r0
   13908:	mov	r0, #1
   1390c:	bl	11354 <error@plt>
   13910:	andeq	sp, r2, r8, ror #3
   13914:	andeq	sp, r2, r8, ror #2
   13918:	strdeq	sp, [r2], -r8
   1391c:	andeq	fp, r1, r4, ror #20
   13920:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13924:	sub	sp, sp, #36	; 0x24
   13928:	ldr	r5, [pc, #1608]	; 13f78 <__assert_fail@plt+0x29d8>
   1392c:	ldr	r8, [r5, #100]	; 0x64
   13930:	ldrb	r7, [r5, #152]	; 0x98
   13934:	ldr	r3, [r5, #36]	; 0x24
   13938:	sub	r8, r8, #1
   1393c:	ldr	r4, [r5, #132]	; 0x84
   13940:	sub	r8, r8, r3
   13944:	cmp	r7, #0
   13948:	add	r8, r4, r8
   1394c:	bne	13ae8 <__assert_fail@plt+0x2548>
   13950:	ldr	r0, [r5, #140]	; 0x8c
   13954:	bl	1157c <getc@plt>
   13958:	mov	r3, #1
   1395c:	str	r3, [sp, #28]
   13960:	cmn	r0, #1
   13964:	mov	fp, r0
   13968:	beq	13ea4 <__assert_fail@plt+0x2904>
   1396c:	mov	sl, r3
   13970:	mov	r9, #5
   13974:	bics	r3, fp, #127	; 0x7f
   13978:	bne	13994 <__assert_fail@plt+0x23f4>
   1397c:	bl	113c0 <__ctype_b_loc@plt>
   13980:	lsl	r2, fp, #1
   13984:	ldr	r1, [r0]
   13988:	ldrh	r2, [r1, r2]
   1398c:	tst	r2, #1
   13990:	bne	13a7c <__assert_fail@plt+0x24dc>
   13994:	cmp	fp, #13
   13998:	cmpne	fp, #10
   1399c:	moveq	r3, #1
   139a0:	movne	r3, #0
   139a4:	str	r3, [sp, #24]
   139a8:	beq	13a7c <__assert_fail@plt+0x24dc>
   139ac:	sub	r2, fp, #11
   139b0:	cmp	r2, #1
   139b4:	bls	13a7c <__assert_fail@plt+0x24dc>
   139b8:	ldr	r3, [r5, #112]	; 0x70
   139bc:	cmp	r3, #0
   139c0:	beq	13b84 <__assert_fail@plt+0x25e4>
   139c4:	cmp	fp, #39	; 0x27
   139c8:	beq	13c78 <__assert_fail@plt+0x26d8>
   139cc:	cmp	fp, #92	; 0x5c
   139d0:	beq	13af8 <__assert_fail@plt+0x2558>
   139d4:	cmp	fp, #34	; 0x22
   139d8:	beq	13c78 <__assert_fail@plt+0x26d8>
   139dc:	cmp	fp, #0
   139e0:	bne	13cd4 <__assert_fail@plt+0x2734>
   139e4:	ldr	r3, [r5, #160]	; 0xa0
   139e8:	cmp	r3, #0
   139ec:	beq	13d90 <__assert_fail@plt+0x27f0>
   139f0:	cmp	r8, r4
   139f4:	bls	13dbc <__assert_fail@plt+0x281c>
   139f8:	strb	fp, [r4]
   139fc:	ldr	r0, [r5, #140]	; 0x8c
   13a00:	bl	1157c <getc@plt>
   13a04:	add	r4, r4, #1
   13a08:	cmn	r0, #1
   13a0c:	mov	fp, r0
   13a10:	beq	13a90 <__assert_fail@plt+0x24f0>
   13a14:	cmp	r0, #10
   13a18:	bne	139b8 <__assert_fail@plt+0x2418>
   13a1c:	mov	r2, #0
   13a20:	lsl	r6, r2, #1
   13a24:	bl	113c0 <__ctype_b_loc@plt>
   13a28:	ldr	r3, [r0]
   13a2c:	ldrh	r3, [r3, r6]
   13a30:	tst	r3, #1
   13a34:	beq	13c68 <__assert_fail@plt+0x26c8>
   13a38:	ldr	r0, [r5, #156]	; 0x9c
   13a3c:	mov	r3, #0
   13a40:	ldr	r6, [r5, #132]	; 0x84
   13a44:	cmp	r0, r3
   13a48:	strb	r3, [r4], #1
   13a4c:	sub	r4, r4, r6
   13a50:	beq	13a64 <__assert_fail@plt+0x24c4>
   13a54:	ldrb	r2, [r0]
   13a58:	ldrb	r3, [r6]
   13a5c:	cmp	r2, r3
   13a60:	beq	13e14 <__assert_fail@plt+0x2874>
   13a64:	ldr	r3, [r5, #112]	; 0x70
   13a68:	cmp	r3, #0
   13a6c:	beq	13e5c <__assert_fail@plt+0x28bc>
   13a70:	mov	r0, r4
   13a74:	add	sp, sp, #36	; 0x24
   13a78:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13a7c:	ldr	r0, [r5, #140]	; 0x8c
   13a80:	bl	1157c <getc@plt>
   13a84:	cmn	r0, #1
   13a88:	mov	fp, r0
   13a8c:	bne	13974 <__assert_fail@plt+0x23d4>
   13a90:	ldr	r6, [r5, #132]	; 0x84
   13a94:	mov	r3, #1
   13a98:	cmp	r6, r4
   13a9c:	strb	r3, [r5, #152]	; 0x98
   13aa0:	movne	r3, #0
   13aa4:	strbne	r3, [r4], #1
   13aa8:	subne	r4, r4, r6
   13aac:	beq	13ae8 <__assert_fail@plt+0x2548>
   13ab0:	ldr	r3, [sp, #28]
   13ab4:	cmp	r3, #0
   13ab8:	beq	13a64 <__assert_fail@plt+0x24c4>
   13abc:	ldr	r0, [r5, #156]	; 0x9c
   13ac0:	cmp	r0, #0
   13ac4:	beq	13a64 <__assert_fail@plt+0x24c4>
   13ac8:	ldrb	r2, [r0]
   13acc:	ldrb	r3, [r6]
   13ad0:	cmp	r2, r3
   13ad4:	bne	13a64 <__assert_fail@plt+0x24c4>
   13ad8:	mov	r1, r6
   13adc:	bl	111e0 <strcmp@plt>
   13ae0:	cmp	r0, #0
   13ae4:	bne	13a64 <__assert_fail@plt+0x24c4>
   13ae8:	mvn	r4, #0
   13aec:	mov	r0, r4
   13af0:	add	sp, sp, #36	; 0x24
   13af4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13af8:	ldr	r0, [r5, #140]	; 0x8c
   13afc:	bl	1157c <getc@plt>
   13b00:	cmn	r0, #1
   13b04:	beq	13a90 <__assert_fail@plt+0x24f0>
   13b08:	cmp	r0, #0
   13b0c:	bne	13c30 <__assert_fail@plt+0x2690>
   13b10:	ldr	r6, [r5, #160]	; 0xa0
   13b14:	cmp	r6, #0
   13b18:	beq	13b2c <__assert_fail@plt+0x258c>
   13b1c:	cmp	r8, r4
   13b20:	bls	13dbc <__assert_fail@plt+0x281c>
   13b24:	strb	r0, [r4]
   13b28:	b	139fc <__assert_fail@plt+0x245c>
   13b2c:	mov	r2, r9
   13b30:	ldr	r1, [pc, #1092]	; 13f7c <__assert_fail@plt+0x29dc>
   13b34:	bl	11288 <dcgettext@plt>
   13b38:	mov	r1, r7
   13b3c:	mov	r2, r0
   13b40:	mov	r0, r6
   13b44:	bl	11354 <error@plt>
   13b48:	cmp	r8, r4
   13b4c:	str	sl, [r5, #160]	; 0xa0
   13b50:	bls	13dbc <__assert_fail@plt+0x281c>
   13b54:	strb	r6, [r4]
   13b58:	ldr	r0, [r5, #140]	; 0x8c
   13b5c:	bl	1157c <getc@plt>
   13b60:	add	r4, r4, #1
   13b64:	cmn	r0, #1
   13b68:	mov	fp, r0
   13b6c:	beq	13a90 <__assert_fail@plt+0x24f0>
   13b70:	cmp	r0, #10
   13b74:	beq	13a24 <__assert_fail@plt+0x2484>
   13b78:	ldr	r3, [r5, #112]	; 0x70
   13b7c:	cmp	r3, #0
   13b80:	bne	139c4 <__assert_fail@plt+0x2424>
   13b84:	bics	r6, fp, #127	; 0x7f
   13b88:	bne	139c4 <__assert_fail@plt+0x2424>
   13b8c:	bl	113c0 <__ctype_b_loc@plt>
   13b90:	lsl	r3, fp, #1
   13b94:	ldr	r2, [r0]
   13b98:	ldrh	r3, [r2, r3]
   13b9c:	tst	r3, #1
   13ba0:	beq	139c4 <__assert_fail@plt+0x2424>
   13ba4:	ldr	r0, [r5, #156]	; 0x9c
   13ba8:	ldr	r2, [r5, #132]	; 0x84
   13bac:	cmp	r0, #0
   13bb0:	strb	r6, [r4], #1
   13bb4:	sub	r4, r4, r2
   13bb8:	beq	13bcc <__assert_fail@plt+0x262c>
   13bbc:	ldrb	r1, [r0]
   13bc0:	ldrb	r3, [r2]
   13bc4:	cmp	r1, r3
   13bc8:	beq	13e88 <__assert_fail@plt+0x28e8>
   13bcc:	ldr	r3, [pc, #940]	; 13f80 <__assert_fail@plt+0x29e0>
   13bd0:	ldrb	r1, [r3, #4]
   13bd4:	mov	r3, r4
   13bd8:	str	r7, [sp, #4]
   13bdc:	str	r1, [sp, #8]
   13be0:	ldr	r1, [pc, #924]	; 13f84 <__assert_fail@plt+0x29e4>
   13be4:	str	r7, [sp]
   13be8:	add	r0, r1, #72	; 0x48
   13bec:	bl	140ac <__assert_fail@plt+0x2b0c>
   13bf0:	ldr	r0, [r5, #140]	; 0x8c
   13bf4:	ldr	r4, [r5, #132]	; 0x84
   13bf8:	bl	1157c <getc@plt>
   13bfc:	ldr	r3, [sp, #24]
   13c00:	str	r3, [sp, #28]
   13c04:	cmn	r0, #1
   13c08:	mov	fp, r0
   13c0c:	bne	13974 <__assert_fail@plt+0x23d4>
   13c10:	ldr	r6, [r5, #132]	; 0x84
   13c14:	mov	r3, #1
   13c18:	cmp	r4, r6
   13c1c:	strbne	r7, [r4], #1
   13c20:	strb	r3, [r5, #152]	; 0x98
   13c24:	subne	r4, r4, r6
   13c28:	bne	13a64 <__assert_fail@plt+0x24c4>
   13c2c:	b	13ae8 <__assert_fail@plt+0x2548>
   13c30:	cmp	r8, r4
   13c34:	bls	13dbc <__assert_fail@plt+0x281c>
   13c38:	strb	r0, [r4]
   13c3c:	str	r0, [sp, #20]
   13c40:	ldr	r0, [r5, #140]	; 0x8c
   13c44:	bl	1157c <getc@plt>
   13c48:	add	r4, r4, #1
   13c4c:	ldr	r2, [sp, #20]
   13c50:	cmn	r0, #1
   13c54:	beq	13a90 <__assert_fail@plt+0x24f0>
   13c58:	cmp	r0, #10
   13c5c:	bne	13f70 <__assert_fail@plt+0x29d0>
   13c60:	bics	r3, r2, #127	; 0x7f
   13c64:	beq	13a20 <__assert_fail@plt+0x2480>
   13c68:	ldr	r3, [r5, #148]	; 0x94
   13c6c:	add	r3, r3, #1
   13c70:	str	r3, [r5, #148]	; 0x94
   13c74:	b	13a38 <__assert_fail@plt+0x2498>
   13c78:	ldr	r0, [r5, #140]	; 0x8c
   13c7c:	bl	1157c <getc@plt>
   13c80:	cmn	r0, #1
   13c84:	beq	13e3c <__assert_fail@plt+0x289c>
   13c88:	mov	r6, r4
   13c8c:	add	r3, r6, #1
   13c90:	mov	r4, r3
   13c94:	cmp	r0, #10
   13c98:	beq	13f38 <__assert_fail@plt+0x2998>
   13c9c:	cmp	r0, fp
   13ca0:	beq	13de0 <__assert_fail@plt+0x2840>
   13ca4:	cmp	r0, #0
   13ca8:	beq	13cfc <__assert_fail@plt+0x275c>
   13cac:	cmp	r8, r6
   13cb0:	bls	13dbc <__assert_fail@plt+0x281c>
   13cb4:	strb	r0, [r6]
   13cb8:	ldr	r0, [r5, #140]	; 0x8c
   13cbc:	bl	1157c <getc@plt>
   13cc0:	cmn	r0, #1
   13cc4:	beq	13f18 <__assert_fail@plt+0x2978>
   13cc8:	add	r4, r4, #1
   13ccc:	add	r6, r6, #1
   13cd0:	b	13c94 <__assert_fail@plt+0x26f4>
   13cd4:	cmp	r8, r4
   13cd8:	bls	13dbc <__assert_fail@plt+0x281c>
   13cdc:	strb	fp, [r4]
   13ce0:	ldr	r0, [r5, #140]	; 0x8c
   13ce4:	bl	1157c <getc@plt>
   13ce8:	add	r4, r4, #1
   13cec:	cmn	r0, #1
   13cf0:	beq	13a90 <__assert_fail@plt+0x24f0>
   13cf4:	mov	r2, fp
   13cf8:	b	13c58 <__assert_fail@plt+0x26b8>
   13cfc:	ldr	r3, [r5, #160]	; 0xa0
   13d00:	cmp	r3, #0
   13d04:	bne	13cac <__assert_fail@plt+0x270c>
   13d08:	mov	r2, r9
   13d0c:	ldr	r1, [pc, #616]	; 13f7c <__assert_fail@plt+0x29dc>
   13d10:	mov	r0, r7
   13d14:	bl	11288 <dcgettext@plt>
   13d18:	mov	r1, r7
   13d1c:	mov	r2, r0
   13d20:	mov	r0, #0
   13d24:	bl	11354 <error@plt>
   13d28:	cmp	r8, r6
   13d2c:	str	sl, [r5, #160]	; 0xa0
   13d30:	bls	13dbc <__assert_fail@plt+0x281c>
   13d34:	mov	r4, r6
   13d38:	ldr	r0, [r5, #140]	; 0x8c
   13d3c:	strb	r7, [r4], #1
   13d40:	bl	1157c <getc@plt>
   13d44:	cmn	r0, #1
   13d48:	beq	13e3c <__assert_fail@plt+0x289c>
   13d4c:	cmp	r0, #10
   13d50:	beq	13f38 <__assert_fail@plt+0x2998>
   13d54:	cmp	r0, fp
   13d58:	beq	13de4 <__assert_fail@plt+0x2844>
   13d5c:	cmp	r0, #0
   13d60:	beq	13e00 <__assert_fail@plt+0x2860>
   13d64:	cmp	r8, r4
   13d68:	bls	13dbc <__assert_fail@plt+0x281c>
   13d6c:	strb	r0, [r4]
   13d70:	ldr	r0, [r5, #140]	; 0x8c
   13d74:	bl	1157c <getc@plt>
   13d78:	add	r6, r6, #2
   13d7c:	cmn	r0, #1
   13d80:	bne	13c8c <__assert_fail@plt+0x26ec>
   13d84:	mov	r4, r6
   13d88:	mov	r2, #2
   13d8c:	b	13eac <__assert_fail@plt+0x290c>
   13d90:	mov	r2, r9
   13d94:	ldr	r1, [pc, #480]	; 13f7c <__assert_fail@plt+0x29dc>
   13d98:	mov	r0, r7
   13d9c:	bl	11288 <dcgettext@plt>
   13da0:	mov	r1, r7
   13da4:	mov	r2, r0
   13da8:	mov	r0, fp
   13dac:	bl	11354 <error@plt>
   13db0:	cmp	r8, r4
   13db4:	str	sl, [r5, #160]	; 0xa0
   13db8:	bhi	139f8 <__assert_fail@plt+0x2458>
   13dbc:	bl	13788 <__assert_fail@plt+0x21e8>
   13dc0:	mov	r2, #5
   13dc4:	ldr	r1, [pc, #444]	; 13f88 <__assert_fail@plt+0x29e8>
   13dc8:	mov	r0, #0
   13dcc:	bl	11288 <dcgettext@plt>
   13dd0:	mov	r1, #0
   13dd4:	mov	r2, r0
   13dd8:	mov	r0, #1
   13ddc:	bl	11354 <error@plt>
   13de0:	mov	r4, r6
   13de4:	str	r0, [sp, #20]
   13de8:	ldr	r0, [r5, #140]	; 0x8c
   13dec:	bl	1157c <getc@plt>
   13df0:	ldr	r2, [sp, #20]
   13df4:	cmn	r0, #1
   13df8:	bne	13c58 <__assert_fail@plt+0x26b8>
   13dfc:	b	13a90 <__assert_fail@plt+0x24f0>
   13e00:	ldr	r3, [r5, #160]	; 0xa0
   13e04:	cmp	r3, #0
   13e08:	bne	13d64 <__assert_fail@plt+0x27c4>
   13e0c:	mov	r6, r4
   13e10:	b	13d08 <__assert_fail@plt+0x2768>
   13e14:	mov	r1, r6
   13e18:	bl	111e0 <strcmp@plt>
   13e1c:	cmp	r0, #0
   13e20:	bne	13a64 <__assert_fail@plt+0x24c4>
   13e24:	ldr	r3, [sp, #28]
   13e28:	cmp	r3, #0
   13e2c:	mov	r3, #1
   13e30:	strb	r3, [r5, #152]	; 0x98
   13e34:	beq	13a70 <__assert_fail@plt+0x24d0>
   13e38:	b	13ae8 <__assert_fail@plt+0x2548>
   13e3c:	ldr	r1, [r5, #132]	; 0x84
   13e40:	mov	r2, #1
   13e44:	cmp	r1, r4
   13e48:	strb	r2, [r5, #152]	; 0x98
   13e4c:	beq	13ae8 <__assert_fail@plt+0x2548>
   13e50:	mov	r2, #0
   13e54:	strb	r2, [r4]
   13e58:	b	13ed4 <__assert_fail@plt+0x2934>
   13e5c:	ldr	r2, [pc, #284]	; 13f80 <__assert_fail@plt+0x29e0>
   13e60:	str	r3, [sp, #4]
   13e64:	ldr	r1, [pc, #280]	; 13f84 <__assert_fail@plt+0x29e4>
   13e68:	ldrb	r0, [r2, #4]
   13e6c:	str	r3, [sp]
   13e70:	mov	r2, r6
   13e74:	str	r0, [sp, #8]
   13e78:	mov	r3, r4
   13e7c:	add	r0, r1, #72	; 0x48
   13e80:	bl	140ac <__assert_fail@plt+0x2b0c>
   13e84:	b	13a70 <__assert_fail@plt+0x24d0>
   13e88:	mov	r1, r2
   13e8c:	str	r2, [sp, #20]
   13e90:	bl	111e0 <strcmp@plt>
   13e94:	ldr	r2, [sp, #20]
   13e98:	cmp	r0, #0
   13e9c:	bne	13bcc <__assert_fail@plt+0x262c>
   13ea0:	b	13e24 <__assert_fail@plt+0x2884>
   13ea4:	mov	fp, r7
   13ea8:	mov	r2, r3
   13eac:	ldr	r6, [r5, #132]	; 0x84
   13eb0:	mov	r1, #1
   13eb4:	cmp	r6, r4
   13eb8:	strb	r1, [r5, #152]	; 0x98
   13ebc:	beq	13ae8 <__assert_fail@plt+0x2548>
   13ec0:	cmp	r2, #2
   13ec4:	mov	r2, #0
   13ec8:	strb	r2, [r4], #1
   13ecc:	sub	r4, r4, r6
   13ed0:	bne	13ab0 <__assert_fail@plt+0x2510>
   13ed4:	bl	13788 <__assert_fail@plt+0x21e8>
   13ed8:	mov	r2, #5
   13edc:	ldr	r1, [pc, #168]	; 13f8c <__assert_fail@plt+0x29ec>
   13ee0:	mov	r0, #0
   13ee4:	bl	11288 <dcgettext@plt>
   13ee8:	cmp	fp, #34	; 0x22
   13eec:	mov	r2, #5
   13ef0:	mov	r4, r0
   13ef4:	beq	13f60 <__assert_fail@plt+0x29c0>
   13ef8:	ldr	r1, [pc, #144]	; 13f90 <__assert_fail@plt+0x29f0>
   13efc:	mov	r0, #0
   13f00:	bl	11288 <dcgettext@plt>
   13f04:	mov	r3, r0
   13f08:	mov	r2, r4
   13f0c:	mov	r1, #0
   13f10:	mov	r0, #1
   13f14:	bl	11354 <error@plt>
   13f18:	ldr	r1, [r5, #132]	; 0x84
   13f1c:	mov	r2, #1
   13f20:	cmp	r1, r4
   13f24:	strb	r2, [r5, #152]	; 0x98
   13f28:	movne	r2, #0
   13f2c:	strbne	r2, [r4]
   13f30:	bne	13ed4 <__assert_fail@plt+0x2934>
   13f34:	b	13ae8 <__assert_fail@plt+0x2548>
   13f38:	bl	13788 <__assert_fail@plt+0x21e8>
   13f3c:	mov	r2, #5
   13f40:	ldr	r1, [pc, #68]	; 13f8c <__assert_fail@plt+0x29ec>
   13f44:	mov	r0, #0
   13f48:	bl	11288 <dcgettext@plt>
   13f4c:	cmp	fp, #34	; 0x22
   13f50:	movne	r2, #5
   13f54:	mov	r4, r0
   13f58:	bne	13ef8 <__assert_fail@plt+0x2958>
   13f5c:	mov	r2, #5
   13f60:	ldr	r1, [pc, #44]	; 13f94 <__assert_fail@plt+0x29f4>
   13f64:	mov	r0, #0
   13f68:	bl	11288 <dcgettext@plt>
   13f6c:	b	13f04 <__assert_fail@plt+0x2964>
   13f70:	mov	fp, r0
   13f74:	b	139b8 <__assert_fail@plt+0x2418>
   13f78:	andeq	sp, r2, r8, ror #3
   13f7c:	andeq	fp, r1, r4, ror #21
   13f80:	andeq	sp, r2, r8, ror #2
   13f84:	strdeq	sp, [r2], -r8
   13f88:	andeq	fp, r1, r4, ror #20
   13f8c:	andeq	fp, r1, ip, ror sl
   13f90:	ldrdeq	fp, [r1], -ip
   13f94:	ldrdeq	fp, [r1], -r4
   13f98:	push	{r4, r5, r6, lr}
   13f9c:	bl	113cc <getpid@plt>
   13fa0:	ldr	r4, [pc, #88]	; 14000 <__assert_fail@plt+0x2a60>
   13fa4:	ldr	r3, [r4, #164]	; 0xa4
   13fa8:	cmp	r0, r3
   13fac:	bne	13fec <__assert_fail@plt+0x2a4c>
   13fb0:	ldrb	r5, [r4, #168]	; 0xa8
   13fb4:	cmp	r5, #0
   13fb8:	popne	{r4, r5, r6, pc}
   13fbc:	mov	r3, #1
   13fc0:	mov	r0, r3
   13fc4:	mov	r1, r5
   13fc8:	strb	r3, [r4, #168]	; 0xa8
   13fcc:	bl	1290c <__assert_fail@plt+0x136c>
   13fd0:	ldr	r2, [r4, #172]	; 0xac
   13fd4:	ldr	r3, [r4, #60]	; 0x3c
   13fd8:	strb	r5, [r4, #168]	; 0xa8
   13fdc:	cmp	r2, r3
   13fe0:	popeq	{r4, r5, r6, pc}
   13fe4:	ldr	r0, [r4, #60]	; 0x3c
   13fe8:	bl	11240 <_exit@plt>
   13fec:	ldr	r3, [pc, #16]	; 14004 <__assert_fail@plt+0x2a64>
   13ff0:	ldr	r2, [pc, #16]	; 14008 <__assert_fail@plt+0x2a68>
   13ff4:	ldr	r1, [pc, #16]	; 1400c <__assert_fail@plt+0x2a6c>
   13ff8:	ldr	r0, [pc, #16]	; 14010 <__assert_fail@plt+0x2a70>
   13ffc:	bl	115a0 <__assert_fail@plt>
   14000:	andeq	sp, r2, r8, ror #3
   14004:	strdeq	sl, [r1], -ip
   14008:	andeq	r0, r0, r5, asr #12
   1400c:	andeq	sl, r1, r8, ror #24
   14010:	andeq	fp, r1, r0, ror fp
   14014:	mov	r0, #0
   14018:	bx	lr
   1401c:	push	{r4, r5, r6, lr}
   14020:	sub	sp, sp, #16
   14024:	mov	r4, r1
   14028:	mov	r6, r0
   1402c:	bl	11378 <getenv@plt>
   14030:	subs	r3, r0, #0
   14034:	beq	14070 <__assert_fail@plt+0x2ad0>
   14038:	mov	r5, #0
   1403c:	str	r5, [sp]
   14040:	add	r3, sp, #12
   14044:	mov	r2, #10
   14048:	add	r1, sp, #8
   1404c:	bl	195f4 <__assert_fail@plt+0x8054>
   14050:	cmp	r0, r5
   14054:	bne	1407c <__assert_fail@plt+0x2adc>
   14058:	ldr	r0, [sp, #12]
   1405c:	cmp	r0, r4
   14060:	movcs	r0, #0
   14064:	movcc	r0, #1
   14068:	add	sp, sp, #16
   1406c:	pop	{r4, r5, r6, pc}
   14070:	mov	r0, r3
   14074:	add	sp, sp, #16
   14078:	pop	{r4, r5, r6, pc}
   1407c:	bl	11420 <__errno_location@plt>
   14080:	mov	r2, #5
   14084:	ldr	r1, [pc, #28]	; 140a8 <__assert_fail@plt+0x2b08>
   14088:	ldr	r4, [r0]
   1408c:	mov	r0, r5
   14090:	bl	11288 <dcgettext@plt>
   14094:	mov	r3, r6
   14098:	mov	r1, r4
   1409c:	mov	r2, r0
   140a0:	mov	r0, #1
   140a4:	bl	11354 <error@plt>
   140a8:	andeq	ip, r1, ip, ror #6
   140ac:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   140b0:	subs	r7, r2, #0
   140b4:	ldr	r9, [sp, #36]	; 0x24
   140b8:	ldr	r8, [sp, #40]	; 0x28
   140bc:	beq	142fc <__assert_fail@plt+0x2d5c>
   140c0:	ldr	sl, [pc, #628]	; 1433c <__assert_fail@plt+0x2d9c>
   140c4:	mov	r5, r0
   140c8:	cmp	r7, sl
   140cc:	mov	r4, r1
   140d0:	mov	r6, r3
   140d4:	beq	1424c <__assert_fail@plt+0x2cac>
   140d8:	ldr	r1, [r1, #16]
   140dc:	add	r3, r3, r9
   140e0:	ldr	r2, [r0, #12]
   140e4:	add	r3, r3, r1
   140e8:	cmp	r3, r2
   140ec:	bls	14228 <__assert_fail@plt+0x2c88>
   140f0:	cmp	r8, #0
   140f4:	bne	14330 <__assert_fail@plt+0x2d90>
   140f8:	ldr	r2, [r4]
   140fc:	ldr	r3, [r0, #28]
   14100:	cmp	r2, r3
   14104:	beq	14330 <__assert_fail@plt+0x2d90>
   14108:	ldr	r3, [r0, #24]
   1410c:	cmp	r3, #0
   14110:	bne	14310 <__assert_fail@plt+0x2d70>
   14114:	ldr	r3, [r0]
   14118:	cmp	r3, #0
   1411c:	beq	14138 <__assert_fail@plt+0x2b98>
   14120:	ldr	r3, [r0, #36]	; 0x24
   14124:	cmp	r3, #0
   14128:	bne	14310 <__assert_fail@plt+0x2d70>
   1412c:	ldr	r3, [r0, #40]	; 0x28
   14130:	cmp	r3, #0
   14134:	bne	14310 <__assert_fail@plt+0x2d70>
   14138:	mov	r1, r4
   1413c:	mov	r0, r5
   14140:	bl	14514 <__assert_fail@plt+0x2f74>
   14144:	ldr	r3, [r4]
   14148:	ldr	r2, [r5, #40]	; 0x28
   1414c:	cmp	r2, #0
   14150:	beq	14164 <__assert_fail@plt+0x2bc4>
   14154:	ldr	r1, [r5, #28]
   14158:	sub	r1, r3, r1
   1415c:	cmp	r2, r1
   14160:	beq	14240 <__assert_fail@plt+0x2ca0>
   14164:	ldr	r2, [r5, #16]
   14168:	cmp	r2, r3
   1416c:	beq	14240 <__assert_fail@plt+0x2ca0>
   14170:	ldr	r3, [r4]
   14174:	mov	r2, #1
   14178:	str	r2, [r4, #28]
   1417c:	ldr	r1, [r4, #8]
   14180:	cmp	r1, r3
   14184:	bls	14264 <__assert_fail@plt+0x2cc4>
   14188:	ldr	r1, [r4, #4]
   1418c:	cmp	r7, sl
   14190:	beq	14294 <__assert_fail@plt+0x2cf4>
   14194:	ldr	ip, [r4, #16]
   14198:	ldr	r2, [r4, #12]
   1419c:	ldr	r0, [sp, #32]
   141a0:	add	r2, r2, ip
   141a4:	cmp	r0, #0
   141a8:	add	r0, r3, #1
   141ac:	str	r0, [r4]
   141b0:	str	r2, [r1, r3, lsl #2]
   141b4:	beq	141d4 <__assert_fail@plt+0x2c34>
   141b8:	ldr	r0, [r4, #12]
   141bc:	ldr	r1, [sp, #32]
   141c0:	add	r0, r0, ip
   141c4:	bl	11330 <strcpy@plt>
   141c8:	ldr	ip, [r4, #16]
   141cc:	add	ip, r9, ip
   141d0:	str	ip, [r4, #16]
   141d4:	ldr	r0, [r4, #12]
   141d8:	mov	r1, r7
   141dc:	add	r0, r0, ip
   141e0:	bl	11330 <strcpy@plt>
   141e4:	ldr	r3, [r4, #16]
   141e8:	cmp	r8, #0
   141ec:	add	r6, r6, r3
   141f0:	str	r6, [r4, #16]
   141f4:	ldr	r3, [r4]
   141f8:	bne	142b0 <__assert_fail@plt+0x2d10>
   141fc:	ldr	r2, [r5, #40]	; 0x28
   14200:	cmp	r2, #0
   14204:	beq	14218 <__assert_fail@plt+0x2c78>
   14208:	ldr	r1, [r5, #28]
   1420c:	sub	r1, r3, r1
   14210:	cmp	r2, r1
   14214:	beq	142bc <__assert_fail@plt+0x2d1c>
   14218:	ldr	r2, [r5, #16]
   1421c:	cmp	r3, r2
   14220:	beq	142bc <__assert_fail@plt+0x2d1c>
   14224:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   14228:	cmp	r8, #0
   1422c:	ldr	r3, [r4]
   14230:	beq	14148 <__assert_fail@plt+0x2ba8>
   14234:	ldr	r2, [r0, #16]
   14238:	cmp	r3, r2
   1423c:	bne	1417c <__assert_fail@plt+0x2bdc>
   14240:	mov	r1, r4
   14244:	mov	r0, r5
   14248:	bl	14514 <__assert_fail@plt+0x2f74>
   1424c:	cmp	r8, #0
   14250:	ldrne	r3, [r4]
   14254:	moveq	r2, #1
   14258:	ldreq	r3, [r4]
   1425c:	streq	r2, [r4, #28]
   14260:	b	1417c <__assert_fail@plt+0x2bdc>
   14264:	ldr	r0, [r4, #4]
   14268:	cmp	r0, #0
   1426c:	beq	142dc <__assert_fail@plt+0x2d3c>
   14270:	lsl	r3, r1, #1
   14274:	str	r3, [r4, #8]
   14278:	lsl	r1, r1, #3
   1427c:	bl	190a8 <__assert_fail@plt+0x7b08>
   14280:	cmp	r7, sl
   14284:	ldr	r3, [r4]
   14288:	mov	r1, r0
   1428c:	str	r0, [r4, #4]
   14290:	bne	14194 <__assert_fail@plt+0x2bf4>
   14294:	add	r0, r3, #1
   14298:	mov	r2, #0
   1429c:	cmp	r8, #0
   142a0:	str	r0, [r4]
   142a4:	str	r2, [r1, r3, lsl #2]
   142a8:	bne	142d0 <__assert_fail@plt+0x2d30>
   142ac:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   142b0:	ldr	r2, [r5, #16]
   142b4:	cmp	r3, r2
   142b8:	bne	142d4 <__assert_fail@plt+0x2d34>
   142bc:	mov	r0, r5
   142c0:	mov	r1, r4
   142c4:	bl	14514 <__assert_fail@plt+0x2f74>
   142c8:	cmp	r8, #0
   142cc:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   142d0:	ldr	r6, [r4, #16]
   142d4:	str	r6, [r4, #20]
   142d8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   142dc:	mov	r3, #64	; 0x40
   142e0:	str	r3, [r4, #8]
   142e4:	mov	r0, #256	; 0x100
   142e8:	bl	1906c <__assert_fail@plt+0x7acc>
   142ec:	ldr	r3, [r4]
   142f0:	str	r0, [r4, #4]
   142f4:	mov	r1, r0
   142f8:	b	1418c <__assert_fail@plt+0x2bec>
   142fc:	ldr	r3, [pc, #60]	; 14340 <__assert_fail@plt+0x2da0>
   14300:	ldr	r2, [pc, #60]	; 14344 <__assert_fail@plt+0x2da4>
   14304:	ldr	r1, [pc, #60]	; 14348 <__assert_fail@plt+0x2da8>
   14308:	ldr	r0, [pc, #60]	; 1434c <__assert_fail@plt+0x2dac>
   1430c:	bl	115a0 <__assert_fail@plt>
   14310:	ldr	r1, [pc, #56]	; 14350 <__assert_fail@plt+0x2db0>
   14314:	mov	r2, #5
   14318:	mov	r0, #0
   1431c:	bl	11288 <dcgettext@plt>
   14320:	mov	r1, #0
   14324:	mov	r2, r0
   14328:	mov	r0, #1
   1432c:	bl	11354 <error@plt>
   14330:	mov	r2, #5
   14334:	ldr	r1, [pc, #24]	; 14354 <__assert_fail@plt+0x2db4>
   14338:	b	14318 <__assert_fail@plt+0x2d78>
   1433c:	andeq	ip, r1, r4, asr #7
   14340:	andeq	ip, r1, r4, lsr #6
   14344:	andeq	r0, r0, r5, asr r1
   14348:	andeq	ip, r1, ip, lsr #7
   1434c:			; <UNDEFINED> instruction: 0x0001c3b8
   14350:	andeq	ip, r1, ip, lsl #8
   14354:	ldrdeq	ip, [r1], -r0
   14358:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1435c:	sub	sp, sp, #36	; 0x24
   14360:	mov	r5, r3
   14364:	ldr	r3, [sp, #72]	; 0x48
   14368:	ldr	r4, [pc, #412]	; 1450c <__assert_fail@plt+0x2f6c>
   1436c:	str	r3, [sp, #8]
   14370:	ldr	r3, [sp, #76]	; 0x4c
   14374:	str	r1, [sp, #24]
   14378:	str	r3, [sp, #16]
   1437c:	ldr	r3, [sp, #80]	; 0x50
   14380:	ldr	r1, [r4]
   14384:	str	r3, [sp, #12]
   14388:	ldr	r3, [sp, #84]	; 0x54
   1438c:	mov	r9, r0
   14390:	str	r3, [sp, #4]
   14394:	ldr	r0, [r0, #12]
   14398:	ldr	r3, [sp, #88]	; 0x58
   1439c:	cmp	r1, #0
   143a0:	str	r1, [sp, #20]
   143a4:	mov	r7, r2
   143a8:	sub	r6, r0, #1
   143ac:	str	r3, [sp, #28]
   143b0:	beq	144f8 <__assert_fail@plt+0x2f58>
   143b4:	ldr	r3, [sp, #4]
   143b8:	ldr	r2, [sp, #16]
   143bc:	ldr	r4, [sp, #20]
   143c0:	add	sl, r3, r2
   143c4:	b	14448 <__assert_fail@plt+0x2ea8>
   143c8:	sub	fp, r8, r7
   143cc:	cmp	r6, fp
   143d0:	bls	144cc <__assert_fail@plt+0x2f2c>
   143d4:	mov	r0, r4
   143d8:	mov	r1, r7
   143dc:	sub	r6, r6, fp
   143e0:	mov	r2, fp
   143e4:	bl	11450 <strncpy@plt>
   143e8:	cmp	sl, r6
   143ec:	sub	r5, r5, fp
   143f0:	add	r4, r4, fp
   143f4:	bcs	144c8 <__assert_fail@plt+0x2f28>
   143f8:	ldr	r3, [sp, #8]
   143fc:	sub	r6, r6, sl
   14400:	cmp	r3, #0
   14404:	beq	1441c <__assert_fail@plt+0x2e7c>
   14408:	mov	r1, r3
   1440c:	mov	r0, r4
   14410:	bl	11330 <strcpy@plt>
   14414:	ldr	r3, [sp, #16]
   14418:	add	r4, r4, r3
   1441c:	mov	r0, r4
   14420:	ldr	r1, [sp, #12]
   14424:	bl	11330 <strcpy@plt>
   14428:	ldr	r3, [r9, #20]
   1442c:	ldr	r2, [sp, #4]
   14430:	add	r7, r8, r3
   14434:	sub	r5, r5, r3
   14438:	ldrb	r3, [r7]
   1443c:	add	r4, r4, r2
   14440:	cmp	r3, #0
   14444:	beq	14490 <__assert_fail@plt+0x2ef0>
   14448:	ldr	r1, [r9, #24]
   1444c:	mov	r0, r7
   14450:	bl	15fb0 <__assert_fail@plt+0x4a10>
   14454:	subs	r8, r0, #0
   14458:	bne	143c8 <__assert_fail@plt+0x2e28>
   1445c:	cmp	r5, r6
   14460:	bcs	144cc <__assert_fail@plt+0x2f2c>
   14464:	mov	r1, r7
   14468:	add	r7, r7, r5
   1446c:	mov	r0, r4
   14470:	mov	r2, r5
   14474:	bl	11450 <strncpy@plt>
   14478:	ldrb	r3, [r7]
   1447c:	sub	r6, r6, r5
   14480:	add	r4, r4, r5
   14484:	cmp	r3, #0
   14488:	mov	r5, #0
   1448c:	bne	14448 <__assert_fail@plt+0x2ea8>
   14490:	mov	ip, #0
   14494:	strb	ip, [r4], #1
   14498:	ldr	r3, [sp, #20]
   1449c:	str	ip, [sp, #76]	; 0x4c
   144a0:	str	ip, [sp, #72]	; 0x48
   144a4:	ldr	ip, [sp, #28]
   144a8:	mov	r2, r3
   144ac:	ldr	r1, [sp, #24]
   144b0:	mov	r0, r9
   144b4:	sub	r3, r4, r3
   144b8:	str	ip, [sp, #80]	; 0x50
   144bc:	add	sp, sp, #36	; 0x24
   144c0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   144c4:	b	140ac <__assert_fail@plt+0x2b0c>
   144c8:	mov	r7, r8
   144cc:	ldrb	r3, [r7]
   144d0:	cmp	r3, #0
   144d4:	beq	14490 <__assert_fail@plt+0x2ef0>
   144d8:	mov	r2, #5
   144dc:	ldr	r1, [pc, #44]	; 14510 <__assert_fail@plt+0x2f70>
   144e0:	mov	r0, #0
   144e4:	bl	11288 <dcgettext@plt>
   144e8:	mov	r1, #0
   144ec:	mov	r2, r0
   144f0:	mov	r0, #1
   144f4:	bl	11354 <error@plt>
   144f8:	add	r0, r0, #1
   144fc:	bl	1906c <__assert_fail@plt+0x7acc>
   14500:	str	r0, [sp, #20]
   14504:	str	r0, [r4]
   14508:	b	143b4 <__assert_fail@plt+0x2e14>
   1450c:	muleq	r2, r8, r2
   14510:	andeq	ip, r1, r4, lsr #8
   14514:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14518:	sub	sp, sp, #20
   1451c:	mov	r3, #0
   14520:	mov	r7, r1
   14524:	str	r3, [sp, #8]
   14528:	str	r3, [sp, #4]
   1452c:	str	r3, [sp]
   14530:	ldr	r2, [pc, #668]	; 147d4 <__assert_fail@plt+0x3234>
   14534:	mov	r9, r0
   14538:	bl	140ac <__assert_fail@plt+0x2b0c>
   1453c:	ldr	r3, [r7]
   14540:	cmp	r3, #0
   14544:	beq	1477c <__assert_fail@plt+0x31dc>
   14548:	ldr	r2, [r7, #4]
   1454c:	sub	r3, r3, #-1073741823	; 0xc0000001
   14550:	ldr	r6, [r2, r3, lsl #2]
   14554:	lsl	r3, r3, #2
   14558:	cmp	r6, #0
   1455c:	bne	147c0 <__assert_fail@plt+0x3220>
   14560:	add	r0, r3, #8
   14564:	bl	1906c <__assert_fail@plt+0x7acc>
   14568:	ldr	r1, [r7]
   1456c:	mov	sl, r6
   14570:	mov	r5, r1
   14574:	mov	r8, r0
   14578:	ldr	r0, [r9, #28]
   1457c:	cmp	r0, #0
   14580:	beq	14764 <__assert_fail@plt+0x31c4>
   14584:	ldr	r3, [r7, #4]
   14588:	lsl	r4, r0, #2
   1458c:	add	lr, r3, r4
   14590:	sub	r2, r8, #4
   14594:	ldr	ip, [r3], #4
   14598:	cmp	lr, r3
   1459c:	str	ip, [r2, #4]!
   145a0:	bne	14594 <__assert_fail@plt+0x2ff4>
   145a4:	mov	r2, r4
   145a8:	mov	r4, r0
   145ac:	add	ip, r6, r0
   145b0:	cmp	r1, ip
   145b4:	cmphi	r5, r0
   145b8:	bls	145f0 <__assert_fail@plt+0x3050>
   145bc:	ldr	r3, [r7, #4]
   145c0:	add	r2, r8, r0, lsl #2
   145c4:	add	r3, r3, ip, lsl #2
   145c8:	add	r4, r4, #1
   145cc:	add	lr, r6, r4
   145d0:	ldr	ip, [r3], #4
   145d4:	cmp	r1, lr
   145d8:	cmphi	r5, r4
   145dc:	str	ip, [r2], #4
   145e0:	bhi	145c8 <__assert_fail@plt+0x3028>
   145e4:	cmp	r4, r0
   145e8:	bcc	147ac <__assert_fail@plt+0x320c>
   145ec:	lsl	r2, r4, #2
   145f0:	str	sl, [r8, r2]
   145f4:	ldr	fp, [r9, #32]
   145f8:	mov	r3, r8
   145fc:	mov	r2, r4
   14600:	ldr	r1, [r7, #24]
   14604:	mov	r0, r9
   14608:	blx	fp
   1460c:	subs	fp, r0, #0
   14610:	bne	146dc <__assert_fail@plt+0x313c>
   14614:	ldr	r2, [r9, #28]
   14618:	add	ip, r2, #1
   1461c:	cmp	r5, ip
   14620:	bls	14790 <__assert_fail@plt+0x31f0>
   14624:	ldr	r1, [r7, #40]	; 0x28
   14628:	cmp	r5, r1
   1462c:	movcs	r3, #0
   14630:	movcc	r3, #1
   14634:	cmp	r1, #0
   14638:	orreq	r3, r3, #1
   1463c:	cmp	r3, #0
   14640:	ldr	r3, [r7, #36]	; 0x24
   14644:	strne	r5, [r7, #40]	; 0x28
   14648:	moveq	r0, r2
   1464c:	ldrne	r0, [r9, #28]
   14650:	cmp	r3, #0
   14654:	beq	146d4 <__assert_fail@plt+0x3134>
   14658:	ldr	r1, [r7, #40]	; 0x28
   1465c:	cmp	r3, r1
   14660:	bcs	146d4 <__assert_fail@plt+0x3134>
   14664:	sub	r3, r1, r3
   14668:	lsrs	r3, r3, #1
   1466c:	subne	r5, r5, r3
   14670:	subeq	r5, r5, #1
   14674:	cmp	r2, #0
   14678:	beq	14688 <__assert_fail@plt+0x30e8>
   1467c:	cmp	ip, r5
   14680:	bcc	14690 <__assert_fail@plt+0x30f0>
   14684:	mov	r5, ip
   14688:	cmp	r5, #0
   1468c:	moveq	r5, #1
   14690:	ldr	r1, [r7]
   14694:	add	r3, r6, #1
   14698:	sub	r2, r1, r0
   1469c:	cmp	r3, r2
   146a0:	bcc	1457c <__assert_fail@plt+0x2fdc>
   146a4:	mov	r0, r8
   146a8:	bl	19e40 <__assert_fail@plt+0x88a0>
   146ac:	ldr	r0, [r9, #28]
   146b0:	ldr	r1, [r7, #20]
   146b4:	mov	r2, #0
   146b8:	mvn	r3, #0
   146bc:	str	r0, [r7]
   146c0:	str	r1, [r7, #16]
   146c4:	str	r2, [r7, #28]
   146c8:	str	r3, [r7, #32]
   146cc:	add	sp, sp, #20
   146d0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   146d4:	lsr	r5, r5, #1
   146d8:	b	14674 <__assert_fail@plt+0x30d4>
   146dc:	ldr	r3, [r7, #36]	; 0x24
   146e0:	ldr	r1, [r9, #28]
   146e4:	cmp	r5, r3
   146e8:	movhi	r3, r5
   146ec:	strhi	r5, [r7, #36]	; 0x24
   146f0:	movls	r0, r1
   146f4:	ldrhi	r0, [r9, #28]
   146f8:	cmp	r3, #0
   146fc:	beq	1474c <__assert_fail@plt+0x31ac>
   14700:	ldr	r2, [r7, #40]	; 0x28
   14704:	cmp	r2, r3
   14708:	bls	1474c <__assert_fail@plt+0x31ac>
   1470c:	sub	r3, r2, r3
   14710:	lsrs	r3, r3, #1
   14714:	addne	r3, r5, r3
   14718:	addeq	r3, r5, #1
   1471c:	cmp	r1, #0
   14720:	beq	14734 <__assert_fail@plt+0x3194>
   14724:	mov	r5, r3
   14728:	add	r3, r1, #1
   1472c:	cmp	r3, r5
   14730:	bcc	14740 <__assert_fail@plt+0x31a0>
   14734:	cmp	r3, #0
   14738:	movne	r5, r3
   1473c:	moveq	r5, #1
   14740:	add	r6, r6, r4
   14744:	sub	r6, r6, r0
   14748:	b	14690 <__assert_fail@plt+0x30f0>
   1474c:	cmn	r5, #1
   14750:	beq	14770 <__assert_fail@plt+0x31d0>
   14754:	cmp	r1, #0
   14758:	add	r5, r5, #1
   1475c:	bne	14728 <__assert_fail@plt+0x3188>
   14760:	b	14740 <__assert_fail@plt+0x31a0>
   14764:	mov	r2, sl
   14768:	mov	r4, r0
   1476c:	b	145ac <__assert_fail@plt+0x300c>
   14770:	cmp	r1, #0
   14774:	bne	14728 <__assert_fail@plt+0x3188>
   14778:	b	14740 <__assert_fail@plt+0x31a0>
   1477c:	ldr	r3, [pc, #84]	; 147d8 <__assert_fail@plt+0x3238>
   14780:	ldr	r2, [pc, #84]	; 147dc <__assert_fail@plt+0x323c>
   14784:	ldr	r1, [pc, #84]	; 147e0 <__assert_fail@plt+0x3240>
   14788:	ldr	r0, [pc, #84]	; 147e4 <__assert_fail@plt+0x3244>
   1478c:	bl	115a0 <__assert_fail@plt>
   14790:	mov	r2, #5
   14794:	ldr	r1, [pc, #76]	; 147e8 <__assert_fail@plt+0x3248>
   14798:	bl	11288 <dcgettext@plt>
   1479c:	mov	r1, fp
   147a0:	mov	r2, r0
   147a4:	mov	r0, #1
   147a8:	bl	11354 <error@plt>
   147ac:	ldr	r3, [pc, #56]	; 147ec <__assert_fail@plt+0x324c>
   147b0:	mov	r2, #242	; 0xf2
   147b4:	ldr	r1, [pc, #36]	; 147e0 <__assert_fail@plt+0x3240>
   147b8:	ldr	r0, [pc, #48]	; 147f0 <__assert_fail@plt+0x3250>
   147bc:	bl	115a0 <__assert_fail@plt>
   147c0:	ldr	r3, [pc, #16]	; 147d8 <__assert_fail@plt+0x3238>
   147c4:	ldr	r2, [pc, #40]	; 147f4 <__assert_fail@plt+0x3254>
   147c8:	ldr	r1, [pc, #16]	; 147e0 <__assert_fail@plt+0x3240>
   147cc:	ldr	r0, [pc, #36]	; 147f8 <__assert_fail@plt+0x3258>
   147d0:	bl	115a0 <__assert_fail@plt>
   147d4:	andeq	ip, r1, r4, asr #7
   147d8:	andeq	ip, r1, r0, lsr r3
   147dc:	andeq	r0, r0, r5, lsl #2
   147e0:	andeq	ip, r1, ip, lsr #7
   147e4:	andeq	ip, r1, r8, lsr r4
   147e8:	muleq	r1, r8, r4
   147ec:	andeq	ip, r1, ip, lsr r3
   147f0:	andeq	ip, r1, r8, ror r4
   147f4:	andeq	r0, r0, r6, lsl #2
   147f8:	andeq	ip, r1, ip, asr #8
   147fc:	push	{r4, lr}
   14800:	mov	r0, #0
   14804:	bl	11294 <sysconf@plt>
   14808:	cmp	r0, #0
   1480c:	mvnle	r0, #-2147483648	; 0x80000000
   14810:	pop	{r4, pc}
   14814:	ldr	r3, [pc, #64]	; 1485c <__assert_fail@plt+0x32bc>
   14818:	push	{r4, r5, r6, lr}
   1481c:	ldr	r4, [r3]
   14820:	ldr	r3, [r4]
   14824:	cmp	r3, #0
   14828:	beq	14854 <__assert_fail@plt+0x32b4>
   1482c:	mov	r5, #0
   14830:	mov	r0, r3
   14834:	bl	113f0 <strlen@plt>
   14838:	ldr	r3, [r4, #4]!
   1483c:	cmp	r3, #0
   14840:	add	r0, r0, #1
   14844:	add	r5, r5, r0
   14848:	bne	14830 <__assert_fail@plt+0x3290>
   1484c:	mov	r0, r5
   14850:	pop	{r4, r5, r6, pc}
   14854:	mov	r5, r3
   14858:	b	1484c <__assert_fail@plt+0x32ac>
   1485c:			; <UNDEFINED> instruction: 0x0002d1bc
   14860:	push	{r4, r5, r6, lr}
   14864:	mov	r4, r0
   14868:	mov	r6, r1
   1486c:	bl	14814 <__assert_fail@plt+0x3274>
   14870:	mov	r3, #4096	; 0x1000
   14874:	str	r3, [r4, #8]
   14878:	mov	r5, r0
   1487c:	mov	r0, #0
   14880:	bl	11294 <sysconf@plt>
   14884:	mov	r2, #0
   14888:	str	r2, [r4]
   1488c:	cmp	r0, #0
   14890:	mvnle	r0, #-2147483648	; 0x80000000
   14894:	cmp	r5, r0
   14898:	str	r0, [r4, #4]
   1489c:	bhi	148fc <__assert_fail@plt+0x335c>
   148a0:	add	r3, r5, r6
   148a4:	cmp	r3, r0
   148a8:	bcc	148b4 <__assert_fail@plt+0x3314>
   148ac:	mov	r0, #2
   148b0:	pop	{r4, r5, r6, pc}
   148b4:	sub	r3, r0, r5
   148b8:	sub	r1, r3, r6
   148bc:	str	r1, [r4, #4]
   148c0:	lsr	r3, r1, #2
   148c4:	sub	r3, r3, #2
   148c8:	cmp	r3, r2
   148cc:	str	r3, [r4, #16]
   148d0:	beq	14904 <__assert_fail@plt+0x3364>
   148d4:	ldr	r3, [pc, #60]	; 14918 <__assert_fail@plt+0x3378>
   148d8:	str	r2, [r4, #20]
   148dc:	str	r2, [r4, #24]
   148e0:	str	r2, [r4, #28]
   148e4:	str	r2, [r4, #36]	; 0x24
   148e8:	str	r2, [r4, #40]	; 0x28
   148ec:	str	r1, [r4, #12]
   148f0:	mov	r0, r2
   148f4:	str	r3, [r4, #32]
   148f8:	pop	{r4, r5, r6, pc}
   148fc:	mov	r0, #1
   14900:	pop	{r4, r5, r6, pc}
   14904:	ldr	r3, [pc, #16]	; 1491c <__assert_fail@plt+0x337c>
   14908:	ldr	r2, [pc, #16]	; 14920 <__assert_fail@plt+0x3380>
   1490c:	ldr	r1, [pc, #16]	; 14924 <__assert_fail@plt+0x3384>
   14910:	ldr	r0, [pc, #16]	; 14928 <__assert_fail@plt+0x3388>
   14914:	bl	115a0 <__assert_fail@plt>
   14918:	andeq	r4, r1, r4, lsl r0
   1491c:	andeq	ip, r1, r8, asr #6
   14920:	andeq	r0, r0, r6, lsl #4
   14924:	andeq	ip, r1, ip, lsr #7
   14928:	andeq	ip, r1, ip, asr #9
   1492c:	ldr	r3, [r0, #4]
   14930:	cmp	r3, #131072	; 0x20000
   14934:	bcc	14944 <__assert_fail@plt+0x33a4>
   14938:	ldr	r3, [r0, #8]
   1493c:	cmp	r3, #131072	; 0x20000
   14940:	movls	r3, #131072	; 0x20000
   14944:	str	r3, [r0, #12]
   14948:	bx	lr
   1494c:	ldr	r0, [r0, #12]
   14950:	ldr	r3, [pc, #104]	; 149c0 <__assert_fail@plt+0x3420>
   14954:	push	{r4, r5, r6, lr}
   14958:	cmp	r0, r3
   1495c:	mov	r5, #0
   14960:	str	r5, [r1]
   14964:	str	r5, [r1, #16]
   14968:	str	r5, [r1, #4]
   1496c:	str	r5, [r1, #8]
   14970:	str	r5, [r1, #36]	; 0x24
   14974:	str	r5, [r1, #40]	; 0x28
   14978:	bhi	149ac <__assert_fail@plt+0x340c>
   1497c:	add	r0, r0, #1
   14980:	mov	r4, r1
   14984:	mov	r6, r2
   14988:	bl	1906c <__assert_fail@plt+0x7acc>
   1498c:	mvn	r3, #0
   14990:	str	r5, [r4, #20]
   14994:	str	r5, [r4, #16]
   14998:	str	r5, [r4, #28]
   1499c:	str	r6, [r4, #24]
   149a0:	str	r3, [r4, #32]
   149a4:	str	r0, [r4, #12]
   149a8:	pop	{r4, r5, r6, pc}
   149ac:	ldr	r3, [pc, #16]	; 149c4 <__assert_fail@plt+0x3424>
   149b0:	mov	r2, #572	; 0x23c
   149b4:	ldr	r1, [pc, #12]	; 149c8 <__assert_fail@plt+0x3428>
   149b8:	ldr	r0, [pc, #12]	; 149cc <__assert_fail@plt+0x342c>
   149bc:	bl	115a0 <__assert_fail@plt>
   149c0:	svcvc	0x00fff7ff
   149c4:	andeq	ip, r1, ip, asr r3
   149c8:	andeq	ip, r1, ip, lsr #7
   149cc:	andeq	ip, r1, r4, ror #9
   149d0:	ldr	ip, [r0, #28]
   149d4:	ldr	r0, [r1, #20]
   149d8:	mov	r2, #0
   149dc:	mvn	r3, #0
   149e0:	str	ip, [r1]
   149e4:	str	r0, [r1, #16]
   149e8:	str	r2, [r1, #28]
   149ec:	str	r3, [r1, #32]
   149f0:	bx	lr
   149f4:	ldr	r3, [r0]
   149f8:	push	{r4, r5, r6, lr}
   149fc:	cmp	r3, #0
   14a00:	beq	14a60 <__assert_fail@plt+0x34c0>
   14a04:	mov	r4, #0
   14a08:	mov	r5, r0
   14a0c:	mov	r6, r4
   14a10:	mov	r0, r3
   14a14:	bl	113f0 <strlen@plt>
   14a18:	ldr	r3, [r5, #4]!
   14a1c:	add	r4, r4, #1
   14a20:	cmp	r3, #0
   14a24:	add	r6, r6, r0
   14a28:	bne	14a10 <__assert_fail@plt+0x3470>
   14a2c:	mov	r1, r4
   14a30:	ldr	r0, [pc, #52]	; 14a6c <__assert_fail@plt+0x34cc>
   14a34:	bl	1401c <__assert_fail@plt+0x2a7c>
   14a38:	cmp	r0, #0
   14a3c:	beq	14a48 <__assert_fail@plt+0x34a8>
   14a40:	mov	r0, #1
   14a44:	pop	{r4, r5, r6, pc}
   14a48:	mov	r1, r6
   14a4c:	ldr	r0, [pc, #28]	; 14a70 <__assert_fail@plt+0x34d0>
   14a50:	bl	1401c <__assert_fail@plt+0x2a7c>
   14a54:	adds	r0, r0, #0
   14a58:	movne	r0, #1
   14a5c:	pop	{r4, r5, r6, pc}
   14a60:	mov	r4, r3
   14a64:	mov	r6, r3
   14a68:	b	14a2c <__assert_fail@plt+0x348c>
   14a6c:	andeq	ip, r1, r8, lsl #10
   14a70:	andeq	ip, r1, r0, lsr r5
   14a74:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   14a78:	ldr	r0, [pc, #212]	; 14b54 <__assert_fail@plt+0x35b4>
   14a7c:	bl	1557c <__assert_fail@plt+0x3fdc>
   14a80:	subs	r8, r0, #0
   14a84:	beq	14b4c <__assert_fail@plt+0x35ac>
   14a88:	bl	11420 <__errno_location@plt>
   14a8c:	mov	r9, #0
   14a90:	mov	r5, r9
   14a94:	mvn	r6, #0
   14a98:	mov	sl, #1
   14a9c:	mov	r7, r0
   14aa0:	str	r5, [r7]
   14aa4:	mov	r0, r8
   14aa8:	bl	11504 <readdir64@plt>
   14aac:	mov	r1, r5
   14ab0:	subs	r4, r0, #0
   14ab4:	beq	14af4 <__assert_fail@plt+0x3554>
   14ab8:	ldrb	r3, [r4, #19]
   14abc:	add	r0, r4, #19
   14ac0:	cmp	r3, #46	; 0x2e
   14ac4:	bne	14ae0 <__assert_fail@plt+0x3540>
   14ac8:	ldrb	r3, [r4, #20]
   14acc:	cmp	r3, #0
   14ad0:	beq	14aa0 <__assert_fail@plt+0x3500>
   14ad4:	ldrh	r3, [r4, #20]
   14ad8:	cmp	r3, #46	; 0x2e
   14adc:	beq	14aa0 <__assert_fail@plt+0x3500>
   14ae0:	bl	15030 <__assert_fail@plt+0x3a90>
   14ae4:	mov	r9, sl
   14ae8:	cmp	r6, r0
   14aec:	movlt	r6, r0
   14af0:	b	14aa0 <__assert_fail@plt+0x3500>
   14af4:	ldr	r5, [r7]
   14af8:	cmp	r5, #0
   14afc:	bne	14b18 <__assert_fail@plt+0x3578>
   14b00:	mov	r0, r8
   14b04:	bl	11594 <closedir@plt>
   14b08:	cmp	r9, #0
   14b0c:	beq	14b4c <__assert_fail@plt+0x35ac>
   14b10:	mov	r0, r6
   14b14:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   14b18:	ldr	r2, [pc, #52]	; 14b54 <__assert_fail@plt+0x35b4>
   14b1c:	mov	r1, #8
   14b20:	bl	187d8 <__assert_fail@plt+0x7238>
   14b24:	mov	r1, r5
   14b28:	ldr	r2, [pc, #40]	; 14b58 <__assert_fail@plt+0x35b8>
   14b2c:	mvn	r6, #0
   14b30:	mov	r3, r0
   14b34:	mov	r0, r4
   14b38:	bl	11354 <error@plt>
   14b3c:	mov	r0, r8
   14b40:	bl	11594 <closedir@plt>
   14b44:	mov	r0, r6
   14b48:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   14b4c:	mvn	r6, #0
   14b50:	b	14b10 <__assert_fail@plt+0x3570>
   14b54:	andeq	ip, r1, r4, ror r5
   14b58:	andeq	ip, r1, r8, ror #16
   14b5c:	push	{r4, r5, r6, lr}
   14b60:	mov	r4, r1
   14b64:	mov	r1, #1
   14b68:	mov	r6, r0
   14b6c:	bl	19bd0 <__assert_fail@plt+0x8630>
   14b70:	ands	r5, r0, #1
   14b74:	movne	r5, #0
   14b78:	bne	14bb4 <__assert_fail@plt+0x3614>
   14b7c:	ldr	r1, [r4, #4]
   14b80:	add	r2, r4, #8
   14b84:	add	r1, r1, #1
   14b88:	ldr	r0, [r4]
   14b8c:	lsl	r1, r1, #2
   14b90:	bl	151a0 <__assert_fail@plt+0x3c00>
   14b94:	cmp	r0, #0
   14b98:	strne	r0, [r4]
   14b9c:	ldrne	r3, [r4, #4]
   14ba0:	mvneq	r5, #0
   14ba4:	strne	r6, [r0, r3, lsl #2]
   14ba8:	ldrne	r3, [r4, #4]
   14bac:	addne	r3, r3, #1
   14bb0:	strne	r3, [r4, #4]
   14bb4:	mov	r0, r5
   14bb8:	pop	{r4, r5, r6, pc}
   14bbc:	push	{r4, r5, r6, lr}
   14bc0:	mov	r4, r1
   14bc4:	mov	r1, #1
   14bc8:	mov	r5, r0
   14bcc:	bl	19bd0 <__assert_fail@plt+0x8630>
   14bd0:	tst	r0, #1
   14bd4:	bne	14c30 <__assert_fail@plt+0x3690>
   14bd8:	ldmib	r4, {r0, r3}
   14bdc:	cmp	r3, r0
   14be0:	bcs	14c1c <__assert_fail@plt+0x367c>
   14be4:	ldr	r1, [r4]
   14be8:	add	r2, r1, r3, lsl #2
   14bec:	ldr	r1, [r1, r3, lsl #2]
   14bf0:	cmp	r5, r1
   14bf4:	ble	14c28 <__assert_fail@plt+0x3688>
   14bf8:	add	r3, r3, #1
   14bfc:	b	14c10 <__assert_fail@plt+0x3670>
   14c00:	ldr	r1, [r2, #4]!
   14c04:	add	r3, r3, #1
   14c08:	cmp	r5, r1
   14c0c:	ble	14c28 <__assert_fail@plt+0x3688>
   14c10:	cmp	r0, r3
   14c14:	str	r3, [r4, #8]
   14c18:	bne	14c00 <__assert_fail@plt+0x3660>
   14c1c:	mvn	r0, #0
   14c20:	str	r5, [r4, #12]
   14c24:	pop	{r4, r5, r6, pc}
   14c28:	cmp	r5, r1
   14c2c:	bne	14c1c <__assert_fail@plt+0x367c>
   14c30:	mov	r0, #0
   14c34:	pop	{r4, r5, r6, pc}
   14c38:	push	{r4, lr}
   14c3c:	mov	r0, #4
   14c40:	sub	sp, sp, #16
   14c44:	bl	11294 <sysconf@plt>
   14c48:	mov	r1, sp
   14c4c:	cmn	r0, #1
   14c50:	movne	r4, r0
   14c54:	mov	r0, #7
   14c58:	moveq	r4, #20
   14c5c:	bl	112ac <getrlimit64@plt>
   14c60:	cmp	r0, #0
   14c64:	movne	r0, r4
   14c68:	bne	14c84 <__assert_fail@plt+0x36e4>
   14c6c:	ldrd	r0, [sp]
   14c70:	mvn	r3, #0
   14c74:	mvn	r2, #0
   14c78:	cmp	r1, r3
   14c7c:	cmpeq	r0, r2
   14c80:	moveq	r0, r4
   14c84:	add	sp, sp, #16
   14c88:	pop	{r4, pc}
   14c8c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14c90:	subs	fp, r0, #0
   14c94:	sub	sp, sp, #524	; 0x20c
   14c98:	ble	14d48 <__assert_fail@plt+0x37a8>
   14c9c:	mov	sl, #0
   14ca0:	mov	r7, r2
   14ca4:	mov	r8, r1
   14ca8:	mov	r5, sl
   14cac:	mov	r6, #5
   14cb0:	str	fp, [sp, #4]
   14cb4:	ldr	r3, [sp, #4]
   14cb8:	sub	r9, r3, sl
   14cbc:	cmp	r9, #64	; 0x40
   14cc0:	movge	r9, #64	; 0x40
   14cc4:	cmp	r9, #0
   14cc8:	ble	14d54 <__assert_fail@plt+0x37b4>
   14ccc:	add	fp, sp, #8
   14cd0:	mov	r2, sl
   14cd4:	add	r1, fp, r9, lsl #3
   14cd8:	mov	r4, fp
   14cdc:	strh	r6, [r4, #4]
   14ce0:	strh	r5, [r4, #6]
   14ce4:	str	r2, [r4], #8
   14ce8:	cmp	r4, r1
   14cec:	add	r2, r2, #1
   14cf0:	bne	14cdc <__assert_fail@plt+0x373c>
   14cf4:	mov	r2, r5
   14cf8:	mov	r1, r9
   14cfc:	add	r0, sp, #8
   14d00:	bl	112e8 <poll@plt>
   14d04:	cmn	r0, #1
   14d08:	beq	14d6c <__assert_fail@plt+0x37cc>
   14d0c:	ldrsh	r2, [fp, #6]
   14d10:	mov	r1, r7
   14d14:	cmp	r2, #32
   14d18:	beq	14d2c <__assert_fail@plt+0x378c>
   14d1c:	ldr	r0, [fp]
   14d20:	blx	r8
   14d24:	cmp	r0, #0
   14d28:	bne	14d4c <__assert_fail@plt+0x37ac>
   14d2c:	add	fp, fp, #8
   14d30:	cmp	r4, fp
   14d34:	bne	14d0c <__assert_fail@plt+0x376c>
   14d38:	ldr	r3, [sp, #4]
   14d3c:	add	sl, sl, r9
   14d40:	cmp	r3, sl
   14d44:	bgt	14cb4 <__assert_fail@plt+0x3714>
   14d48:	mov	r0, #0
   14d4c:	add	sp, sp, #524	; 0x20c
   14d50:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14d54:	mov	r2, r5
   14d58:	mov	r1, r9
   14d5c:	add	r0, sp, #8
   14d60:	bl	112e8 <poll@plt>
   14d64:	cmn	r0, #1
   14d68:	bne	14d38 <__assert_fail@plt+0x3798>
   14d6c:	mvn	r0, #0
   14d70:	add	sp, sp, #524	; 0x20c
   14d74:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14d78:	push	{lr}		; (str lr, [sp, #-4]!)
   14d7c:	sub	sp, sp, #20
   14d80:	bl	14a74 <__assert_fail@plt+0x34d4>
   14d84:	cmp	r0, #0
   14d88:	blt	14dc4 <__assert_fail@plt+0x3824>
   14d8c:	cmn	r0, #-2147483647	; 0x80000001
   14d90:	mov	r3, #0
   14d94:	add	r2, sp, #4
   14d98:	addne	r0, r0, #1
   14d9c:	ldr	r1, [pc, #40]	; 14dcc <__assert_fail@plt+0x382c>
   14da0:	str	r3, [sp, #4]
   14da4:	str	r3, [sp, #12]
   14da8:	str	r3, [sp, #8]
   14dac:	bl	14c8c <__assert_fail@plt+0x36ec>
   14db0:	ldr	r3, [pc, #24]	; 14dd0 <__assert_fail@plt+0x3830>
   14db4:	ldmib	sp, {r1, r2}
   14db8:	stm	r3, {r1, r2}
   14dbc:	add	sp, sp, #20
   14dc0:	pop	{pc}		; (ldr pc, [sp], #4)
   14dc4:	bl	14c38 <__assert_fail@plt+0x3698>
   14dc8:	b	14d8c <__assert_fail@plt+0x37ec>
   14dcc:	andeq	r4, r1, ip, asr fp
   14dd0:	muleq	r2, ip, r2
   14dd4:	push	{r1, r2, r3}
   14dd8:	push	{r4, r5, r6, r7, r8, r9, lr}
   14ddc:	sub	sp, sp, #8
   14de0:	ldr	r6, [pc, #156]	; 14e84 <__assert_fail@plt+0x38e4>
   14de4:	ldr	r4, [sp, #36]	; 0x24
   14de8:	mov	r8, r0
   14dec:	ldrb	r7, [r6, #8]
   14df0:	ands	r5, r4, #64	; 0x40
   14df4:	addne	r3, sp, #40	; 0x28
   14df8:	strne	r3, [sp, #4]
   14dfc:	ldrne	r5, [sp, #40]	; 0x28
   14e00:	cmp	r7, #0
   14e04:	beq	14e4c <__assert_fail@plt+0x38ac>
   14e08:	orr	r1, r4, #524288	; 0x80000
   14e0c:	mov	r2, r5
   14e10:	mov	r0, r8
   14e14:	bl	1560c <__assert_fail@plt+0x406c>
   14e18:	subs	r4, r0, #0
   14e1c:	blt	14e2c <__assert_fail@plt+0x388c>
   14e20:	ldrb	r3, [r6, #9]
   14e24:	cmp	r3, #0
   14e28:	beq	14e40 <__assert_fail@plt+0x38a0>
   14e2c:	mov	r0, r4
   14e30:	add	sp, sp, #8
   14e34:	pop	{r4, r5, r6, r7, r8, r9, lr}
   14e38:	add	sp, sp, #12
   14e3c:	bx	lr
   14e40:	mov	r1, #1
   14e44:	bl	152d4 <__assert_fail@plt+0x3d34>
   14e48:	b	14e2c <__assert_fail@plt+0x388c>
   14e4c:	mov	r1, #524288	; 0x80000
   14e50:	ldr	r0, [pc, #48]	; 14e88 <__assert_fail@plt+0x38e8>
   14e54:	bl	1560c <__assert_fail@plt+0x406c>
   14e58:	subs	r9, r0, #0
   14e5c:	blt	14e74 <__assert_fail@plt+0x38d4>
   14e60:	mov	r1, #1
   14e64:	bl	19bd0 <__assert_fail@plt+0x8630>
   14e68:	and	r7, r0, #1
   14e6c:	mov	r0, r9
   14e70:	bl	11588 <close@plt>
   14e74:	mov	r3, #1
   14e78:	strb	r7, [r6, #9]
   14e7c:	strb	r3, [r6, #8]
   14e80:	b	14e08 <__assert_fail@plt+0x3868>
   14e84:	muleq	r2, ip, r2
   14e88:	andeq	ip, r1, r4, lsl #11
   14e8c:	push	{r4, lr}
   14e90:	ldr	r4, [pc, #20]	; 14eac <__assert_fail@plt+0x390c>
   14e94:	ldr	r0, [r4]
   14e98:	bl	19e40 <__assert_fail@plt+0x88a0>
   14e9c:	mov	r3, #0
   14ea0:	str	r3, [r4]
   14ea4:	str	r3, [r4, #4]
   14ea8:	pop	{r4, pc}
   14eac:	muleq	r2, ip, r2
   14eb0:	push	{r4, lr}
   14eb4:	ldr	r0, [pc, #12]	; 14ec8 <__assert_fail@plt+0x3928>
   14eb8:	bl	11378 <getenv@plt>
   14ebc:	adds	r0, r0, #0
   14ec0:	movne	r0, #1
   14ec4:	pop	{r4, pc}
   14ec8:	andeq	ip, r1, r8, lsl #11
   14ecc:	ldr	r3, [pc, #152]	; 14f6c <__assert_fail@plt+0x39cc>
   14ed0:	push	{r4, r5, r6, lr}
   14ed4:	sub	sp, sp, #16
   14ed8:	ldr	r6, [r3]
   14edc:	ldr	r5, [r3, #4]
   14ee0:	bl	14a74 <__assert_fail@plt+0x34d4>
   14ee4:	cmp	r0, #0
   14ee8:	blt	14f64 <__assert_fail@plt+0x39c4>
   14eec:	cmn	r0, #-2147483647	; 0x80000001
   14ef0:	addne	r0, r0, #1
   14ef4:	mov	r4, #0
   14ef8:	mvn	r3, #0
   14efc:	mov	r2, sp
   14f00:	ldr	r1, [pc, #104]	; 14f70 <__assert_fail@plt+0x39d0>
   14f04:	str	r5, [sp, #4]
   14f08:	str	r6, [sp]
   14f0c:	str	r4, [sp, #8]
   14f10:	str	r3, [sp, #12]
   14f14:	bl	14c8c <__assert_fail@plt+0x36ec>
   14f18:	ldr	r5, [sp, #12]
   14f1c:	cmp	r5, r4
   14f20:	blt	14f5c <__assert_fail@plt+0x39bc>
   14f24:	mov	r2, #5
   14f28:	ldr	r1, [pc, #68]	; 14f74 <__assert_fail@plt+0x39d4>
   14f2c:	mov	r0, r4
   14f30:	bl	11288 <dcgettext@plt>
   14f34:	mov	r3, r5
   14f38:	mov	r1, r4
   14f3c:	mov	r2, r0
   14f40:	mov	r0, r4
   14f44:	bl	11354 <error@plt>
   14f48:	ldr	r3, [pc, #40]	; 14f78 <__assert_fail@plt+0x39d8>
   14f4c:	mov	r2, #396	; 0x18c
   14f50:	ldr	r1, [pc, #36]	; 14f7c <__assert_fail@plt+0x39dc>
   14f54:	ldr	r0, [pc, #36]	; 14f80 <__assert_fail@plt+0x39e0>
   14f58:	bl	115a0 <__assert_fail@plt>
   14f5c:	add	sp, sp, #16
   14f60:	pop	{r4, r5, r6, pc}
   14f64:	bl	14c38 <__assert_fail@plt+0x3698>
   14f68:	b	14eec <__assert_fail@plt+0x394c>
   14f6c:	muleq	r2, ip, r2
   14f70:			; <UNDEFINED> instruction: 0x00014bbc
   14f74:	andeq	ip, r1, r4, lsr #11
   14f78:	andeq	ip, r1, r8, asr r5
   14f7c:	andeq	ip, r1, ip, lsr r6
   14f80:	andeq	ip, r1, r8, asr #12
   14f84:	ldr	r3, [pc, #136]	; 15014 <__assert_fail@plt+0x3a74>
   14f88:	push	{r4, r5, r6, r7, r8, lr}
   14f8c:	mov	r5, r0
   14f90:	sub	sp, sp, #16
   14f94:	ldr	r0, [r3]
   14f98:	bl	19da4 <__assert_fail@plt+0x8804>
   14f9c:	ldr	ip, [pc, #116]	; 15018 <__assert_fail@plt+0x3a78>
   14fa0:	ldr	r3, [pc, #116]	; 1501c <__assert_fail@plt+0x3a7c>
   14fa4:	mov	r2, #5
   14fa8:	ldr	r1, [pc, #112]	; 15020 <__assert_fail@plt+0x3a80>
   14fac:	mov	r0, #0
   14fb0:	ldr	r4, [ip]
   14fb4:	ldr	r7, [r3]
   14fb8:	bl	11288 <dcgettext@plt>
   14fbc:	mov	r2, #5
   14fc0:	ldr	r1, [pc, #92]	; 15024 <__assert_fail@plt+0x3a84>
   14fc4:	mov	r8, r0
   14fc8:	mov	r0, #0
   14fcc:	bl	11288 <dcgettext@plt>
   14fd0:	mov	r2, #5
   14fd4:	ldr	r1, [pc, #76]	; 15028 <__assert_fail@plt+0x3a88>
   14fd8:	mov	r6, r0
   14fdc:	mov	r0, #0
   14fe0:	bl	11288 <dcgettext@plt>
   14fe4:	mov	r2, #0
   14fe8:	str	r2, [sp, #12]
   14fec:	str	r8, [sp]
   14ff0:	mov	r3, r7
   14ff4:	str	r6, [sp, #4]
   14ff8:	mov	r1, r5
   14ffc:	ldr	r2, [pc, #40]	; 1502c <__assert_fail@plt+0x3a8c>
   15000:	str	r0, [sp, #8]
   15004:	mov	r0, r4
   15008:	bl	18f88 <__assert_fail@plt+0x79e8>
   1500c:	add	sp, sp, #16
   15010:	pop	{r4, r5, r6, r7, r8, pc}
   15014:	ldrdeq	sp, [r2], -r0
   15018:	ldrdeq	sp, [r2], -ip
   1501c:	andeq	sp, r2, r0, ror r1
   15020:	andeq	ip, r1, r4, asr r6
   15024:	andeq	ip, r1, r4, ror #12
   15028:	andeq	ip, r1, r4, ror r6
   1502c:	andeq	ip, r1, r4, lsl #13
   15030:	push	{r4, r5, r6, r7, r8, lr}
   15034:	sub	sp, sp, #16
   15038:	mov	r4, r0
   1503c:	mov	r7, r1
   15040:	bl	11420 <__errno_location@plt>
   15044:	mov	r6, #0
   15048:	mov	r2, #10
   1504c:	add	r1, sp, #12
   15050:	str	r6, [r0]
   15054:	mov	r5, r0
   15058:	mov	r0, r4
   1505c:	bl	111ec <strtol@plt>
   15060:	sub	r3, r0, #-2147483647	; 0x80000001
   15064:	cmn	r3, #3
   15068:	bls	15080 <__assert_fail@plt+0x3ae0>
   1506c:	ldr	r1, [r5]
   15070:	ldr	r2, [pc, #184]	; 15130 <__assert_fail@plt+0x3b90>
   15074:	mov	r3, r4
   15078:	mov	r0, #1
   1507c:	bl	11354 <error@plt>
   15080:	ldr	r3, [sp, #12]
   15084:	ldrb	r8, [r3]
   15088:	cmp	r8, #0
   1508c:	bne	150a0 <__assert_fail@plt+0x3b00>
   15090:	cmp	r4, r3
   15094:	beq	150f4 <__assert_fail@plt+0x3b54>
   15098:	add	sp, sp, #16
   1509c:	pop	{r4, r5, r6, r7, r8, pc}
   150a0:	mov	r2, #5
   150a4:	ldr	r1, [pc, #136]	; 15134 <__assert_fail@plt+0x3b94>
   150a8:	mov	r0, r6
   150ac:	ldr	r5, [r5]
   150b0:	bl	11288 <dcgettext@plt>
   150b4:	ldr	r2, [sp, #12]
   150b8:	mov	r1, r7
   150bc:	mov	r8, r0
   150c0:	mov	r0, r6
   150c4:	bl	187d8 <__assert_fail@plt+0x7238>
   150c8:	mov	r2, r4
   150cc:	mov	r1, r7
   150d0:	mov	r6, r0
   150d4:	mov	r0, #1
   150d8:	bl	187d8 <__assert_fail@plt+0x7238>
   150dc:	mov	r3, r6
   150e0:	mov	r2, r8
   150e4:	mov	r1, r5
   150e8:	str	r0, [sp]
   150ec:	mov	r0, #1
   150f0:	bl	11354 <error@plt>
   150f4:	mov	r2, #5
   150f8:	ldr	r1, [pc, #56]	; 15138 <__assert_fail@plt+0x3b98>
   150fc:	mov	r0, r8
   15100:	ldr	r5, [r5]
   15104:	bl	11288 <dcgettext@plt>
   15108:	mov	r2, r4
   1510c:	mov	r1, r7
   15110:	mov	r6, r0
   15114:	mov	r0, r8
   15118:	bl	187d8 <__assert_fail@plt+0x7238>
   1511c:	mov	r2, r6
   15120:	mov	r1, r5
   15124:	mov	r3, r0
   15128:	mov	r0, #1
   1512c:	b	1507c <__assert_fail@plt+0x3adc>
   15130:	andeq	ip, r1, r8, ror #16
   15134:	andeq	ip, r1, r4, lsr #13
   15138:	andeq	ip, r1, r0, asr #13
   1513c:	push	{r4, r5, lr}
   15140:	mov	r2, #5
   15144:	sub	sp, sp, #20
   15148:	mov	r4, r0
   1514c:	mov	r5, r1
   15150:	mov	r0, #0
   15154:	ldr	r1, [pc, #48]	; 1518c <__assert_fail@plt+0x3bec>
   15158:	bl	11288 <dcgettext@plt>
   1515c:	ldr	ip, [pc, #44]	; 15190 <__assert_fail@plt+0x3bf0>
   15160:	ldr	r1, [pc, #44]	; 15194 <__assert_fail@plt+0x3bf4>
   15164:	ldr	r2, [pc, #44]	; 15198 <__assert_fail@plt+0x3bf8>
   15168:	mov	r3, r5
   1516c:	stmib	sp, {r1, ip}
   15170:	str	r2, [sp]
   15174:	ldr	r2, [pc, #32]	; 1519c <__assert_fail@plt+0x3bfc>
   15178:	mov	r1, r0
   1517c:	mov	r0, r4
   15180:	bl	11414 <fprintf@plt>
   15184:	add	sp, sp, #20
   15188:	pop	{r4, r5, pc}
   1518c:	ldrdeq	ip, [r1], -r8
   15190:	ldrdeq	ip, [r1], -r0
   15194:	andeq	ip, r1, r8, ror #15
   15198:	andeq	ip, r1, r4, lsl #13
   1519c:	andeq	ip, r1, r8, lsr #15
   151a0:	push	{r4, r5, r6, r7, r8, lr}
   151a4:	mov	r4, r1
   151a8:	mov	r5, r0
   151ac:	mov	r7, r2
   151b0:	bl	11420 <__errno_location@plt>
   151b4:	cmp	r4, #0
   151b8:	ldr	r8, [r0]
   151bc:	beq	1527c <__assert_fail@plt+0x3cdc>
   151c0:	ldr	r1, [r7]
   151c4:	mov	r6, r0
   151c8:	cmp	r1, #0
   151cc:	bne	15224 <__assert_fail@plt+0x3c84>
   151d0:	cmp	r4, #16
   151d4:	movls	r0, #16
   151d8:	bls	15204 <__assert_fail@plt+0x3c64>
   151dc:	mov	r0, #32
   151e0:	b	151f4 <__assert_fail@plt+0x3c54>
   151e4:	lsl	r3, r0, #1
   151e8:	cmp	r3, r0
   151ec:	bcc	15248 <__assert_fail@plt+0x3ca8>
   151f0:	mov	r0, r3
   151f4:	cmp	r4, r0
   151f8:	bhi	151e4 <__assert_fail@plt+0x3c44>
   151fc:	cmp	r1, #0
   15200:	bne	15254 <__assert_fail@plt+0x3cb4>
   15204:	cmp	r5, #0
   15208:	bne	15290 <__assert_fail@plt+0x3cf0>
   1520c:	str	r0, [r7]
   15210:	bl	19f38 <__assert_fail@plt+0x8998>
   15214:	cmp	r0, #0
   15218:	beq	15274 <__assert_fail@plt+0x3cd4>
   1521c:	str	r8, [r6]
   15220:	pop	{r4, r5, r6, r7, r8, pc}
   15224:	cmp	r4, r1
   15228:	bls	15240 <__assert_fail@plt+0x3ca0>
   1522c:	lsl	r0, r1, #1
   15230:	cmp	r1, r0
   15234:	bls	151f4 <__assert_fail@plt+0x3c54>
   15238:	mov	r0, r4
   1523c:	b	1525c <__assert_fail@plt+0x3cbc>
   15240:	mov	r0, r5
   15244:	b	15214 <__assert_fail@plt+0x3c74>
   15248:	cmp	r1, #0
   1524c:	mov	r0, r4
   15250:	beq	15204 <__assert_fail@plt+0x3c64>
   15254:	cmp	r1, r0
   15258:	beq	15240 <__assert_fail@plt+0x3ca0>
   1525c:	str	r0, [r7]
   15260:	mov	r1, r0
   15264:	mov	r0, r5
   15268:	bl	19fb8 <__assert_fail@plt+0x8a18>
   1526c:	cmp	r0, #0
   15270:	bne	1521c <__assert_fail@plt+0x3c7c>
   15274:	mov	r0, #0
   15278:	pop	{r4, r5, r6, r7, r8, pc}
   1527c:	ldr	r3, [pc, #32]	; 152a4 <__assert_fail@plt+0x3d04>
   15280:	mov	r2, #71	; 0x47
   15284:	ldr	r1, [pc, #28]	; 152a8 <__assert_fail@plt+0x3d08>
   15288:	ldr	r0, [pc, #28]	; 152ac <__assert_fail@plt+0x3d0c>
   1528c:	bl	115a0 <__assert_fail@plt>
   15290:	ldr	r3, [pc, #12]	; 152a4 <__assert_fail@plt+0x3d04>
   15294:	mov	r2, #79	; 0x4f
   15298:	ldr	r1, [pc, #8]	; 152a8 <__assert_fail@plt+0x3d08>
   1529c:	ldr	r0, [pc, #12]	; 152b0 <__assert_fail@plt+0x3d10>
   152a0:	bl	115a0 <__assert_fail@plt>
   152a4:	andeq	ip, r1, r8, lsl r8
   152a8:	andeq	ip, r1, r4, lsr #16
   152ac:	andeq	ip, r1, r0, lsr r8
   152b0:	andeq	ip, r1, ip, lsr r8
   152b4:	push	{r4, lr}
   152b8:	mov	r4, r0
   152bc:	bl	151a0 <__assert_fail@plt+0x3c00>
   152c0:	cmp	r0, #0
   152c4:	popne	{r4, pc}
   152c8:	mov	r0, r4
   152cc:	bl	19e40 <__assert_fail@plt+0x88a0>
   152d0:	bl	195b4 <__assert_fail@plt+0x8014>
   152d4:	push	{r4, r5, r6, lr}
   152d8:	mov	r2, #0
   152dc:	mov	r4, r1
   152e0:	mov	r1, #1
   152e4:	mov	r5, r0
   152e8:	bl	19bd0 <__assert_fail@plt+0x8630>
   152ec:	cmp	r0, #0
   152f0:	blt	15330 <__assert_fail@plt+0x3d90>
   152f4:	cmp	r4, #0
   152f8:	orrne	r2, r0, #1
   152fc:	biceq	r2, r0, #1
   15300:	cmp	r2, r0
   15304:	beq	15328 <__assert_fail@plt+0x3d88>
   15308:	mov	r0, r5
   1530c:	mov	r1, #2
   15310:	bl	19bd0 <__assert_fail@plt+0x8630>
   15314:	cmn	r0, #1
   15318:	movne	r0, #0
   1531c:	moveq	r0, #1
   15320:	rsb	r0, r0, #0
   15324:	pop	{r4, r5, r6, pc}
   15328:	mov	r0, #0
   1532c:	pop	{r4, r5, r6, pc}
   15330:	mvn	r0, #0
   15334:	pop	{r4, r5, r6, pc}
   15338:	mov	r2, #0
   1533c:	ldr	r1, [pc]	; 15344 <__assert_fail@plt+0x3da4>
   15340:	b	19bd0 <__assert_fail@plt+0x8630>
   15344:	andeq	r0, r0, r6, lsl #8
   15348:	ldr	r3, [pc, #4]	; 15354 <__assert_fail@plt+0x3db4>
   1534c:	str	r0, [r3]
   15350:	bx	lr
   15354:	andeq	sp, r2, r8, lsr #5
   15358:	push	{r4, r5, r6, lr}
   1535c:	sub	sp, sp, #8
   15360:	ldr	r4, [pc, #248]	; 15460 <__assert_fail@plt+0x3ec0>
   15364:	ldr	r5, [r4]
   15368:	mov	r0, r5
   1536c:	bl	19e04 <__assert_fail@plt+0x8864>
   15370:	cmp	r0, #0
   15374:	moveq	r4, r0
   15378:	bne	153a4 <__assert_fail@plt+0x3e04>
   1537c:	mov	r0, r5
   15380:	bl	1a060 <__assert_fail@plt+0x8ac0>
   15384:	cmp	r0, #0
   15388:	moveq	r0, r4
   1538c:	orrne	r0, r4, #1
   15390:	cmp	r0, #0
   15394:	bne	153d0 <__assert_fail@plt+0x3e30>
   15398:	add	sp, sp, #8
   1539c:	pop	{r4, r5, r6, lr}
   153a0:	b	15498 <__assert_fail@plt+0x3ef8>
   153a4:	mov	r3, #1
   153a8:	str	r3, [sp]
   153ac:	mov	r0, r5
   153b0:	mov	r2, #0
   153b4:	mov	r3, #0
   153b8:	bl	19e98 <__assert_fail@plt+0x88f8>
   153bc:	cmp	r0, #0
   153c0:	beq	1542c <__assert_fail@plt+0x3e8c>
   153c4:	ldr	r5, [r4]
   153c8:	mov	r4, #0
   153cc:	b	1537c <__assert_fail@plt+0x3ddc>
   153d0:	mov	r2, #5
   153d4:	ldr	r1, [pc, #136]	; 15464 <__assert_fail@plt+0x3ec4>
   153d8:	mov	r0, #0
   153dc:	bl	11288 <dcgettext@plt>
   153e0:	ldr	r2, [pc, #128]	; 15468 <__assert_fail@plt+0x3ec8>
   153e4:	ldr	r4, [r2]
   153e8:	cmp	r4, #0
   153ec:	mov	r5, r0
   153f0:	beq	15444 <__assert_fail@plt+0x3ea4>
   153f4:	bl	11420 <__errno_location@plt>
   153f8:	ldr	r6, [r0]
   153fc:	mov	r0, r4
   15400:	bl	188ec <__assert_fail@plt+0x734c>
   15404:	mov	r1, r6
   15408:	str	r5, [sp]
   1540c:	ldr	r2, [pc, #88]	; 1546c <__assert_fail@plt+0x3ecc>
   15410:	mov	r3, r0
   15414:	mov	r0, #0
   15418:	bl	11354 <error@plt>
   1541c:	bl	15498 <__assert_fail@plt+0x3ef8>
   15420:	ldr	r3, [pc, #72]	; 15470 <__assert_fail@plt+0x3ed0>
   15424:	ldr	r0, [r3]
   15428:	bl	11240 <_exit@plt>
   1542c:	ldr	r0, [r4]
   15430:	bl	19da4 <__assert_fail@plt+0x8804>
   15434:	ldr	r5, [r4]
   15438:	adds	r4, r0, #0
   1543c:	movne	r4, #1
   15440:	b	1537c <__assert_fail@plt+0x3ddc>
   15444:	bl	11420 <__errno_location@plt>
   15448:	mov	r3, r5
   1544c:	ldr	r2, [pc, #32]	; 15474 <__assert_fail@plt+0x3ed4>
   15450:	ldr	r1, [r0]
   15454:	mov	r0, r4
   15458:	bl	11354 <error@plt>
   1545c:	b	1541c <__assert_fail@plt+0x3e7c>
   15460:	ldrdeq	sp, [r2], -r8
   15464:	andeq	ip, r1, r0, asr r8
   15468:	andeq	sp, r2, r8, lsr #5
   1546c:	andeq	ip, r1, r4, ror #16
   15470:	andeq	sp, r2, r4, ror r1
   15474:	andeq	ip, r1, r8, ror #16
   15478:	ldr	r3, [pc, #4]	; 15484 <__assert_fail@plt+0x3ee4>
   1547c:	str	r0, [r3]
   15480:	bx	lr
   15484:	andeq	sp, r2, ip, lsr #5
   15488:	ldr	r3, [pc, #4]	; 15494 <__assert_fail@plt+0x3ef4>
   1548c:	strb	r0, [r3, #4]
   15490:	bx	lr
   15494:	andeq	sp, r2, ip, lsr #5
   15498:	ldr	r3, [pc, #192]	; 15560 <__assert_fail@plt+0x3fc0>
   1549c:	push	{r4, r5, r6, lr}
   154a0:	sub	sp, sp, #8
   154a4:	ldr	r0, [r3]
   154a8:	bl	1a060 <__assert_fail@plt+0x8ac0>
   154ac:	cmp	r0, #0
   154b0:	beq	154d4 <__assert_fail@plt+0x3f34>
   154b4:	ldr	r4, [pc, #168]	; 15564 <__assert_fail@plt+0x3fc4>
   154b8:	ldrb	r3, [r4, #4]
   154bc:	cmp	r3, #0
   154c0:	beq	154f0 <__assert_fail@plt+0x3f50>
   154c4:	bl	11420 <__errno_location@plt>
   154c8:	ldr	r3, [r0]
   154cc:	cmp	r3, #32
   154d0:	bne	154f0 <__assert_fail@plt+0x3f50>
   154d4:	ldr	r3, [pc, #140]	; 15568 <__assert_fail@plt+0x3fc8>
   154d8:	ldr	r0, [r3]
   154dc:	bl	1a060 <__assert_fail@plt+0x8ac0>
   154e0:	cmp	r0, #0
   154e4:	bne	15538 <__assert_fail@plt+0x3f98>
   154e8:	add	sp, sp, #8
   154ec:	pop	{r4, r5, r6, pc}
   154f0:	mov	r2, #5
   154f4:	ldr	r1, [pc, #112]	; 1556c <__assert_fail@plt+0x3fcc>
   154f8:	mov	r0, #0
   154fc:	bl	11288 <dcgettext@plt>
   15500:	ldr	r4, [r4]
   15504:	cmp	r4, #0
   15508:	mov	r5, r0
   1550c:	beq	15544 <__assert_fail@plt+0x3fa4>
   15510:	bl	11420 <__errno_location@plt>
   15514:	ldr	r6, [r0]
   15518:	mov	r0, r4
   1551c:	bl	188ec <__assert_fail@plt+0x734c>
   15520:	mov	r1, r6
   15524:	str	r5, [sp]
   15528:	ldr	r2, [pc, #64]	; 15570 <__assert_fail@plt+0x3fd0>
   1552c:	mov	r3, r0
   15530:	mov	r0, #0
   15534:	bl	11354 <error@plt>
   15538:	ldr	r3, [pc, #52]	; 15574 <__assert_fail@plt+0x3fd4>
   1553c:	ldr	r0, [r3]
   15540:	bl	11240 <_exit@plt>
   15544:	bl	11420 <__errno_location@plt>
   15548:	mov	r3, r5
   1554c:	ldr	r2, [pc, #36]	; 15578 <__assert_fail@plt+0x3fd8>
   15550:	ldr	r1, [r0]
   15554:	mov	r0, r4
   15558:	bl	11354 <error@plt>
   1555c:	b	15538 <__assert_fail@plt+0x3f98>
   15560:	ldrdeq	sp, [r2], -ip
   15564:	andeq	sp, r2, ip, lsr #5
   15568:	ldrdeq	sp, [r2], -r0
   1556c:	andeq	ip, r1, ip, ror #16
   15570:	andeq	ip, r1, r4, ror #16
   15574:	andeq	sp, r2, r4, ror r1
   15578:	andeq	ip, r1, r8, ror #16
   1557c:	push	{r4, r5, r6, r7, r8, lr}
   15580:	bl	11360 <opendir@plt>
   15584:	subs	r4, r0, #0
   15588:	beq	15598 <__assert_fail@plt+0x3ff8>
   1558c:	bl	11528 <dirfd@plt>
   15590:	cmp	r0, #2
   15594:	bls	155a0 <__assert_fail@plt+0x4000>
   15598:	mov	r0, r4
   1559c:	pop	{r4, r5, r6, r7, r8, pc}
   155a0:	mov	r2, #3
   155a4:	ldr	r1, [pc, #92]	; 15608 <__assert_fail@plt+0x4068>
   155a8:	bl	19bd0 <__assert_fail@plt+0x8630>
   155ac:	subs	r8, r0, #0
   155b0:	blt	155e8 <__assert_fail@plt+0x4048>
   155b4:	bl	11510 <fdopendir@plt>
   155b8:	mov	r6, r0
   155bc:	bl	11420 <__errno_location@plt>
   155c0:	cmp	r6, #0
   155c4:	mov	r5, r0
   155c8:	ldr	r7, [r0]
   155cc:	beq	155fc <__assert_fail@plt+0x405c>
   155d0:	mov	r0, r4
   155d4:	mov	r4, r6
   155d8:	bl	11594 <closedir@plt>
   155dc:	str	r7, [r5]
   155e0:	mov	r0, r4
   155e4:	pop	{r4, r5, r6, r7, r8, pc}
   155e8:	bl	11420 <__errno_location@plt>
   155ec:	mov	r6, #0
   155f0:	mov	r5, r0
   155f4:	ldr	r7, [r0]
   155f8:	b	155d0 <__assert_fail@plt+0x4030>
   155fc:	mov	r0, r8
   15600:	bl	11588 <close@plt>
   15604:	b	155d0 <__assert_fail@plt+0x4030>
   15608:	andeq	r0, r0, r6, lsl #8
   1560c:	push	{r1, r2, r3}
   15610:	push	{lr}		; (str lr, [sp, #-4]!)
   15614:	sub	sp, sp, #8
   15618:	ldr	r1, [sp, #12]
   1561c:	ands	r2, r1, #64	; 0x40
   15620:	addne	r3, sp, #16
   15624:	ldrne	r2, [sp, #16]
   15628:	strne	r3, [sp, #4]
   1562c:	bl	1136c <open64@plt>
   15630:	bl	18b30 <__assert_fail@plt+0x7590>
   15634:	add	sp, sp, #8
   15638:	pop	{lr}		; (ldr lr, [sp], #4)
   1563c:	add	sp, sp, #12
   15640:	bx	lr
   15644:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   15648:	mov	r6, r2
   1564c:	lsrs	r2, r6, #30
   15650:	movne	ip, #1
   15654:	moveq	ip, #0
   15658:	lsls	r2, r6, #2
   1565c:	add	fp, sp, #28
   15660:	bmi	1566c <__assert_fail@plt+0x40cc>
   15664:	cmp	ip, #0
   15668:	beq	15678 <__assert_fail@plt+0x40d8>
   1566c:	mov	r0, #0
   15670:	sub	sp, fp, #28
   15674:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   15678:	cmp	r2, #4016	; 0xfb0
   1567c:	mov	r5, r0
   15680:	mov	r4, r1
   15684:	mov	r7, r3
   15688:	bls	1575c <__assert_fail@plt+0x41bc>
   1568c:	mov	r0, r2
   15690:	bl	1a170 <__assert_fail@plt+0x8bd0>
   15694:	cmp	r0, #0
   15698:	beq	1566c <__assert_fail@plt+0x40cc>
   1569c:	cmp	r6, #2
   156a0:	mov	r3, #1
   156a4:	str	r3, [r0, #4]
   156a8:	movhi	r8, r4
   156ac:	addhi	r2, r0, #8
   156b0:	movhi	ip, #0
   156b4:	movhi	r3, #2
   156b8:	bls	15704 <__assert_fail@plt+0x4164>
   156bc:	ldrb	r1, [r8, #1]!
   156c0:	ldrb	lr, [r4, ip]
   156c4:	cmp	lr, r1
   156c8:	bne	156e4 <__assert_fail@plt+0x4144>
   156cc:	b	15774 <__assert_fail@plt+0x41d4>
   156d0:	ldr	lr, [r0, ip, lsl #2]
   156d4:	sub	ip, ip, lr
   156d8:	ldrb	lr, [r4, ip]
   156dc:	cmp	lr, r1
   156e0:	beq	15774 <__assert_fail@plt+0x41d4>
   156e4:	cmp	ip, #0
   156e8:	bne	156d0 <__assert_fail@plt+0x4130>
   156ec:	mov	ip, #0
   156f0:	str	r3, [r2]
   156f4:	add	r3, r3, #1
   156f8:	cmp	r6, r3
   156fc:	add	r2, r2, #4
   15700:	bne	156bc <__assert_fail@plt+0x411c>
   15704:	mov	r2, #0
   15708:	str	r2, [r7]
   1570c:	ldrb	r3, [r5]
   15710:	mov	ip, r5
   15714:	cmp	r3, #0
   15718:	beq	1574c <__assert_fail@plt+0x41ac>
   1571c:	ldrb	r1, [r4, r2]
   15720:	cmp	r1, r3
   15724:	beq	15784 <__assert_fail@plt+0x41e4>
   15728:	cmp	r2, #0
   1572c:	addeq	r5, r5, #1
   15730:	ldrbeq	r3, [ip, #1]
   15734:	ldrne	r1, [r0, r2, lsl #2]
   15738:	addeq	ip, ip, #1
   1573c:	addne	r5, r5, r1
   15740:	subne	r2, r2, r1
   15744:	cmp	r3, #0
   15748:	bne	1571c <__assert_fail@plt+0x417c>
   1574c:	bl	1a1c0 <__assert_fail@plt+0x8c20>
   15750:	mov	r0, #1
   15754:	sub	sp, fp, #28
   15758:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1575c:	add	r3, r2, #29
   15760:	bic	r3, r3, #7
   15764:	sub	sp, sp, r3
   15768:	add	r0, sp, #15
   1576c:	bic	r0, r0, #15
   15770:	b	15694 <__assert_fail@plt+0x40f4>
   15774:	add	ip, ip, #1
   15778:	sub	r1, r3, ip
   1577c:	str	r1, [r2]
   15780:	b	156f4 <__assert_fail@plt+0x4154>
   15784:	add	r2, r2, #1
   15788:	cmp	r6, r2
   1578c:	add	r1, ip, #1
   15790:	ldrbne	r3, [ip, #1]
   15794:	movne	ip, r1
   15798:	bne	15714 <__assert_fail@plt+0x4174>
   1579c:	str	r5, [r7]
   157a0:	bl	1a1c0 <__assert_fail@plt+0x8c20>
   157a4:	mov	r0, #1
   157a8:	b	15754 <__assert_fail@plt+0x41b4>
   157ac:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   157b0:	add	fp, sp, #32
   157b4:	sub	sp, sp, #188	; 0xbc
   157b8:	str	r0, [fp, #-212]	; 0xffffff2c
   157bc:	mov	r0, r1
   157c0:	mov	r4, r1
   157c4:	str	r2, [fp, #-220]	; 0xffffff24
   157c8:	bl	1a284 <__assert_fail@plt+0x8ce4>
   157cc:	mov	r3, #44	; 0x2c
   157d0:	str	r0, [fp, #-208]	; 0xffffff30
   157d4:	umull	r0, r1, r0, r3
   157d8:	adds	r2, r1, #0
   157dc:	movne	r2, #1
   157e0:	cmp	r0, #0
   157e4:	blt	157f0 <__assert_fail@plt+0x4250>
   157e8:	cmp	r2, #0
   157ec:	beq	157fc <__assert_fail@plt+0x425c>
   157f0:	mov	r0, #0
   157f4:	sub	sp, fp, #32
   157f8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   157fc:	ldr	r2, [fp, #-208]	; 0xffffff30
   15800:	mul	r0, r3, r2
   15804:	cmp	r0, #4016	; 0xfb0
   15808:	bls	15a64 <__assert_fail@plt+0x44c4>
   1580c:	bl	1a170 <__assert_fail@plt+0x8bd0>
   15810:	str	r0, [fp, #-216]	; 0xffffff28
   15814:	ldr	r3, [fp, #-216]	; 0xffffff28
   15818:	cmp	r3, #0
   1581c:	beq	157f0 <__assert_fail@plt+0x4250>
   15820:	ldr	r2, [fp, #-208]	; 0xffffff30
   15824:	add	r6, r3, #16
   15828:	mov	r7, #1
   1582c:	add	sl, r2, r2, lsl #2
   15830:	mov	r8, #0
   15834:	add	sl, r3, sl, lsl #3
   15838:	str	r4, [fp, #-188]	; 0xffffff44
   1583c:	str	r8, [fp, #-196]	; 0xffffff3c
   15840:	strb	r8, [fp, #-204]	; 0xffffff34
   15844:	str	r8, [fp, #-200]	; 0xffffff38
   15848:	strb	r8, [fp, #-192]	; 0xffffff40
   1584c:	ldrb	r3, [fp, #-204]	; 0xffffff34
   15850:	ldr	r4, [fp, #-188]	; 0xffffff44
   15854:	cmp	r3, #0
   15858:	bne	15c80 <__assert_fail@plt+0x46e0>
   1585c:	ldrb	r3, [r4]
   15860:	ldr	r1, [pc, #1840]	; 15f98 <__assert_fail@plt+0x49f8>
   15864:	and	r2, r3, #31
   15868:	lsr	r3, r3, #5
   1586c:	ldr	r3, [r1, r3, lsl #2]
   15870:	lsr	r3, r3, r2
   15874:	tst	r3, #1
   15878:	beq	15c6c <__assert_fail@plt+0x46cc>
   1587c:	str	r7, [fp, #-184]	; 0xffffff48
   15880:	ldrb	r4, [r4]
   15884:	strb	r7, [fp, #-180]	; 0xffffff4c
   15888:	strb	r7, [fp, #-192]	; 0xffffff40
   1588c:	cmp	r4, #0
   15890:	str	r4, [fp, #-176]	; 0xffffff50
   15894:	bne	15cec <__assert_fail@plt+0x474c>
   15898:	ldr	r3, [fp, #-208]	; 0xffffff30
   1589c:	str	r7, [sl, #4]
   158a0:	cmp	r3, #2
   158a4:	bls	15944 <__assert_fail@plt+0x43a4>
   158a8:	ldr	r9, [fp, #-216]	; 0xffffff28
   158ac:	add	r7, sl, #8
   158b0:	mov	r5, r9
   158b4:	mov	r6, #2
   158b8:	ldrb	r8, [r5, #48]	; 0x30
   158bc:	b	158ec <__assert_fail@plt+0x434c>
   158c0:	ldrb	r2, [r3, #8]
   158c4:	cmp	r2, #0
   158c8:	beq	158fc <__assert_fail@plt+0x435c>
   158cc:	ldr	r3, [r3, #12]
   158d0:	ldr	r2, [r5, #52]	; 0x34
   158d4:	cmp	r2, r3
   158d8:	beq	15920 <__assert_fail@plt+0x4380>
   158dc:	cmp	r4, #0
   158e0:	beq	15df8 <__assert_fail@plt+0x4858>
   158e4:	ldr	r3, [sl, r4, lsl #2]
   158e8:	sub	r4, r4, r3
   158ec:	add	r3, r4, r4, lsl #2
   158f0:	cmp	r8, #0
   158f4:	add	r3, r9, r3, lsl #3
   158f8:	bne	158c0 <__assert_fail@plt+0x4320>
   158fc:	ldr	r2, [r5, #44]	; 0x2c
   15900:	ldr	r1, [r3, #4]
   15904:	cmp	r2, r1
   15908:	bne	158dc <__assert_fail@plt+0x433c>
   1590c:	ldr	r1, [r3]
   15910:	ldr	r0, [r5, #40]	; 0x28
   15914:	bl	1127c <memcmp@plt>
   15918:	cmp	r0, #0
   1591c:	bne	158dc <__assert_fail@plt+0x433c>
   15920:	add	r4, r4, #1
   15924:	sub	r2, r6, r4
   15928:	str	r2, [r7]
   1592c:	ldr	r3, [fp, #-208]	; 0xffffff30
   15930:	add	r6, r6, #1
   15934:	cmp	r3, r6
   15938:	add	r5, r5, #40	; 0x28
   1593c:	add	r7, r7, #4
   15940:	bne	158b8 <__assert_fail@plt+0x4318>
   15944:	ldr	r1, [fp, #-212]	; 0xffffff2c
   15948:	mov	r2, #0
   1594c:	str	r1, [fp, #-132]	; 0xffffff7c
   15950:	str	r1, [fp, #-76]	; 0xffffffb4
   15954:	ldr	r1, [fp, #-220]	; 0xffffff24
   15958:	mov	r3, r2
   1595c:	cmp	r3, #0
   15960:	str	sl, [fp, #-212]	; 0xffffff2c
   15964:	str	r2, [r1]
   15968:	strb	r2, [fp, #-148]	; 0xffffff6c
   1596c:	str	r2, [fp, #-144]	; 0xffffff70
   15970:	strb	r2, [fp, #-136]	; 0xffffff78
   15974:	strb	r2, [fp, #-92]	; 0xffffffa4
   15978:	str	r2, [fp, #-88]	; 0xffffffa8
   1597c:	strb	r2, [fp, #-80]	; 0xffffffb0
   15980:	mov	r8, r2
   15984:	mov	r7, r2
   15988:	str	r2, [fp, #-140]	; 0xffffff74
   1598c:	str	r2, [fp, #-84]	; 0xffffffac
   15990:	mov	r6, #1
   15994:	ldr	r9, [pc, #1532]	; 15f98 <__assert_fail@plt+0x49f8>
   15998:	ldr	sl, [fp, #-216]	; 0xffffff28
   1599c:	bne	15bac <__assert_fail@plt+0x460c>
   159a0:	ldr	r5, [fp, #-76]	; 0xffffffb4
   159a4:	ldrb	r3, [fp, #-92]	; 0xffffffa4
   159a8:	cmp	r3, #0
   159ac:	bne	159e0 <__assert_fail@plt+0x4440>
   159b0:	ldrb	r3, [r5]
   159b4:	and	r2, r3, #31
   159b8:	lsr	r3, r3, #5
   159bc:	ldr	r3, [r9, r3, lsl #2]
   159c0:	lsr	r3, r3, r2
   159c4:	tst	r3, #1
   159c8:	bne	15d30 <__assert_fail@plt+0x4790>
   159cc:	sub	r0, fp, #88	; 0x58
   159d0:	bl	11264 <mbsinit@plt>
   159d4:	cmp	r0, #0
   159d8:	beq	15f70 <__assert_fail@plt+0x49d0>
   159dc:	strb	r6, [fp, #-92]	; 0xffffffa4
   159e0:	bl	11324 <__ctype_get_mb_cur_max@plt>
   159e4:	mov	r1, r0
   159e8:	mov	r0, r5
   159ec:	bl	18b04 <__assert_fail@plt+0x7564>
   159f0:	sub	r3, fp, #88	; 0x58
   159f4:	mov	r1, r5
   159f8:	mov	r2, r0
   159fc:	sub	r0, fp, #64	; 0x40
   15a00:	bl	19f64 <__assert_fail@plt+0x89c4>
   15a04:	cmn	r0, #1
   15a08:	str	r0, [fp, #-72]	; 0xffffffb8
   15a0c:	strbeq	r7, [fp, #-68]	; 0xffffffbc
   15a10:	streq	r6, [fp, #-72]	; 0xffffffb8
   15a14:	strbeq	r6, [fp, #-80]	; 0xffffffb0
   15a18:	beq	15a94 <__assert_fail@plt+0x44f4>
   15a1c:	cmn	r0, #2
   15a20:	beq	15a80 <__assert_fail@plt+0x44e0>
   15a24:	cmp	r0, #0
   15a28:	beq	15f04 <__assert_fail@plt+0x4964>
   15a2c:	ldr	r4, [fp, #-64]	; 0xffffffc0
   15a30:	sub	r0, fp, #88	; 0x58
   15a34:	strb	r6, [fp, #-68]	; 0xffffffbc
   15a38:	bl	11264 <mbsinit@plt>
   15a3c:	strb	r6, [fp, #-80]	; 0xffffffb0
   15a40:	cmp	r0, #0
   15a44:	strbne	r7, [fp, #-92]	; 0xffffffa4
   15a48:	cmp	r4, #0
   15a4c:	bne	15bc4 <__assert_fail@plt+0x4624>
   15a50:	ldr	r0, [fp, #-216]	; 0xffffff28
   15a54:	bl	1a1c0 <__assert_fail@plt+0x8c20>
   15a58:	mov	r0, #1
   15a5c:	sub	sp, fp, #32
   15a60:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15a64:	add	r3, r0, #29
   15a68:	bic	r3, r3, #7
   15a6c:	sub	sp, sp, r3
   15a70:	add	r3, sp, #15
   15a74:	bic	r3, r3, #15
   15a78:	str	r3, [fp, #-216]	; 0xffffff28
   15a7c:	b	15814 <__assert_fail@plt+0x4274>
   15a80:	ldr	r0, [fp, #-76]	; 0xffffffb4
   15a84:	bl	113f0 <strlen@plt>
   15a88:	strb	r7, [fp, #-68]	; 0xffffffbc
   15a8c:	strb	r6, [fp, #-80]	; 0xffffffb0
   15a90:	str	r0, [fp, #-72]	; 0xffffffb8
   15a94:	add	r3, r8, r8, lsl #2
   15a98:	add	r3, sl, r3, lsl #3
   15a9c:	ldr	r2, [r3, #4]
   15aa0:	ldr	r4, [fp, #-72]	; 0xffffffb8
   15aa4:	cmp	r2, r4
   15aa8:	beq	15db0 <__assert_fail@plt+0x4810>
   15aac:	cmp	r8, #0
   15ab0:	beq	15d68 <__assert_fail@plt+0x47c8>
   15ab4:	ldr	r3, [fp, #-212]	; 0xffffff2c
   15ab8:	ldr	r5, [r3, r8, lsl #2]
   15abc:	cmp	r5, #0
   15ac0:	sub	r8, r8, r5
   15ac4:	beq	15ba0 <__assert_fail@plt+0x4600>
   15ac8:	ldrb	r3, [fp, #-136]	; 0xffffff78
   15acc:	cmp	r3, #0
   15ad0:	bne	15bf0 <__assert_fail@plt+0x4650>
   15ad4:	ldr	r4, [fp, #-132]	; 0xffffff7c
   15ad8:	ldrb	r3, [fp, #-148]	; 0xffffff6c
   15adc:	cmp	r3, #0
   15ae0:	bne	15b14 <__assert_fail@plt+0x4574>
   15ae4:	ldrb	r3, [r4]
   15ae8:	and	r2, r3, #31
   15aec:	lsr	r3, r3, #5
   15af0:	ldr	r3, [r9, r3, lsl #2]
   15af4:	lsr	r3, r3, r2
   15af8:	tst	r3, #1
   15afc:	bne	15c04 <__assert_fail@plt+0x4664>
   15b00:	sub	r0, fp, #144	; 0x90
   15b04:	bl	11264 <mbsinit@plt>
   15b08:	cmp	r0, #0
   15b0c:	beq	15f70 <__assert_fail@plt+0x49d0>
   15b10:	strb	r6, [fp, #-148]	; 0xffffff6c
   15b14:	bl	11324 <__ctype_get_mb_cur_max@plt>
   15b18:	mov	r1, r0
   15b1c:	mov	r0, r4
   15b20:	bl	18b04 <__assert_fail@plt+0x7564>
   15b24:	sub	r3, fp, #144	; 0x90
   15b28:	mov	r1, r4
   15b2c:	mov	r2, r0
   15b30:	sub	r0, fp, #120	; 0x78
   15b34:	bl	19f64 <__assert_fail@plt+0x89c4>
   15b38:	cmn	r0, #1
   15b3c:	str	r0, [fp, #-128]	; 0xffffff80
   15b40:	beq	15b7c <__assert_fail@plt+0x45dc>
   15b44:	cmn	r0, #2
   15b48:	beq	15c20 <__assert_fail@plt+0x4680>
   15b4c:	cmp	r0, #0
   15b50:	beq	15c38 <__assert_fail@plt+0x4698>
   15b54:	ldr	r4, [fp, #-120]	; 0xffffff88
   15b58:	sub	r0, fp, #144	; 0x90
   15b5c:	strb	r6, [fp, #-124]	; 0xffffff84
   15b60:	bl	11264 <mbsinit@plt>
   15b64:	strb	r6, [fp, #-136]	; 0xffffff78
   15b68:	cmp	r0, #0
   15b6c:	strbne	r7, [fp, #-148]	; 0xffffff6c
   15b70:	cmp	r4, #0
   15b74:	bne	15b84 <__assert_fail@plt+0x45e4>
   15b78:	bl	11570 <abort@plt>
   15b7c:	str	r6, [fp, #-128]	; 0xffffff80
   15b80:	strb	r7, [fp, #-124]	; 0xffffff84
   15b84:	ldr	r4, [fp, #-132]	; 0xffffff7c
   15b88:	ldr	r3, [fp, #-128]	; 0xffffff80
   15b8c:	subs	r5, r5, #1
   15b90:	add	r4, r4, r3
   15b94:	strb	r7, [fp, #-136]	; 0xffffff78
   15b98:	str	r4, [fp, #-132]	; 0xffffff7c
   15b9c:	bne	15ad8 <__assert_fail@plt+0x4538>
   15ba0:	ldrb	r3, [fp, #-80]	; 0xffffffb0
   15ba4:	cmp	r3, #0
   15ba8:	beq	159a0 <__assert_fail@plt+0x4400>
   15bac:	ldrb	r3, [fp, #-68]	; 0xffffffbc
   15bb0:	cmp	r3, #0
   15bb4:	ldrne	r4, [fp, #-64]	; 0xffffffc0
   15bb8:	beq	15a94 <__assert_fail@plt+0x44f4>
   15bbc:	cmp	r4, #0
   15bc0:	beq	15a50 <__assert_fail@plt+0x44b0>
   15bc4:	add	r3, r8, r8, lsl #2
   15bc8:	add	r3, sl, r3, lsl #3
   15bcc:	ldrb	r2, [r3, #8]
   15bd0:	cmp	r2, #0
   15bd4:	beq	15a9c <__assert_fail@plt+0x44fc>
   15bd8:	ldr	r3, [r3, #12]
   15bdc:	cmp	r4, r3
   15be0:	bne	15aac <__assert_fail@plt+0x450c>
   15be4:	ldr	r4, [fp, #-72]	; 0xffffffb8
   15be8:	ldr	r5, [fp, #-76]	; 0xffffffb4
   15bec:	b	15dcc <__assert_fail@plt+0x482c>
   15bf0:	ldrb	r3, [fp, #-124]	; 0xffffff84
   15bf4:	cmp	r3, #0
   15bf8:	ldrne	r4, [fp, #-120]	; 0xffffff88
   15bfc:	beq	15b84 <__assert_fail@plt+0x45e4>
   15c00:	b	15b70 <__assert_fail@plt+0x45d0>
   15c04:	str	r6, [fp, #-128]	; 0xffffff80
   15c08:	ldrb	r3, [r4]
   15c0c:	strb	r6, [fp, #-124]	; 0xffffff84
   15c10:	strb	r6, [fp, #-136]	; 0xffffff78
   15c14:	str	r3, [fp, #-120]	; 0xffffff88
   15c18:	mov	r4, r3
   15c1c:	b	15b70 <__assert_fail@plt+0x45d0>
   15c20:	ldr	r4, [fp, #-132]	; 0xffffff7c
   15c24:	mov	r0, r4
   15c28:	bl	113f0 <strlen@plt>
   15c2c:	strb	r7, [fp, #-124]	; 0xffffff84
   15c30:	str	r0, [fp, #-128]	; 0xffffff80
   15c34:	b	15b88 <__assert_fail@plt+0x45e8>
   15c38:	ldr	r4, [fp, #-132]	; 0xffffff7c
   15c3c:	str	r6, [fp, #-128]	; 0xffffff80
   15c40:	ldrb	r3, [r4]
   15c44:	cmp	r3, #0
   15c48:	bne	15f84 <__assert_fail@plt+0x49e4>
   15c4c:	ldr	r4, [fp, #-120]	; 0xffffff88
   15c50:	cmp	r4, #0
   15c54:	beq	15b58 <__assert_fail@plt+0x45b8>
   15c58:	ldr	r3, [pc, #828]	; 15f9c <__assert_fail@plt+0x49fc>
   15c5c:	mov	r2, #172	; 0xac
   15c60:	ldr	r1, [pc, #824]	; 15fa0 <__assert_fail@plt+0x4a00>
   15c64:	ldr	r0, [pc, #824]	; 15fa4 <__assert_fail@plt+0x4a04>
   15c68:	bl	115a0 <__assert_fail@plt>
   15c6c:	sub	r0, fp, #200	; 0xc8
   15c70:	bl	11264 <mbsinit@plt>
   15c74:	cmp	r0, #0
   15c78:	beq	15f70 <__assert_fail@plt+0x49d0>
   15c7c:	strb	r7, [fp, #-204]	; 0xffffff34
   15c80:	bl	11324 <__ctype_get_mb_cur_max@plt>
   15c84:	mov	r1, r0
   15c88:	mov	r0, r4
   15c8c:	bl	18b04 <__assert_fail@plt+0x7564>
   15c90:	sub	r3, fp, #200	; 0xc8
   15c94:	mov	r1, r4
   15c98:	mov	r2, r0
   15c9c:	sub	r0, fp, #176	; 0xb0
   15ca0:	bl	19f64 <__assert_fail@plt+0x89c4>
   15ca4:	cmn	r0, #1
   15ca8:	str	r0, [fp, #-184]	; 0xffffff48
   15cac:	strbeq	r8, [fp, #-180]	; 0xffffff4c
   15cb0:	streq	r7, [fp, #-184]	; 0xffffff48
   15cb4:	beq	15d5c <__assert_fail@plt+0x47bc>
   15cb8:	cmn	r0, #2
   15cbc:	beq	15d4c <__assert_fail@plt+0x47ac>
   15cc0:	cmp	r0, #0
   15cc4:	beq	15e00 <__assert_fail@plt+0x4860>
   15cc8:	ldr	r4, [fp, #-176]	; 0xffffff50
   15ccc:	sub	r0, fp, #200	; 0xc8
   15cd0:	strb	r7, [fp, #-180]	; 0xffffff4c
   15cd4:	bl	11264 <mbsinit@plt>
   15cd8:	strb	r7, [fp, #-192]	; 0xffffff40
   15cdc:	cmp	r0, #0
   15ce0:	strbne	r8, [fp, #-204]	; 0xffffff34
   15ce4:	cmp	r4, #0
   15ce8:	beq	15898 <__assert_fail@plt+0x42f8>
   15cec:	mov	r9, r7
   15cf0:	ldr	r4, [fp, #-188]	; 0xffffff44
   15cf4:	sub	r3, fp, #172	; 0xac
   15cf8:	cmp	r4, r3
   15cfc:	strne	r4, [r6, #-16]
   15d00:	ldrne	r5, [fp, #-184]	; 0xffffff48
   15d04:	beq	15ecc <__assert_fail@plt+0x492c>
   15d08:	cmp	r9, #0
   15d0c:	add	r4, r4, r5
   15d10:	ldrne	r3, [fp, #-176]	; 0xffffff50
   15d14:	str	r5, [r6, #-12]
   15d18:	strb	r9, [r6, #-8]
   15d1c:	strne	r3, [r6, #-4]
   15d20:	str	r4, [fp, #-188]	; 0xffffff44
   15d24:	add	r6, r6, #40	; 0x28
   15d28:	strb	r8, [fp, #-192]	; 0xffffff40
   15d2c:	b	1584c <__assert_fail@plt+0x42ac>
   15d30:	str	r6, [fp, #-72]	; 0xffffffb8
   15d34:	ldrb	r3, [r5]
   15d38:	strb	r6, [fp, #-68]	; 0xffffffbc
   15d3c:	strb	r6, [fp, #-80]	; 0xffffffb0
   15d40:	str	r3, [fp, #-64]	; 0xffffffc0
   15d44:	mov	r4, r3
   15d48:	b	15a48 <__assert_fail@plt+0x44a8>
   15d4c:	ldr	r0, [fp, #-188]	; 0xffffff44
   15d50:	bl	113f0 <strlen@plt>
   15d54:	strb	r8, [fp, #-180]	; 0xffffff4c
   15d58:	str	r0, [fp, #-184]	; 0xffffff48
   15d5c:	strb	r7, [fp, #-192]	; 0xffffff40
   15d60:	mov	r9, r8
   15d64:	b	15cf0 <__assert_fail@plt+0x4750>
   15d68:	ldrb	r3, [fp, #-136]	; 0xffffff78
   15d6c:	cmp	r3, #0
   15d70:	beq	15e24 <__assert_fail@plt+0x4884>
   15d74:	ldrb	r3, [fp, #-124]	; 0xffffff84
   15d78:	cmp	r3, #0
   15d7c:	ldrne	r4, [fp, #-120]	; 0xffffff88
   15d80:	bne	15ec0 <__assert_fail@plt+0x4920>
   15d84:	ldr	r4, [fp, #-132]	; 0xffffff7c
   15d88:	ldr	r3, [fp, #-128]	; 0xffffff80
   15d8c:	ldr	r5, [fp, #-76]	; 0xffffffb4
   15d90:	add	r4, r4, r3
   15d94:	ldr	r3, [fp, #-72]	; 0xffffffb8
   15d98:	strb	r7, [fp, #-136]	; 0xffffff78
   15d9c:	add	r5, r5, r3
   15da0:	strb	r7, [fp, #-80]	; 0xffffffb0
   15da4:	str	r4, [fp, #-132]	; 0xffffff7c
   15da8:	str	r5, [fp, #-76]	; 0xffffffb4
   15dac:	b	159a4 <__assert_fail@plt+0x4404>
   15db0:	ldr	r5, [fp, #-76]	; 0xffffffb4
   15db4:	ldr	r0, [r3]
   15db8:	mov	r1, r5
   15dbc:	mov	r2, r4
   15dc0:	bl	1127c <memcmp@plt>
   15dc4:	cmp	r0, #0
   15dc8:	bne	15aac <__assert_fail@plt+0x450c>
   15dcc:	ldr	r3, [fp, #-208]	; 0xffffff30
   15dd0:	add	r8, r8, #1
   15dd4:	add	r5, r5, r4
   15dd8:	cmp	r3, r8
   15ddc:	str	r5, [fp, #-76]	; 0xffffffb4
   15de0:	strb	r7, [fp, #-80]	; 0xffffffb0
   15de4:	bne	159a4 <__assert_fail@plt+0x4404>
   15de8:	ldr	r2, [fp, #-220]	; 0xffffff24
   15dec:	ldr	r3, [fp, #-132]	; 0xffffff7c
   15df0:	str	r3, [r2]
   15df4:	b	15a50 <__assert_fail@plt+0x44b0>
   15df8:	str	r6, [r7]
   15dfc:	b	1592c <__assert_fail@plt+0x438c>
   15e00:	ldr	r3, [fp, #-188]	; 0xffffff44
   15e04:	str	r7, [fp, #-184]	; 0xffffff48
   15e08:	ldrb	r3, [r3]
   15e0c:	cmp	r3, #0
   15e10:	bne	15f84 <__assert_fail@plt+0x49e4>
   15e14:	ldr	r4, [fp, #-176]	; 0xffffff50
   15e18:	cmp	r4, #0
   15e1c:	beq	15ccc <__assert_fail@plt+0x472c>
   15e20:	b	15c58 <__assert_fail@plt+0x46b8>
   15e24:	ldrb	r3, [fp, #-148]	; 0xffffff6c
   15e28:	ldr	r4, [fp, #-132]	; 0xffffff7c
   15e2c:	cmp	r3, #0
   15e30:	bne	15e64 <__assert_fail@plt+0x48c4>
   15e34:	ldrb	r3, [r4]
   15e38:	and	r2, r3, #31
   15e3c:	lsr	r3, r3, #5
   15e40:	ldr	r3, [r9, r3, lsl #2]
   15e44:	lsr	r3, r3, r2
   15e48:	tst	r3, #1
   15e4c:	bne	15ee8 <__assert_fail@plt+0x4948>
   15e50:	sub	r0, fp, #144	; 0x90
   15e54:	bl	11264 <mbsinit@plt>
   15e58:	cmp	r0, #0
   15e5c:	beq	15f70 <__assert_fail@plt+0x49d0>
   15e60:	strb	r6, [fp, #-148]	; 0xffffff6c
   15e64:	bl	11324 <__ctype_get_mb_cur_max@plt>
   15e68:	mov	r1, r0
   15e6c:	mov	r0, r4
   15e70:	bl	18b04 <__assert_fail@plt+0x7564>
   15e74:	sub	r3, fp, #144	; 0x90
   15e78:	mov	r1, r4
   15e7c:	mov	r2, r0
   15e80:	sub	r0, fp, #120	; 0x78
   15e84:	bl	19f64 <__assert_fail@plt+0x89c4>
   15e88:	cmn	r0, #1
   15e8c:	str	r0, [fp, #-128]	; 0xffffff80
   15e90:	beq	15f28 <__assert_fail@plt+0x4988>
   15e94:	cmn	r0, #2
   15e98:	beq	15f34 <__assert_fail@plt+0x4994>
   15e9c:	cmp	r0, #0
   15ea0:	beq	15f4c <__assert_fail@plt+0x49ac>
   15ea4:	ldr	r4, [fp, #-120]	; 0xffffff88
   15ea8:	sub	r0, fp, #144	; 0x90
   15eac:	strb	r6, [fp, #-124]	; 0xffffff84
   15eb0:	bl	11264 <mbsinit@plt>
   15eb4:	strb	r6, [fp, #-136]	; 0xffffff78
   15eb8:	cmp	r0, #0
   15ebc:	strbne	r7, [fp, #-148]	; 0xffffff6c
   15ec0:	cmp	r4, #0
   15ec4:	beq	15b78 <__assert_fail@plt+0x45d8>
   15ec8:	b	15d84 <__assert_fail@plt+0x47e4>
   15ecc:	ldr	r5, [fp, #-184]	; 0xffffff48
   15ed0:	sub	r1, fp, #172	; 0xac
   15ed4:	mov	r2, r5
   15ed8:	mov	r0, r6
   15edc:	bl	1124c <memcpy@plt>
   15ee0:	str	r6, [r6, #-16]
   15ee4:	b	15d08 <__assert_fail@plt+0x4768>
   15ee8:	str	r6, [fp, #-128]	; 0xffffff80
   15eec:	ldrb	r3, [r4]
   15ef0:	strb	r6, [fp, #-124]	; 0xffffff84
   15ef4:	strb	r6, [fp, #-136]	; 0xffffff78
   15ef8:	str	r3, [fp, #-120]	; 0xffffff88
   15efc:	mov	r4, r3
   15f00:	b	15ec0 <__assert_fail@plt+0x4920>
   15f04:	ldr	r5, [fp, #-76]	; 0xffffffb4
   15f08:	str	r6, [fp, #-72]	; 0xffffffb8
   15f0c:	ldrb	r3, [r5]
   15f10:	cmp	r3, #0
   15f14:	bne	15f84 <__assert_fail@plt+0x49e4>
   15f18:	ldr	r4, [fp, #-64]	; 0xffffffc0
   15f1c:	cmp	r4, #0
   15f20:	beq	15a30 <__assert_fail@plt+0x4490>
   15f24:	b	15c58 <__assert_fail@plt+0x46b8>
   15f28:	str	r6, [fp, #-128]	; 0xffffff80
   15f2c:	strb	r7, [fp, #-124]	; 0xffffff84
   15f30:	b	15d84 <__assert_fail@plt+0x47e4>
   15f34:	ldr	r4, [fp, #-132]	; 0xffffff7c
   15f38:	mov	r0, r4
   15f3c:	bl	113f0 <strlen@plt>
   15f40:	strb	r7, [fp, #-124]	; 0xffffff84
   15f44:	str	r0, [fp, #-128]	; 0xffffff80
   15f48:	b	15d88 <__assert_fail@plt+0x47e8>
   15f4c:	ldr	r4, [fp, #-132]	; 0xffffff7c
   15f50:	str	r6, [fp, #-128]	; 0xffffff80
   15f54:	ldrb	r3, [r4]
   15f58:	cmp	r3, #0
   15f5c:	bne	15f84 <__assert_fail@plt+0x49e4>
   15f60:	ldr	r4, [fp, #-120]	; 0xffffff88
   15f64:	cmp	r4, #0
   15f68:	beq	15ea8 <__assert_fail@plt+0x4908>
   15f6c:	b	15c58 <__assert_fail@plt+0x46b8>
   15f70:	ldr	r3, [pc, #36]	; 15f9c <__assert_fail@plt+0x49fc>
   15f74:	mov	r2, #143	; 0x8f
   15f78:	ldr	r1, [pc, #32]	; 15fa0 <__assert_fail@plt+0x4a00>
   15f7c:	ldr	r0, [pc, #36]	; 15fa8 <__assert_fail@plt+0x4a08>
   15f80:	bl	115a0 <__assert_fail@plt>
   15f84:	ldr	r3, [pc, #16]	; 15f9c <__assert_fail@plt+0x49fc>
   15f88:	mov	r2, #171	; 0xab
   15f8c:	ldr	r1, [pc, #12]	; 15fa0 <__assert_fail@plt+0x4a00>
   15f90:	ldr	r0, [pc, #20]	; 15fac <__assert_fail@plt+0x4a0c>
   15f94:	bl	115a0 <__assert_fail@plt>
   15f98:	andeq	ip, r1, r0, ror #26
   15f9c:	andeq	ip, r1, r8, ror r8
   15fa0:	andeq	ip, r1, ip, lsl #17
   15fa4:	andeq	ip, r1, r8, asr #17
   15fa8:	muleq	r1, r8, r8
   15fac:			; <UNDEFINED> instruction: 0x0001c8b0
   15fb0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15fb4:	sub	sp, sp, #300	; 0x12c
   15fb8:	mov	fp, r1
   15fbc:	str	r0, [sp, #4]
   15fc0:	bl	11324 <__ctype_get_mb_cur_max@plt>
   15fc4:	cmp	r0, #1
   15fc8:	bls	16188 <__assert_fail@plt+0x4be8>
   15fcc:	ldrb	r2, [fp]
   15fd0:	ldr	r9, [pc, #3028]	; 16bac <__assert_fail@plt+0x560c>
   15fd4:	mov	r1, #0
   15fd8:	and	r0, r2, #31
   15fdc:	lsr	r3, r2, #5
   15fe0:	str	fp, [sp, #32]
   15fe4:	ldr	r3, [r9, r3, lsl #2]
   15fe8:	str	r1, [sp, #24]
   15fec:	strb	r1, [sp, #16]
   15ff0:	lsr	r3, r3, r0
   15ff4:	ands	r4, r3, #1
   15ff8:	str	r1, [sp, #20]
   15ffc:	strb	r1, [sp, #28]
   16000:	beq	160ec <__assert_fail@plt+0x4b4c>
   16004:	mov	r3, #1
   16008:	mov	r4, r2
   1600c:	str	r3, [sp, #36]	; 0x24
   16010:	strb	r3, [sp, #40]	; 0x28
   16014:	cmp	r4, #0
   16018:	mov	r3, #1
   1601c:	str	r2, [sp, #44]	; 0x2c
   16020:	strb	r3, [sp, #28]
   16024:	beq	1617c <__assert_fail@plt+0x4bdc>
   16028:	ldr	r1, [sp, #4]
   1602c:	mov	r3, #0
   16030:	mov	sl, #1
   16034:	str	fp, [sp, #88]	; 0x58
   16038:	str	fp, [sp, #12]
   1603c:	mov	r8, r3
   16040:	mov	r7, r3
   16044:	mov	r5, sl
   16048:	mov	r4, r1
   1604c:	mov	fp, r3
   16050:	str	r1, [sp, #144]	; 0x90
   16054:	strb	r3, [sp, #72]	; 0x48
   16058:	str	r3, [sp, #76]	; 0x4c
   1605c:	strb	r3, [sp, #84]	; 0x54
   16060:	strb	r3, [sp, #128]	; 0x80
   16064:	str	r3, [sp, #132]	; 0x84
   16068:	strb	r3, [sp, #140]	; 0x8c
   1606c:	str	r3, [sp, #8]
   16070:	str	r3, [sp, #80]	; 0x50
   16074:	str	r3, [sp, #136]	; 0x88
   16078:	ldrb	r3, [sp, #128]	; 0x80
   1607c:	cmp	r3, #0
   16080:	bne	162e4 <__assert_fail@plt+0x4d44>
   16084:	ldrb	r3, [r4]
   16088:	and	r2, r3, #31
   1608c:	lsr	r3, r3, #5
   16090:	ldr	r3, [r9, r3, lsl #2]
   16094:	lsr	r3, r3, r2
   16098:	tst	r3, #1
   1609c:	beq	162d0 <__assert_fail@plt+0x4d30>
   160a0:	str	r5, [sp, #148]	; 0x94
   160a4:	ldrb	r4, [r4]
   160a8:	strb	r5, [sp, #152]	; 0x98
   160ac:	str	r4, [sp, #156]	; 0x9c
   160b0:	cmp	r4, #0
   160b4:	strb	r5, [sp, #140]	; 0x8c
   160b8:	beq	162b8 <__assert_fail@plt+0x4d18>
   160bc:	cmp	fp, #9
   160c0:	movls	r2, #0
   160c4:	andhi	r2, sl, #1
   160c8:	cmp	r2, #0
   160cc:	beq	16b04 <__assert_fail@plt+0x5564>
   160d0:	add	r3, fp, fp, lsl #2
   160d4:	cmp	r8, r3
   160d8:	bcs	163a8 <__assert_fail@plt+0x4e08>
   160dc:	add	r3, r8, #1
   160e0:	mov	sl, r2
   160e4:	ldr	r8, [sp, #8]
   160e8:	b	164c4 <__assert_fail@plt+0x4f24>
   160ec:	add	r0, sp, #20
   160f0:	bl	11264 <mbsinit@plt>
   160f4:	cmp	r0, #0
   160f8:	beq	16b5c <__assert_fail@plt+0x55bc>
   160fc:	mov	r5, #1
   16100:	strb	r5, [sp, #16]
   16104:	bl	11324 <__ctype_get_mb_cur_max@plt>
   16108:	mov	r1, r0
   1610c:	mov	r0, fp
   16110:	bl	18b04 <__assert_fail@plt+0x7564>
   16114:	add	r3, sp, #20
   16118:	mov	r1, fp
   1611c:	mov	r2, r0
   16120:	add	r0, sp, #44	; 0x2c
   16124:	bl	19f64 <__assert_fail@plt+0x89c4>
   16128:	cmn	r0, #1
   1612c:	str	r0, [sp, #36]	; 0x24
   16130:	strbeq	r4, [sp, #40]	; 0x28
   16134:	streq	r5, [sp, #36]	; 0x24
   16138:	beq	16584 <__assert_fail@plt+0x4fe4>
   1613c:	cmn	r0, #2
   16140:	beq	16574 <__assert_fail@plt+0x4fd4>
   16144:	cmp	r0, #0
   16148:	beq	16aa4 <__assert_fail@plt+0x5504>
   1614c:	ldr	r4, [sp, #44]	; 0x2c
   16150:	mov	r3, #1
   16154:	add	r0, sp, #20
   16158:	strb	r3, [sp, #40]	; 0x28
   1615c:	bl	11264 <mbsinit@plt>
   16160:	cmp	r0, #0
   16164:	movne	r3, #0
   16168:	strbne	r3, [sp, #16]
   1616c:	mov	r3, #1
   16170:	cmp	r4, #0
   16174:	strb	r3, [sp, #28]
   16178:	bne	16028 <__assert_fail@plt+0x4a88>
   1617c:	ldr	r0, [sp, #4]
   16180:	add	sp, sp, #300	; 0x12c
   16184:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16188:	ldrb	r7, [fp]
   1618c:	cmp	r7, #0
   16190:	beq	1617c <__assert_fail@plt+0x4bdc>
   16194:	ldr	r2, [sp, #4]
   16198:	add	r8, fp, #1
   1619c:	ldrb	r3, [r2]
   161a0:	cmp	r3, #0
   161a4:	beq	162b8 <__assert_fail@plt+0x4d18>
   161a8:	mov	r5, #0
   161ac:	add	r6, r2, #1
   161b0:	cmp	r7, r3
   161b4:	mov	r4, r5
   161b8:	mov	r9, r5
   161bc:	mov	sl, fp
   161c0:	mov	lr, #1
   161c4:	add	r5, r5, #1
   161c8:	sub	r0, r6, #1
   161cc:	beq	16264 <__assert_fail@plt+0x4cc4>
   161d0:	ldrb	r3, [r6]
   161d4:	cmp	r3, #0
   161d8:	beq	162b8 <__assert_fail@plt+0x4d18>
   161dc:	add	r4, r4, #1
   161e0:	cmp	r5, #9
   161e4:	movls	r3, #0
   161e8:	andhi	r3, lr, #1
   161ec:	cmp	r3, #0
   161f0:	beq	16250 <__assert_fail@plt+0x4cb0>
   161f4:	add	r2, r5, r5, lsl #2
   161f8:	cmp	r4, r2
   161fc:	bcc	162c4 <__assert_fail@plt+0x4d24>
   16200:	cmp	sl, #0
   16204:	str	r3, [sp, #4]
   16208:	beq	16228 <__assert_fail@plt+0x4c88>
   1620c:	mov	r0, sl
   16210:	sub	r1, r4, r9
   16214:	bl	1148c <strnlen@plt>
   16218:	ldrb	r2, [sl, r0]!
   1621c:	cmp	r2, #0
   16220:	bne	16558 <__assert_fail@plt+0x4fb8>
   16224:	mov	r9, r4
   16228:	mov	r0, fp
   1622c:	bl	113f0 <strlen@plt>
   16230:	add	r3, sp, #240	; 0xf0
   16234:	mov	r1, fp
   16238:	mov	r2, r0
   1623c:	mov	r0, r6
   16240:	bl	15644 <__assert_fail@plt+0x40a4>
   16244:	subs	lr, r0, #0
   16248:	bne	16afc <__assert_fail@plt+0x555c>
   1624c:	mov	sl, lr
   16250:	ldrb	r3, [r6], #1
   16254:	cmp	r7, r3
   16258:	add	r5, r5, #1
   1625c:	sub	r0, r6, #1
   16260:	bne	161d0 <__assert_fail@plt+0x4c30>
   16264:	ldrb	r3, [fp, #1]
   16268:	cmp	r3, #0
   1626c:	beq	16180 <__assert_fail@plt+0x4be0>
   16270:	ldrb	r2, [r6]
   16274:	cmp	r2, #0
   16278:	beq	162b8 <__assert_fail@plt+0x4d18>
   1627c:	cmp	r2, r3
   16280:	add	r4, r4, #2
   16284:	bne	161e0 <__assert_fail@plt+0x4c40>
   16288:	mov	ip, r6
   1628c:	mov	r1, r8
   16290:	b	162a0 <__assert_fail@plt+0x4d00>
   16294:	cmp	r3, r2
   16298:	add	r4, r4, #1
   1629c:	bne	161e0 <__assert_fail@plt+0x4c40>
   162a0:	ldrb	r3, [r1, #1]!
   162a4:	cmp	r3, #0
   162a8:	beq	16180 <__assert_fail@plt+0x4be0>
   162ac:	ldrb	r2, [ip, #1]!
   162b0:	cmp	r2, #0
   162b4:	bne	16294 <__assert_fail@plt+0x4cf4>
   162b8:	mov	r0, #0
   162bc:	add	sp, sp, #300	; 0x12c
   162c0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   162c4:	mov	lr, r3
   162c8:	ldrb	r3, [r6], #1
   162cc:	b	16254 <__assert_fail@plt+0x4cb4>
   162d0:	add	r0, sp, #132	; 0x84
   162d4:	bl	11264 <mbsinit@plt>
   162d8:	cmp	r0, #0
   162dc:	beq	16b5c <__assert_fail@plt+0x55bc>
   162e0:	strb	r5, [sp, #128]	; 0x80
   162e4:	bl	11324 <__ctype_get_mb_cur_max@plt>
   162e8:	mov	r1, r0
   162ec:	mov	r0, r4
   162f0:	bl	18b04 <__assert_fail@plt+0x7564>
   162f4:	add	r3, sp, #132	; 0x84
   162f8:	mov	r1, r4
   162fc:	mov	r2, r0
   16300:	add	r0, sp, #156	; 0x9c
   16304:	bl	19f64 <__assert_fail@plt+0x89c4>
   16308:	cmn	r0, #1
   1630c:	str	r0, [sp, #148]	; 0x94
   16310:	strbeq	r7, [sp, #152]	; 0x98
   16314:	streq	r5, [sp, #148]	; 0x94
   16318:	beq	16358 <__assert_fail@plt+0x4db8>
   1631c:	cmn	r0, #2
   16320:	beq	16348 <__assert_fail@plt+0x4da8>
   16324:	cmp	r0, #0
   16328:	beq	169f8 <__assert_fail@plt+0x5458>
   1632c:	ldr	r4, [sp, #156]	; 0x9c
   16330:	add	r0, sp, #132	; 0x84
   16334:	strb	r5, [sp, #152]	; 0x98
   16338:	bl	11264 <mbsinit@plt>
   1633c:	cmp	r0, #0
   16340:	strbne	r7, [sp, #128]	; 0x80
   16344:	b	160b0 <__assert_fail@plt+0x4b10>
   16348:	ldr	r0, [sp, #144]	; 0x90
   1634c:	bl	113f0 <strlen@plt>
   16350:	strb	r7, [sp, #152]	; 0x98
   16354:	str	r0, [sp, #148]	; 0x94
   16358:	cmp	fp, #9
   1635c:	movls	r3, #0
   16360:	andhi	r3, sl, #1
   16364:	cmp	r3, #0
   16368:	strb	r5, [sp, #140]	; 0x8c
   1636c:	addeq	r8, r8, #1
   16370:	bne	1639c <__assert_fail@plt+0x4dfc>
   16374:	ldr	r6, [sp, #148]	; 0x94
   16378:	ldr	r3, [sp, #36]	; 0x24
   1637c:	ldr	r4, [sp, #144]	; 0x90
   16380:	cmp	r6, r3
   16384:	beq	1659c <__assert_fail@plt+0x4ffc>
   16388:	add	r4, r4, r6
   1638c:	str	r4, [sp, #144]	; 0x90
   16390:	strb	r7, [sp, #140]	; 0x8c
   16394:	add	fp, fp, #1
   16398:	b	16078 <__assert_fail@plt+0x4ad8>
   1639c:	add	r2, fp, fp, lsl #2
   163a0:	cmp	r8, r2
   163a4:	bcc	16b84 <__assert_fail@plt+0x55e4>
   163a8:	ldr	r3, [sp, #8]
   163ac:	subs	r6, r8, r3
   163b0:	ldrb	r3, [sp, #84]	; 0x54
   163b4:	beq	16b90 <__assert_fail@plt+0x55f0>
   163b8:	cmp	r3, #0
   163bc:	beq	1656c <__assert_fail@plt+0x4fcc>
   163c0:	ldrb	r3, [sp, #96]	; 0x60
   163c4:	cmp	r3, #0
   163c8:	ldrne	r4, [sp, #100]	; 0x64
   163cc:	bne	16488 <__assert_fail@plt+0x4ee8>
   163d0:	ldr	r4, [sp, #88]	; 0x58
   163d4:	ldr	r3, [sp, #92]	; 0x5c
   163d8:	subs	r6, r6, #1
   163dc:	add	r4, r4, r3
   163e0:	strb	r7, [sp, #84]	; 0x54
   163e4:	str	r4, [sp, #88]	; 0x58
   163e8:	mov	sl, r4
   163ec:	beq	166d4 <__assert_fail@plt+0x5134>
   163f0:	ldrb	r3, [sp, #72]	; 0x48
   163f4:	cmp	r3, #0
   163f8:	bne	1642c <__assert_fail@plt+0x4e8c>
   163fc:	ldrb	r3, [r4]
   16400:	and	r2, r3, #31
   16404:	lsr	r3, r3, #5
   16408:	ldr	r3, [r9, r3, lsl #2]
   1640c:	lsr	r3, r3, r2
   16410:	tst	r3, #1
   16414:	bne	164f4 <__assert_fail@plt+0x4f54>
   16418:	add	r0, sp, #76	; 0x4c
   1641c:	bl	11264 <mbsinit@plt>
   16420:	cmp	r0, #0
   16424:	beq	16b5c <__assert_fail@plt+0x55bc>
   16428:	strb	r5, [sp, #72]	; 0x48
   1642c:	bl	11324 <__ctype_get_mb_cur_max@plt>
   16430:	mov	r1, r0
   16434:	mov	r0, r4
   16438:	bl	18b04 <__assert_fail@plt+0x7564>
   1643c:	add	r3, sp, #76	; 0x4c
   16440:	mov	r1, r4
   16444:	mov	r2, r0
   16448:	add	r0, sp, #100	; 0x64
   1644c:	bl	19f64 <__assert_fail@plt+0x89c4>
   16450:	cmn	r0, #1
   16454:	str	r0, [sp, #92]	; 0x5c
   16458:	beq	16510 <__assert_fail@plt+0x4f70>
   1645c:	cmn	r0, #2
   16460:	beq	1651c <__assert_fail@plt+0x4f7c>
   16464:	cmp	r0, #0
   16468:	beq	16534 <__assert_fail@plt+0x4f94>
   1646c:	ldr	r4, [sp, #100]	; 0x64
   16470:	add	r0, sp, #76	; 0x4c
   16474:	strb	r5, [sp, #96]	; 0x60
   16478:	bl	11264 <mbsinit@plt>
   1647c:	strb	r5, [sp, #84]	; 0x54
   16480:	cmp	r0, #0
   16484:	strbne	r7, [sp, #72]	; 0x48
   16488:	cmp	r4, #0
   1648c:	bne	163d0 <__assert_fail@plt+0x4e30>
   16490:	ldrb	r3, [sp, #84]	; 0x54
   16494:	cmp	r3, #0
   16498:	beq	166d0 <__assert_fail@plt+0x5130>
   1649c:	add	r2, sp, #240	; 0xf0
   164a0:	ldr	r1, [sp, #12]
   164a4:	ldr	r0, [sp, #4]
   164a8:	bl	157ac <__assert_fail@plt+0x420c>
   164ac:	subs	sl, r0, #0
   164b0:	bne	16afc <__assert_fail@plt+0x555c>
   164b4:	ldrb	r3, [sp, #152]	; 0x98
   164b8:	cmp	r3, #0
   164bc:	add	r3, r8, #1
   164c0:	beq	16590 <__assert_fail@plt+0x4ff0>
   164c4:	ldrb	r2, [sp, #40]	; 0x28
   164c8:	cmp	r2, #0
   164cc:	beq	16590 <__assert_fail@plt+0x4ff0>
   164d0:	ldr	r1, [sp, #156]	; 0x9c
   164d4:	ldr	r2, [sp, #44]	; 0x2c
   164d8:	str	r8, [sp, #8]
   164dc:	cmp	r1, r2
   164e0:	beq	16a9c <__assert_fail@plt+0x54fc>
   164e4:	ldr	r4, [sp, #144]	; 0x90
   164e8:	mov	r8, r3
   164ec:	ldr	r6, [sp, #148]	; 0x94
   164f0:	b	16388 <__assert_fail@plt+0x4de8>
   164f4:	str	r5, [sp, #92]	; 0x5c
   164f8:	ldrb	r3, [r4]
   164fc:	strb	r5, [sp, #96]	; 0x60
   16500:	strb	r5, [sp, #84]	; 0x54
   16504:	str	r3, [sp, #100]	; 0x64
   16508:	mov	r4, r3
   1650c:	b	16488 <__assert_fail@plt+0x4ee8>
   16510:	str	r5, [sp, #92]	; 0x5c
   16514:	strb	r7, [sp, #96]	; 0x60
   16518:	b	163d0 <__assert_fail@plt+0x4e30>
   1651c:	ldr	r4, [sp, #88]	; 0x58
   16520:	mov	r0, r4
   16524:	bl	113f0 <strlen@plt>
   16528:	strb	r7, [sp, #96]	; 0x60
   1652c:	str	r0, [sp, #92]	; 0x5c
   16530:	b	163d4 <__assert_fail@plt+0x4e34>
   16534:	ldr	r4, [sp, #88]	; 0x58
   16538:	str	r5, [sp, #92]	; 0x5c
   1653c:	ldrb	r3, [r4]
   16540:	cmp	r3, #0
   16544:	bne	16b70 <__assert_fail@plt+0x55d0>
   16548:	ldr	r4, [sp, #100]	; 0x64
   1654c:	cmp	r4, #0
   16550:	beq	16470 <__assert_fail@plt+0x4ed0>
   16554:	b	166bc <__assert_fail@plt+0x511c>
   16558:	ldr	r3, [sp, #4]
   1655c:	mov	r9, r4
   16560:	mov	lr, r3
   16564:	ldrb	r3, [r6], #1
   16568:	b	16254 <__assert_fail@plt+0x4cb4>
   1656c:	ldr	r4, [sp, #88]	; 0x58
   16570:	b	163f0 <__assert_fail@plt+0x4e50>
   16574:	ldr	r0, [sp, #32]
   16578:	bl	113f0 <strlen@plt>
   1657c:	strb	r4, [sp, #40]	; 0x28
   16580:	str	r0, [sp, #36]	; 0x24
   16584:	mov	r3, #1
   16588:	strb	r3, [sp, #28]
   1658c:	b	16028 <__assert_fail@plt+0x4a88>
   16590:	str	r8, [sp, #8]
   16594:	mov	r8, r3
   16598:	b	16374 <__assert_fail@plt+0x4dd4>
   1659c:	mov	r2, r6
   165a0:	mov	r0, r4
   165a4:	ldr	r1, [sp, #32]
   165a8:	bl	1127c <memcmp@plt>
   165ac:	cmp	r0, #0
   165b0:	bne	16388 <__assert_fail@plt+0x4de8>
   165b4:	add	lr, sp, #128	; 0x80
   165b8:	add	ip, sp, #184	; 0xb8
   165bc:	ldm	lr!, {r0, r1, r2, r3}
   165c0:	stmia	ip!, {r0, r1, r2, r3}
   165c4:	ldm	lr!, {r0, r1, r2, r3}
   165c8:	strb	r7, [sp, #196]	; 0xc4
   165cc:	stmia	ip!, {r0, r1, r2, r3}
   165d0:	ldm	lr!, {r0, r1, r2, r3}
   165d4:	ldr	r4, [sp, #200]	; 0xc8
   165d8:	stmia	ip!, {r0, r1, r2, r3}
   165dc:	ldm	lr, {r0, r1}
   165e0:	ldr	r3, [sp, #204]	; 0xcc
   165e4:	add	r4, r4, r3
   165e8:	stm	ip, {r0, r1}
   165ec:	str	r4, [sp, #200]	; 0xc8
   165f0:	ldr	r3, [sp, #12]
   165f4:	strb	r7, [sp, #240]	; 0xf0
   165f8:	str	r3, [sp, #256]	; 0x100
   165fc:	ldrb	r3, [r3]
   16600:	str	r7, [sp, #244]	; 0xf4
   16604:	str	r7, [sp, #248]	; 0xf8
   16608:	and	r2, r3, #31
   1660c:	lsr	r1, r3, #5
   16610:	strb	r7, [sp, #252]	; 0xfc
   16614:	ldr	r6, [r9, r1, lsl #2]
   16618:	lsr	r6, r6, r2
   1661c:	ands	r6, r6, #1
   16620:	beq	16644 <__assert_fail@plt+0x50a4>
   16624:	mov	r4, r3
   16628:	str	r5, [sp, #260]	; 0x104
   1662c:	str	r3, [sp, #268]	; 0x10c
   16630:	strb	r5, [sp, #264]	; 0x108
   16634:	cmp	r4, #0
   16638:	strb	r5, [sp, #252]	; 0xfc
   1663c:	bne	16728 <__assert_fail@plt+0x5188>
   16640:	bl	11570 <abort@plt>
   16644:	add	r0, sp, #244	; 0xf4
   16648:	bl	11264 <mbsinit@plt>
   1664c:	cmp	r0, #0
   16650:	beq	16b5c <__assert_fail@plt+0x55bc>
   16654:	strb	r5, [sp, #240]	; 0xf0
   16658:	bl	11324 <__ctype_get_mb_cur_max@plt>
   1665c:	ldr	r4, [sp, #12]
   16660:	mov	r1, r0
   16664:	mov	r0, r4
   16668:	bl	18b04 <__assert_fail@plt+0x7564>
   1666c:	add	r3, sp, #244	; 0xf4
   16670:	mov	r1, r4
   16674:	mov	r2, r0
   16678:	add	r0, sp, #268	; 0x10c
   1667c:	bl	19f64 <__assert_fail@plt+0x89c4>
   16680:	cmn	r0, #1
   16684:	str	r0, [sp, #260]	; 0x104
   16688:	beq	16b10 <__assert_fail@plt+0x5570>
   1668c:	cmn	r0, #2
   16690:	beq	16b20 <__assert_fail@plt+0x5580>
   16694:	cmp	r0, #0
   16698:	bne	16ac8 <__assert_fail@plt+0x5528>
   1669c:	ldr	r4, [sp, #256]	; 0x100
   166a0:	str	r5, [sp, #260]	; 0x104
   166a4:	ldrb	r3, [r4]
   166a8:	cmp	r3, #0
   166ac:	bne	16b70 <__assert_fail@plt+0x55d0>
   166b0:	ldr	r4, [sp, #268]	; 0x10c
   166b4:	cmp	r4, #0
   166b8:	beq	16acc <__assert_fail@plt+0x552c>
   166bc:	ldr	r3, [pc, #1260]	; 16bb0 <__assert_fail@plt+0x5610>
   166c0:	mov	r2, #172	; 0xac
   166c4:	ldr	r1, [pc, #1256]	; 16bb4 <__assert_fail@plt+0x5614>
   166c8:	ldr	r0, [pc, #1256]	; 16bb8 <__assert_fail@plt+0x5618>
   166cc:	bl	115a0 <__assert_fail@plt>
   166d0:	ldr	sl, [sp, #88]	; 0x58
   166d4:	ldrb	r3, [sp, #72]	; 0x48
   166d8:	cmp	r3, #0
   166dc:	bne	16a30 <__assert_fail@plt+0x5490>
   166e0:	ldrb	r3, [sl]
   166e4:	and	r2, r3, #31
   166e8:	lsr	r3, r3, #5
   166ec:	ldr	r3, [r9, r3, lsl #2]
   166f0:	lsr	r3, r3, r2
   166f4:	tst	r3, #1
   166f8:	beq	16a1c <__assert_fail@plt+0x547c>
   166fc:	str	r5, [sp, #92]	; 0x5c
   16700:	ldrb	r3, [sl]
   16704:	strb	r5, [sp, #96]	; 0x60
   16708:	strb	r5, [sp, #84]	; 0x54
   1670c:	mov	r4, r3
   16710:	str	r3, [sp, #100]	; 0x64
   16714:	cmp	r4, #0
   16718:	beq	1649c <__assert_fail@plt+0x4efc>
   1671c:	ldrb	r3, [sp, #152]	; 0x98
   16720:	mov	sl, r5
   16724:	b	164b8 <__assert_fail@plt+0x4f18>
   16728:	ldr	r4, [sp, #256]	; 0x100
   1672c:	ldr	r3, [sp, #260]	; 0x104
   16730:	strb	r7, [sp, #252]	; 0xfc
   16734:	add	r4, r4, r3
   16738:	ldrb	r3, [sp, #240]	; 0xf0
   1673c:	add	r8, r8, #1
   16740:	str	r4, [sp, #256]	; 0x100
   16744:	cmp	r3, #0
   16748:	bne	168e8 <__assert_fail@plt+0x5348>
   1674c:	ldrb	r3, [r4]
   16750:	and	r2, r3, #31
   16754:	lsr	r3, r3, #5
   16758:	ldr	r3, [r9, r3, lsl #2]
   1675c:	lsr	r3, r3, r2
   16760:	tst	r3, #1
   16764:	beq	16980 <__assert_fail@plt+0x53e0>
   16768:	str	r5, [sp, #260]	; 0x104
   1676c:	ldrb	r4, [r4]
   16770:	strb	r5, [sp, #264]	; 0x108
   16774:	str	r4, [sp, #268]	; 0x10c
   16778:	cmp	r4, #0
   1677c:	strb	r5, [sp, #252]	; 0xfc
   16780:	bne	167a4 <__assert_fail@plt+0x5204>
   16784:	ldr	r0, [sp, #144]	; 0x90
   16788:	add	sp, sp, #300	; 0x12c
   1678c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16790:	ldr	r0, [sp, #256]	; 0x100
   16794:	bl	113f0 <strlen@plt>
   16798:	strb	r7, [sp, #264]	; 0x108
   1679c:	str	r0, [sp, #260]	; 0x104
   167a0:	strb	r5, [sp, #252]	; 0xfc
   167a4:	ldrb	r3, [sp, #196]	; 0xc4
   167a8:	cmp	r3, #0
   167ac:	beq	167dc <__assert_fail@plt+0x523c>
   167b0:	ldrb	r3, [sp, #208]	; 0xd0
   167b4:	cmp	r3, #0
   167b8:	ldrne	r4, [sp, #212]	; 0xd4
   167bc:	bne	16884 <__assert_fail@plt+0x52e4>
   167c0:	ldr	r2, [sp, #204]	; 0xcc
   167c4:	ldr	r3, [sp, #260]	; 0x104
   167c8:	cmp	r2, r3
   167cc:	beq	16968 <__assert_fail@plt+0x53c8>
   167d0:	ldr	r4, [sp, #144]	; 0x90
   167d4:	ldr	r6, [sp, #148]	; 0x94
   167d8:	b	16388 <__assert_fail@plt+0x4de8>
   167dc:	ldrb	r3, [sp, #184]	; 0xb8
   167e0:	ldr	r4, [sp, #200]	; 0xc8
   167e4:	cmp	r3, #0
   167e8:	bne	1681c <__assert_fail@plt+0x527c>
   167ec:	ldrb	r3, [r4]
   167f0:	and	r2, r3, #31
   167f4:	lsr	r3, r3, #5
   167f8:	ldr	r3, [r9, r3, lsl #2]
   167fc:	lsr	r3, r3, r2
   16800:	tst	r3, #1
   16804:	bne	1694c <__assert_fail@plt+0x53ac>
   16808:	add	r0, sp, #188	; 0xbc
   1680c:	bl	11264 <mbsinit@plt>
   16810:	cmp	r0, #0
   16814:	beq	16b5c <__assert_fail@plt+0x55bc>
   16818:	strb	r5, [sp, #184]	; 0xb8
   1681c:	bl	11324 <__ctype_get_mb_cur_max@plt>
   16820:	mov	r1, r0
   16824:	mov	r0, r4
   16828:	bl	18b04 <__assert_fail@plt+0x7564>
   1682c:	add	r3, sp, #188	; 0xbc
   16830:	mov	r1, r4
   16834:	mov	r2, r0
   16838:	add	r0, sp, #212	; 0xd4
   1683c:	bl	19f64 <__assert_fail@plt+0x89c4>
   16840:	cmn	r0, #1
   16844:	str	r0, [sp, #204]	; 0xcc
   16848:	strbeq	r7, [sp, #208]	; 0xd0
   1684c:	streq	r5, [sp, #204]	; 0xcc
   16850:	strbeq	r5, [sp, #196]	; 0xc4
   16854:	beq	167c0 <__assert_fail@plt+0x5220>
   16858:	cmn	r0, #2
   1685c:	beq	16998 <__assert_fail@plt+0x53f8>
   16860:	cmp	r0, #0
   16864:	beq	169d4 <__assert_fail@plt+0x5434>
   16868:	ldr	r4, [sp, #212]	; 0xd4
   1686c:	add	r0, sp, #188	; 0xbc
   16870:	strb	r5, [sp, #208]	; 0xd0
   16874:	bl	11264 <mbsinit@plt>
   16878:	strb	r5, [sp, #196]	; 0xc4
   1687c:	cmp	r0, #0
   16880:	strbne	r7, [sp, #184]	; 0xb8
   16884:	cmp	r4, #0
   16888:	beq	162b8 <__assert_fail@plt+0x4d18>
   1688c:	ldrb	r3, [sp, #264]	; 0x108
   16890:	cmp	r3, #0
   16894:	beq	167c0 <__assert_fail@plt+0x5220>
   16898:	ldr	r0, [sp, #268]	; 0x10c
   1689c:	subs	r0, r0, r4
   168a0:	movne	r0, #1
   168a4:	cmp	r0, #0
   168a8:	add	r1, r8, #1
   168ac:	bne	167d0 <__assert_fail@plt+0x5230>
   168b0:	ldr	r3, [sp, #200]	; 0xc8
   168b4:	ldr	r2, [sp, #204]	; 0xcc
   168b8:	ldr	r4, [sp, #256]	; 0x100
   168bc:	add	r3, r3, r2
   168c0:	str	r3, [sp, #200]	; 0xc8
   168c4:	ldrb	r3, [sp, #240]	; 0xf0
   168c8:	ldr	r2, [sp, #260]	; 0x104
   168cc:	strb	r0, [sp, #196]	; 0xc4
   168d0:	add	r4, r4, r2
   168d4:	cmp	r3, #0
   168d8:	strb	r0, [sp, #252]	; 0xfc
   168dc:	mov	r8, r1
   168e0:	str	r4, [sp, #256]	; 0x100
   168e4:	beq	1674c <__assert_fail@plt+0x51ac>
   168e8:	bl	11324 <__ctype_get_mb_cur_max@plt>
   168ec:	mov	r1, r0
   168f0:	mov	r0, r4
   168f4:	bl	18b04 <__assert_fail@plt+0x7564>
   168f8:	add	r3, sp, #244	; 0xf4
   168fc:	mov	r1, r4
   16900:	mov	r2, r0
   16904:	add	r0, sp, #268	; 0x10c
   16908:	bl	19f64 <__assert_fail@plt+0x89c4>
   1690c:	cmn	r0, #1
   16910:	str	r0, [sp, #260]	; 0x104
   16914:	strbeq	r7, [sp, #264]	; 0x108
   16918:	streq	r5, [sp, #260]	; 0x104
   1691c:	beq	167a0 <__assert_fail@plt+0x5200>
   16920:	cmn	r0, #2
   16924:	beq	16790 <__assert_fail@plt+0x51f0>
   16928:	cmp	r0, #0
   1692c:	beq	169b0 <__assert_fail@plt+0x5410>
   16930:	ldr	r4, [sp, #268]	; 0x10c
   16934:	add	r0, sp, #244	; 0xf4
   16938:	strb	r5, [sp, #264]	; 0x108
   1693c:	bl	11264 <mbsinit@plt>
   16940:	cmp	r0, #0
   16944:	strbne	r7, [sp, #240]	; 0xf0
   16948:	b	16778 <__assert_fail@plt+0x51d8>
   1694c:	str	r5, [sp, #204]	; 0xcc
   16950:	ldrb	r0, [r4]
   16954:	strb	r5, [sp, #208]	; 0xd0
   16958:	strb	r5, [sp, #196]	; 0xc4
   1695c:	str	r0, [sp, #212]	; 0xd4
   16960:	mov	r4, r0
   16964:	b	16884 <__assert_fail@plt+0x52e4>
   16968:	ldr	r1, [sp, #256]	; 0x100
   1696c:	ldr	r0, [sp, #200]	; 0xc8
   16970:	bl	1127c <memcmp@plt>
   16974:	adds	r0, r0, #0
   16978:	movne	r0, #1
   1697c:	b	168a4 <__assert_fail@plt+0x5304>
   16980:	add	r0, sp, #244	; 0xf4
   16984:	bl	11264 <mbsinit@plt>
   16988:	cmp	r0, #0
   1698c:	beq	16b5c <__assert_fail@plt+0x55bc>
   16990:	strb	r5, [sp, #240]	; 0xf0
   16994:	b	168e8 <__assert_fail@plt+0x5348>
   16998:	ldr	r0, [sp, #200]	; 0xc8
   1699c:	bl	113f0 <strlen@plt>
   169a0:	strb	r7, [sp, #208]	; 0xd0
   169a4:	strb	r5, [sp, #196]	; 0xc4
   169a8:	str	r0, [sp, #204]	; 0xcc
   169ac:	b	167c0 <__assert_fail@plt+0x5220>
   169b0:	ldr	r3, [sp, #256]	; 0x100
   169b4:	str	r5, [sp, #260]	; 0x104
   169b8:	ldrb	r3, [r3]
   169bc:	cmp	r3, #0
   169c0:	bne	16b70 <__assert_fail@plt+0x55d0>
   169c4:	ldr	r4, [sp, #268]	; 0x10c
   169c8:	cmp	r4, #0
   169cc:	beq	16934 <__assert_fail@plt+0x5394>
   169d0:	b	166bc <__assert_fail@plt+0x511c>
   169d4:	ldr	r3, [sp, #200]	; 0xc8
   169d8:	str	r5, [sp, #204]	; 0xcc
   169dc:	ldrb	r3, [r3]
   169e0:	cmp	r3, #0
   169e4:	bne	16b70 <__assert_fail@plt+0x55d0>
   169e8:	ldr	r4, [sp, #212]	; 0xd4
   169ec:	cmp	r4, #0
   169f0:	beq	1686c <__assert_fail@plt+0x52cc>
   169f4:	b	166bc <__assert_fail@plt+0x511c>
   169f8:	ldr	r4, [sp, #144]	; 0x90
   169fc:	str	r5, [sp, #148]	; 0x94
   16a00:	ldrb	r3, [r4]
   16a04:	cmp	r3, #0
   16a08:	bne	16b70 <__assert_fail@plt+0x55d0>
   16a0c:	ldr	r4, [sp, #156]	; 0x9c
   16a10:	cmp	r4, #0
   16a14:	beq	16330 <__assert_fail@plt+0x4d90>
   16a18:	b	166bc <__assert_fail@plt+0x511c>
   16a1c:	add	r0, sp, #76	; 0x4c
   16a20:	bl	11264 <mbsinit@plt>
   16a24:	cmp	r0, #0
   16a28:	beq	16b5c <__assert_fail@plt+0x55bc>
   16a2c:	strb	r5, [sp, #72]	; 0x48
   16a30:	bl	11324 <__ctype_get_mb_cur_max@plt>
   16a34:	mov	r1, r0
   16a38:	mov	r0, sl
   16a3c:	bl	18b04 <__assert_fail@plt+0x7564>
   16a40:	add	r3, sp, #76	; 0x4c
   16a44:	mov	r1, sl
   16a48:	mov	r2, r0
   16a4c:	add	r0, sp, #100	; 0x64
   16a50:	bl	19f64 <__assert_fail@plt+0x89c4>
   16a54:	cmn	r0, #1
   16a58:	str	r0, [sp, #92]	; 0x5c
   16a5c:	strbeq	r7, [sp, #96]	; 0x60
   16a60:	streq	r5, [sp, #92]	; 0x5c
   16a64:	strbeq	r5, [sp, #84]	; 0x54
   16a68:	beq	1671c <__assert_fail@plt+0x517c>
   16a6c:	cmn	r0, #2
   16a70:	beq	16ae4 <__assert_fail@plt+0x5544>
   16a74:	cmp	r0, #0
   16a78:	beq	16b38 <__assert_fail@plt+0x5598>
   16a7c:	ldr	r4, [sp, #100]	; 0x64
   16a80:	add	r0, sp, #76	; 0x4c
   16a84:	strb	r5, [sp, #96]	; 0x60
   16a88:	bl	11264 <mbsinit@plt>
   16a8c:	strb	r5, [sp, #84]	; 0x54
   16a90:	cmp	r0, #0
   16a94:	strbne	r7, [sp, #72]	; 0x48
   16a98:	b	16714 <__assert_fail@plt+0x5174>
   16a9c:	mov	r8, r3
   16aa0:	b	165b4 <__assert_fail@plt+0x5014>
   16aa4:	ldr	r3, [sp, #32]
   16aa8:	str	r5, [sp, #36]	; 0x24
   16aac:	ldrb	r3, [r3]
   16ab0:	cmp	r3, #0
   16ab4:	bne	16b70 <__assert_fail@plt+0x55d0>
   16ab8:	ldr	r4, [sp, #44]	; 0x2c
   16abc:	cmp	r4, #0
   16ac0:	beq	16150 <__assert_fail@plt+0x4bb0>
   16ac4:	b	166bc <__assert_fail@plt+0x511c>
   16ac8:	ldr	r4, [sp, #268]	; 0x10c
   16acc:	add	r0, sp, #244	; 0xf4
   16ad0:	strb	r5, [sp, #264]	; 0x108
   16ad4:	bl	11264 <mbsinit@plt>
   16ad8:	cmp	r0, #0
   16adc:	strbne	r7, [sp, #240]	; 0xf0
   16ae0:	b	16634 <__assert_fail@plt+0x5094>
   16ae4:	ldr	r0, [sp, #88]	; 0x58
   16ae8:	bl	113f0 <strlen@plt>
   16aec:	strb	r7, [sp, #96]	; 0x60
   16af0:	strb	r5, [sp, #84]	; 0x54
   16af4:	str	r0, [sp, #92]	; 0x5c
   16af8:	b	1671c <__assert_fail@plt+0x517c>
   16afc:	ldr	r0, [sp, #240]	; 0xf0
   16b00:	b	16180 <__assert_fail@plt+0x4be0>
   16b04:	add	r3, r8, #1
   16b08:	ldr	r8, [sp, #8]
   16b0c:	b	164c4 <__assert_fail@plt+0x4f24>
   16b10:	str	r5, [sp, #260]	; 0x104
   16b14:	strb	r6, [sp, #264]	; 0x108
   16b18:	ldr	r4, [sp, #256]	; 0x100
   16b1c:	b	1672c <__assert_fail@plt+0x518c>
   16b20:	ldr	r4, [sp, #256]	; 0x100
   16b24:	mov	r0, r4
   16b28:	bl	113f0 <strlen@plt>
   16b2c:	strb	r6, [sp, #264]	; 0x108
   16b30:	str	r0, [sp, #260]	; 0x104
   16b34:	b	1672c <__assert_fail@plt+0x518c>
   16b38:	ldr	r4, [sp, #88]	; 0x58
   16b3c:	str	r5, [sp, #92]	; 0x5c
   16b40:	ldrb	r3, [r4]
   16b44:	cmp	r3, #0
   16b48:	bne	16b70 <__assert_fail@plt+0x55d0>
   16b4c:	ldr	r4, [sp, #100]	; 0x64
   16b50:	cmp	r4, #0
   16b54:	beq	16a80 <__assert_fail@plt+0x54e0>
   16b58:	b	166bc <__assert_fail@plt+0x511c>
   16b5c:	ldr	r3, [pc, #76]	; 16bb0 <__assert_fail@plt+0x5610>
   16b60:	mov	r2, #143	; 0x8f
   16b64:	ldr	r1, [pc, #72]	; 16bb4 <__assert_fail@plt+0x5614>
   16b68:	ldr	r0, [pc, #76]	; 16bbc <__assert_fail@plt+0x561c>
   16b6c:	bl	115a0 <__assert_fail@plt>
   16b70:	ldr	r3, [pc, #56]	; 16bb0 <__assert_fail@plt+0x5610>
   16b74:	mov	r2, #171	; 0xab
   16b78:	ldr	r1, [pc, #52]	; 16bb4 <__assert_fail@plt+0x5614>
   16b7c:	ldr	r0, [pc, #60]	; 16bc0 <__assert_fail@plt+0x5620>
   16b80:	bl	115a0 <__assert_fail@plt>
   16b84:	add	r8, r8, #1
   16b88:	mov	sl, r3
   16b8c:	b	16374 <__assert_fail@plt+0x4dd4>
   16b90:	cmp	r3, #0
   16b94:	beq	166d0 <__assert_fail@plt+0x5130>
   16b98:	ldrb	r3, [sp, #96]	; 0x60
   16b9c:	cmp	r3, #0
   16ba0:	ldrne	r4, [sp, #100]	; 0x64
   16ba4:	beq	1671c <__assert_fail@plt+0x517c>
   16ba8:	b	16714 <__assert_fail@plt+0x5174>
   16bac:	andeq	ip, r1, r0, ror #26
   16bb0:	andeq	ip, r1, r8, ror r8
   16bb4:	andeq	ip, r1, ip, lsl #17
   16bb8:	andeq	ip, r1, r8, asr #17
   16bbc:	muleq	r1, r8, r8
   16bc0:			; <UNDEFINED> instruction: 0x0001c8b0
   16bc4:	push	{r4, r5, r6, lr}
   16bc8:	subs	r4, r0, #0
   16bcc:	beq	16c40 <__assert_fail@plt+0x56a0>
   16bd0:	mov	r1, #47	; 0x2f
   16bd4:	bl	114e0 <strrchr@plt>
   16bd8:	subs	r5, r0, #0
   16bdc:	beq	16c2c <__assert_fail@plt+0x568c>
   16be0:	add	r6, r5, #1
   16be4:	sub	r3, r6, r4
   16be8:	cmp	r3, #6
   16bec:	ble	16c2c <__assert_fail@plt+0x568c>
   16bf0:	mov	r2, #7
   16bf4:	ldr	r1, [pc, #96]	; 16c5c <__assert_fail@plt+0x56bc>
   16bf8:	sub	r0, r5, #6
   16bfc:	bl	11564 <strncmp@plt>
   16c00:	cmp	r0, #0
   16c04:	bne	16c2c <__assert_fail@plt+0x568c>
   16c08:	mov	r2, #3
   16c0c:	ldr	r1, [pc, #76]	; 16c60 <__assert_fail@plt+0x56c0>
   16c10:	mov	r0, r6
   16c14:	bl	11564 <strncmp@plt>
   16c18:	cmp	r0, #0
   16c1c:	movne	r4, r6
   16c20:	ldreq	r3, [pc, #60]	; 16c64 <__assert_fail@plt+0x56c4>
   16c24:	addeq	r4, r5, #4
   16c28:	streq	r4, [r3]
   16c2c:	ldr	r2, [pc, #52]	; 16c68 <__assert_fail@plt+0x56c8>
   16c30:	ldr	r3, [pc, #52]	; 16c6c <__assert_fail@plt+0x56cc>
   16c34:	str	r4, [r2]
   16c38:	str	r4, [r3]
   16c3c:	pop	{r4, r5, r6, pc}
   16c40:	ldr	r3, [pc, #40]	; 16c70 <__assert_fail@plt+0x56d0>
   16c44:	mov	r2, #55	; 0x37
   16c48:	mov	r1, #1
   16c4c:	ldr	r3, [r3]
   16c50:	ldr	r0, [pc, #28]	; 16c74 <__assert_fail@plt+0x56d4>
   16c54:	bl	11300 <fwrite@plt>
   16c58:	bl	11570 <abort@plt>
   16c5c:	andeq	ip, r1, r4, lsl r9
   16c60:	andeq	ip, r1, ip, lsl r9
   16c64:			; <UNDEFINED> instruction: 0x0002d1b8
   16c68:			; <UNDEFINED> instruction: 0x0002d2b4
   16c6c:	andeq	sp, r2, r0, asr #3
   16c70:	ldrdeq	sp, [r2], -r0
   16c74:	ldrdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   16c78:	push	{r4, r5, r6, lr}
   16c7c:	mov	r2, #48	; 0x30
   16c80:	mov	r4, r1
   16c84:	mov	r1, #0
   16c88:	mov	r5, r0
   16c8c:	bl	11444 <memset@plt>
   16c90:	cmp	r4, #10
   16c94:	beq	16ca4 <__assert_fail@plt+0x5704>
   16c98:	str	r4, [r5]
   16c9c:	mov	r0, r5
   16ca0:	pop	{r4, r5, r6, pc}
   16ca4:	bl	11570 <abort@plt>
   16ca8:	push	{r4, r5, r6, lr}
   16cac:	mov	r4, r0
   16cb0:	mov	r5, r1
   16cb4:	bl	1a13c <__assert_fail@plt+0x8b9c>
   16cb8:	ldrb	r3, [r0]
   16cbc:	bic	r3, r3, #32
   16cc0:	cmp	r3, #85	; 0x55
   16cc4:	bne	16d24 <__assert_fail@plt+0x5784>
   16cc8:	ldrb	r3, [r0, #1]
   16ccc:	bic	r3, r3, #32
   16cd0:	cmp	r3, #84	; 0x54
   16cd4:	bne	16d60 <__assert_fail@plt+0x57c0>
   16cd8:	ldrb	r3, [r0, #2]
   16cdc:	bic	r3, r3, #32
   16ce0:	cmp	r3, #70	; 0x46
   16ce4:	bne	16d60 <__assert_fail@plt+0x57c0>
   16ce8:	ldrb	r3, [r0, #3]
   16cec:	cmp	r3, #45	; 0x2d
   16cf0:	bne	16d60 <__assert_fail@plt+0x57c0>
   16cf4:	ldrb	r3, [r0, #4]
   16cf8:	cmp	r3, #56	; 0x38
   16cfc:	bne	16d60 <__assert_fail@plt+0x57c0>
   16d00:	ldrb	r3, [r0, #5]
   16d04:	cmp	r3, #0
   16d08:	bne	16d60 <__assert_fail@plt+0x57c0>
   16d0c:	ldrb	r2, [r4]
   16d10:	ldr	r3, [pc, #152]	; 16db0 <__assert_fail@plt+0x5810>
   16d14:	ldr	r0, [pc, #152]	; 16db4 <__assert_fail@plt+0x5814>
   16d18:	cmp	r2, #96	; 0x60
   16d1c:	movne	r0, r3
   16d20:	pop	{r4, r5, r6, pc}
   16d24:	cmp	r3, #71	; 0x47
   16d28:	bne	16d60 <__assert_fail@plt+0x57c0>
   16d2c:	ldrb	r3, [r0, #1]
   16d30:	bic	r3, r3, #32
   16d34:	cmp	r3, #66	; 0x42
   16d38:	bne	16d60 <__assert_fail@plt+0x57c0>
   16d3c:	ldrb	r3, [r0, #2]
   16d40:	cmp	r3, #49	; 0x31
   16d44:	bne	16d60 <__assert_fail@plt+0x57c0>
   16d48:	ldrb	r3, [r0, #3]
   16d4c:	cmp	r3, #56	; 0x38
   16d50:	bne	16d60 <__assert_fail@plt+0x57c0>
   16d54:	ldrb	r3, [r0, #4]
   16d58:	cmp	r3, #48	; 0x30
   16d5c:	beq	16d74 <__assert_fail@plt+0x57d4>
   16d60:	ldr	r3, [pc, #80]	; 16db8 <__assert_fail@plt+0x5818>
   16d64:	cmp	r5, #9
   16d68:	ldr	r0, [pc, #76]	; 16dbc <__assert_fail@plt+0x581c>
   16d6c:	movne	r0, r3
   16d70:	pop	{r4, r5, r6, pc}
   16d74:	ldrb	r3, [r0, #5]
   16d78:	cmp	r3, #51	; 0x33
   16d7c:	bne	16d60 <__assert_fail@plt+0x57c0>
   16d80:	ldrb	r3, [r0, #6]
   16d84:	cmp	r3, #48	; 0x30
   16d88:	bne	16d60 <__assert_fail@plt+0x57c0>
   16d8c:	ldrb	r3, [r0, #7]
   16d90:	cmp	r3, #0
   16d94:	bne	16d60 <__assert_fail@plt+0x57c0>
   16d98:	ldrb	r2, [r4]
   16d9c:	ldr	r3, [pc, #28]	; 16dc0 <__assert_fail@plt+0x5820>
   16da0:	ldr	r0, [pc, #28]	; 16dc4 <__assert_fail@plt+0x5824>
   16da4:	cmp	r2, #96	; 0x60
   16da8:	movne	r0, r3
   16dac:	pop	{r4, r5, r6, pc}
   16db0:	andeq	ip, r1, r8, ror r9
   16db4:	andeq	ip, r1, r4, ror r9
   16db8:	andeq	ip, r1, r8, lsl #19
   16dbc:	andeq	ip, r1, r4, lsl #19
   16dc0:	andeq	ip, r1, r0, lsl #19
   16dc4:	andeq	ip, r1, ip, ror r9
   16dc8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16dcc:	sub	sp, sp, #116	; 0x74
   16dd0:	mov	sl, r0
   16dd4:	str	r3, [sp, #24]
   16dd8:	mov	r3, #1
   16ddc:	mov	r8, r1
   16de0:	str	r2, [sp, #56]	; 0x38
   16de4:	str	r3, [sp, #36]	; 0x24
   16de8:	bl	11324 <__ctype_get_mb_cur_max@plt>
   16dec:	ldr	r3, [sp, #156]	; 0x9c
   16df0:	mov	fp, r8
   16df4:	mov	r2, #0
   16df8:	lsr	r3, r3, #1
   16dfc:	and	r3, r3, #1
   16e00:	str	r2, [sp, #68]	; 0x44
   16e04:	str	r3, [sp, #28]
   16e08:	str	r2, [sp, #40]	; 0x28
   16e0c:	str	r2, [sp, #44]	; 0x2c
   16e10:	str	r2, [sp, #52]	; 0x34
   16e14:	str	r2, [sp, #64]	; 0x40
   16e18:	str	r2, [sp, #72]	; 0x48
   16e1c:	str	sl, [sp, #32]
   16e20:	str	r0, [sp, #76]	; 0x4c
   16e24:	ldr	r3, [sp, #152]	; 0x98
   16e28:	cmp	r3, #10
   16e2c:	ldrls	pc, [pc, r3, lsl #2]
   16e30:	b	17ff0 <__assert_fail@plt+0x6a50>
   16e34:	andeq	r6, r1, r0, ror #28
   16e38:	andeq	r7, r1, r8, asr #2
   16e3c:	andeq	r7, r1, ip, ror #2
   16e40:	muleq	r1, r0, r1
   16e44:			; <UNDEFINED> instruction: 0x000172bc
   16e48:	muleq	r1, r0, r2
   16e4c:	andeq	r7, r1, r8, ror #4
   16e50:	andeq	r7, r1, r4, lsr #3
   16e54:			; <UNDEFINED> instruction: 0x000171bc
   16e58:			; <UNDEFINED> instruction: 0x000171bc
   16e5c:			; <UNDEFINED> instruction: 0x000171bc
   16e60:	mov	r3, #0
   16e64:	mov	r7, r3
   16e68:	str	r3, [sp, #28]
   16e6c:	ldr	r3, [sp, #44]	; 0x2c
   16e70:	mov	sl, #0
   16e74:	eor	r3, r3, #1
   16e78:	str	r3, [sp, #60]	; 0x3c
   16e7c:	ldr	r3, [sp, #24]
   16e80:	cmn	r3, #1
   16e84:	beq	173e8 <__assert_fail@plt+0x5e48>
   16e88:	ldr	r3, [sp, #24]
   16e8c:	subs	r5, r3, sl
   16e90:	movne	r5, #1
   16e94:	cmp	r5, #0
   16e98:	beq	17400 <__assert_fail@plt+0x5e60>
   16e9c:	ldr	r3, [sp, #152]	; 0x98
   16ea0:	ldr	r8, [sp, #44]	; 0x2c
   16ea4:	cmp	r3, #2
   16ea8:	moveq	r8, #0
   16eac:	andne	r8, r8, #1
   16eb0:	ldr	r3, [sp, #52]	; 0x34
   16eb4:	adds	r9, r3, #0
   16eb8:	movne	r9, #1
   16ebc:	ands	r6, r9, r8
   16ec0:	beq	17868 <__assert_fail@plt+0x62c8>
   16ec4:	ldr	r2, [sp, #52]	; 0x34
   16ec8:	ldr	r1, [sp, #24]
   16ecc:	cmp	r2, #1
   16ed0:	mov	r3, r2
   16ed4:	movls	r3, #0
   16ed8:	movhi	r3, #1
   16edc:	cmn	r1, #1
   16ee0:	movne	r3, #0
   16ee4:	cmp	r3, #0
   16ee8:	add	r4, sl, r2
   16eec:	beq	16efc <__assert_fail@plt+0x595c>
   16ef0:	ldr	r0, [sp, #56]	; 0x38
   16ef4:	bl	113f0 <strlen@plt>
   16ef8:	str	r0, [sp, #24]
   16efc:	ldr	r3, [sp, #24]
   16f00:	cmp	r3, r4
   16f04:	ldr	r3, [sp, #56]	; 0x38
   16f08:	add	r3, r3, sl
   16f0c:	str	r3, [sp, #48]	; 0x30
   16f10:	bcc	17874 <__assert_fail@plt+0x62d4>
   16f14:	mov	r0, r3
   16f18:	ldr	r2, [sp, #52]	; 0x34
   16f1c:	ldr	r1, [sp, #64]	; 0x40
   16f20:	bl	1127c <memcmp@plt>
   16f24:	cmp	r0, #0
   16f28:	bne	17874 <__assert_fail@plt+0x62d4>
   16f2c:	ldr	r3, [sp, #28]
   16f30:	cmp	r3, #0
   16f34:	bne	180f0 <__assert_fail@plt+0x6b50>
   16f38:	ldr	r3, [sp, #48]	; 0x30
   16f3c:	ldrb	r4, [r3]
   16f40:	cmp	r4, #126	; 0x7e
   16f44:	ldrls	pc, [pc, r4, lsl #2]
   16f48:	b	17808 <__assert_fail@plt+0x6268>
   16f4c:	andeq	r7, r1, ip, lsr #12
   16f50:	andeq	r7, r1, r8, lsl #16
   16f54:	andeq	r7, r1, r8, lsl #16
   16f58:	andeq	r7, r1, r8, lsl #16
   16f5c:	andeq	r7, r1, r8, lsl #16
   16f60:	andeq	r7, r1, r8, lsl #16
   16f64:	andeq	r7, r1, r8, lsl #16
   16f68:	andeq	r7, r1, r0, lsl r6
   16f6c:	strdeq	r7, [r1], -r4
   16f70:	strdeq	r7, [r1], -r0
   16f74:	andeq	r7, r1, r4, asr r5
   16f78:	andeq	r7, r1, r8, lsr r5
   16f7c:	andeq	r7, r1, ip, asr #15
   16f80:	andeq	r7, r1, r8, lsr #15
   16f84:	andeq	r7, r1, r8, lsl #16
   16f88:	andeq	r7, r1, r8, lsl #16
   16f8c:	andeq	r7, r1, r8, lsl #16
   16f90:	andeq	r7, r1, r8, lsl #16
   16f94:	andeq	r7, r1, r8, lsl #16
   16f98:	andeq	r7, r1, r8, lsl #16
   16f9c:	andeq	r7, r1, r8, lsl #16
   16fa0:	andeq	r7, r1, r8, lsl #16
   16fa4:	andeq	r7, r1, r8, lsl #16
   16fa8:	andeq	r7, r1, r8, lsl #16
   16fac:	andeq	r7, r1, r8, lsl #16
   16fb0:	andeq	r7, r1, r8, lsl #16
   16fb4:	andeq	r7, r1, r8, lsl #16
   16fb8:	andeq	r7, r1, r8, lsl #16
   16fbc:	andeq	r7, r1, r8, lsl #16
   16fc0:	andeq	r7, r1, r8, lsl #16
   16fc4:	andeq	r7, r1, r8, lsl #16
   16fc8:	andeq	r7, r1, r8, lsl #16
   16fcc:	andeq	r7, r1, r8, ror #15
   16fd0:	andeq	r7, r1, ip, lsl r7
   16fd4:	andeq	r7, r1, ip, lsl r7
   16fd8:	andeq	r7, r1, ip, lsr #6
   16fdc:	andeq	r7, r1, ip, lsl r7
   16fe0:			; <UNDEFINED> instruction: 0x000177b4
   16fe4:	andeq	r7, r1, ip, lsl r7
   16fe8:	andeq	r7, r1, r8, lsl #15
   16fec:	andeq	r7, r1, ip, lsl r7
   16ff0:	andeq	r7, r1, ip, lsl r7
   16ff4:	andeq	r7, r1, ip, lsl r7
   16ff8:			; <UNDEFINED> instruction: 0x000177b4
   16ffc:			; <UNDEFINED> instruction: 0x000177b4
   17000:			; <UNDEFINED> instruction: 0x000177b4
   17004:			; <UNDEFINED> instruction: 0x000177b4
   17008:			; <UNDEFINED> instruction: 0x000177b4
   1700c:			; <UNDEFINED> instruction: 0x000177b4
   17010:			; <UNDEFINED> instruction: 0x000177b4
   17014:			; <UNDEFINED> instruction: 0x000177b4
   17018:			; <UNDEFINED> instruction: 0x000177b4
   1701c:			; <UNDEFINED> instruction: 0x000177b4
   17020:			; <UNDEFINED> instruction: 0x000177b4
   17024:			; <UNDEFINED> instruction: 0x000177b4
   17028:			; <UNDEFINED> instruction: 0x000177b4
   1702c:			; <UNDEFINED> instruction: 0x000177b4
   17030:			; <UNDEFINED> instruction: 0x000177b4
   17034:			; <UNDEFINED> instruction: 0x000177b4
   17038:	andeq	r7, r1, ip, lsl r7
   1703c:	andeq	r7, r1, ip, lsl r7
   17040:	andeq	r7, r1, ip, lsl r7
   17044:	andeq	r7, r1, ip, lsl r7
   17048:	andeq	r7, r1, r8, asr r7
   1704c:	andeq	r7, r1, r8, lsl #16
   17050:			; <UNDEFINED> instruction: 0x000177b4
   17054:			; <UNDEFINED> instruction: 0x000177b4
   17058:			; <UNDEFINED> instruction: 0x000177b4
   1705c:			; <UNDEFINED> instruction: 0x000177b4
   17060:			; <UNDEFINED> instruction: 0x000177b4
   17064:			; <UNDEFINED> instruction: 0x000177b4
   17068:			; <UNDEFINED> instruction: 0x000177b4
   1706c:			; <UNDEFINED> instruction: 0x000177b4
   17070:			; <UNDEFINED> instruction: 0x000177b4
   17074:			; <UNDEFINED> instruction: 0x000177b4
   17078:			; <UNDEFINED> instruction: 0x000177b4
   1707c:			; <UNDEFINED> instruction: 0x000177b4
   17080:			; <UNDEFINED> instruction: 0x000177b4
   17084:			; <UNDEFINED> instruction: 0x000177b4
   17088:			; <UNDEFINED> instruction: 0x000177b4
   1708c:			; <UNDEFINED> instruction: 0x000177b4
   17090:			; <UNDEFINED> instruction: 0x000177b4
   17094:			; <UNDEFINED> instruction: 0x000177b4
   17098:			; <UNDEFINED> instruction: 0x000177b4
   1709c:			; <UNDEFINED> instruction: 0x000177b4
   170a0:			; <UNDEFINED> instruction: 0x000177b4
   170a4:			; <UNDEFINED> instruction: 0x000177b4
   170a8:			; <UNDEFINED> instruction: 0x000177b4
   170ac:			; <UNDEFINED> instruction: 0x000177b4
   170b0:			; <UNDEFINED> instruction: 0x000177b4
   170b4:			; <UNDEFINED> instruction: 0x000177b4
   170b8:	andeq	r7, r1, ip, lsl r7
   170bc:	andeq	r7, r1, r8, ror r4
   170c0:			; <UNDEFINED> instruction: 0x000177b4
   170c4:	andeq	r7, r1, ip, lsl r7
   170c8:			; <UNDEFINED> instruction: 0x000177b4
   170cc:	andeq	r7, r1, ip, lsl r7
   170d0:			; <UNDEFINED> instruction: 0x000177b4
   170d4:			; <UNDEFINED> instruction: 0x000177b4
   170d8:			; <UNDEFINED> instruction: 0x000177b4
   170dc:			; <UNDEFINED> instruction: 0x000177b4
   170e0:			; <UNDEFINED> instruction: 0x000177b4
   170e4:			; <UNDEFINED> instruction: 0x000177b4
   170e8:			; <UNDEFINED> instruction: 0x000177b4
   170ec:			; <UNDEFINED> instruction: 0x000177b4
   170f0:			; <UNDEFINED> instruction: 0x000177b4
   170f4:			; <UNDEFINED> instruction: 0x000177b4
   170f8:			; <UNDEFINED> instruction: 0x000177b4
   170fc:			; <UNDEFINED> instruction: 0x000177b4
   17100:			; <UNDEFINED> instruction: 0x000177b4
   17104:			; <UNDEFINED> instruction: 0x000177b4
   17108:			; <UNDEFINED> instruction: 0x000177b4
   1710c:			; <UNDEFINED> instruction: 0x000177b4
   17110:			; <UNDEFINED> instruction: 0x000177b4
   17114:			; <UNDEFINED> instruction: 0x000177b4
   17118:			; <UNDEFINED> instruction: 0x000177b4
   1711c:			; <UNDEFINED> instruction: 0x000177b4
   17120:			; <UNDEFINED> instruction: 0x000177b4
   17124:			; <UNDEFINED> instruction: 0x000177b4
   17128:			; <UNDEFINED> instruction: 0x000177b4
   1712c:			; <UNDEFINED> instruction: 0x000177b4
   17130:			; <UNDEFINED> instruction: 0x000177b4
   17134:			; <UNDEFINED> instruction: 0x000177b4
   17138:	andeq	r7, r1, ip, lsl #6
   1713c:	andeq	r7, r1, ip, lsl r7
   17140:	andeq	r7, r1, ip, lsl #6
   17144:	andeq	r7, r1, ip, lsr #6
   17148:	mov	r3, #1
   1714c:	str	r3, [sp, #28]
   17150:	str	r3, [sp, #52]	; 0x34
   17154:	ldr	r3, [pc, #4000]	; 180fc <__assert_fail@plt+0x6b5c>
   17158:	mov	r7, #0
   1715c:	str	r3, [sp, #64]	; 0x40
   17160:	mov	r3, #2
   17164:	str	r3, [sp, #152]	; 0x98
   17168:	b	16e6c <__assert_fail@plt+0x58cc>
   1716c:	ldr	r3, [sp, #28]
   17170:	cmp	r3, #0
   17174:	beq	172d0 <__assert_fail@plt+0x5d30>
   17178:	mov	r3, #1
   1717c:	str	r3, [sp, #52]	; 0x34
   17180:	ldr	r3, [pc, #3956]	; 180fc <__assert_fail@plt+0x6b5c>
   17184:	mov	r7, #0
   17188:	str	r3, [sp, #64]	; 0x40
   1718c:	b	16e6c <__assert_fail@plt+0x58cc>
   17190:	mov	r3, #1
   17194:	str	r3, [sp, #44]	; 0x2c
   17198:	str	r3, [sp, #52]	; 0x34
   1719c:	str	r3, [sp, #28]
   171a0:	b	17154 <__assert_fail@plt+0x5bb4>
   171a4:	mov	r3, #0
   171a8:	str	r3, [sp, #28]
   171ac:	mov	r3, #1
   171b0:	str	r3, [sp, #44]	; 0x2c
   171b4:	mov	r7, #0
   171b8:	b	16e6c <__assert_fail@plt+0x58cc>
   171bc:	ldr	r3, [sp, #152]	; 0x98
   171c0:	cmp	r3, #10
   171c4:	beq	17208 <__assert_fail@plt+0x5c68>
   171c8:	mov	r2, #5
   171cc:	ldr	r1, [pc, #3884]	; 18100 <__assert_fail@plt+0x6b60>
   171d0:	mov	r0, #0
   171d4:	bl	11288 <dcgettext@plt>
   171d8:	ldr	r2, [pc, #3872]	; 18100 <__assert_fail@plt+0x6b60>
   171dc:	cmp	r0, r2
   171e0:	str	r0, [sp, #164]	; 0xa4
   171e4:	beq	181ec <__assert_fail@plt+0x6c4c>
   171e8:	mov	r2, #5
   171ec:	ldr	r1, [pc, #3848]	; 180fc <__assert_fail@plt+0x6b5c>
   171f0:	mov	r0, #0
   171f4:	bl	11288 <dcgettext@plt>
   171f8:	ldr	r2, [pc, #3836]	; 180fc <__assert_fail@plt+0x6b5c>
   171fc:	cmp	r0, r2
   17200:	str	r0, [sp, #168]	; 0xa8
   17204:	beq	181dc <__assert_fail@plt+0x6c3c>
   17208:	ldr	r7, [sp, #28]
   1720c:	cmp	r7, #0
   17210:	movne	r7, #0
   17214:	bne	17248 <__assert_fail@plt+0x5ca8>
   17218:	ldr	r3, [sp, #164]	; 0xa4
   1721c:	ldrb	r3, [r3]
   17220:	cmp	r3, #0
   17224:	beq	181fc <__assert_fail@plt+0x6c5c>
   17228:	ldr	r2, [sp, #164]	; 0xa4
   1722c:	ldr	r1, [sp, #32]
   17230:	cmp	fp, r7
   17234:	strbhi	r3, [r1, r7]
   17238:	ldrb	r3, [r2, #1]!
   1723c:	add	r7, r7, #1
   17240:	cmp	r3, #0
   17244:	bne	17230 <__assert_fail@plt+0x5c90>
   17248:	ldr	r0, [sp, #168]	; 0xa8
   1724c:	bl	113f0 <strlen@plt>
   17250:	ldr	r3, [sp, #168]	; 0xa8
   17254:	str	r3, [sp, #64]	; 0x40
   17258:	mov	r3, #1
   1725c:	str	r3, [sp, #44]	; 0x2c
   17260:	str	r0, [sp, #52]	; 0x34
   17264:	b	16e6c <__assert_fail@plt+0x58cc>
   17268:	mov	r3, #1
   1726c:	str	r3, [sp, #44]	; 0x2c
   17270:	str	r3, [sp, #52]	; 0x34
   17274:	str	r3, [sp, #28]
   17278:	ldr	r3, [pc, #3716]	; 18104 <__assert_fail@plt+0x6b64>
   1727c:	mov	r7, #0
   17280:	str	r3, [sp, #64]	; 0x40
   17284:	mov	r3, #5
   17288:	str	r3, [sp, #152]	; 0x98
   1728c:	b	16e6c <__assert_fail@plt+0x58cc>
   17290:	ldr	r3, [sp, #28]
   17294:	cmp	r3, #0
   17298:	beq	17f98 <__assert_fail@plt+0x69f8>
   1729c:	ldr	r3, [sp, #28]
   172a0:	mov	r7, #0
   172a4:	str	r3, [sp, #44]	; 0x2c
   172a8:	mov	r3, #1
   172ac:	str	r3, [sp, #52]	; 0x34
   172b0:	ldr	r3, [pc, #3660]	; 18104 <__assert_fail@plt+0x6b64>
   172b4:	str	r3, [sp, #64]	; 0x40
   172b8:	b	16e6c <__assert_fail@plt+0x58cc>
   172bc:	ldr	r3, [sp, #28]
   172c0:	cmp	r3, #0
   172c4:	mov	r3, #1
   172c8:	streq	r3, [sp, #44]	; 0x2c
   172cc:	bne	17150 <__assert_fail@plt+0x5bb0>
   172d0:	cmp	fp, #0
   172d4:	beq	17fc8 <__assert_fail@plt+0x6a28>
   172d8:	ldr	r3, [sp, #32]
   172dc:	mov	r2, #39	; 0x27
   172e0:	mov	r7, #1
   172e4:	strb	r2, [r3]
   172e8:	mov	r3, #0
   172ec:	str	r3, [sp, #28]
   172f0:	mov	r3, #1
   172f4:	str	r3, [sp, #52]	; 0x34
   172f8:	ldr	r3, [pc, #3580]	; 180fc <__assert_fail@plt+0x6b5c>
   172fc:	str	r3, [sp, #64]	; 0x40
   17300:	mov	r3, #2
   17304:	str	r3, [sp, #152]	; 0x98
   17308:	b	16e6c <__assert_fail@plt+0x58cc>
   1730c:	ldr	r3, [sp, #24]
   17310:	cmn	r3, #1
   17314:	beq	17f2c <__assert_fail@plt+0x698c>
   17318:	ldr	r3, [sp, #24]
   1731c:	subs	r3, r3, #1
   17320:	movne	r3, #1
   17324:	cmp	r3, #0
   17328:	bne	17334 <__assert_fail@plt+0x5d94>
   1732c:	cmp	sl, #0
   17330:	beq	17720 <__assert_fail@plt+0x6180>
   17334:	ldr	r3, [sp, #152]	; 0x98
   17338:	mov	r5, #0
   1733c:	sub	r2, r3, #2
   17340:	mov	r8, r5
   17344:	clz	r2, r2
   17348:	lsr	r2, r2, #5
   1734c:	ldr	r3, [sp, #60]	; 0x3c
   17350:	ldr	r1, [sp, #28]
   17354:	orr	r3, r2, r3
   17358:	eor	r3, r3, #1
   1735c:	orr	r3, r1, r3
   17360:	tst	r3, #255	; 0xff
   17364:	bne	17a90 <__assert_fail@plt+0x64f0>
   17368:	cmp	r6, #0
   1736c:	bne	174bc <__assert_fail@plt+0x5f1c>
   17370:	ldr	r3, [sp, #40]	; 0x28
   17374:	eor	r8, r8, #1
   17378:	and	r8, r8, r3
   1737c:	add	sl, sl, #1
   17380:	uxtb	r6, r8
   17384:	cmp	r6, #0
   17388:	beq	173bc <__assert_fail@plt+0x5e1c>
   1738c:	cmp	fp, r7
   17390:	movhi	r2, #39	; 0x27
   17394:	ldrhi	r3, [sp, #32]
   17398:	strbhi	r2, [r3, r7]
   1739c:	add	r3, r7, #1
   173a0:	cmp	fp, r3
   173a4:	movhi	r1, #39	; 0x27
   173a8:	ldrhi	r2, [sp, #32]
   173ac:	add	r7, r7, #2
   173b0:	strbhi	r1, [r2, r3]
   173b4:	mov	r3, #0
   173b8:	str	r3, [sp, #40]	; 0x28
   173bc:	cmp	r7, fp
   173c0:	ldrcc	r3, [sp, #32]
   173c4:	strbcc	r4, [r3, r7]
   173c8:	ldr	r3, [sp, #36]	; 0x24
   173cc:	cmp	r5, #0
   173d0:	moveq	r3, #0
   173d4:	str	r3, [sp, #36]	; 0x24
   173d8:	ldr	r3, [sp, #24]
   173dc:	add	r7, r7, #1
   173e0:	cmn	r3, #1
   173e4:	bne	16e88 <__assert_fail@plt+0x58e8>
   173e8:	ldr	r3, [sp, #56]	; 0x38
   173ec:	ldrb	r5, [r3, sl]
   173f0:	adds	r5, r5, #0
   173f4:	movne	r5, #1
   173f8:	cmp	r5, #0
   173fc:	bne	16e9c <__assert_fail@plt+0x58fc>
   17400:	ldr	r3, [sp, #152]	; 0x98
   17404:	ldr	r1, [sp, #28]
   17408:	sub	r3, r3, #2
   1740c:	clz	r3, r3
   17410:	lsr	r3, r3, #5
   17414:	and	r9, r1, r3
   17418:	cmp	r7, #0
   1741c:	movne	r2, #0
   17420:	andeq	r2, r9, #1
   17424:	cmp	r2, #0
   17428:	bne	17e04 <__assert_fail@plt+0x6864>
   1742c:	eor	r2, r1, #1
   17430:	ands	r3, r3, r2
   17434:	beq	182c0 <__assert_fail@plt+0x6d20>
   17438:	ldr	r2, [sp, #68]	; 0x44
   1743c:	cmp	r2, #0
   17440:	beq	182ac <__assert_fail@plt+0x6d0c>
   17444:	ldr	r3, [sp, #36]	; 0x24
   17448:	cmp	r3, #0
   1744c:	bne	18264 <__assert_fail@plt+0x6cc4>
   17450:	ldr	r2, [sp, #72]	; 0x48
   17454:	clz	r3, fp
   17458:	cmp	r2, #0
   1745c:	lsr	r3, r3, #5
   17460:	moveq	r3, #0
   17464:	cmp	r3, #0
   17468:	beq	18204 <__assert_fail@plt+0x6c64>
   1746c:	str	r3, [sp, #68]	; 0x44
   17470:	ldr	fp, [sp, #72]	; 0x48
   17474:	b	16e24 <__assert_fail@plt+0x5884>
   17478:	ldr	r3, [sp, #152]	; 0x98
   1747c:	cmp	r3, #2
   17480:	beq	17ad4 <__assert_fail@plt+0x6534>
   17484:	ldr	r3, [sp, #44]	; 0x2c
   17488:	ldr	r2, [sp, #28]
   1748c:	and	r2, r3, r2
   17490:	ands	r2, r9, r2
   17494:	bne	17ae0 <__assert_fail@plt+0x6540>
   17498:	mov	r4, #92	; 0x5c
   1749c:	mov	r3, r4
   174a0:	ldr	r1, [sp, #44]	; 0x2c
   174a4:	cmp	r1, #0
   174a8:	moveq	r5, #0
   174ac:	moveq	r8, r1
   174b0:	beq	1734c <__assert_fail@plt+0x5dac>
   174b4:	mov	r4, r3
   174b8:	mov	r5, #0
   174bc:	ldr	r3, [sp, #28]
   174c0:	cmp	r3, #0
   174c4:	bne	17ac8 <__assert_fail@plt+0x6528>
   174c8:	ldr	r3, [sp, #40]	; 0x28
   174cc:	eor	r9, r3, #1
   174d0:	and	r9, r9, r2
   174d4:	ands	r9, r9, #255	; 0xff
   174d8:	beq	1751c <__assert_fail@plt+0x5f7c>
   174dc:	cmp	fp, r7
   174e0:	movhi	r2, #39	; 0x27
   174e4:	ldrhi	r3, [sp, #32]
   174e8:	str	r9, [sp, #40]	; 0x28
   174ec:	strbhi	r2, [r3, r7]
   174f0:	add	r3, r7, #1
   174f4:	cmp	fp, r3
   174f8:	movhi	r1, #36	; 0x24
   174fc:	ldrhi	r2, [sp, #32]
   17500:	strbhi	r1, [r2, r3]
   17504:	add	r3, r7, #2
   17508:	cmp	fp, r3
   1750c:	add	r7, r7, #3
   17510:	ldrhi	r2, [sp, #32]
   17514:	movhi	r1, #39	; 0x27
   17518:	strbhi	r1, [r2, r3]
   1751c:	cmp	fp, r7
   17520:	movhi	r2, #92	; 0x5c
   17524:	ldrhi	r3, [sp, #32]
   17528:	add	sl, sl, #1
   1752c:	strbhi	r2, [r3, r7]
   17530:	add	r7, r7, #1
   17534:	b	173bc <__assert_fail@plt+0x5e1c>
   17538:	ldr	r3, [sp, #152]	; 0x98
   1753c:	mov	r4, #11
   17540:	sub	r2, r3, #2
   17544:	mov	r3, #118	; 0x76
   17548:	clz	r2, r2
   1754c:	lsr	r2, r2, #5
   17550:	b	174a0 <__assert_fail@plt+0x5f00>
   17554:	mov	r4, #10
   17558:	mov	r3, #110	; 0x6e
   1755c:	ldr	r2, [sp, #152]	; 0x98
   17560:	ldr	r1, [sp, #28]
   17564:	sub	r2, r2, #2
   17568:	clz	r2, r2
   1756c:	lsr	r2, r2, #5
   17570:	ands	r1, r1, r2
   17574:	beq	174a0 <__assert_fail@plt+0x5f00>
   17578:	ldr	sl, [sp, #32]
   1757c:	mov	r8, fp
   17580:	mov	r2, r1
   17584:	mov	r3, #2
   17588:	str	r3, [sp, #152]	; 0x98
   1758c:	ldr	r9, [sp, #44]	; 0x2c
   17590:	ldr	r3, [sp, #152]	; 0x98
   17594:	and	r9, r9, r2
   17598:	tst	r9, #255	; 0xff
   1759c:	movne	r3, #4
   175a0:	str	r3, [sp, #152]	; 0x98
   175a4:	ldr	r3, [sp, #156]	; 0x9c
   175a8:	mov	ip, #0
   175ac:	bic	r3, r3, #2
   175b0:	str	r3, [sp, #4]
   175b4:	ldr	r3, [sp, #168]	; 0xa8
   175b8:	ldr	r2, [sp, #56]	; 0x38
   175bc:	str	r3, [sp, #16]
   175c0:	ldr	r3, [sp, #164]	; 0xa4
   175c4:	mov	r1, r8
   175c8:	str	r3, [sp, #12]
   175cc:	ldr	r3, [sp, #152]	; 0x98
   175d0:	mov	r0, sl
   175d4:	str	r3, [sp]
   175d8:	str	ip, [sp, #8]
   175dc:	ldr	r3, [sp, #24]
   175e0:	bl	16dc8 <__assert_fail@plt+0x5828>
   175e4:	mov	fp, r0
   175e8:	mov	r0, fp
   175ec:	add	sp, sp, #116	; 0x74
   175f0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   175f4:	ldr	r3, [sp, #152]	; 0x98
   175f8:	mov	r4, #8
   175fc:	sub	r2, r3, #2
   17600:	mov	r3, #98	; 0x62
   17604:	clz	r2, r2
   17608:	lsr	r2, r2, #5
   1760c:	b	174a0 <__assert_fail@plt+0x5f00>
   17610:	ldr	r3, [sp, #152]	; 0x98
   17614:	mov	r4, #7
   17618:	sub	r2, r3, #2
   1761c:	mov	r3, #97	; 0x61
   17620:	clz	r2, r2
   17624:	lsr	r2, r2, #5
   17628:	b	174a0 <__assert_fail@plt+0x5f00>
   1762c:	ldr	r3, [sp, #44]	; 0x2c
   17630:	cmp	r3, #0
   17634:	beq	17e18 <__assert_fail@plt+0x6878>
   17638:	ldr	r3, [sp, #28]
   1763c:	cmp	r3, #0
   17640:	bne	180f0 <__assert_fail@plt+0x6b50>
   17644:	ldr	r3, [sp, #152]	; 0x98
   17648:	sub	r2, r3, #2
   1764c:	ldr	r3, [sp, #40]	; 0x28
   17650:	clz	r2, r2
   17654:	eor	r3, r3, #1
   17658:	lsr	r2, r2, #5
   1765c:	ands	r3, r2, r3
   17660:	moveq	r1, r7
   17664:	beq	176a8 <__assert_fail@plt+0x6108>
   17668:	cmp	fp, r7
   1766c:	movhi	r0, #39	; 0x27
   17670:	ldrhi	r1, [sp, #32]
   17674:	str	r3, [sp, #40]	; 0x28
   17678:	strbhi	r0, [r1, r7]
   1767c:	add	r1, r7, #1
   17680:	cmp	fp, r1
   17684:	movhi	ip, #36	; 0x24
   17688:	ldrhi	r0, [sp, #32]
   1768c:	strbhi	ip, [r0, r1]
   17690:	add	r1, r7, #2
   17694:	cmp	fp, r1
   17698:	movhi	ip, #39	; 0x27
   1769c:	ldrhi	r0, [sp, #32]
   176a0:	strbhi	ip, [r0, r1]
   176a4:	add	r1, r7, #3
   176a8:	cmp	fp, r1
   176ac:	movhi	r0, #92	; 0x5c
   176b0:	ldrhi	r3, [sp, #32]
   176b4:	add	r7, r1, #1
   176b8:	strbhi	r0, [r3, r1]
   176bc:	cmp	r8, #0
   176c0:	beq	18004 <__assert_fail@plt+0x6a64>
   176c4:	ldr	r0, [sp, #24]
   176c8:	add	r3, sl, #1
   176cc:	cmp	r3, r0
   176d0:	bcs	17f40 <__assert_fail@plt+0x69a0>
   176d4:	ldr	r0, [sp, #56]	; 0x38
   176d8:	ldrb	r3, [r0, r3]
   176dc:	sub	r3, r3, #48	; 0x30
   176e0:	cmp	r3, #9
   176e4:	bhi	17f40 <__assert_fail@plt+0x69a0>
   176e8:	cmp	fp, r7
   176ec:	movhi	r3, #48	; 0x30
   176f0:	ldrhi	r0, [sp, #32]
   176f4:	ldr	r5, [sp, #28]
   176f8:	mov	r4, #48	; 0x30
   176fc:	strbhi	r3, [r0, r7]
   17700:	add	r3, r1, #2
   17704:	cmp	fp, r3
   17708:	movhi	r0, #48	; 0x30
   1770c:	ldrhi	ip, [sp, #32]
   17710:	add	r7, r1, #3
   17714:	strbhi	r0, [ip, r3]
   17718:	b	1734c <__assert_fail@plt+0x5dac>
   1771c:	mov	r5, #0
   17720:	ldr	r3, [sp, #152]	; 0x98
   17724:	sub	r2, r3, #2
   17728:	ldr	r3, [sp, #28]
   1772c:	clz	r2, r2
   17730:	lsr	r2, r2, #5
   17734:	ands	r8, r3, r2
   17738:	beq	1734c <__assert_fail@plt+0x5dac>
   1773c:	mov	r3, r8
   17740:	mov	r2, r3
   17744:	mov	r3, #2
   17748:	ldr	sl, [sp, #32]
   1774c:	mov	r8, fp
   17750:	str	r3, [sp, #152]	; 0x98
   17754:	b	1758c <__assert_fail@plt+0x5fec>
   17758:	ldr	r3, [sp, #152]	; 0x98
   1775c:	cmp	r3, #2
   17760:	beq	17e84 <__assert_fail@plt+0x68e4>
   17764:	cmp	r3, #5
   17768:	beq	17e44 <__assert_fail@plt+0x68a4>
   1776c:	mov	r5, #0
   17770:	sub	r2, r3, #2
   17774:	mov	r8, r5
   17778:	clz	r2, r2
   1777c:	mov	r4, #63	; 0x3f
   17780:	lsr	r2, r2, #5
   17784:	b	1734c <__assert_fail@plt+0x5dac>
   17788:	ldr	r3, [sp, #152]	; 0x98
   1778c:	cmp	r3, #2
   17790:	beq	17ea4 <__assert_fail@plt+0x6904>
   17794:	mov	r2, #0
   17798:	str	r5, [sp, #68]	; 0x44
   1779c:	mov	r8, r2
   177a0:	mov	r4, #39	; 0x27
   177a4:	b	1734c <__assert_fail@plt+0x5dac>
   177a8:	mov	r4, #13
   177ac:	mov	r3, #114	; 0x72
   177b0:	b	1755c <__assert_fail@plt+0x5fbc>
   177b4:	ldr	r3, [sp, #152]	; 0x98
   177b8:	mov	r8, #0
   177bc:	sub	r2, r3, #2
   177c0:	clz	r2, r2
   177c4:	lsr	r2, r2, #5
   177c8:	b	1734c <__assert_fail@plt+0x5dac>
   177cc:	ldr	r3, [sp, #152]	; 0x98
   177d0:	mov	r4, #12
   177d4:	sub	r2, r3, #2
   177d8:	mov	r3, #102	; 0x66
   177dc:	clz	r2, r2
   177e0:	lsr	r2, r2, #5
   177e4:	b	174a0 <__assert_fail@plt+0x5f00>
   177e8:	mov	r5, r6
   177ec:	b	17720 <__assert_fail@plt+0x6180>
   177f0:	ldr	r3, [sp, #152]	; 0x98
   177f4:	sub	r2, r3, #2
   177f8:	mov	r3, #116	; 0x74
   177fc:	clz	r2, r2
   17800:	lsr	r2, r2, #5
   17804:	b	174a0 <__assert_fail@plt+0x5f00>
   17808:	ldr	r8, [sp, #76]	; 0x4c
   1780c:	cmp	r8, #1
   17810:	bne	17cc0 <__assert_fail@plt+0x6720>
   17814:	bl	113c0 <__ctype_b_loc@plt>
   17818:	sxth	r3, r4
   1781c:	mov	ip, r8
   17820:	lsl	r3, r3, #1
   17824:	ldr	r2, [r0]
   17828:	ldrh	r3, [r2, r3]
   1782c:	and	r3, r3, #16384	; 0x4000
   17830:	cmp	r3, #0
   17834:	movne	r5, #1
   17838:	moveq	r5, #0
   1783c:	moveq	r3, #1
   17840:	movne	r3, #0
   17844:	ldr	r2, [sp, #44]	; 0x2c
   17848:	and	r3, r3, r2
   1784c:	ands	r8, r3, #255	; 0xff
   17850:	bne	17b54 <__assert_fail@plt+0x65b4>
   17854:	ldr	r3, [sp, #152]	; 0x98
   17858:	sub	r2, r3, #2
   1785c:	clz	r2, r2
   17860:	lsr	r2, r2, #5
   17864:	b	1734c <__assert_fail@plt+0x5dac>
   17868:	ldr	r3, [sp, #56]	; 0x38
   1786c:	add	r3, r3, sl
   17870:	str	r3, [sp, #48]	; 0x30
   17874:	ldr	r3, [sp, #48]	; 0x30
   17878:	mov	r6, #0
   1787c:	ldrb	r4, [r3]
   17880:	cmp	r4, #126	; 0x7e
   17884:	ldrls	pc, [pc, r4, lsl #2]
   17888:	b	17808 <__assert_fail@plt+0x6268>
   1788c:	andeq	r7, r1, ip, lsr #12
   17890:	andeq	r7, r1, r8, lsl #16
   17894:	andeq	r7, r1, r8, lsl #16
   17898:	andeq	r7, r1, r8, lsl #16
   1789c:	andeq	r7, r1, r8, lsl #16
   178a0:	andeq	r7, r1, r8, lsl #16
   178a4:	andeq	r7, r1, r8, lsl #16
   178a8:	andeq	r7, r1, r0, lsl r6
   178ac:	strdeq	r7, [r1], -r4
   178b0:	andeq	r7, r1, r8, lsl #21
   178b4:	andeq	r7, r1, r4, asr r5
   178b8:	andeq	r7, r1, r8, lsr r5
   178bc:	andeq	r7, r1, ip, asr #15
   178c0:	andeq	r7, r1, r8, lsr #15
   178c4:	andeq	r7, r1, r8, lsl #16
   178c8:	andeq	r7, r1, r8, lsl #16
   178cc:	andeq	r7, r1, r8, lsl #16
   178d0:	andeq	r7, r1, r8, lsl #16
   178d4:	andeq	r7, r1, r8, lsl #16
   178d8:	andeq	r7, r1, r8, lsl #16
   178dc:	andeq	r7, r1, r8, lsl #16
   178e0:	andeq	r7, r1, r8, lsl #16
   178e4:	andeq	r7, r1, r8, lsl #16
   178e8:	andeq	r7, r1, r8, lsl #16
   178ec:	andeq	r7, r1, r8, lsl #16
   178f0:	andeq	r7, r1, r8, lsl #16
   178f4:	andeq	r7, r1, r8, lsl #16
   178f8:	andeq	r7, r1, r8, lsl #16
   178fc:	andeq	r7, r1, r8, lsl #16
   17900:	andeq	r7, r1, r8, lsl #16
   17904:	andeq	r7, r1, r8, lsl #16
   17908:	andeq	r7, r1, r8, lsl #16
   1790c:	andeq	r7, r1, r0, lsr #14
   17910:	andeq	r7, r1, ip, lsl r7
   17914:	andeq	r7, r1, ip, lsl r7
   17918:	andeq	r7, r1, ip, lsr #6
   1791c:	andeq	r7, r1, ip, lsl r7
   17920:			; <UNDEFINED> instruction: 0x000177b4
   17924:	andeq	r7, r1, ip, lsl r7
   17928:	andeq	r7, r1, r8, lsl #15
   1792c:	andeq	r7, r1, ip, lsl r7
   17930:	andeq	r7, r1, ip, lsl r7
   17934:	andeq	r7, r1, ip, lsl r7
   17938:			; <UNDEFINED> instruction: 0x000177b4
   1793c:			; <UNDEFINED> instruction: 0x000177b4
   17940:			; <UNDEFINED> instruction: 0x000177b4
   17944:			; <UNDEFINED> instruction: 0x000177b4
   17948:			; <UNDEFINED> instruction: 0x000177b4
   1794c:			; <UNDEFINED> instruction: 0x000177b4
   17950:			; <UNDEFINED> instruction: 0x000177b4
   17954:			; <UNDEFINED> instruction: 0x000177b4
   17958:			; <UNDEFINED> instruction: 0x000177b4
   1795c:			; <UNDEFINED> instruction: 0x000177b4
   17960:			; <UNDEFINED> instruction: 0x000177b4
   17964:			; <UNDEFINED> instruction: 0x000177b4
   17968:			; <UNDEFINED> instruction: 0x000177b4
   1796c:			; <UNDEFINED> instruction: 0x000177b4
   17970:			; <UNDEFINED> instruction: 0x000177b4
   17974:			; <UNDEFINED> instruction: 0x000177b4
   17978:	andeq	r7, r1, ip, lsl r7
   1797c:	andeq	r7, r1, ip, lsl r7
   17980:	andeq	r7, r1, ip, lsl r7
   17984:	andeq	r7, r1, ip, lsl r7
   17988:	andeq	r7, r1, r8, asr r7
   1798c:	andeq	r7, r1, r8, lsl #16
   17990:			; <UNDEFINED> instruction: 0x000177b4
   17994:			; <UNDEFINED> instruction: 0x000177b4
   17998:			; <UNDEFINED> instruction: 0x000177b4
   1799c:			; <UNDEFINED> instruction: 0x000177b4
   179a0:			; <UNDEFINED> instruction: 0x000177b4
   179a4:			; <UNDEFINED> instruction: 0x000177b4
   179a8:			; <UNDEFINED> instruction: 0x000177b4
   179ac:			; <UNDEFINED> instruction: 0x000177b4
   179b0:			; <UNDEFINED> instruction: 0x000177b4
   179b4:			; <UNDEFINED> instruction: 0x000177b4
   179b8:			; <UNDEFINED> instruction: 0x000177b4
   179bc:			; <UNDEFINED> instruction: 0x000177b4
   179c0:			; <UNDEFINED> instruction: 0x000177b4
   179c4:			; <UNDEFINED> instruction: 0x000177b4
   179c8:			; <UNDEFINED> instruction: 0x000177b4
   179cc:			; <UNDEFINED> instruction: 0x000177b4
   179d0:			; <UNDEFINED> instruction: 0x000177b4
   179d4:			; <UNDEFINED> instruction: 0x000177b4
   179d8:			; <UNDEFINED> instruction: 0x000177b4
   179dc:			; <UNDEFINED> instruction: 0x000177b4
   179e0:			; <UNDEFINED> instruction: 0x000177b4
   179e4:			; <UNDEFINED> instruction: 0x000177b4
   179e8:			; <UNDEFINED> instruction: 0x000177b4
   179ec:			; <UNDEFINED> instruction: 0x000177b4
   179f0:			; <UNDEFINED> instruction: 0x000177b4
   179f4:			; <UNDEFINED> instruction: 0x000177b4
   179f8:	andeq	r7, r1, ip, lsl r7
   179fc:	andeq	r7, r1, r8, ror r4
   17a00:			; <UNDEFINED> instruction: 0x000177b4
   17a04:	andeq	r7, r1, ip, lsl r7
   17a08:			; <UNDEFINED> instruction: 0x000177b4
   17a0c:	andeq	r7, r1, ip, lsl r7
   17a10:			; <UNDEFINED> instruction: 0x000177b4
   17a14:			; <UNDEFINED> instruction: 0x000177b4
   17a18:			; <UNDEFINED> instruction: 0x000177b4
   17a1c:			; <UNDEFINED> instruction: 0x000177b4
   17a20:			; <UNDEFINED> instruction: 0x000177b4
   17a24:			; <UNDEFINED> instruction: 0x000177b4
   17a28:			; <UNDEFINED> instruction: 0x000177b4
   17a2c:			; <UNDEFINED> instruction: 0x000177b4
   17a30:			; <UNDEFINED> instruction: 0x000177b4
   17a34:			; <UNDEFINED> instruction: 0x000177b4
   17a38:			; <UNDEFINED> instruction: 0x000177b4
   17a3c:			; <UNDEFINED> instruction: 0x000177b4
   17a40:			; <UNDEFINED> instruction: 0x000177b4
   17a44:			; <UNDEFINED> instruction: 0x000177b4
   17a48:			; <UNDEFINED> instruction: 0x000177b4
   17a4c:			; <UNDEFINED> instruction: 0x000177b4
   17a50:			; <UNDEFINED> instruction: 0x000177b4
   17a54:			; <UNDEFINED> instruction: 0x000177b4
   17a58:			; <UNDEFINED> instruction: 0x000177b4
   17a5c:			; <UNDEFINED> instruction: 0x000177b4
   17a60:			; <UNDEFINED> instruction: 0x000177b4
   17a64:			; <UNDEFINED> instruction: 0x000177b4
   17a68:			; <UNDEFINED> instruction: 0x000177b4
   17a6c:			; <UNDEFINED> instruction: 0x000177b4
   17a70:			; <UNDEFINED> instruction: 0x000177b4
   17a74:			; <UNDEFINED> instruction: 0x000177b4
   17a78:	andeq	r7, r1, ip, lsl #6
   17a7c:	andeq	r7, r1, ip, lsl r7
   17a80:	andeq	r7, r1, ip, lsl #6
   17a84:	andeq	r7, r1, ip, lsr #6
   17a88:	mov	r3, #116	; 0x74
   17a8c:	b	1755c <__assert_fail@plt+0x5fbc>
   17a90:	ldr	r3, [sp, #160]	; 0xa0
   17a94:	cmp	r3, #0
   17a98:	beq	17368 <__assert_fail@plt+0x5dc8>
   17a9c:	lsr	r3, r4, #5
   17aa0:	ldr	r0, [sp, #160]	; 0xa0
   17aa4:	uxtb	r3, r3
   17aa8:	and	r1, r4, #31
   17aac:	ldr	r0, [r0, r3, lsl #2]
   17ab0:	lsr	r3, r0, r1
   17ab4:	tst	r3, #1
   17ab8:	beq	17368 <__assert_fail@plt+0x5dc8>
   17abc:	ldr	r3, [sp, #28]
   17ac0:	cmp	r3, #0
   17ac4:	beq	174c8 <__assert_fail@plt+0x5f28>
   17ac8:	ldr	sl, [sp, #32]
   17acc:	mov	r8, fp
   17ad0:	b	1758c <__assert_fail@plt+0x5fec>
   17ad4:	ldr	r3, [sp, #28]
   17ad8:	cmp	r3, #0
   17adc:	bne	18030 <__assert_fail@plt+0x6a90>
   17ae0:	add	sl, sl, #1
   17ae4:	ldr	r6, [sp, #40]	; 0x28
   17ae8:	mov	r5, #0
   17aec:	mov	r4, #92	; 0x5c
   17af0:	b	17384 <__assert_fail@plt+0x5de4>
   17af4:	cmp	r9, r8
   17af8:	bne	17d68 <__assert_fail@plt+0x67c8>
   17afc:	ldr	r0, [sp, #100]	; 0x64
   17b00:	bl	112dc <iswprint@plt>
   17b04:	add	r5, r5, r4
   17b08:	cmp	r0, #0
   17b0c:	add	r0, sp, #104	; 0x68
   17b10:	moveq	r6, #0
   17b14:	bl	11264 <mbsinit@plt>
   17b18:	cmp	r0, #0
   17b1c:	beq	17cfc <__assert_fail@plt+0x675c>
   17b20:	mov	r2, r6
   17b24:	mov	ip, r5
   17b28:	eor	r5, r2, #1
   17b2c:	ldr	r4, [sp, #80]	; 0x50
   17b30:	ldr	r6, [sp, #84]	; 0x54
   17b34:	ldr	r7, [sp, #88]	; 0x58
   17b38:	uxtb	r5, r5
   17b3c:	cmp	ip, #1
   17b40:	bls	18040 <__assert_fail@plt+0x6aa0>
   17b44:	ldr	r3, [sp, #44]	; 0x2c
   17b48:	and	r8, r3, r5
   17b4c:	mov	r5, r2
   17b50:	uxtb	r8, r8
   17b54:	add	r2, sl, ip
   17b58:	ldr	r0, [sp, #48]	; 0x30
   17b5c:	mov	r1, #0
   17b60:	str	r5, [sp, #48]	; 0x30
   17b64:	ldr	r9, [sp, #28]
   17b68:	ldr	ip, [sp, #40]	; 0x28
   17b6c:	ldr	r3, [sp, #32]
   17b70:	ldr	r5, [sp, #152]	; 0x98
   17b74:	b	17c30 <__assert_fail@plt+0x6690>
   17b78:	cmp	r9, #0
   17b7c:	bne	17f54 <__assert_fail@plt+0x69b4>
   17b80:	eor	r1, ip, #1
   17b84:	cmp	r5, #2
   17b88:	movne	r1, #0
   17b8c:	andeq	r1, r1, #1
   17b90:	cmp	r1, #0
   17b94:	beq	17bcc <__assert_fail@plt+0x662c>
   17b98:	cmp	fp, r7
   17b9c:	movhi	ip, #39	; 0x27
   17ba0:	strbhi	ip, [r3, r7]
   17ba4:	add	ip, r7, #1
   17ba8:	cmp	fp, ip
   17bac:	movhi	lr, #36	; 0x24
   17bb0:	strbhi	lr, [r3, ip]
   17bb4:	add	ip, r7, #2
   17bb8:	cmp	fp, ip
   17bbc:	movhi	lr, #39	; 0x27
   17bc0:	strbhi	lr, [r3, ip]
   17bc4:	add	r7, r7, #3
   17bc8:	mov	ip, r1
   17bcc:	cmp	fp, r7
   17bd0:	movhi	r1, #92	; 0x5c
   17bd4:	strbhi	r1, [r3, r7]
   17bd8:	add	r1, r7, #1
   17bdc:	cmp	fp, r1
   17be0:	lsrhi	lr, r4, #6
   17be4:	addhi	lr, lr, #48	; 0x30
   17be8:	strbhi	lr, [r3, r1]
   17bec:	add	lr, r7, #2
   17bf0:	cmp	fp, lr
   17bf4:	lsrhi	r1, r4, #3
   17bf8:	andhi	r1, r1, #7
   17bfc:	addhi	r1, r1, #48	; 0x30
   17c00:	add	sl, sl, #1
   17c04:	strbhi	r1, [r3, lr]
   17c08:	and	r4, r4, #7
   17c0c:	cmp	r2, sl
   17c10:	add	r4, r4, #48	; 0x30
   17c14:	add	r7, r7, #3
   17c18:	bls	17f78 <__assert_fail@plt+0x69d8>
   17c1c:	mov	r1, r8
   17c20:	cmp	fp, r7
   17c24:	strbhi	r4, [r3, r7]
   17c28:	ldrb	r4, [r0, #1]!
   17c2c:	add	r7, r7, #1
   17c30:	cmp	r8, #0
   17c34:	bne	17b78 <__assert_fail@plt+0x65d8>
   17c38:	cmp	r6, #0
   17c3c:	bne	17c8c <__assert_fail@plt+0x66ec>
   17c40:	eor	r6, r1, #1
   17c44:	and	r6, r6, ip
   17c48:	add	sl, sl, #1
   17c4c:	cmp	r2, sl
   17c50:	uxtb	r6, r6
   17c54:	bls	17cb4 <__assert_fail@plt+0x6714>
   17c58:	cmp	r6, #0
   17c5c:	beq	17c20 <__assert_fail@plt+0x6680>
   17c60:	cmp	fp, r7
   17c64:	movhi	ip, #39	; 0x27
   17c68:	strbhi	ip, [r3, r7]
   17c6c:	add	ip, r7, #1
   17c70:	cmp	fp, ip
   17c74:	movhi	lr, #39	; 0x27
   17c78:	strbhi	lr, [r3, ip]
   17c7c:	add	r7, r7, #2
   17c80:	mov	r6, r8
   17c84:	mov	ip, r8
   17c88:	b	17c20 <__assert_fail@plt+0x6680>
   17c8c:	cmp	fp, r7
   17c90:	eor	r6, r1, #1
   17c94:	movhi	lr, #92	; 0x5c
   17c98:	and	r6, r6, ip
   17c9c:	add	sl, sl, #1
   17ca0:	strbhi	lr, [r3, r7]
   17ca4:	cmp	r2, sl
   17ca8:	add	r7, r7, #1
   17cac:	uxtb	r6, r6
   17cb0:	bhi	17c58 <__assert_fail@plt+0x66b8>
   17cb4:	str	ip, [sp, #40]	; 0x28
   17cb8:	ldr	r5, [sp, #48]	; 0x30
   17cbc:	b	17384 <__assert_fail@plt+0x5de4>
   17cc0:	ldr	r3, [sp, #24]
   17cc4:	cmn	r3, #1
   17cc8:	mov	r3, #0
   17ccc:	str	r3, [sp, #104]	; 0x68
   17cd0:	str	r3, [sp, #108]	; 0x6c
   17cd4:	beq	17ff4 <__assert_fail@plt+0x6a54>
   17cd8:	mov	r2, r5
   17cdc:	mov	r3, #0
   17ce0:	str	r7, [sp, #88]	; 0x58
   17ce4:	ldr	r7, [sp, #152]	; 0x98
   17ce8:	str	r5, [sp, #92]	; 0x5c
   17cec:	str	r6, [sp, #84]	; 0x54
   17cf0:	mov	r5, r3
   17cf4:	mov	r6, r2
   17cf8:	str	r4, [sp, #80]	; 0x50
   17cfc:	ldr	r3, [sp, #56]	; 0x38
   17d00:	add	r9, sl, r5
   17d04:	add	r8, r3, r9
   17d08:	ldr	r3, [sp, #24]
   17d0c:	mov	r1, r8
   17d10:	sub	r2, r3, r9
   17d14:	add	r0, sp, #100	; 0x64
   17d18:	add	r3, sp, #104	; 0x68
   17d1c:	bl	19f64 <__assert_fail@plt+0x89c4>
   17d20:	subs	r4, r0, #0
   17d24:	beq	180cc <__assert_fail@plt+0x6b2c>
   17d28:	cmn	r4, #1
   17d2c:	beq	180ac <__assert_fail@plt+0x6b0c>
   17d30:	cmn	r4, #2
   17d34:	beq	1804c <__assert_fail@plt+0x6aac>
   17d38:	ldr	r2, [sp, #28]
   17d3c:	cmp	r7, #2
   17d40:	movne	r2, #0
   17d44:	andeq	r2, r2, #1
   17d48:	cmp	r2, #0
   17d4c:	beq	17afc <__assert_fail@plt+0x655c>
   17d50:	cmp	r4, #1
   17d54:	beq	17afc <__assert_fail@plt+0x655c>
   17d58:	sub	r3, r4, #1
   17d5c:	add	r9, r3, r9
   17d60:	ldr	r3, [sp, #56]	; 0x38
   17d64:	add	r9, r3, r9
   17d68:	ldrb	r3, [r8, #1]!
   17d6c:	sub	r3, r3, #91	; 0x5b
   17d70:	cmp	r3, #33	; 0x21
   17d74:	ldrls	pc, [pc, r3, lsl #2]
   17d78:	b	17af4 <__assert_fail@plt+0x6554>
   17d7c:	andeq	r7, r1, r4, lsl #28
   17d80:	andeq	r7, r1, r4, lsl #28
   17d84:	strdeq	r7, [r1], -r4
   17d88:	andeq	r7, r1, r4, lsl #28
   17d8c:	strdeq	r7, [r1], -r4
   17d90:	andeq	r7, r1, r4, lsl #28
   17d94:	strdeq	r7, [r1], -r4
   17d98:	strdeq	r7, [r1], -r4
   17d9c:	strdeq	r7, [r1], -r4
   17da0:	strdeq	r7, [r1], -r4
   17da4:	strdeq	r7, [r1], -r4
   17da8:	strdeq	r7, [r1], -r4
   17dac:	strdeq	r7, [r1], -r4
   17db0:	strdeq	r7, [r1], -r4
   17db4:	strdeq	r7, [r1], -r4
   17db8:	strdeq	r7, [r1], -r4
   17dbc:	strdeq	r7, [r1], -r4
   17dc0:	strdeq	r7, [r1], -r4
   17dc4:	strdeq	r7, [r1], -r4
   17dc8:	strdeq	r7, [r1], -r4
   17dcc:	strdeq	r7, [r1], -r4
   17dd0:	strdeq	r7, [r1], -r4
   17dd4:	strdeq	r7, [r1], -r4
   17dd8:	strdeq	r7, [r1], -r4
   17ddc:	strdeq	r7, [r1], -r4
   17de0:	strdeq	r7, [r1], -r4
   17de4:	strdeq	r7, [r1], -r4
   17de8:	strdeq	r7, [r1], -r4
   17dec:	strdeq	r7, [r1], -r4
   17df0:	strdeq	r7, [r1], -r4
   17df4:	strdeq	r7, [r1], -r4
   17df8:	strdeq	r7, [r1], -r4
   17dfc:	strdeq	r7, [r1], -r4
   17e00:	andeq	r7, r1, r4, lsl #28
   17e04:	mov	r3, #2
   17e08:	ldr	sl, [sp, #32]
   17e0c:	mov	r8, fp
   17e10:	str	r3, [sp, #152]	; 0x98
   17e14:	b	1758c <__assert_fail@plt+0x5fec>
   17e18:	ldr	r3, [sp, #156]	; 0x9c
   17e1c:	tst	r3, #1
   17e20:	bne	17f4c <__assert_fail@plt+0x69ac>
   17e24:	ldr	r3, [sp, #152]	; 0x98
   17e28:	ldr	r4, [sp, #44]	; 0x2c
   17e2c:	sub	r2, r3, #2
   17e30:	mov	r5, #0
   17e34:	clz	r2, r2
   17e38:	mov	r8, r4
   17e3c:	lsr	r2, r2, #5
   17e40:	b	1734c <__assert_fail@plt+0x5dac>
   17e44:	ldr	r3, [sp, #156]	; 0x9c
   17e48:	ands	r9, r3, #4
   17e4c:	beq	17f84 <__assert_fail@plt+0x69e4>
   17e50:	ldr	r2, [sp, #24]
   17e54:	add	r3, sl, #2
   17e58:	cmp	r3, r2
   17e5c:	bcs	17e70 <__assert_fail@plt+0x68d0>
   17e60:	ldr	r2, [sp, #48]	; 0x30
   17e64:	ldrb	r4, [r2, #1]
   17e68:	cmp	r4, #63	; 0x3f
   17e6c:	beq	1810c <__assert_fail@plt+0x6b6c>
   17e70:	mov	r2, #0
   17e74:	mov	r8, r2
   17e78:	mov	r5, r2
   17e7c:	mov	r4, #63	; 0x3f
   17e80:	b	1734c <__assert_fail@plt+0x5dac>
   17e84:	ldr	r3, [sp, #28]
   17e88:	cmp	r3, #0
   17e8c:	bne	181b0 <__assert_fail@plt+0x6c10>
   17e90:	mov	r2, r5
   17e94:	mov	r8, r3
   17e98:	mov	r5, #0
   17e9c:	mov	r4, #63	; 0x3f
   17ea0:	b	1734c <__assert_fail@plt+0x5dac>
   17ea4:	ldr	r3, [sp, #28]
   17ea8:	cmp	r3, #0
   17eac:	bne	181b0 <__assert_fail@plt+0x6c10>
   17eb0:	ldr	r2, [sp, #72]	; 0x48
   17eb4:	adds	r3, fp, #0
   17eb8:	movne	r3, #1
   17ebc:	cmp	r2, #0
   17ec0:	movne	r3, #0
   17ec4:	cmp	r3, #0
   17ec8:	strne	fp, [sp, #72]	; 0x48
   17ecc:	movne	fp, #0
   17ed0:	bne	17f0c <__assert_fail@plt+0x696c>
   17ed4:	cmp	fp, r7
   17ed8:	movhi	r2, #39	; 0x27
   17edc:	ldrhi	r3, [sp, #32]
   17ee0:	strbhi	r2, [r3, r7]
   17ee4:	add	r3, r7, #1
   17ee8:	cmp	fp, r3
   17eec:	movhi	r1, #92	; 0x5c
   17ef0:	ldrhi	r2, [sp, #32]
   17ef4:	strbhi	r1, [r2, r3]
   17ef8:	add	r3, r7, #2
   17efc:	cmp	fp, r3
   17f00:	movhi	r1, #39	; 0x27
   17f04:	ldrhi	r2, [sp, #32]
   17f08:	strbhi	r1, [r2, r3]
   17f0c:	ldr	r3, [sp, #28]
   17f10:	add	r7, r7, #3
   17f14:	mov	r2, r5
   17f18:	mov	r8, r3
   17f1c:	str	r5, [sp, #68]	; 0x44
   17f20:	str	r3, [sp, #40]	; 0x28
   17f24:	mov	r4, #39	; 0x27
   17f28:	b	1734c <__assert_fail@plt+0x5dac>
   17f2c:	ldr	r3, [sp, #56]	; 0x38
   17f30:	ldrb	r3, [r3, #1]
   17f34:	adds	r3, r3, #0
   17f38:	movne	r3, #1
   17f3c:	b	17324 <__assert_fail@plt+0x5d84>
   17f40:	ldr	r5, [sp, #28]
   17f44:	mov	r4, #48	; 0x30
   17f48:	b	1734c <__assert_fail@plt+0x5dac>
   17f4c:	add	sl, sl, #1
   17f50:	b	16e7c <__assert_fail@plt+0x58dc>
   17f54:	mov	sl, r3
   17f58:	ldr	r3, [sp, #28]
   17f5c:	mov	r8, fp
   17f60:	str	r3, [sp, #44]	; 0x2c
   17f64:	ldr	r3, [sp, #152]	; 0x98
   17f68:	sub	r2, r3, #2
   17f6c:	clz	r2, r2
   17f70:	lsr	r2, r2, #5
   17f74:	b	1758c <__assert_fail@plt+0x5fec>
   17f78:	str	ip, [sp, #40]	; 0x28
   17f7c:	ldr	r5, [sp, #48]	; 0x30
   17f80:	b	173bc <__assert_fail@plt+0x5e1c>
   17f84:	mov	r2, r9
   17f88:	mov	r8, r9
   17f8c:	mov	r5, #0
   17f90:	mov	r4, #63	; 0x3f
   17f94:	b	1734c <__assert_fail@plt+0x5dac>
   17f98:	cmp	fp, #0
   17f9c:	beq	18014 <__assert_fail@plt+0x6a74>
   17fa0:	ldr	r1, [sp, #32]
   17fa4:	mov	r3, #34	; 0x22
   17fa8:	mov	r2, #1
   17fac:	strb	r3, [r1]
   17fb0:	ldr	r3, [pc, #332]	; 18104 <__assert_fail@plt+0x6b64>
   17fb4:	str	r2, [sp, #52]	; 0x34
   17fb8:	mov	r7, r2
   17fbc:	str	r2, [sp, #44]	; 0x2c
   17fc0:	str	r3, [sp, #64]	; 0x40
   17fc4:	b	16e6c <__assert_fail@plt+0x58cc>
   17fc8:	ldr	r3, [pc, #300]	; 180fc <__assert_fail@plt+0x6b5c>
   17fcc:	str	r3, [sp, #64]	; 0x40
   17fd0:	mov	r3, #0
   17fd4:	str	r3, [sp, #28]
   17fd8:	mov	r3, #1
   17fdc:	str	r3, [sp, #52]	; 0x34
   17fe0:	mov	r7, r3
   17fe4:	mov	r3, #2
   17fe8:	str	r3, [sp, #152]	; 0x98
   17fec:	b	16e6c <__assert_fail@plt+0x58cc>
   17ff0:	bl	11570 <abort@plt>
   17ff4:	ldr	r0, [sp, #56]	; 0x38
   17ff8:	bl	113f0 <strlen@plt>
   17ffc:	str	r0, [sp, #24]
   18000:	b	17cd8 <__assert_fail@plt+0x6738>
   18004:	mov	r5, r8
   18008:	mov	r4, #48	; 0x30
   1800c:	ldr	r8, [sp, #44]	; 0x2c
   18010:	b	1734c <__assert_fail@plt+0x5dac>
   18014:	mov	r3, #1
   18018:	str	r3, [sp, #52]	; 0x34
   1801c:	mov	r7, r3
   18020:	str	r3, [sp, #44]	; 0x2c
   18024:	ldr	r3, [pc, #216]	; 18104 <__assert_fail@plt+0x6b64>
   18028:	str	r3, [sp, #64]	; 0x40
   1802c:	b	16e6c <__assert_fail@plt+0x58cc>
   18030:	ldr	sl, [sp, #32]
   18034:	mov	r8, fp
   18038:	mov	r2, r3
   1803c:	b	1758c <__assert_fail@plt+0x5fec>
   18040:	mov	r3, r5
   18044:	mov	r5, r2
   18048:	b	17844 <__assert_fail@plt+0x62a4>
   1804c:	ldr	r1, [sp, #24]
   18050:	mov	r2, r5
   18054:	cmp	r1, r9
   18058:	mov	ip, r5
   1805c:	ldr	r4, [sp, #80]	; 0x50
   18060:	ldr	r5, [sp, #92]	; 0x5c
   18064:	ldr	r6, [sp, #84]	; 0x54
   18068:	ldr	r7, [sp, #88]	; 0x58
   1806c:	bls	180a0 <__assert_fail@plt+0x6b00>
   18070:	ldrb	r3, [r8]
   18074:	cmp	r3, #0
   18078:	bne	1808c <__assert_fail@plt+0x6aec>
   1807c:	b	180a4 <__assert_fail@plt+0x6b04>
   18080:	ldrb	r3, [r8, #1]!
   18084:	cmp	r3, #0
   18088:	beq	181a4 <__assert_fail@plt+0x6c04>
   1808c:	add	r2, r2, #1
   18090:	add	r3, sl, r2
   18094:	cmp	r1, r3
   18098:	bhi	18080 <__assert_fail@plt+0x6ae0>
   1809c:	mov	ip, r2
   180a0:	mov	r3, #0
   180a4:	mov	r2, r3
   180a8:	b	17b3c <__assert_fail@plt+0x659c>
   180ac:	mov	r3, #0
   180b0:	mov	ip, r5
   180b4:	ldr	r4, [sp, #80]	; 0x50
   180b8:	ldr	r5, [sp, #92]	; 0x5c
   180bc:	ldr	r6, [sp, #84]	; 0x54
   180c0:	ldr	r7, [sp, #88]	; 0x58
   180c4:	mov	r2, r3
   180c8:	b	17b3c <__assert_fail@plt+0x659c>
   180cc:	mov	r3, r6
   180d0:	mov	ip, r5
   180d4:	eor	r5, r3, #1
   180d8:	mov	r2, r6
   180dc:	ldr	r4, [sp, #80]	; 0x50
   180e0:	ldr	r6, [sp, #84]	; 0x54
   180e4:	ldr	r7, [sp, #88]	; 0x58
   180e8:	uxtb	r5, r5
   180ec:	b	17b3c <__assert_fail@plt+0x659c>
   180f0:	ldr	sl, [sp, #32]
   180f4:	mov	r8, fp
   180f8:	b	17f60 <__assert_fail@plt+0x69c0>
   180fc:	andeq	ip, r1, r8, lsl #19
   18100:	andeq	ip, r1, ip, lsl #19
   18104:	andeq	ip, r1, r4, lsl #19
   18108:	stmdacc	r0, {r0, r6, r7, r8, ip, lr}
   1810c:	ldr	r2, [sp, #56]	; 0x38
   18110:	ldrb	r1, [r2, r3]
   18114:	sub	r2, r1, #33	; 0x21
   18118:	uxtb	r2, r2
   1811c:	cmp	r2, #29
   18120:	bhi	181c0 <__assert_fail@plt+0x6c20>
   18124:	ldr	r0, [pc, #-36]	; 18108 <__assert_fail@plt+0x6b68>
   18128:	mov	ip, #1
   1812c:	ands	r2, r0, ip, lsl r2
   18130:	beq	181d0 <__assert_fail@plt+0x6c30>
   18134:	ldr	r2, [sp, #28]
   18138:	cmp	r2, #0
   1813c:	bne	182d0 <__assert_fail@plt+0x6d30>
   18140:	cmp	fp, r7
   18144:	ldr	r8, [sp, #28]
   18148:	ldrhi	r2, [sp, #32]
   1814c:	mov	sl, r3
   18150:	mov	r5, r8
   18154:	strbhi	r4, [r2, r7]
   18158:	add	r2, r7, #1
   1815c:	cmp	fp, r2
   18160:	movhi	r0, #34	; 0x22
   18164:	ldrhi	ip, [sp, #32]
   18168:	mov	r4, r1
   1816c:	strbhi	r0, [ip, r2]
   18170:	add	r2, r7, #2
   18174:	cmp	fp, r2
   18178:	movhi	r0, #34	; 0x22
   1817c:	ldrhi	ip, [sp, #32]
   18180:	strbhi	r0, [ip, r2]
   18184:	add	r2, r7, #3
   18188:	cmp	fp, r2
   1818c:	movhi	r0, #63	; 0x3f
   18190:	ldrhi	ip, [sp, #32]
   18194:	add	r7, r7, #4
   18198:	strbhi	r0, [ip, r2]
   1819c:	mov	r2, r8
   181a0:	b	1734c <__assert_fail@plt+0x5dac>
   181a4:	mov	ip, r2
   181a8:	mov	r2, r3
   181ac:	b	17b3c <__assert_fail@plt+0x659c>
   181b0:	ldr	sl, [sp, #32]
   181b4:	mov	r8, fp
   181b8:	ldr	r2, [sp, #28]
   181bc:	b	1758c <__assert_fail@plt+0x5fec>
   181c0:	mov	r2, #0
   181c4:	mov	r8, r2
   181c8:	mov	r5, r2
   181cc:	b	1734c <__assert_fail@plt+0x5dac>
   181d0:	mov	r8, r2
   181d4:	mov	r5, #0
   181d8:	b	1734c <__assert_fail@plt+0x5dac>
   181dc:	ldr	r1, [sp, #152]	; 0x98
   181e0:	bl	16ca8 <__assert_fail@plt+0x5708>
   181e4:	str	r0, [sp, #168]	; 0xa8
   181e8:	b	17208 <__assert_fail@plt+0x5c68>
   181ec:	ldr	r1, [sp, #152]	; 0x98
   181f0:	bl	16ca8 <__assert_fail@plt+0x5708>
   181f4:	str	r0, [sp, #164]	; 0xa4
   181f8:	b	171e8 <__assert_fail@plt+0x5c48>
   181fc:	ldr	r7, [sp, #28]
   18200:	b	17248 <__assert_fail@plt+0x5ca8>
   18204:	ldr	sl, [sp, #32]
   18208:	ldr	r2, [sp, #68]	; 0x44
   1820c:	mov	r8, fp
   18210:	mov	fp, r7
   18214:	ldr	r3, [sp, #64]	; 0x40
   18218:	cmp	r3, #0
   1821c:	moveq	r2, #0
   18220:	andne	r2, r2, #1
   18224:	cmp	r2, #0
   18228:	beq	18254 <__assert_fail@plt+0x6cb4>
   1822c:	mov	r2, r3
   18230:	ldrb	r3, [r3]
   18234:	cmp	r3, #0
   18238:	beq	18254 <__assert_fail@plt+0x6cb4>
   1823c:	cmp	r8, fp
   18240:	strbhi	r3, [sl, fp]
   18244:	ldrb	r3, [r2, #1]!
   18248:	add	fp, fp, #1
   1824c:	cmp	r3, #0
   18250:	bne	1823c <__assert_fail@plt+0x6c9c>
   18254:	cmp	r8, fp
   18258:	movhi	r3, #0
   1825c:	strbhi	r3, [sl, fp]
   18260:	b	175e8 <__assert_fail@plt+0x6048>
   18264:	ldr	r3, [sp, #168]	; 0xa8
   18268:	ldr	sl, [sp, #32]
   1826c:	str	r3, [sp, #16]
   18270:	ldr	r3, [sp, #164]	; 0xa4
   18274:	mov	ip, #5
   18278:	str	r3, [sp, #12]
   1827c:	ldr	r3, [sp, #160]	; 0xa0
   18280:	ldr	r2, [sp, #56]	; 0x38
   18284:	str	r3, [sp, #8]
   18288:	ldr	r3, [sp, #156]	; 0x9c
   1828c:	ldr	r1, [sp, #72]	; 0x48
   18290:	str	r3, [sp, #4]
   18294:	mov	r0, sl
   18298:	ldr	r3, [sp, #24]
   1829c:	str	ip, [sp]
   182a0:	bl	16dc8 <__assert_fail@plt+0x5828>
   182a4:	mov	fp, r0
   182a8:	b	175e8 <__assert_fail@plt+0x6048>
   182ac:	mov	r8, fp
   182b0:	ldr	sl, [sp, #32]
   182b4:	mov	fp, r7
   182b8:	mov	r2, r3
   182bc:	b	18214 <__assert_fail@plt+0x6c74>
   182c0:	mov	r8, fp
   182c4:	ldr	sl, [sp, #32]
   182c8:	mov	fp, r7
   182cc:	b	18214 <__assert_fail@plt+0x6c74>
   182d0:	ldr	sl, [sp, #32]
   182d4:	mov	r8, fp
   182d8:	b	175a4 <__assert_fail@plt+0x6004>
   182dc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   182e0:	sub	sp, sp, #52	; 0x34
   182e4:	mov	r4, r0
   182e8:	mov	r5, r3
   182ec:	mov	sl, r1
   182f0:	mov	fp, r2
   182f4:	bl	11420 <__errno_location@plt>
   182f8:	ldr	r7, [pc, #412]	; 1849c <__assert_fail@plt+0x6efc>
   182fc:	cmn	r4, #-2147483647	; 0x80000001
   18300:	ldr	r6, [r7]
   18304:	mov	r8, r0
   18308:	movne	r0, #0
   1830c:	moveq	r0, #1
   18310:	ldr	r3, [r8]
   18314:	orrs	r0, r0, r4, lsr #31
   18318:	str	r3, [sp, #24]
   1831c:	bne	18498 <__assert_fail@plt+0x6ef8>
   18320:	ldr	r2, [r7, #4]
   18324:	cmp	r4, r2
   18328:	blt	18388 <__assert_fail@plt+0x6de8>
   1832c:	add	r9, r7, #8
   18330:	cmp	r6, r9
   18334:	str	r2, [sp, #44]	; 0x2c
   18338:	beq	18468 <__assert_fail@plt+0x6ec8>
   1833c:	mov	r3, #8
   18340:	sub	r2, r4, r2
   18344:	mov	r0, r6
   18348:	str	r3, [sp]
   1834c:	add	r2, r2, #1
   18350:	mvn	r3, #-2147483648	; 0x80000000
   18354:	add	r1, sp, #44	; 0x2c
   18358:	bl	191f8 <__assert_fail@plt+0x7c58>
   1835c:	mov	r6, r0
   18360:	str	r0, [r7]
   18364:	ldr	r0, [r7, #4]
   18368:	ldr	r2, [sp, #44]	; 0x2c
   1836c:	mov	r1, #0
   18370:	sub	r2, r2, r0
   18374:	add	r0, r6, r0, lsl #3
   18378:	lsl	r2, r2, #3
   1837c:	bl	11444 <memset@plt>
   18380:	ldr	r3, [sp, #44]	; 0x2c
   18384:	str	r3, [r7, #4]
   18388:	add	r3, r6, r4, lsl #3
   1838c:	ldr	r1, [r5, #4]
   18390:	ldr	r7, [r3, #4]
   18394:	ldr	r9, [r6, r4, lsl #3]
   18398:	ldr	r2, [r5, #40]	; 0x28
   1839c:	ldr	ip, [r5, #44]	; 0x2c
   183a0:	add	r0, r5, #8
   183a4:	str	r3, [sp, #28]
   183a8:	ldr	r3, [r5]
   183ac:	orr	r1, r1, #1
   183b0:	mov	lr, r0
   183b4:	str	r1, [sp, #32]
   183b8:	str	r0, [sp, #36]	; 0x24
   183bc:	str	r1, [sp, #4]
   183c0:	str	r2, [sp, #12]
   183c4:	str	r3, [sp]
   183c8:	mov	r0, r7
   183cc:	mov	r1, r9
   183d0:	str	ip, [sp, #16]
   183d4:	str	lr, [sp, #8]
   183d8:	mov	r3, fp
   183dc:	mov	r2, sl
   183e0:	bl	16dc8 <__assert_fail@plt+0x5828>
   183e4:	cmp	r9, r0
   183e8:	bhi	18454 <__assert_fail@plt+0x6eb4>
   183ec:	ldr	r3, [pc, #172]	; 184a0 <__assert_fail@plt+0x6f00>
   183f0:	add	r9, r0, #1
   183f4:	cmp	r7, r3
   183f8:	str	r9, [r6, r4, lsl #3]
   183fc:	beq	18408 <__assert_fail@plt+0x6e68>
   18400:	mov	r0, r7
   18404:	bl	19e40 <__assert_fail@plt+0x88a0>
   18408:	mov	r0, r9
   1840c:	bl	19094 <__assert_fail@plt+0x7af4>
   18410:	ldr	lr, [sp, #28]
   18414:	ldr	ip, [r5, #44]	; 0x2c
   18418:	ldr	r4, [r5, #40]	; 0x28
   1841c:	mov	r3, fp
   18420:	mov	r2, sl
   18424:	mov	r1, r9
   18428:	str	r0, [lr, #4]
   1842c:	ldr	lr, [r5]
   18430:	ldr	r5, [sp, #36]	; 0x24
   18434:	str	ip, [sp, #16]
   18438:	str	r5, [sp, #8]
   1843c:	ldr	r5, [sp, #32]
   18440:	str	r4, [sp, #12]
   18444:	str	r5, [sp, #4]
   18448:	str	lr, [sp]
   1844c:	mov	r7, r0
   18450:	bl	16dc8 <__assert_fail@plt+0x5828>
   18454:	ldr	r3, [sp, #24]
   18458:	mov	r0, r7
   1845c:	str	r3, [r8]
   18460:	add	sp, sp, #52	; 0x34
   18464:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18468:	mov	r3, #8
   1846c:	sub	r2, r4, r2
   18470:	str	r3, [sp]
   18474:	add	r1, sp, #44	; 0x2c
   18478:	add	r2, r2, #1
   1847c:	mvn	r3, #-2147483648	; 0x80000000
   18480:	bl	191f8 <__assert_fail@plt+0x7c58>
   18484:	mov	r6, r0
   18488:	ldm	r9, {r0, r1}
   1848c:	str	r6, [r7]
   18490:	stm	r6, {r0, r1}
   18494:	b	18364 <__assert_fail@plt+0x6dc4>
   18498:	bl	11570 <abort@plt>
   1849c:	andeq	sp, r2, r8, ror r1
   184a0:			; <UNDEFINED> instruction: 0x0002d2b8
   184a4:	push	{r4, r5, r6, lr}
   184a8:	mov	r5, r0
   184ac:	bl	11420 <__errno_location@plt>
   184b0:	cmp	r5, #0
   184b4:	mov	r1, #48	; 0x30
   184b8:	mov	r4, r0
   184bc:	ldr	r0, [pc, #16]	; 184d4 <__assert_fail@plt+0x6f34>
   184c0:	ldr	r6, [r4]
   184c4:	movne	r0, r5
   184c8:	bl	194f4 <__assert_fail@plt+0x7f54>
   184cc:	str	r6, [r4]
   184d0:	pop	{r4, r5, r6, pc}
   184d4:			; <UNDEFINED> instruction: 0x0002d3b8
   184d8:	ldr	r3, [pc, #12]	; 184ec <__assert_fail@plt+0x6f4c>
   184dc:	cmp	r0, #0
   184e0:	moveq	r0, r3
   184e4:	ldr	r0, [r0]
   184e8:	bx	lr
   184ec:			; <UNDEFINED> instruction: 0x0002d3b8
   184f0:	ldr	r3, [pc, #12]	; 18504 <__assert_fail@plt+0x6f64>
   184f4:	cmp	r0, #0
   184f8:	moveq	r0, r3
   184fc:	str	r1, [r0]
   18500:	bx	lr
   18504:			; <UNDEFINED> instruction: 0x0002d3b8
   18508:	ldr	r3, [pc, #52]	; 18544 <__assert_fail@plt+0x6fa4>
   1850c:	cmp	r0, #0
   18510:	moveq	r0, r3
   18514:	add	r3, r0, #8
   18518:	push	{lr}		; (str lr, [sp, #-4]!)
   1851c:	lsr	lr, r1, #5
   18520:	and	r1, r1, #31
   18524:	ldr	ip, [r3, lr, lsl #2]
   18528:	lsr	r0, ip, r1
   1852c:	eor	r2, r2, r0
   18530:	and	r2, r2, #1
   18534:	and	r0, r0, #1
   18538:	eor	r1, ip, r2, lsl r1
   1853c:	str	r1, [r3, lr, lsl #2]
   18540:	pop	{pc}		; (ldr pc, [sp], #4)
   18544:			; <UNDEFINED> instruction: 0x0002d3b8
   18548:	ldr	r3, [pc, #16]	; 18560 <__assert_fail@plt+0x6fc0>
   1854c:	cmp	r0, #0
   18550:	movne	r3, r0
   18554:	ldr	r0, [r3, #4]
   18558:	str	r1, [r3, #4]
   1855c:	bx	lr
   18560:			; <UNDEFINED> instruction: 0x0002d3b8
   18564:	ldr	r3, [pc, #44]	; 18598 <__assert_fail@plt+0x6ff8>
   18568:	cmp	r0, #0
   1856c:	moveq	r0, r3
   18570:	mov	ip, #10
   18574:	cmp	r2, #0
   18578:	cmpne	r1, #0
   1857c:	str	ip, [r0]
   18580:	beq	18590 <__assert_fail@plt+0x6ff0>
   18584:	str	r1, [r0, #40]	; 0x28
   18588:	str	r2, [r0, #44]	; 0x2c
   1858c:	bx	lr
   18590:	push	{r4, lr}
   18594:	bl	11570 <abort@plt>
   18598:			; <UNDEFINED> instruction: 0x0002d3b8
   1859c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   185a0:	sub	sp, sp, #24
   185a4:	ldr	ip, [pc, #108]	; 18618 <__assert_fail@plt+0x7078>
   185a8:	ldr	r4, [sp, #56]	; 0x38
   185ac:	mov	r9, r2
   185b0:	cmp	r4, #0
   185b4:	moveq	r4, ip
   185b8:	mov	sl, r3
   185bc:	mov	r7, r0
   185c0:	mov	r8, r1
   185c4:	bl	11420 <__errno_location@plt>
   185c8:	ldr	r3, [r4, #44]	; 0x2c
   185cc:	mov	r1, r8
   185d0:	ldr	r6, [r0]
   185d4:	str	r3, [sp, #16]
   185d8:	ldr	r2, [r4, #40]	; 0x28
   185dc:	add	r3, r4, #8
   185e0:	str	r3, [sp, #8]
   185e4:	str	r2, [sp, #12]
   185e8:	ldr	r2, [r4, #4]
   185ec:	mov	r5, r0
   185f0:	str	r2, [sp, #4]
   185f4:	ldr	ip, [r4]
   185f8:	mov	r3, sl
   185fc:	mov	r2, r9
   18600:	mov	r0, r7
   18604:	str	ip, [sp]
   18608:	bl	16dc8 <__assert_fail@plt+0x5828>
   1860c:	str	r6, [r5]
   18610:	add	sp, sp, #24
   18614:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   18618:			; <UNDEFINED> instruction: 0x0002d3b8
   1861c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18620:	cmp	r3, #0
   18624:	sub	sp, sp, #44	; 0x2c
   18628:	ldr	r4, [pc, #192]	; 186f0 <__assert_fail@plt+0x7150>
   1862c:	mov	r6, r2
   18630:	movne	r4, r3
   18634:	mov	r9, r1
   18638:	mov	r8, r0
   1863c:	bl	11420 <__errno_location@plt>
   18640:	ldr	r3, [r4, #44]	; 0x2c
   18644:	ldr	r5, [r4, #4]
   18648:	add	sl, r4, #8
   1864c:	cmp	r6, #0
   18650:	orreq	r5, r5, #1
   18654:	mov	r1, #0
   18658:	ldr	r2, [r0]
   1865c:	str	r3, [sp, #16]
   18660:	ldr	r3, [r4, #40]	; 0x28
   18664:	stmib	sp, {r5, sl}
   18668:	str	r3, [sp, #12]
   1866c:	ldr	r3, [r4]
   18670:	mov	r7, r0
   18674:	str	r2, [sp, #28]
   18678:	str	r3, [sp]
   1867c:	mov	r2, r8
   18680:	mov	r3, r9
   18684:	mov	r0, r1
   18688:	bl	16dc8 <__assert_fail@plt+0x5828>
   1868c:	add	r1, r0, #1
   18690:	mov	fp, r0
   18694:	mov	r0, r1
   18698:	str	r1, [sp, #36]	; 0x24
   1869c:	bl	19094 <__assert_fail@plt+0x7af4>
   186a0:	ldr	r3, [r4, #44]	; 0x2c
   186a4:	mov	r2, r8
   186a8:	str	r3, [sp, #16]
   186ac:	ldr	r3, [r4, #40]	; 0x28
   186b0:	str	r5, [sp, #4]
   186b4:	str	r3, [sp, #12]
   186b8:	str	sl, [sp, #8]
   186bc:	ldr	ip, [r4]
   186c0:	ldr	r1, [sp, #36]	; 0x24
   186c4:	mov	r3, r9
   186c8:	str	ip, [sp]
   186cc:	str	r0, [sp, #32]
   186d0:	bl	16dc8 <__assert_fail@plt+0x5828>
   186d4:	ldr	r2, [sp, #28]
   186d8:	cmp	r6, #0
   186dc:	str	r2, [r7]
   186e0:	ldr	r0, [sp, #32]
   186e4:	strne	fp, [r6]
   186e8:	add	sp, sp, #44	; 0x2c
   186ec:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   186f0:			; <UNDEFINED> instruction: 0x0002d3b8
   186f4:	mov	r3, r2
   186f8:	mov	r2, #0
   186fc:	b	1861c <__assert_fail@plt+0x707c>
   18700:	push	{r4, r5, r6, r7, r8, lr}
   18704:	ldr	r6, [pc, #116]	; 18780 <__assert_fail@plt+0x71e0>
   18708:	ldr	r3, [r6, #4]
   1870c:	ldr	r7, [r6]
   18710:	cmp	r3, #1
   18714:	movgt	r5, r7
   18718:	movgt	r4, #1
   1871c:	ble	1873c <__assert_fail@plt+0x719c>
   18720:	ldr	r0, [r5, #12]
   18724:	bl	19e40 <__assert_fail@plt+0x88a0>
   18728:	ldr	r3, [r6, #4]
   1872c:	add	r4, r4, #1
   18730:	cmp	r3, r4
   18734:	add	r5, r5, #8
   18738:	bgt	18720 <__assert_fail@plt+0x7180>
   1873c:	ldr	r0, [r7, #4]
   18740:	ldr	r4, [pc, #60]	; 18784 <__assert_fail@plt+0x71e4>
   18744:	cmp	r0, r4
   18748:	beq	1875c <__assert_fail@plt+0x71bc>
   1874c:	bl	19e40 <__assert_fail@plt+0x88a0>
   18750:	mov	r3, #256	; 0x100
   18754:	str	r4, [r6, #12]
   18758:	str	r3, [r6, #8]
   1875c:	ldr	r4, [pc, #36]	; 18788 <__assert_fail@plt+0x71e8>
   18760:	cmp	r7, r4
   18764:	beq	18774 <__assert_fail@plt+0x71d4>
   18768:	mov	r0, r7
   1876c:	bl	19e40 <__assert_fail@plt+0x88a0>
   18770:	str	r4, [r6]
   18774:	mov	r3, #1
   18778:	str	r3, [r6, #4]
   1877c:	pop	{r4, r5, r6, r7, r8, pc}
   18780:	andeq	sp, r2, r8, ror r1
   18784:			; <UNDEFINED> instruction: 0x0002d2b8
   18788:	andeq	sp, r2, r0, lsl #3
   1878c:	ldr	r3, [pc, #4]	; 18798 <__assert_fail@plt+0x71f8>
   18790:	mvn	r2, #0
   18794:	b	182dc <__assert_fail@plt+0x6d3c>
   18798:			; <UNDEFINED> instruction: 0x0002d3b8
   1879c:	ldr	r3, [pc]	; 187a4 <__assert_fail@plt+0x7204>
   187a0:	b	182dc <__assert_fail@plt+0x6d3c>
   187a4:			; <UNDEFINED> instruction: 0x0002d3b8
   187a8:	mov	r1, r0
   187ac:	ldr	r3, [pc, #8]	; 187bc <__assert_fail@plt+0x721c>
   187b0:	mvn	r2, #0
   187b4:	mov	r0, #0
   187b8:	b	182dc <__assert_fail@plt+0x6d3c>
   187bc:			; <UNDEFINED> instruction: 0x0002d3b8
   187c0:	mov	r2, r1
   187c4:	ldr	r3, [pc, #8]	; 187d4 <__assert_fail@plt+0x7234>
   187c8:	mov	r1, r0
   187cc:	mov	r0, #0
   187d0:	b	182dc <__assert_fail@plt+0x6d3c>
   187d4:			; <UNDEFINED> instruction: 0x0002d3b8
   187d8:	push	{r4, r5, lr}
   187dc:	sub	sp, sp, #52	; 0x34
   187e0:	mov	r5, r2
   187e4:	mov	r4, r0
   187e8:	mov	r0, sp
   187ec:	bl	16c78 <__assert_fail@plt+0x56d8>
   187f0:	mov	r3, sp
   187f4:	mov	r1, r5
   187f8:	mov	r0, r4
   187fc:	mvn	r2, #0
   18800:	bl	182dc <__assert_fail@plt+0x6d3c>
   18804:	add	sp, sp, #52	; 0x34
   18808:	pop	{r4, r5, pc}
   1880c:	push	{r4, r5, r6, lr}
   18810:	sub	sp, sp, #48	; 0x30
   18814:	mov	r5, r2
   18818:	mov	r6, r3
   1881c:	mov	r4, r0
   18820:	mov	r0, sp
   18824:	bl	16c78 <__assert_fail@plt+0x56d8>
   18828:	mov	r3, sp
   1882c:	mov	r2, r6
   18830:	mov	r1, r5
   18834:	mov	r0, r4
   18838:	bl	182dc <__assert_fail@plt+0x6d3c>
   1883c:	add	sp, sp, #48	; 0x30
   18840:	pop	{r4, r5, r6, pc}
   18844:	mov	r2, r1
   18848:	mov	r1, r0
   1884c:	mov	r0, #0
   18850:	b	187d8 <__assert_fail@plt+0x7238>
   18854:	mov	r3, r2
   18858:	mov	r2, r1
   1885c:	mov	r1, r0
   18860:	mov	r0, #0
   18864:	b	1880c <__assert_fail@plt+0x726c>
   18868:	push	{r4, r5, r6, r7, r8, lr}
   1886c:	mov	r7, r0
   18870:	ldr	lr, [pc, #100]	; 188dc <__assert_fail@plt+0x733c>
   18874:	mov	r8, r1
   18878:	mov	r4, r2
   1887c:	ldm	lr!, {r0, r1, r2, r3}
   18880:	sub	sp, sp, #48	; 0x30
   18884:	mov	ip, sp
   18888:	lsr	r5, r4, #5
   1888c:	stmia	ip!, {r0, r1, r2, r3}
   18890:	add	r6, sp, #8
   18894:	ldm	lr!, {r0, r1, r2, r3}
   18898:	and	r4, r4, #31
   1889c:	stmia	ip!, {r0, r1, r2, r3}
   188a0:	ldm	lr, {r0, r1, r2, r3}
   188a4:	stm	ip, {r0, r1, r2, r3}
   188a8:	mov	r2, r8
   188ac:	ldr	lr, [r6, r5, lsl #2]
   188b0:	mov	r1, r7
   188b4:	mov	r3, sp
   188b8:	lsr	ip, lr, r4
   188bc:	eor	ip, ip, #1
   188c0:	and	ip, ip, #1
   188c4:	mov	r0, #0
   188c8:	eor	r4, lr, ip, lsl r4
   188cc:	str	r4, [r6, r5, lsl #2]
   188d0:	bl	182dc <__assert_fail@plt+0x6d3c>
   188d4:	add	sp, sp, #48	; 0x30
   188d8:	pop	{r4, r5, r6, r7, r8, pc}
   188dc:			; <UNDEFINED> instruction: 0x0002d3b8
   188e0:	mov	r2, r1
   188e4:	mvn	r1, #0
   188e8:	b	18868 <__assert_fail@plt+0x72c8>
   188ec:	mov	r2, #58	; 0x3a
   188f0:	mvn	r1, #0
   188f4:	b	18868 <__assert_fail@plt+0x72c8>
   188f8:	mov	r2, #58	; 0x3a
   188fc:	b	18868 <__assert_fail@plt+0x72c8>
   18900:	push	{r4, r5, r6, r7, lr}
   18904:	sub	sp, sp, #100	; 0x64
   18908:	mov	r6, r0
   1890c:	mov	r0, sp
   18910:	mov	r7, r2
   18914:	bl	16c78 <__assert_fail@plt+0x56d8>
   18918:	mov	ip, sp
   1891c:	add	lr, sp, #48	; 0x30
   18920:	ldm	ip!, {r0, r1, r2, r3}
   18924:	stmia	lr!, {r0, r1, r2, r3}
   18928:	ldm	ip!, {r0, r1, r2, r3}
   1892c:	ldr	r5, [sp, #60]	; 0x3c
   18930:	stmia	lr!, {r0, r1, r2, r3}
   18934:	mvn	r4, r5
   18938:	ldm	ip, {r0, r1, r2, r3}
   1893c:	and	ip, r4, #67108864	; 0x4000000
   18940:	eor	ip, ip, r5
   18944:	str	ip, [sp, #60]	; 0x3c
   18948:	stm	lr, {r0, r1, r2, r3}
   1894c:	mov	r1, r7
   18950:	mov	r0, r6
   18954:	add	r3, sp, #48	; 0x30
   18958:	mvn	r2, #0
   1895c:	bl	182dc <__assert_fail@plt+0x6d3c>
   18960:	add	sp, sp, #100	; 0x64
   18964:	pop	{r4, r5, r6, r7, pc}
   18968:	push	{r4, r5, r6, r7, r8, lr}
   1896c:	mov	r5, r1
   18970:	ldr	lr, [pc, #100]	; 189dc <__assert_fail@plt+0x743c>
   18974:	mov	r4, r2
   18978:	mov	r7, r0
   1897c:	mov	r8, r3
   18980:	ldm	lr!, {r0, r1, r2, r3}
   18984:	sub	sp, sp, #48	; 0x30
   18988:	mov	ip, sp
   1898c:	mov	r6, #10
   18990:	stmia	ip!, {r0, r1, r2, r3}
   18994:	cmp	r4, #0
   18998:	cmpne	r5, #0
   1899c:	ldm	lr!, {r0, r1, r2, r3}
   189a0:	str	r6, [sp]
   189a4:	stmia	ip!, {r0, r1, r2, r3}
   189a8:	ldm	lr, {r0, r1, r2, r3}
   189ac:	stm	ip, {r0, r1, r2, r3}
   189b0:	beq	189d8 <__assert_fail@plt+0x7438>
   189b4:	mov	r3, sp
   189b8:	mov	r1, r8
   189bc:	mov	r0, r7
   189c0:	ldr	r2, [sp, #72]	; 0x48
   189c4:	str	r5, [sp, #40]	; 0x28
   189c8:	str	r4, [sp, #44]	; 0x2c
   189cc:	bl	182dc <__assert_fail@plt+0x6d3c>
   189d0:	add	sp, sp, #48	; 0x30
   189d4:	pop	{r4, r5, r6, r7, r8, pc}
   189d8:	bl	11570 <abort@plt>
   189dc:			; <UNDEFINED> instruction: 0x0002d3b8
   189e0:	push	{lr}		; (str lr, [sp, #-4]!)
   189e4:	sub	sp, sp, #12
   189e8:	mvn	ip, #0
   189ec:	str	ip, [sp]
   189f0:	bl	18968 <__assert_fail@plt+0x73c8>
   189f4:	add	sp, sp, #12
   189f8:	pop	{pc}		; (ldr pc, [sp], #4)
   189fc:	push	{lr}		; (str lr, [sp, #-4]!)
   18a00:	sub	sp, sp, #12
   18a04:	mvn	ip, #0
   18a08:	mov	r3, r2
   18a0c:	str	ip, [sp]
   18a10:	mov	r2, r1
   18a14:	mov	r1, r0
   18a18:	mov	r0, #0
   18a1c:	bl	18968 <__assert_fail@plt+0x73c8>
   18a20:	add	sp, sp, #12
   18a24:	pop	{pc}		; (ldr pc, [sp], #4)
   18a28:	push	{lr}		; (str lr, [sp, #-4]!)
   18a2c:	sub	sp, sp, #12
   18a30:	str	r3, [sp]
   18a34:	mov	r3, r2
   18a38:	mov	r2, r1
   18a3c:	mov	r1, r0
   18a40:	mov	r0, #0
   18a44:	bl	18968 <__assert_fail@plt+0x73c8>
   18a48:	add	sp, sp, #12
   18a4c:	pop	{pc}		; (ldr pc, [sp], #4)
   18a50:	ldr	r3, [pc]	; 18a58 <__assert_fail@plt+0x74b8>
   18a54:	b	182dc <__assert_fail@plt+0x6d3c>
   18a58:	andeq	sp, r2, r8, lsl #3
   18a5c:	mov	r2, r1
   18a60:	ldr	r3, [pc, #8]	; 18a70 <__assert_fail@plt+0x74d0>
   18a64:	mov	r1, r0
   18a68:	mov	r0, #0
   18a6c:	b	182dc <__assert_fail@plt+0x6d3c>
   18a70:	andeq	sp, r2, r8, lsl #3
   18a74:	ldr	r3, [pc, #4]	; 18a80 <__assert_fail@plt+0x74e0>
   18a78:	mvn	r2, #0
   18a7c:	b	182dc <__assert_fail@plt+0x6d3c>
   18a80:	andeq	sp, r2, r8, lsl #3
   18a84:	mov	r1, r0
   18a88:	ldr	r3, [pc, #8]	; 18a98 <__assert_fail@plt+0x74f8>
   18a8c:	mvn	r2, #0
   18a90:	mov	r0, #0
   18a94:	b	182dc <__assert_fail@plt+0x6d3c>
   18a98:	andeq	sp, r2, r8, lsl #3
   18a9c:	push	{r4, r5, r6, r7, r8, lr}
   18aa0:	mov	r8, r0
   18aa4:	ldr	r5, [pc, #84]	; 18b00 <__assert_fail@plt+0x7560>
   18aa8:	mov	r7, r1
   18aac:	mov	r4, r2
   18ab0:	mov	r2, r4
   18ab4:	mov	r1, r7
   18ab8:	mov	r0, r8
   18abc:	bl	11204 <read@plt>
   18ac0:	subs	r6, r0, #0
   18ac4:	bge	18af8 <__assert_fail@plt+0x7558>
   18ac8:	bl	11420 <__errno_location@plt>
   18acc:	ldr	r3, [r0]
   18ad0:	cmp	r3, #4
   18ad4:	beq	18ab0 <__assert_fail@plt+0x7510>
   18ad8:	cmp	r4, r5
   18adc:	sub	r3, r3, #22
   18ae0:	clz	r3, r3
   18ae4:	lsr	r3, r3, #5
   18ae8:	movls	r3, #0
   18aec:	cmp	r3, #0
   18af0:	mov	r4, r5
   18af4:	bne	18ab0 <__assert_fail@plt+0x7510>
   18af8:	mov	r0, r6
   18afc:	pop	{r4, r5, r6, r7, r8, pc}
   18b00:	svcvc	0x00f00000	; IMB
   18b04:	push	{r4, r5, r6, lr}
   18b08:	mov	r2, r1
   18b0c:	mov	r4, r1
   18b10:	mov	r1, #0
   18b14:	mov	r5, r0
   18b18:	bl	11474 <memchr@plt>
   18b1c:	cmp	r0, #0
   18b20:	subne	r0, r0, r5
   18b24:	addne	r0, r0, #1
   18b28:	moveq	r0, r4
   18b2c:	pop	{r4, r5, r6, pc}
   18b30:	cmp	r0, #2
   18b34:	push	{r4, r5, r6, r7, r8, lr}
   18b38:	mov	r4, r0
   18b3c:	bhi	18b64 <__assert_fail@plt+0x75c4>
   18b40:	bl	1a4f0 <__assert_fail@plt+0x8f50>
   18b44:	mov	r7, r0
   18b48:	bl	11420 <__errno_location@plt>
   18b4c:	mov	r5, r0
   18b50:	mov	r0, r4
   18b54:	ldr	r6, [r5]
   18b58:	mov	r4, r7
   18b5c:	bl	11588 <close@plt>
   18b60:	str	r6, [r5]
   18b64:	mov	r0, r4
   18b68:	pop	{r4, r5, r6, r7, r8, pc}
   18b6c:	push	{r4, r5, r6, lr}
   18b70:	mov	r4, r0
   18b74:	bl	11498 <pipe@plt>
   18b78:	subs	r5, r0, #0
   18b7c:	bne	18bd4 <__assert_fail@plt+0x7634>
   18b80:	ldr	r0, [r4]
   18b84:	bl	18b30 <__assert_fail@plt+0x7590>
   18b88:	cmp	r0, #0
   18b8c:	str	r0, [r4]
   18b90:	blt	18bb0 <__assert_fail@plt+0x7610>
   18b94:	ldr	r0, [r4, #4]
   18b98:	bl	18b30 <__assert_fail@plt+0x7590>
   18b9c:	cmp	r0, #0
   18ba0:	str	r0, [r4, #4]
   18ba4:	blt	18bb4 <__assert_fail@plt+0x7614>
   18ba8:	mov	r0, r5
   18bac:	pop	{r4, r5, r6, pc}
   18bb0:	mov	r5, #4
   18bb4:	bl	11420 <__errno_location@plt>
   18bb8:	mov	r6, r0
   18bbc:	ldr	r0, [r4, r5]
   18bc0:	ldr	r4, [r6]
   18bc4:	mvn	r5, #0
   18bc8:	bl	11588 <close@plt>
   18bcc:	str	r4, [r6]
   18bd0:	b	18ba8 <__assert_fail@plt+0x7608>
   18bd4:	mvn	r5, #0
   18bd8:	b	18ba8 <__assert_fail@plt+0x7608>
   18bdc:	push	{r4, r5, r6, lr}
   18be0:	sub	sp, sp, #32
   18be4:	cmp	r1, #0
   18be8:	mov	r4, r0
   18bec:	ldr	r5, [sp, #48]	; 0x30
   18bf0:	ldr	r6, [sp, #52]	; 0x34
   18bf4:	beq	18ea0 <__assert_fail@plt+0x7900>
   18bf8:	str	r3, [sp]
   18bfc:	mov	r3, r2
   18c00:	mov	r2, r1
   18c04:	ldr	r1, [pc, #684]	; 18eb8 <__assert_fail@plt+0x7918>
   18c08:	bl	11414 <fprintf@plt>
   18c0c:	mov	r2, #5
   18c10:	ldr	r1, [pc, #676]	; 18ebc <__assert_fail@plt+0x791c>
   18c14:	mov	r0, #0
   18c18:	bl	11288 <dcgettext@plt>
   18c1c:	ldr	r3, [pc, #668]	; 18ec0 <__assert_fail@plt+0x7920>
   18c20:	ldr	r1, [pc, #668]	; 18ec4 <__assert_fail@plt+0x7924>
   18c24:	mov	r2, r0
   18c28:	mov	r0, r4
   18c2c:	bl	11414 <fprintf@plt>
   18c30:	mov	r1, r4
   18c34:	mov	r0, #10
   18c38:	bl	114f8 <fputc@plt>
   18c3c:	mov	r2, #5
   18c40:	ldr	r1, [pc, #640]	; 18ec8 <__assert_fail@plt+0x7928>
   18c44:	mov	r0, #0
   18c48:	bl	11288 <dcgettext@plt>
   18c4c:	ldr	r2, [pc, #632]	; 18ecc <__assert_fail@plt+0x792c>
   18c50:	mov	r1, r0
   18c54:	mov	r0, r4
   18c58:	bl	11414 <fprintf@plt>
   18c5c:	mov	r1, r4
   18c60:	mov	r0, #10
   18c64:	bl	114f8 <fputc@plt>
   18c68:	cmp	r6, #9
   18c6c:	ldrls	pc, [pc, r6, lsl #2]
   18c70:	b	18eac <__assert_fail@plt+0x790c>
   18c74:	andeq	r8, r1, r8, ror #25
   18c78:	strdeq	r8, [r1], -r0
   18c7c:	andeq	r8, r1, r8, lsl sp
   18c80:	andeq	r8, r1, r0, asr #26
   18c84:	andeq	r8, r1, r0, ror sp
   18c88:	andeq	r8, r1, r8, lsr #27
   18c8c:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18c90:	andeq	r8, r1, r0, lsl lr
   18c94:	andeq	r8, r1, r4, asr lr
   18c98:	muleq	r1, ip, ip
   18c9c:	ldr	r1, [pc, #556]	; 18ed0 <__assert_fail@plt+0x7930>
   18ca0:	mov	r2, #5
   18ca4:	mov	r0, #0
   18ca8:	bl	11288 <dcgettext@plt>
   18cac:	add	r1, r5, #24
   18cb0:	ldm	r5, {r2, r3}
   18cb4:	ldm	r1, {r1, ip, lr}
   18cb8:	str	lr, [sp, #24]
   18cbc:	ldr	r6, [r5, #20]
   18cc0:	str	ip, [sp, #20]
   18cc4:	ldr	lr, [r5, #16]
   18cc8:	str	r1, [sp, #16]
   18ccc:	ldr	r1, [r5, #8]
   18cd0:	ldr	ip, [r5, #12]
   18cd4:	str	r6, [sp, #12]
   18cd8:	stm	sp, {r1, ip, lr}
   18cdc:	mov	r1, r0
   18ce0:	mov	r0, r4
   18ce4:	bl	11414 <fprintf@plt>
   18ce8:	add	sp, sp, #32
   18cec:	pop	{r4, r5, r6, pc}
   18cf0:	mov	r2, #5
   18cf4:	ldr	r1, [pc, #472]	; 18ed4 <__assert_fail@plt+0x7934>
   18cf8:	mov	r0, #0
   18cfc:	bl	11288 <dcgettext@plt>
   18d00:	ldr	r2, [r5]
   18d04:	mov	r1, r0
   18d08:	mov	r0, r4
   18d0c:	add	sp, sp, #32
   18d10:	pop	{r4, r5, r6, lr}
   18d14:	b	11414 <fprintf@plt>
   18d18:	mov	r2, #5
   18d1c:	ldr	r1, [pc, #436]	; 18ed8 <__assert_fail@plt+0x7938>
   18d20:	mov	r0, #0
   18d24:	bl	11288 <dcgettext@plt>
   18d28:	ldm	r5, {r2, r3}
   18d2c:	mov	r1, r0
   18d30:	mov	r0, r4
   18d34:	add	sp, sp, #32
   18d38:	pop	{r4, r5, r6, lr}
   18d3c:	b	11414 <fprintf@plt>
   18d40:	mov	r2, #5
   18d44:	ldr	r1, [pc, #400]	; 18edc <__assert_fail@plt+0x793c>
   18d48:	mov	r0, #0
   18d4c:	bl	11288 <dcgettext@plt>
   18d50:	ldr	r1, [r5, #8]
   18d54:	ldm	r5, {r2, r3}
   18d58:	str	r1, [sp, #48]	; 0x30
   18d5c:	mov	r1, r0
   18d60:	mov	r0, r4
   18d64:	add	sp, sp, #32
   18d68:	pop	{r4, r5, r6, lr}
   18d6c:	b	11414 <fprintf@plt>
   18d70:	mov	r2, #5
   18d74:	ldr	r1, [pc, #356]	; 18ee0 <__assert_fail@plt+0x7940>
   18d78:	mov	r0, #0
   18d7c:	bl	11288 <dcgettext@plt>
   18d80:	ldr	r1, [r5, #8]
   18d84:	ldr	ip, [r5, #12]
   18d88:	ldm	r5, {r2, r3}
   18d8c:	str	r1, [sp, #48]	; 0x30
   18d90:	str	ip, [sp, #52]	; 0x34
   18d94:	mov	r1, r0
   18d98:	mov	r0, r4
   18d9c:	add	sp, sp, #32
   18da0:	pop	{r4, r5, r6, lr}
   18da4:	b	11414 <fprintf@plt>
   18da8:	mov	r2, #5
   18dac:	ldr	r1, [pc, #304]	; 18ee4 <__assert_fail@plt+0x7944>
   18db0:	mov	r0, #0
   18db4:	bl	11288 <dcgettext@plt>
   18db8:	add	r1, r5, #8
   18dbc:	ldm	r5, {r2, r3}
   18dc0:	ldm	r1, {r1, ip, lr}
   18dc4:	stm	sp, {r1, ip, lr}
   18dc8:	mov	r1, r0
   18dcc:	mov	r0, r4
   18dd0:	bl	11414 <fprintf@plt>
   18dd4:	b	18ce8 <__assert_fail@plt+0x7748>
   18dd8:	mov	r2, #5
   18ddc:	ldr	r1, [pc, #260]	; 18ee8 <__assert_fail@plt+0x7948>
   18de0:	mov	r0, #0
   18de4:	bl	11288 <dcgettext@plt>
   18de8:	add	r1, r5, #8
   18dec:	ldr	r6, [r5, #20]
   18df0:	ldm	r1, {r1, ip, lr}
   18df4:	ldm	r5, {r2, r3}
   18df8:	str	r6, [sp, #12]
   18dfc:	stm	sp, {r1, ip, lr}
   18e00:	mov	r1, r0
   18e04:	mov	r0, r4
   18e08:	bl	11414 <fprintf@plt>
   18e0c:	b	18ce8 <__assert_fail@plt+0x7748>
   18e10:	mov	r2, #5
   18e14:	ldr	r1, [pc, #208]	; 18eec <__assert_fail@plt+0x794c>
   18e18:	mov	r0, #0
   18e1c:	bl	11288 <dcgettext@plt>
   18e20:	ldr	r1, [r5, #24]
   18e24:	ldm	r5, {r2, r3}
   18e28:	ldr	r6, [r5, #20]
   18e2c:	ldr	lr, [r5, #16]
   18e30:	str	r1, [sp, #16]
   18e34:	ldr	r1, [r5, #8]
   18e38:	ldr	ip, [r5, #12]
   18e3c:	str	r6, [sp, #12]
   18e40:	stm	sp, {r1, ip, lr}
   18e44:	mov	r1, r0
   18e48:	mov	r0, r4
   18e4c:	bl	11414 <fprintf@plt>
   18e50:	b	18ce8 <__assert_fail@plt+0x7748>
   18e54:	mov	r2, #5
   18e58:	ldr	r1, [pc, #144]	; 18ef0 <__assert_fail@plt+0x7950>
   18e5c:	mov	r0, #0
   18e60:	bl	11288 <dcgettext@plt>
   18e64:	ldr	ip, [r5, #28]
   18e68:	ldr	r1, [r5, #24]
   18e6c:	ldm	r5, {r2, r3}
   18e70:	ldr	r6, [r5, #20]
   18e74:	str	ip, [sp, #20]
   18e78:	ldr	lr, [r5, #16]
   18e7c:	str	r1, [sp, #16]
   18e80:	ldr	r1, [r5, #8]
   18e84:	ldr	ip, [r5, #12]
   18e88:	str	r6, [sp, #12]
   18e8c:	stm	sp, {r1, ip, lr}
   18e90:	mov	r1, r0
   18e94:	mov	r0, r4
   18e98:	bl	11414 <fprintf@plt>
   18e9c:	b	18ce8 <__assert_fail@plt+0x7748>
   18ea0:	ldr	r1, [pc, #76]	; 18ef4 <__assert_fail@plt+0x7954>
   18ea4:	bl	11414 <fprintf@plt>
   18ea8:	b	18c0c <__assert_fail@plt+0x766c>
   18eac:	mov	r2, #5
   18eb0:	ldr	r1, [pc, #64]	; 18ef8 <__assert_fail@plt+0x7958>
   18eb4:	b	18ca4 <__assert_fail@plt+0x7704>
   18eb8:	strdeq	ip, [r1], -r4
   18ebc:	andeq	ip, r1, r8, lsl #20
   18ec0:	andeq	r0, r0, r6, ror #15
   18ec4:	andeq	ip, r1, r8, asr #25
   18ec8:	andeq	ip, r1, ip, lsl #20
   18ecc:			; <UNDEFINED> instruction: 0x0001cab8
   18ed0:	andeq	ip, r1, r8, ror #23
   18ed4:	ldrdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   18ed8:	andeq	ip, r1, ip, ror #21
   18edc:	andeq	ip, r1, r4, lsl #22
   18ee0:	andeq	ip, r1, r0, lsr #22
   18ee4:	andeq	ip, r1, r0, asr #22
   18ee8:	andeq	ip, r1, r4, ror #22
   18eec:	andeq	ip, r1, ip, lsl #23
   18ef0:			; <UNDEFINED> instruction: 0x0001cbb8
   18ef4:	andeq	ip, r1, r0, lsl #20
   18ef8:	andeq	ip, r1, ip, lsl ip
   18efc:	push	{r4, r5, lr}
   18f00:	sub	sp, sp, #12
   18f04:	ldr	r5, [sp, #24]
   18f08:	ldr	ip, [r5]
   18f0c:	cmp	ip, #0
   18f10:	beq	18f2c <__assert_fail@plt+0x798c>
   18f14:	mov	lr, r5
   18f18:	mov	ip, #0
   18f1c:	ldr	r4, [lr, #4]!
   18f20:	add	ip, ip, #1
   18f24:	cmp	r4, #0
   18f28:	bne	18f1c <__assert_fail@plt+0x797c>
   18f2c:	stm	sp, {r5, ip}
   18f30:	bl	18bdc <__assert_fail@plt+0x763c>
   18f34:	add	sp, sp, #12
   18f38:	pop	{r4, r5, pc}
   18f3c:	push	{r4, r5, lr}
   18f40:	sub	sp, sp, #52	; 0x34
   18f44:	add	r5, sp, #4
   18f48:	ldr	r4, [sp, #64]	; 0x40
   18f4c:	mov	ip, #0
   18f50:	sub	r4, r4, #4
   18f54:	ldr	lr, [r4, #4]!
   18f58:	cmp	lr, #0
   18f5c:	str	lr, [r5, #4]!
   18f60:	beq	18f70 <__assert_fail@plt+0x79d0>
   18f64:	add	ip, ip, #1
   18f68:	cmp	ip, #10
   18f6c:	bne	18f54 <__assert_fail@plt+0x79b4>
   18f70:	add	lr, sp, #8
   18f74:	str	ip, [sp, #4]
   18f78:	str	lr, [sp]
   18f7c:	bl	18bdc <__assert_fail@plt+0x763c>
   18f80:	add	sp, sp, #52	; 0x34
   18f84:	pop	{r4, r5, pc}
   18f88:	push	{r3}		; (str r3, [sp, #-4]!)
   18f8c:	push	{r4, lr}
   18f90:	sub	sp, sp, #60	; 0x3c
   18f94:	add	lr, sp, #56	; 0x38
   18f98:	add	r3, sp, #72	; 0x48
   18f9c:	str	r3, [lr, #-44]!	; 0xffffffd4
   18fa0:	add	r4, sp, #68	; 0x44
   18fa4:	mov	r3, #0
   18fa8:	ldr	ip, [r4, #4]!
   18fac:	cmp	ip, #0
   18fb0:	str	ip, [lr, #4]!
   18fb4:	beq	18fc4 <__assert_fail@plt+0x7a24>
   18fb8:	add	r3, r3, #1
   18fbc:	cmp	r3, #10
   18fc0:	bne	18fa8 <__assert_fail@plt+0x7a08>
   18fc4:	add	ip, sp, #16
   18fc8:	str	r3, [sp, #4]
   18fcc:	str	ip, [sp]
   18fd0:	ldr	r3, [sp, #68]	; 0x44
   18fd4:	bl	18bdc <__assert_fail@plt+0x763c>
   18fd8:	add	sp, sp, #60	; 0x3c
   18fdc:	pop	{r4, lr}
   18fe0:	add	sp, sp, #4
   18fe4:	bx	lr
   18fe8:	ldr	r3, [pc, #92]	; 1904c <__assert_fail@plt+0x7aac>
   18fec:	push	{r4, lr}
   18ff0:	mov	r0, #10
   18ff4:	ldr	r1, [r3]
   18ff8:	bl	114f8 <fputc@plt>
   18ffc:	mov	r2, #5
   19000:	ldr	r1, [pc, #72]	; 19050 <__assert_fail@plt+0x7ab0>
   19004:	mov	r0, #0
   19008:	bl	11288 <dcgettext@plt>
   1900c:	ldr	r1, [pc, #64]	; 19054 <__assert_fail@plt+0x7ab4>
   19010:	bl	111f8 <printf@plt>
   19014:	mov	r2, #5
   19018:	ldr	r1, [pc, #56]	; 19058 <__assert_fail@plt+0x7ab8>
   1901c:	mov	r0, #0
   19020:	bl	11288 <dcgettext@plt>
   19024:	ldr	r2, [pc, #48]	; 1905c <__assert_fail@plt+0x7abc>
   19028:	ldr	r1, [pc, #48]	; 19060 <__assert_fail@plt+0x7ac0>
   1902c:	bl	111f8 <printf@plt>
   19030:	ldr	r1, [pc, #44]	; 19064 <__assert_fail@plt+0x7ac4>
   19034:	mov	r2, #5
   19038:	mov	r0, #0
   1903c:	bl	11288 <dcgettext@plt>
   19040:	ldr	r1, [pc, #32]	; 19068 <__assert_fail@plt+0x7ac8>
   19044:	pop	{r4, lr}
   19048:	b	111f8 <printf@plt>
   1904c:	ldrdeq	sp, [r2], -ip
   19050:	andeq	ip, r1, r8, asr ip
   19054:	ldrdeq	ip, [r1], -r0
   19058:	andeq	ip, r1, ip, ror #24
   1905c:	andeq	ip, r1, r8, lsr #15
   19060:	andeq	ip, r1, r4, lsl #13
   19064:	andeq	ip, r1, r0, lsl #25
   19068:	andeq	ip, r1, r8, lsr #25
   1906c:	push	{r4, lr}
   19070:	bl	19f38 <__assert_fail@plt+0x8998>
   19074:	cmp	r0, #0
   19078:	popne	{r4, pc}
   1907c:	bl	195b4 <__assert_fail@plt+0x8014>
   19080:	push	{r4, lr}
   19084:	bl	19f38 <__assert_fail@plt+0x8998>
   19088:	cmp	r0, #0
   1908c:	popne	{r4, pc}
   19090:	bl	195b4 <__assert_fail@plt+0x8014>
   19094:	push	{r4, lr}
   19098:	bl	19f38 <__assert_fail@plt+0x8998>
   1909c:	cmp	r0, #0
   190a0:	popne	{r4, pc}
   190a4:	bl	195b4 <__assert_fail@plt+0x8014>
   190a8:	push	{r4, r5, r6, lr}
   190ac:	mov	r5, r0
   190b0:	mov	r4, r1
   190b4:	bl	19fb8 <__assert_fail@plt+0x8a18>
   190b8:	cmp	r0, #0
   190bc:	popne	{r4, r5, r6, pc}
   190c0:	adds	r4, r4, #0
   190c4:	movne	r4, #1
   190c8:	cmp	r5, #0
   190cc:	orreq	r4, r4, #1
   190d0:	cmp	r4, #0
   190d4:	popeq	{r4, r5, r6, pc}
   190d8:	bl	195b4 <__assert_fail@plt+0x8014>
   190dc:	push	{r4, lr}
   190e0:	cmp	r1, #0
   190e4:	orreq	r1, r1, #1
   190e8:	bl	19fb8 <__assert_fail@plt+0x8a18>
   190ec:	cmp	r0, #0
   190f0:	popne	{r4, pc}
   190f4:	bl	195b4 <__assert_fail@plt+0x8014>
   190f8:	push	{r4, r5, r6, lr}
   190fc:	mov	r6, r0
   19100:	mov	r5, r1
   19104:	mov	r4, r2
   19108:	bl	1a014 <__assert_fail@plt+0x8a74>
   1910c:	cmp	r0, #0
   19110:	popne	{r4, r5, r6, pc}
   19114:	cmp	r6, #0
   19118:	beq	19128 <__assert_fail@plt+0x7b88>
   1911c:	cmp	r5, #0
   19120:	cmpne	r4, #0
   19124:	popeq	{r4, r5, r6, pc}
   19128:	bl	195b4 <__assert_fail@plt+0x8014>
   1912c:	b	190f8 <__assert_fail@plt+0x7b58>
   19130:	cmp	r2, #0
   19134:	cmpne	r1, #0
   19138:	moveq	r2, #1
   1913c:	moveq	r1, r2
   19140:	push	{r4, lr}
   19144:	bl	1a014 <__assert_fail@plt+0x8a74>
   19148:	cmp	r0, #0
   1914c:	popne	{r4, pc}
   19150:	bl	195b4 <__assert_fail@plt+0x8014>
   19154:	mov	r2, r1
   19158:	mov	r1, r0
   1915c:	mov	r0, #0
   19160:	b	190f8 <__assert_fail@plt+0x7b58>
   19164:	mov	r2, r1
   19168:	mov	r1, r0
   1916c:	mov	r0, #0
   19170:	b	19130 <__assert_fail@plt+0x7b90>
   19174:	push	{r4, r5, r6, lr}
   19178:	subs	r6, r0, #0
   1917c:	sub	sp, sp, #8
   19180:	mov	r5, r1
   19184:	ldr	r4, [r1]
   19188:	beq	191c4 <__assert_fail@plt+0x7c24>
   1918c:	lsr	r1, r4, #1
   19190:	add	r3, r1, #1
   19194:	mvn	r3, r3
   19198:	cmp	r4, r3
   1919c:	bhi	191c0 <__assert_fail@plt+0x7c20>
   191a0:	add	r4, r4, #1
   191a4:	add	r4, r4, r1
   191a8:	mov	r0, r6
   191ac:	mov	r1, r4
   191b0:	bl	190f8 <__assert_fail@plt+0x7b58>
   191b4:	str	r4, [r5]
   191b8:	add	sp, sp, #8
   191bc:	pop	{r4, r5, r6, pc}
   191c0:	bl	195b4 <__assert_fail@plt+0x8014>
   191c4:	cmp	r4, #0
   191c8:	bne	191a8 <__assert_fail@plt+0x7c08>
   191cc:	mov	r1, r2
   191d0:	mov	r0, #64	; 0x40
   191d4:	str	r2, [sp, #4]
   191d8:	bl	1a4fc <__assert_fail@plt+0x8f5c>
   191dc:	ldr	r2, [sp, #4]
   191e0:	cmp	r0, #0
   191e4:	movne	r4, r0
   191e8:	addeq	r4, r0, #1
   191ec:	b	191a8 <__assert_fail@plt+0x7c08>
   191f0:	mov	r2, #1
   191f4:	b	19174 <__assert_fail@plt+0x7bd4>
   191f8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   191fc:	sub	sp, sp, #12
   19200:	ldr	r6, [r1]
   19204:	mov	sl, r1
   19208:	mov	r9, r0
   1920c:	asrs	r4, r6, #1
   19210:	mov	r5, r2
   19214:	mov	fp, r3
   19218:	ldr	r7, [sp, #48]	; 0x30
   1921c:	bmi	19388 <__assert_fail@plt+0x7de8>
   19220:	mvn	r3, #-2147483648	; 0x80000000
   19224:	sub	r3, r3, r4
   19228:	cmp	r6, r3
   1922c:	movle	r3, #0
   19230:	movgt	r3, #1
   19234:	mvn	r8, fp
   19238:	cmp	r3, #0
   1923c:	addeq	r4, r4, r6
   19240:	mvnne	r4, #-2147483648	; 0x80000000
   19244:	lsr	r8, r8, #31
   19248:	cmp	fp, r4
   1924c:	movge	r3, #0
   19250:	andlt	r3, r8, #1
   19254:	cmp	r3, #0
   19258:	beq	19340 <__assert_fail@plt+0x7da0>
   1925c:	cmp	r7, #0
   19260:	blt	19410 <__assert_fail@plt+0x7e70>
   19264:	bne	19408 <__assert_fail@plt+0x7e68>
   19268:	mov	r2, #64	; 0x40
   1926c:	mov	r1, r7
   19270:	mov	r0, r2
   19274:	str	r2, [sp, #4]
   19278:	bl	1a708 <__assert_fail@plt+0x9168>
   1927c:	ldr	r2, [sp, #4]
   19280:	mov	r1, r7
   19284:	mov	r4, r0
   19288:	mov	r0, r2
   1928c:	bl	1a928 <__assert_fail@plt+0x9388>
   19290:	ldr	r2, [sp, #4]
   19294:	sub	r1, r2, r1
   19298:	cmp	r9, #0
   1929c:	sub	r3, r4, r6
   192a0:	streq	r9, [sl]
   192a4:	cmp	r3, r5
   192a8:	bge	1932c <__assert_fail@plt+0x7d8c>
   192ac:	cmp	r5, #0
   192b0:	blt	1939c <__assert_fail@plt+0x7dfc>
   192b4:	cmp	r6, #0
   192b8:	blt	192d8 <__assert_fail@plt+0x7d38>
   192bc:	mvn	r3, #-2147483648	; 0x80000000
   192c0:	sub	r3, r3, r5
   192c4:	cmp	r6, r3
   192c8:	movle	r3, #0
   192cc:	movgt	r3, #1
   192d0:	cmp	r3, #0
   192d4:	bne	19498 <__assert_fail@plt+0x7ef8>
   192d8:	add	r5, r6, r5
   192dc:	cmp	fp, r5
   192e0:	movge	r8, #0
   192e4:	andlt	r8, r8, #1
   192e8:	cmp	r8, #0
   192ec:	mov	r4, r5
   192f0:	bne	19498 <__assert_fail@plt+0x7ef8>
   192f4:	cmp	r7, #0
   192f8:	blt	193b0 <__assert_fail@plt+0x7e10>
   192fc:	beq	19328 <__assert_fail@plt+0x7d88>
   19300:	cmp	r5, #0
   19304:	blt	19458 <__assert_fail@plt+0x7eb8>
   19308:	mov	r1, r7
   1930c:	mvn	r0, #-2147483648	; 0x80000000
   19310:	bl	1a708 <__assert_fail@plt+0x9168>
   19314:	cmp	r5, r0
   19318:	movle	r0, #0
   1931c:	movgt	r0, #1
   19320:	cmp	r0, #0
   19324:	bne	19498 <__assert_fail@plt+0x7ef8>
   19328:	mul	r1, r5, r7
   1932c:	mov	r0, r9
   19330:	bl	190a8 <__assert_fail@plt+0x7b08>
   19334:	str	r4, [sl]
   19338:	add	sp, sp, #12
   1933c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19340:	cmp	r7, #0
   19344:	blt	193dc <__assert_fail@plt+0x7e3c>
   19348:	beq	19268 <__assert_fail@plt+0x7cc8>
   1934c:	cmp	r4, #0
   19350:	blt	19418 <__assert_fail@plt+0x7e78>
   19354:	mov	r1, r7
   19358:	mvn	r0, #-2147483648	; 0x80000000
   1935c:	bl	1a708 <__assert_fail@plt+0x9168>
   19360:	cmp	r0, r4
   19364:	movge	r0, #0
   19368:	movlt	r0, #1
   1936c:	cmp	r0, #0
   19370:	mvnne	r2, #-2147483648	; 0x80000000
   19374:	bne	1926c <__assert_fail@plt+0x7ccc>
   19378:	mul	r1, r7, r4
   1937c:	cmp	r1, #63	; 0x3f
   19380:	bgt	19298 <__assert_fail@plt+0x7cf8>
   19384:	b	19268 <__assert_fail@plt+0x7cc8>
   19388:	rsb	r3, r4, #-2147483648	; 0x80000000
   1938c:	cmp	r6, r3
   19390:	movge	r3, #0
   19394:	movlt	r3, #1
   19398:	b	19234 <__assert_fail@plt+0x7c94>
   1939c:	rsb	r3, r5, #-2147483648	; 0x80000000
   193a0:	cmp	r6, r3
   193a4:	movge	r3, #0
   193a8:	movlt	r3, #1
   193ac:	b	192d0 <__assert_fail@plt+0x7d30>
   193b0:	cmp	r5, #0
   193b4:	blt	1943c <__assert_fail@plt+0x7e9c>
   193b8:	cmn	r7, #1
   193bc:	beq	19328 <__assert_fail@plt+0x7d88>
   193c0:	mov	r1, r7
   193c4:	mov	r0, #-2147483648	; 0x80000000
   193c8:	bl	1a708 <__assert_fail@plt+0x9168>
   193cc:	cmp	r5, r0
   193d0:	movle	r0, #0
   193d4:	movgt	r0, #1
   193d8:	b	19320 <__assert_fail@plt+0x7d80>
   193dc:	cmp	r4, #0
   193e0:	blt	1947c <__assert_fail@plt+0x7edc>
   193e4:	cmn	r7, #1
   193e8:	beq	19378 <__assert_fail@plt+0x7dd8>
   193ec:	mov	r1, r7
   193f0:	mov	r0, #-2147483648	; 0x80000000
   193f4:	bl	1a708 <__assert_fail@plt+0x9168>
   193f8:	cmp	r0, r4
   193fc:	movge	r0, #0
   19400:	movlt	r0, #1
   19404:	b	1936c <__assert_fail@plt+0x7dcc>
   19408:	mov	r4, fp
   1940c:	b	19354 <__assert_fail@plt+0x7db4>
   19410:	mov	r4, fp
   19414:	b	193e4 <__assert_fail@plt+0x7e44>
   19418:	cmn	r4, #1
   1941c:	beq	19378 <__assert_fail@plt+0x7dd8>
   19420:	mov	r1, r4
   19424:	mov	r0, #-2147483648	; 0x80000000
   19428:	bl	1a708 <__assert_fail@plt+0x9168>
   1942c:	cmp	r7, r0
   19430:	movle	r0, #0
   19434:	movgt	r0, #1
   19438:	b	1936c <__assert_fail@plt+0x7dcc>
   1943c:	mov	r1, r7
   19440:	mvn	r0, #-2147483648	; 0x80000000
   19444:	bl	1a708 <__assert_fail@plt+0x9168>
   19448:	cmp	r5, r0
   1944c:	movge	r0, #0
   19450:	movlt	r0, #1
   19454:	b	19320 <__assert_fail@plt+0x7d80>
   19458:	cmn	r5, #1
   1945c:	beq	19328 <__assert_fail@plt+0x7d88>
   19460:	mov	r1, r5
   19464:	mov	r0, #-2147483648	; 0x80000000
   19468:	bl	1a708 <__assert_fail@plt+0x9168>
   1946c:	cmp	r7, r0
   19470:	movle	r0, #0
   19474:	movgt	r0, #1
   19478:	b	19320 <__assert_fail@plt+0x7d80>
   1947c:	mov	r1, r7
   19480:	mvn	r0, #-2147483648	; 0x80000000
   19484:	bl	1a708 <__assert_fail@plt+0x9168>
   19488:	cmp	r0, r4
   1948c:	movle	r0, #0
   19490:	movgt	r0, #1
   19494:	b	1936c <__assert_fail@plt+0x7dcc>
   19498:	bl	195b4 <__assert_fail@plt+0x8014>
   1949c:	push	{r4, lr}
   194a0:	mov	r1, #1
   194a4:	bl	19b88 <__assert_fail@plt+0x85e8>
   194a8:	cmp	r0, #0
   194ac:	popne	{r4, pc}
   194b0:	bl	195b4 <__assert_fail@plt+0x8014>
   194b4:	push	{r4, lr}
   194b8:	mov	r1, #1
   194bc:	bl	19b88 <__assert_fail@plt+0x85e8>
   194c0:	cmp	r0, #0
   194c4:	popne	{r4, pc}
   194c8:	bl	195b4 <__assert_fail@plt+0x8014>
   194cc:	push	{r4, lr}
   194d0:	bl	19b88 <__assert_fail@plt+0x85e8>
   194d4:	cmp	r0, #0
   194d8:	popne	{r4, pc}
   194dc:	bl	195b4 <__assert_fail@plt+0x8014>
   194e0:	push	{r4, lr}
   194e4:	bl	19b88 <__assert_fail@plt+0x85e8>
   194e8:	cmp	r0, #0
   194ec:	popne	{r4, pc}
   194f0:	bl	195b4 <__assert_fail@plt+0x8014>
   194f4:	push	{r4, r5, r6, lr}
   194f8:	mov	r6, r0
   194fc:	mov	r0, r1
   19500:	mov	r4, r1
   19504:	bl	19f38 <__assert_fail@plt+0x8998>
   19508:	subs	r5, r0, #0
   1950c:	beq	19524 <__assert_fail@plt+0x7f84>
   19510:	mov	r2, r4
   19514:	mov	r1, r6
   19518:	bl	1124c <memcpy@plt>
   1951c:	mov	r0, r5
   19520:	pop	{r4, r5, r6, pc}
   19524:	bl	195b4 <__assert_fail@plt+0x8014>
   19528:	push	{r4, r5, r6, lr}
   1952c:	mov	r6, r0
   19530:	mov	r0, r1
   19534:	mov	r4, r1
   19538:	bl	19f38 <__assert_fail@plt+0x8998>
   1953c:	subs	r5, r0, #0
   19540:	beq	19558 <__assert_fail@plt+0x7fb8>
   19544:	mov	r2, r4
   19548:	mov	r1, r6
   1954c:	bl	1124c <memcpy@plt>
   19550:	mov	r0, r5
   19554:	pop	{r4, r5, r6, pc}
   19558:	bl	195b4 <__assert_fail@plt+0x8014>
   1955c:	push	{r4, r5, r6, lr}
   19560:	mov	r6, r0
   19564:	add	r0, r1, #1
   19568:	mov	r4, r1
   1956c:	bl	19f38 <__assert_fail@plt+0x8998>
   19570:	subs	r5, r0, #0
   19574:	beq	19594 <__assert_fail@plt+0x7ff4>
   19578:	mov	r3, #0
   1957c:	mov	r1, r6
   19580:	strb	r3, [r5, r4]
   19584:	mov	r2, r4
   19588:	bl	1124c <memcpy@plt>
   1958c:	mov	r0, r5
   19590:	pop	{r4, r5, r6, pc}
   19594:	bl	195b4 <__assert_fail@plt+0x8014>
   19598:	push	{r4, lr}
   1959c:	mov	r4, r0
   195a0:	bl	113f0 <strlen@plt>
   195a4:	add	r1, r0, #1
   195a8:	mov	r0, r4
   195ac:	pop	{r4, lr}
   195b0:	b	194f4 <__assert_fail@plt+0x7f54>
   195b4:	ldr	r3, [pc, #44]	; 195e8 <__assert_fail@plt+0x8048>
   195b8:	push	{r4, lr}
   195bc:	mov	r2, #5
   195c0:	ldr	r1, [pc, #36]	; 195ec <__assert_fail@plt+0x804c>
   195c4:	mov	r0, #0
   195c8:	ldr	r4, [r3]
   195cc:	bl	11288 <dcgettext@plt>
   195d0:	ldr	r2, [pc, #24]	; 195f0 <__assert_fail@plt+0x8050>
   195d4:	mov	r1, #0
   195d8:	mov	r3, r0
   195dc:	mov	r0, r4
   195e0:	bl	11354 <error@plt>
   195e4:	bl	11570 <abort@plt>
   195e8:	andeq	sp, r2, r4, ror r1
   195ec:	strdeq	ip, [r1], -r8
   195f0:	andeq	ip, r1, r8, ror #16
   195f4:	cmp	r2, #36	; 0x24
   195f8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   195fc:	sub	sp, sp, #12
   19600:	bhi	19b68 <__assert_fail@plt+0x85c8>
   19604:	cmp	r1, #0
   19608:	mov	r6, r1
   1960c:	mov	r9, r2
   19610:	mov	r5, r0
   19614:	mov	r8, r3
   19618:	addeq	r6, sp, #4
   1961c:	bl	11420 <__errno_location@plt>
   19620:	mov	r3, #0
   19624:	str	r3, [r0]
   19628:	mov	r7, r0
   1962c:	bl	113c0 <__ctype_b_loc@plt>
   19630:	ldrb	r1, [r5]
   19634:	mov	r2, r5
   19638:	ldr	r0, [r0]
   1963c:	b	19644 <__assert_fail@plt+0x80a4>
   19640:	ldrb	r1, [r2, #1]!
   19644:	lsl	r3, r1, #1
   19648:	ldrh	r3, [r0, r3]
   1964c:	ands	r4, r3, #8192	; 0x2000
   19650:	bne	19640 <__assert_fail@plt+0x80a0>
   19654:	cmp	r1, #45	; 0x2d
   19658:	bne	1966c <__assert_fail@plt+0x80cc>
   1965c:	mov	r4, #4
   19660:	mov	r0, r4
   19664:	add	sp, sp, #12
   19668:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1966c:	mov	r2, r9
   19670:	mov	r1, r6
   19674:	mov	r0, r5
   19678:	bl	113e4 <strtoul@plt>
   1967c:	ldr	sl, [r6]
   19680:	cmp	r5, sl
   19684:	mov	r9, r0
   19688:	beq	196d0 <__assert_fail@plt+0x8130>
   1968c:	ldr	r4, [r7]
   19690:	cmp	r4, #0
   19694:	bne	196c0 <__assert_fail@plt+0x8120>
   19698:	ldr	r3, [sp, #48]	; 0x30
   1969c:	cmp	r3, #0
   196a0:	beq	196b0 <__assert_fail@plt+0x8110>
   196a4:	ldrb	r5, [sl]
   196a8:	cmp	r5, #0
   196ac:	bne	19700 <__assert_fail@plt+0x8160>
   196b0:	mov	r0, r4
   196b4:	str	r9, [r8]
   196b8:	add	sp, sp, #12
   196bc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   196c0:	cmp	r4, #34	; 0x22
   196c4:	bne	1965c <__assert_fail@plt+0x80bc>
   196c8:	mov	r4, #1
   196cc:	b	19698 <__assert_fail@plt+0x80f8>
   196d0:	ldr	r3, [sp, #48]	; 0x30
   196d4:	cmp	r3, #0
   196d8:	beq	1965c <__assert_fail@plt+0x80bc>
   196dc:	ldrb	r5, [sl]
   196e0:	cmp	r5, #0
   196e4:	beq	1965c <__assert_fail@plt+0x80bc>
   196e8:	mov	r1, r5
   196ec:	mov	r0, r3
   196f0:	bl	113fc <strchr@plt>
   196f4:	cmp	r0, #0
   196f8:	movne	r9, #1
   196fc:	beq	1965c <__assert_fail@plt+0x80bc>
   19700:	mov	r1, r5
   19704:	ldr	r0, [sp, #48]	; 0x30
   19708:	bl	113fc <strchr@plt>
   1970c:	cmp	r0, #0
   19710:	beq	19b38 <__assert_fail@plt+0x8598>
   19714:	sub	r3, r5, #69	; 0x45
   19718:	cmp	r3, #47	; 0x2f
   1971c:	ldrls	pc, [pc, r3, lsl #2]
   19720:	b	197e4 <__assert_fail@plt+0x8244>
   19724:	ldrdeq	r9, [r1], -r4
   19728:	andeq	r9, r1, r4, ror #15
   1972c:	ldrdeq	r9, [r1], -r4
   19730:	andeq	r9, r1, r4, ror #15
   19734:	andeq	r9, r1, r4, ror #15
   19738:	andeq	r9, r1, r4, ror #15
   1973c:	ldrdeq	r9, [r1], -r4
   19740:	andeq	r9, r1, r4, ror #15
   19744:	ldrdeq	r9, [r1], -r4
   19748:	andeq	r9, r1, r4, ror #15
   1974c:	andeq	r9, r1, r4, ror #15
   19750:	ldrdeq	r9, [r1], -r4
   19754:	andeq	r9, r1, r4, ror #15
   19758:	andeq	r9, r1, r4, ror #15
   1975c:	andeq	r9, r1, r4, ror #15
   19760:	ldrdeq	r9, [r1], -r4
   19764:	andeq	r9, r1, r4, ror #15
   19768:	andeq	r9, r1, r4, ror #15
   1976c:	andeq	r9, r1, r4, ror #15
   19770:	andeq	r9, r1, r4, ror #15
   19774:	ldrdeq	r9, [r1], -r4
   19778:	ldrdeq	r9, [r1], -r4
   1977c:	andeq	r9, r1, r4, ror #15
   19780:	andeq	r9, r1, r4, ror #15
   19784:	andeq	r9, r1, r4, ror #15
   19788:	andeq	r9, r1, r4, ror #15
   1978c:	andeq	r9, r1, r4, ror #15
   19790:	andeq	r9, r1, r4, ror #15
   19794:	andeq	r9, r1, r4, ror #15
   19798:	andeq	r9, r1, r4, ror #15
   1979c:	andeq	r9, r1, r4, ror #15
   197a0:	andeq	r9, r1, r4, ror #15
   197a4:	andeq	r9, r1, r4, ror #15
   197a8:	andeq	r9, r1, r4, ror #15
   197ac:	ldrdeq	r9, [r1], -r4
   197b0:	andeq	r9, r1, r4, ror #15
   197b4:	andeq	r9, r1, r4, ror #15
   197b8:	andeq	r9, r1, r4, ror #15
   197bc:	ldrdeq	r9, [r1], -r4
   197c0:	andeq	r9, r1, r4, ror #15
   197c4:	ldrdeq	r9, [r1], -r4
   197c8:	andeq	r9, r1, r4, ror #15
   197cc:	andeq	r9, r1, r4, ror #15
   197d0:	andeq	r9, r1, r4, ror #15
   197d4:	andeq	r9, r1, r4, ror #15
   197d8:	andeq	r9, r1, r4, ror #15
   197dc:	andeq	r9, r1, r4, ror #15
   197e0:	ldrdeq	r9, [r1], -r4
   197e4:	mov	fp, #1
   197e8:	mov	r7, #1024	; 0x400
   197ec:	sub	r5, r5, #66	; 0x42
   197f0:	cmp	r5, #53	; 0x35
   197f4:	ldrls	pc, [pc, r5, lsl #2]
   197f8:	b	19b38 <__assert_fail@plt+0x8598>
   197fc:	andeq	r9, r1, r4, ror #21
   19800:	andeq	r9, r1, r8, lsr fp
   19804:	andeq	r9, r1, r8, lsr fp
   19808:	andeq	r9, r1, r4, lsr #21
   1980c:	andeq	r9, r1, r8, lsr fp
   19810:	strdeq	r9, [r1], -r8
   19814:	andeq	r9, r1, r8, lsr fp
   19818:	andeq	r9, r1, r8, lsr fp
   1981c:	andeq	r9, r1, r8, lsr fp
   19820:	andeq	r9, r1, ip, lsl #21
   19824:	andeq	r9, r1, r8, lsr fp
   19828:	andeq	r9, r1, r0, ror #20
   1982c:	andeq	r9, r1, r8, lsr fp
   19830:	andeq	r9, r1, r8, lsr fp
   19834:	andeq	r9, r1, r0, lsr #20
   19838:	andeq	r9, r1, r8, lsr fp
   1983c:	andeq	r9, r1, r8, lsr fp
   19840:	andeq	r9, r1, r8, lsr fp
   19844:	andeq	r9, r1, r0, ror #19
   19848:	andeq	r9, r1, r8, lsr fp
   1984c:	andeq	r9, r1, r8, lsr fp
   19850:	andeq	r9, r1, r8, lsr fp
   19854:	andeq	r9, r1, r8, lsr fp
   19858:	andeq	r9, r1, r0, lsr #19
   1985c:	andeq	r9, r1, r0, ror #18
   19860:	andeq	r9, r1, r8, lsr fp
   19864:	andeq	r9, r1, r8, lsr fp
   19868:	andeq	r9, r1, r8, lsr fp
   1986c:	andeq	r9, r1, r8, lsr fp
   19870:	andeq	r9, r1, r8, lsr fp
   19874:	andeq	r9, r1, r8, lsr fp
   19878:	andeq	r9, r1, r8, lsr fp
   1987c:	andeq	r9, r1, r4, asr #18
   19880:	andeq	r9, r1, ip, lsr r9
   19884:	andeq	r9, r1, r8, lsr fp
   19888:	andeq	r9, r1, r8, lsr fp
   1988c:	andeq	r9, r1, r8, lsr fp
   19890:	strdeq	r9, [r1], -r8
   19894:	andeq	r9, r1, r8, lsr fp
   19898:	andeq	r9, r1, r8, lsr fp
   1989c:	andeq	r9, r1, r8, lsr fp
   198a0:	andeq	r9, r1, ip, lsl #21
   198a4:	andeq	r9, r1, r8, lsr fp
   198a8:	andeq	r9, r1, r0, ror #20
   198ac:	andeq	r9, r1, r8, lsr fp
   198b0:	andeq	r9, r1, r8, lsr fp
   198b4:	andeq	r9, r1, r8, lsr fp
   198b8:	andeq	r9, r1, r8, lsr fp
   198bc:	andeq	r9, r1, r8, lsr fp
   198c0:	andeq	r9, r1, r8, lsr fp
   198c4:	andeq	r9, r1, r0, ror #19
   198c8:	andeq	r9, r1, r8, lsr fp
   198cc:	andeq	r9, r1, r8, lsr fp
   198d0:	andeq	r9, r1, r0, lsl r9
   198d4:	mov	r1, #48	; 0x30
   198d8:	ldr	r0, [sp, #48]	; 0x30
   198dc:	bl	113fc <strchr@plt>
   198e0:	cmp	r0, #0
   198e4:	beq	197e4 <__assert_fail@plt+0x8244>
   198e8:	ldrb	r3, [sl, #1]
   198ec:	cmp	r3, #68	; 0x44
   198f0:	beq	19904 <__assert_fail@plt+0x8364>
   198f4:	cmp	r3, #105	; 0x69
   198f8:	beq	19b44 <__assert_fail@plt+0x85a4>
   198fc:	cmp	r3, #66	; 0x42
   19900:	bne	197e4 <__assert_fail@plt+0x8244>
   19904:	mov	fp, #2
   19908:	mov	r7, #1000	; 0x3e8
   1990c:	b	197ec <__assert_fail@plt+0x824c>
   19910:	cmp	r9, #0
   19914:	blt	19954 <__assert_fail@plt+0x83b4>
   19918:	lsl	r9, r9, #1
   1991c:	mov	r2, #0
   19920:	add	r3, sl, fp
   19924:	str	r3, [r6]
   19928:	ldrb	r3, [sl, fp]
   1992c:	orr	r4, r4, r2
   19930:	cmp	r3, #0
   19934:	orrne	r4, r4, #2
   19938:	b	196b0 <__assert_fail@plt+0x8110>
   1993c:	mov	r2, #0
   19940:	b	19920 <__assert_fail@plt+0x8380>
   19944:	cmp	r9, #8388608	; 0x800000
   19948:	lslcc	r9, r9, #9
   1994c:	movcc	r2, #0
   19950:	bcc	19920 <__assert_fail@plt+0x8380>
   19954:	mvn	r9, #0
   19958:	mov	r2, #1
   1995c:	b	19920 <__assert_fail@plt+0x8380>
   19960:	mov	r1, r7
   19964:	mvn	r0, #0
   19968:	bl	1a4fc <__assert_fail@plt+0x8f5c>
   1996c:	mov	r2, #0
   19970:	mov	lr, r2
   19974:	mov	r3, #7
   19978:	mov	ip, #1
   1997c:	cmp	r0, r9
   19980:	movcs	r1, lr
   19984:	movcc	r1, ip
   19988:	mulcs	r9, r7, r9
   1998c:	mvncc	r9, #0
   19990:	subs	r3, r3, #1
   19994:	orr	r2, r2, r1
   19998:	bne	1997c <__assert_fail@plt+0x83dc>
   1999c:	b	19920 <__assert_fail@plt+0x8380>
   199a0:	mov	r1, r7
   199a4:	mvn	r0, #0
   199a8:	bl	1a4fc <__assert_fail@plt+0x8f5c>
   199ac:	mov	r2, #0
   199b0:	mov	lr, r2
   199b4:	mov	r3, #8
   199b8:	mov	ip, #1
   199bc:	cmp	r0, r9
   199c0:	movcs	r1, lr
   199c4:	movcc	r1, ip
   199c8:	mulcs	r9, r7, r9
   199cc:	mvncc	r9, #0
   199d0:	subs	r3, r3, #1
   199d4:	orr	r2, r2, r1
   199d8:	bne	199bc <__assert_fail@plt+0x841c>
   199dc:	b	19920 <__assert_fail@plt+0x8380>
   199e0:	mov	r1, r7
   199e4:	mvn	r0, #0
   199e8:	bl	1a4fc <__assert_fail@plt+0x8f5c>
   199ec:	mov	r2, #0
   199f0:	mov	lr, r2
   199f4:	mov	r3, #4
   199f8:	mov	ip, #1
   199fc:	cmp	r0, r9
   19a00:	movcs	r1, lr
   19a04:	movcc	r1, ip
   19a08:	mulcs	r9, r7, r9
   19a0c:	mvncc	r9, #0
   19a10:	subs	r3, r3, #1
   19a14:	orr	r2, r2, r1
   19a18:	bne	199fc <__assert_fail@plt+0x845c>
   19a1c:	b	19920 <__assert_fail@plt+0x8380>
   19a20:	mov	r1, r7
   19a24:	mvn	r0, #0
   19a28:	bl	1a4fc <__assert_fail@plt+0x8f5c>
   19a2c:	mov	r2, #0
   19a30:	mov	lr, r2
   19a34:	mov	r3, #5
   19a38:	mov	ip, #1
   19a3c:	cmp	r9, r0
   19a40:	movls	r1, lr
   19a44:	movhi	r1, ip
   19a48:	mulls	r9, r7, r9
   19a4c:	mvnhi	r9, #0
   19a50:	subs	r3, r3, #1
   19a54:	orr	r2, r2, r1
   19a58:	bne	19a3c <__assert_fail@plt+0x849c>
   19a5c:	b	19920 <__assert_fail@plt+0x8380>
   19a60:	mov	r1, r7
   19a64:	mvn	r0, #0
   19a68:	bl	1a4fc <__assert_fail@plt+0x8f5c>
   19a6c:	cmp	r9, r0
   19a70:	bhi	19b5c <__assert_fail@plt+0x85bc>
   19a74:	mul	r9, r7, r9
   19a78:	cmp	r0, r9
   19a7c:	bcc	19b5c <__assert_fail@plt+0x85bc>
   19a80:	mul	r9, r7, r9
   19a84:	mov	r2, #0
   19a88:	b	19920 <__assert_fail@plt+0x8380>
   19a8c:	mov	r1, r7
   19a90:	mvn	r0, #0
   19a94:	bl	1a4fc <__assert_fail@plt+0x8f5c>
   19a98:	cmp	r9, r0
   19a9c:	bhi	19954 <__assert_fail@plt+0x83b4>
   19aa0:	b	19a80 <__assert_fail@plt+0x84e0>
   19aa4:	mov	r1, r7
   19aa8:	mvn	r0, #0
   19aac:	bl	1a4fc <__assert_fail@plt+0x8f5c>
   19ab0:	mov	r2, #0
   19ab4:	mov	lr, r2
   19ab8:	mov	r3, #6
   19abc:	mov	ip, #1
   19ac0:	cmp	r9, r0
   19ac4:	movls	r1, lr
   19ac8:	movhi	r1, ip
   19acc:	mulls	r9, r7, r9
   19ad0:	mvnhi	r9, #0
   19ad4:	subs	r3, r3, #1
   19ad8:	orr	r2, r2, r1
   19adc:	bne	19ac0 <__assert_fail@plt+0x8520>
   19ae0:	b	19920 <__assert_fail@plt+0x8380>
   19ae4:	cmp	r9, #4194304	; 0x400000
   19ae8:	lslcc	r9, r9, #10
   19aec:	movcc	r2, #0
   19af0:	bcc	19920 <__assert_fail@plt+0x8380>
   19af4:	b	19954 <__assert_fail@plt+0x83b4>
   19af8:	mov	r1, r7
   19afc:	mvn	r0, #0
   19b00:	bl	1a4fc <__assert_fail@plt+0x8f5c>
   19b04:	mov	r2, #0
   19b08:	mov	lr, r2
   19b0c:	mov	r3, #3
   19b10:	mov	ip, #1
   19b14:	cmp	r9, r0
   19b18:	movls	r1, lr
   19b1c:	movhi	r1, ip
   19b20:	mulls	r9, r7, r9
   19b24:	mvnhi	r9, #0
   19b28:	subs	r3, r3, #1
   19b2c:	orr	r2, r2, r1
   19b30:	bne	19b14 <__assert_fail@plt+0x8574>
   19b34:	b	19920 <__assert_fail@plt+0x8380>
   19b38:	str	r9, [r8]
   19b3c:	orr	r4, r4, #2
   19b40:	b	19660 <__assert_fail@plt+0x80c0>
   19b44:	ldrb	fp, [sl, #2]
   19b48:	mov	r7, #1024	; 0x400
   19b4c:	cmp	fp, #66	; 0x42
   19b50:	movne	fp, #1
   19b54:	moveq	fp, #3
   19b58:	b	197ec <__assert_fail@plt+0x824c>
   19b5c:	mov	r2, #1
   19b60:	mvn	r9, #0
   19b64:	b	19920 <__assert_fail@plt+0x8380>
   19b68:	ldr	r3, [pc, #12]	; 19b7c <__assert_fail@plt+0x85dc>
   19b6c:	mov	r2, #84	; 0x54
   19b70:	ldr	r1, [pc, #8]	; 19b80 <__assert_fail@plt+0x85e0>
   19b74:	ldr	r0, [pc, #8]	; 19b84 <__assert_fail@plt+0x85e4>
   19b78:	bl	115a0 <__assert_fail@plt>
   19b7c:	andeq	ip, r1, ip, lsl #26
   19b80:	andeq	ip, r1, r8, lsl sp
   19b84:	andeq	ip, r1, r4, lsr #26
   19b88:	cmp	r1, #0
   19b8c:	cmpne	r0, #0
   19b90:	moveq	r1, #1
   19b94:	moveq	r0, r1
   19b98:	umull	r2, r3, r0, r1
   19b9c:	adds	r3, r3, #0
   19ba0:	movne	r3, #1
   19ba4:	cmp	r2, #0
   19ba8:	blt	19bb8 <__assert_fail@plt+0x8618>
   19bac:	cmp	r3, #0
   19bb0:	bne	19bb8 <__assert_fail@plt+0x8618>
   19bb4:	b	111c8 <calloc@plt>
   19bb8:	push	{r4, lr}
   19bbc:	bl	11420 <__errno_location@plt>
   19bc0:	mov	r3, #12
   19bc4:	str	r3, [r0]
   19bc8:	mov	r0, #0
   19bcc:	pop	{r4, pc}
   19bd0:	push	{r1, r2, r3}
   19bd4:	push	{r4, r5, r6, r7, lr}
   19bd8:	sub	sp, sp, #8
   19bdc:	add	r3, sp, #32
   19be0:	ldr	r1, [sp, #28]
   19be4:	str	r3, [sp, #4]
   19be8:	cmp	r1, #0
   19bec:	beq	19c84 <__assert_fail@plt+0x86e4>
   19bf0:	ldr	r2, [pc, #412]	; 19d94 <__assert_fail@plt+0x87f4>
   19bf4:	mov	r5, r0
   19bf8:	cmp	r1, r2
   19bfc:	bne	19c48 <__assert_fail@plt+0x86a8>
   19c00:	ldr	r6, [pc, #400]	; 19d98 <__assert_fail@plt+0x87f8>
   19c04:	ldr	r7, [r3]
   19c08:	add	r2, sp, #36	; 0x24
   19c0c:	ldr	r3, [r6]
   19c10:	str	r2, [sp, #4]
   19c14:	cmp	r3, #0
   19c18:	mov	r2, r7
   19c1c:	blt	19d48 <__assert_fail@plt+0x87a8>
   19c20:	bl	114b0 <fcntl64@plt>
   19c24:	subs	r4, r0, #0
   19c28:	blt	19ccc <__assert_fail@plt+0x872c>
   19c2c:	mov	r3, #1
   19c30:	str	r3, [r6]
   19c34:	mov	r0, r4
   19c38:	add	sp, sp, #8
   19c3c:	pop	{r4, r5, r6, r7, lr}
   19c40:	add	sp, sp, #12
   19c44:	bx	lr
   19c48:	cmp	r1, #11
   19c4c:	beq	19c74 <__assert_fail@plt+0x86d4>
   19c50:	bgt	19c94 <__assert_fail@plt+0x86f4>
   19c54:	cmp	r1, #3
   19c58:	beq	19c74 <__assert_fail@plt+0x86d4>
   19c5c:	ble	19d88 <__assert_fail@plt+0x87e8>
   19c60:	cmp	r1, #8
   19c64:	beq	19cb4 <__assert_fail@plt+0x8714>
   19c68:	ble	19cb4 <__assert_fail@plt+0x8714>
   19c6c:	cmp	r1, #9
   19c70:	bne	19cb4 <__assert_fail@plt+0x8714>
   19c74:	mov	r0, r5
   19c78:	bl	114b0 <fcntl64@plt>
   19c7c:	mov	r4, r0
   19c80:	b	19c34 <__assert_fail@plt+0x8694>
   19c84:	ldr	r2, [sp, #32]
   19c88:	bl	114b0 <fcntl64@plt>
   19c8c:	mov	r4, r0
   19c90:	b	19c34 <__assert_fail@plt+0x8694>
   19c94:	ldr	r3, [pc, #256]	; 19d9c <__assert_fail@plt+0x87fc>
   19c98:	cmp	r1, r3
   19c9c:	bgt	19d68 <__assert_fail@plt+0x87c8>
   19ca0:	cmp	r1, r2
   19ca4:	bge	19cb4 <__assert_fail@plt+0x8714>
   19ca8:	sub	r3, r3, #6
   19cac:	cmp	r1, r3
   19cb0:	beq	19c74 <__assert_fail@plt+0x86d4>
   19cb4:	ldr	r3, [sp, #4]
   19cb8:	mov	r0, r5
   19cbc:	ldr	r2, [r3]
   19cc0:	bl	114b0 <fcntl64@plt>
   19cc4:	mov	r4, r0
   19cc8:	b	19c34 <__assert_fail@plt+0x8694>
   19ccc:	bl	11420 <__errno_location@plt>
   19cd0:	ldr	r3, [r0]
   19cd4:	cmp	r3, #22
   19cd8:	bne	19c2c <__assert_fail@plt+0x868c>
   19cdc:	mov	r2, r7
   19ce0:	mov	r0, r5
   19ce4:	mov	r1, #0
   19ce8:	bl	114b0 <fcntl64@plt>
   19cec:	subs	r4, r0, #0
   19cf0:	blt	19c34 <__assert_fail@plt+0x8694>
   19cf4:	mvn	r3, #0
   19cf8:	str	r3, [r6]
   19cfc:	mov	r1, #1
   19d00:	mov	r0, r4
   19d04:	bl	114b0 <fcntl64@plt>
   19d08:	subs	r2, r0, #0
   19d0c:	blt	19d28 <__assert_fail@plt+0x8788>
   19d10:	orr	r2, r2, #1
   19d14:	mov	r1, #2
   19d18:	mov	r0, r4
   19d1c:	bl	114b0 <fcntl64@plt>
   19d20:	cmn	r0, #1
   19d24:	bne	19c34 <__assert_fail@plt+0x8694>
   19d28:	bl	11420 <__errno_location@plt>
   19d2c:	mov	r5, r0
   19d30:	mov	r0, r4
   19d34:	ldr	r6, [r5]
   19d38:	mvn	r4, #0
   19d3c:	bl	11588 <close@plt>
   19d40:	str	r6, [r5]
   19d44:	b	19c34 <__assert_fail@plt+0x8694>
   19d48:	mov	r1, #0
   19d4c:	bl	114b0 <fcntl64@plt>
   19d50:	subs	r4, r0, #0
   19d54:	blt	19c34 <__assert_fail@plt+0x8694>
   19d58:	ldr	r3, [r6]
   19d5c:	cmn	r3, #1
   19d60:	beq	19cfc <__assert_fail@plt+0x875c>
   19d64:	b	19c34 <__assert_fail@plt+0x8694>
   19d68:	ldr	r3, [pc, #48]	; 19da0 <__assert_fail@plt+0x8800>
   19d6c:	cmp	r1, r3
   19d70:	beq	19cb4 <__assert_fail@plt+0x8714>
   19d74:	blt	19c74 <__assert_fail@plt+0x86d4>
   19d78:	add	r3, r3, #1
   19d7c:	cmp	r1, r3
   19d80:	bne	19cb4 <__assert_fail@plt+0x8714>
   19d84:	b	19c74 <__assert_fail@plt+0x86d4>
   19d88:	cmp	r1, #1
   19d8c:	bne	19cb4 <__assert_fail@plt+0x8714>
   19d90:	b	19c74 <__assert_fail@plt+0x86d4>
   19d94:	andeq	r0, r0, r6, lsl #8
   19d98:	andeq	sp, r2, r8, ror #7
   19d9c:	andeq	r0, r0, r7, lsl #8
   19da0:	andeq	r0, r0, r9, lsl #8
   19da4:	push	{r4, lr}
   19da8:	subs	r4, r0, #0
   19dac:	sub	sp, sp, #8
   19db0:	beq	19dcc <__assert_fail@plt+0x882c>
   19db4:	bl	1139c <__freading@plt>
   19db8:	cmp	r0, #0
   19dbc:	beq	19dcc <__assert_fail@plt+0x882c>
   19dc0:	ldr	r3, [r4]
   19dc4:	tst	r3, #256	; 0x100
   19dc8:	bne	19ddc <__assert_fail@plt+0x883c>
   19dcc:	mov	r0, r4
   19dd0:	add	sp, sp, #8
   19dd4:	pop	{r4, lr}
   19dd8:	b	11210 <fflush@plt>
   19ddc:	mov	r3, #1
   19de0:	str	r3, [sp]
   19de4:	mov	r2, #0
   19de8:	mov	r3, #0
   19dec:	mov	r0, r4
   19df0:	bl	19e98 <__assert_fail@plt+0x88f8>
   19df4:	mov	r0, r4
   19df8:	add	sp, sp, #8
   19dfc:	pop	{r4, lr}
   19e00:	b	11210 <fflush@plt>
   19e04:	ldr	r2, [r0, #20]
   19e08:	ldr	r3, [r0, #16]
   19e0c:	cmp	r2, r3
   19e10:	bhi	19e38 <__assert_fail@plt+0x8898>
   19e14:	ldr	r3, [r0]
   19e18:	ldmib	r0, {r1, r2}
   19e1c:	ands	r3, r3, #256	; 0x100
   19e20:	ldrne	r3, [r0, #44]	; 0x2c
   19e24:	ldrne	r0, [r0, #36]	; 0x24
   19e28:	sub	r2, r2, r1
   19e2c:	subne	r3, r3, r0
   19e30:	add	r0, r3, r2
   19e34:	bx	lr
   19e38:	mov	r0, #0
   19e3c:	bx	lr
   19e40:	push	{r4, r5, lr}
   19e44:	sub	sp, sp, #12
   19e48:	mov	r5, r0
   19e4c:	bl	11420 <__errno_location@plt>
   19e50:	mov	r2, #0
   19e54:	mov	r4, r0
   19e58:	ldr	r3, [r0]
   19e5c:	str	r2, [r4]
   19e60:	mov	r0, r5
   19e64:	str	r3, [sp]
   19e68:	str	r3, [sp, #4]
   19e6c:	bl	11228 <free@plt>
   19e70:	ldr	r3, [r4]
   19e74:	add	r2, sp, #8
   19e78:	cmp	r3, #0
   19e7c:	moveq	r3, #4
   19e80:	movne	r3, #0
   19e84:	add	r3, r2, r3
   19e88:	ldr	r3, [r3, #-8]
   19e8c:	str	r3, [r4]
   19e90:	add	sp, sp, #12
   19e94:	pop	{r4, r5, pc}
   19e98:	push	{r4, r5, r6, r7, r8, lr}
   19e9c:	sub	sp, sp, #8
   19ea0:	ldmib	r0, {ip, lr}
   19ea4:	mov	r4, r0
   19ea8:	ldr	r5, [sp, #32]
   19eac:	cmp	lr, ip
   19eb0:	beq	19ec8 <__assert_fail@plt+0x8928>
   19eb4:	str	r5, [sp, #32]
   19eb8:	mov	r0, r4
   19ebc:	add	sp, sp, #8
   19ec0:	pop	{r4, r5, r6, r7, r8, lr}
   19ec4:	b	114a4 <fseeko64@plt>
   19ec8:	ldr	lr, [r0, #20]
   19ecc:	ldr	ip, [r0, #16]
   19ed0:	cmp	lr, ip
   19ed4:	bne	19eb4 <__assert_fail@plt+0x8914>
   19ed8:	ldr	r8, [r0, #36]	; 0x24
   19edc:	cmp	r8, #0
   19ee0:	bne	19eb4 <__assert_fail@plt+0x8914>
   19ee4:	mov	r6, r2
   19ee8:	mov	r7, r3
   19eec:	bl	11468 <fileno@plt>
   19ef0:	mov	r2, r6
   19ef4:	mov	r3, r7
   19ef8:	str	r5, [sp]
   19efc:	bl	1130c <lseek64@plt>
   19f00:	mvn	r3, #0
   19f04:	mvn	r2, #0
   19f08:	cmp	r1, r3
   19f0c:	cmpeq	r0, r2
   19f10:	beq	19f30 <__assert_fail@plt+0x8990>
   19f14:	ldr	r3, [r4]
   19f18:	strd	r0, [r4, #80]	; 0x50
   19f1c:	mov	r0, r8
   19f20:	bic	r3, r3, #16
   19f24:	str	r3, [r4]
   19f28:	add	sp, sp, #8
   19f2c:	pop	{r4, r5, r6, r7, r8, pc}
   19f30:	mvn	r0, #0
   19f34:	b	19f28 <__assert_fail@plt+0x8988>
   19f38:	cmp	r0, #0
   19f3c:	moveq	r0, #1
   19f40:	cmp	r0, #0
   19f44:	blt	19f4c <__assert_fail@plt+0x89ac>
   19f48:	b	11384 <malloc@plt>
   19f4c:	push	{r4, lr}
   19f50:	bl	11420 <__errno_location@plt>
   19f54:	mov	r3, #12
   19f58:	str	r3, [r0]
   19f5c:	mov	r0, #0
   19f60:	pop	{r4, pc}
   19f64:	push	{r4, r5, r6, r7, lr}
   19f68:	subs	r6, r0, #0
   19f6c:	sub	sp, sp, #12
   19f70:	addeq	r6, sp, #4
   19f74:	mov	r0, r6
   19f78:	mov	r5, r2
   19f7c:	mov	r7, r1
   19f80:	bl	11348 <mbrtowc@plt>
   19f84:	cmp	r5, #0
   19f88:	cmnne	r0, #3
   19f8c:	mov	r4, r0
   19f90:	bls	19fac <__assert_fail@plt+0x8a0c>
   19f94:	mov	r0, #0
   19f98:	bl	1a0e0 <__assert_fail@plt+0x8b40>
   19f9c:	cmp	r0, #0
   19fa0:	moveq	r4, #1
   19fa4:	ldrbeq	r3, [r7]
   19fa8:	streq	r3, [r6]
   19fac:	mov	r0, r4
   19fb0:	add	sp, sp, #12
   19fb4:	pop	{r4, r5, r6, r7, pc}
   19fb8:	cmp	r0, #0
   19fbc:	beq	19fe0 <__assert_fail@plt+0x8a40>
   19fc0:	cmp	r1, #0
   19fc4:	push	{lr}		; (str lr, [sp, #-4]!)
   19fc8:	sub	sp, sp, #12
   19fcc:	beq	19fe8 <__assert_fail@plt+0x8a48>
   19fd0:	blt	1a000 <__assert_fail@plt+0x8a60>
   19fd4:	add	sp, sp, #12
   19fd8:	pop	{lr}		; (ldr lr, [sp], #4)
   19fdc:	b	112b8 <realloc@plt>
   19fe0:	mov	r0, r1
   19fe4:	b	19f38 <__assert_fail@plt+0x8998>
   19fe8:	str	r1, [sp, #4]
   19fec:	bl	19e40 <__assert_fail@plt+0x88a0>
   19ff0:	ldr	r3, [sp, #4]
   19ff4:	mov	r0, r3
   19ff8:	add	sp, sp, #12
   19ffc:	pop	{pc}		; (ldr pc, [sp], #4)
   1a000:	bl	11420 <__errno_location@plt>
   1a004:	mov	r2, #12
   1a008:	mov	r3, #0
   1a00c:	str	r2, [r0]
   1a010:	b	19ff4 <__assert_fail@plt+0x8a54>
   1a014:	push	{r4, r5, r6, lr}
   1a018:	subs	r4, r2, #0
   1a01c:	mov	r6, r0
   1a020:	mov	r5, r1
   1a024:	beq	1a050 <__assert_fail@plt+0x8ab0>
   1a028:	mov	r1, r4
   1a02c:	mvn	r0, #0
   1a030:	bl	1a4fc <__assert_fail@plt+0x8f5c>
   1a034:	cmp	r0, r5
   1a038:	bcs	1a050 <__assert_fail@plt+0x8ab0>
   1a03c:	bl	11420 <__errno_location@plt>
   1a040:	mov	r3, #12
   1a044:	str	r3, [r0]
   1a048:	mov	r0, #0
   1a04c:	pop	{r4, r5, r6, pc}
   1a050:	mul	r1, r5, r4
   1a054:	mov	r0, r6
   1a058:	pop	{r4, r5, r6, lr}
   1a05c:	b	19fb8 <__assert_fail@plt+0x8a18>
   1a060:	push	{r4, r5, r6, lr}
   1a064:	mov	r4, r0
   1a068:	bl	1133c <__fpending@plt>
   1a06c:	mov	r6, r0
   1a070:	mov	r0, r4
   1a074:	bl	11234 <ferror@plt>
   1a078:	mov	r5, r0
   1a07c:	mov	r0, r4
   1a080:	bl	11480 <fclose@plt>
   1a084:	cmp	r5, #0
   1a088:	mov	r4, r0
   1a08c:	bne	1a0ac <__assert_fail@plt+0x8b0c>
   1a090:	cmp	r0, #0
   1a094:	beq	1a0a4 <__assert_fail@plt+0x8b04>
   1a098:	cmp	r6, #0
   1a09c:	beq	1a0c8 <__assert_fail@plt+0x8b28>
   1a0a0:	mvn	r4, #0
   1a0a4:	mov	r0, r4
   1a0a8:	pop	{r4, r5, r6, pc}
   1a0ac:	cmp	r0, #0
   1a0b0:	bne	1a0a0 <__assert_fail@plt+0x8b00>
   1a0b4:	bl	11420 <__errno_location@plt>
   1a0b8:	str	r4, [r0]
   1a0bc:	mvn	r4, #0
   1a0c0:	mov	r0, r4
   1a0c4:	pop	{r4, r5, r6, pc}
   1a0c8:	bl	11420 <__errno_location@plt>
   1a0cc:	ldr	r4, [r0]
   1a0d0:	subs	r4, r4, #9
   1a0d4:	mvnne	r4, #0
   1a0d8:	mov	r0, r4
   1a0dc:	pop	{r4, r5, r6, pc}
   1a0e0:	push	{lr}		; (str lr, [sp, #-4]!)
   1a0e4:	sub	sp, sp, #268	; 0x10c
   1a0e8:	add	r1, sp, #4
   1a0ec:	ldr	r2, [pc, #60]	; 1a130 <__assert_fail@plt+0x8b90>
   1a0f0:	bl	1a458 <__assert_fail@plt+0x8eb8>
   1a0f4:	cmp	r0, #0
   1a0f8:	movne	r0, #0
   1a0fc:	bne	1a128 <__assert_fail@plt+0x8b88>
   1a100:	ldr	r1, [pc, #44]	; 1a134 <__assert_fail@plt+0x8b94>
   1a104:	add	r0, sp, #4
   1a108:	bl	111e0 <strcmp@plt>
   1a10c:	cmp	r0, #0
   1a110:	beq	1a128 <__assert_fail@plt+0x8b88>
   1a114:	add	r0, sp, #4
   1a118:	ldr	r1, [pc, #24]	; 1a138 <__assert_fail@plt+0x8b98>
   1a11c:	bl	111e0 <strcmp@plt>
   1a120:	adds	r0, r0, #0
   1a124:	movne	r0, #1
   1a128:	add	sp, sp, #268	; 0x10c
   1a12c:	pop	{pc}		; (ldr pc, [sp], #4)
   1a130:	andeq	r0, r0, r1, lsl #2
   1a134:	andeq	ip, r1, ip, asr #26
   1a138:	andeq	ip, r1, r0, asr sp
   1a13c:	push	{r4, lr}
   1a140:	mov	r0, #14
   1a144:	bl	114ec <nl_langinfo@plt>
   1a148:	cmp	r0, #0
   1a14c:	beq	1a164 <__assert_fail@plt+0x8bc4>
   1a150:	ldrb	r2, [r0]
   1a154:	ldr	r3, [pc, #16]	; 1a16c <__assert_fail@plt+0x8bcc>
   1a158:	cmp	r2, #0
   1a15c:	moveq	r0, r3
   1a160:	pop	{r4, pc}
   1a164:	ldr	r0, [pc]	; 1a16c <__assert_fail@plt+0x8bcc>
   1a168:	pop	{r4, pc}
   1a16c:	andeq	ip, r1, r8, asr sp
   1a170:	cmn	r0, #-2147483631	; 0x80000011
   1a174:	bls	1a180 <__assert_fail@plt+0x8be0>
   1a178:	mov	r0, #0
   1a17c:	bx	lr
   1a180:	push	{r4, lr}
   1a184:	add	r0, r0, #16
   1a188:	bl	11384 <malloc@plt>
   1a18c:	cmp	r0, #0
   1a190:	beq	1a1b8 <__assert_fail@plt+0x8c18>
   1a194:	cmn	r0, #9
   1a198:	addls	r3, r0, #8
   1a19c:	bicls	r2, r3, #15
   1a1a0:	movhi	r2, #0
   1a1a4:	rsb	r3, r0, #8
   1a1a8:	add	r3, r3, r2
   1a1ac:	add	r0, r0, r3
   1a1b0:	strb	r3, [r0, #-1]
   1a1b4:	pop	{r4, pc}
   1a1b8:	mov	r0, #0
   1a1bc:	pop	{r4, pc}
   1a1c0:	tst	r0, #7
   1a1c4:	bne	1a1dc <__assert_fail@plt+0x8c3c>
   1a1c8:	tst	r0, #8
   1a1cc:	bxeq	lr
   1a1d0:	ldrb	r3, [r0, #-1]
   1a1d4:	sub	r0, r0, r3
   1a1d8:	b	19e40 <__assert_fail@plt+0x88a0>
   1a1dc:	push	{r4, lr}
   1a1e0:	bl	11570 <abort@plt>
   1a1e4:	push	{r4, lr}
   1a1e8:	mov	r4, r0
   1a1ec:	bl	1121c <wcwidth@plt>
   1a1f0:	cmp	r0, #0
   1a1f4:	popge	{r4, pc}
   1a1f8:	mov	r0, r4
   1a1fc:	bl	112d0 <iswcntrl@plt>
   1a200:	clz	r0, r0
   1a204:	lsr	r0, r0, #5
   1a208:	pop	{r4, pc}
   1a20c:	mov	r3, r1
   1a210:	push	{r4, r5, r6, lr}
   1a214:	mov	r4, r1
   1a218:	ldr	r1, [r3], #16
   1a21c:	mov	r5, r0
   1a220:	cmp	r1, r3
   1a224:	strne	r1, [r0]
   1a228:	beq	1a24c <__assert_fail@plt+0x8cac>
   1a22c:	ldrb	r3, [r4, #8]
   1a230:	ldr	r2, [r4, #4]
   1a234:	cmp	r3, #0
   1a238:	strb	r3, [r5, #8]
   1a23c:	ldrne	r3, [r4, #12]
   1a240:	str	r2, [r5, #4]
   1a244:	strne	r3, [r5, #12]
   1a248:	pop	{r4, r5, r6, pc}
   1a24c:	add	r3, r0, #16
   1a250:	mov	r0, r3
   1a254:	ldr	r2, [r4, #4]
   1a258:	bl	1124c <memcpy@plt>
   1a25c:	str	r0, [r5]
   1a260:	b	1a22c <__assert_fail@plt+0x8c8c>
   1a264:	ldr	r3, [pc, #20]	; 1a280 <__assert_fail@plt+0x8ce0>
   1a268:	lsr	r2, r0, #5
   1a26c:	and	r0, r0, #31
   1a270:	ldr	r3, [r3, r2, lsl #2]
   1a274:	lsr	r0, r3, r0
   1a278:	and	r0, r0, #1
   1a27c:	bx	lr
   1a280:	andeq	ip, r1, r0, ror #26
   1a284:	push	{r4, r5, r6, r7, r8, r9, lr}
   1a288:	sub	sp, sp, #60	; 0x3c
   1a28c:	mov	r9, r0
   1a290:	bl	11324 <__ctype_get_mb_cur_max@plt>
   1a294:	cmp	r0, #1
   1a298:	bls	1a400 <__assert_fail@plt+0x8e60>
   1a29c:	mov	r3, #0
   1a2a0:	ldr	r8, [pc, #408]	; 1a440 <__assert_fail@plt+0x8ea0>
   1a2a4:	mov	r5, r3
   1a2a8:	mov	r4, r9
   1a2ac:	mov	r6, r3
   1a2b0:	mov	r7, #1
   1a2b4:	str	r9, [sp, #16]
   1a2b8:	strb	r3, [sp]
   1a2bc:	str	r3, [sp, #4]
   1a2c0:	strb	r3, [sp, #12]
   1a2c4:	str	r3, [sp, #8]
   1a2c8:	ldrb	r3, [sp]
   1a2cc:	cmp	r3, #0
   1a2d0:	bne	1a328 <__assert_fail@plt+0x8d88>
   1a2d4:	ldrb	r3, [r4]
   1a2d8:	and	r2, r3, #31
   1a2dc:	lsr	r3, r3, #5
   1a2e0:	ldr	r3, [r8, r3, lsl #2]
   1a2e4:	lsr	r3, r3, r2
   1a2e8:	tst	r3, #1
   1a2ec:	beq	1a314 <__assert_fail@plt+0x8d74>
   1a2f0:	str	r7, [sp, #20]
   1a2f4:	ldrb	r4, [r4]
   1a2f8:	strb	r7, [sp, #24]
   1a2fc:	cmp	r4, #0
   1a300:	str	r4, [sp, #28]
   1a304:	bne	1a388 <__assert_fail@plt+0x8de8>
   1a308:	mov	r0, r5
   1a30c:	add	sp, sp, #60	; 0x3c
   1a310:	pop	{r4, r5, r6, r7, r8, r9, pc}
   1a314:	add	r0, sp, #4
   1a318:	bl	11264 <mbsinit@plt>
   1a31c:	cmp	r0, #0
   1a320:	beq	1a418 <__assert_fail@plt+0x8e78>
   1a324:	strb	r7, [sp]
   1a328:	bl	11324 <__ctype_get_mb_cur_max@plt>
   1a32c:	mov	r1, r0
   1a330:	mov	r0, r4
   1a334:	bl	18b04 <__assert_fail@plt+0x7564>
   1a338:	add	r3, sp, #4
   1a33c:	mov	r1, r4
   1a340:	mov	r2, r0
   1a344:	add	r0, sp, #28
   1a348:	bl	19f64 <__assert_fail@plt+0x89c4>
   1a34c:	cmn	r0, #1
   1a350:	str	r0, [sp, #20]
   1a354:	beq	1a3a4 <__assert_fail@plt+0x8e04>
   1a358:	cmn	r0, #2
   1a35c:	beq	1a3e8 <__assert_fail@plt+0x8e48>
   1a360:	cmp	r0, #0
   1a364:	beq	1a3b4 <__assert_fail@plt+0x8e14>
   1a368:	ldr	r4, [sp, #28]
   1a36c:	add	r0, sp, #4
   1a370:	strb	r7, [sp, #24]
   1a374:	bl	11264 <mbsinit@plt>
   1a378:	cmp	r0, #0
   1a37c:	strbne	r6, [sp]
   1a380:	cmp	r4, #0
   1a384:	beq	1a308 <__assert_fail@plt+0x8d68>
   1a388:	ldr	r4, [sp, #16]
   1a38c:	ldr	r3, [sp, #20]
   1a390:	add	r5, r5, #1
   1a394:	add	r4, r4, r3
   1a398:	strb	r6, [sp, #12]
   1a39c:	str	r4, [sp, #16]
   1a3a0:	b	1a2c8 <__assert_fail@plt+0x8d28>
   1a3a4:	str	r7, [sp, #20]
   1a3a8:	strb	r6, [sp, #24]
   1a3ac:	ldr	r4, [sp, #16]
   1a3b0:	b	1a38c <__assert_fail@plt+0x8dec>
   1a3b4:	ldr	r4, [sp, #16]
   1a3b8:	str	r7, [sp, #20]
   1a3bc:	ldrb	r3, [r4]
   1a3c0:	cmp	r3, #0
   1a3c4:	bne	1a42c <__assert_fail@plt+0x8e8c>
   1a3c8:	ldr	r4, [sp, #28]
   1a3cc:	cmp	r4, #0
   1a3d0:	beq	1a36c <__assert_fail@plt+0x8dcc>
   1a3d4:	ldr	r3, [pc, #104]	; 1a444 <__assert_fail@plt+0x8ea4>
   1a3d8:	mov	r2, #172	; 0xac
   1a3dc:	ldr	r1, [pc, #100]	; 1a448 <__assert_fail@plt+0x8ea8>
   1a3e0:	ldr	r0, [pc, #100]	; 1a44c <__assert_fail@plt+0x8eac>
   1a3e4:	bl	115a0 <__assert_fail@plt>
   1a3e8:	ldr	r4, [sp, #16]
   1a3ec:	mov	r0, r4
   1a3f0:	bl	113f0 <strlen@plt>
   1a3f4:	strb	r6, [sp, #24]
   1a3f8:	str	r0, [sp, #20]
   1a3fc:	b	1a38c <__assert_fail@plt+0x8dec>
   1a400:	mov	r0, r9
   1a404:	bl	113f0 <strlen@plt>
   1a408:	mov	r5, r0
   1a40c:	mov	r0, r5
   1a410:	add	sp, sp, #60	; 0x3c
   1a414:	pop	{r4, r5, r6, r7, r8, r9, pc}
   1a418:	ldr	r3, [pc, #36]	; 1a444 <__assert_fail@plt+0x8ea4>
   1a41c:	mov	r2, #143	; 0x8f
   1a420:	ldr	r1, [pc, #32]	; 1a448 <__assert_fail@plt+0x8ea8>
   1a424:	ldr	r0, [pc, #36]	; 1a450 <__assert_fail@plt+0x8eb0>
   1a428:	bl	115a0 <__assert_fail@plt>
   1a42c:	ldr	r3, [pc, #16]	; 1a444 <__assert_fail@plt+0x8ea4>
   1a430:	mov	r2, #171	; 0xab
   1a434:	ldr	r1, [pc, #12]	; 1a448 <__assert_fail@plt+0x8ea8>
   1a438:	ldr	r0, [pc, #20]	; 1a454 <__assert_fail@plt+0x8eb4>
   1a43c:	bl	115a0 <__assert_fail@plt>
   1a440:	andeq	ip, r1, r0, ror #26
   1a444:	andeq	ip, r1, r0, lsl #27
   1a448:	andeq	ip, r1, ip, lsl #17
   1a44c:	andeq	ip, r1, r8, asr #17
   1a450:	muleq	r1, r8, r8
   1a454:			; <UNDEFINED> instruction: 0x0001c8b0
   1a458:	push	{r4, r5, r6, lr}
   1a45c:	mov	r5, r1
   1a460:	mov	r1, #0
   1a464:	mov	r4, r2
   1a468:	bl	114bc <setlocale@plt>
   1a46c:	subs	r6, r0, #0
   1a470:	beq	1a4cc <__assert_fail@plt+0x8f2c>
   1a474:	bl	113f0 <strlen@plt>
   1a478:	cmp	r4, r0
   1a47c:	bhi	1a4b4 <__assert_fail@plt+0x8f14>
   1a480:	cmp	r4, #0
   1a484:	bne	1a490 <__assert_fail@plt+0x8ef0>
   1a488:	mov	r0, #34	; 0x22
   1a48c:	pop	{r4, r5, r6, pc}
   1a490:	sub	r4, r4, #1
   1a494:	mov	r1, r6
   1a498:	mov	r2, r4
   1a49c:	mov	r0, r5
   1a4a0:	bl	1124c <memcpy@plt>
   1a4a4:	mov	r3, #0
   1a4a8:	strb	r3, [r5, r4]
   1a4ac:	mov	r0, #34	; 0x22
   1a4b0:	pop	{r4, r5, r6, pc}
   1a4b4:	add	r2, r0, #1
   1a4b8:	mov	r1, r6
   1a4bc:	mov	r0, r5
   1a4c0:	bl	1124c <memcpy@plt>
   1a4c4:	mov	r0, #0
   1a4c8:	pop	{r4, r5, r6, pc}
   1a4cc:	cmp	r4, #0
   1a4d0:	beq	1a4e0 <__assert_fail@plt+0x8f40>
   1a4d4:	strb	r6, [r5]
   1a4d8:	mov	r0, #22
   1a4dc:	pop	{r4, r5, r6, pc}
   1a4e0:	mov	r0, #22
   1a4e4:	pop	{r4, r5, r6, pc}
   1a4e8:	mov	r1, #0
   1a4ec:	b	114bc <setlocale@plt>
   1a4f0:	mov	r2, #3
   1a4f4:	mov	r1, #0
   1a4f8:	b	19bd0 <__assert_fail@plt+0x8630>
   1a4fc:	subs	r2, r1, #1
   1a500:	bxeq	lr
   1a504:	bcc	1a6dc <__assert_fail@plt+0x913c>
   1a508:	cmp	r0, r1
   1a50c:	bls	1a6c0 <__assert_fail@plt+0x9120>
   1a510:	tst	r1, r2
   1a514:	beq	1a6cc <__assert_fail@plt+0x912c>
   1a518:	clz	r3, r0
   1a51c:	clz	r2, r1
   1a520:	sub	r3, r2, r3
   1a524:	rsbs	r3, r3, #31
   1a528:	addne	r3, r3, r3, lsl #1
   1a52c:	mov	r2, #0
   1a530:	addne	pc, pc, r3, lsl #2
   1a534:	nop			; (mov r0, r0)
   1a538:	cmp	r0, r1, lsl #31
   1a53c:	adc	r2, r2, r2
   1a540:	subcs	r0, r0, r1, lsl #31
   1a544:	cmp	r0, r1, lsl #30
   1a548:	adc	r2, r2, r2
   1a54c:	subcs	r0, r0, r1, lsl #30
   1a550:	cmp	r0, r1, lsl #29
   1a554:	adc	r2, r2, r2
   1a558:	subcs	r0, r0, r1, lsl #29
   1a55c:	cmp	r0, r1, lsl #28
   1a560:	adc	r2, r2, r2
   1a564:	subcs	r0, r0, r1, lsl #28
   1a568:	cmp	r0, r1, lsl #27
   1a56c:	adc	r2, r2, r2
   1a570:	subcs	r0, r0, r1, lsl #27
   1a574:	cmp	r0, r1, lsl #26
   1a578:	adc	r2, r2, r2
   1a57c:	subcs	r0, r0, r1, lsl #26
   1a580:	cmp	r0, r1, lsl #25
   1a584:	adc	r2, r2, r2
   1a588:	subcs	r0, r0, r1, lsl #25
   1a58c:	cmp	r0, r1, lsl #24
   1a590:	adc	r2, r2, r2
   1a594:	subcs	r0, r0, r1, lsl #24
   1a598:	cmp	r0, r1, lsl #23
   1a59c:	adc	r2, r2, r2
   1a5a0:	subcs	r0, r0, r1, lsl #23
   1a5a4:	cmp	r0, r1, lsl #22
   1a5a8:	adc	r2, r2, r2
   1a5ac:	subcs	r0, r0, r1, lsl #22
   1a5b0:	cmp	r0, r1, lsl #21
   1a5b4:	adc	r2, r2, r2
   1a5b8:	subcs	r0, r0, r1, lsl #21
   1a5bc:	cmp	r0, r1, lsl #20
   1a5c0:	adc	r2, r2, r2
   1a5c4:	subcs	r0, r0, r1, lsl #20
   1a5c8:	cmp	r0, r1, lsl #19
   1a5cc:	adc	r2, r2, r2
   1a5d0:	subcs	r0, r0, r1, lsl #19
   1a5d4:	cmp	r0, r1, lsl #18
   1a5d8:	adc	r2, r2, r2
   1a5dc:	subcs	r0, r0, r1, lsl #18
   1a5e0:	cmp	r0, r1, lsl #17
   1a5e4:	adc	r2, r2, r2
   1a5e8:	subcs	r0, r0, r1, lsl #17
   1a5ec:	cmp	r0, r1, lsl #16
   1a5f0:	adc	r2, r2, r2
   1a5f4:	subcs	r0, r0, r1, lsl #16
   1a5f8:	cmp	r0, r1, lsl #15
   1a5fc:	adc	r2, r2, r2
   1a600:	subcs	r0, r0, r1, lsl #15
   1a604:	cmp	r0, r1, lsl #14
   1a608:	adc	r2, r2, r2
   1a60c:	subcs	r0, r0, r1, lsl #14
   1a610:	cmp	r0, r1, lsl #13
   1a614:	adc	r2, r2, r2
   1a618:	subcs	r0, r0, r1, lsl #13
   1a61c:	cmp	r0, r1, lsl #12
   1a620:	adc	r2, r2, r2
   1a624:	subcs	r0, r0, r1, lsl #12
   1a628:	cmp	r0, r1, lsl #11
   1a62c:	adc	r2, r2, r2
   1a630:	subcs	r0, r0, r1, lsl #11
   1a634:	cmp	r0, r1, lsl #10
   1a638:	adc	r2, r2, r2
   1a63c:	subcs	r0, r0, r1, lsl #10
   1a640:	cmp	r0, r1, lsl #9
   1a644:	adc	r2, r2, r2
   1a648:	subcs	r0, r0, r1, lsl #9
   1a64c:	cmp	r0, r1, lsl #8
   1a650:	adc	r2, r2, r2
   1a654:	subcs	r0, r0, r1, lsl #8
   1a658:	cmp	r0, r1, lsl #7
   1a65c:	adc	r2, r2, r2
   1a660:	subcs	r0, r0, r1, lsl #7
   1a664:	cmp	r0, r1, lsl #6
   1a668:	adc	r2, r2, r2
   1a66c:	subcs	r0, r0, r1, lsl #6
   1a670:	cmp	r0, r1, lsl #5
   1a674:	adc	r2, r2, r2
   1a678:	subcs	r0, r0, r1, lsl #5
   1a67c:	cmp	r0, r1, lsl #4
   1a680:	adc	r2, r2, r2
   1a684:	subcs	r0, r0, r1, lsl #4
   1a688:	cmp	r0, r1, lsl #3
   1a68c:	adc	r2, r2, r2
   1a690:	subcs	r0, r0, r1, lsl #3
   1a694:	cmp	r0, r1, lsl #2
   1a698:	adc	r2, r2, r2
   1a69c:	subcs	r0, r0, r1, lsl #2
   1a6a0:	cmp	r0, r1, lsl #1
   1a6a4:	adc	r2, r2, r2
   1a6a8:	subcs	r0, r0, r1, lsl #1
   1a6ac:	cmp	r0, r1
   1a6b0:	adc	r2, r2, r2
   1a6b4:	subcs	r0, r0, r1
   1a6b8:	mov	r0, r2
   1a6bc:	bx	lr
   1a6c0:	moveq	r0, #1
   1a6c4:	movne	r0, #0
   1a6c8:	bx	lr
   1a6cc:	clz	r2, r1
   1a6d0:	rsb	r2, r2, #31
   1a6d4:	lsr	r0, r0, r2
   1a6d8:	bx	lr
   1a6dc:	cmp	r0, #0
   1a6e0:	mvnne	r0, #0
   1a6e4:	b	1a948 <__assert_fail@plt+0x93a8>
   1a6e8:	cmp	r1, #0
   1a6ec:	beq	1a6dc <__assert_fail@plt+0x913c>
   1a6f0:	push	{r0, r1, lr}
   1a6f4:	bl	1a4fc <__assert_fail@plt+0x8f5c>
   1a6f8:	pop	{r1, r2, lr}
   1a6fc:	mul	r3, r2, r0
   1a700:	sub	r1, r1, r3
   1a704:	bx	lr
   1a708:	cmp	r1, #0
   1a70c:	beq	1a918 <__assert_fail@plt+0x9378>
   1a710:	eor	ip, r0, r1
   1a714:	rsbmi	r1, r1, #0
   1a718:	subs	r2, r1, #1
   1a71c:	beq	1a8e4 <__assert_fail@plt+0x9344>
   1a720:	movs	r3, r0
   1a724:	rsbmi	r3, r0, #0
   1a728:	cmp	r3, r1
   1a72c:	bls	1a8f0 <__assert_fail@plt+0x9350>
   1a730:	tst	r1, r2
   1a734:	beq	1a900 <__assert_fail@plt+0x9360>
   1a738:	clz	r2, r3
   1a73c:	clz	r0, r1
   1a740:	sub	r2, r0, r2
   1a744:	rsbs	r2, r2, #31
   1a748:	addne	r2, r2, r2, lsl #1
   1a74c:	mov	r0, #0
   1a750:	addne	pc, pc, r2, lsl #2
   1a754:	nop			; (mov r0, r0)
   1a758:	cmp	r3, r1, lsl #31
   1a75c:	adc	r0, r0, r0
   1a760:	subcs	r3, r3, r1, lsl #31
   1a764:	cmp	r3, r1, lsl #30
   1a768:	adc	r0, r0, r0
   1a76c:	subcs	r3, r3, r1, lsl #30
   1a770:	cmp	r3, r1, lsl #29
   1a774:	adc	r0, r0, r0
   1a778:	subcs	r3, r3, r1, lsl #29
   1a77c:	cmp	r3, r1, lsl #28
   1a780:	adc	r0, r0, r0
   1a784:	subcs	r3, r3, r1, lsl #28
   1a788:	cmp	r3, r1, lsl #27
   1a78c:	adc	r0, r0, r0
   1a790:	subcs	r3, r3, r1, lsl #27
   1a794:	cmp	r3, r1, lsl #26
   1a798:	adc	r0, r0, r0
   1a79c:	subcs	r3, r3, r1, lsl #26
   1a7a0:	cmp	r3, r1, lsl #25
   1a7a4:	adc	r0, r0, r0
   1a7a8:	subcs	r3, r3, r1, lsl #25
   1a7ac:	cmp	r3, r1, lsl #24
   1a7b0:	adc	r0, r0, r0
   1a7b4:	subcs	r3, r3, r1, lsl #24
   1a7b8:	cmp	r3, r1, lsl #23
   1a7bc:	adc	r0, r0, r0
   1a7c0:	subcs	r3, r3, r1, lsl #23
   1a7c4:	cmp	r3, r1, lsl #22
   1a7c8:	adc	r0, r0, r0
   1a7cc:	subcs	r3, r3, r1, lsl #22
   1a7d0:	cmp	r3, r1, lsl #21
   1a7d4:	adc	r0, r0, r0
   1a7d8:	subcs	r3, r3, r1, lsl #21
   1a7dc:	cmp	r3, r1, lsl #20
   1a7e0:	adc	r0, r0, r0
   1a7e4:	subcs	r3, r3, r1, lsl #20
   1a7e8:	cmp	r3, r1, lsl #19
   1a7ec:	adc	r0, r0, r0
   1a7f0:	subcs	r3, r3, r1, lsl #19
   1a7f4:	cmp	r3, r1, lsl #18
   1a7f8:	adc	r0, r0, r0
   1a7fc:	subcs	r3, r3, r1, lsl #18
   1a800:	cmp	r3, r1, lsl #17
   1a804:	adc	r0, r0, r0
   1a808:	subcs	r3, r3, r1, lsl #17
   1a80c:	cmp	r3, r1, lsl #16
   1a810:	adc	r0, r0, r0
   1a814:	subcs	r3, r3, r1, lsl #16
   1a818:	cmp	r3, r1, lsl #15
   1a81c:	adc	r0, r0, r0
   1a820:	subcs	r3, r3, r1, lsl #15
   1a824:	cmp	r3, r1, lsl #14
   1a828:	adc	r0, r0, r0
   1a82c:	subcs	r3, r3, r1, lsl #14
   1a830:	cmp	r3, r1, lsl #13
   1a834:	adc	r0, r0, r0
   1a838:	subcs	r3, r3, r1, lsl #13
   1a83c:	cmp	r3, r1, lsl #12
   1a840:	adc	r0, r0, r0
   1a844:	subcs	r3, r3, r1, lsl #12
   1a848:	cmp	r3, r1, lsl #11
   1a84c:	adc	r0, r0, r0
   1a850:	subcs	r3, r3, r1, lsl #11
   1a854:	cmp	r3, r1, lsl #10
   1a858:	adc	r0, r0, r0
   1a85c:	subcs	r3, r3, r1, lsl #10
   1a860:	cmp	r3, r1, lsl #9
   1a864:	adc	r0, r0, r0
   1a868:	subcs	r3, r3, r1, lsl #9
   1a86c:	cmp	r3, r1, lsl #8
   1a870:	adc	r0, r0, r0
   1a874:	subcs	r3, r3, r1, lsl #8
   1a878:	cmp	r3, r1, lsl #7
   1a87c:	adc	r0, r0, r0
   1a880:	subcs	r3, r3, r1, lsl #7
   1a884:	cmp	r3, r1, lsl #6
   1a888:	adc	r0, r0, r0
   1a88c:	subcs	r3, r3, r1, lsl #6
   1a890:	cmp	r3, r1, lsl #5
   1a894:	adc	r0, r0, r0
   1a898:	subcs	r3, r3, r1, lsl #5
   1a89c:	cmp	r3, r1, lsl #4
   1a8a0:	adc	r0, r0, r0
   1a8a4:	subcs	r3, r3, r1, lsl #4
   1a8a8:	cmp	r3, r1, lsl #3
   1a8ac:	adc	r0, r0, r0
   1a8b0:	subcs	r3, r3, r1, lsl #3
   1a8b4:	cmp	r3, r1, lsl #2
   1a8b8:	adc	r0, r0, r0
   1a8bc:	subcs	r3, r3, r1, lsl #2
   1a8c0:	cmp	r3, r1, lsl #1
   1a8c4:	adc	r0, r0, r0
   1a8c8:	subcs	r3, r3, r1, lsl #1
   1a8cc:	cmp	r3, r1
   1a8d0:	adc	r0, r0, r0
   1a8d4:	subcs	r3, r3, r1
   1a8d8:	cmp	ip, #0
   1a8dc:	rsbmi	r0, r0, #0
   1a8e0:	bx	lr
   1a8e4:	teq	ip, r0
   1a8e8:	rsbmi	r0, r0, #0
   1a8ec:	bx	lr
   1a8f0:	movcc	r0, #0
   1a8f4:	asreq	r0, ip, #31
   1a8f8:	orreq	r0, r0, #1
   1a8fc:	bx	lr
   1a900:	clz	r2, r1
   1a904:	rsb	r2, r2, #31
   1a908:	cmp	ip, #0
   1a90c:	lsr	r0, r3, r2
   1a910:	rsbmi	r0, r0, #0
   1a914:	bx	lr
   1a918:	cmp	r0, #0
   1a91c:	mvngt	r0, #-2147483648	; 0x80000000
   1a920:	movlt	r0, #-2147483648	; 0x80000000
   1a924:	b	1a948 <__assert_fail@plt+0x93a8>
   1a928:	cmp	r1, #0
   1a92c:	beq	1a918 <__assert_fail@plt+0x9378>
   1a930:	push	{r0, r1, lr}
   1a934:	bl	1a710 <__assert_fail@plt+0x9170>
   1a938:	pop	{r1, r2, lr}
   1a93c:	mul	r3, r2, r0
   1a940:	sub	r1, r1, r3
   1a944:	bx	lr
   1a948:	push	{r1, lr}
   1a94c:	mov	r0, #8
   1a950:	bl	111d4 <raise@plt>
   1a954:	pop	{r1, pc}
   1a958:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1a95c:	mov	r7, r0
   1a960:	ldr	r6, [pc, #72]	; 1a9b0 <__assert_fail@plt+0x9410>
   1a964:	ldr	r5, [pc, #72]	; 1a9b4 <__assert_fail@plt+0x9414>
   1a968:	add	r6, pc, r6
   1a96c:	add	r5, pc, r5
   1a970:	sub	r6, r6, r5
   1a974:	mov	r8, r1
   1a978:	mov	r9, r2
   1a97c:	bl	1119c <fdopen@plt-0x20>
   1a980:	asrs	r6, r6, #2
   1a984:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   1a988:	mov	r4, #0
   1a98c:	add	r4, r4, #1
   1a990:	ldr	r3, [r5], #4
   1a994:	mov	r2, r9
   1a998:	mov	r1, r8
   1a99c:	mov	r0, r7
   1a9a0:	blx	r3
   1a9a4:	cmp	r6, r4
   1a9a8:	bne	1a98c <__assert_fail@plt+0x93ec>
   1a9ac:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1a9b0:	andeq	r2, r1, r0, lsr #11
   1a9b4:	muleq	r1, r8, r5
   1a9b8:	bx	lr
   1a9bc:	ldr	r3, [pc, #12]	; 1a9d0 <__assert_fail@plt+0x9430>
   1a9c0:	mov	r1, #0
   1a9c4:	add	r3, pc, r3
   1a9c8:	ldr	r2, [r3]
   1a9cc:	b	11438 <__cxa_atexit@plt>
   1a9d0:	muleq	r1, r8, r7

Disassembly of section .fini:

0001a9d4 <.fini>:
   1a9d4:	push	{r3, lr}
   1a9d8:	pop	{r3, pc}
