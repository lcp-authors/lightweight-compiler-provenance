
../repos/coreutils/src/head:     file format elf32-littlearm


Disassembly of section .init:

00010e40 <.init>:
   10e40:	push	{r3, lr}
   10e44:	bl	11130 <__assert_fail@plt+0x48>
   10e48:	pop	{r3, pc}

Disassembly of section .plt:

00010e4c <calloc@plt-0x14>:
   10e4c:	push	{lr}		; (str lr, [sp, #-4]!)
   10e50:	ldr	lr, [pc, #4]	; 10e5c <calloc@plt-0x4>
   10e54:	add	lr, pc, lr
   10e58:	ldr	pc, [lr, #8]!
   10e5c:	andeq	r7, r1, r4, lsr #3

00010e60 <calloc@plt>:
   10e60:	add	ip, pc, #0, 12
   10e64:	add	ip, ip, #94208	; 0x17000
   10e68:	ldr	pc, [ip, #420]!	; 0x1a4

00010e6c <fputs_unlocked@plt>:
   10e6c:	add	ip, pc, #0, 12
   10e70:	add	ip, ip, #94208	; 0x17000
   10e74:	ldr	pc, [ip, #412]!	; 0x19c

00010e78 <raise@plt>:
   10e78:	add	ip, pc, #0, 12
   10e7c:	add	ip, ip, #94208	; 0x17000
   10e80:	ldr	pc, [ip, #404]!	; 0x194

00010e84 <strcmp@plt>:
   10e84:	add	ip, pc, #0, 12
   10e88:	add	ip, ip, #94208	; 0x17000
   10e8c:	ldr	pc, [ip, #396]!	; 0x18c

00010e90 <read@plt>:
   10e90:	add	ip, pc, #0, 12
   10e94:	add	ip, ip, #94208	; 0x17000
   10e98:	ldr	pc, [ip, #388]!	; 0x184

00010e9c <fflush@plt>:
   10e9c:	add	ip, pc, #0, 12
   10ea0:	add	ip, ip, #94208	; 0x17000
   10ea4:	ldr	pc, [ip, #380]!	; 0x17c

00010ea8 <free@plt>:
   10ea8:	add	ip, pc, #0, 12
   10eac:	add	ip, ip, #94208	; 0x17000
   10eb0:	ldr	pc, [ip, #372]!	; 0x174

00010eb4 <_exit@plt>:
   10eb4:	add	ip, pc, #0, 12
   10eb8:	add	ip, ip, #94208	; 0x17000
   10ebc:	ldr	pc, [ip, #364]!	; 0x16c

00010ec0 <memcpy@plt>:
   10ec0:	add	ip, pc, #0, 12
   10ec4:	add	ip, ip, #94208	; 0x17000
   10ec8:	ldr	pc, [ip, #356]!	; 0x164

00010ecc <mbsinit@plt>:
   10ecc:	add	ip, pc, #0, 12
   10ed0:	add	ip, ip, #94208	; 0x17000
   10ed4:	ldr	pc, [ip, #348]!	; 0x15c

00010ed8 <fwrite_unlocked@plt>:
   10ed8:	add	ip, pc, #0, 12
   10edc:	add	ip, ip, #94208	; 0x17000
   10ee0:	ldr	pc, [ip, #340]!	; 0x154

00010ee4 <dcgettext@plt>:
   10ee4:	add	ip, pc, #0, 12
   10ee8:	add	ip, ip, #94208	; 0x17000
   10eec:	ldr	pc, [ip, #332]!	; 0x14c

00010ef0 <realloc@plt>:
   10ef0:	add	ip, pc, #0, 12
   10ef4:	add	ip, ip, #94208	; 0x17000
   10ef8:	ldr	pc, [ip, #324]!	; 0x144

00010efc <textdomain@plt>:
   10efc:	add	ip, pc, #0, 12
   10f00:	add	ip, ip, #94208	; 0x17000
   10f04:	ldr	pc, [ip, #316]!	; 0x13c

00010f08 <rawmemchr@plt>:
   10f08:	add	ip, pc, #0, 12
   10f0c:	add	ip, ip, #94208	; 0x17000
   10f10:	ldr	pc, [ip, #308]!	; 0x134

00010f14 <iswprint@plt>:
   10f14:	add	ip, pc, #0, 12
   10f18:	add	ip, ip, #94208	; 0x17000
   10f1c:	ldr	pc, [ip, #300]!	; 0x12c

00010f20 <__fxstat64@plt>:
   10f20:	add	ip, pc, #0, 12
   10f24:	add	ip, ip, #94208	; 0x17000
   10f28:	ldr	pc, [ip, #292]!	; 0x124

00010f2c <lseek64@plt>:
   10f2c:	add	ip, pc, #0, 12
   10f30:	add	ip, ip, #94208	; 0x17000
   10f34:	ldr	pc, [ip, #284]!	; 0x11c

00010f38 <__ctype_get_mb_cur_max@plt>:
   10f38:	add	ip, pc, #0, 12
   10f3c:	add	ip, ip, #94208	; 0x17000
   10f40:	ldr	pc, [ip, #276]!	; 0x114

00010f44 <__fpending@plt>:
   10f44:	add	ip, pc, #0, 12
   10f48:	add	ip, ip, #94208	; 0x17000
   10f4c:	ldr	pc, [ip, #268]!	; 0x10c

00010f50 <ferror_unlocked@plt>:
   10f50:	add	ip, pc, #0, 12
   10f54:	add	ip, ip, #94208	; 0x17000
   10f58:	ldr	pc, [ip, #260]!	; 0x104

00010f5c <mbrtowc@plt>:
   10f5c:	add	ip, pc, #0, 12
   10f60:	add	ip, ip, #94208	; 0x17000
   10f64:	ldr	pc, [ip, #252]!	; 0xfc

00010f68 <error@plt>:
   10f68:	add	ip, pc, #0, 12
   10f6c:	add	ip, ip, #94208	; 0x17000
   10f70:	ldr	pc, [ip, #244]!	; 0xf4

00010f74 <open64@plt>:
   10f74:	add	ip, pc, #0, 12
   10f78:	add	ip, ip, #94208	; 0x17000
   10f7c:	ldr	pc, [ip, #236]!	; 0xec

00010f80 <malloc@plt>:
   10f80:	add	ip, pc, #0, 12
   10f84:	add	ip, ip, #94208	; 0x17000
   10f88:	ldr	pc, [ip, #228]!	; 0xe4

00010f8c <__libc_start_main@plt>:
   10f8c:	add	ip, pc, #0, 12
   10f90:	add	ip, ip, #94208	; 0x17000
   10f94:	ldr	pc, [ip, #220]!	; 0xdc

00010f98 <__freading@plt>:
   10f98:	add	ip, pc, #0, 12
   10f9c:	add	ip, ip, #94208	; 0x17000
   10fa0:	ldr	pc, [ip, #212]!	; 0xd4

00010fa4 <__gmon_start__@plt>:
   10fa4:	add	ip, pc, #0, 12
   10fa8:	add	ip, ip, #94208	; 0x17000
   10fac:	ldr	pc, [ip, #204]!	; 0xcc

00010fb0 <getopt_long@plt>:
   10fb0:	add	ip, pc, #0, 12
   10fb4:	add	ip, ip, #94208	; 0x17000
   10fb8:	ldr	pc, [ip, #196]!	; 0xc4

00010fbc <__ctype_b_loc@plt>:
   10fbc:	add	ip, pc, #0, 12
   10fc0:	add	ip, ip, #94208	; 0x17000
   10fc4:	ldr	pc, [ip, #188]!	; 0xbc

00010fc8 <exit@plt>:
   10fc8:	add	ip, pc, #0, 12
   10fcc:	add	ip, ip, #94208	; 0x17000
   10fd0:	ldr	pc, [ip, #180]!	; 0xb4

00010fd4 <bcmp@plt>:
   10fd4:	add	ip, pc, #0, 12
   10fd8:	add	ip, ip, #94208	; 0x17000
   10fdc:	ldr	pc, [ip, #172]!	; 0xac

00010fe0 <strlen@plt>:
   10fe0:	add	ip, pc, #0, 12
   10fe4:	add	ip, ip, #94208	; 0x17000
   10fe8:	ldr	pc, [ip, #164]!	; 0xa4

00010fec <strchr@plt>:
   10fec:	add	ip, pc, #0, 12
   10ff0:	add	ip, ip, #94208	; 0x17000
   10ff4:	ldr	pc, [ip, #156]!	; 0x9c

00010ff8 <memrchr@plt>:
   10ff8:	add	ip, pc, #0, 12
   10ffc:	add	ip, ip, #94208	; 0x17000
   11000:	ldr	pc, [ip, #148]!	; 0x94

00011004 <__errno_location@plt>:
   11004:	add	ip, pc, #0, 12
   11008:	add	ip, ip, #94208	; 0x17000
   1100c:	ldr	pc, [ip, #140]!	; 0x8c

00011010 <__cxa_atexit@plt>:
   11010:	add	ip, pc, #0, 12
   11014:	add	ip, ip, #94208	; 0x17000
   11018:	ldr	pc, [ip, #132]!	; 0x84

0001101c <memset@plt>:
   1101c:	add	ip, pc, #0, 12
   11020:	add	ip, ip, #94208	; 0x17000
   11024:	ldr	pc, [ip, #124]!	; 0x7c

00011028 <__printf_chk@plt>:
   11028:	add	ip, pc, #0, 12
   1102c:	add	ip, ip, #94208	; 0x17000
   11030:	ldr	pc, [ip, #116]!	; 0x74

00011034 <fileno@plt>:
   11034:	add	ip, pc, #0, 12
   11038:	add	ip, ip, #94208	; 0x17000
   1103c:	ldr	pc, [ip, #108]!	; 0x6c

00011040 <strtoumax@plt>:
   11040:	add	ip, pc, #0, 12
   11044:	add	ip, ip, #94208	; 0x17000
   11048:	ldr	pc, [ip, #100]!	; 0x64

0001104c <__fprintf_chk@plt>:
   1104c:	add	ip, pc, #0, 12
   11050:	add	ip, ip, #94208	; 0x17000
   11054:	ldr	pc, [ip, #92]!	; 0x5c

00011058 <memchr@plt>:
   11058:	add	ip, pc, #0, 12
   1105c:	add	ip, ip, #94208	; 0x17000
   11060:	ldr	pc, [ip, #84]!	; 0x54

00011064 <fclose@plt>:
   11064:	add	ip, pc, #0, 12
   11068:	add	ip, ip, #94208	; 0x17000
   1106c:	ldr	pc, [ip, #76]!	; 0x4c

00011070 <fseeko64@plt>:
   11070:	add	ip, pc, #0, 12
   11074:	add	ip, ip, #94208	; 0x17000
   11078:	ldr	pc, [ip, #68]!	; 0x44

0001107c <setlocale@plt>:
   1107c:	add	ip, pc, #0, 12
   11080:	add	ip, ip, #94208	; 0x17000
   11084:	ldr	pc, [ip, #60]!	; 0x3c

00011088 <strrchr@plt>:
   11088:	add	ip, pc, #0, 12
   1108c:	add	ip, ip, #94208	; 0x17000
   11090:	ldr	pc, [ip, #52]!	; 0x34

00011094 <nl_langinfo@plt>:
   11094:	add	ip, pc, #0, 12
   11098:	add	ip, ip, #94208	; 0x17000
   1109c:	ldr	pc, [ip, #44]!	; 0x2c

000110a0 <clearerr_unlocked@plt>:
   110a0:	add	ip, pc, #0, 12
   110a4:	add	ip, ip, #94208	; 0x17000
   110a8:	ldr	pc, [ip, #36]!	; 0x24

000110ac <bindtextdomain@plt>:
   110ac:	add	ip, pc, #0, 12
   110b0:	add	ip, ip, #94208	; 0x17000
   110b4:	ldr	pc, [ip, #28]!

000110b8 <fputs@plt>:
   110b8:	add	ip, pc, #0, 12
   110bc:	add	ip, ip, #94208	; 0x17000
   110c0:	ldr	pc, [ip, #20]!

000110c4 <strncmp@plt>:
   110c4:	add	ip, pc, #0, 12
   110c8:	add	ip, ip, #94208	; 0x17000
   110cc:	ldr	pc, [ip, #12]!

000110d0 <abort@plt>:
   110d0:	add	ip, pc, #0, 12
   110d4:	add	ip, ip, #94208	; 0x17000
   110d8:	ldr	pc, [ip, #4]!

000110dc <close@plt>:
   110dc:	add	ip, pc, #0, 12
   110e0:	add	ip, ip, #90112	; 0x16000
   110e4:	ldr	pc, [ip, #4092]!	; 0xffc

000110e8 <__assert_fail@plt>:
   110e8:	add	ip, pc, #0, 12
   110ec:	add	ip, ip, #90112	; 0x16000
   110f0:	ldr	pc, [ip, #4084]!	; 0xff4

Disassembly of section .text:

000110f4 <.text>:
   110f4:	mov	fp, #0
   110f8:	mov	lr, #0
   110fc:	pop	{r1}		; (ldr r1, [sp], #4)
   11100:	mov	r2, sp
   11104:	push	{r2}		; (str r2, [sp, #-4]!)
   11108:	push	{r0}		; (str r0, [sp, #-4]!)
   1110c:	ldr	ip, [pc, #16]	; 11124 <__assert_fail@plt+0x3c>
   11110:	push	{ip}		; (str ip, [sp, #-4]!)
   11114:	ldr	r0, [pc, #12]	; 11128 <__assert_fail@plt+0x40>
   11118:	ldr	r3, [pc, #12]	; 1112c <__assert_fail@plt+0x44>
   1111c:	bl	10f8c <__libc_start_main@plt>
   11120:	bl	110d0 <abort@plt>
   11124:	andeq	r6, r1, r0, lsr #13
   11128:	andeq	r1, r1, r0, asr #9
   1112c:	andeq	r6, r1, r0, asr #12
   11130:	ldr	r3, [pc, #20]	; 1114c <__assert_fail@plt+0x64>
   11134:	ldr	r2, [pc, #20]	; 11150 <__assert_fail@plt+0x68>
   11138:	add	r3, pc, r3
   1113c:	ldr	r2, [r3, r2]
   11140:	cmp	r2, #0
   11144:	bxeq	lr
   11148:	b	10fa4 <__gmon_start__@plt>
   1114c:	andeq	r6, r1, r0, asr #29
   11150:	andeq	r0, r0, r8, ror #1
   11154:	ldr	r0, [pc, #24]	; 11174 <__assert_fail@plt+0x8c>
   11158:	ldr	r3, [pc, #24]	; 11178 <__assert_fail@plt+0x90>
   1115c:	cmp	r3, r0
   11160:	bxeq	lr
   11164:	ldr	r3, [pc, #16]	; 1117c <__assert_fail@plt+0x94>
   11168:	cmp	r3, #0
   1116c:	bxeq	lr
   11170:	bx	r3
   11174:	andeq	r8, r2, r0, asr #2
   11178:	andeq	r8, r2, r0, asr #2
   1117c:	andeq	r0, r0, r0
   11180:	ldr	r0, [pc, #36]	; 111ac <__assert_fail@plt+0xc4>
   11184:	ldr	r1, [pc, #36]	; 111b0 <__assert_fail@plt+0xc8>
   11188:	sub	r1, r1, r0
   1118c:	asr	r1, r1, #2
   11190:	add	r1, r1, r1, lsr #31
   11194:	asrs	r1, r1, #1
   11198:	bxeq	lr
   1119c:	ldr	r3, [pc, #16]	; 111b4 <__assert_fail@plt+0xcc>
   111a0:	cmp	r3, #0
   111a4:	bxeq	lr
   111a8:	bx	r3
   111ac:	andeq	r8, r2, r0, asr #2
   111b0:	andeq	r8, r2, r0, asr #2
   111b4:	andeq	r0, r0, r0
   111b8:	push	{r4, lr}
   111bc:	ldr	r4, [pc, #24]	; 111dc <__assert_fail@plt+0xf4>
   111c0:	ldrb	r3, [r4]
   111c4:	cmp	r3, #0
   111c8:	popne	{r4, pc}
   111cc:	bl	11154 <__assert_fail@plt+0x6c>
   111d0:	mov	r3, #1
   111d4:	strb	r3, [r4]
   111d8:	pop	{r4, pc}
   111dc:	andeq	r8, r2, ip, asr r1
   111e0:	b	11180 <__assert_fail@plt+0x98>
   111e4:	push	{fp, lr}
   111e8:	mov	fp, sp
   111ec:	sub	sp, sp, #56	; 0x38
   111f0:	mov	r8, r0
   111f4:	cmp	r0, #0
   111f8:	bne	11480 <__assert_fail@plt+0x398>
   111fc:	movw	r1, #26371	; 0x6703
   11200:	mov	r0, #0
   11204:	mov	r2, #5
   11208:	movt	r1, #1
   1120c:	bl	10ee4 <dcgettext@plt>
   11210:	mov	r1, r0
   11214:	movw	r0, #33132	; 0x816c
   11218:	movt	r0, #2
   1121c:	ldr	r2, [r0]
   11220:	mov	r0, #1
   11224:	bl	11028 <__printf_chk@plt>
   11228:	movw	r1, #26404	; 0x6724
   1122c:	mov	r0, #0
   11230:	mov	r2, #5
   11234:	movt	r1, #1
   11238:	bl	10ee4 <dcgettext@plt>
   1123c:	mov	r1, r0
   11240:	mov	r0, #1
   11244:	mov	r2, #10
   11248:	bl	11028 <__printf_chk@plt>
   1124c:	movw	r1, #27592	; 0x6bc8
   11250:	mov	r0, #0
   11254:	mov	r2, #5
   11258:	movt	r1, #1
   1125c:	bl	10ee4 <dcgettext@plt>
   11260:	movw	r9, #33108	; 0x8154
   11264:	movt	r9, #2
   11268:	ldr	r1, [r9]
   1126c:	bl	10e6c <fputs_unlocked@plt>
   11270:	movw	r1, #27648	; 0x6c00
   11274:	mov	r0, #0
   11278:	mov	r2, #5
   1127c:	movt	r1, #1
   11280:	bl	10ee4 <dcgettext@plt>
   11284:	ldr	r1, [r9]
   11288:	bl	10e6c <fputs_unlocked@plt>
   1128c:	movw	r1, #26537	; 0x67a9
   11290:	mov	r0, #0
   11294:	mov	r2, #5
   11298:	movt	r1, #1
   1129c:	bl	10ee4 <dcgettext@plt>
   112a0:	mov	r1, r0
   112a4:	mov	r0, #1
   112a8:	mov	r2, #10
   112ac:	bl	11028 <__printf_chk@plt>
   112b0:	movw	r1, #26935	; 0x6937
   112b4:	mov	r0, #0
   112b8:	mov	r2, #5
   112bc:	movt	r1, #1
   112c0:	bl	10ee4 <dcgettext@plt>
   112c4:	ldr	r1, [r9]
   112c8:	bl	10e6c <fputs_unlocked@plt>
   112cc:	movw	r1, #27067	; 0x69bb
   112d0:	mov	r0, #0
   112d4:	mov	r2, #5
   112d8:	movt	r1, #1
   112dc:	bl	10ee4 <dcgettext@plt>
   112e0:	ldr	r1, [r9]
   112e4:	bl	10e6c <fputs_unlocked@plt>
   112e8:	movw	r1, #27130	; 0x69fa
   112ec:	mov	r0, #0
   112f0:	mov	r2, #5
   112f4:	movt	r1, #1
   112f8:	bl	10ee4 <dcgettext@plt>
   112fc:	ldr	r1, [r9]
   11300:	bl	10e6c <fputs_unlocked@plt>
   11304:	movw	r1, #27175	; 0x6a27
   11308:	mov	r0, #0
   1130c:	mov	r2, #5
   11310:	movt	r1, #1
   11314:	bl	10ee4 <dcgettext@plt>
   11318:	ldr	r1, [r9]
   1131c:	bl	10e6c <fputs_unlocked@plt>
   11320:	movw	r1, #27229	; 0x6a5d
   11324:	mov	r0, #0
   11328:	mov	r2, #5
   1132c:	movt	r1, #1
   11330:	bl	10ee4 <dcgettext@plt>
   11334:	ldr	r1, [r9]
   11338:	bl	10e6c <fputs_unlocked@plt>
   1133c:	movw	r0, #28584	; 0x6fa8
   11340:	mov	r6, sp
   11344:	movt	r0, #1
   11348:	mov	r1, r6
   1134c:	ldm	r0!, {r2, r3, r4, r5}
   11350:	stmia	r1!, {r2, r3, r4, r5}
   11354:	ldm	r0!, {r2, r3, r4, r5, r7}
   11358:	stmia	r1!, {r2, r3, r4, r5, r7}
   1135c:	ldm	r0, {r2, r3, r4, r5, r7}
   11360:	stm	r1, {r2, r3, r4, r5, r7}
   11364:	movw	r1, #27723	; 0x6c4b
   11368:	movw	r5, #27441	; 0x6b31
   1136c:	movt	r1, #1
   11370:	movt	r5, #1
   11374:	mov	r0, r5
   11378:	bl	10e84 <strcmp@plt>
   1137c:	cmp	r0, #0
   11380:	ldrne	r1, [r6, #8]!
   11384:	cmpne	r1, #0
   11388:	bne	11374 <__assert_fail@plt+0x28c>
   1138c:	movw	r1, #27818	; 0x6caa
   11390:	ldr	r6, [r6, #4]
   11394:	mov	r0, #0
   11398:	mov	r2, #5
   1139c:	movt	r1, #1
   113a0:	bl	10ee4 <dcgettext@plt>
   113a4:	movw	r2, #27518	; 0x6b7e
   113a8:	movw	r3, #27841	; 0x6cc1
   113ac:	mov	r1, r0
   113b0:	mov	r0, #1
   113b4:	movt	r2, #1
   113b8:	movt	r3, #1
   113bc:	bl	11028 <__printf_chk@plt>
   113c0:	cmp	r6, #0
   113c4:	mov	r0, #5
   113c8:	mov	r1, #0
   113cc:	moveq	r6, r5
   113d0:	bl	1107c <setlocale@plt>
   113d4:	cmp	r0, #0
   113d8:	beq	11410 <__assert_fail@plt+0x328>
   113dc:	movw	r1, #27881	; 0x6ce9
   113e0:	mov	r2, #3
   113e4:	movt	r1, #1
   113e8:	bl	110c4 <strncmp@plt>
   113ec:	cmp	r0, #0
   113f0:	beq	11410 <__assert_fail@plt+0x328>
   113f4:	movw	r1, #27885	; 0x6ced
   113f8:	mov	r0, #0
   113fc:	mov	r2, #5
   11400:	movt	r1, #1
   11404:	bl	10ee4 <dcgettext@plt>
   11408:	ldr	r1, [r9]
   1140c:	bl	10e6c <fputs_unlocked@plt>
   11410:	movw	r1, #27956	; 0x6d34
   11414:	mov	r0, #0
   11418:	mov	r2, #5
   1141c:	movt	r1, #1
   11420:	bl	10ee4 <dcgettext@plt>
   11424:	movw	r2, #27841	; 0x6cc1
   11428:	mov	r1, r0
   1142c:	mov	r0, #1
   11430:	mov	r3, r5
   11434:	movt	r2, #1
   11438:	bl	11028 <__printf_chk@plt>
   1143c:	movw	r1, #27983	; 0x6d4f
   11440:	mov	r0, #0
   11444:	mov	r2, #5
   11448:	movt	r1, #1
   1144c:	bl	10ee4 <dcgettext@plt>
   11450:	mov	r1, r0
   11454:	movw	r0, #27751	; 0x6c67
   11458:	movw	r3, #28033	; 0x6d81
   1145c:	cmp	r6, r5
   11460:	mov	r2, r6
   11464:	movt	r0, #1
   11468:	movt	r3, #1
   1146c:	moveq	r3, r0
   11470:	mov	r0, #1
   11474:	bl	11028 <__printf_chk@plt>
   11478:	mov	r0, r8
   1147c:	bl	10fc8 <exit@plt>
   11480:	movw	r0, #33104	; 0x8150
   11484:	movw	r1, #26332	; 0x66dc
   11488:	mov	r2, #5
   1148c:	movt	r0, #2
   11490:	movt	r1, #1
   11494:	ldr	r5, [r0]
   11498:	mov	r0, #0
   1149c:	bl	10ee4 <dcgettext@plt>
   114a0:	mov	r2, r0
   114a4:	movw	r0, #33132	; 0x816c
   114a8:	mov	r1, #1
   114ac:	movt	r0, #2
   114b0:	ldr	r3, [r0]
   114b4:	mov	r0, r5
   114b8:	bl	1104c <__fprintf_chk@plt>
   114bc:	b	11478 <__assert_fail@plt+0x390>
   114c0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   114c4:	add	fp, sp, #28
   114c8:	sub	sp, sp, #236	; 0xec
   114cc:	sub	sp, sp, #8192	; 0x2000
   114d0:	mov	r9, r0
   114d4:	ldr	r0, [r1]
   114d8:	mov	r8, r1
   114dc:	bl	132a8 <__assert_fail@plt+0x21c0>
   114e0:	movw	r1, #28033	; 0x6d81
   114e4:	mov	r0, #6
   114e8:	movt	r1, #1
   114ec:	bl	1107c <setlocale@plt>
   114f0:	movw	r5, #27522	; 0x6b82
   114f4:	movw	r1, #27446	; 0x6b36
   114f8:	movt	r5, #1
   114fc:	movt	r1, #1
   11500:	mov	r0, r5
   11504:	bl	110ac <bindtextdomain@plt>
   11508:	mov	r0, r5
   1150c:	bl	10efc <textdomain@plt>
   11510:	movw	r0, #12304	; 0x3010
   11514:	movt	r0, #1
   11518:	bl	166a4 <__assert_fail@plt+0x55bc>
   1151c:	movw	r0, #33117	; 0x815d
   11520:	mov	r4, #0
   11524:	mov	sl, #1
   11528:	cmp	r9, #2
   1152c:	movt	r0, #2
   11530:	strb	r4, [r0]
   11534:	movw	r0, #33118	; 0x815e
   11538:	movt	r0, #2
   1153c:	strb	r4, [r0]
   11540:	movw	r0, #33119	; 0x815f
   11544:	movt	r0, #2
   11548:	strb	sl, [r0]
   1154c:	blt	11668 <__assert_fail@plt+0x580>
   11550:	mov	r5, r8
   11554:	mov	r1, #0
   11558:	ldr	lr, [r5, #4]!
   1155c:	str	r1, [sp, #120]	; 0x78
   11560:	ldrb	r0, [lr]
   11564:	cmp	r0, #45	; 0x2d
   11568:	bne	1167c <__assert_fail@plt+0x594>
   1156c:	ldrb	r0, [lr, #1]!
   11570:	mov	r1, #0
   11574:	str	r1, [sp, #120]	; 0x78
   11578:	sub	r0, r0, #48	; 0x30
   1157c:	cmp	r0, #9
   11580:	bhi	1167c <__assert_fail@plt+0x594>
   11584:	mov	r0, lr
   11588:	ldrb	r2, [r0, #1]!
   1158c:	sub	r1, r2, #48	; 0x30
   11590:	cmp	r1, #10
   11594:	bcc	11588 <__assert_fail@plt+0x4a0>
   11598:	mov	r3, #0
   1159c:	mov	ip, #0
   115a0:	mov	r1, #1
   115a4:	mov	sl, r0
   115a8:	str	r3, [sp, #120]	; 0x78
   115ac:	mov	r3, #0
   115b0:	mov	r6, r3
   115b4:	uxtb	r3, r2
   115b8:	cmp	r3, #112	; 0x70
   115bc:	bgt	11618 <__assert_fail@plt+0x530>
   115c0:	sub	r7, r3, #98	; 0x62
   115c4:	cmp	r7, #11
   115c8:	bhi	12b90 <__assert_fail@plt+0x1aa8>
   115cc:	add	r4, pc, #8
   115d0:	mov	r1, #0
   115d4:	mov	r3, #0
   115d8:	ldr	pc, [r4, r7, lsl #2]
   115dc:	andeq	r1, r1, ip, lsl #12
   115e0:	andeq	r1, r1, r0, ror #12
   115e4:	andeq	r2, r1, r8, asr #26
   115e8:	andeq	r2, r1, r8, asr #26
   115ec:	andeq	r2, r1, r8, asr #26
   115f0:	andeq	r2, r1, r8, asr #26
   115f4:	andeq	r2, r1, r8, asr #26
   115f8:	andeq	r2, r1, r8, asr #26
   115fc:	andeq	r2, r1, r8, asr #26
   11600:	andeq	r1, r1, ip, lsl #12
   11604:	andeq	r1, r1, r8, asr r6
   11608:	andeq	r1, r1, ip, lsl #12
   1160c:	mov	r1, #0
   11610:	mov	r3, r2
   11614:	b	11660 <__assert_fail@plt+0x578>
   11618:	cmp	r3, #113	; 0x71
   1161c:	beq	11630 <__assert_fail@plt+0x548>
   11620:	cmp	r3, #118	; 0x76
   11624:	bne	1163c <__assert_fail@plt+0x554>
   11628:	mov	r2, #1
   1162c:	b	11634 <__assert_fail@plt+0x54c>
   11630:	mov	r2, #2
   11634:	str	r2, [sp, #120]	; 0x78
   11638:	b	1165c <__assert_fail@plt+0x574>
   1163c:	cmp	r3, #122	; 0x7a
   11640:	bne	12d48 <__assert_fail@plt+0x1c60>
   11644:	movw	r2, #33119	; 0x815f
   11648:	mov	r3, r6
   1164c:	movt	r2, #2
   11650:	strb	ip, [r2]
   11654:	b	11660 <__assert_fail@plt+0x578>
   11658:	mov	r1, #1
   1165c:	mov	r3, r6
   11660:	ldrb	r2, [sl, #1]!
   11664:	b	115b0 <__assert_fail@plt+0x4c8>
   11668:	mov	r0, #10
   1166c:	str	r0, [sp, #124]	; 0x7c
   11670:	mov	r0, #0
   11674:	str	r0, [sp, #120]	; 0x78
   11678:	b	11684 <__assert_fail@plt+0x59c>
   1167c:	mov	r0, #10
   11680:	str	r0, [sp, #124]	; 0x7c
   11684:	mov	r0, #1
   11688:	mov	r5, r8
   1168c:	mov	r1, #0
   11690:	str	r0, [sp, #68]	; 0x44
   11694:	movw	r8, #27500	; 0x6b6c
   11698:	movw	r7, #28424	; 0x6f08
   1169c:	mov	r0, #0
   116a0:	movt	r8, #1
   116a4:	movt	r7, #1
   116a8:	str	r0, [sp, #76]	; 0x4c
   116ac:	str	r1, [sp, #96]	; 0x60
   116b0:	mov	r0, r9
   116b4:	mov	r1, r5
   116b8:	mov	r2, r8
   116bc:	mov	r3, r7
   116c0:	str	r4, [sp]
   116c4:	bl	10fb0 <getopt_long@plt>
   116c8:	mov	r6, r0
   116cc:	cmp	r0, #112	; 0x70
   116d0:	ble	1170c <__assert_fail@plt+0x624>
   116d4:	cmp	r6, #121	; 0x79
   116d8:	ble	11754 <__assert_fail@plt+0x66c>
   116dc:	cmp	r6, #122	; 0x7a
   116e0:	bne	116f4 <__assert_fail@plt+0x60c>
   116e4:	movw	r0, #33119	; 0x815f
   116e8:	movt	r0, #2
   116ec:	strb	r4, [r0]
   116f0:	b	116b0 <__assert_fail@plt+0x5c8>
   116f4:	cmp	r6, #256	; 0x100
   116f8:	bne	12c90 <__assert_fail@plt+0x1ba8>
   116fc:	movw	r0, #33120	; 0x8160
   11700:	movt	r0, #2
   11704:	strb	sl, [r0]
   11708:	b	116b0 <__assert_fail@plt+0x5c8>
   1170c:	movw	r1, #33112	; 0x8158
   11710:	cmp	r6, #98	; 0x62
   11714:	movt	r1, #2
   11718:	ble	11800 <__assert_fail@plt+0x718>
   1171c:	cmp	r6, #99	; 0x63
   11720:	bne	11784 <__assert_fail@plt+0x69c>
   11724:	ldr	r6, [r1]
   11728:	ldrb	r0, [r6]
   1172c:	subs	r0, r0, #45	; 0x2d
   11730:	addeq	r6, r6, #1
   11734:	clz	r0, r0
   11738:	streq	r6, [r1]
   1173c:	movw	r1, #27568	; 0x6bb0
   11740:	lsr	r0, r0, #5
   11744:	movt	r1, #1
   11748:	str	r0, [sp, #76]	; 0x4c
   1174c:	mov	r0, #0
   11750:	b	117b8 <__assert_fail@plt+0x6d0>
   11754:	ldr	r1, [sp, #96]	; 0x60
   11758:	cmp	r6, #113	; 0x71
   1175c:	bne	1176c <__assert_fail@plt+0x684>
   11760:	mov	r0, #2
   11764:	str	r0, [sp, #120]	; 0x78
   11768:	b	116ac <__assert_fail@plt+0x5c4>
   1176c:	cmp	r6, #118	; 0x76
   11770:	bne	12c90 <__assert_fail@plt+0x1ba8>
   11774:	ldr	r1, [sp, #96]	; 0x60
   11778:	mov	r0, #1
   1177c:	str	r0, [sp, #120]	; 0x78
   11780:	b	116ac <__assert_fail@plt+0x5c4>
   11784:	cmp	r6, #110	; 0x6e
   11788:	bne	12c90 <__assert_fail@plt+0x1ba8>
   1178c:	ldr	r6, [r1]
   11790:	ldrb	r0, [r6]
   11794:	subs	r0, r0, #45	; 0x2d
   11798:	clz	r0, r0
   1179c:	addeq	r6, r6, #1
   117a0:	lsr	r0, r0, #5
   117a4:	streq	r6, [r1]
   117a8:	movw	r1, #28047	; 0x6d8f
   117ac:	str	r0, [sp, #76]	; 0x4c
   117b0:	mov	r0, #1
   117b4:	movt	r1, #1
   117b8:	str	r0, [sp, #68]	; 0x44
   117bc:	mov	r0, #0
   117c0:	mov	r2, #5
   117c4:	bl	10ee4 <dcgettext@plt>
   117c8:	mvn	r1, #0
   117cc:	str	r0, [sp, #12]
   117d0:	mov	r0, r6
   117d4:	mov	r2, #0
   117d8:	mov	r3, #0
   117dc:	str	r4, [sp, #16]
   117e0:	str	r1, [sp]
   117e4:	str	r1, [sp, #4]
   117e8:	movw	r1, #28034	; 0x6d82
   117ec:	movt	r1, #1
   117f0:	str	r1, [sp, #8]
   117f4:	bl	1586c <__assert_fail@plt+0x4784>
   117f8:	str	r0, [sp, #124]	; 0x7c
   117fc:	b	116ac <__assert_fail@plt+0x5c4>
   11800:	cmn	r6, #1
   11804:	bne	12c24 <__assert_fail@plt+0x1b3c>
   11808:	ldr	r1, [sp, #120]	; 0x78
   1180c:	ldr	r7, [sp, #124]	; 0x7c
   11810:	movw	r0, #33096	; 0x8148
   11814:	movt	r0, #2
   11818:	cmp	r1, #1
   1181c:	beq	11838 <__assert_fail@plt+0x750>
   11820:	cmp	r1, #0
   11824:	bne	11848 <__assert_fail@plt+0x760>
   11828:	ldr	r1, [r0]
   1182c:	sub	r2, r9, #1
   11830:	cmp	r1, r2
   11834:	bge	11848 <__assert_fail@plt+0x760>
   11838:	movw	r2, #33118	; 0x815e
   1183c:	mov	r1, #1
   11840:	movt	r2, #2
   11844:	strb	r1, [r2]
   11848:	ldr	r1, [sp, #96]	; 0x60
   1184c:	ldr	r2, [sp, #76]	; 0x4c
   11850:	mov	r6, #0
   11854:	cmn	r1, #1
   11858:	mov	r1, #0
   1185c:	mvn	r2, r2
   11860:	movwgt	r1, #1
   11864:	orr	r1, r1, r2
   11868:	tst	r1, #1
   1186c:	bne	11880 <__assert_fail@plt+0x798>
   11870:	ldr	r1, [sp, #68]	; 0x44
   11874:	eor	r1, r1, #1
   11878:	tst	r1, #1
   1187c:	bne	12d00 <__assert_fail@plt+0x1c18>
   11880:	ldr	r0, [r0]
   11884:	movw	r1, #28416	; 0x6f00
   11888:	movt	r1, #1
   1188c:	cmp	r0, r9
   11890:	addlt	r1, r5, r0, lsl #2
   11894:	ldr	r0, [r1]
   11898:	str	r1, [sp, #80]	; 0x50
   1189c:	cmp	r0, #0
   118a0:	beq	12b60 <__assert_fail@plt+0x1a78>
   118a4:	mov	r3, r0
   118a8:	adds	r0, r7, #8192	; 0x2000
   118ac:	ldr	r0, [sp, #96]	; 0x60
   118b0:	mov	r1, #1
   118b4:	add	sl, sp, #128	; 0x80
   118b8:	mov	r6, r3
   118bc:	adc	r0, r0, #0
   118c0:	str	r0, [sp, #24]
   118c4:	mov	r0, r7
   118c8:	bfc	r0, #13, #19
   118cc:	str	r0, [sp, #20]
   118d0:	rsb	r0, r0, #8192	; 0x2000
   118d4:	str	r0, [sp, #56]	; 0x38
   118d8:	add	r0, r0, r7
   118dc:	add	r1, r1, r0, lsr #13
   118e0:	lsr	r0, r0, #13
   118e4:	str	r0, [sp, #60]	; 0x3c
   118e8:	sub	r0, fp, #136	; 0x88
   118ec:	add	r0, r0, #48	; 0x30
   118f0:	cmp	r1, #16
   118f4:	mov	r2, r1
   118f8:	str	r1, [sp, #72]	; 0x48
   118fc:	movcs	r2, #16
   11900:	str	r0, [sp, #28]
   11904:	add	r0, r7, #8192	; 0x2000
   11908:	str	r2, [sp, #36]	; 0x24
   1190c:	str	r0, [sp, #64]	; 0x40
   11910:	lsr	r0, r1, #1
   11914:	mov	r2, #0
   11918:	mov	r1, #1
   1191c:	str	r0, [sp, #32]
   11920:	str	r1, [sp, #120]	; 0x78
   11924:	movw	r1, #28733	; 0x703d
   11928:	mov	r0, r6
   1192c:	str	r2, [sp, #116]	; 0x74
   11930:	movt	r1, #1
   11934:	bl	10e84 <strcmp@plt>
   11938:	cmp	r0, #0
   1193c:	str	r0, [sp, #112]	; 0x70
   11940:	beq	11960 <__assert_fail@plt+0x878>
   11944:	mov	r0, r6
   11948:	mov	r1, #0
   1194c:	bl	10f74 <open64@plt>
   11950:	cmn	r0, #1
   11954:	ble	11af4 <__assert_fail@plt+0xa0c>
   11958:	mov	r9, r0
   1195c:	b	1198c <__assert_fail@plt+0x8a4>
   11960:	movw	r1, #33117	; 0x815d
   11964:	mov	r0, #1
   11968:	mov	r2, #5
   1196c:	mov	r9, #0
   11970:	movt	r1, #2
   11974:	strb	r0, [r1]
   11978:	movw	r1, #28141	; 0x6ded
   1197c:	mov	r0, #0
   11980:	movt	r1, #1
   11984:	bl	10ee4 <dcgettext@plt>
   11988:	mov	r6, r0
   1198c:	movw	r0, #33118	; 0x815e
   11990:	movt	r0, #2
   11994:	ldrb	r0, [r0]
   11998:	cmp	r0, #1
   1199c:	bne	119e4 <__assert_fail@plt+0x8fc>
   119a0:	movw	r0, #33121	; 0x8161
   119a4:	movw	r1, #28218	; 0x6e3a
   119a8:	movw	r2, #28033	; 0x6d81
   119ac:	mov	r3, r6
   119b0:	movt	r0, #2
   119b4:	movt	r1, #1
   119b8:	movt	r2, #1
   119bc:	mov	r4, r0
   119c0:	ldrb	r0, [r0]
   119c4:	cmp	r0, #0
   119c8:	movw	r0, #28032	; 0x6d80
   119cc:	movt	r0, #1
   119d0:	movne	r2, r0
   119d4:	mov	r0, #1
   119d8:	bl	11028 <__printf_chk@plt>
   119dc:	mov	r0, #1
   119e0:	strb	r0, [r4]
   119e4:	ldr	r0, [sp, #76]	; 0x4c
   119e8:	str	r6, [sp, #100]	; 0x64
   119ec:	tst	r0, #1
   119f0:	beq	11a54 <__assert_fail@plt+0x96c>
   119f4:	mov	r0, r9
   119f8:	sub	r1, fp, #136	; 0x88
   119fc:	bl	166bc <__assert_fail@plt+0x55d4>
   11a00:	cmp	r0, #0
   11a04:	beq	11b84 <__assert_fail@plt+0xa9c>
   11a08:	bl	11004 <__errno_location@plt>
   11a0c:	ldr	r4, [r0]
   11a10:	movw	r1, #28202	; 0x6e2a
   11a14:	mov	r0, #0
   11a18:	movt	r1, #1
   11a1c:	str	r0, [sp, #108]	; 0x6c
   11a20:	mov	r0, #0
   11a24:	mov	r2, #5
   11a28:	bl	10ee4 <dcgettext@plt>
   11a2c:	mov	r5, r0
   11a30:	mov	r0, #4
   11a34:	mov	r1, r6
   11a38:	bl	1495c <__assert_fail@plt+0x3874>
   11a3c:	mov	r3, r0
   11a40:	mov	r0, #0
   11a44:	mov	r1, r4
   11a48:	mov	r2, r5
   11a4c:	bl	10f68 <error@plt>
   11a50:	b	12ac8 <__assert_fail@plt+0x19e0>
   11a54:	ldr	r0, [sp, #68]	; 0x44
   11a58:	ldr	r5, [sp, #96]	; 0x60
   11a5c:	tst	r0, #1
   11a60:	beq	11b14 <__assert_fail@plt+0xa2c>
   11a64:	orrs	r0, r7, r5
   11a68:	mov	r0, #1
   11a6c:	str	r0, [sp, #108]	; 0x6c
   11a70:	beq	12ac8 <__assert_fail@plt+0x19e0>
   11a74:	mov	r4, r7
   11a78:	mov	r0, r9
   11a7c:	mov	r1, sl
   11a80:	mov	r2, #8192	; 0x2000
   11a84:	bl	14de0 <__assert_fail@plt+0x3cf8>
   11a88:	cmn	r0, #1
   11a8c:	beq	1286c <__assert_fail@plt+0x1784>
   11a90:	mov	r1, r0
   11a94:	cmp	r0, #0
   11a98:	beq	12ac8 <__assert_fail@plt+0x19e0>
   11a9c:	movw	r0, #33119	; 0x815f
   11aa0:	mov	r7, #0
   11aa4:	movt	r0, #2
   11aa8:	ldrb	r0, [r0]
   11aac:	cmp	r0, #0
   11ab0:	movwne	r0, #10
   11ab4:	ldrb	r2, [sl, r7]
   11ab8:	cmp	r0, r2
   11abc:	bne	11ad0 <__assert_fail@plt+0x9e8>
   11ac0:	subs	r4, r4, #1
   11ac4:	sbc	r5, r5, #0
   11ac8:	orrs	r2, r4, r5
   11acc:	beq	11bf4 <__assert_fail@plt+0xb0c>
   11ad0:	add	r7, r7, #1
   11ad4:	cmp	r1, r7
   11ad8:	bne	11ab4 <__assert_fail@plt+0x9cc>
   11adc:	mov	r0, sl
   11ae0:	bl	12e40 <__assert_fail@plt+0x1d58>
   11ae4:	ldr	r7, [sp, #124]	; 0x7c
   11ae8:	orrs	r0, r4, r5
   11aec:	bne	11a78 <__assert_fail@plt+0x990>
   11af0:	b	12ac8 <__assert_fail@plt+0x19e0>
   11af4:	mov	r8, r7
   11af8:	bl	11004 <__errno_location@plt>
   11afc:	ldr	r4, [r0]
   11b00:	movw	r1, #28156	; 0x6dfc
   11b04:	mov	r7, #0
   11b08:	mov	r0, #0
   11b0c:	movt	r1, #1
   11b10:	b	12b04 <__assert_fail@plt+0x1a1c>
   11b14:	orrs	r0, r7, r5
   11b18:	mov	r0, #1
   11b1c:	str	r0, [sp, #108]	; 0x6c
   11b20:	beq	12ac8 <__assert_fail@plt+0x19e0>
   11b24:	mov	r6, r7
   11b28:	mov	r4, #8192	; 0x2000
   11b2c:	mov	r7, r5
   11b30:	subs	r0, r6, r4
   11b34:	mov	r1, sl
   11b38:	sbcs	r0, r7, #0
   11b3c:	mov	r0, r9
   11b40:	movcc	r4, r6
   11b44:	mov	r2, r4
   11b48:	bl	14de0 <__assert_fail@plt+0x3cf8>
   11b4c:	cmp	r0, #0
   11b50:	beq	11b7c <__assert_fail@plt+0xa94>
   11b54:	mov	r5, r0
   11b58:	cmn	r0, #1
   11b5c:	beq	11c88 <__assert_fail@plt+0xba0>
   11b60:	mov	r0, sl
   11b64:	mov	r1, r5
   11b68:	bl	12e40 <__assert_fail@plt+0x1d58>
   11b6c:	subs	r6, r6, r5
   11b70:	sbc	r7, r7, #0
   11b74:	orrs	r0, r6, r7
   11b78:	bne	11b30 <__assert_fail@plt+0xa48>
   11b7c:	ldr	r7, [sp, #124]	; 0x7c
   11b80:	b	11c80 <__assert_fail@plt+0xb98>
   11b84:	movw	r0, #33120	; 0x8160
   11b88:	mvn	r2, #0
   11b8c:	movt	r0, #2
   11b90:	ldrb	r1, [r0]
   11b94:	mov	r0, #1
   11b98:	cmp	r1, #0
   11b9c:	mvn	r1, #0
   11ba0:	bne	11ce8 <__assert_fail@plt+0xc00>
   11ba4:	ldr	r0, [fp, #-120]	; 0xffffff88
   11ba8:	and	r0, r0, #53248	; 0xd000
   11bac:	orr	r0, r0, #8192	; 0x2000
   11bb0:	cmp	r0, #40960	; 0xa000
   11bb4:	bne	11cdc <__assert_fail@plt+0xbf4>
   11bb8:	mov	r0, #1
   11bbc:	mov	r2, #0
   11bc0:	mov	r3, #0
   11bc4:	stm	sp, {r0, r6}
   11bc8:	mov	r0, #0
   11bcc:	str	r0, [sp, #108]	; 0x6c
   11bd0:	mov	r0, r9
   11bd4:	bl	12d90 <__assert_fail@plt+0x1ca8>
   11bd8:	cmp	r1, #0
   11bdc:	bmi	12ac8 <__assert_fail@plt+0x19e0>
   11be0:	mov	r2, r0
   11be4:	movw	r0, #33120	; 0x8160
   11be8:	movt	r0, #2
   11bec:	ldrb	r0, [r0]
   11bf0:	b	11ce8 <__assert_fail@plt+0xc00>
   11bf4:	mov	r0, #1
   11bf8:	str	r0, [sp]
   11bfc:	mvn	r0, r7
   11c00:	add	r0, r0, r1
   11c04:	rsbs	r5, r0, #0
   11c08:	mov	r0, #0
   11c0c:	sbc	r6, r0, #0
   11c10:	mov	r0, r9
   11c14:	mov	r2, r5
   11c18:	mov	r3, r6
   11c1c:	bl	10f2c <lseek64@plt>
   11c20:	add	r4, r7, #1
   11c24:	ldr	r7, [sp, #124]	; 0x7c
   11c28:	cmn	r1, #1
   11c2c:	bgt	11c74 <__assert_fail@plt+0xb8c>
   11c30:	mov	r0, r9
   11c34:	sub	r1, fp, #136	; 0x88
   11c38:	bl	166bc <__assert_fail@plt+0x55d4>
   11c3c:	cmp	r0, #0
   11c40:	bne	11c54 <__assert_fail@plt+0xb6c>
   11c44:	ldr	r0, [fp, #-120]	; 0xffffff88
   11c48:	and	r0, r0, #61440	; 0xf000
   11c4c:	cmp	r0, #32768	; 0x8000
   11c50:	bne	11c74 <__assert_fail@plt+0xb8c>
   11c54:	mov	r0, #1
   11c58:	mov	r2, r5
   11c5c:	mov	r3, r6
   11c60:	str	r0, [sp]
   11c64:	ldr	r0, [sp, #100]	; 0x64
   11c68:	str	r0, [sp, #4]
   11c6c:	mov	r0, r9
   11c70:	bl	12d90 <__assert_fail@plt+0x1ca8>
   11c74:	mov	r0, sl
   11c78:	mov	r1, r4
   11c7c:	bl	12e40 <__assert_fail@plt+0x1d58>
   11c80:	ldr	r6, [sp, #100]	; 0x64
   11c84:	b	12ac8 <__assert_fail@plt+0x19e0>
   11c88:	bl	11004 <__errno_location@plt>
   11c8c:	movw	r1, #28299	; 0x6e8b
   11c90:	ldr	r4, [r0]
   11c94:	mov	r0, #0
   11c98:	mov	r2, #5
   11c9c:	movt	r1, #1
   11ca0:	str	r0, [sp, #108]	; 0x6c
   11ca4:	mov	r0, #0
   11ca8:	bl	10ee4 <dcgettext@plt>
   11cac:	ldr	r6, [sp, #100]	; 0x64
   11cb0:	mov	r5, r0
   11cb4:	mov	r0, #4
   11cb8:	mov	r1, r6
   11cbc:	bl	1495c <__assert_fail@plt+0x3874>
   11cc0:	mov	r3, r0
   11cc4:	mov	r0, #0
   11cc8:	mov	r1, r4
   11ccc:	mov	r2, r5
   11cd0:	bl	10f68 <error@plt>
   11cd4:	ldr	r7, [sp, #124]	; 0x7c
   11cd8:	b	12ac8 <__assert_fail@plt+0x19e0>
   11cdc:	mov	r0, #0
   11ce0:	mvn	r2, #0
   11ce4:	mvn	r1, #0
   11ce8:	cmp	r1, #0
   11cec:	str	r1, [sp, #44]	; 0x2c
   11cf0:	mov	r1, #0
   11cf4:	str	r2, [sp, #40]	; 0x28
   11cf8:	ldr	r3, [sp, #68]	; 0x44
   11cfc:	str	r9, [sp, #104]	; 0x68
   11d00:	movwmi	r1, #1
   11d04:	orr	r2, r0, r1
   11d08:	ldr	r0, [sp, #28]
   11d0c:	tst	r3, #1
   11d10:	ldr	r4, [r0]
   11d14:	ldr	r1, [r0, #4]
   11d18:	beq	11f78 <__assert_fail@plt+0xe90>
   11d1c:	cmp	r2, #0
   11d20:	bne	1203c <__assert_fail@plt+0xf54>
   11d24:	ldr	r2, [fp, #-80]	; 0xffffffb0
   11d28:	mov	r6, #0
   11d2c:	subs	r3, r2, #536870913	; 0x20000001
   11d30:	rscs	r3, r6, r2, asr #31
   11d34:	mov	r3, #0
   11d38:	movwcc	r3, #1
   11d3c:	rsbs	r7, r2, #0
   11d40:	sbcs	r7, r6, r2, asr #31
   11d44:	mov	r7, #0
   11d48:	mov	r6, #512	; 0x200
   11d4c:	movwlt	r7, #1
   11d50:	ands	r3, r7, r3
   11d54:	ldr	r7, [sp, #124]	; 0x7c
   11d58:	asrne	r3, r2, #31
   11d5c:	moveq	r2, r6
   11d60:	ldr	r6, [sp, #100]	; 0x64
   11d64:	subs	r2, r2, r4
   11d68:	sbcs	r2, r3, r1
   11d6c:	bge	1203c <__assert_fail@plt+0xf54>
   11d70:	mov	r0, #1
   11d74:	ldr	r3, [sp, #40]	; 0x28
   11d78:	str	r0, [sp, #108]	; 0x6c
   11d7c:	ldr	r0, [sp, #44]	; 0x2c
   11d80:	subs	r2, r3, r4
   11d84:	sbcs	r2, r0, r1
   11d88:	bge	12ac8 <__assert_fail@plt+0x19e0>
   11d8c:	subs	r2, r4, r3
   11d90:	mov	r8, #0
   11d94:	str	r6, [sp, #4]
   11d98:	sbc	r3, r1, r0
   11d9c:	mov	r0, r9
   11da0:	str	r8, [sp]
   11da4:	asr	r3, r3, #31
   11da8:	add	r3, r2, r3, lsr #19
   11dac:	bfc	r3, #0, #13
   11db0:	subs	r5, r2, r3
   11db4:	movweq	r5, #8192	; 0x2000
   11db8:	subs	r9, r4, r5
   11dbc:	sbc	r4, r1, #0
   11dc0:	mov	r2, r9
   11dc4:	mov	r3, r4
   11dc8:	bl	12d90 <__assert_fail@plt+0x1ca8>
   11dcc:	cmp	r1, #0
   11dd0:	bmi	12ab4 <__assert_fail@plt+0x19cc>
   11dd4:	ldr	r0, [sp, #104]	; 0x68
   11dd8:	add	r1, sp, #128	; 0x80
   11ddc:	mov	r2, r5
   11de0:	bl	14de0 <__assert_fail@plt+0x3cf8>
   11de4:	cmn	r0, #1
   11de8:	beq	11f30 <__assert_fail@plt+0xe48>
   11dec:	ldr	r2, [sp, #124]	; 0x7c
   11df0:	ldr	r3, [sp, #96]	; 0x60
   11df4:	mov	r6, r0
   11df8:	orrs	sl, r2, r3
   11dfc:	mov	r7, r2
   11e00:	mov	r5, r3
   11e04:	beq	11e4c <__assert_fail@plt+0xd64>
   11e08:	cmp	r6, #0
   11e0c:	mov	r7, r2
   11e10:	mov	r5, r3
   11e14:	beq	11e4c <__assert_fail@plt+0xd64>
   11e18:	movw	r1, #33119	; 0x815f
   11e1c:	add	r0, sp, #128	; 0x80
   11e20:	subs	r7, r2, #1
   11e24:	movt	r1, #2
   11e28:	add	r0, r6, r0
   11e2c:	sbc	r5, r3, #0
   11e30:	ldrb	r0, [r0, #-1]
   11e34:	ldrb	r1, [r1]
   11e38:	cmp	r1, #0
   11e3c:	movwne	r1, #10
   11e40:	cmp	r1, r0
   11e44:	moveq	r5, r3
   11e48:	moveq	r7, r2
   11e4c:	movw	r0, #33119	; 0x815f
   11e50:	str	r4, [sp, #108]	; 0x6c
   11e54:	movt	r0, #2
   11e58:	ldrb	r4, [r0]
   11e5c:	cmp	r4, #0
   11e60:	movwne	r4, #10
   11e64:	cmp	r6, #0
   11e68:	beq	11eb8 <__assert_fail@plt+0xdd0>
   11e6c:	cmp	sl, #0
   11e70:	beq	11e98 <__assert_fail@plt+0xdb0>
   11e74:	add	r0, sp, #128	; 0x80
   11e78:	mov	r1, r4
   11e7c:	mov	r2, r6
   11e80:	bl	10ff8 <memrchr@plt>
   11e84:	cmp	r0, #0
   11e88:	beq	11eb8 <__assert_fail@plt+0xdd0>
   11e8c:	add	r1, sp, #128	; 0x80
   11e90:	sub	r6, r0, r1
   11e94:	b	11e9c <__assert_fail@plt+0xdb4>
   11e98:	sub	r6, r6, #1
   11e9c:	subs	r0, r7, #1
   11ea0:	sbc	r1, r5, #0
   11ea4:	orrs	r2, r7, r5
   11ea8:	mov	r7, r0
   11eac:	mov	r5, r1
   11eb0:	bne	11e64 <__assert_fail@plt+0xd7c>
   11eb4:	b	129f4 <__assert_fail@plt+0x190c>
   11eb8:	ldr	r0, [sp, #40]	; 0x28
   11ebc:	ldr	r1, [sp, #44]	; 0x2c
   11ec0:	ldr	r4, [sp, #108]	; 0x6c
   11ec4:	mov	r8, #1
   11ec8:	eor	r0, r9, r0
   11ecc:	eor	r1, r4, r1
   11ed0:	orrs	r0, r0, r1
   11ed4:	beq	12ab4 <__assert_fail@plt+0x19cc>
   11ed8:	ldr	r0, [sp, #100]	; 0x64
   11edc:	subs	r9, r9, #8192	; 0x2000
   11ee0:	mov	r8, #0
   11ee4:	sbc	r4, r4, #0
   11ee8:	mov	r2, r9
   11eec:	str	r8, [sp]
   11ef0:	mov	r3, r4
   11ef4:	str	r0, [sp, #4]
   11ef8:	ldr	r0, [sp, #104]	; 0x68
   11efc:	bl	12d90 <__assert_fail@plt+0x1ca8>
   11f00:	cmp	r1, #0
   11f04:	bmi	12ab4 <__assert_fail@plt+0x19cc>
   11f08:	ldr	r0, [sp, #104]	; 0x68
   11f0c:	add	r1, sp, #128	; 0x80
   11f10:	mov	r2, #8192	; 0x2000
   11f14:	bl	14de0 <__assert_fail@plt+0x3cf8>
   11f18:	cmp	r0, #0
   11f1c:	mov	r8, #1
   11f20:	beq	12ab4 <__assert_fail@plt+0x19cc>
   11f24:	mov	r6, r0
   11f28:	cmn	r0, #1
   11f2c:	bne	11e4c <__assert_fail@plt+0xd64>
   11f30:	bl	11004 <__errno_location@plt>
   11f34:	movw	r1, #28299	; 0x6e8b
   11f38:	ldr	r4, [r0]
   11f3c:	mov	r0, #0
   11f40:	mov	r2, #5
   11f44:	mov	r8, #0
   11f48:	movt	r1, #1
   11f4c:	bl	10ee4 <dcgettext@plt>
   11f50:	ldr	r1, [sp, #100]	; 0x64
   11f54:	mov	r5, r0
   11f58:	mov	r0, #4
   11f5c:	bl	1495c <__assert_fail@plt+0x3874>
   11f60:	mov	r3, r0
   11f64:	mov	r0, #0
   11f68:	mov	r1, r4
   11f6c:	mov	r2, r5
   11f70:	bl	10f68 <error@plt>
   11f74:	b	12ab4 <__assert_fail@plt+0x19cc>
   11f78:	cmp	r2, #0
   11f7c:	bne	120ac <__assert_fail@plt+0xfc4>
   11f80:	ldr	r2, [fp, #-80]	; 0xffffffb0
   11f84:	mov	r6, #0
   11f88:	subs	r3, r2, #536870913	; 0x20000001
   11f8c:	rscs	r3, r6, r2, asr #31
   11f90:	mov	r3, #0
   11f94:	movwcc	r3, #1
   11f98:	rsbs	r7, r2, #0
   11f9c:	sbcs	r7, r6, r2, asr #31
   11fa0:	mov	r7, #0
   11fa4:	mov	r6, #512	; 0x200
   11fa8:	movwlt	r7, #1
   11fac:	ands	r3, r7, r3
   11fb0:	ldr	r7, [sp, #124]	; 0x7c
   11fb4:	asrne	r3, r2, #31
   11fb8:	moveq	r2, r6
   11fbc:	ldr	r6, [sp, #100]	; 0x64
   11fc0:	subs	r2, r2, r4
   11fc4:	sbcs	r2, r3, r1
   11fc8:	bge	120ac <__assert_fail@plt+0xfc4>
   11fcc:	ldr	r0, [sp, #40]	; 0x28
   11fd0:	ldr	r3, [sp, #96]	; 0x60
   11fd4:	subs	r2, r4, r0
   11fd8:	ldr	r0, [sp, #44]	; 0x2c
   11fdc:	sbc	r0, r1, r0
   11fe0:	rsbs	r1, r2, #0
   11fe4:	rscs	r1, r0, #0
   11fe8:	mov	r1, #0
   11fec:	movwlt	r1, #1
   11ff0:	cmp	r1, #0
   11ff4:	moveq	r0, r1
   11ff8:	movne	r1, r2
   11ffc:	mov	r2, #1
   12000:	str	r2, [sp, #108]	; 0x6c
   12004:	subs	r2, r7, r1
   12008:	sbcs	r2, r3, r0
   1200c:	bcs	12ac8 <__assert_fail@plt+0x19e0>
   12010:	subs	r2, r1, r7
   12014:	sbc	r3, r0, r3
   12018:	mov	r0, r9
   1201c:	bl	12ec4 <__assert_fail@plt+0x1ddc>
   12020:	cmp	r0, #0
   12024:	beq	12ac8 <__assert_fail@plt+0x19e0>
   12028:	mov	r1, r6
   1202c:	bl	12f58 <__assert_fail@plt+0x1e70>
   12030:	mov	r0, #0
   12034:	str	r0, [sp, #108]	; 0x6c
   12038:	b	12ac8 <__assert_fail@plt+0x19e0>
   1203c:	movw	r0, #8208	; 0x2010
   12040:	bl	15304 <__assert_fail@plt+0x421c>
   12044:	mov	r2, #0
   12048:	movw	r1, #8196	; 0x2004
   1204c:	mov	r4, r0
   12050:	str	r2, [r0, r1]!
   12054:	mov	r1, #0
   12058:	str	r2, [r0, #4]
   1205c:	str	r2, [r0, #8]
   12060:	movw	r0, #8208	; 0x2010
   12064:	str	r1, [sp, #108]	; 0x6c
   12068:	bl	15304 <__assert_fail@plt+0x421c>
   1206c:	mov	r5, r0
   12070:	mov	r0, r9
   12074:	mov	r2, #8192	; 0x2000
   12078:	mov	r1, r5
   1207c:	bl	14de0 <__assert_fail@plt+0x3cf8>
   12080:	mov	r8, r0
   12084:	add	r0, r0, #1
   12088:	str	r4, [sp, #84]	; 0x54
   1208c:	cmp	r0, #2
   12090:	bcs	121e4 <__assert_fail@plt+0x10fc>
   12094:	ldr	r0, [sp, #40]	; 0x28
   12098:	str	r4, [sp, #92]	; 0x5c
   1209c:	str	r0, [sp, #48]	; 0x30
   120a0:	ldr	r0, [sp, #44]	; 0x2c
   120a4:	str	r0, [sp, #52]	; 0x34
   120a8:	b	125cc <__assert_fail@plt+0x14e4>
   120ac:	ldr	r0, [sp, #24]
   120b0:	cmp	r0, #0
   120b4:	bne	12cc4 <__assert_fail@plt+0x1bdc>
   120b8:	cmp	r7, #1048576	; 0x100000
   120bc:	bhi	123b8 <__assert_fail@plt+0x12d0>
   120c0:	ldr	r4, [sp, #64]	; 0x40
   120c4:	mov	r0, #2
   120c8:	mov	r1, r4
   120cc:	bl	153d4 <__assert_fail@plt+0x42ec>
   120d0:	mov	r8, r0
   120d4:	str	r0, [sp, #128]	; 0x80
   120d8:	add	r0, r0, r4
   120dc:	mov	r9, #0
   120e0:	mov	r5, #1
   120e4:	str	r0, [sp, #132]	; 0x84
   120e8:	ldr	r0, [sp, #40]	; 0x28
   120ec:	str	r8, [sp, #84]	; 0x54
   120f0:	str	r0, [sp, #88]	; 0x58
   120f4:	ldr	r0, [sp, #44]	; 0x2c
   120f8:	str	r0, [sp, #92]	; 0x5c
   120fc:	ldr	r6, [sp, #64]	; 0x40
   12100:	ldr	r0, [sp, #104]	; 0x68
   12104:	mov	r1, r8
   12108:	mov	r2, r6
   1210c:	bl	13120 <__assert_fail@plt+0x2038>
   12110:	cmp	r0, r6
   12114:	mov	r4, r0
   12118:	mov	r0, #0
   1211c:	mov	r6, #0
   12120:	bcs	12154 <__assert_fail@plt+0x106c>
   12124:	bl	11004 <__errno_location@plt>
   12128:	ldr	r7, [r0]
   1212c:	cmp	r7, #0
   12130:	bne	127bc <__assert_fail@plt+0x16d4>
   12134:	ldr	r7, [sp, #124]	; 0x7c
   12138:	mov	r6, #1
   1213c:	mov	r0, #0
   12140:	cmp	r4, r7
   12144:	bhi	12154 <__assert_fail@plt+0x106c>
   12148:	tst	r5, #1
   1214c:	sub	r0, r7, r4
   12150:	movwne	r0, #0
   12154:	tst	r5, #1
   12158:	beq	12164 <__assert_fail@plt+0x107c>
   1215c:	ldr	r5, [sp, #88]	; 0x58
   12160:	b	1219c <__assert_fail@plt+0x10b4>
   12164:	ldr	r1, [sp, #124]	; 0x7c
   12168:	sub	r7, r1, r0
   1216c:	mov	r0, #1
   12170:	bic	r0, r0, r9
   12174:	mov	r1, r7
   12178:	ldr	r0, [sl, r0, lsl #2]
   1217c:	add	r0, r0, #8192	; 0x2000
   12180:	bl	12e40 <__assert_fail@plt+0x1d58>
   12184:	ldr	r5, [sp, #88]	; 0x58
   12188:	ldr	r0, [sp, #92]	; 0x5c
   1218c:	adds	r5, r5, r7
   12190:	ldr	r7, [sp, #124]	; 0x7c
   12194:	adc	r0, r0, #0
   12198:	str	r0, [sp, #92]	; 0x5c
   1219c:	cmp	r4, r7
   121a0:	bls	121c4 <__assert_fail@plt+0x10dc>
   121a4:	sub	r4, r4, r7
   121a8:	mov	r0, r8
   121ac:	mov	r1, r4
   121b0:	bl	12e40 <__assert_fail@plt+0x1d58>
   121b4:	ldr	r0, [sp, #92]	; 0x5c
   121b8:	adds	r5, r5, r4
   121bc:	adc	r0, r0, #0
   121c0:	str	r0, [sp, #92]	; 0x5c
   121c4:	cmp	r6, #0
   121c8:	bne	1255c <__assert_fail@plt+0x1474>
   121cc:	eor	r9, r9, #1
   121d0:	str	r5, [sp, #88]	; 0x58
   121d4:	mov	r5, #0
   121d8:	and	r0, r9, #1
   121dc:	ldr	r8, [sl, r0, lsl #2]
   121e0:	b	120fc <__assert_fail@plt+0x1014>
   121e4:	ldr	r0, [sp, #96]	; 0x60
   121e8:	ldr	r1, [sp, #40]	; 0x28
   121ec:	orrs	r0, r7, r0
   121f0:	ldr	r0, [sp, #44]	; 0x2c
   121f4:	beq	1256c <__assert_fail@plt+0x1484>
   121f8:	str	r0, [sp, #52]	; 0x34
   121fc:	ldr	r0, [sp, #84]	; 0x54
   12200:	mov	r2, #0
   12204:	str	r1, [sp, #48]	; 0x30
   12208:	str	r2, [sp, #108]	; 0x6c
   1220c:	str	r0, [sp, #92]	; 0x5c
   12210:	mov	r6, r5
   12214:	movw	r9, #8196	; 0x2004
   12218:	mov	r0, #0
   1221c:	mov	r4, r5
   12220:	mov	sl, r5
   12224:	str	r8, [r6, r9]!
   12228:	str	r0, [r6, #4]
   1222c:	str	r0, [r6, #8]
   12230:	movw	r0, #33119	; 0x815f
   12234:	movt	r0, #2
   12238:	mov	r1, r0
   1223c:	ldrb	r0, [r0]
   12240:	cmp	r0, #0
   12244:	movwne	r0, #10
   12248:	strb	r0, [r4, r8]!
   1224c:	mov	r0, r5
   12250:	str	r5, [sp, #88]	; 0x58
   12254:	ldrb	r7, [r1]
   12258:	cmp	r7, #0
   1225c:	movwne	r7, #10
   12260:	mov	r1, r7
   12264:	bl	10f08 <rawmemchr@plt>
   12268:	ldr	r1, [sp, #92]	; 0x5c
   1226c:	ldr	r5, [r6, #4]
   12270:	add	r8, r1, r9
   12274:	cmp	r0, r4
   12278:	bcs	12294 <__assert_fail@plt+0x11ac>
   1227c:	add	r5, r5, #1
   12280:	add	r0, r0, #1
   12284:	mov	r1, r7
   12288:	str	r5, [r6, #4]
   1228c:	bl	10f08 <rawmemchr@plt>
   12290:	b	12274 <__assert_fail@plt+0x118c>
   12294:	ldr	r2, [r6]
   12298:	ldr	r0, [r8]
   1229c:	ldr	r7, [sp, #108]	; 0x6c
   122a0:	ldr	r9, [sp, #104]	; 0x68
   122a4:	mov	r3, #0
   122a8:	add	r1, r0, r2
   122ac:	add	r7, r5, r7
   122b0:	cmp	r3, r1, lsr #13
   122b4:	bne	122f8 <__assert_fail@plt+0x1210>
   122b8:	ldr	r1, [sp, #92]	; 0x5c
   122bc:	str	r7, [sp, #108]	; 0x6c
   122c0:	add	r0, r1, r0
   122c4:	ldr	r1, [sp, #88]	; 0x58
   122c8:	bl	10ec0 <memcpy@plt>
   122cc:	ldr	r0, [r6]
   122d0:	ldm	r8, {r1, r2}
   122d4:	ldr	r7, [sp, #124]	; 0x7c
   122d8:	mov	r5, sl
   122dc:	add	r0, r1, r0
   122e0:	str	r0, [r8]
   122e4:	ldr	r0, [r6, #4]
   122e8:	ldr	r6, [sp, #100]	; 0x64
   122ec:	add	r0, r2, r0
   122f0:	str	r0, [r8, #4]
   122f4:	b	12394 <__assert_fail@plt+0x12ac>
   122f8:	ldr	r2, [sp, #84]	; 0x54
   122fc:	movw	r0, #8196	; 0x2004
   12300:	str	sl, [r8, #8]
   12304:	ldr	r1, [sp, #124]	; 0x7c
   12308:	mov	r6, r7
   1230c:	add	r4, r2, r0
   12310:	ldr	r0, [r4, #4]
   12314:	sub	r0, r7, r0
   12318:	subs	r0, r1, r0
   1231c:	ldr	r0, [sp, #96]	; 0x60
   12320:	sbcs	r0, r0, #0
   12324:	bcs	12374 <__assert_fail@plt+0x128c>
   12328:	ldr	r7, [r4]
   1232c:	mov	r0, r2
   12330:	mov	r5, r2
   12334:	mov	r1, r7
   12338:	bl	12e40 <__assert_fail@plt+0x1d58>
   1233c:	ldr	r0, [sp, #48]	; 0x30
   12340:	adds	r0, r0, r7
   12344:	ldr	r7, [sp, #124]	; 0x7c
   12348:	str	r0, [sp, #48]	; 0x30
   1234c:	ldr	r0, [sp, #52]	; 0x34
   12350:	adc	r0, r0, #0
   12354:	str	r0, [sp, #52]	; 0x34
   12358:	ldmib	r4, {r0, r1}
   1235c:	str	sl, [sp, #92]	; 0x5c
   12360:	str	r1, [sp, #84]	; 0x54
   12364:	sub	r6, r6, r0
   12368:	str	r6, [sp, #108]	; 0x6c
   1236c:	ldr	r6, [sp, #100]	; 0x64
   12370:	b	12394 <__assert_fail@plt+0x12ac>
   12374:	movw	r0, #8208	; 0x2010
   12378:	mov	r5, r1
   1237c:	str	r6, [sp, #108]	; 0x6c
   12380:	bl	15304 <__assert_fail@plt+0x421c>
   12384:	ldr	r6, [sp, #100]	; 0x64
   12388:	mov	r7, r5
   1238c:	mov	r5, r0
   12390:	str	sl, [sp, #92]	; 0x5c
   12394:	mov	r0, r9
   12398:	mov	r1, r5
   1239c:	mov	r2, #8192	; 0x2000
   123a0:	bl	14de0 <__assert_fail@plt+0x3cf8>
   123a4:	mov	r8, r0
   123a8:	add	r0, r0, #1
   123ac:	cmp	r0, #1
   123b0:	bhi	12210 <__assert_fail@plt+0x1128>
   123b4:	b	125cc <__assert_fail@plt+0x14e4>
   123b8:	ldr	r0, [sp, #40]	; 0x28
   123bc:	mov	r6, #0
   123c0:	mov	r7, #1
   123c4:	mov	r8, #0
   123c8:	mov	sl, #0
   123cc:	str	r0, [sp, #88]	; 0x58
   123d0:	ldr	r0, [sp, #44]	; 0x2c
   123d4:	str	r0, [sp, #92]	; 0x5c
   123d8:	mov	r0, #0
   123dc:	str	r0, [sp, #52]	; 0x34
   123e0:	mov	r0, #0
   123e4:	str	r0, [sp, #84]	; 0x54
   123e8:	mov	r5, r7
   123ec:	cmp	r6, r8
   123f0:	bne	12430 <__assert_fail@plt+0x1348>
   123f4:	ldr	r4, [sp, #36]	; 0x24
   123f8:	ldr	r1, [sp, #84]	; 0x54
   123fc:	cmp	r6, #0
   12400:	beq	12414 <__assert_fail@plt+0x132c>
   12404:	ldr	r0, [sp, #32]
   12408:	ldr	r4, [sp, #72]	; 0x48
   1240c:	cmp	r6, r0
   12410:	lslls	r4, r6, #1
   12414:	mov	r0, r1
   12418:	mov	r1, r4
   1241c:	mov	r2, #4
   12420:	bl	152c8 <__assert_fail@plt+0x41e0>
   12424:	mov	r7, r0
   12428:	mov	r6, r4
   1242c:	b	12434 <__assert_fail@plt+0x134c>
   12430:	ldr	r7, [sp, #84]	; 0x54
   12434:	tst	sl, #1
   12438:	str	r7, [sp, #84]	; 0x54
   1243c:	beq	12448 <__assert_fail@plt+0x1360>
   12440:	ldr	r1, [r7, r8, lsl #2]
   12444:	b	12460 <__assert_fail@plt+0x1378>
   12448:	mov	r0, #8192	; 0x2000
   1244c:	bl	15304 <__assert_fail@plt+0x421c>
   12450:	mov	r1, r0
   12454:	str	r0, [r7, r8, lsl #2]
   12458:	add	r0, r8, #1
   1245c:	str	r0, [sp, #52]	; 0x34
   12460:	mov	r0, r9
   12464:	mov	r2, #8192	; 0x2000
   12468:	bl	13120 <__assert_fail@plt+0x2038>
   1246c:	mov	r9, #0
   12470:	mov	r4, r0
   12474:	cmp	r9, r0, lsr #13
   12478:	bne	12490 <__assert_fail@plt+0x13a8>
   1247c:	bl	11004 <__errno_location@plt>
   12480:	ldr	r7, [r0]
   12484:	mov	r9, #1
   12488:	cmp	r7, #0
   1248c:	bne	12818 <__assert_fail@plt+0x1730>
   12490:	ldr	r0, [sp, #60]	; 0x3c
   12494:	sub	r0, r8, r0
   12498:	clz	r0, r0
   1249c:	lsr	r0, r0, #5
   124a0:	orr	sl, sl, r0
   124a4:	tst	sl, #1
   124a8:	beq	124d4 <__assert_fail@plt+0x13ec>
   124ac:	ldr	r0, [sp, #84]	; 0x54
   124b0:	mov	r1, r4
   124b4:	ldr	r0, [r0, r5, lsl #2]
   124b8:	bl	12e40 <__assert_fail@plt+0x1d58>
   124bc:	ldr	r0, [sp, #88]	; 0x58
   124c0:	adds	r0, r0, r4
   124c4:	str	r0, [sp, #88]	; 0x58
   124c8:	ldr	r0, [sp, #92]	; 0x5c
   124cc:	adc	r0, r0, #0
   124d0:	str	r0, [sp, #92]	; 0x5c
   124d4:	ldr	r2, [sp, #72]	; 0x48
   124d8:	add	r0, r5, #1
   124dc:	cmp	r9, #0
   124e0:	ldr	r9, [sp, #104]	; 0x68
   124e4:	mov	r8, r5
   124e8:	udiv	r1, r0, r2
   124ec:	mls	r7, r1, r2, r0
   124f0:	ldr	r1, [sp, #56]	; 0x38
   124f4:	beq	123e8 <__assert_fail@plt+0x1300>
   124f8:	mov	r0, #1
   124fc:	cmp	r1, #0
   12500:	str	r0, [sp, #108]	; 0x6c
   12504:	beq	128c8 <__assert_fail@plt+0x17e0>
   12508:	tst	sl, #1
   1250c:	beq	1288c <__assert_fail@plt+0x17a4>
   12510:	ldr	r0, [sp, #88]	; 0x58
   12514:	ldr	r8, [sp, #84]	; 0x54
   12518:	adds	r0, r0, r1
   1251c:	str	r0, [sp, #88]	; 0x58
   12520:	ldr	r0, [sp, #92]	; 0x5c
   12524:	adc	r0, r0, #0
   12528:	str	r0, [sp, #92]	; 0x5c
   1252c:	ldr	r0, [r8, r5, lsl #2]
   12530:	add	r0, r0, r4
   12534:	rsb	r4, r4, #8192	; 0x2000
   12538:	cmp	r1, r4
   1253c:	bcc	12554 <__assert_fail@plt+0x146c>
   12540:	mov	r6, r1
   12544:	mov	r1, r4
   12548:	bl	12e40 <__assert_fail@plt+0x1d58>
   1254c:	ldr	r0, [r8, r7, lsl #2]
   12550:	sub	r1, r6, r4
   12554:	bl	12e40 <__assert_fail@plt+0x1d58>
   12558:	b	128c8 <__assert_fail@plt+0x17e0>
   1255c:	ldr	r6, [sp, #100]	; 0x64
   12560:	mov	r0, #1
   12564:	str	r0, [sp, #108]	; 0x6c
   12568:	b	12808 <__assert_fail@plt+0x1720>
   1256c:	mov	sl, r5
   12570:	mov	r7, r8
   12574:	mov	r4, r1
   12578:	mov	r5, r0
   1257c:	mov	r0, sl
   12580:	mov	r1, r7
   12584:	bl	12e40 <__assert_fail@plt+0x1d58>
   12588:	mov	r0, r9
   1258c:	mov	r1, sl
   12590:	mov	r2, #8192	; 0x2000
   12594:	bl	14de0 <__assert_fail@plt+0x3cf8>
   12598:	mov	r8, r0
   1259c:	adds	r4, r4, r7
   125a0:	add	r0, r0, #1
   125a4:	adc	r5, r5, #0
   125a8:	cmp	r0, #2
   125ac:	mov	r7, r8
   125b0:	bcs	1257c <__assert_fail@plt+0x1494>
   125b4:	ldr	r0, [sp, #84]	; 0x54
   125b8:	ldr	r7, [sp, #124]	; 0x7c
   125bc:	str	r5, [sp, #52]	; 0x34
   125c0:	str	r4, [sp, #48]	; 0x30
   125c4:	mov	r5, sl
   125c8:	str	r0, [sp, #92]	; 0x5c
   125cc:	mov	r0, r5
   125d0:	bl	130f8 <__assert_fail@plt+0x2010>
   125d4:	cmn	r8, #1
   125d8:	beq	12640 <__assert_fail@plt+0x1558>
   125dc:	ldr	r2, [sp, #92]	; 0x5c
   125e0:	movw	r0, #8196	; 0x2004
   125e4:	ldr	r8, [sp, #48]	; 0x30
   125e8:	add	r0, r2, r0
   125ec:	ldr	r1, [r0]
   125f0:	cmp	r1, #0
   125f4:	beq	12698 <__assert_fail@plt+0x15b0>
   125f8:	add	r1, r1, r2
   125fc:	movw	r2, #33119	; 0x815f
   12600:	ldr	r6, [sp, #84]	; 0x54
   12604:	ldr	r3, [sp, #108]	; 0x6c
   12608:	movw	r4, #8200	; 0x2008
   1260c:	movt	r2, #2
   12610:	ldrb	r1, [r1, #-1]
   12614:	ldrb	r2, [r2]
   12618:	cmp	r2, #0
   1261c:	movwne	r2, #10
   12620:	cmp	r2, r1
   12624:	beq	12638 <__assert_fail@plt+0x1550>
   12628:	ldr	r1, [r0, #4]
   1262c:	add	r3, r3, #1
   12630:	add	r1, r1, #1
   12634:	str	r1, [r0, #4]
   12638:	ldr	r2, [sp, #96]	; 0x60
   1263c:	b	126a8 <__assert_fail@plt+0x15c0>
   12640:	bl	11004 <__errno_location@plt>
   12644:	movw	r1, #28299	; 0x6e8b
   12648:	ldr	r4, [r0]
   1264c:	mov	r0, #0
   12650:	mov	r2, #5
   12654:	movt	r1, #1
   12658:	str	r0, [sp, #108]	; 0x6c
   1265c:	mov	r0, #0
   12660:	bl	10ee4 <dcgettext@plt>
   12664:	mov	r7, r0
   12668:	mov	r0, #4
   1266c:	mov	r1, r6
   12670:	bl	1495c <__assert_fail@plt+0x3874>
   12674:	mov	r2, r7
   12678:	ldr	r7, [sp, #124]	; 0x7c
   1267c:	mov	r3, r0
   12680:	mov	r0, #0
   12684:	mov	r1, r4
   12688:	bl	10f68 <error@plt>
   1268c:	ldr	r8, [sp, #48]	; 0x30
   12690:	movw	sl, #8204	; 0x200c
   12694:	b	12984 <__assert_fail@plt+0x189c>
   12698:	ldr	r2, [sp, #96]	; 0x60
   1269c:	ldr	r6, [sp, #84]	; 0x54
   126a0:	ldr	r3, [sp, #108]	; 0x6c
   126a4:	movw	r4, #8200	; 0x2008
   126a8:	mov	r5, r6
   126ac:	ldr	r0, [r5, r4]!
   126b0:	sub	r1, r3, r0
   126b4:	subs	r1, r7, r1
   126b8:	sbcs	r1, r2, #0
   126bc:	bcs	12724 <__assert_fail@plt+0x163c>
   126c0:	ldr	sl, [sp, #52]	; 0x34
   126c4:	movw	r9, #8200	; 0x2008
   126c8:	mov	r4, r6
   126cc:	movw	r0, #8196	; 0x2004
   126d0:	ldr	r7, [r4, r0]!
   126d4:	mov	r0, r6
   126d8:	mov	r6, r3
   126dc:	mov	r1, r7
   126e0:	bl	12e40 <__assert_fail@plt+0x1d58>
   126e4:	mov	r3, r6
   126e8:	ldr	r6, [r4, #8]
   126ec:	ldr	r1, [r5]
   126f0:	adds	r8, r8, r7
   126f4:	ldr	r7, [sp, #124]	; 0x7c
   126f8:	ldr	r2, [sp, #96]	; 0x60
   126fc:	adc	sl, sl, #0
   12700:	mov	r4, r6
   12704:	sub	r3, r3, r1
   12708:	ldr	r0, [r4, r9]!
   1270c:	mov	r5, r4
   12710:	sub	r1, r3, r0
   12714:	subs	r1, r7, r1
   12718:	sbcs	r1, r2, #0
   1271c:	bcc	126c8 <__assert_fail@plt+0x15e0>
   12720:	b	1272c <__assert_fail@plt+0x1644>
   12724:	ldr	sl, [sp, #52]	; 0x34
   12728:	mov	r4, r5
   1272c:	subs	r1, r7, r3
   12730:	movw	ip, #8196	; 0x2004
   12734:	str	sl, [sp, #52]	; 0x34
   12738:	sbcs	r1, r2, #0
   1273c:	bcs	127ac <__assert_fail@plt+0x16c4>
   12740:	mov	r1, #1
   12744:	movw	sl, #8204	; 0x200c
   12748:	str	r8, [sp, #48]	; 0x30
   1274c:	str	r1, [sp, #108]	; 0x6c
   12750:	subs	r1, r3, r7
   12754:	beq	12864 <__assert_fail@plt+0x177c>
   12758:	sub	r5, r7, r3
   1275c:	add	r7, r0, #1
   12760:	movw	r0, #33119	; 0x815f
   12764:	ldr	r1, [r6, ip]
   12768:	movt	r0, #2
   1276c:	ldrb	r9, [r0]
   12770:	mov	r0, r6
   12774:	add	r8, r6, r1
   12778:	cmp	r9, #0
   1277c:	movwne	r9, #10
   12780:	sub	r2, r8, r0
   12784:	mov	r1, r9
   12788:	bl	11058 <memchr@plt>
   1278c:	cmp	r0, #0
   12790:	beq	12950 <__assert_fail@plt+0x1868>
   12794:	str	r7, [r4]
   12798:	adds	r5, r5, #1
   1279c:	add	r7, r7, #1
   127a0:	add	r0, r0, #1
   127a4:	bcc	12780 <__assert_fail@plt+0x1698>
   127a8:	b	12954 <__assert_fail@plt+0x186c>
   127ac:	mov	r0, #1
   127b0:	movw	sl, #8204	; 0x200c
   127b4:	str	r0, [sp, #108]	; 0x6c
   127b8:	b	1297c <__assert_fail@plt+0x1894>
   127bc:	movw	r1, #28299	; 0x6e8b
   127c0:	mov	r0, #0
   127c4:	mov	r2, #5
   127c8:	movt	r1, #1
   127cc:	str	r0, [sp, #108]	; 0x6c
   127d0:	mov	r0, #0
   127d4:	bl	10ee4 <dcgettext@plt>
   127d8:	ldr	r6, [sp, #100]	; 0x64
   127dc:	mov	r4, r0
   127e0:	mov	r0, #4
   127e4:	mov	r1, r6
   127e8:	bl	1495c <__assert_fail@plt+0x3874>
   127ec:	mov	r3, r0
   127f0:	mov	r0, #0
   127f4:	mov	r1, r7
   127f8:	mov	r2, r4
   127fc:	bl	10f68 <error@plt>
   12800:	ldr	r7, [sp, #124]	; 0x7c
   12804:	ldr	r5, [sp, #88]	; 0x58
   12808:	ldr	r0, [sp, #84]	; 0x54
   1280c:	bl	130f8 <__assert_fail@plt+0x2010>
   12810:	ldr	r9, [sp, #104]	; 0x68
   12814:	b	12900 <__assert_fail@plt+0x1818>
   12818:	movw	r1, #28299	; 0x6e8b
   1281c:	mov	r0, #0
   12820:	mov	r2, #5
   12824:	movt	r1, #1
   12828:	str	r0, [sp, #108]	; 0x6c
   1282c:	mov	r0, #0
   12830:	bl	10ee4 <dcgettext@plt>
   12834:	ldr	r6, [sp, #100]	; 0x64
   12838:	mov	r4, r0
   1283c:	mov	r0, #4
   12840:	mov	r1, r6
   12844:	bl	1495c <__assert_fail@plt+0x3874>
   12848:	mov	r3, r0
   1284c:	mov	r0, #0
   12850:	mov	r1, r7
   12854:	mov	r2, r4
   12858:	bl	10f68 <error@plt>
   1285c:	ldr	r9, [sp, #104]	; 0x68
   12860:	b	128cc <__assert_fail@plt+0x17e4>
   12864:	mov	r0, r6
   12868:	b	12954 <__assert_fail@plt+0x186c>
   1286c:	bl	11004 <__errno_location@plt>
   12870:	ldr	r4, [r0]
   12874:	movw	r1, #28299	; 0x6e8b
   12878:	mov	r0, #0
   1287c:	str	r0, [sp, #108]	; 0x6c
   12880:	mov	r0, #0
   12884:	movt	r1, #1
   12888:	b	11a24 <__assert_fail@plt+0x93c>
   1288c:	ldr	r0, [sp, #60]	; 0x3c
   12890:	cmp	r5, r0
   12894:	bne	128c8 <__assert_fail@plt+0x17e0>
   12898:	ldr	r0, [sp, #84]	; 0x54
   1289c:	ldr	r1, [sp, #20]
   128a0:	ldr	r0, [r0, r7, lsl #2]
   128a4:	sub	r4, r4, r1
   128a8:	mov	r1, r4
   128ac:	bl	12e40 <__assert_fail@plt+0x1d58>
   128b0:	ldr	r0, [sp, #88]	; 0x58
   128b4:	adds	r0, r0, r4
   128b8:	str	r0, [sp, #88]	; 0x58
   128bc:	ldr	r0, [sp, #92]	; 0x5c
   128c0:	adc	r0, r0, #0
   128c4:	str	r0, [sp, #92]	; 0x5c
   128c8:	ldr	r6, [sp, #100]	; 0x64
   128cc:	add	sl, sp, #128	; 0x80
   128d0:	ldr	r5, [sp, #52]	; 0x34
   128d4:	ldr	r7, [sp, #124]	; 0x7c
   128d8:	cmp	r5, #0
   128dc:	beq	128f4 <__assert_fail@plt+0x180c>
   128e0:	ldr	r4, [sp, #84]	; 0x54
   128e4:	ldr	r0, [r4], #4
   128e8:	bl	130f8 <__assert_fail@plt+0x2010>
   128ec:	subs	r5, r5, #1
   128f0:	bne	128e4 <__assert_fail@plt+0x17fc>
   128f4:	ldr	r0, [sp, #84]	; 0x54
   128f8:	bl	130f8 <__assert_fail@plt+0x2010>
   128fc:	ldr	r5, [sp, #88]	; 0x58
   12900:	ldr	r0, [sp, #40]	; 0x28
   12904:	mvn	r4, #0
   12908:	subs	r0, r4, r0
   1290c:	ldr	r0, [sp, #44]	; 0x2c
   12910:	sbcs	r0, r4, r0
   12914:	bge	12ac8 <__assert_fail@plt+0x19e0>
   12918:	ldr	r3, [sp, #92]	; 0x5c
   1291c:	mov	r0, #0
   12920:	mov	r2, r5
   12924:	stm	sp, {r0, r6}
   12928:	mov	r0, r9
   1292c:	bl	12d90 <__assert_fail@plt+0x1ca8>
   12930:	subs	r0, r4, r0
   12934:	sbcs	r0, r4, r1
   12938:	ldr	r1, [sp, #108]	; 0x6c
   1293c:	mov	r0, #0
   12940:	movwlt	r0, #1
   12944:	and	r1, r1, r0
   12948:	str	r1, [sp, #108]	; 0x6c
   1294c:	b	12ac8 <__assert_fail@plt+0x19e0>
   12950:	mov	r0, #0
   12954:	sub	r7, r0, r6
   12958:	mov	r0, r6
   1295c:	mov	r1, r7
   12960:	bl	12e40 <__assert_fail@plt+0x1d58>
   12964:	ldr	r8, [sp, #48]	; 0x30
   12968:	ldr	r0, [sp, #52]	; 0x34
   1296c:	adds	r8, r8, r7
   12970:	adc	r0, r0, r7, asr #31
   12974:	ldr	r7, [sp, #124]	; 0x7c
   12978:	str	r0, [sp, #52]	; 0x34
   1297c:	ldr	r6, [sp, #100]	; 0x64
   12980:	ldr	r9, [sp, #104]	; 0x68
   12984:	ldr	r0, [sp, #84]	; 0x54
   12988:	cmp	r0, #0
   1298c:	beq	129a4 <__assert_fail@plt+0x18bc>
   12990:	ldr	r4, [r0, sl]
   12994:	bl	130f8 <__assert_fail@plt+0x2010>
   12998:	cmp	r4, #0
   1299c:	mov	r0, r4
   129a0:	bne	12990 <__assert_fail@plt+0x18a8>
   129a4:	ldr	r0, [sp, #40]	; 0x28
   129a8:	mvn	r4, #0
   129ac:	subs	r0, r4, r0
   129b0:	ldr	r0, [sp, #44]	; 0x2c
   129b4:	sbcs	r0, r4, r0
   129b8:	bge	12ac4 <__assert_fail@plt+0x19dc>
   129bc:	ldr	r3, [sp, #52]	; 0x34
   129c0:	mov	r0, #0
   129c4:	mov	r2, r8
   129c8:	stm	sp, {r0, r6}
   129cc:	mov	r0, r9
   129d0:	bl	12d90 <__assert_fail@plt+0x1ca8>
   129d4:	subs	r0, r4, r0
   129d8:	sbcs	r0, r4, r1
   129dc:	ldr	r1, [sp, #108]	; 0x6c
   129e0:	mov	r0, #0
   129e4:	movwlt	r0, #1
   129e8:	and	r1, r1, r0
   129ec:	str	r1, [sp, #108]	; 0x6c
   129f0:	b	12ac4 <__assert_fail@plt+0x19dc>
   129f4:	ldr	sl, [sp, #40]	; 0x28
   129f8:	ldr	r3, [sp, #44]	; 0x2c
   129fc:	ldr	r8, [sp, #108]	; 0x6c
   12a00:	mvn	r4, #0
   12a04:	add	r5, sp, #128	; 0x80
   12a08:	subs	r0, sl, r9
   12a0c:	sbcs	r0, r3, r8
   12a10:	bge	12a70 <__assert_fail@plt+0x1988>
   12a14:	mov	r0, #0
   12a18:	ldr	r7, [sp, #104]	; 0x68
   12a1c:	mov	r2, sl
   12a20:	mov	r5, r3
   12a24:	str	r0, [sp]
   12a28:	ldr	r0, [sp, #100]	; 0x64
   12a2c:	str	r0, [sp, #4]
   12a30:	mov	r0, r7
   12a34:	bl	12d90 <__assert_fail@plt+0x1ca8>
   12a38:	cmp	r1, #0
   12a3c:	bmi	12a68 <__assert_fail@plt+0x1980>
   12a40:	ldr	r8, [sp, #108]	; 0x6c
   12a44:	subs	r2, r9, sl
   12a48:	mov	r0, r7
   12a4c:	sbc	r3, r8, r5
   12a50:	bl	12ec4 <__assert_fail@plt+0x1ddc>
   12a54:	cmp	r0, #0
   12a58:	add	r5, sp, #128	; 0x80
   12a5c:	beq	12a70 <__assert_fail@plt+0x1988>
   12a60:	ldr	r1, [sp, #100]	; 0x64
   12a64:	bl	12f58 <__assert_fail@plt+0x1e70>
   12a68:	mov	r8, #0
   12a6c:	b	12ab4 <__assert_fail@plt+0x19cc>
   12a70:	add	r1, r6, #1
   12a74:	mov	r0, r5
   12a78:	bl	12e40 <__assert_fail@plt+0x1d58>
   12a7c:	mov	r0, #0
   12a80:	str	r0, [sp]
   12a84:	ldr	r0, [sp, #100]	; 0x64
   12a88:	str	r0, [sp, #4]
   12a8c:	adds	r0, r9, r6
   12a90:	adc	r1, r8, #0
   12a94:	adds	r2, r0, #1
   12a98:	ldr	r0, [sp, #104]	; 0x68
   12a9c:	adc	r3, r1, #0
   12aa0:	bl	12d90 <__assert_fail@plt+0x1ca8>
   12aa4:	subs	r0, r4, r0
   12aa8:	mov	r8, #0
   12aac:	sbcs	r0, r4, r1
   12ab0:	movwlt	r8, #1
   12ab4:	ldr	r7, [sp, #124]	; 0x7c
   12ab8:	ldr	r6, [sp, #100]	; 0x64
   12abc:	ldr	r9, [sp, #104]	; 0x68
   12ac0:	str	r8, [sp, #108]	; 0x6c
   12ac4:	add	sl, sp, #128	; 0x80
   12ac8:	ldr	r0, [sp, #112]	; 0x70
   12acc:	mov	r8, r7
   12ad0:	cmp	r0, #0
   12ad4:	beq	12b34 <__assert_fail@plt+0x1a4c>
   12ad8:	mov	r0, r9
   12adc:	bl	110dc <close@plt>
   12ae0:	ldr	r7, [sp, #108]	; 0x6c
   12ae4:	cmp	r0, #0
   12ae8:	beq	12b38 <__assert_fail@plt+0x1a50>
   12aec:	bl	11004 <__errno_location@plt>
   12af0:	ldr	r4, [r0]
   12af4:	movw	r1, #28183	; 0x6e17
   12af8:	mov	r7, #0
   12afc:	mov	r0, #0
   12b00:	movt	r1, #1
   12b04:	mov	r2, #5
   12b08:	bl	10ee4 <dcgettext@plt>
   12b0c:	mov	r5, r0
   12b10:	mov	r0, #4
   12b14:	mov	r1, r6
   12b18:	bl	1495c <__assert_fail@plt+0x3874>
   12b1c:	mov	r3, r0
   12b20:	mov	r0, #0
   12b24:	mov	r1, r4
   12b28:	mov	r2, r5
   12b2c:	bl	10f68 <error@plt>
   12b30:	b	12b38 <__assert_fail@plt+0x1a50>
   12b34:	ldr	r7, [sp, #108]	; 0x6c
   12b38:	ldr	r2, [sp, #116]	; 0x74
   12b3c:	ldr	r0, [sp, #80]	; 0x50
   12b40:	ldr	r1, [sp, #120]	; 0x78
   12b44:	add	r2, r2, #1
   12b48:	and	r1, r1, r7
   12b4c:	mov	r7, r8
   12b50:	ldr	r6, [r0, r2, lsl #2]
   12b54:	cmp	r6, #0
   12b58:	bne	11920 <__assert_fail@plt+0x838>
   12b5c:	eor	r6, r1, #1
   12b60:	movw	r0, #33117	; 0x815d
   12b64:	movt	r0, #2
   12b68:	ldrb	r0, [r0]
   12b6c:	cmp	r0, #1
   12b70:	bne	12b84 <__assert_fail@plt+0x1a9c>
   12b74:	mov	r0, #0
   12b78:	bl	110dc <close@plt>
   12b7c:	cmn	r0, #1
   12b80:	ble	12d78 <__assert_fail@plt+0x1c90>
   12b84:	mov	r0, r6
   12b88:	sub	sp, fp, #28
   12b8c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12b90:	cmp	r3, #0
   12b94:	bne	12d48 <__assert_fail@plt+0x1c60>
   12b98:	tst	r6, #255	; 0xff
   12b9c:	strb	r6, [r0]
   12ba0:	mov	r7, lr
   12ba4:	mov	r4, #0
   12ba8:	movne	r2, #0
   12bac:	strbne	r2, [r0, #1]
   12bb0:	ands	r0, r1, #1
   12bb4:	movw	r1, #27568	; 0x6bb0
   12bb8:	mov	r2, #5
   12bbc:	str	r0, [sp, #68]	; 0x44
   12bc0:	movw	r0, #28047	; 0x6d8f
   12bc4:	movt	r1, #1
   12bc8:	movt	r0, #1
   12bcc:	movne	r1, r0
   12bd0:	mov	r0, #0
   12bd4:	bl	10ee4 <dcgettext@plt>
   12bd8:	mvn	r1, #0
   12bdc:	str	r0, [sp, #12]
   12be0:	mov	r0, r7
   12be4:	mov	r2, #0
   12be8:	mov	r3, #0
   12bec:	str	r4, [sp, #16]
   12bf0:	str	r1, [sp]
   12bf4:	str	r1, [sp, #4]
   12bf8:	movw	r1, #28034	; 0x6d82
   12bfc:	movt	r1, #1
   12c00:	str	r1, [sp, #8]
   12c04:	bl	1586c <__assert_fail@plt+0x4784>
   12c08:	str	r0, [sp, #124]	; 0x7c
   12c0c:	ldr	r0, [r8]
   12c10:	sub	r9, r9, #1
   12c14:	mov	r4, #0
   12c18:	mov	sl, #1
   12c1c:	str	r0, [r8, #4]
   12c20:	b	11694 <__assert_fail@plt+0x5ac>
   12c24:	cmn	r6, #3
   12c28:	bne	12c80 <__assert_fail@plt+0x1b98>
   12c2c:	movw	r0, #33016	; 0x80f8
   12c30:	movw	r2, #27548	; 0x6b9c
   12c34:	mov	r1, #0
   12c38:	movw	r7, #27532	; 0x6b8c
   12c3c:	movt	r0, #2
   12c40:	movt	r2, #1
   12c44:	str	r1, [sp, #8]
   12c48:	movw	r1, #27441	; 0x6b31
   12c4c:	movt	r7, #1
   12c50:	movt	r1, #1
   12c54:	ldr	r3, [r0]
   12c58:	movw	r0, #33108	; 0x8154
   12c5c:	str	r2, [sp, #4]
   12c60:	movw	r2, #27518	; 0x6b7e
   12c64:	str	r7, [sp]
   12c68:	movt	r0, #2
   12c6c:	movt	r2, #1
   12c70:	ldr	r0, [r0]
   12c74:	bl	151fc <__assert_fail@plt+0x4114>
   12c78:	mov	r0, #0
   12c7c:	bl	10fc8 <exit@plt>
   12c80:	cmn	r6, #2
   12c84:	bne	12c90 <__assert_fail@plt+0x1ba8>
   12c88:	mov	r0, #0
   12c8c:	bl	111e4 <__assert_fail@plt+0xfc>
   12c90:	sub	r0, r6, #48	; 0x30
   12c94:	cmp	r0, #9
   12c98:	bhi	12d70 <__assert_fail@plt+0x1c88>
   12c9c:	movw	r1, #27470	; 0x6b4e
   12ca0:	mov	r0, #0
   12ca4:	mov	r2, #5
   12ca8:	movt	r1, #1
   12cac:	bl	10ee4 <dcgettext@plt>
   12cb0:	mov	r2, r0
   12cb4:	mov	r0, #0
   12cb8:	mov	r1, #0
   12cbc:	mov	r3, r6
   12cc0:	b	12d6c <__assert_fail@plt+0x1c84>
   12cc4:	movw	r1, #28378	; 0x6eda
   12cc8:	mov	r0, #0
   12ccc:	mov	r2, #5
   12cd0:	movt	r1, #1
   12cd4:	bl	10ee4 <dcgettext@plt>
   12cd8:	ldr	r1, [sp, #96]	; 0x60
   12cdc:	mov	r4, r0
   12ce0:	add	r2, sp, #128	; 0x80
   12ce4:	mov	r0, r7
   12ce8:	bl	1324c <__assert_fail@plt+0x2164>
   12cec:	mov	r3, r0
   12cf0:	mov	r0, #1
   12cf4:	mov	r1, #0
   12cf8:	mov	r2, r4
   12cfc:	bl	10f68 <error@plt>
   12d00:	movw	r1, #27568	; 0x6bb0
   12d04:	mov	r0, #0
   12d08:	mov	r2, #5
   12d0c:	movt	r1, #1
   12d10:	bl	10ee4 <dcgettext@plt>
   12d14:	ldr	r1, [sp, #96]	; 0x60
   12d18:	mov	r4, r0
   12d1c:	add	r2, sp, #128	; 0x80
   12d20:	mov	r0, r7
   12d24:	bl	1324c <__assert_fail@plt+0x2164>
   12d28:	bl	14c94 <__assert_fail@plt+0x3bac>
   12d2c:	movw	r2, #27561	; 0x6ba9
   12d30:	str	r0, [sp]
   12d34:	mov	r0, #1
   12d38:	mov	r1, #75	; 0x4b
   12d3c:	mov	r3, r4
   12d40:	movt	r2, #1
   12d44:	bl	10f68 <error@plt>
   12d48:	movw	r1, #27470	; 0x6b4e
   12d4c:	mov	r0, #0
   12d50:	mov	r2, #5
   12d54:	movt	r1, #1
   12d58:	bl	10ee4 <dcgettext@plt>
   12d5c:	ldrb	r3, [sl]
   12d60:	mov	r2, r0
   12d64:	mov	r0, #0
   12d68:	mov	r1, #0
   12d6c:	bl	10f68 <error@plt>
   12d70:	mov	r0, #1
   12d74:	bl	111e4 <__assert_fail@plt+0xfc>
   12d78:	bl	11004 <__errno_location@plt>
   12d7c:	ldr	r1, [r0]
   12d80:	movw	r2, #28733	; 0x703d
   12d84:	mov	r0, #1
   12d88:	movt	r2, #1
   12d8c:	bl	10f68 <error@plt>
   12d90:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12d94:	add	fp, sp, #28
   12d98:	sub	sp, sp, #28
   12d9c:	ldr	r8, [fp, #8]
   12da0:	mov	r6, r3
   12da4:	mov	r7, r2
   12da8:	str	r8, [sp]
   12dac:	bl	10f2c <lseek64@plt>
   12db0:	mov	r9, r0
   12db4:	mov	r5, r1
   12db8:	cmn	r1, #1
   12dbc:	bgt	12e30 <__assert_fail@plt+0x1d48>
   12dc0:	movw	r0, #28232	; 0x6e48
   12dc4:	movw	r4, #28261	; 0x6e65
   12dc8:	cmp	r8, #0
   12dcc:	movt	r0, #1
   12dd0:	movt	r4, #1
   12dd4:	moveq	r4, r0
   12dd8:	bl	11004 <__errno_location@plt>
   12ddc:	ldr	sl, [r0]
   12de0:	mov	r0, #0
   12de4:	mov	r1, r4
   12de8:	mov	r2, #5
   12dec:	bl	10ee4 <dcgettext@plt>
   12df0:	ldr	r2, [fp, #12]
   12df4:	mov	r8, r0
   12df8:	mov	r0, #0
   12dfc:	mov	r1, #3
   12e00:	bl	14b00 <__assert_fail@plt+0x3a18>
   12e04:	mov	r4, r0
   12e08:	add	r2, sp, #7
   12e0c:	mov	r0, r7
   12e10:	mov	r1, r6
   12e14:	bl	13190 <__assert_fail@plt+0x20a8>
   12e18:	str	r0, [sp]
   12e1c:	mov	r0, #0
   12e20:	mov	r1, sl
   12e24:	mov	r2, r8
   12e28:	mov	r3, r4
   12e2c:	bl	10f68 <error@plt>
   12e30:	mov	r0, r9
   12e34:	mov	r1, r5
   12e38:	sub	sp, fp, #28
   12e3c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12e40:	push	{r4, r5, fp, lr}
   12e44:	add	fp, sp, #8
   12e48:	cmp	r1, #0
   12e4c:	popeq	{r4, r5, fp, pc}
   12e50:	movw	r5, #33108	; 0x8154
   12e54:	mov	r4, r1
   12e58:	mov	r1, #1
   12e5c:	movt	r5, #2
   12e60:	mov	r2, r4
   12e64:	ldr	r3, [r5]
   12e68:	bl	10ed8 <fwrite_unlocked@plt>
   12e6c:	cmp	r0, r4
   12e70:	bcc	12e78 <__assert_fail@plt+0x1d90>
   12e74:	pop	{r4, r5, fp, pc}
   12e78:	ldr	r0, [r5]
   12e7c:	bl	110a0 <clearerr_unlocked@plt>
   12e80:	bl	11004 <__errno_location@plt>
   12e84:	movw	r1, #28316	; 0x6e9c
   12e88:	ldr	r4, [r0]
   12e8c:	mov	r0, #0
   12e90:	mov	r2, #5
   12e94:	movt	r1, #1
   12e98:	bl	10ee4 <dcgettext@plt>
   12e9c:	movw	r1, #28333	; 0x6ead
   12ea0:	mov	r5, r0
   12ea4:	mov	r0, #4
   12ea8:	movt	r1, #1
   12eac:	bl	1495c <__assert_fail@plt+0x3874>
   12eb0:	mov	r3, r0
   12eb4:	mov	r0, #1
   12eb8:	mov	r1, r4
   12ebc:	mov	r2, r5
   12ec0:	bl	10f68 <error@plt>
   12ec4:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   12ec8:	add	fp, sp, #24
   12ecc:	sub	sp, sp, #8192	; 0x2000
   12ed0:	mov	r7, r0
   12ed4:	orrs	r0, r2, r3
   12ed8:	mov	r8, #0
   12edc:	beq	12f4c <__assert_fail@plt+0x1e64>
   12ee0:	mov	r5, r3
   12ee4:	mov	r6, r2
   12ee8:	mov	r4, sp
   12eec:	subs	r0, r6, #8192	; 0x2000
   12ef0:	mov	r2, r6
   12ef4:	mov	r1, r4
   12ef8:	sbcs	r0, r5, #0
   12efc:	mov	r0, r7
   12f00:	movcs	r2, #8192	; 0x2000
   12f04:	bl	14de0 <__assert_fail@plt+0x3cf8>
   12f08:	cmn	r0, #1
   12f0c:	beq	12f40 <__assert_fail@plt+0x1e58>
   12f10:	subs	r6, r6, r0
   12f14:	mov	r1, r0
   12f18:	sbc	r5, r5, #0
   12f1c:	cmp	r0, #0
   12f20:	bne	12f2c <__assert_fail@plt+0x1e44>
   12f24:	orrs	r0, r6, r5
   12f28:	bne	12f48 <__assert_fail@plt+0x1e60>
   12f2c:	mov	r0, r4
   12f30:	bl	12e40 <__assert_fail@plt+0x1d58>
   12f34:	orrs	r0, r6, r5
   12f38:	bne	12eec <__assert_fail@plt+0x1e04>
   12f3c:	b	12f4c <__assert_fail@plt+0x1e64>
   12f40:	mov	r8, #1
   12f44:	b	12f4c <__assert_fail@plt+0x1e64>
   12f48:	mov	r8, #2
   12f4c:	mov	r0, r8
   12f50:	sub	sp, fp, #24
   12f54:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   12f58:	push	{r4, r5, r6, sl, fp, lr}
   12f5c:	add	fp, sp, #16
   12f60:	mov	r4, r1
   12f64:	cmp	r0, #2
   12f68:	beq	12fa4 <__assert_fail@plt+0x1ebc>
   12f6c:	cmp	r0, #1
   12f70:	bne	12fec <__assert_fail@plt+0x1f04>
   12f74:	bl	11004 <__errno_location@plt>
   12f78:	movw	r1, #28299	; 0x6e8b
   12f7c:	ldr	r5, [r0]
   12f80:	mov	r0, #0
   12f84:	mov	r2, #5
   12f88:	movt	r1, #1
   12f8c:	bl	10ee4 <dcgettext@plt>
   12f90:	mov	r6, r0
   12f94:	mov	r0, #4
   12f98:	mov	r1, r4
   12f9c:	bl	1495c <__assert_fail@plt+0x3874>
   12fa0:	b	12fd4 <__assert_fail@plt+0x1eec>
   12fa4:	bl	11004 <__errno_location@plt>
   12fa8:	movw	r1, #28349	; 0x6ebd
   12fac:	ldr	r5, [r0]
   12fb0:	mov	r0, #0
   12fb4:	mov	r2, #5
   12fb8:	movt	r1, #1
   12fbc:	bl	10ee4 <dcgettext@plt>
   12fc0:	mov	r6, r0
   12fc4:	mov	r0, #0
   12fc8:	mov	r1, #3
   12fcc:	mov	r2, r4
   12fd0:	bl	14b00 <__assert_fail@plt+0x3a18>
   12fd4:	mov	r3, r0
   12fd8:	mov	r0, #0
   12fdc:	mov	r1, r5
   12fe0:	mov	r2, r6
   12fe4:	pop	{r4, r5, r6, sl, fp, lr}
   12fe8:	b	10f68 <error@plt>
   12fec:	bl	110d0 <abort@plt>
   12ff0:	movw	r1, #33124	; 0x8164
   12ff4:	movt	r1, #2
   12ff8:	str	r0, [r1]
   12ffc:	bx	lr
   13000:	movw	r1, #33128	; 0x8168
   13004:	movt	r1, #2
   13008:	strb	r0, [r1]
   1300c:	bx	lr
   13010:	push	{r4, r5, r6, sl, fp, lr}
   13014:	add	fp, sp, #16
   13018:	sub	sp, sp, #8
   1301c:	movw	r0, #33108	; 0x8154
   13020:	movt	r0, #2
   13024:	ldr	r0, [r0]
   13028:	bl	16004 <__assert_fail@plt+0x4f1c>
   1302c:	cmp	r0, #0
   13030:	beq	13058 <__assert_fail@plt+0x1f70>
   13034:	movw	r0, #33128	; 0x8168
   13038:	movt	r0, #2
   1303c:	ldrb	r0, [r0]
   13040:	cmp	r0, #0
   13044:	beq	13078 <__assert_fail@plt+0x1f90>
   13048:	bl	11004 <__errno_location@plt>
   1304c:	ldr	r0, [r0]
   13050:	cmp	r0, #32
   13054:	bne	13078 <__assert_fail@plt+0x1f90>
   13058:	movw	r0, #33104	; 0x8150
   1305c:	movt	r0, #2
   13060:	ldr	r0, [r0]
   13064:	bl	16004 <__assert_fail@plt+0x4f1c>
   13068:	cmp	r0, #0
   1306c:	subeq	sp, fp, #16
   13070:	popeq	{r4, r5, r6, sl, fp, pc}
   13074:	b	130e8 <__assert_fail@plt+0x2000>
   13078:	movw	r1, #28655	; 0x6fef
   1307c:	mov	r0, #0
   13080:	mov	r2, #5
   13084:	movt	r1, #1
   13088:	bl	10ee4 <dcgettext@plt>
   1308c:	mov	r4, r0
   13090:	movw	r0, #33124	; 0x8164
   13094:	movt	r0, #2
   13098:	ldr	r6, [r0]
   1309c:	bl	11004 <__errno_location@plt>
   130a0:	ldr	r5, [r0]
   130a4:	cmp	r6, #0
   130a8:	bne	130c4 <__assert_fail@plt+0x1fdc>
   130ac:	movw	r2, #27565	; 0x6bad
   130b0:	mov	r0, #0
   130b4:	mov	r1, r5
   130b8:	mov	r3, r4
   130bc:	movt	r2, #1
   130c0:	b	130e4 <__assert_fail@plt+0x1ffc>
   130c4:	mov	r0, r6
   130c8:	bl	14a54 <__assert_fail@plt+0x396c>
   130cc:	movw	r2, #27561	; 0x6ba9
   130d0:	mov	r3, r0
   130d4:	str	r4, [sp]
   130d8:	mov	r0, #0
   130dc:	mov	r1, r5
   130e0:	movt	r2, #1
   130e4:	bl	10f68 <error@plt>
   130e8:	movw	r0, #33020	; 0x80fc
   130ec:	movt	r0, #2
   130f0:	ldr	r0, [r0]
   130f4:	bl	10eb4 <_exit@plt>
   130f8:	push	{r4, r5, r6, sl, fp, lr}
   130fc:	add	fp, sp, #16
   13100:	mov	r4, r0
   13104:	bl	11004 <__errno_location@plt>
   13108:	ldr	r6, [r0]
   1310c:	mov	r5, r0
   13110:	mov	r0, r4
   13114:	bl	10ea8 <free@plt>
   13118:	str	r6, [r5]
   1311c:	pop	{r4, r5, r6, sl, fp, pc}
   13120:	push	{r4, r5, r6, r7, fp, lr}
   13124:	add	fp, sp, #16
   13128:	cmp	r2, #0
   1312c:	beq	13174 <__assert_fail@plt+0x208c>
   13130:	mov	r5, r2
   13134:	mov	r6, r1
   13138:	mov	r7, r0
   1313c:	mov	r4, #0
   13140:	mov	r0, r7
   13144:	mov	r1, r6
   13148:	mov	r2, r5
   1314c:	bl	14de0 <__assert_fail@plt+0x3cf8>
   13150:	cmn	r0, #1
   13154:	beq	13188 <__assert_fail@plt+0x20a0>
   13158:	cmp	r0, #0
   1315c:	beq	1317c <__assert_fail@plt+0x2094>
   13160:	subs	r5, r5, r0
   13164:	add	r6, r6, r0
   13168:	add	r4, r0, r4
   1316c:	bne	13140 <__assert_fail@plt+0x2058>
   13170:	b	13188 <__assert_fail@plt+0x20a0>
   13174:	mov	r4, #0
   13178:	b	13188 <__assert_fail@plt+0x20a0>
   1317c:	bl	11004 <__errno_location@plt>
   13180:	mov	r1, #0
   13184:	str	r1, [r0]
   13188:	mov	r0, r4
   1318c:	pop	{r4, r5, r6, r7, fp, pc}
   13190:	push	{r4, r5, r6, sl, fp, lr}
   13194:	add	fp, sp, #16
   13198:	mov	r5, r0
   1319c:	mov	r0, #0
   131a0:	mov	r4, r1
   131a4:	add	r6, r2, #19
   131a8:	cmp	r1, #0
   131ac:	strb	r0, [r2, #20]
   131b0:	bmi	131fc <__assert_fail@plt+0x2114>
   131b4:	mov	r0, r5
   131b8:	mov	r1, r4
   131bc:	mov	r2, #10
   131c0:	mov	r3, #0
   131c4:	bl	163f8 <__assert_fail@plt+0x5310>
   131c8:	add	r2, r0, r0, lsl #2
   131cc:	sub	r2, r5, r2, lsl #1
   131d0:	add	r2, r2, #48	; 0x30
   131d4:	strb	r2, [r6], #-1
   131d8:	adds	r2, r5, #9
   131dc:	mov	r5, r0
   131e0:	adc	r3, r4, #0
   131e4:	rsbs	r2, r2, #18
   131e8:	mov	r4, r1
   131ec:	rscs	r2, r3, #0
   131f0:	bcc	131b4 <__assert_fail@plt+0x20cc>
   131f4:	add	r6, r6, #1
   131f8:	b	13244 <__assert_fail@plt+0x215c>
   131fc:	mov	r0, r5
   13200:	mov	r1, r4
   13204:	mov	r2, #10
   13208:	mov	r3, #0
   1320c:	bl	163f8 <__assert_fail@plt+0x5310>
   13210:	add	r2, r0, r0, lsl #2
   13214:	rsb	r2, r5, r2, lsl #1
   13218:	add	r2, r2, #48	; 0x30
   1321c:	strb	r2, [r6], #-1
   13220:	adds	r2, r5, #9
   13224:	mov	r5, r0
   13228:	adc	r3, r4, #0
   1322c:	rsbs	r2, r2, #18
   13230:	mov	r4, r1
   13234:	rscs	r2, r3, #0
   13238:	bcc	131fc <__assert_fail@plt+0x2114>
   1323c:	mov	r0, #45	; 0x2d
   13240:	strb	r0, [r6]
   13244:	mov	r0, r6
   13248:	pop	{r4, r5, r6, sl, fp, pc}
   1324c:	push	{r4, r5, r6, sl, fp, lr}
   13250:	add	fp, sp, #16
   13254:	mov	r5, r0
   13258:	mov	r0, #0
   1325c:	mov	r4, r1
   13260:	add	r6, r2, #19
   13264:	strb	r0, [r2, #20]
   13268:	mov	r0, r5
   1326c:	mov	r1, r4
   13270:	mov	r2, #10
   13274:	mov	r3, #0
   13278:	bl	164cc <__assert_fail@plt+0x53e4>
   1327c:	add	r2, r0, r0, lsl #2
   13280:	sub	r2, r5, r2, lsl #1
   13284:	orr	r2, r2, #48	; 0x30
   13288:	strb	r2, [r6], #-1
   1328c:	rsbs	r2, r5, #9
   13290:	mov	r5, r0
   13294:	rscs	r2, r4, #0
   13298:	mov	r4, r1
   1329c:	bcc	13268 <__assert_fail@plt+0x2180>
   132a0:	add	r0, r6, #1
   132a4:	pop	{r4, r5, r6, sl, fp, pc}
   132a8:	push	{r4, r5, fp, lr}
   132ac:	add	fp, sp, #8
   132b0:	cmp	r0, #0
   132b4:	beq	13348 <__assert_fail@plt+0x2260>
   132b8:	mov	r1, #47	; 0x2f
   132bc:	mov	r4, r0
   132c0:	bl	11088 <strrchr@plt>
   132c4:	cmp	r0, #0
   132c8:	mov	r5, r4
   132cc:	addne	r5, r0, #1
   132d0:	sub	r0, r5, r4
   132d4:	cmp	r0, #7
   132d8:	blt	1332c <__assert_fail@plt+0x2244>
   132dc:	movw	r1, #28723	; 0x7033
   132e0:	sub	r0, r5, #7
   132e4:	mov	r2, #7
   132e8:	movt	r1, #1
   132ec:	bl	110c4 <strncmp@plt>
   132f0:	cmp	r0, #0
   132f4:	bne	1332c <__assert_fail@plt+0x2244>
   132f8:	movw	r1, #28731	; 0x703b
   132fc:	mov	r0, r5
   13300:	mov	r2, #3
   13304:	movt	r1, #1
   13308:	bl	110c4 <strncmp@plt>
   1330c:	cmp	r0, #0
   13310:	beq	1331c <__assert_fail@plt+0x2234>
   13314:	mov	r4, r5
   13318:	b	1332c <__assert_fail@plt+0x2244>
   1331c:	movw	r0, #33088	; 0x8140
   13320:	add	r4, r5, #3
   13324:	movt	r0, #2
   13328:	str	r4, [r0]
   1332c:	movw	r0, #33092	; 0x8144
   13330:	movt	r0, #2
   13334:	str	r4, [r0]
   13338:	movw	r0, #33132	; 0x816c
   1333c:	movt	r0, #2
   13340:	str	r4, [r0]
   13344:	pop	{r4, r5, fp, pc}
   13348:	movw	r0, #33104	; 0x8150
   1334c:	movt	r0, #2
   13350:	ldr	r1, [r0]
   13354:	movw	r0, #28667	; 0x6ffb
   13358:	movt	r0, #1
   1335c:	bl	110b8 <fputs@plt>
   13360:	bl	110d0 <abort@plt>
   13364:	push	{r4, r5, r6, sl, fp, lr}
   13368:	add	fp, sp, #16
   1336c:	mov	r4, r0
   13370:	movw	r0, #33136	; 0x8170
   13374:	movt	r0, #2
   13378:	cmp	r4, #0
   1337c:	moveq	r4, r0
   13380:	bl	11004 <__errno_location@plt>
   13384:	ldr	r6, [r0]
   13388:	mov	r5, r0
   1338c:	mov	r0, r4
   13390:	mov	r1, #48	; 0x30
   13394:	bl	15654 <__assert_fail@plt+0x456c>
   13398:	str	r6, [r5]
   1339c:	pop	{r4, r5, r6, sl, fp, pc}
   133a0:	movw	r1, #33136	; 0x8170
   133a4:	cmp	r0, #0
   133a8:	movt	r1, #2
   133ac:	movne	r1, r0
   133b0:	ldr	r0, [r1]
   133b4:	bx	lr
   133b8:	movw	r2, #33136	; 0x8170
   133bc:	cmp	r0, #0
   133c0:	movt	r2, #2
   133c4:	movne	r2, r0
   133c8:	str	r1, [r2]
   133cc:	bx	lr
   133d0:	movw	r3, #33136	; 0x8170
   133d4:	cmp	r0, #0
   133d8:	and	r2, r2, #1
   133dc:	movt	r3, #2
   133e0:	movne	r3, r0
   133e4:	ubfx	r0, r1, #5, #3
   133e8:	and	r1, r1, #31
   133ec:	add	ip, r3, r0, lsl #2
   133f0:	mov	r0, #1
   133f4:	ldr	r3, [ip, #8]
   133f8:	and	r0, r0, r3, lsr r1
   133fc:	eor	r2, r0, r2
   13400:	eor	r1, r3, r2, lsl r1
   13404:	str	r1, [ip, #8]
   13408:	bx	lr
   1340c:	movw	r2, #33136	; 0x8170
   13410:	cmp	r0, #0
   13414:	movt	r2, #2
   13418:	movne	r2, r0
   1341c:	ldr	r0, [r2, #4]
   13420:	str	r1, [r2, #4]
   13424:	bx	lr
   13428:	push	{fp, lr}
   1342c:	mov	fp, sp
   13430:	movw	r3, #33136	; 0x8170
   13434:	cmp	r0, #0
   13438:	movt	r3, #2
   1343c:	movne	r3, r0
   13440:	cmp	r1, #0
   13444:	mov	r0, #10
   13448:	cmpne	r2, #0
   1344c:	str	r0, [r3]
   13450:	bne	13458 <__assert_fail@plt+0x2370>
   13454:	bl	110d0 <abort@plt>
   13458:	str	r1, [r3, #40]	; 0x28
   1345c:	str	r2, [r3, #44]	; 0x2c
   13460:	pop	{fp, pc}
   13464:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13468:	add	fp, sp, #28
   1346c:	sub	sp, sp, #20
   13470:	mov	r7, r0
   13474:	ldr	r0, [fp, #8]
   13478:	movw	r5, #33136	; 0x8170
   1347c:	mov	r8, r3
   13480:	mov	r9, r2
   13484:	mov	sl, r1
   13488:	movt	r5, #2
   1348c:	cmp	r0, #0
   13490:	movne	r5, r0
   13494:	bl	11004 <__errno_location@plt>
   13498:	ldr	r2, [r5, #40]	; 0x28
   1349c:	ldr	r3, [r5, #44]	; 0x2c
   134a0:	mov	r4, r0
   134a4:	ldm	r5, {r0, r1}
   134a8:	add	r5, r5, #8
   134ac:	ldr	r6, [r4]
   134b0:	stm	sp, {r0, r1, r5}
   134b4:	mov	r0, r7
   134b8:	mov	r1, sl
   134bc:	str	r2, [sp, #12]
   134c0:	str	r3, [sp, #16]
   134c4:	mov	r2, r9
   134c8:	mov	r3, r8
   134cc:	bl	134dc <__assert_fail@plt+0x23f4>
   134d0:	str	r6, [r4]
   134d4:	sub	sp, fp, #28
   134d8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   134dc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   134e0:	add	fp, sp, #28
   134e4:	sub	sp, sp, #156	; 0x9c
   134e8:	mov	r5, r0
   134ec:	add	r0, r2, #1
   134f0:	mov	r6, r1
   134f4:	mov	sl, r3
   134f8:	str	r2, [fp, #-80]	; 0xffffffb0
   134fc:	str	r0, [sp, #72]	; 0x48
   13500:	ldr	r0, [fp, #12]
   13504:	and	r1, r0, #1
   13508:	str	r1, [sp, #32]
   1350c:	and	r1, r0, #4
   13510:	str	r1, [sp, #28]
   13514:	ubfx	r9, r0, #1, #1
   13518:	bl	10f38 <__ctype_get_mb_cur_max@plt>
   1351c:	str	r0, [sp, #40]	; 0x28
   13520:	ldr	r0, [fp, #24]
   13524:	ldr	r7, [fp, #8]
   13528:	mov	r1, #0
   1352c:	mov	lr, #0
   13530:	str	r5, [fp, #-84]	; 0xffffffac
   13534:	str	r1, [sp, #60]	; 0x3c
   13538:	mov	r1, #1
   1353c:	str	r1, [fp, #-48]	; 0xffffffd0
   13540:	str	r0, [sp, #80]	; 0x50
   13544:	ldr	r0, [fp, #20]
   13548:	str	r0, [sp, #76]	; 0x4c
   1354c:	mov	r0, #0
   13550:	str	r0, [sp, #56]	; 0x38
   13554:	mov	r0, #0
   13558:	str	r0, [fp, #-88]	; 0xffffffa8
   1355c:	mov	r0, #0
   13560:	str	r0, [fp, #-72]	; 0xffffffb8
   13564:	mov	r0, #0
   13568:	cmp	r7, #10
   1356c:	bhi	14548 <__assert_fail@plt+0x3460>
   13570:	add	r1, pc, #24
   13574:	ldr	r4, [fp, #-80]	; 0xffffffb0
   13578:	mov	ip, r6
   1357c:	mov	r8, #0
   13580:	mov	r2, #1
   13584:	mov	r6, #0
   13588:	mov	r3, sl
   1358c:	ldr	pc, [r1, r7, lsl #2]
   13590:	andeq	r3, r1, ip, ror r6
   13594:	ldrdeq	r3, [r1], -r0
   13598:	muleq	r1, r0, r6
   1359c:	andeq	r3, r1, r4, ror r6
   135a0:	andeq	r3, r1, r4, asr #13
   135a4:	strdeq	r3, [r1], -r8
   135a8:	andeq	r3, r1, r0, lsr #13
   135ac:	andeq	r3, r1, ip, ror r7
   135b0:			; <UNDEFINED> instruction: 0x000135bc
   135b4:			; <UNDEFINED> instruction: 0x000135bc
   135b8:	strdeq	r3, [r1], -ip
   135bc:	movw	r0, #28813	; 0x708d
   135c0:	mov	r1, r7
   135c4:	mov	r6, r5
   135c8:	mov	r4, ip
   135cc:	mov	r5, lr
   135d0:	movt	r0, #1
   135d4:	bl	14cac <__assert_fail@plt+0x3bc4>
   135d8:	str	r0, [sp, #76]	; 0x4c
   135dc:	movw	r0, #28815	; 0x708f
   135e0:	mov	r1, r7
   135e4:	movt	r0, #1
   135e8:	bl	14cac <__assert_fail@plt+0x3bc4>
   135ec:	mov	lr, r5
   135f0:	mov	r5, r6
   135f4:	mov	ip, r4
   135f8:	str	r0, [sp, #80]	; 0x50
   135fc:	mov	r8, #0
   13600:	tst	r9, #1
   13604:	str	lr, [sp, #44]	; 0x2c
   13608:	bne	13640 <__assert_fail@plt+0x2558>
   1360c:	ldr	r0, [sp, #76]	; 0x4c
   13610:	ldrb	r0, [r0]
   13614:	cmp	r0, #0
   13618:	beq	13640 <__assert_fail@plt+0x2558>
   1361c:	ldr	r1, [sp, #76]	; 0x4c
   13620:	mov	r8, #0
   13624:	add	r1, r1, #1
   13628:	cmp	r8, ip
   1362c:	strbcc	r0, [r5, r8]
   13630:	ldrb	r0, [r1, r8]
   13634:	add	r8, r8, #1
   13638:	cmp	r0, #0
   1363c:	bne	13628 <__assert_fail@plt+0x2540>
   13640:	ldr	r6, [sp, #80]	; 0x50
   13644:	mov	r4, ip
   13648:	mov	r0, r6
   1364c:	bl	10fe0 <strlen@plt>
   13650:	mov	ip, r4
   13654:	ldr	r4, [fp, #-80]	; 0xffffffb0
   13658:	ldr	lr, [sp, #44]	; 0x2c
   1365c:	str	r6, [fp, #-88]	; 0xffffffa8
   13660:	str	r0, [fp, #-72]	; 0xffffffb8
   13664:	mov	r2, #1
   13668:	mov	r6, r9
   1366c:	mov	r3, sl
   13670:	b	1377c <__assert_fail@plt+0x2694>
   13674:	mov	r0, #1
   13678:	b	136d0 <__assert_fail@plt+0x25e8>
   1367c:	mov	r7, #0
   13680:	mov	r8, #0
   13684:	mov	r2, r0
   13688:	mov	r6, #0
   1368c:	b	1377c <__assert_fail@plt+0x2694>
   13690:	tst	r9, #1
   13694:	bne	136d0 <__assert_fail@plt+0x25e8>
   13698:	mov	r2, r0
   1369c:	b	13728 <__assert_fail@plt+0x2640>
   136a0:	mov	r0, #1
   136a4:	mov	r8, #0
   136a8:	mov	r7, #5
   136ac:	mov	r2, #1
   136b0:	str	r0, [fp, #-72]	; 0xffffffb8
   136b4:	movw	r0, #28811	; 0x708b
   136b8:	movt	r0, #1
   136bc:	str	r0, [fp, #-88]	; 0xffffffa8
   136c0:	b	136f0 <__assert_fail@plt+0x2608>
   136c4:	mov	r2, #1
   136c8:	tst	r9, #1
   136cc:	beq	13728 <__assert_fail@plt+0x2640>
   136d0:	mov	r1, #1
   136d4:	mov	r8, #0
   136d8:	mov	r7, #2
   136dc:	mov	r2, r0
   136e0:	str	r1, [fp, #-72]	; 0xffffffb8
   136e4:	movw	r1, #28815	; 0x708f
   136e8:	movt	r1, #1
   136ec:	str	r1, [fp, #-88]	; 0xffffffa8
   136f0:	mov	r6, #1
   136f4:	b	1377c <__assert_fail@plt+0x2694>
   136f8:	tst	r9, #1
   136fc:	beq	1374c <__assert_fail@plt+0x2664>
   13700:	mov	r0, #1
   13704:	mov	r8, #0
   13708:	mov	r2, #1
   1370c:	mov	r6, #1
   13710:	mov	r7, #5
   13714:	str	r0, [fp, #-72]	; 0xffffffb8
   13718:	movw	r0, #28811	; 0x708b
   1371c:	movt	r0, #1
   13720:	str	r0, [fp, #-88]	; 0xffffffa8
   13724:	b	1377c <__assert_fail@plt+0x2694>
   13728:	cmp	ip, #0
   1372c:	mov	r8, #1
   13730:	mov	r6, #0
   13734:	mov	r7, #2
   13738:	movne	r0, #39	; 0x27
   1373c:	strbne	r0, [r5]
   13740:	movw	r0, #28815	; 0x708f
   13744:	movt	r0, #1
   13748:	b	13770 <__assert_fail@plt+0x2688>
   1374c:	cmp	ip, #0
   13750:	mov	r8, #1
   13754:	mov	r2, #1
   13758:	mov	r7, #5
   1375c:	mov	r6, #0
   13760:	movne	r0, #34	; 0x22
   13764:	strbne	r0, [r5]
   13768:	movw	r0, #28811	; 0x708b
   1376c:	movt	r0, #1
   13770:	str	r0, [fp, #-88]	; 0xffffffa8
   13774:	mov	r0, #1
   13778:	str	r0, [fp, #-72]	; 0xffffffb8
   1377c:	ldr	r0, [fp, #-72]	; 0xffffffb8
   13780:	str	r7, [fp, #-68]	; 0xffffffbc
   13784:	str	r6, [fp, #-76]	; 0xffffffb4
   13788:	str	r2, [sp, #84]	; 0x54
   1378c:	cmp	r0, #0
   13790:	movwne	r0, #1
   13794:	and	r1, r0, r6
   13798:	and	r1, r2, r1
   1379c:	str	r1, [sp, #48]	; 0x30
   137a0:	sub	r1, r7, #2
   137a4:	clz	r1, r1
   137a8:	lsr	r1, r1, #5
   137ac:	and	r1, r1, r6
   137b0:	str	r1, [sp, #64]	; 0x40
   137b4:	subs	r1, r7, #2
   137b8:	eor	r7, r6, #1
   137bc:	movwne	r1, #1
   137c0:	str	r7, [sp, #92]	; 0x5c
   137c4:	orr	r7, r1, r7
   137c8:	and	r1, r1, r2
   137cc:	and	r0, r0, r1
   137d0:	str	r7, [sp, #68]	; 0x44
   137d4:	mov	r7, #0
   137d8:	str	r0, [fp, #-60]	; 0xffffffc4
   137dc:	orr	r0, r1, r6
   137e0:	ldr	r1, [fp, #16]
   137e4:	eor	r0, r0, #1
   137e8:	clz	r1, r1
   137ec:	lsr	r1, r1, #5
   137f0:	orr	r0, r1, r0
   137f4:	str	r0, [fp, #-64]	; 0xffffffc0
   137f8:	eor	r0, r2, #1
   137fc:	str	r0, [sp, #52]	; 0x34
   13800:	cmn	r3, #1
   13804:	beq	13814 <__assert_fail@plt+0x272c>
   13808:	cmp	r7, r3
   1380c:	bne	13820 <__assert_fail@plt+0x2738>
   13810:	b	1437c <__assert_fail@plt+0x3294>
   13814:	ldrb	r0, [r4, r7]
   13818:	cmp	r0, #0
   1381c:	beq	14384 <__assert_fail@plt+0x329c>
   13820:	ldr	r0, [fp, #-60]	; 0xffffffc4
   13824:	cmp	r0, #0
   13828:	beq	13870 <__assert_fail@plt+0x2788>
   1382c:	ldr	r0, [fp, #-72]	; 0xffffffb8
   13830:	add	r5, r7, r0
   13834:	cmp	r0, #2
   13838:	bcc	13884 <__assert_fail@plt+0x279c>
   1383c:	mov	r0, #0
   13840:	cmn	r3, #1
   13844:	str	r0, [fp, #-56]	; 0xffffffc8
   13848:	bne	1388c <__assert_fail@plt+0x27a4>
   1384c:	mov	r0, r4
   13850:	mov	r4, ip
   13854:	mov	r6, lr
   13858:	bl	10fe0 <strlen@plt>
   1385c:	mov	ip, r4
   13860:	ldr	r4, [fp, #-80]	; 0xffffffb0
   13864:	mov	lr, r6
   13868:	mov	r3, r0
   1386c:	b	1388c <__assert_fail@plt+0x27a4>
   13870:	mov	r0, #0
   13874:	mov	sl, r3
   13878:	str	r0, [fp, #-56]	; 0xffffffc8
   1387c:	mov	r0, #0
   13880:	b	138f8 <__assert_fail@plt+0x2810>
   13884:	mov	r0, #0
   13888:	str	r0, [fp, #-56]	; 0xffffffc8
   1388c:	cmp	r5, r3
   13890:	bls	138a4 <__assert_fail@plt+0x27bc>
   13894:	ldr	r5, [fp, #-84]	; 0xffffffac
   13898:	mov	r0, #0
   1389c:	mov	sl, r3
   138a0:	b	138f8 <__assert_fail@plt+0x2810>
   138a4:	ldr	r1, [fp, #-88]	; 0xffffffa8
   138a8:	ldr	r2, [fp, #-72]	; 0xffffffb8
   138ac:	add	r0, r4, r7
   138b0:	mov	r5, lr
   138b4:	mov	r6, ip
   138b8:	mov	sl, r3
   138bc:	bl	10fd4 <bcmp@plt>
   138c0:	ldr	r2, [sp, #92]	; 0x5c
   138c4:	cmp	r0, #0
   138c8:	ldr	r3, [fp, #-84]	; 0xffffffac
   138cc:	mov	r1, r0
   138d0:	movwne	r1, #1
   138d4:	orr	r1, r1, r2
   138d8:	tst	r1, #1
   138dc:	beq	14408 <__assert_fail@plt+0x3320>
   138e0:	ldr	r4, [fp, #-80]	; 0xffffffb0
   138e4:	clz	r0, r0
   138e8:	mov	lr, r5
   138ec:	mov	ip, r6
   138f0:	mov	r5, r3
   138f4:	lsr	r0, r0, #5
   138f8:	str	r0, [fp, #-52]	; 0xffffffcc
   138fc:	ldrb	r6, [r4, r7]
   13900:	cmp	r6, #126	; 0x7e
   13904:	bhi	13e2c <__assert_fail@plt+0x2d44>
   13908:	add	r3, pc, #16
   1390c:	mov	r9, #1
   13910:	mov	r2, #110	; 0x6e
   13914:	mov	r0, #97	; 0x61
   13918:	mov	r1, #0
   1391c:	ldr	pc, [r3, r6, lsl #2]
   13920:	muleq	r1, r0, ip
   13924:	andeq	r3, r1, ip, lsr #28
   13928:	andeq	r3, r1, ip, lsr #28
   1392c:	andeq	r3, r1, ip, lsr #28
   13930:	andeq	r3, r1, ip, lsr #28
   13934:	andeq	r3, r1, ip, lsr #28
   13938:	andeq	r3, r1, ip, lsr #28
   1393c:	andeq	r3, r1, ip, lsr #29
   13940:	andeq	r3, r1, r0, ror ip
   13944:	andeq	r3, r1, r8, ror #24
   13948:	andeq	r3, r1, ip, ror ip
   1394c:	muleq	r1, r4, sp
   13950:	andeq	r3, r1, r0, ror #24
   13954:	andeq	r3, r1, r8, ror ip
   13958:	andeq	r3, r1, ip, lsr #28
   1395c:	andeq	r3, r1, ip, lsr #28
   13960:	andeq	r3, r1, ip, lsr #28
   13964:	andeq	r3, r1, ip, lsr #28
   13968:	andeq	r3, r1, ip, lsr #28
   1396c:	andeq	r3, r1, ip, lsr #28
   13970:	andeq	r3, r1, ip, lsr #28
   13974:	andeq	r3, r1, ip, lsr #28
   13978:	andeq	r3, r1, ip, lsr #28
   1397c:	andeq	r3, r1, ip, lsr #28
   13980:	andeq	r3, r1, ip, lsr #28
   13984:	andeq	r3, r1, ip, lsr #28
   13988:	andeq	r3, r1, ip, lsr #28
   1398c:	andeq	r3, r1, ip, lsr #28
   13990:	andeq	r3, r1, ip, lsr #28
   13994:	andeq	r3, r1, ip, lsr #28
   13998:	andeq	r3, r1, ip, lsr #28
   1399c:	andeq	r3, r1, ip, lsr #28
   139a0:	andeq	r3, r1, r0, lsl ip
   139a4:	andeq	r3, r1, r4, lsl ip
   139a8:	andeq	r3, r1, r4, lsl ip
   139ac:	strdeq	r3, [r1], -r8
   139b0:	andeq	r3, r1, r4, lsl ip
   139b4:	andeq	r3, r1, ip, lsl fp
   139b8:	andeq	r3, r1, r4, lsl ip
   139bc:	muleq	r1, ip, sp
   139c0:	andeq	r3, r1, r4, lsl ip
   139c4:	andeq	r3, r1, r4, lsl ip
   139c8:	andeq	r3, r1, r4, lsl ip
   139cc:	andeq	r3, r1, ip, lsl fp
   139d0:	andeq	r3, r1, ip, lsl fp
   139d4:	andeq	r3, r1, ip, lsl fp
   139d8:	andeq	r3, r1, ip, lsl fp
   139dc:	andeq	r3, r1, ip, lsl fp
   139e0:	andeq	r3, r1, ip, lsl fp
   139e4:	andeq	r3, r1, ip, lsl fp
   139e8:	andeq	r3, r1, ip, lsl fp
   139ec:	andeq	r3, r1, ip, lsl fp
   139f0:	andeq	r3, r1, ip, lsl fp
   139f4:	andeq	r3, r1, ip, lsl fp
   139f8:	andeq	r3, r1, ip, lsl fp
   139fc:	andeq	r3, r1, ip, lsl fp
   13a00:	andeq	r3, r1, ip, lsl fp
   13a04:	andeq	r3, r1, ip, lsl fp
   13a08:	andeq	r3, r1, ip, lsl fp
   13a0c:	andeq	r3, r1, r4, lsl ip
   13a10:	andeq	r3, r1, r4, lsl ip
   13a14:	andeq	r3, r1, r4, lsl ip
   13a18:	andeq	r3, r1, r4, lsl ip
   13a1c:	andeq	r3, r1, r8, ror #26
   13a20:	andeq	r3, r1, ip, lsr #28
   13a24:	andeq	r3, r1, ip, lsl fp
   13a28:	andeq	r3, r1, ip, lsl fp
   13a2c:	andeq	r3, r1, ip, lsl fp
   13a30:	andeq	r3, r1, ip, lsl fp
   13a34:	andeq	r3, r1, ip, lsl fp
   13a38:	andeq	r3, r1, ip, lsl fp
   13a3c:	andeq	r3, r1, ip, lsl fp
   13a40:	andeq	r3, r1, ip, lsl fp
   13a44:	andeq	r3, r1, ip, lsl fp
   13a48:	andeq	r3, r1, ip, lsl fp
   13a4c:	andeq	r3, r1, ip, lsl fp
   13a50:	andeq	r3, r1, ip, lsl fp
   13a54:	andeq	r3, r1, ip, lsl fp
   13a58:	andeq	r3, r1, ip, lsl fp
   13a5c:	andeq	r3, r1, ip, lsl fp
   13a60:	andeq	r3, r1, ip, lsl fp
   13a64:	andeq	r3, r1, ip, lsl fp
   13a68:	andeq	r3, r1, ip, lsl fp
   13a6c:	andeq	r3, r1, ip, lsl fp
   13a70:	andeq	r3, r1, ip, lsl fp
   13a74:	andeq	r3, r1, ip, lsl fp
   13a78:	andeq	r3, r1, ip, lsl fp
   13a7c:	andeq	r3, r1, ip, lsl fp
   13a80:	andeq	r3, r1, ip, lsl fp
   13a84:	andeq	r3, r1, ip, lsl fp
   13a88:	andeq	r3, r1, ip, lsl fp
   13a8c:	andeq	r3, r1, r4, lsl ip
   13a90:	andeq	r3, r1, ip, lsr ip
   13a94:	andeq	r3, r1, ip, lsl fp
   13a98:	andeq	r3, r1, r4, lsl ip
   13a9c:	andeq	r3, r1, ip, lsl fp
   13aa0:	andeq	r3, r1, r4, lsl ip
   13aa4:	andeq	r3, r1, ip, lsl fp
   13aa8:	andeq	r3, r1, ip, lsl fp
   13aac:	andeq	r3, r1, ip, lsl fp
   13ab0:	andeq	r3, r1, ip, lsl fp
   13ab4:	andeq	r3, r1, ip, lsl fp
   13ab8:	andeq	r3, r1, ip, lsl fp
   13abc:	andeq	r3, r1, ip, lsl fp
   13ac0:	andeq	r3, r1, ip, lsl fp
   13ac4:	andeq	r3, r1, ip, lsl fp
   13ac8:	andeq	r3, r1, ip, lsl fp
   13acc:	andeq	r3, r1, ip, lsl fp
   13ad0:	andeq	r3, r1, ip, lsl fp
   13ad4:	andeq	r3, r1, ip, lsl fp
   13ad8:	andeq	r3, r1, ip, lsl fp
   13adc:	andeq	r3, r1, ip, lsl fp
   13ae0:	andeq	r3, r1, ip, lsl fp
   13ae4:	andeq	r3, r1, ip, lsl fp
   13ae8:	andeq	r3, r1, ip, lsl fp
   13aec:	andeq	r3, r1, ip, lsl fp
   13af0:	andeq	r3, r1, ip, lsl fp
   13af4:	andeq	r3, r1, ip, lsl fp
   13af8:	andeq	r3, r1, ip, lsl fp
   13afc:	andeq	r3, r1, ip, lsl fp
   13b00:	andeq	r3, r1, ip, lsl fp
   13b04:	andeq	r3, r1, ip, lsl fp
   13b08:	andeq	r3, r1, ip, lsl fp
   13b0c:	ldrdeq	r3, [r1], -r0
   13b10:	andeq	r3, r1, r4, lsl ip
   13b14:	ldrdeq	r3, [r1], -r0
   13b18:	strdeq	r3, [r1], -r8
   13b1c:	ldr	r0, [fp, #-64]	; 0xffffffc0
   13b20:	tst	r0, #1
   13b24:	bne	13b50 <__assert_fail@plt+0x2a68>
   13b28:	ldr	r1, [fp, #16]
   13b2c:	ubfx	r0, r6, #5, #3
   13b30:	mov	r2, #1
   13b34:	ldr	r0, [r1, r0, lsl #2]
   13b38:	and	r1, r6, #31
   13b3c:	tst	r0, r2, lsl r1
   13b40:	beq	13b50 <__assert_fail@plt+0x2a68>
   13b44:	mov	r0, r6
   13b48:	mov	r1, r9
   13b4c:	b	13b64 <__assert_fail@plt+0x2a7c>
   13b50:	ldr	r0, [fp, #-52]	; 0xffffffcc
   13b54:	mov	r1, r9
   13b58:	cmp	r0, #0
   13b5c:	mov	r0, r6
   13b60:	beq	142b0 <__assert_fail@plt+0x31c8>
   13b64:	ldr	r2, [fp, #-76]	; 0xffffffb4
   13b68:	tst	r2, #1
   13b6c:	bne	1444c <__assert_fail@plt+0x3364>
   13b70:	ldr	r2, [fp, #-68]	; 0xffffffbc
   13b74:	subs	r2, r2, #2
   13b78:	movwne	r2, #1
   13b7c:	orr	r2, r2, lr
   13b80:	tst	r2, #1
   13b84:	bne	13bbc <__assert_fail@plt+0x2ad4>
   13b88:	cmp	r8, ip
   13b8c:	mov	lr, #1
   13b90:	movcc	r2, #39	; 0x27
   13b94:	strbcc	r2, [r5, r8]
   13b98:	add	r2, r8, #1
   13b9c:	cmp	r2, ip
   13ba0:	movcc	r3, #36	; 0x24
   13ba4:	strbcc	r3, [r5, r2]
   13ba8:	add	r2, r8, #2
   13bac:	add	r8, r8, #3
   13bb0:	cmp	r2, ip
   13bb4:	movcc	r3, #39	; 0x27
   13bb8:	strbcc	r3, [r5, r2]
   13bbc:	cmp	r8, ip
   13bc0:	movcc	r2, #92	; 0x5c
   13bc4:	strbcc	r2, [r5, r8]
   13bc8:	add	r8, r8, #1
   13bcc:	b	142f0 <__assert_fail@plt+0x3208>
   13bd0:	cmp	sl, #1
   13bd4:	beq	13bf8 <__assert_fail@plt+0x2b10>
   13bd8:	mov	r9, #0
   13bdc:	cmn	sl, #1
   13be0:	bne	13c04 <__assert_fail@plt+0x2b1c>
   13be4:	ldrb	r0, [r4, #1]
   13be8:	cmp	r0, #0
   13bec:	beq	13bf8 <__assert_fail@plt+0x2b10>
   13bf0:	mvn	sl, #0
   13bf4:	b	13c04 <__assert_fail@plt+0x2b1c>
   13bf8:	mov	r9, #0
   13bfc:	cmp	r7, #0
   13c00:	beq	13c10 <__assert_fail@plt+0x2b28>
   13c04:	mov	r0, #0
   13c08:	str	r0, [fp, #-56]	; 0xffffffc8
   13c0c:	b	13b1c <__assert_fail@plt+0x2a34>
   13c10:	mov	r1, #1
   13c14:	ldr	r0, [fp, #-68]	; 0xffffffbc
   13c18:	cmp	r0, #2
   13c1c:	bne	13c34 <__assert_fail@plt+0x2b4c>
   13c20:	ldr	r0, [fp, #-76]	; 0xffffffb4
   13c24:	mov	r9, r1
   13c28:	tst	r0, #1
   13c2c:	beq	13b1c <__assert_fail@plt+0x2a34>
   13c30:	b	1444c <__assert_fail@plt+0x3364>
   13c34:	mov	r9, r1
   13c38:	b	13b1c <__assert_fail@plt+0x2a34>
   13c3c:	ldr	r0, [fp, #-68]	; 0xffffffbc
   13c40:	cmp	r0, #2
   13c44:	bne	13e88 <__assert_fail@plt+0x2da0>
   13c48:	ldr	r0, [fp, #-76]	; 0xffffffb4
   13c4c:	tst	r0, #1
   13c50:	bne	1444c <__assert_fail@plt+0x3364>
   13c54:	mov	r0, #0
   13c58:	str	r0, [fp, #-56]	; 0xffffffc8
   13c5c:	b	13ea0 <__assert_fail@plt+0x2db8>
   13c60:	mov	r0, #102	; 0x66
   13c64:	b	13eac <__assert_fail@plt+0x2dc4>
   13c68:	mov	r2, #116	; 0x74
   13c6c:	b	13c7c <__assert_fail@plt+0x2b94>
   13c70:	mov	r0, #98	; 0x62
   13c74:	b	13eac <__assert_fail@plt+0x2dc4>
   13c78:	mov	r2, #114	; 0x72
   13c7c:	ldr	r0, [sp, #68]	; 0x44
   13c80:	tst	r0, #1
   13c84:	mov	r0, r2
   13c88:	bne	13eac <__assert_fail@plt+0x2dc4>
   13c8c:	b	1444c <__assert_fail@plt+0x3364>
   13c90:	ldr	r0, [sp, #84]	; 0x54
   13c94:	tst	r0, #1
   13c98:	beq	13ecc <__assert_fail@plt+0x2de4>
   13c9c:	ldr	r0, [fp, #-76]	; 0xffffffb4
   13ca0:	tst	r0, #1
   13ca4:	bne	14538 <__assert_fail@plt+0x3450>
   13ca8:	ldr	r0, [fp, #-68]	; 0xffffffbc
   13cac:	mov	r2, sl
   13cb0:	subs	r0, r0, #2
   13cb4:	movwne	r0, #1
   13cb8:	orr	r0, r0, lr
   13cbc:	tst	r0, #1
   13cc0:	bne	13cf8 <__assert_fail@plt+0x2c10>
   13cc4:	cmp	r8, ip
   13cc8:	mov	lr, #1
   13ccc:	movcc	r0, #39	; 0x27
   13cd0:	strbcc	r0, [r5, r8]
   13cd4:	add	r0, r8, #1
   13cd8:	cmp	r0, ip
   13cdc:	movcc	r1, #36	; 0x24
   13ce0:	strbcc	r1, [r5, r0]
   13ce4:	add	r0, r8, #2
   13ce8:	add	r8, r8, #3
   13cec:	cmp	r0, ip
   13cf0:	movcc	r1, #39	; 0x27
   13cf4:	strbcc	r1, [r5, r0]
   13cf8:	mov	r1, #1
   13cfc:	cmp	r8, ip
   13d00:	mov	r9, #0
   13d04:	mov	r6, #48	; 0x30
   13d08:	str	r1, [fp, #-56]	; 0xffffffc8
   13d0c:	ldr	r1, [fp, #-68]	; 0xffffffbc
   13d10:	movcc	r0, #92	; 0x5c
   13d14:	strbcc	r0, [r5, r8]
   13d18:	add	r0, r8, #1
   13d1c:	cmp	r1, #2
   13d20:	beq	14028 <__assert_fail@plt+0x2f40>
   13d24:	add	r1, r7, #1
   13d28:	cmp	r1, r2
   13d2c:	bcs	14028 <__assert_fail@plt+0x2f40>
   13d30:	ldrb	r1, [r4, r1]
   13d34:	sub	r1, r1, #48	; 0x30
   13d38:	uxtb	r1, r1
   13d3c:	cmp	r1, #9
   13d40:	bhi	14028 <__assert_fail@plt+0x2f40>
   13d44:	cmp	r0, ip
   13d48:	movcc	r1, #48	; 0x30
   13d4c:	strbcc	r1, [r5, r0]
   13d50:	add	r0, r8, #2
   13d54:	add	r8, r8, #3
   13d58:	cmp	r0, ip
   13d5c:	movcc	r1, #48	; 0x30
   13d60:	strbcc	r1, [r5, r0]
   13d64:	b	13b1c <__assert_fail@plt+0x2a34>
   13d68:	ldr	r0, [fp, #-68]	; 0xffffffbc
   13d6c:	mov	r6, #63	; 0x3f
   13d70:	cmp	r0, #5
   13d74:	beq	14030 <__assert_fail@plt+0x2f48>
   13d78:	mov	r1, #0
   13d7c:	cmp	r0, #2
   13d80:	str	r1, [fp, #-56]	; 0xffffffc8
   13d84:	bne	140e4 <__assert_fail@plt+0x2ffc>
   13d88:	ldr	r0, [fp, #-76]	; 0xffffffb4
   13d8c:	mov	r9, #0
   13d90:	b	13c28 <__assert_fail@plt+0x2b40>
   13d94:	mov	r0, #118	; 0x76
   13d98:	b	13eac <__assert_fail@plt+0x2dc4>
   13d9c:	mov	r0, #1
   13da0:	mov	r6, #39	; 0x27
   13da4:	str	r0, [sp, #60]	; 0x3c
   13da8:	ldr	r0, [fp, #-68]	; 0xffffffbc
   13dac:	cmp	r0, #2
   13db0:	bne	13e24 <__assert_fail@plt+0x2d3c>
   13db4:	ldr	r0, [fp, #-76]	; 0xffffffb4
   13db8:	tst	r0, #1
   13dbc:	bne	1444c <__assert_fail@plt+0x3364>
   13dc0:	ldr	r2, [sp, #56]	; 0x38
   13dc4:	clz	r1, ip
   13dc8:	mov	lr, #0
   13dcc:	lsr	r1, r1, #5
   13dd0:	cmp	r2, #0
   13dd4:	mov	r0, r2
   13dd8:	movwne	r0, #1
   13ddc:	orrs	r0, r0, r1
   13de0:	moveq	r2, ip
   13de4:	moveq	ip, r0
   13de8:	cmp	r8, ip
   13dec:	str	r2, [sp, #56]	; 0x38
   13df0:	movcc	r0, #39	; 0x27
   13df4:	strbcc	r0, [r5, r8]
   13df8:	add	r0, r8, #1
   13dfc:	cmp	r0, ip
   13e00:	movcc	r1, #92	; 0x5c
   13e04:	strbcc	r1, [r5, r0]
   13e08:	add	r0, r8, #2
   13e0c:	add	r8, r8, #3
   13e10:	cmp	r0, ip
   13e14:	movcc	r1, #39	; 0x27
   13e18:	strbcc	r1, [r5, r0]
   13e1c:	mov	r0, #0
   13e20:	str	r0, [fp, #-56]	; 0xffffffc8
   13e24:	mov	r9, #1
   13e28:	b	13b1c <__assert_fail@plt+0x2a34>
   13e2c:	ldr	r0, [sp, #40]	; 0x28
   13e30:	str	lr, [sp, #44]	; 0x2c
   13e34:	str	ip, [sp, #88]	; 0x58
   13e38:	cmp	r0, #1
   13e3c:	bne	13eec <__assert_fail@plt+0x2e04>
   13e40:	str	sl, [sp, #36]	; 0x24
   13e44:	bl	10fbc <__ctype_b_loc@plt>
   13e48:	ldr	r0, [r0]
   13e4c:	ldr	r4, [fp, #-80]	; 0xffffffb0
   13e50:	mov	r1, #1
   13e54:	add	r0, r0, r6, lsl #1
   13e58:	ldrb	r0, [r0, #1]
   13e5c:	ubfx	r9, r0, #6, #1
   13e60:	ldr	r0, [sp, #52]	; 0x34
   13e64:	ldr	lr, [sp, #44]	; 0x2c
   13e68:	cmp	r1, #1
   13e6c:	orr	r3, r9, r0
   13e70:	bhi	140ec <__assert_fail@plt+0x3004>
   13e74:	tst	r3, #1
   13e78:	beq	140ec <__assert_fail@plt+0x3004>
   13e7c:	ldr	sl, [sp, #36]	; 0x24
   13e80:	ldr	ip, [sp, #88]	; 0x58
   13e84:	b	13b1c <__assert_fail@plt+0x2a34>
   13e88:	ldr	r1, [sp, #48]	; 0x30
   13e8c:	mov	r0, #0
   13e90:	str	r0, [fp, #-56]	; 0xffffffc8
   13e94:	mov	r0, #92	; 0x5c
   13e98:	cmp	r1, #0
   13e9c:	beq	13eac <__assert_fail@plt+0x2dc4>
   13ea0:	mov	r6, #92	; 0x5c
   13ea4:	mov	r9, #0
   13ea8:	b	142b0 <__assert_fail@plt+0x31c8>
   13eac:	mov	r1, #0
   13eb0:	mov	r9, #0
   13eb4:	str	r1, [fp, #-56]	; 0xffffffc8
   13eb8:	ldr	r1, [sp, #84]	; 0x54
   13ebc:	tst	r1, #1
   13ec0:	mov	r1, #0
   13ec4:	beq	13b1c <__assert_fail@plt+0x2a34>
   13ec8:	b	13b64 <__assert_fail@plt+0x2a7c>
   13ecc:	ldr	r0, [sp, #32]
   13ed0:	mov	r6, #0
   13ed4:	mov	r9, #0
   13ed8:	cmp	r0, #0
   13edc:	mov	r0, #0
   13ee0:	str	r0, [fp, #-56]	; 0xffffffc8
   13ee4:	beq	13b1c <__assert_fail@plt+0x2a34>
   13ee8:	b	14308 <__assert_fail@plt+0x3220>
   13eec:	mov	r0, #0
   13ef0:	cmn	sl, #1
   13ef4:	sub	r3, fp, #40	; 0x28
   13ef8:	str	r0, [fp, #-36]	; 0xffffffdc
   13efc:	str	r0, [fp, #-40]	; 0xffffffd8
   13f00:	bne	13f18 <__assert_fail@plt+0x2e30>
   13f04:	mov	r0, r4
   13f08:	bl	10fe0 <strlen@plt>
   13f0c:	ldr	r4, [fp, #-80]	; 0xffffffb0
   13f10:	sub	r3, fp, #40	; 0x28
   13f14:	mov	sl, r0
   13f18:	ldr	r0, [sp, #72]	; 0x48
   13f1c:	mov	r9, #1
   13f20:	mov	r1, #0
   13f24:	str	sl, [sp, #36]	; 0x24
   13f28:	add	r0, r0, r7
   13f2c:	str	r0, [sp, #20]
   13f30:	add	r0, r1, r7
   13f34:	str	r1, [sp, #24]
   13f38:	add	r1, r4, r0
   13f3c:	mov	r4, r0
   13f40:	sub	r2, sl, r0
   13f44:	sub	r0, fp, #44	; 0x2c
   13f48:	bl	16258 <__assert_fail@plt+0x5170>
   13f4c:	cmp	r0, #0
   13f50:	beq	1435c <__assert_fail@plt+0x3274>
   13f54:	cmn	r0, #1
   13f58:	beq	14314 <__assert_fail@plt+0x322c>
   13f5c:	ldr	r2, [sp, #36]	; 0x24
   13f60:	cmn	r0, #2
   13f64:	beq	1431c <__assert_fail@plt+0x3234>
   13f68:	ldr	r2, [sp, #64]	; 0x40
   13f6c:	ldr	ip, [sp, #88]	; 0x58
   13f70:	ldr	r4, [sp, #84]	; 0x54
   13f74:	ldr	lr, [fp, #-48]	; 0xffffffd0
   13f78:	cmp	r0, #2
   13f7c:	mov	r1, #0
   13f80:	movwcc	r1, #1
   13f84:	eor	r2, r2, #1
   13f88:	orrs	r1, r2, r1
   13f8c:	bne	13fdc <__assert_fail@plt+0x2ef4>
   13f90:	ldr	r1, [sp, #24]
   13f94:	ldr	r2, [sp, #20]
   13f98:	add	r1, r2, r1
   13f9c:	sub	r2, r0, #1
   13fa0:	ldrb	r3, [r1]
   13fa4:	sub	r5, r3, #94	; 0x5e
   13fa8:	cmp	r5, #30
   13fac:	bhi	13fc4 <__assert_fail@plt+0x2edc>
   13fb0:	mov	r4, #1
   13fb4:	mov	sl, #1073741829	; 0x40000005
   13fb8:	tst	sl, r4, lsl r5
   13fbc:	ldr	r4, [sp, #84]	; 0x54
   13fc0:	bne	14424 <__assert_fail@plt+0x333c>
   13fc4:	sub	r3, r3, #91	; 0x5b
   13fc8:	cmp	r3, #2
   13fcc:	bcc	14424 <__assert_fail@plt+0x333c>
   13fd0:	add	r1, r1, #1
   13fd4:	subs	r2, r2, #1
   13fd8:	bne	13fa0 <__assert_fail@plt+0x2eb8>
   13fdc:	ldr	r5, [sp, #24]
   13fe0:	str	lr, [fp, #-48]	; 0xffffffd0
   13fe4:	add	r5, r0, r5
   13fe8:	ldr	r0, [fp, #-44]	; 0xffffffd4
   13fec:	bl	10f14 <iswprint@plt>
   13ff0:	cmp	r0, #0
   13ff4:	sub	r4, fp, #40	; 0x28
   13ff8:	movwne	r0, #1
   13ffc:	and	r9, r9, r0
   14000:	mov	r0, r4
   14004:	bl	10ecc <mbsinit@plt>
   14008:	mov	r1, r5
   1400c:	mov	r3, r4
   14010:	ldr	sl, [sp, #36]	; 0x24
   14014:	ldr	r5, [fp, #-84]	; 0xffffffac
   14018:	ldr	r4, [fp, #-80]	; 0xffffffb0
   1401c:	cmp	r0, #0
   14020:	beq	13f30 <__assert_fail@plt+0x2e48>
   14024:	b	13e60 <__assert_fail@plt+0x2d78>
   14028:	mov	r8, r0
   1402c:	b	13b1c <__assert_fail@plt+0x2a34>
   14030:	mov	r0, #0
   14034:	str	r0, [fp, #-56]	; 0xffffffc8
   14038:	ldr	r0, [sp, #28]
   1403c:	cmp	r0, #0
   14040:	beq	140e4 <__assert_fail@plt+0x2ffc>
   14044:	add	r0, r7, #2
   14048:	mov	r1, sl
   1404c:	cmp	r0, sl
   14050:	bcs	140e4 <__assert_fail@plt+0x2ffc>
   14054:	add	r1, r7, r4
   14058:	ldrb	r1, [r1, #1]
   1405c:	cmp	r1, #63	; 0x3f
   14060:	bne	140e4 <__assert_fail@plt+0x2ffc>
   14064:	ldrb	r9, [r4, r0]
   14068:	sub	r2, r9, #33	; 0x21
   1406c:	cmp	r2, #29
   14070:	bhi	140e4 <__assert_fail@plt+0x2ffc>
   14074:	mov	r1, r4
   14078:	movw	r4, #20929	; 0x51c1
   1407c:	mov	r3, #1
   14080:	movt	r4, #14336	; 0x3800
   14084:	tst	r4, r3, lsl r2
   14088:	beq	14370 <__assert_fail@plt+0x3288>
   1408c:	ldr	r2, [fp, #-76]	; 0xffffffb4
   14090:	tst	r2, #1
   14094:	bne	14540 <__assert_fail@plt+0x3458>
   14098:	cmp	r8, ip
   1409c:	mov	r4, r1
   140a0:	mov	r7, r0
   140a4:	mov	r6, r9
   140a8:	movcc	r2, #63	; 0x3f
   140ac:	strbcc	r2, [r5, r8]
   140b0:	add	r2, r8, #1
   140b4:	cmp	r2, ip
   140b8:	movcc	r3, #34	; 0x22
   140bc:	strbcc	r3, [r5, r2]
   140c0:	add	r2, r8, #2
   140c4:	cmp	r2, ip
   140c8:	movcc	r3, #34	; 0x22
   140cc:	strbcc	r3, [r5, r2]
   140d0:	add	r2, r8, #3
   140d4:	add	r8, r8, #4
   140d8:	cmp	r2, ip
   140dc:	movcc	r3, #63	; 0x3f
   140e0:	strbcc	r3, [r5, r2]
   140e4:	mov	r9, #0
   140e8:	b	13b1c <__assert_fail@plt+0x2a34>
   140ec:	ldr	sl, [sp, #36]	; 0x24
   140f0:	add	r0, r1, r7
   140f4:	mov	r2, #0
   140f8:	str	r3, [sp, #24]
   140fc:	str	r0, [fp, #-56]	; 0xffffffc8
   14100:	tst	r3, #1
   14104:	beq	14130 <__assert_fail@plt+0x3048>
   14108:	ldr	r0, [fp, #-52]	; 0xffffffcc
   1410c:	tst	r0, #1
   14110:	beq	141f8 <__assert_fail@plt+0x3110>
   14114:	ldr	r1, [sp, #88]	; 0x58
   14118:	mov	r0, r3
   1411c:	cmp	r8, r1
   14120:	movcc	r1, #92	; 0x5c
   14124:	strbcc	r1, [r5, r8]
   14128:	add	r8, r8, #1
   1412c:	b	141fc <__assert_fail@plt+0x3114>
   14130:	ldr	r1, [fp, #-76]	; 0xffffffb4
   14134:	tst	r1, #1
   14138:	bne	14448 <__assert_fail@plt+0x3360>
   1413c:	ldr	r1, [fp, #-68]	; 0xffffffbc
   14140:	subs	r2, r1, #2
   14144:	movwne	r2, #1
   14148:	orr	r2, r2, lr
   1414c:	tst	r2, #1
   14150:	bne	14194 <__assert_fail@plt+0x30ac>
   14154:	ldr	r1, [sp, #88]	; 0x58
   14158:	add	r2, r8, #1
   1415c:	mov	lr, #1
   14160:	cmp	r8, r1
   14164:	movcc	r1, #39	; 0x27
   14168:	strbcc	r1, [r5, r8]
   1416c:	ldr	r1, [sp, #88]	; 0x58
   14170:	cmp	r2, r1
   14174:	movcc	r1, #36	; 0x24
   14178:	strbcc	r1, [r5, r2]
   1417c:	ldr	r1, [sp, #88]	; 0x58
   14180:	add	r2, r8, #2
   14184:	add	r8, r8, #3
   14188:	cmp	r2, r1
   1418c:	movcc	r1, #39	; 0x27
   14190:	strbcc	r1, [r5, r2]
   14194:	ldr	r1, [sp, #88]	; 0x58
   14198:	add	r2, r8, #1
   1419c:	mov	r0, r3
   141a0:	cmp	r8, r1
   141a4:	movcc	r1, #92	; 0x5c
   141a8:	strbcc	r1, [r5, r8]
   141ac:	ldr	r1, [sp, #88]	; 0x58
   141b0:	cmp	r2, r1
   141b4:	bcs	141c8 <__assert_fail@plt+0x30e0>
   141b8:	uxtb	r3, r6
   141bc:	mov	r1, #48	; 0x30
   141c0:	orr	r3, r1, r3, lsr #6
   141c4:	strb	r3, [r5, r2]
   141c8:	ldr	r1, [sp, #88]	; 0x58
   141cc:	add	r2, r8, #2
   141d0:	add	r8, r8, #3
   141d4:	cmp	r2, r1
   141d8:	lsrcc	r3, r6, #3
   141dc:	movcc	r1, #6
   141e0:	bficc	r3, r1, #3, #29
   141e4:	mov	r1, #6
   141e8:	bfi	r6, r1, #3, #29
   141ec:	strbcc	r3, [r5, r2]
   141f0:	mov	r2, #1
   141f4:	b	14204 <__assert_fail@plt+0x311c>
   141f8:	mov	r0, r3
   141fc:	mov	r1, #0
   14200:	str	r1, [fp, #-52]	; 0xffffffcc
   14204:	mov	ip, r2
   14208:	and	r1, r2, #1
   1420c:	ldr	r2, [fp, #-56]	; 0xffffffc8
   14210:	add	r3, r7, #1
   14214:	cmp	r2, r3
   14218:	bls	142a0 <__assert_fail@plt+0x31b8>
   1421c:	cmp	r1, #0
   14220:	mvn	r5, lr
   14224:	movwne	r1, #1
   14228:	orr	r5, r5, r1
   1422c:	tst	r5, #1
   14230:	bne	14274 <__assert_fail@plt+0x318c>
   14234:	ldr	r1, [sp, #88]	; 0x58
   14238:	ldr	r5, [fp, #-84]	; 0xffffffac
   1423c:	mov	r2, r4
   14240:	ldr	r4, [sp, #88]	; 0x58
   14244:	ldr	r0, [sp, #24]
   14248:	mov	lr, #0
   1424c:	cmp	r8, r1
   14250:	movcc	r1, #39	; 0x27
   14254:	strbcc	r1, [r5, r8]
   14258:	add	r1, r8, #1
   1425c:	add	r8, r8, #2
   14260:	cmp	r1, r4
   14264:	movcc	r4, #39	; 0x27
   14268:	strbcc	r4, [r5, r1]
   1426c:	mov	r4, r2
   14270:	b	14278 <__assert_fail@plt+0x3190>
   14274:	ldr	r5, [fp, #-84]	; 0xffffffac
   14278:	ldr	r1, [sp, #88]	; 0x58
   1427c:	mov	r2, ip
   14280:	cmp	r8, r1
   14284:	ldr	r1, [sp, #72]	; 0x48
   14288:	strbcc	r6, [r5, r8]
   1428c:	add	r8, r8, #1
   14290:	ldrb	r6, [r1, r7]
   14294:	mov	r7, r3
   14298:	mov	r3, r0
   1429c:	b	14100 <__assert_fail@plt+0x3018>
   142a0:	ldr	ip, [sp, #88]	; 0x58
   142a4:	cmp	r1, #0
   142a8:	movwne	r1, #1
   142ac:	str	r1, [fp, #-56]	; 0xffffffc8
   142b0:	ldr	r0, [fp, #-56]	; 0xffffffc8
   142b4:	cmp	r0, #0
   142b8:	bne	142e8 <__assert_fail@plt+0x3200>
   142bc:	tst	lr, #1
   142c0:	beq	142e8 <__assert_fail@plt+0x3200>
   142c4:	cmp	r8, ip
   142c8:	mov	lr, #0
   142cc:	movcc	r0, #39	; 0x27
   142d0:	strbcc	r0, [r5, r8]
   142d4:	add	r0, r8, #1
   142d8:	add	r8, r8, #2
   142dc:	cmp	r0, ip
   142e0:	movcc	r1, #39	; 0x27
   142e4:	strbcc	r1, [r5, r0]
   142e8:	mov	r1, r9
   142ec:	mov	r0, r6
   142f0:	cmp	r8, ip
   142f4:	strbcc	r0, [r5, r8]
   142f8:	ldr	r0, [fp, #-48]	; 0xffffffd0
   142fc:	add	r8, r8, #1
   14300:	and	r0, r0, r1
   14304:	str	r0, [fp, #-48]	; 0xffffffd0
   14308:	mov	r3, sl
   1430c:	add	r7, r7, #1
   14310:	b	13800 <__assert_fail@plt+0x2718>
   14314:	mov	r9, #0
   14318:	b	1435c <__assert_fail@plt+0x3274>
   1431c:	mov	r9, #0
   14320:	cmp	r2, r4
   14324:	bls	1435c <__assert_fail@plt+0x3274>
   14328:	ldr	r4, [fp, #-80]	; 0xffffffb0
   1432c:	ldr	r1, [sp, #24]
   14330:	add	r0, r4, r7
   14334:	mov	r3, r1
   14338:	ldrb	r1, [r0, r1]
   1433c:	cmp	r1, #0
   14340:	beq	14368 <__assert_fail@plt+0x3280>
   14344:	add	r3, r3, #1
   14348:	add	r1, r7, r3
   1434c:	cmp	r1, r2
   14350:	mov	r1, r3
   14354:	bcc	14334 <__assert_fail@plt+0x324c>
   14358:	b	13e60 <__assert_fail@plt+0x2d78>
   1435c:	ldr	r4, [fp, #-80]	; 0xffffffb0
   14360:	ldr	r1, [sp, #24]
   14364:	b	13e60 <__assert_fail@plt+0x2d78>
   14368:	mov	r1, r3
   1436c:	b	13e60 <__assert_fail@plt+0x2d78>
   14370:	mov	r9, #0
   14374:	mov	r4, r1
   14378:	b	13b1c <__assert_fail@plt+0x2a34>
   1437c:	mov	sl, r7
   14380:	b	14388 <__assert_fail@plt+0x32a0>
   14384:	mvn	sl, #0
   14388:	ldr	r1, [fp, #-68]	; 0xffffffbc
   1438c:	ldr	r2, [fp, #-76]	; 0xffffffb4
   14390:	eor	r0, r1, #2
   14394:	orr	r0, r0, r8
   14398:	clz	r0, r0
   1439c:	lsr	r0, r0, #5
   143a0:	tst	r2, r0
   143a4:	bne	1444c <__assert_fail@plt+0x3364>
   143a8:	subs	r0, r1, #2
   143ac:	movwne	r0, #1
   143b0:	orr	r0, r2, r0
   143b4:	tst	r0, #1
   143b8:	ldreq	r0, [sp, #60]	; 0x3c
   143bc:	ldreq	r1, [fp, #-48]	; 0xffffffd0
   143c0:	eoreq	r0, r0, #1
   143c4:	tsteq	r0, #1
   143c8:	bne	144e0 <__assert_fail@plt+0x33f8>
   143cc:	tst	r1, #1
   143d0:	bne	144ac <__assert_fail@plt+0x33c4>
   143d4:	ldr	r6, [sp, #56]	; 0x38
   143d8:	mov	r9, #0
   143dc:	cmp	r6, #0
   143e0:	beq	144d8 <__assert_fail@plt+0x33f0>
   143e4:	ldr	r0, [sp, #84]	; 0x54
   143e8:	mov	r1, #0
   143ec:	mov	r7, #2
   143f0:	cmp	ip, #0
   143f4:	str	r1, [fp, #-48]	; 0xffffffd0
   143f8:	mov	r1, #0
   143fc:	str	r1, [fp, #-76]	; 0xffffffb4
   14400:	beq	13568 <__assert_fail@plt+0x2480>
   14404:	b	144e0 <__assert_fail@plt+0x33f8>
   14408:	ldr	r4, [fp, #-80]	; 0xffffffb0
   1440c:	ldr	r1, [fp, #12]
   14410:	ldr	r2, [fp, #-68]	; 0xffffffbc
   14414:	mov	r5, r3
   14418:	mov	ip, r6
   1441c:	mov	r3, sl
   14420:	b	14470 <__assert_fail@plt+0x3388>
   14424:	tst	r4, #1
   14428:	ldr	r5, [fp, #-84]	; 0xffffffac
   1442c:	ldr	r4, [fp, #-80]	; 0xffffffb0
   14430:	ldr	r1, [fp, #12]
   14434:	ldr	r3, [sp, #36]	; 0x24
   14438:	mov	r0, #2
   1443c:	movwne	r0, #4
   14440:	mov	r2, r0
   14444:	b	14470 <__assert_fail@plt+0x3388>
   14448:	ldr	ip, [sp, #88]	; 0x58
   1444c:	ldr	r1, [sp, #84]	; 0x54
   14450:	mov	r0, #2
   14454:	tst	r1, #1
   14458:	movwne	r0, #4
   1445c:	ldr	r2, [fp, #-68]	; 0xffffffbc
   14460:	ldr	r1, [fp, #12]
   14464:	mov	r3, sl
   14468:	cmp	r2, #2
   1446c:	moveq	r2, r0
   14470:	mov	r0, #0
   14474:	bic	r1, r1, #2
   14478:	str	r2, [sp]
   1447c:	mov	r2, r4
   14480:	str	r0, [sp, #8]
   14484:	ldr	r0, [sp, #76]	; 0x4c
   14488:	str	r1, [sp, #4]
   1448c:	mov	r1, ip
   14490:	str	r0, [sp, #12]
   14494:	ldr	r0, [sp, #80]	; 0x50
   14498:	str	r0, [sp, #16]
   1449c:	mov	r0, r5
   144a0:	bl	134dc <__assert_fail@plt+0x23f4>
   144a4:	mov	r8, r0
   144a8:	b	1452c <__assert_fail@plt+0x3444>
   144ac:	mov	r0, #5
   144b0:	ldr	r1, [sp, #56]	; 0x38
   144b4:	ldr	r2, [fp, #-80]	; 0xffffffb0
   144b8:	mov	r3, sl
   144bc:	str	r0, [sp]
   144c0:	ldr	r0, [fp, #12]
   144c4:	str	r0, [sp, #4]
   144c8:	ldr	r0, [fp, #16]
   144cc:	str	r0, [sp, #8]
   144d0:	ldr	r0, [sp, #76]	; 0x4c
   144d4:	b	14490 <__assert_fail@plt+0x33a8>
   144d8:	mov	r0, #0
   144dc:	str	r0, [fp, #-76]	; 0xffffffb4
   144e0:	ldr	r1, [fp, #-88]	; 0xffffffa8
   144e4:	cmp	r1, #0
   144e8:	beq	14520 <__assert_fail@plt+0x3438>
   144ec:	ldr	r0, [fp, #-76]	; 0xffffffb4
   144f0:	tst	r0, #1
   144f4:	bne	14520 <__assert_fail@plt+0x3438>
   144f8:	ldrb	r0, [r1]
   144fc:	cmp	r0, #0
   14500:	beq	14520 <__assert_fail@plt+0x3438>
   14504:	add	r1, r1, #1
   14508:	cmp	r8, ip
   1450c:	strbcc	r0, [r5, r8]
   14510:	add	r8, r8, #1
   14514:	ldrb	r0, [r1], #1
   14518:	cmp	r0, #0
   1451c:	bne	14508 <__assert_fail@plt+0x3420>
   14520:	cmp	r8, ip
   14524:	movcc	r0, #0
   14528:	strbcc	r0, [r5, r8]
   1452c:	mov	r0, r8
   14530:	sub	sp, fp, #28
   14534:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14538:	mov	r0, #4
   1453c:	b	1445c <__assert_fail@plt+0x3374>
   14540:	mov	r4, r1
   14544:	b	1444c <__assert_fail@plt+0x3364>
   14548:	bl	110d0 <abort@plt>
   1454c:	mov	r3, r2
   14550:	mov	r2, #0
   14554:	b	14558 <__assert_fail@plt+0x3470>
   14558:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1455c:	add	fp, sp, #28
   14560:	sub	sp, sp, #36	; 0x24
   14564:	movw	r8, #33136	; 0x8170
   14568:	cmp	r3, #0
   1456c:	mov	r4, r2
   14570:	str	r2, [sp, #24]
   14574:	mov	r5, r1
   14578:	mov	r6, r0
   1457c:	str	r0, [sp, #20]
   14580:	movt	r8, #2
   14584:	movne	r8, r3
   14588:	bl	11004 <__errno_location@plt>
   1458c:	str	r0, [sp, #28]
   14590:	ldr	r1, [r8, #40]	; 0x28
   14594:	ldr	r2, [r8, #44]	; 0x2c
   14598:	ldr	r7, [r0]
   1459c:	cmp	r4, #0
   145a0:	add	sl, r8, #8
   145a4:	mov	r0, #0
   145a8:	ldm	r8, {r3, r9}
   145ac:	orreq	r9, r9, #1
   145b0:	stm	sp, {r3, r9, sl}
   145b4:	str	r1, [sp, #12]
   145b8:	str	r2, [sp, #16]
   145bc:	mov	r1, #0
   145c0:	mov	r2, r6
   145c4:	mov	r3, r5
   145c8:	str	r7, [sp, #32]
   145cc:	mov	r7, r5
   145d0:	bl	134dc <__assert_fail@plt+0x23f4>
   145d4:	add	r4, r0, #1
   145d8:	mov	r5, r0
   145dc:	mov	r0, r4
   145e0:	bl	15334 <__assert_fail@plt+0x424c>
   145e4:	mov	r6, r0
   145e8:	ldr	r0, [r8]
   145ec:	ldr	r2, [r8, #44]	; 0x2c
   145f0:	ldr	r1, [r8, #40]	; 0x28
   145f4:	mov	r3, r7
   145f8:	stm	sp, {r0, r9, sl}
   145fc:	str	r2, [sp, #16]
   14600:	ldr	r2, [sp, #20]
   14604:	str	r1, [sp, #12]
   14608:	mov	r0, r6
   1460c:	mov	r1, r4
   14610:	bl	134dc <__assert_fail@plt+0x23f4>
   14614:	ldr	r0, [sp, #24]
   14618:	ldr	r1, [sp, #32]
   1461c:	ldr	r2, [sp, #28]
   14620:	cmp	r0, #0
   14624:	str	r1, [r2]
   14628:	strne	r5, [r0]
   1462c:	mov	r0, r6
   14630:	sub	sp, fp, #28
   14634:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14638:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1463c:	add	fp, sp, #24
   14640:	movw	r5, #33028	; 0x8104
   14644:	movw	r8, #33024	; 0x8100
   14648:	movt	r5, #2
   1464c:	movt	r8, #2
   14650:	ldr	r0, [r5]
   14654:	ldr	r4, [r8]
   14658:	cmp	r0, #2
   1465c:	blt	14688 <__assert_fail@plt+0x35a0>
   14660:	add	r7, r4, #12
   14664:	mov	r6, #0
   14668:	ldr	r0, [r7, r6, lsl #3]
   1466c:	bl	130f8 <__assert_fail@plt+0x2010>
   14670:	ldr	r1, [r5]
   14674:	add	r2, r6, #2
   14678:	add	r0, r6, #1
   1467c:	mov	r6, r0
   14680:	cmp	r2, r1
   14684:	blt	14668 <__assert_fail@plt+0x3580>
   14688:	ldr	r0, [r4, #4]
   1468c:	movw	r9, #33184	; 0x81a0
   14690:	movw	r7, #33032	; 0x8108
   14694:	movt	r9, #2
   14698:	movt	r7, #2
   1469c:	cmp	r0, r9
   146a0:	beq	146b0 <__assert_fail@plt+0x35c8>
   146a4:	bl	130f8 <__assert_fail@plt+0x2010>
   146a8:	mov	r0, #256	; 0x100
   146ac:	stm	r7, {r0, r9}
   146b0:	cmp	r4, r7
   146b4:	beq	146c4 <__assert_fail@plt+0x35dc>
   146b8:	mov	r0, r4
   146bc:	bl	130f8 <__assert_fail@plt+0x2010>
   146c0:	str	r7, [r8]
   146c4:	mov	r0, #1
   146c8:	str	r0, [r5]
   146cc:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   146d0:	movw	r3, #33136	; 0x8170
   146d4:	mvn	r2, #0
   146d8:	movt	r3, #2
   146dc:	b	146e0 <__assert_fail@plt+0x35f8>
   146e0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   146e4:	add	fp, sp, #28
   146e8:	sub	sp, sp, #44	; 0x2c
   146ec:	mov	r7, r3
   146f0:	str	r2, [sp, #36]	; 0x24
   146f4:	str	r1, [sp, #32]
   146f8:	mov	r5, r0
   146fc:	bl	11004 <__errno_location@plt>
   14700:	cmp	r5, #0
   14704:	bmi	14874 <__assert_fail@plt+0x378c>
   14708:	cmn	r5, #-2147483647	; 0x80000001
   1470c:	beq	14874 <__assert_fail@plt+0x378c>
   14710:	movw	r8, #33028	; 0x8104
   14714:	movw	r4, #33024	; 0x8100
   14718:	str	r0, [sp, #28]
   1471c:	ldr	r0, [r0]
   14720:	movt	r8, #2
   14724:	movt	r4, #2
   14728:	ldr	r1, [r8]
   1472c:	ldr	r6, [r4]
   14730:	str	r0, [sp, #24]
   14734:	cmp	r1, r5
   14738:	ble	14744 <__assert_fail@plt+0x365c>
   1473c:	mov	sl, r6
   14740:	b	147b0 <__assert_fail@plt+0x36c8>
   14744:	movw	r9, #33032	; 0x8108
   14748:	mov	r0, #8
   1474c:	str	r1, [fp, #-32]	; 0xffffffe0
   14750:	sub	r1, r5, r1
   14754:	mvn	r3, #-2147483648	; 0x80000000
   14758:	movt	r9, #2
   1475c:	str	r0, [sp]
   14760:	add	r2, r1, #1
   14764:	sub	r1, fp, #32
   14768:	subs	r0, r6, r9
   1476c:	movne	r0, r6
   14770:	bl	15464 <__assert_fail@plt+0x437c>
   14774:	mov	sl, r0
   14778:	cmp	r6, r9
   1477c:	str	r0, [r4]
   14780:	bne	1478c <__assert_fail@plt+0x36a4>
   14784:	ldrd	r0, [r9]
   14788:	stm	sl, {r0, r1}
   1478c:	ldr	r1, [r8]
   14790:	ldr	r2, [fp, #-32]	; 0xffffffe0
   14794:	add	r0, sl, r1, lsl #3
   14798:	sub	r1, r2, r1
   1479c:	lsl	r2, r1, #3
   147a0:	mov	r1, #0
   147a4:	bl	1101c <memset@plt>
   147a8:	ldr	r0, [fp, #-32]	; 0xffffffe0
   147ac:	str	r0, [r8]
   147b0:	mov	r9, sl
   147b4:	ldm	r7, {r0, r1}
   147b8:	orr	r8, r1, #1
   147bc:	add	r1, r7, #8
   147c0:	ldr	r2, [r7, #40]	; 0x28
   147c4:	ldr	r3, [r7, #44]	; 0x2c
   147c8:	ldr	r6, [r9, r5, lsl #3]!
   147cc:	str	r1, [sp, #20]
   147d0:	ldr	r4, [r9, #4]!
   147d4:	stm	sp, {r0, r8}
   147d8:	add	r0, sp, #8
   147dc:	stm	r0, {r1, r2, r3}
   147e0:	ldr	r2, [sp, #32]
   147e4:	ldr	r3, [sp, #36]	; 0x24
   147e8:	mov	r1, r6
   147ec:	mov	r0, r4
   147f0:	bl	134dc <__assert_fail@plt+0x23f4>
   147f4:	cmp	r6, r0
   147f8:	bhi	1485c <__assert_fail@plt+0x3774>
   147fc:	add	r6, r0, #1
   14800:	movw	r0, #33184	; 0x81a0
   14804:	movt	r0, #2
   14808:	str	r6, [sl, r5, lsl #3]
   1480c:	cmp	r4, r0
   14810:	beq	1481c <__assert_fail@plt+0x3734>
   14814:	mov	r0, r4
   14818:	bl	130f8 <__assert_fail@plt+0x2010>
   1481c:	mov	r0, r6
   14820:	bl	15334 <__assert_fail@plt+0x424c>
   14824:	str	r0, [r9]
   14828:	mov	r4, r0
   1482c:	add	r3, sp, #8
   14830:	ldr	r0, [r7]
   14834:	ldr	r1, [r7, #40]	; 0x28
   14838:	ldr	r2, [r7, #44]	; 0x2c
   1483c:	stm	sp, {r0, r8}
   14840:	ldr	r0, [sp, #20]
   14844:	stm	r3, {r0, r1, r2}
   14848:	ldr	r2, [sp, #32]
   1484c:	ldr	r3, [sp, #36]	; 0x24
   14850:	mov	r0, r4
   14854:	mov	r1, r6
   14858:	bl	134dc <__assert_fail@plt+0x23f4>
   1485c:	ldr	r0, [sp, #28]
   14860:	ldr	r1, [sp, #24]
   14864:	str	r1, [r0]
   14868:	mov	r0, r4
   1486c:	sub	sp, fp, #28
   14870:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14874:	bl	110d0 <abort@plt>
   14878:	movw	r3, #33136	; 0x8170
   1487c:	movt	r3, #2
   14880:	b	146e0 <__assert_fail@plt+0x35f8>
   14884:	movw	r3, #33136	; 0x8170
   14888:	mov	r1, r0
   1488c:	mov	r0, #0
   14890:	mvn	r2, #0
   14894:	movt	r3, #2
   14898:	b	146e0 <__assert_fail@plt+0x35f8>
   1489c:	movw	r3, #33136	; 0x8170
   148a0:	mov	r2, r1
   148a4:	mov	r1, r0
   148a8:	mov	r0, #0
   148ac:	movt	r3, #2
   148b0:	b	146e0 <__assert_fail@plt+0x35f8>
   148b4:	push	{fp, lr}
   148b8:	mov	fp, sp
   148bc:	sub	sp, sp, #48	; 0x30
   148c0:	vmov.i32	q8, #0	; 0x00000000
   148c4:	mov	ip, #32
   148c8:	mov	r3, sp
   148cc:	mov	lr, r2
   148d0:	cmp	r1, #10
   148d4:	add	r2, r3, #16
   148d8:	vst1.64	{d16-d17}, [r3], ip
   148dc:	vst1.64	{d16-d17}, [r2]
   148e0:	vst1.64	{d16-d17}, [r3]
   148e4:	beq	14904 <__assert_fail@plt+0x381c>
   148e8:	str	r1, [sp]
   148ec:	mov	r3, sp
   148f0:	mov	r1, lr
   148f4:	mvn	r2, #0
   148f8:	bl	146e0 <__assert_fail@plt+0x35f8>
   148fc:	mov	sp, fp
   14900:	pop	{fp, pc}
   14904:	bl	110d0 <abort@plt>
   14908:	push	{r4, sl, fp, lr}
   1490c:	add	fp, sp, #8
   14910:	sub	sp, sp, #48	; 0x30
   14914:	vmov.i32	q8, #0	; 0x00000000
   14918:	mov	ip, r3
   1491c:	mov	r3, sp
   14920:	mov	lr, #32
   14924:	cmp	r1, #10
   14928:	add	r4, r3, #16
   1492c:	vst1.64	{d16-d17}, [r3], lr
   14930:	vst1.64	{d16-d17}, [r4]
   14934:	vst1.64	{d16-d17}, [r3]
   14938:	beq	14958 <__assert_fail@plt+0x3870>
   1493c:	str	r1, [sp]
   14940:	mov	r1, r2
   14944:	mov	r3, sp
   14948:	mov	r2, ip
   1494c:	bl	146e0 <__assert_fail@plt+0x35f8>
   14950:	sub	sp, fp, #8
   14954:	pop	{r4, sl, fp, pc}
   14958:	bl	110d0 <abort@plt>
   1495c:	mov	r2, r1
   14960:	mov	r1, r0
   14964:	mov	r0, #0
   14968:	b	148b4 <__assert_fail@plt+0x37cc>
   1496c:	mov	r3, r2
   14970:	mov	r2, r1
   14974:	mov	r1, r0
   14978:	mov	r0, #0
   1497c:	b	14908 <__assert_fail@plt+0x3820>
   14980:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   14984:	add	fp, sp, #24
   14988:	sub	sp, sp, #48	; 0x30
   1498c:	movw	r8, #33136	; 0x8170
   14990:	mov	lr, r0
   14994:	mov	r3, sp
   14998:	mov	ip, r1
   1499c:	movt	r8, #2
   149a0:	mov	r1, r3
   149a4:	ldm	r8!, {r0, r4, r5, r6, r7, r9}
   149a8:	stmia	r1!, {r0, r4, r5, r6, r7, r9}
   149ac:	ldm	r8, {r0, r4, r5, r6, r7, r9}
   149b0:	stm	r1, {r0, r4, r5, r6, r7, r9}
   149b4:	ubfx	r0, r2, #5, #3
   149b8:	and	r2, r2, #31
   149bc:	mov	r4, #1
   149c0:	add	r0, r3, r0, lsl #2
   149c4:	ldr	r1, [r0, #8]
   149c8:	bic	r4, r4, r1, lsr r2
   149cc:	eor	r1, r1, r4, lsl r2
   149d0:	mov	r2, ip
   149d4:	str	r1, [r0, #8]
   149d8:	mov	r0, #0
   149dc:	mov	r1, lr
   149e0:	bl	146e0 <__assert_fail@plt+0x35f8>
   149e4:	sub	sp, fp, #24
   149e8:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   149ec:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   149f0:	add	fp, sp, #24
   149f4:	sub	sp, sp, #48	; 0x30
   149f8:	movw	lr, #33136	; 0x8170
   149fc:	mov	ip, r0
   14a00:	mov	r3, sp
   14a04:	movt	lr, #2
   14a08:	mov	r2, r3
   14a0c:	ldm	lr!, {r0, r4, r5, r6, r7, r8}
   14a10:	stmia	r2!, {r0, r4, r5, r6, r7, r8}
   14a14:	ldm	lr, {r0, r4, r5, r6, r7, r8}
   14a18:	stm	r2, {r0, r4, r5, r6, r7, r8}
   14a1c:	ubfx	r0, r1, #5, #3
   14a20:	and	r1, r1, #31
   14a24:	mov	r7, #1
   14a28:	add	r0, r3, r0, lsl #2
   14a2c:	ldr	r2, [r0, #8]
   14a30:	bic	r7, r7, r2, lsr r1
   14a34:	eor	r1, r2, r7, lsl r1
   14a38:	mvn	r2, #0
   14a3c:	str	r1, [r0, #8]
   14a40:	mov	r0, #0
   14a44:	mov	r1, ip
   14a48:	bl	146e0 <__assert_fail@plt+0x35f8>
   14a4c:	sub	sp, fp, #24
   14a50:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14a54:	push	{r4, r5, r6, r7, fp, lr}
   14a58:	add	fp, sp, #16
   14a5c:	sub	sp, sp, #48	; 0x30
   14a60:	movw	lr, #33136	; 0x8170
   14a64:	mov	ip, r0
   14a68:	mov	r3, sp
   14a6c:	movt	lr, #2
   14a70:	mov	r2, r3
   14a74:	ldm	lr!, {r0, r1, r4, r5, r6, r7}
   14a78:	stmia	r2!, {r0, r1, r4, r5, r6, r7}
   14a7c:	ldm	lr, {r0, r1, r4, r5, r6, r7}
   14a80:	stm	r2, {r0, r1, r4, r5, r6, r7}
   14a84:	mov	r1, ip
   14a88:	mvn	r2, #0
   14a8c:	ldr	r0, [sp, #12]
   14a90:	orr	r0, r0, #67108864	; 0x4000000
   14a94:	str	r0, [sp, #12]
   14a98:	mov	r0, #0
   14a9c:	bl	146e0 <__assert_fail@plt+0x35f8>
   14aa0:	sub	sp, fp, #16
   14aa4:	pop	{r4, r5, r6, r7, fp, pc}
   14aa8:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   14aac:	add	fp, sp, #24
   14ab0:	sub	sp, sp, #48	; 0x30
   14ab4:	movw	r8, #33136	; 0x8170
   14ab8:	mov	ip, r1
   14abc:	mov	lr, r0
   14ac0:	mov	r3, sp
   14ac4:	movt	r8, #2
   14ac8:	mov	r2, r3
   14acc:	ldm	r8!, {r0, r1, r4, r5, r6, r7}
   14ad0:	stmia	r2!, {r0, r1, r4, r5, r6, r7}
   14ad4:	ldm	r8, {r0, r1, r4, r5, r6, r7}
   14ad8:	stm	r2, {r0, r1, r4, r5, r6, r7}
   14adc:	mov	r1, lr
   14ae0:	mov	r2, ip
   14ae4:	ldr	r0, [sp, #12]
   14ae8:	orr	r0, r0, #67108864	; 0x4000000
   14aec:	str	r0, [sp, #12]
   14af0:	mov	r0, #0
   14af4:	bl	146e0 <__assert_fail@plt+0x35f8>
   14af8:	sub	sp, fp, #24
   14afc:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14b00:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   14b04:	add	fp, sp, #24
   14b08:	sub	sp, sp, #96	; 0x60
   14b0c:	vmov.i32	q8, #0	; 0x00000000
   14b10:	mov	lr, sp
   14b14:	mov	ip, r2
   14b18:	cmp	r1, #10
   14b1c:	add	r3, lr, #16
   14b20:	mov	r2, lr
   14b24:	vst1.64	{d16-d17}, [r3]
   14b28:	mov	r3, #28
   14b2c:	vst1.64	{d16-d17}, [r2], r3
   14b30:	vst1.32	{d16-d17}, [r2]
   14b34:	beq	14b74 <__assert_fail@plt+0x3a8c>
   14b38:	str	r1, [sp, #48]	; 0x30
   14b3c:	add	r3, sp, #48	; 0x30
   14b40:	ldm	lr!, {r2, r4, r5, r6, r7}
   14b44:	add	r1, r3, #4
   14b48:	stmia	r1!, {r2, r4, r5, r6, r7}
   14b4c:	ldm	lr, {r2, r4, r5, r6, r7, r8}
   14b50:	stm	r1, {r2, r4, r5, r6, r7, r8}
   14b54:	mvn	r2, #0
   14b58:	ldr	r1, [sp, #60]	; 0x3c
   14b5c:	orr	r1, r1, #67108864	; 0x4000000
   14b60:	str	r1, [sp, #60]	; 0x3c
   14b64:	mov	r1, ip
   14b68:	bl	146e0 <__assert_fail@plt+0x35f8>
   14b6c:	sub	sp, fp, #24
   14b70:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14b74:	bl	110d0 <abort@plt>
   14b78:	push	{fp, lr}
   14b7c:	mov	fp, sp
   14b80:	sub	sp, sp, #8
   14b84:	mvn	ip, #0
   14b88:	str	ip, [sp]
   14b8c:	bl	14b98 <__assert_fail@plt+0x3ab0>
   14b90:	mov	sp, fp
   14b94:	pop	{fp, pc}
   14b98:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   14b9c:	add	fp, sp, #24
   14ba0:	sub	sp, sp, #48	; 0x30
   14ba4:	movw	ip, #33136	; 0x8170
   14ba8:	mov	lr, r3
   14bac:	mov	r3, sp
   14bb0:	cmp	r1, #0
   14bb4:	movt	ip, #2
   14bb8:	cmpne	r2, #0
   14bbc:	ldm	ip!, {r4, r5, r6, r7, r8, r9}
   14bc0:	stmia	r3!, {r4, r5, r6, r7, r8, r9}
   14bc4:	ldm	ip, {r4, r5, r6, r7, r8, r9}
   14bc8:	stm	r3, {r4, r5, r6, r7, r8, r9}
   14bcc:	mov	r3, #10
   14bd0:	str	r3, [sp]
   14bd4:	bne	14bdc <__assert_fail@plt+0x3af4>
   14bd8:	bl	110d0 <abort@plt>
   14bdc:	ldr	ip, [fp, #8]
   14be0:	str	r2, [sp, #44]	; 0x2c
   14be4:	str	r1, [sp, #40]	; 0x28
   14be8:	mov	r3, sp
   14bec:	mov	r1, lr
   14bf0:	mov	r2, ip
   14bf4:	bl	146e0 <__assert_fail@plt+0x35f8>
   14bf8:	sub	sp, fp, #24
   14bfc:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   14c00:	push	{fp, lr}
   14c04:	mov	fp, sp
   14c08:	sub	sp, sp, #8
   14c0c:	mov	r3, r2
   14c10:	mov	r2, r1
   14c14:	mov	r1, r0
   14c18:	mvn	r0, #0
   14c1c:	str	r0, [sp]
   14c20:	mov	r0, #0
   14c24:	bl	14b98 <__assert_fail@plt+0x3ab0>
   14c28:	mov	sp, fp
   14c2c:	pop	{fp, pc}
   14c30:	push	{fp, lr}
   14c34:	mov	fp, sp
   14c38:	sub	sp, sp, #8
   14c3c:	mov	ip, r2
   14c40:	mov	r2, r1
   14c44:	mov	r1, r0
   14c48:	str	r3, [sp]
   14c4c:	mov	r0, #0
   14c50:	mov	r3, ip
   14c54:	bl	14b98 <__assert_fail@plt+0x3ab0>
   14c58:	mov	sp, fp
   14c5c:	pop	{fp, pc}
   14c60:	movw	r3, #33040	; 0x8110
   14c64:	movt	r3, #2
   14c68:	b	146e0 <__assert_fail@plt+0x35f8>
   14c6c:	movw	r3, #33040	; 0x8110
   14c70:	mov	r2, r1
   14c74:	mov	r1, r0
   14c78:	mov	r0, #0
   14c7c:	movt	r3, #2
   14c80:	b	146e0 <__assert_fail@plt+0x35f8>
   14c84:	movw	r3, #33040	; 0x8110
   14c88:	mvn	r2, #0
   14c8c:	movt	r3, #2
   14c90:	b	146e0 <__assert_fail@plt+0x35f8>
   14c94:	movw	r3, #33040	; 0x8110
   14c98:	mov	r1, r0
   14c9c:	mov	r0, #0
   14ca0:	mvn	r2, #0
   14ca4:	movt	r3, #2
   14ca8:	b	146e0 <__assert_fail@plt+0x35f8>
   14cac:	push	{r4, r5, fp, lr}
   14cb0:	add	fp, sp, #8
   14cb4:	mov	r5, r0
   14cb8:	mov	r4, r1
   14cbc:	mov	r0, #0
   14cc0:	mov	r2, #5
   14cc4:	mov	r1, r5
   14cc8:	bl	10ee4 <dcgettext@plt>
   14ccc:	cmp	r0, r5
   14cd0:	popne	{r4, r5, fp, pc}
   14cd4:	bl	16220 <__assert_fail@plt+0x5138>
   14cd8:	ldrb	r1, [r0]
   14cdc:	and	r1, r1, #223	; 0xdf
   14ce0:	cmp	r1, #71	; 0x47
   14ce4:	beq	14d4c <__assert_fail@plt+0x3c64>
   14ce8:	cmp	r1, #85	; 0x55
   14cec:	bne	14da4 <__assert_fail@plt+0x3cbc>
   14cf0:	ldrb	r1, [r0, #1]
   14cf4:	and	r1, r1, #223	; 0xdf
   14cf8:	cmp	r1, #84	; 0x54
   14cfc:	bne	14da4 <__assert_fail@plt+0x3cbc>
   14d00:	ldrb	r1, [r0, #2]
   14d04:	and	r1, r1, #223	; 0xdf
   14d08:	cmp	r1, #70	; 0x46
   14d0c:	bne	14da4 <__assert_fail@plt+0x3cbc>
   14d10:	ldrb	r1, [r0, #3]
   14d14:	cmp	r1, #45	; 0x2d
   14d18:	bne	14da4 <__assert_fail@plt+0x3cbc>
   14d1c:	ldrb	r1, [r0, #4]
   14d20:	cmp	r1, #56	; 0x38
   14d24:	bne	14da4 <__assert_fail@plt+0x3cbc>
   14d28:	ldrb	r0, [r0, #5]
   14d2c:	cmp	r0, #0
   14d30:	bne	14da4 <__assert_fail@plt+0x3cbc>
   14d34:	ldrb	r1, [r5]
   14d38:	movw	r2, #28817	; 0x7091
   14d3c:	movw	r0, #28821	; 0x7095
   14d40:	movt	r2, #1
   14d44:	movt	r0, #1
   14d48:	b	14dd4 <__assert_fail@plt+0x3cec>
   14d4c:	ldrb	r1, [r0, #1]
   14d50:	and	r1, r1, #223	; 0xdf
   14d54:	cmp	r1, #66	; 0x42
   14d58:	bne	14da4 <__assert_fail@plt+0x3cbc>
   14d5c:	ldrb	r1, [r0, #2]
   14d60:	cmp	r1, #49	; 0x31
   14d64:	bne	14da4 <__assert_fail@plt+0x3cbc>
   14d68:	ldrb	r1, [r0, #3]
   14d6c:	cmp	r1, #56	; 0x38
   14d70:	bne	14da4 <__assert_fail@plt+0x3cbc>
   14d74:	ldrb	r1, [r0, #4]
   14d78:	cmp	r1, #48	; 0x30
   14d7c:	bne	14da4 <__assert_fail@plt+0x3cbc>
   14d80:	ldrb	r1, [r0, #5]
   14d84:	cmp	r1, #51	; 0x33
   14d88:	bne	14da4 <__assert_fail@plt+0x3cbc>
   14d8c:	ldrb	r1, [r0, #6]
   14d90:	cmp	r1, #48	; 0x30
   14d94:	bne	14da4 <__assert_fail@plt+0x3cbc>
   14d98:	ldrb	r0, [r0, #7]
   14d9c:	cmp	r0, #0
   14da0:	beq	14dc0 <__assert_fail@plt+0x3cd8>
   14da4:	movw	r1, #28811	; 0x708b
   14da8:	movw	r0, #28815	; 0x708f
   14dac:	cmp	r4, #9
   14db0:	movt	r1, #1
   14db4:	movt	r0, #1
   14db8:	moveq	r0, r1
   14dbc:	pop	{r4, r5, fp, pc}
   14dc0:	ldrb	r1, [r5]
   14dc4:	movw	r2, #28825	; 0x7099
   14dc8:	movw	r0, #28829	; 0x709d
   14dcc:	movt	r2, #1
   14dd0:	movt	r0, #1
   14dd4:	cmp	r1, #96	; 0x60
   14dd8:	moveq	r0, r2
   14ddc:	pop	{r4, r5, fp, pc}
   14de0:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   14de4:	add	fp, sp, #24
   14de8:	movw	r8, #0
   14dec:	mov	r6, r2
   14df0:	mov	r4, r1
   14df4:	mov	r5, r0
   14df8:	movt	r8, #32752	; 0x7ff0
   14dfc:	mov	r0, r5
   14e00:	mov	r1, r4
   14e04:	mov	r2, r6
   14e08:	bl	10e90 <read@plt>
   14e0c:	mov	r7, r0
   14e10:	cmn	r0, #1
   14e14:	bgt	14e3c <__assert_fail@plt+0x3d54>
   14e18:	bl	11004 <__errno_location@plt>
   14e1c:	ldr	r0, [r0]
   14e20:	cmp	r0, #4
   14e24:	beq	14dfc <__assert_fail@plt+0x3d14>
   14e28:	cmp	r6, r8
   14e2c:	bls	14e3c <__assert_fail@plt+0x3d54>
   14e30:	cmp	r0, #22
   14e34:	mov	r6, r8
   14e38:	beq	14dfc <__assert_fail@plt+0x3d14>
   14e3c:	mov	r0, r7
   14e40:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14e44:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   14e48:	add	fp, sp, #24
   14e4c:	sub	sp, sp, #32
   14e50:	ldr	r6, [fp, #12]
   14e54:	ldr	r7, [fp, #8]
   14e58:	mov	r4, r2
   14e5c:	mov	r8, r0
   14e60:	cmp	r1, #0
   14e64:	beq	14e8c <__assert_fail@plt+0x3da4>
   14e68:	movw	r2, #28916	; 0x70f4
   14e6c:	mov	r5, r1
   14e70:	str	r3, [sp, #4]
   14e74:	str	r4, [sp]
   14e78:	mov	r0, r8
   14e7c:	mov	r1, #1
   14e80:	movt	r2, #1
   14e84:	mov	r3, r5
   14e88:	b	14ea4 <__assert_fail@plt+0x3dbc>
   14e8c:	movw	r2, #28928	; 0x7100
   14e90:	str	r3, [sp]
   14e94:	mov	r0, r8
   14e98:	mov	r1, #1
   14e9c:	mov	r3, r4
   14ea0:	movt	r2, #1
   14ea4:	bl	1104c <__fprintf_chk@plt>
   14ea8:	movw	r1, #28935	; 0x7107
   14eac:	mov	r0, #0
   14eb0:	mov	r2, #5
   14eb4:	movt	r1, #1
   14eb8:	bl	10ee4 <dcgettext@plt>
   14ebc:	movw	r2, #29653	; 0x73d5
   14ec0:	mov	r3, r0
   14ec4:	movw	r0, #2022	; 0x7e6
   14ec8:	mov	r1, #1
   14ecc:	movt	r2, #1
   14ed0:	str	r0, [sp]
   14ed4:	mov	r0, r8
   14ed8:	bl	1104c <__fprintf_chk@plt>
   14edc:	movw	r4, #28032	; 0x6d80
   14ee0:	mov	r1, r8
   14ee4:	movt	r4, #1
   14ee8:	mov	r0, r4
   14eec:	bl	10e6c <fputs_unlocked@plt>
   14ef0:	movw	r1, #28939	; 0x710b
   14ef4:	mov	r0, #0
   14ef8:	mov	r2, #5
   14efc:	movt	r1, #1
   14f00:	bl	10ee4 <dcgettext@plt>
   14f04:	movw	r3, #29110	; 0x71b6
   14f08:	mov	r2, r0
   14f0c:	mov	r0, r8
   14f10:	mov	r1, #1
   14f14:	movt	r3, #1
   14f18:	bl	1104c <__fprintf_chk@plt>
   14f1c:	mov	r0, r4
   14f20:	mov	r1, r8
   14f24:	bl	10e6c <fputs_unlocked@plt>
   14f28:	cmp	r6, #9
   14f2c:	bhi	14f90 <__assert_fail@plt+0x3ea8>
   14f30:	add	r0, pc, #0
   14f34:	ldr	pc, [r0, r6, lsl #2]
   14f38:	andeq	r5, r1, r8, ror #2
   14f3c:	andeq	r4, r1, r0, ror #30
   14f40:	muleq	r1, ip, pc	; <UNPREDICTABLE>
   14f44:	andeq	r4, r1, r4, asr #31
   14f48:	andeq	r4, r1, ip, ror #31
   14f4c:	andeq	r5, r1, r4, lsl r0
   14f50:	andeq	r5, r1, ip, lsr r0
   14f54:	andeq	r5, r1, r4, ror r0
   14f58:	andeq	r5, r1, r4, lsl r1
   14f5c:	strheq	r5, [r1], -ip
   14f60:	movw	r1, #29144	; 0x71d8
   14f64:	mov	r0, #0
   14f68:	mov	r2, #5
   14f6c:	movt	r1, #1
   14f70:	bl	10ee4 <dcgettext@plt>
   14f74:	ldr	r3, [r7]
   14f78:	mov	r2, r0
   14f7c:	mov	r0, r8
   14f80:	mov	r1, #1
   14f84:	sub	sp, fp, #24
   14f88:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   14f8c:	b	1104c <__fprintf_chk@plt>
   14f90:	movw	r1, #29463	; 0x7317
   14f94:	movt	r1, #1
   14f98:	b	150c4 <__assert_fail@plt+0x3fdc>
   14f9c:	movw	r1, #29160	; 0x71e8
   14fa0:	mov	r0, #0
   14fa4:	mov	r2, #5
   14fa8:	movt	r1, #1
   14fac:	bl	10ee4 <dcgettext@plt>
   14fb0:	mov	r2, r0
   14fb4:	ldr	r3, [r7]
   14fb8:	ldr	r0, [r7, #4]
   14fbc:	str	r0, [sp]
   14fc0:	b	150b0 <__assert_fail@plt+0x3fc8>
   14fc4:	movw	r1, #29183	; 0x71ff
   14fc8:	mov	r0, #0
   14fcc:	mov	r2, #5
   14fd0:	movt	r1, #1
   14fd4:	bl	10ee4 <dcgettext@plt>
   14fd8:	mov	r2, r0
   14fdc:	ldr	r3, [r7]
   14fe0:	ldmib	r7, {r0, r1}
   14fe4:	stm	sp, {r0, r1}
   14fe8:	b	150b0 <__assert_fail@plt+0x3fc8>
   14fec:	movw	r1, #29211	; 0x721b
   14ff0:	mov	r0, #0
   14ff4:	mov	r2, #5
   14ff8:	movt	r1, #1
   14ffc:	bl	10ee4 <dcgettext@plt>
   15000:	ldr	r3, [r7]
   15004:	mov	r2, r0
   15008:	ldmib	r7, {r0, r1, r7}
   1500c:	stm	sp, {r0, r1, r7}
   15010:	b	150b0 <__assert_fail@plt+0x3fc8>
   15014:	movw	r1, #29243	; 0x723b
   15018:	mov	r0, #0
   1501c:	mov	r2, #5
   15020:	movt	r1, #1
   15024:	bl	10ee4 <dcgettext@plt>
   15028:	ldr	r3, [r7]
   1502c:	mov	r2, r0
   15030:	ldmib	r7, {r0, r1, r6, r7}
   15034:	stm	sp, {r0, r1, r6, r7}
   15038:	b	150b0 <__assert_fail@plt+0x3fc8>
   1503c:	movw	r1, #29279	; 0x725f
   15040:	mov	r0, #0
   15044:	mov	r2, #5
   15048:	movt	r1, #1
   1504c:	bl	10ee4 <dcgettext@plt>
   15050:	mov	r2, r0
   15054:	ldr	r3, [r7]
   15058:	ldmib	r7, {r0, r1, r6}
   1505c:	ldr	r5, [r7, #16]
   15060:	ldr	r7, [r7, #20]
   15064:	stm	sp, {r0, r1, r6}
   15068:	str	r5, [sp, #12]
   1506c:	str	r7, [sp, #16]
   15070:	b	150b0 <__assert_fail@plt+0x3fc8>
   15074:	movw	r1, #29319	; 0x7287
   15078:	mov	r0, #0
   1507c:	mov	r2, #5
   15080:	movt	r1, #1
   15084:	bl	10ee4 <dcgettext@plt>
   15088:	mov	r2, r0
   1508c:	ldr	r3, [r7]
   15090:	ldmib	r7, {r0, r1, r6}
   15094:	ldr	r5, [r7, #16]
   15098:	ldr	r4, [r7, #20]
   1509c:	ldr	r7, [r7, #24]
   150a0:	stm	sp, {r0, r1, r6}
   150a4:	str	r5, [sp, #12]
   150a8:	str	r4, [sp, #16]
   150ac:	str	r7, [sp, #20]
   150b0:	mov	r0, r8
   150b4:	mov	r1, #1
   150b8:	b	15164 <__assert_fail@plt+0x407c>
   150bc:	movw	r1, #29411	; 0x72e3
   150c0:	movt	r1, #1
   150c4:	mov	r0, #0
   150c8:	mov	r2, #5
   150cc:	bl	10ee4 <dcgettext@plt>
   150d0:	mov	ip, r0
   150d4:	ldr	r3, [r7]
   150d8:	ldr	r0, [r7, #4]
   150dc:	ldr	r1, [r7, #8]
   150e0:	ldr	r6, [r7, #12]
   150e4:	ldr	r5, [r7, #16]
   150e8:	ldr	r4, [r7, #20]
   150ec:	ldr	r2, [r7, #24]
   150f0:	ldr	lr, [r7, #28]
   150f4:	ldr	r7, [r7, #32]
   150f8:	stm	sp, {r0, r1, r6}
   150fc:	str	r5, [sp, #12]
   15100:	str	r4, [sp, #16]
   15104:	str	r2, [sp, #20]
   15108:	str	lr, [sp, #24]
   1510c:	str	r7, [sp, #28]
   15110:	b	15158 <__assert_fail@plt+0x4070>
   15114:	movw	r1, #29363	; 0x72b3
   15118:	mov	r0, #0
   1511c:	mov	r2, #5
   15120:	movt	r1, #1
   15124:	bl	10ee4 <dcgettext@plt>
   15128:	mov	ip, r0
   1512c:	ldr	r3, [r7]
   15130:	ldmib	r7, {r0, r1, r6}
   15134:	ldr	r5, [r7, #16]
   15138:	ldr	r4, [r7, #20]
   1513c:	ldr	r2, [r7, #24]
   15140:	ldr	r7, [r7, #28]
   15144:	stm	sp, {r0, r1, r6}
   15148:	str	r5, [sp, #12]
   1514c:	str	r4, [sp, #16]
   15150:	str	r2, [sp, #20]
   15154:	str	r7, [sp, #24]
   15158:	mov	r0, r8
   1515c:	mov	r1, #1
   15160:	mov	r2, ip
   15164:	bl	1104c <__fprintf_chk@plt>
   15168:	sub	sp, fp, #24
   1516c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   15170:	push	{r4, sl, fp, lr}
   15174:	add	fp, sp, #8
   15178:	sub	sp, sp, #8
   1517c:	ldr	ip, [fp, #8]
   15180:	mov	lr, #0
   15184:	ldr	r4, [ip, lr, lsl #2]
   15188:	add	lr, lr, #1
   1518c:	cmp	r4, #0
   15190:	bne	15184 <__assert_fail@plt+0x409c>
   15194:	sub	r4, lr, #1
   15198:	str	ip, [sp]
   1519c:	str	r4, [sp, #4]
   151a0:	bl	14e44 <__assert_fail@plt+0x3d5c>
   151a4:	sub	sp, fp, #8
   151a8:	pop	{r4, sl, fp, pc}
   151ac:	push	{r4, r5, fp, lr}
   151b0:	add	fp, sp, #8
   151b4:	sub	sp, sp, #48	; 0x30
   151b8:	ldr	r4, [fp, #8]
   151bc:	mov	ip, #0
   151c0:	add	lr, sp, #8
   151c4:	ldr	r5, [r4]
   151c8:	cmp	r5, #0
   151cc:	str	r5, [lr, ip, lsl #2]
   151d0:	beq	151e8 <__assert_fail@plt+0x4100>
   151d4:	add	ip, ip, #1
   151d8:	add	r4, r4, #4
   151dc:	cmp	ip, #10
   151e0:	bne	151c4 <__assert_fail@plt+0x40dc>
   151e4:	mov	ip, #10
   151e8:	str	lr, [sp]
   151ec:	str	ip, [sp, #4]
   151f0:	bl	14e44 <__assert_fail@plt+0x3d5c>
   151f4:	sub	sp, fp, #8
   151f8:	pop	{r4, r5, fp, pc}
   151fc:	push	{fp, lr}
   15200:	mov	fp, sp
   15204:	sub	sp, sp, #8
   15208:	add	ip, fp, #8
   1520c:	str	ip, [sp, #4]
   15210:	str	ip, [sp]
   15214:	bl	151ac <__assert_fail@plt+0x40c4>
   15218:	mov	sp, fp
   1521c:	pop	{fp, pc}
   15220:	push	{fp, lr}
   15224:	mov	fp, sp
   15228:	movw	r0, #33108	; 0x8154
   1522c:	movt	r0, #2
   15230:	ldr	r1, [r0]
   15234:	movw	r0, #28032	; 0x6d80
   15238:	movt	r0, #1
   1523c:	bl	10e6c <fputs_unlocked@plt>
   15240:	movw	r1, #29523	; 0x7353
   15244:	mov	r0, #0
   15248:	mov	r2, #5
   1524c:	movt	r1, #1
   15250:	bl	10ee4 <dcgettext@plt>
   15254:	movw	r2, #29543	; 0x7367
   15258:	mov	r1, r0
   1525c:	mov	r0, #1
   15260:	movt	r2, #1
   15264:	bl	11028 <__printf_chk@plt>
   15268:	movw	r1, #29565	; 0x737d
   1526c:	mov	r0, #0
   15270:	mov	r2, #5
   15274:	movt	r1, #1
   15278:	bl	10ee4 <dcgettext@plt>
   1527c:	movw	r2, #27518	; 0x6b7e
   15280:	movw	r3, #27841	; 0x6cc1
   15284:	mov	r1, r0
   15288:	mov	r0, #1
   1528c:	movt	r2, #1
   15290:	movt	r3, #1
   15294:	bl	11028 <__printf_chk@plt>
   15298:	movw	r1, #29585	; 0x7391
   1529c:	mov	r0, #0
   152a0:	mov	r2, #5
   152a4:	movt	r1, #1
   152a8:	bl	10ee4 <dcgettext@plt>
   152ac:	movw	r2, #29624	; 0x73b8
   152b0:	mov	r1, r0
   152b4:	mov	r0, #1
   152b8:	movt	r2, #1
   152bc:	pop	{fp, lr}
   152c0:	b	11028 <__printf_chk@plt>
   152c4:	b	152c8 <__assert_fail@plt+0x41e0>
   152c8:	push	{r4, r5, r6, sl, fp, lr}
   152cc:	add	fp, sp, #16
   152d0:	mov	r4, r2
   152d4:	mov	r5, r1
   152d8:	mov	r6, r0
   152dc:	bl	162bc <__assert_fail@plt+0x51d4>
   152e0:	cmp	r0, #0
   152e4:	popne	{r4, r5, r6, sl, fp, pc}
   152e8:	cmp	r6, #0
   152ec:	beq	15300 <__assert_fail@plt+0x4218>
   152f0:	cmp	r5, #0
   152f4:	cmpne	r4, #0
   152f8:	bne	15300 <__assert_fail@plt+0x4218>
   152fc:	pop	{r4, r5, r6, sl, fp, pc}
   15300:	bl	15730 <__assert_fail@plt+0x4648>
   15304:	push	{fp, lr}
   15308:	mov	fp, sp
   1530c:	bl	15f84 <__assert_fail@plt+0x4e9c>
   15310:	cmp	r0, #0
   15314:	popne	{fp, pc}
   15318:	bl	15730 <__assert_fail@plt+0x4648>
   1531c:	push	{fp, lr}
   15320:	mov	fp, sp
   15324:	bl	15f84 <__assert_fail@plt+0x4e9c>
   15328:	cmp	r0, #0
   1532c:	popne	{fp, pc}
   15330:	bl	15730 <__assert_fail@plt+0x4648>
   15334:	push	{fp, lr}
   15338:	mov	fp, sp
   1533c:	bl	15f84 <__assert_fail@plt+0x4e9c>
   15340:	cmp	r0, #0
   15344:	popne	{fp, pc}
   15348:	bl	15730 <__assert_fail@plt+0x4648>
   1534c:	push	{r4, r5, fp, lr}
   15350:	add	fp, sp, #8
   15354:	mov	r4, r1
   15358:	mov	r5, r0
   1535c:	bl	15fb4 <__assert_fail@plt+0x4ecc>
   15360:	cmp	r0, #0
   15364:	popne	{r4, r5, fp, pc}
   15368:	cmp	r5, #0
   1536c:	beq	1537c <__assert_fail@plt+0x4294>
   15370:	cmp	r4, #0
   15374:	bne	1537c <__assert_fail@plt+0x4294>
   15378:	pop	{r4, r5, fp, pc}
   1537c:	bl	15730 <__assert_fail@plt+0x4648>
   15380:	push	{fp, lr}
   15384:	mov	fp, sp
   15388:	cmp	r1, #0
   1538c:	orreq	r1, r1, #1
   15390:	bl	15fb4 <__assert_fail@plt+0x4ecc>
   15394:	cmp	r0, #0
   15398:	popne	{fp, pc}
   1539c:	bl	15730 <__assert_fail@plt+0x4648>
   153a0:	push	{fp, lr}
   153a4:	mov	fp, sp
   153a8:	clz	r3, r2
   153ac:	lsr	ip, r3, #5
   153b0:	clz	r3, r1
   153b4:	lsr	r3, r3, #5
   153b8:	orrs	r3, r3, ip
   153bc:	movwne	r1, #1
   153c0:	movwne	r2, #1
   153c4:	bl	162bc <__assert_fail@plt+0x51d4>
   153c8:	cmp	r0, #0
   153cc:	popne	{fp, pc}
   153d0:	bl	15730 <__assert_fail@plt+0x4648>
   153d4:	push	{fp, lr}
   153d8:	mov	fp, sp
   153dc:	mov	r2, r1
   153e0:	mov	r1, r0
   153e4:	mov	r0, #0
   153e8:	bl	162bc <__assert_fail@plt+0x51d4>
   153ec:	cmp	r0, #0
   153f0:	popne	{fp, pc}
   153f4:	bl	15730 <__assert_fail@plt+0x4648>
   153f8:	mov	r2, r1
   153fc:	mov	r1, r0
   15400:	mov	r0, #0
   15404:	b	153a0 <__assert_fail@plt+0x42b8>
   15408:	mov	r2, #1
   1540c:	b	15410 <__assert_fail@plt+0x4328>
   15410:	push	{r4, r5, fp, lr}
   15414:	add	fp, sp, #8
   15418:	ldr	r5, [r1]
   1541c:	mov	r4, r1
   15420:	cmp	r0, #0
   15424:	beq	1543c <__assert_fail@plt+0x4354>
   15428:	mov	r1, #1
   1542c:	add	r1, r1, r5, lsr #1
   15430:	adds	r5, r5, r1
   15434:	bcc	15454 <__assert_fail@plt+0x436c>
   15438:	bl	15730 <__assert_fail@plt+0x4648>
   1543c:	cmp	r5, #0
   15440:	bne	15454 <__assert_fail@plt+0x436c>
   15444:	mov	r1, #64	; 0x40
   15448:	cmp	r2, #64	; 0x40
   1544c:	udiv	r5, r1, r2
   15450:	addhi	r5, r5, #1
   15454:	mov	r1, r5
   15458:	bl	152c8 <__assert_fail@plt+0x41e0>
   1545c:	str	r5, [r4]
   15460:	pop	{r4, r5, fp, pc}
   15464:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   15468:	add	fp, sp, #24
   1546c:	ldr	r6, [r1]
   15470:	mov	r8, r1
   15474:	ldr	r4, [fp, #8]
   15478:	add	r1, r6, r6, asr #1
   1547c:	cmp	r1, r6
   15480:	mvnvs	r1, #-2147483648	; 0x80000000
   15484:	cmp	r1, r3
   15488:	mov	r5, r1
   1548c:	movgt	r5, r3
   15490:	cmn	r3, #1
   15494:	movle	r5, r1
   15498:	cmn	r4, #1
   1549c:	ble	154bc <__assert_fail@plt+0x43d4>
   154a0:	cmp	r4, #0
   154a4:	beq	15510 <__assert_fail@plt+0x4428>
   154a8:	cmn	r5, #1
   154ac:	ble	154e4 <__assert_fail@plt+0x43fc>
   154b0:	mvn	r7, #-2147483648	; 0x80000000
   154b4:	udiv	r1, r7, r4
   154b8:	b	154d8 <__assert_fail@plt+0x43f0>
   154bc:	cmn	r5, #1
   154c0:	ble	15500 <__assert_fail@plt+0x4418>
   154c4:	cmn	r4, #1
   154c8:	beq	15510 <__assert_fail@plt+0x4428>
   154cc:	mov	r1, #-2147483648	; 0x80000000
   154d0:	mvn	r7, #-2147483648	; 0x80000000
   154d4:	sdiv	r1, r1, r4
   154d8:	cmp	r1, r5
   154dc:	bge	15510 <__assert_fail@plt+0x4428>
   154e0:	b	15520 <__assert_fail@plt+0x4438>
   154e4:	beq	15510 <__assert_fail@plt+0x4428>
   154e8:	mov	r1, #-2147483648	; 0x80000000
   154ec:	mvn	r7, #-2147483648	; 0x80000000
   154f0:	sdiv	r1, r1, r5
   154f4:	cmp	r1, r4
   154f8:	bge	15510 <__assert_fail@plt+0x4428>
   154fc:	b	15520 <__assert_fail@plt+0x4438>
   15500:	mvn	r7, #-2147483648	; 0x80000000
   15504:	sdiv	r1, r7, r4
   15508:	cmp	r5, r1
   1550c:	blt	15520 <__assert_fail@plt+0x4438>
   15510:	mul	r1, r5, r4
   15514:	mov	r7, #64	; 0x40
   15518:	cmp	r1, #63	; 0x3f
   1551c:	bgt	15528 <__assert_fail@plt+0x4440>
   15520:	sdiv	r5, r7, r4
   15524:	mul	r1, r5, r4
   15528:	cmp	r0, #0
   1552c:	moveq	r7, #0
   15530:	streq	r7, [r8]
   15534:	sub	r7, r5, r6
   15538:	cmp	r7, r2
   1553c:	bge	155e0 <__assert_fail@plt+0x44f8>
   15540:	add	r5, r6, r2
   15544:	mov	r2, #0
   15548:	mov	r1, #0
   1554c:	cmp	r5, r3
   15550:	movwgt	r2, #1
   15554:	cmn	r3, #1
   15558:	movwgt	r1, #1
   1555c:	cmp	r5, r6
   15560:	bvs	155c8 <__assert_fail@plt+0x44e0>
   15564:	ands	r1, r1, r2
   15568:	bne	155c8 <__assert_fail@plt+0x44e0>
   1556c:	cmn	r4, #1
   15570:	ble	15590 <__assert_fail@plt+0x44a8>
   15574:	cmp	r4, #0
   15578:	beq	155dc <__assert_fail@plt+0x44f4>
   1557c:	cmn	r5, #1
   15580:	ble	155b4 <__assert_fail@plt+0x44cc>
   15584:	mvn	r1, #-2147483648	; 0x80000000
   15588:	udiv	r1, r1, r4
   1558c:	b	155a8 <__assert_fail@plt+0x44c0>
   15590:	cmn	r5, #1
   15594:	ble	155cc <__assert_fail@plt+0x44e4>
   15598:	cmn	r4, #1
   1559c:	beq	155dc <__assert_fail@plt+0x44f4>
   155a0:	mov	r1, #-2147483648	; 0x80000000
   155a4:	sdiv	r1, r1, r4
   155a8:	cmp	r1, r5
   155ac:	bge	155dc <__assert_fail@plt+0x44f4>
   155b0:	b	155c8 <__assert_fail@plt+0x44e0>
   155b4:	beq	155dc <__assert_fail@plt+0x44f4>
   155b8:	mov	r1, #-2147483648	; 0x80000000
   155bc:	sdiv	r1, r1, r5
   155c0:	cmp	r1, r4
   155c4:	bge	155dc <__assert_fail@plt+0x44f4>
   155c8:	bl	15730 <__assert_fail@plt+0x4648>
   155cc:	mvn	r1, #-2147483648	; 0x80000000
   155d0:	sdiv	r1, r1, r4
   155d4:	cmp	r5, r1
   155d8:	blt	155c8 <__assert_fail@plt+0x44e0>
   155dc:	mul	r1, r5, r4
   155e0:	bl	1534c <__assert_fail@plt+0x4264>
   155e4:	str	r5, [r8]
   155e8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   155ec:	push	{fp, lr}
   155f0:	mov	fp, sp
   155f4:	mov	r1, #1
   155f8:	bl	15f30 <__assert_fail@plt+0x4e48>
   155fc:	cmp	r0, #0
   15600:	popne	{fp, pc}
   15604:	bl	15730 <__assert_fail@plt+0x4648>
   15608:	push	{fp, lr}
   1560c:	mov	fp, sp
   15610:	bl	15f30 <__assert_fail@plt+0x4e48>
   15614:	cmp	r0, #0
   15618:	popne	{fp, pc}
   1561c:	bl	15730 <__assert_fail@plt+0x4648>
   15620:	push	{fp, lr}
   15624:	mov	fp, sp
   15628:	mov	r1, #1
   1562c:	bl	15f30 <__assert_fail@plt+0x4e48>
   15630:	cmp	r0, #0
   15634:	popne	{fp, pc}
   15638:	bl	15730 <__assert_fail@plt+0x4648>
   1563c:	push	{fp, lr}
   15640:	mov	fp, sp
   15644:	bl	15f30 <__assert_fail@plt+0x4e48>
   15648:	cmp	r0, #0
   1564c:	popne	{fp, pc}
   15650:	bl	15730 <__assert_fail@plt+0x4648>
   15654:	push	{r4, r5, fp, lr}
   15658:	add	fp, sp, #8
   1565c:	mov	r5, r0
   15660:	mov	r0, r1
   15664:	mov	r4, r1
   15668:	bl	15f84 <__assert_fail@plt+0x4e9c>
   1566c:	cmp	r0, #0
   15670:	beq	15684 <__assert_fail@plt+0x459c>
   15674:	mov	r1, r5
   15678:	mov	r2, r4
   1567c:	pop	{r4, r5, fp, lr}
   15680:	b	10ec0 <memcpy@plt>
   15684:	bl	15730 <__assert_fail@plt+0x4648>
   15688:	push	{r4, r5, fp, lr}
   1568c:	add	fp, sp, #8
   15690:	mov	r5, r0
   15694:	mov	r0, r1
   15698:	mov	r4, r1
   1569c:	bl	15f84 <__assert_fail@plt+0x4e9c>
   156a0:	cmp	r0, #0
   156a4:	beq	156b8 <__assert_fail@plt+0x45d0>
   156a8:	mov	r1, r5
   156ac:	mov	r2, r4
   156b0:	pop	{r4, r5, fp, lr}
   156b4:	b	10ec0 <memcpy@plt>
   156b8:	bl	15730 <__assert_fail@plt+0x4648>
   156bc:	push	{r4, r5, fp, lr}
   156c0:	add	fp, sp, #8
   156c4:	mov	r5, r0
   156c8:	add	r0, r1, #1
   156cc:	mov	r4, r1
   156d0:	bl	15f84 <__assert_fail@plt+0x4e9c>
   156d4:	cmp	r0, #0
   156d8:	beq	156f4 <__assert_fail@plt+0x460c>
   156dc:	mov	r1, #0
   156e0:	mov	r2, r4
   156e4:	strb	r1, [r0, r4]
   156e8:	mov	r1, r5
   156ec:	pop	{r4, r5, fp, lr}
   156f0:	b	10ec0 <memcpy@plt>
   156f4:	bl	15730 <__assert_fail@plt+0x4648>
   156f8:	push	{r4, r5, fp, lr}
   156fc:	add	fp, sp, #8
   15700:	mov	r4, r0
   15704:	bl	10fe0 <strlen@plt>
   15708:	add	r5, r0, #1
   1570c:	mov	r0, r5
   15710:	bl	15f84 <__assert_fail@plt+0x4e9c>
   15714:	cmp	r0, #0
   15718:	beq	1572c <__assert_fail@plt+0x4644>
   1571c:	mov	r1, r4
   15720:	mov	r2, r5
   15724:	pop	{r4, r5, fp, lr}
   15728:	b	10ec0 <memcpy@plt>
   1572c:	bl	15730 <__assert_fail@plt+0x4648>
   15730:	push	{fp, lr}
   15734:	mov	fp, sp
   15738:	movw	r0, #33020	; 0x80fc
   1573c:	movw	r1, #29700	; 0x7404
   15740:	mov	r2, #5
   15744:	movt	r0, #2
   15748:	movt	r1, #1
   1574c:	ldr	r4, [r0]
   15750:	mov	r0, #0
   15754:	bl	10ee4 <dcgettext@plt>
   15758:	movw	r2, #27565	; 0x6bad
   1575c:	mov	r3, r0
   15760:	mov	r0, r4
   15764:	mov	r1, #0
   15768:	movt	r2, #1
   1576c:	bl	10f68 <error@plt>
   15770:	bl	110d0 <abort@plt>
   15774:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   15778:	add	fp, sp, #24
   1577c:	sub	sp, sp, #16
   15780:	mov	r8, r0
   15784:	ldr	r0, [fp, #16]
   15788:	mov	r5, r3
   1578c:	mov	r6, r2
   15790:	mov	r2, r1
   15794:	add	r3, sp, #8
   15798:	mov	r1, #0
   1579c:	str	r0, [sp]
   157a0:	mov	r0, r8
   157a4:	bl	15874 <__assert_fail@plt+0x478c>
   157a8:	cmp	r0, #0
   157ac:	bne	15840 <__assert_fail@plt+0x4758>
   157b0:	ldr	r4, [sp, #8]
   157b4:	ldr	r7, [sp, #12]
   157b8:	subs	r0, r4, r6
   157bc:	sbcs	r0, r7, r5
   157c0:	bcc	157e4 <__assert_fail@plt+0x46fc>
   157c4:	ldr	r1, [fp, #8]
   157c8:	ldr	r0, [fp, #12]
   157cc:	subs	r1, r1, r4
   157d0:	sbcs	r0, r0, r7
   157d4:	movcs	r0, r4
   157d8:	movcs	r1, r7
   157dc:	subcs	sp, fp, #24
   157e0:	popcs	{r4, r5, r6, r7, r8, sl, fp, pc}
   157e4:	bl	11004 <__errno_location@plt>
   157e8:	subs	r1, r4, #1073741824	; 0x40000000
   157ec:	sbcs	r1, r7, #0
   157f0:	bcc	157fc <__assert_fail@plt+0x4714>
   157f4:	mov	r1, #75	; 0x4b
   157f8:	b	15800 <__assert_fail@plt+0x4718>
   157fc:	mov	r1, #34	; 0x22
   15800:	str	r1, [r0]
   15804:	ldr	r6, [r0]
   15808:	ldr	r4, [fp, #24]
   1580c:	ldr	r5, [fp, #20]
   15810:	mov	r0, r8
   15814:	bl	14c94 <__assert_fail@plt+0x3bac>
   15818:	subs	r1, r6, #22
   1581c:	movw	r2, #27561	; 0x6ba9
   15820:	str	r0, [sp]
   15824:	mov	r3, r5
   15828:	movne	r1, r6
   1582c:	cmp	r4, #0
   15830:	movt	r2, #1
   15834:	movweq	r4, #1
   15838:	mov	r0, r4
   1583c:	bl	10f68 <error@plt>
   15840:	cmp	r0, #1
   15844:	beq	1585c <__assert_fail@plt+0x4774>
   15848:	cmp	r0, #3
   1584c:	bne	15864 <__assert_fail@plt+0x477c>
   15850:	bl	11004 <__errno_location@plt>
   15854:	mov	r1, #0
   15858:	b	15800 <__assert_fail@plt+0x4718>
   1585c:	bl	11004 <__errno_location@plt>
   15860:	b	157f4 <__assert_fail@plt+0x470c>
   15864:	bl	11004 <__errno_location@plt>
   15868:	b	15804 <__assert_fail@plt+0x471c>
   1586c:	mov	r1, #10
   15870:	b	15774 <__assert_fail@plt+0x468c>
   15874:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15878:	add	fp, sp, #28
   1587c:	sub	sp, sp, #20
   15880:	cmp	r2, #37	; 0x25
   15884:	bcs	15f10 <__assert_fail@plt+0x4e28>
   15888:	mov	r8, r3
   1588c:	mov	r5, r2
   15890:	mov	r6, r1
   15894:	mov	r4, r0
   15898:	bl	11004 <__errno_location@plt>
   1589c:	mov	r7, r0
   158a0:	mov	r0, #0
   158a4:	str	r0, [r7]
   158a8:	bl	10fbc <__ctype_b_loc@plt>
   158ac:	ldr	r1, [r0]
   158b0:	mov	r2, r4
   158b4:	ldrb	r0, [r2], #1
   158b8:	add	r3, r1, r0, lsl #1
   158bc:	ldrb	r3, [r3, #1]
   158c0:	tst	r3, #32
   158c4:	bne	158b4 <__assert_fail@plt+0x47cc>
   158c8:	cmp	r6, #0
   158cc:	add	sl, sp, #16
   158d0:	movne	sl, r6
   158d4:	mov	r6, #4
   158d8:	cmp	r0, #45	; 0x2d
   158dc:	beq	15f04 <__assert_fail@plt+0x4e1c>
   158e0:	mov	r0, r4
   158e4:	mov	r1, sl
   158e8:	mov	r2, r5
   158ec:	str	r8, [sp, #12]
   158f0:	bl	11040 <strtoumax@plt>
   158f4:	ldr	r5, [sl]
   158f8:	cmp	r5, r4
   158fc:	beq	15924 <__assert_fail@plt+0x483c>
   15900:	mov	r8, r0
   15904:	ldr	r0, [r7]
   15908:	mov	r9, r1
   1590c:	cmp	r0, #0
   15910:	beq	15958 <__assert_fail@plt+0x4870>
   15914:	cmp	r0, #34	; 0x22
   15918:	bne	15f04 <__assert_fail@plt+0x4e1c>
   1591c:	mov	r6, #1
   15920:	b	1595c <__assert_fail@plt+0x4874>
   15924:	ldr	r0, [fp, #8]
   15928:	cmp	r0, #0
   1592c:	beq	15f04 <__assert_fail@plt+0x4e1c>
   15930:	ldrb	r1, [r4]
   15934:	cmp	r1, #0
   15938:	beq	15f04 <__assert_fail@plt+0x4e1c>
   1593c:	bl	10fec <strchr@plt>
   15940:	cmp	r0, #0
   15944:	beq	15f04 <__assert_fail@plt+0x4e1c>
   15948:	mov	r6, #0
   1594c:	mov	r8, #1
   15950:	mov	r9, #0
   15954:	b	15968 <__assert_fail@plt+0x4880>
   15958:	mov	r6, r0
   1595c:	ldr	r0, [fp, #8]
   15960:	cmp	r0, #0
   15964:	beq	15efc <__assert_fail@plt+0x4e14>
   15968:	ldrb	r7, [r5]
   1596c:	cmp	r7, #0
   15970:	beq	15efc <__assert_fail@plt+0x4e14>
   15974:	ldr	r0, [fp, #8]
   15978:	mov	r1, r7
   1597c:	bl	10fec <strchr@plt>
   15980:	cmp	r0, #0
   15984:	beq	15a8c <__assert_fail@plt+0x49a4>
   15988:	sub	r0, r7, #69	; 0x45
   1598c:	mov	r1, #1
   15990:	mov	r3, #0
   15994:	mov	r4, #1024	; 0x400
   15998:	cmp	r0, #21
   1599c:	str	r1, [sp, #8]
   159a0:	bhi	159b8 <__assert_fail@plt+0x48d0>
   159a4:	movw	r2, #35141	; 0x8945
   159a8:	mov	r1, #1
   159ac:	movt	r2, #48	; 0x30
   159b0:	tst	r2, r1, lsl r0
   159b4:	bne	159d4 <__assert_fail@plt+0x48ec>
   159b8:	sub	r0, r7, #103	; 0x67
   159bc:	cmp	r0, #13
   159c0:	bhi	15a08 <__assert_fail@plt+0x4920>
   159c4:	mov	r1, #1
   159c8:	movw	r2, #8273	; 0x2051
   159cc:	tst	r2, r1, lsl r0
   159d0:	beq	15a08 <__assert_fail@plt+0x4920>
   159d4:	ldr	r0, [fp, #8]
   159d8:	mov	r1, #48	; 0x30
   159dc:	bl	10fec <strchr@plt>
   159e0:	cmp	r0, #0
   159e4:	beq	15a04 <__assert_fail@plt+0x491c>
   159e8:	ldrb	r0, [r5, #1]
   159ec:	cmp	r0, #66	; 0x42
   159f0:	cmpne	r0, #68	; 0x44
   159f4:	bne	15b1c <__assert_fail@plt+0x4a34>
   159f8:	mov	r4, #1000	; 0x3e8
   159fc:	mov	r0, #2
   15a00:	str	r0, [sp, #8]
   15a04:	mov	r3, #0
   15a08:	cmp	r7, #89	; 0x59
   15a0c:	stm	sp, {r5, r6}
   15a10:	bgt	15a98 <__assert_fail@plt+0x49b0>
   15a14:	sub	r0, r7, #66	; 0x42
   15a18:	cmp	r0, #14
   15a1c:	bhi	15b40 <__assert_fail@plt+0x4a58>
   15a20:	add	r1, pc, #0
   15a24:	ldr	pc, [r1, r0, lsl #2]
   15a28:	andeq	r5, r1, r4, ror #20
   15a2c:	strdeq	r5, [r1], -r0
   15a30:	strdeq	r5, [r1], -r0
   15a34:	andeq	r5, r1, r4, lsl #28
   15a38:	strdeq	r5, [r1], -r0
   15a3c:	strdeq	r5, [r1], -r4
   15a40:	strdeq	r5, [r1], -r0
   15a44:	strdeq	r5, [r1], -r0
   15a48:	strdeq	r5, [r1], -r0
   15a4c:	andeq	r5, r1, r0, ror #24
   15a50:	strdeq	r5, [r1], -r0
   15a54:	andeq	r5, r1, r4, lsr #25
   15a58:	strdeq	r5, [r1], -r0
   15a5c:	strdeq	r5, [r1], -r0
   15a60:	andeq	r5, r1, r0, ror lr
   15a64:	mov	r1, #0
   15a68:	lsl	r3, r9, #10
   15a6c:	lsl	r0, r8, #10
   15a70:	lsr	r2, r9, #22
   15a74:	cmp	r1, r9, lsr #22
   15a78:	orr	r3, r3, r8, lsr #22
   15a7c:	mvnne	r0, #0
   15a80:	movwne	r2, #1
   15a84:	cmp	r1, r9, lsr #22
   15a88:	b	15b0c <__assert_fail@plt+0x4a24>
   15a8c:	ldr	r0, [sp, #12]
   15a90:	orr	r6, r6, #2
   15a94:	b	15f00 <__assert_fail@plt+0x4e18>
   15a98:	cmp	r7, #115	; 0x73
   15a9c:	bgt	15bbc <__assert_fail@plt+0x4ad4>
   15aa0:	sub	r0, r7, #98	; 0x62
   15aa4:	cmp	r0, #11
   15aa8:	bhi	15d7c <__assert_fail@plt+0x4c94>
   15aac:	add	r1, pc, #4
   15ab0:	mov	r2, #0
   15ab4:	ldr	pc, [r1, r0, lsl #2]
   15ab8:	andeq	r5, r1, r8, ror #21
   15abc:	ldrdeq	r5, [r1], -r8
   15ac0:	strdeq	r5, [r1], -r0
   15ac4:	strdeq	r5, [r1], -r0
   15ac8:	strdeq	r5, [r1], -r0
   15acc:	strdeq	r5, [r1], -r4
   15ad0:	strdeq	r5, [r1], -r0
   15ad4:	strdeq	r5, [r1], -r0
   15ad8:	strdeq	r5, [r1], -r0
   15adc:	andeq	r5, r1, r0, ror #24
   15ae0:	strdeq	r5, [r1], -r0
   15ae4:	andeq	r5, r1, r4, lsr #25
   15ae8:	mov	r1, #0
   15aec:	lsl	r3, r9, #9
   15af0:	lsl	r0, r8, #9
   15af4:	lsr	r2, r9, #23
   15af8:	cmp	r1, r9, lsr #23
   15afc:	orr	r3, r3, r8, lsr #23
   15b00:	mvnne	r0, #0
   15b04:	movwne	r2, #1
   15b08:	cmp	r1, r9, lsr #23
   15b0c:	mvnne	r3, #0
   15b10:	mov	r8, r0
   15b14:	mov	r9, r3
   15b18:	b	15ed8 <__assert_fail@plt+0x4df0>
   15b1c:	cmp	r0, #105	; 0x69
   15b20:	mov	r3, #0
   15b24:	bne	15a08 <__assert_fail@plt+0x4920>
   15b28:	ldrb	r0, [r5, #2]
   15b2c:	mov	r1, #1
   15b30:	cmp	r0, #66	; 0x42
   15b34:	movweq	r1, #3
   15b38:	str	r1, [sp, #8]
   15b3c:	b	15a08 <__assert_fail@plt+0x4920>
   15b40:	cmp	r7, #84	; 0x54
   15b44:	beq	15d10 <__assert_fail@plt+0x4c28>
   15b48:	cmp	r7, #89	; 0x59
   15b4c:	bne	15df0 <__assert_fail@plt+0x4d08>
   15b50:	mvn	r0, #0
   15b54:	mvn	r1, #0
   15b58:	mov	r2, r4
   15b5c:	mov	r5, r3
   15b60:	bl	164cc <__assert_fail@plt+0x53e4>
   15b64:	mov	ip, r5
   15b68:	mvn	lr, #0
   15b6c:	mov	r2, #0
   15b70:	mvn	r3, #7
   15b74:	mov	r5, r8
   15b78:	mov	r7, r9
   15b7c:	umull	r8, r6, r5, r4
   15b80:	mvn	r9, #0
   15b84:	mla	r6, r5, ip, r6
   15b88:	subs	r5, r0, r5
   15b8c:	sbcs	r5, r1, r7
   15b90:	mov	r5, #0
   15b94:	movwcc	r5, #1
   15b98:	cmp	r5, #0
   15b9c:	mlaeq	r9, r7, r4, r6
   15ba0:	movne	r8, lr
   15ba4:	orrne	r2, r2, #1
   15ba8:	adds	r3, r3, #1
   15bac:	mov	r5, r8
   15bb0:	mov	r7, r9
   15bb4:	bcc	15b7c <__assert_fail@plt+0x4a94>
   15bb8:	b	15ed8 <__assert_fail@plt+0x4df0>
   15bbc:	cmp	r7, #116	; 0x74
   15bc0:	beq	15d10 <__assert_fail@plt+0x4c28>
   15bc4:	cmp	r7, #119	; 0x77
   15bc8:	bne	15df0 <__assert_fail@plt+0x4d08>
   15bcc:	lsl	r1, r9, #1
   15bd0:	cmp	r9, #0
   15bd4:	lsl	r0, r8, #1
   15bd8:	lsr	r2, r9, #31
   15bdc:	orr	r1, r1, r8, lsr #31
   15be0:	mvnmi	r0, #0
   15be4:	mvnmi	r1, #0
   15be8:	mov	r8, r0
   15bec:	mov	r9, r1
   15bf0:	b	15ed8 <__assert_fail@plt+0x4df0>
   15bf4:	mvn	r0, #0
   15bf8:	mvn	r1, #0
   15bfc:	mov	r2, r4
   15c00:	mov	r5, r3
   15c04:	bl	164cc <__assert_fail@plt+0x53e4>
   15c08:	mov	ip, r5
   15c0c:	mvn	lr, #0
   15c10:	mov	r2, #0
   15c14:	mvn	r3, #2
   15c18:	mov	r6, r8
   15c1c:	mov	r5, r9
   15c20:	umull	r8, r7, r6, r4
   15c24:	mvn	r9, #0
   15c28:	mla	r7, r6, ip, r7
   15c2c:	subs	r6, r0, r6
   15c30:	sbcs	r6, r1, r5
   15c34:	mov	r6, #0
   15c38:	movwcc	r6, #1
   15c3c:	cmp	r6, #0
   15c40:	mlaeq	r9, r5, r4, r7
   15c44:	movne	r8, lr
   15c48:	orrne	r2, r2, #1
   15c4c:	adds	r3, r3, #1
   15c50:	mov	r6, r8
   15c54:	mov	r5, r9
   15c58:	bcc	15c20 <__assert_fail@plt+0x4b38>
   15c5c:	b	15ed8 <__assert_fail@plt+0x4df0>
   15c60:	mvn	r0, #0
   15c64:	mvn	r1, #0
   15c68:	mov	r2, r4
   15c6c:	mov	r5, r3
   15c70:	bl	164cc <__assert_fail@plt+0x53e4>
   15c74:	subs	r0, r0, r8
   15c78:	mov	r2, #0
   15c7c:	sbcs	r0, r1, r9
   15c80:	umull	r0, r1, r8, r4
   15c84:	movwcc	r2, #1
   15c88:	cmp	r2, #0
   15c8c:	mla	r1, r8, r5, r1
   15c90:	mvnne	r0, #0
   15c94:	mla	r9, r9, r4, r1
   15c98:	mvnne	r9, #0
   15c9c:	mov	r8, r0
   15ca0:	b	15ed8 <__assert_fail@plt+0x4df0>
   15ca4:	mvn	r0, #0
   15ca8:	mvn	r1, #0
   15cac:	mov	r2, r4
   15cb0:	mov	r5, r3
   15cb4:	bl	164cc <__assert_fail@plt+0x53e4>
   15cb8:	mov	ip, r5
   15cbc:	mvn	lr, #0
   15cc0:	mov	r2, #0
   15cc4:	mvn	r3, #1
   15cc8:	mov	r6, r8
   15ccc:	mov	r5, r9
   15cd0:	umull	r8, r7, r6, r4
   15cd4:	mvn	r9, #0
   15cd8:	mla	r7, r6, ip, r7
   15cdc:	subs	r6, r0, r6
   15ce0:	sbcs	r6, r1, r5
   15ce4:	mov	r6, #0
   15ce8:	movwcc	r6, #1
   15cec:	cmp	r6, #0
   15cf0:	mlaeq	r9, r5, r4, r7
   15cf4:	movne	r8, lr
   15cf8:	orrne	r2, r2, #1
   15cfc:	adds	r3, r3, #1
   15d00:	mov	r6, r8
   15d04:	mov	r5, r9
   15d08:	bcc	15cd0 <__assert_fail@plt+0x4be8>
   15d0c:	b	15ed8 <__assert_fail@plt+0x4df0>
   15d10:	mvn	r0, #0
   15d14:	mvn	r1, #0
   15d18:	mov	r2, r4
   15d1c:	mov	r5, r3
   15d20:	bl	164cc <__assert_fail@plt+0x53e4>
   15d24:	mov	ip, r5
   15d28:	mvn	lr, #0
   15d2c:	mov	r2, #0
   15d30:	mvn	r3, #3
   15d34:	mov	r6, r8
   15d38:	mov	r5, r9
   15d3c:	umull	r8, r7, r6, r4
   15d40:	mvn	r9, #0
   15d44:	mla	r7, r6, ip, r7
   15d48:	subs	r6, r0, r6
   15d4c:	sbcs	r6, r1, r5
   15d50:	mov	r6, #0
   15d54:	movwcc	r6, #1
   15d58:	cmp	r6, #0
   15d5c:	mlaeq	r9, r5, r4, r7
   15d60:	movne	r8, lr
   15d64:	orrne	r2, r2, #1
   15d68:	adds	r3, r3, #1
   15d6c:	mov	r6, r8
   15d70:	mov	r5, r9
   15d74:	bcc	15d3c <__assert_fail@plt+0x4c54>
   15d78:	b	15ed8 <__assert_fail@plt+0x4df0>
   15d7c:	cmp	r7, #90	; 0x5a
   15d80:	bne	15df0 <__assert_fail@plt+0x4d08>
   15d84:	mvn	r0, #0
   15d88:	mvn	r1, #0
   15d8c:	mov	r2, r4
   15d90:	mov	r5, r3
   15d94:	bl	164cc <__assert_fail@plt+0x53e4>
   15d98:	mov	ip, r5
   15d9c:	mvn	lr, #0
   15da0:	mov	r2, #0
   15da4:	mvn	r3, #6
   15da8:	mov	r5, r8
   15dac:	mov	r7, r9
   15db0:	umull	r8, r6, r5, r4
   15db4:	mvn	r9, #0
   15db8:	mla	r6, r5, ip, r6
   15dbc:	subs	r5, r0, r5
   15dc0:	sbcs	r5, r1, r7
   15dc4:	mov	r5, #0
   15dc8:	movwcc	r5, #1
   15dcc:	cmp	r5, #0
   15dd0:	mlaeq	r9, r7, r4, r6
   15dd4:	movne	r8, lr
   15dd8:	orrne	r2, r2, #1
   15ddc:	adds	r3, r3, #1
   15de0:	mov	r5, r8
   15de4:	mov	r7, r9
   15de8:	bcc	15db0 <__assert_fail@plt+0x4cc8>
   15dec:	b	15ed8 <__assert_fail@plt+0x4df0>
   15df0:	ldr	r0, [sp, #12]
   15df4:	strd	r8, [r0]
   15df8:	ldr	r6, [sp, #4]
   15dfc:	orr	r6, r6, #2
   15e00:	b	15f04 <__assert_fail@plt+0x4e1c>
   15e04:	mvn	r0, #0
   15e08:	mvn	r1, #0
   15e0c:	mov	r2, r4
   15e10:	mov	r5, r3
   15e14:	bl	164cc <__assert_fail@plt+0x53e4>
   15e18:	mov	ip, r5
   15e1c:	mvn	lr, #0
   15e20:	mov	r2, #0
   15e24:	mvn	r3, #5
   15e28:	mov	r5, r8
   15e2c:	mov	r7, r9
   15e30:	umull	r8, r6, r5, r4
   15e34:	mvn	r9, #0
   15e38:	mla	r6, r5, ip, r6
   15e3c:	subs	r5, r0, r5
   15e40:	sbcs	r5, r1, r7
   15e44:	mov	r5, #0
   15e48:	movwcc	r5, #1
   15e4c:	cmp	r5, #0
   15e50:	mlaeq	r9, r7, r4, r6
   15e54:	movne	r8, lr
   15e58:	orrne	r2, r2, #1
   15e5c:	adds	r3, r3, #1
   15e60:	mov	r5, r8
   15e64:	mov	r7, r9
   15e68:	bcc	15e30 <__assert_fail@plt+0x4d48>
   15e6c:	b	15ed8 <__assert_fail@plt+0x4df0>
   15e70:	mvn	r0, #0
   15e74:	mvn	r1, #0
   15e78:	mov	r2, r4
   15e7c:	mov	r5, r3
   15e80:	bl	164cc <__assert_fail@plt+0x53e4>
   15e84:	mov	ip, r5
   15e88:	mvn	lr, #0
   15e8c:	mov	r2, #0
   15e90:	mvn	r3, #4
   15e94:	mov	r5, r8
   15e98:	mov	r7, r9
   15e9c:	umull	r8, r6, r5, r4
   15ea0:	mvn	r9, #0
   15ea4:	mla	r6, r5, ip, r6
   15ea8:	subs	r5, r0, r5
   15eac:	sbcs	r5, r1, r7
   15eb0:	mov	r5, #0
   15eb4:	movwcc	r5, #1
   15eb8:	cmp	r5, #0
   15ebc:	mlaeq	r9, r7, r4, r6
   15ec0:	movne	r8, lr
   15ec4:	orrne	r2, r2, #1
   15ec8:	adds	r3, r3, #1
   15ecc:	mov	r5, r8
   15ed0:	mov	r7, r9
   15ed4:	bcc	15e9c <__assert_fail@plt+0x4db4>
   15ed8:	ldr	r1, [sp]
   15edc:	ldr	r3, [sp, #8]
   15ee0:	ldr	r6, [sp, #4]
   15ee4:	add	r0, r1, r3
   15ee8:	orr	r6, r2, r6
   15eec:	str	r0, [sl]
   15ef0:	ldrb	r0, [r1, r3]
   15ef4:	cmp	r0, #0
   15ef8:	orrne	r6, r6, #2
   15efc:	ldr	r0, [sp, #12]
   15f00:	strd	r8, [r0]
   15f04:	mov	r0, r6
   15f08:	sub	sp, fp, #28
   15f0c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15f10:	movw	r0, #29717	; 0x7415
   15f14:	movw	r1, #29755	; 0x743b
   15f18:	movw	r3, #29771	; 0x744b
   15f1c:	mov	r2, #85	; 0x55
   15f20:	movt	r0, #1
   15f24:	movt	r1, #1
   15f28:	movt	r3, #1
   15f2c:	bl	110e8 <__assert_fail@plt>
   15f30:	clz	r2, r1
   15f34:	clz	r3, r0
   15f38:	lsr	r2, r2, #5
   15f3c:	lsr	r3, r3, #5
   15f40:	orrs	r2, r3, r2
   15f44:	movwne	r1, #1
   15f48:	movwne	r0, #1
   15f4c:	cmp	r1, #0
   15f50:	beq	15f80 <__assert_fail@plt+0x4e98>
   15f54:	mvn	r2, #-2147483648	; 0x80000000
   15f58:	udiv	r2, r2, r1
   15f5c:	cmp	r2, r0
   15f60:	bcs	15f80 <__assert_fail@plt+0x4e98>
   15f64:	push	{fp, lr}
   15f68:	mov	fp, sp
   15f6c:	bl	11004 <__errno_location@plt>
   15f70:	mov	r1, #12
   15f74:	str	r1, [r0]
   15f78:	mov	r0, #0
   15f7c:	pop	{fp, pc}
   15f80:	b	10e60 <calloc@plt>
   15f84:	cmp	r0, #0
   15f88:	movweq	r0, #1
   15f8c:	cmn	r0, #1
   15f90:	ble	15f98 <__assert_fail@plt+0x4eb0>
   15f94:	b	10f80 <malloc@plt>
   15f98:	push	{fp, lr}
   15f9c:	mov	fp, sp
   15fa0:	bl	11004 <__errno_location@plt>
   15fa4:	mov	r1, #12
   15fa8:	str	r1, [r0]
   15fac:	mov	r0, #0
   15fb0:	pop	{fp, pc}
   15fb4:	push	{fp, lr}
   15fb8:	mov	fp, sp
   15fbc:	cmp	r0, #0
   15fc0:	beq	15fdc <__assert_fail@plt+0x4ef4>
   15fc4:	cmp	r1, #0
   15fc8:	beq	15fe8 <__assert_fail@plt+0x4f00>
   15fcc:	cmn	r1, #1
   15fd0:	ble	15ff0 <__assert_fail@plt+0x4f08>
   15fd4:	pop	{fp, lr}
   15fd8:	b	10ef0 <realloc@plt>
   15fdc:	mov	r0, r1
   15fe0:	pop	{fp, lr}
   15fe4:	b	15f84 <__assert_fail@plt+0x4e9c>
   15fe8:	bl	130f8 <__assert_fail@plt+0x2010>
   15fec:	b	15ffc <__assert_fail@plt+0x4f14>
   15ff0:	bl	11004 <__errno_location@plt>
   15ff4:	mov	r1, #12
   15ff8:	str	r1, [r0]
   15ffc:	mov	r0, #0
   16000:	pop	{fp, pc}
   16004:	push	{r4, r5, r6, sl, fp, lr}
   16008:	add	fp, sp, #16
   1600c:	mov	r4, r0
   16010:	bl	10f44 <__fpending@plt>
   16014:	mov	r5, r0
   16018:	mov	r0, r4
   1601c:	bl	10f50 <ferror_unlocked@plt>
   16020:	mov	r6, r0
   16024:	mov	r0, r4
   16028:	bl	16084 <__assert_fail@plt+0x4f9c>
   1602c:	cmp	r6, #0
   16030:	beq	16050 <__assert_fail@plt+0x4f68>
   16034:	mvn	r4, #0
   16038:	cmp	r0, #0
   1603c:	bne	1607c <__assert_fail@plt+0x4f94>
   16040:	bl	11004 <__errno_location@plt>
   16044:	mov	r1, #0
   16048:	str	r1, [r0]
   1604c:	b	1607c <__assert_fail@plt+0x4f94>
   16050:	cmp	r0, #0
   16054:	mov	r4, r0
   16058:	mvnne	r4, #0
   1605c:	cmp	r5, #0
   16060:	bne	1607c <__assert_fail@plt+0x4f94>
   16064:	cmp	r0, #0
   16068:	beq	1607c <__assert_fail@plt+0x4f94>
   1606c:	bl	11004 <__errno_location@plt>
   16070:	ldr	r0, [r0]
   16074:	subs	r4, r0, #9
   16078:	mvnne	r4, #0
   1607c:	mov	r0, r4
   16080:	pop	{r4, r5, r6, sl, fp, pc}
   16084:	push	{r4, r5, r6, sl, fp, lr}
   16088:	add	fp, sp, #16
   1608c:	sub	sp, sp, #8
   16090:	mov	r4, r0
   16094:	bl	11034 <fileno@plt>
   16098:	cmn	r0, #1
   1609c:	ble	16110 <__assert_fail@plt+0x5028>
   160a0:	mov	r0, r4
   160a4:	bl	10f98 <__freading@plt>
   160a8:	cmp	r0, #0
   160ac:	beq	160d8 <__assert_fail@plt+0x4ff0>
   160b0:	mov	r0, r4
   160b4:	bl	11034 <fileno@plt>
   160b8:	mov	r1, #1
   160bc:	mov	r2, #0
   160c0:	mov	r3, #0
   160c4:	str	r1, [sp]
   160c8:	bl	10f2c <lseek64@plt>
   160cc:	and	r0, r0, r1
   160d0:	cmn	r0, #1
   160d4:	beq	16110 <__assert_fail@plt+0x5028>
   160d8:	mov	r0, r4
   160dc:	bl	16120 <__assert_fail@plt+0x5038>
   160e0:	cmp	r0, #0
   160e4:	beq	16110 <__assert_fail@plt+0x5028>
   160e8:	bl	11004 <__errno_location@plt>
   160ec:	ldr	r6, [r0]
   160f0:	mov	r5, r0
   160f4:	mov	r0, r4
   160f8:	bl	11064 <fclose@plt>
   160fc:	cmp	r6, #0
   16100:	strne	r6, [r5]
   16104:	mvnne	r0, #0
   16108:	sub	sp, fp, #16
   1610c:	pop	{r4, r5, r6, sl, fp, pc}
   16110:	mov	r0, r4
   16114:	sub	sp, fp, #16
   16118:	pop	{r4, r5, r6, sl, fp, lr}
   1611c:	b	11064 <fclose@plt>
   16120:	push	{r4, sl, fp, lr}
   16124:	add	fp, sp, #8
   16128:	sub	sp, sp, #8
   1612c:	mov	r4, r0
   16130:	cmp	r0, #0
   16134:	beq	1616c <__assert_fail@plt+0x5084>
   16138:	mov	r0, r4
   1613c:	bl	10f98 <__freading@plt>
   16140:	cmp	r0, #0
   16144:	beq	1616c <__assert_fail@plt+0x5084>
   16148:	ldrb	r0, [r4, #1]
   1614c:	tst	r0, #1
   16150:	beq	1616c <__assert_fail@plt+0x5084>
   16154:	mov	r0, #1
   16158:	mov	r2, #0
   1615c:	mov	r3, #0
   16160:	str	r0, [sp]
   16164:	mov	r0, r4
   16168:	bl	1617c <__assert_fail@plt+0x5094>
   1616c:	mov	r0, r4
   16170:	sub	sp, fp, #8
   16174:	pop	{r4, sl, fp, lr}
   16178:	b	10e9c <fflush@plt>
   1617c:	push	{r4, r5, r6, r7, fp, lr}
   16180:	add	fp, sp, #16
   16184:	sub	sp, sp, #8
   16188:	mov	r4, r0
   1618c:	ldr	r0, [r0, #4]
   16190:	mov	r5, r3
   16194:	mov	r6, r2
   16198:	ldr	r1, [r4, #8]
   1619c:	cmp	r1, r0
   161a0:	bne	161bc <__assert_fail@plt+0x50d4>
   161a4:	ldrd	r0, [r4, #16]
   161a8:	cmp	r1, r0
   161ac:	bne	161bc <__assert_fail@plt+0x50d4>
   161b0:	ldr	r0, [r4, #36]	; 0x24
   161b4:	cmp	r0, #0
   161b8:	beq	161d4 <__assert_fail@plt+0x50ec>
   161bc:	mov	r0, r4
   161c0:	mov	r2, r6
   161c4:	mov	r3, r5
   161c8:	sub	sp, fp, #16
   161cc:	pop	{r4, r5, r6, r7, fp, lr}
   161d0:	b	11070 <fseeko64@plt>
   161d4:	ldr	r7, [fp, #8]
   161d8:	mov	r0, r4
   161dc:	bl	11034 <fileno@plt>
   161e0:	mov	r2, r6
   161e4:	mov	r3, r5
   161e8:	str	r7, [sp]
   161ec:	bl	10f2c <lseek64@plt>
   161f0:	and	r2, r0, r1
   161f4:	cmn	r2, #1
   161f8:	beq	16214 <__assert_fail@plt+0x512c>
   161fc:	strd	r0, [r4, #80]	; 0x50
   16200:	ldr	r0, [r4]
   16204:	bic	r0, r0, #16
   16208:	str	r0, [r4]
   1620c:	mov	r0, #0
   16210:	b	16218 <__assert_fail@plt+0x5130>
   16214:	mvn	r0, #0
   16218:	sub	sp, fp, #16
   1621c:	pop	{r4, r5, r6, r7, fp, pc}
   16220:	push	{fp, lr}
   16224:	mov	fp, sp
   16228:	mov	r0, #14
   1622c:	bl	11094 <nl_langinfo@plt>
   16230:	movw	r1, #28033	; 0x6d81
   16234:	cmp	r0, #0
   16238:	movt	r1, #1
   1623c:	movne	r1, r0
   16240:	movw	r0, #29850	; 0x749a
   16244:	ldrb	r2, [r1]
   16248:	movt	r0, #1
   1624c:	cmp	r2, #0
   16250:	movne	r0, r1
   16254:	pop	{fp, pc}
   16258:	push	{r4, r5, r6, r7, fp, lr}
   1625c:	add	fp, sp, #16
   16260:	sub	sp, sp, #8
   16264:	cmp	r0, #0
   16268:	add	r5, sp, #4
   1626c:	mov	r7, r2
   16270:	mov	r4, r1
   16274:	movne	r5, r0
   16278:	mov	r0, r5
   1627c:	bl	10f5c <mbrtowc@plt>
   16280:	mov	r6, r0
   16284:	cmp	r7, #0
   16288:	beq	162b0 <__assert_fail@plt+0x51c8>
   1628c:	cmn	r6, #2
   16290:	bcc	162b0 <__assert_fail@plt+0x51c8>
   16294:	mov	r0, #0
   16298:	bl	162f8 <__assert_fail@plt+0x5210>
   1629c:	cmp	r0, #0
   162a0:	bne	162b0 <__assert_fail@plt+0x51c8>
   162a4:	ldrb	r0, [r4]
   162a8:	mov	r6, #1
   162ac:	str	r0, [r5]
   162b0:	mov	r0, r6
   162b4:	sub	sp, fp, #16
   162b8:	pop	{r4, r5, r6, r7, fp, pc}
   162bc:	cmp	r2, #0
   162c0:	beq	162f0 <__assert_fail@plt+0x5208>
   162c4:	mvn	r3, #0
   162c8:	udiv	r3, r3, r2
   162cc:	cmp	r3, r1
   162d0:	bcs	162f0 <__assert_fail@plt+0x5208>
   162d4:	push	{fp, lr}
   162d8:	mov	fp, sp
   162dc:	bl	11004 <__errno_location@plt>
   162e0:	mov	r1, #12
   162e4:	str	r1, [r0]
   162e8:	mov	r0, #0
   162ec:	pop	{fp, pc}
   162f0:	mul	r1, r2, r1
   162f4:	b	15fb4 <__assert_fail@plt+0x4ecc>
   162f8:	push	{r4, sl, fp, lr}
   162fc:	add	fp, sp, #8
   16300:	sub	sp, sp, #264	; 0x108
   16304:	add	r1, sp, #7
   16308:	movw	r2, #257	; 0x101
   1630c:	bl	16364 <__assert_fail@plt+0x527c>
   16310:	mov	r4, #0
   16314:	cmp	r0, #0
   16318:	bne	16358 <__assert_fail@plt+0x5270>
   1631c:	movw	r1, #29856	; 0x74a0
   16320:	add	r0, sp, #7
   16324:	mov	r2, #2
   16328:	movt	r1, #1
   1632c:	bl	10fd4 <bcmp@plt>
   16330:	cmp	r0, #0
   16334:	beq	16358 <__assert_fail@plt+0x5270>
   16338:	movw	r1, #29858	; 0x74a2
   1633c:	add	r0, sp, #7
   16340:	mov	r2, #6
   16344:	movt	r1, #1
   16348:	bl	10fd4 <bcmp@plt>
   1634c:	cmp	r0, #0
   16350:	mov	r4, r0
   16354:	movwne	r4, #1
   16358:	mov	r0, r4
   1635c:	sub	sp, fp, #8
   16360:	pop	{r4, sl, fp, pc}
   16364:	push	{r4, r5, r6, r7, fp, lr}
   16368:	add	fp, sp, #16
   1636c:	mov	r4, r1
   16370:	mov	r1, #0
   16374:	mov	r6, r2
   16378:	bl	1107c <setlocale@plt>
   1637c:	cmp	r0, #0
   16380:	beq	163ac <__assert_fail@plt+0x52c4>
   16384:	mov	r7, r0
   16388:	bl	10fe0 <strlen@plt>
   1638c:	cmp	r0, r6
   16390:	bcs	163c0 <__assert_fail@plt+0x52d8>
   16394:	add	r2, r0, #1
   16398:	mov	r0, r4
   1639c:	mov	r1, r7
   163a0:	bl	10ec0 <memcpy@plt>
   163a4:	mov	r5, #0
   163a8:	b	163e8 <__assert_fail@plt+0x5300>
   163ac:	cmp	r6, #0
   163b0:	mov	r5, #22
   163b4:	movne	r0, #0
   163b8:	strbne	r0, [r4]
   163bc:	b	163e8 <__assert_fail@plt+0x5300>
   163c0:	mov	r5, #34	; 0x22
   163c4:	cmp	r6, #0
   163c8:	beq	163e8 <__assert_fail@plt+0x5300>
   163cc:	sub	r6, r6, #1
   163d0:	mov	r0, r4
   163d4:	mov	r1, r7
   163d8:	mov	r2, r6
   163dc:	bl	10ec0 <memcpy@plt>
   163e0:	mov	r0, #0
   163e4:	strb	r0, [r4, r6]
   163e8:	mov	r0, r5
   163ec:	pop	{r4, r5, r6, r7, fp, pc}
   163f0:	mov	r1, #0
   163f4:	b	1107c <setlocale@plt>
   163f8:	cmp	r3, #0
   163fc:	cmpeq	r2, #0
   16400:	bne	16424 <__assert_fail@plt+0x533c>
   16404:	cmp	r1, #0
   16408:	movlt	r1, #-2147483648	; 0x80000000
   1640c:	movlt	r0, #0
   16410:	blt	16420 <__assert_fail@plt+0x5338>
   16414:	cmpeq	r0, #0
   16418:	mvnne	r1, #-2147483648	; 0x80000000
   1641c:	mvnne	r0, #0
   16420:	b	16508 <__assert_fail@plt+0x5420>
   16424:	sub	sp, sp, #8
   16428:	push	{sp, lr}
   1642c:	cmp	r1, #0
   16430:	blt	16450 <__assert_fail@plt+0x5368>
   16434:	cmp	r3, #0
   16438:	blt	16484 <__assert_fail@plt+0x539c>
   1643c:	bl	16518 <__assert_fail@plt+0x5430>
   16440:	ldr	lr, [sp, #4]
   16444:	add	sp, sp, #8
   16448:	pop	{r2, r3}
   1644c:	bx	lr
   16450:	rsbs	r0, r0, #0
   16454:	sbc	r1, r1, r1, lsl #1
   16458:	cmp	r3, #0
   1645c:	blt	164a8 <__assert_fail@plt+0x53c0>
   16460:	bl	16518 <__assert_fail@plt+0x5430>
   16464:	ldr	lr, [sp, #4]
   16468:	add	sp, sp, #8
   1646c:	pop	{r2, r3}
   16470:	rsbs	r0, r0, #0
   16474:	sbc	r1, r1, r1, lsl #1
   16478:	rsbs	r2, r2, #0
   1647c:	sbc	r3, r3, r3, lsl #1
   16480:	bx	lr
   16484:	rsbs	r2, r2, #0
   16488:	sbc	r3, r3, r3, lsl #1
   1648c:	bl	16518 <__assert_fail@plt+0x5430>
   16490:	ldr	lr, [sp, #4]
   16494:	add	sp, sp, #8
   16498:	pop	{r2, r3}
   1649c:	rsbs	r0, r0, #0
   164a0:	sbc	r1, r1, r1, lsl #1
   164a4:	bx	lr
   164a8:	rsbs	r2, r2, #0
   164ac:	sbc	r3, r3, r3, lsl #1
   164b0:	bl	16518 <__assert_fail@plt+0x5430>
   164b4:	ldr	lr, [sp, #4]
   164b8:	add	sp, sp, #8
   164bc:	pop	{r2, r3}
   164c0:	rsbs	r2, r2, #0
   164c4:	sbc	r3, r3, r3, lsl #1
   164c8:	bx	lr
   164cc:	cmp	r3, #0
   164d0:	cmpeq	r2, #0
   164d4:	bne	164ec <__assert_fail@plt+0x5404>
   164d8:	cmp	r1, #0
   164dc:	cmpeq	r0, #0
   164e0:	mvnne	r1, #0
   164e4:	mvnne	r0, #0
   164e8:	b	16508 <__assert_fail@plt+0x5420>
   164ec:	sub	sp, sp, #8
   164f0:	push	{sp, lr}
   164f4:	bl	16518 <__assert_fail@plt+0x5430>
   164f8:	ldr	lr, [sp, #4]
   164fc:	add	sp, sp, #8
   16500:	pop	{r2, r3}
   16504:	bx	lr
   16508:	push	{r1, lr}
   1650c:	mov	r0, #8
   16510:	bl	10e78 <raise@plt>
   16514:	pop	{r1, pc}
   16518:	cmp	r1, r3
   1651c:	cmpeq	r0, r2
   16520:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16524:	mov	r4, r0
   16528:	movcc	r0, #0
   1652c:	mov	r5, r1
   16530:	ldr	lr, [sp, #36]	; 0x24
   16534:	movcc	r1, r0
   16538:	bcc	16634 <__assert_fail@plt+0x554c>
   1653c:	cmp	r3, #0
   16540:	clzeq	ip, r2
   16544:	clzne	ip, r3
   16548:	addeq	ip, ip, #32
   1654c:	cmp	r5, #0
   16550:	clzeq	r1, r4
   16554:	addeq	r1, r1, #32
   16558:	clzne	r1, r5
   1655c:	sub	ip, ip, r1
   16560:	sub	sl, ip, #32
   16564:	lsl	r9, r3, ip
   16568:	rsb	fp, ip, #32
   1656c:	orr	r9, r9, r2, lsl sl
   16570:	orr	r9, r9, r2, lsr fp
   16574:	lsl	r8, r2, ip
   16578:	cmp	r5, r9
   1657c:	cmpeq	r4, r8
   16580:	movcc	r0, #0
   16584:	movcc	r1, r0
   16588:	bcc	165a4 <__assert_fail@plt+0x54bc>
   1658c:	mov	r0, #1
   16590:	subs	r4, r4, r8
   16594:	lsl	r1, r0, sl
   16598:	orr	r1, r1, r0, lsr fp
   1659c:	lsl	r0, r0, ip
   165a0:	sbc	r5, r5, r9
   165a4:	cmp	ip, #0
   165a8:	beq	16634 <__assert_fail@plt+0x554c>
   165ac:	lsr	r6, r8, #1
   165b0:	orr	r6, r6, r9, lsl #31
   165b4:	lsr	r7, r9, #1
   165b8:	mov	r2, ip
   165bc:	b	165e0 <__assert_fail@plt+0x54f8>
   165c0:	subs	r3, r4, r6
   165c4:	sbc	r8, r5, r7
   165c8:	adds	r3, r3, r3
   165cc:	adc	r8, r8, r8
   165d0:	adds	r4, r3, #1
   165d4:	adc	r5, r8, #0
   165d8:	subs	r2, r2, #1
   165dc:	beq	165fc <__assert_fail@plt+0x5514>
   165e0:	cmp	r5, r7
   165e4:	cmpeq	r4, r6
   165e8:	bcs	165c0 <__assert_fail@plt+0x54d8>
   165ec:	adds	r4, r4, r4
   165f0:	adc	r5, r5, r5
   165f4:	subs	r2, r2, #1
   165f8:	bne	165e0 <__assert_fail@plt+0x54f8>
   165fc:	lsr	r3, r4, ip
   16600:	orr	r3, r3, r5, lsl fp
   16604:	lsr	r2, r5, ip
   16608:	orr	r3, r3, r5, lsr sl
   1660c:	adds	r0, r0, r4
   16610:	mov	r4, r3
   16614:	lsl	r3, r2, ip
   16618:	orr	r3, r3, r4, lsl sl
   1661c:	lsl	ip, r4, ip
   16620:	orr	r3, r3, r4, lsr fp
   16624:	adc	r1, r1, r5
   16628:	subs	r0, r0, ip
   1662c:	mov	r5, r2
   16630:	sbc	r1, r1, r3
   16634:	cmp	lr, #0
   16638:	strdne	r4, [lr]
   1663c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16640:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   16644:	mov	r7, r0
   16648:	ldr	r6, [pc, #72]	; 16698 <__assert_fail@plt+0x55b0>
   1664c:	ldr	r5, [pc, #72]	; 1669c <__assert_fail@plt+0x55b4>
   16650:	add	r6, pc, r6
   16654:	add	r5, pc, r5
   16658:	sub	r6, r6, r5
   1665c:	mov	r8, r1
   16660:	mov	r9, r2
   16664:	bl	10e40 <calloc@plt-0x20>
   16668:	asrs	r6, r6, #2
   1666c:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   16670:	mov	r4, #0
   16674:	add	r4, r4, #1
   16678:	ldr	r3, [r5], #4
   1667c:	mov	r2, r9
   16680:	mov	r1, r8
   16684:	mov	r0, r7
   16688:	blx	r3
   1668c:	cmp	r6, r4
   16690:	bne	16674 <__assert_fail@plt+0x558c>
   16694:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   16698:			; <UNDEFINED> instruction: 0x000118b4
   1669c:	andeq	r1, r1, ip, lsr #17
   166a0:	bx	lr
   166a4:	ldr	r3, [pc, #12]	; 166b8 <__assert_fail@plt+0x55d0>
   166a8:	mov	r1, #0
   166ac:	add	r3, pc, r3
   166b0:	ldr	r2, [r3]
   166b4:	b	11010 <__cxa_atexit@plt>
   166b8:	andeq	r1, r1, r0, asr #20
   166bc:	mov	r2, r1
   166c0:	mov	r1, r0
   166c4:	mov	r0, #3
   166c8:	b	10f20 <__fxstat64@plt>

Disassembly of section .fini:

000166cc <.fini>:
   166cc:	push	{r3, lr}
   166d0:	pop	{r3, pc}
