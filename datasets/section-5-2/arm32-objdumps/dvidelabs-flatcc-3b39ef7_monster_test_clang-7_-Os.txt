
../repos/dvidelabs-flatcc-3b39ef7/test/monster_test/monster_test:     file format elf32-littlearm


Disassembly of section .init:

00012e6c <.init>:
   12e6c:	push	{r3, lr}
   12e70:	bl	12fd4 <_start@@Base+0x3c>
   12e74:	pop	{r3, pc}

Disassembly of section .plt:

00012e78 <strcmp@plt-0x14>:
   12e78:	push	{lr}		; (str lr, [sp, #-4]!)
   12e7c:	ldr	lr, [pc, #4]	; 12e88 <strcmp@plt-0x4>
   12e80:	add	lr, pc, lr
   12e84:	ldr	pc, [lr, #8]!
   12e88:	andeq	r5, r2, r8, ror r1

00012e8c <strcmp@plt>:
   12e8c:	add	ip, pc, #0, 12
   12e90:	add	ip, ip, #151552	; 0x25000
   12e94:	ldr	pc, [ip, #376]!	; 0x178

00012e98 <printf@plt>:
   12e98:	add	ip, pc, #0, 12
   12e9c:	add	ip, ip, #151552	; 0x25000
   12ea0:	ldr	pc, [ip, #368]!	; 0x170

00012ea4 <free@plt>:
   12ea4:	add	ip, pc, #0, 12
   12ea8:	add	ip, ip, #151552	; 0x25000
   12eac:	ldr	pc, [ip, #360]!	; 0x168

00012eb0 <memcpy@plt>:
   12eb0:	add	ip, pc, #0, 12
   12eb4:	add	ip, ip, #151552	; 0x25000
   12eb8:	ldr	pc, [ip, #352]!	; 0x160

00012ebc <memcmp@plt>:
   12ebc:	add	ip, pc, #0, 12
   12ec0:	add	ip, ip, #151552	; 0x25000
   12ec4:	ldr	pc, [ip, #344]!	; 0x158

00012ec8 <realloc@plt>:
   12ec8:	add	ip, pc, #0, 12
   12ecc:	add	ip, ip, #151552	; 0x25000
   12ed0:	ldr	pc, [ip, #336]!	; 0x150

00012ed4 <fwrite@plt>:
   12ed4:	add	ip, pc, #0, 12
   12ed8:	add	ip, ip, #151552	; 0x25000
   12edc:	ldr	pc, [ip, #328]!	; 0x148

00012ee0 <gettimeofday@plt>:
   12ee0:	add	ip, pc, #0, 12
   12ee4:	add	ip, ip, #151552	; 0x25000
   12ee8:	ldr	pc, [ip, #320]!	; 0x140

00012eec <puts@plt>:
   12eec:	add	ip, pc, #0, 12
   12ef0:	add	ip, ip, #151552	; 0x25000
   12ef4:	ldr	pc, [ip, #312]!	; 0x138

00012ef8 <malloc@plt>:
   12ef8:	add	ip, pc, #0, 12
   12efc:	add	ip, ip, #151552	; 0x25000
   12f00:	ldr	pc, [ip, #304]!	; 0x130

00012f04 <__libc_start_main@plt>:
   12f04:	add	ip, pc, #0, 12
   12f08:	add	ip, ip, #151552	; 0x25000
   12f0c:	ldr	pc, [ip, #296]!	; 0x128

00012f10 <__gmon_start__@plt>:
   12f10:	add	ip, pc, #0, 12
   12f14:	add	ip, ip, #151552	; 0x25000
   12f18:	ldr	pc, [ip, #288]!	; 0x120

00012f1c <strlen@plt>:
   12f1c:	add	ip, pc, #0, 12
   12f20:	add	ip, ip, #151552	; 0x25000
   12f24:	ldr	pc, [ip, #280]!	; 0x118

00012f28 <fprintf@plt>:
   12f28:	add	ip, pc, #0, 12
   12f2c:	add	ip, ip, #151552	; 0x25000
   12f30:	ldr	pc, [ip, #272]!	; 0x110

00012f34 <posix_memalign@plt>:
   12f34:	add	ip, pc, #0, 12
   12f38:	add	ip, ip, #151552	; 0x25000
   12f3c:	ldr	pc, [ip, #264]!	; 0x108

00012f40 <memset@plt>:
   12f40:	add	ip, pc, #0, 12
   12f44:	add	ip, ip, #151552	; 0x25000
   12f48:	ldr	pc, [ip, #256]!	; 0x100

00012f4c <strncpy@plt>:
   12f4c:	add	ip, pc, #0, 12
   12f50:	add	ip, ip, #151552	; 0x25000
   12f54:	ldr	pc, [ip, #248]!	; 0xf8

00012f58 <memchr@plt>:
   12f58:	add	ip, pc, #0, 12
   12f5c:	add	ip, ip, #151552	; 0x25000
   12f60:	ldr	pc, [ip, #240]!	; 0xf0

00012f64 <fputc@plt>:
   12f64:	add	ip, pc, #0, 12
   12f68:	add	ip, ip, #151552	; 0x25000
   12f6c:	ldr	pc, [ip, #232]!	; 0xe8

00012f70 <strncmp@plt>:
   12f70:	add	ip, pc, #0, 12
   12f74:	add	ip, ip, #151552	; 0x25000
   12f78:	ldr	pc, [ip, #224]!	; 0xe0

00012f7c <abort@plt>:
   12f7c:	add	ip, pc, #0, 12
   12f80:	add	ip, ip, #151552	; 0x25000
   12f84:	ldr	pc, [ip, #216]!	; 0xd8

00012f88 <__assert_fail@plt>:
   12f88:	add	ip, pc, #0, 12
   12f8c:	add	ip, ip, #151552	; 0x25000
   12f90:	ldr	pc, [ip, #208]!	; 0xd0

Disassembly of section .text:

00012f98 <_start@@Base>:
   12f98:	mov	fp, #0
   12f9c:	mov	lr, #0
   12fa0:	pop	{r1}		; (ldr r1, [sp], #4)
   12fa4:	mov	r2, sp
   12fa8:	push	{r2}		; (str r2, [sp, #-4]!)
   12fac:	push	{r0}		; (str r0, [sp, #-4]!)
   12fb0:	ldr	ip, [pc, #16]	; 12fc8 <_start@@Base+0x30>
   12fb4:	push	{ip}		; (str ip, [sp, #-4]!)
   12fb8:	ldr	r0, [pc, #12]	; 12fcc <_start@@Base+0x34>
   12fbc:	ldr	r3, [pc, #12]	; 12fd0 <_start@@Base+0x38>
   12fc0:	bl	12f04 <__libc_start_main@plt>
   12fc4:	bl	12f7c <abort@plt>
   12fc8:	andeq	r2, r2, r8, asr #12
   12fcc:	andeq	ip, r1, r8, lsr #1
   12fd0:	andeq	r2, r2, r8, ror #11
   12fd4:	ldr	r3, [pc, #20]	; 12ff0 <_start@@Base+0x58>
   12fd8:	ldr	r2, [pc, #20]	; 12ff4 <_start@@Base+0x5c>
   12fdc:	add	r3, pc, r3
   12fe0:	ldr	r2, [r3, r2]
   12fe4:	cmp	r2, #0
   12fe8:	bxeq	lr
   12fec:	b	12f10 <__gmon_start__@plt>
   12ff0:	andeq	r5, r2, ip, lsl r0
   12ff4:	andeq	r0, r0, r4, rrx
   12ff8:	ldr	r0, [pc, #24]	; 13018 <_start@@Base+0x80>
   12ffc:	ldr	r3, [pc, #24]	; 1301c <_start@@Base+0x84>
   13000:	cmp	r3, r0
   13004:	bxeq	lr
   13008:	ldr	r3, [pc, #16]	; 13020 <_start@@Base+0x88>
   1300c:	cmp	r3, #0
   13010:	bxeq	lr
   13014:	bx	r3
   13018:	andeq	r8, r3, r0, ror r0
   1301c:	andeq	r8, r3, r0, ror r0
   13020:	andeq	r0, r0, r0
   13024:	ldr	r0, [pc, #36]	; 13050 <_start@@Base+0xb8>
   13028:	ldr	r1, [pc, #36]	; 13054 <_start@@Base+0xbc>
   1302c:	sub	r1, r1, r0
   13030:	asr	r1, r1, #2
   13034:	add	r1, r1, r1, lsr #31
   13038:	asrs	r1, r1, #1
   1303c:	bxeq	lr
   13040:	ldr	r3, [pc, #16]	; 13058 <_start@@Base+0xc0>
   13044:	cmp	r3, #0
   13048:	bxeq	lr
   1304c:	bx	r3
   13050:	andeq	r8, r3, r0, ror r0
   13054:	andeq	r8, r3, r0, ror r0
   13058:	andeq	r0, r0, r0
   1305c:	push	{r4, lr}
   13060:	ldr	r4, [pc, #24]	; 13080 <_start@@Base+0xe8>
   13064:	ldrb	r3, [r4]
   13068:	cmp	r3, #0
   1306c:	popne	{r4, pc}
   13070:	bl	12ff8 <_start@@Base+0x60>
   13074:	mov	r3, #1
   13078:	strb	r3, [r4]
   1307c:	pop	{r4, pc}
   13080:	andeq	r8, r3, r4, ror r0
   13084:	b	13024 <_start@@Base+0x8c>

00013088 <verify_empty_monster@@Base>:
   13088:	push	{fp, lr}
   1308c:	mov	fp, sp
   13090:	cmp	r0, #0
   13094:	beq	130ec <verify_empty_monster@@Base+0x64>
   13098:	ldr	r1, [r0, #4]
   1309c:	movw	r2, #20301	; 0x4f4d
   130a0:	movt	r2, #21326	; 0x534e
   130a4:	cmp	r1, r2
   130a8:	bne	130ec <verify_empty_monster@@Base+0x64>
   130ac:	ldr	r1, [r0]
   130b0:	ldr	r2, [r0, r1]!
   130b4:	mov	r1, r0
   130b8:	ldrh	r2, [r1, -r2]!	; <UNPREDICTABLE>
   130bc:	cmp	r2, #9
   130c0:	bls	130f8 <verify_empty_monster@@Base+0x70>
   130c4:	ldrh	r2, [r1, #8]
   130c8:	cmp	r2, #0
   130cc:	beq	13104 <verify_empty_monster@@Base+0x7c>
   130d0:	add	r0, r0, r2
   130d4:	ldrh	r0, [r0]
   130d8:	cmp	r0, #100	; 0x64
   130dc:	bne	13128 <verify_empty_monster@@Base+0xa0>
   130e0:	movw	r0, #17920	; 0x4600
   130e4:	movt	r0, #2
   130e8:	b	1311c <verify_empty_monster@@Base+0x94>
   130ec:	movw	r0, #18464	; 0x4820
   130f0:	movt	r0, #2
   130f4:	b	1311c <verify_empty_monster@@Base+0x94>
   130f8:	mov	r0, #0
   130fc:	cmp	r2, #6
   13100:	popcc	{fp, pc}
   13104:	ldrh	r0, [r1, #4]
   13108:	cmp	r0, #0
   1310c:	moveq	r0, #0
   13110:	popeq	{fp, pc}
   13114:	movw	r0, #18592	; 0x48a0
   13118:	movt	r0, #2
   1311c:	bl	12eec <puts@plt>
   13120:	mvn	r0, #0
   13124:	pop	{fp, pc}
   13128:	movw	r0, #19760	; 0x4d30
   1312c:	movt	r0, #2
   13130:	b	1311c <verify_empty_monster@@Base+0x94>

00013134 <test_enums@@Base>:
   13134:	mov	r0, #0
   13138:	bx	lr
   1313c:	nop	{0}

00013140 <test_type_aliases@@Base>:
   13140:	push	{r4, r5, r6, r8, r9, sl, fp, lr}
   13144:	add	fp, sp, #24
   13148:	sub	sp, sp, #16
   1314c:	mov	r4, r0
   13150:	bl	1d2e4 <flatcc_builder_reset@@Base>
   13154:	mvn	r0, #0
   13158:	mov	r1, #1
   1315c:	mov	r2, #0
   13160:	mov	r3, #1
   13164:	mov	r8, #0
   13168:	str	r1, [sp]
   1316c:	str	r0, [sp, #4]
   13170:	mov	r0, r4
   13174:	mov	r1, #0
   13178:	bl	1f714 <flatcc_builder_create_vector@@Base>
   1317c:	mov	r6, r0
   13180:	mvn	r0, #-536870912	; 0xe0000000
   13184:	mov	r1, #8
   13188:	mov	r2, #0
   1318c:	mov	r3, #8
   13190:	str	r1, [sp]
   13194:	str	r0, [sp, #4]
   13198:	mov	r0, r4
   1319c:	mov	r1, #0
   131a0:	bl	1f714 <flatcc_builder_create_vector@@Base>
   131a4:	movw	r1, #9828	; 0x2664
   131a8:	mov	r5, r0
   131ac:	mov	r0, r4
   131b0:	mov	r2, #0
   131b4:	mov	r3, #0
   131b8:	movt	r1, #2
   131bc:	bl	1db50 <flatcc_builder_start_buffer@@Base>
   131c0:	cmp	r0, #0
   131c4:	bne	131e8 <test_type_aliases@@Base+0xa8>
   131c8:	mov	r0, r4
   131cc:	mov	r1, #12
   131d0:	bl	1ebcc <flatcc_builder_start_table@@Base>
   131d4:	cmp	r0, #0
   131d8:	beq	13354 <test_type_aliases@@Base+0x214>
   131dc:	mov	r0, r4
   131e0:	mov	r1, r8
   131e4:	bl	1dd40 <flatcc_builder_end_buffer@@Base>
   131e8:	add	r1, sp, #12
   131ec:	mov	r0, r4
   131f0:	bl	20c50 <flatcc_builder_finalize_aligned_buffer@@Base>
   131f4:	ldr	r1, [sp, #12]
   131f8:	movw	r2, #9828	; 0x2664
   131fc:	movw	r3, #49732	; 0xc244
   13200:	mov	r4, r0
   13204:	movt	r2, #2
   13208:	movt	r3, #1
   1320c:	bl	21de0 <flatcc_verify_table_as_root@@Base>
   13210:	cmp	r0, #0
   13214:	beq	13258 <test_type_aliases@@Base+0x118>
   13218:	mov	r5, r0
   1321c:	movw	r0, #32880	; 0x8070
   13220:	ldr	r2, [sp, #12]
   13224:	mov	r1, r4
   13228:	movt	r0, #3
   1322c:	ldr	r3, [r0]
   13230:	movw	r0, #9833	; 0x2669
   13234:	movt	r0, #2
   13238:	bl	1365c <test_type_aliases@@Base+0x51c>
   1323c:	mov	r0, r5
   13240:	bl	21350 <flatcc_verify_error_string@@Base>
   13244:	mov	r1, r0
   13248:	movw	r0, #9852	; 0x267c
   1324c:	movt	r0, #2
   13250:	bl	12e98 <printf@plt>
   13254:	b	13340 <test_type_aliases@@Base+0x200>
   13258:	cmp	r4, #0
   1325c:	beq	13610 <test_type_aliases@@Base+0x4d0>
   13260:	ldr	r0, [r4, #4]
   13264:	movw	r1, #20301	; 0x4f4d
   13268:	movt	r1, #21326	; 0x534e
   1326c:	cmp	r0, r1
   13270:	bne	13610 <test_type_aliases@@Base+0x4d0>
   13274:	ldr	r1, [r4]
   13278:	mov	r6, r4
   1327c:	ldr	r2, [r6, r1]!
   13280:	mov	r1, r6
   13284:	ldrh	r2, [r1, -r2]!	; <UNPREDICTABLE>
   13288:	cmp	r2, #5
   1328c:	bls	13330 <test_type_aliases@@Base+0x1f0>
   13290:	ldrh	r3, [r1, #4]
   13294:	cmp	r3, #0
   13298:	beq	13330 <test_type_aliases@@Base+0x1f0>
   1329c:	cmp	r2, #10
   132a0:	bcc	13330 <test_type_aliases@@Base+0x1f0>
   132a4:	ldrb	r3, [r6, r3]
   132a8:	cmp	r3, #128	; 0x80
   132ac:	bne	13330 <test_type_aliases@@Base+0x1f0>
   132b0:	ldrh	r3, [r1, #8]
   132b4:	cmp	r3, #0
   132b8:	beq	13330 <test_type_aliases@@Base+0x1f0>
   132bc:	cmp	r2, #14
   132c0:	bcc	13330 <test_type_aliases@@Base+0x1f0>
   132c4:	add	r3, r6, r3
   132c8:	ldrh	r3, [r3]
   132cc:	cmp	r3, #32768	; 0x8000
   132d0:	bne	13330 <test_type_aliases@@Base+0x1f0>
   132d4:	ldrh	r3, [r1, #12]
   132d8:	cmp	r3, #0
   132dc:	beq	13330 <test_type_aliases@@Base+0x1f0>
   132e0:	cmp	r2, #18
   132e4:	bcc	13330 <test_type_aliases@@Base+0x1f0>
   132e8:	ldr	r3, [r6, r3]
   132ec:	cmp	r3, #-2147483648	; 0x80000000
   132f0:	bne	13330 <test_type_aliases@@Base+0x1f0>
   132f4:	ldrh	r3, [r1, #16]
   132f8:	cmp	r3, #0
   132fc:	beq	13330 <test_type_aliases@@Base+0x1f0>
   13300:	mov	r0, r6
   13304:	ldr	r3, [r0, r3]!
   13308:	ldr	r0, [r0, #4]
   1330c:	eor	r0, r0, #-2147483648	; 0x80000000
   13310:	orrs	r0, r3, r0
   13314:	bne	13330 <test_type_aliases@@Base+0x1f0>
   13318:	ldrh	r3, [r1, #6]
   1331c:	cmp	r3, #0
   13320:	beq	13330 <test_type_aliases@@Base+0x1f0>
   13324:	ldrb	r0, [r6, r3]
   13328:	cmp	r0, #255	; 0xff
   1332c:	beq	13544 <test_type_aliases@@Base+0x404>
   13330:	movw	r0, #17952	; 0x4620
   13334:	movt	r0, #2
   13338:	bl	12eec <puts@plt>
   1333c:	mvn	r5, #0
   13340:	mov	r0, r4
   13344:	bl	20d50 <flatcc_builder_aligned_free@@Base>
   13348:	mov	r0, r5
   1334c:	sub	sp, fp, #24
   13350:	pop	{r4, r5, r6, r8, r9, sl, fp, pc}
   13354:	mov	r0, r4
   13358:	mov	r1, #6
   1335c:	mov	r2, #8
   13360:	mov	r3, #8
   13364:	bl	1fe9c <flatcc_builder_table_add@@Base>
   13368:	cmp	r0, #0
   1336c:	beq	131dc <test_type_aliases@@Base+0x9c>
   13370:	mov	r9, #-2147483648	; 0x80000000
   13374:	mov	r8, #0
   13378:	mov	r1, #7
   1337c:	mov	r2, #8
   13380:	mov	r3, #8
   13384:	strd	r8, [r0]
   13388:	mov	r0, r4
   1338c:	bl	1fe9c <flatcc_builder_table_add@@Base>
   13390:	cmp	r0, #0
   13394:	beq	131dc <test_type_aliases@@Base+0x9c>
   13398:	mvn	r1, #0
   1339c:	mov	r2, #8
   133a0:	mov	r3, #8
   133a4:	str	r1, [r0]
   133a8:	str	r1, [r0, #4]
   133ac:	mov	r0, r4
   133b0:	mov	r1, #9
   133b4:	bl	1fe9c <flatcc_builder_table_add@@Base>
   133b8:	cmp	r0, #0
   133bc:	beq	131dc <test_type_aliases@@Base+0x9c>
   133c0:	movw	r1, #26214	; 0x6666
   133c4:	movw	r2, #26214	; 0x6666
   133c8:	mov	r3, #4
   133cc:	movt	r2, #26214	; 0x6666
   133d0:	movt	r1, #16386	; 0x4002
   133d4:	str	r2, [r0]
   133d8:	str	r1, [r0, #4]
   133dc:	mov	r0, r4
   133e0:	mov	r1, #4
   133e4:	mov	r2, #4
   133e8:	bl	1fe9c <flatcc_builder_table_add@@Base>
   133ec:	cmp	r0, #0
   133f0:	beq	131dc <test_type_aliases@@Base+0x9c>
   133f4:	mov	r1, #-2147483648	; 0x80000000
   133f8:	mov	r2, #4
   133fc:	mov	r3, #4
   13400:	str	r1, [r0]
   13404:	mov	r0, r4
   13408:	mov	r1, #5
   1340c:	bl	1fe9c <flatcc_builder_table_add@@Base>
   13410:	cmp	r0, #0
   13414:	beq	131dc <test_type_aliases@@Base+0x9c>
   13418:	mvn	r1, #0
   1341c:	mov	r2, #4
   13420:	mov	r3, #4
   13424:	str	r1, [r0]
   13428:	mov	r0, r4
   1342c:	mov	r1, #8
   13430:	bl	1fe9c <flatcc_builder_table_add@@Base>
   13434:	cmp	r0, #0
   13438:	beq	131dc <test_type_aliases@@Base+0x9c>
   1343c:	movw	r1, #13107	; 0x3333
   13440:	cmp	r6, #0
   13444:	movt	r1, #16403	; 0x4013
   13448:	str	r1, [r0]
   1344c:	beq	131dc <test_type_aliases@@Base+0x9c>
   13450:	mov	r0, r4
   13454:	mov	r1, #10
   13458:	bl	1fd60 <flatcc_builder_table_add_offset@@Base>
   1345c:	cmp	r0, #0
   13460:	strne	r6, [r0]
   13464:	cmpne	r5, #0
   13468:	beq	131dc <test_type_aliases@@Base+0x9c>
   1346c:	mov	r0, r4
   13470:	mov	r1, #11
   13474:	bl	1fd60 <flatcc_builder_table_add_offset@@Base>
   13478:	cmp	r0, #0
   1347c:	beq	131dc <test_type_aliases@@Base+0x9c>
   13480:	str	r5, [r0]
   13484:	mov	r0, r4
   13488:	mov	r1, #2
   1348c:	mov	r2, #2
   13490:	mov	r3, #2
   13494:	bl	1fe9c <flatcc_builder_table_add@@Base>
   13498:	cmp	r0, #0
   1349c:	beq	131dc <test_type_aliases@@Base+0x9c>
   134a0:	mov	r1, #32768	; 0x8000
   134a4:	mov	r2, #2
   134a8:	mov	r3, #2
   134ac:	strh	r1, [r0]
   134b0:	mov	r0, r4
   134b4:	mov	r1, #3
   134b8:	bl	1fe9c <flatcc_builder_table_add@@Base>
   134bc:	cmp	r0, #0
   134c0:	beq	131dc <test_type_aliases@@Base+0x9c>
   134c4:	movw	r1, #65535	; 0xffff
   134c8:	mov	r2, #1
   134cc:	mov	r3, #1
   134d0:	mov	r8, #0
   134d4:	strh	r1, [r0]
   134d8:	mov	r0, r4
   134dc:	mov	r1, #0
   134e0:	bl	1fe9c <flatcc_builder_table_add@@Base>
   134e4:	cmp	r0, #0
   134e8:	beq	131dc <test_type_aliases@@Base+0x9c>
   134ec:	mov	r1, #128	; 0x80
   134f0:	mov	r2, #1
   134f4:	mov	r3, #1
   134f8:	strb	r1, [r0]
   134fc:	mov	r0, r4
   13500:	mov	r1, #1
   13504:	bl	1fe9c <flatcc_builder_table_add@@Base>
   13508:	cmp	r0, #0
   1350c:	beq	131dc <test_type_aliases@@Base+0x9c>
   13510:	mov	r1, #255	; 0xff
   13514:	mov	r2, #0
   13518:	strb	r1, [r0]
   1351c:	movw	r1, #17858	; 0x45c2
   13520:	mov	r0, r4
   13524:	movt	r1, #2
   13528:	bl	1f4cc <flatcc_builder_check_required@@Base>
   1352c:	cmp	r0, #0
   13530:	beq	13630 <test_type_aliases@@Base+0x4f0>
   13534:	mov	r0, r4
   13538:	bl	1f55c <flatcc_builder_end_table@@Base>
   1353c:	mov	r8, r0
   13540:	b	131dc <test_type_aliases@@Base+0x9c>
   13544:	ldrh	r3, [r1, #10]
   13548:	cmp	r3, #0
   1354c:	beq	13330 <test_type_aliases@@Base+0x1f0>
   13550:	add	r0, r6, r3
   13554:	movw	r3, #65535	; 0xffff
   13558:	ldrh	r0, [r0]
   1355c:	cmp	r0, r3
   13560:	bne	13330 <test_type_aliases@@Base+0x1f0>
   13564:	ldrh	r3, [r1, #14]
   13568:	cmp	r3, #0
   1356c:	beq	13330 <test_type_aliases@@Base+0x1f0>
   13570:	cmp	r2, #20
   13574:	bcc	13330 <test_type_aliases@@Base+0x1f0>
   13578:	ldr	r0, [r6, r3]
   1357c:	cmn	r0, #1
   13580:	bne	13330 <test_type_aliases@@Base+0x1f0>
   13584:	ldrh	r3, [r1, #18]
   13588:	cmp	r3, #0
   1358c:	beq	13330 <test_type_aliases@@Base+0x1f0>
   13590:	cmp	r2, #22
   13594:	bcc	13330 <test_type_aliases@@Base+0x1f0>
   13598:	mov	r0, r6
   1359c:	mvn	r5, #0
   135a0:	ldr	r3, [r0, r3]!
   135a4:	ldr	r0, [r0, #4]
   135a8:	eor	r3, r3, r5
   135ac:	eor	r0, r0, r5
   135b0:	orrs	r0, r3, r0
   135b4:	bne	13330 <test_type_aliases@@Base+0x1f0>
   135b8:	ldrh	r3, [r1, #20]
   135bc:	cmp	r3, #0
   135c0:	beq	13330 <test_type_aliases@@Base+0x1f0>
   135c4:	cmp	r2, #24
   135c8:	bcc	13330 <test_type_aliases@@Base+0x1f0>
   135cc:	add	r0, r6, r3
   135d0:	vldr	s2, [pc, #128]	; 13658 <test_type_aliases@@Base+0x518>
   135d4:	vldr	s0, [r0]
   135d8:	vcmp.f32	s0, s2
   135dc:	vmrs	APSR_nzcv, fpscr
   135e0:	bne	13330 <test_type_aliases@@Base+0x1f0>
   135e4:	ldrh	r1, [r1, #22]
   135e8:	cmp	r1, #0
   135ec:	beq	13330 <test_type_aliases@@Base+0x1f0>
   135f0:	add	r0, r6, r1
   135f4:	vldr	d16, [pc, #84]	; 13650 <test_type_aliases@@Base+0x510>
   135f8:	vldr	d17, [r0]
   135fc:	vcmp.f64	d17, d16
   13600:	vmrs	APSR_nzcv, fpscr
   13604:	bne	13330 <test_type_aliases@@Base+0x1f0>
   13608:	mov	r5, #0
   1360c:	b	13340 <test_type_aliases@@Base+0x200>
   13610:	movw	r0, #13160	; 0x3368
   13614:	movw	r1, #13198	; 0x338e
   13618:	movw	r3, #13826	; 0x3602
   1361c:	movw	r2, #749	; 0x2ed
   13620:	movt	r0, #2
   13624:	movt	r1, #2
   13628:	movt	r3, #2
   1362c:	bl	12f88 <__assert_fail@plt>
   13630:	movw	r0, #13435	; 0x347b
   13634:	movw	r1, #13609	; 0x3529
   13638:	movw	r3, #13708	; 0x358c
   1363c:	mov	r2, #237	; 0xed
   13640:	movt	r0, #2
   13644:	movt	r1, #2
   13648:	movt	r3, #2
   1364c:	bl	12f88 <__assert_fail@plt>
   13650:	strbtvs	r6, [r6], -r6, ror #12
   13654:	andmi	r6, r2, r6, ror #12
   13658:	andsmi	r3, r3, r3, lsr r3
   1365c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13660:	add	fp, sp, #28
   13664:	sub	sp, sp, #20
   13668:	mov	r4, r3
   1366c:	mov	r5, r2
   13670:	mov	r6, r1
   13674:	cmp	r0, #0
   13678:	beq	13690 <test_type_aliases@@Base+0x550>
   1367c:	movw	r1, #13797	; 0x35e5
   13680:	mov	r2, r0
   13684:	mov	r0, r4
   13688:	movt	r1, #2
   1368c:	bl	12f28 <fprintf@plt>
   13690:	cmp	r5, #0
   13694:	beq	13770 <test_type_aliases@@Base+0x630>
   13698:	movw	sl, #13816	; 0x35f8
   1369c:	add	r7, sp, #3
   136a0:	mov	r8, #0
   136a4:	movt	sl, #2
   136a8:	ands	r9, r8, #15
   136ac:	beq	136c8 <test_type_aliases@@Base+0x588>
   136b0:	tst	r8, #7
   136b4:	bne	136f8 <test_type_aliases@@Base+0x5b8>
   136b8:	mov	r0, #32
   136bc:	mov	r1, r4
   136c0:	bl	12f64 <fputc@plt>
   136c4:	b	136f8 <test_type_aliases@@Base+0x5b8>
   136c8:	cmp	r8, #0
   136cc:	beq	136e4 <test_type_aliases@@Base+0x5a4>
   136d0:	movw	r1, #13802	; 0x35ea
   136d4:	mov	r0, r4
   136d8:	mov	r2, r7
   136dc:	movt	r1, #2
   136e0:	bl	12f28 <fprintf@plt>
   136e4:	movw	r1, #13808	; 0x35f0
   136e8:	mov	r0, r4
   136ec:	mov	r2, r8
   136f0:	movt	r1, #2
   136f4:	bl	12f28 <fprintf@plt>
   136f8:	ldrb	r2, [r6, r8]
   136fc:	mov	r0, r4
   13700:	mov	r1, sl
   13704:	bl	12f28 <fprintf@plt>
   13708:	ldrb	r0, [r6, r8]
   1370c:	add	r8, r8, #1
   13710:	sub	r1, r0, #32
   13714:	uxtb	r1, r1
   13718:	cmp	r1, #94	; 0x5e
   1371c:	mov	r1, #0
   13720:	movwhi	r0, #46	; 0x2e
   13724:	cmp	r5, r8
   13728:	strb	r0, [r7, r9]
   1372c:	add	r0, r7, r9
   13730:	strb	r1, [r0, #1]
   13734:	bne	136a8 <test_type_aliases@@Base+0x568>
   13738:	tst	r5, #15
   1373c:	beq	13770 <test_type_aliases@@Base+0x630>
   13740:	add	r6, r5, #1
   13744:	movw	r5, #13822	; 0x35fe
   13748:	movt	r5, #2
   1374c:	mov	r0, r5
   13750:	mov	r1, #3
   13754:	mov	r2, #1
   13758:	mov	r3, r4
   1375c:	bl	12ed4 <fwrite@plt>
   13760:	add	r0, r6, #1
   13764:	tst	r6, #15
   13768:	mov	r6, r0
   1376c:	bne	1374c <test_type_aliases@@Base+0x60c>
   13770:	movw	r1, #13802	; 0x35ea
   13774:	add	r2, sp, #3
   13778:	mov	r0, r4
   1377c:	movt	r1, #2
   13780:	bl	12f28 <fprintf@plt>
   13784:	sub	sp, fp, #28
   13788:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

0001378c <test_empty_monster@@Base>:
   1378c:	push	{r4, r5, fp, lr}
   13790:	add	fp, sp, #8
   13794:	sub	sp, sp, #8
   13798:	mov	r4, r0
   1379c:	bl	1d2e4 <flatcc_builder_reset@@Base>
   137a0:	movw	r1, #9828	; 0x2664
   137a4:	mov	r0, r4
   137a8:	mov	r2, #0
   137ac:	mov	r3, #0
   137b0:	movt	r1, #2
   137b4:	bl	1db50 <flatcc_builder_start_buffer@@Base>
   137b8:	mov	r0, r4
   137bc:	mov	r1, #36	; 0x24
   137c0:	bl	1ebcc <flatcc_builder_start_table@@Base>
   137c4:	movw	r1, #9896	; 0x26a8
   137c8:	mov	r0, r4
   137cc:	movt	r1, #2
   137d0:	bl	20844 <flatcc_builder_create_string_str@@Base>
   137d4:	cmp	r0, #0
   137d8:	beq	137f4 <test_empty_monster@@Base+0x68>
   137dc:	mov	r5, r0
   137e0:	mov	r0, r4
   137e4:	mov	r1, #3
   137e8:	bl	1fd60 <flatcc_builder_table_add_offset@@Base>
   137ec:	cmp	r0, #0
   137f0:	strne	r5, [r0]
   137f4:	movw	r1, #17860	; 0x45c4
   137f8:	mov	r0, r4
   137fc:	mov	r2, #1
   13800:	movt	r1, #2
   13804:	bl	1f4cc <flatcc_builder_check_required@@Base>
   13808:	cmp	r0, #0
   1380c:	beq	138f4 <test_empty_monster@@Base+0x168>
   13810:	mov	r0, r4
   13814:	bl	1f55c <flatcc_builder_end_table@@Base>
   13818:	mov	r1, r0
   1381c:	mov	r0, r4
   13820:	bl	1dd40 <flatcc_builder_end_buffer@@Base>
   13824:	add	r1, sp, #4
   13828:	mov	r0, r4
   1382c:	bl	20c50 <flatcc_builder_finalize_aligned_buffer@@Base>
   13830:	mov	r4, r0
   13834:	movw	r0, #32880	; 0x8070
   13838:	ldr	r2, [sp, #4]
   1383c:	movt	r0, #3
   13840:	mov	r1, r4
   13844:	ldr	r3, [r0]
   13848:	movw	r0, #9906	; 0x26b2
   1384c:	movt	r0, #2
   13850:	bl	1365c <test_type_aliases@@Base+0x51c>
   13854:	mov	r0, r4
   13858:	bl	13088 <verify_empty_monster@@Base>
   1385c:	mov	r5, r0
   13860:	cmp	r0, #0
   13864:	beq	13874 <test_empty_monster@@Base+0xe8>
   13868:	mov	r0, r4
   1386c:	bl	20d50 <flatcc_builder_aligned_free@@Base>
   13870:	b	138b0 <test_empty_monster@@Base+0x124>
   13874:	ldr	r1, [sp, #4]
   13878:	movw	r2, #9828	; 0x2664
   1387c:	movw	r3, #50112	; 0xc3c0
   13880:	mov	r0, r4
   13884:	movt	r2, #2
   13888:	movt	r3, #1
   1388c:	bl	21de0 <flatcc_verify_table_as_root@@Base>
   13890:	cmp	r0, #0
   13894:	beq	138bc <test_empty_monster@@Base+0x130>
   13898:	bl	21350 <flatcc_verify_error_string@@Base>
   1389c:	mov	r1, r0
   138a0:	movw	r0, #9926	; 0x26c6
   138a4:	movt	r0, #2
   138a8:	bl	12e98 <printf@plt>
   138ac:	mvn	r5, #0
   138b0:	mov	r0, r5
   138b4:	sub	sp, fp, #8
   138b8:	pop	{r4, r5, fp, pc}
   138bc:	ldr	r0, [sp, #4]
   138c0:	movw	r2, #9828	; 0x2664
   138c4:	movw	r3, #50112	; 0xc3c0
   138c8:	movt	r2, #2
   138cc:	movt	r3, #1
   138d0:	sub	r1, r0, #1
   138d4:	mov	r0, r4
   138d8:	bl	21de0 <flatcc_verify_table_as_root@@Base>
   138dc:	cmp	r0, #0
   138e0:	bne	13868 <test_empty_monster@@Base+0xdc>
   138e4:	movw	r0, #18000	; 0x4650
   138e8:	movt	r0, #2
   138ec:	bl	12eec <puts@plt>
   138f0:	b	138ac <test_empty_monster@@Base+0x120>
   138f4:	movw	r0, #13899	; 0x364b
   138f8:	movw	r1, #13609	; 0x3529
   138fc:	movw	r3, #14061	; 0x36ed
   13900:	mov	r2, #235	; 0xeb
   13904:	movt	r0, #2
   13908:	movt	r1, #2
   1390c:	movt	r3, #2
   13910:	bl	12f88 <__assert_fail@plt>

00013914 <test_typed_empty_monster@@Base>:
   13914:	push	{r4, r5, r6, sl, fp, lr}
   13918:	add	fp, sp, #16
   1391c:	sub	sp, sp, #8
   13920:	mov	r4, r0
   13924:	mov	r0, #0
   13928:	str	r0, [sp]
   1392c:	mov	r0, r4
   13930:	bl	1d2e4 <flatcc_builder_reset@@Base>
   13934:	movw	r1, #9966	; 0x26ee
   13938:	mov	r0, r4
   1393c:	mov	r2, #0
   13940:	mov	r3, #0
   13944:	movt	r1, #2
   13948:	bl	1db50 <flatcc_builder_start_buffer@@Base>
   1394c:	mov	r0, r4
   13950:	mov	r1, #36	; 0x24
   13954:	bl	1ebcc <flatcc_builder_start_table@@Base>
   13958:	movw	r1, #9896	; 0x26a8
   1395c:	mov	r0, r4
   13960:	movt	r1, #2
   13964:	bl	20844 <flatcc_builder_create_string_str@@Base>
   13968:	cmp	r0, #0
   1396c:	beq	13988 <test_typed_empty_monster@@Base+0x74>
   13970:	mov	r5, r0
   13974:	mov	r0, r4
   13978:	mov	r1, #3
   1397c:	bl	1fd60 <flatcc_builder_table_add_offset@@Base>
   13980:	cmp	r0, #0
   13984:	strne	r5, [r0]
   13988:	movw	r1, #17860	; 0x45c4
   1398c:	mov	r0, r4
   13990:	mov	r2, #1
   13994:	movt	r1, #2
   13998:	bl	1f4cc <flatcc_builder_check_required@@Base>
   1399c:	cmp	r0, #0
   139a0:	beq	13b70 <test_typed_empty_monster@@Base+0x25c>
   139a4:	mov	r0, r4
   139a8:	bl	1f55c <flatcc_builder_end_table@@Base>
   139ac:	mov	r1, r0
   139b0:	mov	r0, r4
   139b4:	bl	1dd40 <flatcc_builder_end_buffer@@Base>
   139b8:	add	r1, sp, #4
   139bc:	mov	r0, r4
   139c0:	bl	20c50 <flatcc_builder_finalize_aligned_buffer@@Base>
   139c4:	mov	r4, r0
   139c8:	movw	r0, #32880	; 0x8070
   139cc:	ldr	r2, [sp, #4]
   139d0:	movt	r0, #3
   139d4:	mov	r1, r4
   139d8:	ldr	r3, [r0]
   139dc:	movw	r0, #9971	; 0x26f3
   139e0:	movt	r0, #2
   139e4:	bl	1365c <test_type_aliases@@Base+0x51c>
   139e8:	ldr	r1, [r4, #4]
   139ec:	movw	r6, #62593	; 0xf481
   139f0:	movt	r6, #13070	; 0x330e
   139f4:	cmp	r1, r6
   139f8:	bne	13a70 <test_typed_empty_monster@@Base+0x15c>
   139fc:	mov	r0, r4
   13a00:	bl	13088 <verify_empty_monster@@Base>
   13a04:	cmp	r0, #0
   13a08:	beq	13a80 <test_typed_empty_monster@@Base+0x16c>
   13a0c:	ldr	r1, [sp, #4]
   13a10:	movw	r2, #9966	; 0x26ee
   13a14:	movw	r3, #50112	; 0xc3c0
   13a18:	mov	r0, r4
   13a1c:	movt	r2, #2
   13a20:	movt	r3, #1
   13a24:	bl	21de0 <flatcc_verify_table_as_root@@Base>
   13a28:	cmp	r0, #0
   13a2c:	bne	13a54 <test_typed_empty_monster@@Base+0x140>
   13a30:	ldr	r1, [sp, #4]
   13a34:	movw	r2, #9966	; 0x26ee
   13a38:	movw	r3, #50112	; 0xc3c0
   13a3c:	mov	r0, r4
   13a40:	movt	r2, #2
   13a44:	movt	r3, #1
   13a48:	bl	21de0 <flatcc_verify_table_as_root@@Base>
   13a4c:	cmp	r0, #0
   13a50:	beq	13aa4 <test_typed_empty_monster@@Base+0x190>
   13a54:	mov	r5, r0
   13a58:	bl	21350 <flatcc_verify_error_string@@Base>
   13a5c:	mov	r1, r0
   13a60:	movw	r0, #10047	; 0x273f
   13a64:	movt	r0, #2
   13a68:	bl	12e98 <printf@plt>
   13a6c:	b	13a90 <test_typed_empty_monster@@Base+0x17c>
   13a70:	movw	r0, #9997	; 0x270d
   13a74:	movt	r0, #2
   13a78:	bl	12e98 <printf@plt>
   13a7c:	b	13a8c <test_typed_empty_monster@@Base+0x178>
   13a80:	movw	r0, #18048	; 0x4680
   13a84:	movt	r0, #2
   13a88:	bl	12eec <puts@plt>
   13a8c:	mvn	r5, #0
   13a90:	mov	r0, r4
   13a94:	bl	20d50 <flatcc_builder_aligned_free@@Base>
   13a98:	mov	r0, r5
   13a9c:	sub	sp, fp, #16
   13aa0:	pop	{r4, r5, r6, sl, fp, pc}
   13aa4:	ldr	r1, [sp, #4]
   13aa8:	movw	r3, #50112	; 0xc3c0
   13aac:	mov	r0, r4
   13ab0:	mov	r2, r6
   13ab4:	movt	r3, #1
   13ab8:	bl	21edc <flatcc_verify_table_as_typed_root@@Base>
   13abc:	cmp	r0, #0
   13ac0:	beq	13adc <test_typed_empty_monster@@Base+0x1c8>
   13ac4:	mov	r5, r0
   13ac8:	bl	21350 <flatcc_verify_error_string@@Base>
   13acc:	mov	r1, r0
   13ad0:	movw	r0, #10093	; 0x276d
   13ad4:	movt	r0, #2
   13ad8:	b	13a68 <test_typed_empty_monster@@Base+0x154>
   13adc:	ldr	r1, [sp, #4]
   13ae0:	movw	r3, #50112	; 0xc3c0
   13ae4:	mov	r0, r4
   13ae8:	mov	r2, r6
   13aec:	movt	r3, #1
   13af0:	bl	21edc <flatcc_verify_table_as_typed_root@@Base>
   13af4:	cmp	r0, #0
   13af8:	beq	13b14 <test_typed_empty_monster@@Base+0x200>
   13afc:	mov	r5, r0
   13b00:	bl	21350 <flatcc_verify_error_string@@Base>
   13b04:	mov	r1, r0
   13b08:	movw	r0, #10148	; 0x27a4
   13b0c:	movt	r0, #2
   13b10:	b	13a68 <test_typed_empty_monster@@Base+0x154>
   13b14:	ldr	r1, [sp, #4]
   13b18:	movw	r3, #50112	; 0xc3c0
   13b1c:	mov	r2, sp
   13b20:	mov	r0, r4
   13b24:	str	r6, [sp]
   13b28:	movt	r3, #1
   13b2c:	bl	21de0 <flatcc_verify_table_as_root@@Base>
   13b30:	cmp	r0, #0
   13b34:	bne	13a54 <test_typed_empty_monster@@Base+0x140>
   13b38:	ldr	r1, [sp, #4]
   13b3c:	movw	r2, #9828	; 0x2664
   13b40:	movw	r3, #50112	; 0xc3c0
   13b44:	mov	r0, r4
   13b48:	movt	r2, #2
   13b4c:	movt	r3, #1
   13b50:	bl	21de0 <flatcc_verify_table_as_root@@Base>
   13b54:	mov	r5, #0
   13b58:	cmp	r0, #0
   13b5c:	bne	13a90 <test_typed_empty_monster@@Base+0x17c>
   13b60:	movw	r0, #18112	; 0x46c0
   13b64:	movt	r0, #2
   13b68:	bl	12eec <puts@plt>
   13b6c:	b	13a90 <test_typed_empty_monster@@Base+0x17c>
   13b70:	movw	r0, #13899	; 0x364b
   13b74:	movw	r1, #13609	; 0x3529
   13b78:	movw	r3, #14061	; 0x36ed
   13b7c:	mov	r2, #235	; 0xeb
   13b80:	movt	r0, #2
   13b84:	movt	r1, #2
   13b88:	movt	r3, #2
   13b8c:	bl	12f88 <__assert_fail@plt>

00013b90 <verify_table_with_emptystruct@@Base>:
   13b90:	push	{fp, lr}
   13b94:	mov	fp, sp
   13b98:	cmp	r0, #0
   13b9c:	beq	13bf0 <verify_table_with_emptystruct@@Base+0x60>
   13ba0:	ldr	r1, [r0, #4]
   13ba4:	movw	r2, #20301	; 0x4f4d
   13ba8:	movt	r2, #21326	; 0x534e
   13bac:	cmp	r1, r2
   13bb0:	bne	13bf0 <verify_table_with_emptystruct@@Base+0x60>
   13bb4:	ldr	r1, [r0]
   13bb8:	ldr	r2, [r0, r1]!
   13bbc:	mov	r1, r0
   13bc0:	ldrh	r2, [r1, -r2]!	; <UNPREDICTABLE>
   13bc4:	cmp	r2, #5
   13bc8:	bls	13be4 <verify_table_with_emptystruct@@Base+0x54>
   13bcc:	ldrh	r1, [r1, #4]
   13bd0:	cmp	r1, #0
   13bd4:	beq	13be4 <verify_table_with_emptystruct@@Base+0x54>
   13bd8:	adds	r0, r0, r1
   13bdc:	mov	r0, #0
   13be0:	popne	{fp, pc}
   13be4:	movw	r0, #18240	; 0x4740
   13be8:	movt	r0, #2
   13bec:	b	13bf8 <verify_table_with_emptystruct@@Base+0x68>
   13bf0:	movw	r0, #18192	; 0x4710
   13bf4:	movt	r0, #2
   13bf8:	bl	12eec <puts@plt>
   13bfc:	mvn	r0, #0
   13c00:	pop	{fp, pc}

00013c04 <test_table_with_emptystruct@@Base>:
   13c04:	push	{r4, r5, fp, lr}
   13c08:	add	fp, sp, #8
   13c0c:	sub	sp, sp, #8
   13c10:	mov	r4, r0
   13c14:	bl	1d2e4 <flatcc_builder_reset@@Base>
   13c18:	movw	r1, #9828	; 0x2664
   13c1c:	mov	r0, r4
   13c20:	mov	r2, #0
   13c24:	mov	r3, #0
   13c28:	mov	r5, #0
   13c2c:	movt	r1, #2
   13c30:	bl	1db50 <flatcc_builder_start_buffer@@Base>
   13c34:	cmp	r0, #0
   13c38:	bne	13ca4 <test_table_with_emptystruct@@Base+0xa0>
   13c3c:	mov	r0, r4
   13c40:	mov	r1, #1
   13c44:	bl	1ebcc <flatcc_builder_start_table@@Base>
   13c48:	cmp	r0, #0
   13c4c:	bne	13c98 <test_table_with_emptystruct@@Base+0x94>
   13c50:	mov	r0, r4
   13c54:	mov	r1, #0
   13c58:	mov	r2, #0
   13c5c:	mov	r3, #1
   13c60:	mov	r5, #0
   13c64:	bl	1fe9c <flatcc_builder_table_add@@Base>
   13c68:	cmp	r0, #0
   13c6c:	beq	13c98 <test_table_with_emptystruct@@Base+0x94>
   13c70:	movw	r1, #17864	; 0x45c8
   13c74:	mov	r0, r4
   13c78:	mov	r2, #0
   13c7c:	movt	r1, #2
   13c80:	bl	1f4cc <flatcc_builder_check_required@@Base>
   13c84:	cmp	r0, #0
   13c88:	beq	13cf4 <test_table_with_emptystruct@@Base+0xf0>
   13c8c:	mov	r0, r4
   13c90:	bl	1f55c <flatcc_builder_end_table@@Base>
   13c94:	mov	r5, r0
   13c98:	mov	r0, r4
   13c9c:	mov	r1, r5
   13ca0:	bl	1dd40 <flatcc_builder_end_buffer@@Base>
   13ca4:	add	r1, sp, #4
   13ca8:	mov	r0, r4
   13cac:	bl	20c50 <flatcc_builder_finalize_aligned_buffer@@Base>
   13cb0:	mov	r4, r0
   13cb4:	movw	r0, #32880	; 0x8070
   13cb8:	ldr	r2, [sp, #4]
   13cbc:	movt	r0, #3
   13cc0:	mov	r1, r4
   13cc4:	ldr	r3, [r0]
   13cc8:	movw	r0, #10218	; 0x27ea
   13ccc:	movt	r0, #2
   13cd0:	bl	1365c <test_type_aliases@@Base+0x51c>
   13cd4:	mov	r0, r4
   13cd8:	bl	13b90 <verify_table_with_emptystruct@@Base>
   13cdc:	mov	r5, r0
   13ce0:	mov	r0, r4
   13ce4:	bl	20d50 <flatcc_builder_aligned_free@@Base>
   13ce8:	mov	r0, r5
   13cec:	sub	sp, fp, #8
   13cf0:	pop	{r4, r5, fp, pc}
   13cf4:	movw	r0, #14142	; 0x373e
   13cf8:	movw	r1, #13609	; 0x3529
   13cfc:	movw	r3, #14331	; 0x37fb
   13d00:	mov	r2, #215	; 0xd7
   13d04:	movt	r0, #2
   13d08:	movt	r1, #2
   13d0c:	movt	r3, #2
   13d10:	bl	12f88 <__assert_fail@plt>

00013d14 <test_typed_table_with_emptystruct@@Base>:
   13d14:	push	{r4, r5, fp, lr}
   13d18:	add	fp, sp, #8
   13d1c:	sub	sp, sp, #8
   13d20:	mov	r4, r0
   13d24:	bl	1d2e4 <flatcc_builder_reset@@Base>
   13d28:	movw	r1, #10242	; 0x2802
   13d2c:	mov	r0, r4
   13d30:	mov	r2, #0
   13d34:	mov	r3, #0
   13d38:	mov	r5, #0
   13d3c:	movt	r1, #2
   13d40:	bl	1db50 <flatcc_builder_start_buffer@@Base>
   13d44:	cmp	r0, #0
   13d48:	bne	13db4 <test_typed_table_with_emptystruct@@Base+0xa0>
   13d4c:	mov	r0, r4
   13d50:	mov	r1, #1
   13d54:	bl	1ebcc <flatcc_builder_start_table@@Base>
   13d58:	cmp	r0, #0
   13d5c:	bne	13da8 <test_typed_table_with_emptystruct@@Base+0x94>
   13d60:	mov	r0, r4
   13d64:	mov	r1, #0
   13d68:	mov	r2, #0
   13d6c:	mov	r3, #1
   13d70:	mov	r5, #0
   13d74:	bl	1fe9c <flatcc_builder_table_add@@Base>
   13d78:	cmp	r0, #0
   13d7c:	beq	13da8 <test_typed_table_with_emptystruct@@Base+0x94>
   13d80:	movw	r1, #17864	; 0x45c8
   13d84:	mov	r0, r4
   13d88:	mov	r2, #0
   13d8c:	movt	r1, #2
   13d90:	bl	1f4cc <flatcc_builder_check_required@@Base>
   13d94:	cmp	r0, #0
   13d98:	beq	13eb4 <test_typed_table_with_emptystruct@@Base+0x1a0>
   13d9c:	mov	r0, r4
   13da0:	bl	1f55c <flatcc_builder_end_table@@Base>
   13da4:	mov	r5, r0
   13da8:	mov	r0, r4
   13dac:	mov	r1, r5
   13db0:	bl	1dd40 <flatcc_builder_end_buffer@@Base>
   13db4:	add	r1, sp, #4
   13db8:	mov	r0, r4
   13dbc:	bl	20b34 <flatcc_builder_get_direct_buffer@@Base>
   13dc0:	mov	r4, r0
   13dc4:	movw	r0, #32880	; 0x8070
   13dc8:	ldr	r2, [sp, #4]
   13dcc:	movt	r0, #3
   13dd0:	mov	r1, r4
   13dd4:	ldr	r3, [r0]
   13dd8:	movw	r0, #10212	; 0x27e4
   13ddc:	movt	r0, #2
   13de0:	bl	1365c <test_type_aliases@@Base+0x51c>
   13de4:	ldr	r1, [sp, #4]
   13de8:	movw	r2, #10242	; 0x2802
   13dec:	movw	r3, #52508	; 0xcd1c
   13df0:	mov	r0, r4
   13df4:	movt	r2, #2
   13df8:	movt	r3, #1
   13dfc:	bl	21de0 <flatcc_verify_table_as_root@@Base>
   13e00:	cmp	r0, #0
   13e04:	beq	13e14 <test_typed_table_with_emptystruct@@Base+0x100>
   13e08:	movw	r0, #18384	; 0x47d0
   13e0c:	movt	r0, #2
   13e10:	b	13e74 <test_typed_table_with_emptystruct@@Base+0x160>
   13e14:	ldr	r1, [sp, #4]
   13e18:	movw	r2, #10242	; 0x2802
   13e1c:	movw	r3, #52508	; 0xcd1c
   13e20:	mov	r0, r4
   13e24:	movt	r2, #2
   13e28:	movt	r3, #1
   13e2c:	bl	21de0 <flatcc_verify_table_as_root@@Base>
   13e30:	cmp	r0, #0
   13e34:	beq	13e44 <test_typed_table_with_emptystruct@@Base+0x130>
   13e38:	movw	r0, #18352	; 0x47b0
   13e3c:	movt	r0, #2
   13e40:	b	13e74 <test_typed_table_with_emptystruct@@Base+0x160>
   13e44:	ldr	r1, [sp, #4]
   13e48:	movw	r5, #14262	; 0x37b6
   13e4c:	movw	r3, #52508	; 0xcd1c
   13e50:	mov	r0, r4
   13e54:	movt	r5, #45277	; 0xb0dd
   13e58:	movt	r3, #1
   13e5c:	mov	r2, r5
   13e60:	bl	21edc <flatcc_verify_table_as_typed_root@@Base>
   13e64:	cmp	r0, #0
   13e68:	beq	13e84 <test_typed_table_with_emptystruct@@Base+0x170>
   13e6c:	movw	r0, #18304	; 0x4780
   13e70:	movt	r0, #2
   13e74:	bl	12eec <puts@plt>
   13e78:	mvn	r0, #0
   13e7c:	sub	sp, fp, #8
   13e80:	pop	{r4, r5, fp, pc}
   13e84:	cmp	r4, #0
   13e88:	beq	13ea8 <test_typed_table_with_emptystruct@@Base+0x194>
   13e8c:	ldr	r1, [r4, #4]
   13e90:	mov	r0, #0
   13e94:	cmp	r1, r5
   13e98:	beq	13e7c <test_typed_table_with_emptystruct@@Base+0x168>
   13e9c:	movw	r0, #17631	; 0x44df
   13ea0:	movt	r0, #2
   13ea4:	b	13e74 <test_typed_table_with_emptystruct@@Base+0x160>
   13ea8:	movw	r0, #18272	; 0x4760
   13eac:	movt	r0, #2
   13eb0:	b	13e74 <test_typed_table_with_emptystruct@@Base+0x160>
   13eb4:	movw	r0, #14142	; 0x373e
   13eb8:	movw	r1, #13609	; 0x3529
   13ebc:	movw	r3, #14331	; 0x37fb
   13ec0:	mov	r2, #215	; 0xd7
   13ec4:	movt	r0, #2
   13ec8:	movt	r1, #2
   13ecc:	movt	r3, #2
   13ed0:	bl	12f88 <__assert_fail@plt>

00013ed4 <verify_monster@@Base>:
   13ed4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13ed8:	add	fp, sp, #28
   13edc:	sub	sp, sp, #4
   13ee0:	mov	r4, r0
   13ee4:	ldr	r0, [r0, #4]
   13ee8:	movw	r1, #20301	; 0x4f4d
   13eec:	movt	r1, #21326	; 0x534e
   13ef0:	cmp	r0, r1
   13ef4:	bne	13f50 <verify_monster@@Base+0x7c>
   13ef8:	ldr	r7, [r4]
   13efc:	adds	r6, r4, r7
   13f00:	beq	13f68 <verify_monster@@Base+0x94>
   13f04:	ldr	r1, [r6]
   13f08:	mov	r0, r6
   13f0c:	ldrh	r1, [r0, -r1]!	; <UNPREDICTABLE>
   13f10:	cmp	r1, #10
   13f14:	bcc	13f5c <verify_monster@@Base+0x88>
   13f18:	ldrh	r1, [r0, #8]
   13f1c:	cmp	r1, #0
   13f20:	beq	13f5c <verify_monster@@Base+0x88>
   13f24:	add	r1, r6, r1
   13f28:	ldrh	r1, [r1]
   13f2c:	cmp	r1, #80	; 0x50
   13f30:	bne	13f5c <verify_monster@@Base+0x88>
   13f34:	ldrh	r0, [r0, #4]
   13f38:	cmp	r0, #0
   13f3c:	addsne	r5, r6, r0
   13f40:	bne	13f80 <verify_monster@@Base+0xac>
   13f44:	movw	r0, #18496	; 0x4840
   13f48:	movt	r0, #2
   13f4c:	b	13f70 <verify_monster@@Base+0x9c>
   13f50:	movw	r0, #18416	; 0x47f0
   13f54:	movt	r0, #2
   13f58:	b	13f70 <verify_monster@@Base+0x9c>
   13f5c:	movw	r0, #19760	; 0x4d30
   13f60:	movt	r0, #2
   13f64:	b	13f70 <verify_monster@@Base+0x9c>
   13f68:	movw	r0, #18464	; 0x4820
   13f6c:	movt	r0, #2
   13f70:	bl	12eec <puts@plt>
   13f74:	mvn	r0, #0
   13f78:	sub	sp, fp, #28
   13f7c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13f80:	tst	r5, #15
   13f84:	beq	13f94 <verify_monster@@Base+0xc0>
   13f88:	movw	r0, #19712	; 0x4d00
   13f8c:	movt	r0, #2
   13f90:	bl	12eec <puts@plt>
   13f94:	vldr	s0, [pc, #964]	; 14360 <verify_monster@@Base+0x48c>
   13f98:	vldr	s2, [r5, #8]
   13f9c:	vcmp.f32	s2, s0
   13fa0:	vmrs	APSR_nzcv, fpscr
   13fa4:	beq	13fb4 <verify_monster@@Base+0xe0>
   13fa8:	movw	r0, #19664	; 0x4cd0
   13fac:	movt	r0, #2
   13fb0:	b	13f70 <verify_monster@@Base+0x9c>
   13fb4:	vldr	s0, [r5]
   13fb8:	vmov.f32	s2, #112	; 0x3f800000  1.0
   13fbc:	vcmp.f32	s0, s2
   13fc0:	vmrs	APSR_nzcv, fpscr
   13fc4:	bne	13fdc <verify_monster@@Base+0x108>
   13fc8:	vldr	s0, [r5, #4]
   13fcc:	vmov.f32	s2, #0	; 0x40000000  2.0
   13fd0:	vcmp.f32	s0, s2
   13fd4:	vmrs	APSR_nzcv, fpscr
   13fd8:	beq	13fe8 <verify_monster@@Base+0x114>
   13fdc:	movw	r0, #19632	; 0x4cb0
   13fe0:	movt	r0, #2
   13fe4:	b	13f70 <verify_monster@@Base+0x9c>
   13fe8:	vldr	d16, [r5, #16]
   13fec:	vcmp.f64	d16, #0.0
   13ff0:	vmrs	APSR_nzcv, fpscr
   13ff4:	bne	14004 <verify_monster@@Base+0x130>
   13ff8:	ldr	r0, [r5, #26]
   13ffc:	cmp	r0, #0
   14000:	beq	14010 <verify_monster@@Base+0x13c>
   14004:	movw	r0, #19584	; 0x4c80
   14008:	movt	r0, #2
   1400c:	b	13f70 <verify_monster@@Base+0x9c>
   14010:	ldr	r0, [r6]
   14014:	mov	r9, r6
   14018:	ldrh	r8, [r9, -r0]!
   1401c:	cmp	r8, #12
   14020:	bcc	148d4 <verify_monster@@Base+0xa00>
   14024:	ldrh	r0, [r9, #10]
   14028:	cmp	r0, #0
   1402c:	beq	148d4 <verify_monster@@Base+0xa00>
   14030:	mov	r1, r6
   14034:	ldr	r0, [r1, r0]!
   14038:	add	r0, r1, r0
   1403c:	movw	r1, #9896	; 0x26a8
   14040:	add	r5, r0, #4
   14044:	movt	r1, #2
   14048:	mov	r0, r5
   1404c:	bl	12e8c <strcmp@plt>
   14050:	cmp	r0, #0
   14054:	beq	14064 <verify_monster@@Base+0x190>
   14058:	movw	r0, #18528	; 0x4860
   1405c:	movt	r0, #2
   14060:	b	13f70 <verify_monster@@Base+0x9c>
   14064:	ldr	r0, [r5, #-4]
   14068:	cmp	r0, #9
   1406c:	bne	1410c <verify_monster@@Base+0x238>
   14070:	cmp	r8, #18
   14074:	bcc	14118 <verify_monster@@Base+0x244>
   14078:	ldrh	r0, [r9, #16]
   1407c:	cmp	r0, #0
   14080:	beq	14118 <verify_monster@@Base+0x244>
   14084:	ldrb	r0, [r6, r0]
   14088:	cmp	r0, #2
   1408c:	bne	14118 <verify_monster@@Base+0x244>
   14090:	ldrh	r0, [r9, #14]
   14094:	cmp	r0, #0
   14098:	beq	14124 <verify_monster@@Base+0x250>
   1409c:	mov	r2, r6
   140a0:	ldr	r1, [r2, r0]!
   140a4:	ldr	r2, [r2, r1]
   140a8:	cmp	r2, #10
   140ac:	bne	14124 <verify_monster@@Base+0x250>
   140b0:	add	r1, r7, r1
   140b4:	add	r0, r1, r0
   140b8:	mov	r1, #0
   140bc:	add	r0, r4, r0
   140c0:	add	r0, r0, #4
   140c4:	ldrb	r2, [r0, r1]
   140c8:	cmp	r1, r2
   140cc:	bne	14130 <verify_monster@@Base+0x25c>
   140d0:	add	r1, r1, #1
   140d4:	cmp	r1, #10
   140d8:	bcc	140c4 <verify_monster@@Base+0x1f0>
   140dc:	cmp	r8, #8
   140e0:	bcc	14250 <verify_monster@@Base+0x37c>
   140e4:	ldrh	r0, [r9, #6]
   140e8:	cmp	r0, #0
   140ec:	beq	14140 <verify_monster@@Base+0x26c>
   140f0:	add	r0, r6, r0
   140f4:	ldrh	r0, [r0]
   140f8:	cmp	r0, #150	; 0x96
   140fc:	bne	1425c <verify_monster@@Base+0x388>
   14100:	movw	r0, #19424	; 0x4be0
   14104:	movt	r0, #2
   14108:	b	13f70 <verify_monster@@Base+0x9c>
   1410c:	movw	r0, #19552	; 0x4c60
   14110:	movt	r0, #2
   14114:	b	13f70 <verify_monster@@Base+0x9c>
   14118:	movw	r0, #19520	; 0x4c40
   1411c:	movt	r0, #2
   14120:	b	13f70 <verify_monster@@Base+0x9c>
   14124:	movw	r0, #19488	; 0x4c20
   14128:	movt	r0, #2
   1412c:	b	13f70 <verify_monster@@Base+0x9c>
   14130:	movw	r0, #10247	; 0x2807
   14134:	movt	r0, #2
   14138:	bl	12e98 <printf@plt>
   1413c:	b	13f74 <verify_monster@@Base+0xa0>
   14140:	cmp	r8, #10
   14144:	bcc	14250 <verify_monster@@Base+0x37c>
   14148:	ldrh	r0, [r9, #8]
   1414c:	cmp	r0, #0
   14150:	beq	14250 <verify_monster@@Base+0x37c>
   14154:	ldrh	r0, [r9, #4]
   14158:	cmp	r0, #0
   1415c:	beq	14274 <verify_monster@@Base+0x3a0>
   14160:	cmp	r8, #24
   14164:	bcc	14268 <verify_monster@@Base+0x394>
   14168:	ldrh	r1, [r9, #22]
   1416c:	cmp	r1, #0
   14170:	beq	14268 <verify_monster@@Base+0x394>
   14174:	mov	r0, r6
   14178:	ldr	r1, [r0, r1]!
   1417c:	ldr	r1, [r0, r1]!
   14180:	cmp	r1, #5
   14184:	bne	14268 <verify_monster@@Base+0x394>
   14188:	movw	ip, #17704	; 0x4528
   1418c:	add	lr, r0, #4
   14190:	mov	r1, #0
   14194:	movt	ip, #2
   14198:	add	r3, lr, r1, lsl #2
   1419c:	add	r5, ip, r1, lsl #2
   141a0:	ldrh	r2, [r3]
   141a4:	ldrh	r0, [r5]
   141a8:	cmp	r0, r2
   141ac:	ldrbeq	r0, [r3, #2]
   141b0:	ldrbeq	r2, [r5, #2]
   141b4:	cmpeq	r2, r0
   141b8:	bne	14280 <verify_monster@@Base+0x3ac>
   141bc:	add	r1, r1, #1
   141c0:	cmp	r1, #5
   141c4:	bcc	14198 <verify_monster@@Base+0x2c4>
   141c8:	cmp	r8, #28
   141cc:	bcc	1428c <verify_monster@@Base+0x3b8>
   141d0:	ldrh	r1, [r9, #26]
   141d4:	cmp	r1, #0
   141d8:	beq	1428c <verify_monster@@Base+0x3b8>
   141dc:	mov	r0, r6
   141e0:	ldr	r1, [r0, r1]!
   141e4:	ldr	r1, [r0, r1]!
   141e8:	cmp	r1, #8
   141ec:	bne	1428c <verify_monster@@Base+0x3b8>
   141f0:	add	sl, r0, #4
   141f4:	str	sl, [sp]
   141f8:	ldr	r0, [sl, #20]!
   141fc:	ldr	r5, [sl, r0]!
   14200:	mov	r0, sl
   14204:	ldrh	r1, [r0, -r5]!
   14208:	cmp	r1, #12
   1420c:	bcc	148d4 <verify_monster@@Base+0xa00>
   14210:	ldrh	r0, [r0, #10]
   14214:	cmp	r0, #0
   14218:	beq	148d4 <verify_monster@@Base+0xa00>
   1421c:	mov	r1, sl
   14220:	ldr	r0, [r1, r0]!
   14224:	add	r0, r1, r0
   14228:	movw	r1, #10417	; 0x28b1
   1422c:	add	r0, r0, #4
   14230:	movt	r1, #2
   14234:	bl	12e8c <strcmp@plt>
   14238:	cmp	r0, #0
   1423c:	beq	14298 <verify_monster@@Base+0x3c4>
   14240:	movw	r0, #10401	; 0x28a1
   14244:	movt	r0, #2
   14248:	bl	12e98 <printf@plt>
   1424c:	b	13f74 <verify_monster@@Base+0xa0>
   14250:	movw	r0, #18560	; 0x4880
   14254:	movt	r0, #2
   14258:	b	13f70 <verify_monster@@Base+0x9c>
   1425c:	movw	r0, #19456	; 0x4c00
   14260:	movt	r0, #2
   14264:	b	13f70 <verify_monster@@Base+0x9c>
   14268:	movw	r0, #19376	; 0x4bb0
   1426c:	movt	r0, #2
   14270:	b	13f70 <verify_monster@@Base+0x9c>
   14274:	movw	r0, #18592	; 0x48a0
   14278:	movt	r0, #2
   1427c:	b	13f70 <verify_monster@@Base+0x9c>
   14280:	movw	r0, #10276	; 0x2824
   14284:	movt	r0, #2
   14288:	b	14138 <verify_monster@@Base+0x264>
   1428c:	movw	r0, #19328	; 0x4b80
   14290:	movt	r0, #2
   14294:	b	13f70 <verify_monster@@Base+0x9c>
   14298:	ldr	r0, [sp]
   1429c:	ldr	r1, [r0, #4]!
   142a0:	add	r0, r0, r1
   142a4:	cmp	r0, sl
   142a8:	beq	142b8 <verify_monster@@Base+0x3e4>
   142ac:	movw	r0, #19264	; 0x4b40
   142b0:	movt	r0, #2
   142b4:	b	13f70 <verify_monster@@Base+0x9c>
   142b8:	rsb	r2, r5, #0
   142bc:	mov	r1, r0
   142c0:	ldrh	r2, [r1, r2]!	; <UNPREDICTABLE>
   142c4:	cmp	r2, #12
   142c8:	bcc	148d4 <verify_monster@@Base+0xa00>
   142cc:	ldrh	r1, [r1, #10]
   142d0:	cmp	r1, #0
   142d4:	beq	148d4 <verify_monster@@Base+0xa00>
   142d8:	ldr	r1, [r0, r1]!
   142dc:	add	r0, r0, r1
   142e0:	movw	r1, #10417	; 0x28b1
   142e4:	add	r5, r0, #4
   142e8:	movt	r1, #2
   142ec:	mov	r0, r5
   142f0:	bl	12e8c <strcmp@plt>
   142f4:	cmp	r0, #0
   142f8:	beq	14308 <verify_monster@@Base+0x434>
   142fc:	movw	r0, #10425	; 0x28b9
   14300:	movt	r0, #2
   14304:	b	1451c <verify_monster@@Base+0x648>
   14308:	ldr	r0, [sp]
   1430c:	ldr	r1, [r0, #8]!
   14310:	ldr	r2, [r0, r1]!
   14314:	mov	r1, r0
   14318:	ldrh	r2, [r1, -r2]!	; <UNPREDICTABLE>
   1431c:	cmp	r2, #12
   14320:	bcc	148d4 <verify_monster@@Base+0xa00>
   14324:	ldrh	r1, [r1, #10]
   14328:	cmp	r1, #0
   1432c:	beq	148d4 <verify_monster@@Base+0xa00>
   14330:	ldr	r1, [r0, r1]!
   14334:	add	r0, r0, r1
   14338:	movw	r1, #10459	; 0x28db
   1433c:	add	r5, r0, #4
   14340:	movt	r1, #2
   14344:	mov	r0, r5
   14348:	bl	12e8c <strcmp@plt>
   1434c:	cmp	r0, #0
   14350:	beq	14364 <verify_monster@@Base+0x490>
   14354:	movw	r0, #10465	; 0x28e1
   14358:	movt	r0, #2
   1435c:	b	1451c <verify_monster@@Base+0x648>
   14360:	subgt	ip, ip, sp, asr #25
   14364:	ldr	r0, [sp]
   14368:	ldr	r1, [r0]
   1436c:	ldr	r2, [r0, r1]!
   14370:	mov	r1, r0
   14374:	ldrh	r2, [r1, -r2]!	; <UNPREDICTABLE>
   14378:	cmp	r2, #12
   1437c:	bcc	148d4 <verify_monster@@Base+0xa00>
   14380:	ldrh	r1, [r1, #10]
   14384:	cmp	r1, #0
   14388:	beq	148d4 <verify_monster@@Base+0xa00>
   1438c:	ldr	r1, [r0, r1]!
   14390:	add	r0, r0, r1
   14394:	movw	r1, #10499	; 0x2903
   14398:	add	r5, r0, #4
   1439c:	movt	r1, #2
   143a0:	mov	r0, r5
   143a4:	bl	12e8c <strcmp@plt>
   143a8:	cmp	r0, #0
   143ac:	beq	143bc <verify_monster@@Base+0x4e8>
   143b0:	movw	r0, #10508	; 0x290c
   143b4:	movt	r0, #2
   143b8:	b	1451c <verify_monster@@Base+0x648>
   143bc:	ldr	r0, [sp]
   143c0:	ldr	r1, [r0, #12]!
   143c4:	ldr	r2, [r0, r1]!
   143c8:	mov	r1, r0
   143cc:	ldrh	r2, [r1, -r2]!	; <UNPREDICTABLE>
   143d0:	cmp	r2, #12
   143d4:	bcc	148d4 <verify_monster@@Base+0xa00>
   143d8:	ldrh	r1, [r1, #10]
   143dc:	cmp	r1, #0
   143e0:	beq	148d4 <verify_monster@@Base+0xa00>
   143e4:	ldr	r1, [r0, r1]!
   143e8:	add	r0, r0, r1
   143ec:	movw	r1, #10417	; 0x28b1
   143f0:	add	r5, r0, #4
   143f4:	movt	r1, #2
   143f8:	mov	r0, r5
   143fc:	bl	12e8c <strcmp@plt>
   14400:	cmp	r0, #0
   14404:	beq	14414 <verify_monster@@Base+0x540>
   14408:	movw	r0, #10545	; 0x2931
   1440c:	movt	r0, #2
   14410:	b	1451c <verify_monster@@Base+0x648>
   14414:	ldr	r0, [sp]
   14418:	ldr	r1, [r0, #16]!
   1441c:	ldr	r2, [r0, r1]!
   14420:	mov	r1, r0
   14424:	ldrh	r2, [r1, -r2]!	; <UNPREDICTABLE>
   14428:	cmp	r2, #12
   1442c:	bcc	148d4 <verify_monster@@Base+0xa00>
   14430:	ldrh	r1, [r1, #10]
   14434:	cmp	r1, #0
   14438:	beq	148d4 <verify_monster@@Base+0xa00>
   1443c:	ldr	r1, [r0, r1]!
   14440:	add	r0, r0, r1
   14444:	movw	r1, #10459	; 0x28db
   14448:	add	r5, r0, #4
   1444c:	movt	r1, #2
   14450:	mov	r0, r5
   14454:	bl	12e8c <strcmp@plt>
   14458:	cmp	r0, #0
   1445c:	beq	1446c <verify_monster@@Base+0x598>
   14460:	movw	r0, #10581	; 0x2955
   14464:	movt	r0, #2
   14468:	b	1451c <verify_monster@@Base+0x648>
   1446c:	ldr	r0, [sp]
   14470:	ldr	r1, [r0, #24]!
   14474:	ldr	r2, [r0, r1]!
   14478:	mov	r1, r0
   1447c:	ldrh	r2, [r1, -r2]!	; <UNPREDICTABLE>
   14480:	cmp	r2, #12
   14484:	bcc	148d4 <verify_monster@@Base+0xa00>
   14488:	ldrh	r1, [r1, #10]
   1448c:	cmp	r1, #0
   14490:	beq	148d4 <verify_monster@@Base+0xa00>
   14494:	ldr	r1, [r0, r1]!
   14498:	add	r0, r0, r1
   1449c:	movw	r1, #10499	; 0x2903
   144a0:	add	r5, r0, #4
   144a4:	movt	r1, #2
   144a8:	mov	r0, r5
   144ac:	bl	12e8c <strcmp@plt>
   144b0:	cmp	r0, #0
   144b4:	beq	144c4 <verify_monster@@Base+0x5f0>
   144b8:	movw	r0, #10615	; 0x2977
   144bc:	movt	r0, #2
   144c0:	b	1451c <verify_monster@@Base+0x648>
   144c4:	ldr	r2, [sp]
   144c8:	ldr	r0, [r2, #28]!
   144cc:	ldr	r1, [r2, r0]!
   144d0:	mov	r0, r2
   144d4:	ldrh	r1, [r0, -r1]!	; <UNPREDICTABLE>
   144d8:	cmp	r1, #12
   144dc:	bcc	148d4 <verify_monster@@Base+0xa00>
   144e0:	ldrh	r0, [r0, #10]
   144e4:	cmp	r0, #0
   144e8:	beq	148d4 <verify_monster@@Base+0xa00>
   144ec:	mov	r3, r2
   144f0:	movw	r1, #10459	; 0x28db
   144f4:	ldr	r0, [r3, r0]!
   144f8:	movt	r1, #2
   144fc:	add	r0, r3, r0
   14500:	add	r5, r0, #4
   14504:	mov	r0, r5
   14508:	bl	12e8c <strcmp@plt>
   1450c:	cmp	r0, #0
   14510:	beq	14524 <verify_monster@@Base+0x650>
   14514:	movw	r0, #10652	; 0x299c
   14518:	movt	r0, #2
   1451c:	mov	r1, r5
   14520:	b	14138 <verify_monster@@Base+0x264>
   14524:	ldrh	r1, [r9, #24]
   14528:	cmp	r1, #0
   1452c:	beq	14574 <verify_monster@@Base+0x6a0>
   14530:	mov	r0, r6
   14534:	ldr	r1, [r0, r1]!
   14538:	ldr	r1, [r0, r1]!
   1453c:	cmp	r1, #3
   14540:	bne	14574 <verify_monster@@Base+0x6a0>
   14544:	add	r5, r0, #4
   14548:	movw	r1, #10689	; 0x29c1
   1454c:	ldr	r0, [r5]
   14550:	movt	r1, #2
   14554:	add	r0, r5, r0
   14558:	add	r0, r0, #4
   1455c:	bl	12e8c <strcmp@plt>
   14560:	cmp	r0, #0
   14564:	beq	14580 <verify_monster@@Base+0x6ac>
   14568:	movw	r0, #19184	; 0x4af0
   1456c:	movt	r0, #2
   14570:	b	13f70 <verify_monster@@Base+0x9c>
   14574:	movw	r0, #19216	; 0x4b10
   14578:	movt	r0, #2
   1457c:	b	13f70 <verify_monster@@Base+0x9c>
   14580:	mov	r0, r5
   14584:	ldr	r1, [r0, #4]!
   14588:	ldr	r1, [r0, r1]!
   1458c:	cmp	r1, #2
   14590:	bne	145b0 <verify_monster@@Base+0x6dc>
   14594:	add	r0, r0, #4
   14598:	ldrh	r0, [r0]
   1459c:	cmp	r0, #44	; 0x2c
   145a0:	beq	145bc <verify_monster@@Base+0x6e8>
   145a4:	movw	r0, #19152	; 0x4ad0
   145a8:	movt	r0, #2
   145ac:	b	13f70 <verify_monster@@Base+0x9c>
   145b0:	movw	r0, #10695	; 0x29c7
   145b4:	movt	r0, #2
   145b8:	b	14248 <verify_monster@@Base+0x374>
   145bc:	ldr	r0, [r5, #8]!
   145c0:	movw	r1, #10721	; 0x29e1
   145c4:	movt	r1, #2
   145c8:	add	r0, r5, r0
   145cc:	add	r0, r0, #4
   145d0:	bl	12e8c <strcmp@plt>
   145d4:	cmp	r0, #0
   145d8:	beq	145e8 <verify_monster@@Base+0x714>
   145dc:	movw	r0, #19120	; 0x4ab0
   145e0:	movt	r0, #2
   145e4:	b	13f70 <verify_monster@@Base+0x9c>
   145e8:	cmp	r8, #54	; 0x36
   145ec:	bcc	146d4 <verify_monster@@Base+0x800>
   145f0:	ldrh	r0, [r9, #52]	; 0x34
   145f4:	cmp	r0, #0
   145f8:	beq	146d4 <verify_monster@@Base+0x800>
   145fc:	mov	r2, r6
   14600:	ldr	r1, [r2, r0]!
   14604:	ldr	r2, [r2, r1]
   14608:	cmp	r2, #4
   1460c:	bne	146e0 <verify_monster@@Base+0x80c>
   14610:	add	r1, r7, r1
   14614:	movw	r2, #17892	; 0x45e4
   14618:	add	r0, r1, r0
   1461c:	mov	r1, #0
   14620:	movt	r2, #2
   14624:	add	r0, r4, r0
   14628:	add	r0, r0, #4
   1462c:	ldrb	r3, [r0, r1]
   14630:	ldr	r7, [r2, r1, lsl #2]
   14634:	cmp	r7, r3
   14638:	bne	146ec <verify_monster@@Base+0x818>
   1463c:	add	r1, r1, #1
   14640:	cmp	r1, #4
   14644:	bcc	1462c <verify_monster@@Base+0x758>
   14648:	cmp	r8, #20
   1464c:	bcc	146f8 <verify_monster@@Base+0x824>
   14650:	ldrh	r0, [r9, #18]
   14654:	cmp	r0, #0
   14658:	beq	146f8 <verify_monster@@Base+0x824>
   1465c:	ldrb	r0, [r6, r0]
   14660:	cmp	r0, #1
   14664:	bne	146f8 <verify_monster@@Base+0x824>
   14668:	cmp	r8, #22
   1466c:	bcc	14724 <verify_monster@@Base+0x850>
   14670:	ldrh	r0, [r9, #20]
   14674:	cmp	r0, #0
   14678:	movne	r1, r6
   1467c:	ldrne	r0, [r1, r0]!
   14680:	addsne	r0, r1, r0
   14684:	beq	14724 <verify_monster@@Base+0x850>
   14688:	ldr	r2, [r0]
   1468c:	mov	r1, r0
   14690:	ldrh	r2, [r1, -r2]!	; <UNPREDICTABLE>
   14694:	cmp	r2, #12
   14698:	bcc	148d4 <verify_monster@@Base+0xa00>
   1469c:	ldrh	r1, [r1, #10]
   146a0:	cmp	r1, #0
   146a4:	beq	148d4 <verify_monster@@Base+0xa00>
   146a8:	ldr	r1, [r0, r1]!
   146ac:	add	r0, r0, r1
   146b0:	movw	r1, #10417	; 0x28b1
   146b4:	add	r0, r0, #4
   146b8:	movt	r1, #2
   146bc:	bl	12e8c <strcmp@plt>
   146c0:	cmp	r0, #0
   146c4:	beq	14704 <verify_monster@@Base+0x830>
   146c8:	movw	r0, #19008	; 0x4a40
   146cc:	movt	r0, #2
   146d0:	b	13f70 <verify_monster@@Base+0x9c>
   146d4:	movw	r0, #18624	; 0x48c0
   146d8:	movt	r0, #2
   146dc:	b	13f70 <verify_monster@@Base+0x9c>
   146e0:	movw	r0, #19088	; 0x4a90
   146e4:	movt	r0, #2
   146e8:	b	13f70 <verify_monster@@Base+0x9c>
   146ec:	movw	r0, #10728	; 0x29e8
   146f0:	movt	r0, #2
   146f4:	b	14138 <verify_monster@@Base+0x264>
   146f8:	movw	r0, #19040	; 0x4a60
   146fc:	movt	r0, #2
   14700:	b	13f70 <verify_monster@@Base+0x9c>
   14704:	cmp	r8, #30
   14708:	bcc	14724 <verify_monster@@Base+0x850>
   1470c:	ldrh	r0, [r9, #28]
   14710:	cmp	r0, #0
   14714:	movne	r1, r6
   14718:	ldrne	r0, [r1, r0]!
   1471c:	addsne	r4, r1, r0
   14720:	bne	14730 <verify_monster@@Base+0x85c>
   14724:	movw	r0, #13160	; 0x3368
   14728:	movt	r0, #2
   1472c:	b	148dc <verify_monster@@Base+0xa08>
   14730:	ldr	r0, [r4]
   14734:	mov	r5, r4
   14738:	ldrh	r7, [r5, -r0]!
   1473c:	cmp	r7, #12
   14740:	bcc	148d4 <verify_monster@@Base+0xa00>
   14744:	ldrh	r0, [r5, #10]
   14748:	cmp	r0, #0
   1474c:	beq	148d4 <verify_monster@@Base+0xa00>
   14750:	mov	r1, r4
   14754:	ldr	r0, [r1, r0]!
   14758:	add	r0, r1, r0
   1475c:	movw	r1, #10759	; 0x2a07
   14760:	add	r0, r0, #4
   14764:	movt	r1, #2
   14768:	bl	12e8c <strcmp@plt>
   1476c:	cmp	r0, #0
   14770:	beq	14780 <verify_monster@@Base+0x8ac>
   14774:	movw	r0, #18976	; 0x4a20
   14778:	movt	r0, #2
   1477c:	b	13f70 <verify_monster@@Base+0x9c>
   14780:	cmp	r7, #20
   14784:	bcc	1479c <verify_monster@@Base+0x8c8>
   14788:	ldrh	r0, [r5, #18]
   1478c:	cmp	r0, #0
   14790:	ldrbne	r0, [r4, r0]
   14794:	cmpne	r0, #0
   14798:	bne	14820 <verify_monster@@Base+0x94c>
   1479c:	ldrh	r2, [r9, #20]
   147a0:	mov	r1, #0
   147a4:	mov	r0, #0
   147a8:	cmp	r2, #0
   147ac:	movne	r1, r6
   147b0:	ldrne	r2, [r1, r2]!
   147b4:	addne	r1, r1, r2
   147b8:	ldrh	r2, [r9, #20]
   147bc:	cmp	r2, #0
   147c0:	movne	r0, r6
   147c4:	ldrne	r2, [r0, r2]!
   147c8:	addne	r0, r0, r2
   147cc:	cmp	r1, r0
   147d0:	beq	147e0 <verify_monster@@Base+0x90c>
   147d4:	movw	r0, #18896	; 0x49d0
   147d8:	movt	r0, #2
   147dc:	b	13f70 <verify_monster@@Base+0x9c>
   147e0:	cmp	r7, #28
   147e4:	bcc	14800 <verify_monster@@Base+0x92c>
   147e8:	ldrh	r0, [r5, #26]
   147ec:	cmp	r0, #0
   147f0:	ldrne	r0, [r4, r0]!
   147f4:	ldrne	r0, [r4, r0]!
   147f8:	cmpne	r0, #0
   147fc:	bne	1482c <verify_monster@@Base+0x958>
   14800:	movw	r0, #14633	; 0x3929
   14804:	movw	r1, #13198	; 0x338e
   14808:	movw	r3, #14960	; 0x3a70
   1480c:	movw	r2, #693	; 0x2b5
   14810:	movt	r0, #2
   14814:	movt	r1, #2
   14818:	movt	r3, #2
   1481c:	bl	12f88 <__assert_fail@plt>
   14820:	movw	r0, #18928	; 0x49f0
   14824:	movt	r0, #2
   14828:	b	13f70 <verify_monster@@Base+0x9c>
   1482c:	add	r1, r4, #4
   14830:	add	r0, r1, r0, lsl #2
   14834:	ldr	r1, [r0, #-4]!
   14838:	adds	r0, r0, r1
   1483c:	beq	148f4 <verify_monster@@Base+0xa20>
   14840:	ldr	r2, [r0]
   14844:	mov	r1, r0
   14848:	ldrh	r2, [r1, -r2]!	; <UNPREDICTABLE>
   1484c:	cmp	r2, #20
   14850:	bcc	14914 <verify_monster@@Base+0xa40>
   14854:	ldrh	r3, [r1, #18]
   14858:	cmp	r3, #0
   1485c:	beq	14914 <verify_monster@@Base+0xa40>
   14860:	ldrb	r3, [r0, r3]
   14864:	cmp	r3, #1
   14868:	bne	14914 <verify_monster@@Base+0xa40>
   1486c:	cmp	r2, #22
   14870:	bcc	14724 <verify_monster@@Base+0x850>
   14874:	ldrh	r1, [r1, #20]
   14878:	cmp	r1, #0
   1487c:	ldrne	r1, [r0, r1]!
   14880:	addsne	r0, r0, r1
   14884:	beq	14724 <verify_monster@@Base+0x850>
   14888:	ldr	r2, [r0]
   1488c:	mov	r1, r0
   14890:	ldrh	r2, [r1, -r2]!	; <UNPREDICTABLE>
   14894:	cmp	r2, #12
   14898:	bcc	148d4 <verify_monster@@Base+0xa00>
   1489c:	ldrh	r1, [r1, #10]
   148a0:	cmp	r1, #0
   148a4:	beq	148d4 <verify_monster@@Base+0xa00>
   148a8:	ldr	r1, [r0, r1]!
   148ac:	add	r0, r0, r1
   148b0:	movw	r1, #10417	; 0x28b1
   148b4:	add	r0, r0, #4
   148b8:	movt	r1, #2
   148bc:	bl	12e8c <strcmp@plt>
   148c0:	cmp	r0, #0
   148c4:	beq	14920 <verify_monster@@Base+0xa4c>
   148c8:	movw	r0, #18752	; 0x4940
   148cc:	movt	r0, #2
   148d0:	b	13f70 <verify_monster@@Base+0x9c>
   148d4:	movw	r0, #14511	; 0x38af
   148d8:	movt	r0, #2
   148dc:	movw	r1, #13198	; 0x338e
   148e0:	movw	r3, #14430	; 0x385e
   148e4:	movw	r2, #699	; 0x2bb
   148e8:	movt	r1, #2
   148ec:	movt	r3, #2
   148f0:	bl	12f88 <__assert_fail@plt>
   148f4:	movw	r0, #13160	; 0x3368
   148f8:	movw	r1, #13198	; 0x338e
   148fc:	movw	r3, #15140	; 0x3b24
   14900:	movw	r2, #717	; 0x2cd
   14904:	movt	r0, #2
   14908:	movt	r1, #2
   1490c:	movt	r3, #2
   14910:	bl	12f88 <__assert_fail@plt>
   14914:	movw	r0, #18816	; 0x4980
   14918:	movt	r0, #2
   1491c:	b	13f70 <verify_monster@@Base+0x9c>
   14920:	cmp	r8, #36	; 0x24
   14924:	bcc	14940 <verify_monster@@Base+0xa6c>
   14928:	ldrh	r0, [r9, #34]	; 0x22
   1492c:	cmp	r0, #0
   14930:	beq	14940 <verify_monster@@Base+0xa6c>
   14934:	ldrb	r0, [r6, r0]
   14938:	cmp	r0, #0
   1493c:	beq	1494c <verify_monster@@Base+0xa78>
   14940:	movw	r0, #18720	; 0x4920
   14944:	movt	r0, #2
   14948:	b	13f70 <verify_monster@@Base+0x9c>
   1494c:	ldrh	r0, [r9, #32]
   14950:	cmp	r0, #0
   14954:	beq	149b8 <verify_monster@@Base+0xae4>
   14958:	ldr	r0, [r6, r0]!
   1495c:	adds	r1, r6, r0
   14960:	beq	149c4 <verify_monster@@Base+0xaf0>
   14964:	ldr	r0, [r1]
   14968:	ldrh	r2, [r1, -r0]!
   1496c:	mov	r0, #0
   14970:	cmp	r2, #6
   14974:	bcc	13f78 <verify_monster@@Base+0xa4>
   14978:	ldrh	r3, [r1, #4]
   1497c:	cmp	r3, #0
   14980:	bne	149ac <verify_monster@@Base+0xad8>
   14984:	cmp	r2, #8
   14988:	bcc	13f78 <verify_monster@@Base+0xa4>
   1498c:	ldrh	r3, [r1, #6]
   14990:	cmp	r3, #0
   14994:	bne	149ac <verify_monster@@Base+0xad8>
   14998:	cmp	r2, #10
   1499c:	bcc	13f78 <verify_monster@@Base+0xa4>
   149a0:	ldrh	r1, [r1, #8]
   149a4:	cmp	r1, #0
   149a8:	beq	13f78 <verify_monster@@Base+0xa4>
   149ac:	movw	r0, #18688	; 0x4900
   149b0:	movt	r0, #2
   149b4:	b	13f70 <verify_monster@@Base+0x9c>
   149b8:	movw	r0, #18656	; 0x48e0
   149bc:	movt	r0, #2
   149c0:	b	13f70 <verify_monster@@Base+0x9c>
   149c4:	movw	r0, #13160	; 0x3368
   149c8:	movw	r1, #13198	; 0x338e
   149cc:	movw	r3, #15237	; 0x3b85
   149d0:	movw	r2, #607	; 0x25f
   149d4:	movt	r0, #2
   149d8:	movt	r1, #2
   149dc:	movt	r3, #2
   149e0:	bl	12f88 <__assert_fail@plt>

000149e4 <gen_monster@@Base>:
   149e4:	push	{r4, r5, r6, sl, fp, lr}
   149e8:	add	fp, sp, #16
   149ec:	sub	sp, sp, #48	; 0x30
   149f0:	mov	r4, r0
   149f4:	movw	r0, #17848	; 0x45b8
   149f8:	mov	r5, r1
   149fc:	movt	r0, #2
   14a00:	vldr	d16, [r0]
   14a04:	movw	r0, #2312	; 0x908
   14a08:	strh	r0, [sp, #40]	; 0x28
   14a0c:	movw	r0, #256	; 0x100
   14a10:	movt	r0, #1
   14a14:	str	r0, [sp, #8]
   14a18:	mov	r0, r4
   14a1c:	vstr	d16, [sp, #32]
   14a20:	bl	1d2e4 <flatcc_builder_reset@@Base>
   14a24:	cmp	r5, #0
   14a28:	movw	r1, #9828	; 0x2664
   14a2c:	mov	r0, r4
   14a30:	mov	r2, #0
   14a34:	moveq	r3, #0
   14a38:	movt	r1, #2
   14a3c:	movne	r3, #2
   14a40:	bl	1db50 <flatcc_builder_start_buffer@@Base>
   14a44:	cmp	r0, #0
   14a48:	bne	14a58 <gen_monster@@Base+0x74>
   14a4c:	mov	r0, r4
   14a50:	mov	r1, #36	; 0x24
   14a54:	bl	1ebcc <flatcc_builder_start_table@@Base>
   14a58:	mov	r0, r4
   14a5c:	mov	r1, #2
   14a60:	mov	r2, #2
   14a64:	mov	r3, #2
   14a68:	bl	1fe9c <flatcc_builder_table_add@@Base>
   14a6c:	cmp	r0, #0
   14a70:	mov	r2, #32
   14a74:	mov	r3, #16
   14a78:	movne	r1, #80	; 0x50
   14a7c:	strhne	r1, [r0]
   14a80:	mov	r0, r4
   14a84:	mov	r1, #0
   14a88:	bl	1fe9c <flatcc_builder_table_add@@Base>
   14a8c:	movw	r3, #52429	; 0xcccd
   14a90:	mov	r1, #1065353216	; 0x3f800000
   14a94:	mov	r2, #1073741824	; 0x40000000
   14a98:	movt	r3, #49228	; 0xc04c
   14a9c:	stm	r0, {r1, r2, r3}
   14aa0:	movw	r1, #9896	; 0x26a8
   14aa4:	mov	r0, r4
   14aa8:	movt	r1, #2
   14aac:	bl	20844 <flatcc_builder_create_string_str@@Base>
   14ab0:	cmp	r0, #0
   14ab4:	beq	14ad0 <gen_monster@@Base+0xec>
   14ab8:	mov	r5, r0
   14abc:	mov	r0, r4
   14ac0:	mov	r1, #3
   14ac4:	bl	1fd60 <flatcc_builder_table_add_offset@@Base>
   14ac8:	cmp	r0, #0
   14acc:	strne	r5, [r0]
   14ad0:	mov	r0, r4
   14ad4:	mov	r1, #6
   14ad8:	mov	r2, #1
   14adc:	mov	r3, #1
   14ae0:	mov	r5, #1
   14ae4:	bl	1fe9c <flatcc_builder_table_add@@Base>
   14ae8:	cmp	r0, #0
   14aec:	mov	r2, #10
   14af0:	mov	r3, #1
   14af4:	movne	r1, #2
   14af8:	strbne	r1, [r0]
   14afc:	mvn	r0, #0
   14b00:	add	r1, sp, #32
   14b04:	str	r5, [sp]
   14b08:	str	r0, [sp, #4]
   14b0c:	mov	r0, r4
   14b10:	bl	1f714 <flatcc_builder_create_vector@@Base>
   14b14:	cmp	r0, #0
   14b18:	beq	14b34 <gen_monster@@Base+0x150>
   14b1c:	mov	r5, r0
   14b20:	mov	r0, r4
   14b24:	mov	r1, #5
   14b28:	bl	1fd60 <flatcc_builder_table_add_offset@@Base>
   14b2c:	cmp	r0, #0
   14b30:	strne	r5, [r0]
   14b34:	mov	r0, r4
   14b38:	mov	r1, #4
   14b3c:	mov	r2, #2
   14b40:	mvn	r3, #-1073741824	; 0xc0000000
   14b44:	bl	1e800 <flatcc_builder_start_vector@@Base>
   14b48:	mov	r0, r4
   14b4c:	mov	r1, #1
   14b50:	bl	1dfe8 <flatcc_builder_extend_vector@@Base>
   14b54:	mov	r1, #16
   14b58:	strh	r1, [r0]
   14b5c:	mov	r1, #32
   14b60:	strb	r1, [r0, #2]
   14b64:	mov	r0, r4
   14b68:	mov	r1, #2
   14b6c:	bl	1dfe8 <flatcc_builder_extend_vector@@Base>
   14b70:	mov	r1, #48	; 0x30
   14b74:	strh	r1, [r0]
   14b78:	mov	r1, #64	; 0x40
   14b7c:	strb	r1, [r0, #2]
   14b80:	mov	r1, #80	; 0x50
   14b84:	strh	r1, [r0, #4]
   14b88:	mov	r1, #96	; 0x60
   14b8c:	strb	r1, [r0, #6]
   14b90:	mov	r0, r4
   14b94:	mov	r1, #1
   14b98:	bl	1dfe8 <flatcc_builder_extend_vector@@Base>
   14b9c:	cmp	r0, #0
   14ba0:	movne	r1, #128	; 0x80
   14ba4:	strbne	r1, [r0, #2]
   14ba8:	movne	r1, #112	; 0x70
   14bac:	strhne	r1, [r0]
   14bb0:	mov	r0, r4
   14bb4:	mov	r1, #1
   14bb8:	bl	1dfe8 <flatcc_builder_extend_vector@@Base>
   14bbc:	movw	r5, #400	; 0x190
   14bc0:	cmp	r0, #0
   14bc4:	mov	r1, #1
   14bc8:	movt	r5, #145	; 0x91
   14bcc:	strne	r5, [r0]
   14bd0:	mov	r0, r4
   14bd4:	bl	1dfe8 <flatcc_builder_extend_vector@@Base>
   14bd8:	cmp	r0, #0
   14bdc:	mov	r1, #1
   14be0:	strne	r5, [r0]
   14be4:	mov	r0, r4
   14be8:	bl	1dfe8 <flatcc_builder_extend_vector@@Base>
   14bec:	cmp	r0, #0
   14bf0:	strne	r5, [r0]
   14bf4:	mov	r0, r4
   14bf8:	bl	1f95c <flatcc_builder_vector_count@@Base>
   14bfc:	cmp	r0, #7
   14c00:	bne	15304 <gen_monster@@Base+0x920>
   14c04:	mov	r0, r4
   14c08:	mov	r1, #2
   14c0c:	bl	1e634 <flatcc_builder_truncate_vector@@Base>
   14c10:	mov	r0, r4
   14c14:	bl	1f95c <flatcc_builder_vector_count@@Base>
   14c18:	cmp	r0, #5
   14c1c:	bne	15324 <gen_monster@@Base+0x940>
   14c20:	mov	r0, r4
   14c24:	bl	1f968 <flatcc_builder_vector_edit@@Base>
   14c28:	ldrh	r1, [r0, #16]
   14c2c:	add	r1, r1, #1
   14c30:	strh	r1, [r0, #16]
   14c34:	mov	r0, r4
   14c38:	bl	1f86c <flatcc_builder_end_vector@@Base>
   14c3c:	cmp	r0, #0
   14c40:	beq	14c5c <gen_monster@@Base+0x278>
   14c44:	mov	r5, r0
   14c48:	mov	r0, r4
   14c4c:	mov	r1, #9
   14c50:	bl	1fd60 <flatcc_builder_table_add_offset@@Base>
   14c54:	cmp	r0, #0
   14c58:	strne	r5, [r0]
   14c5c:	mov	r0, r4
   14c60:	mov	r1, #36	; 0x24
   14c64:	bl	1ebcc <flatcc_builder_start_table@@Base>
   14c68:	movw	r1, #10417	; 0x28b1
   14c6c:	mov	r0, r4
   14c70:	mov	r2, #7
   14c74:	movt	r1, #2
   14c78:	bl	20740 <flatcc_builder_create_string@@Base>
   14c7c:	cmp	r0, #0
   14c80:	beq	14c9c <gen_monster@@Base+0x2b8>
   14c84:	mov	r5, r0
   14c88:	mov	r0, r4
   14c8c:	mov	r1, #3
   14c90:	bl	1fd60 <flatcc_builder_table_add_offset@@Base>
   14c94:	cmp	r0, #0
   14c98:	strne	r5, [r0]
   14c9c:	movw	r1, #17860	; 0x45c4
   14ca0:	mov	r0, r4
   14ca4:	mov	r2, #1
   14ca8:	movt	r1, #2
   14cac:	bl	1f4cc <flatcc_builder_check_required@@Base>
   14cb0:	cmp	r0, #0
   14cb4:	beq	152e4 <gen_monster@@Base+0x900>
   14cb8:	mov	r0, r4
   14cbc:	bl	1f55c <flatcc_builder_end_table@@Base>
   14cc0:	mov	r5, r0
   14cc4:	mov	r0, r4
   14cc8:	bl	1e88c <flatcc_builder_start_offset_vector@@Base>
   14ccc:	mov	r0, r4
   14cd0:	mov	r1, #2
   14cd4:	bl	1e248 <flatcc_builder_extend_offset_vector@@Base>
   14cd8:	str	r5, [r0]
   14cdc:	str	r5, [r0, #4]
   14ce0:	mov	r0, r4
   14ce4:	mov	r1, #36	; 0x24
   14ce8:	bl	1ebcc <flatcc_builder_start_table@@Base>
   14cec:	movw	r1, #10459	; 0x28db
   14cf0:	mov	r0, r4
   14cf4:	mov	r2, #30
   14cf8:	movt	r1, #2
   14cfc:	bl	20870 <flatcc_builder_create_string_strn@@Base>
   14d00:	cmp	r0, #0
   14d04:	beq	14d20 <gen_monster@@Base+0x33c>
   14d08:	mov	r6, r0
   14d0c:	mov	r0, r4
   14d10:	mov	r1, #3
   14d14:	bl	1fd60 <flatcc_builder_table_add_offset@@Base>
   14d18:	cmp	r0, #0
   14d1c:	strne	r6, [r0]
   14d20:	movw	r1, #17860	; 0x45c4
   14d24:	mov	r0, r4
   14d28:	mov	r2, #1
   14d2c:	movt	r1, #2
   14d30:	bl	1f4cc <flatcc_builder_check_required@@Base>
   14d34:	cmp	r0, #0
   14d38:	beq	152e4 <gen_monster@@Base+0x900>
   14d3c:	mov	r0, r4
   14d40:	bl	1f55c <flatcc_builder_end_table@@Base>
   14d44:	mov	r1, r0
   14d48:	mov	r0, r4
   14d4c:	bl	1e2d0 <flatcc_builder_offset_vector_push@@Base>
   14d50:	ldr	r6, [r0]
   14d54:	mov	r0, r4
   14d58:	mov	r1, #3
   14d5c:	bl	1e248 <flatcc_builder_extend_offset_vector@@Base>
   14d60:	stm	r0, {r5, r6}
   14d64:	mov	r0, r4
   14d68:	mov	r1, #1
   14d6c:	bl	1e6d0 <flatcc_builder_truncate_offset_vector@@Base>
   14d70:	mov	r0, r4
   14d74:	bl	1fc54 <flatcc_builder_offset_vector_count@@Base>
   14d78:	cmp	r0, #5
   14d7c:	bne	15344 <gen_monster@@Base+0x960>
   14d80:	mov	r0, r4
   14d84:	mov	r1, #36	; 0x24
   14d88:	bl	1ebcc <flatcc_builder_start_table@@Base>
   14d8c:	movw	r1, #10939	; 0x2abb
   14d90:	mov	r0, r4
   14d94:	mov	r2, #8
   14d98:	movt	r1, #2
   14d9c:	bl	20870 <flatcc_builder_create_string_strn@@Base>
   14da0:	cmp	r0, #0
   14da4:	beq	14dc0 <gen_monster@@Base+0x3dc>
   14da8:	mov	r6, r0
   14dac:	mov	r0, r4
   14db0:	mov	r1, #3
   14db4:	bl	1fd60 <flatcc_builder_table_add_offset@@Base>
   14db8:	cmp	r0, #0
   14dbc:	strne	r6, [r0]
   14dc0:	movw	r1, #17860	; 0x45c4
   14dc4:	mov	r0, r4
   14dc8:	mov	r2, #1
   14dcc:	movt	r1, #2
   14dd0:	bl	1f4cc <flatcc_builder_check_required@@Base>
   14dd4:	cmp	r0, #0
   14dd8:	beq	152e4 <gen_monster@@Base+0x900>
   14ddc:	mov	r0, r4
   14de0:	bl	1f55c <flatcc_builder_end_table@@Base>
   14de4:	mov	r1, r0
   14de8:	mov	r0, r4
   14dec:	bl	1e2d0 <flatcc_builder_offset_vector_push@@Base>
   14df0:	ldr	r0, [r0]
   14df4:	str	r0, [sp, #24]
   14df8:	mov	r0, r4
   14dfc:	bl	1fc54 <flatcc_builder_offset_vector_count@@Base>
   14e00:	cmp	r0, #6
   14e04:	bne	15364 <gen_monster@@Base+0x980>
   14e08:	mov	r0, r4
   14e0c:	bl	1fc4c <flatcc_builder_offset_vector_edit@@Base>
   14e10:	ldr	r1, [r0, #8]
   14e14:	ldr	r2, [r0, #20]
   14e18:	str	r1, [sp, #28]
   14e1c:	str	r2, [r0]
   14e20:	str	r5, [r0, #20]
   14e24:	add	r1, sp, #24
   14e28:	mov	r0, r4
   14e2c:	mov	r2, #2
   14e30:	bl	1e370 <flatcc_builder_append_offset_vector@@Base>
   14e34:	mov	r0, r4
   14e38:	bl	1e958 <flatcc_builder_end_offset_vector@@Base>
   14e3c:	cmp	r0, #0
   14e40:	beq	14e5c <gen_monster@@Base+0x478>
   14e44:	mov	r6, r0
   14e48:	mov	r0, r4
   14e4c:	mov	r1, #11
   14e50:	bl	1fd60 <flatcc_builder_table_add_offset@@Base>
   14e54:	cmp	r0, #0
   14e58:	strne	r6, [r0]
   14e5c:	movw	r1, #10689	; 0x29c1
   14e60:	mov	r0, r4
   14e64:	movt	r1, #2
   14e68:	bl	20844 <flatcc_builder_create_string_str@@Base>
   14e6c:	movw	r1, #17824	; 0x45a0
   14e70:	str	r0, [sp, #12]
   14e74:	mov	r0, r4
   14e78:	mov	r2, #2
   14e7c:	movt	r1, #2
   14e80:	bl	20740 <flatcc_builder_create_string@@Base>
   14e84:	movw	r1, #10721	; 0x29e1
   14e88:	str	r0, [sp, #16]
   14e8c:	mov	r0, r4
   14e90:	movt	r1, #2
   14e94:	bl	20844 <flatcc_builder_create_string_str@@Base>
   14e98:	str	r0, [sp, #20]
   14e9c:	add	r1, sp, #12
   14ea0:	mov	r0, r4
   14ea4:	mov	r2, #3
   14ea8:	bl	1e904 <flatcc_builder_create_offset_vector@@Base>
   14eac:	cmp	r0, #0
   14eb0:	beq	14ecc <gen_monster@@Base+0x4e8>
   14eb4:	mov	r6, r0
   14eb8:	mov	r0, r4
   14ebc:	mov	r1, #10
   14ec0:	bl	1fd60 <flatcc_builder_table_add_offset@@Base>
   14ec4:	cmp	r0, #0
   14ec8:	strne	r6, [r0]
   14ecc:	mov	r0, r4
   14ed0:	mov	r1, #1
   14ed4:	mov	r2, #1
   14ed8:	mvn	r3, #0
   14edc:	bl	1e800 <flatcc_builder_start_vector@@Base>
   14ee0:	add	r6, sp, #8
   14ee4:	mov	r0, r4
   14ee8:	mov	r2, #1
   14eec:	mov	r1, r6
   14ef0:	bl	1e160 <flatcc_builder_append_vector@@Base>
   14ef4:	orr	r1, r6, #1
   14ef8:	mov	r0, r4
   14efc:	mov	r2, #3
   14f00:	bl	1e160 <flatcc_builder_append_vector@@Base>
   14f04:	mov	r0, r4
   14f08:	bl	1f86c <flatcc_builder_end_vector@@Base>
   14f0c:	cmp	r0, #0
   14f10:	beq	14f2c <gen_monster@@Base+0x548>
   14f14:	mov	r6, r0
   14f18:	mov	r0, r4
   14f1c:	mov	r1, #24
   14f20:	bl	1fd60 <flatcc_builder_table_add_offset@@Base>
   14f24:	cmp	r0, #0
   14f28:	strne	r6, [r0]
   14f2c:	cmp	r5, #0
   14f30:	beq	14f70 <gen_monster@@Base+0x58c>
   14f34:	mov	r0, r4
   14f38:	mov	r1, #7
   14f3c:	mov	r2, #1
   14f40:	mov	r3, #1
   14f44:	bl	1fe9c <flatcc_builder_table_add@@Base>
   14f48:	cmp	r0, #0
   14f4c:	beq	14f70 <gen_monster@@Base+0x58c>
   14f50:	mov	r6, r0
   14f54:	mov	r0, r4
   14f58:	mov	r1, #8
   14f5c:	bl	1fd60 <flatcc_builder_table_add_offset@@Base>
   14f60:	cmp	r0, #0
   14f64:	movne	r1, #1
   14f68:	strbne	r1, [r6]
   14f6c:	strne	r5, [r0]
   14f70:	mov	r0, r4
   14f74:	mov	r1, #36	; 0x24
   14f78:	bl	1ebcc <flatcc_builder_start_table@@Base>
   14f7c:	movw	r1, #10759	; 0x2a07
   14f80:	mov	r0, r4
   14f84:	movt	r1, #2
   14f88:	bl	20844 <flatcc_builder_create_string_str@@Base>
   14f8c:	cmp	r0, #0
   14f90:	beq	14fac <gen_monster@@Base+0x5c8>
   14f94:	mov	r6, r0
   14f98:	mov	r0, r4
   14f9c:	mov	r1, #3
   14fa0:	bl	1fd60 <flatcc_builder_table_add_offset@@Base>
   14fa4:	cmp	r0, #0
   14fa8:	strne	r6, [r0]
   14fac:	mov	r0, r4
   14fb0:	bl	1e88c <flatcc_builder_start_offset_vector@@Base>
   14fb4:	mov	r0, r4
   14fb8:	mov	r1, #36	; 0x24
   14fbc:	bl	1ebcc <flatcc_builder_start_table@@Base>
   14fc0:	cmp	r5, #0
   14fc4:	beq	15004 <gen_monster@@Base+0x620>
   14fc8:	mov	r0, r4
   14fcc:	mov	r1, #7
   14fd0:	mov	r2, #1
   14fd4:	mov	r3, #1
   14fd8:	bl	1fe9c <flatcc_builder_table_add@@Base>
   14fdc:	cmp	r0, #0
   14fe0:	beq	15004 <gen_monster@@Base+0x620>
   14fe4:	mov	r6, r0
   14fe8:	mov	r0, r4
   14fec:	mov	r1, #8
   14ff0:	bl	1fd60 <flatcc_builder_table_add_offset@@Base>
   14ff4:	cmp	r0, #0
   14ff8:	movne	r1, #1
   14ffc:	strbne	r1, [r6]
   15000:	strne	r5, [r0]
   15004:	movw	r1, #11018	; 0x2b0a
   15008:	mov	r0, r4
   1500c:	movt	r1, #2
   15010:	bl	20844 <flatcc_builder_create_string_str@@Base>
   15014:	cmp	r0, #0
   15018:	beq	15034 <gen_monster@@Base+0x650>
   1501c:	mov	r6, r0
   15020:	mov	r0, r4
   15024:	mov	r1, #3
   15028:	bl	1fd60 <flatcc_builder_table_add_offset@@Base>
   1502c:	cmp	r0, #0
   15030:	strne	r6, [r0]
   15034:	movw	r1, #17860	; 0x45c4
   15038:	mov	r0, r4
   1503c:	mov	r2, #1
   15040:	movt	r1, #2
   15044:	bl	1f4cc <flatcc_builder_check_required@@Base>
   15048:	cmp	r0, #0
   1504c:	beq	152e4 <gen_monster@@Base+0x900>
   15050:	mov	r0, r4
   15054:	bl	1f55c <flatcc_builder_end_table@@Base>
   15058:	cmp	r0, #0
   1505c:	beq	1506c <gen_monster@@Base+0x688>
   15060:	mov	r1, r0
   15064:	mov	r0, r4
   15068:	bl	1e2d0 <flatcc_builder_offset_vector_push@@Base>
   1506c:	mov	r0, r4
   15070:	mov	r1, #36	; 0x24
   15074:	bl	1ebcc <flatcc_builder_start_table@@Base>
   15078:	cmp	r5, #0
   1507c:	beq	150bc <gen_monster@@Base+0x6d8>
   15080:	mov	r0, r4
   15084:	mov	r1, #7
   15088:	mov	r2, #1
   1508c:	mov	r3, #1
   15090:	bl	1fe9c <flatcc_builder_table_add@@Base>
   15094:	cmp	r0, #0
   15098:	beq	150bc <gen_monster@@Base+0x6d8>
   1509c:	mov	r6, r0
   150a0:	mov	r0, r4
   150a4:	mov	r1, #8
   150a8:	bl	1fd60 <flatcc_builder_table_add_offset@@Base>
   150ac:	cmp	r0, #0
   150b0:	movne	r1, #1
   150b4:	strbne	r1, [r6]
   150b8:	strne	r5, [r0]
   150bc:	movw	r1, #11018	; 0x2b0a
   150c0:	mov	r0, r4
   150c4:	movt	r1, #2
   150c8:	bl	20844 <flatcc_builder_create_string_str@@Base>
   150cc:	cmp	r0, #0
   150d0:	beq	150ec <gen_monster@@Base+0x708>
   150d4:	mov	r6, r0
   150d8:	mov	r0, r4
   150dc:	mov	r1, #3
   150e0:	bl	1fd60 <flatcc_builder_table_add_offset@@Base>
   150e4:	cmp	r0, #0
   150e8:	strne	r6, [r0]
   150ec:	movw	r1, #17860	; 0x45c4
   150f0:	mov	r0, r4
   150f4:	mov	r2, #1
   150f8:	movt	r1, #2
   150fc:	bl	1f4cc <flatcc_builder_check_required@@Base>
   15100:	cmp	r0, #0
   15104:	beq	152e4 <gen_monster@@Base+0x900>
   15108:	mov	r0, r4
   1510c:	bl	1f55c <flatcc_builder_end_table@@Base>
   15110:	cmp	r0, #0
   15114:	beq	15124 <gen_monster@@Base+0x740>
   15118:	mov	r1, r0
   1511c:	mov	r0, r4
   15120:	bl	1e2d0 <flatcc_builder_offset_vector_push@@Base>
   15124:	mov	r0, r4
   15128:	mov	r1, #36	; 0x24
   1512c:	bl	1ebcc <flatcc_builder_start_table@@Base>
   15130:	mov	r0, r4
   15134:	mov	r1, #8
   15138:	bl	1fd60 <flatcc_builder_table_add_offset@@Base>
   1513c:	movw	r1, #11018	; 0x2b0a
   15140:	cmp	r0, #0
   15144:	strne	r5, [r0]
   15148:	movt	r1, #2
   1514c:	mov	r0, r4
   15150:	bl	20844 <flatcc_builder_create_string_str@@Base>
   15154:	cmp	r0, #0
   15158:	beq	15174 <gen_monster@@Base+0x790>
   1515c:	mov	r5, r0
   15160:	mov	r0, r4
   15164:	mov	r1, #3
   15168:	bl	1fd60 <flatcc_builder_table_add_offset@@Base>
   1516c:	cmp	r0, #0
   15170:	strne	r5, [r0]
   15174:	mov	r0, r4
   15178:	mov	r1, #7
   1517c:	mov	r2, #1
   15180:	mov	r3, #1
   15184:	mov	r5, #1
   15188:	bl	1fe9c <flatcc_builder_table_add@@Base>
   1518c:	movw	r1, #17860	; 0x45c4
   15190:	cmp	r0, #0
   15194:	mov	r2, #1
   15198:	strbne	r5, [r0]
   1519c:	movt	r1, #2
   151a0:	mov	r0, r4
   151a4:	bl	1f4cc <flatcc_builder_check_required@@Base>
   151a8:	cmp	r0, #0
   151ac:	beq	152e4 <gen_monster@@Base+0x900>
   151b0:	mov	r0, r4
   151b4:	bl	1f55c <flatcc_builder_end_table@@Base>
   151b8:	cmp	r0, #0
   151bc:	beq	151cc <gen_monster@@Base+0x7e8>
   151c0:	mov	r1, r0
   151c4:	mov	r0, r4
   151c8:	bl	1e2d0 <flatcc_builder_offset_vector_push@@Base>
   151cc:	mov	r0, r4
   151d0:	bl	1e958 <flatcc_builder_end_offset_vector@@Base>
   151d4:	cmp	r0, #0
   151d8:	beq	151f4 <gen_monster@@Base+0x810>
   151dc:	mov	r5, r0
   151e0:	mov	r0, r4
   151e4:	mov	r1, #11
   151e8:	bl	1fd60 <flatcc_builder_table_add_offset@@Base>
   151ec:	cmp	r0, #0
   151f0:	strne	r5, [r0]
   151f4:	movw	r1, #17860	; 0x45c4
   151f8:	mov	r0, r4
   151fc:	mov	r2, #1
   15200:	movt	r1, #2
   15204:	bl	1f4cc <flatcc_builder_check_required@@Base>
   15208:	cmp	r0, #0
   1520c:	beq	152e4 <gen_monster@@Base+0x900>
   15210:	mov	r0, r4
   15214:	bl	1f55c <flatcc_builder_end_table@@Base>
   15218:	cmp	r0, #0
   1521c:	beq	15238 <gen_monster@@Base+0x854>
   15220:	mov	r5, r0
   15224:	mov	r0, r4
   15228:	mov	r1, #12
   1522c:	bl	1fd60 <flatcc_builder_table_add_offset@@Base>
   15230:	cmp	r0, #0
   15234:	strne	r5, [r0]
   15238:	mov	r0, r4
   1523c:	mov	r1, #15
   15240:	mov	r2, #1
   15244:	mov	r3, #1
   15248:	bl	1fe9c <flatcc_builder_table_add@@Base>
   1524c:	cmp	r0, #0
   15250:	movne	r1, #0
   15254:	strbne	r1, [r0]
   15258:	mov	r0, r4
   1525c:	mov	r1, #3
   15260:	bl	1ebcc <flatcc_builder_start_table@@Base>
   15264:	movw	r1, #17866	; 0x45ca
   15268:	mov	r0, r4
   1526c:	mov	r2, #0
   15270:	movt	r1, #2
   15274:	bl	1f4cc <flatcc_builder_check_required@@Base>
   15278:	cmp	r0, #0
   1527c:	beq	15384 <gen_monster@@Base+0x9a0>
   15280:	mov	r0, r4
   15284:	bl	1f55c <flatcc_builder_end_table@@Base>
   15288:	cmp	r0, #0
   1528c:	beq	152a8 <gen_monster@@Base+0x8c4>
   15290:	mov	r5, r0
   15294:	mov	r0, r4
   15298:	mov	r1, #14
   1529c:	bl	1fd60 <flatcc_builder_table_add_offset@@Base>
   152a0:	cmp	r0, #0
   152a4:	strne	r5, [r0]
   152a8:	movw	r1, #17860	; 0x45c4
   152ac:	mov	r0, r4
   152b0:	mov	r2, #1
   152b4:	movt	r1, #2
   152b8:	bl	1f4cc <flatcc_builder_check_required@@Base>
   152bc:	cmp	r0, #0
   152c0:	beq	152e4 <gen_monster@@Base+0x900>
   152c4:	mov	r0, r4
   152c8:	bl	1f55c <flatcc_builder_end_table@@Base>
   152cc:	mov	r1, r0
   152d0:	mov	r0, r4
   152d4:	bl	1dd40 <flatcc_builder_end_buffer@@Base>
   152d8:	mov	r0, #0
   152dc:	sub	sp, fp, #16
   152e0:	pop	{r4, r5, r6, sl, fp, pc}
   152e4:	movw	r0, #13899	; 0x364b
   152e8:	movw	r1, #13609	; 0x3529
   152ec:	movw	r3, #14061	; 0x36ed
   152f0:	mov	r2, #235	; 0xeb
   152f4:	movt	r0, #2
   152f8:	movt	r1, #2
   152fc:	movt	r3, #2
   15300:	bl	12f88 <__assert_fail@plt>
   15304:	movw	r0, #10769	; 0x2a11
   15308:	movw	r1, #10320	; 0x2850
   1530c:	movw	r3, #10808	; 0x2a38
   15310:	movw	r2, #881	; 0x371
   15314:	movt	r0, #2
   15318:	movt	r1, #2
   1531c:	movt	r3, #2
   15320:	bl	12f88 <__assert_fail@plt>
   15324:	movw	r0, #10849	; 0x2a61
   15328:	movw	r1, #10320	; 0x2850
   1532c:	movw	r3, #10808	; 0x2a38
   15330:	movw	r2, #883	; 0x373
   15334:	movt	r0, #2
   15338:	movt	r1, #2
   1533c:	movt	r3, #2
   15340:	bl	12f88 <__assert_fail@plt>
   15344:	movw	r0, #10888	; 0x2a88
   15348:	movw	r1, #10320	; 0x2850
   1534c:	movw	r3, #10808	; 0x2a38
   15350:	movw	r2, #923	; 0x39b
   15354:	movt	r0, #2
   15358:	movt	r1, #2
   1535c:	movt	r3, #2
   15360:	bl	12f88 <__assert_fail@plt>
   15364:	movw	r0, #10967	; 0x2ad7
   15368:	movw	r1, #10320	; 0x2850
   1536c:	movw	r3, #10808	; 0x2a38
   15370:	movw	r2, #929	; 0x3a1
   15374:	movt	r0, #2
   15378:	movt	r1, #2
   1537c:	movt	r3, #2
   15380:	bl	12f88 <__assert_fail@plt>
   15384:	movw	r0, #15304	; 0x3bc8
   15388:	movw	r1, #13609	; 0x3529
   1538c:	movw	r3, #15457	; 0x3c61
   15390:	mov	r2, #221	; 0xdd
   15394:	movt	r0, #2
   15398:	movt	r1, #2
   1539c:	movt	r3, #2
   153a0:	bl	12f88 <__assert_fail@plt>

000153a4 <test_monster@@Base>:
   153a4:	push	{r4, r5, fp, lr}
   153a8:	add	fp, sp, #8
   153ac:	sub	sp, sp, #8
   153b0:	mov	r1, #0
   153b4:	mov	r4, r0
   153b8:	bl	149e4 <gen_monster@@Base>
   153bc:	add	r1, sp, #4
   153c0:	mov	r0, r4
   153c4:	bl	20c50 <flatcc_builder_finalize_aligned_buffer@@Base>
   153c8:	mov	r4, r0
   153cc:	movw	r0, #32880	; 0x8070
   153d0:	ldr	r2, [sp, #4]
   153d4:	movt	r0, #3
   153d8:	mov	r1, r4
   153dc:	ldr	r3, [r0]
   153e0:	movw	r0, #9983	; 0x26ff
   153e4:	movt	r0, #2
   153e8:	bl	1365c <test_type_aliases@@Base+0x51c>
   153ec:	ldr	r1, [sp, #4]
   153f0:	movw	r2, #9828	; 0x2664
   153f4:	movw	r3, #50112	; 0xc3c0
   153f8:	mov	r0, r4
   153fc:	movt	r2, #2
   15400:	movt	r3, #1
   15404:	bl	21de0 <flatcc_verify_table_as_root@@Base>
   15408:	cmp	r0, #0
   1540c:	beq	1542c <test_monster@@Base+0x88>
   15410:	bl	21350 <flatcc_verify_error_string@@Base>
   15414:	mov	r1, r0
   15418:	movw	r0, #11027	; 0x2b13
   1541c:	movt	r0, #2
   15420:	bl	12e98 <printf@plt>
   15424:	mvn	r5, #0
   15428:	b	15440 <test_monster@@Base+0x9c>
   1542c:	mov	r0, r4
   15430:	bl	13ed4 <verify_monster@@Base>
   15434:	mov	r5, r0
   15438:	mov	r0, r4
   1543c:	bl	20d50 <flatcc_builder_aligned_free@@Base>
   15440:	mov	r0, r5
   15444:	sub	sp, fp, #8
   15448:	pop	{r4, r5, fp, pc}

0001544c <test_monster_with_size@@Base>:
   1544c:	push	{r4, r5, fp, lr}
   15450:	add	fp, sp, #8
   15454:	sub	sp, sp, #8
   15458:	mov	r1, #1
   1545c:	mov	r4, r0
   15460:	bl	149e4 <gen_monster@@Base>
   15464:	add	r1, sp, #4
   15468:	mov	r0, r4
   1546c:	bl	20c50 <flatcc_builder_finalize_aligned_buffer@@Base>
   15470:	mov	r4, r0
   15474:	movw	r0, #32880	; 0x8070
   15478:	ldr	r2, [sp, #4]
   1547c:	movt	r0, #3
   15480:	mov	r1, r4
   15484:	ldr	r3, [r0]
   15488:	movw	r0, #11069	; 0x2b3d
   1548c:	movt	r0, #2
   15490:	bl	1365c <test_type_aliases@@Base+0x51c>
   15494:	tst	r4, #15
   15498:	beq	154bc <test_monster_with_size@@Base+0x70>
   1549c:	movw	r0, #11093	; 0x2b55
   154a0:	movt	r0, #2
   154a4:	bl	12e98 <printf@plt>
   154a8:	movw	r0, #11174	; 0x2ba6
   154ac:	mov	r1, r4
   154b0:	movt	r0, #2
   154b4:	bl	12e98 <printf@plt>
   154b8:	b	15514 <test_monster_with_size@@Base+0xc8>
   154bc:	mov	r5, r4
   154c0:	ldr	r0, [sp, #4]
   154c4:	ldr	r1, [r5], #4
   154c8:	sub	r2, r0, #4
   154cc:	cmp	r1, r2
   154d0:	bne	15508 <test_monster_with_size@@Base+0xbc>
   154d4:	movw	r2, #9828	; 0x2664
   154d8:	movw	r3, #50112	; 0xc3c0
   154dc:	mov	r0, r5
   154e0:	movt	r2, #2
   154e4:	movt	r3, #1
   154e8:	bl	21de0 <flatcc_verify_table_as_root@@Base>
   154ec:	cmp	r0, #0
   154f0:	beq	15524 <test_monster_with_size@@Base+0xd8>
   154f4:	bl	21350 <flatcc_verify_error_string@@Base>
   154f8:	mov	r1, r0
   154fc:	movw	r0, #11248	; 0x2bf0
   15500:	movt	r0, #2
   15504:	b	154b4 <test_monster_with_size@@Base+0x68>
   15508:	movw	r0, #11194	; 0x2bba
   1550c:	movt	r0, #2
   15510:	bl	12e98 <printf@plt>
   15514:	mvn	r5, #0
   15518:	mov	r0, r5
   1551c:	sub	sp, fp, #8
   15520:	pop	{r4, r5, fp, pc}
   15524:	mov	r0, r5
   15528:	bl	13ed4 <verify_monster@@Base>
   1552c:	mov	r5, r0
   15530:	mov	r0, r4
   15534:	bl	20d50 <flatcc_builder_aligned_free@@Base>
   15538:	b	15518 <test_monster_with_size@@Base+0xcc>

0001553c <test_string@@Base>:
   1553c:	push	{r4, r5, fp, lr}
   15540:	add	fp, sp, #8
   15544:	mov	r4, r0
   15548:	bl	1d2e4 <flatcc_builder_reset@@Base>
   1554c:	movw	r1, #9828	; 0x2664
   15550:	mov	r0, r4
   15554:	mov	r2, #0
   15558:	mov	r3, #0
   1555c:	movt	r1, #2
   15560:	bl	1db50 <flatcc_builder_start_buffer@@Base>
   15564:	cmp	r0, #0
   15568:	bne	15578 <test_string@@Base+0x3c>
   1556c:	mov	r0, r4
   15570:	mov	r1, #36	; 0x24
   15574:	bl	1ebcc <flatcc_builder_start_table@@Base>
   15578:	mov	r0, r4
   1557c:	bl	1ea30 <flatcc_builder_start_string@@Base>
   15580:	mov	r0, r4
   15584:	mov	r1, #3
   15588:	bl	1e448 <flatcc_builder_extend_string@@Base>
   1558c:	movw	r1, #12849	; 0x3231
   15590:	strh	r1, [r0]
   15594:	mov	r1, #51	; 0x33
   15598:	strb	r1, [r0, #2]
   1559c:	movw	r1, #11343	; 0x2c4f
   155a0:	mov	r0, r4
   155a4:	movt	r1, #2
   155a8:	bl	1e5cc <flatcc_builder_append_string_str@@Base>
   155ac:	mov	r0, r4
   155b0:	bl	209b4 <flatcc_builder_string_len@@Base>
   155b4:	cmp	r0, #4
   155b8:	bne	15718 <test_string@@Base+0x1dc>
   155bc:	movw	r1, #11381	; 0x2c75
   155c0:	mov	r0, r4
   155c4:	mov	r2, #30
   155c8:	movt	r1, #2
   155cc:	bl	1e5f8 <flatcc_builder_append_string_strn@@Base>
   155d0:	mov	r0, r4
   155d4:	bl	209b4 <flatcc_builder_string_len@@Base>
   155d8:	cmp	r0, #8
   155dc:	bne	15738 <test_string@@Base+0x1fc>
   155e0:	movw	r1, #11424	; 0x2ca0
   155e4:	mov	r0, r4
   155e8:	mov	r2, #2
   155ec:	movt	r1, #2
   155f0:	bl	1e4f8 <flatcc_builder_append_string@@Base>
   155f4:	mov	r0, r4
   155f8:	bl	209b4 <flatcc_builder_string_len@@Base>
   155fc:	cmp	r0, #10
   15600:	bne	15758 <test_string@@Base+0x21c>
   15604:	mov	r0, r4
   15608:	mov	r1, #3
   1560c:	bl	1e76c <flatcc_builder_truncate_string@@Base>
   15610:	mov	r0, r4
   15614:	bl	209b4 <flatcc_builder_string_len@@Base>
   15618:	cmp	r0, #7
   1561c:	bne	15778 <test_string@@Base+0x23c>
   15620:	mov	r0, r4
   15624:	bl	209ac <flatcc_builder_string_edit@@Base>
   15628:	mov	r1, #46	; 0x2e
   1562c:	strb	r1, [r0, #4]
   15630:	mov	r0, r4
   15634:	bl	208ac <flatcc_builder_end_string@@Base>
   15638:	cmp	r0, #0
   1563c:	beq	15658 <test_string@@Base+0x11c>
   15640:	mov	r5, r0
   15644:	mov	r0, r4
   15648:	mov	r1, #3
   1564c:	bl	1fd60 <flatcc_builder_table_add_offset@@Base>
   15650:	cmp	r0, #0
   15654:	strne	r5, [r0]
   15658:	movw	r1, #17860	; 0x45c4
   1565c:	mov	r0, r4
   15660:	mov	r2, #1
   15664:	movt	r1, #2
   15668:	bl	1f4cc <flatcc_builder_check_required@@Base>
   1566c:	cmp	r0, #0
   15670:	beq	15798 <test_string@@Base+0x25c>
   15674:	mov	r0, r4
   15678:	bl	1f55c <flatcc_builder_end_table@@Base>
   1567c:	mov	r1, r0
   15680:	mov	r0, r4
   15684:	bl	1dd40 <flatcc_builder_end_buffer@@Base>
   15688:	mov	r0, r4
   1568c:	mov	r1, #0
   15690:	bl	20b34 <flatcc_builder_get_direct_buffer@@Base>
   15694:	cmp	r0, #0
   15698:	beq	157b8 <test_string@@Base+0x27c>
   1569c:	ldr	r1, [r0, #4]
   156a0:	movw	r2, #20301	; 0x4f4d
   156a4:	movt	r2, #21326	; 0x534e
   156a8:	cmp	r1, r2
   156ac:	bne	157d8 <test_string@@Base+0x29c>
   156b0:	ldr	r1, [r0]
   156b4:	ldr	r2, [r0, r1]!
   156b8:	mov	r1, r0
   156bc:	ldrh	r2, [r1, -r2]!	; <UNPREDICTABLE>
   156c0:	cmp	r2, #11
   156c4:	bls	1570c <test_string@@Base+0x1d0>
   156c8:	ldrh	r1, [r1, #10]
   156cc:	cmp	r1, #0
   156d0:	beq	1570c <test_string@@Base+0x1d0>
   156d4:	ldr	r1, [r0, r1]!
   156d8:	add	r0, r0, r1
   156dc:	movw	r1, #11504	; 0x2cf0
   156e0:	add	r0, r0, #4
   156e4:	movt	r1, #2
   156e8:	bl	12e8c <strcmp@plt>
   156ec:	cmp	r0, #0
   156f0:	moveq	r0, #0
   156f4:	popeq	{r4, r5, fp, pc}
   156f8:	movw	r0, #19808	; 0x4d60
   156fc:	movt	r0, #2
   15700:	bl	12eec <puts@plt>
   15704:	mvn	r0, #0
   15708:	pop	{r4, r5, fp, pc}
   1570c:	movw	r0, #14511	; 0x38af
   15710:	movt	r0, #2
   15714:	b	157e0 <test_string@@Base+0x2a4>
   15718:	movw	r0, #11307	; 0x2c2b
   1571c:	movw	r1, #10320	; 0x2850
   15720:	movw	r3, #11345	; 0x2c51
   15724:	movw	r2, #1080	; 0x438
   15728:	movt	r0, #2
   1572c:	movt	r1, #2
   15730:	movt	r3, #2
   15734:	bl	12f88 <__assert_fail@plt>
   15738:	movw	r0, #11386	; 0x2c7a
   1573c:	movw	r1, #10320	; 0x2850
   15740:	movw	r3, #11345	; 0x2c51
   15744:	movw	r2, #1082	; 0x43a
   15748:	movt	r0, #2
   1574c:	movt	r1, #2
   15750:	movt	r3, #2
   15754:	bl	12f88 <__assert_fail@plt>
   15758:	movw	r0, #11427	; 0x2ca3
   1575c:	movw	r1, #10320	; 0x2850
   15760:	movw	r3, #11345	; 0x2c51
   15764:	movw	r2, #1084	; 0x43c
   15768:	movt	r0, #2
   1576c:	movt	r1, #2
   15770:	movt	r3, #2
   15774:	bl	12f88 <__assert_fail@plt>
   15778:	movw	r0, #11466	; 0x2cca
   1577c:	movw	r1, #10320	; 0x2850
   15780:	movw	r3, #11345	; 0x2c51
   15784:	movw	r2, #1086	; 0x43e
   15788:	movt	r0, #2
   1578c:	movt	r1, #2
   15790:	movt	r3, #2
   15794:	bl	12f88 <__assert_fail@plt>
   15798:	movw	r0, #13899	; 0x364b
   1579c:	movw	r1, #13609	; 0x3529
   157a0:	movw	r3, #14061	; 0x36ed
   157a4:	mov	r2, #235	; 0xeb
   157a8:	movt	r0, #2
   157ac:	movt	r1, #2
   157b0:	movt	r3, #2
   157b4:	bl	12f88 <__assert_fail@plt>
   157b8:	movw	r0, #11792	; 0x2e10
   157bc:	movw	r1, #10320	; 0x2850
   157c0:	movw	r3, #11345	; 0x2c51
   157c4:	movw	r2, #1093	; 0x445
   157c8:	movt	r0, #2
   157cc:	movt	r1, #2
   157d0:	movt	r3, #2
   157d4:	bl	12f88 <__assert_fail@plt>
   157d8:	movw	r0, #13160	; 0x3368
   157dc:	movt	r0, #2
   157e0:	movw	r1, #13198	; 0x338e
   157e4:	movw	r3, #14430	; 0x385e
   157e8:	movw	r2, #699	; 0x2bb
   157ec:	movt	r1, #2
   157f0:	movt	r3, #2
   157f4:	bl	12f88 <__assert_fail@plt>

000157f8 <test_sort_find@@Base>:
   157f8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   157fc:	add	fp, sp, #28
   15800:	sub	sp, sp, #20
   15804:	mov	r4, r0
   15808:	bl	1d2e4 <flatcc_builder_reset@@Base>
   1580c:	movw	r1, #9828	; 0x2664
   15810:	mov	r0, r4
   15814:	mov	r2, #0
   15818:	mov	r3, #0
   1581c:	movt	r1, #2
   15820:	bl	1db50 <flatcc_builder_start_buffer@@Base>
   15824:	cmp	r0, #0
   15828:	bne	15838 <test_sort_find@@Base+0x40>
   1582c:	mov	r0, r4
   15830:	mov	r1, #36	; 0x24
   15834:	bl	1ebcc <flatcc_builder_start_table@@Base>
   15838:	movw	r1, #9896	; 0x26a8
   1583c:	mov	r0, r4
   15840:	movt	r1, #2
   15844:	bl	20844 <flatcc_builder_create_string_str@@Base>
   15848:	cmp	r0, #0
   1584c:	beq	15868 <test_sort_find@@Base+0x70>
   15850:	mov	r5, r0
   15854:	mov	r0, r4
   15858:	mov	r1, #3
   1585c:	bl	1fd60 <flatcc_builder_table_add_offset@@Base>
   15860:	cmp	r0, #0
   15864:	strne	r5, [r0]
   15868:	mov	r0, r4
   1586c:	bl	1e88c <flatcc_builder_start_offset_vector@@Base>
   15870:	mov	r0, r4
   15874:	mov	r1, #36	; 0x24
   15878:	bl	1ebcc <flatcc_builder_start_table@@Base>
   1587c:	movw	r1, #10417	; 0x28b1
   15880:	mov	r0, r4
   15884:	movt	r1, #2
   15888:	bl	20844 <flatcc_builder_create_string_str@@Base>
   1588c:	cmp	r0, #0
   15890:	beq	158ac <test_sort_find@@Base+0xb4>
   15894:	mov	r5, r0
   15898:	mov	r0, r4
   1589c:	mov	r1, #3
   158a0:	bl	1fd60 <flatcc_builder_table_add_offset@@Base>
   158a4:	cmp	r0, #0
   158a8:	strne	r5, [r0]
   158ac:	movw	r1, #17860	; 0x45c4
   158b0:	mov	r0, r4
   158b4:	mov	r2, #1
   158b8:	movt	r1, #2
   158bc:	bl	1f4cc <flatcc_builder_check_required@@Base>
   158c0:	cmp	r0, #0
   158c4:	beq	162c4 <test_sort_find@@Base+0xacc>
   158c8:	mov	r0, r4
   158cc:	bl	1f55c <flatcc_builder_end_table@@Base>
   158d0:	cmp	r0, #0
   158d4:	beq	158e4 <test_sort_find@@Base+0xec>
   158d8:	mov	r1, r0
   158dc:	mov	r0, r4
   158e0:	bl	1e2d0 <flatcc_builder_offset_vector_push@@Base>
   158e4:	mov	r0, r4
   158e8:	mov	r1, #36	; 0x24
   158ec:	bl	1ebcc <flatcc_builder_start_table@@Base>
   158f0:	movw	r1, #10459	; 0x28db
   158f4:	mov	r0, r4
   158f8:	movt	r1, #2
   158fc:	bl	20844 <flatcc_builder_create_string_str@@Base>
   15900:	cmp	r0, #0
   15904:	beq	15920 <test_sort_find@@Base+0x128>
   15908:	mov	r5, r0
   1590c:	mov	r0, r4
   15910:	mov	r1, #3
   15914:	bl	1fd60 <flatcc_builder_table_add_offset@@Base>
   15918:	cmp	r0, #0
   1591c:	strne	r5, [r0]
   15920:	movw	r1, #17860	; 0x45c4
   15924:	mov	r0, r4
   15928:	mov	r2, #1
   1592c:	movt	r1, #2
   15930:	bl	1f4cc <flatcc_builder_check_required@@Base>
   15934:	cmp	r0, #0
   15938:	beq	162c4 <test_sort_find@@Base+0xacc>
   1593c:	mov	r0, r4
   15940:	bl	1f55c <flatcc_builder_end_table@@Base>
   15944:	cmp	r0, #0
   15948:	beq	15958 <test_sort_find@@Base+0x160>
   1594c:	mov	r1, r0
   15950:	mov	r0, r4
   15954:	bl	1e2d0 <flatcc_builder_offset_vector_push@@Base>
   15958:	mov	r0, r4
   1595c:	mov	r1, #36	; 0x24
   15960:	bl	1ebcc <flatcc_builder_start_table@@Base>
   15964:	movw	r1, #10499	; 0x2903
   15968:	mov	r0, r4
   1596c:	movt	r1, #2
   15970:	bl	20844 <flatcc_builder_create_string_str@@Base>
   15974:	cmp	r0, #0
   15978:	beq	15994 <test_sort_find@@Base+0x19c>
   1597c:	mov	r5, r0
   15980:	mov	r0, r4
   15984:	mov	r1, #3
   15988:	bl	1fd60 <flatcc_builder_table_add_offset@@Base>
   1598c:	cmp	r0, #0
   15990:	strne	r5, [r0]
   15994:	movw	r1, #17860	; 0x45c4
   15998:	mov	r0, r4
   1599c:	mov	r2, #1
   159a0:	movt	r1, #2
   159a4:	bl	1f4cc <flatcc_builder_check_required@@Base>
   159a8:	cmp	r0, #0
   159ac:	beq	162c4 <test_sort_find@@Base+0xacc>
   159b0:	mov	r0, r4
   159b4:	bl	1f55c <flatcc_builder_end_table@@Base>
   159b8:	cmp	r0, #0
   159bc:	beq	159cc <test_sort_find@@Base+0x1d4>
   159c0:	mov	r1, r0
   159c4:	mov	r0, r4
   159c8:	bl	1e2d0 <flatcc_builder_offset_vector_push@@Base>
   159cc:	mov	r0, r4
   159d0:	mov	r1, #36	; 0x24
   159d4:	bl	1ebcc <flatcc_builder_start_table@@Base>
   159d8:	movw	r1, #11512	; 0x2cf8
   159dc:	mov	r0, r4
   159e0:	movt	r1, #2
   159e4:	bl	20844 <flatcc_builder_create_string_str@@Base>
   159e8:	cmp	r0, #0
   159ec:	beq	15a08 <test_sort_find@@Base+0x210>
   159f0:	mov	r5, r0
   159f4:	mov	r0, r4
   159f8:	mov	r1, #3
   159fc:	bl	1fd60 <flatcc_builder_table_add_offset@@Base>
   15a00:	cmp	r0, #0
   15a04:	strne	r5, [r0]
   15a08:	movw	r1, #17860	; 0x45c4
   15a0c:	mov	r0, r4
   15a10:	mov	r2, #1
   15a14:	movt	r1, #2
   15a18:	bl	1f4cc <flatcc_builder_check_required@@Base>
   15a1c:	cmp	r0, #0
   15a20:	beq	162c4 <test_sort_find@@Base+0xacc>
   15a24:	mov	r0, r4
   15a28:	bl	1f55c <flatcc_builder_end_table@@Base>
   15a2c:	cmp	r0, #0
   15a30:	beq	15a40 <test_sort_find@@Base+0x248>
   15a34:	mov	r1, r0
   15a38:	mov	r0, r4
   15a3c:	bl	1e2d0 <flatcc_builder_offset_vector_push@@Base>
   15a40:	mov	r0, r4
   15a44:	mov	r1, #36	; 0x24
   15a48:	bl	1ebcc <flatcc_builder_start_table@@Base>
   15a4c:	movw	r1, #10499	; 0x2903
   15a50:	mov	r0, r4
   15a54:	movt	r1, #2
   15a58:	bl	20844 <flatcc_builder_create_string_str@@Base>
   15a5c:	cmp	r0, #0
   15a60:	beq	15a7c <test_sort_find@@Base+0x284>
   15a64:	mov	r5, r0
   15a68:	mov	r0, r4
   15a6c:	mov	r1, #3
   15a70:	bl	1fd60 <flatcc_builder_table_add_offset@@Base>
   15a74:	cmp	r0, #0
   15a78:	strne	r5, [r0]
   15a7c:	movw	r1, #17860	; 0x45c4
   15a80:	mov	r0, r4
   15a84:	mov	r2, #1
   15a88:	movt	r1, #2
   15a8c:	bl	1f4cc <flatcc_builder_check_required@@Base>
   15a90:	cmp	r0, #0
   15a94:	beq	162c4 <test_sort_find@@Base+0xacc>
   15a98:	mov	r0, r4
   15a9c:	bl	1f55c <flatcc_builder_end_table@@Base>
   15aa0:	cmp	r0, #0
   15aa4:	beq	15ab4 <test_sort_find@@Base+0x2bc>
   15aa8:	mov	r1, r0
   15aac:	mov	r0, r4
   15ab0:	bl	1e2d0 <flatcc_builder_offset_vector_push@@Base>
   15ab4:	mov	r0, r4
   15ab8:	bl	1e958 <flatcc_builder_end_offset_vector@@Base>
   15abc:	cmp	r0, #0
   15ac0:	beq	15adc <test_sort_find@@Base+0x2e4>
   15ac4:	mov	r5, r0
   15ac8:	mov	r0, r4
   15acc:	mov	r1, #11
   15ad0:	bl	1fd60 <flatcc_builder_table_add_offset@@Base>
   15ad4:	cmp	r0, #0
   15ad8:	strne	r5, [r0]
   15adc:	movw	r1, #17860	; 0x45c4
   15ae0:	mov	r0, r4
   15ae4:	mov	r2, #1
   15ae8:	movt	r1, #2
   15aec:	bl	1f4cc <flatcc_builder_check_required@@Base>
   15af0:	cmp	r0, #0
   15af4:	beq	162c4 <test_sort_find@@Base+0xacc>
   15af8:	mov	r0, r4
   15afc:	bl	1f55c <flatcc_builder_end_table@@Base>
   15b00:	mov	r1, r0
   15b04:	mov	r0, r4
   15b08:	bl	1dd40 <flatcc_builder_end_buffer@@Base>
   15b0c:	add	r1, sp, #16
   15b10:	mov	r0, r4
   15b14:	bl	20c50 <flatcc_builder_finalize_aligned_buffer@@Base>
   15b18:	movw	r9, #32880	; 0x8070
   15b1c:	ldr	r2, [sp, #16]
   15b20:	mov	r4, r0
   15b24:	movw	r0, #11518	; 0x2cfe
   15b28:	movt	r9, #3
   15b2c:	movt	r0, #2
   15b30:	mov	r1, r4
   15b34:	ldr	r3, [r9]
   15b38:	bl	1365c <test_type_aliases@@Base+0x51c>
   15b3c:	cmp	r4, #0
   15b40:	beq	162e4 <test_sort_find@@Base+0xaec>
   15b44:	ldr	r0, [r4, #4]
   15b48:	movw	r1, #20301	; 0x4f4d
   15b4c:	movt	r1, #21326	; 0x534e
   15b50:	cmp	r0, r1
   15b54:	bne	162e4 <test_sort_find@@Base+0xaec>
   15b58:	ldr	r1, [r4]
   15b5c:	str	r4, [sp, #12]
   15b60:	ldr	r2, [r4, r1]!
   15b64:	str	r1, [sp, #8]
   15b68:	mov	r1, r4
   15b6c:	ldrh	r2, [r1, -r2]!	; <UNPREDICTABLE>
   15b70:	cmp	r2, #27
   15b74:	bls	16304 <test_sort_find@@Base+0xb0c>
   15b78:	ldrh	r1, [r1, #26]
   15b7c:	cmp	r1, #0
   15b80:	beq	16304 <test_sort_find@@Base+0xb0c>
   15b84:	str	r1, [sp, #4]
   15b88:	ldr	r1, [r4, r1]!
   15b8c:	ldr	sl, [r4, r1]!
   15b90:	str	r1, [sp]
   15b94:	add	r5, r4, #4
   15b98:	cmp	sl, #0
   15b9c:	beq	15c3c <test_sort_find@@Base+0x444>
   15ba0:	lsr	r7, sl, #1
   15ba4:	sub	r6, sl, #1
   15ba8:	mov	r0, r5
   15bac:	mov	r1, r7
   15bb0:	mov	r2, r6
   15bb4:	bl	1cd2c <main@@Base+0xc84>
   15bb8:	sub	r7, r7, #1
   15bbc:	cmn	r7, #1
   15bc0:	bne	15ba8 <test_sort_find@@Base+0x3b0>
   15bc4:	cmp	r6, #0
   15bc8:	beq	15c3c <test_sort_find@@Base+0x444>
   15bcc:	mvn	r0, #3
   15bd0:	ldr	r1, [sp]
   15bd4:	sub	r6, sl, #2
   15bd8:	add	r7, r0, sl, lsl #2
   15bdc:	mov	r0, #4
   15be0:	sub	r8, r0, sl, lsl #2
   15be4:	ldr	r0, [sp, #8]
   15be8:	add	r0, r1, r0
   15bec:	ldr	r1, [sp, #4]
   15bf0:	add	r0, r0, sl, lsl #2
   15bf4:	add	r0, r0, r1
   15bf8:	ldr	r1, [sp, #12]
   15bfc:	add	r4, r1, r0
   15c00:	ldr	r0, [r4]
   15c04:	ldr	r1, [r5]
   15c08:	mov	r2, r6
   15c0c:	add	r0, r7, r0
   15c10:	str	r0, [r5]
   15c14:	add	r0, r8, r1
   15c18:	mov	r1, #0
   15c1c:	str	r0, [r4], #-4
   15c20:	mov	r0, r5
   15c24:	bl	1cd2c <main@@Base+0xc84>
   15c28:	sub	r6, r6, #1
   15c2c:	sub	r7, r7, #4
   15c30:	add	r8, r8, #4
   15c34:	cmn	r6, #1
   15c38:	bne	15c00 <test_sort_find@@Base+0x408>
   15c3c:	ldr	r4, [sp, #12]
   15c40:	ldr	r3, [r9]
   15c44:	ldr	r2, [sp, #16]
   15c48:	movw	r0, #11520	; 0x2d00
   15c4c:	movt	r0, #2
   15c50:	mov	r1, r4
   15c54:	bl	1365c <test_type_aliases@@Base+0x51c>
   15c58:	ldr	r0, [r5, #-4]
   15c5c:	cmp	r0, #5
   15c60:	bne	15cb8 <test_sort_find@@Base+0x4c0>
   15c64:	ldr	r1, [r5]
   15c68:	mov	r0, r5
   15c6c:	ldr	r2, [r0, r1]!
   15c70:	mov	r1, r0
   15c74:	ldrh	r2, [r1, -r2]!	; <UNPREDICTABLE>
   15c78:	cmp	r2, #12
   15c7c:	bcc	16324 <test_sort_find@@Base+0xb2c>
   15c80:	ldrh	r1, [r1, #10]
   15c84:	cmp	r1, #0
   15c88:	beq	16324 <test_sort_find@@Base+0xb2c>
   15c8c:	ldr	r1, [r0, r1]!
   15c90:	add	r0, r0, r1
   15c94:	movw	r1, #11512	; 0x2cf8
   15c98:	add	r0, r0, #4
   15c9c:	movt	r1, #2
   15ca0:	bl	12e8c <strcmp@plt>
   15ca4:	cmp	r0, #0
   15ca8:	beq	15cdc <test_sort_find@@Base+0x4e4>
   15cac:	movw	r0, #20240	; 0x4f10
   15cb0:	movt	r0, #2
   15cb4:	b	15cc0 <test_sort_find@@Base+0x4c8>
   15cb8:	movw	r0, #20272	; 0x4f30
   15cbc:	movt	r0, #2
   15cc0:	bl	12eec <puts@plt>
   15cc4:	mvn	r6, #0
   15cc8:	mov	r0, r4
   15ccc:	bl	20d50 <flatcc_builder_aligned_free@@Base>
   15cd0:	mov	r0, r6
   15cd4:	sub	sp, fp, #28
   15cd8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15cdc:	mov	r6, r5
   15ce0:	ldr	r0, [r6, #4]!
   15ce4:	ldr	r1, [r6, r0]!
   15ce8:	mov	r0, r6
   15cec:	ldrh	r1, [r0, -r1]!	; <UNPREDICTABLE>
   15cf0:	cmp	r1, #12
   15cf4:	bcc	16324 <test_sort_find@@Base+0xb2c>
   15cf8:	ldrh	r0, [r0, #10]
   15cfc:	cmp	r0, #0
   15d00:	beq	16324 <test_sort_find@@Base+0xb2c>
   15d04:	mov	r1, r6
   15d08:	ldr	r0, [r1, r0]!
   15d0c:	add	r0, r1, r0
   15d10:	movw	r1, #10499	; 0x2903
   15d14:	add	r0, r0, #4
   15d18:	movt	r1, #2
   15d1c:	bl	12e8c <strcmp@plt>
   15d20:	cmp	r0, #0
   15d24:	beq	15d34 <test_sort_find@@Base+0x53c>
   15d28:	movw	r0, #20208	; 0x4ef0
   15d2c:	movt	r0, #2
   15d30:	b	15cc0 <test_sort_find@@Base+0x4c8>
   15d34:	mov	r7, r5
   15d38:	ldr	r0, [r7, #8]!
   15d3c:	ldr	r1, [r7, r0]!
   15d40:	mov	r0, r7
   15d44:	ldrh	r1, [r0, -r1]!	; <UNPREDICTABLE>
   15d48:	cmp	r1, #12
   15d4c:	bcc	16324 <test_sort_find@@Base+0xb2c>
   15d50:	ldrh	r0, [r0, #10]
   15d54:	cmp	r0, #0
   15d58:	beq	16324 <test_sort_find@@Base+0xb2c>
   15d5c:	mov	r1, r7
   15d60:	ldr	r0, [r1, r0]!
   15d64:	add	r0, r1, r0
   15d68:	movw	r1, #10499	; 0x2903
   15d6c:	add	r0, r0, #4
   15d70:	movt	r1, #2
   15d74:	bl	12e8c <strcmp@plt>
   15d78:	cmp	r0, #0
   15d7c:	beq	15d8c <test_sort_find@@Base+0x594>
   15d80:	movw	r0, #20176	; 0x4ed0
   15d84:	movt	r0, #2
   15d88:	b	15cc0 <test_sort_find@@Base+0x4c8>
   15d8c:	mov	r0, r5
   15d90:	ldr	r1, [r0, #12]!
   15d94:	ldr	r2, [r0, r1]!
   15d98:	mov	r1, r0
   15d9c:	ldrh	r2, [r1, -r2]!	; <UNPREDICTABLE>
   15da0:	cmp	r2, #12
   15da4:	bcc	16324 <test_sort_find@@Base+0xb2c>
   15da8:	ldrh	r1, [r1, #10]
   15dac:	cmp	r1, #0
   15db0:	beq	16324 <test_sort_find@@Base+0xb2c>
   15db4:	ldr	r1, [r0, r1]!
   15db8:	add	r0, r0, r1
   15dbc:	movw	r1, #10459	; 0x28db
   15dc0:	add	r0, r0, #4
   15dc4:	movt	r1, #2
   15dc8:	bl	12e8c <strcmp@plt>
   15dcc:	cmp	r0, #0
   15dd0:	beq	15de0 <test_sort_find@@Base+0x5e8>
   15dd4:	movw	r0, #20144	; 0x4eb0
   15dd8:	movt	r0, #2
   15ddc:	b	15cc0 <test_sort_find@@Base+0x4c8>
   15de0:	mov	r0, r5
   15de4:	ldr	r1, [r0, #16]!
   15de8:	ldr	r2, [r0, r1]!
   15dec:	mov	r1, r0
   15df0:	ldrh	r2, [r1, -r2]!	; <UNPREDICTABLE>
   15df4:	cmp	r2, #12
   15df8:	bcc	16324 <test_sort_find@@Base+0xb2c>
   15dfc:	ldrh	r1, [r1, #10]
   15e00:	cmp	r1, #0
   15e04:	beq	16324 <test_sort_find@@Base+0xb2c>
   15e08:	ldr	r1, [r0, r1]!
   15e0c:	add	r0, r0, r1
   15e10:	movw	r1, #10417	; 0x28b1
   15e14:	add	r0, r0, #4
   15e18:	movt	r1, #2
   15e1c:	bl	12e8c <strcmp@plt>
   15e20:	cmp	r0, #0
   15e24:	beq	15e34 <test_sort_find@@Base+0x63c>
   15e28:	movw	r0, #20112	; 0x4e90
   15e2c:	movt	r0, #2
   15e30:	b	15cc0 <test_sort_find@@Base+0x4c8>
   15e34:	cmp	r6, r7
   15e38:	beq	15fb4 <test_sort_find@@Base+0x7bc>
   15e3c:	movw	r1, #10459	; 0x28db
   15e40:	mov	r0, r5
   15e44:	movt	r1, #2
   15e48:	bl	16370 <test_sort_find@@Base+0xb78>
   15e4c:	cmp	r0, #3
   15e50:	bne	15fc0 <test_sort_find@@Base+0x7c8>
   15e54:	ldr	r8, [r5, #-4]
   15e58:	cmp	r8, #0
   15e5c:	beq	15fa8 <test_sort_find@@Base+0x7b0>
   15e60:	mov	r7, #0
   15e64:	subs	r9, r8, #1
   15e68:	beq	15f1c <test_sort_find@@Base+0x724>
   15e6c:	movw	sl, #11590	; 0x2d46
   15e70:	movt	sl, #2
   15e74:	sub	r0, r9, r7
   15e78:	add	r6, r7, r0, lsr #1
   15e7c:	cmp	r8, r6
   15e80:	bls	16344 <test_sort_find@@Base+0xb4c>
   15e84:	mov	r0, r5
   15e88:	ldr	r1, [r0, r6, lsl #2]!
   15e8c:	adds	r0, r0, r1
   15e90:	beq	16364 <test_sort_find@@Base+0xb6c>
   15e94:	ldr	r2, [r0]
   15e98:	mov	r1, r0
   15e9c:	ldrh	r2, [r1, -r2]!	; <UNPREDICTABLE>
   15ea0:	cmp	r2, #12
   15ea4:	bcc	16324 <test_sort_find@@Base+0xb2c>
   15ea8:	ldrh	r1, [r1, #10]
   15eac:	cmp	r1, #0
   15eb0:	beq	16324 <test_sort_find@@Base+0xb2c>
   15eb4:	ldr	r1, [r0, r1]!
   15eb8:	ldr	r4, [r0, r1]!
   15ebc:	mov	r1, sl
   15ec0:	cmp	r4, #5
   15ec4:	mov	r2, r4
   15ec8:	add	r0, r0, #4
   15ecc:	movcs	r2, #5
   15ed0:	bl	12f70 <strncmp@plt>
   15ed4:	cmp	r0, #1
   15ed8:	mov	r1, #0
   15edc:	mov	r2, #0
   15ee0:	movwlt	r1, #1
   15ee4:	cmp	r0, #0
   15ee8:	movwne	r0, #1
   15eec:	cmp	r4, #5
   15ef0:	ldr	r4, [sp, #12]
   15ef4:	movwcc	r2, #1
   15ef8:	orr	r0, r2, r0
   15efc:	ands	r0, r0, r1
   15f00:	moveq	r9, r6
   15f04:	addne	r7, r6, #1
   15f08:	cmp	r9, r7
   15f0c:	bhi	15e74 <test_sort_find@@Base+0x67c>
   15f10:	bne	15fa8 <test_sort_find@@Base+0x7b0>
   15f14:	cmp	r8, r7
   15f18:	bls	16344 <test_sort_find@@Base+0xb4c>
   15f1c:	mov	r0, r5
   15f20:	ldr	r1, [r0, r7, lsl #2]!
   15f24:	adds	r0, r0, r1
   15f28:	beq	16364 <test_sort_find@@Base+0xb6c>
   15f2c:	ldr	r2, [r0]
   15f30:	mov	r1, r0
   15f34:	ldrh	r2, [r1, -r2]!	; <UNPREDICTABLE>
   15f38:	cmp	r2, #12
   15f3c:	bcc	16324 <test_sort_find@@Base+0xb2c>
   15f40:	ldrh	r1, [r1, #10]
   15f44:	cmp	r1, #0
   15f48:	beq	16324 <test_sort_find@@Base+0xb2c>
   15f4c:	ldr	r1, [r0, r1]!
   15f50:	ldr	r4, [r0, r1]!
   15f54:	movw	r1, #11590	; 0x2d46
   15f58:	movt	r1, #2
   15f5c:	cmp	r4, #5
   15f60:	mov	r2, r4
   15f64:	add	r0, r0, #4
   15f68:	movcs	r2, #5
   15f6c:	bl	12f70 <strncmp@plt>
   15f70:	cmp	r0, #0
   15f74:	mov	r2, r0
   15f78:	mov	r1, #0
   15f7c:	mvneq	r2, #0
   15f80:	cmp	r4, #5
   15f84:	movwhi	r1, #1
   15f88:	cmp	r0, #0
   15f8c:	movne	r1, r2
   15f90:	cmp	r4, #5
   15f94:	ldr	r4, [sp, #12]
   15f98:	movcc	r1, r2
   15f9c:	cmp	r7, #3
   15fa0:	cmpeq	r1, #0
   15fa4:	beq	15fcc <test_sort_find@@Base+0x7d4>
   15fa8:	movw	r0, #19920	; 0x4dd0
   15fac:	movt	r0, #2
   15fb0:	b	15cc0 <test_sort_find@@Base+0x4c8>
   15fb4:	movw	r0, #20032	; 0x4e40
   15fb8:	movt	r0, #2
   15fbc:	b	15cc0 <test_sort_find@@Base+0x4c8>
   15fc0:	movw	r0, #19984	; 0x4e10
   15fc4:	movt	r0, #2
   15fc8:	b	15cc0 <test_sort_find@@Base+0x4c8>
   15fcc:	movw	r1, #10459	; 0x28db
   15fd0:	mov	r0, r5
   15fd4:	movt	r1, #2
   15fd8:	bl	16370 <test_sort_find@@Base+0xb78>
   15fdc:	cmp	r0, #3
   15fe0:	bne	16144 <test_sort_find@@Base+0x94c>
   15fe4:	ldr	r8, [r5, #-4]
   15fe8:	cmp	r8, #0
   15fec:	beq	16138 <test_sort_find@@Base+0x940>
   15ff0:	mov	r7, #0
   15ff4:	subs	r9, r8, #1
   15ff8:	beq	160ac <test_sort_find@@Base+0x8b4>
   15ffc:	movw	sl, #11597	; 0x2d4d
   16000:	movt	sl, #2
   16004:	sub	r0, r9, r7
   16008:	add	r6, r7, r0, lsr #1
   1600c:	cmp	r8, r6
   16010:	bls	16344 <test_sort_find@@Base+0xb4c>
   16014:	mov	r0, r5
   16018:	ldr	r1, [r0, r6, lsl #2]!
   1601c:	adds	r0, r0, r1
   16020:	beq	16364 <test_sort_find@@Base+0xb6c>
   16024:	ldr	r2, [r0]
   16028:	mov	r1, r0
   1602c:	ldrh	r2, [r1, -r2]!	; <UNPREDICTABLE>
   16030:	cmp	r2, #12
   16034:	bcc	16324 <test_sort_find@@Base+0xb2c>
   16038:	ldrh	r1, [r1, #10]
   1603c:	cmp	r1, #0
   16040:	beq	16324 <test_sort_find@@Base+0xb2c>
   16044:	ldr	r1, [r0, r1]!
   16048:	ldr	r4, [r0, r1]!
   1604c:	mov	r1, sl
   16050:	cmp	r4, #5
   16054:	mov	r2, r4
   16058:	add	r0, r0, #4
   1605c:	movcs	r2, #5
   16060:	bl	12f70 <strncmp@plt>
   16064:	cmp	r0, #1
   16068:	mov	r1, #0
   1606c:	mov	r2, #0
   16070:	movwlt	r1, #1
   16074:	cmp	r0, #0
   16078:	movwne	r0, #1
   1607c:	cmp	r4, #5
   16080:	movwcc	r2, #1
   16084:	orr	r0, r2, r0
   16088:	ands	r0, r0, r1
   1608c:	moveq	r9, r6
   16090:	addne	r7, r6, #1
   16094:	cmp	r9, r7
   16098:	bhi	16004 <test_sort_find@@Base+0x80c>
   1609c:	ldr	r4, [sp, #12]
   160a0:	bne	16138 <test_sort_find@@Base+0x940>
   160a4:	cmp	r8, r7
   160a8:	bls	16344 <test_sort_find@@Base+0xb4c>
   160ac:	mov	r0, r5
   160b0:	ldr	r1, [r0, r7, lsl #2]!
   160b4:	adds	r0, r0, r1
   160b8:	beq	16364 <test_sort_find@@Base+0xb6c>
   160bc:	ldr	r2, [r0]
   160c0:	mov	r1, r0
   160c4:	ldrh	r2, [r1, -r2]!	; <UNPREDICTABLE>
   160c8:	cmp	r2, #12
   160cc:	bcc	16324 <test_sort_find@@Base+0xb2c>
   160d0:	ldrh	r1, [r1, #10]
   160d4:	cmp	r1, #0
   160d8:	beq	16324 <test_sort_find@@Base+0xb2c>
   160dc:	ldr	r1, [r0, r1]!
   160e0:	ldr	r4, [r0, r1]!
   160e4:	movw	r1, #11597	; 0x2d4d
   160e8:	movt	r1, #2
   160ec:	cmp	r4, #5
   160f0:	mov	r2, r4
   160f4:	add	r0, r0, #4
   160f8:	movcs	r2, #5
   160fc:	bl	12f70 <strncmp@plt>
   16100:	cmp	r0, #0
   16104:	mov	r2, r0
   16108:	mov	r1, #0
   1610c:	mvneq	r2, #0
   16110:	cmp	r4, #5
   16114:	movwhi	r1, #1
   16118:	cmp	r0, #0
   1611c:	movne	r1, r2
   16120:	cmp	r4, #5
   16124:	ldr	r4, [sp, #12]
   16128:	movcc	r1, r2
   1612c:	cmp	r7, #3
   16130:	cmpeq	r1, #0
   16134:	beq	16150 <test_sort_find@@Base+0x958>
   16138:	movw	r0, #19840	; 0x4d80
   1613c:	movt	r0, #2
   16140:	b	15cc0 <test_sort_find@@Base+0x4c8>
   16144:	movw	r0, #19888	; 0x4db0
   16148:	movt	r0, #2
   1614c:	b	15cc0 <test_sort_find@@Base+0x4c8>
   16150:	movw	r1, #11604	; 0x2d54
   16154:	mov	r0, r5
   16158:	movt	r1, #2
   1615c:	bl	16370 <test_sort_find@@Base+0xb78>
   16160:	cmn	r0, #1
   16164:	beq	16174 <test_sort_find@@Base+0x97c>
   16168:	movw	r0, #21680	; 0x54b0
   1616c:	movt	r0, #2
   16170:	b	16194 <test_sort_find@@Base+0x99c>
   16174:	movw	r1, #11512	; 0x2cf8
   16178:	mov	r0, r5
   1617c:	movt	r1, #2
   16180:	bl	16370 <test_sort_find@@Base+0xb78>
   16184:	cmp	r0, #0
   16188:	beq	161a4 <test_sort_find@@Base+0x9ac>
   1618c:	movw	r0, #17647	; 0x44ef
   16190:	movt	r0, #2
   16194:	bl	12eec <puts@plt>
   16198:	mvn	r6, #0
   1619c:	ldr	r4, [sp, #12]
   161a0:	b	15cc8 <test_sort_find@@Base+0x4d0>
   161a4:	movw	r1, #10499	; 0x2903
   161a8:	mov	r0, r5
   161ac:	movt	r1, #2
   161b0:	bl	16370 <test_sort_find@@Base+0xb78>
   161b4:	cmp	r0, #1
   161b8:	bne	16290 <test_sort_find@@Base+0xa98>
   161bc:	movw	r1, #10417	; 0x28b1
   161c0:	mov	r0, r5
   161c4:	movt	r1, #2
   161c8:	bl	16370 <test_sort_find@@Base+0xb78>
   161cc:	cmp	r0, #4
   161d0:	bne	162a0 <test_sort_find@@Base+0xaa8>
   161d4:	ldr	sl, [r5, #-4]
   161d8:	mov	r6, #0
   161dc:	cmp	sl, #0
   161e0:	beq	1619c <test_sort_find@@Base+0x9a4>
   161e4:	lsr	r7, sl, #1
   161e8:	sub	r4, sl, #1
   161ec:	mov	r0, r5
   161f0:	mov	r1, r7
   161f4:	mov	r2, r4
   161f8:	bl	1cd2c <main@@Base+0xc84>
   161fc:	sub	r7, r7, #1
   16200:	cmn	r7, #1
   16204:	bne	161ec <test_sort_find@@Base+0x9f4>
   16208:	cmp	r4, #0
   1620c:	ldr	r4, [sp, #12]
   16210:	beq	15cc8 <test_sort_find@@Base+0x4d0>
   16214:	mvn	r0, #3
   16218:	ldr	r1, [sp]
   1621c:	sub	r7, sl, #2
   16220:	mov	r6, #0
   16224:	add	r2, r0, sl, lsl #2
   16228:	mov	r0, #4
   1622c:	sub	r9, r0, sl, lsl #2
   16230:	ldr	r0, [sp, #8]
   16234:	add	r0, r1, r0
   16238:	ldr	r1, [sp, #4]
   1623c:	add	r0, r0, sl, lsl #2
   16240:	add	r0, r0, r1
   16244:	add	r8, r4, r0
   16248:	ldr	r0, [r8]
   1624c:	ldr	r1, [r5]
   16250:	mov	sl, r2
   16254:	add	r0, r2, r0
   16258:	mov	r2, r7
   1625c:	str	r0, [r5]
   16260:	add	r0, r9, r1
   16264:	mov	r1, #0
   16268:	str	r0, [r8], #-4
   1626c:	mov	r0, r5
   16270:	bl	1cd2c <main@@Base+0xc84>
   16274:	sub	sl, sl, #4
   16278:	sub	r7, r7, #1
   1627c:	add	r9, r9, #4
   16280:	mov	r2, sl
   16284:	cmn	r7, #1
   16288:	bne	16248 <test_sort_find@@Base+0xa50>
   1628c:	b	15cc8 <test_sort_find@@Base+0x4d0>
   16290:	mov	r6, r0
   16294:	movw	r0, #21616	; 0x5470
   16298:	movt	r0, #2
   1629c:	b	162ac <test_sort_find@@Base+0xab4>
   162a0:	mov	r6, r0
   162a4:	movw	r0, #21648	; 0x5490
   162a8:	movt	r0, #2
   162ac:	bl	12eec <puts@plt>
   162b0:	movw	r0, #11611	; 0x2d5b
   162b4:	mov	r1, r6
   162b8:	movt	r0, #2
   162bc:	bl	12e98 <printf@plt>
   162c0:	b	16198 <test_sort_find@@Base+0x9a0>
   162c4:	movw	r0, #13899	; 0x364b
   162c8:	movw	r1, #13609	; 0x3529
   162cc:	movw	r3, #14061	; 0x36ed
   162d0:	mov	r2, #235	; 0xeb
   162d4:	movt	r0, #2
   162d8:	movt	r1, #2
   162dc:	movt	r3, #2
   162e0:	bl	12f88 <__assert_fail@plt>
   162e4:	movw	r0, #13160	; 0x3368
   162e8:	movw	r1, #13198	; 0x338e
   162ec:	movw	r3, #14858	; 0x3a0a
   162f0:	movw	r2, #711	; 0x2c7
   162f4:	movt	r0, #2
   162f8:	movt	r1, #2
   162fc:	movt	r3, #2
   16300:	bl	12f88 <__assert_fail@plt>
   16304:	movw	r0, #11542	; 0x2d16
   16308:	movw	r1, #10320	; 0x2850
   1630c:	movw	r3, #11551	; 0x2d1f
   16310:	movw	r2, #1147	; 0x47b
   16314:	movt	r0, #2
   16318:	movt	r1, #2
   1631c:	movt	r3, #2
   16320:	bl	12f88 <__assert_fail@plt>
   16324:	movw	r0, #14511	; 0x38af
   16328:	movt	r0, #2
   1632c:	movw	r1, #13198	; 0x338e
   16330:	movw	r3, #14430	; 0x385e
   16334:	movw	r2, #699	; 0x2bb
   16338:	movt	r1, #2
   1633c:	movt	r3, #2
   16340:	bl	12f88 <__assert_fail@plt>
   16344:	movw	r0, #14633	; 0x3929
   16348:	movw	r1, #13198	; 0x338e
   1634c:	movw	r3, #14960	; 0x3a70
   16350:	movw	r2, #693	; 0x2b5
   16354:	movt	r0, #2
   16358:	movt	r1, #2
   1635c:	movt	r3, #2
   16360:	bl	12f88 <__assert_fail@plt>
   16364:	movw	r0, #13160	; 0x3368
   16368:	movt	r0, #2
   1636c:	b	1632c <test_sort_find@@Base+0xb34>
   16370:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   16374:	add	fp, sp, #24
   16378:	mvn	r4, #0
   1637c:	cmp	r0, #0
   16380:	beq	16468 <test_sort_find@@Base+0xc70>
   16384:	ldr	r7, [r0, #-4]
   16388:	mov	r9, r0
   1638c:	cmp	r7, #0
   16390:	beq	16468 <test_sort_find@@Base+0xc70>
   16394:	mov	r8, r1
   16398:	mov	r4, #0
   1639c:	subs	r5, r7, #1
   163a0:	beq	16418 <test_sort_find@@Base+0xc20>
   163a4:	sub	r0, r5, r4
   163a8:	add	r6, r4, r0, lsr #1
   163ac:	cmp	r7, r6
   163b0:	bls	1647c <test_sort_find@@Base+0xc84>
   163b4:	mov	r0, r9
   163b8:	ldr	r1, [r0, r6, lsl #2]!
   163bc:	adds	r0, r0, r1
   163c0:	beq	1649c <test_sort_find@@Base+0xca4>
   163c4:	ldr	r2, [r0]
   163c8:	mov	r1, r0
   163cc:	ldrh	r2, [r1, -r2]!	; <UNPREDICTABLE>
   163d0:	cmp	r2, #12
   163d4:	bcc	16470 <test_sort_find@@Base+0xc78>
   163d8:	ldrh	r1, [r1, #10]
   163dc:	cmp	r1, #0
   163e0:	beq	16470 <test_sort_find@@Base+0xc78>
   163e4:	ldr	r1, [r0, r1]!
   163e8:	add	r0, r0, r1
   163ec:	mov	r1, r8
   163f0:	add	r0, r0, #4
   163f4:	bl	12e8c <strcmp@plt>
   163f8:	cmp	r0, #0
   163fc:	movge	r5, r6
   16400:	addlt	r4, r6, #1
   16404:	cmp	r5, r4
   16408:	bhi	163a4 <test_sort_find@@Base+0xbac>
   1640c:	bne	16464 <test_sort_find@@Base+0xc6c>
   16410:	cmp	r7, r4
   16414:	bls	1647c <test_sort_find@@Base+0xc84>
   16418:	ldr	r0, [r9, r4, lsl #2]!
   1641c:	adds	r0, r9, r0
   16420:	beq	1649c <test_sort_find@@Base+0xca4>
   16424:	ldr	r2, [r0]
   16428:	mov	r1, r0
   1642c:	ldrh	r2, [r1, -r2]!	; <UNPREDICTABLE>
   16430:	cmp	r2, #12
   16434:	bcc	16470 <test_sort_find@@Base+0xc78>
   16438:	ldrh	r1, [r1, #10]
   1643c:	cmp	r1, #0
   16440:	beq	16470 <test_sort_find@@Base+0xc78>
   16444:	ldr	r1, [r0, r1]!
   16448:	add	r0, r0, r1
   1644c:	mov	r1, r8
   16450:	add	r0, r0, #4
   16454:	bl	12e8c <strcmp@plt>
   16458:	cmp	r0, #0
   1645c:	mvnne	r4, #0
   16460:	b	16468 <test_sort_find@@Base+0xc70>
   16464:	mvn	r4, #0
   16468:	mov	r0, r4
   1646c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   16470:	movw	r0, #14511	; 0x38af
   16474:	movt	r0, #2
   16478:	b	164a4 <test_sort_find@@Base+0xcac>
   1647c:	movw	r0, #14633	; 0x3929
   16480:	movw	r1, #13198	; 0x338e
   16484:	movw	r3, #14960	; 0x3a70
   16488:	movw	r2, #693	; 0x2b5
   1648c:	movt	r0, #2
   16490:	movt	r1, #2
   16494:	movt	r3, #2
   16498:	bl	12f88 <__assert_fail@plt>
   1649c:	movw	r0, #13160	; 0x3368
   164a0:	movt	r0, #2
   164a4:	movw	r1, #13198	; 0x338e
   164a8:	movw	r3, #14430	; 0x385e
   164ac:	movw	r2, #699	; 0x2bb
   164b0:	movt	r1, #2
   164b4:	movt	r3, #2
   164b8:	bl	12f88 <__assert_fail@plt>

000164bc <test_scan@@Base>:
   164bc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   164c0:	add	fp, sp, #28
   164c4:	sub	sp, sp, #84	; 0x54
   164c8:	movw	r1, #17827	; 0x45a3
   164cc:	mov	r4, r0
   164d0:	sub	r0, fp, #39	; 0x27
   164d4:	mov	r2, #7
   164d8:	movt	r1, #2
   164dc:	bl	12eb0 <memcpy@plt>
   164e0:	mov	r0, r4
   164e4:	bl	1d2e4 <flatcc_builder_reset@@Base>
   164e8:	movw	r1, #9828	; 0x2664
   164ec:	mov	r0, r4
   164f0:	mov	r2, #0
   164f4:	mov	r3, #0
   164f8:	movt	r1, #2
   164fc:	bl	1db50 <flatcc_builder_start_buffer@@Base>
   16500:	cmp	r0, #0
   16504:	bne	16514 <test_scan@@Base+0x58>
   16508:	mov	r0, r4
   1650c:	mov	r1, #36	; 0x24
   16510:	bl	1ebcc <flatcc_builder_start_table@@Base>
   16514:	movw	r1, #9896	; 0x26a8
   16518:	mov	r0, r4
   1651c:	movt	r1, #2
   16520:	bl	20844 <flatcc_builder_create_string_str@@Base>
   16524:	cmp	r0, #0
   16528:	beq	16544 <test_scan@@Base+0x88>
   1652c:	mov	r5, r0
   16530:	mov	r0, r4
   16534:	mov	r1, #3
   16538:	bl	1fd60 <flatcc_builder_table_add_offset@@Base>
   1653c:	cmp	r0, #0
   16540:	strne	r5, [r0]
   16544:	mvn	r0, #0
   16548:	mov	r1, #1
   1654c:	mov	r2, #7
   16550:	mov	r3, #1
   16554:	str	r1, [sp]
   16558:	str	r0, [sp, #4]
   1655c:	sub	r1, fp, #39	; 0x27
   16560:	mov	r0, r4
   16564:	bl	1f714 <flatcc_builder_create_vector@@Base>
   16568:	cmp	r0, #0
   1656c:	beq	16588 <test_scan@@Base+0xcc>
   16570:	mov	r5, r0
   16574:	mov	r0, r4
   16578:	mov	r1, #5
   1657c:	bl	1fd60 <flatcc_builder_table_add_offset@@Base>
   16580:	cmp	r0, #0
   16584:	strne	r5, [r0]
   16588:	mov	r0, r4
   1658c:	bl	1e88c <flatcc_builder_start_offset_vector@@Base>
   16590:	mov	r0, r4
   16594:	bl	1e958 <flatcc_builder_end_offset_vector@@Base>
   16598:	cmp	r0, #0
   1659c:	beq	165b8 <test_scan@@Base+0xfc>
   165a0:	mov	r5, r0
   165a4:	mov	r0, r4
   165a8:	mov	r1, #10
   165ac:	bl	1fd60 <flatcc_builder_table_add_offset@@Base>
   165b0:	cmp	r0, #0
   165b4:	strne	r5, [r0]
   165b8:	mov	r0, r4
   165bc:	bl	1e88c <flatcc_builder_start_offset_vector@@Base>
   165c0:	mov	r0, r4
   165c4:	mov	r1, #36	; 0x24
   165c8:	bl	1ebcc <flatcc_builder_start_table@@Base>
   165cc:	movw	r1, #10417	; 0x28b1
   165d0:	mov	r0, r4
   165d4:	movt	r1, #2
   165d8:	bl	20844 <flatcc_builder_create_string_str@@Base>
   165dc:	cmp	r0, #0
   165e0:	beq	165fc <test_scan@@Base+0x140>
   165e4:	mov	r5, r0
   165e8:	mov	r0, r4
   165ec:	mov	r1, #3
   165f0:	bl	1fd60 <flatcc_builder_table_add_offset@@Base>
   165f4:	cmp	r0, #0
   165f8:	strne	r5, [r0]
   165fc:	movw	r1, #17860	; 0x45c4
   16600:	mov	r0, r4
   16604:	mov	r2, #1
   16608:	movt	r1, #2
   1660c:	bl	1f4cc <flatcc_builder_check_required@@Base>
   16610:	cmp	r0, #0
   16614:	beq	17500 <test_scan@@Base+0x1044>
   16618:	mov	r0, r4
   1661c:	bl	1f55c <flatcc_builder_end_table@@Base>
   16620:	cmp	r0, #0
   16624:	beq	16634 <test_scan@@Base+0x178>
   16628:	mov	r1, r0
   1662c:	mov	r0, r4
   16630:	bl	1e2d0 <flatcc_builder_offset_vector_push@@Base>
   16634:	mov	r0, r4
   16638:	mov	r1, #36	; 0x24
   1663c:	bl	1ebcc <flatcc_builder_start_table@@Base>
   16640:	movw	r1, #10459	; 0x28db
   16644:	mov	r0, r4
   16648:	movt	r1, #2
   1664c:	bl	20844 <flatcc_builder_create_string_str@@Base>
   16650:	cmp	r0, #0
   16654:	beq	16670 <test_scan@@Base+0x1b4>
   16658:	mov	r5, r0
   1665c:	mov	r0, r4
   16660:	mov	r1, #3
   16664:	bl	1fd60 <flatcc_builder_table_add_offset@@Base>
   16668:	cmp	r0, #0
   1666c:	strne	r5, [r0]
   16670:	movw	r1, #17860	; 0x45c4
   16674:	mov	r0, r4
   16678:	mov	r2, #1
   1667c:	movt	r1, #2
   16680:	bl	1f4cc <flatcc_builder_check_required@@Base>
   16684:	cmp	r0, #0
   16688:	beq	17500 <test_scan@@Base+0x1044>
   1668c:	mov	r0, r4
   16690:	bl	1f55c <flatcc_builder_end_table@@Base>
   16694:	cmp	r0, #0
   16698:	beq	166a8 <test_scan@@Base+0x1ec>
   1669c:	mov	r1, r0
   166a0:	mov	r0, r4
   166a4:	bl	1e2d0 <flatcc_builder_offset_vector_push@@Base>
   166a8:	mov	r0, r4
   166ac:	mov	r1, #36	; 0x24
   166b0:	bl	1ebcc <flatcc_builder_start_table@@Base>
   166b4:	movw	r1, #10499	; 0x2903
   166b8:	mov	r0, r4
   166bc:	movt	r1, #2
   166c0:	bl	20844 <flatcc_builder_create_string_str@@Base>
   166c4:	cmp	r0, #0
   166c8:	beq	166e4 <test_scan@@Base+0x228>
   166cc:	mov	r5, r0
   166d0:	mov	r0, r4
   166d4:	mov	r1, #3
   166d8:	bl	1fd60 <flatcc_builder_table_add_offset@@Base>
   166dc:	cmp	r0, #0
   166e0:	strne	r5, [r0]
   166e4:	movw	r1, #17860	; 0x45c4
   166e8:	mov	r0, r4
   166ec:	mov	r2, #1
   166f0:	movt	r1, #2
   166f4:	bl	1f4cc <flatcc_builder_check_required@@Base>
   166f8:	cmp	r0, #0
   166fc:	beq	17500 <test_scan@@Base+0x1044>
   16700:	mov	r0, r4
   16704:	bl	1f55c <flatcc_builder_end_table@@Base>
   16708:	cmp	r0, #0
   1670c:	beq	1671c <test_scan@@Base+0x260>
   16710:	mov	r1, r0
   16714:	mov	r0, r4
   16718:	bl	1e2d0 <flatcc_builder_offset_vector_push@@Base>
   1671c:	mov	r0, r4
   16720:	mov	r1, #36	; 0x24
   16724:	bl	1ebcc <flatcc_builder_start_table@@Base>
   16728:	movw	r1, #11512	; 0x2cf8
   1672c:	mov	r0, r4
   16730:	movt	r1, #2
   16734:	bl	20844 <flatcc_builder_create_string_str@@Base>
   16738:	cmp	r0, #0
   1673c:	beq	16758 <test_scan@@Base+0x29c>
   16740:	mov	r5, r0
   16744:	mov	r0, r4
   16748:	mov	r1, #3
   1674c:	bl	1fd60 <flatcc_builder_table_add_offset@@Base>
   16750:	cmp	r0, #0
   16754:	strne	r5, [r0]
   16758:	movw	r1, #17860	; 0x45c4
   1675c:	mov	r0, r4
   16760:	mov	r2, #1
   16764:	movt	r1, #2
   16768:	bl	1f4cc <flatcc_builder_check_required@@Base>
   1676c:	cmp	r0, #0
   16770:	beq	17500 <test_scan@@Base+0x1044>
   16774:	mov	r0, r4
   16778:	bl	1f55c <flatcc_builder_end_table@@Base>
   1677c:	cmp	r0, #0
   16780:	beq	16790 <test_scan@@Base+0x2d4>
   16784:	mov	r1, r0
   16788:	mov	r0, r4
   1678c:	bl	1e2d0 <flatcc_builder_offset_vector_push@@Base>
   16790:	mov	r0, r4
   16794:	mov	r1, #36	; 0x24
   16798:	bl	1ebcc <flatcc_builder_start_table@@Base>
   1679c:	movw	r1, #10499	; 0x2903
   167a0:	mov	r0, r4
   167a4:	movt	r1, #2
   167a8:	bl	20844 <flatcc_builder_create_string_str@@Base>
   167ac:	cmp	r0, #0
   167b0:	beq	167cc <test_scan@@Base+0x310>
   167b4:	mov	r5, r0
   167b8:	mov	r0, r4
   167bc:	mov	r1, #3
   167c0:	bl	1fd60 <flatcc_builder_table_add_offset@@Base>
   167c4:	cmp	r0, #0
   167c8:	strne	r5, [r0]
   167cc:	movw	r1, #17860	; 0x45c4
   167d0:	mov	r0, r4
   167d4:	mov	r2, #1
   167d8:	movt	r1, #2
   167dc:	bl	1f4cc <flatcc_builder_check_required@@Base>
   167e0:	cmp	r0, #0
   167e4:	beq	17500 <test_scan@@Base+0x1044>
   167e8:	mov	r0, r4
   167ec:	bl	1f55c <flatcc_builder_end_table@@Base>
   167f0:	cmp	r0, #0
   167f4:	beq	16804 <test_scan@@Base+0x348>
   167f8:	mov	r1, r0
   167fc:	mov	r0, r4
   16800:	bl	1e2d0 <flatcc_builder_offset_vector_push@@Base>
   16804:	mov	r0, r4
   16808:	bl	1e958 <flatcc_builder_end_offset_vector@@Base>
   1680c:	cmp	r0, #0
   16810:	beq	1682c <test_scan@@Base+0x370>
   16814:	mov	r5, r0
   16818:	mov	r0, r4
   1681c:	mov	r1, #11
   16820:	bl	1fd60 <flatcc_builder_table_add_offset@@Base>
   16824:	cmp	r0, #0
   16828:	strne	r5, [r0]
   1682c:	movw	r1, #17860	; 0x45c4
   16830:	mov	r0, r4
   16834:	mov	r2, #1
   16838:	movt	r1, #2
   1683c:	bl	1f4cc <flatcc_builder_check_required@@Base>
   16840:	cmp	r0, #0
   16844:	beq	17500 <test_scan@@Base+0x1044>
   16848:	mov	r0, r4
   1684c:	bl	1f55c <flatcc_builder_end_table@@Base>
   16850:	mov	r1, r0
   16854:	mov	r0, r4
   16858:	bl	1dd40 <flatcc_builder_end_buffer@@Base>
   1685c:	sub	r1, fp, #32
   16860:	mov	r0, r4
   16864:	bl	20c50 <flatcc_builder_finalize_aligned_buffer@@Base>
   16868:	cmp	r0, #0
   1686c:	beq	17520 <test_scan@@Base+0x1064>
   16870:	mov	r9, r0
   16874:	ldr	r0, [r0, #4]
   16878:	movw	r1, #20301	; 0x4f4d
   1687c:	movt	r1, #21326	; 0x534e
   16880:	cmp	r0, r1
   16884:	bne	17520 <test_scan@@Base+0x1064>
   16888:	ldr	r1, [r9]
   1688c:	mov	r0, r9
   16890:	ldr	r2, [r0, r1]!
   16894:	str	r1, [fp, #-44]	; 0xffffffd4
   16898:	mov	r1, r0
   1689c:	ldrh	r2, [r1, -r2]!	; <UNPREDICTABLE>
   168a0:	cmp	r2, #27
   168a4:	bls	17540 <test_scan@@Base+0x1084>
   168a8:	ldrh	r4, [r1, #26]
   168ac:	cmp	r4, #0
   168b0:	beq	17540 <test_scan@@Base+0x1084>
   168b4:	ldrh	r3, [r1, #14]
   168b8:	cmp	r3, #0
   168bc:	mov	r2, r3
   168c0:	str	r3, [fp, #-52]	; 0xffffffcc
   168c4:	beq	17560 <test_scan@@Base+0x10a4>
   168c8:	ldrh	r2, [r1, #24]
   168cc:	cmp	r2, #0
   168d0:	mov	r1, r2
   168d4:	str	r2, [fp, #-48]	; 0xffffffd0
   168d8:	beq	17580 <test_scan@@Base+0x10c4>
   168dc:	mov	r2, r0
   168e0:	ldr	r1, [r2, r4]!
   168e4:	add	r2, r2, r1
   168e8:	add	r2, r2, #4
   168ec:	str	r2, [sp, #52]	; 0x34
   168f0:	ldr	sl, [r2, #-4]!
   168f4:	cmp	sl, #0
   168f8:	str	r2, [sp, #56]	; 0x38
   168fc:	beq	16a78 <test_scan@@Base+0x5bc>
   16900:	ldr	r2, [fp, #-52]	; 0xffffffcc
   16904:	mov	r3, r0
   16908:	movw	r6, #10459	; 0x28db
   1690c:	mov	r5, #0
   16910:	movt	r6, #2
   16914:	ldr	r2, [r3, r2]!
   16918:	str	r2, [sp, #32]
   1691c:	ldr	r2, [fp, #-48]	; 0xffffffd0
   16920:	str	r3, [sp, #28]
   16924:	ldr	r2, [r0, r2]!
   16928:	add	r0, r0, r2
   1692c:	str	r2, [sp, #40]	; 0x28
   16930:	add	r0, r0, #4
   16934:	str	r0, [sp, #36]	; 0x24
   16938:	ldr	r0, [fp, #-44]	; 0xffffffd4
   1693c:	add	r0, r1, r0
   16940:	add	r8, r0, r4
   16944:	str	r0, [sp, #48]	; 0x30
   16948:	add	r0, r9, r8
   1694c:	add	r7, r0, #8
   16950:	str	r0, [sp, #44]	; 0x2c
   16954:	cmp	sl, r5
   16958:	bls	183d8 <test_scan@@Base+0x1f1c>
   1695c:	ldr	r0, [r7, #-4]
   16960:	add	r1, r7, r0
   16964:	cmp	r1, #4
   16968:	beq	17b04 <test_scan@@Base+0x1648>
   1696c:	ldr	r1, [r1, #-4]
   16970:	sub	r1, r0, r1
   16974:	add	r1, r7, r1
   16978:	ldrh	r2, [r1, #-4]
   1697c:	cmp	r2, #12
   16980:	bcc	17af8 <test_scan@@Base+0x163c>
   16984:	ldrh	r1, [r1, #6]
   16988:	cmp	r1, #0
   1698c:	beq	17af8 <test_scan@@Base+0x163c>
   16990:	add	r2, r0, r1
   16994:	add	r2, r7, r2
   16998:	ldr	r2, [r2, #-4]
   1699c:	add	r0, r2, r0
   169a0:	add	r0, r0, r1
   169a4:	mov	r1, r6
   169a8:	add	r0, r7, r0
   169ac:	bl	12e8c <strcmp@plt>
   169b0:	cmp	r0, #0
   169b4:	beq	169cc <test_scan@@Base+0x510>
   169b8:	add	r5, r5, #1
   169bc:	add	r7, r7, #4
   169c0:	cmp	r5, sl
   169c4:	bcc	16954 <test_scan@@Base+0x498>
   169c8:	b	16a78 <test_scan@@Base+0x5bc>
   169cc:	cmp	r5, #1
   169d0:	bne	16a78 <test_scan@@Base+0x5bc>
   169d4:	ldr	r0, [sp, #48]	; 0x30
   169d8:	movw	r6, #10459	; 0x28db
   169dc:	sub	r5, sl, #1
   169e0:	movt	r6, #2
   169e4:	add	r0, r0, sl, lsl #2
   169e8:	add	r0, r0, r4
   169ec:	add	r7, r9, r0
   169f0:	str	r0, [sp, #24]
   169f4:	cmn	r5, #1
   169f8:	beq	16a6c <test_scan@@Base+0x5b0>
   169fc:	cmp	sl, r5
   16a00:	bls	183d8 <test_scan@@Base+0x1f1c>
   16a04:	ldr	r0, [r7]
   16a08:	adds	r1, r7, r0
   16a0c:	beq	17b04 <test_scan@@Base+0x1648>
   16a10:	ldr	r1, [r7, r0]
   16a14:	sub	r1, r0, r1
   16a18:	add	r1, r7, r1
   16a1c:	ldrh	r2, [r1]
   16a20:	cmp	r2, #12
   16a24:	bcc	17af8 <test_scan@@Base+0x163c>
   16a28:	ldrh	r1, [r1, #10]
   16a2c:	cmp	r1, #0
   16a30:	beq	17af8 <test_scan@@Base+0x163c>
   16a34:	add	r2, r0, r1
   16a38:	ldr	r2, [r7, r2]
   16a3c:	add	r0, r2, r0
   16a40:	add	r0, r0, r1
   16a44:	mov	r1, r6
   16a48:	add	r0, r7, r0
   16a4c:	add	r0, r0, #4
   16a50:	bl	12e8c <strcmp@plt>
   16a54:	sub	r7, r7, #4
   16a58:	sub	r5, r5, #1
   16a5c:	cmp	r0, #0
   16a60:	bne	169f4 <test_scan@@Base+0x538>
   16a64:	cmp	r5, #0
   16a68:	beq	16a9c <test_scan@@Base+0x5e0>
   16a6c:	movw	r0, #21808	; 0x5530
   16a70:	movt	r0, #2
   16a74:	b	16a80 <test_scan@@Base+0x5c4>
   16a78:	movw	r0, #21840	; 0x5550
   16a7c:	movt	r0, #2
   16a80:	bl	12eec <puts@plt>
   16a84:	mvn	r5, #0
   16a88:	mov	r0, r9
   16a8c:	bl	20d50 <flatcc_builder_aligned_free@@Base>
   16a90:	mov	r0, r5
   16a94:	sub	sp, fp, #28
   16a98:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16a9c:	str	r4, [sp, #16]
   16aa0:	ldr	r4, [sp, #44]	; 0x2c
   16aa4:	movw	r6, #11597	; 0x2d4d
   16aa8:	str	r9, [sp, #20]
   16aac:	mov	r5, #0
   16ab0:	movt	r6, #2
   16ab4:	add	r9, r4, #8
   16ab8:	cmp	sl, r5
   16abc:	bls	183d8 <test_scan@@Base+0x1f1c>
   16ac0:	ldr	r0, [r9, #-4]
   16ac4:	add	r1, r9, r0
   16ac8:	cmp	r1, #4
   16acc:	beq	17b04 <test_scan@@Base+0x1648>
   16ad0:	ldr	r1, [r1, #-4]
   16ad4:	sub	r1, r0, r1
   16ad8:	add	r1, r9, r1
   16adc:	ldrh	r2, [r1, #-4]
   16ae0:	cmp	r2, #12
   16ae4:	bcc	17af8 <test_scan@@Base+0x163c>
   16ae8:	ldrh	r1, [r1, #6]
   16aec:	cmp	r1, #0
   16af0:	beq	17af8 <test_scan@@Base+0x163c>
   16af4:	add	r2, r0, r1
   16af8:	add	r2, r9, r2
   16afc:	ldr	r2, [r2, #-4]
   16b00:	add	r0, r2, r0
   16b04:	add	r0, r0, r1
   16b08:	mov	r1, r6
   16b0c:	add	r0, r9, r0
   16b10:	ldr	r7, [r0, #-4]
   16b14:	cmp	r7, #5
   16b18:	mov	r2, r7
   16b1c:	movcs	r2, #5
   16b20:	bl	12f70 <strncmp@plt>
   16b24:	cmp	r0, #0
   16b28:	mov	r1, r0
   16b2c:	mov	r2, #0
   16b30:	mvneq	r1, #0
   16b34:	cmp	r7, #5
   16b38:	movwhi	r2, #1
   16b3c:	cmp	r0, #0
   16b40:	movne	r2, r1
   16b44:	cmp	r7, #5
   16b48:	movcc	r2, r1
   16b4c:	cmp	r2, #0
   16b50:	beq	16b68 <test_scan@@Base+0x6ac>
   16b54:	add	r5, r5, #1
   16b58:	add	r9, r9, #4
   16b5c:	cmp	r5, sl
   16b60:	bcc	16ab8 <test_scan@@Base+0x5fc>
   16b64:	b	16c38 <test_scan@@Base+0x77c>
   16b68:	cmp	r5, #1
   16b6c:	bne	16c38 <test_scan@@Base+0x77c>
   16b70:	ldr	r0, [sp, #20]
   16b74:	ldr	r1, [sp, #24]
   16b78:	movw	r9, #11597	; 0x2d4d
   16b7c:	sub	r5, sl, #1
   16b80:	movt	r9, #2
   16b84:	add	r6, r0, r1
   16b88:	cmn	r5, #1
   16b8c:	beq	16c38 <test_scan@@Base+0x77c>
   16b90:	cmp	sl, r5
   16b94:	bls	183d8 <test_scan@@Base+0x1f1c>
   16b98:	ldr	r0, [r6]
   16b9c:	adds	r1, r6, r0
   16ba0:	beq	17b04 <test_scan@@Base+0x1648>
   16ba4:	ldr	r1, [r6, r0]
   16ba8:	sub	r1, r0, r1
   16bac:	add	r1, r6, r1
   16bb0:	ldrh	r2, [r1]
   16bb4:	cmp	r2, #12
   16bb8:	bcc	17af8 <test_scan@@Base+0x163c>
   16bbc:	ldrh	r1, [r1, #10]
   16bc0:	cmp	r1, #0
   16bc4:	beq	17af8 <test_scan@@Base+0x163c>
   16bc8:	add	r2, r0, r1
   16bcc:	ldr	r2, [r6, r2]
   16bd0:	add	r0, r2, r0
   16bd4:	add	r0, r0, r1
   16bd8:	mov	r1, r6
   16bdc:	ldr	r7, [r1, r0]!
   16be0:	cmp	r7, #5
   16be4:	mov	r2, r7
   16be8:	add	r0, r1, #4
   16bec:	mov	r1, r9
   16bf0:	movcs	r2, #5
   16bf4:	bl	12f70 <strncmp@plt>
   16bf8:	cmp	r0, #0
   16bfc:	mov	r1, r0
   16c00:	mov	r2, #0
   16c04:	sub	r6, r6, #4
   16c08:	sub	r5, r5, #1
   16c0c:	mvneq	r1, #0
   16c10:	cmp	r7, #5
   16c14:	movwhi	r2, #1
   16c18:	cmp	r0, #0
   16c1c:	movne	r2, r1
   16c20:	cmp	r7, #5
   16c24:	movcc	r2, r1
   16c28:	cmp	r2, #0
   16c2c:	bne	16b88 <test_scan@@Base+0x6cc>
   16c30:	cmp	r5, #0
   16c34:	beq	16c50 <test_scan@@Base+0x794>
   16c38:	movw	r0, #21760	; 0x5500
   16c3c:	movt	r0, #2
   16c40:	bl	12eec <puts@plt>
   16c44:	mvn	r5, #0
   16c48:	ldr	r9, [sp, #20]
   16c4c:	b	16a88 <test_scan@@Base+0x5cc>
   16c50:	ldr	r9, [sp, #20]
   16c54:	cmp	sl, #3
   16c58:	bcc	16cdc <test_scan@@Base+0x820>
   16c5c:	movw	r6, #10459	; 0x28db
   16c60:	add	r5, r4, #12
   16c64:	mov	r7, #2
   16c68:	movt	r6, #2
   16c6c:	cmp	sl, r7
   16c70:	bls	183d8 <test_scan@@Base+0x1f1c>
   16c74:	ldr	r0, [r5]
   16c78:	adds	r1, r5, r0
   16c7c:	beq	17b04 <test_scan@@Base+0x1648>
   16c80:	ldr	r1, [r5, r0]
   16c84:	sub	r1, r0, r1
   16c88:	add	r1, r5, r1
   16c8c:	ldrh	r2, [r1]
   16c90:	cmp	r2, #12
   16c94:	bcc	17af8 <test_scan@@Base+0x163c>
   16c98:	ldrh	r1, [r1, #10]
   16c9c:	cmp	r1, #0
   16ca0:	beq	17af8 <test_scan@@Base+0x163c>
   16ca4:	add	r2, r0, r1
   16ca8:	ldr	r2, [r5, r2]
   16cac:	add	r0, r2, r0
   16cb0:	add	r0, r0, r1
   16cb4:	mov	r1, r6
   16cb8:	add	r0, r5, r0
   16cbc:	add	r0, r0, #4
   16cc0:	bl	12e8c <strcmp@plt>
   16cc4:	cmp	r0, #0
   16cc8:	beq	16df4 <test_scan@@Base+0x938>
   16ccc:	add	r7, r7, #1
   16cd0:	add	r5, r5, #4
   16cd4:	cmp	r7, sl
   16cd8:	bcc	16c6c <test_scan@@Base+0x7b0>
   16cdc:	movw	r6, #11604	; 0x2d54
   16ce0:	add	r5, r4, #8
   16ce4:	mov	r7, #0
   16ce8:	movt	r6, #2
   16cec:	cmp	sl, r7
   16cf0:	bls	183d8 <test_scan@@Base+0x1f1c>
   16cf4:	ldr	r0, [r5, #-4]
   16cf8:	add	r1, r5, r0
   16cfc:	cmp	r1, #4
   16d00:	beq	17b04 <test_scan@@Base+0x1648>
   16d04:	ldr	r1, [r1, #-4]
   16d08:	sub	r1, r0, r1
   16d0c:	add	r1, r5, r1
   16d10:	ldrh	r2, [r1, #-4]
   16d14:	cmp	r2, #12
   16d18:	bcc	17af8 <test_scan@@Base+0x163c>
   16d1c:	ldrh	r1, [r1, #6]
   16d20:	cmp	r1, #0
   16d24:	beq	17af8 <test_scan@@Base+0x163c>
   16d28:	add	r2, r0, r1
   16d2c:	add	r2, r5, r2
   16d30:	ldr	r2, [r2, #-4]
   16d34:	add	r0, r2, r0
   16d38:	add	r0, r0, r1
   16d3c:	mov	r1, r6
   16d40:	add	r0, r5, r0
   16d44:	bl	12e8c <strcmp@plt>
   16d48:	cmp	r0, #0
   16d4c:	beq	16de8 <test_scan@@Base+0x92c>
   16d50:	add	r7, r7, #1
   16d54:	add	r5, r5, #4
   16d58:	cmp	r7, sl
   16d5c:	bcc	16cec <test_scan@@Base+0x830>
   16d60:	movw	r9, #10417	; 0x28b1
   16d64:	add	r6, r4, #8
   16d68:	mov	r5, #0
   16d6c:	movt	r9, #2
   16d70:	cmp	sl, r5
   16d74:	bls	183d8 <test_scan@@Base+0x1f1c>
   16d78:	ldr	r0, [r6, #-4]
   16d7c:	add	r1, r6, r0
   16d80:	cmp	r1, #4
   16d84:	beq	17b04 <test_scan@@Base+0x1648>
   16d88:	ldr	r1, [r1, #-4]
   16d8c:	sub	r1, r0, r1
   16d90:	add	r1, r6, r1
   16d94:	ldrh	r2, [r1, #-4]
   16d98:	cmp	r2, #12
   16d9c:	bcc	17af8 <test_scan@@Base+0x163c>
   16da0:	ldrh	r1, [r1, #6]
   16da4:	cmp	r1, #0
   16da8:	beq	17af8 <test_scan@@Base+0x163c>
   16dac:	add	r2, r0, r1
   16db0:	add	r2, r6, r2
   16db4:	ldr	r2, [r2, #-4]
   16db8:	add	r0, r2, r0
   16dbc:	add	r0, r0, r1
   16dc0:	mov	r1, r9
   16dc4:	add	r0, r6, r0
   16dc8:	bl	12e8c <strcmp@plt>
   16dcc:	cmp	r0, #0
   16dd0:	beq	16e00 <test_scan@@Base+0x944>
   16dd4:	add	r5, r5, #1
   16dd8:	add	r6, r6, #4
   16ddc:	cmp	r5, sl
   16de0:	bcc	16d70 <test_scan@@Base+0x8b4>
   16de4:	b	16e08 <test_scan@@Base+0x94c>
   16de8:	movw	r0, #21680	; 0x54b0
   16dec:	movt	r0, #2
   16df0:	b	16a80 <test_scan@@Base+0x5c4>
   16df4:	movw	r0, #21712	; 0x54d0
   16df8:	movt	r0, #2
   16dfc:	b	16a80 <test_scan@@Base+0x5c4>
   16e00:	cmp	r5, #0
   16e04:	beq	16e14 <test_scan@@Base+0x958>
   16e08:	movw	r0, #21648	; 0x5490
   16e0c:	movt	r0, #2
   16e10:	b	16c40 <test_scan@@Base+0x784>
   16e14:	movw	r9, #10499	; 0x2903
   16e18:	add	r6, r4, #8
   16e1c:	mov	r5, #0
   16e20:	movt	r9, #2
   16e24:	cmp	sl, r5
   16e28:	bls	183d8 <test_scan@@Base+0x1f1c>
   16e2c:	ldr	r0, [r6, #-4]
   16e30:	add	r1, r6, r0
   16e34:	cmp	r1, #4
   16e38:	beq	17b04 <test_scan@@Base+0x1648>
   16e3c:	ldr	r1, [r1, #-4]
   16e40:	sub	r1, r0, r1
   16e44:	add	r1, r6, r1
   16e48:	ldrh	r2, [r1, #-4]
   16e4c:	cmp	r2, #12
   16e50:	bcc	17af8 <test_scan@@Base+0x163c>
   16e54:	ldrh	r1, [r1, #6]
   16e58:	cmp	r1, #0
   16e5c:	beq	17af8 <test_scan@@Base+0x163c>
   16e60:	add	r2, r0, r1
   16e64:	add	r2, r6, r2
   16e68:	ldr	r2, [r2, #-4]
   16e6c:	add	r0, r2, r0
   16e70:	add	r0, r0, r1
   16e74:	mov	r1, r9
   16e78:	add	r0, r6, r0
   16e7c:	bl	12e8c <strcmp@plt>
   16e80:	cmp	r0, #0
   16e84:	beq	16e9c <test_scan@@Base+0x9e0>
   16e88:	add	r5, r5, #1
   16e8c:	add	r6, r6, #4
   16e90:	cmp	r5, sl
   16e94:	bcc	16e24 <test_scan@@Base+0x968>
   16e98:	b	17178 <test_scan@@Base+0xcbc>
   16e9c:	cmp	r5, #2
   16ea0:	bne	17178 <test_scan@@Base+0xcbc>
   16ea4:	ldr	r0, [sp, #20]
   16ea8:	ldr	r1, [sp, #24]
   16eac:	movw	r6, #10499	; 0x2903
   16eb0:	sub	r5, sl, #1
   16eb4:	movt	r6, #2
   16eb8:	add	r7, r0, r1
   16ebc:	cmn	r5, #1
   16ec0:	beq	17178 <test_scan@@Base+0xcbc>
   16ec4:	cmp	sl, r5
   16ec8:	bls	183d8 <test_scan@@Base+0x1f1c>
   16ecc:	ldr	r0, [r7]
   16ed0:	adds	r1, r7, r0
   16ed4:	beq	17b04 <test_scan@@Base+0x1648>
   16ed8:	ldr	r1, [r7, r0]
   16edc:	sub	r1, r0, r1
   16ee0:	add	r1, r7, r1
   16ee4:	ldrh	r2, [r1]
   16ee8:	cmp	r2, #12
   16eec:	bcc	17af8 <test_scan@@Base+0x163c>
   16ef0:	ldrh	r1, [r1, #10]
   16ef4:	cmp	r1, #0
   16ef8:	beq	17af8 <test_scan@@Base+0x163c>
   16efc:	add	r2, r0, r1
   16f00:	ldr	r2, [r7, r2]
   16f04:	add	r0, r2, r0
   16f08:	add	r0, r0, r1
   16f0c:	mov	r1, r6
   16f10:	add	r0, r7, r0
   16f14:	add	r0, r0, #4
   16f18:	bl	12e8c <strcmp@plt>
   16f1c:	sub	r7, r7, #4
   16f20:	sub	r5, r5, #1
   16f24:	cmp	r0, #0
   16f28:	bne	16ebc <test_scan@@Base+0xa00>
   16f2c:	cmp	r5, #3
   16f30:	bne	17178 <test_scan@@Base+0xcbc>
   16f34:	ldr	r0, [sp, #20]
   16f38:	ldr	r1, [sp, #24]
   16f3c:	movw	r9, #11665	; 0x2d91
   16f40:	sub	r5, sl, #1
   16f44:	movt	r9, #2
   16f48:	add	r6, r0, r1
   16f4c:	cmn	r5, #1
   16f50:	beq	17184 <test_scan@@Base+0xcc8>
   16f54:	cmp	sl, r5
   16f58:	bls	183d8 <test_scan@@Base+0x1f1c>
   16f5c:	ldr	r0, [r6]
   16f60:	adds	r1, r6, r0
   16f64:	beq	17b04 <test_scan@@Base+0x1648>
   16f68:	ldr	r1, [r6, r0]
   16f6c:	sub	r1, r0, r1
   16f70:	add	r1, r6, r1
   16f74:	ldrh	r2, [r1]
   16f78:	cmp	r2, #12
   16f7c:	bcc	17af8 <test_scan@@Base+0x163c>
   16f80:	ldrh	r1, [r1, #10]
   16f84:	cmp	r1, #0
   16f88:	beq	17af8 <test_scan@@Base+0x163c>
   16f8c:	add	r2, r0, r1
   16f90:	ldr	r2, [r6, r2]
   16f94:	add	r0, r2, r0
   16f98:	add	r0, r0, r1
   16f9c:	mov	r1, r6
   16fa0:	ldr	r7, [r1, r0]!
   16fa4:	cmp	r7, #8
   16fa8:	mov	r2, r7
   16fac:	add	r0, r1, #4
   16fb0:	mov	r1, r9
   16fb4:	movcs	r2, #8
   16fb8:	bl	12f70 <strncmp@plt>
   16fbc:	cmp	r0, #0
   16fc0:	mov	r1, r0
   16fc4:	mov	r2, #0
   16fc8:	sub	r6, r6, #4
   16fcc:	sub	r5, r5, #1
   16fd0:	mvneq	r1, #0
   16fd4:	cmp	r7, #8
   16fd8:	movwhi	r2, #1
   16fdc:	cmp	r0, #0
   16fe0:	movne	r2, r1
   16fe4:	cmp	r7, #8
   16fe8:	movcc	r2, r1
   16fec:	cmp	r2, #0
   16ff0:	bne	16f4c <test_scan@@Base+0xa90>
   16ff4:	cmp	r5, #3
   16ff8:	bne	17184 <test_scan@@Base+0xcc8>
   16ffc:	mvn	r0, sl
   17000:	sub	r1, r8, #4
   17004:	mov	r5, sl
   17008:	movw	r8, #11665	; 0x2d91
   1700c:	cmn	r0, #4
   17010:	mov	r4, r0
   17014:	str	r1, [sp, #12]
   17018:	movt	r8, #2
   1701c:	mvnls	r0, #3
   17020:	cmp	sl, #3
   17024:	sub	r0, r1, r0, lsl #2
   17028:	ldr	r1, [sp, #20]
   1702c:	movcs	r5, #3
   17030:	mov	r9, r5
   17034:	add	r6, r1, r0
   17038:	cmp	r5, #2
   1703c:	bcc	17184 <test_scan@@Base+0xcc8>
   17040:	sub	r5, r5, #1
   17044:	cmp	sl, r5
   17048:	bls	183d8 <test_scan@@Base+0x1f1c>
   1704c:	ldr	r0, [r6]
   17050:	adds	r1, r6, r0
   17054:	beq	17b04 <test_scan@@Base+0x1648>
   17058:	ldr	r1, [r6, r0]
   1705c:	sub	r1, r0, r1
   17060:	add	r1, r6, r1
   17064:	ldrh	r2, [r1]
   17068:	cmp	r2, #12
   1706c:	bcc	17af8 <test_scan@@Base+0x163c>
   17070:	ldrh	r1, [r1, #10]
   17074:	cmp	r1, #0
   17078:	beq	17af8 <test_scan@@Base+0x163c>
   1707c:	add	r2, r0, r1
   17080:	ldr	r2, [r6, r2]
   17084:	add	r0, r2, r0
   17088:	add	r0, r0, r1
   1708c:	mov	r1, r6
   17090:	ldr	r7, [r1, r0]!
   17094:	cmp	r7, #8
   17098:	mov	r2, r7
   1709c:	add	r0, r1, #4
   170a0:	mov	r1, r8
   170a4:	movcs	r2, #8
   170a8:	bl	12f70 <strncmp@plt>
   170ac:	cmp	r0, #0
   170b0:	mov	r1, r0
   170b4:	mov	r2, #0
   170b8:	sub	r6, r6, #4
   170bc:	mvneq	r1, #0
   170c0:	cmp	r7, #8
   170c4:	movwhi	r2, #1
   170c8:	cmp	r0, #0
   170cc:	movne	r2, r1
   170d0:	cmp	r7, #8
   170d4:	movcc	r2, r1
   170d8:	cmp	r2, #0
   170dc:	bne	17038 <test_scan@@Base+0xb7c>
   170e0:	cmp	r5, #2
   170e4:	bne	17184 <test_scan@@Base+0xcc8>
   170e8:	cmp	sl, #3
   170ec:	bcc	172f0 <test_scan@@Base+0xe34>
   170f0:	ldr	r0, [sp, #44]	; 0x2c
   170f4:	movw	r6, #10499	; 0x2903
   170f8:	mov	r5, #2
   170fc:	movt	r6, #2
   17100:	add	r7, r0, #12
   17104:	cmp	sl, r5
   17108:	bls	183d8 <test_scan@@Base+0x1f1c>
   1710c:	ldr	r0, [r7]
   17110:	adds	r1, r7, r0
   17114:	beq	17b04 <test_scan@@Base+0x1648>
   17118:	ldr	r1, [r7, r0]
   1711c:	sub	r1, r0, r1
   17120:	add	r1, r7, r1
   17124:	ldrh	r2, [r1]
   17128:	cmp	r2, #12
   1712c:	bcc	17af8 <test_scan@@Base+0x163c>
   17130:	ldrh	r1, [r1, #10]
   17134:	cmp	r1, #0
   17138:	beq	17af8 <test_scan@@Base+0x163c>
   1713c:	add	r2, r0, r1
   17140:	ldr	r2, [r7, r2]
   17144:	add	r0, r2, r0
   17148:	add	r0, r0, r1
   1714c:	mov	r1, r6
   17150:	add	r0, r7, r0
   17154:	add	r0, r0, #4
   17158:	bl	12e8c <strcmp@plt>
   1715c:	cmp	r0, #0
   17160:	beq	17190 <test_scan@@Base+0xcd4>
   17164:	add	r5, r5, #1
   17168:	add	r7, r7, #4
   1716c:	cmp	r5, sl
   17170:	bcc	17104 <test_scan@@Base+0xc48>
   17174:	b	172f0 <test_scan@@Base+0xe34>
   17178:	movw	r0, #21616	; 0x5470
   1717c:	movt	r0, #2
   17180:	b	16c40 <test_scan@@Base+0x784>
   17184:	movw	r0, #21584	; 0x5450
   17188:	movt	r0, #2
   1718c:	b	16c40 <test_scan@@Base+0x784>
   17190:	cmp	r5, #2
   17194:	bne	172f0 <test_scan@@Base+0xe34>
   17198:	ldr	r0, [sp, #44]	; 0x2c
   1719c:	movw	r8, #11665	; 0x2d91
   171a0:	mov	r5, #2
   171a4:	movt	r8, #2
   171a8:	add	r6, r0, #12
   171ac:	cmp	sl, r5
   171b0:	bls	183d8 <test_scan@@Base+0x1f1c>
   171b4:	ldr	r0, [r6]
   171b8:	adds	r1, r6, r0
   171bc:	beq	17b04 <test_scan@@Base+0x1648>
   171c0:	ldr	r1, [r6, r0]
   171c4:	sub	r1, r0, r1
   171c8:	add	r1, r6, r1
   171cc:	ldrh	r2, [r1]
   171d0:	cmp	r2, #12
   171d4:	bcc	17af8 <test_scan@@Base+0x163c>
   171d8:	ldrh	r1, [r1, #10]
   171dc:	cmp	r1, #0
   171e0:	beq	17af8 <test_scan@@Base+0x163c>
   171e4:	add	r2, r0, r1
   171e8:	ldr	r2, [r6, r2]
   171ec:	add	r0, r2, r0
   171f0:	add	r0, r0, r1
   171f4:	mov	r1, r6
   171f8:	ldr	r7, [r1, r0]!
   171fc:	cmp	r7, #8
   17200:	mov	r2, r7
   17204:	add	r0, r1, #4
   17208:	mov	r1, r8
   1720c:	movcs	r2, #8
   17210:	bl	12f70 <strncmp@plt>
   17214:	cmp	r0, #0
   17218:	mov	r1, r0
   1721c:	mov	r2, #0
   17220:	mvneq	r1, #0
   17224:	cmp	r7, #8
   17228:	movwhi	r2, #1
   1722c:	cmp	r0, #0
   17230:	movne	r2, r1
   17234:	cmp	r7, #8
   17238:	movcc	r2, r1
   1723c:	cmp	r2, #0
   17240:	beq	17258 <test_scan@@Base+0xd9c>
   17244:	add	r5, r5, #1
   17248:	add	r6, r6, #4
   1724c:	cmp	r5, sl
   17250:	bcc	171ac <test_scan@@Base+0xcf0>
   17254:	b	172f0 <test_scan@@Base+0xe34>
   17258:	cmp	r5, #2
   1725c:	bne	172f0 <test_scan@@Base+0xe34>
   17260:	cmp	sl, #4
   17264:	bcc	174f4 <test_scan@@Base+0x1038>
   17268:	ldr	r0, [sp, #44]	; 0x2c
   1726c:	movw	r6, #10499	; 0x2903
   17270:	mov	r5, #3
   17274:	movt	r6, #2
   17278:	add	r7, r0, #16
   1727c:	cmp	sl, r5
   17280:	bls	183d8 <test_scan@@Base+0x1f1c>
   17284:	ldr	r0, [r7]
   17288:	adds	r1, r7, r0
   1728c:	beq	17b04 <test_scan@@Base+0x1648>
   17290:	ldr	r1, [r7, r0]
   17294:	sub	r1, r0, r1
   17298:	add	r1, r7, r1
   1729c:	ldrh	r2, [r1]
   172a0:	cmp	r2, #12
   172a4:	bcc	17af8 <test_scan@@Base+0x163c>
   172a8:	ldrh	r1, [r1, #10]
   172ac:	cmp	r1, #0
   172b0:	beq	17af8 <test_scan@@Base+0x163c>
   172b4:	add	r2, r0, r1
   172b8:	ldr	r2, [r7, r2]
   172bc:	add	r0, r2, r0
   172c0:	add	r0, r0, r1
   172c4:	mov	r1, r6
   172c8:	add	r0, r7, r0
   172cc:	add	r0, r0, #4
   172d0:	bl	12e8c <strcmp@plt>
   172d4:	cmp	r0, #0
   172d8:	beq	172fc <test_scan@@Base+0xe40>
   172dc:	add	r5, r5, #1
   172e0:	add	r7, r7, #4
   172e4:	cmp	r5, sl
   172e8:	bcc	1727c <test_scan@@Base+0xdc0>
   172ec:	b	174f4 <test_scan@@Base+0x1038>
   172f0:	movw	r0, #21536	; 0x5420
   172f4:	movt	r0, #2
   172f8:	b	16c40 <test_scan@@Base+0x784>
   172fc:	cmp	r5, #4
   17300:	bne	174f4 <test_scan@@Base+0x1038>
   17304:	cmp	sl, #2
   17308:	bcc	175c0 <test_scan@@Base+0x1104>
   1730c:	ldr	r0, [sp, #44]	; 0x2c
   17310:	movw	r6, #11604	; 0x2d54
   17314:	mov	r7, #1
   17318:	movt	r6, #2
   1731c:	add	r5, r0, #12
   17320:	cmp	sl, r7
   17324:	bls	183d8 <test_scan@@Base+0x1f1c>
   17328:	ldr	r0, [r5, #-4]
   1732c:	add	r1, r5, r0
   17330:	cmp	r1, #4
   17334:	beq	17b04 <test_scan@@Base+0x1648>
   17338:	ldr	r1, [r1, #-4]
   1733c:	sub	r1, r0, r1
   17340:	add	r1, r5, r1
   17344:	ldrh	r2, [r1, #-4]
   17348:	cmp	r2, #12
   1734c:	bcc	17af8 <test_scan@@Base+0x163c>
   17350:	ldrh	r1, [r1, #6]
   17354:	cmp	r1, #0
   17358:	beq	17af8 <test_scan@@Base+0x163c>
   1735c:	add	r2, r0, r1
   17360:	add	r2, r5, r2
   17364:	ldr	r2, [r2, #-4]
   17368:	add	r0, r2, r0
   1736c:	add	r0, r0, r1
   17370:	mov	r1, r6
   17374:	add	r0, r5, r0
   17378:	bl	12e8c <strcmp@plt>
   1737c:	cmp	r0, #0
   17380:	beq	175a0 <test_scan@@Base+0x10e4>
   17384:	add	r7, r7, #1
   17388:	add	r5, r5, #4
   1738c:	cmp	r7, r9
   17390:	bcc	17320 <test_scan@@Base+0xe64>
   17394:	cmp	sl, #2
   17398:	bcc	175c0 <test_scan@@Base+0x1104>
   1739c:	ldr	r0, [sp, #44]	; 0x2c
   173a0:	movw	r6, #10417	; 0x28b1
   173a4:	mov	r7, #1
   173a8:	movt	r6, #2
   173ac:	add	r5, r0, #12
   173b0:	cmp	sl, r7
   173b4:	bls	183d8 <test_scan@@Base+0x1f1c>
   173b8:	ldr	r0, [r5, #-4]
   173bc:	add	r1, r5, r0
   173c0:	cmp	r1, #4
   173c4:	beq	17b04 <test_scan@@Base+0x1648>
   173c8:	ldr	r1, [r1, #-4]
   173cc:	sub	r1, r0, r1
   173d0:	add	r1, r5, r1
   173d4:	ldrh	r2, [r1, #-4]
   173d8:	cmp	r2, #12
   173dc:	bcc	17af8 <test_scan@@Base+0x163c>
   173e0:	ldrh	r1, [r1, #6]
   173e4:	cmp	r1, #0
   173e8:	beq	17af8 <test_scan@@Base+0x163c>
   173ec:	add	r2, r0, r1
   173f0:	add	r2, r5, r2
   173f4:	ldr	r2, [r2, #-4]
   173f8:	add	r0, r2, r0
   173fc:	add	r0, r0, r1
   17400:	mov	r1, r6
   17404:	add	r0, r5, r0
   17408:	bl	12e8c <strcmp@plt>
   1740c:	cmp	r0, #0
   17410:	beq	175ac <test_scan@@Base+0x10f0>
   17414:	add	r7, r7, #1
   17418:	add	r5, r5, #4
   1741c:	cmp	r7, r9
   17420:	bcc	173b0 <test_scan@@Base+0xef4>
   17424:	cmp	sl, #2
   17428:	bcc	175c0 <test_scan@@Base+0x1104>
   1742c:	ldr	r0, [sp, #44]	; 0x2c
   17430:	movw	r8, #10459	; 0x28db
   17434:	mov	r6, #1
   17438:	mov	r5, #0
   1743c:	movt	r8, #2
   17440:	add	r0, r0, #8
   17444:	str	r0, [sp, #8]
   17448:	cmp	sl, r6
   1744c:	bls	183d8 <test_scan@@Base+0x1f1c>
   17450:	ldr	r0, [sp, #56]	; 0x38
   17454:	ldr	r2, [sp, #8]
   17458:	add	r0, r0, r5
   1745c:	ldr	r0, [r0, #8]
   17460:	add	r1, r5, r0
   17464:	adds	r1, r2, r1
   17468:	beq	17b04 <test_scan@@Base+0x1648>
   1746c:	ldr	r1, [sp, #56]	; 0x38
   17470:	ldr	r2, [sp, #44]	; 0x2c
   17474:	add	r1, r1, r0
   17478:	add	r1, r1, r5
   1747c:	ldr	r1, [r1, #8]
   17480:	sub	r1, r0, r1
   17484:	add	r1, r2, r1
   17488:	add	r1, r1, r5
   1748c:	ldrh	r2, [r1, #8]
   17490:	cmp	r2, #12
   17494:	bcc	17af8 <test_scan@@Base+0x163c>
   17498:	ldrh	r1, [r1, #18]
   1749c:	cmp	r1, #0
   174a0:	beq	17af8 <test_scan@@Base+0x163c>
   174a4:	ldr	r3, [sp, #56]	; 0x38
   174a8:	add	r2, r0, r1
   174ac:	add	r2, r3, r2
   174b0:	add	r2, r2, r5
   174b4:	ldr	r2, [r2, #8]
   174b8:	add	r0, r2, r0
   174bc:	add	r0, r0, r1
   174c0:	ldr	r1, [sp, #44]	; 0x2c
   174c4:	add	r0, r5, r0
   174c8:	add	r0, r1, r0
   174cc:	mov	r1, r8
   174d0:	add	r0, r0, #12
   174d4:	bl	12e8c <strcmp@plt>
   174d8:	cmp	r0, #0
   174dc:	beq	175b8 <test_scan@@Base+0x10fc>
   174e0:	add	r6, r6, #1
   174e4:	add	r5, r5, #4
   174e8:	cmp	r6, r9
   174ec:	bcc	17448 <test_scan@@Base+0xf8c>
   174f0:	b	175c0 <test_scan@@Base+0x1104>
   174f4:	movw	r0, #21504	; 0x5400
   174f8:	movt	r0, #2
   174fc:	b	16c40 <test_scan@@Base+0x784>
   17500:	movw	r0, #13899	; 0x364b
   17504:	movw	r1, #13609	; 0x3529
   17508:	movw	r3, #14061	; 0x36ed
   1750c:	mov	r2, #235	; 0xeb
   17510:	movt	r0, #2
   17514:	movt	r1, #2
   17518:	movt	r3, #2
   1751c:	bl	12f88 <__assert_fail@plt>
   17520:	movw	r0, #13160	; 0x3368
   17524:	movw	r1, #13198	; 0x338e
   17528:	movw	r3, #14858	; 0x3a0a
   1752c:	movw	r2, #711	; 0x2c7
   17530:	movt	r0, #2
   17534:	movt	r1, #2
   17538:	movt	r3, #2
   1753c:	bl	12f88 <__assert_fail@plt>
   17540:	movw	r0, #11542	; 0x2d16
   17544:	movw	r1, #10320	; 0x2850
   17548:	movw	r3, #11619	; 0x2d63
   1754c:	movw	r2, #1305	; 0x519
   17550:	movt	r0, #2
   17554:	movt	r1, #2
   17558:	movt	r3, #2
   1755c:	bl	12f88 <__assert_fail@plt>
   17560:	movw	r0, #11653	; 0x2d85
   17564:	movw	r1, #10320	; 0x2850
   17568:	movw	r3, #11619	; 0x2d63
   1756c:	movw	r2, #1307	; 0x51b
   17570:	movt	r0, #2
   17574:	movt	r1, #2
   17578:	movt	r3, #2
   1757c:	bl	12f88 <__assert_fail@plt>
   17580:	movw	r0, #11657	; 0x2d89
   17584:	movw	r1, #10320	; 0x2850
   17588:	movw	r3, #11619	; 0x2d63
   1758c:	movw	r2, #1309	; 0x51d
   17590:	movt	r0, #2
   17594:	movt	r1, #2
   17598:	movt	r3, #2
   1759c:	bl	12f88 <__assert_fail@plt>
   175a0:	movw	r0, #21456	; 0x53d0
   175a4:	movt	r0, #2
   175a8:	b	16c40 <test_scan@@Base+0x784>
   175ac:	movw	r0, #21408	; 0x53a0
   175b0:	movt	r0, #2
   175b4:	b	16c40 <test_scan@@Base+0x784>
   175b8:	cmp	r5, #0
   175bc:	beq	175cc <test_scan@@Base+0x1110>
   175c0:	movw	r0, #21360	; 0x5370
   175c4:	movt	r0, #2
   175c8:	b	16c40 <test_scan@@Base+0x784>
   175cc:	movw	r8, #10499	; 0x2903
   175d0:	mov	r6, #1
   175d4:	mov	r5, #0
   175d8:	movt	r8, #2
   175dc:	cmp	sl, r6
   175e0:	bls	183d8 <test_scan@@Base+0x1f1c>
   175e4:	ldr	r0, [sp, #56]	; 0x38
   175e8:	ldr	r2, [sp, #8]
   175ec:	add	r0, r0, r5
   175f0:	ldr	r0, [r0, #8]
   175f4:	add	r1, r5, r0
   175f8:	adds	r1, r2, r1
   175fc:	beq	17b04 <test_scan@@Base+0x1648>
   17600:	ldr	r2, [sp, #56]	; 0x38
   17604:	add	r1, r2, r0
   17608:	add	r1, r1, r5
   1760c:	ldr	r1, [r1, #8]
   17610:	sub	r1, r0, r1
   17614:	add	r1, r2, r1
   17618:	add	r1, r1, r5
   1761c:	ldrh	r2, [r1, #8]
   17620:	cmp	r2, #12
   17624:	bcc	17af8 <test_scan@@Base+0x163c>
   17628:	ldrh	r1, [r1, #18]
   1762c:	cmp	r1, #0
   17630:	beq	17af8 <test_scan@@Base+0x163c>
   17634:	ldr	r3, [sp, #56]	; 0x38
   17638:	add	r2, r0, r1
   1763c:	add	r2, r3, r2
   17640:	add	r2, r2, r5
   17644:	ldr	r2, [r2, #8]
   17648:	add	r0, r2, r0
   1764c:	add	r0, r0, r1
   17650:	ldr	r1, [sp, #44]	; 0x2c
   17654:	add	r0, r5, r0
   17658:	add	r0, r1, r0
   1765c:	mov	r1, r8
   17660:	add	r0, r0, #12
   17664:	bl	12e8c <strcmp@plt>
   17668:	cmp	r0, #0
   1766c:	beq	17684 <test_scan@@Base+0x11c8>
   17670:	add	r6, r6, #1
   17674:	add	r5, r5, #4
   17678:	cmp	r6, r9
   1767c:	bcc	175dc <test_scan@@Base+0x1120>
   17680:	b	177b4 <test_scan@@Base+0x12f8>
   17684:	cmp	r5, #4
   17688:	bne	177b4 <test_scan@@Base+0x12f8>
   1768c:	ldr	r0, [sp, #44]	; 0x2c
   17690:	movw	r6, #11512	; 0x2cf8
   17694:	mov	r7, #1
   17698:	movt	r6, #2
   1769c:	add	r5, r0, #12
   176a0:	cmp	sl, r7
   176a4:	bls	183d8 <test_scan@@Base+0x1f1c>
   176a8:	ldr	r0, [r5, #-4]
   176ac:	add	r1, r5, r0
   176b0:	cmp	r1, #4
   176b4:	beq	17b04 <test_scan@@Base+0x1648>
   176b8:	ldr	r1, [r1, #-4]
   176bc:	sub	r1, r0, r1
   176c0:	add	r1, r5, r1
   176c4:	ldrh	r2, [r1, #-4]
   176c8:	cmp	r2, #12
   176cc:	bcc	17af8 <test_scan@@Base+0x163c>
   176d0:	ldrh	r1, [r1, #6]
   176d4:	cmp	r1, #0
   176d8:	beq	17af8 <test_scan@@Base+0x163c>
   176dc:	add	r2, r0, r1
   176e0:	add	r2, r5, r2
   176e4:	ldr	r2, [r2, #-4]
   176e8:	add	r0, r2, r0
   176ec:	add	r0, r0, r1
   176f0:	mov	r1, r6
   176f4:	add	r0, r5, r0
   176f8:	bl	12e8c <strcmp@plt>
   176fc:	cmp	r0, #0
   17700:	beq	177c0 <test_scan@@Base+0x1304>
   17704:	add	r7, r7, #1
   17708:	add	r5, r5, #4
   1770c:	cmp	r7, r9
   17710:	bcc	176a0 <test_scan@@Base+0x11e4>
   17714:	ldr	r1, [sp, #12]
   17718:	mov	r0, r4
   1771c:	cmn	r4, #4
   17720:	movw	r6, #11604	; 0x2d54
   17724:	mov	r7, r9
   17728:	mvnls	r0, #3
   1772c:	movt	r6, #2
   17730:	sub	r0, r1, r0, lsl #2
   17734:	ldr	r1, [sp, #20]
   17738:	add	r5, r1, r0
   1773c:	subs	r7, r7, #1
   17740:	bls	177cc <test_scan@@Base+0x1310>
   17744:	cmp	sl, r7
   17748:	bls	183d8 <test_scan@@Base+0x1f1c>
   1774c:	ldr	r0, [r5]
   17750:	adds	r1, r5, r0
   17754:	beq	17b04 <test_scan@@Base+0x1648>
   17758:	ldr	r1, [r5, r0]
   1775c:	sub	r1, r0, r1
   17760:	add	r1, r5, r1
   17764:	ldrh	r2, [r1]
   17768:	cmp	r2, #12
   1776c:	bcc	17af8 <test_scan@@Base+0x163c>
   17770:	ldrh	r1, [r1, #10]
   17774:	cmp	r1, #0
   17778:	beq	17af8 <test_scan@@Base+0x163c>
   1777c:	add	r2, r0, r1
   17780:	ldr	r2, [r5, r2]
   17784:	add	r0, r2, r0
   17788:	add	r0, r0, r1
   1778c:	mov	r1, r6
   17790:	add	r0, r5, r0
   17794:	add	r0, r0, #4
   17798:	bl	12e8c <strcmp@plt>
   1779c:	sub	r5, r5, #4
   177a0:	cmp	r0, #0
   177a4:	bne	1773c <test_scan@@Base+0x1280>
   177a8:	movw	r0, #21216	; 0x52e0
   177ac:	movt	r0, #2
   177b0:	b	16c40 <test_scan@@Base+0x784>
   177b4:	movw	r0, #21312	; 0x5340
   177b8:	movt	r0, #2
   177bc:	b	16c40 <test_scan@@Base+0x784>
   177c0:	movw	r0, #21264	; 0x5310
   177c4:	movt	r0, #2
   177c8:	b	16c40 <test_scan@@Base+0x784>
   177cc:	ldr	r1, [sp, #12]
   177d0:	mov	r0, r4
   177d4:	cmn	r4, #4
   177d8:	movw	r6, #10417	; 0x28b1
   177dc:	mov	r7, r9
   177e0:	mvnls	r0, #3
   177e4:	movt	r6, #2
   177e8:	sub	r0, r1, r0, lsl #2
   177ec:	ldr	r1, [sp, #20]
   177f0:	add	r5, r1, r0
   177f4:	subs	r7, r7, #1
   177f8:	bls	1786c <test_scan@@Base+0x13b0>
   177fc:	cmp	sl, r7
   17800:	bls	183d8 <test_scan@@Base+0x1f1c>
   17804:	ldr	r0, [r5]
   17808:	adds	r1, r5, r0
   1780c:	beq	17b04 <test_scan@@Base+0x1648>
   17810:	ldr	r1, [r5, r0]
   17814:	sub	r1, r0, r1
   17818:	add	r1, r5, r1
   1781c:	ldrh	r2, [r1]
   17820:	cmp	r2, #12
   17824:	bcc	17af8 <test_scan@@Base+0x163c>
   17828:	ldrh	r1, [r1, #10]
   1782c:	cmp	r1, #0
   17830:	beq	17af8 <test_scan@@Base+0x163c>
   17834:	add	r2, r0, r1
   17838:	ldr	r2, [r5, r2]
   1783c:	add	r0, r2, r0
   17840:	add	r0, r0, r1
   17844:	mov	r1, r6
   17848:	add	r0, r5, r0
   1784c:	add	r0, r0, #4
   17850:	bl	12e8c <strcmp@plt>
   17854:	sub	r5, r5, #4
   17858:	cmp	r0, #0
   1785c:	bne	177f4 <test_scan@@Base+0x1338>
   17860:	movw	r0, #21168	; 0x52b0
   17864:	movt	r0, #2
   17868:	b	16c40 <test_scan@@Base+0x784>
   1786c:	ldr	r1, [sp, #12]
   17870:	ldr	r2, [sp, #20]
   17874:	mov	r0, r4
   17878:	cmn	r4, #4
   1787c:	movw	r8, #10459	; 0x28db
   17880:	mvnls	r0, #3
   17884:	movt	r8, #2
   17888:	sub	r1, r1, r0, lsl #2
   1788c:	add	r5, r2, r1
   17890:	mvn	r1, #1
   17894:	sub	r6, r1, r0
   17898:	add	r0, r6, #1
   1789c:	cmp	r0, #2
   178a0:	bcc	17914 <test_scan@@Base+0x1458>
   178a4:	cmp	sl, r6
   178a8:	bls	183d8 <test_scan@@Base+0x1f1c>
   178ac:	ldr	r0, [r5]
   178b0:	adds	r1, r5, r0
   178b4:	beq	17b04 <test_scan@@Base+0x1648>
   178b8:	ldr	r1, [r5, r0]
   178bc:	sub	r1, r0, r1
   178c0:	add	r1, r5, r1
   178c4:	ldrh	r2, [r1]
   178c8:	cmp	r2, #12
   178cc:	bcc	17af8 <test_scan@@Base+0x163c>
   178d0:	ldrh	r1, [r1, #10]
   178d4:	cmp	r1, #0
   178d8:	beq	17af8 <test_scan@@Base+0x163c>
   178dc:	add	r2, r0, r1
   178e0:	ldr	r2, [r5, r2]
   178e4:	add	r0, r2, r0
   178e8:	add	r0, r0, r1
   178ec:	mov	r1, r8
   178f0:	add	r0, r5, r0
   178f4:	add	r0, r0, #4
   178f8:	bl	12e8c <strcmp@plt>
   178fc:	sub	r5, r5, #4
   17900:	sub	r6, r6, #1
   17904:	cmp	r0, #0
   17908:	bne	17898 <test_scan@@Base+0x13dc>
   1790c:	cmp	r6, #0
   17910:	beq	17920 <test_scan@@Base+0x1464>
   17914:	movw	r0, #21120	; 0x5280
   17918:	movt	r0, #2
   1791c:	b	16c40 <test_scan@@Base+0x784>
   17920:	ldr	r1, [sp, #12]
   17924:	mov	r0, r4
   17928:	cmn	r4, #4
   1792c:	movw	r6, #10499	; 0x2903
   17930:	mov	r7, r9
   17934:	mvnls	r0, #3
   17938:	movt	r6, #2
   1793c:	sub	r0, r1, r0, lsl #2
   17940:	ldr	r1, [sp, #20]
   17944:	add	r5, r1, r0
   17948:	cmp	r7, #2
   1794c:	bcc	17a58 <test_scan@@Base+0x159c>
   17950:	sub	r7, r7, #1
   17954:	cmp	sl, r7
   17958:	bls	183d8 <test_scan@@Base+0x1f1c>
   1795c:	ldr	r0, [r5]
   17960:	adds	r1, r5, r0
   17964:	beq	17b04 <test_scan@@Base+0x1648>
   17968:	ldr	r1, [r5, r0]
   1796c:	sub	r1, r0, r1
   17970:	add	r1, r5, r1
   17974:	ldrh	r2, [r1]
   17978:	cmp	r2, #12
   1797c:	bcc	17af8 <test_scan@@Base+0x163c>
   17980:	ldrh	r1, [r1, #10]
   17984:	cmp	r1, #0
   17988:	beq	17af8 <test_scan@@Base+0x163c>
   1798c:	add	r2, r0, r1
   17990:	ldr	r2, [r5, r2]
   17994:	add	r0, r2, r0
   17998:	add	r0, r0, r1
   1799c:	mov	r1, r6
   179a0:	add	r0, r5, r0
   179a4:	add	r0, r0, #4
   179a8:	bl	12e8c <strcmp@plt>
   179ac:	sub	r5, r5, #4
   179b0:	cmp	r0, #0
   179b4:	bne	17948 <test_scan@@Base+0x148c>
   179b8:	cmp	r7, #2
   179bc:	bne	17a58 <test_scan@@Base+0x159c>
   179c0:	ldr	r0, [sp, #12]
   179c4:	ldr	r1, [sp, #20]
   179c8:	cmn	r4, #4
   179cc:	movw	r6, #11512	; 0x2cf8
   179d0:	mvnls	r4, #3
   179d4:	movt	r6, #2
   179d8:	sub	r0, r0, r4, lsl #2
   179dc:	add	r5, r1, r0
   179e0:	subs	r9, r9, #1
   179e4:	bls	17a64 <test_scan@@Base+0x15a8>
   179e8:	cmp	sl, r9
   179ec:	bls	183d8 <test_scan@@Base+0x1f1c>
   179f0:	ldr	r0, [r5]
   179f4:	cmn	r5, r0
   179f8:	beq	17b04 <test_scan@@Base+0x1648>
   179fc:	ldr	r1, [r5, r0]
   17a00:	sub	r1, r0, r1
   17a04:	add	r1, r5, r1
   17a08:	ldrh	r2, [r1]
   17a0c:	cmp	r2, #12
   17a10:	bcc	17af8 <test_scan@@Base+0x163c>
   17a14:	ldrh	r1, [r1, #10]
   17a18:	cmp	r1, #0
   17a1c:	beq	17af8 <test_scan@@Base+0x163c>
   17a20:	add	r2, r0, r1
   17a24:	ldr	r2, [r5, r2]
   17a28:	add	r0, r2, r0
   17a2c:	add	r0, r0, r1
   17a30:	mov	r1, r6
   17a34:	add	r0, r5, r0
   17a38:	add	r0, r0, #4
   17a3c:	bl	12e8c <strcmp@plt>
   17a40:	sub	r5, r5, #4
   17a44:	cmp	r0, #0
   17a48:	bne	179e0 <test_scan@@Base+0x1524>
   17a4c:	movw	r0, #21024	; 0x5220
   17a50:	movt	r0, #2
   17a54:	b	16c40 <test_scan@@Base+0x784>
   17a58:	movw	r0, #21072	; 0x5250
   17a5c:	movt	r0, #2
   17a60:	b	16c40 <test_scan@@Base+0x784>
   17a64:	ldr	r0, [sp, #20]
   17a68:	ldr	r1, [sp, #24]
   17a6c:	movw	r6, #10417	; 0x28b1
   17a70:	mov	r7, sl
   17a74:	movt	r6, #2
   17a78:	add	r5, r0, r1
   17a7c:	cmp	r7, sl
   17a80:	bls	17b24 <test_scan@@Base+0x1668>
   17a84:	sub	r7, r7, #1
   17a88:	cmp	sl, r7
   17a8c:	bls	183d8 <test_scan@@Base+0x1f1c>
   17a90:	ldr	r0, [r5]
   17a94:	adds	r1, r5, r0
   17a98:	beq	17b04 <test_scan@@Base+0x1648>
   17a9c:	ldr	r1, [r5, r0]
   17aa0:	sub	r1, r0, r1
   17aa4:	add	r1, r5, r1
   17aa8:	ldrh	r2, [r1]
   17aac:	cmp	r2, #12
   17ab0:	bcc	17af8 <test_scan@@Base+0x163c>
   17ab4:	ldrh	r1, [r1, #10]
   17ab8:	cmp	r1, #0
   17abc:	beq	17af8 <test_scan@@Base+0x163c>
   17ac0:	add	r2, r0, r1
   17ac4:	ldr	r2, [r5, r2]
   17ac8:	add	r0, r2, r0
   17acc:	add	r0, r0, r1
   17ad0:	mov	r1, r6
   17ad4:	add	r0, r5, r0
   17ad8:	add	r0, r0, #4
   17adc:	bl	12e8c <strcmp@plt>
   17ae0:	sub	r5, r5, #4
   17ae4:	cmp	r0, #0
   17ae8:	bne	17a7c <test_scan@@Base+0x15c0>
   17aec:	movw	r0, #20976	; 0x51f0
   17af0:	movt	r0, #2
   17af4:	b	16c40 <test_scan@@Base+0x784>
   17af8:	movw	r0, #14511	; 0x38af
   17afc:	movt	r0, #2
   17b00:	b	17b0c <test_scan@@Base+0x1650>
   17b04:	movw	r0, #13160	; 0x3368
   17b08:	movt	r0, #2
   17b0c:	movw	r1, #13198	; 0x338e
   17b10:	movw	r3, #14430	; 0x385e
   17b14:	movw	r2, #699	; 0x2bb
   17b18:	movt	r1, #2
   17b1c:	movt	r3, #2
   17b20:	bl	12f88 <__assert_fail@plt>
   17b24:	ldr	r0, [sp, #52]	; 0x34
   17b28:	movw	r1, #10459	; 0x28db
   17b2c:	movt	r1, #2
   17b30:	bl	1847c <test_scan@@Base+0x1fc0>
   17b34:	cmp	r0, #1
   17b38:	bne	17b60 <test_scan@@Base+0x16a4>
   17b3c:	ldr	r0, [sp, #52]	; 0x34
   17b40:	movw	r1, #11604	; 0x2d54
   17b44:	movt	r1, #2
   17b48:	bl	1847c <test_scan@@Base+0x1fc0>
   17b4c:	cmp	r0, #0
   17b50:	beq	17b6c <test_scan@@Base+0x16b0>
   17b54:	movw	r0, #20912	; 0x51b0
   17b58:	movt	r0, #2
   17b5c:	b	16c40 <test_scan@@Base+0x784>
   17b60:	movw	r0, #20944	; 0x51d0
   17b64:	movt	r0, #2
   17b68:	b	16c40 <test_scan@@Base+0x784>
   17b6c:	ldr	r0, [sp, #52]	; 0x34
   17b70:	movw	r1, #10417	; 0x28b1
   17b74:	movt	r1, #2
   17b78:	bl	1847c <test_scan@@Base+0x1fc0>
   17b7c:	cmp	r0, #1
   17b80:	bne	17bf8 <test_scan@@Base+0x173c>
   17b84:	ldr	r0, [sp, #52]	; 0x34
   17b88:	movw	r1, #10499	; 0x2903
   17b8c:	movt	r1, #2
   17b90:	bl	1847c <test_scan@@Base+0x1fc0>
   17b94:	cmp	r0, #2
   17b98:	bne	17c04 <test_scan@@Base+0x1748>
   17b9c:	ldr	r0, [sp, #32]
   17ba0:	ldr	r1, [sp, #28]
   17ba4:	ldr	r0, [r1, r0]
   17ba8:	cmp	r0, #0
   17bac:	beq	17c18 <test_scan@@Base+0x175c>
   17bb0:	ldr	r1, [fp, #-44]	; 0xffffffd4
   17bb4:	ldr	r2, [sp, #32]
   17bb8:	mov	r7, #0
   17bbc:	add	r2, r1, r2
   17bc0:	ldr	r1, [fp, #-52]	; 0xffffffcc
   17bc4:	add	ip, r2, r1
   17bc8:	ldr	r1, [sp, #20]
   17bcc:	add	r3, r1, ip
   17bd0:	add	r6, r3, #4
   17bd4:	cmp	r0, r7
   17bd8:	bls	18410 <test_scan@@Base+0x1f54>
   17bdc:	ldrb	r5, [r6, r7]
   17be0:	cmp	r5, #6
   17be4:	beq	17c10 <test_scan@@Base+0x1754>
   17be8:	add	r7, r7, #1
   17bec:	cmp	r7, r0
   17bf0:	bcc	17bd4 <test_scan@@Base+0x1718>
   17bf4:	b	17c18 <test_scan@@Base+0x175c>
   17bf8:	movw	r0, #20880	; 0x5190
   17bfc:	movt	r0, #2
   17c00:	b	16c40 <test_scan@@Base+0x784>
   17c04:	movw	r0, #20848	; 0x5170
   17c08:	movt	r0, #2
   17c0c:	b	16c40 <test_scan@@Base+0x784>
   17c10:	cmp	r7, #0
   17c14:	beq	17c24 <test_scan@@Base+0x1768>
   17c18:	movw	r0, #20800	; 0x5140
   17c1c:	movt	r0, #2
   17c20:	b	16c40 <test_scan@@Base+0x784>
   17c24:	mov	r7, #0
   17c28:	cmp	r0, r7
   17c2c:	bls	18410 <test_scan@@Base+0x1f54>
   17c30:	ldrb	r5, [r6, r7]
   17c34:	cmp	r5, #1
   17c38:	beq	17c4c <test_scan@@Base+0x1790>
   17c3c:	add	r7, r7, #1
   17c40:	cmp	r7, r0
   17c44:	bcc	17c28 <test_scan@@Base+0x176c>
   17c48:	b	17cdc <test_scan@@Base+0x1820>
   17c4c:	cmp	r7, #2
   17c50:	bne	17cdc <test_scan@@Base+0x1820>
   17c54:	cmp	r0, #4
   17c58:	bcc	17c90 <test_scan@@Base+0x17d4>
   17c5c:	add	r7, r3, #7
   17c60:	mov	r5, #0
   17c64:	add	r1, r5, #3
   17c68:	cmp	r0, r1
   17c6c:	bls	18410 <test_scan@@Base+0x1f54>
   17c70:	ldrb	r1, [r7, r5]
   17c74:	cmp	r1, #1
   17c78:	beq	17ce8 <test_scan@@Base+0x182c>
   17c7c:	add	r1, r5, #1
   17c80:	add	r5, r5, #4
   17c84:	cmp	r5, r0
   17c88:	mov	r5, r1
   17c8c:	bcc	17c64 <test_scan@@Base+0x17a8>
   17c90:	mov	r7, #0
   17c94:	cmp	r0, r7
   17c98:	bls	18410 <test_scan@@Base+0x1f54>
   17c9c:	ldrb	r1, [r6, r7]
   17ca0:	cmp	r1, #5
   17ca4:	beq	17d78 <test_scan@@Base+0x18bc>
   17ca8:	add	r7, r7, #1
   17cac:	cmp	r7, r0
   17cb0:	bcc	17c94 <test_scan@@Base+0x17d8>
   17cb4:	mov	r7, #0
   17cb8:	cmp	r0, r7
   17cbc:	bls	18410 <test_scan@@Base+0x1f54>
   17cc0:	ldrb	r1, [r6, r7]
   17cc4:	cmp	r1, #2
   17cc8:	beq	17cf4 <test_scan@@Base+0x1838>
   17ccc:	add	r7, r7, #1
   17cd0:	cmp	r7, r0
   17cd4:	bcc	17cb8 <test_scan@@Base+0x17fc>
   17cd8:	b	17d24 <test_scan@@Base+0x1868>
   17cdc:	movw	r0, #20752	; 0x5110
   17ce0:	movt	r0, #2
   17ce4:	b	16c40 <test_scan@@Base+0x784>
   17ce8:	movw	r0, #20688	; 0x50d0
   17cec:	movt	r0, #2
   17cf0:	b	16c40 <test_scan@@Base+0x784>
   17cf4:	cmp	r7, #6
   17cf8:	bne	17d24 <test_scan@@Base+0x1868>
   17cfc:	mov	r7, #0
   17d00:	cmp	r0, r7
   17d04:	bls	18410 <test_scan@@Base+0x1f54>
   17d08:	ldrb	r1, [r6, r7]
   17d0c:	cmp	r1, #3
   17d10:	beq	17d30 <test_scan@@Base+0x1874>
   17d14:	add	r7, r7, #1
   17d18:	cmp	r7, r0
   17d1c:	bcc	17d00 <test_scan@@Base+0x1844>
   17d20:	b	17d78 <test_scan@@Base+0x18bc>
   17d24:	movw	r0, #20576	; 0x5060
   17d28:	movt	r0, #2
   17d2c:	b	16c40 <test_scan@@Base+0x784>
   17d30:	cmp	r7, #3
   17d34:	bne	17d78 <test_scan@@Base+0x18bc>
   17d38:	cmp	r0, #4
   17d3c:	bcc	17d8c <test_scan@@Base+0x18d0>
   17d40:	add	r7, r3, #7
   17d44:	mov	r6, #0
   17d48:	add	r1, r6, #3
   17d4c:	cmp	r0, r1
   17d50:	bls	18410 <test_scan@@Base+0x1f54>
   17d54:	ldrb	r1, [r7, r6]
   17d58:	cmp	r1, #3
   17d5c:	beq	17d84 <test_scan@@Base+0x18c8>
   17d60:	add	r1, r6, #1
   17d64:	add	r6, r6, #4
   17d68:	cmp	r6, r0
   17d6c:	mov	r6, r1
   17d70:	bcc	17d48 <test_scan@@Base+0x188c>
   17d74:	b	17d8c <test_scan@@Base+0x18d0>
   17d78:	movw	r0, #20624	; 0x5090
   17d7c:	movt	r0, #2
   17d80:	b	16c40 <test_scan@@Base+0x784>
   17d84:	cmp	r6, #0
   17d88:	beq	17d98 <test_scan@@Base+0x18dc>
   17d8c:	movw	r0, #20512	; 0x5020
   17d90:	movt	r0, #2
   17d94:	b	16c40 <test_scan@@Base+0x784>
   17d98:	cmp	r0, #5
   17d9c:	bcc	183f8 <test_scan@@Base+0x1f3c>
   17da0:	add	r3, r3, #8
   17da4:	mov	r7, #0
   17da8:	add	r1, r7, #4
   17dac:	cmp	r0, r1
   17db0:	bls	18410 <test_scan@@Base+0x1f54>
   17db4:	ldrb	r1, [r3, r7]
   17db8:	cmp	r1, #3
   17dbc:	beq	17dd8 <test_scan@@Base+0x191c>
   17dc0:	add	r1, r7, #1
   17dc4:	add	r7, r7, #5
   17dc8:	cmp	r7, r0
   17dcc:	mov	r7, r1
   17dd0:	bcc	17da8 <test_scan@@Base+0x18ec>
   17dd4:	b	183f8 <test_scan@@Base+0x1f3c>
   17dd8:	cmp	r7, #1
   17ddc:	bne	183f8 <test_scan@@Base+0x1f3c>
   17de0:	add	r1, r2, r0
   17de4:	ldr	r2, [fp, #-52]	; 0xffffffcc
   17de8:	add	r1, r1, r2
   17dec:	ldr	r2, [sp, #20]
   17df0:	add	r1, r2, r1
   17df4:	sub	r2, r0, #1
   17df8:	add	r3, r1, #3
   17dfc:	cmn	r2, #1
   17e00:	beq	18404 <test_scan@@Base+0x1f48>
   17e04:	cmp	r0, r2
   17e08:	bls	18410 <test_scan@@Base+0x1f54>
   17e0c:	ldrb	r1, [r3], #-1
   17e10:	sub	r2, r2, #1
   17e14:	cmp	r1, #3
   17e18:	bne	17dfc <test_scan@@Base+0x1940>
   17e1c:	cmp	r2, #4
   17e20:	bne	18404 <test_scan@@Base+0x1f48>
   17e24:	mvn	r2, r0
   17e28:	ldr	r3, [sp, #20]
   17e2c:	add	r1, ip, #2
   17e30:	cmn	r2, #5
   17e34:	mvnls	r2, #4
   17e38:	sub	r1, r1, r2
   17e3c:	add	r1, r3, r1
   17e40:	mvn	r3, #1
   17e44:	sub	r2, r3, r2
   17e48:	add	r3, r2, #1
   17e4c:	cmp	r3, #2
   17e50:	bcc	18430 <test_scan@@Base+0x1f74>
   17e54:	cmp	r0, r2
   17e58:	bls	18410 <test_scan@@Base+0x1f54>
   17e5c:	ldrb	r3, [r1], #-1
   17e60:	sub	r2, r2, #1
   17e64:	cmp	r3, #3
   17e68:	bne	17e48 <test_scan@@Base+0x198c>
   17e6c:	cmp	r2, #2
   17e70:	bne	18430 <test_scan@@Base+0x1f74>
   17e74:	ldr	r0, [sp, #36]	; 0x24
   17e78:	movw	r8, #10689	; 0x29c1
   17e7c:	mov	r5, #0
   17e80:	movt	r8, #2
   17e84:	ldr	r4, [r0, #-4]
   17e88:	cmp	r5, r4
   17e8c:	bcs	17eb8 <test_scan@@Base+0x19fc>
   17e90:	mov	r6, r0
   17e94:	ldr	r1, [r6], #4
   17e98:	add	r0, r0, r1
   17e9c:	mov	r1, r8
   17ea0:	add	r0, r0, #4
   17ea4:	bl	12e8c <strcmp@plt>
   17ea8:	cmp	r0, #0
   17eac:	add	r5, r5, #1
   17eb0:	mov	r0, r6
   17eb4:	bne	17e88 <test_scan@@Base+0x19cc>
   17eb8:	ldr	r0, [sp, #36]	; 0x24
   17ebc:	movw	r8, #10689	; 0x29c1
   17ec0:	mov	r5, #0
   17ec4:	movt	r8, #2
   17ec8:	cmp	r5, r4
   17ecc:	bcs	17ef8 <test_scan@@Base+0x1a3c>
   17ed0:	mov	r6, r0
   17ed4:	ldr	r1, [r6], #4
   17ed8:	add	r0, r0, r1
   17edc:	mov	r1, r8
   17ee0:	add	r0, r0, #4
   17ee4:	bl	12e8c <strcmp@plt>
   17ee8:	cmp	r0, #0
   17eec:	add	r5, r5, #1
   17ef0:	mov	r0, r6
   17ef4:	bne	17ec8 <test_scan@@Base+0x1a0c>
   17ef8:	ldr	r0, [sp, #36]	; 0x24
   17efc:	movw	r8, #10689	; 0x29c1
   17f00:	mov	r5, #0
   17f04:	movt	r8, #2
   17f08:	cmp	r5, r4
   17f0c:	bcs	17f6c <test_scan@@Base+0x1ab0>
   17f10:	mov	r6, r0
   17f14:	ldr	r1, [r6], #4
   17f18:	ldr	r7, [r0, r1]!
   17f1c:	mov	r1, r8
   17f20:	cmp	r7, #4
   17f24:	mov	r2, r7
   17f28:	add	r0, r0, #4
   17f2c:	movcs	r2, #4
   17f30:	bl	12f70 <strncmp@plt>
   17f34:	cmp	r0, #0
   17f38:	mov	r1, r0
   17f3c:	mov	r2, #0
   17f40:	add	r5, r5, #1
   17f44:	mvneq	r1, #0
   17f48:	cmp	r7, #4
   17f4c:	movwhi	r2, #1
   17f50:	cmp	r0, #0
   17f54:	mov	r0, r6
   17f58:	movne	r2, r1
   17f5c:	cmp	r7, #4
   17f60:	movcc	r2, r1
   17f64:	cmp	r2, #0
   17f68:	bne	17f08 <test_scan@@Base+0x1a4c>
   17f6c:	movw	r8, #10689	; 0x29c1
   17f70:	mov	r5, #0
   17f74:	movt	r8, #2
   17f78:	cmp	r5, r4
   17f7c:	bcs	17fe0 <test_scan@@Base+0x1b24>
   17f80:	ldr	r1, [sp, #36]	; 0x24
   17f84:	mov	r6, r1
   17f88:	ldr	r0, [r6], #4
   17f8c:	ldr	r7, [r1, r0]!
   17f90:	cmp	r7, #4
   17f94:	mov	r2, r7
   17f98:	add	r0, r1, #4
   17f9c:	mov	r1, r8
   17fa0:	movcs	r2, #4
   17fa4:	bl	12f70 <strncmp@plt>
   17fa8:	cmp	r0, #0
   17fac:	mov	r1, r0
   17fb0:	mov	r2, #0
   17fb4:	add	r5, r5, #1
   17fb8:	str	r6, [sp, #36]	; 0x24
   17fbc:	mvneq	r1, #0
   17fc0:	cmp	r7, #4
   17fc4:	movwhi	r2, #1
   17fc8:	cmp	r0, #0
   17fcc:	movne	r2, r1
   17fd0:	cmp	r7, #4
   17fd4:	movcc	r2, r1
   17fd8:	cmp	r2, #0
   17fdc:	bne	17f78 <test_scan@@Base+0x1abc>
   17fe0:	ldr	r0, [fp, #-44]	; 0xffffffd4
   17fe4:	ldr	r1, [sp, #40]	; 0x28
   17fe8:	movw	r8, #10689	; 0x29c1
   17fec:	mov	r5, #0
   17ff0:	mvn	r7, #0
   17ff4:	movt	r8, #2
   17ff8:	add	r0, r1, r0
   17ffc:	ldr	r1, [fp, #-48]	; 0xffffffd0
   18000:	add	r0, r0, r4, lsl #2
   18004:	add	r0, r0, r1
   18008:	ldr	r1, [sp, #20]
   1800c:	add	sl, r1, r0
   18010:	add	r0, sl, #4
   18014:	cmp	r4, r5
   18018:	beq	1804c <test_scan@@Base+0x1b90>
   1801c:	adds	r1, r4, r7
   18020:	bcc	1843c <test_scan@@Base+0x1f80>
   18024:	mov	r6, r0
   18028:	ldr	r1, [r6, #-4]!
   1802c:	add	r0, r0, r1
   18030:	mov	r1, r8
   18034:	bl	12e8c <strcmp@plt>
   18038:	cmp	r0, #0
   1803c:	sub	r7, r7, #1
   18040:	add	r5, r5, #1
   18044:	mov	r0, r6
   18048:	bne	18014 <test_scan@@Base+0x1b58>
   1804c:	movw	r8, #10689	; 0x29c1
   18050:	add	r0, sl, #4
   18054:	mov	r5, #0
   18058:	mvn	r7, #0
   1805c:	movt	r8, #2
   18060:	cmp	r4, r5
   18064:	beq	18098 <test_scan@@Base+0x1bdc>
   18068:	adds	r1, r4, r7
   1806c:	bcc	1843c <test_scan@@Base+0x1f80>
   18070:	mov	r6, r0
   18074:	ldr	r1, [r6, #-4]!
   18078:	add	r0, r0, r1
   1807c:	mov	r1, r8
   18080:	bl	12e8c <strcmp@plt>
   18084:	cmp	r0, #0
   18088:	sub	r7, r7, #1
   1808c:	add	r5, r5, #1
   18090:	mov	r0, r6
   18094:	bne	18060 <test_scan@@Base+0x1ba4>
   18098:	movw	r6, #10689	; 0x29c1
   1809c:	add	r5, sl, #4
   180a0:	sub	r9, r4, #1
   180a4:	mov	r7, #0
   180a8:	movt	r6, #2
   180ac:	adds	r0, r4, r7
   180b0:	beq	1811c <test_scan@@Base+0x1c60>
   180b4:	add	r0, r9, r7
   180b8:	cmp	r4, r0
   180bc:	bls	1843c <test_scan@@Base+0x1f80>
   180c0:	ldr	r1, [sl, r7, lsl #2]
   180c4:	add	r0, r5, r1
   180c8:	add	r1, sl, r1
   180cc:	ldr	r8, [r1, r7, lsl #2]
   180d0:	mov	r1, r6
   180d4:	cmp	r8, #4
   180d8:	mov	r2, r8
   180dc:	movcs	r2, #4
   180e0:	bl	12f70 <strncmp@plt>
   180e4:	cmp	r0, #0
   180e8:	mov	r1, r0
   180ec:	mov	r2, #0
   180f0:	sub	r7, r7, #1
   180f4:	sub	r5, r5, #4
   180f8:	mvneq	r1, #0
   180fc:	cmp	r8, #4
   18100:	movwhi	r2, #1
   18104:	cmp	r0, #0
   18108:	movne	r2, r1
   1810c:	cmp	r8, #4
   18110:	movcc	r2, r1
   18114:	cmp	r2, #0
   18118:	bne	180ac <test_scan@@Base+0x1bf0>
   1811c:	add	r5, sl, #4
   18120:	rsb	r7, r4, #0
   18124:	mov	r8, #0
   18128:	cmp	r7, r8
   1812c:	beq	1819c <test_scan@@Base+0x1ce0>
   18130:	add	r0, r9, r8
   18134:	cmp	r4, r0
   18138:	bls	1843c <test_scan@@Base+0x1f80>
   1813c:	ldr	r1, [sl, r8, lsl #2]
   18140:	add	r0, r5, r1
   18144:	add	r1, sl, r1
   18148:	ldr	r6, [r1, r8, lsl #2]
   1814c:	movw	r1, #10689	; 0x29c1
   18150:	movt	r1, #2
   18154:	cmp	r6, #4
   18158:	mov	r2, r6
   1815c:	movcs	r2, #4
   18160:	bl	12f70 <strncmp@plt>
   18164:	cmp	r0, #0
   18168:	mov	r1, r0
   1816c:	mov	r2, #0
   18170:	sub	r8, r8, #1
   18174:	sub	r5, r5, #4
   18178:	mvneq	r1, #0
   1817c:	cmp	r6, #4
   18180:	movwhi	r2, #1
   18184:	cmp	r0, #0
   18188:	movne	r2, r1
   1818c:	cmp	r6, #4
   18190:	movcc	r2, r1
   18194:	cmp	r2, #0
   18198:	bne	18128 <test_scan@@Base+0x1c6c>
   1819c:	ldr	r0, [sp, #56]	; 0x38
   181a0:	ldr	lr, [r0]
   181a4:	cmp	lr, #0
   181a8:	beq	18294 <test_scan@@Base+0x1dd8>
   181ac:	ldr	r0, [sp, #44]	; 0x2c
   181b0:	mov	r2, #0
   181b4:	add	r1, r0, #12
   181b8:	cmp	lr, r2
   181bc:	bls	183d8 <test_scan@@Base+0x1f1c>
   181c0:	ldr	r3, [r1, #-8]
   181c4:	add	r7, r1, r3
   181c8:	cmp	r7, #8
   181cc:	beq	1845c <test_scan@@Base+0x1fa0>
   181d0:	ldr	r7, [r7, #-8]
   181d4:	sub	r7, r3, r7
   181d8:	add	r7, r1, r7
   181dc:	ldrh	r6, [r7, #-8]
   181e0:	cmp	r6, #10
   181e4:	bcc	18208 <test_scan@@Base+0x1d4c>
   181e8:	ldrh	r7, [r7]
   181ec:	cmp	r7, #0
   181f0:	beq	18208 <test_scan@@Base+0x1d4c>
   181f4:	add	r3, r3, r7
   181f8:	add	r3, r1, r3
   181fc:	ldrh	r3, [r3, #-8]
   18200:	cmp	r3, #13
   18204:	beq	18218 <test_scan@@Base+0x1d5c>
   18208:	add	r2, r2, #1
   1820c:	add	r1, r1, #4
   18210:	cmp	r2, lr
   18214:	bcc	181b8 <test_scan@@Base+0x1cfc>
   18218:	cmp	lr, #2
   1821c:	bcc	18294 <test_scan@@Base+0x1dd8>
   18220:	mov	r1, #1
   18224:	cmp	lr, r1
   18228:	bls	183d8 <test_scan@@Base+0x1f1c>
   1822c:	ldr	r0, [sp, #8]
   18230:	ldr	r2, [r0]
   18234:	adds	r3, r0, r2
   18238:	beq	1845c <test_scan@@Base+0x1fa0>
   1823c:	ldr	r0, [sp, #8]
   18240:	ldr	r3, [r0, r2]
   18244:	sub	r3, r2, r3
   18248:	add	r3, r0, r3
   1824c:	ldrh	r7, [r3]
   18250:	cmp	r7, #10
   18254:	bcc	1827c <test_scan@@Base+0x1dc0>
   18258:	ldrh	r3, [r3, #8]
   1825c:	cmp	r3, #0
   18260:	beq	1827c <test_scan@@Base+0x1dc0>
   18264:	ldr	r0, [sp, #8]
   18268:	add	r2, r2, r3
   1826c:	add	r2, r0, r2
   18270:	ldrh	r2, [r2]
   18274:	cmp	r2, #42	; 0x2a
   18278:	beq	18294 <test_scan@@Base+0x1dd8>
   1827c:	ldr	r0, [sp, #8]
   18280:	add	r1, r1, #1
   18284:	cmp	r1, lr
   18288:	add	r0, r0, #4
   1828c:	str	r0, [sp, #8]
   18290:	bcc	18224 <test_scan@@Base+0x1d68>
   18294:	ldr	r0, [sp, #48]	; 0x30
   18298:	sub	r2, lr, #1
   1829c:	mvn	ip, #0
   182a0:	add	r1, r0, lr, lsl #2
   182a4:	ldr	r0, [sp, #16]
   182a8:	add	r1, r1, r0
   182ac:	ldr	r0, [sp, #20]
   182b0:	add	r1, r0, r1
   182b4:	cmn	r2, #1
   182b8:	beq	1832c <test_scan@@Base+0x1e70>
   182bc:	cmp	lr, r2
   182c0:	bls	183d8 <test_scan@@Base+0x1f1c>
   182c4:	ldr	r6, [r1]
   182c8:	adds	r7, r1, r6
   182cc:	beq	1845c <test_scan@@Base+0x1fa0>
   182d0:	ldr	r7, [r1, r6]
   182d4:	sub	r7, r6, r7
   182d8:	add	r5, r1, r7
   182dc:	mov	r7, #1
   182e0:	ldrh	r3, [r5]
   182e4:	cmp	r3, #10
   182e8:	bcc	1831c <test_scan@@Base+0x1e60>
   182ec:	ldrh	r5, [r5, #8]
   182f0:	cmp	r5, #0
   182f4:	beq	1831c <test_scan@@Base+0x1e60>
   182f8:	add	r3, r6, r5
   182fc:	add	r3, r1, r3
   18300:	ldrsh	r3, [r3]
   18304:	uxth	r6, r3
   18308:	uxtah	r7, ip, r3
   1830c:	cmp	r6, #1
   18310:	movwne	r7, #1
   18314:	cmp	r3, #1
   18318:	mvnlt	r7, #0
   1831c:	sub	r1, r1, #4
   18320:	sub	r2, r2, #1
   18324:	cmp	r7, #0
   18328:	bne	182b4 <test_scan@@Base+0x1df8>
   1832c:	ldr	r0, [sp, #12]
   18330:	mvn	r2, lr
   18334:	ldr	r9, [sp, #20]
   18338:	mvn	r3, #1
   1833c:	mvn	ip, #41	; 0x29
   18340:	mov	r5, #0
   18344:	cmn	r2, #3
   18348:	mvnls	r2, #2
   1834c:	sub	r1, r0, r2, lsl #2
   18350:	ldr	r0, [sp, #20]
   18354:	sub	r2, r3, r2
   18358:	add	r1, r0, r1
   1835c:	cmn	r2, #1
   18360:	beq	16c48 <test_scan@@Base+0x78c>
   18364:	cmp	lr, r2
   18368:	bls	183d8 <test_scan@@Base+0x1f1c>
   1836c:	ldr	r6, [r1]
   18370:	cmn	r1, r6
   18374:	beq	1845c <test_scan@@Base+0x1fa0>
   18378:	ldr	r3, [r1, r6]
   1837c:	mov	r7, #1
   18380:	sub	r3, r6, r3
   18384:	add	r3, r1, r3
   18388:	ldrh	r0, [r3]
   1838c:	cmp	r0, #10
   18390:	bcc	183c4 <test_scan@@Base+0x1f08>
   18394:	ldrh	r3, [r3, #8]
   18398:	cmp	r3, #0
   1839c:	beq	183c4 <test_scan@@Base+0x1f08>
   183a0:	add	r0, r6, r3
   183a4:	add	r0, r1, r0
   183a8:	ldrsh	r0, [r0]
   183ac:	uxth	r3, r0
   183b0:	uxtah	r7, ip, r0
   183b4:	cmp	r3, #42	; 0x2a
   183b8:	movwne	r7, #1
   183bc:	cmp	r0, #42	; 0x2a
   183c0:	mvnlt	r7, #0
   183c4:	sub	r1, r1, #4
   183c8:	sub	r2, r2, #1
   183cc:	cmp	r7, #0
   183d0:	bne	1835c <test_scan@@Base+0x1ea0>
   183d4:	b	16a88 <test_scan@@Base+0x5cc>
   183d8:	movw	r0, #14633	; 0x3929
   183dc:	movw	r1, #13198	; 0x338e
   183e0:	movw	r3, #14960	; 0x3a70
   183e4:	movw	r2, #693	; 0x2b5
   183e8:	movt	r0, #2
   183ec:	movt	r1, #2
   183f0:	movt	r3, #2
   183f4:	bl	12f88 <__assert_fail@plt>
   183f8:	movw	r0, #20448	; 0x4fe0
   183fc:	movt	r0, #2
   18400:	b	16c40 <test_scan@@Base+0x784>
   18404:	movw	r0, #20384	; 0x4fa0
   18408:	movt	r0, #2
   1840c:	b	16c40 <test_scan@@Base+0x784>
   18410:	movw	r0, #14633	; 0x3929
   18414:	movw	r1, #14688	; 0x3960
   18418:	movw	r3, #14792	; 0x39c8
   1841c:	movw	r2, #395	; 0x18b
   18420:	movt	r0, #2
   18424:	movt	r1, #2
   18428:	movt	r3, #2
   1842c:	bl	12f88 <__assert_fail@plt>
   18430:	movw	r0, #20320	; 0x4f60
   18434:	movt	r0, #2
   18438:	b	16c40 <test_scan@@Base+0x784>
   1843c:	movw	r0, #14633	; 0x3929
   18440:	movw	r1, #14688	; 0x3960
   18444:	movw	r3, #15059	; 0x3ad3
   18448:	mov	r2, #108	; 0x6c
   1844c:	movt	r0, #2
   18450:	movt	r1, #2
   18454:	movt	r3, #2
   18458:	bl	12f88 <__assert_fail@plt>
   1845c:	movw	r0, #13160	; 0x3368
   18460:	movw	r1, #13198	; 0x338e
   18464:	movw	r3, #13296	; 0x33f0
   18468:	movw	r2, #697	; 0x2b9
   1846c:	movt	r0, #2
   18470:	movt	r1, #2
   18474:	movt	r3, #2
   18478:	bl	12f88 <__assert_fail@plt>
   1847c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18480:	add	fp, sp, #28
   18484:	sub	sp, sp, #4
   18488:	mov	r4, r1
   1848c:	mov	r5, r0
   18490:	mov	r7, #0
   18494:	mov	r6, r0
   18498:	b	184fc <test_scan@@Base+0x2040>
   1849c:	ldr	r0, [r6]
   184a0:	adds	r1, r6, r0
   184a4:	beq	185f0 <test_scan@@Base+0x2134>
   184a8:	ldr	r1, [r6, r0]
   184ac:	sub	r1, r0, r1
   184b0:	add	r1, r6, r1
   184b4:	ldrh	r2, [r1]
   184b8:	cmp	r2, #12
   184bc:	bcc	185e4 <test_scan@@Base+0x2128>
   184c0:	ldrh	r1, [r1, #10]
   184c4:	cmp	r1, #0
   184c8:	beq	185e4 <test_scan@@Base+0x2128>
   184cc:	add	r2, r0, r1
   184d0:	ldr	r2, [r6, r2]
   184d4:	add	r0, r2, r0
   184d8:	add	r0, r0, r1
   184dc:	mov	r1, r4
   184e0:	add	r0, r6, r0
   184e4:	add	r0, r0, #4
   184e8:	bl	12e8c <strcmp@plt>
   184ec:	cmp	r0, #0
   184f0:	beq	18548 <test_scan@@Base+0x208c>
   184f4:	add	r6, r6, #4
   184f8:	add	r7, r7, #1
   184fc:	cmp	r5, #0
   18500:	mov	r0, #0
   18504:	ldrne	r0, [r5, #-4]
   18508:	cmp	r7, r0
   1850c:	bcs	18540 <test_scan@@Base+0x2084>
   18510:	cmp	r5, #0
   18514:	ldrne	r0, [r5, #-4]
   18518:	cmpne	r0, r7
   1851c:	bhi	1849c <test_scan@@Base+0x1fe0>
   18520:	movw	r0, #14633	; 0x3929
   18524:	movw	r1, #13198	; 0x338e
   18528:	movw	r3, #14960	; 0x3a70
   1852c:	movw	r2, #693	; 0x2b5
   18530:	movt	r0, #2
   18534:	movt	r1, #2
   18538:	movt	r3, #2
   1853c:	bl	12f88 <__assert_fail@plt>
   18540:	mov	r9, #0
   18544:	b	185d8 <test_scan@@Base+0x211c>
   18548:	ldr	sl, [r5, #-4]
   1854c:	add	r8, r5, #8
   18550:	mov	r9, #0
   18554:	add	r6, r8, r7, lsl #2
   18558:	add	r9, r9, #1
   1855c:	add	r7, r7, #1
   18560:	cmp	r7, sl
   18564:	bcs	185d8 <test_scan@@Base+0x211c>
   18568:	ldr	r0, [r5, #-4]
   1856c:	cmp	r0, r7
   18570:	bls	18520 <test_scan@@Base+0x2064>
   18574:	ldr	r0, [r6, #-4]
   18578:	add	r1, r6, r0
   1857c:	cmp	r1, #4
   18580:	beq	185f0 <test_scan@@Base+0x2134>
   18584:	ldr	r1, [r1, #-4]
   18588:	sub	r1, r0, r1
   1858c:	add	r1, r6, r1
   18590:	ldrh	r2, [r1, #-4]
   18594:	cmp	r2, #12
   18598:	bcc	185e4 <test_scan@@Base+0x2128>
   1859c:	ldrh	r1, [r1, #6]
   185a0:	cmp	r1, #0
   185a4:	beq	185e4 <test_scan@@Base+0x2128>
   185a8:	add	r2, r0, r1
   185ac:	add	r2, r6, r2
   185b0:	ldr	r2, [r2, #-4]
   185b4:	add	r0, r2, r0
   185b8:	add	r0, r0, r1
   185bc:	mov	r1, r4
   185c0:	add	r0, r6, r0
   185c4:	bl	12e8c <strcmp@plt>
   185c8:	add	r6, r6, #4
   185cc:	cmp	r0, #0
   185d0:	bne	1855c <test_scan@@Base+0x20a0>
   185d4:	b	18554 <test_scan@@Base+0x2098>
   185d8:	mov	r0, r9
   185dc:	sub	sp, fp, #28
   185e0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   185e4:	movw	r0, #14511	; 0x38af
   185e8:	movt	r0, #2
   185ec:	b	185f8 <test_scan@@Base+0x213c>
   185f0:	movw	r0, #13160	; 0x3368
   185f4:	movt	r0, #2
   185f8:	movw	r1, #13198	; 0x338e
   185fc:	movw	r3, #14430	; 0x385e
   18600:	movw	r2, #699	; 0x2bb
   18604:	movt	r1, #2
   18608:	movt	r3, #2
   1860c:	bl	12f88 <__assert_fail@plt>

00018610 <test_basic_sort@@Base>:
   18610:	push	{r4, r5, r6, sl, fp, lr}
   18614:	add	fp, sp, #16
   18618:	sub	sp, sp, #24
   1861c:	movw	r1, #17827	; 0x45a3
   18620:	mov	r4, r0
   18624:	add	r0, sp, #13
   18628:	mov	r2, #7
   1862c:	movt	r1, #2
   18630:	bl	12eb0 <memcpy@plt>
   18634:	mov	r0, r4
   18638:	bl	1d2e4 <flatcc_builder_reset@@Base>
   1863c:	movw	r1, #9828	; 0x2664
   18640:	mov	r0, r4
   18644:	mov	r2, #0
   18648:	mov	r3, #0
   1864c:	movt	r1, #2
   18650:	bl	1db50 <flatcc_builder_start_buffer@@Base>
   18654:	cmp	r0, #0
   18658:	bne	18668 <test_basic_sort@@Base+0x58>
   1865c:	mov	r0, r4
   18660:	mov	r1, #36	; 0x24
   18664:	bl	1ebcc <flatcc_builder_start_table@@Base>
   18668:	movw	r1, #9896	; 0x26a8
   1866c:	mov	r0, r4
   18670:	movt	r1, #2
   18674:	bl	20844 <flatcc_builder_create_string_str@@Base>
   18678:	cmp	r0, #0
   1867c:	beq	18698 <test_basic_sort@@Base+0x88>
   18680:	mov	r5, r0
   18684:	mov	r0, r4
   18688:	mov	r1, #3
   1868c:	bl	1fd60 <flatcc_builder_table_add_offset@@Base>
   18690:	cmp	r0, #0
   18694:	strne	r5, [r0]
   18698:	mvn	r0, #0
   1869c:	mov	r1, #1
   186a0:	mov	r2, #7
   186a4:	mov	r3, #1
   186a8:	str	r1, [sp]
   186ac:	str	r0, [sp, #4]
   186b0:	add	r1, sp, #13
   186b4:	mov	r0, r4
   186b8:	bl	1f714 <flatcc_builder_create_vector@@Base>
   186bc:	cmp	r0, #0
   186c0:	beq	186dc <test_basic_sort@@Base+0xcc>
   186c4:	mov	r5, r0
   186c8:	mov	r0, r4
   186cc:	mov	r1, #5
   186d0:	bl	1fd60 <flatcc_builder_table_add_offset@@Base>
   186d4:	cmp	r0, #0
   186d8:	strne	r5, [r0]
   186dc:	movw	r1, #17860	; 0x45c4
   186e0:	mov	r0, r4
   186e4:	mov	r2, #1
   186e8:	movt	r1, #2
   186ec:	bl	1f4cc <flatcc_builder_check_required@@Base>
   186f0:	cmp	r0, #0
   186f4:	beq	189bc <test_basic_sort@@Base+0x3ac>
   186f8:	mov	r0, r4
   186fc:	bl	1f55c <flatcc_builder_end_table@@Base>
   18700:	mov	r1, r0
   18704:	mov	r0, r4
   18708:	bl	1dd40 <flatcc_builder_end_buffer@@Base>
   1870c:	add	r1, sp, #20
   18710:	mov	r0, r4
   18714:	bl	20b34 <flatcc_builder_get_direct_buffer@@Base>
   18718:	cmp	r0, #0
   1871c:	beq	1899c <test_basic_sort@@Base+0x38c>
   18720:	ldr	r1, [r0, #4]
   18724:	movw	r2, #20301	; 0x4f4d
   18728:	movt	r2, #21326	; 0x534e
   1872c:	cmp	r1, r2
   18730:	bne	1899c <test_basic_sort@@Base+0x38c>
   18734:	ldr	r1, [r0]
   18738:	ldr	r2, [r0, r1]!
   1873c:	mov	r1, r0
   18740:	ldrh	r2, [r1, -r2]!	; <UNPREDICTABLE>
   18744:	cmp	r2, #15
   18748:	bls	18764 <test_basic_sort@@Base+0x154>
   1874c:	ldrh	r1, [r1, #14]
   18750:	cmp	r1, #0
   18754:	ldrne	r1, [r0, r1]!
   18758:	ldrne	r1, [r0, r1]!
   1875c:	cmpne	r1, #0
   18760:	bne	18784 <test_basic_sort@@Base+0x174>
   18764:	movw	r0, #11676	; 0x2d9c
   18768:	movw	r1, #10320	; 0x2850
   1876c:	movw	r3, #11722	; 0x2dca
   18770:	mov	r2, #1552	; 0x610
   18774:	movt	r0, #2
   18778:	movt	r1, #2
   1877c:	movt	r3, #2
   18780:	bl	12f88 <__assert_fail@plt>
   18784:	add	r0, r0, #4
   18788:	lsr	r2, r1, #1
   1878c:	sub	lr, r1, #1
   18790:	b	18804 <test_basic_sort@@Base+0x1f4>
   18794:	lsl	r2, ip, #1
   18798:	mov	r3, ip
   1879c:	ldr	r4, [r0, #-4]
   187a0:	cmp	r2, lr
   187a4:	bcs	187c8 <test_basic_sort@@Base+0x1b8>
   187a8:	cmp	r4, r2
   187ac:	orrhi	r5, r2, #1
   187b0:	cmphi	r4, r5
   187b4:	bls	18958 <test_basic_sort@@Base+0x348>
   187b8:	ldrb	r1, [r0, r5]
   187bc:	ldrb	r6, [r0, r2]
   187c0:	cmp	r6, r1
   187c4:	movcc	r2, r5
   187c8:	mov	r5, r2
   187cc:	cmp	r4, r3
   187d0:	cmphi	r4, r5
   187d4:	bls	18958 <test_basic_sort@@Base+0x348>
   187d8:	ldrb	r2, [r0, r3]
   187dc:	ldrb	r4, [r0, r5]
   187e0:	cmp	r2, r4
   187e4:	bcs	18810 <test_basic_sort@@Base+0x200>
   187e8:	strb	r2, [r0, r5]
   187ec:	strb	r4, [r0, r3]
   187f0:	lsl	r2, r5, #1
   187f4:	cmp	lr, r5, lsl #1
   187f8:	mov	r3, r5
   187fc:	bcs	1879c <test_basic_sort@@Base+0x18c>
   18800:	b	18810 <test_basic_sort@@Base+0x200>
   18804:	mov	ip, r2
   18808:	cmp	lr, r2, lsl #1
   1880c:	bcs	18794 <test_basic_sort@@Base+0x184>
   18810:	sub	r2, ip, #1
   18814:	cmp	ip, #0
   18818:	bne	18804 <test_basic_sort@@Base+0x1f4>
   1881c:	b	188a0 <test_basic_sort@@Base+0x290>
   18820:	ldrb	r2, [r0]
   18824:	ldrb	r1, [r0, lr]
   18828:	mov	r4, #0
   1882c:	strb	r2, [r0, lr]
   18830:	sub	lr, lr, #1
   18834:	mov	r2, #0
   18838:	strb	r1, [r0]
   1883c:	ldr	r5, [r0, #-4]
   18840:	cmp	r4, lr
   18844:	bcs	18868 <test_basic_sort@@Base+0x258>
   18848:	cmp	r5, r4
   1884c:	orrhi	r3, r4, #1
   18850:	cmphi	r5, r3
   18854:	bls	18958 <test_basic_sort@@Base+0x348>
   18858:	ldrb	r1, [r0, r3]
   1885c:	ldrb	r6, [r0, r4]
   18860:	cmp	r6, r1
   18864:	movcc	r4, r3
   18868:	mov	r3, r4
   1886c:	cmp	r5, r2
   18870:	cmphi	r5, r3
   18874:	bls	18958 <test_basic_sort@@Base+0x348>
   18878:	ldrb	r5, [r0, r2]
   1887c:	ldrb	r4, [r0, r3]
   18880:	cmp	r5, r4
   18884:	bcs	188a0 <test_basic_sort@@Base+0x290>
   18888:	strb	r5, [r0, r3]
   1888c:	strb	r4, [r0, r2]
   18890:	lsl	r4, r3, #1
   18894:	cmp	lr, r3, lsl #1
   18898:	mov	r2, r3
   1889c:	bcs	1883c <test_basic_sort@@Base+0x22c>
   188a0:	cmp	lr, #0
   188a4:	bne	18820 <test_basic_sort@@Base+0x210>
   188a8:	ldr	r1, [r0, #-4]
   188ac:	cmp	r1, #7
   188b0:	bne	18764 <test_basic_sort@@Base+0x154>
   188b4:	movw	ip, #17834	; 0x45aa
   188b8:	mov	r3, #0
   188bc:	mov	r2, #0
   188c0:	movt	ip, #2
   188c4:	cmp	r3, #7
   188c8:	bcs	18958 <test_basic_sort@@Base+0x348>
   188cc:	ldrb	r5, [r0, r3]
   188d0:	ldrb	r1, [ip, r3]
   188d4:	cmp	r5, r1
   188d8:	bne	18984 <test_basic_sort@@Base+0x374>
   188dc:	mov	r3, #0
   188e0:	mov	r4, #6
   188e4:	sub	r1, r4, r3
   188e8:	add	r1, r3, r1, lsr #1
   188ec:	cmp	r1, #7
   188f0:	bcs	18958 <test_basic_sort@@Base+0x348>
   188f4:	ldrb	r6, [r0, r1]
   188f8:	cmp	r6, r5
   188fc:	movcs	r4, r1
   18900:	addcc	r3, r1, #1
   18904:	cmp	r4, r3
   18908:	bhi	188e4 <test_basic_sort@@Base+0x2d4>
   1890c:	bne	18978 <test_basic_sort@@Base+0x368>
   18910:	cmp	r3, #7
   18914:	bcs	18958 <test_basic_sort@@Base+0x348>
   18918:	ldrb	r1, [r0, r3]
   1891c:	cmp	r1, r5
   18920:	bne	18978 <test_basic_sort@@Base+0x368>
   18924:	uxtb	r1, r2
   18928:	cmp	r1, #3
   1892c:	mov	r1, r2
   18930:	movweq	r1, #2
   18934:	uxtb	r1, r1
   18938:	cmp	r3, r1
   1893c:	bne	18978 <test_basic_sort@@Base+0x368>
   18940:	add	r2, r2, #1
   18944:	uxtb	r3, r2
   18948:	cmp	r3, #6
   1894c:	bls	188c4 <test_basic_sort@@Base+0x2b4>
   18950:	mov	r0, #0
   18954:	b	18994 <test_basic_sort@@Base+0x384>
   18958:	movw	r0, #14633	; 0x3929
   1895c:	movw	r1, #14688	; 0x3960
   18960:	movw	r3, #14792	; 0x39c8
   18964:	movw	r2, #395	; 0x18b
   18968:	movt	r0, #2
   1896c:	movt	r1, #2
   18970:	movt	r3, #2
   18974:	bl	12f88 <__assert_fail@plt>
   18978:	movw	r0, #21872	; 0x5570
   1897c:	movt	r0, #2
   18980:	b	1898c <test_basic_sort@@Base+0x37c>
   18984:	movw	r0, #21904	; 0x5590
   18988:	movt	r0, #2
   1898c:	bl	12eec <puts@plt>
   18990:	mvn	r0, #0
   18994:	sub	sp, fp, #16
   18998:	pop	{r4, r5, r6, sl, fp, pc}
   1899c:	movw	r0, #13160	; 0x3368
   189a0:	movw	r1, #13198	; 0x338e
   189a4:	movw	r3, #14544	; 0x38d0
   189a8:	movw	r2, #706	; 0x2c2
   189ac:	movt	r0, #2
   189b0:	movt	r1, #2
   189b4:	movt	r3, #2
   189b8:	bl	12f88 <__assert_fail@plt>
   189bc:	movw	r0, #13899	; 0x364b
   189c0:	movw	r1, #13609	; 0x3529
   189c4:	movw	r3, #14061	; 0x36ed
   189c8:	mov	r2, #235	; 0xeb
   189cc:	movt	r0, #2
   189d0:	movt	r1, #2
   189d4:	movt	r3, #2
   189d8:	bl	12f88 <__assert_fail@plt>

000189dc <test_clone_slice@@Base>:
   189dc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   189e0:	add	fp, sp, #28
   189e4:	sub	sp, sp, #36	; 0x24
   189e8:	movw	r1, #17841	; 0x45b1
   189ec:	mov	r5, r0
   189f0:	add	r0, sp, #25
   189f4:	mov	r2, #7
   189f8:	movt	r1, #2
   189fc:	bl	12eb0 <memcpy@plt>
   18a00:	mov	r0, r5
   18a04:	bl	1d2e4 <flatcc_builder_reset@@Base>
   18a08:	movw	r1, #9828	; 0x2664
   18a0c:	mov	r0, r5
   18a10:	mov	r2, #0
   18a14:	mov	r3, #0
   18a18:	movt	r1, #2
   18a1c:	bl	1db50 <flatcc_builder_start_buffer@@Base>
   18a20:	cmp	r0, #0
   18a24:	bne	18a34 <test_clone_slice@@Base+0x58>
   18a28:	mov	r0, r5
   18a2c:	mov	r1, #36	; 0x24
   18a30:	bl	1ebcc <flatcc_builder_start_table@@Base>
   18a34:	movw	r1, #11762	; 0x2df2
   18a38:	mov	r0, r5
   18a3c:	movt	r1, #2
   18a40:	bl	20844 <flatcc_builder_create_string_str@@Base>
   18a44:	cmp	r0, #0
   18a48:	beq	18a64 <test_clone_slice@@Base+0x88>
   18a4c:	mov	r4, r0
   18a50:	mov	r0, r5
   18a54:	mov	r1, #3
   18a58:	bl	1fd60 <flatcc_builder_table_add_offset@@Base>
   18a5c:	cmp	r0, #0
   18a60:	strne	r4, [r0]
   18a64:	mvn	r0, #0
   18a68:	mov	r1, #1
   18a6c:	mov	r2, #7
   18a70:	mov	r3, #1
   18a74:	str	r1, [sp]
   18a78:	str	r0, [sp, #4]
   18a7c:	add	r1, sp, #25
   18a80:	mov	r0, r5
   18a84:	bl	1f714 <flatcc_builder_create_vector@@Base>
   18a88:	cmp	r0, #0
   18a8c:	beq	18aa8 <test_clone_slice@@Base+0xcc>
   18a90:	mov	r4, r0
   18a94:	mov	r0, r5
   18a98:	mov	r1, #24
   18a9c:	bl	1fd60 <flatcc_builder_table_add_offset@@Base>
   18aa0:	cmp	r0, #0
   18aa4:	strne	r4, [r0]
   18aa8:	mov	r0, r5
   18aac:	mov	r1, #4
   18ab0:	mov	r2, #2
   18ab4:	mvn	r3, #-1073741824	; 0xc0000000
   18ab8:	bl	1e800 <flatcc_builder_start_vector@@Base>
   18abc:	mov	r0, r5
   18ac0:	mov	r1, #2
   18ac4:	bl	1dfe8 <flatcc_builder_extend_vector@@Base>
   18ac8:	mov	r1, #22
   18acc:	strh	r1, [r0]
   18ad0:	mov	r1, #44	; 0x2c
   18ad4:	strh	r1, [r0, #4]
   18ad8:	mov	r0, r5
   18adc:	bl	1f86c <flatcc_builder_end_vector@@Base>
   18ae0:	cmp	r0, #0
   18ae4:	beq	18b00 <test_clone_slice@@Base+0x124>
   18ae8:	mov	r4, r0
   18aec:	mov	r0, r5
   18af0:	mov	r1, #9
   18af4:	bl	1fd60 <flatcc_builder_table_add_offset@@Base>
   18af8:	cmp	r0, #0
   18afc:	strne	r4, [r0]
   18b00:	mov	r0, r5
   18b04:	mov	r1, #0
   18b08:	mov	r2, #32
   18b0c:	mov	r3, #16
   18b10:	mov	r8, #0
   18b14:	bl	1fe9c <flatcc_builder_table_add@@Base>
   18b18:	movw	r1, #13107	; 0x3333
   18b1c:	mov	r2, #1
   18b20:	movt	r1, #49705	; 0xc229
   18b24:	str	r1, [r0]
   18b28:	movw	r1, #17860	; 0x45c4
   18b2c:	mov	r0, r5
   18b30:	movt	r1, #2
   18b34:	bl	1f4cc <flatcc_builder_check_required@@Base>
   18b38:	cmp	r0, #0
   18b3c:	beq	19388 <test_clone_slice@@Base+0x9ac>
   18b40:	mov	r0, r5
   18b44:	bl	1f55c <flatcc_builder_end_table@@Base>
   18b48:	mov	r1, r0
   18b4c:	mov	r0, r5
   18b50:	bl	1dd40 <flatcc_builder_end_buffer@@Base>
   18b54:	add	r1, sp, #32
   18b58:	mov	r0, r5
   18b5c:	bl	20c50 <flatcc_builder_finalize_aligned_buffer@@Base>
   18b60:	mov	r4, r0
   18b64:	movw	r0, #32880	; 0x8070
   18b68:	ldr	r2, [sp, #32]
   18b6c:	movt	r0, #3
   18b70:	mov	r1, r4
   18b74:	ldr	r3, [r0]
   18b78:	movw	r0, #11773	; 0x2dfd
   18b7c:	movt	r0, #2
   18b80:	bl	1365c <test_type_aliases@@Base+0x51c>
   18b84:	movw	r1, #20301	; 0x4f4d
   18b88:	cmp	r4, #0
   18b8c:	movt	r1, #21326	; 0x534e
   18b90:	beq	18ba4 <test_clone_slice@@Base+0x1c8>
   18b94:	ldr	r0, [r4, #4]
   18b98:	cmp	r0, r1
   18b9c:	ldreq	r0, [r4]
   18ba0:	addeq	r8, r4, r0
   18ba4:	mov	r0, r5
   18ba8:	bl	1d2e4 <flatcc_builder_reset@@Base>
   18bac:	movw	r1, #9828	; 0x2664
   18bb0:	mov	r0, r5
   18bb4:	mov	r2, #0
   18bb8:	mov	r3, #0
   18bbc:	movt	r1, #2
   18bc0:	bl	1db50 <flatcc_builder_start_buffer@@Base>
   18bc4:	cmp	r0, #0
   18bc8:	bne	18bd8 <test_clone_slice@@Base+0x1fc>
   18bcc:	mov	r0, r5
   18bd0:	mov	r1, #36	; 0x24
   18bd4:	bl	1ebcc <flatcc_builder_start_table@@Base>
   18bd8:	cmp	r8, #0
   18bdc:	beq	193a8 <test_clone_slice@@Base+0x9cc>
   18be0:	ldr	r1, [r8]
   18be4:	mov	r0, r8
   18be8:	ldrh	r2, [r0, -r1]!
   18bec:	cmp	r2, #12
   18bf0:	bcc	1937c <test_clone_slice@@Base+0x9a0>
   18bf4:	ldrh	r1, [r0, #10]
   18bf8:	cmp	r1, #0
   18bfc:	beq	1937c <test_clone_slice@@Base+0x9a0>
   18c00:	cmp	r2, #54	; 0x36
   18c04:	bcc	193c8 <test_clone_slice@@Base+0x9ec>
   18c08:	ldrh	r2, [r0, #52]	; 0x34
   18c0c:	cmp	r2, #0
   18c10:	beq	193c8 <test_clone_slice@@Base+0x9ec>
   18c14:	ldrh	r0, [r0, #22]
   18c18:	str	r4, [sp, #20]
   18c1c:	cmp	r0, #0
   18c20:	beq	193e8 <test_clone_slice@@Base+0xa0c>
   18c24:	mov	r3, r8
   18c28:	mov	sl, r8
   18c2c:	str	r8, [sp, #16]
   18c30:	ldr	r0, [r8, r0]!
   18c34:	ldr	r1, [r3, r1]!
   18c38:	ldr	r9, [sl, r2]!
   18c3c:	str	r0, [sp, #12]
   18c40:	mov	r0, r5
   18c44:	add	r1, r3, r1
   18c48:	add	r6, r1, #4
   18c4c:	ldr	r2, [r6, #-4]
   18c50:	mov	r1, r6
   18c54:	bl	20740 <flatcc_builder_create_string@@Base>
   18c58:	cmp	r0, #0
   18c5c:	beq	18c78 <test_clone_slice@@Base+0x29c>
   18c60:	mov	r4, r0
   18c64:	mov	r0, r5
   18c68:	mov	r1, #3
   18c6c:	bl	1fd60 <flatcc_builder_table_add_offset@@Base>
   18c70:	cmp	r0, #0
   18c74:	strne	r4, [r0]
   18c78:	mov	r0, r5
   18c7c:	bl	1e88c <flatcc_builder_start_offset_vector@@Base>
   18c80:	ldr	r2, [r6, #-4]
   18c84:	mov	r0, r5
   18c88:	mov	r1, r6
   18c8c:	bl	20740 <flatcc_builder_create_string@@Base>
   18c90:	cmp	r0, #0
   18c94:	beq	18ca4 <test_clone_slice@@Base+0x2c8>
   18c98:	mov	r1, r0
   18c9c:	mov	r0, r5
   18ca0:	bl	1e2d0 <flatcc_builder_offset_vector_push@@Base>
   18ca4:	ldr	r0, [r6, #-4]
   18ca8:	cmp	r0, #4
   18cac:	mov	r2, r0
   18cb0:	movcs	r2, #4
   18cb4:	add	r1, r6, r2
   18cb8:	sub	r2, r0, r2
   18cbc:	mov	r0, r5
   18cc0:	cmp	r2, #20
   18cc4:	movcs	r2, #20
   18cc8:	bl	20740 <flatcc_builder_create_string@@Base>
   18ccc:	cmp	r0, #0
   18cd0:	beq	18ce0 <test_clone_slice@@Base+0x304>
   18cd4:	mov	r1, r0
   18cd8:	mov	r0, r5
   18cdc:	bl	1e2d0 <flatcc_builder_offset_vector_push@@Base>
   18ce0:	ldr	r2, [r6, #-4]
   18ce4:	mov	r0, r5
   18ce8:	mov	r1, r6
   18cec:	cmp	r2, #3
   18cf0:	movcs	r2, #3
   18cf4:	bl	20740 <flatcc_builder_create_string@@Base>
   18cf8:	cmp	r0, #0
   18cfc:	beq	18d0c <test_clone_slice@@Base+0x330>
   18d00:	mov	r1, r0
   18d04:	mov	r0, r5
   18d08:	bl	1e2d0 <flatcc_builder_offset_vector_push@@Base>
   18d0c:	mov	r0, r5
   18d10:	add	r7, sl, r9
   18d14:	bl	1e958 <flatcc_builder_end_offset_vector@@Base>
   18d18:	cmp	r0, #0
   18d1c:	beq	18d38 <test_clone_slice@@Base+0x35c>
   18d20:	mov	r4, r0
   18d24:	mov	r0, r5
   18d28:	mov	r1, #10
   18d2c:	bl	1fd60 <flatcc_builder_table_add_offset@@Base>
   18d30:	cmp	r0, #0
   18d34:	strne	r4, [r0]
   18d38:	ldr	r0, [sp, #12]
   18d3c:	mov	r1, #36	; 0x24
   18d40:	add	sl, r7, #4
   18d44:	add	r8, r8, r0
   18d48:	mov	r0, r5
   18d4c:	bl	1ebcc <flatcc_builder_start_table@@Base>
   18d50:	ldr	r0, [r6, #-4]
   18d54:	cmp	r0, #2
   18d58:	mov	r2, r0
   18d5c:	movcs	r2, #2
   18d60:	add	r1, r6, r2
   18d64:	sub	r2, r0, r2
   18d68:	mov	r0, r5
   18d6c:	cmp	r2, #20
   18d70:	movcs	r2, #20
   18d74:	bl	20740 <flatcc_builder_create_string@@Base>
   18d78:	cmp	r0, #0
   18d7c:	beq	18d98 <test_clone_slice@@Base+0x3bc>
   18d80:	mov	r4, r0
   18d84:	mov	r0, r5
   18d88:	mov	r1, #3
   18d8c:	bl	1fd60 <flatcc_builder_table_add_offset@@Base>
   18d90:	cmp	r0, #0
   18d94:	strne	r4, [r0]
   18d98:	ldr	r2, [sl, #-4]
   18d9c:	mvn	r0, #0
   18da0:	mov	r1, #1
   18da4:	mov	r3, #1
   18da8:	add	r9, r8, #4
   18dac:	str	r1, [sp]
   18db0:	str	r0, [sp, #4]
   18db4:	mov	r0, r5
   18db8:	mov	r1, sl
   18dbc:	bl	1f714 <flatcc_builder_create_vector@@Base>
   18dc0:	cmp	r0, #0
   18dc4:	beq	18de0 <test_clone_slice@@Base+0x404>
   18dc8:	mov	r4, r0
   18dcc:	mov	r0, r5
   18dd0:	mov	r1, #24
   18dd4:	bl	1fd60 <flatcc_builder_table_add_offset@@Base>
   18dd8:	cmp	r0, #0
   18ddc:	strne	r4, [r0]
   18de0:	ldr	r0, [r9, #-4]
   18de4:	mvn	r1, #-1073741824	; 0xc0000000
   18de8:	mov	r2, #2
   18dec:	str	r2, [sp]
   18df0:	str	r1, [sp, #4]
   18df4:	cmp	r0, #0
   18df8:	mov	r3, r0
   18dfc:	movwne	r3, #1
   18e00:	sub	r0, r0, r3
   18e04:	add	r1, r9, r3, lsl #2
   18e08:	mov	r3, #4
   18e0c:	cmp	r0, #2
   18e10:	movcc	r2, r0
   18e14:	mov	r0, r5
   18e18:	bl	1f714 <flatcc_builder_create_vector@@Base>
   18e1c:	ldr	r7, [sp, #16]
   18e20:	cmp	r0, #0
   18e24:	beq	18e40 <test_clone_slice@@Base+0x464>
   18e28:	mov	r4, r0
   18e2c:	mov	r0, r5
   18e30:	mov	r1, #9
   18e34:	bl	1fd60 <flatcc_builder_table_add_offset@@Base>
   18e38:	cmp	r0, #0
   18e3c:	strne	r4, [r0]
   18e40:	movw	r1, #17860	; 0x45c4
   18e44:	mov	r0, r5
   18e48:	mov	r2, #1
   18e4c:	movt	r1, #2
   18e50:	bl	1f4cc <flatcc_builder_check_required@@Base>
   18e54:	cmp	r0, #0
   18e58:	beq	19388 <test_clone_slice@@Base+0x9ac>
   18e5c:	mov	r0, r5
   18e60:	bl	1f55c <flatcc_builder_end_table@@Base>
   18e64:	cmp	r0, #0
   18e68:	beq	18eac <test_clone_slice@@Base+0x4d0>
   18e6c:	mov	r4, r0
   18e70:	mov	r0, r5
   18e74:	mov	r1, #7
   18e78:	mov	r2, #1
   18e7c:	mov	r3, #1
   18e80:	bl	1fe9c <flatcc_builder_table_add@@Base>
   18e84:	cmp	r0, #0
   18e88:	beq	18eac <test_clone_slice@@Base+0x4d0>
   18e8c:	mov	r6, r0
   18e90:	mov	r0, r5
   18e94:	mov	r1, #8
   18e98:	bl	1fd60 <flatcc_builder_table_add_offset@@Base>
   18e9c:	cmp	r0, #0
   18ea0:	movne	r1, #1
   18ea4:	strbne	r1, [r6]
   18ea8:	strne	r4, [r0]
   18eac:	ldr	r0, [sl, #-4]
   18eb0:	mov	r2, #1
   18eb4:	mvn	r1, #0
   18eb8:	mov	r3, #1
   18ebc:	str	r2, [sp]
   18ec0:	str	r1, [sp, #4]
   18ec4:	cmp	r0, #3
   18ec8:	mov	r2, r0
   18ecc:	movcs	r2, #3
   18ed0:	add	r1, sl, r2
   18ed4:	sub	r2, r0, r2
   18ed8:	mov	r0, r5
   18edc:	bl	1f714 <flatcc_builder_create_vector@@Base>
   18ee0:	cmp	r0, #0
   18ee4:	beq	18f00 <test_clone_slice@@Base+0x524>
   18ee8:	mov	r4, r0
   18eec:	mov	r0, r5
   18ef0:	mov	r1, #24
   18ef4:	bl	1fd60 <flatcc_builder_table_add_offset@@Base>
   18ef8:	cmp	r0, #0
   18efc:	strne	r4, [r0]
   18f00:	ldr	r1, [r7]
   18f04:	mov	r0, r7
   18f08:	movw	r6, #20301	; 0x4f4d
   18f0c:	movt	r6, #21326	; 0x534e
   18f10:	ldrh	r1, [r0, -r1]!	; <UNPREDICTABLE>
   18f14:	cmp	r1, #6
   18f18:	bcc	18f30 <test_clone_slice@@Base+0x554>
   18f1c:	ldrh	r0, [r0, #4]
   18f20:	cmp	r0, #0
   18f24:	beq	18f30 <test_clone_slice@@Base+0x554>
   18f28:	add	r2, r7, r0
   18f2c:	b	18f34 <test_clone_slice@@Base+0x558>
   18f30:	mov	r2, #0
   18f34:	mov	r0, #16
   18f38:	mov	r1, #0
   18f3c:	mov	r3, #32
   18f40:	str	r0, [sp]
   18f44:	mov	r0, r5
   18f48:	bl	20a08 <flatcc_builder_table_add_copy@@Base>
   18f4c:	ldr	r2, [r9, #-4]
   18f50:	mvn	r0, #-1073741824	; 0xc0000000
   18f54:	mov	r1, #2
   18f58:	mov	r3, #4
   18f5c:	str	r1, [sp]
   18f60:	str	r0, [sp, #4]
   18f64:	mov	r0, r5
   18f68:	mov	r1, r9
   18f6c:	bl	1f714 <flatcc_builder_create_vector@@Base>
   18f70:	cmp	r0, #0
   18f74:	beq	18f90 <test_clone_slice@@Base+0x5b4>
   18f78:	mov	r4, r0
   18f7c:	mov	r0, r5
   18f80:	mov	r1, #9
   18f84:	bl	1fd60 <flatcc_builder_table_add_offset@@Base>
   18f88:	cmp	r0, #0
   18f8c:	strne	r4, [r0]
   18f90:	movw	r1, #17860	; 0x45c4
   18f94:	mov	r0, r5
   18f98:	mov	r2, #1
   18f9c:	movt	r1, #2
   18fa0:	bl	1f4cc <flatcc_builder_check_required@@Base>
   18fa4:	cmp	r0, #0
   18fa8:	beq	19388 <test_clone_slice@@Base+0x9ac>
   18fac:	mov	r0, r5
   18fb0:	bl	1f55c <flatcc_builder_end_table@@Base>
   18fb4:	mov	r1, r0
   18fb8:	mov	r0, r5
   18fbc:	bl	1dd40 <flatcc_builder_end_buffer@@Base>
   18fc0:	add	r1, sp, #32
   18fc4:	mov	r0, r5
   18fc8:	bl	20b34 <flatcc_builder_get_direct_buffer@@Base>
   18fcc:	mov	r5, r0
   18fd0:	movw	r0, #32880	; 0x8070
   18fd4:	ldr	r2, [sp, #32]
   18fd8:	movt	r0, #3
   18fdc:	mov	r1, r5
   18fe0:	ldr	r3, [r0]
   18fe4:	movw	r0, #11852	; 0x2e4c
   18fe8:	movt	r0, #2
   18fec:	bl	1365c <test_type_aliases@@Base+0x51c>
   18ff0:	cmp	r5, #0
   18ff4:	beq	193a8 <test_clone_slice@@Base+0x9cc>
   18ff8:	ldr	r0, [r5, #4]
   18ffc:	cmp	r0, r6
   19000:	bne	193a8 <test_clone_slice@@Base+0x9cc>
   19004:	ldr	r0, [r5]
   19008:	ldr	r0, [r5, r0]!
   1900c:	mov	r4, r5
   19010:	ldrh	r8, [r4, -r0]!
   19014:	cmp	r8, #11
   19018:	bls	1937c <test_clone_slice@@Base+0x9a0>
   1901c:	ldrh	r0, [r4, #10]
   19020:	cmp	r0, #0
   19024:	beq	1937c <test_clone_slice@@Base+0x9a0>
   19028:	mov	r1, r5
   1902c:	ldr	r0, [r1, r0]!
   19030:	add	r0, r1, r0
   19034:	movw	r1, #11762	; 0x2df2
   19038:	add	r0, r0, #4
   1903c:	movt	r1, #2
   19040:	bl	12e8c <strcmp@plt>
   19044:	cmp	r0, #0
   19048:	beq	19070 <test_clone_slice@@Base+0x694>
   1904c:	movw	r0, #22480	; 0x57d0
   19050:	movt	r0, #2
   19054:	bl	12eec <puts@plt>
   19058:	mvn	r5, #0
   1905c:	ldr	r0, [sp, #20]
   19060:	bl	20d50 <flatcc_builder_aligned_free@@Base>
   19064:	mov	r0, r5
   19068:	sub	sp, fp, #28
   1906c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19070:	cmp	r8, #26
   19074:	bcc	19094 <test_clone_slice@@Base+0x6b8>
   19078:	ldrh	r1, [r4, #24]
   1907c:	cmp	r1, #0
   19080:	movne	r0, r5
   19084:	ldrne	r1, [r0, r1]!
   19088:	ldrne	r6, [r0, r1]!
   1908c:	cmpne	r6, #0
   19090:	bne	190b4 <test_clone_slice@@Base+0x6d8>
   19094:	movw	r0, #14633	; 0x3929
   19098:	movw	r1, #14688	; 0x3960
   1909c:	movw	r3, #15059	; 0x3ad3
   190a0:	mov	r2, #108	; 0x6c
   190a4:	movt	r0, #2
   190a8:	movt	r1, #2
   190ac:	movt	r3, #2
   190b0:	bl	12f88 <__assert_fail@plt>
   190b4:	add	r7, r0, #4
   190b8:	movw	r1, #11762	; 0x2df2
   190bc:	ldr	r0, [r7]
   190c0:	movt	r1, #2
   190c4:	add	r0, r7, r0
   190c8:	add	r0, r0, #4
   190cc:	bl	12e8c <strcmp@plt>
   190d0:	cmp	r0, #0
   190d4:	beq	190e4 <test_clone_slice@@Base+0x708>
   190d8:	movw	r0, #22448	; 0x57b0
   190dc:	movt	r0, #2
   190e0:	b	19054 <test_clone_slice@@Base+0x678>
   190e4:	cmp	r6, #1
   190e8:	bls	19094 <test_clone_slice@@Base+0x6b8>
   190ec:	mov	r0, r7
   190f0:	ldr	r1, [r0, #4]!
   190f4:	ldr	r1, [r0, r1]!
   190f8:	cmp	r1, #6
   190fc:	bne	19124 <test_clone_slice@@Base+0x748>
   19100:	movw	r1, #11766	; 0x2df6
   19104:	add	r0, r0, #4
   19108:	movt	r1, #2
   1910c:	bl	12e8c <strcmp@plt>
   19110:	cmp	r0, #0
   19114:	beq	19130 <test_clone_slice@@Base+0x754>
   19118:	movw	r0, #22368	; 0x5760
   1911c:	movt	r0, #2
   19120:	b	19054 <test_clone_slice@@Base+0x678>
   19124:	movw	r0, #22400	; 0x5780
   19128:	movt	r0, #2
   1912c:	b	19054 <test_clone_slice@@Base+0x678>
   19130:	cmp	r6, #2
   19134:	bls	19094 <test_clone_slice@@Base+0x6b8>
   19138:	ldr	r0, [r7, #8]!
   1913c:	ldr	r0, [r7, r0]!
   19140:	cmp	r0, #3
   19144:	bne	1916c <test_clone_slice@@Base+0x790>
   19148:	movw	r1, #11875	; 0x2e63
   1914c:	add	r0, r7, #4
   19150:	movt	r1, #2
   19154:	bl	12e8c <strcmp@plt>
   19158:	cmp	r0, #0
   1915c:	beq	19178 <test_clone_slice@@Base+0x79c>
   19160:	movw	r0, #22304	; 0x5720
   19164:	movt	r0, #2
   19168:	b	19054 <test_clone_slice@@Base+0x678>
   1916c:	movw	r0, #22336	; 0x5740
   19170:	movt	r0, #2
   19174:	b	19054 <test_clone_slice@@Base+0x678>
   19178:	ldrh	r0, [r4, #20]
   1917c:	cmp	r0, #0
   19180:	movne	r1, r5
   19184:	ldrne	r0, [r1, r0]!
   19188:	addsne	r9, r1, r0
   1918c:	bne	191b0 <test_clone_slice@@Base+0x7d4>
   19190:	movw	r0, #10316	; 0x284c
   19194:	movw	r1, #10320	; 0x2850
   19198:	movw	r3, #11799	; 0x2e17
   1919c:	mov	r2, #1664	; 0x680
   191a0:	movt	r0, #2
   191a4:	movt	r1, #2
   191a8:	movt	r3, #2
   191ac:	bl	12f88 <__assert_fail@plt>
   191b0:	ldr	r0, [r9]
   191b4:	mov	r7, r9
   191b8:	ldrh	r6, [r7, -r0]!
   191bc:	cmp	r6, #12
   191c0:	bcc	1937c <test_clone_slice@@Base+0x9a0>
   191c4:	ldrh	r0, [r7, #10]
   191c8:	cmp	r0, #0
   191cc:	beq	1937c <test_clone_slice@@Base+0x9a0>
   191d0:	mov	r1, r9
   191d4:	ldr	r0, [r1, r0]!
   191d8:	add	r0, r1, r0
   191dc:	movw	r1, #11764	; 0x2df4
   191e0:	add	r0, r0, #4
   191e4:	movt	r1, #2
   191e8:	bl	12e8c <strcmp@plt>
   191ec:	cmp	r0, #0
   191f0:	beq	19204 <test_clone_slice@@Base+0x828>
   191f4:	movw	r0, #11879	; 0x2e67
   191f8:	movt	r0, #2
   191fc:	bl	12e98 <printf@plt>
   19200:	b	19058 <test_clone_slice@@Base+0x67c>
   19204:	cmp	r6, #54	; 0x36
   19208:	bcc	19250 <test_clone_slice@@Base+0x874>
   1920c:	ldrh	r1, [r7, #52]	; 0x34
   19210:	cmp	r1, #0
   19214:	beq	19250 <test_clone_slice@@Base+0x874>
   19218:	mov	r0, r9
   1921c:	ldr	r1, [r0, r1]!
   19220:	ldr	r1, [r0, r1]!
   19224:	cmp	r1, #7
   19228:	bne	19250 <test_clone_slice@@Base+0x874>
   1922c:	add	r0, r0, #4
   19230:	add	r1, sp, #25
   19234:	mov	r2, #7
   19238:	bl	12ebc <memcmp@plt>
   1923c:	cmp	r0, #0
   19240:	beq	1925c <test_clone_slice@@Base+0x880>
   19244:	movw	r0, #22240	; 0x56e0
   19248:	movt	r0, #2
   1924c:	b	19054 <test_clone_slice@@Base+0x678>
   19250:	movw	r0, #22272	; 0x5700
   19254:	movt	r0, #2
   19258:	b	19054 <test_clone_slice@@Base+0x678>
   1925c:	cmp	r8, #54	; 0x36
   19260:	bcc	192a4 <test_clone_slice@@Base+0x8c8>
   19264:	ldrh	r1, [r4, #52]	; 0x34
   19268:	cmp	r1, #0
   1926c:	beq	192a4 <test_clone_slice@@Base+0x8c8>
   19270:	mov	r0, r5
   19274:	ldr	r1, [r0, r1]!
   19278:	ldr	r1, [r0, r1]!
   1927c:	cmp	r1, #4
   19280:	bne	192a4 <test_clone_slice@@Base+0x8c8>
   19284:	add	r0, r0, #4
   19288:	ldr	r1, [sp, #28]
   1928c:	ldr	r0, [r0]
   19290:	cmp	r0, r1
   19294:	beq	192b0 <test_clone_slice@@Base+0x8d4>
   19298:	movw	r0, #22176	; 0x56a0
   1929c:	movt	r0, #2
   192a0:	b	19054 <test_clone_slice@@Base+0x678>
   192a4:	movw	r0, #22208	; 0x56c0
   192a8:	movt	r0, #2
   192ac:	b	19054 <test_clone_slice@@Base+0x678>
   192b0:	ldrh	r0, [r4, #4]
   192b4:	vldr	s0, [pc, #332]	; 19408 <test_clone_slice@@Base+0xa2c>
   192b8:	add	r0, r5, r0
   192bc:	vldr	s2, [r0]
   192c0:	vcmp.f32	s2, s0
   192c4:	vmrs	APSR_nzcv, fpscr
   192c8:	beq	192d8 <test_clone_slice@@Base+0x8fc>
   192cc:	movw	r0, #22144	; 0x5680
   192d0:	movt	r0, #2
   192d4:	b	19054 <test_clone_slice@@Base+0x678>
   192d8:	ldrh	r0, [r4, #22]
   192dc:	cmp	r0, #0
   192e0:	beq	1934c <test_clone_slice@@Base+0x970>
   192e4:	ldr	r0, [r5, r0]!
   192e8:	ldr	r0, [r5, r0]!
   192ec:	cmp	r0, #2
   192f0:	bne	1934c <test_clone_slice@@Base+0x970>
   192f4:	add	r0, r5, #4
   192f8:	ldrh	r1, [r0]
   192fc:	cmp	r1, #22
   19300:	bne	19358 <test_clone_slice@@Base+0x97c>
   19304:	ldrh	r0, [r0, #4]
   19308:	cmp	r0, #44	; 0x2c
   1930c:	bne	19364 <test_clone_slice@@Base+0x988>
   19310:	ldrh	r0, [r7, #22]
   19314:	cmp	r0, #0
   19318:	beq	19370 <test_clone_slice@@Base+0x994>
   1931c:	ldr	r0, [r9, r0]!
   19320:	ldr	r0, [r9, r0]!
   19324:	cmp	r0, #1
   19328:	bne	19370 <test_clone_slice@@Base+0x994>
   1932c:	add	r0, r9, #4
   19330:	mov	r5, #0
   19334:	ldrh	r0, [r0]
   19338:	cmp	r0, #44	; 0x2c
   1933c:	beq	1905c <test_clone_slice@@Base+0x680>
   19340:	movw	r0, #21936	; 0x55b0
   19344:	movt	r0, #2
   19348:	b	19054 <test_clone_slice@@Base+0x678>
   1934c:	movw	r0, #22080	; 0x5640
   19350:	movt	r0, #2
   19354:	b	19054 <test_clone_slice@@Base+0x678>
   19358:	movw	r0, #22048	; 0x5620
   1935c:	movt	r0, #2
   19360:	b	19054 <test_clone_slice@@Base+0x678>
   19364:	movw	r0, #22016	; 0x5600
   19368:	movt	r0, #2
   1936c:	b	19054 <test_clone_slice@@Base+0x678>
   19370:	movw	r0, #21984	; 0x55e0
   19374:	movt	r0, #2
   19378:	b	19054 <test_clone_slice@@Base+0x678>
   1937c:	movw	r0, #14511	; 0x38af
   19380:	movt	r0, #2
   19384:	b	193b0 <test_clone_slice@@Base+0x9d4>
   19388:	movw	r0, #13899	; 0x364b
   1938c:	movw	r1, #13609	; 0x3529
   19390:	movw	r3, #14061	; 0x36ed
   19394:	mov	r2, #235	; 0xeb
   19398:	movt	r0, #2
   1939c:	movt	r1, #2
   193a0:	movt	r3, #2
   193a4:	bl	12f88 <__assert_fail@plt>
   193a8:	movw	r0, #13160	; 0x3368
   193ac:	movt	r0, #2
   193b0:	movw	r1, #13198	; 0x338e
   193b4:	movw	r3, #14430	; 0x385e
   193b8:	movw	r2, #699	; 0x2bb
   193bc:	movt	r1, #2
   193c0:	movt	r3, #2
   193c4:	bl	12f88 <__assert_fail@plt>
   193c8:	movw	r0, #11840	; 0x2e40
   193cc:	movw	r1, #10320	; 0x2850
   193d0:	movw	r3, #11799	; 0x2e17
   193d4:	movw	r2, #1606	; 0x646
   193d8:	movt	r0, #2
   193dc:	movt	r1, #2
   193e0:	movt	r3, #2
   193e4:	bl	12f88 <__assert_fail@plt>
   193e8:	movw	r0, #11846	; 0x2e46
   193ec:	movw	r1, #10320	; 0x2850
   193f0:	movw	r3, #11799	; 0x2e17
   193f4:	movw	r2, #1608	; 0x648
   193f8:	movt	r0, #2
   193fc:	movt	r1, #2
   19400:	movt	r3, #2
   19404:	bl	12f88 <__assert_fail@plt>
   19408:	eorgt	r3, r9, #-872415232	; 0xcc000000

0001940c <test_create_add_field@@Base>:
   1940c:	push	{r4, r5, fp, lr}
   19410:	add	fp, sp, #8
   19414:	sub	sp, sp, #8
   19418:	mov	r4, r0
   1941c:	bl	1d2e4 <flatcc_builder_reset@@Base>
   19420:	movw	r1, #9828	; 0x2664
   19424:	mov	r0, r4
   19428:	mov	r2, #0
   1942c:	mov	r3, #0
   19430:	movt	r1, #2
   19434:	bl	1db50 <flatcc_builder_start_buffer@@Base>
   19438:	cmp	r0, #0
   1943c:	bne	1944c <test_create_add_field@@Base+0x40>
   19440:	mov	r0, r4
   19444:	mov	r1, #36	; 0x24
   19448:	bl	1ebcc <flatcc_builder_start_table@@Base>
   1944c:	movw	r1, #9896	; 0x26a8
   19450:	mov	r0, r4
   19454:	movt	r1, #2
   19458:	bl	20844 <flatcc_builder_create_string_str@@Base>
   1945c:	cmp	r0, #0
   19460:	beq	1947c <test_create_add_field@@Base+0x70>
   19464:	mov	r5, r0
   19468:	mov	r0, r4
   1946c:	mov	r1, #3
   19470:	bl	1fd60 <flatcc_builder_table_add_offset@@Base>
   19474:	cmp	r0, #0
   19478:	strne	r5, [r0]
   1947c:	movw	r1, #11927	; 0x2e97
   19480:	mov	r0, r4
   19484:	movt	r1, #2
   19488:	bl	20844 <flatcc_builder_create_string_str@@Base>
   1948c:	mov	r5, r0
   19490:	mov	r0, r4
   19494:	mov	r1, #3
   19498:	bl	1ebcc <flatcc_builder_start_table@@Base>
   1949c:	cmp	r0, #0
   194a0:	beq	19534 <test_create_add_field@@Base+0x128>
   194a4:	movw	r1, #17860	; 0x45c4
   194a8:	mov	r0, r4
   194ac:	mov	r2, #1
   194b0:	movt	r1, #2
   194b4:	bl	1f4cc <flatcc_builder_check_required@@Base>
   194b8:	cmp	r0, #0
   194bc:	beq	196ac <test_create_add_field@@Base+0x2a0>
   194c0:	mov	r0, r4
   194c4:	bl	1f55c <flatcc_builder_end_table@@Base>
   194c8:	mov	r1, r0
   194cc:	mov	r0, r4
   194d0:	bl	1dd40 <flatcc_builder_end_buffer@@Base>
   194d4:	add	r1, sp, #4
   194d8:	mov	r0, r4
   194dc:	bl	20c50 <flatcc_builder_finalize_aligned_buffer@@Base>
   194e0:	cmp	r0, #0
   194e4:	beq	1968c <test_create_add_field@@Base+0x280>
   194e8:	mov	r4, r0
   194ec:	ldr	r0, [r0, #4]
   194f0:	movw	r1, #20301	; 0x4f4d
   194f4:	movt	r1, #21326	; 0x534e
   194f8:	cmp	r0, r1
   194fc:	bne	1968c <test_create_add_field@@Base+0x280>
   19500:	ldr	r1, [r4]
   19504:	mov	r0, r4
   19508:	ldr	r2, [r0, r1]!
   1950c:	mov	r1, r0
   19510:	ldrh	r2, [r1, -r2]!	; <UNPREDICTABLE>
   19514:	cmp	r2, #29
   19518:	bls	19608 <test_create_add_field@@Base+0x1fc>
   1951c:	ldrh	r3, [r1, #28]
   19520:	cmp	r3, #0
   19524:	beq	195ec <test_create_add_field@@Base+0x1e0>
   19528:	movw	r0, #22544	; 0x5810
   1952c:	movt	r0, #2
   19530:	b	19670 <test_create_add_field@@Base+0x264>
   19534:	mov	r0, r4
   19538:	mov	r1, #1
   1953c:	mov	r2, #8
   19540:	mov	r3, #8
   19544:	bl	1fe9c <flatcc_builder_table_add@@Base>
   19548:	cmp	r0, #0
   1954c:	beq	194a4 <test_create_add_field@@Base+0x98>
   19550:	mvn	r2, #99	; 0x63
   19554:	cmp	r5, #0
   19558:	mvn	r1, #0
   1955c:	str	r2, [r0]
   19560:	str	r1, [r0, #4]
   19564:	beq	194a4 <test_create_add_field@@Base+0x98>
   19568:	mov	r0, r4
   1956c:	mov	r1, #0
   19570:	bl	1fd60 <flatcc_builder_table_add_offset@@Base>
   19574:	cmp	r0, #0
   19578:	beq	194a4 <test_create_add_field@@Base+0x98>
   1957c:	str	r5, [r0]
   19580:	mov	r0, r4
   19584:	mov	r1, #2
   19588:	mov	r2, #2
   1958c:	mov	r3, #2
   19590:	mov	r5, #2
   19594:	bl	1fe9c <flatcc_builder_table_add@@Base>
   19598:	cmp	r0, #0
   1959c:	beq	194a4 <test_create_add_field@@Base+0x98>
   195a0:	movw	r1, #17866	; 0x45ca
   195a4:	strh	r5, [r0]
   195a8:	mov	r0, r4
   195ac:	mov	r2, #0
   195b0:	movt	r1, #2
   195b4:	bl	1f4cc <flatcc_builder_check_required@@Base>
   195b8:	cmp	r0, #0
   195bc:	beq	196cc <test_create_add_field@@Base+0x2c0>
   195c0:	mov	r0, r4
   195c4:	bl	1f55c <flatcc_builder_end_table@@Base>
   195c8:	cmp	r0, #0
   195cc:	beq	194a4 <test_create_add_field@@Base+0x98>
   195d0:	mov	r5, r0
   195d4:	mov	r0, r4
   195d8:	mov	r1, #14
   195dc:	bl	1fd60 <flatcc_builder_table_add_offset@@Base>
   195e0:	cmp	r0, #0
   195e4:	strne	r5, [r0]
   195e8:	b	194a4 <test_create_add_field@@Base+0x98>
   195ec:	cmp	r2, #34	; 0x22
   195f0:	bcc	19608 <test_create_add_field@@Base+0x1fc>
   195f4:	ldrh	r1, [r1, #32]
   195f8:	cmp	r1, #0
   195fc:	ldrne	r1, [r0, r1]!
   19600:	addsne	r0, r0, r1
   19604:	bne	19628 <test_create_add_field@@Base+0x21c>
   19608:	movw	r0, #13160	; 0x3368
   1960c:	movw	r1, #13198	; 0x338e
   19610:	movw	r3, #15608	; 0x3cf8
   19614:	mov	r2, #608	; 0x260
   19618:	movt	r0, #2
   1961c:	movt	r1, #2
   19620:	movt	r3, #2
   19624:	bl	12f88 <__assert_fail@plt>
   19628:	ldr	r2, [r0]
   1962c:	mov	r1, r0
   19630:	ldrh	r2, [r1, -r2]!	; <UNPREDICTABLE>
   19634:	cmp	r2, #8
   19638:	bcc	19668 <test_create_add_field@@Base+0x25c>
   1963c:	ldrh	r1, [r1, #6]
   19640:	cmp	r1, #0
   19644:	beq	19668 <test_create_add_field@@Base+0x25c>
   19648:	ldr	r1, [r0, r1]!
   1964c:	mvn	r2, #99	; 0x63
   19650:	mov	r5, #0
   19654:	ldr	r0, [r0, #4]
   19658:	eor	r1, r1, r2
   1965c:	mvn	r0, r0
   19660:	orrs	r0, r1, r0
   19664:	beq	19678 <test_create_add_field@@Base+0x26c>
   19668:	movw	r0, #22512	; 0x57f0
   1966c:	movt	r0, #2
   19670:	bl	12eec <puts@plt>
   19674:	mvn	r5, #0
   19678:	mov	r0, r4
   1967c:	bl	20d50 <flatcc_builder_aligned_free@@Base>
   19680:	mov	r0, r5
   19684:	sub	sp, fp, #8
   19688:	pop	{r4, r5, fp, pc}
   1968c:	movw	r0, #13160	; 0x3368
   19690:	movw	r1, #13198	; 0x338e
   19694:	movw	r3, #15532	; 0x3cac
   19698:	mov	r2, #716	; 0x2cc
   1969c:	movt	r0, #2
   196a0:	movt	r1, #2
   196a4:	movt	r3, #2
   196a8:	bl	12f88 <__assert_fail@plt>
   196ac:	movw	r0, #13899	; 0x364b
   196b0:	movw	r1, #13609	; 0x3529
   196b4:	movw	r3, #14061	; 0x36ed
   196b8:	mov	r2, #235	; 0xeb
   196bc:	movt	r0, #2
   196c0:	movt	r1, #2
   196c4:	movt	r3, #2
   196c8:	bl	12f88 <__assert_fail@plt>
   196cc:	movw	r0, #15304	; 0x3bc8
   196d0:	movw	r1, #13609	; 0x3529
   196d4:	movw	r3, #15457	; 0x3c61
   196d8:	mov	r2, #221	; 0xdd
   196dc:	movt	r0, #2
   196e0:	movt	r1, #2
   196e4:	movt	r3, #2
   196e8:	bl	12f88 <__assert_fail@plt>

000196ec <test_union_vector@@Base>:
   196ec:	push	{r4, r5, r6, sl, fp, lr}
   196f0:	add	fp, sp, #16
   196f4:	sub	sp, sp, #16
   196f8:	mov	r4, r0
   196fc:	bl	1d2e4 <flatcc_builder_reset@@Base>
   19700:	movw	r1, #9828	; 0x2664
   19704:	mov	r0, r4
   19708:	mov	r2, #0
   1970c:	mov	r3, #0
   19710:	movt	r1, #2
   19714:	bl	1db50 <flatcc_builder_start_buffer@@Base>
   19718:	cmp	r0, #0
   1971c:	bne	1972c <test_union_vector@@Base+0x40>
   19720:	mov	r0, r4
   19724:	mov	r1, #36	; 0x24
   19728:	bl	1ebcc <flatcc_builder_start_table@@Base>
   1972c:	movw	r1, #11933	; 0x2e9d
   19730:	mov	r0, r4
   19734:	movt	r1, #2
   19738:	bl	20844 <flatcc_builder_create_string_str@@Base>
   1973c:	cmp	r0, #0
   19740:	beq	1975c <test_union_vector@@Base+0x70>
   19744:	mov	r5, r0
   19748:	mov	r0, r4
   1974c:	mov	r1, #3
   19750:	bl	1fd60 <flatcc_builder_table_add_offset@@Base>
   19754:	cmp	r0, #0
   19758:	strne	r5, [r0]
   1975c:	mov	r0, r4
   19760:	mov	r1, #4
   19764:	bl	1ebcc <flatcc_builder_start_table@@Base>
   19768:	mov	r5, #0
   1976c:	cmp	r0, #0
   19770:	bne	1979c <test_union_vector@@Base+0xb0>
   19774:	movw	r1, #17868	; 0x45cc
   19778:	mov	r0, r4
   1977c:	mov	r2, #0
   19780:	movt	r1, #2
   19784:	bl	1f4cc <flatcc_builder_check_required@@Base>
   19788:	cmp	r0, #0
   1978c:	beq	19bfc <test_union_vector@@Base+0x510>
   19790:	mov	r0, r4
   19794:	bl	1f55c <flatcc_builder_end_table@@Base>
   19798:	mov	r5, r0
   1979c:	mov	r0, r4
   197a0:	bl	202b0 <flatcc_builder_start_union_vector@@Base>
   197a4:	mov	r0, r4
   197a8:	mov	r1, #2
   197ac:	mov	r2, r5
   197b0:	bl	205c4 <flatcc_builder_union_vector_push@@Base>
   197b4:	add	r0, sp, #4
   197b8:	mov	r1, r4
   197bc:	bl	20328 <flatcc_builder_end_union_vector@@Base>
   197c0:	ldr	r6, [sp, #4]
   197c4:	ldr	r5, [sp, #8]
   197c8:	mov	r0, r4
   197cc:	mov	r1, #4
   197d0:	bl	1ebcc <flatcc_builder_start_table@@Base>
   197d4:	cmp	r6, #0
   197d8:	cmpne	r5, #0
   197dc:	bne	19944 <test_union_vector@@Base+0x258>
   197e0:	movw	r1, #17870	; 0x45ce
   197e4:	mov	r0, r4
   197e8:	mov	r2, #0
   197ec:	movt	r1, #2
   197f0:	bl	1f4cc <flatcc_builder_check_required@@Base>
   197f4:	cmp	r0, #0
   197f8:	beq	19b9c <test_union_vector@@Base+0x4b0>
   197fc:	mov	r0, r4
   19800:	bl	1f55c <flatcc_builder_end_table@@Base>
   19804:	cmp	r0, #0
   19808:	beq	1984c <test_union_vector@@Base+0x160>
   1980c:	mov	r5, r0
   19810:	mov	r0, r4
   19814:	mov	r1, #7
   19818:	mov	r2, #1
   1981c:	mov	r3, #1
   19820:	bl	1fe9c <flatcc_builder_table_add@@Base>
   19824:	cmp	r0, #0
   19828:	beq	1984c <test_union_vector@@Base+0x160>
   1982c:	mov	r6, r0
   19830:	mov	r0, r4
   19834:	mov	r1, #8
   19838:	bl	1fd60 <flatcc_builder_table_add_offset@@Base>
   1983c:	cmp	r0, #0
   19840:	movne	r1, #4
   19844:	strbne	r1, [r6]
   19848:	strne	r5, [r0]
   1984c:	movw	r1, #17860	; 0x45c4
   19850:	mov	r0, r4
   19854:	mov	r2, #1
   19858:	movt	r1, #2
   1985c:	bl	1f4cc <flatcc_builder_check_required@@Base>
   19860:	cmp	r0, #0
   19864:	beq	19bbc <test_union_vector@@Base+0x4d0>
   19868:	mov	r0, r4
   1986c:	bl	1f55c <flatcc_builder_end_table@@Base>
   19870:	mov	r1, r0
   19874:	mov	r0, r4
   19878:	bl	1dd40 <flatcc_builder_end_buffer@@Base>
   1987c:	add	r1, sp, #12
   19880:	mov	r0, r4
   19884:	bl	20c50 <flatcc_builder_finalize_aligned_buffer@@Base>
   19888:	ldr	r1, [sp, #12]
   1988c:	movw	r2, #9828	; 0x2664
   19890:	movw	r3, #50112	; 0xc3c0
   19894:	mov	r4, r0
   19898:	movt	r2, #2
   1989c:	movt	r3, #1
   198a0:	bl	21de0 <flatcc_verify_table_as_root@@Base>
   198a4:	cmp	r0, #0
   198a8:	beq	198c8 <test_union_vector@@Base+0x1dc>
   198ac:	bl	21350 <flatcc_verify_error_string@@Base>
   198b0:	mov	r1, r0
   198b4:	movw	r0, #11940	; 0x2ea4
   198b8:	movt	r0, #2
   198bc:	bl	12e98 <printf@plt>
   198c0:	mvn	r0, #0
   198c4:	b	1998c <test_union_vector@@Base+0x2a0>
   198c8:	cmp	r4, #0
   198cc:	beq	19bdc <test_union_vector@@Base+0x4f0>
   198d0:	ldr	r0, [r4, #4]
   198d4:	movw	r1, #20301	; 0x4f4d
   198d8:	movt	r1, #21326	; 0x534e
   198dc:	cmp	r0, r1
   198e0:	bne	19bdc <test_union_vector@@Base+0x4f0>
   198e4:	ldr	r1, [r4]
   198e8:	mov	r0, r4
   198ec:	ldr	r2, [r0, r1]!
   198f0:	mov	r1, r0
   198f4:	ldrh	r2, [r1, -r2]!	; <UNPREDICTABLE>
   198f8:	cmp	r2, #19
   198fc:	bls	19974 <test_union_vector@@Base+0x288>
   19900:	ldrh	r3, [r1, #18]
   19904:	cmp	r3, #0
   19908:	beq	19974 <test_union_vector@@Base+0x288>
   1990c:	ldrb	r3, [r0, r3]
   19910:	cmp	r3, #4
   19914:	bne	19974 <test_union_vector@@Base+0x288>
   19918:	cmp	r2, #22
   1991c:	bcc	19934 <test_union_vector@@Base+0x248>
   19920:	ldrh	r1, [r1, #20]
   19924:	cmp	r1, #0
   19928:	ldrne	r1, [r0, r1]!
   1992c:	addsne	r5, r0, r1
   19930:	bne	19994 <test_union_vector@@Base+0x2a8>
   19934:	movw	r0, #22592	; 0x5840
   19938:	movt	r0, #2
   1993c:	bl	12eec <puts@plt>
   19940:	b	19980 <test_union_vector@@Base+0x294>
   19944:	mov	r0, r4
   19948:	mov	r1, #2
   1994c:	bl	1fd60 <flatcc_builder_table_add_offset@@Base>
   19950:	cmp	r0, #0
   19954:	beq	197e0 <test_union_vector@@Base+0xf4>
   19958:	str	r6, [r0]
   1995c:	mov	r0, r4
   19960:	mov	r1, #3
   19964:	bl	1fd60 <flatcc_builder_table_add_offset@@Base>
   19968:	cmp	r0, #0
   1996c:	strne	r5, [r0]
   19970:	b	197e0 <test_union_vector@@Base+0xf4>
   19974:	movw	r0, #12000	; 0x2ee0
   19978:	movt	r0, #2
   1997c:	bl	12e98 <printf@plt>
   19980:	mov	r0, r4
   19984:	bl	20d50 <flatcc_builder_aligned_free@@Base>
   19988:	mov	r0, #0
   1998c:	sub	sp, fp, #16
   19990:	pop	{r4, r5, r6, sl, fp, pc}
   19994:	ldr	r1, [r5]
   19998:	mov	r2, r5
   1999c:	ldrh	r3, [r2, -r1]!
   199a0:	cmp	r3, #12
   199a4:	bcc	199b8 <test_union_vector@@Base+0x2cc>
   199a8:	ldrh	r1, [r2, #10]
   199ac:	cmp	r1, #0
   199b0:	bne	19934 <test_union_vector@@Base+0x248>
   199b4:	b	199c0 <test_union_vector@@Base+0x2d4>
   199b8:	cmp	r3, #10
   199bc:	bcc	19a5c <test_union_vector@@Base+0x370>
   199c0:	ldrh	lr, [r2, #8]
   199c4:	mov	r6, #0
   199c8:	mov	r1, #0
   199cc:	cmp	lr, #0
   199d0:	movne	r0, r5
   199d4:	ldrne	r6, [r0, lr]!
   199d8:	addne	r0, r0, r6
   199dc:	addne	r6, r0, #4
   199e0:	cmp	r3, #12
   199e4:	bcc	19a0c <test_union_vector@@Base+0x320>
   199e8:	ldrh	r1, [r2, #10]
   199ec:	cmp	r1, #0
   199f0:	beq	19a08 <test_union_vector@@Base+0x31c>
   199f4:	mov	r0, r5
   199f8:	ldr	r1, [r0, r1]!
   199fc:	add	r0, r0, r1
   19a00:	add	r1, r0, #4
   19a04:	b	19a0c <test_union_vector@@Base+0x320>
   19a08:	mov	r1, #0
   19a0c:	cmp	r6, #0
   19a10:	beq	19a5c <test_union_vector@@Base+0x370>
   19a14:	ldr	r0, [r6, #-4]
   19a18:	cmp	r0, #1
   19a1c:	bne	19a5c <test_union_vector@@Base+0x370>
   19a20:	ldrb	r0, [r6]
   19a24:	cmp	r0, #2
   19a28:	bne	19a68 <test_union_vector@@Base+0x37c>
   19a2c:	cmp	r1, #0
   19a30:	ldrne	r0, [r1, #-4]
   19a34:	cmpne	r0, #0
   19a38:	bne	19a74 <test_union_vector@@Base+0x388>
   19a3c:	movw	r0, #14633	; 0x3929
   19a40:	movw	r1, #14688	; 0x3960
   19a44:	movw	r3, #16308	; 0x3fb4
   19a48:	mov	r2, #117	; 0x75
   19a4c:	movt	r0, #2
   19a50:	movt	r1, #2
   19a54:	movt	r3, #2
   19a58:	bl	12f88 <__assert_fail@plt>
   19a5c:	movw	r0, #22832	; 0x5930
   19a60:	movt	r0, #2
   19a64:	b	1993c <test_union_vector@@Base+0x250>
   19a68:	movw	r0, #22784	; 0x5900
   19a6c:	movt	r0, #2
   19a70:	b	1993c <test_union_vector@@Base+0x250>
   19a74:	ldr	r0, [r1]
   19a78:	adds	ip, r1, r0
   19a7c:	beq	19af0 <test_union_vector@@Base+0x404>
   19a80:	ldr	r0, [ip]
   19a84:	mov	r1, ip
   19a88:	ldrh	r0, [r1, -r0]!	; <UNPREDICTABLE>
   19a8c:	cmp	r0, #6
   19a90:	bcc	19ab0 <test_union_vector@@Base+0x3c4>
   19a94:	ldrh	r1, [r1, #4]
   19a98:	cmp	r1, #0
   19a9c:	beq	19ab0 <test_union_vector@@Base+0x3c4>
   19aa0:	add	r0, ip, r1
   19aa4:	ldrsb	r1, [r0]
   19aa8:	cmp	r1, #2
   19aac:	bne	19b80 <test_union_vector@@Base+0x494>
   19ab0:	cmp	lr, #0
   19ab4:	mov	r6, #0
   19ab8:	mov	r1, #0
   19abc:	movne	r0, r5
   19ac0:	ldrne	r6, [r0, lr]!
   19ac4:	addne	r0, r0, r6
   19ac8:	addne	r6, r0, #4
   19acc:	cmp	r3, #12
   19ad0:	bcc	19b00 <test_union_vector@@Base+0x414>
   19ad4:	ldrh	r1, [r2, #10]
   19ad8:	cmp	r1, #0
   19adc:	beq	19afc <test_union_vector@@Base+0x410>
   19ae0:	ldr	r0, [r5, r1]!
   19ae4:	add	r0, r5, r0
   19ae8:	add	r1, r0, #4
   19aec:	b	19b00 <test_union_vector@@Base+0x414>
   19af0:	movw	r0, #17663	; 0x44ff
   19af4:	movt	r0, #2
   19af8:	b	1993c <test_union_vector@@Base+0x250>
   19afc:	mov	r1, #0
   19b00:	cmp	r6, #0
   19b04:	mov	r2, #0
   19b08:	mov	r0, #0
   19b0c:	ldrne	r2, [r6, #-4]
   19b10:	cmp	r1, #0
   19b14:	ldrne	r0, [r1, #-4]
   19b18:	cmp	r2, r0
   19b1c:	bne	19c1c <test_union_vector@@Base+0x530>
   19b20:	cmp	r6, #0
   19b24:	beq	19b74 <test_union_vector@@Base+0x488>
   19b28:	ldr	r0, [r6, #-4]
   19b2c:	cmp	r0, #1
   19b30:	bne	19b74 <test_union_vector@@Base+0x488>
   19b34:	ldrb	r0, [r6]
   19b38:	cmp	r0, #0
   19b3c:	beq	19b90 <test_union_vector@@Base+0x4a4>
   19b40:	cmp	r1, #0
   19b44:	ldrne	r2, [r1, #-4]
   19b48:	cmpne	r2, #0
   19b4c:	beq	19a3c <test_union_vector@@Base+0x350>
   19b50:	cmp	r0, #2
   19b54:	bne	19b90 <test_union_vector@@Base+0x4a4>
   19b58:	ldr	r0, [r1]
   19b5c:	add	r0, r1, r0
   19b60:	cmp	r0, ip
   19b64:	beq	19980 <test_union_vector@@Base+0x294>
   19b68:	movw	r0, #22640	; 0x5870
   19b6c:	movt	r0, #2
   19b70:	b	1993c <test_union_vector@@Base+0x250>
   19b74:	movw	r0, #22704	; 0x58b0
   19b78:	movt	r0, #2
   19b7c:	b	1993c <test_union_vector@@Base+0x250>
   19b80:	movw	r0, #12034	; 0x2f02
   19b84:	movt	r0, #2
   19b88:	bl	12e98 <printf@plt>
   19b8c:	b	19980 <test_union_vector@@Base+0x294>
   19b90:	movw	r0, #22672	; 0x5890
   19b94:	movt	r0, #2
   19b98:	b	1993c <test_union_vector@@Base+0x250>
   19b9c:	movw	r0, #15992	; 0x3e78
   19ba0:	movw	r1, #13609	; 0x3529
   19ba4:	movw	r3, #16142	; 0x3f0e
   19ba8:	mov	r2, #223	; 0xdf
   19bac:	movt	r0, #2
   19bb0:	movt	r1, #2
   19bb4:	movt	r3, #2
   19bb8:	bl	12f88 <__assert_fail@plt>
   19bbc:	movw	r0, #13899	; 0x364b
   19bc0:	movw	r1, #13609	; 0x3529
   19bc4:	movw	r3, #14061	; 0x36ed
   19bc8:	mov	r2, #235	; 0xeb
   19bcc:	movt	r0, #2
   19bd0:	movt	r1, #2
   19bd4:	movt	r3, #2
   19bd8:	bl	12f88 <__assert_fail@plt>
   19bdc:	movw	r0, #13160	; 0x3368
   19be0:	movw	r1, #13198	; 0x338e
   19be4:	movw	r3, #15140	; 0x3b24
   19be8:	movw	r2, #717	; 0x2cd
   19bec:	movt	r0, #2
   19bf0:	movt	r1, #2
   19bf4:	movt	r3, #2
   19bf8:	bl	12f88 <__assert_fail@plt>
   19bfc:	movw	r0, #15669	; 0x3d35
   19c00:	movw	r1, #13609	; 0x3529
   19c04:	movw	r3, #15879	; 0x3e07
   19c08:	mov	r2, #217	; 0xd9
   19c0c:	movt	r0, #2
   19c10:	movt	r1, #2
   19c14:	movt	r3, #2
   19c18:	bl	12f88 <__assert_fail@plt>
   19c1c:	movw	r0, #16392	; 0x4008
   19c20:	movw	r1, #13198	; 0x338e
   19c24:	movw	r3, #16493	; 0x406d
   19c28:	movw	r2, #621	; 0x26d
   19c2c:	movt	r0, #2
   19c30:	movt	r1, #2
   19c34:	movt	r3, #2
   19c38:	bl	12f88 <__assert_fail@plt>

00019c3c <test_mixed_type_union@@Base>:
   19c3c:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   19c40:	add	fp, sp, #24
   19c44:	sub	sp, sp, #16
   19c48:	mov	r4, r0
   19c4c:	bl	1d2e4 <flatcc_builder_reset@@Base>
   19c50:	movw	r1, #9828	; 0x2664
   19c54:	mov	r0, r4
   19c58:	mov	r2, #0
   19c5c:	mov	r3, #0
   19c60:	mov	r8, #0
   19c64:	movt	r1, #2
   19c68:	bl	1db50 <flatcc_builder_start_buffer@@Base>
   19c6c:	cmp	r0, #0
   19c70:	bne	19c80 <test_mixed_type_union@@Base+0x44>
   19c74:	mov	r0, r4
   19c78:	mov	r1, #10
   19c7c:	bl	1ebcc <flatcc_builder_start_table@@Base>
   19c80:	mov	r0, r4
   19c84:	mov	r1, #4
   19c88:	mov	r2, #4
   19c8c:	bl	1de70 <flatcc_builder_start_struct@@Base>
   19c90:	cmp	r0, #0
   19c94:	beq	19cac <test_mixed_type_union@@Base+0x70>
   19c98:	mov	r1, #10
   19c9c:	str	r1, [r0]
   19ca0:	mov	r0, r4
   19ca4:	bl	1df10 <flatcc_builder_end_struct@@Base>
   19ca8:	mov	r8, r0
   19cac:	mov	r0, r4
   19cb0:	mov	r1, #2
   19cb4:	mov	r2, #2
   19cb8:	bl	1de70 <flatcc_builder_start_struct@@Base>
   19cbc:	cmp	r0, #0
   19cc0:	beq	19cdc <test_mixed_type_union@@Base+0xa0>
   19cc4:	mov	r1, #22
   19cc8:	strh	r1, [r0]
   19ccc:	mov	r0, r4
   19cd0:	bl	1df10 <flatcc_builder_end_struct@@Base>
   19cd4:	mov	r9, r0
   19cd8:	b	19ce0 <test_mixed_type_union@@Base+0xa4>
   19cdc:	mov	r9, #0
   19ce0:	mov	r0, r4
   19ce4:	mov	r1, #2
   19ce8:	mov	r2, #2
   19cec:	bl	1de70 <flatcc_builder_start_struct@@Base>
   19cf0:	cmp	r0, #0
   19cf4:	beq	19d50 <test_mixed_type_union@@Base+0x114>
   19cf8:	mov	r1, #19
   19cfc:	strh	r1, [r0]
   19d00:	mov	r0, r4
   19d04:	bl	1df10 <flatcc_builder_end_struct@@Base>
   19d08:	cmp	r0, #0
   19d0c:	beq	19d50 <test_mixed_type_union@@Base+0x114>
   19d10:	mov	r5, r0
   19d14:	mov	r0, r4
   19d18:	mov	r1, #0
   19d1c:	mov	r2, #1
   19d20:	mov	r3, #1
   19d24:	bl	1fe9c <flatcc_builder_table_add@@Base>
   19d28:	cmp	r0, #0
   19d2c:	beq	19d50 <test_mixed_type_union@@Base+0x114>
   19d30:	mov	r7, r0
   19d34:	mov	r0, r4
   19d38:	mov	r1, #1
   19d3c:	bl	1fd60 <flatcc_builder_table_add_offset@@Base>
   19d40:	cmp	r0, #0
   19d44:	movne	r1, #8
   19d48:	strbne	r1, [r7]
   19d4c:	strne	r5, [r0]
   19d50:	cmp	r9, #0
   19d54:	beq	19d94 <test_mixed_type_union@@Base+0x158>
   19d58:	mov	r0, r4
   19d5c:	mov	r1, #6
   19d60:	mov	r2, #1
   19d64:	mov	r3, #1
   19d68:	bl	1fe9c <flatcc_builder_table_add@@Base>
   19d6c:	cmp	r0, #0
   19d70:	beq	19d94 <test_mixed_type_union@@Base+0x158>
   19d74:	mov	r5, r0
   19d78:	mov	r0, r4
   19d7c:	mov	r1, #7
   19d80:	bl	1fd60 <flatcc_builder_table_add_offset@@Base>
   19d84:	cmp	r0, #0
   19d88:	movne	r1, #8
   19d8c:	strbne	r1, [r5]
   19d90:	strne	r9, [r0]
   19d94:	mov	r0, r4
   19d98:	mov	r1, #1
   19d9c:	bl	1ebcc <flatcc_builder_start_table@@Base>
   19da0:	mov	r7, #0
   19da4:	cmp	r0, #0
   19da8:	beq	19f74 <test_mixed_type_union@@Base+0x338>
   19dac:	movw	r1, #12063	; 0x2f1f
   19db0:	mov	r0, r4
   19db4:	movt	r1, #2
   19db8:	bl	20844 <flatcc_builder_create_string_str@@Base>
   19dbc:	cmp	r0, #0
   19dc0:	beq	19e04 <test_mixed_type_union@@Base+0x1c8>
   19dc4:	mov	r5, r0
   19dc8:	mov	r0, r4
   19dcc:	mov	r1, #4
   19dd0:	mov	r2, #1
   19dd4:	mov	r3, #1
   19dd8:	bl	1fe9c <flatcc_builder_table_add@@Base>
   19ddc:	cmp	r0, #0
   19de0:	beq	19e04 <test_mixed_type_union@@Base+0x1c8>
   19de4:	mov	r6, r0
   19de8:	mov	r0, r4
   19dec:	mov	r1, #5
   19df0:	bl	1fd60 <flatcc_builder_table_add_offset@@Base>
   19df4:	cmp	r0, #0
   19df8:	movne	r1, #11
   19dfc:	strbne	r1, [r6]
   19e00:	strne	r5, [r0]
   19e04:	mov	r0, r4
   19e08:	bl	202b0 <flatcc_builder_start_union_vector@@Base>
   19e0c:	mov	r0, r4
   19e10:	mov	r1, #8
   19e14:	mov	r2, r9
   19e18:	bl	205c4 <flatcc_builder_union_vector_push@@Base>
   19e1c:	mov	r0, r4
   19e20:	mov	r1, #2
   19e24:	mov	r2, r7
   19e28:	bl	205c4 <flatcc_builder_union_vector_push@@Base>
   19e2c:	mov	r0, r4
   19e30:	mov	r1, #1
   19e34:	bl	1ebcc <flatcc_builder_start_table@@Base>
   19e38:	mov	r6, #0
   19e3c:	cmp	r0, #0
   19e40:	mov	r5, #0
   19e44:	bne	19e98 <test_mixed_type_union@@Base+0x25c>
   19e48:	mov	r0, r4
   19e4c:	mov	r1, #0
   19e50:	mov	r2, #4
   19e54:	mov	r3, #4
   19e58:	mov	r5, #0
   19e5c:	bl	1fe9c <flatcc_builder_table_add@@Base>
   19e60:	cmp	r0, #0
   19e64:	beq	19e98 <test_mixed_type_union@@Base+0x25c>
   19e68:	mov	r1, #1
   19e6c:	mov	r2, #0
   19e70:	str	r1, [r0]
   19e74:	movw	r1, #17872	; 0x45d0
   19e78:	mov	r0, r4
   19e7c:	movt	r1, #2
   19e80:	bl	1f4cc <flatcc_builder_check_required@@Base>
   19e84:	cmp	r0, #0
   19e88:	beq	1a5d0 <test_mixed_type_union@@Base+0x994>
   19e8c:	mov	r0, r4
   19e90:	bl	1f55c <flatcc_builder_end_table@@Base>
   19e94:	mov	r5, r0
   19e98:	mov	r0, r4
   19e9c:	mov	r1, #2
   19ea0:	mov	r2, r5
   19ea4:	bl	205c4 <flatcc_builder_union_vector_push@@Base>
   19ea8:	movw	r1, #12074	; 0x2f2a
   19eac:	mov	r0, r4
   19eb0:	movt	r1, #2
   19eb4:	bl	20844 <flatcc_builder_create_string_str@@Base>
   19eb8:	mov	r2, r0
   19ebc:	mov	r0, r4
   19ec0:	mov	r1, #11
   19ec4:	bl	205c4 <flatcc_builder_union_vector_push@@Base>
   19ec8:	mov	r0, r4
   19ecc:	mov	r1, #9
   19ed0:	mov	r2, r8
   19ed4:	bl	205c4 <flatcc_builder_union_vector_push@@Base>
   19ed8:	mov	r0, r4
   19edc:	mov	r1, #4
   19ee0:	mov	r2, #4
   19ee4:	bl	1de70 <flatcc_builder_start_struct@@Base>
   19ee8:	mov	r1, #3
   19eec:	str	r1, [r0]
   19ef0:	mov	r0, r4
   19ef4:	bl	1df10 <flatcc_builder_end_struct@@Base>
   19ef8:	mov	r2, r0
   19efc:	mov	r0, r4
   19f00:	mov	r1, #9
   19f04:	bl	205c4 <flatcc_builder_union_vector_push@@Base>
   19f08:	mov	r0, r4
   19f0c:	mov	r1, #4
   19f10:	mov	r2, #4
   19f14:	bl	1de70 <flatcc_builder_start_struct@@Base>
   19f18:	cmp	r0, #0
   19f1c:	beq	19f34 <test_mixed_type_union@@Base+0x2f8>
   19f20:	mov	r1, #1
   19f24:	str	r1, [r0]
   19f28:	mov	r0, r4
   19f2c:	bl	1df10 <flatcc_builder_end_struct@@Base>
   19f30:	mov	r6, r0
   19f34:	mov	r0, r4
   19f38:	mov	r1, #9
   19f3c:	mov	r2, r6
   19f40:	bl	205c4 <flatcc_builder_union_vector_push@@Base>
   19f44:	mov	r0, r4
   19f48:	mov	r1, #4
   19f4c:	mov	r2, #4
   19f50:	bl	1de70 <flatcc_builder_start_struct@@Base>
   19f54:	cmp	r0, #0
   19f58:	beq	1a014 <test_mixed_type_union@@Base+0x3d8>
   19f5c:	mov	r1, #2
   19f60:	str	r1, [r0]
   19f64:	mov	r0, r4
   19f68:	bl	1df10 <flatcc_builder_end_struct@@Base>
   19f6c:	mov	r2, r0
   19f70:	b	1a018 <test_mixed_type_union@@Base+0x3dc>
   19f74:	mov	r0, r4
   19f78:	mov	r1, #0
   19f7c:	mov	r2, #4
   19f80:	mov	r3, #4
   19f84:	mov	r7, #0
   19f88:	bl	1fe9c <flatcc_builder_table_add@@Base>
   19f8c:	cmp	r0, #0
   19f90:	beq	19dac <test_mixed_type_union@@Base+0x170>
   19f94:	mov	r1, #42	; 0x2a
   19f98:	mov	r2, #0
   19f9c:	mov	r7, #0
   19fa0:	str	r1, [r0]
   19fa4:	movw	r1, #17872	; 0x45d0
   19fa8:	mov	r0, r4
   19fac:	movt	r1, #2
   19fb0:	bl	1f4cc <flatcc_builder_check_required@@Base>
   19fb4:	cmp	r0, #0
   19fb8:	beq	1a5d0 <test_mixed_type_union@@Base+0x994>
   19fbc:	mov	r0, r4
   19fc0:	bl	1f55c <flatcc_builder_end_table@@Base>
   19fc4:	cmp	r0, #0
   19fc8:	beq	19dac <test_mixed_type_union@@Base+0x170>
   19fcc:	mov	r5, r0
   19fd0:	mov	r0, r4
   19fd4:	mov	r1, #2
   19fd8:	mov	r2, #1
   19fdc:	mov	r3, #1
   19fe0:	bl	1fe9c <flatcc_builder_table_add@@Base>
   19fe4:	cmp	r0, #0
   19fe8:	beq	1a00c <test_mixed_type_union@@Base+0x3d0>
   19fec:	mov	r6, r0
   19ff0:	mov	r0, r4
   19ff4:	mov	r1, #3
   19ff8:	bl	1fd60 <flatcc_builder_table_add_offset@@Base>
   19ffc:	cmp	r0, #0
   1a000:	movne	r1, #2
   1a004:	strbne	r1, [r6]
   1a008:	strne	r5, [r0]
   1a00c:	mov	r7, r5
   1a010:	b	19dac <test_mixed_type_union@@Base+0x170>
   1a014:	mov	r2, #0
   1a018:	mov	r0, r4
   1a01c:	mov	r1, #9
   1a020:	bl	205c4 <flatcc_builder_union_vector_push@@Base>
   1a024:	movw	r1, #12072	; 0x2f28
   1a028:	mov	r0, r4
   1a02c:	movt	r1, #2
   1a030:	bl	20844 <flatcc_builder_create_string_str@@Base>
   1a034:	mov	r2, r0
   1a038:	mov	r0, r4
   1a03c:	mov	r1, #11
   1a040:	bl	205c4 <flatcc_builder_union_vector_push@@Base>
   1a044:	movw	r1, #12068	; 0x2f24
   1a048:	mov	r0, r4
   1a04c:	movt	r1, #2
   1a050:	bl	20844 <flatcc_builder_create_string_str@@Base>
   1a054:	mov	r2, r0
   1a058:	mov	r0, r4
   1a05c:	mov	r1, #11
   1a060:	bl	205c4 <flatcc_builder_union_vector_push@@Base>
   1a064:	add	r0, sp, #8
   1a068:	mov	r1, r4
   1a06c:	bl	20328 <flatcc_builder_end_union_vector@@Base>
   1a070:	ldr	r6, [sp, #8]
   1a074:	cmp	r6, #0
   1a078:	ldrne	r5, [sp, #12]
   1a07c:	cmpne	r5, #0
   1a080:	bne	1a19c <test_mixed_type_union@@Base+0x560>
   1a084:	movw	r1, #17874	; 0x45d2
   1a088:	mov	r0, r4
   1a08c:	mov	r2, #0
   1a090:	movt	r1, #2
   1a094:	bl	1f4cc <flatcc_builder_check_required@@Base>
   1a098:	cmp	r0, #0
   1a09c:	beq	1a580 <test_mixed_type_union@@Base+0x944>
   1a0a0:	mov	r0, r4
   1a0a4:	bl	1f55c <flatcc_builder_end_table@@Base>
   1a0a8:	mov	r1, r0
   1a0ac:	mov	r0, r4
   1a0b0:	bl	1dd40 <flatcc_builder_end_buffer@@Base>
   1a0b4:	add	r1, sp, #4
   1a0b8:	mov	r0, r4
   1a0bc:	bl	20c50 <flatcc_builder_finalize_aligned_buffer@@Base>
   1a0c0:	mov	r4, r0
   1a0c4:	movw	r0, #32880	; 0x8070
   1a0c8:	ldr	r2, [sp, #4]
   1a0cc:	movt	r0, #3
   1a0d0:	mov	r1, r4
   1a0d4:	ldr	r3, [r0]
   1a0d8:	movw	r0, #12080	; 0x2f30
   1a0dc:	movt	r0, #2
   1a0e0:	bl	1365c <test_type_aliases@@Base+0x51c>
   1a0e4:	ldr	r1, [sp, #4]
   1a0e8:	movw	r2, #9828	; 0x2664
   1a0ec:	movw	r3, #51836	; 0xca7c
   1a0f0:	mov	r0, r4
   1a0f4:	movt	r2, #2
   1a0f8:	movt	r3, #1
   1a0fc:	bl	21de0 <flatcc_verify_table_as_root@@Base>
   1a100:	cmp	r0, #0
   1a104:	beq	1a124 <test_mixed_type_union@@Base+0x4e8>
   1a108:	bl	21350 <flatcc_verify_error_string@@Base>
   1a10c:	mov	r1, r0
   1a110:	movw	r0, #12093	; 0x2f3d
   1a114:	movt	r0, #2
   1a118:	bl	12e98 <printf@plt>
   1a11c:	mvn	r5, #0
   1a120:	b	1a1f0 <test_mixed_type_union@@Base+0x5b4>
   1a124:	cmp	r4, #0
   1a128:	beq	1a5b0 <test_mixed_type_union@@Base+0x974>
   1a12c:	ldr	r0, [r4, #4]
   1a130:	movw	r1, #20301	; 0x4f4d
   1a134:	movt	r1, #21326	; 0x534e
   1a138:	cmp	r0, r1
   1a13c:	bne	1a5b0 <test_mixed_type_union@@Base+0x974>
   1a140:	ldr	r0, [r4]
   1a144:	mov	r5, r4
   1a148:	ldr	r0, [r5, r0]!
   1a14c:	mov	r7, r5
   1a150:	ldrh	r1, [r7, -r0]!
   1a154:	cmp	r1, #7
   1a158:	bls	1a1cc <test_mixed_type_union@@Base+0x590>
   1a15c:	ldrh	r0, [r7, #6]
   1a160:	cmp	r0, #0
   1a164:	beq	1a1cc <test_mixed_type_union@@Base+0x590>
   1a168:	cmp	r1, #24
   1a16c:	bcc	1a1d8 <test_mixed_type_union@@Base+0x59c>
   1a170:	ldrh	r6, [r7, #22]
   1a174:	cmp	r6, #0
   1a178:	beq	1a1d8 <test_mixed_type_union@@Base+0x59c>
   1a17c:	ldrh	r1, [r7, #4]
   1a180:	cmp	r1, #0
   1a184:	ldrbne	r1, [r5, r1]
   1a188:	cmpne	r1, #0
   1a18c:	bne	1a1fc <test_mixed_type_union@@Base+0x5c0>
   1a190:	movw	r0, #23584	; 0x5c20
   1a194:	movt	r0, #2
   1a198:	b	1a1e0 <test_mixed_type_union@@Base+0x5a4>
   1a19c:	mov	r0, r4
   1a1a0:	mov	r1, #8
   1a1a4:	bl	1fd60 <flatcc_builder_table_add_offset@@Base>
   1a1a8:	cmp	r0, #0
   1a1ac:	beq	1a084 <test_mixed_type_union@@Base+0x448>
   1a1b0:	str	r6, [r0]
   1a1b4:	mov	r0, r4
   1a1b8:	mov	r1, #9
   1a1bc:	bl	1fd60 <flatcc_builder_table_add_offset@@Base>
   1a1c0:	cmp	r0, #0
   1a1c4:	strne	r5, [r0]
   1a1c8:	b	1a084 <test_mixed_type_union@@Base+0x448>
   1a1cc:	movw	r0, #22880	; 0x5960
   1a1d0:	movt	r0, #2
   1a1d4:	b	1a1e0 <test_mixed_type_union@@Base+0x5a4>
   1a1d8:	movw	r0, #22928	; 0x5990
   1a1dc:	movt	r0, #2
   1a1e0:	bl	12eec <puts@plt>
   1a1e4:	mvn	r5, #0
   1a1e8:	mov	r0, r4
   1a1ec:	bl	20d50 <flatcc_builder_aligned_free@@Base>
   1a1f0:	mov	r0, r5
   1a1f4:	sub	sp, fp, #24
   1a1f8:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1a1fc:	cmp	r1, #8
   1a200:	bne	1a190 <test_mixed_type_union@@Base+0x554>
   1a204:	mov	r1, r5
   1a208:	ldr	r0, [r1, r0]!
   1a20c:	adds	r0, r1, r0
   1a210:	beq	1a22c <test_mixed_type_union@@Base+0x5f0>
   1a214:	ldrh	r0, [r0]
   1a218:	cmp	r0, #20
   1a21c:	bcc	1a23c <test_mixed_type_union@@Base+0x600>
   1a220:	movw	r0, #23536	; 0x5bf0
   1a224:	movt	r0, #2
   1a228:	b	1a1e0 <test_mixed_type_union@@Base+0x5a4>
   1a22c:	movw	r0, #22976	; 0x59c0
   1a230:	movt	r0, #2
   1a234:	bl	12eec <puts@plt>
   1a238:	b	1a280 <test_mixed_type_union@@Base+0x644>
   1a23c:	cmp	r0, #19
   1a240:	bne	1a280 <test_mixed_type_union@@Base+0x644>
   1a244:	ldrh	r0, [r7, #16]
   1a248:	cmp	r0, #0
   1a24c:	beq	1a28c <test_mixed_type_union@@Base+0x650>
   1a250:	ldrb	r0, [r5, r0]
   1a254:	cmp	r0, #8
   1a258:	bne	1a28c <test_mixed_type_union@@Base+0x650>
   1a25c:	ldrh	r0, [r7, #18]
   1a260:	cmp	r0, #0
   1a264:	movne	r1, r5
   1a268:	ldrne	r0, [r1, r0]!
   1a26c:	addsne	r0, r1, r0
   1a270:	bne	1a298 <test_mixed_type_union@@Base+0x65c>
   1a274:	movw	r0, #23008	; 0x59e0
   1a278:	movt	r0, #2
   1a27c:	b	1a1e0 <test_mixed_type_union@@Base+0x5a4>
   1a280:	movw	r0, #23488	; 0x5bc0
   1a284:	movt	r0, #2
   1a288:	b	1a1e0 <test_mixed_type_union@@Base+0x5a4>
   1a28c:	movw	r0, #23424	; 0x5b80
   1a290:	movt	r0, #2
   1a294:	b	1a1e0 <test_mixed_type_union@@Base+0x5a4>
   1a298:	ldrh	r0, [r0]
   1a29c:	cmp	r0, #22
   1a2a0:	bne	1a2e0 <test_mixed_type_union@@Base+0x6a4>
   1a2a4:	ldrh	r0, [r7, #8]
   1a2a8:	cmp	r0, #0
   1a2ac:	beq	1a2ec <test_mixed_type_union@@Base+0x6b0>
   1a2b0:	ldrb	r0, [r5, r0]
   1a2b4:	cmp	r0, #2
   1a2b8:	bne	1a2ec <test_mixed_type_union@@Base+0x6b0>
   1a2bc:	ldrh	r0, [r7, #10]
   1a2c0:	cmp	r0, #0
   1a2c4:	movne	r1, r5
   1a2c8:	ldrne	r0, [r1, r0]!
   1a2cc:	addsne	r0, r1, r0
   1a2d0:	bne	1a2f8 <test_mixed_type_union@@Base+0x6bc>
   1a2d4:	movw	r0, #23056	; 0x5a10
   1a2d8:	movt	r0, #2
   1a2dc:	b	1a1e0 <test_mixed_type_union@@Base+0x5a4>
   1a2e0:	movw	r0, #23376	; 0x5b50
   1a2e4:	movt	r0, #2
   1a2e8:	b	1a1e0 <test_mixed_type_union@@Base+0x5a4>
   1a2ec:	movw	r0, #23344	; 0x5b30
   1a2f0:	movt	r0, #2
   1a2f4:	b	1a1e0 <test_mixed_type_union@@Base+0x5a4>
   1a2f8:	ldr	r2, [r0]
   1a2fc:	mov	r1, r0
   1a300:	ldrh	r2, [r1, -r2]!	; <UNPREDICTABLE>
   1a304:	cmp	r2, #6
   1a308:	bcc	1a2d4 <test_mixed_type_union@@Base+0x698>
   1a30c:	ldrh	r1, [r1, #4]
   1a310:	cmp	r1, #0
   1a314:	beq	1a2d4 <test_mixed_type_union@@Base+0x698>
   1a318:	ldr	r0, [r0, r1]
   1a31c:	cmp	r0, #42	; 0x2a
   1a320:	bne	1a2d4 <test_mixed_type_union@@Base+0x698>
   1a324:	ldrh	r0, [r7, #12]
   1a328:	cmp	r0, #0
   1a32c:	beq	1a388 <test_mixed_type_union@@Base+0x74c>
   1a330:	ldrb	r0, [r5, r0]
   1a334:	cmp	r0, #11
   1a338:	bne	1a388 <test_mixed_type_union@@Base+0x74c>
   1a33c:	ldrh	r0, [r7, #14]
   1a340:	cmp	r0, #0
   1a344:	beq	1a394 <test_mixed_type_union@@Base+0x758>
   1a348:	mov	r1, r5
   1a34c:	ldr	r0, [r1, r0]!
   1a350:	adds	r9, r1, r0
   1a354:	add	r8, r9, #4
   1a358:	movne	r9, r8
   1a35c:	beq	1a394 <test_mixed_type_union@@Base+0x758>
   1a360:	movw	r1, #12063	; 0x2f1f
   1a364:	mov	r0, r9
   1a368:	movt	r1, #2
   1a36c:	bl	12e8c <strcmp@plt>
   1a370:	cmp	r0, #0
   1a374:	beq	1a3a0 <test_mixed_type_union@@Base+0x764>
   1a378:	movw	r0, #12172	; 0x2f8c
   1a37c:	mov	r1, r9
   1a380:	movt	r0, #2
   1a384:	b	1a3e8 <test_mixed_type_union@@Base+0x7ac>
   1a388:	movw	r0, #23312	; 0x5b10
   1a38c:	movt	r0, #2
   1a390:	b	1a1e0 <test_mixed_type_union@@Base+0x5a4>
   1a394:	movw	r0, #23104	; 0x5a40
   1a398:	movt	r0, #2
   1a39c:	b	1a1e0 <test_mixed_type_union@@Base+0x5a4>
   1a3a0:	movw	r1, #12063	; 0x2f1f
   1a3a4:	mov	r0, r8
   1a3a8:	movt	r1, #2
   1a3ac:	bl	12e8c <strcmp@plt>
   1a3b0:	cmp	r0, #0
   1a3b4:	beq	1a3c4 <test_mixed_type_union@@Base+0x788>
   1a3b8:	movw	r0, #12208	; 0x2fb0
   1a3bc:	movt	r0, #2
   1a3c0:	b	1a3e4 <test_mixed_type_union@@Base+0x7a8>
   1a3c4:	movw	r1, #12063	; 0x2f1f
   1a3c8:	mov	r0, r8
   1a3cc:	movt	r1, #2
   1a3d0:	bl	12e8c <strcmp@plt>
   1a3d4:	cmp	r0, #0
   1a3d8:	beq	1a3f0 <test_mixed_type_union@@Base+0x7b4>
   1a3dc:	movw	r0, #12253	; 0x2fdd
   1a3e0:	movt	r0, #2
   1a3e4:	mov	r1, r8
   1a3e8:	bl	12e98 <printf@plt>
   1a3ec:	b	1a1e4 <test_mixed_type_union@@Base+0x5a8>
   1a3f0:	ldrh	r1, [r7, #20]
   1a3f4:	mov	r0, r5
   1a3f8:	cmp	r1, #0
   1a3fc:	beq	1a424 <test_mixed_type_union@@Base+0x7e8>
   1a400:	ldr	r2, [r0, r6]!
   1a404:	add	r0, r0, r2
   1a408:	mov	r2, r5
   1a40c:	ldr	r3, [r2, r1]!
   1a410:	add	r0, r0, #4
   1a414:	ldr	r3, [r2, r3]!
   1a418:	add	r6, r2, #4
   1a41c:	mov	r2, #0
   1a420:	b	1a43c <test_mixed_type_union@@Base+0x800>
   1a424:	ldr	r2, [r0, r6]!
   1a428:	mov	r6, #0
   1a42c:	mov	r3, #0
   1a430:	add	r0, r0, r2
   1a434:	mov	r2, #1
   1a438:	add	r0, r0, #4
   1a43c:	ldr	r7, [r0, #-4]
   1a440:	cmp	r3, r7
   1a444:	bne	1a80c <test_mixed_type_union@@Base+0xbd0>
   1a448:	cmp	r2, #0
   1a44c:	bne	1a7cc <test_mixed_type_union@@Base+0xb90>
   1a450:	ldr	r8, [r6, #-4]
   1a454:	cmp	r8, #0
   1a458:	beq	1a7cc <test_mixed_type_union@@Base+0xb90>
   1a45c:	ldrb	r2, [r6]
   1a460:	cmp	r2, #0
   1a464:	beq	1a568 <test_mixed_type_union@@Base+0x92c>
   1a468:	ldr	r9, [r0, #-4]
   1a46c:	cmp	r9, #0
   1a470:	beq	1a7ec <test_mixed_type_union@@Base+0xbb0>
   1a474:	cmp	r2, #8
   1a478:	bne	1a568 <test_mixed_type_union@@Base+0x92c>
   1a47c:	cmp	r8, #1
   1a480:	bls	1a7cc <test_mixed_type_union@@Base+0xb90>
   1a484:	ldrb	r2, [r6, #1]
   1a488:	cmp	r2, #0
   1a48c:	beq	1a574 <test_mixed_type_union@@Base+0x938>
   1a490:	cmp	r9, #1
   1a494:	bls	1a7ec <test_mixed_type_union@@Base+0xbb0>
   1a498:	cmp	r2, #2
   1a49c:	bne	1a574 <test_mixed_type_union@@Base+0x938>
   1a4a0:	mov	r2, r0
   1a4a4:	ldr	r3, [r2, #4]!
   1a4a8:	add	r2, r2, r3
   1a4ac:	ldr	r7, [r2]
   1a4b0:	mov	r3, r2
   1a4b4:	ldrh	r7, [r3, -r7]!	; <UNPREDICTABLE>
   1a4b8:	cmp	r7, #6
   1a4bc:	bcc	1a5a0 <test_mixed_type_union@@Base+0x964>
   1a4c0:	ldrh	r3, [r3, #4]
   1a4c4:	cmp	r3, #0
   1a4c8:	beq	1a5a0 <test_mixed_type_union@@Base+0x964>
   1a4cc:	ldr	r2, [r2, r3]
   1a4d0:	cmp	r2, #42	; 0x2a
   1a4d4:	bne	1a5a0 <test_mixed_type_union@@Base+0x964>
   1a4d8:	cmp	r8, #2
   1a4dc:	bls	1a7cc <test_mixed_type_union@@Base+0xb90>
   1a4e0:	ldrb	r2, [r6, #2]
   1a4e4:	cmp	r2, #0
   1a4e8:	beq	1a5f0 <test_mixed_type_union@@Base+0x9b4>
   1a4ec:	cmp	r9, #2
   1a4f0:	bls	1a7ec <test_mixed_type_union@@Base+0xbb0>
   1a4f4:	cmp	r2, #2
   1a4f8:	bne	1a5f0 <test_mixed_type_union@@Base+0x9b4>
   1a4fc:	mov	r2, r0
   1a500:	ldr	r3, [r2, #8]!
   1a504:	add	r2, r2, r3
   1a508:	ldr	r7, [r2]
   1a50c:	mov	r3, r2
   1a510:	ldrh	r7, [r3, -r7]!	; <UNPREDICTABLE>
   1a514:	cmp	r7, #6
   1a518:	bcc	1a5fc <test_mixed_type_union@@Base+0x9c0>
   1a51c:	ldrh	r3, [r3, #4]
   1a520:	cmp	r3, #0
   1a524:	beq	1a5fc <test_mixed_type_union@@Base+0x9c0>
   1a528:	ldr	r2, [r2, r3]
   1a52c:	cmp	r2, #1
   1a530:	bne	1a5fc <test_mixed_type_union@@Base+0x9c0>
   1a534:	cmp	r1, #0
   1a538:	ldrne	r1, [r5, r1]!
   1a53c:	ldrne	r1, [r5, r1]!
   1a540:	cmpne	r1, #3
   1a544:	bhi	1a608 <test_mixed_type_union@@Base+0x9cc>
   1a548:	movw	r0, #14633	; 0x3929
   1a54c:	movw	r1, #14688	; 0x3960
   1a550:	movw	r3, #16215	; 0x3f57
   1a554:	movw	r2, #405	; 0x195
   1a558:	movt	r0, #2
   1a55c:	movt	r1, #2
   1a560:	movt	r3, #2
   1a564:	bl	12f88 <__assert_fail@plt>
   1a568:	movw	r0, #12298	; 0x300a
   1a56c:	movt	r0, #2
   1a570:	b	1a5a8 <test_mixed_type_union@@Base+0x96c>
   1a574:	movw	r0, #12335	; 0x302f
   1a578:	movt	r0, #2
   1a57c:	b	1a5a8 <test_mixed_type_union@@Base+0x96c>
   1a580:	movw	r0, #16830	; 0x41be
   1a584:	movw	r1, #13609	; 0x3529
   1a588:	movw	r3, #16965	; 0x4245
   1a58c:	mov	r2, #241	; 0xf1
   1a590:	movt	r0, #2
   1a594:	movt	r1, #2
   1a598:	movt	r3, #2
   1a59c:	bl	12f88 <__assert_fail@plt>
   1a5a0:	movw	r0, #12370	; 0x3052
   1a5a4:	movt	r0, #2
   1a5a8:	bl	12e98 <printf@plt>
   1a5ac:	b	1a1e4 <test_mixed_type_union@@Base+0x5a8>
   1a5b0:	movw	r0, #13160	; 0x3368
   1a5b4:	movw	r1, #13198	; 0x338e
   1a5b8:	movw	r3, #17028	; 0x4284
   1a5bc:	movw	r2, #819	; 0x333
   1a5c0:	movt	r0, #2
   1a5c4:	movt	r1, #2
   1a5c8:	movt	r3, #2
   1a5cc:	bl	12f88 <__assert_fail@plt>
   1a5d0:	movw	r0, #16617	; 0x40e9
   1a5d4:	movw	r1, #13609	; 0x3529
   1a5d8:	movw	r3, #16761	; 0x4179
   1a5dc:	mov	r2, #239	; 0xef
   1a5e0:	movt	r0, #2
   1a5e4:	movt	r1, #2
   1a5e8:	movt	r3, #2
   1a5ec:	bl	12f88 <__assert_fail@plt>
   1a5f0:	movw	r0, #12420	; 0x3084
   1a5f4:	movt	r0, #2
   1a5f8:	b	1a5a8 <test_mixed_type_union@@Base+0x96c>
   1a5fc:	movw	r0, #12454	; 0x30a6
   1a600:	movt	r0, #2
   1a604:	b	1a5a8 <test_mixed_type_union@@Base+0x96c>
   1a608:	add	r1, r5, #4
   1a60c:	ldrb	r1, [r1, #3]
   1a610:	cmp	r1, #11
   1a614:	bne	1a650 <test_mixed_type_union@@Base+0xa14>
   1a618:	cmp	r9, #3
   1a61c:	bls	1a82c <test_mixed_type_union@@Base+0xbf0>
   1a620:	ldr	r1, [r0, #12]!
   1a624:	add	r0, r0, r1
   1a628:	movw	r1, #12074	; 0x2f2a
   1a62c:	add	r5, r0, #4
   1a630:	movt	r1, #2
   1a634:	mov	r0, r5
   1a638:	bl	12e8c <strcmp@plt>
   1a63c:	cmp	r0, #0
   1a640:	beq	1a65c <test_mixed_type_union@@Base+0xa20>
   1a644:	movw	r0, #23136	; 0x5a60
   1a648:	movt	r0, #2
   1a64c:	b	1a1e0 <test_mixed_type_union@@Base+0x5a4>
   1a650:	movw	r0, #23264	; 0x5ae0
   1a654:	movt	r0, #2
   1a658:	b	1a1e0 <test_mixed_type_union@@Base+0x5a4>
   1a65c:	cmp	r8, #3
   1a660:	bls	1a7cc <test_mixed_type_union@@Base+0xb90>
   1a664:	ldrb	r0, [r6, #3]
   1a668:	cmp	r0, #11
   1a66c:	bne	1a694 <test_mixed_type_union@@Base+0xa58>
   1a670:	movw	r1, #12074	; 0x2f2a
   1a674:	mov	r0, r5
   1a678:	movt	r1, #2
   1a67c:	bl	12e8c <strcmp@plt>
   1a680:	cmp	r0, #0
   1a684:	beq	1a6a0 <test_mixed_type_union@@Base+0xa64>
   1a688:	movw	r0, #23200	; 0x5aa0
   1a68c:	movt	r0, #2
   1a690:	b	1a1e0 <test_mixed_type_union@@Base+0x5a4>
   1a694:	movw	r0, #12503	; 0x30d7
   1a698:	movt	r0, #2
   1a69c:	b	1a5a8 <test_mixed_type_union@@Base+0x96c>
   1a6a0:	cmp	r8, #4
   1a6a4:	bls	1a7cc <test_mixed_type_union@@Base+0xb90>
   1a6a8:	ldrb	r0, [r6, #4]
   1a6ac:	cmp	r0, #0
   1a6b0:	beq	1a790 <test_mixed_type_union@@Base+0xb54>
   1a6b4:	cmp	r9, #4
   1a6b8:	bls	1a7ec <test_mixed_type_union@@Base+0xbb0>
   1a6bc:	cmp	r0, #9
   1a6c0:	bne	1a790 <test_mixed_type_union@@Base+0xb54>
   1a6c4:	cmp	r8, #5
   1a6c8:	bls	1a7cc <test_mixed_type_union@@Base+0xb90>
   1a6cc:	ldrb	r0, [r6, #5]
   1a6d0:	cmp	r0, #0
   1a6d4:	beq	1a79c <test_mixed_type_union@@Base+0xb60>
   1a6d8:	cmp	r9, #5
   1a6dc:	bls	1a7ec <test_mixed_type_union@@Base+0xbb0>
   1a6e0:	cmp	r0, #9
   1a6e4:	bne	1a79c <test_mixed_type_union@@Base+0xb60>
   1a6e8:	cmp	r8, #6
   1a6ec:	bls	1a7cc <test_mixed_type_union@@Base+0xb90>
   1a6f0:	ldrb	r0, [r6, #6]
   1a6f4:	cmp	r0, #0
   1a6f8:	beq	1a7a8 <test_mixed_type_union@@Base+0xb6c>
   1a6fc:	cmp	r9, #6
   1a700:	bls	1a7ec <test_mixed_type_union@@Base+0xbb0>
   1a704:	cmp	r0, #9
   1a708:	bne	1a7a8 <test_mixed_type_union@@Base+0xb6c>
   1a70c:	cmp	r8, #7
   1a710:	bls	1a7cc <test_mixed_type_union@@Base+0xb90>
   1a714:	ldrb	r0, [r6, #7]
   1a718:	cmp	r0, #0
   1a71c:	beq	1a7b4 <test_mixed_type_union@@Base+0xb78>
   1a720:	cmp	r9, #7
   1a724:	bls	1a7ec <test_mixed_type_union@@Base+0xbb0>
   1a728:	cmp	r0, #9
   1a72c:	bne	1a7b4 <test_mixed_type_union@@Base+0xb78>
   1a730:	cmp	r8, #8
   1a734:	bls	1a7cc <test_mixed_type_union@@Base+0xb90>
   1a738:	ldrb	r0, [r6, #8]
   1a73c:	cmp	r0, #0
   1a740:	beq	1a7c0 <test_mixed_type_union@@Base+0xb84>
   1a744:	cmp	r9, #8
   1a748:	bls	1a7ec <test_mixed_type_union@@Base+0xbb0>
   1a74c:	cmp	r0, #11
   1a750:	bne	1a7c0 <test_mixed_type_union@@Base+0xb84>
   1a754:	cmp	r8, #9
   1a758:	bls	1a7cc <test_mixed_type_union@@Base+0xb90>
   1a75c:	ldrb	r0, [r6, #9]
   1a760:	cmp	r0, #0
   1a764:	beq	1a7c0 <test_mixed_type_union@@Base+0xb84>
   1a768:	cmp	r9, #9
   1a76c:	bls	1a7ec <test_mixed_type_union@@Base+0xbb0>
   1a770:	cmp	r0, #11
   1a774:	bne	1a7c0 <test_mixed_type_union@@Base+0xb84>
   1a778:	mov	r5, #0
   1a77c:	cmp	r8, #10
   1a780:	beq	1a1e8 <test_mixed_type_union@@Base+0x5ac>
   1a784:	movw	r0, #12742	; 0x31c6
   1a788:	movt	r0, #2
   1a78c:	b	1a5a8 <test_mixed_type_union@@Base+0x96c>
   1a790:	movw	r0, #12559	; 0x310f
   1a794:	movt	r0, #2
   1a798:	b	1a5a8 <test_mixed_type_union@@Base+0x96c>
   1a79c:	movw	r0, #12593	; 0x3131
   1a7a0:	movt	r0, #2
   1a7a4:	b	1a5a8 <test_mixed_type_union@@Base+0x96c>
   1a7a8:	movw	r0, #12627	; 0x3153
   1a7ac:	movt	r0, #2
   1a7b0:	b	1a5a8 <test_mixed_type_union@@Base+0x96c>
   1a7b4:	movw	r0, #12663	; 0x3177
   1a7b8:	movt	r0, #2
   1a7bc:	b	1a5a8 <test_mixed_type_union@@Base+0x96c>
   1a7c0:	movw	r0, #12698	; 0x319a
   1a7c4:	movt	r0, #2
   1a7c8:	b	1a5a8 <test_mixed_type_union@@Base+0x96c>
   1a7cc:	movw	r0, #16585	; 0x40c9
   1a7d0:	movw	r1, #13198	; 0x338e
   1a7d4:	movw	r3, #17179	; 0x431b
   1a7d8:	movw	r2, #773	; 0x305
   1a7dc:	movt	r0, #2
   1a7e0:	movt	r1, #2
   1a7e4:	movt	r3, #2
   1a7e8:	bl	12f88 <__assert_fail@plt>
   1a7ec:	movw	r0, #14633	; 0x3929
   1a7f0:	movw	r1, #14688	; 0x3960
   1a7f4:	movw	r3, #16308	; 0x3fb4
   1a7f8:	mov	r2, #117	; 0x75
   1a7fc:	movt	r0, #2
   1a800:	movt	r1, #2
   1a804:	movt	r3, #2
   1a808:	bl	12f88 <__assert_fail@plt>
   1a80c:	movw	r0, #16392	; 0x4008
   1a810:	movw	r1, #13198	; 0x338e
   1a814:	movw	r3, #17095	; 0x42c7
   1a818:	movw	r2, #823	; 0x337
   1a81c:	movt	r0, #2
   1a820:	movt	r1, #2
   1a824:	movt	r3, #2
   1a828:	bl	12f88 <__assert_fail@plt>
   1a82c:	movw	r0, #14633	; 0x3929
   1a830:	movw	r1, #14688	; 0x3960
   1a834:	movw	r3, #17275	; 0x437b
   1a838:	mov	r2, #119	; 0x77
   1a83c:	movt	r0, #2
   1a840:	movt	r1, #2
   1a844:	movt	r3, #2
   1a848:	bl	12f88 <__assert_fail@plt>

0001a84c <test_add_set_defaults@@Base>:
   1a84c:	push	{r4, r5, r6, sl, fp, lr}
   1a850:	add	fp, sp, #16
   1a854:	sub	sp, sp, #8
   1a858:	mov	r4, r0
   1a85c:	bl	1d2e4 <flatcc_builder_reset@@Base>
   1a860:	movw	r1, #9828	; 0x2664
   1a864:	mov	r0, r4
   1a868:	mov	r2, #0
   1a86c:	mov	r3, #0
   1a870:	movt	r1, #2
   1a874:	bl	1db50 <flatcc_builder_start_buffer@@Base>
   1a878:	cmp	r0, #0
   1a87c:	bne	1a88c <test_add_set_defaults@@Base+0x40>
   1a880:	mov	r0, r4
   1a884:	mov	r1, #36	; 0x24
   1a888:	bl	1ebcc <flatcc_builder_start_table@@Base>
   1a88c:	movw	r1, #9896	; 0x26a8
   1a890:	mov	r0, r4
   1a894:	movt	r1, #2
   1a898:	bl	20844 <flatcc_builder_create_string_str@@Base>
   1a89c:	cmp	r0, #0
   1a8a0:	beq	1a8bc <test_add_set_defaults@@Base+0x70>
   1a8a4:	mov	r5, r0
   1a8a8:	mov	r0, r4
   1a8ac:	mov	r1, #3
   1a8b0:	bl	1fd60 <flatcc_builder_table_add_offset@@Base>
   1a8b4:	cmp	r0, #0
   1a8b8:	strne	r5, [r0]
   1a8bc:	mov	r0, r4
   1a8c0:	mov	r1, #1
   1a8c4:	mov	r2, #2
   1a8c8:	mov	r3, #2
   1a8cc:	bl	1fe9c <flatcc_builder_table_add@@Base>
   1a8d0:	cmp	r0, #0
   1a8d4:	mov	r2, #1
   1a8d8:	movne	r1, #100	; 0x64
   1a8dc:	strhne	r1, [r0]
   1a8e0:	movw	r1, #17860	; 0x45c4
   1a8e4:	mov	r0, r4
   1a8e8:	movt	r1, #2
   1a8ec:	bl	1f4cc <flatcc_builder_check_required@@Base>
   1a8f0:	cmp	r0, #0
   1a8f4:	beq	1ab48 <test_add_set_defaults@@Base+0x2fc>
   1a8f8:	mov	r0, r4
   1a8fc:	bl	1f55c <flatcc_builder_end_table@@Base>
   1a900:	mov	r1, r0
   1a904:	mov	r0, r4
   1a908:	bl	1dd40 <flatcc_builder_end_buffer@@Base>
   1a90c:	add	r1, sp, #4
   1a910:	mov	r0, r4
   1a914:	bl	20b34 <flatcc_builder_get_direct_buffer@@Base>
   1a918:	cmp	r0, #0
   1a91c:	beq	1ab28 <test_add_set_defaults@@Base+0x2dc>
   1a920:	ldr	r1, [r0, #4]
   1a924:	movw	r6, #20301	; 0x4f4d
   1a928:	movt	r6, #21326	; 0x534e
   1a92c:	cmp	r1, r6
   1a930:	bne	1ab28 <test_add_set_defaults@@Base+0x2dc>
   1a934:	ldr	r1, [r0]
   1a938:	ldr	r1, [r0, r1]!
   1a93c:	ldrh	r1, [r0, -r1]!	; <UNPREDICTABLE>
   1a940:	cmp	r1, #9
   1a944:	bls	1a960 <test_add_set_defaults@@Base+0x114>
   1a948:	ldrh	r2, [r0, #8]
   1a94c:	cmp	r2, #0
   1a950:	beq	1a968 <test_add_set_defaults@@Base+0x11c>
   1a954:	movw	r0, #23904	; 0x5d60
   1a958:	movt	r0, #2
   1a95c:	b	1ab0c <test_add_set_defaults@@Base+0x2c0>
   1a960:	cmp	r1, #8
   1a964:	bcc	1a994 <test_add_set_defaults@@Base+0x148>
   1a968:	ldrh	r2, [r0, #6]
   1a96c:	cmp	r2, #0
   1a970:	beq	1a994 <test_add_set_defaults@@Base+0x148>
   1a974:	cmp	r1, #18
   1a978:	bcc	1a9a0 <test_add_set_defaults@@Base+0x154>
   1a97c:	ldrh	r0, [r0, #16]
   1a980:	cmp	r0, #0
   1a984:	beq	1a9a0 <test_add_set_defaults@@Base+0x154>
   1a988:	movw	r0, #23856	; 0x5d30
   1a98c:	movt	r0, #2
   1a990:	b	1ab0c <test_add_set_defaults@@Base+0x2c0>
   1a994:	movw	r0, #23616	; 0x5c40
   1a998:	movt	r0, #2
   1a99c:	b	1ab0c <test_add_set_defaults@@Base+0x2c0>
   1a9a0:	mov	r0, r4
   1a9a4:	bl	1d2e4 <flatcc_builder_reset@@Base>
   1a9a8:	movw	r1, #9828	; 0x2664
   1a9ac:	mov	r0, r4
   1a9b0:	mov	r2, #0
   1a9b4:	mov	r3, #0
   1a9b8:	movt	r1, #2
   1a9bc:	bl	1db50 <flatcc_builder_start_buffer@@Base>
   1a9c0:	cmp	r0, #0
   1a9c4:	bne	1a9d4 <test_add_set_defaults@@Base+0x188>
   1a9c8:	mov	r0, r4
   1a9cc:	mov	r1, #36	; 0x24
   1a9d0:	bl	1ebcc <flatcc_builder_start_table@@Base>
   1a9d4:	movw	r1, #9896	; 0x26a8
   1a9d8:	mov	r0, r4
   1a9dc:	movt	r1, #2
   1a9e0:	bl	20844 <flatcc_builder_create_string_str@@Base>
   1a9e4:	cmp	r0, #0
   1a9e8:	beq	1aa04 <test_add_set_defaults@@Base+0x1b8>
   1a9ec:	mov	r5, r0
   1a9f0:	mov	r0, r4
   1a9f4:	mov	r1, #3
   1a9f8:	bl	1fd60 <flatcc_builder_table_add_offset@@Base>
   1a9fc:	cmp	r0, #0
   1aa00:	strne	r5, [r0]
   1aa04:	mov	r0, r4
   1aa08:	mov	r1, #2
   1aa0c:	mov	r2, #2
   1aa10:	mov	r3, #2
   1aa14:	bl	1fe9c <flatcc_builder_table_add@@Base>
   1aa18:	cmp	r0, #0
   1aa1c:	mov	r2, #2
   1aa20:	mov	r3, #2
   1aa24:	movne	r1, #100	; 0x64
   1aa28:	strhne	r1, [r0]
   1aa2c:	mov	r0, r4
   1aa30:	mov	r1, #1
   1aa34:	bl	1fe9c <flatcc_builder_table_add@@Base>
   1aa38:	cmp	r0, #0
   1aa3c:	mov	r2, #1
   1aa40:	mov	r3, #1
   1aa44:	movne	r1, #100	; 0x64
   1aa48:	strhne	r1, [r0]
   1aa4c:	mov	r0, r4
   1aa50:	mov	r1, #6
   1aa54:	bl	1fe9c <flatcc_builder_table_add@@Base>
   1aa58:	cmp	r0, #0
   1aa5c:	mov	r2, #1
   1aa60:	movne	r1, #8
   1aa64:	strbne	r1, [r0]
   1aa68:	movw	r1, #17860	; 0x45c4
   1aa6c:	mov	r0, r4
   1aa70:	movt	r1, #2
   1aa74:	bl	1f4cc <flatcc_builder_check_required@@Base>
   1aa78:	cmp	r0, #0
   1aa7c:	beq	1ab48 <test_add_set_defaults@@Base+0x2fc>
   1aa80:	mov	r0, r4
   1aa84:	bl	1f55c <flatcc_builder_end_table@@Base>
   1aa88:	mov	r1, r0
   1aa8c:	mov	r0, r4
   1aa90:	bl	1dd40 <flatcc_builder_end_buffer@@Base>
   1aa94:	add	r1, sp, #4
   1aa98:	mov	r0, r4
   1aa9c:	bl	20b34 <flatcc_builder_get_direct_buffer@@Base>
   1aaa0:	cmp	r0, #0
   1aaa4:	beq	1ab28 <test_add_set_defaults@@Base+0x2dc>
   1aaa8:	ldr	r1, [r0, #4]
   1aaac:	cmp	r1, r6
   1aab0:	bne	1ab28 <test_add_set_defaults@@Base+0x2dc>
   1aab4:	ldr	r1, [r0]
   1aab8:	ldr	r1, [r0, r1]!
   1aabc:	ldrh	r1, [r0, -r1]!	; <UNPREDICTABLE>
   1aac0:	cmp	r1, #9
   1aac4:	bls	1ab04 <test_add_set_defaults@@Base+0x2b8>
   1aac8:	ldrh	r2, [r0, #8]
   1aacc:	cmp	r2, #0
   1aad0:	beq	1ab04 <test_add_set_defaults@@Base+0x2b8>
   1aad4:	ldrh	r2, [r0, #6]
   1aad8:	cmp	r2, #0
   1aadc:	beq	1ab1c <test_add_set_defaults@@Base+0x2d0>
   1aae0:	cmp	r1, #18
   1aae4:	bcc	1aaf8 <test_add_set_defaults@@Base+0x2ac>
   1aae8:	ldrh	r1, [r0, #16]
   1aaec:	mov	r0, #0
   1aaf0:	cmp	r1, #0
   1aaf4:	bne	1ab14 <test_add_set_defaults@@Base+0x2c8>
   1aaf8:	movw	r0, #23792	; 0x5cf0
   1aafc:	movt	r0, #2
   1ab00:	b	1ab0c <test_add_set_defaults@@Base+0x2c0>
   1ab04:	movw	r0, #23664	; 0x5c70
   1ab08:	movt	r0, #2
   1ab0c:	bl	12eec <puts@plt>
   1ab10:	mvn	r0, #0
   1ab14:	sub	sp, fp, #16
   1ab18:	pop	{r4, r5, r6, sl, fp, pc}
   1ab1c:	movw	r0, #23728	; 0x5cb0
   1ab20:	movt	r0, #2
   1ab24:	b	1ab0c <test_add_set_defaults@@Base+0x2c0>
   1ab28:	movw	r0, #13160	; 0x3368
   1ab2c:	movw	r1, #13198	; 0x338e
   1ab30:	movw	r3, #13362	; 0x3432
   1ab34:	movw	r2, #697	; 0x2b9
   1ab38:	movt	r0, #2
   1ab3c:	movt	r1, #2
   1ab40:	movt	r3, #2
   1ab44:	bl	12f88 <__assert_fail@plt>
   1ab48:	movw	r0, #13899	; 0x364b
   1ab4c:	movw	r1, #13609	; 0x3529
   1ab50:	movw	r3, #14061	; 0x36ed
   1ab54:	mov	r2, #235	; 0xeb
   1ab58:	movt	r0, #2
   1ab5c:	movt	r1, #2
   1ab60:	movt	r3, #2
   1ab64:	bl	12f88 <__assert_fail@plt>

0001ab68 <test_nested_buffer@@Base>:
   1ab68:	push	{r4, r5, r6, r7, fp, lr}
   1ab6c:	add	fp, sp, #16
   1ab70:	sub	sp, sp, #8
   1ab74:	mov	r4, r0
   1ab78:	bl	1d2e4 <flatcc_builder_reset@@Base>
   1ab7c:	movw	r1, #9828	; 0x2664
   1ab80:	mov	r0, r4
   1ab84:	mov	r2, #0
   1ab88:	mov	r3, #0
   1ab8c:	movt	r1, #2
   1ab90:	bl	1db50 <flatcc_builder_start_buffer@@Base>
   1ab94:	cmp	r0, #0
   1ab98:	bne	1aba8 <test_nested_buffer@@Base+0x40>
   1ab9c:	mov	r0, r4
   1aba0:	mov	r1, #36	; 0x24
   1aba4:	bl	1ebcc <flatcc_builder_start_table@@Base>
   1aba8:	movw	r1, #9896	; 0x26a8
   1abac:	mov	r0, r4
   1abb0:	movt	r1, #2
   1abb4:	bl	20844 <flatcc_builder_create_string_str@@Base>
   1abb8:	cmp	r0, #0
   1abbc:	beq	1abd8 <test_nested_buffer@@Base+0x70>
   1abc0:	mov	r5, r0
   1abc4:	mov	r0, r4
   1abc8:	mov	r1, #3
   1abcc:	bl	1fd60 <flatcc_builder_table_add_offset@@Base>
   1abd0:	cmp	r0, #0
   1abd4:	strne	r5, [r0]
   1abd8:	movw	r1, #9828	; 0x2664
   1abdc:	mov	r0, r4
   1abe0:	mov	r2, #0
   1abe4:	mov	r3, #0
   1abe8:	movt	r1, #2
   1abec:	bl	1db50 <flatcc_builder_start_buffer@@Base>
   1abf0:	cmp	r0, #0
   1abf4:	bne	1ac04 <test_nested_buffer@@Base+0x9c>
   1abf8:	mov	r0, r4
   1abfc:	mov	r1, #36	; 0x24
   1ac00:	bl	1ebcc <flatcc_builder_start_table@@Base>
   1ac04:	movw	r1, #12780	; 0x31ec
   1ac08:	mov	r0, r4
   1ac0c:	movt	r1, #2
   1ac10:	bl	20844 <flatcc_builder_create_string_str@@Base>
   1ac14:	cmp	r0, #0
   1ac18:	beq	1ac34 <test_nested_buffer@@Base+0xcc>
   1ac1c:	mov	r5, r0
   1ac20:	mov	r0, r4
   1ac24:	mov	r1, #3
   1ac28:	bl	1fd60 <flatcc_builder_table_add_offset@@Base>
   1ac2c:	cmp	r0, #0
   1ac30:	strne	r5, [r0]
   1ac34:	movw	r1, #17860	; 0x45c4
   1ac38:	mov	r0, r4
   1ac3c:	mov	r2, #1
   1ac40:	movt	r1, #2
   1ac44:	bl	1f4cc <flatcc_builder_check_required@@Base>
   1ac48:	cmp	r0, #0
   1ac4c:	beq	1ae68 <test_nested_buffer@@Base+0x300>
   1ac50:	mov	r0, r4
   1ac54:	bl	1f55c <flatcc_builder_end_table@@Base>
   1ac58:	mov	r1, r0
   1ac5c:	mov	r0, r4
   1ac60:	bl	1dd40 <flatcc_builder_end_buffer@@Base>
   1ac64:	cmp	r0, #0
   1ac68:	beq	1ac84 <test_nested_buffer@@Base+0x11c>
   1ac6c:	mov	r5, r0
   1ac70:	mov	r0, r4
   1ac74:	mov	r1, #13
   1ac78:	bl	1fd60 <flatcc_builder_table_add_offset@@Base>
   1ac7c:	cmp	r0, #0
   1ac80:	strne	r5, [r0]
   1ac84:	mov	r0, r4
   1ac88:	mov	r1, #2
   1ac8c:	mov	r2, #2
   1ac90:	mov	r3, #2
   1ac94:	bl	1fe9c <flatcc_builder_table_add@@Base>
   1ac98:	cmp	r0, #0
   1ac9c:	mov	r2, #1
   1aca0:	movne	r1, #10
   1aca4:	strhne	r1, [r0]
   1aca8:	movw	r1, #17860	; 0x45c4
   1acac:	mov	r0, r4
   1acb0:	movt	r1, #2
   1acb4:	bl	1f4cc <flatcc_builder_check_required@@Base>
   1acb8:	cmp	r0, #0
   1acbc:	beq	1ae68 <test_nested_buffer@@Base+0x300>
   1acc0:	mov	r0, r4
   1acc4:	bl	1f55c <flatcc_builder_end_table@@Base>
   1acc8:	mov	r1, r0
   1accc:	mov	r0, r4
   1acd0:	bl	1dd40 <flatcc_builder_end_buffer@@Base>
   1acd4:	add	r1, sp, #4
   1acd8:	mov	r0, r4
   1acdc:	bl	20b34 <flatcc_builder_get_direct_buffer@@Base>
   1ace0:	mov	r4, r0
   1ace4:	movw	r0, #32880	; 0x8070
   1ace8:	ldr	r2, [sp, #4]
   1acec:	movt	r0, #3
   1acf0:	mov	r1, r4
   1acf4:	ldr	r3, [r0]
   1acf8:	movw	r0, #12796	; 0x31fc
   1acfc:	movt	r0, #2
   1ad00:	bl	1365c <test_type_aliases@@Base+0x51c>
   1ad04:	cmp	r4, #0
   1ad08:	beq	1ae3c <test_nested_buffer@@Base+0x2d4>
   1ad0c:	ldr	r0, [r4, #4]
   1ad10:	movw	r6, #20301	; 0x4f4d
   1ad14:	movt	r6, #21326	; 0x534e
   1ad18:	cmp	r0, r6
   1ad1c:	bne	1ae3c <test_nested_buffer@@Base+0x2d4>
   1ad20:	ldr	r0, [r4]
   1ad24:	ldr	r0, [r4, r0]!
   1ad28:	mov	r5, r4
   1ad2c:	ldrh	r7, [r5, -r0]!
   1ad30:	cmp	r7, #11
   1ad34:	bls	1ae48 <test_nested_buffer@@Base+0x2e0>
   1ad38:	ldrh	r0, [r5, #10]
   1ad3c:	cmp	r0, #0
   1ad40:	beq	1ae48 <test_nested_buffer@@Base+0x2e0>
   1ad44:	mov	r1, r4
   1ad48:	ldr	r0, [r1, r0]!
   1ad4c:	add	r0, r1, r0
   1ad50:	movw	r1, #9896	; 0x26a8
   1ad54:	add	r0, r0, #4
   1ad58:	movt	r1, #2
   1ad5c:	bl	12e8c <strcmp@plt>
   1ad60:	cmp	r0, #0
   1ad64:	beq	1ad74 <test_nested_buffer@@Base+0x20c>
   1ad68:	movw	r0, #24112	; 0x5e30
   1ad6c:	movt	r0, #2
   1ad70:	b	1ae24 <test_nested_buffer@@Base+0x2bc>
   1ad74:	mov	r0, #0
   1ad78:	cmp	r7, #32
   1ad7c:	bcc	1adac <test_nested_buffer@@Base+0x244>
   1ad80:	ldrh	r1, [r5, #30]
   1ad84:	cmp	r1, #0
   1ad88:	beq	1adac <test_nested_buffer@@Base+0x244>
   1ad8c:	mov	r2, r4
   1ad90:	ldr	r1, [r2, r1]!
   1ad94:	add	r1, r2, r1
   1ad98:	ldr	r2, [r1, #8]
   1ad9c:	cmp	r2, r6
   1ada0:	addeq	r0, r1, #4
   1ada4:	ldreq	r1, [r0]
   1ada8:	addeq	r0, r0, r1
   1adac:	ldrh	r1, [r5, #8]
   1adb0:	cmp	r1, #0
   1adb4:	beq	1ae1c <test_nested_buffer@@Base+0x2b4>
   1adb8:	add	r1, r4, r1
   1adbc:	ldrh	r1, [r1]
   1adc0:	cmp	r1, #10
   1adc4:	bne	1ae1c <test_nested_buffer@@Base+0x2b4>
   1adc8:	cmp	r0, #0
   1adcc:	beq	1ae3c <test_nested_buffer@@Base+0x2d4>
   1add0:	ldr	r2, [r0]
   1add4:	mov	r1, r0
   1add8:	ldrh	r2, [r1, -r2]!	; <UNPREDICTABLE>
   1addc:	cmp	r2, #12
   1ade0:	bcc	1ae48 <test_nested_buffer@@Base+0x2e0>
   1ade4:	ldrh	r1, [r1, #10]
   1ade8:	cmp	r1, #0
   1adec:	beq	1ae48 <test_nested_buffer@@Base+0x2e0>
   1adf0:	ldr	r1, [r0, r1]!
   1adf4:	add	r0, r0, r1
   1adf8:	movw	r1, #12780	; 0x31ec
   1adfc:	add	r0, r0, #4
   1ae00:	movt	r1, #2
   1ae04:	bl	12e8c <strcmp@plt>
   1ae08:	cmp	r0, #0
   1ae0c:	beq	1ae34 <test_nested_buffer@@Base+0x2cc>
   1ae10:	movw	r0, #24032	; 0x5de0
   1ae14:	movt	r0, #2
   1ae18:	b	1ae24 <test_nested_buffer@@Base+0x2bc>
   1ae1c:	movw	r0, #24064	; 0x5e00
   1ae20:	movt	r0, #2
   1ae24:	bl	12eec <puts@plt>
   1ae28:	mvn	r0, #0
   1ae2c:	sub	sp, fp, #16
   1ae30:	pop	{r4, r5, r6, r7, fp, pc}
   1ae34:	mov	r0, #0
   1ae38:	b	1ae2c <test_nested_buffer@@Base+0x2c4>
   1ae3c:	movw	r0, #13160	; 0x3368
   1ae40:	movt	r0, #2
   1ae44:	b	1ae50 <test_nested_buffer@@Base+0x2e8>
   1ae48:	movw	r0, #14511	; 0x38af
   1ae4c:	movt	r0, #2
   1ae50:	movw	r1, #13198	; 0x338e
   1ae54:	movw	r3, #14430	; 0x385e
   1ae58:	movw	r2, #699	; 0x2bb
   1ae5c:	movt	r1, #2
   1ae60:	movt	r3, #2
   1ae64:	bl	12f88 <__assert_fail@plt>
   1ae68:	movw	r0, #13899	; 0x364b
   1ae6c:	movw	r1, #13609	; 0x3529
   1ae70:	movw	r3, #14061	; 0x36ed
   1ae74:	mov	r2, #235	; 0xeb
   1ae78:	movt	r0, #2
   1ae7c:	movt	r1, #2
   1ae80:	movt	r3, #2
   1ae84:	bl	12f88 <__assert_fail@plt>

0001ae88 <test_nested_buffer_first@@Base>:
   1ae88:	push	{r4, r5, r6, r7, fp, lr}
   1ae8c:	add	fp, sp, #16
   1ae90:	sub	sp, sp, #8
   1ae94:	mov	r4, r0
   1ae98:	bl	1d2e4 <flatcc_builder_reset@@Base>
   1ae9c:	movw	r1, #9828	; 0x2664
   1aea0:	mov	r0, r4
   1aea4:	mov	r2, #0
   1aea8:	mov	r3, #0
   1aeac:	movt	r1, #2
   1aeb0:	bl	1db50 <flatcc_builder_start_buffer@@Base>
   1aeb4:	cmp	r0, #0
   1aeb8:	bne	1aec8 <test_nested_buffer_first@@Base+0x40>
   1aebc:	mov	r0, r4
   1aec0:	mov	r1, #36	; 0x24
   1aec4:	bl	1ebcc <flatcc_builder_start_table@@Base>
   1aec8:	movw	r1, #9828	; 0x2664
   1aecc:	mov	r0, r4
   1aed0:	mov	r2, #0
   1aed4:	mov	r3, #0
   1aed8:	movt	r1, #2
   1aedc:	bl	1db50 <flatcc_builder_start_buffer@@Base>
   1aee0:	cmp	r0, #0
   1aee4:	bne	1aef4 <test_nested_buffer_first@@Base+0x6c>
   1aee8:	mov	r0, r4
   1aeec:	mov	r1, #36	; 0x24
   1aef0:	bl	1ebcc <flatcc_builder_start_table@@Base>
   1aef4:	movw	r1, #12780	; 0x31ec
   1aef8:	mov	r0, r4
   1aefc:	movt	r1, #2
   1af00:	bl	20844 <flatcc_builder_create_string_str@@Base>
   1af04:	cmp	r0, #0
   1af08:	beq	1af24 <test_nested_buffer_first@@Base+0x9c>
   1af0c:	mov	r5, r0
   1af10:	mov	r0, r4
   1af14:	mov	r1, #3
   1af18:	bl	1fd60 <flatcc_builder_table_add_offset@@Base>
   1af1c:	cmp	r0, #0
   1af20:	strne	r5, [r0]
   1af24:	movw	r1, #17860	; 0x45c4
   1af28:	mov	r0, r4
   1af2c:	mov	r2, #1
   1af30:	movt	r1, #2
   1af34:	bl	1f4cc <flatcc_builder_check_required@@Base>
   1af38:	cmp	r0, #0
   1af3c:	beq	1b188 <test_nested_buffer_first@@Base+0x300>
   1af40:	mov	r0, r4
   1af44:	bl	1f55c <flatcc_builder_end_table@@Base>
   1af48:	mov	r1, r0
   1af4c:	mov	r0, r4
   1af50:	bl	1dd40 <flatcc_builder_end_buffer@@Base>
   1af54:	cmp	r0, #0
   1af58:	beq	1af74 <test_nested_buffer_first@@Base+0xec>
   1af5c:	mov	r5, r0
   1af60:	mov	r0, r4
   1af64:	mov	r1, #13
   1af68:	bl	1fd60 <flatcc_builder_table_add_offset@@Base>
   1af6c:	cmp	r0, #0
   1af70:	strne	r5, [r0]
   1af74:	mov	r0, r4
   1af78:	mov	r1, #2
   1af7c:	mov	r2, #2
   1af80:	mov	r3, #2
   1af84:	bl	1fe9c <flatcc_builder_table_add@@Base>
   1af88:	cmp	r0, #0
   1af8c:	movne	r1, #10
   1af90:	strhne	r1, [r0]
   1af94:	movw	r1, #9896	; 0x26a8
   1af98:	mov	r0, r4
   1af9c:	movt	r1, #2
   1afa0:	bl	20844 <flatcc_builder_create_string_str@@Base>
   1afa4:	cmp	r0, #0
   1afa8:	beq	1afc4 <test_nested_buffer_first@@Base+0x13c>
   1afac:	mov	r5, r0
   1afb0:	mov	r0, r4
   1afb4:	mov	r1, #3
   1afb8:	bl	1fd60 <flatcc_builder_table_add_offset@@Base>
   1afbc:	cmp	r0, #0
   1afc0:	strne	r5, [r0]
   1afc4:	movw	r1, #17860	; 0x45c4
   1afc8:	mov	r0, r4
   1afcc:	mov	r2, #1
   1afd0:	movt	r1, #2
   1afd4:	bl	1f4cc <flatcc_builder_check_required@@Base>
   1afd8:	cmp	r0, #0
   1afdc:	beq	1b188 <test_nested_buffer_first@@Base+0x300>
   1afe0:	mov	r0, r4
   1afe4:	bl	1f55c <flatcc_builder_end_table@@Base>
   1afe8:	mov	r1, r0
   1afec:	mov	r0, r4
   1aff0:	bl	1dd40 <flatcc_builder_end_buffer@@Base>
   1aff4:	add	r1, sp, #4
   1aff8:	mov	r0, r4
   1affc:	bl	20b34 <flatcc_builder_get_direct_buffer@@Base>
   1b000:	mov	r4, r0
   1b004:	movw	r0, #32880	; 0x8070
   1b008:	ldr	r2, [sp, #4]
   1b00c:	movt	r0, #3
   1b010:	mov	r1, r4
   1b014:	ldr	r3, [r0]
   1b018:	movw	r0, #12796	; 0x31fc
   1b01c:	movt	r0, #2
   1b020:	bl	1365c <test_type_aliases@@Base+0x51c>
   1b024:	cmp	r4, #0
   1b028:	beq	1b15c <test_nested_buffer_first@@Base+0x2d4>
   1b02c:	ldr	r0, [r4, #4]
   1b030:	movw	r6, #20301	; 0x4f4d
   1b034:	movt	r6, #21326	; 0x534e
   1b038:	cmp	r0, r6
   1b03c:	bne	1b15c <test_nested_buffer_first@@Base+0x2d4>
   1b040:	ldr	r0, [r4]
   1b044:	ldr	r0, [r4, r0]!
   1b048:	mov	r5, r4
   1b04c:	ldrh	r7, [r5, -r0]!
   1b050:	cmp	r7, #11
   1b054:	bls	1b168 <test_nested_buffer_first@@Base+0x2e0>
   1b058:	ldrh	r0, [r5, #10]
   1b05c:	cmp	r0, #0
   1b060:	beq	1b168 <test_nested_buffer_first@@Base+0x2e0>
   1b064:	mov	r1, r4
   1b068:	ldr	r0, [r1, r0]!
   1b06c:	add	r0, r1, r0
   1b070:	movw	r1, #9896	; 0x26a8
   1b074:	add	r0, r0, #4
   1b078:	movt	r1, #2
   1b07c:	bl	12e8c <strcmp@plt>
   1b080:	cmp	r0, #0
   1b084:	beq	1b094 <test_nested_buffer_first@@Base+0x20c>
   1b088:	movw	r0, #24112	; 0x5e30
   1b08c:	movt	r0, #2
   1b090:	b	1b144 <test_nested_buffer_first@@Base+0x2bc>
   1b094:	mov	r0, #0
   1b098:	cmp	r7, #32
   1b09c:	bcc	1b0cc <test_nested_buffer_first@@Base+0x244>
   1b0a0:	ldrh	r1, [r5, #30]
   1b0a4:	cmp	r1, #0
   1b0a8:	beq	1b0cc <test_nested_buffer_first@@Base+0x244>
   1b0ac:	mov	r2, r4
   1b0b0:	ldr	r1, [r2, r1]!
   1b0b4:	add	r1, r2, r1
   1b0b8:	ldr	r2, [r1, #8]
   1b0bc:	cmp	r2, r6
   1b0c0:	addeq	r0, r1, #4
   1b0c4:	ldreq	r1, [r0]
   1b0c8:	addeq	r0, r0, r1
   1b0cc:	ldrh	r1, [r5, #8]
   1b0d0:	cmp	r1, #0
   1b0d4:	beq	1b13c <test_nested_buffer_first@@Base+0x2b4>
   1b0d8:	add	r1, r4, r1
   1b0dc:	ldrh	r1, [r1]
   1b0e0:	cmp	r1, #10
   1b0e4:	bne	1b13c <test_nested_buffer_first@@Base+0x2b4>
   1b0e8:	cmp	r0, #0
   1b0ec:	beq	1b15c <test_nested_buffer_first@@Base+0x2d4>
   1b0f0:	ldr	r2, [r0]
   1b0f4:	mov	r1, r0
   1b0f8:	ldrh	r2, [r1, -r2]!	; <UNPREDICTABLE>
   1b0fc:	cmp	r2, #12
   1b100:	bcc	1b168 <test_nested_buffer_first@@Base+0x2e0>
   1b104:	ldrh	r1, [r1, #10]
   1b108:	cmp	r1, #0
   1b10c:	beq	1b168 <test_nested_buffer_first@@Base+0x2e0>
   1b110:	ldr	r1, [r0, r1]!
   1b114:	add	r0, r0, r1
   1b118:	movw	r1, #12780	; 0x31ec
   1b11c:	add	r0, r0, #4
   1b120:	movt	r1, #2
   1b124:	bl	12e8c <strcmp@plt>
   1b128:	cmp	r0, #0
   1b12c:	beq	1b154 <test_nested_buffer_first@@Base+0x2cc>
   1b130:	movw	r0, #24032	; 0x5de0
   1b134:	movt	r0, #2
   1b138:	b	1b144 <test_nested_buffer_first@@Base+0x2bc>
   1b13c:	movw	r0, #24064	; 0x5e00
   1b140:	movt	r0, #2
   1b144:	bl	12eec <puts@plt>
   1b148:	mvn	r0, #0
   1b14c:	sub	sp, fp, #16
   1b150:	pop	{r4, r5, r6, r7, fp, pc}
   1b154:	mov	r0, #0
   1b158:	b	1b14c <test_nested_buffer_first@@Base+0x2c4>
   1b15c:	movw	r0, #13160	; 0x3368
   1b160:	movt	r0, #2
   1b164:	b	1b170 <test_nested_buffer_first@@Base+0x2e8>
   1b168:	movw	r0, #14511	; 0x38af
   1b16c:	movt	r0, #2
   1b170:	movw	r1, #13198	; 0x338e
   1b174:	movw	r3, #14430	; 0x385e
   1b178:	movw	r2, #699	; 0x2bb
   1b17c:	movt	r1, #2
   1b180:	movt	r3, #2
   1b184:	bl	12f88 <__assert_fail@plt>
   1b188:	movw	r0, #13899	; 0x364b
   1b18c:	movw	r1, #13609	; 0x3529
   1b190:	movw	r3, #14061	; 0x36ed
   1b194:	mov	r2, #235	; 0xeb
   1b198:	movt	r0, #2
   1b19c:	movt	r1, #2
   1b1a0:	movt	r3, #2
   1b1a4:	bl	12f88 <__assert_fail@plt>

0001b1a8 <test_nested_buffer_using_nest@@Base>:
   1b1a8:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1b1ac:	add	fp, sp, #24
   1b1b0:	sub	sp, sp, #1040	; 0x410
   1b1b4:	mov	r4, r0
   1b1b8:	bl	1d2e4 <flatcc_builder_reset@@Base>
   1b1bc:	movw	r1, #9828	; 0x2664
   1b1c0:	mov	r0, r4
   1b1c4:	mov	r2, #0
   1b1c8:	mov	r3, #0
   1b1cc:	movt	r1, #2
   1b1d0:	bl	1db50 <flatcc_builder_start_buffer@@Base>
   1b1d4:	cmp	r0, #0
   1b1d8:	bne	1b1e8 <test_nested_buffer_using_nest@@Base+0x40>
   1b1dc:	mov	r0, r4
   1b1e0:	mov	r1, #36	; 0x24
   1b1e4:	bl	1ebcc <flatcc_builder_start_table@@Base>
   1b1e8:	movw	r1, #12780	; 0x31ec
   1b1ec:	mov	r0, r4
   1b1f0:	movt	r1, #2
   1b1f4:	bl	20844 <flatcc_builder_create_string_str@@Base>
   1b1f8:	cmp	r0, #0
   1b1fc:	beq	1b218 <test_nested_buffer_using_nest@@Base+0x70>
   1b200:	mov	r5, r0
   1b204:	mov	r0, r4
   1b208:	mov	r1, #3
   1b20c:	bl	1fd60 <flatcc_builder_table_add_offset@@Base>
   1b210:	cmp	r0, #0
   1b214:	strne	r5, [r0]
   1b218:	mov	r0, r4
   1b21c:	mov	r1, #1
   1b220:	mov	r2, #2
   1b224:	mov	r3, #2
   1b228:	bl	1fe9c <flatcc_builder_table_add@@Base>
   1b22c:	cmp	r0, #0
   1b230:	mov	r2, #1
   1b234:	movne	r1, #42	; 0x2a
   1b238:	strhne	r1, [r0]
   1b23c:	movw	r1, #17860	; 0x45c4
   1b240:	mov	r0, r4
   1b244:	movt	r1, #2
   1b248:	bl	1f4cc <flatcc_builder_check_required@@Base>
   1b24c:	cmp	r0, #0
   1b250:	beq	1b51c <test_nested_buffer_using_nest@@Base+0x374>
   1b254:	mov	r0, r4
   1b258:	bl	1f55c <flatcc_builder_end_table@@Base>
   1b25c:	mov	r1, r0
   1b260:	mov	r0, r4
   1b264:	bl	1dd40 <flatcc_builder_end_buffer@@Base>
   1b268:	mov	r0, r4
   1b26c:	bl	20aa8 <flatcc_builder_get_buffer_size@@Base>
   1b270:	mov	r5, r0
   1b274:	add	r1, sp, #16
   1b278:	mov	r0, r4
   1b27c:	mov	r2, #1024	; 0x400
   1b280:	bl	20b74 <flatcc_builder_copy_buffer@@Base>
   1b284:	cmp	r0, #0
   1b288:	beq	1b424 <test_nested_buffer_using_nest@@Base+0x27c>
   1b28c:	mov	r0, r4
   1b290:	bl	1d2e4 <flatcc_builder_reset@@Base>
   1b294:	movw	r1, #9828	; 0x2664
   1b298:	mov	r0, r4
   1b29c:	mov	r2, #0
   1b2a0:	mov	r3, #0
   1b2a4:	movt	r1, #2
   1b2a8:	bl	1db50 <flatcc_builder_start_buffer@@Base>
   1b2ac:	cmp	r0, #0
   1b2b0:	bne	1b2c0 <test_nested_buffer_using_nest@@Base+0x118>
   1b2b4:	mov	r0, r4
   1b2b8:	mov	r1, #36	; 0x24
   1b2bc:	bl	1ebcc <flatcc_builder_start_table@@Base>
   1b2c0:	mvn	r0, #0
   1b2c4:	mov	r1, #8
   1b2c8:	mov	r2, r5
   1b2cc:	mov	r3, #1
   1b2d0:	str	r1, [sp]
   1b2d4:	str	r0, [sp, #4]
   1b2d8:	add	r1, sp, #16
   1b2dc:	mov	r0, r4
   1b2e0:	bl	1f714 <flatcc_builder_create_vector@@Base>
   1b2e4:	cmp	r0, #0
   1b2e8:	beq	1b304 <test_nested_buffer_using_nest@@Base+0x15c>
   1b2ec:	mov	r5, r0
   1b2f0:	mov	r0, r4
   1b2f4:	mov	r1, #13
   1b2f8:	bl	1fd60 <flatcc_builder_table_add_offset@@Base>
   1b2fc:	cmp	r0, #0
   1b300:	strne	r5, [r0]
   1b304:	mov	r0, r4
   1b308:	mov	r1, #2
   1b30c:	mov	r2, #2
   1b310:	mov	r3, #2
   1b314:	bl	1fe9c <flatcc_builder_table_add@@Base>
   1b318:	cmp	r0, #0
   1b31c:	movne	r1, #10
   1b320:	strhne	r1, [r0]
   1b324:	movw	r1, #9896	; 0x26a8
   1b328:	mov	r0, r4
   1b32c:	movt	r1, #2
   1b330:	bl	20844 <flatcc_builder_create_string_str@@Base>
   1b334:	cmp	r0, #0
   1b338:	beq	1b354 <test_nested_buffer_using_nest@@Base+0x1ac>
   1b33c:	mov	r5, r0
   1b340:	mov	r0, r4
   1b344:	mov	r1, #3
   1b348:	bl	1fd60 <flatcc_builder_table_add_offset@@Base>
   1b34c:	cmp	r0, #0
   1b350:	strne	r5, [r0]
   1b354:	movw	r1, #17860	; 0x45c4
   1b358:	mov	r0, r4
   1b35c:	mov	r2, #1
   1b360:	movt	r1, #2
   1b364:	bl	1f4cc <flatcc_builder_check_required@@Base>
   1b368:	cmp	r0, #0
   1b36c:	beq	1b51c <test_nested_buffer_using_nest@@Base+0x374>
   1b370:	mov	r0, r4
   1b374:	bl	1f55c <flatcc_builder_end_table@@Base>
   1b378:	mov	r1, r0
   1b37c:	mov	r0, r4
   1b380:	bl	1dd40 <flatcc_builder_end_buffer@@Base>
   1b384:	add	r1, sp, #12
   1b388:	mov	r0, r4
   1b38c:	bl	20b34 <flatcc_builder_get_direct_buffer@@Base>
   1b390:	mov	r4, r0
   1b394:	movw	r0, #32880	; 0x8070
   1b398:	ldr	r2, [sp, #12]
   1b39c:	movt	r0, #3
   1b3a0:	mov	r1, r4
   1b3a4:	ldr	r3, [r0]
   1b3a8:	movw	r0, #12814	; 0x320e
   1b3ac:	movt	r0, #2
   1b3b0:	bl	1365c <test_type_aliases@@Base+0x51c>
   1b3b4:	cmp	r4, #0
   1b3b8:	beq	1b53c <test_nested_buffer_using_nest@@Base+0x394>
   1b3bc:	ldr	r0, [r4, #4]
   1b3c0:	movw	r7, #20301	; 0x4f4d
   1b3c4:	movt	r7, #21326	; 0x534e
   1b3c8:	cmp	r0, r7
   1b3cc:	bne	1b53c <test_nested_buffer_using_nest@@Base+0x394>
   1b3d0:	ldr	r0, [r4]
   1b3d4:	ldr	r0, [r4, r0]!
   1b3d8:	mov	r6, r4
   1b3dc:	ldrh	r5, [r6, -r0]!
   1b3e0:	cmp	r5, #11
   1b3e4:	bls	1b548 <test_nested_buffer_using_nest@@Base+0x3a0>
   1b3e8:	ldrh	r0, [r6, #10]
   1b3ec:	cmp	r0, #0
   1b3f0:	beq	1b548 <test_nested_buffer_using_nest@@Base+0x3a0>
   1b3f4:	mov	r1, r4
   1b3f8:	ldr	r0, [r1, r0]!
   1b3fc:	add	r0, r1, r0
   1b400:	movw	r1, #9896	; 0x26a8
   1b404:	add	r0, r0, #4
   1b408:	movt	r1, #2
   1b40c:	bl	12e8c <strcmp@plt>
   1b410:	cmp	r0, #0
   1b414:	beq	1b430 <test_nested_buffer_using_nest@@Base+0x288>
   1b418:	movw	r0, #24112	; 0x5e30
   1b41c:	movt	r0, #2
   1b420:	b	1b4e0 <test_nested_buffer_using_nest@@Base+0x338>
   1b424:	movw	r0, #23952	; 0x5d90
   1b428:	movt	r0, #2
   1b42c:	b	1b4e0 <test_nested_buffer_using_nest@@Base+0x338>
   1b430:	mov	r8, #0
   1b434:	cmp	r5, #32
   1b438:	bcc	1b464 <test_nested_buffer_using_nest@@Base+0x2bc>
   1b43c:	ldrh	r0, [r6, #30]
   1b440:	cmp	r0, #0
   1b444:	beq	1b464 <test_nested_buffer_using_nest@@Base+0x2bc>
   1b448:	mov	r1, r4
   1b44c:	ldr	r0, [r1, r0]!
   1b450:	add	r0, r1, r0
   1b454:	ldr	r1, [r0, #8]
   1b458:	cmp	r1, r7
   1b45c:	ldreq	r1, [r0, #4]!
   1b460:	addeq	r8, r0, r1
   1b464:	ldrh	r0, [r6, #8]
   1b468:	cmp	r0, #0
   1b46c:	beq	1b4d8 <test_nested_buffer_using_nest@@Base+0x330>
   1b470:	add	r0, r4, r0
   1b474:	ldrh	r0, [r0]
   1b478:	cmp	r0, #10
   1b47c:	bne	1b4d8 <test_nested_buffer_using_nest@@Base+0x330>
   1b480:	cmp	r8, #0
   1b484:	beq	1b53c <test_nested_buffer_using_nest@@Base+0x394>
   1b488:	ldr	r0, [r8]
   1b48c:	mov	r4, r8
   1b490:	ldrh	r0, [r4, -r0]!	; <UNPREDICTABLE>
   1b494:	cmp	r0, #12
   1b498:	bcc	1b548 <test_nested_buffer_using_nest@@Base+0x3a0>
   1b49c:	ldrh	r0, [r4, #10]
   1b4a0:	cmp	r0, #0
   1b4a4:	beq	1b548 <test_nested_buffer_using_nest@@Base+0x3a0>
   1b4a8:	mov	r1, r8
   1b4ac:	ldr	r0, [r1, r0]!
   1b4b0:	add	r0, r1, r0
   1b4b4:	movw	r1, #12780	; 0x31ec
   1b4b8:	add	r0, r0, #4
   1b4bc:	movt	r1, #2
   1b4c0:	bl	12e8c <strcmp@plt>
   1b4c4:	cmp	r0, #0
   1b4c8:	beq	1b4f0 <test_nested_buffer_using_nest@@Base+0x348>
   1b4cc:	movw	r0, #24032	; 0x5de0
   1b4d0:	movt	r0, #2
   1b4d4:	b	1b4e0 <test_nested_buffer_using_nest@@Base+0x338>
   1b4d8:	movw	r0, #24064	; 0x5e00
   1b4dc:	movt	r0, #2
   1b4e0:	bl	12eec <puts@plt>
   1b4e4:	mvn	r0, #0
   1b4e8:	sub	sp, fp, #24
   1b4ec:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1b4f0:	ldrh	r0, [r4, #6]
   1b4f4:	cmp	r0, #0
   1b4f8:	beq	1b510 <test_nested_buffer_using_nest@@Base+0x368>
   1b4fc:	add	r0, r8, r0
   1b500:	ldrh	r1, [r0]
   1b504:	mov	r0, #0
   1b508:	cmp	r1, #42	; 0x2a
   1b50c:	beq	1b4e8 <test_nested_buffer_using_nest@@Base+0x340>
   1b510:	movw	r0, #23984	; 0x5db0
   1b514:	movt	r0, #2
   1b518:	b	1b4e0 <test_nested_buffer_using_nest@@Base+0x338>
   1b51c:	movw	r0, #13899	; 0x364b
   1b520:	movw	r1, #13609	; 0x3529
   1b524:	movw	r3, #14061	; 0x36ed
   1b528:	mov	r2, #235	; 0xeb
   1b52c:	movt	r0, #2
   1b530:	movt	r1, #2
   1b534:	movt	r3, #2
   1b538:	bl	12f88 <__assert_fail@plt>
   1b53c:	movw	r0, #13160	; 0x3368
   1b540:	movt	r0, #2
   1b544:	b	1b550 <test_nested_buffer_using_nest@@Base+0x3a8>
   1b548:	movw	r0, #14511	; 0x38af
   1b54c:	movt	r0, #2
   1b550:	movw	r1, #13198	; 0x338e
   1b554:	movw	r3, #14430	; 0x385e
   1b558:	movw	r2, #699	; 0x2bb
   1b55c:	movt	r1, #2
   1b560:	movt	r3, #2
   1b564:	bl	12f88 <__assert_fail@plt>

0001b568 <verify_include@@Base>:
   1b568:	mov	r0, #0
   1b56c:	bx	lr

0001b570 <test_struct_buffer@@Base>:
   1b570:	push	{r4, r5, r6, sl, fp, lr}
   1b574:	add	fp, sp, #16
   1b578:	sub	sp, sp, #112	; 0x70
   1b57c:	mov	r4, r0
   1b580:	bl	1d2e4 <flatcc_builder_reset@@Base>
   1b584:	mov	r0, r4
   1b588:	mov	r1, #32
   1b58c:	mov	r2, #16
   1b590:	mov	r5, #16
   1b594:	bl	1de70 <flatcc_builder_start_struct@@Base>
   1b598:	mov	r6, #0
   1b59c:	cmp	r0, #0
   1b5a0:	mov	r3, #0
   1b5a4:	beq	1b5fc <test_struct_buffer@@Base+0x8c>
   1b5a8:	movw	r1, #52428	; 0xcccc
   1b5ac:	movw	r2, #52429	; 0xcccd
   1b5b0:	movw	r3, #0
   1b5b4:	movt	r2, #52428	; 0xcccc
   1b5b8:	movt	r1, #16400	; 0x4010
   1b5bc:	movt	r3, #16448	; 0x4040
   1b5c0:	str	r2, [r0, #16]
   1b5c4:	str	r1, [r0, #20]
   1b5c8:	mov	r2, #1065353216	; 0x3f800000
   1b5cc:	mov	r1, #1073741824	; 0x40000000
   1b5d0:	str	r2, [r0]
   1b5d4:	stmib	r0, {r1, r3}
   1b5d8:	mov	r1, #8
   1b5dc:	strb	r1, [r0, #24]
   1b5e0:	movw	r1, #2730	; 0xaaa
   1b5e4:	strh	r1, [r0, #26]
   1b5e8:	mov	r1, #239	; 0xef
   1b5ec:	strb	r1, [r0, #28]
   1b5f0:	mov	r0, r4
   1b5f4:	bl	1df10 <flatcc_builder_end_struct@@Base>
   1b5f8:	mov	r3, r0
   1b5fc:	movw	r1, #9828	; 0x2664
   1b600:	mov	r0, r4
   1b604:	mov	r2, #0
   1b608:	stm	sp, {r5, r6}
   1b60c:	movt	r1, #2
   1b610:	bl	1d80c <flatcc_builder_create_buffer@@Base>
   1b614:	mov	r0, r4
   1b618:	bl	20aa8 <flatcc_builder_get_buffer_size@@Base>
   1b61c:	cmp	r0, #48	; 0x30
   1b620:	bne	1b74c <test_struct_buffer@@Base+0x1dc>
   1b624:	movw	r0, #12902	; 0x3266
   1b628:	mov	r1, #48	; 0x30
   1b62c:	movt	r0, #2
   1b630:	bl	12e98 <printf@plt>
   1b634:	mov	r0, r4
   1b638:	bl	20d54 <flatcc_builder_get_emit_context@@Base>
   1b63c:	ldr	r0, [r0, #24]
   1b640:	cmp	r0, #48	; 0x30
   1b644:	bne	1b76c <test_struct_buffer@@Base+0x1fc>
   1b648:	add	r1, sp, #12
   1b64c:	mov	r0, r4
   1b650:	mov	r2, #100	; 0x64
   1b654:	bl	20b74 <flatcc_builder_copy_buffer@@Base>
   1b658:	cmp	r0, #0
   1b65c:	beq	1b728 <test_struct_buffer@@Base+0x1b8>
   1b660:	movw	r0, #32880	; 0x8070
   1b664:	add	r4, sp, #12
   1b668:	mov	r2, #48	; 0x30
   1b66c:	movt	r0, #3
   1b670:	mov	r1, r4
   1b674:	ldr	r3, [r0]
   1b678:	movw	r0, #13061	; 0x3305
   1b67c:	movt	r0, #2
   1b680:	bl	1365c <test_type_aliases@@Base+0x51c>
   1b684:	ldr	r0, [sp, #16]
   1b688:	movw	r1, #20301	; 0x4f4d
   1b68c:	movt	r1, #21326	; 0x534e
   1b690:	cmp	r0, r1
   1b694:	bne	1b734 <test_struct_buffer@@Base+0x1c4>
   1b698:	ldr	r0, [sp, #12]
   1b69c:	vmov.f32	s2, #112	; 0x3f800000  1.0
   1b6a0:	add	r0, r4, r0
   1b6a4:	vldr	s0, [r0]
   1b6a8:	vcmp.f32	s0, s2
   1b6ac:	vmrs	APSR_nzcv, fpscr
   1b6b0:	bne	1b71c <test_struct_buffer@@Base+0x1ac>
   1b6b4:	vldr	s0, [r0, #4]
   1b6b8:	vmov.f32	s2, #0	; 0x40000000  2.0
   1b6bc:	vcmp.f32	s0, s2
   1b6c0:	vmrs	APSR_nzcv, fpscr
   1b6c4:	bne	1b71c <test_struct_buffer@@Base+0x1ac>
   1b6c8:	vldr	s0, [r0, #8]
   1b6cc:	vmov.f32	s2, #8	; 0x40400000  3.0
   1b6d0:	vcmp.f32	s0, s2
   1b6d4:	vmrs	APSR_nzcv, fpscr
   1b6d8:	bne	1b71c <test_struct_buffer@@Base+0x1ac>
   1b6dc:	vldr	d16, [pc, #172]	; 1b790 <test_struct_buffer@@Base+0x220>
   1b6e0:	vldr	d17, [r0, #16]
   1b6e4:	vcmp.f64	d17, d16
   1b6e8:	vmrs	APSR_nzcv, fpscr
   1b6ec:	bne	1b71c <test_struct_buffer@@Base+0x1ac>
   1b6f0:	ldrb	r1, [r0, #24]
   1b6f4:	cmp	r1, #8
   1b6f8:	bne	1b71c <test_struct_buffer@@Base+0x1ac>
   1b6fc:	ldrh	r1, [r0, #26]
   1b700:	movw	r2, #2730	; 0xaaa
   1b704:	cmp	r1, r2
   1b708:	bne	1b71c <test_struct_buffer@@Base+0x1ac>
   1b70c:	ldrb	r1, [r0, #28]
   1b710:	mov	r0, #0
   1b714:	cmp	r1, #239	; 0xef
   1b718:	beq	1b744 <test_struct_buffer@@Base+0x1d4>
   1b71c:	movw	r0, #24224	; 0x5ea0
   1b720:	movt	r0, #2
   1b724:	b	1b73c <test_struct_buffer@@Base+0x1cc>
   1b728:	movw	r0, #17679	; 0x450f
   1b72c:	movt	r0, #2
   1b730:	b	1b73c <test_struct_buffer@@Base+0x1cc>
   1b734:	movw	r0, #24144	; 0x5e50
   1b738:	movt	r0, #2
   1b73c:	bl	12eec <puts@plt>
   1b740:	mvn	r0, #0
   1b744:	sub	sp, fp, #16
   1b748:	pop	{r4, r5, r6, sl, fp, pc}
   1b74c:	movw	r0, #12848	; 0x3230
   1b750:	movw	r1, #10320	; 0x2850
   1b754:	movw	r3, #12859	; 0x323b
   1b758:	movw	r2, #2339	; 0x923
   1b75c:	movt	r0, #2
   1b760:	movt	r1, #2
   1b764:	movt	r3, #2
   1b768:	bl	12f88 <__assert_fail@plt>
   1b76c:	movw	r0, #12931	; 0x3283
   1b770:	movw	r1, #10320	; 0x2850
   1b774:	movw	r3, #12859	; 0x323b
   1b778:	movw	r2, #2341	; 0x925
   1b77c:	movt	r0, #2
   1b780:	movt	r1, #2
   1b784:	movt	r3, #2
   1b788:	bl	12f88 <__assert_fail@plt>
   1b78c:	nop	{0}
   1b790:	stclgt	12, cr12, [ip], {205}	; 0xcd
   1b794:	andsmi	ip, r0, ip, asr #25

0001b798 <test_typed_struct_buffer@@Base>:
   1b798:	push	{r4, r5, r6, sl, fp, lr}
   1b79c:	add	fp, sp, #16
   1b7a0:	sub	sp, sp, #112	; 0x70
   1b7a4:	mov	r4, r0
   1b7a8:	bl	1d2e4 <flatcc_builder_reset@@Base>
   1b7ac:	mov	r0, r4
   1b7b0:	mov	r1, #32
   1b7b4:	mov	r2, #16
   1b7b8:	mov	r5, #16
   1b7bc:	bl	1de70 <flatcc_builder_start_struct@@Base>
   1b7c0:	mov	r6, #0
   1b7c4:	cmp	r0, #0
   1b7c8:	mov	r3, #0
   1b7cc:	beq	1b824 <test_typed_struct_buffer@@Base+0x8c>
   1b7d0:	movw	r1, #52428	; 0xcccc
   1b7d4:	movw	r2, #52429	; 0xcccd
   1b7d8:	movw	r3, #0
   1b7dc:	movt	r2, #52428	; 0xcccc
   1b7e0:	movt	r1, #16400	; 0x4010
   1b7e4:	movt	r3, #16448	; 0x4040
   1b7e8:	str	r2, [r0, #16]
   1b7ec:	str	r1, [r0, #20]
   1b7f0:	mov	r2, #1065353216	; 0x3f800000
   1b7f4:	mov	r1, #1073741824	; 0x40000000
   1b7f8:	str	r2, [r0]
   1b7fc:	stmib	r0, {r1, r3}
   1b800:	mov	r1, #8
   1b804:	strb	r1, [r0, #24]
   1b808:	movw	r1, #2730	; 0xaaa
   1b80c:	strh	r1, [r0, #26]
   1b810:	mov	r1, #239	; 0xef
   1b814:	strb	r1, [r0, #28]
   1b818:	mov	r0, r4
   1b81c:	bl	1df10 <flatcc_builder_end_struct@@Base>
   1b820:	mov	r3, r0
   1b824:	movw	r1, #13080	; 0x3318
   1b828:	mov	r0, r4
   1b82c:	mov	r2, #0
   1b830:	stm	sp, {r5, r6}
   1b834:	movt	r1, #2
   1b838:	bl	1d80c <flatcc_builder_create_buffer@@Base>
   1b83c:	mov	r0, r4
   1b840:	bl	20aa8 <flatcc_builder_get_buffer_size@@Base>
   1b844:	cmp	r0, #48	; 0x30
   1b848:	bne	1b9ec <test_typed_struct_buffer@@Base+0x254>
   1b84c:	movw	r0, #12902	; 0x3266
   1b850:	mov	r1, #48	; 0x30
   1b854:	movt	r0, #2
   1b858:	bl	12e98 <printf@plt>
   1b85c:	mov	r0, r4
   1b860:	bl	20d54 <flatcc_builder_get_emit_context@@Base>
   1b864:	ldr	r0, [r0, #24]
   1b868:	cmp	r0, #48	; 0x30
   1b86c:	bne	1ba0c <test_typed_struct_buffer@@Base+0x274>
   1b870:	add	r1, sp, #12
   1b874:	mov	r0, r4
   1b878:	mov	r2, #100	; 0x64
   1b87c:	bl	20b74 <flatcc_builder_copy_buffer@@Base>
   1b880:	cmp	r0, #0
   1b884:	beq	1b8f0 <test_typed_struct_buffer@@Base+0x158>
   1b888:	movw	r0, #32880	; 0x8070
   1b88c:	add	r1, sp, #12
   1b890:	mov	r2, #48	; 0x30
   1b894:	movt	r0, #3
   1b898:	ldr	r3, [r0]
   1b89c:	movw	r0, #13055	; 0x32ff
   1b8a0:	movt	r0, #2
   1b8a4:	bl	1365c <test_type_aliases@@Base+0x51c>
   1b8a8:	ldr	r0, [sp, #16]
   1b8ac:	movw	r4, #16082	; 0x3ed2
   1b8b0:	movt	r4, #43253	; 0xa8f5
   1b8b4:	cmp	r0, r4
   1b8b8:	bne	1b8fc <test_typed_struct_buffer@@Base+0x164>
   1b8bc:	mov	r0, #16
   1b8c0:	add	r5, sp, #12
   1b8c4:	mov	r1, #48	; 0x30
   1b8c8:	mov	r2, r4
   1b8cc:	mov	r3, #32
   1b8d0:	str	r0, [sp]
   1b8d4:	mov	r0, r5
   1b8d8:	bl	21d58 <flatcc_verify_struct_as_typed_root@@Base>
   1b8dc:	cmp	r0, #0
   1b8e0:	beq	1b914 <test_typed_struct_buffer@@Base+0x17c>
   1b8e4:	movw	r0, #24304	; 0x5ef0
   1b8e8:	movt	r0, #2
   1b8ec:	b	1b904 <test_typed_struct_buffer@@Base+0x16c>
   1b8f0:	movw	r0, #17679	; 0x450f
   1b8f4:	movt	r0, #2
   1b8f8:	b	1b904 <test_typed_struct_buffer@@Base+0x16c>
   1b8fc:	movw	r0, #24144	; 0x5e50
   1b900:	movt	r0, #2
   1b904:	bl	12eec <puts@plt>
   1b908:	mvn	r0, #0
   1b90c:	sub	sp, fp, #16
   1b910:	pop	{r4, r5, r6, sl, fp, pc}
   1b914:	ldr	r0, [sp, #16]
   1b918:	cmp	r0, r4
   1b91c:	bne	1b954 <test_typed_struct_buffer@@Base+0x1bc>
   1b920:	ldr	r6, [sp, #12]
   1b924:	mov	r0, #16
   1b928:	mov	r1, #48	; 0x30
   1b92c:	mov	r2, r4
   1b930:	mov	r3, #32
   1b934:	str	r0, [sp]
   1b938:	mov	r0, r5
   1b93c:	bl	21d58 <flatcc_verify_struct_as_typed_root@@Base>
   1b940:	cmp	r0, #0
   1b944:	beq	1b960 <test_typed_struct_buffer@@Base+0x1c8>
   1b948:	movw	r0, #24256	; 0x5ec0
   1b94c:	movt	r0, #2
   1b950:	b	1b904 <test_typed_struct_buffer@@Base+0x16c>
   1b954:	movw	r0, #24192	; 0x5e80
   1b958:	movt	r0, #2
   1b95c:	b	1b904 <test_typed_struct_buffer@@Base+0x16c>
   1b960:	add	r0, r5, r6
   1b964:	vmov.f32	s2, #112	; 0x3f800000  1.0
   1b968:	vldr	s0, [r0]
   1b96c:	vcmp.f32	s0, s2
   1b970:	vmrs	APSR_nzcv, fpscr
   1b974:	bne	1b9e0 <test_typed_struct_buffer@@Base+0x248>
   1b978:	vldr	s0, [r0, #4]
   1b97c:	vmov.f32	s2, #0	; 0x40000000  2.0
   1b980:	vcmp.f32	s0, s2
   1b984:	vmrs	APSR_nzcv, fpscr
   1b988:	bne	1b9e0 <test_typed_struct_buffer@@Base+0x248>
   1b98c:	vldr	s0, [r0, #8]
   1b990:	vmov.f32	s2, #8	; 0x40400000  3.0
   1b994:	vcmp.f32	s0, s2
   1b998:	vmrs	APSR_nzcv, fpscr
   1b99c:	bne	1b9e0 <test_typed_struct_buffer@@Base+0x248>
   1b9a0:	vldr	d16, [pc, #136]	; 1ba30 <test_typed_struct_buffer@@Base+0x298>
   1b9a4:	vldr	d17, [r0, #16]
   1b9a8:	vcmp.f64	d17, d16
   1b9ac:	vmrs	APSR_nzcv, fpscr
   1b9b0:	bne	1b9e0 <test_typed_struct_buffer@@Base+0x248>
   1b9b4:	ldrb	r1, [r0, #24]
   1b9b8:	cmp	r1, #8
   1b9bc:	bne	1b9e0 <test_typed_struct_buffer@@Base+0x248>
   1b9c0:	ldrh	r1, [r0, #26]
   1b9c4:	movw	r2, #2730	; 0xaaa
   1b9c8:	cmp	r1, r2
   1b9cc:	bne	1b9e0 <test_typed_struct_buffer@@Base+0x248>
   1b9d0:	ldrb	r1, [r0, #28]
   1b9d4:	mov	r0, #0
   1b9d8:	cmp	r1, #239	; 0xef
   1b9dc:	beq	1b90c <test_typed_struct_buffer@@Base+0x174>
   1b9e0:	movw	r0, #24224	; 0x5ea0
   1b9e4:	movt	r0, #2
   1b9e8:	b	1b904 <test_typed_struct_buffer@@Base+0x16c>
   1b9ec:	movw	r0, #12848	; 0x3230
   1b9f0:	movw	r1, #10320	; 0x2850
   1b9f4:	movw	r3, #13006	; 0x32ce
   1b9f8:	movw	r2, #2388	; 0x954
   1b9fc:	movt	r0, #2
   1ba00:	movt	r1, #2
   1ba04:	movt	r3, #2
   1ba08:	bl	12f88 <__assert_fail@plt>
   1ba0c:	movw	r0, #12931	; 0x3283
   1ba10:	movw	r1, #10320	; 0x2850
   1ba14:	movw	r3, #13006	; 0x32ce
   1ba18:	movw	r2, #2390	; 0x956
   1ba1c:	movt	r0, #2
   1ba20:	movt	r1, #2
   1ba24:	movt	r3, #2
   1ba28:	bl	12f88 <__assert_fail@plt>
   1ba2c:	nop	{0}
   1ba30:	stclgt	12, cr12, [ip], {205}	; 0xcd
   1ba34:	andsmi	ip, r0, ip, asr #25

0001ba38 <gen_monster_benchmark@@Base>:
   1ba38:	push	{r4, r5, fp, lr}
   1ba3c:	add	fp, sp, #8
   1ba40:	sub	sp, sp, #24
   1ba44:	mov	r4, r0
   1ba48:	movw	r0, #17848	; 0x45b8
   1ba4c:	movt	r0, #2
   1ba50:	vldr	d16, [r0]
   1ba54:	movw	r0, #2312	; 0x908
   1ba58:	strh	r0, [sp, #16]
   1ba5c:	mov	r0, r4
   1ba60:	vstr	d16, [sp, #8]
   1ba64:	bl	1d2e4 <flatcc_builder_reset@@Base>
   1ba68:	movw	r1, #9828	; 0x2664
   1ba6c:	mov	r0, r4
   1ba70:	mov	r2, #0
   1ba74:	mov	r3, #0
   1ba78:	movt	r1, #2
   1ba7c:	bl	1db50 <flatcc_builder_start_buffer@@Base>
   1ba80:	cmp	r0, #0
   1ba84:	bne	1ba94 <gen_monster_benchmark@@Base+0x5c>
   1ba88:	mov	r0, r4
   1ba8c:	mov	r1, #36	; 0x24
   1ba90:	bl	1ebcc <flatcc_builder_start_table@@Base>
   1ba94:	mov	r0, r4
   1ba98:	mov	r1, #2
   1ba9c:	mov	r2, #2
   1baa0:	mov	r3, #2
   1baa4:	bl	1fe9c <flatcc_builder_table_add@@Base>
   1baa8:	cmp	r0, #0
   1baac:	mov	r2, #32
   1bab0:	mov	r3, #16
   1bab4:	movne	r1, #80	; 0x50
   1bab8:	strhne	r1, [r0]
   1babc:	mov	r0, r4
   1bac0:	mov	r1, #0
   1bac4:	bl	1fe9c <flatcc_builder_table_add@@Base>
   1bac8:	movw	r3, #52429	; 0xcccd
   1bacc:	mov	r1, #1065353216	; 0x3f800000
   1bad0:	mov	r2, #1073741824	; 0x40000000
   1bad4:	movt	r3, #49228	; 0xc04c
   1bad8:	stm	r0, {r1, r2, r3}
   1badc:	movw	r1, #9896	; 0x26a8
   1bae0:	mov	r0, r4
   1bae4:	movt	r1, #2
   1bae8:	bl	20844 <flatcc_builder_create_string_str@@Base>
   1baec:	cmp	r0, #0
   1baf0:	beq	1bb0c <gen_monster_benchmark@@Base+0xd4>
   1baf4:	mov	r5, r0
   1baf8:	mov	r0, r4
   1bafc:	mov	r1, #3
   1bb00:	bl	1fd60 <flatcc_builder_table_add_offset@@Base>
   1bb04:	cmp	r0, #0
   1bb08:	strne	r5, [r0]
   1bb0c:	mvn	r0, #0
   1bb10:	mov	r1, #1
   1bb14:	mov	r2, #10
   1bb18:	mov	r3, #1
   1bb1c:	str	r1, [sp]
   1bb20:	str	r0, [sp, #4]
   1bb24:	add	r1, sp, #8
   1bb28:	mov	r0, r4
   1bb2c:	bl	1f714 <flatcc_builder_create_vector@@Base>
   1bb30:	cmp	r0, #0
   1bb34:	beq	1bb50 <gen_monster_benchmark@@Base+0x118>
   1bb38:	mov	r5, r0
   1bb3c:	mov	r0, r4
   1bb40:	mov	r1, #5
   1bb44:	bl	1fd60 <flatcc_builder_table_add_offset@@Base>
   1bb48:	cmp	r0, #0
   1bb4c:	strne	r5, [r0]
   1bb50:	mov	r0, r4
   1bb54:	mov	r1, #4
   1bb58:	mov	r2, #2
   1bb5c:	mvn	r3, #-1073741824	; 0xc0000000
   1bb60:	bl	1e800 <flatcc_builder_start_vector@@Base>
   1bb64:	mov	r0, r4
   1bb68:	mov	r1, #1
   1bb6c:	bl	1dfe8 <flatcc_builder_extend_vector@@Base>
   1bb70:	mov	r1, #16
   1bb74:	strh	r1, [r0]
   1bb78:	mov	r1, #32
   1bb7c:	strb	r1, [r0, #2]
   1bb80:	mov	r0, r4
   1bb84:	mov	r1, #2
   1bb88:	bl	1dfe8 <flatcc_builder_extend_vector@@Base>
   1bb8c:	mov	r1, #48	; 0x30
   1bb90:	strh	r1, [r0]
   1bb94:	mov	r1, #64	; 0x40
   1bb98:	strb	r1, [r0, #2]
   1bb9c:	mov	r1, #80	; 0x50
   1bba0:	strh	r1, [r0, #4]
   1bba4:	mov	r1, #96	; 0x60
   1bba8:	strb	r1, [r0, #6]
   1bbac:	mov	r0, r4
   1bbb0:	mov	r1, #1
   1bbb4:	bl	1dfe8 <flatcc_builder_extend_vector@@Base>
   1bbb8:	cmp	r0, #0
   1bbbc:	movne	r1, #128	; 0x80
   1bbc0:	strbne	r1, [r0, #2]
   1bbc4:	movne	r1, #112	; 0x70
   1bbc8:	strhne	r1, [r0]
   1bbcc:	mov	r0, r4
   1bbd0:	mov	r1, #1
   1bbd4:	bl	1dfe8 <flatcc_builder_extend_vector@@Base>
   1bbd8:	cmp	r0, #0
   1bbdc:	movwne	r1, #401	; 0x191
   1bbe0:	movtne	r1, #145	; 0x91
   1bbe4:	strne	r1, [r0]
   1bbe8:	mov	r0, r4
   1bbec:	bl	1f86c <flatcc_builder_end_vector@@Base>
   1bbf0:	cmp	r0, #0
   1bbf4:	beq	1bc10 <gen_monster_benchmark@@Base+0x1d8>
   1bbf8:	mov	r5, r0
   1bbfc:	mov	r0, r4
   1bc00:	mov	r1, #9
   1bc04:	bl	1fd60 <flatcc_builder_table_add_offset@@Base>
   1bc08:	cmp	r0, #0
   1bc0c:	strne	r5, [r0]
   1bc10:	movw	r1, #17860	; 0x45c4
   1bc14:	mov	r0, r4
   1bc18:	mov	r2, #1
   1bc1c:	movt	r1, #2
   1bc20:	bl	1f4cc <flatcc_builder_check_required@@Base>
   1bc24:	cmp	r0, #0
   1bc28:	beq	1bc4c <gen_monster_benchmark@@Base+0x214>
   1bc2c:	mov	r0, r4
   1bc30:	bl	1f55c <flatcc_builder_end_table@@Base>
   1bc34:	mov	r1, r0
   1bc38:	mov	r0, r4
   1bc3c:	bl	1dd40 <flatcc_builder_end_buffer@@Base>
   1bc40:	mov	r0, #0
   1bc44:	sub	sp, fp, #8
   1bc48:	pop	{r4, r5, fp, pc}
   1bc4c:	movw	r0, #13899	; 0x364b
   1bc50:	movw	r1, #13609	; 0x3529
   1bc54:	movw	r3, #14061	; 0x36ed
   1bc58:	mov	r2, #235	; 0xeb
   1bc5c:	movt	r0, #2
   1bc60:	movt	r1, #2
   1bc64:	movt	r3, #2
   1bc68:	bl	12f88 <__assert_fail@plt>

0001bc6c <time_monster@@Base>:
   1bc6c:	push	{r4, r5, fp, lr}
   1bc70:	add	fp, sp, #8
   1bc74:	vpush	{d8}
   1bc78:	mov	r4, r0
   1bc7c:	movw	r0, #24352	; 0x5f20
   1bc80:	movt	r0, #2
   1bc84:	bl	12eec <puts@plt>
   1bc88:	movw	r5, #16960	; 0x4240
   1bc8c:	movt	r5, #15
   1bc90:	bl	1bce0 <time_monster@@Base+0x74>
   1bc94:	vmov.f64	d8, d0
   1bc98:	mov	r0, r4
   1bc9c:	bl	1ba38 <gen_monster_benchmark@@Base>
   1bca0:	subs	r5, r5, #1
   1bca4:	bne	1bc98 <time_monster@@Base+0x2c>
   1bca8:	mov	r0, r4
   1bcac:	bl	20aa8 <flatcc_builder_get_buffer_size@@Base>
   1bcb0:	mov	r4, r0
   1bcb4:	bl	1bce0 <time_monster@@Base+0x74>
   1bcb8:	movw	r0, #13085	; 0x331d
   1bcbc:	vmov.f64	d1, d0
   1bcc0:	vmov.f64	d0, d8
   1bcc4:	mov	r1, r4
   1bcc8:	movt	r0, #2
   1bccc:	bl	1bd60 <time_monster@@Base+0xf4>
   1bcd0:	mov	r0, #0
   1bcd4:	vpop	{d8}
   1bcd8:	pop	{r4, r5, fp, pc}
   1bcdc:	nop	{0}
   1bce0:	push	{fp, lr}
   1bce4:	mov	fp, sp
   1bce8:	sub	sp, sp, #8
   1bcec:	mov	r0, sp
   1bcf0:	mov	r1, #0
   1bcf4:	bl	12ee0 <gettimeofday@plt>
   1bcf8:	movw	r2, #32888	; 0x8078
   1bcfc:	movt	r2, #3
   1bd00:	ldr	r0, [r2]
   1bd04:	cmp	r0, #0
   1bd08:	beq	1bd18 <time_monster@@Base+0xac>
   1bd0c:	ldr	r1, [r2, #4]
   1bd10:	ldr	r2, [sp]
   1bd14:	b	1bd24 <time_monster@@Base+0xb8>
   1bd18:	ldm	sp, {r0, r1}
   1bd1c:	strd	r0, [r2]
   1bd20:	mov	r2, r0
   1bd24:	sub	r0, r2, r0
   1bd28:	ldr	r2, [sp, #4]
   1bd2c:	vldr	d16, [pc, #36]	; 1bd58 <time_monster@@Base+0xec>
   1bd30:	vmov	s2, r0
   1bd34:	sub	r1, r2, r1
   1bd38:	vmov	s0, r1
   1bd3c:	vcvt.f64.s32	d17, s0
   1bd40:	vcvt.f64.s32	d18, s2
   1bd44:	vdiv.f64	d16, d17, d16
   1bd48:	vadd.f64	d0, d16, d18
   1bd4c:	mov	sp, fp
   1bd50:	pop	{fp, pc}
   1bd54:	nop	{0}
   1bd58:	andeq	r0, r0, r0
   1bd5c:	smlawbmi	lr, r0, r4, r8
   1bd60:	push	{r4, sl, fp, lr}
   1bd64:	add	fp, sp, #8
   1bd68:	vpush	{d8-d9}
   1bd6c:	mov	r4, r1
   1bd70:	mov	r1, r0
   1bd74:	movw	r0, #17369	; 0x43d9
   1bd78:	vmov.f64	d8, d1
   1bd7c:	vmov.f64	d9, d0
   1bd80:	movt	r0, #2
   1bd84:	bl	12e98 <printf@plt>
   1bd88:	movw	r0, #17384	; 0x43e8
   1bd8c:	vsub.f64	d9, d8, d9
   1bd90:	vmov	r2, r3, d9
   1bd94:	movt	r0, #2
   1bd98:	bl	12e98 <printf@plt>
   1bd9c:	movw	r0, #17408	; 0x4400
   1bda0:	movw	r1, #16960	; 0x4240
   1bda4:	movt	r0, #2
   1bda8:	movt	r1, #15
   1bdac:	bl	12e98 <printf@plt>
   1bdb0:	movw	r0, #17424	; 0x4410
   1bdb4:	mov	r1, r4
   1bdb8:	movt	r0, #2
   1bdbc:	bl	12e98 <printf@plt>
   1bdc0:	vldr	d8, [pc, #224]	; 1bea8 <time_monster@@Base+0x23c>
   1bdc4:	vmov	s0, r4
   1bdc8:	movw	r0, #17443	; 0x4423
   1bdcc:	vcvt.f64.u32	d16, s0
   1bdd0:	movt	r0, #2
   1bdd4:	vmul.f64	d16, d16, d8
   1bdd8:	vdiv.f64	d16, d16, d8
   1bddc:	vdiv.f64	d16, d16, d9
   1bde0:	vmov	r2, r3, d16
   1bde4:	bl	12e98 <printf@plt>
   1bde8:	movw	r0, #17467	; 0x443b
   1bdec:	vdiv.f64	d16, d8, d9
   1bdf0:	vmov	r2, r3, d16
   1bdf4:	movt	r0, #2
   1bdf8:	bl	12e98 <printf@plt>
   1bdfc:	vmov.f64	d16, #112	; 0x3f800000  1.0
   1be00:	movw	r0, #17500	; 0x445c
   1be04:	movw	r1, #13107	; 0x3333
   1be08:	vdiv.f64	d16, d16, d9
   1be0c:	movt	r0, #2
   1be10:	movt	r1, #2
   1be14:	vmov	r2, r3, d16
   1be18:	bl	12e98 <printf@plt>
   1be1c:	vldr	d17, [pc, #140]	; 1beb0 <time_monster@@Base+0x244>
   1be20:	vldr	d18, [pc, #144]	; 1beb8 <time_monster@@Base+0x24c>
   1be24:	vmul.f64	d16, d9, d17
   1be28:	vdiv.f64	d16, d16, d8
   1be2c:	vcmpe.f64	d16, d18
   1be30:	vmrs	APSR_nzcv, fpscr
   1be34:	bpl	1be48 <time_monster@@Base+0x1dc>
   1be38:	movw	r0, #17536	; 0x4480
   1be3c:	vmov	r2, r3, d16
   1be40:	movt	r0, #2
   1be44:	b	1be98 <time_monster@@Base+0x22c>
   1be48:	vcmpe.f64	d16, d8
   1be4c:	vmrs	APSR_nzcv, fpscr
   1be50:	bpl	1be68 <time_monster@@Base+0x1fc>
   1be54:	movw	r0, #17560	; 0x4498
   1be58:	vdiv.f64	d16, d16, d18
   1be5c:	vmov	r2, r3, d16
   1be60:	movt	r0, #2
   1be64:	b	1be98 <time_monster@@Base+0x22c>
   1be68:	vcmpe.f64	d16, d17
   1be6c:	vmrs	APSR_nzcv, fpscr
   1be70:	bpl	1be88 <time_monster@@Base+0x21c>
   1be74:	movw	r0, #17584	; 0x44b0
   1be78:	vdiv.f64	d16, d16, d8
   1be7c:	vmov	r2, r3, d16
   1be80:	movt	r0, #2
   1be84:	b	1be98 <time_monster@@Base+0x22c>
   1be88:	movw	r0, #17608	; 0x44c8
   1be8c:	vdiv.f64	d16, d16, d17
   1be90:	vmov	r2, r3, d16
   1be94:	movt	r0, #2
   1be98:	vpop	{d8-d9}
   1be9c:	pop	{r4, sl, fp, lr}
   1bea0:	b	12e98 <printf@plt>
   1bea4:	nop	{0}
   1bea8:	andeq	r0, r0, r0
   1beac:	smlawbmi	lr, r0, r4, r8
   1beb0:	andeq	r0, r0, r0
   1beb4:	bicmi	ip, sp, r5, ror #26
   1beb8:	andeq	r0, r0, r0
   1bebc:	addmi	r4, pc, r0

0001bec0 <gen_struct_buffer_benchmark@@Base>:
   1bec0:	push	{r4, r5, r6, sl, fp, lr}
   1bec4:	add	fp, sp, #16
   1bec8:	sub	sp, sp, #8
   1becc:	mov	r4, r0
   1bed0:	bl	1d2e4 <flatcc_builder_reset@@Base>
   1bed4:	mov	r0, r4
   1bed8:	mov	r1, #32
   1bedc:	mov	r2, #16
   1bee0:	mov	r5, #16
   1bee4:	bl	1de70 <flatcc_builder_start_struct@@Base>
   1bee8:	mov	r6, #0
   1beec:	cmp	r0, #0
   1bef0:	mov	r3, #0
   1bef4:	beq	1bf4c <gen_struct_buffer_benchmark@@Base+0x8c>
   1bef8:	movw	r1, #52428	; 0xcccc
   1befc:	movw	r2, #52429	; 0xcccd
   1bf00:	movw	r3, #0
   1bf04:	movt	r2, #52428	; 0xcccc
   1bf08:	movt	r1, #16400	; 0x4010
   1bf0c:	movt	r3, #16448	; 0x4040
   1bf10:	str	r2, [r0, #16]
   1bf14:	str	r1, [r0, #20]
   1bf18:	mov	r2, #1065353216	; 0x3f800000
   1bf1c:	mov	r1, #1073741824	; 0x40000000
   1bf20:	str	r2, [r0]
   1bf24:	stmib	r0, {r1, r3}
   1bf28:	mov	r1, #8
   1bf2c:	strb	r1, [r0, #24]
   1bf30:	movw	r1, #2730	; 0xaaa
   1bf34:	strh	r1, [r0, #26]
   1bf38:	mov	r1, #239	; 0xef
   1bf3c:	strb	r1, [r0, #28]
   1bf40:	mov	r0, r4
   1bf44:	bl	1df10 <flatcc_builder_end_struct@@Base>
   1bf48:	mov	r3, r0
   1bf4c:	movw	r1, #9828	; 0x2664
   1bf50:	mov	r0, r4
   1bf54:	mov	r2, #0
   1bf58:	stm	sp, {r5, r6}
   1bf5c:	movt	r1, #2
   1bf60:	bl	1d80c <flatcc_builder_create_buffer@@Base>
   1bf64:	mov	r0, r4
   1bf68:	mov	r1, #0
   1bf6c:	bl	20b34 <flatcc_builder_get_direct_buffer@@Base>
   1bf70:	cmp	r0, #0
   1bf74:	beq	1c000 <gen_struct_buffer_benchmark@@Base+0x140>
   1bf78:	ldr	r1, [r0]
   1bf7c:	vmov.f32	s2, #112	; 0x3f800000  1.0
   1bf80:	add	r0, r0, r1
   1bf84:	vldr	s0, [r0]
   1bf88:	vcmp.f32	s0, s2
   1bf8c:	vmrs	APSR_nzcv, fpscr
   1bf90:	bne	1c000 <gen_struct_buffer_benchmark@@Base+0x140>
   1bf94:	vldr	s0, [r0, #4]
   1bf98:	vmov.f32	s2, #0	; 0x40000000  2.0
   1bf9c:	vcmp.f32	s0, s2
   1bfa0:	vmrs	APSR_nzcv, fpscr
   1bfa4:	bne	1c000 <gen_struct_buffer_benchmark@@Base+0x140>
   1bfa8:	vldr	s0, [r0, #8]
   1bfac:	vmov.f32	s2, #8	; 0x40400000  3.0
   1bfb0:	vcmp.f32	s0, s2
   1bfb4:	vmrs	APSR_nzcv, fpscr
   1bfb8:	bne	1c000 <gen_struct_buffer_benchmark@@Base+0x140>
   1bfbc:	vldr	d16, [pc, #76]	; 1c010 <gen_struct_buffer_benchmark@@Base+0x150>
   1bfc0:	vldr	d17, [r0, #16]
   1bfc4:	vcmp.f64	d17, d16
   1bfc8:	vmrs	APSR_nzcv, fpscr
   1bfcc:	bne	1c000 <gen_struct_buffer_benchmark@@Base+0x140>
   1bfd0:	ldrb	r1, [r0, #24]
   1bfd4:	cmp	r1, #8
   1bfd8:	bne	1c000 <gen_struct_buffer_benchmark@@Base+0x140>
   1bfdc:	ldrh	r1, [r0, #26]
   1bfe0:	movw	r2, #2730	; 0xaaa
   1bfe4:	cmp	r1, r2
   1bfe8:	bne	1c000 <gen_struct_buffer_benchmark@@Base+0x140>
   1bfec:	ldrb	r0, [r0, #28]
   1bff0:	subs	r0, r0, #239	; 0xef
   1bff4:	mvnne	r0, #0
   1bff8:	sub	sp, fp, #16
   1bffc:	pop	{r4, r5, r6, sl, fp, pc}
   1c000:	mvn	r0, #0
   1c004:	sub	sp, fp, #16
   1c008:	pop	{r4, r5, r6, sl, fp, pc}
   1c00c:	nop	{0}
   1c010:	stclgt	12, cr12, [ip], {205}	; 0xcd
   1c014:	andsmi	ip, r0, ip, asr #25

0001c018 <time_struct_buffer@@Base>:
   1c018:	push	{r4, r5, r6, sl, fp, lr}
   1c01c:	add	fp, sp, #16
   1c020:	vpush	{d8-d9}
   1c024:	mov	r5, r0
   1c028:	movw	r0, #24352	; 0x5f20
   1c02c:	movt	r0, #2
   1c030:	bl	12eec <puts@plt>
   1c034:	movw	r6, #16960	; 0x4240
   1c038:	mov	r4, #0
   1c03c:	movt	r6, #15
   1c040:	bl	1bce0 <time_monster@@Base+0x74>
   1c044:	vmov.f64	d8, d0
   1c048:	mov	r0, r5
   1c04c:	bl	1bec0 <gen_struct_buffer_benchmark@@Base>
   1c050:	orr	r4, r0, r4
   1c054:	subs	r6, r6, #1
   1c058:	bne	1c048 <time_struct_buffer@@Base+0x30>
   1c05c:	bl	1bce0 <time_monster@@Base+0x74>
   1c060:	mov	r0, r5
   1c064:	vmov.f64	d9, d0
   1c068:	bl	20aa8 <flatcc_builder_get_buffer_size@@Base>
   1c06c:	mov	r5, r0
   1c070:	cmp	r4, #0
   1c074:	beq	1c084 <time_struct_buffer@@Base+0x6c>
   1c078:	movw	r0, #24384	; 0x5f40
   1c07c:	movt	r0, #2
   1c080:	bl	12eec <puts@plt>
   1c084:	movw	r0, #13115	; 0x333b
   1c088:	vmov.f64	d0, d8
   1c08c:	vmov.f64	d1, d9
   1c090:	mov	r1, r5
   1c094:	movt	r0, #2
   1c098:	bl	1bd60 <time_monster@@Base+0xf4>
   1c09c:	mov	r0, r4
   1c0a0:	vpop	{d8-d9}
   1c0a4:	pop	{r4, r5, r6, sl, fp, pc}

0001c0a8 <main@@Base>:
   1c0a8:	push	{r4, sl, fp, lr}
   1c0ac:	add	fp, sp, #8
   1c0b0:	sub	sp, sp, #232	; 0xe8
   1c0b4:	mov	r4, sp
   1c0b8:	mov	r0, r4
   1c0bc:	bl	1d154 <flatcc_builder_init@@Base>
   1c0c0:	movw	r0, #24416	; 0x5f60
   1c0c4:	movt	r0, #2
   1c0c8:	bl	12eec <puts@plt>
   1c0cc:	mov	r0, r4
   1c0d0:	bl	13c04 <test_table_with_emptystruct@@Base>
   1c0d4:	cmp	r0, #0
   1c0d8:	bne	1c21c <main@@Base+0x174>
   1c0dc:	mov	r0, sp
   1c0e0:	bl	1378c <test_empty_monster@@Base>
   1c0e4:	cmp	r0, #0
   1c0e8:	bne	1c21c <main@@Base+0x174>
   1c0ec:	mov	r0, sp
   1c0f0:	bl	153a4 <test_monster@@Base>
   1c0f4:	cmp	r0, #0
   1c0f8:	bne	1c21c <main@@Base+0x174>
   1c0fc:	mov	r0, sp
   1c100:	bl	1544c <test_monster_with_size@@Base>
   1c104:	cmp	r0, #0
   1c108:	bne	1c21c <main@@Base+0x174>
   1c10c:	mov	r0, sp
   1c110:	bl	1553c <test_string@@Base>
   1c114:	cmp	r0, #0
   1c118:	bne	1c21c <main@@Base+0x174>
   1c11c:	mov	r0, sp
   1c120:	bl	1b570 <test_struct_buffer@@Base>
   1c124:	cmp	r0, #0
   1c128:	bne	1c21c <main@@Base+0x174>
   1c12c:	mov	r0, sp
   1c130:	bl	13914 <test_typed_empty_monster@@Base>
   1c134:	cmp	r0, #0
   1c138:	bne	1c21c <main@@Base+0x174>
   1c13c:	mov	r0, sp
   1c140:	bl	13d14 <test_typed_table_with_emptystruct@@Base>
   1c144:	cmp	r0, #0
   1c148:	bne	1c21c <main@@Base+0x174>
   1c14c:	mov	r0, sp
   1c150:	bl	1b798 <test_typed_struct_buffer@@Base>
   1c154:	cmp	r0, #0
   1c158:	bne	1c21c <main@@Base+0x174>
   1c15c:	mov	r0, sp
   1c160:	bl	189dc <test_clone_slice@@Base>
   1c164:	cmp	r0, #0
   1c168:	bne	1c21c <main@@Base+0x174>
   1c16c:	mov	r0, sp
   1c170:	bl	1a84c <test_add_set_defaults@@Base>
   1c174:	cmp	r0, #0
   1c178:	bne	1c21c <main@@Base+0x174>
   1c17c:	mov	r0, sp
   1c180:	bl	1940c <test_create_add_field@@Base>
   1c184:	cmp	r0, #0
   1c188:	bne	1c21c <main@@Base+0x174>
   1c18c:	mov	r0, sp
   1c190:	bl	196ec <test_union_vector@@Base>
   1c194:	cmp	r0, #0
   1c198:	bne	1c21c <main@@Base+0x174>
   1c19c:	mov	r0, sp
   1c1a0:	bl	18610 <test_basic_sort@@Base>
   1c1a4:	cmp	r0, #0
   1c1a8:	bne	1c21c <main@@Base+0x174>
   1c1ac:	mov	r0, sp
   1c1b0:	bl	157f8 <test_sort_find@@Base>
   1c1b4:	cmp	r0, #0
   1c1b8:	bne	1c21c <main@@Base+0x174>
   1c1bc:	mov	r0, sp
   1c1c0:	bl	164bc <test_scan@@Base>
   1c1c4:	cmp	r0, #0
   1c1c8:	bne	1c21c <main@@Base+0x174>
   1c1cc:	mov	r0, sp
   1c1d0:	bl	1ab68 <test_nested_buffer@@Base>
   1c1d4:	cmp	r0, #0
   1c1d8:	bne	1c21c <main@@Base+0x174>
   1c1dc:	mov	r0, sp
   1c1e0:	bl	1ae88 <test_nested_buffer_first@@Base>
   1c1e4:	cmp	r0, #0
   1c1e8:	bne	1c21c <main@@Base+0x174>
   1c1ec:	mov	r0, sp
   1c1f0:	bl	1b1a8 <test_nested_buffer_using_nest@@Base>
   1c1f4:	cmp	r0, #0
   1c1f8:	bne	1c21c <main@@Base+0x174>
   1c1fc:	mov	r0, sp
   1c200:	bl	13140 <test_type_aliases@@Base>
   1c204:	cmp	r0, #0
   1c208:	bne	1c21c <main@@Base+0x174>
   1c20c:	mov	r0, sp
   1c210:	bl	19c3c <test_mixed_type_union@@Base>
   1c214:	cmp	r0, #0
   1c218:	beq	1c234 <main@@Base+0x18c>
   1c21c:	movw	r0, #17691	; 0x451b
   1c220:	movt	r0, #2
   1c224:	bl	12eec <puts@plt>
   1c228:	mvn	r0, #0
   1c22c:	sub	sp, fp, #8
   1c230:	pop	{r4, sl, fp, pc}
   1c234:	mov	r0, sp
   1c238:	bl	1d2f0 <flatcc_builder_clear@@Base>
   1c23c:	mov	r0, #0
   1c240:	b	1c22c <main@@Base+0x184>
   1c244:	push	{r4, sl, fp, lr}
   1c248:	add	fp, sp, #8
   1c24c:	sub	sp, sp, #8
   1c250:	mov	r1, #0
   1c254:	mov	r2, #1
   1c258:	mov	r3, #1
   1c25c:	mov	r4, r0
   1c260:	bl	21370 <flatcc_verify_field@@Base>
   1c264:	cmp	r0, #0
   1c268:	bne	1c3b8 <main@@Base+0x310>
   1c26c:	mov	r0, r4
   1c270:	mov	r1, #1
   1c274:	mov	r2, #1
   1c278:	mov	r3, #1
   1c27c:	bl	21370 <flatcc_verify_field@@Base>
   1c280:	cmp	r0, #0
   1c284:	bne	1c3b8 <main@@Base+0x310>
   1c288:	mov	r0, r4
   1c28c:	mov	r1, #2
   1c290:	mov	r2, #2
   1c294:	mov	r3, #2
   1c298:	bl	21370 <flatcc_verify_field@@Base>
   1c29c:	cmp	r0, #0
   1c2a0:	bne	1c3b8 <main@@Base+0x310>
   1c2a4:	mov	r0, r4
   1c2a8:	mov	r1, #3
   1c2ac:	mov	r2, #2
   1c2b0:	mov	r3, #2
   1c2b4:	bl	21370 <flatcc_verify_field@@Base>
   1c2b8:	cmp	r0, #0
   1c2bc:	bne	1c3b8 <main@@Base+0x310>
   1c2c0:	mov	r0, r4
   1c2c4:	mov	r1, #4
   1c2c8:	mov	r2, #4
   1c2cc:	mov	r3, #4
   1c2d0:	bl	21370 <flatcc_verify_field@@Base>
   1c2d4:	cmp	r0, #0
   1c2d8:	bne	1c3b8 <main@@Base+0x310>
   1c2dc:	mov	r0, r4
   1c2e0:	mov	r1, #5
   1c2e4:	mov	r2, #4
   1c2e8:	mov	r3, #4
   1c2ec:	bl	21370 <flatcc_verify_field@@Base>
   1c2f0:	cmp	r0, #0
   1c2f4:	bne	1c3b8 <main@@Base+0x310>
   1c2f8:	mov	r0, r4
   1c2fc:	mov	r1, #6
   1c300:	mov	r2, #8
   1c304:	mov	r3, #8
   1c308:	bl	21370 <flatcc_verify_field@@Base>
   1c30c:	cmp	r0, #0
   1c310:	bne	1c3b8 <main@@Base+0x310>
   1c314:	mov	r0, r4
   1c318:	mov	r1, #7
   1c31c:	mov	r2, #8
   1c320:	mov	r3, #8
   1c324:	bl	21370 <flatcc_verify_field@@Base>
   1c328:	cmp	r0, #0
   1c32c:	bne	1c3b8 <main@@Base+0x310>
   1c330:	mov	r0, r4
   1c334:	mov	r1, #8
   1c338:	mov	r2, #4
   1c33c:	mov	r3, #4
   1c340:	bl	21370 <flatcc_verify_field@@Base>
   1c344:	cmp	r0, #0
   1c348:	bne	1c3b8 <main@@Base+0x310>
   1c34c:	mov	r0, r4
   1c350:	mov	r1, #9
   1c354:	mov	r2, #8
   1c358:	mov	r3, #8
   1c35c:	bl	21370 <flatcc_verify_field@@Base>
   1c360:	cmp	r0, #0
   1c364:	bne	1c3b8 <main@@Base+0x310>
   1c368:	mvn	r0, #0
   1c36c:	mov	r1, #1
   1c370:	mov	r2, #0
   1c374:	mov	r3, #1
   1c378:	str	r1, [sp]
   1c37c:	str	r0, [sp, #4]
   1c380:	mov	r0, r4
   1c384:	mov	r1, #10
   1c388:	bl	214f0 <flatcc_verify_vector_field@@Base>
   1c38c:	cmp	r0, #0
   1c390:	bne	1c3b8 <main@@Base+0x310>
   1c394:	mvn	r0, #-536870912	; 0xe0000000
   1c398:	mov	r1, #8
   1c39c:	mov	r2, #0
   1c3a0:	mov	r3, #8
   1c3a4:	str	r1, [sp]
   1c3a8:	str	r0, [sp, #4]
   1c3ac:	mov	r0, r4
   1c3b0:	mov	r1, #11
   1c3b4:	bl	214f0 <flatcc_verify_vector_field@@Base>
   1c3b8:	sub	sp, fp, #8
   1c3bc:	pop	{r4, sl, fp, pc}
   1c3c0:	push	{r4, r5, r6, r7, fp, lr}
   1c3c4:	add	fp, sp, #16
   1c3c8:	sub	sp, sp, #8
   1c3cc:	mov	r1, #0
   1c3d0:	mov	r2, #32
   1c3d4:	mov	r3, #16
   1c3d8:	mov	r4, r0
   1c3dc:	bl	21370 <flatcc_verify_field@@Base>
   1c3e0:	cmp	r0, #0
   1c3e4:	bne	1c7ec <main@@Base+0x744>
   1c3e8:	mov	r0, r4
   1c3ec:	mov	r1, #2
   1c3f0:	mov	r2, #2
   1c3f4:	mov	r3, #2
   1c3f8:	bl	21370 <flatcc_verify_field@@Base>
   1c3fc:	cmp	r0, #0
   1c400:	bne	1c7ec <main@@Base+0x744>
   1c404:	mov	r0, r4
   1c408:	mov	r1, #1
   1c40c:	mov	r2, #2
   1c410:	mov	r3, #2
   1c414:	bl	21370 <flatcc_verify_field@@Base>
   1c418:	cmp	r0, #0
   1c41c:	bne	1c7ec <main@@Base+0x744>
   1c420:	mov	r0, r4
   1c424:	mov	r1, #3
   1c428:	mov	r2, #1
   1c42c:	bl	213e8 <flatcc_verify_string_field@@Base>
   1c430:	cmp	r0, #0
   1c434:	bne	1c7ec <main@@Base+0x744>
   1c438:	mov	r0, r4
   1c43c:	mov	r1, #6
   1c440:	mov	r2, #1
   1c444:	mov	r3, #1
   1c448:	mov	r5, #1
   1c44c:	bl	21370 <flatcc_verify_field@@Base>
   1c450:	cmp	r0, #0
   1c454:	bne	1c7ec <main@@Base+0x744>
   1c458:	mvn	r0, #0
   1c45c:	mov	r1, #5
   1c460:	mov	r2, #0
   1c464:	mov	r3, #1
   1c468:	str	r5, [sp]
   1c46c:	str	r0, [sp, #4]
   1c470:	mov	r0, r4
   1c474:	bl	214f0 <flatcc_verify_vector_field@@Base>
   1c478:	cmp	r0, #0
   1c47c:	bne	1c7ec <main@@Base+0x744>
   1c480:	movw	r3, #50112	; 0xc3c0
   1c484:	mov	r0, r4
   1c488:	mov	r1, #11
   1c48c:	mov	r2, #0
   1c490:	movt	r3, #1
   1c494:	bl	217e4 <flatcc_verify_table_vector_field@@Base>
   1c498:	cmp	r0, #0
   1c49c:	bne	1c7ec <main@@Base+0x744>
   1c4a0:	mov	r0, r4
   1c4a4:	mov	r1, #10
   1c4a8:	mov	r2, #0
   1c4ac:	bl	21598 <flatcc_verify_string_vector_field@@Base>
   1c4b0:	cmp	r0, #0
   1c4b4:	bne	1c7ec <main@@Base+0x744>
   1c4b8:	mov	r0, r4
   1c4bc:	mov	r1, #28
   1c4c0:	mov	r2, #0
   1c4c4:	bl	21598 <flatcc_verify_string_vector_field@@Base>
   1c4c8:	cmp	r0, #0
   1c4cc:	bne	1c7ec <main@@Base+0x744>
   1c4d0:	mvn	r0, #0
   1c4d4:	mov	r1, #1
   1c4d8:	mov	r2, #0
   1c4dc:	mov	r3, #1
   1c4e0:	str	r1, [sp]
   1c4e4:	str	r0, [sp, #4]
   1c4e8:	mov	r0, r4
   1c4ec:	mov	r1, #24
   1c4f0:	bl	214f0 <flatcc_verify_vector_field@@Base>
   1c4f4:	cmp	r0, #0
   1c4f8:	bne	1c7ec <main@@Base+0x744>
   1c4fc:	mvn	r0, #-536870912	; 0xe0000000
   1c500:	mov	r1, #4
   1c504:	mov	r2, #0
   1c508:	mov	r3, #8
   1c50c:	str	r1, [sp]
   1c510:	str	r0, [sp, #4]
   1c514:	mov	r0, r4
   1c518:	mov	r1, #29
   1c51c:	bl	214f0 <flatcc_verify_vector_field@@Base>
   1c520:	cmp	r0, #0
   1c524:	bne	1c7ec <main@@Base+0x744>
   1c528:	movw	r5, #50112	; 0xc3c0
   1c52c:	mov	r0, r4
   1c530:	mov	r1, #12
   1c534:	mov	r2, #0
   1c538:	movt	r5, #1
   1c53c:	mov	r3, r5
   1c540:	bl	216e0 <flatcc_verify_table_field@@Base>
   1c544:	cmp	r0, #0
   1c548:	bne	1c7ec <main@@Base+0x744>
   1c54c:	movw	r3, #51220	; 0xc814
   1c550:	mov	r0, r4
   1c554:	mov	r1, #8
   1c558:	mov	r2, #0
   1c55c:	movt	r3, #1
   1c560:	bl	2225c <flatcc_verify_union_field@@Base>
   1c564:	cmp	r0, #0
   1c568:	bne	1c7ec <main@@Base+0x744>
   1c56c:	mvn	r6, #-1073741824	; 0xc0000000
   1c570:	mov	r7, #2
   1c574:	mov	r0, r4
   1c578:	mov	r1, #9
   1c57c:	mov	r2, #0
   1c580:	mov	r3, #4
   1c584:	str	r7, [sp]
   1c588:	str	r6, [sp, #4]
   1c58c:	bl	214f0 <flatcc_verify_vector_field@@Base>
   1c590:	cmp	r0, #0
   1c594:	bne	1c7ec <main@@Base+0x744>
   1c598:	mov	r0, r4
   1c59c:	mov	r1, #31
   1c5a0:	mov	r2, #0
   1c5a4:	mov	r3, #4
   1c5a8:	str	r7, [sp]
   1c5ac:	str	r6, [sp, #4]
   1c5b0:	bl	214f0 <flatcc_verify_vector_field@@Base>
   1c5b4:	cmp	r0, #0
   1c5b8:	bne	1c7ec <main@@Base+0x744>
   1c5bc:	mov	r0, #1
   1c5c0:	mov	r1, #13
   1c5c4:	mov	r2, #0
   1c5c8:	mov	r3, #0
   1c5cc:	stm	sp, {r0, r5}
   1c5d0:	mov	r0, r4
   1c5d4:	bl	220ac <flatcc_verify_table_as_nested_root@@Base>
   1c5d8:	cmp	r0, #0
   1c5dc:	bne	1c7ec <main@@Base+0x744>
   1c5e0:	movw	r3, #51264	; 0xc840
   1c5e4:	mov	r0, r4
   1c5e8:	mov	r1, #14
   1c5ec:	mov	r2, #0
   1c5f0:	movt	r3, #1
   1c5f4:	bl	216e0 <flatcc_verify_table_field@@Base>
   1c5f8:	cmp	r0, #0
   1c5fc:	bne	1c7ec <main@@Base+0x744>
   1c600:	mov	r0, r4
   1c604:	mov	r1, #15
   1c608:	mov	r2, #1
   1c60c:	mov	r3, #1
   1c610:	bl	21370 <flatcc_verify_field@@Base>
   1c614:	cmp	r0, #0
   1c618:	bne	1c7ec <main@@Base+0x744>
   1c61c:	mov	r0, r4
   1c620:	mov	r1, #16
   1c624:	mov	r2, #4
   1c628:	mov	r3, #4
   1c62c:	bl	21370 <flatcc_verify_field@@Base>
   1c630:	cmp	r0, #0
   1c634:	bne	1c7ec <main@@Base+0x744>
   1c638:	mov	r0, r4
   1c63c:	mov	r1, #17
   1c640:	mov	r2, #4
   1c644:	mov	r3, #4
   1c648:	bl	21370 <flatcc_verify_field@@Base>
   1c64c:	cmp	r0, #0
   1c650:	bne	1c7ec <main@@Base+0x744>
   1c654:	mov	r0, r4
   1c658:	mov	r1, #18
   1c65c:	mov	r2, #8
   1c660:	mov	r3, #8
   1c664:	bl	21370 <flatcc_verify_field@@Base>
   1c668:	cmp	r0, #0
   1c66c:	bne	1c7ec <main@@Base+0x744>
   1c670:	mov	r0, r4
   1c674:	mov	r1, #19
   1c678:	mov	r2, #8
   1c67c:	mov	r3, #8
   1c680:	bl	21370 <flatcc_verify_field@@Base>
   1c684:	cmp	r0, #0
   1c688:	bne	1c7ec <main@@Base+0x744>
   1c68c:	mov	r0, r4
   1c690:	mov	r1, #20
   1c694:	mov	r2, #4
   1c698:	mov	r3, #4
   1c69c:	bl	21370 <flatcc_verify_field@@Base>
   1c6a0:	cmp	r0, #0
   1c6a4:	bne	1c7ec <main@@Base+0x744>
   1c6a8:	mov	r0, r4
   1c6ac:	mov	r1, #21
   1c6b0:	mov	r2, #4
   1c6b4:	mov	r3, #4
   1c6b8:	bl	21370 <flatcc_verify_field@@Base>
   1c6bc:	cmp	r0, #0
   1c6c0:	bne	1c7ec <main@@Base+0x744>
   1c6c4:	mov	r0, r4
   1c6c8:	mov	r1, #22
   1c6cc:	mov	r2, #8
   1c6d0:	mov	r3, #8
   1c6d4:	bl	21370 <flatcc_verify_field@@Base>
   1c6d8:	cmp	r0, #0
   1c6dc:	bne	1c7ec <main@@Base+0x744>
   1c6e0:	mov	r0, r4
   1c6e4:	mov	r1, #23
   1c6e8:	mov	r2, #8
   1c6ec:	mov	r3, #8
   1c6f0:	bl	21370 <flatcc_verify_field@@Base>
   1c6f4:	cmp	r0, #0
   1c6f8:	bne	1c7ec <main@@Base+0x744>
   1c6fc:	mov	r0, r4
   1c700:	mov	r1, #25
   1c704:	mov	r2, #4
   1c708:	mov	r3, #4
   1c70c:	bl	21370 <flatcc_verify_field@@Base>
   1c710:	cmp	r0, #0
   1c714:	bne	1c7ec <main@@Base+0x744>
   1c718:	mov	r0, r4
   1c71c:	mov	r1, #26
   1c720:	mov	r2, #4
   1c724:	mov	r3, #4
   1c728:	bl	21370 <flatcc_verify_field@@Base>
   1c72c:	cmp	r0, #0
   1c730:	bne	1c7ec <main@@Base+0x744>
   1c734:	mov	r0, r4
   1c738:	mov	r1, #27
   1c73c:	mov	r2, #4
   1c740:	mov	r3, #4
   1c744:	bl	21370 <flatcc_verify_field@@Base>
   1c748:	cmp	r0, #0
   1c74c:	bne	1c7ec <main@@Base+0x744>
   1c750:	mvn	r0, #0
   1c754:	mov	r1, #1
   1c758:	mov	r2, #0
   1c75c:	mov	r3, #1
   1c760:	str	r1, [sp]
   1c764:	str	r0, [sp, #4]
   1c768:	mov	r0, r4
   1c76c:	mov	r1, #30
   1c770:	bl	214f0 <flatcc_verify_vector_field@@Base>
   1c774:	cmp	r0, #0
   1c778:	bne	1c7ec <main@@Base+0x744>
   1c77c:	mvn	r5, #-536870912	; 0xe0000000
   1c780:	mov	r6, #8
   1c784:	mov	r0, r4
   1c788:	mov	r1, #32
   1c78c:	mov	r2, #0
   1c790:	mov	r3, #8
   1c794:	str	r6, [sp]
   1c798:	str	r5, [sp, #4]
   1c79c:	bl	214f0 <flatcc_verify_vector_field@@Base>
   1c7a0:	cmp	r0, #0
   1c7a4:	bne	1c7ec <main@@Base+0x744>
   1c7a8:	mov	r0, r4
   1c7ac:	mov	r1, #33	; 0x21
   1c7b0:	mov	r2, #0
   1c7b4:	mov	r3, #8
   1c7b8:	str	r6, [sp]
   1c7bc:	str	r5, [sp, #4]
   1c7c0:	bl	214f0 <flatcc_verify_vector_field@@Base>
   1c7c4:	cmp	r0, #0
   1c7c8:	bne	1c7ec <main@@Base+0x744>
   1c7cc:	movw	r3, #51352	; 0xc898
   1c7d0:	mov	r0, r4
   1c7d4:	mov	r1, #34	; 0x22
   1c7d8:	mov	r2, #0
   1c7dc:	movt	r3, #1
   1c7e0:	bl	216e0 <flatcc_verify_table_field@@Base>
   1c7e4:	cmp	r0, #0
   1c7e8:	beq	1c7f4 <main@@Base+0x74c>
   1c7ec:	sub	sp, fp, #16
   1c7f0:	pop	{r4, r5, r6, r7, fp, pc}
   1c7f4:	movw	r3, #51360	; 0xc8a0
   1c7f8:	mov	r0, r4
   1c7fc:	mov	r1, #35	; 0x23
   1c800:	mov	r2, #0
   1c804:	movt	r3, #1
   1c808:	sub	sp, fp, #16
   1c80c:	pop	{r4, r5, r6, r7, fp, lr}
   1c810:	b	216e0 <flatcc_verify_table_field@@Base>
   1c814:	ldrb	r1, [r0, #12]
   1c818:	sub	r1, r1, #1
   1c81c:	uxtb	r2, r1
   1c820:	cmp	r2, #3
   1c824:	movhi	r0, #0
   1c828:	bxhi	lr
   1c82c:	movw	r2, #17876	; 0x45d4
   1c830:	sxtb	r1, r1
   1c834:	movt	r2, #2
   1c838:	ldr	r1, [r2, r1, lsl #2]
   1c83c:	b	21a68 <flatcc_verify_union_table@@Base>
   1c840:	push	{r4, sl, fp, lr}
   1c844:	add	fp, sp, #8
   1c848:	mov	r1, #0
   1c84c:	mov	r2, #0
   1c850:	mov	r4, r0
   1c854:	bl	213e8 <flatcc_verify_string_field@@Base>
   1c858:	cmp	r0, #0
   1c85c:	popne	{r4, sl, fp, pc}
   1c860:	mov	r0, r4
   1c864:	mov	r1, #1
   1c868:	mov	r2, #8
   1c86c:	mov	r3, #8
   1c870:	bl	21370 <flatcc_verify_field@@Base>
   1c874:	cmp	r0, #0
   1c878:	beq	1c880 <main@@Base+0x7d8>
   1c87c:	pop	{r4, sl, fp, pc}
   1c880:	mov	r0, r4
   1c884:	mov	r1, #2
   1c888:	mov	r2, #2
   1c88c:	mov	r3, #2
   1c890:	pop	{r4, sl, fp, lr}
   1c894:	b	21370 <flatcc_verify_field@@Base>
   1c898:	mov	r0, #0
   1c89c:	bx	lr
   1c8a0:	push	{r4, r5, r6, sl, fp, lr}
   1c8a4:	add	fp, sp, #16
   1c8a8:	sub	sp, sp, #8
   1c8ac:	mvn	r5, #0
   1c8b0:	mov	r6, #1
   1c8b4:	mov	r1, #0
   1c8b8:	mov	r2, #0
   1c8bc:	mov	r3, #1
   1c8c0:	mov	r4, r0
   1c8c4:	str	r6, [sp]
   1c8c8:	str	r5, [sp, #4]
   1c8cc:	bl	214f0 <flatcc_verify_vector_field@@Base>
   1c8d0:	cmp	r0, #0
   1c8d4:	bne	1c924 <main@@Base+0x87c>
   1c8d8:	mov	r0, r4
   1c8dc:	mov	r1, #1
   1c8e0:	mov	r2, #0
   1c8e4:	mov	r3, #1
   1c8e8:	str	r6, [sp]
   1c8ec:	str	r5, [sp, #4]
   1c8f0:	bl	214f0 <flatcc_verify_vector_field@@Base>
   1c8f4:	cmp	r0, #0
   1c8f8:	bne	1c924 <main@@Base+0x87c>
   1c8fc:	movw	r0, #50112	; 0xc3c0
   1c900:	mov	r1, #1
   1c904:	mov	r2, #0
   1c908:	mov	r3, #0
   1c90c:	movt	r0, #1
   1c910:	str	r1, [sp]
   1c914:	mov	r1, #2
   1c918:	str	r0, [sp, #4]
   1c91c:	mov	r0, r4
   1c920:	bl	220ac <flatcc_verify_table_as_nested_root@@Base>
   1c924:	sub	sp, fp, #16
   1c928:	pop	{r4, r5, r6, sl, fp, pc}
   1c92c:	push	{r4, sl, fp, lr}
   1c930:	add	fp, sp, #8
   1c934:	mov	r1, #0
   1c938:	mov	r2, #1
   1c93c:	mov	r3, #1
   1c940:	mov	r4, r0
   1c944:	bl	21370 <flatcc_verify_field@@Base>
   1c948:	cmp	r0, #0
   1c94c:	bne	1c988 <main@@Base+0x8e0>
   1c950:	mov	r0, r4
   1c954:	mov	r1, #1
   1c958:	mov	r2, #1
   1c95c:	mov	r3, #1
   1c960:	bl	21370 <flatcc_verify_field@@Base>
   1c964:	cmp	r0, #0
   1c968:	popne	{r4, sl, fp, pc}
   1c96c:	mov	r0, r4
   1c970:	mov	r1, #2
   1c974:	mov	r2, #1
   1c978:	mov	r3, #1
   1c97c:	bl	21370 <flatcc_verify_field@@Base>
   1c980:	cmp	r0, #0
   1c984:	beq	1c98c <main@@Base+0x8e4>
   1c988:	pop	{r4, sl, fp, pc}
   1c98c:	mov	r0, r4
   1c990:	mov	r1, #3
   1c994:	mov	r2, #1
   1c998:	mov	r3, #1
   1c99c:	pop	{r4, sl, fp, lr}
   1c9a0:	b	21370 <flatcc_verify_field@@Base>
   1c9a4:	mov	r0, #0
   1c9a8:	bx	lr
   1c9ac:	push	{r4, sl, fp, lr}
   1c9b0:	add	fp, sp, #8
   1c9b4:	movw	r3, #51732	; 0xca14
   1c9b8:	mov	r1, #0
   1c9bc:	mov	r2, #0
   1c9c0:	mov	r4, r0
   1c9c4:	movt	r3, #1
   1c9c8:	bl	216e0 <flatcc_verify_table_field@@Base>
   1c9cc:	cmp	r0, #0
   1c9d0:	popne	{r4, sl, fp, pc}
   1c9d4:	movw	r3, #51836	; 0xca7c
   1c9d8:	mov	r0, r4
   1c9dc:	mov	r1, #1
   1c9e0:	mov	r2, #0
   1c9e4:	movt	r3, #1
   1c9e8:	bl	216e0 <flatcc_verify_table_field@@Base>
   1c9ec:	cmp	r0, #0
   1c9f0:	beq	1c9f8 <main@@Base+0x950>
   1c9f4:	pop	{r4, sl, fp, pc}
   1c9f8:	movw	r3, #51220	; 0xc814
   1c9fc:	mov	r0, r4
   1ca00:	mov	r1, #3
   1ca04:	mov	r2, #0
   1ca08:	movt	r3, #1
   1ca0c:	pop	{r4, sl, fp, lr}
   1ca10:	b	22384 <flatcc_verify_union_vector_field@@Base>
   1ca14:	push	{r4, sl, fp, lr}
   1ca18:	add	fp, sp, #8
   1ca1c:	movw	r3, #52004	; 0xcb24
   1ca20:	mov	r1, #0
   1ca24:	mov	r2, #0
   1ca28:	mov	r4, r0
   1ca2c:	movt	r3, #1
   1ca30:	bl	216e0 <flatcc_verify_table_field@@Base>
   1ca34:	cmp	r0, #0
   1ca38:	popne	{r4, sl, fp, pc}
   1ca3c:	movw	r3, #52252	; 0xcc1c
   1ca40:	mov	r0, r4
   1ca44:	mov	r1, #1
   1ca48:	mov	r2, #0
   1ca4c:	movt	r3, #1
   1ca50:	bl	216e0 <flatcc_verify_table_field@@Base>
   1ca54:	cmp	r0, #0
   1ca58:	beq	1ca60 <main@@Base+0x9b8>
   1ca5c:	pop	{r4, sl, fp, pc}
   1ca60:	movw	r3, #52312	; 0xcc58
   1ca64:	mov	r0, r4
   1ca68:	mov	r1, #2
   1ca6c:	mov	r2, #0
   1ca70:	movt	r3, #1
   1ca74:	pop	{r4, sl, fp, lr}
   1ca78:	b	216e0 <flatcc_verify_table_field@@Base>
   1ca7c:	push	{r4, sl, fp, lr}
   1ca80:	add	fp, sp, #8
   1ca84:	movw	r3, #52372	; 0xcc94
   1ca88:	mov	r1, #1
   1ca8c:	mov	r2, #0
   1ca90:	mov	r4, r0
   1ca94:	movt	r3, #1
   1ca98:	bl	2225c <flatcc_verify_union_field@@Base>
   1ca9c:	cmp	r0, #0
   1caa0:	bne	1cb04 <main@@Base+0xa5c>
   1caa4:	movw	r3, #52372	; 0xcc94
   1caa8:	mov	r0, r4
   1caac:	mov	r1, #3
   1cab0:	mov	r2, #0
   1cab4:	movt	r3, #1
   1cab8:	bl	2225c <flatcc_verify_union_field@@Base>
   1cabc:	cmp	r0, #0
   1cac0:	bne	1cb04 <main@@Base+0xa5c>
   1cac4:	movw	r3, #52372	; 0xcc94
   1cac8:	mov	r0, r4
   1cacc:	mov	r1, #5
   1cad0:	mov	r2, #0
   1cad4:	movt	r3, #1
   1cad8:	bl	2225c <flatcc_verify_union_field@@Base>
   1cadc:	cmp	r0, #0
   1cae0:	popne	{r4, sl, fp, pc}
   1cae4:	movw	r3, #52372	; 0xcc94
   1cae8:	mov	r0, r4
   1caec:	mov	r1, #7
   1caf0:	mov	r2, #0
   1caf4:	movt	r3, #1
   1caf8:	bl	2225c <flatcc_verify_union_field@@Base>
   1cafc:	cmp	r0, #0
   1cb00:	beq	1cb08 <main@@Base+0xa60>
   1cb04:	pop	{r4, sl, fp, pc}
   1cb08:	movw	r3, #52372	; 0xcc94
   1cb0c:	mov	r0, r4
   1cb10:	mov	r1, #9
   1cb14:	mov	r2, #0
   1cb18:	movt	r3, #1
   1cb1c:	pop	{r4, sl, fp, lr}
   1cb20:	b	22384 <flatcc_verify_union_vector_field@@Base>
   1cb24:	push	{r4, sl, fp, lr}
   1cb28:	add	fp, sp, #8
   1cb2c:	mov	r1, #0
   1cb30:	mov	r2, #0
   1cb34:	mov	r4, r0
   1cb38:	bl	213e8 <flatcc_verify_string_field@@Base>
   1cb3c:	cmp	r0, #0
   1cb40:	bne	1cc00 <main@@Base+0xb58>
   1cb44:	mov	r0, r4
   1cb48:	mov	r1, #1
   1cb4c:	mov	r2, #4
   1cb50:	mov	r3, #4
   1cb54:	bl	21370 <flatcc_verify_field@@Base>
   1cb58:	cmp	r0, #0
   1cb5c:	bne	1cc00 <main@@Base+0xb58>
   1cb60:	mov	r0, r4
   1cb64:	mov	r1, #2
   1cb68:	mov	r2, #0
   1cb6c:	bl	213e8 <flatcc_verify_string_field@@Base>
   1cb70:	cmp	r0, #0
   1cb74:	bne	1cc00 <main@@Base+0xb58>
   1cb78:	mov	r0, r4
   1cb7c:	mov	r1, #3
   1cb80:	mov	r2, #8
   1cb84:	mov	r3, #8
   1cb88:	bl	21370 <flatcc_verify_field@@Base>
   1cb8c:	cmp	r0, #0
   1cb90:	bne	1cc00 <main@@Base+0xb58>
   1cb94:	mov	r0, r4
   1cb98:	mov	r1, #4
   1cb9c:	mov	r2, #0
   1cba0:	bl	213e8 <flatcc_verify_string_field@@Base>
   1cba4:	cmp	r0, #0
   1cba8:	bne	1cc00 <main@@Base+0xb58>
   1cbac:	mov	r0, r4
   1cbb0:	mov	r1, #5
   1cbb4:	mov	r2, #8
   1cbb8:	mov	r3, #8
   1cbbc:	bl	21370 <flatcc_verify_field@@Base>
   1cbc0:	cmp	r0, #0
   1cbc4:	bne	1cc00 <main@@Base+0xb58>
   1cbc8:	mov	r0, r4
   1cbcc:	mov	r1, #6
   1cbd0:	mov	r2, #4
   1cbd4:	mov	r3, #4
   1cbd8:	bl	21370 <flatcc_verify_field@@Base>
   1cbdc:	cmp	r0, #0
   1cbe0:	popne	{r4, sl, fp, pc}
   1cbe4:	mov	r0, r4
   1cbe8:	mov	r1, #7
   1cbec:	mov	r2, #8
   1cbf0:	mov	r3, #8
   1cbf4:	bl	21370 <flatcc_verify_field@@Base>
   1cbf8:	cmp	r0, #0
   1cbfc:	beq	1cc04 <main@@Base+0xb5c>
   1cc00:	pop	{r4, sl, fp, pc}
   1cc04:	mov	r0, r4
   1cc08:	mov	r1, #8
   1cc0c:	mov	r2, #4
   1cc10:	mov	r3, #4
   1cc14:	pop	{r4, sl, fp, lr}
   1cc18:	b	21370 <flatcc_verify_field@@Base>
   1cc1c:	push	{r4, sl, fp, lr}
   1cc20:	add	fp, sp, #8
   1cc24:	mov	r1, #0
   1cc28:	mov	r2, #8
   1cc2c:	mov	r3, #8
   1cc30:	mov	r4, r0
   1cc34:	bl	21370 <flatcc_verify_field@@Base>
   1cc38:	cmp	r0, #0
   1cc3c:	popne	{r4, sl, fp, pc}
   1cc40:	mov	r0, r4
   1cc44:	mov	r1, #1
   1cc48:	mov	r2, #4
   1cc4c:	mov	r3, #4
   1cc50:	pop	{r4, sl, fp, lr}
   1cc54:	b	21370 <flatcc_verify_field@@Base>
   1cc58:	push	{r4, sl, fp, lr}
   1cc5c:	add	fp, sp, #8
   1cc60:	mov	r1, #0
   1cc64:	mov	r2, #8
   1cc68:	mov	r3, #8
   1cc6c:	mov	r4, r0
   1cc70:	bl	21370 <flatcc_verify_field@@Base>
   1cc74:	cmp	r0, #0
   1cc78:	popne	{r4, sl, fp, pc}
   1cc7c:	mov	r0, r4
   1cc80:	mov	r1, #1
   1cc84:	mov	r2, #4
   1cc88:	mov	r3, #4
   1cc8c:	pop	{r4, sl, fp, lr}
   1cc90:	b	21370 <flatcc_verify_field@@Base>
   1cc94:	ldrb	r2, [r0, #12]
   1cc98:	sub	r1, r2, #2
   1cc9c:	cmp	r1, #9
   1cca0:	bhi	1cce0 <main@@Base+0xc38>
   1cca4:	add	r2, pc, #0
   1cca8:	ldr	pc, [r2, r1, lsl #2]
   1ccac:	strdeq	ip, [r1], -r4
   1ccb0:	andeq	ip, r1, ip, ror #25
   1ccb4:	andeq	ip, r1, ip, ror #25
   1ccb8:	andeq	ip, r1, ip, ror #25
   1ccbc:	andeq	ip, r1, ip, ror #25
   1ccc0:	andeq	ip, r1, ip, ror #25
   1ccc4:	andeq	ip, r1, r0, lsl #26
   1ccc8:	ldrdeq	ip, [r1], -r4
   1cccc:	ldrdeq	ip, [r1], -r4
   1ccd0:	andeq	ip, r1, r8, ror #25
   1ccd4:	mov	r1, #4
   1ccd8:	mov	r2, #4
   1ccdc:	b	21b50 <flatcc_verify_union_struct@@Base>
   1cce0:	cmp	r2, #255	; 0xff
   1cce4:	bne	1ccec <main@@Base+0xc44>
   1cce8:	b	21ba8 <flatcc_verify_union_string@@Base>
   1ccec:	mov	r0, #0
   1ccf0:	bx	lr
   1ccf4:	movw	r1, #52492	; 0xcd0c
   1ccf8:	movt	r1, #1
   1ccfc:	b	21a68 <flatcc_verify_union_table@@Base>
   1cd00:	mov	r1, #2
   1cd04:	mov	r2, #2
   1cd08:	b	21b50 <flatcc_verify_union_struct@@Base>
   1cd0c:	mov	r1, #0
   1cd10:	mov	r2, #4
   1cd14:	mov	r3, #4
   1cd18:	b	21370 <flatcc_verify_field@@Base>
   1cd1c:	mov	r1, #0
   1cd20:	mov	r2, #0
   1cd24:	mov	r3, #1
   1cd28:	b	21370 <flatcc_verify_field@@Base>
   1cd2c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1cd30:	add	fp, sp, #28
   1cd34:	sub	sp, sp, #12
   1cd38:	cmp	r2, r1, lsl #1
   1cd3c:	bcs	1cd48 <main@@Base+0xca0>
   1cd40:	sub	sp, fp, #28
   1cd44:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1cd48:	mov	r9, r2
   1cd4c:	mov	sl, r0
   1cd50:	lsl	r4, r1, #1
   1cd54:	str	r0, [sp]
   1cd58:	cmp	r4, r9
   1cd5c:	bcs	1ce38 <main@@Base+0xd90>
   1cd60:	cmp	sl, #0
   1cd64:	ldrne	r8, [sl, #-4]
   1cd68:	cmpne	r8, r4
   1cd6c:	bls	1cf54 <main@@Base+0xeac>
   1cd70:	mov	r0, sl
   1cd74:	ldr	r2, [r0, r4, lsl #2]!
   1cd78:	adds	r0, r0, r2
   1cd7c:	beq	1cf80 <main@@Base+0xed8>
   1cd80:	ldr	r2, [r0]
   1cd84:	mov	r3, r0
   1cd88:	ldrh	r2, [r3, -r2]!	; <UNPREDICTABLE>
   1cd8c:	cmp	r2, #12
   1cd90:	bcc	1cf74 <main@@Base+0xecc>
   1cd94:	ldrh	ip, [r3, #10]
   1cd98:	cmp	ip, #0
   1cd9c:	beq	1cf74 <main@@Base+0xecc>
   1cda0:	orr	r7, r4, #1
   1cda4:	cmp	r8, r7
   1cda8:	bls	1cf54 <main@@Base+0xeac>
   1cdac:	mov	r2, sl
   1cdb0:	ldr	r3, [r2, r7, lsl #2]!
   1cdb4:	adds	r3, r2, r3
   1cdb8:	beq	1cf80 <main@@Base+0xed8>
   1cdbc:	ldr	r6, [r3]
   1cdc0:	mov	r2, r3
   1cdc4:	str	r1, [sp, #8]
   1cdc8:	ldrh	r6, [r2, -r6]!	; <UNPREDICTABLE>
   1cdcc:	cmp	r6, #12
   1cdd0:	bcc	1cf74 <main@@Base+0xecc>
   1cdd4:	ldrh	r2, [r2, #10]
   1cdd8:	cmp	r2, #0
   1cddc:	beq	1cf74 <main@@Base+0xecc>
   1cde0:	ldr	r1, [r0, ip]!
   1cde4:	mov	r5, r9
   1cde8:	add	r0, r0, r1
   1cdec:	ldr	r1, [r3, r2]!
   1cdf0:	add	r0, r0, #4
   1cdf4:	ldr	r6, [r0, #-4]
   1cdf8:	ldr	r9, [r3, r1]!
   1cdfc:	cmp	r6, r9
   1ce00:	mov	r2, r9
   1ce04:	add	r1, r3, #4
   1ce08:	movcc	r2, r6
   1ce0c:	bl	12f70 <strncmp@plt>
   1ce10:	cmp	r0, #0
   1ce14:	mov	r0, r7
   1ce18:	ldr	r1, [sp, #8]
   1ce1c:	movne	r0, r4
   1ce20:	movlt	r0, r7
   1ce24:	movne	r4, r0
   1ce28:	cmp	r6, r9
   1ce2c:	mov	r9, r5
   1ce30:	movcc	r4, r0
   1ce34:	b	1ce44 <main@@Base+0xd9c>
   1ce38:	cmp	sl, #0
   1ce3c:	beq	1cf54 <main@@Base+0xeac>
   1ce40:	ldr	r8, [sl, #-4]
   1ce44:	mov	r6, r4
   1ce48:	cmp	r8, r1
   1ce4c:	bls	1cf54 <main@@Base+0xeac>
   1ce50:	mov	r4, sl
   1ce54:	ldr	r5, [r4, r1, lsl #2]!
   1ce58:	adds	r0, r4, r5
   1ce5c:	beq	1cf80 <main@@Base+0xed8>
   1ce60:	ldr	r2, [r0]
   1ce64:	mov	r3, r0
   1ce68:	ldrh	r2, [r3, -r2]!	; <UNPREDICTABLE>
   1ce6c:	cmp	r2, #12
   1ce70:	bcc	1cf74 <main@@Base+0xecc>
   1ce74:	ldrh	ip, [r3, #10]
   1ce78:	cmp	ip, #0
   1ce7c:	beq	1cf74 <main@@Base+0xecc>
   1ce80:	cmp	r8, r6
   1ce84:	bls	1cf54 <main@@Base+0xeac>
   1ce88:	mov	r7, sl
   1ce8c:	ldr	r8, [r7, r6, lsl #2]!
   1ce90:	adds	r3, r7, r8
   1ce94:	beq	1cf80 <main@@Base+0xed8>
   1ce98:	stmib	sp, {r5, r6}
   1ce9c:	mov	r2, r3
   1cea0:	ldr	r5, [r3]
   1cea4:	ldrh	r5, [r2, -r5]!	; <UNPREDICTABLE>
   1cea8:	cmp	r5, #12
   1ceac:	bcc	1cf74 <main@@Base+0xecc>
   1ceb0:	ldrh	r2, [r2, #10]
   1ceb4:	cmp	r2, #0
   1ceb8:	beq	1cf74 <main@@Base+0xecc>
   1cebc:	mov	r6, r1
   1cec0:	ldr	r1, [r0, ip]!
   1cec4:	add	r0, r0, r1
   1cec8:	ldr	r1, [r3, r2]!
   1cecc:	add	r0, r0, #4
   1ced0:	ldr	sl, [r0, #-4]
   1ced4:	ldr	r5, [r3, r1]!
   1ced8:	cmp	sl, r5
   1cedc:	mov	r2, r5
   1cee0:	add	r1, r3, #4
   1cee4:	movcc	r2, sl
   1cee8:	bl	12f70 <strncmp@plt>
   1ceec:	cmp	r0, #1
   1cef0:	mov	r1, #0
   1cef4:	mov	r2, #0
   1cef8:	movwlt	r1, #1
   1cefc:	cmp	r0, #0
   1cf00:	movwne	r0, #1
   1cf04:	cmp	sl, r5
   1cf08:	ldr	sl, [sp]
   1cf0c:	movwcc	r2, #1
   1cf10:	orr	r0, r2, r0
   1cf14:	cmp	r0, #1
   1cf18:	bne	1cd40 <main@@Base+0xc98>
   1cf1c:	cmp	r1, #0
   1cf20:	beq	1cd40 <main@@Base+0xc98>
   1cf24:	ldr	r2, [sp, #8]
   1cf28:	sub	r0, r6, r2
   1cf2c:	cmp	r9, r2, lsl #1
   1cf30:	sub	r1, r8, r0, lsl #2
   1cf34:	str	r1, [r4]
   1cf38:	ldr	r1, [sp, #4]
   1cf3c:	lsl	r4, r2, #1
   1cf40:	add	r0, r1, r0, lsl #2
   1cf44:	mov	r1, r2
   1cf48:	str	r0, [r7]
   1cf4c:	bcs	1cd58 <main@@Base+0xcb0>
   1cf50:	b	1cd40 <main@@Base+0xc98>
   1cf54:	movw	r0, #14633	; 0x3929
   1cf58:	movw	r1, #13198	; 0x338e
   1cf5c:	movw	r3, #14960	; 0x3a70
   1cf60:	movw	r2, #693	; 0x2b5
   1cf64:	movt	r0, #2
   1cf68:	movt	r1, #2
   1cf6c:	movt	r3, #2
   1cf70:	bl	12f88 <__assert_fail@plt>
   1cf74:	movw	r0, #14511	; 0x38af
   1cf78:	movt	r0, #2
   1cf7c:	b	1cf88 <main@@Base+0xee0>
   1cf80:	movw	r0, #13160	; 0x3368
   1cf84:	movt	r0, #2
   1cf88:	movw	r1, #13198	; 0x338e
   1cf8c:	movw	r3, #14430	; 0x385e
   1cf90:	movw	r2, #699	; 0x2bb
   1cf94:	movt	r1, #2
   1cf98:	movt	r3, #2
   1cf9c:	bl	12f88 <__assert_fail@plt>

0001cfa0 <flatcc_builder_default_alloc@@Base>:
   1cfa0:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1cfa4:	add	fp, sp, #24
   1cfa8:	mov	r4, r1
   1cfac:	cmp	r2, #0
   1cfb0:	beq	1cff8 <flatcc_builder_default_alloc@@Base+0x58>
   1cfb4:	ldr	r0, [fp, #8]
   1cfb8:	mov	r8, r3
   1cfbc:	sub	r1, r0, #1
   1cfc0:	cmp	r1, #6
   1cfc4:	bhi	1d020 <flatcc_builder_default_alloc@@Base+0x80>
   1cfc8:	add	r3, pc, #4
   1cfcc:	mov	r0, #256	; 0x100
   1cfd0:	ldr	pc, [r3, r1, lsl #2]
   1cfd4:	andeq	sp, r1, r4, lsr r0
   1cfd8:	andeq	sp, r1, r0, lsr #32
   1cfdc:	andeq	sp, r1, r0, lsr #32
   1cfe0:	strdeq	ip, [r1], -r0
   1cfe4:	andeq	sp, r1, r8, lsr #32
   1cfe8:	andeq	sp, r1, r0, lsr #32
   1cfec:	andeq	sp, r1, r0, lsr r0
   1cff0:	mov	r0, #288	; 0x120
   1cff4:	b	1d034 <flatcc_builder_default_alloc@@Base+0x94>
   1cff8:	ldr	r0, [r4]
   1cffc:	cmp	r0, #0
   1d000:	beq	1d018 <flatcc_builder_default_alloc@@Base+0x78>
   1d004:	bl	12ea4 <free@plt>
   1d008:	mov	r6, #0
   1d00c:	str	r6, [r4]
   1d010:	str	r6, [r4, #4]
   1d014:	b	1d090 <flatcc_builder_default_alloc@@Base+0xf0>
   1d018:	mov	r6, #0
   1d01c:	b	1d090 <flatcc_builder_default_alloc@@Base+0xf0>
   1d020:	mov	r0, #32
   1d024:	b	1d034 <flatcc_builder_default_alloc@@Base+0x94>
   1d028:	mov	r0, r2
   1d02c:	b	1d034 <flatcc_builder_default_alloc@@Base+0x94>
   1d030:	mov	r0, #64	; 0x40
   1d034:	mov	r7, r0
   1d038:	lsl	r0, r0, #1
   1d03c:	cmp	r7, r2
   1d040:	bcc	1d034 <flatcc_builder_default_alloc@@Base+0x94>
   1d044:	ldr	r0, [r4, #4]
   1d048:	mov	r6, #0
   1d04c:	cmp	r0, r2
   1d050:	lsrcs	r0, r0, #1
   1d054:	cmpcs	r0, r7
   1d058:	bcs	1d090 <flatcc_builder_default_alloc@@Base+0xf0>
   1d05c:	ldr	r0, [r4]
   1d060:	mov	r1, r7
   1d064:	bl	12ec8 <realloc@plt>
   1d068:	cmp	r0, #0
   1d06c:	beq	1d08c <flatcc_builder_default_alloc@@Base+0xec>
   1d070:	cmp	r8, #0
   1d074:	mov	r5, r0
   1d078:	ldrne	r1, [r4, #4]
   1d07c:	cmpne	r7, r1
   1d080:	bhi	1d098 <flatcc_builder_default_alloc@@Base+0xf8>
   1d084:	stm	r4, {r5, r7}
   1d088:	b	1d090 <flatcc_builder_default_alloc@@Base+0xf0>
   1d08c:	mvn	r6, #0
   1d090:	mov	r0, r6
   1d094:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1d098:	add	r0, r5, r1
   1d09c:	sub	r2, r7, r1
   1d0a0:	mov	r1, #0
   1d0a4:	bl	12f40 <memset@plt>
   1d0a8:	b	1d084 <flatcc_builder_default_alloc@@Base+0xe4>

0001d0ac <flatcc_builder_flush_vtable_cache@@Base>:
   1d0ac:	push	{r4, r5, fp, lr}
   1d0b0:	add	fp, sp, #8
   1d0b4:	mov	r4, r0
   1d0b8:	ldr	r0, [r0, #116]	; 0x74
   1d0bc:	cmp	r0, #0
   1d0c0:	popeq	{r4, r5, fp, pc}
   1d0c4:	ldr	r0, [r4, #92]	; 0x5c
   1d0c8:	ldr	r2, [r4, #96]	; 0x60
   1d0cc:	mov	r1, #0
   1d0d0:	mov	r5, #0
   1d0d4:	bl	12f40 <memset@plt>
   1d0d8:	mov	r0, #16
   1d0dc:	str	r5, [r4, #120]	; 0x78
   1d0e0:	str	r0, [r4, #124]	; 0x7c
   1d0e4:	pop	{r4, r5, fp, pc}

0001d0e8 <flatcc_builder_custom_init@@Base>:
   1d0e8:	push	{r4, r5, r6, r7, fp, lr}
   1d0ec:	add	fp, sp, #16
   1d0f0:	mov	r6, r2
   1d0f4:	mov	r7, r1
   1d0f8:	mov	r1, #0
   1d0fc:	mov	r2, #232	; 0xe8
   1d100:	mov	r5, r3
   1d104:	mov	r4, r0
   1d108:	bl	12f40 <memset@plt>
   1d10c:	ldr	r0, [fp, #8]
   1d110:	cmp	r7, #0
   1d114:	bne	1d12c <flatcc_builder_custom_init@@Base+0x44>
   1d118:	movw	r7, #3936	; 0xf60
   1d11c:	mov	r1, #1
   1d120:	add	r6, r4, #188	; 0xbc
   1d124:	movt	r7, #2
   1d128:	str	r1, [r4, #184]	; 0xb8
   1d12c:	movw	r1, #53152	; 0xcfa0
   1d130:	cmp	r5, #0
   1d134:	str	r6, [r4, #36]	; 0x24
   1d138:	str	r0, [r4, #40]	; 0x28
   1d13c:	mov	r0, #0
   1d140:	str	r7, [r4, #44]	; 0x2c
   1d144:	movt	r1, #1
   1d148:	movne	r1, r5
   1d14c:	str	r1, [r4, #48]	; 0x30
   1d150:	pop	{r4, r5, r6, r7, fp, pc}

0001d154 <flatcc_builder_init@@Base>:
   1d154:	push	{r4, r5, fp, lr}
   1d158:	add	fp, sp, #8
   1d15c:	mov	r1, #0
   1d160:	mov	r2, #232	; 0xe8
   1d164:	mov	r4, r0
   1d168:	mov	r5, #0
   1d16c:	bl	12f40 <memset@plt>
   1d170:	mov	r0, #1
   1d174:	movw	r2, #3936	; 0xf60
   1d178:	add	r1, r4, #188	; 0xbc
   1d17c:	str	r0, [r4, #184]	; 0xb8
   1d180:	movw	r0, #53152	; 0xcfa0
   1d184:	movt	r2, #2
   1d188:	str	r1, [r4, #36]	; 0x24
   1d18c:	str	r5, [r4, #40]	; 0x28
   1d190:	movt	r0, #1
   1d194:	str	r2, [r4, #44]	; 0x2c
   1d198:	str	r0, [r4, #48]	; 0x30
   1d19c:	mov	r0, #0
   1d1a0:	pop	{r4, r5, fp, pc}

0001d1a4 <flatcc_builder_custom_reset@@Base>:
   1d1a4:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1d1a8:	add	fp, sp, #24
   1d1ac:	sub	sp, sp, #8
   1d1b0:	mov	r9, r2
   1d1b4:	mov	r8, r1
   1d1b8:	mov	r4, r0
   1d1bc:	add	r7, r0, #52	; 0x34
   1d1c0:	mov	r5, #0
   1d1c4:	ldr	r0, [r7]
   1d1c8:	cmp	r0, #0
   1d1cc:	beq	1d214 <flatcc_builder_custom_reset@@Base+0x70>
   1d1d0:	cmp	r9, #0
   1d1d4:	cmpne	r5, #5
   1d1d8:	beq	1d204 <flatcc_builder_custom_reset@@Base+0x60>
   1d1dc:	ldr	r0, [r4, #40]	; 0x28
   1d1e0:	ldr	r6, [r4, #48]	; 0x30
   1d1e4:	mov	r1, r7
   1d1e8:	mov	r2, #1
   1d1ec:	mov	r3, #1
   1d1f0:	str	r5, [sp]
   1d1f4:	blx	r6
   1d1f8:	cmp	r0, #0
   1d1fc:	bne	1d2b4 <flatcc_builder_custom_reset@@Base+0x110>
   1d200:	ldr	r0, [r7]
   1d204:	ldr	r2, [r7, #4]
   1d208:	mov	r1, #0
   1d20c:	bl	12f40 <memset@plt>
   1d210:	b	1d220 <flatcc_builder_custom_reset@@Base+0x7c>
   1d214:	ldr	r0, [r7, #4]
   1d218:	cmp	r0, #0
   1d21c:	bne	1d2c4 <flatcc_builder_custom_reset@@Base+0x120>
   1d220:	add	r5, r5, #1
   1d224:	add	r7, r7, #8
   1d228:	cmp	r5, #8
   1d22c:	bcc	1d1c4 <flatcc_builder_custom_reset@@Base+0x20>
   1d230:	mov	r0, #0
   1d234:	vmov.i32	q8, #0	; 0x00000000
   1d238:	mov	r5, #0
   1d23c:	str	r0, [r4, #120]	; 0x78
   1d240:	ldr	r1, [r4, #124]	; 0x7c
   1d244:	cmp	r1, #0
   1d248:	movne	r1, #16
   1d24c:	strne	r1, [r4, #124]	; 0x7c
   1d250:	add	r1, r4, #148	; 0x94
   1d254:	strh	r0, [r4, #128]	; 0x80
   1d258:	str	r0, [r4, #136]	; 0x88
   1d25c:	str	r0, [r4, #140]	; 0x8c
   1d260:	str	r0, [r4, #32]
   1d264:	cmp	r8, #0
   1d268:	vst1.32	{d16-d17}, [r1]
   1d26c:	ldr	r2, [r4, #60]	; 0x3c
   1d270:	ldr	r1, [r4, #52]	; 0x34
   1d274:	ldr	r3, [r4, #76]	; 0x4c
   1d278:	str	r2, [r4, #16]
   1d27c:	str	r0, [r4, #20]
   1d280:	str	r0, [r4, #24]
   1d284:	movne	r0, #0
   1d288:	str	r3, [r4]
   1d28c:	str	r1, [r4, #4]
   1d290:	strne	r0, [r4, #172]	; 0xac
   1d294:	strne	r0, [r4, #176]	; 0xb0
   1d298:	strne	r0, [r4, #180]	; 0xb4
   1d29c:	ldr	r0, [r4, #184]	; 0xb8
   1d2a0:	cmp	r0, #0
   1d2a4:	beq	1d2b8 <flatcc_builder_custom_reset@@Base+0x114>
   1d2a8:	add	r0, r4, #188	; 0xbc
   1d2ac:	bl	20e30 <flatcc_emitter_reset@@Base>
   1d2b0:	b	1d2b8 <flatcc_builder_custom_reset@@Base+0x114>
   1d2b4:	mvn	r5, #0
   1d2b8:	mov	r0, r5
   1d2bc:	sub	sp, fp, #24
   1d2c0:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1d2c4:	movw	r0, #24960	; 0x6180
   1d2c8:	movw	r1, #24978	; 0x6192
   1d2cc:	movw	r3, #25048	; 0x61d8
   1d2d0:	movw	r2, #434	; 0x1b2
   1d2d4:	movt	r0, #2
   1d2d8:	movt	r1, #2
   1d2dc:	movt	r3, #2
   1d2e0:	bl	12f88 <__assert_fail@plt>

0001d2e4 <flatcc_builder_reset@@Base>:
   1d2e4:	mov	r1, #0
   1d2e8:	mov	r2, #0
   1d2ec:	b	1d1a4 <flatcc_builder_custom_reset@@Base>

0001d2f0 <flatcc_builder_clear@@Base>:
   1d2f0:	push	{r4, r5, r6, r7, fp, lr}
   1d2f4:	add	fp, sp, #16
   1d2f8:	sub	sp, sp, #8
   1d2fc:	mov	r7, r0
   1d300:	add	r5, r0, #52	; 0x34
   1d304:	mov	r6, #0
   1d308:	ldr	r0, [r7, #40]	; 0x28
   1d30c:	ldr	r4, [r7, #48]	; 0x30
   1d310:	mov	r1, r5
   1d314:	mov	r2, #0
   1d318:	mov	r3, #0
   1d31c:	str	r6, [sp]
   1d320:	blx	r4
   1d324:	add	r6, r6, #1
   1d328:	add	r5, r5, #8
   1d32c:	cmp	r6, #8
   1d330:	bne	1d308 <flatcc_builder_clear@@Base+0x18>
   1d334:	ldr	r0, [r7, #184]	; 0xb8
   1d338:	cmp	r0, #0
   1d33c:	beq	1d348 <flatcc_builder_clear@@Base+0x58>
   1d340:	add	r0, r7, #188	; 0xbc
   1d344:	bl	20efc <flatcc_emitter_clear@@Base>
   1d348:	mov	r0, r7
   1d34c:	mov	r1, #0
   1d350:	mov	r2, #232	; 0xe8
   1d354:	sub	sp, fp, #16
   1d358:	pop	{r4, r5, r6, r7, fp, lr}
   1d35c:	b	12f40 <memset@plt>

0001d360 <flatcc_builder_enter_user_frame_ptr@@Base>:
   1d360:	push	{r4, r5, r6, r7, fp, lr}
   1d364:	add	fp, sp, #16
   1d368:	sub	sp, sp, #8
   1d36c:	mov	r4, r0
   1d370:	ldr	r0, [r0, #112]	; 0x70
   1d374:	add	r1, r1, #7
   1d378:	ldr	r7, [r4, #228]	; 0xe4
   1d37c:	bic	r5, r1, #3
   1d380:	add	r6, r4, #108	; 0x6c
   1d384:	add	r2, r7, r5
   1d388:	cmp	r2, r0
   1d38c:	bls	1d3b4 <flatcc_builder_enter_user_frame_ptr@@Base+0x54>
   1d390:	ldr	r0, [r4, #40]	; 0x28
   1d394:	ldr	ip, [r4, #48]	; 0x30
   1d398:	mov	r1, #7
   1d39c:	mov	r3, #0
   1d3a0:	str	r1, [sp]
   1d3a4:	mov	r1, r6
   1d3a8:	blx	ip
   1d3ac:	cmp	r0, #0
   1d3b0:	bne	1d400 <flatcc_builder_enter_user_frame_ptr@@Base+0xa0>
   1d3b4:	ldr	r0, [r6]
   1d3b8:	adds	r6, r0, r7
   1d3bc:	beq	1d3f0 <flatcc_builder_enter_user_frame_ptr@@Base+0x90>
   1d3c0:	mov	r0, r6
   1d3c4:	mov	r1, #0
   1d3c8:	mov	r2, r5
   1d3cc:	bl	12f40 <memset@plt>
   1d3d0:	ldr	r0, [r4, #224]	; 0xe0
   1d3d4:	str	r0, [r6], #4
   1d3d8:	ldr	r0, [r4, #228]	; 0xe4
   1d3dc:	add	r1, r0, #4
   1d3e0:	add	r0, r0, r5
   1d3e4:	str	r1, [r4, #224]	; 0xe0
   1d3e8:	str	r0, [r4, #228]	; 0xe4
   1d3ec:	b	1d3f4 <flatcc_builder_enter_user_frame_ptr@@Base+0x94>
   1d3f0:	mov	r6, #0
   1d3f4:	mov	r0, r6
   1d3f8:	sub	sp, fp, #16
   1d3fc:	pop	{r4, r5, r6, r7, fp, pc}
   1d400:	movw	r0, #29496	; 0x7338
   1d404:	movw	r1, #24978	; 0x6192
   1d408:	movw	r3, #29042	; 0x7172
   1d40c:	mov	r2, #308	; 0x134
   1d410:	movt	r0, #2
   1d414:	movt	r1, #2
   1d418:	movt	r3, #2
   1d41c:	bl	12f88 <__assert_fail@plt>

0001d420 <flatcc_builder_enter_user_frame@@Base>:
   1d420:	push	{r4, r5, r6, r7, fp, lr}
   1d424:	add	fp, sp, #16
   1d428:	sub	sp, sp, #8
   1d42c:	mov	r4, r0
   1d430:	ldr	r0, [r0, #112]	; 0x70
   1d434:	add	r1, r1, #7
   1d438:	ldr	r7, [r4, #228]	; 0xe4
   1d43c:	bic	r5, r1, #3
   1d440:	add	r6, r4, #108	; 0x6c
   1d444:	add	r2, r7, r5
   1d448:	cmp	r2, r0
   1d44c:	bls	1d474 <flatcc_builder_enter_user_frame@@Base+0x54>
   1d450:	ldr	r0, [r4, #40]	; 0x28
   1d454:	ldr	ip, [r4, #48]	; 0x30
   1d458:	mov	r1, #7
   1d45c:	mov	r3, #0
   1d460:	str	r1, [sp]
   1d464:	mov	r1, r6
   1d468:	blx	ip
   1d46c:	cmp	r0, #0
   1d470:	bne	1d4bc <flatcc_builder_enter_user_frame@@Base+0x9c>
   1d474:	ldr	r0, [r6]
   1d478:	adds	r6, r0, r7
   1d47c:	beq	1d4b0 <flatcc_builder_enter_user_frame@@Base+0x90>
   1d480:	mov	r0, r6
   1d484:	mov	r1, #0
   1d488:	mov	r2, r5
   1d48c:	bl	12f40 <memset@plt>
   1d490:	ldr	r0, [r4, #224]	; 0xe0
   1d494:	str	r0, [r6]
   1d498:	ldr	r1, [r4, #228]	; 0xe4
   1d49c:	add	r0, r1, #4
   1d4a0:	add	r1, r1, r5
   1d4a4:	str	r0, [r4, #224]	; 0xe0
   1d4a8:	str	r1, [r4, #228]	; 0xe4
   1d4ac:	b	1d4b4 <flatcc_builder_enter_user_frame@@Base+0x94>
   1d4b0:	mov	r0, #0
   1d4b4:	sub	sp, fp, #16
   1d4b8:	pop	{r4, r5, r6, r7, fp, pc}
   1d4bc:	movw	r0, #29496	; 0x7338
   1d4c0:	movw	r1, #24978	; 0x6192
   1d4c4:	movw	r3, #29042	; 0x7172
   1d4c8:	mov	r2, #308	; 0x134
   1d4cc:	movt	r0, #2
   1d4d0:	movt	r1, #2
   1d4d4:	movt	r3, #2
   1d4d8:	bl	12f88 <__assert_fail@plt>

0001d4dc <flatcc_builder_exit_user_frame@@Base>:
   1d4dc:	ldr	r1, [r0, #224]	; 0xe0
   1d4e0:	cmp	r1, #0
   1d4e4:	subne	r2, r1, #4
   1d4e8:	strne	r2, [r0, #228]	; 0xe4
   1d4ec:	ldrne	r2, [r0, #108]	; 0x6c
   1d4f0:	addne	r1, r2, r1
   1d4f4:	ldrne	r1, [r1, #-4]
   1d4f8:	strne	r1, [r0, #224]	; 0xe0
   1d4fc:	movne	r0, r1
   1d500:	bxne	lr
   1d504:	push	{fp, lr}
   1d508:	mov	fp, sp
   1d50c:	movw	r0, #25110	; 0x6216
   1d510:	movw	r1, #24978	; 0x6192
   1d514:	movw	r3, #25135	; 0x622f
   1d518:	movw	r2, #542	; 0x21e
   1d51c:	movt	r0, #2
   1d520:	movt	r1, #2
   1d524:	movt	r3, #2
   1d528:	bl	12f88 <__assert_fail@plt>

0001d52c <flatcc_builder_exit_user_frame_at@@Base>:
   1d52c:	ldr	r2, [r0, #224]	; 0xe0
   1d530:	cmp	r2, r1
   1d534:	bcc	1d540 <flatcc_builder_exit_user_frame_at@@Base+0x14>
   1d538:	str	r1, [r0, #224]	; 0xe0
   1d53c:	b	1d4dc <flatcc_builder_exit_user_frame@@Base>
   1d540:	push	{fp, lr}
   1d544:	mov	fp, sp
   1d548:	movw	r0, #25193	; 0x6269
   1d54c:	movw	r1, #24978	; 0x6192
   1d550:	movw	r3, #25224	; 0x6288
   1d554:	movw	r2, #551	; 0x227
   1d558:	movt	r0, #2
   1d55c:	movt	r1, #2
   1d560:	movt	r3, #2
   1d564:	bl	12f88 <__assert_fail@plt>

0001d568 <flatcc_builder_get_current_user_frame@@Base>:
   1d568:	ldr	r0, [r0, #224]	; 0xe0
   1d56c:	bx	lr

0001d570 <flatcc_builder_get_user_frame_ptr@@Base>:
   1d570:	ldr	r0, [r0, #108]	; 0x6c
   1d574:	add	r0, r0, r1
   1d578:	bx	lr

0001d57c <flatcc_builder_embed_buffer@@Base>:
   1d57c:	push	{r4, r5, r6, r7, fp, lr}
   1d580:	add	fp, sp, #16
   1d584:	sub	sp, sp, #88	; 0x58
   1d588:	mov	r4, r0
   1d58c:	ldr	r0, [fp, #8]
   1d590:	mov	r5, r3
   1d594:	mov	r7, r2
   1d598:	mov	r2, r1
   1d59c:	sub	r1, fp, #18
   1d5a0:	strh	r0, [fp, #-18]	; 0xffffffee
   1d5a4:	mov	r0, r4
   1d5a8:	ldr	r3, [r4, #152]	; 0x98
   1d5ac:	cmp	r3, #0
   1d5b0:	movwne	r3, #1
   1d5b4:	bl	1d6ec <flatcc_builder_embed_buffer@@Base+0x170>
   1d5b8:	ldr	r1, [fp, #12]
   1d5bc:	ldrh	r3, [fp, #-18]	; 0xffffffee
   1d5c0:	ldr	r0, [r4, #136]	; 0x88
   1d5c4:	mov	r2, #0
   1d5c8:	str	r2, [sp, #8]
   1d5cc:	str	r2, [sp, #12]
   1d5d0:	and	r1, r1, #2
   1d5d4:	sub	r3, r3, #1
   1d5d8:	add	r1, r5, r1, lsl #1
   1d5dc:	sub	r1, r0, r1
   1d5e0:	and	r3, r1, r3
   1d5e4:	add	r1, r3, r5
   1d5e8:	str	r1, [fp, #-24]	; 0xffffffe8
   1d5ec:	ldr	r1, [r4, #152]	; 0x98
   1d5f0:	cmp	r1, #0
   1d5f4:	mov	r1, #0
   1d5f8:	beq	1d618 <flatcc_builder_embed_buffer@@Base+0x9c>
   1d5fc:	sub	r1, fp, #24
   1d600:	mov	r2, #1
   1d604:	str	r1, [sp, #16]
   1d608:	mov	r1, #4
   1d60c:	str	r1, [sp, #8]
   1d610:	str	r1, [sp, #20]
   1d614:	str	r2, [sp, #12]
   1d618:	cmp	r5, #0
   1d61c:	beq	1d640 <flatcc_builder_embed_buffer@@Base+0xc4>
   1d620:	add	r6, sp, #8
   1d624:	add	r1, r1, r5
   1d628:	add	r6, r6, r2, lsl #3
   1d62c:	add	r2, r2, #1
   1d630:	str	r1, [sp, #8]
   1d634:	str	r7, [r6, #8]
   1d638:	str	r5, [r6, #12]
   1d63c:	str	r2, [sp, #12]
   1d640:	cmp	r3, #0
   1d644:	beq	1d670 <flatcc_builder_embed_buffer@@Base+0xf4>
   1d648:	add	r7, sp, #8
   1d64c:	movw	r6, #24448	; 0x5f80
   1d650:	add	r1, r1, r3
   1d654:	add	r7, r7, r2, lsl #3
   1d658:	add	r2, r2, #1
   1d65c:	movt	r6, #2
   1d660:	str	r1, [sp, #8]
   1d664:	str	r6, [r7, #8]
   1d668:	str	r3, [r7, #12]
   1d66c:	str	r2, [sp, #12]
   1d670:	cmp	r1, #0
   1d674:	ble	1d6cc <flatcc_builder_embed_buffer@@Base+0x150>
   1d678:	sub	r5, r0, r1
   1d67c:	ldr	r0, [r4, #36]	; 0x24
   1d680:	ldr	r7, [r4, #44]	; 0x2c
   1d684:	str	r1, [sp]
   1d688:	add	r1, sp, #8
   1d68c:	add	r1, r1, #8
   1d690:	mov	r3, r5
   1d694:	blx	r7
   1d698:	cmp	r0, #0
   1d69c:	streq	r5, [r4, #136]	; 0x88
   1d6a0:	moveq	r0, r5
   1d6a4:	subeq	sp, fp, #16
   1d6a8:	popeq	{r4, r5, r6, r7, fp, pc}
   1d6ac:	movw	r0, #29496	; 0x7338
   1d6b0:	movw	r1, #24978	; 0x6192
   1d6b4:	movw	r3, #29175	; 0x71f7
   1d6b8:	movw	r2, #651	; 0x28b
   1d6bc:	movt	r0, #2
   1d6c0:	movt	r1, #2
   1d6c4:	movt	r3, #2
   1d6c8:	bl	12f88 <__assert_fail@plt>
   1d6cc:	movw	r0, #29496	; 0x7338
   1d6d0:	movw	r1, #24978	; 0x6192
   1d6d4:	movw	r3, #29175	; 0x71f7
   1d6d8:	movw	r2, #647	; 0x287
   1d6dc:	movt	r0, #2
   1d6e0:	movt	r1, #2
   1d6e4:	movt	r3, #2
   1d6e8:	bl	12f88 <__assert_fail@plt>
   1d6ec:	push	{r4, sl, fp, lr}
   1d6f0:	add	fp, sp, #8
   1d6f4:	sub	sp, sp, #80	; 0x50
   1d6f8:	cmp	r2, #0
   1d6fc:	bne	1d70c <flatcc_builder_embed_buffer@@Base+0x190>
   1d700:	ldrh	r2, [r0, #132]	; 0x84
   1d704:	cmp	r2, #0
   1d708:	movweq	r2, #1
   1d70c:	ldrh	r4, [r1]
   1d710:	cmp	r4, #4
   1d714:	movwcc	r4, #4
   1d718:	cmpcs	r4, r2
   1d71c:	bcs	1d72c <flatcc_builder_embed_buffer@@Base+0x1b0>
   1d720:	cmp	r4, r2
   1d724:	movcc	r4, r2
   1d728:	strh	r4, [r1]
   1d72c:	cmp	r3, #0
   1d730:	bne	1d7a4 <flatcc_builder_embed_buffer@@Base+0x228>
   1d734:	ldr	r4, [r0, #140]	; 0x8c
   1d738:	sub	r1, r2, #1
   1d73c:	ands	r1, r4, r1
   1d740:	beq	1d7a4 <flatcc_builder_embed_buffer@@Base+0x228>
   1d744:	movw	r2, #24448	; 0x5f80
   1d748:	cmn	r1, #1
   1d74c:	movt	r2, #2
   1d750:	str	r2, [sp, #16]
   1d754:	mov	r2, #1
   1d758:	str	r1, [sp, #8]
   1d75c:	str	r1, [sp, #20]
   1d760:	str	r2, [sp, #12]
   1d764:	add	r2, r1, r4
   1d768:	str	r2, [r0, #140]	; 0x8c
   1d76c:	ble	1d7ac <flatcc_builder_embed_buffer@@Base+0x230>
   1d770:	ldr	r2, [r0, #36]	; 0x24
   1d774:	ldr	ip, [r0, #44]	; 0x2c
   1d778:	add	r0, sp, #8
   1d77c:	str	r1, [sp]
   1d780:	mov	r3, r4
   1d784:	add	r1, r0, #8
   1d788:	mov	r0, r2
   1d78c:	mov	r2, #1
   1d790:	blx	ip
   1d794:	cmp	r0, #0
   1d798:	bne	1d7cc <flatcc_builder_embed_buffer@@Base+0x250>
   1d79c:	cmn	r4, #1
   1d7a0:	beq	1d7ec <flatcc_builder_embed_buffer@@Base+0x270>
   1d7a4:	sub	sp, fp, #8
   1d7a8:	pop	{r4, sl, fp, pc}
   1d7ac:	movw	r0, #29496	; 0x7338
   1d7b0:	movw	r1, #24978	; 0x6192
   1d7b4:	movw	r3, #29363	; 0x72b3
   1d7b8:	movw	r2, #673	; 0x2a1
   1d7bc:	movt	r0, #2
   1d7c0:	movt	r1, #2
   1d7c4:	movt	r3, #2
   1d7c8:	bl	12f88 <__assert_fail@plt>
   1d7cc:	movw	r0, #29496	; 0x7338
   1d7d0:	movw	r1, #24978	; 0x6192
   1d7d4:	movw	r3, #29363	; 0x72b3
   1d7d8:	movw	r2, #677	; 0x2a5
   1d7dc:	movt	r0, #2
   1d7e0:	movt	r1, #2
   1d7e4:	movt	r3, #2
   1d7e8:	bl	12f88 <__assert_fail@plt>
   1d7ec:	movw	r0, #29496	; 0x7338
   1d7f0:	movw	r1, #24978	; 0x6192
   1d7f4:	movw	r3, #29109	; 0x71b5
   1d7f8:	movw	r2, #702	; 0x2be
   1d7fc:	movt	r0, #2
   1d800:	movt	r1, #2
   1d804:	movt	r3, #2
   1d808:	bl	12f88 <__assert_fail@plt>

0001d80c <flatcc_builder_create_buffer@@Base>:
   1d80c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d810:	add	fp, sp, #28
   1d814:	sub	sp, sp, #100	; 0x64
   1d818:	ldr	r8, [fp, #12]
   1d81c:	mov	r4, r0
   1d820:	ldr	r0, [fp, #8]
   1d824:	mov	r7, r1
   1d828:	mov	r5, #0
   1d82c:	mov	r9, r3
   1d830:	sub	r1, fp, #30
   1d834:	str	r5, [sp, #12]
   1d838:	and	r6, r8, #1
   1d83c:	strh	r0, [fp, #-30]	; 0xffffffe2
   1d840:	mov	r0, r4
   1d844:	mov	r3, r6
   1d848:	bl	1d6ec <flatcc_builder_embed_buffer@@Base+0x170>
   1d84c:	ldrh	r0, [r4, #128]	; 0x80
   1d850:	ldrh	r1, [fp, #-30]	; 0xffffffe2
   1d854:	cmp	r0, r1
   1d858:	strhcc	r1, [r4, #128]	; 0x80
   1d85c:	cmp	r7, #0
   1d860:	stmib	sp, {r6, r9}
   1d864:	beq	1d880 <flatcc_builder_create_buffer@@Base+0x74>
   1d868:	ldr	r5, [r7]
   1d86c:	cmp	r5, #0
   1d870:	str	r5, [sp, #12]
   1d874:	movwne	r5, #1
   1d878:	lsl	r7, r5, #2
   1d87c:	b	1d884 <flatcc_builder_create_buffer@@Base+0x78>
   1d880:	mov	r7, #0
   1d884:	ldr	r9, [r4, #136]	; 0x88
   1d888:	mov	sl, #4
   1d88c:	mvn	r6, #3
   1d890:	mov	r3, #0
   1d894:	ands	ip, r8, #3
   1d898:	and	r2, sl, r8, lsl #1
   1d89c:	str	r3, [sp, #20]
   1d8a0:	str	r3, [sp, #16]
   1d8a4:	sub	r2, r6, r2
   1d8a8:	sub	r6, r1, #1
   1d8ac:	mov	r1, #4
   1d8b0:	add	r2, r2, r9
   1d8b4:	sub	r2, r2, r7
   1d8b8:	beq	1d8dc <flatcc_builder_create_buffer@@Base+0xd0>
   1d8bc:	sub	r1, fp, #40	; 0x28
   1d8c0:	mov	r3, #1
   1d8c4:	str	r1, [sp, #24]
   1d8c8:	mov	r1, #4
   1d8cc:	str	r1, [sp, #16]
   1d8d0:	str	r1, [sp, #28]
   1d8d4:	mov	r1, #8
   1d8d8:	str	r3, [sp, #20]
   1d8dc:	add	lr, sp, #16
   1d8e0:	and	r6, r2, r6
   1d8e4:	sub	r0, fp, #36	; 0x24
   1d8e8:	str	r1, [sp, #16]
   1d8ec:	cmp	r5, #0
   1d8f0:	add	r2, lr, r3, lsl #3
   1d8f4:	str	r0, [r2, #8]
   1d8f8:	str	sl, [r2, #12]
   1d8fc:	add	r2, r3, #1
   1d900:	str	r2, [sp, #20]
   1d904:	beq	1d928 <flatcc_builder_create_buffer@@Base+0x11c>
   1d908:	add	r1, r1, r7
   1d90c:	add	r0, lr, r2, lsl #3
   1d910:	add	r2, sp, #12
   1d914:	str	r1, [sp, #16]
   1d918:	str	r2, [r0, #8]
   1d91c:	orr	r2, r3, #2
   1d920:	str	r7, [r0, #12]
   1d924:	str	r2, [sp, #20]
   1d928:	cmp	r6, #0
   1d92c:	beq	1d954 <flatcc_builder_create_buffer@@Base+0x148>
   1d930:	movw	r3, #24448	; 0x5f80
   1d934:	add	r1, r1, r6
   1d938:	add	r0, lr, r2, lsl #3
   1d93c:	add	r2, r2, #1
   1d940:	movt	r3, #2
   1d944:	str	r1, [sp, #16]
   1d948:	str	r3, [r0, #8]
   1d94c:	str	r6, [r0, #12]
   1d950:	str	r2, [sp, #20]
   1d954:	ldr	r5, [sp, #4]
   1d958:	sub	r7, r9, r1
   1d95c:	cmp	ip, #0
   1d960:	mov	r6, #144	; 0x90
   1d964:	ldr	r3, [sp, #8]
   1d968:	mov	r0, r7
   1d96c:	addne	r0, r0, #4
   1d970:	cmp	r5, #0
   1d974:	sub	r3, r3, r0
   1d978:	movweq	r6, #140	; 0x8c
   1d97c:	cmp	r1, #0
   1d980:	ldr	r6, [r4, r6]
   1d984:	str	r3, [fp, #-36]	; 0xffffffdc
   1d988:	sub	r0, r6, r0
   1d98c:	str	r0, [fp, #-40]	; 0xffffffd8
   1d990:	ble	1d9e8 <flatcc_builder_create_buffer@@Base+0x1dc>
   1d994:	ldr	r0, [r4, #36]	; 0x24
   1d998:	ldr	r6, [r4, #44]	; 0x2c
   1d99c:	str	r1, [sp]
   1d9a0:	add	r1, lr, #8
   1d9a4:	mov	r3, r7
   1d9a8:	blx	r6
   1d9ac:	cmp	r0, #0
   1d9b0:	bne	1da08 <flatcc_builder_create_buffer@@Base+0x1fc>
   1d9b4:	cmp	r7, #0
   1d9b8:	str	r7, [r4, #136]	; 0x88
   1d9bc:	movne	r0, r7
   1d9c0:	subne	sp, fp, #28
   1d9c4:	popne	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d9c8:	movw	r0, #29496	; 0x7338
   1d9cc:	movw	r1, #24978	; 0x6192
   1d9d0:	movw	r3, #25293	; 0x62cd
   1d9d4:	mov	r2, #772	; 0x304
   1d9d8:	movt	r0, #2
   1d9dc:	movt	r1, #2
   1d9e0:	movt	r3, #2
   1d9e4:	bl	12f88 <__assert_fail@plt>
   1d9e8:	movw	r0, #29496	; 0x7338
   1d9ec:	movw	r1, #24978	; 0x6192
   1d9f0:	movw	r3, #29175	; 0x71f7
   1d9f4:	movw	r2, #647	; 0x287
   1d9f8:	movt	r0, #2
   1d9fc:	movt	r1, #2
   1da00:	movt	r3, #2
   1da04:	bl	12f88 <__assert_fail@plt>
   1da08:	movw	r0, #29496	; 0x7338
   1da0c:	movw	r1, #24978	; 0x6192
   1da10:	movw	r3, #29175	; 0x71f7
   1da14:	movw	r2, #651	; 0x28b
   1da18:	movt	r0, #2
   1da1c:	movt	r1, #2
   1da20:	movt	r3, #2
   1da24:	bl	12f88 <__assert_fail@plt>

0001da28 <flatcc_builder_create_struct@@Base>:
   1da28:	push	{r4, r5, r6, sl, fp, lr}
   1da2c:	add	fp, sp, #16
   1da30:	sub	sp, sp, #80	; 0x50
   1da34:	cmp	r3, #0
   1da38:	beq	1db10 <flatcc_builder_create_struct@@Base+0xe8>
   1da3c:	mov	r5, r0
   1da40:	ldrh	r0, [r0, #128]	; 0x80
   1da44:	mov	r4, #0
   1da48:	cmp	r0, r3
   1da4c:	strhcc	r3, [r5, #128]	; 0x80
   1da50:	sub	r3, r3, #1
   1da54:	cmp	r2, #0
   1da58:	ldr	r0, [r5, #136]	; 0x88
   1da5c:	str	r4, [sp, #12]
   1da60:	str	r4, [sp, #8]
   1da64:	movne	r4, #1
   1da68:	strne	r1, [sp, #16]
   1da6c:	strne	r2, [sp, #8]
   1da70:	strne	r2, [sp, #20]
   1da74:	strne	r4, [sp, #12]
   1da78:	sub	r6, r0, r2
   1da7c:	and	r3, r6, r3
   1da80:	cmp	r3, #0
   1da84:	beq	1dab0 <flatcc_builder_create_struct@@Base+0x88>
   1da88:	add	r1, sp, #8
   1da8c:	movw	r6, #24448	; 0x5f80
   1da90:	add	r2, r3, r2
   1da94:	add	r1, r1, r4, lsl #3
   1da98:	add	r4, r4, #1
   1da9c:	movt	r6, #2
   1daa0:	str	r2, [sp, #8]
   1daa4:	str	r6, [r1, #8]
   1daa8:	str	r3, [r1, #12]
   1daac:	str	r4, [sp, #12]
   1dab0:	cmp	r2, #0
   1dab4:	ble	1db30 <flatcc_builder_create_struct@@Base+0x108>
   1dab8:	sub	r6, r0, r2
   1dabc:	ldr	r0, [r5, #36]	; 0x24
   1dac0:	ldr	ip, [r5, #44]	; 0x2c
   1dac4:	add	r1, sp, #8
   1dac8:	str	r2, [sp]
   1dacc:	mov	r2, r4
   1dad0:	add	r1, r1, #8
   1dad4:	mov	r3, r6
   1dad8:	blx	ip
   1dadc:	cmp	r0, #0
   1dae0:	streq	r6, [r5, #136]	; 0x88
   1dae4:	moveq	r0, r6
   1dae8:	subeq	sp, fp, #16
   1daec:	popeq	{r4, r5, r6, sl, fp, pc}
   1daf0:	movw	r0, #29496	; 0x7338
   1daf4:	movw	r1, #24978	; 0x6192
   1daf8:	movw	r3, #29175	; 0x71f7
   1dafc:	movw	r2, #651	; 0x28b
   1db00:	movt	r0, #2
   1db04:	movt	r1, #2
   1db08:	movt	r3, #2
   1db0c:	bl	12f88 <__assert_fail@plt>
   1db10:	movw	r0, #25424	; 0x6350
   1db14:	movw	r1, #24978	; 0x6192
   1db18:	movw	r3, #25435	; 0x635b
   1db1c:	movw	r2, #783	; 0x30f
   1db20:	movt	r0, #2
   1db24:	movt	r1, #2
   1db28:	movt	r3, #2
   1db2c:	bl	12f88 <__assert_fail@plt>
   1db30:	movw	r0, #29496	; 0x7338
   1db34:	movw	r1, #24978	; 0x6192
   1db38:	movw	r3, #29175	; 0x71f7
   1db3c:	movw	r2, #647	; 0x287
   1db40:	movt	r0, #2
   1db44:	movt	r1, #2
   1db48:	movt	r3, #2
   1db4c:	bl	12f88 <__assert_fail@plt>

0001db50 <flatcc_builder_start_buffer@@Base>:
   1db50:	push	{r4, r5, r6, r7, fp, lr}
   1db54:	add	fp, sp, #16
   1db58:	mov	r5, r1
   1db5c:	ldrh	r1, [r0, #128]	; 0x80
   1db60:	mov	r6, r3
   1db64:	mov	r7, r2
   1db68:	mov	r4, r0
   1db6c:	bl	1dc0c <flatcc_builder_start_buffer@@Base+0xbc>
   1db70:	mov	r1, r0
   1db74:	mvn	r0, #0
   1db78:	cmp	r1, #0
   1db7c:	popne	{r4, r5, r6, r7, fp, pc}
   1db80:	mov	r0, #1
   1db84:	cmp	r5, #0
   1db88:	strh	r0, [r4, #128]	; 0x80
   1db8c:	ldrh	r1, [r4, #132]	; 0x84
   1db90:	ldr	r2, [r4, #32]
   1db94:	strh	r1, [r2, #34]	; 0x22
   1db98:	strh	r7, [r4, #132]	; 0x84
   1db9c:	ldrh	r1, [r4, #164]	; 0xa4
   1dba0:	ldr	r2, [r4, #32]
   1dba4:	strh	r1, [r2, #32]
   1dba8:	strh	r6, [r4, #164]	; 0xa4
   1dbac:	ldr	r1, [r4, #32]
   1dbb0:	ldr	r2, [r4, #144]	; 0x90
   1dbb4:	str	r2, [r1, #20]
   1dbb8:	ldr	r1, [r4, #32]
   1dbbc:	ldr	r2, [r4, #152]	; 0x98
   1dbc0:	str	r2, [r1, #28]
   1dbc4:	ldr	r3, [r4, #148]	; 0x94
   1dbc8:	ldr	r1, [r4, #32]
   1dbcc:	ldr	r2, [r4, #136]	; 0x88
   1dbd0:	ldr	r7, [r4, #168]	; 0xa8
   1dbd4:	add	r6, r3, #1
   1dbd8:	str	r2, [r4, #144]	; 0x90
   1dbdc:	str	r6, [r4, #148]	; 0x94
   1dbe0:	str	r3, [r4, #152]	; 0x98
   1dbe4:	str	r7, [r1, #16]
   1dbe8:	movw	r1, #24448	; 0x5f80
   1dbec:	movt	r1, #2
   1dbf0:	movne	r1, r5
   1dbf4:	ldr	r1, [r1]
   1dbf8:	str	r1, [r4, #168]	; 0xa8
   1dbfc:	ldr	r1, [r4, #32]
   1dc00:	strh	r0, [r1, #14]
   1dc04:	mov	r0, #0
   1dc08:	pop	{r4, r5, r6, r7, fp, pc}
   1dc0c:	push	{r4, r5, r6, r7, fp, lr}
   1dc10:	add	fp, sp, #16
   1dc14:	sub	sp, sp, #8
   1dc18:	mov	r5, r1
   1dc1c:	ldr	r1, [r0, #156]	; 0x9c
   1dc20:	ldr	r2, [r0, #160]	; 0xa0
   1dc24:	mov	r4, r0
   1dc28:	add	r0, r1, #1
   1dc2c:	cmp	r1, r2
   1dc30:	str	r0, [r4, #156]	; 0x9c
   1dc34:	bge	1dc48 <flatcc_builder_start_buffer@@Base+0xf8>
   1dc38:	ldr	r0, [r4, #32]
   1dc3c:	add	r0, r0, #36	; 0x24
   1dc40:	str	r0, [r4, #32]
   1dc44:	b	1dcdc <flatcc_builder_start_buffer@@Base+0x18c>
   1dc48:	ldr	r2, [r4, #176]	; 0xb0
   1dc4c:	mvn	r6, #0
   1dc50:	cmp	r2, #1
   1dc54:	cmpge	r1, r2
   1dc58:	bge	1dd14 <flatcc_builder_start_buffer@@Base+0x1c4>
   1dc5c:	add	r7, r0, r0, lsl #3
   1dc60:	ldr	r0, [r4, #88]	; 0x58
   1dc64:	lsl	r2, r7, #2
   1dc68:	cmp	r2, r0
   1dc6c:	bls	1dc94 <flatcc_builder_start_buffer@@Base+0x144>
   1dc70:	ldr	r0, [r4, #40]	; 0x28
   1dc74:	ldr	ip, [r4, #48]	; 0x30
   1dc78:	mov	r3, #4
   1dc7c:	add	r1, r4, #84	; 0x54
   1dc80:	str	r3, [sp]
   1dc84:	mov	r3, #0
   1dc88:	blx	ip
   1dc8c:	cmp	r0, #0
   1dc90:	bne	1dd20 <flatcc_builder_start_buffer@@Base+0x1d0>
   1dc94:	ldr	r1, [r4, #84]	; 0x54
   1dc98:	mvn	r0, #35	; 0x23
   1dc9c:	add	r0, r0, r7, lsl #2
   1dca0:	adds	r0, r0, r1
   1dca4:	str	r0, [r4, #32]
   1dca8:	beq	1dd14 <flatcc_builder_start_buffer@@Base+0x1c4>
   1dcac:	ldr	r1, [r4, #88]	; 0x58
   1dcb0:	movw	r3, #36409	; 0x8e39
   1dcb4:	ldr	r2, [r4, #176]	; 0xb0
   1dcb8:	movt	r3, #14563	; 0x38e3
   1dcbc:	umull	r1, r3, r1, r3
   1dcc0:	lsr	r1, r3, #3
   1dcc4:	cmp	r2, r3, lsr #3
   1dcc8:	mov	r3, r1
   1dccc:	movlt	r3, r2
   1dcd0:	cmp	r2, #0
   1dcd4:	movle	r3, r1
   1dcd8:	str	r3, [r4, #160]	; 0xa0
   1dcdc:	ldr	r1, [r4, #20]
   1dce0:	mvn	r3, #3
   1dce4:	mov	r6, #0
   1dce8:	str	r1, [r0, #8]
   1dcec:	ldrh	r2, [r4, #130]	; 0x82
   1dcf0:	strh	r2, [r0, #12]
   1dcf4:	strh	r5, [r4, #130]	; 0x82
   1dcf8:	ldr	r2, [r4, #28]
   1dcfc:	stm	r0, {r2, r3}
   1dd00:	add	r0, r1, r2
   1dd04:	str	r6, [r4, #20]
   1dd08:	add	r0, r0, #7
   1dd0c:	bic	r0, r0, #7
   1dd10:	str	r0, [r4, #28]
   1dd14:	mov	r0, r6
   1dd18:	sub	sp, fp, #16
   1dd1c:	pop	{r4, r5, r6, r7, fp, pc}
   1dd20:	movw	r0, #29496	; 0x7338
   1dd24:	movw	r1, #24978	; 0x6192
   1dd28:	movw	r3, #29042	; 0x7172
   1dd2c:	mov	r2, #308	; 0x134
   1dd30:	movt	r0, #2
   1dd34:	movt	r1, #2
   1dd38:	movt	r3, #2
   1dd3c:	bl	12f88 <__assert_fail@plt>

0001dd40 <flatcc_builder_end_buffer@@Base>:
   1dd40:	push	{r4, r5, r6, sl, fp, lr}
   1dd44:	add	fp, sp, #16
   1dd48:	sub	sp, sp, #8
   1dd4c:	mov	r4, r0
   1dd50:	ldr	r0, [r0, #32]
   1dd54:	ldrh	r0, [r0, #14]
   1dd58:	cmp	r0, #1
   1dd5c:	bne	1de50 <flatcc_builder_end_buffer@@Base+0x110>
   1dd60:	mov	r3, r1
   1dd64:	ldr	r1, [r4, #152]	; 0x98
   1dd68:	ldrh	r0, [r4, #164]	; 0xa4
   1dd6c:	ldrh	r2, [r4, #132]	; 0x84
   1dd70:	cmp	r1, #0
   1dd74:	ldrh	r1, [r4, #128]	; 0x80
   1dd78:	and	r0, r0, #2
   1dd7c:	orrne	r0, r0, #1
   1dd80:	cmp	r1, r2
   1dd84:	movcc	r1, r2
   1dd88:	strhcc	r2, [r4, #128]	; 0x80
   1dd8c:	str	r0, [sp, #4]
   1dd90:	mov	r0, r4
   1dd94:	str	r1, [sp]
   1dd98:	add	r1, r4, #168	; 0xa8
   1dd9c:	bl	1d80c <flatcc_builder_create_buffer@@Base>
   1dda0:	mov	r6, r0
   1dda4:	cmp	r0, #0
   1dda8:	beq	1de44 <flatcc_builder_end_buffer@@Base+0x104>
   1ddac:	ldr	r1, [r4, #32]
   1ddb0:	ldr	r0, [r4, #16]
   1ddb4:	ldr	r2, [r4, #20]
   1ddb8:	ldr	r3, [r1, #20]
   1ddbc:	str	r3, [r4, #144]	; 0x90
   1ddc0:	ldr	r3, [r1, #28]
   1ddc4:	str	r3, [r4, #152]	; 0x98
   1ddc8:	ldr	r3, [r1, #16]
   1ddcc:	str	r3, [r4, #168]	; 0xa8
   1ddd0:	ldrh	r1, [r1, #32]
   1ddd4:	strh	r1, [r4, #164]	; 0xa4
   1ddd8:	mov	r1, #0
   1dddc:	bl	12f40 <memset@plt>
   1dde0:	ldr	r0, [r4, #32]
   1dde4:	ldr	r1, [r4, #60]	; 0x3c
   1dde8:	ldr	r2, [r4, #64]	; 0x40
   1ddec:	ldr	r3, [r0, #8]
   1ddf0:	str	r3, [r4, #20]
   1ddf4:	ldr	r3, [r0]
   1ddf8:	str	r3, [r4, #28]
   1ddfc:	add	r1, r1, r3
   1de00:	ldr	r5, [r0, #4]
   1de04:	str	r1, [r4, #16]
   1de08:	sub	r1, r2, r3
   1de0c:	cmp	r1, r5
   1de10:	movhi	r1, r5
   1de14:	str	r1, [r4, #24]
   1de18:	ldrh	r1, [r4, #130]	; 0x82
   1de1c:	ldrh	r2, [r4, #128]	; 0x80
   1de20:	cmp	r2, r1
   1de24:	strhcc	r1, [r4, #128]	; 0x80
   1de28:	ldrh	r1, [r0, #12]
   1de2c:	sub	r0, r0, #36	; 0x24
   1de30:	str	r0, [r4, #32]
   1de34:	strh	r1, [r4, #130]	; 0x82
   1de38:	ldr	r0, [r4, #156]	; 0x9c
   1de3c:	sub	r0, r0, #1
   1de40:	str	r0, [r4, #156]	; 0x9c
   1de44:	mov	r0, r6
   1de48:	sub	sp, fp, #16
   1de4c:	pop	{r4, r5, r6, sl, fp, pc}
   1de50:	movw	r0, #25537	; 0x63c1
   1de54:	movw	r1, #24978	; 0x6192
   1de58:	movw	r3, #25581	; 0x63ed
   1de5c:	movw	r2, #838	; 0x346
   1de60:	movt	r0, #2
   1de64:	movt	r1, #2
   1de68:	movt	r3, #2
   1de6c:	bl	12f88 <__assert_fail@plt>

0001de70 <flatcc_builder_start_struct@@Base>:
   1de70:	push	{r4, r5, r6, r7, fp, lr}
   1de74:	add	fp, sp, #16
   1de78:	mov	r6, r1
   1de7c:	mov	r1, r2
   1de80:	mov	r4, r0
   1de84:	bl	1dc0c <flatcc_builder_start_buffer@@Base+0xbc>
   1de88:	mov	r5, #0
   1de8c:	cmp	r0, #0
   1de90:	bne	1df00 <flatcc_builder_start_struct@@Base+0x90>
   1de94:	ldr	r1, [r4, #32]
   1de98:	mov	r0, #2
   1de9c:	strh	r0, [r1, #14]
   1dea0:	ldr	r2, [r4, #28]
   1dea4:	ldr	r0, [r4, #60]	; 0x3c
   1dea8:	ldr	r3, [r4, #64]	; 0x40
   1deac:	add	r0, r0, r2
   1deb0:	sub	r2, r3, r2
   1deb4:	mvn	r3, #3
   1deb8:	cmn	r2, #4
   1debc:	str	r0, [r4, #16]
   1dec0:	movcs	r2, r3
   1dec4:	str	r2, [r4, #24]
   1dec8:	str	r3, [r1, #4]
   1decc:	ldr	r7, [r4, #20]
   1ded0:	add	r1, r7, r6
   1ded4:	cmp	r1, r2
   1ded8:	str	r1, [r4, #20]
   1dedc:	bcc	1defc <flatcc_builder_start_struct@@Base+0x8c>
   1dee0:	add	r1, r1, #1
   1dee4:	mov	r0, r4
   1dee8:	mvn	r2, #3
   1deec:	bl	20d5c <flatcc_builder_get_emit_context@@Base+0x8>
   1def0:	cmp	r0, #0
   1def4:	bne	1df00 <flatcc_builder_start_struct@@Base+0x90>
   1def8:	ldr	r0, [r4, #16]
   1defc:	add	r5, r0, r7
   1df00:	mov	r0, r5
   1df04:	pop	{r4, r5, r6, r7, fp, pc}

0001df08 <flatcc_builder_struct_edit@@Base>:
   1df08:	ldr	r0, [r0, #16]
   1df0c:	bx	lr

0001df10 <flatcc_builder_end_struct@@Base>:
   1df10:	push	{r4, r5, fp, lr}
   1df14:	add	fp, sp, #8
   1df18:	mov	r4, r0
   1df1c:	ldr	r0, [r0, #32]
   1df20:	ldrh	r0, [r0, #14]
   1df24:	cmp	r0, #2
   1df28:	bne	1dfc8 <flatcc_builder_end_struct@@Base+0xb8>
   1df2c:	ldrh	r3, [r4, #130]	; 0x82
   1df30:	ldr	r1, [r4, #16]
   1df34:	ldr	r2, [r4, #20]
   1df38:	mov	r0, r4
   1df3c:	bl	1da28 <flatcc_builder_create_struct@@Base>
   1df40:	mov	r5, r0
   1df44:	cmp	r0, #0
   1df48:	beq	1dfc0 <flatcc_builder_end_struct@@Base+0xb0>
   1df4c:	ldr	r0, [r4, #16]
   1df50:	ldr	r2, [r4, #20]
   1df54:	mov	r1, #0
   1df58:	bl	12f40 <memset@plt>
   1df5c:	ldr	r0, [r4, #32]
   1df60:	ldr	r1, [r4, #60]	; 0x3c
   1df64:	ldr	ip, [r4, #64]	; 0x40
   1df68:	ldr	r3, [r0, #8]
   1df6c:	str	r3, [r4, #20]
   1df70:	ldr	r3, [r0]
   1df74:	str	r3, [r4, #28]
   1df78:	add	r1, r1, r3
   1df7c:	ldr	r2, [r0, #4]
   1df80:	str	r1, [r4, #16]
   1df84:	sub	r1, ip, r3
   1df88:	cmp	r1, r2
   1df8c:	movhi	r1, r2
   1df90:	str	r1, [r4, #24]
   1df94:	ldrh	r1, [r4, #130]	; 0x82
   1df98:	ldrh	r2, [r4, #128]	; 0x80
   1df9c:	cmp	r2, r1
   1dfa0:	strhcc	r1, [r4, #128]	; 0x80
   1dfa4:	ldrh	r1, [r0, #12]
   1dfa8:	sub	r0, r0, #36	; 0x24
   1dfac:	str	r0, [r4, #32]
   1dfb0:	strh	r1, [r4, #130]	; 0x82
   1dfb4:	ldr	r0, [r4, #156]	; 0x9c
   1dfb8:	sub	r0, r0, #1
   1dfbc:	str	r0, [r4, #156]	; 0x9c
   1dfc0:	mov	r0, r5
   1dfc4:	pop	{r4, r5, fp, pc}
   1dfc8:	movw	r0, #25670	; 0x6446
   1dfcc:	movw	r1, #24978	; 0x6192
   1dfd0:	movw	r3, #25714	; 0x6472
   1dfd4:	mov	r2, #872	; 0x368
   1dfd8:	movt	r0, #2
   1dfdc:	movt	r1, #2
   1dfe0:	movt	r3, #2
   1dfe4:	bl	12f88 <__assert_fail@plt>

0001dfe8 <flatcc_builder_extend_vector@@Base>:
   1dfe8:	push	{r4, r5, fp, lr}
   1dfec:	add	fp, sp, #8
   1dff0:	mov	r4, r0
   1dff4:	ldr	r0, [r0, #32]
   1dff8:	ldr	r2, [r0, #20]
   1dffc:	adds	r2, r2, r1
   1e000:	bcs	1e060 <flatcc_builder_extend_vector@@Base+0x78>
   1e004:	ldr	r3, [r0, #24]
   1e008:	cmp	r2, r3
   1e00c:	bhi	1e060 <flatcc_builder_extend_vector@@Base+0x78>
   1e010:	str	r2, [r0, #20]
   1e014:	ldr	r0, [r4, #32]
   1e018:	ldr	r5, [r4, #20]
   1e01c:	ldr	r2, [r4, #24]
   1e020:	ldr	r0, [r0, #16]
   1e024:	mla	r0, r0, r1, r5
   1e028:	cmp	r0, r2
   1e02c:	str	r0, [r4, #20]
   1e030:	bcc	1e054 <flatcc_builder_extend_vector@@Base+0x6c>
   1e034:	add	r1, r0, #1
   1e038:	mov	r0, r4
   1e03c:	mvn	r2, #3
   1e040:	bl	20d5c <flatcc_builder_get_emit_context@@Base+0x8>
   1e044:	mov	r1, r0
   1e048:	mov	r0, #0
   1e04c:	cmp	r1, #0
   1e050:	popne	{r4, r5, fp, pc}
   1e054:	ldr	r0, [r4, #16]
   1e058:	add	r0, r0, r5
   1e05c:	pop	{r4, r5, fp, pc}
   1e060:	movw	r0, #29249	; 0x7241
   1e064:	movw	r1, #24978	; 0x6192
   1e068:	movw	r3, #29276	; 0x725c
   1e06c:	mov	r2, #892	; 0x37c
   1e070:	movt	r0, #2
   1e074:	movt	r1, #2
   1e078:	movt	r3, #2
   1e07c:	bl	12f88 <__assert_fail@plt>

0001e080 <flatcc_builder_vector_push@@Base>:
   1e080:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1e084:	add	fp, sp, #24
   1e088:	mov	r5, r0
   1e08c:	ldr	r0, [r0, #32]
   1e090:	mov	r8, r1
   1e094:	ldrh	r1, [r0, #14]
   1e098:	cmp	r1, #4
   1e09c:	bne	1e120 <flatcc_builder_vector_push@@Base+0xa0>
   1e0a0:	ldr	r1, [r0, #20]
   1e0a4:	ldr	r2, [r0, #24]
   1e0a8:	cmp	r1, r2
   1e0ac:	bhi	1e140 <flatcc_builder_vector_push@@Base+0xc0>
   1e0b0:	add	r1, r1, #1
   1e0b4:	str	r1, [r0, #20]
   1e0b8:	ldr	r0, [r5, #32]
   1e0bc:	ldr	r4, [r5, #20]
   1e0c0:	ldr	r1, [r5, #24]
   1e0c4:	ldr	r6, [r0, #16]
   1e0c8:	add	r0, r4, r6
   1e0cc:	cmp	r0, r1
   1e0d0:	str	r0, [r5, #20]
   1e0d4:	bcc	1e0f4 <flatcc_builder_vector_push@@Base+0x74>
   1e0d8:	add	r1, r0, #1
   1e0dc:	mov	r0, r5
   1e0e0:	mvn	r2, #3
   1e0e4:	bl	20d5c <flatcc_builder_get_emit_context@@Base+0x8>
   1e0e8:	mov	r7, #0
   1e0ec:	cmp	r0, #0
   1e0f0:	bne	1e118 <flatcc_builder_vector_push@@Base+0x98>
   1e0f4:	ldr	r0, [r5, #16]
   1e0f8:	adds	r7, r0, r4
   1e0fc:	beq	1e114 <flatcc_builder_vector_push@@Base+0x94>
   1e100:	mov	r0, r7
   1e104:	mov	r1, r8
   1e108:	mov	r2, r6
   1e10c:	bl	12eb0 <memcpy@plt>
   1e110:	b	1e118 <flatcc_builder_vector_push@@Base+0x98>
   1e114:	mov	r7, #0
   1e118:	mov	r0, r7
   1e11c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1e120:	movw	r0, #25781	; 0x64b5
   1e124:	movw	r1, #24978	; 0x6192
   1e128:	movw	r3, #25825	; 0x64e1
   1e12c:	movw	r2, #907	; 0x38b
   1e130:	movt	r0, #2
   1e134:	movt	r1, #2
   1e138:	movt	r3, #2
   1e13c:	bl	12f88 <__assert_fail@plt>
   1e140:	movw	r0, #25892	; 0x6524
   1e144:	movw	r1, #24978	; 0x6192
   1e148:	movw	r3, #25825	; 0x64e1
   1e14c:	mov	r2, #908	; 0x38c
   1e150:	movt	r0, #2
   1e154:	movt	r1, #2
   1e158:	movt	r3, #2
   1e15c:	bl	12f88 <__assert_fail@plt>

0001e160 <flatcc_builder_append_vector@@Base>:
   1e160:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1e164:	add	fp, sp, #24
   1e168:	mov	r6, r0
   1e16c:	ldr	r0, [r0, #32]
   1e170:	mov	r8, r1
   1e174:	ldrh	r1, [r0, #14]
   1e178:	cmp	r1, #4
   1e17c:	bne	1e228 <flatcc_builder_append_vector@@Base+0xc8>
   1e180:	ldr	r1, [r0, #20]
   1e184:	mov	r9, r2
   1e188:	adds	r1, r1, r2
   1e18c:	bcs	1e208 <flatcc_builder_append_vector@@Base+0xa8>
   1e190:	ldr	r2, [r0, #24]
   1e194:	cmp	r1, r2
   1e198:	bhi	1e208 <flatcc_builder_append_vector@@Base+0xa8>
   1e19c:	str	r1, [r0, #20]
   1e1a0:	ldr	r0, [r6, #32]
   1e1a4:	ldr	r4, [r6, #20]
   1e1a8:	ldr	r1, [r6, #24]
   1e1ac:	ldr	r5, [r0, #16]
   1e1b0:	mla	r0, r5, r9, r4
   1e1b4:	cmp	r0, r1
   1e1b8:	str	r0, [r6, #20]
   1e1bc:	bcc	1e1dc <flatcc_builder_append_vector@@Base+0x7c>
   1e1c0:	add	r1, r0, #1
   1e1c4:	mov	r0, r6
   1e1c8:	mvn	r2, #3
   1e1cc:	bl	20d5c <flatcc_builder_get_emit_context@@Base+0x8>
   1e1d0:	mov	r7, #0
   1e1d4:	cmp	r0, #0
   1e1d8:	bne	1e200 <flatcc_builder_append_vector@@Base+0xa0>
   1e1dc:	ldr	r0, [r6, #16]
   1e1e0:	adds	r7, r0, r4
   1e1e4:	beq	1e1fc <flatcc_builder_append_vector@@Base+0x9c>
   1e1e8:	mul	r2, r5, r9
   1e1ec:	mov	r0, r7
   1e1f0:	mov	r1, r8
   1e1f4:	bl	12eb0 <memcpy@plt>
   1e1f8:	b	1e200 <flatcc_builder_append_vector@@Base+0xa0>
   1e1fc:	mov	r7, #0
   1e200:	mov	r0, r7
   1e204:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1e208:	movw	r0, #29249	; 0x7241
   1e20c:	movw	r1, #24978	; 0x6192
   1e210:	movw	r3, #29276	; 0x725c
   1e214:	mov	r2, #892	; 0x37c
   1e218:	movt	r0, #2
   1e21c:	movt	r1, #2
   1e220:	movt	r3, #2
   1e224:	bl	12f88 <__assert_fail@plt>
   1e228:	movw	r0, #25781	; 0x64b5
   1e22c:	movw	r1, #24978	; 0x6192
   1e230:	movw	r3, #25953	; 0x6561
   1e234:	movw	r2, #915	; 0x393
   1e238:	movt	r0, #2
   1e23c:	movt	r1, #2
   1e240:	movt	r3, #2
   1e244:	bl	12f88 <__assert_fail@plt>

0001e248 <flatcc_builder_extend_offset_vector@@Base>:
   1e248:	push	{r4, r5, fp, lr}
   1e24c:	add	fp, sp, #8
   1e250:	mov	r4, r0
   1e254:	ldr	r0, [r0, #32]
   1e258:	ldr	r2, [r0, #20]
   1e25c:	adds	r2, r2, r1
   1e260:	cmpcc	r2, #1073741824	; 0x40000000
   1e264:	bcc	1e288 <flatcc_builder_extend_offset_vector@@Base+0x40>
   1e268:	movw	r0, #29249	; 0x7241
   1e26c:	movw	r1, #24978	; 0x6192
   1e270:	movw	r3, #29276	; 0x725c
   1e274:	mov	r2, #892	; 0x37c
   1e278:	movt	r0, #2
   1e27c:	movt	r1, #2
   1e280:	movt	r3, #2
   1e284:	bl	12f88 <__assert_fail@plt>
   1e288:	str	r2, [r0, #20]
   1e28c:	ldr	r5, [r4, #20]
   1e290:	ldr	r2, [r4, #24]
   1e294:	add	r0, r5, r1, lsl #2
   1e298:	cmp	r0, r2
   1e29c:	str	r0, [r4, #20]
   1e2a0:	bcc	1e2c4 <flatcc_builder_extend_offset_vector@@Base+0x7c>
   1e2a4:	add	r1, r0, #1
   1e2a8:	mov	r0, r4
   1e2ac:	mvn	r2, #3
   1e2b0:	bl	20d5c <flatcc_builder_get_emit_context@@Base+0x8>
   1e2b4:	mov	r1, r0
   1e2b8:	mov	r0, #0
   1e2bc:	cmp	r1, #0
   1e2c0:	popne	{r4, r5, fp, pc}
   1e2c4:	ldr	r0, [r4, #16]
   1e2c8:	add	r0, r0, r5
   1e2cc:	pop	{r4, r5, fp, pc}

0001e2d0 <flatcc_builder_offset_vector_push@@Base>:
   1e2d0:	push	{r4, r5, r6, r7, fp, lr}
   1e2d4:	add	fp, sp, #16
   1e2d8:	mov	r6, r0
   1e2dc:	ldr	r0, [r0, #32]
   1e2e0:	mov	r4, r1
   1e2e4:	ldrh	r1, [r0, #14]
   1e2e8:	cmp	r1, #5
   1e2ec:	bne	1e350 <flatcc_builder_offset_vector_push@@Base+0x80>
   1e2f0:	ldr	r1, [r0, #20]
   1e2f4:	mov	r5, #0
   1e2f8:	cmn	r1, #-1073741823	; 0xc0000001
   1e2fc:	beq	1e348 <flatcc_builder_offset_vector_push@@Base+0x78>
   1e300:	add	r1, r1, #1
   1e304:	str	r1, [r0, #20]
   1e308:	ldr	r7, [r6, #20]
   1e30c:	ldr	r0, [r6, #24]
   1e310:	add	r1, r7, #4
   1e314:	cmp	r1, r0
   1e318:	str	r1, [r6, #20]
   1e31c:	bcc	1e338 <flatcc_builder_offset_vector_push@@Base+0x68>
   1e320:	add	r1, r7, #5
   1e324:	mov	r0, r6
   1e328:	mvn	r2, #3
   1e32c:	bl	20d5c <flatcc_builder_get_emit_context@@Base+0x8>
   1e330:	cmp	r0, #0
   1e334:	bne	1e348 <flatcc_builder_offset_vector_push@@Base+0x78>
   1e338:	ldr	r0, [r6, #16]
   1e33c:	adds	r0, r0, r7
   1e340:	movne	r5, r0
   1e344:	strne	r4, [r0]
   1e348:	mov	r0, r5
   1e34c:	pop	{r4, r5, r6, r7, fp, pc}
   1e350:	movw	r0, #26030	; 0x65ae
   1e354:	movw	r1, #24978	; 0x6192
   1e358:	movw	r3, #26081	; 0x65e1
   1e35c:	movw	r2, #934	; 0x3a6
   1e360:	movt	r0, #2
   1e364:	movt	r1, #2
   1e368:	movt	r3, #2
   1e36c:	bl	12f88 <__assert_fail@plt>

0001e370 <flatcc_builder_append_offset_vector@@Base>:
   1e370:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1e374:	add	fp, sp, #24
   1e378:	mov	r6, r0
   1e37c:	ldr	r0, [r0, #32]
   1e380:	mov	r8, r1
   1e384:	ldrh	r1, [r0, #14]
   1e388:	cmp	r1, #5
   1e38c:	bne	1e428 <flatcc_builder_append_offset_vector@@Base+0xb8>
   1e390:	ldr	r1, [r0, #20]
   1e394:	mov	r5, r2
   1e398:	adds	r1, r1, r2
   1e39c:	cmpcc	r1, #1073741824	; 0x40000000
   1e3a0:	bcc	1e3c4 <flatcc_builder_append_offset_vector@@Base+0x54>
   1e3a4:	movw	r0, #29249	; 0x7241
   1e3a8:	movw	r1, #24978	; 0x6192
   1e3ac:	movw	r3, #29276	; 0x725c
   1e3b0:	mov	r2, #892	; 0x37c
   1e3b4:	movt	r0, #2
   1e3b8:	movt	r1, #2
   1e3bc:	movt	r3, #2
   1e3c0:	bl	12f88 <__assert_fail@plt>
   1e3c4:	str	r1, [r0, #20]
   1e3c8:	ldr	r4, [r6, #20]
   1e3cc:	ldr	r1, [r6, #24]
   1e3d0:	add	r0, r4, r5, lsl #2
   1e3d4:	cmp	r0, r1
   1e3d8:	str	r0, [r6, #20]
   1e3dc:	bcc	1e3fc <flatcc_builder_append_offset_vector@@Base+0x8c>
   1e3e0:	add	r1, r0, #1
   1e3e4:	mov	r0, r6
   1e3e8:	mvn	r2, #3
   1e3ec:	bl	20d5c <flatcc_builder_get_emit_context@@Base+0x8>
   1e3f0:	mov	r7, #0
   1e3f4:	cmp	r0, #0
   1e3f8:	bne	1e420 <flatcc_builder_append_offset_vector@@Base+0xb0>
   1e3fc:	ldr	r0, [r6, #16]
   1e400:	adds	r7, r0, r4
   1e404:	beq	1e41c <flatcc_builder_append_offset_vector@@Base+0xac>
   1e408:	lsl	r2, r5, #2
   1e40c:	mov	r0, r7
   1e410:	mov	r1, r8
   1e414:	bl	12eb0 <memcpy@plt>
   1e418:	b	1e420 <flatcc_builder_append_offset_vector@@Base+0xb0>
   1e41c:	mov	r7, #0
   1e420:	mov	r0, r7
   1e424:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1e428:	movw	r0, #26030	; 0x65ae
   1e42c:	movw	r1, #24978	; 0x6192
   1e430:	movw	r3, #26179	; 0x6643
   1e434:	mov	r2, #948	; 0x3b4
   1e438:	movt	r0, #2
   1e43c:	movt	r1, #2
   1e440:	movt	r3, #2
   1e444:	bl	12f88 <__assert_fail@plt>

0001e448 <flatcc_builder_extend_string@@Base>:
   1e448:	push	{r4, r5, fp, lr}
   1e44c:	add	fp, sp, #8
   1e450:	mov	r4, r0
   1e454:	ldr	r0, [r0, #32]
   1e458:	ldrh	r2, [r0, #14]
   1e45c:	cmp	r2, #6
   1e460:	bne	1e4b8 <flatcc_builder_extend_string@@Base+0x70>
   1e464:	ldr	r2, [r0, #20]
   1e468:	adds	r2, r2, r1
   1e46c:	bcs	1e4d8 <flatcc_builder_extend_string@@Base+0x90>
   1e470:	str	r2, [r0, #20]
   1e474:	ldr	r5, [r4, #20]
   1e478:	ldr	r2, [r4, #24]
   1e47c:	add	r0, r5, r1
   1e480:	cmp	r0, r2
   1e484:	str	r0, [r4, #20]
   1e488:	bcc	1e4ac <flatcc_builder_extend_string@@Base+0x64>
   1e48c:	add	r1, r0, #1
   1e490:	mov	r0, r4
   1e494:	mvn	r2, #3
   1e498:	bl	20d5c <flatcc_builder_get_emit_context@@Base+0x8>
   1e49c:	mov	r1, r0
   1e4a0:	mov	r0, #0
   1e4a4:	cmp	r1, #0
   1e4a8:	popne	{r4, r5, fp, pc}
   1e4ac:	ldr	r0, [r4, #16]
   1e4b0:	add	r0, r0, r5
   1e4b4:	pop	{r4, r5, fp, pc}
   1e4b8:	movw	r0, #26295	; 0x66b7
   1e4bc:	movw	r1, #24978	; 0x6192
   1e4c0:	movw	r3, #26339	; 0x66e3
   1e4c4:	movw	r2, #957	; 0x3bd
   1e4c8:	movt	r0, #2
   1e4cc:	movt	r1, #2
   1e4d0:	movt	r3, #2
   1e4d4:	bl	12f88 <__assert_fail@plt>
   1e4d8:	movw	r0, #29249	; 0x7241
   1e4dc:	movw	r1, #24978	; 0x6192
   1e4e0:	movw	r3, #29276	; 0x725c
   1e4e4:	mov	r2, #892	; 0x37c
   1e4e8:	movt	r0, #2
   1e4ec:	movt	r1, #2
   1e4f0:	movt	r3, #2
   1e4f4:	bl	12f88 <__assert_fail@plt>

0001e4f8 <flatcc_builder_append_string@@Base>:
   1e4f8:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1e4fc:	add	fp, sp, #24
   1e500:	mov	r6, r0
   1e504:	ldr	r0, [r0, #32]
   1e508:	mov	r8, r1
   1e50c:	ldrh	r1, [r0, #14]
   1e510:	cmp	r1, #6
   1e514:	bne	1e58c <flatcc_builder_append_string@@Base+0x94>
   1e518:	ldr	r1, [r0, #20]
   1e51c:	mov	r4, r2
   1e520:	adds	r1, r1, r2
   1e524:	bcs	1e5ac <flatcc_builder_append_string@@Base+0xb4>
   1e528:	str	r1, [r0, #20]
   1e52c:	ldr	r5, [r6, #20]
   1e530:	ldr	r1, [r6, #24]
   1e534:	add	r0, r5, r4
   1e538:	cmp	r0, r1
   1e53c:	str	r0, [r6, #20]
   1e540:	bcc	1e560 <flatcc_builder_append_string@@Base+0x68>
   1e544:	add	r1, r0, #1
   1e548:	mov	r0, r6
   1e54c:	mvn	r2, #3
   1e550:	bl	20d5c <flatcc_builder_get_emit_context@@Base+0x8>
   1e554:	mov	r7, #0
   1e558:	cmp	r0, #0
   1e55c:	bne	1e584 <flatcc_builder_append_string@@Base+0x8c>
   1e560:	ldr	r0, [r6, #16]
   1e564:	adds	r7, r0, r5
   1e568:	beq	1e580 <flatcc_builder_append_string@@Base+0x88>
   1e56c:	mov	r0, r7
   1e570:	mov	r1, r8
   1e574:	mov	r2, r4
   1e578:	bl	12eb0 <memcpy@plt>
   1e57c:	b	1e584 <flatcc_builder_append_string@@Base+0x8c>
   1e580:	mov	r7, #0
   1e584:	mov	r0, r7
   1e588:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1e58c:	movw	r0, #26295	; 0x66b7
   1e590:	movw	r1, #24978	; 0x6192
   1e594:	movw	r3, #26402	; 0x6722
   1e598:	movw	r2, #966	; 0x3c6
   1e59c:	movt	r0, #2
   1e5a0:	movt	r1, #2
   1e5a4:	movt	r3, #2
   1e5a8:	bl	12f88 <__assert_fail@plt>
   1e5ac:	movw	r0, #29249	; 0x7241
   1e5b0:	movw	r1, #24978	; 0x6192
   1e5b4:	movw	r3, #29276	; 0x725c
   1e5b8:	mov	r2, #892	; 0x37c
   1e5bc:	movt	r0, #2
   1e5c0:	movt	r1, #2
   1e5c4:	movt	r3, #2
   1e5c8:	bl	12f88 <__assert_fail@plt>

0001e5cc <flatcc_builder_append_string_str@@Base>:
   1e5cc:	push	{r4, r5, fp, lr}
   1e5d0:	add	fp, sp, #8
   1e5d4:	mov	r5, r0
   1e5d8:	mov	r0, r1
   1e5dc:	mov	r4, r1
   1e5e0:	bl	12f1c <strlen@plt>
   1e5e4:	mov	r2, r0
   1e5e8:	mov	r0, r5
   1e5ec:	mov	r1, r4
   1e5f0:	pop	{r4, r5, fp, lr}
   1e5f4:	b	1e4f8 <flatcc_builder_append_string@@Base>

0001e5f8 <flatcc_builder_append_string_strn@@Base>:
   1e5f8:	push	{r4, r5, r6, sl, fp, lr}
   1e5fc:	add	fp, sp, #16
   1e600:	mov	r6, r0
   1e604:	mov	r5, r1
   1e608:	mov	r0, r1
   1e60c:	mov	r1, #0
   1e610:	mov	r4, r2
   1e614:	bl	12f58 <memchr@plt>
   1e618:	cmp	r0, #0
   1e61c:	mov	r1, r5
   1e620:	subne	r4, r0, r5
   1e624:	mov	r0, r6
   1e628:	mov	r2, r4
   1e62c:	pop	{r4, r5, r6, sl, fp, lr}
   1e630:	b	1e4f8 <flatcc_builder_append_string@@Base>

0001e634 <flatcc_builder_truncate_vector@@Base>:
   1e634:	push	{fp, lr}
   1e638:	mov	fp, sp
   1e63c:	ldr	r2, [r0, #32]
   1e640:	ldrh	r3, [r2, #14]
   1e644:	cmp	r3, #4
   1e648:	bne	1e690 <flatcc_builder_truncate_vector@@Base+0x5c>
   1e64c:	ldr	r3, [r2, #20]
   1e650:	cmp	r3, r1
   1e654:	bcc	1e6b0 <flatcc_builder_truncate_vector@@Base+0x7c>
   1e658:	sub	r3, r3, r1
   1e65c:	str	r3, [r2, #20]
   1e660:	ldr	r2, [r0, #32]
   1e664:	ldr	r3, [r0, #20]
   1e668:	ldr	ip, [r0, #16]
   1e66c:	ldr	r2, [r2, #16]
   1e670:	mls	r3, r2, r1, r3
   1e674:	mul	r2, r2, r1
   1e678:	mov	r1, #0
   1e67c:	str	r3, [r0, #20]
   1e680:	add	r0, ip, r3
   1e684:	bl	12f40 <memset@plt>
   1e688:	mov	r0, #0
   1e68c:	pop	{fp, pc}
   1e690:	movw	r0, #25781	; 0x64b5
   1e694:	movw	r1, #24978	; 0x6192
   1e698:	movw	r3, #26479	; 0x676f
   1e69c:	movw	r2, #985	; 0x3d9
   1e6a0:	movt	r0, #2
   1e6a4:	movt	r1, #2
   1e6a8:	movt	r3, #2
   1e6ac:	bl	12f88 <__assert_fail@plt>
   1e6b0:	movw	r0, #26542	; 0x67ae
   1e6b4:	movw	r1, #24978	; 0x6192
   1e6b8:	movw	r3, #26479	; 0x676f
   1e6bc:	movw	r2, #986	; 0x3da
   1e6c0:	movt	r0, #2
   1e6c4:	movt	r1, #2
   1e6c8:	movt	r3, #2
   1e6cc:	bl	12f88 <__assert_fail@plt>

0001e6d0 <flatcc_builder_truncate_offset_vector@@Base>:
   1e6d0:	push	{fp, lr}
   1e6d4:	mov	fp, sp
   1e6d8:	ldr	r2, [r0, #32]
   1e6dc:	ldrh	r3, [r2, #14]
   1e6e0:	cmp	r3, #5
   1e6e4:	bne	1e72c <flatcc_builder_truncate_offset_vector@@Base+0x5c>
   1e6e8:	ldr	r3, [r2, #20]
   1e6ec:	cmp	r3, r1
   1e6f0:	bcc	1e74c <flatcc_builder_truncate_offset_vector@@Base+0x7c>
   1e6f4:	sub	r3, r3, r1
   1e6f8:	str	r3, [r2, #20]
   1e6fc:	ldr	r2, [r0, #32]
   1e700:	ldr	r3, [r0, #20]
   1e704:	ldr	ip, [r0, #16]
   1e708:	ldr	r2, [r2, #16]
   1e70c:	mls	r3, r2, r1, r3
   1e710:	mul	r2, r2, r1
   1e714:	mov	r1, #0
   1e718:	str	r3, [r0, #20]
   1e71c:	add	r0, ip, r3
   1e720:	bl	12f40 <memset@plt>
   1e724:	mov	r0, #0
   1e728:	pop	{fp, pc}
   1e72c:	movw	r0, #26030	; 0x65ae
   1e730:	movw	r1, #24978	; 0x6192
   1e734:	movw	r3, #26578	; 0x67d2
   1e738:	movw	r2, #994	; 0x3e2
   1e73c:	movt	r0, #2
   1e740:	movt	r1, #2
   1e744:	movt	r3, #2
   1e748:	bl	12f88 <__assert_fail@plt>
   1e74c:	movw	r0, #26648	; 0x6818
   1e750:	movw	r1, #24978	; 0x6192
   1e754:	movw	r3, #26578	; 0x67d2
   1e758:	movw	r2, #995	; 0x3e3
   1e75c:	movt	r0, #2
   1e760:	movt	r1, #2
   1e764:	movt	r3, #2
   1e768:	bl	12f88 <__assert_fail@plt>

0001e76c <flatcc_builder_truncate_string@@Base>:
   1e76c:	push	{fp, lr}
   1e770:	mov	fp, sp
   1e774:	mov	r2, r1
   1e778:	ldr	r1, [r0, #32]
   1e77c:	ldrh	r3, [r1, #14]
   1e780:	cmp	r3, #6
   1e784:	bne	1e7c0 <flatcc_builder_truncate_string@@Base+0x54>
   1e788:	ldr	r3, [r1, #20]
   1e78c:	cmp	r3, r2
   1e790:	bcc	1e7e0 <flatcc_builder_truncate_string@@Base+0x74>
   1e794:	sub	r3, r3, r2
   1e798:	str	r3, [r1, #20]
   1e79c:	ldr	r3, [r0, #20]
   1e7a0:	ldr	r1, [r0, #16]
   1e7a4:	sub	r3, r3, r2
   1e7a8:	str	r3, [r0, #20]
   1e7ac:	add	r0, r1, r3
   1e7b0:	mov	r1, #0
   1e7b4:	bl	12f40 <memset@plt>
   1e7b8:	mov	r0, #0
   1e7bc:	pop	{fp, pc}
   1e7c0:	movw	r0, #26295	; 0x66b7
   1e7c4:	movw	r1, #24978	; 0x6192
   1e7c8:	movw	r3, #26707	; 0x6853
   1e7cc:	movw	r2, #1003	; 0x3eb
   1e7d0:	movt	r0, #2
   1e7d4:	movt	r1, #2
   1e7d8:	movt	r3, #2
   1e7dc:	bl	12f88 <__assert_fail@plt>
   1e7e0:	movw	r0, #26770	; 0x6892
   1e7e4:	movw	r1, #24978	; 0x6192
   1e7e8:	movw	r3, #26707	; 0x6853
   1e7ec:	mov	r2, #1004	; 0x3ec
   1e7f0:	movt	r0, #2
   1e7f4:	movt	r1, #2
   1e7f8:	movt	r3, #2
   1e7fc:	bl	12f88 <__assert_fail@plt>

0001e800 <flatcc_builder_start_vector@@Base>:
   1e800:	push	{r4, r5, r6, r7, fp, lr}
   1e804:	add	fp, sp, #16
   1e808:	mov	r7, #4
   1e80c:	cmp	r2, #4
   1e810:	mov	r6, r1
   1e814:	mov	r5, r3
   1e818:	mov	r4, r0
   1e81c:	movls	r2, r7
   1e820:	mov	r1, r2
   1e824:	bl	1dc0c <flatcc_builder_start_buffer@@Base+0xbc>
   1e828:	mov	r1, r0
   1e82c:	mvn	r0, #0
   1e830:	cmp	r1, #0
   1e834:	popne	{r4, r5, r6, r7, fp, pc}
   1e838:	ldr	r0, [r4, #32]
   1e83c:	str	r6, [r0, #16]
   1e840:	mov	r0, #0
   1e844:	ldr	r1, [r4, #32]
   1e848:	str	r0, [r1, #20]
   1e84c:	ldr	r1, [r4, #32]
   1e850:	str	r5, [r1, #24]
   1e854:	ldr	r1, [r4, #32]
   1e858:	strh	r7, [r1, #14]
   1e85c:	ldr	r2, [r4, #28]
   1e860:	ldr	r3, [r4, #60]	; 0x3c
   1e864:	ldr	r7, [r4, #64]	; 0x40
   1e868:	add	r3, r3, r2
   1e86c:	sub	r2, r7, r2
   1e870:	str	r3, [r4, #16]
   1e874:	mvn	r3, #3
   1e878:	cmn	r2, #4
   1e87c:	movcs	r2, r3
   1e880:	str	r2, [r4, #24]
   1e884:	str	r3, [r1, #4]
   1e888:	pop	{r4, r5, r6, r7, fp, pc}

0001e88c <flatcc_builder_start_offset_vector@@Base>:
   1e88c:	push	{r4, r5, fp, lr}
   1e890:	add	fp, sp, #8
   1e894:	mov	r1, #4
   1e898:	mov	r4, r0
   1e89c:	mov	r5, #4
   1e8a0:	bl	1dc0c <flatcc_builder_start_buffer@@Base+0xbc>
   1e8a4:	mov	r1, r0
   1e8a8:	mvn	r0, #0
   1e8ac:	cmp	r1, #0
   1e8b0:	popne	{r4, r5, fp, pc}
   1e8b4:	ldr	r0, [r4, #32]
   1e8b8:	mov	r2, #5
   1e8bc:	str	r5, [r0, #16]
   1e8c0:	mov	r0, #0
   1e8c4:	ldr	r1, [r4, #32]
   1e8c8:	str	r0, [r1, #20]
   1e8cc:	ldr	r1, [r4, #32]
   1e8d0:	strh	r2, [r1, #14]
   1e8d4:	ldr	r2, [r4, #28]
   1e8d8:	ldr	r3, [r4, #60]	; 0x3c
   1e8dc:	ldr	r5, [r4, #64]	; 0x40
   1e8e0:	add	r3, r3, r2
   1e8e4:	sub	r2, r5, r2
   1e8e8:	str	r3, [r4, #16]
   1e8ec:	mvn	r3, #3
   1e8f0:	cmn	r2, #4
   1e8f4:	movcs	r2, r3
   1e8f8:	str	r2, [r4, #24]
   1e8fc:	str	r3, [r1, #4]
   1e900:	pop	{r4, r5, fp, pc}

0001e904 <flatcc_builder_create_offset_vector@@Base>:
   1e904:	push	{r4, r5, r6, sl, fp, lr}
   1e908:	add	fp, sp, #16
   1e90c:	mov	r6, r2
   1e910:	mov	r5, r1
   1e914:	mov	r4, r0
   1e918:	bl	1e88c <flatcc_builder_start_offset_vector@@Base>
   1e91c:	cmp	r0, #0
   1e920:	beq	1e92c <flatcc_builder_create_offset_vector@@Base+0x28>
   1e924:	mov	r0, #0
   1e928:	pop	{r4, r5, r6, sl, fp, pc}
   1e92c:	mov	r0, r4
   1e930:	mov	r1, r6
   1e934:	bl	1e248 <flatcc_builder_extend_offset_vector@@Base>
   1e938:	cmp	r0, #0
   1e93c:	beq	1e924 <flatcc_builder_create_offset_vector@@Base+0x20>
   1e940:	lsl	r2, r6, #2
   1e944:	mov	r1, r5
   1e948:	bl	12eb0 <memcpy@plt>
   1e94c:	mov	r0, r4
   1e950:	pop	{r4, r5, r6, sl, fp, lr}
   1e954:	b	1e958 <flatcc_builder_end_offset_vector@@Base>

0001e958 <flatcc_builder_end_offset_vector@@Base>:
   1e958:	push	{r4, r5, fp, lr}
   1e95c:	add	fp, sp, #8
   1e960:	mov	r4, r0
   1e964:	ldr	r0, [r0, #32]
   1e968:	ldrh	r1, [r0, #14]
   1e96c:	cmp	r1, #5
   1e970:	bne	1ea10 <flatcc_builder_end_offset_vector@@Base+0xb8>
   1e974:	ldr	r2, [r0, #20]
   1e978:	ldr	r1, [r4, #16]
   1e97c:	mov	r0, r4
   1e980:	mov	r3, #0
   1e984:	bl	1f978 <flatcc_builder_create_offset_vector_direct@@Base+0x8>
   1e988:	mov	r5, r0
   1e98c:	cmp	r0, #0
   1e990:	beq	1ea08 <flatcc_builder_end_offset_vector@@Base+0xb0>
   1e994:	ldr	r0, [r4, #16]
   1e998:	ldr	r2, [r4, #20]
   1e99c:	mov	r1, #0
   1e9a0:	bl	12f40 <memset@plt>
   1e9a4:	ldr	r0, [r4, #32]
   1e9a8:	ldr	r1, [r4, #60]	; 0x3c
   1e9ac:	ldr	ip, [r4, #64]	; 0x40
   1e9b0:	ldr	r3, [r0, #8]
   1e9b4:	str	r3, [r4, #20]
   1e9b8:	ldr	r3, [r0]
   1e9bc:	str	r3, [r4, #28]
   1e9c0:	add	r1, r1, r3
   1e9c4:	ldr	r2, [r0, #4]
   1e9c8:	str	r1, [r4, #16]
   1e9cc:	sub	r1, ip, r3
   1e9d0:	cmp	r1, r2
   1e9d4:	movhi	r1, r2
   1e9d8:	str	r1, [r4, #24]
   1e9dc:	ldrh	r1, [r4, #130]	; 0x82
   1e9e0:	ldrh	r2, [r4, #128]	; 0x80
   1e9e4:	cmp	r2, r1
   1e9e8:	strhcc	r1, [r4, #128]	; 0x80
   1e9ec:	ldrh	r1, [r0, #12]
   1e9f0:	sub	r0, r0, #36	; 0x24
   1e9f4:	str	r0, [r4, #32]
   1e9f8:	strh	r1, [r4, #130]	; 0x82
   1e9fc:	ldr	r0, [r4, #156]	; 0x9c
   1ea00:	sub	r0, r0, #1
   1ea04:	str	r0, [r4, #156]	; 0x9c
   1ea08:	mov	r0, r5
   1ea0c:	pop	{r4, r5, fp, pc}
   1ea10:	movw	r0, #26030	; 0x65ae
   1ea14:	movw	r1, #24978	; 0x6192
   1ea18:	movw	r3, #27613	; 0x6bdd
   1ea1c:	movw	r2, #1480	; 0x5c8
   1ea20:	movt	r0, #2
   1ea24:	movt	r1, #2
   1ea28:	movt	r3, #2
   1ea2c:	bl	12f88 <__assert_fail@plt>

0001ea30 <flatcc_builder_start_string@@Base>:
   1ea30:	push	{r4, r5, fp, lr}
   1ea34:	add	fp, sp, #8
   1ea38:	mov	r1, #1
   1ea3c:	mov	r4, r0
   1ea40:	mov	r5, #1
   1ea44:	bl	1dc0c <flatcc_builder_start_buffer@@Base+0xbc>
   1ea48:	mov	r1, r0
   1ea4c:	mvn	r0, #0
   1ea50:	cmp	r1, #0
   1ea54:	popne	{r4, r5, fp, pc}
   1ea58:	ldr	r0, [r4, #32]
   1ea5c:	mov	r2, #6
   1ea60:	str	r5, [r0, #16]
   1ea64:	mov	r0, #0
   1ea68:	ldr	r1, [r4, #32]
   1ea6c:	str	r0, [r1, #20]
   1ea70:	ldr	r1, [r4, #32]
   1ea74:	strh	r2, [r1, #14]
   1ea78:	ldr	r2, [r4, #28]
   1ea7c:	ldr	r3, [r4, #60]	; 0x3c
   1ea80:	ldr	r5, [r4, #64]	; 0x40
   1ea84:	add	r3, r3, r2
   1ea88:	sub	r2, r5, r2
   1ea8c:	str	r3, [r4, #16]
   1ea90:	mvn	r3, #3
   1ea94:	cmn	r2, #4
   1ea98:	movcs	r2, r3
   1ea9c:	str	r2, [r4, #24]
   1eaa0:	str	r3, [r1, #4]
   1eaa4:	pop	{r4, r5, fp, pc}

0001eaa8 <flatcc_builder_reserve_table@@Base>:
   1eaa8:	push	{r4, r5, r6, sl, fp, lr}
   1eaac:	add	fp, sp, #16
   1eab0:	sub	sp, sp, #8
   1eab4:	cmn	r1, #1
   1eab8:	ble	1eb8c <flatcc_builder_reserve_table@@Base+0xe4>
   1eabc:	mov	r4, r0
   1eac0:	ldr	r0, [r0, #32]
   1eac4:	mov	r5, r1
   1eac8:	ldr	r1, [r4, #56]	; 0x38
   1eacc:	ldrh	r2, [r0, #28]
   1ead0:	ldr	r0, [r0, #16]
   1ead4:	add	r6, r0, r2, lsl #1
   1ead8:	add	r0, r6, r5, lsl #1
   1eadc:	add	r2, r0, #4
   1eae0:	cmp	r2, r1
   1eae4:	bls	1eb0c <flatcc_builder_reserve_table@@Base+0x64>
   1eae8:	ldr	r0, [r4, #40]	; 0x28
   1eaec:	ldr	ip, [r4, #48]	; 0x30
   1eaf0:	mov	r3, #0
   1eaf4:	add	r1, r4, #52	; 0x34
   1eaf8:	str	r3, [sp]
   1eafc:	mov	r3, #1
   1eb00:	blx	ip
   1eb04:	cmp	r0, #0
   1eb08:	bne	1ebac <flatcc_builder_reserve_table@@Base+0x104>
   1eb0c:	ldr	r0, [r4, #52]	; 0x34
   1eb10:	adds	r0, r0, r6
   1eb14:	str	r0, [r4, #4]
   1eb18:	beq	1eb80 <flatcc_builder_reserve_table@@Base+0xd8>
   1eb1c:	add	r0, r0, #4
   1eb20:	lsl	r1, r5, #1
   1eb24:	str	r0, [r4, #4]
   1eb28:	ldr	r0, [r4, #32]
   1eb2c:	ldr	r3, [r4, #80]	; 0x50
   1eb30:	ldr	r5, [r0, #20]
   1eb34:	orr	r0, r1, #1
   1eb38:	add	r2, r5, r0
   1eb3c:	cmp	r2, r3
   1eb40:	bls	1eb68 <flatcc_builder_reserve_table@@Base+0xc0>
   1eb44:	ldr	r0, [r4, #40]	; 0x28
   1eb48:	ldr	r6, [r4, #48]	; 0x30
   1eb4c:	mov	r3, #3
   1eb50:	add	r1, r4, #76	; 0x4c
   1eb54:	str	r3, [sp]
   1eb58:	mov	r3, #0
   1eb5c:	blx	r6
   1eb60:	cmp	r0, #0
   1eb64:	bne	1ebac <flatcc_builder_reserve_table@@Base+0x104>
   1eb68:	ldr	r0, [r4, #76]	; 0x4c
   1eb6c:	adds	r0, r0, r5
   1eb70:	str	r0, [r4]
   1eb74:	mov	r0, #0
   1eb78:	mvneq	r0, #0
   1eb7c:	b	1eb84 <flatcc_builder_reserve_table@@Base+0xdc>
   1eb80:	mvn	r0, #0
   1eb84:	sub	sp, fp, #16
   1eb88:	pop	{r4, r5, r6, sl, fp, pc}
   1eb8c:	movw	r0, #26869	; 0x68f5
   1eb90:	movw	r1, #24978	; 0x6192
   1eb94:	movw	r3, #26804	; 0x68b4
   1eb98:	movw	r2, #1065	; 0x429
   1eb9c:	movt	r0, #2
   1eba0:	movt	r1, #2
   1eba4:	movt	r3, #2
   1eba8:	bl	12f88 <__assert_fail@plt>
   1ebac:	movw	r0, #29496	; 0x7338
   1ebb0:	movw	r1, #24978	; 0x6192
   1ebb4:	movw	r3, #29042	; 0x7172
   1ebb8:	mov	r2, #308	; 0x134
   1ebbc:	movt	r0, #2
   1ebc0:	movt	r1, #2
   1ebc4:	movt	r3, #2
   1ebc8:	bl	12f88 <__assert_fail@plt>

0001ebcc <flatcc_builder_start_table@@Base>:
   1ebcc:	push	{r4, r5, r6, r7, fp, lr}
   1ebd0:	add	fp, sp, #16
   1ebd4:	sub	sp, sp, #8
   1ebd8:	mov	r6, r1
   1ebdc:	mov	r1, #4
   1ebe0:	mov	r4, r0
   1ebe4:	bl	1dc0c <flatcc_builder_start_buffer@@Base+0xbc>
   1ebe8:	mvn	r5, #0
   1ebec:	cmp	r0, #0
   1ebf0:	beq	1ec00 <flatcc_builder_start_table@@Base+0x34>
   1ebf4:	mov	r0, r5
   1ebf8:	sub	sp, fp, #16
   1ebfc:	pop	{r4, r5, r6, r7, fp, pc}
   1ec00:	mov	r1, r4
   1ec04:	ldr	r2, [r4, #4]
   1ec08:	ldr	r3, [r4, #32]
   1ec0c:	ldr	r0, [r1, #52]!	; 0x34
   1ec10:	sub	r0, r2, r0
   1ec14:	str	r0, [r3, #16]
   1ec18:	ldr	r0, [r4]
   1ec1c:	ldr	r3, [r4, #76]	; 0x4c
   1ec20:	ldr	r2, [r4, #32]
   1ec24:	sub	r0, r0, r3
   1ec28:	mov	r3, #0
   1ec2c:	str	r0, [r2, #20]
   1ec30:	ldr	r0, [r4, #12]
   1ec34:	ldr	r2, [r4, #32]
   1ec38:	str	r0, [r2, #24]
   1ec3c:	ldr	r0, [r4, #32]
   1ec40:	ldrh	r2, [r4, #8]
   1ec44:	strh	r2, [r0, #28]
   1ec48:	movw	r0, #15186	; 0x3b52
   1ec4c:	strh	r3, [r4, #8]
   1ec50:	mov	r2, #3
   1ec54:	movt	r0, #12137	; 0x2f69
   1ec58:	str	r0, [r4, #12]
   1ec5c:	ldr	r0, [r4, #32]
   1ec60:	strh	r2, [r0, #14]
   1ec64:	ldrh	r2, [r0, #28]
   1ec68:	ldr	r0, [r0, #16]
   1ec6c:	add	r7, r0, r2, lsl #1
   1ec70:	add	r0, r7, r6, lsl #1
   1ec74:	add	r2, r0, #4
   1ec78:	ldr	r0, [r4, #56]	; 0x38
   1ec7c:	cmp	r2, r0
   1ec80:	bls	1eca0 <flatcc_builder_start_table@@Base+0xd4>
   1ec84:	ldr	r0, [r4, #40]	; 0x28
   1ec88:	ldr	ip, [r4, #48]	; 0x30
   1ec8c:	str	r3, [sp]
   1ec90:	mov	r3, #1
   1ec94:	blx	ip
   1ec98:	cmp	r0, #0
   1ec9c:	bne	1ed44 <flatcc_builder_start_table@@Base+0x178>
   1eca0:	ldr	r0, [r4, #52]	; 0x34
   1eca4:	adds	r0, r0, r7
   1eca8:	str	r0, [r4, #4]
   1ecac:	beq	1ebf4 <flatcc_builder_start_table@@Base+0x28>
   1ecb0:	add	r0, r0, #4
   1ecb4:	lsl	r1, r6, #1
   1ecb8:	str	r0, [r4, #4]
   1ecbc:	ldr	r0, [r4, #32]
   1ecc0:	ldr	r3, [r4, #80]	; 0x50
   1ecc4:	ldr	r6, [r0, #20]
   1ecc8:	orr	r0, r1, #1
   1eccc:	add	r2, r6, r0
   1ecd0:	cmp	r2, r3
   1ecd4:	bls	1ecfc <flatcc_builder_start_table@@Base+0x130>
   1ecd8:	ldr	r0, [r4, #40]	; 0x28
   1ecdc:	ldr	r7, [r4, #48]	; 0x30
   1ece0:	mov	r3, #3
   1ece4:	add	r1, r4, #76	; 0x4c
   1ece8:	str	r3, [sp]
   1ecec:	mov	r3, #0
   1ecf0:	blx	r7
   1ecf4:	cmp	r0, #0
   1ecf8:	bne	1ed44 <flatcc_builder_start_table@@Base+0x178>
   1ecfc:	ldr	r0, [r4, #76]	; 0x4c
   1ed00:	adds	r0, r0, r6
   1ed04:	str	r0, [r4]
   1ed08:	beq	1ebf4 <flatcc_builder_start_table@@Base+0x28>
   1ed0c:	ldr	r0, [r4, #28]
   1ed10:	ldr	r2, [r4, #60]	; 0x3c
   1ed14:	ldr	r3, [r4, #64]	; 0x40
   1ed18:	ldr	r1, [r4, #32]
   1ed1c:	mov	r5, #0
   1ed20:	add	r2, r2, r0
   1ed24:	sub	r0, r3, r0
   1ed28:	str	r2, [r4, #16]
   1ed2c:	movw	r2, #65532	; 0xfffc
   1ed30:	cmp	r0, r2
   1ed34:	movcs	r0, r2
   1ed38:	str	r0, [r4, #24]
   1ed3c:	str	r2, [r1, #4]
   1ed40:	b	1ebf4 <flatcc_builder_start_table@@Base+0x28>
   1ed44:	movw	r0, #29496	; 0x7338
   1ed48:	movw	r1, #24978	; 0x6192
   1ed4c:	movw	r3, #29042	; 0x7172
   1ed50:	mov	r2, #308	; 0x134
   1ed54:	movt	r0, #2
   1ed58:	movt	r1, #2
   1ed5c:	movt	r3, #2
   1ed60:	bl	12f88 <__assert_fail@plt>

0001ed64 <flatcc_builder_create_vtable@@Base>:
   1ed64:	push	{r4, r5, fp, lr}
   1ed68:	add	fp, sp, #8
   1ed6c:	sub	sp, sp, #80	; 0x50
   1ed70:	mov	r3, r2
   1ed74:	mov	r2, #0
   1ed78:	mov	r4, r0
   1ed7c:	cmp	r3, #0
   1ed80:	str	r2, [sp, #12]
   1ed84:	str	r2, [sp, #8]
   1ed88:	movne	r2, #1
   1ed8c:	strne	r1, [sp, #16]
   1ed90:	strne	r3, [sp, #8]
   1ed94:	strne	r3, [sp, #20]
   1ed98:	strne	r2, [sp, #12]
   1ed9c:	ldr	r0, [r4, #152]	; 0x98
   1eda0:	cmp	r0, #0
   1eda4:	bne	1edb4 <flatcc_builder_create_vtable@@Base+0x50>
   1eda8:	ldr	r0, [r4, #180]	; 0xb4
   1edac:	cmp	r0, #0
   1edb0:	beq	1ee04 <flatcc_builder_create_vtable@@Base+0xa0>
   1edb4:	cmp	r3, #0
   1edb8:	beq	1ee44 <flatcc_builder_create_vtable@@Base+0xe0>
   1edbc:	ldr	r0, [r4, #136]	; 0x88
   1edc0:	ldr	ip, [r4, #44]	; 0x2c
   1edc4:	add	r1, sp, #8
   1edc8:	add	r1, r1, #8
   1edcc:	sub	r5, r0, r3
   1edd0:	ldr	r0, [r4, #36]	; 0x24
   1edd4:	str	r3, [sp]
   1edd8:	mov	r3, r5
   1eddc:	blx	ip
   1ede0:	cmp	r0, #0
   1ede4:	bne	1ee64 <flatcc_builder_create_vtable@@Base+0x100>
   1ede8:	cmp	r5, #0
   1edec:	str	r5, [r4, #136]	; 0x88
   1edf0:	beq	1edfc <flatcc_builder_create_vtable@@Base+0x98>
   1edf4:	add	r0, r5, #1
   1edf8:	b	1ee3c <flatcc_builder_create_vtable@@Base+0xd8>
   1edfc:	mov	r0, #0
   1ee00:	b	1ee3c <flatcc_builder_create_vtable@@Base+0xd8>
   1ee04:	ldr	r5, [r4, #140]	; 0x8c
   1ee08:	ldr	r0, [r4, #36]	; 0x24
   1ee0c:	ldr	ip, [r4, #44]	; 0x2c
   1ee10:	add	r1, r5, r3
   1ee14:	str	r1, [r4, #140]	; 0x8c
   1ee18:	add	r1, sp, #8
   1ee1c:	str	r3, [sp]
   1ee20:	mov	r3, r5
   1ee24:	add	r1, r1, #8
   1ee28:	blx	ip
   1ee2c:	cmp	r0, #0
   1ee30:	bne	1ee84 <flatcc_builder_create_vtable@@Base+0x120>
   1ee34:	adds	r0, r5, #1
   1ee38:	moveq	r0, #0
   1ee3c:	sub	sp, fp, #8
   1ee40:	pop	{r4, r5, fp, pc}
   1ee44:	movw	r0, #29496	; 0x7338
   1ee48:	movw	r1, #24978	; 0x6192
   1ee4c:	movw	r3, #29175	; 0x71f7
   1ee50:	movw	r2, #647	; 0x287
   1ee54:	movt	r0, #2
   1ee58:	movt	r1, #2
   1ee5c:	movt	r3, #2
   1ee60:	bl	12f88 <__assert_fail@plt>
   1ee64:	movw	r0, #29496	; 0x7338
   1ee68:	movw	r1, #24978	; 0x6192
   1ee6c:	movw	r3, #29175	; 0x71f7
   1ee70:	movw	r2, #651	; 0x28b
   1ee74:	movt	r0, #2
   1ee78:	movt	r1, #2
   1ee7c:	movt	r3, #2
   1ee80:	bl	12f88 <__assert_fail@plt>
   1ee84:	movw	r0, #29496	; 0x7338
   1ee88:	movw	r1, #24978	; 0x6192
   1ee8c:	movw	r3, #29363	; 0x72b3
   1ee90:	movw	r2, #677	; 0x2a5
   1ee94:	movt	r0, #2
   1ee98:	movt	r1, #2
   1ee9c:	movt	r3, #2
   1eea0:	bl	12f88 <__assert_fail@plt>

0001eea4 <flatcc_builder_create_cached_vtable@@Base>:
   1eea4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1eea8:	add	fp, sp, #28
   1eeac:	sub	sp, sp, #20
   1eeb0:	mov	sl, r0
   1eeb4:	ldr	r0, [r0, #116]	; 0x74
   1eeb8:	mov	r8, r3
   1eebc:	mov	r5, r2
   1eec0:	str	r1, [sp, #16]
   1eec4:	cmp	r0, #0
   1eec8:	beq	1ef6c <flatcc_builder_create_cached_vtable@@Base+0xc8>
   1eecc:	ldr	r1, [sl, #92]	; 0x5c
   1eed0:	rsb	r0, r0, #32
   1eed4:	lsr	r0, r8, r0
   1eed8:	add	r6, r1, r0, lsl #2
   1eedc:	cmp	r6, #0
   1eee0:	beq	1f030 <flatcc_builder_create_cached_vtable@@Base+0x18c>
   1eee4:	ldr	r7, [r6]
   1eee8:	str	r6, [sp, #12]
   1eeec:	cmp	r7, #0
   1eef0:	beq	1f038 <flatcc_builder_create_cached_vtable@@Base+0x194>
   1eef4:	ldr	r4, [sl, #68]	; 0x44
   1eef8:	ldr	r8, [sl, #100]	; 0x64
   1eefc:	mov	r0, #0
   1ef00:	str	r0, [sp, #8]
   1ef04:	add	r9, r8, r7
   1ef08:	mov	r1, r4
   1ef0c:	ldr	r0, [r9, #8]
   1ef10:	ldrh	r0, [r1, r0]!	; <UNPREDICTABLE>
   1ef14:	cmp	r0, r5
   1ef18:	bne	1ef30 <flatcc_builder_create_cached_vtable@@Base+0x8c>
   1ef1c:	ldr	r0, [sp, #16]
   1ef20:	mov	r2, r5
   1ef24:	bl	12ebc <memcmp@plt>
   1ef28:	cmp	r0, #0
   1ef2c:	beq	1ef44 <flatcc_builder_create_cached_vtable@@Base+0xa0>
   1ef30:	ldr	r7, [r9, #12]!
   1ef34:	cmp	r7, #0
   1ef38:	mov	r6, r9
   1ef3c:	bne	1ef04 <flatcc_builder_create_cached_vtable@@Base+0x60>
   1ef40:	b	1f028 <flatcc_builder_create_cached_vtable@@Base+0x184>
   1ef44:	ldr	r0, [sl, #152]	; 0x98
   1ef48:	ldr	r1, [r9, #4]
   1ef4c:	cmp	r1, r0
   1ef50:	beq	1f19c <flatcc_builder_create_cached_vtable@@Base+0x2f8>
   1ef54:	mov	r6, r9
   1ef58:	mov	r0, r9
   1ef5c:	ldr	r7, [r6, #12]!
   1ef60:	cmp	r7, #0
   1ef64:	bne	1ef00 <flatcc_builder_create_cached_vtable@@Base+0x5c>
   1ef68:	b	1f03c <flatcc_builder_create_cached_vtable@@Base+0x198>
   1ef6c:	ldr	r0, [sl, #124]	; 0x7c
   1ef70:	cmp	r0, #0
   1ef74:	bne	1f1e8 <flatcc_builder_create_cached_vtable@@Base+0x344>
   1ef78:	ldr	r0, [sl, #104]	; 0x68
   1ef7c:	add	r7, sl, #100	; 0x64
   1ef80:	cmp	r0, #15
   1ef84:	bhi	1efb0 <flatcc_builder_create_cached_vtable@@Base+0x10c>
   1ef88:	ldr	r0, [sl, #40]	; 0x28
   1ef8c:	ldr	r6, [sl, #48]	; 0x30
   1ef90:	mov	r1, #6
   1ef94:	mov	r2, #16
   1ef98:	mov	r3, #0
   1ef9c:	str	r1, [sp]
   1efa0:	mov	r1, r7
   1efa4:	blx	r6
   1efa8:	cmp	r0, #0
   1efac:	bne	1f1c8 <flatcc_builder_create_cached_vtable@@Base+0x324>
   1efb0:	ldr	r0, [r7]
   1efb4:	mov	r7, #0
   1efb8:	cmp	r0, #0
   1efbc:	beq	1f0dc <flatcc_builder_create_cached_vtable@@Base+0x238>
   1efc0:	mov	r0, #16
   1efc4:	mov	r2, #5
   1efc8:	add	r1, sl, #92	; 0x5c
   1efcc:	mov	r3, #1
   1efd0:	mov	r4, #256	; 0x100
   1efd4:	str	r0, [sl, #124]	; 0x7c
   1efd8:	ldr	r0, [sl, #40]	; 0x28
   1efdc:	ldr	r6, [sl, #48]	; 0x30
   1efe0:	str	r2, [sp]
   1efe4:	mov	r2, #256	; 0x100
   1efe8:	blx	r6
   1efec:	cmp	r0, #0
   1eff0:	bne	1f0dc <flatcc_builder_create_cached_vtable@@Base+0x238>
   1eff4:	ldr	r0, [sl, #96]	; 0x60
   1eff8:	mov	r1, r4
   1effc:	lsl	r4, r4, #1
   1f000:	cmp	r0, r1, lsl #1
   1f004:	bcs	1eff8 <flatcc_builder_create_cached_vtable@@Base+0x154>
   1f008:	lsr	r1, r1, #2
   1f00c:	mvn	r0, #0
   1f010:	mov	r2, #1
   1f014:	add	r0, r0, #1
   1f018:	cmp	r1, r2, lsl r0
   1f01c:	bhi	1f014 <flatcc_builder_create_cached_vtable@@Base+0x170>
   1f020:	str	r0, [sl, #116]	; 0x74
   1f024:	b	1eecc <flatcc_builder_create_cached_vtable@@Base+0x28>
   1f028:	ldr	r9, [sp, #8]
   1f02c:	b	1f03c <flatcc_builder_create_cached_vtable@@Base+0x198>
   1f030:	mov	r7, #0
   1f034:	b	1f0dc <flatcc_builder_create_cached_vtable@@Base+0x238>
   1f038:	mov	r9, #0
   1f03c:	ldr	r4, [sl, #124]	; 0x7c
   1f040:	ldr	r0, [sl, #104]	; 0x68
   1f044:	add	r7, sl, #100	; 0x64
   1f048:	add	r2, r4, #16
   1f04c:	cmp	r2, r0
   1f050:	bls	1f078 <flatcc_builder_create_cached_vtable@@Base+0x1d4>
   1f054:	ldr	r0, [sl, #40]	; 0x28
   1f058:	ldr	r6, [sl, #48]	; 0x30
   1f05c:	mov	r1, #6
   1f060:	mov	r3, #0
   1f064:	str	r1, [sp]
   1f068:	mov	r1, r7
   1f06c:	blx	r6
   1f070:	cmp	r0, #0
   1f074:	bne	1f1c8 <flatcc_builder_create_cached_vtable@@Base+0x324>
   1f078:	ldr	r0, [r7]
   1f07c:	mov	r7, #0
   1f080:	adds	r4, r0, r4
   1f084:	beq	1f0dc <flatcc_builder_create_cached_vtable@@Base+0x238>
   1f088:	ldr	r0, [sl, #124]	; 0x7c
   1f08c:	ldr	r1, [sl, #152]	; 0x98
   1f090:	add	r2, r0, #16
   1f094:	str	r2, [sl, #124]	; 0x7c
   1f098:	ldr	r2, [sp, #12]
   1f09c:	str	r1, [r4, #4]
   1f0a0:	ldr	r1, [r2]
   1f0a4:	str	r1, [r4, #12]
   1f0a8:	ldr	r1, [sp, #16]
   1f0ac:	str	r0, [r2]
   1f0b0:	mov	r0, sl
   1f0b4:	mov	r2, r5
   1f0b8:	bl	1ed64 <flatcc_builder_create_vtable@@Base>
   1f0bc:	cmp	r0, #0
   1f0c0:	str	r0, [r4]
   1f0c4:	beq	1f0dc <flatcc_builder_create_cached_vtable@@Base+0x238>
   1f0c8:	cmp	r9, #0
   1f0cc:	beq	1f0e8 <flatcc_builder_create_cached_vtable@@Base+0x244>
   1f0d0:	ldr	r0, [r9, #8]
   1f0d4:	str	r0, [r4, #8]
   1f0d8:	ldr	r7, [r4]
   1f0dc:	mov	r0, r7
   1f0e0:	sub	sp, fp, #28
   1f0e4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f0e8:	ldr	r6, [sl, #120]	; 0x78
   1f0ec:	ldr	r0, [sl, #172]	; 0xac
   1f0f0:	add	r2, r6, r5
   1f0f4:	cmp	r0, #0
   1f0f8:	beq	1f134 <flatcc_builder_create_cached_vtable@@Base+0x290>
   1f0fc:	cmp	r0, r2
   1f100:	bcs	1f134 <flatcc_builder_create_cached_vtable@@Base+0x290>
   1f104:	ldr	r0, [sl, #116]	; 0x74
   1f108:	cmp	r0, #0
   1f10c:	beq	1f0d8 <flatcc_builder_create_cached_vtable@@Base+0x234>
   1f110:	ldr	r0, [sl, #92]	; 0x5c
   1f114:	ldr	r2, [sl, #96]	; 0x60
   1f118:	mov	r1, #0
   1f11c:	mov	r5, #0
   1f120:	bl	12f40 <memset@plt>
   1f124:	mov	r0, #16
   1f128:	str	r5, [sl, #120]	; 0x78
   1f12c:	str	r0, [sl, #124]	; 0x7c
   1f130:	b	1f0d8 <flatcc_builder_create_cached_vtable@@Base+0x234>
   1f134:	ldr	r0, [sl, #72]	; 0x48
   1f138:	add	r7, sl, #68	; 0x44
   1f13c:	cmp	r2, r0
   1f140:	bls	1f168 <flatcc_builder_create_cached_vtable@@Base+0x2c4>
   1f144:	ldr	r0, [sl, #40]	; 0x28
   1f148:	ldr	ip, [sl, #48]	; 0x30
   1f14c:	mov	r1, #2
   1f150:	mov	r3, #0
   1f154:	str	r1, [sp]
   1f158:	mov	r1, r7
   1f15c:	blx	ip
   1f160:	cmp	r0, #0
   1f164:	bne	1f1c8 <flatcc_builder_create_cached_vtable@@Base+0x324>
   1f168:	ldr	r0, [r7]
   1f16c:	adds	r0, r0, r6
   1f170:	beq	1f194 <flatcc_builder_create_cached_vtable@@Base+0x2f0>
   1f174:	ldr	r1, [sl, #120]	; 0x78
   1f178:	mov	r2, r5
   1f17c:	str	r1, [r4, #8]
   1f180:	add	r1, r1, r5
   1f184:	str	r1, [sl, #120]	; 0x78
   1f188:	ldr	r1, [sp, #16]
   1f18c:	bl	12eb0 <memcpy@plt>
   1f190:	b	1f0d8 <flatcc_builder_create_cached_vtable@@Base+0x234>
   1f194:	mvn	r7, #0
   1f198:	b	1f0dc <flatcc_builder_create_cached_vtable@@Base+0x238>
   1f19c:	ldr	r0, [sp, #12]
   1f1a0:	cmp	r6, r0
   1f1a4:	beq	1f1c0 <flatcc_builder_create_cached_vtable@@Base+0x31c>
   1f1a8:	mov	r1, r0
   1f1ac:	ldr	r0, [r9, #12]
   1f1b0:	str	r0, [r6]
   1f1b4:	ldr	r0, [r1]
   1f1b8:	str	r0, [r9, #12]
   1f1bc:	str	r7, [r1]
   1f1c0:	ldr	r7, [r9]
   1f1c4:	b	1f0dc <flatcc_builder_create_cached_vtable@@Base+0x238>
   1f1c8:	movw	r0, #29496	; 0x7338
   1f1cc:	movw	r1, #24978	; 0x6192
   1f1d0:	movw	r3, #29042	; 0x7172
   1f1d4:	mov	r2, #308	; 0x134
   1f1d8:	movt	r0, #2
   1f1dc:	movt	r1, #2
   1f1e0:	movt	r3, #2
   1f1e4:	bl	12f88 <__assert_fail@plt>
   1f1e8:	movw	r0, #29436	; 0x72fc
   1f1ec:	movw	r1, #24978	; 0x6192
   1f1f0:	movw	r3, #29451	; 0x730b
   1f1f4:	movw	r2, #342	; 0x156
   1f1f8:	movt	r0, #2
   1f1fc:	movt	r1, #2
   1f200:	movt	r3, #2
   1f204:	bl	12f88 <__assert_fail@plt>

0001f208 <flatcc_builder_create_table@@Base>:
   1f208:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1f20c:	add	fp, sp, #24
   1f210:	sub	sp, sp, #80	; 0x50
   1f214:	ldr	r5, [fp, #12]
   1f218:	cmn	r5, #1
   1f21c:	ble	1f370 <flatcc_builder_create_table@@Base+0x168>
   1f220:	ldr	ip, [fp, #16]
   1f224:	tst	ip, #1
   1f228:	beq	1f390 <flatcc_builder_create_table@@Base+0x188>
   1f22c:	mov	r8, r0
   1f230:	ldrh	r0, [r0, #128]	; 0x80
   1f234:	cmp	r3, #4
   1f238:	movls	r3, #4
   1f23c:	cmp	r0, r3
   1f240:	strhcc	r3, [r8, #128]	; 0x80
   1f244:	sub	r3, r3, #1
   1f248:	cmp	r5, #1
   1f24c:	ldr	r4, [r8, #136]	; 0x88
   1f250:	sub	r0, r4, r2
   1f254:	and	r0, r0, r3
   1f258:	add	r3, ip, r0
   1f25c:	mvn	ip, #3
   1f260:	sub	r6, ip, r2
   1f264:	add	r4, r6, r4
   1f268:	add	r6, r4, #1
   1f26c:	sub	r3, r6, r3
   1f270:	str	r3, [fp, #-28]	; 0xffffffe4
   1f274:	blt	1f2a0 <flatcc_builder_create_table@@Base+0x98>
   1f278:	ldr	r3, [fp, #8]
   1f27c:	sub	r6, r4, r0
   1f280:	sub	r4, ip, r6
   1f284:	ldrh	r6, [r3], #2
   1f288:	subs	r5, r5, #1
   1f28c:	ldr	r7, [r6, r1]
   1f290:	add	r7, r4, r7
   1f294:	sub	r7, r7, r6
   1f298:	str	r7, [r6, r1]
   1f29c:	bne	1f284 <flatcc_builder_create_table@@Base+0x7c>
   1f2a0:	sub	r3, fp, #28
   1f2a4:	mov	r4, #4
   1f2a8:	cmp	r2, #0
   1f2ac:	str	r3, [sp, #12]
   1f2b0:	mov	r3, #1
   1f2b4:	str	r4, [sp, #4]
   1f2b8:	str	r4, [sp, #16]
   1f2bc:	str	r3, [sp, #8]
   1f2c0:	beq	1f2dc <flatcc_builder_create_table@@Base+0xd4>
   1f2c4:	mov	r3, #2
   1f2c8:	add	r4, r2, #4
   1f2cc:	str	r1, [sp, #20]
   1f2d0:	str	r2, [sp, #24]
   1f2d4:	str	r3, [sp, #8]
   1f2d8:	str	r4, [sp, #4]
   1f2dc:	cmp	r0, #0
   1f2e0:	beq	1f30c <flatcc_builder_create_table@@Base+0x104>
   1f2e4:	add	r1, sp, #4
   1f2e8:	movw	r2, #24448	; 0x5f80
   1f2ec:	add	r4, r4, r0
   1f2f0:	add	r1, r1, r3, lsl #3
   1f2f4:	add	r3, r3, #1
   1f2f8:	movt	r2, #2
   1f2fc:	str	r4, [sp, #4]
   1f300:	str	r2, [r1, #8]
   1f304:	str	r0, [r1, #12]
   1f308:	str	r3, [sp, #8]
   1f30c:	cmp	r4, #0
   1f310:	ble	1f3b0 <flatcc_builder_create_table@@Base+0x1a8>
   1f314:	ldr	r0, [r8, #136]	; 0x88
   1f318:	ldr	r7, [r8, #44]	; 0x2c
   1f31c:	add	r1, sp, #4
   1f320:	mov	r2, r3
   1f324:	add	r1, r1, #8
   1f328:	sub	r5, r0, r4
   1f32c:	ldr	r0, [r8, #36]	; 0x24
   1f330:	str	r4, [sp]
   1f334:	mov	r3, r5
   1f338:	blx	r7
   1f33c:	cmp	r0, #0
   1f340:	streq	r5, [r8, #136]	; 0x88
   1f344:	moveq	r0, r5
   1f348:	subeq	sp, fp, #24
   1f34c:	popeq	{r4, r5, r6, r7, r8, sl, fp, pc}
   1f350:	movw	r0, #29496	; 0x7338
   1f354:	movw	r1, #24978	; 0x6192
   1f358:	movw	r3, #29175	; 0x71f7
   1f35c:	movw	r2, #651	; 0x28b
   1f360:	movt	r0, #2
   1f364:	movt	r1, #2
   1f368:	movt	r3, #2
   1f36c:	bl	12f88 <__assert_fail@plt>
   1f370:	movw	r0, #26862	; 0x68ee
   1f374:	movw	r1, #24978	; 0x6192
   1f378:	movw	r3, #26880	; 0x6900
   1f37c:	movw	r2, #1237	; 0x4d5
   1f380:	movt	r0, #2
   1f384:	movt	r1, #2
   1f388:	movt	r3, #2
   1f38c:	bl	12f88 <__assert_fail@plt>
   1f390:	movw	r0, #27036	; 0x699c
   1f394:	movw	r1, #24978	; 0x6192
   1f398:	movw	r3, #26880	; 0x6900
   1f39c:	movw	r2, #1243	; 0x4db
   1f3a0:	movt	r0, #2
   1f3a4:	movt	r1, #2
   1f3a8:	movt	r3, #2
   1f3ac:	bl	12f88 <__assert_fail@plt>
   1f3b0:	movw	r0, #29496	; 0x7338
   1f3b4:	movw	r1, #24978	; 0x6192
   1f3b8:	movw	r3, #29175	; 0x71f7
   1f3bc:	movw	r2, #647	; 0x287
   1f3c0:	movt	r0, #2
   1f3c4:	movt	r1, #2
   1f3c8:	movt	r3, #2
   1f3cc:	bl	12f88 <__assert_fail@plt>

0001f3d0 <flatcc_builder_check_required_field@@Base>:
   1f3d0:	ldr	r2, [r0, #32]
   1f3d4:	ldrh	r2, [r2, #14]
   1f3d8:	cmp	r2, #3
   1f3dc:	bne	1f40c <flatcc_builder_check_required_field@@Base+0x3c>
   1f3e0:	ldrh	r3, [r0, #8]
   1f3e4:	mov	r2, #0
   1f3e8:	cmp	r3, r1
   1f3ec:	bls	1f404 <flatcc_builder_check_required_field@@Base+0x34>
   1f3f0:	ldr	r0, [r0, #4]
   1f3f4:	add	r0, r0, r1, lsl #1
   1f3f8:	ldrh	r2, [r0]
   1f3fc:	cmp	r2, #0
   1f400:	movwne	r2, #1
   1f404:	mov	r0, r2
   1f408:	bx	lr
   1f40c:	push	{fp, lr}
   1f410:	mov	fp, sp
   1f414:	movw	r0, #27047	; 0x69a7
   1f418:	movw	r1, #24978	; 0x6192
   1f41c:	movw	r3, #27090	; 0x69d2
   1f420:	movw	r2, #1272	; 0x4f8
   1f424:	movt	r0, #2
   1f428:	movt	r1, #2
   1f42c:	movt	r3, #2
   1f430:	bl	12f88 <__assert_fail@plt>

0001f434 <flatcc_builder_check_union_field@@Base>:
   1f434:	mov	r2, r0
   1f438:	ldr	r0, [r0, #32]
   1f43c:	ldrh	r0, [r0, #14]
   1f440:	cmp	r0, #3
   1f444:	bne	1f4a4 <flatcc_builder_check_union_field@@Base+0x70>
   1f448:	cmp	r1, #0
   1f44c:	mov	r0, #0
   1f450:	ldrhne	r3, [r2, #8]
   1f454:	cmpne	r3, r1
   1f458:	bhi	1f460 <flatcc_builder_check_union_field@@Base+0x2c>
   1f45c:	bx	lr
   1f460:	ldr	r0, [r2, #4]
   1f464:	add	r0, r0, r1, lsl #1
   1f468:	ldrh	r1, [r0, #-2]
   1f46c:	cmp	r1, #0
   1f470:	beq	1f494 <flatcc_builder_check_union_field@@Base+0x60>
   1f474:	ldr	r2, [r2, #16]
   1f478:	ldrh	r0, [r0]
   1f47c:	ldrb	r1, [r2, r1]
   1f480:	cmp	r1, #0
   1f484:	beq	1f498 <flatcc_builder_check_union_field@@Base+0x64>
   1f488:	cmp	r0, #0
   1f48c:	movwne	r0, #1
   1f490:	bx	lr
   1f494:	ldrh	r0, [r0]
   1f498:	clz	r0, r0
   1f49c:	lsr	r0, r0, #5
   1f4a0:	bx	lr
   1f4a4:	push	{fp, lr}
   1f4a8:	mov	fp, sp
   1f4ac:	movw	r0, #27047	; 0x69a7
   1f4b0:	movw	r1, #24978	; 0x6192
   1f4b4:	movw	r3, #27173	; 0x6a25
   1f4b8:	movw	r2, #1279	; 0x4ff
   1f4bc:	movt	r0, #2
   1f4c0:	movt	r1, #2
   1f4c4:	movt	r3, #2
   1f4c8:	bl	12f88 <__assert_fail@plt>

0001f4cc <flatcc_builder_check_required@@Base>:
   1f4cc:	push	{fp, lr}
   1f4d0:	mov	fp, sp
   1f4d4:	mov	r3, r0
   1f4d8:	ldr	r0, [r0, #32]
   1f4dc:	ldrh	r0, [r0, #14]
   1f4e0:	cmp	r0, #3
   1f4e4:	bne	1f53c <flatcc_builder_check_required@@Base+0x70>
   1f4e8:	ldrh	ip, [r3, #8]
   1f4ec:	mov	r0, #0
   1f4f0:	cmp	ip, r2
   1f4f4:	movge	r0, #1
   1f4f8:	cmpge	r2, #1
   1f4fc:	bge	1f504 <flatcc_builder_check_required@@Base+0x38>
   1f500:	pop	{fp, pc}
   1f504:	ldr	ip, [r3, #4]
   1f508:	mov	lr, #0
   1f50c:	b	1f520 <flatcc_builder_check_required@@Base+0x54>
   1f510:	add	lr, lr, #1
   1f514:	add	r1, r1, #2
   1f518:	cmp	lr, r2
   1f51c:	popge	{fp, pc}
   1f520:	ldrh	r3, [r1]
   1f524:	add	r3, ip, r3, lsl #1
   1f528:	ldrh	r3, [r3]
   1f52c:	cmp	r3, #0
   1f530:	bne	1f510 <flatcc_builder_check_required@@Base+0x44>
   1f534:	mov	r0, #0
   1f538:	pop	{fp, pc}
   1f53c:	movw	r0, #27047	; 0x69a7
   1f540:	movw	r1, #24978	; 0x6192
   1f544:	movw	r3, #27253	; 0x6a75
   1f548:	movw	r2, #1297	; 0x511
   1f54c:	movt	r0, #2
   1f550:	movt	r1, #2
   1f554:	movt	r3, #2
   1f558:	bl	12f88 <__assert_fail@plt>

0001f55c <flatcc_builder_end_table@@Base>:
   1f55c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1f560:	add	fp, sp, #24
   1f564:	sub	sp, sp, #16
   1f568:	mov	r4, r0
   1f56c:	ldr	r0, [r0, #32]
   1f570:	ldrh	r0, [r0, #14]
   1f574:	cmp	r0, #3
   1f578:	bne	1f6f4 <flatcc_builder_end_table@@Base+0x198>
   1f57c:	ldrh	r0, [r4, #8]
   1f580:	ldr	r5, [r4, #4]
   1f584:	mov	r1, #4
   1f588:	movw	r2, #31153	; 0x79b1
   1f58c:	movt	r2, #40503	; 0x9e37
   1f590:	add	r0, r1, r0, lsl #1
   1f594:	strh	r0, [r5, #-4]!
   1f598:	ldrh	r1, [r4, #20]
   1f59c:	uxth	r6, r0
   1f5a0:	add	r1, r1, #4
   1f5a4:	strh	r1, [r5, #2]
   1f5a8:	uxth	r1, r1
   1f5ac:	ldr	r0, [r4, #12]
   1f5b0:	eor	r0, r0, r6
   1f5b4:	mul	r0, r0, r2
   1f5b8:	eor	r0, r0, r1
   1f5bc:	mov	r1, r5
   1f5c0:	mul	r3, r0, r2
   1f5c4:	mov	r0, r4
   1f5c8:	mov	r2, r6
   1f5cc:	str	r3, [r4, #12]
   1f5d0:	bl	1eea4 <flatcc_builder_create_cached_vtable@@Base>
   1f5d4:	cmp	r0, #0
   1f5d8:	beq	1f6e4 <flatcc_builder_end_table@@Base+0x188>
   1f5dc:	mov	r7, r0
   1f5e0:	mov	r0, r5
   1f5e4:	mov	r1, #0
   1f5e8:	mov	r2, r6
   1f5ec:	mov	r8, #0
   1f5f0:	bl	12f40 <memset@plt>
   1f5f4:	ldr	r5, [r4, #32]
   1f5f8:	ldr	r0, [r4, #76]	; 0x4c
   1f5fc:	ldr	r6, [r4]
   1f600:	ldrh	r3, [r4, #130]	; 0x82
   1f604:	ldr	r1, [r4, #16]
   1f608:	ldr	r2, [r4, #20]
   1f60c:	ldr	r5, [r5, #20]
   1f610:	add	r0, r0, r5
   1f614:	sub	r6, r6, r0
   1f618:	asr	r6, r6, #1
   1f61c:	stm	sp, {r0, r6, r7}
   1f620:	mov	r0, r4
   1f624:	bl	1f208 <flatcc_builder_create_table@@Base>
   1f628:	cmp	r0, #0
   1f62c:	beq	1f6e8 <flatcc_builder_end_table@@Base+0x18c>
   1f630:	ldr	r1, [r4, #32]
   1f634:	mov	r5, r0
   1f638:	ldr	r0, [r4, #16]
   1f63c:	ldr	r2, [r4, #20]
   1f640:	ldr	r3, [r4, #52]	; 0x34
   1f644:	ldr	r7, [r1, #24]
   1f648:	str	r7, [r4, #12]
   1f64c:	ldrh	r7, [r1, #28]
   1f650:	strh	r7, [r4, #8]
   1f654:	ldr	r7, [r1, #16]
   1f658:	add	r3, r3, r7
   1f65c:	str	r3, [r4, #4]
   1f660:	ldr	r3, [r4, #76]	; 0x4c
   1f664:	ldr	r1, [r1, #20]
   1f668:	add	r1, r3, r1
   1f66c:	str	r1, [r4]
   1f670:	mov	r1, #0
   1f674:	bl	12f40 <memset@plt>
   1f678:	ldr	r0, [r4, #32]
   1f67c:	ldr	r1, [r4, #60]	; 0x3c
   1f680:	ldr	r2, [r4, #64]	; 0x40
   1f684:	mov	r8, r5
   1f688:	ldr	r3, [r0, #8]
   1f68c:	str	r3, [r4, #20]
   1f690:	ldr	r3, [r0]
   1f694:	str	r3, [r4, #28]
   1f698:	add	r1, r1, r3
   1f69c:	ldr	r7, [r0, #4]
   1f6a0:	str	r1, [r4, #16]
   1f6a4:	sub	r1, r2, r3
   1f6a8:	cmp	r1, r7
   1f6ac:	movhi	r1, r7
   1f6b0:	str	r1, [r4, #24]
   1f6b4:	ldrh	r1, [r4, #130]	; 0x82
   1f6b8:	ldrh	r2, [r4, #128]	; 0x80
   1f6bc:	cmp	r2, r1
   1f6c0:	strhcc	r1, [r4, #128]	; 0x80
   1f6c4:	ldrh	r1, [r0, #12]
   1f6c8:	sub	r0, r0, #36	; 0x24
   1f6cc:	str	r0, [r4, #32]
   1f6d0:	strh	r1, [r4, #130]	; 0x82
   1f6d4:	ldr	r0, [r4, #156]	; 0x9c
   1f6d8:	sub	r0, r0, #1
   1f6dc:	str	r0, [r4, #156]	; 0x9c
   1f6e0:	b	1f6e8 <flatcc_builder_end_table@@Base+0x18c>
   1f6e4:	mov	r8, #0
   1f6e8:	mov	r0, r8
   1f6ec:	sub	sp, fp, #24
   1f6f0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1f6f4:	movw	r0, #27047	; 0x69a7
   1f6f8:	movw	r1, #24978	; 0x6192
   1f6fc:	movw	r3, #27343	; 0x6acf
   1f700:	movw	r2, #1317	; 0x525
   1f704:	movt	r0, #2
   1f708:	movt	r1, #2
   1f70c:	movt	r3, #2
   1f710:	bl	12f88 <__assert_fail@plt>

0001f714 <flatcc_builder_create_vector@@Base>:
   1f714:	push	{r4, r5, r6, r7, fp, lr}
   1f718:	add	fp, sp, #16
   1f71c:	sub	sp, sp, #80	; 0x50
   1f720:	mov	r7, r0
   1f724:	ldr	r0, [fp, #12]
   1f728:	cmp	r2, r0
   1f72c:	bhi	1f82c <flatcc_builder_create_vector@@Base+0x118>
   1f730:	ldr	r0, [fp, #8]
   1f734:	mov	r4, r2
   1f738:	ldrh	r2, [r7, #128]	; 0x80
   1f73c:	mov	r5, #4
   1f740:	cmp	r0, #4
   1f744:	movls	r0, r5
   1f748:	cmp	r2, r0
   1f74c:	sub	r2, fp, #20
   1f750:	strhcc	r0, [r7, #128]	; 0x80
   1f754:	str	r4, [fp, #-20]	; 0xffffffec
   1f758:	sub	r0, r0, #1
   1f75c:	ldr	ip, [r7, #136]	; 0x88
   1f760:	str	r2, [sp, #12]
   1f764:	mov	r2, #1
   1f768:	str	r5, [sp, #4]
   1f76c:	str	r5, [sp, #16]
   1f770:	str	r2, [sp, #8]
   1f774:	mls	r6, r3, r4, ip
   1f778:	mul	r3, r3, r4
   1f77c:	and	r0, r6, r0
   1f780:	cmp	r3, #0
   1f784:	beq	1f7a0 <flatcc_builder_create_vector@@Base+0x8c>
   1f788:	mov	r2, #2
   1f78c:	add	r5, r3, #4
   1f790:	str	r1, [sp, #20]
   1f794:	str	r3, [sp, #24]
   1f798:	str	r2, [sp, #8]
   1f79c:	str	r5, [sp, #4]
   1f7a0:	cmp	r0, #0
   1f7a4:	beq	1f7d0 <flatcc_builder_create_vector@@Base+0xbc>
   1f7a8:	add	r1, sp, #4
   1f7ac:	movw	r3, #24448	; 0x5f80
   1f7b0:	add	r5, r5, r0
   1f7b4:	add	r1, r1, r2, lsl #3
   1f7b8:	add	r2, r2, #1
   1f7bc:	movt	r3, #2
   1f7c0:	str	r5, [sp, #4]
   1f7c4:	str	r3, [r1, #8]
   1f7c8:	str	r0, [r1, #12]
   1f7cc:	str	r2, [sp, #8]
   1f7d0:	cmp	r5, #0
   1f7d4:	ble	1f84c <flatcc_builder_create_vector@@Base+0x138>
   1f7d8:	ldr	r0, [r7, #36]	; 0x24
   1f7dc:	ldr	r6, [r7, #44]	; 0x2c
   1f7e0:	add	r1, sp, #4
   1f7e4:	sub	r4, ip, r5
   1f7e8:	str	r5, [sp]
   1f7ec:	add	r1, r1, #8
   1f7f0:	mov	r3, r4
   1f7f4:	blx	r6
   1f7f8:	cmp	r0, #0
   1f7fc:	streq	r4, [r7, #136]	; 0x88
   1f800:	moveq	r0, r4
   1f804:	subeq	sp, fp, #16
   1f808:	popeq	{r4, r5, r6, r7, fp, pc}
   1f80c:	movw	r0, #29496	; 0x7338
   1f810:	movw	r1, #24978	; 0x6192
   1f814:	movw	r3, #29175	; 0x71f7
   1f818:	movw	r2, #651	; 0x28b
   1f81c:	movt	r0, #2
   1f820:	movt	r1, #2
   1f824:	movt	r3, #2
   1f828:	bl	12f88 <__assert_fail@plt>
   1f82c:	movw	r0, #27409	; 0x6b11
   1f830:	movw	r1, #24978	; 0x6192
   1f834:	movw	r3, #27428	; 0x6b24
   1f838:	movw	r2, #1365	; 0x555
   1f83c:	movt	r0, #2
   1f840:	movt	r1, #2
   1f844:	movt	r3, #2
   1f848:	bl	12f88 <__assert_fail@plt>
   1f84c:	movw	r0, #29496	; 0x7338
   1f850:	movw	r1, #24978	; 0x6192
   1f854:	movw	r3, #29175	; 0x71f7
   1f858:	movw	r2, #647	; 0x287
   1f85c:	movt	r0, #2
   1f860:	movt	r1, #2
   1f864:	movt	r3, #2
   1f868:	bl	12f88 <__assert_fail@plt>

0001f86c <flatcc_builder_end_vector@@Base>:
   1f86c:	push	{r4, r5, fp, lr}
   1f870:	add	fp, sp, #8
   1f874:	sub	sp, sp, #8
   1f878:	mov	r4, r0
   1f87c:	ldr	r0, [r0, #32]
   1f880:	ldrh	r1, [r0, #14]
   1f884:	cmp	r1, #4
   1f888:	bne	1f93c <flatcc_builder_end_vector@@Base+0xd0>
   1f88c:	ldr	r3, [r0, #16]
   1f890:	ldr	r2, [r0, #20]
   1f894:	ldr	r0, [r0, #24]
   1f898:	ldr	r1, [r4, #16]
   1f89c:	ldrh	r5, [r4, #130]	; 0x82
   1f8a0:	str	r0, [sp, #4]
   1f8a4:	mov	r0, r4
   1f8a8:	str	r5, [sp]
   1f8ac:	bl	1f714 <flatcc_builder_create_vector@@Base>
   1f8b0:	mov	r5, r0
   1f8b4:	cmp	r0, #0
   1f8b8:	beq	1f930 <flatcc_builder_end_vector@@Base+0xc4>
   1f8bc:	ldr	r0, [r4, #16]
   1f8c0:	ldr	r2, [r4, #20]
   1f8c4:	mov	r1, #0
   1f8c8:	bl	12f40 <memset@plt>
   1f8cc:	ldr	r0, [r4, #32]
   1f8d0:	ldr	r1, [r4, #60]	; 0x3c
   1f8d4:	ldr	ip, [r4, #64]	; 0x40
   1f8d8:	ldr	r3, [r0, #8]
   1f8dc:	str	r3, [r4, #20]
   1f8e0:	ldr	r3, [r0]
   1f8e4:	str	r3, [r4, #28]
   1f8e8:	add	r1, r1, r3
   1f8ec:	ldr	r2, [r0, #4]
   1f8f0:	str	r1, [r4, #16]
   1f8f4:	sub	r1, ip, r3
   1f8f8:	cmp	r1, r2
   1f8fc:	movhi	r1, r2
   1f900:	str	r1, [r4, #24]
   1f904:	ldrh	r1, [r4, #130]	; 0x82
   1f908:	ldrh	r2, [r4, #128]	; 0x80
   1f90c:	cmp	r2, r1
   1f910:	strhcc	r1, [r4, #128]	; 0x80
   1f914:	ldrh	r1, [r0, #12]
   1f918:	sub	r0, r0, #36	; 0x24
   1f91c:	str	r0, [r4, #32]
   1f920:	strh	r1, [r4, #130]	; 0x82
   1f924:	ldr	r0, [r4, #156]	; 0x9c
   1f928:	sub	r0, r0, #1
   1f92c:	str	r0, [r4, #156]	; 0x9c
   1f930:	mov	r0, r5
   1f934:	sub	sp, fp, #8
   1f938:	pop	{r4, r5, fp, pc}
   1f93c:	movw	r0, #25781	; 0x64b5
   1f940:	movw	r1, #24978	; 0x6192
   1f944:	movw	r3, #27546	; 0x6b9a
   1f948:	movw	r2, #1400	; 0x578
   1f94c:	movt	r0, #2
   1f950:	movt	r1, #2
   1f954:	movt	r3, #2
   1f958:	bl	12f88 <__assert_fail@plt>

0001f95c <flatcc_builder_vector_count@@Base>:
   1f95c:	ldr	r0, [r0, #32]
   1f960:	ldr	r0, [r0, #20]
   1f964:	bx	lr

0001f968 <flatcc_builder_vector_edit@@Base>:
   1f968:	ldr	r0, [r0, #16]
   1f96c:	bx	lr

0001f970 <flatcc_builder_create_offset_vector_direct@@Base>:
   1f970:	mov	r3, #0
   1f974:	b	1f978 <flatcc_builder_create_offset_vector_direct@@Base+0x8>
   1f978:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1f97c:	add	fp, sp, #24
   1f980:	sub	sp, sp, #80	; 0x50
   1f984:	mov	r6, #0
   1f988:	cmn	r2, #-1073741823	; 0xc0000001
   1f98c:	bhi	1fac8 <flatcc_builder_create_offset_vector_direct@@Base+0x158>
   1f990:	mov	r8, r0
   1f994:	ldrh	r0, [r0, #128]	; 0x80
   1f998:	sub	r7, fp, #28
   1f99c:	mov	r5, #4
   1f9a0:	mov	r4, #1
   1f9a4:	cmp	r0, #3
   1f9a8:	movls	r0, #4
   1f9ac:	strhls	r0, [r8, #128]	; 0x80
   1f9b0:	str	r2, [fp, #-28]	; 0xffffffe4
   1f9b4:	ldr	ip, [r8, #136]	; 0x88
   1f9b8:	str	r7, [sp, #12]
   1f9bc:	mov	r7, #0
   1f9c0:	str	r5, [sp, #4]
   1f9c4:	str	r5, [sp, #16]
   1f9c8:	str	r4, [sp, #8]
   1f9cc:	cmp	r7, r2, lsl #2
   1f9d0:	and	r6, ip, #3
   1f9d4:	beq	1f9f4 <flatcc_builder_create_offset_vector_direct@@Base+0x84>
   1f9d8:	lsl	r7, r2, #2
   1f9dc:	mov	r4, #2
   1f9e0:	str	r1, [sp, #20]
   1f9e4:	add	r5, r7, #4
   1f9e8:	str	r7, [sp, #24]
   1f9ec:	str	r4, [sp, #8]
   1f9f0:	str	r5, [sp, #4]
   1f9f4:	cmp	r6, #0
   1f9f8:	beq	1fa24 <flatcc_builder_create_offset_vector_direct@@Base+0xb4>
   1f9fc:	add	r7, sp, #4
   1fa00:	movw	r0, #24448	; 0x5f80
   1fa04:	add	r5, r5, r6
   1fa08:	add	r7, r7, r4, lsl #3
   1fa0c:	add	r4, r4, #1
   1fa10:	movt	r0, #2
   1fa14:	str	r5, [sp, #4]
   1fa18:	str	r0, [r7, #8]
   1fa1c:	str	r6, [r7, #12]
   1fa20:	str	r4, [sp, #8]
   1fa24:	cmp	r2, #0
   1fa28:	beq	1fa90 <flatcc_builder_create_offset_vector_direct@@Base+0x120>
   1fa2c:	mvn	r0, #3
   1fa30:	mov	r6, #0
   1fa34:	sub	r0, r0, ip
   1fa38:	add	r0, r0, r5
   1fa3c:	ldr	r7, [r1, r6, lsl #2]
   1fa40:	cmp	r7, #0
   1fa44:	beq	1fa68 <flatcc_builder_create_offset_vector_direct@@Base+0xf8>
   1fa48:	add	r7, r0, r7
   1fa4c:	cmp	r3, #0
   1fa50:	str	r7, [r1, r6, lsl #2]
   1fa54:	beq	1fa7c <flatcc_builder_create_offset_vector_direct@@Base+0x10c>
   1fa58:	ldrb	r7, [r3, r6]
   1fa5c:	cmp	r7, #0
   1fa60:	bne	1fa7c <flatcc_builder_create_offset_vector_direct@@Base+0x10c>
   1fa64:	b	1fad4 <flatcc_builder_create_offset_vector_direct@@Base+0x164>
   1fa68:	cmp	r3, #0
   1fa6c:	beq	1fb14 <flatcc_builder_create_offset_vector_direct@@Base+0x1a4>
   1fa70:	ldrb	r7, [r3, r6]
   1fa74:	cmp	r7, #0
   1fa78:	bne	1faf4 <flatcc_builder_create_offset_vector_direct@@Base+0x184>
   1fa7c:	add	r6, r6, #1
   1fa80:	sub	r0, r0, #4
   1fa84:	cmp	r6, r2
   1fa88:	bcc	1fa3c <flatcc_builder_create_offset_vector_direct@@Base+0xcc>
   1fa8c:	ldr	ip, [r8, #136]	; 0x88
   1fa90:	cmp	r5, #0
   1fa94:	ble	1fb34 <flatcc_builder_create_offset_vector_direct@@Base+0x1c4>
   1fa98:	ldr	r0, [r8, #36]	; 0x24
   1fa9c:	ldr	r7, [r8, #44]	; 0x2c
   1faa0:	add	r1, sp, #4
   1faa4:	sub	r6, ip, r5
   1faa8:	mov	r2, r4
   1faac:	str	r5, [sp]
   1fab0:	add	r1, r1, #8
   1fab4:	mov	r3, r6
   1fab8:	blx	r7
   1fabc:	cmp	r0, #0
   1fac0:	bne	1fb54 <flatcc_builder_create_offset_vector_direct@@Base+0x1e4>
   1fac4:	str	r6, [r8, #136]	; 0x88
   1fac8:	mov	r0, r6
   1facc:	sub	sp, fp, #24
   1fad0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1fad4:	movw	r0, #29484	; 0x732c
   1fad8:	movw	r1, #24978	; 0x6192
   1fadc:	movw	r3, #29498	; 0x733a
   1fae0:	movw	r2, #1457	; 0x5b1
   1fae4:	movt	r0, #2
   1fae8:	movt	r1, #2
   1faec:	movt	r3, #2
   1faf0:	bl	12f88 <__assert_fail@plt>
   1faf4:	movw	r0, #29629	; 0x73bd
   1faf8:	movw	r1, #24978	; 0x6192
   1fafc:	movw	r3, #29498	; 0x733a
   1fb00:	movw	r2, #1461	; 0x5b5
   1fb04:	movt	r0, #2
   1fb08:	movt	r1, #2
   1fb0c:	movt	r3, #2
   1fb10:	bl	12f88 <__assert_fail@plt>
   1fb14:	movw	r0, #29496	; 0x7338
   1fb18:	movw	r1, #24978	; 0x6192
   1fb1c:	movw	r3, #29498	; 0x733a
   1fb20:	movw	r2, #1463	; 0x5b7
   1fb24:	movt	r0, #2
   1fb28:	movt	r1, #2
   1fb2c:	movt	r3, #2
   1fb30:	bl	12f88 <__assert_fail@plt>
   1fb34:	movw	r0, #29496	; 0x7338
   1fb38:	movw	r1, #24978	; 0x6192
   1fb3c:	movw	r3, #29175	; 0x71f7
   1fb40:	movw	r2, #647	; 0x287
   1fb44:	movt	r0, #2
   1fb48:	movt	r1, #2
   1fb4c:	movt	r3, #2
   1fb50:	bl	12f88 <__assert_fail@plt>
   1fb54:	movw	r0, #29496	; 0x7338
   1fb58:	movw	r1, #24978	; 0x6192
   1fb5c:	movw	r3, #29175	; 0x71f7
   1fb60:	movw	r2, #651	; 0x28b
   1fb64:	movt	r0, #2
   1fb68:	movt	r1, #2
   1fb6c:	movt	r3, #2
   1fb70:	bl	12f88 <__assert_fail@plt>

0001fb74 <flatcc_builder_end_offset_vector_for_unions@@Base>:
   1fb74:	push	{r4, r5, fp, lr}
   1fb78:	add	fp, sp, #8
   1fb7c:	mov	r4, r0
   1fb80:	ldr	r0, [r0, #32]
   1fb84:	mov	r3, r1
   1fb88:	ldrh	r1, [r0, #14]
   1fb8c:	cmp	r1, #5
   1fb90:	bne	1fc2c <flatcc_builder_end_offset_vector_for_unions@@Base+0xb8>
   1fb94:	ldr	r2, [r0, #20]
   1fb98:	ldr	r1, [r4, #16]
   1fb9c:	mov	r0, r4
   1fba0:	bl	1f978 <flatcc_builder_create_offset_vector_direct@@Base+0x8>
   1fba4:	mov	r5, r0
   1fba8:	cmp	r0, #0
   1fbac:	beq	1fc24 <flatcc_builder_end_offset_vector_for_unions@@Base+0xb0>
   1fbb0:	ldr	r0, [r4, #16]
   1fbb4:	ldr	r2, [r4, #20]
   1fbb8:	mov	r1, #0
   1fbbc:	bl	12f40 <memset@plt>
   1fbc0:	ldr	r0, [r4, #32]
   1fbc4:	ldr	r1, [r4, #60]	; 0x3c
   1fbc8:	ldr	ip, [r4, #64]	; 0x40
   1fbcc:	ldr	r3, [r0, #8]
   1fbd0:	str	r3, [r4, #20]
   1fbd4:	ldr	r3, [r0]
   1fbd8:	str	r3, [r4, #28]
   1fbdc:	add	r1, r1, r3
   1fbe0:	ldr	r2, [r0, #4]
   1fbe4:	str	r1, [r4, #16]
   1fbe8:	sub	r1, ip, r3
   1fbec:	cmp	r1, r2
   1fbf0:	movhi	r1, r2
   1fbf4:	str	r1, [r4, #24]
   1fbf8:	ldrh	r1, [r4, #130]	; 0x82
   1fbfc:	ldrh	r2, [r4, #128]	; 0x80
   1fc00:	cmp	r2, r1
   1fc04:	strhcc	r1, [r4, #128]	; 0x80
   1fc08:	ldrh	r1, [r0, #12]
   1fc0c:	sub	r0, r0, #36	; 0x24
   1fc10:	str	r0, [r4, #32]
   1fc14:	strh	r1, [r4, #130]	; 0x82
   1fc18:	ldr	r0, [r4, #156]	; 0x9c
   1fc1c:	sub	r0, r0, #1
   1fc20:	str	r0, [r4, #156]	; 0x9c
   1fc24:	mov	r0, r5
   1fc28:	pop	{r4, r5, fp, pc}
   1fc2c:	movw	r0, #26030	; 0x65ae
   1fc30:	movw	r1, #24978	; 0x6192
   1fc34:	movw	r3, #27687	; 0x6c27
   1fc38:	movw	r2, #1493	; 0x5d5
   1fc3c:	movt	r0, #2
   1fc40:	movt	r1, #2
   1fc44:	movt	r3, #2
   1fc48:	bl	12f88 <__assert_fail@plt>

0001fc4c <flatcc_builder_offset_vector_edit@@Base>:
   1fc4c:	ldr	r0, [r0, #16]
   1fc50:	bx	lr

0001fc54 <flatcc_builder_offset_vector_count@@Base>:
   1fc54:	ldr	r0, [r0, #32]
   1fc58:	ldr	r0, [r0, #20]
   1fc5c:	bx	lr

0001fc60 <flatcc_builder_table_add_union@@Base>:
   1fc60:	push	{r4, r5, r6, r7, fp, lr}
   1fc64:	add	fp, sp, #16
   1fc68:	mov	r5, r0
   1fc6c:	ldr	r0, [r0, #32]
   1fc70:	ldrh	r0, [r0, #14]
   1fc74:	cmp	r0, #3
   1fc78:	bne	1fd00 <flatcc_builder_table_add_union@@Base+0xa0>
   1fc7c:	mov	r7, r3
   1fc80:	mov	r4, r2
   1fc84:	mov	r6, r1
   1fc88:	cmp	r3, #0
   1fc8c:	beq	1fc9c <flatcc_builder_table_add_union@@Base+0x3c>
   1fc90:	uxtb	r0, r4
   1fc94:	cmp	r0, #0
   1fc98:	beq	1fd20 <flatcc_builder_table_add_union@@Base+0xc0>
   1fc9c:	cmp	r7, #0
   1fca0:	beq	1fcbc <flatcc_builder_table_add_union@@Base+0x5c>
   1fca4:	mov	r0, r5
   1fca8:	mov	r1, r6
   1fcac:	bl	1fd60 <flatcc_builder_table_add_offset@@Base>
   1fcb0:	cmp	r0, #0
   1fcb4:	beq	1fd40 <flatcc_builder_table_add_union@@Base+0xe0>
   1fcb8:	str	r7, [r0]
   1fcbc:	sub	r1, r6, #1
   1fcc0:	mov	r0, r5
   1fcc4:	mov	r2, #1
   1fcc8:	mov	r3, #1
   1fccc:	bl	1fe9c <flatcc_builder_table_add@@Base>
   1fcd0:	cmp	r0, #0
   1fcd4:	strbne	r4, [r0]
   1fcd8:	movne	r0, #0
   1fcdc:	popne	{r4, r5, r6, r7, fp, pc}
   1fce0:	movw	r0, #27933	; 0x6d1d
   1fce4:	movw	r1, #24978	; 0x6192
   1fce8:	movw	r3, #27801	; 0x6c99
   1fcec:	movw	r2, #1526	; 0x5f6
   1fcf0:	movt	r0, #2
   1fcf4:	movt	r1, #2
   1fcf8:	movt	r3, #2
   1fcfc:	bl	12f88 <__assert_fail@plt>
   1fd00:	movw	r0, #27047	; 0x69a7
   1fd04:	movw	r1, #24978	; 0x6192
   1fd08:	movw	r3, #27801	; 0x6c99
   1fd0c:	movw	r2, #1518	; 0x5ee
   1fd10:	movt	r0, #2
   1fd14:	movt	r1, #2
   1fd18:	movt	r3, #2
   1fd1c:	bl	12f88 <__assert_fail@plt>
   1fd20:	movw	r0, #27889	; 0x6cf1
   1fd24:	movw	r1, #24978	; 0x6192
   1fd28:	movw	r3, #27801	; 0x6c99
   1fd2c:	movw	r2, #1519	; 0x5ef
   1fd30:	movt	r0, #2
   1fd34:	movt	r1, #2
   1fd38:	movt	r3, #2
   1fd3c:	bl	12f88 <__assert_fail@plt>
   1fd40:	movw	r0, #27923	; 0x6d13
   1fd44:	movw	r1, #24978	; 0x6192
   1fd48:	movw	r3, #27801	; 0x6c99
   1fd4c:	movw	r2, #1522	; 0x5f2
   1fd50:	movt	r0, #2
   1fd54:	movt	r1, #2
   1fd58:	movt	r3, #2
   1fd5c:	bl	12f88 <__assert_fail@plt>

0001fd60 <flatcc_builder_table_add_offset@@Base>:
   1fd60:	push	{r4, r5, r6, r7, fp, lr}
   1fd64:	add	fp, sp, #16
   1fd68:	mov	r4, r0
   1fd6c:	ldr	r0, [r0, #32]
   1fd70:	ldrh	r0, [r0, #14]
   1fd74:	cmp	r0, #3
   1fd78:	bne	1fe3c <flatcc_builder_table_add_offset@@Base+0xdc>
   1fd7c:	movw	r0, #32765	; 0x7ffd
   1fd80:	mov	r5, r1
   1fd84:	cmp	r1, r0
   1fd88:	bcs	1fe5c <flatcc_builder_table_add_offset@@Base+0xfc>
   1fd8c:	ldr	r0, [r4, #4]
   1fd90:	add	r1, r0, r5, lsl #1
   1fd94:	ldrh	r1, [r1]
   1fd98:	cmp	r1, #0
   1fd9c:	bne	1fe7c <flatcc_builder_table_add_offset@@Base+0x11c>
   1fda0:	ldr	r2, [r4, #20]
   1fda4:	ldr	r1, [r4, #12]
   1fda8:	ldr	r3, [r4, #24]
   1fdac:	add	r2, r2, #3
   1fdb0:	eor	r1, r1, r5
   1fdb4:	bic	r7, r2, #3
   1fdb8:	movw	r2, #31153	; 0x79b1
   1fdbc:	movt	r2, #40503	; 0x9e37
   1fdc0:	add	r6, r7, #4
   1fdc4:	mul	r1, r1, r2
   1fdc8:	cmp	r6, r3
   1fdcc:	str	r6, [r4, #20]
   1fdd0:	eor	r1, r1, #4
   1fdd4:	mul	r1, r1, r2
   1fdd8:	str	r1, [r4, #12]
   1fddc:	bls	1fe04 <flatcc_builder_table_add_offset@@Base+0xa4>
   1fde0:	mov	r0, r4
   1fde4:	mov	r1, r6
   1fde8:	movw	r2, #65532	; 0xfffc
   1fdec:	bl	20d5c <flatcc_builder_get_emit_context@@Base+0x8>
   1fdf0:	mov	r1, r0
   1fdf4:	mov	r0, #0
   1fdf8:	cmp	r1, #0
   1fdfc:	popne	{r4, r5, r6, r7, fp, pc}
   1fe00:	ldr	r0, [r4, #4]
   1fe04:	uxth	r1, r5
   1fe08:	add	r0, r0, r1, lsl #1
   1fe0c:	strh	r6, [r0]
   1fe10:	ldrh	r0, [r4, #8]
   1fe14:	cmp	r0, r1
   1fe18:	addls	r0, r5, #1
   1fe1c:	strhls	r0, [r4, #8]
   1fe20:	ldr	r0, [r4]
   1fe24:	add	r1, r0, #2
   1fe28:	str	r1, [r4]
   1fe2c:	strh	r7, [r0]
   1fe30:	ldr	r0, [r4, #16]
   1fe34:	add	r0, r0, r7
   1fe38:	pop	{r4, r5, r6, r7, fp, pc}
   1fe3c:	movw	r0, #27047	; 0x69a7
   1fe40:	movw	r1, #24978	; 0x6192
   1fe44:	movw	r3, #28827	; 0x709b
   1fe48:	movw	r2, #1811	; 0x713
   1fe4c:	movt	r0, #2
   1fe50:	movt	r1, #2
   1fe54:	movt	r3, #2
   1fe58:	bl	12f88 <__assert_fail@plt>
   1fe5c:	movw	r0, #28699	; 0x701b
   1fe60:	movw	r1, #24978	; 0x6192
   1fe64:	movw	r3, #28827	; 0x709b
   1fe68:	movw	r2, #1812	; 0x714
   1fe6c:	movt	r0, #2
   1fe70:	movt	r1, #2
   1fe74:	movt	r3, #2
   1fe78:	bl	12f88 <__assert_fail@plt>
   1fe7c:	movw	r0, #29496	; 0x7338
   1fe80:	movw	r1, #24978	; 0x6192
   1fe84:	movw	r3, #28827	; 0x709b
   1fe88:	movw	r2, #1819	; 0x71b
   1fe8c:	movt	r0, #2
   1fe90:	movt	r1, #2
   1fe94:	movt	r3, #2
   1fe98:	bl	12f88 <__assert_fail@plt>

0001fe9c <flatcc_builder_table_add@@Base>:
   1fe9c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1fea0:	add	fp, sp, #24
   1fea4:	mov	r4, r0
   1fea8:	ldr	r0, [r0, #32]
   1feac:	ldrh	r0, [r0, #14]
   1feb0:	cmp	r0, #3
   1feb4:	bne	1ff80 <flatcc_builder_table_add@@Base+0xe4>
   1feb8:	movw	r0, #32765	; 0x7ffd
   1febc:	mov	r8, r1
   1fec0:	cmp	r1, r0
   1fec4:	bcs	1ffa0 <flatcc_builder_table_add@@Base+0x104>
   1fec8:	ldrh	r0, [r4, #130]	; 0x82
   1fecc:	cmp	r0, r3
   1fed0:	strhcc	r3, [r4, #130]	; 0x82
   1fed4:	ldr	r0, [r4, #4]
   1fed8:	add	r1, r0, r8, lsl #1
   1fedc:	ldrh	r1, [r1]
   1fee0:	cmp	r1, #0
   1fee4:	bne	1ffc0 <flatcc_builder_table_add@@Base+0x124>
   1fee8:	ldr	r1, [r4, #12]
   1feec:	movw	r7, #31153	; 0x79b1
   1fef0:	ldr	r6, [r4, #20]
   1fef4:	ldr	r5, [r4, #24]
   1fef8:	movt	r7, #40503	; 0x9e37
   1fefc:	eor	r1, r1, r8
   1ff00:	mul	r1, r1, r7
   1ff04:	eor	r1, r1, r2
   1ff08:	mul	r1, r1, r7
   1ff0c:	str	r1, [r4, #12]
   1ff10:	add	r1, r3, r6
   1ff14:	rsb	r3, r3, #0
   1ff18:	sub	r1, r1, #1
   1ff1c:	and	r6, r1, r3
   1ff20:	add	r1, r6, r2
   1ff24:	cmp	r1, r5
   1ff28:	str	r1, [r4, #20]
   1ff2c:	bcc	1ff54 <flatcc_builder_table_add@@Base+0xb8>
   1ff30:	add	r1, r1, #1
   1ff34:	mov	r0, r4
   1ff38:	movw	r2, #65532	; 0xfffc
   1ff3c:	bl	20d5c <flatcc_builder_get_emit_context@@Base+0x8>
   1ff40:	mov	r1, r0
   1ff44:	mov	r0, #0
   1ff48:	cmp	r1, #0
   1ff4c:	popne	{r4, r5, r6, r7, r8, sl, fp, pc}
   1ff50:	ldr	r0, [r4, #4]
   1ff54:	uxth	r1, r8
   1ff58:	add	r2, r6, #4
   1ff5c:	add	r0, r0, r1, lsl #1
   1ff60:	strh	r2, [r0]
   1ff64:	ldrh	r0, [r4, #8]
   1ff68:	cmp	r0, r1
   1ff6c:	addls	r0, r8, #1
   1ff70:	strhls	r0, [r4, #8]
   1ff74:	ldr	r0, [r4, #16]
   1ff78:	add	r0, r0, r6
   1ff7c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1ff80:	movw	r0, #27047	; 0x69a7
   1ff84:	movw	r1, #24978	; 0x6192
   1ff88:	movw	r3, #28625	; 0x6fd1
   1ff8c:	movw	r2, #1773	; 0x6ed
   1ff90:	movt	r0, #2
   1ff94:	movt	r1, #2
   1ff98:	movt	r3, #2
   1ff9c:	bl	12f88 <__assert_fail@plt>
   1ffa0:	movw	r0, #28699	; 0x701b
   1ffa4:	movw	r1, #24978	; 0x6192
   1ffa8:	movw	r3, #28625	; 0x6fd1
   1ffac:	movw	r2, #1774	; 0x6ee
   1ffb0:	movt	r0, #2
   1ffb4:	movt	r1, #2
   1ffb8:	movt	r3, #2
   1ffbc:	bl	12f88 <__assert_fail@plt>
   1ffc0:	movw	r0, #29496	; 0x7338
   1ffc4:	movw	r1, #24978	; 0x6192
   1ffc8:	movw	r3, #28625	; 0x6fd1
   1ffcc:	movw	r2, #1784	; 0x6f8
   1ffd0:	movt	r0, #2
   1ffd4:	movt	r1, #2
   1ffd8:	movt	r3, #2
   1ffdc:	bl	12f88 <__assert_fail@plt>

0001ffe0 <flatcc_builder_table_add_union_vector@@Base>:
   1ffe0:	push	{r4, r5, r6, r7, fp, lr}
   1ffe4:	add	fp, sp, #16
   1ffe8:	mov	r6, r0
   1ffec:	ldr	r0, [r0, #32]
   1fff0:	ldrh	r0, [r0, #14]
   1fff4:	cmp	r0, #3
   1fff8:	bne	20060 <flatcc_builder_table_add_union_vector@@Base+0x80>
   1fffc:	clz	r0, r3
   20000:	mov	r5, r1
   20004:	clz	r1, r2
   20008:	mov	r4, r3
   2000c:	mov	r7, r2
   20010:	lsr	r0, r0, #5
   20014:	lsr	r1, r1, #5
   20018:	cmp	r1, r0
   2001c:	bne	20080 <flatcc_builder_table_add_union_vector@@Base+0xa0>
   20020:	cmp	r7, #0
   20024:	beq	20058 <flatcc_builder_table_add_union_vector@@Base+0x78>
   20028:	sub	r1, r5, #1
   2002c:	mov	r0, r6
   20030:	bl	1fd60 <flatcc_builder_table_add_offset@@Base>
   20034:	cmp	r0, #0
   20038:	beq	200a0 <flatcc_builder_table_add_union_vector@@Base+0xc0>
   2003c:	str	r7, [r0]
   20040:	mov	r0, r6
   20044:	mov	r1, r5
   20048:	bl	1fd60 <flatcc_builder_table_add_offset@@Base>
   2004c:	cmp	r0, #0
   20050:	beq	200c0 <flatcc_builder_table_add_union_vector@@Base+0xe0>
   20054:	str	r4, [r0]
   20058:	mov	r0, #0
   2005c:	pop	{r4, r5, r6, r7, fp, pc}
   20060:	movw	r0, #27047	; 0x69a7
   20064:	movw	r1, #24978	; 0x6192
   20068:	movw	r3, #27945	; 0x6d29
   2006c:	mov	r2, #1536	; 0x600
   20070:	movt	r0, #2
   20074:	movt	r1, #2
   20078:	movt	r3, #2
   2007c:	bl	12f88 <__assert_fail@plt>
   20080:	movw	r0, #28044	; 0x6d8c
   20084:	movw	r1, #24978	; 0x6192
   20088:	movw	r3, #27945	; 0x6d29
   2008c:	movw	r2, #1537	; 0x601
   20090:	movt	r0, #2
   20094:	movt	r1, #2
   20098:	movt	r3, #2
   2009c:	bl	12f88 <__assert_fail@plt>
   200a0:	movw	r0, #27923	; 0x6d13
   200a4:	movw	r1, #24978	; 0x6192
   200a8:	movw	r3, #27945	; 0x6d29
   200ac:	movw	r2, #1540	; 0x604
   200b0:	movt	r0, #2
   200b4:	movt	r1, #2
   200b8:	movt	r3, #2
   200bc:	bl	12f88 <__assert_fail@plt>
   200c0:	movw	r0, #27923	; 0x6d13
   200c4:	movw	r1, #24978	; 0x6192
   200c8:	movw	r3, #27945	; 0x6d29
   200cc:	movw	r2, #1544	; 0x608
   200d0:	movt	r0, #2
   200d4:	movt	r1, #2
   200d8:	movt	r3, #2
   200dc:	bl	12f88 <__assert_fail@plt>

000200e0 <flatcc_builder_create_union_vector@@Base>:
   200e0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   200e4:	add	fp, sp, #28
   200e8:	sub	sp, sp, #20
   200ec:	mov	sl, r0
   200f0:	mov	r0, #0
   200f4:	mov	r9, r3
   200f8:	mov	r7, r2
   200fc:	mov	r4, r1
   20100:	str	r0, [sl]
   20104:	str	r0, [sl, #4]
   20108:	mov	r0, r1
   2010c:	bl	1e88c <flatcc_builder_start_offset_vector@@Base>
   20110:	cmp	r0, #0
   20114:	beq	20120 <flatcc_builder_create_union_vector@@Base+0x40>
   20118:	sub	sp, fp, #28
   2011c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20120:	mov	r0, r4
   20124:	mov	r1, r9
   20128:	bl	1e248 <flatcc_builder_extend_offset_vector@@Base>
   2012c:	cmp	r0, #0
   20130:	beq	20118 <flatcc_builder_create_union_vector@@Base+0x38>
   20134:	ldr	r8, [r4, #20]
   20138:	ldr	r1, [r4, #24]
   2013c:	add	r0, r8, r9
   20140:	cmp	r0, r1
   20144:	str	r0, [r4, #20]
   20148:	bcc	20164 <flatcc_builder_create_union_vector@@Base+0x84>
   2014c:	add	r1, r0, #1
   20150:	mov	r0, r4
   20154:	mvn	r2, #3
   20158:	bl	20d5c <flatcc_builder_get_emit_context@@Base+0x8>
   2015c:	cmp	r0, #0
   20160:	bne	20118 <flatcc_builder_create_union_vector@@Base+0x38>
   20164:	ldr	r3, [r4, #16]
   20168:	adds	r2, r3, r8
   2016c:	beq	20118 <flatcc_builder_create_union_vector@@Base+0x38>
   20170:	cmp	r9, #0
   20174:	beq	201a4 <flatcc_builder_create_union_vector@@Base+0xc4>
   20178:	add	r0, r7, #4
   2017c:	mov	r1, r9
   20180:	mov	r7, r3
   20184:	mov	r6, r2
   20188:	ldrb	r5, [r0, #-4]
   2018c:	subs	r1, r1, #1
   20190:	strb	r5, [r6], #1
   20194:	ldr	r5, [r0]
   20198:	add	r0, r0, #8
   2019c:	str	r5, [r7], #4
   201a0:	bne	20188 <flatcc_builder_create_union_vector@@Base+0xa8>
   201a4:	add	r0, sp, #8
   201a8:	mov	r1, r4
   201ac:	str	r9, [sp]
   201b0:	bl	20238 <flatcc_builder_create_union_vector_direct@@Base>
   201b4:	ldr	r0, [sp, #8]
   201b8:	ldr	r1, [sp, #12]
   201bc:	stm	sl, {r0, r1}
   201c0:	mov	r1, #0
   201c4:	ldr	r0, [r4, #16]
   201c8:	ldr	r2, [r4, #20]
   201cc:	bl	12f40 <memset@plt>
   201d0:	ldr	r0, [r4, #32]
   201d4:	ldr	r1, [r4, #60]	; 0x3c
   201d8:	ldr	r2, [r4, #64]	; 0x40
   201dc:	ldr	r3, [r0, #8]
   201e0:	str	r3, [r4, #20]
   201e4:	ldr	r3, [r0]
   201e8:	str	r3, [r4, #28]
   201ec:	add	r1, r1, r3
   201f0:	ldr	r7, [r0, #4]
   201f4:	str	r1, [r4, #16]
   201f8:	sub	r1, r2, r3
   201fc:	cmp	r1, r7
   20200:	movhi	r1, r7
   20204:	str	r1, [r4, #24]
   20208:	ldrh	r1, [r4, #130]	; 0x82
   2020c:	ldrh	r2, [r4, #128]	; 0x80
   20210:	cmp	r2, r1
   20214:	strhcc	r1, [r4, #128]	; 0x80
   20218:	ldrh	r1, [r0, #12]
   2021c:	sub	r0, r0, #36	; 0x24
   20220:	str	r0, [r4, #32]
   20224:	strh	r1, [r4, #130]	; 0x82
   20228:	ldr	r0, [r4, #156]	; 0x9c
   2022c:	sub	r0, r0, #1
   20230:	str	r0, [r4, #156]	; 0x9c
   20234:	b	20118 <flatcc_builder_create_union_vector@@Base+0x38>

00020238 <flatcc_builder_create_union_vector_direct@@Base>:
   20238:	push	{r4, r5, r6, r7, fp, lr}
   2023c:	add	fp, sp, #16
   20240:	sub	sp, sp, #8
   20244:	ldr	r7, [fp, #8]
   20248:	mov	r5, r2
   2024c:	mov	r4, r0
   20250:	mov	r0, #0
   20254:	mov	r6, r1
   20258:	str	r0, [r4]
   2025c:	str	r0, [r4, #4]
   20260:	mov	r0, r1
   20264:	mov	r1, r3
   20268:	mov	r3, r5
   2026c:	mov	r2, r7
   20270:	bl	1f978 <flatcc_builder_create_offset_vector_direct@@Base+0x8>
   20274:	cmp	r0, #0
   20278:	str	r0, [r4, #4]
   2027c:	beq	202a8 <flatcc_builder_create_union_vector_direct@@Base+0x70>
   20280:	mvn	r0, #0
   20284:	mov	r1, #1
   20288:	mov	r2, r7
   2028c:	mov	r3, #1
   20290:	str	r1, [sp]
   20294:	str	r0, [sp, #4]
   20298:	mov	r0, r6
   2029c:	mov	r1, r5
   202a0:	bl	1f714 <flatcc_builder_create_vector@@Base>
   202a4:	str	r0, [r4]
   202a8:	sub	sp, fp, #16
   202ac:	pop	{r4, r5, r6, r7, fp, pc}

000202b0 <flatcc_builder_start_union_vector@@Base>:
   202b0:	push	{r4, sl, fp, lr}
   202b4:	add	fp, sp, #8
   202b8:	mov	r1, #4
   202bc:	mov	r4, r0
   202c0:	bl	1dc0c <flatcc_builder_start_buffer@@Base+0xbc>
   202c4:	mov	r1, r0
   202c8:	mvn	r0, #0
   202cc:	cmp	r1, #0
   202d0:	popne	{r4, sl, fp, pc}
   202d4:	ldr	r0, [r4, #32]
   202d8:	mov	r1, #8
   202dc:	mov	r2, #7
   202e0:	str	r1, [r0, #16]
   202e4:	mov	r0, #0
   202e8:	ldr	r1, [r4, #32]
   202ec:	str	r0, [r1, #20]
   202f0:	ldr	r1, [r4, #32]
   202f4:	strh	r2, [r1, #14]
   202f8:	ldr	r2, [r4, #28]
   202fc:	ldr	r3, [r4, #60]	; 0x3c
   20300:	ldr	ip, [r4, #64]	; 0x40
   20304:	add	r3, r3, r2
   20308:	sub	r2, ip, r2
   2030c:	str	r3, [r4, #16]
   20310:	mvn	r3, #3
   20314:	cmn	r2, #4
   20318:	movcs	r2, r3
   2031c:	str	r2, [r4, #24]
   20320:	str	r3, [r1, #4]
   20324:	pop	{r4, sl, fp, pc}

00020328 <flatcc_builder_end_union_vector@@Base>:
   20328:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   2032c:	add	fp, sp, #24
   20330:	sub	sp, sp, #16
   20334:	mov	r8, r0
   20338:	mov	r0, #0
   2033c:	mov	r4, r1
   20340:	str	r0, [r8]
   20344:	str	r0, [r8, #4]
   20348:	ldr	r0, [r1, #32]
   2034c:	ldrh	r1, [r0, #14]
   20350:	cmp	r1, #7
   20354:	bne	2046c <flatcc_builder_end_union_vector@@Base+0x144>
   20358:	ldr	r9, [r0, #20]
   2035c:	ldr	r7, [r4, #20]
   20360:	ldr	r1, [r4, #24]
   20364:	add	r0, r9, r9, lsl #2
   20368:	add	r0, r7, r0
   2036c:	cmp	r0, r1
   20370:	str	r0, [r4, #20]
   20374:	bcc	20390 <flatcc_builder_end_union_vector@@Base+0x68>
   20378:	add	r1, r0, #1
   2037c:	mov	r0, r4
   20380:	mvn	r2, #3
   20384:	bl	20d5c <flatcc_builder_get_emit_context@@Base+0x8>
   20388:	cmp	r0, #0
   2038c:	bne	20464 <flatcc_builder_end_union_vector@@Base+0x13c>
   20390:	ldr	r0, [r4, #16]
   20394:	adds	r3, r0, r7
   20398:	beq	20464 <flatcc_builder_end_union_vector@@Base+0x13c>
   2039c:	add	r2, r3, r9, lsl #2
   203a0:	cmp	r9, #0
   203a4:	beq	203d4 <flatcc_builder_end_union_vector@@Base+0xac>
   203a8:	add	r0, r0, #4
   203ac:	mov	r1, r9
   203b0:	mov	r7, r3
   203b4:	mov	r5, r2
   203b8:	ldrb	r6, [r0, #-4]
   203bc:	subs	r1, r1, #1
   203c0:	strb	r6, [r5], #1
   203c4:	ldr	r6, [r0]
   203c8:	add	r0, r0, #8
   203cc:	str	r6, [r7], #4
   203d0:	bne	203b8 <flatcc_builder_end_union_vector@@Base+0x90>
   203d4:	add	r0, sp, #8
   203d8:	mov	r1, r4
   203dc:	str	r9, [sp]
   203e0:	bl	20238 <flatcc_builder_create_union_vector_direct@@Base>
   203e4:	ldr	r0, [sp, #8]
   203e8:	ldr	r1, [sp, #12]
   203ec:	stm	r8, {r0, r1}
   203f0:	mov	r1, #0
   203f4:	ldr	r0, [r4, #16]
   203f8:	ldr	r2, [r4, #20]
   203fc:	bl	12f40 <memset@plt>
   20400:	ldr	r0, [r4, #32]
   20404:	ldr	r1, [r4, #60]	; 0x3c
   20408:	ldr	r2, [r4, #64]	; 0x40
   2040c:	ldr	r3, [r0, #8]
   20410:	str	r3, [r4, #20]
   20414:	ldr	r3, [r0]
   20418:	str	r3, [r4, #28]
   2041c:	add	r1, r1, r3
   20420:	ldr	r7, [r0, #4]
   20424:	str	r1, [r4, #16]
   20428:	sub	r1, r2, r3
   2042c:	cmp	r1, r7
   20430:	movhi	r1, r7
   20434:	str	r1, [r4, #24]
   20438:	ldrh	r1, [r4, #130]	; 0x82
   2043c:	ldrh	r2, [r4, #128]	; 0x80
   20440:	cmp	r2, r1
   20444:	strhcc	r1, [r4, #128]	; 0x80
   20448:	ldrh	r1, [r0, #12]
   2044c:	sub	r0, r0, #36	; 0x24
   20450:	str	r0, [r4, #32]
   20454:	strh	r1, [r4, #130]	; 0x82
   20458:	ldr	r0, [r4, #156]	; 0x9c
   2045c:	sub	r0, r0, #1
   20460:	str	r0, [r4, #156]	; 0x9c
   20464:	sub	sp, fp, #24
   20468:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   2046c:	movw	r0, #28084	; 0x6db4
   20470:	movw	r1, #24978	; 0x6192
   20474:	movw	r3, #28134	; 0x6de6
   20478:	movw	r2, #1617	; 0x651
   2047c:	movt	r0, #2
   20480:	movt	r1, #2
   20484:	movt	r3, #2
   20488:	bl	12f88 <__assert_fail@plt>

0002048c <flatcc_builder_union_vector_count@@Base>:
   2048c:	ldr	r0, [r0, #32]
   20490:	ldr	r0, [r0, #20]
   20494:	bx	lr

00020498 <flatcc_builder_union_vector_edit@@Base>:
   20498:	ldr	r0, [r0, #16]
   2049c:	bx	lr

000204a0 <flatcc_builder_extend_union_vector@@Base>:
   204a0:	push	{r4, r5, fp, lr}
   204a4:	add	fp, sp, #8
   204a8:	mov	r4, r0
   204ac:	ldr	r0, [r0, #32]
   204b0:	ldr	r2, [r0, #20]
   204b4:	adds	r2, r2, r1
   204b8:	cmpcc	r2, #536870912	; 0x20000000
   204bc:	bcc	204e0 <flatcc_builder_extend_union_vector@@Base+0x40>
   204c0:	movw	r0, #29249	; 0x7241
   204c4:	movw	r1, #24978	; 0x6192
   204c8:	movw	r3, #29276	; 0x725c
   204cc:	mov	r2, #892	; 0x37c
   204d0:	movt	r0, #2
   204d4:	movt	r1, #2
   204d8:	movt	r3, #2
   204dc:	bl	12f88 <__assert_fail@plt>
   204e0:	str	r2, [r0, #20]
   204e4:	ldr	r5, [r4, #20]
   204e8:	ldr	r2, [r4, #24]
   204ec:	add	r0, r5, r1, lsl #3
   204f0:	cmp	r0, r2
   204f4:	str	r0, [r4, #20]
   204f8:	bcc	2051c <flatcc_builder_extend_union_vector@@Base+0x7c>
   204fc:	add	r1, r0, #1
   20500:	mov	r0, r4
   20504:	mvn	r2, #3
   20508:	bl	20d5c <flatcc_builder_get_emit_context@@Base+0x8>
   2050c:	mov	r1, r0
   20510:	mov	r0, #0
   20514:	cmp	r1, #0
   20518:	popne	{r4, r5, fp, pc}
   2051c:	ldr	r0, [r4, #16]
   20520:	add	r0, r0, r5
   20524:	pop	{r4, r5, fp, pc}

00020528 <flatcc_builder_truncate_union_vector@@Base>:
   20528:	push	{fp, lr}
   2052c:	mov	fp, sp
   20530:	ldr	r2, [r0, #32]
   20534:	ldrh	r3, [r2, #14]
   20538:	cmp	r3, #7
   2053c:	bne	20584 <flatcc_builder_truncate_union_vector@@Base+0x5c>
   20540:	ldr	r3, [r2, #20]
   20544:	cmp	r3, r1
   20548:	bcc	205a4 <flatcc_builder_truncate_union_vector@@Base+0x7c>
   2054c:	sub	r3, r3, r1
   20550:	str	r3, [r2, #20]
   20554:	ldr	r2, [r0, #32]
   20558:	ldr	r3, [r0, #20]
   2055c:	ldr	ip, [r0, #16]
   20560:	ldr	r2, [r2, #16]
   20564:	mls	r3, r2, r1, r3
   20568:	mul	r2, r2, r1
   2056c:	mov	r1, #0
   20570:	str	r3, [r0, #20]
   20574:	add	r0, ip, r3
   20578:	bl	12f40 <memset@plt>
   2057c:	mov	r0, #0
   20580:	pop	{fp, pc}
   20584:	movw	r0, #28084	; 0x6db4
   20588:	movw	r1, #24978	; 0x6192
   2058c:	movw	r3, #28217	; 0x6e39
   20590:	movw	r2, #1665	; 0x681
   20594:	movt	r0, #2
   20598:	movt	r1, #2
   2059c:	movt	r3, #2
   205a0:	bl	12f88 <__assert_fail@plt>
   205a4:	movw	r0, #26648	; 0x6818
   205a8:	movw	r1, #24978	; 0x6192
   205ac:	movw	r3, #28217	; 0x6e39
   205b0:	movw	r2, #1666	; 0x682
   205b4:	movt	r0, #2
   205b8:	movt	r1, #2
   205bc:	movt	r3, #2
   205c0:	bl	12f88 <__assert_fail@plt>

000205c4 <flatcc_builder_union_vector_push@@Base>:
   205c4:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   205c8:	add	fp, sp, #24
   205cc:	mov	r7, r0
   205d0:	ldr	r0, [r0, #32]
   205d4:	mov	r5, r1
   205d8:	ldrh	r1, [r0, #14]
   205dc:	cmp	r1, #7
   205e0:	bne	20648 <flatcc_builder_union_vector_push@@Base+0x84>
   205e4:	ldr	r1, [r0, #20]
   205e8:	mov	r6, #0
   205ec:	cmn	r1, #-536870911	; 0xe0000001
   205f0:	beq	20640 <flatcc_builder_union_vector_push@@Base+0x7c>
   205f4:	add	r1, r1, #1
   205f8:	mov	r8, r2
   205fc:	str	r1, [r0, #20]
   20600:	ldr	r4, [r7, #20]
   20604:	ldr	r0, [r7, #24]
   20608:	add	r1, r4, #8
   2060c:	cmp	r1, r0
   20610:	str	r1, [r7, #20]
   20614:	bcc	20630 <flatcc_builder_union_vector_push@@Base+0x6c>
   20618:	add	r1, r4, #9
   2061c:	mov	r0, r7
   20620:	mvn	r2, #3
   20624:	bl	20d5c <flatcc_builder_get_emit_context@@Base+0x8>
   20628:	cmp	r0, #0
   2062c:	bne	20640 <flatcc_builder_union_vector_push@@Base+0x7c>
   20630:	ldr	r0, [r7, #16]
   20634:	adds	r0, r0, r4
   20638:	movne	r6, r0
   2063c:	stmne	r0, {r5, r8}
   20640:	mov	r0, r6
   20644:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   20648:	movw	r0, #28084	; 0x6db4
   2064c:	movw	r1, #24978	; 0x6192
   20650:	movw	r3, #28286	; 0x6e7e
   20654:	movw	r2, #1677	; 0x68d
   20658:	movt	r0, #2
   2065c:	movt	r1, #2
   20660:	movt	r3, #2
   20664:	bl	12f88 <__assert_fail@plt>

00020668 <flatcc_builder_append_union_vector@@Base>:
   20668:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   2066c:	add	fp, sp, #24
   20670:	mov	r6, r0
   20674:	ldr	r0, [r0, #32]
   20678:	mov	r8, r1
   2067c:	ldrh	r1, [r0, #14]
   20680:	cmp	r1, #7
   20684:	bne	20720 <flatcc_builder_append_union_vector@@Base+0xb8>
   20688:	ldr	r1, [r0, #20]
   2068c:	mov	r5, r2
   20690:	adds	r1, r1, r2
   20694:	cmpcc	r1, #536870912	; 0x20000000
   20698:	bcc	206bc <flatcc_builder_append_union_vector@@Base+0x54>
   2069c:	movw	r0, #29249	; 0x7241
   206a0:	movw	r1, #24978	; 0x6192
   206a4:	movw	r3, #29276	; 0x725c
   206a8:	mov	r2, #892	; 0x37c
   206ac:	movt	r0, #2
   206b0:	movt	r1, #2
   206b4:	movt	r3, #2
   206b8:	bl	12f88 <__assert_fail@plt>
   206bc:	str	r1, [r0, #20]
   206c0:	ldr	r4, [r6, #20]
   206c4:	ldr	r1, [r6, #24]
   206c8:	add	r0, r4, r5, lsl #3
   206cc:	cmp	r0, r1
   206d0:	str	r0, [r6, #20]
   206d4:	bcc	206f4 <flatcc_builder_append_union_vector@@Base+0x8c>
   206d8:	add	r1, r0, #1
   206dc:	mov	r0, r6
   206e0:	mvn	r2, #3
   206e4:	bl	20d5c <flatcc_builder_get_emit_context@@Base+0x8>
   206e8:	mov	r7, #0
   206ec:	cmp	r0, #0
   206f0:	bne	20718 <flatcc_builder_append_union_vector@@Base+0xb0>
   206f4:	ldr	r0, [r6, #16]
   206f8:	adds	r7, r0, r4
   206fc:	beq	20714 <flatcc_builder_append_union_vector@@Base+0xac>
   20700:	lsl	r2, r5, #3
   20704:	mov	r0, r7
   20708:	mov	r1, r8
   2070c:	bl	12eb0 <memcpy@plt>
   20710:	b	20718 <flatcc_builder_append_union_vector@@Base+0xb0>
   20714:	mov	r7, #0
   20718:	mov	r0, r7
   2071c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   20720:	movw	r0, #28084	; 0x6db4
   20724:	movw	r1, #24978	; 0x6192
   20728:	movw	r3, #28395	; 0x6eeb
   2072c:	movw	r2, #1692	; 0x69c
   20730:	movt	r0, #2
   20734:	movt	r1, #2
   20738:	movt	r3, #2
   2073c:	bl	12f88 <__assert_fail@plt>

00020740 <flatcc_builder_create_string@@Base>:
   20740:	push	{r4, r5, r6, sl, fp, lr}
   20744:	add	fp, sp, #16
   20748:	sub	sp, sp, #80	; 0x50
   2074c:	str	r2, [fp, #-20]	; 0xffffffec
   20750:	mvn	r5, r2
   20754:	mov	r6, r0
   20758:	mov	r3, #1
   2075c:	cmp	r2, #0
   20760:	ldr	ip, [r0, #136]	; 0x88
   20764:	sub	r0, fp, #20
   20768:	str	r0, [sp, #12]
   2076c:	mov	r0, #4
   20770:	str	r0, [sp, #4]
   20774:	str	r0, [sp, #16]
   20778:	str	r3, [sp, #8]
   2077c:	add	r5, ip, r5
   20780:	and	r5, r5, #3
   20784:	add	r5, r5, #1
   20788:	beq	207a4 <flatcc_builder_create_string@@Base+0x64>
   2078c:	mov	r3, #2
   20790:	add	r0, r2, #4
   20794:	str	r1, [sp, #20]
   20798:	str	r2, [sp, #24]
   2079c:	str	r3, [sp, #8]
   207a0:	str	r0, [sp, #4]
   207a4:	movw	r2, #24448	; 0x5f80
   207a8:	add	lr, sp, #4
   207ac:	add	r1, r0, r5
   207b0:	add	r0, lr, r3, lsl #3
   207b4:	movt	r2, #2
   207b8:	str	r1, [sp, #4]
   207bc:	cmp	r1, #0
   207c0:	str	r2, [r0, #8]
   207c4:	add	r2, r3, #1
   207c8:	str	r5, [r0, #12]
   207cc:	str	r2, [sp, #8]
   207d0:	ble	20824 <flatcc_builder_create_string@@Base+0xe4>
   207d4:	ldr	r0, [r6, #36]	; 0x24
   207d8:	ldr	r4, [r6, #44]	; 0x2c
   207dc:	sub	r5, ip, r1
   207e0:	str	r1, [sp]
   207e4:	add	r1, lr, #8
   207e8:	mov	r3, r5
   207ec:	blx	r4
   207f0:	cmp	r0, #0
   207f4:	streq	r5, [r6, #136]	; 0x88
   207f8:	moveq	r0, r5
   207fc:	subeq	sp, fp, #16
   20800:	popeq	{r4, r5, r6, sl, fp, pc}
   20804:	movw	r0, #29496	; 0x7338
   20808:	movw	r1, #24978	; 0x6192
   2080c:	movw	r3, #29175	; 0x71f7
   20810:	movw	r2, #651	; 0x28b
   20814:	movt	r0, #2
   20818:	movt	r1, #2
   2081c:	movt	r3, #2
   20820:	bl	12f88 <__assert_fail@plt>
   20824:	movw	r0, #29496	; 0x7338
   20828:	movw	r1, #24978	; 0x6192
   2082c:	movw	r3, #29175	; 0x71f7
   20830:	movw	r2, #647	; 0x287
   20834:	movt	r0, #2
   20838:	movt	r1, #2
   2083c:	movt	r3, #2
   20840:	bl	12f88 <__assert_fail@plt>

00020844 <flatcc_builder_create_string_str@@Base>:
   20844:	push	{r4, r5, fp, lr}
   20848:	add	fp, sp, #8
   2084c:	mov	r5, r0
   20850:	mov	r0, r1
   20854:	mov	r4, r1
   20858:	bl	12f1c <strlen@plt>
   2085c:	mov	r2, r0
   20860:	mov	r0, r5
   20864:	mov	r1, r4
   20868:	pop	{r4, r5, fp, lr}
   2086c:	b	20740 <flatcc_builder_create_string@@Base>

00020870 <flatcc_builder_create_string_strn@@Base>:
   20870:	push	{r4, r5, r6, sl, fp, lr}
   20874:	add	fp, sp, #16
   20878:	mov	r6, r0
   2087c:	mov	r5, r1
   20880:	mov	r0, r1
   20884:	mov	r1, #0
   20888:	mov	r4, r2
   2088c:	bl	12f58 <memchr@plt>
   20890:	cmp	r0, #0
   20894:	mov	r1, r5
   20898:	subne	r4, r0, r5
   2089c:	mov	r0, r6
   208a0:	mov	r2, r4
   208a4:	pop	{r4, r5, r6, sl, fp, lr}
   208a8:	b	20740 <flatcc_builder_create_string@@Base>

000208ac <flatcc_builder_end_string@@Base>:
   208ac:	push	{r4, r5, fp, lr}
   208b0:	add	fp, sp, #8
   208b4:	mov	r4, r0
   208b8:	ldr	r0, [r0, #32]
   208bc:	ldrh	r1, [r0, #14]
   208c0:	cmp	r1, #6
   208c4:	bne	2096c <flatcc_builder_end_string@@Base+0xc0>
   208c8:	ldr	r2, [r0, #20]
   208cc:	ldr	r0, [r4, #20]
   208d0:	cmp	r2, r0
   208d4:	bne	2098c <flatcc_builder_end_string@@Base+0xe0>
   208d8:	ldr	r1, [r4, #16]
   208dc:	mov	r0, r4
   208e0:	bl	20740 <flatcc_builder_create_string@@Base>
   208e4:	mov	r5, r0
   208e8:	cmp	r0, #0
   208ec:	beq	20964 <flatcc_builder_end_string@@Base+0xb8>
   208f0:	ldr	r0, [r4, #16]
   208f4:	ldr	r2, [r4, #20]
   208f8:	mov	r1, #0
   208fc:	bl	12f40 <memset@plt>
   20900:	ldr	r0, [r4, #32]
   20904:	ldr	r1, [r4, #60]	; 0x3c
   20908:	ldr	ip, [r4, #64]	; 0x40
   2090c:	ldr	r3, [r0, #8]
   20910:	str	r3, [r4, #20]
   20914:	ldr	r3, [r0]
   20918:	str	r3, [r4, #28]
   2091c:	add	r1, r1, r3
   20920:	ldr	r2, [r0, #4]
   20924:	str	r1, [r4, #16]
   20928:	sub	r1, ip, r3
   2092c:	cmp	r1, r2
   20930:	movhi	r1, r2
   20934:	str	r1, [r4, #24]
   20938:	ldrh	r1, [r4, #130]	; 0x82
   2093c:	ldrh	r2, [r4, #128]	; 0x80
   20940:	cmp	r2, r1
   20944:	strhcc	r1, [r4, #128]	; 0x80
   20948:	ldrh	r1, [r0, #12]
   2094c:	sub	r0, r0, #36	; 0x24
   20950:	str	r0, [r4, #32]
   20954:	strh	r1, [r4, #130]	; 0x82
   20958:	ldr	r0, [r4, #156]	; 0x9c
   2095c:	sub	r0, r0, #1
   20960:	str	r0, [r4, #156]	; 0x9c
   20964:	mov	r0, r5
   20968:	pop	{r4, r5, fp, pc}
   2096c:	movw	r0, #26295	; 0x66b7
   20970:	movw	r1, #24978	; 0x6192
   20974:	movw	r3, #28522	; 0x6f6a
   20978:	movw	r2, #1732	; 0x6c4
   2097c:	movt	r0, #2
   20980:	movt	r1, #2
   20984:	movt	r3, #2
   20988:	bl	12f88 <__assert_fail@plt>
   2098c:	movw	r0, #28589	; 0x6fad
   20990:	movw	r1, #24978	; 0x6192
   20994:	movw	r3, #28522	; 0x6f6a
   20998:	movw	r2, #1733	; 0x6c5
   2099c:	movt	r0, #2
   209a0:	movt	r1, #2
   209a4:	movt	r3, #2
   209a8:	bl	12f88 <__assert_fail@plt>

000209ac <flatcc_builder_string_edit@@Base>:
   209ac:	ldr	r0, [r0, #16]
   209b0:	bx	lr

000209b4 <flatcc_builder_string_len@@Base>:
   209b4:	ldr	r0, [r0, #32]
   209b8:	ldr	r0, [r0, #20]
   209bc:	bx	lr

000209c0 <flatcc_builder_table_edit@@Base>:
   209c0:	ldr	r2, [r0, #32]
   209c4:	ldrh	r2, [r2, #14]
   209c8:	cmp	r2, #3
   209cc:	ldreq	r2, [r0, #16]
   209d0:	ldreq	r0, [r0, #20]
   209d4:	addeq	r0, r2, r0
   209d8:	subeq	r0, r0, r1
   209dc:	bxeq	lr
   209e0:	push	{fp, lr}
   209e4:	mov	fp, sp
   209e8:	movw	r0, #27047	; 0x69a7
   209ec:	movw	r1, #24978	; 0x6192
   209f0:	movw	r3, #28767	; 0x705f
   209f4:	movw	r2, #1794	; 0x702
   209f8:	movt	r0, #2
   209fc:	movt	r1, #2
   20a00:	movt	r3, #2
   20a04:	bl	12f88 <__assert_fail@plt>

00020a08 <flatcc_builder_table_add_copy@@Base>:
   20a08:	push	{r4, r5, r6, sl, fp, lr}
   20a0c:	add	fp, sp, #16
   20a10:	mov	r4, r3
   20a14:	ldr	r3, [fp, #8]
   20a18:	mov	r5, r2
   20a1c:	mov	r2, r4
   20a20:	bl	1fe9c <flatcc_builder_table_add@@Base>
   20a24:	mov	r6, r0
   20a28:	cmp	r0, #0
   20a2c:	beq	20a40 <flatcc_builder_table_add_copy@@Base+0x38>
   20a30:	mov	r0, r6
   20a34:	mov	r1, r5
   20a38:	mov	r2, r4
   20a3c:	bl	12eb0 <memcpy@plt>
   20a40:	mov	r0, r6
   20a44:	pop	{r4, r5, r6, sl, fp, pc}

00020a48 <flatcc_builder_push_buffer_alignment@@Base>:
   20a48:	ldrh	r1, [r0, #128]	; 0x80
   20a4c:	mov	r2, #4
   20a50:	strh	r2, [r0, #128]	; 0x80
   20a54:	mov	r0, r1
   20a58:	bx	lr

00020a5c <flatcc_builder_pop_buffer_alignment@@Base>:
   20a5c:	ldrh	r2, [r0, #128]	; 0x80
   20a60:	cmp	r2, r1
   20a64:	strhcc	r1, [r0, #128]	; 0x80
   20a68:	bx	lr

00020a6c <flatcc_builder_get_buffer_alignment@@Base>:
   20a6c:	ldrh	r0, [r0, #128]	; 0x80
   20a70:	bx	lr

00020a74 <flatcc_builder_set_vtable_clustering@@Base>:
   20a74:	clz	r1, r1
   20a78:	lsr	r1, r1, #5
   20a7c:	str	r1, [r0, #180]	; 0xb4
   20a80:	bx	lr

00020a84 <flatcc_builder_set_block_align@@Base>:
   20a84:	strh	r1, [r0, #132]	; 0x84
   20a88:	bx	lr

00020a8c <flatcc_builder_get_level@@Base>:
   20a8c:	ldr	r0, [r0, #156]	; 0x9c
   20a90:	bx	lr

00020a94 <flatcc_builder_set_max_level@@Base>:
   20a94:	str	r1, [r0, #176]	; 0xb0
   20a98:	ldr	r2, [r0, #160]	; 0xa0
   20a9c:	cmp	r2, r1
   20aa0:	strlt	r1, [r0, #160]	; 0xa0
   20aa4:	bx	lr

00020aa8 <flatcc_builder_get_buffer_size@@Base>:
   20aa8:	ldr	r1, [r0, #136]	; 0x88
   20aac:	ldr	r0, [r0, #140]	; 0x8c
   20ab0:	sub	r0, r0, r1
   20ab4:	bx	lr

00020ab8 <flatcc_builder_get_buffer_start@@Base>:
   20ab8:	ldr	r0, [r0, #136]	; 0x88
   20abc:	bx	lr

00020ac0 <flatcc_builder_get_buffer_end@@Base>:
   20ac0:	ldr	r0, [r0, #140]	; 0x8c
   20ac4:	bx	lr

00020ac8 <flatcc_builder_set_vtable_cache_limit@@Base>:
   20ac8:	str	r1, [r0, #172]	; 0xac
   20acc:	bx	lr

00020ad0 <flatcc_builder_set_identifier@@Base>:
   20ad0:	movw	r2, #24448	; 0x5f80
   20ad4:	cmp	r1, #0
   20ad8:	movt	r2, #2
   20adc:	movne	r2, r1
   20ae0:	ldr	r1, [r2]
   20ae4:	str	r1, [r0, #168]	; 0xa8
   20ae8:	bx	lr

00020aec <flatcc_builder_get_type@@Base>:
   20aec:	ldr	r0, [r0, #32]
   20af0:	cmp	r0, #0
   20af4:	ldrhne	r0, [r0, #14]
   20af8:	moveq	r0, #0
   20afc:	bx	lr

00020b00 <flatcc_builder_get_type_at@@Base>:
   20b00:	mov	r2, r0
   20b04:	cmp	r1, #1
   20b08:	mov	r0, #0
   20b0c:	ldrge	r3, [r2, #156]	; 0x9c
   20b10:	cmpge	r3, r1
   20b14:	bge	20b1c <flatcc_builder_get_type_at@@Base+0x1c>
   20b18:	bx	lr
   20b1c:	sub	r0, r1, r3
   20b20:	ldr	r1, [r2, #32]
   20b24:	add	r0, r0, r0, lsl #3
   20b28:	add	r0, r1, r0, lsl #2
   20b2c:	ldrh	r0, [r0, #14]
   20b30:	bx	lr

00020b34 <flatcc_builder_get_direct_buffer@@Base>:
   20b34:	ldr	r2, [r0, #184]	; 0xb8
   20b38:	cmp	r2, #0
   20b3c:	beq	20b50 <flatcc_builder_get_direct_buffer@@Base+0x1c>
   20b40:	ldr	r2, [r0, #188]	; 0xbc
   20b44:	ldr	r3, [r0, #192]	; 0xc0
   20b48:	cmp	r2, r3
   20b4c:	beq	20b60 <flatcc_builder_get_direct_buffer@@Base+0x2c>
   20b50:	mov	r0, #0
   20b54:	cmp	r1, #0
   20b58:	strne	r0, [r1]
   20b5c:	bx	lr
   20b60:	cmp	r1, #0
   20b64:	ldrne	r2, [r0, #212]	; 0xd4
   20b68:	strne	r2, [r1]
   20b6c:	ldr	r0, [r0, #196]	; 0xc4
   20b70:	bx	lr

00020b74 <flatcc_builder_copy_buffer@@Base>:
   20b74:	push	{fp, lr}
   20b78:	mov	fp, sp
   20b7c:	ldr	r3, [r0, #184]	; 0xb8
   20b80:	cmp	r3, #0
   20b84:	beq	20bb8 <flatcc_builder_copy_buffer@@Base+0x44>
   20b88:	add	r0, r0, #188	; 0xbc
   20b8c:	bl	21294 <flatcc_emitter_copy_buffer@@Base>
   20b90:	cmp	r0, #0
   20b94:	popne	{fp, pc}
   20b98:	movw	r0, #11792	; 0x2e10
   20b9c:	movw	r1, #24978	; 0x6192
   20ba0:	movw	r3, #28906	; 0x70ea
   20ba4:	movw	r2, #1926	; 0x786
   20ba8:	movt	r0, #2
   20bac:	movt	r1, #2
   20bb0:	movt	r3, #2
   20bb4:	bl	12f88 <__assert_fail@plt>
   20bb8:	mov	r0, #0
   20bbc:	pop	{fp, pc}

00020bc0 <flatcc_builder_finalize_buffer@@Base>:
   20bc0:	push	{r4, r5, r6, sl, fp, lr}
   20bc4:	add	fp, sp, #16
   20bc8:	mov	r4, r0
   20bcc:	ldr	r0, [r0, #136]	; 0x88
   20bd0:	cmp	r1, #0
   20bd4:	ldr	r2, [r4, #140]	; 0x8c
   20bd8:	sub	r5, r2, r0
   20bdc:	mov	r0, r5
   20be0:	strne	r5, [r1]
   20be4:	bl	12ef8 <malloc@plt>
   20be8:	cmp	r0, #0
   20bec:	beq	20c30 <flatcc_builder_finalize_buffer@@Base+0x70>
   20bf0:	mov	r6, r0
   20bf4:	mov	r0, r4
   20bf8:	mov	r2, r5
   20bfc:	mov	r1, r6
   20c00:	bl	20b74 <flatcc_builder_copy_buffer@@Base>
   20c04:	cmp	r0, #0
   20c08:	movne	r0, r6
   20c0c:	popne	{r4, r5, r6, sl, fp, pc}
   20c10:	movw	r0, #29496	; 0x7338
   20c14:	movw	r1, #24978	; 0x6192
   20c18:	movw	r3, #28975	; 0x712f
   20c1c:	movw	r2, #1948	; 0x79c
   20c20:	movt	r0, #2
   20c24:	movt	r1, #2
   20c28:	movt	r3, #2
   20c2c:	bl	12f88 <__assert_fail@plt>
   20c30:	movw	r0, #29496	; 0x7338
   20c34:	movw	r1, #24978	; 0x6192
   20c38:	movw	r3, #28975	; 0x712f
   20c3c:	movw	r2, #1944	; 0x798
   20c40:	movt	r0, #2
   20c44:	movt	r1, #2
   20c48:	movt	r3, #2
   20c4c:	bl	12f88 <__assert_fail@plt>

00020c50 <flatcc_builder_finalize_aligned_buffer@@Base>:
   20c50:	push	{r4, r5, r6, r7, fp, lr}
   20c54:	add	fp, sp, #16
   20c58:	sub	sp, sp, #8
   20c5c:	mov	r5, r0
   20c60:	mov	r4, r1
   20c64:	ldr	r0, [r0, #136]	; 0x88
   20c68:	ldr	r1, [r5, #140]	; 0x8c
   20c6c:	cmp	r4, #0
   20c70:	sub	r0, r1, r0
   20c74:	mov	r1, #0
   20c78:	strne	r0, [r4]
   20c7c:	ldrh	r2, [r5, #128]	; 0x80
   20c80:	str	r1, [sp, #4]
   20c84:	add	r0, r0, r2
   20c88:	cmp	r2, #4
   20c8c:	mov	r1, r2
   20c90:	rsb	r2, r2, #0
   20c94:	sub	r0, r0, #1
   20c98:	movls	r1, #4
   20c9c:	and	r7, r0, r2
   20ca0:	add	r0, sp, #4
   20ca4:	mov	r2, r7
   20ca8:	bl	12f34 <posix_memalign@plt>
   20cac:	ldr	r6, [sp, #4]
   20cb0:	cmp	r0, #0
   20cb4:	cmpne	r6, #0
   20cb8:	bne	20cdc <flatcc_builder_finalize_aligned_buffer@@Base+0x8c>
   20cbc:	cmp	r6, #0
   20cc0:	beq	20ce4 <flatcc_builder_finalize_aligned_buffer@@Base+0x94>
   20cc4:	mov	r0, r5
   20cc8:	mov	r1, r6
   20ccc:	mov	r2, r7
   20cd0:	bl	20b74 <flatcc_builder_copy_buffer@@Base>
   20cd4:	cmp	r0, #0
   20cd8:	bne	20cf0 <flatcc_builder_finalize_aligned_buffer@@Base+0xa0>
   20cdc:	mov	r0, r6
   20ce0:	bl	12ea4 <free@plt>
   20ce4:	mov	r6, #0
   20ce8:	cmp	r4, #0
   20cec:	strne	r6, [r4]
   20cf0:	mov	r0, r6
   20cf4:	sub	sp, fp, #16
   20cf8:	pop	{r4, r5, r6, r7, fp, pc}

00020cfc <flatcc_builder_aligned_alloc@@Base>:
   20cfc:	push	{fp, lr}
   20d00:	mov	fp, sp
   20d04:	sub	sp, sp, #8
   20d08:	mov	r2, r1
   20d0c:	mov	r1, r0
   20d10:	mov	r0, #0
   20d14:	cmp	r1, #4
   20d18:	str	r0, [sp, #4]
   20d1c:	add	r0, sp, #4
   20d20:	movls	r1, #4
   20d24:	bl	12f34 <posix_memalign@plt>
   20d28:	mov	r1, r0
   20d2c:	ldr	r0, [sp, #4]
   20d30:	cmp	r1, #0
   20d34:	cmpne	r0, #0
   20d38:	beq	20d48 <flatcc_builder_aligned_alloc@@Base+0x4c>
   20d3c:	bl	12ea4 <free@plt>
   20d40:	mov	r0, #0
   20d44:	str	r0, [sp, #4]
   20d48:	mov	sp, fp
   20d4c:	pop	{fp, pc}

00020d50 <flatcc_builder_aligned_free@@Base>:
   20d50:	b	12ea4 <free@plt>

00020d54 <flatcc_builder_get_emit_context@@Base>:
   20d54:	ldr	r0, [r0, #36]	; 0x24
   20d58:	bx	lr
   20d5c:	push	{r4, r5, r6, sl, fp, lr}
   20d60:	add	fp, sp, #16
   20d64:	sub	sp, sp, #8
   20d68:	mov	r6, r2
   20d6c:	ldr	r2, [r0, #28]
   20d70:	mov	r5, r0
   20d74:	ldr	r0, [r0, #40]	; 0x28
   20d78:	mov	r3, #1
   20d7c:	ldr	r4, [r5, #48]	; 0x30
   20d80:	str	r3, [sp]
   20d84:	mov	r3, #1
   20d88:	add	r2, r2, r1
   20d8c:	add	r1, r5, #60	; 0x3c
   20d90:	blx	r4
   20d94:	mov	r1, r0
   20d98:	mvn	r0, #0
   20d9c:	cmp	r1, #0
   20da0:	bne	20dd4 <flatcc_builder_get_emit_context@@Base+0x80>
   20da4:	ldr	r0, [r5, #28]
   20da8:	ldr	r2, [r5, #60]	; 0x3c
   20dac:	ldr	r3, [r5, #64]	; 0x40
   20db0:	ldr	r1, [r5, #32]
   20db4:	add	r2, r2, r0
   20db8:	sub	r0, r3, r0
   20dbc:	cmp	r0, r6
   20dc0:	str	r2, [r5, #16]
   20dc4:	movhi	r0, r6
   20dc8:	str	r0, [r5, #24]
   20dcc:	mov	r0, #0
   20dd0:	str	r6, [r1, #4]
   20dd4:	sub	sp, fp, #16
   20dd8:	pop	{r4, r5, r6, sl, fp, pc}

00020ddc <flatcc_emitter_recycle_page@@Base>:
   20ddc:	ldr	r3, [r0]
   20de0:	mov	r2, r0
   20de4:	mvn	r0, #0
   20de8:	cmp	r3, r1
   20dec:	ldrne	r2, [r2, #4]
   20df0:	cmpne	r2, r1
   20df4:	bne	20dfc <flatcc_emitter_recycle_page@@Base+0x20>
   20df8:	bx	lr
   20dfc:	ldr	r0, [r1, #2944]	; 0xb80
   20e00:	ldr	r2, [r1, #2948]	; 0xb84
   20e04:	str	r2, [r0, #2948]	; 0xb84
   20e08:	ldr	r2, [r1, #2948]	; 0xb84
   20e0c:	str	r0, [r2, #2944]	; 0xb80
   20e10:	ldr	r0, [r3, #2948]	; 0xb84
   20e14:	str	r3, [r1, #2944]	; 0xb80
   20e18:	str	r0, [r1, #2948]	; 0xb84
   20e1c:	str	r1, [r0, #2944]	; 0xb80
   20e20:	ldr	r0, [r1, #2944]	; 0xb80
   20e24:	str	r1, [r0, #2948]	; 0xb84
   20e28:	mov	r0, #0
   20e2c:	bx	lr

00020e30 <flatcc_emitter_reset@@Base>:
   20e30:	push	{r4, sl, fp, lr}
   20e34:	add	fp, sp, #8
   20e38:	ldr	r1, [r0]
   20e3c:	cmp	r1, #0
   20e40:	beq	20ef8 <flatcc_emitter_reset@@Base+0xc8>
   20e44:	mov	r4, r0
   20e48:	add	r2, r1, #1472	; 0x5c0
   20e4c:	mov	r0, #1472	; 0x5c0
   20e50:	mov	r3, #0
   20e54:	stmib	r4, {r1, r2}
   20e58:	str	r0, [r4, #12]
   20e5c:	str	r2, [r4, #16]
   20e60:	str	r0, [r4, #20]
   20e64:	movw	r0, #64064	; 0xfa40
   20e68:	movt	r0, #65535	; 0xffff
   20e6c:	str	r0, [r1, #2952]	; 0xb88
   20e70:	ldr	r2, [r4, #32]
   20e74:	ldr	r0, [r4, #24]
   20e78:	cmp	r2, #0
   20e7c:	moveq	r2, r0
   20e80:	streq	r0, [r4, #32]
   20e84:	str	r3, [r4, #24]
   20e88:	add	r2, r2, r2, lsl #1
   20e8c:	lsr	r2, r2, #2
   20e90:	add	r0, r2, r0, lsr #2
   20e94:	str	r0, [r4, #32]
   20e98:	ldr	r2, [r4, #28]
   20e9c:	cmp	r2, r0, lsl #1
   20ea0:	bls	20ef8 <flatcc_emitter_reset@@Base+0xc8>
   20ea4:	mov	r2, r1
   20ea8:	ldr	r0, [r2, #2944]!	; 0xb80
   20eac:	cmp	r0, r1
   20eb0:	beq	20ef8 <flatcc_emitter_reset@@Base+0xc8>
   20eb4:	ldr	r3, [r0, #2944]	; 0xb80
   20eb8:	str	r3, [r2]
   20ebc:	ldr	r2, [r0, #2944]	; 0xb80
   20ec0:	str	r1, [r2, #2948]	; 0xb84
   20ec4:	bl	12ea4 <free@plt>
   20ec8:	ldr	r0, [r4, #28]
   20ecc:	ldr	r1, [r4, #32]
   20ed0:	sub	r0, r0, #2944	; 0xb80
   20ed4:	cmp	r0, r1, lsl #1
   20ed8:	str	r0, [r4, #28]
   20edc:	popls	{r4, sl, fp, pc}
   20ee0:	ldr	r1, [r4, #4]
   20ee4:	ldr	r3, [r4]
   20ee8:	mov	r2, r1
   20eec:	ldr	r0, [r2, #2944]!	; 0xb80
   20ef0:	cmp	r0, r3
   20ef4:	bne	20eb4 <flatcc_emitter_reset@@Base+0x84>
   20ef8:	pop	{r4, sl, fp, pc}

00020efc <flatcc_emitter_clear@@Base>:
   20efc:	push	{r4, r5, r6, sl, fp, lr}
   20f00:	add	fp, sp, #16
   20f04:	ldr	r5, [r0]
   20f08:	cmp	r5, #0
   20f0c:	popeq	{r4, r5, r6, sl, fp, pc}
   20f10:	mov	r4, r0
   20f14:	ldr	r0, [r5, #2948]	; 0xb84
   20f18:	mov	r6, #0
   20f1c:	str	r6, [r0, #2944]	; 0xb80
   20f20:	b	20f30 <flatcc_emitter_clear@@Base+0x34>
   20f24:	mov	r5, r0
   20f28:	ldr	r0, [r0, #2948]	; 0xb84
   20f2c:	bl	12ea4 <free@plt>
   20f30:	ldr	r0, [r5, #2944]	; 0xb80
   20f34:	cmp	r0, #0
   20f38:	bne	20f24 <flatcc_emitter_clear@@Base+0x28>
   20f3c:	mov	r0, r5
   20f40:	bl	12ea4 <free@plt>
   20f44:	vmov.i32	q8, #0	; 0x00000000
   20f48:	add	r0, r4, #16
   20f4c:	vst1.32	{d16-d17}, [r0]
   20f50:	mov	r0, #32
   20f54:	vst1.32	{d16-d17}, [r4], r0
   20f58:	str	r6, [r4]
   20f5c:	pop	{r4, r5, r6, sl, fp, pc}

00020f60 <flatcc_emitter@@Base>:
   20f60:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20f64:	add	fp, sp, #28
   20f68:	sub	sp, sp, #4
   20f6c:	mov	r6, r0
   20f70:	mov	r7, r1
   20f74:	ldr	r0, [r0, #24]
   20f78:	ldr	r1, [fp, #8]
   20f7c:	mov	r4, r2
   20f80:	cmn	r3, #1
   20f84:	mov	r9, r6
   20f88:	add	r0, r0, r1
   20f8c:	str	r0, [r6, #24]
   20f90:	ble	210c8 <flatcc_emitter@@Base+0x168>
   20f94:	ldr	r0, [r9, #20]!
   20f98:	cmp	r0, r1
   20f9c:	bcs	21230 <flatcc_emitter@@Base+0x2d0>
   20fa0:	mov	r8, #0
   20fa4:	cmp	r4, #0
   20fa8:	beq	21288 <flatcc_emitter@@Base+0x328>
   20fac:	movw	sl, #64064	; 0xfa40
   20fb0:	movt	sl, #65535	; 0xffff
   20fb4:	ldr	r8, [r7, #4]
   20fb8:	cmp	r8, #0
   20fbc:	beq	210b8 <flatcc_emitter@@Base+0x158>
   20fc0:	ldr	r9, [r7]
   20fc4:	cmp	r8, r0
   20fc8:	mov	r5, r8
   20fcc:	bls	21084 <flatcc_emitter@@Base+0x124>
   20fd0:	mov	r5, r0
   20fd4:	cmp	r5, #0
   20fd8:	bne	21084 <flatcc_emitter@@Base+0x124>
   20fdc:	ldr	r5, [r6, #4]
   20fe0:	cmp	r5, #0
   20fe4:	beq	20ff8 <flatcc_emitter@@Base+0x98>
   20fe8:	ldr	r0, [r5, #2944]	; 0xb80
   20fec:	ldr	r1, [r6]
   20ff0:	cmp	r0, r1
   20ff4:	bne	21030 <flatcc_emitter@@Base+0xd0>
   20ff8:	movw	r0, #2956	; 0xb8c
   20ffc:	bl	12ef8 <malloc@plt>
   21000:	cmp	r0, #0
   21004:	beq	21240 <flatcc_emitter@@Base+0x2e0>
   21008:	ldr	r1, [r6, #28]
   2100c:	cmp	r5, #0
   21010:	add	r1, r1, #2944	; 0xb80
   21014:	str	r1, [r6, #28]
   21018:	beq	21054 <flatcc_emitter@@Base+0xf4>
   2101c:	ldr	r1, [r6]
   21020:	str	r1, [r0, #2944]	; 0xb80
   21024:	str	r5, [r0, #2948]	; 0xb84
   21028:	str	r0, [r1, #2948]	; 0xb84
   2102c:	str	r0, [r5, #2944]	; 0xb80
   21030:	mov	r5, #2944	; 0xb80
   21034:	str	r0, [r6, #4]
   21038:	str	r0, [r6, #16]
   2103c:	str	r5, [r6, #20]
   21040:	ldr	r1, [r0, #2948]	; 0xb84
   21044:	ldr	r1, [r1, #2952]	; 0xb88
   21048:	add	r1, r1, #2944	; 0xb80
   2104c:	str	r1, [r0, #2952]	; 0xb88
   21050:	b	21078 <flatcc_emitter@@Base+0x118>
   21054:	mov	r5, #1472	; 0x5c0
   21058:	add	r1, r0, #1472	; 0x5c0
   2105c:	str	r0, [r6]
   21060:	stmib	r6, {r0, r1, r5}
   21064:	str	r1, [r6, #16]
   21068:	str	r5, [r6, #20]
   2106c:	str	r0, [r0, #2944]	; 0xb80
   21070:	str	r0, [r0, #2948]	; 0xb84
   21074:	str	sl, [r0, #2952]	; 0xb88
   21078:	cmp	r8, r5
   2107c:	bhi	20fd4 <flatcc_emitter@@Base+0x74>
   21080:	mov	r5, r8
   21084:	ldr	r0, [r6, #16]
   21088:	mov	r1, r9
   2108c:	mov	r2, r5
   21090:	bl	12eb0 <memcpy@plt>
   21094:	ldr	r0, [r6, #16]
   21098:	ldr	r1, [r6, #20]
   2109c:	add	r9, r9, r5
   210a0:	subs	r8, r8, r5
   210a4:	add	r2, r0, r5
   210a8:	sub	r0, r1, r5
   210ac:	str	r2, [r6, #16]
   210b0:	str	r0, [r6, #20]
   210b4:	bne	20fc4 <flatcc_emitter@@Base+0x64>
   210b8:	subs	r4, r4, #1
   210bc:	add	r7, r7, #8
   210c0:	bne	20fb4 <flatcc_emitter@@Base+0x54>
   210c4:	b	21228 <flatcc_emitter@@Base+0x2c8>
   210c8:	ldr	r0, [r9, #12]!
   210cc:	cmp	r0, r1
   210d0:	bcs	21248 <flatcc_emitter@@Base+0x2e8>
   210d4:	mov	r8, #0
   210d8:	cmp	r4, #0
   210dc:	beq	21288 <flatcc_emitter@@Base+0x328>
   210e0:	add	r0, r7, r4, lsl #3
   210e4:	movw	sl, #2952	; 0xb88
   210e8:	ldr	r8, [r0, #-4]
   210ec:	sub	r1, r0, #8
   210f0:	str	r1, [sp]
   210f4:	cmp	r8, #0
   210f8:	beq	2121c <flatcc_emitter@@Base+0x2bc>
   210fc:	ldr	r0, [sp]
   21100:	ldr	r0, [r0]
   21104:	add	r7, r0, r8
   21108:	ldr	r1, [r9]
   2110c:	b	211d4 <flatcc_emitter@@Base+0x274>
   21110:	ldr	r5, [r6]
   21114:	cmp	r5, #0
   21118:	beq	21140 <flatcc_emitter@@Base+0x1e0>
   2111c:	ldr	r0, [r5, #2948]	; 0xb84
   21120:	ldr	r1, [r6, #4]
   21124:	cmp	r0, r1
   21128:	beq	21140 <flatcc_emitter@@Base+0x1e0>
   2112c:	ldr	r1, [r5, #2952]	; 0xb88
   21130:	mov	r2, r0
   21134:	sub	r1, r1, #2944	; 0xb80
   21138:	str	r1, [r2, #2952]!	; 0xb88
   2113c:	b	2117c <flatcc_emitter@@Base+0x21c>
   21140:	movw	r0, #2956	; 0xb8c
   21144:	bl	12ef8 <malloc@plt>
   21148:	cmp	r0, #0
   2114c:	beq	21240 <flatcc_emitter@@Base+0x2e0>
   21150:	ldr	r1, [r6, #28]
   21154:	cmp	r5, #0
   21158:	add	r1, r1, #2944	; 0xb80
   2115c:	str	r1, [r6, #28]
   21160:	beq	211a4 <flatcc_emitter@@Base+0x244>
   21164:	ldr	r1, [r6, #4]
   21168:	add	r2, r0, sl
   2116c:	str	r5, [r0, #2944]	; 0xb80
   21170:	str	r1, [r0, #2948]	; 0xb84
   21174:	str	r0, [r5, #2948]	; 0xb84
   21178:	str	r0, [r1, #2944]	; 0xb80
   2117c:	str	r0, [r6]
   21180:	add	r3, r0, #2944	; 0xb80
   21184:	mov	r1, #2944	; 0xb80
   21188:	str	r3, [r6, #8]
   2118c:	str	r1, [r6, #12]
   21190:	ldr	r0, [r0, #2944]	; 0xb80
   21194:	ldr	r0, [r0, #2952]	; 0xb88
   21198:	sub	r0, r0, #2944	; 0xb80
   2119c:	str	r0, [r2]
   211a0:	b	211d4 <flatcc_emitter@@Base+0x274>
   211a4:	add	r2, r0, #1472	; 0x5c0
   211a8:	mov	r1, #1472	; 0x5c0
   211ac:	str	r0, [r6]
   211b0:	stmib	r6, {r0, r2}
   211b4:	str	r1, [r6, #12]
   211b8:	str	r2, [r6, #16]
   211bc:	movw	r2, #64064	; 0xfa40
   211c0:	str	r1, [r6, #20]
   211c4:	str	r0, [r0, #2944]	; 0xb80
   211c8:	str	r0, [r0, #2948]	; 0xb84
   211cc:	movt	r2, #65535	; 0xffff
   211d0:	str	r2, [r0, #2952]	; 0xb88
   211d4:	cmp	r8, r1
   211d8:	bls	211ec <flatcc_emitter@@Base+0x28c>
   211dc:	cmp	r1, #0
   211e0:	mov	r5, r1
   211e4:	beq	21110 <flatcc_emitter@@Base+0x1b0>
   211e8:	b	211f0 <flatcc_emitter@@Base+0x290>
   211ec:	mov	r5, r8
   211f0:	sub	r0, r1, r5
   211f4:	sub	r7, r7, r5
   211f8:	mov	r2, r5
   211fc:	str	r0, [r6, #12]
   21200:	mov	r1, r7
   21204:	ldr	r0, [r6, #8]
   21208:	sub	r0, r0, r5
   2120c:	str	r0, [r6, #8]
   21210:	bl	12eb0 <memcpy@plt>
   21214:	subs	r8, r8, r5
   21218:	bne	21108 <flatcc_emitter@@Base+0x1a8>
   2121c:	ldr	r0, [sp]
   21220:	subs	r4, r4, #1
   21224:	bne	210e8 <flatcc_emitter@@Base+0x188>
   21228:	mov	r8, #0
   2122c:	b	21288 <flatcc_emitter@@Base+0x328>
   21230:	ldr	r5, [r6, #16]
   21234:	add	r2, r5, r1
   21238:	str	r2, [r6, #16]
   2123c:	b	21254 <flatcc_emitter@@Base+0x2f4>
   21240:	mvn	r8, #0
   21244:	b	21288 <flatcc_emitter@@Base+0x328>
   21248:	ldr	r2, [r6, #8]
   2124c:	sub	r5, r2, r1
   21250:	str	r5, [r6, #8]
   21254:	sub	r0, r0, r1
   21258:	mov	r8, #0
   2125c:	cmp	r4, #0
   21260:	str	r0, [r9]
   21264:	beq	21288 <flatcc_emitter@@Base+0x328>
   21268:	ldm	r7, {r1, r2}
   2126c:	mov	r0, r5
   21270:	bl	12eb0 <memcpy@plt>
   21274:	ldr	r0, [r7, #4]
   21278:	add	r7, r7, #8
   2127c:	subs	r4, r4, #1
   21280:	add	r5, r5, r0
   21284:	bne	21268 <flatcc_emitter@@Base+0x308>
   21288:	mov	r0, r8
   2128c:	sub	sp, fp, #28
   21290:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

00021294 <flatcc_emitter_copy_buffer@@Base>:
   21294:	push	{r4, r5, r6, sl, fp, lr}
   21298:	add	fp, sp, #16
   2129c:	mov	r3, r2
   212a0:	ldr	r2, [r0, #24]
   212a4:	mov	r5, #0
   212a8:	cmp	r2, r3
   212ac:	bhi	21348 <flatcc_emitter_copy_buffer@@Base+0xb4>
   212b0:	mov	r4, r0
   212b4:	ldr	r0, [r0]
   212b8:	cmp	r0, #0
   212bc:	beq	21348 <flatcc_emitter_copy_buffer@@Base+0xb4>
   212c0:	mov	r6, r1
   212c4:	ldr	r1, [r4, #4]
   212c8:	cmp	r0, r1
   212cc:	beq	21338 <flatcc_emitter_copy_buffer@@Base+0xa4>
   212d0:	ldr	r0, [r4, #12]
   212d4:	ldr	r1, [r4, #8]
   212d8:	rsb	r5, r0, #2944	; 0xb80
   212dc:	mov	r0, r6
   212e0:	mov	r2, r5
   212e4:	bl	12eb0 <memcpy@plt>
   212e8:	ldm	r4, {r0, r1}
   212ec:	add	r5, r6, r5
   212f0:	ldr	r6, [r0, #2944]	; 0xb80
   212f4:	cmp	r6, r1
   212f8:	beq	21320 <flatcc_emitter_copy_buffer@@Base+0x8c>
   212fc:	mov	r0, r5
   21300:	mov	r1, r6
   21304:	mov	r2, #2944	; 0xb80
   21308:	bl	12eb0 <memcpy@plt>
   2130c:	ldr	r6, [r6, #2944]	; 0xb80
   21310:	ldr	r0, [r4, #4]
   21314:	add	r5, r5, #2944	; 0xb80
   21318:	cmp	r6, r0
   2131c:	bne	212fc <flatcc_emitter_copy_buffer@@Base+0x68>
   21320:	ldr	r0, [r4, #20]
   21324:	mov	r1, r6
   21328:	rsb	r2, r0, #2944	; 0xb80
   2132c:	mov	r0, r5
   21330:	bl	12eb0 <memcpy@plt>
   21334:	b	21348 <flatcc_emitter_copy_buffer@@Base+0xb4>
   21338:	ldr	r1, [r4, #8]
   2133c:	mov	r0, r6
   21340:	bl	12eb0 <memcpy@plt>
   21344:	mov	r5, r6
   21348:	mov	r0, r5
   2134c:	pop	{r4, r5, r6, sl, fp, pc}

00021350 <flatcc_verify_error_string@@Base>:
   21350:	cmp	r0, #36	; 0x24
   21354:	movwhi	r0, #30710	; 0x77f6
   21358:	movthi	r0, #2
   2135c:	bxhi	lr
   21360:	movw	r1, #30720	; 0x7800
   21364:	movt	r1, #2
   21368:	ldr	r0, [r1, r0, lsl #2]
   2136c:	bx	lr

00021370 <flatcc_verify_field@@Base>:
   21370:	b	21374 <flatcc_verify_field@@Base+0x4>
   21374:	push	{r4, sl, fp, lr}
   21378:	add	fp, sp, #8
   2137c:	ldrh	r4, [r0, #22]
   21380:	mov	ip, #4
   21384:	mov	lr, #0
   21388:	add	r1, ip, r1, lsl #1
   2138c:	uxth	ip, r1
   21390:	cmp	ip, r4
   21394:	bcs	213c0 <flatcc_verify_field@@Base+0x50>
   21398:	ldr	r4, [r0, #12]
   2139c:	uxtah	r1, r4, r1
   213a0:	ldrh	ip, [r1]
   213a4:	cmp	ip, #0
   213a8:	beq	213c0 <flatcc_verify_field@@Base+0x50>
   213ac:	add	r1, ip, r2
   213b0:	ldrh	r2, [r0, #20]
   213b4:	mov	lr, #13
   213b8:	cmp	r1, r2
   213bc:	bls	213c8 <flatcc_verify_field@@Base+0x58>
   213c0:	mov	r0, lr
   213c4:	pop	{r4, sl, fp, pc}
   213c8:	ldr	r1, [r0]
   213cc:	ldr	r0, [r0, #16]
   213d0:	add	r1, r1, ip
   213d4:	add	r0, r1, r0
   213d8:	sub	r1, r3, #1
   213dc:	ands	r0, r0, r1
   213e0:	movwne	r0, #12
   213e4:	pop	{r4, sl, fp, pc}

000213e8 <flatcc_verify_string_field@@Base>:
   213e8:	push	{r4, sl, fp, lr}
   213ec:	add	fp, sp, #8
   213f0:	sub	sp, sp, #8
   213f4:	add	r3, sp, #4
   213f8:	mov	r4, r0
   213fc:	bl	21470 <flatcc_verify_string_field@@Base+0x88>
   21400:	cmp	r0, #0
   21404:	bne	21468 <flatcc_verify_string_field@@Base+0x80>
   21408:	ldr	r3, [sp, #4]
   2140c:	cmp	r3, #0
   21410:	beq	21468 <flatcc_verify_string_field@@Base+0x80>
   21414:	ldr	r1, [r4]
   21418:	ldr	r0, [r1, r3]
   2141c:	add	r2, r0, r3
   21420:	mov	r0, #17
   21424:	tst	r2, #3
   21428:	bne	21468 <flatcc_verify_string_field@@Base+0x80>
   2142c:	cmp	r2, r3
   21430:	bls	21468 <flatcc_verify_string_field@@Base+0x80>
   21434:	ldr	r4, [r4, #4]
   21438:	add	r3, r2, #4
   2143c:	cmp	r4, r3
   21440:	ldrcs	r2, [r1, r2]
   21444:	subcs	ip, r4, r3
   21448:	movcs	r0, #8
   2144c:	addcs	r4, r2, #1
   21450:	cmpcs	ip, r4
   21454:	bcc	21468 <flatcc_verify_string_field@@Base+0x80>
   21458:	add	r0, r1, r3
   2145c:	ldrb	r0, [r0, r2]
   21460:	cmp	r0, #0
   21464:	movwne	r0, #7
   21468:	sub	sp, fp, #8
   2146c:	pop	{r4, sl, fp, pc}
   21470:	push	{fp, lr}
   21474:	mov	fp, sp
   21478:	mov	ip, r2
   2147c:	mov	r2, #4
   21480:	add	r1, r2, r1, lsl #1
   21484:	ldrh	r2, [r0, #22]
   21488:	uxth	lr, r1
   2148c:	cmp	lr, r2
   21490:	bcs	214d8 <flatcc_verify_string_field@@Base+0xf0>
   21494:	ldr	r2, [r0, #12]
   21498:	uxtah	r1, r2, r1
   2149c:	ldrh	r1, [r1]
   214a0:	cmp	r1, #0
   214a4:	beq	214d8 <flatcc_verify_string_field@@Base+0xf0>
   214a8:	ldrh	lr, [r0, #20]
   214ac:	add	r2, r1, #4
   214b0:	mov	ip, #13
   214b4:	cmp	r2, lr
   214b8:	bhi	214e8 <flatcc_verify_string_field@@Base+0x100>
   214bc:	ldr	r0, [r0, #16]
   214c0:	mov	ip, #12
   214c4:	add	r0, r0, r1
   214c8:	tst	r0, #3
   214cc:	moveq	ip, #0
   214d0:	streq	r0, [r3]
   214d4:	b	214e8 <flatcc_verify_string_field@@Base+0x100>
   214d8:	cmp	ip, #0
   214dc:	mov	r0, #0
   214e0:	str	r0, [r3]
   214e4:	movwne	ip, #4
   214e8:	mov	r0, ip
   214ec:	pop	{fp, pc}

000214f0 <flatcc_verify_vector_field@@Base>:
   214f0:	push	{r4, r5, r6, sl, fp, lr}
   214f4:	add	fp, sp, #16
   214f8:	sub	sp, sp, #8
   214fc:	mov	r6, r3
   21500:	add	r3, sp, #4
   21504:	mov	r5, r0
   21508:	bl	21470 <flatcc_verify_string_field@@Base+0x88>
   2150c:	cmp	r0, #0
   21510:	bne	21590 <flatcc_verify_vector_field@@Base+0xa0>
   21514:	ldr	r4, [sp, #4]
   21518:	cmp	r4, #0
   2151c:	beq	21590 <flatcc_verify_vector_field@@Base+0xa0>
   21520:	ldr	r3, [r5]
   21524:	ldr	r2, [fp, #8]
   21528:	ldr	r0, [r3, r4]
   2152c:	cmp	r2, #4
   21530:	movls	r2, #4
   21534:	add	r1, r0, r4
   21538:	mov	r0, #16
   2153c:	cmp	r1, r4
   21540:	bls	21590 <flatcc_verify_vector_field@@Base+0xa0>
   21544:	ldr	r5, [r5, #4]
   21548:	add	r4, r1, #4
   2154c:	cmp	r4, r5
   21550:	bhi	21590 <flatcc_verify_vector_field@@Base+0xa0>
   21554:	sub	r2, r2, #1
   21558:	orr	r2, r2, #3
   2155c:	tst	r4, r2
   21560:	bne	21590 <flatcc_verify_vector_field@@Base+0xa0>
   21564:	ldr	r4, [fp, #12]
   21568:	ldr	r2, [r3, r1]
   2156c:	mov	r0, #25
   21570:	cmp	r2, r4
   21574:	bhi	21590 <flatcc_verify_vector_field@@Base+0xa0>
   21578:	sub	r0, r5, #4
   2157c:	mul	r2, r2, r6
   21580:	sub	r1, r0, r1
   21584:	mov	r0, #0
   21588:	cmp	r1, r2
   2158c:	movwcc	r0, #26
   21590:	sub	sp, fp, #16
   21594:	pop	{r4, r5, r6, sl, fp, pc}

00021598 <flatcc_verify_string_vector_field@@Base>:
   21598:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   2159c:	add	fp, sp, #24
   215a0:	sub	sp, sp, #8
   215a4:	add	r3, sp, #4
   215a8:	mov	r4, r0
   215ac:	bl	21470 <flatcc_verify_string_field@@Base+0x88>
   215b0:	cmp	r0, #0
   215b4:	bne	216d8 <flatcc_verify_string_vector_field@@Base+0x140>
   215b8:	ldr	r1, [sp, #4]
   215bc:	cmp	r1, #0
   215c0:	beq	216d8 <flatcc_verify_string_vector_field@@Base+0x140>
   215c4:	ldr	r3, [r4]
   215c8:	mov	r0, #16
   215cc:	ldr	r2, [r3, r1]
   215d0:	add	r5, r2, r1
   215d4:	cmp	r5, r1
   215d8:	bls	216d8 <flatcc_verify_string_vector_field@@Base+0x140>
   215dc:	ldr	lr, [r4, #4]
   215e0:	add	r7, r5, #4
   215e4:	cmp	r7, lr
   215e8:	bhi	216d8 <flatcc_verify_string_vector_field@@Base+0x140>
   215ec:	ands	r7, r7, #3
   215f0:	bne	216d8 <flatcc_verify_string_vector_field@@Base+0x140>
   215f4:	ldr	ip, [r3, r5]
   215f8:	mov	r0, #25
   215fc:	cmn	ip, #-1073741823	; 0xc0000001
   21600:	bhi	216d8 <flatcc_verify_string_vector_field@@Base+0x140>
   21604:	sub	r0, lr, #4
   21608:	sub	r4, r0, r5
   2160c:	mov	r0, #26
   21610:	cmp	r4, ip, lsl #2
   21614:	bcc	216d8 <flatcc_verify_string_vector_field@@Base+0x140>
   21618:	cmp	ip, #0
   2161c:	beq	216c4 <flatcc_verify_string_vector_field@@Base+0x12c>
   21620:	sub	r0, lr, #8
   21624:	mov	r9, #0
   21628:	sub	r0, r0, r2
   2162c:	sub	r8, r0, r1
   21630:	add	r0, r3, r2
   21634:	rsb	r3, r0, #0
   21638:	sub	r0, r1, r3
   2163c:	add	r4, r1, r2
   21640:	ldr	r6, [r0, #4]
   21644:	mov	r0, #17
   21648:	add	r7, r4, r6
   2164c:	add	r5, r7, #4
   21650:	tst	r5, #3
   21654:	bne	216d8 <flatcc_verify_string_vector_field@@Base+0x140>
   21658:	add	r4, r4, #4
   2165c:	cmp	r5, r4
   21660:	bls	216d8 <flatcc_verify_string_vector_field@@Base+0x140>
   21664:	add	r4, r7, #8
   21668:	cmp	lr, r4
   2166c:	bcc	216d8 <flatcc_verify_string_vector_field@@Base+0x140>
   21670:	add	r0, r1, r6
   21674:	sub	r4, r8, r6
   21678:	sub	r0, r0, r3
   2167c:	ldr	r0, [r0, #4]
   21680:	add	r5, r0, #1
   21684:	cmp	r4, r5
   21688:	bcc	216cc <flatcc_verify_string_vector_field@@Base+0x134>
   2168c:	add	r0, r6, r0
   21690:	add	r0, r1, r0
   21694:	sub	r0, r0, r3
   21698:	ldrb	r0, [r0, #8]
   2169c:	cmp	r0, #0
   216a0:	bne	216d4 <flatcc_verify_string_vector_field@@Base+0x13c>
   216a4:	add	r9, r9, #1
   216a8:	sub	r8, r8, #4
   216ac:	add	r2, r2, #4
   216b0:	sub	r3, r3, #4
   216b4:	mov	r0, #0
   216b8:	cmp	r9, ip
   216bc:	bcc	21638 <flatcc_verify_string_vector_field@@Base+0xa0>
   216c0:	b	216d8 <flatcc_verify_string_vector_field@@Base+0x140>
   216c4:	mov	r0, #0
   216c8:	b	216d8 <flatcc_verify_string_vector_field@@Base+0x140>
   216cc:	mov	r0, #8
   216d0:	b	216d8 <flatcc_verify_string_vector_field@@Base+0x140>
   216d4:	mov	r0, #7
   216d8:	sub	sp, fp, #24
   216dc:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}

000216e0 <flatcc_verify_table_field@@Base>:
   216e0:	push	{r4, r5, r6, sl, fp, lr}
   216e4:	add	fp, sp, #16
   216e8:	sub	sp, sp, #32
   216ec:	mov	r6, r3
   216f0:	add	r3, sp, #4
   216f4:	mov	r5, r0
   216f8:	bl	21470 <flatcc_verify_string_field@@Base+0x88>
   216fc:	cmp	r0, #0
   21700:	bne	217dc <flatcc_verify_table_field@@Base+0xfc>
   21704:	ldr	r4, [sp, #4]
   21708:	cmp	r4, #0
   2170c:	beq	217dc <flatcc_verify_table_field@@Base+0xfc>
   21710:	ldr	r2, [r5]
   21714:	ldmib	r5, {r1, r3}
   21718:	ldr	r0, [r2, r4]
   2171c:	subs	r3, r3, #1
   21720:	str	r3, [sp, #16]
   21724:	beq	217d8 <flatcc_verify_table_field@@Base+0xf8>
   21728:	add	r3, r0, r4
   2172c:	mov	r0, #15
   21730:	tst	r3, #3
   21734:	bne	217dc <flatcc_verify_table_field@@Base+0xfc>
   21738:	cmp	r3, r4
   2173c:	bls	217dc <flatcc_verify_table_field@@Base+0xfc>
   21740:	add	r5, r3, #4
   21744:	cmp	r5, r1
   21748:	bhi	217dc <flatcc_verify_table_field@@Base+0xfc>
   2174c:	str	r3, [sp, #24]
   21750:	ldr	r0, [r2, r3]
   21754:	sub	r5, r3, r0
   21758:	mov	r0, #29
   2175c:	tst	r5, #-2147483647	; 0x80000001
   21760:	bne	217dc <flatcc_verify_table_field@@Base+0xfc>
   21764:	add	lr, r5, #2
   21768:	mov	r0, #27
   2176c:	cmp	lr, r1
   21770:	bhi	217dc <flatcc_verify_table_field@@Base+0xfc>
   21774:	mov	ip, r2
   21778:	mov	r0, #30
   2177c:	ldrh	r4, [ip, r5]!
   21780:	tst	r4, #1
   21784:	strh	r4, [sp, #30]
   21788:	bne	217dc <flatcc_verify_table_field@@Base+0xfc>
   2178c:	add	r5, r5, r4
   21790:	cmp	r5, r1
   21794:	bhi	217dc <flatcc_verify_table_field@@Base+0xfc>
   21798:	mov	r0, #28
   2179c:	cmp	r4, #4
   217a0:	bcc	217dc <flatcc_verify_table_field@@Base+0xfc>
   217a4:	add	r0, r2, lr
   217a8:	sub	r3, r1, r3
   217ac:	ldrh	r5, [r0]
   217b0:	mov	r0, #20
   217b4:	cmp	r3, r5
   217b8:	strh	r5, [sp, #28]
   217bc:	bcc	217dc <flatcc_verify_table_field@@Base+0xfc>
   217c0:	add	r0, sp, #8
   217c4:	str	r2, [sp, #8]
   217c8:	str	ip, [sp, #20]
   217cc:	str	r1, [sp, #12]
   217d0:	blx	r6
   217d4:	b	217dc <flatcc_verify_table_field@@Base+0xfc>
   217d8:	mov	r0, #3
   217dc:	sub	sp, fp, #16
   217e0:	pop	{r4, r5, r6, sl, fp, pc}

000217e4 <flatcc_verify_table_vector_field@@Base>:
   217e4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   217e8:	add	fp, sp, #28
   217ec:	sub	sp, sp, #36	; 0x24
   217f0:	mov	r9, r3
   217f4:	add	r3, sp, #8
   217f8:	mov	r5, r0
   217fc:	bl	21470 <flatcc_verify_string_field@@Base+0x88>
   21800:	cmp	r0, #0
   21804:	bne	21a44 <flatcc_verify_table_vector_field@@Base+0x260>
   21808:	ldr	r1, [sp, #8]
   2180c:	cmp	r1, #0
   21810:	beq	21a44 <flatcc_verify_table_vector_field@@Base+0x260>
   21814:	ldr	r2, [r5, #8]
   21818:	cmp	r2, #1
   2181c:	blt	21a40 <flatcc_verify_table_vector_field@@Base+0x25c>
   21820:	ldr	r6, [r5]
   21824:	mov	r0, #16
   21828:	ldr	r3, [r6, r1]
   2182c:	add	r7, r3, r1
   21830:	cmp	r7, r1
   21834:	bls	21a44 <flatcc_verify_table_vector_field@@Base+0x260>
   21838:	ldr	lr, [r5, #4]
   2183c:	add	r5, r7, #4
   21840:	cmp	r5, lr
   21844:	bhi	21a44 <flatcc_verify_table_vector_field@@Base+0x260>
   21848:	ands	r4, r5, #3
   2184c:	bne	21a44 <flatcc_verify_table_vector_field@@Base+0x260>
   21850:	ldr	r4, [r6, r7]
   21854:	mov	r0, #25
   21858:	cmn	r4, #-1073741823	; 0xc0000001
   2185c:	bhi	21a44 <flatcc_verify_table_vector_field@@Base+0x260>
   21860:	sub	ip, lr, #4
   21864:	mov	r0, #26
   21868:	sub	r7, ip, r7
   2186c:	cmp	r7, r4, lsl #2
   21870:	bcc	21a44 <flatcc_verify_table_vector_field@@Base+0x260>
   21874:	cmp	r4, #0
   21878:	beq	21a30 <flatcc_verify_table_vector_field@@Base+0x24c>
   2187c:	sub	r0, ip, r3
   21880:	mov	sl, #0
   21884:	str	r4, [sp]
   21888:	sub	r8, r0, r1
   2188c:	sub	r0, r2, #2
   21890:	str	r0, [sp, #4]
   21894:	ldr	r1, [sp, #4]
   21898:	ldr	r0, [r6, r5]
   2189c:	cmp	r1, #0
   218a0:	str	r1, [sp, #20]
   218a4:	beq	21a38 <flatcc_verify_table_vector_field@@Base+0x254>
   218a8:	add	r1, r5, r0
   218ac:	add	ip, r1, #4
   218b0:	tst	r1, #3
   218b4:	bne	21980 <flatcc_verify_table_vector_field@@Base+0x19c>
   218b8:	cmp	r1, r5
   218bc:	bls	21980 <flatcc_verify_table_vector_field@@Base+0x19c>
   218c0:	cmp	ip, lr
   218c4:	bhi	21980 <flatcc_verify_table_vector_field@@Base+0x19c>
   218c8:	str	r1, [sp, #28]
   218cc:	add	r2, r6, r0
   218d0:	ldr	r2, [r2, r5]
   218d4:	sub	r7, r0, r2
   218d8:	add	r3, r5, r7
   218dc:	tst	r3, #-2147483647	; 0x80000001
   218e0:	bne	21980 <flatcc_verify_table_vector_field@@Base+0x19c>
   218e4:	add	r4, r3, #2
   218e8:	cmp	r4, lr
   218ec:	bhi	21980 <flatcc_verify_table_vector_field@@Base+0x19c>
   218f0:	add	r7, r6, r7
   218f4:	add	r7, r7, r5
   218f8:	ldrh	r7, [r7]
   218fc:	cmp	r7, #4
   21900:	strh	r7, [sp, #34]	; 0x22
   21904:	bcc	21980 <flatcc_verify_table_vector_field@@Base+0x19c>
   21908:	ands	r4, r7, #1
   2190c:	bne	21980 <flatcc_verify_table_vector_field@@Base+0x19c>
   21910:	add	r7, r0, r7
   21914:	sub	r2, r7, r2
   21918:	add	r2, r5, r2
   2191c:	cmp	r2, lr
   21920:	bhi	21980 <flatcc_verify_table_vector_field@@Base+0x19c>
   21924:	add	r2, r6, r3
   21928:	sub	r0, r8, r0
   2192c:	ldrh	r3, [r2, #2]
   21930:	cmp	r0, r3
   21934:	strh	r3, [sp, #32]
   21938:	bcc	21980 <flatcc_verify_table_vector_field@@Base+0x19c>
   2193c:	add	r0, sp, #12
   21940:	str	r6, [sp, #12]
   21944:	str	r2, [sp, #24]
   21948:	mov	r4, lr
   2194c:	str	lr, [sp, #16]
   21950:	blx	r9
   21954:	cmp	r0, #0
   21958:	bne	21a4c <flatcc_verify_table_vector_field@@Base+0x268>
   2195c:	ldr	r1, [sp]
   21960:	add	sl, sl, #1
   21964:	sub	r8, r8, #4
   21968:	add	r5, r5, #4
   2196c:	mov	r0, #0
   21970:	mov	lr, r4
   21974:	cmp	sl, r1
   21978:	bcc	21894 <flatcc_verify_table_vector_field@@Base+0xb0>
   2197c:	b	21a44 <flatcc_verify_table_vector_field@@Base+0x260>
   21980:	ldr	r0, [sp, #4]
   21984:	str	r0, [sp, #20]
   21988:	mov	r0, #15
   2198c:	tst	r1, #3
   21990:	bne	21a44 <flatcc_verify_table_vector_field@@Base+0x260>
   21994:	cmp	r1, r5
   21998:	bls	21a44 <flatcc_verify_table_vector_field@@Base+0x260>
   2199c:	cmp	ip, lr
   219a0:	bhi	21a44 <flatcc_verify_table_vector_field@@Base+0x260>
   219a4:	str	r1, [sp, #28]
   219a8:	ldr	r0, [r6, r1]
   219ac:	sub	r7, r1, r0
   219b0:	mov	r0, #29
   219b4:	tst	r7, #-2147483647	; 0x80000001
   219b8:	bne	21a44 <flatcc_verify_table_vector_field@@Base+0x260>
   219bc:	add	r3, r7, #2
   219c0:	mov	r0, #27
   219c4:	cmp	r3, lr
   219c8:	bhi	21a44 <flatcc_verify_table_vector_field@@Base+0x260>
   219cc:	mov	r2, r6
   219d0:	mov	r0, #30
   219d4:	ldrh	r5, [r2, r7]!
   219d8:	tst	r5, #1
   219dc:	strh	r5, [sp, #34]	; 0x22
   219e0:	bne	21a44 <flatcc_verify_table_vector_field@@Base+0x260>
   219e4:	add	r7, r7, r5
   219e8:	cmp	r7, lr
   219ec:	bhi	21a44 <flatcc_verify_table_vector_field@@Base+0x260>
   219f0:	mov	r0, #28
   219f4:	cmp	r5, #4
   219f8:	bcc	21a44 <flatcc_verify_table_vector_field@@Base+0x260>
   219fc:	add	r0, r6, r3
   21a00:	sub	r1, lr, r1
   21a04:	ldrh	r3, [r0]
   21a08:	mov	r0, #20
   21a0c:	cmp	r1, r3
   21a10:	strh	r3, [sp, #32]
   21a14:	bcc	21a44 <flatcc_verify_table_vector_field@@Base+0x260>
   21a18:	add	r0, sp, #12
   21a1c:	str	r6, [sp, #12]
   21a20:	str	r2, [sp, #24]
   21a24:	str	lr, [sp, #16]
   21a28:	blx	r9
   21a2c:	b	21a44 <flatcc_verify_table_vector_field@@Base+0x260>
   21a30:	mov	r0, #0
   21a34:	b	21a44 <flatcc_verify_table_vector_field@@Base+0x260>
   21a38:	mov	r0, #0
   21a3c:	str	r0, [sp, #20]
   21a40:	mov	r0, #3
   21a44:	sub	sp, fp, #28
   21a48:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21a4c:	ldr	r0, [r6, r5]
   21a50:	ldr	r1, [sp, #4]
   21a54:	mov	lr, r4
   21a58:	str	r1, [sp, #20]
   21a5c:	add	r1, r0, r5
   21a60:	add	ip, r1, #4
   21a64:	b	21988 <flatcc_verify_table_vector_field@@Base+0x1a4>

00021a68 <flatcc_verify_union_table@@Base>:
   21a68:	push	{r4, r5, r6, sl, fp, lr}
   21a6c:	add	fp, sp, #16
   21a70:	sub	sp, sp, #24
   21a74:	ldr	r5, [r0, #16]
   21a78:	ldr	r3, [r0, #20]
   21a7c:	ldr	ip, [r0]
   21a80:	ldr	r2, [r0, #4]
   21a84:	ldr	r0, [r0, #8]
   21a88:	subs	r0, r0, #1
   21a8c:	str	r0, [sp, #8]
   21a90:	beq	21b44 <flatcc_verify_union_table@@Base+0xdc>
   21a94:	add	r3, r3, r5
   21a98:	mov	r0, #15
   21a9c:	tst	r3, #3
   21aa0:	bne	21b48 <flatcc_verify_union_table@@Base+0xe0>
   21aa4:	cmp	r3, r5
   21aa8:	bls	21b48 <flatcc_verify_union_table@@Base+0xe0>
   21aac:	add	r6, r3, #4
   21ab0:	cmp	r6, r2
   21ab4:	bhi	21b48 <flatcc_verify_union_table@@Base+0xe0>
   21ab8:	str	r3, [sp, #16]
   21abc:	ldr	r0, [ip, r3]
   21ac0:	sub	r5, r3, r0
   21ac4:	mov	r0, #29
   21ac8:	tst	r5, #-2147483647	; 0x80000001
   21acc:	bne	21b48 <flatcc_verify_union_table@@Base+0xe0>
   21ad0:	add	r4, r5, #2
   21ad4:	mov	r0, #27
   21ad8:	cmp	r4, r2
   21adc:	bhi	21b48 <flatcc_verify_union_table@@Base+0xe0>
   21ae0:	mov	lr, ip
   21ae4:	mov	r0, #30
   21ae8:	ldrh	r6, [lr, r5]!
   21aec:	tst	r6, #1
   21af0:	strh	r6, [sp, #22]
   21af4:	bne	21b48 <flatcc_verify_union_table@@Base+0xe0>
   21af8:	add	r5, r5, r6
   21afc:	cmp	r5, r2
   21b00:	bhi	21b48 <flatcc_verify_union_table@@Base+0xe0>
   21b04:	mov	r0, #28
   21b08:	cmp	r6, #4
   21b0c:	bcc	21b48 <flatcc_verify_union_table@@Base+0xe0>
   21b10:	add	r0, ip, r4
   21b14:	sub	r3, r2, r3
   21b18:	ldrh	r4, [r0]
   21b1c:	mov	r0, #20
   21b20:	cmp	r3, r4
   21b24:	strh	r4, [sp, #20]
   21b28:	bcc	21b48 <flatcc_verify_union_table@@Base+0xe0>
   21b2c:	mov	r0, sp
   21b30:	str	ip, [sp]
   21b34:	str	lr, [sp, #12]
   21b38:	str	r2, [sp, #4]
   21b3c:	blx	r1
   21b40:	b	21b48 <flatcc_verify_union_table@@Base+0xe0>
   21b44:	mov	r0, #3
   21b48:	sub	sp, fp, #16
   21b4c:	pop	{r4, r5, r6, sl, fp, pc}

00021b50 <flatcc_verify_union_struct@@Base>:
   21b50:	push	{fp, lr}
   21b54:	mov	fp, sp
   21b58:	ldr	lr, [r0, #20]
   21b5c:	mov	r3, r0
   21b60:	mov	r0, #18
   21b64:	cmp	lr, #0
   21b68:	beq	21ba4 <flatcc_verify_union_struct@@Base+0x54>
   21b6c:	ldr	ip, [r3, #4]
   21b70:	ldr	r3, [r3, #16]
   21b74:	add	r3, r3, lr
   21b78:	cmp	r3, ip
   21b7c:	bhi	21ba4 <flatcc_verify_union_struct@@Base+0x54>
   21b80:	adds	r1, r3, r1
   21b84:	mov	r0, #10
   21b88:	bcs	21ba4 <flatcc_verify_union_struct@@Base+0x54>
   21b8c:	mov	r0, #9
   21b90:	cmp	r1, ip
   21b94:	pophi	{fp, pc}
   21b98:	sub	r0, r2, #1
   21b9c:	ands	r0, r3, r0
   21ba0:	movwne	r0, #11
   21ba4:	pop	{fp, pc}

00021ba8 <flatcc_verify_union_string@@Base>:
   21ba8:	mov	r1, r0
   21bac:	ldr	r3, [r0, #16]
   21bb0:	ldr	r0, [r0, #20]
   21bb4:	add	r2, r0, r3
   21bb8:	mov	r0, #17
   21bbc:	tst	r2, #3
   21bc0:	bne	21c14 <flatcc_verify_union_string@@Base+0x6c>
   21bc4:	cmp	r2, r3
   21bc8:	bls	21c14 <flatcc_verify_union_string@@Base+0x6c>
   21bcc:	ldr	r3, [r1, #4]
   21bd0:	add	ip, r2, #4
   21bd4:	cmp	r3, ip
   21bd8:	bcc	21c14 <flatcc_verify_union_string@@Base+0x6c>
   21bdc:	push	{fp, lr}
   21be0:	mov	fp, sp
   21be4:	ldr	r1, [r1]
   21be8:	sub	lr, r3, ip
   21bec:	mov	r0, #8
   21bf0:	ldr	r2, [r1, r2]
   21bf4:	add	r3, r2, #1
   21bf8:	cmp	lr, r3
   21bfc:	pop	{fp, lr}
   21c00:	bxcc	lr
   21c04:	add	r0, r1, ip
   21c08:	ldrb	r0, [r0, r2]
   21c0c:	cmp	r0, #0
   21c10:	movwne	r0, #7
   21c14:	bx	lr

00021c18 <flatcc_verify_buffer_header@@Base>:
   21c18:	push	{r4, sl, fp, lr}
   21c1c:	add	fp, sp, #8
   21c20:	sub	sp, sp, #8
   21c24:	mov	r4, r0
   21c28:	mov	r0, #5
   21c2c:	tst	r4, #3
   21c30:	bne	21c8c <flatcc_verify_buffer_header@@Base+0x74>
   21c34:	mov	r0, #6
   21c38:	cmn	r1, #9
   21c3c:	bhi	21c8c <flatcc_verify_buffer_header@@Base+0x74>
   21c40:	mov	r0, #1
   21c44:	cmp	r1, #8
   21c48:	bcc	21c8c <flatcc_verify_buffer_header@@Base+0x74>
   21c4c:	cmp	r2, #0
   21c50:	beq	21c88 <flatcc_verify_buffer_header@@Base+0x70>
   21c54:	mov	r0, #0
   21c58:	mov	r1, r2
   21c5c:	mov	r2, #4
   21c60:	str	r0, [sp, #4]
   21c64:	add	r0, sp, #4
   21c68:	bl	12f4c <strncpy@plt>
   21c6c:	ldr	r1, [sp, #4]
   21c70:	cmp	r1, #0
   21c74:	ldrne	r2, [r4, #4]
   21c78:	movne	r0, #2
   21c7c:	cmpne	r2, r1
   21c80:	moveq	r0, #0
   21c84:	b	21c8c <flatcc_verify_buffer_header@@Base+0x74>
   21c88:	mov	r0, #0
   21c8c:	sub	sp, fp, #8
   21c90:	pop	{r4, sl, fp, pc}

00021c94 <flatcc_verify_typed_buffer_header@@Base>:
   21c94:	mov	r3, r0
   21c98:	mov	r0, #5
   21c9c:	tst	r3, #3
   21ca0:	bne	21cd4 <flatcc_verify_typed_buffer_header@@Base+0x40>
   21ca4:	mov	r0, #6
   21ca8:	cmn	r1, #9
   21cac:	bhi	21cd4 <flatcc_verify_typed_buffer_header@@Base+0x40>
   21cb0:	mov	r0, #1
   21cb4:	cmp	r1, #8
   21cb8:	bxcc	lr
   21cbc:	cmp	r2, #0
   21cc0:	beq	21cd8 <flatcc_verify_typed_buffer_header@@Base+0x44>
   21cc4:	ldr	r1, [r3, #4]
   21cc8:	mov	r0, #2
   21ccc:	cmp	r1, r2
   21cd0:	moveq	r0, #0
   21cd4:	bx	lr
   21cd8:	mov	r0, #0
   21cdc:	bx	lr

00021ce0 <flatcc_verify_struct_as_root@@Base>:
   21ce0:	push	{r4, r5, r6, r7, fp, lr}
   21ce4:	add	fp, sp, #16
   21ce8:	mov	r5, r3
   21cec:	mov	r6, r2
   21cf0:	mov	r4, r1
   21cf4:	mov	r7, r0
   21cf8:	bl	21c18 <flatcc_verify_buffer_header@@Base>
   21cfc:	cmp	r0, #0
   21d00:	beq	21d18 <flatcc_verify_struct_as_root@@Base+0x38>
   21d04:	mov	r0, r7
   21d08:	mov	r1, r4
   21d0c:	mov	r2, r6
   21d10:	pop	{r4, r5, r6, r7, fp, lr}
   21d14:	b	21c18 <flatcc_verify_buffer_header@@Base>
   21d18:	ldr	r1, [r7]
   21d1c:	mov	r0, #18
   21d20:	sub	r2, r1, #1
   21d24:	cmp	r2, r4
   21d28:	bcs	21d54 <flatcc_verify_struct_as_root@@Base+0x74>
   21d2c:	adds	r2, r1, r5
   21d30:	mov	r0, #10
   21d34:	bcs	21d54 <flatcc_verify_struct_as_root@@Base+0x74>
   21d38:	mov	r0, #9
   21d3c:	cmp	r2, r4
   21d40:	pophi	{r4, r5, r6, r7, fp, pc}
   21d44:	ldr	r0, [fp, #8]
   21d48:	sub	r0, r0, #1
   21d4c:	ands	r0, r1, r0
   21d50:	movwne	r0, #11
   21d54:	pop	{r4, r5, r6, r7, fp, pc}

00021d58 <flatcc_verify_struct_as_typed_root@@Base>:
   21d58:	push	{fp, lr}
   21d5c:	mov	fp, sp
   21d60:	mov	ip, r0
   21d64:	mov	r0, #5
   21d68:	tst	ip, #3
   21d6c:	bne	21ddc <flatcc_verify_struct_as_typed_root@@Base+0x84>
   21d70:	mov	r0, #6
   21d74:	cmn	r1, #9
   21d78:	bhi	21ddc <flatcc_verify_struct_as_typed_root@@Base+0x84>
   21d7c:	mov	r0, #1
   21d80:	cmp	r1, #8
   21d84:	bcc	21ddc <flatcc_verify_struct_as_typed_root@@Base+0x84>
   21d88:	cmp	r2, #0
   21d8c:	beq	21da0 <flatcc_verify_struct_as_typed_root@@Base+0x48>
   21d90:	ldr	lr, [ip, #4]
   21d94:	mov	r0, #2
   21d98:	cmp	lr, r2
   21d9c:	bne	21ddc <flatcc_verify_struct_as_typed_root@@Base+0x84>
   21da0:	ldr	ip, [ip]
   21da4:	mov	r0, #18
   21da8:	sub	r2, ip, #1
   21dac:	cmp	r2, r1
   21db0:	bcs	21ddc <flatcc_verify_struct_as_typed_root@@Base+0x84>
   21db4:	adds	r3, ip, r3
   21db8:	mov	r0, #10
   21dbc:	bcs	21ddc <flatcc_verify_struct_as_typed_root@@Base+0x84>
   21dc0:	mov	r0, #9
   21dc4:	cmp	r3, r1
   21dc8:	pophi	{fp, pc}
   21dcc:	ldr	r0, [fp, #8]
   21dd0:	sub	r0, r0, #1
   21dd4:	ands	r0, ip, r0
   21dd8:	movwne	r0, #11
   21ddc:	pop	{fp, pc}

00021de0 <flatcc_verify_table_as_root@@Base>:
   21de0:	push	{r4, r5, r6, r7, fp, lr}
   21de4:	add	fp, sp, #16
   21de8:	sub	sp, sp, #24
   21dec:	mov	r4, r3
   21df0:	mov	r7, r2
   21df4:	mov	r5, r1
   21df8:	mov	r6, r0
   21dfc:	bl	21c18 <flatcc_verify_buffer_header@@Base>
   21e00:	cmp	r0, #0
   21e04:	beq	21e20 <flatcc_verify_table_as_root@@Base+0x40>
   21e08:	mov	r0, r6
   21e0c:	mov	r1, r5
   21e10:	mov	r2, r7
   21e14:	sub	sp, fp, #16
   21e18:	pop	{r4, r5, r6, r7, fp, lr}
   21e1c:	b	21c18 <flatcc_verify_buffer_header@@Base>
   21e20:	ldr	r1, [r6]
   21e24:	mov	r0, #99	; 0x63
   21e28:	str	r0, [sp, #8]
   21e2c:	mov	r0, #15
   21e30:	tst	r1, #3
   21e34:	bne	21ed4 <flatcc_verify_table_as_root@@Base+0xf4>
   21e38:	cmp	r1, #0
   21e3c:	beq	21ed4 <flatcc_verify_table_as_root@@Base+0xf4>
   21e40:	add	r2, r1, #4
   21e44:	cmp	r2, r5
   21e48:	bhi	21ed4 <flatcc_verify_table_as_root@@Base+0xf4>
   21e4c:	str	r1, [sp, #16]
   21e50:	ldr	r0, [r6, r1]
   21e54:	sub	r7, r1, r0
   21e58:	mov	r0, #29
   21e5c:	tst	r7, #-2147483647	; 0x80000001
   21e60:	bne	21ed4 <flatcc_verify_table_as_root@@Base+0xf4>
   21e64:	add	r3, r7, #2
   21e68:	mov	r0, #27
   21e6c:	cmp	r3, r5
   21e70:	bhi	21ed4 <flatcc_verify_table_as_root@@Base+0xf4>
   21e74:	mov	ip, r6
   21e78:	mov	r0, #30
   21e7c:	ldrh	r2, [ip, r7]!
   21e80:	tst	r2, #1
   21e84:	strh	r2, [sp, #22]
   21e88:	bne	21ed4 <flatcc_verify_table_as_root@@Base+0xf4>
   21e8c:	add	r7, r7, r2
   21e90:	cmp	r7, r5
   21e94:	bhi	21ed4 <flatcc_verify_table_as_root@@Base+0xf4>
   21e98:	mov	r0, #28
   21e9c:	cmp	r2, #4
   21ea0:	bcc	21ed4 <flatcc_verify_table_as_root@@Base+0xf4>
   21ea4:	add	r0, r6, r3
   21ea8:	sub	r1, r5, r1
   21eac:	ldrh	r2, [r0]
   21eb0:	mov	r0, #20
   21eb4:	cmp	r1, r2
   21eb8:	strh	r2, [sp, #20]
   21ebc:	bcc	21ed4 <flatcc_verify_table_as_root@@Base+0xf4>
   21ec0:	mov	r0, sp
   21ec4:	str	r6, [sp]
   21ec8:	str	ip, [sp, #12]
   21ecc:	str	r5, [sp, #4]
   21ed0:	blx	r4
   21ed4:	sub	sp, fp, #16
   21ed8:	pop	{r4, r5, r6, r7, fp, pc}

00021edc <flatcc_verify_table_as_typed_root@@Base>:
   21edc:	push	{r4, r5, r6, sl, fp, lr}
   21ee0:	add	fp, sp, #16
   21ee4:	sub	sp, sp, #24
   21ee8:	mov	ip, #5
   21eec:	tst	r0, #3
   21ef0:	bne	21fd8 <flatcc_verify_table_as_typed_root@@Base+0xfc>
   21ef4:	mov	ip, #6
   21ef8:	cmn	r1, #9
   21efc:	bhi	21fd8 <flatcc_verify_table_as_typed_root@@Base+0xfc>
   21f00:	mov	ip, #1
   21f04:	cmp	r1, #8
   21f08:	bcc	21fd8 <flatcc_verify_table_as_typed_root@@Base+0xfc>
   21f0c:	cmp	r2, #0
   21f10:	beq	21f24 <flatcc_verify_table_as_typed_root@@Base+0x48>
   21f14:	ldr	r6, [r0, #4]
   21f18:	mov	ip, #2
   21f1c:	cmp	r6, r2
   21f20:	bne	21fd8 <flatcc_verify_table_as_typed_root@@Base+0xfc>
   21f24:	ldr	r2, [r0]
   21f28:	mov	r6, #99	; 0x63
   21f2c:	mov	ip, #15
   21f30:	str	r6, [sp, #8]
   21f34:	tst	r2, #3
   21f38:	bne	21fd8 <flatcc_verify_table_as_typed_root@@Base+0xfc>
   21f3c:	cmp	r2, #0
   21f40:	beq	21fd8 <flatcc_verify_table_as_typed_root@@Base+0xfc>
   21f44:	add	r6, r2, #4
   21f48:	cmp	r6, r1
   21f4c:	bhi	21fd8 <flatcc_verify_table_as_typed_root@@Base+0xfc>
   21f50:	str	r2, [sp, #16]
   21f54:	mov	ip, #29
   21f58:	ldr	r6, [r0, r2]
   21f5c:	sub	r5, r2, r6
   21f60:	tst	r5, #-2147483647	; 0x80000001
   21f64:	bne	21fd8 <flatcc_verify_table_as_typed_root@@Base+0xfc>
   21f68:	add	r4, r5, #2
   21f6c:	mov	ip, #27
   21f70:	cmp	r4, r1
   21f74:	bhi	21fd8 <flatcc_verify_table_as_typed_root@@Base+0xfc>
   21f78:	mov	lr, r0
   21f7c:	mov	ip, #30
   21f80:	ldrh	r6, [lr, r5]!
   21f84:	tst	r6, #1
   21f88:	strh	r6, [sp, #22]
   21f8c:	bne	21fd8 <flatcc_verify_table_as_typed_root@@Base+0xfc>
   21f90:	add	r5, r5, r6
   21f94:	cmp	r5, r1
   21f98:	bhi	21fd8 <flatcc_verify_table_as_typed_root@@Base+0xfc>
   21f9c:	mov	ip, #28
   21fa0:	cmp	r6, #4
   21fa4:	bcc	21fd8 <flatcc_verify_table_as_typed_root@@Base+0xfc>
   21fa8:	add	r6, r0, r4
   21fac:	sub	r2, r1, r2
   21fb0:	mov	ip, #20
   21fb4:	ldrh	r4, [r6]
   21fb8:	cmp	r2, r4
   21fbc:	strh	r4, [sp, #20]
   21fc0:	bcc	21fd8 <flatcc_verify_table_as_typed_root@@Base+0xfc>
   21fc4:	str	lr, [sp, #12]
   21fc8:	stm	sp, {r0, r1}
   21fcc:	mov	r0, sp
   21fd0:	blx	r3
   21fd4:	mov	ip, r0
   21fd8:	mov	r0, ip
   21fdc:	sub	sp, fp, #16
   21fe0:	pop	{r4, r5, r6, sl, fp, pc}

00021fe4 <flatcc_verify_struct_as_nested_root@@Base>:
   21fe4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21fe8:	add	fp, sp, #28
   21fec:	sub	sp, sp, #12
   21ff0:	ldr	r9, [fp, #12]
   21ff4:	mov	r8, r3
   21ff8:	mvn	sl, #0
   21ffc:	mov	r5, #1
   22000:	mov	r4, r2
   22004:	mov	r7, r1
   22008:	mov	r6, r0
   2200c:	stm	sp, {r5, sl}
   22010:	mov	r3, r9
   22014:	bl	214f0 <flatcc_verify_vector_field@@Base>
   22018:	cmp	r0, #0
   2201c:	beq	22040 <flatcc_verify_struct_as_nested_root@@Base+0x5c>
   22020:	mov	r0, r6
   22024:	mov	r1, r7
   22028:	mov	r2, r4
   2202c:	mov	r3, r9
   22030:	stm	sp, {r5, sl}
   22034:	bl	214f0 <flatcc_verify_vector_field@@Base>
   22038:	sub	sp, fp, #28
   2203c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   22040:	ldrh	r2, [r6, #22]
   22044:	mov	r0, #4
   22048:	add	r0, r0, r7, lsl #1
   2204c:	uxth	r1, r0
   22050:	cmp	r1, r2
   22054:	bcs	2207c <flatcc_verify_struct_as_nested_root@@Base+0x98>
   22058:	ldr	r1, [r6, #12]
   2205c:	uxtah	r0, r1, r0
   22060:	ldrh	r0, [r0]
   22064:	cmp	r0, #0
   22068:	ldrne	r1, [r6]
   2206c:	ldrne	r2, [r6, #16]
   22070:	addne	r1, r1, r2
   22074:	addsne	r0, r1, r0
   22078:	bne	22088 <flatcc_verify_struct_as_nested_root@@Base+0xa4>
   2207c:	mov	r0, #0
   22080:	sub	sp, fp, #28
   22084:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   22088:	ldr	r2, [r0]
   2208c:	ldr	r3, [fp, #8]
   22090:	ldr	r1, [r2, r0]!
   22094:	str	r9, [sp]
   22098:	add	r0, r2, #4
   2209c:	mov	r2, r8
   220a0:	bl	21ce0 <flatcc_verify_struct_as_root@@Base>
   220a4:	sub	sp, fp, #28
   220a8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

000220ac <flatcc_verify_table_as_nested_root@@Base>:
   220ac:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   220b0:	add	fp, sp, #28
   220b4:	sub	sp, sp, #36	; 0x24
   220b8:	mvn	r9, #0
   220bc:	mov	sl, #1
   220c0:	mov	r8, r3
   220c4:	mov	r5, r2
   220c8:	mov	r4, r1
   220cc:	mov	r6, r0
   220d0:	str	sl, [sp]
   220d4:	str	r9, [sp, #4]
   220d8:	ldr	r7, [fp, #8]
   220dc:	mov	r3, r7
   220e0:	bl	214f0 <flatcc_verify_vector_field@@Base>
   220e4:	cmp	r0, #0
   220e8:	beq	2210c <flatcc_verify_table_as_nested_root@@Base+0x60>
   220ec:	mov	r0, r6
   220f0:	mov	r1, r4
   220f4:	mov	r2, r5
   220f8:	mov	r3, r7
   220fc:	str	sl, [sp]
   22100:	str	r9, [sp, #4]
   22104:	bl	214f0 <flatcc_verify_vector_field@@Base>
   22108:	b	2214c <flatcc_verify_table_as_nested_root@@Base+0xa0>
   2210c:	ldrh	r3, [r6, #22]
   22110:	mov	r0, #4
   22114:	add	r1, r0, r4, lsl #1
   22118:	mov	r0, #0
   2211c:	uxth	r2, r1
   22120:	cmp	r2, r3
   22124:	bcs	2214c <flatcc_verify_table_as_nested_root@@Base+0xa0>
   22128:	ldr	r2, [r6, #12]
   2212c:	uxtah	r1, r2, r1
   22130:	ldrh	r1, [r1]
   22134:	cmp	r1, #0
   22138:	ldrne	r2, [r6]
   2213c:	ldrne	r3, [r6, #16]
   22140:	addne	r2, r2, r3
   22144:	addsne	r1, r2, r1
   22148:	bne	22154 <flatcc_verify_table_as_nested_root@@Base+0xa8>
   2214c:	sub	sp, fp, #28
   22150:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   22154:	ldr	r0, [r1]
   22158:	ldr	r7, [fp, #12]
   2215c:	mov	r2, r8
   22160:	ldr	r4, [r0, r1]!
   22164:	add	r5, r0, #4
   22168:	mov	r1, r4
   2216c:	mov	r0, r5
   22170:	bl	21c18 <flatcc_verify_buffer_header@@Base>
   22174:	cmp	r0, #0
   22178:	beq	22194 <flatcc_verify_table_as_nested_root@@Base+0xe8>
   2217c:	mov	r0, r5
   22180:	mov	r1, r4
   22184:	mov	r2, r8
   22188:	sub	sp, fp, #28
   2218c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   22190:	b	21c18 <flatcc_verify_buffer_header@@Base>
   22194:	ldr	r0, [r6, #8]
   22198:	ldr	r1, [r5]
   2219c:	subs	r0, r0, #1
   221a0:	str	r0, [sp, #20]
   221a4:	beq	22254 <flatcc_verify_table_as_nested_root@@Base+0x1a8>
   221a8:	mov	r0, #15
   221ac:	tst	r1, #3
   221b0:	bne	2214c <flatcc_verify_table_as_nested_root@@Base+0xa0>
   221b4:	cmp	r1, #0
   221b8:	beq	2214c <flatcc_verify_table_as_nested_root@@Base+0xa0>
   221bc:	add	r2, r1, #4
   221c0:	cmp	r2, r4
   221c4:	bhi	2214c <flatcc_verify_table_as_nested_root@@Base+0xa0>
   221c8:	str	r1, [sp, #28]
   221cc:	ldr	r0, [r5, r1]
   221d0:	sub	r6, r1, r0
   221d4:	mov	r0, #29
   221d8:	tst	r6, #-2147483647	; 0x80000001
   221dc:	bne	2214c <flatcc_verify_table_as_nested_root@@Base+0xa0>
   221e0:	add	r3, r6, #2
   221e4:	mov	r0, #27
   221e8:	cmp	r3, r4
   221ec:	bhi	2214c <flatcc_verify_table_as_nested_root@@Base+0xa0>
   221f0:	mov	ip, r5
   221f4:	mov	r0, #30
   221f8:	ldrh	r2, [ip, r6]!
   221fc:	tst	r2, #1
   22200:	strh	r2, [sp, #34]	; 0x22
   22204:	bne	2214c <flatcc_verify_table_as_nested_root@@Base+0xa0>
   22208:	add	r6, r6, r2
   2220c:	cmp	r6, r4
   22210:	bhi	2214c <flatcc_verify_table_as_nested_root@@Base+0xa0>
   22214:	mov	r0, #28
   22218:	cmp	r2, #4
   2221c:	bcc	2214c <flatcc_verify_table_as_nested_root@@Base+0xa0>
   22220:	add	r0, r5, r3
   22224:	sub	r1, r4, r1
   22228:	ldrh	r2, [r0]
   2222c:	mov	r0, #20
   22230:	cmp	r1, r2
   22234:	strh	r2, [sp, #32]
   22238:	bcc	2214c <flatcc_verify_table_as_nested_root@@Base+0xa0>
   2223c:	add	r0, sp, #12
   22240:	str	r5, [sp, #12]
   22244:	str	ip, [sp, #24]
   22248:	str	r4, [sp, #16]
   2224c:	blx	r7
   22250:	b	2214c <flatcc_verify_table_as_nested_root@@Base+0xa0>
   22254:	mov	r0, #3
   22258:	b	2214c <flatcc_verify_table_as_nested_root@@Base+0xa0>

0002225c <flatcc_verify_union_field@@Base>:
   2225c:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   22260:	add	fp, sp, #24
   22264:	sub	sp, sp, #32
   22268:	mov	r5, r0
   2226c:	mov	r8, r3
   22270:	mov	r0, #2
   22274:	lsl	r4, r1, #1
   22278:	ldrh	r3, [r5, #22]
   2227c:	add	r0, r0, r1, lsl #1
   22280:	uxth	r7, r0
   22284:	cmp	r7, r3
   22288:	bcs	22340 <flatcc_verify_union_field@@Base+0xe4>
   2228c:	ldr	r7, [r5, #12]
   22290:	uxtah	r0, r7, r0
   22294:	ldrh	r9, [r0]
   22298:	cmp	r9, #0
   2229c:	beq	22340 <flatcc_verify_union_field@@Base+0xe4>
   222a0:	ldrh	r6, [r5, #20]
   222a4:	mov	r0, #13
   222a8:	cmp	r9, r6
   222ac:	bcs	22374 <flatcc_verify_union_field@@Base+0x118>
   222b0:	add	r4, r4, #4
   222b4:	mov	r0, #1
   222b8:	uxth	r6, r4
   222bc:	cmp	r6, r3
   222c0:	ldr	r3, [r5]
   222c4:	uxtahcc	r0, r7, r4
   222c8:	ldr	r7, [r5, #16]
   222cc:	ldrhcc	r0, [r0]
   222d0:	add	r7, r3, r7
   222d4:	ldrb	r3, [r7, r9]
   222d8:	clzcc	r0, r0
   222dc:	lsrcc	r0, r0, #5
   222e0:	cmp	r0, #0
   222e4:	moveq	r0, #24
   222e8:	cmpeq	r3, #0
   222ec:	beq	22374 <flatcc_verify_union_field@@Base+0x118>
   222f0:	cmp	r3, #0
   222f4:	beq	2237c <flatcc_verify_union_field@@Base+0x120>
   222f8:	add	r3, sp, #28
   222fc:	mov	r0, r5
   22300:	bl	21470 <flatcc_verify_string_field@@Base+0x88>
   22304:	cmp	r0, #0
   22308:	bne	22374 <flatcc_verify_union_field@@Base+0x118>
   2230c:	ldr	r1, [sp, #28]
   22310:	cmp	r1, #0
   22314:	beq	22374 <flatcc_verify_union_field@@Base+0x118>
   22318:	ldm	r5, {r0, r2, r3}
   2231c:	str	r1, [sp, #20]
   22320:	stmib	sp, {r0, r2, r3}
   22324:	ldr	r0, [r0, r1]
   22328:	str	r0, [sp, #24]
   2232c:	ldrb	r0, [r7, r9]
   22330:	strb	r0, [sp, #16]
   22334:	add	r0, sp, #4
   22338:	blx	r8
   2233c:	b	22374 <flatcc_verify_union_field@@Base+0x118>
   22340:	add	r0, r4, #4
   22344:	uxth	r1, r0
   22348:	cmp	r1, r3
   2234c:	bcs	22368 <flatcc_verify_union_field@@Base+0x10c>
   22350:	ldr	r1, [r5, #12]
   22354:	uxtah	r0, r1, r0
   22358:	ldrh	r1, [r0]
   2235c:	mov	r0, #23
   22360:	cmp	r1, #0
   22364:	bne	22374 <flatcc_verify_union_field@@Base+0x118>
   22368:	cmp	r2, #0
   2236c:	movwne	r2, #21
   22370:	mov	r0, r2
   22374:	sub	sp, fp, #24
   22378:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   2237c:	mov	r0, #0
   22380:	b	22374 <flatcc_verify_union_field@@Base+0x118>

00022384 <flatcc_verify_union_vector_field@@Base>:
   22384:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   22388:	add	fp, sp, #28
   2238c:	sub	sp, sp, #44	; 0x2c
   22390:	mov	r5, r0
   22394:	mov	sl, r2
   22398:	mov	r9, r1
   2239c:	sub	r1, r1, #1
   223a0:	mov	r0, #4
   223a4:	ldrh	r2, [r5, #22]
   223a8:	add	r6, r0, r1, lsl #1
   223ac:	uxth	r7, r6
   223b0:	cmp	r7, r2
   223b4:	bcs	223cc <flatcc_verify_union_vector_field@@Base+0x48>
   223b8:	ldr	r4, [r5, #12]
   223bc:	uxtah	r4, r4, r6
   223c0:	ldrh	r4, [r4]
   223c4:	cmp	r4, #0
   223c8:	bne	2240c <flatcc_verify_union_vector_field@@Base+0x88>
   223cc:	add	r0, r0, r9, lsl #1
   223d0:	uxth	r4, r0
   223d4:	cmp	r4, r2
   223d8:	bcs	22400 <flatcc_verify_union_vector_field@@Base+0x7c>
   223dc:	cmp	sl, #0
   223e0:	beq	2240c <flatcc_verify_union_vector_field@@Base+0x88>
   223e4:	ldr	r2, [r5, #12]
   223e8:	uxtah	r0, r2, r0
   223ec:	ldrh	r2, [r0]
   223f0:	mov	r0, #22
   223f4:	cmp	r2, #0
   223f8:	beq	225bc <flatcc_verify_union_vector_field@@Base+0x238>
   223fc:	b	2240c <flatcc_verify_union_vector_field@@Base+0x88>
   22400:	mov	r0, #22
   22404:	cmp	sl, #0
   22408:	bne	225bc <flatcc_verify_union_vector_field@@Base+0x238>
   2240c:	uxth	r4, r1
   22410:	mvn	r0, #0
   22414:	str	r3, [sp, #12]
   22418:	mov	r8, #1
   2241c:	mov	r2, sl
   22420:	mov	r3, #1
   22424:	str	r0, [sp, #4]
   22428:	mov	r0, r5
   2242c:	mov	r1, r4
   22430:	str	r8, [sp]
   22434:	bl	214f0 <flatcc_verify_vector_field@@Base>
   22438:	cmp	r0, #0
   2243c:	beq	22464 <flatcc_verify_union_vector_field@@Base+0xe0>
   22440:	mvn	r0, #0
   22444:	mov	r1, r4
   22448:	mov	r2, sl
   2244c:	mov	r3, #1
   22450:	str	r8, [sp]
   22454:	str	r0, [sp, #4]
   22458:	mov	r0, r5
   2245c:	bl	214f0 <flatcc_verify_vector_field@@Base>
   22460:	b	225bc <flatcc_verify_union_vector_field@@Base+0x238>
   22464:	ldrh	r1, [r5, #22]
   22468:	mov	r0, #0
   2246c:	cmp	r7, r1
   22470:	bcs	225bc <flatcc_verify_union_vector_field@@Base+0x238>
   22474:	ldr	r1, [r5, #12]
   22478:	uxtah	r1, r1, r6
   2247c:	ldrh	r1, [r1]
   22480:	cmp	r1, #0
   22484:	beq	225bc <flatcc_verify_union_vector_field@@Base+0x238>
   22488:	ldr	r2, [r5]
   2248c:	ldr	r3, [r5, #16]
   22490:	ldr	r6, [sp, #12]
   22494:	add	r2, r2, r3
   22498:	adds	r1, r2, r1
   2249c:	beq	225bc <flatcc_verify_union_vector_field@@Base+0x238>
   224a0:	ldr	r4, [r1]
   224a4:	add	r3, sp, #16
   224a8:	mov	r0, r5
   224ac:	mov	r2, sl
   224b0:	ldr	r8, [r4, r1]!
   224b4:	mov	r1, r9
   224b8:	bl	21470 <flatcc_verify_string_field@@Base+0x88>
   224bc:	cmp	r0, #0
   224c0:	bne	225bc <flatcc_verify_union_vector_field@@Base+0x238>
   224c4:	ldr	r2, [sp, #16]
   224c8:	cmp	r2, #0
   224cc:	beq	225bc <flatcc_verify_union_vector_field@@Base+0x238>
   224d0:	ldr	r1, [r5, #8]
   224d4:	cmp	r1, #1
   224d8:	blt	225b8 <flatcc_verify_union_vector_field@@Base+0x234>
   224dc:	ldr	r9, [r5]
   224e0:	ldr	r0, [r9, r2]
   224e4:	add	r3, r0, r2
   224e8:	mov	r0, #16
   224ec:	cmp	r3, r2
   224f0:	bls	225bc <flatcc_verify_union_vector_field@@Base+0x238>
   224f4:	ldr	r2, [r5, #4]
   224f8:	add	r7, r3, #4
   224fc:	cmp	r7, r2
   22500:	bhi	225bc <flatcc_verify_union_vector_field@@Base+0x238>
   22504:	ands	r5, r7, #3
   22508:	bne	225bc <flatcc_verify_union_vector_field@@Base+0x238>
   2250c:	ldr	r5, [r9, r3]
   22510:	mov	r0, #25
   22514:	cmn	r5, #-1073741823	; 0xc0000001
   22518:	bhi	225bc <flatcc_verify_union_vector_field@@Base+0x238>
   2251c:	sub	r0, r2, #4
   22520:	sub	r3, r0, r3
   22524:	mov	r0, #26
   22528:	cmp	r3, r5, lsl #2
   2252c:	bcc	225bc <flatcc_verify_union_vector_field@@Base+0x238>
   22530:	mov	r0, #34	; 0x22
   22534:	cmp	r5, r8
   22538:	bne	225bc <flatcc_verify_union_vector_field@@Base+0x238>
   2253c:	cmp	r8, #0
   22540:	sub	r0, r1, #1
   22544:	str	r2, [sp, #24]
   22548:	str	r9, [sp, #20]
   2254c:	str	r0, [sp, #28]
   22550:	beq	225c4 <flatcc_verify_union_vector_field@@Base+0x240>
   22554:	add	r4, r4, #4
   22558:	mov	r5, #0
   2255c:	add	sl, sp, #20
   22560:	ldr	r1, [r9, r7]
   22564:	ldrb	r0, [r4, r5]
   22568:	cmp	r1, #0
   2256c:	beq	22598 <flatcc_verify_union_vector_field@@Base+0x214>
   22570:	cmp	r0, #0
   22574:	beq	225cc <flatcc_verify_union_vector_field@@Base+0x248>
   22578:	str	r7, [sp, #36]	; 0x24
   2257c:	strb	r0, [sp, #32]
   22580:	mov	r0, sl
   22584:	str	r1, [sp, #40]	; 0x28
   22588:	blx	r6
   2258c:	cmp	r0, #0
   22590:	beq	225a0 <flatcc_verify_union_vector_field@@Base+0x21c>
   22594:	b	225d4 <flatcc_verify_union_vector_field@@Base+0x250>
   22598:	cmp	r0, #0
   2259c:	bne	225e0 <flatcc_verify_union_vector_field@@Base+0x25c>
   225a0:	add	r5, r5, #1
   225a4:	add	r7, r7, #4
   225a8:	mov	r0, #0
   225ac:	cmp	r5, r8
   225b0:	bcc	22560 <flatcc_verify_union_vector_field@@Base+0x1dc>
   225b4:	b	225bc <flatcc_verify_union_vector_field@@Base+0x238>
   225b8:	mov	r0, #3
   225bc:	sub	sp, fp, #28
   225c0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   225c4:	mov	r0, #0
   225c8:	b	225bc <flatcc_verify_union_vector_field@@Base+0x238>
   225cc:	mov	r0, #33	; 0x21
   225d0:	b	225bc <flatcc_verify_union_vector_field@@Base+0x238>
   225d4:	add	r0, sp, #20
   225d8:	blx	r6
   225dc:	b	225bc <flatcc_verify_union_vector_field@@Base+0x238>
   225e0:	mov	r0, #32
   225e4:	b	225bc <flatcc_verify_union_vector_field@@Base+0x238>

000225e8 <__libc_csu_init@@Base>:
   225e8:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   225ec:	mov	r7, r0
   225f0:	ldr	r6, [pc, #72]	; 22640 <__libc_csu_init@@Base+0x58>
   225f4:	ldr	r5, [pc, #72]	; 22644 <__libc_csu_init@@Base+0x5c>
   225f8:	add	r6, pc, r6
   225fc:	add	r5, pc, r5
   22600:	sub	r6, r6, r5
   22604:	mov	r8, r1
   22608:	mov	r9, r2
   2260c:	bl	12e6c <strcmp@plt-0x20>
   22610:	asrs	r6, r6, #2
   22614:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   22618:	mov	r4, #0
   2261c:	add	r4, r4, #1
   22620:	ldr	r3, [r5], #4
   22624:	mov	r2, r9
   22628:	mov	r1, r8
   2262c:	mov	r0, r7
   22630:	blx	r3
   22634:	cmp	r6, r4
   22638:	bne	2261c <__libc_csu_init@@Base+0x34>
   2263c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   22640:	andeq	r5, r1, ip, lsl #18
   22644:	andeq	r5, r1, r4, lsl #18

00022648 <__libc_csu_fini@@Base>:
   22648:	bx	lr

Disassembly of section .fini:

0002264c <.fini>:
   2264c:	push	{r3, lr}
   22650:	pop	{r3, pc}
