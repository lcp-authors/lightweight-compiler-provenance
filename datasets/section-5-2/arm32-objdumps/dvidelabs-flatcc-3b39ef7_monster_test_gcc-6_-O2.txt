
../repos/dvidelabs-flatcc-3b39ef7/test/monster_test/monster_test:     file format elf32-littlearm


Disassembly of section .init:

000128ec <.init>:
   128ec:	push	{r3, lr}
   128f0:	bl	13428 <_start@@Base+0x3c>
   128f4:	pop	{r3, pc}

Disassembly of section .plt:

000128f8 <strcmp@plt-0x14>:
   128f8:	push	{lr}		; (str lr, [sp, #-4]!)
   128fc:	ldr	lr, [pc, #4]	; 12908 <strcmp@plt-0x4>
   12900:	add	lr, pc, lr
   12904:	ldr	pc, [lr, #8]!
   12908:	strdeq	r6, [r2], -r8

0001290c <strcmp@plt>:
   1290c:	add	ip, pc, #0, 12
   12910:	add	ip, ip, #155648	; 0x26000
   12914:	ldr	pc, [ip, #1784]!	; 0x6f8

00012918 <printf@plt>:
   12918:	add	ip, pc, #0, 12
   1291c:	add	ip, ip, #155648	; 0x26000
   12920:	ldr	pc, [ip, #1776]!	; 0x6f0

00012924 <free@plt>:
   12924:	add	ip, pc, #0, 12
   12928:	add	ip, ip, #155648	; 0x26000
   1292c:	ldr	pc, [ip, #1768]!	; 0x6e8

00012930 <memcpy@plt>:
   12930:	add	ip, pc, #0, 12
   12934:	add	ip, ip, #155648	; 0x26000
   12938:	ldr	pc, [ip, #1760]!	; 0x6e0

0001293c <memcmp@plt>:
   1293c:	add	ip, pc, #0, 12
   12940:	add	ip, ip, #155648	; 0x26000
   12944:	ldr	pc, [ip, #1752]!	; 0x6d8

00012948 <realloc@plt>:
   12948:	add	ip, pc, #0, 12
   1294c:	add	ip, ip, #155648	; 0x26000
   12950:	ldr	pc, [ip, #1744]!	; 0x6d0

00012954 <fwrite@plt>:
   12954:	add	ip, pc, #0, 12
   12958:	add	ip, ip, #155648	; 0x26000
   1295c:	ldr	pc, [ip, #1736]!	; 0x6c8

00012960 <gettimeofday@plt>:
   12960:	add	ip, pc, #0, 12
   12964:	add	ip, ip, #155648	; 0x26000
   12968:	ldr	pc, [ip, #1728]!	; 0x6c0

0001296c <puts@plt>:
   1296c:	add	ip, pc, #0, 12
   12970:	add	ip, ip, #155648	; 0x26000
   12974:	ldr	pc, [ip, #1720]!	; 0x6b8

00012978 <malloc@plt>:
   12978:	add	ip, pc, #0, 12
   1297c:	add	ip, ip, #155648	; 0x26000
   12980:	ldr	pc, [ip, #1712]!	; 0x6b0

00012984 <__libc_start_main@plt>:
   12984:	add	ip, pc, #0, 12
   12988:	add	ip, ip, #155648	; 0x26000
   1298c:	ldr	pc, [ip, #1704]!	; 0x6a8

00012990 <__gmon_start__@plt>:
   12990:	add	ip, pc, #0, 12
   12994:	add	ip, ip, #155648	; 0x26000
   12998:	ldr	pc, [ip, #1696]!	; 0x6a0

0001299c <strlen@plt>:
   1299c:	add	ip, pc, #0, 12
   129a0:	add	ip, ip, #155648	; 0x26000
   129a4:	ldr	pc, [ip, #1688]!	; 0x698

000129a8 <fprintf@plt>:
   129a8:	add	ip, pc, #0, 12
   129ac:	add	ip, ip, #155648	; 0x26000
   129b0:	ldr	pc, [ip, #1680]!	; 0x690

000129b4 <posix_memalign@plt>:
   129b4:	add	ip, pc, #0, 12
   129b8:	add	ip, ip, #155648	; 0x26000
   129bc:	ldr	pc, [ip, #1672]!	; 0x688

000129c0 <memset@plt>:
   129c0:	add	ip, pc, #0, 12
   129c4:	add	ip, ip, #155648	; 0x26000
   129c8:	ldr	pc, [ip, #1664]!	; 0x680

000129cc <strncpy@plt>:
   129cc:	add	ip, pc, #0, 12
   129d0:	add	ip, ip, #155648	; 0x26000
   129d4:	ldr	pc, [ip, #1656]!	; 0x678

000129d8 <memchr@plt>:
   129d8:	add	ip, pc, #0, 12
   129dc:	add	ip, ip, #155648	; 0x26000
   129e0:	ldr	pc, [ip, #1648]!	; 0x670

000129e4 <fputc@plt>:
   129e4:	add	ip, pc, #0, 12
   129e8:	add	ip, ip, #155648	; 0x26000
   129ec:	ldr	pc, [ip, #1640]!	; 0x668

000129f0 <strncmp@plt>:
   129f0:	add	ip, pc, #0, 12
   129f4:	add	ip, ip, #155648	; 0x26000
   129f8:	ldr	pc, [ip, #1632]!	; 0x660

000129fc <abort@plt>:
   129fc:	add	ip, pc, #0, 12
   12a00:	add	ip, ip, #155648	; 0x26000
   12a04:	ldr	pc, [ip, #1624]!	; 0x658

00012a08 <__assert_fail@plt>:
   12a08:	add	ip, pc, #0, 12
   12a0c:	add	ip, ip, #155648	; 0x26000
   12a10:	ldr	pc, [ip, #1616]!	; 0x650

Disassembly of section .text:

00012a18 <main@@Base-0x818>:
   12a18:	ldr	r3, [pc, #28]	; 12a3c <__assert_fail@plt+0x34>
   12a1c:	ldr	r1, [pc, #28]	; 12a40 <__assert_fail@plt+0x38>
   12a20:	ldr	r0, [pc, #28]	; 12a44 <__assert_fail@plt+0x3c>
   12a24:	push	{r4, lr}
   12a28:	add	r3, pc, r3
   12a2c:	ldr	r2, [pc, #20]	; 12a48 <__assert_fail@plt+0x40>
   12a30:	add	r1, pc, r1
   12a34:	add	r0, pc, r0
   12a38:	bl	12a08 <__assert_fail@plt>
   12a3c:	andeq	r1, r1, r8, lsl #27
   12a40:	andeq	r2, r1, r8, lsl #9
   12a44:	andeq	r2, r1, r0, lsl #10
   12a48:			; <UNDEFINED> instruction: 0x000002b9
   12a4c:	ldr	r3, [pc, #32]	; 12a74 <__assert_fail@plt+0x6c>
   12a50:	ldr	r1, [pc, #32]	; 12a78 <__assert_fail@plt+0x70>
   12a54:	ldr	r0, [pc, #32]	; 12a7c <__assert_fail@plt+0x74>
   12a58:	add	r3, pc, r3
   12a5c:	push	{r4, lr}
   12a60:	add	r3, r3, #28
   12a64:	ldr	r2, [pc, #20]	; 12a80 <__assert_fail@plt+0x78>
   12a68:	add	r1, pc, r1
   12a6c:	add	r0, pc, r0
   12a70:	bl	12a08 <__assert_fail@plt>
   12a74:	andeq	r1, r1, r8, asr sp
   12a78:	andeq	r2, r1, r0, asr r4
   12a7c:	andeq	r2, r1, r8, asr #9
   12a80:			; <UNDEFINED> instruction: 0x000002b9
   12a84:	ldr	r3, [pc, #32]	; 12aac <__assert_fail@plt+0xa4>
   12a88:	ldr	r1, [pc, #32]	; 12ab0 <__assert_fail@plt+0xa8>
   12a8c:	ldr	r0, [pc, #32]	; 12ab4 <__assert_fail@plt+0xac>
   12a90:	add	r3, pc, r3
   12a94:	push	{r4, lr}
   12a98:	mov	r2, #696	; 0x2b8
   12a9c:	add	r3, r3, #68	; 0x44
   12aa0:	add	r1, pc, r1
   12aa4:	add	r0, pc, r0
   12aa8:	bl	12a08 <__assert_fail@plt>
   12aac:	andeq	r1, r1, r0, lsr #26
   12ab0:	andeq	r2, r1, r8, lsl r4
   12ab4:	muleq	r1, r0, r4
   12ab8:	ldr	r3, [pc, #32]	; 12ae0 <__assert_fail@plt+0xd8>
   12abc:	ldr	r1, [pc, #32]	; 12ae4 <__assert_fail@plt+0xdc>
   12ac0:	ldr	r0, [pc, #32]	; 12ae8 <__assert_fail@plt+0xe0>
   12ac4:	add	r3, pc, r3
   12ac8:	push	{r4, lr}
   12acc:	mov	r2, #696	; 0x2b8
   12ad0:	add	r3, r3, #108	; 0x6c
   12ad4:	add	r1, pc, r1
   12ad8:	add	r0, pc, r0
   12adc:	bl	12a08 <__assert_fail@plt>
   12ae0:	andeq	r1, r1, ip, ror #25
   12ae4:	andeq	r2, r1, r4, ror #7
   12ae8:	andeq	r2, r1, ip, asr r4
   12aec:	ldr	r3, [pc, #32]	; 12b14 <__assert_fail@plt+0x10c>
   12af0:	ldr	r1, [pc, #32]	; 12b18 <__assert_fail@plt+0x110>
   12af4:	ldr	r0, [pc, #32]	; 12b1c <__assert_fail@plt+0x114>
   12af8:	add	r3, pc, r3
   12afc:	push	{r4, lr}
   12b00:	add	r3, r3, #136	; 0x88
   12b04:	ldr	r2, [pc, #20]	; 12b20 <__assert_fail@plt+0x118>
   12b08:	add	r1, pc, r1
   12b0c:	add	r0, pc, r0
   12b10:	bl	12a08 <__assert_fail@plt>
   12b14:			; <UNDEFINED> instruction: 0x00011cb8
   12b18:			; <UNDEFINED> instruction: 0x000123b0
   12b1c:	andeq	r2, r1, r8, lsr #8
   12b20:	andeq	r0, r0, r2, asr #5
   12b24:	ldr	r3, [pc, #32]	; 12b4c <__assert_fail@plt+0x144>
   12b28:	ldr	r1, [pc, #32]	; 12b50 <__assert_fail@plt+0x148>
   12b2c:	ldr	r0, [pc, #32]	; 12b54 <__assert_fail@plt+0x14c>
   12b30:	add	r3, pc, r3
   12b34:	push	{r4, lr}
   12b38:	add	r3, r3, #200	; 0xc8
   12b3c:	ldr	r2, [pc, #20]	; 12b58 <__assert_fail@plt+0x150>
   12b40:	add	r1, pc, r1
   12b44:	add	r0, pc, r0
   12b48:	bl	12a08 <__assert_fail@plt>
   12b4c:	andeq	r1, r1, r0, lsl #25
   12b50:	andeq	r2, r1, r8, ror r3
   12b54:	strdeq	r2, [r1], -r0
   12b58:			; <UNDEFINED> instruction: 0x000002ba
   12b5c:	ldr	r3, [pc, #32]	; 12b84 <__assert_fail@plt+0x17c>
   12b60:	ldr	r1, [pc, #32]	; 12b88 <__assert_fail@plt+0x180>
   12b64:	ldr	r0, [pc, #32]	; 12b8c <__assert_fail@plt+0x184>
   12b68:	add	r3, pc, r3
   12b6c:	push	{r4, lr}
   12b70:	add	r3, r3, #228	; 0xe4
   12b74:	ldr	r2, [pc, #20]	; 12b90 <__assert_fail@plt+0x188>
   12b78:	add	r1, pc, r1
   12b7c:	add	r0, pc, r0
   12b80:	bl	12a08 <__assert_fail@plt>
   12b84:	andeq	r1, r1, r8, asr #24
   12b88:	andeq	r2, r1, r0, asr #6
   12b8c:			; <UNDEFINED> instruction: 0x000123b8
   12b90:			; <UNDEFINED> instruction: 0x000002ba
   12b94:	ldr	r3, [pc, #32]	; 12bbc <__assert_fail@plt+0x1b4>
   12b98:	ldr	r1, [pc, #32]	; 12bc0 <__assert_fail@plt+0x1b8>
   12b9c:	ldr	r0, [pc, #32]	; 12bc4 <__assert_fail@plt+0x1bc>
   12ba0:	add	r3, pc, r3
   12ba4:	push	{r4, lr}
   12ba8:	add	r3, r3, #268	; 0x10c
   12bac:	ldr	r2, [pc, #20]	; 12bc8 <__assert_fail@plt+0x1c0>
   12bb0:	add	r1, pc, r1
   12bb4:	add	r0, pc, r0
   12bb8:	bl	12a08 <__assert_fail@plt>
   12bbc:	andeq	r1, r1, r0, lsl ip
   12bc0:	andeq	r2, r1, r8, lsl #6
   12bc4:	andeq	r2, r1, r0, lsl #7
   12bc8:	andeq	r0, r0, lr, asr #5
   12bcc:	ldr	r3, [pc, #32]	; 12bf4 <__assert_fail@plt+0x1ec>
   12bd0:	ldr	r1, [pc, #32]	; 12bf8 <__assert_fail@plt+0x1f0>
   12bd4:	ldr	r0, [pc, #32]	; 12bfc <__assert_fail@plt+0x1f4>
   12bd8:	add	r3, pc, r3
   12bdc:	push	{r4, lr}
   12be0:	mov	r2, #380	; 0x17c
   12be4:	add	r3, r3, #300	; 0x12c
   12be8:	add	r1, pc, r1
   12bec:	add	r0, pc, r0
   12bf0:	bl	12a08 <__assert_fail@plt>
   12bf4:	ldrdeq	r1, [r1], -r8
   12bf8:	ldrdeq	r2, [r1], -r0
   12bfc:	strdeq	r2, [r1], -r0
   12c00:	ldr	r3, [pc, #32]	; 12c28 <__assert_fail@plt+0x220>
   12c04:	ldr	r1, [pc, #32]	; 12c2c <__assert_fail@plt+0x224>
   12c08:	ldr	r0, [pc, #32]	; 12c30 <__assert_fail@plt+0x228>
   12c0c:	add	r3, pc, r3
   12c10:	push	{r4, lr}
   12c14:	mov	r2, #712	; 0x2c8
   12c18:	add	r3, r3, #328	; 0x148
   12c1c:	add	r1, pc, r1
   12c20:	add	r0, pc, r0
   12c24:	bl	12a08 <__assert_fail@plt>
   12c28:	andeq	r1, r1, r4, lsr #23
   12c2c:	muleq	r1, ip, r2
   12c30:	andeq	r2, r1, r4, lsl r3
   12c34:	ldr	r3, [pc, #32]	; 12c5c <__assert_fail@plt+0x254>
   12c38:	ldr	r1, [pc, #32]	; 12c60 <__assert_fail@plt+0x258>
   12c3c:	ldr	r0, [pc, #32]	; 12c64 <__assert_fail@plt+0x25c>
   12c40:	add	r3, pc, r3
   12c44:	push	{r4, lr}
   12c48:	add	r3, r3, #400	; 0x190
   12c4c:	ldr	r2, [pc, #20]	; 12c68 <__assert_fail@plt+0x260>
   12c50:	add	r1, pc, r1
   12c54:	add	r0, pc, r0
   12c58:	bl	12a08 <__assert_fail@plt>
   12c5c:	andeq	r1, r1, r0, ror fp
   12c60:	andeq	r2, r1, r8, ror #4
   12c64:	andeq	r2, r1, r0, ror #5
   12c68:	andeq	r0, r0, sl, asr #5
   12c6c:	ldr	r3, [pc, #32]	; 12c94 <__assert_fail@plt+0x28c>
   12c70:	ldr	r1, [pc, #32]	; 12c98 <__assert_fail@plt+0x290>
   12c74:	ldr	r0, [pc, #32]	; 12c9c <__assert_fail@plt+0x294>
   12c78:	add	r3, pc, r3
   12c7c:	push	{r4, lr}
   12c80:	add	r3, r3, #440	; 0x1b8
   12c84:	ldr	r2, [pc, #20]	; 12ca0 <__assert_fail@plt+0x298>
   12c88:	add	r1, pc, r1
   12c8c:	add	r0, pc, r0
   12c90:	bl	12a08 <__assert_fail@plt>
   12c94:	andeq	r1, r1, r8, lsr fp
   12c98:	andeq	r2, r1, r0, lsr r2
   12c9c:	andeq	r2, r1, r8, lsr #5
   12ca0:	andeq	r0, r0, r7, asr #5
   12ca4:	ldr	r3, [pc, #32]	; 12ccc <__assert_fail@plt+0x2c4>
   12ca8:	ldr	r1, [pc, #32]	; 12cd0 <__assert_fail@plt+0x2c8>
   12cac:	ldr	r0, [pc, #32]	; 12cd4 <__assert_fail@plt+0x2cc>
   12cb0:	add	r3, pc, r3
   12cb4:	push	{r4, lr}
   12cb8:	add	r3, r3, #516	; 0x204
   12cbc:	ldr	r2, [pc, #20]	; 12cd8 <__assert_fail@plt+0x2d0>
   12cc0:	add	r1, pc, r1
   12cc4:	add	r0, pc, r0
   12cc8:	bl	12a08 <__assert_fail@plt>
   12ccc:	andeq	r1, r1, r0, lsl #22
   12cd0:	strdeq	r2, [r1], -r8
   12cd4:	andeq	r2, r1, r0, ror r2
   12cd8:	andeq	r0, r0, sp, asr #5
   12cdc:	ldr	r3, [pc, #32]	; 12d04 <__assert_fail@plt+0x2fc>
   12ce0:	ldr	r1, [pc, #32]	; 12d08 <__assert_fail@plt+0x300>
   12ce4:	ldr	r0, [pc, #32]	; 12d0c <__assert_fail@plt+0x304>
   12ce8:	add	r3, pc, r3
   12cec:	push	{r4, lr}
   12cf0:	add	r3, r3, #552	; 0x228
   12cf4:	ldr	r2, [pc, #20]	; 12d10 <__assert_fail@plt+0x308>
   12cf8:	add	r1, pc, r1
   12cfc:	add	r0, pc, r0
   12d00:	bl	12a08 <__assert_fail@plt>
   12d04:	andeq	r1, r1, r8, asr #21
   12d08:	andeq	r2, r1, r0, asr #3
   12d0c:	andeq	r2, r1, r8, lsr r2
   12d10:	andeq	r0, r0, sp, asr #5
   12d14:	ldr	r3, [pc, #32]	; 12d3c <__assert_fail@plt+0x334>
   12d18:	ldr	r1, [pc, #32]	; 12d40 <__assert_fail@plt+0x338>
   12d1c:	ldr	r0, [pc, #32]	; 12d44 <__assert_fail@plt+0x33c>
   12d20:	add	r3, pc, r3
   12d24:	push	{r4, lr}
   12d28:	add	r3, r3, #580	; 0x244
   12d2c:	ldr	r2, [pc, #20]	; 12d48 <__assert_fail@plt+0x340>
   12d30:	add	r1, pc, r1
   12d34:	add	r0, pc, r0
   12d38:	bl	12a08 <__assert_fail@plt>
   12d3c:	muleq	r1, r0, sl
   12d40:	andeq	r2, r1, r8, lsl #3
   12d44:	andeq	r2, r1, r0, lsl #4
   12d48:			; <UNDEFINED> instruction: 0x000002bb
   12d4c:	ldr	r3, [pc, #32]	; 12d74 <__assert_fail@plt+0x36c>
   12d50:	ldr	r1, [pc, #32]	; 12d78 <__assert_fail@plt+0x370>
   12d54:	ldr	r0, [pc, #32]	; 12d7c <__assert_fail@plt+0x374>
   12d58:	add	r3, pc, r3
   12d5c:	push	{r4, lr}
   12d60:	add	r3, r3, #608	; 0x260
   12d64:	ldr	r2, [pc, #20]	; 12d80 <__assert_fail@plt+0x378>
   12d68:	add	r1, pc, r1
   12d6c:	add	r0, pc, r0
   12d70:	bl	12a08 <__assert_fail@plt>
   12d74:	andeq	r1, r1, r8, asr sl
   12d78:	andeq	r2, r1, r0, asr r1
   12d7c:	andeq	r2, r1, r8, asr #3
   12d80:	ldrdeq	r0, [r0], -r2
   12d84:	ldr	r3, [pc, #32]	; 12dac <__assert_fail@plt+0x3a4>
   12d88:	ldr	r1, [pc, #32]	; 12db0 <__assert_fail@plt+0x3a8>
   12d8c:	ldr	r0, [pc, #32]	; 12db4 <__assert_fail@plt+0x3ac>
   12d90:	add	r3, pc, r3
   12d94:	push	{r4, lr}
   12d98:	add	r3, r3, #644	; 0x284
   12d9c:	ldr	r2, [pc, #20]	; 12db8 <__assert_fail@plt+0x3b0>
   12da0:	add	r1, pc, r1
   12da4:	add	r0, pc, r0
   12da8:	bl	12a08 <__assert_fail@plt>
   12dac:	andeq	r1, r1, r0, lsr #20
   12db0:	andeq	r2, r1, r8, lsl r1
   12db4:	muleq	r1, r0, r1
   12db8:	andeq	r0, r0, sp, ror #4
   12dbc:	ldr	r3, [pc, #32]	; 12de4 <__assert_fail@plt+0x3dc>
   12dc0:	ldr	r1, [pc, #32]	; 12de8 <__assert_fail@plt+0x3e0>
   12dc4:	ldr	r0, [pc, #32]	; 12dec <__assert_fail@plt+0x3e4>
   12dc8:	add	r3, pc, r3
   12dcc:	push	{r4, lr}
   12dd0:	add	r3, r3, #676	; 0x2a4
   12dd4:	ldr	r2, [pc, #20]	; 12df0 <__assert_fail@plt+0x3e8>
   12dd8:	add	r1, pc, r1
   12ddc:	add	r0, pc, r0
   12de0:	bl	12a08 <__assert_fail@plt>
   12de4:	andeq	r1, r1, r8, ror #19
   12de8:	andeq	r2, r1, r0, ror #1
   12dec:	andeq	r2, r1, r8, asr r1
   12df0:	andeq	r0, r0, sp, ror #4
   12df4:	ldr	r3, [pc, #32]	; 12e1c <__assert_fail@plt+0x414>
   12df8:	ldr	r1, [pc, #32]	; 12e20 <__assert_fail@plt+0x418>
   12dfc:	ldr	r0, [pc, #32]	; 12e24 <__assert_fail@plt+0x41c>
   12e00:	add	r3, pc, r3
   12e04:	push	{r4, lr}
   12e08:	mov	r2, #117	; 0x75
   12e0c:	add	r3, r3, #704	; 0x2c0
   12e10:	add	r1, pc, r1
   12e14:	add	r0, pc, r0
   12e18:	bl	12a08 <__assert_fail@plt>
   12e1c:			; <UNDEFINED> instruction: 0x000119b0
   12e20:	andeq	r2, r1, ip, asr #2
   12e24:	andeq	r2, r1, r8, asr #3
   12e28:	ldr	r3, [pc, #32]	; 12e50 <__assert_fail@plt+0x448>
   12e2c:	ldr	r1, [pc, #32]	; 12e54 <__assert_fail@plt+0x44c>
   12e30:	ldr	r0, [pc, #32]	; 12e58 <__assert_fail@plt+0x450>
   12e34:	add	r3, pc, r3
   12e38:	push	{r4, lr}
   12e3c:	add	r3, r3, #732	; 0x2dc
   12e40:	ldr	r2, [pc, #20]	; 12e5c <__assert_fail@plt+0x454>
   12e44:	add	r1, pc, r1
   12e48:	add	r0, pc, r0
   12e4c:	bl	12a08 <__assert_fail@plt>
   12e50:	andeq	r1, r1, ip, ror r9
   12e54:	andeq	r2, r1, r8, lsl r1
   12e58:	muleq	r1, r4, r1
   12e5c:	muleq	r0, r5, r1
   12e60:	subs	r2, r0, #0
   12e64:	bne	12e90 <__assert_fail@plt+0x488>
   12e68:	ldr	r3, [pc, #72]	; 12eb8 <__assert_fail@plt+0x4b0>
   12e6c:	ldr	r1, [pc, #72]	; 12ebc <__assert_fail@plt+0x4b4>
   12e70:	ldr	r0, [pc, #72]	; 12ec0 <__assert_fail@plt+0x4b8>
   12e74:	add	r3, pc, r3
   12e78:	push	{r4, lr}
   12e7c:	add	r3, r3, #764	; 0x2fc
   12e80:	ldr	r2, [pc, #60]	; 12ec4 <__assert_fail@plt+0x4bc>
   12e84:	add	r1, pc, r1
   12e88:	add	r0, pc, r0
   12e8c:	bl	12a08 <__assert_fail@plt>
   12e90:	ldr	r3, [r2]
   12e94:	sub	r3, r2, r3
   12e98:	ldrh	r1, [r3]
   12e9c:	cmp	r1, #13
   12ea0:	movls	r0, #0
   12ea4:	bls	12eb4 <__assert_fail@plt+0x4ac>
   12ea8:	ldrh	r0, [r3, #12]
   12eac:	cmp	r0, #0
   12eb0:	ldrbne	r0, [r2, r0]
   12eb4:	bx	lr
   12eb8:	andeq	r1, r1, ip, lsr r9
   12ebc:	andeq	r2, r1, r4, lsr r0
   12ec0:	andeq	r2, r1, ip, lsr #1
   12ec4:	andeq	r0, r0, r5, lsr r3
   12ec8:	subs	r3, r0, #0
   12ecc:	bne	12ef8 <__assert_fail@plt+0x4f0>
   12ed0:	ldr	r3, [pc, #80]	; 12f28 <__assert_fail@plt+0x520>
   12ed4:	ldr	r1, [pc, #80]	; 12f2c <__assert_fail@plt+0x524>
   12ed8:	ldr	r0, [pc, #80]	; 12f30 <__assert_fail@plt+0x528>
   12edc:	add	r3, pc, r3
   12ee0:	push	{r4, lr}
   12ee4:	add	r3, r3, #796	; 0x31c
   12ee8:	ldr	r2, [pc, #68]	; 12f34 <__assert_fail@plt+0x52c>
   12eec:	add	r1, pc, r1
   12ef0:	add	r0, pc, r0
   12ef4:	bl	12a08 <__assert_fail@plt>
   12ef8:	ldr	r2, [r3]
   12efc:	sub	r2, r3, r2
   12f00:	ldrh	r1, [r2]
   12f04:	cmp	r1, #15
   12f08:	movls	r0, #0
   12f0c:	bls	12f24 <__assert_fail@plt+0x51c>
   12f10:	ldrh	r0, [r2, #14]
   12f14:	cmp	r0, #0
   12f18:	ldrne	r2, [r3, r0]
   12f1c:	addne	r0, r3, r0
   12f20:	addne	r0, r0, r2
   12f24:	bx	lr
   12f28:	ldrdeq	r1, [r1], -r4
   12f2c:	andeq	r1, r1, ip, asr #31
   12f30:	andeq	r2, r1, r4, asr #32
   12f34:	andeq	r0, r0, r5, lsr r3
   12f38:	subs	r2, r0, #0
   12f3c:	bne	12f68 <__assert_fail@plt+0x560>
   12f40:	ldr	r3, [pc, #72]	; 12f90 <__assert_fail@plt+0x588>
   12f44:	ldr	r1, [pc, #72]	; 12f94 <__assert_fail@plt+0x58c>
   12f48:	ldr	r0, [pc, #72]	; 12f98 <__assert_fail@plt+0x590>
   12f4c:	add	r3, pc, r3
   12f50:	push	{r4, lr}
   12f54:	add	r3, r3, #820	; 0x334
   12f58:	ldr	r2, [pc, #60]	; 12f9c <__assert_fail@plt+0x594>
   12f5c:	add	r1, pc, r1
   12f60:	add	r0, pc, r0
   12f64:	bl	12a08 <__assert_fail@plt>
   12f68:	ldr	r3, [r2]
   12f6c:	sub	r3, r2, r3
   12f70:	ldrh	r1, [r3]
   12f74:	cmp	r1, #5
   12f78:	movls	r0, #0
   12f7c:	bls	12f8c <__assert_fail@plt+0x584>
   12f80:	ldrh	r0, [r3, #4]
   12f84:	cmp	r0, #0
   12f88:	ldrne	r0, [r2, r0]
   12f8c:	bx	lr
   12f90:	andeq	r1, r1, r4, ror #16
   12f94:	andeq	r1, r1, ip, asr pc
   12f98:	ldrdeq	r1, [r1], -r4
   12f9c:	andeq	r0, r0, r2, lsl #6
   12fa0:	subs	r3, r0, #0
   12fa4:	bne	12fd0 <__assert_fail@plt+0x5c8>
   12fa8:	ldr	r3, [pc, #84]	; 13004 <__assert_fail@plt+0x5fc>
   12fac:	ldr	r1, [pc, #84]	; 13008 <__assert_fail@plt+0x600>
   12fb0:	ldr	r0, [pc, #84]	; 1300c <__assert_fail@plt+0x604>
   12fb4:	add	r3, pc, r3
   12fb8:	push	{r4, lr}
   12fbc:	add	r3, r3, #860	; 0x35c
   12fc0:	ldr	r2, [pc, #72]	; 13010 <__assert_fail@plt+0x608>
   12fc4:	add	r1, pc, r1
   12fc8:	add	r0, pc, r0
   12fcc:	bl	12a08 <__assert_fail@plt>
   12fd0:	ldr	r2, [r3]
   12fd4:	sub	r2, r3, r2
   12fd8:	ldrh	r1, [r2]
   12fdc:	cmp	r1, #21
   12fe0:	movls	r0, #0
   12fe4:	bls	13000 <__assert_fail@plt+0x5f8>
   12fe8:	ldrh	r0, [r2, #20]
   12fec:	cmp	r0, #0
   12ff0:	ldrne	r2, [r3, r0]
   12ff4:	addne	r0, r3, r0
   12ff8:	addne	r3, r2, #4
   12ffc:	addne	r0, r0, r3
   13000:	bx	lr
   13004:	strdeq	r1, [r1], -ip
   13008:	strdeq	r1, [r1], -r4
   1300c:	andeq	r1, r1, ip, ror #30
   13010:	andeq	r0, r0, r7, lsr r3
   13014:	push	{lr}		; (str lr, [sp, #-4]!)
   13018:	sub	sp, sp, #12
   1301c:	add	ip, sp, #8
   13020:	stmdb	ip, {r1, r2}
   13024:	ldr	r2, [sp]
   13028:	cmp	r2, #0
   1302c:	beq	1303c <__assert_fail@plt+0x634>
   13030:	ldr	r1, [r2, #-4]
   13034:	cmp	r3, r1
   13038:	bcc	13060 <__assert_fail@plt+0x658>
   1303c:	ldr	r3, [pc, #104]	; 130ac <__assert_fail@plt+0x6a4>
   13040:	ldr	r1, [pc, #104]	; 130b0 <__assert_fail@plt+0x6a8>
   13044:	ldr	r0, [pc, #104]	; 130b4 <__assert_fail@plt+0x6ac>
   13048:	add	r3, pc, r3
   1304c:	ldr	r2, [pc, #100]	; 130b8 <__assert_fail@plt+0x6b0>
   13050:	add	r3, r3, #892	; 0x37c
   13054:	add	r1, pc, r1
   13058:	add	r0, pc, r0
   1305c:	bl	12a08 <__assert_fail@plt>
   13060:	ldrb	r2, [r2, r3]
   13064:	cmp	r2, #0
   13068:	strbeq	r2, [r0]
   1306c:	streq	r2, [r0, #4]
   13070:	beq	130a4 <__assert_fail@plt+0x69c>
   13074:	ldr	r1, [sp, #4]
   13078:	cmp	r1, #0
   1307c:	add	ip, r1, r3, lsl #2
   13080:	beq	13090 <__assert_fail@plt+0x688>
   13084:	ldr	lr, [r1, #-4]
   13088:	cmp	r3, lr
   1308c:	bcc	13094 <__assert_fail@plt+0x68c>
   13090:	bl	12df4 <__assert_fail@plt+0x3ec>
   13094:	ldr	r3, [r1, r3, lsl #2]
   13098:	strb	r2, [r0]
   1309c:	add	r3, ip, r3
   130a0:	str	r3, [r0, #4]
   130a4:	add	sp, sp, #12
   130a8:	pop	{pc}		; (ldr pc, [sp], #4)
   130ac:	andeq	r1, r1, r8, ror #14
   130b0:	andeq	r1, r1, r4, ror #28
   130b4:	andeq	r1, r1, r0, ror #31
   130b8:	andeq	r0, r0, r5, lsl #6
   130bc:	ldr	r3, [pc, #32]	; 130e4 <__assert_fail@plt+0x6dc>
   130c0:	ldr	r1, [pc, #32]	; 130e8 <__assert_fail@plt+0x6e0>
   130c4:	ldr	r0, [pc, #32]	; 130ec <__assert_fail@plt+0x6e4>
   130c8:	add	r3, pc, r3
   130cc:	push	{r4, lr}
   130d0:	add	r3, r3, #924	; 0x39c
   130d4:	ldr	r2, [pc, #20]	; 130f0 <__assert_fail@plt+0x6e8>
   130d8:	add	r1, pc, r1
   130dc:	add	r0, pc, r0
   130e0:	bl	12a08 <__assert_fail@plt>
   130e4:	andeq	r1, r1, r8, ror #13
   130e8:	andeq	r1, r1, r0, ror #27
   130ec:	andeq	r1, r1, r8, asr lr
   130f0:	andeq	r0, r0, r1, asr #5
   130f4:	ldr	r3, [pc, #32]	; 1311c <__assert_fail@plt+0x714>
   130f8:	ldr	r1, [pc, #32]	; 13120 <__assert_fail@plt+0x718>
   130fc:	ldr	r0, [pc, #32]	; 13124 <__assert_fail@plt+0x71c>
   13100:	add	r3, pc, r3
   13104:	push	{r4, lr}
   13108:	mov	r2, #235	; 0xeb
   1310c:	add	r3, r3, #964	; 0x3c4
   13110:	add	r1, pc, r1
   13114:	add	r0, pc, r0
   13118:	bl	12a08 <__assert_fail@plt>
   1311c:			; <UNDEFINED> instruction: 0x000116b0
   13120:	andeq	r1, r1, r8, asr #30
   13124:	andeq	r1, r1, r0, asr #31
   13128:	ldr	r3, [pc, #32]	; 13150 <__assert_fail@plt+0x748>
   1312c:	ldr	r1, [pc, #32]	; 13154 <__assert_fail@plt+0x74c>
   13130:	ldr	r0, [pc, #32]	; 13158 <__assert_fail@plt+0x750>
   13134:	add	r3, pc, r3
   13138:	push	{r4, lr}
   1313c:	mov	r2, #221	; 0xdd
   13140:	add	r3, r3, #992	; 0x3e0
   13144:	add	r1, pc, r1
   13148:	add	r0, pc, r0
   1314c:	bl	12a08 <__assert_fail@plt>
   13150:	andeq	r1, r1, ip, ror r6
   13154:	andeq	r1, r1, r4, lsl pc
   13158:	andeq	r2, r1, r0, lsr r0
   1315c:	ldr	r3, [pc, #28]	; 13180 <__assert_fail@plt+0x778>
   13160:	ldr	r1, [pc, #28]	; 13184 <__assert_fail@plt+0x77c>
   13164:	ldr	r0, [pc, #28]	; 13188 <__assert_fail@plt+0x780>
   13168:	push	{r4, lr}
   1316c:	add	r3, pc, r3
   13170:	mov	r2, #308	; 0x134
   13174:	add	r1, pc, r1
   13178:	add	r0, pc, r0
   1317c:	bl	12a08 <__assert_fail@plt>
   13180:	andeq	r4, r1, ip, ror #18
   13184:	strheq	r5, [r1], -r4
   13188:	andeq	r5, r1, r8, lsr r1
   1318c:	ldr	r3, [pc, #32]	; 131b4 <__assert_fail@plt+0x7ac>
   13190:	ldr	r1, [pc, #32]	; 131b8 <__assert_fail@plt+0x7b0>
   13194:	ldr	r0, [pc, #32]	; 131bc <__assert_fail@plt+0x7b4>
   13198:	add	r3, pc, r3
   1319c:	push	{r4, lr}
   131a0:	add	r3, r3, #16
   131a4:	ldr	r2, [pc, #20]	; 131c0 <__assert_fail@plt+0x7b8>
   131a8:	add	r1, pc, r1
   131ac:	add	r0, pc, r0
   131b0:	bl	12a08 <__assert_fail@plt>
   131b4:	andeq	r4, r1, r0, asr #18
   131b8:	andeq	r5, r1, r0, lsl #1
   131bc:	andeq	r5, r1, r4, lsl #2
   131c0:	andeq	r0, r0, r1, lsr #5
   131c4:	ldr	r3, [pc, #32]	; 131ec <__assert_fail@plt+0x7e4>
   131c8:	ldr	r1, [pc, #32]	; 131f0 <__assert_fail@plt+0x7e8>
   131cc:	ldr	r0, [pc, #32]	; 131f4 <__assert_fail@plt+0x7ec>
   131d0:	add	r3, pc, r3
   131d4:	push	{r4, lr}
   131d8:	add	r3, r3, #28
   131dc:	ldr	r2, [pc, #20]	; 131f8 <__assert_fail@plt+0x7f0>
   131e0:	add	r1, pc, r1
   131e4:	add	r0, pc, r0
   131e8:	bl	12a08 <__assert_fail@plt>
   131ec:	andeq	r4, r1, r8, lsl #18
   131f0:	andeq	r5, r1, r8, asr #32
   131f4:	andeq	r5, r1, ip, asr #1
   131f8:	andeq	r0, r0, r7, lsl #5
   131fc:	ldr	r3, [pc, #32]	; 13224 <__assert_fail@plt+0x81c>
   13200:	ldr	r1, [pc, #32]	; 13228 <__assert_fail@plt+0x820>
   13204:	ldr	r0, [pc, #32]	; 1322c <__assert_fail@plt+0x824>
   13208:	add	r3, pc, r3
   1320c:	push	{r4, lr}
   13210:	mov	r2, #892	; 0x37c
   13214:	add	r3, r3, #40	; 0x28
   13218:	add	r1, pc, r1
   1321c:	add	r0, pc, r0
   13220:	bl	12a08 <__assert_fail@plt>
   13224:	ldrdeq	r4, [r1], -r0
   13228:	andeq	r5, r1, r0, lsl r0
   1322c:	andeq	r5, r1, ip, rrx

00013230 <main@@Base>:
   13230:	push	{r4, r5, lr}
   13234:	sub	sp, sp, #236	; 0xec
   13238:	mov	r0, sp
   1323c:	bl	1ef74 <flatcc_builder_init@@Base>
   13240:	ldr	r0, [pc, #412]	; 133e4 <main@@Base+0x1b4>
   13244:	add	r0, pc, r0
   13248:	bl	1296c <puts@plt>
   1324c:	mov	r0, sp
   13250:	bl	1547c <test_table_with_emptystruct@@Base>
   13254:	cmp	r0, #0
   13258:	bne	133c8 <main@@Base+0x198>
   1325c:	mov	r0, sp
   13260:	bl	1498c <test_enums@@Base>
   13264:	cmp	r0, #0
   13268:	bne	133c8 <main@@Base+0x198>
   1326c:	mov	r0, sp
   13270:	bl	14ecc <test_empty_monster@@Base>
   13274:	cmp	r0, #0
   13278:	bne	133c8 <main@@Base+0x198>
   1327c:	mov	r0, sp
   13280:	bl	16fa0 <test_monster@@Base>
   13284:	cmp	r0, #0
   13288:	bne	133c8 <main@@Base+0x198>
   1328c:	mov	r0, sp
   13290:	bl	17064 <test_monster_with_size@@Base>
   13294:	cmp	r0, #0
   13298:	bne	133c8 <main@@Base+0x198>
   1329c:	mov	r0, sp
   132a0:	bl	17190 <test_string@@Base>
   132a4:	cmp	r0, #0
   132a8:	bne	133c8 <main@@Base+0x198>
   132ac:	mov	r0, sp
   132b0:	bl	1de2c <test_struct_buffer@@Base>
   132b4:	cmp	r0, #0
   132b8:	bne	133c8 <main@@Base+0x198>
   132bc:	mov	r0, sp
   132c0:	bl	15068 <test_typed_empty_monster@@Base>
   132c4:	cmp	r0, #0
   132c8:	bne	133c8 <main@@Base+0x198>
   132cc:	mov	r0, sp
   132d0:	bl	155b0 <test_typed_table_with_emptystruct@@Base>
   132d4:	cmp	r0, #0
   132d8:	bne	133c8 <main@@Base+0x198>
   132dc:	mov	r0, sp
   132e0:	bl	1e0c4 <test_typed_struct_buffer@@Base>
   132e4:	cmp	r0, #0
   132e8:	bne	133c8 <main@@Base+0x198>
   132ec:	mov	r0, sp
   132f0:	bl	1aed8 <test_clone_slice@@Base>
   132f4:	cmp	r0, #0
   132f8:	bne	133c8 <main@@Base+0x198>
   132fc:	mov	r0, sp
   13300:	bl	1ced4 <test_add_set_defaults@@Base>
   13304:	cmp	r0, #0
   13308:	bne	133c8 <main@@Base+0x198>
   1330c:	mov	r0, sp
   13310:	bl	1babc <test_create_add_field@@Base>
   13314:	cmp	r0, #0
   13318:	bne	133c8 <main@@Base+0x198>
   1331c:	mov	r0, sp
   13320:	bl	1bdb8 <test_union_vector@@Base>
   13324:	cmp	r0, #0
   13328:	bne	133c8 <main@@Base+0x198>
   1332c:	mov	r0, sp
   13330:	bl	1a9fc <test_basic_sort@@Base>
   13334:	cmp	r0, #0
   13338:	bne	133c8 <main@@Base+0x198>
   1333c:	mov	r0, sp
   13340:	bl	174c0 <test_sort_find@@Base>
   13344:	cmp	r0, #0
   13348:	bne	133c8 <main@@Base+0x198>
   1334c:	mov	r0, sp
   13350:	bl	18fdc <test_scan@@Base>
   13354:	cmp	r0, #0
   13358:	bne	133c8 <main@@Base+0x198>
   1335c:	mov	r0, sp
   13360:	bl	1d238 <test_nested_buffer@@Base>
   13364:	cmp	r0, #0
   13368:	bne	133c8 <main@@Base+0x198>
   1336c:	mov	r0, sp
   13370:	bl	1d5f0 <test_nested_buffer_first@@Base>
   13374:	cmp	r0, #0
   13378:	bne	133c8 <main@@Base+0x198>
   1337c:	mov	r0, sp
   13380:	bl	1d9a8 <test_nested_buffer_using_nest@@Base>
   13384:	cmp	r0, #0
   13388:	bne	133c8 <main@@Base+0x198>
   1338c:	mov	r0, sp
   13390:	bl	1de24 <verify_include@@Base>
   13394:	cmp	r0, #0
   13398:	bne	133c8 <main@@Base+0x198>
   1339c:	mov	r0, sp
   133a0:	bl	14994 <test_type_aliases@@Base>
   133a4:	cmp	r0, #0
   133a8:	bne	133c8 <main@@Base+0x198>
   133ac:	mov	r0, sp
   133b0:	bl	1c188 <test_mixed_type_union@@Base>
   133b4:	subs	r5, r0, #0
   133b8:	bne	133c8 <main@@Base+0x198>
   133bc:	mov	r0, sp
   133c0:	bl	1f0fc <flatcc_builder_clear@@Base>
   133c4:	b	133d8 <main@@Base+0x1a8>
   133c8:	ldr	r0, [pc, #24]	; 133e8 <main@@Base+0x1b8>
   133cc:	mvn	r5, #0
   133d0:	add	r0, pc, r0
   133d4:	bl	1296c <puts@plt>
   133d8:	mov	r0, r5
   133dc:	add	sp, sp, #236	; 0xec
   133e0:	pop	{r4, r5, pc}
   133e4:	andeq	r4, r1, ip, ror #16
   133e8:	strdeq	r4, [r1], -ip

000133ec <_start@@Base>:
   133ec:	mov	fp, #0
   133f0:	mov	lr, #0
   133f4:	pop	{r1}		; (ldr r1, [sp], #4)
   133f8:	mov	r2, sp
   133fc:	push	{r2}		; (str r2, [sp, #-4]!)
   13400:	push	{r0}		; (str r0, [sp, #-4]!)
   13404:	ldr	ip, [pc, #16]	; 1341c <_start@@Base+0x30>
   13408:	push	{ip}		; (str ip, [sp, #-4]!)
   1340c:	ldr	r0, [pc, #12]	; 13420 <_start@@Base+0x34>
   13410:	ldr	r3, [pc, #12]	; 13424 <_start@@Base+0x38>
   13414:	bl	12984 <__libc_start_main@plt>
   13418:	bl	129fc <abort@plt>
   1341c:	andeq	r4, r2, r8, lsr #15
   13420:	andeq	r3, r1, r0, lsr r2
   13424:	andeq	r4, r2, r8, asr #14
   13428:	ldr	r3, [pc, #20]	; 13444 <_start@@Base+0x58>
   1342c:	ldr	r2, [pc, #20]	; 13448 <_start@@Base+0x5c>
   13430:	add	r3, pc, r3
   13434:	ldr	r2, [r3, r2]
   13438:	cmp	r2, #0
   1343c:	bxeq	lr
   13440:	b	12990 <__gmon_start__@plt>
   13444:	andeq	r5, r2, r8, asr #23
   13448:	andeq	r0, r0, ip, rrx
   1344c:	ldr	r3, [pc, #28]	; 13470 <_start@@Base+0x84>
   13450:	ldr	r0, [pc, #28]	; 13474 <_start@@Base+0x88>
   13454:	sub	r3, r3, r0
   13458:	cmp	r3, #6
   1345c:	bxls	lr
   13460:	ldr	r3, [pc, #16]	; 13478 <_start@@Base+0x8c>
   13464:	cmp	r3, #0
   13468:	bxeq	lr
   1346c:	bx	r3
   13470:	andeq	r9, r3, r3, lsl #1
   13474:	andeq	r9, r3, r0, lsl #1
   13478:	andeq	r0, r0, r0
   1347c:	ldr	r1, [pc, #36]	; 134a8 <_start@@Base+0xbc>
   13480:	ldr	r0, [pc, #36]	; 134ac <_start@@Base+0xc0>
   13484:	sub	r1, r1, r0
   13488:	asr	r1, r1, #2
   1348c:	add	r1, r1, r1, lsr #31
   13490:	asrs	r1, r1, #1
   13494:	bxeq	lr
   13498:	ldr	r3, [pc, #16]	; 134b0 <_start@@Base+0xc4>
   1349c:	cmp	r3, #0
   134a0:	bxeq	lr
   134a4:	bx	r3
   134a8:	andeq	r9, r3, r0, lsl #1
   134ac:	andeq	r9, r3, r0, lsl #1
   134b0:	andeq	r0, r0, r0
   134b4:	push	{r4, lr}
   134b8:	ldr	r4, [pc, #24]	; 134d8 <_start@@Base+0xec>
   134bc:	ldrb	r3, [r4]
   134c0:	cmp	r3, #0
   134c4:	popne	{r4, pc}
   134c8:	bl	1344c <_start@@Base+0x60>
   134cc:	mov	r3, #1
   134d0:	strb	r3, [r4]
   134d4:	pop	{r4, pc}
   134d8:	andeq	r9, r3, r0, lsl #1
   134dc:	ldr	r0, [pc, #40]	; 1350c <_start@@Base+0x120>
   134e0:	ldr	r3, [r0]
   134e4:	cmp	r3, #0
   134e8:	bne	134f0 <_start@@Base+0x104>
   134ec:	b	1347c <_start@@Base+0x90>
   134f0:	ldr	r3, [pc, #24]	; 13510 <_start@@Base+0x124>
   134f4:	cmp	r3, #0
   134f8:	beq	134ec <_start@@Base+0x100>
   134fc:	push	{r4, lr}
   13500:	blx	r3
   13504:	pop	{r4, lr}
   13508:	b	1347c <_start@@Base+0x90>
   1350c:	andeq	r8, r3, r4, lsl pc
	...
   13518:	mov	r0, #0
   1351c:	bx	lr
   13520:	mov	r3, #4
   13524:	mov	r2, r3
   13528:	mov	r1, #0
   1352c:	b	23450 <flatcc_verify_field@@Base>
   13530:	mov	r2, #0
   13534:	mov	r1, r2
   13538:	mov	r3, #1
   1353c:	b	23450 <flatcc_verify_field@@Base>
   13540:	cmp	r0, #0
   13544:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13548:	mov	r6, r1
   1354c:	sub	sp, sp, #36	; 0x24
   13550:	mov	r8, r2
   13554:	mov	r5, r3
   13558:	beq	13570 <_start@@Base+0x184>
   1355c:	ldr	r1, [pc, #304]	; 13694 <_start@@Base+0x2a8>
   13560:	mov	r2, r0
   13564:	add	r1, pc, r1
   13568:	mov	r0, r3
   1356c:	bl	129a8 <fprintf@plt>
   13570:	cmp	r8, #0
   13574:	beq	1368c <_start@@Base+0x2a0>
   13578:	ldr	r3, [pc, #280]	; 13698 <_start@@Base+0x2ac>
   1357c:	ldr	fp, [pc, #280]	; 1369c <_start@@Base+0x2b0>
   13580:	ldr	sl, [pc, #280]	; 136a0 <_start@@Base+0x2b4>
   13584:	add	r3, pc, r3
   13588:	mov	r4, #0
   1358c:	str	r3, [sp, #4]
   13590:	add	fp, pc, fp
   13594:	add	sl, pc, sl
   13598:	sub	r6, r6, #1
   1359c:	add	r9, sp, #12
   135a0:	b	1360c <_start@@Base+0x220>
   135a4:	cmp	r4, #0
   135a8:	beq	135b0 <_start@@Base+0x1c4>
   135ac:	bl	129a8 <fprintf@plt>
   135b0:	mov	r2, r4
   135b4:	ldr	r1, [sp, #4]
   135b8:	mov	r0, r5
   135bc:	bl	129a8 <fprintf@plt>
   135c0:	ldrb	r2, [r6, #1]
   135c4:	mov	r1, sl
   135c8:	mov	r0, r5
   135cc:	bl	129a8 <fprintf@plt>
   135d0:	ldrb	r1, [r6, #1]!
   135d4:	add	r3, sp, #32
   135d8:	add	r2, r3, r7
   135dc:	sub	r0, r1, #32
   135e0:	cmp	r0, #94	; 0x5e
   135e4:	addls	r3, sp, #32
   135e8:	addls	r2, r3, r7
   135ec:	movhi	r3, #46	; 0x2e
   135f0:	add	r4, r4, #1
   135f4:	strbhi	r3, [r2, #-20]	; 0xffffffec
   135f8:	strbls	r1, [r2, #-20]	; 0xffffffec
   135fc:	mov	r3, #0
   13600:	cmp	r8, r4
   13604:	strb	r3, [r2, #-19]	; 0xffffffed
   13608:	beq	13638 <_start@@Base+0x24c>
   1360c:	ands	r7, r4, #15
   13610:	mov	r2, r9
   13614:	mov	r1, fp
   13618:	mov	r0, r5
   1361c:	beq	135a4 <_start@@Base+0x1b8>
   13620:	tst	r4, #7
   13624:	bne	135c0 <_start@@Base+0x1d4>
   13628:	mov	r1, r5
   1362c:	mov	r0, #32
   13630:	bl	129e4 <fputc@plt>
   13634:	b	135c0 <_start@@Base+0x1d4>
   13638:	tst	r4, #15
   1363c:	beq	13670 <_start@@Base+0x284>
   13640:	ldr	r8, [pc, #92]	; 136a4 <_start@@Base+0x2b8>
   13644:	mov	r7, #3
   13648:	add	r8, pc, r8
   1364c:	mov	r6, #1
   13650:	add	r4, r4, #1
   13654:	mov	r3, r5
   13658:	mov	r2, r7
   1365c:	mov	r1, r6
   13660:	mov	r0, r8
   13664:	bl	12954 <fwrite@plt>
   13668:	tst	r4, #15
   1366c:	bne	13650 <_start@@Base+0x264>
   13670:	ldr	r1, [pc, #48]	; 136a8 <_start@@Base+0x2bc>
   13674:	mov	r2, r9
   13678:	mov	r0, r5
   1367c:	add	r1, pc, r1
   13680:	bl	129a8 <fprintf@plt>
   13684:	add	sp, sp, #36	; 0x24
   13688:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1368c:	add	r9, sp, #12
   13690:	b	13670 <_start@@Base+0x284>
   13694:	andeq	r1, r1, r0, lsr r9
   13698:	andeq	r1, r1, r0, lsr #18
   1369c:	andeq	r1, r1, ip, lsl #18
   136a0:	andeq	r1, r1, r8, lsl r9
   136a4:	andeq	r1, r1, ip, ror #16
   136a8:	andeq	r1, r1, r0, lsr #16
   136ac:	push	{r4, lr}
   136b0:	sub	sp, sp, #8
   136b4:	mov	r1, #0
   136b8:	mov	r0, sp
   136bc:	bl	12960 <gettimeofday@plt>
   136c0:	ldr	r3, [pc, #96]	; 13728 <_start@@Base+0x33c>
   136c4:	ldr	r2, [sp, #4]
   136c8:	add	r3, pc, r3
   136cc:	vldr	d5, [pc, #76]	; 13720 <_start@@Base+0x334>
   136d0:	ldr	ip, [r3]
   136d4:	cmp	ip, #0
   136d8:	moveq	r4, sp
   136dc:	ldmeq	r4, {r0, r1}
   136e0:	stmeq	r3, {r0, r1}
   136e4:	ldr	r1, [pc, #64]	; 1372c <_start@@Base+0x340>
   136e8:	ldr	r3, [sp]
   136ec:	add	r1, pc, r1
   136f0:	moveq	ip, r0
   136f4:	ldr	r1, [r1, #4]
   136f8:	sub	r3, r3, ip
   136fc:	sub	r2, r2, r1
   13700:	vmov	s0, r3
   13704:	vmov	s15, r2
   13708:	vcvt.f64.s32	d0, s0
   1370c:	vcvt.f64.s32	d7, s15
   13710:	vdiv.f64	d6, d7, d5
   13714:	vadd.f64	d0, d6, d0
   13718:	add	sp, sp, #8
   1371c:	pop	{r4, pc}
   13720:	andeq	r0, r0, r0
   13724:	smlawbmi	lr, r0, r4, r8
   13728:			; <UNDEFINED> instruction: 0x000259b4
   1372c:	muleq	r2, r0, r9
   13730:	ldr	r3, [pc, #32]	; 13758 <_start@@Base+0x36c>
   13734:	ldr	r1, [pc, #32]	; 1375c <_start@@Base+0x370>
   13738:	ldr	r0, [pc, #32]	; 13760 <_start@@Base+0x374>
   1373c:	add	r3, pc, r3
   13740:	push	{r4, lr}
   13744:	add	r3, r3, #172	; 0xac
   13748:	ldr	r2, [pc, #20]	; 13764 <_start@@Base+0x378>
   1374c:	add	r1, pc, r1
   13750:	add	r0, pc, r0
   13754:	bl	12a08 <__assert_fail@plt>
   13758:	andeq	r1, r1, r4, ror r0
   1375c:	andeq	r1, r1, r0, lsl r8
   13760:	andeq	r1, r1, ip, lsl #17
   13764:	andeq	r0, r0, fp, lsl #3
   13768:	ldr	r3, [pc, #32]	; 13790 <_start@@Base+0x3a4>
   1376c:	ldr	r1, [pc, #32]	; 13794 <_start@@Base+0x3a8>
   13770:	ldr	r0, [pc, #32]	; 13798 <_start@@Base+0x3ac>
   13774:	add	r3, pc, r3
   13778:	push	{r4, lr}
   1377c:	mov	r2, #108	; 0x6c
   13780:	add	r3, r3, #372	; 0x174
   13784:	add	r1, pc, r1
   13788:	add	r0, pc, r0
   1378c:	bl	12a08 <__assert_fail@plt>
   13790:	andeq	r1, r1, ip, lsr r0
   13794:	ldrdeq	r1, [r1], -r8
   13798:	andeq	r1, r1, r4, asr r8
   1379c:	ldr	r3, [pc, #32]	; 137c4 <_start@@Base+0x3d8>
   137a0:	ldr	r1, [pc, #32]	; 137c8 <_start@@Base+0x3dc>
   137a4:	ldr	r0, [pc, #32]	; 137cc <_start@@Base+0x3e0>
   137a8:	add	r3, pc, r3
   137ac:	push	{r4, lr}
   137b0:	add	r3, r3, #484	; 0x1e4
   137b4:	ldr	r2, [pc, #20]	; 137d0 <_start@@Base+0x3e4>
   137b8:	add	r1, pc, r1
   137bc:	add	r0, pc, r0
   137c0:	bl	12a08 <__assert_fail@plt>
   137c4:	andeq	r1, r1, r8
   137c8:	andeq	r1, r1, r0, lsl #14
   137cc:	andeq	r1, r1, r0, lsr #16
   137d0:			; <UNDEFINED> instruction: 0x000002b5
   137d4:	cmp	r0, #0
   137d8:	push	{r4, lr}
   137dc:	beq	13838 <_start@@Base+0x44c>
   137e0:	ldr	r3, [r0]
   137e4:	sub	r3, r0, r3
   137e8:	ldrh	r2, [r3]
   137ec:	cmp	r2, #11
   137f0:	bls	13814 <_start@@Base+0x428>
   137f4:	ldrh	r2, [r3, #10]
   137f8:	cmp	r2, #0
   137fc:	beq	13814 <_start@@Base+0x428>
   13800:	ldr	r3, [r0, r2]
   13804:	add	r0, r0, r2
   13808:	add	r3, r3, #4
   1380c:	add	r0, r0, r3
   13810:	pop	{r4, pc}
   13814:	ldr	r3, [pc, #32]	; 1383c <_start@@Base+0x450>
   13818:	ldr	r1, [pc, #32]	; 13840 <_start@@Base+0x454>
   1381c:	ldr	r0, [pc, #32]	; 13844 <_start@@Base+0x458>
   13820:	add	r3, pc, r3
   13824:	ldr	r2, [pc, #28]	; 13848 <_start@@Base+0x45c>
   13828:	add	r3, r3, #580	; 0x244
   1382c:	add	r1, pc, r1
   13830:	add	r0, pc, r0
   13834:	bl	12a08 <__assert_fail@plt>
   13838:	bl	12d14 <__assert_fail@plt+0x30c>
   1383c:	muleq	r1, r0, pc	; <UNPREDICTABLE>
   13840:	andeq	r1, r1, ip, lsl #13
   13844:	andeq	r1, r1, r4, ror #15
   13848:			; <UNDEFINED> instruction: 0x000002bb
   1384c:	mov	r3, #8
   13850:	push	{r4, lr}
   13854:	mov	r2, r3
   13858:	mov	r1, #0
   1385c:	mov	r4, r0
   13860:	bl	23450 <flatcc_verify_field@@Base>
   13864:	cmp	r0, #0
   13868:	popne	{r4, pc}
   1386c:	mov	r3, #4
   13870:	mov	r0, r4
   13874:	mov	r2, r3
   13878:	mov	r1, #1
   1387c:	pop	{r4, lr}
   13880:	b	23450 <flatcc_verify_field@@Base>
   13884:	mov	r3, #1
   13888:	push	{r4, lr}
   1388c:	mov	r2, r3
   13890:	mov	r1, #0
   13894:	mov	r4, r0
   13898:	bl	23450 <flatcc_verify_field@@Base>
   1389c:	cmp	r0, #0
   138a0:	popne	{r4, pc}
   138a4:	mov	r3, #1
   138a8:	mov	r2, r3
   138ac:	mov	r1, r3
   138b0:	mov	r0, r4
   138b4:	bl	23450 <flatcc_verify_field@@Base>
   138b8:	cmp	r0, #0
   138bc:	popne	{r4, pc}
   138c0:	mov	r3, #1
   138c4:	mov	r2, r3
   138c8:	mov	r1, #2
   138cc:	mov	r0, r4
   138d0:	bl	23450 <flatcc_verify_field@@Base>
   138d4:	cmp	r0, #0
   138d8:	popne	{r4, pc}
   138dc:	mov	r3, #1
   138e0:	mov	r0, r4
   138e4:	mov	r2, r3
   138e8:	mov	r1, #3
   138ec:	pop	{r4, lr}
   138f0:	b	23450 <flatcc_verify_field@@Base>
   138f4:	mov	r3, #1
   138f8:	push	{r4, lr}
   138fc:	mov	r2, r3
   13900:	sub	sp, sp, #8
   13904:	mov	r1, #0
   13908:	mov	r4, r0
   1390c:	bl	23450 <flatcc_verify_field@@Base>
   13910:	cmp	r0, #0
   13914:	beq	13920 <_start@@Base+0x534>
   13918:	add	sp, sp, #8
   1391c:	pop	{r4, pc}
   13920:	mov	r3, #1
   13924:	mov	r2, r3
   13928:	mov	r1, r3
   1392c:	mov	r0, r4
   13930:	bl	23450 <flatcc_verify_field@@Base>
   13934:	cmp	r0, #0
   13938:	bne	13918 <_start@@Base+0x52c>
   1393c:	mov	r3, #2
   13940:	mov	r2, r3
   13944:	mov	r1, r3
   13948:	mov	r0, r4
   1394c:	bl	23450 <flatcc_verify_field@@Base>
   13950:	cmp	r0, #0
   13954:	bne	13918 <_start@@Base+0x52c>
   13958:	mov	r3, #2
   1395c:	mov	r2, r3
   13960:	mov	r1, #3
   13964:	mov	r0, r4
   13968:	bl	23450 <flatcc_verify_field@@Base>
   1396c:	cmp	r0, #0
   13970:	bne	13918 <_start@@Base+0x52c>
   13974:	mov	r3, #4
   13978:	mov	r2, r3
   1397c:	mov	r1, r3
   13980:	mov	r0, r4
   13984:	bl	23450 <flatcc_verify_field@@Base>
   13988:	cmp	r0, #0
   1398c:	bne	13918 <_start@@Base+0x52c>
   13990:	mov	r3, #4
   13994:	mov	r2, r3
   13998:	mov	r1, #5
   1399c:	mov	r0, r4
   139a0:	bl	23450 <flatcc_verify_field@@Base>
   139a4:	cmp	r0, #0
   139a8:	bne	13918 <_start@@Base+0x52c>
   139ac:	mov	r3, #8
   139b0:	mov	r2, r3
   139b4:	mov	r1, #6
   139b8:	mov	r0, r4
   139bc:	bl	23450 <flatcc_verify_field@@Base>
   139c0:	cmp	r0, #0
   139c4:	bne	13918 <_start@@Base+0x52c>
   139c8:	mov	r3, #8
   139cc:	mov	r2, r3
   139d0:	mov	r1, #7
   139d4:	mov	r0, r4
   139d8:	bl	23450 <flatcc_verify_field@@Base>
   139dc:	cmp	r0, #0
   139e0:	bne	13918 <_start@@Base+0x52c>
   139e4:	mov	r3, #4
   139e8:	mov	r2, r3
   139ec:	mov	r1, #8
   139f0:	mov	r0, r4
   139f4:	bl	23450 <flatcc_verify_field@@Base>
   139f8:	cmp	r0, #0
   139fc:	bne	13918 <_start@@Base+0x52c>
   13a00:	mov	r3, #8
   13a04:	mov	r2, r3
   13a08:	mov	r1, #9
   13a0c:	mov	r0, r4
   13a10:	bl	23450 <flatcc_verify_field@@Base>
   13a14:	cmp	r0, #0
   13a18:	bne	13918 <_start@@Base+0x52c>
   13a1c:	mvn	r2, #0
   13a20:	mov	r3, #1
   13a24:	str	r2, [sp, #4]
   13a28:	str	r3, [sp]
   13a2c:	mov	r2, #0
   13a30:	mov	r1, #10
   13a34:	mov	r0, r4
   13a38:	bl	23554 <flatcc_verify_vector_field@@Base>
   13a3c:	cmp	r0, #0
   13a40:	bne	13918 <_start@@Base+0x52c>
   13a44:	mvn	r1, #-536870912	; 0xe0000000
   13a48:	mov	r3, #8
   13a4c:	mov	r2, r0
   13a50:	str	r1, [sp, #4]
   13a54:	mov	r0, r4
   13a58:	str	r3, [sp]
   13a5c:	mov	r1, #11
   13a60:	bl	23554 <flatcc_verify_vector_field@@Base>
   13a64:	b	13918 <_start@@Base+0x52c>
   13a68:	mov	r2, #0
   13a6c:	push	{r4, lr}
   13a70:	mov	r1, r2
   13a74:	mov	r4, r0
   13a78:	bl	234c0 <flatcc_verify_string_field@@Base>
   13a7c:	cmp	r0, #0
   13a80:	popne	{r4, pc}
   13a84:	mov	r3, #8
   13a88:	mov	r2, r3
   13a8c:	mov	r1, #1
   13a90:	mov	r0, r4
   13a94:	bl	23450 <flatcc_verify_field@@Base>
   13a98:	cmp	r0, #0
   13a9c:	popne	{r4, pc}
   13aa0:	mov	r3, #2
   13aa4:	mov	r0, r4
   13aa8:	mov	r2, r3
   13aac:	mov	r1, r3
   13ab0:	pop	{r4, lr}
   13ab4:	b	23450 <flatcc_verify_field@@Base>
   13ab8:	mov	r2, #0
   13abc:	push	{r4, lr}
   13ac0:	mov	r1, r2
   13ac4:	mov	r4, r0
   13ac8:	bl	234c0 <flatcc_verify_string_field@@Base>
   13acc:	cmp	r0, #0
   13ad0:	popne	{r4, pc}
   13ad4:	mov	r3, #4
   13ad8:	mov	r2, r3
   13adc:	mov	r1, #1
   13ae0:	mov	r0, r4
   13ae4:	bl	23450 <flatcc_verify_field@@Base>
   13ae8:	cmp	r0, #0
   13aec:	popne	{r4, pc}
   13af0:	mov	r2, r0
   13af4:	mov	r1, #2
   13af8:	mov	r0, r4
   13afc:	bl	234c0 <flatcc_verify_string_field@@Base>
   13b00:	cmp	r0, #0
   13b04:	popne	{r4, pc}
   13b08:	mov	r3, #8
   13b0c:	mov	r2, r3
   13b10:	mov	r1, #3
   13b14:	mov	r0, r4
   13b18:	bl	23450 <flatcc_verify_field@@Base>
   13b1c:	cmp	r0, #0
   13b20:	popne	{r4, pc}
   13b24:	mov	r2, r0
   13b28:	mov	r1, #4
   13b2c:	mov	r0, r4
   13b30:	bl	234c0 <flatcc_verify_string_field@@Base>
   13b34:	cmp	r0, #0
   13b38:	popne	{r4, pc}
   13b3c:	mov	r3, #8
   13b40:	mov	r2, r3
   13b44:	mov	r1, #5
   13b48:	mov	r0, r4
   13b4c:	bl	23450 <flatcc_verify_field@@Base>
   13b50:	cmp	r0, #0
   13b54:	popne	{r4, pc}
   13b58:	mov	r3, #4
   13b5c:	mov	r2, r3
   13b60:	mov	r1, #6
   13b64:	mov	r0, r4
   13b68:	bl	23450 <flatcc_verify_field@@Base>
   13b6c:	cmp	r0, #0
   13b70:	popne	{r4, pc}
   13b74:	mov	r3, #8
   13b78:	mov	r2, r3
   13b7c:	mov	r1, #7
   13b80:	mov	r0, r4
   13b84:	bl	23450 <flatcc_verify_field@@Base>
   13b88:	cmp	r0, #0
   13b8c:	popne	{r4, pc}
   13b90:	mov	r3, #4
   13b94:	mov	r0, r4
   13b98:	mov	r2, r3
   13b9c:	mov	r1, #8
   13ba0:	pop	{r4, lr}
   13ba4:	b	23450 <flatcc_verify_field@@Base>
   13ba8:	ldr	r3, [pc, #88]	; 13c08 <_start@@Base+0x81c>
   13bac:	mov	r2, #0
   13bb0:	push	{r4, lr}
   13bb4:	mov	r1, r2
   13bb8:	add	r3, pc, r3
   13bbc:	mov	r4, r0
   13bc0:	bl	2375c <flatcc_verify_table_field@@Base>
   13bc4:	cmp	r0, #0
   13bc8:	popne	{r4, pc}
   13bcc:	ldr	r3, [pc, #56]	; 13c0c <_start@@Base+0x820>
   13bd0:	mov	r2, r0
   13bd4:	add	r3, pc, r3
   13bd8:	mov	r1, #1
   13bdc:	mov	r0, r4
   13be0:	bl	2375c <flatcc_verify_table_field@@Base>
   13be4:	cmp	r0, #0
   13be8:	popne	{r4, pc}
   13bec:	ldr	r3, [pc, #28]	; 13c10 <_start@@Base+0x824>
   13bf0:	mov	r2, r0
   13bf4:	add	r3, pc, r3
   13bf8:	mov	r0, r4
   13bfc:	mov	r1, #2
   13c00:	pop	{r4, lr}
   13c04:	b	2375c <flatcc_verify_table_field@@Base>
   13c08:			; <UNDEFINED> instruction: 0xfffffef8
   13c0c:			; <UNDEFINED> instruction: 0x000008b0
   13c10:			; <UNDEFINED> instruction: 0xfffffc50
   13c14:	push	{r4, r5, r6, r7, r8, lr}
   13c18:	mov	r3, #16
   13c1c:	sub	sp, sp, #8
   13c20:	mov	r2, #32
   13c24:	mov	r1, #0
   13c28:	mov	r4, r0
   13c2c:	bl	23450 <flatcc_verify_field@@Base>
   13c30:	cmp	r0, #0
   13c34:	beq	13c40 <_start@@Base+0x854>
   13c38:	add	sp, sp, #8
   13c3c:	pop	{r4, r5, r6, r7, r8, pc}
   13c40:	mov	r3, #2
   13c44:	mov	r2, r3
   13c48:	mov	r1, r3
   13c4c:	mov	r0, r4
   13c50:	bl	23450 <flatcc_verify_field@@Base>
   13c54:	cmp	r0, #0
   13c58:	bne	13c38 <_start@@Base+0x84c>
   13c5c:	mov	r3, #2
   13c60:	mov	r2, r3
   13c64:	mov	r1, #1
   13c68:	mov	r0, r4
   13c6c:	bl	23450 <flatcc_verify_field@@Base>
   13c70:	cmp	r0, #0
   13c74:	bne	13c38 <_start@@Base+0x84c>
   13c78:	mov	r2, #1
   13c7c:	mov	r1, #3
   13c80:	mov	r0, r4
   13c84:	bl	234c0 <flatcc_verify_string_field@@Base>
   13c88:	cmp	r0, #0
   13c8c:	bne	13c38 <_start@@Base+0x84c>
   13c90:	mov	r3, #1
   13c94:	mov	r2, r3
   13c98:	mov	r1, #6
   13c9c:	mov	r0, r4
   13ca0:	bl	23450 <flatcc_verify_field@@Base>
   13ca4:	cmp	r0, #0
   13ca8:	bne	13c38 <_start@@Base+0x84c>
   13cac:	mov	r5, #1
   13cb0:	mvn	r6, #0
   13cb4:	mov	r2, r0
   13cb8:	stm	sp, {r5, r6}
   13cbc:	mov	r3, r5
   13cc0:	mov	r1, #5
   13cc4:	mov	r0, r4
   13cc8:	bl	23554 <flatcc_verify_vector_field@@Base>
   13ccc:	cmp	r0, #0
   13cd0:	bne	13c38 <_start@@Base+0x84c>
   13cd4:	ldr	r3, [pc, #868]	; 14040 <_start@@Base+0xc54>
   13cd8:	mov	r2, r0
   13cdc:	add	r3, pc, r3
   13ce0:	mov	r1, #11
   13ce4:	mov	r0, r4
   13ce8:	bl	23870 <flatcc_verify_table_vector_field@@Base>
   13cec:	cmp	r0, #0
   13cf0:	bne	13c38 <_start@@Base+0x84c>
   13cf4:	mov	r2, r0
   13cf8:	mov	r1, #10
   13cfc:	mov	r0, r4
   13d00:	bl	235fc <flatcc_verify_string_vector_field@@Base>
   13d04:	cmp	r0, #0
   13d08:	bne	13c38 <_start@@Base+0x84c>
   13d0c:	mov	r2, r0
   13d10:	mov	r1, #28
   13d14:	mov	r0, r4
   13d18:	bl	235fc <flatcc_verify_string_vector_field@@Base>
   13d1c:	cmp	r0, #0
   13d20:	bne	13c38 <_start@@Base+0x84c>
   13d24:	mov	r2, r0
   13d28:	stm	sp, {r5, r6}
   13d2c:	mov	r3, r5
   13d30:	mov	r1, #24
   13d34:	mov	r0, r4
   13d38:	bl	23554 <flatcc_verify_vector_field@@Base>
   13d3c:	cmp	r0, #0
   13d40:	bne	13c38 <_start@@Base+0x84c>
   13d44:	mvn	r3, #-536870912	; 0xe0000000
   13d48:	mov	r5, #4
   13d4c:	str	r3, [sp, #4]
   13d50:	str	r5, [sp]
   13d54:	mov	r3, #8
   13d58:	mov	r2, #0
   13d5c:	mov	r1, #29
   13d60:	mov	r0, r4
   13d64:	bl	23554 <flatcc_verify_vector_field@@Base>
   13d68:	cmp	r0, #0
   13d6c:	bne	13c38 <_start@@Base+0x84c>
   13d70:	ldr	r7, [pc, #716]	; 14044 <_start@@Base+0xc58>
   13d74:	mov	r2, r0
   13d78:	add	r7, pc, r7
   13d7c:	mov	r3, r7
   13d80:	mov	r1, #12
   13d84:	mov	r0, r4
   13d88:	bl	2375c <flatcc_verify_table_field@@Base>
   13d8c:	cmp	r0, #0
   13d90:	bne	13c38 <_start@@Base+0x84c>
   13d94:	ldr	r3, [pc, #684]	; 14048 <_start@@Base+0xc5c>
   13d98:	mov	r2, r0
   13d9c:	add	r3, pc, r3
   13da0:	mov	r1, #8
   13da4:	mov	r0, r4
   13da8:	bl	24368 <flatcc_verify_union_field@@Base>
   13dac:	cmp	r0, #0
   13db0:	bne	13c38 <_start@@Base+0x84c>
   13db4:	mvn	r8, #-1073741824	; 0xc0000000
   13db8:	mov	r6, #2
   13dbc:	mov	r2, r0
   13dc0:	stm	sp, {r6, r8}
   13dc4:	mov	r3, r5
   13dc8:	mov	r1, #9
   13dcc:	mov	r0, r4
   13dd0:	bl	23554 <flatcc_verify_vector_field@@Base>
   13dd4:	cmp	r0, #0
   13dd8:	bne	13c38 <_start@@Base+0x84c>
   13ddc:	mov	r2, r0
   13de0:	stm	sp, {r6, r8}
   13de4:	mov	r3, r5
   13de8:	mov	r1, #31
   13dec:	mov	r0, r4
   13df0:	bl	23554 <flatcc_verify_vector_field@@Base>
   13df4:	cmp	r0, #0
   13df8:	bne	13c38 <_start@@Base+0x84c>
   13dfc:	mov	r6, #1
   13e00:	mov	r3, r0
   13e04:	mov	r2, r0
   13e08:	stm	sp, {r6, r7}
   13e0c:	mov	r1, #13
   13e10:	mov	r0, r4
   13e14:	bl	241ac <flatcc_verify_table_as_nested_root@@Base>
   13e18:	cmp	r0, #0
   13e1c:	bne	13c38 <_start@@Base+0x84c>
   13e20:	ldr	r3, [pc, #548]	; 1404c <_start@@Base+0xc60>
   13e24:	mov	r2, r0
   13e28:	add	r3, pc, r3
   13e2c:	mov	r1, #14
   13e30:	mov	r0, r4
   13e34:	bl	2375c <flatcc_verify_table_field@@Base>
   13e38:	cmp	r0, #0
   13e3c:	bne	13c38 <_start@@Base+0x84c>
   13e40:	mov	r3, r6
   13e44:	mov	r2, r6
   13e48:	mov	r1, #15
   13e4c:	mov	r0, r4
   13e50:	bl	23450 <flatcc_verify_field@@Base>
   13e54:	cmp	r0, #0
   13e58:	bne	13c38 <_start@@Base+0x84c>
   13e5c:	mov	r3, r5
   13e60:	mov	r2, r5
   13e64:	mov	r1, #16
   13e68:	mov	r0, r4
   13e6c:	bl	23450 <flatcc_verify_field@@Base>
   13e70:	cmp	r0, #0
   13e74:	bne	13c38 <_start@@Base+0x84c>
   13e78:	mov	r3, r5
   13e7c:	mov	r2, r5
   13e80:	mov	r1, #17
   13e84:	mov	r0, r4
   13e88:	bl	23450 <flatcc_verify_field@@Base>
   13e8c:	cmp	r0, #0
   13e90:	bne	13c38 <_start@@Base+0x84c>
   13e94:	mov	r3, #8
   13e98:	mov	r2, r3
   13e9c:	mov	r1, #18
   13ea0:	mov	r0, r4
   13ea4:	bl	23450 <flatcc_verify_field@@Base>
   13ea8:	cmp	r0, #0
   13eac:	bne	13c38 <_start@@Base+0x84c>
   13eb0:	mov	r3, #8
   13eb4:	mov	r2, r3
   13eb8:	mov	r1, #19
   13ebc:	mov	r0, r4
   13ec0:	bl	23450 <flatcc_verify_field@@Base>
   13ec4:	cmp	r0, #0
   13ec8:	bne	13c38 <_start@@Base+0x84c>
   13ecc:	mov	r3, r5
   13ed0:	mov	r2, r5
   13ed4:	mov	r1, #20
   13ed8:	mov	r0, r4
   13edc:	bl	23450 <flatcc_verify_field@@Base>
   13ee0:	cmp	r0, #0
   13ee4:	bne	13c38 <_start@@Base+0x84c>
   13ee8:	mov	r3, r5
   13eec:	mov	r2, r5
   13ef0:	mov	r1, #21
   13ef4:	mov	r0, r4
   13ef8:	bl	23450 <flatcc_verify_field@@Base>
   13efc:	cmp	r0, #0
   13f00:	bne	13c38 <_start@@Base+0x84c>
   13f04:	mov	r3, #8
   13f08:	mov	r2, r3
   13f0c:	mov	r1, #22
   13f10:	mov	r0, r4
   13f14:	bl	23450 <flatcc_verify_field@@Base>
   13f18:	cmp	r0, #0
   13f1c:	bne	13c38 <_start@@Base+0x84c>
   13f20:	mov	r3, #8
   13f24:	mov	r2, r3
   13f28:	mov	r1, #23
   13f2c:	mov	r0, r4
   13f30:	bl	23450 <flatcc_verify_field@@Base>
   13f34:	cmp	r0, #0
   13f38:	bne	13c38 <_start@@Base+0x84c>
   13f3c:	mov	r3, r5
   13f40:	mov	r2, r5
   13f44:	mov	r1, #25
   13f48:	mov	r0, r4
   13f4c:	bl	23450 <flatcc_verify_field@@Base>
   13f50:	cmp	r0, #0
   13f54:	bne	13c38 <_start@@Base+0x84c>
   13f58:	mov	r3, r5
   13f5c:	mov	r2, r5
   13f60:	mov	r1, #26
   13f64:	mov	r0, r4
   13f68:	bl	23450 <flatcc_verify_field@@Base>
   13f6c:	cmp	r0, #0
   13f70:	bne	13c38 <_start@@Base+0x84c>
   13f74:	mov	r3, r5
   13f78:	mov	r2, r5
   13f7c:	mov	r1, #27
   13f80:	mov	r0, r4
   13f84:	bl	23450 <flatcc_verify_field@@Base>
   13f88:	cmp	r0, #0
   13f8c:	bne	13c38 <_start@@Base+0x84c>
   13f90:	mvn	r1, #0
   13f94:	mov	r2, r0
   13f98:	str	r1, [sp, #4]
   13f9c:	mov	r3, r6
   13fa0:	str	r6, [sp]
   13fa4:	mov	r1, #30
   13fa8:	mov	r0, r4
   13fac:	bl	23554 <flatcc_verify_vector_field@@Base>
   13fb0:	cmp	r0, #0
   13fb4:	bne	13c38 <_start@@Base+0x84c>
   13fb8:	mov	r5, #8
   13fbc:	mvn	r6, #-536870912	; 0xe0000000
   13fc0:	mov	r3, r5
   13fc4:	stm	sp, {r5, r6}
   13fc8:	mov	r2, #0
   13fcc:	mov	r1, #32
   13fd0:	mov	r0, r4
   13fd4:	bl	23554 <flatcc_verify_vector_field@@Base>
   13fd8:	cmp	r0, #0
   13fdc:	bne	13c38 <_start@@Base+0x84c>
   13fe0:	mov	r2, r0
   13fe4:	stm	sp, {r5, r6}
   13fe8:	mov	r3, r5
   13fec:	mov	r1, #33	; 0x21
   13ff0:	mov	r0, r4
   13ff4:	bl	23554 <flatcc_verify_vector_field@@Base>
   13ff8:	cmp	r0, #0
   13ffc:	bne	13c38 <_start@@Base+0x84c>
   14000:	ldr	r3, [pc, #72]	; 14050 <_start@@Base+0xc64>
   14004:	mov	r2, r0
   14008:	add	r3, pc, r3
   1400c:	mov	r1, #34	; 0x22
   14010:	mov	r0, r4
   14014:	bl	2375c <flatcc_verify_table_field@@Base>
   14018:	cmp	r0, #0
   1401c:	bne	13c38 <_start@@Base+0x84c>
   14020:	ldr	r3, [pc, #44]	; 14054 <_start@@Base+0xc68>
   14024:	mov	r2, r0
   14028:	add	r3, pc, r3
   1402c:	mov	r0, r4
   14030:	mov	r1, #35	; 0x23
   14034:	add	sp, sp, #8
   14038:	pop	{r4, r5, r6, r7, r8, lr}
   1403c:	b	2375c <flatcc_verify_table_field@@Base>
   14040:			; <UNDEFINED> instruction: 0xffffff30
   14044:			; <UNDEFINED> instruction: 0xfffffe94
   14048:	andeq	r0, r0, r0, asr #6
   1404c:			; <UNDEFINED> instruction: 0xfffffc38
   14050:	andeq	r0, r0, r4, ror r4
   14054:	andeq	r0, r0, r8, lsr #32
   14058:	push	{r4, r5, r6, lr}
   1405c:	mov	r4, #1
   14060:	sub	sp, sp, #8
   14064:	mvn	r5, #0
   14068:	mov	r2, #0
   1406c:	mov	r1, r2
   14070:	stm	sp, {r4, r5}
   14074:	mov	r3, r4
   14078:	mov	r6, r0
   1407c:	bl	23554 <flatcc_verify_vector_field@@Base>
   14080:	subs	r2, r0, #0
   14084:	beq	14094 <_start@@Base+0xca8>
   14088:	mov	r0, r2
   1408c:	add	sp, sp, #8
   14090:	pop	{r4, r5, r6, pc}
   14094:	stm	sp, {r4, r5}
   14098:	mov	r3, r4
   1409c:	mov	r1, r4
   140a0:	mov	r0, r6
   140a4:	bl	23554 <flatcc_verify_vector_field@@Base>
   140a8:	subs	r2, r0, #0
   140ac:	bne	14088 <_start@@Base+0xc9c>
   140b0:	ldr	r3, [pc, #40]	; 140e0 <_start@@Base+0xcf4>
   140b4:	str	r4, [sp]
   140b8:	add	r3, pc, r3
   140bc:	str	r3, [sp, #4]
   140c0:	mov	r0, r6
   140c4:	mov	r3, r2
   140c8:	mov	r1, #2
   140cc:	bl	241ac <flatcc_verify_table_as_nested_root@@Base>
   140d0:	mov	r2, r0
   140d4:	mov	r0, r2
   140d8:	add	sp, sp, #8
   140dc:	pop	{r4, r5, r6, pc}
   140e0:			; <UNDEFINED> instruction: 0xfffffb54
   140e4:	ldrb	r3, [r0, #12]
   140e8:	sub	r3, r3, #1
   140ec:	cmp	r3, #3
   140f0:	addls	pc, pc, r3, lsl #2
   140f4:	b	14138 <_start@@Base+0xd4c>
   140f8:	b	1412c <_start@@Base+0xd40>
   140fc:	b	14120 <_start@@Base+0xd34>
   14100:	b	14114 <_start@@Base+0xd28>
   14104:	b	14108 <_start@@Base+0xd1c>
   14108:	ldr	r1, [pc, #48]	; 14140 <_start@@Base+0xd54>
   1410c:	add	r1, pc, r1
   14110:	b	23b28 <flatcc_verify_union_table@@Base>
   14114:	ldr	r1, [pc, #40]	; 14144 <_start@@Base+0xd58>
   14118:	add	r1, pc, r1
   1411c:	b	23b28 <flatcc_verify_union_table@@Base>
   14120:	ldr	r1, [pc, #32]	; 14148 <_start@@Base+0xd5c>
   14124:	add	r1, pc, r1
   14128:	b	23b28 <flatcc_verify_union_table@@Base>
   1412c:	ldr	r1, [pc, #24]	; 1414c <_start@@Base+0xd60>
   14130:	add	r1, pc, r1
   14134:	b	23b28 <flatcc_verify_union_table@@Base>
   14138:	mov	r0, #0
   1413c:	bx	lr
   14140:	andeq	r0, r0, ip, lsr r0
   14144:			; <UNDEFINED> instruction: 0xfffff3f8
   14148:			; <UNDEFINED> instruction: 0xfffff758
   1414c:			; <UNDEFINED> instruction: 0xfffffadc
   14150:	ldr	r3, [pc, #88]	; 141b0 <_start@@Base+0xdc4>
   14154:	mov	r2, #0
   14158:	push	{r4, lr}
   1415c:	mov	r1, r2
   14160:	add	r3, pc, r3
   14164:	mov	r4, r0
   14168:	bl	2375c <flatcc_verify_table_field@@Base>
   1416c:	cmp	r0, #0
   14170:	popne	{r4, pc}
   14174:	ldr	r3, [pc, #56]	; 141b4 <_start@@Base+0xdc8>
   14178:	mov	r2, r0
   1417c:	add	r3, pc, r3
   14180:	mov	r1, #1
   14184:	mov	r0, r4
   14188:	bl	2375c <flatcc_verify_table_field@@Base>
   1418c:	cmp	r0, #0
   14190:	popne	{r4, pc}
   14194:	ldr	r3, [pc, #28]	; 141b8 <_start@@Base+0xdcc>
   14198:	mov	r2, r0
   1419c:	add	r3, pc, r3
   141a0:	mov	r0, r4
   141a4:	mov	r1, #3
   141a8:	pop	{r4, lr}
   141ac:	b	244c0 <flatcc_verify_union_vector_field@@Base>
   141b0:			; <UNDEFINED> instruction: 0xfffffa40
   141b4:	andeq	r0, r0, r8, lsr r0
   141b8:			; <UNDEFINED> instruction: 0xffffff40
   141bc:	push	{r4, r5, r6, lr}
   141c0:	mov	r2, #0
   141c4:	ldr	r4, [pc, #132]	; 14250 <_start@@Base+0xe64>
   141c8:	mov	r1, #1
   141cc:	add	r4, pc, r4
   141d0:	mov	r3, r4
   141d4:	mov	r5, r0
   141d8:	bl	24368 <flatcc_verify_union_field@@Base>
   141dc:	cmp	r0, #0
   141e0:	popne	{r4, r5, r6, pc}
   141e4:	mov	r2, r0
   141e8:	mov	r3, r4
   141ec:	mov	r1, #3
   141f0:	mov	r0, r5
   141f4:	bl	24368 <flatcc_verify_union_field@@Base>
   141f8:	cmp	r0, #0
   141fc:	popne	{r4, r5, r6, pc}
   14200:	mov	r2, r0
   14204:	mov	r3, r4
   14208:	mov	r1, #5
   1420c:	mov	r0, r5
   14210:	bl	24368 <flatcc_verify_union_field@@Base>
   14214:	cmp	r0, #0
   14218:	popne	{r4, r5, r6, pc}
   1421c:	mov	r2, r0
   14220:	mov	r3, r4
   14224:	mov	r1, #7
   14228:	mov	r0, r5
   1422c:	bl	24368 <flatcc_verify_union_field@@Base>
   14230:	cmp	r0, #0
   14234:	popne	{r4, r5, r6, pc}
   14238:	mov	r3, r4
   1423c:	mov	r2, r0
   14240:	mov	r1, #9
   14244:	mov	r0, r5
   14248:	pop	{r4, r5, r6, lr}
   1424c:	b	244c0 <flatcc_verify_union_vector_field@@Base>
   14250:	andeq	r0, r0, r0, lsl #1
   14254:	ldrb	r3, [r0, #12]
   14258:	cmp	r3, #9
   1425c:	beq	14298 <_start@@Base+0xeac>
   14260:	bls	1427c <_start@@Base+0xe90>
   14264:	cmp	r3, #11
   14268:	beq	14278 <_start@@Base+0xe8c>
   1426c:	bcc	14298 <_start@@Base+0xeac>
   14270:	cmp	r3, #255	; 0xff
   14274:	bne	142a4 <_start@@Base+0xeb8>
   14278:	b	23c7c <flatcc_verify_union_string@@Base>
   1427c:	cmp	r3, #2
   14280:	beq	142ac <_start@@Base+0xec0>
   14284:	cmp	r3, #8
   14288:	bne	142a4 <_start@@Base+0xeb8>
   1428c:	mov	r2, #2
   14290:	mov	r1, r2
   14294:	b	23c20 <flatcc_verify_union_struct@@Base>
   14298:	mov	r2, #4
   1429c:	mov	r1, r2
   142a0:	b	23c20 <flatcc_verify_union_struct@@Base>
   142a4:	mov	r0, #0
   142a8:	bx	lr
   142ac:	ldr	r1, [pc, #4]	; 142b8 <_start@@Base+0xecc>
   142b0:	add	r1, pc, r1
   142b4:	b	23b28 <flatcc_verify_union_table@@Base>
   142b8:			; <UNDEFINED> instruction: 0xfffff268
   142bc:	push	{lr}		; (str lr, [sp, #-4]!)
   142c0:	vpush	{d8-d9}
   142c4:	vsub.f64	d8, d1, d0
   142c8:	vldr	d9, [pc, #352]	; 14430 <_start@@Base+0x1044>
   142cc:	sub	sp, sp, #12
   142d0:	str	r1, [sp, #4]
   142d4:	mov	r1, r0
   142d8:	ldr	r0, [pc, #368]	; 14450 <_start@@Base+0x1064>
   142dc:	add	r0, pc, r0
   142e0:	bl	12918 <printf@plt>
   142e4:	ldr	r0, [pc, #360]	; 14454 <_start@@Base+0x1068>
   142e8:	vmov	r2, r3, d8
   142ec:	add	r0, pc, r0
   142f0:	bl	12918 <printf@plt>
   142f4:	ldr	r0, [pc, #348]	; 14458 <_start@@Base+0x106c>
   142f8:	ldr	r1, [pc, #348]	; 1445c <_start@@Base+0x1070>
   142fc:	add	r0, pc, r0
   14300:	bl	12918 <printf@plt>
   14304:	ldr	r0, [pc, #340]	; 14460 <_start@@Base+0x1074>
   14308:	ldr	r1, [sp, #4]
   1430c:	add	r0, pc, r0
   14310:	bl	12918 <printf@plt>
   14314:	vldr	s15, [sp, #4]
   14318:	ldr	r0, [pc, #324]	; 14464 <_start@@Base+0x1078>
   1431c:	add	r0, pc, r0
   14320:	vcvt.f64.u32	d7, s15
   14324:	vmul.f64	d7, d7, d9
   14328:	vdiv.f64	d6, d7, d9
   1432c:	vdiv.f64	d7, d6, d8
   14330:	vmov	r2, r3, d7
   14334:	bl	12918 <printf@plt>
   14338:	vdiv.f64	d7, d9, d8
   1433c:	ldr	r0, [pc, #292]	; 14468 <_start@@Base+0x107c>
   14340:	add	r0, pc, r0
   14344:	vmov	r2, r3, d7
   14348:	bl	12918 <printf@plt>
   1434c:	vldr	d7, [pc, #228]	; 14438 <_start@@Base+0x104c>
   14350:	ldr	r1, [pc, #276]	; 1446c <_start@@Base+0x1080>
   14354:	ldr	r0, [pc, #276]	; 14470 <_start@@Base+0x1084>
   14358:	add	r1, pc, r1
   1435c:	vdiv.f64	d6, d7, d8
   14360:	add	r0, pc, r0
   14364:	vmov	r2, r3, d6
   14368:	bl	12918 <printf@plt>
   1436c:	vldr	d6, [pc, #204]	; 14440 <_start@@Base+0x1054>
   14370:	vldr	d5, [pc, #208]	; 14448 <_start@@Base+0x105c>
   14374:	vmul.f64	d8, d8, d6
   14378:	vdiv.f64	d7, d8, d9
   1437c:	vcmpe.f64	d7, d5
   14380:	vmrs	APSR_nzcv, fpscr
   14384:	bmi	143e8 <_start@@Base+0xffc>
   14388:	vcmpe.f64	d7, d9
   1438c:	vmrs	APSR_nzcv, fpscr
   14390:	bmi	14408 <_start@@Base+0x101c>
   14394:	vcmpe.f64	d7, d6
   14398:	vmrs	APSR_nzcv, fpscr
   1439c:	bmi	143c4 <_start@@Base+0xfd8>
   143a0:	vdiv.f64	d5, d7, d6
   143a4:	ldr	r0, [pc, #200]	; 14474 <_start@@Base+0x1088>
   143a8:	add	r0, pc, r0
   143ac:	vmov	r2, r3, d5
   143b0:	bl	12918 <printf@plt>
   143b4:	mov	r0, #0
   143b8:	add	sp, sp, #12
   143bc:	vpop	{d8-d9}
   143c0:	pop	{pc}		; (ldr pc, [sp], #4)
   143c4:	vdiv.f64	d6, d7, d9
   143c8:	ldr	r0, [pc, #168]	; 14478 <_start@@Base+0x108c>
   143cc:	add	r0, pc, r0
   143d0:	vmov	r2, r3, d6
   143d4:	bl	12918 <printf@plt>
   143d8:	mov	r0, #0
   143dc:	add	sp, sp, #12
   143e0:	vpop	{d8-d9}
   143e4:	pop	{pc}		; (ldr pc, [sp], #4)
   143e8:	ldr	r0, [pc, #140]	; 1447c <_start@@Base+0x1090>
   143ec:	vmov	r2, r3, d7
   143f0:	add	r0, pc, r0
   143f4:	bl	12918 <printf@plt>
   143f8:	mov	r0, #0
   143fc:	add	sp, sp, #12
   14400:	vpop	{d8-d9}
   14404:	pop	{pc}		; (ldr pc, [sp], #4)
   14408:	vdiv.f64	d6, d7, d5
   1440c:	ldr	r0, [pc, #108]	; 14480 <_start@@Base+0x1094>
   14410:	add	r0, pc, r0
   14414:	vmov	r2, r3, d6
   14418:	bl	12918 <printf@plt>
   1441c:	mov	r0, #0
   14420:	add	sp, sp, #12
   14424:	vpop	{d8-d9}
   14428:	pop	{pc}		; (ldr pc, [sp], #4)
   1442c:	nop			; (mov r0, r0)
   14430:	andeq	r0, r0, r0
   14434:	smlawbmi	lr, r0, r4, r8
   14438:	andeq	r0, r0, r0
   1443c:	svccc	0x00f00000	; IMB
   14440:	andeq	r0, r0, r0
   14444:	bicmi	ip, sp, r5, ror #26
   14448:	andeq	r0, r0, r0
   1444c:	addmi	r4, pc, r0
   14450:	andeq	r0, r1, r8, lsr pc
   14454:	andeq	r0, r1, r8, lsr pc
   14458:	andeq	r0, r1, r0, asr #30
   1445c:	andeq	r4, pc, r0, asr #4
   14460:	andeq	r0, r1, r0, asr #30
   14464:	andeq	r0, r1, r4, asr #30
   14468:	andeq	r0, r1, r8, lsr pc
   1446c:	andeq	r0, r1, r4, asr #30
   14470:	andeq	r0, r1, r4, asr #30
   14474:	andeq	r0, r1, r8, ror #30
   14478:	andeq	r0, r1, ip, lsr #30
   1447c:	ldrdeq	r0, [r1], -r8
   14480:	ldrdeq	r0, [r1], -r0	; <UNPREDICTABLE>
   14484:	mov	r0, #0
   14488:	bx	lr
   1448c:	mov	r3, #8
   14490:	push	{r4, lr}
   14494:	mov	r2, r3
   14498:	mov	r1, #0
   1449c:	mov	r4, r0
   144a0:	bl	23450 <flatcc_verify_field@@Base>
   144a4:	cmp	r0, #0
   144a8:	popne	{r4, pc}
   144ac:	mov	r3, #4
   144b0:	mov	r0, r4
   144b4:	mov	r2, r3
   144b8:	mov	r1, #1
   144bc:	pop	{r4, lr}
   144c0:	b	23450 <flatcc_verify_field@@Base>
   144c4:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   144c8:	subs	r7, r0, #0
   144cc:	beq	1465c <_start@@Base+0x1270>
   144d0:	ldr	r4, [r7, #-4]
   144d4:	cmp	r4, #0
   144d8:	beq	1466c <_start@@Base+0x1280>
   144dc:	ldr	r3, [r7]
   144e0:	mov	r5, r1
   144e4:	adds	r2, r7, r3
   144e8:	beq	14668 <_start@@Base+0x127c>
   144ec:	ldr	r3, [r7, r3]
   144f0:	sub	r3, r2, r3
   144f4:	ldrh	r1, [r3]
   144f8:	cmp	r1, #11
   144fc:	bls	14574 <_start@@Base+0x1188>
   14500:	ldrh	r0, [r3, #10]
   14504:	cmp	r0, #0
   14508:	beq	14574 <_start@@Base+0x1188>
   1450c:	add	r9, r7, #4
   14510:	mov	r8, #0
   14514:	ldr	r3, [r2, r0]
   14518:	add	r0, r2, r0
   1451c:	add	r3, r3, #4
   14520:	add	r0, r0, r3
   14524:	mov	r1, r5
   14528:	bl	1290c <strcmp@plt>
   1452c:	cmp	r0, #0
   14530:	beq	14598 <_start@@Base+0x11ac>
   14534:	add	r8, r8, #1
   14538:	cmp	r8, r4
   1453c:	beq	1465c <_start@@Base+0x1270>
   14540:	mov	r3, r9
   14544:	add	r9, r9, #4
   14548:	ldr	r1, [r3]
   1454c:	adds	r2, r3, r1
   14550:	beq	14668 <_start@@Base+0x127c>
   14554:	ldr	r3, [r3, r1]
   14558:	sub	r3, r2, r3
   1455c:	ldrh	r1, [r3]
   14560:	cmp	r1, #11
   14564:	bls	14574 <_start@@Base+0x1188>
   14568:	ldrh	r0, [r3, #10]
   1456c:	cmp	r0, #0
   14570:	bne	14514 <_start@@Base+0x1128>
   14574:	ldr	r3, [pc, #248]	; 14674 <_start@@Base+0x1288>
   14578:	ldr	r1, [pc, #248]	; 14678 <_start@@Base+0x128c>
   1457c:	ldr	r0, [pc, #248]	; 1467c <_start@@Base+0x1290>
   14580:	add	r3, pc, r3
   14584:	ldr	r2, [pc, #244]	; 14680 <_start@@Base+0x1294>
   14588:	add	r3, r3, #580	; 0x244
   1458c:	add	r1, pc, r1
   14590:	add	r0, pc, r0
   14594:	bl	12a08 <__assert_fail@plt>
   14598:	mov	r6, r0
   1459c:	add	r8, r8, #1
   145a0:	cmp	r8, r4
   145a4:	add	r6, r6, #1
   145a8:	bcs	14654 <_start@@Base+0x1268>
   145ac:	lsl	r9, r8, #2
   145b0:	ldr	r3, [r7, r8, lsl #2]
   145b4:	add	r1, r7, r9
   145b8:	adds	r2, r1, r3
   145bc:	beq	14668 <_start@@Base+0x127c>
   145c0:	ldr	r3, [r1, r3]
   145c4:	sub	r3, r2, r3
   145c8:	ldrh	r1, [r3]
   145cc:	cmp	r1, #11
   145d0:	bls	14574 <_start@@Base+0x1188>
   145d4:	ldrh	r0, [r3, #10]
   145d8:	cmp	r0, #0
   145dc:	beq	14574 <_start@@Base+0x1188>
   145e0:	add	r9, r9, #4
   145e4:	add	r9, r7, r9
   145e8:	ldr	r3, [r2, r0]
   145ec:	add	r0, r2, r0
   145f0:	add	r3, r3, #4
   145f4:	add	r0, r0, r3
   145f8:	mov	r1, r5
   145fc:	bl	1290c <strcmp@plt>
   14600:	cmp	r0, #0
   14604:	beq	1464c <_start@@Base+0x1260>
   14608:	add	r8, r8, #1
   1460c:	cmp	r8, r4
   14610:	bcs	14654 <_start@@Base+0x1268>
   14614:	mov	r3, r9
   14618:	add	r9, r9, #4
   1461c:	ldr	r1, [r3]
   14620:	adds	r2, r3, r1
   14624:	beq	14668 <_start@@Base+0x127c>
   14628:	ldr	r3, [r3, r1]
   1462c:	sub	r3, r2, r3
   14630:	ldrh	r1, [r3]
   14634:	cmp	r1, #11
   14638:	bls	14574 <_start@@Base+0x1188>
   1463c:	ldrh	r0, [r3, #10]
   14640:	cmp	r0, #0
   14644:	bne	145e8 <_start@@Base+0x11fc>
   14648:	b	14574 <_start@@Base+0x1188>
   1464c:	cmn	r8, #1
   14650:	bne	1459c <_start@@Base+0x11b0>
   14654:	mov	r0, r6
   14658:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1465c:	mov	r6, #0
   14660:	mov	r0, r6
   14664:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   14668:	bl	12d14 <__assert_fail@plt+0x30c>
   1466c:	mov	r6, r4
   14670:	b	14654 <_start@@Base+0x1268>
   14674:	andeq	r0, r1, r0, lsr r2
   14678:	andeq	r0, r1, ip, lsr #18
   1467c:	andeq	r0, r1, r4, lsl #21
   14680:			; <UNDEFINED> instruction: 0x000002bb
   14684:	push	{r4, r5, r6, r7, r8, lr}
   14688:	mov	r5, r0
   1468c:	cmp	r5, #0
   14690:	mov	r4, r1
   14694:	mov	r6, r2
   14698:	mov	r7, r3
   1469c:	add	r8, r0, r1, lsl #2
   146a0:	beq	14748 <_start@@Base+0x135c>
   146a4:	ldr	r3, [r5, #-4]
   146a8:	cmp	r6, r3
   146ac:	movcc	r2, r6
   146b0:	movcs	r2, r3
   146b4:	cmp	r4, r2
   146b8:	bcs	14748 <_start@@Base+0x135c>
   146bc:	cmp	r4, r3
   146c0:	mov	r3, r8
   146c4:	bcs	1475c <_start@@Base+0x1370>
   146c8:	ldr	r2, [r8]
   146cc:	add	r8, r8, #4
   146d0:	adds	r0, r3, r2
   146d4:	beq	14758 <_start@@Base+0x136c>
   146d8:	ldr	r3, [r3, r2]
   146dc:	sub	r3, r0, r3
   146e0:	ldrh	r2, [r3]
   146e4:	cmp	r2, #11
   146e8:	bhi	14710 <_start@@Base+0x1324>
   146ec:	ldr	r3, [pc, #140]	; 14780 <_start@@Base+0x1394>
   146f0:	ldr	r1, [pc, #140]	; 14784 <_start@@Base+0x1398>
   146f4:	ldr	r0, [pc, #140]	; 14788 <_start@@Base+0x139c>
   146f8:	add	r3, pc, r3
   146fc:	ldr	r2, [pc, #136]	; 1478c <_start@@Base+0x13a0>
   14700:	add	r3, r3, #580	; 0x244
   14704:	add	r1, pc, r1
   14708:	add	r0, pc, r0
   1470c:	bl	12a08 <__assert_fail@plt>
   14710:	ldrh	r2, [r3, #10]
   14714:	cmp	r2, #0
   14718:	beq	146ec <_start@@Base+0x1300>
   1471c:	ldr	r3, [r0, r2]
   14720:	add	r0, r0, r2
   14724:	add	r3, r3, #4
   14728:	add	r0, r0, r3
   1472c:	mov	r1, r7
   14730:	bl	1290c <strcmp@plt>
   14734:	cmp	r0, #0
   14738:	beq	14750 <_start@@Base+0x1364>
   1473c:	cmp	r5, #0
   14740:	add	r4, r4, #1
   14744:	bne	146a4 <_start@@Base+0x12b8>
   14748:	mvn	r0, #0
   1474c:	pop	{r4, r5, r6, r7, r8, pc}
   14750:	mov	r0, r4
   14754:	pop	{r4, r5, r6, r7, r8, pc}
   14758:	bl	12d14 <__assert_fail@plt+0x30c>
   1475c:	ldr	r3, [pc, #44]	; 14790 <_start@@Base+0x13a4>
   14760:	ldr	r1, [pc, #44]	; 14794 <_start@@Base+0x13a8>
   14764:	ldr	r0, [pc, #44]	; 14798 <_start@@Base+0x13ac>
   14768:	add	r3, pc, r3
   1476c:	ldr	r2, [pc, #40]	; 1479c <_start@@Base+0x13b0>
   14770:	add	r3, r3, #484	; 0x1e4
   14774:	add	r1, pc, r1
   14778:	add	r0, pc, r0
   1477c:	bl	12a08 <__assert_fail@plt>
   14780:	strheq	r0, [r1], -r8
   14784:			; <UNDEFINED> instruction: 0x000107b4
   14788:	andeq	r0, r1, ip, lsl #18
   1478c:			; <UNDEFINED> instruction: 0x000002bb
   14790:	andeq	r0, r1, r8, asr #32
   14794:	andeq	r0, r1, r4, asr #14
   14798:	andeq	r0, r1, r4, ror #16
   1479c:			; <UNDEFINED> instruction: 0x000002b5
   147a0:	cmp	r0, #0
   147a4:	push	{r4, r5, r6, r7, r8, lr}
   147a8:	beq	14864 <_start@@Base+0x1478>
   147ac:	ldr	r6, [r0, #-4]
   147b0:	mov	r5, r3
   147b4:	cmp	r2, r6
   147b8:	movcc	r3, r2
   147bc:	movcs	r3, r6
   147c0:	sub	r7, r3, #-1073741823	; 0xc0000001
   147c4:	mov	r4, r1
   147c8:	add	r7, r0, r7, lsl #2
   147cc:	cmp	r3, r4
   147d0:	sub	r8, r3, #1
   147d4:	bls	14864 <_start@@Base+0x1478>
   147d8:	cmp	r8, r6
   147dc:	mov	r2, r7
   147e0:	bcs	14874 <_start@@Base+0x1488>
   147e4:	ldr	r3, [r7]
   147e8:	sub	r7, r7, #4
   147ec:	adds	r0, r2, r3
   147f0:	beq	14870 <_start@@Base+0x1484>
   147f4:	ldr	r2, [r2, r3]
   147f8:	sub	r2, r0, r2
   147fc:	ldrh	r3, [r2]
   14800:	cmp	r3, #11
   14804:	bhi	1482c <_start@@Base+0x1440>
   14808:	ldr	r3, [pc, #136]	; 14898 <_start@@Base+0x14ac>
   1480c:	ldr	r1, [pc, #136]	; 1489c <_start@@Base+0x14b0>
   14810:	ldr	r0, [pc, #136]	; 148a0 <_start@@Base+0x14b4>
   14814:	add	r3, pc, r3
   14818:	ldr	r2, [pc, #132]	; 148a4 <_start@@Base+0x14b8>
   1481c:	add	r3, r3, #580	; 0x244
   14820:	add	r1, pc, r1
   14824:	add	r0, pc, r0
   14828:	bl	12a08 <__assert_fail@plt>
   1482c:	ldrh	r2, [r2, #10]
   14830:	cmp	r2, #0
   14834:	beq	14808 <_start@@Base+0x141c>
   14838:	ldr	r3, [r0, r2]
   1483c:	add	r0, r0, r2
   14840:	add	r3, r3, #4
   14844:	add	r0, r0, r3
   14848:	mov	r1, r5
   1484c:	bl	1290c <strcmp@plt>
   14850:	mov	r3, r8
   14854:	cmp	r0, #0
   14858:	bne	147cc <_start@@Base+0x13e0>
   1485c:	mov	r0, r8
   14860:	pop	{r4, r5, r6, r7, r8, pc}
   14864:	mvn	r8, #0
   14868:	mov	r0, r8
   1486c:	pop	{r4, r5, r6, r7, r8, pc}
   14870:	bl	12d14 <__assert_fail@plt+0x30c>
   14874:	ldr	r3, [pc, #44]	; 148a8 <_start@@Base+0x14bc>
   14878:	ldr	r1, [pc, #44]	; 148ac <_start@@Base+0x14c0>
   1487c:	ldr	r0, [pc, #44]	; 148b0 <_start@@Base+0x14c4>
   14880:	add	r3, pc, r3
   14884:	ldr	r2, [pc, #40]	; 148b4 <_start@@Base+0x14c8>
   14888:	add	r3, r3, #484	; 0x1e4
   1488c:	add	r1, pc, r1
   14890:	add	r0, pc, r0
   14894:	bl	12a08 <__assert_fail@plt>
   14898:	muleq	r0, ip, pc	; <UNPREDICTABLE>
   1489c:	muleq	r1, r8, r6
   148a0:	strdeq	r0, [r1], -r0	; <UNPREDICTABLE>
   148a4:			; <UNDEFINED> instruction: 0x000002bb
   148a8:	andeq	pc, r0, r0, lsr pc	; <UNPREDICTABLE>
   148ac:	andeq	r0, r1, ip, lsr #12
   148b0:	andeq	r0, r1, ip, asr #14
   148b4:			; <UNDEFINED> instruction: 0x000002b5

000148b8 <verify_empty_monster@@Base>:
   148b8:	cmp	r0, #0
   148bc:	push	{r4, lr}
   148c0:	beq	148d4 <verify_empty_monster@@Base+0x1c>
   148c4:	ldr	r2, [r0, #4]
   148c8:	ldr	r3, [pc, #168]	; 14978 <verify_empty_monster@@Base+0xc0>
   148cc:	cmp	r2, r3
   148d0:	beq	148e8 <verify_empty_monster@@Base+0x30>
   148d4:	ldr	r0, [pc, #160]	; 1497c <verify_empty_monster@@Base+0xc4>
   148d8:	add	r0, pc, r0
   148dc:	bl	1296c <puts@plt>
   148e0:	mvn	r0, #0
   148e4:	pop	{r4, pc}
   148e8:	ldr	r3, [r0]
   148ec:	adds	r0, r0, r3
   148f0:	beq	148d4 <verify_empty_monster@@Base+0x1c>
   148f4:	ldr	r3, [r0]
   148f8:	sub	r3, r0, r3
   148fc:	ldrh	r2, [r3]
   14900:	cmp	r2, #9
   14904:	bls	14934 <verify_empty_monster@@Base+0x7c>
   14908:	ldrh	r2, [r3, #8]
   1490c:	cmp	r2, #0
   14910:	beq	14944 <verify_empty_monster@@Base+0x8c>
   14914:	ldrsh	r3, [r0, r2]
   14918:	cmp	r3, #100	; 0x64
   1491c:	bne	14964 <verify_empty_monster@@Base+0xac>
   14920:	ldr	r0, [pc, #88]	; 14980 <verify_empty_monster@@Base+0xc8>
   14924:	add	r0, pc, r0
   14928:	bl	1296c <puts@plt>
   1492c:	mvn	r0, #0
   14930:	pop	{r4, pc}
   14934:	cmp	r2, #5
   14938:	bhi	14944 <verify_empty_monster@@Base+0x8c>
   1493c:	mov	r0, #0
   14940:	pop	{r4, pc}
   14944:	ldrh	r0, [r3, #4]
   14948:	cmp	r0, #0
   1494c:	popeq	{r4, pc}
   14950:	ldr	r0, [pc, #44]	; 14984 <verify_empty_monster@@Base+0xcc>
   14954:	add	r0, pc, r0
   14958:	bl	1296c <puts@plt>
   1495c:	mvn	r0, #0
   14960:	pop	{r4, pc}
   14964:	ldr	r0, [pc, #28]	; 14988 <verify_empty_monster@@Base+0xd0>
   14968:	add	r0, pc, r0
   1496c:	bl	1296c <puts@plt>
   14970:	mvn	r0, #0
   14974:	pop	{r4, pc}
   14978:	movtpl	r4, #61261	; 0xef4d
   1497c:	andeq	r0, r1, r0, asr sl
   14980:	andeq	r0, r1, r8, asr #21
   14984:	andeq	r0, r1, ip, ror sl
   14988:	andeq	r0, r1, r4, asr #20

0001498c <test_enums@@Base>:
   1498c:	mov	r0, #0
   14990:	bx	lr

00014994 <test_type_aliases@@Base>:
   14994:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14998:	sub	sp, sp, #20
   1499c:	mov	r4, r0
   149a0:	mvn	r6, #0
   149a4:	bl	1f0f0 <flatcc_builder_reset@@Base>
   149a8:	mov	r3, #1
   149ac:	mov	r2, #0
   149b0:	mov	r1, r2
   149b4:	stm	sp, {r3, r6}
   149b8:	mov	r0, r4
   149bc:	bl	212b0 <flatcc_builder_create_vector@@Base>
   149c0:	mov	r5, #8
   149c4:	mov	r2, #0
   149c8:	mvn	r3, #-536870912	; 0xe0000000
   149cc:	mov	r1, r2
   149d0:	str	r3, [sp, #4]
   149d4:	str	r5, [sp]
   149d8:	mov	r3, r5
   149dc:	ldr	r7, [pc, #1176]	; 14e7c <test_type_aliases@@Base+0x4e8>
   149e0:	add	r7, pc, r7
   149e4:	mov	r8, r0
   149e8:	mov	r0, r4
   149ec:	bl	212b0 <flatcc_builder_create_vector@@Base>
   149f0:	ldr	r1, [pc, #1160]	; 14e80 <test_type_aliases@@Base+0x4ec>
   149f4:	mov	r3, #0
   149f8:	mov	r2, r3
   149fc:	add	r1, pc, r1
   14a00:	mov	r9, r0
   14a04:	mov	r0, r4
   14a08:	bl	1f8b4 <flatcc_builder_start_buffer@@Base>
   14a0c:	cmp	r0, #0
   14a10:	beq	14c14 <test_type_aliases@@Base+0x280>
   14a14:	mov	r0, r4
   14a18:	add	r1, sp, #12
   14a1c:	bl	22a08 <flatcc_builder_finalize_aligned_buffer@@Base>
   14a20:	ldr	r3, [pc, #1116]	; 14e84 <test_type_aliases@@Base+0x4f0>
   14a24:	ldr	r2, [pc, #1116]	; 14e88 <test_type_aliases@@Base+0x4f4>
   14a28:	add	r3, pc, r3
   14a2c:	add	r2, pc, r2
   14a30:	ldr	r1, [sp, #12]
   14a34:	mov	r4, r0
   14a38:	bl	23edc <flatcc_verify_table_as_root@@Base>
   14a3c:	subs	r5, r0, #0
   14a40:	bne	14e14 <test_type_aliases@@Base+0x480>
   14a44:	cmp	r4, #0
   14a48:	beq	14a5c <test_type_aliases@@Base+0xc8>
   14a4c:	ldr	r3, [pc, #1080]	; 14e8c <test_type_aliases@@Base+0x4f8>
   14a50:	ldr	r2, [r4, #4]
   14a54:	cmp	r2, r3
   14a58:	beq	14a84 <test_type_aliases@@Base+0xf0>
   14a5c:	ldr	r3, [pc, #1068]	; 14e90 <test_type_aliases@@Base+0x4fc>
   14a60:	ldr	r1, [pc, #1068]	; 14e94 <test_type_aliases@@Base+0x500>
   14a64:	add	r3, pc, r3
   14a68:	ldr	r0, [pc, #1064]	; 14e98 <test_type_aliases@@Base+0x504>
   14a6c:	add	r3, r3, #1040	; 0x410
   14a70:	ldr	r2, [pc, #1060]	; 14e9c <test_type_aliases@@Base+0x508>
   14a74:	add	r3, r3, #12
   14a78:	add	r1, pc, r1
   14a7c:	add	r0, pc, r0
   14a80:	bl	12a08 <__assert_fail@plt>
   14a84:	ldr	r3, [r4]
   14a88:	adds	ip, r4, r3
   14a8c:	beq	14a5c <test_type_aliases@@Base+0xc8>
   14a90:	ldr	r3, [r4, r3]
   14a94:	sub	r3, ip, r3
   14a98:	ldrh	r2, [r3]
   14a9c:	cmp	r2, #5
   14aa0:	bls	14bf0 <test_type_aliases@@Base+0x25c>
   14aa4:	ldrh	r1, [r3, #4]
   14aa8:	cmp	r1, #0
   14aac:	beq	14bf0 <test_type_aliases@@Base+0x25c>
   14ab0:	ldrsb	r1, [ip, r1]
   14ab4:	cmn	r1, #128	; 0x80
   14ab8:	bne	14bf0 <test_type_aliases@@Base+0x25c>
   14abc:	cmp	r2, #9
   14ac0:	bls	14bf0 <test_type_aliases@@Base+0x25c>
   14ac4:	ldrh	r1, [r3, #8]
   14ac8:	cmp	r1, #0
   14acc:	beq	14bf0 <test_type_aliases@@Base+0x25c>
   14ad0:	ldrsh	r1, [ip, r1]
   14ad4:	cmn	r1, #32768	; 0x8000
   14ad8:	bne	14bf0 <test_type_aliases@@Base+0x25c>
   14adc:	cmp	r2, #13
   14ae0:	bls	14bf0 <test_type_aliases@@Base+0x25c>
   14ae4:	ldrh	r1, [r3, #12]
   14ae8:	cmp	r1, #0
   14aec:	beq	14bf0 <test_type_aliases@@Base+0x25c>
   14af0:	ldr	r1, [ip, r1]
   14af4:	cmp	r1, #-2147483648	; 0x80000000
   14af8:	bne	14bf0 <test_type_aliases@@Base+0x25c>
   14afc:	cmp	r2, #17
   14b00:	bls	14bf0 <test_type_aliases@@Base+0x25c>
   14b04:	ldrh	r1, [r3, #16]
   14b08:	cmp	r1, #0
   14b0c:	beq	14bf0 <test_type_aliases@@Base+0x25c>
   14b10:	ldrd	r0, [r1, ip]
   14b14:	cmp	r1, #-2147483648	; 0x80000000
   14b18:	cmpeq	r0, #0
   14b1c:	bne	14bf0 <test_type_aliases@@Base+0x25c>
   14b20:	ldrh	r1, [r3, #6]
   14b24:	cmp	r1, #0
   14b28:	beq	14bf0 <test_type_aliases@@Base+0x25c>
   14b2c:	ldrb	r1, [ip, r1]
   14b30:	cmp	r1, #255	; 0xff
   14b34:	bne	14bf0 <test_type_aliases@@Base+0x25c>
   14b38:	ldrh	r1, [r3, #10]
   14b3c:	cmp	r1, #0
   14b40:	beq	14bf0 <test_type_aliases@@Base+0x25c>
   14b44:	ldrh	r0, [ip, r1]
   14b48:	ldr	r1, [pc, #848]	; 14ea0 <test_type_aliases@@Base+0x50c>
   14b4c:	cmp	r0, r1
   14b50:	bne	14bf0 <test_type_aliases@@Base+0x25c>
   14b54:	ldrh	r1, [r3, #14]
   14b58:	cmp	r1, #0
   14b5c:	beq	14bf0 <test_type_aliases@@Base+0x25c>
   14b60:	ldr	r1, [ip, r1]
   14b64:	cmn	r1, #1
   14b68:	bne	14bf0 <test_type_aliases@@Base+0x25c>
   14b6c:	cmp	r2, #19
   14b70:	bls	14bf0 <test_type_aliases@@Base+0x25c>
   14b74:	ldrh	r1, [r3, #18]
   14b78:	cmp	r1, #0
   14b7c:	beq	14bf0 <test_type_aliases@@Base+0x25c>
   14b80:	ldrd	r6, [ip, r1]
   14b84:	mvn	r1, #0
   14b88:	mvn	r0, #0
   14b8c:	cmp	r7, r1
   14b90:	cmpeq	r6, r0
   14b94:	bne	14bf0 <test_type_aliases@@Base+0x25c>
   14b98:	cmp	r2, #21
   14b9c:	bls	14bf0 <test_type_aliases@@Base+0x25c>
   14ba0:	ldrh	r1, [r3, #20]
   14ba4:	cmp	r1, #0
   14ba8:	beq	14bf0 <test_type_aliases@@Base+0x25c>
   14bac:	add	r1, ip, r1
   14bb0:	vldr	s15, [pc, #704]	; 14e78 <test_type_aliases@@Base+0x4e4>
   14bb4:	vldr	s14, [r1]
   14bb8:	vcmp.f32	s14, s15
   14bbc:	vmrs	APSR_nzcv, fpscr
   14bc0:	bne	14bf0 <test_type_aliases@@Base+0x25c>
   14bc4:	cmp	r2, #23
   14bc8:	bls	14bf0 <test_type_aliases@@Base+0x25c>
   14bcc:	ldrh	r3, [r3, #22]
   14bd0:	cmp	r3, #0
   14bd4:	beq	14bf0 <test_type_aliases@@Base+0x25c>
   14bd8:	add	ip, ip, r3
   14bdc:	vldr	d7, [pc, #652]	; 14e70 <test_type_aliases@@Base+0x4dc>
   14be0:	vldr	d6, [ip]
   14be4:	vcmp.f64	d6, d7
   14be8:	vmrs	APSR_nzcv, fpscr
   14bec:	beq	14c00 <test_type_aliases@@Base+0x26c>
   14bf0:	ldr	r0, [pc, #684]	; 14ea4 <test_type_aliases@@Base+0x510>
   14bf4:	mvn	r5, #0
   14bf8:	add	r0, pc, r0
   14bfc:	bl	1296c <puts@plt>
   14c00:	mov	r0, r4
   14c04:	bl	22b10 <flatcc_builder_aligned_free@@Base>
   14c08:	mov	r0, r5
   14c0c:	add	sp, sp, #20
   14c10:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14c14:	mov	r1, #12
   14c18:	mov	r0, r4
   14c1c:	bl	206ec <flatcc_builder_start_table@@Base>
   14c20:	cmp	r0, #0
   14c24:	bne	14e04 <test_type_aliases@@Base+0x470>
   14c28:	mov	r3, r5
   14c2c:	mov	r2, r5
   14c30:	mov	r1, #6
   14c34:	mov	r0, r4
   14c38:	bl	2212c <flatcc_builder_table_add@@Base>
   14c3c:	cmp	r0, #0
   14c40:	beq	14e04 <test_type_aliases@@Base+0x470>
   14c44:	mov	sl, #0
   14c48:	mov	fp, #-2147483648	; 0x80000000
   14c4c:	mov	r3, r5
   14c50:	strd	sl, [r0]
   14c54:	mov	r2, r5
   14c58:	mov	r1, #7
   14c5c:	mov	r0, r4
   14c60:	bl	2212c <flatcc_builder_table_add@@Base>
   14c64:	cmp	r0, #0
   14c68:	beq	14e04 <test_type_aliases@@Base+0x470>
   14c6c:	mvn	sl, #0
   14c70:	mvn	fp, #0
   14c74:	mov	r3, r5
   14c78:	strd	sl, [r0]
   14c7c:	mov	r2, r5
   14c80:	mov	r1, #9
   14c84:	mov	r0, r4
   14c88:	bl	2212c <flatcc_builder_table_add@@Base>
   14c8c:	cmp	r0, #0
   14c90:	beq	14e04 <test_type_aliases@@Base+0x470>
   14c94:	ldr	sl, [pc, #524]	; 14ea8 <test_type_aliases@@Base+0x514>
   14c98:	ldr	fp, [pc, #524]	; 14eac <test_type_aliases@@Base+0x518>
   14c9c:	mov	r3, #4
   14ca0:	mov	r2, r3
   14ca4:	strd	sl, [r0]
   14ca8:	mov	r1, r3
   14cac:	mov	r0, r4
   14cb0:	bl	2212c <flatcc_builder_table_add@@Base>
   14cb4:	cmp	r0, #0
   14cb8:	beq	14e04 <test_type_aliases@@Base+0x470>
   14cbc:	mov	r2, #-2147483648	; 0x80000000
   14cc0:	mov	r3, #4
   14cc4:	str	r2, [r0]
   14cc8:	mov	r1, #5
   14ccc:	mov	r2, r3
   14cd0:	mov	r0, r4
   14cd4:	bl	2212c <flatcc_builder_table_add@@Base>
   14cd8:	cmp	r0, #0
   14cdc:	beq	14e04 <test_type_aliases@@Base+0x470>
   14ce0:	mov	r3, #4
   14ce4:	str	r6, [r0]
   14ce8:	mov	r1, r5
   14cec:	mov	r2, r3
   14cf0:	mov	r0, r4
   14cf4:	bl	2212c <flatcc_builder_table_add@@Base>
   14cf8:	cmp	r0, #0
   14cfc:	beq	14e04 <test_type_aliases@@Base+0x470>
   14d00:	ldr	r3, [pc, #424]	; 14eb0 <test_type_aliases@@Base+0x51c>
   14d04:	cmp	r8, #0
   14d08:	str	r3, [r0]
   14d0c:	beq	14e04 <test_type_aliases@@Base+0x470>
   14d10:	mov	r1, #10
   14d14:	mov	r0, r4
   14d18:	bl	2234c <flatcc_builder_table_add_offset@@Base>
   14d1c:	cmp	r0, #0
   14d20:	beq	14e04 <test_type_aliases@@Base+0x470>
   14d24:	cmp	r9, #0
   14d28:	str	r8, [r0]
   14d2c:	beq	14e04 <test_type_aliases@@Base+0x470>
   14d30:	mov	r1, #11
   14d34:	mov	r0, r4
   14d38:	bl	2234c <flatcc_builder_table_add_offset@@Base>
   14d3c:	cmp	r0, #0
   14d40:	beq	14e04 <test_type_aliases@@Base+0x470>
   14d44:	mov	r3, #2
   14d48:	str	r9, [r0]
   14d4c:	mov	r2, r3
   14d50:	mov	r1, r3
   14d54:	mov	r0, r4
   14d58:	bl	2212c <flatcc_builder_table_add@@Base>
   14d5c:	cmp	r0, #0
   14d60:	beq	14e04 <test_type_aliases@@Base+0x470>
   14d64:	mov	r2, #32768	; 0x8000
   14d68:	mov	r3, #2
   14d6c:	strh	r2, [r0]
   14d70:	mov	r1, #3
   14d74:	mov	r2, r3
   14d78:	mov	r0, r4
   14d7c:	bl	2212c <flatcc_builder_table_add@@Base>
   14d80:	cmp	r0, #0
   14d84:	beq	14e04 <test_type_aliases@@Base+0x470>
   14d88:	mov	r3, #1
   14d8c:	mvn	r5, #0
   14d90:	strh	r5, [r0]
   14d94:	mov	r2, r3
   14d98:	mov	r1, #0
   14d9c:	mov	r0, r4
   14da0:	bl	2212c <flatcc_builder_table_add@@Base>
   14da4:	cmp	r0, #0
   14da8:	beq	14e04 <test_type_aliases@@Base+0x470>
   14dac:	mov	r3, #1
   14db0:	mvn	r2, #127	; 0x7f
   14db4:	strb	r2, [r0]
   14db8:	mov	r1, r3
   14dbc:	mov	r2, r3
   14dc0:	mov	r0, r4
   14dc4:	bl	2212c <flatcc_builder_table_add@@Base>
   14dc8:	cmp	r0, #0
   14dcc:	beq	14e04 <test_type_aliases@@Base+0x470>
   14dd0:	ldr	r6, [pc, #220]	; 14eb4 <test_type_aliases@@Base+0x520>
   14dd4:	strb	r5, [r0]
   14dd8:	add	r6, pc, r6
   14ddc:	add	r1, r6, #1016	; 0x3f8
   14de0:	mov	r2, #0
   14de4:	mov	r0, r4
   14de8:	bl	21038 <flatcc_builder_check_required@@Base>
   14dec:	cmp	r0, #0
   14df0:	beq	14e50 <test_type_aliases@@Base+0x4bc>
   14df4:	mov	r0, r4
   14df8:	bl	210e0 <flatcc_builder_end_table@@Base>
   14dfc:	mov	r1, r0
   14e00:	b	14e08 <test_type_aliases@@Base+0x474>
   14e04:	mov	r1, #0
   14e08:	mov	r0, r4
   14e0c:	bl	1f96c <flatcc_builder_end_buffer@@Base>
   14e10:	b	14a14 <test_type_aliases@@Base+0x80>
   14e14:	ldr	r3, [pc, #156]	; 14eb8 <test_type_aliases@@Base+0x524>
   14e18:	ldr	r0, [pc, #156]	; 14ebc <test_type_aliases@@Base+0x528>
   14e1c:	mov	r1, r4
   14e20:	ldr	r3, [r7, r3]
   14e24:	ldr	r2, [sp, #12]
   14e28:	add	r0, pc, r0
   14e2c:	ldr	r3, [r3]
   14e30:	bl	13540 <_start@@Base+0x154>
   14e34:	mov	r0, r5
   14e38:	bl	23150 <flatcc_verify_error_string@@Base>
   14e3c:	mov	r1, r0
   14e40:	ldr	r0, [pc, #120]	; 14ec0 <test_type_aliases@@Base+0x52c>
   14e44:	add	r0, pc, r0
   14e48:	bl	12918 <printf@plt>
   14e4c:	b	14c00 <test_type_aliases@@Base+0x26c>
   14e50:	ldr	r1, [pc, #108]	; 14ec4 <test_type_aliases@@Base+0x530>
   14e54:	ldr	r0, [pc, #108]	; 14ec8 <test_type_aliases@@Base+0x534>
   14e58:	add	r3, r6, #1020	; 0x3fc
   14e5c:	mov	r2, #237	; 0xed
   14e60:	add	r1, pc, r1
   14e64:	add	r0, pc, r0
   14e68:	bl	12a08 <__assert_fail@plt>
   14e6c:	nop			; (mov r0, r0)
   14e70:	strbtvs	r6, [r6], -r6, ror #12
   14e74:	andmi	r6, r2, r6, ror #12
   14e78:	andsmi	r3, r3, r3, lsr r3
   14e7c:	andeq	r4, r2, r8, lsl r6
   14e80:	andeq	r0, r1, r0, lsl sl
   14e84:			; <UNDEFINED> instruction: 0xffffeec4
   14e88:	andeq	r0, r1, r0, ror #19
   14e8c:	movtpl	r4, #61261	; 0xef4d
   14e90:	andeq	pc, r0, ip, asr #26
   14e94:	andeq	r0, r1, r0, asr #8
   14e98:			; <UNDEFINED> instruction: 0x000104b8
   14e9c:	andeq	r0, r0, sp, ror #5
   14ea0:	strdeq	pc, [r0], -pc	; <UNPREDICTABLE>
   14ea4:	andeq	r0, r1, ip, lsl #18
   14ea8:	strbtvs	r6, [r6], -r6, ror #12
   14eac:	andmi	r6, r2, r6, ror #12
   14eb0:	andsmi	r3, r3, r3, lsr r3
   14eb4:	ldrdeq	pc, [r0], -r8
   14eb8:	andeq	r0, r0, r8, rrx
   14ebc:	muleq	r1, ip, r6
   14ec0:	muleq	r1, r4, r6
   14ec4:	strdeq	r0, [r1], -r8
   14ec8:			; <UNDEFINED> instruction: 0x000105b0

00014ecc <test_empty_monster@@Base>:
   14ecc:	push	{r4, r5, r6, r7, lr}
   14ed0:	sub	sp, sp, #12
   14ed4:	mov	r4, r0
   14ed8:	bl	1f0f0 <flatcc_builder_reset@@Base>
   14edc:	ldr	r1, [pc, #348]	; 15040 <test_empty_monster@@Base+0x174>
   14ee0:	mov	r3, #0
   14ee4:	mov	r2, r3
   14ee8:	add	r1, pc, r1
   14eec:	mov	r0, r4
   14ef0:	bl	1f8b4 <flatcc_builder_start_buffer@@Base>
   14ef4:	mov	r1, #36	; 0x24
   14ef8:	mov	r0, r4
   14efc:	bl	206ec <flatcc_builder_start_table@@Base>
   14f00:	ldr	r1, [pc, #316]	; 15044 <test_empty_monster@@Base+0x178>
   14f04:	mov	r0, r4
   14f08:	add	r1, pc, r1
   14f0c:	bl	21f90 <flatcc_builder_create_string_str@@Base>
   14f10:	ldr	r5, [pc, #304]	; 15048 <test_empty_monster@@Base+0x17c>
   14f14:	add	r5, pc, r5
   14f18:	subs	r6, r0, #0
   14f1c:	beq	14f34 <test_empty_monster@@Base+0x68>
   14f20:	mov	r1, #3
   14f24:	mov	r0, r4
   14f28:	bl	2234c <flatcc_builder_table_add_offset@@Base>
   14f2c:	cmp	r0, #0
   14f30:	strne	r6, [r0]
   14f34:	ldr	r1, [pc, #272]	; 1504c <test_empty_monster@@Base+0x180>
   14f38:	mov	r2, #1
   14f3c:	add	r1, pc, r1
   14f40:	add	r1, r1, #1072	; 0x430
   14f44:	add	r1, r1, #12
   14f48:	mov	r0, r4
   14f4c:	bl	21038 <flatcc_builder_check_required@@Base>
   14f50:	cmp	r0, #0
   14f54:	beq	1503c <test_empty_monster@@Base+0x170>
   14f58:	mov	r0, r4
   14f5c:	bl	210e0 <flatcc_builder_end_table@@Base>
   14f60:	mov	r1, r0
   14f64:	mov	r0, r4
   14f68:	bl	1f96c <flatcc_builder_end_buffer@@Base>
   14f6c:	mov	r0, r4
   14f70:	add	r1, sp, #4
   14f74:	bl	22a08 <flatcc_builder_finalize_aligned_buffer@@Base>
   14f78:	ldr	r3, [pc, #208]	; 15050 <test_empty_monster@@Base+0x184>
   14f7c:	ldr	r2, [sp, #4]
   14f80:	ldr	r3, [r5, r3]
   14f84:	ldr	r3, [r3]
   14f88:	mov	r1, r0
   14f8c:	mov	r4, r0
   14f90:	ldr	r0, [pc, #188]	; 15054 <test_empty_monster@@Base+0x188>
   14f94:	add	r0, pc, r0
   14f98:	bl	13540 <_start@@Base+0x154>
   14f9c:	mov	r0, r4
   14fa0:	bl	148b8 <verify_empty_monster@@Base>
   14fa4:	subs	r5, r0, #0
   14fa8:	beq	14fc0 <test_empty_monster@@Base+0xf4>
   14fac:	mov	r0, r4
   14fb0:	bl	22b10 <flatcc_builder_aligned_free@@Base>
   14fb4:	mov	r0, r5
   14fb8:	add	sp, sp, #12
   14fbc:	pop	{r4, r5, r6, r7, pc}
   14fc0:	ldr	r7, [pc, #144]	; 15058 <test_empty_monster@@Base+0x18c>
   14fc4:	ldr	r6, [pc, #144]	; 1505c <test_empty_monster@@Base+0x190>
   14fc8:	add	r7, pc, r7
   14fcc:	add	r6, pc, r6
   14fd0:	mov	r3, r7
   14fd4:	mov	r2, r6
   14fd8:	ldr	r1, [sp, #4]
   14fdc:	mov	r0, r4
   14fe0:	bl	23edc <flatcc_verify_table_as_root@@Base>
   14fe4:	subs	r5, r0, #0
   14fe8:	bne	15020 <test_empty_monster@@Base+0x154>
   14fec:	ldr	r1, [sp, #4]
   14ff0:	mov	r3, r7
   14ff4:	mov	r2, r6
   14ff8:	sub	r1, r1, #1
   14ffc:	mov	r0, r4
   15000:	bl	23edc <flatcc_verify_table_as_root@@Base>
   15004:	cmp	r0, #0
   15008:	bne	14fac <test_empty_monster@@Base+0xe0>
   1500c:	ldr	r0, [pc, #76]	; 15060 <test_empty_monster@@Base+0x194>
   15010:	mvn	r5, #0
   15014:	add	r0, pc, r0
   15018:	bl	1296c <puts@plt>
   1501c:	b	14fb4 <test_empty_monster@@Base+0xe8>
   15020:	bl	23150 <flatcc_verify_error_string@@Base>
   15024:	mvn	r5, #0
   15028:	mov	r1, r0
   1502c:	ldr	r0, [pc, #48]	; 15064 <test_empty_monster@@Base+0x198>
   15030:	add	r0, pc, r0
   15034:	bl	12918 <printf@plt>
   15038:	b	14fb4 <test_empty_monster@@Base+0xe8>
   1503c:	bl	130f4 <__assert_fail@plt+0x6ec>
   15040:	andeq	r0, r1, r4, lsr #10
   15044:	andeq	r0, r1, ip, lsr #12
   15048:	andeq	r4, r2, r4, ror #1
   1504c:	andeq	pc, r0, r4, ror r8	; <UNPREDICTABLE>
   15050:	andeq	r0, r0, r8, rrx
   15054:	andeq	r0, r1, ip, lsr #11
   15058:			; <UNDEFINED> instruction: 0xffffec44
   1505c:	andeq	r0, r1, r0, asr #8
   15060:	andeq	r0, r1, r8, ror #10
   15064:	andeq	r0, r1, r4, lsr #10

00015068 <test_typed_empty_monster@@Base>:
   15068:	push	{r4, r5, r6, r7, r8, lr}
   1506c:	sub	sp, sp, #8
   15070:	mov	r5, #0
   15074:	mov	r4, r0
   15078:	str	r5, [sp, #4]
   1507c:	bl	1f0f0 <flatcc_builder_reset@@Base>
   15080:	ldr	r1, [pc, #776]	; 15390 <test_typed_empty_monster@@Base+0x328>
   15084:	mov	r3, r5
   15088:	mov	r2, r5
   1508c:	add	r1, pc, r1
   15090:	mov	r0, r4
   15094:	bl	1f8b4 <flatcc_builder_start_buffer@@Base>
   15098:	mov	r1, #36	; 0x24
   1509c:	mov	r0, r4
   150a0:	bl	206ec <flatcc_builder_start_table@@Base>
   150a4:	ldr	r1, [pc, #744]	; 15394 <test_typed_empty_monster@@Base+0x32c>
   150a8:	mov	r0, r4
   150ac:	add	r1, pc, r1
   150b0:	bl	21f90 <flatcc_builder_create_string_str@@Base>
   150b4:	ldr	r6, [pc, #732]	; 15398 <test_typed_empty_monster@@Base+0x330>
   150b8:	add	r6, pc, r6
   150bc:	subs	r5, r0, #0
   150c0:	beq	150d8 <test_typed_empty_monster@@Base+0x70>
   150c4:	mov	r1, #3
   150c8:	mov	r0, r4
   150cc:	bl	2234c <flatcc_builder_table_add_offset@@Base>
   150d0:	cmp	r0, #0
   150d4:	strne	r5, [r0]
   150d8:	ldr	r1, [pc, #700]	; 1539c <test_typed_empty_monster@@Base+0x334>
   150dc:	mov	r2, #1
   150e0:	add	r1, pc, r1
   150e4:	add	r1, r1, #1072	; 0x430
   150e8:	add	r1, r1, #12
   150ec:	mov	r0, r4
   150f0:	bl	21038 <flatcc_builder_check_required@@Base>
   150f4:	cmp	r0, #0
   150f8:	beq	1538c <test_typed_empty_monster@@Base+0x324>
   150fc:	mov	r0, r4
   15100:	bl	210e0 <flatcc_builder_end_table@@Base>
   15104:	mov	r1, r0
   15108:	mov	r0, r4
   1510c:	bl	1f96c <flatcc_builder_end_buffer@@Base>
   15110:	mov	r0, r4
   15114:	mov	r1, sp
   15118:	bl	22a08 <flatcc_builder_finalize_aligned_buffer@@Base>
   1511c:	ldr	r3, [pc, #636]	; 153a0 <test_typed_empty_monster@@Base+0x338>
   15120:	ldr	r2, [sp]
   15124:	ldr	r4, [pc, #632]	; 153a4 <test_typed_empty_monster@@Base+0x33c>
   15128:	ldr	r3, [r6, r3]
   1512c:	ldr	r3, [r3]
   15130:	mov	r1, r0
   15134:	mov	r5, r0
   15138:	ldr	r0, [pc, #616]	; 153a8 <test_typed_empty_monster@@Base+0x340>
   1513c:	add	r0, pc, r0
   15140:	bl	13540 <_start@@Base+0x154>
   15144:	ldr	r2, [pc, #608]	; 153ac <test_typed_empty_monster@@Base+0x344>
   15148:	ldr	r1, [r5, #4]
   1514c:	ldr	r0, [pc, #604]	; 153b0 <test_typed_empty_monster@@Base+0x348>
   15150:	add	r2, pc, r2
   15154:	mov	r3, #77	; 0x4d
   15158:	eor	r4, r4, r3
   1515c:	ldrb	r3, [r2, #1]!
   15160:	mul	r4, r0, r4
   15164:	cmp	r3, #0
   15168:	bne	15158 <test_typed_empty_monster@@Base+0xf0>
   1516c:	cmp	r4, #0
   15170:	beq	152bc <test_typed_empty_monster@@Base+0x254>
   15174:	cmp	r4, r1
   15178:	bne	15364 <test_typed_empty_monster@@Base+0x2fc>
   1517c:	ldr	r3, [pc, #560]	; 153b4 <test_typed_empty_monster@@Base+0x34c>
   15180:	cmp	r4, r3
   15184:	bne	152c8 <test_typed_empty_monster@@Base+0x260>
   15188:	mov	r0, r5
   1518c:	bl	148b8 <verify_empty_monster@@Base>
   15190:	cmp	r0, #0
   15194:	beq	15378 <test_typed_empty_monster@@Base+0x310>
   15198:	ldr	r7, [pc, #536]	; 153b8 <test_typed_empty_monster@@Base+0x350>
   1519c:	ldr	r8, [pc, #536]	; 153bc <test_typed_empty_monster@@Base+0x354>
   151a0:	add	r7, pc, r7
   151a4:	add	r8, pc, r8
   151a8:	mov	r3, r7
   151ac:	mov	r2, r8
   151b0:	ldr	r1, [sp]
   151b4:	mov	r0, r5
   151b8:	bl	23edc <flatcc_verify_table_as_root@@Base>
   151bc:	subs	r6, r0, #0
   151c0:	bne	152ec <test_typed_empty_monster@@Base+0x284>
   151c4:	mov	r2, r8
   151c8:	mov	r3, r7
   151cc:	ldr	r1, [sp]
   151d0:	mov	r0, r5
   151d4:	bl	23edc <flatcc_verify_table_as_root@@Base>
   151d8:	subs	r6, r0, #0
   151dc:	bne	15304 <test_typed_empty_monster@@Base+0x29c>
   151e0:	mov	r3, r7
   151e4:	mov	r2, r4
   151e8:	ldr	r1, [sp]
   151ec:	mov	r0, r5
   151f0:	bl	23fdc <flatcc_verify_table_as_typed_root@@Base>
   151f4:	subs	r6, r0, #0
   151f8:	bne	15334 <test_typed_empty_monster@@Base+0x2cc>
   151fc:	ldr	r0, [pc, #444]	; 153c0 <test_typed_empty_monster@@Base+0x358>
   15200:	ldr	r1, [sp]
   15204:	ldr	r2, [pc, #408]	; 153a4 <test_typed_empty_monster@@Base+0x33c>
   15208:	ldr	ip, [pc, #416]	; 153b0 <test_typed_empty_monster@@Base+0x348>
   1520c:	add	r0, pc, r0
   15210:	mov	r3, #77	; 0x4d
   15214:	eor	r2, r2, r3
   15218:	ldrb	r3, [r0, #1]!
   1521c:	mul	r2, ip, r2
   15220:	cmp	r3, #0
   15224:	bne	15214 <test_typed_empty_monster@@Base+0x1ac>
   15228:	ldr	r4, [pc, #404]	; 153c4 <test_typed_empty_monster@@Base+0x35c>
   1522c:	ldr	r3, [pc, #368]	; 153a4 <test_typed_empty_monster@@Base+0x33c>
   15230:	cmp	r2, #0
   15234:	add	r4, pc, r4
   15238:	moveq	r2, r3
   1523c:	mov	r0, r5
   15240:	mov	r3, r4
   15244:	bl	23fdc <flatcc_verify_table_as_typed_root@@Base>
   15248:	subs	r6, r0, #0
   1524c:	bne	1531c <test_typed_empty_monster@@Base+0x2b4>
   15250:	mvn	r1, #126	; 0x7e
   15254:	mvn	r0, #11
   15258:	mov	lr, #14
   1525c:	mov	ip, #51	; 0x33
   15260:	strb	r1, [sp, #4]
   15264:	strb	r0, [sp, #5]
   15268:	mov	r3, r4
   1526c:	add	r2, sp, #4
   15270:	ldr	r1, [sp]
   15274:	mov	r0, r5
   15278:	strb	lr, [sp, #6]
   1527c:	strb	ip, [sp, #7]
   15280:	bl	23edc <flatcc_verify_table_as_root@@Base>
   15284:	subs	r6, r0, #0
   15288:	bne	1534c <test_typed_empty_monster@@Base+0x2e4>
   1528c:	ldr	r2, [pc, #308]	; 153c8 <test_typed_empty_monster@@Base+0x360>
   15290:	mov	r3, r4
   15294:	add	r2, pc, r2
   15298:	ldr	r1, [sp]
   1529c:	mov	r0, r5
   152a0:	bl	23edc <flatcc_verify_table_as_root@@Base>
   152a4:	cmp	r0, #0
   152a8:	bne	152d8 <test_typed_empty_monster@@Base+0x270>
   152ac:	ldr	r0, [pc, #280]	; 153cc <test_typed_empty_monster@@Base+0x364>
   152b0:	add	r0, pc, r0
   152b4:	bl	1296c <puts@plt>
   152b8:	b	152d8 <test_typed_empty_monster@@Base+0x270>
   152bc:	ldr	r3, [pc, #224]	; 153a4 <test_typed_empty_monster@@Base+0x33c>
   152c0:	cmp	r1, r3
   152c4:	bne	15364 <test_typed_empty_monster@@Base+0x2fc>
   152c8:	ldr	r0, [pc, #256]	; 153d0 <test_typed_empty_monster@@Base+0x368>
   152cc:	mvn	r6, #0
   152d0:	add	r0, pc, r0
   152d4:	bl	1296c <puts@plt>
   152d8:	mov	r0, r5
   152dc:	bl	22b10 <flatcc_builder_aligned_free@@Base>
   152e0:	mov	r0, r6
   152e4:	add	sp, sp, #8
   152e8:	pop	{r4, r5, r6, r7, r8, pc}
   152ec:	bl	23150 <flatcc_verify_error_string@@Base>
   152f0:	mov	r1, r0
   152f4:	ldr	r0, [pc, #216]	; 153d4 <test_typed_empty_monster@@Base+0x36c>
   152f8:	add	r0, pc, r0
   152fc:	bl	12918 <printf@plt>
   15300:	b	152d8 <test_typed_empty_monster@@Base+0x270>
   15304:	bl	23150 <flatcc_verify_error_string@@Base>
   15308:	mov	r1, r0
   1530c:	ldr	r0, [pc, #196]	; 153d8 <test_typed_empty_monster@@Base+0x370>
   15310:	add	r0, pc, r0
   15314:	bl	12918 <printf@plt>
   15318:	b	152d8 <test_typed_empty_monster@@Base+0x270>
   1531c:	bl	23150 <flatcc_verify_error_string@@Base>
   15320:	mov	r1, r0
   15324:	ldr	r0, [pc, #176]	; 153dc <test_typed_empty_monster@@Base+0x374>
   15328:	add	r0, pc, r0
   1532c:	bl	12918 <printf@plt>
   15330:	b	152d8 <test_typed_empty_monster@@Base+0x270>
   15334:	bl	23150 <flatcc_verify_error_string@@Base>
   15338:	mov	r1, r0
   1533c:	ldr	r0, [pc, #156]	; 153e0 <test_typed_empty_monster@@Base+0x378>
   15340:	add	r0, pc, r0
   15344:	bl	12918 <printf@plt>
   15348:	b	152d8 <test_typed_empty_monster@@Base+0x270>
   1534c:	bl	23150 <flatcc_verify_error_string@@Base>
   15350:	mov	r1, r0
   15354:	ldr	r0, [pc, #136]	; 153e4 <test_typed_empty_monster@@Base+0x37c>
   15358:	add	r0, pc, r0
   1535c:	bl	12918 <printf@plt>
   15360:	b	152d8 <test_typed_empty_monster@@Base+0x270>
   15364:	ldr	r0, [pc, #124]	; 153e8 <test_typed_empty_monster@@Base+0x380>
   15368:	mvn	r6, #0
   1536c:	add	r0, pc, r0
   15370:	bl	12918 <printf@plt>
   15374:	b	152d8 <test_typed_empty_monster@@Base+0x270>
   15378:	ldr	r0, [pc, #108]	; 153ec <test_typed_empty_monster@@Base+0x384>
   1537c:	mvn	r6, #0
   15380:	add	r0, pc, r0
   15384:	bl	1296c <puts@plt>
   15388:	b	152d8 <test_typed_empty_monster@@Base+0x270>
   1538c:	bl	130f4 <__assert_fail@plt+0x6ec>
   15390:	andeq	r0, r1, r8, lsr r5
   15394:	andeq	r0, r1, r8, lsl #9
   15398:	andeq	r3, r2, r0, asr #30
   1539c:	ldrdeq	pc, [r0], -r0
   153a0:	andeq	r0, r0, r8, rrx
   153a4:	tsthi	ip, r5, asr #27
   153a8:	muleq	r1, r0, r4
   153ac:	andeq	r0, r1, ip, asr r4
   153b0:			; <UNDEFINED> instruction: 0x01000193
   153b4:	movwcc	pc, #58497	; 0xe481	; <UNPREDICTABLE>
   153b8:			; <UNDEFINED> instruction: 0xffffea6c
   153bc:	andeq	r0, r1, r0, lsr #8
   153c0:	andeq	r0, r1, r0, lsr #7
   153c4:			; <UNDEFINED> instruction: 0xffffe9d8
   153c8:	andeq	r0, r1, r8, ror r1
   153cc:	andeq	r0, r1, r4, asr r4
   153d0:	andeq	r0, r1, r0, lsl #9
   153d4:	andeq	r0, r1, r4, ror #6
   153d8:	andeq	r0, r1, ip, asr #6
   153dc:	muleq	r1, ip, r3
   153e0:	andeq	r0, r1, ip, asr #6
   153e4:	andeq	r0, r1, r4, lsl #6
   153e8:	andeq	r0, r1, ip, ror r2
   153ec:	muleq	r1, ip, r2

000153f0 <verify_table_with_emptystruct@@Base>:
   153f0:	cmp	r0, #0
   153f4:	push	{r4, lr}
   153f8:	beq	1540c <verify_table_with_emptystruct@@Base+0x1c>
   153fc:	ldr	r3, [pc, #108]	; 15470 <verify_table_with_emptystruct@@Base+0x80>
   15400:	ldr	r2, [r0, #4]
   15404:	cmp	r2, r3
   15408:	beq	15420 <verify_table_with_emptystruct@@Base+0x30>
   1540c:	ldr	r0, [pc, #96]	; 15474 <verify_table_with_emptystruct@@Base+0x84>
   15410:	add	r0, pc, r0
   15414:	bl	1296c <puts@plt>
   15418:	mvn	r0, #0
   1541c:	pop	{r4, pc}
   15420:	ldr	r3, [r0]
   15424:	adds	r2, r0, r3
   15428:	beq	1540c <verify_table_with_emptystruct@@Base+0x1c>
   1542c:	ldr	r3, [r0, r3]
   15430:	sub	r3, r2, r3
   15434:	ldrh	r1, [r3]
   15438:	cmp	r1, #5
   1543c:	bhi	15454 <verify_table_with_emptystruct@@Base+0x64>
   15440:	ldr	r0, [pc, #48]	; 15478 <verify_table_with_emptystruct@@Base+0x88>
   15444:	add	r0, pc, r0
   15448:	bl	1296c <puts@plt>
   1544c:	mvn	r0, #0
   15450:	pop	{r4, pc}
   15454:	ldrh	r3, [r3, #4]
   15458:	cmp	r3, #0
   1545c:	beq	15440 <verify_table_with_emptystruct@@Base+0x50>
   15460:	cmn	r2, r3
   15464:	beq	15440 <verify_table_with_emptystruct@@Base+0x50>
   15468:	mov	r0, #0
   1546c:	pop	{r4, pc}
   15470:	movtpl	r4, #61261	; 0xef4d
   15474:	andeq	r0, r1, r8, ror #6
   15478:	andeq	r0, r1, ip, asr r3

0001547c <test_table_with_emptystruct@@Base>:
   1547c:	push	{r4, r5, r6, r7, lr}
   15480:	sub	sp, sp, #12
   15484:	mov	r4, r0
   15488:	bl	1f0f0 <flatcc_builder_reset@@Base>
   1548c:	ldr	r1, [pc, #256]	; 15594 <test_table_with_emptystruct@@Base+0x118>
   15490:	mov	r3, #0
   15494:	mov	r0, r4
   15498:	mov	r2, r3
   1549c:	add	r1, pc, r1
   154a0:	bl	1f8b4 <flatcc_builder_start_buffer@@Base>
   154a4:	ldr	r5, [pc, #236]	; 15598 <test_table_with_emptystruct@@Base+0x11c>
   154a8:	add	r5, pc, r5
   154ac:	cmp	r0, #0
   154b0:	beq	15504 <test_table_with_emptystruct@@Base+0x88>
   154b4:	add	r1, sp, #4
   154b8:	mov	r0, r4
   154bc:	bl	22a08 <flatcc_builder_finalize_aligned_buffer@@Base>
   154c0:	ldr	r3, [pc, #212]	; 1559c <test_table_with_emptystruct@@Base+0x120>
   154c4:	ldr	r2, [sp, #4]
   154c8:	ldr	r3, [r5, r3]
   154cc:	ldr	r3, [r3]
   154d0:	mov	r1, r0
   154d4:	mov	r4, r0
   154d8:	ldr	r0, [pc, #192]	; 155a0 <test_table_with_emptystruct@@Base+0x124>
   154dc:	add	r0, pc, r0
   154e0:	bl	13540 <_start@@Base+0x154>
   154e4:	mov	r0, r4
   154e8:	bl	153f0 <verify_table_with_emptystruct@@Base>
   154ec:	mov	r5, r0
   154f0:	mov	r0, r4
   154f4:	bl	22b10 <flatcc_builder_aligned_free@@Base>
   154f8:	mov	r0, r5
   154fc:	add	sp, sp, #12
   15500:	pop	{r4, r5, r6, r7, pc}
   15504:	mov	r1, #1
   15508:	mov	r0, r4
   1550c:	bl	206ec <flatcc_builder_start_table@@Base>
   15510:	subs	r6, r0, #0
   15514:	beq	15528 <test_table_with_emptystruct@@Base+0xac>
   15518:	mov	r1, #0
   1551c:	mov	r0, r4
   15520:	bl	1f96c <flatcc_builder_end_buffer@@Base>
   15524:	b	154b4 <test_table_with_emptystruct@@Base+0x38>
   15528:	mov	r3, #1
   1552c:	mov	r2, r6
   15530:	mov	r1, r6
   15534:	mov	r0, r4
   15538:	bl	2212c <flatcc_builder_table_add@@Base>
   1553c:	cmp	r0, #0
   15540:	beq	15518 <test_table_with_emptystruct@@Base+0x9c>
   15544:	ldr	r7, [pc, #88]	; 155a4 <test_table_with_emptystruct@@Base+0x128>
   15548:	mov	r2, r6
   1554c:	add	r7, pc, r7
   15550:	add	r1, r7, #1120	; 0x460
   15554:	add	r1, r1, #4
   15558:	mov	r0, r4
   1555c:	bl	21038 <flatcc_builder_check_required@@Base>
   15560:	cmp	r0, #0
   15564:	beq	15578 <test_table_with_emptystruct@@Base+0xfc>
   15568:	mov	r0, r4
   1556c:	bl	210e0 <flatcc_builder_end_table@@Base>
   15570:	mov	r1, r0
   15574:	b	1551c <test_table_with_emptystruct@@Base+0xa0>
   15578:	ldr	r1, [pc, #40]	; 155a8 <test_table_with_emptystruct@@Base+0x12c>
   1557c:	ldr	r0, [pc, #40]	; 155ac <test_table_with_emptystruct@@Base+0x130>
   15580:	add	r3, r7, #1088	; 0x440
   15584:	mov	r2, #215	; 0xd7
   15588:	add	r1, pc, r1
   1558c:	add	r0, pc, r0
   15590:	bl	12a08 <__assert_fail@plt>
   15594:	andeq	pc, r0, r0, ror pc	; <UNPREDICTABLE>
   15598:	andeq	r3, r2, r0, asr fp
   1559c:	andeq	r0, r0, r8, rrx
   155a0:	andeq	r0, r1, r0, lsr #7
   155a4:	andeq	pc, r0, r4, ror #4
   155a8:	ldrdeq	pc, [r0], -r0
   155ac:	andeq	r0, r1, r0, lsr r2

000155b0 <test_typed_table_with_emptystruct@@Base>:
   155b0:	push	{r4, r5, r6, r7, lr}
   155b4:	sub	sp, sp, #12
   155b8:	mov	r4, r0
   155bc:	bl	1f0f0 <flatcc_builder_reset@@Base>
   155c0:	ldr	r1, [pc, #484]	; 157ac <test_typed_table_with_emptystruct@@Base+0x1fc>
   155c4:	mov	r3, #0
   155c8:	mov	r0, r4
   155cc:	mov	r2, r3
   155d0:	add	r1, pc, r1
   155d4:	bl	1f8b4 <flatcc_builder_start_buffer@@Base>
   155d8:	ldr	r6, [pc, #464]	; 157b0 <test_typed_table_with_emptystruct@@Base+0x200>
   155dc:	add	r6, pc, r6
   155e0:	cmp	r0, #0
   155e4:	beq	156cc <test_typed_table_with_emptystruct@@Base+0x11c>
   155e8:	mov	r0, r4
   155ec:	add	r1, sp, #4
   155f0:	bl	228b4 <flatcc_builder_get_direct_buffer@@Base>
   155f4:	ldr	r3, [pc, #440]	; 157b4 <test_typed_table_with_emptystruct@@Base+0x204>
   155f8:	ldr	r5, [pc, #440]	; 157b8 <test_typed_table_with_emptystruct@@Base+0x208>
   155fc:	ldr	r7, [pc, #440]	; 157bc <test_typed_table_with_emptystruct@@Base+0x20c>
   15600:	ldr	r3, [r6, r3]
   15604:	ldr	r2, [sp, #4]
   15608:	add	r5, pc, r5
   1560c:	ldr	r3, [r3]
   15610:	add	r7, pc, r7
   15614:	mov	r1, r0
   15618:	mov	r4, r0
   1561c:	ldr	r0, [pc, #412]	; 157c0 <test_typed_table_with_emptystruct@@Base+0x210>
   15620:	add	r0, pc, r0
   15624:	bl	13540 <_start@@Base+0x154>
   15628:	mov	r0, r4
   1562c:	mov	r3, r5
   15630:	mov	r2, r7
   15634:	ldr	r1, [sp, #4]
   15638:	bl	23edc <flatcc_verify_table_as_root@@Base>
   1563c:	cmp	r0, #0
   15640:	bne	15740 <test_typed_table_with_emptystruct@@Base+0x190>
   15644:	mov	r2, r7
   15648:	mov	r3, r5
   1564c:	ldr	r1, [sp, #4]
   15650:	mov	r0, r4
   15654:	bl	23edc <flatcc_verify_table_as_root@@Base>
   15658:	cmp	r0, #0
   1565c:	bne	15754 <test_typed_table_with_emptystruct@@Base+0x1a4>
   15660:	ldr	r6, [pc, #348]	; 157c4 <test_typed_table_with_emptystruct@@Base+0x214>
   15664:	mov	r3, r5
   15668:	mov	r2, r6
   1566c:	ldr	r1, [sp, #4]
   15670:	mov	r0, r4
   15674:	bl	23fdc <flatcc_verify_table_as_typed_root@@Base>
   15678:	cmp	r0, #0
   1567c:	bne	15768 <test_typed_table_with_emptystruct@@Base+0x1b8>
   15680:	cmp	r4, #0
   15684:	beq	1577c <test_typed_table_with_emptystruct@@Base+0x1cc>
   15688:	ldr	r3, [r4, #4]
   1568c:	cmp	r3, r6
   15690:	beq	156ac <test_typed_table_with_emptystruct@@Base+0xfc>
   15694:	ldr	r0, [pc, #300]	; 157c8 <test_typed_table_with_emptystruct@@Base+0x218>
   15698:	add	r0, pc, r0
   1569c:	bl	1296c <puts@plt>
   156a0:	mvn	r0, #0
   156a4:	add	sp, sp, #12
   156a8:	pop	{r4, r5, r6, r7, pc}
   156ac:	ldr	r3, [r4]
   156b0:	cmn	r4, r3
   156b4:	bne	156a4 <test_typed_table_with_emptystruct@@Base+0xf4>
   156b8:	ldr	r0, [pc, #268]	; 157cc <test_typed_table_with_emptystruct@@Base+0x21c>
   156bc:	add	r0, pc, r0
   156c0:	bl	1296c <puts@plt>
   156c4:	mvn	r0, #0
   156c8:	b	156a4 <test_typed_table_with_emptystruct@@Base+0xf4>
   156cc:	mov	r1, #1
   156d0:	mov	r0, r4
   156d4:	bl	206ec <flatcc_builder_start_table@@Base>
   156d8:	subs	r5, r0, #0
   156dc:	beq	156f0 <test_typed_table_with_emptystruct@@Base+0x140>
   156e0:	mov	r1, #0
   156e4:	mov	r0, r4
   156e8:	bl	1f96c <flatcc_builder_end_buffer@@Base>
   156ec:	b	155e8 <test_typed_table_with_emptystruct@@Base+0x38>
   156f0:	mov	r3, #1
   156f4:	mov	r2, r5
   156f8:	mov	r1, r5
   156fc:	mov	r0, r4
   15700:	bl	2212c <flatcc_builder_table_add@@Base>
   15704:	cmp	r0, #0
   15708:	beq	156e0 <test_typed_table_with_emptystruct@@Base+0x130>
   1570c:	ldr	r7, [pc, #188]	; 157d0 <test_typed_table_with_emptystruct@@Base+0x220>
   15710:	mov	r2, r5
   15714:	add	r7, pc, r7
   15718:	add	r1, r7, #1120	; 0x460
   1571c:	add	r1, r1, #4
   15720:	mov	r0, r4
   15724:	bl	21038 <flatcc_builder_check_required@@Base>
   15728:	cmp	r0, #0
   1572c:	beq	15790 <test_typed_table_with_emptystruct@@Base+0x1e0>
   15730:	mov	r0, r4
   15734:	bl	210e0 <flatcc_builder_end_table@@Base>
   15738:	mov	r1, r0
   1573c:	b	156e4 <test_typed_table_with_emptystruct@@Base+0x134>
   15740:	ldr	r0, [pc, #140]	; 157d4 <test_typed_table_with_emptystruct@@Base+0x224>
   15744:	add	r0, pc, r0
   15748:	bl	1296c <puts@plt>
   1574c:	mvn	r0, #0
   15750:	b	156a4 <test_typed_table_with_emptystruct@@Base+0xf4>
   15754:	ldr	r0, [pc, #124]	; 157d8 <test_typed_table_with_emptystruct@@Base+0x228>
   15758:	add	r0, pc, r0
   1575c:	bl	1296c <puts@plt>
   15760:	mvn	r0, #0
   15764:	b	156a4 <test_typed_table_with_emptystruct@@Base+0xf4>
   15768:	ldr	r0, [pc, #108]	; 157dc <test_typed_table_with_emptystruct@@Base+0x22c>
   1576c:	add	r0, pc, r0
   15770:	bl	1296c <puts@plt>
   15774:	mvn	r0, #0
   15778:	b	156a4 <test_typed_table_with_emptystruct@@Base+0xf4>
   1577c:	ldr	r0, [pc, #92]	; 157e0 <test_typed_table_with_emptystruct@@Base+0x230>
   15780:	add	r0, pc, r0
   15784:	bl	1296c <puts@plt>
   15788:	mvn	r0, #0
   1578c:	b	156a4 <test_typed_table_with_emptystruct@@Base+0xf4>
   15790:	ldr	r1, [pc, #76]	; 157e4 <test_typed_table_with_emptystruct@@Base+0x234>
   15794:	ldr	r0, [pc, #76]	; 157e8 <test_typed_table_with_emptystruct@@Base+0x238>
   15798:	add	r3, r7, #1088	; 0x440
   1579c:	mov	r2, #215	; 0xd7
   157a0:	add	r1, pc, r1
   157a4:	add	r0, pc, r0
   157a8:	bl	12a08 <__assert_fail@plt>
   157ac:	andeq	r0, r1, r4, asr #5
   157b0:	andeq	r3, r2, ip, lsl sl
   157b4:	andeq	r0, r0, r8, rrx
   157b8:			; <UNDEFINED> instruction: 0xffffdf20
   157bc:	andeq	r0, r1, r4, lsl #5
   157c0:	andeq	r0, r1, ip, ror r2
   157c4:	ldrhlt	r3, [sp], #118	; 0x76
   157c8:	ldrdeq	r0, [r1], -r8
   157cc:	andeq	r0, r1, ip, ror r2
   157d0:	muleq	r0, ip, r0
   157d4:	andeq	r0, r1, r8, ror r1
   157d8:	andeq	r0, r1, r4, lsl #3
   157dc:	andeq	r0, r1, ip, lsl #3
   157e0:	andeq	r0, r1, r0, lsr #3
   157e4:			; <UNDEFINED> instruction: 0x0000f8b8
   157e8:	andeq	r0, r1, r8, lsl r0

000157ec <verify_monster@@Base>:
   157ec:	ldr	ip, [pc, #976]	; 15bc4 <verify_monster@@Base+0x3d8>
   157f0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   157f4:	add	ip, pc, ip
   157f8:	vpush	{d8-d9}
   157fc:	add	lr, ip, #1120	; 0x460
   15800:	add	lr, lr, #8
   15804:	mov	r6, r0
   15808:	add	fp, sp, #48	; 0x30
   1580c:	sub	sp, sp, #52	; 0x34
   15810:	ldm	lr!, {r0, r1, r2, r3}
   15814:	add	ip, ip, #1136	; 0x470
   15818:	sub	r4, fp, #72	; 0x48
   1581c:	add	ip, ip, #12
   15820:	mov	r7, r4
   15824:	sub	r5, fp, #88	; 0x58
   15828:	stmia	r7!, {r0, r1, r2, r3}
   1582c:	sub	sp, sp, #48	; 0x30
   15830:	ldm	ip, {r0, r1, r2, r3}
   15834:	ldr	ip, [lr]
   15838:	ldr	lr, [r6, #4]
   1583c:	str	ip, [r7]
   15840:	ldr	ip, [pc, #896]	; 15bc8 <verify_monster@@Base+0x3dc>
   15844:	stm	r5, {r0, r1, r2, r3}
   15848:	cmp	lr, ip
   1584c:	beq	1586c <verify_monster@@Base+0x80>
   15850:	ldr	r0, [pc, #884]	; 15bcc <verify_monster@@Base+0x3e0>
   15854:	add	r0, pc, r0
   15858:	bl	1296c <puts@plt>
   1585c:	mvn	r0, #0
   15860:	sub	sp, fp, #48	; 0x30
   15864:	vpop	{d8-d9}
   15868:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1586c:	ldr	sl, [r6]
   15870:	adds	r8, r6, sl
   15874:	beq	162c0 <verify_monster@@Base+0xad4>
   15878:	ldr	r3, [r6, sl]
   1587c:	sub	r3, r8, r3
   15880:	ldrh	r2, [r3]
   15884:	cmp	r2, #9
   15888:	bls	15aa4 <verify_monster@@Base+0x2b8>
   1588c:	ldrh	r2, [r3, #8]
   15890:	cmp	r2, #0
   15894:	beq	15aa4 <verify_monster@@Base+0x2b8>
   15898:	ldrsh	r2, [r8, r2]
   1589c:	cmp	r2, #80	; 0x50
   158a0:	bne	15aa4 <verify_monster@@Base+0x2b8>
   158a4:	ldrh	r7, [r3, #4]
   158a8:	cmp	r7, #0
   158ac:	beq	16364 <verify_monster@@Base+0xb78>
   158b0:	adds	r7, r8, r7
   158b4:	beq	16364 <verify_monster@@Base+0xb78>
   158b8:	add	r9, sp, #15
   158bc:	tst	r7, #15
   158c0:	bic	r9, r9, #15
   158c4:	bne	15a94 <verify_monster@@Base+0x2a8>
   158c8:	vldr	s16, [pc, #744]	; 15bb8 <verify_monster@@Base+0x3cc>
   158cc:	vldr	s15, [r7, #8]
   158d0:	vcmp.f32	s15, s16
   158d4:	vmrs	APSR_nzcv, fpscr
   158d8:	bne	1625c <verify_monster@@Base+0xa70>
   158dc:	vldr	s17, [pc, #728]	; 15bbc <verify_monster@@Base+0x3d0>
   158e0:	vldr	s15, [r7]
   158e4:	vcmp.f32	s15, s17
   158e8:	vmrs	APSR_nzcv, fpscr
   158ec:	bne	15b90 <verify_monster@@Base+0x3a4>
   158f0:	vldr	s18, [pc, #712]	; 15bc0 <verify_monster@@Base+0x3d4>
   158f4:	vldr	s15, [r7, #4]
   158f8:	vcmp.f32	s15, s18
   158fc:	vmrs	APSR_nzcv, fpscr
   15900:	bne	15b90 <verify_monster@@Base+0x3a4>
   15904:	mov	r2, #32
   15908:	mov	r1, #0
   1590c:	mov	r0, r9
   15910:	bl	129c0 <memset@plt>
   15914:	vldr	d7, [r7, #16]
   15918:	ldrb	r1, [r7, #24]
   1591c:	ldrh	r2, [r7, #26]
   15920:	ldrb	r3, [r7, #28]
   15924:	vcmp.f64	d7, #0.0
   15928:	vstr	s17, [r9]
   1592c:	vstr	s18, [r9, #4]
   15930:	vstr	s16, [r9, #8]
   15934:	vmrs	APSR_nzcv, fpscr
   15938:	strb	r1, [r9, #24]
   1593c:	strh	r2, [r9, #26]
   15940:	strb	r3, [r9, #28]
   15944:	vstr	d7, [r9, #16]
   15948:	bne	15ba4 <verify_monster@@Base+0x3b8>
   1594c:	ldr	r1, [pc, #636]	; 15bd0 <verify_monster@@Base+0x3e4>
   15950:	add	r0, r7, #26
   15954:	add	r1, pc, r1
   15958:	add	r1, r1, #8
   1595c:	mov	r2, #4
   15960:	bl	1293c <memcmp@plt>
   15964:	cmp	r0, #0
   15968:	bne	15ba4 <verify_monster@@Base+0x3b8>
   1596c:	ldr	r6, [r6, sl]
   15970:	sub	r6, r8, r6
   15974:	ldrh	r7, [r6]
   15978:	cmp	r7, #11
   1597c:	bhi	159a4 <verify_monster@@Base+0x1b8>
   15980:	ldr	r3, [pc, #588]	; 15bd4 <verify_monster@@Base+0x3e8>
   15984:	ldr	r1, [pc, #588]	; 15bd8 <verify_monster@@Base+0x3ec>
   15988:	ldr	r0, [pc, #588]	; 15bdc <verify_monster@@Base+0x3f0>
   1598c:	add	r3, pc, r3
   15990:	ldr	r2, [pc, #584]	; 15be0 <verify_monster@@Base+0x3f4>
   15994:	add	r3, r3, #580	; 0x244
   15998:	add	r1, pc, r1
   1599c:	add	r0, pc, r0
   159a0:	bl	12a08 <__assert_fail@plt>
   159a4:	ldrh	r3, [r6, #10]
   159a8:	cmp	r3, #0
   159ac:	beq	15980 <verify_monster@@Base+0x194>
   159b0:	ldr	r9, [r8, r3]
   159b4:	add	r3, r8, r3
   159b8:	add	r9, r9, #4
   159bc:	adds	r9, r3, r9
   159c0:	beq	1609c <verify_monster@@Base+0x8b0>
   159c4:	ldr	r1, [pc, #536]	; 15be4 <verify_monster@@Base+0x3f8>
   159c8:	mov	r0, r9
   159cc:	add	r1, pc, r1
   159d0:	bl	1290c <strcmp@plt>
   159d4:	cmp	r0, #0
   159d8:	bne	1609c <verify_monster@@Base+0x8b0>
   159dc:	ldr	r3, [r9, #-4]
   159e0:	cmp	r3, #9
   159e4:	bne	15fa8 <verify_monster@@Base+0x7bc>
   159e8:	cmp	r7, #17
   159ec:	bhi	15a04 <verify_monster@@Base+0x218>
   159f0:	ldr	r0, [pc, #496]	; 15be8 <verify_monster@@Base+0x3fc>
   159f4:	add	r0, pc, r0
   159f8:	bl	1296c <puts@plt>
   159fc:	mvn	r0, #0
   15a00:	b	15860 <verify_monster@@Base+0x74>
   15a04:	ldrh	r3, [r6, #16]
   15a08:	cmp	r3, #0
   15a0c:	beq	159f0 <verify_monster@@Base+0x204>
   15a10:	ldrsb	r3, [r8, r3]
   15a14:	cmp	r3, #2
   15a18:	bne	159f0 <verify_monster@@Base+0x204>
   15a1c:	ldrh	r3, [r6, #14]
   15a20:	cmp	r3, #0
   15a24:	beq	160c4 <verify_monster@@Base+0x8d8>
   15a28:	ldr	r2, [r8, r3]
   15a2c:	add	r3, r8, r3
   15a30:	add	r2, r2, #4
   15a34:	adds	r3, r3, r2
   15a38:	beq	160c4 <verify_monster@@Base+0x8d8>
   15a3c:	ldr	r2, [r3, #-4]
   15a40:	cmp	r2, #10
   15a44:	subeq	r3, r3, #1
   15a48:	moveq	r1, #0
   15a4c:	bne	160c4 <verify_monster@@Base+0x8d8>
   15a50:	ldrb	r2, [r3, #1]!
   15a54:	cmp	r2, r1
   15a58:	bne	15ab8 <verify_monster@@Base+0x2cc>
   15a5c:	add	r1, r1, #1
   15a60:	cmp	r1, #10
   15a64:	bne	15a50 <verify_monster@@Base+0x264>
   15a68:	ldrh	r1, [r6, #6]
   15a6c:	cmp	r1, #0
   15a70:	beq	15ad4 <verify_monster@@Base+0x2e8>
   15a74:	ldrsh	r3, [r8, r1]
   15a78:	cmp	r3, #150	; 0x96
   15a7c:	bne	160b0 <verify_monster@@Base+0x8c4>
   15a80:	ldr	r0, [pc, #356]	; 15bec <verify_monster@@Base+0x400>
   15a84:	add	r0, pc, r0
   15a88:	bl	1296c <puts@plt>
   15a8c:	mvn	r0, #0
   15a90:	b	15860 <verify_monster@@Base+0x74>
   15a94:	ldr	r0, [pc, #340]	; 15bf0 <verify_monster@@Base+0x404>
   15a98:	add	r0, pc, r0
   15a9c:	bl	1296c <puts@plt>
   15aa0:	b	158c8 <verify_monster@@Base+0xdc>
   15aa4:	ldr	r0, [pc, #328]	; 15bf4 <verify_monster@@Base+0x408>
   15aa8:	add	r0, pc, r0
   15aac:	bl	1296c <puts@plt>
   15ab0:	mvn	r0, #0
   15ab4:	b	15860 <verify_monster@@Base+0x74>
   15ab8:	ldr	r0, [pc, #312]	; 15bf8 <verify_monster@@Base+0x40c>
   15abc:	add	r0, pc, r0
   15ac0:	bl	12918 <printf@plt>
   15ac4:	mvn	r0, #0
   15ac8:	sub	sp, fp, #48	; 0x30
   15acc:	vpop	{d8-d9}
   15ad0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15ad4:	ldrh	r3, [r6, #8]
   15ad8:	cmp	r3, #0
   15adc:	beq	16298 <verify_monster@@Base+0xaac>
   15ae0:	ldrh	r3, [r6, #4]
   15ae4:	cmp	r3, #0
   15ae8:	beq	162ac <verify_monster@@Base+0xac0>
   15aec:	cmp	r7, #23
   15af0:	bhi	15b08 <verify_monster@@Base+0x31c>
   15af4:	ldr	r0, [pc, #256]	; 15bfc <verify_monster@@Base+0x410>
   15af8:	add	r0, pc, r0
   15afc:	bl	1296c <puts@plt>
   15b00:	mvn	r0, #0
   15b04:	b	15860 <verify_monster@@Base+0x74>
   15b08:	ldrh	r3, [r6, #22]
   15b0c:	cmp	r3, #0
   15b10:	beq	15af4 <verify_monster@@Base+0x308>
   15b14:	ldr	r2, [r8, r3]
   15b18:	add	r3, r8, r3
   15b1c:	add	r2, r2, #4
   15b20:	adds	r3, r3, r2
   15b24:	beq	15af4 <verify_monster@@Base+0x308>
   15b28:	ldr	r2, [r3, #-4]
   15b2c:	cmp	r2, #5
   15b30:	moveq	ip, r1
   15b34:	bne	15af4 <verify_monster@@Base+0x308>
   15b38:	cmp	r3, #0
   15b3c:	ldrsh	r2, [r4]
   15b40:	beq	16478 <verify_monster@@Base+0xc8c>
   15b44:	ldrsh	r0, [r3]
   15b48:	cmp	r0, r2
   15b4c:	bne	161a4 <verify_monster@@Base+0x9b8>
   15b50:	ldrsb	r0, [r4, #2]
   15b54:	ldrsb	r2, [r3, #2]
   15b58:	cmp	r2, r0
   15b5c:	bne	161b8 <verify_monster@@Base+0x9cc>
   15b60:	add	r1, r1, #1
   15b64:	cmp	r1, #5
   15b68:	add	r4, r4, #4
   15b6c:	add	r3, r3, #4
   15b70:	bne	15b38 <verify_monster@@Base+0x34c>
   15b74:	cmp	r7, #27
   15b78:	bhi	15cf0 <verify_monster@@Base+0x504>
   15b7c:	ldr	r0, [pc, #124]	; 15c00 <verify_monster@@Base+0x414>
   15b80:	add	r0, pc, r0
   15b84:	bl	1296c <puts@plt>
   15b88:	mvn	r0, #0
   15b8c:	b	15860 <verify_monster@@Base+0x74>
   15b90:	ldr	r0, [pc, #108]	; 15c04 <verify_monster@@Base+0x418>
   15b94:	add	r0, pc, r0
   15b98:	bl	1296c <puts@plt>
   15b9c:	mvn	r0, #0
   15ba0:	b	15860 <verify_monster@@Base+0x74>
   15ba4:	ldr	r0, [pc, #92]	; 15c08 <verify_monster@@Base+0x41c>
   15ba8:	add	r0, pc, r0
   15bac:	bl	1296c <puts@plt>
   15bb0:	mvn	r0, #0
   15bb4:	b	15860 <verify_monster@@Base+0x74>
   15bb8:	subgt	ip, ip, sp, asr #25
   15bbc:	svccc	0x00800000
   15bc0:	andmi	r0, r0, r0
   15bc4:			; <UNDEFINED> instruction: 0x0000efbc
   15bc8:	movtpl	r4, #61261	; 0xef4d
   15bcc:	andeq	r0, r1, ip, lsr r7
   15bd0:	andeq	r3, r2, r8, lsr #14
   15bd4:	andeq	lr, r0, r4, lsr #28
   15bd8:	andeq	pc, r0, r0, lsr #10
   15bdc:	andeq	pc, r0, r8, ror r6	; <UNPREDICTABLE>
   15be0:			; <UNDEFINED> instruction: 0x000002bb
   15be4:	andeq	pc, r0, r8, ror #22
   15be8:	andeq	r0, r1, r8, asr r0
   15bec:	andeq	r0, r1, r8, lsr r5
   15bf0:	strdeq	pc, [r0], -ip
   15bf4:	andeq	pc, r0, r4, lsl #18
   15bf8:	andeq	pc, r0, ip, asr #31
   15bfc:	andeq	pc, r0, r4, ror #31
   15c00:	andeq	pc, r0, ip, lsr #31
   15c04:	andeq	pc, r0, ip, asr #28
   15c08:	andeq	pc, r0, r0, asr lr	; <UNPREDICTABLE>
   15c0c:	muleq	r0, r0, lr
   15c10:	muleq	r0, r8, lr
   15c14:	andeq	pc, r0, r4, lsr #29
   15c18:	andeq	pc, r0, r4, lsl #28
   15c1c:	andeq	pc, r0, ip, lsl lr	; <UNPREDICTABLE>
   15c20:	andeq	pc, r0, r8, lsr #29
   15c24:	strdeq	lr, [r0], -r4
   15c28:	andeq	pc, r0, ip, lsr #29
   15c2c:	andeq	pc, r0, r8, asr #24
   15c30:	muleq	r0, ip, lr
   15c34:	andeq	pc, r0, r4, lsl #21
   15c38:	andeq	pc, r0, r4, ror lr	; <UNPREDICTABLE>
   15c3c:	andeq	pc, r0, ip, lsl lr	; <UNPREDICTABLE>
   15c40:	andeq	pc, r0, r4, lsl lr	; <UNPREDICTABLE>
   15c44:	andeq	pc, r0, r8, lsl #28
   15c48:	andeq	pc, r0, r8, asr #22
   15c4c:	andeq	pc, r0, ip, ror r9	; <UNPREDICTABLE>
   15c50:	strdeq	pc, [r0], -r4
   15c54:	andeq	pc, r0, r4, lsr #19
   15c58:	muleq	r0, r4, sp
   15c5c:	andeq	pc, r0, ip, asr #20
   15c60:	andeq	pc, r0, r4, ror sp	; <UNPREDICTABLE>
   15c64:	andeq	pc, r0, ip, asr r9	; <UNPREDICTABLE>
   15c68:	andeq	pc, r0, r8, asr #18
   15c6c:	andeq	pc, r0, ip, lsr #26
   15c70:	andeq	pc, r0, ip, asr r7	; <UNPREDICTABLE>
   15c74:	andeq	pc, r0, r4, ror fp	; <UNPREDICTABLE>
   15c78:	andeq	pc, r0, ip, lsl ip	; <UNPREDICTABLE>
   15c7c:	andeq	pc, r0, r0, lsr #16
   15c80:	andeq	pc, r0, r0, lsr #2
   15c84:	andeq	pc, r0, r4, rrx
   15c88:	andeq	pc, r0, r0, lsr fp	; <UNPREDICTABLE>
   15c8c:	andeq	pc, r0, r8, lsl sl	; <UNPREDICTABLE>
   15c90:	ldrdeq	pc, [r0], -r8
   15c94:	andeq	pc, r0, r8, lsr sl	; <UNPREDICTABLE>
   15c98:	andeq	pc, r0, r8, ror #20
   15c9c:	andeq	pc, r0, ip, ror #20
   15ca0:	andeq	pc, r0, r4, ror sl	; <UNPREDICTABLE>
   15ca4:	andeq	pc, r0, r8, lsl r6	; <UNPREDICTABLE>
   15ca8:	andeq	pc, r0, r0, asr #16
   15cac:	andeq	pc, r0, r0, lsl #17
   15cb0:	muleq	r0, r8, r8
   15cb4:	andeq	pc, r0, ip, asr #17
   15cb8:	muleq	r0, r0, r8
   15cbc:	andeq	pc, r0, r0, asr #17
   15cc0:	andeq	pc, r0, r4, ror #18
   15cc4:	andeq	pc, r0, ip, lsl r9	; <UNPREDICTABLE>
   15cc8:	andeq	pc, r0, r8, lsr #22
   15ccc:	andeq	pc, r0, r0, lsl #22
   15cd0:	andeq	lr, r0, r0, asr r3
   15cd4:	andeq	lr, r0, ip, asr #20
   15cd8:	andeq	lr, r0, r4, asr #21
   15cdc:	andeq	r0, r0, pc, asr r2
   15ce0:	andeq	lr, r0, r8, lsl r3
   15ce4:	andeq	pc, r0, r4, lsr #13
   15ce8:	andeq	pc, r0, r8, lsl #14
   15cec:	muleq	r0, r6, r2
   15cf0:	ldrh	r4, [r6, #26]
   15cf4:	cmp	r4, #0
   15cf8:	beq	15b7c <verify_monster@@Base+0x390>
   15cfc:	ldr	r9, [r8, r4]
   15d00:	add	r3, r8, r4
   15d04:	add	r9, r9, #4
   15d08:	adds	r4, r3, r9
   15d0c:	str	r3, [fp, #-96]	; 0xffffffa0
   15d10:	beq	15b7c <verify_monster@@Base+0x390>
   15d14:	ldr	r2, [r4, #-4]
   15d18:	cmp	r2, #8
   15d1c:	bne	15b7c <verify_monster@@Base+0x390>
   15d20:	ldr	sl, [r4, #20]
   15d24:	add	sl, sl, #20
   15d28:	adds	sl, r4, sl
   15d2c:	beq	16490 <verify_monster@@Base+0xca4>
   15d30:	mov	r0, sl
   15d34:	bl	137d4 <_start@@Base+0x3e8>
   15d38:	ldr	r1, [pc, #-308]	; 15c0c <verify_monster@@Base+0x420>
   15d3c:	add	r1, pc, r1
   15d40:	bl	1290c <strcmp@plt>
   15d44:	cmp	r0, #0
   15d48:	bne	16378 <verify_monster@@Base+0xb8c>
   15d4c:	ldr	r2, [r4, #4]
   15d50:	add	r2, r2, #4
   15d54:	add	r2, r4, r2
   15d58:	cmp	sl, r2
   15d5c:	bne	16088 <verify_monster@@Base+0x89c>
   15d60:	ldr	r0, [r4, #8]
   15d64:	add	r0, r0, #8
   15d68:	add	r0, r4, r0
   15d6c:	bl	137d4 <_start@@Base+0x3e8>
   15d70:	ldr	r1, [pc, #-360]	; 15c10 <verify_monster@@Base+0x424>
   15d74:	add	r1, pc, r1
   15d78:	mov	sl, r0
   15d7c:	bl	1290c <strcmp@plt>
   15d80:	cmp	r0, #0
   15d84:	bne	1638c <verify_monster@@Base+0xba0>
   15d88:	ldr	r3, [fp, #-96]	; 0xffffffa0
   15d8c:	ldr	sl, [pc, #-384]	; 15c14 <verify_monster@@Base+0x428>
   15d90:	ldr	r0, [r3, r9]
   15d94:	add	sl, pc, sl
   15d98:	add	r0, r4, r0
   15d9c:	bl	137d4 <_start@@Base+0x3e8>
   15da0:	mov	r1, sl
   15da4:	mov	r9, r0
   15da8:	bl	1290c <strcmp@plt>
   15dac:	cmp	r0, #0
   15db0:	bne	163a4 <verify_monster@@Base+0xbb8>
   15db4:	ldr	r0, [r4, #12]
   15db8:	add	r0, r0, #12
   15dbc:	add	r0, r4, r0
   15dc0:	bl	137d4 <_start@@Base+0x3e8>
   15dc4:	ldr	r1, [pc, #-436]	; 15c18 <verify_monster@@Base+0x42c>
   15dc8:	add	r1, pc, r1
   15dcc:	mov	r9, r0
   15dd0:	bl	1290c <strcmp@plt>
   15dd4:	cmp	r0, #0
   15dd8:	bne	163d4 <verify_monster@@Base+0xbe8>
   15ddc:	ldr	r0, [r4, #16]
   15de0:	ldr	r9, [pc, #-460]	; 15c1c <verify_monster@@Base+0x430>
   15de4:	add	r0, r0, #16
   15de8:	add	r0, r4, r0
   15dec:	bl	137d4 <_start@@Base+0x3e8>
   15df0:	add	r9, pc, r9
   15df4:	mov	r1, r9
   15df8:	str	r0, [fp, #-96]	; 0xffffffa0
   15dfc:	bl	1290c <strcmp@plt>
   15e00:	cmp	r0, #0
   15e04:	bne	163bc <verify_monster@@Base+0xbd0>
   15e08:	ldr	r0, [r4, #24]
   15e0c:	add	r0, r0, #24
   15e10:	add	r0, r4, r0
   15e14:	bl	137d4 <_start@@Base+0x3e8>
   15e18:	mov	r1, sl
   15e1c:	str	r0, [fp, #-96]	; 0xffffffa0
   15e20:	bl	1290c <strcmp@plt>
   15e24:	cmp	r0, #0
   15e28:	bne	163ec <verify_monster@@Base+0xc00>
   15e2c:	ldr	r0, [r4, #28]
   15e30:	add	r0, r0, #28
   15e34:	add	r0, r4, r0
   15e38:	bl	137d4 <_start@@Base+0x3e8>
   15e3c:	mov	r1, r9
   15e40:	mov	r4, r0
   15e44:	bl	1290c <strcmp@plt>
   15e48:	cmp	r0, #0
   15e4c:	bne	162fc <verify_monster@@Base+0xb10>
   15e50:	ldrh	r3, [r6, #24]
   15e54:	cmp	r3, #0
   15e58:	beq	162e8 <verify_monster@@Base+0xafc>
   15e5c:	ldr	r2, [r8, r3]
   15e60:	add	r3, r8, r3
   15e64:	add	r2, r2, #4
   15e68:	adds	r4, r3, r2
   15e6c:	beq	162e8 <verify_monster@@Base+0xafc>
   15e70:	ldr	r1, [r4, #-4]
   15e74:	cmp	r1, #3
   15e78:	bne	162e8 <verify_monster@@Base+0xafc>
   15e7c:	ldr	r0, [r3, r2]
   15e80:	ldr	r1, [pc, #-616]	; 15c20 <verify_monster@@Base+0x434>
   15e84:	add	r0, r0, #4
   15e88:	add	r1, pc, r1
   15e8c:	add	r0, r4, r0
   15e90:	bl	1290c <strcmp@plt>
   15e94:	cmp	r0, #0
   15e98:	bne	16418 <verify_monster@@Base+0xc2c>
   15e9c:	ldr	r0, [r4, #4]
   15ea0:	add	r0, r0, #8
   15ea4:	adds	r0, r4, r0
   15ea8:	beq	16314 <verify_monster@@Base+0xb28>
   15eac:	ldr	r2, [r0, #-4]
   15eb0:	cmp	r2, #2
   15eb4:	bne	16314 <verify_monster@@Base+0xb28>
   15eb8:	ldr	r1, [pc, #-668]	; 15c24 <verify_monster@@Base+0x438>
   15ebc:	add	r1, pc, r1
   15ec0:	add	r1, r1, #1168	; 0x490
   15ec4:	add	r1, r1, #12
   15ec8:	bl	1293c <memcmp@plt>
   15ecc:	cmp	r0, #0
   15ed0:	bne	16404 <verify_monster@@Base+0xc18>
   15ed4:	ldr	r0, [r4, #8]
   15ed8:	ldr	r1, [pc, #-696]	; 15c28 <verify_monster@@Base+0x43c>
   15edc:	add	r0, r0, #12
   15ee0:	add	r1, pc, r1
   15ee4:	add	r0, r4, r0
   15ee8:	bl	1290c <strcmp@plt>
   15eec:	subs	r1, r0, #0
   15ef0:	bne	16328 <verify_monster@@Base+0xb3c>
   15ef4:	cmp	r7, #53	; 0x35
   15ef8:	bls	1633c <verify_monster@@Base+0xb50>
   15efc:	ldrh	r3, [r6, #52]	; 0x34
   15f00:	cmp	r3, #0
   15f04:	beq	1633c <verify_monster@@Base+0xb50>
   15f08:	ldr	r2, [r8, r3]
   15f0c:	add	r3, r8, r3
   15f10:	add	r2, r2, #4
   15f14:	adds	r3, r3, r2
   15f18:	beq	16350 <verify_monster@@Base+0xb64>
   15f1c:	ldr	r2, [r3, #-4]
   15f20:	cmp	r2, #4
   15f24:	subeq	r3, r3, #1
   15f28:	bne	16350 <verify_monster@@Base+0xb64>
   15f2c:	ldrb	r0, [r3, #1]!
   15f30:	ldr	r2, [r5, r1, lsl #2]
   15f34:	cmp	r0, r2
   15f38:	bne	16270 <verify_monster@@Base+0xa84>
   15f3c:	add	r1, r1, #1
   15f40:	cmp	r1, #4
   15f44:	bne	15f2c <verify_monster@@Base+0x740>
   15f48:	ldrh	r3, [r6, #18]
   15f4c:	cmp	r3, #0
   15f50:	beq	162d4 <verify_monster@@Base+0xae8>
   15f54:	ldrb	r3, [r8, r3]
   15f58:	cmp	r3, #1
   15f5c:	bne	162d4 <verify_monster@@Base+0xae8>
   15f60:	ldrh	r5, [r6, #20]
   15f64:	cmp	r5, #0
   15f68:	moveq	r9, r5
   15f6c:	ldrne	r3, [r8, r5]
   15f70:	addne	r9, r8, r5
   15f74:	addne	r9, r9, r3
   15f78:	mov	r0, r9
   15f7c:	bl	137d4 <_start@@Base+0x3e8>
   15f80:	ldr	r1, [pc, #-860]	; 15c2c <verify_monster@@Base+0x440>
   15f84:	add	r1, pc, r1
   15f88:	bl	1290c <strcmp@plt>
   15f8c:	cmp	r0, #0
   15f90:	beq	15fbc <verify_monster@@Base+0x7d0>
   15f94:	ldr	r0, [pc, #-876]	; 15c30 <verify_monster@@Base+0x444>
   15f98:	add	r0, pc, r0
   15f9c:	bl	1296c <puts@plt>
   15fa0:	mvn	r0, #0
   15fa4:	b	15860 <verify_monster@@Base+0x74>
   15fa8:	ldr	r0, [pc, #-892]	; 15c34 <verify_monster@@Base+0x448>
   15fac:	add	r0, pc, r0
   15fb0:	bl	1296c <puts@plt>
   15fb4:	mvn	r0, #0
   15fb8:	b	15860 <verify_monster@@Base+0x74>
   15fbc:	ldrh	r7, [r6, #28]
   15fc0:	cmp	r7, #0
   15fc4:	beq	16030 <verify_monster@@Base+0x844>
   15fc8:	ldr	sl, [r8, r7]
   15fcc:	add	r7, r8, r7
   15fd0:	add	r4, r7, sl
   15fd4:	mov	r0, r4
   15fd8:	bl	137d4 <_start@@Base+0x3e8>
   15fdc:	ldr	r1, [pc, #-940]	; 15c38 <verify_monster@@Base+0x44c>
   15fe0:	add	r1, pc, r1
   15fe4:	bl	1290c <strcmp@plt>
   15fe8:	cmp	r0, #0
   15fec:	bne	16048 <verify_monster@@Base+0x85c>
   15ff0:	cmp	r4, #0
   15ff4:	beq	1648c <verify_monster@@Base+0xca0>
   15ff8:	ldr	r3, [r7, sl]
   15ffc:	sub	r3, r4, r3
   16000:	ldrh	r2, [r3]
   16004:	cmp	r2, #19
   16008:	bhi	1605c <verify_monster@@Base+0x870>
   1600c:	cmp	r5, #0
   16010:	ldrne	r1, [r8, r5]
   16014:	addne	r5, r8, r5
   16018:	addne	r5, r5, r1
   1601c:	cmp	r5, r9
   16020:	bne	16284 <verify_monster@@Base+0xa98>
   16024:	cmp	r2, #27
   16028:	bhi	160d8 <verify_monster@@Base+0x8ec>
   1602c:	bl	1379c <_start@@Base+0x3b0>
   16030:	bl	137d4 <_start@@Base+0x3e8>
   16034:	ldr	r1, [pc, #-1024]	; 15c3c <verify_monster@@Base+0x450>
   16038:	add	r1, pc, r1
   1603c:	bl	1290c <strcmp@plt>
   16040:	cmp	r0, #0
   16044:	beq	1648c <verify_monster@@Base+0xca0>
   16048:	ldr	r0, [pc, #-1040]	; 15c40 <verify_monster@@Base+0x454>
   1604c:	add	r0, pc, r0
   16050:	bl	1296c <puts@plt>
   16054:	mvn	r0, #0
   16058:	b	15860 <verify_monster@@Base+0x74>
   1605c:	ldrh	r1, [r3, #18]
   16060:	cmp	r1, #0
   16064:	beq	1600c <verify_monster@@Base+0x820>
   16068:	ldrb	r1, [r4, r1]
   1606c:	cmp	r1, #0
   16070:	beq	1600c <verify_monster@@Base+0x820>
   16074:	ldr	r0, [pc, #-1080]	; 15c44 <verify_monster@@Base+0x458>
   16078:	add	r0, pc, r0
   1607c:	bl	1296c <puts@plt>
   16080:	mvn	r0, #0
   16084:	b	15860 <verify_monster@@Base+0x74>
   16088:	ldr	r0, [pc, #-1096]	; 15c48 <verify_monster@@Base+0x45c>
   1608c:	add	r0, pc, r0
   16090:	bl	1296c <puts@plt>
   16094:	mvn	r0, #0
   16098:	b	15860 <verify_monster@@Base+0x74>
   1609c:	ldr	r0, [pc, #-1112]	; 15c4c <verify_monster@@Base+0x460>
   160a0:	add	r0, pc, r0
   160a4:	bl	1296c <puts@plt>
   160a8:	mvn	r0, #0
   160ac:	b	15860 <verify_monster@@Base+0x74>
   160b0:	ldr	r0, [pc, #-1128]	; 15c50 <verify_monster@@Base+0x464>
   160b4:	add	r0, pc, r0
   160b8:	bl	1296c <puts@plt>
   160bc:	mvn	r0, #0
   160c0:	b	15860 <verify_monster@@Base+0x74>
   160c4:	ldr	r0, [pc, #-1144]	; 15c54 <verify_monster@@Base+0x468>
   160c8:	add	r0, pc, r0
   160cc:	bl	1296c <puts@plt>
   160d0:	mvn	r0, #0
   160d4:	b	15860 <verify_monster@@Base+0x74>
   160d8:	ldrh	r3, [r3, #26]
   160dc:	cmp	r3, #0
   160e0:	beq	1602c <verify_monster@@Base+0x840>
   160e4:	ldr	r2, [r4, r3]
   160e8:	add	r3, r4, r3
   160ec:	add	r2, r2, #4
   160f0:	adds	r3, r3, r2
   160f4:	beq	1602c <verify_monster@@Base+0x840>
   160f8:	ldr	r1, [r3, #-4]
   160fc:	sub	r2, r1, #1
   16100:	cmp	r2, r1
   16104:	add	r1, r3, r2, lsl #2
   16108:	bcs	1602c <verify_monster@@Base+0x840>
   1610c:	ldr	r2, [r3, r2, lsl #2]
   16110:	adds	r3, r1, r2
   16114:	beq	1648c <verify_monster@@Base+0xca0>
   16118:	ldr	r2, [r1, r2]
   1611c:	sub	r2, r3, r2
   16120:	ldrh	r1, [r2]
   16124:	cmp	r1, #19
   16128:	bhi	16140 <verify_monster@@Base+0x954>
   1612c:	ldr	r0, [pc, #-1244]	; 15c58 <verify_monster@@Base+0x46c>
   16130:	add	r0, pc, r0
   16134:	bl	1296c <puts@plt>
   16138:	mvn	r0, #0
   1613c:	b	15860 <verify_monster@@Base+0x74>
   16140:	ldrh	r0, [r2, #18]
   16144:	cmp	r0, #0
   16148:	beq	1612c <verify_monster@@Base+0x940>
   1614c:	ldrb	r0, [r3, r0]
   16150:	cmp	r0, #1
   16154:	bne	1612c <verify_monster@@Base+0x940>
   16158:	cmp	r1, #21
   1615c:	movls	r0, #0
   16160:	bls	16178 <verify_monster@@Base+0x98c>
   16164:	ldrh	r0, [r2, #20]
   16168:	cmp	r0, #0
   1616c:	ldrne	r2, [r3, r0]
   16170:	addne	r3, r3, r0
   16174:	addne	r0, r3, r2
   16178:	bl	137d4 <_start@@Base+0x3e8>
   1617c:	ldr	r1, [pc, #-1320]	; 15c5c <verify_monster@@Base+0x470>
   16180:	add	r1, pc, r1
   16184:	bl	1290c <strcmp@plt>
   16188:	cmp	r0, #0
   1618c:	beq	161cc <verify_monster@@Base+0x9e0>
   16190:	ldr	r0, [pc, #-1336]	; 15c60 <verify_monster@@Base+0x474>
   16194:	add	r0, pc, r0
   16198:	bl	1296c <puts@plt>
   1619c:	mvn	r0, #0
   161a0:	b	15860 <verify_monster@@Base+0x74>
   161a4:	ldr	r0, [pc, #-1352]	; 15c64 <verify_monster@@Base+0x478>
   161a8:	add	r0, pc, r0
   161ac:	bl	12918 <printf@plt>
   161b0:	mvn	r0, #0
   161b4:	b	15860 <verify_monster@@Base+0x74>
   161b8:	ldr	r0, [pc, #-1368]	; 15c68 <verify_monster@@Base+0x47c>
   161bc:	add	r0, pc, r0
   161c0:	bl	12918 <printf@plt>
   161c4:	mvn	r0, #0
   161c8:	b	15860 <verify_monster@@Base+0x74>
   161cc:	ldrh	r3, [r6, #34]	; 0x22
   161d0:	cmp	r3, #0
   161d4:	beq	16440 <verify_monster@@Base+0xc54>
   161d8:	ldrb	r3, [r8, r3]
   161dc:	cmp	r3, #0
   161e0:	bne	16440 <verify_monster@@Base+0xc54>
   161e4:	ldrh	r3, [r6, #32]
   161e8:	cmp	r3, #0
   161ec:	beq	1642c <verify_monster@@Base+0xc40>
   161f0:	ldr	r2, [r8, r3]
   161f4:	add	r8, r8, r3
   161f8:	adds	r3, r8, r2
   161fc:	beq	16454 <verify_monster@@Base+0xc68>
   16200:	ldr	r2, [r8, r2]
   16204:	sub	r3, r3, r2
   16208:	ldrh	r2, [r3]
   1620c:	cmp	r2, #5
   16210:	bls	15860 <verify_monster@@Base+0x74>
   16214:	ldrh	r1, [r3, #4]
   16218:	cmp	r1, #0
   1621c:	bne	16248 <verify_monster@@Base+0xa5c>
   16220:	cmp	r2, #7
   16224:	bls	15860 <verify_monster@@Base+0x74>
   16228:	ldrh	r1, [r3, #6]
   1622c:	cmp	r1, #0
   16230:	bne	16248 <verify_monster@@Base+0xa5c>
   16234:	cmp	r2, #9
   16238:	bls	15860 <verify_monster@@Base+0x74>
   1623c:	ldrh	r3, [r3, #8]
   16240:	cmp	r3, #0
   16244:	beq	15860 <verify_monster@@Base+0x74>
   16248:	ldr	r0, [pc, #-1508]	; 15c6c <verify_monster@@Base+0x480>
   1624c:	add	r0, pc, r0
   16250:	bl	1296c <puts@plt>
   16254:	mvn	r0, #0
   16258:	b	15860 <verify_monster@@Base+0x74>
   1625c:	ldr	r0, [pc, #-1524]	; 15c70 <verify_monster@@Base+0x484>
   16260:	add	r0, pc, r0
   16264:	bl	1296c <puts@plt>
   16268:	mvn	r0, #0
   1626c:	b	15860 <verify_monster@@Base+0x74>
   16270:	ldr	r0, [pc, #-1540]	; 15c74 <verify_monster@@Base+0x488>
   16274:	add	r0, pc, r0
   16278:	bl	12918 <printf@plt>
   1627c:	mvn	r0, #0
   16280:	b	15860 <verify_monster@@Base+0x74>
   16284:	ldr	r0, [pc, #-1556]	; 15c78 <verify_monster@@Base+0x48c>
   16288:	add	r0, pc, r0
   1628c:	bl	1296c <puts@plt>
   16290:	mvn	r0, #0
   16294:	b	15860 <verify_monster@@Base+0x74>
   16298:	ldr	r0, [pc, #-1572]	; 15c7c <verify_monster@@Base+0x490>
   1629c:	add	r0, pc, r0
   162a0:	bl	1296c <puts@plt>
   162a4:	mvn	r0, #0
   162a8:	b	15860 <verify_monster@@Base+0x74>
   162ac:	ldr	r0, [pc, #-1588]	; 15c80 <verify_monster@@Base+0x494>
   162b0:	add	r0, pc, r0
   162b4:	bl	1296c <puts@plt>
   162b8:	mvn	r0, #0
   162bc:	b	15860 <verify_monster@@Base+0x74>
   162c0:	ldr	r0, [pc, #-1604]	; 15c84 <verify_monster@@Base+0x498>
   162c4:	add	r0, pc, r0
   162c8:	bl	1296c <puts@plt>
   162cc:	mvn	r0, #0
   162d0:	b	15860 <verify_monster@@Base+0x74>
   162d4:	ldr	r0, [pc, #-1620]	; 15c88 <verify_monster@@Base+0x49c>
   162d8:	add	r0, pc, r0
   162dc:	bl	1296c <puts@plt>
   162e0:	mvn	r0, #0
   162e4:	b	15860 <verify_monster@@Base+0x74>
   162e8:	ldr	r0, [pc, #-1636]	; 15c8c <verify_monster@@Base+0x4a0>
   162ec:	add	r0, pc, r0
   162f0:	bl	1296c <puts@plt>
   162f4:	mvn	r0, #0
   162f8:	b	15860 <verify_monster@@Base+0x74>
   162fc:	ldr	r0, [pc, #-1652]	; 15c90 <verify_monster@@Base+0x4a4>
   16300:	mov	r1, r4
   16304:	add	r0, pc, r0
   16308:	bl	12918 <printf@plt>
   1630c:	mvn	r0, #0
   16310:	b	15860 <verify_monster@@Base+0x74>
   16314:	ldr	r0, [pc, #-1672]	; 15c94 <verify_monster@@Base+0x4a8>
   16318:	add	r0, pc, r0
   1631c:	bl	12918 <printf@plt>
   16320:	mvn	r0, #0
   16324:	b	15860 <verify_monster@@Base+0x74>
   16328:	ldr	r0, [pc, #-1688]	; 15c98 <verify_monster@@Base+0x4ac>
   1632c:	add	r0, pc, r0
   16330:	bl	1296c <puts@plt>
   16334:	mvn	r0, #0
   16338:	b	15860 <verify_monster@@Base+0x74>
   1633c:	ldr	r0, [pc, #-1704]	; 15c9c <verify_monster@@Base+0x4b0>
   16340:	add	r0, pc, r0
   16344:	bl	1296c <puts@plt>
   16348:	mvn	r0, #0
   1634c:	b	15860 <verify_monster@@Base+0x74>
   16350:	ldr	r0, [pc, #-1720]	; 15ca0 <verify_monster@@Base+0x4b4>
   16354:	add	r0, pc, r0
   16358:	bl	1296c <puts@plt>
   1635c:	mvn	r0, #0
   16360:	b	15860 <verify_monster@@Base+0x74>
   16364:	ldr	r0, [pc, #-1736]	; 15ca4 <verify_monster@@Base+0x4b8>
   16368:	add	r0, pc, r0
   1636c:	bl	1296c <puts@plt>
   16370:	mvn	r0, #0
   16374:	b	15860 <verify_monster@@Base+0x74>
   16378:	ldr	r0, [pc, #-1752]	; 15ca8 <verify_monster@@Base+0x4bc>
   1637c:	add	r0, pc, r0
   16380:	bl	12918 <printf@plt>
   16384:	mvn	r0, #0
   16388:	b	15860 <verify_monster@@Base+0x74>
   1638c:	ldr	r0, [pc, #-1768]	; 15cac <verify_monster@@Base+0x4c0>
   16390:	mov	r1, sl
   16394:	add	r0, pc, r0
   16398:	bl	12918 <printf@plt>
   1639c:	mvn	r0, #0
   163a0:	b	15860 <verify_monster@@Base+0x74>
   163a4:	ldr	r0, [pc, #-1788]	; 15cb0 <verify_monster@@Base+0x4c4>
   163a8:	mov	r1, r9
   163ac:	add	r0, pc, r0
   163b0:	bl	12918 <printf@plt>
   163b4:	mvn	r0, #0
   163b8:	b	15860 <verify_monster@@Base+0x74>
   163bc:	ldr	r0, [pc, #-1808]	; 15cb4 <verify_monster@@Base+0x4c8>
   163c0:	ldr	r1, [fp, #-96]	; 0xffffffa0
   163c4:	add	r0, pc, r0
   163c8:	bl	12918 <printf@plt>
   163cc:	mvn	r0, #0
   163d0:	b	15860 <verify_monster@@Base+0x74>
   163d4:	ldr	r0, [pc, #-1828]	; 15cb8 <verify_monster@@Base+0x4cc>
   163d8:	mov	r1, r9
   163dc:	add	r0, pc, r0
   163e0:	bl	12918 <printf@plt>
   163e4:	mvn	r0, #0
   163e8:	b	15860 <verify_monster@@Base+0x74>
   163ec:	ldr	r0, [pc, #-1848]	; 15cbc <verify_monster@@Base+0x4d0>
   163f0:	ldr	r1, [fp, #-96]	; 0xffffffa0
   163f4:	add	r0, pc, r0
   163f8:	bl	12918 <printf@plt>
   163fc:	mvn	r0, #0
   16400:	b	15860 <verify_monster@@Base+0x74>
   16404:	ldr	r0, [pc, #-1868]	; 15cc0 <verify_monster@@Base+0x4d4>
   16408:	add	r0, pc, r0
   1640c:	bl	1296c <puts@plt>
   16410:	mvn	r0, #0
   16414:	b	15860 <verify_monster@@Base+0x74>
   16418:	ldr	r0, [pc, #-1884]	; 15cc4 <verify_monster@@Base+0x4d8>
   1641c:	add	r0, pc, r0
   16420:	bl	1296c <puts@plt>
   16424:	mvn	r0, #0
   16428:	b	15860 <verify_monster@@Base+0x74>
   1642c:	ldr	r0, [pc, #-1900]	; 15cc8 <verify_monster@@Base+0x4dc>
   16430:	add	r0, pc, r0
   16434:	bl	1296c <puts@plt>
   16438:	mvn	r0, #0
   1643c:	b	15860 <verify_monster@@Base+0x74>
   16440:	ldr	r0, [pc, #-1916]	; 15ccc <verify_monster@@Base+0x4e0>
   16444:	add	r0, pc, r0
   16448:	bl	1296c <puts@plt>
   1644c:	mvn	r0, #0
   16450:	b	15860 <verify_monster@@Base+0x74>
   16454:	ldr	r3, [pc, #-1932]	; 15cd0 <verify_monster@@Base+0x4e4>
   16458:	ldr	r1, [pc, #-1932]	; 15cd4 <verify_monster@@Base+0x4e8>
   1645c:	ldr	r0, [pc, #-1932]	; 15cd8 <verify_monster@@Base+0x4ec>
   16460:	add	r3, pc, r3
   16464:	ldr	r2, [pc, #-1936]	; 15cdc <verify_monster@@Base+0x4f0>
   16468:	add	r3, r3, #1184	; 0x4a0
   1646c:	add	r1, pc, r1
   16470:	add	r0, pc, r0
   16474:	bl	12a08 <__assert_fail@plt>
   16478:	cmp	r2, #0
   1647c:	bne	161a4 <verify_monster@@Base+0x9b8>
   16480:	ldrsb	r0, [r4, #2]
   16484:	mov	r2, ip
   16488:	b	15b58 <verify_monster@@Base+0x36c>
   1648c:	bl	12ca4 <__assert_fail@plt+0x29c>
   16490:	ldr	r3, [pc, #-1976]	; 15ce0 <verify_monster@@Base+0x4f4>
   16494:	ldr	r1, [pc, #-1976]	; 15ce4 <verify_monster@@Base+0x4f8>
   16498:	add	r3, pc, r3
   1649c:	ldr	r0, [pc, #-1980]	; 15ce8 <verify_monster@@Base+0x4fc>
   164a0:	add	r3, r3, #1152	; 0x480
   164a4:	ldr	r2, [pc, #-1984]	; 15cec <verify_monster@@Base+0x500>
   164a8:	add	r3, r3, #12
   164ac:	add	r1, pc, r1
   164b0:	add	r0, pc, r0
   164b4:	bl	12a08 <__assert_fail@plt>

000164b8 <gen_monster@@Base>:
   164b8:	ldr	r2, [pc, #2628]	; 16f04 <gen_monster@@Base+0xa4c>
   164bc:	push	{r4, r5, r6, r7, lr}
   164c0:	add	r2, pc, r2
   164c4:	add	r2, r2, #1216	; 0x4c0
   164c8:	sub	sp, sp, #52	; 0x34
   164cc:	mov	r4, r0
   164d0:	mov	r7, r1
   164d4:	ldmib	r2, {r0, r1, r2}
   164d8:	add	r6, sp, #24
   164dc:	mov	ip, r6
   164e0:	mov	r5, #0
   164e4:	stmia	ip!, {r0, r1}
   164e8:	mov	r1, #1
   164ec:	mov	r0, r4
   164f0:	strh	r2, [ip]
   164f4:	strb	r5, [sp, #12]
   164f8:	strb	r5, [sp, #15]
   164fc:	strb	r1, [sp, #13]
   16500:	strb	r1, [sp, #14]
   16504:	bl	1f0f0 <flatcc_builder_reset@@Base>
   16508:	cmp	r7, r5
   1650c:	beq	16dd4 <gen_monster@@Base+0x91c>
   16510:	ldr	r1, [pc, #2544]	; 16f08 <gen_monster@@Base+0xa50>
   16514:	mov	r2, r5
   16518:	mov	r3, #2
   1651c:	add	r1, pc, r1
   16520:	mov	r0, r4
   16524:	bl	1f8b4 <flatcc_builder_start_buffer@@Base>
   16528:	cmp	r0, r5
   1652c:	bne	1653c <gen_monster@@Base+0x84>
   16530:	mov	r1, #36	; 0x24
   16534:	mov	r0, r4
   16538:	bl	206ec <flatcc_builder_start_table@@Base>
   1653c:	mov	r3, #2
   16540:	mov	r2, r3
   16544:	mov	r1, r3
   16548:	mov	r0, r4
   1654c:	bl	2212c <flatcc_builder_table_add@@Base>
   16550:	mov	r2, #32
   16554:	mov	r1, #0
   16558:	cmp	r0, #0
   1655c:	movne	r3, #80	; 0x50
   16560:	strhne	r3, [r0]
   16564:	mov	r3, #16
   16568:	mov	r0, r4
   1656c:	bl	2212c <flatcc_builder_table_add@@Base>
   16570:	ldr	r3, [pc, #2452]	; 16f0c <gen_monster@@Base+0xa54>
   16574:	ldr	r1, [pc, #2452]	; 16f10 <gen_monster@@Base+0xa58>
   16578:	mov	ip, #1065353216	; 0x3f800000
   1657c:	mov	r2, #1073741824	; 0x40000000
   16580:	add	r1, pc, r1
   16584:	str	ip, [r0]
   16588:	str	r2, [r0, #4]
   1658c:	str	r3, [r0, #8]
   16590:	mov	r0, r4
   16594:	bl	21f90 <flatcc_builder_create_string_str@@Base>
   16598:	subs	r5, r0, #0
   1659c:	beq	165b4 <gen_monster@@Base+0xfc>
   165a0:	mov	r1, #3
   165a4:	mov	r0, r4
   165a8:	bl	2234c <flatcc_builder_table_add_offset@@Base>
   165ac:	cmp	r0, #0
   165b0:	strne	r5, [r0]
   165b4:	mov	r3, #1
   165b8:	mov	r2, r3
   165bc:	mov	r1, #6
   165c0:	mov	r0, r4
   165c4:	bl	2212c <flatcc_builder_table_add@@Base>
   165c8:	mvn	r2, #0
   165cc:	mov	r1, r6
   165d0:	cmp	r0, #0
   165d4:	movne	r3, #2
   165d8:	strbne	r3, [r0]
   165dc:	mov	r3, #1
   165e0:	str	r2, [sp, #4]
   165e4:	str	r3, [sp]
   165e8:	mov	r2, #10
   165ec:	mov	r0, r4
   165f0:	bl	212b0 <flatcc_builder_create_vector@@Base>
   165f4:	subs	r5, r0, #0
   165f8:	beq	16610 <gen_monster@@Base+0x158>
   165fc:	mov	r1, #5
   16600:	mov	r0, r4
   16604:	bl	2234c <flatcc_builder_table_add_offset@@Base>
   16608:	cmp	r0, #0
   1660c:	strne	r5, [r0]
   16610:	mvn	r3, #-1073741824	; 0xc0000000
   16614:	mov	r2, #2
   16618:	mov	r1, #4
   1661c:	mov	r0, r4
   16620:	bl	2048c <flatcc_builder_start_vector@@Base>
   16624:	mov	r1, #1
   16628:	mov	r0, r4
   1662c:	bl	1fc38 <flatcc_builder_extend_vector@@Base>
   16630:	mov	r2, #16
   16634:	mov	r3, #32
   16638:	mov	r1, #2
   1663c:	strh	r2, [r0]
   16640:	strb	r3, [r0, #2]
   16644:	mov	r0, r4
   16648:	bl	1fc38 <flatcc_builder_extend_vector@@Base>
   1664c:	mov	ip, #48	; 0x30
   16650:	mov	r2, #80	; 0x50
   16654:	mov	r3, #96	; 0x60
   16658:	mov	r1, #64	; 0x40
   1665c:	strh	ip, [r0]
   16660:	strh	r2, [r0, #4]
   16664:	strb	r3, [r0, #6]
   16668:	strb	r1, [r0, #2]
   1666c:	mov	r1, #1
   16670:	mov	r0, r4
   16674:	bl	1fc38 <flatcc_builder_extend_vector@@Base>
   16678:	mov	r1, #1
   1667c:	cmp	r0, #0
   16680:	movne	r2, #112	; 0x70
   16684:	mvnne	r3, #127	; 0x7f
   16688:	strhne	r2, [r0]
   1668c:	strbne	r3, [r0, #2]
   16690:	mov	r2, #400	; 0x190
   16694:	mvn	r3, #110	; 0x6e
   16698:	mov	r0, r4
   1669c:	strb	r3, [sp, #10]
   166a0:	strh	r2, [sp, #8]
   166a4:	bl	1fc38 <flatcc_builder_extend_vector@@Base>
   166a8:	mov	r1, #1
   166ac:	cmp	r0, #0
   166b0:	ldrne	r3, [sp, #8]
   166b4:	strne	r3, [r0]
   166b8:	mov	r0, r4
   166bc:	bl	1fc38 <flatcc_builder_extend_vector@@Base>
   166c0:	mov	r1, #1
   166c4:	cmp	r0, #0
   166c8:	ldrne	r3, [sp, #8]
   166cc:	strne	r3, [r0]
   166d0:	mov	r0, r4
   166d4:	bl	1fc38 <flatcc_builder_extend_vector@@Base>
   166d8:	cmp	r0, #0
   166dc:	ldrne	r3, [sp, #8]
   166e0:	strne	r3, [r0]
   166e4:	mov	r0, r4
   166e8:	bl	21524 <flatcc_builder_vector_count@@Base>
   166ec:	cmp	r0, #7
   166f0:	bne	16ea0 <gen_monster@@Base+0x9e8>
   166f4:	mov	r1, #2
   166f8:	mov	r0, r4
   166fc:	bl	20260 <flatcc_builder_truncate_vector@@Base>
   16700:	mov	r0, r4
   16704:	bl	21524 <flatcc_builder_vector_count@@Base>
   16708:	cmp	r0, #5
   1670c:	bne	16ec8 <gen_monster@@Base+0xa10>
   16710:	mov	r0, r4
   16714:	bl	21530 <flatcc_builder_vector_edit@@Base>
   16718:	mov	r2, r0
   1671c:	mov	r0, r4
   16720:	ldrh	r3, [r2, #16]
   16724:	add	r3, r3, #1
   16728:	strh	r3, [r2, #16]
   1672c:	bl	21428 <flatcc_builder_end_vector@@Base>
   16730:	subs	r5, r0, #0
   16734:	beq	1674c <gen_monster@@Base+0x294>
   16738:	mov	r1, #9
   1673c:	mov	r0, r4
   16740:	bl	2234c <flatcc_builder_table_add_offset@@Base>
   16744:	cmp	r0, #0
   16748:	strne	r5, [r0]
   1674c:	mov	r1, #36	; 0x24
   16750:	mov	r0, r4
   16754:	bl	206ec <flatcc_builder_start_table@@Base>
   16758:	ldr	r1, [pc, #1972]	; 16f14 <gen_monster@@Base+0xa5c>
   1675c:	mov	r2, #7
   16760:	add	r1, pc, r1
   16764:	mov	r0, r4
   16768:	bl	21e8c <flatcc_builder_create_string@@Base>
   1676c:	subs	r5, r0, #0
   16770:	bne	16df8 <gen_monster@@Base+0x940>
   16774:	ldr	r1, [pc, #1948]	; 16f18 <gen_monster@@Base+0xa60>
   16778:	mov	r2, #1
   1677c:	add	r1, pc, r1
   16780:	add	r1, r1, #1072	; 0x430
   16784:	add	r1, r1, #12
   16788:	mov	r0, r4
   1678c:	bl	21038 <flatcc_builder_check_required@@Base>
   16790:	cmp	r0, #0
   16794:	beq	16e64 <gen_monster@@Base+0x9ac>
   16798:	mov	r0, r4
   1679c:	bl	210e0 <flatcc_builder_end_table@@Base>
   167a0:	mov	r5, r0
   167a4:	mov	r0, r4
   167a8:	bl	20504 <flatcc_builder_start_offset_vector@@Base>
   167ac:	mov	r1, #2
   167b0:	mov	r0, r4
   167b4:	bl	1fe9c <flatcc_builder_extend_offset_vector@@Base>
   167b8:	mov	r1, #36	; 0x24
   167bc:	str	r5, [r0]
   167c0:	str	r5, [r0, #4]
   167c4:	mov	r0, r4
   167c8:	bl	206ec <flatcc_builder_start_table@@Base>
   167cc:	ldr	r1, [pc, #1864]	; 16f1c <gen_monster@@Base+0xa64>
   167d0:	mov	r2, #30
   167d4:	add	r1, pc, r1
   167d8:	mov	r0, r4
   167dc:	bl	21fb8 <flatcc_builder_create_string_strn@@Base>
   167e0:	subs	r6, r0, #0
   167e4:	beq	167fc <gen_monster@@Base+0x344>
   167e8:	mov	r1, #3
   167ec:	mov	r0, r4
   167f0:	bl	2234c <flatcc_builder_table_add_offset@@Base>
   167f4:	cmp	r0, #0
   167f8:	strne	r6, [r0]
   167fc:	ldr	r6, [pc, #1820]	; 16f20 <gen_monster@@Base+0xa68>
   16800:	mov	r2, #1
   16804:	add	r6, pc, r6
   16808:	add	r1, r6, #1072	; 0x430
   1680c:	add	r1, r1, #12
   16810:	mov	r0, r4
   16814:	bl	21038 <flatcc_builder_check_required@@Base>
   16818:	cmp	r0, #0
   1681c:	beq	16e64 <gen_monster@@Base+0x9ac>
   16820:	mov	r0, r4
   16824:	bl	210e0 <flatcc_builder_end_table@@Base>
   16828:	subs	r1, r0, #0
   1682c:	beq	16dcc <gen_monster@@Base+0x914>
   16830:	mov	r0, r4
   16834:	bl	1ff14 <flatcc_builder_offset_vector_push@@Base>
   16838:	mov	r1, #3
   1683c:	ldr	r7, [r0]
   16840:	mov	r0, r4
   16844:	bl	1fe9c <flatcc_builder_extend_offset_vector@@Base>
   16848:	mov	r1, #1
   1684c:	stm	r0, {r5, r7}
   16850:	mov	r0, r4
   16854:	bl	2031c <flatcc_builder_truncate_offset_vector@@Base>
   16858:	mov	r0, r4
   1685c:	bl	21780 <flatcc_builder_offset_vector_count@@Base>
   16860:	cmp	r0, #5
   16864:	bne	16e68 <gen_monster@@Base+0x9b0>
   16868:	mov	r1, #36	; 0x24
   1686c:	mov	r0, r4
   16870:	bl	206ec <flatcc_builder_start_table@@Base>
   16874:	ldr	r1, [pc, #1704]	; 16f24 <gen_monster@@Base+0xa6c>
   16878:	mov	r2, #8
   1687c:	add	r1, pc, r1
   16880:	mov	r0, r4
   16884:	bl	21fb8 <flatcc_builder_create_string_strn@@Base>
   16888:	subs	r6, r0, #0
   1688c:	beq	168a4 <gen_monster@@Base+0x3ec>
   16890:	mov	r1, #3
   16894:	mov	r0, r4
   16898:	bl	2234c <flatcc_builder_table_add_offset@@Base>
   1689c:	cmp	r0, #0
   168a0:	strne	r6, [r0]
   168a4:	ldr	r6, [pc, #1660]	; 16f28 <gen_monster@@Base+0xa70>
   168a8:	mov	r2, #1
   168ac:	add	r6, pc, r6
   168b0:	add	r1, r6, #1072	; 0x430
   168b4:	add	r1, r1, #12
   168b8:	mov	r0, r4
   168bc:	bl	21038 <flatcc_builder_check_required@@Base>
   168c0:	cmp	r0, #0
   168c4:	beq	16e64 <gen_monster@@Base+0x9ac>
   168c8:	mov	r0, r4
   168cc:	bl	210e0 <flatcc_builder_end_table@@Base>
   168d0:	subs	r1, r0, #0
   168d4:	beq	16dcc <gen_monster@@Base+0x914>
   168d8:	mov	r0, r4
   168dc:	bl	1ff14 <flatcc_builder_offset_vector_push@@Base>
   168e0:	ldr	r3, [r0]
   168e4:	mov	r0, r4
   168e8:	str	r3, [sp, #16]
   168ec:	bl	21780 <flatcc_builder_offset_vector_count@@Base>
   168f0:	cmp	r0, #6
   168f4:	bne	16e84 <gen_monster@@Base+0x9cc>
   168f8:	mov	r0, r4
   168fc:	bl	21778 <flatcc_builder_offset_vector_edit@@Base>
   16900:	mov	r2, #2
   16904:	ldr	r3, [r0, #20]
   16908:	ldr	r1, [r0, #8]
   1690c:	str	r5, [r0, #20]
   16910:	str	r1, [sp, #20]
   16914:	str	r3, [r0]
   16918:	add	r1, sp, #16
   1691c:	mov	r0, r4
   16920:	bl	1ffc4 <flatcc_builder_append_offset_vector@@Base>
   16924:	mov	r0, r4
   16928:	bl	21550 <flatcc_builder_end_offset_vector@@Base>
   1692c:	subs	r6, r0, #0
   16930:	beq	16948 <gen_monster@@Base+0x490>
   16934:	mov	r1, #11
   16938:	mov	r0, r4
   1693c:	bl	2234c <flatcc_builder_table_add_offset@@Base>
   16940:	cmp	r0, #0
   16944:	strne	r6, [r0]
   16948:	ldr	r1, [pc, #1500]	; 16f2c <gen_monster@@Base+0xa74>
   1694c:	mov	r0, r4
   16950:	add	r1, pc, r1
   16954:	bl	21f90 <flatcc_builder_create_string_str@@Base>
   16958:	ldr	r1, [pc, #1488]	; 16f30 <gen_monster@@Base+0xa78>
   1695c:	mov	r2, #2
   16960:	add	r1, pc, r1
   16964:	add	r1, r1, #1168	; 0x490
   16968:	add	r1, r1, #12
   1696c:	str	r0, [sp, #36]	; 0x24
   16970:	mov	r0, r4
   16974:	bl	21e8c <flatcc_builder_create_string@@Base>
   16978:	ldr	r1, [pc, #1460]	; 16f34 <gen_monster@@Base+0xa7c>
   1697c:	add	r1, pc, r1
   16980:	str	r0, [sp, #40]	; 0x28
   16984:	mov	r0, r4
   16988:	bl	21f90 <flatcc_builder_create_string_str@@Base>
   1698c:	mov	r2, #3
   16990:	add	r1, sp, #36	; 0x24
   16994:	str	r0, [sp, #44]	; 0x2c
   16998:	mov	r0, r4
   1699c:	bl	21630 <flatcc_builder_create_offset_vector@@Base>
   169a0:	subs	r6, r0, #0
   169a4:	beq	169bc <gen_monster@@Base+0x504>
   169a8:	mov	r1, #10
   169ac:	mov	r0, r4
   169b0:	bl	2234c <flatcc_builder_table_add_offset@@Base>
   169b4:	cmp	r0, #0
   169b8:	strne	r6, [r0]
   169bc:	mov	r2, #1
   169c0:	mvn	r3, #0
   169c4:	mov	r1, r2
   169c8:	mov	r0, r4
   169cc:	bl	2048c <flatcc_builder_start_vector@@Base>
   169d0:	mov	r2, #1
   169d4:	add	r1, sp, #12
   169d8:	mov	r0, r4
   169dc:	bl	1fdb4 <flatcc_builder_append_vector@@Base>
   169e0:	mov	r2, #3
   169e4:	add	r1, sp, #13
   169e8:	mov	r0, r4
   169ec:	bl	1fdb4 <flatcc_builder_append_vector@@Base>
   169f0:	mov	r0, r4
   169f4:	bl	21428 <flatcc_builder_end_vector@@Base>
   169f8:	subs	r6, r0, #0
   169fc:	beq	16a14 <gen_monster@@Base+0x55c>
   16a00:	mov	r1, #24
   16a04:	mov	r0, r4
   16a08:	bl	2234c <flatcc_builder_table_add_offset@@Base>
   16a0c:	cmp	r0, #0
   16a10:	strne	r6, [r0]
   16a14:	cmp	r5, #0
   16a18:	beq	16e10 <gen_monster@@Base+0x958>
   16a1c:	mov	r3, #1
   16a20:	mov	r2, r3
   16a24:	mov	r1, #7
   16a28:	mov	r0, r4
   16a2c:	bl	2212c <flatcc_builder_table_add@@Base>
   16a30:	subs	r6, r0, #0
   16a34:	beq	16a54 <gen_monster@@Base+0x59c>
   16a38:	mov	r1, #8
   16a3c:	mov	r0, r4
   16a40:	bl	2234c <flatcc_builder_table_add_offset@@Base>
   16a44:	cmp	r0, #0
   16a48:	movne	r3, #1
   16a4c:	strbne	r3, [r6]
   16a50:	strne	r5, [r0]
   16a54:	mov	r1, #36	; 0x24
   16a58:	mov	r0, r4
   16a5c:	bl	206ec <flatcc_builder_start_table@@Base>
   16a60:	ldr	r1, [pc, #1232]	; 16f38 <gen_monster@@Base+0xa80>
   16a64:	mov	r0, r4
   16a68:	add	r1, pc, r1
   16a6c:	bl	21f90 <flatcc_builder_create_string_str@@Base>
   16a70:	subs	r6, r0, #0
   16a74:	beq	16e4c <gen_monster@@Base+0x994>
   16a78:	mov	r1, #3
   16a7c:	mov	r0, r4
   16a80:	bl	2234c <flatcc_builder_table_add_offset@@Base>
   16a84:	cmp	r0, #0
   16a88:	beq	16e4c <gen_monster@@Base+0x994>
   16a8c:	str	r6, [r0]
   16a90:	mov	r0, r4
   16a94:	bl	20504 <flatcc_builder_start_offset_vector@@Base>
   16a98:	mov	r1, #36	; 0x24
   16a9c:	mov	r0, r4
   16aa0:	bl	206ec <flatcc_builder_start_table@@Base>
   16aa4:	cmp	r5, #0
   16aa8:	beq	16ae4 <gen_monster@@Base+0x62c>
   16aac:	mov	r3, #1
   16ab0:	mov	r2, r3
   16ab4:	mov	r1, #7
   16ab8:	mov	r0, r4
   16abc:	bl	2212c <flatcc_builder_table_add@@Base>
   16ac0:	subs	r6, r0, #0
   16ac4:	beq	16ae4 <gen_monster@@Base+0x62c>
   16ac8:	mov	r1, #8
   16acc:	mov	r0, r4
   16ad0:	bl	2234c <flatcc_builder_table_add_offset@@Base>
   16ad4:	cmp	r0, #0
   16ad8:	movne	r3, #1
   16adc:	strbne	r3, [r6]
   16ae0:	strne	r5, [r0]
   16ae4:	ldr	r1, [pc, #1104]	; 16f3c <gen_monster@@Base+0xa84>
   16ae8:	mov	r0, r4
   16aec:	add	r1, pc, r1
   16af0:	bl	21f90 <flatcc_builder_create_string_str@@Base>
   16af4:	subs	r6, r0, #0
   16af8:	beq	16b10 <gen_monster@@Base+0x658>
   16afc:	mov	r1, #3
   16b00:	mov	r0, r4
   16b04:	bl	2234c <flatcc_builder_table_add_offset@@Base>
   16b08:	cmp	r0, #0
   16b0c:	strne	r6, [r0]
   16b10:	ldr	r1, [pc, #1064]	; 16f40 <gen_monster@@Base+0xa88>
   16b14:	mov	r2, #1
   16b18:	add	r1, pc, r1
   16b1c:	add	r1, r1, #1072	; 0x430
   16b20:	add	r1, r1, #12
   16b24:	mov	r0, r4
   16b28:	bl	21038 <flatcc_builder_check_required@@Base>
   16b2c:	cmp	r0, #0
   16b30:	beq	16e64 <gen_monster@@Base+0x9ac>
   16b34:	mov	r0, r4
   16b38:	bl	210e0 <flatcc_builder_end_table@@Base>
   16b3c:	subs	r1, r0, #0
   16b40:	beq	16b4c <gen_monster@@Base+0x694>
   16b44:	mov	r0, r4
   16b48:	bl	1ff14 <flatcc_builder_offset_vector_push@@Base>
   16b4c:	mov	r1, #36	; 0x24
   16b50:	mov	r0, r4
   16b54:	bl	206ec <flatcc_builder_start_table@@Base>
   16b58:	cmp	r5, #0
   16b5c:	beq	16b98 <gen_monster@@Base+0x6e0>
   16b60:	mov	r3, #1
   16b64:	mov	r2, r3
   16b68:	mov	r1, #7
   16b6c:	mov	r0, r4
   16b70:	bl	2212c <flatcc_builder_table_add@@Base>
   16b74:	subs	r6, r0, #0
   16b78:	beq	16b98 <gen_monster@@Base+0x6e0>
   16b7c:	mov	r1, #8
   16b80:	mov	r0, r4
   16b84:	bl	2234c <flatcc_builder_table_add_offset@@Base>
   16b88:	cmp	r0, #0
   16b8c:	movne	r3, #1
   16b90:	strbne	r3, [r6]
   16b94:	strne	r5, [r0]
   16b98:	ldr	r1, [pc, #932]	; 16f44 <gen_monster@@Base+0xa8c>
   16b9c:	mov	r0, r4
   16ba0:	add	r1, pc, r1
   16ba4:	bl	21f90 <flatcc_builder_create_string_str@@Base>
   16ba8:	subs	r6, r0, #0
   16bac:	beq	16bc4 <gen_monster@@Base+0x70c>
   16bb0:	mov	r1, #3
   16bb4:	mov	r0, r4
   16bb8:	bl	2234c <flatcc_builder_table_add_offset@@Base>
   16bbc:	cmp	r0, #0
   16bc0:	strne	r6, [r0]
   16bc4:	ldr	r1, [pc, #892]	; 16f48 <gen_monster@@Base+0xa90>
   16bc8:	mov	r2, #1
   16bcc:	add	r1, pc, r1
   16bd0:	add	r1, r1, #1072	; 0x430
   16bd4:	add	r1, r1, #12
   16bd8:	mov	r0, r4
   16bdc:	bl	21038 <flatcc_builder_check_required@@Base>
   16be0:	cmp	r0, #0
   16be4:	beq	16e64 <gen_monster@@Base+0x9ac>
   16be8:	mov	r0, r4
   16bec:	bl	210e0 <flatcc_builder_end_table@@Base>
   16bf0:	subs	r1, r0, #0
   16bf4:	beq	16c00 <gen_monster@@Base+0x748>
   16bf8:	mov	r0, r4
   16bfc:	bl	1ff14 <flatcc_builder_offset_vector_push@@Base>
   16c00:	mov	r1, #36	; 0x24
   16c04:	mov	r0, r4
   16c08:	bl	206ec <flatcc_builder_start_table@@Base>
   16c0c:	mov	r1, #8
   16c10:	mov	r0, r4
   16c14:	bl	2234c <flatcc_builder_table_add_offset@@Base>
   16c18:	ldr	r1, [pc, #812]	; 16f4c <gen_monster@@Base+0xa94>
   16c1c:	add	r1, pc, r1
   16c20:	cmp	r0, #0
   16c24:	strne	r5, [r0]
   16c28:	mov	r0, r4
   16c2c:	bl	21f90 <flatcc_builder_create_string_str@@Base>
   16c30:	subs	r5, r0, #0
   16c34:	beq	16c4c <gen_monster@@Base+0x794>
   16c38:	mov	r1, #3
   16c3c:	mov	r0, r4
   16c40:	bl	2234c <flatcc_builder_table_add_offset@@Base>
   16c44:	cmp	r0, #0
   16c48:	strne	r5, [r0]
   16c4c:	mov	r3, #1
   16c50:	mov	r2, r3
   16c54:	mov	r1, #7
   16c58:	mov	r0, r4
   16c5c:	bl	2212c <flatcc_builder_table_add@@Base>
   16c60:	ldr	r1, [pc, #744]	; 16f50 <gen_monster@@Base+0xa98>
   16c64:	mov	r2, #1
   16c68:	add	r1, pc, r1
   16c6c:	add	r1, r1, #1072	; 0x430
   16c70:	add	r1, r1, #12
   16c74:	cmp	r0, #0
   16c78:	movne	r3, #1
   16c7c:	strbne	r3, [r0]
   16c80:	mov	r0, r4
   16c84:	bl	21038 <flatcc_builder_check_required@@Base>
   16c88:	cmp	r0, #0
   16c8c:	beq	16e64 <gen_monster@@Base+0x9ac>
   16c90:	mov	r0, r4
   16c94:	bl	210e0 <flatcc_builder_end_table@@Base>
   16c98:	subs	r1, r0, #0
   16c9c:	beq	16ca8 <gen_monster@@Base+0x7f0>
   16ca0:	mov	r0, r4
   16ca4:	bl	1ff14 <flatcc_builder_offset_vector_push@@Base>
   16ca8:	mov	r0, r4
   16cac:	bl	21550 <flatcc_builder_end_offset_vector@@Base>
   16cb0:	subs	r5, r0, #0
   16cb4:	beq	16ccc <gen_monster@@Base+0x814>
   16cb8:	mov	r1, #11
   16cbc:	mov	r0, r4
   16cc0:	bl	2234c <flatcc_builder_table_add_offset@@Base>
   16cc4:	cmp	r0, #0
   16cc8:	strne	r5, [r0]
   16ccc:	ldr	r1, [pc, #640]	; 16f54 <gen_monster@@Base+0xa9c>
   16cd0:	mov	r2, #1
   16cd4:	add	r1, pc, r1
   16cd8:	add	r1, r1, #1072	; 0x430
   16cdc:	add	r1, r1, #12
   16ce0:	mov	r0, r4
   16ce4:	bl	21038 <flatcc_builder_check_required@@Base>
   16ce8:	cmp	r0, #0
   16cec:	beq	16e64 <gen_monster@@Base+0x9ac>
   16cf0:	mov	r0, r4
   16cf4:	bl	210e0 <flatcc_builder_end_table@@Base>
   16cf8:	subs	r5, r0, #0
   16cfc:	beq	16d14 <gen_monster@@Base+0x85c>
   16d00:	mov	r1, #12
   16d04:	mov	r0, r4
   16d08:	bl	2234c <flatcc_builder_table_add_offset@@Base>
   16d0c:	cmp	r0, #0
   16d10:	strne	r5, [r0]
   16d14:	mov	r3, #1
   16d18:	mov	r2, r3
   16d1c:	mov	r1, #15
   16d20:	mov	r0, r4
   16d24:	bl	2212c <flatcc_builder_table_add@@Base>
   16d28:	mov	r1, #3
   16d2c:	cmp	r0, #0
   16d30:	movne	r3, #0
   16d34:	strbne	r3, [r0]
   16d38:	mov	r0, r4
   16d3c:	bl	206ec <flatcc_builder_start_table@@Base>
   16d40:	ldr	r1, [pc, #528]	; 16f58 <gen_monster@@Base+0xaa0>
   16d44:	mov	r2, #0
   16d48:	add	r1, pc, r1
   16d4c:	add	r1, r1, #1232	; 0x4d0
   16d50:	add	r1, r1, #12
   16d54:	mov	r0, r4
   16d58:	bl	21038 <flatcc_builder_check_required@@Base>
   16d5c:	cmp	r0, #0
   16d60:	beq	16ec4 <gen_monster@@Base+0xa0c>
   16d64:	mov	r0, r4
   16d68:	bl	210e0 <flatcc_builder_end_table@@Base>
   16d6c:	subs	r5, r0, #0
   16d70:	beq	16d88 <gen_monster@@Base+0x8d0>
   16d74:	mov	r1, #14
   16d78:	mov	r0, r4
   16d7c:	bl	2234c <flatcc_builder_table_add_offset@@Base>
   16d80:	cmp	r0, #0
   16d84:	strne	r5, [r0]
   16d88:	ldr	r1, [pc, #460]	; 16f5c <gen_monster@@Base+0xaa4>
   16d8c:	mov	r2, #1
   16d90:	add	r1, pc, r1
   16d94:	add	r1, r1, #1072	; 0x430
   16d98:	add	r1, r1, #12
   16d9c:	mov	r0, r4
   16da0:	bl	21038 <flatcc_builder_check_required@@Base>
   16da4:	cmp	r0, #0
   16da8:	beq	16e64 <gen_monster@@Base+0x9ac>
   16dac:	mov	r0, r4
   16db0:	bl	210e0 <flatcc_builder_end_table@@Base>
   16db4:	mov	r1, r0
   16db8:	mov	r0, r4
   16dbc:	bl	1f96c <flatcc_builder_end_buffer@@Base>
   16dc0:	mov	r0, #0
   16dc4:	add	sp, sp, #52	; 0x34
   16dc8:	pop	{r4, r5, r6, r7, pc}
   16dcc:	ldr	r3, [r1]
   16dd0:	udf	#0
   16dd4:	ldr	r1, [pc, #388]	; 16f60 <gen_monster@@Base+0xaa8>
   16dd8:	mov	r3, r7
   16ddc:	mov	r2, r7
   16de0:	add	r1, pc, r1
   16de4:	mov	r0, r4
   16de8:	bl	1f8b4 <flatcc_builder_start_buffer@@Base>
   16dec:	cmp	r0, #0
   16df0:	beq	16530 <gen_monster@@Base+0x78>
   16df4:	b	1653c <gen_monster@@Base+0x84>
   16df8:	mov	r1, #3
   16dfc:	mov	r0, r4
   16e00:	bl	2234c <flatcc_builder_table_add_offset@@Base>
   16e04:	cmp	r0, #0
   16e08:	strne	r5, [r0]
   16e0c:	b	16774 <gen_monster@@Base+0x2bc>
   16e10:	mov	r1, #36	; 0x24
   16e14:	mov	r0, r4
   16e18:	bl	206ec <flatcc_builder_start_table@@Base>
   16e1c:	ldr	r1, [pc, #320]	; 16f64 <gen_monster@@Base+0xaac>
   16e20:	mov	r0, r4
   16e24:	add	r1, pc, r1
   16e28:	bl	21f90 <flatcc_builder_create_string_str@@Base>
   16e2c:	subs	r6, r0, #0
   16e30:	bne	16eec <gen_monster@@Base+0xa34>
   16e34:	mov	r0, r4
   16e38:	bl	20504 <flatcc_builder_start_offset_vector@@Base>
   16e3c:	mov	r1, #36	; 0x24
   16e40:	mov	r0, r4
   16e44:	bl	206ec <flatcc_builder_start_table@@Base>
   16e48:	b	16ae4 <gen_monster@@Base+0x62c>
   16e4c:	mov	r0, r4
   16e50:	bl	20504 <flatcc_builder_start_offset_vector@@Base>
   16e54:	mov	r1, #36	; 0x24
   16e58:	mov	r0, r4
   16e5c:	bl	206ec <flatcc_builder_start_table@@Base>
   16e60:	b	16aac <gen_monster@@Base+0x5f4>
   16e64:	bl	130f4 <__assert_fail@plt+0x6ec>
   16e68:	ldr	r1, [pc, #248]	; 16f68 <gen_monster@@Base+0xab0>
   16e6c:	ldr	r0, [pc, #248]	; 16f6c <gen_monster@@Base+0xab4>
   16e70:	add	r3, r6, #1232	; 0x4d0
   16e74:	ldr	r2, [pc, #244]	; 16f70 <gen_monster@@Base+0xab8>
   16e78:	add	r1, pc, r1
   16e7c:	add	r0, pc, r0
   16e80:	bl	12a08 <__assert_fail@plt>
   16e84:	ldr	r1, [pc, #232]	; 16f74 <gen_monster@@Base+0xabc>
   16e88:	ldr	r0, [pc, #232]	; 16f78 <gen_monster@@Base+0xac0>
   16e8c:	add	r3, r6, #1232	; 0x4d0
   16e90:	ldr	r2, [pc, #228]	; 16f7c <gen_monster@@Base+0xac4>
   16e94:	add	r1, pc, r1
   16e98:	add	r0, pc, r0
   16e9c:	bl	12a08 <__assert_fail@plt>
   16ea0:	ldr	r3, [pc, #216]	; 16f80 <gen_monster@@Base+0xac8>
   16ea4:	ldr	r1, [pc, #216]	; 16f84 <gen_monster@@Base+0xacc>
   16ea8:	ldr	r0, [pc, #216]	; 16f88 <gen_monster@@Base+0xad0>
   16eac:	add	r3, pc, r3
   16eb0:	ldr	r2, [pc, #212]	; 16f8c <gen_monster@@Base+0xad4>
   16eb4:	add	r3, r3, #1232	; 0x4d0
   16eb8:	add	r1, pc, r1
   16ebc:	add	r0, pc, r0
   16ec0:	bl	12a08 <__assert_fail@plt>
   16ec4:	bl	13128 <__assert_fail@plt+0x720>
   16ec8:	ldr	r3, [pc, #192]	; 16f90 <gen_monster@@Base+0xad8>
   16ecc:	ldr	r1, [pc, #192]	; 16f94 <gen_monster@@Base+0xadc>
   16ed0:	ldr	r0, [pc, #192]	; 16f98 <gen_monster@@Base+0xae0>
   16ed4:	add	r3, pc, r3
   16ed8:	ldr	r2, [pc, #188]	; 16f9c <gen_monster@@Base+0xae4>
   16edc:	add	r3, r3, #1232	; 0x4d0
   16ee0:	add	r1, pc, r1
   16ee4:	add	r0, pc, r0
   16ee8:	bl	12a08 <__assert_fail@plt>
   16eec:	mov	r1, #3
   16ef0:	mov	r0, r4
   16ef4:	bl	2234c <flatcc_builder_table_add_offset@@Base>
   16ef8:	cmp	r0, #0
   16efc:	bne	16a8c <gen_monster@@Base+0x5d4>
   16f00:	b	16e34 <gen_monster@@Base+0x97c>
   16f04:	strdeq	lr, [r0], -r0
   16f08:	strdeq	lr, [r0], -r0
   16f0c:	subgt	ip, ip, sp, asr #25
   16f10:			; <UNDEFINED> instruction: 0x0000efb4
   16f14:	andeq	pc, r0, ip, ror #8
   16f18:	andeq	lr, r0, r4, lsr r0
   16f1c:	andeq	pc, r0, r8, lsr r4	; <UNPREDICTABLE>
   16f20:	andeq	sp, r0, ip, lsr #31
   16f24:	ldrdeq	pc, [r0], -r8
   16f28:	andeq	sp, r0, r4, lsl #30
   16f2c:	andeq	pc, r0, r0, ror #7
   16f30:	andeq	sp, r0, r0, asr lr
   16f34:	andeq	pc, r0, r0, lsl r4	; <UNPREDICTABLE>
   16f38:	andeq	pc, r0, ip, ror #7
   16f3c:			; <UNDEFINED> instruction: 0x0000f5b8
   16f40:	muleq	r0, r8, ip
   16f44:	andeq	pc, r0, r4, lsl #10
   16f48:	andeq	sp, r0, r4, ror #23
   16f4c:	andeq	pc, r0, r8, lsl #9
   16f50:	andeq	sp, r0, r8, asr #22
   16f54:	ldrdeq	sp, [r0], -ip
   16f58:	andeq	sp, r0, r8, ror #20
   16f5c:	andeq	sp, r0, r0, lsr #20
   16f60:	andeq	lr, r0, ip, lsr #12
   16f64:	andeq	pc, r0, r0, lsr r0	; <UNPREDICTABLE>
   16f68:	ldrdeq	lr, [r0], -r8
   16f6c:	andeq	pc, r0, r4, lsr #3
   16f70:	muleq	r0, fp, r3
   16f74:			; <UNDEFINED> instruction: 0x0000ecbc
   16f78:	ldrdeq	pc, [r0], -r8
   16f7c:	andeq	r0, r0, r1, lsr #7
   16f80:	andeq	sp, r0, r4, lsl #18
   16f84:	muleq	r0, r8, ip
   16f88:	andeq	pc, r0, r4, lsl r1	; <UNPREDICTABLE>
   16f8c:	andeq	r0, r0, r1, ror r3
   16f90:	ldrdeq	sp, [r0], -ip
   16f94:	andeq	lr, r0, r0, ror ip
   16f98:	andeq	pc, r0, r4, lsl r1	; <UNPREDICTABLE>
   16f9c:	andeq	r0, r0, r3, ror r3

00016fa0 <test_monster@@Base>:
   16fa0:	push	{r4, r5, lr}
   16fa4:	mov	r1, #0
   16fa8:	sub	sp, sp, #12
   16fac:	mov	r4, r0
   16fb0:	bl	164b8 <gen_monster@@Base>
   16fb4:	mov	r0, r4
   16fb8:	add	r1, sp, #4
   16fbc:	bl	22a08 <flatcc_builder_finalize_aligned_buffer@@Base>
   16fc0:	ldr	r3, [pc, #132]	; 1704c <test_monster@@Base+0xac>
   16fc4:	ldr	r2, [sp, #4]
   16fc8:	add	r3, pc, r3
   16fcc:	mov	r4, r0
   16fd0:	ldr	r0, [pc, #120]	; 17050 <test_monster@@Base+0xb0>
   16fd4:	mov	r1, r4
   16fd8:	ldr	ip, [r3, r0]
   16fdc:	ldr	r0, [pc, #112]	; 17054 <test_monster@@Base+0xb4>
   16fe0:	ldr	r3, [ip]
   16fe4:	add	r0, pc, r0
   16fe8:	bl	13540 <_start@@Base+0x154>
   16fec:	ldr	r3, [pc, #100]	; 17058 <test_monster@@Base+0xb8>
   16ff0:	ldr	r2, [pc, #100]	; 1705c <test_monster@@Base+0xbc>
   16ff4:	mov	r0, r4
   16ff8:	add	r3, pc, r3
   16ffc:	add	r2, pc, r2
   17000:	ldr	r1, [sp, #4]
   17004:	bl	23edc <flatcc_verify_table_as_root@@Base>
   17008:	cmp	r0, #0
   1700c:	bne	17030 <test_monster@@Base+0x90>
   17010:	mov	r0, r4
   17014:	bl	157ec <verify_monster@@Base>
   17018:	mov	r5, r0
   1701c:	mov	r0, r4
   17020:	bl	22b10 <flatcc_builder_aligned_free@@Base>
   17024:	mov	r0, r5
   17028:	add	sp, sp, #12
   1702c:	pop	{r4, r5, pc}
   17030:	bl	23150 <flatcc_verify_error_string@@Base>
   17034:	mvn	r5, #0
   17038:	mov	r1, r0
   1703c:	ldr	r0, [pc, #28]	; 17060 <test_monster@@Base+0xc0>
   17040:	add	r0, pc, r0
   17044:	bl	12918 <printf@plt>
   17048:	b	17024 <test_monster@@Base+0x84>
   1704c:	andeq	r2, r2, r0, lsr r0
   17050:	andeq	r0, r0, r8, rrx
   17054:	strdeq	lr, [r0], -r4
   17058:			; <UNDEFINED> instruction: 0xffffcc14
   1705c:	andeq	lr, r0, r0, lsl r4
   17060:	andeq	pc, r0, r0, ror r0	; <UNPREDICTABLE>

00017064 <test_monster_with_size@@Base>:
   17064:	push	{r4, r5, lr}
   17068:	mov	r1, #1
   1706c:	sub	sp, sp, #12
   17070:	mov	r4, r0
   17074:	bl	164b8 <gen_monster@@Base>
   17078:	mov	r0, r4
   1707c:	add	r1, sp, #4
   17080:	bl	22a08 <flatcc_builder_finalize_aligned_buffer@@Base>
   17084:	ldr	r3, [pc, #224]	; 1716c <test_monster_with_size@@Base+0x108>
   17088:	ldr	r2, [sp, #4]
   1708c:	add	r3, pc, r3
   17090:	mov	r4, r0
   17094:	ldr	r0, [pc, #212]	; 17170 <test_monster_with_size@@Base+0x10c>
   17098:	mov	r1, r4
   1709c:	ldr	ip, [r3, r0]
   170a0:	ldr	r0, [pc, #204]	; 17174 <test_monster_with_size@@Base+0x110>
   170a4:	ldr	r3, [ip]
   170a8:	add	r0, pc, r0
   170ac:	bl	13540 <_start@@Base+0x154>
   170b0:	tst	r4, #15
   170b4:	bne	17148 <test_monster_with_size@@Base+0xe4>
   170b8:	mov	r5, r4
   170bc:	ldr	r2, [sp, #4]
   170c0:	ldr	r3, [r5], #4
   170c4:	sub	r1, r2, #4
   170c8:	cmp	r1, r3
   170cc:	bne	17110 <test_monster_with_size@@Base+0xac>
   170d0:	ldr	r3, [pc, #160]	; 17178 <test_monster_with_size@@Base+0x114>
   170d4:	ldr	r2, [pc, #160]	; 1717c <test_monster_with_size@@Base+0x118>
   170d8:	add	r3, pc, r3
   170dc:	add	r2, pc, r2
   170e0:	mov	r0, r5
   170e4:	bl	23edc <flatcc_verify_table_as_root@@Base>
   170e8:	cmp	r0, #0
   170ec:	bne	1712c <test_monster_with_size@@Base+0xc8>
   170f0:	mov	r0, r5
   170f4:	bl	157ec <verify_monster@@Base>
   170f8:	mov	r5, r0
   170fc:	mov	r0, r4
   17100:	bl	22b10 <flatcc_builder_aligned_free@@Base>
   17104:	mov	r0, r5
   17108:	add	sp, sp, #12
   1710c:	pop	{r4, r5, pc}
   17110:	ldr	r0, [pc, #104]	; 17180 <test_monster_with_size@@Base+0x11c>
   17114:	mov	r2, r1
   17118:	add	r0, pc, r0
   1711c:	mov	r1, r3
   17120:	bl	12918 <printf@plt>
   17124:	mvn	r5, #0
   17128:	b	17104 <test_monster_with_size@@Base+0xa0>
   1712c:	bl	23150 <flatcc_verify_error_string@@Base>
   17130:	mvn	r5, #0
   17134:	mov	r1, r0
   17138:	ldr	r0, [pc, #68]	; 17184 <test_monster_with_size@@Base+0x120>
   1713c:	add	r0, pc, r0
   17140:	bl	12918 <printf@plt>
   17144:	b	17104 <test_monster_with_size@@Base+0xa0>
   17148:	ldr	r0, [pc, #56]	; 17188 <test_monster_with_size@@Base+0x124>
   1714c:	mvn	r5, #0
   17150:	add	r0, pc, r0
   17154:	bl	12918 <printf@plt>
   17158:	ldr	r0, [pc, #44]	; 1718c <test_monster_with_size@@Base+0x128>
   1715c:	mov	r1, r4
   17160:	add	r0, pc, r0
   17164:	bl	12918 <printf@plt>
   17168:	b	17104 <test_monster_with_size@@Base+0xa0>
   1716c:	andeq	r1, r2, ip, ror #30
   17170:	andeq	r0, r0, r8, rrx
   17174:	andeq	pc, r0, r4, lsr r0	; <UNPREDICTABLE>
   17178:			; <UNDEFINED> instruction: 0xffffcb34
   1717c:	andeq	lr, r0, r0, lsr r3
   17180:	andeq	pc, r0, r4, asr #32
   17184:	andeq	pc, r0, r8, asr r0	; <UNPREDICTABLE>
   17188:	andeq	lr, r0, r4, lsr #31
   1718c:	andeq	lr, r0, r8, ror #31

00017190 <test_string@@Base>:
   17190:	push	{r4, r5, r6, lr}
   17194:	mov	r4, r0
   17198:	bl	1f0f0 <flatcc_builder_reset@@Base>
   1719c:	ldr	r1, [pc, #672]	; 17444 <test_string@@Base+0x2b4>
   171a0:	mov	r3, #0
   171a4:	mov	r0, r4
   171a8:	mov	r2, r3
   171ac:	add	r1, pc, r1
   171b0:	bl	1f8b4 <flatcc_builder_start_buffer@@Base>
   171b4:	cmp	r0, #0
   171b8:	bne	171c8 <test_string@@Base+0x38>
   171bc:	mov	r1, #36	; 0x24
   171c0:	mov	r0, r4
   171c4:	bl	206ec <flatcc_builder_start_table@@Base>
   171c8:	mov	r0, r4
   171cc:	bl	2056c <flatcc_builder_start_string@@Base>
   171d0:	mov	r1, #3
   171d4:	mov	r0, r4
   171d8:	bl	2009c <flatcc_builder_extend_string@@Base>
   171dc:	mov	r1, #49	; 0x31
   171e0:	mov	r2, #50	; 0x32
   171e4:	mov	r3, #51	; 0x33
   171e8:	strb	r1, [r0]
   171ec:	ldr	r1, [pc, #596]	; 17448 <test_string@@Base+0x2b8>
   171f0:	strb	r2, [r0, #1]
   171f4:	strb	r3, [r0, #2]
   171f8:	add	r1, pc, r1
   171fc:	mov	r0, r4
   17200:	bl	20200 <flatcc_builder_append_string_str@@Base>
   17204:	mov	r0, r4
   17208:	bl	22120 <flatcc_builder_string_len@@Base>
   1720c:	cmp	r0, #4
   17210:	bne	17420 <test_string@@Base+0x290>
   17214:	ldr	r1, [pc, #560]	; 1744c <test_string@@Base+0x2bc>
   17218:	mov	r2, #30
   1721c:	add	r1, pc, r1
   17220:	mov	r0, r4
   17224:	bl	20228 <flatcc_builder_append_string_strn@@Base>
   17228:	mov	r0, r4
   1722c:	bl	22120 <flatcc_builder_string_len@@Base>
   17230:	cmp	r0, #8
   17234:	bne	173fc <test_string@@Base+0x26c>
   17238:	ldr	r1, [pc, #528]	; 17450 <test_string@@Base+0x2c0>
   1723c:	mov	r2, #2
   17240:	add	r1, pc, r1
   17244:	mov	r0, r4
   17248:	bl	2013c <flatcc_builder_append_string@@Base>
   1724c:	mov	r0, r4
   17250:	bl	22120 <flatcc_builder_string_len@@Base>
   17254:	cmp	r0, #10
   17258:	bne	173d8 <test_string@@Base+0x248>
   1725c:	mov	r1, #3
   17260:	mov	r0, r4
   17264:	bl	203d8 <flatcc_builder_truncate_string@@Base>
   17268:	mov	r0, r4
   1726c:	bl	22120 <flatcc_builder_string_len@@Base>
   17270:	cmp	r0, #7
   17274:	bne	173b4 <test_string@@Base+0x224>
   17278:	mov	r0, r4
   1727c:	bl	22118 <flatcc_builder_string_edit@@Base>
   17280:	mov	r3, #46	; 0x2e
   17284:	strb	r3, [r0, #4]
   17288:	mov	r0, r4
   1728c:	bl	21ff0 <flatcc_builder_end_string@@Base>
   17290:	subs	r5, r0, #0
   17294:	beq	172ac <test_string@@Base+0x11c>
   17298:	mov	r1, #3
   1729c:	mov	r0, r4
   172a0:	bl	2234c <flatcc_builder_table_add_offset@@Base>
   172a4:	cmp	r0, #0
   172a8:	strne	r5, [r0]
   172ac:	ldr	r5, [pc, #416]	; 17454 <test_string@@Base+0x2c4>
   172b0:	mov	r2, #1
   172b4:	add	r5, pc, r5
   172b8:	add	r1, r5, #1072	; 0x430
   172bc:	add	r1, r1, #12
   172c0:	mov	r0, r4
   172c4:	bl	21038 <flatcc_builder_check_required@@Base>
   172c8:	cmp	r0, #0
   172cc:	beq	173b0 <test_string@@Base+0x220>
   172d0:	mov	r0, r4
   172d4:	bl	210e0 <flatcc_builder_end_table@@Base>
   172d8:	mov	r1, r0
   172dc:	mov	r0, r4
   172e0:	bl	1f96c <flatcc_builder_end_buffer@@Base>
   172e4:	mov	r0, r4
   172e8:	mov	r1, #0
   172ec:	bl	228b4 <flatcc_builder_get_direct_buffer@@Base>
   172f0:	cmp	r0, #0
   172f4:	beq	17394 <test_string@@Base+0x204>
   172f8:	ldr	r3, [pc, #344]	; 17458 <test_string@@Base+0x2c8>
   172fc:	ldr	r2, [r0, #4]
   17300:	cmp	r2, r3
   17304:	beq	1730c <test_string@@Base+0x17c>
   17308:	bl	12d14 <__assert_fail@plt+0x30c>
   1730c:	ldr	r2, [r0]
   17310:	adds	r3, r0, r2
   17314:	beq	17308 <test_string@@Base+0x178>
   17318:	ldr	r2, [r0, r2]
   1731c:	sub	r2, r3, r2
   17320:	ldrh	r1, [r2]
   17324:	cmp	r1, #11
   17328:	bhi	17350 <test_string@@Base+0x1c0>
   1732c:	ldr	r3, [pc, #296]	; 1745c <test_string@@Base+0x2cc>
   17330:	ldr	r1, [pc, #296]	; 17460 <test_string@@Base+0x2d0>
   17334:	ldr	r0, [pc, #296]	; 17464 <test_string@@Base+0x2d4>
   17338:	add	r3, pc, r3
   1733c:	ldr	r2, [pc, #292]	; 17468 <test_string@@Base+0x2d8>
   17340:	add	r3, r3, #580	; 0x244
   17344:	add	r1, pc, r1
   17348:	add	r0, pc, r0
   1734c:	bl	12a08 <__assert_fail@plt>
   17350:	ldrh	r2, [r2, #10]
   17354:	cmp	r2, #0
   17358:	beq	1732c <test_string@@Base+0x19c>
   1735c:	ldr	r0, [r3, r2]
   17360:	ldr	r1, [pc, #260]	; 1746c <test_string@@Base+0x2dc>
   17364:	add	r3, r3, r2
   17368:	add	r0, r0, #4
   1736c:	add	r0, r3, r0
   17370:	add	r1, pc, r1
   17374:	bl	1290c <strcmp@plt>
   17378:	cmp	r0, #0
   1737c:	popeq	{r4, r5, r6, pc}
   17380:	ldr	r0, [pc, #232]	; 17470 <test_string@@Base+0x2e0>
   17384:	add	r0, pc, r0
   17388:	bl	1296c <puts@plt>
   1738c:	mvn	r0, #0
   17390:	pop	{r4, r5, r6, pc}
   17394:	ldr	r1, [pc, #216]	; 17474 <test_string@@Base+0x2e4>
   17398:	ldr	r0, [pc, #216]	; 17478 <test_string@@Base+0x2e8>
   1739c:	add	r3, r5, #1248	; 0x4e0
   173a0:	ldr	r2, [pc, #212]	; 1747c <test_string@@Base+0x2ec>
   173a4:	add	r1, pc, r1
   173a8:	add	r0, pc, r0
   173ac:	bl	12a08 <__assert_fail@plt>
   173b0:	bl	130f4 <__assert_fail@plt+0x6ec>
   173b4:	ldr	r3, [pc, #196]	; 17480 <test_string@@Base+0x2f0>
   173b8:	ldr	r1, [pc, #196]	; 17484 <test_string@@Base+0x2f4>
   173bc:	ldr	r0, [pc, #196]	; 17488 <test_string@@Base+0x2f8>
   173c0:	add	r3, pc, r3
   173c4:	ldr	r2, [pc, #192]	; 1748c <test_string@@Base+0x2fc>
   173c8:	add	r3, r3, #1248	; 0x4e0
   173cc:	add	r1, pc, r1
   173d0:	add	r0, pc, r0
   173d4:	bl	12a08 <__assert_fail@plt>
   173d8:	ldr	r3, [pc, #176]	; 17490 <test_string@@Base+0x300>
   173dc:	ldr	r1, [pc, #176]	; 17494 <test_string@@Base+0x304>
   173e0:	ldr	r0, [pc, #176]	; 17498 <test_string@@Base+0x308>
   173e4:	add	r3, pc, r3
   173e8:	ldr	r2, [pc, #172]	; 1749c <test_string@@Base+0x30c>
   173ec:	add	r3, r3, #1248	; 0x4e0
   173f0:	add	r1, pc, r1
   173f4:	add	r0, pc, r0
   173f8:	bl	12a08 <__assert_fail@plt>
   173fc:	ldr	r3, [pc, #156]	; 174a0 <test_string@@Base+0x310>
   17400:	ldr	r1, [pc, #156]	; 174a4 <test_string@@Base+0x314>
   17404:	ldr	r0, [pc, #156]	; 174a8 <test_string@@Base+0x318>
   17408:	add	r3, pc, r3
   1740c:	ldr	r2, [pc, #152]	; 174ac <test_string@@Base+0x31c>
   17410:	add	r3, r3, #1248	; 0x4e0
   17414:	add	r1, pc, r1
   17418:	add	r0, pc, r0
   1741c:	bl	12a08 <__assert_fail@plt>
   17420:	ldr	r3, [pc, #136]	; 174b0 <test_string@@Base+0x320>
   17424:	ldr	r1, [pc, #136]	; 174b4 <test_string@@Base+0x324>
   17428:	ldr	r0, [pc, #136]	; 174b8 <test_string@@Base+0x328>
   1742c:	add	r3, pc, r3
   17430:	ldr	r2, [pc, #132]	; 174bc <test_string@@Base+0x32c>
   17434:	add	r3, r3, #1248	; 0x4e0
   17438:	add	r1, pc, r1
   1743c:	add	r0, pc, r0
   17440:	bl	12a08 <__assert_fail@plt>
   17444:	andeq	lr, r0, r0, ror #4
   17448:	strdeq	lr, [r0], -ip
   1744c:	ldrdeq	lr, [r0], -ip
   17450:	andeq	lr, r0, r8, ror #31
   17454:	strdeq	sp, [r0], -ip
   17458:	movtpl	r4, #61261	; 0xef4d
   1745c:	andeq	sp, r0, r8, ror r4
   17460:	andeq	sp, r0, r4, ror fp
   17464:	andeq	sp, r0, ip, asr #25
   17468:			; <UNDEFINED> instruction: 0x000002bb
   1746c:	andeq	lr, r0, ip, lsl #30
   17470:	andeq	lr, r0, r0, lsl #30
   17474:	andeq	lr, r0, ip, lsr #15
   17478:	andeq	lr, r0, r8, lsr #2
   1747c:	andeq	r0, r0, r5, asr #8
   17480:	strdeq	sp, [r0], -r0
   17484:	andeq	lr, r0, r4, lsl #15
   17488:	andeq	lr, r0, r4, lsl #29
   1748c:	andeq	r0, r0, lr, lsr r4
   17490:	andeq	sp, r0, ip, asr #7
   17494:	andeq	lr, r0, r0, ror #14
   17498:	andeq	lr, r0, r8, lsr lr
   1749c:	andeq	r0, r0, ip, lsr r4
   174a0:	andeq	sp, r0, r8, lsr #7
   174a4:	andeq	lr, r0, ip, lsr r7
   174a8:	andeq	lr, r0, r8, ror #27
   174ac:	andeq	r0, r0, sl, lsr r4
   174b0:	andeq	sp, r0, r4, lsl #7
   174b4:	andeq	lr, r0, r8, lsl r7
   174b8:	muleq	r0, r4, sp
   174bc:	andeq	r0, r0, r8, lsr r4

000174c0 <test_sort_find@@Base>:
   174c0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   174c4:	sub	sp, sp, #52	; 0x34
   174c8:	mov	r4, r0
   174cc:	bl	1f0f0 <flatcc_builder_reset@@Base>
   174d0:	ldr	r1, [pc, #4004]	; 1847c <test_sort_find@@Base+0xfbc>
   174d4:	mov	r3, #0
   174d8:	mov	r0, r4
   174dc:	mov	r2, r3
   174e0:	add	r1, pc, r1
   174e4:	bl	1f8b4 <flatcc_builder_start_buffer@@Base>
   174e8:	ldr	r5, [pc, #3984]	; 18480 <test_sort_find@@Base+0xfc0>
   174ec:	add	r5, pc, r5
   174f0:	cmp	r0, #0
   174f4:	bne	17504 <test_sort_find@@Base+0x44>
   174f8:	mov	r1, #36	; 0x24
   174fc:	mov	r0, r4
   17500:	bl	206ec <flatcc_builder_start_table@@Base>
   17504:	ldr	r1, [pc, #3960]	; 18484 <test_sort_find@@Base+0xfc4>
   17508:	mov	r0, r4
   1750c:	add	r1, pc, r1
   17510:	bl	21f90 <flatcc_builder_create_string_str@@Base>
   17514:	subs	r6, r0, #0
   17518:	beq	17530 <test_sort_find@@Base+0x70>
   1751c:	mov	r1, #3
   17520:	mov	r0, r4
   17524:	bl	2234c <flatcc_builder_table_add_offset@@Base>
   17528:	cmp	r0, #0
   1752c:	strne	r6, [r0]
   17530:	mov	r0, r4
   17534:	bl	20504 <flatcc_builder_start_offset_vector@@Base>
   17538:	mov	r1, #36	; 0x24
   1753c:	mov	r0, r4
   17540:	bl	206ec <flatcc_builder_start_table@@Base>
   17544:	ldr	r1, [pc, #3900]	; 18488 <test_sort_find@@Base+0xfc8>
   17548:	mov	r0, r4
   1754c:	add	r1, pc, r1
   17550:	bl	21f90 <flatcc_builder_create_string_str@@Base>
   17554:	subs	r6, r0, #0
   17558:	beq	17570 <test_sort_find@@Base+0xb0>
   1755c:	mov	r1, #3
   17560:	mov	r0, r4
   17564:	bl	2234c <flatcc_builder_table_add_offset@@Base>
   17568:	cmp	r0, #0
   1756c:	strne	r6, [r0]
   17570:	ldr	r1, [pc, #3860]	; 1848c <test_sort_find@@Base+0xfcc>
   17574:	mov	r2, #1
   17578:	add	r1, pc, r1
   1757c:	add	r1, r1, #1072	; 0x430
   17580:	add	r1, r1, #12
   17584:	mov	r0, r4
   17588:	bl	21038 <flatcc_builder_check_required@@Base>
   1758c:	cmp	r0, #0
   17590:	beq	18fd8 <test_sort_find@@Base+0x1b18>
   17594:	mov	r0, r4
   17598:	bl	210e0 <flatcc_builder_end_table@@Base>
   1759c:	subs	r1, r0, #0
   175a0:	beq	175ac <test_sort_find@@Base+0xec>
   175a4:	mov	r0, r4
   175a8:	bl	1ff14 <flatcc_builder_offset_vector_push@@Base>
   175ac:	mov	r1, #36	; 0x24
   175b0:	mov	r0, r4
   175b4:	bl	206ec <flatcc_builder_start_table@@Base>
   175b8:	ldr	r1, [pc, #3792]	; 18490 <test_sort_find@@Base+0xfd0>
   175bc:	mov	r0, r4
   175c0:	add	r1, pc, r1
   175c4:	bl	21f90 <flatcc_builder_create_string_str@@Base>
   175c8:	subs	r6, r0, #0
   175cc:	beq	175e4 <test_sort_find@@Base+0x124>
   175d0:	mov	r1, #3
   175d4:	mov	r0, r4
   175d8:	bl	2234c <flatcc_builder_table_add_offset@@Base>
   175dc:	cmp	r0, #0
   175e0:	strne	r6, [r0]
   175e4:	ldr	r1, [pc, #3752]	; 18494 <test_sort_find@@Base+0xfd4>
   175e8:	mov	r2, #1
   175ec:	add	r1, pc, r1
   175f0:	add	r1, r1, #1072	; 0x430
   175f4:	add	r1, r1, #12
   175f8:	mov	r0, r4
   175fc:	bl	21038 <flatcc_builder_check_required@@Base>
   17600:	cmp	r0, #0
   17604:	beq	18fd8 <test_sort_find@@Base+0x1b18>
   17608:	mov	r0, r4
   1760c:	bl	210e0 <flatcc_builder_end_table@@Base>
   17610:	subs	r1, r0, #0
   17614:	beq	17620 <test_sort_find@@Base+0x160>
   17618:	mov	r0, r4
   1761c:	bl	1ff14 <flatcc_builder_offset_vector_push@@Base>
   17620:	mov	r1, #36	; 0x24
   17624:	mov	r0, r4
   17628:	bl	206ec <flatcc_builder_start_table@@Base>
   1762c:	ldr	r1, [pc, #3684]	; 18498 <test_sort_find@@Base+0xfd8>
   17630:	mov	r0, r4
   17634:	add	r1, pc, r1
   17638:	bl	21f90 <flatcc_builder_create_string_str@@Base>
   1763c:	subs	r6, r0, #0
   17640:	beq	17658 <test_sort_find@@Base+0x198>
   17644:	mov	r1, #3
   17648:	mov	r0, r4
   1764c:	bl	2234c <flatcc_builder_table_add_offset@@Base>
   17650:	cmp	r0, #0
   17654:	strne	r6, [r0]
   17658:	ldr	r1, [pc, #3644]	; 1849c <test_sort_find@@Base+0xfdc>
   1765c:	mov	r2, #1
   17660:	add	r1, pc, r1
   17664:	add	r1, r1, #1072	; 0x430
   17668:	add	r1, r1, #12
   1766c:	mov	r0, r4
   17670:	bl	21038 <flatcc_builder_check_required@@Base>
   17674:	cmp	r0, #0
   17678:	beq	18fd8 <test_sort_find@@Base+0x1b18>
   1767c:	mov	r0, r4
   17680:	bl	210e0 <flatcc_builder_end_table@@Base>
   17684:	subs	r1, r0, #0
   17688:	beq	17694 <test_sort_find@@Base+0x1d4>
   1768c:	mov	r0, r4
   17690:	bl	1ff14 <flatcc_builder_offset_vector_push@@Base>
   17694:	mov	r1, #36	; 0x24
   17698:	mov	r0, r4
   1769c:	bl	206ec <flatcc_builder_start_table@@Base>
   176a0:	ldr	r1, [pc, #3576]	; 184a0 <test_sort_find@@Base+0xfe0>
   176a4:	mov	r0, r4
   176a8:	add	r1, pc, r1
   176ac:	bl	21f90 <flatcc_builder_create_string_str@@Base>
   176b0:	subs	r6, r0, #0
   176b4:	beq	176cc <test_sort_find@@Base+0x20c>
   176b8:	mov	r1, #3
   176bc:	mov	r0, r4
   176c0:	bl	2234c <flatcc_builder_table_add_offset@@Base>
   176c4:	cmp	r0, #0
   176c8:	strne	r6, [r0]
   176cc:	ldr	r1, [pc, #3536]	; 184a4 <test_sort_find@@Base+0xfe4>
   176d0:	mov	r2, #1
   176d4:	add	r1, pc, r1
   176d8:	add	r1, r1, #1072	; 0x430
   176dc:	add	r1, r1, #12
   176e0:	mov	r0, r4
   176e4:	bl	21038 <flatcc_builder_check_required@@Base>
   176e8:	cmp	r0, #0
   176ec:	beq	18fd8 <test_sort_find@@Base+0x1b18>
   176f0:	mov	r0, r4
   176f4:	bl	210e0 <flatcc_builder_end_table@@Base>
   176f8:	subs	r1, r0, #0
   176fc:	beq	17708 <test_sort_find@@Base+0x248>
   17700:	mov	r0, r4
   17704:	bl	1ff14 <flatcc_builder_offset_vector_push@@Base>
   17708:	mov	r1, #36	; 0x24
   1770c:	mov	r0, r4
   17710:	bl	206ec <flatcc_builder_start_table@@Base>
   17714:	ldr	r1, [pc, #3468]	; 184a8 <test_sort_find@@Base+0xfe8>
   17718:	mov	r0, r4
   1771c:	add	r1, pc, r1
   17720:	bl	21f90 <flatcc_builder_create_string_str@@Base>
   17724:	subs	r6, r0, #0
   17728:	beq	17740 <test_sort_find@@Base+0x280>
   1772c:	mov	r1, #3
   17730:	mov	r0, r4
   17734:	bl	2234c <flatcc_builder_table_add_offset@@Base>
   17738:	cmp	r0, #0
   1773c:	strne	r6, [r0]
   17740:	ldr	r1, [pc, #3428]	; 184ac <test_sort_find@@Base+0xfec>
   17744:	mov	r2, #1
   17748:	add	r1, pc, r1
   1774c:	add	r1, r1, #1072	; 0x430
   17750:	add	r1, r1, #12
   17754:	mov	r0, r4
   17758:	bl	21038 <flatcc_builder_check_required@@Base>
   1775c:	cmp	r0, #0
   17760:	beq	18fd8 <test_sort_find@@Base+0x1b18>
   17764:	mov	r0, r4
   17768:	bl	210e0 <flatcc_builder_end_table@@Base>
   1776c:	subs	r1, r0, #0
   17770:	beq	1777c <test_sort_find@@Base+0x2bc>
   17774:	mov	r0, r4
   17778:	bl	1ff14 <flatcc_builder_offset_vector_push@@Base>
   1777c:	mov	r0, r4
   17780:	bl	21550 <flatcc_builder_end_offset_vector@@Base>
   17784:	subs	r6, r0, #0
   17788:	beq	177a0 <test_sort_find@@Base+0x2e0>
   1778c:	mov	r1, #11
   17790:	mov	r0, r4
   17794:	bl	2234c <flatcc_builder_table_add_offset@@Base>
   17798:	cmp	r0, #0
   1779c:	strne	r6, [r0]
   177a0:	ldr	r1, [pc, #3336]	; 184b0 <test_sort_find@@Base+0xff0>
   177a4:	mov	r2, #1
   177a8:	add	r1, pc, r1
   177ac:	add	r1, r1, #1072	; 0x430
   177b0:	add	r1, r1, #12
   177b4:	mov	r0, r4
   177b8:	bl	21038 <flatcc_builder_check_required@@Base>
   177bc:	cmp	r0, #0
   177c0:	beq	18fd8 <test_sort_find@@Base+0x1b18>
   177c4:	mov	r0, r4
   177c8:	bl	210e0 <flatcc_builder_end_table@@Base>
   177cc:	mov	r1, r0
   177d0:	mov	r0, r4
   177d4:	bl	1f96c <flatcc_builder_end_buffer@@Base>
   177d8:	mov	r0, r4
   177dc:	add	r1, sp, #44	; 0x2c
   177e0:	bl	22a08 <flatcc_builder_finalize_aligned_buffer@@Base>
   177e4:	ldr	r3, [pc, #3272]	; 184b4 <test_sort_find@@Base+0xff4>
   177e8:	ldr	r2, [sp, #44]	; 0x2c
   177ec:	str	r0, [sp, #24]
   177f0:	ldr	r3, [r5, r3]
   177f4:	mov	r4, r0
   177f8:	mov	r1, r0
   177fc:	ldr	r0, [pc, #3252]	; 184b8 <test_sort_find@@Base+0xff8>
   17800:	str	r3, [sp, #20]
   17804:	add	r0, pc, r0
   17808:	ldr	r3, [r3]
   1780c:	bl	13540 <_start@@Base+0x154>
   17810:	cmp	r4, #0
   17814:	beq	17828 <test_sort_find@@Base+0x368>
   17818:	ldr	r3, [pc, #3228]	; 184bc <test_sort_find@@Base+0xffc>
   1781c:	ldr	r2, [r4, #4]
   17820:	cmp	r2, r3
   17824:	beq	1782c <test_sort_find@@Base+0x36c>
   17828:	bl	12c6c <__assert_fail@plt+0x264>
   1782c:	ldr	r2, [sp, #24]
   17830:	ldr	r3, [r2]
   17834:	adds	r2, r2, r3
   17838:	beq	17828 <test_sort_find@@Base+0x368>
   1783c:	ldr	r1, [sp, #24]
   17840:	ldr	r3, [r1, r3]
   17844:	sub	r3, r2, r3
   17848:	ldrh	r1, [r3]
   1784c:	cmp	r1, #27
   17850:	bhi	1787c <test_sort_find@@Base+0x3bc>
   17854:	ldr	r3, [pc, #3172]	; 184c0 <test_sort_find@@Base+0x1000>
   17858:	ldr	r1, [pc, #3172]	; 184c4 <test_sort_find@@Base+0x1004>
   1785c:	add	r3, pc, r3
   17860:	ldr	r0, [pc, #3168]	; 184c8 <test_sort_find@@Base+0x1008>
   17864:	add	r3, r3, #1248	; 0x4e0
   17868:	ldr	r2, [pc, #3164]	; 184cc <test_sort_find@@Base+0x100c>
   1786c:	add	r3, r3, #12
   17870:	add	r1, pc, r1
   17874:	add	r0, pc, r0
   17878:	bl	12a08 <__assert_fail@plt>
   1787c:	ldrh	r3, [r3, #26]
   17880:	cmp	r3, #0
   17884:	beq	17854 <test_sort_find@@Base+0x394>
   17888:	ldr	r1, [r2, r3]
   1788c:	add	r3, r2, r3
   17890:	add	r2, r1, #4
   17894:	adds	r4, r3, r2
   17898:	str	r3, [sp, #28]
   1789c:	str	r2, [sp, #32]
   178a0:	beq	17854 <test_sort_find@@Base+0x394>
   178a4:	ldr	r3, [r4, #-4]
   178a8:	cmp	r3, #0
   178ac:	str	r3, [sp, #36]	; 0x24
   178b0:	beq	17ac8 <test_sort_find@@Base+0x608>
   178b4:	lsr	r2, r3, #1
   178b8:	sub	r3, r3, #1
   178bc:	str	r3, [sp, #4]
   178c0:	lsl	r3, r2, #1
   178c4:	str	r2, [sp, #16]
   178c8:	str	r3, [sp, #12]
   178cc:	b	179cc <test_sort_find@@Base+0x50c>
   178d0:	ldr	r8, [r4, #-4]
   178d4:	mov	r6, r9
   178d8:	lsl	fp, r5, #2
   178dc:	cmp	r8, r5
   178e0:	add	r2, r4, fp
   178e4:	bls	18094 <test_sort_find@@Base+0xbd4>
   178e8:	ldr	r7, [r4, r5, lsl #2]
   178ec:	adds	r3, r2, r7
   178f0:	beq	18090 <test_sort_find@@Base+0xbd0>
   178f4:	ldr	r2, [r2, r7]
   178f8:	sub	r2, r3, r2
   178fc:	ldrh	r1, [r2]
   17900:	cmp	r1, #11
   17904:	bls	17d54 <test_sort_find@@Base+0x894>
   17908:	ldrh	r0, [r2, #10]
   1790c:	cmp	r0, #0
   17910:	beq	17d54 <test_sort_find@@Base+0x894>
   17914:	ldr	r2, [r3, r0]
   17918:	cmp	r6, r8
   1791c:	add	r2, r2, #4
   17920:	add	r0, r3, r0
   17924:	lsl	r3, r6, #2
   17928:	add	r0, r0, r2
   1792c:	add	r2, r4, r3
   17930:	bcs	18094 <test_sort_find@@Base+0xbd4>
   17934:	ldr	r8, [r4, r6, lsl #2]
   17938:	adds	r1, r2, r8
   1793c:	beq	18090 <test_sort_find@@Base+0xbd0>
   17940:	ldr	r2, [r2, r8]
   17944:	sub	r2, r1, r2
   17948:	ldrh	ip, [r2]
   1794c:	cmp	ip, #11
   17950:	bls	17d54 <test_sort_find@@Base+0x894>
   17954:	ldrh	ip, [r2, #10]
   17958:	cmp	ip, #0
   1795c:	beq	17d54 <test_sort_find@@Base+0x894>
   17960:	ldr	r2, [r1, ip]
   17964:	add	r1, r1, ip
   17968:	add	r2, r2, #4
   1796c:	adds	r1, r1, r2
   17970:	moveq	sl, #0
   17974:	ldrne	sl, [r1, #-4]
   17978:	cmp	r0, #0
   1797c:	beq	17db4 <test_sort_find@@Base+0x8f4>
   17980:	ldr	r9, [r0, #-4]
   17984:	str	r3, [sp, #8]
   17988:	cmp	sl, r9
   1798c:	movcc	r2, sl
   17990:	movcs	r2, r9
   17994:	bl	129f0 <strncmp@plt>
   17998:	ldr	r3, [sp, #8]
   1799c:	cmp	r0, #0
   179a0:	bne	17d78 <test_sort_find@@Base+0x8b8>
   179a4:	cmp	sl, r9
   179a8:	bhi	17d7c <test_sort_find@@Base+0x8bc>
   179ac:	ldr	r3, [sp, #16]
   179b0:	sub	r3, r3, #1
   179b4:	str	r3, [sp, #16]
   179b8:	cmn	r3, #1
   179bc:	ldr	r3, [sp, #12]
   179c0:	sub	r3, r3, #2
   179c4:	str	r3, [sp, #12]
   179c8:	beq	17dc4 <test_sort_find@@Base+0x904>
   179cc:	ldr	r3, [sp, #4]
   179d0:	ldr	r2, [sp, #12]
   179d4:	cmp	r3, r2
   179d8:	bcc	179ac <test_sort_find@@Base+0x4ec>
   179dc:	ldr	r5, [sp, #16]
   179e0:	ldr	r9, [sp, #12]
   179e4:	ldr	r3, [sp, #4]
   179e8:	cmp	r3, r9
   179ec:	bls	178d0 <test_sort_find@@Base+0x410>
   179f0:	ldr	r8, [r4, #-4]
   179f4:	lsl	r3, r9, #2
   179f8:	cmp	r8, r9
   179fc:	add	r1, r4, r3
   17a00:	bls	18094 <test_sort_find@@Base+0xbd4>
   17a04:	ldr	r0, [r4, r9, lsl #2]
   17a08:	adds	r2, r1, r0
   17a0c:	beq	18090 <test_sort_find@@Base+0xbd0>
   17a10:	ldr	r1, [r1, r0]
   17a14:	sub	r1, r2, r1
   17a18:	ldrh	r0, [r1]
   17a1c:	cmp	r0, #11
   17a20:	bls	17d54 <test_sort_find@@Base+0x894>
   17a24:	ldrh	r1, [r1, #10]
   17a28:	cmp	r1, #0
   17a2c:	beq	17d54 <test_sort_find@@Base+0x894>
   17a30:	ldr	r0, [r2, r1]
   17a34:	add	r6, r9, #1
   17a38:	add	r2, r2, r1
   17a3c:	add	r3, r3, #4
   17a40:	add	r0, r0, #4
   17a44:	cmp	r8, r6
   17a48:	add	r0, r2, r0
   17a4c:	add	r2, r4, r3
   17a50:	bls	18094 <test_sort_find@@Base+0xbd4>
   17a54:	ldr	r3, [r4, r3]
   17a58:	adds	r1, r2, r3
   17a5c:	beq	18090 <test_sort_find@@Base+0xbd0>
   17a60:	ldr	r3, [r2, r3]
   17a64:	sub	r3, r1, r3
   17a68:	ldrh	r2, [r3]
   17a6c:	cmp	r2, #11
   17a70:	bls	17d54 <test_sort_find@@Base+0x894>
   17a74:	ldrh	r2, [r3, #10]
   17a78:	cmp	r2, #0
   17a7c:	beq	17d54 <test_sort_find@@Base+0x894>
   17a80:	ldr	r3, [r1, r2]
   17a84:	add	r1, r1, r2
   17a88:	add	r3, r3, #4
   17a8c:	adds	r1, r1, r3
   17a90:	moveq	sl, #0
   17a94:	ldrne	sl, [r1, #-4]
   17a98:	cmp	r0, #0
   17a9c:	beq	17dbc <test_sort_find@@Base+0x8fc>
   17aa0:	ldr	r7, [r0, #-4]
   17aa4:	cmp	sl, r7
   17aa8:	movcc	r2, sl
   17aac:	movcs	r2, r7
   17ab0:	bl	129f0 <strncmp@plt>
   17ab4:	cmp	r0, #0
   17ab8:	bne	17dac <test_sort_find@@Base+0x8ec>
   17abc:	cmp	sl, r7
   17ac0:	movls	r6, r9
   17ac4:	b	178d8 <test_sort_find@@Base+0x418>
   17ac8:	ldr	r3, [sp, #20]
   17acc:	ldr	r0, [pc, #2556]	; 184d0 <test_sort_find@@Base+0x1010>
   17ad0:	ldr	r2, [sp, #44]	; 0x2c
   17ad4:	ldr	r3, [r3]
   17ad8:	ldr	r1, [sp, #24]
   17adc:	add	r0, pc, r0
   17ae0:	bl	13540 <_start@@Base+0x154>
   17ae4:	ldr	r3, [r4, #-4]
   17ae8:	cmp	r3, #5
   17aec:	bne	18f2c <test_sort_find@@Base+0x1a6c>
   17af0:	ldr	r3, [sp, #28]
   17af4:	ldr	r2, [sp, #32]
   17af8:	ldr	r2, [r3, r2]
   17afc:	adds	r3, r4, r2
   17b00:	beq	18090 <test_sort_find@@Base+0xbd0>
   17b04:	ldr	r2, [r4, r2]
   17b08:	sub	r2, r3, r2
   17b0c:	ldrh	r1, [r2]
   17b10:	cmp	r1, #11
   17b14:	bls	17d54 <test_sort_find@@Base+0x894>
   17b18:	ldrh	r2, [r2, #10]
   17b1c:	cmp	r2, #0
   17b20:	beq	17d54 <test_sort_find@@Base+0x894>
   17b24:	ldr	r0, [r3, r2]
   17b28:	ldr	r1, [pc, #2468]	; 184d4 <test_sort_find@@Base+0x1014>
   17b2c:	add	r3, r3, r2
   17b30:	add	r0, r0, #4
   17b34:	add	r0, r3, r0
   17b38:	add	r1, pc, r1
   17b3c:	bl	1290c <strcmp@plt>
   17b40:	cmp	r0, #0
   17b44:	bne	18f8c <test_sort_find@@Base+0x1acc>
   17b48:	ldr	r6, [r4, #4]
   17b4c:	add	r6, r6, #4
   17b50:	adds	r3, r4, r6
   17b54:	beq	18090 <test_sort_find@@Base+0xbd0>
   17b58:	ldr	r2, [r4, r6]
   17b5c:	sub	r2, r3, r2
   17b60:	ldrh	r1, [r2]
   17b64:	cmp	r1, #11
   17b68:	bls	17d54 <test_sort_find@@Base+0x894>
   17b6c:	ldrh	r2, [r2, #10]
   17b70:	cmp	r2, #0
   17b74:	beq	17d54 <test_sort_find@@Base+0x894>
   17b78:	ldr	r0, [r3, r2]
   17b7c:	ldr	r1, [pc, #2388]	; 184d8 <test_sort_find@@Base+0x1018>
   17b80:	add	r3, r3, r2
   17b84:	add	r0, r0, #4
   17b88:	add	r0, r3, r0
   17b8c:	add	r1, pc, r1
   17b90:	bl	1290c <strcmp@plt>
   17b94:	cmp	r0, #0
   17b98:	bne	18fa4 <test_sort_find@@Base+0x1ae4>
   17b9c:	ldr	r5, [r4, #8]
   17ba0:	add	r5, r5, #8
   17ba4:	adds	r3, r4, r5
   17ba8:	beq	18090 <test_sort_find@@Base+0xbd0>
   17bac:	ldr	r2, [r4, r5]
   17bb0:	sub	r2, r3, r2
   17bb4:	ldrh	r1, [r2]
   17bb8:	cmp	r1, #11
   17bbc:	bls	17d54 <test_sort_find@@Base+0x894>
   17bc0:	ldrh	r2, [r2, #10]
   17bc4:	cmp	r2, #0
   17bc8:	beq	17d54 <test_sort_find@@Base+0x894>
   17bcc:	ldr	r0, [r3, r2]
   17bd0:	ldr	r1, [pc, #2308]	; 184dc <test_sort_find@@Base+0x101c>
   17bd4:	add	r3, r3, r2
   17bd8:	add	r0, r0, #4
   17bdc:	add	r0, r3, r0
   17be0:	add	r1, pc, r1
   17be4:	bl	1290c <strcmp@plt>
   17be8:	cmp	r0, #0
   17bec:	bne	18fbc <test_sort_find@@Base+0x1afc>
   17bf0:	ldr	r2, [r4, #12]
   17bf4:	add	r2, r2, #12
   17bf8:	adds	r3, r4, r2
   17bfc:	beq	18090 <test_sort_find@@Base+0xbd0>
   17c00:	ldr	r2, [r4, r2]
   17c04:	sub	r2, r3, r2
   17c08:	ldrh	r1, [r2]
   17c0c:	cmp	r1, #11
   17c10:	bls	17d54 <test_sort_find@@Base+0x894>
   17c14:	ldrh	r2, [r2, #10]
   17c18:	cmp	r2, #0
   17c1c:	beq	17d54 <test_sort_find@@Base+0x894>
   17c20:	ldr	r0, [r3, r2]
   17c24:	ldr	r1, [pc, #2228]	; 184e0 <test_sort_find@@Base+0x1020>
   17c28:	add	r3, r3, r2
   17c2c:	add	r0, r0, #4
   17c30:	add	r0, r3, r0
   17c34:	add	r1, pc, r1
   17c38:	bl	1290c <strcmp@plt>
   17c3c:	cmp	r0, #0
   17c40:	bne	18f5c <test_sort_find@@Base+0x1a9c>
   17c44:	ldr	r2, [r4, #16]
   17c48:	add	r2, r2, #16
   17c4c:	adds	r3, r4, r2
   17c50:	beq	18090 <test_sort_find@@Base+0xbd0>
   17c54:	ldr	r2, [r4, r2]
   17c58:	sub	r2, r3, r2
   17c5c:	ldrh	r1, [r2]
   17c60:	cmp	r1, #11
   17c64:	bls	17d54 <test_sort_find@@Base+0x894>
   17c68:	ldrh	r2, [r2, #10]
   17c6c:	cmp	r2, #0
   17c70:	beq	17d54 <test_sort_find@@Base+0x894>
   17c74:	ldr	r0, [r3, r2]
   17c78:	ldr	r1, [pc, #2148]	; 184e4 <test_sort_find@@Base+0x1024>
   17c7c:	add	r3, r3, r2
   17c80:	add	r0, r0, #4
   17c84:	add	r0, r3, r0
   17c88:	add	r1, pc, r1
   17c8c:	bl	1290c <strcmp@plt>
   17c90:	subs	r8, r0, #0
   17c94:	bne	18f74 <test_sort_find@@Base+0x1ab4>
   17c98:	cmp	r6, r5
   17c9c:	beq	18f44 <test_sort_find@@Base+0x1a84>
   17ca0:	ldr	r6, [pc, #2112]	; 184e8 <test_sort_find@@Base+0x1028>
   17ca4:	mov	r7, #4
   17ca8:	add	r6, pc, r6
   17cac:	sub	r5, r7, r8
   17cb0:	add	r5, r8, r5, lsr #1
   17cb4:	cmp	r5, #4
   17cb8:	add	r2, r4, r5, lsl #2
   17cbc:	bhi	18094 <test_sort_find@@Base+0xbd4>
   17cc0:	ldr	r3, [r4, r5, lsl #2]
   17cc4:	adds	r1, r2, r3
   17cc8:	beq	18090 <test_sort_find@@Base+0xbd0>
   17ccc:	ldr	r2, [r2, r3]
   17cd0:	sub	r2, r1, r2
   17cd4:	ldrh	r3, [r2]
   17cd8:	cmp	r3, #11
   17cdc:	bhi	17ce8 <test_sort_find@@Base+0x828>
   17ce0:	b	17d54 <test_sort_find@@Base+0x894>
   17ce4:	mov	r5, r3
   17ce8:	ldrh	r0, [r2, #10]
   17cec:	cmp	r0, #0
   17cf0:	beq	17d54 <test_sort_find@@Base+0x894>
   17cf4:	ldr	r3, [r1, r0]
   17cf8:	add	r0, r1, r0
   17cfc:	add	r3, r3, #4
   17d00:	add	r0, r0, r3
   17d04:	mov	r1, r6
   17d08:	bl	1290c <strcmp@plt>
   17d0c:	cmp	r0, #0
   17d10:	blt	18050 <test_sort_find@@Base+0xb90>
   17d14:	cmp	r5, r8
   17d18:	bls	18060 <test_sort_find@@Base+0xba0>
   17d1c:	sub	r3, r5, r8
   17d20:	add	r3, r8, r3, lsr #1
   17d24:	cmp	r3, #4
   17d28:	add	r0, r4, r3, lsl #2
   17d2c:	bhi	18094 <test_sort_find@@Base+0xbd4>
   17d30:	ldr	r2, [r4, r3, lsl #2]
   17d34:	adds	r1, r0, r2
   17d38:	beq	18090 <test_sort_find@@Base+0xbd0>
   17d3c:	ldr	r2, [r0, r2]
   17d40:	mov	r7, r5
   17d44:	sub	r2, r1, r2
   17d48:	ldrh	r0, [r2]
   17d4c:	cmp	r0, #11
   17d50:	bhi	17ce4 <test_sort_find@@Base+0x824>
   17d54:	ldr	r3, [pc, #1936]	; 184ec <test_sort_find@@Base+0x102c>
   17d58:	ldr	r1, [pc, #1936]	; 184f0 <test_sort_find@@Base+0x1030>
   17d5c:	ldr	r0, [pc, #1936]	; 184f4 <test_sort_find@@Base+0x1034>
   17d60:	add	r3, pc, r3
   17d64:	ldr	r2, [pc, #1932]	; 184f8 <test_sort_find@@Base+0x1038>
   17d68:	add	r3, r3, #580	; 0x244
   17d6c:	add	r1, pc, r1
   17d70:	add	r0, pc, r0
   17d74:	bl	12a08 <__assert_fail@plt>
   17d78:	bge	179ac <test_sort_find@@Base+0x4ec>
   17d7c:	sub	r5, r5, r6
   17d80:	ldr	r2, [sp, #4]
   17d84:	lsl	r5, r5, #2
   17d88:	lsl	r9, r6, #1
   17d8c:	sub	r8, r8, r5
   17d90:	add	r7, r7, r5
   17d94:	cmp	r2, r9
   17d98:	str	r8, [r4, fp]
   17d9c:	mov	r5, r6
   17da0:	str	r7, [r4, r3]
   17da4:	bcs	179e4 <test_sort_find@@Base+0x524>
   17da8:	b	179ac <test_sort_find@@Base+0x4ec>
   17dac:	movge	r6, r9
   17db0:	b	178d8 <test_sort_find@@Base+0x418>
   17db4:	mov	r9, #0
   17db8:	b	179a4 <test_sort_find@@Base+0x4e4>
   17dbc:	mov	r7, #0
   17dc0:	b	17abc <test_sort_find@@Base+0x5fc>
   17dc4:	ldr	r3, [sp, #4]
   17dc8:	cmp	r3, #0
   17dcc:	beq	17ac8 <test_sort_find@@Base+0x608>
   17dd0:	ldr	r2, [sp, #36]	; 0x24
   17dd4:	rsb	r3, r2, r2, lsl #30
   17dd8:	add	r2, r4, r2, lsl #2
   17ddc:	lsl	r3, r3, #2
   17de0:	add	r3, r3, #4
   17de4:	str	r2, [sp, #16]
   17de8:	str	r3, [sp, #12]
   17dec:	b	17ee4 <test_sort_find@@Base+0xa24>
   17df0:	ldr	r8, [r4, #-4]
   17df4:	mov	r6, r9
   17df8:	lsl	r3, r5, #2
   17dfc:	cmp	r5, r8
   17e00:	add	r1, r4, r3
   17e04:	bcs	18094 <test_sort_find@@Base+0xbd4>
   17e08:	ldr	r7, [r4, r5, lsl #2]
   17e0c:	adds	r2, r1, r7
   17e10:	beq	18090 <test_sort_find@@Base+0xbd0>
   17e14:	ldr	r1, [r1, r7]
   17e18:	sub	r1, r2, r1
   17e1c:	ldrh	r0, [r1]
   17e20:	cmp	r0, #11
   17e24:	bls	17d54 <test_sort_find@@Base+0x894>
   17e28:	ldrh	r1, [r1, #10]
   17e2c:	cmp	r1, #0
   17e30:	beq	17d54 <test_sort_find@@Base+0x894>
   17e34:	ldr	r0, [r2, r1]
   17e38:	lsl	fp, r6, #2
   17e3c:	add	r2, r2, r1
   17e40:	add	r0, r0, #4
   17e44:	cmp	r6, r8
   17e48:	add	r0, r2, r0
   17e4c:	add	r2, r4, fp
   17e50:	bcs	18094 <test_sort_find@@Base+0xbd4>
   17e54:	ldr	r8, [r4, r6, lsl #2]
   17e58:	adds	r1, r2, r8
   17e5c:	beq	18090 <test_sort_find@@Base+0xbd0>
   17e60:	ldr	r2, [r2, r8]
   17e64:	sub	r2, r1, r2
   17e68:	ldrh	ip, [r2]
   17e6c:	cmp	ip, #11
   17e70:	bls	17d54 <test_sort_find@@Base+0x894>
   17e74:	ldrh	ip, [r2, #10]
   17e78:	cmp	ip, #0
   17e7c:	beq	17d54 <test_sort_find@@Base+0x894>
   17e80:	ldr	r2, [r1, ip]
   17e84:	add	r1, r1, ip
   17e88:	add	r2, r2, #4
   17e8c:	adds	r1, r1, r2
   17e90:	moveq	sl, #0
   17e94:	ldrne	sl, [r1, #-4]
   17e98:	cmp	r0, #0
   17e9c:	beq	18040 <test_sort_find@@Base+0xb80>
   17ea0:	ldr	r9, [r0, #-4]
   17ea4:	str	r3, [sp, #8]
   17ea8:	cmp	sl, r9
   17eac:	movcc	r2, sl
   17eb0:	movcs	r2, r9
   17eb4:	bl	129f0 <strncmp@plt>
   17eb8:	ldr	r3, [sp, #8]
   17ebc:	cmp	r0, #0
   17ec0:	bne	18004 <test_sort_find@@Base+0xb44>
   17ec4:	cmp	sl, r9
   17ec8:	bhi	18008 <test_sort_find@@Base+0xb48>
   17ecc:	ldr	r3, [sp, #4]
   17ed0:	cmp	r3, #0
   17ed4:	ldr	r3, [sp, #12]
   17ed8:	add	r3, r3, #4
   17edc:	str	r3, [sp, #12]
   17ee0:	beq	17ac8 <test_sort_find@@Base+0x608>
   17ee4:	ldr	r1, [sp, #16]
   17ee8:	ldr	r0, [sp, #4]
   17eec:	ldr	r3, [r4]
   17ef0:	sub	r0, r0, #1
   17ef4:	ldr	r2, [r1, #-4]
   17ef8:	str	r0, [sp, #4]
   17efc:	ldr	r0, [sp, #12]
   17f00:	mov	r5, #0
   17f04:	sub	r2, r2, r0
   17f08:	str	r2, [r4]
   17f0c:	mov	r9, r5
   17f10:	mov	r2, r1
   17f14:	add	r3, r0, r3
   17f18:	str	r3, [r2, #-4]!
   17f1c:	str	r2, [sp, #16]
   17f20:	ldr	r3, [sp, #4]
   17f24:	cmp	r3, r9
   17f28:	bls	17df0 <test_sort_find@@Base+0x930>
   17f2c:	ldr	r8, [r4, #-4]
   17f30:	lsl	r3, r9, #2
   17f34:	cmp	r8, r9
   17f38:	add	r0, r4, r3
   17f3c:	bls	18094 <test_sort_find@@Base+0xbd4>
   17f40:	ldr	r1, [r4, r9, lsl #2]
   17f44:	adds	r2, r0, r1
   17f48:	beq	18090 <test_sort_find@@Base+0xbd0>
   17f4c:	ldr	r1, [r0, r1]
   17f50:	sub	r1, r2, r1
   17f54:	ldrh	r0, [r1]
   17f58:	cmp	r0, #11
   17f5c:	bls	17d54 <test_sort_find@@Base+0x894>
   17f60:	ldrh	r1, [r1, #10]
   17f64:	cmp	r1, #0
   17f68:	beq	17d54 <test_sort_find@@Base+0x894>
   17f6c:	ldr	r0, [r2, r1]
   17f70:	add	r6, r9, #1
   17f74:	add	r2, r2, r1
   17f78:	add	r3, r3, #4
   17f7c:	add	r0, r0, #4
   17f80:	cmp	r8, r6
   17f84:	add	r0, r2, r0
   17f88:	add	r2, r4, r3
   17f8c:	bls	18094 <test_sort_find@@Base+0xbd4>
   17f90:	ldr	r3, [r4, r3]
   17f94:	adds	r1, r2, r3
   17f98:	beq	18090 <test_sort_find@@Base+0xbd0>
   17f9c:	ldr	r3, [r2, r3]
   17fa0:	sub	r3, r1, r3
   17fa4:	ldrh	r2, [r3]
   17fa8:	cmp	r2, #11
   17fac:	bls	17d54 <test_sort_find@@Base+0x894>
   17fb0:	ldrh	r2, [r3, #10]
   17fb4:	cmp	r2, #0
   17fb8:	beq	17d54 <test_sort_find@@Base+0x894>
   17fbc:	ldr	r3, [r1, r2]
   17fc0:	add	r1, r1, r2
   17fc4:	add	r3, r3, #4
   17fc8:	adds	r1, r1, r3
   17fcc:	moveq	sl, #0
   17fd0:	ldrne	sl, [r1, #-4]
   17fd4:	cmp	r0, #0
   17fd8:	beq	18048 <test_sort_find@@Base+0xb88>
   17fdc:	ldr	r7, [r0, #-4]
   17fe0:	cmp	sl, r7
   17fe4:	movcc	r2, sl
   17fe8:	movcs	r2, r7
   17fec:	bl	129f0 <strncmp@plt>
   17ff0:	cmp	r0, #0
   17ff4:	bne	18038 <test_sort_find@@Base+0xb78>
   17ff8:	cmp	sl, r7
   17ffc:	movls	r6, r9
   18000:	b	17df8 <test_sort_find@@Base+0x938>
   18004:	bge	17ecc <test_sort_find@@Base+0xa0c>
   18008:	sub	r5, r5, r6
   1800c:	ldr	r2, [sp, #4]
   18010:	lsl	r5, r5, #2
   18014:	lsl	r9, r6, #1
   18018:	sub	r8, r8, r5
   1801c:	add	r7, r7, r5
   18020:	cmp	r2, r9
   18024:	str	r8, [r4, r3]
   18028:	mov	r5, r6
   1802c:	str	r7, [r4, fp]
   18030:	bcs	17f20 <test_sort_find@@Base+0xa60>
   18034:	b	17ecc <test_sort_find@@Base+0xa0c>
   18038:	movge	r6, r9
   1803c:	b	17df8 <test_sort_find@@Base+0x938>
   18040:	mov	r9, #0
   18044:	b	17ec4 <test_sort_find@@Base+0xa04>
   18048:	mov	r7, #0
   1804c:	b	17ff8 <test_sort_find@@Base+0xb38>
   18050:	add	r8, r5, #1
   18054:	cmp	r8, r7
   18058:	bcc	17cac <test_sort_find@@Base+0x7ec>
   1805c:	mov	r5, r7
   18060:	cmp	r5, r8
   18064:	beq	180b8 <test_sort_find@@Base+0xbf8>
   18068:	ldr	r0, [pc, #1164]	; 184fc <test_sort_find@@Base+0x103c>
   1806c:	add	r0, pc, r0
   18070:	bl	1296c <puts@plt>
   18074:	mvn	r3, #0
   18078:	str	r3, [sp, #28]
   1807c:	ldr	r0, [sp, #24]
   18080:	bl	22b10 <flatcc_builder_aligned_free@@Base>
   18084:	ldr	r0, [sp, #28]
   18088:	add	sp, sp, #52	; 0x34
   1808c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18090:	bl	12d14 <__assert_fail@plt+0x30c>
   18094:	ldr	r3, [pc, #1124]	; 18500 <test_sort_find@@Base+0x1040>
   18098:	ldr	r1, [pc, #1124]	; 18504 <test_sort_find@@Base+0x1044>
   1809c:	ldr	r0, [pc, #1124]	; 18508 <test_sort_find@@Base+0x1048>
   180a0:	add	r3, pc, r3
   180a4:	ldr	r2, [pc, #1120]	; 1850c <test_sort_find@@Base+0x104c>
   180a8:	add	r3, r3, #484	; 0x1e4
   180ac:	add	r1, pc, r1
   180b0:	add	r0, pc, r0
   180b4:	bl	12a08 <__assert_fail@plt>
   180b8:	ldr	r2, [r4, r5, lsl #2]
   180bc:	add	r1, r4, r5, lsl #2
   180c0:	adds	r3, r1, r2
   180c4:	beq	18090 <test_sort_find@@Base+0xbd0>
   180c8:	ldr	r2, [r1, r2]
   180cc:	sub	r2, r3, r2
   180d0:	ldrh	r1, [r2]
   180d4:	cmp	r1, #11
   180d8:	bls	17d54 <test_sort_find@@Base+0x894>
   180dc:	ldrh	r2, [r2, #10]
   180e0:	cmp	r2, #0
   180e4:	beq	17d54 <test_sort_find@@Base+0x894>
   180e8:	ldr	r0, [r3, r2]
   180ec:	ldr	r1, [pc, #1052]	; 18510 <test_sort_find@@Base+0x1050>
   180f0:	add	r3, r3, r2
   180f4:	add	r0, r0, #4
   180f8:	add	r0, r3, r0
   180fc:	add	r1, pc, r1
   18100:	bl	1290c <strcmp@plt>
   18104:	cmp	r0, #0
   18108:	cmpeq	r5, #3
   1810c:	movne	r5, #1
   18110:	moveq	r5, #0
   18114:	bne	18068 <test_sort_find@@Base+0xba8>
   18118:	ldr	r6, [pc, #1012]	; 18514 <test_sort_find@@Base+0x1054>
   1811c:	mov	r7, #4
   18120:	add	r6, pc, r6
   18124:	sub	r8, r7, r5
   18128:	add	r8, r5, r8, lsr #1
   1812c:	cmp	r8, #4
   18130:	add	r2, r4, r8, lsl #2
   18134:	bhi	18fd4 <test_sort_find@@Base+0x1b14>
   18138:	ldr	r3, [r4, r8, lsl #2]
   1813c:	adds	r1, r2, r3
   18140:	beq	18090 <test_sort_find@@Base+0xbd0>
   18144:	ldr	r2, [r2, r3]
   18148:	sub	r2, r1, r2
   1814c:	ldrh	r3, [r2]
   18150:	cmp	r3, #11
   18154:	bhi	18164 <test_sort_find@@Base+0xca4>
   18158:	b	17d54 <test_sort_find@@Base+0x894>
   1815c:	mov	r7, r8
   18160:	mov	r8, r3
   18164:	ldrh	r0, [r2, #10]
   18168:	cmp	r0, #0
   1816c:	beq	17d54 <test_sort_find@@Base+0x894>
   18170:	ldr	r3, [r1, r0]
   18174:	add	r0, r1, r0
   18178:	add	r3, r3, #4
   1817c:	adds	r0, r0, r3
   18180:	beq	181f0 <test_sort_find@@Base+0xd30>
   18184:	ldr	r9, [r0, #-4]
   18188:	mov	r1, r6
   1818c:	cmp	r9, #5
   18190:	movcc	r2, r9
   18194:	movcs	r2, #5
   18198:	bl	129f0 <strncmp@plt>
   1819c:	cmp	r0, #0
   181a0:	bne	181ec <test_sort_find@@Base+0xd2c>
   181a4:	cmp	r9, #4
   181a8:	bls	181f0 <test_sort_find@@Base+0xd30>
   181ac:	cmp	r8, r5
   181b0:	bls	18200 <test_sort_find@@Base+0xd40>
   181b4:	sub	r3, r8, r5
   181b8:	add	r3, r5, r3, lsr #1
   181bc:	cmp	r3, #4
   181c0:	add	r0, r4, r3, lsl #2
   181c4:	bhi	18fd4 <test_sort_find@@Base+0x1b14>
   181c8:	ldr	r2, [r4, r3, lsl #2]
   181cc:	adds	r1, r0, r2
   181d0:	beq	18090 <test_sort_find@@Base+0xbd0>
   181d4:	ldr	r2, [r0, r2]
   181d8:	sub	r2, r1, r2
   181dc:	ldrh	r0, [r2]
   181e0:	cmp	r0, #11
   181e4:	bls	17d54 <test_sort_find@@Base+0x894>
   181e8:	b	1815c <test_sort_find@@Base+0xc9c>
   181ec:	bge	181ac <test_sort_find@@Base+0xcec>
   181f0:	add	r5, r8, #1
   181f4:	cmp	r5, r7
   181f8:	bcc	18124 <test_sort_find@@Base+0xc64>
   181fc:	mov	r8, r7
   18200:	cmp	r5, r8
   18204:	beq	18220 <test_sort_find@@Base+0xd60>
   18208:	ldr	r0, [pc, #776]	; 18518 <test_sort_find@@Base+0x1058>
   1820c:	add	r0, pc, r0
   18210:	bl	1296c <puts@plt>
   18214:	mvn	r3, #0
   18218:	str	r3, [sp, #28]
   1821c:	b	1807c <test_sort_find@@Base+0xbbc>
   18220:	ldr	r3, [r4, r5, lsl #2]
   18224:	add	r0, r4, r5, lsl #2
   18228:	add	r0, r0, r3
   1822c:	bl	137d4 <_start@@Base+0x3e8>
   18230:	subs	r3, r0, #0
   18234:	beq	18208 <test_sort_find@@Base+0xd48>
   18238:	ldr	r6, [r3, #-4]
   1823c:	ldr	r1, [pc, #728]	; 1851c <test_sort_find@@Base+0x105c>
   18240:	cmp	r6, #5
   18244:	movcc	r2, r6
   18248:	movcs	r2, #5
   1824c:	add	r1, pc, r1
   18250:	bl	129f0 <strncmp@plt>
   18254:	subs	r8, r0, #0
   18258:	bne	18208 <test_sort_find@@Base+0xd48>
   1825c:	cmp	r6, #5
   18260:	bne	18208 <test_sort_find@@Base+0xd48>
   18264:	ldr	r7, [pc, #692]	; 18520 <test_sort_find@@Base+0x1060>
   18268:	cmp	r5, #3
   1826c:	add	r7, pc, r7
   18270:	mov	r6, #4
   18274:	bne	18208 <test_sort_find@@Base+0xd48>
   18278:	sub	r5, r6, r8
   1827c:	add	r5, r8, r5, lsr #1
   18280:	cmp	r5, #4
   18284:	add	r2, r4, r5, lsl #2
   18288:	bhi	18fd4 <test_sort_find@@Base+0x1b14>
   1828c:	ldr	r3, [r4, r5, lsl #2]
   18290:	adds	r1, r2, r3
   18294:	beq	18090 <test_sort_find@@Base+0xbd0>
   18298:	ldr	r2, [r2, r3]
   1829c:	sub	r2, r1, r2
   182a0:	ldrh	r3, [r2]
   182a4:	cmp	r3, #11
   182a8:	bhi	182b4 <test_sort_find@@Base+0xdf4>
   182ac:	b	17d54 <test_sort_find@@Base+0x894>
   182b0:	mov	r5, r3
   182b4:	ldrh	r0, [r2, #10]
   182b8:	cmp	r0, #0
   182bc:	beq	17d54 <test_sort_find@@Base+0x894>
   182c0:	ldr	r3, [r1, r0]
   182c4:	add	r0, r1, r0
   182c8:	add	r3, r3, #4
   182cc:	adds	r0, r0, r3
   182d0:	beq	18344 <test_sort_find@@Base+0xe84>
   182d4:	ldr	r9, [r0, #-4]
   182d8:	mov	r1, r7
   182dc:	cmp	r9, #5
   182e0:	movcc	r2, r9
   182e4:	movcs	r2, #5
   182e8:	bl	129f0 <strncmp@plt>
   182ec:	cmp	r0, #0
   182f0:	bne	18340 <test_sort_find@@Base+0xe80>
   182f4:	cmp	r9, #4
   182f8:	bls	18344 <test_sort_find@@Base+0xe84>
   182fc:	cmp	r8, r5
   18300:	bcs	18354 <test_sort_find@@Base+0xe94>
   18304:	sub	r3, r5, r8
   18308:	add	r3, r8, r3, lsr #1
   1830c:	cmp	r3, #4
   18310:	add	r0, r4, r3, lsl #2
   18314:	bhi	18fd4 <test_sort_find@@Base+0x1b14>
   18318:	ldr	r2, [r4, r3, lsl #2]
   1831c:	adds	r1, r0, r2
   18320:	beq	18090 <test_sort_find@@Base+0xbd0>
   18324:	ldr	r2, [r0, r2]
   18328:	mov	r6, r5
   1832c:	sub	r2, r1, r2
   18330:	ldrh	r0, [r2]
   18334:	cmp	r0, #11
   18338:	bls	17d54 <test_sort_find@@Base+0x894>
   1833c:	b	182b0 <test_sort_find@@Base+0xdf0>
   18340:	bge	182fc <test_sort_find@@Base+0xe3c>
   18344:	add	r8, r5, #1
   18348:	cmp	r8, r6
   1834c:	bcc	18278 <test_sort_find@@Base+0xdb8>
   18350:	mov	r5, r6
   18354:	cmp	r8, r5
   18358:	beq	18374 <test_sort_find@@Base+0xeb4>
   1835c:	ldr	r0, [pc, #448]	; 18524 <test_sort_find@@Base+0x1064>
   18360:	add	r0, pc, r0
   18364:	bl	1296c <puts@plt>
   18368:	mvn	r3, #0
   1836c:	str	r3, [sp, #28]
   18370:	b	1807c <test_sort_find@@Base+0xbbc>
   18374:	ldr	r3, [r4, r8, lsl #2]
   18378:	add	r0, r4, r8, lsl #2
   1837c:	add	r0, r0, r3
   18380:	bl	137d4 <_start@@Base+0x3e8>
   18384:	subs	r3, r0, #0
   18388:	beq	1835c <test_sort_find@@Base+0xe9c>
   1838c:	ldr	r5, [r3, #-4]
   18390:	ldr	r1, [pc, #400]	; 18528 <test_sort_find@@Base+0x1068>
   18394:	cmp	r5, #5
   18398:	movcc	r2, r5
   1839c:	movcs	r2, #5
   183a0:	add	r1, pc, r1
   183a4:	bl	129f0 <strncmp@plt>
   183a8:	cmp	r0, #0
   183ac:	bne	1835c <test_sort_find@@Base+0xe9c>
   183b0:	cmp	r5, #5
   183b4:	bne	1835c <test_sort_find@@Base+0xe9c>
   183b8:	cmp	r8, #3
   183bc:	bne	1835c <test_sort_find@@Base+0xe9c>
   183c0:	ldr	r6, [pc, #356]	; 1852c <test_sort_find@@Base+0x106c>
   183c4:	mov	r8, r0
   183c8:	add	r6, pc, r6
   183cc:	mov	r7, #4
   183d0:	sub	r5, r7, r8
   183d4:	add	r5, r8, r5, lsr #1
   183d8:	cmp	r5, #4
   183dc:	add	r2, r4, r5, lsl #2
   183e0:	bhi	18094 <test_sort_find@@Base+0xbd4>
   183e4:	ldr	r3, [r4, r5, lsl #2]
   183e8:	adds	r1, r2, r3
   183ec:	beq	18090 <test_sort_find@@Base+0xbd0>
   183f0:	ldr	r2, [r2, r3]
   183f4:	sub	r2, r1, r2
   183f8:	ldrh	r3, [r2]
   183fc:	cmp	r3, #11
   18400:	bhi	18410 <test_sort_find@@Base+0xf50>
   18404:	b	17d54 <test_sort_find@@Base+0x894>
   18408:	mov	r7, r5
   1840c:	mov	r5, r3
   18410:	ldrh	r0, [r2, #10]
   18414:	cmp	r0, #0
   18418:	beq	17d54 <test_sort_find@@Base+0x894>
   1841c:	ldr	r3, [r1, r0]
   18420:	add	r0, r1, r0
   18424:	add	r3, r3, #4
   18428:	add	r0, r0, r3
   1842c:	mov	r1, r6
   18430:	bl	1290c <strcmp@plt>
   18434:	cmp	r0, #0
   18438:	blt	18580 <test_sort_find@@Base+0x10c0>
   1843c:	cmp	r5, r8
   18440:	bls	18590 <test_sort_find@@Base+0x10d0>
   18444:	sub	r3, r5, r8
   18448:	add	r3, r8, r3, lsr #1
   1844c:	cmp	r3, #4
   18450:	add	r0, r4, r3, lsl #2
   18454:	bhi	18094 <test_sort_find@@Base+0xbd4>
   18458:	ldr	r2, [r4, r3, lsl #2]
   1845c:	adds	r1, r0, r2
   18460:	beq	18090 <test_sort_find@@Base+0xbd0>
   18464:	ldr	r2, [r0, r2]
   18468:	sub	r2, r1, r2
   1846c:	ldrh	r0, [r2]
   18470:	cmp	r0, #11
   18474:	bls	17d54 <test_sort_find@@Base+0x894>
   18478:	b	18408 <test_sort_find@@Base+0xf48>
   1847c:	andeq	sp, r0, ip, lsr #30
   18480:	andeq	r1, r2, ip, lsl #22
   18484:	andeq	lr, r0, r8, lsr #32
   18488:	andeq	lr, r0, r0, lsl #13
   1848c:	andeq	sp, r0, r8, lsr r2
   18490:	andeq	lr, r0, ip, asr #12
   18494:	andeq	sp, r0, r4, asr #3
   18498:	andeq	lr, r0, r4, lsl #12
   1849c:	andeq	sp, r0, r0, asr r1
   184a0:	strdeq	lr, [r0], -r0
   184a4:	ldrdeq	sp, [r0], -ip
   184a8:	andeq	lr, r0, ip, lsl r5
   184ac:	andeq	sp, r0, r8, rrx
   184b0:	andeq	sp, r0, r8
   184b4:	andeq	r0, r0, r8, rrx
   184b8:	muleq	r0, ip, sl
   184bc:	movtpl	r4, #61261	; 0xef4d
   184c0:	andeq	ip, r0, r4, asr pc
   184c4:	andeq	lr, r0, r0, ror #5
   184c8:	andeq	lr, r0, r4, asr #20
   184cc:	andeq	r0, r0, fp, ror r4
   184d0:	andeq	lr, r0, r0, asr #19
   184d4:	andeq	lr, r0, r0, ror #14
   184d8:	andeq	lr, r0, ip, lsr #1
   184dc:	andeq	lr, r0, r8, asr r0
   184e0:	ldrdeq	sp, [r0], -r8
   184e4:	andeq	sp, r0, r4, asr #30
   184e8:	andeq	sp, r0, r4, ror #30
   184ec:	andeq	ip, r0, r0, asr sl
   184f0:	andeq	sp, r0, ip, asr #2
   184f4:	andeq	sp, r0, r4, lsr #5
   184f8:			; <UNDEFINED> instruction: 0x000002bb
   184fc:	andeq	lr, r0, r8, ror #6
   18500:	andeq	ip, r0, r0, lsl r7
   18504:	andeq	ip, r0, ip, lsl #28
   18508:	andeq	ip, r0, ip, lsr #30
   1850c:			; <UNDEFINED> instruction: 0x000002b5
   18510:	andeq	sp, r0, r0, lsl fp
   18514:	andeq	lr, r0, r0, ror #5
   18518:	strdeq	lr, [r0], -ip
   1851c:			; <UNDEFINED> instruction: 0x0000e1b4
   18520:	ldrdeq	lr, [r0], -r0
   18524:	andeq	lr, r0, r4, ror #1
   18528:	muleq	r0, ip, r0
   1852c:	andeq	lr, r0, r0, lsr #1
   18530:	strdeq	sp, [r0], -r4
   18534:	andeq	sp, r0, r0, lsl #28
   18538:	ldrdeq	sp, [r0], -r0
   1853c:	andeq	sp, r0, ip, asr #10
   18540:	andeq	sp, r0, r0, ror #27
   18544:			; <UNDEFINED> instruction: 0x0000dcb4
   18548:	andeq	sp, r0, r4, asr #24
   1854c:	andeq	sp, r0, ip, ror ip
   18550:	andeq	sp, r0, r8, lsr #7
   18554:	andeq	sp, r0, r4, lsr #6
   18558:	andeq	sp, r0, r0, lsl #22
   1855c:	andeq	sp, r0, r8, ror #21
   18560:	ldrdeq	sp, [r0], -r4
   18564:	muleq	r0, r4, r3
   18568:	andeq	sp, r0, r4, asr #8
   1856c:	andeq	sp, r0, ip, ror #7
   18570:	strdeq	sp, [r0], -r4
   18574:	andeq	sp, r0, ip, asr r3
   18578:	andeq	sp, r0, r4, ror #6
   1857c:	andeq	sp, r0, ip, ror #6
   18580:	add	r8, r5, #1
   18584:	cmp	r8, r7
   18588:	bcc	183d0 <test_sort_find@@Base+0xf10>
   1858c:	mov	r5, r7
   18590:	cmp	r8, r5
   18594:	beq	187e0 <test_sort_find@@Base+0x1320>
   18598:	ldr	r6, [pc, #-112]	; 18530 <test_sort_find@@Base+0x1070>
   1859c:	mov	r7, #4
   185a0:	mov	r5, #0
   185a4:	add	r6, pc, r6
   185a8:	sub	r8, r7, r5
   185ac:	add	r8, r5, r8, lsr #1
   185b0:	cmp	r8, #4
   185b4:	add	r2, r4, r8, lsl #2
   185b8:	bhi	18094 <test_sort_find@@Base+0xbd4>
   185bc:	ldr	r3, [r4, r8, lsl #2]
   185c0:	adds	r1, r2, r3
   185c4:	beq	18090 <test_sort_find@@Base+0xbd0>
   185c8:	ldr	r2, [r2, r3]
   185cc:	sub	r2, r1, r2
   185d0:	ldrh	r3, [r2]
   185d4:	cmp	r3, #11
   185d8:	bhi	185e4 <test_sort_find@@Base+0x1124>
   185dc:	b	17d54 <test_sort_find@@Base+0x894>
   185e0:	mov	r8, r3
   185e4:	ldrh	r0, [r2, #10]
   185e8:	cmp	r0, #0
   185ec:	beq	17d54 <test_sort_find@@Base+0x894>
   185f0:	ldr	r3, [r1, r0]
   185f4:	add	r0, r1, r0
   185f8:	add	r3, r3, #4
   185fc:	add	r0, r0, r3
   18600:	mov	r1, r6
   18604:	bl	1290c <strcmp@plt>
   18608:	cmp	r0, #0
   1860c:	blt	18654 <test_sort_find@@Base+0x1194>
   18610:	cmp	r8, r5
   18614:	bls	18664 <test_sort_find@@Base+0x11a4>
   18618:	sub	r3, r8, r5
   1861c:	add	r3, r5, r3, lsr #1
   18620:	cmp	r3, #4
   18624:	add	r0, r4, r3, lsl #2
   18628:	bhi	18094 <test_sort_find@@Base+0xbd4>
   1862c:	ldr	r2, [r4, r3, lsl #2]
   18630:	adds	r1, r0, r2
   18634:	beq	18090 <test_sort_find@@Base+0xbd0>
   18638:	ldr	r2, [r0, r2]
   1863c:	mov	r7, r8
   18640:	sub	r2, r1, r2
   18644:	ldrh	r0, [r2]
   18648:	cmp	r0, #11
   1864c:	bls	17d54 <test_sort_find@@Base+0x894>
   18650:	b	185e0 <test_sort_find@@Base+0x1120>
   18654:	add	r5, r8, #1
   18658:	cmp	r5, r7
   1865c:	bcc	185a8 <test_sort_find@@Base+0x10e8>
   18660:	mov	r8, r7
   18664:	cmp	r5, r8
   18668:	beq	18684 <test_sort_find@@Base+0x11c4>
   1866c:	ldr	r0, [pc, #-320]	; 18534 <test_sort_find@@Base+0x1074>
   18670:	add	r0, pc, r0
   18674:	bl	1296c <puts@plt>
   18678:	mvn	r3, #0
   1867c:	str	r3, [sp, #28]
   18680:	b	1807c <test_sort_find@@Base+0xbbc>
   18684:	ldr	r2, [r4, r5, lsl #2]
   18688:	add	r1, r4, r5, lsl #2
   1868c:	adds	r3, r1, r2
   18690:	beq	18090 <test_sort_find@@Base+0xbd0>
   18694:	ldr	r2, [r1, r2]
   18698:	sub	r2, r3, r2
   1869c:	ldrh	r1, [r2]
   186a0:	cmp	r1, #11
   186a4:	bls	17d54 <test_sort_find@@Base+0x894>
   186a8:	ldrh	r2, [r2, #10]
   186ac:	cmp	r2, #0
   186b0:	beq	17d54 <test_sort_find@@Base+0x894>
   186b4:	ldr	r0, [r3, r2]
   186b8:	ldr	r1, [pc, #-392]	; 18538 <test_sort_find@@Base+0x1078>
   186bc:	add	r3, r3, r2
   186c0:	add	r0, r0, #4
   186c4:	add	r0, r3, r0
   186c8:	add	r1, pc, r1
   186cc:	bl	1290c <strcmp@plt>
   186d0:	cmp	r5, #0
   186d4:	cmpeq	r0, #0
   186d8:	movne	r5, #1
   186dc:	moveq	r5, #0
   186e0:	bne	1866c <test_sort_find@@Base+0x11ac>
   186e4:	ldr	r6, [pc, #-432]	; 1853c <test_sort_find@@Base+0x107c>
   186e8:	mov	r7, #4
   186ec:	add	r6, pc, r6
   186f0:	sub	r8, r7, r5
   186f4:	add	r8, r5, r8, lsr #1
   186f8:	cmp	r8, #4
   186fc:	add	r2, r4, r8, lsl #2
   18700:	bhi	18094 <test_sort_find@@Base+0xbd4>
   18704:	ldr	r3, [r4, r8, lsl #2]
   18708:	adds	r1, r2, r3
   1870c:	beq	18090 <test_sort_find@@Base+0xbd0>
   18710:	ldr	r2, [r2, r3]
   18714:	sub	r2, r1, r2
   18718:	ldrh	r3, [r2]
   1871c:	cmp	r3, #11
   18720:	bhi	18730 <test_sort_find@@Base+0x1270>
   18724:	b	17d54 <test_sort_find@@Base+0x894>
   18728:	mov	r7, r8
   1872c:	mov	r8, r3
   18730:	ldrh	r0, [r2, #10]
   18734:	cmp	r0, #0
   18738:	beq	17d54 <test_sort_find@@Base+0x894>
   1873c:	ldr	r3, [r1, r0]
   18740:	add	r0, r1, r0
   18744:	add	r3, r3, #4
   18748:	add	r0, r0, r3
   1874c:	mov	r1, r6
   18750:	bl	1290c <strcmp@plt>
   18754:	cmp	r0, #0
   18758:	blt	1879c <test_sort_find@@Base+0x12dc>
   1875c:	cmp	r8, r5
   18760:	bls	187ac <test_sort_find@@Base+0x12ec>
   18764:	sub	r3, r8, r5
   18768:	add	r3, r5, r3, lsr #1
   1876c:	cmp	r3, #4
   18770:	add	r0, r4, r3, lsl #2
   18774:	bhi	18094 <test_sort_find@@Base+0xbd4>
   18778:	ldr	r2, [r4, r3, lsl #2]
   1877c:	adds	r1, r0, r2
   18780:	beq	18090 <test_sort_find@@Base+0xbd0>
   18784:	ldr	r2, [r0, r2]
   18788:	sub	r2, r1, r2
   1878c:	ldrh	r0, [r2]
   18790:	cmp	r0, #11
   18794:	bls	17d54 <test_sort_find@@Base+0x894>
   18798:	b	18728 <test_sort_find@@Base+0x1268>
   1879c:	add	r5, r8, #1
   187a0:	cmp	r7, r5
   187a4:	bhi	186f0 <test_sort_find@@Base+0x1230>
   187a8:	mov	r8, r7
   187ac:	cmp	r8, r5
   187b0:	beq	1884c <test_sort_find@@Base+0x138c>
   187b4:	mvn	r8, #0
   187b8:	ldr	r0, [pc, #-640]	; 18540 <test_sort_find@@Base+0x1080>
   187bc:	add	r0, pc, r0
   187c0:	bl	1296c <puts@plt>
   187c4:	ldr	r0, [pc, #-648]	; 18544 <test_sort_find@@Base+0x1084>
   187c8:	mov	r1, r8
   187cc:	add	r0, pc, r0
   187d0:	bl	12918 <printf@plt>
   187d4:	mvn	r3, #0
   187d8:	str	r3, [sp, #28]
   187dc:	b	1807c <test_sort_find@@Base+0xbbc>
   187e0:	ldr	r2, [r4, r8, lsl #2]
   187e4:	add	r8, r4, r8, lsl #2
   187e8:	adds	r3, r8, r2
   187ec:	beq	18090 <test_sort_find@@Base+0xbd0>
   187f0:	ldr	r2, [r8, r2]
   187f4:	sub	r2, r3, r2
   187f8:	ldrh	r1, [r2]
   187fc:	cmp	r1, #11
   18800:	bls	17d54 <test_sort_find@@Base+0x894>
   18804:	ldrh	r2, [r2, #10]
   18808:	cmp	r2, #0
   1880c:	beq	17d54 <test_sort_find@@Base+0x894>
   18810:	ldr	r0, [r3, r2]
   18814:	ldr	r1, [pc, #-724]	; 18548 <test_sort_find@@Base+0x1088>
   18818:	add	r3, r3, r2
   1881c:	add	r0, r0, #4
   18820:	add	r0, r3, r0
   18824:	add	r1, pc, r1
   18828:	bl	1290c <strcmp@plt>
   1882c:	cmp	r0, #0
   18830:	bne	18598 <test_sort_find@@Base+0x10d8>
   18834:	ldr	r0, [pc, #-752]	; 1854c <test_sort_find@@Base+0x108c>
   18838:	add	r0, pc, r0
   1883c:	bl	1296c <puts@plt>
   18840:	mvn	r3, #0
   18844:	str	r3, [sp, #28]
   18848:	b	1807c <test_sort_find@@Base+0xbbc>
   1884c:	ldr	r2, [r4, r8, lsl #2]
   18850:	add	r1, r4, r8, lsl #2
   18854:	adds	r3, r1, r2
   18858:	beq	18090 <test_sort_find@@Base+0xbd0>
   1885c:	ldr	r2, [r1, r2]
   18860:	sub	r2, r3, r2
   18864:	ldrh	r1, [r2]
   18868:	cmp	r1, #11
   1886c:	bls	17d54 <test_sort_find@@Base+0x894>
   18870:	ldrh	r2, [r2, #10]
   18874:	cmp	r2, #0
   18878:	beq	17d54 <test_sort_find@@Base+0x894>
   1887c:	ldr	r0, [r3, r2]
   18880:	ldr	r1, [pc, #-824]	; 18550 <test_sort_find@@Base+0x1090>
   18884:	add	r3, r3, r2
   18888:	add	r0, r0, #4
   1888c:	add	r0, r3, r0
   18890:	add	r1, pc, r1
   18894:	bl	1290c <strcmp@plt>
   18898:	cmp	r0, #0
   1889c:	bne	187b4 <test_sort_find@@Base+0x12f4>
   188a0:	ldr	r5, [pc, #-852]	; 18554 <test_sort_find@@Base+0x1094>
   188a4:	cmp	r8, #1
   188a8:	add	r5, pc, r5
   188ac:	mov	r7, r0
   188b0:	mov	r6, #4
   188b4:	bne	187b8 <test_sort_find@@Base+0x12f8>
   188b8:	sub	r8, r6, r7
   188bc:	add	r8, r7, r8, lsr #1
   188c0:	cmp	r8, #4
   188c4:	add	r2, r4, r8, lsl #2
   188c8:	bhi	18094 <test_sort_find@@Base+0xbd4>
   188cc:	ldr	r3, [r4, r8, lsl #2]
   188d0:	adds	r1, r2, r3
   188d4:	beq	18090 <test_sort_find@@Base+0xbd0>
   188d8:	ldr	r2, [r2, r3]
   188dc:	sub	r2, r1, r2
   188e0:	ldrh	r3, [r2]
   188e4:	cmp	r3, #11
   188e8:	bhi	188f4 <test_sort_find@@Base+0x1434>
   188ec:	b	17d54 <test_sort_find@@Base+0x894>
   188f0:	mov	r8, r3
   188f4:	ldrh	r0, [r2, #10]
   188f8:	cmp	r0, #0
   188fc:	beq	17d54 <test_sort_find@@Base+0x894>
   18900:	ldr	r3, [r1, r0]
   18904:	add	r0, r1, r0
   18908:	add	r3, r3, #4
   1890c:	add	r0, r0, r3
   18910:	mov	r1, r5
   18914:	bl	1290c <strcmp@plt>
   18918:	cmp	r0, #0
   1891c:	blt	18964 <test_sort_find@@Base+0x14a4>
   18920:	cmp	r7, r8
   18924:	bcs	189ac <test_sort_find@@Base+0x14ec>
   18928:	sub	r3, r8, r7
   1892c:	add	r3, r7, r3, lsr #1
   18930:	cmp	r3, #4
   18934:	add	r0, r4, r3, lsl #2
   18938:	bhi	18094 <test_sort_find@@Base+0xbd4>
   1893c:	ldr	r2, [r4, r3, lsl #2]
   18940:	adds	r1, r0, r2
   18944:	beq	18090 <test_sort_find@@Base+0xbd0>
   18948:	ldr	r2, [r0, r2]
   1894c:	mov	r6, r8
   18950:	sub	r2, r1, r2
   18954:	ldrh	r0, [r2]
   18958:	cmp	r0, #11
   1895c:	bls	17d54 <test_sort_find@@Base+0x894>
   18960:	b	188f0 <test_sort_find@@Base+0x1430>
   18964:	add	r7, r8, #1
   18968:	cmp	r6, r7
   1896c:	bhi	188b8 <test_sort_find@@Base+0x13f8>
   18970:	str	r6, [sp, #8]
   18974:	ldr	r3, [sp, #8]
   18978:	cmp	r3, r7
   1897c:	beq	189b4 <test_sort_find@@Base+0x14f4>
   18980:	mvn	r4, #0
   18984:	ldr	r0, [pc, #-1076]	; 18558 <test_sort_find@@Base+0x1098>
   18988:	add	r0, pc, r0
   1898c:	bl	1296c <puts@plt>
   18990:	ldr	r0, [pc, #-1084]	; 1855c <test_sort_find@@Base+0x109c>
   18994:	mov	r1, r4
   18998:	add	r0, pc, r0
   1899c:	bl	12918 <printf@plt>
   189a0:	mvn	r3, #0
   189a4:	str	r3, [sp, #28]
   189a8:	b	1807c <test_sort_find@@Base+0xbbc>
   189ac:	str	r8, [sp, #8]
   189b0:	b	18974 <test_sort_find@@Base+0x14b4>
   189b4:	ldr	r2, [r4, r3, lsl #2]
   189b8:	add	r1, r4, r3, lsl #2
   189bc:	adds	r3, r1, r2
   189c0:	beq	18090 <test_sort_find@@Base+0xbd0>
   189c4:	ldr	r2, [r1, r2]
   189c8:	sub	r2, r3, r2
   189cc:	ldrh	r1, [r2]
   189d0:	cmp	r1, #11
   189d4:	bls	17d54 <test_sort_find@@Base+0x894>
   189d8:	ldrh	r2, [r2, #10]
   189dc:	cmp	r2, #0
   189e0:	beq	17d54 <test_sort_find@@Base+0x894>
   189e4:	ldr	r0, [r3, r2]
   189e8:	ldr	r1, [pc, #-1168]	; 18560 <test_sort_find@@Base+0x10a0>
   189ec:	add	r3, r3, r2
   189f0:	add	r0, r0, #4
   189f4:	add	r0, r3, r0
   189f8:	add	r1, pc, r1
   189fc:	bl	1290c <strcmp@plt>
   18a00:	subs	r3, r0, #0
   18a04:	str	r3, [sp, #28]
   18a08:	bne	18980 <test_sort_find@@Base+0x14c0>
   18a0c:	ldr	r3, [sp, #8]
   18a10:	cmp	r3, #4
   18a14:	movne	r4, r3
   18a18:	bne	18984 <test_sort_find@@Base+0x14c4>
   18a1c:	ldr	r3, [sp, #8]
   18a20:	str	r3, [sp, #12]
   18a24:	mov	r3, #2
   18a28:	str	r3, [sp, #16]
   18a2c:	b	18b28 <test_sort_find@@Base+0x1668>
   18a30:	ldr	r6, [sp, #8]
   18a34:	lsl	sl, r5, #2
   18a38:	cmp	r5, r7
   18a3c:	add	r2, r4, sl
   18a40:	bcs	18094 <test_sort_find@@Base+0xbd4>
   18a44:	ldr	r8, [r4, r5, lsl #2]
   18a48:	adds	r3, r2, r8
   18a4c:	beq	18090 <test_sort_find@@Base+0xbd0>
   18a50:	ldr	r2, [r2, r8]
   18a54:	sub	r2, r3, r2
   18a58:	ldrh	r1, [r2]
   18a5c:	cmp	r1, #11
   18a60:	bls	17d54 <test_sort_find@@Base+0x894>
   18a64:	ldrh	r2, [r2, #10]
   18a68:	cmp	r2, #0
   18a6c:	beq	17d54 <test_sort_find@@Base+0x894>
   18a70:	ldr	r0, [r3, r2]
   18a74:	lsl	fp, r6, #2
   18a78:	add	r3, r3, r2
   18a7c:	add	r0, r0, #4
   18a80:	cmp	r6, r7
   18a84:	add	r0, r3, r0
   18a88:	add	r3, r4, fp
   18a8c:	bcs	18094 <test_sort_find@@Base+0xbd4>
   18a90:	ldr	r7, [r4, r6, lsl #2]
   18a94:	adds	r1, r3, r7
   18a98:	beq	18090 <test_sort_find@@Base+0xbd0>
   18a9c:	ldr	r3, [r3, r7]
   18aa0:	sub	r3, r1, r3
   18aa4:	ldrh	r2, [r3]
   18aa8:	cmp	r2, #11
   18aac:	bls	17d54 <test_sort_find@@Base+0x894>
   18ab0:	ldrh	r2, [r3, #10]
   18ab4:	cmp	r2, #0
   18ab8:	beq	17d54 <test_sort_find@@Base+0x894>
   18abc:	ldr	r3, [r1, r2]
   18ac0:	add	r1, r1, r2
   18ac4:	add	r3, r3, #4
   18ac8:	adds	r1, r1, r3
   18acc:	beq	18c58 <test_sort_find@@Base+0x1798>
   18ad0:	cmp	r0, #0
   18ad4:	ldr	r3, [r1, #-4]
   18ad8:	beq	18c68 <test_sort_find@@Base+0x17a8>
   18adc:	ldr	r9, [r0, #-4]
   18ae0:	str	r3, [sp, #4]
   18ae4:	cmp	r9, r3
   18ae8:	movcs	r2, r3
   18aec:	movcc	r2, r9
   18af0:	bl	129f0 <strncmp@plt>
   18af4:	ldr	r3, [sp, #4]
   18af8:	cmp	r0, #0
   18afc:	bne	18c1c <test_sort_find@@Base+0x175c>
   18b00:	cmp	r3, r9
   18b04:	bhi	18c20 <test_sort_find@@Base+0x1760>
   18b08:	ldr	r3, [sp, #16]
   18b0c:	sub	r3, r3, #1
   18b10:	str	r3, [sp, #16]
   18b14:	cmn	r3, #1
   18b18:	ldr	r3, [sp, #12]
   18b1c:	sub	r3, r3, #2
   18b20:	str	r3, [sp, #12]
   18b24:	beq	18c88 <test_sort_find@@Base+0x17c8>
   18b28:	ldr	r3, [sp, #12]
   18b2c:	cmp	r3, #4
   18b30:	bhi	18b08 <test_sort_find@@Base+0x1648>
   18b34:	ldr	r5, [sp, #16]
   18b38:	ldr	r9, [sp, #12]
   18b3c:	cmp	r9, #4
   18b40:	ldr	r7, [r4, #-4]
   18b44:	beq	18a30 <test_sort_find@@Base+0x1570>
   18b48:	lsl	r3, r9, #2
   18b4c:	cmp	r9, r7
   18b50:	add	r0, r4, r3
   18b54:	bcs	18094 <test_sort_find@@Base+0xbd4>
   18b58:	ldr	r1, [r4, r9, lsl #2]
   18b5c:	adds	r2, r0, r1
   18b60:	beq	18090 <test_sort_find@@Base+0xbd0>
   18b64:	ldr	r1, [r0, r1]
   18b68:	sub	r1, r2, r1
   18b6c:	ldrh	r0, [r1]
   18b70:	cmp	r0, #11
   18b74:	bls	17d54 <test_sort_find@@Base+0x894>
   18b78:	ldrh	r1, [r1, #10]
   18b7c:	cmp	r1, #0
   18b80:	beq	17d54 <test_sort_find@@Base+0x894>
   18b84:	ldr	r0, [r2, r1]
   18b88:	add	r6, r9, #1
   18b8c:	add	r2, r2, r1
   18b90:	add	r3, r3, #4
   18b94:	add	r0, r0, #4
   18b98:	cmp	r7, r6
   18b9c:	add	r0, r2, r0
   18ba0:	add	r2, r4, r3
   18ba4:	bls	18094 <test_sort_find@@Base+0xbd4>
   18ba8:	ldr	r3, [r4, r3]
   18bac:	adds	r1, r2, r3
   18bb0:	beq	18090 <test_sort_find@@Base+0xbd0>
   18bb4:	ldr	r3, [r2, r3]
   18bb8:	sub	r3, r1, r3
   18bbc:	ldrh	r2, [r3]
   18bc0:	cmp	r2, #11
   18bc4:	bls	17d54 <test_sort_find@@Base+0x894>
   18bc8:	ldrh	r2, [r3, #10]
   18bcc:	cmp	r2, #0
   18bd0:	beq	17d54 <test_sort_find@@Base+0x894>
   18bd4:	ldr	r3, [r1, r2]
   18bd8:	add	r1, r1, r2
   18bdc:	add	r3, r3, #4
   18be0:	adds	r1, r1, r3
   18be4:	beq	18c70 <test_sort_find@@Base+0x17b0>
   18be8:	cmp	r0, #0
   18bec:	ldr	sl, [r1, #-4]
   18bf0:	beq	18c80 <test_sort_find@@Base+0x17c0>
   18bf4:	ldr	r8, [r0, #-4]
   18bf8:	cmp	sl, r8
   18bfc:	movcc	r2, sl
   18c00:	movcs	r2, r8
   18c04:	bl	129f0 <strncmp@plt>
   18c08:	cmp	r0, #0
   18c0c:	bne	18c4c <test_sort_find@@Base+0x178c>
   18c10:	cmp	sl, r8
   18c14:	movls	r6, r9
   18c18:	b	18a34 <test_sort_find@@Base+0x1574>
   18c1c:	bge	18b08 <test_sort_find@@Base+0x1648>
   18c20:	sub	r5, r5, r6
   18c24:	lsl	r9, r6, #1
   18c28:	lsl	r5, r5, #2
   18c2c:	sub	r7, r7, r5
   18c30:	add	r8, r8, r5
   18c34:	cmp	r9, #4
   18c38:	str	r7, [r4, sl]
   18c3c:	mov	r5, r6
   18c40:	str	r8, [r4, fp]
   18c44:	bls	18b3c <test_sort_find@@Base+0x167c>
   18c48:	b	18b08 <test_sort_find@@Base+0x1648>
   18c4c:	blt	18a34 <test_sort_find@@Base+0x1574>
   18c50:	mov	r6, r9
   18c54:	b	18a34 <test_sort_find@@Base+0x1574>
   18c58:	cmp	r0, #0
   18c5c:	beq	18b08 <test_sort_find@@Base+0x1648>
   18c60:	mov	r3, #0
   18c64:	b	18adc <test_sort_find@@Base+0x161c>
   18c68:	mov	r9, #0
   18c6c:	b	18b00 <test_sort_find@@Base+0x1640>
   18c70:	cmp	r0, #0
   18c74:	movne	sl, #0
   18c78:	bne	18bf4 <test_sort_find@@Base+0x1734>
   18c7c:	b	18c50 <test_sort_find@@Base+0x1790>
   18c80:	mov	r8, #0
   18c84:	b	18c10 <test_sort_find@@Base+0x1750>
   18c88:	add	r3, r4, #20
   18c8c:	str	r3, [sp, #16]
   18c90:	add	r3, r4, #4
   18c94:	str	r3, [sp, #20]
   18c98:	mvn	r3, #15
   18c9c:	str	r3, [sp, #12]
   18ca0:	b	18d9c <test_sort_find@@Base+0x18dc>
   18ca4:	ldr	r7, [r4, #-4]
   18ca8:	mov	r6, r9
   18cac:	lsl	fp, r5, #2
   18cb0:	cmp	r5, r7
   18cb4:	add	r2, r4, fp
   18cb8:	bcs	18094 <test_sort_find@@Base+0xbd4>
   18cbc:	ldr	r8, [r4, r5, lsl #2]
   18cc0:	adds	r3, r2, r8
   18cc4:	beq	18090 <test_sort_find@@Base+0xbd0>
   18cc8:	ldr	r2, [r2, r8]
   18ccc:	sub	r2, r3, r2
   18cd0:	ldrh	r1, [r2]
   18cd4:	cmp	r1, #11
   18cd8:	bls	17d54 <test_sort_find@@Base+0x894>
   18cdc:	ldrh	r0, [r2, #10]
   18ce0:	cmp	r0, #0
   18ce4:	beq	17d54 <test_sort_find@@Base+0x894>
   18ce8:	ldr	r2, [r3, r0]
   18cec:	cmp	r7, r6
   18cf0:	add	r2, r2, #4
   18cf4:	add	r0, r3, r0
   18cf8:	lsl	r3, r6, #2
   18cfc:	add	r0, r0, r2
   18d00:	add	r2, r4, r3
   18d04:	bls	18094 <test_sort_find@@Base+0xbd4>
   18d08:	ldr	r7, [r4, r6, lsl #2]
   18d0c:	adds	r1, r2, r7
   18d10:	beq	18090 <test_sort_find@@Base+0xbd0>
   18d14:	ldr	r2, [r2, r7]
   18d18:	sub	r2, r1, r2
   18d1c:	ldrh	ip, [r2]
   18d20:	cmp	ip, #11
   18d24:	bls	17d54 <test_sort_find@@Base+0x894>
   18d28:	ldrh	ip, [r2, #10]
   18d2c:	cmp	ip, #0
   18d30:	beq	17d54 <test_sort_find@@Base+0x894>
   18d34:	ldr	r2, [r1, ip]
   18d38:	add	r1, r1, ip
   18d3c:	add	r2, r2, #4
   18d40:	adds	r1, r1, r2
   18d44:	beq	18efc <test_sort_find@@Base+0x1a3c>
   18d48:	cmp	r0, #0
   18d4c:	ldr	r9, [r1, #-4]
   18d50:	beq	18f0c <test_sort_find@@Base+0x1a4c>
   18d54:	ldr	sl, [r0, #-4]
   18d58:	str	r3, [sp, #4]
   18d5c:	cmp	sl, r9
   18d60:	movcc	r2, sl
   18d64:	movcs	r2, r9
   18d68:	bl	129f0 <strncmp@plt>
   18d6c:	ldr	r3, [sp, #4]
   18d70:	cmp	r0, #0
   18d74:	bne	18ebc <test_sort_find@@Base+0x19fc>
   18d78:	cmp	sl, r9
   18d7c:	bcc	18ec0 <test_sort_find@@Base+0x1a00>
   18d80:	ldr	r3, [sp, #16]
   18d84:	ldr	r2, [sp, #20]
   18d88:	cmp	r3, r2
   18d8c:	ldr	r3, [sp, #12]
   18d90:	add	r3, r3, #4
   18d94:	str	r3, [sp, #12]
   18d98:	beq	1807c <test_sort_find@@Base+0xbbc>
   18d9c:	ldr	r1, [sp, #16]
   18da0:	ldr	r0, [sp, #8]
   18da4:	ldr	r3, [r4]
   18da8:	sub	r0, r0, #1
   18dac:	ldr	r2, [r1, #-4]
   18db0:	str	r0, [sp, #8]
   18db4:	ldr	r0, [sp, #12]
   18db8:	mov	r5, #0
   18dbc:	sub	r2, r2, r0
   18dc0:	str	r2, [r4]
   18dc4:	mov	r9, r5
   18dc8:	mov	r2, r1
   18dcc:	add	r3, r0, r3
   18dd0:	str	r3, [r2, #-4]!
   18dd4:	str	r2, [sp, #16]
   18dd8:	ldr	r3, [sp, #8]
   18ddc:	cmp	r9, r3
   18de0:	bcs	18ca4 <test_sort_find@@Base+0x17e4>
   18de4:	ldr	r7, [r4, #-4]
   18de8:	lsl	r3, r9, #2
   18dec:	cmp	r9, r7
   18df0:	add	r0, r4, r3
   18df4:	bcs	18094 <test_sort_find@@Base+0xbd4>
   18df8:	ldr	r1, [r4, r9, lsl #2]
   18dfc:	adds	r2, r0, r1
   18e00:	beq	18090 <test_sort_find@@Base+0xbd0>
   18e04:	ldr	r1, [r0, r1]
   18e08:	sub	r1, r2, r1
   18e0c:	ldrh	r0, [r1]
   18e10:	cmp	r0, #11
   18e14:	bls	17d54 <test_sort_find@@Base+0x894>
   18e18:	ldrh	r1, [r1, #10]
   18e1c:	cmp	r1, #0
   18e20:	beq	17d54 <test_sort_find@@Base+0x894>
   18e24:	ldr	r0, [r2, r1]
   18e28:	add	r6, r9, #1
   18e2c:	add	r2, r2, r1
   18e30:	add	r3, r3, #4
   18e34:	add	r0, r0, #4
   18e38:	cmp	r7, r6
   18e3c:	add	r0, r2, r0
   18e40:	add	r1, r4, r3
   18e44:	bls	18094 <test_sort_find@@Base+0xbd4>
   18e48:	ldr	r2, [r4, r3]
   18e4c:	adds	r3, r1, r2
   18e50:	beq	18090 <test_sort_find@@Base+0xbd0>
   18e54:	ldr	r2, [r1, r2]
   18e58:	sub	r2, r3, r2
   18e5c:	ldrh	r1, [r2]
   18e60:	cmp	r1, #11
   18e64:	bls	17d54 <test_sort_find@@Base+0x894>
   18e68:	ldrh	r2, [r2, #10]
   18e6c:	cmp	r2, #0
   18e70:	beq	17d54 <test_sort_find@@Base+0x894>
   18e74:	ldr	r1, [r3, r2]
   18e78:	add	r3, r3, r2
   18e7c:	add	r1, r1, #4
   18e80:	adds	r1, r3, r1
   18e84:	beq	18f14 <test_sort_find@@Base+0x1a54>
   18e88:	cmp	r0, #0
   18e8c:	ldr	sl, [r1, #-4]
   18e90:	beq	18f24 <test_sort_find@@Base+0x1a64>
   18e94:	ldr	r8, [r0, #-4]
   18e98:	cmp	sl, r8
   18e9c:	movcc	r2, sl
   18ea0:	movcs	r2, r8
   18ea4:	bl	129f0 <strncmp@plt>
   18ea8:	cmp	r0, #0
   18eac:	bne	18ef0 <test_sort_find@@Base+0x1a30>
   18eb0:	cmp	sl, r8
   18eb4:	movls	r6, r9
   18eb8:	b	18cac <test_sort_find@@Base+0x17ec>
   18ebc:	bge	18d80 <test_sort_find@@Base+0x18c0>
   18ec0:	sub	r5, r5, r6
   18ec4:	ldr	r2, [sp, #8]
   18ec8:	lsl	r5, r5, #2
   18ecc:	lsl	r9, r6, #1
   18ed0:	sub	r7, r7, r5
   18ed4:	add	r8, r8, r5
   18ed8:	cmp	r2, r9
   18edc:	str	r7, [r4, fp]
   18ee0:	mov	r5, r6
   18ee4:	str	r8, [r4, r3]
   18ee8:	bcs	18dd8 <test_sort_find@@Base+0x1918>
   18eec:	b	18d80 <test_sort_find@@Base+0x18c0>
   18ef0:	blt	18cac <test_sort_find@@Base+0x17ec>
   18ef4:	mov	r6, r9
   18ef8:	b	18cac <test_sort_find@@Base+0x17ec>
   18efc:	cmp	r0, #0
   18f00:	beq	18d80 <test_sort_find@@Base+0x18c0>
   18f04:	mov	r9, #0
   18f08:	b	18d54 <test_sort_find@@Base+0x1894>
   18f0c:	mov	sl, #0
   18f10:	b	18d78 <test_sort_find@@Base+0x18b8>
   18f14:	cmp	r0, #0
   18f18:	movne	sl, #0
   18f1c:	bne	18e94 <test_sort_find@@Base+0x19d4>
   18f20:	b	18ef4 <test_sort_find@@Base+0x1a34>
   18f24:	mov	r8, #0
   18f28:	b	18eb0 <test_sort_find@@Base+0x19f0>
   18f2c:	ldr	r0, [pc, #-2512]	; 18564 <test_sort_find@@Base+0x10a4>
   18f30:	add	r0, pc, r0
   18f34:	bl	1296c <puts@plt>
   18f38:	mvn	r3, #0
   18f3c:	str	r3, [sp, #28]
   18f40:	b	1807c <test_sort_find@@Base+0xbbc>
   18f44:	ldr	r0, [pc, #-2532]	; 18568 <test_sort_find@@Base+0x10a8>
   18f48:	add	r0, pc, r0
   18f4c:	bl	1296c <puts@plt>
   18f50:	mvn	r3, #0
   18f54:	str	r3, [sp, #28]
   18f58:	b	1807c <test_sort_find@@Base+0xbbc>
   18f5c:	ldr	r0, [pc, #-2552]	; 1856c <test_sort_find@@Base+0x10ac>
   18f60:	add	r0, pc, r0
   18f64:	bl	1296c <puts@plt>
   18f68:	mvn	r3, #0
   18f6c:	str	r3, [sp, #28]
   18f70:	b	1807c <test_sort_find@@Base+0xbbc>
   18f74:	ldr	r0, [pc, #-2572]	; 18570 <test_sort_find@@Base+0x10b0>
   18f78:	add	r0, pc, r0
   18f7c:	bl	1296c <puts@plt>
   18f80:	mvn	r3, #0
   18f84:	str	r3, [sp, #28]
   18f88:	b	1807c <test_sort_find@@Base+0xbbc>
   18f8c:	ldr	r0, [pc, #-2592]	; 18574 <test_sort_find@@Base+0x10b4>
   18f90:	add	r0, pc, r0
   18f94:	bl	1296c <puts@plt>
   18f98:	mvn	r3, #0
   18f9c:	str	r3, [sp, #28]
   18fa0:	b	1807c <test_sort_find@@Base+0xbbc>
   18fa4:	ldr	r0, [pc, #-2612]	; 18578 <test_sort_find@@Base+0x10b8>
   18fa8:	add	r0, pc, r0
   18fac:	bl	1296c <puts@plt>
   18fb0:	mvn	r3, #0
   18fb4:	str	r3, [sp, #28]
   18fb8:	b	1807c <test_sort_find@@Base+0xbbc>
   18fbc:	ldr	r0, [pc, #-2632]	; 1857c <test_sort_find@@Base+0x10bc>
   18fc0:	add	r0, pc, r0
   18fc4:	bl	1296c <puts@plt>
   18fc8:	mvn	r3, #0
   18fcc:	str	r3, [sp, #28]
   18fd0:	b	1807c <test_sort_find@@Base+0xbbc>
   18fd4:	bl	1379c <_start@@Base+0x3b0>
   18fd8:	bl	130f4 <__assert_fail@plt+0x6ec>

00018fdc <test_scan@@Base>:
   18fdc:	ldr	r3, [pc, #3324]	; 19ce0 <test_scan@@Base+0xd04>
   18fe0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18fe4:	add	r3, pc, r3
   18fe8:	sub	sp, sp, #84	; 0x54
   18fec:	ldr	r1, [r3, #1280]	; 0x500
   18ff0:	mov	r4, r0
   18ff4:	ldr	r0, [r3, #1276]	; 0x4fc
   18ff8:	strh	r1, [sp, #76]	; 0x4c
   18ffc:	str	r0, [sp, #72]	; 0x48
   19000:	lsr	r1, r1, #16
   19004:	mov	r0, r4
   19008:	strb	r1, [sp, #78]	; 0x4e
   1900c:	bl	1f0f0 <flatcc_builder_reset@@Base>
   19010:	ldr	r1, [pc, #3276]	; 19ce4 <test_scan@@Base+0xd08>
   19014:	mov	r3, #0
   19018:	mov	r0, r4
   1901c:	mov	r2, r3
   19020:	add	r1, pc, r1
   19024:	bl	1f8b4 <flatcc_builder_start_buffer@@Base>
   19028:	cmp	r0, #0
   1902c:	bne	1903c <test_scan@@Base+0x60>
   19030:	mov	r1, #36	; 0x24
   19034:	mov	r0, r4
   19038:	bl	206ec <flatcc_builder_start_table@@Base>
   1903c:	ldr	r1, [pc, #3236]	; 19ce8 <test_scan@@Base+0xd0c>
   19040:	mov	r0, r4
   19044:	add	r1, pc, r1
   19048:	bl	21f90 <flatcc_builder_create_string_str@@Base>
   1904c:	subs	r5, r0, #0
   19050:	beq	19068 <test_scan@@Base+0x8c>
   19054:	mov	r1, #3
   19058:	mov	r0, r4
   1905c:	bl	2234c <flatcc_builder_table_add_offset@@Base>
   19060:	cmp	r0, #0
   19064:	strne	r5, [r0]
   19068:	mvn	r2, #0
   1906c:	mov	r3, #1
   19070:	str	r2, [sp, #4]
   19074:	str	r3, [sp]
   19078:	mov	r2, #7
   1907c:	add	r1, sp, #72	; 0x48
   19080:	mov	r0, r4
   19084:	bl	212b0 <flatcc_builder_create_vector@@Base>
   19088:	subs	r5, r0, #0
   1908c:	beq	190a4 <test_scan@@Base+0xc8>
   19090:	mov	r1, #5
   19094:	mov	r0, r4
   19098:	bl	2234c <flatcc_builder_table_add_offset@@Base>
   1909c:	cmp	r0, #0
   190a0:	strne	r5, [r0]
   190a4:	mov	r0, r4
   190a8:	bl	20504 <flatcc_builder_start_offset_vector@@Base>
   190ac:	mov	r0, r4
   190b0:	bl	21550 <flatcc_builder_end_offset_vector@@Base>
   190b4:	subs	r5, r0, #0
   190b8:	beq	190d0 <test_scan@@Base+0xf4>
   190bc:	mov	r1, #10
   190c0:	mov	r0, r4
   190c4:	bl	2234c <flatcc_builder_table_add_offset@@Base>
   190c8:	cmp	r0, #0
   190cc:	strne	r5, [r0]
   190d0:	mov	r0, r4
   190d4:	bl	20504 <flatcc_builder_start_offset_vector@@Base>
   190d8:	mov	r1, #36	; 0x24
   190dc:	mov	r0, r4
   190e0:	bl	206ec <flatcc_builder_start_table@@Base>
   190e4:	ldr	r1, [pc, #3072]	; 19cec <test_scan@@Base+0xd10>
   190e8:	mov	r0, r4
   190ec:	add	r1, pc, r1
   190f0:	bl	21f90 <flatcc_builder_create_string_str@@Base>
   190f4:	subs	r5, r0, #0
   190f8:	beq	19110 <test_scan@@Base+0x134>
   190fc:	mov	r1, #3
   19100:	mov	r0, r4
   19104:	bl	2234c <flatcc_builder_table_add_offset@@Base>
   19108:	cmp	r0, #0
   1910c:	strne	r5, [r0]
   19110:	ldr	r1, [pc, #3032]	; 19cf0 <test_scan@@Base+0xd14>
   19114:	mov	r2, #1
   19118:	add	r1, pc, r1
   1911c:	add	r1, r1, #1072	; 0x430
   19120:	add	r1, r1, #12
   19124:	mov	r0, r4
   19128:	bl	21038 <flatcc_builder_check_required@@Base>
   1912c:	cmp	r0, #0
   19130:	beq	1a9a4 <test_scan@@Base+0x19c8>
   19134:	mov	r0, r4
   19138:	bl	210e0 <flatcc_builder_end_table@@Base>
   1913c:	subs	r1, r0, #0
   19140:	beq	1914c <test_scan@@Base+0x170>
   19144:	mov	r0, r4
   19148:	bl	1ff14 <flatcc_builder_offset_vector_push@@Base>
   1914c:	mov	r1, #36	; 0x24
   19150:	mov	r0, r4
   19154:	bl	206ec <flatcc_builder_start_table@@Base>
   19158:	ldr	r1, [pc, #2964]	; 19cf4 <test_scan@@Base+0xd18>
   1915c:	mov	r0, r4
   19160:	add	r1, pc, r1
   19164:	bl	21f90 <flatcc_builder_create_string_str@@Base>
   19168:	subs	r5, r0, #0
   1916c:	beq	19184 <test_scan@@Base+0x1a8>
   19170:	mov	r1, #3
   19174:	mov	r0, r4
   19178:	bl	2234c <flatcc_builder_table_add_offset@@Base>
   1917c:	cmp	r0, #0
   19180:	strne	r5, [r0]
   19184:	ldr	r1, [pc, #2924]	; 19cf8 <test_scan@@Base+0xd1c>
   19188:	mov	r2, #1
   1918c:	add	r1, pc, r1
   19190:	add	r1, r1, #1072	; 0x430
   19194:	add	r1, r1, #12
   19198:	mov	r0, r4
   1919c:	bl	21038 <flatcc_builder_check_required@@Base>
   191a0:	cmp	r0, #0
   191a4:	beq	1a9a4 <test_scan@@Base+0x19c8>
   191a8:	mov	r0, r4
   191ac:	bl	210e0 <flatcc_builder_end_table@@Base>
   191b0:	subs	r1, r0, #0
   191b4:	beq	191c0 <test_scan@@Base+0x1e4>
   191b8:	mov	r0, r4
   191bc:	bl	1ff14 <flatcc_builder_offset_vector_push@@Base>
   191c0:	mov	r1, #36	; 0x24
   191c4:	mov	r0, r4
   191c8:	bl	206ec <flatcc_builder_start_table@@Base>
   191cc:	ldr	r1, [pc, #2856]	; 19cfc <test_scan@@Base+0xd20>
   191d0:	mov	r0, r4
   191d4:	add	r1, pc, r1
   191d8:	bl	21f90 <flatcc_builder_create_string_str@@Base>
   191dc:	subs	r5, r0, #0
   191e0:	beq	191f8 <test_scan@@Base+0x21c>
   191e4:	mov	r1, #3
   191e8:	mov	r0, r4
   191ec:	bl	2234c <flatcc_builder_table_add_offset@@Base>
   191f0:	cmp	r0, #0
   191f4:	strne	r5, [r0]
   191f8:	ldr	r1, [pc, #2816]	; 19d00 <test_scan@@Base+0xd24>
   191fc:	mov	r2, #1
   19200:	add	r1, pc, r1
   19204:	add	r1, r1, #1072	; 0x430
   19208:	add	r1, r1, #12
   1920c:	mov	r0, r4
   19210:	bl	21038 <flatcc_builder_check_required@@Base>
   19214:	cmp	r0, #0
   19218:	beq	1a9a4 <test_scan@@Base+0x19c8>
   1921c:	mov	r0, r4
   19220:	bl	210e0 <flatcc_builder_end_table@@Base>
   19224:	subs	r1, r0, #0
   19228:	beq	19234 <test_scan@@Base+0x258>
   1922c:	mov	r0, r4
   19230:	bl	1ff14 <flatcc_builder_offset_vector_push@@Base>
   19234:	mov	r1, #36	; 0x24
   19238:	mov	r0, r4
   1923c:	bl	206ec <flatcc_builder_start_table@@Base>
   19240:	ldr	r1, [pc, #2748]	; 19d04 <test_scan@@Base+0xd28>
   19244:	mov	r0, r4
   19248:	add	r1, pc, r1
   1924c:	bl	21f90 <flatcc_builder_create_string_str@@Base>
   19250:	subs	r5, r0, #0
   19254:	beq	1926c <test_scan@@Base+0x290>
   19258:	mov	r1, #3
   1925c:	mov	r0, r4
   19260:	bl	2234c <flatcc_builder_table_add_offset@@Base>
   19264:	cmp	r0, #0
   19268:	strne	r5, [r0]
   1926c:	ldr	r1, [pc, #2708]	; 19d08 <test_scan@@Base+0xd2c>
   19270:	mov	r2, #1
   19274:	add	r1, pc, r1
   19278:	add	r1, r1, #1072	; 0x430
   1927c:	add	r1, r1, #12
   19280:	mov	r0, r4
   19284:	bl	21038 <flatcc_builder_check_required@@Base>
   19288:	cmp	r0, #0
   1928c:	beq	1a9a4 <test_scan@@Base+0x19c8>
   19290:	mov	r0, r4
   19294:	bl	210e0 <flatcc_builder_end_table@@Base>
   19298:	subs	r1, r0, #0
   1929c:	beq	192a8 <test_scan@@Base+0x2cc>
   192a0:	mov	r0, r4
   192a4:	bl	1ff14 <flatcc_builder_offset_vector_push@@Base>
   192a8:	mov	r1, #36	; 0x24
   192ac:	mov	r0, r4
   192b0:	bl	206ec <flatcc_builder_start_table@@Base>
   192b4:	ldr	r1, [pc, #2640]	; 19d0c <test_scan@@Base+0xd30>
   192b8:	mov	r0, r4
   192bc:	add	r1, pc, r1
   192c0:	bl	21f90 <flatcc_builder_create_string_str@@Base>
   192c4:	subs	r5, r0, #0
   192c8:	beq	192e0 <test_scan@@Base+0x304>
   192cc:	mov	r1, #3
   192d0:	mov	r0, r4
   192d4:	bl	2234c <flatcc_builder_table_add_offset@@Base>
   192d8:	cmp	r0, #0
   192dc:	strne	r5, [r0]
   192e0:	ldr	r1, [pc, #2600]	; 19d10 <test_scan@@Base+0xd34>
   192e4:	mov	r2, #1
   192e8:	add	r1, pc, r1
   192ec:	add	r1, r1, #1072	; 0x430
   192f0:	add	r1, r1, #12
   192f4:	mov	r0, r4
   192f8:	bl	21038 <flatcc_builder_check_required@@Base>
   192fc:	cmp	r0, #0
   19300:	beq	1a9a4 <test_scan@@Base+0x19c8>
   19304:	mov	r0, r4
   19308:	bl	210e0 <flatcc_builder_end_table@@Base>
   1930c:	subs	r1, r0, #0
   19310:	beq	1931c <test_scan@@Base+0x340>
   19314:	mov	r0, r4
   19318:	bl	1ff14 <flatcc_builder_offset_vector_push@@Base>
   1931c:	mov	r0, r4
   19320:	bl	21550 <flatcc_builder_end_offset_vector@@Base>
   19324:	subs	r5, r0, #0
   19328:	beq	19340 <test_scan@@Base+0x364>
   1932c:	mov	r1, #11
   19330:	mov	r0, r4
   19334:	bl	2234c <flatcc_builder_table_add_offset@@Base>
   19338:	cmp	r0, #0
   1933c:	strne	r5, [r0]
   19340:	ldr	r1, [pc, #2508]	; 19d14 <test_scan@@Base+0xd38>
   19344:	mov	r2, #1
   19348:	add	r1, pc, r1
   1934c:	add	r1, r1, #1072	; 0x430
   19350:	add	r1, r1, #12
   19354:	mov	r0, r4
   19358:	bl	21038 <flatcc_builder_check_required@@Base>
   1935c:	cmp	r0, #0
   19360:	beq	1a9a4 <test_scan@@Base+0x19c8>
   19364:	mov	r0, r4
   19368:	bl	210e0 <flatcc_builder_end_table@@Base>
   1936c:	mov	r1, r0
   19370:	mov	r0, r4
   19374:	bl	1f96c <flatcc_builder_end_buffer@@Base>
   19378:	mov	r0, r4
   1937c:	add	r1, sp, #68	; 0x44
   19380:	bl	22a08 <flatcc_builder_finalize_aligned_buffer@@Base>
   19384:	subs	fp, r0, #0
   19388:	beq	1939c <test_scan@@Base+0x3c0>
   1938c:	ldr	r3, [pc, #2436]	; 19d18 <test_scan@@Base+0xd3c>
   19390:	ldr	r2, [fp, #4]
   19394:	cmp	r2, r3
   19398:	beq	193a0 <test_scan@@Base+0x3c4>
   1939c:	bl	12c6c <__assert_fail@plt+0x264>
   193a0:	ldr	r2, [fp]
   193a4:	adds	r3, fp, r2
   193a8:	beq	1939c <test_scan@@Base+0x3c0>
   193ac:	ldr	r1, [fp, r2]
   193b0:	sub	r1, r3, r1
   193b4:	ldrh	r2, [r1]
   193b8:	cmp	r2, #27
   193bc:	bhi	193e8 <test_scan@@Base+0x40c>
   193c0:	ldr	r3, [pc, #2388]	; 19d1c <test_scan@@Base+0xd40>
   193c4:	ldr	r1, [pc, #2388]	; 19d20 <test_scan@@Base+0xd44>
   193c8:	add	r3, pc, r3
   193cc:	ldr	r0, [pc, #2384]	; 19d24 <test_scan@@Base+0xd48>
   193d0:	add	r3, r3, #1280	; 0x500
   193d4:	ldr	r2, [pc, #2380]	; 19d28 <test_scan@@Base+0xd4c>
   193d8:	add	r3, r3, #4
   193dc:	add	r1, pc, r1
   193e0:	add	r0, pc, r0
   193e4:	bl	12a08 <__assert_fail@plt>
   193e8:	ldrh	r2, [r1, #26]
   193ec:	cmp	r2, #0
   193f0:	beq	193c0 <test_scan@@Base+0x3e4>
   193f4:	ldr	r0, [r3, r2]
   193f8:	add	r2, r3, r2
   193fc:	add	r0, r0, #4
   19400:	adds	r5, r2, r0
   19404:	beq	193c0 <test_scan@@Base+0x3e4>
   19408:	ldrh	ip, [r1, #14]
   1940c:	cmp	ip, #0
   19410:	beq	1a9ac <test_scan@@Base+0x19d0>
   19414:	ldr	lr, [r3, ip]
   19418:	add	ip, r3, ip
   1941c:	add	lr, lr, #4
   19420:	str	ip, [sp, #44]	; 0x2c
   19424:	adds	ip, ip, lr
   19428:	str	lr, [sp, #48]	; 0x30
   1942c:	str	ip, [sp, #36]	; 0x24
   19430:	beq	1a9ac <test_scan@@Base+0x19d0>
   19434:	ldrh	r1, [r1, #24]
   19438:	cmp	r1, #0
   1943c:	beq	1a9d4 <test_scan@@Base+0x19f8>
   19440:	ldr	r8, [r3, r1]
   19444:	add	r3, r3, r1
   19448:	add	r8, r8, #4
   1944c:	adds	r3, r3, r8
   19450:	str	r3, [sp, #40]	; 0x28
   19454:	beq	1a9d4 <test_scan@@Base+0x19f8>
   19458:	ldr	r6, [r5, #-4]
   1945c:	cmp	r6, #0
   19460:	beq	1a188 <test_scan@@Base+0x11ac>
   19464:	ldr	r3, [r2, r0]
   19468:	adds	r2, r5, r3
   1946c:	str	r2, [sp, #12]
   19470:	beq	1a1c4 <test_scan@@Base+0x11e8>
   19474:	ldr	r3, [r5, r3]
   19478:	sub	r3, r2, r3
   1947c:	str	r3, [sp, #32]
   19480:	ldrh	r2, [r3]
   19484:	cmp	r2, #11
   19488:	str	r2, [sp, #28]
   1948c:	bhi	194b4 <test_scan@@Base+0x4d8>
   19490:	ldr	r3, [pc, #2196]	; 19d2c <test_scan@@Base+0xd50>
   19494:	ldr	r1, [pc, #2196]	; 19d30 <test_scan@@Base+0xd54>
   19498:	ldr	r0, [pc, #2196]	; 19d34 <test_scan@@Base+0xd58>
   1949c:	add	r3, pc, r3
   194a0:	ldr	r2, [pc, #2192]	; 19d38 <test_scan@@Base+0xd5c>
   194a4:	add	r3, r3, #580	; 0x244
   194a8:	add	r1, pc, r1
   194ac:	add	r0, pc, r0
   194b0:	bl	12a08 <__assert_fail@plt>
   194b4:	ldrh	r8, [r3, #10]
   194b8:	cmp	r8, #0
   194bc:	beq	19490 <test_scan@@Base+0x4b4>
   194c0:	ldr	r4, [pc, #2164]	; 19d3c <test_scan@@Base+0xd60>
   194c4:	add	r3, r5, #4
   194c8:	ldr	r2, [sp, #12]
   194cc:	add	r4, pc, r4
   194d0:	mov	r9, r3
   194d4:	mov	r0, r8
   194d8:	mov	r7, #0
   194dc:	str	r3, [sp, #16]
   194e0:	str	r3, [sp, #52]	; 0x34
   194e4:	ldr	r3, [r2, r0]
   194e8:	add	r0, r2, r0
   194ec:	add	r3, r3, #4
   194f0:	add	r0, r0, r3
   194f4:	mov	r1, r4
   194f8:	bl	1290c <strcmp@plt>
   194fc:	cmp	r0, #0
   19500:	beq	19548 <test_scan@@Base+0x56c>
   19504:	add	r7, r7, #1
   19508:	cmp	r7, r6
   1950c:	beq	1a188 <test_scan@@Base+0x11ac>
   19510:	mov	r3, r9
   19514:	add	r9, r9, #4
   19518:	ldr	r1, [r3]
   1951c:	adds	r2, r3, r1
   19520:	beq	1a1c4 <test_scan@@Base+0x11e8>
   19524:	ldr	r3, [r3, r1]
   19528:	sub	r3, r2, r3
   1952c:	ldrh	r1, [r3]
   19530:	cmp	r1, #11
   19534:	bls	19490 <test_scan@@Base+0x4b4>
   19538:	ldrh	r0, [r3, #10]
   1953c:	cmp	r0, #0
   19540:	bne	194e4 <test_scan@@Base+0x508>
   19544:	b	19490 <test_scan@@Base+0x4b4>
   19548:	cmp	r7, #1
   1954c:	bne	1a188 <test_scan@@Base+0x11ac>
   19550:	sub	r3, r6, #-1073741823	; 0xc0000001
   19554:	ldr	r7, [pc, #2020]	; 19d40 <test_scan@@Base+0xd64>
   19558:	sub	r2, r6, #1
   1955c:	add	r3, r5, r3, lsl #2
   19560:	str	r2, [sp, #20]
   19564:	str	r3, [sp, #24]
   19568:	add	r7, pc, r7
   1956c:	mov	sl, r3
   19570:	mov	r9, r2
   19574:	b	195dc <test_scan@@Base+0x600>
   19578:	cmp	r9, r6
   1957c:	mov	r3, sl
   19580:	bcs	1a218 <test_scan@@Base+0x123c>
   19584:	ldr	r2, [sl]
   19588:	sub	sl, sl, #4
   1958c:	adds	r0, r3, r2
   19590:	beq	1a1c4 <test_scan@@Base+0x11e8>
   19594:	ldr	r3, [r3, r2]
   19598:	sub	r3, r0, r3
   1959c:	ldrh	r2, [r3]
   195a0:	cmp	r2, #11
   195a4:	bls	19490 <test_scan@@Base+0x4b4>
   195a8:	ldrh	r2, [r3, #10]
   195ac:	cmp	r2, #0
   195b0:	beq	19490 <test_scan@@Base+0x4b4>
   195b4:	ldr	r3, [r0, r2]
   195b8:	add	r0, r0, r2
   195bc:	add	r3, r3, #4
   195c0:	add	r0, r0, r3
   195c4:	mov	r1, r7
   195c8:	bl	1290c <strcmp@plt>
   195cc:	sub	r3, r9, #1
   195d0:	cmp	r0, #0
   195d4:	beq	195f8 <test_scan@@Base+0x61c>
   195d8:	mov	r9, r3
   195dc:	cmn	r9, #1
   195e0:	bne	19578 <test_scan@@Base+0x59c>
   195e4:	ldr	r0, [pc, #1880]	; 19d44 <test_scan@@Base+0xd68>
   195e8:	mvn	r6, #0
   195ec:	add	r0, pc, r0
   195f0:	bl	1296c <puts@plt>
   195f4:	b	198ac <test_scan@@Base+0x8d0>
   195f8:	cmp	r9, #1
   195fc:	bne	195e4 <test_scan@@Base+0x608>
   19600:	ldr	r9, [pc, #1856]	; 19d48 <test_scan@@Base+0xd6c>
   19604:	ldr	sl, [sp, #16]
   19608:	ldr	r1, [sp, #12]
   1960c:	mov	r4, r0
   19610:	add	r9, pc, r9
   19614:	mov	r0, r8
   19618:	ldr	r3, [r1, r0]
   1961c:	add	r0, r1, r0
   19620:	add	r3, r3, #4
   19624:	adds	r0, r0, r3
   19628:	beq	19664 <test_scan@@Base+0x688>
   1962c:	ldr	r7, [r0, #-4]
   19630:	mov	r1, r9
   19634:	cmp	r7, #5
   19638:	movcc	r2, r7
   1963c:	movcs	r2, #5
   19640:	bl	129f0 <strncmp@plt>
   19644:	cmp	r7, #4
   19648:	clz	r0, r0
   1964c:	lsr	r0, r0, #5
   19650:	movls	r0, #0
   19654:	cmp	r0, #0
   19658:	beq	19664 <test_scan@@Base+0x688>
   1965c:	cmp	r7, #5
   19660:	bls	196a8 <test_scan@@Base+0x6cc>
   19664:	add	r4, r4, #1
   19668:	cmp	r4, r6
   1966c:	beq	19758 <test_scan@@Base+0x77c>
   19670:	mov	r3, sl
   19674:	add	sl, sl, #4
   19678:	ldr	r2, [r3]
   1967c:	adds	r1, r3, r2
   19680:	beq	1a1c4 <test_scan@@Base+0x11e8>
   19684:	ldr	r3, [r3, r2]
   19688:	sub	r3, r1, r3
   1968c:	ldrh	r2, [r3]
   19690:	cmp	r2, #11
   19694:	bls	19490 <test_scan@@Base+0x4b4>
   19698:	ldrh	r0, [r3, #10]
   1969c:	cmp	r0, #0
   196a0:	bne	19618 <test_scan@@Base+0x63c>
   196a4:	b	19490 <test_scan@@Base+0x4b4>
   196a8:	cmp	r4, #1
   196ac:	bne	19758 <test_scan@@Base+0x77c>
   196b0:	ldr	r9, [pc, #1684]	; 19d4c <test_scan@@Base+0xd70>
   196b4:	ldr	sl, [sp, #24]
   196b8:	ldr	r4, [sp, #20]
   196bc:	add	r9, pc, r9
   196c0:	cmp	r4, r6
   196c4:	mov	r3, sl
   196c8:	bcs	1a218 <test_scan@@Base+0x123c>
   196cc:	ldr	r2, [sl]
   196d0:	sub	sl, sl, #4
   196d4:	adds	r0, r3, r2
   196d8:	beq	1a1c4 <test_scan@@Base+0x11e8>
   196dc:	ldr	r3, [r3, r2]
   196e0:	sub	r3, r0, r3
   196e4:	ldrh	r2, [r3]
   196e8:	cmp	r2, #11
   196ec:	bls	19490 <test_scan@@Base+0x4b4>
   196f0:	ldrh	r2, [r3, #10]
   196f4:	cmp	r2, #0
   196f8:	beq	19490 <test_scan@@Base+0x4b4>
   196fc:	ldr	r3, [r0, r2]
   19700:	add	r0, r0, r2
   19704:	add	r3, r3, #4
   19708:	adds	r0, r0, r3
   1970c:	beq	1974c <test_scan@@Base+0x770>
   19710:	ldr	r7, [r0, #-4]
   19714:	mov	r1, r9
   19718:	cmp	r7, #5
   1971c:	movcc	r2, r7
   19720:	movcs	r2, #5
   19724:	bl	129f0 <strncmp@plt>
   19728:	cmp	r7, #4
   1972c:	movls	r3, #0
   19730:	movhi	r3, #1
   19734:	cmp	r0, #0
   19738:	movne	r3, #0
   1973c:	cmp	r3, #0
   19740:	beq	1974c <test_scan@@Base+0x770>
   19744:	cmp	r7, #5
   19748:	bls	1976c <test_scan@@Base+0x790>
   1974c:	cmp	r4, #0
   19750:	sub	r4, r4, #1
   19754:	bne	196c0 <test_scan@@Base+0x6e4>
   19758:	ldr	r0, [pc, #1520]	; 19d50 <test_scan@@Base+0xd74>
   1975c:	mvn	r6, #0
   19760:	add	r0, pc, r0
   19764:	bl	1296c <puts@plt>
   19768:	b	198ac <test_scan@@Base+0x8d0>
   1976c:	cmp	r4, #1
   19770:	bne	19758 <test_scan@@Base+0x77c>
   19774:	cmp	r6, #2
   19778:	bls	19820 <test_scan@@Base+0x844>
   1977c:	ldr	r3, [r5, #8]
   19780:	add	r3, r3, #8
   19784:	adds	r2, r5, r3
   19788:	beq	1a1c4 <test_scan@@Base+0x11e8>
   1978c:	ldr	r3, [r5, r3]
   19790:	sub	r3, r2, r3
   19794:	ldrh	r1, [r3]
   19798:	cmp	r1, #11
   1979c:	bls	19490 <test_scan@@Base+0x4b4>
   197a0:	ldrh	r0, [r3, #10]
   197a4:	ldr	r4, [pc, #1448]	; 19d54 <test_scan@@Base+0xd78>
   197a8:	add	r9, r5, #12
   197ac:	cmp	r0, #0
   197b0:	add	r4, pc, r4
   197b4:	mov	r7, #2
   197b8:	beq	19490 <test_scan@@Base+0x4b4>
   197bc:	ldr	r3, [r2, r0]
   197c0:	add	r0, r2, r0
   197c4:	add	r3, r3, #4
   197c8:	add	r0, r0, r3
   197cc:	mov	r1, r4
   197d0:	bl	1290c <strcmp@plt>
   197d4:	cmp	r0, #0
   197d8:	beq	19b0c <test_scan@@Base+0xb30>
   197dc:	add	r7, r7, #1
   197e0:	cmp	r7, r6
   197e4:	beq	19820 <test_scan@@Base+0x844>
   197e8:	mov	r3, r9
   197ec:	add	r9, r9, #4
   197f0:	ldr	r1, [r3]
   197f4:	adds	r2, r3, r1
   197f8:	beq	1a1c4 <test_scan@@Base+0x11e8>
   197fc:	ldr	r3, [r3, r1]
   19800:	sub	r3, r2, r3
   19804:	ldrh	r1, [r3]
   19808:	cmp	r1, #11
   1980c:	bls	19490 <test_scan@@Base+0x4b4>
   19810:	ldrh	r0, [r3, #10]
   19814:	cmp	r0, #0
   19818:	bne	197bc <test_scan@@Base+0x7e0>
   1981c:	b	19490 <test_scan@@Base+0x4b4>
   19820:	ldr	r7, [pc, #1328]	; 19d58 <test_scan@@Base+0xd7c>
   19824:	ldr	r9, [sp, #16]
   19828:	ldr	r2, [sp, #12]
   1982c:	mov	r0, r8
   19830:	mov	r4, #0
   19834:	add	r7, pc, r7
   19838:	ldr	r3, [r2, r0]
   1983c:	add	r0, r2, r0
   19840:	add	r3, r3, #4
   19844:	add	r0, r0, r3
   19848:	mov	r1, r7
   1984c:	bl	1290c <strcmp@plt>
   19850:	cmp	r0, #0
   19854:	beq	1989c <test_scan@@Base+0x8c0>
   19858:	add	r4, r4, #1
   1985c:	cmp	r4, r6
   19860:	beq	198c0 <test_scan@@Base+0x8e4>
   19864:	mov	r3, r9
   19868:	add	r9, r9, #4
   1986c:	ldr	r1, [r3]
   19870:	adds	r2, r3, r1
   19874:	beq	1a1c4 <test_scan@@Base+0x11e8>
   19878:	ldr	r3, [r3, r1]
   1987c:	sub	r3, r2, r3
   19880:	ldrh	r1, [r3]
   19884:	cmp	r1, #11
   19888:	bls	19490 <test_scan@@Base+0x4b4>
   1988c:	ldrh	r0, [r3, #10]
   19890:	cmp	r0, #0
   19894:	bne	19838 <test_scan@@Base+0x85c>
   19898:	b	19490 <test_scan@@Base+0x4b4>
   1989c:	ldr	r0, [pc, #1208]	; 19d5c <test_scan@@Base+0xd80>
   198a0:	mvn	r6, #0
   198a4:	add	r0, pc, r0
   198a8:	bl	1296c <puts@plt>
   198ac:	mov	r0, fp
   198b0:	bl	22b10 <flatcc_builder_aligned_free@@Base>
   198b4:	mov	r0, r6
   198b8:	add	sp, sp, #84	; 0x54
   198bc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   198c0:	ldr	r6, [pc, #1176]	; 19d60 <test_scan@@Base+0xd84>
   198c4:	ldr	r9, [sp, #16]
   198c8:	ldr	r2, [sp, #12]
   198cc:	mov	r0, r8
   198d0:	mov	r7, #0
   198d4:	add	r6, pc, r6
   198d8:	ldr	r3, [r2, r0]
   198dc:	add	r0, r2, r0
   198e0:	add	r3, r3, #4
   198e4:	add	r0, r0, r3
   198e8:	mov	r1, r6
   198ec:	bl	1290c <strcmp@plt>
   198f0:	cmp	r0, #0
   198f4:	beq	1993c <test_scan@@Base+0x960>
   198f8:	add	r7, r7, #1
   198fc:	cmp	r4, r7
   19900:	beq	1a1f0 <test_scan@@Base+0x1214>
   19904:	mov	r3, r9
   19908:	add	r9, r9, #4
   1990c:	ldr	r1, [r3]
   19910:	adds	r2, r3, r1
   19914:	beq	1a1c4 <test_scan@@Base+0x11e8>
   19918:	ldr	r3, [r3, r1]
   1991c:	sub	r3, r2, r3
   19920:	ldrh	r1, [r3]
   19924:	cmp	r1, #11
   19928:	bls	19490 <test_scan@@Base+0x4b4>
   1992c:	ldrh	r0, [r3, #10]
   19930:	cmp	r0, #0
   19934:	bne	198d8 <test_scan@@Base+0x8fc>
   19938:	b	19490 <test_scan@@Base+0x4b4>
   1993c:	cmp	r7, #0
   19940:	bne	1a1f0 <test_scan@@Base+0x1214>
   19944:	ldr	r6, [pc, #1048]	; 19d64 <test_scan@@Base+0xd88>
   19948:	ldr	r9, [sp, #16]
   1994c:	ldr	r0, [sp, #12]
   19950:	add	r6, pc, r6
   19954:	ldr	r3, [r0, r8]
   19958:	add	r0, r0, r8
   1995c:	add	r3, r3, #4
   19960:	add	r0, r0, r3
   19964:	mov	r1, r6
   19968:	bl	1290c <strcmp@plt>
   1996c:	cmp	r0, #0
   19970:	beq	199b8 <test_scan@@Base+0x9dc>
   19974:	add	r7, r7, #1
   19978:	cmp	r4, r7
   1997c:	bls	19a38 <test_scan@@Base+0xa5c>
   19980:	mov	r3, r9
   19984:	add	r9, r9, #4
   19988:	ldr	r2, [r3]
   1998c:	adds	r0, r3, r2
   19990:	beq	1a1c4 <test_scan@@Base+0x11e8>
   19994:	ldr	r3, [r3, r2]
   19998:	sub	r3, r0, r3
   1999c:	ldrh	r2, [r3]
   199a0:	cmp	r2, #11
   199a4:	bls	19490 <test_scan@@Base+0x4b4>
   199a8:	ldrh	r8, [r3, #10]
   199ac:	cmp	r8, #0
   199b0:	bne	19954 <test_scan@@Base+0x978>
   199b4:	b	19490 <test_scan@@Base+0x4b4>
   199b8:	cmp	r7, #2
   199bc:	bne	19a38 <test_scan@@Base+0xa5c>
   199c0:	ldr	r7, [pc, #928]	; 19d68 <test_scan@@Base+0xd8c>
   199c4:	ldr	r9, [sp, #24]
   199c8:	ldr	r8, [sp, #20]
   199cc:	add	r7, pc, r7
   199d0:	cmp	r4, r8
   199d4:	mov	r3, r9
   199d8:	bls	1a218 <test_scan@@Base+0x123c>
   199dc:	ldr	r2, [r9]
   199e0:	sub	r9, r9, #4
   199e4:	adds	r0, r3, r2
   199e8:	beq	1a1c4 <test_scan@@Base+0x11e8>
   199ec:	ldr	r3, [r3, r2]
   199f0:	sub	r3, r0, r3
   199f4:	ldrh	r2, [r3]
   199f8:	cmp	r2, #11
   199fc:	bls	19490 <test_scan@@Base+0x4b4>
   19a00:	ldrh	r2, [r3, #10]
   19a04:	cmp	r2, #0
   19a08:	beq	19490 <test_scan@@Base+0x4b4>
   19a0c:	ldr	r3, [r0, r2]
   19a10:	add	r0, r0, r2
   19a14:	add	r3, r3, #4
   19a18:	add	r0, r0, r3
   19a1c:	mov	r1, r7
   19a20:	bl	1290c <strcmp@plt>
   19a24:	cmp	r0, #0
   19a28:	beq	19a4c <test_scan@@Base+0xa70>
   19a2c:	cmp	r8, #0
   19a30:	sub	r8, r8, #1
   19a34:	bne	199d0 <test_scan@@Base+0x9f4>
   19a38:	ldr	r0, [pc, #812]	; 19d6c <test_scan@@Base+0xd90>
   19a3c:	mvn	r6, #0
   19a40:	add	r0, pc, r0
   19a44:	bl	1296c <puts@plt>
   19a48:	b	198ac <test_scan@@Base+0x8d0>
   19a4c:	cmp	r8, #4
   19a50:	mov	r6, r0
   19a54:	bne	19a38 <test_scan@@Base+0xa5c>
   19a58:	ldr	r9, [pc, #784]	; 19d70 <test_scan@@Base+0xd94>
   19a5c:	ldr	sl, [sp, #24]
   19a60:	ldr	r7, [sp, #20]
   19a64:	add	r9, pc, r9
   19a68:	cmp	r7, r4
   19a6c:	mov	r3, sl
   19a70:	bcs	1a218 <test_scan@@Base+0x123c>
   19a74:	ldr	r2, [sl]
   19a78:	sub	sl, sl, #4
   19a7c:	adds	r0, r3, r2
   19a80:	beq	1a1c4 <test_scan@@Base+0x11e8>
   19a84:	ldr	r3, [r3, r2]
   19a88:	sub	r3, r0, r3
   19a8c:	ldrh	r2, [r3]
   19a90:	cmp	r2, #11
   19a94:	bls	19490 <test_scan@@Base+0x4b4>
   19a98:	ldrh	r2, [r3, #10]
   19a9c:	cmp	r2, #0
   19aa0:	beq	19490 <test_scan@@Base+0x4b4>
   19aa4:	ldr	r3, [r0, r2]
   19aa8:	add	r0, r0, r2
   19aac:	add	r3, r3, #4
   19ab0:	adds	r0, r0, r3
   19ab4:	beq	19af0 <test_scan@@Base+0xb14>
   19ab8:	ldr	r8, [r0, #-4]
   19abc:	mov	r1, r9
   19ac0:	cmp	r8, #8
   19ac4:	movcc	r2, r8
   19ac8:	movcs	r2, #8
   19acc:	bl	129f0 <strncmp@plt>
   19ad0:	cmp	r8, #7
   19ad4:	clz	r0, r0
   19ad8:	lsr	r0, r0, #5
   19adc:	movls	r0, #0
   19ae0:	cmp	r0, #0
   19ae4:	beq	19af0 <test_scan@@Base+0xb14>
   19ae8:	cmp	r8, #8
   19aec:	bls	19b20 <test_scan@@Base+0xb44>
   19af0:	subs	r7, r7, #1
   19af4:	bcs	19a68 <test_scan@@Base+0xa8c>
   19af8:	ldr	r0, [pc, #628]	; 19d74 <test_scan@@Base+0xd98>
   19afc:	mvn	r6, #0
   19b00:	add	r0, pc, r0
   19b04:	bl	1296c <puts@plt>
   19b08:	b	198ac <test_scan@@Base+0x8d0>
   19b0c:	ldr	r0, [pc, #612]	; 19d78 <test_scan@@Base+0xd9c>
   19b10:	mvn	r6, #0
   19b14:	add	r0, pc, r0
   19b18:	bl	1296c <puts@plt>
   19b1c:	b	198ac <test_scan@@Base+0x8d0>
   19b20:	cmp	r7, #4
   19b24:	bne	19af8 <test_scan@@Base+0xb1c>
   19b28:	cmp	r4, #3
   19b2c:	movcc	r7, r4
   19b30:	movcs	r7, #3
   19b34:	sub	sl, r7, #-1073741823	; 0xc0000001
   19b38:	ldr	r9, [pc, #572]	; 19d7c <test_scan@@Base+0xda0>
   19b3c:	add	sl, r5, sl, lsl #2
   19b40:	add	r9, pc, r9
   19b44:	cmp	r7, #1
   19b48:	sub	r7, r7, #1
   19b4c:	beq	19af8 <test_scan@@Base+0xb1c>
   19b50:	cmp	r4, r7
   19b54:	mov	r3, sl
   19b58:	bls	1a218 <test_scan@@Base+0x123c>
   19b5c:	ldr	r2, [sl]
   19b60:	sub	sl, sl, #4
   19b64:	adds	r0, r3, r2
   19b68:	beq	1a1c4 <test_scan@@Base+0x11e8>
   19b6c:	ldr	r3, [r3, r2]
   19b70:	sub	r3, r0, r3
   19b74:	ldrh	r2, [r3]
   19b78:	cmp	r2, #11
   19b7c:	bls	19490 <test_scan@@Base+0x4b4>
   19b80:	ldrh	r2, [r3, #10]
   19b84:	cmp	r2, #0
   19b88:	beq	19490 <test_scan@@Base+0x4b4>
   19b8c:	ldr	r3, [r0, r2]
   19b90:	add	r0, r0, r2
   19b94:	add	r3, r3, #4
   19b98:	adds	r0, r0, r3
   19b9c:	beq	19b44 <test_scan@@Base+0xb68>
   19ba0:	ldr	r8, [r0, #-4]
   19ba4:	mov	r1, r9
   19ba8:	cmp	r8, #8
   19bac:	movcc	r2, r8
   19bb0:	movcs	r2, #8
   19bb4:	bl	129f0 <strncmp@plt>
   19bb8:	cmp	r8, #7
   19bbc:	clz	r0, r0
   19bc0:	lsr	r0, r0, #5
   19bc4:	movls	r0, #0
   19bc8:	cmp	r0, #0
   19bcc:	beq	19b44 <test_scan@@Base+0xb68>
   19bd0:	cmp	r8, #8
   19bd4:	bhi	19b44 <test_scan@@Base+0xb68>
   19bd8:	cmp	r7, #2
   19bdc:	bne	19af8 <test_scan@@Base+0xb1c>
   19be0:	ldr	r3, [pc, #408]	; 19d80 <test_scan@@Base+0xda4>
   19be4:	mov	r1, r7
   19be8:	add	r3, pc, r3
   19bec:	mvn	r2, #0
   19bf0:	mov	r0, r5
   19bf4:	bl	14684 <_start@@Base+0x1298>
   19bf8:	cmp	r0, #2
   19bfc:	mov	r8, r0
   19c00:	bne	1a19c <test_scan@@Base+0x11c0>
   19c04:	cmp	r4, #2
   19c08:	beq	1a19c <test_scan@@Base+0x11c0>
   19c0c:	ldr	r3, [r5, #8]
   19c10:	add	r3, r3, #8
   19c14:	adds	r1, r5, r3
   19c18:	beq	1a1c4 <test_scan@@Base+0x11e8>
   19c1c:	ldr	r3, [r5, r3]
   19c20:	sub	r3, r1, r3
   19c24:	ldrh	r2, [r3]
   19c28:	cmp	r2, #11
   19c2c:	bls	19490 <test_scan@@Base+0x4b4>
   19c30:	ldrh	r3, [r3, #10]
   19c34:	ldr	r9, [pc, #328]	; 19d84 <test_scan@@Base+0xda8>
   19c38:	add	sl, r5, #12
   19c3c:	cmp	r3, #0
   19c40:	add	r9, pc, r9
   19c44:	mov	r0, r3
   19c48:	beq	19490 <test_scan@@Base+0x4b4>
   19c4c:	ldr	r3, [r1, r0]
   19c50:	add	r0, r1, r0
   19c54:	add	r3, r3, #4
   19c58:	adds	r0, r0, r3
   19c5c:	beq	19c9c <test_scan@@Base+0xcc0>
   19c60:	ldr	r7, [r0, #-4]
   19c64:	mov	r1, r9
   19c68:	cmp	r7, #8
   19c6c:	movcc	r2, r7
   19c70:	movcs	r2, #8
   19c74:	bl	129f0 <strncmp@plt>
   19c78:	cmp	r7, #7
   19c7c:	movls	r3, #0
   19c80:	movhi	r3, #1
   19c84:	cmp	r0, #0
   19c88:	movne	r3, #0
   19c8c:	cmp	r3, #0
   19c90:	beq	19c9c <test_scan@@Base+0xcc0>
   19c94:	cmp	r7, #8
   19c98:	bls	19e70 <test_scan@@Base+0xe94>
   19c9c:	add	r8, r8, #1
   19ca0:	cmp	r4, r8
   19ca4:	beq	1a19c <test_scan@@Base+0x11c0>
   19ca8:	mov	r3, sl
   19cac:	add	sl, sl, #4
   19cb0:	ldr	r2, [r3]
   19cb4:	adds	r1, r3, r2
   19cb8:	beq	1a1c4 <test_scan@@Base+0x11e8>
   19cbc:	ldr	r3, [r3, r2]
   19cc0:	sub	r3, r1, r3
   19cc4:	ldrh	r2, [r3]
   19cc8:	cmp	r2, #11
   19ccc:	bls	19490 <test_scan@@Base+0x4b4>
   19cd0:	ldrh	r0, [r3, #10]
   19cd4:	cmp	r0, #0
   19cd8:	bne	19c4c <test_scan@@Base+0xc70>
   19cdc:	b	19490 <test_scan@@Base+0x4b4>
   19ce0:	andeq	fp, r0, ip, asr #15
   19ce4:	andeq	ip, r0, ip, ror #7
   19ce8:	strdeq	ip, [r0], -r0
   19cec:	andeq	ip, r0, r0, ror #21
   19cf0:	muleq	r0, r8, r6
   19cf4:	andeq	ip, r0, ip, lsr #21
   19cf8:	andeq	fp, r0, r4, lsr #12
   19cfc:	andeq	ip, r0, r4, ror #20
   19d00:			; <UNDEFINED> instruction: 0x0000b5b0
   19d04:	andeq	sp, r0, r0, asr r0
   19d08:	andeq	fp, r0, ip, lsr r5
   19d0c:	andeq	ip, r0, ip, ror r9
   19d10:	andeq	fp, r0, r8, asr #9
   19d14:	andeq	fp, r0, r8, ror #8
   19d18:	movtpl	r4, #61261	; 0xef4d
   19d1c:	andeq	fp, r0, r8, ror #7
   19d20:	andeq	ip, r0, r4, ror r7
   19d24:	ldrdeq	ip, [r0], -r8
   19d28:	andeq	r0, r0, r9, lsl r5
   19d2c:	andeq	fp, r0, r4, lsl r3
   19d30:	andeq	fp, r0, r0, lsl sl
   19d34:	andeq	fp, r0, r8, ror #22
   19d38:			; <UNDEFINED> instruction: 0x000002bb
   19d3c:	andeq	ip, r0, r0, asr #14
   19d40:	andeq	ip, r0, r4, lsr #13
   19d44:	andeq	ip, r0, ip, lsl #30
   19d48:	andeq	ip, r0, ip, lsr #28
   19d4c:	andeq	ip, r0, r0, lsl #27
   19d50:			; <UNDEFINED> instruction: 0x0000cdb8
   19d54:	andeq	ip, r0, ip, asr r4
   19d58:	andeq	ip, r0, r4, lsr ip
   19d5c:	andeq	ip, r0, r0, lsl ip
   19d60:	strdeq	ip, [r0], -r8
   19d64:	andeq	ip, r0, r8, ror #5
   19d68:	andeq	ip, r0, ip, ror #4
   19d6c:	andeq	ip, r0, ip, asr fp
   19d70:	ldrdeq	ip, [r0], -ip	; <UNPREDICTABLE>
   19d74:	andeq	ip, r0, ip, asr #20
   19d78:	ldrdeq	ip, [r0], -ip	; <UNPREDICTABLE>
   19d7c:	andeq	ip, r0, r0, lsl #20
   19d80:	andeq	ip, r0, r0, asr r0
   19d84:	andeq	ip, r0, r0, lsl #18
   19d88:			; <UNDEFINED> instruction: 0x0000bdb8
   19d8c:	andeq	ip, r0, r0, asr #11
   19d90:	andeq	fp, r0, r0, lsl #26
   19d94:	andeq	fp, r0, ip, lsl sp
   19d98:	andeq	ip, r0, r8, ror #6
   19d9c:	andeq	ip, r0, r8, lsl r5
   19da0:	andeq	fp, r0, r8, asr ip
   19da4:	andeq	fp, r0, r0, ror ip
   19da8:	andeq	fp, r0, r4, ror ip
   19dac:			; <UNDEFINED> instruction: 0x0000c2b4
   19db0:	andeq	fp, r0, ip, ror fp
   19db4:	strdeq	fp, [r0], -r8
   19db8:	andeq	ip, r0, ip, asr r3
   19dbc:	strdeq	fp, [r0], -r8
   19dc0:	ldrdeq	ip, [r0], -r4
   19dc4:	andeq	ip, r0, r8, asr #6
   19dc8:	andeq	ip, r0, r4, asr #7
   19dcc:	muleq	r0, r0, r5
   19dd0:	andeq	ip, r0, r4, asr #7
   19dd4:	andeq	ip, r0, ip, asr #7
   19dd8:	muleq	r0, r0, r2
   19ddc:	andeq	ip, r0, r8, asr #7
   19de0:	ldrdeq	ip, [r0], -r4
   19de4:	andeq	ip, r0, r4, ror #7
   19de8:	strdeq	ip, [r0], -r8
   19dec:	andeq	ip, r0, r0, asr #8
   19df0:	strdeq	ip, [r0], -ip	; <UNPREDICTABLE>
   19df4:	andeq	ip, r0, r0, ror #9
   19df8:			; <UNDEFINED> instruction: 0x0000c5b8
   19dfc:	andeq	ip, r0, ip, ror r5
   19e00:	andeq	ip, r0, r4, lsr #13
   19e04:	andeq	ip, r0, r8, lsl r5
   19e08:	andeq	ip, r0, r0, ror #7
   19e0c:	andeq	ip, r0, r0, lsl r3
   19e10:	andeq	ip, r0, r4, lsr #6
   19e14:	andeq	ip, r0, r8, lsr r3
   19e18:	ldrdeq	ip, [r0], -r0
   19e1c:			; <UNDEFINED> instruction: 0x0000c4bc
   19e20:	andeq	ip, r0, r4, lsr #9
   19e24:	andeq	ip, r0, r8, lsl #5
   19e28:	ldrdeq	fp, [r0], -ip
   19e2c:	andeq	fp, r0, ip, asr #14
   19e30:	ldrdeq	fp, [r0], -ip
   19e34:	andeq	fp, r0, ip, asr r6
   19e38:	strdeq	fp, [r0], -r8
   19e3c:	muleq	r0, r8, lr
   19e40:			; <UNDEFINED> instruction: 0x0000bebc
   19e44:	andeq	fp, r0, r4, asr #29
   19e48:	andeq	fp, r0, r8, ror lr
   19e4c:	strdeq	fp, [r0], -r0
   19e50:	strdeq	r9, [r0], -ip
   19e54:	andeq	fp, r0, r8, lsl #3
   19e58:	andeq	fp, r0, r0, lsl #22
   19e5c:	andeq	r0, r0, fp, lsl r5
   19e60:	ldrdeq	r9, [r0], -r4
   19e64:	andeq	fp, r0, r0, ror #2
   19e68:	ldrdeq	fp, [r0], -ip
   19e6c:	andeq	r0, r0, sp, lsl r5
   19e70:	cmp	r8, #2
   19e74:	bne	1a19c <test_scan@@Base+0x11c0>
   19e78:	ldr	r8, [pc, #-248]	; 19d88 <test_scan@@Base+0xdac>
   19e7c:	mvn	r2, #0
   19e80:	add	r8, pc, r8
   19e84:	mov	r3, r8
   19e88:	mov	r1, #3
   19e8c:	mov	r0, r5
   19e90:	bl	14684 <_start@@Base+0x1298>
   19e94:	cmp	r0, #4
   19e98:	mov	sl, r0
   19e9c:	bne	1a1c8 <test_scan@@Base+0x11ec>
   19ea0:	ldr	r3, [pc, #-284]	; 19d8c <test_scan@@Base+0xdb0>
   19ea4:	mov	r2, #3
   19ea8:	add	r3, pc, r3
   19eac:	mov	r1, #1
   19eb0:	mov	r0, r5
   19eb4:	bl	14684 <_start@@Base+0x1298>
   19eb8:	cmn	r0, #1
   19ebc:	mov	r7, r0
   19ec0:	bne	1a1dc <test_scan@@Base+0x1200>
   19ec4:	ldr	r3, [pc, #-316]	; 19d90 <test_scan@@Base+0xdb4>
   19ec8:	mov	r2, #3
   19ecc:	add	r3, pc, r3
   19ed0:	mov	r1, #1
   19ed4:	mov	r0, r5
   19ed8:	bl	14684 <_start@@Base+0x1298>
   19edc:	cmn	r0, #1
   19ee0:	mov	r9, r0
   19ee4:	bne	1a204 <test_scan@@Base+0x1228>
   19ee8:	ldr	r3, [pc, #-348]	; 19d94 <test_scan@@Base+0xdb8>
   19eec:	mov	r2, #3
   19ef0:	add	r3, pc, r3
   19ef4:	mov	r1, #1
   19ef8:	mov	r0, r5
   19efc:	bl	14684 <_start@@Base+0x1298>
   19f00:	cmp	r0, #1
   19f04:	mov	r7, r0
   19f08:	bne	1a21c <test_scan@@Base+0x1240>
   19f0c:	mov	r1, r0
   19f10:	mov	r3, r8
   19f14:	mov	r2, #3
   19f18:	mov	r0, r5
   19f1c:	bl	14684 <_start@@Base+0x1298>
   19f20:	cmp	r0, #2
   19f24:	bne	1a230 <test_scan@@Base+0x1254>
   19f28:	ldr	r3, [pc, #-408]	; 19d98 <test_scan@@Base+0xdbc>
   19f2c:	mov	r1, r7
   19f30:	add	r3, pc, r3
   19f34:	mov	r2, #3
   19f38:	mov	r0, r5
   19f3c:	bl	14684 <_start@@Base+0x1298>
   19f40:	cmn	r0, #1
   19f44:	bne	1a244 <test_scan@@Base+0x1268>
   19f48:	ldr	r3, [pc, #-436]	; 19d9c <test_scan@@Base+0xdc0>
   19f4c:	mov	r2, #3
   19f50:	add	r3, pc, r3
   19f54:	mov	r1, #1
   19f58:	mov	r0, r5
   19f5c:	bl	147a0 <_start@@Base+0x13b4>
   19f60:	cmn	r0, #1
   19f64:	mov	r7, r0
   19f68:	bne	1a26c <test_scan@@Base+0x1290>
   19f6c:	ldr	r8, [pc, #-468]	; 19da0 <test_scan@@Base+0xdc4>
   19f70:	mov	r2, #3
   19f74:	add	r8, pc, r8
   19f78:	mov	r3, r8
   19f7c:	mov	r1, #1
   19f80:	mov	r0, r5
   19f84:	bl	147a0 <_start@@Base+0x13b4>
   19f88:	cmn	r0, #1
   19f8c:	str	r0, [sp, #56]	; 0x38
   19f90:	bne	1a258 <test_scan@@Base+0x127c>
   19f94:	ldr	r9, [pc, #-504]	; 19da4 <test_scan@@Base+0xdc8>
   19f98:	mov	r2, #3
   19f9c:	add	r9, pc, r9
   19fa0:	mov	r3, r9
   19fa4:	mov	r1, #1
   19fa8:	mov	r0, r5
   19fac:	bl	147a0 <_start@@Base+0x13b4>
   19fb0:	cmp	r0, #1
   19fb4:	mov	r7, r0
   19fb8:	bne	1a3b4 <test_scan@@Base+0x13d8>
   19fbc:	ldr	r3, [pc, #-540]	; 19da8 <test_scan@@Base+0xdcc>
   19fc0:	mov	r1, r0
   19fc4:	add	r3, pc, r3
   19fc8:	mov	r2, #3
   19fcc:	mov	r0, r5
   19fd0:	bl	147a0 <_start@@Base+0x13b4>
   19fd4:	cmp	r0, #2
   19fd8:	bne	1a3c8 <test_scan@@Base+0x13ec>
   19fdc:	ldr	r3, [pc, #-568]	; 19dac <test_scan@@Base+0xdd0>
   19fe0:	mov	r2, #3
   19fe4:	add	r3, pc, r3
   19fe8:	mov	r1, r7
   19fec:	mov	r0, r5
   19ff0:	bl	147a0 <_start@@Base+0x13b4>
   19ff4:	cmn	r0, #1
   19ff8:	bne	1a3dc <test_scan@@Base+0x1400>
   19ffc:	mov	r2, #0
   1a000:	mov	r1, r2
   1a004:	mov	r3, r8
   1a008:	mov	r0, r5
   1a00c:	bl	14684 <_start@@Base+0x1298>
   1a010:	cmn	r0, #1
   1a014:	bne	1a1b0 <test_scan@@Base+0x11d4>
   1a018:	mov	r2, #0
   1a01c:	mov	r1, r2
   1a020:	mov	r3, r9
   1a024:	mov	r0, r5
   1a028:	bl	14684 <_start@@Base+0x1298>
   1a02c:	cmn	r0, #1
   1a030:	bne	1a280 <test_scan@@Base+0x12a4>
   1a034:	mov	r3, r9
   1a038:	mov	r2, r7
   1a03c:	mov	r1, r7
   1a040:	mov	r0, r5
   1a044:	bl	14684 <_start@@Base+0x1298>
   1a048:	cmn	r0, #1
   1a04c:	bne	1a3a0 <test_scan@@Base+0x13c4>
   1a050:	mov	r2, r0
   1a054:	mov	r3, r8
   1a058:	mov	r1, r4
   1a05c:	mov	r0, r5
   1a060:	bl	14684 <_start@@Base+0x1298>
   1a064:	cmn	r0, #1
   1a068:	bne	1a520 <test_scan@@Base+0x1544>
   1a06c:	mov	r2, #0
   1a070:	mov	r3, r8
   1a074:	mov	r1, r2
   1a078:	mov	r0, r5
   1a07c:	bl	147a0 <_start@@Base+0x13b4>
   1a080:	cmn	r0, #1
   1a084:	bne	1a1b0 <test_scan@@Base+0x11d4>
   1a088:	ldr	r7, [pc, #-736]	; 19db0 <test_scan@@Base+0xdd4>
   1a08c:	mov	r2, #0
   1a090:	add	r7, pc, r7
   1a094:	mov	r3, r7
   1a098:	mov	r1, r2
   1a09c:	mov	r0, r5
   1a0a0:	bl	147a0 <_start@@Base+0x13b4>
   1a0a4:	cmn	r0, #1
   1a0a8:	bne	1a280 <test_scan@@Base+0x12a4>
   1a0ac:	mov	r2, #1
   1a0b0:	mov	r1, r2
   1a0b4:	mov	r3, r7
   1a0b8:	mov	r0, r5
   1a0bc:	bl	147a0 <_start@@Base+0x13b4>
   1a0c0:	cmn	r0, #1
   1a0c4:	mov	r2, r0
   1a0c8:	bne	1a3a0 <test_scan@@Base+0x13c4>
   1a0cc:	ldr	r9, [pc, #-800]	; 19db4 <test_scan@@Base+0xdd8>
   1a0d0:	mov	r1, r4
   1a0d4:	add	r9, pc, r9
   1a0d8:	mov	r3, r9
   1a0dc:	mov	r0, r5
   1a0e0:	bl	147a0 <_start@@Base+0x13b4>
   1a0e4:	cmn	r0, #1
   1a0e8:	mov	r8, r0
   1a0ec:	bne	1a520 <test_scan@@Base+0x1544>
   1a0f0:	mov	r1, r7
   1a0f4:	mov	r0, r5
   1a0f8:	bl	144c4 <_start@@Base+0x10d8>
   1a0fc:	cmp	r0, #1
   1a100:	bne	1a93c <test_scan@@Base+0x1960>
   1a104:	ldr	r1, [pc, #-852]	; 19db8 <test_scan@@Base+0xddc>
   1a108:	mov	r0, r5
   1a10c:	add	r1, pc, r1
   1a110:	bl	144c4 <_start@@Base+0x10d8>
   1a114:	subs	r3, r0, #0
   1a118:	str	r3, [sp, #56]	; 0x38
   1a11c:	bne	1a978 <test_scan@@Base+0x199c>
   1a120:	mov	r1, r9
   1a124:	mov	r0, r5
   1a128:	bl	144c4 <_start@@Base+0x10d8>
   1a12c:	cmp	r0, #1
   1a130:	str	r0, [sp, #60]	; 0x3c
   1a134:	bne	1a950 <test_scan@@Base+0x1974>
   1a138:	ldr	r1, [pc, #-900]	; 19dbc <test_scan@@Base+0xde0>
   1a13c:	mov	r0, r5
   1a140:	add	r1, pc, r1
   1a144:	bl	144c4 <_start@@Base+0x10d8>
   1a148:	cmp	r0, #2
   1a14c:	bne	1a964 <test_scan@@Base+0x1988>
   1a150:	ldr	r3, [sp, #36]	; 0x24
   1a154:	ldr	r3, [r3, #-4]
   1a158:	cmp	r3, #0
   1a15c:	beq	1a174 <test_scan@@Base+0x1198>
   1a160:	ldr	r2, [sp, #44]	; 0x2c
   1a164:	ldr	r1, [sp, #48]	; 0x30
   1a168:	ldrb	r2, [r2, r1]
   1a16c:	cmp	r2, #6
   1a170:	beq	1a294 <test_scan@@Base+0x12b8>
   1a174:	ldr	r0, [pc, #-956]	; 19dc0 <test_scan@@Base+0xde4>
   1a178:	mvn	r6, #0
   1a17c:	add	r0, pc, r0
   1a180:	bl	1296c <puts@plt>
   1a184:	b	198ac <test_scan@@Base+0x8d0>
   1a188:	ldr	r0, [pc, #-972]	; 19dc4 <test_scan@@Base+0xde8>
   1a18c:	mvn	r6, #0
   1a190:	add	r0, pc, r0
   1a194:	bl	1296c <puts@plt>
   1a198:	b	198ac <test_scan@@Base+0x8d0>
   1a19c:	ldr	r0, [pc, #-988]	; 19dc8 <test_scan@@Base+0xdec>
   1a1a0:	mvn	r6, #0
   1a1a4:	add	r0, pc, r0
   1a1a8:	bl	1296c <puts@plt>
   1a1ac:	b	198ac <test_scan@@Base+0x8d0>
   1a1b0:	ldr	r0, [pc, #-1004]	; 19dcc <test_scan@@Base+0xdf0>
   1a1b4:	mvn	r6, #0
   1a1b8:	add	r0, pc, r0
   1a1bc:	bl	1296c <puts@plt>
   1a1c0:	b	198ac <test_scan@@Base+0x8d0>
   1a1c4:	bl	12d14 <__assert_fail@plt+0x30c>
   1a1c8:	ldr	r0, [pc, #-1024]	; 19dd0 <test_scan@@Base+0xdf4>
   1a1cc:	mvn	r6, #0
   1a1d0:	add	r0, pc, r0
   1a1d4:	bl	1296c <puts@plt>
   1a1d8:	b	198ac <test_scan@@Base+0x8d0>
   1a1dc:	ldr	r0, [pc, #-1040]	; 19dd4 <test_scan@@Base+0xdf8>
   1a1e0:	mvn	r6, #0
   1a1e4:	add	r0, pc, r0
   1a1e8:	bl	1296c <puts@plt>
   1a1ec:	b	198ac <test_scan@@Base+0x8d0>
   1a1f0:	ldr	r0, [pc, #-1056]	; 19dd8 <test_scan@@Base+0xdfc>
   1a1f4:	mvn	r6, #0
   1a1f8:	add	r0, pc, r0
   1a1fc:	bl	1296c <puts@plt>
   1a200:	b	198ac <test_scan@@Base+0x8d0>
   1a204:	ldr	r0, [pc, #-1072]	; 19ddc <test_scan@@Base+0xe00>
   1a208:	mov	r6, r7
   1a20c:	add	r0, pc, r0
   1a210:	bl	1296c <puts@plt>
   1a214:	b	198ac <test_scan@@Base+0x8d0>
   1a218:	bl	1379c <_start@@Base+0x3b0>
   1a21c:	ldr	r0, [pc, #-1092]	; 19de0 <test_scan@@Base+0xe04>
   1a220:	mov	r6, r9
   1a224:	add	r0, pc, r0
   1a228:	bl	1296c <puts@plt>
   1a22c:	b	198ac <test_scan@@Base+0x8d0>
   1a230:	ldr	r0, [pc, #-1108]	; 19de4 <test_scan@@Base+0xe08>
   1a234:	mov	r6, r9
   1a238:	add	r0, pc, r0
   1a23c:	bl	1296c <puts@plt>
   1a240:	b	198ac <test_scan@@Base+0x8d0>
   1a244:	ldr	r0, [pc, #-1124]	; 19de8 <test_scan@@Base+0xe0c>
   1a248:	mvn	r6, #0
   1a24c:	add	r0, pc, r0
   1a250:	bl	1296c <puts@plt>
   1a254:	b	198ac <test_scan@@Base+0x8d0>
   1a258:	ldr	r0, [pc, #-1140]	; 19dec <test_scan@@Base+0xe10>
   1a25c:	mov	r6, r7
   1a260:	add	r0, pc, r0
   1a264:	bl	1296c <puts@plt>
   1a268:	b	198ac <test_scan@@Base+0x8d0>
   1a26c:	ldr	r0, [pc, #-1156]	; 19df0 <test_scan@@Base+0xe14>
   1a270:	mvn	r6, #0
   1a274:	add	r0, pc, r0
   1a278:	bl	1296c <puts@plt>
   1a27c:	b	198ac <test_scan@@Base+0x8d0>
   1a280:	ldr	r0, [pc, #-1172]	; 19df4 <test_scan@@Base+0xe18>
   1a284:	mvn	r6, #0
   1a288:	add	r0, pc, r0
   1a28c:	bl	1296c <puts@plt>
   1a290:	b	198ac <test_scan@@Base+0x8d0>
   1a294:	ldr	r1, [sp, #36]	; 0x24
   1a298:	ldr	r2, [sp, #56]	; 0x38
   1a29c:	mov	r0, r1
   1a2a0:	b	1a2b0 <test_scan@@Base+0x12d4>
   1a2a4:	ldrb	ip, [r1, #1]!
   1a2a8:	cmp	ip, #1
   1a2ac:	beq	1a2d0 <test_scan@@Base+0x12f4>
   1a2b0:	add	r2, r2, #1
   1a2b4:	cmp	r2, r3
   1a2b8:	bne	1a2a4 <test_scan@@Base+0x12c8>
   1a2bc:	ldr	r0, [pc, #-1228]	; 19df8 <test_scan@@Base+0xe1c>
   1a2c0:	mvn	r6, #0
   1a2c4:	add	r0, pc, r0
   1a2c8:	bl	1296c <puts@plt>
   1a2cc:	b	198ac <test_scan@@Base+0x8d0>
   1a2d0:	cmp	r2, #2
   1a2d4:	bne	1a2bc <test_scan@@Base+0x12e0>
   1a2d8:	cmp	r3, #3
   1a2dc:	bls	1a314 <test_scan@@Base+0x1338>
   1a2e0:	ldr	r2, [sp, #36]	; 0x24
   1a2e4:	ldrb	r2, [r2, #3]
   1a2e8:	cmp	r2, #1
   1a2ec:	beq	1a370 <test_scan@@Base+0x1394>
   1a2f0:	ldr	r1, [sp, #36]	; 0x24
   1a2f4:	add	r2, r1, #4
   1a2f8:	add	ip, r1, r3
   1a2fc:	b	1a30c <test_scan@@Base+0x1330>
   1a300:	ldrb	r1, [r2], #1
   1a304:	cmp	r1, #1
   1a308:	beq	1a370 <test_scan@@Base+0x1394>
   1a30c:	cmp	r2, ip
   1a310:	bne	1a300 <test_scan@@Base+0x1324>
   1a314:	ldr	r1, [sp, #36]	; 0x24
   1a318:	ldr	r2, [sp, #56]	; 0x38
   1a31c:	b	1a32c <test_scan@@Base+0x1350>
   1a320:	ldrb	ip, [r1, #1]!
   1a324:	cmp	ip, #5
   1a328:	beq	1a384 <test_scan@@Base+0x13a8>
   1a32c:	add	r2, r2, #1
   1a330:	cmp	r2, r3
   1a334:	bne	1a320 <test_scan@@Base+0x1344>
   1a338:	ldr	r1, [sp, #36]	; 0x24
   1a33c:	ldr	r2, [sp, #56]	; 0x38
   1a340:	b	1a350 <test_scan@@Base+0x1374>
   1a344:	ldrb	ip, [r1, #1]!
   1a348:	cmp	ip, #2
   1a34c:	beq	1a3f0 <test_scan@@Base+0x1414>
   1a350:	add	r2, r2, #1
   1a354:	cmp	r2, r3
   1a358:	bne	1a344 <test_scan@@Base+0x1368>
   1a35c:	ldr	r0, [pc, #-1384]	; 19dfc <test_scan@@Base+0xe20>
   1a360:	mvn	r6, #0
   1a364:	add	r0, pc, r0
   1a368:	bl	1296c <puts@plt>
   1a36c:	b	198ac <test_scan@@Base+0x8d0>
   1a370:	ldr	r0, [pc, #-1400]	; 19e00 <test_scan@@Base+0xe24>
   1a374:	mvn	r6, #0
   1a378:	add	r0, pc, r0
   1a37c:	bl	1296c <puts@plt>
   1a380:	b	198ac <test_scan@@Base+0x8d0>
   1a384:	cmn	r2, #1
   1a388:	beq	1a338 <test_scan@@Base+0x135c>
   1a38c:	ldr	r0, [pc, #-1424]	; 19e04 <test_scan@@Base+0xe28>
   1a390:	mvn	r6, #0
   1a394:	add	r0, pc, r0
   1a398:	bl	1296c <puts@plt>
   1a39c:	b	198ac <test_scan@@Base+0x8d0>
   1a3a0:	ldr	r0, [pc, #-1440]	; 19e08 <test_scan@@Base+0xe2c>
   1a3a4:	mvn	r6, #0
   1a3a8:	add	r0, pc, r0
   1a3ac:	bl	1296c <puts@plt>
   1a3b0:	b	198ac <test_scan@@Base+0x8d0>
   1a3b4:	ldr	r0, [pc, #-1456]	; 19e0c <test_scan@@Base+0xe30>
   1a3b8:	ldr	r6, [sp, #56]	; 0x38
   1a3bc:	add	r0, pc, r0
   1a3c0:	bl	1296c <puts@plt>
   1a3c4:	b	198ac <test_scan@@Base+0x8d0>
   1a3c8:	ldr	r0, [pc, #-1472]	; 19e10 <test_scan@@Base+0xe34>
   1a3cc:	ldr	r6, [sp, #56]	; 0x38
   1a3d0:	add	r0, pc, r0
   1a3d4:	bl	1296c <puts@plt>
   1a3d8:	b	198ac <test_scan@@Base+0x8d0>
   1a3dc:	ldr	r0, [pc, #-1488]	; 19e14 <test_scan@@Base+0xe38>
   1a3e0:	ldr	r6, [sp, #56]	; 0x38
   1a3e4:	add	r0, pc, r0
   1a3e8:	bl	1296c <puts@plt>
   1a3ec:	b	198ac <test_scan@@Base+0x8d0>
   1a3f0:	cmp	r2, #6
   1a3f4:	bne	1a35c <test_scan@@Base+0x1380>
   1a3f8:	ldr	r2, [sp, #56]	; 0x38
   1a3fc:	add	r2, r2, #1
   1a400:	cmp	r2, r3
   1a404:	beq	1a38c <test_scan@@Base+0x13b0>
   1a408:	ldrb	r1, [r0, #1]!
   1a40c:	cmp	r1, #3
   1a410:	bne	1a3fc <test_scan@@Base+0x1420>
   1a414:	cmp	r2, #3
   1a418:	bne	1a38c <test_scan@@Base+0x13b0>
   1a41c:	cmp	r3, #3
   1a420:	bls	1a434 <test_scan@@Base+0x1458>
   1a424:	ldr	r2, [sp, #36]	; 0x24
   1a428:	ldrb	r2, [r2, #3]
   1a42c:	cmp	r2, #3
   1a430:	beq	1a448 <test_scan@@Base+0x146c>
   1a434:	ldr	r0, [pc, #-1572]	; 19e18 <test_scan@@Base+0xe3c>
   1a438:	mvn	r6, #0
   1a43c:	add	r0, pc, r0
   1a440:	bl	1296c <puts@plt>
   1a444:	b	198ac <test_scan@@Base+0x8d0>
   1a448:	cmp	r3, #4
   1a44c:	beq	1a484 <test_scan@@Base+0x14a8>
   1a450:	ldr	r2, [sp, #36]	; 0x24
   1a454:	ldrb	r2, [r2, #4]
   1a458:	cmp	r2, #3
   1a45c:	ldrne	r2, [sp, #36]	; 0x24
   1a460:	addne	r2, r2, #4
   1a464:	bne	1a478 <test_scan@@Base+0x149c>
   1a468:	b	1a484 <test_scan@@Base+0x14a8>
   1a46c:	ldrb	r1, [r2, #1]!
   1a470:	cmp	r1, #3
   1a474:	beq	1a498 <test_scan@@Base+0x14bc>
   1a478:	add	sl, sl, #1
   1a47c:	cmp	sl, r3
   1a480:	bne	1a46c <test_scan@@Base+0x1490>
   1a484:	ldr	r0, [pc, #-1648]	; 19e1c <test_scan@@Base+0xe40>
   1a488:	mvn	r6, #0
   1a48c:	add	r0, pc, r0
   1a490:	bl	1296c <puts@plt>
   1a494:	b	198ac <test_scan@@Base+0x8d0>
   1a498:	cmp	sl, #5
   1a49c:	bne	1a484 <test_scan@@Base+0x14a8>
   1a4a0:	ldr	r1, [sp, #36]	; 0x24
   1a4a4:	sub	r2, r3, #1
   1a4a8:	add	r1, r1, r3
   1a4ac:	b	1a4b8 <test_scan@@Base+0x14dc>
   1a4b0:	subs	r2, r2, #1
   1a4b4:	bcc	1a98c <test_scan@@Base+0x19b0>
   1a4b8:	cmp	r2, r3
   1a4bc:	bcs	1a9a0 <test_scan@@Base+0x19c4>
   1a4c0:	ldrb	r0, [r1, #-1]!
   1a4c4:	cmp	r0, #3
   1a4c8:	bne	1a4b0 <test_scan@@Base+0x14d4>
   1a4cc:	cmp	r2, #5
   1a4d0:	bne	1a98c <test_scan@@Base+0x19b0>
   1a4d4:	cmp	r3, #4
   1a4d8:	ldr	r1, [sp, #36]	; 0x24
   1a4dc:	movcc	r2, r3
   1a4e0:	movcs	r2, #4
   1a4e4:	add	r1, r1, r2
   1a4e8:	b	1a500 <test_scan@@Base+0x1524>
   1a4ec:	cmp	r2, r3
   1a4f0:	bcs	1a9a0 <test_scan@@Base+0x19c4>
   1a4f4:	ldrb	r0, [r1, #-1]!
   1a4f8:	cmp	r0, #3
   1a4fc:	beq	1a534 <test_scan@@Base+0x1558>
   1a500:	cmp	r2, #1
   1a504:	sub	r2, r2, #1
   1a508:	bhi	1a4ec <test_scan@@Base+0x1510>
   1a50c:	ldr	r0, [pc, #-1780]	; 19e20 <test_scan@@Base+0xe44>
   1a510:	mvn	r6, #0
   1a514:	add	r0, pc, r0
   1a518:	bl	1296c <puts@plt>
   1a51c:	b	198ac <test_scan@@Base+0x8d0>
   1a520:	ldr	r0, [pc, #-1796]	; 19e24 <test_scan@@Base+0xe48>
   1a524:	mvn	r6, #0
   1a528:	add	r0, pc, r0
   1a52c:	bl	1296c <puts@plt>
   1a530:	b	198ac <test_scan@@Base+0x8d0>
   1a534:	cmp	r2, #3
   1a538:	bne	1a50c <test_scan@@Base+0x1530>
   1a53c:	ldr	r3, [sp, #40]	; 0x28
   1a540:	ldr	r7, [r3, #-4]
   1a544:	cmp	r7, #0
   1a548:	beq	1a5cc <test_scan@@Base+0x15f0>
   1a54c:	ldr	r3, [pc, #-1836]	; 19e28 <test_scan@@Base+0xe4c>
   1a550:	ldr	sl, [sp, #40]	; 0x28
   1a554:	add	r3, pc, r3
   1a558:	ldr	r9, [sp, #56]	; 0x38
   1a55c:	str	r4, [sp, #36]	; 0x24
   1a560:	mov	r8, r3
   1a564:	b	1a574 <test_scan@@Base+0x1598>
   1a568:	add	r9, r9, #1
   1a56c:	cmp	r7, r9
   1a570:	beq	1a5c8 <test_scan@@Base+0x15ec>
   1a574:	mov	r3, sl
   1a578:	add	sl, sl, #4
   1a57c:	ldr	r0, [r3]
   1a580:	add	r0, r0, #4
   1a584:	adds	r0, r3, r0
   1a588:	beq	1a568 <test_scan@@Base+0x158c>
   1a58c:	ldr	r4, [r0, #-4]
   1a590:	mov	r1, r8
   1a594:	cmp	r4, #4
   1a598:	movcc	r2, r4
   1a59c:	movcs	r2, #4
   1a5a0:	bl	129f0 <strncmp@plt>
   1a5a4:	cmp	r4, #3
   1a5a8:	movls	r3, #0
   1a5ac:	movhi	r3, #1
   1a5b0:	cmp	r0, #0
   1a5b4:	movne	r3, #0
   1a5b8:	cmp	r3, #0
   1a5bc:	beq	1a568 <test_scan@@Base+0x158c>
   1a5c0:	cmp	r4, #4
   1a5c4:	bhi	1a568 <test_scan@@Base+0x158c>
   1a5c8:	ldr	r4, [sp, #36]	; 0x24
   1a5cc:	ldr	r2, [sp, #40]	; 0x28
   1a5d0:	sub	r8, r7, #-1073741823	; 0xc0000001
   1a5d4:	sub	r3, r7, #1
   1a5d8:	add	r8, r2, r8, lsl #2
   1a5dc:	ldr	r2, [pc, #-1976]	; 19e2c <test_scan@@Base+0xe50>
   1a5e0:	str	r3, [sp, #36]	; 0x24
   1a5e4:	add	r2, pc, r2
   1a5e8:	mov	sl, r3
   1a5ec:	mov	r3, r6
   1a5f0:	str	r4, [sp, #40]	; 0x28
   1a5f4:	mov	r6, r5
   1a5f8:	mov	r4, r2
   1a5fc:	mov	r5, r8
   1a600:	mov	r9, r3
   1a604:	b	1a638 <test_scan@@Base+0x165c>
   1a608:	cmp	r7, sl
   1a60c:	mov	r0, r5
   1a610:	bls	1a9a8 <test_scan@@Base+0x19cc>
   1a614:	ldr	r3, [r5]
   1a618:	mov	r1, r4
   1a61c:	add	r3, r3, #4
   1a620:	add	r0, r0, r3
   1a624:	bl	1290c <strcmp@plt>
   1a628:	sub	r5, r5, #4
   1a62c:	sub	sl, sl, #1
   1a630:	cmp	r0, #0
   1a634:	beq	1a640 <test_scan@@Base+0x1664>
   1a638:	cmn	sl, #1
   1a63c:	bne	1a608 <test_scan@@Base+0x162c>
   1a640:	ldr	r3, [pc, #-2072]	; 19e30 <test_scan@@Base+0xe54>
   1a644:	mov	r5, r6
   1a648:	ldr	r4, [sp, #40]	; 0x28
   1a64c:	mov	r6, r9
   1a650:	mov	r2, r6
   1a654:	add	r3, pc, r3
   1a658:	str	r4, [sp, #40]	; 0x28
   1a65c:	mov	r6, r5
   1a660:	ldr	sl, [sp, #36]	; 0x24
   1a664:	mov	r5, r8
   1a668:	mov	r4, r3
   1a66c:	mov	r9, r2
   1a670:	b	1a6a4 <test_scan@@Base+0x16c8>
   1a674:	cmp	r7, sl
   1a678:	mov	r0, r5
   1a67c:	bls	1a9a8 <test_scan@@Base+0x19cc>
   1a680:	ldr	r3, [r5]
   1a684:	mov	r1, r4
   1a688:	add	r3, r3, #4
   1a68c:	add	r0, r0, r3
   1a690:	bl	1290c <strcmp@plt>
   1a694:	sub	r5, r5, #4
   1a698:	sub	sl, sl, #1
   1a69c:	cmp	r0, #0
   1a6a0:	beq	1a6ac <test_scan@@Base+0x16d0>
   1a6a4:	cmn	sl, #1
   1a6a8:	bne	1a674 <test_scan@@Base+0x1698>
   1a6ac:	ldr	r4, [sp, #40]	; 0x28
   1a6b0:	ldr	r3, [sp, #36]	; 0x24
   1a6b4:	mov	r5, r6
   1a6b8:	ldr	r2, [pc, #-2188]	; 19e34 <test_scan@@Base+0xe58>
   1a6bc:	str	r4, [sp, #40]	; 0x28
   1a6c0:	mov	r6, r5
   1a6c4:	mov	sl, r8
   1a6c8:	mov	r5, r7
   1a6cc:	mov	r4, r3
   1a6d0:	mov	r7, r9
   1a6d4:	add	r2, pc, r2
   1a6d8:	str	r2, [sp, #44]	; 0x2c
   1a6dc:	cmn	r4, #1
   1a6e0:	beq	1a728 <test_scan@@Base+0x174c>
   1a6e4:	cmp	r5, r4
   1a6e8:	mov	r2, sl
   1a6ec:	bls	1a9a8 <test_scan@@Base+0x19cc>
   1a6f0:	ldr	r0, [sl]
   1a6f4:	sub	sl, sl, #4
   1a6f8:	add	r0, r0, #4
   1a6fc:	adds	r0, r2, r0
   1a700:	beq	1a924 <test_scan@@Base+0x1948>
   1a704:	ldr	r9, [r0, #-4]
   1a708:	ldr	r1, [sp, #44]	; 0x2c
   1a70c:	cmp	r9, #4
   1a710:	movcc	r2, r9
   1a714:	movcs	r2, #4
   1a718:	bl	129f0 <strncmp@plt>
   1a71c:	cmp	r0, #0
   1a720:	cmpeq	r9, #4
   1a724:	bne	1a924 <test_scan@@Base+0x1948>
   1a728:	ldr	sl, [pc, #-2296]	; 19e38 <test_scan@@Base+0xe5c>
   1a72c:	mov	r3, r7
   1a730:	ldr	r4, [sp, #40]	; 0x28
   1a734:	mov	r7, r5
   1a738:	add	sl, pc, sl
   1a73c:	mov	r5, r6
   1a740:	mov	r6, r3
   1a744:	ldr	r3, [sp, #36]	; 0x24
   1a748:	cmn	r3, #1
   1a74c:	beq	1a798 <test_scan@@Base+0x17bc>
   1a750:	ldr	r3, [sp, #36]	; 0x24
   1a754:	cmp	r7, r3
   1a758:	mov	r3, r8
   1a75c:	bls	1a9a8 <test_scan@@Base+0x19cc>
   1a760:	ldr	r0, [r8]
   1a764:	sub	r8, r8, #4
   1a768:	add	r0, r0, #4
   1a76c:	adds	r0, r3, r0
   1a770:	beq	1a92c <test_scan@@Base+0x1950>
   1a774:	ldr	r9, [r0, #-4]
   1a778:	mov	r1, sl
   1a77c:	cmp	r9, #4
   1a780:	movcc	r2, r9
   1a784:	movcs	r2, #4
   1a788:	bl	129f0 <strncmp@plt>
   1a78c:	cmp	r9, #4
   1a790:	cmpeq	r0, #0
   1a794:	bne	1a92c <test_scan@@Base+0x1950>
   1a798:	ldr	ip, [sp, #12]
   1a79c:	ldr	r1, [sp, #56]	; 0x38
   1a7a0:	ldr	r2, [sp, #28]
   1a7a4:	ldr	r0, [sp, #52]	; 0x34
   1a7a8:	ldr	r3, [sp, #32]
   1a7ac:	b	1a7dc <test_scan@@Base+0x1800>
   1a7b0:	add	r1, r1, #1
   1a7b4:	cmp	r4, r1
   1a7b8:	bls	1a7fc <test_scan@@Base+0x1820>
   1a7bc:	mov	r3, r0
   1a7c0:	add	r0, r0, #4
   1a7c4:	ldr	r2, [r3]
   1a7c8:	adds	ip, r3, r2
   1a7cc:	beq	1a854 <test_scan@@Base+0x1878>
   1a7d0:	ldr	r3, [r3, r2]
   1a7d4:	sub	r3, ip, r3
   1a7d8:	ldrh	r2, [r3]
   1a7dc:	cmp	r2, #9
   1a7e0:	bls	1a7b0 <test_scan@@Base+0x17d4>
   1a7e4:	ldrh	r3, [r3, #8]
   1a7e8:	cmp	r3, #0
   1a7ec:	beq	1a7b0 <test_scan@@Base+0x17d4>
   1a7f0:	ldrsh	r3, [ip, r3]
   1a7f4:	cmp	r3, #13
   1a7f8:	bne	1a7b0 <test_scan@@Base+0x17d4>
   1a7fc:	ldr	r3, [r5, #4]
   1a800:	add	r3, r3, #4
   1a804:	adds	r3, r5, r3
   1a808:	addne	r5, r5, #8
   1a80c:	ldrne	r1, [sp, #60]	; 0x3c
   1a810:	beq	1a854 <test_scan@@Base+0x1878>
   1a814:	ldr	r2, [r3]
   1a818:	sub	r2, r3, r2
   1a81c:	ldrh	r0, [r2]
   1a820:	cmp	r0, #9
   1a824:	bls	1a834 <test_scan@@Base+0x1858>
   1a828:	ldrh	r2, [r2, #8]
   1a82c:	cmp	r2, #0
   1a830:	bne	1a858 <test_scan@@Base+0x187c>
   1a834:	add	r1, r1, #1
   1a838:	cmp	r4, r1
   1a83c:	beq	1a864 <test_scan@@Base+0x1888>
   1a840:	mov	r3, r5
   1a844:	add	r5, r5, #4
   1a848:	ldr	r2, [r3]
   1a84c:	adds	r3, r3, r2
   1a850:	bne	1a814 <test_scan@@Base+0x1838>
   1a854:	bl	12a18 <__assert_fail@plt+0x10>
   1a858:	ldrsh	r3, [r3, r2]
   1a85c:	cmp	r3, #42	; 0x2a
   1a860:	bne	1a834 <test_scan@@Base+0x1858>
   1a864:	ldr	r2, [sp, #20]
   1a868:	ldr	r0, [sp, #24]
   1a86c:	cmp	r4, r2
   1a870:	mov	r3, r0
   1a874:	bls	1a218 <test_scan@@Base+0x123c>
   1a878:	ldr	r1, [r0]
   1a87c:	sub	r0, r0, #4
   1a880:	adds	ip, r3, r1
   1a884:	beq	1a854 <test_scan@@Base+0x1878>
   1a888:	ldr	r3, [r3, r1]
   1a88c:	sub	r3, ip, r3
   1a890:	ldrh	r1, [r3]
   1a894:	cmp	r1, #9
   1a898:	bls	1a8a8 <test_scan@@Base+0x18cc>
   1a89c:	ldrh	r3, [r3, #8]
   1a8a0:	cmp	r3, #0
   1a8a4:	bne	1a914 <test_scan@@Base+0x1938>
   1a8a8:	cmp	r2, #0
   1a8ac:	sub	r2, r2, #1
   1a8b0:	bne	1a86c <test_scan@@Base+0x1890>
   1a8b4:	ldr	r1, [sp, #16]
   1a8b8:	ldr	r2, [sp, #60]	; 0x3c
   1a8bc:	b	1a8c8 <test_scan@@Base+0x18ec>
   1a8c0:	subs	r2, r2, #1
   1a8c4:	bcc	198ac <test_scan@@Base+0x8d0>
   1a8c8:	cmp	r4, r2
   1a8cc:	mov	r3, r1
   1a8d0:	bls	1a218 <test_scan@@Base+0x123c>
   1a8d4:	ldr	r0, [r1]
   1a8d8:	sub	r1, r1, #4
   1a8dc:	adds	ip, r3, r0
   1a8e0:	beq	1a854 <test_scan@@Base+0x1878>
   1a8e4:	ldr	r3, [r3, r0]
   1a8e8:	sub	r3, ip, r3
   1a8ec:	ldrh	r0, [r3]
   1a8f0:	cmp	r0, #9
   1a8f4:	bls	1a8c0 <test_scan@@Base+0x18e4>
   1a8f8:	ldrh	r3, [r3, #8]
   1a8fc:	cmp	r3, #0
   1a900:	beq	1a8c0 <test_scan@@Base+0x18e4>
   1a904:	ldrsh	r3, [ip, r3]
   1a908:	cmp	r3, #42	; 0x2a
   1a90c:	beq	198ac <test_scan@@Base+0x8d0>
   1a910:	b	1a8c0 <test_scan@@Base+0x18e4>
   1a914:	ldrsh	r3, [ip, r3]
   1a918:	cmp	r3, #1
   1a91c:	beq	1a8b4 <test_scan@@Base+0x18d8>
   1a920:	b	1a8a8 <test_scan@@Base+0x18cc>
   1a924:	sub	r4, r4, #1
   1a928:	b	1a6dc <test_scan@@Base+0x1700>
   1a92c:	ldr	r3, [sp, #36]	; 0x24
   1a930:	sub	r3, r3, #1
   1a934:	str	r3, [sp, #36]	; 0x24
   1a938:	b	1a744 <test_scan@@Base+0x1768>
   1a93c:	ldr	r0, [pc, #-2824]	; 19e3c <test_scan@@Base+0xe60>
   1a940:	mov	r6, r8
   1a944:	add	r0, pc, r0
   1a948:	bl	1296c <puts@plt>
   1a94c:	b	198ac <test_scan@@Base+0x8d0>
   1a950:	ldr	r0, [pc, #-2840]	; 19e40 <test_scan@@Base+0xe64>
   1a954:	mov	r6, r8
   1a958:	add	r0, pc, r0
   1a95c:	bl	1296c <puts@plt>
   1a960:	b	198ac <test_scan@@Base+0x8d0>
   1a964:	ldr	r0, [pc, #-2856]	; 19e44 <test_scan@@Base+0xe68>
   1a968:	mov	r6, r8
   1a96c:	add	r0, pc, r0
   1a970:	bl	1296c <puts@plt>
   1a974:	b	198ac <test_scan@@Base+0x8d0>
   1a978:	ldr	r0, [pc, #-2872]	; 19e48 <test_scan@@Base+0xe6c>
   1a97c:	mov	r6, r8
   1a980:	add	r0, pc, r0
   1a984:	bl	1296c <puts@plt>
   1a988:	b	198ac <test_scan@@Base+0x8d0>
   1a98c:	ldr	r0, [pc, #-2888]	; 19e4c <test_scan@@Base+0xe70>
   1a990:	mvn	r6, #0
   1a994:	add	r0, pc, r0
   1a998:	bl	1296c <puts@plt>
   1a99c:	b	198ac <test_scan@@Base+0x8d0>
   1a9a0:	bl	13730 <_start@@Base+0x344>
   1a9a4:	bl	130f4 <__assert_fail@plt+0x6ec>
   1a9a8:	bl	13768 <_start@@Base+0x37c>
   1a9ac:	ldr	r3, [pc, #-2916]	; 19e50 <test_scan@@Base+0xe74>
   1a9b0:	ldr	r1, [pc, #-2916]	; 19e54 <test_scan@@Base+0xe78>
   1a9b4:	add	r3, pc, r3
   1a9b8:	ldr	r0, [pc, #-2920]	; 19e58 <test_scan@@Base+0xe7c>
   1a9bc:	add	r3, r3, #1280	; 0x500
   1a9c0:	ldr	r2, [pc, #-2924]	; 19e5c <test_scan@@Base+0xe80>
   1a9c4:	add	r3, r3, #4
   1a9c8:	add	r1, pc, r1
   1a9cc:	add	r0, pc, r0
   1a9d0:	bl	12a08 <__assert_fail@plt>
   1a9d4:	ldr	r3, [pc, #-2940]	; 19e60 <test_scan@@Base+0xe84>
   1a9d8:	ldr	r1, [pc, #-2940]	; 19e64 <test_scan@@Base+0xe88>
   1a9dc:	add	r3, pc, r3
   1a9e0:	ldr	r0, [pc, #-2944]	; 19e68 <test_scan@@Base+0xe8c>
   1a9e4:	add	r3, r3, #1280	; 0x500
   1a9e8:	ldr	r2, [pc, #-2948]	; 19e6c <test_scan@@Base+0xe90>
   1a9ec:	add	r3, r3, #4
   1a9f0:	add	r1, pc, r1
   1a9f4:	add	r0, pc, r0
   1a9f8:	bl	12a08 <__assert_fail@plt>

0001a9fc <test_basic_sort@@Base>:
   1a9fc:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1aa00:	sub	sp, sp, #32
   1aa04:	mov	r3, #3
   1aa08:	mov	lr, #7
   1aa0c:	mov	ip, #1
   1aa10:	mov	r1, #4
   1aa14:	mov	r2, #2
   1aa18:	mov	r4, #6
   1aa1c:	strb	r4, [sp, #16]
   1aa20:	strb	r4, [sp, #29]
   1aa24:	strb	lr, [sp, #17]
   1aa28:	strb	lr, [sp, #30]
   1aa2c:	strb	ip, [sp, #18]
   1aa30:	strb	ip, [sp, #24]
   1aa34:	strb	r3, [sp, #19]
   1aa38:	strb	r3, [sp, #21]
   1aa3c:	strb	r3, [sp, #26]
   1aa40:	strb	r3, [sp, #27]
   1aa44:	strb	r1, [sp, #20]
   1aa48:	strb	r1, [sp, #28]
   1aa4c:	strb	r2, [sp, #22]
   1aa50:	strb	r2, [sp, #25]
   1aa54:	mov	r4, r0
   1aa58:	bl	1f0f0 <flatcc_builder_reset@@Base>
   1aa5c:	ldr	r1, [pc, #1088]	; 1aea4 <test_basic_sort@@Base+0x4a8>
   1aa60:	mov	r3, #0
   1aa64:	mov	r0, r4
   1aa68:	mov	r2, r3
   1aa6c:	add	r1, pc, r1
   1aa70:	bl	1f8b4 <flatcc_builder_start_buffer@@Base>
   1aa74:	cmp	r0, #0
   1aa78:	bne	1aa88 <test_basic_sort@@Base+0x8c>
   1aa7c:	mov	r1, #36	; 0x24
   1aa80:	mov	r0, r4
   1aa84:	bl	206ec <flatcc_builder_start_table@@Base>
   1aa88:	ldr	r1, [pc, #1048]	; 1aea8 <test_basic_sort@@Base+0x4ac>
   1aa8c:	mov	r0, r4
   1aa90:	add	r1, pc, r1
   1aa94:	bl	21f90 <flatcc_builder_create_string_str@@Base>
   1aa98:	subs	r5, r0, #0
   1aa9c:	beq	1aab4 <test_basic_sort@@Base+0xb8>
   1aaa0:	mov	r1, #3
   1aaa4:	mov	r0, r4
   1aaa8:	bl	2234c <flatcc_builder_table_add_offset@@Base>
   1aaac:	cmp	r0, #0
   1aab0:	strne	r5, [r0]
   1aab4:	mvn	r2, #0
   1aab8:	mov	r3, #1
   1aabc:	str	r2, [sp, #4]
   1aac0:	str	r3, [sp]
   1aac4:	mov	r2, #7
   1aac8:	add	r1, sp, #16
   1aacc:	mov	r0, r4
   1aad0:	bl	212b0 <flatcc_builder_create_vector@@Base>
   1aad4:	subs	r5, r0, #0
   1aad8:	beq	1aaf0 <test_basic_sort@@Base+0xf4>
   1aadc:	mov	r1, #5
   1aae0:	mov	r0, r4
   1aae4:	bl	2234c <flatcc_builder_table_add_offset@@Base>
   1aae8:	cmp	r0, #0
   1aaec:	strne	r5, [r0]
   1aaf0:	ldr	r1, [pc, #948]	; 1aeac <test_basic_sort@@Base+0x4b0>
   1aaf4:	mov	r2, #1
   1aaf8:	add	r1, pc, r1
   1aafc:	add	r1, r1, #1072	; 0x430
   1ab00:	add	r1, r1, #12
   1ab04:	mov	r0, r4
   1ab08:	bl	21038 <flatcc_builder_check_required@@Base>
   1ab0c:	cmp	r0, #0
   1ab10:	beq	1aea0 <test_basic_sort@@Base+0x4a4>
   1ab14:	mov	r0, r4
   1ab18:	bl	210e0 <flatcc_builder_end_table@@Base>
   1ab1c:	mov	r1, r0
   1ab20:	mov	r0, r4
   1ab24:	bl	1f96c <flatcc_builder_end_buffer@@Base>
   1ab28:	mov	r0, r4
   1ab2c:	add	r1, sp, #12
   1ab30:	bl	228b4 <flatcc_builder_get_direct_buffer@@Base>
   1ab34:	cmp	r0, #0
   1ab38:	beq	1ab4c <test_basic_sort@@Base+0x150>
   1ab3c:	ldr	r3, [pc, #876]	; 1aeb0 <test_basic_sort@@Base+0x4b4>
   1ab40:	ldr	r2, [r0, #4]
   1ab44:	cmp	r2, r3
   1ab48:	beq	1ab50 <test_basic_sort@@Base+0x154>
   1ab4c:	bl	12aec <__assert_fail@plt+0xe4>
   1ab50:	ldr	r3, [r0]
   1ab54:	adds	r4, r0, r3
   1ab58:	beq	1ab4c <test_basic_sort@@Base+0x150>
   1ab5c:	ldr	r3, [r0, r3]
   1ab60:	sub	r3, r4, r3
   1ab64:	ldrh	r2, [r3]
   1ab68:	cmp	r2, #15
   1ab6c:	bls	1ae4c <test_basic_sort@@Base+0x450>
   1ab70:	ldrh	r3, [r3, #14]
   1ab74:	cmp	r3, #0
   1ab78:	beq	1ae4c <test_basic_sort@@Base+0x450>
   1ab7c:	ldr	r5, [r4, r3]
   1ab80:	add	r4, r4, r3
   1ab84:	add	r5, r5, #4
   1ab88:	adds	r3, r4, r5
   1ab8c:	beq	1ae4c <test_basic_sort@@Base+0x450>
   1ab90:	ldr	r9, [r3, #-4]
   1ab94:	cmp	r9, #0
   1ab98:	beq	1ae4c <test_basic_sort@@Base+0x450>
   1ab9c:	lsr	r7, r9, #1
   1aba0:	sub	r0, r9, #1
   1aba4:	lsl	r8, r7, #1
   1aba8:	cmp	r0, r8
   1abac:	movcs	r2, r7
   1abb0:	movcs	r1, r8
   1abb4:	bcs	1ac18 <test_basic_sort@@Base+0x21c>
   1abb8:	b	1ac4c <test_basic_sort@@Base+0x250>
   1abbc:	ldr	lr, [r3, #-4]
   1abc0:	cmp	lr, r1
   1abc4:	bls	1ae70 <test_basic_sort@@Base+0x474>
   1abc8:	add	ip, r1, #1
   1abcc:	cmp	lr, ip
   1abd0:	ldrb	r6, [r3, r1]
   1abd4:	bls	1ae70 <test_basic_sort@@Base+0x474>
   1abd8:	ldrb	sl, [r3, ip]
   1abdc:	cmp	sl, r6
   1abe0:	movls	ip, r1
   1abe4:	cmp	lr, r2
   1abe8:	bls	1ae70 <test_basic_sort@@Base+0x474>
   1abec:	ldrb	lr, [r3, r2]
   1abf0:	add	r6, r3, r2
   1abf4:	mov	r2, ip
   1abf8:	ldrb	ip, [r3, r2]
   1abfc:	cmp	ip, lr
   1ac00:	bls	1ac4c <test_basic_sort@@Base+0x250>
   1ac04:	lsl	r1, r2, #1
   1ac08:	cmp	r0, r1
   1ac0c:	strb	lr, [r3, r2]
   1ac10:	strb	ip, [r6]
   1ac14:	bcc	1ac4c <test_basic_sort@@Base+0x250>
   1ac18:	cmp	r0, r1
   1ac1c:	bhi	1abbc <test_basic_sort@@Base+0x1c0>
   1ac20:	ldr	ip, [r3, #-4]
   1ac24:	cmp	ip, r2
   1ac28:	bls	1ae70 <test_basic_sort@@Base+0x474>
   1ac2c:	cmp	ip, r1
   1ac30:	add	r6, r3, r2
   1ac34:	ldrb	lr, [r3, r2]
   1ac38:	bls	1ae70 <test_basic_sort@@Base+0x474>
   1ac3c:	mov	r2, r1
   1ac40:	ldrb	ip, [r3, r2]
   1ac44:	cmp	ip, lr
   1ac48:	bhi	1ac04 <test_basic_sort@@Base+0x208>
   1ac4c:	sub	r7, r7, #1
   1ac50:	cmn	r7, #1
   1ac54:	sub	r8, r8, #2
   1ac58:	bne	1aba8 <test_basic_sort@@Base+0x1ac>
   1ac5c:	cmp	r0, #0
   1ac60:	beq	1ad24 <test_basic_sort@@Base+0x328>
   1ac64:	add	r9, r3, r9
   1ac68:	mov	r7, #0
   1ac6c:	ldrb	ip, [r9, #-1]
   1ac70:	ldrb	lr, [r3]
   1ac74:	sub	r0, r0, #1
   1ac78:	mov	r2, r7
   1ac7c:	strb	lr, [r9, #-1]!
   1ac80:	mov	r1, #0
   1ac84:	strb	ip, [r3]
   1ac88:	b	1ace8 <test_basic_sort@@Base+0x2ec>
   1ac8c:	ldr	lr, [r3, #-4]
   1ac90:	cmp	r1, lr
   1ac94:	bcs	1ae70 <test_basic_sort@@Base+0x474>
   1ac98:	add	ip, r1, #1
   1ac9c:	cmp	lr, ip
   1aca0:	ldrb	r6, [r3, r1]
   1aca4:	bls	1ae70 <test_basic_sort@@Base+0x474>
   1aca8:	ldrb	r8, [r3, ip]
   1acac:	cmp	r8, r6
   1acb0:	movls	ip, r1
   1acb4:	cmp	r2, lr
   1acb8:	bcs	1ae70 <test_basic_sort@@Base+0x474>
   1acbc:	ldrb	lr, [r3, r2]
   1acc0:	add	r6, r3, r2
   1acc4:	mov	r2, ip
   1acc8:	ldrb	ip, [r3, r2]
   1accc:	cmp	ip, lr
   1acd0:	bls	1ad1c <test_basic_sort@@Base+0x320>
   1acd4:	lsl	r1, r2, #1
   1acd8:	cmp	r0, r1
   1acdc:	strb	lr, [r3, r2]
   1ace0:	strb	ip, [r6]
   1ace4:	bcc	1ad1c <test_basic_sort@@Base+0x320>
   1ace8:	cmp	r1, r0
   1acec:	bcc	1ac8c <test_basic_sort@@Base+0x290>
   1acf0:	ldr	ip, [r3, #-4]
   1acf4:	cmp	r2, ip
   1acf8:	bcs	1ae70 <test_basic_sort@@Base+0x474>
   1acfc:	cmp	r1, ip
   1ad00:	add	r6, r3, r2
   1ad04:	ldrb	lr, [r3, r2]
   1ad08:	bcs	1ae70 <test_basic_sort@@Base+0x474>
   1ad0c:	mov	r2, r1
   1ad10:	ldrb	ip, [r3, r2]
   1ad14:	cmp	ip, lr
   1ad18:	bhi	1acd4 <test_basic_sort@@Base+0x2d8>
   1ad1c:	cmp	r0, #0
   1ad20:	bne	1ac6c <test_basic_sort@@Base+0x270>
   1ad24:	ldr	r2, [r3, #-4]
   1ad28:	cmp	r2, #7
   1ad2c:	bne	1ae4c <test_basic_sort@@Base+0x450>
   1ad30:	ldrb	lr, [r4, r5]
   1ad34:	cmp	lr, #1
   1ad38:	bne	1ae24 <test_basic_sort@@Base+0x428>
   1ad3c:	mov	r5, #0
   1ad40:	mov	r7, r5
   1ad44:	mov	r4, lr
   1ad48:	mov	r6, #6
   1ad4c:	mov	r8, #4
   1ad50:	mov	ip, r6
   1ad54:	mov	r0, r7
   1ad58:	sub	r1, ip, r0
   1ad5c:	add	r1, r0, r1, lsr #1
   1ad60:	cmp	r1, #6
   1ad64:	bhi	1ae70 <test_basic_sort@@Base+0x474>
   1ad68:	ldrb	r2, [r3, r1]
   1ad6c:	cmp	r2, lr
   1ad70:	bcs	1ad98 <test_basic_sort@@Base+0x39c>
   1ad74:	b	1adc0 <test_basic_sort@@Base+0x3c4>
   1ad78:	sub	r2, r1, r0
   1ad7c:	add	r2, r0, r2, lsr #1
   1ad80:	cmp	r2, #6
   1ad84:	bhi	1ae70 <test_basic_sort@@Base+0x474>
   1ad88:	ldrb	ip, [r3, r2]
   1ad8c:	cmp	ip, lr
   1ad90:	bcc	1adc8 <test_basic_sort@@Base+0x3cc>
   1ad94:	mov	r1, r2
   1ad98:	cmp	r1, r0
   1ad9c:	bhi	1ad78 <test_basic_sort@@Base+0x37c>
   1ada0:	cmp	r1, r0
   1ada4:	beq	1addc <test_basic_sort@@Base+0x3e0>
   1ada8:	ldr	r0, [pc, #260]	; 1aeb4 <test_basic_sort@@Base+0x4b8>
   1adac:	add	r0, pc, r0
   1adb0:	bl	1296c <puts@plt>
   1adb4:	mvn	r0, #0
   1adb8:	add	sp, sp, #32
   1adbc:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1adc0:	mov	r2, r1
   1adc4:	mov	r1, ip
   1adc8:	add	r0, r2, #1
   1adcc:	cmp	r0, r1
   1add0:	bcs	1ada0 <test_basic_sort@@Base+0x3a4>
   1add4:	mov	ip, r1
   1add8:	b	1ad58 <test_basic_sort@@Base+0x35c>
   1addc:	ldrb	r2, [r3, r1]
   1ade0:	cmp	r2, lr
   1ade4:	bne	1ada8 <test_basic_sort@@Base+0x3ac>
   1ade8:	cmp	r4, #4
   1adec:	beq	1ae3c <test_basic_sort@@Base+0x440>
   1adf0:	cmp	r5, r1
   1adf4:	bne	1ada8 <test_basic_sort@@Base+0x3ac>
   1adf8:	cmp	r4, #6
   1adfc:	mov	r5, r4
   1ae00:	bhi	1ae94 <test_basic_sort@@Base+0x498>
   1ae04:	add	r2, sp, #32
   1ae08:	add	r1, r2, r4
   1ae0c:	ldrb	r2, [r3, r5]
   1ae10:	ldrb	lr, [r1, #-8]
   1ae14:	add	r4, r4, #1
   1ae18:	cmp	r2, lr
   1ae1c:	uxtb	r4, r4
   1ae20:	beq	1ad50 <test_basic_sort@@Base+0x354>
   1ae24:	ldr	r0, [pc, #140]	; 1aeb8 <test_basic_sort@@Base+0x4bc>
   1ae28:	add	r0, pc, r0
   1ae2c:	bl	1296c <puts@plt>
   1ae30:	mvn	r0, #0
   1ae34:	add	sp, sp, #32
   1ae38:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1ae3c:	cmp	r1, #2
   1ae40:	bne	1ada8 <test_basic_sort@@Base+0x3ac>
   1ae44:	mov	r5, r8
   1ae48:	b	1ae04 <test_basic_sort@@Base+0x408>
   1ae4c:	ldr	r3, [pc, #104]	; 1aebc <test_basic_sort@@Base+0x4c0>
   1ae50:	ldr	r1, [pc, #104]	; 1aec0 <test_basic_sort@@Base+0x4c4>
   1ae54:	ldr	r0, [pc, #104]	; 1aec4 <test_basic_sort@@Base+0x4c8>
   1ae58:	add	r3, pc, r3
   1ae5c:	mov	r2, #1552	; 0x610
   1ae60:	add	r3, r3, #1296	; 0x510
   1ae64:	add	r1, pc, r1
   1ae68:	add	r0, pc, r0
   1ae6c:	bl	12a08 <__assert_fail@plt>
   1ae70:	ldr	r3, [pc, #80]	; 1aec8 <test_basic_sort@@Base+0x4cc>
   1ae74:	ldr	r1, [pc, #80]	; 1aecc <test_basic_sort@@Base+0x4d0>
   1ae78:	ldr	r0, [pc, #80]	; 1aed0 <test_basic_sort@@Base+0x4d4>
   1ae7c:	add	r3, pc, r3
   1ae80:	ldr	r2, [pc, #76]	; 1aed4 <test_basic_sort@@Base+0x4d8>
   1ae84:	add	r3, r3, #172	; 0xac
   1ae88:	add	r1, pc, r1
   1ae8c:	add	r0, pc, r0
   1ae90:	bl	12a08 <__assert_fail@plt>
   1ae94:	mov	r0, #0
   1ae98:	add	sp, sp, #32
   1ae9c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1aea0:	bl	130f4 <__assert_fail@plt+0x6ec>
   1aea4:	andeq	sl, r0, r0, lsr #19
   1aea8:	andeq	sl, r0, r4, lsr #21
   1aeac:			; <UNDEFINED> instruction: 0x00009cb8
   1aeb0:	movtpl	r4, #61261	; 0xef4d
   1aeb4:	strdeq	fp, [r0], -r0
   1aeb8:	andeq	fp, r0, ip, asr ip
   1aebc:	andeq	r9, r0, r8, asr r9
   1aec0:	andeq	sl, r0, ip, ror #25
   1aec4:	andeq	fp, r0, ip, ror #23
   1aec8:	andeq	r9, r0, r4, lsr r9
   1aecc:	ldrdeq	sl, [r0], -r4
   1aed0:	andeq	sl, r0, r0, asr r1
   1aed4:	andeq	r0, r0, fp, lsl #3

0001aed8 <test_clone_slice@@Base>:
   1aed8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1aedc:	sub	sp, sp, #36	; 0x24
   1aee0:	mov	r5, #0
   1aee4:	mov	r3, #1
   1aee8:	mov	r4, r0
   1aeec:	strb	r5, [sp, #24]
   1aef0:	strb	r5, [sp, #26]
   1aef4:	strb	r5, [sp, #27]
   1aef8:	strb	r5, [sp, #29]
   1aefc:	strb	r5, [sp, #30]
   1af00:	strb	r3, [sp, #25]
   1af04:	strb	r3, [sp, #28]
   1af08:	bl	1f0f0 <flatcc_builder_reset@@Base>
   1af0c:	ldr	r1, [pc, #2768]	; 1b9e4 <test_clone_slice@@Base+0xb0c>
   1af10:	mov	r3, r5
   1af14:	mov	r2, r5
   1af18:	mov	r0, r4
   1af1c:	add	r1, pc, r1
   1af20:	bl	1f8b4 <flatcc_builder_start_buffer@@Base>
   1af24:	ldr	r5, [pc, #2748]	; 1b9e8 <test_clone_slice@@Base+0xb10>
   1af28:	add	r5, pc, r5
   1af2c:	cmp	r0, #0
   1af30:	bne	1af40 <test_clone_slice@@Base+0x68>
   1af34:	mov	r1, #36	; 0x24
   1af38:	mov	r0, r4
   1af3c:	bl	206ec <flatcc_builder_start_table@@Base>
   1af40:	ldr	r1, [pc, #2724]	; 1b9ec <test_clone_slice@@Base+0xb14>
   1af44:	mov	r0, r4
   1af48:	add	r1, pc, r1
   1af4c:	bl	21f90 <flatcc_builder_create_string_str@@Base>
   1af50:	subs	r6, r0, #0
   1af54:	beq	1af6c <test_clone_slice@@Base+0x94>
   1af58:	mov	r1, #3
   1af5c:	mov	r0, r4
   1af60:	bl	2234c <flatcc_builder_table_add_offset@@Base>
   1af64:	cmp	r0, #0
   1af68:	strne	r6, [r0]
   1af6c:	mvn	r2, #0
   1af70:	mov	r3, #1
   1af74:	add	fp, sp, #24
   1af78:	str	r2, [sp, #4]
   1af7c:	mov	r1, fp
   1af80:	str	r3, [sp]
   1af84:	mov	r2, #7
   1af88:	mov	r0, r4
   1af8c:	bl	212b0 <flatcc_builder_create_vector@@Base>
   1af90:	subs	r6, r0, #0
   1af94:	beq	1afac <test_clone_slice@@Base+0xd4>
   1af98:	mov	r1, #24
   1af9c:	mov	r0, r4
   1afa0:	bl	2234c <flatcc_builder_table_add_offset@@Base>
   1afa4:	cmp	r0, #0
   1afa8:	strne	r6, [r0]
   1afac:	mvn	r3, #-1073741824	; 0xc0000000
   1afb0:	mov	r2, #2
   1afb4:	mov	r1, #4
   1afb8:	mov	r0, r4
   1afbc:	bl	2048c <flatcc_builder_start_vector@@Base>
   1afc0:	mov	r1, #2
   1afc4:	mov	r0, r4
   1afc8:	bl	1fc38 <flatcc_builder_extend_vector@@Base>
   1afcc:	mov	r2, #22
   1afd0:	mov	r3, #44	; 0x2c
   1afd4:	strh	r2, [r0]
   1afd8:	strh	r3, [r0, #4]
   1afdc:	mov	r0, r4
   1afe0:	bl	21428 <flatcc_builder_end_vector@@Base>
   1afe4:	subs	r6, r0, #0
   1afe8:	beq	1b000 <test_clone_slice@@Base+0x128>
   1afec:	mov	r1, #9
   1aff0:	mov	r0, r4
   1aff4:	bl	2234c <flatcc_builder_table_add_offset@@Base>
   1aff8:	cmp	r0, #0
   1affc:	strne	r6, [r0]
   1b000:	mov	r3, #16
   1b004:	mov	r2, #32
   1b008:	mov	r1, #0
   1b00c:	mov	r0, r4
   1b010:	bl	2212c <flatcc_builder_table_add@@Base>
   1b014:	ldr	r1, [pc, #2516]	; 1b9f0 <test_clone_slice@@Base+0xb18>
   1b018:	ldr	r3, [pc, #2516]	; 1b9f4 <test_clone_slice@@Base+0xb1c>
   1b01c:	add	r1, pc, r1
   1b020:	add	r1, r1, #1072	; 0x430
   1b024:	mov	r2, #1
   1b028:	add	r1, r1, #12
   1b02c:	str	r3, [r0]
   1b030:	mov	r0, r4
   1b034:	bl	21038 <flatcc_builder_check_required@@Base>
   1b038:	cmp	r0, #0
   1b03c:	beq	1b970 <test_clone_slice@@Base+0xa98>
   1b040:	mov	r0, r4
   1b044:	bl	210e0 <flatcc_builder_end_table@@Base>
   1b048:	add	sl, sp, #20
   1b04c:	mov	r1, r0
   1b050:	mov	r0, r4
   1b054:	bl	1f96c <flatcc_builder_end_buffer@@Base>
   1b058:	mov	r1, sl
   1b05c:	mov	r0, r4
   1b060:	bl	22a08 <flatcc_builder_finalize_aligned_buffer@@Base>
   1b064:	ldr	r3, [pc, #2444]	; 1b9f8 <test_clone_slice@@Base+0xb20>
   1b068:	ldr	r2, [sp, #20]
   1b06c:	ldr	r3, [r5, r3]
   1b070:	str	r3, [sp, #8]
   1b074:	ldr	r3, [r3]
   1b078:	mov	r9, r0
   1b07c:	mov	r1, r0
   1b080:	ldr	r0, [pc, #2420]	; 1b9fc <test_clone_slice@@Base+0xb24>
   1b084:	add	r0, pc, r0
   1b088:	bl	13540 <_start@@Base+0x154>
   1b08c:	cmp	r9, #0
   1b090:	beq	1b0a4 <test_clone_slice@@Base+0x1cc>
   1b094:	ldr	r3, [pc, #2404]	; 1ba00 <test_clone_slice@@Base+0xb28>
   1b098:	ldr	r2, [r9, #4]
   1b09c:	cmp	r2, r3
   1b0a0:	beq	1b824 <test_clone_slice@@Base+0x94c>
   1b0a4:	mov	r0, r4
   1b0a8:	bl	1f0f0 <flatcc_builder_reset@@Base>
   1b0ac:	ldr	r1, [pc, #2384]	; 1ba04 <test_clone_slice@@Base+0xb2c>
   1b0b0:	mov	r3, #0
   1b0b4:	mov	r2, r3
   1b0b8:	add	r1, pc, r1
   1b0bc:	mov	r0, r4
   1b0c0:	bl	1f8b4 <flatcc_builder_start_buffer@@Base>
   1b0c4:	subs	r6, r0, #0
   1b0c8:	bne	1b524 <test_clone_slice@@Base+0x64c>
   1b0cc:	mov	r1, #36	; 0x24
   1b0d0:	mov	r0, r4
   1b0d4:	bl	206ec <flatcc_builder_start_table@@Base>
   1b0d8:	cmp	r6, #0
   1b0dc:	beq	1b524 <test_clone_slice@@Base+0x64c>
   1b0e0:	ldr	r3, [r6]
   1b0e4:	sub	r3, r6, r3
   1b0e8:	ldrh	r1, [r3]
   1b0ec:	cmp	r1, #11
   1b0f0:	bls	1b140 <test_clone_slice@@Base+0x268>
   1b0f4:	ldrh	r5, [r3, #10]
   1b0f8:	cmp	r5, #0
   1b0fc:	beq	1b140 <test_clone_slice@@Base+0x268>
   1b100:	ldr	r2, [r6, r5]
   1b104:	add	r5, r6, r5
   1b108:	add	r2, r2, #4
   1b10c:	adds	r5, r5, r2
   1b110:	beq	1b998 <test_clone_slice@@Base+0xac0>
   1b114:	cmp	r1, #53	; 0x35
   1b118:	bhi	1b164 <test_clone_slice@@Base+0x28c>
   1b11c:	ldr	r3, [pc, #2276]	; 1ba08 <test_clone_slice@@Base+0xb30>
   1b120:	ldr	r1, [pc, #2276]	; 1ba0c <test_clone_slice@@Base+0xb34>
   1b124:	ldr	r0, [pc, #2276]	; 1ba10 <test_clone_slice@@Base+0xb38>
   1b128:	add	r3, pc, r3
   1b12c:	ldr	r2, [pc, #2272]	; 1ba14 <test_clone_slice@@Base+0xb3c>
   1b130:	add	r3, r3, #1312	; 0x520
   1b134:	add	r1, pc, r1
   1b138:	add	r0, pc, r0
   1b13c:	bl	12a08 <__assert_fail@plt>
   1b140:	ldr	r3, [pc, #2256]	; 1ba18 <test_clone_slice@@Base+0xb40>
   1b144:	ldr	r1, [pc, #2256]	; 1ba1c <test_clone_slice@@Base+0xb44>
   1b148:	ldr	r0, [pc, #2256]	; 1ba20 <test_clone_slice@@Base+0xb48>
   1b14c:	add	r3, pc, r3
   1b150:	ldr	r2, [pc, #2252]	; 1ba24 <test_clone_slice@@Base+0xb4c>
   1b154:	add	r3, r3, #580	; 0x244
   1b158:	add	r1, pc, r1
   1b15c:	add	r0, pc, r0
   1b160:	bl	12a08 <__assert_fail@plt>
   1b164:	ldrh	r7, [r3, #52]	; 0x34
   1b168:	cmp	r7, #0
   1b16c:	beq	1b11c <test_clone_slice@@Base+0x244>
   1b170:	ldr	r2, [r6, r7]
   1b174:	add	r7, r6, r7
   1b178:	add	r2, r2, #4
   1b17c:	adds	r7, r7, r2
   1b180:	beq	1b11c <test_clone_slice@@Base+0x244>
   1b184:	ldrh	r8, [r3, #22]
   1b188:	cmp	r8, #0
   1b18c:	beq	1b974 <test_clone_slice@@Base+0xa9c>
   1b190:	ldr	r3, [r6, r8]
   1b194:	add	r8, r6, r8
   1b198:	add	r3, r3, #4
   1b19c:	adds	r8, r8, r3
   1b1a0:	beq	1b974 <test_clone_slice@@Base+0xa9c>
   1b1a4:	ldr	r2, [r5, #-4]
   1b1a8:	mov	r1, r5
   1b1ac:	mov	r0, r4
   1b1b0:	bl	21e8c <flatcc_builder_create_string@@Base>
   1b1b4:	subs	r3, r0, #0
   1b1b8:	str	r3, [sp, #12]
   1b1bc:	beq	1b1d8 <test_clone_slice@@Base+0x300>
   1b1c0:	mov	r1, #3
   1b1c4:	mov	r0, r4
   1b1c8:	bl	2234c <flatcc_builder_table_add_offset@@Base>
   1b1cc:	cmp	r0, #0
   1b1d0:	ldrne	r3, [sp, #12]
   1b1d4:	strne	r3, [r0]
   1b1d8:	mov	r0, r4
   1b1dc:	bl	20504 <flatcc_builder_start_offset_vector@@Base>
   1b1e0:	mov	r1, r5
   1b1e4:	ldr	r2, [r5, #-4]
   1b1e8:	mov	r0, r4
   1b1ec:	bl	21e8c <flatcc_builder_create_string@@Base>
   1b1f0:	subs	r1, r0, #0
   1b1f4:	beq	1b200 <test_clone_slice@@Base+0x328>
   1b1f8:	mov	r0, r4
   1b1fc:	bl	1ff14 <flatcc_builder_offset_vector_push@@Base>
   1b200:	ldr	r2, [r5, #-4]
   1b204:	mov	r0, r4
   1b208:	cmp	r2, #4
   1b20c:	movcc	r1, r2
   1b210:	movcs	r1, #4
   1b214:	sub	r2, r2, r1
   1b218:	cmp	r2, #20
   1b21c:	movcs	r2, #20
   1b220:	add	r1, r5, r1
   1b224:	bl	21e8c <flatcc_builder_create_string@@Base>
   1b228:	subs	r1, r0, #0
   1b22c:	beq	1b238 <test_clone_slice@@Base+0x360>
   1b230:	mov	r0, r4
   1b234:	bl	1ff14 <flatcc_builder_offset_vector_push@@Base>
   1b238:	ldr	r2, [r5, #-4]
   1b23c:	mov	r1, r5
   1b240:	cmp	r2, #3
   1b244:	movcs	r2, #3
   1b248:	mov	r0, r4
   1b24c:	bl	21e8c <flatcc_builder_create_string@@Base>
   1b250:	subs	r1, r0, #0
   1b254:	beq	1b260 <test_clone_slice@@Base+0x388>
   1b258:	mov	r0, r4
   1b25c:	bl	1ff14 <flatcc_builder_offset_vector_push@@Base>
   1b260:	mov	r0, r4
   1b264:	bl	21550 <flatcc_builder_end_offset_vector@@Base>
   1b268:	subs	r3, r0, #0
   1b26c:	str	r3, [sp, #12]
   1b270:	beq	1b28c <test_clone_slice@@Base+0x3b4>
   1b274:	mov	r1, #10
   1b278:	mov	r0, r4
   1b27c:	bl	2234c <flatcc_builder_table_add_offset@@Base>
   1b280:	cmp	r0, #0
   1b284:	ldrne	r3, [sp, #12]
   1b288:	strne	r3, [r0]
   1b28c:	mov	r1, #36	; 0x24
   1b290:	mov	r0, r4
   1b294:	bl	206ec <flatcc_builder_start_table@@Base>
   1b298:	ldr	r2, [r5, #-4]
   1b29c:	mov	r0, r4
   1b2a0:	cmp	r2, #2
   1b2a4:	movcc	r1, r2
   1b2a8:	movcs	r1, #2
   1b2ac:	sub	r2, r2, r1
   1b2b0:	cmp	r2, #20
   1b2b4:	movcs	r2, #20
   1b2b8:	add	r1, r5, r1
   1b2bc:	bl	21e8c <flatcc_builder_create_string@@Base>
   1b2c0:	subs	r5, r0, #0
   1b2c4:	beq	1b2dc <test_clone_slice@@Base+0x404>
   1b2c8:	mov	r1, #3
   1b2cc:	mov	r0, r4
   1b2d0:	bl	2234c <flatcc_builder_table_add_offset@@Base>
   1b2d4:	cmp	r0, #0
   1b2d8:	strne	r5, [r0]
   1b2dc:	mvn	r1, #0
   1b2e0:	mov	r3, #1
   1b2e4:	ldr	r2, [r7, #-4]
   1b2e8:	mov	r0, r4
   1b2ec:	str	r1, [sp, #4]
   1b2f0:	str	r3, [sp]
   1b2f4:	mov	r1, r7
   1b2f8:	bl	212b0 <flatcc_builder_create_vector@@Base>
   1b2fc:	subs	r5, r0, #0
   1b300:	beq	1b318 <test_clone_slice@@Base+0x440>
   1b304:	mov	r1, #24
   1b308:	mov	r0, r4
   1b30c:	bl	2234c <flatcc_builder_table_add_offset@@Base>
   1b310:	cmp	r0, #0
   1b314:	strne	r5, [r0]
   1b318:	ldr	r2, [r8, #-4]
   1b31c:	mov	r0, #2
   1b320:	cmp	r2, #1
   1b324:	movcc	r1, r2
   1b328:	movcs	r1, #1
   1b32c:	sub	r2, r2, r1
   1b330:	mvn	r3, #-1073741824	; 0xc0000000
   1b334:	cmp	r2, #2
   1b338:	movcs	r2, r0
   1b33c:	stm	sp, {r0, r3}
   1b340:	add	r1, r8, r1, lsl r0
   1b344:	mov	r3, #4
   1b348:	mov	r0, r4
   1b34c:	bl	212b0 <flatcc_builder_create_vector@@Base>
   1b350:	subs	r5, r0, #0
   1b354:	beq	1b36c <test_clone_slice@@Base+0x494>
   1b358:	mov	r1, #9
   1b35c:	mov	r0, r4
   1b360:	bl	2234c <flatcc_builder_table_add_offset@@Base>
   1b364:	cmp	r0, #0
   1b368:	strne	r5, [r0]
   1b36c:	ldr	r1, [pc, #1716]	; 1ba28 <test_clone_slice@@Base+0xb50>
   1b370:	mov	r2, #1
   1b374:	add	r1, pc, r1
   1b378:	add	r1, r1, #1072	; 0x430
   1b37c:	add	r1, r1, #12
   1b380:	mov	r0, r4
   1b384:	bl	21038 <flatcc_builder_check_required@@Base>
   1b388:	cmp	r0, #0
   1b38c:	beq	1b970 <test_clone_slice@@Base+0xa98>
   1b390:	mov	r0, r4
   1b394:	bl	210e0 <flatcc_builder_end_table@@Base>
   1b398:	subs	r5, r0, #0
   1b39c:	beq	1b3e0 <test_clone_slice@@Base+0x508>
   1b3a0:	mov	r3, #1
   1b3a4:	mov	r2, r3
   1b3a8:	mov	r1, #7
   1b3ac:	mov	r0, r4
   1b3b0:	bl	2212c <flatcc_builder_table_add@@Base>
   1b3b4:	subs	r3, r0, #0
   1b3b8:	str	r3, [sp, #12]
   1b3bc:	beq	1b3e0 <test_clone_slice@@Base+0x508>
   1b3c0:	mov	r1, #8
   1b3c4:	mov	r0, r4
   1b3c8:	bl	2234c <flatcc_builder_table_add_offset@@Base>
   1b3cc:	cmp	r0, #0
   1b3d0:	movne	r2, #1
   1b3d4:	ldrne	r3, [sp, #12]
   1b3d8:	strbne	r2, [r3]
   1b3dc:	strne	r5, [r0]
   1b3e0:	ldr	r2, [r7, #-4]
   1b3e4:	mvn	r0, #0
   1b3e8:	cmp	r2, #3
   1b3ec:	movcc	r1, r2
   1b3f0:	movcs	r1, #3
   1b3f4:	mov	r3, #1
   1b3f8:	sub	r2, r2, r1
   1b3fc:	str	r0, [sp, #4]
   1b400:	add	r1, r7, r1
   1b404:	str	r3, [sp]
   1b408:	mov	r0, r4
   1b40c:	bl	212b0 <flatcc_builder_create_vector@@Base>
   1b410:	subs	r5, r0, #0
   1b414:	beq	1b42c <test_clone_slice@@Base+0x554>
   1b418:	mov	r1, #24
   1b41c:	mov	r0, r4
   1b420:	bl	2234c <flatcc_builder_table_add_offset@@Base>
   1b424:	cmp	r0, #0
   1b428:	strne	r5, [r0]
   1b42c:	ldr	r3, [r6]
   1b430:	sub	r3, r6, r3
   1b434:	ldrh	r2, [r3]
   1b438:	cmp	r2, #5
   1b43c:	movls	r2, #0
   1b440:	bls	1b450 <test_clone_slice@@Base+0x578>
   1b444:	ldrh	r2, [r3, #4]
   1b448:	cmp	r2, #0
   1b44c:	addne	r2, r6, r2
   1b450:	mov	r3, #16
   1b454:	str	r3, [sp]
   1b458:	mov	r1, #0
   1b45c:	mov	r3, #32
   1b460:	mov	r0, r4
   1b464:	bl	22318 <flatcc_builder_table_add_copy@@Base>
   1b468:	mvn	r0, #-1073741824	; 0xc0000000
   1b46c:	mov	r3, #2
   1b470:	ldr	r2, [r8, #-4]
   1b474:	mov	r1, r8
   1b478:	str	r0, [sp, #4]
   1b47c:	str	r3, [sp]
   1b480:	mov	r0, r4
   1b484:	mov	r3, #4
   1b488:	bl	212b0 <flatcc_builder_create_vector@@Base>
   1b48c:	subs	r5, r0, #0
   1b490:	beq	1b4a8 <test_clone_slice@@Base+0x5d0>
   1b494:	mov	r1, #9
   1b498:	mov	r0, r4
   1b49c:	bl	2234c <flatcc_builder_table_add_offset@@Base>
   1b4a0:	cmp	r0, #0
   1b4a4:	strne	r5, [r0]
   1b4a8:	ldr	r1, [pc, #1404]	; 1ba2c <test_clone_slice@@Base+0xb54>
   1b4ac:	mov	r2, #1
   1b4b0:	add	r1, pc, r1
   1b4b4:	add	r1, r1, #1072	; 0x430
   1b4b8:	add	r1, r1, #12
   1b4bc:	mov	r0, r4
   1b4c0:	bl	21038 <flatcc_builder_check_required@@Base>
   1b4c4:	cmp	r0, #0
   1b4c8:	beq	1b970 <test_clone_slice@@Base+0xa98>
   1b4cc:	mov	r0, r4
   1b4d0:	bl	210e0 <flatcc_builder_end_table@@Base>
   1b4d4:	mov	r1, r0
   1b4d8:	mov	r0, r4
   1b4dc:	bl	1f96c <flatcc_builder_end_buffer@@Base>
   1b4e0:	mov	r1, sl
   1b4e4:	mov	r0, r4
   1b4e8:	bl	228b4 <flatcc_builder_get_direct_buffer@@Base>
   1b4ec:	ldr	r3, [sp, #8]
   1b4f0:	ldr	r2, [sp, #20]
   1b4f4:	ldr	r3, [r3]
   1b4f8:	mov	r4, r0
   1b4fc:	mov	r1, r0
   1b500:	ldr	r0, [pc, #1320]	; 1ba30 <test_clone_slice@@Base+0xb58>
   1b504:	add	r0, pc, r0
   1b508:	bl	13540 <_start@@Base+0x154>
   1b50c:	cmp	r4, #0
   1b510:	beq	1b524 <test_clone_slice@@Base+0x64c>
   1b514:	ldr	r3, [pc, #1252]	; 1ba00 <test_clone_slice@@Base+0xb28>
   1b518:	ldr	r2, [r4, #4]
   1b51c:	cmp	r2, r3
   1b520:	beq	1b528 <test_clone_slice@@Base+0x650>
   1b524:	bl	12d14 <__assert_fail@plt+0x30c>
   1b528:	ldr	r3, [r4]
   1b52c:	adds	r5, r4, r3
   1b530:	beq	1b524 <test_clone_slice@@Base+0x64c>
   1b534:	ldr	r6, [r4, r3]
   1b538:	sub	r6, r5, r6
   1b53c:	ldrh	r7, [r6]
   1b540:	cmp	r7, #11
   1b544:	bls	1b140 <test_clone_slice@@Base+0x268>
   1b548:	ldrh	r0, [r6, #10]
   1b54c:	cmp	r0, #0
   1b550:	beq	1b140 <test_clone_slice@@Base+0x268>
   1b554:	ldr	r3, [r5, r0]
   1b558:	ldr	r1, [pc, #1236]	; 1ba34 <test_clone_slice@@Base+0xb5c>
   1b55c:	add	r3, r3, #4
   1b560:	add	r0, r5, r0
   1b564:	add	r0, r0, r3
   1b568:	add	r1, pc, r1
   1b56c:	bl	1290c <strcmp@plt>
   1b570:	cmp	r0, #0
   1b574:	bne	1b86c <test_clone_slice@@Base+0x994>
   1b578:	cmp	r7, #25
   1b57c:	bhi	1b584 <test_clone_slice@@Base+0x6ac>
   1b580:	bl	13768 <_start@@Base+0x37c>
   1b584:	ldrh	r3, [r6, #24]
   1b588:	cmp	r3, #0
   1b58c:	beq	1b580 <test_clone_slice@@Base+0x6a8>
   1b590:	ldr	r2, [r5, r3]
   1b594:	add	r3, r5, r3
   1b598:	add	r2, r2, #4
   1b59c:	adds	r4, r3, r2
   1b5a0:	beq	1b580 <test_clone_slice@@Base+0x6a8>
   1b5a4:	ldr	r8, [r4, #-4]
   1b5a8:	cmp	r8, #0
   1b5ac:	beq	1b580 <test_clone_slice@@Base+0x6a8>
   1b5b0:	ldr	r0, [r3, r2]
   1b5b4:	ldr	r1, [pc, #1148]	; 1ba38 <test_clone_slice@@Base+0xb60>
   1b5b8:	add	r0, r0, #4
   1b5bc:	add	r1, pc, r1
   1b5c0:	add	r0, r4, r0
   1b5c4:	bl	1290c <strcmp@plt>
   1b5c8:	cmp	r0, #0
   1b5cc:	bne	1b948 <test_clone_slice@@Base+0xa70>
   1b5d0:	cmp	r8, #1
   1b5d4:	bls	1b580 <test_clone_slice@@Base+0x6a8>
   1b5d8:	ldr	r0, [r4, #4]
   1b5dc:	add	r0, r0, #8
   1b5e0:	adds	r0, r4, r0
   1b5e4:	beq	1b880 <test_clone_slice@@Base+0x9a8>
   1b5e8:	ldr	r3, [r0, #-4]
   1b5ec:	cmp	r3, #6
   1b5f0:	bne	1b880 <test_clone_slice@@Base+0x9a8>
   1b5f4:	ldr	r1, [pc, #1088]	; 1ba3c <test_clone_slice@@Base+0xb64>
   1b5f8:	add	r1, pc, r1
   1b5fc:	bl	1290c <strcmp@plt>
   1b600:	cmp	r0, #0
   1b604:	bne	1b95c <test_clone_slice@@Base+0xa84>
   1b608:	cmp	r8, #2
   1b60c:	beq	1b580 <test_clone_slice@@Base+0x6a8>
   1b610:	ldr	r0, [r4, #8]
   1b614:	add	r0, r0, #12
   1b618:	adds	r0, r4, r0
   1b61c:	beq	1b894 <test_clone_slice@@Base+0x9bc>
   1b620:	ldr	r3, [r0, #-4]
   1b624:	cmp	r3, #3
   1b628:	bne	1b894 <test_clone_slice@@Base+0x9bc>
   1b62c:	ldr	r1, [pc, #1036]	; 1ba40 <test_clone_slice@@Base+0xb68>
   1b630:	add	r1, pc, r1
   1b634:	bl	1290c <strcmp@plt>
   1b638:	cmp	r0, #0
   1b63c:	bne	1b8a8 <test_clone_slice@@Base+0x9d0>
   1b640:	ldrh	r3, [r6, #20]
   1b644:	cmp	r3, #0
   1b648:	beq	1b9bc <test_clone_slice@@Base+0xae4>
   1b64c:	ldr	r2, [r5, r3]
   1b650:	add	r3, r5, r3
   1b654:	adds	r4, r3, r2
   1b658:	beq	1b9bc <test_clone_slice@@Base+0xae4>
   1b65c:	ldr	r8, [r3, r2]
   1b660:	sub	r8, r4, r8
   1b664:	ldrh	sl, [r8]
   1b668:	cmp	sl, #11
   1b66c:	bls	1b140 <test_clone_slice@@Base+0x268>
   1b670:	ldrh	r0, [r8, #10]
   1b674:	cmp	r0, #0
   1b678:	beq	1b140 <test_clone_slice@@Base+0x268>
   1b67c:	ldr	r3, [r4, r0]
   1b680:	ldr	r1, [pc, #956]	; 1ba44 <test_clone_slice@@Base+0xb6c>
   1b684:	add	r3, r3, #4
   1b688:	add	r0, r4, r0
   1b68c:	add	r0, r0, r3
   1b690:	add	r1, pc, r1
   1b694:	bl	1290c <strcmp@plt>
   1b698:	cmp	r0, #0
   1b69c:	bne	1b8bc <test_clone_slice@@Base+0x9e4>
   1b6a0:	cmp	sl, #53	; 0x35
   1b6a4:	bhi	1b6cc <test_clone_slice@@Base+0x7f4>
   1b6a8:	ldr	r0, [pc, #920]	; 1ba48 <test_clone_slice@@Base+0xb70>
   1b6ac:	mvn	r7, #0
   1b6b0:	add	r0, pc, r0
   1b6b4:	bl	1296c <puts@plt>
   1b6b8:	mov	r0, r9
   1b6bc:	bl	22b10 <flatcc_builder_aligned_free@@Base>
   1b6c0:	mov	r0, r7
   1b6c4:	add	sp, sp, #36	; 0x24
   1b6c8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b6cc:	ldrh	r0, [r8, #52]	; 0x34
   1b6d0:	cmp	r0, #0
   1b6d4:	beq	1b6a8 <test_clone_slice@@Base+0x7d0>
   1b6d8:	ldr	r3, [r4, r0]
   1b6dc:	add	r0, r4, r0
   1b6e0:	add	r3, r3, #4
   1b6e4:	adds	r0, r0, r3
   1b6e8:	beq	1b6a8 <test_clone_slice@@Base+0x7d0>
   1b6ec:	ldr	r2, [r0, #-4]
   1b6f0:	cmp	r2, #7
   1b6f4:	bne	1b6a8 <test_clone_slice@@Base+0x7d0>
   1b6f8:	mov	r1, fp
   1b6fc:	bl	1293c <memcmp@plt>
   1b700:	cmp	r0, #0
   1b704:	bne	1b8d0 <test_clone_slice@@Base+0x9f8>
   1b708:	cmp	r7, #53	; 0x35
   1b70c:	bhi	1b724 <test_clone_slice@@Base+0x84c>
   1b710:	ldr	r0, [pc, #820]	; 1ba4c <test_clone_slice@@Base+0xb74>
   1b714:	mvn	r7, #0
   1b718:	add	r0, pc, r0
   1b71c:	bl	1296c <puts@plt>
   1b720:	b	1b6b8 <test_clone_slice@@Base+0x7e0>
   1b724:	ldrh	r0, [r6, #52]	; 0x34
   1b728:	cmp	r0, #0
   1b72c:	beq	1b710 <test_clone_slice@@Base+0x838>
   1b730:	ldr	r3, [r5, r0]
   1b734:	add	r0, r5, r0
   1b738:	add	r3, r3, #4
   1b73c:	adds	r0, r0, r3
   1b740:	beq	1b710 <test_clone_slice@@Base+0x838>
   1b744:	ldr	r2, [r0, #-4]
   1b748:	cmp	r2, #4
   1b74c:	bne	1b710 <test_clone_slice@@Base+0x838>
   1b750:	add	r1, sp, #27
   1b754:	bl	1293c <memcmp@plt>
   1b758:	subs	r7, r0, #0
   1b75c:	bne	1b8e4 <test_clone_slice@@Base+0xa0c>
   1b760:	ldrh	r3, [r6, #4]
   1b764:	cmp	r3, #0
   1b768:	beq	1b81c <test_clone_slice@@Base+0x944>
   1b76c:	add	r3, r5, r3
   1b770:	vldr	s15, [pc, #616]	; 1b9e0 <test_clone_slice@@Base+0xb08>
   1b774:	vldr	s14, [r3]
   1b778:	vcmp.f32	s14, s15
   1b77c:	vmrs	APSR_nzcv, fpscr
   1b780:	bne	1b90c <test_clone_slice@@Base+0xa34>
   1b784:	ldrh	r3, [r6, #22]
   1b788:	cmp	r3, #0
   1b78c:	beq	1b8f8 <test_clone_slice@@Base+0xa20>
   1b790:	ldr	r2, [r5, r3]
   1b794:	add	r5, r5, r3
   1b798:	add	r3, r2, #4
   1b79c:	adds	r2, r5, r3
   1b7a0:	beq	1b8f8 <test_clone_slice@@Base+0xa20>
   1b7a4:	ldr	r1, [r2, #-4]
   1b7a8:	cmp	r1, #2
   1b7ac:	bne	1b8f8 <test_clone_slice@@Base+0xa20>
   1b7b0:	ldrsh	r3, [r5, r3]
   1b7b4:	cmp	r3, #22
   1b7b8:	bne	1b920 <test_clone_slice@@Base+0xa48>
   1b7bc:	cmn	r2, #4
   1b7c0:	beq	1b858 <test_clone_slice@@Base+0x980>
   1b7c4:	ldrsh	r3, [r2, #4]
   1b7c8:	cmp	r3, #44	; 0x2c
   1b7cc:	bne	1b858 <test_clone_slice@@Base+0x980>
   1b7d0:	ldrh	r2, [r8, #22]
   1b7d4:	cmp	r2, #0
   1b7d8:	beq	1b934 <test_clone_slice@@Base+0xa5c>
   1b7dc:	ldr	r3, [r4, r2]
   1b7e0:	add	r4, r4, r2
   1b7e4:	add	r3, r3, #4
   1b7e8:	adds	r2, r4, r3
   1b7ec:	beq	1b934 <test_clone_slice@@Base+0xa5c>
   1b7f0:	ldr	r2, [r2, #-4]
   1b7f4:	cmp	r2, #1
   1b7f8:	bne	1b934 <test_clone_slice@@Base+0xa5c>
   1b7fc:	ldrsh	r3, [r4, r3]
   1b800:	cmp	r3, #44	; 0x2c
   1b804:	beq	1b6b8 <test_clone_slice@@Base+0x7e0>
   1b808:	ldr	r0, [pc, #576]	; 1ba50 <test_clone_slice@@Base+0xb78>
   1b80c:	mvn	r7, #0
   1b810:	add	r0, pc, r0
   1b814:	bl	1296c <puts@plt>
   1b818:	b	1b6b8 <test_clone_slice@@Base+0x7e0>
   1b81c:	ldr	r3, [r3]
   1b820:	udf	#0
   1b824:	mov	r0, r4
   1b828:	ldr	r6, [r9]
   1b82c:	bl	1f0f0 <flatcc_builder_reset@@Base>
   1b830:	ldr	r1, [pc, #540]	; 1ba54 <test_clone_slice@@Base+0xb7c>
   1b834:	mov	r3, #0
   1b838:	mov	r2, r3
   1b83c:	add	r1, pc, r1
   1b840:	mov	r0, r4
   1b844:	bl	1f8b4 <flatcc_builder_start_buffer@@Base>
   1b848:	add	r6, r9, r6
   1b84c:	cmp	r0, #0
   1b850:	bne	1b0d8 <test_clone_slice@@Base+0x200>
   1b854:	b	1b0cc <test_clone_slice@@Base+0x1f4>
   1b858:	ldr	r0, [pc, #504]	; 1ba58 <test_clone_slice@@Base+0xb80>
   1b85c:	mvn	r7, #0
   1b860:	add	r0, pc, r0
   1b864:	bl	1296c <puts@plt>
   1b868:	b	1b6b8 <test_clone_slice@@Base+0x7e0>
   1b86c:	ldr	r0, [pc, #488]	; 1ba5c <test_clone_slice@@Base+0xb84>
   1b870:	mvn	r7, #0
   1b874:	add	r0, pc, r0
   1b878:	bl	1296c <puts@plt>
   1b87c:	b	1b6b8 <test_clone_slice@@Base+0x7e0>
   1b880:	ldr	r0, [pc, #472]	; 1ba60 <test_clone_slice@@Base+0xb88>
   1b884:	mvn	r7, #0
   1b888:	add	r0, pc, r0
   1b88c:	bl	1296c <puts@plt>
   1b890:	b	1b6b8 <test_clone_slice@@Base+0x7e0>
   1b894:	ldr	r0, [pc, #456]	; 1ba64 <test_clone_slice@@Base+0xb8c>
   1b898:	mvn	r7, #0
   1b89c:	add	r0, pc, r0
   1b8a0:	bl	1296c <puts@plt>
   1b8a4:	b	1b6b8 <test_clone_slice@@Base+0x7e0>
   1b8a8:	ldr	r0, [pc, #440]	; 1ba68 <test_clone_slice@@Base+0xb90>
   1b8ac:	mvn	r7, #0
   1b8b0:	add	r0, pc, r0
   1b8b4:	bl	1296c <puts@plt>
   1b8b8:	b	1b6b8 <test_clone_slice@@Base+0x7e0>
   1b8bc:	ldr	r0, [pc, #424]	; 1ba6c <test_clone_slice@@Base+0xb94>
   1b8c0:	mvn	r7, #0
   1b8c4:	add	r0, pc, r0
   1b8c8:	bl	12918 <printf@plt>
   1b8cc:	b	1b6b8 <test_clone_slice@@Base+0x7e0>
   1b8d0:	ldr	r0, [pc, #408]	; 1ba70 <test_clone_slice@@Base+0xb98>
   1b8d4:	mvn	r7, #0
   1b8d8:	add	r0, pc, r0
   1b8dc:	bl	1296c <puts@plt>
   1b8e0:	b	1b6b8 <test_clone_slice@@Base+0x7e0>
   1b8e4:	ldr	r0, [pc, #392]	; 1ba74 <test_clone_slice@@Base+0xb9c>
   1b8e8:	mvn	r7, #0
   1b8ec:	add	r0, pc, r0
   1b8f0:	bl	1296c <puts@plt>
   1b8f4:	b	1b6b8 <test_clone_slice@@Base+0x7e0>
   1b8f8:	ldr	r0, [pc, #376]	; 1ba78 <test_clone_slice@@Base+0xba0>
   1b8fc:	mvn	r7, #0
   1b900:	add	r0, pc, r0
   1b904:	bl	1296c <puts@plt>
   1b908:	b	1b6b8 <test_clone_slice@@Base+0x7e0>
   1b90c:	ldr	r0, [pc, #360]	; 1ba7c <test_clone_slice@@Base+0xba4>
   1b910:	mvn	r7, #0
   1b914:	add	r0, pc, r0
   1b918:	bl	1296c <puts@plt>
   1b91c:	b	1b6b8 <test_clone_slice@@Base+0x7e0>
   1b920:	ldr	r0, [pc, #344]	; 1ba80 <test_clone_slice@@Base+0xba8>
   1b924:	mvn	r7, #0
   1b928:	add	r0, pc, r0
   1b92c:	bl	1296c <puts@plt>
   1b930:	b	1b6b8 <test_clone_slice@@Base+0x7e0>
   1b934:	ldr	r0, [pc, #328]	; 1ba84 <test_clone_slice@@Base+0xbac>
   1b938:	mvn	r7, #0
   1b93c:	add	r0, pc, r0
   1b940:	bl	1296c <puts@plt>
   1b944:	b	1b6b8 <test_clone_slice@@Base+0x7e0>
   1b948:	ldr	r0, [pc, #312]	; 1ba88 <test_clone_slice@@Base+0xbb0>
   1b94c:	mvn	r7, #0
   1b950:	add	r0, pc, r0
   1b954:	bl	1296c <puts@plt>
   1b958:	b	1b6b8 <test_clone_slice@@Base+0x7e0>
   1b95c:	ldr	r0, [pc, #296]	; 1ba8c <test_clone_slice@@Base+0xbb4>
   1b960:	mvn	r7, #0
   1b964:	add	r0, pc, r0
   1b968:	bl	1296c <puts@plt>
   1b96c:	b	1b6b8 <test_clone_slice@@Base+0x7e0>
   1b970:	bl	130f4 <__assert_fail@plt+0x6ec>
   1b974:	ldr	r3, [pc, #276]	; 1ba90 <test_clone_slice@@Base+0xbb8>
   1b978:	ldr	r1, [pc, #276]	; 1ba94 <test_clone_slice@@Base+0xbbc>
   1b97c:	ldr	r0, [pc, #276]	; 1ba98 <test_clone_slice@@Base+0xbc0>
   1b980:	add	r3, pc, r3
   1b984:	ldr	r2, [pc, #272]	; 1ba9c <test_clone_slice@@Base+0xbc4>
   1b988:	add	r3, r3, #1312	; 0x520
   1b98c:	add	r1, pc, r1
   1b990:	add	r0, pc, r0
   1b994:	bl	12a08 <__assert_fail@plt>
   1b998:	ldr	r3, [pc, #256]	; 1baa0 <test_clone_slice@@Base+0xbc8>
   1b99c:	ldr	r1, [pc, #256]	; 1baa4 <test_clone_slice@@Base+0xbcc>
   1b9a0:	ldr	r0, [pc, #256]	; 1baa8 <test_clone_slice@@Base+0xbd0>
   1b9a4:	add	r3, pc, r3
   1b9a8:	ldr	r2, [pc, #252]	; 1baac <test_clone_slice@@Base+0xbd4>
   1b9ac:	add	r3, r3, #1312	; 0x520
   1b9b0:	add	r1, pc, r1
   1b9b4:	add	r0, pc, r0
   1b9b8:	bl	12a08 <__assert_fail@plt>
   1b9bc:	ldr	r3, [pc, #236]	; 1bab0 <test_clone_slice@@Base+0xbd8>
   1b9c0:	ldr	r1, [pc, #236]	; 1bab4 <test_clone_slice@@Base+0xbdc>
   1b9c4:	ldr	r0, [pc, #236]	; 1bab8 <test_clone_slice@@Base+0xbe0>
   1b9c8:	add	r3, pc, r3
   1b9cc:	mov	r2, #1664	; 0x680
   1b9d0:	add	r3, r3, #1312	; 0x520
   1b9d4:	add	r1, pc, r1
   1b9d8:	add	r0, pc, r0
   1b9dc:	bl	12a08 <__assert_fail@plt>
   1b9e0:	eorgt	r3, r9, #-872415232	; 0xcc000000
   1b9e4:	strdeq	sl, [r0], -r0
   1b9e8:	ldrdeq	lr, [r1], -r0
   1b9ec:	andeq	fp, r0, r4, ror fp
   1b9f0:	muleq	r0, r4, r7
   1b9f4:	eorgt	r3, r9, #-872415232	; 0xcc000000
   1b9f8:	andeq	r0, r0, r8, rrx
   1b9fc:	andeq	fp, r0, r4, asr #20
   1ba00:	movtpl	r4, #61261	; 0xef4d
   1ba04:	andeq	sl, r0, r4, asr r3
   1ba08:	andeq	r9, r0, r8, lsl #13
   1ba0c:	andeq	sl, r0, ip, lsl sl
   1ba10:	andeq	fp, r0, ip, lsr #19
   1ba14:	andeq	r0, r0, r6, asr #12
   1ba18:	andeq	r9, r0, r4, ror #12
   1ba1c:	andeq	r9, r0, r0, ror #26
   1ba20:			; <UNDEFINED> instruction: 0x00009eb8
   1ba24:			; <UNDEFINED> instruction: 0x000002bb
   1ba28:	andeq	r9, r0, ip, lsr r4
   1ba2c:	andeq	r9, r0, r0, lsl #6
   1ba30:	strdeq	fp, [r0], -r0
   1ba34:	andeq	fp, r0, r4, asr r5
   1ba38:	andeq	fp, r0, r0, lsl #10
   1ba3c:	andeq	fp, r0, r8, asr #9
   1ba40:	andeq	fp, r0, r8, ror r5
   1ba44:	andeq	fp, r0, ip, lsr #9
   1ba48:	andeq	fp, r0, r4, asr #10
   1ba4c:	andeq	fp, r0, r8, lsl r5
   1ba50:	andeq	fp, r0, r4, lsl #10
   1ba54:	ldrdeq	r9, [r0], -r0
   1ba58:	andeq	fp, r0, r8, ror r4
   1ba5c:	muleq	r0, r8, r2
   1ba60:	andeq	fp, r0, r0, asr #5
   1ba64:	andeq	fp, r0, ip, ror #5
   1ba68:	strdeq	fp, [r0], -ip
   1ba6c:	andeq	fp, r0, r0, lsl #6
   1ba70:	andeq	fp, r0, r8, lsr r3
   1ba74:	andeq	fp, r0, r0, ror #6
   1ba78:	andeq	fp, r0, r8, lsl #7
   1ba7c:	andeq	fp, r0, r8, asr r3
   1ba80:	muleq	r0, r4, r3
   1ba84:			; <UNDEFINED> instruction: 0x0000b3b8
   1ba88:	ldrdeq	fp, [r0], -r8
   1ba8c:	andeq	fp, r0, r8, lsl #4
   1ba90:	andeq	r8, r0, r0, lsr lr
   1ba94:	andeq	sl, r0, r4, asr #3
   1ba98:	andeq	fp, r0, ip, asr r1
   1ba9c:	andeq	r0, r0, r8, asr #12
   1baa0:	andeq	r8, r0, ip, lsl #28
   1baa4:	andeq	sl, r0, r0, lsr #3
   1baa8:	strdeq	sl, [r0], -r4
   1baac:	andeq	r0, r0, r4, asr #12
   1bab0:	andeq	r8, r0, r8, ror #27
   1bab4:	andeq	sl, r0, ip, ror r1
   1bab8:	andeq	sl, r0, r0, ror #3

0001babc <test_create_add_field@@Base>:
   1babc:	push	{r4, r5, r6, lr}
   1bac0:	sub	sp, sp, #8
   1bac4:	mov	r4, r0
   1bac8:	bl	1f0f0 <flatcc_builder_reset@@Base>
   1bacc:	ldr	r1, [pc, #684]	; 1bd80 <test_create_add_field@@Base+0x2c4>
   1bad0:	mov	r3, #0
   1bad4:	mov	r0, r4
   1bad8:	mov	r2, r3
   1badc:	add	r1, pc, r1
   1bae0:	bl	1f8b4 <flatcc_builder_start_buffer@@Base>
   1bae4:	cmp	r0, #0
   1bae8:	bne	1baf8 <test_create_add_field@@Base+0x3c>
   1baec:	mov	r1, #36	; 0x24
   1baf0:	mov	r0, r4
   1baf4:	bl	206ec <flatcc_builder_start_table@@Base>
   1baf8:	ldr	r1, [pc, #644]	; 1bd84 <test_create_add_field@@Base+0x2c8>
   1bafc:	mov	r0, r4
   1bb00:	add	r1, pc, r1
   1bb04:	bl	21f90 <flatcc_builder_create_string_str@@Base>
   1bb08:	subs	r5, r0, #0
   1bb0c:	beq	1bb24 <test_create_add_field@@Base+0x68>
   1bb10:	mov	r1, #3
   1bb14:	mov	r0, r4
   1bb18:	bl	2234c <flatcc_builder_table_add_offset@@Base>
   1bb1c:	cmp	r0, #0
   1bb20:	strne	r5, [r0]
   1bb24:	ldr	r1, [pc, #604]	; 1bd88 <test_create_add_field@@Base+0x2cc>
   1bb28:	mov	r0, r4
   1bb2c:	add	r1, pc, r1
   1bb30:	bl	21f90 <flatcc_builder_create_string_str@@Base>
   1bb34:	mov	r1, #3
   1bb38:	mov	r5, r0
   1bb3c:	mov	r0, r4
   1bb40:	bl	206ec <flatcc_builder_start_table@@Base>
   1bb44:	subs	r6, r0, #0
   1bb48:	bne	1bb7c <test_create_add_field@@Base+0xc0>
   1bb4c:	mov	r3, #8
   1bb50:	mov	r2, r3
   1bb54:	mov	r1, #1
   1bb58:	mov	r0, r4
   1bb5c:	bl	2212c <flatcc_builder_table_add@@Base>
   1bb60:	cmp	r0, #0
   1bb64:	beq	1bb7c <test_create_add_field@@Base+0xc0>
   1bb68:	mvn	r2, #99	; 0x63
   1bb6c:	mvn	r3, #0
   1bb70:	cmp	r5, #0
   1bb74:	strd	r2, [r0]
   1bb78:	bne	1bcb4 <test_create_add_field@@Base+0x1f8>
   1bb7c:	ldr	r1, [pc, #520]	; 1bd8c <test_create_add_field@@Base+0x2d0>
   1bb80:	mov	r2, #1
   1bb84:	add	r1, pc, r1
   1bb88:	add	r1, r1, #1072	; 0x430
   1bb8c:	add	r1, r1, #12
   1bb90:	mov	r0, r4
   1bb94:	bl	21038 <flatcc_builder_check_required@@Base>
   1bb98:	cmp	r0, #0
   1bb9c:	beq	1bd78 <test_create_add_field@@Base+0x2bc>
   1bba0:	mov	r0, r4
   1bba4:	bl	210e0 <flatcc_builder_end_table@@Base>
   1bba8:	mov	r1, r0
   1bbac:	mov	r0, r4
   1bbb0:	bl	1f96c <flatcc_builder_end_buffer@@Base>
   1bbb4:	mov	r0, r4
   1bbb8:	add	r1, sp, #4
   1bbbc:	bl	22a08 <flatcc_builder_finalize_aligned_buffer@@Base>
   1bbc0:	subs	r4, r0, #0
   1bbc4:	beq	1bbd8 <test_create_add_field@@Base+0x11c>
   1bbc8:	ldr	r3, [pc, #448]	; 1bd90 <test_create_add_field@@Base+0x2d4>
   1bbcc:	ldr	r2, [r4, #4]
   1bbd0:	cmp	r2, r3
   1bbd4:	beq	1bc00 <test_create_add_field@@Base+0x144>
   1bbd8:	ldr	r3, [pc, #436]	; 1bd94 <test_create_add_field@@Base+0x2d8>
   1bbdc:	ldr	r1, [pc, #436]	; 1bd98 <test_create_add_field@@Base+0x2dc>
   1bbe0:	add	r3, pc, r3
   1bbe4:	ldr	r0, [pc, #432]	; 1bd9c <test_create_add_field@@Base+0x2e0>
   1bbe8:	add	r3, r3, #1328	; 0x530
   1bbec:	mov	r2, #716	; 0x2cc
   1bbf0:	add	r3, r3, #4
   1bbf4:	add	r1, pc, r1
   1bbf8:	add	r0, pc, r0
   1bbfc:	bl	12a08 <__assert_fail@plt>
   1bc00:	ldr	r2, [r4]
   1bc04:	adds	r3, r4, r2
   1bc08:	beq	1bbd8 <test_create_add_field@@Base+0x11c>
   1bc0c:	ldr	r2, [r4, r2]
   1bc10:	sub	r2, r3, r2
   1bc14:	ldrh	r1, [r2]
   1bc18:	cmp	r1, #29
   1bc1c:	bls	1bd50 <test_create_add_field@@Base+0x294>
   1bc20:	ldrh	r0, [r2, #28]
   1bc24:	cmp	r0, #0
   1bc28:	bne	1bd3c <test_create_add_field@@Base+0x280>
   1bc2c:	cmp	r1, #33	; 0x21
   1bc30:	bls	1bd50 <test_create_add_field@@Base+0x294>
   1bc34:	ldrh	r1, [r2, #32]
   1bc38:	cmp	r1, #0
   1bc3c:	beq	1bd50 <test_create_add_field@@Base+0x294>
   1bc40:	ldr	r2, [r3, r1]
   1bc44:	add	r3, r3, r1
   1bc48:	adds	r1, r3, r2
   1bc4c:	beq	1bd50 <test_create_add_field@@Base+0x294>
   1bc50:	ldr	r3, [r3, r2]
   1bc54:	sub	r3, r1, r3
   1bc58:	ldrh	r2, [r3]
   1bc5c:	cmp	r2, #7
   1bc60:	bhi	1bc88 <test_create_add_field@@Base+0x1cc>
   1bc64:	ldr	r0, [pc, #308]	; 1bda0 <test_create_add_field@@Base+0x2e4>
   1bc68:	mvn	r5, #0
   1bc6c:	add	r0, pc, r0
   1bc70:	bl	1296c <puts@plt>
   1bc74:	mov	r0, r4
   1bc78:	bl	22b10 <flatcc_builder_aligned_free@@Base>
   1bc7c:	mov	r0, r5
   1bc80:	add	sp, sp, #8
   1bc84:	pop	{r4, r5, r6, pc}
   1bc88:	ldrh	r3, [r3, #6]
   1bc8c:	cmp	r3, #0
   1bc90:	beq	1bc64 <test_create_add_field@@Base+0x1a8>
   1bc94:	ldrd	r0, [r1, r3]
   1bc98:	mvn	r3, #0
   1bc9c:	mvn	r2, #99	; 0x63
   1bca0:	cmp	r1, r3
   1bca4:	cmpeq	r0, r2
   1bca8:	moveq	r5, #0
   1bcac:	beq	1bc74 <test_create_add_field@@Base+0x1b8>
   1bcb0:	b	1bc64 <test_create_add_field@@Base+0x1a8>
   1bcb4:	mov	r1, r6
   1bcb8:	mov	r0, r4
   1bcbc:	bl	2234c <flatcc_builder_table_add_offset@@Base>
   1bcc0:	cmp	r0, #0
   1bcc4:	beq	1bb7c <test_create_add_field@@Base+0xc0>
   1bcc8:	mov	r3, #2
   1bccc:	str	r5, [r0]
   1bcd0:	mov	r2, r3
   1bcd4:	mov	r1, r3
   1bcd8:	mov	r0, r4
   1bcdc:	bl	2212c <flatcc_builder_table_add@@Base>
   1bce0:	cmp	r0, #0
   1bce4:	beq	1bb7c <test_create_add_field@@Base+0xc0>
   1bce8:	ldr	r1, [pc, #180]	; 1bda4 <test_create_add_field@@Base+0x2e8>
   1bcec:	mov	r3, #2
   1bcf0:	add	r1, pc, r1
   1bcf4:	add	r1, r1, #1232	; 0x4d0
   1bcf8:	strh	r3, [r0]
   1bcfc:	mov	r2, r6
   1bd00:	add	r1, r1, #12
   1bd04:	mov	r0, r4
   1bd08:	bl	21038 <flatcc_builder_check_required@@Base>
   1bd0c:	cmp	r0, #0
   1bd10:	beq	1bd7c <test_create_add_field@@Base+0x2c0>
   1bd14:	mov	r0, r4
   1bd18:	bl	210e0 <flatcc_builder_end_table@@Base>
   1bd1c:	subs	r5, r0, #0
   1bd20:	beq	1bb7c <test_create_add_field@@Base+0xc0>
   1bd24:	mov	r1, #14
   1bd28:	mov	r0, r4
   1bd2c:	bl	2234c <flatcc_builder_table_add_offset@@Base>
   1bd30:	cmp	r0, #0
   1bd34:	strne	r5, [r0]
   1bd38:	b	1bb7c <test_create_add_field@@Base+0xc0>
   1bd3c:	ldr	r0, [pc, #100]	; 1bda8 <test_create_add_field@@Base+0x2ec>
   1bd40:	mvn	r5, #0
   1bd44:	add	r0, pc, r0
   1bd48:	bl	1296c <puts@plt>
   1bd4c:	b	1bc74 <test_create_add_field@@Base+0x1b8>
   1bd50:	ldr	r3, [pc, #84]	; 1bdac <test_create_add_field@@Base+0x2f0>
   1bd54:	ldr	r1, [pc, #84]	; 1bdb0 <test_create_add_field@@Base+0x2f4>
   1bd58:	add	r3, pc, r3
   1bd5c:	ldr	r0, [pc, #80]	; 1bdb4 <test_create_add_field@@Base+0x2f8>
   1bd60:	add	r3, r3, #1360	; 0x550
   1bd64:	mov	r2, #608	; 0x260
   1bd68:	add	r3, r3, #12
   1bd6c:	add	r1, pc, r1
   1bd70:	add	r0, pc, r0
   1bd74:	bl	12a08 <__assert_fail@plt>
   1bd78:	bl	130f4 <__assert_fail@plt+0x6ec>
   1bd7c:	bl	13128 <__assert_fail@plt+0x720>
   1bd80:	andeq	r9, r0, r0, lsr r9
   1bd84:	andeq	r9, r0, r4, lsr sl
   1bd88:	andeq	fp, r0, ip, lsl #4
   1bd8c:	andeq	r8, r0, ip, lsr #24
   1bd90:	movtpl	r4, #61261	; 0xef4d
   1bd94:	ldrdeq	r8, [r0], -r0
   1bd98:	andeq	r9, r0, r4, asr #5
   1bd9c:	andeq	r9, r0, ip, lsr r3
   1bda0:	andeq	fp, r0, r4, lsl #2
   1bda4:	andeq	r8, r0, r0, asr #21
   1bda8:	strdeq	sl, [r0], -ip
   1bdac:	andeq	r8, r0, r8, asr sl
   1bdb0:	andeq	r9, r0, ip, asr #2
   1bdb4:	andeq	r9, r0, r4, asr #3

0001bdb8 <test_union_vector@@Base>:
   1bdb8:	push	{r4, r5, r6, r7, lr}
   1bdbc:	sub	sp, sp, #28
   1bdc0:	mov	r4, r0
   1bdc4:	bl	1f0f0 <flatcc_builder_reset@@Base>
   1bdc8:	ldr	r1, [pc, #884]	; 1c144 <test_union_vector@@Base+0x38c>
   1bdcc:	mov	r3, #0
   1bdd0:	mov	r0, r4
   1bdd4:	mov	r2, r3
   1bdd8:	add	r1, pc, r1
   1bddc:	bl	1f8b4 <flatcc_builder_start_buffer@@Base>
   1bde0:	cmp	r0, #0
   1bde4:	bne	1bdf4 <test_union_vector@@Base+0x3c>
   1bde8:	mov	r1, #36	; 0x24
   1bdec:	mov	r0, r4
   1bdf0:	bl	206ec <flatcc_builder_start_table@@Base>
   1bdf4:	ldr	r1, [pc, #844]	; 1c148 <test_union_vector@@Base+0x390>
   1bdf8:	mov	r0, r4
   1bdfc:	add	r1, pc, r1
   1be00:	bl	21f90 <flatcc_builder_create_string_str@@Base>
   1be04:	subs	r5, r0, #0
   1be08:	beq	1be20 <test_union_vector@@Base+0x68>
   1be0c:	mov	r1, #3
   1be10:	mov	r0, r4
   1be14:	bl	2234c <flatcc_builder_table_add_offset@@Base>
   1be18:	cmp	r0, #0
   1be1c:	strne	r5, [r0]
   1be20:	mov	r1, #4
   1be24:	mov	r0, r4
   1be28:	bl	206ec <flatcc_builder_start_table@@Base>
   1be2c:	cmp	r0, #0
   1be30:	bne	1be68 <test_union_vector@@Base+0xb0>
   1be34:	ldr	r5, [pc, #784]	; 1c14c <test_union_vector@@Base+0x394>
   1be38:	mov	r2, r0
   1be3c:	add	r5, pc, r5
   1be40:	add	r5, r5, #1392	; 0x570
   1be44:	add	r1, r5, #4
   1be48:	mov	r0, r4
   1be4c:	bl	21038 <flatcc_builder_check_required@@Base>
   1be50:	cmp	r0, #0
   1be54:	beq	1c128 <test_union_vector@@Base+0x370>
   1be58:	mov	r0, r4
   1be5c:	bl	210e0 <flatcc_builder_end_table@@Base>
   1be60:	mov	r6, r0
   1be64:	b	1be6c <test_union_vector@@Base+0xb4>
   1be68:	mov	r6, #0
   1be6c:	mov	r0, r4
   1be70:	bl	21988 <flatcc_builder_start_union_vector@@Base>
   1be74:	add	r3, sp, #24
   1be78:	mov	r5, #2
   1be7c:	str	r6, [sp, #20]
   1be80:	strb	r5, [sp, #16]
   1be84:	mov	r0, r4
   1be88:	ldmdb	r3, {r1, r2}
   1be8c:	bl	21cd8 <flatcc_builder_union_vector_push@@Base>
   1be90:	mov	r1, r4
   1be94:	add	r0, sp, #8
   1be98:	bl	21a04 <flatcc_builder_end_union_vector@@Base>
   1be9c:	mov	r1, #4
   1bea0:	mov	r0, r4
   1bea4:	bl	206ec <flatcc_builder_start_table@@Base>
   1bea8:	ldr	r6, [sp, #8]
   1beac:	ldr	r7, [sp, #12]
   1beb0:	cmp	r7, #0
   1beb4:	cmpne	r6, #0
   1beb8:	bne	1c058 <test_union_vector@@Base+0x2a0>
   1bebc:	ldr	r5, [pc, #652]	; 1c150 <test_union_vector@@Base+0x398>
   1bec0:	mov	r2, #0
   1bec4:	add	r5, pc, r5
   1bec8:	add	r5, r5, #1440	; 0x5a0
   1becc:	add	r1, r5, #4
   1bed0:	mov	r0, r4
   1bed4:	bl	21038 <flatcc_builder_check_required@@Base>
   1bed8:	cmp	r0, #0
   1bedc:	beq	1c10c <test_union_vector@@Base+0x354>
   1bee0:	mov	r0, r4
   1bee4:	bl	210e0 <flatcc_builder_end_table@@Base>
   1bee8:	subs	r5, r0, #0
   1beec:	beq	1bf28 <test_union_vector@@Base+0x170>
   1bef0:	mov	r3, #1
   1bef4:	mov	r2, r3
   1bef8:	mov	r1, #7
   1befc:	mov	r0, r4
   1bf00:	bl	2212c <flatcc_builder_table_add@@Base>
   1bf04:	subs	r6, r0, #0
   1bf08:	beq	1bf28 <test_union_vector@@Base+0x170>
   1bf0c:	mov	r1, #8
   1bf10:	mov	r0, r4
   1bf14:	bl	2234c <flatcc_builder_table_add_offset@@Base>
   1bf18:	cmp	r0, #0
   1bf1c:	movne	r3, #4
   1bf20:	strbne	r3, [r6]
   1bf24:	strne	r5, [r0]
   1bf28:	ldr	r1, [pc, #548]	; 1c154 <test_union_vector@@Base+0x39c>
   1bf2c:	mov	r2, #1
   1bf30:	add	r1, pc, r1
   1bf34:	add	r1, r1, #1072	; 0x430
   1bf38:	add	r1, r1, #12
   1bf3c:	mov	r0, r4
   1bf40:	bl	21038 <flatcc_builder_check_required@@Base>
   1bf44:	cmp	r0, #0
   1bf48:	beq	1c108 <test_union_vector@@Base+0x350>
   1bf4c:	mov	r0, r4
   1bf50:	bl	210e0 <flatcc_builder_end_table@@Base>
   1bf54:	mov	r1, r0
   1bf58:	mov	r0, r4
   1bf5c:	bl	1f96c <flatcc_builder_end_buffer@@Base>
   1bf60:	mov	r0, r4
   1bf64:	add	r1, sp, #4
   1bf68:	bl	22a08 <flatcc_builder_finalize_aligned_buffer@@Base>
   1bf6c:	ldr	r3, [pc, #484]	; 1c158 <test_union_vector@@Base+0x3a0>
   1bf70:	ldr	r2, [pc, #484]	; 1c15c <test_union_vector@@Base+0x3a4>
   1bf74:	add	r3, pc, r3
   1bf78:	add	r2, pc, r2
   1bf7c:	ldr	r1, [sp, #4]
   1bf80:	mov	r4, r0
   1bf84:	bl	23edc <flatcc_verify_table_as_root@@Base>
   1bf88:	subs	r5, r0, #0
   1bf8c:	bne	1c0ec <test_union_vector@@Base+0x334>
   1bf90:	cmp	r4, #0
   1bf94:	beq	1bfa8 <test_union_vector@@Base+0x1f0>
   1bf98:	ldr	r3, [pc, #448]	; 1c160 <test_union_vector@@Base+0x3a8>
   1bf9c:	ldr	r2, [r4, #4]
   1bfa0:	cmp	r2, r3
   1bfa4:	beq	1bfac <test_union_vector@@Base+0x1f4>
   1bfa8:	bl	12ca4 <__assert_fail@plt+0x29c>
   1bfac:	ldr	r3, [r4]
   1bfb0:	adds	r2, r4, r3
   1bfb4:	beq	1bfa8 <test_union_vector@@Base+0x1f0>
   1bfb8:	ldr	r3, [r4, r3]
   1bfbc:	sub	r3, r2, r3
   1bfc0:	ldrh	r1, [r3]
   1bfc4:	cmp	r1, #19
   1bfc8:	bls	1c048 <test_union_vector@@Base+0x290>
   1bfcc:	ldrh	r0, [r3, #18]
   1bfd0:	cmp	r0, #0
   1bfd4:	beq	1c048 <test_union_vector@@Base+0x290>
   1bfd8:	ldrb	r0, [r2, r0]
   1bfdc:	cmp	r0, #4
   1bfe0:	bne	1c048 <test_union_vector@@Base+0x290>
   1bfe4:	cmp	r1, #21
   1bfe8:	bls	1c028 <test_union_vector@@Base+0x270>
   1bfec:	ldrh	r1, [r3, #20]
   1bff0:	cmp	r1, #0
   1bff4:	beq	1c028 <test_union_vector@@Base+0x270>
   1bff8:	ldr	r3, [r2, r1]
   1bffc:	add	r2, r2, r1
   1c000:	adds	r1, r2, r3
   1c004:	beq	1c028 <test_union_vector@@Base+0x270>
   1c008:	ldr	r3, [r2, r3]
   1c00c:	sub	r3, r1, r3
   1c010:	ldrh	r2, [r3]
   1c014:	cmp	r2, #11
   1c018:	bls	1c088 <test_union_vector@@Base+0x2d0>
   1c01c:	ldrh	r2, [r3, #10]
   1c020:	cmp	r2, #0
   1c024:	beq	1c090 <test_union_vector@@Base+0x2d8>
   1c028:	ldr	r0, [pc, #308]	; 1c164 <test_union_vector@@Base+0x3ac>
   1c02c:	add	r0, pc, r0
   1c030:	bl	1296c <puts@plt>
   1c034:	mov	r0, r4
   1c038:	bl	22b10 <flatcc_builder_aligned_free@@Base>
   1c03c:	mov	r0, r5
   1c040:	add	sp, sp, #28
   1c044:	pop	{r4, r5, r6, r7, pc}
   1c048:	ldr	r0, [pc, #280]	; 1c168 <test_union_vector@@Base+0x3b0>
   1c04c:	add	r0, pc, r0
   1c050:	bl	12918 <printf@plt>
   1c054:	b	1c034 <test_union_vector@@Base+0x27c>
   1c058:	mov	r1, r5
   1c05c:	mov	r0, r4
   1c060:	bl	2234c <flatcc_builder_table_add_offset@@Base>
   1c064:	cmp	r0, #0
   1c068:	beq	1bebc <test_union_vector@@Base+0x104>
   1c06c:	str	r6, [r0]
   1c070:	mov	r1, #3
   1c074:	mov	r0, r4
   1c078:	bl	2234c <flatcc_builder_table_add_offset@@Base>
   1c07c:	cmp	r0, #0
   1c080:	strne	r7, [r0]
   1c084:	b	1bebc <test_union_vector@@Base+0x104>
   1c088:	cmp	r2, #9
   1c08c:	bls	1c0cc <test_union_vector@@Base+0x314>
   1c090:	ldrh	r2, [r3, #8]
   1c094:	cmp	r2, #0
   1c098:	beq	1c0cc <test_union_vector@@Base+0x314>
   1c09c:	ldr	r3, [r1, r2]
   1c0a0:	add	r1, r1, r2
   1c0a4:	add	r3, r3, #4
   1c0a8:	adds	r2, r1, r3
   1c0ac:	beq	1c0cc <test_union_vector@@Base+0x314>
   1c0b0:	ldr	r2, [r2, #-4]
   1c0b4:	cmp	r2, #1
   1c0b8:	bne	1c0cc <test_union_vector@@Base+0x314>
   1c0bc:	ldrb	r3, [r1, r3]
   1c0c0:	cmp	r3, #2
   1c0c4:	bne	1c0dc <test_union_vector@@Base+0x324>
   1c0c8:	bl	12df4 <__assert_fail@plt+0x3ec>
   1c0cc:	ldr	r0, [pc, #152]	; 1c16c <test_union_vector@@Base+0x3b4>
   1c0d0:	add	r0, pc, r0
   1c0d4:	bl	1296c <puts@plt>
   1c0d8:	b	1c034 <test_union_vector@@Base+0x27c>
   1c0dc:	ldr	r0, [pc, #140]	; 1c170 <test_union_vector@@Base+0x3b8>
   1c0e0:	add	r0, pc, r0
   1c0e4:	bl	1296c <puts@plt>
   1c0e8:	b	1c034 <test_union_vector@@Base+0x27c>
   1c0ec:	bl	23150 <flatcc_verify_error_string@@Base>
   1c0f0:	mvn	r5, #0
   1c0f4:	mov	r1, r0
   1c0f8:	ldr	r0, [pc, #116]	; 1c174 <test_union_vector@@Base+0x3bc>
   1c0fc:	add	r0, pc, r0
   1c100:	bl	12918 <printf@plt>
   1c104:	b	1c03c <test_union_vector@@Base+0x284>
   1c108:	bl	130f4 <__assert_fail@plt+0x6ec>
   1c10c:	ldr	r1, [pc, #100]	; 1c178 <test_union_vector@@Base+0x3c0>
   1c110:	ldr	r0, [pc, #100]	; 1c17c <test_union_vector@@Base+0x3c4>
   1c114:	add	r3, r5, #8
   1c118:	mov	r2, #223	; 0xdf
   1c11c:	add	r1, pc, r1
   1c120:	add	r0, pc, r0
   1c124:	bl	12a08 <__assert_fail@plt>
   1c128:	ldr	r1, [pc, #80]	; 1c180 <test_union_vector@@Base+0x3c8>
   1c12c:	ldr	r0, [pc, #80]	; 1c184 <test_union_vector@@Base+0x3cc>
   1c130:	add	r3, r5, #8
   1c134:	mov	r2, #217	; 0xd9
   1c138:	add	r1, pc, r1
   1c13c:	add	r0, pc, r0
   1c140:	bl	12a08 <__assert_fail@plt>
   1c144:	andeq	r9, r0, r4, lsr r6
   1c148:	andeq	sl, r0, r8, lsl #31
   1c14c:	andeq	r8, r0, r4, ror r9
   1c150:	andeq	r8, r0, ip, ror #17
   1c154:	andeq	r8, r0, r0, lsl #17
   1c158:			; <UNDEFINED> instruction: 0xffff7c98
   1c15c:	muleq	r0, r4, r4
   1c160:	movtpl	r4, #61261	; 0xef4d
   1c164:	andeq	sl, r0, ip, lsr #30
   1c168:	andeq	sl, r0, r8, ror #29
   1c16c:			; <UNDEFINED> instruction: 0x0000aeb0
   1c170:	andeq	sl, r0, r8, asr #29
   1c174:	strdeq	sl, [r0], -ip
   1c178:	andeq	r8, r0, ip, lsr pc
   1c17c:	andeq	sl, r0, r0, asr #26
   1c180:	andeq	r8, r0, r0, lsr #30
   1c184:	andeq	sl, r0, r0, asr ip

0001c188 <test_mixed_type_union@@Base>:
   1c188:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1c18c:	sub	sp, sp, #112	; 0x70
   1c190:	mov	r4, r0
   1c194:	bl	1f0f0 <flatcc_builder_reset@@Base>
   1c198:	ldr	r1, [pc, #3132]	; 1cddc <test_mixed_type_union@@Base+0xc54>
   1c19c:	mov	r3, #0
   1c1a0:	mov	r0, r4
   1c1a4:	mov	r2, r3
   1c1a8:	add	r1, pc, r1
   1c1ac:	bl	1f8b4 <flatcc_builder_start_buffer@@Base>
   1c1b0:	ldr	r6, [pc, #3112]	; 1cde0 <test_mixed_type_union@@Base+0xc58>
   1c1b4:	add	r6, pc, r6
   1c1b8:	cmp	r0, #0
   1c1bc:	bne	1c1cc <test_mixed_type_union@@Base+0x44>
   1c1c0:	mov	r1, #10
   1c1c4:	mov	r0, r4
   1c1c8:	bl	206ec <flatcc_builder_start_table@@Base>
   1c1cc:	mov	r2, #4
   1c1d0:	mov	r1, r2
   1c1d4:	mov	r0, r4
   1c1d8:	bl	1fab0 <flatcc_builder_start_struct@@Base>
   1c1dc:	subs	r7, r0, #0
   1c1e0:	beq	1c1f8 <test_mixed_type_union@@Base+0x70>
   1c1e4:	mov	r3, #10
   1c1e8:	str	r3, [r7]
   1c1ec:	mov	r0, r4
   1c1f0:	bl	1fb58 <flatcc_builder_end_struct@@Base>
   1c1f4:	mov	r7, r0
   1c1f8:	mov	r2, #2
   1c1fc:	mov	r1, r2
   1c200:	mov	r0, r4
   1c204:	bl	1fab0 <flatcc_builder_start_struct@@Base>
   1c208:	subs	r5, r0, #0
   1c20c:	beq	1c7e0 <test_mixed_type_union@@Base+0x658>
   1c210:	mov	r3, #22
   1c214:	strh	r3, [r5]
   1c218:	mov	r0, r4
   1c21c:	bl	1fb58 <flatcc_builder_end_struct@@Base>
   1c220:	mov	r2, #2
   1c224:	mov	r1, r2
   1c228:	mov	r5, r0
   1c22c:	mov	r0, r4
   1c230:	bl	1fab0 <flatcc_builder_start_struct@@Base>
   1c234:	cmp	r0, #0
   1c238:	beq	1c28c <test_mixed_type_union@@Base+0x104>
   1c23c:	mov	r3, #19
   1c240:	strh	r3, [r0]
   1c244:	mov	r0, r4
   1c248:	bl	1fb58 <flatcc_builder_end_struct@@Base>
   1c24c:	subs	r8, r0, #0
   1c250:	beq	1c28c <test_mixed_type_union@@Base+0x104>
   1c254:	mov	r3, #1
   1c258:	mov	r2, r3
   1c25c:	mov	r1, #0
   1c260:	mov	r0, r4
   1c264:	bl	2212c <flatcc_builder_table_add@@Base>
   1c268:	subs	r9, r0, #0
   1c26c:	beq	1c28c <test_mixed_type_union@@Base+0x104>
   1c270:	mov	r1, #1
   1c274:	mov	r0, r4
   1c278:	bl	2234c <flatcc_builder_table_add_offset@@Base>
   1c27c:	cmp	r0, #0
   1c280:	movne	r3, #8
   1c284:	strbne	r3, [r9]
   1c288:	strne	r8, [r0]
   1c28c:	cmp	r5, #0
   1c290:	beq	1c2cc <test_mixed_type_union@@Base+0x144>
   1c294:	mov	r3, #1
   1c298:	mov	r2, r3
   1c29c:	mov	r1, #6
   1c2a0:	mov	r0, r4
   1c2a4:	bl	2212c <flatcc_builder_table_add@@Base>
   1c2a8:	subs	r8, r0, #0
   1c2ac:	beq	1c2cc <test_mixed_type_union@@Base+0x144>
   1c2b0:	mov	r1, #7
   1c2b4:	mov	r0, r4
   1c2b8:	bl	2234c <flatcc_builder_table_add_offset@@Base>
   1c2bc:	cmp	r0, #0
   1c2c0:	movne	r3, #8
   1c2c4:	strbne	r3, [r8]
   1c2c8:	strne	r5, [r0]
   1c2cc:	mov	r1, #1
   1c2d0:	mov	r0, r4
   1c2d4:	bl	206ec <flatcc_builder_start_table@@Base>
   1c2d8:	subs	r8, r0, #0
   1c2dc:	bne	1c6c0 <test_mixed_type_union@@Base+0x538>
   1c2e0:	mov	r3, #4
   1c2e4:	mov	r2, r3
   1c2e8:	mov	r1, r8
   1c2ec:	mov	r0, r4
   1c2f0:	bl	2212c <flatcc_builder_table_add@@Base>
   1c2f4:	cmp	r0, #0
   1c2f8:	beq	1c6c0 <test_mixed_type_union@@Base+0x538>
   1c2fc:	ldr	r1, [pc, #2784]	; 1cde4 <test_mixed_type_union@@Base+0xc5c>
   1c300:	mov	r3, #42	; 0x2a
   1c304:	add	r1, pc, r1
   1c308:	str	r3, [r0]
   1c30c:	mov	r2, r8
   1c310:	add	r1, r1, #1472	; 0x5c0
   1c314:	mov	r0, r4
   1c318:	bl	21038 <flatcc_builder_check_required@@Base>
   1c31c:	cmp	r0, #0
   1c320:	beq	1c980 <test_mixed_type_union@@Base+0x7f8>
   1c324:	mov	r0, r4
   1c328:	bl	210e0 <flatcc_builder_end_table@@Base>
   1c32c:	subs	r8, r0, #0
   1c330:	beq	1c6c0 <test_mixed_type_union@@Base+0x538>
   1c334:	mov	r3, #1
   1c338:	mov	r2, r3
   1c33c:	mov	r1, #2
   1c340:	mov	r0, r4
   1c344:	bl	2212c <flatcc_builder_table_add@@Base>
   1c348:	subs	r9, r0, #0
   1c34c:	beq	1c36c <test_mixed_type_union@@Base+0x1e4>
   1c350:	mov	r1, #3
   1c354:	mov	r0, r4
   1c358:	bl	2234c <flatcc_builder_table_add_offset@@Base>
   1c35c:	cmp	r0, #0
   1c360:	movne	r3, #2
   1c364:	strbne	r3, [r9]
   1c368:	strne	r8, [r0]
   1c36c:	ldr	r1, [pc, #2676]	; 1cde8 <test_mixed_type_union@@Base+0xc60>
   1c370:	mov	r0, r4
   1c374:	add	r1, pc, r1
   1c378:	bl	21f90 <flatcc_builder_create_string_str@@Base>
   1c37c:	subs	r9, r0, #0
   1c380:	beq	1c3bc <test_mixed_type_union@@Base+0x234>
   1c384:	mov	r3, #1
   1c388:	mov	r2, r3
   1c38c:	mov	r1, #4
   1c390:	mov	r0, r4
   1c394:	bl	2212c <flatcc_builder_table_add@@Base>
   1c398:	subs	sl, r0, #0
   1c39c:	beq	1c3bc <test_mixed_type_union@@Base+0x234>
   1c3a0:	mov	r1, #5
   1c3a4:	mov	r0, r4
   1c3a8:	bl	2234c <flatcc_builder_table_add_offset@@Base>
   1c3ac:	cmp	r0, #0
   1c3b0:	movne	r3, #11
   1c3b4:	strbne	r3, [sl]
   1c3b8:	strne	r9, [r0]
   1c3bc:	mov	r0, r4
   1c3c0:	bl	21988 <flatcc_builder_start_union_vector@@Base>
   1c3c4:	mov	r3, #8
   1c3c8:	strb	r3, [sp, #64]	; 0x40
   1c3cc:	add	r3, sp, #64	; 0x40
   1c3d0:	str	r5, [sp, #68]	; 0x44
   1c3d4:	mov	r0, r4
   1c3d8:	ldm	r3, {r1, r2}
   1c3dc:	bl	21cd8 <flatcc_builder_union_vector_push@@Base>
   1c3e0:	mov	r3, #2
   1c3e4:	strb	r3, [sp, #56]	; 0x38
   1c3e8:	add	r3, sp, #56	; 0x38
   1c3ec:	str	r8, [sp, #60]	; 0x3c
   1c3f0:	mov	r0, r4
   1c3f4:	ldm	r3, {r1, r2}
   1c3f8:	bl	21cd8 <flatcc_builder_union_vector_push@@Base>
   1c3fc:	mov	r1, #1
   1c400:	mov	r0, r4
   1c404:	bl	206ec <flatcc_builder_start_table@@Base>
   1c408:	subs	r5, r0, #0
   1c40c:	bne	1c6c8 <test_mixed_type_union@@Base+0x540>
   1c410:	mov	r3, #4
   1c414:	mov	r2, r3
   1c418:	mov	r1, r5
   1c41c:	mov	r0, r4
   1c420:	bl	2212c <flatcc_builder_table_add@@Base>
   1c424:	cmp	r0, #0
   1c428:	beq	1c6c8 <test_mixed_type_union@@Base+0x540>
   1c42c:	ldr	r1, [pc, #2488]	; 1cdec <test_mixed_type_union@@Base+0xc64>
   1c430:	mov	r3, #1
   1c434:	add	r1, pc, r1
   1c438:	str	r3, [r0]
   1c43c:	mov	r2, r5
   1c440:	add	r1, r1, #1472	; 0x5c0
   1c444:	mov	r0, r4
   1c448:	bl	21038 <flatcc_builder_check_required@@Base>
   1c44c:	cmp	r0, #0
   1c450:	beq	1c980 <test_mixed_type_union@@Base+0x7f8>
   1c454:	mov	r0, r4
   1c458:	bl	210e0 <flatcc_builder_end_table@@Base>
   1c45c:	mov	r3, #2
   1c460:	strb	r3, [sp, #104]	; 0x68
   1c464:	add	r3, sp, #112	; 0x70
   1c468:	str	r0, [sp, #108]	; 0x6c
   1c46c:	mov	r0, r4
   1c470:	ldmdb	r3, {r1, r2}
   1c474:	bl	21cd8 <flatcc_builder_union_vector_push@@Base>
   1c478:	ldr	r1, [pc, #2416]	; 1cdf0 <test_mixed_type_union@@Base+0xc68>
   1c47c:	mov	r0, r4
   1c480:	add	r1, pc, r1
   1c484:	bl	21f90 <flatcc_builder_create_string_str@@Base>
   1c488:	mov	r3, #11
   1c48c:	strb	r3, [sp, #48]	; 0x30
   1c490:	add	r3, sp, #48	; 0x30
   1c494:	mov	r5, #9
   1c498:	str	r0, [sp, #52]	; 0x34
   1c49c:	mov	r0, r4
   1c4a0:	ldm	r3, {r1, r2}
   1c4a4:	bl	21cd8 <flatcc_builder_union_vector_push@@Base>
   1c4a8:	add	r3, sp, #40	; 0x28
   1c4ac:	str	r7, [sp, #44]	; 0x2c
   1c4b0:	strb	r5, [sp, #40]	; 0x28
   1c4b4:	mov	r0, r4
   1c4b8:	ldm	r3, {r1, r2}
   1c4bc:	bl	21cd8 <flatcc_builder_union_vector_push@@Base>
   1c4c0:	mov	r2, #4
   1c4c4:	mov	r1, r2
   1c4c8:	mov	r0, r4
   1c4cc:	bl	1fab0 <flatcc_builder_start_struct@@Base>
   1c4d0:	mov	r3, #3
   1c4d4:	str	r3, [r0]
   1c4d8:	mov	r0, r4
   1c4dc:	bl	1fb58 <flatcc_builder_end_struct@@Base>
   1c4e0:	add	r3, sp, #96	; 0x60
   1c4e4:	strb	r5, [sp, #96]	; 0x60
   1c4e8:	str	r0, [sp, #100]	; 0x64
   1c4ec:	mov	r0, r4
   1c4f0:	ldm	r3, {r1, r2}
   1c4f4:	bl	21cd8 <flatcc_builder_union_vector_push@@Base>
   1c4f8:	mov	r2, #4
   1c4fc:	mov	r1, r2
   1c500:	mov	r0, r4
   1c504:	bl	1fab0 <flatcc_builder_start_struct@@Base>
   1c508:	cmp	r0, #0
   1c50c:	beq	1c520 <test_mixed_type_union@@Base+0x398>
   1c510:	mov	r3, #1
   1c514:	str	r3, [r0]
   1c518:	mov	r0, r4
   1c51c:	bl	1fb58 <flatcc_builder_end_struct@@Base>
   1c520:	mov	r3, #9
   1c524:	strb	r3, [sp, #32]
   1c528:	add	r3, sp, #32
   1c52c:	str	r0, [sp, #36]	; 0x24
   1c530:	mov	r0, r4
   1c534:	ldm	r3, {r1, r2}
   1c538:	bl	21cd8 <flatcc_builder_union_vector_push@@Base>
   1c53c:	mov	r2, #4
   1c540:	mov	r1, r2
   1c544:	mov	r0, r4
   1c548:	bl	1fab0 <flatcc_builder_start_struct@@Base>
   1c54c:	cmp	r0, #0
   1c550:	beq	1c564 <test_mixed_type_union@@Base+0x3dc>
   1c554:	mov	r3, #2
   1c558:	str	r3, [r0]
   1c55c:	mov	r0, r4
   1c560:	bl	1fb58 <flatcc_builder_end_struct@@Base>
   1c564:	add	r3, sp, #88	; 0x58
   1c568:	mov	r7, #9
   1c56c:	str	r0, [sp, #92]	; 0x5c
   1c570:	strb	r7, [sp, #88]	; 0x58
   1c574:	mov	r0, r4
   1c578:	ldm	r3, {r1, r2}
   1c57c:	bl	21cd8 <flatcc_builder_union_vector_push@@Base>
   1c580:	ldr	r1, [pc, #2156]	; 1cdf4 <test_mixed_type_union@@Base+0xc6c>
   1c584:	mov	r0, r4
   1c588:	add	r1, pc, r1
   1c58c:	bl	21f90 <flatcc_builder_create_string_str@@Base>
   1c590:	add	r3, sp, #24
   1c594:	mov	r5, #11
   1c598:	strb	r5, [sp, #24]
   1c59c:	str	r0, [sp, #28]
   1c5a0:	mov	r0, r4
   1c5a4:	ldm	r3, {r1, r2}
   1c5a8:	bl	21cd8 <flatcc_builder_union_vector_push@@Base>
   1c5ac:	ldr	r1, [pc, #2116]	; 1cdf8 <test_mixed_type_union@@Base+0xc70>
   1c5b0:	mov	r0, r4
   1c5b4:	add	r1, pc, r1
   1c5b8:	bl	21f90 <flatcc_builder_create_string_str@@Base>
   1c5bc:	add	r3, sp, #80	; 0x50
   1c5c0:	strb	r5, [sp, #80]	; 0x50
   1c5c4:	str	r0, [sp, #84]	; 0x54
   1c5c8:	mov	r0, r4
   1c5cc:	ldm	r3, {r1, r2}
   1c5d0:	bl	21cd8 <flatcc_builder_union_vector_push@@Base>
   1c5d4:	mov	r1, r4
   1c5d8:	add	r0, sp, #72	; 0x48
   1c5dc:	bl	21a04 <flatcc_builder_end_union_vector@@Base>
   1c5e0:	ldr	r5, [sp, #72]	; 0x48
   1c5e4:	ldr	r8, [sp, #76]	; 0x4c
   1c5e8:	cmp	r8, #0
   1c5ec:	cmpne	r5, #0
   1c5f0:	bne	1c838 <test_mixed_type_union@@Base+0x6b0>
   1c5f4:	ldr	r5, [pc, #2048]	; 1cdfc <test_mixed_type_union@@Base+0xc74>
   1c5f8:	mov	r2, #0
   1c5fc:	add	r5, pc, r5
   1c600:	add	r1, r5, #1488	; 0x5d0
   1c604:	add	r1, r1, #12
   1c608:	mov	r0, r4
   1c60c:	bl	21038 <flatcc_builder_check_required@@Base>
   1c610:	cmp	r0, #0
   1c614:	beq	1c964 <test_mixed_type_union@@Base+0x7dc>
   1c618:	mov	r0, r4
   1c61c:	bl	210e0 <flatcc_builder_end_table@@Base>
   1c620:	mov	r1, r0
   1c624:	mov	r0, r4
   1c628:	bl	1f96c <flatcc_builder_end_buffer@@Base>
   1c62c:	mov	r0, r4
   1c630:	add	r1, sp, #4
   1c634:	bl	22a08 <flatcc_builder_finalize_aligned_buffer@@Base>
   1c638:	ldr	r3, [pc, #1984]	; 1ce00 <test_mixed_type_union@@Base+0xc78>
   1c63c:	ldr	r2, [sp, #4]
   1c640:	ldr	r3, [r6, r3]
   1c644:	ldr	r3, [r3]
   1c648:	mov	r1, r0
   1c64c:	mov	r4, r0
   1c650:	ldr	r0, [pc, #1964]	; 1ce04 <test_mixed_type_union@@Base+0xc7c>
   1c654:	add	r0, pc, r0
   1c658:	bl	13540 <_start@@Base+0x154>
   1c65c:	ldr	r3, [pc, #1956]	; 1ce08 <test_mixed_type_union@@Base+0xc80>
   1c660:	ldr	r2, [pc, #1956]	; 1ce0c <test_mixed_type_union@@Base+0xc84>
   1c664:	mov	r0, r4
   1c668:	add	r3, pc, r3
   1c66c:	add	r2, pc, r2
   1c670:	ldr	r1, [sp, #4]
   1c674:	bl	23edc <flatcc_verify_table_as_root@@Base>
   1c678:	cmp	r0, #0
   1c67c:	bne	1c8cc <test_mixed_type_union@@Base+0x744>
   1c680:	cmp	r4, #0
   1c684:	beq	1c698 <test_mixed_type_union@@Base+0x510>
   1c688:	ldr	r3, [pc, #1920]	; 1ce10 <test_mixed_type_union@@Base+0xc88>
   1c68c:	ldr	r2, [r4, #4]
   1c690:	cmp	r2, r3
   1c694:	beq	1c6d0 <test_mixed_type_union@@Base+0x548>
   1c698:	ldr	r3, [pc, #1908]	; 1ce14 <test_mixed_type_union@@Base+0xc8c>
   1c69c:	ldr	r1, [pc, #1908]	; 1ce18 <test_mixed_type_union@@Base+0xc90>
   1c6a0:	add	r3, pc, r3
   1c6a4:	ldr	r0, [pc, #1904]	; 1ce1c <test_mixed_type_union@@Base+0xc94>
   1c6a8:	add	r3, r3, #1520	; 0x5f0
   1c6ac:	ldr	r2, [pc, #1900]	; 1ce20 <test_mixed_type_union@@Base+0xc98>
   1c6b0:	add	r3, r3, #4
   1c6b4:	add	r1, pc, r1
   1c6b8:	add	r0, pc, r0
   1c6bc:	bl	12a08 <__assert_fail@plt>
   1c6c0:	mov	r8, #0
   1c6c4:	b	1c36c <test_mixed_type_union@@Base+0x1e4>
   1c6c8:	mov	r0, #0
   1c6cc:	b	1c45c <test_mixed_type_union@@Base+0x2d4>
   1c6d0:	ldr	r3, [r4]
   1c6d4:	adds	r5, r4, r3
   1c6d8:	beq	1c698 <test_mixed_type_union@@Base+0x510>
   1c6dc:	ldr	r3, [r4, r3]
   1c6e0:	sub	r3, r5, r3
   1c6e4:	ldrh	r2, [r3]
   1c6e8:	cmp	r2, #7
   1c6ec:	bls	1c7a8 <test_mixed_type_union@@Base+0x620>
   1c6f0:	ldrh	r1, [r3, #6]
   1c6f4:	cmp	r1, #0
   1c6f8:	beq	1c7a8 <test_mixed_type_union@@Base+0x620>
   1c6fc:	cmp	r2, #23
   1c700:	bls	1c7cc <test_mixed_type_union@@Base+0x644>
   1c704:	ldrh	r6, [r3, #22]
   1c708:	cmp	r6, #0
   1c70c:	beq	1c7cc <test_mixed_type_union@@Base+0x644>
   1c710:	ldrh	r2, [r3, #4]
   1c714:	cmp	r2, #0
   1c718:	beq	1c868 <test_mixed_type_union@@Base+0x6e0>
   1c71c:	ldrb	r2, [r5, r2]
   1c720:	cmp	r2, #0
   1c724:	beq	1c868 <test_mixed_type_union@@Base+0x6e0>
   1c728:	ldr	r0, [r5, r1]
   1c72c:	cmp	r2, #8
   1c730:	add	r1, r5, r1
   1c734:	add	r2, r1, r0
   1c738:	bne	1c868 <test_mixed_type_union@@Base+0x6e0>
   1c73c:	cmp	r2, #0
   1c740:	beq	1c884 <test_mixed_type_union@@Base+0x6fc>
   1c744:	ldrh	r2, [r1, r0]
   1c748:	cmp	r2, #19
   1c74c:	bhi	1c8a4 <test_mixed_type_union@@Base+0x71c>
   1c750:	bne	1c890 <test_mixed_type_union@@Base+0x708>
   1c754:	ldrh	r2, [r3, #16]
   1c758:	cmp	r2, #0
   1c75c:	beq	1c8b8 <test_mixed_type_union@@Base+0x730>
   1c760:	ldrb	r2, [r5, r2]
   1c764:	cmp	r2, #8
   1c768:	bne	1c8b8 <test_mixed_type_union@@Base+0x730>
   1c76c:	ldrh	r2, [r3, #18]
   1c770:	cmp	r2, #0
   1c774:	beq	1c950 <test_mixed_type_union@@Base+0x7c8>
   1c778:	ldr	r1, [r5, r2]
   1c77c:	add	r2, r5, r2
   1c780:	cmn	r2, r1
   1c784:	beq	1c950 <test_mixed_type_union@@Base+0x7c8>
   1c788:	ldrh	r2, [r2, r1]
   1c78c:	cmp	r2, #22
   1c790:	beq	1c8e8 <test_mixed_type_union@@Base+0x760>
   1c794:	ldr	r0, [pc, #1672]	; 1ce24 <test_mixed_type_union@@Base+0xc9c>
   1c798:	mvn	r5, #0
   1c79c:	add	r0, pc, r0
   1c7a0:	bl	1296c <puts@plt>
   1c7a4:	b	1c7b8 <test_mixed_type_union@@Base+0x630>
   1c7a8:	ldr	r0, [pc, #1656]	; 1ce28 <test_mixed_type_union@@Base+0xca0>
   1c7ac:	mvn	r5, #0
   1c7b0:	add	r0, pc, r0
   1c7b4:	bl	1296c <puts@plt>
   1c7b8:	mov	r0, r4
   1c7bc:	bl	22b10 <flatcc_builder_aligned_free@@Base>
   1c7c0:	mov	r0, r5
   1c7c4:	add	sp, sp, #112	; 0x70
   1c7c8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1c7cc:	ldr	r0, [pc, #1624]	; 1ce2c <test_mixed_type_union@@Base+0xca4>
   1c7d0:	mvn	r5, #0
   1c7d4:	add	r0, pc, r0
   1c7d8:	bl	1296c <puts@plt>
   1c7dc:	b	1c7b8 <test_mixed_type_union@@Base+0x630>
   1c7e0:	mov	r2, #2
   1c7e4:	mov	r1, r2
   1c7e8:	mov	r0, r4
   1c7ec:	bl	1fab0 <flatcc_builder_start_struct@@Base>
   1c7f0:	cmp	r0, #0
   1c7f4:	beq	1c87c <test_mixed_type_union@@Base+0x6f4>
   1c7f8:	mov	r3, #19
   1c7fc:	strh	r3, [r0]
   1c800:	mov	r0, r4
   1c804:	bl	1fb58 <flatcc_builder_end_struct@@Base>
   1c808:	subs	r8, r0, #0
   1c80c:	moveq	r5, r8
   1c810:	beq	1c2cc <test_mixed_type_union@@Base+0x144>
   1c814:	mov	r3, #1
   1c818:	mov	r2, r3
   1c81c:	mov	r1, r5
   1c820:	mov	r0, r4
   1c824:	bl	2212c <flatcc_builder_table_add@@Base>
   1c828:	subs	r9, r0, #0
   1c82c:	bne	1c270 <test_mixed_type_union@@Base+0xe8>
   1c830:	mov	r5, r9
   1c834:	b	1c2cc <test_mixed_type_union@@Base+0x144>
   1c838:	mov	r1, #8
   1c83c:	mov	r0, r4
   1c840:	bl	2234c <flatcc_builder_table_add_offset@@Base>
   1c844:	cmp	r0, #0
   1c848:	beq	1c5f4 <test_mixed_type_union@@Base+0x46c>
   1c84c:	str	r5, [r0]
   1c850:	mov	r1, r7
   1c854:	mov	r0, r4
   1c858:	bl	2234c <flatcc_builder_table_add_offset@@Base>
   1c85c:	cmp	r0, #0
   1c860:	strne	r8, [r0]
   1c864:	b	1c5f4 <test_mixed_type_union@@Base+0x46c>
   1c868:	ldr	r0, [pc, #1472]	; 1ce30 <test_mixed_type_union@@Base+0xca8>
   1c86c:	mvn	r5, #0
   1c870:	add	r0, pc, r0
   1c874:	bl	1296c <puts@plt>
   1c878:	b	1c7b8 <test_mixed_type_union@@Base+0x630>
   1c87c:	mov	r5, r0
   1c880:	b	1c2cc <test_mixed_type_union@@Base+0x144>
   1c884:	ldr	r0, [pc, #1448]	; 1ce34 <test_mixed_type_union@@Base+0xcac>
   1c888:	add	r0, pc, r0
   1c88c:	bl	1296c <puts@plt>
   1c890:	ldr	r0, [pc, #1440]	; 1ce38 <test_mixed_type_union@@Base+0xcb0>
   1c894:	mvn	r5, #0
   1c898:	add	r0, pc, r0
   1c89c:	bl	1296c <puts@plt>
   1c8a0:	b	1c7b8 <test_mixed_type_union@@Base+0x630>
   1c8a4:	ldr	r0, [pc, #1424]	; 1ce3c <test_mixed_type_union@@Base+0xcb4>
   1c8a8:	mvn	r5, #0
   1c8ac:	add	r0, pc, r0
   1c8b0:	bl	1296c <puts@plt>
   1c8b4:	b	1c7b8 <test_mixed_type_union@@Base+0x630>
   1c8b8:	ldr	r0, [pc, #1408]	; 1ce40 <test_mixed_type_union@@Base+0xcb8>
   1c8bc:	mvn	r5, #0
   1c8c0:	add	r0, pc, r0
   1c8c4:	bl	1296c <puts@plt>
   1c8c8:	b	1c7b8 <test_mixed_type_union@@Base+0x630>
   1c8cc:	bl	23150 <flatcc_verify_error_string@@Base>
   1c8d0:	mvn	r5, #0
   1c8d4:	mov	r1, r0
   1c8d8:	ldr	r0, [pc, #1380]	; 1ce44 <test_mixed_type_union@@Base+0xcbc>
   1c8dc:	add	r0, pc, r0
   1c8e0:	bl	12918 <printf@plt>
   1c8e4:	b	1c7c0 <test_mixed_type_union@@Base+0x638>
   1c8e8:	ldrh	r2, [r3, #8]
   1c8ec:	cmp	r2, #0
   1c8f0:	beq	1c93c <test_mixed_type_union@@Base+0x7b4>
   1c8f4:	ldrb	r2, [r5, r2]
   1c8f8:	cmp	r2, #2
   1c8fc:	bne	1c93c <test_mixed_type_union@@Base+0x7b4>
   1c900:	ldrh	r3, [r3, #10]
   1c904:	cmp	r3, #0
   1c908:	beq	1c928 <test_mixed_type_union@@Base+0x7a0>
   1c90c:	ldr	r2, [r5, r3]
   1c910:	add	r3, r5, r3
   1c914:	adds	r0, r3, r2
   1c918:	beq	1c928 <test_mixed_type_union@@Base+0x7a0>
   1c91c:	bl	12f38 <__assert_fail@plt+0x530>
   1c920:	cmp	r0, #42	; 0x2a
   1c924:	beq	1c9a8 <test_mixed_type_union@@Base+0x820>
   1c928:	ldr	r0, [pc, #1304]	; 1ce48 <test_mixed_type_union@@Base+0xcc0>
   1c92c:	mvn	r5, #0
   1c930:	add	r0, pc, r0
   1c934:	bl	1296c <puts@plt>
   1c938:	b	1c7b8 <test_mixed_type_union@@Base+0x630>
   1c93c:	ldr	r0, [pc, #1288]	; 1ce4c <test_mixed_type_union@@Base+0xcc4>
   1c940:	mvn	r5, #0
   1c944:	add	r0, pc, r0
   1c948:	bl	1296c <puts@plt>
   1c94c:	b	1c7b8 <test_mixed_type_union@@Base+0x630>
   1c950:	ldr	r0, [pc, #1272]	; 1ce50 <test_mixed_type_union@@Base+0xcc8>
   1c954:	mvn	r5, #0
   1c958:	add	r0, pc, r0
   1c95c:	bl	1296c <puts@plt>
   1c960:	b	1c7b8 <test_mixed_type_union@@Base+0x630>
   1c964:	ldr	r1, [pc, #1256]	; 1ce54 <test_mixed_type_union@@Base+0xccc>
   1c968:	ldr	r0, [pc, #1256]	; 1ce58 <test_mixed_type_union@@Base+0xcd0>
   1c96c:	add	r3, r5, #1504	; 0x5e0
   1c970:	mov	r2, #241	; 0xf1
   1c974:	add	r1, pc, r1
   1c978:	add	r0, pc, r0
   1c97c:	bl	12a08 <__assert_fail@plt>
   1c980:	ldr	r3, [pc, #1236]	; 1ce5c <test_mixed_type_union@@Base+0xcd4>
   1c984:	ldr	r1, [pc, #1236]	; 1ce60 <test_mixed_type_union@@Base+0xcd8>
   1c988:	add	r3, pc, r3
   1c98c:	ldr	r0, [pc, #1232]	; 1ce64 <test_mixed_type_union@@Base+0xcdc>
   1c990:	add	r3, r3, #1472	; 0x5c0
   1c994:	mov	r2, #239	; 0xef
   1c998:	add	r3, r3, #4
   1c99c:	add	r1, pc, r1
   1c9a0:	add	r0, pc, r0
   1c9a4:	bl	12a08 <__assert_fail@plt>
   1c9a8:	mov	r0, r5
   1c9ac:	bl	12e60 <__assert_fail@plt+0x458>
   1c9b0:	cmp	r0, #11
   1c9b4:	beq	1c9cc <test_mixed_type_union@@Base+0x844>
   1c9b8:	ldr	r0, [pc, #1192]	; 1ce68 <test_mixed_type_union@@Base+0xce0>
   1c9bc:	mvn	r5, #0
   1c9c0:	add	r0, pc, r0
   1c9c4:	bl	1296c <puts@plt>
   1c9c8:	b	1c7b8 <test_mixed_type_union@@Base+0x630>
   1c9cc:	mov	r0, r5
   1c9d0:	bl	12ec8 <__assert_fail@plt+0x4c0>
   1c9d4:	cmp	r0, #0
   1c9d8:	beq	1ca14 <test_mixed_type_union@@Base+0x88c>
   1c9dc:	adds	r7, r0, #4
   1c9e0:	beq	1ca14 <test_mixed_type_union@@Base+0x88c>
   1c9e4:	ldr	r1, [pc, #1152]	; 1ce6c <test_mixed_type_union@@Base+0xce4>
   1c9e8:	mov	r0, r7
   1c9ec:	add	r1, pc, r1
   1c9f0:	bl	1290c <strcmp@plt>
   1c9f4:	cmp	r0, #0
   1c9f8:	beq	1ca28 <test_mixed_type_union@@Base+0x8a0>
   1c9fc:	ldr	r0, [pc, #1132]	; 1ce70 <test_mixed_type_union@@Base+0xce8>
   1ca00:	mov	r1, r7
   1ca04:	add	r0, pc, r0
   1ca08:	bl	12918 <printf@plt>
   1ca0c:	mvn	r5, #0
   1ca10:	b	1c7b8 <test_mixed_type_union@@Base+0x630>
   1ca14:	ldr	r0, [pc, #1112]	; 1ce74 <test_mixed_type_union@@Base+0xcec>
   1ca18:	mvn	r5, #0
   1ca1c:	add	r0, pc, r0
   1ca20:	bl	1296c <puts@plt>
   1ca24:	b	1c7b8 <test_mixed_type_union@@Base+0x630>
   1ca28:	mov	r0, r5
   1ca2c:	bl	12fa0 <__assert_fail@plt+0x598>
   1ca30:	ldr	r3, [r5, r6]
   1ca34:	add	r6, r5, r6
   1ca38:	add	r3, r3, #4
   1ca3c:	add	r7, r6, r3
   1ca40:	subs	r9, r0, #0
   1ca44:	beq	1caa0 <test_mixed_type_union@@Base+0x918>
   1ca48:	cmp	r7, #0
   1ca4c:	ldr	r2, [r9, #-4]
   1ca50:	beq	1cb0c <test_mixed_type_union@@Base+0x984>
   1ca54:	ldr	r3, [r7, #-4]
   1ca58:	cmp	r2, r3
   1ca5c:	bne	1cae4 <test_mixed_type_union@@Base+0x95c>
   1ca60:	add	r6, sp, #8
   1ca64:	add	r8, sp, #16
   1ca68:	str	r9, [sp, #8]
   1ca6c:	str	r7, [sp, #12]
   1ca70:	mov	r3, #0
   1ca74:	mov	r0, r8
   1ca78:	ldm	r6, {r1, r2}
   1ca7c:	bl	13014 <__assert_fail@plt+0x60c>
   1ca80:	ldrb	r3, [sp, #16]
   1ca84:	cmp	r3, #8
   1ca88:	beq	1cab0 <test_mixed_type_union@@Base+0x928>
   1ca8c:	ldr	r0, [pc, #996]	; 1ce78 <test_mixed_type_union@@Base+0xcf0>
   1ca90:	mvn	r5, #0
   1ca94:	add	r0, pc, r0
   1ca98:	bl	12918 <printf@plt>
   1ca9c:	b	1c7b8 <test_mixed_type_union@@Base+0x630>
   1caa0:	cmp	r7, #0
   1caa4:	movne	r2, #0
   1caa8:	bne	1ca54 <test_mixed_type_union@@Base+0x8cc>
   1caac:	b	1ca60 <test_mixed_type_union@@Base+0x8d8>
   1cab0:	mov	r0, r8
   1cab4:	mov	r3, #1
   1cab8:	ldm	r6, {r1, r2}
   1cabc:	bl	13014 <__assert_fail@plt+0x60c>
   1cac0:	ldrb	sl, [sp, #16]
   1cac4:	ldr	r0, [sp, #20]
   1cac8:	cmp	sl, #2
   1cacc:	beq	1cb14 <test_mixed_type_union@@Base+0x98c>
   1cad0:	ldr	r0, [pc, #932]	; 1ce7c <test_mixed_type_union@@Base+0xcf4>
   1cad4:	mvn	r5, #0
   1cad8:	add	r0, pc, r0
   1cadc:	bl	12918 <printf@plt>
   1cae0:	b	1c7b8 <test_mixed_type_union@@Base+0x630>
   1cae4:	ldr	r3, [pc, #916]	; 1ce80 <test_mixed_type_union@@Base+0xcf8>
   1cae8:	ldr	r1, [pc, #916]	; 1ce84 <test_mixed_type_union@@Base+0xcfc>
   1caec:	add	r3, pc, r3
   1caf0:	ldr	r0, [pc, #912]	; 1ce88 <test_mixed_type_union@@Base+0xd00>
   1caf4:	add	r3, r3, #1552	; 0x610
   1caf8:	ldr	r2, [pc, #908]	; 1ce8c <test_mixed_type_union@@Base+0xd04>
   1cafc:	add	r3, r3, #12
   1cb00:	add	r1, pc, r1
   1cb04:	add	r0, pc, r0
   1cb08:	bl	12a08 <__assert_fail@plt>
   1cb0c:	mov	r3, r7
   1cb10:	b	1ca58 <test_mixed_type_union@@Base+0x8d0>
   1cb14:	bl	12f38 <__assert_fail@plt+0x530>
   1cb18:	cmp	r0, #42	; 0x2a
   1cb1c:	beq	1cb34 <test_mixed_type_union@@Base+0x9ac>
   1cb20:	ldr	r0, [pc, #872]	; 1ce90 <test_mixed_type_union@@Base+0xd08>
   1cb24:	mvn	r5, #0
   1cb28:	add	r0, pc, r0
   1cb2c:	bl	12918 <printf@plt>
   1cb30:	b	1c7b8 <test_mixed_type_union@@Base+0x630>
   1cb34:	mov	r3, sl
   1cb38:	mov	r0, r8
   1cb3c:	ldm	r6, {r1, r2}
   1cb40:	bl	13014 <__assert_fail@plt+0x60c>
   1cb44:	ldrb	r3, [sp, #16]
   1cb48:	ldr	r0, [sp, #20]
   1cb4c:	cmp	r3, #2
   1cb50:	beq	1cb68 <test_mixed_type_union@@Base+0x9e0>
   1cb54:	ldr	r0, [pc, #824]	; 1ce94 <test_mixed_type_union@@Base+0xd0c>
   1cb58:	mvn	r5, #0
   1cb5c:	add	r0, pc, r0
   1cb60:	bl	12918 <printf@plt>
   1cb64:	b	1c7b8 <test_mixed_type_union@@Base+0x630>
   1cb68:	bl	12f38 <__assert_fail@plt+0x530>
   1cb6c:	cmp	r0, #1
   1cb70:	beq	1cb88 <test_mixed_type_union@@Base+0xa00>
   1cb74:	ldr	r0, [pc, #796]	; 1ce98 <test_mixed_type_union@@Base+0xd10>
   1cb78:	mvn	r5, #0
   1cb7c:	add	r0, pc, r0
   1cb80:	bl	12918 <printf@plt>
   1cb84:	b	1c7b8 <test_mixed_type_union@@Base+0x630>
   1cb88:	mov	r0, r5
   1cb8c:	bl	12fa0 <__assert_fail@plt+0x598>
   1cb90:	cmp	r0, #0
   1cb94:	beq	1cbc4 <test_mixed_type_union@@Base+0xa3c>
   1cb98:	ldr	r3, [r0, #-4]
   1cb9c:	cmp	r3, #3
   1cba0:	bls	1cbc4 <test_mixed_type_union@@Base+0xa3c>
   1cba4:	ldrb	r3, [r0, #3]
   1cba8:	cmp	r3, #11
   1cbac:	beq	1cbc8 <test_mixed_type_union@@Base+0xa40>
   1cbb0:	ldr	r0, [pc, #740]	; 1ce9c <test_mixed_type_union@@Base+0xd14>
   1cbb4:	mvn	r5, #0
   1cbb8:	add	r0, pc, r0
   1cbbc:	bl	1296c <puts@plt>
   1cbc0:	b	1c7b8 <test_mixed_type_union@@Base+0x630>
   1cbc4:	bl	12e28 <__assert_fail@plt+0x420>
   1cbc8:	cmp	r7, #0
   1cbcc:	beq	1cc18 <test_mixed_type_union@@Base+0xa90>
   1cbd0:	ldr	r3, [r7, #-4]
   1cbd4:	cmp	r3, #3
   1cbd8:	bls	1cc18 <test_mixed_type_union@@Base+0xa90>
   1cbdc:	ldr	r3, [r7, #12]
   1cbe0:	add	r3, r3, #16
   1cbe4:	adds	r0, r7, r3
   1cbe8:	beq	1cc04 <test_mixed_type_union@@Base+0xa7c>
   1cbec:	ldr	r5, [pc, #684]	; 1cea0 <test_mixed_type_union@@Base+0xd18>
   1cbf0:	add	r5, pc, r5
   1cbf4:	mov	r1, r5
   1cbf8:	bl	1290c <strcmp@plt>
   1cbfc:	cmp	r0, #0
   1cc00:	beq	1cc40 <test_mixed_type_union@@Base+0xab8>
   1cc04:	ldr	r0, [pc, #664]	; 1cea4 <test_mixed_type_union@@Base+0xd1c>
   1cc08:	mvn	r5, #0
   1cc0c:	add	r0, pc, r0
   1cc10:	bl	1296c <puts@plt>
   1cc14:	b	1c7b8 <test_mixed_type_union@@Base+0x630>
   1cc18:	ldr	r3, [pc, #648]	; 1cea8 <test_mixed_type_union@@Base+0xd20>
   1cc1c:	ldr	r1, [pc, #648]	; 1ceac <test_mixed_type_union@@Base+0xd24>
   1cc20:	add	r3, pc, r3
   1cc24:	ldr	r0, [pc, #644]	; 1ceb0 <test_mixed_type_union@@Base+0xd28>
   1cc28:	add	r3, r3, #1584	; 0x630
   1cc2c:	mov	r2, #119	; 0x77
   1cc30:	add	r3, r3, #12
   1cc34:	add	r1, pc, r1
   1cc38:	add	r0, pc, r0
   1cc3c:	bl	12a08 <__assert_fail@plt>
   1cc40:	mov	r3, #3
   1cc44:	ldm	r6, {r1, r2}
   1cc48:	mov	r0, r8
   1cc4c:	bl	13014 <__assert_fail@plt+0x60c>
   1cc50:	ldrb	r2, [sp, #16]
   1cc54:	ldr	r3, [sp, #20]
   1cc58:	cmp	r2, #11
   1cc5c:	beq	1cc74 <test_mixed_type_union@@Base+0xaec>
   1cc60:	ldr	r0, [pc, #588]	; 1ceb4 <test_mixed_type_union@@Base+0xd2c>
   1cc64:	mvn	r5, #0
   1cc68:	add	r0, pc, r0
   1cc6c:	bl	12918 <printf@plt>
   1cc70:	b	1c7b8 <test_mixed_type_union@@Base+0x630>
   1cc74:	cmp	r3, #0
   1cc78:	beq	1cc94 <test_mixed_type_union@@Base+0xb0c>
   1cc7c:	adds	r0, r3, #4
   1cc80:	beq	1cc94 <test_mixed_type_union@@Base+0xb0c>
   1cc84:	mov	r1, r5
   1cc88:	bl	1290c <strcmp@plt>
   1cc8c:	subs	r5, r0, #0
   1cc90:	beq	1cca8 <test_mixed_type_union@@Base+0xb20>
   1cc94:	ldr	r0, [pc, #540]	; 1ceb8 <test_mixed_type_union@@Base+0xd30>
   1cc98:	mvn	r5, #0
   1cc9c:	add	r0, pc, r0
   1cca0:	bl	1296c <puts@plt>
   1cca4:	b	1c7b8 <test_mixed_type_union@@Base+0x630>
   1cca8:	mov	r3, #4
   1ccac:	ldm	r6, {r1, r2}
   1ccb0:	mov	r0, r8
   1ccb4:	bl	13014 <__assert_fail@plt+0x60c>
   1ccb8:	ldrb	r3, [sp, #16]
   1ccbc:	cmp	r3, #9
   1ccc0:	beq	1ccd8 <test_mixed_type_union@@Base+0xb50>
   1ccc4:	ldr	r0, [pc, #496]	; 1cebc <test_mixed_type_union@@Base+0xd34>
   1ccc8:	mvn	r5, #0
   1cccc:	add	r0, pc, r0
   1ccd0:	bl	12918 <printf@plt>
   1ccd4:	b	1c7b8 <test_mixed_type_union@@Base+0x630>
   1ccd8:	mov	r3, #5
   1ccdc:	ldm	r6, {r1, r2}
   1cce0:	mov	r0, r8
   1cce4:	bl	13014 <__assert_fail@plt+0x60c>
   1cce8:	ldrb	r3, [sp, #16]
   1ccec:	cmp	r3, #9
   1ccf0:	beq	1cd08 <test_mixed_type_union@@Base+0xb80>
   1ccf4:	ldr	r0, [pc, #452]	; 1cec0 <test_mixed_type_union@@Base+0xd38>
   1ccf8:	mvn	r5, #0
   1ccfc:	add	r0, pc, r0
   1cd00:	bl	12918 <printf@plt>
   1cd04:	b	1c7b8 <test_mixed_type_union@@Base+0x630>
   1cd08:	mov	r3, #6
   1cd0c:	ldm	r6, {r1, r2}
   1cd10:	mov	r0, r8
   1cd14:	bl	13014 <__assert_fail@plt+0x60c>
   1cd18:	ldrb	r3, [sp, #16]
   1cd1c:	cmp	r3, #9
   1cd20:	beq	1cd38 <test_mixed_type_union@@Base+0xbb0>
   1cd24:	ldr	r0, [pc, #408]	; 1cec4 <test_mixed_type_union@@Base+0xd3c>
   1cd28:	mvn	r5, #0
   1cd2c:	add	r0, pc, r0
   1cd30:	bl	12918 <printf@plt>
   1cd34:	b	1c7b8 <test_mixed_type_union@@Base+0x630>
   1cd38:	mov	r3, #7
   1cd3c:	ldm	r6, {r1, r2}
   1cd40:	mov	r0, r8
   1cd44:	bl	13014 <__assert_fail@plt+0x60c>
   1cd48:	ldrb	r3, [sp, #16]
   1cd4c:	cmp	r3, #9
   1cd50:	beq	1cd68 <test_mixed_type_union@@Base+0xbe0>
   1cd54:	ldr	r0, [pc, #364]	; 1cec8 <test_mixed_type_union@@Base+0xd40>
   1cd58:	mvn	r5, #0
   1cd5c:	add	r0, pc, r0
   1cd60:	bl	12918 <printf@plt>
   1cd64:	b	1c7b8 <test_mixed_type_union@@Base+0x630>
   1cd68:	mov	r3, #8
   1cd6c:	ldm	r6, {r1, r2}
   1cd70:	mov	r0, r8
   1cd74:	bl	13014 <__assert_fail@plt+0x60c>
   1cd78:	ldrb	r3, [sp, #16]
   1cd7c:	cmp	r3, #11
   1cd80:	beq	1cd98 <test_mixed_type_union@@Base+0xc10>
   1cd84:	ldr	r0, [pc, #320]	; 1cecc <test_mixed_type_union@@Base+0xd44>
   1cd88:	mvn	r5, #0
   1cd8c:	add	r0, pc, r0
   1cd90:	bl	12918 <printf@plt>
   1cd94:	b	1c7b8 <test_mixed_type_union@@Base+0x630>
   1cd98:	mov	r3, #9
   1cd9c:	mov	r0, r8
   1cda0:	ldm	r6, {r1, r2}
   1cda4:	bl	13014 <__assert_fail@plt+0x60c>
   1cda8:	ldrb	r3, [sp, #16]
   1cdac:	cmp	r3, #11
   1cdb0:	bne	1cd84 <test_mixed_type_union@@Base+0xbfc>
   1cdb4:	cmp	r9, #0
   1cdb8:	beq	1cdc8 <test_mixed_type_union@@Base+0xc40>
   1cdbc:	ldr	r3, [r9, #-4]
   1cdc0:	cmp	r3, #10
   1cdc4:	beq	1c7b8 <test_mixed_type_union@@Base+0x630>
   1cdc8:	ldr	r0, [pc, #256]	; 1ced0 <test_mixed_type_union@@Base+0xd48>
   1cdcc:	mvn	r5, #0
   1cdd0:	add	r0, pc, r0
   1cdd4:	bl	12918 <printf@plt>
   1cdd8:	b	1c7b8 <test_mixed_type_union@@Base+0x630>
   1cddc:	andeq	r9, r0, r4, ror #4
   1cde0:	andeq	ip, r1, r4, asr #28
   1cde4:	andeq	r8, r0, ip, lsr #9
   1cde8:	strdeq	sl, [r0], -r4
   1cdec:	andeq	r8, r0, ip, ror r3
   1cdf0:	strdeq	sl, [r0], -r0
   1cdf4:	strdeq	sl, [r0], -r4
   1cdf8:	andeq	sl, r0, r4, asr #21
   1cdfc:			; <UNDEFINED> instruction: 0x000081b4
   1ce00:	andeq	r0, r0, r8, rrx
   1ce04:			; <UNDEFINED> instruction: 0x0000aab8
   1ce08:			; <UNDEFINED> instruction: 0xffff7b4c
   1ce0c:	andeq	r8, r0, r0, lsr #27
   1ce10:	movtpl	r4, #61261	; 0xef4d
   1ce14:	andeq	r8, r0, r0, lsl r1
   1ce18:	andeq	r8, r0, r4, lsl #16
   1ce1c:	andeq	r8, r0, ip, ror r8
   1ce20:	andeq	r0, r0, r3, lsr r3
   1ce24:	andeq	sl, r0, r8, lsl fp
   1ce28:			; <UNDEFINED> instruction: 0x0000a9bc
   1ce2c:	andeq	sl, r0, r4, asr #19
   1ce30:	andeq	sl, r0, r4, asr r9
   1ce34:	andeq	sl, r0, r8, asr r9
   1ce38:	andeq	sl, r0, r8, lsl #19
   1ce3c:	andeq	sl, r0, ip, asr #18
   1ce40:	muleq	r0, r0, r9
   1ce44:	andeq	sl, r0, r0, asr #16
   1ce48:	andeq	sl, r0, ip, asr #19
   1ce4c:	andeq	sl, r0, r0, lsr #19
   1ce50:	andeq	sl, r0, ip, lsr #18
   1ce54:	andeq	r8, r0, r4, ror #13
   1ce58:	andeq	sl, r0, ip, lsl #14
   1ce5c:	andeq	r7, r0, r8, lsr #28
   1ce60:			; <UNDEFINED> instruction: 0x000086bc
   1ce64:	andeq	sl, r0, r8, lsr r6
   1ce68:	andeq	sl, r0, r0, ror #18
   1ce6c:	andeq	sl, r0, ip, ror r6
   1ce70:	andeq	sl, r0, r0, asr r9
   1ce74:	andeq	sl, r0, ip, lsl r9
   1ce78:	andeq	sl, r0, ip, asr #18
   1ce7c:	andeq	sl, r0, r0, lsr r9
   1ce80:	andeq	r7, r0, r4, asr #25
   1ce84:			; <UNDEFINED> instruction: 0x000083b8
   1ce88:	andeq	sl, r0, r4, ror r8
   1ce8c:	andeq	r0, r0, r7, lsr r3
   1ce90:	andeq	sl, r0, r4, lsl #18
   1ce94:	andeq	sl, r0, r4, lsl #18
   1ce98:	andeq	sl, r0, r8, lsl #18
   1ce9c:	andeq	sl, r0, r0, lsl #18
   1cea0:	andeq	sl, r0, r0, lsl #9
   1cea4:	ldrdeq	sl, [r0], -ip
   1cea8:	muleq	r0, r0, fp
   1ceac:	andeq	r8, r0, r8, lsr #6
   1ceb0:	andeq	r8, r0, r4, lsr #7
   1ceb4:			; <UNDEFINED> instruction: 0x0000a8b4
   1ceb8:			; <UNDEFINED> instruction: 0x0000a8b8
   1cebc:	andeq	sl, r0, r8, asr #17
   1cec0:			; <UNDEFINED> instruction: 0x0000a8bc
   1cec4:			; <UNDEFINED> instruction: 0x0000a8b0
   1cec8:	andeq	sl, r0, r4, lsr #17
   1cecc:	muleq	r0, r8, r8
   1ced0:	andeq	sl, r0, r0, lsl #17

0001ced4 <test_add_set_defaults@@Base>:
   1ced4:	push	{r4, r5, r6, lr}
   1ced8:	sub	sp, sp, #8
   1cedc:	mov	r4, r0
   1cee0:	bl	1f0f0 <flatcc_builder_reset@@Base>
   1cee4:	ldr	r1, [pc, #792]	; 1d204 <test_add_set_defaults@@Base+0x330>
   1cee8:	mov	r3, #0
   1ceec:	mov	r0, r4
   1cef0:	mov	r2, r3
   1cef4:	add	r1, pc, r1
   1cef8:	bl	1f8b4 <flatcc_builder_start_buffer@@Base>
   1cefc:	cmp	r0, #0
   1cf00:	bne	1cf10 <test_add_set_defaults@@Base+0x3c>
   1cf04:	mov	r1, #36	; 0x24
   1cf08:	mov	r0, r4
   1cf0c:	bl	206ec <flatcc_builder_start_table@@Base>
   1cf10:	ldr	r1, [pc, #752]	; 1d208 <test_add_set_defaults@@Base+0x334>
   1cf14:	mov	r0, r4
   1cf18:	add	r1, pc, r1
   1cf1c:	bl	21f90 <flatcc_builder_create_string_str@@Base>
   1cf20:	subs	r5, r0, #0
   1cf24:	beq	1cf3c <test_add_set_defaults@@Base+0x68>
   1cf28:	mov	r1, #3
   1cf2c:	mov	r0, r4
   1cf30:	bl	2234c <flatcc_builder_table_add_offset@@Base>
   1cf34:	cmp	r0, #0
   1cf38:	strne	r5, [r0]
   1cf3c:	mov	r3, #2
   1cf40:	mov	r2, r3
   1cf44:	mov	r1, #1
   1cf48:	mov	r0, r4
   1cf4c:	bl	2212c <flatcc_builder_table_add@@Base>
   1cf50:	ldr	r1, [pc, #692]	; 1d20c <test_add_set_defaults@@Base+0x338>
   1cf54:	mov	r2, #1
   1cf58:	add	r1, pc, r1
   1cf5c:	add	r1, r1, #1072	; 0x430
   1cf60:	add	r1, r1, #12
   1cf64:	cmp	r0, #0
   1cf68:	movne	r3, #100	; 0x64
   1cf6c:	strhne	r3, [r0]
   1cf70:	mov	r0, r4
   1cf74:	bl	21038 <flatcc_builder_check_required@@Base>
   1cf78:	cmp	r0, #0
   1cf7c:	beq	1d200 <test_add_set_defaults@@Base+0x32c>
   1cf80:	mov	r0, r4
   1cf84:	bl	210e0 <flatcc_builder_end_table@@Base>
   1cf88:	add	r5, sp, #4
   1cf8c:	mov	r1, r0
   1cf90:	mov	r0, r4
   1cf94:	bl	1f96c <flatcc_builder_end_buffer@@Base>
   1cf98:	mov	r1, r5
   1cf9c:	mov	r0, r4
   1cfa0:	bl	228b4 <flatcc_builder_get_direct_buffer@@Base>
   1cfa4:	cmp	r0, #0
   1cfa8:	beq	1cfbc <test_add_set_defaults@@Base+0xe8>
   1cfac:	ldr	r3, [pc, #604]	; 1d210 <test_add_set_defaults@@Base+0x33c>
   1cfb0:	ldr	r2, [r0, #4]
   1cfb4:	cmp	r2, r3
   1cfb8:	beq	1cfc0 <test_add_set_defaults@@Base+0xec>
   1cfbc:	bl	12a4c <__assert_fail@plt+0x44>
   1cfc0:	ldr	r2, [r0]
   1cfc4:	adds	r3, r0, r2
   1cfc8:	beq	1cfbc <test_add_set_defaults@@Base+0xe8>
   1cfcc:	ldr	r2, [r0, r2]
   1cfd0:	sub	r3, r3, r2
   1cfd4:	ldrh	r2, [r3]
   1cfd8:	cmp	r2, #9
   1cfdc:	bls	1d180 <test_add_set_defaults@@Base+0x2ac>
   1cfe0:	ldrh	r1, [r3, #8]
   1cfe4:	cmp	r1, #0
   1cfe8:	bne	1d19c <test_add_set_defaults@@Base+0x2c8>
   1cfec:	ldrh	r1, [r3, #6]
   1cff0:	cmp	r1, #0
   1cff4:	beq	1d188 <test_add_set_defaults@@Base+0x2b4>
   1cff8:	cmp	r2, #17
   1cffc:	bls	1d00c <test_add_set_defaults@@Base+0x138>
   1d000:	ldrh	r3, [r3, #16]
   1d004:	cmp	r3, #0
   1d008:	bne	1d1b0 <test_add_set_defaults@@Base+0x2dc>
   1d00c:	mov	r0, r4
   1d010:	bl	1f0f0 <flatcc_builder_reset@@Base>
   1d014:	ldr	r1, [pc, #504]	; 1d214 <test_add_set_defaults@@Base+0x340>
   1d018:	mov	r3, #0
   1d01c:	mov	r2, r3
   1d020:	add	r1, pc, r1
   1d024:	mov	r0, r4
   1d028:	bl	1f8b4 <flatcc_builder_start_buffer@@Base>
   1d02c:	cmp	r0, #0
   1d030:	bne	1d040 <test_add_set_defaults@@Base+0x16c>
   1d034:	mov	r1, #36	; 0x24
   1d038:	mov	r0, r4
   1d03c:	bl	206ec <flatcc_builder_start_table@@Base>
   1d040:	ldr	r1, [pc, #464]	; 1d218 <test_add_set_defaults@@Base+0x344>
   1d044:	mov	r0, r4
   1d048:	add	r1, pc, r1
   1d04c:	bl	21f90 <flatcc_builder_create_string_str@@Base>
   1d050:	subs	r6, r0, #0
   1d054:	beq	1d06c <test_add_set_defaults@@Base+0x198>
   1d058:	mov	r1, #3
   1d05c:	mov	r0, r4
   1d060:	bl	2234c <flatcc_builder_table_add_offset@@Base>
   1d064:	cmp	r0, #0
   1d068:	strne	r6, [r0]
   1d06c:	mov	r3, #2
   1d070:	mov	r2, r3
   1d074:	mov	r1, r3
   1d078:	mov	r0, r4
   1d07c:	bl	2212c <flatcc_builder_table_add@@Base>
   1d080:	mov	r1, #1
   1d084:	cmp	r0, #0
   1d088:	movne	r3, #100	; 0x64
   1d08c:	strhne	r3, [r0]
   1d090:	mov	r3, #2
   1d094:	mov	r2, r3
   1d098:	mov	r0, r4
   1d09c:	bl	2212c <flatcc_builder_table_add@@Base>
   1d0a0:	mov	r1, #6
   1d0a4:	cmp	r0, #0
   1d0a8:	movne	r3, #100	; 0x64
   1d0ac:	strhne	r3, [r0]
   1d0b0:	mov	r3, #1
   1d0b4:	mov	r2, r3
   1d0b8:	mov	r0, r4
   1d0bc:	bl	2212c <flatcc_builder_table_add@@Base>
   1d0c0:	ldr	r1, [pc, #340]	; 1d21c <test_add_set_defaults@@Base+0x348>
   1d0c4:	mov	r2, #1
   1d0c8:	add	r1, pc, r1
   1d0cc:	add	r1, r1, #1072	; 0x430
   1d0d0:	add	r1, r1, #12
   1d0d4:	cmp	r0, #0
   1d0d8:	movne	r3, #8
   1d0dc:	strbne	r3, [r0]
   1d0e0:	mov	r0, r4
   1d0e4:	bl	21038 <flatcc_builder_check_required@@Base>
   1d0e8:	cmp	r0, #0
   1d0ec:	beq	1d200 <test_add_set_defaults@@Base+0x32c>
   1d0f0:	mov	r0, r4
   1d0f4:	bl	210e0 <flatcc_builder_end_table@@Base>
   1d0f8:	mov	r1, r0
   1d0fc:	mov	r0, r4
   1d100:	bl	1f96c <flatcc_builder_end_buffer@@Base>
   1d104:	mov	r1, r5
   1d108:	mov	r0, r4
   1d10c:	bl	228b4 <flatcc_builder_get_direct_buffer@@Base>
   1d110:	cmp	r0, #0
   1d114:	beq	1cfbc <test_add_set_defaults@@Base+0xe8>
   1d118:	ldr	r3, [pc, #240]	; 1d210 <test_add_set_defaults@@Base+0x33c>
   1d11c:	ldr	r2, [r0, #4]
   1d120:	cmp	r2, r3
   1d124:	bne	1cfbc <test_add_set_defaults@@Base+0xe8>
   1d128:	ldr	r2, [r0]
   1d12c:	adds	r3, r0, r2
   1d130:	beq	1cfbc <test_add_set_defaults@@Base+0xe8>
   1d134:	ldr	r2, [r0, r2]
   1d138:	sub	r3, r3, r2
   1d13c:	ldrh	r2, [r3]
   1d140:	cmp	r2, #9
   1d144:	bls	1d1c4 <test_add_set_defaults@@Base+0x2f0>
   1d148:	ldrh	r1, [r3, #8]
   1d14c:	cmp	r1, #0
   1d150:	beq	1d1c4 <test_add_set_defaults@@Base+0x2f0>
   1d154:	ldrh	r1, [r3, #6]
   1d158:	cmp	r1, #0
   1d15c:	beq	1d1d8 <test_add_set_defaults@@Base+0x304>
   1d160:	cmp	r2, #17
   1d164:	bls	1d1ec <test_add_set_defaults@@Base+0x318>
   1d168:	ldrh	r3, [r3, #16]
   1d16c:	cmp	r3, #0
   1d170:	movne	r0, #0
   1d174:	beq	1d1ec <test_add_set_defaults@@Base+0x318>
   1d178:	add	sp, sp, #8
   1d17c:	pop	{r4, r5, r6, pc}
   1d180:	cmp	r2, #7
   1d184:	bhi	1cfec <test_add_set_defaults@@Base+0x118>
   1d188:	ldr	r0, [pc, #144]	; 1d220 <test_add_set_defaults@@Base+0x34c>
   1d18c:	add	r0, pc, r0
   1d190:	bl	1296c <puts@plt>
   1d194:	mvn	r0, #0
   1d198:	b	1d178 <test_add_set_defaults@@Base+0x2a4>
   1d19c:	ldr	r0, [pc, #128]	; 1d224 <test_add_set_defaults@@Base+0x350>
   1d1a0:	add	r0, pc, r0
   1d1a4:	bl	1296c <puts@plt>
   1d1a8:	mvn	r0, #0
   1d1ac:	b	1d178 <test_add_set_defaults@@Base+0x2a4>
   1d1b0:	ldr	r0, [pc, #112]	; 1d228 <test_add_set_defaults@@Base+0x354>
   1d1b4:	add	r0, pc, r0
   1d1b8:	bl	1296c <puts@plt>
   1d1bc:	mvn	r0, #0
   1d1c0:	b	1d178 <test_add_set_defaults@@Base+0x2a4>
   1d1c4:	ldr	r0, [pc, #96]	; 1d22c <test_add_set_defaults@@Base+0x358>
   1d1c8:	add	r0, pc, r0
   1d1cc:	bl	1296c <puts@plt>
   1d1d0:	mvn	r0, #0
   1d1d4:	b	1d178 <test_add_set_defaults@@Base+0x2a4>
   1d1d8:	ldr	r0, [pc, #80]	; 1d230 <test_add_set_defaults@@Base+0x35c>
   1d1dc:	add	r0, pc, r0
   1d1e0:	bl	1296c <puts@plt>
   1d1e4:	mvn	r0, #0
   1d1e8:	b	1d178 <test_add_set_defaults@@Base+0x2a4>
   1d1ec:	ldr	r0, [pc, #64]	; 1d234 <test_add_set_defaults@@Base+0x360>
   1d1f0:	add	r0, pc, r0
   1d1f4:	bl	1296c <puts@plt>
   1d1f8:	mvn	r0, #0
   1d1fc:	b	1d178 <test_add_set_defaults@@Base+0x2a4>
   1d200:	bl	130f4 <__assert_fail@plt+0x6ec>
   1d204:	andeq	r8, r0, r8, lsl r5
   1d208:	andeq	r8, r0, ip, lsl r6
   1d20c:	andeq	r7, r0, r8, asr r8
   1d210:	movtpl	r4, #61261	; 0xef4d
   1d214:	andeq	r8, r0, ip, ror #7
   1d218:	andeq	r8, r0, ip, ror #9
   1d21c:	andeq	r7, r0, r8, ror #13
   1d220:	andeq	sl, r0, r8, lsl r5
   1d224:	ldrdeq	sl, [r0], -r8
   1d228:	andeq	sl, r0, r0, lsr #10
   1d22c:	andeq	sl, r0, ip, lsr r5
   1d230:	andeq	sl, r0, ip, asr r5
   1d234:	andeq	sl, r0, r8, lsl #11

0001d238 <test_nested_buffer@@Base>:
   1d238:	push	{r4, r5, r6, lr}
   1d23c:	sub	sp, sp, #8
   1d240:	mov	r4, r0
   1d244:	bl	1f0f0 <flatcc_builder_reset@@Base>
   1d248:	ldr	r1, [pc, #836]	; 1d594 <test_nested_buffer@@Base+0x35c>
   1d24c:	mov	r3, #0
   1d250:	mov	r0, r4
   1d254:	mov	r2, r3
   1d258:	add	r1, pc, r1
   1d25c:	bl	1f8b4 <flatcc_builder_start_buffer@@Base>
   1d260:	ldr	r5, [pc, #816]	; 1d598 <test_nested_buffer@@Base+0x360>
   1d264:	add	r5, pc, r5
   1d268:	cmp	r0, #0
   1d26c:	bne	1d27c <test_nested_buffer@@Base+0x44>
   1d270:	mov	r1, #36	; 0x24
   1d274:	mov	r0, r4
   1d278:	bl	206ec <flatcc_builder_start_table@@Base>
   1d27c:	ldr	r1, [pc, #792]	; 1d59c <test_nested_buffer@@Base+0x364>
   1d280:	mov	r0, r4
   1d284:	add	r1, pc, r1
   1d288:	bl	21f90 <flatcc_builder_create_string_str@@Base>
   1d28c:	subs	r6, r0, #0
   1d290:	beq	1d2a8 <test_nested_buffer@@Base+0x70>
   1d294:	mov	r1, #3
   1d298:	mov	r0, r4
   1d29c:	bl	2234c <flatcc_builder_table_add_offset@@Base>
   1d2a0:	cmp	r0, #0
   1d2a4:	strne	r6, [r0]
   1d2a8:	ldr	r1, [pc, #752]	; 1d5a0 <test_nested_buffer@@Base+0x368>
   1d2ac:	mov	r3, #0
   1d2b0:	mov	r2, r3
   1d2b4:	add	r1, pc, r1
   1d2b8:	mov	r0, r4
   1d2bc:	bl	1f8b4 <flatcc_builder_start_buffer@@Base>
   1d2c0:	cmp	r0, #0
   1d2c4:	bne	1d2d4 <test_nested_buffer@@Base+0x9c>
   1d2c8:	mov	r1, #36	; 0x24
   1d2cc:	mov	r0, r4
   1d2d0:	bl	206ec <flatcc_builder_start_table@@Base>
   1d2d4:	ldr	r1, [pc, #712]	; 1d5a4 <test_nested_buffer@@Base+0x36c>
   1d2d8:	mov	r0, r4
   1d2dc:	add	r1, pc, r1
   1d2e0:	bl	21f90 <flatcc_builder_create_string_str@@Base>
   1d2e4:	subs	r6, r0, #0
   1d2e8:	beq	1d300 <test_nested_buffer@@Base+0xc8>
   1d2ec:	mov	r1, #3
   1d2f0:	mov	r0, r4
   1d2f4:	bl	2234c <flatcc_builder_table_add_offset@@Base>
   1d2f8:	cmp	r0, #0
   1d2fc:	strne	r6, [r0]
   1d300:	ldr	r1, [pc, #672]	; 1d5a8 <test_nested_buffer@@Base+0x370>
   1d304:	mov	r2, #1
   1d308:	add	r1, pc, r1
   1d30c:	add	r1, r1, #1072	; 0x430
   1d310:	add	r1, r1, #12
   1d314:	mov	r0, r4
   1d318:	bl	21038 <flatcc_builder_check_required@@Base>
   1d31c:	cmp	r0, #0
   1d320:	beq	1d568 <test_nested_buffer@@Base+0x330>
   1d324:	mov	r0, r4
   1d328:	bl	210e0 <flatcc_builder_end_table@@Base>
   1d32c:	mov	r1, r0
   1d330:	mov	r0, r4
   1d334:	bl	1f96c <flatcc_builder_end_buffer@@Base>
   1d338:	subs	r6, r0, #0
   1d33c:	beq	1d354 <test_nested_buffer@@Base+0x11c>
   1d340:	mov	r1, #13
   1d344:	mov	r0, r4
   1d348:	bl	2234c <flatcc_builder_table_add_offset@@Base>
   1d34c:	cmp	r0, #0
   1d350:	strne	r6, [r0]
   1d354:	mov	r3, #2
   1d358:	mov	r2, r3
   1d35c:	mov	r1, r3
   1d360:	mov	r0, r4
   1d364:	bl	2212c <flatcc_builder_table_add@@Base>
   1d368:	ldr	r1, [pc, #572]	; 1d5ac <test_nested_buffer@@Base+0x374>
   1d36c:	mov	r2, #1
   1d370:	add	r1, pc, r1
   1d374:	add	r1, r1, #1072	; 0x430
   1d378:	add	r1, r1, #12
   1d37c:	cmp	r0, #0
   1d380:	movne	r3, #10
   1d384:	strhne	r3, [r0]
   1d388:	mov	r0, r4
   1d38c:	bl	21038 <flatcc_builder_check_required@@Base>
   1d390:	cmp	r0, #0
   1d394:	beq	1d568 <test_nested_buffer@@Base+0x330>
   1d398:	mov	r0, r4
   1d39c:	bl	210e0 <flatcc_builder_end_table@@Base>
   1d3a0:	mov	r1, r0
   1d3a4:	mov	r0, r4
   1d3a8:	bl	1f96c <flatcc_builder_end_buffer@@Base>
   1d3ac:	mov	r0, r4
   1d3b0:	add	r1, sp, #4
   1d3b4:	bl	228b4 <flatcc_builder_get_direct_buffer@@Base>
   1d3b8:	ldr	r3, [pc, #496]	; 1d5b0 <test_nested_buffer@@Base+0x378>
   1d3bc:	ldr	r2, [sp, #4]
   1d3c0:	ldr	r3, [r5, r3]
   1d3c4:	ldr	r3, [r3]
   1d3c8:	mov	r4, r0
   1d3cc:	mov	r1, r0
   1d3d0:	ldr	r0, [pc, #476]	; 1d5b4 <test_nested_buffer@@Base+0x37c>
   1d3d4:	add	r0, pc, r0
   1d3d8:	bl	13540 <_start@@Base+0x154>
   1d3dc:	cmp	r4, #0
   1d3e0:	beq	1d3f4 <test_nested_buffer@@Base+0x1bc>
   1d3e4:	ldr	r3, [pc, #460]	; 1d5b8 <test_nested_buffer@@Base+0x380>
   1d3e8:	ldr	r2, [r4, #4]
   1d3ec:	cmp	r2, r3
   1d3f0:	beq	1d3f8 <test_nested_buffer@@Base+0x1c0>
   1d3f4:	bl	12d14 <__assert_fail@plt+0x30c>
   1d3f8:	ldr	r3, [r4]
   1d3fc:	adds	r5, r4, r3
   1d400:	beq	1d3f4 <test_nested_buffer@@Base+0x1bc>
   1d404:	ldr	r4, [r4, r3]
   1d408:	sub	r4, r5, r4
   1d40c:	ldrh	r6, [r4]
   1d410:	cmp	r6, #11
   1d414:	bhi	1d43c <test_nested_buffer@@Base+0x204>
   1d418:	ldr	r3, [pc, #412]	; 1d5bc <test_nested_buffer@@Base+0x384>
   1d41c:	ldr	r1, [pc, #412]	; 1d5c0 <test_nested_buffer@@Base+0x388>
   1d420:	ldr	r0, [pc, #412]	; 1d5c4 <test_nested_buffer@@Base+0x38c>
   1d424:	add	r3, pc, r3
   1d428:	ldr	r2, [pc, #408]	; 1d5c8 <test_nested_buffer@@Base+0x390>
   1d42c:	add	r3, r3, #580	; 0x244
   1d430:	add	r1, pc, r1
   1d434:	add	r0, pc, r0
   1d438:	bl	12a08 <__assert_fail@plt>
   1d43c:	ldrh	r0, [r4, #10]
   1d440:	cmp	r0, #0
   1d444:	beq	1d418 <test_nested_buffer@@Base+0x1e0>
   1d448:	ldr	r3, [r5, r0]
   1d44c:	ldr	r1, [pc, #376]	; 1d5cc <test_nested_buffer@@Base+0x394>
   1d450:	add	r3, r3, #4
   1d454:	add	r0, r5, r0
   1d458:	add	r0, r0, r3
   1d45c:	add	r1, pc, r1
   1d460:	bl	1290c <strcmp@plt>
   1d464:	cmp	r0, #0
   1d468:	bne	1d540 <test_nested_buffer@@Base+0x308>
   1d46c:	cmp	r6, #31
   1d470:	bls	1d4a8 <test_nested_buffer@@Base+0x270>
   1d474:	ldrh	r3, [r4, #30]
   1d478:	cmp	r3, #0
   1d47c:	beq	1d4a4 <test_nested_buffer@@Base+0x26c>
   1d480:	ldr	r2, [r5, r3]
   1d484:	add	r3, r5, r3
   1d488:	add	r2, r2, #4
   1d48c:	adds	r0, r3, r2
   1d490:	beq	1d4a4 <test_nested_buffer@@Base+0x26c>
   1d494:	ldr	r1, [pc, #284]	; 1d5b8 <test_nested_buffer@@Base+0x380>
   1d498:	ldr	ip, [r0, #4]
   1d49c:	cmp	ip, r1
   1d4a0:	beq	1d518 <test_nested_buffer@@Base+0x2e0>
   1d4a4:	mov	r0, #0
   1d4a8:	ldrh	r3, [r4, #8]
   1d4ac:	cmp	r3, #0
   1d4b0:	beq	1d52c <test_nested_buffer@@Base+0x2f4>
   1d4b4:	ldrsh	r3, [r5, r3]
   1d4b8:	cmp	r3, #10
   1d4bc:	bne	1d52c <test_nested_buffer@@Base+0x2f4>
   1d4c0:	cmp	r0, #0
   1d4c4:	beq	1d3f4 <test_nested_buffer@@Base+0x1bc>
   1d4c8:	ldr	r3, [r0]
   1d4cc:	sub	r3, r0, r3
   1d4d0:	ldrh	r2, [r3]
   1d4d4:	cmp	r2, #11
   1d4d8:	bls	1d418 <test_nested_buffer@@Base+0x1e0>
   1d4dc:	ldrh	r2, [r3, #10]
   1d4e0:	cmp	r2, #0
   1d4e4:	beq	1d418 <test_nested_buffer@@Base+0x1e0>
   1d4e8:	ldr	r3, [r0, r2]
   1d4ec:	add	r0, r0, r2
   1d4f0:	add	r3, r3, #4
   1d4f4:	adds	r0, r0, r3
   1d4f8:	beq	1d56c <test_nested_buffer@@Base+0x334>
   1d4fc:	ldr	r1, [pc, #204]	; 1d5d0 <test_nested_buffer@@Base+0x398>
   1d500:	add	r1, pc, r1
   1d504:	bl	1290c <strcmp@plt>
   1d508:	cmp	r0, #0
   1d50c:	bne	1d554 <test_nested_buffer@@Base+0x31c>
   1d510:	add	sp, sp, #8
   1d514:	pop	{r4, r5, r6, pc}
   1d518:	ldr	r3, [r3, r2]
   1d51c:	add	r0, r0, r3
   1d520:	ldrh	r3, [r4, #8]
   1d524:	cmp	r3, #0
   1d528:	bne	1d4b4 <test_nested_buffer@@Base+0x27c>
   1d52c:	ldr	r0, [pc, #160]	; 1d5d4 <test_nested_buffer@@Base+0x39c>
   1d530:	add	r0, pc, r0
   1d534:	bl	1296c <puts@plt>
   1d538:	mvn	r0, #0
   1d53c:	b	1d510 <test_nested_buffer@@Base+0x2d8>
   1d540:	ldr	r0, [pc, #144]	; 1d5d8 <test_nested_buffer@@Base+0x3a0>
   1d544:	add	r0, pc, r0
   1d548:	bl	1296c <puts@plt>
   1d54c:	mvn	r0, #0
   1d550:	b	1d510 <test_nested_buffer@@Base+0x2d8>
   1d554:	ldr	r0, [pc, #128]	; 1d5dc <test_nested_buffer@@Base+0x3a4>
   1d558:	add	r0, pc, r0
   1d55c:	bl	1296c <puts@plt>
   1d560:	mvn	r0, #0
   1d564:	b	1d510 <test_nested_buffer@@Base+0x2d8>
   1d568:	bl	130f4 <__assert_fail@plt+0x6ec>
   1d56c:	ldr	r3, [pc, #108]	; 1d5e0 <test_nested_buffer@@Base+0x3a8>
   1d570:	ldr	r1, [pc, #108]	; 1d5e4 <test_nested_buffer@@Base+0x3ac>
   1d574:	add	r3, pc, r3
   1d578:	ldr	r0, [pc, #104]	; 1d5e8 <test_nested_buffer@@Base+0x3b0>
   1d57c:	add	r3, r3, #1632	; 0x660
   1d580:	ldr	r2, [pc, #100]	; 1d5ec <test_nested_buffer@@Base+0x3b4>
   1d584:	add	r3, r3, #4
   1d588:	add	r1, pc, r1
   1d58c:	add	r0, pc, r0
   1d590:	bl	12a08 <__assert_fail@plt>
   1d594:			; <UNDEFINED> instruction: 0x000081b4
   1d598:	muleq	r1, r4, sp
   1d59c:			; <UNDEFINED> instruction: 0x000082b0
   1d5a0:	andeq	r8, r0, r8, asr r1
   1d5a4:	ldrdeq	sl, [r0], -r4
   1d5a8:	andeq	r7, r0, r8, lsr #9
   1d5ac:	andeq	r7, r0, r0, asr #8
   1d5b0:	andeq	r0, r0, r8, rrx
   1d5b4:	andeq	sl, r0, ip, ror #7
   1d5b8:	movtpl	r4, #61261	; 0xef4d
   1d5bc:	andeq	r7, r0, ip, lsl #7
   1d5c0:	andeq	r7, r0, r8, lsl #21
   1d5c4:	andeq	r7, r0, r0, ror #23
   1d5c8:			; <UNDEFINED> instruction: 0x000002bb
   1d5cc:	ldrdeq	r8, [r0], -r8	; <UNPREDICTABLE>
   1d5d0:			; <UNDEFINED> instruction: 0x0000a2b0
   1d5d4:	andeq	sl, r0, r0, asr #5
   1d5d8:	muleq	r0, r0, r2
   1d5dc:	ldrdeq	sl, [r0], -r8
   1d5e0:	andeq	r7, r0, ip, lsr r2
   1d5e4:	andeq	r8, r0, r8, asr #11
   1d5e8:	andeq	sl, r0, r8, lsl #5
   1d5ec:	andeq	r0, r0, ip, lsl #17

0001d5f0 <test_nested_buffer_first@@Base>:
   1d5f0:	push	{r4, r5, r6, lr}
   1d5f4:	sub	sp, sp, #8
   1d5f8:	mov	r4, r0
   1d5fc:	bl	1f0f0 <flatcc_builder_reset@@Base>
   1d600:	ldr	r1, [pc, #836]	; 1d94c <test_nested_buffer_first@@Base+0x35c>
   1d604:	mov	r3, #0
   1d608:	mov	r0, r4
   1d60c:	mov	r2, r3
   1d610:	add	r1, pc, r1
   1d614:	bl	1f8b4 <flatcc_builder_start_buffer@@Base>
   1d618:	ldr	r5, [pc, #816]	; 1d950 <test_nested_buffer_first@@Base+0x360>
   1d61c:	add	r5, pc, r5
   1d620:	cmp	r0, #0
   1d624:	bne	1d634 <test_nested_buffer_first@@Base+0x44>
   1d628:	mov	r1, #36	; 0x24
   1d62c:	mov	r0, r4
   1d630:	bl	206ec <flatcc_builder_start_table@@Base>
   1d634:	ldr	r1, [pc, #792]	; 1d954 <test_nested_buffer_first@@Base+0x364>
   1d638:	mov	r3, #0
   1d63c:	mov	r2, r3
   1d640:	add	r1, pc, r1
   1d644:	mov	r0, r4
   1d648:	bl	1f8b4 <flatcc_builder_start_buffer@@Base>
   1d64c:	cmp	r0, #0
   1d650:	bne	1d660 <test_nested_buffer_first@@Base+0x70>
   1d654:	mov	r1, #36	; 0x24
   1d658:	mov	r0, r4
   1d65c:	bl	206ec <flatcc_builder_start_table@@Base>
   1d660:	ldr	r1, [pc, #752]	; 1d958 <test_nested_buffer_first@@Base+0x368>
   1d664:	mov	r0, r4
   1d668:	add	r1, pc, r1
   1d66c:	bl	21f90 <flatcc_builder_create_string_str@@Base>
   1d670:	subs	r6, r0, #0
   1d674:	beq	1d68c <test_nested_buffer_first@@Base+0x9c>
   1d678:	mov	r1, #3
   1d67c:	mov	r0, r4
   1d680:	bl	2234c <flatcc_builder_table_add_offset@@Base>
   1d684:	cmp	r0, #0
   1d688:	strne	r6, [r0]
   1d68c:	ldr	r1, [pc, #712]	; 1d95c <test_nested_buffer_first@@Base+0x36c>
   1d690:	mov	r2, #1
   1d694:	add	r1, pc, r1
   1d698:	add	r1, r1, #1072	; 0x430
   1d69c:	add	r1, r1, #12
   1d6a0:	mov	r0, r4
   1d6a4:	bl	21038 <flatcc_builder_check_required@@Base>
   1d6a8:	cmp	r0, #0
   1d6ac:	beq	1d920 <test_nested_buffer_first@@Base+0x330>
   1d6b0:	mov	r0, r4
   1d6b4:	bl	210e0 <flatcc_builder_end_table@@Base>
   1d6b8:	mov	r1, r0
   1d6bc:	mov	r0, r4
   1d6c0:	bl	1f96c <flatcc_builder_end_buffer@@Base>
   1d6c4:	subs	r6, r0, #0
   1d6c8:	beq	1d6e0 <test_nested_buffer_first@@Base+0xf0>
   1d6cc:	mov	r1, #13
   1d6d0:	mov	r0, r4
   1d6d4:	bl	2234c <flatcc_builder_table_add_offset@@Base>
   1d6d8:	cmp	r0, #0
   1d6dc:	strne	r6, [r0]
   1d6e0:	mov	r3, #2
   1d6e4:	mov	r1, r3
   1d6e8:	mov	r2, r3
   1d6ec:	mov	r0, r4
   1d6f0:	bl	2212c <flatcc_builder_table_add@@Base>
   1d6f4:	ldr	r1, [pc, #612]	; 1d960 <test_nested_buffer_first@@Base+0x370>
   1d6f8:	add	r1, pc, r1
   1d6fc:	cmp	r0, #0
   1d700:	movne	r3, #10
   1d704:	strhne	r3, [r0]
   1d708:	mov	r0, r4
   1d70c:	bl	21f90 <flatcc_builder_create_string_str@@Base>
   1d710:	subs	r6, r0, #0
   1d714:	beq	1d72c <test_nested_buffer_first@@Base+0x13c>
   1d718:	mov	r1, #3
   1d71c:	mov	r0, r4
   1d720:	bl	2234c <flatcc_builder_table_add_offset@@Base>
   1d724:	cmp	r0, #0
   1d728:	strne	r6, [r0]
   1d72c:	ldr	r1, [pc, #560]	; 1d964 <test_nested_buffer_first@@Base+0x374>
   1d730:	mov	r2, #1
   1d734:	add	r1, pc, r1
   1d738:	add	r1, r1, #1072	; 0x430
   1d73c:	add	r1, r1, #12
   1d740:	mov	r0, r4
   1d744:	bl	21038 <flatcc_builder_check_required@@Base>
   1d748:	cmp	r0, #0
   1d74c:	beq	1d920 <test_nested_buffer_first@@Base+0x330>
   1d750:	mov	r0, r4
   1d754:	bl	210e0 <flatcc_builder_end_table@@Base>
   1d758:	mov	r1, r0
   1d75c:	mov	r0, r4
   1d760:	bl	1f96c <flatcc_builder_end_buffer@@Base>
   1d764:	mov	r0, r4
   1d768:	add	r1, sp, #4
   1d76c:	bl	228b4 <flatcc_builder_get_direct_buffer@@Base>
   1d770:	ldr	r3, [pc, #496]	; 1d968 <test_nested_buffer_first@@Base+0x378>
   1d774:	ldr	r2, [sp, #4]
   1d778:	ldr	r3, [r5, r3]
   1d77c:	ldr	r3, [r3]
   1d780:	mov	r4, r0
   1d784:	mov	r1, r0
   1d788:	ldr	r0, [pc, #476]	; 1d96c <test_nested_buffer_first@@Base+0x37c>
   1d78c:	add	r0, pc, r0
   1d790:	bl	13540 <_start@@Base+0x154>
   1d794:	cmp	r4, #0
   1d798:	beq	1d7ac <test_nested_buffer_first@@Base+0x1bc>
   1d79c:	ldr	r3, [pc, #460]	; 1d970 <test_nested_buffer_first@@Base+0x380>
   1d7a0:	ldr	r2, [r4, #4]
   1d7a4:	cmp	r2, r3
   1d7a8:	beq	1d7b0 <test_nested_buffer_first@@Base+0x1c0>
   1d7ac:	bl	12d14 <__assert_fail@plt+0x30c>
   1d7b0:	ldr	r3, [r4]
   1d7b4:	adds	r5, r4, r3
   1d7b8:	beq	1d7ac <test_nested_buffer_first@@Base+0x1bc>
   1d7bc:	ldr	r4, [r4, r3]
   1d7c0:	sub	r4, r5, r4
   1d7c4:	ldrh	r6, [r4]
   1d7c8:	cmp	r6, #11
   1d7cc:	bhi	1d7f4 <test_nested_buffer_first@@Base+0x204>
   1d7d0:	ldr	r3, [pc, #412]	; 1d974 <test_nested_buffer_first@@Base+0x384>
   1d7d4:	ldr	r1, [pc, #412]	; 1d978 <test_nested_buffer_first@@Base+0x388>
   1d7d8:	ldr	r0, [pc, #412]	; 1d97c <test_nested_buffer_first@@Base+0x38c>
   1d7dc:	add	r3, pc, r3
   1d7e0:	ldr	r2, [pc, #408]	; 1d980 <test_nested_buffer_first@@Base+0x390>
   1d7e4:	add	r3, r3, #580	; 0x244
   1d7e8:	add	r1, pc, r1
   1d7ec:	add	r0, pc, r0
   1d7f0:	bl	12a08 <__assert_fail@plt>
   1d7f4:	ldrh	r0, [r4, #10]
   1d7f8:	cmp	r0, #0
   1d7fc:	beq	1d7d0 <test_nested_buffer_first@@Base+0x1e0>
   1d800:	ldr	r3, [r5, r0]
   1d804:	ldr	r1, [pc, #376]	; 1d984 <test_nested_buffer_first@@Base+0x394>
   1d808:	add	r3, r3, #4
   1d80c:	add	r0, r5, r0
   1d810:	add	r0, r0, r3
   1d814:	add	r1, pc, r1
   1d818:	bl	1290c <strcmp@plt>
   1d81c:	cmp	r0, #0
   1d820:	bne	1d8f8 <test_nested_buffer_first@@Base+0x308>
   1d824:	cmp	r6, #31
   1d828:	bls	1d860 <test_nested_buffer_first@@Base+0x270>
   1d82c:	ldrh	r3, [r4, #30]
   1d830:	cmp	r3, #0
   1d834:	beq	1d85c <test_nested_buffer_first@@Base+0x26c>
   1d838:	ldr	r2, [r5, r3]
   1d83c:	add	r3, r5, r3
   1d840:	add	r2, r2, #4
   1d844:	adds	r0, r3, r2
   1d848:	beq	1d85c <test_nested_buffer_first@@Base+0x26c>
   1d84c:	ldr	r1, [pc, #284]	; 1d970 <test_nested_buffer_first@@Base+0x380>
   1d850:	ldr	ip, [r0, #4]
   1d854:	cmp	ip, r1
   1d858:	beq	1d8d0 <test_nested_buffer_first@@Base+0x2e0>
   1d85c:	mov	r0, #0
   1d860:	ldrh	r3, [r4, #8]
   1d864:	cmp	r3, #0
   1d868:	beq	1d8e4 <test_nested_buffer_first@@Base+0x2f4>
   1d86c:	ldrsh	r3, [r5, r3]
   1d870:	cmp	r3, #10
   1d874:	bne	1d8e4 <test_nested_buffer_first@@Base+0x2f4>
   1d878:	cmp	r0, #0
   1d87c:	beq	1d7ac <test_nested_buffer_first@@Base+0x1bc>
   1d880:	ldr	r3, [r0]
   1d884:	sub	r3, r0, r3
   1d888:	ldrh	r2, [r3]
   1d88c:	cmp	r2, #11
   1d890:	bls	1d7d0 <test_nested_buffer_first@@Base+0x1e0>
   1d894:	ldrh	r2, [r3, #10]
   1d898:	cmp	r2, #0
   1d89c:	beq	1d7d0 <test_nested_buffer_first@@Base+0x1e0>
   1d8a0:	ldr	r3, [r0, r2]
   1d8a4:	add	r0, r0, r2
   1d8a8:	add	r3, r3, #4
   1d8ac:	adds	r0, r0, r3
   1d8b0:	beq	1d924 <test_nested_buffer_first@@Base+0x334>
   1d8b4:	ldr	r1, [pc, #204]	; 1d988 <test_nested_buffer_first@@Base+0x398>
   1d8b8:	add	r1, pc, r1
   1d8bc:	bl	1290c <strcmp@plt>
   1d8c0:	cmp	r0, #0
   1d8c4:	bne	1d90c <test_nested_buffer_first@@Base+0x31c>
   1d8c8:	add	sp, sp, #8
   1d8cc:	pop	{r4, r5, r6, pc}
   1d8d0:	ldr	r3, [r3, r2]
   1d8d4:	add	r0, r0, r3
   1d8d8:	ldrh	r3, [r4, #8]
   1d8dc:	cmp	r3, #0
   1d8e0:	bne	1d86c <test_nested_buffer_first@@Base+0x27c>
   1d8e4:	ldr	r0, [pc, #160]	; 1d98c <test_nested_buffer_first@@Base+0x39c>
   1d8e8:	add	r0, pc, r0
   1d8ec:	bl	1296c <puts@plt>
   1d8f0:	mvn	r0, #0
   1d8f4:	b	1d8c8 <test_nested_buffer_first@@Base+0x2d8>
   1d8f8:	ldr	r0, [pc, #144]	; 1d990 <test_nested_buffer_first@@Base+0x3a0>
   1d8fc:	add	r0, pc, r0
   1d900:	bl	1296c <puts@plt>
   1d904:	mvn	r0, #0
   1d908:	b	1d8c8 <test_nested_buffer_first@@Base+0x2d8>
   1d90c:	ldr	r0, [pc, #128]	; 1d994 <test_nested_buffer_first@@Base+0x3a4>
   1d910:	add	r0, pc, r0
   1d914:	bl	1296c <puts@plt>
   1d918:	mvn	r0, #0
   1d91c:	b	1d8c8 <test_nested_buffer_first@@Base+0x2d8>
   1d920:	bl	130f4 <__assert_fail@plt+0x6ec>
   1d924:	ldr	r3, [pc, #108]	; 1d998 <test_nested_buffer_first@@Base+0x3a8>
   1d928:	ldr	r1, [pc, #108]	; 1d99c <test_nested_buffer_first@@Base+0x3ac>
   1d92c:	add	r3, pc, r3
   1d930:	ldr	r0, [pc, #104]	; 1d9a0 <test_nested_buffer_first@@Base+0x3b0>
   1d934:	add	r3, r3, #1648	; 0x670
   1d938:	ldr	r2, [pc, #100]	; 1d9a4 <test_nested_buffer_first@@Base+0x3b4>
   1d93c:	add	r3, r3, #8
   1d940:	add	r1, pc, r1
   1d944:	add	r0, pc, r0
   1d948:	bl	12a08 <__assert_fail@plt>
   1d94c:	strdeq	r7, [r0], -ip
   1d950:	ldrdeq	fp, [r1], -ip
   1d954:	andeq	r7, r0, ip, asr #27
   1d958:	andeq	sl, r0, r8, asr #2
   1d95c:	andeq	r7, r0, ip, lsl r1
   1d960:	andeq	r7, r0, ip, lsr lr
   1d964:	andeq	r7, r0, ip, ror r0
   1d968:	andeq	r0, r0, r8, rrx
   1d96c:	andeq	sl, r0, r4, lsr r0
   1d970:	movtpl	r4, #61261	; 0xef4d
   1d974:	ldrdeq	r6, [r0], -r4
   1d978:	ldrdeq	r7, [r0], -r0
   1d97c:	andeq	r7, r0, r8, lsr #16
   1d980:			; <UNDEFINED> instruction: 0x000002bb
   1d984:	andeq	r7, r0, r0, lsr #26
   1d988:	strdeq	r9, [r0], -r8
   1d98c:	andeq	r9, r0, r8, lsl #30
   1d990:	ldrdeq	r9, [r0], -r8
   1d994:	andeq	r9, r0, r0, lsr #30
   1d998:	andeq	r6, r0, r4, lsl #29
   1d99c:	andeq	r8, r0, r0, lsl r2
   1d9a0:	ldrdeq	r9, [r0], -r0
   1d9a4:	andeq	r0, r0, r1, asr #17

0001d9a8 <test_nested_buffer_using_nest@@Base>:
   1d9a8:	push	{r4, r5, r6, r7, lr}
   1d9ac:	sub	sp, sp, #1040	; 0x410
   1d9b0:	sub	sp, sp, #4
   1d9b4:	mov	r4, r0
   1d9b8:	bl	1f0f0 <flatcc_builder_reset@@Base>
   1d9bc:	ldr	r1, [pc, #1020]	; 1ddc0 <test_nested_buffer_using_nest@@Base+0x418>
   1d9c0:	mov	r3, #0
   1d9c4:	mov	r0, r4
   1d9c8:	mov	r2, r3
   1d9cc:	add	r1, pc, r1
   1d9d0:	bl	1f8b4 <flatcc_builder_start_buffer@@Base>
   1d9d4:	ldr	r5, [pc, #1000]	; 1ddc4 <test_nested_buffer_using_nest@@Base+0x41c>
   1d9d8:	add	r5, pc, r5
   1d9dc:	cmp	r0, #0
   1d9e0:	bne	1d9f0 <test_nested_buffer_using_nest@@Base+0x48>
   1d9e4:	mov	r1, #36	; 0x24
   1d9e8:	mov	r0, r4
   1d9ec:	bl	206ec <flatcc_builder_start_table@@Base>
   1d9f0:	ldr	r1, [pc, #976]	; 1ddc8 <test_nested_buffer_using_nest@@Base+0x420>
   1d9f4:	mov	r0, r4
   1d9f8:	add	r1, pc, r1
   1d9fc:	bl	21f90 <flatcc_builder_create_string_str@@Base>
   1da00:	subs	r6, r0, #0
   1da04:	beq	1da1c <test_nested_buffer_using_nest@@Base+0x74>
   1da08:	mov	r1, #3
   1da0c:	mov	r0, r4
   1da10:	bl	2234c <flatcc_builder_table_add_offset@@Base>
   1da14:	cmp	r0, #0
   1da18:	strne	r6, [r0]
   1da1c:	mov	r3, #2
   1da20:	mov	r2, r3
   1da24:	mov	r1, #1
   1da28:	mov	r0, r4
   1da2c:	bl	2212c <flatcc_builder_table_add@@Base>
   1da30:	ldr	r1, [pc, #916]	; 1ddcc <test_nested_buffer_using_nest@@Base+0x424>
   1da34:	mov	r2, #1
   1da38:	add	r1, pc, r1
   1da3c:	add	r1, r1, #1072	; 0x430
   1da40:	add	r1, r1, #12
   1da44:	cmp	r0, #0
   1da48:	movne	r3, #42	; 0x2a
   1da4c:	strhne	r3, [r0]
   1da50:	mov	r0, r4
   1da54:	bl	21038 <flatcc_builder_check_required@@Base>
   1da58:	cmp	r0, #0
   1da5c:	beq	1dd94 <test_nested_buffer_using_nest@@Base+0x3ec>
   1da60:	mov	r0, r4
   1da64:	bl	210e0 <flatcc_builder_end_table@@Base>
   1da68:	add	r6, sp, #16
   1da6c:	mov	r1, r0
   1da70:	mov	r0, r4
   1da74:	bl	1f96c <flatcc_builder_end_buffer@@Base>
   1da78:	mov	r0, r4
   1da7c:	bl	22818 <flatcc_builder_get_buffer_size@@Base>
   1da80:	mov	r1, r6
   1da84:	mov	r2, #1024	; 0x400
   1da88:	mov	r7, r0
   1da8c:	mov	r0, r4
   1da90:	bl	228f8 <flatcc_builder_copy_buffer@@Base>
   1da94:	cmp	r0, #0
   1da98:	beq	1dd80 <test_nested_buffer_using_nest@@Base+0x3d8>
   1da9c:	mov	r0, r4
   1daa0:	bl	1f0f0 <flatcc_builder_reset@@Base>
   1daa4:	ldr	r1, [pc, #804]	; 1ddd0 <test_nested_buffer_using_nest@@Base+0x428>
   1daa8:	mov	r3, #0
   1daac:	mov	r2, r3
   1dab0:	add	r1, pc, r1
   1dab4:	mov	r0, r4
   1dab8:	bl	1f8b4 <flatcc_builder_start_buffer@@Base>
   1dabc:	cmp	r0, #0
   1dac0:	bne	1dad0 <test_nested_buffer_using_nest@@Base+0x128>
   1dac4:	mov	r1, #36	; 0x24
   1dac8:	mov	r0, r4
   1dacc:	bl	206ec <flatcc_builder_start_table@@Base>
   1dad0:	mvn	r1, #0
   1dad4:	mov	r3, #8
   1dad8:	mov	r2, r7
   1dadc:	str	r1, [sp, #4]
   1dae0:	str	r3, [sp]
   1dae4:	mov	r1, r6
   1dae8:	mov	r3, #1
   1daec:	mov	r0, r4
   1daf0:	bl	212b0 <flatcc_builder_create_vector@@Base>
   1daf4:	subs	r7, r0, #0
   1daf8:	beq	1db10 <test_nested_buffer_using_nest@@Base+0x168>
   1dafc:	mov	r1, #13
   1db00:	mov	r0, r4
   1db04:	bl	2234c <flatcc_builder_table_add_offset@@Base>
   1db08:	cmp	r0, #0
   1db0c:	strne	r7, [r0]
   1db10:	mov	r3, #2
   1db14:	mov	r1, r3
   1db18:	mov	r2, r3
   1db1c:	mov	r0, r4
   1db20:	bl	2212c <flatcc_builder_table_add@@Base>
   1db24:	ldr	r1, [pc, #680]	; 1ddd4 <test_nested_buffer_using_nest@@Base+0x42c>
   1db28:	add	r1, pc, r1
   1db2c:	cmp	r0, #0
   1db30:	movne	r3, #10
   1db34:	strhne	r3, [r0]
   1db38:	mov	r0, r4
   1db3c:	bl	21f90 <flatcc_builder_create_string_str@@Base>
   1db40:	subs	r7, r0, #0
   1db44:	beq	1db5c <test_nested_buffer_using_nest@@Base+0x1b4>
   1db48:	mov	r1, #3
   1db4c:	mov	r0, r4
   1db50:	bl	2234c <flatcc_builder_table_add_offset@@Base>
   1db54:	cmp	r0, #0
   1db58:	strne	r7, [r0]
   1db5c:	ldr	r1, [pc, #628]	; 1ddd8 <test_nested_buffer_using_nest@@Base+0x430>
   1db60:	mov	r2, #1
   1db64:	add	r1, pc, r1
   1db68:	add	r1, r1, #1072	; 0x430
   1db6c:	add	r1, r1, #12
   1db70:	mov	r0, r4
   1db74:	bl	21038 <flatcc_builder_check_required@@Base>
   1db78:	cmp	r0, #0
   1db7c:	beq	1dd94 <test_nested_buffer_using_nest@@Base+0x3ec>
   1db80:	mov	r0, r4
   1db84:	bl	210e0 <flatcc_builder_end_table@@Base>
   1db88:	mov	r1, r0
   1db8c:	mov	r0, r4
   1db90:	bl	1f96c <flatcc_builder_end_buffer@@Base>
   1db94:	sub	r1, r6, #4
   1db98:	mov	r0, r4
   1db9c:	bl	228b4 <flatcc_builder_get_direct_buffer@@Base>
   1dba0:	ldr	r3, [pc, #564]	; 1dddc <test_nested_buffer_using_nest@@Base+0x434>
   1dba4:	ldr	r2, [sp, #12]
   1dba8:	ldr	r3, [r5, r3]
   1dbac:	ldr	r3, [r3]
   1dbb0:	mov	r4, r0
   1dbb4:	mov	r1, r0
   1dbb8:	ldr	r0, [pc, #544]	; 1dde0 <test_nested_buffer_using_nest@@Base+0x438>
   1dbbc:	add	r0, pc, r0
   1dbc0:	bl	13540 <_start@@Base+0x154>
   1dbc4:	cmp	r4, #0
   1dbc8:	beq	1dbdc <test_nested_buffer_using_nest@@Base+0x234>
   1dbcc:	ldr	r3, [pc, #528]	; 1dde4 <test_nested_buffer_using_nest@@Base+0x43c>
   1dbd0:	ldr	r2, [r4, #4]
   1dbd4:	cmp	r2, r3
   1dbd8:	beq	1dbe0 <test_nested_buffer_using_nest@@Base+0x238>
   1dbdc:	bl	12d14 <__assert_fail@plt+0x30c>
   1dbe0:	ldr	r3, [r4]
   1dbe4:	adds	r6, r4, r3
   1dbe8:	beq	1dbdc <test_nested_buffer_using_nest@@Base+0x234>
   1dbec:	ldr	r5, [r4, r3]
   1dbf0:	sub	r5, r6, r5
   1dbf4:	ldrh	r7, [r5]
   1dbf8:	cmp	r7, #11
   1dbfc:	bhi	1dc24 <test_nested_buffer_using_nest@@Base+0x27c>
   1dc00:	ldr	r3, [pc, #480]	; 1dde8 <test_nested_buffer_using_nest@@Base+0x440>
   1dc04:	ldr	r1, [pc, #480]	; 1ddec <test_nested_buffer_using_nest@@Base+0x444>
   1dc08:	ldr	r0, [pc, #480]	; 1ddf0 <test_nested_buffer_using_nest@@Base+0x448>
   1dc0c:	add	r3, pc, r3
   1dc10:	ldr	r2, [pc, #476]	; 1ddf4 <test_nested_buffer_using_nest@@Base+0x44c>
   1dc14:	add	r3, r3, #580	; 0x244
   1dc18:	add	r1, pc, r1
   1dc1c:	add	r0, pc, r0
   1dc20:	bl	12a08 <__assert_fail@plt>
   1dc24:	ldrh	r0, [r5, #10]
   1dc28:	cmp	r0, #0
   1dc2c:	beq	1dc00 <test_nested_buffer_using_nest@@Base+0x258>
   1dc30:	ldr	r3, [r6, r0]
   1dc34:	ldr	r1, [pc, #444]	; 1ddf8 <test_nested_buffer_using_nest@@Base+0x450>
   1dc38:	add	r3, r3, #4
   1dc3c:	add	r0, r6, r0
   1dc40:	add	r0, r0, r3
   1dc44:	add	r1, pc, r1
   1dc48:	bl	1290c <strcmp@plt>
   1dc4c:	subs	r4, r0, #0
   1dc50:	bne	1dd44 <test_nested_buffer_using_nest@@Base+0x39c>
   1dc54:	cmp	r7, #31
   1dc58:	bls	1dc90 <test_nested_buffer_using_nest@@Base+0x2e8>
   1dc5c:	ldrh	r3, [r5, #30]
   1dc60:	cmp	r3, #0
   1dc64:	beq	1dc8c <test_nested_buffer_using_nest@@Base+0x2e4>
   1dc68:	ldr	r2, [r6, r3]
   1dc6c:	add	r3, r6, r3
   1dc70:	add	r2, r2, #4
   1dc74:	adds	r4, r3, r2
   1dc78:	beq	1dc8c <test_nested_buffer_using_nest@@Base+0x2e4>
   1dc7c:	ldr	r1, [pc, #352]	; 1dde4 <test_nested_buffer_using_nest@@Base+0x43c>
   1dc80:	ldr	r0, [r4, #4]
   1dc84:	cmp	r0, r1
   1dc88:	beq	1dd1c <test_nested_buffer_using_nest@@Base+0x374>
   1dc8c:	mov	r4, #0
   1dc90:	ldrh	r3, [r5, #8]
   1dc94:	cmp	r3, #0
   1dc98:	beq	1dd30 <test_nested_buffer_using_nest@@Base+0x388>
   1dc9c:	ldrsh	r3, [r6, r3]
   1dca0:	cmp	r3, #10
   1dca4:	bne	1dd30 <test_nested_buffer_using_nest@@Base+0x388>
   1dca8:	cmp	r4, #0
   1dcac:	beq	1dbdc <test_nested_buffer_using_nest@@Base+0x234>
   1dcb0:	ldr	r5, [r4]
   1dcb4:	sub	r5, r4, r5
   1dcb8:	ldrh	r3, [r5]
   1dcbc:	cmp	r3, #11
   1dcc0:	bls	1dc00 <test_nested_buffer_using_nest@@Base+0x258>
   1dcc4:	ldrh	r0, [r5, #10]
   1dcc8:	cmp	r0, #0
   1dccc:	beq	1dc00 <test_nested_buffer_using_nest@@Base+0x258>
   1dcd0:	ldr	r3, [r4, r0]
   1dcd4:	add	r0, r4, r0
   1dcd8:	add	r3, r3, #4
   1dcdc:	adds	r0, r0, r3
   1dce0:	beq	1dd98 <test_nested_buffer_using_nest@@Base+0x3f0>
   1dce4:	ldr	r1, [pc, #272]	; 1ddfc <test_nested_buffer_using_nest@@Base+0x454>
   1dce8:	add	r1, pc, r1
   1dcec:	bl	1290c <strcmp@plt>
   1dcf0:	cmp	r0, #0
   1dcf4:	bne	1dd6c <test_nested_buffer_using_nest@@Base+0x3c4>
   1dcf8:	ldrh	r3, [r5, #6]
   1dcfc:	cmp	r3, #0
   1dd00:	beq	1dd58 <test_nested_buffer_using_nest@@Base+0x3b0>
   1dd04:	ldrsh	r3, [r4, r3]
   1dd08:	cmp	r3, #42	; 0x2a
   1dd0c:	bne	1dd58 <test_nested_buffer_using_nest@@Base+0x3b0>
   1dd10:	add	sp, sp, #1040	; 0x410
   1dd14:	add	sp, sp, #4
   1dd18:	pop	{r4, r5, r6, r7, pc}
   1dd1c:	ldr	r0, [r3, r2]
   1dd20:	ldrh	r3, [r5, #8]
   1dd24:	add	r4, r4, r0
   1dd28:	cmp	r3, #0
   1dd2c:	bne	1dc9c <test_nested_buffer_using_nest@@Base+0x2f4>
   1dd30:	ldr	r0, [pc, #200]	; 1de00 <test_nested_buffer_using_nest@@Base+0x458>
   1dd34:	add	r0, pc, r0
   1dd38:	bl	1296c <puts@plt>
   1dd3c:	mvn	r0, #0
   1dd40:	b	1dd10 <test_nested_buffer_using_nest@@Base+0x368>
   1dd44:	ldr	r0, [pc, #184]	; 1de04 <test_nested_buffer_using_nest@@Base+0x45c>
   1dd48:	add	r0, pc, r0
   1dd4c:	bl	1296c <puts@plt>
   1dd50:	mvn	r0, #0
   1dd54:	b	1dd10 <test_nested_buffer_using_nest@@Base+0x368>
   1dd58:	ldr	r0, [pc, #168]	; 1de08 <test_nested_buffer_using_nest@@Base+0x460>
   1dd5c:	add	r0, pc, r0
   1dd60:	bl	1296c <puts@plt>
   1dd64:	mvn	r0, #0
   1dd68:	b	1dd10 <test_nested_buffer_using_nest@@Base+0x368>
   1dd6c:	ldr	r0, [pc, #152]	; 1de0c <test_nested_buffer_using_nest@@Base+0x464>
   1dd70:	add	r0, pc, r0
   1dd74:	bl	1296c <puts@plt>
   1dd78:	mvn	r0, #0
   1dd7c:	b	1dd10 <test_nested_buffer_using_nest@@Base+0x368>
   1dd80:	ldr	r0, [pc, #136]	; 1de10 <test_nested_buffer_using_nest@@Base+0x468>
   1dd84:	add	r0, pc, r0
   1dd88:	bl	1296c <puts@plt>
   1dd8c:	mvn	r0, #0
   1dd90:	b	1dd10 <test_nested_buffer_using_nest@@Base+0x368>
   1dd94:	bl	130f4 <__assert_fail@plt+0x6ec>
   1dd98:	ldr	r3, [pc, #116]	; 1de14 <test_nested_buffer_using_nest@@Base+0x46c>
   1dd9c:	ldr	r1, [pc, #116]	; 1de18 <test_nested_buffer_using_nest@@Base+0x470>
   1dda0:	add	r3, pc, r3
   1dda4:	ldr	r0, [pc, #112]	; 1de1c <test_nested_buffer_using_nest@@Base+0x474>
   1dda8:	add	r3, r3, #1680	; 0x690
   1ddac:	ldr	r2, [pc, #108]	; 1de20 <test_nested_buffer_using_nest@@Base+0x478>
   1ddb0:	add	r3, r3, #4
   1ddb4:	add	r1, pc, r1
   1ddb8:	add	r0, pc, r0
   1ddbc:	bl	12a08 <__assert_fail@plt>
   1ddc0:	andeq	r7, r0, r0, asr #20
   1ddc4:	andeq	fp, r1, r0, lsr #12
   1ddc8:			; <UNDEFINED> instruction: 0x00009db8
   1ddcc:	andeq	r6, r0, r8, ror sp
   1ddd0:	andeq	r7, r0, ip, asr r9
   1ddd4:	andeq	r7, r0, ip, lsl #20
   1ddd8:	andeq	r6, r0, ip, asr #24
   1dddc:	andeq	r0, r0, r8, rrx
   1dde0:			; <UNDEFINED> instruction: 0x00009cb0
   1dde4:	movtpl	r4, #61261	; 0xef4d
   1dde8:	andeq	r6, r0, r4, lsr #23
   1ddec:	andeq	r7, r0, r0, lsr #5
   1ddf0:	strdeq	r7, [r0], -r8
   1ddf4:			; <UNDEFINED> instruction: 0x000002bb
   1ddf8:	strdeq	r7, [r0], -r0
   1ddfc:	andeq	r9, r0, r8, asr #21
   1de00:			; <UNDEFINED> instruction: 0x00009abc
   1de04:	andeq	r9, r0, ip, lsl #21
   1de08:	andeq	r9, r0, r4, lsr fp
   1de0c:	andeq	r9, r0, r0, asr #21
   1de10:	andeq	r9, r0, ip, asr #21
   1de14:	andeq	r6, r0, r0, lsl sl
   1de18:	muleq	r0, ip, sp
   1de1c:	andeq	r9, r0, ip, asr sl
   1de20:	strdeq	r0, [r0], -sl

0001de24 <verify_include@@Base>:
   1de24:	mov	r0, #0
   1de28:	bx	lr

0001de2c <test_struct_buffer@@Base>:
   1de2c:	push	{r4, r5, r6, r7, r8, r9, lr}
   1de30:	mov	r5, r0
   1de34:	sub	sp, sp, #116	; 0x74
   1de38:	bl	1f0f0 <flatcc_builder_reset@@Base>
   1de3c:	mov	r0, r5
   1de40:	mov	r2, #16
   1de44:	mov	r1, #32
   1de48:	bl	1fab0 <flatcc_builder_start_struct@@Base>
   1de4c:	ldr	r6, [pc, #536]	; 1e06c <test_struct_buffer@@Base+0x240>
   1de50:	add	r6, pc, r6
   1de54:	cmp	r0, #0
   1de58:	moveq	r3, r0
   1de5c:	beq	1dea8 <test_struct_buffer@@Base+0x7c>
   1de60:	mov	r1, #1065353216	; 0x3f800000
   1de64:	ldr	r3, [pc, #516]	; 1e070 <test_struct_buffer@@Base+0x244>
   1de68:	ldr	r8, [pc, #516]	; 1e074 <test_struct_buffer@@Base+0x248>
   1de6c:	ldr	r9, [pc, #516]	; 1e078 <test_struct_buffer@@Base+0x24c>
   1de70:	str	r1, [r0]
   1de74:	mov	r2, #1073741824	; 0x40000000
   1de78:	ldr	r1, [pc, #508]	; 1e07c <test_struct_buffer@@Base+0x250>
   1de7c:	str	r2, [r0, #4]
   1de80:	str	r3, [r0, #8]
   1de84:	mov	r2, #8
   1de88:	mvn	r3, #16
   1de8c:	strb	r3, [r0, #28]
   1de90:	strd	r8, [r0, #16]
   1de94:	strh	r1, [r0, #26]
   1de98:	strb	r2, [r0, #24]
   1de9c:	mov	r0, r5
   1dea0:	bl	1fb58 <flatcc_builder_end_struct@@Base>
   1dea4:	mov	r3, r0
   1dea8:	mov	r2, #0
   1deac:	mov	r1, #16
   1deb0:	mov	r0, r5
   1deb4:	stm	sp, {r1, r2}
   1deb8:	ldr	r1, [pc, #448]	; 1e080 <test_struct_buffer@@Base+0x254>
   1debc:	add	r1, pc, r1
   1dec0:	bl	1f4f0 <flatcc_builder_create_buffer@@Base>
   1dec4:	mov	r0, r5
   1dec8:	bl	22818 <flatcc_builder_get_buffer_size@@Base>
   1decc:	cmp	r0, #48	; 0x30
   1ded0:	bne	1e02c <test_struct_buffer@@Base+0x200>
   1ded4:	mov	r1, r0
   1ded8:	ldr	r0, [pc, #420]	; 1e084 <test_struct_buffer@@Base+0x258>
   1dedc:	add	r0, pc, r0
   1dee0:	bl	12918 <printf@plt>
   1dee4:	mov	r0, r5
   1dee8:	bl	22b14 <flatcc_builder_get_emit_context@@Base>
   1deec:	ldr	r7, [r0, #24]
   1def0:	cmp	r7, #48	; 0x30
   1def4:	bne	1e004 <test_struct_buffer@@Base+0x1d8>
   1def8:	add	r4, sp, #12
   1defc:	mov	r0, r5
   1df00:	mov	r1, r4
   1df04:	mov	r2, #100	; 0x64
   1df08:	bl	228f8 <flatcc_builder_copy_buffer@@Base>
   1df0c:	cmp	r0, #0
   1df10:	beq	1dff0 <test_struct_buffer@@Base+0x1c4>
   1df14:	ldr	r3, [pc, #364]	; 1e088 <test_struct_buffer@@Base+0x25c>
   1df18:	ldr	r0, [pc, #364]	; 1e08c <test_struct_buffer@@Base+0x260>
   1df1c:	mov	r2, r7
   1df20:	ldr	r3, [r6, r3]
   1df24:	mov	r1, r4
   1df28:	add	r0, pc, r0
   1df2c:	ldr	r3, [r3]
   1df30:	bl	13540 <_start@@Base+0x154>
   1df34:	ldr	r3, [pc, #340]	; 1e090 <test_struct_buffer@@Base+0x264>
   1df38:	ldr	r2, [sp, #16]
   1df3c:	cmp	r2, r3
   1df40:	beq	1df5c <test_struct_buffer@@Base+0x130>
   1df44:	ldr	r0, [pc, #328]	; 1e094 <test_struct_buffer@@Base+0x268>
   1df48:	add	r0, pc, r0
   1df4c:	bl	1296c <puts@plt>
   1df50:	mvn	r0, #0
   1df54:	add	sp, sp, #116	; 0x74
   1df58:	pop	{r4, r5, r6, r7, r8, r9, pc}
   1df5c:	ldr	r1, [sp, #12]
   1df60:	vldr	s15, [pc, #248]	; 1e060 <test_struct_buffer@@Base+0x234>
   1df64:	add	r1, r4, r1
   1df68:	vldr	s14, [r1]
   1df6c:	vcmp.f32	s14, s15
   1df70:	vmrs	APSR_nzcv, fpscr
   1df74:	bne	1dfd8 <test_struct_buffer@@Base+0x1ac>
   1df78:	vldr	s15, [pc, #228]	; 1e064 <test_struct_buffer@@Base+0x238>
   1df7c:	vldr	s14, [r1, #4]
   1df80:	vcmp.f32	s14, s15
   1df84:	vmrs	APSR_nzcv, fpscr
   1df88:	bne	1dfd8 <test_struct_buffer@@Base+0x1ac>
   1df8c:	vldr	s15, [pc, #212]	; 1e068 <test_struct_buffer@@Base+0x23c>
   1df90:	vldr	s14, [r1, #8]
   1df94:	vcmp.f32	s14, s15
   1df98:	vmrs	APSR_nzcv, fpscr
   1df9c:	bne	1dfd8 <test_struct_buffer@@Base+0x1ac>
   1dfa0:	vldr	d7, [pc, #176]	; 1e058 <test_struct_buffer@@Base+0x22c>
   1dfa4:	vldr	d6, [r1, #16]
   1dfa8:	vcmp.f64	d6, d7
   1dfac:	vmrs	APSR_nzcv, fpscr
   1dfb0:	bne	1dfd8 <test_struct_buffer@@Base+0x1ac>
   1dfb4:	ldr	r3, [r1, #24]
   1dfb8:	ldr	r2, [pc, #216]	; 1e098 <test_struct_buffer@@Base+0x26c>
   1dfbc:	bic	r3, r3, #65280	; 0xff00
   1dfc0:	cmp	r3, r2
   1dfc4:	bne	1dfd8 <test_struct_buffer@@Base+0x1ac>
   1dfc8:	ldrsb	r3, [r1, #28]
   1dfcc:	cmn	r3, #17
   1dfd0:	moveq	r0, #0
   1dfd4:	beq	1df54 <test_struct_buffer@@Base+0x128>
   1dfd8:	ldr	r0, [pc, #188]	; 1e09c <test_struct_buffer@@Base+0x270>
   1dfdc:	add	r0, pc, r0
   1dfe0:	bl	1296c <puts@plt>
   1dfe4:	mvn	r0, #0
   1dfe8:	add	sp, sp, #116	; 0x74
   1dfec:	pop	{r4, r5, r6, r7, r8, r9, pc}
   1dff0:	ldr	r0, [pc, #168]	; 1e0a0 <test_struct_buffer@@Base+0x274>
   1dff4:	add	r0, pc, r0
   1dff8:	bl	1296c <puts@plt>
   1dffc:	mvn	r0, #0
   1e000:	b	1df54 <test_struct_buffer@@Base+0x128>
   1e004:	ldr	r3, [pc, #152]	; 1e0a4 <test_struct_buffer@@Base+0x278>
   1e008:	ldr	r1, [pc, #152]	; 1e0a8 <test_struct_buffer@@Base+0x27c>
   1e00c:	add	r3, pc, r3
   1e010:	ldr	r0, [pc, #148]	; 1e0ac <test_struct_buffer@@Base+0x280>
   1e014:	add	r3, r3, #1712	; 0x6b0
   1e018:	ldr	r2, [pc, #144]	; 1e0b0 <test_struct_buffer@@Base+0x284>
   1e01c:	add	r3, r3, #4
   1e020:	add	r1, pc, r1
   1e024:	add	r0, pc, r0
   1e028:	bl	12a08 <__assert_fail@plt>
   1e02c:	ldr	r3, [pc, #128]	; 1e0b4 <test_struct_buffer@@Base+0x288>
   1e030:	ldr	r1, [pc, #128]	; 1e0b8 <test_struct_buffer@@Base+0x28c>
   1e034:	add	r3, pc, r3
   1e038:	ldr	r0, [pc, #124]	; 1e0bc <test_struct_buffer@@Base+0x290>
   1e03c:	add	r3, r3, #1712	; 0x6b0
   1e040:	ldr	r2, [pc, #120]	; 1e0c0 <test_struct_buffer@@Base+0x294>
   1e044:	add	r3, r3, #4
   1e048:	add	r1, pc, r1
   1e04c:	add	r0, pc, r0
   1e050:	bl	12a08 <__assert_fail@plt>
   1e054:	nop			; (mov r0, r0)
   1e058:	stclgt	12, cr12, [ip], {205}	; 0xcd
   1e05c:	andsmi	ip, r0, ip, asr #25
   1e060:	svccc	0x00800000
   1e064:	andmi	r0, r0, r0
   1e068:	submi	r0, r0, r0
   1e06c:	andeq	fp, r1, r8, lsr #3
   1e070:	submi	r0, r0, r0
   1e074:	stclgt	12, cr12, [ip], {205}	; 0xcd
   1e078:	andsmi	ip, r0, ip, asr #25
   1e07c:	andeq	r0, r0, sl, lsr #21
   1e080:	andeq	r7, r0, r0, asr r5
   1e084:	andeq	r9, r0, r4, ror #19
   1e088:	andeq	r0, r0, r8, rrx
   1e08c:	andeq	r9, r0, r0, lsl sl
   1e090:	movtpl	r4, #61261	; 0xef4d
   1e094:	andeq	r9, r0, ip, lsl sl
   1e098:	beq	fea9e0c0 <__bss_end__@@Base+0xfea64fd0>
   1e09c:	andeq	r9, r0, r0, ror r9
   1e0a0:	andeq	r9, r0, r8, lsr r9
   1e0a4:	andeq	r6, r0, r4, lsr #15
   1e0a8:	andeq	r7, r0, r0, lsr fp
   1e0ac:			; <UNDEFINED> instruction: 0x000098bc
   1e0b0:	andeq	r0, r0, r5, lsr #18
   1e0b4:	andeq	r6, r0, ip, ror r7
   1e0b8:	andeq	r7, r0, r8, lsl #22
   1e0bc:	andeq	r9, r0, r8, ror #16
   1e0c0:	andeq	r0, r0, r3, lsr #18

0001e0c4 <test_typed_struct_buffer@@Base>:
   1e0c4:	push	{r4, r5, r6, r7, r8, lr}
   1e0c8:	mov	r4, r0
   1e0cc:	sub	sp, sp, #112	; 0x70
   1e0d0:	bl	1f0f0 <flatcc_builder_reset@@Base>
   1e0d4:	mov	r0, r4
   1e0d8:	mov	r2, #16
   1e0dc:	mov	r1, #32
   1e0e0:	bl	1fab0 <flatcc_builder_start_struct@@Base>
   1e0e4:	ldr	r8, [pc, #704]	; 1e3ac <test_typed_struct_buffer@@Base+0x2e8>
   1e0e8:	add	r8, pc, r8
   1e0ec:	cmp	r0, #0
   1e0f0:	moveq	r3, r0
   1e0f4:	beq	1e140 <test_typed_struct_buffer@@Base+0x7c>
   1e0f8:	mov	r1, #1065353216	; 0x3f800000
   1e0fc:	ldr	r3, [pc, #684]	; 1e3b0 <test_typed_struct_buffer@@Base+0x2ec>
   1e100:	ldr	r6, [pc, #684]	; 1e3b4 <test_typed_struct_buffer@@Base+0x2f0>
   1e104:	ldr	r7, [pc, #684]	; 1e3b8 <test_typed_struct_buffer@@Base+0x2f4>
   1e108:	str	r1, [r0]
   1e10c:	mov	r2, #1073741824	; 0x40000000
   1e110:	ldr	r1, [pc, #676]	; 1e3bc <test_typed_struct_buffer@@Base+0x2f8>
   1e114:	str	r2, [r0, #4]
   1e118:	str	r3, [r0, #8]
   1e11c:	mov	r2, #8
   1e120:	mvn	r3, #16
   1e124:	strb	r3, [r0, #28]
   1e128:	strd	r6, [r0, #16]
   1e12c:	strh	r1, [r0, #26]
   1e130:	strb	r2, [r0, #24]
   1e134:	mov	r0, r4
   1e138:	bl	1fb58 <flatcc_builder_end_struct@@Base>
   1e13c:	mov	r3, r0
   1e140:	ldr	r1, [pc, #632]	; 1e3c0 <test_typed_struct_buffer@@Base+0x2fc>
   1e144:	mov	r2, #0
   1e148:	mov	r7, #16
   1e14c:	str	r2, [sp, #4]
   1e150:	add	r1, pc, r1
   1e154:	str	r7, [sp]
   1e158:	mov	r0, r4
   1e15c:	bl	1f4f0 <flatcc_builder_create_buffer@@Base>
   1e160:	mov	r0, r4
   1e164:	bl	22818 <flatcc_builder_get_buffer_size@@Base>
   1e168:	cmp	r0, #48	; 0x30
   1e16c:	bne	1e36c <test_typed_struct_buffer@@Base+0x2a8>
   1e170:	mov	r1, r0
   1e174:	ldr	r0, [pc, #584]	; 1e3c4 <test_typed_struct_buffer@@Base+0x300>
   1e178:	add	r0, pc, r0
   1e17c:	bl	12918 <printf@plt>
   1e180:	mov	r0, r4
   1e184:	bl	22b14 <flatcc_builder_get_emit_context@@Base>
   1e188:	ldr	r6, [r0, #24]
   1e18c:	cmp	r6, #48	; 0x30
   1e190:	bne	1e344 <test_typed_struct_buffer@@Base+0x280>
   1e194:	add	r5, sp, #12
   1e198:	mov	r0, r4
   1e19c:	mov	r1, r5
   1e1a0:	mov	r2, #100	; 0x64
   1e1a4:	bl	228f8 <flatcc_builder_copy_buffer@@Base>
   1e1a8:	cmp	r0, #0
   1e1ac:	beq	1e31c <test_typed_struct_buffer@@Base+0x258>
   1e1b0:	ldr	r3, [pc, #528]	; 1e3c8 <test_typed_struct_buffer@@Base+0x304>
   1e1b4:	ldr	r0, [pc, #528]	; 1e3cc <test_typed_struct_buffer@@Base+0x308>
   1e1b8:	mov	r2, r6
   1e1bc:	ldr	r3, [r8, r3]
   1e1c0:	mov	r1, r5
   1e1c4:	add	r0, pc, r0
   1e1c8:	ldr	r3, [r3]
   1e1cc:	bl	13540 <_start@@Base+0x154>
   1e1d0:	ldr	r3, [pc, #504]	; 1e3d0 <test_typed_struct_buffer@@Base+0x30c>
   1e1d4:	ldr	r4, [sp, #16]
   1e1d8:	cmp	r4, r3
   1e1dc:	beq	1e1f8 <test_typed_struct_buffer@@Base+0x134>
   1e1e0:	ldr	r0, [pc, #492]	; 1e3d4 <test_typed_struct_buffer@@Base+0x310>
   1e1e4:	add	r0, pc, r0
   1e1e8:	bl	1296c <puts@plt>
   1e1ec:	mvn	r0, #0
   1e1f0:	add	sp, sp, #112	; 0x70
   1e1f4:	pop	{r4, r5, r6, r7, r8, pc}
   1e1f8:	ldr	r3, [sp, #12]
   1e1fc:	cmn	r5, r3
   1e200:	beq	1e330 <test_typed_struct_buffer@@Base+0x26c>
   1e204:	str	r7, [sp]
   1e208:	mov	r3, #32
   1e20c:	mov	r2, r4
   1e210:	mov	r1, r6
   1e214:	mov	r0, r5
   1e218:	bl	23e4c <flatcc_verify_struct_as_typed_root@@Base>
   1e21c:	cmp	r0, #0
   1e220:	bne	1e2f4 <test_typed_struct_buffer@@Base+0x230>
   1e224:	ldr	r2, [sp, #16]
   1e228:	cmp	r2, r4
   1e22c:	beq	1e244 <test_typed_struct_buffer@@Base+0x180>
   1e230:	ldr	r0, [pc, #416]	; 1e3d8 <test_typed_struct_buffer@@Base+0x314>
   1e234:	add	r0, pc, r0
   1e238:	bl	1296c <puts@plt>
   1e23c:	mvn	r0, #0
   1e240:	b	1e1f0 <test_typed_struct_buffer@@Base+0x12c>
   1e244:	ldr	r4, [sp, #12]
   1e248:	adds	r4, r5, r4
   1e24c:	beq	1e230 <test_typed_struct_buffer@@Base+0x16c>
   1e250:	str	r7, [sp]
   1e254:	mov	r1, r6
   1e258:	mov	r0, r5
   1e25c:	mov	r3, #32
   1e260:	bl	23e4c <flatcc_verify_struct_as_typed_root@@Base>
   1e264:	cmp	r0, #0
   1e268:	bne	1e308 <test_typed_struct_buffer@@Base+0x244>
   1e26c:	vldr	s15, [pc, #300]	; 1e3a0 <test_typed_struct_buffer@@Base+0x2dc>
   1e270:	vldr	s14, [r4]
   1e274:	vcmp.f32	s14, s15
   1e278:	vmrs	APSR_nzcv, fpscr
   1e27c:	bne	1e2dc <test_typed_struct_buffer@@Base+0x218>
   1e280:	vldr	s15, [pc, #284]	; 1e3a4 <test_typed_struct_buffer@@Base+0x2e0>
   1e284:	vldr	s14, [r4, #4]
   1e288:	vcmp.f32	s14, s15
   1e28c:	vmrs	APSR_nzcv, fpscr
   1e290:	bne	1e2dc <test_typed_struct_buffer@@Base+0x218>
   1e294:	vldr	s15, [pc, #268]	; 1e3a8 <test_typed_struct_buffer@@Base+0x2e4>
   1e298:	vldr	s14, [r4, #8]
   1e29c:	vcmp.f32	s14, s15
   1e2a0:	vmrs	APSR_nzcv, fpscr
   1e2a4:	bne	1e2dc <test_typed_struct_buffer@@Base+0x218>
   1e2a8:	vldr	d7, [pc, #232]	; 1e398 <test_typed_struct_buffer@@Base+0x2d4>
   1e2ac:	vldr	d6, [r4, #16]
   1e2b0:	vcmp.f64	d6, d7
   1e2b4:	vmrs	APSR_nzcv, fpscr
   1e2b8:	bne	1e2dc <test_typed_struct_buffer@@Base+0x218>
   1e2bc:	ldr	r3, [r4, #24]
   1e2c0:	ldr	r2, [pc, #276]	; 1e3dc <test_typed_struct_buffer@@Base+0x318>
   1e2c4:	bic	r3, r3, #65280	; 0xff00
   1e2c8:	cmp	r3, r2
   1e2cc:	bne	1e2dc <test_typed_struct_buffer@@Base+0x218>
   1e2d0:	ldrsb	r3, [r4, #28]
   1e2d4:	cmn	r3, #17
   1e2d8:	beq	1e1f0 <test_typed_struct_buffer@@Base+0x12c>
   1e2dc:	ldr	r0, [pc, #252]	; 1e3e0 <test_typed_struct_buffer@@Base+0x31c>
   1e2e0:	add	r0, pc, r0
   1e2e4:	bl	1296c <puts@plt>
   1e2e8:	mvn	r0, #0
   1e2ec:	add	sp, sp, #112	; 0x70
   1e2f0:	pop	{r4, r5, r6, r7, r8, pc}
   1e2f4:	ldr	r0, [pc, #232]	; 1e3e4 <test_typed_struct_buffer@@Base+0x320>
   1e2f8:	add	r0, pc, r0
   1e2fc:	bl	1296c <puts@plt>
   1e300:	mvn	r0, #0
   1e304:	b	1e1f0 <test_typed_struct_buffer@@Base+0x12c>
   1e308:	ldr	r0, [pc, #216]	; 1e3e8 <test_typed_struct_buffer@@Base+0x324>
   1e30c:	add	r0, pc, r0
   1e310:	bl	1296c <puts@plt>
   1e314:	mvn	r0, #0
   1e318:	b	1e1f0 <test_typed_struct_buffer@@Base+0x12c>
   1e31c:	ldr	r0, [pc, #200]	; 1e3ec <test_typed_struct_buffer@@Base+0x328>
   1e320:	add	r0, pc, r0
   1e324:	bl	1296c <puts@plt>
   1e328:	mvn	r0, #0
   1e32c:	b	1e1f0 <test_typed_struct_buffer@@Base+0x12c>
   1e330:	ldr	r0, [pc, #184]	; 1e3f0 <test_typed_struct_buffer@@Base+0x32c>
   1e334:	add	r0, pc, r0
   1e338:	bl	1296c <puts@plt>
   1e33c:	mvn	r0, #0
   1e340:	b	1e1f0 <test_typed_struct_buffer@@Base+0x12c>
   1e344:	ldr	r3, [pc, #168]	; 1e3f4 <test_typed_struct_buffer@@Base+0x330>
   1e348:	ldr	r1, [pc, #168]	; 1e3f8 <test_typed_struct_buffer@@Base+0x334>
   1e34c:	add	r3, pc, r3
   1e350:	ldr	r0, [pc, #164]	; 1e3fc <test_typed_struct_buffer@@Base+0x338>
   1e354:	add	r3, r3, #1728	; 0x6c0
   1e358:	ldr	r2, [pc, #160]	; 1e400 <test_typed_struct_buffer@@Base+0x33c>
   1e35c:	add	r3, r3, #8
   1e360:	add	r1, pc, r1
   1e364:	add	r0, pc, r0
   1e368:	bl	12a08 <__assert_fail@plt>
   1e36c:	ldr	r3, [pc, #144]	; 1e404 <test_typed_struct_buffer@@Base+0x340>
   1e370:	ldr	r1, [pc, #144]	; 1e408 <test_typed_struct_buffer@@Base+0x344>
   1e374:	add	r3, pc, r3
   1e378:	ldr	r0, [pc, #140]	; 1e40c <test_typed_struct_buffer@@Base+0x348>
   1e37c:	add	r3, r3, #1728	; 0x6c0
   1e380:	ldr	r2, [pc, #136]	; 1e410 <test_typed_struct_buffer@@Base+0x34c>
   1e384:	add	r3, r3, #8
   1e388:	add	r1, pc, r1
   1e38c:	add	r0, pc, r0
   1e390:	bl	12a08 <__assert_fail@plt>
   1e394:	nop			; (mov r0, r0)
   1e398:	stclgt	12, cr12, [ip], {205}	; 0xcd
   1e39c:	andsmi	ip, r0, ip, asr #25
   1e3a0:	svccc	0x00800000
   1e3a4:	andmi	r0, r0, r0
   1e3a8:	submi	r0, r0, r0
   1e3ac:	andeq	sl, r1, r0, lsl pc
   1e3b0:	submi	r0, r0, r0
   1e3b4:	stclgt	12, cr12, [ip], {205}	; 0xcd
   1e3b8:	andsmi	ip, r0, ip, asr #25
   1e3bc:	andeq	r0, r0, sl, lsr #21
   1e3c0:	andeq	r9, r0, r8, lsr r8
   1e3c4:	andeq	r9, r0, r8, asr #14
   1e3c8:	andeq	r0, r0, r8, rrx
   1e3cc:	andeq	r9, r0, ip, asr #15
   1e3d0:	ldmge	r5!, {r1, r4, r6, r7, r9, sl, fp, ip, sp}^
   1e3d4:	andeq	r9, r0, r0, lsl #15
   1e3d8:	andeq	r9, r0, r4, asr #15
   1e3dc:	beq	fea9e404 <__bss_end__@@Base+0xfea65314>
   1e3e0:	andeq	r9, r0, ip, ror #12
   1e3e4:	ldrdeq	r9, [r0], -ip
   1e3e8:	andeq	r9, r0, ip, lsl #14
   1e3ec:	andeq	r9, r0, ip, lsl #12
   1e3f0:	andeq	r9, r0, r8, ror r6
   1e3f4:	andeq	r6, r0, r4, ror #8
   1e3f8:	strdeq	r7, [r0], -r0
   1e3fc:	andeq	r9, r0, ip, ror r5
   1e400:	andeq	r0, r0, r6, asr r9
   1e404:	andeq	r6, r0, ip, lsr r4
   1e408:	andeq	r7, r0, r8, asr #15
   1e40c:	andeq	r9, r0, r8, lsr #10
   1e410:	andeq	r0, r0, r4, asr r9

0001e414 <gen_monster_benchmark@@Base>:
   1e414:	ldr	r3, [pc, #540]	; 1e638 <gen_monster_benchmark@@Base+0x224>
   1e418:	push	{r4, r5, r6, lr}
   1e41c:	add	r3, pc, r3
   1e420:	add	r3, r3, #1216	; 0x4c0
   1e424:	sub	sp, sp, #24
   1e428:	mov	r4, r0
   1e42c:	ldmib	r3, {r0, r1, r2}
   1e430:	add	r5, sp, #12
   1e434:	mov	r3, r5
   1e438:	stmia	r3!, {r0, r1}
   1e43c:	mov	r0, r4
   1e440:	strh	r2, [r3]
   1e444:	bl	1f0f0 <flatcc_builder_reset@@Base>
   1e448:	ldr	r1, [pc, #492]	; 1e63c <gen_monster_benchmark@@Base+0x228>
   1e44c:	mov	r3, #0
   1e450:	mov	r0, r4
   1e454:	mov	r2, r3
   1e458:	add	r1, pc, r1
   1e45c:	bl	1f8b4 <flatcc_builder_start_buffer@@Base>
   1e460:	cmp	r0, #0
   1e464:	bne	1e474 <gen_monster_benchmark@@Base+0x60>
   1e468:	mov	r1, #36	; 0x24
   1e46c:	mov	r0, r4
   1e470:	bl	206ec <flatcc_builder_start_table@@Base>
   1e474:	mov	r3, #2
   1e478:	mov	r2, r3
   1e47c:	mov	r1, r3
   1e480:	mov	r0, r4
   1e484:	bl	2212c <flatcc_builder_table_add@@Base>
   1e488:	mov	r2, #32
   1e48c:	mov	r1, #0
   1e490:	cmp	r0, #0
   1e494:	movne	r3, #80	; 0x50
   1e498:	strhne	r3, [r0]
   1e49c:	mov	r3, #16
   1e4a0:	mov	r0, r4
   1e4a4:	bl	2212c <flatcc_builder_table_add@@Base>
   1e4a8:	ldr	r3, [pc, #400]	; 1e640 <gen_monster_benchmark@@Base+0x22c>
   1e4ac:	ldr	r1, [pc, #400]	; 1e644 <gen_monster_benchmark@@Base+0x230>
   1e4b0:	mov	ip, #1065353216	; 0x3f800000
   1e4b4:	mov	r2, #1073741824	; 0x40000000
   1e4b8:	add	r1, pc, r1
   1e4bc:	str	ip, [r0]
   1e4c0:	str	r2, [r0, #4]
   1e4c4:	str	r3, [r0, #8]
   1e4c8:	mov	r0, r4
   1e4cc:	bl	21f90 <flatcc_builder_create_string_str@@Base>
   1e4d0:	subs	r6, r0, #0
   1e4d4:	beq	1e4ec <gen_monster_benchmark@@Base+0xd8>
   1e4d8:	mov	r1, #3
   1e4dc:	mov	r0, r4
   1e4e0:	bl	2234c <flatcc_builder_table_add_offset@@Base>
   1e4e4:	cmp	r0, #0
   1e4e8:	strne	r6, [r0]
   1e4ec:	mvn	r2, #0
   1e4f0:	mov	r3, #1
   1e4f4:	mov	r1, r5
   1e4f8:	str	r2, [sp, #4]
   1e4fc:	str	r3, [sp]
   1e500:	mov	r2, #10
   1e504:	mov	r0, r4
   1e508:	bl	212b0 <flatcc_builder_create_vector@@Base>
   1e50c:	subs	r5, r0, #0
   1e510:	beq	1e528 <gen_monster_benchmark@@Base+0x114>
   1e514:	mov	r1, #5
   1e518:	mov	r0, r4
   1e51c:	bl	2234c <flatcc_builder_table_add_offset@@Base>
   1e520:	cmp	r0, #0
   1e524:	strne	r5, [r0]
   1e528:	mvn	r3, #-1073741824	; 0xc0000000
   1e52c:	mov	r2, #2
   1e530:	mov	r1, #4
   1e534:	mov	r0, r4
   1e538:	bl	2048c <flatcc_builder_start_vector@@Base>
   1e53c:	mov	r1, #1
   1e540:	mov	r0, r4
   1e544:	bl	1fc38 <flatcc_builder_extend_vector@@Base>
   1e548:	mov	r2, #16
   1e54c:	mov	r3, #32
   1e550:	mov	r1, #2
   1e554:	strh	r2, [r0]
   1e558:	strb	r3, [r0, #2]
   1e55c:	mov	r0, r4
   1e560:	bl	1fc38 <flatcc_builder_extend_vector@@Base>
   1e564:	mov	r2, #80	; 0x50
   1e568:	mov	r3, #96	; 0x60
   1e56c:	mov	ip, #48	; 0x30
   1e570:	mov	r1, #64	; 0x40
   1e574:	strh	ip, [r0]
   1e578:	strh	r2, [r0, #4]
   1e57c:	strb	r3, [r0, #6]
   1e580:	strb	r1, [r0, #2]
   1e584:	mov	r1, #1
   1e588:	mov	r0, r4
   1e58c:	bl	1fc38 <flatcc_builder_extend_vector@@Base>
   1e590:	mov	r1, #1
   1e594:	cmp	r0, #0
   1e598:	movne	r2, #112	; 0x70
   1e59c:	mvnne	r3, #127	; 0x7f
   1e5a0:	strhne	r2, [r0]
   1e5a4:	ldr	r2, [pc, #156]	; 1e648 <gen_monster_benchmark@@Base+0x234>
   1e5a8:	strbne	r3, [r0, #2]
   1e5ac:	mvn	r3, #110	; 0x6e
   1e5b0:	mov	r0, r4
   1e5b4:	strb	r3, [sp, #10]
   1e5b8:	strh	r2, [sp, #8]
   1e5bc:	bl	1fc38 <flatcc_builder_extend_vector@@Base>
   1e5c0:	cmp	r0, #0
   1e5c4:	ldrne	r3, [sp, #8]
   1e5c8:	strne	r3, [r0]
   1e5cc:	mov	r0, r4
   1e5d0:	bl	21428 <flatcc_builder_end_vector@@Base>
   1e5d4:	subs	r5, r0, #0
   1e5d8:	beq	1e5f0 <gen_monster_benchmark@@Base+0x1dc>
   1e5dc:	mov	r1, #9
   1e5e0:	mov	r0, r4
   1e5e4:	bl	2234c <flatcc_builder_table_add_offset@@Base>
   1e5e8:	cmp	r0, #0
   1e5ec:	strne	r5, [r0]
   1e5f0:	ldr	r1, [pc, #84]	; 1e64c <gen_monster_benchmark@@Base+0x238>
   1e5f4:	mov	r2, #1
   1e5f8:	add	r1, pc, r1
   1e5fc:	add	r1, r1, #1072	; 0x430
   1e600:	add	r1, r1, #12
   1e604:	mov	r0, r4
   1e608:	bl	21038 <flatcc_builder_check_required@@Base>
   1e60c:	cmp	r0, #0
   1e610:	beq	1e634 <gen_monster_benchmark@@Base+0x220>
   1e614:	mov	r0, r4
   1e618:	bl	210e0 <flatcc_builder_end_table@@Base>
   1e61c:	mov	r1, r0
   1e620:	mov	r0, r4
   1e624:	bl	1f96c <flatcc_builder_end_buffer@@Base>
   1e628:	mov	r0, #0
   1e62c:	add	sp, sp, #24
   1e630:	pop	{r4, r5, r6, pc}
   1e634:	bl	130f4 <__assert_fail@plt+0x6ec>
   1e638:	muleq	r0, r4, r3
   1e63c:			; <UNDEFINED> instruction: 0x00006fb4
   1e640:	subgt	ip, ip, sp, asr #25
   1e644:	andeq	r7, r0, ip, ror r0
   1e648:	muleq	r0, r1, r1
   1e64c:			; <UNDEFINED> instruction: 0x000061b8

0001e650 <time_monster@@Base>:
   1e650:	push	{r4, r5, r6, lr}
   1e654:	mov	r5, r0
   1e658:	ldr	r0, [pc, #88]	; 1e6b8 <time_monster@@Base+0x68>
   1e65c:	vpush	{d8}
   1e660:	add	r0, pc, r0
   1e664:	bl	1296c <puts@plt>
   1e668:	bl	136ac <_start@@Base+0x2c0>
   1e66c:	ldr	r4, [pc, #72]	; 1e6bc <time_monster@@Base+0x6c>
   1e670:	vmov.f64	d8, d0
   1e674:	mov	r0, r5
   1e678:	bl	1e414 <gen_monster_benchmark@@Base>
   1e67c:	subs	r4, r4, #1
   1e680:	bne	1e674 <time_monster@@Base+0x24>
   1e684:	mov	r0, r5
   1e688:	bl	22818 <flatcc_builder_get_buffer_size@@Base>
   1e68c:	mov	r5, r0
   1e690:	bl	136ac <_start@@Base+0x2c0>
   1e694:	ldr	r0, [pc, #36]	; 1e6c0 <time_monster@@Base+0x70>
   1e698:	mov	r1, r5
   1e69c:	add	r0, pc, r0
   1e6a0:	vmov.f64	d1, d0
   1e6a4:	vmov.f64	d0, d8
   1e6a8:	bl	142bc <_start@@Base+0xed0>
   1e6ac:	vpop	{d8}
   1e6b0:	mov	r0, r4
   1e6b4:	pop	{r4, r5, r6, pc}
   1e6b8:	andeq	r9, r0, r0, ror #7
   1e6bc:	andeq	r4, pc, r0, asr #4
   1e6c0:			; <UNDEFINED> instruction: 0x000093b8

0001e6c4 <gen_struct_buffer_benchmark@@Base>:
   1e6c4:	push	{r4, r5, r6, r7, lr}
   1e6c8:	mov	r4, r0
   1e6cc:	sub	sp, sp, #12
   1e6d0:	bl	1f0f0 <flatcc_builder_reset@@Base>
   1e6d4:	mov	r0, r4
   1e6d8:	mov	r2, #16
   1e6dc:	mov	r1, #32
   1e6e0:	bl	1fab0 <flatcc_builder_start_struct@@Base>
   1e6e4:	cmp	r0, #0
   1e6e8:	moveq	r3, r0
   1e6ec:	beq	1e738 <gen_struct_buffer_benchmark@@Base+0x74>
   1e6f0:	ldr	r6, [pc, #284]	; 1e814 <gen_struct_buffer_benchmark@@Base+0x150>
   1e6f4:	ldr	r7, [pc, #284]	; 1e818 <gen_struct_buffer_benchmark@@Base+0x154>
   1e6f8:	mov	r2, #1065353216	; 0x3f800000
   1e6fc:	mov	r3, #1073741824	; 0x40000000
   1e700:	ldr	ip, [pc, #276]	; 1e81c <gen_struct_buffer_benchmark@@Base+0x158>
   1e704:	ldr	r1, [pc, #276]	; 1e820 <gen_struct_buffer_benchmark@@Base+0x15c>
   1e708:	str	r2, [r0]
   1e70c:	str	r3, [r0, #4]
   1e710:	mov	r2, #8
   1e714:	mvn	r3, #16
   1e718:	strb	r3, [r0, #28]
   1e71c:	str	ip, [r0, #8]
   1e720:	strd	r6, [r0, #16]
   1e724:	strh	r1, [r0, #26]
   1e728:	strb	r2, [r0, #24]
   1e72c:	mov	r0, r4
   1e730:	bl	1fb58 <flatcc_builder_end_struct@@Base>
   1e734:	mov	r3, r0
   1e738:	mov	r1, #16
   1e73c:	str	r1, [sp]
   1e740:	ldr	r1, [pc, #220]	; 1e824 <gen_struct_buffer_benchmark@@Base+0x160>
   1e744:	mov	r5, #0
   1e748:	mov	r2, r5
   1e74c:	add	r1, pc, r1
   1e750:	str	r5, [sp, #4]
   1e754:	mov	r0, r4
   1e758:	bl	1f4f0 <flatcc_builder_create_buffer@@Base>
   1e75c:	mov	r1, r5
   1e760:	mov	r0, r4
   1e764:	bl	228b4 <flatcc_builder_get_direct_buffer@@Base>
   1e768:	cmp	r0, #0
   1e76c:	beq	1e7f0 <gen_struct_buffer_benchmark@@Base+0x12c>
   1e770:	ldr	r3, [r0]
   1e774:	vldr	s15, [pc, #140]	; 1e808 <gen_struct_buffer_benchmark@@Base+0x144>
   1e778:	add	r0, r0, r3
   1e77c:	vldr	s14, [r0]
   1e780:	vcmp.f32	s14, s15
   1e784:	vmrs	APSR_nzcv, fpscr
   1e788:	bne	1e7f0 <gen_struct_buffer_benchmark@@Base+0x12c>
   1e78c:	vldr	s15, [pc, #120]	; 1e80c <gen_struct_buffer_benchmark@@Base+0x148>
   1e790:	vldr	s14, [r0, #4]
   1e794:	vcmp.f32	s14, s15
   1e798:	vmrs	APSR_nzcv, fpscr
   1e79c:	bne	1e7f0 <gen_struct_buffer_benchmark@@Base+0x12c>
   1e7a0:	vldr	s15, [pc, #104]	; 1e810 <gen_struct_buffer_benchmark@@Base+0x14c>
   1e7a4:	vldr	s14, [r0, #8]
   1e7a8:	vcmp.f32	s14, s15
   1e7ac:	vmrs	APSR_nzcv, fpscr
   1e7b0:	bne	1e7f0 <gen_struct_buffer_benchmark@@Base+0x12c>
   1e7b4:	vldr	d7, [pc, #68]	; 1e800 <gen_struct_buffer_benchmark@@Base+0x13c>
   1e7b8:	vldr	d6, [r0, #16]
   1e7bc:	vcmp.f64	d6, d7
   1e7c0:	vmrs	APSR_nzcv, fpscr
   1e7c4:	bne	1e7f0 <gen_struct_buffer_benchmark@@Base+0x12c>
   1e7c8:	ldr	r3, [r0, #24]
   1e7cc:	ldr	r2, [pc, #84]	; 1e828 <gen_struct_buffer_benchmark@@Base+0x164>
   1e7d0:	bic	r3, r3, #65280	; 0xff00
   1e7d4:	cmp	r3, r2
   1e7d8:	bne	1e7f0 <gen_struct_buffer_benchmark@@Base+0x12c>
   1e7dc:	ldrb	r0, [r0, #28]
   1e7e0:	subs	r0, r0, #239	; 0xef
   1e7e4:	mvnne	r0, #0
   1e7e8:	add	sp, sp, #12
   1e7ec:	pop	{r4, r5, r6, r7, pc}
   1e7f0:	mvn	r0, #0
   1e7f4:	add	sp, sp, #12
   1e7f8:	pop	{r4, r5, r6, r7, pc}
   1e7fc:	nop			; (mov r0, r0)
   1e800:	stclgt	12, cr12, [ip], {205}	; 0xcd
   1e804:	andsmi	ip, r0, ip, asr #25
   1e808:	svccc	0x00800000
   1e80c:	andmi	r0, r0, r0
   1e810:	submi	r0, r0, r0
   1e814:	stclgt	12, cr12, [ip], {205}	; 0xcd
   1e818:	andsmi	ip, r0, ip, asr #25
   1e81c:	submi	r0, r0, r0
   1e820:	andeq	r0, r0, sl, lsr #21
   1e824:	andeq	r6, r0, r0, asr #25
   1e828:	beq	fea9e850 <__bss_end__@@Base+0xfea65760>

0001e82c <time_struct_buffer@@Base>:
   1e82c:	push	{r4, r5, r6, lr}
   1e830:	mov	r6, r0
   1e834:	ldr	r0, [pc, #120]	; 1e8b4 <time_struct_buffer@@Base+0x88>
   1e838:	vpush	{d8-d9}
   1e83c:	add	r0, pc, r0
   1e840:	bl	1296c <puts@plt>
   1e844:	bl	136ac <_start@@Base+0x2c0>
   1e848:	ldr	r4, [pc, #104]	; 1e8b8 <time_struct_buffer@@Base+0x8c>
   1e84c:	mov	r5, #0
   1e850:	vmov.f64	d8, d0
   1e854:	mov	r0, r6
   1e858:	bl	1e6c4 <gen_struct_buffer_benchmark@@Base>
   1e85c:	subs	r4, r4, #1
   1e860:	orr	r5, r5, r0
   1e864:	bne	1e854 <time_struct_buffer@@Base+0x28>
   1e868:	bl	136ac <_start@@Base+0x2c0>
   1e86c:	mov	r0, r6
   1e870:	vmov.f64	d9, d0
   1e874:	bl	22818 <flatcc_builder_get_buffer_size@@Base>
   1e878:	cmp	r5, #0
   1e87c:	mov	r4, r0
   1e880:	beq	1e890 <time_struct_buffer@@Base+0x64>
   1e884:	ldr	r0, [pc, #48]	; 1e8bc <time_struct_buffer@@Base+0x90>
   1e888:	add	r0, pc, r0
   1e88c:	bl	1296c <puts@plt>
   1e890:	ldr	r0, [pc, #40]	; 1e8c0 <time_struct_buffer@@Base+0x94>
   1e894:	vmov.f64	d1, d9
   1e898:	vmov.f64	d0, d8
   1e89c:	mov	r1, r4
   1e8a0:	add	r0, pc, r0
   1e8a4:	bl	142bc <_start@@Base+0xed0>
   1e8a8:	vpop	{d8-d9}
   1e8ac:	mov	r0, r5
   1e8b0:	pop	{r4, r5, r6, pc}
   1e8b4:	andeq	r9, r0, r4, lsl #4
   1e8b8:	andeq	r4, pc, r0, asr #4
   1e8bc:	andeq	r9, r0, r4, ror #3
   1e8c0:	andeq	r9, r0, r0, ror #3
   1e8c4:	push	{r4, r5, r6, lr}
   1e8c8:	mov	r4, r0
   1e8cc:	ldr	ip, [r0, #28]
   1e8d0:	sub	sp, sp, #8
   1e8d4:	mov	r3, #1
   1e8d8:	ldr	r0, [r0, #40]	; 0x28
   1e8dc:	ldr	r6, [r4, #48]	; 0x30
   1e8e0:	mov	r5, r2
   1e8e4:	str	r3, [sp]
   1e8e8:	add	r2, r1, ip
   1e8ec:	add	r1, r4, #60	; 0x3c
   1e8f0:	blx	r6
   1e8f4:	cmp	r0, #0
   1e8f8:	bne	1e930 <time_struct_buffer@@Base+0x104>
   1e8fc:	ldr	r1, [r4, #28]
   1e900:	ldr	r3, [r4, #64]	; 0x40
   1e904:	ldr	r2, [r4, #60]	; 0x3c
   1e908:	sub	r3, r3, r1
   1e90c:	ldr	ip, [r4, #32]
   1e910:	cmp	r3, r5
   1e914:	movcs	r3, r5
   1e918:	add	r2, r2, r1
   1e91c:	str	r3, [r4, #24]
   1e920:	str	r2, [r4, #16]
   1e924:	str	r5, [ip, #4]
   1e928:	add	sp, sp, #8
   1e92c:	pop	{r4, r5, r6, pc}
   1e930:	mvn	r0, #0
   1e934:	b	1e928 <time_struct_buffer@@Base+0xfc>

0001e938 <flatcc_builder_default_alloc@@Base>:
   1e938:	push	{r4, r5, r6, r7, r8, lr}
   1e93c:	subs	r5, r2, #0
   1e940:	mov	r6, r1
   1e944:	bne	1e968 <flatcc_builder_default_alloc@@Base+0x30>
   1e948:	ldr	r0, [r1]
   1e94c:	cmp	r0, #0
   1e950:	popeq	{r4, r5, r6, r7, r8, pc}
   1e954:	bl	12924 <free@plt>
   1e958:	str	r5, [r6]
   1e95c:	str	r5, [r6, #4]
   1e960:	mov	r0, r5
   1e964:	pop	{r4, r5, r6, r7, r8, pc}
   1e968:	mov	r7, r3
   1e96c:	ldr	r3, [sp, #24]
   1e970:	sub	r2, r3, #1
   1e974:	cmp	r2, #6
   1e978:	addls	pc, pc, r2, lsl #2
   1e97c:	b	1ea18 <flatcc_builder_default_alloc@@Base+0xe0>
   1e980:	b	1e9ec <flatcc_builder_default_alloc@@Base+0xb4>
   1e984:	b	1ea18 <flatcc_builder_default_alloc@@Base+0xe0>
   1e988:	b	1ea18 <flatcc_builder_default_alloc@@Base+0xe0>
   1e98c:	b	1ea10 <flatcc_builder_default_alloc@@Base+0xd8>
   1e990:	b	1e99c <flatcc_builder_default_alloc@@Base+0x64>
   1e994:	b	1ea18 <flatcc_builder_default_alloc@@Base+0xe0>
   1e998:	b	1ea08 <flatcc_builder_default_alloc@@Base+0xd0>
   1e99c:	mov	r4, r5
   1e9a0:	ldr	r3, [r6, #4]
   1e9a4:	cmp	r5, r3
   1e9a8:	bhi	1e9b4 <flatcc_builder_default_alloc@@Base+0x7c>
   1e9ac:	cmp	r4, r3, lsr #1
   1e9b0:	bls	1ea20 <flatcc_builder_default_alloc@@Base+0xe8>
   1e9b4:	mov	r1, r4
   1e9b8:	ldr	r0, [r6]
   1e9bc:	bl	12948 <realloc@plt>
   1e9c0:	subs	r5, r0, #0
   1e9c4:	beq	1ea3c <flatcc_builder_default_alloc@@Base+0x104>
   1e9c8:	cmp	r7, #0
   1e9cc:	beq	1e9dc <flatcc_builder_default_alloc@@Base+0xa4>
   1e9d0:	ldr	r0, [r6, #4]
   1e9d4:	cmp	r0, r4
   1e9d8:	bcc	1ea28 <flatcc_builder_default_alloc@@Base+0xf0>
   1e9dc:	str	r5, [r6]
   1e9e0:	str	r4, [r6, #4]
   1e9e4:	mov	r0, #0
   1e9e8:	pop	{r4, r5, r6, r7, r8, pc}
   1e9ec:	mov	r4, #256	; 0x100
   1e9f0:	cmp	r5, r4
   1e9f4:	bls	1e9a0 <flatcc_builder_default_alloc@@Base+0x68>
   1e9f8:	lsl	r4, r4, #1
   1e9fc:	cmp	r5, r4
   1ea00:	bhi	1e9f8 <flatcc_builder_default_alloc@@Base+0xc0>
   1ea04:	b	1e9a0 <flatcc_builder_default_alloc@@Base+0x68>
   1ea08:	mov	r4, #64	; 0x40
   1ea0c:	b	1e9f0 <flatcc_builder_default_alloc@@Base+0xb8>
   1ea10:	mov	r4, #288	; 0x120
   1ea14:	b	1e9f0 <flatcc_builder_default_alloc@@Base+0xb8>
   1ea18:	mov	r4, #32
   1ea1c:	b	1e9f0 <flatcc_builder_default_alloc@@Base+0xb8>
   1ea20:	mov	r0, #0
   1ea24:	pop	{r4, r5, r6, r7, r8, pc}
   1ea28:	sub	r2, r4, r0
   1ea2c:	mov	r1, #0
   1ea30:	add	r0, r5, r0
   1ea34:	bl	129c0 <memset@plt>
   1ea38:	b	1e9dc <flatcc_builder_default_alloc@@Base+0xa4>
   1ea3c:	mvn	r0, #0
   1ea40:	pop	{r4, r5, r6, r7, r8, pc}
   1ea44:	push	{r4, r5, lr}
   1ea48:	cmp	r2, #0
   1ea4c:	ldr	lr, [pc, #248]	; 1eb4c <flatcc_builder_default_alloc@@Base+0x214>
   1ea50:	sub	sp, sp, #84	; 0x54
   1ea54:	mov	ip, r0
   1ea58:	add	lr, pc, lr
   1ea5c:	bne	1ea6c <flatcc_builder_default_alloc@@Base+0x134>
   1ea60:	ldrh	r2, [r0, #132]	; 0x84
   1ea64:	cmp	r2, #0
   1ea68:	moveq	r2, #1
   1ea6c:	ldrh	r0, [r1]
   1ea70:	cmp	r0, #3
   1ea74:	movls	r4, #4
   1ea78:	movls	r0, r4
   1ea7c:	strhls	r4, [r1]
   1ea80:	cmp	r2, r0
   1ea84:	strhhi	r2, [r1]
   1ea88:	cmp	r3, #0
   1ea8c:	bne	1eaa0 <flatcc_builder_default_alloc@@Base+0x168>
   1ea90:	ldr	r4, [ip, #140]	; 0x8c
   1ea94:	sub	r2, r2, #1
   1ea98:	ands	r3, r2, r4
   1ea9c:	bne	1eaac <flatcc_builder_default_alloc@@Base+0x174>
   1eaa0:	mov	r0, #0
   1eaa4:	add	sp, sp, #84	; 0x54
   1eaa8:	pop	{r4, r5, pc}
   1eaac:	ldr	r2, [pc, #156]	; 1eb50 <flatcc_builder_default_alloc@@Base+0x218>
   1eab0:	add	r1, r4, r3
   1eab4:	str	r3, [sp, #8]
   1eab8:	ldr	r0, [lr, r2]
   1eabc:	cmp	r4, r1
   1eac0:	mov	r2, #1
   1eac4:	str	r0, [sp, #16]
   1eac8:	str	r3, [sp, #20]
   1eacc:	str	r1, [ip, #140]	; 0x8c
   1ead0:	str	r2, [sp, #12]
   1ead4:	bgt	1eb24 <flatcc_builder_default_alloc@@Base+0x1ec>
   1ead8:	ldr	r0, [ip, #36]	; 0x24
   1eadc:	add	r1, sp, #16
   1eae0:	str	r3, [sp]
   1eae4:	mov	r3, r4
   1eae8:	ldr	r5, [ip, #44]	; 0x2c
   1eaec:	blx	r5
   1eaf0:	cmp	r0, #0
   1eaf4:	bne	1eb28 <flatcc_builder_default_alloc@@Base+0x1f0>
   1eaf8:	cmn	r4, #1
   1eafc:	bne	1eaa0 <flatcc_builder_default_alloc@@Base+0x168>
   1eb00:	ldr	r3, [pc, #76]	; 1eb54 <flatcc_builder_default_alloc@@Base+0x21c>
   1eb04:	ldr	r1, [pc, #76]	; 1eb58 <flatcc_builder_default_alloc@@Base+0x220>
   1eb08:	ldr	r0, [pc, #76]	; 1eb5c <flatcc_builder_default_alloc@@Base+0x224>
   1eb0c:	add	r3, pc, r3
   1eb10:	ldr	r2, [pc, #72]	; 1eb60 <flatcc_builder_default_alloc@@Base+0x228>
   1eb14:	add	r3, r3, #60	; 0x3c
   1eb18:	add	r1, pc, r1
   1eb1c:	add	r0, pc, r0
   1eb20:	bl	12a08 <__assert_fail@plt>
   1eb24:	bl	1318c <__assert_fail@plt+0x784>
   1eb28:	ldr	r3, [pc, #52]	; 1eb64 <flatcc_builder_default_alloc@@Base+0x22c>
   1eb2c:	ldr	r1, [pc, #52]	; 1eb68 <flatcc_builder_default_alloc@@Base+0x230>
   1eb30:	ldr	r0, [pc, #52]	; 1eb6c <flatcc_builder_default_alloc@@Base+0x234>
   1eb34:	add	r3, pc, r3
   1eb38:	ldr	r2, [pc, #48]	; 1eb70 <flatcc_builder_default_alloc@@Base+0x238>
   1eb3c:	add	r3, r3, #16
   1eb40:	add	r1, pc, r1
   1eb44:	add	r0, pc, r0
   1eb48:	bl	12a08 <__assert_fail@plt>
   1eb4c:	andeq	sl, r1, r0, lsr #11
   1eb50:	andeq	r0, r0, r4, rrx
   1eb54:	andeq	r8, r0, ip, asr #31
   1eb58:	andeq	r9, r0, r0, lsl r7
   1eb5c:	muleq	r0, r4, r7
   1eb60:			; <UNDEFINED> instruction: 0x000002be
   1eb64:	andeq	r8, r0, r4, lsr #31
   1eb68:	andeq	r9, r0, r8, ror #13
   1eb6c:	andeq	r9, r0, ip, ror #14
   1eb70:	andeq	r0, r0, r5, lsr #5
   1eb74:	push	{r4, r5, r6, r7, lr}
   1eb78:	mov	r5, r1
   1eb7c:	ldr	r1, [r0, #156]	; 0x9c
   1eb80:	ldr	r3, [r0, #160]	; 0xa0
   1eb84:	add	r2, r1, #1
   1eb88:	cmp	r2, r3
   1eb8c:	sub	sp, sp, #12
   1eb90:	mov	r4, r0
   1eb94:	str	r2, [r0, #156]	; 0x9c
   1eb98:	ble	1ec08 <flatcc_builder_default_alloc@@Base+0x2d0>
   1eb9c:	ldr	r3, [r0, #176]	; 0xb0
   1eba0:	cmp	r3, #0
   1eba4:	cmpgt	r2, r3
   1eba8:	movgt	r3, #1
   1ebac:	movle	r3, #0
   1ebb0:	bgt	1ec7c <flatcc_builder_default_alloc@@Base+0x344>
   1ebb4:	add	r1, r1, r1, lsl #3
   1ebb8:	ldr	r0, [r0, #88]	; 0x58
   1ebbc:	lsl	r6, r1, #2
   1ebc0:	add	r2, r6, #36	; 0x24
   1ebc4:	cmp	r2, r0
   1ebc8:	bhi	1ec58 <flatcc_builder_default_alloc@@Base+0x320>
   1ebcc:	ldr	r3, [r4, #84]	; 0x54
   1ebd0:	add	r3, r3, r6
   1ebd4:	cmp	r3, #0
   1ebd8:	str	r3, [r4, #32]
   1ebdc:	beq	1ec7c <flatcc_builder_default_alloc@@Base+0x344>
   1ebe0:	ldr	r2, [r4, #88]	; 0x58
   1ebe4:	ldr	r0, [pc, #152]	; 1ec84 <flatcc_builder_default_alloc@@Base+0x34c>
   1ebe8:	ldr	r1, [r4, #176]	; 0xb0
   1ebec:	umull	r0, r2, r0, r2
   1ebf0:	lsr	r2, r2, #3
   1ebf4:	cmp	r1, #0
   1ebf8:	cmpgt	r2, r1
   1ebfc:	str	r2, [r4, #160]	; 0xa0
   1ec00:	strgt	r1, [r4, #160]	; 0xa0
   1ec04:	b	1ec14 <flatcc_builder_default_alloc@@Base+0x2dc>
   1ec08:	ldr	r3, [r0, #32]
   1ec0c:	add	r3, r3, #36	; 0x24
   1ec10:	str	r3, [r0, #32]
   1ec14:	ldr	r0, [r4, #20]
   1ec18:	ldr	ip, [r4, #28]
   1ec1c:	ldrh	lr, [r4, #130]	; 0x82
   1ec20:	add	r2, r0, ip
   1ec24:	mov	r1, #0
   1ec28:	str	r0, [r3, #8]
   1ec2c:	strh	lr, [r3, #12]
   1ec30:	add	r2, r2, #7
   1ec34:	mvn	lr, #3
   1ec38:	mov	r0, r1
   1ec3c:	bic	r2, r2, #7
   1ec40:	strh	r5, [r4, #130]	; 0x82
   1ec44:	stm	r3, {ip, lr}
   1ec48:	str	r2, [r4, #28]
   1ec4c:	str	r1, [r4, #20]
   1ec50:	add	sp, sp, #12
   1ec54:	pop	{r4, r5, r6, r7, pc}
   1ec58:	mov	r1, #4
   1ec5c:	ldr	r0, [r4, #40]	; 0x28
   1ec60:	str	r1, [sp]
   1ec64:	add	r1, r4, #84	; 0x54
   1ec68:	ldr	r7, [r4, #48]	; 0x30
   1ec6c:	blx	r7
   1ec70:	cmp	r0, #0
   1ec74:	beq	1ebcc <flatcc_builder_default_alloc@@Base+0x294>
   1ec78:	bl	1315c <__assert_fail@plt+0x754>
   1ec7c:	mvn	r0, #0
   1ec80:	b	1ec50 <flatcc_builder_default_alloc@@Base+0x318>
   1ec84:	stmiacc	r3!, {r0, r3, r4, r5, r9, sl, fp, pc}^
   1ec88:	push	{r4, r5, r6, r7, lr}
   1ec8c:	mov	r5, r0
   1ec90:	ldrh	r0, [r0, #128]	; 0x80
   1ec94:	sub	sp, sp, #92	; 0x5c
   1ec98:	add	ip, sp, #12
   1ec9c:	cmp	r0, #3
   1eca0:	movls	r0, #4
   1eca4:	strhls	r0, [r5, #128]	; 0x80
   1eca8:	ldr	r4, [pc, #448]	; 1ee70 <flatcc_builder_default_alloc@@Base+0x538>
   1ecac:	ldr	r0, [r5, #136]	; 0x88
   1ecb0:	mov	r7, #4
   1ecb4:	mov	r6, #1
   1ecb8:	str	ip, [sp, #24]
   1ecbc:	lsls	ip, r2, #2
   1ecc0:	add	r4, pc, r4
   1ecc4:	str	r2, [sp, #12]
   1ecc8:	and	lr, r0, #3
   1eccc:	str	r7, [sp, #16]
   1ecd0:	str	r7, [sp, #28]
   1ecd4:	str	r6, [sp, #20]
   1ecd8:	beq	1ecf4 <flatcc_builder_default_alloc@@Base+0x3bc>
   1ecdc:	add	r7, ip, r7
   1ece0:	mov	r6, #2
   1ece4:	str	r1, [sp, #32]
   1ece8:	str	ip, [sp, #36]	; 0x24
   1ecec:	str	r7, [sp, #16]
   1ecf0:	str	r6, [sp, #20]
   1ecf4:	cmp	lr, #0
   1ecf8:	beq	1ed28 <flatcc_builder_default_alloc@@Base+0x3f0>
   1ecfc:	ldr	ip, [sp, #20]
   1ed00:	ldr	r6, [pc, #364]	; 1ee74 <flatcc_builder_default_alloc@@Base+0x53c>
   1ed04:	add	ip, ip, #1
   1ed08:	add	r7, r7, lr
   1ed0c:	str	r7, [sp, #16]
   1ed10:	ldr	r6, [r4, r6]
   1ed14:	add	r4, sp, #88	; 0x58
   1ed18:	add	r4, r4, ip, lsl #3
   1ed1c:	str	ip, [sp, #20]
   1ed20:	str	r6, [r4, #-72]	; 0xffffffb8
   1ed24:	str	lr, [r4, #-68]	; 0xffffffbc
   1ed28:	cmp	r2, #0
   1ed2c:	sub	r4, r0, r7
   1ed30:	beq	1edc4 <flatcc_builder_default_alloc@@Base+0x48c>
   1ed34:	add	r6, r3, r2
   1ed38:	mvn	ip, #3
   1ed3c:	mov	r2, r3
   1ed40:	b	1ed78 <flatcc_builder_default_alloc@@Base+0x440>
   1ed44:	sub	r0, ip, r4
   1ed48:	add	r0, r0, lr
   1ed4c:	cmp	r3, #0
   1ed50:	str	r0, [r1]
   1ed54:	beq	1ed64 <flatcc_builder_default_alloc@@Base+0x42c>
   1ed58:	ldrb	r0, [r2]
   1ed5c:	cmp	r0, #0
   1ed60:	beq	1ee24 <flatcc_builder_default_alloc@@Base+0x4ec>
   1ed64:	add	r2, r2, #1
   1ed68:	cmp	r2, r6
   1ed6c:	add	r1, r1, #4
   1ed70:	sub	ip, ip, #4
   1ed74:	beq	1edbc <flatcc_builder_default_alloc@@Base+0x484>
   1ed78:	ldr	lr, [r1]
   1ed7c:	cmp	lr, #0
   1ed80:	bne	1ed44 <flatcc_builder_default_alloc@@Base+0x40c>
   1ed84:	cmp	r3, #0
   1ed88:	beq	1ee00 <flatcc_builder_default_alloc@@Base+0x4c8>
   1ed8c:	ldrb	r0, [r2]
   1ed90:	cmp	r0, #0
   1ed94:	beq	1ed64 <flatcc_builder_default_alloc@@Base+0x42c>
   1ed98:	ldr	r3, [pc, #216]	; 1ee78 <flatcc_builder_default_alloc@@Base+0x540>
   1ed9c:	ldr	r1, [pc, #216]	; 1ee7c <flatcc_builder_default_alloc@@Base+0x544>
   1eda0:	ldr	r0, [pc, #216]	; 1ee80 <flatcc_builder_default_alloc@@Base+0x548>
   1eda4:	add	r3, pc, r3
   1eda8:	ldr	r2, [pc, #212]	; 1ee84 <flatcc_builder_default_alloc@@Base+0x54c>
   1edac:	add	r3, r3, #76	; 0x4c
   1edb0:	add	r1, pc, r1
   1edb4:	add	r0, pc, r0
   1edb8:	bl	12a08 <__assert_fail@plt>
   1edbc:	ldr	r0, [r5, #136]	; 0x88
   1edc0:	sub	r4, r0, r7
   1edc4:	cmp	r4, r0
   1edc8:	bge	1ee6c <flatcc_builder_default_alloc@@Base+0x534>
   1edcc:	ldr	r0, [r5, #36]	; 0x24
   1edd0:	ldr	r2, [sp, #20]
   1edd4:	str	r7, [sp]
   1edd8:	mov	r3, r4
   1eddc:	ldr	r6, [r5, #44]	; 0x2c
   1ede0:	add	r1, sp, #24
   1ede4:	blx	r6
   1ede8:	cmp	r0, #0
   1edec:	bne	1ee48 <flatcc_builder_default_alloc@@Base+0x510>
   1edf0:	mov	r0, r4
   1edf4:	str	r4, [r5, #136]	; 0x88
   1edf8:	add	sp, sp, #92	; 0x5c
   1edfc:	pop	{r4, r5, r6, r7, pc}
   1ee00:	ldr	r3, [pc, #128]	; 1ee88 <flatcc_builder_default_alloc@@Base+0x550>
   1ee04:	ldr	r1, [pc, #128]	; 1ee8c <flatcc_builder_default_alloc@@Base+0x554>
   1ee08:	ldr	r0, [pc, #128]	; 1ee90 <flatcc_builder_default_alloc@@Base+0x558>
   1ee0c:	add	r3, pc, r3
   1ee10:	ldr	r2, [pc, #124]	; 1ee94 <flatcc_builder_default_alloc@@Base+0x55c>
   1ee14:	add	r3, r3, #76	; 0x4c
   1ee18:	add	r1, pc, r1
   1ee1c:	add	r0, pc, r0
   1ee20:	bl	12a08 <__assert_fail@plt>
   1ee24:	ldr	r3, [pc, #108]	; 1ee98 <flatcc_builder_default_alloc@@Base+0x560>
   1ee28:	ldr	r1, [pc, #108]	; 1ee9c <flatcc_builder_default_alloc@@Base+0x564>
   1ee2c:	ldr	r0, [pc, #108]	; 1eea0 <flatcc_builder_default_alloc@@Base+0x568>
   1ee30:	add	r3, pc, r3
   1ee34:	ldr	r2, [pc, #104]	; 1eea4 <flatcc_builder_default_alloc@@Base+0x56c>
   1ee38:	add	r3, r3, #76	; 0x4c
   1ee3c:	add	r1, pc, r1
   1ee40:	add	r0, pc, r0
   1ee44:	bl	12a08 <__assert_fail@plt>
   1ee48:	ldr	r3, [pc, #88]	; 1eea8 <flatcc_builder_default_alloc@@Base+0x570>
   1ee4c:	ldr	r1, [pc, #88]	; 1eeac <flatcc_builder_default_alloc@@Base+0x574>
   1ee50:	ldr	r0, [pc, #88]	; 1eeb0 <flatcc_builder_default_alloc@@Base+0x578>
   1ee54:	add	r3, pc, r3
   1ee58:	ldr	r2, [pc, #84]	; 1eeb4 <flatcc_builder_default_alloc@@Base+0x57c>
   1ee5c:	add	r3, r3, #28
   1ee60:	add	r1, pc, r1
   1ee64:	add	r0, pc, r0
   1ee68:	bl	12a08 <__assert_fail@plt>
   1ee6c:	bl	131c4 <__assert_fail@plt+0x7bc>
   1ee70:	andeq	sl, r1, r8, lsr r3
   1ee74:	andeq	r0, r0, r4, rrx
   1ee78:	andeq	r8, r0, r4, lsr sp
   1ee7c:	andeq	r9, r0, r8, ror r4
   1ee80:	andeq	r9, r0, r0, lsl #10
   1ee84:			; <UNDEFINED> instruction: 0x000005b5
   1ee88:	andeq	r8, r0, ip, asr #25
   1ee8c:	andeq	r9, r0, r0, lsl r4
   1ee90:	muleq	r0, r4, r4
   1ee94:			; <UNDEFINED> instruction: 0x000005b7
   1ee98:	andeq	r8, r0, r8, lsr #25
   1ee9c:	andeq	r9, r0, ip, ror #7
   1eea0:	andeq	r9, r0, r4, ror #8
   1eea4:			; <UNDEFINED> instruction: 0x000005b1
   1eea8:	andeq	r8, r0, r4, lsl #25
   1eeac:	andeq	r9, r0, r8, asr #7
   1eeb0:	andeq	r9, r0, ip, asr #8
   1eeb4:	andeq	r0, r0, fp, lsl #5

0001eeb8 <flatcc_builder_flush_vtable_cache@@Base>:
   1eeb8:	ldr	r3, [r0, #116]	; 0x74
   1eebc:	cmp	r3, #0
   1eec0:	bxeq	lr
   1eec4:	ldr	r2, [r0, #96]	; 0x60
   1eec8:	push	{r4, lr}
   1eecc:	mov	r1, #0
   1eed0:	mov	r4, r0
   1eed4:	ldr	r0, [r0, #92]	; 0x5c
   1eed8:	bl	129c0 <memset@plt>
   1eedc:	mov	r2, #16
   1eee0:	mov	r3, #0
   1eee4:	str	r2, [r4, #124]	; 0x7c
   1eee8:	str	r3, [r4, #120]	; 0x78
   1eeec:	pop	{r4, pc}

0001eef0 <flatcc_builder_custom_init@@Base>:
   1eef0:	push	{r4, r5, r6, r7, r8, lr}
   1eef4:	mov	r6, r1
   1eef8:	mov	r7, r2
   1eefc:	mov	r1, #0
   1ef00:	mov	r2, #232	; 0xe8
   1ef04:	mov	r5, r3
   1ef08:	mov	r4, r0
   1ef0c:	ldr	r8, [sp, #24]
   1ef10:	bl	129c0 <memset@plt>
   1ef14:	ldr	r3, [pc, #76]	; 1ef68 <flatcc_builder_custom_init@@Base+0x78>
   1ef18:	cmp	r6, #0
   1ef1c:	add	r3, pc, r3
   1ef20:	beq	1ef50 <flatcc_builder_custom_init@@Base+0x60>
   1ef24:	cmp	r5, #0
   1ef28:	beq	1ef44 <flatcc_builder_custom_init@@Base+0x54>
   1ef2c:	str	r8, [r4, #40]	; 0x28
   1ef30:	str	r5, [r4, #48]	; 0x30
   1ef34:	str	r7, [r4, #36]	; 0x24
   1ef38:	str	r6, [r4, #44]	; 0x2c
   1ef3c:	mov	r0, #0
   1ef40:	pop	{r4, r5, r6, r7, r8, pc}
   1ef44:	ldr	r2, [pc, #32]	; 1ef6c <flatcc_builder_custom_init@@Base+0x7c>
   1ef48:	ldr	r5, [r3, r2]
   1ef4c:	b	1ef2c <flatcc_builder_custom_init@@Base+0x3c>
   1ef50:	ldr	r2, [pc, #24]	; 1ef70 <flatcc_builder_custom_init@@Base+0x80>
   1ef54:	mov	r1, #1
   1ef58:	str	r1, [r4, #184]	; 0xb8
   1ef5c:	add	r7, r4, #188	; 0xbc
   1ef60:	ldr	r6, [r3, r2]
   1ef64:	b	1ef24 <flatcc_builder_custom_init@@Base+0x34>
   1ef68:	ldrdeq	sl, [r1], -ip
   1ef6c:	andeq	r0, r0, r0, ror r0
   1ef70:	andeq	r0, r0, r4, ror r0

0001ef74 <flatcc_builder_init@@Base>:
   1ef74:	push	{lr}		; (str lr, [sp, #-4]!)
   1ef78:	sub	sp, sp, #12
   1ef7c:	mov	r3, #0
   1ef80:	str	r3, [sp]
   1ef84:	mov	r2, r3
   1ef88:	mov	r1, r3
   1ef8c:	bl	1eef0 <flatcc_builder_custom_init@@Base>
   1ef90:	add	sp, sp, #12
   1ef94:	pop	{pc}		; (ldr pc, [sp], #4)

0001ef98 <flatcc_builder_custom_reset@@Base>:
   1ef98:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ef9c:	add	r7, r0, #52	; 0x34
   1efa0:	mov	r4, #0
   1efa4:	sub	sp, sp, #12
   1efa8:	mov	r5, r0
   1efac:	mov	sl, r1
   1efb0:	mov	r8, r2
   1efb4:	mov	r6, r7
   1efb8:	mov	r9, r4
   1efbc:	mov	fp, #1
   1efc0:	b	1f014 <flatcc_builder_custom_reset@@Base+0x7c>
   1efc4:	cmp	r4, #5
   1efc8:	cmpne	r8, #0
   1efcc:	beq	1eff8 <flatcc_builder_custom_reset@@Base+0x60>
   1efd0:	ldr	r0, [r5, #40]	; 0x28
   1efd4:	mov	r3, fp
   1efd8:	str	r4, [sp]
   1efdc:	mov	r2, #1
   1efe0:	mov	r1, r6
   1efe4:	ldr	ip, [r5, #48]	; 0x30
   1efe8:	blx	ip
   1efec:	cmp	r0, #0
   1eff0:	bne	1f0d8 <flatcc_builder_custom_reset@@Base+0x140>
   1eff4:	ldr	r0, [r7, r4, lsl #3]
   1eff8:	ldr	r2, [r6, #4]
   1effc:	mov	r1, r9
   1f000:	bl	129c0 <memset@plt>
   1f004:	add	r4, r4, #1
   1f008:	cmp	r4, #8
   1f00c:	add	r6, r6, #8
   1f010:	beq	1f050 <flatcc_builder_custom_reset@@Base+0xb8>
   1f014:	ldr	r0, [r7, r4, lsl #3]
   1f018:	cmp	r0, #0
   1f01c:	bne	1efc4 <flatcc_builder_custom_reset@@Base+0x2c>
   1f020:	ldr	r3, [r6, #4]
   1f024:	cmp	r3, #0
   1f028:	beq	1f004 <flatcc_builder_custom_reset@@Base+0x6c>
   1f02c:	ldr	r3, [pc, #172]	; 1f0e0 <flatcc_builder_custom_reset@@Base+0x148>
   1f030:	ldr	r1, [pc, #172]	; 1f0e4 <flatcc_builder_custom_reset@@Base+0x14c>
   1f034:	ldr	r0, [pc, #172]	; 1f0e8 <flatcc_builder_custom_reset@@Base+0x150>
   1f038:	add	r3, pc, r3
   1f03c:	ldr	r2, [pc, #168]	; 1f0ec <flatcc_builder_custom_reset@@Base+0x154>
   1f040:	add	r3, r3, #108	; 0x6c
   1f044:	add	r1, pc, r1
   1f048:	add	r0, pc, r0
   1f04c:	bl	12a08 <__assert_fail@plt>
   1f050:	ldr	r2, [r5, #124]	; 0x7c
   1f054:	mov	r3, #0
   1f058:	ldr	r0, [r5, #60]	; 0x3c
   1f05c:	cmp	r2, r3
   1f060:	str	r3, [r5, #120]	; 0x78
   1f064:	ldr	r1, [r5, #76]	; 0x4c
   1f068:	movne	r3, #16
   1f06c:	ldr	r2, [r5, #52]	; 0x34
   1f070:	str	r0, [r5, #16]
   1f074:	ldr	r0, [r5, #184]	; 0xb8
   1f078:	strne	r3, [r5, #124]	; 0x7c
   1f07c:	mov	r3, #0
   1f080:	cmp	sl, #0
   1f084:	strne	r3, [r5, #172]	; 0xac
   1f088:	strne	r3, [r5, #176]	; 0xb0
   1f08c:	strne	r3, [r5, #180]	; 0xb4
   1f090:	cmp	r0, #0
   1f094:	stm	r5, {r1, r2}
   1f098:	strh	r3, [r5, #128]	; 0x80
   1f09c:	str	r3, [r5, #136]	; 0x88
   1f0a0:	str	r3, [r5, #140]	; 0x8c
   1f0a4:	str	r3, [r5, #156]	; 0x9c
   1f0a8:	str	r3, [r5, #160]	; 0xa0
   1f0ac:	str	r3, [r5, #20]
   1f0b0:	str	r3, [r5, #24]
   1f0b4:	str	r3, [r5, #148]	; 0x94
   1f0b8:	str	r3, [r5, #152]	; 0x98
   1f0bc:	str	r3, [r5, #32]
   1f0c0:	beq	1f0d0 <flatcc_builder_custom_reset@@Base+0x138>
   1f0c4:	add	r0, r5, #188	; 0xbc
   1f0c8:	bl	22b74 <flatcc_emitter_reset@@Base>
   1f0cc:	mov	r0, #0
   1f0d0:	add	sp, sp, #12
   1f0d4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f0d8:	mvn	r0, #0
   1f0dc:	b	1f0d0 <flatcc_builder_custom_reset@@Base+0x138>
   1f0e0:	andeq	r8, r0, r0, lsr #21
   1f0e4:	andeq	r9, r0, r4, ror #3
   1f0e8:	andeq	r9, r0, ip, ror r2
   1f0ec:			; <UNDEFINED> instruction: 0x000001b2

0001f0f0 <flatcc_builder_reset@@Base>:
   1f0f0:	mov	r2, #0
   1f0f4:	mov	r1, r2
   1f0f8:	b	1ef98 <flatcc_builder_custom_reset@@Base>

0001f0fc <flatcc_builder_clear@@Base>:
   1f0fc:	push	{r4, r5, r6, r7, r8, lr}
   1f100:	mov	r4, #0
   1f104:	sub	sp, sp, #8
   1f108:	mov	r6, r0
   1f10c:	add	r5, r0, #52	; 0x34
   1f110:	mov	r8, r4
   1f114:	ldr	r0, [r6, #40]	; 0x28
   1f118:	mov	r1, r5
   1f11c:	str	r4, [sp]
   1f120:	mov	r3, r8
   1f124:	add	r4, r4, #1
   1f128:	ldr	r7, [r6, #48]	; 0x30
   1f12c:	mov	r2, #0
   1f130:	blx	r7
   1f134:	cmp	r4, #8
   1f138:	add	r5, r5, #8
   1f13c:	bne	1f114 <flatcc_builder_clear@@Base+0x18>
   1f140:	ldr	r3, [r6, #184]	; 0xb8
   1f144:	cmp	r3, #0
   1f148:	beq	1f154 <flatcc_builder_clear@@Base+0x58>
   1f14c:	add	r0, r6, #188	; 0xbc
   1f150:	bl	22c30 <flatcc_emitter_clear@@Base>
   1f154:	mov	r0, r6
   1f158:	mov	r2, #232	; 0xe8
   1f15c:	mov	r1, #0
   1f160:	add	sp, sp, #8
   1f164:	pop	{r4, r5, r6, r7, r8, lr}
   1f168:	b	129c0 <memset@plt>

0001f16c <flatcc_builder_enter_user_frame_ptr@@Base>:
   1f16c:	push	{r4, r5, r6, r7, r8, lr}
   1f170:	add	r4, r1, #3
   1f174:	bic	r4, r4, #3
   1f178:	ldr	r7, [r0, #228]	; 0xe4
   1f17c:	add	r4, r4, #4
   1f180:	ldr	r3, [r0, #112]	; 0x70
   1f184:	add	r2, r4, r7
   1f188:	cmp	r2, r3
   1f18c:	sub	sp, sp, #8
   1f190:	mov	r6, r0
   1f194:	bhi	1f1dc <flatcc_builder_enter_user_frame_ptr@@Base+0x70>
   1f198:	ldr	r8, [r6, #108]	; 0x6c
   1f19c:	adds	r5, r8, r7
   1f1a0:	beq	1f204 <flatcc_builder_enter_user_frame_ptr@@Base+0x98>
   1f1a4:	mov	r2, r4
   1f1a8:	mov	r1, #0
   1f1ac:	mov	r0, r5
   1f1b0:	bl	129c0 <memset@plt>
   1f1b4:	ldr	r3, [r6, #224]	; 0xe0
   1f1b8:	add	r0, r5, #4
   1f1bc:	str	r3, [r8, r7]
   1f1c0:	ldr	r3, [r6, #228]	; 0xe4
   1f1c4:	add	r4, r4, r3
   1f1c8:	add	r3, r3, #4
   1f1cc:	str	r4, [r6, #228]	; 0xe4
   1f1d0:	str	r3, [r6, #224]	; 0xe0
   1f1d4:	add	sp, sp, #8
   1f1d8:	pop	{r4, r5, r6, r7, r8, pc}
   1f1dc:	mov	r3, #7
   1f1e0:	ldr	r0, [r0, #40]	; 0x28
   1f1e4:	add	r1, r6, #108	; 0x6c
   1f1e8:	str	r3, [sp]
   1f1ec:	mov	r3, #0
   1f1f0:	ldr	r5, [r6, #48]	; 0x30
   1f1f4:	blx	r5
   1f1f8:	cmp	r0, #0
   1f1fc:	beq	1f198 <flatcc_builder_enter_user_frame_ptr@@Base+0x2c>
   1f200:	bl	1315c <__assert_fail@plt+0x754>
   1f204:	mov	r0, r5
   1f208:	b	1f1d4 <flatcc_builder_enter_user_frame_ptr@@Base+0x68>

0001f20c <flatcc_builder_enter_user_frame@@Base>:
   1f20c:	push	{r4, r5, r6, r7, lr}
   1f210:	add	r4, r1, #3
   1f214:	bic	r4, r4, #3
   1f218:	ldr	r6, [r0, #228]	; 0xe4
   1f21c:	add	r4, r4, #4
   1f220:	ldr	r3, [r0, #112]	; 0x70
   1f224:	add	r2, r4, r6
   1f228:	cmp	r2, r3
   1f22c:	sub	sp, sp, #12
   1f230:	mov	r5, r0
   1f234:	bhi	1f274 <flatcc_builder_enter_user_frame@@Base+0x68>
   1f238:	ldr	r7, [r5, #108]	; 0x6c
   1f23c:	adds	r0, r7, r6
   1f240:	beq	1f26c <flatcc_builder_enter_user_frame@@Base+0x60>
   1f244:	mov	r2, r4
   1f248:	mov	r1, #0
   1f24c:	bl	129c0 <memset@plt>
   1f250:	ldr	r3, [r5, #224]	; 0xe0
   1f254:	str	r3, [r7, r6]
   1f258:	ldr	r0, [r5, #228]	; 0xe4
   1f25c:	add	r4, r4, r0
   1f260:	add	r0, r0, #4
   1f264:	str	r4, [r5, #228]	; 0xe4
   1f268:	str	r0, [r5, #224]	; 0xe0
   1f26c:	add	sp, sp, #12
   1f270:	pop	{r4, r5, r6, r7, pc}
   1f274:	mov	r3, #7
   1f278:	ldr	r0, [r0, #40]	; 0x28
   1f27c:	add	r1, r5, #108	; 0x6c
   1f280:	str	r3, [sp]
   1f284:	mov	r3, #0
   1f288:	ldr	r7, [r5, #48]	; 0x30
   1f28c:	blx	r7
   1f290:	cmp	r0, #0
   1f294:	beq	1f238 <flatcc_builder_enter_user_frame@@Base+0x2c>
   1f298:	bl	1315c <__assert_fail@plt+0x754>

0001f29c <flatcc_builder_exit_user_frame@@Base>:
   1f29c:	ldr	r3, [r0, #224]	; 0xe0
   1f2a0:	cmp	r3, #0
   1f2a4:	beq	1f2c8 <flatcc_builder_exit_user_frame@@Base+0x2c>
   1f2a8:	ldr	r2, [r0, #108]	; 0x6c
   1f2ac:	sub	r1, r3, #4
   1f2b0:	add	r3, r2, r3
   1f2b4:	str	r1, [r0, #228]	; 0xe4
   1f2b8:	ldr	r3, [r3, #-4]
   1f2bc:	str	r3, [r0, #224]	; 0xe0
   1f2c0:	mov	r0, r3
   1f2c4:	bx	lr
   1f2c8:	ldr	r3, [pc, #32]	; 1f2f0 <flatcc_builder_exit_user_frame@@Base+0x54>
   1f2cc:	ldr	r1, [pc, #32]	; 1f2f4 <flatcc_builder_exit_user_frame@@Base+0x58>
   1f2d0:	ldr	r0, [pc, #32]	; 1f2f8 <flatcc_builder_exit_user_frame@@Base+0x5c>
   1f2d4:	add	r3, pc, r3
   1f2d8:	push	{r4, lr}
   1f2dc:	add	r3, r3, #136	; 0x88
   1f2e0:	ldr	r2, [pc, #20]	; 1f2fc <flatcc_builder_exit_user_frame@@Base+0x60>
   1f2e4:	add	r1, pc, r1
   1f2e8:	add	r0, pc, r0
   1f2ec:	bl	12a08 <__assert_fail@plt>
   1f2f0:	andeq	r8, r0, r4, lsl #16
   1f2f4:	andeq	r8, r0, r4, asr #30
   1f2f8:	strdeq	r8, [r0], -r0
   1f2fc:	andeq	r0, r0, lr, lsl r2

0001f300 <flatcc_builder_exit_user_frame_at@@Base>:
   1f300:	ldr	r2, [r0, #224]	; 0xe0
   1f304:	cmp	r2, r1
   1f308:	bcc	1f314 <flatcc_builder_exit_user_frame_at@@Base+0x14>
   1f30c:	str	r1, [r0, #224]	; 0xe0
   1f310:	b	1f29c <flatcc_builder_exit_user_frame@@Base>
   1f314:	ldr	r3, [pc, #32]	; 1f33c <flatcc_builder_exit_user_frame_at@@Base+0x3c>
   1f318:	ldr	r1, [pc, #32]	; 1f340 <flatcc_builder_exit_user_frame_at@@Base+0x40>
   1f31c:	ldr	r0, [pc, #32]	; 1f344 <flatcc_builder_exit_user_frame_at@@Base+0x44>
   1f320:	add	r3, pc, r3
   1f324:	push	{r4, lr}
   1f328:	add	r3, r3, #168	; 0xa8
   1f32c:	ldr	r2, [pc, #20]	; 1f348 <flatcc_builder_exit_user_frame_at@@Base+0x48>
   1f330:	add	r1, pc, r1
   1f334:	add	r0, pc, r0
   1f338:	bl	12a08 <__assert_fail@plt>
   1f33c:			; <UNDEFINED> instruction: 0x000087b8
   1f340:	strdeq	r8, [r0], -r8	; <UNPREDICTABLE>
   1f344:	andeq	r8, r0, r0, asr #31
   1f348:	andeq	r0, r0, r7, lsr #4

0001f34c <flatcc_builder_get_current_user_frame@@Base>:
   1f34c:	ldr	r0, [r0, #224]	; 0xe0
   1f350:	bx	lr

0001f354 <flatcc_builder_get_user_frame_ptr@@Base>:
   1f354:	ldr	r0, [r0, #108]	; 0x6c
   1f358:	add	r0, r0, r1
   1f35c:	bx	lr

0001f360 <flatcc_builder_embed_buffer@@Base>:
   1f360:	ldr	ip, [r0, #152]	; 0x98
   1f364:	push	{r4, r5, r6, lr}
   1f368:	mov	r5, r3
   1f36c:	sub	sp, sp, #88	; 0x58
   1f370:	adds	r3, ip, #0
   1f374:	movne	r3, #1
   1f378:	mov	r6, r2
   1f37c:	mov	r2, r1
   1f380:	add	r1, sp, #104	; 0x68
   1f384:	mov	r4, r0
   1f388:	bl	1ea44 <flatcc_builder_default_alloc@@Base+0x10c>
   1f38c:	ldr	ip, [pc, #324]	; 1f4d8 <flatcc_builder_embed_buffer@@Base+0x178>
   1f390:	add	ip, pc, ip
   1f394:	cmp	r0, #0
   1f398:	bne	1f4a0 <flatcc_builder_embed_buffer@@Base+0x140>
   1f39c:	ldr	r2, [sp, #108]	; 0x6c
   1f3a0:	ldr	r1, [r4, #136]	; 0x88
   1f3a4:	ldrh	r3, [sp, #104]	; 0x68
   1f3a8:	tst	r2, #2
   1f3ac:	moveq	lr, #0
   1f3b0:	movne	lr, #4
   1f3b4:	sub	r2, r1, r5
   1f3b8:	sub	r3, r3, #1
   1f3bc:	sub	r2, r2, lr
   1f3c0:	and	r2, r2, r3
   1f3c4:	ldr	r3, [r4, #152]	; 0x98
   1f3c8:	str	r0, [sp, #16]
   1f3cc:	str	r0, [sp, #20]
   1f3d0:	cmp	r3, #0
   1f3d4:	add	r0, r5, r2
   1f3d8:	str	r0, [sp, #12]
   1f3dc:	beq	1f3fc <flatcc_builder_embed_buffer@@Base+0x9c>
   1f3e0:	mov	r3, #4
   1f3e4:	mov	lr, #1
   1f3e8:	add	r0, sp, #12
   1f3ec:	str	r3, [sp, #16]
   1f3f0:	str	r3, [sp, #28]
   1f3f4:	str	r0, [sp, #24]
   1f3f8:	str	lr, [sp, #20]
   1f3fc:	cmp	r5, #0
   1f400:	beq	1f428 <flatcc_builder_embed_buffer@@Base+0xc8>
   1f404:	ldr	r0, [sp, #20]
   1f408:	add	lr, sp, #88	; 0x58
   1f40c:	add	r0, r0, #1
   1f410:	add	r3, r3, r5
   1f414:	add	lr, lr, r0, lsl #3
   1f418:	str	r3, [sp, #16]
   1f41c:	str	r0, [sp, #20]
   1f420:	str	r6, [lr, #-72]	; 0xffffffb8
   1f424:	str	r5, [lr, #-68]	; 0xffffffbc
   1f428:	cmp	r2, #0
   1f42c:	bne	1f470 <flatcc_builder_embed_buffer@@Base+0x110>
   1f430:	sub	r5, r1, r3
   1f434:	cmp	r1, r5
   1f438:	ble	1f4d4 <flatcc_builder_embed_buffer@@Base+0x174>
   1f43c:	ldr	r0, [r4, #36]	; 0x24
   1f440:	ldr	r2, [sp, #20]
   1f444:	str	r3, [sp]
   1f448:	add	r1, sp, #24
   1f44c:	ldr	r6, [r4, #44]	; 0x2c
   1f450:	mov	r3, r5
   1f454:	blx	r6
   1f458:	cmp	r0, #0
   1f45c:	streq	r5, [r4, #136]	; 0x88
   1f460:	bne	1f4b0 <flatcc_builder_embed_buffer@@Base+0x150>
   1f464:	mov	r0, r5
   1f468:	add	sp, sp, #88	; 0x58
   1f46c:	pop	{r4, r5, r6, pc}
   1f470:	ldr	r0, [sp, #20]
   1f474:	ldr	lr, [pc, #96]	; 1f4dc <flatcc_builder_embed_buffer@@Base+0x17c>
   1f478:	add	r0, r0, #1
   1f47c:	add	r3, r3, r2
   1f480:	str	r3, [sp, #16]
   1f484:	ldr	lr, [ip, lr]
   1f488:	add	ip, sp, #88	; 0x58
   1f48c:	add	ip, ip, r0, lsl #3
   1f490:	str	r0, [sp, #20]
   1f494:	str	lr, [ip, #-72]	; 0xffffffb8
   1f498:	str	r2, [ip, #-68]	; 0xffffffbc
   1f49c:	b	1f430 <flatcc_builder_embed_buffer@@Base+0xd0>
   1f4a0:	mov	r5, #0
   1f4a4:	mov	r0, r5
   1f4a8:	add	sp, sp, #88	; 0x58
   1f4ac:	pop	{r4, r5, r6, pc}
   1f4b0:	ldr	r3, [pc, #40]	; 1f4e0 <flatcc_builder_embed_buffer@@Base+0x180>
   1f4b4:	ldr	r1, [pc, #40]	; 1f4e4 <flatcc_builder_embed_buffer@@Base+0x184>
   1f4b8:	ldr	r0, [pc, #40]	; 1f4e8 <flatcc_builder_embed_buffer@@Base+0x188>
   1f4bc:	add	r3, pc, r3
   1f4c0:	ldr	r2, [pc, #36]	; 1f4ec <flatcc_builder_embed_buffer@@Base+0x18c>
   1f4c4:	add	r3, r3, #28
   1f4c8:	add	r1, pc, r1
   1f4cc:	add	r0, pc, r0
   1f4d0:	bl	12a08 <__assert_fail@plt>
   1f4d4:	bl	131c4 <__assert_fail@plt+0x7bc>
   1f4d8:	andeq	r9, r1, r8, ror #24
   1f4dc:	andeq	r0, r0, r4, rrx
   1f4e0:	andeq	r8, r0, ip, lsl r6
   1f4e4:	andeq	r8, r0, r0, ror #26
   1f4e8:	andeq	r8, r0, r4, ror #27
   1f4ec:	andeq	r0, r0, fp, lsl #5

0001f4f0 <flatcc_builder_create_buffer@@Base>:
   1f4f0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f4f4:	sub	sp, sp, #100	; 0x64
   1f4f8:	mov	r5, #0
   1f4fc:	ldr	r8, [sp, #140]	; 0x8c
   1f500:	mov	r9, r1
   1f504:	and	r6, r8, #1
   1f508:	mov	r7, r3
   1f50c:	add	r1, sp, #136	; 0x88
   1f510:	mov	r3, r6
   1f514:	str	r5, [sp, #20]
   1f518:	mov	r4, r0
   1f51c:	bl	1ea44 <flatcc_builder_default_alloc@@Base+0x10c>
   1f520:	ldr	lr, [pc, #516]	; 1f72c <flatcc_builder_create_buffer@@Base+0x23c>
   1f524:	add	lr, pc, lr
   1f528:	cmp	r0, r5
   1f52c:	bne	1f6c0 <flatcc_builder_create_buffer@@Base+0x1d0>
   1f530:	ldrh	r3, [r4, #128]	; 0x80
   1f534:	ldrh	r2, [sp, #136]	; 0x88
   1f538:	uxtb	r5, r6
   1f53c:	cmp	r3, r2
   1f540:	strhcc	r2, [r4, #128]	; 0x80
   1f544:	cmp	r9, #0
   1f548:	sub	r2, r2, #1
   1f54c:	ldrne	r3, [r9]
   1f550:	ldreq	r0, [sp, #20]
   1f554:	ldrne	r0, [r9]
   1f558:	strne	r3, [sp, #20]
   1f55c:	cmp	r0, #0
   1f560:	movne	r0, #4
   1f564:	moveq	r0, #0
   1f568:	ands	r3, r8, #2
   1f56c:	ldr	r8, [r4, #136]	; 0x88
   1f570:	bne	1f690 <flatcc_builder_create_buffer@@Base+0x1a0>
   1f574:	sub	r1, r8, #4
   1f578:	cmp	r5, #0
   1f57c:	sub	r1, r1, r0
   1f580:	and	r2, r2, r1
   1f584:	moveq	r9, #1
   1f588:	moveq	ip, #4
   1f58c:	bne	1f69c <flatcc_builder_create_buffer@@Base+0x1ac>
   1f590:	add	r1, r3, #1
   1f594:	add	sl, sp, #96	; 0x60
   1f598:	add	r1, sl, r1, lsl #3
   1f59c:	mov	fp, #4
   1f5a0:	add	sl, sp, #12
   1f5a4:	cmp	r0, #0
   1f5a8:	str	ip, [sp, #24]
   1f5ac:	str	r9, [sp, #28]
   1f5b0:	str	sl, [r1, #-72]	; 0xffffffb8
   1f5b4:	str	fp, [r1, #-68]	; 0xffffffbc
   1f5b8:	beq	1f5e4 <flatcc_builder_create_buffer@@Base+0xf4>
   1f5bc:	add	r9, r9, #1
   1f5c0:	add	r1, sp, #96	; 0x60
   1f5c4:	add	r9, r1, r9, lsl #3
   1f5c8:	add	r3, r3, #2
   1f5cc:	add	ip, ip, r0
   1f5d0:	str	r3, [sp, #28]
   1f5d4:	add	r3, sp, #20
   1f5d8:	str	r0, [r9, #-68]	; 0xffffffbc
   1f5dc:	str	ip, [sp, #24]
   1f5e0:	str	r3, [r9, #-72]	; 0xffffffb8
   1f5e4:	cmp	r2, #0
   1f5e8:	beq	1f618 <flatcc_builder_create_buffer@@Base+0x128>
   1f5ec:	ldr	r3, [sp, #28]
   1f5f0:	ldr	r1, [pc, #312]	; 1f730 <flatcc_builder_create_buffer@@Base+0x240>
   1f5f4:	add	r3, r3, #1
   1f5f8:	add	ip, ip, r2
   1f5fc:	str	ip, [sp, #24]
   1f600:	ldr	r0, [lr, r1]
   1f604:	add	r1, sp, #96	; 0x60
   1f608:	add	r1, r1, r3, lsl #3
   1f60c:	str	r3, [sp, #28]
   1f610:	str	r0, [r1, #-72]	; 0xffffffb8
   1f614:	str	r2, [r1, #-68]	; 0xffffffbc
   1f618:	cmp	r5, #0
   1f61c:	sub	r5, r8, ip
   1f620:	mov	r3, r5
   1f624:	beq	1f6d0 <flatcc_builder_create_buffer@@Base+0x1e0>
   1f628:	cmp	r6, #0
   1f62c:	add	r3, r5, #4
   1f630:	beq	1f6d0 <flatcc_builder_create_buffer@@Base+0x1e0>
   1f634:	ldr	r2, [r4, #144]	; 0x90
   1f638:	sub	r2, r2, r3
   1f63c:	str	r2, [sp, #16]
   1f640:	sub	r7, r7, r3
   1f644:	cmp	r5, r8
   1f648:	str	r7, [sp, #12]
   1f64c:	mov	r6, r5
   1f650:	bge	1f6e0 <flatcc_builder_create_buffer@@Base+0x1f0>
   1f654:	ldr	r0, [r4, #36]	; 0x24
   1f658:	ldr	r2, [sp, #28]
   1f65c:	str	ip, [sp]
   1f660:	mov	r3, r5
   1f664:	ldr	r7, [r4, #44]	; 0x2c
   1f668:	add	r1, sp, #32
   1f66c:	blx	r7
   1f670:	cmp	r0, #0
   1f674:	bne	1f6e4 <flatcc_builder_create_buffer@@Base+0x1f4>
   1f678:	cmp	r5, #0
   1f67c:	str	r5, [r4, #136]	; 0x88
   1f680:	beq	1f708 <flatcc_builder_create_buffer@@Base+0x218>
   1f684:	mov	r0, r6
   1f688:	add	sp, sp, #100	; 0x64
   1f68c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f690:	sub	r3, r8, #8
   1f694:	sub	r3, r3, r0
   1f698:	and	r2, r2, r3
   1f69c:	mov	ip, #4
   1f6a0:	mov	r3, #1
   1f6a4:	add	r1, sp, #16
   1f6a8:	str	ip, [sp, #36]	; 0x24
   1f6ac:	str	r1, [sp, #32]
   1f6b0:	mov	r5, r3
   1f6b4:	mov	r9, #2
   1f6b8:	mov	ip, #8
   1f6bc:	b	1f590 <flatcc_builder_create_buffer@@Base+0xa0>
   1f6c0:	mov	r6, r5
   1f6c4:	mov	r0, r6
   1f6c8:	add	sp, sp, #100	; 0x64
   1f6cc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f6d0:	ldr	r2, [r4, #140]	; 0x8c
   1f6d4:	sub	r2, r2, r3
   1f6d8:	str	r2, [sp, #16]
   1f6dc:	b	1f640 <flatcc_builder_create_buffer@@Base+0x150>
   1f6e0:	bl	131c4 <__assert_fail@plt+0x7bc>
   1f6e4:	ldr	r3, [pc, #72]	; 1f734 <flatcc_builder_create_buffer@@Base+0x244>
   1f6e8:	ldr	r1, [pc, #72]	; 1f738 <flatcc_builder_create_buffer@@Base+0x248>
   1f6ec:	ldr	r0, [pc, #72]	; 1f73c <flatcc_builder_create_buffer@@Base+0x24c>
   1f6f0:	add	r3, pc, r3
   1f6f4:	ldr	r2, [pc, #68]	; 1f740 <flatcc_builder_create_buffer@@Base+0x250>
   1f6f8:	add	r3, r3, #28
   1f6fc:	add	r1, pc, r1
   1f700:	add	r0, pc, r0
   1f704:	bl	12a08 <__assert_fail@plt>
   1f708:	ldr	r3, [pc, #52]	; 1f744 <flatcc_builder_create_buffer@@Base+0x254>
   1f70c:	ldr	r1, [pc, #52]	; 1f748 <flatcc_builder_create_buffer@@Base+0x258>
   1f710:	ldr	r0, [pc, #52]	; 1f74c <flatcc_builder_create_buffer@@Base+0x25c>
   1f714:	add	r3, pc, r3
   1f718:	mov	r2, #772	; 0x304
   1f71c:	add	r3, r3, #204	; 0xcc
   1f720:	add	r1, pc, r1
   1f724:	add	r0, pc, r0
   1f728:	bl	12a08 <__assert_fail@plt>
   1f72c:	ldrdeq	r9, [r1], -r4
   1f730:	andeq	r0, r0, r4, rrx
   1f734:	andeq	r8, r0, r8, ror #7
   1f738:	andeq	r8, r0, ip, lsr #22
   1f73c:			; <UNDEFINED> instruction: 0x00008bb0
   1f740:	andeq	r0, r0, fp, lsl #5
   1f744:	andeq	r8, r0, r4, asr #7
   1f748:	andeq	r8, r0, r8, lsl #22
   1f74c:	andeq	r8, r0, ip, lsl #23

0001f750 <flatcc_builder_create_struct@@Base>:
   1f750:	push	{r4, r5, r6, lr}
   1f754:	cmp	r3, #0
   1f758:	ldr	lr, [pc, #300]	; 1f88c <flatcc_builder_create_struct@@Base+0x13c>
   1f75c:	sub	sp, sp, #80	; 0x50
   1f760:	add	lr, pc, lr
   1f764:	beq	1f868 <flatcc_builder_create_struct@@Base+0x118>
   1f768:	mov	r5, r0
   1f76c:	ldrh	r0, [r0, #128]	; 0x80
   1f770:	ldr	ip, [r5, #136]	; 0x88
   1f774:	cmp	r0, r3
   1f778:	strhcc	r3, [r5, #128]	; 0x80
   1f77c:	mov	r0, #0
   1f780:	sub	r3, r3, #1
   1f784:	sub	r4, ip, r2
   1f788:	cmp	r2, #0
   1f78c:	and	r3, r3, r4
   1f790:	str	r0, [sp, #8]
   1f794:	str	r0, [sp, #12]
   1f798:	bne	1f818 <flatcc_builder_create_struct@@Base+0xc8>
   1f79c:	cmp	r3, #0
   1f7a0:	movne	r6, #1
   1f7a4:	movne	r1, r2
   1f7a8:	beq	1f840 <flatcc_builder_create_struct@@Base+0xf0>
   1f7ac:	ldr	r0, [pc, #220]	; 1f890 <flatcc_builder_create_struct@@Base+0x140>
   1f7b0:	add	r1, r1, #1
   1f7b4:	add	r2, r2, r3
   1f7b8:	add	r4, sp, #80	; 0x50
   1f7bc:	add	r1, r4, r1, lsl #3
   1f7c0:	str	r2, [sp, #8]
   1f7c4:	sub	r4, ip, r2
   1f7c8:	ldr	r0, [lr, r0]
   1f7cc:	str	r3, [r1, #-68]	; 0xffffffbc
   1f7d0:	str	r0, [r1, #-72]	; 0xffffffb8
   1f7d4:	str	r6, [sp, #12]
   1f7d8:	cmp	ip, r4
   1f7dc:	ble	1f840 <flatcc_builder_create_struct@@Base+0xf0>
   1f7e0:	ldr	r3, [sp, #12]
   1f7e4:	ldr	r0, [r5, #36]	; 0x24
   1f7e8:	add	r1, sp, #16
   1f7ec:	str	r2, [sp]
   1f7f0:	mov	r2, r3
   1f7f4:	ldr	r6, [r5, #44]	; 0x2c
   1f7f8:	mov	r3, r4
   1f7fc:	blx	r6
   1f800:	cmp	r0, #0
   1f804:	bne	1f844 <flatcc_builder_create_struct@@Base+0xf4>
   1f808:	mov	r0, r4
   1f80c:	str	r4, [r5, #136]	; 0x88
   1f810:	add	sp, sp, #80	; 0x50
   1f814:	pop	{r4, r5, r6, pc}
   1f818:	cmp	r3, r0
   1f81c:	mov	r0, #1
   1f820:	str	r1, [sp, #16]
   1f824:	str	r2, [sp, #8]
   1f828:	str	r2, [sp, #20]
   1f82c:	str	r0, [sp, #12]
   1f830:	movne	r1, r0
   1f834:	movne	r6, #2
   1f838:	beq	1f7d8 <flatcc_builder_create_struct@@Base+0x88>
   1f83c:	b	1f7ac <flatcc_builder_create_struct@@Base+0x5c>
   1f840:	bl	131c4 <__assert_fail@plt+0x7bc>
   1f844:	ldr	r3, [pc, #72]	; 1f894 <flatcc_builder_create_struct@@Base+0x144>
   1f848:	ldr	r1, [pc, #72]	; 1f898 <flatcc_builder_create_struct@@Base+0x148>
   1f84c:	ldr	r0, [pc, #72]	; 1f89c <flatcc_builder_create_struct@@Base+0x14c>
   1f850:	add	r3, pc, r3
   1f854:	ldr	r2, [pc, #68]	; 1f8a0 <flatcc_builder_create_struct@@Base+0x150>
   1f858:	add	r3, r3, #28
   1f85c:	add	r1, pc, r1
   1f860:	add	r0, pc, r0
   1f864:	bl	12a08 <__assert_fail@plt>
   1f868:	ldr	r3, [pc, #52]	; 1f8a4 <flatcc_builder_create_struct@@Base+0x154>
   1f86c:	ldr	r1, [pc, #52]	; 1f8a8 <flatcc_builder_create_struct@@Base+0x158>
   1f870:	ldr	r0, [pc, #52]	; 1f8ac <flatcc_builder_create_struct@@Base+0x15c>
   1f874:	add	r3, pc, r3
   1f878:	ldr	r2, [pc, #48]	; 1f8b0 <flatcc_builder_create_struct@@Base+0x160>
   1f87c:	add	r3, r3, #236	; 0xec
   1f880:	add	r1, pc, r1
   1f884:	add	r0, pc, r0
   1f888:	bl	12a08 <__assert_fail@plt>
   1f88c:	muleq	r1, r8, r8
   1f890:	andeq	r0, r0, r4, rrx
   1f894:	andeq	r8, r0, r8, lsl #5
   1f898:	andeq	r8, r0, ip, asr #19
   1f89c:	andeq	r8, r0, r0, asr sl
   1f8a0:	andeq	r0, r0, fp, lsl #5
   1f8a4:	andeq	r8, r0, r4, ror #4
   1f8a8:	andeq	r8, r0, r8, lsr #19
   1f8ac:	muleq	r0, r0, sl
   1f8b0:	andeq	r0, r0, pc, lsl #6

0001f8b4 <flatcc_builder_start_buffer@@Base>:
   1f8b4:	push	{r4, r5, r6, r7, r8, lr}
   1f8b8:	mov	r5, r1
   1f8bc:	ldrh	r1, [r0, #128]	; 0x80
   1f8c0:	mov	r4, r0
   1f8c4:	mov	r7, r2
   1f8c8:	mov	r6, r3
   1f8cc:	bl	1eb74 <flatcc_builder_default_alloc@@Base+0x23c>
   1f8d0:	ldr	r1, [pc, #140]	; 1f964 <flatcc_builder_start_buffer@@Base+0xb0>
   1f8d4:	add	r1, pc, r1
   1f8d8:	cmp	r0, #0
   1f8dc:	bne	1f95c <flatcc_builder_start_buffer@@Base+0xa8>
   1f8e0:	ldrh	r3, [r4, #132]	; 0x84
   1f8e4:	ldr	ip, [r4, #32]
   1f8e8:	mov	r2, #1
   1f8ec:	strh	r2, [r4, #128]	; 0x80
   1f8f0:	strh	r3, [ip, #34]	; 0x22
   1f8f4:	ldrh	r3, [r4, #164]	; 0xa4
   1f8f8:	strh	r7, [r4, #132]	; 0x84
   1f8fc:	cmp	r5, #0
   1f900:	strh	r3, [ip, #32]
   1f904:	ldr	r3, [r4, #144]	; 0x90
   1f908:	strh	r6, [r4, #164]	; 0xa4
   1f90c:	str	r3, [ip, #20]
   1f910:	ldr	r3, [r4, #152]	; 0x98
   1f914:	str	r3, [ip, #28]
   1f918:	ldr	r3, [r4, #148]	; 0x94
   1f91c:	ldr	lr, [r4, #136]	; 0x88
   1f920:	ldr	r2, [r4, #168]	; 0xa8
   1f924:	add	r6, r3, #1
   1f928:	str	r3, [r4, #152]	; 0x98
   1f92c:	str	r6, [r4, #148]	; 0x94
   1f930:	str	lr, [r4, #144]	; 0x90
   1f934:	str	r2, [ip, #16]
   1f938:	beq	1f950 <flatcc_builder_start_buffer@@Base+0x9c>
   1f93c:	ldr	r2, [r5]
   1f940:	mov	r3, #1
   1f944:	str	r2, [r4, #168]	; 0xa8
   1f948:	strh	r3, [ip, #14]
   1f94c:	pop	{r4, r5, r6, r7, r8, pc}
   1f950:	ldr	r3, [pc, #16]	; 1f968 <flatcc_builder_start_buffer@@Base+0xb4>
   1f954:	ldr	r5, [r1, r3]
   1f958:	b	1f93c <flatcc_builder_start_buffer@@Base+0x88>
   1f95c:	mvn	r0, #0
   1f960:	pop	{r4, r5, r6, r7, r8, pc}
   1f964:	andeq	r9, r1, r4, lsr #14
   1f968:	andeq	r0, r0, r4, rrx

0001f96c <flatcc_builder_end_buffer@@Base>:
   1f96c:	ldr	ip, [r0, #32]
   1f970:	ldrh	r2, [r0, #164]	; 0xa4
   1f974:	push	{r4, r5, r6, lr}
   1f978:	mov	r4, r0
   1f97c:	ldrh	ip, [ip, #14]
   1f980:	ldr	r0, [r0, #152]	; 0x98
   1f984:	and	r2, r2, #2
   1f988:	cmp	r0, #0
   1f98c:	moveq	r0, r2
   1f990:	orrne	r0, r2, #1
   1f994:	cmp	ip, #1
   1f998:	sub	sp, sp, #8
   1f99c:	bne	1fa7c <flatcc_builder_end_buffer@@Base+0x110>
   1f9a0:	ldrh	r2, [r4, #132]	; 0x84
   1f9a4:	ldrh	ip, [r4, #128]	; 0x80
   1f9a8:	mov	r3, r1
   1f9ac:	add	r1, r4, #168	; 0xa8
   1f9b0:	cmp	r2, ip
   1f9b4:	movhi	ip, r2
   1f9b8:	strhhi	r2, [r4, #128]	; 0x80
   1f9bc:	str	r0, [sp, #4]
   1f9c0:	str	ip, [sp]
   1f9c4:	mov	r0, r4
   1f9c8:	bl	1f4f0 <flatcc_builder_create_buffer@@Base>
   1f9cc:	subs	r5, r0, #0
   1f9d0:	beq	1fa70 <flatcc_builder_end_buffer@@Base+0x104>
   1f9d4:	ldr	r3, [r4, #32]
   1f9d8:	ldr	r2, [r4, #20]
   1f9dc:	mov	r1, #0
   1f9e0:	ldr	ip, [r3, #20]
   1f9e4:	ldr	r0, [r4, #16]
   1f9e8:	str	ip, [r4, #144]	; 0x90
   1f9ec:	ldr	ip, [r3, #28]
   1f9f0:	str	ip, [r4, #152]	; 0x98
   1f9f4:	ldr	ip, [r3, #16]
   1f9f8:	str	ip, [r4, #168]	; 0xa8
   1f9fc:	ldrh	r3, [r3, #32]
   1fa00:	strh	r3, [r4, #164]	; 0xa4
   1fa04:	bl	129c0 <memset@plt>
   1fa08:	ldr	r3, [r4, #32]
   1fa0c:	ldr	r2, [r4, #64]	; 0x40
   1fa10:	ldrh	lr, [r4, #130]	; 0x82
   1fa14:	ldr	ip, [r3]
   1fa18:	ldr	r1, [r3, #4]
   1fa1c:	ldrh	r0, [r4, #128]	; 0x80
   1fa20:	sub	r2, r2, ip
   1fa24:	cmp	r2, r1
   1fa28:	movcs	r2, r1
   1fa2c:	cmp	r0, lr
   1fa30:	ldr	r0, [r4, #60]	; 0x3c
   1fa34:	ldr	r6, [r3, #8]
   1fa38:	str	r2, [r4, #24]
   1fa3c:	add	r2, r0, ip
   1fa40:	str	r2, [r4, #16]
   1fa44:	str	r6, [r4, #20]
   1fa48:	ldr	r2, [r4, #156]	; 0x9c
   1fa4c:	str	ip, [r4, #28]
   1fa50:	str	r1, [r3, #4]
   1fa54:	strhcc	lr, [r4, #128]	; 0x80
   1fa58:	ldrh	r1, [r3, #12]
   1fa5c:	sub	r2, r2, #1
   1fa60:	sub	r3, r3, #36	; 0x24
   1fa64:	str	r2, [r4, #156]	; 0x9c
   1fa68:	strh	r1, [r4, #130]	; 0x82
   1fa6c:	str	r3, [r4, #32]
   1fa70:	mov	r0, r5
   1fa74:	add	sp, sp, #8
   1fa78:	pop	{r4, r5, r6, pc}
   1fa7c:	ldr	r3, [pc, #28]	; 1faa0 <flatcc_builder_end_buffer@@Base+0x134>
   1fa80:	ldr	r1, [pc, #28]	; 1faa4 <flatcc_builder_end_buffer@@Base+0x138>
   1fa84:	ldr	r0, [pc, #28]	; 1faa8 <flatcc_builder_end_buffer@@Base+0x13c>
   1fa88:	add	r3, pc, r3
   1fa8c:	ldr	r2, [pc, #24]	; 1faac <flatcc_builder_end_buffer@@Base+0x140>
   1fa90:	add	r3, r3, #268	; 0x10c
   1fa94:	add	r1, pc, r1
   1fa98:	add	r0, pc, r0
   1fa9c:	bl	12a08 <__assert_fail@plt>
   1faa0:	andeq	r8, r0, r0, asr r0
   1faa4:	muleq	r0, r4, r7
   1faa8:	andeq	r8, r0, r8, lsl #17
   1faac:	andeq	r0, r0, r6, asr #6

0001fab0 <flatcc_builder_start_struct@@Base>:
   1fab0:	push	{r4, r5, r6, lr}
   1fab4:	mov	r5, r1
   1fab8:	mov	r1, r2
   1fabc:	mov	r4, r0
   1fac0:	bl	1eb74 <flatcc_builder_default_alloc@@Base+0x23c>
   1fac4:	cmp	r0, #0
   1fac8:	bne	1fb48 <flatcc_builder_start_struct@@Base+0x98>
   1facc:	ldr	r2, [r4, #28]
   1fad0:	ldr	r3, [r4, #64]	; 0x40
   1fad4:	ldr	r0, [r4, #60]	; 0x3c
   1fad8:	ldr	ip, [r4, #32]
   1fadc:	sub	r3, r3, r2
   1fae0:	cmn	r3, #4
   1fae4:	ldr	r6, [r4, #20]
   1fae8:	add	r0, r0, r2
   1faec:	mov	r2, #2
   1faf0:	strh	r2, [ip, #14]
   1faf4:	mvnhi	r2, #3
   1faf8:	movhi	r3, r2
   1fafc:	add	r5, r5, r6
   1fb00:	strhi	r2, [r4, #24]
   1fb04:	strls	r3, [r4, #24]
   1fb08:	mvn	r2, #3
   1fb0c:	cmp	r5, r3
   1fb10:	str	r0, [r4, #16]
   1fb14:	str	r2, [ip, #4]
   1fb18:	str	r5, [r4, #20]
   1fb1c:	bcs	1fb28 <flatcc_builder_start_struct@@Base+0x78>
   1fb20:	add	r0, r0, r6
   1fb24:	pop	{r4, r5, r6, pc}
   1fb28:	add	r1, r5, #1
   1fb2c:	mov	r0, r4
   1fb30:	bl	1e8c4 <time_struct_buffer@@Base+0x98>
   1fb34:	cmp	r0, #0
   1fb38:	bne	1fb48 <flatcc_builder_start_struct@@Base+0x98>
   1fb3c:	ldr	r0, [r4, #16]
   1fb40:	add	r0, r0, r6
   1fb44:	pop	{r4, r5, r6, pc}
   1fb48:	mov	r0, #0
   1fb4c:	pop	{r4, r5, r6, pc}

0001fb50 <flatcc_builder_struct_edit@@Base>:
   1fb50:	ldr	r0, [r0, #16]
   1fb54:	bx	lr

0001fb58 <flatcc_builder_end_struct@@Base>:
   1fb58:	ldr	r3, [r0, #32]
   1fb5c:	push	{r4, r5, r6, lr}
   1fb60:	ldrh	r3, [r3, #14]
   1fb64:	cmp	r3, #2
   1fb68:	bne	1fc08 <flatcc_builder_end_struct@@Base+0xb0>
   1fb6c:	ldrh	r3, [r0, #130]	; 0x82
   1fb70:	ldr	r2, [r0, #20]
   1fb74:	ldr	r1, [r0, #16]
   1fb78:	mov	r4, r0
   1fb7c:	bl	1f750 <flatcc_builder_create_struct@@Base>
   1fb80:	subs	r5, r0, #0
   1fb84:	beq	1fc00 <flatcc_builder_end_struct@@Base+0xa8>
   1fb88:	ldr	r2, [r4, #20]
   1fb8c:	mov	r1, #0
   1fb90:	ldr	r0, [r4, #16]
   1fb94:	bl	129c0 <memset@plt>
   1fb98:	ldr	r3, [r4, #32]
   1fb9c:	ldr	r2, [r4, #64]	; 0x40
   1fba0:	ldrh	lr, [r4, #130]	; 0x82
   1fba4:	ldr	ip, [r3]
   1fba8:	ldr	r1, [r3, #4]
   1fbac:	ldrh	r0, [r4, #128]	; 0x80
   1fbb0:	sub	r2, r2, ip
   1fbb4:	cmp	r2, r1
   1fbb8:	movcs	r2, r1
   1fbbc:	cmp	r0, lr
   1fbc0:	ldr	r0, [r4, #60]	; 0x3c
   1fbc4:	ldr	r6, [r3, #8]
   1fbc8:	str	r2, [r4, #24]
   1fbcc:	add	r2, r0, ip
   1fbd0:	str	r2, [r4, #16]
   1fbd4:	str	r6, [r4, #20]
   1fbd8:	ldr	r2, [r4, #156]	; 0x9c
   1fbdc:	str	ip, [r4, #28]
   1fbe0:	str	r1, [r3, #4]
   1fbe4:	strhcc	lr, [r4, #128]	; 0x80
   1fbe8:	ldrh	r1, [r3, #12]
   1fbec:	sub	r2, r2, #1
   1fbf0:	sub	r3, r3, #36	; 0x24
   1fbf4:	str	r2, [r4, #156]	; 0x9c
   1fbf8:	strh	r1, [r4, #130]	; 0x82
   1fbfc:	str	r3, [r4, #32]
   1fc00:	mov	r0, r5
   1fc04:	pop	{r4, r5, r6, pc}
   1fc08:	ldr	r3, [pc, #28]	; 1fc2c <flatcc_builder_end_struct@@Base+0xd4>
   1fc0c:	ldr	r1, [pc, #28]	; 1fc30 <flatcc_builder_end_struct@@Base+0xd8>
   1fc10:	ldr	r0, [pc, #28]	; 1fc34 <flatcc_builder_end_struct@@Base+0xdc>
   1fc14:	add	r3, pc, r3
   1fc18:	mov	r2, #872	; 0x368
   1fc1c:	add	r3, r3, #296	; 0x128
   1fc20:	add	r1, pc, r1
   1fc24:	add	r0, pc, r0
   1fc28:	bl	12a08 <__assert_fail@plt>
   1fc2c:	andeq	r7, r0, r4, asr #29
   1fc30:	andeq	r8, r0, r8, lsl #12
   1fc34:	andeq	r8, r0, r8, lsr #14

0001fc38 <flatcc_builder_extend_vector@@Base>:
   1fc38:	ldr	r2, [r0, #32]
   1fc3c:	push	{r4, r5, r6, lr}
   1fc40:	ldr	r3, [r2, #20]
   1fc44:	ldr	r4, [r2, #24]
   1fc48:	add	ip, r1, r3
   1fc4c:	cmp	r3, ip
   1fc50:	movls	r3, #0
   1fc54:	movhi	r3, #1
   1fc58:	cmp	r4, ip
   1fc5c:	movcs	r4, r3
   1fc60:	orrcc	r4, r3, #1
   1fc64:	cmp	r4, #0
   1fc68:	bne	1fcb8 <flatcc_builder_extend_vector@@Base+0x80>
   1fc6c:	ldr	lr, [r2, #16]
   1fc70:	str	ip, [r2, #20]
   1fc74:	ldr	r6, [r0, #20]
   1fc78:	ldr	r3, [r0, #24]
   1fc7c:	mla	r1, lr, r1, r6
   1fc80:	mov	r5, r0
   1fc84:	cmp	r1, r3
   1fc88:	str	r1, [r0, #20]
   1fc8c:	bcs	1fc9c <flatcc_builder_extend_vector@@Base+0x64>
   1fc90:	ldr	r0, [r5, #16]
   1fc94:	add	r0, r0, r6
   1fc98:	pop	{r4, r5, r6, pc}
   1fc9c:	add	r1, r1, #1
   1fca0:	mvn	r2, #3
   1fca4:	bl	1e8c4 <time_struct_buffer@@Base+0x98>
   1fca8:	cmp	r0, #0
   1fcac:	beq	1fc90 <flatcc_builder_extend_vector@@Base+0x58>
   1fcb0:	mov	r0, r4
   1fcb4:	pop	{r4, r5, r6, pc}
   1fcb8:	bl	131fc <__assert_fail@plt+0x7f4>

0001fcbc <flatcc_builder_vector_push@@Base>:
   1fcbc:	ldr	r3, [r0, #32]
   1fcc0:	push	{r4, r5, r6, r7, r8, lr}
   1fcc4:	ldrh	r2, [r3, #14]
   1fcc8:	cmp	r2, #4
   1fccc:	bne	1fd74 <flatcc_builder_vector_push@@Base+0xb8>
   1fcd0:	mov	r6, r1
   1fcd4:	ldr	r2, [r3, #20]
   1fcd8:	ldr	r1, [r3, #24]
   1fcdc:	cmp	r2, r1
   1fce0:	bhi	1fd50 <flatcc_builder_vector_push@@Base+0x94>
   1fce4:	add	r2, r2, #1
   1fce8:	str	r2, [r3, #20]
   1fcec:	ldr	r7, [r3, #16]
   1fcf0:	ldr	r5, [r0, #20]
   1fcf4:	ldr	r3, [r0, #24]
   1fcf8:	add	r1, r7, r5
   1fcfc:	cmp	r1, r3
   1fd00:	mov	r4, r0
   1fd04:	str	r1, [r0, #20]
   1fd08:	bcs	1fd34 <flatcc_builder_vector_push@@Base+0x78>
   1fd0c:	ldr	r3, [r4, #16]
   1fd10:	adds	r3, r3, r5
   1fd14:	beq	1fd2c <flatcc_builder_vector_push@@Base+0x70>
   1fd18:	mov	r0, r3
   1fd1c:	mov	r2, r7
   1fd20:	mov	r1, r6
   1fd24:	bl	12930 <memcpy@plt>
   1fd28:	mov	r3, r0
   1fd2c:	mov	r0, r3
   1fd30:	pop	{r4, r5, r6, r7, r8, pc}
   1fd34:	add	r1, r1, #1
   1fd38:	mvn	r2, #3
   1fd3c:	bl	1e8c4 <time_struct_buffer@@Base+0x98>
   1fd40:	cmp	r0, #0
   1fd44:	beq	1fd0c <flatcc_builder_vector_push@@Base+0x50>
   1fd48:	mov	r3, #0
   1fd4c:	b	1fd2c <flatcc_builder_vector_push@@Base+0x70>
   1fd50:	ldr	r3, [pc, #64]	; 1fd98 <flatcc_builder_vector_push@@Base+0xdc>
   1fd54:	ldr	r1, [pc, #64]	; 1fd9c <flatcc_builder_vector_push@@Base+0xe0>
   1fd58:	ldr	r0, [pc, #64]	; 1fda0 <flatcc_builder_vector_push@@Base+0xe4>
   1fd5c:	add	r3, pc, r3
   1fd60:	mov	r2, #908	; 0x38c
   1fd64:	add	r3, r3, #324	; 0x144
   1fd68:	add	r1, pc, r1
   1fd6c:	add	r0, pc, r0
   1fd70:	bl	12a08 <__assert_fail@plt>
   1fd74:	ldr	r3, [pc, #40]	; 1fda4 <flatcc_builder_vector_push@@Base+0xe8>
   1fd78:	ldr	r1, [pc, #40]	; 1fda8 <flatcc_builder_vector_push@@Base+0xec>
   1fd7c:	ldr	r0, [pc, #40]	; 1fdac <flatcc_builder_vector_push@@Base+0xf0>
   1fd80:	add	r3, pc, r3
   1fd84:	ldr	r2, [pc, #36]	; 1fdb0 <flatcc_builder_vector_push@@Base+0xf4>
   1fd88:	add	r3, r3, #324	; 0x144
   1fd8c:	add	r1, pc, r1
   1fd90:	add	r0, pc, r0
   1fd94:	bl	12a08 <__assert_fail@plt>
   1fd98:	andeq	r7, r0, ip, ror sp
   1fd9c:	andeq	r8, r0, r0, asr #9
   1fda0:	andeq	r8, r0, r8, lsr r6
   1fda4:	andeq	r7, r0, r8, asr sp
   1fda8:	muleq	r0, ip, r4
   1fdac:	andeq	r8, r0, r8, ror #11
   1fdb0:	andeq	r0, r0, fp, lsl #7

0001fdb4 <flatcc_builder_append_vector@@Base>:
   1fdb4:	push	{r4, r5, r6, r7, r8, lr}
   1fdb8:	mov	r7, r1
   1fdbc:	ldr	r1, [r0, #32]
   1fdc0:	ldrh	r3, [r1, #14]
   1fdc4:	cmp	r3, #4
   1fdc8:	bne	1fe68 <flatcc_builder_append_vector@@Base+0xb4>
   1fdcc:	ldr	r3, [r1, #20]
   1fdd0:	ldr	r4, [r1, #24]
   1fdd4:	add	ip, r2, r3
   1fdd8:	cmp	r3, ip
   1fddc:	movls	r3, #0
   1fde0:	movhi	r3, #1
   1fde4:	cmp	r4, ip
   1fde8:	movcs	r4, r3
   1fdec:	orrcc	r4, r3, #1
   1fdf0:	cmp	r4, #0
   1fdf4:	bne	1fe64 <flatcc_builder_append_vector@@Base+0xb0>
   1fdf8:	ldr	r6, [r1, #16]
   1fdfc:	str	ip, [r1, #20]
   1fe00:	ldr	r8, [r0, #20]
   1fe04:	mul	r6, r6, r2
   1fe08:	ldr	r3, [r0, #24]
   1fe0c:	add	r1, r6, r8
   1fe10:	cmp	r1, r3
   1fe14:	mov	r5, r0
   1fe18:	str	r1, [r0, #20]
   1fe1c:	bcs	1fe48 <flatcc_builder_append_vector@@Base+0x94>
   1fe20:	ldr	r3, [r5, #16]
   1fe24:	adds	r3, r3, r8
   1fe28:	beq	1fe40 <flatcc_builder_append_vector@@Base+0x8c>
   1fe2c:	mov	r0, r3
   1fe30:	mov	r2, r6
   1fe34:	mov	r1, r7
   1fe38:	bl	12930 <memcpy@plt>
   1fe3c:	mov	r3, r0
   1fe40:	mov	r0, r3
   1fe44:	pop	{r4, r5, r6, r7, r8, pc}
   1fe48:	add	r1, r1, #1
   1fe4c:	mvn	r2, #3
   1fe50:	bl	1e8c4 <time_struct_buffer@@Base+0x98>
   1fe54:	cmp	r0, #0
   1fe58:	beq	1fe20 <flatcc_builder_append_vector@@Base+0x6c>
   1fe5c:	mov	r3, r4
   1fe60:	b	1fe40 <flatcc_builder_append_vector@@Base+0x8c>
   1fe64:	bl	131fc <__assert_fail@plt+0x7f4>
   1fe68:	ldr	r3, [pc, #28]	; 1fe8c <flatcc_builder_append_vector@@Base+0xd8>
   1fe6c:	ldr	r1, [pc, #28]	; 1fe90 <flatcc_builder_append_vector@@Base+0xdc>
   1fe70:	ldr	r0, [pc, #28]	; 1fe94 <flatcc_builder_append_vector@@Base+0xe0>
   1fe74:	add	r3, pc, r3
   1fe78:	ldr	r2, [pc, #24]	; 1fe98 <flatcc_builder_append_vector@@Base+0xe4>
   1fe7c:	add	r3, r3, #352	; 0x160
   1fe80:	add	r1, pc, r1
   1fe84:	add	r0, pc, r0
   1fe88:	bl	12a08 <__assert_fail@plt>
   1fe8c:	andeq	r7, r0, r4, ror #24
   1fe90:	andeq	r8, r0, r8, lsr #7
   1fe94:	strdeq	r8, [r0], -r4
   1fe98:	muleq	r0, r3, r3

0001fe9c <flatcc_builder_extend_offset_vector@@Base>:
   1fe9c:	ldr	ip, [r0, #32]
   1fea0:	push	{r4, r5, r6, lr}
   1fea4:	ldr	r3, [ip, #20]
   1fea8:	adds	r2, r1, r3
   1feac:	movcs	r3, #1
   1feb0:	movcc	r3, #0
   1feb4:	cmn	r2, #-1073741823	; 0xc0000001
   1feb8:	movls	r4, #0
   1febc:	movhi	r4, #1
   1fec0:	orrs	r4, r3, r4
   1fec4:	bne	1ff10 <flatcc_builder_extend_offset_vector@@Base+0x74>
   1fec8:	str	r2, [ip, #20]
   1fecc:	ldr	r6, [r0, #20]
   1fed0:	ldr	r3, [r0, #24]
   1fed4:	add	r1, r6, r1, lsl #2
   1fed8:	cmp	r1, r3
   1fedc:	mov	r5, r0
   1fee0:	str	r1, [r0, #20]
   1fee4:	bcs	1fef4 <flatcc_builder_extend_offset_vector@@Base+0x58>
   1fee8:	ldr	r0, [r5, #16]
   1feec:	add	r0, r0, r6
   1fef0:	pop	{r4, r5, r6, pc}
   1fef4:	add	r1, r1, #1
   1fef8:	mvn	r2, #3
   1fefc:	bl	1e8c4 <time_struct_buffer@@Base+0x98>
   1ff00:	cmp	r0, #0
   1ff04:	beq	1fee8 <flatcc_builder_extend_offset_vector@@Base+0x4c>
   1ff08:	mov	r0, r4
   1ff0c:	pop	{r4, r5, r6, pc}
   1ff10:	bl	131fc <__assert_fail@plt+0x7f4>

0001ff14 <flatcc_builder_offset_vector_push@@Base>:
   1ff14:	ldr	r2, [r0, #32]
   1ff18:	push	{r4, r5, r6, lr}
   1ff1c:	ldrh	r3, [r2, #14]
   1ff20:	cmp	r3, #5
   1ff24:	bne	1ff8c <flatcc_builder_offset_vector_push@@Base+0x78>
   1ff28:	ldr	r3, [r2, #20]
   1ff2c:	cmn	r3, #-1073741823	; 0xc0000001
   1ff30:	beq	1ff84 <flatcc_builder_offset_vector_push@@Base+0x70>
   1ff34:	add	r3, r3, #1
   1ff38:	str	r3, [r2, #20]
   1ff3c:	ldr	r5, [r0, #20]
   1ff40:	ldr	r2, [r0, #24]
   1ff44:	add	r3, r5, #4
   1ff48:	cmp	r3, r2
   1ff4c:	mov	r4, r0
   1ff50:	mov	r6, r1
   1ff54:	str	r3, [r0, #20]
   1ff58:	bcs	1ff70 <flatcc_builder_offset_vector_push@@Base+0x5c>
   1ff5c:	ldr	r3, [r4, #16]
   1ff60:	adds	r0, r3, r5
   1ff64:	beq	1ffb0 <flatcc_builder_offset_vector_push@@Base+0x9c>
   1ff68:	str	r6, [r3, r5]
   1ff6c:	pop	{r4, r5, r6, pc}
   1ff70:	mvn	r2, #3
   1ff74:	add	r1, r5, #5
   1ff78:	bl	1e8c4 <time_struct_buffer@@Base+0x98>
   1ff7c:	cmp	r0, #0
   1ff80:	beq	1ff5c <flatcc_builder_offset_vector_push@@Base+0x48>
   1ff84:	mov	r0, #0
   1ff88:	pop	{r4, r5, r6, pc}
   1ff8c:	ldr	r3, [pc, #32]	; 1ffb4 <flatcc_builder_offset_vector_push@@Base+0xa0>
   1ff90:	ldr	r1, [pc, #32]	; 1ffb8 <flatcc_builder_offset_vector_push@@Base+0xa4>
   1ff94:	ldr	r0, [pc, #32]	; 1ffbc <flatcc_builder_offset_vector_push@@Base+0xa8>
   1ff98:	add	r3, pc, r3
   1ff9c:	ldr	r2, [pc, #28]	; 1ffc0 <flatcc_builder_offset_vector_push@@Base+0xac>
   1ffa0:	add	r3, r3, #384	; 0x180
   1ffa4:	add	r1, pc, r1
   1ffa8:	add	r0, pc, r0
   1ffac:	bl	12a08 <__assert_fail@plt>
   1ffb0:	pop	{r4, r5, r6, pc}
   1ffb4:	andeq	r7, r0, r0, asr #22
   1ffb8:	andeq	r8, r0, r4, lsl #5
   1ffbc:	andeq	r8, r0, ip, lsr r4
   1ffc0:	andeq	r0, r0, r6, lsr #7

0001ffc4 <flatcc_builder_append_offset_vector@@Base>:
   1ffc4:	ldr	ip, [r0, #32]
   1ffc8:	push	{r4, r5, r6, r7, r8, lr}
   1ffcc:	ldrh	r3, [ip, #14]
   1ffd0:	cmp	r3, #5
   1ffd4:	bne	2006c <flatcc_builder_append_offset_vector@@Base+0xa8>
   1ffd8:	mov	r6, r1
   1ffdc:	ldr	r1, [ip, #20]
   1ffe0:	adds	r1, r2, r1
   1ffe4:	movcs	lr, #1
   1ffe8:	movcc	lr, #0
   1ffec:	cmn	r1, #-1073741823	; 0xc0000001
   1fff0:	movls	r3, #0
   1fff4:	movhi	r3, #1
   1fff8:	orrs	r8, lr, r3
   1fffc:	bne	20068 <flatcc_builder_append_offset_vector@@Base+0xa4>
   20000:	str	r1, [ip, #20]
   20004:	ldr	r7, [r0, #20]
   20008:	lsl	r4, r2, #2
   2000c:	ldr	r3, [r0, #24]
   20010:	add	r1, r4, r7
   20014:	cmp	r1, r3
   20018:	mov	r5, r0
   2001c:	str	r1, [r0, #20]
   20020:	bcs	2004c <flatcc_builder_append_offset_vector@@Base+0x88>
   20024:	ldr	r3, [r5, #16]
   20028:	adds	r3, r3, r7
   2002c:	beq	20044 <flatcc_builder_append_offset_vector@@Base+0x80>
   20030:	mov	r0, r3
   20034:	mov	r2, r4
   20038:	mov	r1, r6
   2003c:	bl	12930 <memcpy@plt>
   20040:	mov	r3, r0
   20044:	mov	r0, r3
   20048:	pop	{r4, r5, r6, r7, r8, pc}
   2004c:	add	r1, r1, #1
   20050:	mvn	r2, #3
   20054:	bl	1e8c4 <time_struct_buffer@@Base+0x98>
   20058:	cmp	r0, #0
   2005c:	beq	20024 <flatcc_builder_append_offset_vector@@Base+0x60>
   20060:	mov	r3, r8
   20064:	b	20044 <flatcc_builder_append_offset_vector@@Base+0x80>
   20068:	bl	131fc <__assert_fail@plt+0x7f4>
   2006c:	ldr	r3, [pc, #28]	; 20090 <flatcc_builder_append_offset_vector@@Base+0xcc>
   20070:	ldr	r1, [pc, #28]	; 20094 <flatcc_builder_append_offset_vector@@Base+0xd0>
   20074:	ldr	r0, [pc, #28]	; 20098 <flatcc_builder_append_offset_vector@@Base+0xd4>
   20078:	add	r3, pc, r3
   2007c:	mov	r2, #948	; 0x3b4
   20080:	add	r3, r3, #420	; 0x1a4
   20084:	add	r1, pc, r1
   20088:	add	r0, pc, r0
   2008c:	bl	12a08 <__assert_fail@plt>
   20090:	andeq	r7, r0, r0, ror #20
   20094:	andeq	r8, r0, r4, lsr #3
   20098:	andeq	r8, r0, ip, asr r3

0002009c <flatcc_builder_extend_string@@Base>:
   2009c:	ldr	r2, [r0, #32]
   200a0:	push	{r4, r5, r6, lr}
   200a4:	ldrh	r3, [r2, #14]
   200a8:	cmp	r3, #6
   200ac:	bne	20108 <flatcc_builder_extend_string@@Base+0x6c>
   200b0:	ldr	r3, [r2, #20]
   200b4:	adds	r3, r1, r3
   200b8:	bcs	20104 <flatcc_builder_extend_string@@Base+0x68>
   200bc:	str	r3, [r2, #20]
   200c0:	ldr	r5, [r0, #20]
   200c4:	ldr	r3, [r0, #24]
   200c8:	add	r1, r1, r5
   200cc:	cmp	r1, r3
   200d0:	mov	r4, r0
   200d4:	str	r1, [r0, #20]
   200d8:	bcs	200e8 <flatcc_builder_extend_string@@Base+0x4c>
   200dc:	ldr	r0, [r4, #16]
   200e0:	add	r0, r0, r5
   200e4:	pop	{r4, r5, r6, pc}
   200e8:	add	r1, r1, #1
   200ec:	mvn	r2, #3
   200f0:	bl	1e8c4 <time_struct_buffer@@Base+0x98>
   200f4:	cmp	r0, #0
   200f8:	beq	200dc <flatcc_builder_extend_string@@Base+0x40>
   200fc:	mov	r0, #0
   20100:	pop	{r4, r5, r6, pc}
   20104:	bl	131fc <__assert_fail@plt+0x7f4>
   20108:	ldr	r3, [pc, #28]	; 2012c <flatcc_builder_extend_string@@Base+0x90>
   2010c:	ldr	r1, [pc, #28]	; 20130 <flatcc_builder_extend_string@@Base+0x94>
   20110:	ldr	r0, [pc, #28]	; 20134 <flatcc_builder_extend_string@@Base+0x98>
   20114:	add	r3, pc, r3
   20118:	ldr	r2, [pc, #24]	; 20138 <flatcc_builder_extend_string@@Base+0x9c>
   2011c:	add	r3, r3, #456	; 0x1c8
   20120:	add	r1, pc, r1
   20124:	add	r0, pc, r0
   20128:	bl	12a08 <__assert_fail@plt>
   2012c:	andeq	r7, r0, r4, asr #19
   20130:	andeq	r8, r0, r8, lsl #2
   20134:	strdeq	r8, [r0], -r4
   20138:			; <UNDEFINED> instruction: 0x000003bd

0002013c <flatcc_builder_append_string@@Base>:
   2013c:	push	{r4, r5, r6, r7, r8, lr}
   20140:	mov	r7, r1
   20144:	ldr	r1, [r0, #32]
   20148:	ldrh	r3, [r1, #14]
   2014c:	cmp	r3, #6
   20150:	bne	201cc <flatcc_builder_append_string@@Base+0x90>
   20154:	ldr	r3, [r1, #20]
   20158:	mov	r5, r2
   2015c:	adds	r3, r2, r3
   20160:	bcs	201c8 <flatcc_builder_append_string@@Base+0x8c>
   20164:	str	r3, [r1, #20]
   20168:	ldr	r6, [r0, #20]
   2016c:	ldr	r3, [r0, #24]
   20170:	add	r1, r2, r6
   20174:	cmp	r1, r3
   20178:	mov	r4, r0
   2017c:	str	r1, [r0, #20]
   20180:	bcs	201ac <flatcc_builder_append_string@@Base+0x70>
   20184:	ldr	r3, [r4, #16]
   20188:	adds	r3, r3, r6
   2018c:	beq	201a4 <flatcc_builder_append_string@@Base+0x68>
   20190:	mov	r0, r3
   20194:	mov	r2, r5
   20198:	mov	r1, r7
   2019c:	bl	12930 <memcpy@plt>
   201a0:	mov	r3, r0
   201a4:	mov	r0, r3
   201a8:	pop	{r4, r5, r6, r7, r8, pc}
   201ac:	add	r1, r1, #1
   201b0:	mvn	r2, #3
   201b4:	bl	1e8c4 <time_struct_buffer@@Base+0x98>
   201b8:	cmp	r0, #0
   201bc:	beq	20184 <flatcc_builder_append_string@@Base+0x48>
   201c0:	mov	r3, #0
   201c4:	b	201a4 <flatcc_builder_append_string@@Base+0x68>
   201c8:	bl	131fc <__assert_fail@plt+0x7f4>
   201cc:	ldr	r3, [pc, #28]	; 201f0 <flatcc_builder_append_string@@Base+0xb4>
   201d0:	ldr	r1, [pc, #28]	; 201f4 <flatcc_builder_append_string@@Base+0xb8>
   201d4:	ldr	r0, [pc, #28]	; 201f8 <flatcc_builder_append_string@@Base+0xbc>
   201d8:	add	r3, pc, r3
   201dc:	ldr	r2, [pc, #24]	; 201fc <flatcc_builder_append_string@@Base+0xc0>
   201e0:	add	r3, r3, #488	; 0x1e8
   201e4:	add	r1, pc, r1
   201e8:	add	r0, pc, r0
   201ec:	bl	12a08 <__assert_fail@plt>
   201f0:	andeq	r7, r0, r0, lsl #18
   201f4:	andeq	r8, r0, r4, asr #32
   201f8:	andeq	r8, r0, r0, lsr r2
   201fc:	andeq	r0, r0, r6, asr #7

00020200 <flatcc_builder_append_string_str@@Base>:
   20200:	push	{r4, r5, r6, lr}
   20204:	mov	r5, r0
   20208:	mov	r0, r1
   2020c:	mov	r4, r1
   20210:	bl	1299c <strlen@plt>
   20214:	mov	r1, r4
   20218:	mov	r2, r0
   2021c:	mov	r0, r5
   20220:	pop	{r4, r5, r6, lr}
   20224:	b	2013c <flatcc_builder_append_string@@Base>

00020228 <flatcc_builder_append_string_strn@@Base>:
   20228:	push	{r4, r5, r6, lr}
   2022c:	mov	r4, r1
   20230:	mov	r6, r0
   20234:	mov	r1, #0
   20238:	mov	r0, r4
   2023c:	mov	r5, r2
   20240:	bl	129d8 <memchr@plt>
   20244:	mov	r1, r4
   20248:	cmp	r0, #0
   2024c:	subne	r5, r0, r4
   20250:	mov	r2, r5
   20254:	mov	r0, r6
   20258:	pop	{r4, r5, r6, lr}
   2025c:	b	2013c <flatcc_builder_append_string@@Base>

00020260 <flatcc_builder_truncate_vector@@Base>:
   20260:	ldr	r3, [r0, #32]
   20264:	push	{r4, lr}
   20268:	ldrh	r2, [r3, #14]
   2026c:	cmp	r2, #4
   20270:	bne	202b4 <flatcc_builder_truncate_vector@@Base+0x54>
   20274:	ldr	ip, [r3, #20]
   20278:	cmp	ip, r1
   2027c:	bcc	202d8 <flatcc_builder_truncate_vector@@Base+0x78>
   20280:	ldr	r2, [r3, #16]
   20284:	sub	ip, ip, r1
   20288:	str	ip, [r3, #20]
   2028c:	mul	r2, r2, r1
   20290:	ldr	r3, [r0, #20]
   20294:	ldr	r1, [r0, #16]
   20298:	sub	r3, r3, r2
   2029c:	str	r3, [r0, #20]
   202a0:	add	r0, r1, r3
   202a4:	mov	r1, #0
   202a8:	bl	129c0 <memset@plt>
   202ac:	mov	r0, #0
   202b0:	pop	{r4, pc}
   202b4:	ldr	r3, [pc, #64]	; 202fc <flatcc_builder_truncate_vector@@Base+0x9c>
   202b8:	ldr	r1, [pc, #64]	; 20300 <flatcc_builder_truncate_vector@@Base+0xa0>
   202bc:	ldr	r0, [pc, #64]	; 20304 <flatcc_builder_truncate_vector@@Base+0xa4>
   202c0:	add	r3, pc, r3
   202c4:	ldr	r2, [pc, #60]	; 20308 <flatcc_builder_truncate_vector@@Base+0xa8>
   202c8:	add	r3, r3, #520	; 0x208
   202cc:	add	r1, pc, r1
   202d0:	add	r0, pc, r0
   202d4:	bl	12a08 <__assert_fail@plt>
   202d8:	ldr	r3, [pc, #44]	; 2030c <flatcc_builder_truncate_vector@@Base+0xac>
   202dc:	ldr	r1, [pc, #44]	; 20310 <flatcc_builder_truncate_vector@@Base+0xb0>
   202e0:	ldr	r0, [pc, #44]	; 20314 <flatcc_builder_truncate_vector@@Base+0xb4>
   202e4:	add	r3, pc, r3
   202e8:	ldr	r2, [pc, #40]	; 20318 <flatcc_builder_truncate_vector@@Base+0xb8>
   202ec:	add	r3, r3, #520	; 0x208
   202f0:	add	r1, pc, r1
   202f4:	add	r0, pc, r0
   202f8:	bl	12a08 <__assert_fail@plt>
   202fc:	andeq	r7, r0, r8, lsl r8
   20300:	andeq	r7, r0, ip, asr pc
   20304:	andeq	r8, r0, r8, lsr #1
   20308:	ldrdeq	r0, [r0], -r9
   2030c:	strdeq	r7, [r0], -r4
   20310:	andeq	r7, r0, r8, lsr pc
   20314:	andeq	r8, r0, r0, asr r1
   20318:	ldrdeq	r0, [r0], -sl

0002031c <flatcc_builder_truncate_offset_vector@@Base>:
   2031c:	ldr	r3, [r0, #32]
   20320:	push	{r4, lr}
   20324:	ldrh	r2, [r3, #14]
   20328:	cmp	r2, #5
   2032c:	bne	20370 <flatcc_builder_truncate_offset_vector@@Base+0x54>
   20330:	ldr	ip, [r3, #20]
   20334:	cmp	ip, r1
   20338:	bcc	20394 <flatcc_builder_truncate_offset_vector@@Base+0x78>
   2033c:	ldr	r2, [r3, #16]
   20340:	sub	ip, ip, r1
   20344:	str	ip, [r3, #20]
   20348:	mul	r2, r2, r1
   2034c:	ldr	r3, [r0, #20]
   20350:	ldr	r1, [r0, #16]
   20354:	sub	r3, r3, r2
   20358:	str	r3, [r0, #20]
   2035c:	add	r0, r1, r3
   20360:	mov	r1, #0
   20364:	bl	129c0 <memset@plt>
   20368:	mov	r0, #0
   2036c:	pop	{r4, pc}
   20370:	ldr	r3, [pc, #64]	; 203b8 <flatcc_builder_truncate_offset_vector@@Base+0x9c>
   20374:	ldr	r1, [pc, #64]	; 203bc <flatcc_builder_truncate_offset_vector@@Base+0xa0>
   20378:	ldr	r0, [pc, #64]	; 203c0 <flatcc_builder_truncate_offset_vector@@Base+0xa4>
   2037c:	add	r3, pc, r3
   20380:	ldr	r2, [pc, #60]	; 203c4 <flatcc_builder_truncate_offset_vector@@Base+0xa8>
   20384:	add	r3, r3, #552	; 0x228
   20388:	add	r1, pc, r1
   2038c:	add	r0, pc, r0
   20390:	bl	12a08 <__assert_fail@plt>
   20394:	ldr	r3, [pc, #44]	; 203c8 <flatcc_builder_truncate_offset_vector@@Base+0xac>
   20398:	ldr	r1, [pc, #44]	; 203cc <flatcc_builder_truncate_offset_vector@@Base+0xb0>
   2039c:	ldr	r0, [pc, #44]	; 203d0 <flatcc_builder_truncate_offset_vector@@Base+0xb4>
   203a0:	add	r3, pc, r3
   203a4:	ldr	r2, [pc, #40]	; 203d4 <flatcc_builder_truncate_offset_vector@@Base+0xb8>
   203a8:	add	r3, r3, #552	; 0x228
   203ac:	add	r1, pc, r1
   203b0:	add	r0, pc, r0
   203b4:	bl	12a08 <__assert_fail@plt>
   203b8:	andeq	r7, r0, ip, asr r7
   203bc:	andeq	r7, r0, r0, lsr #29
   203c0:	andeq	r8, r0, r8, asr r0
   203c4:	andeq	r0, r0, r2, ror #7
   203c8:	andeq	r7, r0, r8, lsr r7
   203cc:	andeq	r7, r0, ip, ror lr
   203d0:	strheq	r8, [r0], -r8	; <UNPREDICTABLE>
   203d4:	andeq	r0, r0, r3, ror #7

000203d8 <flatcc_builder_truncate_string@@Base>:
   203d8:	ldr	r2, [r0, #32]
   203dc:	push	{r4, lr}
   203e0:	ldrh	r3, [r2, #14]
   203e4:	cmp	r3, #6
   203e8:	bne	20428 <flatcc_builder_truncate_string@@Base+0x50>
   203ec:	ldr	r3, [r2, #20]
   203f0:	cmp	r3, r1
   203f4:	bcc	2044c <flatcc_builder_truncate_string@@Base+0x74>
   203f8:	sub	r3, r3, r1
   203fc:	str	r3, [r2, #20]
   20400:	ldr	r3, [r0, #20]
   20404:	ldr	r2, [r0, #16]
   20408:	sub	r3, r3, r1
   2040c:	str	r3, [r0, #20]
   20410:	add	r0, r2, r3
   20414:	mov	r2, r1
   20418:	mov	r1, #0
   2041c:	bl	129c0 <memset@plt>
   20420:	mov	r0, #0
   20424:	pop	{r4, pc}
   20428:	ldr	r3, [pc, #64]	; 20470 <flatcc_builder_truncate_string@@Base+0x98>
   2042c:	ldr	r1, [pc, #64]	; 20474 <flatcc_builder_truncate_string@@Base+0x9c>
   20430:	ldr	r0, [pc, #64]	; 20478 <flatcc_builder_truncate_string@@Base+0xa0>
   20434:	add	r3, pc, r3
   20438:	ldr	r2, [pc, #60]	; 2047c <flatcc_builder_truncate_string@@Base+0xa4>
   2043c:	add	r3, r3, #592	; 0x250
   20440:	add	r1, pc, r1
   20444:	add	r0, pc, r0
   20448:	bl	12a08 <__assert_fail@plt>
   2044c:	ldr	r3, [pc, #44]	; 20480 <flatcc_builder_truncate_string@@Base+0xa8>
   20450:	ldr	r1, [pc, #44]	; 20484 <flatcc_builder_truncate_string@@Base+0xac>
   20454:	ldr	r0, [pc, #44]	; 20488 <flatcc_builder_truncate_string@@Base+0xb0>
   20458:	add	r3, pc, r3
   2045c:	mov	r2, #1004	; 0x3ec
   20460:	add	r3, r3, #592	; 0x250
   20464:	add	r1, pc, r1
   20468:	add	r0, pc, r0
   2046c:	bl	12a08 <__assert_fail@plt>
   20470:	andeq	r7, r0, r4, lsr #13
   20474:	andeq	r7, r0, r8, ror #27
   20478:	ldrdeq	r7, [r0], -r4
   2047c:	andeq	r0, r0, fp, ror #7
   20480:	andeq	r7, r0, r0, lsl #13
   20484:	andeq	r7, r0, r4, asr #27
   20488:	andeq	r8, r0, ip, lsr r0

0002048c <flatcc_builder_start_vector@@Base>:
   2048c:	cmp	r2, #4
   20490:	push	{r4, r5, r6, lr}
   20494:	mov	r6, r1
   20498:	movcs	r1, r2
   2049c:	movcc	r1, #4
   204a0:	mov	r5, r3
   204a4:	mov	r4, r0
   204a8:	bl	1eb74 <flatcc_builder_default_alloc@@Base+0x23c>
   204ac:	cmp	r0, #0
   204b0:	bne	204fc <flatcc_builder_start_vector@@Base+0x70>
   204b4:	ldr	r2, [r4, #32]
   204b8:	mov	lr, #4
   204bc:	str	r6, [r2, #16]
   204c0:	str	r0, [r2, #20]
   204c4:	str	r5, [r2, #24]
   204c8:	ldr	ip, [r4, #28]
   204cc:	ldr	r3, [r4, #64]	; 0x40
   204d0:	ldr	r1, [r4, #60]	; 0x3c
   204d4:	sub	r3, r3, ip
   204d8:	cmn	r3, #4
   204dc:	mvnhi	r3, #3
   204e0:	strh	lr, [r2, #14]
   204e4:	add	r1, r1, ip
   204e8:	str	r3, [r4, #24]
   204ec:	mvn	r3, #3
   204f0:	str	r1, [r4, #16]
   204f4:	str	r3, [r2, #4]
   204f8:	pop	{r4, r5, r6, pc}
   204fc:	mvn	r0, #0
   20500:	pop	{r4, r5, r6, pc}

00020504 <flatcc_builder_start_offset_vector@@Base>:
   20504:	push	{r4, lr}
   20508:	mov	r1, #4
   2050c:	mov	r4, r0
   20510:	bl	1eb74 <flatcc_builder_default_alloc@@Base+0x23c>
   20514:	cmp	r0, #0
   20518:	bne	20564 <flatcc_builder_start_offset_vector@@Base+0x60>
   2051c:	ldr	r3, [r4, #32]
   20520:	mov	r2, #4
   20524:	mov	lr, #5
   20528:	str	r0, [r3, #20]
   2052c:	str	r2, [r3, #16]
   20530:	ldr	ip, [r4, #28]
   20534:	ldr	r2, [r4, #64]	; 0x40
   20538:	ldr	r1, [r4, #60]	; 0x3c
   2053c:	sub	r2, r2, ip
   20540:	cmn	r2, #4
   20544:	mvnhi	r2, #3
   20548:	strh	lr, [r3, #14]
   2054c:	add	r1, r1, ip
   20550:	str	r2, [r4, #24]
   20554:	mvn	r2, #3
   20558:	str	r1, [r4, #16]
   2055c:	str	r2, [r3, #4]
   20560:	pop	{r4, pc}
   20564:	mvn	r0, #0
   20568:	pop	{r4, pc}

0002056c <flatcc_builder_start_string@@Base>:
   2056c:	push	{r4, lr}
   20570:	mov	r1, #1
   20574:	mov	r4, r0
   20578:	bl	1eb74 <flatcc_builder_default_alloc@@Base+0x23c>
   2057c:	cmp	r0, #0
   20580:	bne	205cc <flatcc_builder_start_string@@Base+0x60>
   20584:	ldr	r3, [r4, #32]
   20588:	mov	r2, #1
   2058c:	mov	lr, #6
   20590:	str	r0, [r3, #20]
   20594:	str	r2, [r3, #16]
   20598:	ldr	ip, [r4, #28]
   2059c:	ldr	r2, [r4, #64]	; 0x40
   205a0:	ldr	r1, [r4, #60]	; 0x3c
   205a4:	sub	r2, r2, ip
   205a8:	cmn	r2, #4
   205ac:	mvnhi	r2, #3
   205b0:	strh	lr, [r3, #14]
   205b4:	add	r1, r1, ip
   205b8:	str	r2, [r4, #24]
   205bc:	mvn	r2, #3
   205c0:	str	r1, [r4, #16]
   205c4:	str	r2, [r3, #4]
   205c8:	pop	{r4, pc}
   205cc:	mvn	r0, #0
   205d0:	pop	{r4, pc}

000205d4 <flatcc_builder_reserve_table@@Base>:
   205d4:	cmp	r1, #0
   205d8:	push	{r4, r5, r6, r7, lr}
   205dc:	sub	sp, sp, #12
   205e0:	blt	206b8 <flatcc_builder_reserve_table@@Base+0xe4>
   205e4:	ldr	r2, [r0, #32]
   205e8:	add	r1, r1, #2
   205ec:	mov	r5, r0
   205f0:	ldrh	r6, [r2, #28]
   205f4:	ldr	r3, [r2, #16]
   205f8:	ldr	r0, [r0, #56]	; 0x38
   205fc:	lsl	r4, r1, #1
   20600:	add	r6, r3, r6, lsl #1
   20604:	add	r2, r6, r4
   20608:	cmp	r2, r0
   2060c:	bhi	20668 <flatcc_builder_reserve_table@@Base+0x94>
   20610:	ldr	r3, [r5, #52]	; 0x34
   20614:	adds	r3, r3, r6
   20618:	streq	r3, [r5, #4]
   2061c:	mvneq	r0, #0
   20620:	beq	20660 <flatcc_builder_reserve_table@@Base+0x8c>
   20624:	ldr	r2, [r5, #32]
   20628:	add	r3, r3, #4
   2062c:	str	r3, [r5, #4]
   20630:	ldr	r6, [r2, #20]
   20634:	ldr	r3, [r5, #80]	; 0x50
   20638:	add	r2, r4, r6
   2063c:	sub	r2, r2, #3
   20640:	cmp	r2, r3
   20644:	bhi	20690 <flatcc_builder_reserve_table@@Base+0xbc>
   20648:	ldr	r3, [r5, #76]	; 0x4c
   2064c:	add	r3, r3, r6
   20650:	cmp	r3, #0
   20654:	movne	r0, #0
   20658:	mvneq	r0, #0
   2065c:	str	r3, [r5]
   20660:	add	sp, sp, #12
   20664:	pop	{r4, r5, r6, r7, pc}
   20668:	mov	r3, #0
   2066c:	ldr	r0, [r5, #40]	; 0x28
   20670:	add	r1, r5, #52	; 0x34
   20674:	str	r3, [sp]
   20678:	mov	r3, #1
   2067c:	ldr	r7, [r5, #48]	; 0x30
   20680:	blx	r7
   20684:	cmp	r0, #0
   20688:	beq	20610 <flatcc_builder_reserve_table@@Base+0x3c>
   2068c:	bl	1315c <__assert_fail@plt+0x754>
   20690:	mov	r3, #3
   20694:	ldr	r0, [r5, #40]	; 0x28
   20698:	add	r1, r5, #76	; 0x4c
   2069c:	str	r3, [sp]
   206a0:	mov	r3, #0
   206a4:	ldr	r4, [r5, #48]	; 0x30
   206a8:	blx	r4
   206ac:	cmp	r0, #0
   206b0:	beq	20648 <flatcc_builder_reserve_table@@Base+0x74>
   206b4:	b	2068c <flatcc_builder_reserve_table@@Base+0xb8>
   206b8:	ldr	r3, [pc, #28]	; 206dc <flatcc_builder_reserve_table@@Base+0x108>
   206bc:	ldr	r1, [pc, #28]	; 206e0 <flatcc_builder_reserve_table@@Base+0x10c>
   206c0:	ldr	r0, [pc, #28]	; 206e4 <flatcc_builder_reserve_table@@Base+0x110>
   206c4:	add	r3, pc, r3
   206c8:	ldr	r2, [pc, #24]	; 206e8 <flatcc_builder_reserve_table@@Base+0x114>
   206cc:	add	r3, r3, #624	; 0x270
   206d0:	add	r1, pc, r1
   206d4:	add	r0, pc, r0
   206d8:	bl	12a08 <__assert_fail@plt>
   206dc:	andeq	r7, r0, r4, lsl r4
   206e0:	andeq	r7, r0, r8, asr fp
   206e4:	strdeq	r7, [r0], -r4
   206e8:	andeq	r0, r0, r9, lsr #8

000206ec <flatcc_builder_start_table@@Base>:
   206ec:	push	{r4, r5, r6, r7, r8, lr}
   206f0:	mov	r5, r1
   206f4:	sub	sp, sp, #8
   206f8:	mov	r1, #4
   206fc:	mov	r4, r0
   20700:	bl	1eb74 <flatcc_builder_default_alloc@@Base+0x23c>
   20704:	subs	r7, r0, #0
   20708:	bne	20840 <flatcc_builder_start_table@@Base+0x154>
   2070c:	ldr	r3, [r4, #52]	; 0x34
   20710:	ldr	r6, [r4, #4]
   20714:	ldr	r0, [r4, #32]
   20718:	sub	r6, r6, r3
   2071c:	add	r5, r5, #2
   20720:	str	r6, [r0, #16]
   20724:	ldr	r1, [r4, #76]	; 0x4c
   20728:	ldr	r2, [r4]
   2072c:	lsl	r5, r5, #1
   20730:	sub	r2, r2, r1
   20734:	str	r2, [r0, #20]
   20738:	ldr	r2, [r4, #12]
   2073c:	ldr	lr, [pc, #268]	; 20850 <flatcc_builder_start_table@@Base+0x164>
   20740:	str	r2, [r0, #24]
   20744:	ldrh	r2, [r4, #8]
   20748:	mov	r1, #3
   2074c:	strh	r2, [r0, #28]
   20750:	add	r6, r6, r2, lsl #1
   20754:	ldr	ip, [r4, #56]	; 0x38
   20758:	add	r2, r6, r5
   2075c:	cmp	r2, ip
   20760:	strh	r7, [r4, #8]
   20764:	str	lr, [r4, #12]
   20768:	strh	r1, [r0, #14]
   2076c:	bhi	207f0 <flatcc_builder_start_table@@Base+0x104>
   20770:	adds	r6, r3, r6
   20774:	streq	r6, [r4, #4]
   20778:	beq	20840 <flatcc_builder_start_table@@Base+0x154>
   2077c:	ldr	r3, [r4, #32]
   20780:	add	r6, r6, #4
   20784:	str	r6, [r4, #4]
   20788:	ldr	r6, [r3, #20]
   2078c:	sub	r2, r5, #3
   20790:	ldr	r3, [r4, #80]	; 0x50
   20794:	add	r2, r2, r6
   20798:	cmp	r2, r3
   2079c:	bhi	20818 <flatcc_builder_start_table@@Base+0x12c>
   207a0:	ldr	r3, [r4, #76]	; 0x4c
   207a4:	add	r3, r3, r6
   207a8:	cmp	r3, #0
   207ac:	str	r3, [r4]
   207b0:	beq	20840 <flatcc_builder_start_table@@Base+0x154>
   207b4:	ldr	r0, [r4, #28]
   207b8:	ldr	r3, [r4, #64]	; 0x40
   207bc:	ldr	r2, [pc, #144]	; 20854 <flatcc_builder_start_table@@Base+0x168>
   207c0:	sub	r3, r3, r0
   207c4:	ldr	r1, [r4, #60]	; 0x3c
   207c8:	ldr	ip, [r4, #32]
   207cc:	cmp	r3, r2
   207d0:	add	r1, r1, r0
   207d4:	movcs	r3, r2
   207d8:	str	r1, [r4, #16]
   207dc:	str	r3, [r4, #24]
   207e0:	mov	r0, r7
   207e4:	str	r2, [ip, #4]
   207e8:	add	sp, sp, #8
   207ec:	pop	{r4, r5, r6, r7, r8, pc}
   207f0:	ldr	r0, [r4, #40]	; 0x28
   207f4:	mov	r3, #1
   207f8:	str	r7, [sp]
   207fc:	add	r1, r4, #52	; 0x34
   20800:	ldr	r8, [r4, #48]	; 0x30
   20804:	blx	r8
   20808:	cmp	r0, #0
   2080c:	bne	2083c <flatcc_builder_start_table@@Base+0x150>
   20810:	ldr	r3, [r4, #52]	; 0x34
   20814:	b	20770 <flatcc_builder_start_table@@Base+0x84>
   20818:	mov	r3, #3
   2081c:	ldr	r0, [r4, #40]	; 0x28
   20820:	add	r1, r4, #76	; 0x4c
   20824:	str	r3, [sp]
   20828:	mov	r3, #0
   2082c:	ldr	r5, [r4, #48]	; 0x30
   20830:	blx	r5
   20834:	cmp	r0, #0
   20838:	beq	207a0 <flatcc_builder_start_table@@Base+0xb4>
   2083c:	bl	1315c <__assert_fail@plt+0x754>
   20840:	mvn	r7, #0
   20844:	mov	r0, r7
   20848:	add	sp, sp, #8
   2084c:	pop	{r4, r5, r6, r7, r8, pc}
   20850:	svccs	0x00693b52
   20854:	strdeq	pc, [r0], -ip

00020858 <flatcc_builder_create_vtable@@Base>:
   20858:	push	{r4, r5, r6, lr}
   2085c:	sub	sp, sp, #80	; 0x50
   20860:	subs	r3, r2, #0
   20864:	mov	r2, #0
   20868:	mov	r4, r0
   2086c:	str	r2, [sp, #8]
   20870:	str	r2, [sp, #12]
   20874:	beq	208ec <flatcc_builder_create_vtable@@Base+0x94>
   20878:	ldr	r0, [r0, #152]	; 0x98
   2087c:	mov	r2, #1
   20880:	cmp	r0, #0
   20884:	str	r1, [sp, #16]
   20888:	str	r3, [sp, #8]
   2088c:	str	r3, [sp, #20]
   20890:	str	r2, [sp, #12]
   20894:	mov	r1, r3
   20898:	beq	20908 <flatcc_builder_create_vtable@@Base+0xb0>
   2089c:	ldr	r2, [r4, #136]	; 0x88
   208a0:	sub	r5, r2, r3
   208a4:	cmp	r2, r5
   208a8:	ble	20904 <flatcc_builder_create_vtable@@Base+0xac>
   208ac:	ldr	r0, [r4, #36]	; 0x24
   208b0:	ldr	r2, [sp, #12]
   208b4:	str	r3, [sp]
   208b8:	add	r1, sp, #16
   208bc:	ldr	r6, [r4, #44]	; 0x2c
   208c0:	mov	r3, r5
   208c4:	blx	r6
   208c8:	cmp	r0, #0
   208cc:	bne	2097c <flatcc_builder_create_vtable@@Base+0x124>
   208d0:	cmp	r5, #0
   208d4:	str	r5, [r4, #136]	; 0x88
   208d8:	beq	208e0 <flatcc_builder_create_vtable@@Base+0x88>
   208dc:	add	r5, r5, #1
   208e0:	mov	r0, r5
   208e4:	add	sp, sp, #80	; 0x50
   208e8:	pop	{r4, r5, r6, pc}
   208ec:	ldr	r3, [r0, #152]	; 0x98
   208f0:	cmp	r3, #0
   208f4:	bne	20904 <flatcc_builder_create_vtable@@Base+0xac>
   208f8:	ldr	r3, [r0, #180]	; 0xb4
   208fc:	cmp	r3, #0
   20900:	beq	20970 <flatcc_builder_create_vtable@@Base+0x118>
   20904:	bl	131c4 <__assert_fail@plt+0x7bc>
   20908:	ldr	r2, [r4, #180]	; 0xb4
   2090c:	cmp	r2, #0
   20910:	bne	2089c <flatcc_builder_create_vtable@@Base+0x44>
   20914:	ldr	r5, [r4, #140]	; 0x8c
   20918:	add	r3, r5, r3
   2091c:	cmp	r5, r3
   20920:	str	r3, [r4, #140]	; 0x8c
   20924:	bgt	209a0 <flatcc_builder_create_vtable@@Base+0x148>
   20928:	ldr	r0, [r4, #36]	; 0x24
   2092c:	ldr	r2, [sp, #12]
   20930:	str	r1, [sp]
   20934:	mov	r3, r5
   20938:	ldr	r4, [r4, #44]	; 0x2c
   2093c:	add	r1, sp, #16
   20940:	blx	r4
   20944:	cmp	r0, #0
   20948:	beq	208dc <flatcc_builder_create_vtable@@Base+0x84>
   2094c:	ldr	r3, [pc, #80]	; 209a4 <flatcc_builder_create_vtable@@Base+0x14c>
   20950:	ldr	r1, [pc, #80]	; 209a8 <flatcc_builder_create_vtable@@Base+0x150>
   20954:	ldr	r0, [pc, #80]	; 209ac <flatcc_builder_create_vtable@@Base+0x154>
   20958:	add	r3, pc, r3
   2095c:	ldr	r2, [pc, #76]	; 209b0 <flatcc_builder_create_vtable@@Base+0x158>
   20960:	add	r3, r3, #16
   20964:	add	r1, pc, r1
   20968:	add	r0, pc, r0
   2096c:	bl	12a08 <__assert_fail@plt>
   20970:	ldr	r5, [r4, #140]	; 0x8c
   20974:	mov	r1, r3
   20978:	b	20928 <flatcc_builder_create_vtable@@Base+0xd0>
   2097c:	ldr	r3, [pc, #48]	; 209b4 <flatcc_builder_create_vtable@@Base+0x15c>
   20980:	ldr	r1, [pc, #48]	; 209b8 <flatcc_builder_create_vtable@@Base+0x160>
   20984:	ldr	r0, [pc, #48]	; 209bc <flatcc_builder_create_vtable@@Base+0x164>
   20988:	add	r3, pc, r3
   2098c:	ldr	r2, [pc, #44]	; 209c0 <flatcc_builder_create_vtable@@Base+0x168>
   20990:	add	r3, r3, #28
   20994:	add	r1, pc, r1
   20998:	add	r0, pc, r0
   2099c:	bl	12a08 <__assert_fail@plt>
   209a0:	bl	1318c <__assert_fail@plt+0x784>
   209a4:	andeq	r7, r0, r0, lsl #3
   209a8:	andeq	r7, r0, r4, asr #17
   209ac:	andeq	r7, r0, r8, asr #18
   209b0:	andeq	r0, r0, r5, lsr #5
   209b4:	andeq	r7, r0, r0, asr r1
   209b8:	muleq	r0, r4, r8
   209bc:	andeq	r7, r0, r8, lsl r9
   209c0:	andeq	r0, r0, fp, lsl #5

000209c4 <flatcc_builder_create_cached_vtable@@Base>:
   209c4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   209c8:	sub	sp, sp, #28
   209cc:	ldr	r4, [r0, #116]	; 0x74
   209d0:	mov	sl, r3
   209d4:	cmp	r4, #0
   209d8:	mov	r8, r0
   209dc:	str	r1, [sp, #8]
   209e0:	mov	r7, r2
   209e4:	rsbne	r3, r4, #32
   209e8:	beq	20b40 <flatcc_builder_create_cached_vtable@@Base+0x17c>
   209ec:	lsr	sl, sl, r3
   209f0:	ldr	r3, [r8, #92]	; 0x5c
   209f4:	adds	r2, r3, sl, lsl #2
   209f8:	str	r3, [sp, #16]
   209fc:	str	r2, [sp, #20]
   20a00:	beq	20b34 <flatcc_builder_create_cached_vtable@@Base+0x170>
   20a04:	ldr	r5, [r3, sl, lsl #2]
   20a08:	cmp	r5, #0
   20a0c:	beq	20c30 <flatcc_builder_create_cached_vtable@@Base+0x26c>
   20a10:	mov	r3, #0
   20a14:	ldr	fp, [r8, #100]	; 0x64
   20a18:	ldr	r6, [r8, #68]	; 0x44
   20a1c:	mov	r9, r2
   20a20:	str	r3, [sp, #12]
   20a24:	b	20a38 <flatcc_builder_create_cached_vtable@@Base+0x74>
   20a28:	ldr	r5, [r4, #12]
   20a2c:	add	r9, r4, #12
   20a30:	cmp	r5, #0
   20a34:	beq	20a88 <flatcc_builder_create_cached_vtable@@Base+0xc4>
   20a38:	add	r4, fp, r5
   20a3c:	ldr	r2, [r4, #8]
   20a40:	add	r1, r6, r2
   20a44:	ldrh	r2, [r6, r2]
   20a48:	cmp	r2, r7
   20a4c:	bne	20a28 <flatcc_builder_create_cached_vtable@@Base+0x64>
   20a50:	mov	r2, r7
   20a54:	ldr	r0, [sp, #8]
   20a58:	bl	1293c <memcmp@plt>
   20a5c:	cmp	r0, #0
   20a60:	bne	20a28 <flatcc_builder_create_cached_vtable@@Base+0x64>
   20a64:	ldr	r1, [r4, #4]
   20a68:	ldr	r2, [r8, #152]	; 0x98
   20a6c:	cmp	r1, r2
   20a70:	beq	20b04 <flatcc_builder_create_cached_vtable@@Base+0x140>
   20a74:	ldr	r5, [r4, #12]
   20a78:	add	r9, r4, #12
   20a7c:	cmp	r5, #0
   20a80:	str	r4, [sp, #12]
   20a84:	bne	20a38 <flatcc_builder_create_cached_vtable@@Base+0x74>
   20a88:	ldr	r4, [r8, #124]	; 0x7c
   20a8c:	ldr	r3, [r8, #104]	; 0x68
   20a90:	add	r2, r4, #16
   20a94:	cmp	r2, r3
   20a98:	bhi	20c08 <flatcc_builder_create_cached_vtable@@Base+0x244>
   20a9c:	ldr	r5, [r8, #100]	; 0x64
   20aa0:	adds	r6, r5, r4
   20aa4:	beq	20b34 <flatcc_builder_create_cached_vtable@@Base+0x170>
   20aa8:	ldr	r3, [r8, #124]	; 0x7c
   20aac:	ldr	r0, [sp, #16]
   20ab0:	ldr	r2, [r8, #152]	; 0x98
   20ab4:	add	r1, r3, #16
   20ab8:	str	r1, [r8, #124]	; 0x7c
   20abc:	str	r2, [r6, #4]
   20ac0:	ldr	r1, [r0, sl, lsl #2]
   20ac4:	mov	r2, r7
   20ac8:	str	r1, [r6, #12]
   20acc:	str	r3, [r0, sl, lsl #2]
   20ad0:	ldr	r1, [sp, #8]
   20ad4:	mov	r0, r8
   20ad8:	bl	20858 <flatcc_builder_create_vtable@@Base>
   20adc:	cmp	r0, #0
   20ae0:	str	r0, [r5, r4]
   20ae4:	beq	20b34 <flatcc_builder_create_cached_vtable@@Base+0x170>
   20ae8:	ldr	r3, [sp, #12]
   20aec:	cmp	r3, #0
   20af0:	beq	20c38 <flatcc_builder_create_cached_vtable@@Base+0x274>
   20af4:	ldr	r3, [r3, #8]
   20af8:	str	r3, [r6, #8]
   20afc:	add	sp, sp, #28
   20b00:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20b04:	ldr	r3, [sp, #20]
   20b08:	cmp	r3, r9
   20b0c:	beq	20b28 <flatcc_builder_create_cached_vtable@@Base+0x164>
   20b10:	ldr	r2, [sp, #16]
   20b14:	ldr	r3, [r4, #12]
   20b18:	str	r3, [r9]
   20b1c:	ldr	r3, [r2, sl, lsl #2]
   20b20:	str	r3, [r4, #12]
   20b24:	str	r5, [r2, sl, lsl #2]
   20b28:	ldr	r0, [r4]
   20b2c:	add	sp, sp, #28
   20b30:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20b34:	mov	r0, #0
   20b38:	add	sp, sp, #28
   20b3c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20b40:	ldr	r3, [r0, #124]	; 0x7c
   20b44:	add	r5, r0, #92	; 0x5c
   20b48:	cmp	r3, #0
   20b4c:	bne	20cd0 <flatcc_builder_create_cached_vtable@@Base+0x30c>
   20b50:	ldr	r3, [r0, #104]	; 0x68
   20b54:	cmp	r3, #15
   20b58:	bls	20bdc <flatcc_builder_create_cached_vtable@@Base+0x218>
   20b5c:	ldr	r3, [r8, #100]	; 0x64
   20b60:	cmp	r3, #0
   20b64:	beq	20b34 <flatcc_builder_create_cached_vtable@@Base+0x170>
   20b68:	mov	r2, #16
   20b6c:	mov	r3, #5
   20b70:	str	r2, [r8, #124]	; 0x7c
   20b74:	ldr	r0, [r8, #40]	; 0x28
   20b78:	mov	r1, r5
   20b7c:	str	r3, [sp]
   20b80:	mov	r2, #256	; 0x100
   20b84:	ldr	r5, [r8, #48]	; 0x30
   20b88:	mov	r3, #1
   20b8c:	blx	r5
   20b90:	cmp	r0, #0
   20b94:	bne	20b34 <flatcc_builder_create_cached_vtable@@Base+0x170>
   20b98:	ldr	r1, [r8, #96]	; 0x60
   20b9c:	mov	r3, #256	; 0x100
   20ba0:	b	20ba8 <flatcc_builder_create_cached_vtable@@Base+0x1e4>
   20ba4:	mov	r3, r2
   20ba8:	lsl	r2, r3, #1
   20bac:	cmp	r2, r1
   20bb0:	bls	20ba4 <flatcc_builder_create_cached_vtable@@Base+0x1e0>
   20bb4:	lsr	r3, r3, #2
   20bb8:	cmp	r3, #1
   20bbc:	bls	20c90 <flatcc_builder_create_cached_vtable@@Base+0x2cc>
   20bc0:	mov	r2, #1
   20bc4:	add	r4, r4, #1
   20bc8:	cmp	r3, r2, lsl r4
   20bcc:	bhi	20bc4 <flatcc_builder_create_cached_vtable@@Base+0x200>
   20bd0:	rsb	r3, r4, #32
   20bd4:	str	r4, [r8, #116]	; 0x74
   20bd8:	b	209ec <flatcc_builder_create_cached_vtable@@Base+0x28>
   20bdc:	mov	r3, #6
   20be0:	ldr	r0, [r0, #40]	; 0x28
   20be4:	mov	r2, #16
   20be8:	str	r3, [sp]
   20bec:	add	r1, r8, #100	; 0x64
   20bf0:	ldr	r6, [r8, #48]	; 0x30
   20bf4:	mov	r3, r4
   20bf8:	blx	r6
   20bfc:	cmp	r0, #0
   20c00:	beq	20b5c <flatcc_builder_create_cached_vtable@@Base+0x198>
   20c04:	b	20cbc <flatcc_builder_create_cached_vtable@@Base+0x2f8>
   20c08:	mov	r3, #6
   20c0c:	ldr	r0, [r8, #40]	; 0x28
   20c10:	add	r1, r8, #100	; 0x64
   20c14:	str	r3, [sp]
   20c18:	mov	r3, #0
   20c1c:	ldr	r5, [r8, #48]	; 0x30
   20c20:	blx	r5
   20c24:	cmp	r0, #0
   20c28:	beq	20a9c <flatcc_builder_create_cached_vtable@@Base+0xd8>
   20c2c:	b	20cbc <flatcc_builder_create_cached_vtable@@Base+0x2f8>
   20c30:	str	r5, [sp, #12]
   20c34:	b	20a88 <flatcc_builder_create_cached_vtable@@Base+0xc4>
   20c38:	ldr	r3, [r8, #172]	; 0xac
   20c3c:	ldr	r9, [r8, #120]	; 0x78
   20c40:	cmp	r3, #0
   20c44:	add	r2, r9, r7
   20c48:	beq	20c54 <flatcc_builder_create_cached_vtable@@Base+0x290>
   20c4c:	cmp	r3, r2
   20c50:	bcc	20cc0 <flatcc_builder_create_cached_vtable@@Base+0x2fc>
   20c54:	ldr	r3, [r8, #72]	; 0x48
   20c58:	cmp	r3, r2
   20c5c:	bcc	20c98 <flatcc_builder_create_cached_vtable@@Base+0x2d4>
   20c60:	ldr	r3, [r8, #68]	; 0x44
   20c64:	adds	r0, r3, r9
   20c68:	beq	20cf4 <flatcc_builder_create_cached_vtable@@Base+0x330>
   20c6c:	ldr	r3, [r8, #120]	; 0x78
   20c70:	ldr	r1, [sp, #8]
   20c74:	add	ip, r3, r7
   20c78:	str	r3, [r6, #8]
   20c7c:	mov	r2, r7
   20c80:	str	ip, [r8, #120]	; 0x78
   20c84:	bl	12930 <memcpy@plt>
   20c88:	ldr	r0, [r5, r4]
   20c8c:	b	20afc <flatcc_builder_create_cached_vtable@@Base+0x138>
   20c90:	mov	r3, #32
   20c94:	b	20bd4 <flatcc_builder_create_cached_vtable@@Base+0x210>
   20c98:	mov	r3, #2
   20c9c:	ldr	r0, [r8, #40]	; 0x28
   20ca0:	add	r1, r8, #68	; 0x44
   20ca4:	str	r3, [sp]
   20ca8:	mov	r3, #0
   20cac:	ldr	sl, [r8, #48]	; 0x30
   20cb0:	blx	sl
   20cb4:	cmp	r0, #0
   20cb8:	beq	20c60 <flatcc_builder_create_cached_vtable@@Base+0x29c>
   20cbc:	bl	1315c <__assert_fail@plt+0x754>
   20cc0:	mov	r0, r8
   20cc4:	bl	1eeb8 <flatcc_builder_flush_vtable_cache@@Base>
   20cc8:	ldr	r0, [r5, r4]
   20ccc:	b	20afc <flatcc_builder_create_cached_vtable@@Base+0x138>
   20cd0:	ldr	r3, [pc, #36]	; 20cfc <flatcc_builder_create_cached_vtable@@Base+0x338>
   20cd4:	ldr	r1, [pc, #36]	; 20d00 <flatcc_builder_create_cached_vtable@@Base+0x33c>
   20cd8:	ldr	r0, [pc, #36]	; 20d04 <flatcc_builder_create_cached_vtable@@Base+0x340>
   20cdc:	add	r3, pc, r3
   20ce0:	ldr	r2, [pc, #32]	; 20d08 <flatcc_builder_create_cached_vtable@@Base+0x344>
   20ce4:	add	r3, r3, #656	; 0x290
   20ce8:	add	r1, pc, r1
   20cec:	add	r0, pc, r0
   20cf0:	bl	12a08 <__assert_fail@plt>
   20cf4:	mvn	r0, #0
   20cf8:	b	20afc <flatcc_builder_create_cached_vtable@@Base+0x138>
   20cfc:	strdeq	r6, [r0], -ip
   20d00:	andeq	r7, r0, r0, asr #10
   20d04:	andeq	r7, r0, r8, ror #15
   20d08:	andeq	r0, r0, r6, asr r1

00020d0c <flatcc_builder_create_table@@Base>:
   20d0c:	push	{r4, r5, r6, r7, r8, lr}
   20d10:	sub	sp, sp, #88	; 0x58
   20d14:	ldr	r8, [pc, #436]	; 20ed0 <flatcc_builder_create_table@@Base+0x1c4>
   20d18:	ldr	r4, [sp, #116]	; 0x74
   20d1c:	add	r8, pc, r8
   20d20:	cmp	r4, #0
   20d24:	ldr	lr, [sp, #120]	; 0x78
   20d28:	blt	20e60 <flatcc_builder_create_table@@Base+0x154>
   20d2c:	tst	lr, #1
   20d30:	beq	20eac <flatcc_builder_create_table@@Base+0x1a0>
   20d34:	mov	r5, r0
   20d38:	ldrh	r0, [r0, #128]	; 0x80
   20d3c:	cmp	r3, #4
   20d40:	movcc	r3, #4
   20d44:	ldr	ip, [r5, #136]	; 0x88
   20d48:	cmp	r0, r3
   20d4c:	mvn	r0, #3
   20d50:	strhcc	r3, [r5, #128]	; 0x80
   20d54:	sub	r7, ip, r2
   20d58:	sub	r3, r3, #1
   20d5c:	sub	r0, r0, r2
   20d60:	and	r7, r7, r3
   20d64:	add	r0, r0, ip
   20d68:	sub	r3, lr, #1
   20d6c:	sub	r0, r0, r7
   20d70:	sub	r3, r0, r3
   20d74:	cmp	r4, #0
   20d78:	str	r3, [sp, #12]
   20d7c:	beq	20db0 <flatcc_builder_create_table@@Base+0xa4>
   20d80:	ldr	ip, [sp, #112]	; 0x70
   20d84:	mvn	r6, #3
   20d88:	add	r4, ip, r4, lsl #1
   20d8c:	sub	r6, r6, r0
   20d90:	ldrh	r3, [ip], #2
   20d94:	sub	lr, r6, r3
   20d98:	ldr	r0, [r1, r3]
   20d9c:	cmp	r4, ip
   20da0:	add	r0, r0, lr
   20da4:	str	r0, [r1, r3]
   20da8:	bne	20d90 <flatcc_builder_create_table@@Base+0x84>
   20dac:	ldr	ip, [r5, #136]	; 0x88
   20db0:	mov	r3, #4
   20db4:	mov	lr, #1
   20db8:	add	r0, sp, #12
   20dbc:	cmp	r2, #0
   20dc0:	str	r3, [sp, #16]
   20dc4:	str	r3, [sp, #28]
   20dc8:	str	r0, [sp, #24]
   20dcc:	str	lr, [sp, #20]
   20dd0:	beq	20dec <flatcc_builder_create_table@@Base+0xe0>
   20dd4:	add	r3, r2, r3
   20dd8:	mov	r0, #2
   20ddc:	str	r1, [sp, #32]
   20de0:	str	r2, [sp, #36]	; 0x24
   20de4:	str	r3, [sp, #16]
   20de8:	str	r0, [sp, #20]
   20dec:	cmp	r7, #0
   20df0:	beq	20e20 <flatcc_builder_create_table@@Base+0x114>
   20df4:	ldr	r2, [sp, #20]
   20df8:	ldr	r1, [pc, #212]	; 20ed4 <flatcc_builder_create_table@@Base+0x1c8>
   20dfc:	add	r2, r2, #1
   20e00:	add	r3, r3, r7
   20e04:	str	r3, [sp, #16]
   20e08:	ldr	r0, [r8, r1]
   20e0c:	add	r1, sp, #88	; 0x58
   20e10:	add	r1, r1, r2, lsl #3
   20e14:	str	r2, [sp, #20]
   20e18:	str	r0, [r1, #-72]	; 0xffffffb8
   20e1c:	str	r7, [r1, #-68]	; 0xffffffbc
   20e20:	sub	r4, ip, r3
   20e24:	cmp	r4, ip
   20e28:	bge	20ea8 <flatcc_builder_create_table@@Base+0x19c>
   20e2c:	ldr	r0, [r5, #36]	; 0x24
   20e30:	ldr	r2, [sp, #20]
   20e34:	str	r3, [sp]
   20e38:	add	r1, sp, #24
   20e3c:	ldr	r6, [r5, #44]	; 0x2c
   20e40:	mov	r3, r4
   20e44:	blx	r6
   20e48:	cmp	r0, #0
   20e4c:	bne	20e84 <flatcc_builder_create_table@@Base+0x178>
   20e50:	mov	r0, r4
   20e54:	str	r4, [r5, #136]	; 0x88
   20e58:	add	sp, sp, #88	; 0x58
   20e5c:	pop	{r4, r5, r6, r7, r8, pc}
   20e60:	ldr	r3, [pc, #112]	; 20ed8 <flatcc_builder_create_table@@Base+0x1cc>
   20e64:	ldr	r1, [pc, #112]	; 20edc <flatcc_builder_create_table@@Base+0x1d0>
   20e68:	ldr	r0, [pc, #112]	; 20ee0 <flatcc_builder_create_table@@Base+0x1d4>
   20e6c:	add	r3, pc, r3
   20e70:	ldr	r2, [pc, #108]	; 20ee4 <flatcc_builder_create_table@@Base+0x1d8>
   20e74:	add	r3, r3, #668	; 0x29c
   20e78:	add	r1, pc, r1
   20e7c:	add	r0, pc, r0
   20e80:	bl	12a08 <__assert_fail@plt>
   20e84:	ldr	r3, [pc, #92]	; 20ee8 <flatcc_builder_create_table@@Base+0x1dc>
   20e88:	ldr	r1, [pc, #92]	; 20eec <flatcc_builder_create_table@@Base+0x1e0>
   20e8c:	ldr	r0, [pc, #92]	; 20ef0 <flatcc_builder_create_table@@Base+0x1e4>
   20e90:	add	r3, pc, r3
   20e94:	ldr	r2, [pc, #88]	; 20ef4 <flatcc_builder_create_table@@Base+0x1e8>
   20e98:	add	r3, r3, #28
   20e9c:	add	r1, pc, r1
   20ea0:	add	r0, pc, r0
   20ea4:	bl	12a08 <__assert_fail@plt>
   20ea8:	bl	131c4 <__assert_fail@plt+0x7bc>
   20eac:	ldr	r3, [pc, #68]	; 20ef8 <flatcc_builder_create_table@@Base+0x1ec>
   20eb0:	ldr	r1, [pc, #68]	; 20efc <flatcc_builder_create_table@@Base+0x1f0>
   20eb4:	ldr	r0, [pc, #68]	; 20f00 <flatcc_builder_create_table@@Base+0x1f4>
   20eb8:	add	r3, pc, r3
   20ebc:	ldr	r2, [pc, #64]	; 20f04 <flatcc_builder_create_table@@Base+0x1f8>
   20ec0:	add	r3, r3, #668	; 0x29c
   20ec4:	add	r1, pc, r1
   20ec8:	add	r0, pc, r0
   20ecc:	bl	12a08 <__assert_fail@plt>
   20ed0:	ldrdeq	r8, [r1], -ip
   20ed4:	andeq	r0, r0, r4, rrx
   20ed8:	andeq	r6, r0, ip, ror #24
   20edc:			; <UNDEFINED> instruction: 0x000073b0
   20ee0:	andeq	r7, r0, r8, ror #12
   20ee4:	ldrdeq	r0, [r0], -r5
   20ee8:	andeq	r6, r0, r8, asr #24
   20eec:	andeq	r7, r0, ip, lsl #7
   20ef0:	andeq	r7, r0, r0, lsl r4
   20ef4:	andeq	r0, r0, fp, lsl #5
   20ef8:	andeq	r6, r0, r0, lsr #24
   20efc:	andeq	r7, r0, r4, ror #6
   20f00:	andeq	r7, r0, r0, lsr r6
   20f04:	ldrdeq	r0, [r0], -fp

00020f08 <flatcc_builder_check_required_field@@Base>:
   20f08:	ldr	r3, [r0, #32]
   20f0c:	ldrh	r3, [r3, #14]
   20f10:	cmp	r3, #3
   20f14:	bne	20f40 <flatcc_builder_check_required_field@@Base+0x38>
   20f18:	ldrh	r3, [r0, #8]
   20f1c:	cmp	r3, r1
   20f20:	movls	r0, #0
   20f24:	bls	20f3c <flatcc_builder_check_required_field@@Base+0x34>
   20f28:	ldr	r3, [r0, #4]
   20f2c:	lsl	r1, r1, #1
   20f30:	ldrh	r0, [r3, r1]
   20f34:	adds	r0, r0, #0
   20f38:	movne	r0, #1
   20f3c:	bx	lr
   20f40:	ldr	r3, [pc, #32]	; 20f68 <flatcc_builder_check_required_field@@Base+0x60>
   20f44:	ldr	r1, [pc, #32]	; 20f6c <flatcc_builder_check_required_field@@Base+0x64>
   20f48:	ldr	r0, [pc, #32]	; 20f70 <flatcc_builder_check_required_field@@Base+0x68>
   20f4c:	add	r3, pc, r3
   20f50:	push	{r4, lr}
   20f54:	add	r3, r3, #696	; 0x2b8
   20f58:	ldr	r2, [pc, #20]	; 20f74 <flatcc_builder_check_required_field@@Base+0x6c>
   20f5c:	add	r1, pc, r1
   20f60:	add	r0, pc, r0
   20f64:	bl	12a08 <__assert_fail@plt>
   20f68:	andeq	r6, r0, ip, lsl #23
   20f6c:	andeq	r7, r0, ip, asr #5
   20f70:	andeq	r7, r0, r4, lsr #11
   20f74:	strdeq	r0, [r0], -r8

00020f78 <flatcc_builder_check_union_field@@Base>:
   20f78:	ldr	r3, [r0, #32]
   20f7c:	ldrh	r3, [r3, #14]
   20f80:	cmp	r3, #3
   20f84:	bne	21000 <flatcc_builder_check_union_field@@Base+0x88>
   20f88:	cmp	r1, #0
   20f8c:	beq	20fd8 <flatcc_builder_check_union_field@@Base+0x60>
   20f90:	ldrh	r3, [r0, #8]
   20f94:	cmp	r3, r1
   20f98:	bls	20fd8 <flatcc_builder_check_union_field@@Base+0x60>
   20f9c:	sub	r1, r1, #-2147483647	; 0x80000001
   20fa0:	ldr	r3, [r0, #4]
   20fa4:	lsl	r1, r1, #1
   20fa8:	ldrh	r2, [r3, r1]
   20fac:	cmp	r2, #0
   20fb0:	beq	20fec <flatcc_builder_check_union_field@@Base+0x74>
   20fb4:	ldr	r0, [r0, #16]
   20fb8:	add	r1, r3, r1
   20fbc:	ldrb	r2, [r0, r2]
   20fc0:	ldrh	r1, [r1, #2]
   20fc4:	cmp	r2, #0
   20fc8:	bne	20fe0 <flatcc_builder_check_union_field@@Base+0x68>
   20fcc:	clz	r0, r1
   20fd0:	lsr	r0, r0, #5
   20fd4:	bx	lr
   20fd8:	mov	r0, #0
   20fdc:	bx	lr
   20fe0:	adds	r0, r1, #0
   20fe4:	movne	r0, #1
   20fe8:	b	20fdc <flatcc_builder_check_union_field@@Base+0x64>
   20fec:	add	r1, r3, r1
   20ff0:	ldrh	r1, [r1, #2]
   20ff4:	clz	r0, r1
   20ff8:	lsr	r0, r0, #5
   20ffc:	bx	lr
   21000:	ldr	r3, [pc, #32]	; 21028 <flatcc_builder_check_union_field@@Base+0xb0>
   21004:	ldr	r1, [pc, #32]	; 2102c <flatcc_builder_check_union_field@@Base+0xb4>
   21008:	ldr	r0, [pc, #32]	; 21030 <flatcc_builder_check_union_field@@Base+0xb8>
   2100c:	add	r3, pc, r3
   21010:	push	{r4, lr}
   21014:	add	r3, r3, #732	; 0x2dc
   21018:	ldr	r2, [pc, #20]	; 21034 <flatcc_builder_check_union_field@@Base+0xbc>
   2101c:	add	r1, pc, r1
   21020:	add	r0, pc, r0
   21024:	bl	12a08 <__assert_fail@plt>
   21028:	andeq	r6, r0, ip, asr #21
   2102c:	andeq	r7, r0, ip, lsl #4
   21030:	andeq	r7, r0, r4, ror #9
   21034:	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>

00021038 <flatcc_builder_check_required@@Base>:
   21038:	ldr	r3, [r0, #32]
   2103c:	ldrh	r3, [r3, #14]
   21040:	cmp	r3, #3
   21044:	bne	210a8 <flatcc_builder_check_required@@Base+0x70>
   21048:	ldrh	r3, [r0, #8]
   2104c:	cmp	r3, r2
   21050:	movlt	r0, #0
   21054:	blt	210a4 <flatcc_builder_check_required@@Base+0x6c>
   21058:	cmp	r2, #0
   2105c:	ble	210a0 <flatcc_builder_check_required@@Base+0x68>
   21060:	ldrh	r3, [r1]
   21064:	ldr	ip, [r0, #4]
   21068:	lsl	r3, r3, #1
   2106c:	ldrh	r0, [ip, r3]
   21070:	cmp	r0, #0
   21074:	beq	210a4 <flatcc_builder_check_required@@Base+0x6c>
   21078:	add	r2, r1, r2, lsl #1
   2107c:	add	r1, r1, #2
   21080:	b	21098 <flatcc_builder_check_required@@Base+0x60>
   21084:	ldrh	r3, [r1], #2
   21088:	lsl	r3, r3, #1
   2108c:	ldrh	r0, [ip, r3]
   21090:	cmp	r0, #0
   21094:	beq	210a4 <flatcc_builder_check_required@@Base+0x6c>
   21098:	cmp	r1, r2
   2109c:	bne	21084 <flatcc_builder_check_required@@Base+0x4c>
   210a0:	mov	r0, #1
   210a4:	bx	lr
   210a8:	ldr	r3, [pc, #32]	; 210d0 <flatcc_builder_check_required@@Base+0x98>
   210ac:	ldr	r1, [pc, #32]	; 210d4 <flatcc_builder_check_required@@Base+0x9c>
   210b0:	ldr	r0, [pc, #32]	; 210d8 <flatcc_builder_check_required@@Base+0xa0>
   210b4:	add	r3, pc, r3
   210b8:	push	{r4, lr}
   210bc:	add	r3, r3, #768	; 0x300
   210c0:	ldr	r2, [pc, #20]	; 210dc <flatcc_builder_check_required@@Base+0xa4>
   210c4:	add	r1, pc, r1
   210c8:	add	r0, pc, r0
   210cc:	bl	12a08 <__assert_fail@plt>
   210d0:	andeq	r6, r0, r4, lsr #20
   210d4:	andeq	r7, r0, r4, ror #2
   210d8:	andeq	r7, r0, ip, lsr r4
   210dc:	andeq	r0, r0, r1, lsl r5

000210e0 <flatcc_builder_end_table@@Base>:
   210e0:	ldr	r3, [r0, #32]
   210e4:	push	{r4, r5, r6, r7, lr}
   210e8:	sub	sp, sp, #20
   210ec:	ldrh	r3, [r3, #14]
   210f0:	cmp	r3, #3
   210f4:	bne	21278 <flatcc_builder_end_table@@Base+0x198>
   210f8:	ldrh	r5, [r0, #8]
   210fc:	ldr	r3, [r0, #12]
   21100:	ldr	r1, [pc, #404]	; 2129c <flatcc_builder_end_table@@Base+0x1bc>
   21104:	add	r5, r5, #2
   21108:	ldr	r2, [r0, #20]
   2110c:	lsl	r5, r5, #1
   21110:	add	r2, r2, #4
   21114:	uxth	r5, r5
   21118:	eor	r3, r3, r5
   2111c:	uxth	r2, r2
   21120:	mul	r3, r1, r3
   21124:	ldr	ip, [r0, #4]
   21128:	eor	r3, r3, r2
   2112c:	sub	r6, ip, #4
   21130:	mul	r1, r1, r3
   21134:	strh	r2, [ip, #-2]
   21138:	strh	r5, [ip, #-4]
   2113c:	mov	r3, r1
   21140:	str	r1, [r0, #12]
   21144:	mov	r2, r5
   21148:	mov	r1, r6
   2114c:	mov	r4, r0
   21150:	bl	209c4 <flatcc_builder_create_cached_vtable@@Base>
   21154:	subs	r7, r0, #0
   21158:	bne	2116c <flatcc_builder_end_table@@Base+0x8c>
   2115c:	mov	r5, #0
   21160:	mov	r0, r5
   21164:	add	sp, sp, #20
   21168:	pop	{r4, r5, r6, r7, pc}
   2116c:	mov	r2, r5
   21170:	mov	r1, #0
   21174:	mov	r0, r6
   21178:	bl	129c0 <memset@plt>
   2117c:	ldr	r3, [r4, #32]
   21180:	ldr	ip, [r4, #76]	; 0x4c
   21184:	ldr	r0, [r4]
   21188:	ldr	r2, [r3, #20]
   2118c:	ldr	r1, [r4, #16]
   21190:	add	ip, ip, r2
   21194:	sub	r0, r0, ip
   21198:	ldrh	r3, [r4, #130]	; 0x82
   2119c:	asr	r0, r0, #1
   211a0:	ldr	r2, [r4, #20]
   211a4:	str	r0, [sp, #4]
   211a8:	str	r7, [sp, #8]
   211ac:	str	ip, [sp]
   211b0:	mov	r0, r4
   211b4:	bl	20d0c <flatcc_builder_create_table@@Base>
   211b8:	subs	r5, r0, #0
   211bc:	beq	2115c <flatcc_builder_end_table@@Base+0x7c>
   211c0:	ldr	r3, [r4, #32]
   211c4:	ldr	r0, [r4, #52]	; 0x34
   211c8:	ldr	ip, [r4, #76]	; 0x4c
   211cc:	ldr	r1, [r3, #24]
   211d0:	ldr	r2, [r4, #20]
   211d4:	str	r1, [r4, #12]
   211d8:	ldrh	lr, [r3, #28]
   211dc:	mov	r1, #0
   211e0:	strh	lr, [r4, #8]
   211e4:	ldr	lr, [r3, #16]
   211e8:	add	r0, r0, lr
   211ec:	str	r0, [r4, #4]
   211f0:	ldr	r3, [r3, #20]
   211f4:	ldr	r0, [r4, #16]
   211f8:	add	r3, ip, r3
   211fc:	str	r3, [r4]
   21200:	bl	129c0 <memset@plt>
   21204:	ldr	r3, [r4, #32]
   21208:	ldr	r2, [r4, #64]	; 0x40
   2120c:	ldrh	lr, [r4, #130]	; 0x82
   21210:	ldr	ip, [r3]
   21214:	ldr	r1, [r3, #4]
   21218:	ldrh	r0, [r4, #128]	; 0x80
   2121c:	sub	r2, r2, ip
   21220:	cmp	r2, r1
   21224:	movcs	r2, r1
   21228:	cmp	r0, lr
   2122c:	ldr	r0, [r4, #60]	; 0x3c
   21230:	ldr	r6, [r3, #8]
   21234:	str	r2, [r4, #24]
   21238:	add	r2, r0, ip
   2123c:	str	r2, [r4, #16]
   21240:	str	r6, [r4, #20]
   21244:	ldr	r2, [r4, #156]	; 0x9c
   21248:	str	ip, [r4, #28]
   2124c:	str	r1, [r3, #4]
   21250:	strhcc	lr, [r4, #128]	; 0x80
   21254:	ldrh	r1, [r3, #12]
   21258:	sub	r2, r2, #1
   2125c:	sub	r3, r3, #36	; 0x24
   21260:	mov	r0, r5
   21264:	str	r2, [r4, #156]	; 0x9c
   21268:	strh	r1, [r4, #130]	; 0x82
   2126c:	str	r3, [r4, #32]
   21270:	add	sp, sp, #20
   21274:	pop	{r4, r5, r6, r7, pc}
   21278:	ldr	r3, [pc, #32]	; 212a0 <flatcc_builder_end_table@@Base+0x1c0>
   2127c:	ldr	r1, [pc, #32]	; 212a4 <flatcc_builder_end_table@@Base+0x1c4>
   21280:	ldr	r0, [pc, #32]	; 212a8 <flatcc_builder_end_table@@Base+0x1c8>
   21284:	add	r3, pc, r3
   21288:	ldr	r2, [pc, #28]	; 212ac <flatcc_builder_end_table@@Base+0x1cc>
   2128c:	add	r3, r3, #800	; 0x320
   21290:	add	r1, pc, r1
   21294:	add	r0, pc, r0
   21298:	bl	12a08 <__assert_fail@plt>
   2129c:			; <UNDEFINED> instruction: 0x9e3779b1
   212a0:	andeq	r6, r0, r4, asr r8
   212a4:	muleq	r0, r8, pc	; <UNPREDICTABLE>
   212a8:	andeq	r7, r0, r0, ror r2
   212ac:	andeq	r0, r0, r5, lsr #10

000212b0 <flatcc_builder_create_vector@@Base>:
   212b0:	push	{r4, r5, r6, lr}
   212b4:	sub	sp, sp, #88	; 0x58
   212b8:	ldr	lr, [pc, #320]	; 21400 <flatcc_builder_create_vector@@Base+0x150>
   212bc:	ldr	ip, [sp, #108]	; 0x6c
   212c0:	mov	r4, r0
   212c4:	cmp	r2, ip
   212c8:	add	lr, pc, lr
   212cc:	ldrh	r0, [sp, #104]	; 0x68
   212d0:	bhi	213b4 <flatcc_builder_create_vector@@Base+0x104>
   212d4:	ldrh	ip, [r4, #128]	; 0x80
   212d8:	cmp	r0, #4
   212dc:	mul	r3, r3, r2
   212e0:	movcc	r0, #4
   212e4:	ldr	r6, [r4, #136]	; 0x88
   212e8:	cmp	ip, r0
   212ec:	strhcc	r0, [r4, #128]	; 0x80
   212f0:	sub	r5, r6, r3
   212f4:	sub	r0, r0, #1
   212f8:	mov	ip, #4
   212fc:	str	r2, [sp, #12]
   21300:	and	r0, r0, r5
   21304:	add	r2, sp, #12
   21308:	mov	r5, #1
   2130c:	cmp	r3, #0
   21310:	str	ip, [sp, #16]
   21314:	str	ip, [sp, #28]
   21318:	str	r2, [sp, #24]
   2131c:	str	r5, [sp, #20]
   21320:	bne	21398 <flatcc_builder_create_vector@@Base+0xe8>
   21324:	cmp	r0, #0
   21328:	beq	21358 <flatcc_builder_create_vector@@Base+0xa8>
   2132c:	ldr	r3, [sp, #20]
   21330:	ldr	r2, [pc, #204]	; 21404 <flatcc_builder_create_vector@@Base+0x154>
   21334:	add	r3, r3, #1
   21338:	add	ip, ip, r0
   2133c:	str	ip, [sp, #16]
   21340:	ldr	r1, [lr, r2]
   21344:	add	r2, sp, #88	; 0x58
   21348:	add	r2, r2, r3, lsl #3
   2134c:	str	r3, [sp, #20]
   21350:	str	r1, [r2, #-72]	; 0xffffffb8
   21354:	str	r0, [r2, #-68]	; 0xffffffbc
   21358:	sub	r5, r6, ip
   2135c:	cmp	r6, r5
   21360:	ble	213fc <flatcc_builder_create_vector@@Base+0x14c>
   21364:	ldr	r0, [r4, #36]	; 0x24
   21368:	ldr	r2, [sp, #20]
   2136c:	str	ip, [sp]
   21370:	mov	r3, r5
   21374:	ldr	r6, [r4, #44]	; 0x2c
   21378:	add	r1, sp, #24
   2137c:	blx	r6
   21380:	cmp	r0, #0
   21384:	bne	213d8 <flatcc_builder_create_vector@@Base+0x128>
   21388:	mov	r0, r5
   2138c:	str	r5, [r4, #136]	; 0x88
   21390:	add	sp, sp, #88	; 0x58
   21394:	pop	{r4, r5, r6, pc}
   21398:	add	ip, r3, ip
   2139c:	mov	r2, #2
   213a0:	str	r1, [sp, #32]
   213a4:	str	r3, [sp, #36]	; 0x24
   213a8:	str	ip, [sp, #16]
   213ac:	str	r2, [sp, #20]
   213b0:	b	21324 <flatcc_builder_create_vector@@Base+0x74>
   213b4:	ldr	r3, [pc, #76]	; 21408 <flatcc_builder_create_vector@@Base+0x158>
   213b8:	ldr	r1, [pc, #76]	; 2140c <flatcc_builder_create_vector@@Base+0x15c>
   213bc:	ldr	r0, [pc, #76]	; 21410 <flatcc_builder_create_vector@@Base+0x160>
   213c0:	add	r3, pc, r3
   213c4:	ldr	r2, [pc, #72]	; 21414 <flatcc_builder_create_vector@@Base+0x164>
   213c8:	add	r3, r3, #828	; 0x33c
   213cc:	add	r1, pc, r1
   213d0:	add	r0, pc, r0
   213d4:	bl	12a08 <__assert_fail@plt>
   213d8:	ldr	r3, [pc, #56]	; 21418 <flatcc_builder_create_vector@@Base+0x168>
   213dc:	ldr	r1, [pc, #56]	; 2141c <flatcc_builder_create_vector@@Base+0x16c>
   213e0:	ldr	r0, [pc, #56]	; 21420 <flatcc_builder_create_vector@@Base+0x170>
   213e4:	add	r3, pc, r3
   213e8:	ldr	r2, [pc, #52]	; 21424 <flatcc_builder_create_vector@@Base+0x174>
   213ec:	add	r3, r3, #28
   213f0:	add	r1, pc, r1
   213f4:	add	r0, pc, r0
   213f8:	bl	12a08 <__assert_fail@plt>
   213fc:	bl	131c4 <__assert_fail@plt+0x7bc>
   21400:	andeq	r7, r1, r0, lsr sp
   21404:	andeq	r0, r0, r4, rrx
   21408:	andeq	r6, r0, r8, lsl r7
   2140c:	andeq	r6, r0, ip, asr lr
   21410:	andeq	r7, r0, r0, ror #2
   21414:	andeq	r0, r0, r5, asr r5
   21418:	strdeq	r6, [r0], -r4
   2141c:	andeq	r6, r0, r8, lsr lr
   21420:			; <UNDEFINED> instruction: 0x00006ebc
   21424:	andeq	r0, r0, fp, lsl #5

00021428 <flatcc_builder_end_vector@@Base>:
   21428:	ldr	r1, [r0, #32]
   2142c:	push	{r4, r5, r6, lr}
   21430:	sub	sp, sp, #8
   21434:	ldrh	r3, [r1, #14]
   21438:	cmp	r3, #4
   2143c:	bne	214f0 <flatcc_builder_end_vector@@Base+0xc8>
   21440:	ldrh	lr, [r0, #130]	; 0x82
   21444:	ldr	ip, [r1, #24]
   21448:	ldr	r3, [r1, #16]
   2144c:	ldr	r2, [r1, #20]
   21450:	ldr	r1, [r0, #16]
   21454:	str	lr, [sp]
   21458:	str	ip, [sp, #4]
   2145c:	mov	r4, r0
   21460:	bl	212b0 <flatcc_builder_create_vector@@Base>
   21464:	subs	r5, r0, #0
   21468:	beq	214e4 <flatcc_builder_end_vector@@Base+0xbc>
   2146c:	ldr	r2, [r4, #20]
   21470:	mov	r1, #0
   21474:	ldr	r0, [r4, #16]
   21478:	bl	129c0 <memset@plt>
   2147c:	ldr	r3, [r4, #32]
   21480:	ldr	r2, [r4, #64]	; 0x40
   21484:	ldrh	lr, [r4, #130]	; 0x82
   21488:	ldr	ip, [r3]
   2148c:	ldr	r1, [r3, #4]
   21490:	ldrh	r0, [r4, #128]	; 0x80
   21494:	sub	r2, r2, ip
   21498:	cmp	r2, r1
   2149c:	movcs	r2, r1
   214a0:	cmp	r0, lr
   214a4:	ldr	r0, [r4, #60]	; 0x3c
   214a8:	ldr	r6, [r3, #8]
   214ac:	str	r2, [r4, #24]
   214b0:	add	r2, r0, ip
   214b4:	str	r2, [r4, #16]
   214b8:	str	r6, [r4, #20]
   214bc:	ldr	r2, [r4, #156]	; 0x9c
   214c0:	str	ip, [r4, #28]
   214c4:	str	r1, [r3, #4]
   214c8:	strhcc	lr, [r4, #128]	; 0x80
   214cc:	ldrh	r1, [r3, #12]
   214d0:	sub	r2, r2, #1
   214d4:	sub	r3, r3, #36	; 0x24
   214d8:	str	r2, [r4, #156]	; 0x9c
   214dc:	strh	r1, [r4, #130]	; 0x82
   214e0:	str	r3, [r4, #32]
   214e4:	mov	r0, r5
   214e8:	add	sp, sp, #8
   214ec:	pop	{r4, r5, r6, pc}
   214f0:	ldr	r3, [pc, #28]	; 21514 <flatcc_builder_end_vector@@Base+0xec>
   214f4:	ldr	r1, [pc, #28]	; 21518 <flatcc_builder_end_vector@@Base+0xf0>
   214f8:	ldr	r0, [pc, #28]	; 2151c <flatcc_builder_end_vector@@Base+0xf4>
   214fc:	add	r3, pc, r3
   21500:	ldr	r2, [pc, #24]	; 21520 <flatcc_builder_end_vector@@Base+0xf8>
   21504:	add	r3, r3, #860	; 0x35c
   21508:	add	r1, pc, r1
   2150c:	add	r0, pc, r0
   21510:	bl	12a08 <__assert_fail@plt>
   21514:	ldrdeq	r6, [r0], -ip
   21518:	andeq	r6, r0, r0, lsr #26
   2151c:	andeq	r6, r0, ip, ror #28
   21520:	andeq	r0, r0, r8, ror r5

00021524 <flatcc_builder_vector_count@@Base>:
   21524:	ldr	r3, [r0, #32]
   21528:	ldr	r0, [r3, #20]
   2152c:	bx	lr

00021530 <flatcc_builder_vector_edit@@Base>:
   21530:	ldr	r0, [r0, #16]
   21534:	bx	lr

00021538 <flatcc_builder_create_offset_vector_direct@@Base>:
   21538:	cmn	r2, #-1073741823	; 0xc0000001
   2153c:	bls	21548 <flatcc_builder_create_offset_vector_direct@@Base+0x10>
   21540:	mov	r0, #0
   21544:	bx	lr
   21548:	mov	r3, #0
   2154c:	b	1ec88 <flatcc_builder_default_alloc@@Base+0x350>

00021550 <flatcc_builder_end_offset_vector@@Base>:
   21550:	ldr	r3, [r0, #32]
   21554:	push	{r4, r5, r6, lr}
   21558:	ldrh	r2, [r3, #14]
   2155c:	cmp	r2, #5
   21560:	bne	215fc <flatcc_builder_end_offset_vector@@Base+0xac>
   21564:	ldr	r2, [r3, #20]
   21568:	ldr	r1, [r0, #16]
   2156c:	mov	r4, r0
   21570:	bl	21538 <flatcc_builder_create_offset_vector_direct@@Base>
   21574:	subs	r5, r0, #0
   21578:	beq	215f4 <flatcc_builder_end_offset_vector@@Base+0xa4>
   2157c:	ldr	r2, [r4, #20]
   21580:	mov	r1, #0
   21584:	ldr	r0, [r4, #16]
   21588:	bl	129c0 <memset@plt>
   2158c:	ldr	r3, [r4, #32]
   21590:	ldr	r2, [r4, #64]	; 0x40
   21594:	ldrh	lr, [r4, #130]	; 0x82
   21598:	ldr	ip, [r3]
   2159c:	ldr	r1, [r3, #4]
   215a0:	ldrh	r0, [r4, #128]	; 0x80
   215a4:	sub	r2, r2, ip
   215a8:	cmp	r2, r1
   215ac:	movcs	r2, r1
   215b0:	cmp	r0, lr
   215b4:	ldr	r0, [r4, #60]	; 0x3c
   215b8:	ldr	r6, [r3, #8]
   215bc:	str	r2, [r4, #24]
   215c0:	add	r2, r0, ip
   215c4:	str	r2, [r4, #16]
   215c8:	str	r6, [r4, #20]
   215cc:	ldr	r2, [r4, #156]	; 0x9c
   215d0:	str	ip, [r4, #28]
   215d4:	str	r1, [r3, #4]
   215d8:	strhcc	lr, [r4, #128]	; 0x80
   215dc:	ldrh	r1, [r3, #12]
   215e0:	sub	r2, r2, #1
   215e4:	sub	r3, r3, #36	; 0x24
   215e8:	str	r2, [r4, #156]	; 0x9c
   215ec:	strh	r1, [r4, #130]	; 0x82
   215f0:	str	r3, [r4, #32]
   215f4:	mov	r0, r5
   215f8:	pop	{r4, r5, r6, pc}
   215fc:	ldr	r3, [pc, #28]	; 21620 <flatcc_builder_end_offset_vector@@Base+0xd0>
   21600:	ldr	r1, [pc, #28]	; 21624 <flatcc_builder_end_offset_vector@@Base+0xd4>
   21604:	ldr	r0, [pc, #28]	; 21628 <flatcc_builder_end_offset_vector@@Base+0xd8>
   21608:	add	r3, pc, r3
   2160c:	ldr	r2, [pc, #24]	; 2162c <flatcc_builder_end_offset_vector@@Base+0xdc>
   21610:	add	r3, r3, #888	; 0x378
   21614:	add	r1, pc, r1
   21618:	add	r0, pc, r0
   2161c:	bl	12a08 <__assert_fail@plt>
   21620:	ldrdeq	r6, [r0], -r0
   21624:	andeq	r6, r0, r4, lsl ip
   21628:	andeq	r6, r0, ip, asr #27
   2162c:	andeq	r0, r0, r8, asr #11

00021630 <flatcc_builder_create_offset_vector@@Base>:
   21630:	push	{r4, r5, r6, lr}
   21634:	mov	r6, r1
   21638:	mov	r5, r2
   2163c:	mov	r4, r0
   21640:	bl	20504 <flatcc_builder_start_offset_vector@@Base>
   21644:	cmp	r0, #0
   21648:	beq	21654 <flatcc_builder_create_offset_vector@@Base+0x24>
   2164c:	mov	r0, #0
   21650:	pop	{r4, r5, r6, pc}
   21654:	mov	r1, r5
   21658:	mov	r0, r4
   2165c:	bl	1fe9c <flatcc_builder_extend_offset_vector@@Base>
   21660:	cmp	r0, #0
   21664:	beq	2164c <flatcc_builder_create_offset_vector@@Base+0x1c>
   21668:	lsl	r2, r5, #2
   2166c:	mov	r1, r6
   21670:	bl	12930 <memcpy@plt>
   21674:	mov	r0, r4
   21678:	pop	{r4, r5, r6, lr}
   2167c:	b	21550 <flatcc_builder_end_offset_vector@@Base>

00021680 <flatcc_builder_end_offset_vector_for_unions@@Base>:
   21680:	ldr	r2, [r0, #32]
   21684:	push	{r4, r5, r6, lr}
   21688:	ldrh	ip, [r2, #14]
   2168c:	cmp	ip, #5
   21690:	bne	21744 <flatcc_builder_end_offset_vector_for_unions@@Base+0xc4>
   21694:	ldr	r2, [r2, #20]
   21698:	cmn	r2, #-1073741823	; 0xc0000001
   2169c:	bls	216ac <flatcc_builder_end_offset_vector_for_unions@@Base+0x2c>
   216a0:	mov	r5, #0
   216a4:	mov	r0, r5
   216a8:	pop	{r4, r5, r6, pc}
   216ac:	mov	r3, r1
   216b0:	ldr	r1, [r0, #16]
   216b4:	mov	r4, r0
   216b8:	bl	1ec88 <flatcc_builder_default_alloc@@Base+0x350>
   216bc:	subs	r5, r0, #0
   216c0:	beq	216a0 <flatcc_builder_end_offset_vector_for_unions@@Base+0x20>
   216c4:	ldr	r2, [r4, #20]
   216c8:	mov	r1, #0
   216cc:	ldr	r0, [r4, #16]
   216d0:	bl	129c0 <memset@plt>
   216d4:	ldr	r3, [r4, #32]
   216d8:	ldr	r2, [r4, #64]	; 0x40
   216dc:	ldrh	lr, [r4, #130]	; 0x82
   216e0:	ldr	ip, [r3]
   216e4:	ldr	r1, [r3, #4]
   216e8:	ldrh	r0, [r4, #128]	; 0x80
   216ec:	sub	r2, r2, ip
   216f0:	cmp	r2, r1
   216f4:	movcs	r2, r1
   216f8:	cmp	r0, lr
   216fc:	ldr	r0, [r4, #60]	; 0x3c
   21700:	ldr	r6, [r3, #8]
   21704:	str	r2, [r4, #24]
   21708:	add	r2, r0, ip
   2170c:	str	r2, [r4, #16]
   21710:	str	r6, [r4, #20]
   21714:	ldr	r2, [r4, #156]	; 0x9c
   21718:	str	ip, [r4, #28]
   2171c:	str	r1, [r3, #4]
   21720:	strhcc	lr, [r4, #128]	; 0x80
   21724:	ldrh	r1, [r3, #12]
   21728:	sub	r2, r2, #1
   2172c:	sub	r3, r3, #36	; 0x24
   21730:	str	r2, [r4, #156]	; 0x9c
   21734:	strh	r1, [r4, #130]	; 0x82
   21738:	str	r3, [r4, #32]
   2173c:	mov	r0, r5
   21740:	pop	{r4, r5, r6, pc}
   21744:	ldr	r3, [pc, #28]	; 21768 <flatcc_builder_end_offset_vector_for_unions@@Base+0xe8>
   21748:	ldr	r1, [pc, #28]	; 2176c <flatcc_builder_end_offset_vector_for_unions@@Base+0xec>
   2174c:	ldr	r0, [pc, #28]	; 21770 <flatcc_builder_end_offset_vector_for_unions@@Base+0xf0>
   21750:	add	r3, pc, r3
   21754:	ldr	r2, [pc, #24]	; 21774 <flatcc_builder_end_offset_vector_for_unions@@Base+0xf4>
   21758:	add	r3, r3, #924	; 0x39c
   2175c:	add	r1, pc, r1
   21760:	add	r0, pc, r0
   21764:	bl	12a08 <__assert_fail@plt>
   21768:	andeq	r6, r0, r8, lsl #7
   2176c:	andeq	r6, r0, ip, asr #21
   21770:	andeq	r6, r0, r4, lsl #25
   21774:	ldrdeq	r0, [r0], -r5

00021778 <flatcc_builder_offset_vector_edit@@Base>:
   21778:	ldr	r0, [r0, #16]
   2177c:	bx	lr

00021780 <flatcc_builder_offset_vector_count@@Base>:
   21780:	ldr	r3, [r0, #32]
   21784:	ldr	r0, [r3, #20]
   21788:	bx	lr

0002178c <flatcc_builder_create_union_vector_direct@@Base>:
   2178c:	push	{r4, r5, r6, r7, r8, lr}
   21790:	sub	sp, sp, #8
   21794:	mov	r4, r0
   21798:	ldr	r5, [sp, #32]
   2179c:	cmn	r5, #-1073741823	; 0xc0000001
   217a0:	bls	217bc <flatcc_builder_create_union_vector_direct@@Base+0x30>
   217a4:	mov	r3, #0
   217a8:	mov	r0, r4
   217ac:	str	r3, [r4]
   217b0:	str	r3, [r4, #4]
   217b4:	add	sp, sp, #8
   217b8:	pop	{r4, r5, r6, r7, r8, pc}
   217bc:	mov	r6, r1
   217c0:	mov	r7, r2
   217c4:	mov	r1, r3
   217c8:	mov	r0, r6
   217cc:	mov	r3, r2
   217d0:	mov	r2, r5
   217d4:	bl	1ec88 <flatcc_builder_default_alloc@@Base+0x350>
   217d8:	subs	r8, r0, #0
   217dc:	beq	217a4 <flatcc_builder_create_union_vector_direct@@Base+0x18>
   217e0:	mvn	ip, #0
   217e4:	mov	r3, #1
   217e8:	mov	r2, r5
   217ec:	mov	r1, r7
   217f0:	mov	r0, r6
   217f4:	stm	sp, {r3, ip}
   217f8:	bl	212b0 <flatcc_builder_create_vector@@Base>
   217fc:	stm	r4, {r0, r8}
   21800:	mov	r0, r4
   21804:	add	sp, sp, #8
   21808:	pop	{r4, r5, r6, r7, r8, pc}

0002180c <flatcc_builder_create_union_vector@@Base>:
   2180c:	push	{r4, r5, r6, r7, r8, lr}
   21810:	mov	r6, r0
   21814:	sub	sp, sp, #16
   21818:	mov	r0, r1
   2181c:	mov	r5, r1
   21820:	mov	r4, r2
   21824:	mov	r7, r3
   21828:	bl	20504 <flatcc_builder_start_offset_vector@@Base>
   2182c:	cmp	r0, #0
   21830:	beq	2184c <flatcc_builder_create_union_vector@@Base+0x40>
   21834:	mov	r3, #0
   21838:	mov	r0, r6
   2183c:	str	r3, [r6]
   21840:	str	r3, [r6, #4]
   21844:	add	sp, sp, #16
   21848:	pop	{r4, r5, r6, r7, r8, pc}
   2184c:	mov	r1, r7
   21850:	mov	r0, r5
   21854:	bl	1fe9c <flatcc_builder_extend_offset_vector@@Base>
   21858:	cmp	r0, #0
   2185c:	beq	21834 <flatcc_builder_create_union_vector@@Base+0x28>
   21860:	ldr	r8, [r5, #20]
   21864:	ldr	r3, [r5, #24]
   21868:	add	r1, r7, r8
   2186c:	cmp	r1, r3
   21870:	str	r1, [r5, #20]
   21874:	bcs	2196c <flatcc_builder_create_union_vector@@Base+0x160>
   21878:	ldr	r2, [r5, #16]
   2187c:	adds	r8, r2, r8
   21880:	beq	21834 <flatcc_builder_create_union_vector@@Base+0x28>
   21884:	mov	r0, r5
   21888:	bl	21778 <flatcc_builder_offset_vector_edit@@Base>
   2188c:	cmp	r7, #0
   21890:	movne	r1, r4
   21894:	subne	lr, r8, #1
   21898:	mov	r3, r0
   2189c:	addne	r2, r1, r7, lsl #3
   218a0:	subne	ip, r0, #4
   218a4:	beq	218c4 <flatcc_builder_create_union_vector@@Base+0xb8>
   218a8:	ldrb	r4, [r1]
   218ac:	add	r1, r1, #8
   218b0:	strb	r4, [lr, #1]!
   218b4:	ldr	r4, [r1, #-4]
   218b8:	cmp	r2, r1
   218bc:	str	r4, [ip, #4]!
   218c0:	bne	218a8 <flatcc_builder_create_union_vector@@Base+0x9c>
   218c4:	str	r7, [sp]
   218c8:	mov	r2, r8
   218cc:	mov	r1, r5
   218d0:	add	r0, sp, #8
   218d4:	bl	2178c <flatcc_builder_create_union_vector_direct@@Base>
   218d8:	ldr	r2, [r5, #20]
   218dc:	mov	r1, #0
   218e0:	ldr	r0, [r5, #16]
   218e4:	ldr	r7, [sp, #8]
   218e8:	ldr	r4, [sp, #12]
   218ec:	bl	129c0 <memset@plt>
   218f0:	ldr	r3, [r5, #32]
   218f4:	ldr	r2, [r5, #64]	; 0x40
   218f8:	ldrh	lr, [r5, #130]	; 0x82
   218fc:	ldr	ip, [r3]
   21900:	ldr	r1, [r3, #4]
   21904:	ldrh	r0, [r5, #128]	; 0x80
   21908:	sub	r2, r2, ip
   2190c:	cmp	r2, r1
   21910:	movcs	r2, r1
   21914:	cmp	r0, lr
   21918:	ldr	r0, [r5, #60]	; 0x3c
   2191c:	ldr	r8, [r3, #8]
   21920:	str	r2, [r5, #24]
   21924:	add	r2, r0, ip
   21928:	str	r2, [r5, #16]
   2192c:	str	r8, [r5, #20]
   21930:	ldr	r2, [r5, #156]	; 0x9c
   21934:	str	ip, [r5, #28]
   21938:	str	r1, [r3, #4]
   2193c:	strhcc	lr, [r5, #128]	; 0x80
   21940:	ldrh	r1, [r3, #12]
   21944:	sub	r2, r2, #1
   21948:	sub	r3, r3, #36	; 0x24
   2194c:	mov	r0, r6
   21950:	str	r7, [r6]
   21954:	str	r4, [r6, #4]
   21958:	str	r2, [r5, #156]	; 0x9c
   2195c:	strh	r1, [r5, #130]	; 0x82
   21960:	str	r3, [r5, #32]
   21964:	add	sp, sp, #16
   21968:	pop	{r4, r5, r6, r7, r8, pc}
   2196c:	add	r1, r1, #1
   21970:	mvn	r2, #3
   21974:	mov	r0, r5
   21978:	bl	1e8c4 <time_struct_buffer@@Base+0x98>
   2197c:	cmp	r0, #0
   21980:	beq	21878 <flatcc_builder_create_union_vector@@Base+0x6c>
   21984:	b	21834 <flatcc_builder_create_union_vector@@Base+0x28>

00021988 <flatcc_builder_start_union_vector@@Base>:
   21988:	push	{r4, lr}
   2198c:	mov	r1, #4
   21990:	mov	r4, r0
   21994:	bl	1eb74 <flatcc_builder_default_alloc@@Base+0x23c>
   21998:	cmp	r0, #0
   2199c:	bne	219e8 <flatcc_builder_start_union_vector@@Base+0x60>
   219a0:	ldr	r3, [r4, #32]
   219a4:	mov	r2, #8
   219a8:	mov	lr, #7
   219ac:	str	r0, [r3, #20]
   219b0:	str	r2, [r3, #16]
   219b4:	ldr	ip, [r4, #28]
   219b8:	ldr	r2, [r4, #64]	; 0x40
   219bc:	ldr	r1, [r4, #60]	; 0x3c
   219c0:	sub	r2, r2, ip
   219c4:	cmn	r2, #4
   219c8:	mvnhi	r2, #3
   219cc:	strh	lr, [r3, #14]
   219d0:	add	r1, r1, ip
   219d4:	str	r2, [r4, #24]
   219d8:	mvn	r2, #3
   219dc:	str	r1, [r4, #16]
   219e0:	str	r2, [r3, #4]
   219e4:	pop	{r4, pc}
   219e8:	mvn	r0, #0
   219ec:	pop	{r4, pc}

000219f0 <flatcc_builder_union_vector_edit@@Base>:
   219f0:	ldr	r0, [r0, #16]
   219f4:	bx	lr

000219f8 <flatcc_builder_union_vector_count@@Base>:
   219f8:	ldr	r3, [r0, #32]
   219fc:	ldr	r0, [r3, #20]
   21a00:	bx	lr

00021a04 <flatcc_builder_end_union_vector@@Base>:
   21a04:	ldr	r3, [r1, #32]
   21a08:	push	{r4, r5, r6, r7, r8, lr}
   21a0c:	sub	sp, sp, #16
   21a10:	ldrh	r3, [r3, #14]
   21a14:	cmp	r3, #7
   21a18:	bne	21b70 <flatcc_builder_end_union_vector@@Base+0x16c>
   21a1c:	mov	r5, r0
   21a20:	mov	r0, r1
   21a24:	mov	r4, r1
   21a28:	bl	219f8 <flatcc_builder_union_vector_count@@Base>
   21a2c:	ldr	r8, [r4, #20]
   21a30:	ldr	r3, [r4, #24]
   21a34:	lsl	r7, r0, #2
   21a38:	add	r1, r7, r0
   21a3c:	add	r1, r1, r8
   21a40:	cmp	r1, r3
   21a44:	mov	r6, r0
   21a48:	str	r1, [r4, #20]
   21a4c:	bcs	21b40 <flatcc_builder_end_union_vector@@Base+0x13c>
   21a50:	ldr	r3, [r4, #16]
   21a54:	adds	r8, r3, r8
   21a58:	beq	21b58 <flatcc_builder_end_union_vector@@Base+0x154>
   21a5c:	mov	r0, r4
   21a60:	bl	219f0 <flatcc_builder_union_vector_edit@@Base>
   21a64:	cmp	r6, #0
   21a68:	add	r2, r8, r7
   21a6c:	subne	ip, r2, #1
   21a70:	subne	r1, r8, #4
   21a74:	addne	r7, r0, r6, lsl #3
   21a78:	beq	21a98 <flatcc_builder_end_union_vector@@Base+0x94>
   21a7c:	ldrb	lr, [r0]
   21a80:	add	r0, r0, #8
   21a84:	strb	lr, [ip, #1]!
   21a88:	ldr	lr, [r0, #-4]
   21a8c:	cmp	r0, r7
   21a90:	str	lr, [r1, #4]!
   21a94:	bne	21a7c <flatcc_builder_end_union_vector@@Base+0x78>
   21a98:	mov	r3, r8
   21a9c:	str	r6, [sp]
   21aa0:	mov	r1, r4
   21aa4:	add	r0, sp, #8
   21aa8:	bl	2178c <flatcc_builder_create_union_vector_direct@@Base>
   21aac:	ldr	r2, [r4, #20]
   21ab0:	mov	r1, #0
   21ab4:	ldr	r0, [r4, #16]
   21ab8:	ldr	r7, [sp, #8]
   21abc:	ldr	r6, [sp, #12]
   21ac0:	bl	129c0 <memset@plt>
   21ac4:	ldr	r3, [r4, #32]
   21ac8:	ldr	r2, [r4, #64]	; 0x40
   21acc:	ldrh	lr, [r4, #130]	; 0x82
   21ad0:	ldr	ip, [r3]
   21ad4:	ldr	r1, [r3, #4]
   21ad8:	ldrh	r0, [r4, #128]	; 0x80
   21adc:	sub	r2, r2, ip
   21ae0:	cmp	r2, r1
   21ae4:	movcs	r2, r1
   21ae8:	cmp	r0, lr
   21aec:	ldr	r0, [r4, #60]	; 0x3c
   21af0:	ldr	r8, [r3, #8]
   21af4:	str	r2, [r4, #24]
   21af8:	add	r2, r0, ip
   21afc:	str	r2, [r4, #16]
   21b00:	str	r8, [r4, #20]
   21b04:	ldr	r2, [r4, #156]	; 0x9c
   21b08:	str	ip, [r4, #28]
   21b0c:	str	r1, [r3, #4]
   21b10:	strhcc	lr, [r4, #128]	; 0x80
   21b14:	ldrh	r1, [r3, #12]
   21b18:	sub	r2, r2, #1
   21b1c:	sub	r3, r3, #36	; 0x24
   21b20:	mov	r0, r5
   21b24:	str	r7, [r5]
   21b28:	str	r6, [r5, #4]
   21b2c:	str	r2, [r4, #156]	; 0x9c
   21b30:	strh	r1, [r4, #130]	; 0x82
   21b34:	str	r3, [r4, #32]
   21b38:	add	sp, sp, #16
   21b3c:	pop	{r4, r5, r6, r7, r8, pc}
   21b40:	add	r1, r1, #1
   21b44:	mvn	r2, #3
   21b48:	mov	r0, r4
   21b4c:	bl	1e8c4 <time_struct_buffer@@Base+0x98>
   21b50:	cmp	r0, #0
   21b54:	beq	21a50 <flatcc_builder_end_union_vector@@Base+0x4c>
   21b58:	mov	r3, #0
   21b5c:	mov	r0, r5
   21b60:	str	r3, [r5]
   21b64:	str	r3, [r5, #4]
   21b68:	add	sp, sp, #16
   21b6c:	pop	{r4, r5, r6, r7, r8, pc}
   21b70:	ldr	r3, [pc, #28]	; 21b94 <flatcc_builder_end_union_vector@@Base+0x190>
   21b74:	ldr	r1, [pc, #28]	; 21b98 <flatcc_builder_end_union_vector@@Base+0x194>
   21b78:	ldr	r0, [pc, #28]	; 21b9c <flatcc_builder_end_union_vector@@Base+0x198>
   21b7c:	add	r3, pc, r3
   21b80:	ldr	r2, [pc, #24]	; 21ba0 <flatcc_builder_end_union_vector@@Base+0x19c>
   21b84:	add	r3, r3, #968	; 0x3c8
   21b88:	add	r1, pc, r1
   21b8c:	add	r0, pc, r0
   21b90:	bl	12a08 <__assert_fail@plt>
   21b94:	andeq	r5, r0, ip, asr pc
   21b98:	andeq	r6, r0, r0, lsr #13
   21b9c:			; <UNDEFINED> instruction: 0x000069b8
   21ba0:	andeq	r0, r0, r1, asr r6

00021ba4 <flatcc_builder_extend_union_vector@@Base>:
   21ba4:	ldr	ip, [r0, #32]
   21ba8:	push	{r4, r5, r6, lr}
   21bac:	ldr	r3, [ip, #20]
   21bb0:	adds	r2, r1, r3
   21bb4:	movcs	r3, #1
   21bb8:	movcc	r3, #0
   21bbc:	cmn	r2, #-536870911	; 0xe0000001
   21bc0:	movls	r4, #0
   21bc4:	movhi	r4, #1
   21bc8:	orrs	r4, r3, r4
   21bcc:	bne	21c18 <flatcc_builder_extend_union_vector@@Base+0x74>
   21bd0:	str	r2, [ip, #20]
   21bd4:	ldr	r6, [r0, #20]
   21bd8:	ldr	r3, [r0, #24]
   21bdc:	add	r1, r6, r1, lsl #3
   21be0:	cmp	r1, r3
   21be4:	mov	r5, r0
   21be8:	str	r1, [r0, #20]
   21bec:	bcs	21bfc <flatcc_builder_extend_union_vector@@Base+0x58>
   21bf0:	ldr	r0, [r5, #16]
   21bf4:	add	r0, r0, r6
   21bf8:	pop	{r4, r5, r6, pc}
   21bfc:	add	r1, r1, #1
   21c00:	mvn	r2, #3
   21c04:	bl	1e8c4 <time_struct_buffer@@Base+0x98>
   21c08:	cmp	r0, #0
   21c0c:	beq	21bf0 <flatcc_builder_extend_union_vector@@Base+0x4c>
   21c10:	mov	r0, r4
   21c14:	pop	{r4, r5, r6, pc}
   21c18:	bl	131fc <__assert_fail@plt+0x7f4>

00021c1c <flatcc_builder_truncate_union_vector@@Base>:
   21c1c:	ldr	r3, [r0, #32]
   21c20:	push	{r4, lr}
   21c24:	ldrh	r2, [r3, #14]
   21c28:	cmp	r2, #7
   21c2c:	bne	21c70 <flatcc_builder_truncate_union_vector@@Base+0x54>
   21c30:	ldr	ip, [r3, #20]
   21c34:	cmp	ip, r1
   21c38:	bcc	21c94 <flatcc_builder_truncate_union_vector@@Base+0x78>
   21c3c:	ldr	r2, [r3, #16]
   21c40:	sub	ip, ip, r1
   21c44:	str	ip, [r3, #20]
   21c48:	mul	r2, r2, r1
   21c4c:	ldr	r3, [r0, #20]
   21c50:	ldr	r1, [r0, #16]
   21c54:	sub	r3, r3, r2
   21c58:	str	r3, [r0, #20]
   21c5c:	add	r0, r1, r3
   21c60:	mov	r1, #0
   21c64:	bl	129c0 <memset@plt>
   21c68:	mov	r0, #0
   21c6c:	pop	{r4, pc}
   21c70:	ldr	r3, [pc, #64]	; 21cb8 <flatcc_builder_truncate_union_vector@@Base+0x9c>
   21c74:	ldr	r1, [pc, #64]	; 21cbc <flatcc_builder_truncate_union_vector@@Base+0xa0>
   21c78:	ldr	r0, [pc, #64]	; 21cc0 <flatcc_builder_truncate_union_vector@@Base+0xa4>
   21c7c:	add	r3, pc, r3
   21c80:	ldr	r2, [pc, #60]	; 21cc4 <flatcc_builder_truncate_union_vector@@Base+0xa8>
   21c84:	add	r3, r3, #1000	; 0x3e8
   21c88:	add	r1, pc, r1
   21c8c:	add	r0, pc, r0
   21c90:	bl	12a08 <__assert_fail@plt>
   21c94:	ldr	r3, [pc, #44]	; 21cc8 <flatcc_builder_truncate_union_vector@@Base+0xac>
   21c98:	ldr	r1, [pc, #44]	; 21ccc <flatcc_builder_truncate_union_vector@@Base+0xb0>
   21c9c:	ldr	r0, [pc, #44]	; 21cd0 <flatcc_builder_truncate_union_vector@@Base+0xb4>
   21ca0:	add	r3, pc, r3
   21ca4:	ldr	r2, [pc, #40]	; 21cd4 <flatcc_builder_truncate_union_vector@@Base+0xb8>
   21ca8:	add	r3, r3, #1000	; 0x3e8
   21cac:	add	r1, pc, r1
   21cb0:	add	r0, pc, r0
   21cb4:	bl	12a08 <__assert_fail@plt>
   21cb8:	andeq	r5, r0, ip, asr lr
   21cbc:	andeq	r6, r0, r0, lsr #11
   21cc0:			; <UNDEFINED> instruction: 0x000068b8
   21cc4:	andeq	r0, r0, r1, lsl #13
   21cc8:	andeq	r5, r0, r8, lsr lr
   21ccc:	andeq	r6, r0, ip, ror r5
   21cd0:			; <UNDEFINED> instruction: 0x000067b8
   21cd4:	andeq	r0, r0, r2, lsl #13

00021cd8 <flatcc_builder_union_vector_push@@Base>:
   21cd8:	ldr	ip, [r0, #32]
   21cdc:	push	{r4, r5, r6, lr}
   21ce0:	sub	sp, sp, #8
   21ce4:	ldrh	r3, [ip, #14]
   21ce8:	stm	sp, {r1, r2}
   21cec:	cmp	r3, #7
   21cf0:	bne	21d70 <flatcc_builder_union_vector_push@@Base+0x98>
   21cf4:	ldr	r3, [ip, #20]
   21cf8:	cmn	r3, #-536870911	; 0xe0000001
   21cfc:	beq	21d60 <flatcc_builder_union_vector_push@@Base+0x88>
   21d00:	add	r3, r3, #1
   21d04:	str	r3, [ip, #20]
   21d08:	ldr	r6, [r0, #20]
   21d0c:	ldr	r2, [r0, #24]
   21d10:	add	r3, r6, #8
   21d14:	cmp	r3, r2
   21d18:	mov	r4, r0
   21d1c:	mov	r5, sp
   21d20:	str	r3, [r0, #20]
   21d24:	bcs	21d4c <flatcc_builder_union_vector_push@@Base+0x74>
   21d28:	ldr	r3, [r4, #16]
   21d2c:	adds	r3, r3, r6
   21d30:	beq	21d94 <flatcc_builder_union_vector_push@@Base+0xbc>
   21d34:	ldm	r5, {r0, r1}
   21d38:	mov	r2, r3
   21d3c:	stm	r3, {r0, r1}
   21d40:	mov	r0, r2
   21d44:	add	sp, sp, #8
   21d48:	pop	{r4, r5, r6, pc}
   21d4c:	mvn	r2, #3
   21d50:	add	r1, r6, #9
   21d54:	bl	1e8c4 <time_struct_buffer@@Base+0x98>
   21d58:	cmp	r0, #0
   21d5c:	beq	21d28 <flatcc_builder_union_vector_push@@Base+0x50>
   21d60:	mov	r2, #0
   21d64:	mov	r0, r2
   21d68:	add	sp, sp, #8
   21d6c:	pop	{r4, r5, r6, pc}
   21d70:	ldr	r3, [pc, #36]	; 21d9c <flatcc_builder_union_vector_push@@Base+0xc4>
   21d74:	ldr	r1, [pc, #36]	; 21da0 <flatcc_builder_union_vector_push@@Base+0xc8>
   21d78:	ldr	r0, [pc, #36]	; 21da4 <flatcc_builder_union_vector_push@@Base+0xcc>
   21d7c:	add	r3, pc, r3
   21d80:	ldr	r2, [pc, #32]	; 21da8 <flatcc_builder_union_vector_push@@Base+0xd0>
   21d84:	add	r3, r3, #1040	; 0x410
   21d88:	add	r1, pc, r1
   21d8c:	add	r0, pc, r0
   21d90:	bl	12a08 <__assert_fail@plt>
   21d94:	mov	r2, r3
   21d98:	b	21d40 <flatcc_builder_union_vector_push@@Base+0x68>
   21d9c:	andeq	r5, r0, ip, asr sp
   21da0:	andeq	r6, r0, r0, lsr #9
   21da4:			; <UNDEFINED> instruction: 0x000067b8
   21da8:	andeq	r0, r0, sp, lsl #13

00021dac <flatcc_builder_append_union_vector@@Base>:
   21dac:	ldr	ip, [r0, #32]
   21db0:	push	{r4, r5, r6, r7, r8, lr}
   21db4:	ldrh	r3, [ip, #14]
   21db8:	cmp	r3, #7
   21dbc:	bne	21e54 <flatcc_builder_append_union_vector@@Base+0xa8>
   21dc0:	mov	r6, r1
   21dc4:	ldr	r1, [ip, #20]
   21dc8:	adds	r1, r2, r1
   21dcc:	movcs	lr, #1
   21dd0:	movcc	lr, #0
   21dd4:	cmn	r1, #-536870911	; 0xe0000001
   21dd8:	movls	r3, #0
   21ddc:	movhi	r3, #1
   21de0:	orrs	r8, lr, r3
   21de4:	bne	21e50 <flatcc_builder_append_union_vector@@Base+0xa4>
   21de8:	str	r1, [ip, #20]
   21dec:	ldr	r7, [r0, #20]
   21df0:	lsl	r4, r2, #3
   21df4:	ldr	r3, [r0, #24]
   21df8:	add	r1, r4, r7
   21dfc:	cmp	r1, r3
   21e00:	mov	r5, r0
   21e04:	str	r1, [r0, #20]
   21e08:	bcs	21e34 <flatcc_builder_append_union_vector@@Base+0x88>
   21e0c:	ldr	r3, [r5, #16]
   21e10:	adds	r3, r3, r7
   21e14:	beq	21e2c <flatcc_builder_append_union_vector@@Base+0x80>
   21e18:	mov	r0, r3
   21e1c:	mov	r2, r4
   21e20:	mov	r1, r6
   21e24:	bl	12930 <memcpy@plt>
   21e28:	mov	r3, r0
   21e2c:	mov	r0, r3
   21e30:	pop	{r4, r5, r6, r7, r8, pc}
   21e34:	add	r1, r1, #1
   21e38:	mvn	r2, #3
   21e3c:	bl	1e8c4 <time_struct_buffer@@Base+0x98>
   21e40:	cmp	r0, #0
   21e44:	beq	21e0c <flatcc_builder_append_union_vector@@Base+0x60>
   21e48:	mov	r3, r8
   21e4c:	b	21e2c <flatcc_builder_append_union_vector@@Base+0x80>
   21e50:	bl	131fc <__assert_fail@plt+0x7f4>
   21e54:	ldr	r3, [pc, #32]	; 21e7c <flatcc_builder_append_union_vector@@Base+0xd0>
   21e58:	ldr	r1, [pc, #32]	; 21e80 <flatcc_builder_append_union_vector@@Base+0xd4>
   21e5c:	add	r3, pc, r3
   21e60:	ldr	r0, [pc, #28]	; 21e84 <flatcc_builder_append_union_vector@@Base+0xd8>
   21e64:	add	r3, r3, #1072	; 0x430
   21e68:	ldr	r2, [pc, #24]	; 21e88 <flatcc_builder_append_union_vector@@Base+0xdc>
   21e6c:	add	r3, r3, #4
   21e70:	add	r1, pc, r1
   21e74:	add	r0, pc, r0
   21e78:	bl	12a08 <__assert_fail@plt>
   21e7c:	andeq	r5, r0, ip, ror ip
   21e80:			; <UNDEFINED> instruction: 0x000063b8
   21e84:	ldrdeq	r6, [r0], -r0
   21e88:	muleq	r0, ip, r6

00021e8c <flatcc_builder_create_string@@Base>:
   21e8c:	push	{r4, r5, r6, lr}
   21e90:	sub	sp, sp, #88	; 0x58
   21e94:	ldr	lr, [r0, #136]	; 0x88
   21e98:	mov	r4, r0
   21e9c:	add	r0, sp, #88	; 0x58
   21ea0:	cmp	r2, #0
   21ea4:	sub	r3, lr, r2
   21ea8:	str	r2, [r0, #-76]!	; 0xffffffb4
   21eac:	sub	r3, r3, #1
   21eb0:	str	r0, [sp, #24]
   21eb4:	ldr	r5, [pc, #188]	; 21f78 <flatcc_builder_create_string@@Base+0xec>
   21eb8:	moveq	r0, #1
   21ebc:	strne	r1, [sp, #32]
   21ec0:	mov	ip, #4
   21ec4:	moveq	r1, r0
   21ec8:	movne	r1, #2
   21ecc:	and	r3, r3, #3
   21ed0:	ldr	r0, [pc, #164]	; 21f7c <flatcc_builder_create_string@@Base+0xf0>
   21ed4:	str	ip, [sp, #28]
   21ed8:	add	r5, pc, r5
   21edc:	addne	ip, r2, ip
   21ee0:	add	r3, r3, #1
   21ee4:	add	r1, r1, #1
   21ee8:	add	ip, ip, r3
   21eec:	add	r6, sp, #88	; 0x58
   21ef0:	strne	r2, [sp, #36]	; 0x24
   21ef4:	add	r1, r6, r1, lsl #3
   21ef8:	str	ip, [sp, #16]
   21efc:	ldr	r0, [r5, r0]
   21f00:	sub	r5, lr, ip
   21f04:	movne	r2, #3
   21f08:	moveq	r2, #2
   21f0c:	cmp	lr, r5
   21f10:	str	r0, [r1, #-72]	; 0xffffffb8
   21f14:	str	r3, [r1, #-68]	; 0xffffffbc
   21f18:	str	r2, [sp, #20]
   21f1c:	ble	21f50 <flatcc_builder_create_string@@Base+0xc4>
   21f20:	ldr	r0, [r4, #36]	; 0x24
   21f24:	mov	r3, r5
   21f28:	str	ip, [sp]
   21f2c:	add	r1, sp, #24
   21f30:	ldr	r6, [r4, #44]	; 0x2c
   21f34:	blx	r6
   21f38:	cmp	r0, #0
   21f3c:	bne	21f54 <flatcc_builder_create_string@@Base+0xc8>
   21f40:	mov	r0, r5
   21f44:	str	r5, [r4, #136]	; 0x88
   21f48:	add	sp, sp, #88	; 0x58
   21f4c:	pop	{r4, r5, r6, pc}
   21f50:	bl	131c4 <__assert_fail@plt+0x7bc>
   21f54:	ldr	r3, [pc, #36]	; 21f80 <flatcc_builder_create_string@@Base+0xf4>
   21f58:	ldr	r1, [pc, #36]	; 21f84 <flatcc_builder_create_string@@Base+0xf8>
   21f5c:	ldr	r0, [pc, #36]	; 21f88 <flatcc_builder_create_string@@Base+0xfc>
   21f60:	add	r3, pc, r3
   21f64:	ldr	r2, [pc, #32]	; 21f8c <flatcc_builder_create_string@@Base+0x100>
   21f68:	add	r3, r3, #28
   21f6c:	add	r1, pc, r1
   21f70:	add	r0, pc, r0
   21f74:	bl	12a08 <__assert_fail@plt>
   21f78:	andeq	r7, r1, r0, lsr #2
   21f7c:	andeq	r0, r0, r4, rrx
   21f80:	andeq	r5, r0, r8, ror fp
   21f84:			; <UNDEFINED> instruction: 0x000062bc
   21f88:	andeq	r6, r0, r0, asr #6
   21f8c:	andeq	r0, r0, fp, lsl #5

00021f90 <flatcc_builder_create_string_str@@Base>:
   21f90:	push	{r4, r5, r6, lr}
   21f94:	mov	r5, r0
   21f98:	mov	r0, r1
   21f9c:	mov	r4, r1
   21fa0:	bl	1299c <strlen@plt>
   21fa4:	mov	r1, r4
   21fa8:	mov	r2, r0
   21fac:	mov	r0, r5
   21fb0:	pop	{r4, r5, r6, lr}
   21fb4:	b	21e8c <flatcc_builder_create_string@@Base>

00021fb8 <flatcc_builder_create_string_strn@@Base>:
   21fb8:	push	{r4, r5, r6, lr}
   21fbc:	mov	r4, r1
   21fc0:	mov	r6, r0
   21fc4:	mov	r1, #0
   21fc8:	mov	r0, r4
   21fcc:	mov	r5, r2
   21fd0:	bl	129d8 <memchr@plt>
   21fd4:	mov	r1, r4
   21fd8:	cmp	r0, #0
   21fdc:	subne	r5, r0, r4
   21fe0:	mov	r2, r5
   21fe4:	mov	r0, r6
   21fe8:	pop	{r4, r5, r6, lr}
   21fec:	b	21e8c <flatcc_builder_create_string@@Base>

00021ff0 <flatcc_builder_end_string@@Base>:
   21ff0:	ldr	r3, [r0, #32]
   21ff4:	push	{r4, r5, r6, lr}
   21ff8:	ldrh	r2, [r3, #14]
   21ffc:	cmp	r2, #6
   22000:	bne	220d0 <flatcc_builder_end_string@@Base+0xe0>
   22004:	ldr	r2, [r3, #20]
   22008:	ldr	r3, [r0, #20]
   2200c:	mov	r4, r0
   22010:	cmp	r2, r3
   22014:	bne	220a8 <flatcc_builder_end_string@@Base+0xb8>
   22018:	ldr	r1, [r0, #16]
   2201c:	bl	21e8c <flatcc_builder_create_string@@Base>
   22020:	subs	r5, r0, #0
   22024:	beq	220a0 <flatcc_builder_end_string@@Base+0xb0>
   22028:	ldr	r2, [r4, #20]
   2202c:	mov	r1, #0
   22030:	ldr	r0, [r4, #16]
   22034:	bl	129c0 <memset@plt>
   22038:	ldr	r3, [r4, #32]
   2203c:	ldr	r2, [r4, #64]	; 0x40
   22040:	ldrh	lr, [r4, #130]	; 0x82
   22044:	ldr	ip, [r3]
   22048:	ldr	r1, [r3, #4]
   2204c:	ldrh	r0, [r4, #128]	; 0x80
   22050:	sub	r2, r2, ip
   22054:	cmp	r2, r1
   22058:	movcs	r2, r1
   2205c:	cmp	r0, lr
   22060:	ldr	r0, [r4, #60]	; 0x3c
   22064:	ldr	r6, [r3, #8]
   22068:	str	r2, [r4, #24]
   2206c:	add	r2, r0, ip
   22070:	str	r2, [r4, #16]
   22074:	str	r6, [r4, #20]
   22078:	ldr	r2, [r4, #156]	; 0x9c
   2207c:	str	ip, [r4, #28]
   22080:	str	r1, [r3, #4]
   22084:	strhcc	lr, [r4, #128]	; 0x80
   22088:	ldrh	r1, [r3, #12]
   2208c:	sub	r2, r2, #1
   22090:	sub	r3, r3, #36	; 0x24
   22094:	str	r2, [r4, #156]	; 0x9c
   22098:	strh	r1, [r4, #130]	; 0x82
   2209c:	str	r3, [r4, #32]
   220a0:	mov	r0, r5
   220a4:	pop	{r4, r5, r6, pc}
   220a8:	ldr	r3, [pc, #72]	; 220f8 <flatcc_builder_end_string@@Base+0x108>
   220ac:	ldr	r1, [pc, #72]	; 220fc <flatcc_builder_end_string@@Base+0x10c>
   220b0:	add	r3, pc, r3
   220b4:	ldr	r0, [pc, #68]	; 22100 <flatcc_builder_end_string@@Base+0x110>
   220b8:	add	r3, r3, #1104	; 0x450
   220bc:	ldr	r2, [pc, #64]	; 22104 <flatcc_builder_end_string@@Base+0x114>
   220c0:	add	r3, r3, #8
   220c4:	add	r1, pc, r1
   220c8:	add	r0, pc, r0
   220cc:	bl	12a08 <__assert_fail@plt>
   220d0:	ldr	r3, [pc, #48]	; 22108 <flatcc_builder_end_string@@Base+0x118>
   220d4:	ldr	r1, [pc, #48]	; 2210c <flatcc_builder_end_string@@Base+0x11c>
   220d8:	add	r3, pc, r3
   220dc:	ldr	r0, [pc, #44]	; 22110 <flatcc_builder_end_string@@Base+0x120>
   220e0:	add	r3, r3, #1104	; 0x450
   220e4:	ldr	r2, [pc, #40]	; 22114 <flatcc_builder_end_string@@Base+0x124>
   220e8:	add	r3, r3, #8
   220ec:	add	r1, pc, r1
   220f0:	add	r0, pc, r0
   220f4:	bl	12a08 <__assert_fail@plt>
   220f8:	andeq	r5, r0, r8, lsr #20
   220fc:	andeq	r6, r0, r4, ror #2
   22100:			; <UNDEFINED> instruction: 0x000064b0
   22104:	andeq	r0, r0, r5, asr #13
   22108:	andeq	r5, r0, r0, lsl #20
   2210c:	andeq	r6, r0, ip, lsr r1
   22110:	andeq	r6, r0, r8, lsr #6
   22114:	andeq	r0, r0, r4, asr #13

00022118 <flatcc_builder_string_edit@@Base>:
   22118:	ldr	r0, [r0, #16]
   2211c:	bx	lr

00022120 <flatcc_builder_string_len@@Base>:
   22120:	ldr	r3, [r0, #32]
   22124:	ldr	r0, [r3, #20]
   22128:	bx	lr

0002212c <flatcc_builder_table_add@@Base>:
   2212c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   22130:	mov	r4, r0
   22134:	ldr	r0, [r0, #32]
   22138:	ldrh	r0, [r0, #14]
   2213c:	cmp	r0, #3
   22140:	bne	22258 <flatcc_builder_table_add@@Base+0x12c>
   22144:	ldr	r0, [pc, #308]	; 22280 <flatcc_builder_table_add@@Base+0x154>
   22148:	cmp	r1, r0
   2214c:	bhi	22230 <flatcc_builder_table_add@@Base+0x104>
   22150:	ldrh	r0, [r4, #130]	; 0x82
   22154:	lsl	r8, r1, #1
   22158:	cmp	r0, r3
   2215c:	ldr	r0, [r4, #4]
   22160:	strhcc	r3, [r4, #130]	; 0x82
   22164:	add	lr, r0, r8
   22168:	ldrh	r7, [r0, r8]
   2216c:	cmp	r7, #0
   22170:	bne	22208 <flatcc_builder_table_add@@Base+0xdc>
   22174:	ldr	ip, [r4, #12]
   22178:	ldr	r9, [pc, #260]	; 22284 <flatcc_builder_table_add@@Base+0x158>
   2217c:	eor	ip, ip, r1
   22180:	ldr	r0, [r4, #20]
   22184:	mul	ip, r9, ip
   22188:	sub	r6, r3, #1
   2218c:	eor	ip, ip, r2
   22190:	rsb	r3, r3, #0
   22194:	add	r6, r6, r0
   22198:	and	r6, r6, r3
   2219c:	mul	ip, r9, ip
   221a0:	ldr	r3, [r4, #24]
   221a4:	add	r2, r2, r6
   221a8:	cmp	r2, r3
   221ac:	uxth	r5, r1
   221b0:	str	ip, [r4, #12]
   221b4:	str	r2, [r4, #20]
   221b8:	bcs	221e0 <flatcc_builder_table_add@@Base+0xb4>
   221bc:	add	r3, r6, #4
   221c0:	strh	r3, [lr]
   221c4:	ldrh	r3, [r4, #8]
   221c8:	ldr	r0, [r4, #16]
   221cc:	cmp	r3, r5
   221d0:	addls	r5, r5, #1
   221d4:	strhls	r5, [r4, #8]
   221d8:	add	r0, r0, r6
   221dc:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   221e0:	add	r1, r2, #1
   221e4:	mov	r0, r4
   221e8:	ldr	r2, [pc, #152]	; 22288 <flatcc_builder_table_add@@Base+0x15c>
   221ec:	bl	1e8c4 <time_struct_buffer@@Base+0x98>
   221f0:	cmp	r0, #0
   221f4:	ldreq	lr, [r4, #4]
   221f8:	addeq	lr, lr, r8
   221fc:	beq	221bc <flatcc_builder_table_add@@Base+0x90>
   22200:	mov	r0, r7
   22204:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   22208:	ldr	r3, [pc, #124]	; 2228c <flatcc_builder_table_add@@Base+0x160>
   2220c:	ldr	r1, [pc, #124]	; 22290 <flatcc_builder_table_add@@Base+0x164>
   22210:	add	r3, pc, r3
   22214:	ldr	r0, [pc, #120]	; 22294 <flatcc_builder_table_add@@Base+0x168>
   22218:	add	r3, r3, #1136	; 0x470
   2221c:	ldr	r2, [pc, #116]	; 22298 <flatcc_builder_table_add@@Base+0x16c>
   22220:	add	r3, r3, #4
   22224:	add	r1, pc, r1
   22228:	add	r0, pc, r0
   2222c:	bl	12a08 <__assert_fail@plt>
   22230:	ldr	r3, [pc, #100]	; 2229c <flatcc_builder_table_add@@Base+0x170>
   22234:	ldr	r1, [pc, #100]	; 222a0 <flatcc_builder_table_add@@Base+0x174>
   22238:	add	r3, pc, r3
   2223c:	ldr	r0, [pc, #96]	; 222a4 <flatcc_builder_table_add@@Base+0x178>
   22240:	add	r3, r3, #1136	; 0x470
   22244:	ldr	r2, [pc, #92]	; 222a8 <flatcc_builder_table_add@@Base+0x17c>
   22248:	add	r3, r3, #4
   2224c:	add	r1, pc, r1
   22250:	add	r0, pc, r0
   22254:	bl	12a08 <__assert_fail@plt>
   22258:	ldr	r3, [pc, #76]	; 222ac <flatcc_builder_table_add@@Base+0x180>
   2225c:	ldr	r1, [pc, #76]	; 222b0 <flatcc_builder_table_add@@Base+0x184>
   22260:	add	r3, pc, r3
   22264:	ldr	r0, [pc, #72]	; 222b4 <flatcc_builder_table_add@@Base+0x188>
   22268:	add	r3, r3, #1136	; 0x470
   2226c:	ldr	r2, [pc, #68]	; 222b8 <flatcc_builder_table_add@@Base+0x18c>
   22270:	add	r3, r3, #4
   22274:	add	r1, pc, r1
   22278:	add	r0, pc, r0
   2227c:	bl	12a08 <__assert_fail@plt>
   22280:	strdeq	r7, [r0], -ip
   22284:			; <UNDEFINED> instruction: 0x9e3779b1
   22288:	strdeq	pc, [r0], -ip
   2228c:	andeq	r5, r0, r8, asr #17
   22290:	andeq	r6, r0, r4
   22294:	andeq	r6, r0, r8, lsl #1
   22298:	strdeq	r0, [r0], -r8
   2229c:	andeq	r5, r0, r0, lsr #17
   222a0:	ldrdeq	r5, [r0], -ip
   222a4:	andeq	r6, r0, ip, asr #6
   222a8:	andeq	r0, r0, lr, ror #13
   222ac:	andeq	r5, r0, r8, ror r8
   222b0:			; <UNDEFINED> instruction: 0x00005fb4
   222b4:	andeq	r6, r0, ip, lsl #5
   222b8:	andeq	r0, r0, sp, ror #13

000222bc <flatcc_builder_table_edit@@Base>:
   222bc:	ldr	r3, [r0, #32]
   222c0:	ldrh	r3, [r3, #14]
   222c4:	cmp	r3, #3
   222c8:	bne	222e0 <flatcc_builder_table_edit@@Base+0x24>
   222cc:	ldr	r3, [r0, #20]
   222d0:	ldr	r0, [r0, #16]
   222d4:	sub	r1, r3, r1
   222d8:	add	r0, r0, r1
   222dc:	bx	lr
   222e0:	ldr	r3, [pc, #32]	; 22308 <flatcc_builder_table_edit@@Base+0x4c>
   222e4:	ldr	r1, [pc, #32]	; 2230c <flatcc_builder_table_edit@@Base+0x50>
   222e8:	ldr	r0, [pc, #32]	; 22310 <flatcc_builder_table_edit@@Base+0x54>
   222ec:	add	r3, pc, r3
   222f0:	push	{r4, lr}
   222f4:	add	r3, r3, #1168	; 0x490
   222f8:	ldr	r2, [pc, #20]	; 22314 <flatcc_builder_table_edit@@Base+0x58>
   222fc:	add	r1, pc, r1
   22300:	add	r0, pc, r0
   22304:	bl	12a08 <__assert_fail@plt>
   22308:	andeq	r5, r0, ip, ror #15
   2230c:	andeq	r5, r0, ip, lsr #30
   22310:	andeq	r6, r0, r4, lsl #4
   22314:	andeq	r0, r0, r2, lsl #14

00022318 <flatcc_builder_table_add_copy@@Base>:
   22318:	push	{r4, r5, r6, lr}
   2231c:	mov	r4, r3
   22320:	mov	r6, r2
   22324:	ldrh	r3, [sp, #16]
   22328:	mov	r2, r4
   2232c:	bl	2212c <flatcc_builder_table_add@@Base>
   22330:	subs	r5, r0, #0
   22334:	beq	22344 <flatcc_builder_table_add_copy@@Base+0x2c>
   22338:	mov	r2, r4
   2233c:	mov	r1, r6
   22340:	bl	12930 <memcpy@plt>
   22344:	mov	r0, r5
   22348:	pop	{r4, r5, r6, pc}

0002234c <flatcc_builder_table_add_offset@@Base>:
   2234c:	ldr	r3, [r0, #32]
   22350:	push	{r4, r5, r6, r7, r8, lr}
   22354:	ldrh	r3, [r3, #14]
   22358:	cmp	r3, #3
   2235c:	bne	22474 <flatcc_builder_table_add_offset@@Base+0x128>
   22360:	ldr	r3, [pc, #308]	; 2249c <flatcc_builder_table_add_offset@@Base+0x150>
   22364:	cmp	r1, r3
   22368:	bhi	2244c <flatcc_builder_table_add_offset@@Base+0x100>
   2236c:	ldr	r3, [r0, #4]
   22370:	lsl	r7, r1, #1
   22374:	mov	r4, r0
   22378:	ldrh	r6, [r3, r7]
   2237c:	add	ip, r3, r7
   22380:	cmp	r6, #0
   22384:	bne	22424 <flatcc_builder_table_add_offset@@Base+0xd8>
   22388:	ldr	r3, [r0, #12]
   2238c:	ldr	r2, [pc, #268]	; 224a0 <flatcc_builder_table_add_offset@@Base+0x154>
   22390:	eor	r3, r3, r1
   22394:	ldr	r5, [r0, #20]
   22398:	mul	r3, r2, r3
   2239c:	add	r5, r5, #3
   223a0:	eor	r3, r3, #4
   223a4:	bic	r5, r5, #3
   223a8:	mul	r3, r2, r3
   223ac:	ldr	lr, [r0, #24]
   223b0:	add	r2, r5, #4
   223b4:	cmp	r2, lr
   223b8:	uxth	r8, r1
   223bc:	str	r3, [r0, #12]
   223c0:	str	r2, [r0, #20]
   223c4:	bhi	22400 <flatcc_builder_table_add_offset@@Base+0xb4>
   223c8:	uxth	r2, r5
   223cc:	add	r3, r2, #4
   223d0:	strh	r3, [ip]
   223d4:	ldrh	r3, [r4, #8]
   223d8:	ldr	r0, [r4, #16]
   223dc:	cmp	r3, r8
   223e0:	ldr	r3, [r4]
   223e4:	addls	r1, r8, #1
   223e8:	strhls	r1, [r4, #8]
   223ec:	add	r1, r3, #2
   223f0:	str	r1, [r4]
   223f4:	add	r0, r0, r5
   223f8:	strh	r2, [r3]
   223fc:	pop	{r4, r5, r6, r7, r8, pc}
   22400:	mov	r1, r2
   22404:	ldr	r2, [pc, #152]	; 224a4 <flatcc_builder_table_add_offset@@Base+0x158>
   22408:	bl	1e8c4 <time_struct_buffer@@Base+0x98>
   2240c:	cmp	r0, #0
   22410:	ldreq	ip, [r4, #4]
   22414:	addeq	ip, ip, r7
   22418:	beq	223c8 <flatcc_builder_table_add_offset@@Base+0x7c>
   2241c:	mov	r0, r6
   22420:	pop	{r4, r5, r6, r7, r8, pc}
   22424:	ldr	r3, [pc, #124]	; 224a8 <flatcc_builder_table_add_offset@@Base+0x15c>
   22428:	ldr	r1, [pc, #124]	; 224ac <flatcc_builder_table_add_offset@@Base+0x160>
   2242c:	add	r3, pc, r3
   22430:	ldr	r0, [pc, #120]	; 224b0 <flatcc_builder_table_add_offset@@Base+0x164>
   22434:	add	r3, r3, #1184	; 0x4a0
   22438:	ldr	r2, [pc, #116]	; 224b4 <flatcc_builder_table_add_offset@@Base+0x168>
   2243c:	add	r3, r3, #12
   22440:	add	r1, pc, r1
   22444:	add	r0, pc, r0
   22448:	bl	12a08 <__assert_fail@plt>
   2244c:	ldr	r3, [pc, #100]	; 224b8 <flatcc_builder_table_add_offset@@Base+0x16c>
   22450:	ldr	r1, [pc, #100]	; 224bc <flatcc_builder_table_add_offset@@Base+0x170>
   22454:	add	r3, pc, r3
   22458:	ldr	r0, [pc, #96]	; 224c0 <flatcc_builder_table_add_offset@@Base+0x174>
   2245c:	add	r3, r3, #1184	; 0x4a0
   22460:	ldr	r2, [pc, #92]	; 224c4 <flatcc_builder_table_add_offset@@Base+0x178>
   22464:	add	r3, r3, #12
   22468:	add	r1, pc, r1
   2246c:	add	r0, pc, r0
   22470:	bl	12a08 <__assert_fail@plt>
   22474:	ldr	r3, [pc, #76]	; 224c8 <flatcc_builder_table_add_offset@@Base+0x17c>
   22478:	ldr	r1, [pc, #76]	; 224cc <flatcc_builder_table_add_offset@@Base+0x180>
   2247c:	add	r3, pc, r3
   22480:	ldr	r0, [pc, #72]	; 224d0 <flatcc_builder_table_add_offset@@Base+0x184>
   22484:	add	r3, r3, #1184	; 0x4a0
   22488:	ldr	r2, [pc, #68]	; 224d4 <flatcc_builder_table_add_offset@@Base+0x188>
   2248c:	add	r3, r3, #12
   22490:	add	r1, pc, r1
   22494:	add	r0, pc, r0
   22498:	bl	12a08 <__assert_fail@plt>
   2249c:	strdeq	r7, [r0], -ip
   224a0:			; <UNDEFINED> instruction: 0x9e3779b1
   224a4:	strdeq	pc, [r0], -ip
   224a8:	andeq	r5, r0, ip, lsr #13
   224ac:	andeq	r5, r0, r8, ror #27
   224b0:	andeq	r5, r0, ip, ror #28
   224b4:	andeq	r0, r0, fp, lsl r7
   224b8:	andeq	r5, r0, r4, lsl #13
   224bc:	andeq	r5, r0, r0, asr #27
   224c0:	andeq	r6, r0, r0, lsr r1
   224c4:	andeq	r0, r0, r4, lsl r7
   224c8:	andeq	r5, r0, ip, asr r6
   224cc:	muleq	r0, r8, sp
   224d0:	andeq	r6, r0, r0, ror r0
   224d4:	andeq	r0, r0, r3, lsl r7

000224d8 <flatcc_builder_table_add_union@@Base>:
   224d8:	push	{r4, r5, r6, r7, lr}
   224dc:	sub	sp, sp, #12
   224e0:	add	ip, sp, #8
   224e4:	stmdb	ip, {r2, r3}
   224e8:	ldr	r3, [r0, #32]
   224ec:	ldrb	r5, [sp]
   224f0:	ldr	r6, [sp, #4]
   224f4:	ldrh	r3, [r3, #14]
   224f8:	cmp	r3, #3
   224fc:	bne	22584 <flatcc_builder_table_add_union@@Base+0xac>
   22500:	cmp	r5, #0
   22504:	mov	r4, r0
   22508:	mov	r7, r1
   2250c:	beq	22554 <flatcc_builder_table_add_union@@Base+0x7c>
   22510:	cmp	r6, #0
   22514:	beq	22528 <flatcc_builder_table_add_union@@Base+0x50>
   22518:	bl	2234c <flatcc_builder_table_add_offset@@Base>
   2251c:	cmp	r0, #0
   22520:	strne	r6, [r0]
   22524:	beq	225d4 <flatcc_builder_table_add_union@@Base+0xfc>
   22528:	mov	r3, #1
   2252c:	sub	r1, r7, #1
   22530:	mov	r0, r4
   22534:	mov	r2, r3
   22538:	bl	2212c <flatcc_builder_table_add@@Base>
   2253c:	cmp	r0, #0
   22540:	beq	225ac <flatcc_builder_table_add_union@@Base+0xd4>
   22544:	strb	r5, [r0]
   22548:	mov	r0, #0
   2254c:	add	sp, sp, #12
   22550:	pop	{r4, r5, r6, r7, pc}
   22554:	cmp	r6, #0
   22558:	beq	22528 <flatcc_builder_table_add_union@@Base+0x50>
   2255c:	ldr	r3, [pc, #152]	; 225fc <flatcc_builder_table_add_union@@Base+0x124>
   22560:	ldr	r1, [pc, #152]	; 22600 <flatcc_builder_table_add_union@@Base+0x128>
   22564:	add	r3, pc, r3
   22568:	ldr	r0, [pc, #148]	; 22604 <flatcc_builder_table_add_union@@Base+0x12c>
   2256c:	add	r3, r3, #1216	; 0x4c0
   22570:	ldr	r2, [pc, #144]	; 22608 <flatcc_builder_table_add_union@@Base+0x130>
   22574:	add	r3, r3, #12
   22578:	add	r1, pc, r1
   2257c:	add	r0, pc, r0
   22580:	bl	12a08 <__assert_fail@plt>
   22584:	ldr	r3, [pc, #128]	; 2260c <flatcc_builder_table_add_union@@Base+0x134>
   22588:	ldr	r1, [pc, #128]	; 22610 <flatcc_builder_table_add_union@@Base+0x138>
   2258c:	add	r3, pc, r3
   22590:	ldr	r0, [pc, #124]	; 22614 <flatcc_builder_table_add_union@@Base+0x13c>
   22594:	add	r3, r3, #1216	; 0x4c0
   22598:	ldr	r2, [pc, #120]	; 22618 <flatcc_builder_table_add_union@@Base+0x140>
   2259c:	add	r3, r3, #12
   225a0:	add	r1, pc, r1
   225a4:	add	r0, pc, r0
   225a8:	bl	12a08 <__assert_fail@plt>
   225ac:	ldr	r3, [pc, #104]	; 2261c <flatcc_builder_table_add_union@@Base+0x144>
   225b0:	ldr	r1, [pc, #104]	; 22620 <flatcc_builder_table_add_union@@Base+0x148>
   225b4:	add	r3, pc, r3
   225b8:	ldr	r0, [pc, #100]	; 22624 <flatcc_builder_table_add_union@@Base+0x14c>
   225bc:	add	r3, r3, #1216	; 0x4c0
   225c0:	ldr	r2, [pc, #96]	; 22628 <flatcc_builder_table_add_union@@Base+0x150>
   225c4:	add	r3, r3, #12
   225c8:	add	r1, pc, r1
   225cc:	add	r0, pc, r0
   225d0:	bl	12a08 <__assert_fail@plt>
   225d4:	ldr	r3, [pc, #80]	; 2262c <flatcc_builder_table_add_union@@Base+0x154>
   225d8:	ldr	r1, [pc, #80]	; 22630 <flatcc_builder_table_add_union@@Base+0x158>
   225dc:	add	r3, pc, r3
   225e0:	ldr	r0, [pc, #76]	; 22634 <flatcc_builder_table_add_union@@Base+0x15c>
   225e4:	add	r3, r3, #1216	; 0x4c0
   225e8:	ldr	r2, [pc, #72]	; 22638 <flatcc_builder_table_add_union@@Base+0x160>
   225ec:	add	r3, r3, #12
   225f0:	add	r1, pc, r1
   225f4:	add	r0, pc, r0
   225f8:	bl	12a08 <__assert_fail@plt>
   225fc:	andeq	r5, r0, r4, ror r5
   22600:			; <UNDEFINED> instruction: 0x00005cb0
   22604:	andeq	r6, r0, r4, rrx
   22608:	andeq	r0, r0, pc, ror #11
   2260c:	andeq	r5, r0, ip, asr #10
   22610:	andeq	r5, r0, r8, lsl #25
   22614:	andeq	r5, r0, r0, ror #30
   22618:	andeq	r0, r0, lr, ror #11
   2261c:	andeq	r5, r0, r4, lsr #10
   22620:	andeq	r5, r0, r0, ror #24
   22624:	andeq	r6, r0, r4, asr #32
   22628:	strdeq	r0, [r0], -r6
   2262c:	strdeq	r5, [r0], -ip
   22630:	andeq	r5, r0, r8, lsr ip
   22634:	andeq	r6, r0, r0, lsl r0
   22638:	strdeq	r0, [r0], -r2

0002263c <flatcc_builder_table_add_union_vector@@Base>:
   2263c:	push	{r4, r5, r6, r7, lr}
   22640:	sub	sp, sp, #12
   22644:	add	ip, sp, #8
   22648:	stmdb	ip, {r2, r3}
   2264c:	ldr	r3, [r0, #32]
   22650:	ldr	r4, [sp]
   22654:	ldr	r6, [sp, #4]
   22658:	ldrh	r3, [r3, #14]
   2265c:	cmp	r3, #3
   22660:	bne	22704 <flatcc_builder_table_add_union_vector@@Base+0xc8>
   22664:	clz	r3, r6
   22668:	clz	r2, r4
   2266c:	lsr	r3, r3, #5
   22670:	lsr	r2, r2, #5
   22674:	cmp	r2, r3
   22678:	beq	22698 <flatcc_builder_table_add_union_vector@@Base+0x5c>
   2267c:	adds	r4, r4, #0
   22680:	movne	r4, #1
   22684:	cmp	r4, r3
   22688:	mvnne	r0, #0
   2268c:	beq	2272c <flatcc_builder_table_add_union_vector@@Base+0xf0>
   22690:	add	sp, sp, #12
   22694:	pop	{r4, r5, r6, r7, pc}
   22698:	cmp	r4, #0
   2269c:	moveq	r0, r4
   226a0:	beq	22690 <flatcc_builder_table_add_union_vector@@Base+0x54>
   226a4:	mov	r7, r1
   226a8:	sub	r1, r1, #1
   226ac:	mov	r5, r0
   226b0:	bl	2234c <flatcc_builder_table_add_offset@@Base>
   226b4:	cmp	r0, #0
   226b8:	beq	22754 <flatcc_builder_table_add_union_vector@@Base+0x118>
   226bc:	str	r4, [r0]
   226c0:	mov	r1, r7
   226c4:	mov	r0, r5
   226c8:	bl	2234c <flatcc_builder_table_add_offset@@Base>
   226cc:	cmp	r0, #0
   226d0:	strne	r6, [r0]
   226d4:	movne	r0, #0
   226d8:	bne	22690 <flatcc_builder_table_add_union_vector@@Base+0x54>
   226dc:	ldr	r3, [pc, #152]	; 2277c <flatcc_builder_table_add_union_vector@@Base+0x140>
   226e0:	ldr	r1, [pc, #152]	; 22780 <flatcc_builder_table_add_union_vector@@Base+0x144>
   226e4:	add	r3, pc, r3
   226e8:	ldr	r0, [pc, #148]	; 22784 <flatcc_builder_table_add_union_vector@@Base+0x148>
   226ec:	add	r3, r3, #1248	; 0x4e0
   226f0:	ldr	r2, [pc, #144]	; 22788 <flatcc_builder_table_add_union_vector@@Base+0x14c>
   226f4:	add	r3, r3, #12
   226f8:	add	r1, pc, r1
   226fc:	add	r0, pc, r0
   22700:	bl	12a08 <__assert_fail@plt>
   22704:	ldr	r3, [pc, #128]	; 2278c <flatcc_builder_table_add_union_vector@@Base+0x150>
   22708:	ldr	r1, [pc, #128]	; 22790 <flatcc_builder_table_add_union_vector@@Base+0x154>
   2270c:	add	r3, pc, r3
   22710:	ldr	r0, [pc, #124]	; 22794 <flatcc_builder_table_add_union_vector@@Base+0x158>
   22714:	add	r3, r3, #1248	; 0x4e0
   22718:	mov	r2, #1536	; 0x600
   2271c:	add	r3, r3, #12
   22720:	add	r1, pc, r1
   22724:	add	r0, pc, r0
   22728:	bl	12a08 <__assert_fail@plt>
   2272c:	ldr	r3, [pc, #100]	; 22798 <flatcc_builder_table_add_union_vector@@Base+0x15c>
   22730:	ldr	r1, [pc, #100]	; 2279c <flatcc_builder_table_add_union_vector@@Base+0x160>
   22734:	add	r3, pc, r3
   22738:	ldr	r0, [pc, #96]	; 227a0 <flatcc_builder_table_add_union_vector@@Base+0x164>
   2273c:	add	r3, r3, #1248	; 0x4e0
   22740:	ldr	r2, [pc, #92]	; 227a4 <flatcc_builder_table_add_union_vector@@Base+0x168>
   22744:	add	r3, r3, #12
   22748:	add	r1, pc, r1
   2274c:	add	r0, pc, r0
   22750:	bl	12a08 <__assert_fail@plt>
   22754:	ldr	r3, [pc, #76]	; 227a8 <flatcc_builder_table_add_union_vector@@Base+0x16c>
   22758:	ldr	r1, [pc, #76]	; 227ac <flatcc_builder_table_add_union_vector@@Base+0x170>
   2275c:	add	r3, pc, r3
   22760:	ldr	r0, [pc, #72]	; 227b0 <flatcc_builder_table_add_union_vector@@Base+0x174>
   22764:	add	r3, r3, #1248	; 0x4e0
   22768:	ldr	r2, [pc, #68]	; 227b4 <flatcc_builder_table_add_union_vector@@Base+0x178>
   2276c:	add	r3, r3, #12
   22770:	add	r1, pc, r1
   22774:	add	r0, pc, r0
   22778:	bl	12a08 <__assert_fail@plt>
   2277c:	strdeq	r5, [r0], -r4
   22780:	andeq	r5, r0, r0, lsr fp
   22784:	andeq	r5, r0, r8, lsl #30
   22788:	andeq	r0, r0, r8, lsl #12
   2278c:	andeq	r5, r0, ip, asr #7
   22790:	andeq	r5, r0, r8, lsl #22
   22794:	andeq	r5, r0, r0, ror #27
   22798:	andeq	r5, r0, r4, lsr #7
   2279c:	andeq	r5, r0, r0, ror #21
   227a0:	ldrdeq	r5, [r0], -r0
   227a4:	andeq	r0, r0, r1, lsl #12
   227a8:	andeq	r5, r0, ip, ror r3
   227ac:			; <UNDEFINED> instruction: 0x00005ab8
   227b0:	muleq	r0, r0, lr
   227b4:	andeq	r0, r0, r4, lsl #12

000227b8 <flatcc_builder_push_buffer_alignment@@Base>:
   227b8:	mov	r3, r0
   227bc:	mov	r2, #4
   227c0:	ldrh	r0, [r0, #128]	; 0x80
   227c4:	strh	r2, [r3, #128]	; 0x80
   227c8:	bx	lr

000227cc <flatcc_builder_pop_buffer_alignment@@Base>:
   227cc:	ldrh	r3, [r0, #128]	; 0x80
   227d0:	cmp	r3, r1
   227d4:	strhcc	r1, [r0, #128]	; 0x80
   227d8:	bx	lr

000227dc <flatcc_builder_get_buffer_alignment@@Base>:
   227dc:	ldrh	r0, [r0, #128]	; 0x80
   227e0:	bx	lr

000227e4 <flatcc_builder_set_vtable_clustering@@Base>:
   227e4:	clz	r1, r1
   227e8:	lsr	r1, r1, #5
   227ec:	str	r1, [r0, #180]	; 0xb4
   227f0:	bx	lr

000227f4 <flatcc_builder_set_block_align@@Base>:
   227f4:	strh	r1, [r0, #132]	; 0x84
   227f8:	bx	lr

000227fc <flatcc_builder_get_level@@Base>:
   227fc:	ldr	r0, [r0, #156]	; 0x9c
   22800:	bx	lr

00022804 <flatcc_builder_set_max_level@@Base>:
   22804:	ldr	r3, [r0, #160]	; 0xa0
   22808:	str	r1, [r0, #176]	; 0xb0
   2280c:	cmp	r1, r3
   22810:	strgt	r1, [r0, #160]	; 0xa0
   22814:	bx	lr

00022818 <flatcc_builder_get_buffer_size@@Base>:
   22818:	ldr	r2, [r0, #140]	; 0x8c
   2281c:	ldr	r0, [r0, #136]	; 0x88
   22820:	sub	r0, r2, r0
   22824:	bx	lr

00022828 <flatcc_builder_get_buffer_start@@Base>:
   22828:	ldr	r0, [r0, #136]	; 0x88
   2282c:	bx	lr

00022830 <flatcc_builder_get_buffer_end@@Base>:
   22830:	ldr	r0, [r0, #140]	; 0x8c
   22834:	bx	lr

00022838 <flatcc_builder_set_vtable_cache_limit@@Base>:
   22838:	str	r1, [r0, #172]	; 0xac
   2283c:	bx	lr

00022840 <flatcc_builder_set_identifier@@Base>:
   22840:	ldr	r3, [pc, #32]	; 22868 <flatcc_builder_set_identifier@@Base+0x28>
   22844:	cmp	r1, #0
   22848:	add	r3, pc, r3
   2284c:	beq	2285c <flatcc_builder_set_identifier@@Base+0x1c>
   22850:	ldr	r3, [r1]
   22854:	str	r3, [r0, #168]	; 0xa8
   22858:	bx	lr
   2285c:	ldr	r2, [pc, #8]	; 2286c <flatcc_builder_set_identifier@@Base+0x2c>
   22860:	ldr	r1, [r3, r2]
   22864:	b	22850 <flatcc_builder_set_identifier@@Base+0x10>
   22868:			; <UNDEFINED> instruction: 0x000167b0
   2286c:	andeq	r0, r0, r4, rrx

00022870 <flatcc_builder_get_type@@Base>:
   22870:	ldr	r0, [r0, #32]
   22874:	cmp	r0, #0
   22878:	ldrhne	r0, [r0, #14]
   2287c:	bx	lr

00022880 <flatcc_builder_get_type_at@@Base>:
   22880:	cmp	r1, #0
   22884:	ble	228ac <flatcc_builder_get_type_at@@Base+0x2c>
   22888:	ldr	r3, [r0, #156]	; 0x9c
   2288c:	cmp	r1, r3
   22890:	bgt	228ac <flatcc_builder_get_type_at@@Base+0x2c>
   22894:	sub	r1, r1, r3
   22898:	ldr	r3, [r0, #32]
   2289c:	add	r1, r1, r1, lsl #3
   228a0:	add	r1, r3, r1, lsl #2
   228a4:	ldrh	r0, [r1, #14]
   228a8:	bx	lr
   228ac:	mov	r0, #0
   228b0:	bx	lr

000228b4 <flatcc_builder_get_direct_buffer@@Base>:
   228b4:	ldr	r3, [r0, #184]	; 0xb8
   228b8:	cmp	r3, #0
   228bc:	beq	228d0 <flatcc_builder_get_direct_buffer@@Base+0x1c>
   228c0:	ldr	r2, [r0, #188]	; 0xbc
   228c4:	ldr	r3, [r0, #192]	; 0xc0
   228c8:	cmp	r2, r3
   228cc:	beq	228e4 <flatcc_builder_get_direct_buffer@@Base+0x30>
   228d0:	cmp	r1, #0
   228d4:	movne	r0, #0
   228d8:	strne	r0, [r1]
   228dc:	moveq	r0, r1
   228e0:	bx	lr
   228e4:	cmp	r1, #0
   228e8:	ldrne	r3, [r0, #212]	; 0xd4
   228ec:	ldr	r0, [r0, #196]	; 0xc4
   228f0:	strne	r3, [r1]
   228f4:	bx	lr

000228f8 <flatcc_builder_copy_buffer@@Base>:
   228f8:	ldr	r3, [r0, #184]	; 0xb8
   228fc:	cmp	r3, #0
   22900:	beq	22940 <flatcc_builder_copy_buffer@@Base+0x48>
   22904:	push	{r4, lr}
   22908:	add	r0, r0, #188	; 0xbc
   2290c:	bl	23010 <flatcc_emitter_copy_buffer@@Base>
   22910:	cmp	r0, #0
   22914:	popne	{r4, pc}
   22918:	ldr	r3, [pc, #40]	; 22948 <flatcc_builder_copy_buffer@@Base+0x50>
   2291c:	ldr	r1, [pc, #40]	; 2294c <flatcc_builder_copy_buffer@@Base+0x54>
   22920:	add	r3, pc, r3
   22924:	ldr	r0, [pc, #36]	; 22950 <flatcc_builder_copy_buffer@@Base+0x58>
   22928:	add	r3, r3, #1296	; 0x510
   2292c:	ldr	r2, [pc, #32]	; 22954 <flatcc_builder_copy_buffer@@Base+0x5c>
   22930:	add	r3, r3, #4
   22934:	add	r1, pc, r1
   22938:	add	r0, pc, r0
   2293c:	bl	12a08 <__assert_fail@plt>
   22940:	mov	r0, r3
   22944:	bx	lr
   22948:			; <UNDEFINED> instruction: 0x000051b8
   2294c:	strdeq	r5, [r0], -r4
   22950:	muleq	r0, r8, fp
   22954:	andeq	r0, r0, r6, lsl #15

00022958 <flatcc_builder_finalize_buffer@@Base>:
   22958:	push	{r4, r5, r6, lr}
   2295c:	mov	r5, r1
   22960:	mov	r6, r0
   22964:	bl	22818 <flatcc_builder_get_buffer_size@@Base>
   22968:	cmp	r5, #0
   2296c:	strne	r0, [r5]
   22970:	mov	r4, r0
   22974:	bl	12978 <malloc@plt>
   22978:	subs	r5, r0, #0
   2297c:	beq	229a0 <flatcc_builder_finalize_buffer@@Base+0x48>
   22980:	mov	r2, r4
   22984:	mov	r0, r6
   22988:	mov	r1, r5
   2298c:	bl	228f8 <flatcc_builder_copy_buffer@@Base>
   22990:	cmp	r0, #0
   22994:	beq	229c4 <flatcc_builder_finalize_buffer@@Base+0x6c>
   22998:	mov	r0, r5
   2299c:	pop	{r4, r5, r6, pc}
   229a0:	ldr	r3, [pc, #64]	; 229e8 <flatcc_builder_finalize_buffer@@Base+0x90>
   229a4:	ldr	r1, [pc, #64]	; 229ec <flatcc_builder_finalize_buffer@@Base+0x94>
   229a8:	ldr	r0, [pc, #64]	; 229f0 <flatcc_builder_finalize_buffer@@Base+0x98>
   229ac:	add	r3, pc, r3
   229b0:	ldr	r2, [pc, #60]	; 229f4 <flatcc_builder_finalize_buffer@@Base+0x9c>
   229b4:	add	r3, r3, #1328	; 0x530
   229b8:	add	r1, pc, r1
   229bc:	add	r0, pc, r0
   229c0:	bl	12a08 <__assert_fail@plt>
   229c4:	ldr	r3, [pc, #44]	; 229f8 <flatcc_builder_finalize_buffer@@Base+0xa0>
   229c8:	ldr	r1, [pc, #44]	; 229fc <flatcc_builder_finalize_buffer@@Base+0xa4>
   229cc:	ldr	r0, [pc, #44]	; 22a00 <flatcc_builder_finalize_buffer@@Base+0xa8>
   229d0:	add	r3, pc, r3
   229d4:	ldr	r2, [pc, #40]	; 22a04 <flatcc_builder_finalize_buffer@@Base+0xac>
   229d8:	add	r3, r3, #1328	; 0x530
   229dc:	add	r1, pc, r1
   229e0:	add	r0, pc, r0
   229e4:	bl	12a08 <__assert_fail@plt>
   229e8:	andeq	r5, r0, ip, lsr #2
   229ec:	andeq	r5, r0, r0, ror r8
   229f0:	strdeq	r5, [r0], -r4
   229f4:	muleq	r0, r8, r7
   229f8:	andeq	r5, r0, r8, lsl #2
   229fc:	andeq	r5, r0, ip, asr #16
   22a00:	ldrdeq	r5, [r0], -r0
   22a04:	muleq	r0, ip, r7

00022a08 <flatcc_builder_finalize_aligned_buffer@@Base>:
   22a08:	push	{r4, r5, r6, r7, lr}
   22a0c:	sub	sp, sp, #12
   22a10:	mov	r6, r1
   22a14:	mov	r7, r0
   22a18:	bl	22818 <flatcc_builder_get_buffer_size@@Base>
   22a1c:	cmp	r6, #0
   22a20:	strne	r0, [r6]
   22a24:	mov	r4, r0
   22a28:	mov	r0, r7
   22a2c:	bl	227dc <flatcc_builder_get_buffer_alignment@@Base>
   22a30:	sub	r4, r4, #1
   22a34:	mov	r1, r0
   22a38:	rsb	r3, r0, #0
   22a3c:	add	r4, r4, r0
   22a40:	add	r0, sp, #8
   22a44:	cmp	r1, #4
   22a48:	and	r4, r4, r3
   22a4c:	mov	r3, #0
   22a50:	movcc	r1, #4
   22a54:	mov	r2, r4
   22a58:	str	r3, [r0, #-4]!
   22a5c:	bl	129b4 <posix_memalign@plt>
   22a60:	cmp	r0, #0
   22a64:	beq	22a94 <flatcc_builder_finalize_aligned_buffer@@Base+0x8c>
   22a68:	ldr	r0, [sp, #4]
   22a6c:	cmp	r0, #0
   22a70:	beq	22a78 <flatcc_builder_finalize_aligned_buffer@@Base+0x70>
   22a74:	bl	12924 <free@plt>
   22a78:	cmp	r6, #0
   22a7c:	moveq	r5, r6
   22a80:	movne	r5, #0
   22a84:	strne	r5, [r6]
   22a88:	mov	r0, r5
   22a8c:	add	sp, sp, #12
   22a90:	pop	{r4, r5, r6, r7, pc}
   22a94:	ldr	r5, [sp, #4]
   22a98:	cmp	r5, #0
   22a9c:	beq	22a78 <flatcc_builder_finalize_aligned_buffer@@Base+0x70>
   22aa0:	mov	r2, r4
   22aa4:	mov	r0, r7
   22aa8:	mov	r1, r5
   22aac:	bl	228f8 <flatcc_builder_copy_buffer@@Base>
   22ab0:	cmp	r0, #0
   22ab4:	bne	22a88 <flatcc_builder_finalize_aligned_buffer@@Base+0x80>
   22ab8:	mov	r0, r5
   22abc:	b	22a74 <flatcc_builder_finalize_aligned_buffer@@Base+0x6c>

00022ac0 <flatcc_builder_aligned_alloc@@Base>:
   22ac0:	push	{r4, lr}
   22ac4:	sub	sp, sp, #8
   22ac8:	add	r3, sp, #8
   22acc:	cmp	r0, #4
   22ad0:	mov	r4, #0
   22ad4:	mov	r2, r1
   22ad8:	str	r4, [r3, #-4]!
   22adc:	movcs	r1, r0
   22ae0:	movcc	r1, #4
   22ae4:	mov	r0, r3
   22ae8:	bl	129b4 <posix_memalign@plt>
   22aec:	cmp	r0, r4
   22af0:	ldr	r0, [sp, #4]
   22af4:	beq	22b08 <flatcc_builder_aligned_alloc@@Base+0x48>
   22af8:	cmp	r0, #0
   22afc:	beq	22b08 <flatcc_builder_aligned_alloc@@Base+0x48>
   22b00:	bl	12924 <free@plt>
   22b04:	mov	r0, r4
   22b08:	add	sp, sp, #8
   22b0c:	pop	{r4, pc}

00022b10 <flatcc_builder_aligned_free@@Base>:
   22b10:	b	12924 <free@plt>

00022b14 <flatcc_builder_get_emit_context@@Base>:
   22b14:	ldr	r0, [r0, #36]	; 0x24
   22b18:	bx	lr

00022b1c <flatcc_emitter_recycle_page@@Base>:
   22b1c:	ldr	r3, [r0]
   22b20:	cmp	r3, r1
   22b24:	beq	22b6c <flatcc_emitter_recycle_page@@Base+0x50>
   22b28:	ldr	r2, [r0, #4]
   22b2c:	cmp	r1, r2
   22b30:	beq	22b6c <flatcc_emitter_recycle_page@@Base+0x50>
   22b34:	ldr	ip, [r1, #2944]	; 0xb80
   22b38:	ldr	r2, [r1, #2948]	; 0xb84
   22b3c:	push	{lr}		; (str lr, [sp, #-4]!)
   22b40:	mov	r0, #0
   22b44:	str	r2, [ip, #2948]	; 0xb84
   22b48:	ldr	r2, [r3, #2948]	; 0xb84
   22b4c:	ldr	lr, [r1, #2948]	; 0xb84
   22b50:	str	ip, [lr, #2944]	; 0xb80
   22b54:	str	r3, [r1, #2944]	; 0xb80
   22b58:	str	r2, [r1, #2948]	; 0xb84
   22b5c:	str	r1, [r2, #2944]	; 0xb80
   22b60:	ldr	r3, [r1, #2944]	; 0xb80
   22b64:	str	r1, [r3, #2948]	; 0xb84
   22b68:	pop	{pc}		; (ldr pc, [sp], #4)
   22b6c:	mvn	r0, #0
   22b70:	bx	lr

00022b74 <flatcc_emitter_reset@@Base>:
   22b74:	ldr	r2, [r0]
   22b78:	cmp	r2, #0
   22b7c:	bxeq	lr
   22b80:	ldr	r3, [r0, #32]
   22b84:	mov	r1, #1472	; 0x5c0
   22b88:	push	{r4, lr}
   22b8c:	cmp	r3, #0
   22b90:	str	r1, [r0, #12]
   22b94:	str	r1, [r0, #20]
   22b98:	ldr	r1, [r0, #24]
   22b9c:	add	ip, r2, #1472	; 0x5c0
   22ba0:	moveq	r3, r1
   22ba4:	stmib	r0, {r2, ip}
   22ba8:	str	ip, [r0, #16]
   22bac:	add	ip, r3, r3, lsl #1
   22bb0:	lsr	r3, r1, #2
   22bb4:	add	r3, r3, ip, lsr #2
   22bb8:	ldr	ip, [r0, #28]
   22bbc:	ldr	lr, [pc, #104]	; 22c2c <flatcc_emitter_reset@@Base+0xb8>
   22bc0:	cmp	ip, r3, lsl #1
   22bc4:	mov	r1, #0
   22bc8:	str	lr, [r2, #2952]	; 0xb88
   22bcc:	str	r3, [r0, #32]
   22bd0:	str	r1, [r0, #24]
   22bd4:	popls	{r4, pc}
   22bd8:	ldr	r3, [r2, #2944]	; 0xb80
   22bdc:	mov	r4, r0
   22be0:	cmp	r2, r3
   22be4:	popeq	{r4, pc}
   22be8:	ldr	r1, [r3, #2944]	; 0xb80
   22bec:	mov	r0, r3
   22bf0:	str	r1, [r2, #2944]	; 0xb80
   22bf4:	ldr	r3, [r3, #2944]	; 0xb80
   22bf8:	str	r2, [r3, #2948]	; 0xb84
   22bfc:	bl	12924 <free@plt>
   22c00:	ldr	r3, [r4, #28]
   22c04:	ldr	r2, [r4, #32]
   22c08:	sub	r3, r3, #2944	; 0xb80
   22c0c:	str	r3, [r4, #28]
   22c10:	cmp	r3, r2, lsl #1
   22c14:	popls	{r4, pc}
   22c18:	ldm	r4, {r1, r2}
   22c1c:	ldr	r3, [r2, #2944]	; 0xb80
   22c20:	cmp	r3, r1
   22c24:	bne	22be8 <flatcc_emitter_reset@@Base+0x74>
   22c28:	pop	{r4, pc}
   22c2c:			; <UNDEFINED> instruction: 0xfffffa40

00022c30 <flatcc_emitter_clear@@Base>:
   22c30:	ldr	r3, [r0]
   22c34:	cmp	r3, #0
   22c38:	bxeq	lr
   22c3c:	ldr	r2, [r3, #2948]	; 0xb84
   22c40:	mov	r1, #0
   22c44:	push	{r4, r5, r6, lr}
   22c48:	mov	r5, r0
   22c4c:	str	r1, [r2, #2944]	; 0xb80
   22c50:	ldr	r4, [r3, #2944]	; 0xb80
   22c54:	cmp	r4, r1
   22c58:	bne	22c64 <flatcc_emitter_clear@@Base+0x34>
   22c5c:	b	22c94 <flatcc_emitter_clear@@Base+0x64>
   22c60:	mov	r4, r3
   22c64:	ldr	r0, [r4, #2948]	; 0xb84
   22c68:	bl	12924 <free@plt>
   22c6c:	ldr	r3, [r4, #2944]	; 0xb80
   22c70:	cmp	r3, #0
   22c74:	bne	22c60 <flatcc_emitter_clear@@Base+0x30>
   22c78:	mov	r0, r4
   22c7c:	bl	12924 <free@plt>
   22c80:	mov	r0, r5
   22c84:	mov	r2, #36	; 0x24
   22c88:	mov	r1, #0
   22c8c:	pop	{r4, r5, r6, lr}
   22c90:	b	129c0 <memset@plt>
   22c94:	mov	r4, r3
   22c98:	b	22c78 <flatcc_emitter_clear@@Base+0x48>

00022c9c <flatcc_emitter@@Base>:
   22c9c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   22ca0:	sub	sp, sp, #12
   22ca4:	mov	r4, r0
   22ca8:	ldr	ip, [sp, #48]	; 0x30
   22cac:	ldr	r0, [r0, #24]
   22cb0:	cmp	r3, #0
   22cb4:	add	r0, r0, ip
   22cb8:	str	r0, [r4, #24]
   22cbc:	blt	22e80 <flatcc_emitter@@Base+0x1e4>
   22cc0:	ldr	r0, [r4, #20]
   22cc4:	cmp	ip, r0
   22cc8:	bls	22d54 <flatcc_emitter@@Base+0xb8>
   22ccc:	cmp	r2, #0
   22cd0:	addne	r7, r1, #8
   22cd4:	movne	r8, r2
   22cd8:	movne	r9, #2944	; 0xb80
   22cdc:	beq	22d48 <flatcc_emitter@@Base+0xac>
   22ce0:	ldr	r6, [r7, #-4]
   22ce4:	ldr	sl, [r7, #-8]
   22ce8:	cmp	r6, #0
   22cec:	beq	22d3c <flatcc_emitter@@Base+0xa0>
   22cf0:	cmp	r0, r6
   22cf4:	mov	r5, r0
   22cf8:	bcs	22d9c <flatcc_emitter@@Base+0x100>
   22cfc:	cmp	r0, #0
   22d00:	beq	22da8 <flatcc_emitter@@Base+0x10c>
   22d04:	sub	r6, r6, r0
   22d08:	mov	r1, sl
   22d0c:	mov	r2, r5
   22d10:	ldr	r0, [r4, #16]
   22d14:	bl	12930 <memcpy@plt>
   22d18:	ldr	r3, [r4, #16]
   22d1c:	ldr	r0, [r4, #20]
   22d20:	add	r3, r3, r5
   22d24:	sub	r0, r0, r5
   22d28:	cmp	r6, #0
   22d2c:	add	sl, sl, r5
   22d30:	str	r3, [r4, #16]
   22d34:	str	r0, [r4, #20]
   22d38:	bne	22cf0 <flatcc_emitter@@Base+0x54>
   22d3c:	subs	r8, r8, #1
   22d40:	add	r7, r7, #8
   22d44:	bne	22ce0 <flatcc_emitter@@Base+0x44>
   22d48:	mov	r0, #0
   22d4c:	add	sp, sp, #12
   22d50:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   22d54:	ldr	r3, [r4, #16]
   22d58:	sub	r0, r0, ip
   22d5c:	add	ip, r3, ip
   22d60:	str	r0, [r4, #20]
   22d64:	str	ip, [r4, #16]
   22d68:	cmp	r2, #0
   22d6c:	addne	r4, r1, #8
   22d70:	movne	r7, r2
   22d74:	beq	22d48 <flatcc_emitter@@Base+0xac>
   22d78:	ldmdb	r4, {r1, r2}
   22d7c:	mov	r0, r3
   22d80:	bl	12930 <memcpy@plt>
   22d84:	ldr	r2, [r4, #-4]
   22d88:	subs	r7, r7, #1
   22d8c:	add	r4, r4, #8
   22d90:	add	r3, r0, r2
   22d94:	bne	22d78 <flatcc_emitter@@Base+0xdc>
   22d98:	b	22d48 <flatcc_emitter@@Base+0xac>
   22d9c:	mov	r5, r6
   22da0:	mov	r6, #0
   22da4:	b	22d08 <flatcc_emitter@@Base+0x6c>
   22da8:	ldr	fp, [r4, #4]
   22dac:	cmp	fp, #0
   22db0:	beq	22e20 <flatcc_emitter@@Base+0x184>
   22db4:	ldr	r5, [fp, #2944]	; 0xb80
   22db8:	ldr	r3, [r4]
   22dbc:	cmp	r5, r3
   22dc0:	beq	22de8 <flatcc_emitter@@Base+0x14c>
   22dc4:	str	r5, [r4, #4]
   22dc8:	ldr	r3, [r5, #2948]	; 0xb84
   22dcc:	mov	r0, r9
   22dd0:	str	r5, [r4, #16]
   22dd4:	ldr	r3, [r3, #2952]	; 0xb88
   22dd8:	str	r9, [r4, #20]
   22ddc:	add	r3, r3, #2944	; 0xb80
   22de0:	str	r3, [r5, #2952]	; 0xb88
   22de4:	b	22cf0 <flatcc_emitter@@Base+0x54>
   22de8:	ldr	r0, [pc, #540]	; 2300c <flatcc_emitter@@Base+0x370>
   22dec:	bl	12978 <malloc@plt>
   22df0:	cmp	r0, #0
   22df4:	beq	22e30 <flatcc_emitter@@Base+0x194>
   22df8:	ldr	r3, [r4, #28]
   22dfc:	str	r5, [r0, #2944]	; 0xb80
   22e00:	add	r3, r3, #2944	; 0xb80
   22e04:	str	fp, [r0, #2948]	; 0xb84
   22e08:	str	r3, [r4, #28]
   22e0c:	str	r0, [r5, #2948]	; 0xb84
   22e10:	str	r0, [fp, #2944]	; 0xb80
   22e14:	mov	r5, r0
   22e18:	str	r0, [r4, #4]
   22e1c:	b	22dc8 <flatcc_emitter@@Base+0x12c>
   22e20:	ldr	r0, [pc, #484]	; 2300c <flatcc_emitter@@Base+0x370>
   22e24:	bl	12978 <malloc@plt>
   22e28:	cmp	r0, #0
   22e2c:	bne	22e3c <flatcc_emitter@@Base+0x1a0>
   22e30:	mvn	r0, #0
   22e34:	add	sp, sp, #12
   22e38:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   22e3c:	mov	r2, #1472	; 0x5c0
   22e40:	ldr	r3, [r4, #28]
   22e44:	str	r2, [r4, #12]
   22e48:	str	r2, [r4, #20]
   22e4c:	sub	r2, r2, #2944	; 0xb80
   22e50:	str	r2, [r0, #2952]	; 0xb88
   22e54:	str	r0, [r4]
   22e58:	add	r3, r3, #2944	; 0xb80
   22e5c:	str	r0, [r4, #4]
   22e60:	str	r0, [r0, #2944]	; 0xb80
   22e64:	str	r0, [r0, #2948]	; 0xb84
   22e68:	add	r0, r0, #1472	; 0x5c0
   22e6c:	str	r0, [r4, #8]
   22e70:	str	r0, [r4, #16]
   22e74:	str	r3, [r4, #28]
   22e78:	mov	r0, #1472	; 0x5c0
   22e7c:	b	22cf0 <flatcc_emitter@@Base+0x54>
   22e80:	ldr	r0, [r4, #12]
   22e84:	cmp	ip, r0
   22e88:	bls	22f08 <flatcc_emitter@@Base+0x26c>
   22e8c:	add	r6, r1, r2, lsl #3
   22e90:	mov	r7, r2
   22e94:	mov	r9, #2944	; 0xb80
   22e98:	mov	r8, #0
   22e9c:	cmp	r7, #0
   22ea0:	beq	22d48 <flatcc_emitter@@Base+0xac>
   22ea4:	ldr	r5, [r6, #-4]
   22ea8:	ldr	sl, [r6, #-8]
   22eac:	cmp	r5, #0
   22eb0:	add	sl, sl, r5
   22eb4:	beq	22efc <flatcc_emitter@@Base+0x260>
   22eb8:	ldr	r2, [r4, #12]
   22ebc:	cmp	r2, r5
   22ec0:	bcs	22f20 <flatcc_emitter@@Base+0x284>
   22ec4:	cmp	r2, #0
   22ec8:	beq	22f30 <flatcc_emitter@@Base+0x294>
   22ecc:	sub	r5, r5, r2
   22ed0:	mov	r1, r8
   22ed4:	ldr	r0, [r4, #8]
   22ed8:	rsb	r3, r2, #0
   22edc:	add	r0, r0, r3
   22ee0:	add	sl, sl, r3
   22ee4:	str	r1, [r4, #12]
   22ee8:	str	r0, [r4, #8]
   22eec:	mov	r1, sl
   22ef0:	bl	12930 <memcpy@plt>
   22ef4:	cmp	r5, #0
   22ef8:	bne	22eb8 <flatcc_emitter@@Base+0x21c>
   22efc:	sub	r6, r6, #8
   22f00:	sub	r7, r7, #1
   22f04:	b	22e9c <flatcc_emitter@@Base+0x200>
   22f08:	ldr	r3, [r4, #8]
   22f0c:	sub	r0, r0, ip
   22f10:	sub	r3, r3, ip
   22f14:	str	r0, [r4, #12]
   22f18:	str	r3, [r4, #8]
   22f1c:	b	22d68 <flatcc_emitter@@Base+0xcc>
   22f20:	sub	r1, r2, r5
   22f24:	mov	r2, r5
   22f28:	mov	r5, #0
   22f2c:	b	22ed4 <flatcc_emitter@@Base+0x238>
   22f30:	ldr	r3, [r4]
   22f34:	cmp	r3, #0
   22f38:	beq	22fbc <flatcc_emitter@@Base+0x320>
   22f3c:	ldr	fp, [r3, #2948]	; 0xb84
   22f40:	ldr	r2, [r4, #4]
   22f44:	cmp	fp, r2
   22f48:	beq	22f7c <flatcc_emitter@@Base+0x2e0>
   22f4c:	ldr	r3, [r3, #2952]	; 0xb88
   22f50:	sub	r3, r3, #2944	; 0xb80
   22f54:	str	r3, [fp, #2952]	; 0xb88
   22f58:	str	fp, [r4]
   22f5c:	ldr	r3, [fp, #2944]	; 0xb80
   22f60:	add	r2, fp, #2944	; 0xb80
   22f64:	str	r9, [r4, #12]
   22f68:	ldr	r3, [r3, #2952]	; 0xb88
   22f6c:	str	r2, [r4, #8]
   22f70:	sub	r3, r3, #2944	; 0xb80
   22f74:	str	r3, [fp, #2952]	; 0xb88
   22f78:	b	22eb8 <flatcc_emitter@@Base+0x21c>
   22f7c:	ldr	r0, [pc, #136]	; 2300c <flatcc_emitter@@Base+0x370>
   22f80:	str	r3, [sp, #4]
   22f84:	bl	12978 <malloc@plt>
   22f88:	ldr	r3, [sp, #4]
   22f8c:	cmp	r0, #0
   22f90:	beq	22e30 <flatcc_emitter@@Base+0x194>
   22f94:	ldr	r2, [r4, #28]
   22f98:	str	fp, [r0, #2948]	; 0xb84
   22f9c:	add	r2, r2, #2944	; 0xb80
   22fa0:	str	r3, [r0, #2944]	; 0xb80
   22fa4:	str	r2, [r4, #28]
   22fa8:	str	r0, [r3, #2948]	; 0xb84
   22fac:	str	r0, [fp, #2944]	; 0xb80
   22fb0:	str	r0, [r4]
   22fb4:	mov	fp, r0
   22fb8:	b	22f5c <flatcc_emitter@@Base+0x2c0>
   22fbc:	ldr	r0, [pc, #72]	; 2300c <flatcc_emitter@@Base+0x370>
   22fc0:	bl	12978 <malloc@plt>
   22fc4:	cmp	r0, #0
   22fc8:	beq	22e30 <flatcc_emitter@@Base+0x194>
   22fcc:	mov	r2, #1472	; 0x5c0
   22fd0:	ldr	r3, [r4, #28]
   22fd4:	str	r2, [r4, #12]
   22fd8:	str	r2, [r4, #20]
   22fdc:	sub	r2, r2, #2944	; 0xb80
   22fe0:	str	r2, [r0, #2952]	; 0xb88
   22fe4:	str	r0, [r4]
   22fe8:	add	r3, r3, #2944	; 0xb80
   22fec:	str	r0, [r4, #4]
   22ff0:	str	r0, [r0, #2944]	; 0xb80
   22ff4:	str	r0, [r0, #2948]	; 0xb84
   22ff8:	add	r0, r0, #1472	; 0x5c0
   22ffc:	str	r0, [r4, #8]
   23000:	str	r0, [r4, #16]
   23004:	str	r3, [r4, #28]
   23008:	b	22eb8 <flatcc_emitter@@Base+0x21c>
   2300c:	andeq	r0, r0, ip, lsl #23

00023010 <flatcc_emitter_copy_buffer@@Base>:
   23010:	ldr	ip, [r0, #24]
   23014:	cmp	ip, r2
   23018:	bhi	230b4 <flatcc_emitter_copy_buffer@@Base+0xa4>
   2301c:	ldr	r2, [r0]
   23020:	cmp	r2, #0
   23024:	beq	230b4 <flatcc_emitter_copy_buffer@@Base+0xa4>
   23028:	mov	r3, r1
   2302c:	ldr	r1, [r0, #4]
   23030:	push	{r4, r5, r6, lr}
   23034:	cmp	r2, r1
   23038:	mov	r5, r0
   2303c:	beq	230c0 <flatcc_emitter_copy_buffer@@Base+0xb0>
   23040:	ldr	r4, [r0, #12]
   23044:	ldr	r1, [r5, #8]
   23048:	rsb	r4, r4, #2944	; 0xb80
   2304c:	mov	r2, r4
   23050:	mov	r0, r3
   23054:	bl	12930 <memcpy@plt>
   23058:	ldr	r2, [r5]
   2305c:	ldr	r1, [r5, #4]
   23060:	add	r3, r0, r4
   23064:	ldr	r4, [r2, #2944]	; 0xb80
   23068:	cmp	r4, r1
   2306c:	beq	23098 <flatcc_emitter_copy_buffer@@Base+0x88>
   23070:	mov	r6, #2944	; 0xb80
   23074:	mov	r1, r4
   23078:	mov	r0, r3
   2307c:	mov	r2, r6
   23080:	bl	12930 <memcpy@plt>
   23084:	ldr	r4, [r4, #2944]	; 0xb80
   23088:	ldr	r1, [r5, #4]
   2308c:	cmp	r1, r4
   23090:	add	r3, r0, #2944	; 0xb80
   23094:	bne	23074 <flatcc_emitter_copy_buffer@@Base+0x64>
   23098:	ldr	r2, [r5, #20]
   2309c:	mov	r0, r3
   230a0:	rsb	r2, r2, #2944	; 0xb80
   230a4:	bl	12930 <memcpy@plt>
   230a8:	mov	r3, r0
   230ac:	mov	r0, r3
   230b0:	pop	{r4, r5, r6, pc}
   230b4:	mov	r3, #0
   230b8:	mov	r0, r3
   230bc:	bx	lr
   230c0:	ldr	r1, [r0, #8]
   230c4:	mov	r2, ip
   230c8:	mov	r0, r3
   230cc:	bl	12930 <memcpy@plt>
   230d0:	mov	r3, r0
   230d4:	b	230ac <flatcc_emitter_copy_buffer@@Base+0x9c>
   230d8:	add	r1, r1, #2
   230dc:	ldrh	ip, [r0, #22]
   230e0:	lsl	r1, r1, #1
   230e4:	uxth	r1, r1
   230e8:	cmp	ip, r1
   230ec:	bls	23118 <flatcc_emitter_copy_buffer@@Base+0x108>
   230f0:	ldr	ip, [r0, #12]
   230f4:	ldrh	r1, [ip, r1]
   230f8:	cmp	r1, #0
   230fc:	beq	23118 <flatcc_emitter_copy_buffer@@Base+0x108>
   23100:	ldrh	r2, [r0, #20]
   23104:	add	ip, r1, #4
   23108:	cmp	ip, r2
   2310c:	bls	23130 <flatcc_emitter_copy_buffer@@Base+0x120>
   23110:	mov	r0, #13
   23114:	bx	lr
   23118:	mov	r1, #0
   2311c:	cmp	r2, r1
   23120:	movne	r0, #4
   23124:	moveq	r0, r1
   23128:	str	r1, [r3]
   2312c:	bx	lr
   23130:	ldr	r2, [r0, #16]
   23134:	add	r1, r1, r2
   23138:	ands	r0, r1, #3
   2313c:	beq	23148 <flatcc_emitter_copy_buffer@@Base+0x138>
   23140:	mov	r0, #12
   23144:	bx	lr
   23148:	str	r1, [r3]
   2314c:	bx	lr

00023150 <flatcc_verify_error_string@@Base>:
   23150:	cmp	r0, #36	; 0x24
   23154:	addls	pc, pc, r0, lsl #2
   23158:	b	233ac <flatcc_verify_error_string@@Base+0x25c>
   2315c:	b	231f0 <flatcc_verify_error_string@@Base+0xa0>
   23160:	b	233a0 <flatcc_verify_error_string@@Base+0x250>
   23164:	b	23394 <flatcc_verify_error_string@@Base+0x244>
   23168:	b	23388 <flatcc_verify_error_string@@Base+0x238>
   2316c:	b	2337c <flatcc_verify_error_string@@Base+0x22c>
   23170:	b	23370 <flatcc_verify_error_string@@Base+0x220>
   23174:	b	23364 <flatcc_verify_error_string@@Base+0x214>
   23178:	b	23358 <flatcc_verify_error_string@@Base+0x208>
   2317c:	b	2334c <flatcc_verify_error_string@@Base+0x1fc>
   23180:	b	23340 <flatcc_verify_error_string@@Base+0x1f0>
   23184:	b	23334 <flatcc_verify_error_string@@Base+0x1e4>
   23188:	b	23328 <flatcc_verify_error_string@@Base+0x1d8>
   2318c:	b	2331c <flatcc_verify_error_string@@Base+0x1cc>
   23190:	b	23310 <flatcc_verify_error_string@@Base+0x1c0>
   23194:	b	23304 <flatcc_verify_error_string@@Base+0x1b4>
   23198:	b	232f8 <flatcc_verify_error_string@@Base+0x1a8>
   2319c:	b	232ec <flatcc_verify_error_string@@Base+0x19c>
   231a0:	b	232e0 <flatcc_verify_error_string@@Base+0x190>
   231a4:	b	232d4 <flatcc_verify_error_string@@Base+0x184>
   231a8:	b	232c8 <flatcc_verify_error_string@@Base+0x178>
   231ac:	b	232bc <flatcc_verify_error_string@@Base+0x16c>
   231b0:	b	232b0 <flatcc_verify_error_string@@Base+0x160>
   231b4:	b	232a4 <flatcc_verify_error_string@@Base+0x154>
   231b8:	b	23298 <flatcc_verify_error_string@@Base+0x148>
   231bc:	b	2328c <flatcc_verify_error_string@@Base+0x13c>
   231c0:	b	23280 <flatcc_verify_error_string@@Base+0x130>
   231c4:	b	23274 <flatcc_verify_error_string@@Base+0x124>
   231c8:	b	23268 <flatcc_verify_error_string@@Base+0x118>
   231cc:	b	2325c <flatcc_verify_error_string@@Base+0x10c>
   231d0:	b	23250 <flatcc_verify_error_string@@Base+0x100>
   231d4:	b	23244 <flatcc_verify_error_string@@Base+0xf4>
   231d8:	b	23238 <flatcc_verify_error_string@@Base+0xe8>
   231dc:	b	2322c <flatcc_verify_error_string@@Base+0xdc>
   231e0:	b	23220 <flatcc_verify_error_string@@Base+0xd0>
   231e4:	b	23214 <flatcc_verify_error_string@@Base+0xc4>
   231e8:	b	23208 <flatcc_verify_error_string@@Base+0xb8>
   231ec:	b	231fc <flatcc_verify_error_string@@Base+0xac>
   231f0:	ldr	r0, [pc, #448]	; 233b8 <flatcc_verify_error_string@@Base+0x268>
   231f4:	add	r0, pc, r0
   231f8:	bx	lr
   231fc:	ldr	r0, [pc, #440]	; 233bc <flatcc_verify_error_string@@Base+0x26c>
   23200:	add	r0, pc, r0
   23204:	bx	lr
   23208:	ldr	r0, [pc, #432]	; 233c0 <flatcc_verify_error_string@@Base+0x270>
   2320c:	add	r0, pc, r0
   23210:	bx	lr
   23214:	ldr	r0, [pc, #424]	; 233c4 <flatcc_verify_error_string@@Base+0x274>
   23218:	add	r0, pc, r0
   2321c:	bx	lr
   23220:	ldr	r0, [pc, #416]	; 233c8 <flatcc_verify_error_string@@Base+0x278>
   23224:	add	r0, pc, r0
   23228:	bx	lr
   2322c:	ldr	r0, [pc, #408]	; 233cc <flatcc_verify_error_string@@Base+0x27c>
   23230:	add	r0, pc, r0
   23234:	bx	lr
   23238:	ldr	r0, [pc, #400]	; 233d0 <flatcc_verify_error_string@@Base+0x280>
   2323c:	add	r0, pc, r0
   23240:	bx	lr
   23244:	ldr	r0, [pc, #392]	; 233d4 <flatcc_verify_error_string@@Base+0x284>
   23248:	add	r0, pc, r0
   2324c:	bx	lr
   23250:	ldr	r0, [pc, #384]	; 233d8 <flatcc_verify_error_string@@Base+0x288>
   23254:	add	r0, pc, r0
   23258:	bx	lr
   2325c:	ldr	r0, [pc, #376]	; 233dc <flatcc_verify_error_string@@Base+0x28c>
   23260:	add	r0, pc, r0
   23264:	bx	lr
   23268:	ldr	r0, [pc, #368]	; 233e0 <flatcc_verify_error_string@@Base+0x290>
   2326c:	add	r0, pc, r0
   23270:	bx	lr
   23274:	ldr	r0, [pc, #360]	; 233e4 <flatcc_verify_error_string@@Base+0x294>
   23278:	add	r0, pc, r0
   2327c:	bx	lr
   23280:	ldr	r0, [pc, #352]	; 233e8 <flatcc_verify_error_string@@Base+0x298>
   23284:	add	r0, pc, r0
   23288:	bx	lr
   2328c:	ldr	r0, [pc, #344]	; 233ec <flatcc_verify_error_string@@Base+0x29c>
   23290:	add	r0, pc, r0
   23294:	bx	lr
   23298:	ldr	r0, [pc, #336]	; 233f0 <flatcc_verify_error_string@@Base+0x2a0>
   2329c:	add	r0, pc, r0
   232a0:	bx	lr
   232a4:	ldr	r0, [pc, #328]	; 233f4 <flatcc_verify_error_string@@Base+0x2a4>
   232a8:	add	r0, pc, r0
   232ac:	bx	lr
   232b0:	ldr	r0, [pc, #320]	; 233f8 <flatcc_verify_error_string@@Base+0x2a8>
   232b4:	add	r0, pc, r0
   232b8:	bx	lr
   232bc:	ldr	r0, [pc, #312]	; 233fc <flatcc_verify_error_string@@Base+0x2ac>
   232c0:	add	r0, pc, r0
   232c4:	bx	lr
   232c8:	ldr	r0, [pc, #304]	; 23400 <flatcc_verify_error_string@@Base+0x2b0>
   232cc:	add	r0, pc, r0
   232d0:	bx	lr
   232d4:	ldr	r0, [pc, #296]	; 23404 <flatcc_verify_error_string@@Base+0x2b4>
   232d8:	add	r0, pc, r0
   232dc:	bx	lr
   232e0:	ldr	r0, [pc, #288]	; 23408 <flatcc_verify_error_string@@Base+0x2b8>
   232e4:	add	r0, pc, r0
   232e8:	bx	lr
   232ec:	ldr	r0, [pc, #280]	; 2340c <flatcc_verify_error_string@@Base+0x2bc>
   232f0:	add	r0, pc, r0
   232f4:	bx	lr
   232f8:	ldr	r0, [pc, #272]	; 23410 <flatcc_verify_error_string@@Base+0x2c0>
   232fc:	add	r0, pc, r0
   23300:	bx	lr
   23304:	ldr	r0, [pc, #264]	; 23414 <flatcc_verify_error_string@@Base+0x2c4>
   23308:	add	r0, pc, r0
   2330c:	bx	lr
   23310:	ldr	r0, [pc, #256]	; 23418 <flatcc_verify_error_string@@Base+0x2c8>
   23314:	add	r0, pc, r0
   23318:	bx	lr
   2331c:	ldr	r0, [pc, #248]	; 2341c <flatcc_verify_error_string@@Base+0x2cc>
   23320:	add	r0, pc, r0
   23324:	bx	lr
   23328:	ldr	r0, [pc, #240]	; 23420 <flatcc_verify_error_string@@Base+0x2d0>
   2332c:	add	r0, pc, r0
   23330:	bx	lr
   23334:	ldr	r0, [pc, #232]	; 23424 <flatcc_verify_error_string@@Base+0x2d4>
   23338:	add	r0, pc, r0
   2333c:	bx	lr
   23340:	ldr	r0, [pc, #224]	; 23428 <flatcc_verify_error_string@@Base+0x2d8>
   23344:	add	r0, pc, r0
   23348:	bx	lr
   2334c:	ldr	r0, [pc, #216]	; 2342c <flatcc_verify_error_string@@Base+0x2dc>
   23350:	add	r0, pc, r0
   23354:	bx	lr
   23358:	ldr	r0, [pc, #208]	; 23430 <flatcc_verify_error_string@@Base+0x2e0>
   2335c:	add	r0, pc, r0
   23360:	bx	lr
   23364:	ldr	r0, [pc, #200]	; 23434 <flatcc_verify_error_string@@Base+0x2e4>
   23368:	add	r0, pc, r0
   2336c:	bx	lr
   23370:	ldr	r0, [pc, #192]	; 23438 <flatcc_verify_error_string@@Base+0x2e8>
   23374:	add	r0, pc, r0
   23378:	bx	lr
   2337c:	ldr	r0, [pc, #184]	; 2343c <flatcc_verify_error_string@@Base+0x2ec>
   23380:	add	r0, pc, r0
   23384:	bx	lr
   23388:	ldr	r0, [pc, #176]	; 23440 <flatcc_verify_error_string@@Base+0x2f0>
   2338c:	add	r0, pc, r0
   23390:	bx	lr
   23394:	ldr	r0, [pc, #168]	; 23444 <flatcc_verify_error_string@@Base+0x2f4>
   23398:	add	r0, pc, r0
   2339c:	bx	lr
   233a0:	ldr	r0, [pc, #160]	; 23448 <flatcc_verify_error_string@@Base+0x2f8>
   233a4:	add	r0, pc, r0
   233a8:	bx	lr
   233ac:	ldr	r0, [pc, #152]	; 2344c <flatcc_verify_error_string@@Base+0x2fc>
   233b0:	add	r0, pc, r0
   233b4:	bx	lr
   233b8:	andeq	r5, r0, r0, asr r4
   233bc:			; <UNDEFINED> instruction: 0x000058bc
   233c0:	andeq	r5, r0, r8, lsl #17
   233c4:	andeq	r5, r0, r8, asr #16
   233c8:	andeq	r5, r0, r4, lsl r8
   233cc:	andeq	r5, r0, r0, ror #15
   233d0:			; <UNDEFINED> instruction: 0x000057bc
   233d4:	andeq	r5, r0, r8, lsl #15
   233d8:	andeq	r5, r0, r4, asr r7
   233dc:	andeq	r5, r0, r0, lsr r7
   233e0:	andeq	r5, r0, r8, lsl #14
   233e4:	andeq	r5, r0, r8, ror #13
   233e8:	andeq	r5, r0, ip, lsr #13
   233ec:	andeq	r5, r0, r4, ror r6
   233f0:	andeq	r5, r0, ip, lsr r6
   233f4:	strdeq	r5, [r0], -ip
   233f8:	andeq	r5, r0, r4, asr #11
   233fc:	andeq	r5, r0, r0, lsr #11
   23400:	andeq	r5, r0, ip, ror #10
   23404:	andeq	r5, r0, ip, asr #10
   23408:	andeq	r5, r0, r8, lsl r5
   2340c:	andeq	r5, r0, r4, ror #9
   23410:			; <UNDEFINED> instruction: 0x000054b0
   23414:	andeq	r5, r0, r8, lsl #9
   23418:	andeq	r5, r0, r0, ror #8
   2341c:	andeq	r5, r0, ip, lsr r4
   23420:	andeq	r5, r0, ip, lsl r4
   23424:	strdeq	r5, [r0], -r8
   23428:	ldrdeq	r5, [r0], -r8
   2342c:			; <UNDEFINED> instruction: 0x000053b8
   23430:	muleq	r0, r0, r3
   23434:	andeq	r5, r0, r4, ror #6
   23438:	andeq	r5, r0, r4, lsr r3
   2343c:	andeq	r5, r0, r0, lsl r3
   23440:	andeq	r5, r0, r8, ror #5
   23444:	andeq	r5, r0, r8, asr #5
   23448:	andeq	r5, r0, r4, lsr #5
   2344c:	andeq	r5, r0, ip, lsl r7

00023450 <flatcc_verify_field@@Base>:
   23450:	add	r1, r1, #2
   23454:	ldrh	ip, [r0, #22]
   23458:	lsl	r1, r1, #1
   2345c:	uxth	r1, r1
   23460:	cmp	ip, r1
   23464:	bls	23498 <flatcc_verify_field@@Base+0x48>
   23468:	ldr	ip, [r0, #12]
   2346c:	ldrh	r1, [ip, r1]
   23470:	cmp	r1, #0
   23474:	beq	23498 <flatcc_verify_field@@Base+0x48>
   23478:	push	{lr}		; (str lr, [sp, #-4]!)
   2347c:	add	r2, r2, r1
   23480:	ldrh	lr, [r0, #20]
   23484:	ldr	ip, [r0]
   23488:	cmp	r2, lr
   2348c:	bls	234a0 <flatcc_verify_field@@Base+0x50>
   23490:	mov	r0, #13
   23494:	pop	{pc}		; (ldr pc, [sp], #4)
   23498:	mov	r0, #0
   2349c:	bx	lr
   234a0:	ldr	r0, [r0, #16]
   234a4:	sub	r3, r3, #1
   234a8:	add	r0, ip, r0
   234ac:	add	r0, r0, r1
   234b0:	tst	r0, r3
   234b4:	moveq	r0, #0
   234b8:	movne	r0, #12
   234bc:	pop	{pc}		; (ldr pc, [sp], #4)

000234c0 <flatcc_verify_string_field@@Base>:
   234c0:	push	{r4, lr}
   234c4:	sub	sp, sp, #8
   234c8:	add	r3, sp, #4
   234cc:	mov	r4, r0
   234d0:	bl	230d8 <flatcc_emitter_copy_buffer@@Base+0xc8>
   234d4:	cmp	r0, #0
   234d8:	bne	2352c <flatcc_verify_string_field@@Base+0x6c>
   234dc:	ldr	r3, [sp, #4]
   234e0:	cmp	r3, #0
   234e4:	beq	2352c <flatcc_verify_string_field@@Base+0x6c>
   234e8:	ldr	r1, [r4]
   234ec:	ldr	r2, [r1, r3]
   234f0:	add	r2, r3, r2
   234f4:	cmp	r3, r2
   234f8:	bcs	23534 <flatcc_verify_string_field@@Base+0x74>
   234fc:	ldr	r3, [r4, #4]
   23500:	add	ip, r2, #4
   23504:	cmp	r3, ip
   23508:	bcc	23534 <flatcc_verify_string_field@@Base+0x74>
   2350c:	tst	r2, #3
   23510:	bne	23534 <flatcc_verify_string_field@@Base+0x74>
   23514:	ldr	r2, [r1, r2]
   23518:	sub	r3, r3, ip
   2351c:	add	lr, r2, #1
   23520:	cmp	r3, lr
   23524:	movcc	r0, #8
   23528:	bcs	23540 <flatcc_verify_string_field@@Base+0x80>
   2352c:	add	sp, sp, #8
   23530:	pop	{r4, pc}
   23534:	mov	r0, #17
   23538:	add	sp, sp, #8
   2353c:	pop	{r4, pc}
   23540:	add	r1, r1, ip
   23544:	ldrb	r3, [r1, r2]
   23548:	cmp	r3, #0
   2354c:	movne	r0, #7
   23550:	b	2352c <flatcc_verify_string_field@@Base+0x6c>

00023554 <flatcc_verify_vector_field@@Base>:
   23554:	push	{r4, r5, r6, lr}
   23558:	sub	sp, sp, #8
   2355c:	mov	r5, r3
   23560:	add	r3, sp, #4
   23564:	mov	r6, r0
   23568:	ldrh	r4, [sp, #24]
   2356c:	bl	230d8 <flatcc_emitter_copy_buffer@@Base+0xc8>
   23570:	cmp	r0, #0
   23574:	bne	235d4 <flatcc_verify_vector_field@@Base+0x80>
   23578:	ldr	r3, [sp, #4]
   2357c:	cmp	r3, #0
   23580:	beq	235d4 <flatcc_verify_vector_field@@Base+0x80>
   23584:	ldr	r1, [r6]
   23588:	ldr	r2, [r1, r3]
   2358c:	add	r2, r3, r2
   23590:	cmp	r3, r2
   23594:	bcs	235dc <flatcc_verify_vector_field@@Base+0x88>
   23598:	ldr	ip, [r6, #4]
   2359c:	add	r3, r2, #4
   235a0:	cmp	ip, r3
   235a4:	bcc	235dc <flatcc_verify_vector_field@@Base+0x88>
   235a8:	cmp	r4, #4
   235ac:	movcc	r4, #4
   235b0:	sub	r4, r4, #1
   235b4:	orr	r4, r4, #3
   235b8:	tst	r4, r3
   235bc:	bne	235dc <flatcc_verify_vector_field@@Base+0x88>
   235c0:	ldr	r2, [r1, r2]
   235c4:	ldr	r1, [sp, #28]
   235c8:	cmp	r1, r2
   235cc:	movcc	r0, #25
   235d0:	bcs	235e8 <flatcc_verify_vector_field@@Base+0x94>
   235d4:	add	sp, sp, #8
   235d8:	pop	{r4, r5, r6, pc}
   235dc:	mov	r0, #16
   235e0:	add	sp, sp, #8
   235e4:	pop	{r4, r5, r6, pc}
   235e8:	mul	r5, r2, r5
   235ec:	sub	r3, ip, r3
   235f0:	cmp	r3, r5
   235f4:	movcc	r0, #26
   235f8:	b	235d4 <flatcc_verify_vector_field@@Base+0x80>

000235fc <flatcc_verify_string_vector_field@@Base>:
   235fc:	push	{r4, r5, r6, r7, lr}
   23600:	sub	sp, sp, #12
   23604:	add	r3, sp, #4
   23608:	mov	r4, r0
   2360c:	bl	230d8 <flatcc_emitter_copy_buffer@@Base+0xc8>
   23610:	cmp	r0, #0
   23614:	bne	2366c <flatcc_verify_string_vector_field@@Base+0x70>
   23618:	ldr	r3, [sp, #4]
   2361c:	cmp	r3, #0
   23620:	beq	2366c <flatcc_verify_string_vector_field@@Base+0x70>
   23624:	ldr	lr, [r4]
   23628:	ldr	r2, [lr, r3]
   2362c:	add	r2, r3, r2
   23630:	cmp	r3, r2
   23634:	bcs	23674 <flatcc_verify_string_vector_field@@Base+0x78>
   23638:	ldr	r5, [r4, #4]
   2363c:	add	r3, r2, #4
   23640:	cmp	r5, r3
   23644:	bcc	23674 <flatcc_verify_string_vector_field@@Base+0x78>
   23648:	tst	r3, #3
   2364c:	bne	23674 <flatcc_verify_string_vector_field@@Base+0x78>
   23650:	ldr	r1, [lr, r2]
   23654:	cmn	r1, #-1073741823	; 0xc0000001
   23658:	bls	23680 <flatcc_verify_string_vector_field@@Base+0x84>
   2365c:	ldr	r2, [lr, r2]
   23660:	cmn	r2, #-1073741823	; 0xc0000001
   23664:	movhi	r0, #25
   23668:	bls	236ec <flatcc_verify_string_vector_field@@Base+0xf0>
   2366c:	add	sp, sp, #12
   23670:	pop	{r4, r5, r6, r7, pc}
   23674:	mov	r0, #16
   23678:	add	sp, sp, #12
   2367c:	pop	{r4, r5, r6, r7, pc}
   23680:	lsl	r4, r1, #2
   23684:	sub	ip, r5, r3
   23688:	cmp	ip, r4
   2368c:	bcc	2365c <flatcc_verify_string_vector_field@@Base+0x60>
   23690:	cmp	r1, #0
   23694:	beq	2366c <flatcc_verify_string_vector_field@@Base+0x70>
   23698:	ldr	r2, [lr, r3]
   2369c:	add	r1, lr, r3
   236a0:	add	r2, r3, r2
   236a4:	cmp	r3, r2
   236a8:	bcs	236e0 <flatcc_verify_string_vector_field@@Base+0xe4>
   236ac:	add	ip, r2, #4
   236b0:	cmp	r5, ip
   236b4:	bcc	236e0 <flatcc_verify_string_vector_field@@Base+0xe4>
   236b8:	tst	r2, #3
   236bc:	bne	236e0 <flatcc_verify_string_vector_field@@Base+0xe4>
   236c0:	ldr	r2, [lr, r2]
   236c4:	sub	r6, r5, ip
   236c8:	add	r7, r2, #1
   236cc:	cmp	r7, r6
   236d0:	bls	236fc <flatcc_verify_string_vector_field@@Base+0x100>
   236d4:	mov	r0, #8
   236d8:	add	sp, sp, #12
   236dc:	pop	{r4, r5, r6, r7, pc}
   236e0:	mov	r0, #17
   236e4:	add	sp, sp, #12
   236e8:	pop	{r4, r5, r6, r7, pc}
   236ec:	sub	r3, r5, r3
   236f0:	cmp	r3, r2, lsl #2
   236f4:	movcc	r0, #26
   236f8:	b	2366c <flatcc_verify_string_vector_field@@Base+0x70>
   236fc:	add	r4, r3, r4
   23700:	add	r2, lr, r2
   23704:	ldrb	r2, [r2, ip]
   23708:	cmp	r2, #0
   2370c:	movne	r0, #7
   23710:	bne	2366c <flatcc_verify_string_vector_field@@Base+0x70>
   23714:	add	r3, r3, #4
   23718:	cmp	r3, r4
   2371c:	beq	2366c <flatcc_verify_string_vector_field@@Base+0x70>
   23720:	ldr	r2, [r1, #4]!
   23724:	add	r2, r3, r2
   23728:	cmp	r3, r2
   2372c:	add	ip, r2, #4
   23730:	bcs	236e0 <flatcc_verify_string_vector_field@@Base+0xe4>
   23734:	cmp	r5, ip
   23738:	bcc	236e0 <flatcc_verify_string_vector_field@@Base+0xe4>
   2373c:	tst	r2, #3
   23740:	sub	r7, r5, ip
   23744:	bne	236e0 <flatcc_verify_string_vector_field@@Base+0xe4>
   23748:	ldr	r2, [lr, r2]
   2374c:	add	r6, r2, #1
   23750:	cmp	r7, r6
   23754:	bcc	236d4 <flatcc_verify_string_vector_field@@Base+0xd8>
   23758:	b	23700 <flatcc_verify_string_vector_field@@Base+0x104>

0002375c <flatcc_verify_table_field@@Base>:
   2375c:	push	{r4, r5, lr}
   23760:	sub	sp, sp, #36	; 0x24
   23764:	mov	r5, r3
   23768:	add	r3, sp, #4
   2376c:	mov	r4, r0
   23770:	bl	230d8 <flatcc_emitter_copy_buffer@@Base+0xc8>
   23774:	cmp	r0, #0
   23778:	bne	23788 <flatcc_verify_table_field@@Base+0x2c>
   2377c:	ldr	r3, [sp, #4]
   23780:	cmp	r3, #0
   23784:	bne	23790 <flatcc_verify_table_field@@Base+0x34>
   23788:	add	sp, sp, #36	; 0x24
   2378c:	pop	{r4, r5, pc}
   23790:	ldr	r2, [r4, #8]
   23794:	ldr	ip, [r4]
   23798:	sub	r2, r2, #1
   2379c:	cmp	r2, #0
   237a0:	ldr	r1, [ip, r3]
   237a4:	ldr	lr, [r4, #4]
   237a8:	str	r2, [sp, #16]
   237ac:	moveq	r0, #3
   237b0:	beq	23788 <flatcc_verify_table_field@@Base+0x2c>
   237b4:	add	r2, r3, r1
   237b8:	cmp	r3, r2
   237bc:	bcs	23858 <flatcc_verify_table_field@@Base+0xfc>
   237c0:	add	r3, r2, #4
   237c4:	cmp	lr, r3
   237c8:	bcc	23858 <flatcc_verify_table_field@@Base+0xfc>
   237cc:	tst	r2, #3
   237d0:	bne	23858 <flatcc_verify_table_field@@Base+0xfc>
   237d4:	str	r2, [sp, #24]
   237d8:	ldr	r3, [ip, r2]
   237dc:	subs	r3, r2, r3
   237e0:	bmi	23860 <flatcc_verify_table_field@@Base+0x104>
   237e4:	tst	r3, #1
   237e8:	bne	23860 <flatcc_verify_table_field@@Base+0x104>
   237ec:	add	r1, r3, #2
   237f0:	cmp	lr, r1
   237f4:	movcc	r0, #27
   237f8:	bcc	23788 <flatcc_verify_table_field@@Base+0x2c>
   237fc:	ldrh	r0, [ip, r3]
   23800:	add	r4, ip, r3
   23804:	add	r3, r0, r3
   23808:	cmp	lr, r3
   2380c:	strh	r0, [sp, #30]
   23810:	bcc	23868 <flatcc_verify_table_field@@Base+0x10c>
   23814:	tst	r0, #1
   23818:	bne	23868 <flatcc_verify_table_field@@Base+0x10c>
   2381c:	cmp	r0, #3
   23820:	movls	r0, #28
   23824:	bls	23788 <flatcc_verify_table_field@@Base+0x2c>
   23828:	ldrh	r3, [ip, r1]
   2382c:	sub	r2, lr, r2
   23830:	cmp	r2, r3
   23834:	strh	r3, [sp, #28]
   23838:	movcc	r0, #20
   2383c:	bcc	23788 <flatcc_verify_table_field@@Base+0x2c>
   23840:	add	r0, sp, #8
   23844:	str	r4, [sp, #20]
   23848:	str	ip, [sp, #8]
   2384c:	str	lr, [sp, #12]
   23850:	blx	r5
   23854:	b	23788 <flatcc_verify_table_field@@Base+0x2c>
   23858:	mov	r0, #15
   2385c:	b	23788 <flatcc_verify_table_field@@Base+0x2c>
   23860:	mov	r0, #29
   23864:	b	23788 <flatcc_verify_table_field@@Base+0x2c>
   23868:	mov	r0, #30
   2386c:	b	23788 <flatcc_verify_table_field@@Base+0x2c>

00023870 <flatcc_verify_table_vector_field@@Base>:
   23870:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   23874:	sub	sp, sp, #44	; 0x2c
   23878:	mov	r8, r3
   2387c:	add	r3, sp, #12
   23880:	mov	r4, r0
   23884:	bl	230d8 <flatcc_emitter_copy_buffer@@Base+0xc8>
   23888:	subs	r5, r0, #0
   2388c:	bne	2389c <flatcc_verify_table_vector_field@@Base+0x2c>
   23890:	ldr	r3, [sp, #12]
   23894:	cmp	r3, #0
   23898:	bne	238a8 <flatcc_verify_table_vector_field@@Base+0x38>
   2389c:	mov	r0, r5
   238a0:	add	sp, sp, #44	; 0x2c
   238a4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   238a8:	ldr	r7, [r4, #8]
   238ac:	cmp	r7, #0
   238b0:	ble	2390c <flatcc_verify_table_vector_field@@Base+0x9c>
   238b4:	ldr	sl, [r4]
   238b8:	ldr	r1, [sl, r3]
   238bc:	add	r1, r3, r1
   238c0:	cmp	r3, r1
   238c4:	bcs	2391c <flatcc_verify_table_vector_field@@Base+0xac>
   238c8:	ldr	fp, [r4, #4]
   238cc:	add	r4, r1, #4
   238d0:	cmp	fp, r4
   238d4:	bcc	2391c <flatcc_verify_table_vector_field@@Base+0xac>
   238d8:	tst	r4, #3
   238dc:	bne	2391c <flatcc_verify_table_vector_field@@Base+0xac>
   238e0:	ldr	r3, [sl, r1]
   238e4:	cmn	r3, #-1073741823	; 0xc0000001
   238e8:	bls	2392c <flatcc_verify_table_vector_field@@Base+0xbc>
   238ec:	ldr	r3, [sl, r1]
   238f0:	cmn	r3, #-1073741823	; 0xc0000001
   238f4:	movhi	r5, #25
   238f8:	bhi	2389c <flatcc_verify_table_vector_field@@Base+0x2c>
   238fc:	sub	r4, fp, r4
   23900:	cmp	r4, r3, lsl #2
   23904:	movcc	r5, #26
   23908:	b	2389c <flatcc_verify_table_vector_field@@Base+0x2c>
   2390c:	mov	r5, #3
   23910:	mov	r0, r5
   23914:	add	sp, sp, #44	; 0x2c
   23918:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2391c:	mov	r5, #16
   23920:	mov	r0, r5
   23924:	add	sp, sp, #44	; 0x2c
   23928:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2392c:	lsl	r9, r3, #2
   23930:	sub	r2, fp, r4
   23934:	cmp	r2, r9
   23938:	bcc	238ec <flatcc_verify_table_vector_field@@Base+0x7c>
   2393c:	cmp	r3, #0
   23940:	beq	2389c <flatcc_verify_table_vector_field@@Base+0x2c>
   23944:	sub	r7, r7, #2
   23948:	cmp	r7, #0
   2394c:	ldr	r3, [sl, r4]
   23950:	add	r2, sl, r4
   23954:	str	r7, [sp, #24]
   23958:	beq	2390c <flatcc_verify_table_vector_field@@Base+0x9c>
   2395c:	add	r3, r4, r3
   23960:	cmp	r4, r3
   23964:	bcs	23b04 <flatcc_verify_table_vector_field@@Base+0x294>
   23968:	add	r0, r3, #4
   2396c:	cmp	fp, r0
   23970:	bcc	23b04 <flatcc_verify_table_vector_field@@Base+0x294>
   23974:	tst	r3, #3
   23978:	bne	23b04 <flatcc_verify_table_vector_field@@Base+0x294>
   2397c:	add	r1, r1, #8
   23980:	add	r9, r4, r9
   23984:	add	r6, sl, r1
   23988:	mov	r1, r2
   2398c:	add	r2, sp, #16
   23990:	str	r2, [sp]
   23994:	str	r3, [sp, #32]
   23998:	ldr	r2, [sl, r3]
   2399c:	subs	r2, r3, r2
   239a0:	bmi	239ac <flatcc_verify_table_vector_field@@Base+0x13c>
   239a4:	tst	r2, #1
   239a8:	beq	23a5c <flatcc_verify_table_vector_field@@Base+0x1ec>
   239ac:	ldr	r3, [r1]
   239b0:	str	r7, [sp, #24]
   239b4:	add	r3, r4, r3
   239b8:	cmp	r3, r4
   239bc:	bls	23b10 <flatcc_verify_table_vector_field@@Base+0x2a0>
   239c0:	add	r2, r3, #4
   239c4:	cmp	fp, r2
   239c8:	bcc	23b10 <flatcc_verify_table_vector_field@@Base+0x2a0>
   239cc:	tst	r3, #3
   239d0:	bne	23b10 <flatcc_verify_table_vector_field@@Base+0x2a0>
   239d4:	str	r3, [sp, #32]
   239d8:	ldr	r2, [sl, r3]
   239dc:	subs	r2, r3, r2
   239e0:	bmi	23b18 <flatcc_verify_table_vector_field@@Base+0x2a8>
   239e4:	tst	r2, #1
   239e8:	bne	23b18 <flatcc_verify_table_vector_field@@Base+0x2a8>
   239ec:	add	r0, r2, #2
   239f0:	cmp	fp, r0
   239f4:	movcc	r5, #27
   239f8:	bcc	2389c <flatcc_verify_table_vector_field@@Base+0x2c>
   239fc:	ldrh	r1, [sl, r2]
   23a00:	add	ip, sl, r2
   23a04:	add	r2, r1, r2
   23a08:	cmp	fp, r2
   23a0c:	strh	r1, [sp, #38]	; 0x26
   23a10:	bcc	23b20 <flatcc_verify_table_vector_field@@Base+0x2b0>
   23a14:	tst	r1, #1
   23a18:	bne	23b20 <flatcc_verify_table_vector_field@@Base+0x2b0>
   23a1c:	cmp	r1, #3
   23a20:	movls	r5, #28
   23a24:	bls	2389c <flatcc_verify_table_vector_field@@Base+0x2c>
   23a28:	ldrh	r2, [sl, r0]
   23a2c:	sub	r3, fp, r3
   23a30:	cmp	r3, r2
   23a34:	strh	r2, [sp, #36]	; 0x24
   23a38:	movcc	r5, #20
   23a3c:	bcc	2389c <flatcc_verify_table_vector_field@@Base+0x2c>
   23a40:	add	r0, sp, #16
   23a44:	str	ip, [sp, #28]
   23a48:	str	sl, [sp, #16]
   23a4c:	str	fp, [sp, #20]
   23a50:	blx	r8
   23a54:	mov	r5, r0
   23a58:	b	2389c <flatcc_verify_table_vector_field@@Base+0x2c>
   23a5c:	add	r0, r2, #2
   23a60:	cmp	fp, r0
   23a64:	bcc	239ac <flatcc_verify_table_vector_field@@Base+0x13c>
   23a68:	ldrh	lr, [sl, r2]
   23a6c:	add	ip, sl, r2
   23a70:	add	r2, lr, r2
   23a74:	cmp	fp, r2
   23a78:	strh	lr, [sp, #38]	; 0x26
   23a7c:	bcc	239ac <flatcc_verify_table_vector_field@@Base+0x13c>
   23a80:	tst	lr, #1
   23a84:	bne	239ac <flatcc_verify_table_vector_field@@Base+0x13c>
   23a88:	cmp	lr, #3
   23a8c:	bls	239ac <flatcc_verify_table_vector_field@@Base+0x13c>
   23a90:	ldrh	r2, [sl, r0]
   23a94:	sub	r3, fp, r3
   23a98:	cmp	r3, r2
   23a9c:	strh	r2, [sp, #36]	; 0x24
   23aa0:	bcc	239ac <flatcc_verify_table_vector_field@@Base+0x13c>
   23aa4:	ldr	r0, [sp]
   23aa8:	str	r1, [sp, #4]
   23aac:	str	ip, [sp, #28]
   23ab0:	str	sl, [sp, #16]
   23ab4:	str	fp, [sp, #20]
   23ab8:	blx	r8
   23abc:	ldr	r1, [sp, #4]
   23ac0:	cmp	r0, #0
   23ac4:	bne	239ac <flatcc_verify_table_vector_field@@Base+0x13c>
   23ac8:	add	r4, r4, #4
   23acc:	cmp	r4, r9
   23ad0:	beq	2389c <flatcc_verify_table_vector_field@@Base+0x2c>
   23ad4:	mov	r2, r6
   23ad8:	ldr	r3, [r6], #4
   23adc:	str	r7, [sp, #24]
   23ae0:	add	r3, r3, r4
   23ae4:	cmp	r4, r3
   23ae8:	bcs	23b04 <flatcc_verify_table_vector_field@@Base+0x294>
   23aec:	add	r0, r3, #4
   23af0:	cmp	fp, r0
   23af4:	bcc	23b04 <flatcc_verify_table_vector_field@@Base+0x294>
   23af8:	tst	r3, #3
   23afc:	add	r1, r1, #4
   23b00:	beq	23994 <flatcc_verify_table_vector_field@@Base+0x124>
   23b04:	ldr	r3, [r2]
   23b08:	str	r7, [sp, #24]
   23b0c:	b	239b4 <flatcc_verify_table_vector_field@@Base+0x144>
   23b10:	mov	r5, #15
   23b14:	b	2389c <flatcc_verify_table_vector_field@@Base+0x2c>
   23b18:	mov	r5, #29
   23b1c:	b	2389c <flatcc_verify_table_vector_field@@Base+0x2c>
   23b20:	mov	r5, #30
   23b24:	b	2389c <flatcc_verify_table_vector_field@@Base+0x2c>

00023b28 <flatcc_verify_union_table@@Base>:
   23b28:	ldr	r3, [r0, #8]
   23b2c:	push	{r4, r5, lr}
   23b30:	sub	r3, r3, #1
   23b34:	sub	sp, sp, #28
   23b38:	cmp	r3, #0
   23b3c:	ldr	lr, [r0]
   23b40:	str	r3, [sp, #8]
   23b44:	ldr	ip, [r0, #4]
   23b48:	ldr	r2, [r0, #16]
   23b4c:	ldr	r3, [r0, #20]
   23b50:	moveq	r0, #3
   23b54:	bne	23b60 <flatcc_verify_union_table@@Base+0x38>
   23b58:	add	sp, sp, #28
   23b5c:	pop	{r4, r5, pc}
   23b60:	add	r3, r2, r3
   23b64:	cmp	r2, r3
   23b68:	bcs	23c04 <flatcc_verify_union_table@@Base+0xdc>
   23b6c:	add	r2, r3, #4
   23b70:	cmp	ip, r2
   23b74:	bcc	23c04 <flatcc_verify_union_table@@Base+0xdc>
   23b78:	tst	r3, #3
   23b7c:	bne	23c04 <flatcc_verify_union_table@@Base+0xdc>
   23b80:	str	r3, [sp, #16]
   23b84:	ldr	r2, [lr, r3]
   23b88:	subs	r2, r3, r2
   23b8c:	bmi	23c10 <flatcc_verify_union_table@@Base+0xe8>
   23b90:	tst	r2, #1
   23b94:	bne	23c10 <flatcc_verify_union_table@@Base+0xe8>
   23b98:	add	r0, r2, #2
   23b9c:	cmp	ip, r0
   23ba0:	movcc	r0, #27
   23ba4:	bcc	23b58 <flatcc_verify_union_table@@Base+0x30>
   23ba8:	ldrh	r4, [lr, r2]
   23bac:	add	r5, lr, r2
   23bb0:	add	r2, r4, r2
   23bb4:	cmp	ip, r2
   23bb8:	strh	r4, [sp, #22]
   23bbc:	bcc	23c18 <flatcc_verify_union_table@@Base+0xf0>
   23bc0:	tst	r4, #1
   23bc4:	bne	23c18 <flatcc_verify_union_table@@Base+0xf0>
   23bc8:	cmp	r4, #3
   23bcc:	movls	r0, #28
   23bd0:	bls	23b58 <flatcc_verify_union_table@@Base+0x30>
   23bd4:	ldrh	r2, [lr, r0]
   23bd8:	sub	r3, ip, r3
   23bdc:	cmp	r3, r2
   23be0:	strh	r2, [sp, #20]
   23be4:	movcc	r0, #20
   23be8:	bcc	23b58 <flatcc_verify_union_table@@Base+0x30>
   23bec:	mov	r0, sp
   23bf0:	str	r5, [sp, #12]
   23bf4:	str	lr, [sp]
   23bf8:	str	ip, [sp, #4]
   23bfc:	blx	r1
   23c00:	b	23b58 <flatcc_verify_union_table@@Base+0x30>
   23c04:	mov	r0, #15
   23c08:	add	sp, sp, #28
   23c0c:	pop	{r4, r5, pc}
   23c10:	mov	r0, #29
   23c14:	b	23b58 <flatcc_verify_union_table@@Base+0x30>
   23c18:	mov	r0, #30
   23c1c:	b	23b58 <flatcc_verify_union_table@@Base+0x30>

00023c20 <flatcc_verify_union_struct@@Base>:
   23c20:	ldr	r3, [r0, #20]
   23c24:	ldr	ip, [r0, #4]
   23c28:	cmp	r3, #0
   23c2c:	ldr	r0, [r0, #16]
   23c30:	bne	23c3c <flatcc_verify_union_struct@@Base+0x1c>
   23c34:	mov	r0, #18
   23c38:	bx	lr
   23c3c:	add	r3, r0, r3
   23c40:	cmp	ip, r3
   23c44:	bcc	23c34 <flatcc_verify_union_struct@@Base+0x14>
   23c48:	adds	r1, r1, r3
   23c4c:	bcc	23c58 <flatcc_verify_union_struct@@Base+0x38>
   23c50:	mov	r0, #10
   23c54:	bx	lr
   23c58:	cmp	ip, r1
   23c5c:	bcs	23c68 <flatcc_verify_union_struct@@Base+0x48>
   23c60:	mov	r0, #9
   23c64:	bx	lr
   23c68:	sub	r2, r2, #1
   23c6c:	tst	r2, r3
   23c70:	movne	r0, #11
   23c74:	moveq	r0, #0
   23c78:	bx	lr

00023c7c <flatcc_verify_union_string@@Base>:
   23c7c:	ldr	r2, [r0, #16]
   23c80:	ldr	r3, [r0, #20]
   23c84:	add	r3, r2, r3
   23c88:	cmp	r2, r3
   23c8c:	bcs	23cc8 <flatcc_verify_union_string@@Base+0x4c>
   23c90:	ldr	r2, [r0, #4]
   23c94:	add	r1, r3, #4
   23c98:	cmp	r2, r1
   23c9c:	bcc	23cc8 <flatcc_verify_union_string@@Base+0x4c>
   23ca0:	tst	r3, #3
   23ca4:	bne	23cc8 <flatcc_verify_union_string@@Base+0x4c>
   23ca8:	ldr	r0, [r0]
   23cac:	sub	r2, r2, r1
   23cb0:	ldr	r3, [r0, r3]
   23cb4:	add	ip, r3, #1
   23cb8:	cmp	r2, ip
   23cbc:	bcs	23cd0 <flatcc_verify_union_string@@Base+0x54>
   23cc0:	mov	r0, #8
   23cc4:	bx	lr
   23cc8:	mov	r0, #17
   23ccc:	bx	lr
   23cd0:	add	r1, r0, r1
   23cd4:	ldrb	r0, [r1, r3]
   23cd8:	cmp	r0, #0
   23cdc:	movne	r0, #7
   23ce0:	moveq	r0, #0
   23ce4:	bx	lr

00023ce8 <flatcc_verify_buffer_header@@Base>:
   23ce8:	ands	r3, r0, #3
   23cec:	beq	23cf8 <flatcc_verify_buffer_header@@Base+0x10>
   23cf0:	mov	r0, #5
   23cf4:	bx	lr
   23cf8:	cmn	r1, #9
   23cfc:	bls	23d08 <flatcc_verify_buffer_header@@Base+0x20>
   23d00:	mov	r0, #6
   23d04:	bx	lr
   23d08:	cmp	r1, #7
   23d0c:	bls	23d58 <flatcc_verify_buffer_header@@Base+0x70>
   23d10:	cmp	r2, #0
   23d14:	beq	23d60 <flatcc_verify_buffer_header@@Base+0x78>
   23d18:	push	{r4, lr}
   23d1c:	sub	sp, sp, #8
   23d20:	mov	r4, r0
   23d24:	add	r0, sp, #8
   23d28:	mov	r1, r2
   23d2c:	str	r3, [r0, #-4]!
   23d30:	mov	r2, #4
   23d34:	bl	129cc <strncpy@plt>
   23d38:	ldr	r2, [r4, #4]
   23d3c:	ldr	r3, [sp, #4]
   23d40:	cmp	r3, #0
   23d44:	cmpne	r2, r3
   23d48:	moveq	r0, #0
   23d4c:	movne	r0, #2
   23d50:	add	sp, sp, #8
   23d54:	pop	{r4, pc}
   23d58:	mov	r0, #1
   23d5c:	bx	lr
   23d60:	mov	r0, #0
   23d64:	bx	lr

00023d68 <flatcc_verify_typed_buffer_header@@Base>:
   23d68:	tst	r0, #3
   23d6c:	beq	23d78 <flatcc_verify_typed_buffer_header@@Base+0x10>
   23d70:	mov	r0, #5
   23d74:	bx	lr
   23d78:	cmn	r1, #9
   23d7c:	bls	23d88 <flatcc_verify_typed_buffer_header@@Base+0x20>
   23d80:	mov	r0, #6
   23d84:	bx	lr
   23d88:	cmp	r1, #7
   23d8c:	bls	23db4 <flatcc_verify_typed_buffer_header@@Base+0x4c>
   23d90:	cmp	r2, #0
   23d94:	beq	23dac <flatcc_verify_typed_buffer_header@@Base+0x44>
   23d98:	ldr	r0, [r0, #4]
   23d9c:	cmp	r2, r0
   23da0:	movne	r0, #2
   23da4:	moveq	r0, #0
   23da8:	bx	lr
   23dac:	mov	r0, r2
   23db0:	bx	lr
   23db4:	mov	r0, #1
   23db8:	bx	lr

00023dbc <flatcc_verify_struct_as_root@@Base>:
   23dbc:	push	{r4, r5, r6, r7, r8, lr}
   23dc0:	mov	r6, r3
   23dc4:	mov	r5, r0
   23dc8:	mov	r4, r1
   23dcc:	mov	r8, r2
   23dd0:	ldrh	r7, [sp, #24]
   23dd4:	bl	23ce8 <flatcc_verify_buffer_header@@Base>
   23dd8:	cmp	r0, #0
   23ddc:	bne	23e08 <flatcc_verify_struct_as_root@@Base+0x4c>
   23de0:	ldr	r2, [r5]
   23de4:	cmp	r4, r2
   23de8:	movcs	r3, #0
   23dec:	movcc	r3, #1
   23df0:	cmp	r2, #0
   23df4:	orreq	r3, r3, #1
   23df8:	cmp	r3, #0
   23dfc:	beq	23e1c <flatcc_verify_struct_as_root@@Base+0x60>
   23e00:	mov	r0, #18
   23e04:	pop	{r4, r5, r6, r7, r8, pc}
   23e08:	mov	r2, r8
   23e0c:	mov	r1, r4
   23e10:	mov	r0, r5
   23e14:	pop	{r4, r5, r6, r7, r8, lr}
   23e18:	b	23ce8 <flatcc_verify_buffer_header@@Base>
   23e1c:	adds	r6, r6, r2
   23e20:	bcc	23e2c <flatcc_verify_struct_as_root@@Base+0x70>
   23e24:	mov	r0, #10
   23e28:	pop	{r4, r5, r6, r7, r8, pc}
   23e2c:	cmp	r4, r6
   23e30:	bcs	23e3c <flatcc_verify_struct_as_root@@Base+0x80>
   23e34:	mov	r0, #9
   23e38:	pop	{r4, r5, r6, r7, r8, pc}
   23e3c:	sub	r7, r7, #1
   23e40:	tst	r7, r2
   23e44:	movne	r0, #11
   23e48:	pop	{r4, r5, r6, r7, r8, pc}

00023e4c <flatcc_verify_struct_as_typed_root@@Base>:
   23e4c:	push	{r4, r5, r6, r7, r8, lr}
   23e50:	mov	r6, r3
   23e54:	mov	r5, r0
   23e58:	mov	r4, r1
   23e5c:	mov	r8, r2
   23e60:	ldrh	r7, [sp, #24]
   23e64:	bl	23d68 <flatcc_verify_typed_buffer_header@@Base>
   23e68:	cmp	r0, #0
   23e6c:	bne	23e98 <flatcc_verify_struct_as_typed_root@@Base+0x4c>
   23e70:	ldr	r2, [r5]
   23e74:	cmp	r4, r2
   23e78:	movcs	r3, #0
   23e7c:	movcc	r3, #1
   23e80:	cmp	r2, #0
   23e84:	orreq	r3, r3, #1
   23e88:	cmp	r3, #0
   23e8c:	beq	23eac <flatcc_verify_struct_as_typed_root@@Base+0x60>
   23e90:	mov	r0, #18
   23e94:	pop	{r4, r5, r6, r7, r8, pc}
   23e98:	mov	r2, r8
   23e9c:	mov	r1, r4
   23ea0:	mov	r0, r5
   23ea4:	pop	{r4, r5, r6, r7, r8, lr}
   23ea8:	b	23d68 <flatcc_verify_typed_buffer_header@@Base>
   23eac:	adds	r6, r6, r2
   23eb0:	bcc	23ebc <flatcc_verify_struct_as_typed_root@@Base+0x70>
   23eb4:	mov	r0, #10
   23eb8:	pop	{r4, r5, r6, r7, r8, pc}
   23ebc:	cmp	r4, r6
   23ec0:	bcs	23ecc <flatcc_verify_struct_as_typed_root@@Base+0x80>
   23ec4:	mov	r0, #9
   23ec8:	pop	{r4, r5, r6, r7, r8, pc}
   23ecc:	sub	r7, r7, #1
   23ed0:	tst	r7, r2
   23ed4:	movne	r0, #11
   23ed8:	pop	{r4, r5, r6, r7, r8, pc}

00023edc <flatcc_verify_table_as_root@@Base>:
   23edc:	push	{r4, r5, r6, r7, lr}
   23ee0:	sub	sp, sp, #28
   23ee4:	mov	r7, r3
   23ee8:	mov	r4, r0
   23eec:	mov	r5, r1
   23ef0:	mov	r6, r2
   23ef4:	bl	23ce8 <flatcc_verify_buffer_header@@Base>
   23ef8:	cmp	r0, #0
   23efc:	bne	23f34 <flatcc_verify_table_as_root@@Base+0x58>
   23f00:	ldr	r3, [r4]
   23f04:	mov	r2, #99	; 0x63
   23f08:	cmp	r3, #0
   23f0c:	str	r2, [sp, #8]
   23f10:	beq	23f28 <flatcc_verify_table_as_root@@Base+0x4c>
   23f14:	add	r2, r3, #4
   23f18:	cmp	r5, r2
   23f1c:	bcc	23f28 <flatcc_verify_table_as_root@@Base+0x4c>
   23f20:	tst	r3, #3
   23f24:	beq	23f4c <flatcc_verify_table_as_root@@Base+0x70>
   23f28:	mov	r0, #15
   23f2c:	add	sp, sp, #28
   23f30:	pop	{r4, r5, r6, r7, pc}
   23f34:	mov	r2, r6
   23f38:	mov	r1, r5
   23f3c:	mov	r0, r4
   23f40:	bl	23ce8 <flatcc_verify_buffer_header@@Base>
   23f44:	add	sp, sp, #28
   23f48:	pop	{r4, r5, r6, r7, pc}
   23f4c:	ldr	r2, [r4, r3]
   23f50:	str	r3, [sp, #16]
   23f54:	subs	r2, r3, r2
   23f58:	bmi	23fcc <flatcc_verify_table_as_root@@Base+0xf0>
   23f5c:	tst	r2, #1
   23f60:	bne	23fcc <flatcc_verify_table_as_root@@Base+0xf0>
   23f64:	add	r1, r2, #2
   23f68:	cmp	r5, r1
   23f6c:	movcc	r0, #27
   23f70:	bcc	23f2c <flatcc_verify_table_as_root@@Base+0x50>
   23f74:	ldrh	r0, [r4, r2]
   23f78:	add	ip, r4, r2
   23f7c:	add	r2, r0, r2
   23f80:	cmp	r5, r2
   23f84:	strh	r0, [sp, #22]
   23f88:	bcc	23fd4 <flatcc_verify_table_as_root@@Base+0xf8>
   23f8c:	tst	r0, #1
   23f90:	bne	23fd4 <flatcc_verify_table_as_root@@Base+0xf8>
   23f94:	cmp	r0, #3
   23f98:	movls	r0, #28
   23f9c:	bls	23f2c <flatcc_verify_table_as_root@@Base+0x50>
   23fa0:	ldrh	r2, [r4, r1]
   23fa4:	sub	r3, r5, r3
   23fa8:	cmp	r3, r2
   23fac:	strh	r2, [sp, #20]
   23fb0:	movcc	r0, #20
   23fb4:	bcc	23f2c <flatcc_verify_table_as_root@@Base+0x50>
   23fb8:	mov	r0, sp
   23fbc:	str	ip, [sp, #12]
   23fc0:	stm	sp, {r4, r5}
   23fc4:	blx	r7
   23fc8:	b	23f2c <flatcc_verify_table_as_root@@Base+0x50>
   23fcc:	mov	r0, #29
   23fd0:	b	23f2c <flatcc_verify_table_as_root@@Base+0x50>
   23fd4:	mov	r0, #30
   23fd8:	b	23f2c <flatcc_verify_table_as_root@@Base+0x50>

00023fdc <flatcc_verify_table_as_typed_root@@Base>:
   23fdc:	push	{r4, r5, r6, r7, lr}
   23fe0:	sub	sp, sp, #28
   23fe4:	mov	r7, r3
   23fe8:	mov	r4, r0
   23fec:	mov	r5, r1
   23ff0:	mov	r6, r2
   23ff4:	bl	23d68 <flatcc_verify_typed_buffer_header@@Base>
   23ff8:	cmp	r0, #0
   23ffc:	bne	24034 <flatcc_verify_table_as_typed_root@@Base+0x58>
   24000:	ldr	r3, [r4]
   24004:	mov	r2, #99	; 0x63
   24008:	cmp	r3, #0
   2400c:	str	r2, [sp, #8]
   24010:	beq	24028 <flatcc_verify_table_as_typed_root@@Base+0x4c>
   24014:	add	r2, r3, #4
   24018:	cmp	r5, r2
   2401c:	bcc	24028 <flatcc_verify_table_as_typed_root@@Base+0x4c>
   24020:	tst	r3, #3
   24024:	beq	2404c <flatcc_verify_table_as_typed_root@@Base+0x70>
   24028:	mov	r0, #15
   2402c:	add	sp, sp, #28
   24030:	pop	{r4, r5, r6, r7, pc}
   24034:	mov	r2, r6
   24038:	mov	r1, r5
   2403c:	mov	r0, r4
   24040:	bl	23d68 <flatcc_verify_typed_buffer_header@@Base>
   24044:	add	sp, sp, #28
   24048:	pop	{r4, r5, r6, r7, pc}
   2404c:	ldr	r2, [r4, r3]
   24050:	str	r3, [sp, #16]
   24054:	subs	r2, r3, r2
   24058:	bmi	240cc <flatcc_verify_table_as_typed_root@@Base+0xf0>
   2405c:	tst	r2, #1
   24060:	bne	240cc <flatcc_verify_table_as_typed_root@@Base+0xf0>
   24064:	add	r1, r2, #2
   24068:	cmp	r5, r1
   2406c:	movcc	r0, #27
   24070:	bcc	2402c <flatcc_verify_table_as_typed_root@@Base+0x50>
   24074:	ldrh	r0, [r4, r2]
   24078:	add	ip, r4, r2
   2407c:	add	r2, r0, r2
   24080:	cmp	r5, r2
   24084:	strh	r0, [sp, #22]
   24088:	bcc	240d4 <flatcc_verify_table_as_typed_root@@Base+0xf8>
   2408c:	tst	r0, #1
   24090:	bne	240d4 <flatcc_verify_table_as_typed_root@@Base+0xf8>
   24094:	cmp	r0, #3
   24098:	movls	r0, #28
   2409c:	bls	2402c <flatcc_verify_table_as_typed_root@@Base+0x50>
   240a0:	ldrh	r2, [r4, r1]
   240a4:	sub	r3, r5, r3
   240a8:	cmp	r3, r2
   240ac:	strh	r2, [sp, #20]
   240b0:	movcc	r0, #20
   240b4:	bcc	2402c <flatcc_verify_table_as_typed_root@@Base+0x50>
   240b8:	mov	r0, sp
   240bc:	str	ip, [sp, #12]
   240c0:	stm	sp, {r4, r5}
   240c4:	blx	r7
   240c8:	b	2402c <flatcc_verify_table_as_typed_root@@Base+0x50>
   240cc:	mov	r0, #29
   240d0:	b	2402c <flatcc_verify_table_as_typed_root@@Base+0x50>
   240d4:	mov	r0, #30
   240d8:	b	2402c <flatcc_verify_table_as_typed_root@@Base+0x50>

000240dc <flatcc_verify_struct_as_nested_root@@Base>:
   240dc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   240e0:	sub	sp, sp, #12
   240e4:	mvn	sl, #0
   240e8:	ldrh	r6, [sp, #52]	; 0x34
   240ec:	mov	r9, #1
   240f0:	mov	r7, r3
   240f4:	str	sl, [sp, #4]
   240f8:	mov	r3, r6
   240fc:	str	r9, [sp]
   24100:	mov	r5, r0
   24104:	mov	r4, r1
   24108:	mov	fp, r2
   2410c:	ldr	r8, [sp, #48]	; 0x30
   24110:	bl	23554 <flatcc_verify_vector_field@@Base>
   24114:	cmp	r0, #0
   24118:	bne	24180 <flatcc_verify_struct_as_nested_root@@Base+0xa4>
   2411c:	add	r4, r4, #2
   24120:	ldrh	r3, [r5, #22]
   24124:	lsl	r4, r4, #1
   24128:	uxth	r4, r4
   2412c:	cmp	r3, r4
   24130:	bls	241a4 <flatcc_verify_struct_as_nested_root@@Base+0xc8>
   24134:	ldr	r3, [r5, #12]
   24138:	ldrh	r3, [r3, r4]
   2413c:	cmp	r3, #0
   24140:	beq	241a4 <flatcc_verify_struct_as_nested_root@@Base+0xc8>
   24144:	ldr	r1, [r5, #16]
   24148:	ldr	r2, [r5]
   2414c:	add	r3, r3, r1
   24150:	adds	r1, r2, r3
   24154:	beq	241a4 <flatcc_verify_struct_as_nested_root@@Base+0xc8>
   24158:	ldr	r2, [r2, r3]
   2415c:	mov	r3, r8
   24160:	add	r0, r1, r2
   24164:	add	r0, r0, #4
   24168:	ldr	r1, [r1, r2]
   2416c:	mov	r2, r7
   24170:	str	r6, [sp, #48]	; 0x30
   24174:	add	sp, sp, #12
   24178:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2417c:	b	23dbc <flatcc_verify_struct_as_root@@Base>
   24180:	str	sl, [sp, #52]	; 0x34
   24184:	str	r9, [sp, #48]	; 0x30
   24188:	mov	r3, r6
   2418c:	mov	r2, fp
   24190:	mov	r1, r4
   24194:	mov	r0, r5
   24198:	add	sp, sp, #12
   2419c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   241a0:	b	23554 <flatcc_verify_vector_field@@Base>
   241a4:	add	sp, sp, #12
   241a8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

000241ac <flatcc_verify_table_as_nested_root@@Base>:
   241ac:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   241b0:	sub	sp, sp, #32
   241b4:	mvn	r9, #0
   241b8:	ldrh	r7, [sp, #64]	; 0x40
   241bc:	mov	r8, #1
   241c0:	mov	r6, r3
   241c4:	str	r9, [sp, #4]
   241c8:	mov	r3, r7
   241cc:	str	r8, [sp]
   241d0:	mov	r5, r0
   241d4:	mov	r4, r1
   241d8:	mov	sl, r2
   241dc:	bl	23554 <flatcc_verify_vector_field@@Base>
   241e0:	cmp	r0, #0
   241e4:	bne	24288 <flatcc_verify_table_as_nested_root@@Base+0xdc>
   241e8:	add	r4, r4, #2
   241ec:	ldrh	r3, [r5, #22]
   241f0:	lsl	r4, r4, #1
   241f4:	uxth	r4, r4
   241f8:	cmp	r3, r4
   241fc:	bls	24268 <flatcc_verify_table_as_nested_root@@Base+0xbc>
   24200:	ldr	r3, [r5, #12]
   24204:	ldrh	r3, [r3, r4]
   24208:	cmp	r3, #0
   2420c:	beq	24268 <flatcc_verify_table_as_nested_root@@Base+0xbc>
   24210:	ldr	r1, [r5, #16]
   24214:	ldr	r2, [r5]
   24218:	add	r3, r3, r1
   2421c:	adds	r1, r2, r3
   24220:	beq	24268 <flatcc_verify_table_as_nested_root@@Base+0xbc>
   24224:	ldr	r3, [r2, r3]
   24228:	mov	r2, r6
   2422c:	add	r4, r1, r3
   24230:	ldr	r7, [r1, r3]
   24234:	add	r8, r4, #4
   24238:	mov	r0, r8
   2423c:	mov	r1, r7
   24240:	bl	23ce8 <flatcc_verify_buffer_header@@Base>
   24244:	cmp	r0, #0
   24248:	bne	24270 <flatcc_verify_table_as_nested_root@@Base+0xc4>
   2424c:	ldr	r3, [r5, #8]
   24250:	ldr	r2, [r4, #4]
   24254:	sub	r3, r3, #1
   24258:	cmp	r3, #0
   2425c:	str	r3, [sp, #16]
   24260:	moveq	r0, #3
   24264:	bne	242a8 <flatcc_verify_table_as_nested_root@@Base+0xfc>
   24268:	add	sp, sp, #32
   2426c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   24270:	mov	r2, r6
   24274:	mov	r1, r7
   24278:	mov	r0, r8
   2427c:	bl	23ce8 <flatcc_verify_buffer_header@@Base>
   24280:	add	sp, sp, #32
   24284:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   24288:	stm	sp, {r8, r9}
   2428c:	mov	r3, r7
   24290:	mov	r2, sl
   24294:	mov	r1, r4
   24298:	mov	r0, r5
   2429c:	bl	23554 <flatcc_verify_vector_field@@Base>
   242a0:	add	sp, sp, #32
   242a4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   242a8:	cmp	r2, #0
   242ac:	beq	2434c <flatcc_verify_table_as_nested_root@@Base+0x1a0>
   242b0:	add	r3, r2, #4
   242b4:	cmp	r7, r3
   242b8:	bcc	2434c <flatcc_verify_table_as_nested_root@@Base+0x1a0>
   242bc:	tst	r2, #3
   242c0:	bne	2434c <flatcc_verify_table_as_nested_root@@Base+0x1a0>
   242c4:	str	r2, [sp, #24]
   242c8:	ldr	r3, [r8, r2]
   242cc:	subs	r3, r2, r3
   242d0:	bmi	24358 <flatcc_verify_table_as_nested_root@@Base+0x1ac>
   242d4:	tst	r3, #1
   242d8:	bne	24358 <flatcc_verify_table_as_nested_root@@Base+0x1ac>
   242dc:	add	r1, r3, #2
   242e0:	cmp	r7, r1
   242e4:	movcc	r0, #27
   242e8:	bcc	24268 <flatcc_verify_table_as_nested_root@@Base+0xbc>
   242ec:	ldrh	r0, [r8, r3]
   242f0:	add	ip, r8, r3
   242f4:	add	r3, r0, r3
   242f8:	cmp	r7, r3
   242fc:	strh	r0, [sp, #30]
   24300:	bcc	24360 <flatcc_verify_table_as_nested_root@@Base+0x1b4>
   24304:	tst	r0, #1
   24308:	bne	24360 <flatcc_verify_table_as_nested_root@@Base+0x1b4>
   2430c:	cmp	r0, #3
   24310:	movls	r0, #28
   24314:	bls	24268 <flatcc_verify_table_as_nested_root@@Base+0xbc>
   24318:	ldrh	r3, [r8, r1]
   2431c:	sub	r2, r7, r2
   24320:	cmp	r2, r3
   24324:	strh	r3, [sp, #28]
   24328:	movcc	r0, #20
   2432c:	bcc	24268 <flatcc_verify_table_as_nested_root@@Base+0xbc>
   24330:	add	r0, sp, #8
   24334:	ldr	r3, [sp, #68]	; 0x44
   24338:	str	ip, [sp, #20]
   2433c:	str	r8, [sp, #8]
   24340:	str	r7, [sp, #12]
   24344:	blx	r3
   24348:	b	24268 <flatcc_verify_table_as_nested_root@@Base+0xbc>
   2434c:	mov	r0, #15
   24350:	add	sp, sp, #32
   24354:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   24358:	mov	r0, #29
   2435c:	b	24268 <flatcc_verify_table_as_nested_root@@Base+0xbc>
   24360:	mov	r0, #30
   24364:	b	24268 <flatcc_verify_table_as_nested_root@@Base+0xbc>

00024368 <flatcc_verify_union_field@@Base>:
   24368:	sub	ip, r1, #1
   2436c:	push	{r4, r5, r6, lr}
   24370:	uxth	ip, ip
   24374:	add	ip, ip, #2
   24378:	ldrh	lr, [r0, #22]
   2437c:	lsl	ip, ip, #1
   24380:	sub	sp, sp, #32
   24384:	uxth	ip, ip
   24388:	cmp	ip, lr
   2438c:	ldr	r5, [r0, #12]
   24390:	bcs	243bc <flatcc_verify_union_field@@Base+0x54>
   24394:	ldrh	ip, [r5, ip]
   24398:	cmp	ip, #0
   2439c:	beq	243bc <flatcc_verify_union_field@@Base+0x54>
   243a0:	ldrh	r4, [r0, #20]
   243a4:	add	r6, ip, #1
   243a8:	cmp	r6, r4
   243ac:	movhi	r0, #13
   243b0:	bls	24400 <flatcc_verify_union_field@@Base+0x98>
   243b4:	add	sp, sp, #32
   243b8:	pop	{r4, r5, r6, pc}
   243bc:	add	r1, r1, #2
   243c0:	lsl	r1, r1, #1
   243c4:	uxth	r1, r1
   243c8:	cmp	lr, r1
   243cc:	bhi	243e8 <flatcc_verify_union_field@@Base+0x80>
   243d0:	cmp	r2, #0
   243d4:	movne	r0, #21
   243d8:	bne	243b4 <flatcc_verify_union_field@@Base+0x4c>
   243dc:	mov	r0, #0
   243e0:	add	sp, sp, #32
   243e4:	pop	{r4, r5, r6, pc}
   243e8:	ldrh	r3, [r5, r1]
   243ec:	cmp	r3, #0
   243f0:	movne	r0, #23
   243f4:	beq	243d0 <flatcc_verify_union_field@@Base+0x68>
   243f8:	add	sp, sp, #32
   243fc:	pop	{r4, r5, r6, pc}
   24400:	add	r4, r1, #2
   24404:	ldr	r6, [r0]
   24408:	lsl	r4, r4, #1
   2440c:	uxth	r4, r4
   24410:	cmp	lr, r4
   24414:	bhi	24488 <flatcc_verify_union_field@@Base+0x120>
   24418:	ldr	lr, [r0, #16]
   2441c:	add	ip, ip, lr
   24420:	add	r4, r6, ip
   24424:	ldrb	ip, [r6, ip]
   24428:	cmp	ip, #0
   2442c:	beq	243dc <flatcc_verify_union_field@@Base+0x74>
   24430:	mov	r6, r3
   24434:	add	r3, sp, #4
   24438:	mov	r5, r0
   2443c:	bl	230d8 <flatcc_emitter_copy_buffer@@Base+0xc8>
   24440:	cmp	r0, #0
   24444:	bne	243b4 <flatcc_verify_union_field@@Base+0x4c>
   24448:	ldr	r3, [sp, #4]
   2444c:	cmp	r3, #0
   24450:	beq	243dc <flatcc_verify_union_field@@Base+0x74>
   24454:	ldmib	r5, {r0, r1}
   24458:	ldr	r2, [r5]
   2445c:	str	r3, [sp, #24]
   24460:	str	r0, [sp, #12]
   24464:	str	r1, [sp, #16]
   24468:	ldr	r3, [r2, r3]
   2446c:	str	r2, [sp, #8]
   24470:	str	r3, [sp, #28]
   24474:	ldrb	r3, [r4]
   24478:	add	r0, sp, #8
   2447c:	strb	r3, [sp, #20]
   24480:	blx	r6
   24484:	b	243b4 <flatcc_verify_union_field@@Base+0x4c>
   24488:	ldr	lr, [r0, #16]
   2448c:	ldrh	r5, [r5, r4]
   24490:	add	ip, ip, lr
   24494:	add	r4, r6, ip
   24498:	ldrb	ip, [r6, ip]
   2449c:	adds	lr, ip, #0
   244a0:	movne	lr, #1
   244a4:	cmp	r5, #0
   244a8:	orreq	lr, lr, #1
   244ac:	cmp	lr, #0
   244b0:	bne	24428 <flatcc_verify_union_field@@Base+0xc0>
   244b4:	mov	r0, #24
   244b8:	add	sp, sp, #32
   244bc:	pop	{r4, r5, r6, pc}

000244c0 <flatcc_verify_union_vector_field@@Base>:
   244c0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   244c4:	sub	r6, r1, #1
   244c8:	ldrh	lr, [r0, #22]
   244cc:	uxth	r6, r6
   244d0:	add	r5, r6, #2
   244d4:	sub	sp, sp, #52	; 0x34
   244d8:	lsl	r5, r5, #1
   244dc:	ldr	r4, [r0, #12]
   244e0:	uxth	r5, r5
   244e4:	cmp	r5, lr
   244e8:	bcs	24598 <flatcc_verify_union_vector_field@@Base+0xd8>
   244ec:	ldrh	ip, [r4, r5]
   244f0:	cmp	ip, #0
   244f4:	beq	24598 <flatcc_verify_union_vector_field@@Base+0xd8>
   244f8:	mov	r9, #1
   244fc:	mvn	fp, #0
   24500:	str	r3, [sp, #12]
   24504:	mov	r7, r1
   24508:	stm	sp, {r9, fp}
   2450c:	mov	r3, r9
   24510:	mov	r1, r6
   24514:	mov	r8, r2
   24518:	mov	r4, r0
   2451c:	bl	23554 <flatcc_verify_vector_field@@Base>
   24520:	subs	sl, r0, #0
   24524:	bne	24650 <flatcc_verify_union_vector_field@@Base+0x190>
   24528:	ldrh	r3, [r4, #22]
   2452c:	cmp	r3, r5
   24530:	bls	2458c <flatcc_verify_union_vector_field@@Base+0xcc>
   24534:	ldr	r3, [r4, #12]
   24538:	ldrh	r3, [r3, r5]
   2453c:	cmp	r3, #0
   24540:	beq	2458c <flatcc_verify_union_vector_field@@Base+0xcc>
   24544:	ldr	r1, [r4, #16]
   24548:	ldr	r2, [r4]
   2454c:	add	r3, r3, r1
   24550:	adds	lr, r2, r3
   24554:	beq	2458c <flatcc_verify_union_vector_field@@Base+0xcc>
   24558:	ldr	ip, [r2, r3]
   2455c:	mov	r1, r7
   24560:	mov	r2, r8
   24564:	add	r3, sp, #20
   24568:	mov	r0, r4
   2456c:	add	r5, lr, ip
   24570:	ldr	r7, [lr, ip]
   24574:	bl	230d8 <flatcc_emitter_copy_buffer@@Base+0xc8>
   24578:	subs	r6, r0, #0
   2457c:	bne	24638 <flatcc_verify_union_vector_field@@Base+0x178>
   24580:	ldr	r3, [sp, #20]
   24584:	cmp	r3, #0
   24588:	bne	245d4 <flatcc_verify_union_vector_field@@Base+0x114>
   2458c:	mov	r0, sl
   24590:	add	sp, sp, #52	; 0x34
   24594:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   24598:	add	ip, r1, #2
   2459c:	lsl	ip, ip, #1
   245a0:	uxth	ip, ip
   245a4:	cmp	lr, ip
   245a8:	bhi	245c4 <flatcc_verify_union_vector_field@@Base+0x104>
   245ac:	cmp	r2, #0
   245b0:	movne	sl, #22
   245b4:	beq	244f8 <flatcc_verify_union_vector_field@@Base+0x38>
   245b8:	mov	r0, sl
   245bc:	add	sp, sp, #52	; 0x34
   245c0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   245c4:	ldrh	ip, [r4, ip]
   245c8:	cmp	ip, #0
   245cc:	bne	244f8 <flatcc_verify_union_vector_field@@Base+0x38>
   245d0:	b	245ac <flatcc_verify_union_vector_field@@Base+0xec>
   245d4:	ldr	r1, [r4, #8]
   245d8:	cmp	r1, #0
   245dc:	movle	sl, #3
   245e0:	ble	2458c <flatcc_verify_union_vector_field@@Base+0xcc>
   245e4:	ldr	r0, [r4]
   245e8:	ldr	r2, [r0, r3]
   245ec:	add	r2, r3, r2
   245f0:	cmp	r3, r2
   245f4:	bcs	24648 <flatcc_verify_union_vector_field@@Base+0x188>
   245f8:	ldr	ip, [r4, #4]
   245fc:	add	r8, r2, #4
   24600:	cmp	ip, r8
   24604:	bcc	24648 <flatcc_verify_union_vector_field@@Base+0x188>
   24608:	ands	r3, r8, #3
   2460c:	beq	24678 <flatcc_verify_union_vector_field@@Base+0x1b8>
   24610:	cmp	r3, #0
   24614:	bne	24648 <flatcc_verify_union_vector_field@@Base+0x188>
   24618:	ldr	r3, [r0, r2]
   2461c:	cmn	r3, #-1073741823	; 0xc0000001
   24620:	movhi	sl, #25
   24624:	bhi	2458c <flatcc_verify_union_vector_field@@Base+0xcc>
   24628:	sub	ip, ip, r8
   2462c:	cmp	ip, r3, lsl #2
   24630:	movcc	sl, #26
   24634:	bcc	2458c <flatcc_verify_union_vector_field@@Base+0xcc>
   24638:	mov	sl, r6
   2463c:	mov	r0, sl
   24640:	add	sp, sp, #52	; 0x34
   24644:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   24648:	mov	sl, #16
   2464c:	b	2458c <flatcc_verify_union_vector_field@@Base+0xcc>
   24650:	stm	sp, {r9, fp}
   24654:	mov	r3, r9
   24658:	mov	r2, r8
   2465c:	mov	r1, r6
   24660:	mov	r0, r4
   24664:	bl	23554 <flatcc_verify_vector_field@@Base>
   24668:	mov	sl, r0
   2466c:	mov	r0, sl
   24670:	add	sp, sp, #52	; 0x34
   24674:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   24678:	ldr	r3, [r0, r2]
   2467c:	add	r4, r0, r2
   24680:	cmn	r3, #-1073741823	; 0xc0000001
   24684:	bhi	24618 <flatcc_verify_union_vector_field@@Base+0x158>
   24688:	lsl	lr, r3, #2
   2468c:	sub	r9, ip, r8
   24690:	cmp	r9, lr
   24694:	bcc	24618 <flatcc_verify_union_vector_field@@Base+0x158>
   24698:	cmp	r7, r3
   2469c:	movne	sl, #34	; 0x22
   246a0:	bne	2458c <flatcc_verify_union_vector_field@@Base+0xcc>
   246a4:	sub	r1, r1, #1
   246a8:	cmp	r7, #0
   246ac:	str	r1, [sp, #32]
   246b0:	str	r0, [sp, #24]
   246b4:	str	ip, [sp, #28]
   246b8:	beq	24638 <flatcc_verify_union_vector_field@@Base+0x178>
   246bc:	add	r2, r2, lr
   246c0:	add	r7, r0, r2
   246c4:	add	r5, r5, #4
   246c8:	add	r9, sp, #24
   246cc:	b	246ec <flatcc_verify_union_vector_field@@Base+0x22c>
   246d0:	ldrb	r3, [r5]
   246d4:	cmp	r3, #0
   246d8:	bne	24738 <flatcc_verify_union_vector_field@@Base+0x278>
   246dc:	cmp	r4, r7
   246e0:	add	r8, r8, #4
   246e4:	add	r5, r5, #1
   246e8:	beq	24638 <flatcc_verify_union_vector_field@@Base+0x178>
   246ec:	ldr	r3, [r4, #4]!
   246f0:	mov	r0, r9
   246f4:	cmp	r3, #0
   246f8:	beq	246d0 <flatcc_verify_union_vector_field@@Base+0x210>
   246fc:	ldrb	r2, [r5]
   24700:	cmp	r2, #0
   24704:	beq	24740 <flatcc_verify_union_vector_field@@Base+0x280>
   24708:	str	r3, [sp, #44]	; 0x2c
   2470c:	ldr	r3, [sp, #12]
   24710:	strb	r2, [sp, #36]	; 0x24
   24714:	str	r8, [sp, #40]	; 0x28
   24718:	blx	r3
   2471c:	cmp	r0, #0
   24720:	beq	246dc <flatcc_verify_union_vector_field@@Base+0x21c>
   24724:	mov	r0, r9
   24728:	ldr	r3, [sp, #12]
   2472c:	blx	r3
   24730:	mov	sl, r0
   24734:	b	2458c <flatcc_verify_union_vector_field@@Base+0xcc>
   24738:	mov	sl, #32
   2473c:	b	2458c <flatcc_verify_union_vector_field@@Base+0xcc>
   24740:	mov	sl, #33	; 0x21
   24744:	b	2458c <flatcc_verify_union_vector_field@@Base+0xcc>

00024748 <__libc_csu_init@@Base>:
   24748:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   2474c:	mov	r7, r0
   24750:	ldr	r6, [pc, #72]	; 247a0 <__libc_csu_init@@Base+0x58>
   24754:	ldr	r5, [pc, #72]	; 247a4 <__libc_csu_init@@Base+0x5c>
   24758:	add	r6, pc, r6
   2475c:	add	r5, pc, r5
   24760:	sub	r6, r6, r5
   24764:	mov	r8, r1
   24768:	mov	r9, r2
   2476c:	bl	128ec <strcmp@plt-0x20>
   24770:	asrs	r6, r6, #2
   24774:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   24778:	mov	r4, #0
   2477c:	add	r4, r4, #1
   24780:	ldr	r3, [r5], #4
   24784:	mov	r2, r9
   24788:	mov	r1, r8
   2478c:	mov	r0, r7
   24790:	blx	r3
   24794:	cmp	r6, r4
   24798:	bne	2477c <__libc_csu_init@@Base+0x34>
   2479c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   247a0:			; <UNDEFINED> instruction: 0x000147b0
   247a4:	andeq	r4, r1, r8, lsr #15

000247a8 <__libc_csu_fini@@Base>:
   247a8:	bx	lr

Disassembly of section .fini:

000247ac <.fini>:
   247ac:	push	{r3, lr}
   247b0:	pop	{r3, pc}
