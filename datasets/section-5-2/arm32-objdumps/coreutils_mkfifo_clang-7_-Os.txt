
../repos/coreutils/src/mkfifo:     file format elf32-littlearm


Disassembly of section .init:

00011710 <.init>:
   11710:	push	{r3, lr}
   11714:	bl	11b9c <__assert_fail@plt+0x4c>
   11718:	pop	{r3, pc}

Disassembly of section .plt:

0001171c <fstatfs64@plt-0x14>:
   1171c:	push	{lr}		; (str lr, [sp, #-4]!)
   11720:	ldr	lr, [pc, #4]	; 1172c <fstatfs64@plt-0x4>
   11724:	add	lr, pc, lr
   11728:	ldr	pc, [lr, #8]!
   1172c:	ldrdeq	r9, [r1], -r4

00011730 <fstatfs64@plt>:
   11730:	add	ip, pc, #0, 12
   11734:	add	ip, ip, #102400	; 0x19000
   11738:	ldr	pc, [ip, #2260]!	; 0x8d4

0001173c <selabel_lookup@plt>:
   1173c:	add	ip, pc, #0, 12
   11740:	add	ip, ip, #102400	; 0x19000
   11744:	ldr	pc, [ip, #2252]!	; 0x8cc

00011748 <calloc@plt>:
   11748:	add	ip, pc, #0, 12
   1174c:	add	ip, ip, #102400	; 0x19000
   11750:	ldr	pc, [ip, #2244]!	; 0x8c4

00011754 <fputs_unlocked@plt>:
   11754:	add	ip, pc, #0, 12
   11758:	add	ip, ip, #102400	; 0x19000
   1175c:	ldr	pc, [ip, #2236]!	; 0x8bc

00011760 <raise@plt>:
   11760:	add	ip, pc, #0, 12
   11764:	add	ip, ip, #102400	; 0x19000
   11768:	ldr	pc, [ip, #2228]!	; 0x8b4

0001176c <is_selinux_enabled@plt>:
   1176c:	add	ip, pc, #0, 12
   11770:	add	ip, ip, #102400	; 0x19000
   11774:	ldr	pc, [ip, #2220]!	; 0x8ac

00011778 <strcmp@plt>:
   11778:	add	ip, pc, #0, 12
   1177c:	add	ip, ip, #102400	; 0x19000
   11780:	ldr	pc, [ip, #2212]!	; 0x8a4

00011784 <context_type_get@plt>:
   11784:	add	ip, pc, #0, 12
   11788:	add	ip, ip, #102400	; 0x19000
   1178c:	ldr	pc, [ip, #2204]!	; 0x89c

00011790 <fflush@plt>:
   11790:	add	ip, pc, #0, 12
   11794:	add	ip, ip, #102400	; 0x19000
   11798:	ldr	pc, [ip, #2196]!	; 0x894

0001179c <lsetfilecon@plt>:
   1179c:	add	ip, pc, #0, 12
   117a0:	add	ip, ip, #102400	; 0x19000
   117a4:	ldr	pc, [ip, #2188]!	; 0x88c

000117a8 <memmove@plt>:
   117a8:	add	ip, pc, #0, 12
   117ac:	add	ip, ip, #102400	; 0x19000
   117b0:	ldr	pc, [ip, #2180]!	; 0x884

000117b4 <free@plt>:
   117b4:	add	ip, pc, #0, 12
   117b8:	add	ip, ip, #102400	; 0x19000
   117bc:	ldr	pc, [ip, #2172]!	; 0x87c

000117c0 <faccessat@plt>:
   117c0:	add	ip, pc, #0, 12
   117c4:	add	ip, ip, #102400	; 0x19000
   117c8:	ldr	pc, [ip, #2164]!	; 0x874

000117cc <_exit@plt>:
   117cc:	add	ip, pc, #0, 12
   117d0:	add	ip, ip, #102400	; 0x19000
   117d4:	ldr	pc, [ip, #2156]!	; 0x86c

000117d8 <memcpy@plt>:
   117d8:	add	ip, pc, #0, 12
   117dc:	add	ip, ip, #102400	; 0x19000
   117e0:	ldr	pc, [ip, #2148]!	; 0x864

000117e4 <mbsinit@plt>:
   117e4:	add	ip, pc, #0, 12
   117e8:	add	ip, ip, #102400	; 0x19000
   117ec:	ldr	pc, [ip, #2140]!	; 0x85c

000117f0 <context_new@plt>:
   117f0:	add	ip, pc, #0, 12
   117f4:	add	ip, ip, #102400	; 0x19000
   117f8:	ldr	pc, [ip, #2132]!	; 0x854

000117fc <memcmp@plt>:
   117fc:	add	ip, pc, #0, 12
   11800:	add	ip, ip, #102400	; 0x19000
   11804:	ldr	pc, [ip, #2124]!	; 0x84c

00011808 <dcgettext@plt>:
   11808:	add	ip, pc, #0, 12
   1180c:	add	ip, ip, #102400	; 0x19000
   11810:	ldr	pc, [ip, #2116]!	; 0x844

00011814 <context_type_set@plt>:
   11814:	add	ip, pc, #0, 12
   11818:	add	ip, ip, #102400	; 0x19000
   1181c:	ldr	pc, [ip, #2108]!	; 0x83c

00011820 <realloc@plt>:
   11820:	add	ip, pc, #0, 12
   11824:	add	ip, ip, #102400	; 0x19000
   11828:	ldr	pc, [ip, #2100]!	; 0x834

0001182c <fgetfilecon@plt>:
   1182c:	add	ip, pc, #0, 12
   11830:	add	ip, ip, #102400	; 0x19000
   11834:	ldr	pc, [ip, #2092]!	; 0x82c

00011838 <textdomain@plt>:
   11838:	add	ip, pc, #0, 12
   1183c:	add	ip, ip, #102400	; 0x19000
   11840:	ldr	pc, [ip, #2084]!	; 0x824

00011844 <rawmemchr@plt>:
   11844:	add	ip, pc, #0, 12
   11848:	add	ip, ip, #102400	; 0x19000
   1184c:	ldr	pc, [ip, #2076]!	; 0x81c

00011850 <__fxstatat64@plt>:
   11850:	add	ip, pc, #0, 12
   11854:	add	ip, ip, #102400	; 0x19000
   11858:	ldr	pc, [ip, #2068]!	; 0x814

0001185c <iswprint@plt>:
   1185c:	add	ip, pc, #0, 12
   11860:	add	ip, ip, #102400	; 0x19000
   11864:	ldr	pc, [ip, #2060]!	; 0x80c

00011868 <__fxstat64@plt>:
   11868:	add	ip, pc, #0, 12
   1186c:	add	ip, ip, #102400	; 0x19000
   11870:	ldr	pc, [ip, #2052]!	; 0x804

00011874 <readlink@plt>:
   11874:	add	ip, pc, #0, 12
   11878:	add	ip, ip, #102400	; 0x19000
   1187c:	ldr	pc, [ip, #2044]!	; 0x7fc

00011880 <lseek64@plt>:
   11880:	add	ip, pc, #0, 12
   11884:	add	ip, ip, #102400	; 0x19000
   11888:	ldr	pc, [ip, #2036]!	; 0x7f4

0001188c <__ctype_get_mb_cur_max@plt>:
   1188c:	add	ip, pc, #0, 12
   11890:	add	ip, ip, #102400	; 0x19000
   11894:	ldr	pc, [ip, #2028]!	; 0x7ec

00011898 <getcon@plt>:
   11898:	add	ip, pc, #0, 12
   1189c:	add	ip, ip, #102400	; 0x19000
   118a0:	ldr	pc, [ip, #2020]!	; 0x7e4

000118a4 <__fpending@plt>:
   118a4:	add	ip, pc, #0, 12
   118a8:	add	ip, ip, #102400	; 0x19000
   118ac:	ldr	pc, [ip, #2012]!	; 0x7dc

000118b0 <ferror_unlocked@plt>:
   118b0:	add	ip, pc, #0, 12
   118b4:	add	ip, ip, #102400	; 0x19000
   118b8:	ldr	pc, [ip, #2004]!	; 0x7d4

000118bc <mbrtowc@plt>:
   118bc:	add	ip, pc, #0, 12
   118c0:	add	ip, ip, #102400	; 0x19000
   118c4:	ldr	pc, [ip, #1996]!	; 0x7cc

000118c8 <error@plt>:
   118c8:	add	ip, pc, #0, 12
   118cc:	add	ip, ip, #102400	; 0x19000
   118d0:	ldr	pc, [ip, #1988]!	; 0x7c4

000118d4 <open64@plt>:
   118d4:	add	ip, pc, #0, 12
   118d8:	add	ip, ip, #102400	; 0x19000
   118dc:	ldr	pc, [ip, #1980]!	; 0x7bc

000118e0 <lgetfilecon@plt>:
   118e0:	add	ip, pc, #0, 12
   118e4:	add	ip, ip, #102400	; 0x19000
   118e8:	ldr	pc, [ip, #1972]!	; 0x7b4

000118ec <malloc@plt>:
   118ec:	add	ip, pc, #0, 12
   118f0:	add	ip, ip, #102400	; 0x19000
   118f4:	ldr	pc, [ip, #1964]!	; 0x7ac

000118f8 <__libc_start_main@plt>:
   118f8:	add	ip, pc, #0, 12
   118fc:	add	ip, ip, #102400	; 0x19000
   11900:	ldr	pc, [ip, #1956]!	; 0x7a4

00011904 <__freading@plt>:
   11904:	add	ip, pc, #0, 12
   11908:	add	ip, ip, #102400	; 0x19000
   1190c:	ldr	pc, [ip, #1948]!	; 0x79c

00011910 <__gmon_start__@plt>:
   11910:	add	ip, pc, #0, 12
   11914:	add	ip, ip, #102400	; 0x19000
   11918:	ldr	pc, [ip, #1940]!	; 0x794

0001191c <context_free@plt>:
   1191c:	add	ip, pc, #0, 12
   11920:	add	ip, ip, #102400	; 0x19000
   11924:	ldr	pc, [ip, #1932]!	; 0x78c

00011928 <getopt_long@plt>:
   11928:	add	ip, pc, #0, 12
   1192c:	add	ip, ip, #102400	; 0x19000
   11930:	ldr	pc, [ip, #1924]!	; 0x784

00011934 <__ctype_b_loc@plt>:
   11934:	add	ip, pc, #0, 12
   11938:	add	ip, ip, #102400	; 0x19000
   1193c:	ldr	pc, [ip, #1916]!	; 0x77c

00011940 <getcwd@plt>:
   11940:	add	ip, pc, #0, 12
   11944:	add	ip, ip, #102400	; 0x19000
   11948:	ldr	pc, [ip, #1908]!	; 0x774

0001194c <exit@plt>:
   1194c:	add	ip, pc, #0, 12
   11950:	add	ip, ip, #102400	; 0x19000
   11954:	ldr	pc, [ip, #1900]!	; 0x76c

00011958 <getfilecon@plt>:
   11958:	add	ip, pc, #0, 12
   1195c:	add	ip, ip, #102400	; 0x19000
   11960:	ldr	pc, [ip, #1892]!	; 0x764

00011964 <strlen@plt>:
   11964:	add	ip, pc, #0, 12
   11968:	add	ip, ip, #102400	; 0x19000
   1196c:	ldr	pc, [ip, #1884]!	; 0x75c

00011970 <selabel_open@plt>:
   11970:	add	ip, pc, #0, 12
   11974:	add	ip, ip, #102400	; 0x19000
   11978:	ldr	pc, [ip, #1876]!	; 0x754

0001197c <openat64@plt>:
   1197c:	add	ip, pc, #0, 12
   11980:	add	ip, ip, #102400	; 0x19000
   11984:	ldr	pc, [ip, #1868]!	; 0x74c

00011988 <setfscreatecon@plt>:
   11988:	add	ip, pc, #0, 12
   1198c:	add	ip, ip, #102400	; 0x19000
   11990:	ldr	pc, [ip, #1860]!	; 0x744

00011994 <__errno_location@plt>:
   11994:	add	ip, pc, #0, 12
   11998:	add	ip, ip, #102400	; 0x19000
   1199c:	ldr	pc, [ip, #1852]!	; 0x73c

000119a0 <__sprintf_chk@plt>:
   119a0:	add	ip, pc, #0, 12
   119a4:	add	ip, ip, #102400	; 0x19000
   119a8:	ldr	pc, [ip, #1844]!	; 0x734

000119ac <__cxa_atexit@plt>:
   119ac:	add	ip, pc, #0, 12
   119b0:	add	ip, ip, #102400	; 0x19000
   119b4:	ldr	pc, [ip, #1836]!	; 0x72c

000119b8 <memset@plt>:
   119b8:	add	ip, pc, #0, 12
   119bc:	add	ip, ip, #102400	; 0x19000
   119c0:	ldr	pc, [ip, #1828]!	; 0x724

000119c4 <__printf_chk@plt>:
   119c4:	add	ip, pc, #0, 12
   119c8:	add	ip, ip, #102400	; 0x19000
   119cc:	ldr	pc, [ip, #1820]!	; 0x71c

000119d0 <fileno@plt>:
   119d0:	add	ip, pc, #0, 12
   119d4:	add	ip, ip, #102400	; 0x19000
   119d8:	ldr	pc, [ip, #1812]!	; 0x714

000119dc <__fprintf_chk@plt>:
   119dc:	add	ip, pc, #0, 12
   119e0:	add	ip, ip, #102400	; 0x19000
   119e4:	ldr	pc, [ip, #1804]!	; 0x70c

000119e8 <fclose@plt>:
   119e8:	add	ip, pc, #0, 12
   119ec:	add	ip, ip, #102400	; 0x19000
   119f0:	ldr	pc, [ip, #1796]!	; 0x704

000119f4 <fseeko64@plt>:
   119f4:	add	ip, pc, #0, 12
   119f8:	add	ip, ip, #102400	; 0x19000
   119fc:	ldr	pc, [ip, #1788]!	; 0x6fc

00011a00 <fcntl64@plt>:
   11a00:	add	ip, pc, #0, 12
   11a04:	add	ip, ip, #102400	; 0x19000
   11a08:	ldr	pc, [ip, #1780]!	; 0x6f4

00011a0c <setlocale@plt>:
   11a0c:	add	ip, pc, #0, 12
   11a10:	add	ip, ip, #102400	; 0x19000
   11a14:	ldr	pc, [ip, #1772]!	; 0x6ec

00011a18 <fsetfilecon@plt>:
   11a18:	add	ip, pc, #0, 12
   11a1c:	add	ip, ip, #102400	; 0x19000
   11a20:	ldr	pc, [ip, #1764]!	; 0x6e4

00011a24 <strrchr@plt>:
   11a24:	add	ip, pc, #0, 12
   11a28:	add	ip, ip, #102400	; 0x19000
   11a2c:	ldr	pc, [ip, #1756]!	; 0x6dc

00011a30 <nl_langinfo@plt>:
   11a30:	add	ip, pc, #0, 12
   11a34:	add	ip, ip, #102400	; 0x19000
   11a38:	ldr	pc, [ip, #1748]!	; 0x6d4

00011a3c <readdir64@plt>:
   11a3c:	add	ip, pc, #0, 12
   11a40:	add	ip, ip, #102400	; 0x19000
   11a44:	ldr	pc, [ip, #1740]!	; 0x6cc

00011a48 <fdopendir@plt>:
   11a48:	add	ip, pc, #0, 12
   11a4c:	add	ip, ip, #102400	; 0x19000
   11a50:	ldr	pc, [ip, #1732]!	; 0x6c4

00011a54 <security_compute_create@plt>:
   11a54:	add	ip, pc, #0, 12
   11a58:	add	ip, ip, #102400	; 0x19000
   11a5c:	ldr	pc, [ip, #1724]!	; 0x6bc

00011a60 <dirfd@plt>:
   11a60:	add	ip, pc, #0, 12
   11a64:	add	ip, ip, #102400	; 0x19000
   11a68:	ldr	pc, [ip, #1716]!	; 0x6b4

00011a6c <fchdir@plt>:
   11a6c:	add	ip, pc, #0, 12
   11a70:	add	ip, ip, #102400	; 0x19000
   11a74:	ldr	pc, [ip, #1708]!	; 0x6ac

00011a78 <qsort@plt>:
   11a78:	add	ip, pc, #0, 12
   11a7c:	add	ip, ip, #102400	; 0x19000
   11a80:	ldr	pc, [ip, #1700]!	; 0x6a4

00011a84 <freecon@plt>:
   11a84:	add	ip, pc, #0, 12
   11a88:	add	ip, ip, #102400	; 0x19000
   11a8c:	ldr	pc, [ip, #1692]!	; 0x69c

00011a90 <bindtextdomain@plt>:
   11a90:	add	ip, pc, #0, 12
   11a94:	add	ip, ip, #102400	; 0x19000
   11a98:	ldr	pc, [ip, #1684]!	; 0x694

00011a9c <getfscreatecon@plt>:
   11a9c:	add	ip, pc, #0, 12
   11aa0:	add	ip, ip, #102400	; 0x19000
   11aa4:	ldr	pc, [ip, #1676]!	; 0x68c

00011aa8 <umask@plt>:
   11aa8:	add	ip, pc, #0, 12
   11aac:	add	ip, ip, #102400	; 0x19000
   11ab0:	ldr	pc, [ip, #1668]!	; 0x684

00011ab4 <context_str@plt>:
   11ab4:	add	ip, pc, #0, 12
   11ab8:	add	ip, ip, #102400	; 0x19000
   11abc:	ldr	pc, [ip, #1660]!	; 0x67c

00011ac0 <chmod@plt>:
   11ac0:	add	ip, pc, #0, 12
   11ac4:	add	ip, ip, #102400	; 0x19000
   11ac8:	ldr	pc, [ip, #1652]!	; 0x674

00011acc <__xstat64@plt>:
   11acc:	add	ip, pc, #0, 12
   11ad0:	add	ip, ip, #102400	; 0x19000
   11ad4:	ldr	pc, [ip, #1644]!	; 0x66c

00011ad8 <fputs@plt>:
   11ad8:	add	ip, pc, #0, 12
   11adc:	add	ip, ip, #102400	; 0x19000
   11ae0:	ldr	pc, [ip, #1636]!	; 0x664

00011ae4 <strncmp@plt>:
   11ae4:	add	ip, pc, #0, 12
   11ae8:	add	ip, ip, #102400	; 0x19000
   11aec:	ldr	pc, [ip, #1628]!	; 0x65c

00011af0 <abort@plt>:
   11af0:	add	ip, pc, #0, 12
   11af4:	add	ip, ip, #102400	; 0x19000
   11af8:	ldr	pc, [ip, #1620]!	; 0x654

00011afc <close@plt>:
   11afc:	add	ip, pc, #0, 12
   11b00:	add	ip, ip, #102400	; 0x19000
   11b04:	ldr	pc, [ip, #1612]!	; 0x64c

00011b08 <__lxstat64@plt>:
   11b08:	add	ip, pc, #0, 12
   11b0c:	add	ip, ip, #102400	; 0x19000
   11b10:	ldr	pc, [ip, #1604]!	; 0x644

00011b14 <mkfifo@plt>:
   11b14:	add	ip, pc, #0, 12
   11b18:	add	ip, ip, #102400	; 0x19000
   11b1c:	ldr	pc, [ip, #1596]!	; 0x63c

00011b20 <mode_to_security_class@plt>:
   11b20:	add	ip, pc, #0, 12
   11b24:	add	ip, ip, #102400	; 0x19000
   11b28:	ldr	pc, [ip, #1588]!	; 0x634

00011b2c <closedir@plt>:
   11b2c:	add	ip, pc, #0, 12
   11b30:	add	ip, ip, #102400	; 0x19000
   11b34:	ldr	pc, [ip, #1580]!	; 0x62c

00011b38 <strspn@plt>:
   11b38:	add	ip, pc, #0, 12
   11b3c:	add	ip, ip, #102400	; 0x19000
   11b40:	ldr	pc, [ip, #1572]!	; 0x624

00011b44 <__mempcpy_chk@plt>:
   11b44:	add	ip, pc, #0, 12
   11b48:	add	ip, ip, #102400	; 0x19000
   11b4c:	ldr	pc, [ip, #1564]!	; 0x61c

00011b50 <__assert_fail@plt>:
   11b50:	add	ip, pc, #0, 12
   11b54:	add	ip, ip, #102400	; 0x19000
   11b58:	ldr	pc, [ip, #1556]!	; 0x614

Disassembly of section .text:

00011b60 <lchmod@@Base-0x4750>:
   11b60:	mov	fp, #0
   11b64:	mov	lr, #0
   11b68:	pop	{r1}		; (ldr r1, [sp], #4)
   11b6c:	mov	r2, sp
   11b70:	push	{r2}		; (str r2, [sp, #-4]!)
   11b74:	push	{r0}		; (str r0, [sp, #-4]!)
   11b78:	ldr	ip, [pc, #16]	; 11b90 <__assert_fail@plt+0x40>
   11b7c:	push	{ip}		; (str ip, [sp, #-4]!)
   11b80:	ldr	r0, [pc, #12]	; 11b94 <__assert_fail@plt+0x44>
   11b84:	ldr	r3, [pc, #12]	; 11b98 <__assert_fail@plt+0x48>
   11b88:	bl	118f8 <__libc_start_main@plt>
   11b8c:	bl	11af0 <abort@plt>
   11b90:	strdeq	r9, [r1], -r8
   11b94:	andeq	r1, r1, r8, asr #29
   11b98:	muleq	r1, r8, sl
   11b9c:	ldr	r3, [pc, #20]	; 11bb8 <__assert_fail@plt+0x68>
   11ba0:	ldr	r2, [pc, #20]	; 11bbc <__assert_fail@plt+0x6c>
   11ba4:	add	r3, pc, r3
   11ba8:	ldr	r2, [r3, r2]
   11bac:	cmp	r2, #0
   11bb0:	bxeq	lr
   11bb4:	b	11910 <__gmon_start__@plt>
   11bb8:	andeq	r9, r1, r4, asr r4
   11bbc:	andeq	r0, r0, r0, ror r1
   11bc0:	ldr	r0, [pc, #24]	; 11be0 <__assert_fail@plt+0x90>
   11bc4:	ldr	r3, [pc, #24]	; 11be4 <__assert_fail@plt+0x94>
   11bc8:	cmp	r3, r0
   11bcc:	bxeq	lr
   11bd0:	ldr	r3, [pc, #16]	; 11be8 <__assert_fail@plt+0x98>
   11bd4:	cmp	r3, #0
   11bd8:	bxeq	lr
   11bdc:	bx	r3
   11be0:	andeq	fp, r2, r8, asr #3
   11be4:	andeq	fp, r2, r8, asr #3
   11be8:	andeq	r0, r0, r0
   11bec:	ldr	r0, [pc, #36]	; 11c18 <__assert_fail@plt+0xc8>
   11bf0:	ldr	r1, [pc, #36]	; 11c1c <__assert_fail@plt+0xcc>
   11bf4:	sub	r1, r1, r0
   11bf8:	asr	r1, r1, #2
   11bfc:	add	r1, r1, r1, lsr #31
   11c00:	asrs	r1, r1, #1
   11c04:	bxeq	lr
   11c08:	ldr	r3, [pc, #16]	; 11c20 <__assert_fail@plt+0xd0>
   11c0c:	cmp	r3, #0
   11c10:	bxeq	lr
   11c14:	bx	r3
   11c18:	andeq	fp, r2, r8, asr #3
   11c1c:	andeq	fp, r2, r8, asr #3
   11c20:	andeq	r0, r0, r0
   11c24:	push	{r4, lr}
   11c28:	ldr	r4, [pc, #24]	; 11c48 <__assert_fail@plt+0xf8>
   11c2c:	ldrb	r3, [r4]
   11c30:	cmp	r3, #0
   11c34:	popne	{r4, pc}
   11c38:	bl	11bc0 <__assert_fail@plt+0x70>
   11c3c:	mov	r3, #1
   11c40:	strb	r3, [r4]
   11c44:	pop	{r4, pc}
   11c48:	andeq	fp, r2, r4, ror #3
   11c4c:	b	11bec <__assert_fail@plt+0x9c>
   11c50:	push	{fp, lr}
   11c54:	mov	fp, sp
   11c58:	sub	sp, sp, #56	; 0x38
   11c5c:	mov	r8, r0
   11c60:	cmp	r0, #0
   11c64:	bne	11e88 <__assert_fail@plt+0x338>
   11c68:	movw	r1, #39851	; 0x9bab
   11c6c:	mov	r0, #0
   11c70:	mov	r2, #5
   11c74:	movt	r1, #1
   11c78:	bl	11808 <dcgettext@plt>
   11c7c:	mov	r1, r0
   11c80:	movw	r0, #45552	; 0xb1f0
   11c84:	movt	r0, #2
   11c88:	ldr	r2, [r0]
   11c8c:	mov	r0, #1
   11c90:	bl	119c4 <__printf_chk@plt>
   11c94:	movw	r1, #39882	; 0x9bca
   11c98:	mov	r0, #0
   11c9c:	mov	r2, #5
   11ca0:	movt	r1, #1
   11ca4:	bl	11808 <dcgettext@plt>
   11ca8:	movw	r9, #45532	; 0xb1dc
   11cac:	movt	r9, #2
   11cb0:	ldr	r1, [r9]
   11cb4:	bl	11754 <fputs_unlocked@plt>
   11cb8:	movw	r1, #40651	; 0x9ecb
   11cbc:	mov	r0, #0
   11cc0:	mov	r2, #5
   11cc4:	movt	r1, #1
   11cc8:	bl	11808 <dcgettext@plt>
   11ccc:	ldr	r1, [r9]
   11cd0:	bl	11754 <fputs_unlocked@plt>
   11cd4:	movw	r1, #39932	; 0x9bfc
   11cd8:	mov	r0, #0
   11cdc:	mov	r2, #5
   11ce0:	movt	r1, #1
   11ce4:	bl	11808 <dcgettext@plt>
   11ce8:	ldr	r1, [r9]
   11cec:	bl	11754 <fputs_unlocked@plt>
   11cf0:	movw	r1, #40005	; 0x9c45
   11cf4:	mov	r0, #0
   11cf8:	mov	r2, #5
   11cfc:	movt	r1, #1
   11d00:	bl	11808 <dcgettext@plt>
   11d04:	ldr	r1, [r9]
   11d08:	bl	11754 <fputs_unlocked@plt>
   11d0c:	movw	r1, #40212	; 0x9d14
   11d10:	mov	r0, #0
   11d14:	mov	r2, #5
   11d18:	movt	r1, #1
   11d1c:	bl	11808 <dcgettext@plt>
   11d20:	ldr	r1, [r9]
   11d24:	bl	11754 <fputs_unlocked@plt>
   11d28:	movw	r1, #40257	; 0x9d41
   11d2c:	mov	r0, #0
   11d30:	mov	r2, #5
   11d34:	movt	r1, #1
   11d38:	bl	11808 <dcgettext@plt>
   11d3c:	ldr	r1, [r9]
   11d40:	bl	11754 <fputs_unlocked@plt>
   11d44:	movw	r0, #41136	; 0xa0b0
   11d48:	mov	r6, sp
   11d4c:	movt	r0, #1
   11d50:	mov	r1, r6
   11d54:	ldm	r0!, {r2, r3, r4, r5}
   11d58:	stmia	r1!, {r2, r3, r4, r5}
   11d5c:	ldm	r0!, {r2, r3, r4, r5, r7}
   11d60:	stmia	r1!, {r2, r3, r4, r5, r7}
   11d64:	ldm	r0, {r2, r3, r4, r5, r7}
   11d68:	stm	r1, {r2, r3, r4, r5, r7}
   11d6c:	movw	r1, #40726	; 0x9f16
   11d70:	movw	r5, #40311	; 0x9d77
   11d74:	movt	r1, #1
   11d78:	movt	r5, #1
   11d7c:	mov	r0, r5
   11d80:	bl	11778 <strcmp@plt>
   11d84:	cmp	r0, #0
   11d88:	ldrne	r1, [r6, #8]!
   11d8c:	cmpne	r1, #0
   11d90:	bne	11d7c <__assert_fail@plt+0x22c>
   11d94:	ldr	r6, [r6, #4]
   11d98:	movw	r1, #40821	; 0x9f75
   11d9c:	mov	r0, #0
   11da0:	mov	r2, #5
   11da4:	movt	r1, #1
   11da8:	bl	11808 <dcgettext@plt>
   11dac:	movw	r2, #40447	; 0x9dff
   11db0:	movw	r3, #40844	; 0x9f8c
   11db4:	mov	r1, r0
   11db8:	mov	r0, #1
   11dbc:	movt	r2, #1
   11dc0:	movt	r3, #1
   11dc4:	bl	119c4 <__printf_chk@plt>
   11dc8:	cmp	r6, #0
   11dcc:	mov	r0, #5
   11dd0:	mov	r1, #0
   11dd4:	moveq	r6, r5
   11dd8:	bl	11a0c <setlocale@plt>
   11ddc:	cmp	r0, #0
   11de0:	beq	11e18 <__assert_fail@plt+0x2c8>
   11de4:	movw	r1, #40884	; 0x9fb4
   11de8:	mov	r2, #3
   11dec:	movt	r1, #1
   11df0:	bl	11ae4 <strncmp@plt>
   11df4:	cmp	r0, #0
   11df8:	beq	11e18 <__assert_fail@plt+0x2c8>
   11dfc:	movw	r1, #40888	; 0x9fb8
   11e00:	mov	r0, #0
   11e04:	mov	r2, #5
   11e08:	movt	r1, #1
   11e0c:	bl	11808 <dcgettext@plt>
   11e10:	ldr	r1, [r9]
   11e14:	bl	11754 <fputs_unlocked@plt>
   11e18:	movw	r1, #40959	; 0x9fff
   11e1c:	mov	r0, #0
   11e20:	mov	r2, #5
   11e24:	movt	r1, #1
   11e28:	bl	11808 <dcgettext@plt>
   11e2c:	movw	r2, #40844	; 0x9f8c
   11e30:	mov	r1, r0
   11e34:	mov	r0, #1
   11e38:	mov	r3, r5
   11e3c:	movt	r2, #1
   11e40:	bl	119c4 <__printf_chk@plt>
   11e44:	movw	r1, #40986	; 0xa01a
   11e48:	mov	r0, #0
   11e4c:	mov	r2, #5
   11e50:	movt	r1, #1
   11e54:	bl	11808 <dcgettext@plt>
   11e58:	movw	r3, #41036	; 0xa04c
   11e5c:	mov	r1, r0
   11e60:	movw	r0, #40754	; 0x9f32
   11e64:	cmp	r6, r5
   11e68:	mov	r2, r6
   11e6c:	movt	r0, #1
   11e70:	movt	r3, #1
   11e74:	moveq	r3, r0
   11e78:	mov	r0, #1
   11e7c:	bl	119c4 <__printf_chk@plt>
   11e80:	mov	r0, r8
   11e84:	bl	1194c <exit@plt>
   11e88:	movw	r0, #45528	; 0xb1d8
   11e8c:	movw	r1, #39812	; 0x9b84
   11e90:	mov	r2, #5
   11e94:	movt	r0, #2
   11e98:	movt	r1, #1
   11e9c:	ldr	r5, [r0]
   11ea0:	mov	r0, #0
   11ea4:	bl	11808 <dcgettext@plt>
   11ea8:	mov	r2, r0
   11eac:	movw	r0, #45552	; 0xb1f0
   11eb0:	mov	r1, #1
   11eb4:	movt	r0, #2
   11eb8:	ldr	r3, [r0]
   11ebc:	mov	r0, r5
   11ec0:	bl	119dc <__fprintf_chk@plt>
   11ec4:	b	11e80 <__assert_fail@plt+0x330>
   11ec8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11ecc:	add	fp, sp, #28
   11ed0:	sub	sp, sp, #20
   11ed4:	str	r0, [sp, #16]
   11ed8:	ldr	r0, [r1]
   11edc:	mov	r4, r1
   11ee0:	bl	16914 <lchmod@@Base+0x664>
   11ee4:	movw	r1, #41036	; 0xa04c
   11ee8:	mov	r0, #6
   11eec:	movt	r1, #1
   11ef0:	bl	11a0c <setlocale@plt>
   11ef4:	movw	r6, #40451	; 0x9e03
   11ef8:	movw	r1, #40318	; 0x9d7e
   11efc:	movt	r6, #1
   11f00:	movt	r1, #1
   11f04:	mov	r0, r6
   11f08:	bl	11a90 <bindtextdomain@plt>
   11f0c:	mov	r0, r6
   11f10:	bl	11838 <textdomain@plt>
   11f14:	movw	r0, #12024	; 0x2ef8
   11f18:	movt	r0, #1
   11f1c:	bl	19afc <lchmod@@Base+0x384c>
   11f20:	movw	r5, #40342	; 0x9d96
   11f24:	movw	r6, #41056	; 0xa060
   11f28:	movw	r9, #45536	; 0xb1e0
   11f2c:	mov	r7, #0
   11f30:	mov	r8, #0
   11f34:	mov	sl, #0
   11f38:	mov	r0, #0
   11f3c:	movt	r5, #1
   11f40:	movt	r6, #1
   11f44:	movt	r9, #2
   11f48:	b	11f50 <__assert_fail@plt+0x400>
   11f4c:	ldr	r0, [r9]
   11f50:	str	r0, [sp, #12]
   11f54:	b	11ff8 <__assert_fail@plt+0x4a8>
   11f58:	bl	1176c <is_selinux_enabled@plt>
   11f5c:	ldr	r1, [r9]
   11f60:	cmp	r0, #1
   11f64:	bge	11f98 <__assert_fail@plt+0x448>
   11f68:	cmp	r1, #0
   11f6c:	beq	11ff8 <__assert_fail@plt+0x4a8>
   11f70:	movw	r1, #40374	; 0x9db6
   11f74:	mov	r0, #0
   11f78:	mov	r2, #5
   11f7c:	movt	r1, #1
   11f80:	bl	11808 <dcgettext@plt>
   11f84:	mov	r2, r0
   11f88:	mov	r0, #0
   11f8c:	mov	r1, #0
   11f90:	bl	118c8 <error@plt>
   11f94:	b	11ff8 <__assert_fail@plt+0x4a8>
   11f98:	cmp	r1, #0
   11f9c:	bne	11ff4 <__assert_fail@plt+0x4a4>
   11fa0:	mov	r0, #0
   11fa4:	mov	r1, #0
   11fa8:	mov	r2, #0
   11fac:	bl	11970 <selabel_open@plt>
   11fb0:	mov	sl, r0
   11fb4:	cmp	r0, #0
   11fb8:	bne	11ff8 <__assert_fail@plt+0x4a8>
   11fbc:	bl	11994 <__errno_location@plt>
   11fc0:	ldr	r0, [r0]
   11fc4:	movw	r1, #40346	; 0x9d9a
   11fc8:	mov	r2, #5
   11fcc:	mov	sl, #0
   11fd0:	movt	r1, #1
   11fd4:	str	r0, [sp, #8]
   11fd8:	mov	r0, #0
   11fdc:	bl	11808 <dcgettext@plt>
   11fe0:	ldr	r1, [sp, #8]
   11fe4:	mov	r2, r0
   11fe8:	mov	r0, #0
   11fec:	bl	118c8 <error@plt>
   11ff0:	b	11ff8 <__assert_fail@plt+0x4a8>
   11ff4:	mov	r8, r1
   11ff8:	ldr	r0, [sp, #16]
   11ffc:	mov	r1, r4
   12000:	mov	r2, r5
   12004:	mov	r3, r6
   12008:	str	r7, [sp]
   1200c:	bl	11928 <getopt_long@plt>
   12010:	cmp	r0, #89	; 0x59
   12014:	ble	1202c <__assert_fail@plt+0x4dc>
   12018:	cmp	r0, #90	; 0x5a
   1201c:	beq	11f58 <__assert_fail@plt+0x408>
   12020:	cmp	r0, #109	; 0x6d
   12024:	beq	11f4c <__assert_fail@plt+0x3fc>
   12028:	b	12248 <__assert_fail@plt+0x6f8>
   1202c:	cmn	r0, #1
   12030:	bne	121c4 <__assert_fail@plt+0x674>
   12034:	movw	r9, #45520	; 0xb1d0
   12038:	ldr	r1, [sp, #16]
   1203c:	movt	r9, #2
   12040:	ldr	r0, [r9]
   12044:	cmp	r0, r1
   12048:	beq	12224 <__assert_fail@plt+0x6d4>
   1204c:	cmp	r8, #0
   12050:	beq	12064 <__assert_fail@plt+0x514>
   12054:	mov	r0, r8
   12058:	bl	11988 <setfscreatecon@plt>
   1205c:	cmn	r0, #1
   12060:	ble	12250 <__assert_fail@plt+0x700>
   12064:	ldr	r0, [sp, #12]
   12068:	cmp	r0, #0
   1206c:	beq	120cc <__assert_fail@plt+0x57c>
   12070:	bl	163cc <lchmod@@Base+0x11c>
   12074:	cmp	r0, #0
   12078:	beq	1228c <__assert_fail@plt+0x73c>
   1207c:	mov	r8, r0
   12080:	mov	r0, #0
   12084:	mov	r5, #0
   12088:	bl	11aa8 <umask@plt>
   1208c:	mov	r6, r0
   12090:	bl	11aa8 <umask@plt>
   12094:	movw	r0, #438	; 0x1b6
   12098:	mov	r1, #0
   1209c:	mov	r2, r6
   120a0:	mov	r3, r8
   120a4:	str	r5, [sp]
   120a8:	bl	1676c <lchmod@@Base+0x4bc>
   120ac:	mov	r6, r0
   120b0:	mov	r0, r8
   120b4:	bl	1319c <__assert_fail@plt+0x164c>
   120b8:	cmp	r6, #512	; 0x200
   120bc:	bcc	120d0 <__assert_fail@plt+0x580>
   120c0:	movw	r1, #40556	; 0x9e6c
   120c4:	movt	r1, #1
   120c8:	b	12294 <__assert_fail@plt+0x744>
   120cc:	movw	r6, #438	; 0x1b6
   120d0:	ldr	r0, [r9]
   120d4:	ldr	r1, [sp, #16]
   120d8:	mov	r8, #0
   120dc:	cmp	r0, r1
   120e0:	bge	121b8 <__assert_fail@plt+0x668>
   120e4:	mov	r8, #0
   120e8:	b	12128 <__assert_fail@plt+0x5d8>
   120ec:	ldr	r0, [sp, #12]
   120f0:	cmp	r0, #0
   120f4:	beq	121a0 <__assert_fail@plt+0x650>
   120f8:	ldr	r0, [r9]
   120fc:	mov	r1, r6
   12100:	ldr	r0, [r4, r0, lsl #2]
   12104:	bl	162b0 <lchmod@@Base>
   12108:	cmp	r0, #0
   1210c:	beq	121a0 <__assert_fail@plt+0x650>
   12110:	bl	11994 <__errno_location@plt>
   12114:	ldr	r5, [r0]
   12118:	movw	r1, #40622	; 0x9eae
   1211c:	mov	r0, #0
   12120:	movt	r1, #1
   12124:	b	1216c <__assert_fail@plt+0x61c>
   12128:	cmp	sl, #0
   1212c:	beq	12144 <__assert_fail@plt+0x5f4>
   12130:	ldr	r1, [r4, r0, lsl #2]
   12134:	mov	r0, sl
   12138:	mov	r2, #4096	; 0x1000
   1213c:	bl	122b0 <__assert_fail@plt+0x760>
   12140:	ldr	r0, [r9]
   12144:	ldr	r0, [r4, r0, lsl #2]
   12148:	mov	r1, r6
   1214c:	bl	11b14 <mkfifo@plt>
   12150:	cmp	r0, #0
   12154:	beq	120ec <__assert_fail@plt+0x59c>
   12158:	bl	11994 <__errno_location@plt>
   1215c:	ldr	r5, [r0]
   12160:	movw	r1, #40600	; 0x9e98
   12164:	mov	r0, #0
   12168:	movt	r1, #1
   1216c:	mov	r2, #5
   12170:	bl	11808 <dcgettext@plt>
   12174:	mov	r7, r0
   12178:	ldr	r0, [r9]
   1217c:	ldr	r1, [r4, r0, lsl #2]
   12180:	mov	r0, #4
   12184:	bl	17fe0 <lchmod@@Base+0x1d30>
   12188:	mov	r3, r0
   1218c:	mov	r0, #0
   12190:	mov	r1, r5
   12194:	mov	r2, r7
   12198:	bl	118c8 <error@plt>
   1219c:	mov	r8, #1
   121a0:	ldr	r0, [r9]
   121a4:	ldr	r1, [sp, #16]
   121a8:	add	r0, r0, #1
   121ac:	cmp	r0, r1
   121b0:	str	r0, [r9]
   121b4:	blt	12128 <__assert_fail@plt+0x5d8>
   121b8:	mov	r0, r8
   121bc:	sub	sp, fp, #28
   121c0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   121c4:	cmn	r0, #3
   121c8:	bne	12214 <__assert_fail@plt+0x6c4>
   121cc:	movw	r0, #45440	; 0xb180
   121d0:	movw	r2, #40461	; 0x9e0d
   121d4:	mov	r1, #0
   121d8:	movt	r0, #2
   121dc:	movt	r2, #1
   121e0:	str	r1, [sp, #4]
   121e4:	movw	r1, #40311	; 0x9d77
   121e8:	ldr	r3, [r0]
   121ec:	movw	r0, #45532	; 0xb1dc
   121f0:	str	r2, [sp]
   121f4:	movw	r2, #40447	; 0x9dff
   121f8:	movt	r1, #1
   121fc:	movt	r0, #2
   12200:	movt	r2, #1
   12204:	ldr	r0, [r0]
   12208:	bl	18a7c <lchmod@@Base+0x27cc>
   1220c:	mov	r0, #0
   12210:	bl	1194c <exit@plt>
   12214:	cmn	r0, #2
   12218:	bne	12248 <__assert_fail@plt+0x6f8>
   1221c:	mov	r0, #0
   12220:	bl	11c50 <__assert_fail@plt+0x100>
   12224:	movw	r1, #40477	; 0x9e1d
   12228:	mov	r0, #0
   1222c:	mov	r2, #5
   12230:	movt	r1, #1
   12234:	bl	11808 <dcgettext@plt>
   12238:	mov	r2, r0
   1223c:	mov	r0, #0
   12240:	mov	r1, #0
   12244:	bl	118c8 <error@plt>
   12248:	mov	r0, #1
   1224c:	bl	11c50 <__assert_fail@plt+0x100>
   12250:	bl	11994 <__errno_location@plt>
   12254:	ldr	r4, [r0]
   12258:	movw	r1, #40493	; 0x9e2d
   1225c:	mov	r0, #0
   12260:	mov	r2, #5
   12264:	movt	r1, #1
   12268:	bl	11808 <dcgettext@plt>
   1226c:	mov	r5, r0
   12270:	mov	r0, r8
   12274:	bl	18318 <lchmod@@Base+0x2068>
   12278:	mov	r3, r0
   1227c:	mov	r0, #1
   12280:	mov	r1, r4
   12284:	mov	r2, r5
   12288:	bl	118c8 <error@plt>
   1228c:	movw	r1, #40543	; 0x9e5f
   12290:	movt	r1, #1
   12294:	mov	r0, #0
   12298:	mov	r2, #5
   1229c:	bl	11808 <dcgettext@plt>
   122a0:	mov	r2, r0
   122a4:	mov	r0, #1
   122a8:	mov	r1, #0
   122ac:	bl	118c8 <error@plt>
   122b0:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   122b4:	add	fp, sp, #24
   122b8:	sub	sp, sp, #16
   122bc:	mov	r4, #0
   122c0:	mov	r7, r0
   122c4:	mov	r5, r2
   122c8:	mov	r6, r1
   122cc:	str	r4, [sp, #4]
   122d0:	str	r4, [sp]
   122d4:	ldrb	r0, [r1]
   122d8:	cmp	r0, #47	; 0x2f
   122dc:	beq	122fc <__assert_fail@plt+0x7ac>
   122e0:	mov	r0, r6
   122e4:	mov	r1, #2
   122e8:	bl	1280c <__assert_fail@plt+0xcbc>
   122ec:	mov	r4, r0
   122f0:	cmp	r0, #0
   122f4:	mov	r6, r0
   122f8:	beq	1244c <__assert_fail@plt+0x8fc>
   122fc:	add	r1, sp, #4
   12300:	mov	r0, r7
   12304:	mov	r2, r6
   12308:	mov	r3, r5
   1230c:	bl	1173c <selabel_lookup@plt>
   12310:	cmn	r0, #1
   12314:	ble	12424 <__assert_fail@plt+0x8d4>
   12318:	mov	r0, #0
   1231c:	str	r0, [sp, #12]
   12320:	str	r0, [sp, #8]
   12324:	mov	r0, r6
   12328:	bl	12fe0 <__assert_fail@plt+0x1490>
   1232c:	mov	r6, r0
   12330:	add	r0, sp, #12
   12334:	bl	11898 <getcon@plt>
   12338:	mov	r9, #1
   1233c:	cmp	r0, #0
   12340:	blt	12380 <__assert_fail@plt+0x830>
   12344:	add	r1, sp, #8
   12348:	mov	r0, r6
   1234c:	bl	185c0 <lchmod@@Base+0x2310>
   12350:	cmp	r0, #0
   12354:	blt	12380 <__assert_fail@plt+0x830>
   12358:	mov	r0, r5
   1235c:	bl	11b20 <mode_to_security_class@plt>
   12360:	cmp	r0, #0
   12364:	beq	12380 <__assert_fail@plt+0x830>
   12368:	mov	r2, r0
   1236c:	ldr	r1, [sp, #8]
   12370:	ldr	r0, [sp, #12]
   12374:	mov	r3, sp
   12378:	bl	11a54 <security_compute_create@plt>
   1237c:	lsr	r9, r0, #31
   12380:	bl	11994 <__errno_location@plt>
   12384:	ldr	r7, [r0]
   12388:	mov	r5, r0
   1238c:	mov	r0, r6
   12390:	bl	1319c <__assert_fail@plt+0x164c>
   12394:	ldr	r0, [sp, #12]
   12398:	bl	11a84 <freecon@plt>
   1239c:	ldr	r0, [sp, #8]
   123a0:	bl	11a84 <freecon@plt>
   123a4:	mvn	r8, #0
   123a8:	cmp	r9, #0
   123ac:	str	r7, [r5]
   123b0:	bne	1241c <__assert_fail@plt+0x8cc>
   123b4:	ldr	r0, [sp, #4]
   123b8:	bl	117f0 <context_new@plt>
   123bc:	cmp	r0, #0
   123c0:	beq	1241c <__assert_fail@plt+0x8cc>
   123c4:	mov	r6, r0
   123c8:	ldr	r0, [sp]
   123cc:	bl	117f0 <context_new@plt>
   123d0:	cmp	r0, #0
   123d4:	beq	12468 <__assert_fail@plt+0x918>
   123d8:	mov	r9, r0
   123dc:	mov	r0, r6
   123e0:	bl	11784 <context_type_get@plt>
   123e4:	cmp	r0, #0
   123e8:	beq	1246c <__assert_fail@plt+0x91c>
   123ec:	mov	r1, r0
   123f0:	mov	r0, r9
   123f4:	bl	11814 <context_type_set@plt>
   123f8:	cmp	r0, #0
   123fc:	bne	1246c <__assert_fail@plt+0x91c>
   12400:	mov	r0, r9
   12404:	bl	11ab4 <context_str@plt>
   12408:	cmp	r0, #0
   1240c:	beq	1246c <__assert_fail@plt+0x91c>
   12410:	bl	11988 <setfscreatecon@plt>
   12414:	mov	r8, r0
   12418:	b	1246c <__assert_fail@plt+0x91c>
   1241c:	mov	r9, #0
   12420:	b	12444 <__assert_fail@plt+0x8f4>
   12424:	bl	11994 <__errno_location@plt>
   12428:	mov	r5, r0
   1242c:	ldr	r0, [r0]
   12430:	mvn	r8, #0
   12434:	mov	r9, #0
   12438:	cmp	r0, #2
   1243c:	moveq	r0, #61	; 0x3d
   12440:	streq	r0, [r5]
   12444:	mov	r6, #0
   12448:	b	1246c <__assert_fail@plt+0x91c>
   1244c:	mov	r9, #0
   12450:	mvn	r8, #0
   12454:	bl	11994 <__errno_location@plt>
   12458:	mov	r5, r0
   1245c:	mov	r6, #0
   12460:	mov	r4, #0
   12464:	b	1246c <__assert_fail@plt+0x91c>
   12468:	mov	r9, #0
   1246c:	ldr	r7, [r5]
   12470:	mov	r0, r6
   12474:	bl	1191c <context_free@plt>
   12478:	mov	r0, r9
   1247c:	bl	1191c <context_free@plt>
   12480:	ldr	r0, [sp, #4]
   12484:	bl	11a84 <freecon@plt>
   12488:	ldr	r0, [sp]
   1248c:	bl	11a84 <freecon@plt>
   12490:	mov	r0, r4
   12494:	bl	1319c <__assert_fail@plt+0x164c>
   12498:	str	r7, [r5]
   1249c:	mov	r0, r8
   124a0:	sub	sp, fp, #24
   124a4:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   124a8:	push	{r4, r5, r6, r7, fp, lr}
   124ac:	add	fp, sp, #16
   124b0:	sub	sp, sp, #8
   124b4:	mov	r5, r0
   124b8:	ldrb	r0, [r1]
   124bc:	mov	r6, r2
   124c0:	mov	r4, #0
   124c4:	cmp	r0, #47	; 0x2f
   124c8:	beq	124e8 <__assert_fail@plt+0x998>
   124cc:	mov	r0, r1
   124d0:	mov	r1, #2
   124d4:	bl	1280c <__assert_fail@plt+0xcbc>
   124d8:	mov	r4, r0
   124dc:	cmp	r0, #0
   124e0:	mov	r1, r0
   124e4:	beq	125b4 <__assert_fail@plt+0xa64>
   124e8:	cmp	r6, #0
   124ec:	beq	12580 <__assert_fail@plt+0xa30>
   124f0:	mov	r7, #0
   124f4:	mov	r0, sp
   124f8:	mov	r2, #0
   124fc:	stm	sp, {r1, r7}
   12500:	mov	r1, #16
   12504:	bl	19018 <lchmod@@Base+0x2d68>
   12508:	mov	r6, r0
   1250c:	bl	13a7c <__assert_fail@plt+0x1f2c>
   12510:	cmp	r0, #0
   12514:	beq	12548 <__assert_fail@plt+0x9f8>
   12518:	mov	r7, #0
   1251c:	ldr	r1, [r6, #24]
   12520:	mov	r0, r5
   12524:	bl	125c0 <__assert_fail@plt+0xa70>
   12528:	cmn	r0, #1
   1252c:	bgt	12538 <__assert_fail@plt+0x9e8>
   12530:	bl	11994 <__errno_location@plt>
   12534:	ldr	r7, [r0]
   12538:	mov	r0, r6
   1253c:	bl	13a7c <__assert_fail@plt+0x1f2c>
   12540:	cmp	r0, #0
   12544:	bne	1251c <__assert_fail@plt+0x9cc>
   12548:	bl	11994 <__errno_location@plt>
   1254c:	mov	r5, r0
   12550:	ldr	r0, [r0]
   12554:	cmp	r0, #0
   12558:	movne	r7, r0
   1255c:	mov	r0, r6
   12560:	bl	138fc <__assert_fail@plt+0x1dac>
   12564:	cmp	r0, #0
   12568:	mov	r0, r4
   1256c:	ldrne	r7, [r5]
   12570:	bl	1319c <__assert_fail@plt+0x164c>
   12574:	clz	r0, r7
   12578:	lsr	r0, r0, #5
   1257c:	b	125b8 <__assert_fail@plt+0xa68>
   12580:	mov	r0, r5
   12584:	bl	125c0 <__assert_fail@plt+0xa70>
   12588:	mov	r5, r0
   1258c:	bl	11994 <__errno_location@plt>
   12590:	ldr	r7, [r0]
   12594:	mov	r6, r0
   12598:	mov	r0, r4
   1259c:	bl	1319c <__assert_fail@plt+0x164c>
   125a0:	add	r0, r5, #1
   125a4:	cmn	r5, #1
   125a8:	str	r7, [r6]
   125ac:	movwne	r0, #1
   125b0:	b	125b8 <__assert_fail@plt+0xa68>
   125b4:	mov	r0, #0
   125b8:	sub	sp, fp, #16
   125bc:	pop	{r4, r5, r6, r7, fp, pc}
   125c0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   125c4:	add	fp, sp, #28
   125c8:	sub	sp, sp, #116	; 0x74
   125cc:	mov	r6, r0
   125d0:	mov	r0, #0
   125d4:	mov	r7, r1
   125d8:	cmp	r6, #0
   125dc:	str	r0, [sp, #4]
   125e0:	str	r0, [sp]
   125e4:	beq	12634 <__assert_fail@plt+0xae4>
   125e8:	mov	r0, r7
   125ec:	mov	r1, #32768	; 0x8000
   125f0:	bl	118d4 <open64@plt>
   125f4:	mov	sl, r0
   125f8:	cmn	r0, #1
   125fc:	beq	12670 <__assert_fail@plt+0xb20>
   12600:	add	r1, sp, #8
   12604:	mov	r0, sl
   12608:	bl	19b24 <lchmod@@Base+0x3874>
   1260c:	mov	r5, #1
   12610:	cmn	r0, #1
   12614:	bgt	126a4 <__assert_fail@plt+0xb54>
   12618:	bl	11994 <__errno_location@plt>
   1261c:	ldr	r5, [r0]
   12620:	mov	r4, r0
   12624:	mov	r8, #0
   12628:	mvn	r9, #0
   1262c:	mov	r6, #0
   12630:	b	127b4 <__assert_fail@plt+0xc64>
   12634:	mov	r0, sp
   12638:	bl	11a9c <getfscreatecon@plt>
   1263c:	mvn	r9, #0
   12640:	cmp	r0, #0
   12644:	blt	127f0 <__assert_fail@plt+0xca0>
   12648:	ldr	r1, [sp]
   1264c:	cmp	r1, #0
   12650:	beq	12710 <__assert_fail@plt+0xbc0>
   12654:	mov	r0, r7
   12658:	bl	1179c <lsetfilecon@plt>
   1265c:	mov	r9, r0
   12660:	bl	11994 <__errno_location@plt>
   12664:	ldr	r5, [r0]
   12668:	mov	r4, r0
   1266c:	b	127e4 <__assert_fail@plt+0xc94>
   12670:	bl	11994 <__errno_location@plt>
   12674:	ldr	r5, [r0]
   12678:	mov	r4, r0
   1267c:	mov	r8, #0
   12680:	mvn	r9, #0
   12684:	cmp	r5, #40	; 0x28
   12688:	bne	127c8 <__assert_fail@plt+0xc78>
   1268c:	add	r1, sp, #8
   12690:	mov	r0, r7
   12694:	bl	19b34 <lchmod@@Base+0x3884>
   12698:	mov	r5, #0
   1269c:	cmn	r0, #1
   126a0:	ble	127c0 <__assert_fail@plt+0xc70>
   126a4:	ldr	r3, [sp, #24]
   126a8:	add	r1, sp, #4
   126ac:	mov	r0, r6
   126b0:	mov	r2, r7
   126b4:	bl	1173c <selabel_lookup@plt>
   126b8:	cmn	r0, #1
   126bc:	ble	126f0 <__assert_fail@plt+0xba0>
   126c0:	ldr	r0, [sp, #4]
   126c4:	bl	117f0 <context_new@plt>
   126c8:	mvn	r9, #0
   126cc:	cmp	r0, #0
   126d0:	beq	12720 <__assert_fail@plt+0xbd0>
   126d4:	mov	r8, r0
   126d8:	mov	r1, sp
   126dc:	cmp	r5, #0
   126e0:	beq	1272c <__assert_fail@plt+0xbdc>
   126e4:	mov	r0, sl
   126e8:	bl	18668 <lchmod@@Base+0x23b8>
   126ec:	b	12734 <__assert_fail@plt+0xbe4>
   126f0:	bl	11994 <__errno_location@plt>
   126f4:	ldr	r1, [r0]
   126f8:	mvn	r9, #0
   126fc:	mov	r6, #0
   12700:	cmp	r1, #2
   12704:	moveq	r1, #61	; 0x3d
   12708:	streq	r1, [r0]
   1270c:	b	12724 <__assert_fail@plt+0xbd4>
   12710:	bl	11994 <__errno_location@plt>
   12714:	mov	r1, #61	; 0x3d
   12718:	str	r1, [r0]
   1271c:	b	127f0 <__assert_fail@plt+0xca0>
   12720:	mov	r6, #0
   12724:	mov	r8, #0
   12728:	b	127a0 <__assert_fail@plt+0xc50>
   1272c:	mov	r0, r7
   12730:	bl	1864c <lchmod@@Base+0x239c>
   12734:	cmp	r0, #0
   12738:	blt	1279c <__assert_fail@plt+0xc4c>
   1273c:	ldr	r0, [sp]
   12740:	bl	117f0 <context_new@plt>
   12744:	cmp	r0, #0
   12748:	beq	1279c <__assert_fail@plt+0xc4c>
   1274c:	mov	r6, r0
   12750:	mov	r0, r8
   12754:	bl	11784 <context_type_get@plt>
   12758:	cmp	r0, #0
   1275c:	beq	127a0 <__assert_fail@plt+0xc50>
   12760:	mov	r1, r0
   12764:	mov	r0, r6
   12768:	bl	11814 <context_type_set@plt>
   1276c:	cmp	r0, #0
   12770:	bne	127a0 <__assert_fail@plt+0xc50>
   12774:	mov	r0, r6
   12778:	bl	11ab4 <context_str@plt>
   1277c:	cmp	r0, #0
   12780:	beq	127a0 <__assert_fail@plt+0xc50>
   12784:	mov	r1, r0
   12788:	cmp	r5, #0
   1278c:	beq	127fc <__assert_fail@plt+0xcac>
   12790:	mov	r0, sl
   12794:	bl	11a18 <fsetfilecon@plt>
   12798:	b	12804 <__assert_fail@plt+0xcb4>
   1279c:	mov	r6, #0
   127a0:	bl	11994 <__errno_location@plt>
   127a4:	ldr	r5, [r0]
   127a8:	mov	r4, r0
   127ac:	cmn	sl, #1
   127b0:	beq	127cc <__assert_fail@plt+0xc7c>
   127b4:	mov	r0, sl
   127b8:	bl	11afc <close@plt>
   127bc:	b	127cc <__assert_fail@plt+0xc7c>
   127c0:	ldr	r5, [r4]
   127c4:	mov	r8, #0
   127c8:	mov	r6, #0
   127cc:	mov	r0, r8
   127d0:	bl	1191c <context_free@plt>
   127d4:	mov	r0, r6
   127d8:	bl	1191c <context_free@plt>
   127dc:	ldr	r0, [sp, #4]
   127e0:	bl	11a84 <freecon@plt>
   127e4:	ldr	r0, [sp]
   127e8:	bl	11a84 <freecon@plt>
   127ec:	str	r5, [r4]
   127f0:	mov	r0, r9
   127f4:	sub	sp, fp, #28
   127f8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   127fc:	mov	r0, r7
   12800:	bl	1179c <lsetfilecon@plt>
   12804:	mov	r9, r0
   12808:	b	127a0 <__assert_fail@plt+0xc50>
   1280c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12810:	add	fp, sp, #28
   12814:	sub	sp, sp, #180	; 0xb4
   12818:	sub	sp, sp, #3072	; 0xc00
   1281c:	mov	r8, r0
   12820:	and	r7, r1, #3
   12824:	sub	r0, r1, #1
   12828:	tst	r0, r7
   1282c:	beq	1284c <__assert_fail@plt+0xcfc>
   12830:	bl	11994 <__errno_location@plt>
   12834:	mov	r1, #22
   12838:	mov	r4, #0
   1283c:	str	r1, [r0]
   12840:	mov	r0, r4
   12844:	sub	sp, fp, #28
   12848:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1284c:	cmp	r8, #0
   12850:	beq	12830 <__assert_fail@plt+0xce0>
   12854:	ldrb	r0, [r8]
   12858:	cmp	r0, #0
   1285c:	beq	128d4 <__assert_fail@plt+0xd84>
   12860:	sub	lr, fp, #1024	; 0x400
   12864:	mov	r4, r1
   12868:	mov	r1, #1024	; 0x400
   1286c:	cmp	r0, #47	; 0x2f
   12870:	sub	r2, lr, #40	; 0x28
   12874:	str	r1, [fp, #-1060]	; 0xfffffbdc
   12878:	add	r2, r2, #8
   1287c:	str	r2, [sp, #12]
   12880:	str	r2, [fp, #-1064]	; 0xfffffbd8
   12884:	add	r2, sp, #1184	; 0x4a0
   12888:	add	r2, r2, #8
   1288c:	str	r2, [sp, #1184]	; 0x4a0
   12890:	str	r2, [sp, #16]
   12894:	add	r2, sp, #48	; 0x30
   12898:	str	r1, [sp, #1188]	; 0x4a4
   1289c:	add	r5, r2, #8
   128a0:	mov	r0, r5
   128a4:	str	r5, [sp, #48]	; 0x30
   128a8:	str	r1, [sp, #52]	; 0x34
   128ac:	str	r5, [sp, #8]
   128b0:	bne	128e0 <__assert_fail@plt+0xd90>
   128b4:	mov	r1, r8
   128b8:	mov	r2, #0
   128bc:	mov	r3, #1024	; 0x400
   128c0:	bl	11b44 <__mempcpy_chk@plt>
   128c4:	mov	r6, r0
   128c8:	mov	r0, #47	; 0x2f
   128cc:	strb	r0, [r6], #1
   128d0:	b	12900 <__assert_fail@plt+0xdb0>
   128d4:	bl	11994 <__errno_location@plt>
   128d8:	mov	r1, #2
   128dc:	b	12838 <__assert_fail@plt+0xce8>
   128e0:	mov	r1, #1024	; 0x400
   128e4:	bl	11940 <getcwd@plt>
   128e8:	cmp	r0, #0
   128ec:	beq	12dfc <__assert_fail@plt+0x12ac>
   128f0:	mov	r0, r5
   128f4:	mov	r1, #0
   128f8:	bl	11844 <rawmemchr@plt>
   128fc:	mov	r6, r0
   12900:	ldrb	r0, [r8]
   12904:	cmp	r0, #0
   12908:	beq	12dc0 <__assert_fail@plt+0x1270>
   1290c:	and	r1, r4, #4
   12910:	add	r9, sp, #48	; 0x30
   12914:	str	r7, [sp, #32]
   12918:	str	r1, [sp, #40]	; 0x28
   1291c:	mov	r1, #0
   12920:	str	r1, [sp, #24]
   12924:	mov	r1, #0
   12928:	str	r1, [sp, #36]	; 0x24
   1292c:	mov	r1, #0
   12930:	str	r1, [sp, #20]
   12934:	b	12d68 <__assert_fail@plt+0x1218>
   12938:	uxtb	r0, r0
   1293c:	cmp	r0, #46	; 0x2e
   12940:	ldrbeq	r0, [r8, #1]
   12944:	cmpeq	r0, #46	; 0x2e
   12948:	bne	12988 <__assert_fail@plt+0xe38>
   1294c:	add	r0, r5, #1
   12950:	cmp	r6, r0
   12954:	bls	12a7c <__assert_fail@plt+0xf2c>
   12958:	sub	r0, r6, #1
   1295c:	mov	r6, r0
   12960:	cmp	r0, r5
   12964:	bls	12a7c <__assert_fail@plt+0xf2c>
   12968:	mov	r0, r6
   1296c:	ldrb	r1, [r0, #-1]!
   12970:	cmp	r1, #47	; 0x2f
   12974:	bne	1295c <__assert_fail@plt+0xe0c>
   12978:	b	12a7c <__assert_fail@plt+0xf2c>
   1297c:	uxtb	r0, r0
   12980:	cmp	r0, #46	; 0x2e
   12984:	beq	12a7c <__assert_fail@plt+0xf2c>
   12988:	ldrb	r0, [r6, #-1]
   1298c:	add	r4, r2, #2
   12990:	str	r2, [sp, #44]	; 0x2c
   12994:	cmp	r0, #47	; 0x2f
   12998:	movne	r0, #47	; 0x2f
   1299c:	strbne	r0, [r6], #1
   129a0:	ldr	r0, [sp, #52]	; 0x34
   129a4:	add	r0, r5, r0
   129a8:	sub	r0, r0, r6
   129ac:	cmp	r0, r4
   129b0:	bcs	129e8 <__assert_fail@plt+0xe98>
   129b4:	mov	r0, r9
   129b8:	bl	18520 <lchmod@@Base+0x2270>
   129bc:	cmp	r0, #0
   129c0:	beq	12ec0 <__assert_fail@plt+0x1370>
   129c4:	sub	r0, r6, r5
   129c8:	ldr	r5, [sp, #48]	; 0x30
   129cc:	ldr	r1, [sp, #52]	; 0x34
   129d0:	add	r6, r5, r0
   129d4:	add	r0, r5, r1
   129d8:	sub	r0, r0, r6
   129dc:	cmp	r0, r4
   129e0:	bcc	129b4 <__assert_fail@plt+0xe64>
   129e4:	ldr	r2, [sp, #44]	; 0x2c
   129e8:	mov	r0, r6
   129ec:	mov	r1, r8
   129f0:	mvn	r3, #0
   129f4:	bl	11b44 <__mempcpy_chk@plt>
   129f8:	mov	r6, r0
   129fc:	mov	r0, #0
   12a00:	strb	r0, [r6]
   12a04:	ldr	r0, [sp, #40]	; 0x28
   12a08:	cmp	r0, #0
   12a0c:	bne	12a70 <__assert_fail@plt+0xf20>
   12a10:	ldr	r0, [sp, #1188]	; 0x4a4
   12a14:	ldr	r7, [sp, #1184]	; 0x4a0
   12a18:	sub	r9, r0, #1
   12a1c:	mov	r0, r5
   12a20:	mov	r1, r7
   12a24:	mov	r2, r9
   12a28:	bl	11874 <readlink@plt>
   12a2c:	cmp	r0, r9
   12a30:	blt	12a48 <__assert_fail@plt+0xef8>
   12a34:	add	r0, sp, #1184	; 0x4a0
   12a38:	bl	184b4 <lchmod@@Base+0x2204>
   12a3c:	cmp	r0, #0
   12a40:	bne	12a10 <__assert_fail@plt+0xec0>
   12a44:	b	12ec0 <__assert_fail@plt+0x1370>
   12a48:	mov	r4, r0
   12a4c:	cmp	r0, #0
   12a50:	add	r9, sp, #48	; 0x30
   12a54:	blt	12a70 <__assert_fail@plt+0xf20>
   12a58:	ldr	r0, [sp, #24]
   12a5c:	cmp	r0, #19
   12a60:	bgt	12af4 <__assert_fail@plt+0xfa4>
   12a64:	add	r0, r0, #1
   12a68:	str	r0, [sp, #24]
   12a6c:	b	12c58 <__assert_fail@plt+0x1108>
   12a70:	ldr	r7, [sp, #32]
   12a74:	cmp	r7, #2
   12a78:	bne	12a90 <__assert_fail@plt+0xf40>
   12a7c:	mov	r8, sl
   12a80:	ldrb	r0, [r8]
   12a84:	cmp	r0, #0
   12a88:	bne	12d68 <__assert_fail@plt+0x1218>
   12a8c:	b	12dc8 <__assert_fail@plt+0x1278>
   12a90:	ldrb	r0, [sl]
   12a94:	cmp	r0, #47	; 0x2f
   12a98:	bne	12bc0 <__assert_fail@plt+0x1070>
   12a9c:	mov	r2, sl
   12aa0:	mov	r1, r2
   12aa4:	ldrb	r3, [r2, #1]!
   12aa8:	cmp	r3, #47	; 0x2f
   12aac:	beq	12aa0 <__assert_fail@plt+0xf50>
   12ab0:	cmp	r3, #46	; 0x2e
   12ab4:	bne	12bb8 <__assert_fail@plt+0x1068>
   12ab8:	add	r2, r1, #2
   12abc:	ldrb	r3, [r2]
   12ac0:	cmp	r3, #47	; 0x2f
   12ac4:	beq	12aa0 <__assert_fail@plt+0xf50>
   12ac8:	cmp	r3, #0
   12acc:	beq	12ae8 <__assert_fail@plt+0xf98>
   12ad0:	cmp	r3, #46	; 0x2e
   12ad4:	bne	12bc0 <__assert_fail@plt+0x1070>
   12ad8:	ldrb	r1, [r1, #3]
   12adc:	cmp	r1, #47	; 0x2f
   12ae0:	cmpne	r1, #0
   12ae4:	bne	12bc0 <__assert_fail@plt+0x1070>
   12ae8:	mov	r0, #47	; 0x2f
   12aec:	strh	r0, [r6]
   12af0:	b	12bd4 <__assert_fail@plt+0x1084>
   12af4:	ldrb	r0, [r8]
   12af8:	cmp	r0, #0
   12afc:	beq	12c58 <__assert_fail@plt+0x1108>
   12b00:	ldr	r9, [sp, #44]	; 0x2c
   12b04:	mov	r0, #0
   12b08:	movw	r1, #41227	; 0xa10b
   12b0c:	add	lr, sp, #1024	; 0x400
   12b10:	movt	r1, #1
   12b14:	strb	r0, [r6, -r9]
   12b18:	ldrb	r0, [r5]
   12b1c:	cmp	r0, #0
   12b20:	mov	r0, r5
   12b24:	moveq	r0, r1
   12b28:	add	r1, lr, #56	; 0x38
   12b2c:	bl	19b14 <lchmod@@Base+0x3864>
   12b30:	cmp	r0, #0
   12b34:	bne	12ed0 <__assert_fail@plt+0x1380>
   12b38:	rsb	r0, r9, #0
   12b3c:	ldr	r9, [sp, #20]
   12b40:	ldrb	r1, [r8]
   12b44:	cmp	r9, #0
   12b48:	strb	r1, [r6, r0]
   12b4c:	bne	12b84 <__assert_fail@plt+0x1034>
   12b50:	movw	r0, #25008	; 0x61b0
   12b54:	movw	r2, #24864	; 0x6120
   12b58:	movw	r3, #24920	; 0x6158
   12b5c:	mov	r1, #0
   12b60:	movt	r0, #1
   12b64:	movt	r2, #1
   12b68:	movt	r3, #1
   12b6c:	str	r0, [sp]
   12b70:	mov	r0, #7
   12b74:	bl	15648 <__assert_fail@plt+0x3af8>
   12b78:	mov	r9, r0
   12b7c:	cmp	r0, #0
   12b80:	beq	12ec0 <__assert_fail@plt+0x1370>
   12b84:	add	lr, sp, #1024	; 0x400
   12b88:	mov	r0, r9
   12b8c:	mov	r1, r8
   12b90:	add	r2, lr, #56	; 0x38
   12b94:	bl	13150 <__assert_fail@plt+0x1600>
   12b98:	cmp	r0, #0
   12b9c:	str	r9, [sp, #20]
   12ba0:	beq	12c44 <__assert_fail@plt+0x10f4>
   12ba4:	ldr	r7, [sp, #32]
   12ba8:	cmp	r7, #2
   12bac:	bne	12ec4 <__assert_fail@plt+0x1374>
   12bb0:	mov	r8, sl
   12bb4:	b	12d24 <__assert_fail@plt+0x11d4>
   12bb8:	cmp	r3, #0
   12bbc:	beq	12ae8 <__assert_fail@plt+0xf98>
   12bc0:	ldr	r1, [sp, #40]	; 0x28
   12bc4:	cmp	r1, #0
   12bc8:	beq	12bf4 <__assert_fail@plt+0x10a4>
   12bcc:	cmp	r0, #0
   12bd0:	bne	12a7c <__assert_fail@plt+0xf2c>
   12bd4:	mvn	r0, #99	; 0x63
   12bd8:	mov	r1, r5
   12bdc:	mov	r2, #0
   12be0:	mov	r3, #512	; 0x200
   12be4:	bl	117c0 <faccessat@plt>
   12be8:	cmp	r0, #0
   12bec:	bne	12c04 <__assert_fail@plt+0x10b4>
   12bf0:	b	12a7c <__assert_fail@plt+0xf2c>
   12bf4:	bl	11994 <__errno_location@plt>
   12bf8:	ldr	r0, [r0]
   12bfc:	cmp	r0, #22
   12c00:	beq	12a7c <__assert_fail@plt+0xf2c>
   12c04:	mov	r4, #1
   12c08:	cmp	r7, #1
   12c0c:	bne	12de8 <__assert_fail@plt+0x1298>
   12c10:	bl	11994 <__errno_location@plt>
   12c14:	ldr	r0, [r0]
   12c18:	cmp	r0, #2
   12c1c:	bne	12de8 <__assert_fail@plt+0x1298>
   12c20:	movw	r1, #42425	; 0xa5b9
   12c24:	mov	r0, sl
   12c28:	movt	r1, #1
   12c2c:	bl	11b38 <strspn@plt>
   12c30:	ldrb	r0, [sl, r0]
   12c34:	mov	r8, sl
   12c38:	cmp	r0, #0
   12c3c:	beq	12a80 <__assert_fail@plt+0xf30>
   12c40:	b	12de8 <__assert_fail@plt+0x1298>
   12c44:	add	lr, sp, #1024	; 0x400
   12c48:	mov	r0, r9
   12c4c:	mov	r1, r8
   12c50:	add	r2, lr, #56	; 0x38
   12c54:	bl	130d4 <__assert_fail@plt+0x1584>
   12c58:	mov	r0, #0
   12c5c:	strb	r0, [r7, r4]
   12c60:	ldr	r0, [sp, #36]	; 0x24
   12c64:	ldr	r8, [fp, #-1064]	; 0xfffffbd8
   12c68:	tst	r0, #1
   12c6c:	ldr	r0, [sp, #28]
   12c70:	subne	r0, sl, r8
   12c74:	str	r0, [sp, #28]
   12c78:	mov	r0, sl
   12c7c:	bl	11964 <strlen@plt>
   12c80:	adds	r9, r0, r4
   12c84:	str	r0, [sp, #44]	; 0x2c
   12c88:	bcs	12ec0 <__assert_fail@plt+0x1370>
   12c8c:	ldr	r0, [fp, #-1060]	; 0xfffffbdc
   12c90:	cmp	r0, r9
   12c94:	bhi	12cbc <__assert_fail@plt+0x116c>
   12c98:	sub	lr, fp, #1024	; 0x400
   12c9c:	sub	r0, lr, #40	; 0x28
   12ca0:	bl	18520 <lchmod@@Base+0x2270>
   12ca4:	cmp	r0, #0
   12ca8:	beq	12ec0 <__assert_fail@plt+0x1370>
   12cac:	ldr	r0, [fp, #-1060]	; 0xfffffbdc
   12cb0:	cmp	r0, r9
   12cb4:	bls	12c98 <__assert_fail@plt+0x1148>
   12cb8:	ldr	r8, [fp, #-1064]	; 0xfffffbd8
   12cbc:	ldr	r0, [sp, #36]	; 0x24
   12cc0:	ldr	r1, [sp, #44]	; 0x2c
   12cc4:	tst	r0, #1
   12cc8:	ldr	r0, [sp, #28]
   12ccc:	add	r2, r1, #1
   12cd0:	addne	sl, r8, r0
   12cd4:	add	r0, r8, r4
   12cd8:	mov	r1, sl
   12cdc:	bl	117a8 <memmove@plt>
   12ce0:	mov	r0, r8
   12ce4:	mov	r1, r7
   12ce8:	mov	r2, r4
   12cec:	bl	117d8 <memcpy@plt>
   12cf0:	ldrb	r0, [r7]
   12cf4:	cmp	r0, #47	; 0x2f
   12cf8:	bne	12d2c <__assert_fail@plt+0x11dc>
   12cfc:	mov	r0, r5
   12d00:	mov	r1, r7
   12d04:	mov	r2, #0
   12d08:	mvn	r3, #0
   12d0c:	bl	11b44 <__mempcpy_chk@plt>
   12d10:	mov	r6, r0
   12d14:	mov	r0, #47	; 0x2f
   12d18:	strb	r0, [r6], #1
   12d1c:	mov	r0, #1
   12d20:	str	r0, [sp, #36]	; 0x24
   12d24:	add	r9, sp, #48	; 0x30
   12d28:	b	12a80 <__assert_fail@plt+0xf30>
   12d2c:	add	r0, r5, #1
   12d30:	mov	r1, #1
   12d34:	add	r9, sp, #48	; 0x30
   12d38:	cmp	r6, r0
   12d3c:	str	r1, [sp, #36]	; 0x24
   12d40:	bls	12a80 <__assert_fail@plt+0xf30>
   12d44:	sub	r0, r6, #1
   12d48:	mov	r6, r0
   12d4c:	cmp	r0, r5
   12d50:	bls	12a80 <__assert_fail@plt+0xf30>
   12d54:	mov	r0, r6
   12d58:	ldrb	r1, [r0, #-1]!
   12d5c:	cmp	r1, #47	; 0x2f
   12d60:	bne	12d48 <__assert_fail@plt+0x11f8>
   12d64:	b	12a80 <__assert_fail@plt+0xf30>
   12d68:	uxtb	r1, r0
   12d6c:	cmp	r1, #47	; 0x2f
   12d70:	bne	12d80 <__assert_fail@plt+0x1230>
   12d74:	ldrb	r0, [r8, #1]!
   12d78:	cmp	r0, #47	; 0x2f
   12d7c:	beq	12d74 <__assert_fail@plt+0x1224>
   12d80:	mov	r1, r0
   12d84:	mov	sl, r8
   12d88:	b	12d90 <__assert_fail@plt+0x1240>
   12d8c:	ldrb	r1, [sl, #1]!
   12d90:	uxtb	r1, r1
   12d94:	cmp	r1, #0
   12d98:	cmpne	r1, #47	; 0x2f
   12d9c:	bne	12d8c <__assert_fail@plt+0x123c>
   12da0:	sub	r2, sl, r8
   12da4:	cmp	r2, #1
   12da8:	beq	1297c <__assert_fail@plt+0xe2c>
   12dac:	cmp	r2, #2
   12db0:	beq	12938 <__assert_fail@plt+0xde8>
   12db4:	cmp	r2, #0
   12db8:	bne	12988 <__assert_fail@plt+0xe38>
   12dbc:	b	12dc8 <__assert_fail@plt+0x1278>
   12dc0:	mov	r0, #0
   12dc4:	str	r0, [sp, #20]
   12dc8:	add	r0, r5, #1
   12dcc:	cmp	r6, r0
   12dd0:	bls	12de4 <__assert_fail@plt+0x1294>
   12dd4:	mov	r0, r6
   12dd8:	ldrb	r1, [r0, #-1]!
   12ddc:	cmp	r1, #47	; 0x2f
   12de0:	moveq	r6, r0
   12de4:	mov	r4, #0
   12de8:	ldr	r0, [sp, #20]
   12dec:	cmp	r0, #0
   12df0:	beq	12e54 <__assert_fail@plt+0x1304>
   12df4:	bl	15974 <__assert_fail@plt+0x3e24>
   12df8:	b	12e54 <__assert_fail@plt+0x1304>
   12dfc:	bl	11994 <__errno_location@plt>
   12e00:	ldr	r5, [sp, #8]
   12e04:	mov	r6, r0
   12e08:	add	r9, sp, #48	; 0x30
   12e0c:	ldr	r0, [r6]
   12e10:	cmp	r0, #34	; 0x22
   12e14:	bne	12e44 <__assert_fail@plt+0x12f4>
   12e18:	mov	r0, r9
   12e1c:	bl	184b4 <lchmod@@Base+0x2204>
   12e20:	cmp	r0, #0
   12e24:	beq	12ec0 <__assert_fail@plt+0x1370>
   12e28:	ldr	r5, [sp, #48]	; 0x30
   12e2c:	ldr	r1, [sp, #52]	; 0x34
   12e30:	mov	r0, r5
   12e34:	bl	11940 <getcwd@plt>
   12e38:	cmp	r0, #0
   12e3c:	beq	12e0c <__assert_fail@plt+0x12bc>
   12e40:	b	128f0 <__assert_fail@plt+0xda0>
   12e44:	cmp	r0, #12
   12e48:	beq	12ec0 <__assert_fail@plt+0x1370>
   12e4c:	mov	r4, #1
   12e50:	mov	r6, r5
   12e54:	ldr	r0, [fp, #-1064]	; 0xfffffbd8
   12e58:	ldr	r1, [sp, #12]
   12e5c:	cmp	r0, r1
   12e60:	beq	12e68 <__assert_fail@plt+0x1318>
   12e64:	bl	1319c <__assert_fail@plt+0x164c>
   12e68:	ldr	r0, [sp, #1184]	; 0x4a0
   12e6c:	ldr	r1, [sp, #16]
   12e70:	cmp	r0, r1
   12e74:	beq	12e7c <__assert_fail@plt+0x132c>
   12e78:	bl	1319c <__assert_fail@plt+0x164c>
   12e7c:	cmp	r4, #0
   12e80:	beq	12ea0 <__assert_fail@plt+0x1350>
   12e84:	ldr	r0, [sp, #48]	; 0x30
   12e88:	ldr	r1, [sp, #8]
   12e8c:	mov	r4, #0
   12e90:	cmp	r0, r1
   12e94:	beq	12840 <__assert_fail@plt+0xcf0>
   12e98:	bl	1319c <__assert_fail@plt+0x164c>
   12e9c:	b	12840 <__assert_fail@plt+0xcf0>
   12ea0:	mov	r0, #0
   12ea4:	strb	r0, [r6], #1
   12ea8:	add	r0, sp, #48	; 0x30
   12eac:	sub	r1, r6, r5
   12eb0:	bl	18450 <lchmod@@Base+0x21a0>
   12eb4:	mov	r4, r0
   12eb8:	cmp	r0, #0
   12ebc:	bne	12840 <__assert_fail@plt+0xcf0>
   12ec0:	bl	18fd4 <lchmod@@Base+0x2d24>
   12ec4:	bl	11994 <__errno_location@plt>
   12ec8:	mov	r1, #40	; 0x28
   12ecc:	str	r1, [r0]
   12ed0:	mov	r4, #1
   12ed4:	b	12de8 <__assert_fail@plt+0x1298>
   12ed8:	movw	r1, #45544	; 0xb1e8
   12edc:	movt	r1, #2
   12ee0:	str	r0, [r1]
   12ee4:	bx	lr
   12ee8:	movw	r1, #45548	; 0xb1ec
   12eec:	movt	r1, #2
   12ef0:	strb	r0, [r1]
   12ef4:	bx	lr
   12ef8:	push	{r4, r5, r6, sl, fp, lr}
   12efc:	add	fp, sp, #16
   12f00:	sub	sp, sp, #8
   12f04:	movw	r0, #45532	; 0xb1dc
   12f08:	movt	r0, #2
   12f0c:	ldr	r0, [r0]
   12f10:	bl	191e8 <lchmod@@Base+0x2f38>
   12f14:	cmp	r0, #0
   12f18:	beq	12f40 <__assert_fail@plt+0x13f0>
   12f1c:	movw	r0, #45548	; 0xb1ec
   12f20:	movt	r0, #2
   12f24:	ldrb	r0, [r0]
   12f28:	cmp	r0, #0
   12f2c:	beq	12f60 <__assert_fail@plt+0x1410>
   12f30:	bl	11994 <__errno_location@plt>
   12f34:	ldr	r0, [r0]
   12f38:	cmp	r0, #32
   12f3c:	bne	12f60 <__assert_fail@plt+0x1410>
   12f40:	movw	r0, #45528	; 0xb1d8
   12f44:	movt	r0, #2
   12f48:	ldr	r0, [r0]
   12f4c:	bl	191e8 <lchmod@@Base+0x2f38>
   12f50:	cmp	r0, #0
   12f54:	subeq	sp, fp, #16
   12f58:	popeq	{r4, r5, r6, sl, fp, pc}
   12f5c:	b	12fd0 <__assert_fail@plt+0x1480>
   12f60:	movw	r1, #41207	; 0xa0f7
   12f64:	mov	r0, #0
   12f68:	mov	r2, #5
   12f6c:	movt	r1, #1
   12f70:	bl	11808 <dcgettext@plt>
   12f74:	mov	r4, r0
   12f78:	movw	r0, #45544	; 0xb1e8
   12f7c:	movt	r0, #2
   12f80:	ldr	r6, [r0]
   12f84:	bl	11994 <__errno_location@plt>
   12f88:	ldr	r5, [r0]
   12f8c:	cmp	r6, #0
   12f90:	bne	12fac <__assert_fail@plt+0x145c>
   12f94:	movw	r2, #41223	; 0xa107
   12f98:	mov	r0, #0
   12f9c:	mov	r1, r5
   12fa0:	mov	r3, r4
   12fa4:	movt	r2, #1
   12fa8:	b	12fcc <__assert_fail@plt+0x147c>
   12fac:	mov	r0, r6
   12fb0:	bl	180d8 <lchmod@@Base+0x1e28>
   12fb4:	movw	r2, #41219	; 0xa103
   12fb8:	mov	r3, r0
   12fbc:	str	r4, [sp]
   12fc0:	mov	r0, #0
   12fc4:	mov	r1, r5
   12fc8:	movt	r2, #1
   12fcc:	bl	118c8 <error@plt>
   12fd0:	movw	r0, #45444	; 0xb184
   12fd4:	movt	r0, #2
   12fd8:	ldr	r0, [r0]
   12fdc:	bl	117cc <_exit@plt>
   12fe0:	push	{fp, lr}
   12fe4:	mov	fp, sp
   12fe8:	bl	13040 <__assert_fail@plt+0x14f0>
   12fec:	cmp	r0, #0
   12ff0:	popne	{fp, pc}
   12ff4:	bl	18fd4 <lchmod@@Base+0x2d24>
   12ff8:	push	{r4, r5, r6, sl, fp, lr}
   12ffc:	add	fp, sp, #16
   13000:	mov	r5, r0
   13004:	mov	r4, r0
   13008:	ldrb	r6, [r5], #-1
   1300c:	bl	19168 <lchmod@@Base+0x2eb8>
   13010:	sub	r2, r0, r4
   13014:	sub	r0, r6, #47	; 0x2f
   13018:	clz	r0, r0
   1301c:	lsr	r1, r0, #5
   13020:	mov	r0, r2
   13024:	cmp	r2, r1
   13028:	popls	{r4, r5, r6, sl, fp, pc}
   1302c:	ldrb	r3, [r5, r0]
   13030:	sub	r2, r0, #1
   13034:	cmp	r3, #47	; 0x2f
   13038:	beq	13020 <__assert_fail@plt+0x14d0>
   1303c:	pop	{r4, r5, r6, sl, fp, pc}
   13040:	push	{r4, r5, r6, sl, fp, lr}
   13044:	add	fp, sp, #16
   13048:	mov	r6, r0
   1304c:	mov	r4, r0
   13050:	ldrb	r5, [r6], #-1
   13054:	bl	19168 <lchmod@@Base+0x2eb8>
   13058:	sub	r1, r0, r4
   1305c:	sub	r0, r5, #47	; 0x2f
   13060:	clz	r0, r0
   13064:	lsr	r0, r0, #5
   13068:	mov	r5, r1
   1306c:	cmp	r1, r0
   13070:	bls	13084 <__assert_fail@plt+0x1534>
   13074:	ldrb	r2, [r6, r5]
   13078:	sub	r1, r5, #1
   1307c:	cmp	r2, #47	; 0x2f
   13080:	beq	13068 <__assert_fail@plt+0x1518>
   13084:	cmp	r5, #0
   13088:	mov	r0, r5
   1308c:	addeq	r0, r0, #1
   13090:	add	r0, r0, #1
   13094:	bl	190e8 <lchmod@@Base+0x2e38>
   13098:	mov	r6, r0
   1309c:	cmp	r0, #0
   130a0:	beq	130cc <__assert_fail@plt+0x157c>
   130a4:	mov	r0, r6
   130a8:	mov	r1, r4
   130ac:	mov	r2, r5
   130b0:	bl	117d8 <memcpy@plt>
   130b4:	cmp	r5, #0
   130b8:	moveq	r0, #46	; 0x2e
   130bc:	moveq	r5, #1
   130c0:	strbeq	r0, [r6]
   130c4:	mov	r0, #0
   130c8:	strb	r0, [r6, r5]
   130cc:	mov	r0, r6
   130d0:	pop	{r4, r5, r6, sl, fp, pc}
   130d4:	push	{r4, r5, r6, r7, fp, lr}
   130d8:	add	fp, sp, #16
   130dc:	cmp	r0, #0
   130e0:	popeq	{r4, r5, r6, r7, fp, pc}
   130e4:	mov	r5, r0
   130e8:	mov	r0, #24
   130ec:	mov	r6, r2
   130f0:	mov	r7, r1
   130f4:	bl	18b84 <lchmod@@Base+0x28d4>
   130f8:	mov	r4, r0
   130fc:	mov	r0, r7
   13100:	bl	18f94 <lchmod@@Base+0x2ce4>
   13104:	str	r0, [r4]
   13108:	ldrd	r0, [r6, #96]	; 0x60
   1310c:	str	r1, [r4, #12]
   13110:	str	r0, [r4, #8]
   13114:	ldrd	r0, [r6]
   13118:	str	r1, [r4, #20]
   1311c:	str	r0, [r4, #16]
   13120:	mov	r0, r5
   13124:	mov	r1, r4
   13128:	bl	15fd0 <__assert_fail@plt+0x4480>
   1312c:	cmp	r0, #0
   13130:	beq	1314c <__assert_fail@plt+0x15fc>
   13134:	cmp	r0, r4
   13138:	beq	13148 <__assert_fail@plt+0x15f8>
   1313c:	mov	r0, r4
   13140:	pop	{r4, r5, r6, r7, fp, lr}
   13144:	b	161b0 <__assert_fail@plt+0x4660>
   13148:	pop	{r4, r5, r6, r7, fp, pc}
   1314c:	bl	18fd4 <lchmod@@Base+0x2d24>
   13150:	cmp	r0, #0
   13154:	moveq	r0, #0
   13158:	bxeq	lr
   1315c:	push	{r4, r5, fp, lr}
   13160:	add	fp, sp, #8
   13164:	sub	sp, sp, #24
   13168:	str	r1, [sp]
   1316c:	mov	r1, sp
   13170:	ldrd	r4, [r2, #96]	; 0x60
   13174:	str	r5, [sp, #12]
   13178:	str	r4, [sp, #8]
   1317c:	ldrd	r2, [r2]
   13180:	str	r3, [sp, #20]
   13184:	str	r2, [sp, #16]
   13188:	bl	153a8 <__assert_fail@plt+0x3858>
   1318c:	cmp	r0, #0
   13190:	movwne	r0, #1
   13194:	sub	sp, fp, #8
   13198:	pop	{r4, r5, fp, pc}
   1319c:	push	{r4, r5, r6, sl, fp, lr}
   131a0:	add	fp, sp, #16
   131a4:	mov	r4, r0
   131a8:	bl	11994 <__errno_location@plt>
   131ac:	ldr	r6, [r0]
   131b0:	mov	r5, r0
   131b4:	mov	r0, r4
   131b8:	bl	117b4 <free@plt>
   131bc:	str	r6, [r5]
   131c0:	pop	{r4, r5, r6, sl, fp, pc}
   131c4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   131c8:	add	fp, sp, #28
   131cc:	sub	sp, sp, #12
   131d0:	cmp	r1, #4096	; 0x1000
   131d4:	bcs	131f0 <__assert_fail@plt+0x16a0>
   131d8:	mov	r6, r0
   131dc:	and	r0, r1, #516	; 0x204
   131e0:	mov	r5, r1
   131e4:	cmp	r0, #516	; 0x204
   131e8:	tstne	r5, #18
   131ec:	bne	1320c <__assert_fail@plt+0x16bc>
   131f0:	bl	11994 <__errno_location@plt>
   131f4:	mov	r1, #22
   131f8:	str	r1, [r0]
   131fc:	mov	r8, #0
   13200:	mov	r0, r8
   13204:	sub	sp, fp, #28
   13208:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1320c:	mov	r0, #1
   13210:	mov	r1, #96	; 0x60
   13214:	mov	r9, r2
   13218:	bl	19094 <lchmod@@Base+0x2de4>
   1321c:	cmp	r0, #0
   13220:	beq	131fc <__assert_fail@plt+0x16ac>
   13224:	mov	r8, r0
   13228:	mvn	r0, #99	; 0x63
   1322c:	tst	r5, #2
   13230:	mov	r1, r5
   13234:	str	r0, [r8, #32]
   13238:	bic	r0, r5, #516	; 0x204
   1323c:	str	r9, [r8, #44]	; 0x2c
   13240:	orrne	r1, r0, #4
   13244:	str	r1, [r8, #48]	; 0x30
   13248:	ldr	r0, [r6]
   1324c:	cmp	r0, #0
   13250:	beq	13284 <__assert_fail@plt+0x1734>
   13254:	add	r4, r6, #4
   13258:	mov	r7, #0
   1325c:	bl	11964 <strlen@plt>
   13260:	cmp	r0, r7
   13264:	movhi	r7, r0
   13268:	ldr	r0, [r4], #4
   1326c:	cmp	r0, #0
   13270:	bne	1325c <__assert_fail@plt+0x170c>
   13274:	add	r1, r7, #1
   13278:	cmp	r1, #4096	; 0x1000
   1327c:	movls	r1, #4096	; 0x1000
   13280:	b	13288 <__assert_fail@plt+0x1738>
   13284:	mov	r1, #4096	; 0x1000
   13288:	mov	r0, r8
   1328c:	bl	134e0 <__assert_fail@plt+0x1990>
   13290:	cmp	r0, #0
   13294:	beq	134d4 <__assert_fail@plt+0x1984>
   13298:	ldr	r0, [r6]
   1329c:	cmp	r0, #0
   132a0:	beq	132d0 <__assert_fail@plt+0x1780>
   132a4:	movw	r1, #41036	; 0xa04c
   132a8:	mov	r0, r8
   132ac:	mov	r2, #0
   132b0:	movt	r1, #1
   132b4:	bl	13554 <__assert_fail@plt+0x1a04>
   132b8:	cmp	r0, #0
   132bc:	beq	134cc <__assert_fail@plt+0x197c>
   132c0:	mov	r4, r0
   132c4:	mvn	r0, #0
   132c8:	str	r0, [r4, #48]	; 0x30
   132cc:	b	132d4 <__assert_fail@plt+0x1784>
   132d0:	mov	r4, #0
   132d4:	cmp	r9, #0
   132d8:	ldrbne	r0, [r8, #49]	; 0x31
   132dc:	ubfxne	r0, r0, #2, #1
   132e0:	ldr	r7, [r6]
   132e4:	moveq	r0, #1
   132e8:	cmp	r7, #0
   132ec:	beq	1340c <__assert_fail@plt+0x18bc>
   132f0:	eor	r0, r0, #1
   132f4:	and	r1, r5, #2048	; 0x800
   132f8:	mov	sl, #0
   132fc:	mov	r5, #0
   13300:	str	r0, [sp, #4]
   13304:	mov	r0, #0
   13308:	str	r1, [sp, #8]
   1330c:	str	r0, [sp]
   13310:	mov	r0, r7
   13314:	bl	11964 <strlen@plt>
   13318:	mov	r2, r0
   1331c:	ldr	r0, [sp, #8]
   13320:	cmp	r0, #0
   13324:	bne	1335c <__assert_fail@plt+0x180c>
   13328:	cmp	r2, #3
   1332c:	bcc	1335c <__assert_fail@plt+0x180c>
   13330:	add	r0, r7, r2
   13334:	ldrb	r0, [r0, #-1]
   13338:	cmp	r0, #47	; 0x2f
   1333c:	bne	1335c <__assert_fail@plt+0x180c>
   13340:	sub	r0, r7, #2
   13344:	ldrb	r1, [r0, r2]
   13348:	cmp	r1, #47	; 0x2f
   1334c:	bne	1335c <__assert_fail@plt+0x180c>
   13350:	sub	r2, r2, #1
   13354:	cmp	r2, #1
   13358:	bhi	13344 <__assert_fail@plt+0x17f4>
   1335c:	mov	r0, r8
   13360:	mov	r1, r7
   13364:	bl	13554 <__assert_fail@plt+0x1a04>
   13368:	cmp	r0, #0
   1336c:	beq	134bc <__assert_fail@plt+0x196c>
   13370:	mov	r1, #0
   13374:	ldr	r2, [sp, #4]
   13378:	str	r4, [r0, #4]
   1337c:	mov	r7, r0
   13380:	str	r1, [r0, #48]	; 0x30
   13384:	add	r0, r0, #168	; 0xa8
   13388:	str	r0, [r7, #24]
   1338c:	clz	r0, sl
   13390:	lsr	r0, r0, #5
   13394:	orrs	r0, r2, r0
   13398:	bne	133ac <__assert_fail@plt+0x185c>
   1339c:	mov	r0, #2
   133a0:	strd	r0, [r7, #112]	; 0x70
   133a4:	mov	r0, #11
   133a8:	b	133c0 <__assert_fail@plt+0x1870>
   133ac:	mov	r0, r8
   133b0:	mov	r1, r7
   133b4:	mov	r2, #0
   133b8:	bl	135d4 <__assert_fail@plt+0x1a84>
   133bc:	mov	r1, #0
   133c0:	cmp	r9, #0
   133c4:	strh	r0, [r7, #56]	; 0x38
   133c8:	beq	133d8 <__assert_fail@plt+0x1888>
   133cc:	str	sl, [r7, #8]
   133d0:	mov	sl, r7
   133d4:	b	133f0 <__assert_fail@plt+0x18a0>
   133d8:	cmp	sl, #0
   133dc:	str	r1, [r7, #8]
   133e0:	beq	13404 <__assert_fail@plt+0x18b4>
   133e4:	ldr	r0, [sp]
   133e8:	str	r7, [sp]
   133ec:	str	r7, [r0, #8]
   133f0:	ldr	r7, [r6, #4]!
   133f4:	add	r5, r5, #1
   133f8:	cmp	r7, #0
   133fc:	bne	13310 <__assert_fail@plt+0x17c0>
   13400:	b	13414 <__assert_fail@plt+0x18c4>
   13404:	str	r7, [sp]
   13408:	b	133d0 <__assert_fail@plt+0x1880>
   1340c:	mov	sl, #0
   13410:	b	13438 <__assert_fail@plt+0x18e8>
   13414:	cmp	r9, #0
   13418:	beq	13438 <__assert_fail@plt+0x18e8>
   1341c:	cmp	r5, #2
   13420:	bcc	13438 <__assert_fail@plt+0x18e8>
   13424:	mov	r0, r8
   13428:	mov	r1, sl
   1342c:	mov	r2, r5
   13430:	bl	13708 <__assert_fail@plt+0x1bb8>
   13434:	mov	sl, r0
   13438:	movw	r1, #41036	; 0xa04c
   1343c:	mov	r0, r8
   13440:	mov	r2, #0
   13444:	movt	r1, #1
   13448:	bl	13554 <__assert_fail@plt+0x1a04>
   1344c:	cmp	r0, #0
   13450:	str	r0, [r8]
   13454:	beq	134bc <__assert_fail@plt+0x196c>
   13458:	mov	r1, #9
   1345c:	strh	r1, [r0, #56]	; 0x38
   13460:	mov	r1, #1
   13464:	str	sl, [r0, #8]
   13468:	str	r1, [r0, #48]	; 0x30
   1346c:	mov	r0, r8
   13470:	bl	13800 <__assert_fail@plt+0x1cb0>
   13474:	cmp	r0, #0
   13478:	beq	134bc <__assert_fail@plt+0x196c>
   1347c:	ldrh	r0, [r8, #48]	; 0x30
   13480:	tst	r0, #516	; 0x204
   13484:	bne	134ac <__assert_fail@plt+0x195c>
   13488:	movw	r1, #41227	; 0xa10b
   1348c:	mov	r0, r8
   13490:	movt	r1, #1
   13494:	bl	1388c <__assert_fail@plt+0x1d3c>
   13498:	str	r0, [r8, #28]
   1349c:	cmn	r0, #1
   134a0:	ldrle	r0, [r8, #48]	; 0x30
   134a4:	orrle	r0, r0, #4
   134a8:	strle	r0, [r8, #48]	; 0x30
   134ac:	add	r0, r8, #60	; 0x3c
   134b0:	mvn	r1, #0
   134b4:	bl	161d0 <__assert_fail@plt+0x4680>
   134b8:	b	13200 <__assert_fail@plt+0x16b0>
   134bc:	mov	r0, sl
   134c0:	bl	138bc <__assert_fail@plt+0x1d6c>
   134c4:	mov	r0, r4
   134c8:	bl	1319c <__assert_fail@plt+0x164c>
   134cc:	ldr	r0, [r8, #24]
   134d0:	bl	1319c <__assert_fail@plt+0x164c>
   134d4:	mov	r0, r8
   134d8:	bl	1319c <__assert_fail@plt+0x164c>
   134dc:	b	131fc <__assert_fail@plt+0x16ac>
   134e0:	push	{r4, r5, fp, lr}
   134e4:	add	fp, sp, #8
   134e8:	mov	r4, r0
   134ec:	ldr	r0, [r0, #36]	; 0x24
   134f0:	add	r1, r1, #256	; 0x100
   134f4:	adds	r1, r1, r0
   134f8:	bcc	1351c <__assert_fail@plt+0x19cc>
   134fc:	ldr	r0, [r4, #24]
   13500:	bl	1319c <__assert_fail@plt+0x164c>
   13504:	mov	r5, #0
   13508:	str	r5, [r4, #24]
   1350c:	bl	11994 <__errno_location@plt>
   13510:	mov	r1, #36	; 0x24
   13514:	str	r1, [r0]
   13518:	b	1354c <__assert_fail@plt+0x19fc>
   1351c:	str	r1, [r4, #36]	; 0x24
   13520:	ldr	r0, [r4, #24]
   13524:	bl	19118 <lchmod@@Base+0x2e68>
   13528:	cmp	r0, #0
   1352c:	beq	1353c <__assert_fail@plt+0x19ec>
   13530:	mov	r5, #1
   13534:	str	r0, [r4, #24]
   13538:	b	1354c <__assert_fail@plt+0x19fc>
   1353c:	ldr	r0, [r4, #24]
   13540:	bl	1319c <__assert_fail@plt+0x164c>
   13544:	mov	r5, #0
   13548:	str	r5, [r4, #24]
   1354c:	mov	r0, r5
   13550:	pop	{r4, r5, fp, pc}
   13554:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   13558:	add	fp, sp, #24
   1355c:	mov	r5, r0
   13560:	add	r0, r2, #176	; 0xb0
   13564:	mov	r6, r2
   13568:	mov	r8, r1
   1356c:	bic	r0, r0, #7
   13570:	bl	190e8 <lchmod@@Base+0x2e38>
   13574:	cmp	r0, #0
   13578:	beq	135c8 <__assert_fail@plt+0x1a78>
   1357c:	add	r7, r0, #168	; 0xa8
   13580:	mov	r4, r0
   13584:	mov	r1, r8
   13588:	mov	r2, r6
   1358c:	mov	r0, r7
   13590:	bl	117d8 <memcpy@plt>
   13594:	mov	r0, #0
   13598:	mov	r2, #196608	; 0x30000
   1359c:	strb	r0, [r7, r6]
   135a0:	str	r6, [r4, #52]	; 0x34
   135a4:	str	r5, [r4, #44]	; 0x2c
   135a8:	ldr	r1, [r5, #24]
   135ac:	str	r2, [r4, #58]	; 0x3a
   135b0:	str	r0, [r4, #12]
   135b4:	str	r0, [r4, #16]
   135b8:	str	r0, [r4, #20]
   135bc:	str	r1, [r4, #28]
   135c0:	str	r0, [r4, #32]
   135c4:	b	135cc <__assert_fail@plt+0x1a7c>
   135c8:	mov	r4, #0
   135cc:	mov	r0, r4
   135d0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   135d4:	push	{r4, r5, r6, sl, fp, lr}
   135d8:	add	fp, sp, #16
   135dc:	mov	r4, r1
   135e0:	ldr	r1, [r0, #48]	; 0x30
   135e4:	ldr	r3, [r4, #48]	; 0x30
   135e8:	add	r5, r4, #64	; 0x40
   135ec:	cmp	r3, #0
   135f0:	andeq	r3, r1, #1
   135f4:	orreq	r2, r3, r2
   135f8:	cmp	r2, #0
   135fc:	andseq	r1, r1, #2
   13600:	beq	13650 <__assert_fail@plt+0x1b00>
   13604:	ldr	r0, [r4, #24]
   13608:	mov	r1, r5
   1360c:	bl	19b14 <lchmod@@Base+0x3864>
   13610:	cmp	r0, #0
   13614:	beq	13694 <__assert_fail@plt+0x1b44>
   13618:	bl	11994 <__errno_location@plt>
   1361c:	mov	r6, r0
   13620:	ldr	r0, [r0]
   13624:	cmp	r0, #2
   13628:	bne	13678 <__assert_fail@plt+0x1b28>
   1362c:	ldr	r0, [r4, #24]
   13630:	mov	r1, r5
   13634:	bl	19b34 <lchmod@@Base+0x3884>
   13638:	cmp	r0, #0
   1363c:	bne	13674 <__assert_fail@plt+0x1b24>
   13640:	mov	r0, #0
   13644:	str	r0, [r6]
   13648:	mov	r0, #13
   1364c:	pop	{r4, r5, r6, sl, fp, pc}
   13650:	ldr	r1, [r4, #24]
   13654:	ldr	r0, [r0, #32]
   13658:	mov	r2, r5
   1365c:	mov	r3, #256	; 0x100
   13660:	bl	19b44 <lchmod@@Base+0x3894>
   13664:	cmp	r0, #0
   13668:	beq	13694 <__assert_fail@plt+0x1b44>
   1366c:	bl	11994 <__errno_location@plt>
   13670:	mov	r6, r0
   13674:	ldr	r0, [r6]
   13678:	str	r0, [r4, #32]
   1367c:	mov	r0, r5
   13680:	mov	r1, #0
   13684:	mov	r2, #104	; 0x68
   13688:	bl	119b8 <memset@plt>
   1368c:	mov	r0, #10
   13690:	pop	{r4, r5, r6, sl, fp, pc}
   13694:	ldr	r0, [r4, #80]	; 0x50
   13698:	and	r0, r0, #61440	; 0xf000
   1369c:	cmp	r0, #40960	; 0xa000
   136a0:	moveq	r0, #12
   136a4:	popeq	{r4, r5, r6, sl, fp, pc}
   136a8:	cmp	r0, #32768	; 0x8000
   136ac:	moveq	r0, #8
   136b0:	popeq	{r4, r5, r6, sl, fp, pc}
   136b4:	cmp	r0, #16384	; 0x4000
   136b8:	bne	136ec <__assert_fail@plt+0x1b9c>
   136bc:	ldrb	r1, [r4, #168]	; 0xa8
   136c0:	mov	r0, #1
   136c4:	cmp	r1, #46	; 0x2e
   136c8:	popne	{r4, r5, r6, sl, fp, pc}
   136cc:	ldrb	r1, [r4, #169]	; 0xa9
   136d0:	cmp	r1, #0
   136d4:	beq	136f4 <__assert_fail@plt+0x1ba4>
   136d8:	cmp	r1, #46	; 0x2e
   136dc:	ldrbeq	r1, [r4, #170]	; 0xaa
   136e0:	cmpeq	r1, #0
   136e4:	beq	136f4 <__assert_fail@plt+0x1ba4>
   136e8:	pop	{r4, r5, r6, sl, fp, pc}
   136ec:	mov	r0, #3
   136f0:	pop	{r4, r5, r6, sl, fp, pc}
   136f4:	ldr	r1, [r4, #48]	; 0x30
   136f8:	mov	r0, #5
   136fc:	cmp	r1, #0
   13700:	movweq	r0, #1
   13704:	pop	{r4, r5, r6, sl, fp, pc}
   13708:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1370c:	add	fp, sp, #24
   13710:	ldrd	r8, [r0, #40]	; 0x28
   13714:	mov	r5, r2
   13718:	mov	r4, r1
   1371c:	mov	r6, r0
   13720:	cmp	r8, r2
   13724:	bcs	1375c <__assert_fail@plt+0x1c0c>
   13728:	add	r1, r5, #40	; 0x28
   1372c:	cmn	r1, #-1073741823	; 0xc0000001
   13730:	str	r1, [r6, #40]	; 0x28
   13734:	bhi	137e4 <__assert_fail@plt+0x1c94>
   13738:	add	r7, r6, #8
   1373c:	lsl	r1, r1, #2
   13740:	ldr	r0, [r7]
   13744:	bl	19118 <lchmod@@Base+0x2e68>
   13748:	cmp	r0, #0
   1374c:	beq	137e4 <__assert_fail@plt+0x1c94>
   13750:	mov	r6, r7
   13754:	str	r0, [r7]
   13758:	b	13760 <__assert_fail@plt+0x1c10>
   1375c:	ldr	r0, [r6, #8]!
   13760:	cmp	r4, #0
   13764:	beq	1377c <__assert_fail@plt+0x1c2c>
   13768:	str	r4, [r0], #4
   1376c:	ldr	r4, [r4, #8]
   13770:	cmp	r4, #0
   13774:	bne	13768 <__assert_fail@plt+0x1c18>
   13778:	ldr	r0, [r6]
   1377c:	mov	r1, r5
   13780:	mov	r2, #4
   13784:	mov	r3, r9
   13788:	bl	11a78 <qsort@plt>
   1378c:	ldr	r7, [r6]
   13790:	subs	r0, r5, #1
   13794:	ldr	r4, [r7]
   13798:	mov	r1, r4
   1379c:	beq	137d8 <__assert_fail@plt+0x1c88>
   137a0:	mov	r1, r7
   137a4:	cmp	r5, #2
   137a8:	ldr	r2, [r1, #4]!
   137ac:	str	r2, [r4, #8]
   137b0:	beq	137d4 <__assert_fail@plt+0x1c84>
   137b4:	rsb	r3, r5, #2
   137b8:	mov	r2, r1
   137bc:	ldr	r6, [r2, #4]!
   137c0:	ldr	r1, [r1]
   137c4:	adds	r3, r3, #1
   137c8:	str	r6, [r1, #8]
   137cc:	mov	r1, r2
   137d0:	bne	137bc <__assert_fail@plt+0x1c6c>
   137d4:	ldr	r1, [r7, r0, lsl #2]
   137d8:	mov	r0, #0
   137dc:	str	r0, [r1, #8]
   137e0:	b	137f8 <__assert_fail@plt+0x1ca8>
   137e4:	ldr	r0, [r6, #8]
   137e8:	bl	1319c <__assert_fail@plt+0x164c>
   137ec:	mov	r0, #0
   137f0:	str	r0, [r6, #40]	; 0x28
   137f4:	str	r0, [r6, #8]
   137f8:	mov	r0, r4
   137fc:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   13800:	push	{r4, r5, fp, lr}
   13804:	add	fp, sp, #8
   13808:	sub	sp, sp, #8
   1380c:	mov	r4, r0
   13810:	ldrh	r0, [r0, #48]	; 0x30
   13814:	movw	r1, #258	; 0x102
   13818:	tst	r0, r1
   1381c:	beq	1385c <__assert_fail@plt+0x1d0c>
   13820:	movw	r0, #12700	; 0x319c
   13824:	movw	r2, #20432	; 0x4fd0
   13828:	movw	r3, #20464	; 0x4ff0
   1382c:	mov	r1, #0
   13830:	mov	r5, #0
   13834:	movt	r0, #1
   13838:	movt	r2, #1
   1383c:	movt	r3, #1
   13840:	str	r0, [sp]
   13844:	mov	r0, #31
   13848:	bl	15648 <__assert_fail@plt+0x3af8>
   1384c:	cmp	r0, #0
   13850:	str	r0, [r4, #56]	; 0x38
   13854:	movne	r5, #1
   13858:	b	13880 <__assert_fail@plt+0x1d30>
   1385c:	mov	r0, #32
   13860:	bl	190e8 <lchmod@@Base+0x2e38>
   13864:	cmp	r0, #0
   13868:	str	r0, [r4, #56]	; 0x38
   1386c:	beq	1387c <__assert_fail@plt+0x1d2c>
   13870:	bl	19268 <lchmod@@Base+0x2fb8>
   13874:	mov	r5, #1
   13878:	b	13880 <__assert_fail@plt+0x1d30>
   1387c:	mov	r5, #0
   13880:	mov	r0, r5
   13884:	sub	sp, fp, #8
   13888:	pop	{r4, r5, fp, pc}
   1388c:	ldr	r3, [r0, #48]	; 0x30
   13890:	mov	r2, #32768	; 0x8000
   13894:	and	r2, r2, r3, lsl #11
   13898:	tst	r3, #512	; 0x200
   1389c:	orr	r2, r2, #18688	; 0x4900
   138a0:	orr	r2, r2, #524288	; 0x80000
   138a4:	bne	138b4 <__assert_fail@plt+0x1d64>
   138a8:	mov	r0, r1
   138ac:	mov	r1, r2
   138b0:	b	195c8 <lchmod@@Base+0x3318>
   138b4:	ldr	r0, [r0, #32]
   138b8:	b	16874 <lchmod@@Base+0x5c4>
   138bc:	push	{r4, r6, r7, sl, fp, lr}
   138c0:	add	fp, sp, #16
   138c4:	cmp	r0, #0
   138c8:	popeq	{r4, r6, r7, sl, fp, pc}
   138cc:	mov	r4, r0
   138d0:	ldrd	r6, [r4, #8]
   138d4:	cmp	r7, #0
   138d8:	beq	138e4 <__assert_fail@plt+0x1d94>
   138dc:	mov	r0, r7
   138e0:	bl	11b2c <closedir@plt>
   138e4:	mov	r0, r4
   138e8:	bl	1319c <__assert_fail@plt+0x164c>
   138ec:	cmp	r6, #0
   138f0:	mov	r4, r6
   138f4:	bne	138d0 <__assert_fail@plt+0x1d80>
   138f8:	pop	{r4, r6, r7, sl, fp, pc}
   138fc:	push	{r4, r5, fp, lr}
   13900:	add	fp, sp, #8
   13904:	mov	r4, r0
   13908:	ldr	r0, [r0]
   1390c:	cmp	r0, #0
   13910:	beq	13950 <__assert_fail@plt+0x1e00>
   13914:	ldr	r1, [r0, #48]	; 0x30
   13918:	cmp	r1, #0
   1391c:	blt	13944 <__assert_fail@plt+0x1df4>
   13920:	ldr	r5, [r0, #8]
   13924:	cmp	r5, #0
   13928:	ldreq	r5, [r0, #4]
   1392c:	bl	1319c <__assert_fail@plt+0x164c>
   13930:	ldr	r0, [r5, #48]	; 0x30
   13934:	cmn	r0, #1
   13938:	mov	r0, r5
   1393c:	bgt	13920 <__assert_fail@plt+0x1dd0>
   13940:	b	13948 <__assert_fail@plt+0x1df8>
   13944:	mov	r5, r0
   13948:	mov	r0, r5
   1394c:	bl	1319c <__assert_fail@plt+0x164c>
   13950:	ldr	r0, [r4, #4]
   13954:	cmp	r0, #0
   13958:	blne	138bc <__assert_fail@plt+0x1d6c>
   1395c:	ldr	r0, [r4, #8]
   13960:	bl	1319c <__assert_fail@plt+0x164c>
   13964:	ldr	r0, [r4, #24]
   13968:	bl	1319c <__assert_fail@plt+0x164c>
   1396c:	ldr	r0, [r4, #48]	; 0x30
   13970:	tst	r0, #512	; 0x200
   13974:	bne	139a0 <__assert_fail@plt+0x1e50>
   13978:	mov	r5, #0
   1397c:	tst	r0, #4
   13980:	bne	139dc <__assert_fail@plt+0x1e8c>
   13984:	ldr	r0, [r4, #28]
   13988:	bl	11a6c <fchdir@plt>
   1398c:	cmp	r0, #0
   13990:	beq	139b8 <__assert_fail@plt+0x1e68>
   13994:	bl	11994 <__errno_location@plt>
   13998:	ldr	r5, [r0]
   1399c:	b	139bc <__assert_fail@plt+0x1e6c>
   139a0:	ldr	r0, [r4, #32]
   139a4:	mov	r5, #0
   139a8:	cmp	r0, #0
   139ac:	blt	139dc <__assert_fail@plt+0x1e8c>
   139b0:	bl	11afc <close@plt>
   139b4:	b	139cc <__assert_fail@plt+0x1e7c>
   139b8:	mov	r5, #0
   139bc:	ldr	r0, [r4, #28]
   139c0:	bl	11afc <close@plt>
   139c4:	cmp	r5, #0
   139c8:	bne	139dc <__assert_fail@plt+0x1e8c>
   139cc:	cmp	r0, #0
   139d0:	beq	139dc <__assert_fail@plt+0x1e8c>
   139d4:	bl	11994 <__errno_location@plt>
   139d8:	ldr	r5, [r0]
   139dc:	add	r0, r4, #60	; 0x3c
   139e0:	bl	13a20 <__assert_fail@plt+0x1ed0>
   139e4:	ldr	r0, [r4, #52]	; 0x34
   139e8:	cmp	r0, #0
   139ec:	beq	139f4 <__assert_fail@plt+0x1ea4>
   139f0:	bl	15974 <__assert_fail@plt+0x3e24>
   139f4:	mov	r0, r4
   139f8:	bl	13a54 <__assert_fail@plt+0x1f04>
   139fc:	mov	r0, r4
   13a00:	bl	1319c <__assert_fail@plt+0x164c>
   13a04:	cmp	r5, #0
   13a08:	moveq	r0, #0
   13a0c:	popeq	{r4, r5, fp, pc}
   13a10:	bl	11994 <__errno_location@plt>
   13a14:	str	r5, [r0]
   13a18:	mvn	r0, #0
   13a1c:	pop	{r4, r5, fp, pc}
   13a20:	push	{r4, sl, fp, lr}
   13a24:	add	fp, sp, #8
   13a28:	mov	r4, r0
   13a2c:	bl	16204 <__assert_fail@plt+0x46b4>
   13a30:	cmp	r0, #0
   13a34:	popne	{r4, sl, fp, pc}
   13a38:	mov	r0, r4
   13a3c:	bl	16258 <__assert_fail@plt+0x4708>
   13a40:	cmp	r0, #0
   13a44:	blt	13a4c <__assert_fail@plt+0x1efc>
   13a48:	bl	11afc <close@plt>
   13a4c:	mov	r0, r4
   13a50:	b	13a2c <__assert_fail@plt+0x1edc>
   13a54:	ldrh	r1, [r0, #48]	; 0x30
   13a58:	movw	r2, #258	; 0x102
   13a5c:	tst	r1, r2
   13a60:	beq	13a74 <__assert_fail@plt+0x1f24>
   13a64:	ldr	r0, [r0, #56]	; 0x38
   13a68:	cmp	r0, #0
   13a6c:	bxeq	lr
   13a70:	b	15974 <__assert_fail@plt+0x3e24>
   13a74:	ldr	r0, [r0, #56]	; 0x38
   13a78:	b	1319c <__assert_fail@plt+0x164c>
   13a7c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   13a80:	add	fp, sp, #24
   13a84:	ldr	r6, [r0]
   13a88:	mov	r5, #0
   13a8c:	cmp	r6, #0
   13a90:	beq	14084 <__assert_fail@plt+0x2534>
   13a94:	ldr	r1, [r0, #48]	; 0x30
   13a98:	mov	r4, r0
   13a9c:	tst	r1, #8192	; 0x2000
   13aa0:	bne	14084 <__assert_fail@plt+0x2534>
   13aa4:	ldrh	r0, [r6, #60]	; 0x3c
   13aa8:	mov	r2, #3
   13aac:	strh	r2, [r6, #60]	; 0x3c
   13ab0:	cmp	r0, #1
   13ab4:	beq	13b04 <__assert_fail@plt+0x1fb4>
   13ab8:	mov	r7, r6
   13abc:	cmp	r0, #2
   13ac0:	bne	13b1c <__assert_fail@plt+0x1fcc>
   13ac4:	ldrh	r2, [r7, #56]!	; 0x38
   13ac8:	movw	r3, #65534	; 0xfffe
   13acc:	and	r3, r2, r3
   13ad0:	cmp	r3, #12
   13ad4:	bne	13b20 <__assert_fail@plt+0x1fd0>
   13ad8:	mov	r0, r4
   13adc:	mov	r1, r6
   13ae0:	mov	r2, #1
   13ae4:	bl	135d4 <__assert_fail@plt+0x1a84>
   13ae8:	strh	r0, [r6, #56]	; 0x38
   13aec:	cmp	r0, #1
   13af0:	ldrbeq	r0, [r4, #48]	; 0x30
   13af4:	tsteq	r0, #4
   13af8:	beq	13cec <__assert_fail@plt+0x219c>
   13afc:	mov	r5, r6
   13b00:	b	13e14 <__assert_fail@plt+0x22c4>
   13b04:	mov	r0, r4
   13b08:	mov	r1, r6
   13b0c:	mov	r2, #0
   13b10:	bl	135d4 <__assert_fail@plt+0x1a84>
   13b14:	strh	r0, [r6, #56]	; 0x38
   13b18:	b	13b70 <__assert_fail@plt+0x2020>
   13b1c:	ldrh	r2, [r7, #56]!	; 0x38
   13b20:	cmp	r2, #1
   13b24:	bne	13b78 <__assert_fail@plt+0x2028>
   13b28:	cmp	r0, #4
   13b2c:	bne	13be4 <__assert_fail@plt+0x2094>
   13b30:	ldrb	r0, [r6, #58]	; 0x3a
   13b34:	tst	r0, #2
   13b38:	beq	13b44 <__assert_fail@plt+0x1ff4>
   13b3c:	ldr	r0, [r6, #36]	; 0x24
   13b40:	bl	11afc <close@plt>
   13b44:	ldr	r0, [r4, #4]
   13b48:	cmp	r0, #0
   13b4c:	beq	13b5c <__assert_fail@plt+0x200c>
   13b50:	bl	138bc <__assert_fail@plt+0x1d6c>
   13b54:	mov	r0, #0
   13b58:	str	r0, [r4, #4]
   13b5c:	mov	r0, #6
   13b60:	strh	r0, [r6, #56]	; 0x38
   13b64:	mov	r0, r4
   13b68:	mov	r1, r6
   13b6c:	bl	14090 <__assert_fail@plt+0x2540>
   13b70:	mov	r5, r6
   13b74:	b	14084 <__assert_fail@plt+0x2534>
   13b78:	ldr	r5, [r6, #8]
   13b7c:	cmp	r5, #0
   13b80:	beq	13c7c <__assert_fail@plt+0x212c>
   13b84:	mov	r0, r6
   13b88:	str	r5, [r4]
   13b8c:	bl	1319c <__assert_fail@plt+0x164c>
   13b90:	ldr	r0, [r5, #48]	; 0x30
   13b94:	cmp	r0, #0
   13b98:	beq	13cc8 <__assert_fail@plt+0x2178>
   13b9c:	ldrh	r0, [r5, #60]	; 0x3c
   13ba0:	mov	r6, r5
   13ba4:	cmp	r0, #4
   13ba8:	beq	13b78 <__assert_fail@plt+0x2028>
   13bac:	cmp	r0, #2
   13bb0:	bne	13dd8 <__assert_fail@plt+0x2288>
   13bb4:	mov	r0, r4
   13bb8:	mov	r1, r5
   13bbc:	mov	r2, #1
   13bc0:	bl	135d4 <__assert_fail@plt+0x1a84>
   13bc4:	strh	r0, [r5, #56]	; 0x38
   13bc8:	cmp	r0, #1
   13bcc:	ldrbeq	r0, [r4, #48]	; 0x30
   13bd0:	tsteq	r0, #4
   13bd4:	beq	13fe8 <__assert_fail@plt+0x2498>
   13bd8:	mov	r0, #3
   13bdc:	strh	r0, [r5, #60]	; 0x3c
   13be0:	b	13dd8 <__assert_fail@plt+0x2288>
   13be4:	tst	r1, #64	; 0x40
   13be8:	beq	13c0c <__assert_fail@plt+0x20bc>
   13bec:	ldr	r0, [r4, #16]
   13bf0:	ldr	r3, [r4, #20]
   13bf4:	ldr	r2, [r6, #64]	; 0x40
   13bf8:	ldr	r5, [r6, #68]	; 0x44
   13bfc:	eor	r3, r5, r3
   13c00:	eor	r0, r2, r0
   13c04:	orrs	r0, r0, r3
   13c08:	bne	13b30 <__assert_fail@plt+0x1fe0>
   13c0c:	ldr	r0, [r4, #4]
   13c10:	cmp	r0, #0
   13c14:	beq	13db4 <__assert_fail@plt+0x2264>
   13c18:	tst	r1, #4096	; 0x1000
   13c1c:	bne	13da0 <__assert_fail@plt+0x2250>
   13c20:	ldr	r3, [r6, #24]
   13c24:	mov	r0, r4
   13c28:	mov	r1, r6
   13c2c:	mvn	r2, #0
   13c30:	bl	1415c <__assert_fail@plt+0x260c>
   13c34:	cmp	r0, #0
   13c38:	beq	13dcc <__assert_fail@plt+0x227c>
   13c3c:	bl	11994 <__errno_location@plt>
   13c40:	ldr	r0, [r0]
   13c44:	str	r0, [r6, #32]
   13c48:	ldrh	r0, [r6, #58]	; 0x3a
   13c4c:	orr	r0, r0, #1
   13c50:	strh	r0, [r6, #58]	; 0x3a
   13c54:	ldr	r0, [r4, #4]
   13c58:	cmp	r0, #0
   13c5c:	beq	13dcc <__assert_fail@plt+0x227c>
   13c60:	ldmib	r0, {r1, r2}
   13c64:	ldr	r1, [r1, #24]
   13c68:	cmp	r2, #0
   13c6c:	str	r1, [r0, #24]
   13c70:	mov	r0, r2
   13c74:	bne	13c60 <__assert_fail@plt+0x2110>
   13c78:	b	13dcc <__assert_fail@plt+0x227c>
   13c7c:	ldr	r5, [r6, #4]
   13c80:	ldr	r0, [r5, #12]
   13c84:	cmp	r0, #0
   13c88:	beq	13ed0 <__assert_fail@plt+0x2380>
   13c8c:	str	r5, [r4]
   13c90:	ldr	r1, [r5, #40]	; 0x28
   13c94:	ldr	r0, [r4, #24]
   13c98:	mov	r5, #0
   13c9c:	strb	r5, [r0, r1]
   13ca0:	mov	r0, r4
   13ca4:	mov	r1, #3
   13ca8:	bl	14334 <__assert_fail@plt+0x27e4>
   13cac:	cmp	r0, #0
   13cb0:	beq	13ec0 <__assert_fail@plt+0x2370>
   13cb4:	mov	r7, r0
   13cb8:	mov	r0, r6
   13cbc:	bl	1319c <__assert_fail@plt+0x164c>
   13cc0:	mov	r5, r7
   13cc4:	b	13dd8 <__assert_fail@plt+0x2288>
   13cc8:	mov	r0, r4
   13ccc:	bl	14cc8 <__assert_fail@plt+0x3178>
   13cd0:	cmp	r0, #0
   13cd4:	beq	13d18 <__assert_fail@plt+0x21c8>
   13cd8:	ldr	r0, [r4, #48]	; 0x30
   13cdc:	mov	r5, #0
   13ce0:	orr	r0, r0, #8192	; 0x2000
   13ce4:	str	r0, [r4, #48]	; 0x30
   13ce8:	b	14084 <__assert_fail@plt+0x2534>
   13cec:	movw	r1, #41227	; 0xa10b
   13cf0:	mov	r0, r4
   13cf4:	movt	r1, #1
   13cf8:	bl	1388c <__assert_fail@plt+0x1d3c>
   13cfc:	cmn	r0, #1
   13d00:	str	r0, [r6, #36]	; 0x24
   13d04:	ble	13f5c <__assert_fail@plt+0x240c>
   13d08:	ldrh	r0, [r6, #58]	; 0x3a
   13d0c:	orr	r0, r0, #2
   13d10:	strh	r0, [r6, #58]	; 0x3a
   13d14:	b	13afc <__assert_fail@plt+0x1fac>
   13d18:	mov	r0, r4
   13d1c:	bl	13a54 <__assert_fail@plt+0x1f04>
   13d20:	ldr	r1, [r5, #52]	; 0x34
   13d24:	add	r6, r5, #168	; 0xa8
   13d28:	str	r1, [r5, #40]	; 0x28
   13d2c:	add	r2, r1, #1
   13d30:	mov	r1, r6
   13d34:	ldr	r0, [r4, #24]
   13d38:	bl	117a8 <memmove@plt>
   13d3c:	mov	r0, r6
   13d40:	mov	r1, #47	; 0x2f
   13d44:	bl	11a24 <strrchr@plt>
   13d48:	cmp	r0, #0
   13d4c:	beq	13d88 <__assert_fail@plt+0x2238>
   13d50:	cmp	r0, r6
   13d54:	bne	13d64 <__assert_fail@plt+0x2214>
   13d58:	ldrb	r1, [r5, #169]	; 0xa9
   13d5c:	cmp	r1, #0
   13d60:	beq	13d88 <__assert_fail@plt+0x2238>
   13d64:	add	r7, r0, #1
   13d68:	mov	r0, r7
   13d6c:	bl	11964 <strlen@plt>
   13d70:	mov	r8, r0
   13d74:	add	r2, r0, #1
   13d78:	mov	r0, r6
   13d7c:	mov	r1, r7
   13d80:	bl	117a8 <memmove@plt>
   13d84:	str	r8, [r5, #52]	; 0x34
   13d88:	ldr	r0, [r4, #24]
   13d8c:	str	r0, [r5, #24]
   13d90:	str	r0, [r5, #28]
   13d94:	mov	r0, r4
   13d98:	bl	13800 <__assert_fail@plt+0x1cb0>
   13d9c:	b	13e14 <__assert_fail@plt+0x22c4>
   13da0:	bic	r1, r1, #4096	; 0x1000
   13da4:	str	r1, [r4, #48]	; 0x30
   13da8:	bl	138bc <__assert_fail@plt+0x1d6c>
   13dac:	mov	r0, #0
   13db0:	str	r0, [r4, #4]
   13db4:	mov	r0, r4
   13db8:	mov	r1, #3
   13dbc:	bl	14334 <__assert_fail@plt+0x27e4>
   13dc0:	cmp	r0, #0
   13dc4:	str	r0, [r4, #4]
   13dc8:	beq	13e94 <__assert_fail@plt+0x2344>
   13dcc:	ldr	r5, [r4, #4]
   13dd0:	mov	r0, #0
   13dd4:	str	r0, [r4, #4]
   13dd8:	ldr	r0, [r5, #4]
   13ddc:	ldr	r1, [r0, #28]
   13de0:	ldr	r0, [r0, #40]	; 0x28
   13de4:	sub	r2, r0, #1
   13de8:	ldrb	r1, [r1, r2]
   13dec:	cmp	r1, #47	; 0x2f
   13df0:	ldr	r1, [r4, #24]
   13df4:	moveq	r0, r2
   13df8:	mov	r2, #47	; 0x2f
   13dfc:	strb	r2, [r1, r0]!
   13e00:	ldr	r2, [r5, #52]	; 0x34
   13e04:	add	r0, r1, #1
   13e08:	add	r1, r5, #168	; 0xa8
   13e0c:	add	r2, r2, #1
   13e10:	bl	117a8 <memmove@plt>
   13e14:	str	r5, [r4]
   13e18:	ldrh	r0, [r5, #56]	; 0x38
   13e1c:	cmp	r0, #11
   13e20:	bne	13e54 <__assert_fail@plt+0x2304>
   13e24:	ldrd	r0, [r5, #112]	; 0x70
   13e28:	eor	r2, r0, #1
   13e2c:	orrs	r2, r2, r1
   13e30:	beq	14084 <__assert_fail@plt+0x2534>
   13e34:	eor	r0, r0, #2
   13e38:	orrs	r0, r0, r1
   13e3c:	bne	1408c <__assert_fail@plt+0x253c>
   13e40:	mov	r0, r4
   13e44:	mov	r1, r5
   13e48:	mov	r2, #0
   13e4c:	bl	135d4 <__assert_fail@plt+0x1a84>
   13e50:	strh	r0, [r5, #56]	; 0x38
   13e54:	cmp	r0, #1
   13e58:	bne	14084 <__assert_fail@plt+0x2534>
   13e5c:	ldr	r0, [r5, #48]	; 0x30
   13e60:	cmp	r0, #0
   13e64:	ldrdeq	r0, [r5, #64]	; 0x40
   13e68:	strdeq	r0, [r4, #16]
   13e6c:	mov	r0, r4
   13e70:	mov	r1, r5
   13e74:	bl	14d24 <__assert_fail@plt+0x31d4>
   13e78:	cmp	r0, #0
   13e7c:	bne	14084 <__assert_fail@plt+0x2534>
   13e80:	bl	11994 <__errno_location@plt>
   13e84:	mov	r1, #12
   13e88:	mov	r5, #0
   13e8c:	str	r1, [r0]
   13e90:	b	14084 <__assert_fail@plt+0x2534>
   13e94:	ldrb	r0, [r4, #49]	; 0x31
   13e98:	mov	r5, #0
   13e9c:	tst	r0, #32
   13ea0:	bne	14084 <__assert_fail@plt+0x2534>
   13ea4:	ldr	r0, [r6, #32]
   13ea8:	cmp	r0, #0
   13eac:	ldrhne	r0, [r7]
   13eb0:	cmpne	r0, #4
   13eb4:	movne	r0, #7
   13eb8:	strhne	r0, [r7]
   13ebc:	b	13b64 <__assert_fail@plt+0x2014>
   13ec0:	ldrb	r0, [r4, #49]	; 0x31
   13ec4:	tst	r0, #32
   13ec8:	bne	14084 <__assert_fail@plt+0x2534>
   13ecc:	ldr	r5, [r6, #4]
   13ed0:	mov	r0, r6
   13ed4:	str	r5, [r4]
   13ed8:	bl	1319c <__assert_fail@plt+0x164c>
   13edc:	ldr	r0, [r5, #48]	; 0x30
   13ee0:	cmn	r0, #1
   13ee4:	beq	13f40 <__assert_fail@plt+0x23f0>
   13ee8:	ldrh	r0, [r5, #56]	; 0x38
   13eec:	cmp	r0, #11
   13ef0:	beq	1408c <__assert_fail@plt+0x253c>
   13ef4:	ldr	r0, [r5, #40]	; 0x28
   13ef8:	ldr	r1, [r4, #24]
   13efc:	mov	r2, #0
   13f00:	strb	r2, [r1, r0]
   13f04:	ldr	r0, [r5, #48]	; 0x30
   13f08:	cmp	r0, #0
   13f0c:	beq	13f74 <__assert_fail@plt+0x2424>
   13f10:	ldrh	r0, [r5, #58]	; 0x3a
   13f14:	tst	r0, #2
   13f18:	bne	13fa0 <__assert_fail@plt+0x2450>
   13f1c:	tst	r0, #1
   13f20:	bne	14048 <__assert_fail@plt+0x24f8>
   13f24:	ldr	r1, [r5, #4]
   13f28:	movw	r3, #41226	; 0xa10a
   13f2c:	mov	r0, r4
   13f30:	mvn	r2, #0
   13f34:	movt	r3, #1
   13f38:	bl	1415c <__assert_fail@plt+0x260c>
   13f3c:	b	13f7c <__assert_fail@plt+0x242c>
   13f40:	mov	r0, r5
   13f44:	bl	1319c <__assert_fail@plt+0x164c>
   13f48:	bl	11994 <__errno_location@plt>
   13f4c:	mov	r5, #0
   13f50:	str	r5, [r0]
   13f54:	str	r5, [r4]
   13f58:	b	14084 <__assert_fail@plt+0x2534>
   13f5c:	bl	11994 <__errno_location@plt>
   13f60:	ldr	r0, [r0]
   13f64:	mov	r1, #7
   13f68:	strh	r1, [r6, #56]	; 0x38
   13f6c:	str	r0, [r6, #32]
   13f70:	b	13afc <__assert_fail@plt+0x1fac>
   13f74:	mov	r0, r4
   13f78:	bl	14cc8 <__assert_fail@plt+0x3178>
   13f7c:	cmp	r0, #0
   13f80:	beq	14048 <__assert_fail@plt+0x24f8>
   13f84:	bl	11994 <__errno_location@plt>
   13f88:	ldr	r0, [r0]
   13f8c:	str	r0, [r5, #32]
   13f90:	ldr	r0, [r4, #48]	; 0x30
   13f94:	orr	r0, r0, #8192	; 0x2000
   13f98:	str	r0, [r4, #48]	; 0x30
   13f9c:	b	14048 <__assert_fail@plt+0x24f8>
   13fa0:	ldr	r0, [r4, #48]	; 0x30
   13fa4:	tst	r0, #4
   13fa8:	bne	14014 <__assert_fail@plt+0x24c4>
   13fac:	mov	r6, r5
   13fb0:	tst	r0, #512	; 0x200
   13fb4:	ldr	r1, [r6, #36]!	; 0x24
   13fb8:	bne	14034 <__assert_fail@plt+0x24e4>
   13fbc:	mov	r0, r1
   13fc0:	bl	11a6c <fchdir@plt>
   13fc4:	cmp	r0, #0
   13fc8:	beq	14040 <__assert_fail@plt+0x24f0>
   13fcc:	bl	11994 <__errno_location@plt>
   13fd0:	ldr	r0, [r0]
   13fd4:	str	r0, [r5, #32]
   13fd8:	ldr	r0, [r4, #48]	; 0x30
   13fdc:	orr	r0, r0, #8192	; 0x2000
   13fe0:	str	r0, [r4, #48]	; 0x30
   13fe4:	b	14040 <__assert_fail@plt+0x24f0>
   13fe8:	movw	r1, #41227	; 0xa10b
   13fec:	mov	r0, r4
   13ff0:	movt	r1, #1
   13ff4:	bl	1388c <__assert_fail@plt+0x1d3c>
   13ff8:	cmn	r0, #1
   13ffc:	str	r0, [r5, #36]	; 0x24
   14000:	ble	1401c <__assert_fail@plt+0x24cc>
   14004:	ldrh	r0, [r5, #58]	; 0x3a
   14008:	orr	r0, r0, #2
   1400c:	strh	r0, [r5, #58]	; 0x3a
   14010:	b	13bd8 <__assert_fail@plt+0x2088>
   14014:	add	r6, r5, #36	; 0x24
   14018:	b	14040 <__assert_fail@plt+0x24f0>
   1401c:	bl	11994 <__errno_location@plt>
   14020:	ldr	r0, [r0]
   14024:	mov	r1, #7
   14028:	strh	r1, [r5, #56]	; 0x38
   1402c:	str	r0, [r5, #32]
   14030:	b	13bd8 <__assert_fail@plt+0x2088>
   14034:	mov	r0, r4
   14038:	mov	r2, #1
   1403c:	bl	14dd8 <__assert_fail@plt+0x3288>
   14040:	ldr	r0, [r6]
   14044:	bl	11afc <close@plt>
   14048:	ldrh	r0, [r5, #56]	; 0x38
   1404c:	cmp	r0, #2
   14050:	beq	14078 <__assert_fail@plt+0x2528>
   14054:	ldr	r0, [r5, #32]
   14058:	mov	r1, #7
   1405c:	cmp	r0, #0
   14060:	movweq	r1, #6
   14064:	strh	r1, [r5, #56]	; 0x38
   14068:	bne	14078 <__assert_fail@plt+0x2528>
   1406c:	mov	r0, r4
   14070:	mov	r1, r5
   14074:	bl	14090 <__assert_fail@plt+0x2540>
   14078:	ldrb	r0, [r4, #49]	; 0x31
   1407c:	tst	r0, #32
   14080:	movne	r5, #0
   14084:	mov	r0, r5
   14088:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1408c:	bl	11af0 <abort@plt>
   14090:	push	{r4, r5, r6, r7, fp, lr}
   14094:	add	fp, sp, #16
   14098:	sub	sp, sp, #24
   1409c:	ldrh	r2, [r0, #48]	; 0x30
   140a0:	movw	r3, #258	; 0x102
   140a4:	add	lr, r1, #64	; 0x40
   140a8:	tst	r2, r3
   140ac:	beq	140e4 <__assert_fail@plt+0x2594>
   140b0:	ldrd	r2, [lr]
   140b4:	stm	sp, {r2, r3}
   140b8:	ldrd	r2, [r1, #160]	; 0xa0
   140bc:	mov	r1, sp
   140c0:	str	r3, [sp, #12]
   140c4:	str	r2, [sp, #8]
   140c8:	ldr	r0, [r0, #56]	; 0x38
   140cc:	bl	16010 <__assert_fail@plt+0x44c0>
   140d0:	cmp	r0, #0
   140d4:	beq	14158 <__assert_fail@plt+0x2608>
   140d8:	bl	1319c <__assert_fail@plt+0x164c>
   140dc:	sub	sp, fp, #16
   140e0:	pop	{r4, r5, r6, r7, fp, pc}
   140e4:	ldr	r2, [r1, #4]
   140e8:	cmp	r2, #0
   140ec:	beq	140dc <__assert_fail@plt+0x258c>
   140f0:	ldr	r3, [r2, #48]	; 0x30
   140f4:	cmp	r3, #0
   140f8:	blt	140dc <__assert_fail@plt+0x258c>
   140fc:	ldr	ip, [r0, #56]	; 0x38
   14100:	ldrd	r4, [ip, #16]
   14104:	orrs	r3, r4, r5
   14108:	beq	14158 <__assert_fail@plt+0x2608>
   1410c:	ldrd	r4, [r1, #160]	; 0xa0
   14110:	ldrd	r6, [ip]
   14114:	eor	r1, r7, r5
   14118:	eor	r3, r6, r4
   1411c:	orrs	r1, r3, r1
   14120:	bne	140dc <__assert_fail@plt+0x258c>
   14124:	ldr	r1, [ip, #8]!
   14128:	ldrd	r4, [lr]
   1412c:	ldr	r3, [ip, #4]
   14130:	eor	r1, r1, r4
   14134:	eor	r3, r3, r5
   14138:	orrs	r1, r1, r3
   1413c:	bne	140dc <__assert_fail@plt+0x258c>
   14140:	ldrd	r4, [r2, #64]	; 0x40
   14144:	strd	r4, [ip]
   14148:	ldr	r0, [r0, #56]	; 0x38
   1414c:	ldrd	r2, [r2, #160]	; 0xa0
   14150:	strd	r2, [r0]
   14154:	b	140dc <__assert_fail@plt+0x258c>
   14158:	bl	11af0 <abort@plt>
   1415c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14160:	add	fp, sp, #28
   14164:	sub	sp, sp, #108	; 0x6c
   14168:	mov	r7, r3
   1416c:	mov	r4, r2
   14170:	mov	r8, r1
   14174:	mov	sl, r0
   14178:	cmp	r3, #0
   1417c:	beq	141a0 <__assert_fail@plt+0x2650>
   14180:	movw	r1, #41226	; 0xa10a
   14184:	mov	r0, r7
   14188:	movt	r1, #1
   1418c:	bl	11778 <strcmp@plt>
   14190:	mov	r6, r0
   14194:	cmp	r0, #0
   14198:	movwne	r6, #1
   1419c:	b	141a4 <__assert_fail@plt+0x2654>
   141a0:	mov	r6, #1
   141a4:	ldr	r0, [sl, #48]	; 0x30
   141a8:	tst	r0, #4
   141ac:	bne	14204 <__assert_fail@plt+0x26b4>
   141b0:	cmn	r4, #1
   141b4:	mov	r1, #0
   141b8:	mov	r9, #0
   141bc:	movwgt	r1, #1
   141c0:	orrs	r1, r1, r6
   141c4:	bne	14224 <__assert_fail@plt+0x26d4>
   141c8:	ands	r0, r0, #512	; 0x200
   141cc:	beq	14224 <__assert_fail@plt+0x26d4>
   141d0:	add	r4, sl, #60	; 0x3c
   141d4:	mov	r0, r4
   141d8:	bl	16204 <__assert_fail@plt+0x46b4>
   141dc:	cmp	r0, #0
   141e0:	bne	1422c <__assert_fail@plt+0x26dc>
   141e4:	mov	r0, r4
   141e8:	bl	16258 <__assert_fail@plt+0x4708>
   141ec:	cmn	r0, #1
   141f0:	ble	1422c <__assert_fail@plt+0x26dc>
   141f4:	mov	r4, r0
   141f8:	mov	r9, #0
   141fc:	mov	r7, #0
   14200:	b	14248 <__assert_fail@plt+0x26f8>
   14204:	mov	r5, #0
   14208:	cmp	r4, #0
   1420c:	blt	14328 <__assert_fail@plt+0x27d8>
   14210:	ands	r0, r0, #512	; 0x200
   14214:	beq	14328 <__assert_fail@plt+0x27d8>
   14218:	mov	r0, r4
   1421c:	bl	11afc <close@plt>
   14220:	b	14328 <__assert_fail@plt+0x27d8>
   14224:	cmn	r4, #1
   14228:	bgt	14248 <__assert_fail@plt+0x26f8>
   1422c:	mov	r0, sl
   14230:	mov	r1, r7
   14234:	bl	1388c <__assert_fail@plt+0x1d3c>
   14238:	cmp	r0, #0
   1423c:	blt	142d8 <__assert_fail@plt+0x2788>
   14240:	mov	r4, r0
   14244:	mov	r9, #1
   14248:	ldr	r5, [sl, #48]	; 0x30
   1424c:	tst	r5, #2
   14250:	bne	14274 <__assert_fail@plt+0x2724>
   14254:	cmp	r7, #0
   14258:	beq	142c0 <__assert_fail@plt+0x2770>
   1425c:	movw	r1, #41226	; 0xa10a
   14260:	mov	r0, r7
   14264:	movt	r1, #1
   14268:	bl	11778 <strcmp@plt>
   1426c:	cmp	r0, #0
   14270:	bne	142c0 <__assert_fail@plt+0x2770>
   14274:	mov	r1, sp
   14278:	mov	r0, r4
   1427c:	bl	19b24 <lchmod@@Base+0x3874>
   14280:	cmp	r0, #0
   14284:	bne	14304 <__assert_fail@plt+0x27b4>
   14288:	ldrd	r0, [r8, #64]	; 0x40
   1428c:	ldm	sp, {r2, r3}
   14290:	eor	r1, r1, r3
   14294:	eor	r0, r0, r2
   14298:	orrs	r0, r0, r1
   1429c:	bne	142f8 <__assert_fail@plt+0x27a8>
   142a0:	ldrd	r0, [r8, #160]	; 0xa0
   142a4:	ldr	r2, [sp, #96]	; 0x60
   142a8:	ldr	r3, [sp, #100]	; 0x64
   142ac:	eor	r1, r1, r3
   142b0:	eor	r0, r0, r2
   142b4:	orrs	r0, r0, r1
   142b8:	bne	142f8 <__assert_fail@plt+0x27a8>
   142bc:	ldr	r5, [sl, #48]	; 0x30
   142c0:	tst	r5, #512	; 0x200
   142c4:	bne	142e0 <__assert_fail@plt+0x2790>
   142c8:	mov	r0, r4
   142cc:	bl	11a6c <fchdir@plt>
   142d0:	mov	r5, r0
   142d4:	b	14308 <__assert_fail@plt+0x27b8>
   142d8:	mvn	r5, #0
   142dc:	b	14328 <__assert_fail@plt+0x27d8>
   142e0:	mov	r0, sl
   142e4:	mov	r1, r4
   142e8:	mov	r2, r6
   142ec:	bl	14dd8 <__assert_fail@plt+0x3288>
   142f0:	mov	r5, #0
   142f4:	b	14328 <__assert_fail@plt+0x27d8>
   142f8:	bl	11994 <__errno_location@plt>
   142fc:	mov	r1, #2
   14300:	str	r1, [r0]
   14304:	mvn	r5, #0
   14308:	cmp	r9, #0
   1430c:	beq	14328 <__assert_fail@plt+0x27d8>
   14310:	bl	11994 <__errno_location@plt>
   14314:	ldr	r7, [r0]
   14318:	mov	r6, r0
   1431c:	mov	r0, r4
   14320:	bl	11afc <close@plt>
   14324:	str	r7, [r6]
   14328:	mov	r0, r5
   1432c:	sub	sp, fp, #28
   14330:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14334:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14338:	add	fp, sp, #28
   1433c:	sub	sp, sp, #68	; 0x44
   14340:	ldr	r8, [r0]
   14344:	mov	r4, r1
   14348:	mov	r6, r0
   1434c:	str	r0, [fp, #-40]	; 0xffffffd8
   14350:	ldr	r5, [r8, #12]
   14354:	cmp	r5, #0
   14358:	beq	1439c <__assert_fail@plt+0x284c>
   1435c:	mov	r0, r5
   14360:	bl	11a60 <dirfd@plt>
   14364:	cmn	r0, #1
   14368:	str	r0, [fp, #-32]	; 0xffffffe0
   1436c:	ble	143d8 <__assert_fail@plt+0x2888>
   14370:	ldr	r0, [r6, #44]!	; 0x2c
   14374:	mvn	r2, #0
   14378:	str	r5, [sp, #12]
   1437c:	cmp	r0, #0
   14380:	str	r6, [sp, #44]	; 0x2c
   14384:	add	r9, r6, #4
   14388:	mov	r6, #0
   1438c:	movweq	r2, #34464	; 0x86a0
   14390:	movteq	r2, #1
   14394:	str	r2, [sp, #24]
   14398:	b	145cc <__assert_fail@plt+0x2a7c>
   1439c:	mov	r9, r6
   143a0:	mvn	r0, #99	; 0x63
   143a4:	mov	r2, #0
   143a8:	str	r5, [sp, #12]
   143ac:	ldr	r3, [r9, #48]!	; 0x30
   143b0:	and	r1, r3, #516	; 0x204
   143b4:	cmp	r1, #512	; 0x200
   143b8:	ldr	r1, [r8, #24]
   143bc:	ldreq	r0, [r6, #32]
   143c0:	tst	r3, #16
   143c4:	beq	143f8 <__assert_fail@plt+0x28a8>
   143c8:	tst	r3, #1
   143cc:	bne	143ec <__assert_fail@plt+0x289c>
   143d0:	mov	r2, #32768	; 0x8000
   143d4:	b	143f8 <__assert_fail@plt+0x28a8>
   143d8:	ldr	r0, [r8, #12]
   143dc:	bl	11b2c <closedir@plt>
   143e0:	mov	r5, #0
   143e4:	str	r5, [r8, #12]
   143e8:	b	14434 <__assert_fail@plt+0x28e4>
   143ec:	ldr	r3, [r8, #48]	; 0x30
   143f0:	cmp	r3, #0
   143f4:	movne	r2, #32768	; 0x8000
   143f8:	sub	r3, fp, #32
   143fc:	bl	168b8 <lchmod@@Base+0x608>
   14400:	cmp	r0, #0
   14404:	str	r0, [r8, #12]
   14408:	beq	14430 <__assert_fail@plt+0x28e0>
   1440c:	ldrh	r0, [r8, #56]	; 0x38
   14410:	cmp	r0, #11
   14414:	bne	14454 <__assert_fail@plt+0x2904>
   14418:	mov	r0, r6
   1441c:	mov	r1, r8
   14420:	mov	r2, #0
   14424:	bl	135d4 <__assert_fail@plt+0x1a84>
   14428:	strh	r0, [r8, #56]	; 0x38
   1442c:	b	14494 <__assert_fail@plt+0x2944>
   14430:	mov	r5, #0
   14434:	cmp	r4, #3
   14438:	bne	14c64 <__assert_fail@plt+0x3114>
   1443c:	mov	r0, #4
   14440:	strh	r0, [r8, #56]	; 0x38
   14444:	bl	11994 <__errno_location@plt>
   14448:	ldr	r0, [r0]
   1444c:	str	r0, [r8, #32]
   14450:	b	14c64 <__assert_fail@plt+0x3114>
   14454:	ldrb	r0, [r9, #1]
   14458:	tst	r0, #1
   1445c:	beq	14494 <__assert_fail@plt+0x2944>
   14460:	mov	r0, r6
   14464:	mov	r1, r8
   14468:	bl	14090 <__assert_fail@plt+0x2540>
   1446c:	mov	r0, r6
   14470:	mov	r1, r8
   14474:	mov	r2, #0
   14478:	mov	r5, #0
   1447c:	bl	135d4 <__assert_fail@plt+0x1a84>
   14480:	mov	r0, r6
   14484:	mov	r1, r8
   14488:	bl	14d24 <__assert_fail@plt+0x31d4>
   1448c:	cmp	r0, #0
   14490:	beq	14a78 <__assert_fail@plt+0x2f28>
   14494:	mov	r1, r6
   14498:	mov	sl, r6
   1449c:	ldr	r0, [r1, #44]!	; 0x2c
   144a0:	str	r1, [sp, #44]	; 0x2c
   144a4:	mvn	r1, #0
   144a8:	cmp	r0, #0
   144ac:	movweq	r1, #34464	; 0x86a0
   144b0:	movteq	r1, #1
   144b4:	cmp	r4, #2
   144b8:	str	r1, [sp, #24]
   144bc:	bne	144e0 <__assert_fail@plt+0x2990>
   144c0:	mov	r6, #1
   144c4:	cmp	r4, #3
   144c8:	bne	145cc <__assert_fail@plt+0x2a7c>
   144cc:	sub	r0, r4, #3
   144d0:	mov	r7, r8
   144d4:	mov	r8, r4
   144d8:	mov	r5, #0
   144dc:	b	14508 <__assert_fail@plt+0x29b8>
   144e0:	ldr	r0, [r9]
   144e4:	and	r0, r0, #56	; 0x38
   144e8:	cmp	r0, #24
   144ec:	ldreq	r0, [r8, #84]	; 0x54
   144f0:	cmpeq	r0, #2
   144f4:	beq	14c70 <__assert_fail@plt+0x3120>
   144f8:	sub	r0, r4, #3
   144fc:	mov	r7, r8
   14500:	mov	r8, r4
   14504:	mov	r5, #1
   14508:	clz	r0, r0
   1450c:	lsr	r4, r0, #5
   14510:	ldrb	r0, [r9, #1]
   14514:	ldr	r2, [fp, #-32]	; 0xffffffe0
   14518:	tst	r0, #2
   1451c:	beq	14538 <__assert_fail@plt+0x29e8>
   14520:	mov	r0, r2
   14524:	movw	r1, #1030	; 0x406
   14528:	mov	r2, #3
   1452c:	bl	193f0 <lchmod@@Base+0x3140>
   14530:	mov	r2, r0
   14534:	str	r0, [fp, #-32]	; 0xffffffe0
   14538:	cmp	r2, #0
   1453c:	blt	14558 <__assert_fail@plt+0x2a08>
   14540:	mov	r0, sl
   14544:	mov	r1, r7
   14548:	mov	r3, #0
   1454c:	bl	1415c <__assert_fail@plt+0x260c>
   14550:	cmp	r0, #0
   14554:	beq	145c0 <__assert_fail@plt+0x2a70>
   14558:	and	r0, r4, r5
   1455c:	cmp	r0, #1
   14560:	bne	14570 <__assert_fail@plt+0x2a20>
   14564:	bl	11994 <__errno_location@plt>
   14568:	ldr	r0, [r0]
   1456c:	str	r0, [r7, #32]
   14570:	ldrh	r0, [r7, #58]	; 0x3a
   14574:	orr	r0, r0, #1
   14578:	strh	r0, [r7, #58]	; 0x3a
   1457c:	ldr	r0, [r7, #12]
   14580:	bl	11b2c <closedir@plt>
   14584:	mov	r4, #0
   14588:	mov	r5, r7
   1458c:	str	r4, [r7, #12]
   14590:	ldr	r0, [r9]
   14594:	tst	r0, #512	; 0x200
   14598:	beq	145ac <__assert_fail@plt+0x2a5c>
   1459c:	ldr	r0, [fp, #-32]	; 0xffffffe0
   145a0:	cmp	r0, #0
   145a4:	blt	145ac <__assert_fail@plt+0x2a5c>
   145a8:	bl	11afc <close@plt>
   145ac:	str	r4, [r5, #12]
   145b0:	mov	r4, r8
   145b4:	mov	r6, #1
   145b8:	mov	r8, r5
   145bc:	b	145cc <__assert_fail@plt+0x2a7c>
   145c0:	mov	r4, r8
   145c4:	mov	r6, #0
   145c8:	mov	r8, r7
   145cc:	ldr	r0, [r8, #40]	; 0x28
   145d0:	ldr	r1, [r8, #28]
   145d4:	mov	r5, #0
   145d8:	str	r4, [sp, #4]
   145dc:	sub	r2, r0, #1
   145e0:	ldrb	r1, [r1, r2]
   145e4:	cmp	r1, #47	; 0x2f
   145e8:	ldrb	r1, [r9]
   145ec:	moveq	r0, r2
   145f0:	tst	r1, #4
   145f4:	mov	r1, #0
   145f8:	str	r1, [sp, #36]	; 0x24
   145fc:	beq	14618 <__assert_fail@plt+0x2ac8>
   14600:	ldr	r1, [fp, #-40]	; 0xffffffd8
   14604:	mov	r2, #47	; 0x2f
   14608:	ldr	r1, [r1, #24]
   1460c:	strb	r2, [r1, r0]!
   14610:	add	r1, r1, #1
   14614:	str	r1, [sp, #36]	; 0x24
   14618:	ldr	r4, [r8, #12]
   1461c:	add	r0, r0, #1
   14620:	str	r0, [sp, #48]	; 0x30
   14624:	cmp	r4, #0
   14628:	beq	14950 <__assert_fail@plt+0x2e00>
   1462c:	mov	r1, r0
   14630:	ldr	r0, [r8, #48]	; 0x30
   14634:	str	r6, [sp]
   14638:	mov	r6, #0
   1463c:	add	r0, r0, #1
   14640:	str	r0, [sp, #20]
   14644:	ldr	r0, [fp, #-40]	; 0xffffffd8
   14648:	ldr	r0, [r0, #36]	; 0x24
   1464c:	sub	r0, r0, r1
   14650:	str	r0, [fp, #-44]	; 0xffffffd4
   14654:	bl	11994 <__errno_location@plt>
   14658:	str	r0, [sp, #28]
   1465c:	mov	r0, #0
   14660:	mov	r5, #0
   14664:	mov	r7, #0
   14668:	str	r8, [sp, #32]
   1466c:	str	r9, [fp, #-36]	; 0xffffffdc
   14670:	str	r0, [sp, #40]	; 0x28
   14674:	mov	r0, #0
   14678:	str	r0, [sp, #16]
   1467c:	mov	r0, #0
   14680:	str	r0, [sp, #8]
   14684:	ldr	r0, [sp, #28]
   14688:	str	r6, [r0]
   1468c:	mov	r0, r4
   14690:	bl	11a3c <readdir64@plt>
   14694:	cmp	r0, #0
   14698:	beq	149b0 <__assert_fail@plt+0x2e60>
   1469c:	mov	sl, r0
   146a0:	ldrb	r0, [r9]
   146a4:	ldr	r6, [fp, #-40]	; 0xffffffd8
   146a8:	add	r4, sl, #19
   146ac:	tst	r0, #32
   146b0:	ldrbeq	r0, [r4]
   146b4:	cmpeq	r0, #46	; 0x2e
   146b8:	beq	14758 <__assert_fail@plt+0x2c08>
   146bc:	mov	r0, r4
   146c0:	bl	11964 <strlen@plt>
   146c4:	mov	r8, r0
   146c8:	mov	r0, r6
   146cc:	mov	r1, r4
   146d0:	mov	r2, r8
   146d4:	bl	13554 <__assert_fail@plt+0x1a04>
   146d8:	mov	r9, r0
   146dc:	cmp	r0, #0
   146e0:	beq	14964 <__assert_fail@plt+0x2e14>
   146e4:	ldr	r1, [fp, #-44]	; 0xffffffd4
   146e8:	cmp	r8, r1
   146ec:	bcs	14700 <__assert_fail@plt+0x2bb0>
   146f0:	ldr	r2, [sp, #48]	; 0x30
   146f4:	add	r4, r8, r2
   146f8:	mov	r8, r6
   146fc:	b	1478c <__assert_fail@plt+0x2c3c>
   14700:	ldr	r1, [sp, #48]	; 0x30
   14704:	add	r4, r8, r1
   14708:	mov	r8, r6
   1470c:	ldr	r6, [r6, #24]
   14710:	add	r1, r4, #1
   14714:	mov	r0, r8
   14718:	bl	134e0 <__assert_fail@plt+0x1990>
   1471c:	cmp	r0, #0
   14720:	beq	14964 <__assert_fail@plt+0x2e14>
   14724:	ldr	r0, [r8, #24]
   14728:	cmp	r6, r0
   1472c:	beq	14780 <__assert_fail@plt+0x2c30>
   14730:	ldr	r1, [fp, #-36]	; 0xffffffdc
   14734:	ldr	r2, [sp, #48]	; 0x30
   14738:	ldrb	r1, [r1]
   1473c:	tst	r1, #4
   14740:	ldr	r1, [sp, #36]	; 0x24
   14744:	addne	r1, r0, r2
   14748:	mov	r0, #1
   1474c:	str	r1, [sp, #36]	; 0x24
   14750:	str	r0, [sp, #8]
   14754:	b	14784 <__assert_fail@plt+0x2c34>
   14758:	ldrb	r0, [sl, #20]
   1475c:	cmp	r0, #0
   14760:	beq	14774 <__assert_fail@plt+0x2c24>
   14764:	cmp	r0, #46	; 0x2e
   14768:	ldrbeq	r0, [sl, #21]
   1476c:	cmpeq	r0, #0
   14770:	bne	146bc <__assert_fail@plt+0x2b6c>
   14774:	ldr	r8, [sp, #32]
   14778:	mov	r6, #0
   1477c:	b	14938 <__assert_fail@plt+0x2de8>
   14780:	ldr	r2, [sp, #48]	; 0x30
   14784:	ldr	r0, [r8, #36]	; 0x24
   14788:	sub	r1, r0, r2
   1478c:	cmp	r4, r2
   14790:	bcc	14a08 <__assert_fail@plt+0x2eb8>
   14794:	ldr	r0, [sp, #20]
   14798:	str	r1, [fp, #-44]	; 0xffffffd4
   1479c:	str	r0, [r9, #48]	; 0x30
   147a0:	ldr	r0, [r8]
   147a4:	str	r4, [r9, #40]	; 0x28
   147a8:	str	r0, [r9, #4]
   147ac:	ldrd	r0, [sl]
   147b0:	strd	r0, [r9, #160]	; 0xa0
   147b4:	ldrb	r0, [r8, #48]	; 0x30
   147b8:	tst	r0, #4
   147bc:	bne	147cc <__assert_fail@plt+0x2c7c>
   147c0:	add	r0, r9, #168	; 0xa8
   147c4:	str	r0, [r9, #24]
   147c8:	b	147e8 <__assert_fail@plt+0x2c98>
   147cc:	ldr	r0, [r9, #28]
   147d0:	ldr	r2, [r9, #52]	; 0x34
   147d4:	add	r1, r9, #168	; 0xa8
   147d8:	str	r0, [r9, #24]
   147dc:	ldr	r0, [sp, #36]	; 0x24
   147e0:	add	r2, r2, #1
   147e4:	bl	117a8 <memmove@plt>
   147e8:	ldr	r0, [sp, #44]	; 0x2c
   147ec:	ldr	r1, [fp, #-36]	; 0xffffffdc
   147f0:	ldr	r0, [r0]
   147f4:	ldr	r2, [r1]
   147f8:	cmp	r0, #0
   147fc:	beq	14824 <__assert_fail@plt+0x2cd4>
   14800:	ands	r0, r2, #1024	; 0x400
   14804:	bne	14824 <__assert_fail@plt+0x2cd4>
   14808:	mov	r0, r8
   1480c:	mov	r1, r9
   14810:	mov	r2, #0
   14814:	bl	135d4 <__assert_fail@plt+0x1a84>
   14818:	mov	r6, #0
   1481c:	strh	r0, [r9, #56]	; 0x38
   14820:	b	14898 <__assert_fail@plt+0x2d48>
   14824:	ldrb	r3, [sl, #18]
   14828:	mov	r0, #0
   1482c:	tst	r2, #8
   14830:	mov	r1, #0
   14834:	beq	14858 <__assert_fail@plt+0x2d08>
   14838:	orr	r1, r3, #4
   1483c:	cmp	r1, #4
   14840:	mov	r1, #0
   14844:	beq	14858 <__assert_fail@plt+0x2d08>
   14848:	eor	r1, r3, #10
   1484c:	and	r2, r2, #16
   14850:	orrs	r1, r2, r1
   14854:	movwne	r1, #1
   14858:	mov	r2, #11
   1485c:	mov	r6, #0
   14860:	strh	r2, [r9, #56]	; 0x38
   14864:	sub	r2, r3, #1
   14868:	uxtb	r3, r2
   1486c:	cmp	r3, #11
   14870:	sxtbls	r0, r2
   14874:	movwls	r2, #41232	; 0xa110
   14878:	movtls	r2, #1
   1487c:	ldrls	r0, [r2, r0, lsl #2]
   14880:	cmp	r1, #0
   14884:	str	r0, [r9, #80]	; 0x50
   14888:	mov	r0, #2
   1488c:	movwne	r0, #1
   14890:	str	r0, [r9, #112]	; 0x70
   14894:	str	r6, [r9, #116]	; 0x74
   14898:	cmp	r5, #0
   1489c:	mov	r4, r9
   148a0:	str	r6, [r9, #8]
   148a4:	ldrne	r0, [sp, #40]	; 0x28
   148a8:	movne	r4, r5
   148ac:	strne	r9, [r0, #8]
   148b0:	movw	r0, #10000	; 0x2710
   148b4:	cmp	r7, r0
   148b8:	bne	1490c <__assert_fail@plt+0x2dbc>
   148bc:	ldr	r0, [sp, #44]	; 0x2c
   148c0:	ldr	r0, [r0]
   148c4:	cmp	r0, #0
   148c8:	bne	1490c <__assert_fail@plt+0x2dbc>
   148cc:	ldr	r1, [fp, #-32]	; 0xffffffe0
   148d0:	ldr	r0, [sp, #32]
   148d4:	bl	15070 <__assert_fail@plt+0x3520>
   148d8:	mov	r1, #0
   148dc:	str	r1, [sp, #16]
   148e0:	movw	r1, #19778	; 0x4d42
   148e4:	movt	r1, #65363	; 0xff53
   148e8:	cmp	r0, r1
   148ec:	movwne	r1, #26985	; 0x6969
   148f0:	cmpne	r0, r1
   148f4:	beq	1490c <__assert_fail@plt+0x2dbc>
   148f8:	movw	r1, #6548	; 0x1994
   148fc:	movt	r1, #258	; 0x102
   14900:	cmp	r0, r1
   14904:	movne	r0, #1
   14908:	strne	r0, [sp, #16]
   1490c:	ldr	r0, [sp, #24]
   14910:	add	r7, r7, #1
   14914:	cmp	r0, r7
   14918:	mov	r0, #0
   1491c:	movwls	r0, #15
   14920:	cmp	r0, #0
   14924:	bne	14a54 <__assert_fail@plt+0x2f04>
   14928:	str	r9, [sp, #40]	; 0x28
   1492c:	ldr	r9, [fp, #-36]	; 0xffffffdc
   14930:	ldr	r8, [sp, #32]
   14934:	mov	r5, r4
   14938:	ldr	r4, [r8, #12]
   1493c:	cmp	r4, #0
   14940:	bne	14684 <__assert_fail@plt+0x2b34>
   14944:	ldr	r0, [sp, #8]
   14948:	ldr	r4, [sp, #4]
   1494c:	b	149f8 <__assert_fail@plt+0x2ea8>
   14950:	ldr	r4, [sp, #4]
   14954:	mov	r7, #0
   14958:	mov	r0, #0
   1495c:	str	r0, [sp, #16]
   14960:	b	14b20 <__assert_fail@plt+0x2fd0>
   14964:	ldr	r4, [sp, #28]
   14968:	mov	r0, r9
   1496c:	ldr	r8, [r4]
   14970:	bl	1319c <__assert_fail@plt+0x164c>
   14974:	mov	r0, r5
   14978:	bl	138bc <__assert_fail@plt+0x1d6c>
   1497c:	ldr	r6, [sp, #32]
   14980:	ldr	r0, [r6, #12]
   14984:	bl	11b2c <closedir@plt>
   14988:	ldr	r7, [fp, #-36]	; 0xffffffdc
   1498c:	mov	r5, #0
   14990:	mov	r0, #7
   14994:	str	r5, [r6, #12]
   14998:	strh	r0, [r6, #56]	; 0x38
   1499c:	ldr	r0, [r7]
   149a0:	orr	r0, r0, #8192	; 0x2000
   149a4:	str	r0, [r7]
   149a8:	str	r8, [r4]
   149ac:	b	14c64 <__assert_fail@plt+0x3114>
   149b0:	ldr	r0, [sp, #28]
   149b4:	ldr	r0, [r0]
   149b8:	cmp	r0, #0
   149bc:	beq	149d8 <__assert_fail@plt+0x2e88>
   149c0:	str	r0, [r8, #32]
   149c4:	ldr	r0, [sp, #12]
   149c8:	orrs	r0, r0, r7
   149cc:	mov	r0, #4
   149d0:	movwne	r0, #7
   149d4:	strh	r0, [r8, #56]	; 0x38
   149d8:	ldr	r0, [r8, #12]
   149dc:	ldr	r4, [sp, #4]
   149e0:	cmp	r0, #0
   149e4:	beq	14a88 <__assert_fail@plt+0x2f38>
   149e8:	bl	11b2c <closedir@plt>
   149ec:	mov	r0, #0
   149f0:	str	r0, [r8, #12]
   149f4:	ldr	r0, [sp, #8]
   149f8:	tst	r0, #1
   149fc:	ldr	r6, [sp]
   14a00:	bne	14a98 <__assert_fail@plt+0x2f48>
   14a04:	b	14b20 <__assert_fail@plt+0x2fd0>
   14a08:	mov	r0, r9
   14a0c:	bl	1319c <__assert_fail@plt+0x164c>
   14a10:	mov	r0, r5
   14a14:	bl	138bc <__assert_fail@plt+0x1d6c>
   14a18:	ldr	r4, [sp, #32]
   14a1c:	ldr	r0, [r4, #12]
   14a20:	bl	11b2c <closedir@plt>
   14a24:	ldr	r7, [fp, #-36]	; 0xffffffdc
   14a28:	mov	r5, #0
   14a2c:	mov	r0, #7
   14a30:	ldr	r1, [sp, #28]
   14a34:	str	r5, [r4, #12]
   14a38:	strh	r0, [r4, #56]	; 0x38
   14a3c:	ldr	r0, [r7]
   14a40:	orr	r0, r0, #8192	; 0x2000
   14a44:	str	r0, [r7]
   14a48:	mov	r0, #36	; 0x24
   14a4c:	str	r0, [r1]
   14a50:	b	14c64 <__assert_fail@plt+0x3114>
   14a54:	ldr	r6, [sp]
   14a58:	cmp	r0, #15
   14a5c:	bne	14c60 <__assert_fail@plt+0x3110>
   14a60:	mov	r5, r4
   14a64:	ldr	r9, [fp, #-36]	; 0xffffffdc
   14a68:	ldr	r4, [sp, #4]
   14a6c:	ldr	r0, [sp, #8]
   14a70:	ldr	r8, [sp, #32]
   14a74:	b	14a90 <__assert_fail@plt+0x2f40>
   14a78:	bl	11994 <__errno_location@plt>
   14a7c:	mov	r1, #12
   14a80:	str	r1, [r0]
   14a84:	b	14c64 <__assert_fail@plt+0x3114>
   14a88:	ldr	r6, [sp]
   14a8c:	ldr	r0, [sp, #8]
   14a90:	tst	r0, #1
   14a94:	beq	14b20 <__assert_fail@plt+0x2fd0>
   14a98:	ldr	r0, [fp, #-40]	; 0xffffffd8
   14a9c:	ldr	r1, [r0, #4]
   14aa0:	ldr	r0, [r0, #24]
   14aa4:	b	14acc <__assert_fail@plt+0x2f7c>
   14aa8:	ldr	r2, [r1, #24]
   14aac:	add	r3, r1, #168	; 0xa8
   14ab0:	cmp	r2, r3
   14ab4:	ldrne	r3, [r1, #28]
   14ab8:	subne	r2, r2, r3
   14abc:	addne	r2, r0, r2
   14ac0:	strne	r2, [r1, #24]
   14ac4:	str	r0, [r1, #28]
   14ac8:	ldr	r1, [r1, #8]
   14acc:	cmp	r1, #0
   14ad0:	bne	14aa8 <__assert_fail@plt+0x2f58>
   14ad4:	ldr	r1, [r5, #48]	; 0x30
   14ad8:	cmp	r1, #0
   14adc:	blt	14b20 <__assert_fail@plt+0x2fd0>
   14ae0:	mov	r1, r5
   14ae4:	ldr	r2, [r1, #24]
   14ae8:	add	r3, r1, #168	; 0xa8
   14aec:	cmp	r2, r3
   14af0:	ldrne	r3, [r1, #28]
   14af4:	subne	r2, r2, r3
   14af8:	addne	r2, r0, r2
   14afc:	strne	r2, [r1, #24]
   14b00:	str	r0, [r1, #28]
   14b04:	ldr	r2, [r1, #8]
   14b08:	cmp	r2, #0
   14b0c:	ldreq	r2, [r1, #4]
   14b10:	ldr	r1, [r2, #48]	; 0x30
   14b14:	cmn	r1, #1
   14b18:	mov	r1, r2
   14b1c:	bgt	14ae4 <__assert_fail@plt+0x2f94>
   14b20:	ldrb	r0, [r9]
   14b24:	tst	r0, #4
   14b28:	beq	14b58 <__assert_fail@plt+0x3008>
   14b2c:	ldr	r0, [fp, #-40]	; 0xffffffd8
   14b30:	ldr	r2, [sp, #36]	; 0x24
   14b34:	ldr	r3, [sp, #48]	; 0x30
   14b38:	ldr	r0, [r0, #36]	; 0x24
   14b3c:	sub	r1, r2, #1
   14b40:	cmp	r3, r0
   14b44:	mov	r0, #0
   14b48:	moveq	r2, r1
   14b4c:	cmp	r7, #0
   14b50:	moveq	r2, r1
   14b54:	strb	r0, [r2]
   14b58:	ldr	r0, [sp, #12]
   14b5c:	cmp	r0, #0
   14b60:	movwne	r0, #1
   14b64:	orrs	r0, r0, r6
   14b68:	beq	14b94 <__assert_fail@plt+0x3044>
   14b6c:	cmp	r7, #0
   14b70:	bne	14bc8 <__assert_fail@plt+0x3078>
   14b74:	cmp	r4, #3
   14b78:	bne	14c58 <__assert_fail@plt+0x3108>
   14b7c:	ldrh	r0, [r8, #56]	; 0x38
   14b80:	cmp	r0, #4
   14b84:	cmpne	r0, #7
   14b88:	movne	r0, #6
   14b8c:	strhne	r0, [r8, #56]	; 0x38
   14b90:	b	14c58 <__assert_fail@plt+0x3108>
   14b94:	cmp	r4, #1
   14b98:	cmpne	r7, #0
   14b9c:	bne	14bc8 <__assert_fail@plt+0x3078>
   14ba0:	ldr	r0, [r8, #48]	; 0x30
   14ba4:	cmp	r0, #0
   14ba8:	beq	14c34 <__assert_fail@plt+0x30e4>
   14bac:	ldr	r1, [r8, #4]
   14bb0:	ldr	r0, [fp, #-40]	; 0xffffffd8
   14bb4:	movw	r3, #41226	; 0xa10a
   14bb8:	mvn	r2, #0
   14bbc:	movt	r3, #1
   14bc0:	bl	1415c <__assert_fail@plt+0x260c>
   14bc4:	b	14c3c <__assert_fail@plt+0x30ec>
   14bc8:	ldr	r0, [sp, #16]
   14bcc:	tst	r0, #1
   14bd0:	beq	14c04 <__assert_fail@plt+0x30b4>
   14bd4:	ldr	r4, [fp, #-40]	; 0xffffffd8
   14bd8:	movw	r0, #20536	; 0x5038
   14bdc:	mov	r1, r5
   14be0:	mov	r2, r7
   14be4:	movt	r0, #1
   14be8:	str	r0, [r4, #44]	; 0x2c
   14bec:	mov	r0, r4
   14bf0:	bl	13708 <__assert_fail@plt+0x1bb8>
   14bf4:	mov	r5, r0
   14bf8:	mov	r0, #0
   14bfc:	str	r0, [r4, #44]	; 0x2c
   14c00:	b	14c64 <__assert_fail@plt+0x3114>
   14c04:	cmp	r7, #2
   14c08:	bcc	14c64 <__assert_fail@plt+0x3114>
   14c0c:	ldr	r0, [sp, #44]	; 0x2c
   14c10:	ldr	r0, [r0]
   14c14:	cmp	r0, #0
   14c18:	beq	14c64 <__assert_fail@plt+0x3114>
   14c1c:	ldr	r0, [fp, #-40]	; 0xffffffd8
   14c20:	mov	r1, r5
   14c24:	mov	r2, r7
   14c28:	bl	13708 <__assert_fail@plt+0x1bb8>
   14c2c:	mov	r5, r0
   14c30:	b	14c64 <__assert_fail@plt+0x3114>
   14c34:	ldr	r0, [fp, #-40]	; 0xffffffd8
   14c38:	bl	14cc8 <__assert_fail@plt+0x3178>
   14c3c:	cmp	r0, #0
   14c40:	beq	14b6c <__assert_fail@plt+0x301c>
   14c44:	mov	r0, #7
   14c48:	strh	r0, [r8, #56]	; 0x38
   14c4c:	ldr	r0, [r9]
   14c50:	orr	r0, r0, #8192	; 0x2000
   14c54:	str	r0, [r9]
   14c58:	mov	r0, r5
   14c5c:	bl	138bc <__assert_fail@plt+0x1d6c>
   14c60:	mov	r5, #0
   14c64:	mov	r0, r5
   14c68:	sub	sp, fp, #28
   14c6c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14c70:	ldr	r1, [fp, #-32]	; 0xffffffe0
   14c74:	mov	r0, r8
   14c78:	bl	15070 <__assert_fail@plt+0x3520>
   14c7c:	movw	r1, #26984	; 0x6968
   14c80:	cmp	r0, r1
   14c84:	ble	14cb0 <__assert_fail@plt+0x3160>
   14c88:	movw	r1, #26985	; 0x6969
   14c8c:	cmp	r0, r1
   14c90:	movwne	r1, #16719	; 0x414f
   14c94:	movtne	r1, #21318	; 0x5346
   14c98:	cmpne	r0, r1
   14c9c:	beq	144f8 <__assert_fail@plt+0x29a8>
   14ca0:	movw	r1, #40864	; 0x9fa0
   14ca4:	cmp	r0, r1
   14ca8:	beq	144f8 <__assert_fail@plt+0x29a8>
   14cac:	b	144c0 <__assert_fail@plt+0x2970>
   14cb0:	movw	r1, #19778	; 0x4d42
   14cb4:	movt	r1, #65363	; 0xff53
   14cb8:	cmp	r0, r1
   14cbc:	cmpne	r0, #0
   14cc0:	beq	144f8 <__assert_fail@plt+0x29a8>
   14cc4:	b	144c0 <__assert_fail@plt+0x2970>
   14cc8:	push	{r4, r5, fp, lr}
   14ccc:	add	fp, sp, #8
   14cd0:	mov	r4, r0
   14cd4:	ldr	r0, [r0, #48]	; 0x30
   14cd8:	mov	r5, #0
   14cdc:	tst	r0, #4
   14ce0:	bne	14d14 <__assert_fail@plt+0x31c4>
   14ce4:	tst	r0, #512	; 0x200
   14ce8:	bne	14d04 <__assert_fail@plt+0x31b4>
   14cec:	ldr	r0, [r4, #28]
   14cf0:	bl	11a6c <fchdir@plt>
   14cf4:	mov	r5, r0
   14cf8:	cmp	r0, #0
   14cfc:	movwne	r5, #1
   14d00:	b	14d14 <__assert_fail@plt+0x31c4>
   14d04:	mov	r0, r4
   14d08:	mvn	r1, #99	; 0x63
   14d0c:	mov	r2, #1
   14d10:	bl	14dd8 <__assert_fail@plt+0x3288>
   14d14:	add	r0, r4, #60	; 0x3c
   14d18:	bl	13a20 <__assert_fail@plt+0x1ed0>
   14d1c:	mov	r0, r5
   14d20:	pop	{r4, r5, fp, pc}
   14d24:	push	{r4, r5, r6, r7, fp, lr}
   14d28:	add	fp, sp, #16
   14d2c:	mov	r6, r0
   14d30:	ldrh	r0, [r0, #48]	; 0x30
   14d34:	mov	r4, r1
   14d38:	movw	r1, #258	; 0x102
   14d3c:	tst	r0, r1
   14d40:	beq	14db0 <__assert_fail@plt+0x3260>
   14d44:	mov	r0, #24
   14d48:	bl	190e8 <lchmod@@Base+0x2e38>
   14d4c:	mov	r5, #0
   14d50:	cmp	r0, #0
   14d54:	beq	14dd0 <__assert_fail@plt+0x3280>
   14d58:	mov	r7, r0
   14d5c:	ldrd	r0, [r4, #64]	; 0x40
   14d60:	add	r2, r7, #8
   14d64:	stm	r7, {r0, r1}
   14d68:	ldrd	r0, [r4, #160]	; 0xa0
   14d6c:	stm	r2, {r0, r1, r4}
   14d70:	mov	r1, r7
   14d74:	ldr	r0, [r6, #56]	; 0x38
   14d78:	bl	15fd0 <__assert_fail@plt+0x4480>
   14d7c:	cmp	r0, r7
   14d80:	beq	14da8 <__assert_fail@plt+0x3258>
   14d84:	mov	r6, r0
   14d88:	mov	r0, r7
   14d8c:	bl	1319c <__assert_fail@plt+0x164c>
   14d90:	cmp	r6, #0
   14d94:	beq	14dd0 <__assert_fail@plt+0x3280>
   14d98:	ldr	r0, [r6, #16]
   14d9c:	mov	r1, #2
   14da0:	strh	r1, [r4, #56]	; 0x38
   14da4:	str	r0, [r4]
   14da8:	mov	r5, #1
   14dac:	b	14dd0 <__assert_fail@plt+0x3280>
   14db0:	ldr	r0, [r6, #56]	; 0x38
   14db4:	add	r1, r4, #64	; 0x40
   14db8:	bl	19284 <lchmod@@Base+0x2fd4>
   14dbc:	cmp	r0, #0
   14dc0:	mov	r5, #1
   14dc4:	movne	r0, #2
   14dc8:	strhne	r0, [r4, #56]	; 0x38
   14dcc:	strne	r4, [r4]
   14dd0:	mov	r0, r5
   14dd4:	pop	{r4, r5, r6, r7, fp, pc}
   14dd8:	push	{r4, r5, fp, lr}
   14ddc:	add	fp, sp, #8
   14de0:	mov	r4, r1
   14de4:	ldr	r1, [r0, #32]
   14de8:	mov	r5, r0
   14dec:	cmp	r1, r4
   14df0:	bne	14dfc <__assert_fail@plt+0x32ac>
   14df4:	cmn	r1, #100	; 0x64
   14df8:	bne	14e3c <__assert_fail@plt+0x32ec>
   14dfc:	cmp	r2, #0
   14e00:	beq	14e18 <__assert_fail@plt+0x32c8>
   14e04:	add	r0, r5, #60	; 0x3c
   14e08:	bl	1620c <__assert_fail@plt+0x46bc>
   14e0c:	cmp	r0, #0
   14e10:	bge	14e30 <__assert_fail@plt+0x32e0>
   14e14:	b	14e34 <__assert_fail@plt+0x32e4>
   14e18:	cmp	r1, #0
   14e1c:	blt	14e34 <__assert_fail@plt+0x32e4>
   14e20:	ldr	r0, [r5, #48]	; 0x30
   14e24:	ands	r0, r0, #4
   14e28:	bne	14e34 <__assert_fail@plt+0x32e4>
   14e2c:	mov	r0, r1
   14e30:	bl	11afc <close@plt>
   14e34:	str	r4, [r5, #32]
   14e38:	pop	{r4, r5, fp, pc}
   14e3c:	bl	11af0 <abort@plt>
   14e40:	cmp	r2, #5
   14e44:	movcc	r0, #0
   14e48:	strhcc	r2, [r1, #60]	; 0x3c
   14e4c:	bxcc	lr
   14e50:	push	{fp, lr}
   14e54:	mov	fp, sp
   14e58:	bl	11994 <__errno_location@plt>
   14e5c:	mov	r1, #22
   14e60:	str	r1, [r0]
   14e64:	mov	r0, #1
   14e68:	pop	{fp, pc}
   14e6c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14e70:	add	fp, sp, #28
   14e74:	sub	sp, sp, #4
   14e78:	mov	r5, r0
   14e7c:	orr	r0, r1, #4096	; 0x1000
   14e80:	cmp	r0, #4096	; 0x1000
   14e84:	bne	14ec4 <__assert_fail@plt+0x3374>
   14e88:	ldr	r6, [r5]
   14e8c:	mov	r7, r1
   14e90:	bl	11994 <__errno_location@plt>
   14e94:	mov	r4, #0
   14e98:	mov	sl, r0
   14e9c:	str	r4, [r0]
   14ea0:	ldrb	r0, [r5, #49]	; 0x31
   14ea4:	tst	r0, #32
   14ea8:	bne	14ed4 <__assert_fail@plt+0x3384>
   14eac:	ldrh	r0, [r6, #56]	; 0x38
   14eb0:	cmp	r0, #1
   14eb4:	beq	14ee0 <__assert_fail@plt+0x3390>
   14eb8:	cmp	r0, #9
   14ebc:	ldreq	r4, [r6, #8]
   14ec0:	b	14ed4 <__assert_fail@plt+0x3384>
   14ec4:	bl	11994 <__errno_location@plt>
   14ec8:	mov	r1, #22
   14ecc:	mov	r4, #0
   14ed0:	str	r1, [r0]
   14ed4:	mov	r0, r4
   14ed8:	sub	sp, fp, #28
   14edc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14ee0:	ldr	r0, [r5, #4]
   14ee4:	cmp	r0, #0
   14ee8:	blne	138bc <__assert_fail@plt+0x1d6c>
   14eec:	cmp	r7, #4096	; 0x1000
   14ef0:	mov	r9, #1
   14ef4:	ldreq	r0, [r5, #48]	; 0x30
   14ef8:	moveq	r9, #2
   14efc:	orreq	r0, r0, #4096	; 0x1000
   14f00:	streq	r0, [r5, #48]	; 0x30
   14f04:	ldr	r0, [r6, #48]	; 0x30
   14f08:	cmp	r0, #0
   14f0c:	bne	14f88 <__assert_fail@plt+0x3438>
   14f10:	ldr	r0, [r6, #24]
   14f14:	ldrb	r0, [r0]
   14f18:	cmp	r0, #47	; 0x2f
   14f1c:	beq	14f88 <__assert_fail@plt+0x3438>
   14f20:	ldrb	r0, [r5, #48]	; 0x30
   14f24:	tst	r0, #4
   14f28:	bne	14f88 <__assert_fail@plt+0x3438>
   14f2c:	movw	r1, #41227	; 0xa10b
   14f30:	mov	r0, r5
   14f34:	movt	r1, #1
   14f38:	bl	1388c <__assert_fail@plt+0x1d3c>
   14f3c:	cmn	r0, #1
   14f40:	ble	14fa0 <__assert_fail@plt+0x3450>
   14f44:	mov	r8, r0
   14f48:	mov	r0, r5
   14f4c:	mov	r1, r9
   14f50:	bl	14334 <__assert_fail@plt+0x27e4>
   14f54:	str	r0, [r5, #4]
   14f58:	ldrb	r0, [r5, #49]	; 0x31
   14f5c:	tst	r0, #2
   14f60:	bne	14fac <__assert_fail@plt+0x345c>
   14f64:	mov	r0, r8
   14f68:	bl	11a6c <fchdir@plt>
   14f6c:	cmp	r0, #0
   14f70:	beq	14fc0 <__assert_fail@plt+0x3470>
   14f74:	ldr	r5, [sl]
   14f78:	mov	r0, r8
   14f7c:	bl	11afc <close@plt>
   14f80:	str	r5, [sl]
   14f84:	b	14ed4 <__assert_fail@plt+0x3384>
   14f88:	mov	r0, r5
   14f8c:	mov	r1, r9
   14f90:	bl	14334 <__assert_fail@plt+0x27e4>
   14f94:	mov	r4, r0
   14f98:	str	r0, [r5, #4]
   14f9c:	b	14ed4 <__assert_fail@plt+0x3384>
   14fa0:	mov	r4, #0
   14fa4:	str	r4, [r5, #4]
   14fa8:	b	14ed4 <__assert_fail@plt+0x3384>
   14fac:	mov	r0, r5
   14fb0:	mov	r1, r8
   14fb4:	mov	r2, #1
   14fb8:	bl	14dd8 <__assert_fail@plt+0x3288>
   14fbc:	b	14fc8 <__assert_fail@plt+0x3478>
   14fc0:	mov	r0, r8
   14fc4:	bl	11afc <close@plt>
   14fc8:	ldr	r4, [r5, #4]
   14fcc:	b	14ed4 <__assert_fail@plt+0x3384>
   14fd0:	push	{fp, lr}
   14fd4:	mov	fp, sp
   14fd8:	mov	r2, r1
   14fdc:	ldrd	r0, [r0, #8]
   14fe0:	mov	r3, #0
   14fe4:	bl	19924 <lchmod@@Base+0x3674>
   14fe8:	mov	r0, r2
   14fec:	pop	{fp, pc}
   14ff0:	push	{r4, r5, fp, lr}
   14ff4:	add	fp, sp, #8
   14ff8:	ldrd	r2, [r1, #8]
   14ffc:	ldrd	r4, [r0, #8]
   15000:	eor	r3, r5, r3
   15004:	eor	r2, r4, r2
   15008:	orrs	r2, r2, r3
   1500c:	mov	r2, #0
   15010:	bne	15030 <__assert_fail@plt+0x34e0>
   15014:	ldrd	r2, [r1]
   15018:	ldrd	r0, [r0]
   1501c:	eor	r1, r1, r3
   15020:	eor	r0, r0, r2
   15024:	orr	r0, r0, r1
   15028:	clz	r0, r0
   1502c:	lsr	r2, r0, #5
   15030:	mov	r0, r2
   15034:	pop	{r4, r5, fp, pc}
   15038:	push	{r4, r5, fp, lr}
   1503c:	add	fp, sp, #8
   15040:	ldr	r0, [r0]
   15044:	ldrd	r2, [r0, #160]	; 0xa0
   15048:	ldr	r0, [r1]
   1504c:	ldrd	r4, [r0, #160]	; 0xa0
   15050:	mov	r0, #0
   15054:	subs	r1, r4, r2
   15058:	sbcs	r1, r5, r3
   1505c:	movwcc	r0, #1
   15060:	subs	r1, r2, r4
   15064:	sbcs	r1, r3, r5
   15068:	subcc	r0, r0, #1
   1506c:	pop	{r4, r5, fp, pc}
   15070:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   15074:	add	fp, sp, #24
   15078:	sub	sp, sp, #96	; 0x60
   1507c:	ldr	r7, [r0, #44]	; 0x2c
   15080:	mov	r4, r0
   15084:	mov	r5, #0
   15088:	ldrb	r0, [r7, #49]	; 0x31
   1508c:	tst	r0, #2
   15090:	beq	15184 <__assert_fail@plt+0x3634>
   15094:	ldr	r6, [r7, #52]	; 0x34
   15098:	mov	r9, r1
   1509c:	cmp	r6, #0
   150a0:	bne	150e0 <__assert_fail@plt+0x3590>
   150a4:	movw	r0, #12700	; 0x319c
   150a8:	movw	r2, #20880	; 0x5190
   150ac:	movw	r3, #20912	; 0x51b0
   150b0:	mov	r1, #0
   150b4:	mov	r8, #0
   150b8:	movt	r0, #1
   150bc:	movt	r2, #1
   150c0:	movt	r3, #1
   150c4:	str	r0, [sp]
   150c8:	mov	r0, #13
   150cc:	bl	15648 <__assert_fail@plt+0x3af8>
   150d0:	mov	r6, r0
   150d4:	cmp	r0, #0
   150d8:	str	r0, [r7, #52]	; 0x34
   150dc:	beq	15110 <__assert_fail@plt+0x35c0>
   150e0:	ldrd	r0, [r4, #64]	; 0x40
   150e4:	str	r1, [sp, #12]
   150e8:	str	r0, [sp, #8]
   150ec:	add	r1, sp, #8
   150f0:	mov	r0, r6
   150f4:	bl	153a8 <__assert_fail@plt+0x3858>
   150f8:	cmp	r0, #0
   150fc:	beq	15108 <__assert_fail@plt+0x35b8>
   15100:	ldr	r5, [r0, #8]
   15104:	b	15184 <__assert_fail@plt+0x3634>
   15108:	mov	r8, #1
   1510c:	b	15114 <__assert_fail@plt+0x35c4>
   15110:	mov	r6, #0
   15114:	cmp	r9, #0
   15118:	blt	15184 <__assert_fail@plt+0x3634>
   1511c:	add	r1, sp, #8
   15120:	mov	r0, r9
   15124:	bl	11730 <fstatfs64@plt>
   15128:	cmp	r0, #0
   1512c:	bne	15184 <__assert_fail@plt+0x3634>
   15130:	cmp	r8, #0
   15134:	beq	15180 <__assert_fail@plt+0x3630>
   15138:	mov	r0, #16
   1513c:	bl	190e8 <lchmod@@Base+0x2e38>
   15140:	cmp	r0, #0
   15144:	beq	15180 <__assert_fail@plt+0x3630>
   15148:	mov	r5, r0
   1514c:	ldrd	r0, [r4, #64]	; 0x40
   15150:	ldr	r2, [sp, #8]
   15154:	stm	r5, {r0, r1, r2}
   15158:	mov	r0, r6
   1515c:	mov	r1, r5
   15160:	bl	15fd0 <__assert_fail@plt+0x4480>
   15164:	cmp	r0, #0
   15168:	beq	15178 <__assert_fail@plt+0x3628>
   1516c:	cmp	r0, r5
   15170:	beq	15180 <__assert_fail@plt+0x3630>
   15174:	bl	11af0 <abort@plt>
   15178:	mov	r0, r5
   1517c:	bl	1319c <__assert_fail@plt+0x164c>
   15180:	ldr	r5, [sp, #8]
   15184:	mov	r0, r5
   15188:	sub	sp, fp, #24
   1518c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   15190:	push	{fp, lr}
   15194:	mov	fp, sp
   15198:	mov	r2, r1
   1519c:	ldrd	r0, [r0]
   151a0:	mov	r3, #0
   151a4:	bl	19924 <lchmod@@Base+0x3674>
   151a8:	mov	r0, r2
   151ac:	pop	{fp, pc}
   151b0:	ldrd	r2, [r1]
   151b4:	ldrd	r0, [r0]
   151b8:	eor	r1, r1, r3
   151bc:	eor	r0, r0, r2
   151c0:	orr	r0, r0, r1
   151c4:	clz	r0, r0
   151c8:	lsr	r0, r0, #5
   151cc:	bx	lr
   151d0:	ldr	r0, [r0, #8]
   151d4:	bx	lr
   151d8:	ldr	r0, [r0, #12]
   151dc:	bx	lr
   151e0:	ldr	r0, [r0, #16]
   151e4:	bx	lr
   151e8:	ldm	r0, {r2, ip}
   151ec:	mov	r0, #0
   151f0:	cmp	r2, ip
   151f4:	bxcs	lr
   151f8:	mov	r0, #0
   151fc:	ldr	r1, [r2]
   15200:	cmp	r1, #0
   15204:	beq	15228 <__assert_fail@plt+0x36d8>
   15208:	mov	r3, #0
   1520c:	mov	r1, r2
   15210:	ldr	r1, [r1, #4]
   15214:	add	r3, r3, #1
   15218:	cmp	r1, #0
   1521c:	bne	15210 <__assert_fail@plt+0x36c0>
   15220:	cmp	r3, r0
   15224:	movhi	r0, r3
   15228:	add	r2, r2, #8
   1522c:	cmp	r2, ip
   15230:	bcc	151fc <__assert_fail@plt+0x36ac>
   15234:	bx	lr
   15238:	push	{fp, lr}
   1523c:	mov	fp, sp
   15240:	ldm	r0, {r3, ip}
   15244:	mov	lr, #0
   15248:	mov	r1, #0
   1524c:	cmp	r3, ip
   15250:	bcs	1528c <__assert_fail@plt+0x373c>
   15254:	mov	r1, #0
   15258:	mov	lr, #0
   1525c:	ldr	r2, [r3]
   15260:	cmp	r2, #0
   15264:	beq	15280 <__assert_fail@plt+0x3730>
   15268:	mov	r2, r3
   1526c:	ldr	r2, [r2, #4]
   15270:	add	r1, r1, #1
   15274:	cmp	r2, #0
   15278:	bne	1526c <__assert_fail@plt+0x371c>
   1527c:	add	lr, lr, #1
   15280:	add	r3, r3, #8
   15284:	cmp	r3, ip
   15288:	bcc	1525c <__assert_fail@plt+0x370c>
   1528c:	ldr	r2, [r0, #12]
   15290:	cmp	lr, r2
   15294:	bne	152ac <__assert_fail@plt+0x375c>
   15298:	ldr	r2, [r0, #16]
   1529c:	mov	r0, #1
   152a0:	cmp	r1, r2
   152a4:	movne	r0, #0
   152a8:	pop	{fp, pc}
   152ac:	mov	r0, #0
   152b0:	pop	{fp, pc}
   152b4:	nop	{0}
   152b8:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   152bc:	add	fp, sp, #24
   152c0:	sub	sp, sp, #8
   152c4:	ldr	r6, [r0]
   152c8:	ldmib	r0, {r2, r7, r8}
   152cc:	ldr	r3, [r0, #16]
   152d0:	mov	r4, r1
   152d4:	mov	r5, #0
   152d8:	cmp	r6, r2
   152dc:	bcs	1531c <__assert_fail@plt+0x37cc>
   152e0:	mov	r5, #0
   152e4:	ldr	r0, [r6]
   152e8:	cmp	r0, #0
   152ec:	beq	15310 <__assert_fail@plt+0x37c0>
   152f0:	mov	r0, #0
   152f4:	mov	r1, r6
   152f8:	ldr	r1, [r1, #4]
   152fc:	add	r0, r0, #1
   15300:	cmp	r1, #0
   15304:	bne	152f8 <__assert_fail@plt+0x37a8>
   15308:	cmp	r0, r5
   1530c:	movhi	r5, r0
   15310:	add	r6, r6, #8
   15314:	cmp	r6, r2
   15318:	bcc	152e4 <__assert_fail@plt+0x3794>
   1531c:	movw	r2, #41280	; 0xa140
   15320:	mov	r0, r4
   15324:	mov	r1, #1
   15328:	movt	r2, #1
   1532c:	bl	119dc <__fprintf_chk@plt>
   15330:	movw	r2, #41304	; 0xa158
   15334:	mov	r0, r4
   15338:	mov	r1, #1
   1533c:	mov	r3, r7
   15340:	movt	r2, #1
   15344:	bl	119dc <__fprintf_chk@plt>
   15348:	vldr	d16, [pc, #80]	; 153a0 <__assert_fail@plt+0x3850>
   1534c:	vmov	s0, r8
   15350:	movw	r2, #41328	; 0xa170
   15354:	mov	r0, r4
   15358:	mov	r1, #1
   1535c:	mov	r3, r8
   15360:	vcvt.f64.u32	d17, s0
   15364:	vmov	s0, r7
   15368:	movt	r2, #1
   1536c:	vcvt.f64.u32	d18, s0
   15370:	vmul.f64	d16, d17, d16
   15374:	vdiv.f64	d16, d16, d18
   15378:	vstr	d16, [sp]
   1537c:	bl	119dc <__fprintf_chk@plt>
   15380:	movw	r2, #41361	; 0xa191
   15384:	mov	r0, r4
   15388:	mov	r1, #1
   1538c:	mov	r3, r5
   15390:	movt	r2, #1
   15394:	sub	sp, fp, #24
   15398:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   1539c:	b	119dc <__fprintf_chk@plt>
   153a0:	andeq	r0, r0, r0
   153a4:	subsmi	r0, r9, r0
   153a8:	push	{r4, r5, r6, r7, fp, lr}
   153ac:	add	fp, sp, #16
   153b0:	mov	r4, r1
   153b4:	ldr	r1, [r0, #8]
   153b8:	ldr	r2, [r0, #24]
   153bc:	mov	r5, r0
   153c0:	mov	r0, r4
   153c4:	blx	r2
   153c8:	ldr	r1, [r5, #8]
   153cc:	cmp	r0, r1
   153d0:	bcs	15430 <__assert_fail@plt+0x38e0>
   153d4:	ldr	r7, [r5]
   153d8:	mov	r6, #0
   153dc:	ldr	r1, [r7, r0, lsl #3]!
   153e0:	cmp	r1, #0
   153e4:	cmpne	r7, #0
   153e8:	bne	15418 <__assert_fail@plt+0x38c8>
   153ec:	mov	r0, r6
   153f0:	pop	{r4, r5, r6, r7, fp, pc}
   153f4:	ldr	r2, [r5, #28]
   153f8:	mov	r0, r4
   153fc:	blx	r2
   15400:	cmp	r0, #0
   15404:	bne	15428 <__assert_fail@plt+0x38d8>
   15408:	ldr	r7, [r7, #4]
   1540c:	cmp	r7, #0
   15410:	beq	153ec <__assert_fail@plt+0x389c>
   15414:	ldr	r1, [r7]
   15418:	cmp	r1, r4
   1541c:	bne	153f4 <__assert_fail@plt+0x38a4>
   15420:	mov	r6, r4
   15424:	b	153ec <__assert_fail@plt+0x389c>
   15428:	ldr	r6, [r7]
   1542c:	b	153ec <__assert_fail@plt+0x389c>
   15430:	bl	11af0 <abort@plt>
   15434:	ldr	r1, [r0, #16]
   15438:	cmp	r1, #0
   1543c:	moveq	r0, #0
   15440:	bxeq	lr
   15444:	ldm	r0, {r1, r2}
   15448:	b	15458 <__assert_fail@plt+0x3908>
   1544c:	ldr	r0, [r1], #8
   15450:	cmp	r0, #0
   15454:	bxne	lr
   15458:	cmp	r1, r2
   1545c:	bcc	1544c <__assert_fail@plt+0x38fc>
   15460:	push	{fp, lr}
   15464:	mov	fp, sp
   15468:	bl	11af0 <abort@plt>
   1546c:	push	{r4, r5, fp, lr}
   15470:	add	fp, sp, #8
   15474:	mov	r5, r1
   15478:	ldr	r1, [r0, #8]
   1547c:	ldr	r2, [r0, #24]
   15480:	mov	r4, r0
   15484:	mov	r0, r5
   15488:	blx	r2
   1548c:	ldr	r1, [r4, #8]
   15490:	cmp	r0, r1
   15494:	bcs	154f0 <__assert_fail@plt+0x39a0>
   15498:	ldr	r1, [r4]
   1549c:	add	r2, r1, r0, lsl #3
   154a0:	ldr	r3, [r2]
   154a4:	ldr	r2, [r2, #4]
   154a8:	cmp	r3, r5
   154ac:	beq	154bc <__assert_fail@plt+0x396c>
   154b0:	cmp	r2, #0
   154b4:	bne	154a0 <__assert_fail@plt+0x3950>
   154b8:	b	154c8 <__assert_fail@plt+0x3978>
   154bc:	cmp	r2, #0
   154c0:	ldrne	r0, [r2]
   154c4:	popne	{r4, r5, fp, pc}
   154c8:	ldr	r2, [r4, #4]
   154cc:	add	r0, r1, r0, lsl #3
   154d0:	add	r1, r0, #8
   154d4:	cmp	r1, r2
   154d8:	movcs	r0, #0
   154dc:	popcs	{r4, r5, fp, pc}
   154e0:	ldr	r0, [r1], #8
   154e4:	cmp	r0, #0
   154e8:	popne	{r4, r5, fp, pc}
   154ec:	b	154d4 <__assert_fail@plt+0x3984>
   154f0:	bl	11af0 <abort@plt>
   154f4:	push	{r4, r5, fp, lr}
   154f8:	add	fp, sp, #8
   154fc:	ldm	r0, {r5, lr}
   15500:	mov	ip, r0
   15504:	mov	r0, #0
   15508:	cmp	r5, lr
   1550c:	bcs	15558 <__assert_fail@plt+0x3a08>
   15510:	mov	r0, #0
   15514:	ldr	r3, [r5]
   15518:	cmp	r3, #0
   1551c:	cmpne	r5, #0
   15520:	beq	1554c <__assert_fail@plt+0x39fc>
   15524:	mov	r3, r5
   15528:	cmp	r0, r2
   1552c:	popcs	{r4, r5, fp, pc}
   15530:	ldr	r4, [r3]
   15534:	str	r4, [r1, r0, lsl #2]
   15538:	add	r0, r0, #1
   1553c:	ldr	r3, [r3, #4]
   15540:	cmp	r3, #0
   15544:	bne	15528 <__assert_fail@plt+0x39d8>
   15548:	ldr	lr, [ip, #4]
   1554c:	add	r5, r5, #8
   15550:	cmp	r5, lr
   15554:	bcc	15514 <__assert_fail@plt+0x39c4>
   15558:	pop	{r4, r5, fp, pc}
   1555c:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   15560:	add	fp, sp, #24
   15564:	mov	r5, r1
   15568:	ldr	r4, [r0]
   1556c:	ldr	r1, [r0, #4]
   15570:	mov	r6, #0
   15574:	cmp	r4, r1
   15578:	bcs	155ec <__assert_fail@plt+0x3a9c>
   1557c:	mov	r9, r2
   15580:	mov	r8, r0
   15584:	mov	r6, #0
   15588:	b	155d0 <__assert_fail@plt+0x3a80>
   1558c:	mov	r1, r9
   15590:	blx	r5
   15594:	cmp	r0, #0
   15598:	beq	155ec <__assert_fail@plt+0x3a9c>
   1559c:	mov	r7, r4
   155a0:	ldr	r7, [r7, #4]
   155a4:	add	r6, r6, #1
   155a8:	cmp	r7, #0
   155ac:	beq	155c8 <__assert_fail@plt+0x3a78>
   155b0:	ldr	r0, [r7]
   155b4:	mov	r1, r9
   155b8:	blx	r5
   155bc:	cmp	r0, #0
   155c0:	bne	155a0 <__assert_fail@plt+0x3a50>
   155c4:	b	155ec <__assert_fail@plt+0x3a9c>
   155c8:	ldr	r1, [r8, #4]
   155cc:	b	155e0 <__assert_fail@plt+0x3a90>
   155d0:	ldr	r0, [r4]
   155d4:	cmp	r0, #0
   155d8:	cmpne	r4, #0
   155dc:	bne	1558c <__assert_fail@plt+0x3a3c>
   155e0:	add	r4, r4, #8
   155e4:	cmp	r4, r1
   155e8:	bcc	155d0 <__assert_fail@plt+0x3a80>
   155ec:	mov	r0, r6
   155f0:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   155f4:	ldrb	r2, [r0]
   155f8:	cmp	r2, #0
   155fc:	moveq	r0, #0
   15600:	bxeq	lr
   15604:	add	r3, r0, #1
   15608:	mov	r0, #0
   1560c:	rsb	r0, r0, r0, lsl #5
   15610:	uxtab	r0, r0, r2
   15614:	udiv	r2, r0, r1
   15618:	mls	r0, r2, r1, r0
   1561c:	ldrb	r2, [r3], #1
   15620:	cmp	r2, #0
   15624:	bne	1560c <__assert_fail@plt+0x3abc>
   15628:	bx	lr
   1562c:	movw	r1, #41392	; 0xa1b0
   15630:	movt	r1, #1
   15634:	vld1.32	{d16-d17}, [r1]!
   15638:	ldr	r1, [r1]
   1563c:	vst1.32	{d16-d17}, [r0]!
   15640:	str	r1, [r0]
   15644:	bx	lr
   15648:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1564c:	add	fp, sp, #28
   15650:	sub	sp, sp, #4
   15654:	movw	sl, #22332	; 0x573c
   15658:	movw	r5, #22312	; 0x5728
   1565c:	cmp	r3, #0
   15660:	mov	r8, r0
   15664:	mov	r0, #40	; 0x28
   15668:	mov	r7, r1
   1566c:	movt	sl, #1
   15670:	movt	r5, #1
   15674:	movne	sl, r3
   15678:	cmp	r2, #0
   1567c:	movne	r5, r2
   15680:	bl	190e8 <lchmod@@Base+0x2e38>
   15684:	mov	r9, #0
   15688:	cmp	r0, #0
   1568c:	beq	1571c <__assert_fail@plt+0x3bcc>
   15690:	movw	r6, #41392	; 0xa1b0
   15694:	cmp	r7, #0
   15698:	mov	r4, r0
   1569c:	movt	r6, #1
   156a0:	movne	r6, r7
   156a4:	str	r6, [r0, #20]
   156a8:	bl	1574c <__assert_fail@plt+0x3bfc>
   156ac:	cmp	r0, #0
   156b0:	beq	15714 <__assert_fail@plt+0x3bc4>
   156b4:	mov	r0, r8
   156b8:	mov	r1, r6
   156bc:	bl	157f8 <__assert_fail@plt+0x3ca8>
   156c0:	cmp	r0, #0
   156c4:	str	r0, [r4, #8]
   156c8:	beq	15714 <__assert_fail@plt+0x3bc4>
   156cc:	mov	r1, #8
   156d0:	bl	19094 <lchmod@@Base+0x2de4>
   156d4:	cmp	r0, #0
   156d8:	str	r0, [r4]
   156dc:	beq	15714 <__assert_fail@plt+0x3bc4>
   156e0:	ldr	r1, [fp, #8]
   156e4:	mov	r2, #0
   156e8:	mov	r9, r4
   156ec:	str	r2, [r4, #12]
   156f0:	str	r2, [r4, #16]
   156f4:	str	r5, [r4, #24]
   156f8:	str	sl, [r4, #28]
   156fc:	str	r1, [r4, #32]
   15700:	str	r2, [r4, #36]	; 0x24
   15704:	ldr	r1, [r4, #8]
   15708:	add	r0, r0, r1, lsl #3
   1570c:	str	r0, [r4, #4]
   15710:	b	1571c <__assert_fail@plt+0x3bcc>
   15714:	mov	r0, r4
   15718:	bl	1319c <__assert_fail@plt+0x164c>
   1571c:	mov	r0, r9
   15720:	sub	sp, fp, #28
   15724:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15728:	ror	r2, r0, #3
   1572c:	udiv	r2, r2, r1
   15730:	mul	r1, r2, r1
   15734:	rsb	r0, r1, r0, ror #3
   15738:	bx	lr
   1573c:	sub	r0, r0, r1
   15740:	clz	r0, r0
   15744:	lsr	r0, r0, #5
   15748:	bx	lr
   1574c:	ldr	r3, [r0, #20]
   15750:	movw	r2, #41392	; 0xa1b0
   15754:	mov	r1, r0
   15758:	mov	r0, #1
   1575c:	movt	r2, #1
   15760:	cmp	r3, r2
   15764:	beq	157e8 <__assert_fail@plt+0x3c98>
   15768:	vldr	s2, [pc, #124]	; 157ec <__assert_fail@plt+0x3c9c>
   1576c:	vldr	s0, [r3, #8]
   15770:	vcmpe.f32	s0, s2
   15774:	vmrs	APSR_nzcv, fpscr
   15778:	ble	157e0 <__assert_fail@plt+0x3c90>
   1577c:	vldr	s4, [pc, #108]	; 157f0 <__assert_fail@plt+0x3ca0>
   15780:	vcmpe.f32	s0, s4
   15784:	vmrs	APSR_nzcv, fpscr
   15788:	bpl	157e0 <__assert_fail@plt+0x3c90>
   1578c:	vldr	s4, [pc, #96]	; 157f4 <__assert_fail@plt+0x3ca4>
   15790:	vldr	s6, [r3, #12]
   15794:	vcmpe.f32	s6, s4
   15798:	vmrs	APSR_nzcv, fpscr
   1579c:	ble	157e0 <__assert_fail@plt+0x3c90>
   157a0:	vldr	s4, [r3]
   157a4:	vcmpe.f32	s4, #0.0
   157a8:	vmrs	APSR_nzcv, fpscr
   157ac:	blt	157e0 <__assert_fail@plt+0x3c90>
   157b0:	vadd.f32	s2, s4, s2
   157b4:	vcmpe.f32	s2, s0
   157b8:	vmrs	APSR_nzcv, fpscr
   157bc:	bpl	157e0 <__assert_fail@plt+0x3c90>
   157c0:	vldr	s0, [r3, #4]
   157c4:	vmov.f32	s4, #112	; 0x3f800000  1.0
   157c8:	vcmpe.f32	s0, s4
   157cc:	vmrs	APSR_nzcv, fpscr
   157d0:	bhi	157e0 <__assert_fail@plt+0x3c90>
   157d4:	vcmpe.f32	s2, s0
   157d8:	vmrs	APSR_nzcv, fpscr
   157dc:	bxmi	lr
   157e0:	mov	r0, #0
   157e4:	str	r2, [r1, #20]
   157e8:	bx	lr
   157ec:	stclcc	12, cr12, [ip, #820]	; 0x334
   157f0:	svccc	0x00666666
   157f4:	svccc	0x008ccccd
   157f8:	ldrb	r2, [r1, #16]
   157fc:	cmp	r2, #0
   15800:	bne	15830 <__assert_fail@plt+0x3ce0>
   15804:	vldr	s0, [r1, #8]
   15808:	vldr	s4, [pc, #160]	; 158b0 <__assert_fail@plt+0x3d60>
   1580c:	vmov	s2, r0
   15810:	mov	r0, #0
   15814:	vcvt.f32.u32	s2, s2
   15818:	vdiv.f32	s2, s2, s0
   1581c:	vcmpe.f32	s2, s4
   15820:	vcvt.u32.f32	s0, s2
   15824:	vmrs	APSR_nzcv, fpscr
   15828:	bxge	lr
   1582c:	vmov	r0, s0
   15830:	cmp	r0, #10
   15834:	movls	r0, #10
   15838:	orr	r0, r0, #1
   1583c:	b	15894 <__assert_fail@plt+0x3d44>
   15840:	mov	r1, #3
   15844:	cmp	r0, #10
   15848:	bcc	15880 <__assert_fail@plt+0x3d30>
   1584c:	mov	r1, #3
   15850:	mov	ip, #9
   15854:	mov	r2, #12
   15858:	udiv	r3, r0, r1
   1585c:	mls	r3, r3, r1, r0
   15860:	cmp	r3, #0
   15864:	beq	15880 <__assert_fail@plt+0x3d30>
   15868:	add	r3, ip, r2
   1586c:	add	r2, r2, #8
   15870:	add	r1, r1, #2
   15874:	add	ip, r3, #4
   15878:	cmp	ip, r0
   1587c:	bcc	15858 <__assert_fail@plt+0x3d08>
   15880:	udiv	r2, r0, r1
   15884:	mls	r1, r2, r1, r0
   15888:	cmp	r1, #0
   1588c:	bne	158a4 <__assert_fail@plt+0x3d54>
   15890:	add	r0, r0, #2
   15894:	cmn	r0, #1
   15898:	bne	15840 <__assert_fail@plt+0x3cf0>
   1589c:	mov	r0, #0
   158a0:	bx	lr
   158a4:	cmp	r0, #536870912	; 0x20000000
   158a8:	movcs	r0, #0
   158ac:	bx	lr
   158b0:	svcmi	0x00800000
   158b4:	push	{r4, r5, r6, r7, fp, lr}
   158b8:	add	fp, sp, #16
   158bc:	mov	r4, r0
   158c0:	ldr	r5, [r0]
   158c4:	ldr	r0, [r0, #4]
   158c8:	cmp	r5, r0
   158cc:	bcs	15964 <__assert_fail@plt+0x3e14>
   158d0:	mov	r6, #0
   158d4:	ldr	r1, [r5]
   158d8:	cmp	r1, #0
   158dc:	beq	15958 <__assert_fail@plt+0x3e08>
   158e0:	ldr	r1, [r4, #32]
   158e4:	ldr	r7, [r5, #4]
   158e8:	cmp	r1, #0
   158ec:	mov	r0, r1
   158f0:	movwne	r0, #1
   158f4:	cmp	r7, #0
   158f8:	beq	1593c <__assert_fail@plt+0x3dec>
   158fc:	tst	r0, #1
   15900:	beq	15910 <__assert_fail@plt+0x3dc0>
   15904:	ldr	r0, [r7]
   15908:	blx	r1
   1590c:	ldr	r1, [r4, #32]
   15910:	str	r6, [r7]
   15914:	cmp	r1, #0
   15918:	ldr	r0, [r4, #36]	; 0x24
   1591c:	ldr	r2, [r7, #4]
   15920:	str	r0, [r7, #4]
   15924:	mov	r0, r1
   15928:	str	r7, [r4, #36]	; 0x24
   1592c:	mov	r7, r2
   15930:	movwne	r0, #1
   15934:	cmp	r2, #0
   15938:	bne	158fc <__assert_fail@plt+0x3dac>
   1593c:	cmp	r0, #0
   15940:	beq	1594c <__assert_fail@plt+0x3dfc>
   15944:	ldr	r0, [r5]
   15948:	blx	r1
   1594c:	str	r6, [r5]
   15950:	str	r6, [r5, #4]
   15954:	ldr	r0, [r4, #4]
   15958:	add	r5, r5, #8
   1595c:	cmp	r5, r0
   15960:	bcc	158d4 <__assert_fail@plt+0x3d84>
   15964:	mov	r0, #0
   15968:	str	r0, [r4, #12]
   1596c:	str	r0, [r4, #16]
   15970:	pop	{r4, r5, r6, r7, fp, pc}
   15974:	push	{r4, r5, r6, sl, fp, lr}
   15978:	add	fp, sp, #16
   1597c:	mov	r4, r0
   15980:	ldr	r0, [r0, #32]
   15984:	cmp	r0, #0
   15988:	ldrne	r0, [r4, #16]
   1598c:	cmpne	r0, #0
   15990:	beq	159e8 <__assert_fail@plt+0x3e98>
   15994:	ldr	r5, [r4]
   15998:	ldr	r1, [r4, #4]
   1599c:	b	159e0 <__assert_fail@plt+0x3e90>
   159a0:	ldr	r0, [r5]
   159a4:	cmp	r0, #0
   159a8:	cmpne	r5, #0
   159ac:	beq	159dc <__assert_fail@plt+0x3e8c>
   159b0:	ldr	r1, [r4, #32]
   159b4:	blx	r1
   159b8:	ldr	r6, [r5, #4]
   159bc:	b	159d0 <__assert_fail@plt+0x3e80>
   159c0:	ldr	r1, [r4, #32]
   159c4:	ldr	r0, [r6]
   159c8:	blx	r1
   159cc:	ldr	r6, [r6, #4]
   159d0:	cmp	r6, #0
   159d4:	bne	159c0 <__assert_fail@plt+0x3e70>
   159d8:	ldr	r1, [r4, #4]
   159dc:	add	r5, r5, #8
   159e0:	cmp	r5, r1
   159e4:	bcc	159a0 <__assert_fail@plt+0x3e50>
   159e8:	ldr	r5, [r4]
   159ec:	ldr	r1, [r4, #4]
   159f0:	b	15a1c <__assert_fail@plt+0x3ecc>
   159f4:	ldr	r0, [r5, #4]
   159f8:	cmp	r0, #0
   159fc:	beq	15a18 <__assert_fail@plt+0x3ec8>
   15a00:	ldr	r6, [r0, #4]
   15a04:	bl	1319c <__assert_fail@plt+0x164c>
   15a08:	cmp	r6, #0
   15a0c:	mov	r0, r6
   15a10:	bne	15a00 <__assert_fail@plt+0x3eb0>
   15a14:	ldr	r1, [r4, #4]
   15a18:	add	r5, r5, #8
   15a1c:	cmp	r5, r1
   15a20:	bcc	159f4 <__assert_fail@plt+0x3ea4>
   15a24:	ldr	r0, [r4, #36]	; 0x24
   15a28:	cmp	r0, #0
   15a2c:	beq	15a44 <__assert_fail@plt+0x3ef4>
   15a30:	ldr	r5, [r0, #4]
   15a34:	bl	1319c <__assert_fail@plt+0x164c>
   15a38:	cmp	r5, #0
   15a3c:	mov	r0, r5
   15a40:	bne	15a30 <__assert_fail@plt+0x3ee0>
   15a44:	ldr	r0, [r4]
   15a48:	bl	1319c <__assert_fail@plt+0x164c>
   15a4c:	mov	r0, r4
   15a50:	pop	{r4, r5, r6, sl, fp, lr}
   15a54:	b	1319c <__assert_fail@plt+0x164c>
   15a58:	push	{r4, r5, r6, r7, fp, lr}
   15a5c:	add	fp, sp, #16
   15a60:	sub	sp, sp, #40	; 0x28
   15a64:	mov	r7, r0
   15a68:	mov	r2, r1
   15a6c:	mov	r4, r0
   15a70:	ldr	r1, [r7, #20]!
   15a74:	mov	r0, r2
   15a78:	bl	157f8 <__assert_fail@plt+0x3ca8>
   15a7c:	mov	r5, #0
   15a80:	cmp	r0, #0
   15a84:	beq	15b18 <__assert_fail@plt+0x3fc8>
   15a88:	mov	r6, r0
   15a8c:	ldr	r0, [r4, #8]
   15a90:	cmp	r6, r0
   15a94:	beq	15b14 <__assert_fail@plt+0x3fc4>
   15a98:	mov	r0, r6
   15a9c:	mov	r1, #8
   15aa0:	bl	19094 <lchmod@@Base+0x2de4>
   15aa4:	cmp	r0, #0
   15aa8:	str	r0, [sp]
   15aac:	beq	15b18 <__assert_fail@plt+0x3fc8>
   15ab0:	mov	r1, #0
   15ab4:	add	r0, r0, r6, lsl #3
   15ab8:	str	r6, [sp, #8]
   15abc:	mov	r5, sp
   15ac0:	mov	r2, #0
   15ac4:	str	r1, [sp, #12]
   15ac8:	str	r1, [sp, #16]
   15acc:	str	r0, [sp, #4]
   15ad0:	add	r0, r5, #20
   15ad4:	mov	r1, r4
   15ad8:	vld1.32	{d16-d17}, [r7]
   15adc:	vst1.32	{d16-d17}, [r0]
   15ae0:	ldr	r0, [r4, #36]	; 0x24
   15ae4:	str	r0, [sp, #36]	; 0x24
   15ae8:	mov	r0, r5
   15aec:	bl	15b70 <__assert_fail@plt+0x4020>
   15af0:	cmp	r0, #0
   15af4:	beq	15b24 <__assert_fail@plt+0x3fd4>
   15af8:	ldr	r0, [r4]
   15afc:	bl	1319c <__assert_fail@plt+0x164c>
   15b00:	mov	r0, #36	; 0x24
   15b04:	vld1.32	{d16-d17}, [r5], r0
   15b08:	vst1.32	{d16-d17}, [r4], r0
   15b0c:	ldr	r0, [r5]
   15b10:	str	r0, [r4]
   15b14:	mov	r5, #1
   15b18:	mov	r0, r5
   15b1c:	sub	sp, fp, #16
   15b20:	pop	{r4, r5, r6, r7, fp, pc}
   15b24:	ldr	r0, [sp, #36]	; 0x24
   15b28:	mov	r1, sp
   15b2c:	mov	r2, #1
   15b30:	str	r0, [r4, #36]	; 0x24
   15b34:	mov	r0, r4
   15b38:	bl	15b70 <__assert_fail@plt+0x4020>
   15b3c:	cmp	r0, #0
   15b40:	beq	15b6c <__assert_fail@plt+0x401c>
   15b44:	mov	r1, sp
   15b48:	mov	r0, r4
   15b4c:	mov	r2, #0
   15b50:	mov	r5, #0
   15b54:	bl	15b70 <__assert_fail@plt+0x4020>
   15b58:	cmp	r0, #0
   15b5c:	beq	15b6c <__assert_fail@plt+0x401c>
   15b60:	ldr	r0, [sp]
   15b64:	bl	1319c <__assert_fail@plt+0x164c>
   15b68:	b	15b18 <__assert_fail@plt+0x3fc8>
   15b6c:	bl	11af0 <abort@plt>
   15b70:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15b74:	add	fp, sp, #28
   15b78:	sub	sp, sp, #12
   15b7c:	ldr	sl, [r1]
   15b80:	str	r1, [sp, #8]
   15b84:	ldr	r1, [r1, #4]
   15b88:	mov	r7, r0
   15b8c:	mov	r0, #1
   15b90:	str	r2, [sp, #4]
   15b94:	cmp	sl, r1
   15b98:	bcs	15cf4 <__assert_fail@plt+0x41a4>
   15b9c:	add	r8, r7, #36	; 0x24
   15ba0:	mov	r9, #0
   15ba4:	ldr	r4, [sl]
   15ba8:	cmp	r4, #0
   15bac:	beq	15cdc <__assert_fail@plt+0x418c>
   15bb0:	ldr	r5, [sl, #4]
   15bb4:	cmp	r5, #0
   15bb8:	beq	15c30 <__assert_fail@plt+0x40e0>
   15bbc:	ldr	r1, [r7, #8]
   15bc0:	ldr	r4, [r5]
   15bc4:	ldr	r2, [r7, #24]
   15bc8:	mov	r0, r4
   15bcc:	blx	r2
   15bd0:	ldr	r1, [r7, #8]
   15bd4:	cmp	r0, r1
   15bd8:	bcs	15d04 <__assert_fail@plt+0x41b4>
   15bdc:	ldr	r3, [r7]
   15be0:	ldr	r2, [r5, #4]
   15be4:	ldr	r6, [r3, r0, lsl #3]
   15be8:	cmp	r6, #0
   15bec:	beq	15bfc <__assert_fail@plt+0x40ac>
   15bf0:	add	r0, r3, r0, lsl #3
   15bf4:	add	r0, r0, #4
   15bf8:	b	15c14 <__assert_fail@plt+0x40c4>
   15bfc:	str	r4, [r3, r0, lsl #3]
   15c00:	ldr	r0, [r7, #12]
   15c04:	add	r0, r0, #1
   15c08:	str	r0, [r7, #12]
   15c0c:	mov	r0, r8
   15c10:	str	r9, [r5]
   15c14:	ldr	r3, [r0]
   15c18:	cmp	r2, #0
   15c1c:	str	r3, [r5, #4]
   15c20:	str	r5, [r0]
   15c24:	mov	r5, r2
   15c28:	bne	15bc0 <__assert_fail@plt+0x4070>
   15c2c:	ldr	r4, [sl]
   15c30:	ldr	r0, [sp, #4]
   15c34:	str	r9, [sl, #4]
   15c38:	cmp	r0, #0
   15c3c:	bne	15cdc <__assert_fail@plt+0x418c>
   15c40:	ldr	r1, [r7, #8]
   15c44:	ldr	r2, [r7, #24]
   15c48:	mov	r0, r4
   15c4c:	blx	r2
   15c50:	mov	r5, r0
   15c54:	ldr	r0, [r7, #8]
   15c58:	cmp	r5, r0
   15c5c:	bcs	15d04 <__assert_fail@plt+0x41b4>
   15c60:	ldr	r6, [r7]
   15c64:	ldr	r0, [r6, r5, lsl #3]
   15c68:	cmp	r0, #0
   15c6c:	beq	15c8c <__assert_fail@plt+0x413c>
   15c70:	ldr	r0, [r8]
   15c74:	cmp	r0, #0
   15c78:	beq	15ca0 <__assert_fail@plt+0x4150>
   15c7c:	mov	r1, r0
   15c80:	ldr	r2, [r1, #4]!
   15c84:	str	r2, [r8]
   15c88:	b	15cb4 <__assert_fail@plt+0x4164>
   15c8c:	str	r4, [r6, r5, lsl #3]
   15c90:	ldr	r0, [r7, #12]
   15c94:	add	r0, r0, #1
   15c98:	str	r0, [r7, #12]
   15c9c:	b	15cc8 <__assert_fail@plt+0x4178>
   15ca0:	mov	r0, #8
   15ca4:	bl	190e8 <lchmod@@Base+0x2e38>
   15ca8:	cmp	r0, #0
   15cac:	beq	15cfc <__assert_fail@plt+0x41ac>
   15cb0:	add	r1, r0, #4
   15cb4:	str	r4, [r0]
   15cb8:	add	r2, r6, r5, lsl #3
   15cbc:	ldr	r3, [r2, #4]
   15cc0:	str	r3, [r1]
   15cc4:	str	r0, [r2, #4]
   15cc8:	ldr	r1, [sp, #8]
   15ccc:	str	r9, [sl]
   15cd0:	ldr	r0, [r1, #12]
   15cd4:	sub	r0, r0, #1
   15cd8:	str	r0, [r1, #12]
   15cdc:	ldr	r0, [sp, #8]
   15ce0:	add	sl, sl, #8
   15ce4:	ldr	r0, [r0, #4]
   15ce8:	cmp	sl, r0
   15cec:	bcc	15ba4 <__assert_fail@plt+0x4054>
   15cf0:	mov	r0, #1
   15cf4:	sub	sp, fp, #28
   15cf8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15cfc:	mov	r0, #0
   15d00:	b	15cf4 <__assert_fail@plt+0x41a4>
   15d04:	bl	11af0 <abort@plt>
   15d08:	push	{r4, r5, r6, r7, fp, lr}
   15d0c:	add	fp, sp, #16
   15d10:	sub	sp, sp, #8
   15d14:	cmp	r1, #0
   15d18:	beq	15e98 <__assert_fail@plt+0x4348>
   15d1c:	mov	r7, r2
   15d20:	add	r2, sp, #4
   15d24:	mov	r3, #0
   15d28:	mov	r5, r1
   15d2c:	mov	r4, r0
   15d30:	mov	r6, #0
   15d34:	bl	15ea0 <__assert_fail@plt+0x4350>
   15d38:	cmp	r0, #0
   15d3c:	beq	15d4c <__assert_fail@plt+0x41fc>
   15d40:	cmp	r7, #0
   15d44:	strne	r0, [r7]
   15d48:	b	15e84 <__assert_fail@plt+0x4334>
   15d4c:	ldr	r0, [r4, #20]
   15d50:	vldr	s0, [r4, #8]
   15d54:	vldr	s2, [r4, #12]
   15d58:	vldr	s4, [r0, #8]
   15d5c:	vcvt.f32.u32	s0, s0
   15d60:	vcvt.f32.u32	s2, s2
   15d64:	vmul.f32	s0, s4, s0
   15d68:	vcmpe.f32	s0, s2
   15d6c:	vmrs	APSR_nzcv, fpscr
   15d70:	bpl	15e04 <__assert_fail@plt+0x42b4>
   15d74:	mov	r0, r4
   15d78:	bl	1574c <__assert_fail@plt+0x3bfc>
   15d7c:	vldr	s0, [r4, #8]
   15d80:	ldr	r0, [r4, #20]
   15d84:	vldr	s4, [r4, #12]
   15d88:	vcvt.f32.u32	s2, s0
   15d8c:	vldr	s0, [r0, #8]
   15d90:	vcvt.f32.u32	s4, s4
   15d94:	vmul.f32	s6, s0, s2
   15d98:	vcmpe.f32	s6, s4
   15d9c:	vmrs	APSR_nzcv, fpscr
   15da0:	bpl	15e04 <__assert_fail@plt+0x42b4>
   15da4:	vldr	s4, [r0, #12]
   15da8:	ldrb	r0, [r0, #16]
   15dac:	mvn	r6, #0
   15db0:	vmul.f32	s2, s4, s2
   15db4:	vldr	s4, [pc, #224]	; 15e9c <__assert_fail@plt+0x434c>
   15db8:	cmp	r0, #0
   15dbc:	vmul.f32	s0, s0, s2
   15dc0:	vseleq.f32	s0, s0, s2
   15dc4:	vcmpe.f32	s0, s4
   15dc8:	vmrs	APSR_nzcv, fpscr
   15dcc:	bge	15e84 <__assert_fail@plt+0x4334>
   15dd0:	vcvt.u32.f32	s0, s0
   15dd4:	mov	r0, r4
   15dd8:	vmov	r1, s0
   15ddc:	bl	15a58 <__assert_fail@plt+0x3f08>
   15de0:	cmp	r0, #0
   15de4:	beq	15e84 <__assert_fail@plt+0x4334>
   15de8:	add	r2, sp, #4
   15dec:	mov	r0, r4
   15df0:	mov	r1, r5
   15df4:	mov	r3, #0
   15df8:	bl	15ea0 <__assert_fail@plt+0x4350>
   15dfc:	cmp	r0, #0
   15e00:	bne	15e98 <__assert_fail@plt+0x4348>
   15e04:	ldr	r6, [sp, #4]
   15e08:	ldr	r0, [r6]
   15e0c:	cmp	r0, #0
   15e10:	beq	15e30 <__assert_fail@plt+0x42e0>
   15e14:	ldr	r0, [r4, #36]	; 0x24
   15e18:	cmp	r0, #0
   15e1c:	beq	15e50 <__assert_fail@plt+0x4300>
   15e20:	mov	r1, r0
   15e24:	ldr	r2, [r1, #4]!
   15e28:	str	r2, [r4, #36]	; 0x24
   15e2c:	b	15e64 <__assert_fail@plt+0x4314>
   15e30:	str	r5, [r6]
   15e34:	ldr	r0, [r4, #12]
   15e38:	ldr	r1, [r4, #16]
   15e3c:	add	r0, r0, #1
   15e40:	add	r1, r1, #1
   15e44:	str	r0, [r4, #12]
   15e48:	str	r1, [r4, #16]
   15e4c:	b	15e80 <__assert_fail@plt+0x4330>
   15e50:	mov	r0, #8
   15e54:	bl	190e8 <lchmod@@Base+0x2e38>
   15e58:	cmp	r0, #0
   15e5c:	beq	15e90 <__assert_fail@plt+0x4340>
   15e60:	add	r1, r0, #4
   15e64:	str	r5, [r0]
   15e68:	ldr	r2, [r6, #4]
   15e6c:	str	r2, [r1]
   15e70:	str	r0, [r6, #4]
   15e74:	ldr	r0, [r4, #16]
   15e78:	add	r0, r0, #1
   15e7c:	str	r0, [r4, #16]
   15e80:	mov	r6, #1
   15e84:	mov	r0, r6
   15e88:	sub	sp, fp, #16
   15e8c:	pop	{r4, r5, r6, r7, fp, pc}
   15e90:	mvn	r6, #0
   15e94:	b	15e84 <__assert_fail@plt+0x4334>
   15e98:	bl	11af0 <abort@plt>
   15e9c:	svcmi	0x00800000
   15ea0:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   15ea4:	add	fp, sp, #24
   15ea8:	mov	r7, r2
   15eac:	mov	r4, r1
   15eb0:	ldr	r1, [r0, #8]
   15eb4:	ldr	r2, [r0, #24]
   15eb8:	mov	r5, r0
   15ebc:	mov	r8, r3
   15ec0:	mov	r0, r4
   15ec4:	blx	r2
   15ec8:	ldr	r1, [r5, #8]
   15ecc:	cmp	r0, r1
   15ed0:	bcs	15fcc <__assert_fail@plt+0x447c>
   15ed4:	ldr	r1, [r5]
   15ed8:	add	r6, r1, r0, lsl #3
   15edc:	str	r6, [r7]
   15ee0:	ldr	r1, [r1, r0, lsl #3]
   15ee4:	cmp	r1, #0
   15ee8:	beq	15f80 <__assert_fail@plt+0x4430>
   15eec:	cmp	r1, r4
   15ef0:	beq	15f0c <__assert_fail@plt+0x43bc>
   15ef4:	ldr	r2, [r5, #28]
   15ef8:	mov	r0, r4
   15efc:	blx	r2
   15f00:	cmp	r0, #0
   15f04:	beq	15f40 <__assert_fail@plt+0x43f0>
   15f08:	ldr	r4, [r6]
   15f0c:	cmp	r8, #0
   15f10:	beq	15f84 <__assert_fail@plt+0x4434>
   15f14:	ldr	r0, [r6, #4]
   15f18:	cmp	r0, #0
   15f1c:	beq	15f8c <__assert_fail@plt+0x443c>
   15f20:	ldm	r0, {r1, r2}
   15f24:	stm	r6, {r1, r2}
   15f28:	mov	r1, #0
   15f2c:	str	r1, [r0]
   15f30:	ldr	r1, [r5, #36]	; 0x24
   15f34:	str	r1, [r0, #4]
   15f38:	str	r0, [r5, #36]	; 0x24
   15f3c:	b	15f84 <__assert_fail@plt+0x4434>
   15f40:	ldr	r0, [r6, #4]!
   15f44:	cmp	r0, #0
   15f48:	beq	15f80 <__assert_fail@plt+0x4430>
   15f4c:	ldr	r1, [r0]
   15f50:	cmp	r1, r4
   15f54:	beq	15f98 <__assert_fail@plt+0x4448>
   15f58:	ldr	r2, [r5, #28]
   15f5c:	mov	r0, r4
   15f60:	blx	r2
   15f64:	ldr	r1, [r6]
   15f68:	cmp	r0, #0
   15f6c:	bne	15fa0 <__assert_fail@plt+0x4450>
   15f70:	ldr	r0, [r1, #4]!
   15f74:	cmp	r0, #0
   15f78:	mov	r6, r1
   15f7c:	bne	15f4c <__assert_fail@plt+0x43fc>
   15f80:	mov	r4, #0
   15f84:	mov	r0, r4
   15f88:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   15f8c:	mov	r0, #0
   15f90:	str	r0, [r6]
   15f94:	b	15f84 <__assert_fail@plt+0x4434>
   15f98:	mov	r1, r0
   15f9c:	b	15fa4 <__assert_fail@plt+0x4454>
   15fa0:	ldr	r4, [r1]
   15fa4:	cmp	r8, #0
   15fa8:	beq	15f84 <__assert_fail@plt+0x4434>
   15fac:	ldr	r0, [r1, #4]
   15fb0:	str	r0, [r6]
   15fb4:	mov	r0, #0
   15fb8:	str	r0, [r1]
   15fbc:	ldr	r0, [r5, #36]	; 0x24
   15fc0:	str	r0, [r1, #4]
   15fc4:	str	r1, [r5, #36]	; 0x24
   15fc8:	b	15f84 <__assert_fail@plt+0x4434>
   15fcc:	bl	11af0 <abort@plt>
   15fd0:	push	{r4, sl, fp, lr}
   15fd4:	add	fp, sp, #8
   15fd8:	sub	sp, sp, #8
   15fdc:	add	r2, sp, #4
   15fe0:	mov	r4, r1
   15fe4:	bl	15d08 <__assert_fail@plt+0x41b8>
   15fe8:	cmn	r0, #1
   15fec:	beq	16000 <__assert_fail@plt+0x44b0>
   15ff0:	ldr	r1, [sp, #4]
   15ff4:	cmp	r0, #0
   15ff8:	moveq	r4, r1
   15ffc:	b	16004 <__assert_fail@plt+0x44b4>
   16000:	mov	r4, #0
   16004:	mov	r0, r4
   16008:	sub	sp, fp, #8
   1600c:	pop	{r4, sl, fp, pc}
   16010:	push	{r4, r5, r6, sl, fp, lr}
   16014:	add	fp, sp, #16
   16018:	sub	sp, sp, #8
   1601c:	add	r2, sp, #4
   16020:	mov	r3, #1
   16024:	mov	r4, r0
   16028:	bl	15ea0 <__assert_fail@plt+0x4350>
   1602c:	mov	r5, r0
   16030:	cmp	r0, #0
   16034:	beq	16110 <__assert_fail@plt+0x45c0>
   16038:	ldr	r0, [r4, #16]
   1603c:	sub	r0, r0, #1
   16040:	str	r0, [r4, #16]
   16044:	ldr	r0, [sp, #4]
   16048:	ldr	r0, [r0]
   1604c:	cmp	r0, #0
   16050:	bne	16110 <__assert_fail@plt+0x45c0>
   16054:	ldr	r0, [r4, #12]
   16058:	vldr	s0, [r4, #8]
   1605c:	sub	r0, r0, #1
   16060:	str	r0, [r4, #12]
   16064:	vmov	s4, r0
   16068:	ldr	r1, [r4, #20]
   1606c:	vldr	s2, [r1]
   16070:	vcvt.f32.u32	s0, s0
   16074:	vcvt.f32.u32	s4, s4
   16078:	vmul.f32	s0, s2, s0
   1607c:	vcmpe.f32	s0, s4
   16080:	vmrs	APSR_nzcv, fpscr
   16084:	ble	16110 <__assert_fail@plt+0x45c0>
   16088:	mov	r0, r4
   1608c:	bl	1574c <__assert_fail@plt+0x3bfc>
   16090:	vldr	s0, [r4, #8]
   16094:	ldr	r0, [r4, #20]
   16098:	vldr	s2, [r4, #12]
   1609c:	vcvt.f32.u32	s0, s0
   160a0:	vldr	s4, [r0]
   160a4:	vcvt.f32.u32	s2, s2
   160a8:	vmul.f32	s4, s4, s0
   160ac:	vcmpe.f32	s4, s2
   160b0:	vmrs	APSR_nzcv, fpscr
   160b4:	ble	16110 <__assert_fail@plt+0x45c0>
   160b8:	ldrb	r1, [r0, #16]
   160bc:	vldr	s2, [r0, #4]
   160c0:	cmp	r1, #0
   160c4:	vmul.f32	s0, s2, s0
   160c8:	vldreq	s2, [r0, #8]
   160cc:	mov	r0, r4
   160d0:	vmuleq.f32	s0, s0, s2
   160d4:	vcvt.u32.f32	s0, s0
   160d8:	vmov	r1, s0
   160dc:	bl	15a58 <__assert_fail@plt+0x3f08>
   160e0:	cmp	r0, #0
   160e4:	bne	16110 <__assert_fail@plt+0x45c0>
   160e8:	ldr	r0, [r4, #36]	; 0x24
   160ec:	cmp	r0, #0
   160f0:	beq	16108 <__assert_fail@plt+0x45b8>
   160f4:	ldr	r6, [r0, #4]
   160f8:	bl	1319c <__assert_fail@plt+0x164c>
   160fc:	cmp	r6, #0
   16100:	mov	r0, r6
   16104:	bne	160f4 <__assert_fail@plt+0x45a4>
   16108:	mov	r0, #0
   1610c:	str	r0, [r4, #36]	; 0x24
   16110:	mov	r0, r5
   16114:	sub	sp, fp, #16
   16118:	pop	{r4, r5, r6, sl, fp, pc}
   1611c:	b	16010 <__assert_fail@plt+0x44c0>
   16120:	push	{r4, r5, fp, lr}
   16124:	add	fp, sp, #8
   16128:	mov	r5, r0
   1612c:	ldr	r0, [r0]
   16130:	mov	r4, r1
   16134:	bl	19710 <lchmod@@Base+0x3460>
   16138:	ldrd	r2, [r5, #8]
   1613c:	eor	r0, r2, r0
   16140:	mov	r1, r3
   16144:	mov	r2, r4
   16148:	mov	r3, #0
   1614c:	bl	19924 <lchmod@@Base+0x3674>
   16150:	mov	r0, r2
   16154:	pop	{r4, r5, fp, pc}
   16158:	push	{r4, r5, r6, r7, fp, lr}
   1615c:	add	fp, sp, #16
   16160:	ldrd	r2, [r1, #8]
   16164:	ldrd	r4, [r0, #8]
   16168:	eor	r3, r5, r3
   1616c:	eor	r2, r4, r2
   16170:	orrs	r2, r2, r3
   16174:	mov	r2, #0
   16178:	bne	161a8 <__assert_fail@plt+0x4658>
   1617c:	ldrd	r4, [r1, #16]
   16180:	ldrd	r6, [r0, #16]
   16184:	eor	r3, r7, r5
   16188:	eor	r7, r6, r4
   1618c:	orrs	r3, r7, r3
   16190:	bne	161a8 <__assert_fail@plt+0x4658>
   16194:	ldr	r1, [r1]
   16198:	ldr	r0, [r0]
   1619c:	bl	11778 <strcmp@plt>
   161a0:	clz	r0, r0
   161a4:	lsr	r2, r0, #5
   161a8:	mov	r0, r2
   161ac:	pop	{r4, r5, r6, r7, fp, pc}
   161b0:	push	{r4, sl, fp, lr}
   161b4:	add	fp, sp, #8
   161b8:	mov	r4, r0
   161bc:	ldr	r0, [r0]
   161c0:	bl	1319c <__assert_fail@plt+0x164c>
   161c4:	mov	r0, r4
   161c8:	pop	{r4, sl, fp, lr}
   161cc:	b	1319c <__assert_fail@plt+0x164c>
   161d0:	mov	r3, #1
   161d4:	mov	r2, #0
   161d8:	vdup.32	q8, r1
   161dc:	strb	r3, [r0, #28]
   161e0:	str	r2, [r0, #20]
   161e4:	str	r2, [r0, #24]
   161e8:	add	r3, r0, r2
   161ec:	add	r2, r2, #16
   161f0:	cmp	r2, #16
   161f4:	vst1.32	{d16-d17}, [r3]
   161f8:	bne	161e8 <__assert_fail@plt+0x4698>
   161fc:	str	r1, [r0, #16]
   16200:	bx	lr
   16204:	ldrb	r0, [r0, #28]
   16208:	bx	lr
   1620c:	push	{fp, lr}
   16210:	mov	fp, sp
   16214:	ldrb	r3, [r0, #28]
   16218:	ldr	r2, [r0, #20]
   1621c:	eor	lr, r3, #1
   16220:	add	r2, r2, lr
   16224:	and	r3, r2, #3
   16228:	ldr	ip, [r0, r3, lsl #2]
   1622c:	str	r1, [r0, r3, lsl #2]
   16230:	str	r3, [r0, #20]
   16234:	ldr	r1, [r0, #24]
   16238:	cmp	r3, r1
   1623c:	addeq	r1, r2, lr
   16240:	andeq	r1, r1, #3
   16244:	streq	r1, [r0, #24]
   16248:	mov	r1, #0
   1624c:	strb	r1, [r0, #28]
   16250:	mov	r0, ip
   16254:	pop	{fp, pc}
   16258:	ldrb	r1, [r0, #28]
   1625c:	cmp	r1, #0
   16260:	bne	162a4 <__assert_fail@plt+0x4754>
   16264:	ldr	r3, [r0, #20]
   16268:	ldr	r2, [r0, #16]
   1626c:	ldr	r1, [r0, r3, lsl #2]
   16270:	str	r2, [r0, r3, lsl #2]
   16274:	ldr	r2, [r0, #20]
   16278:	ldr	r3, [r0, #24]
   1627c:	cmp	r2, r3
   16280:	bne	16290 <__assert_fail@plt+0x4740>
   16284:	mov	r2, #1
   16288:	strb	r2, [r0, #28]
   1628c:	b	1629c <__assert_fail@plt+0x474c>
   16290:	sub	r2, r2, #1
   16294:	and	r2, r2, #3
   16298:	str	r2, [r0, #20]
   1629c:	mov	r0, r1
   162a0:	bx	lr
   162a4:	push	{fp, lr}
   162a8:	mov	fp, sp
   162ac:	bl	11af0 <abort@plt>

000162b0 <lchmod@@Base>:
   162b0:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   162b4:	add	fp, sp, #24
   162b8:	sub	sp, sp, #136	; 0x88
   162bc:	mov	r4, r1
   162c0:	mov	r1, #2654208	; 0x288000
   162c4:	mov	r5, r0
   162c8:	bl	118d4 <open64@plt>
   162cc:	mov	r6, r0
   162d0:	cmp	r0, #0
   162d4:	blt	16318 <lchmod@@Base+0x68>
   162d8:	movw	r1, #41036	; 0xa04c
   162dc:	add	r2, sp, #32
   162e0:	mov	r0, r6
   162e4:	mov	r3, #4096	; 0x1000
   162e8:	movt	r1, #1
   162ec:	bl	19b44 <lchmod@@Base+0x3894>
   162f0:	cmp	r0, #0
   162f4:	beq	16320 <lchmod@@Base+0x70>
   162f8:	bl	11994 <__errno_location@plt>
   162fc:	ldr	r5, [r0]
   16300:	mov	r4, r0
   16304:	mov	r0, r6
   16308:	bl	11afc <close@plt>
   1630c:	str	r5, [r4]
   16310:	mvn	r7, #0
   16314:	b	163c0 <lchmod@@Base+0x110>
   16318:	mov	r7, r6
   1631c:	b	163c0 <lchmod@@Base+0x110>
   16320:	ldr	r0, [sp, #48]	; 0x30
   16324:	and	r0, r0, #61440	; 0xf000
   16328:	cmp	r0, #40960	; 0xa000
   1632c:	bne	1634c <lchmod@@Base+0x9c>
   16330:	mov	r0, r6
   16334:	bl	11afc <close@plt>
   16338:	bl	11994 <__errno_location@plt>
   1633c:	mov	r1, #95	; 0x5f
   16340:	mvn	r7, #0
   16344:	str	r1, [r0]
   16348:	b	163c0 <lchmod@@Base+0x110>
   1634c:	movw	r3, #41412	; 0xa1c4
   16350:	add	r7, sp, #6
   16354:	mov	r1, #1
   16358:	mov	r2, #26
   1635c:	str	r6, [sp]
   16360:	movt	r3, #1
   16364:	mov	r0, r7
   16368:	bl	119a0 <__sprintf_chk@plt>
   1636c:	mov	r0, r7
   16370:	mov	r1, r4
   16374:	bl	11ac0 <chmod@plt>
   16378:	mov	r7, r0
   1637c:	bl	11994 <__errno_location@plt>
   16380:	ldr	r9, [r0]
   16384:	mov	r8, r0
   16388:	mov	r0, r6
   1638c:	bl	11afc <close@plt>
   16390:	cmp	r7, #0
   16394:	beq	163b4 <lchmod@@Base+0x104>
   16398:	cmp	r9, #2
   1639c:	bne	163bc <lchmod@@Base+0x10c>
   163a0:	mov	r0, r5
   163a4:	mov	r1, r4
   163a8:	bl	11ac0 <chmod@plt>
   163ac:	mov	r7, r0
   163b0:	b	163c0 <lchmod@@Base+0x110>
   163b4:	mov	r7, #0
   163b8:	b	163c0 <lchmod@@Base+0x110>
   163bc:	str	r9, [r8]
   163c0:	mov	r0, r7
   163c4:	sub	sp, fp, #24
   163c8:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   163cc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   163d0:	add	fp, sp, #28
   163d4:	sub	sp, sp, #4
   163d8:	ldrb	r1, [r0]
   163dc:	mov	r4, r0
   163e0:	and	r0, r1, #248	; 0xf8
   163e4:	cmp	r0, #48	; 0x30
   163e8:	bne	1646c <lchmod@@Base+0x1bc>
   163ec:	mov	r0, #0
   163f0:	mov	r5, #0
   163f4:	mov	r2, r4
   163f8:	lsl	r3, r5, #3
   163fc:	uxtab	r1, r3, r1
   16400:	sub	r5, r1, #48	; 0x30
   16404:	cmp	r0, r5, lsr #12
   16408:	bne	16700 <lchmod@@Base+0x450>
   1640c:	ldrb	r1, [r2, #1]
   16410:	add	r6, r2, #1
   16414:	and	r2, r1, #248	; 0xf8
   16418:	cmp	r2, #48	; 0x30
   1641c:	mov	r2, r6
   16420:	beq	163f8 <lchmod@@Base+0x148>
   16424:	cmp	r1, #0
   16428:	bne	16700 <lchmod@@Base+0x450>
   1642c:	mov	r0, #32
   16430:	bl	18b84 <lchmod@@Base+0x28d4>
   16434:	movw	r1, #317	; 0x13d
   16438:	mov	r2, #0
   1643c:	and	r3, r5, #3072	; 0xc00
   16440:	movw	r7, #1023	; 0x3ff
   16444:	strh	r1, [r0]
   16448:	strb	r2, [r0, #17]
   1644c:	sub	r2, r6, r4
   16450:	movw	r1, #4095	; 0xfff
   16454:	cmp	r2, #5
   16458:	str	r1, [r0, #4]
   1645c:	str	r5, [r0, #8]
   16460:	orrlt	r1, r3, r7
   16464:	str	r1, [r0, #12]
   16468:	b	16700 <lchmod@@Base+0x450>
   1646c:	movw	r5, #5
   16470:	mov	r2, #1
   16474:	mvn	r3, #42	; 0x2a
   16478:	mov	r7, #1
   1647c:	mov	r0, #1
   16480:	movt	r5, #4
   16484:	b	16498 <lchmod@@Base+0x1e8>
   16488:	mov	r6, #0
   1648c:	ldrb	r1, [r4, r7]
   16490:	add	r0, r6, r0
   16494:	add	r7, r7, #1
   16498:	uxtab	r6, r3, r1
   1649c:	uxtb	r1, r1
   164a0:	cmp	r6, #18
   164a4:	bhi	164b4 <lchmod@@Base+0x204>
   164a8:	tst	r5, r2, lsl r6
   164ac:	mov	r6, #1
   164b0:	bne	1648c <lchmod@@Base+0x1dc>
   164b4:	cmp	r1, #0
   164b8:	bne	16488 <lchmod@@Base+0x1d8>
   164bc:	mov	r1, #16
   164c0:	bl	18c54 <lchmod@@Base+0x29a4>
   164c4:	mov	sl, #0
   164c8:	mov	ip, #1
   164cc:	mvn	lr, #113	; 0x71
   164d0:	mov	r9, #0
   164d4:	b	16694 <lchmod@@Base+0x3e4>
   164d8:	tst	r5, ip, lsl r1
   164dc:	beq	166f8 <lchmod@@Base+0x448>
   164e0:	ldrb	r3, [r4, #1]
   164e4:	add	r4, r4, #2
   164e8:	sub	r1, r3, #48	; 0x30
   164ec:	cmp	r1, #8
   164f0:	bcs	16548 <lchmod@@Base+0x298>
   164f4:	mov	r7, #0
   164f8:	lsl	r1, r7, #3
   164fc:	uxtab	r1, r1, r3
   16500:	sub	r7, r1, #48	; 0x30
   16504:	cmp	sl, r7, lsr #12
   16508:	bne	166f8 <lchmod@@Base+0x448>
   1650c:	ldrb	r3, [r4], #1
   16510:	and	r1, r3, #248	; 0xf8
   16514:	cmp	r1, #48	; 0x30
   16518:	beq	164f8 <lchmod@@Base+0x248>
   1651c:	cmp	r2, #0
   16520:	bne	166f8 <lchmod@@Base+0x448>
   16524:	sub	r4, r4, #1
   16528:	mov	r8, #1
   1652c:	movw	r2, #4095	; 0xfff
   16530:	cmp	r3, #0
   16534:	beq	16570 <lchmod@@Base+0x2c0>
   16538:	cmp	r3, #44	; 0x2c
   1653c:	movw	r3, #4095	; 0xfff
   16540:	beq	16618 <lchmod@@Base+0x368>
   16544:	b	166f8 <lchmod@@Base+0x448>
   16548:	cmp	r3, #103	; 0x67
   1654c:	beq	16578 <lchmod@@Base+0x2c8>
   16550:	cmp	r3, #111	; 0x6f
   16554:	beq	16588 <lchmod@@Base+0x2d8>
   16558:	cmp	r3, #117	; 0x75
   1655c:	bne	16598 <lchmod@@Base+0x2e8>
   16560:	mov	r8, #3
   16564:	mov	r3, #0
   16568:	mov	r7, #448	; 0x1c0
   1656c:	b	16618 <lchmod@@Base+0x368>
   16570:	movw	r3, #4095	; 0xfff
   16574:	b	16618 <lchmod@@Base+0x368>
   16578:	mov	r8, #3
   1657c:	mov	r3, #0
   16580:	mov	r7, #56	; 0x38
   16584:	b	16618 <lchmod@@Base+0x368>
   16588:	mov	r8, #3
   1658c:	mov	r3, #0
   16590:	mov	r7, #7
   16594:	b	16618 <lchmod@@Base+0x368>
   16598:	mov	r8, #1
   1659c:	mov	r7, #0
   165a0:	b	165cc <lchmod@@Base+0x31c>
   165a4:	mov	r8, #2
   165a8:	b	165c8 <lchmod@@Base+0x318>
   165ac:	orr	r7, r7, #3072	; 0xc00
   165b0:	b	165c8 <lchmod@@Base+0x318>
   165b4:	orr	r7, r7, #512	; 0x200
   165b8:	b	165c8 <lchmod@@Base+0x318>
   165bc:	orr	r7, r7, #146	; 0x92
   165c0:	b	165c8 <lchmod@@Base+0x318>
   165c4:	orr	r7, r7, #73	; 0x49
   165c8:	ldrb	r3, [r4], #1
   165cc:	uxtab	r1, lr, r3
   165d0:	cmp	r1, #6
   165d4:	bhi	16604 <lchmod@@Base+0x354>
   165d8:	add	r3, pc, #0
   165dc:	ldr	pc, [r3, r1, lsl #2]
   165e0:	strdeq	r6, [r1], -ip
   165e4:	andeq	r6, r1, ip, lsr #11
   165e8:			; <UNDEFINED> instruction: 0x000165b4
   165ec:	andeq	r6, r1, r0, lsl r6
   165f0:	andeq	r6, r1, r0, lsl r6
   165f4:			; <UNDEFINED> instruction: 0x000165bc
   165f8:	andeq	r6, r1, r4, asr #11
   165fc:	orr	r7, r7, #292	; 0x124
   16600:	b	165c8 <lchmod@@Base+0x318>
   16604:	uxtb	r1, r3
   16608:	cmp	r1, #88	; 0x58
   1660c:	beq	165a4 <lchmod@@Base+0x2f4>
   16610:	sub	r4, r4, #1
   16614:	mov	r3, #0
   16618:	mov	r1, r0
   1661c:	cmp	r3, #0
   16620:	strb	r6, [r1, r9, lsl #4]!
   16624:	strb	r8, [r1, #1]
   16628:	stmib	r1, {r2, r7}
   1662c:	bne	1663c <lchmod@@Base+0x38c>
   16630:	cmp	r2, #0
   16634:	andne	r7, r7, r2
   16638:	mov	r3, r7
   1663c:	add	r1, r0, r9, lsl #4
   16640:	add	r7, r9, #1
   16644:	str	r3, [r1, #12]
   16648:	ldrb	r6, [r4]
   1664c:	cmp	r6, #44	; 0x2c
   16650:	ble	16670 <lchmod@@Base+0x3c0>
   16654:	cmp	r6, #45	; 0x2d
   16658:	mov	r9, r7
   1665c:	beq	164e0 <lchmod@@Base+0x230>
   16660:	cmp	r6, #61	; 0x3d
   16664:	mov	r9, r7
   16668:	beq	164e0 <lchmod@@Base+0x230>
   1666c:	b	166f8 <lchmod@@Base+0x448>
   16670:	cmp	r6, #43	; 0x2b
   16674:	mov	r9, r7
   16678:	beq	164e0 <lchmod@@Base+0x230>
   1667c:	cmp	r6, #0
   16680:	beq	16708 <lchmod@@Base+0x458>
   16684:	cmp	r6, #44	; 0x2c
   16688:	bne	166f8 <lchmod@@Base+0x448>
   1668c:	add	r4, r4, #1
   16690:	mov	r9, r7
   16694:	mov	r2, #0
   16698:	b	166d0 <lchmod@@Base+0x420>
   1669c:	movw	r3, #1080	; 0x438
   166a0:	b	166c8 <lchmod@@Base+0x418>
   166a4:	cmp	r6, #111	; 0x6f
   166a8:	beq	166c4 <lchmod@@Base+0x414>
   166ac:	mov	r3, #2496	; 0x9c0
   166b0:	cmp	r6, #117	; 0x75
   166b4:	beq	166c8 <lchmod@@Base+0x418>
   166b8:	b	166f8 <lchmod@@Base+0x448>
   166bc:	movw	r3, #4095	; 0xfff
   166c0:	b	166c8 <lchmod@@Base+0x418>
   166c4:	movw	r3, #519	; 0x207
   166c8:	orr	r2, r2, r3
   166cc:	add	r4, r4, #1
   166d0:	ldrb	r6, [r4]
   166d4:	cmp	r6, #110	; 0x6e
   166d8:	bgt	166a4 <lchmod@@Base+0x3f4>
   166dc:	cmp	r6, #97	; 0x61
   166e0:	beq	166bc <lchmod@@Base+0x40c>
   166e4:	cmp	r6, #103	; 0x67
   166e8:	beq	1669c <lchmod@@Base+0x3ec>
   166ec:	sub	r1, r6, #43	; 0x2b
   166f0:	cmp	r1, #18
   166f4:	bls	164d8 <lchmod@@Base+0x228>
   166f8:	bl	1319c <__assert_fail@plt+0x164c>
   166fc:	mov	r0, #0
   16700:	sub	sp, fp, #28
   16704:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16708:	add	r1, r0, r7, lsl #4
   1670c:	mov	r2, #0
   16710:	strb	r2, [r1, #1]
   16714:	b	16700 <lchmod@@Base+0x450>
   16718:	push	{r4, sl, fp, lr}
   1671c:	add	fp, sp, #8
   16720:	sub	sp, sp, #104	; 0x68
   16724:	mov	r1, sp
   16728:	bl	19b14 <lchmod@@Base+0x3864>
   1672c:	mov	r1, r0
   16730:	mov	r0, #0
   16734:	cmp	r1, #0
   16738:	bne	16764 <lchmod@@Base+0x4b4>
   1673c:	ldr	r4, [sp, #16]
   16740:	mov	r0, #32
   16744:	bl	18b84 <lchmod@@Base+0x28d4>
   16748:	movw	r1, #317	; 0x13d
   1674c:	strh	r1, [r0]
   16750:	movw	r1, #4095	; 0xfff
   16754:	stmib	r0, {r1, r4}
   16758:	str	r1, [r0, #12]
   1675c:	mov	r1, #0
   16760:	strb	r1, [r0, #17]
   16764:	sub	sp, fp, #8
   16768:	pop	{r4, sl, fp, pc}
   1676c:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   16770:	add	fp, sp, #24
   16774:	ldrb	r4, [r3, #1]
   16778:	ldr	ip, [fp, #8]
   1677c:	bfc	r0, #12, #20
   16780:	cmp	r4, #0
   16784:	beq	16864 <lchmod@@Base+0x5b4>
   16788:	cmp	r1, #0
   1678c:	mov	lr, r1
   16790:	add	r3, r3, #8
   16794:	mov	r9, #0
   16798:	movw	r8, #4095	; 0xfff
   1679c:	movwne	lr, #3072	; 0xc00
   167a0:	mov	r5, r3
   167a4:	ldr	r7, [r3, #-4]
   167a8:	ldr	r3, [r3]
   167ac:	uxtb	r4, r4
   167b0:	ldr	r6, [r5, #4]
   167b4:	cmp	r4, #2
   167b8:	bic	r6, lr, r6
   167bc:	beq	167e8 <lchmod@@Base+0x538>
   167c0:	cmp	r4, #3
   167c4:	bne	167f4 <lchmod@@Base+0x544>
   167c8:	and	r4, r3, r0
   167cc:	tst	r4, #146	; 0x92
   167d0:	mov	r3, r4
   167d4:	orrne	r3, r3, #146	; 0x92
   167d8:	tst	r4, #292	; 0x124
   167dc:	orrne	r3, r3, #292	; 0x124
   167e0:	tst	r4, #73	; 0x49
   167e4:	b	167f0 <lchmod@@Base+0x540>
   167e8:	and	r4, r0, #73	; 0x49
   167ec:	orrs	r4, r4, r1
   167f0:	orrne	r3, r3, #73	; 0x49
   167f4:	cmp	r7, #0
   167f8:	mov	r4, r7
   167fc:	mvneq	r4, r2
   16800:	bic	r4, r4, r6
   16804:	and	r3, r4, r3
   16808:	ldrb	r4, [r5, #-8]
   1680c:	cmp	r4, #43	; 0x2b
   16810:	beq	16840 <lchmod@@Base+0x590>
   16814:	cmp	r4, #45	; 0x2d
   16818:	beq	16848 <lchmod@@Base+0x598>
   1681c:	cmp	r4, #61	; 0x3d
   16820:	bne	16850 <lchmod@@Base+0x5a0>
   16824:	mvn	r4, r7
   16828:	cmp	r7, #0
   1682c:	orrne	r6, r6, r4
   16830:	and	r0, r6, r0
   16834:	orr	r0, r3, r0
   16838:	bic	r3, r8, r6
   1683c:	b	1684c <lchmod@@Base+0x59c>
   16840:	orr	r0, r3, r0
   16844:	b	1684c <lchmod@@Base+0x59c>
   16848:	bic	r0, r0, r3
   1684c:	orr	r9, r3, r9
   16850:	ldrb	r4, [r5, #9]
   16854:	add	r3, r5, #16
   16858:	cmp	r4, #0
   1685c:	bne	167a0 <lchmod@@Base+0x4f0>
   16860:	b	16868 <lchmod@@Base+0x5b8>
   16864:	mov	r9, #0
   16868:	cmp	ip, #0
   1686c:	strne	r9, [ip]
   16870:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   16874:	sub	sp, sp, #4
   16878:	push	{fp, lr}
   1687c:	mov	fp, sp
   16880:	sub	sp, sp, #4
   16884:	str	r3, [fp, #8]
   16888:	mov	r3, #0
   1688c:	tst	r2, #64	; 0x40
   16890:	addne	r3, fp, #8
   16894:	addne	r3, r3, #4
   16898:	strne	r3, [sp]
   1689c:	ldrne	r3, [fp, #8]
   168a0:	bl	1197c <openat64@plt>
   168a4:	bl	18684 <lchmod@@Base+0x23d4>
   168a8:	mov	sp, fp
   168ac:	pop	{fp, lr}
   168b0:	add	sp, sp, #4
   168b4:	bx	lr
   168b8:	push	{r4, r5, r6, sl, fp, lr}
   168bc:	add	fp, sp, #16
   168c0:	orr	r2, r2, #18688	; 0x4900
   168c4:	mov	r4, r3
   168c8:	orr	r2, r2, #524288	; 0x80000
   168cc:	bl	16874 <lchmod@@Base+0x5c4>
   168d0:	mov	r5, r0
   168d4:	mov	r0, #0
   168d8:	cmp	r5, #0
   168dc:	poplt	{r4, r5, r6, sl, fp, pc}
   168e0:	mov	r0, r5
   168e4:	bl	11a48 <fdopendir@plt>
   168e8:	cmp	r0, #0
   168ec:	strne	r5, [r4]
   168f0:	popne	{r4, r5, r6, sl, fp, pc}
   168f4:	bl	11994 <__errno_location@plt>
   168f8:	ldr	r6, [r0]
   168fc:	mov	r4, r0
   16900:	mov	r0, r5
   16904:	bl	11afc <close@plt>
   16908:	mov	r0, #0
   1690c:	str	r6, [r4]
   16910:	pop	{r4, r5, r6, sl, fp, pc}
   16914:	push	{r4, r5, fp, lr}
   16918:	add	fp, sp, #8
   1691c:	cmp	r0, #0
   16920:	beq	169b4 <lchmod@@Base+0x704>
   16924:	mov	r1, #47	; 0x2f
   16928:	mov	r4, r0
   1692c:	bl	11a24 <strrchr@plt>
   16930:	cmp	r0, #0
   16934:	mov	r5, r4
   16938:	addne	r5, r0, #1
   1693c:	sub	r0, r5, r4
   16940:	cmp	r0, #7
   16944:	blt	16998 <lchmod@@Base+0x6e8>
   16948:	movw	r1, #41485	; 0xa20d
   1694c:	sub	r0, r5, #7
   16950:	mov	r2, #7
   16954:	movt	r1, #1
   16958:	bl	11ae4 <strncmp@plt>
   1695c:	cmp	r0, #0
   16960:	bne	16998 <lchmod@@Base+0x6e8>
   16964:	movw	r1, #41493	; 0xa215
   16968:	mov	r0, r5
   1696c:	mov	r2, #3
   16970:	movt	r1, #1
   16974:	bl	11ae4 <strncmp@plt>
   16978:	cmp	r0, #0
   1697c:	beq	16988 <lchmod@@Base+0x6d8>
   16980:	mov	r4, r5
   16984:	b	16998 <lchmod@@Base+0x6e8>
   16988:	movw	r0, #45512	; 0xb1c8
   1698c:	add	r4, r5, #3
   16990:	movt	r0, #2
   16994:	str	r4, [r0]
   16998:	movw	r0, #45516	; 0xb1cc
   1699c:	movt	r0, #2
   169a0:	str	r4, [r0]
   169a4:	movw	r0, #45552	; 0xb1f0
   169a8:	movt	r0, #2
   169ac:	str	r4, [r0]
   169b0:	pop	{r4, r5, fp, pc}
   169b4:	movw	r0, #45528	; 0xb1d8
   169b8:	movt	r0, #2
   169bc:	ldr	r1, [r0]
   169c0:	movw	r0, #41429	; 0xa1d5
   169c4:	movt	r0, #1
   169c8:	bl	11ad8 <fputs@plt>
   169cc:	bl	11af0 <abort@plt>
   169d0:	push	{r4, r5, r6, sl, fp, lr}
   169d4:	add	fp, sp, #16
   169d8:	mov	r4, r0
   169dc:	movw	r0, #45560	; 0xb1f8
   169e0:	movt	r0, #2
   169e4:	cmp	r4, #0
   169e8:	moveq	r4, r0
   169ec:	bl	11994 <__errno_location@plt>
   169f0:	ldr	r6, [r0]
   169f4:	mov	r5, r0
   169f8:	mov	r0, r4
   169fc:	mov	r1, #48	; 0x30
   16a00:	bl	18ed4 <lchmod@@Base+0x2c24>
   16a04:	str	r6, [r5]
   16a08:	pop	{r4, r5, r6, sl, fp, pc}
   16a0c:	movw	r1, #45560	; 0xb1f8
   16a10:	cmp	r0, #0
   16a14:	movt	r1, #2
   16a18:	movne	r1, r0
   16a1c:	ldr	r0, [r1]
   16a20:	bx	lr
   16a24:	movw	r2, #45560	; 0xb1f8
   16a28:	cmp	r0, #0
   16a2c:	movt	r2, #2
   16a30:	movne	r2, r0
   16a34:	str	r1, [r2]
   16a38:	bx	lr
   16a3c:	movw	r3, #45560	; 0xb1f8
   16a40:	cmp	r0, #0
   16a44:	movt	r3, #2
   16a48:	movne	r3, r0
   16a4c:	ubfx	r0, r1, #5, #3
   16a50:	and	r1, r1, #31
   16a54:	add	r0, r3, r0, lsl #2
   16a58:	ldr	r3, [r0, #8]
   16a5c:	eor	r2, r2, r3, lsr r1
   16a60:	and	r2, r2, #1
   16a64:	eor	r2, r3, r2, lsl r1
   16a68:	str	r2, [r0, #8]
   16a6c:	mov	r0, #1
   16a70:	and	r0, r0, r3, lsr r1
   16a74:	bx	lr
   16a78:	movw	r2, #45560	; 0xb1f8
   16a7c:	cmp	r0, #0
   16a80:	movt	r2, #2
   16a84:	movne	r2, r0
   16a88:	ldr	r0, [r2, #4]
   16a8c:	str	r1, [r2, #4]
   16a90:	bx	lr
   16a94:	movw	r3, #45560	; 0xb1f8
   16a98:	cmp	r0, #0
   16a9c:	movt	r3, #2
   16aa0:	movne	r3, r0
   16aa4:	cmp	r1, #0
   16aa8:	mov	r0, #10
   16aac:	cmpne	r2, #0
   16ab0:	str	r0, [r3]
   16ab4:	bne	16ac4 <lchmod@@Base+0x814>
   16ab8:	push	{fp, lr}
   16abc:	mov	fp, sp
   16ac0:	bl	11af0 <abort@plt>
   16ac4:	str	r1, [r3, #40]	; 0x28
   16ac8:	str	r2, [r3, #44]	; 0x2c
   16acc:	bx	lr
   16ad0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16ad4:	add	fp, sp, #28
   16ad8:	sub	sp, sp, #20
   16adc:	mov	r7, r0
   16ae0:	ldr	r0, [fp, #8]
   16ae4:	movw	r5, #45560	; 0xb1f8
   16ae8:	mov	r8, r3
   16aec:	mov	r9, r2
   16af0:	mov	sl, r1
   16af4:	movt	r5, #2
   16af8:	cmp	r0, #0
   16afc:	movne	r5, r0
   16b00:	bl	11994 <__errno_location@plt>
   16b04:	mov	r4, r0
   16b08:	ldm	r5, {r0, r1}
   16b0c:	ldr	r2, [r5, #40]	; 0x28
   16b10:	ldr	r3, [r5, #44]	; 0x2c
   16b14:	add	r5, r5, #8
   16b18:	ldr	r6, [r4]
   16b1c:	stm	sp, {r0, r1, r5}
   16b20:	str	r2, [sp, #12]
   16b24:	str	r3, [sp, #16]
   16b28:	mov	r0, r7
   16b2c:	mov	r1, sl
   16b30:	mov	r2, r9
   16b34:	mov	r3, r8
   16b38:	bl	16b48 <lchmod@@Base+0x898>
   16b3c:	str	r6, [r4]
   16b40:	sub	sp, fp, #28
   16b44:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16b48:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16b4c:	add	fp, sp, #28
   16b50:	sub	sp, sp, #156	; 0x9c
   16b54:	str	r0, [fp, #-56]	; 0xffffffc8
   16b58:	ldr	r0, [fp, #12]
   16b5c:	mov	r4, r1
   16b60:	str	r3, [sp, #80]	; 0x50
   16b64:	str	r2, [fp, #-84]	; 0xffffffac
   16b68:	and	r1, r0, #4
   16b6c:	str	r1, [sp, #24]
   16b70:	and	r1, r0, #1
   16b74:	str	r1, [sp, #28]
   16b78:	ubfx	r7, r0, #1, #1
   16b7c:	bl	1188c <__ctype_get_mb_cur_max@plt>
   16b80:	str	r0, [sp, #32]
   16b84:	ldr	r0, [fp, #24]
   16b88:	ldr	r9, [fp, #8]
   16b8c:	mov	r2, #0
   16b90:	mov	r1, #0
   16b94:	mov	r5, #0
   16b98:	str	r2, [sp, #52]	; 0x34
   16b9c:	mov	r2, #1
   16ba0:	str	r0, [sp, #72]	; 0x48
   16ba4:	ldr	r0, [fp, #20]
   16ba8:	str	r0, [sp, #64]	; 0x40
   16bac:	mov	r0, #0
   16bb0:	str	r0, [sp, #92]	; 0x5c
   16bb4:	mov	r0, #0
   16bb8:	str	r0, [fp, #-76]	; 0xffffffb4
   16bbc:	mov	r0, #0
   16bc0:	cmp	r9, #10
   16bc4:	str	r1, [sp, #68]	; 0x44
   16bc8:	bhi	17bc8 <lchmod@@Base+0x1918>
   16bcc:	add	r1, pc, #28
   16bd0:	ldr	ip, [fp, #-84]	; 0xffffffac
   16bd4:	ldr	lr, [sp, #80]	; 0x50
   16bd8:	mov	r6, r4
   16bdc:	mov	r8, #0
   16be0:	mov	r3, #1
   16be4:	mov	sl, #0
   16be8:	mov	r4, r2
   16bec:	ldr	pc, [r1, r9, lsl #2]
   16bf0:	andeq	r6, r1, r0, asr #25
   16bf4:	strdeq	r6, [r1], -ip
   16bf8:	ldrdeq	r6, [r1], -r0
   16bfc:			; <UNDEFINED> instruction: 0x00016cb8
   16c00:	strdeq	r6, [r1], -r0
   16c04:	andeq	r6, r1, r8, asr #26
   16c08:	andeq	r6, r1, r0, ror #25
   16c0c:	andeq	r6, r1, r8, lsr #27
   16c10:	andeq	r6, r1, ip, lsl ip
   16c14:	andeq	r6, r1, ip, lsl ip
   16c18:	andeq	r6, r1, r4, asr #24
   16c1c:	movw	r0, #41575	; 0xa267
   16c20:	mov	r1, r9
   16c24:	movt	r0, #1
   16c28:	bl	18330 <lchmod@@Base+0x2080>
   16c2c:	str	r0, [sp, #64]	; 0x40
   16c30:	movw	r0, #41577	; 0xa269
   16c34:	mov	r1, r9
   16c38:	movt	r0, #1
   16c3c:	bl	18330 <lchmod@@Base+0x2080>
   16c40:	str	r0, [sp, #72]	; 0x48
   16c44:	mov	r8, #0
   16c48:	mov	sl, r7
   16c4c:	tst	r7, #1
   16c50:	str	r5, [fp, #-48]	; 0xffffffd0
   16c54:	bne	16c90 <lchmod@@Base+0x9e0>
   16c58:	ldr	r0, [sp, #64]	; 0x40
   16c5c:	ldrb	r0, [r0]
   16c60:	cmp	r0, #0
   16c64:	beq	16c90 <lchmod@@Base+0x9e0>
   16c68:	ldr	r1, [sp, #64]	; 0x40
   16c6c:	mov	r8, #0
   16c70:	add	r1, r1, #1
   16c74:	cmp	r8, r6
   16c78:	ldrcc	r2, [fp, #-56]	; 0xffffffc8
   16c7c:	strbcc	r0, [r2, r8]
   16c80:	ldrb	r0, [r1, r8]
   16c84:	add	r8, r8, #1
   16c88:	cmp	r0, #0
   16c8c:	bne	16c74 <lchmod@@Base+0x9c4>
   16c90:	ldr	r7, [sp, #72]	; 0x48
   16c94:	mov	r0, r7
   16c98:	bl	11964 <strlen@plt>
   16c9c:	ldr	ip, [fp, #-84]	; 0xffffffac
   16ca0:	ldr	lr, [sp, #80]	; 0x50
   16ca4:	ldr	r5, [fp, #-48]	; 0xffffffd0
   16ca8:	str	r0, [fp, #-76]	; 0xffffffb4
   16cac:	str	r7, [sp, #92]	; 0x5c
   16cb0:	mov	r3, #1
   16cb4:	b	16da8 <lchmod@@Base+0xaf8>
   16cb8:	mov	r0, #1
   16cbc:	b	16cfc <lchmod@@Base+0xa4c>
   16cc0:	mov	r9, #0
   16cc4:	mov	r8, #0
   16cc8:	mov	r3, r0
   16ccc:	b	16da4 <lchmod@@Base+0xaf4>
   16cd0:	tst	r7, #1
   16cd4:	bne	16cfc <lchmod@@Base+0xa4c>
   16cd8:	mov	r3, r0
   16cdc:	b	16d24 <lchmod@@Base+0xa74>
   16ce0:	mov	r0, #1
   16ce4:	mov	r8, #0
   16ce8:	mov	r9, #5
   16cec:	b	16d5c <lchmod@@Base+0xaac>
   16cf0:	mov	r3, #1
   16cf4:	tst	r7, #1
   16cf8:	beq	16d24 <lchmod@@Base+0xa74>
   16cfc:	mov	r1, #1
   16d00:	mov	r8, #0
   16d04:	mov	r9, #2
   16d08:	mov	r3, r0
   16d0c:	mov	sl, #1
   16d10:	str	r1, [fp, #-76]	; 0xffffffb4
   16d14:	movw	r1, #41577	; 0xa269
   16d18:	movt	r1, #1
   16d1c:	str	r1, [sp, #92]	; 0x5c
   16d20:	b	16da8 <lchmod@@Base+0xaf8>
   16d24:	cmp	r6, #0
   16d28:	mov	r8, #1
   16d2c:	mov	r9, #2
   16d30:	ldrne	r1, [fp, #-56]	; 0xffffffc8
   16d34:	movne	r0, #39	; 0x27
   16d38:	strbne	r0, [r1]
   16d3c:	movw	r0, #41577	; 0xa269
   16d40:	movt	r0, #1
   16d44:	b	16d98 <lchmod@@Base+0xae8>
   16d48:	mov	r9, #5
   16d4c:	tst	r7, #1
   16d50:	beq	16d78 <lchmod@@Base+0xac8>
   16d54:	mov	r0, #1
   16d58:	mov	r8, #0
   16d5c:	str	r0, [fp, #-76]	; 0xffffffb4
   16d60:	movw	r0, #41573	; 0xa265
   16d64:	mov	r3, #1
   16d68:	mov	sl, #1
   16d6c:	movt	r0, #1
   16d70:	str	r0, [sp, #92]	; 0x5c
   16d74:	b	16da8 <lchmod@@Base+0xaf8>
   16d78:	cmp	r6, #0
   16d7c:	mov	r8, #1
   16d80:	mov	r3, #1
   16d84:	ldrne	r1, [fp, #-56]	; 0xffffffc8
   16d88:	movne	r0, #34	; 0x22
   16d8c:	strbne	r0, [r1]
   16d90:	movw	r0, #41573	; 0xa265
   16d94:	movt	r0, #1
   16d98:	str	r0, [sp, #92]	; 0x5c
   16d9c:	mov	r0, #1
   16da0:	str	r0, [fp, #-76]	; 0xffffffb4
   16da4:	mov	sl, #0
   16da8:	ldr	r0, [fp, #16]
   16dac:	mov	r7, #0
   16db0:	str	r9, [fp, #-64]	; 0xffffffc0
   16db4:	str	sl, [fp, #-72]	; 0xffffffb8
   16db8:	str	r3, [sp, #84]	; 0x54
   16dbc:	cmp	r0, #0
   16dc0:	movwne	r0, #1
   16dc4:	and	r0, r0, sl
   16dc8:	str	r0, [fp, #-88]	; 0xffffffa8
   16dcc:	ldr	r0, [fp, #-76]	; 0xffffffb4
   16dd0:	cmp	r0, #0
   16dd4:	movwne	r0, #1
   16dd8:	subs	r2, r9, #2
   16ddc:	and	r1, r0, sl
   16de0:	str	r2, [fp, #-80]	; 0xffffffb0
   16de4:	and	r1, r3, r1
   16de8:	str	r1, [sp, #44]	; 0x2c
   16dec:	clz	r1, r2
   16df0:	lsr	r1, r1, #5
   16df4:	and	r1, r1, sl
   16df8:	str	r1, [sp, #56]	; 0x38
   16dfc:	mov	r1, r2
   16e00:	eor	r2, sl, #1
   16e04:	movwne	r1, #1
   16e08:	str	r2, [sp, #88]	; 0x58
   16e0c:	orr	r2, r1, r2
   16e10:	and	r1, r1, r3
   16e14:	and	r0, r0, r1
   16e18:	str	r2, [sp, #60]	; 0x3c
   16e1c:	str	r1, [fp, #-68]	; 0xffffffbc
   16e20:	str	r0, [fp, #-60]	; 0xffffffc4
   16e24:	eor	r0, r3, #1
   16e28:	str	r0, [sp, #48]	; 0x30
   16e2c:	cmn	lr, #1
   16e30:	beq	16e40 <lchmod@@Base+0xb90>
   16e34:	cmp	r7, lr
   16e38:	bne	16e4c <lchmod@@Base+0xb9c>
   16e3c:	b	179f8 <lchmod@@Base+0x1748>
   16e40:	ldrb	r0, [ip, r7]
   16e44:	cmp	r0, #0
   16e48:	beq	17a00 <lchmod@@Base+0x1750>
   16e4c:	ldr	r0, [fp, #-60]	; 0xffffffc4
   16e50:	mov	r9, #0
   16e54:	str	r5, [fp, #-48]	; 0xffffffd0
   16e58:	str	r6, [fp, #-52]	; 0xffffffcc
   16e5c:	cmp	r0, #0
   16e60:	beq	16ea0 <lchmod@@Base+0xbf0>
   16e64:	ldr	r0, [fp, #-76]	; 0xffffffb4
   16e68:	mov	r5, r4
   16e6c:	add	r4, r7, r0
   16e70:	cmp	r0, #2
   16e74:	bcc	16e90 <lchmod@@Base+0xbe0>
   16e78:	cmn	lr, #1
   16e7c:	bne	16e90 <lchmod@@Base+0xbe0>
   16e80:	mov	r0, ip
   16e84:	bl	11964 <strlen@plt>
   16e88:	ldr	ip, [fp, #-84]	; 0xffffffac
   16e8c:	mov	lr, r0
   16e90:	cmp	r4, lr
   16e94:	bls	16ea8 <lchmod@@Base+0xbf8>
   16e98:	mov	r6, #0
   16e9c:	b	16ee8 <lchmod@@Base+0xc38>
   16ea0:	mov	r6, #0
   16ea4:	b	16eec <lchmod@@Base+0xc3c>
   16ea8:	ldr	r1, [sp, #92]	; 0x5c
   16eac:	ldr	r2, [fp, #-76]	; 0xffffffb4
   16eb0:	add	r0, ip, r7
   16eb4:	mov	r4, lr
   16eb8:	bl	117fc <memcmp@plt>
   16ebc:	ldr	r2, [sp, #88]	; 0x58
   16ec0:	cmp	r0, #0
   16ec4:	mov	r1, r0
   16ec8:	movwne	r1, #1
   16ecc:	orr	r1, r1, r2
   16ed0:	tst	r1, #1
   16ed4:	beq	17a94 <lchmod@@Base+0x17e4>
   16ed8:	ldr	ip, [fp, #-84]	; 0xffffffac
   16edc:	clz	r0, r0
   16ee0:	mov	lr, r4
   16ee4:	lsr	r6, r0, #5
   16ee8:	mov	r4, r5
   16eec:	ldrb	r5, [ip, r7]
   16ef0:	cmp	r5, #126	; 0x7e
   16ef4:	bhi	172bc <lchmod@@Base+0x100c>
   16ef8:	add	r3, pc, #16
   16efc:	mov	sl, #1
   16f00:	mov	r2, #110	; 0x6e
   16f04:	mov	r0, #97	; 0x61
   16f08:	mov	r1, #0
   16f0c:	ldr	pc, [r3, r5, lsl #2]
   16f10:	andeq	r7, r1, r0, lsr #3
   16f14:			; <UNDEFINED> instruction: 0x000172bc
   16f18:			; <UNDEFINED> instruction: 0x000172bc
   16f1c:			; <UNDEFINED> instruction: 0x000172bc
   16f20:			; <UNDEFINED> instruction: 0x000172bc
   16f24:			; <UNDEFINED> instruction: 0x000172bc
   16f28:			; <UNDEFINED> instruction: 0x000172bc
   16f2c:	andeq	r7, r1, r0, ror #6
   16f30:	andeq	r7, r1, r0, lsl #3
   16f34:	andeq	r7, r1, r8, ror r1
   16f38:	andeq	r7, r1, ip, lsl #3
   16f3c:	andeq	r7, r1, r0, lsl r2
   16f40:	andeq	r7, r1, r0, ror r1
   16f44:	andeq	r7, r1, r8, lsl #3
   16f48:			; <UNDEFINED> instruction: 0x000172bc
   16f4c:			; <UNDEFINED> instruction: 0x000172bc
   16f50:			; <UNDEFINED> instruction: 0x000172bc
   16f54:			; <UNDEFINED> instruction: 0x000172bc
   16f58:			; <UNDEFINED> instruction: 0x000172bc
   16f5c:			; <UNDEFINED> instruction: 0x000172bc
   16f60:			; <UNDEFINED> instruction: 0x000172bc
   16f64:			; <UNDEFINED> instruction: 0x000172bc
   16f68:			; <UNDEFINED> instruction: 0x000172bc
   16f6c:			; <UNDEFINED> instruction: 0x000172bc
   16f70:			; <UNDEFINED> instruction: 0x000172bc
   16f74:			; <UNDEFINED> instruction: 0x000172bc
   16f78:			; <UNDEFINED> instruction: 0x000172bc
   16f7c:			; <UNDEFINED> instruction: 0x000172bc
   16f80:			; <UNDEFINED> instruction: 0x000172bc
   16f84:			; <UNDEFINED> instruction: 0x000172bc
   16f88:			; <UNDEFINED> instruction: 0x000172bc
   16f8c:			; <UNDEFINED> instruction: 0x000172bc
   16f90:	andeq	r7, r1, r0, lsr #6
   16f94:	andeq	r7, r1, r4, lsr #6
   16f98:	andeq	r7, r1, r4, lsr #6
   16f9c:	andeq	r7, r1, r0, lsr #2
   16fa0:	andeq	r7, r1, r4, lsr #6
   16fa4:	andeq	r7, r1, ip, lsl #2
   16fa8:	andeq	r7, r1, r4, lsr #6
   16fac:	andeq	r7, r1, r8, lsl r2
   16fb0:	andeq	r7, r1, r4, lsr #6
   16fb4:	andeq	r7, r1, r4, lsr #6
   16fb8:	andeq	r7, r1, r4, lsr #6
   16fbc:	andeq	r7, r1, ip, lsl #2
   16fc0:	andeq	r7, r1, ip, lsl #2
   16fc4:	andeq	r7, r1, ip, lsl #2
   16fc8:	andeq	r7, r1, ip, lsl #2
   16fcc:	andeq	r7, r1, ip, lsl #2
   16fd0:	andeq	r7, r1, ip, lsl #2
   16fd4:	andeq	r7, r1, ip, lsl #2
   16fd8:	andeq	r7, r1, ip, lsl #2
   16fdc:	andeq	r7, r1, ip, lsl #2
   16fe0:	andeq	r7, r1, ip, lsl #2
   16fe4:	andeq	r7, r1, ip, lsl #2
   16fe8:	andeq	r7, r1, ip, lsl #2
   16fec:	andeq	r7, r1, ip, lsl #2
   16ff0:	andeq	r7, r1, ip, lsl #2
   16ff4:	andeq	r7, r1, ip, lsl #2
   16ff8:	andeq	r7, r1, ip, lsl #2
   16ffc:	andeq	r7, r1, r4, lsr #6
   17000:	andeq	r7, r1, r4, lsr #6
   17004:	andeq	r7, r1, r4, lsr #6
   17008:	andeq	r7, r1, r4, lsr #6
   1700c:	andeq	r7, r1, r4, ror #3
   17010:			; <UNDEFINED> instruction: 0x000172bc
   17014:	andeq	r7, r1, ip, lsl #2
   17018:	andeq	r7, r1, ip, lsl #2
   1701c:	andeq	r7, r1, ip, lsl #2
   17020:	andeq	r7, r1, ip, lsl #2
   17024:	andeq	r7, r1, ip, lsl #2
   17028:	andeq	r7, r1, ip, lsl #2
   1702c:	andeq	r7, r1, ip, lsl #2
   17030:	andeq	r7, r1, ip, lsl #2
   17034:	andeq	r7, r1, ip, lsl #2
   17038:	andeq	r7, r1, ip, lsl #2
   1703c:	andeq	r7, r1, ip, lsl #2
   17040:	andeq	r7, r1, ip, lsl #2
   17044:	andeq	r7, r1, ip, lsl #2
   17048:	andeq	r7, r1, ip, lsl #2
   1704c:	andeq	r7, r1, ip, lsl #2
   17050:	andeq	r7, r1, ip, lsl #2
   17054:	andeq	r7, r1, ip, lsl #2
   17058:	andeq	r7, r1, ip, lsl #2
   1705c:	andeq	r7, r1, ip, lsl #2
   17060:	andeq	r7, r1, ip, lsl #2
   17064:	andeq	r7, r1, ip, lsl #2
   17068:	andeq	r7, r1, ip, lsl #2
   1706c:	andeq	r7, r1, ip, lsl #2
   17070:	andeq	r7, r1, ip, lsl #2
   17074:	andeq	r7, r1, ip, lsl #2
   17078:	andeq	r7, r1, ip, lsl #2
   1707c:	andeq	r7, r1, r4, lsr #6
   17080:	andeq	r7, r1, ip, asr #2
   17084:	andeq	r7, r1, ip, lsl #2
   17088:	andeq	r7, r1, r4, lsr #6
   1708c:	andeq	r7, r1, ip, lsl #2
   17090:	andeq	r7, r1, r4, lsr #6
   17094:	andeq	r7, r1, ip, lsl #2
   17098:	andeq	r7, r1, ip, lsl #2
   1709c:	andeq	r7, r1, ip, lsl #2
   170a0:	andeq	r7, r1, ip, lsl #2
   170a4:	andeq	r7, r1, ip, lsl #2
   170a8:	andeq	r7, r1, ip, lsl #2
   170ac:	andeq	r7, r1, ip, lsl #2
   170b0:	andeq	r7, r1, ip, lsl #2
   170b4:	andeq	r7, r1, ip, lsl #2
   170b8:	andeq	r7, r1, ip, lsl #2
   170bc:	andeq	r7, r1, ip, lsl #2
   170c0:	andeq	r7, r1, ip, lsl #2
   170c4:	andeq	r7, r1, ip, lsl #2
   170c8:	andeq	r7, r1, ip, lsl #2
   170cc:	andeq	r7, r1, ip, lsl #2
   170d0:	andeq	r7, r1, ip, lsl #2
   170d4:	andeq	r7, r1, ip, lsl #2
   170d8:	andeq	r7, r1, ip, lsl #2
   170dc:	andeq	r7, r1, ip, lsl #2
   170e0:	andeq	r7, r1, ip, lsl #2
   170e4:	andeq	r7, r1, ip, lsl #2
   170e8:	andeq	r7, r1, ip, lsl #2
   170ec:	andeq	r7, r1, ip, lsl #2
   170f0:	andeq	r7, r1, ip, lsl #2
   170f4:	andeq	r7, r1, ip, lsl #2
   170f8:	andeq	r7, r1, ip, lsl #2
   170fc:	andeq	r7, r1, r0, lsr r1
   17100:	andeq	r7, r1, r4, lsr #6
   17104:	andeq	r7, r1, r0, lsr r1
   17108:	andeq	r7, r1, r0, lsr #2
   1710c:	ldr	r0, [fp, #-68]	; 0xffffffbc
   17110:	cmp	r0, #0
   17114:	beq	17374 <lchmod@@Base+0x10c4>
   17118:	ldr	r0, [fp, #16]
   1711c:	b	17378 <lchmod@@Base+0x10c8>
   17120:	mov	sl, #0
   17124:	cmp	r7, #0
   17128:	bne	17590 <lchmod@@Base+0x12e0>
   1712c:	b	17320 <lchmod@@Base+0x1070>
   17130:	mov	sl, #0
   17134:	cmn	lr, #1
   17138:	beq	1730c <lchmod@@Base+0x105c>
   1713c:	cmp	r7, #0
   17140:	cmpeq	lr, #1
   17144:	bne	17590 <lchmod@@Base+0x12e0>
   17148:	b	17320 <lchmod@@Base+0x1070>
   1714c:	ldr	r0, [fp, #-64]	; 0xffffffc0
   17150:	cmp	r0, #2
   17154:	bne	17344 <lchmod@@Base+0x1094>
   17158:	ldr	r0, [fp, #-72]	; 0xffffffb8
   1715c:	tst	r0, #1
   17160:	bne	17ab0 <lchmod@@Base+0x1800>
   17164:	mov	r9, #0
   17168:	mov	r0, #92	; 0x5c
   1716c:	b	17358 <lchmod@@Base+0x10a8>
   17170:	mov	r0, #102	; 0x66
   17174:	b	17360 <lchmod@@Base+0x10b0>
   17178:	mov	r2, #116	; 0x74
   1717c:	b	1718c <lchmod@@Base+0xedc>
   17180:	mov	r0, #98	; 0x62
   17184:	b	17360 <lchmod@@Base+0x10b0>
   17188:	mov	r2, #114	; 0x72
   1718c:	ldr	r0, [sp, #60]	; 0x3c
   17190:	tst	r0, #1
   17194:	mov	r0, r2
   17198:	bne	17360 <lchmod@@Base+0x10b0>
   1719c:	b	17ab0 <lchmod@@Base+0x1800>
   171a0:	ldr	r0, [sp, #84]	; 0x54
   171a4:	tst	r0, #1
   171a8:	beq	1744c <lchmod@@Base+0x119c>
   171ac:	ldr	r0, [fp, #-72]	; 0xffffffb8
   171b0:	tst	r0, #1
   171b4:	bne	17bb8 <lchmod@@Base+0x1908>
   171b8:	ldr	r0, [fp, #-64]	; 0xffffffc0
   171bc:	ldr	r3, [fp, #-48]	; 0xffffffd0
   171c0:	ldr	r1, [fp, #-52]	; 0xffffffcc
   171c4:	cmp	r0, #2
   171c8:	ldr	r0, [fp, #-80]	; 0xffffffb0
   171cc:	movwne	r0, #1
   171d0:	orr	r0, r0, r3
   171d4:	tst	r0, #1
   171d8:	beq	178cc <lchmod@@Base+0x161c>
   171dc:	mov	r0, r8
   171e0:	b	1790c <lchmod@@Base+0x165c>
   171e4:	ldr	r0, [fp, #-64]	; 0xffffffc0
   171e8:	mov	r9, #0
   171ec:	mov	r5, #63	; 0x3f
   171f0:	cmp	r0, #5
   171f4:	beq	17598 <lchmod@@Base+0x12e8>
   171f8:	cmp	r0, #2
   171fc:	bne	17658 <lchmod@@Base+0x13a8>
   17200:	ldr	r0, [fp, #-72]	; 0xffffffb8
   17204:	tst	r0, #1
   17208:	beq	1765c <lchmod@@Base+0x13ac>
   1720c:	b	17ab0 <lchmod@@Base+0x1800>
   17210:	mov	r0, #118	; 0x76
   17214:	b	17360 <lchmod@@Base+0x10b0>
   17218:	mov	r0, #1
   1721c:	mov	r5, #39	; 0x27
   17220:	str	r0, [sp, #52]	; 0x34
   17224:	ldr	r0, [fp, #-64]	; 0xffffffc0
   17228:	cmp	r0, #2
   1722c:	bne	172b4 <lchmod@@Base+0x1004>
   17230:	ldr	r0, [fp, #-72]	; 0xffffffb8
   17234:	tst	r0, #1
   17238:	bne	17ab0 <lchmod@@Base+0x1800>
   1723c:	ldr	r3, [sp, #68]	; 0x44
   17240:	ldr	r2, [fp, #-52]	; 0xffffffcc
   17244:	mov	r9, #0
   17248:	clz	r1, r2
   1724c:	cmp	r3, #0
   17250:	mov	r0, r3
   17254:	movwne	r0, #1
   17258:	lsr	r1, r1, #5
   1725c:	orrs	r0, r0, r1
   17260:	moveq	r3, r2
   17264:	moveq	r2, r0
   17268:	cmp	r8, r2
   1726c:	str	r3, [sp, #68]	; 0x44
   17270:	str	r2, [fp, #-52]	; 0xffffffcc
   17274:	ldrcc	r1, [fp, #-56]	; 0xffffffc8
   17278:	movcc	r0, #39	; 0x27
   1727c:	strbcc	r0, [r1, r8]
   17280:	add	r0, r8, #1
   17284:	cmp	r0, r2
   17288:	ldrcc	r3, [fp, #-56]	; 0xffffffc8
   1728c:	movcc	r1, #92	; 0x5c
   17290:	strbcc	r1, [r3, r0]
   17294:	add	r0, r8, #2
   17298:	add	r8, r8, #3
   1729c:	cmp	r0, r2
   172a0:	ldrcc	r2, [fp, #-56]	; 0xffffffc8
   172a4:	movcc	r1, #39	; 0x27
   172a8:	strbcc	r1, [r2, r0]
   172ac:	mov	r0, #0
   172b0:	str	r0, [fp, #-48]	; 0xffffffd0
   172b4:	mov	sl, #1
   172b8:	b	1710c <lchmod@@Base+0xe5c>
   172bc:	ldr	r0, [sp, #32]
   172c0:	cmp	r0, #1
   172c4:	bne	17470 <lchmod@@Base+0x11c0>
   172c8:	str	lr, [sp, #80]	; 0x50
   172cc:	bl	11934 <__ctype_b_loc@plt>
   172d0:	ldr	r0, [r0]
   172d4:	ldr	ip, [fp, #-84]	; 0xffffffac
   172d8:	mov	r1, #1
   172dc:	add	r0, r0, r5, lsl #1
   172e0:	ldrb	r0, [r0, #1]
   172e4:	ubfx	sl, r0, #6, #1
   172e8:	ldr	r0, [sp, #48]	; 0x30
   172ec:	mov	r2, r1
   172f0:	cmp	r1, #1
   172f4:	orr	r0, sl, r0
   172f8:	bhi	17664 <lchmod@@Base+0x13b4>
   172fc:	tst	r0, #1
   17300:	beq	17664 <lchmod@@Base+0x13b4>
   17304:	ldr	lr, [sp, #80]	; 0x50
   17308:	b	1710c <lchmod@@Base+0xe5c>
   1730c:	cmp	r7, #0
   17310:	bne	1758c <lchmod@@Base+0x12dc>
   17314:	ldrb	r0, [ip, #1]
   17318:	cmp	r0, #0
   1731c:	bne	1758c <lchmod@@Base+0x12dc>
   17320:	mov	r1, #1
   17324:	ldr	r0, [fp, #-64]	; 0xffffffc0
   17328:	cmp	r0, #2
   1732c:	bne	1733c <lchmod@@Base+0x108c>
   17330:	ldr	r0, [fp, #-72]	; 0xffffffb8
   17334:	tst	r0, #1
   17338:	bne	17ab0 <lchmod@@Base+0x1800>
   1733c:	mov	sl, r1
   17340:	b	1710c <lchmod@@Base+0xe5c>
   17344:	ldr	r1, [sp, #44]	; 0x2c
   17348:	mov	r9, #0
   1734c:	mov	r0, #92	; 0x5c
   17350:	cmp	r1, #0
   17354:	beq	17360 <lchmod@@Base+0x10b0>
   17358:	mov	sl, #0
   1735c:	b	17878 <lchmod@@Base+0x15c8>
   17360:	ldr	r1, [sp, #84]	; 0x54
   17364:	mov	sl, #0
   17368:	mov	r9, #0
   1736c:	tst	r1, #1
   17370:	bne	173ac <lchmod@@Base+0x10fc>
   17374:	ldr	r0, [fp, #-88]	; 0xffffffa8
   17378:	cmp	r0, #0
   1737c:	mov	r0, r5
   17380:	beq	173a4 <lchmod@@Base+0x10f4>
   17384:	ldr	r1, [fp, #16]
   17388:	ubfx	r0, r5, #5, #3
   1738c:	mov	r2, #1
   17390:	ldr	r0, [r1, r0, lsl #2]
   17394:	and	r1, r5, #31
   17398:	tst	r0, r2, lsl r1
   1739c:	mov	r0, r5
   173a0:	bne	173ac <lchmod@@Base+0x10fc>
   173a4:	cmp	r6, #0
   173a8:	beq	17878 <lchmod@@Base+0x15c8>
   173ac:	ldr	r1, [fp, #-72]	; 0xffffffb8
   173b0:	ldr	r6, [fp, #-52]	; 0xffffffcc
   173b4:	tst	r1, #1
   173b8:	bne	17a8c <lchmod@@Base+0x17dc>
   173bc:	ldr	r1, [fp, #-64]	; 0xffffffc0
   173c0:	ldr	r5, [fp, #-48]	; 0xffffffd0
   173c4:	cmp	r1, #2
   173c8:	ldr	r1, [fp, #-80]	; 0xffffffb0
   173cc:	movwne	r1, #1
   173d0:	orr	r1, r1, r5
   173d4:	tst	r1, #1
   173d8:	bne	1741c <lchmod@@Base+0x116c>
   173dc:	cmp	r8, r6
   173e0:	mov	r5, #1
   173e4:	ldrcc	r2, [fp, #-56]	; 0xffffffc8
   173e8:	movcc	r1, #39	; 0x27
   173ec:	strbcc	r1, [r2, r8]
   173f0:	add	r1, r8, #1
   173f4:	cmp	r1, r6
   173f8:	ldrcc	r3, [fp, #-56]	; 0xffffffc8
   173fc:	movcc	r2, #36	; 0x24
   17400:	strbcc	r2, [r3, r1]
   17404:	add	r1, r8, #2
   17408:	add	r8, r8, #3
   1740c:	cmp	r1, r6
   17410:	ldrcc	r3, [fp, #-56]	; 0xffffffc8
   17414:	movcc	r2, #39	; 0x27
   17418:	strbcc	r2, [r3, r1]
   1741c:	cmp	r8, r6
   17420:	ldrcc	r2, [fp, #-56]	; 0xffffffc8
   17424:	movcc	r1, #92	; 0x5c
   17428:	strbcc	r1, [r2, r8]
   1742c:	add	r8, r8, #1
   17430:	cmp	r8, r6
   17434:	and	r4, r4, sl
   17438:	ldrcc	r1, [fp, #-56]	; 0xffffffc8
   1743c:	strbcc	r0, [r1, r8]
   17440:	add	r8, r8, #1
   17444:	add	r7, r7, #1
   17448:	b	16e2c <lchmod@@Base+0xb7c>
   1744c:	ldr	r0, [sp, #28]
   17450:	mov	sl, #0
   17454:	mov	r9, #0
   17458:	mov	r5, #0
   1745c:	cmp	r0, #0
   17460:	beq	17374 <lchmod@@Base+0x10c4>
   17464:	ldr	r6, [fp, #-52]	; 0xffffffcc
   17468:	ldr	r5, [fp, #-48]	; 0xffffffd0
   1746c:	b	17444 <lchmod@@Base+0x1194>
   17470:	mov	r0, #0
   17474:	cmn	lr, #1
   17478:	str	r6, [sp, #76]	; 0x4c
   1747c:	str	r4, [sp, #20]
   17480:	str	r0, [fp, #-36]	; 0xffffffdc
   17484:	str	r0, [fp, #-40]	; 0xffffffd8
   17488:	bne	1749c <lchmod@@Base+0x11ec>
   1748c:	mov	r0, ip
   17490:	bl	11964 <strlen@plt>
   17494:	ldr	ip, [fp, #-84]	; 0xffffffac
   17498:	mov	lr, r0
   1749c:	add	r0, ip, r7
   174a0:	mov	sl, #1
   174a4:	mov	r6, #0
   174a8:	sub	r4, fp, #40	; 0x28
   174ac:	str	lr, [sp, #80]	; 0x50
   174b0:	str	r0, [sp, #36]	; 0x24
   174b4:	str	r6, [sp, #40]	; 0x28
   174b8:	add	r6, r6, r7
   174bc:	sub	r0, fp, #44	; 0x2c
   174c0:	mov	r3, r4
   174c4:	add	r1, ip, r6
   174c8:	sub	r2, lr, r6
   174cc:	bl	19784 <lchmod@@Base+0x34d4>
   174d0:	cmp	r0, #0
   174d4:	beq	179e0 <lchmod@@Base+0x1730>
   174d8:	cmn	r0, #1
   174dc:	beq	179a0 <lchmod@@Base+0x16f0>
   174e0:	ldr	lr, [sp, #80]	; 0x50
   174e4:	cmn	r0, #2
   174e8:	beq	179a8 <lchmod@@Base+0x16f8>
   174ec:	ldr	r2, [sp, #56]	; 0x38
   174f0:	cmp	r0, #2
   174f4:	mov	r1, #0
   174f8:	movwcc	r1, #1
   174fc:	eor	r2, r2, #1
   17500:	orrs	r1, r2, r1
   17504:	bne	17550 <lchmod@@Base+0x12a0>
   17508:	ldr	r1, [sp, #40]	; 0x28
   1750c:	ldr	r2, [sp, #36]	; 0x24
   17510:	add	ip, r2, r1
   17514:	mov	r2, #1
   17518:	ldrb	r3, [ip, r2]
   1751c:	sub	r6, r3, #94	; 0x5e
   17520:	cmp	r6, #30
   17524:	bhi	17538 <lchmod@@Base+0x1288>
   17528:	mov	r4, #1
   1752c:	mov	r1, #1073741829	; 0x40000005
   17530:	tst	r1, r4, lsl r6
   17534:	bne	17aac <lchmod@@Base+0x17fc>
   17538:	sub	r3, r3, #91	; 0x5b
   1753c:	cmp	r3, #2
   17540:	bcc	17aac <lchmod@@Base+0x17fc>
   17544:	add	r2, r2, #1
   17548:	cmp	r2, r0
   1754c:	bcc	17518 <lchmod@@Base+0x1268>
   17550:	ldr	r6, [sp, #40]	; 0x28
   17554:	add	r6, r0, r6
   17558:	ldr	r0, [fp, #-44]	; 0xffffffd4
   1755c:	bl	1185c <iswprint@plt>
   17560:	cmp	r0, #0
   17564:	sub	r4, fp, #40	; 0x28
   17568:	movwne	r0, #1
   1756c:	and	sl, sl, r0
   17570:	mov	r0, r4
   17574:	bl	117e4 <mbsinit@plt>
   17578:	ldr	lr, [sp, #80]	; 0x50
   1757c:	ldr	ip, [fp, #-84]	; 0xffffffac
   17580:	cmp	r0, #0
   17584:	beq	174b4 <lchmod@@Base+0x1204>
   17588:	b	179e8 <lchmod@@Base+0x1738>
   1758c:	mvn	lr, #0
   17590:	mov	r9, #0
   17594:	b	1710c <lchmod@@Base+0xe5c>
   17598:	ldr	r0, [sp, #24]
   1759c:	cmp	r0, #0
   175a0:	beq	17658 <lchmod@@Base+0x13a8>
   175a4:	add	r0, r7, #2
   175a8:	cmp	r0, lr
   175ac:	bcs	17658 <lchmod@@Base+0x13a8>
   175b0:	add	r1, ip, r7
   175b4:	ldrb	r1, [r1, #1]
   175b8:	cmp	r1, #63	; 0x3f
   175bc:	bne	17658 <lchmod@@Base+0x13a8>
   175c0:	ldrb	r5, [ip, r0]
   175c4:	sub	r1, r5, #33	; 0x21
   175c8:	cmp	r1, #29
   175cc:	bhi	17658 <lchmod@@Base+0x13a8>
   175d0:	movw	r3, #20929	; 0x51c1
   175d4:	mov	r2, #1
   175d8:	movt	r3, #14336	; 0x3800
   175dc:	tst	r3, r2, lsl r1
   175e0:	beq	17658 <lchmod@@Base+0x13a8>
   175e4:	ldr	r1, [fp, #-72]	; 0xffffffb8
   175e8:	tst	r1, #1
   175ec:	bne	17bc0 <lchmod@@Base+0x1910>
   175f0:	ldr	r1, [fp, #-52]	; 0xffffffcc
   175f4:	mov	r7, r0
   175f8:	cmp	r8, r1
   175fc:	ldrcc	r2, [fp, #-56]	; 0xffffffc8
   17600:	movcc	r1, #63	; 0x3f
   17604:	strbcc	r1, [r2, r8]
   17608:	ldr	r2, [fp, #-52]	; 0xffffffcc
   1760c:	add	r1, r8, #1
   17610:	cmp	r1, r2
   17614:	ldrcc	r3, [fp, #-56]	; 0xffffffc8
   17618:	movcc	r2, #34	; 0x22
   1761c:	strbcc	r2, [r3, r1]
   17620:	ldr	r2, [fp, #-52]	; 0xffffffcc
   17624:	add	r1, r8, #2
   17628:	cmp	r1, r2
   1762c:	ldrcc	r3, [fp, #-56]	; 0xffffffc8
   17630:	movcc	r2, #34	; 0x22
   17634:	strbcc	r2, [r3, r1]
   17638:	ldr	r2, [fp, #-52]	; 0xffffffcc
   1763c:	add	r1, r8, #3
   17640:	add	r8, r8, #4
   17644:	cmp	r1, r2
   17648:	ldrcc	r3, [fp, #-56]	; 0xffffffc8
   1764c:	movcc	r2, #63	; 0x3f
   17650:	strbcc	r2, [r3, r1]
   17654:	b	1765c <lchmod@@Base+0x13ac>
   17658:	mov	r5, #63	; 0x3f
   1765c:	mov	sl, #0
   17660:	b	1710c <lchmod@@Base+0xe5c>
   17664:	str	r0, [sp, #40]	; 0x28
   17668:	add	r0, r2, r7
   1766c:	str	r6, [sp, #76]	; 0x4c
   17670:	add	r1, r7, #1
   17674:	ldr	lr, [sp, #80]	; 0x50
   17678:	ldr	r7, [fp, #-64]	; 0xffffffc0
   1767c:	ldr	r6, [fp, #-52]	; 0xffffffcc
   17680:	mov	r3, #0
   17684:	str	r0, [sp, #36]	; 0x24
   17688:	ldr	r0, [fp, #-48]	; 0xffffffd0
   1768c:	b	17720 <lchmod@@Base+0x1470>
   17690:	str	r0, [sp, #76]	; 0x4c
   17694:	ldr	r0, [fp, #-48]	; 0xffffffd0
   17698:	cmp	r9, #0
   1769c:	movwne	r9, #1
   176a0:	mvn	r7, r0
   176a4:	orr	r7, r7, r9
   176a8:	tst	r7, #1
   176ac:	bne	176fc <lchmod@@Base+0x144c>
   176b0:	ldr	r6, [fp, #-52]	; 0xffffffcc
   176b4:	cmp	r8, r6
   176b8:	bcs	176d0 <lchmod@@Base+0x1420>
   176bc:	ldr	r7, [fp, #-56]	; 0xffffffc8
   176c0:	mov	r2, r4
   176c4:	mov	r4, #39	; 0x27
   176c8:	strb	r4, [r7, r8]
   176cc:	mov	r4, r2
   176d0:	add	r7, r8, #1
   176d4:	cmp	r7, r6
   176d8:	bcs	176f0 <lchmod@@Base+0x1440>
   176dc:	ldr	r0, [fp, #-56]	; 0xffffffc8
   176e0:	mov	r2, r4
   176e4:	mov	r4, #39	; 0x27
   176e8:	strb	r4, [r0, r7]
   176ec:	mov	r4, r2
   176f0:	add	r8, r8, #2
   176f4:	mov	r0, #0
   176f8:	b	17704 <lchmod@@Base+0x1454>
   176fc:	ldr	r6, [fp, #-52]	; 0xffffffcc
   17700:	ldr	r0, [fp, #-48]	; 0xffffffd0
   17704:	cmp	r8, r6
   17708:	ldr	r7, [fp, #-64]	; 0xffffffc0
   1770c:	ldrcc	r2, [fp, #-56]	; 0xffffffc8
   17710:	strbcc	r5, [r2, r8]
   17714:	add	r8, r8, #1
   17718:	ldrb	r5, [ip, r1]
   1771c:	add	r1, r1, #1
   17720:	ldr	r2, [sp, #40]	; 0x28
   17724:	tst	r2, #1
   17728:	beq	17764 <lchmod@@Base+0x14b4>
   1772c:	ldr	r2, [sp, #76]	; 0x4c
   17730:	str	r0, [fp, #-48]	; 0xffffffd0
   17734:	tst	r2, #1
   17738:	beq	1775c <lchmod@@Base+0x14ac>
   1773c:	cmp	r8, r6
   17740:	bcs	17758 <lchmod@@Base+0x14a8>
   17744:	ldr	r6, [fp, #-56]	; 0xffffffc8
   17748:	mov	r2, r4
   1774c:	mov	r4, #92	; 0x5c
   17750:	strb	r4, [r6, r8]
   17754:	mov	r4, r2
   17758:	add	r8, r8, #1
   1775c:	mov	r0, #0
   17760:	b	17858 <lchmod@@Base+0x15a8>
   17764:	ldr	r2, [fp, #-72]	; 0xffffffb8
   17768:	tst	r2, #1
   1776c:	bne	17ab8 <lchmod@@Base+0x1808>
   17770:	ldr	r3, [fp, #-80]	; 0xffffffb0
   17774:	cmp	r7, #2
   17778:	movwne	r3, #1
   1777c:	orr	r3, r3, r0
   17780:	tst	r3, #1
   17784:	bne	177e0 <lchmod@@Base+0x1530>
   17788:	cmp	r8, r6
   1778c:	ldrcc	r2, [fp, #-56]	; 0xffffffc8
   17790:	movcc	r3, #39	; 0x27
   17794:	strbcc	r3, [r2, r8]
   17798:	add	r3, r8, #1
   1779c:	cmp	r3, r6
   177a0:	bcs	177b8 <lchmod@@Base+0x1508>
   177a4:	ldr	r2, [fp, #-56]	; 0xffffffc8
   177a8:	mov	r7, r4
   177ac:	mov	r4, #36	; 0x24
   177b0:	strb	r4, [r2, r3]
   177b4:	mov	r4, r7
   177b8:	add	r3, r8, #2
   177bc:	cmp	r3, r6
   177c0:	bcs	177d8 <lchmod@@Base+0x1528>
   177c4:	ldr	r2, [fp, #-56]	; 0xffffffc8
   177c8:	mov	r7, r4
   177cc:	mov	r4, #39	; 0x27
   177d0:	strb	r4, [r2, r3]
   177d4:	mov	r4, r7
   177d8:	add	r8, r8, #3
   177dc:	mov	r0, #1
   177e0:	cmp	r8, r6
   177e4:	ldrcc	r2, [fp, #-56]	; 0xffffffc8
   177e8:	movcc	r3, #92	; 0x5c
   177ec:	strbcc	r3, [r2, r8]
   177f0:	add	r3, r8, #1
   177f4:	cmp	r3, r6
   177f8:	bcs	17818 <lchmod@@Base+0x1568>
   177fc:	mov	r2, r4
   17800:	and	r7, r5, #192	; 0xc0
   17804:	mov	r4, #48	; 0x30
   17808:	orr	r7, r4, r7, lsr #6
   1780c:	mov	r4, r2
   17810:	ldr	r2, [fp, #-56]	; 0xffffffc8
   17814:	strb	r7, [r2, r3]
   17818:	add	r3, r8, #2
   1781c:	cmp	r3, r6
   17820:	bcs	17840 <lchmod@@Base+0x1590>
   17824:	ldr	r2, [fp, #-56]	; 0xffffffc8
   17828:	mov	r6, r4
   1782c:	lsr	r7, r5, #3
   17830:	mov	r4, #6
   17834:	bfi	r7, r4, #3, #29
   17838:	mov	r4, r6
   1783c:	strb	r7, [r2, r3]
   17840:	str	r0, [fp, #-48]	; 0xffffffd0
   17844:	ldr	r0, [sp, #76]	; 0x4c
   17848:	mov	r3, #6
   1784c:	add	r8, r8, #3
   17850:	bfi	r5, r3, #3, #29
   17854:	mov	r3, #1
   17858:	ldr	r2, [sp, #36]	; 0x24
   1785c:	and	r9, r3, #1
   17860:	cmp	r2, r1
   17864:	bhi	17690 <lchmod@@Base+0x13e0>
   17868:	cmp	r9, #0
   1786c:	sub	r7, r1, #1
   17870:	mov	r0, r5
   17874:	movwne	r9, #1
   17878:	cmp	r9, #0
   1787c:	bne	178c0 <lchmod@@Base+0x1610>
   17880:	ldr	r5, [fp, #-48]	; 0xffffffd0
   17884:	ldr	r6, [fp, #-52]	; 0xffffffcc
   17888:	tst	r5, #1
   1788c:	beq	17430 <lchmod@@Base+0x1180>
   17890:	cmp	r8, r6
   17894:	mov	r5, #0
   17898:	ldrcc	r2, [fp, #-56]	; 0xffffffc8
   1789c:	movcc	r1, #39	; 0x27
   178a0:	strbcc	r1, [r2, r8]
   178a4:	add	r1, r8, #1
   178a8:	add	r8, r8, #2
   178ac:	cmp	r1, r6
   178b0:	ldrcc	r3, [fp, #-56]	; 0xffffffc8
   178b4:	movcc	r2, #39	; 0x27
   178b8:	strbcc	r2, [r3, r1]
   178bc:	b	17430 <lchmod@@Base+0x1180>
   178c0:	ldr	r6, [fp, #-52]	; 0xffffffcc
   178c4:	ldr	r5, [fp, #-48]	; 0xffffffd0
   178c8:	b	17430 <lchmod@@Base+0x1180>
   178cc:	cmp	r8, r1
   178d0:	ldrcc	r2, [fp, #-56]	; 0xffffffc8
   178d4:	movcc	r0, #39	; 0x27
   178d8:	strbcc	r0, [r2, r8]
   178dc:	add	r0, r8, #1
   178e0:	cmp	r0, r1
   178e4:	ldrcc	r3, [fp, #-56]	; 0xffffffc8
   178e8:	movcc	r2, #36	; 0x24
   178ec:	strbcc	r2, [r3, r0]
   178f0:	add	r0, r8, #2
   178f4:	cmp	r0, r1
   178f8:	ldrcc	r3, [fp, #-56]	; 0xffffffc8
   178fc:	movcc	r2, #39	; 0x27
   17900:	strbcc	r2, [r3, r0]
   17904:	add	r0, r8, #3
   17908:	mov	r3, #1
   1790c:	cmp	r0, r1
   17910:	add	r8, r0, #1
   17914:	str	r3, [fp, #-48]	; 0xffffffd0
   17918:	ldrcc	r2, [fp, #-56]	; 0xffffffc8
   1791c:	movcc	r1, #92	; 0x5c
   17920:	strbcc	r1, [r2, r0]
   17924:	ldr	r1, [fp, #-64]	; 0xffffffc0
   17928:	cmp	r1, #2
   1792c:	beq	17990 <lchmod@@Base+0x16e0>
   17930:	add	r1, r7, #1
   17934:	mov	sl, #0
   17938:	mov	r9, #1
   1793c:	mov	r5, #48	; 0x30
   17940:	cmp	r1, lr
   17944:	bcs	1710c <lchmod@@Base+0xe5c>
   17948:	ldrb	r1, [ip, r1]
   1794c:	sub	r1, r1, #48	; 0x30
   17950:	uxtb	r1, r1
   17954:	cmp	r1, #9
   17958:	bhi	1710c <lchmod@@Base+0xe5c>
   1795c:	ldr	r1, [fp, #-52]	; 0xffffffcc
   17960:	cmp	r8, r1
   17964:	ldrcc	r2, [fp, #-56]	; 0xffffffc8
   17968:	movcc	r1, #48	; 0x30
   1796c:	strbcc	r1, [r2, r8]
   17970:	ldr	r2, [fp, #-52]	; 0xffffffcc
   17974:	add	r1, r0, #2
   17978:	add	r8, r0, #3
   1797c:	cmp	r1, r2
   17980:	ldrcc	r3, [fp, #-56]	; 0xffffffc8
   17984:	movcc	r2, #48	; 0x30
   17988:	strbcc	r2, [r3, r1]
   1798c:	b	1710c <lchmod@@Base+0xe5c>
   17990:	mov	r0, #48	; 0x30
   17994:	mov	r9, #1
   17998:	mov	sl, #0
   1799c:	b	173a4 <lchmod@@Base+0x10f4>
   179a0:	mov	sl, #0
   179a4:	b	179e0 <lchmod@@Base+0x1730>
   179a8:	mov	sl, #0
   179ac:	cmp	lr, r6
   179b0:	bls	179e0 <lchmod@@Base+0x1730>
   179b4:	ldr	ip, [fp, #-84]	; 0xffffffac
   179b8:	ldr	r6, [sp, #40]	; 0x28
   179bc:	ldr	r0, [sp, #36]	; 0x24
   179c0:	ldrb	r0, [r0, r6]
   179c4:	cmp	r0, #0
   179c8:	beq	179e8 <lchmod@@Base+0x1738>
   179cc:	add	r6, r6, #1
   179d0:	add	r0, r7, r6
   179d4:	cmp	r0, lr
   179d8:	bcc	179bc <lchmod@@Base+0x170c>
   179dc:	b	179e8 <lchmod@@Base+0x1738>
   179e0:	ldr	ip, [fp, #-84]	; 0xffffffac
   179e4:	ldr	r6, [sp, #40]	; 0x28
   179e8:	mov	r1, r6
   179ec:	ldr	r4, [sp, #20]
   179f0:	ldr	r6, [sp, #76]	; 0x4c
   179f4:	b	172e8 <lchmod@@Base+0x1038>
   179f8:	mov	lr, r7
   179fc:	b	17a04 <lchmod@@Base+0x1754>
   17a00:	mvn	lr, #0
   17a04:	ldr	r9, [fp, #-64]	; 0xffffffc0
   17a08:	ldr	r1, [fp, #-72]	; 0xffffffb8
   17a0c:	eor	r0, r9, #2
   17a10:	orr	r0, r0, r8
   17a14:	clz	r0, r0
   17a18:	lsr	r0, r0, #5
   17a1c:	tst	r1, r0
   17a20:	bne	17b1c <lchmod@@Base+0x186c>
   17a24:	mov	r0, r1
   17a28:	ldr	r1, [fp, #-80]	; 0xffffffb0
   17a2c:	cmp	r9, #2
   17a30:	movwne	r1, #1
   17a34:	orr	r0, r0, r1
   17a38:	tst	r0, #1
   17a3c:	bne	17b5c <lchmod@@Base+0x18ac>
   17a40:	ldr	r0, [sp, #52]	; 0x34
   17a44:	ldr	r1, [sp, #68]	; 0x44
   17a48:	str	lr, [sp, #80]	; 0x50
   17a4c:	eor	r0, r0, #1
   17a50:	tst	r0, #1
   17a54:	bne	17b5c <lchmod@@Base+0x18ac>
   17a58:	tst	r4, #1
   17a5c:	bne	17b24 <lchmod@@Base+0x1874>
   17a60:	mov	r7, #0
   17a64:	cmp	r1, #0
   17a68:	beq	17b54 <lchmod@@Base+0x18a4>
   17a6c:	ldr	r0, [sp, #84]	; 0x54
   17a70:	mov	r3, #0
   17a74:	cmp	r6, #0
   17a78:	mov	r2, #0
   17a7c:	mov	r4, r1
   17a80:	str	r3, [fp, #-72]	; 0xffffffb8
   17a84:	beq	16bc0 <lchmod@@Base+0x910>
   17a88:	b	17b5c <lchmod@@Base+0x18ac>
   17a8c:	ldr	r7, [fp, #-64]	; 0xffffffc0
   17a90:	b	17ab8 <lchmod@@Base+0x1808>
   17a94:	ldr	ip, [fp, #-84]	; 0xffffffac
   17a98:	mov	r2, #1
   17a9c:	mov	lr, r4
   17aa0:	ldr	r7, [fp, #-64]	; 0xffffffc0
   17aa4:	ldr	r6, [fp, #-52]	; 0xffffffcc
   17aa8:	b	17abc <lchmod@@Base+0x180c>
   17aac:	ldr	ip, [fp, #-84]	; 0xffffffac
   17ab0:	mov	r7, #2
   17ab4:	ldr	r6, [fp, #-52]	; 0xffffffcc
   17ab8:	ldr	r2, [sp, #84]	; 0x54
   17abc:	mov	r0, #0
   17ac0:	ldr	r1, [fp, #12]
   17ac4:	tst	r2, #1
   17ac8:	mov	r2, r7
   17acc:	mov	r3, lr
   17ad0:	str	r0, [sp, #8]
   17ad4:	ldr	r0, [sp, #64]	; 0x40
   17ad8:	movwne	r2, #4
   17adc:	cmp	r7, #2
   17ae0:	movne	r2, r7
   17ae4:	str	r2, [sp]
   17ae8:	mov	r2, ip
   17aec:	bic	r1, r1, #2
   17af0:	str	r0, [sp, #12]
   17af4:	ldr	r0, [sp, #72]	; 0x48
   17af8:	str	r1, [sp, #4]
   17afc:	mov	r1, r6
   17b00:	str	r0, [sp, #16]
   17b04:	ldr	r0, [fp, #-56]	; 0xffffffc8
   17b08:	bl	16b48 <lchmod@@Base+0x898>
   17b0c:	mov	r8, r0
   17b10:	mov	r0, r8
   17b14:	sub	sp, fp, #28
   17b18:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17b1c:	mov	r7, #2
   17b20:	b	17ab8 <lchmod@@Base+0x1808>
   17b24:	mov	r0, #5
   17b28:	ldr	r2, [fp, #-84]	; 0xffffffac
   17b2c:	ldr	r3, [sp, #80]	; 0x50
   17b30:	str	r0, [sp]
   17b34:	ldr	r0, [fp, #12]
   17b38:	str	r0, [sp, #4]
   17b3c:	ldr	r0, [fp, #16]
   17b40:	str	r0, [sp, #8]
   17b44:	ldr	r0, [sp, #64]	; 0x40
   17b48:	str	r0, [sp, #12]
   17b4c:	ldr	r0, [sp, #72]	; 0x48
   17b50:	b	17b00 <lchmod@@Base+0x1850>
   17b54:	mov	r0, #0
   17b58:	str	r0, [fp, #-72]	; 0xffffffb8
   17b5c:	ldr	r1, [sp, #92]	; 0x5c
   17b60:	cmp	r1, #0
   17b64:	beq	17ba4 <lchmod@@Base+0x18f4>
   17b68:	ldr	r0, [fp, #-72]	; 0xffffffb8
   17b6c:	ldr	r2, [fp, #-56]	; 0xffffffc8
   17b70:	tst	r0, #1
   17b74:	bne	17ba8 <lchmod@@Base+0x18f8>
   17b78:	ldrb	r0, [r1]
   17b7c:	cmp	r0, #0
   17b80:	beq	17ba8 <lchmod@@Base+0x18f8>
   17b84:	add	r1, r1, #1
   17b88:	cmp	r8, r6
   17b8c:	strbcc	r0, [r2, r8]
   17b90:	add	r8, r8, #1
   17b94:	ldrb	r0, [r1], #1
   17b98:	cmp	r0, #0
   17b9c:	bne	17b88 <lchmod@@Base+0x18d8>
   17ba0:	b	17ba8 <lchmod@@Base+0x18f8>
   17ba4:	ldr	r2, [fp, #-56]	; 0xffffffc8
   17ba8:	cmp	r8, r6
   17bac:	movcc	r0, #0
   17bb0:	strbcc	r0, [r2, r8]
   17bb4:	b	17b10 <lchmod@@Base+0x1860>
   17bb8:	mov	r2, #1
   17bbc:	b	17aa0 <lchmod@@Base+0x17f0>
   17bc0:	mov	r7, #5
   17bc4:	b	17ab4 <lchmod@@Base+0x1804>
   17bc8:	bl	11af0 <abort@plt>
   17bcc:	mov	r3, r2
   17bd0:	mov	r2, #0
   17bd4:	b	17bd8 <lchmod@@Base+0x1928>
   17bd8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17bdc:	add	fp, sp, #28
   17be0:	sub	sp, sp, #36	; 0x24
   17be4:	movw	r8, #45560	; 0xb1f8
   17be8:	cmp	r3, #0
   17bec:	mov	r4, r2
   17bf0:	str	r2, [sp, #24]
   17bf4:	mov	r5, r1
   17bf8:	mov	r6, r0
   17bfc:	str	r0, [sp, #20]
   17c00:	movt	r8, #2
   17c04:	movne	r8, r3
   17c08:	bl	11994 <__errno_location@plt>
   17c0c:	str	r0, [sp, #28]
   17c10:	cmp	r4, #0
   17c14:	add	sl, r8, #8
   17c18:	ldm	r8, {r3, r9}
   17c1c:	ldr	r7, [r0]
   17c20:	ldr	r1, [r8, #40]	; 0x28
   17c24:	ldr	r2, [r8, #44]	; 0x2c
   17c28:	mov	r0, #0
   17c2c:	orreq	r9, r9, #1
   17c30:	str	r7, [sp, #32]
   17c34:	mov	r7, r5
   17c38:	stm	sp, {r3, r9, sl}
   17c3c:	str	r1, [sp, #12]
   17c40:	str	r2, [sp, #16]
   17c44:	mov	r1, #0
   17c48:	mov	r2, r6
   17c4c:	mov	r3, r5
   17c50:	bl	16b48 <lchmod@@Base+0x898>
   17c54:	add	r4, r0, #1
   17c58:	mov	r5, r0
   17c5c:	mov	r0, r4
   17c60:	bl	18bb4 <lchmod@@Base+0x2904>
   17c64:	mov	r6, r0
   17c68:	ldr	r0, [r8]
   17c6c:	ldr	r2, [r8, #44]	; 0x2c
   17c70:	ldr	r1, [r8, #40]	; 0x28
   17c74:	mov	r3, r7
   17c78:	stm	sp, {r0, r9, sl}
   17c7c:	str	r2, [sp, #16]
   17c80:	str	r1, [sp, #12]
   17c84:	mov	r0, r6
   17c88:	mov	r1, r4
   17c8c:	ldr	r2, [sp, #20]
   17c90:	bl	16b48 <lchmod@@Base+0x898>
   17c94:	ldr	r0, [sp, #24]
   17c98:	ldr	r1, [sp, #32]
   17c9c:	ldr	r2, [sp, #28]
   17ca0:	cmp	r0, #0
   17ca4:	str	r1, [r2]
   17ca8:	strne	r5, [r0]
   17cac:	mov	r0, r6
   17cb0:	sub	sp, fp, #28
   17cb4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17cb8:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   17cbc:	add	fp, sp, #24
   17cc0:	movw	r5, #45452	; 0xb18c
   17cc4:	movw	r8, #45448	; 0xb188
   17cc8:	movt	r5, #2
   17ccc:	movt	r8, #2
   17cd0:	ldr	r0, [r5]
   17cd4:	ldr	r4, [r8]
   17cd8:	cmp	r0, #2
   17cdc:	blt	17d08 <lchmod@@Base+0x1a58>
   17ce0:	add	r7, r4, #12
   17ce4:	mov	r6, #0
   17ce8:	ldr	r0, [r7, r6, lsl #3]
   17cec:	bl	1319c <__assert_fail@plt+0x164c>
   17cf0:	ldr	r1, [r5]
   17cf4:	add	r2, r6, #2
   17cf8:	add	r0, r6, #1
   17cfc:	mov	r6, r0
   17d00:	cmp	r2, r1
   17d04:	blt	17ce8 <lchmod@@Base+0x1a38>
   17d08:	ldr	r0, [r4, #4]
   17d0c:	movw	r7, #45608	; 0xb228
   17d10:	movt	r7, #2
   17d14:	cmp	r0, r7
   17d18:	beq	17d30 <lchmod@@Base+0x1a80>
   17d1c:	bl	1319c <__assert_fail@plt+0x164c>
   17d20:	movw	r0, #45456	; 0xb190
   17d24:	mov	r6, #256	; 0x100
   17d28:	movt	r0, #2
   17d2c:	strd	r6, [r0]
   17d30:	movw	r6, #45456	; 0xb190
   17d34:	movt	r6, #2
   17d38:	cmp	r4, r6
   17d3c:	beq	17d4c <lchmod@@Base+0x1a9c>
   17d40:	mov	r0, r4
   17d44:	bl	1319c <__assert_fail@plt+0x164c>
   17d48:	str	r6, [r8]
   17d4c:	mov	r0, #1
   17d50:	str	r0, [r5]
   17d54:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   17d58:	movw	r3, #45560	; 0xb1f8
   17d5c:	mvn	r2, #0
   17d60:	movt	r3, #2
   17d64:	b	17d68 <lchmod@@Base+0x1ab8>
   17d68:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17d6c:	add	fp, sp, #28
   17d70:	sub	sp, sp, #44	; 0x2c
   17d74:	mov	r7, r3
   17d78:	str	r2, [sp, #36]	; 0x24
   17d7c:	str	r1, [sp, #32]
   17d80:	mov	r5, r0
   17d84:	bl	11994 <__errno_location@plt>
   17d88:	cmp	r5, #0
   17d8c:	blt	17ef8 <lchmod@@Base+0x1c48>
   17d90:	cmn	r5, #-2147483647	; 0x80000001
   17d94:	beq	17ef8 <lchmod@@Base+0x1c48>
   17d98:	movw	r8, #45452	; 0xb18c
   17d9c:	movw	r4, #45448	; 0xb188
   17da0:	str	r0, [sp, #28]
   17da4:	ldr	r0, [r0]
   17da8:	movt	r8, #2
   17dac:	movt	r4, #2
   17db0:	ldr	r1, [r8]
   17db4:	ldr	r6, [r4]
   17db8:	str	r0, [sp, #24]
   17dbc:	cmp	r1, r5
   17dc0:	ble	17dcc <lchmod@@Base+0x1b1c>
   17dc4:	mov	sl, r6
   17dc8:	b	17e34 <lchmod@@Base+0x1b84>
   17dcc:	movw	r9, #45456	; 0xb190
   17dd0:	mov	r0, #8
   17dd4:	add	r2, r5, #1
   17dd8:	str	r1, [fp, #-32]	; 0xffffffe0
   17ddc:	mvn	r3, #-2147483648	; 0x80000000
   17de0:	movt	r9, #2
   17de4:	str	r0, [sp]
   17de8:	sub	r2, r2, r1
   17dec:	sub	r1, fp, #32
   17df0:	subs	r0, r6, r9
   17df4:	movne	r0, r6
   17df8:	bl	18ce4 <lchmod@@Base+0x2a34>
   17dfc:	cmp	r6, r9
   17e00:	mov	sl, r0
   17e04:	str	r0, [r4]
   17e08:	ldrdeq	r0, [r9]
   17e0c:	stmeq	sl, {r0, r1}
   17e10:	ldr	r1, [r8]
   17e14:	ldr	r2, [fp, #-32]	; 0xffffffe0
   17e18:	add	r0, sl, r1, lsl #3
   17e1c:	sub	r1, r2, r1
   17e20:	lsl	r2, r1, #3
   17e24:	mov	r1, #0
   17e28:	bl	119b8 <memset@plt>
   17e2c:	ldr	r0, [fp, #-32]	; 0xffffffe0
   17e30:	str	r0, [r8]
   17e34:	mov	r9, sl
   17e38:	ldr	r6, [r9, r5, lsl #3]!
   17e3c:	ldr	r4, [r9, #4]!
   17e40:	ldm	r7, {r0, r1}
   17e44:	ldr	r2, [r7, #40]	; 0x28
   17e48:	ldr	r3, [r7, #44]	; 0x2c
   17e4c:	orr	r8, r1, #1
   17e50:	add	r1, r7, #8
   17e54:	stm	sp, {r0, r8}
   17e58:	add	r0, sp, #8
   17e5c:	str	r1, [sp, #20]
   17e60:	stm	r0, {r1, r2, r3}
   17e64:	mov	r0, r4
   17e68:	mov	r1, r6
   17e6c:	ldr	r2, [sp, #32]
   17e70:	ldr	r3, [sp, #36]	; 0x24
   17e74:	bl	16b48 <lchmod@@Base+0x898>
   17e78:	cmp	r6, r0
   17e7c:	bhi	17ee0 <lchmod@@Base+0x1c30>
   17e80:	add	r6, r0, #1
   17e84:	movw	r0, #45608	; 0xb228
   17e88:	movt	r0, #2
   17e8c:	str	r6, [sl, r5, lsl #3]
   17e90:	cmp	r4, r0
   17e94:	beq	17ea0 <lchmod@@Base+0x1bf0>
   17e98:	mov	r0, r4
   17e9c:	bl	1319c <__assert_fail@plt+0x164c>
   17ea0:	mov	r0, r6
   17ea4:	bl	18bb4 <lchmod@@Base+0x2904>
   17ea8:	str	r0, [r9]
   17eac:	mov	r4, r0
   17eb0:	add	r3, sp, #8
   17eb4:	ldr	r0, [r7]
   17eb8:	ldr	r1, [r7, #40]	; 0x28
   17ebc:	ldr	r2, [r7, #44]	; 0x2c
   17ec0:	stm	sp, {r0, r8}
   17ec4:	ldr	r0, [sp, #20]
   17ec8:	stm	r3, {r0, r1, r2}
   17ecc:	mov	r0, r4
   17ed0:	mov	r1, r6
   17ed4:	ldr	r2, [sp, #32]
   17ed8:	ldr	r3, [sp, #36]	; 0x24
   17edc:	bl	16b48 <lchmod@@Base+0x898>
   17ee0:	ldr	r0, [sp, #28]
   17ee4:	ldr	r1, [sp, #24]
   17ee8:	str	r1, [r0]
   17eec:	mov	r0, r4
   17ef0:	sub	sp, fp, #28
   17ef4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17ef8:	bl	11af0 <abort@plt>
   17efc:	movw	r3, #45560	; 0xb1f8
   17f00:	movt	r3, #2
   17f04:	b	17d68 <lchmod@@Base+0x1ab8>
   17f08:	movw	r3, #45560	; 0xb1f8
   17f0c:	mov	r1, r0
   17f10:	mov	r0, #0
   17f14:	mvn	r2, #0
   17f18:	movt	r3, #2
   17f1c:	b	17d68 <lchmod@@Base+0x1ab8>
   17f20:	movw	r3, #45560	; 0xb1f8
   17f24:	mov	r2, r1
   17f28:	mov	r1, r0
   17f2c:	mov	r0, #0
   17f30:	movt	r3, #2
   17f34:	b	17d68 <lchmod@@Base+0x1ab8>
   17f38:	push	{fp, lr}
   17f3c:	mov	fp, sp
   17f40:	sub	sp, sp, #48	; 0x30
   17f44:	vmov.i32	q8, #0	; 0x00000000
   17f48:	mov	ip, #32
   17f4c:	mov	r3, sp
   17f50:	mov	lr, r2
   17f54:	cmp	r1, #10
   17f58:	add	r2, r3, #16
   17f5c:	vst1.64	{d16-d17}, [r3], ip
   17f60:	vst1.64	{d16-d17}, [r3]
   17f64:	vst1.64	{d16-d17}, [r2]
   17f68:	beq	17f88 <lchmod@@Base+0x1cd8>
   17f6c:	str	r1, [sp]
   17f70:	mov	r3, sp
   17f74:	mov	r1, lr
   17f78:	mvn	r2, #0
   17f7c:	bl	17d68 <lchmod@@Base+0x1ab8>
   17f80:	mov	sp, fp
   17f84:	pop	{fp, pc}
   17f88:	bl	11af0 <abort@plt>
   17f8c:	push	{r4, sl, fp, lr}
   17f90:	add	fp, sp, #8
   17f94:	sub	sp, sp, #48	; 0x30
   17f98:	mov	ip, r3
   17f9c:	mov	r3, sp
   17fa0:	vmov.i32	q8, #0	; 0x00000000
   17fa4:	mov	lr, #32
   17fa8:	cmp	r1, #10
   17fac:	add	r4, r3, #16
   17fb0:	vst1.64	{d16-d17}, [r3], lr
   17fb4:	vst1.64	{d16-d17}, [r3]
   17fb8:	vst1.64	{d16-d17}, [r4]
   17fbc:	beq	17fdc <lchmod@@Base+0x1d2c>
   17fc0:	str	r1, [sp]
   17fc4:	mov	r1, r2
   17fc8:	mov	r3, sp
   17fcc:	mov	r2, ip
   17fd0:	bl	17d68 <lchmod@@Base+0x1ab8>
   17fd4:	sub	sp, fp, #8
   17fd8:	pop	{r4, sl, fp, pc}
   17fdc:	bl	11af0 <abort@plt>
   17fe0:	mov	r2, r1
   17fe4:	mov	r1, r0
   17fe8:	mov	r0, #0
   17fec:	b	17f38 <lchmod@@Base+0x1c88>
   17ff0:	mov	r3, r2
   17ff4:	mov	r2, r1
   17ff8:	mov	r1, r0
   17ffc:	mov	r0, #0
   18000:	b	17f8c <lchmod@@Base+0x1cdc>
   18004:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   18008:	add	fp, sp, #24
   1800c:	sub	sp, sp, #48	; 0x30
   18010:	movw	r8, #45560	; 0xb1f8
   18014:	mov	lr, r0
   18018:	mov	r3, sp
   1801c:	mov	ip, r1
   18020:	movt	r8, #2
   18024:	mov	r1, r3
   18028:	ldm	r8!, {r0, r4, r5, r6, r7, r9}
   1802c:	stmia	r1!, {r0, r4, r5, r6, r7, r9}
   18030:	ldm	r8, {r0, r4, r5, r6, r7, r9}
   18034:	stm	r1, {r0, r4, r5, r6, r7, r9}
   18038:	ubfx	r0, r2, #5, #3
   1803c:	and	r2, r2, #31
   18040:	mov	r4, #1
   18044:	add	r0, r3, r0, lsl #2
   18048:	ldr	r1, [r0, #8]
   1804c:	bic	r4, r4, r1, lsr r2
   18050:	eor	r1, r1, r4, lsl r2
   18054:	mov	r2, ip
   18058:	str	r1, [r0, #8]
   1805c:	mov	r0, #0
   18060:	mov	r1, lr
   18064:	bl	17d68 <lchmod@@Base+0x1ab8>
   18068:	sub	sp, fp, #24
   1806c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   18070:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   18074:	add	fp, sp, #24
   18078:	sub	sp, sp, #48	; 0x30
   1807c:	movw	lr, #45560	; 0xb1f8
   18080:	mov	ip, r0
   18084:	mov	r3, sp
   18088:	movt	lr, #2
   1808c:	mov	r2, r3
   18090:	ldm	lr!, {r0, r4, r5, r6, r7, r8}
   18094:	stmia	r2!, {r0, r4, r5, r6, r7, r8}
   18098:	ldm	lr, {r0, r4, r5, r6, r7, r8}
   1809c:	stm	r2, {r0, r4, r5, r6, r7, r8}
   180a0:	ubfx	r0, r1, #5, #3
   180a4:	and	r1, r1, #31
   180a8:	mov	r7, #1
   180ac:	add	r0, r3, r0, lsl #2
   180b0:	ldr	r2, [r0, #8]
   180b4:	bic	r7, r7, r2, lsr r1
   180b8:	eor	r1, r2, r7, lsl r1
   180bc:	mvn	r2, #0
   180c0:	str	r1, [r0, #8]
   180c4:	mov	r0, #0
   180c8:	mov	r1, ip
   180cc:	bl	17d68 <lchmod@@Base+0x1ab8>
   180d0:	sub	sp, fp, #24
   180d4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   180d8:	push	{r4, r5, r6, r7, fp, lr}
   180dc:	add	fp, sp, #16
   180e0:	sub	sp, sp, #48	; 0x30
   180e4:	movw	lr, #45560	; 0xb1f8
   180e8:	mov	ip, r0
   180ec:	mov	r3, sp
   180f0:	movt	lr, #2
   180f4:	mov	r2, r3
   180f8:	ldm	lr!, {r0, r1, r4, r5, r6, r7}
   180fc:	stmia	r2!, {r0, r1, r4, r5, r6, r7}
   18100:	ldm	lr, {r0, r1, r4, r5, r6, r7}
   18104:	stm	r2, {r0, r1, r4, r5, r6, r7}
   18108:	mov	r1, ip
   1810c:	mvn	r2, #0
   18110:	ldr	r0, [sp, #12]
   18114:	orr	r0, r0, #67108864	; 0x4000000
   18118:	str	r0, [sp, #12]
   1811c:	mov	r0, #0
   18120:	bl	17d68 <lchmod@@Base+0x1ab8>
   18124:	sub	sp, fp, #16
   18128:	pop	{r4, r5, r6, r7, fp, pc}
   1812c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   18130:	add	fp, sp, #24
   18134:	sub	sp, sp, #48	; 0x30
   18138:	movw	r8, #45560	; 0xb1f8
   1813c:	mov	ip, r1
   18140:	mov	lr, r0
   18144:	mov	r3, sp
   18148:	movt	r8, #2
   1814c:	mov	r2, r3
   18150:	ldm	r8!, {r0, r1, r4, r5, r6, r7}
   18154:	stmia	r2!, {r0, r1, r4, r5, r6, r7}
   18158:	ldm	r8, {r0, r1, r4, r5, r6, r7}
   1815c:	stm	r2, {r0, r1, r4, r5, r6, r7}
   18160:	mov	r1, lr
   18164:	mov	r2, ip
   18168:	ldr	r0, [sp, #12]
   1816c:	orr	r0, r0, #67108864	; 0x4000000
   18170:	str	r0, [sp, #12]
   18174:	mov	r0, #0
   18178:	bl	17d68 <lchmod@@Base+0x1ab8>
   1817c:	sub	sp, fp, #24
   18180:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   18184:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   18188:	add	fp, sp, #24
   1818c:	sub	sp, sp, #96	; 0x60
   18190:	mov	lr, sp
   18194:	vmov.i32	q8, #0	; 0x00000000
   18198:	mov	ip, r2
   1819c:	cmp	r1, #10
   181a0:	add	r3, lr, #16
   181a4:	mov	r2, lr
   181a8:	vst1.64	{d16-d17}, [r3]
   181ac:	mov	r3, #28
   181b0:	vst1.64	{d16-d17}, [r2], r3
   181b4:	vst1.32	{d16-d17}, [r2]
   181b8:	beq	181f8 <lchmod@@Base+0x1f48>
   181bc:	str	r1, [sp, #48]	; 0x30
   181c0:	add	r3, sp, #48	; 0x30
   181c4:	ldm	lr!, {r2, r4, r5, r6, r7}
   181c8:	add	r1, r3, #4
   181cc:	stmia	r1!, {r2, r4, r5, r6, r7}
   181d0:	ldm	lr, {r2, r4, r5, r6, r7, r8}
   181d4:	stm	r1, {r2, r4, r5, r6, r7, r8}
   181d8:	mvn	r2, #0
   181dc:	ldr	r1, [sp, #60]	; 0x3c
   181e0:	orr	r1, r1, #67108864	; 0x4000000
   181e4:	str	r1, [sp, #60]	; 0x3c
   181e8:	mov	r1, ip
   181ec:	bl	17d68 <lchmod@@Base+0x1ab8>
   181f0:	sub	sp, fp, #24
   181f4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   181f8:	bl	11af0 <abort@plt>
   181fc:	push	{fp, lr}
   18200:	mov	fp, sp
   18204:	sub	sp, sp, #8
   18208:	mvn	ip, #0
   1820c:	str	ip, [sp]
   18210:	bl	1821c <lchmod@@Base+0x1f6c>
   18214:	mov	sp, fp
   18218:	pop	{fp, pc}
   1821c:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   18220:	add	fp, sp, #24
   18224:	sub	sp, sp, #48	; 0x30
   18228:	movw	ip, #45560	; 0xb1f8
   1822c:	mov	lr, r3
   18230:	mov	r3, sp
   18234:	cmp	r1, #0
   18238:	movt	ip, #2
   1823c:	cmpne	r2, #0
   18240:	ldm	ip!, {r4, r5, r6, r7, r8, r9}
   18244:	stmia	r3!, {r4, r5, r6, r7, r8, r9}
   18248:	ldm	ip, {r4, r5, r6, r7, r8, r9}
   1824c:	stm	r3, {r4, r5, r6, r7, r8, r9}
   18250:	mov	r3, #10
   18254:	str	r3, [sp]
   18258:	bne	18260 <lchmod@@Base+0x1fb0>
   1825c:	bl	11af0 <abort@plt>
   18260:	ldr	ip, [fp, #8]
   18264:	str	r2, [sp, #44]	; 0x2c
   18268:	str	r1, [sp, #40]	; 0x28
   1826c:	mov	r3, sp
   18270:	mov	r1, lr
   18274:	mov	r2, ip
   18278:	bl	17d68 <lchmod@@Base+0x1ab8>
   1827c:	sub	sp, fp, #24
   18280:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   18284:	push	{fp, lr}
   18288:	mov	fp, sp
   1828c:	sub	sp, sp, #8
   18290:	mov	r3, r2
   18294:	mov	r2, r1
   18298:	mov	r1, r0
   1829c:	mvn	r0, #0
   182a0:	str	r0, [sp]
   182a4:	mov	r0, #0
   182a8:	bl	1821c <lchmod@@Base+0x1f6c>
   182ac:	mov	sp, fp
   182b0:	pop	{fp, pc}
   182b4:	push	{fp, lr}
   182b8:	mov	fp, sp
   182bc:	sub	sp, sp, #8
   182c0:	mov	ip, r2
   182c4:	mov	r2, r1
   182c8:	mov	r1, r0
   182cc:	str	r3, [sp]
   182d0:	mov	r0, #0
   182d4:	mov	r3, ip
   182d8:	bl	1821c <lchmod@@Base+0x1f6c>
   182dc:	mov	sp, fp
   182e0:	pop	{fp, pc}
   182e4:	movw	r3, #45464	; 0xb198
   182e8:	movt	r3, #2
   182ec:	b	17d68 <lchmod@@Base+0x1ab8>
   182f0:	movw	r3, #45464	; 0xb198
   182f4:	mov	r2, r1
   182f8:	mov	r1, r0
   182fc:	mov	r0, #0
   18300:	movt	r3, #2
   18304:	b	17d68 <lchmod@@Base+0x1ab8>
   18308:	movw	r3, #45464	; 0xb198
   1830c:	mvn	r2, #0
   18310:	movt	r3, #2
   18314:	b	17d68 <lchmod@@Base+0x1ab8>
   18318:	movw	r3, #45464	; 0xb198
   1831c:	mov	r1, r0
   18320:	mov	r0, #0
   18324:	mvn	r2, #0
   18328:	movt	r3, #2
   1832c:	b	17d68 <lchmod@@Base+0x1ab8>
   18330:	push	{r4, r5, fp, lr}
   18334:	add	fp, sp, #8
   18338:	mov	r5, r0
   1833c:	mov	r4, r1
   18340:	mov	r0, #0
   18344:	mov	r2, #5
   18348:	mov	r1, r5
   1834c:	bl	11808 <dcgettext@plt>
   18350:	cmp	r0, r5
   18354:	popne	{r4, r5, fp, pc}
   18358:	bl	1974c <lchmod@@Base+0x349c>
   1835c:	ldrb	r1, [r0]
   18360:	and	r1, r1, #223	; 0xdf
   18364:	cmp	r1, #71	; 0x47
   18368:	beq	183d0 <lchmod@@Base+0x2120>
   1836c:	cmp	r1, #85	; 0x55
   18370:	bne	183f4 <lchmod@@Base+0x2144>
   18374:	ldrb	r1, [r0, #1]
   18378:	and	r1, r1, #223	; 0xdf
   1837c:	cmp	r1, #84	; 0x54
   18380:	bne	183f4 <lchmod@@Base+0x2144>
   18384:	ldrb	r1, [r0, #2]
   18388:	and	r1, r1, #223	; 0xdf
   1838c:	cmp	r1, #70	; 0x46
   18390:	ldrbeq	r1, [r0, #3]
   18394:	cmpeq	r1, #45	; 0x2d
   18398:	bne	183f4 <lchmod@@Base+0x2144>
   1839c:	ldrb	r1, [r0, #4]
   183a0:	cmp	r1, #56	; 0x38
   183a4:	ldrbeq	r0, [r0, #5]
   183a8:	cmpeq	r0, #0
   183ac:	bne	183f4 <lchmod@@Base+0x2144>
   183b0:	ldrb	r1, [r5]
   183b4:	movw	r2, #41579	; 0xa26b
   183b8:	movw	r0, #41583	; 0xa26f
   183bc:	movt	r2, #1
   183c0:	movt	r0, #1
   183c4:	cmp	r1, #96	; 0x60
   183c8:	moveq	r0, r2
   183cc:	pop	{r4, r5, fp, pc}
   183d0:	ldrb	r1, [r0, #1]
   183d4:	and	r1, r1, #223	; 0xdf
   183d8:	cmp	r1, #66	; 0x42
   183dc:	bne	183f4 <lchmod@@Base+0x2144>
   183e0:	ldrb	r1, [r0, #2]
   183e4:	cmp	r1, #49	; 0x31
   183e8:	ldrbeq	r1, [r0, #3]
   183ec:	cmpeq	r1, #56	; 0x38
   183f0:	beq	18410 <lchmod@@Base+0x2160>
   183f4:	movw	r1, #41573	; 0xa265
   183f8:	movw	r0, #41577	; 0xa269
   183fc:	cmp	r4, #9
   18400:	movt	r1, #1
   18404:	movt	r0, #1
   18408:	moveq	r0, r1
   1840c:	pop	{r4, r5, fp, pc}
   18410:	ldrb	r1, [r0, #4]
   18414:	cmp	r1, #48	; 0x30
   18418:	ldrbeq	r1, [r0, #5]
   1841c:	cmpeq	r1, #51	; 0x33
   18420:	bne	183f4 <lchmod@@Base+0x2144>
   18424:	ldrb	r1, [r0, #6]
   18428:	cmp	r1, #48	; 0x30
   1842c:	ldrbeq	r0, [r0, #7]
   18430:	cmpeq	r0, #0
   18434:	bne	183f4 <lchmod@@Base+0x2144>
   18438:	ldrb	r1, [r5]
   1843c:	movw	r2, #41587	; 0xa273
   18440:	movw	r0, #41591	; 0xa277
   18444:	movt	r2, #1
   18448:	movt	r0, #1
   1844c:	b	183c4 <lchmod@@Base+0x2114>
   18450:	push	{r4, r5, r6, sl, fp, lr}
   18454:	add	fp, sp, #16
   18458:	ldr	r4, [r0], #8
   1845c:	mov	r5, r1
   18460:	cmp	r4, r0
   18464:	beq	18484 <lchmod@@Base+0x21d4>
   18468:	mov	r0, r4
   1846c:	mov	r1, r5
   18470:	bl	19118 <lchmod@@Base+0x2e68>
   18474:	mov	r6, r0
   18478:	cmp	r0, #0
   1847c:	moveq	r6, r4
   18480:	b	184ac <lchmod@@Base+0x21fc>
   18484:	mov	r0, r5
   18488:	bl	190e8 <lchmod@@Base+0x2e38>
   1848c:	cmp	r0, #0
   18490:	beq	184a8 <lchmod@@Base+0x21f8>
   18494:	mov	r1, r4
   18498:	mov	r2, r5
   1849c:	mov	r6, r0
   184a0:	bl	117d8 <memcpy@plt>
   184a4:	b	184ac <lchmod@@Base+0x21fc>
   184a8:	mov	r6, #0
   184ac:	mov	r0, r6
   184b0:	pop	{r4, r5, r6, sl, fp, pc}
   184b4:	push	{r4, r5, r6, sl, fp, lr}
   184b8:	add	fp, sp, #16
   184bc:	mov	r4, r0
   184c0:	add	r6, r0, #8
   184c4:	ldrd	r0, [r0]
   184c8:	lsl	r5, r1, #1
   184cc:	cmp	r0, r6
   184d0:	beq	184dc <lchmod@@Base+0x222c>
   184d4:	bl	1319c <__assert_fail@plt+0x164c>
   184d8:	ldr	r1, [r4, #4]
   184dc:	cmp	r5, r1
   184e0:	bcc	18504 <lchmod@@Base+0x2254>
   184e4:	mov	r0, r5
   184e8:	bl	190e8 <lchmod@@Base+0x2e38>
   184ec:	cmp	r0, #0
   184f0:	beq	18510 <lchmod@@Base+0x2260>
   184f4:	str	r0, [r4]
   184f8:	mov	r0, #1
   184fc:	str	r5, [r4, #4]
   18500:	pop	{r4, r5, r6, sl, fp, pc}
   18504:	bl	11994 <__errno_location@plt>
   18508:	mov	r1, #12
   1850c:	str	r1, [r0]
   18510:	str	r6, [r4]
   18514:	mov	r0, #0
   18518:	mov	r5, #1024	; 0x400
   1851c:	b	184fc <lchmod@@Base+0x224c>
   18520:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   18524:	add	fp, sp, #24
   18528:	ldrd	r8, [r0]
   1852c:	add	r7, r0, #8
   18530:	mov	r4, r0
   18534:	lsl	r5, r9, #1
   18538:	cmp	r8, r7
   1853c:	beq	18568 <lchmod@@Base+0x22b8>
   18540:	cmp	r5, r9
   18544:	bcc	1859c <lchmod@@Base+0x22ec>
   18548:	mov	r0, r8
   1854c:	mov	r1, r5
   18550:	bl	19118 <lchmod@@Base+0x2e68>
   18554:	mov	r6, r0
   18558:	cmp	r0, #0
   1855c:	bne	1858c <lchmod@@Base+0x22dc>
   18560:	ldr	r8, [r4]
   18564:	b	185a8 <lchmod@@Base+0x22f8>
   18568:	mov	r0, r5
   1856c:	bl	190e8 <lchmod@@Base+0x2e38>
   18570:	cmp	r0, #0
   18574:	moveq	r0, #0
   18578:	popeq	{r4, r5, r6, r7, r8, r9, fp, pc}
   1857c:	ldr	r2, [r4, #4]
   18580:	mov	r1, r8
   18584:	mov	r6, r0
   18588:	bl	117d8 <memcpy@plt>
   1858c:	str	r6, [r4]
   18590:	mov	r0, #1
   18594:	str	r5, [r4, #4]
   18598:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1859c:	bl	11994 <__errno_location@plt>
   185a0:	mov	r1, #12
   185a4:	str	r1, [r0]
   185a8:	mov	r0, r8
   185ac:	bl	1319c <__assert_fail@plt+0x164c>
   185b0:	mov	r0, #0
   185b4:	mov	r5, #1024	; 0x400
   185b8:	str	r7, [r4]
   185bc:	b	18594 <lchmod@@Base+0x22e4>
   185c0:	push	{r4, sl, fp, lr}
   185c4:	add	fp, sp, #8
   185c8:	mov	r4, r1
   185cc:	bl	11958 <getfilecon@plt>
   185d0:	mov	r1, r4
   185d4:	pop	{r4, sl, fp, lr}
   185d8:	b	185dc <lchmod@@Base+0x232c>
   185dc:	push	{r4, r5, fp, lr}
   185e0:	add	fp, sp, #8
   185e4:	cmp	r0, #10
   185e8:	beq	18600 <lchmod@@Base+0x2350>
   185ec:	cmp	r0, #0
   185f0:	bne	18648 <lchmod@@Base+0x2398>
   185f4:	bl	11994 <__errno_location@plt>
   185f8:	mov	r1, #95	; 0x5f
   185fc:	b	18640 <lchmod@@Base+0x2390>
   18600:	ldr	r5, [r1]
   18604:	mov	r4, r1
   18608:	movw	r1, #41680	; 0xa2d0
   1860c:	movt	r1, #1
   18610:	mov	r0, r5
   18614:	bl	11778 <strcmp@plt>
   18618:	mov	r1, r0
   1861c:	mov	r0, #10
   18620:	cmp	r1, #0
   18624:	popne	{r4, r5, fp, pc}
   18628:	mov	r0, r5
   1862c:	bl	11a84 <freecon@plt>
   18630:	mov	r0, #0
   18634:	str	r0, [r4]
   18638:	bl	11994 <__errno_location@plt>
   1863c:	mov	r1, #61	; 0x3d
   18640:	str	r1, [r0]
   18644:	mvn	r0, #0
   18648:	pop	{r4, r5, fp, pc}
   1864c:	push	{r4, sl, fp, lr}
   18650:	add	fp, sp, #8
   18654:	mov	r4, r1
   18658:	bl	118e0 <lgetfilecon@plt>
   1865c:	mov	r1, r4
   18660:	pop	{r4, sl, fp, lr}
   18664:	b	185dc <lchmod@@Base+0x232c>
   18668:	push	{r4, sl, fp, lr}
   1866c:	add	fp, sp, #8
   18670:	mov	r4, r1
   18674:	bl	1182c <fgetfilecon@plt>
   18678:	mov	r1, r4
   1867c:	pop	{r4, sl, fp, lr}
   18680:	b	185dc <lchmod@@Base+0x232c>
   18684:	push	{r4, r5, r6, r7, fp, lr}
   18688:	add	fp, sp, #16
   1868c:	mov	r4, r0
   18690:	cmp	r0, #2
   18694:	movhi	r0, r4
   18698:	pophi	{r4, r5, r6, r7, fp, pc}
   1869c:	mov	r0, r4
   186a0:	bl	19820 <lchmod@@Base+0x3570>
   186a4:	mov	r5, r0
   186a8:	bl	11994 <__errno_location@plt>
   186ac:	ldr	r7, [r0]
   186b0:	mov	r6, r0
   186b4:	mov	r0, r4
   186b8:	bl	11afc <close@plt>
   186bc:	mov	r0, r5
   186c0:	str	r7, [r6]
   186c4:	pop	{r4, r5, r6, r7, fp, pc}
   186c8:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   186cc:	add	fp, sp, #24
   186d0:	sub	sp, sp, #32
   186d4:	ldr	r6, [fp, #12]
   186d8:	ldr	r7, [fp, #8]
   186dc:	mov	r4, r2
   186e0:	mov	r8, r0
   186e4:	cmp	r1, #0
   186e8:	beq	18710 <lchmod@@Base+0x2460>
   186ec:	movw	r2, #41690	; 0xa2da
   186f0:	mov	r5, r1
   186f4:	str	r3, [sp, #4]
   186f8:	str	r4, [sp]
   186fc:	mov	r0, r8
   18700:	mov	r1, #1
   18704:	movt	r2, #1
   18708:	mov	r3, r5
   1870c:	b	18728 <lchmod@@Base+0x2478>
   18710:	movw	r2, #41702	; 0xa2e6
   18714:	str	r3, [sp]
   18718:	mov	r0, r8
   1871c:	mov	r1, #1
   18720:	mov	r3, r4
   18724:	movt	r2, #1
   18728:	bl	119dc <__fprintf_chk@plt>
   1872c:	movw	r1, #41709	; 0xa2ed
   18730:	mov	r0, #0
   18734:	mov	r2, #5
   18738:	movt	r1, #1
   1873c:	bl	11808 <dcgettext@plt>
   18740:	movw	r2, #42427	; 0xa5bb
   18744:	mov	r3, r0
   18748:	movw	r0, #2022	; 0x7e6
   1874c:	mov	r1, #1
   18750:	str	r0, [sp]
   18754:	movt	r2, #1
   18758:	mov	r0, r8
   1875c:	bl	119dc <__fprintf_chk@plt>
   18760:	movw	r4, #41035	; 0xa04b
   18764:	mov	r1, r8
   18768:	movt	r4, #1
   1876c:	mov	r0, r4
   18770:	bl	11754 <fputs_unlocked@plt>
   18774:	movw	r1, #41713	; 0xa2f1
   18778:	mov	r0, #0
   1877c:	mov	r2, #5
   18780:	movt	r1, #1
   18784:	bl	11808 <dcgettext@plt>
   18788:	movw	r3, #41884	; 0xa39c
   1878c:	mov	r2, r0
   18790:	mov	r0, r8
   18794:	mov	r1, #1
   18798:	movt	r3, #1
   1879c:	bl	119dc <__fprintf_chk@plt>
   187a0:	mov	r0, r4
   187a4:	mov	r1, r8
   187a8:	bl	11754 <fputs_unlocked@plt>
   187ac:	cmp	r6, #9
   187b0:	bhi	18814 <lchmod@@Base+0x2564>
   187b4:	add	r0, pc, #0
   187b8:	ldr	pc, [r0, r6, lsl #2]
   187bc:	andeq	r8, r1, ip, ror #19
   187c0:	andeq	r8, r1, r4, ror #15
   187c4:	andeq	r8, r1, r0, lsr #16
   187c8:	andeq	r8, r1, r8, asr #16
   187cc:	andeq	r8, r1, r0, ror r8
   187d0:	muleq	r1, r8, r8
   187d4:	andeq	r8, r1, r0, asr #17
   187d8:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   187dc:	muleq	r1, r8, r9
   187e0:	andeq	r8, r1, r0, asr #18
   187e4:	movw	r1, #41918	; 0xa3be
   187e8:	mov	r0, #0
   187ec:	mov	r2, #5
   187f0:	movt	r1, #1
   187f4:	bl	11808 <dcgettext@plt>
   187f8:	ldr	r3, [r7]
   187fc:	mov	r2, r0
   18800:	mov	r0, r8
   18804:	mov	r1, #1
   18808:	sub	sp, fp, #24
   1880c:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   18810:	b	119dc <__fprintf_chk@plt>
   18814:	movw	r1, #42237	; 0xa4fd
   18818:	movt	r1, #1
   1881c:	b	18948 <lchmod@@Base+0x2698>
   18820:	movw	r1, #41934	; 0xa3ce
   18824:	mov	r0, #0
   18828:	mov	r2, #5
   1882c:	movt	r1, #1
   18830:	bl	11808 <dcgettext@plt>
   18834:	mov	r2, r0
   18838:	ldr	r3, [r7]
   1883c:	ldr	r0, [r7, #4]
   18840:	str	r0, [sp]
   18844:	b	18934 <lchmod@@Base+0x2684>
   18848:	movw	r1, #41957	; 0xa3e5
   1884c:	mov	r0, #0
   18850:	mov	r2, #5
   18854:	movt	r1, #1
   18858:	bl	11808 <dcgettext@plt>
   1885c:	ldr	r3, [r7]
   18860:	mov	r2, r0
   18864:	ldmib	r7, {r0, r1}
   18868:	stm	sp, {r0, r1}
   1886c:	b	18934 <lchmod@@Base+0x2684>
   18870:	movw	r1, #41985	; 0xa401
   18874:	mov	r0, #0
   18878:	mov	r2, #5
   1887c:	movt	r1, #1
   18880:	bl	11808 <dcgettext@plt>
   18884:	ldr	r3, [r7]
   18888:	mov	r2, r0
   1888c:	ldmib	r7, {r0, r1, r7}
   18890:	stm	sp, {r0, r1, r7}
   18894:	b	18934 <lchmod@@Base+0x2684>
   18898:	movw	r1, #42017	; 0xa421
   1889c:	mov	r0, #0
   188a0:	mov	r2, #5
   188a4:	movt	r1, #1
   188a8:	bl	11808 <dcgettext@plt>
   188ac:	ldr	r3, [r7]
   188b0:	mov	r2, r0
   188b4:	ldmib	r7, {r0, r1, r6, r7}
   188b8:	stm	sp, {r0, r1, r6, r7}
   188bc:	b	18934 <lchmod@@Base+0x2684>
   188c0:	movw	r1, #42053	; 0xa445
   188c4:	mov	r0, #0
   188c8:	mov	r2, #5
   188cc:	movt	r1, #1
   188d0:	bl	11808 <dcgettext@plt>
   188d4:	ldr	r3, [r7]
   188d8:	mov	r2, r0
   188dc:	ldmib	r7, {r0, r1, r6}
   188e0:	ldr	r5, [r7, #16]
   188e4:	ldr	r7, [r7, #20]
   188e8:	stm	sp, {r0, r1, r6}
   188ec:	str	r5, [sp, #12]
   188f0:	str	r7, [sp, #16]
   188f4:	b	18934 <lchmod@@Base+0x2684>
   188f8:	movw	r1, #42093	; 0xa46d
   188fc:	mov	r0, #0
   18900:	mov	r2, #5
   18904:	movt	r1, #1
   18908:	bl	11808 <dcgettext@plt>
   1890c:	ldr	r3, [r7]
   18910:	mov	r2, r0
   18914:	ldmib	r7, {r0, r1, r6}
   18918:	ldr	r5, [r7, #16]
   1891c:	ldr	r4, [r7, #20]
   18920:	ldr	r7, [r7, #24]
   18924:	stm	sp, {r0, r1, r6}
   18928:	str	r5, [sp, #12]
   1892c:	str	r4, [sp, #16]
   18930:	str	r7, [sp, #20]
   18934:	mov	r0, r8
   18938:	mov	r1, #1
   1893c:	b	189e8 <lchmod@@Base+0x2738>
   18940:	movw	r1, #42185	; 0xa4c9
   18944:	movt	r1, #1
   18948:	mov	r0, #0
   1894c:	mov	r2, #5
   18950:	bl	11808 <dcgettext@plt>
   18954:	mov	ip, r0
   18958:	ldr	r3, [r7]
   1895c:	ldr	r0, [r7, #4]
   18960:	ldr	r1, [r7, #8]
   18964:	ldr	r6, [r7, #12]
   18968:	ldr	r5, [r7, #16]
   1896c:	ldr	r4, [r7, #20]
   18970:	ldr	r2, [r7, #24]
   18974:	ldr	lr, [r7, #28]
   18978:	ldr	r7, [r7, #32]
   1897c:	stm	sp, {r0, r1, r6}
   18980:	str	r5, [sp, #12]
   18984:	str	r4, [sp, #16]
   18988:	str	r2, [sp, #20]
   1898c:	str	lr, [sp, #24]
   18990:	str	r7, [sp, #28]
   18994:	b	189dc <lchmod@@Base+0x272c>
   18998:	movw	r1, #42137	; 0xa499
   1899c:	mov	r0, #0
   189a0:	mov	r2, #5
   189a4:	movt	r1, #1
   189a8:	bl	11808 <dcgettext@plt>
   189ac:	mov	ip, r0
   189b0:	ldr	r3, [r7]
   189b4:	ldmib	r7, {r0, r1, r6}
   189b8:	ldr	r5, [r7, #16]
   189bc:	ldr	r4, [r7, #20]
   189c0:	ldr	r2, [r7, #24]
   189c4:	ldr	r7, [r7, #28]
   189c8:	stm	sp, {r0, r1, r6}
   189cc:	str	r5, [sp, #12]
   189d0:	str	r4, [sp, #16]
   189d4:	str	r2, [sp, #20]
   189d8:	str	r7, [sp, #24]
   189dc:	mov	r0, r8
   189e0:	mov	r1, #1
   189e4:	mov	r2, ip
   189e8:	bl	119dc <__fprintf_chk@plt>
   189ec:	sub	sp, fp, #24
   189f0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   189f4:	push	{r4, sl, fp, lr}
   189f8:	add	fp, sp, #8
   189fc:	sub	sp, sp, #8
   18a00:	ldr	ip, [fp, #8]
   18a04:	mov	lr, #0
   18a08:	ldr	r4, [ip, lr, lsl #2]
   18a0c:	add	lr, lr, #1
   18a10:	cmp	r4, #0
   18a14:	bne	18a08 <lchmod@@Base+0x2758>
   18a18:	sub	r4, lr, #1
   18a1c:	str	ip, [sp]
   18a20:	str	r4, [sp, #4]
   18a24:	bl	186c8 <lchmod@@Base+0x2418>
   18a28:	sub	sp, fp, #8
   18a2c:	pop	{r4, sl, fp, pc}
   18a30:	push	{r4, r5, fp, lr}
   18a34:	add	fp, sp, #8
   18a38:	sub	sp, sp, #48	; 0x30
   18a3c:	ldr	r4, [fp, #8]
   18a40:	mov	ip, #0
   18a44:	add	lr, sp, #8
   18a48:	ldr	r5, [r4]
   18a4c:	cmp	r5, #0
   18a50:	str	r5, [lr, ip, lsl #2]
   18a54:	beq	18a68 <lchmod@@Base+0x27b8>
   18a58:	add	ip, ip, #1
   18a5c:	add	r4, r4, #4
   18a60:	cmp	ip, #10
   18a64:	bcc	18a48 <lchmod@@Base+0x2798>
   18a68:	str	lr, [sp]
   18a6c:	str	ip, [sp, #4]
   18a70:	bl	186c8 <lchmod@@Base+0x2418>
   18a74:	sub	sp, fp, #8
   18a78:	pop	{r4, r5, fp, pc}
   18a7c:	push	{fp, lr}
   18a80:	mov	fp, sp
   18a84:	sub	sp, sp, #8
   18a88:	add	ip, fp, #8
   18a8c:	str	ip, [sp, #4]
   18a90:	str	ip, [sp]
   18a94:	bl	18a30 <lchmod@@Base+0x2780>
   18a98:	mov	sp, fp
   18a9c:	pop	{fp, pc}
   18aa0:	push	{fp, lr}
   18aa4:	mov	fp, sp
   18aa8:	movw	r0, #45532	; 0xb1dc
   18aac:	movt	r0, #2
   18ab0:	ldr	r1, [r0]
   18ab4:	movw	r0, #41035	; 0xa04b
   18ab8:	movt	r0, #1
   18abc:	bl	11754 <fputs_unlocked@plt>
   18ac0:	movw	r1, #42297	; 0xa539
   18ac4:	mov	r0, #0
   18ac8:	mov	r2, #5
   18acc:	movt	r1, #1
   18ad0:	bl	11808 <dcgettext@plt>
   18ad4:	movw	r2, #42317	; 0xa54d
   18ad8:	mov	r1, r0
   18adc:	mov	r0, #1
   18ae0:	movt	r2, #1
   18ae4:	bl	119c4 <__printf_chk@plt>
   18ae8:	movw	r1, #42339	; 0xa563
   18aec:	mov	r0, #0
   18af0:	mov	r2, #5
   18af4:	movt	r1, #1
   18af8:	bl	11808 <dcgettext@plt>
   18afc:	movw	r2, #40447	; 0x9dff
   18b00:	movw	r3, #40844	; 0x9f8c
   18b04:	mov	r1, r0
   18b08:	mov	r0, #1
   18b0c:	movt	r2, #1
   18b10:	movt	r3, #1
   18b14:	bl	119c4 <__printf_chk@plt>
   18b18:	movw	r1, #42359	; 0xa577
   18b1c:	mov	r0, #0
   18b20:	mov	r2, #5
   18b24:	movt	r1, #1
   18b28:	bl	11808 <dcgettext@plt>
   18b2c:	movw	r2, #42398	; 0xa59e
   18b30:	mov	r1, r0
   18b34:	mov	r0, #1
   18b38:	movt	r2, #1
   18b3c:	pop	{fp, lr}
   18b40:	b	119c4 <__printf_chk@plt>
   18b44:	b	18b48 <lchmod@@Base+0x2898>
   18b48:	push	{r4, r5, r6, sl, fp, lr}
   18b4c:	add	fp, sp, #16
   18b50:	mov	r4, r2
   18b54:	mov	r5, r1
   18b58:	mov	r6, r0
   18b5c:	bl	197e4 <lchmod@@Base+0x3534>
   18b60:	cmp	r0, #0
   18b64:	popne	{r4, r5, r6, sl, fp, pc}
   18b68:	cmp	r6, #0
   18b6c:	beq	18b80 <lchmod@@Base+0x28d0>
   18b70:	cmp	r5, #0
   18b74:	cmpne	r4, #0
   18b78:	bne	18b80 <lchmod@@Base+0x28d0>
   18b7c:	pop	{r4, r5, r6, sl, fp, pc}
   18b80:	bl	18fd4 <lchmod@@Base+0x2d24>
   18b84:	push	{fp, lr}
   18b88:	mov	fp, sp
   18b8c:	bl	190e8 <lchmod@@Base+0x2e38>
   18b90:	cmp	r0, #0
   18b94:	popne	{fp, pc}
   18b98:	bl	18fd4 <lchmod@@Base+0x2d24>
   18b9c:	push	{fp, lr}
   18ba0:	mov	fp, sp
   18ba4:	bl	190e8 <lchmod@@Base+0x2e38>
   18ba8:	cmp	r0, #0
   18bac:	popne	{fp, pc}
   18bb0:	bl	18fd4 <lchmod@@Base+0x2d24>
   18bb4:	push	{fp, lr}
   18bb8:	mov	fp, sp
   18bbc:	bl	190e8 <lchmod@@Base+0x2e38>
   18bc0:	cmp	r0, #0
   18bc4:	popne	{fp, pc}
   18bc8:	bl	18fd4 <lchmod@@Base+0x2d24>
   18bcc:	push	{r4, r5, fp, lr}
   18bd0:	add	fp, sp, #8
   18bd4:	mov	r4, r1
   18bd8:	mov	r5, r0
   18bdc:	bl	19118 <lchmod@@Base+0x2e68>
   18be0:	cmp	r0, #0
   18be4:	popne	{r4, r5, fp, pc}
   18be8:	cmp	r5, #0
   18bec:	beq	18bfc <lchmod@@Base+0x294c>
   18bf0:	cmp	r4, #0
   18bf4:	bne	18bfc <lchmod@@Base+0x294c>
   18bf8:	pop	{r4, r5, fp, pc}
   18bfc:	bl	18fd4 <lchmod@@Base+0x2d24>
   18c00:	push	{fp, lr}
   18c04:	mov	fp, sp
   18c08:	cmp	r1, #0
   18c0c:	orreq	r1, r1, #1
   18c10:	bl	19118 <lchmod@@Base+0x2e68>
   18c14:	cmp	r0, #0
   18c18:	popne	{fp, pc}
   18c1c:	bl	18fd4 <lchmod@@Base+0x2d24>
   18c20:	push	{fp, lr}
   18c24:	mov	fp, sp
   18c28:	clz	r3, r2
   18c2c:	lsr	ip, r3, #5
   18c30:	clz	r3, r1
   18c34:	lsr	r3, r3, #5
   18c38:	orrs	r3, r3, ip
   18c3c:	movwne	r1, #1
   18c40:	movwne	r2, #1
   18c44:	bl	197e4 <lchmod@@Base+0x3534>
   18c48:	cmp	r0, #0
   18c4c:	popne	{fp, pc}
   18c50:	bl	18fd4 <lchmod@@Base+0x2d24>
   18c54:	push	{fp, lr}
   18c58:	mov	fp, sp
   18c5c:	mov	r2, r1
   18c60:	mov	r1, r0
   18c64:	mov	r0, #0
   18c68:	bl	197e4 <lchmod@@Base+0x3534>
   18c6c:	cmp	r0, #0
   18c70:	popne	{fp, pc}
   18c74:	bl	18fd4 <lchmod@@Base+0x2d24>
   18c78:	mov	r2, r1
   18c7c:	mov	r1, r0
   18c80:	mov	r0, #0
   18c84:	b	18c20 <lchmod@@Base+0x2970>
   18c88:	mov	r2, #1
   18c8c:	b	18c90 <lchmod@@Base+0x29e0>
   18c90:	push	{r4, r5, fp, lr}
   18c94:	add	fp, sp, #8
   18c98:	ldr	r5, [r1]
   18c9c:	mov	r4, r1
   18ca0:	cmp	r0, #0
   18ca4:	beq	18cbc <lchmod@@Base+0x2a0c>
   18ca8:	mov	r1, #1
   18cac:	add	r1, r1, r5, lsr #1
   18cb0:	adds	r5, r5, r1
   18cb4:	bcc	18cd4 <lchmod@@Base+0x2a24>
   18cb8:	bl	18fd4 <lchmod@@Base+0x2d24>
   18cbc:	cmp	r5, #0
   18cc0:	bne	18cd4 <lchmod@@Base+0x2a24>
   18cc4:	mov	r1, #64	; 0x40
   18cc8:	cmp	r2, #64	; 0x40
   18ccc:	udiv	r5, r1, r2
   18cd0:	addhi	r5, r5, #1
   18cd4:	mov	r1, r5
   18cd8:	bl	18b48 <lchmod@@Base+0x2898>
   18cdc:	str	r5, [r4]
   18ce0:	pop	{r4, r5, fp, pc}
   18ce4:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   18ce8:	add	fp, sp, #24
   18cec:	ldr	r6, [r1]
   18cf0:	mov	r8, r1
   18cf4:	ldr	r4, [fp, #8]
   18cf8:	add	r1, r6, r6, asr #1
   18cfc:	cmp	r1, r6
   18d00:	mvnvs	r1, #-2147483648	; 0x80000000
   18d04:	cmp	r1, r3
   18d08:	mov	r5, r1
   18d0c:	movgt	r5, r3
   18d10:	cmn	r3, #1
   18d14:	movle	r5, r1
   18d18:	cmn	r4, #1
   18d1c:	ble	18d3c <lchmod@@Base+0x2a8c>
   18d20:	cmp	r4, #0
   18d24:	beq	18d90 <lchmod@@Base+0x2ae0>
   18d28:	cmn	r5, #1
   18d2c:	ble	18d64 <lchmod@@Base+0x2ab4>
   18d30:	mvn	r7, #-2147483648	; 0x80000000
   18d34:	udiv	r1, r7, r4
   18d38:	b	18d58 <lchmod@@Base+0x2aa8>
   18d3c:	cmn	r5, #1
   18d40:	ble	18d80 <lchmod@@Base+0x2ad0>
   18d44:	cmn	r4, #1
   18d48:	beq	18d90 <lchmod@@Base+0x2ae0>
   18d4c:	mov	r1, #-2147483648	; 0x80000000
   18d50:	mvn	r7, #-2147483648	; 0x80000000
   18d54:	sdiv	r1, r1, r4
   18d58:	cmp	r1, r5
   18d5c:	bge	18d90 <lchmod@@Base+0x2ae0>
   18d60:	b	18da0 <lchmod@@Base+0x2af0>
   18d64:	beq	18d90 <lchmod@@Base+0x2ae0>
   18d68:	mov	r1, #-2147483648	; 0x80000000
   18d6c:	mvn	r7, #-2147483648	; 0x80000000
   18d70:	sdiv	r1, r1, r5
   18d74:	cmp	r1, r4
   18d78:	bge	18d90 <lchmod@@Base+0x2ae0>
   18d7c:	b	18da0 <lchmod@@Base+0x2af0>
   18d80:	mvn	r7, #-2147483648	; 0x80000000
   18d84:	sdiv	r1, r7, r4
   18d88:	cmp	r5, r1
   18d8c:	blt	18da0 <lchmod@@Base+0x2af0>
   18d90:	mul	r1, r5, r4
   18d94:	mov	r7, #64	; 0x40
   18d98:	cmp	r1, #63	; 0x3f
   18d9c:	bgt	18da8 <lchmod@@Base+0x2af8>
   18da0:	sdiv	r5, r7, r4
   18da4:	mul	r1, r5, r4
   18da8:	cmp	r0, #0
   18dac:	moveq	r7, #0
   18db0:	streq	r7, [r8]
   18db4:	sub	r7, r5, r6
   18db8:	cmp	r7, r2
   18dbc:	bge	18e60 <lchmod@@Base+0x2bb0>
   18dc0:	add	r5, r6, r2
   18dc4:	mov	r2, #0
   18dc8:	mov	r1, #0
   18dcc:	cmp	r5, r3
   18dd0:	movwgt	r2, #1
   18dd4:	cmn	r3, #1
   18dd8:	movwgt	r1, #1
   18ddc:	cmp	r5, r6
   18de0:	bvs	18e48 <lchmod@@Base+0x2b98>
   18de4:	ands	r1, r1, r2
   18de8:	bne	18e48 <lchmod@@Base+0x2b98>
   18dec:	cmn	r4, #1
   18df0:	ble	18e10 <lchmod@@Base+0x2b60>
   18df4:	cmp	r4, #0
   18df8:	beq	18e5c <lchmod@@Base+0x2bac>
   18dfc:	cmn	r5, #1
   18e00:	ble	18e34 <lchmod@@Base+0x2b84>
   18e04:	mvn	r1, #-2147483648	; 0x80000000
   18e08:	udiv	r1, r1, r4
   18e0c:	b	18e28 <lchmod@@Base+0x2b78>
   18e10:	cmn	r5, #1
   18e14:	ble	18e4c <lchmod@@Base+0x2b9c>
   18e18:	cmn	r4, #1
   18e1c:	beq	18e5c <lchmod@@Base+0x2bac>
   18e20:	mov	r1, #-2147483648	; 0x80000000
   18e24:	sdiv	r1, r1, r4
   18e28:	cmp	r1, r5
   18e2c:	bge	18e5c <lchmod@@Base+0x2bac>
   18e30:	b	18e48 <lchmod@@Base+0x2b98>
   18e34:	beq	18e5c <lchmod@@Base+0x2bac>
   18e38:	mov	r1, #-2147483648	; 0x80000000
   18e3c:	sdiv	r1, r1, r5
   18e40:	cmp	r1, r4
   18e44:	bge	18e5c <lchmod@@Base+0x2bac>
   18e48:	bl	18fd4 <lchmod@@Base+0x2d24>
   18e4c:	mvn	r1, #-2147483648	; 0x80000000
   18e50:	sdiv	r1, r1, r4
   18e54:	cmp	r5, r1
   18e58:	blt	18e48 <lchmod@@Base+0x2b98>
   18e5c:	mul	r1, r5, r4
   18e60:	bl	18bcc <lchmod@@Base+0x291c>
   18e64:	str	r5, [r8]
   18e68:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   18e6c:	push	{fp, lr}
   18e70:	mov	fp, sp
   18e74:	mov	r1, #1
   18e78:	bl	19094 <lchmod@@Base+0x2de4>
   18e7c:	cmp	r0, #0
   18e80:	popne	{fp, pc}
   18e84:	bl	18fd4 <lchmod@@Base+0x2d24>
   18e88:	push	{fp, lr}
   18e8c:	mov	fp, sp
   18e90:	bl	19094 <lchmod@@Base+0x2de4>
   18e94:	cmp	r0, #0
   18e98:	popne	{fp, pc}
   18e9c:	bl	18fd4 <lchmod@@Base+0x2d24>
   18ea0:	push	{fp, lr}
   18ea4:	mov	fp, sp
   18ea8:	mov	r1, #1
   18eac:	bl	19094 <lchmod@@Base+0x2de4>
   18eb0:	cmp	r0, #0
   18eb4:	popne	{fp, pc}
   18eb8:	bl	18fd4 <lchmod@@Base+0x2d24>
   18ebc:	push	{fp, lr}
   18ec0:	mov	fp, sp
   18ec4:	bl	19094 <lchmod@@Base+0x2de4>
   18ec8:	cmp	r0, #0
   18ecc:	popne	{fp, pc}
   18ed0:	bl	18fd4 <lchmod@@Base+0x2d24>
   18ed4:	push	{r4, r5, r6, sl, fp, lr}
   18ed8:	add	fp, sp, #16
   18edc:	mov	r5, r0
   18ee0:	mov	r0, r1
   18ee4:	mov	r4, r1
   18ee8:	bl	190e8 <lchmod@@Base+0x2e38>
   18eec:	cmp	r0, #0
   18ef0:	beq	18f0c <lchmod@@Base+0x2c5c>
   18ef4:	mov	r1, r5
   18ef8:	mov	r2, r4
   18efc:	mov	r6, r0
   18f00:	bl	117d8 <memcpy@plt>
   18f04:	mov	r0, r6
   18f08:	pop	{r4, r5, r6, sl, fp, pc}
   18f0c:	bl	18fd4 <lchmod@@Base+0x2d24>
   18f10:	push	{r4, r5, r6, sl, fp, lr}
   18f14:	add	fp, sp, #16
   18f18:	mov	r5, r0
   18f1c:	mov	r0, r1
   18f20:	mov	r4, r1
   18f24:	bl	190e8 <lchmod@@Base+0x2e38>
   18f28:	cmp	r0, #0
   18f2c:	beq	18f48 <lchmod@@Base+0x2c98>
   18f30:	mov	r1, r5
   18f34:	mov	r2, r4
   18f38:	mov	r6, r0
   18f3c:	bl	117d8 <memcpy@plt>
   18f40:	mov	r0, r6
   18f44:	pop	{r4, r5, r6, sl, fp, pc}
   18f48:	bl	18fd4 <lchmod@@Base+0x2d24>
   18f4c:	push	{r4, r5, r6, sl, fp, lr}
   18f50:	add	fp, sp, #16
   18f54:	mov	r5, r0
   18f58:	add	r0, r1, #1
   18f5c:	mov	r4, r1
   18f60:	bl	190e8 <lchmod@@Base+0x2e38>
   18f64:	cmp	r0, #0
   18f68:	beq	18f90 <lchmod@@Base+0x2ce0>
   18f6c:	mov	r6, r0
   18f70:	mov	r0, #0
   18f74:	mov	r1, r5
   18f78:	mov	r2, r4
   18f7c:	strb	r0, [r6, r4]
   18f80:	mov	r0, r6
   18f84:	bl	117d8 <memcpy@plt>
   18f88:	mov	r0, r6
   18f8c:	pop	{r4, r5, r6, sl, fp, pc}
   18f90:	bl	18fd4 <lchmod@@Base+0x2d24>
   18f94:	push	{r4, r5, r6, sl, fp, lr}
   18f98:	add	fp, sp, #16
   18f9c:	mov	r4, r0
   18fa0:	bl	11964 <strlen@plt>
   18fa4:	add	r5, r0, #1
   18fa8:	mov	r0, r5
   18fac:	bl	190e8 <lchmod@@Base+0x2e38>
   18fb0:	cmp	r0, #0
   18fb4:	beq	18fd0 <lchmod@@Base+0x2d20>
   18fb8:	mov	r1, r4
   18fbc:	mov	r2, r5
   18fc0:	mov	r6, r0
   18fc4:	bl	117d8 <memcpy@plt>
   18fc8:	mov	r0, r6
   18fcc:	pop	{r4, r5, r6, sl, fp, pc}
   18fd0:	bl	18fd4 <lchmod@@Base+0x2d24>
   18fd4:	push	{fp, lr}
   18fd8:	mov	fp, sp
   18fdc:	movw	r0, #45444	; 0xb184
   18fe0:	movw	r1, #42474	; 0xa5ea
   18fe4:	mov	r2, #5
   18fe8:	movt	r0, #2
   18fec:	movt	r1, #1
   18ff0:	ldr	r4, [r0]
   18ff4:	mov	r0, #0
   18ff8:	bl	11808 <dcgettext@plt>
   18ffc:	movw	r2, #41223	; 0xa107
   19000:	mov	r3, r0
   19004:	mov	r0, r4
   19008:	mov	r1, #0
   1900c:	movt	r2, #1
   19010:	bl	118c8 <error@plt>
   19014:	bl	11af0 <abort@plt>
   19018:	push	{fp, lr}
   1901c:	mov	fp, sp
   19020:	orr	r1, r1, #512	; 0x200
   19024:	bl	131c4 <__assert_fail@plt+0x1674>
   19028:	cmp	r0, #0
   1902c:	popne	{fp, pc}
   19030:	bl	11994 <__errno_location@plt>
   19034:	ldr	r0, [r0]
   19038:	cmp	r0, #22
   1903c:	bne	19060 <lchmod@@Base+0x2db0>
   19040:	movw	r0, #42491	; 0xa5fb
   19044:	movw	r1, #42507	; 0xa60b
   19048:	movw	r3, #42518	; 0xa616
   1904c:	mov	r2, #41	; 0x29
   19050:	movt	r0, #1
   19054:	movt	r1, #1
   19058:	movt	r3, #1
   1905c:	bl	11b50 <__assert_fail@plt>
   19060:	bl	18fd4 <lchmod@@Base+0x2d24>
   19064:	ldr	r0, [r0, #48]	; 0x30
   19068:	and	r0, r0, #17
   1906c:	cmp	r0, #16
   19070:	moveq	r0, #1
   19074:	bxeq	lr
   19078:	cmp	r0, #17
   1907c:	movne	r0, #0
   19080:	bxne	lr
   19084:	ldr	r0, [r1, #48]	; 0x30
   19088:	cmp	r0, #0
   1908c:	movwne	r0, #1
   19090:	bx	lr
   19094:	clz	r2, r1
   19098:	clz	r3, r0
   1909c:	lsr	r2, r2, #5
   190a0:	lsr	r3, r3, #5
   190a4:	orrs	r2, r3, r2
   190a8:	movwne	r1, #1
   190ac:	movwne	r0, #1
   190b0:	cmp	r1, #0
   190b4:	beq	190e4 <lchmod@@Base+0x2e34>
   190b8:	mvn	r2, #-2147483648	; 0x80000000
   190bc:	udiv	r2, r2, r1
   190c0:	cmp	r2, r0
   190c4:	bcs	190e4 <lchmod@@Base+0x2e34>
   190c8:	push	{fp, lr}
   190cc:	mov	fp, sp
   190d0:	bl	11994 <__errno_location@plt>
   190d4:	mov	r1, #12
   190d8:	str	r1, [r0]
   190dc:	mov	r0, #0
   190e0:	pop	{fp, pc}
   190e4:	b	11748 <calloc@plt>
   190e8:	cmp	r0, #0
   190ec:	movweq	r0, #1
   190f0:	cmn	r0, #1
   190f4:	ble	190fc <lchmod@@Base+0x2e4c>
   190f8:	b	118ec <malloc@plt>
   190fc:	push	{fp, lr}
   19100:	mov	fp, sp
   19104:	bl	11994 <__errno_location@plt>
   19108:	mov	r1, #12
   1910c:	str	r1, [r0]
   19110:	mov	r0, #0
   19114:	pop	{fp, pc}
   19118:	push	{fp, lr}
   1911c:	mov	fp, sp
   19120:	cmp	r0, #0
   19124:	beq	19140 <lchmod@@Base+0x2e90>
   19128:	cmp	r1, #0
   1912c:	beq	1914c <lchmod@@Base+0x2e9c>
   19130:	cmn	r1, #1
   19134:	ble	19154 <lchmod@@Base+0x2ea4>
   19138:	pop	{fp, lr}
   1913c:	b	11820 <realloc@plt>
   19140:	mov	r0, r1
   19144:	pop	{fp, lr}
   19148:	b	190e8 <lchmod@@Base+0x2e38>
   1914c:	bl	1319c <__assert_fail@plt+0x164c>
   19150:	b	19160 <lchmod@@Base+0x2eb0>
   19154:	bl	11994 <__errno_location@plt>
   19158:	mov	r1, #12
   1915c:	str	r1, [r0]
   19160:	mov	r0, #0
   19164:	pop	{fp, pc}
   19168:	sub	r0, r0, #1
   1916c:	ldrb	r3, [r0, #1]!
   19170:	cmp	r3, #47	; 0x2f
   19174:	beq	1916c <lchmod@@Base+0x2ebc>
   19178:	mov	r2, #0
   1917c:	mov	r1, r0
   19180:	uxtb	r3, r3
   19184:	cmp	r3, #47	; 0x2f
   19188:	beq	191a4 <lchmod@@Base+0x2ef4>
   1918c:	cmp	r3, #0
   19190:	bxeq	lr
   19194:	tst	r2, #1
   19198:	mov	r2, #0
   1919c:	movne	r0, r1
   191a0:	b	191a8 <lchmod@@Base+0x2ef8>
   191a4:	mov	r2, #1
   191a8:	ldrb	r3, [r1, #1]!
   191ac:	b	19180 <lchmod@@Base+0x2ed0>
   191b0:	push	{r4, sl, fp, lr}
   191b4:	add	fp, sp, #8
   191b8:	mov	r4, r0
   191bc:	bl	11964 <strlen@plt>
   191c0:	mov	r1, r0
   191c4:	sub	r2, r4, #1
   191c8:	mov	r0, r1
   191cc:	cmp	r1, #2
   191d0:	popcc	{r4, sl, fp, pc}
   191d4:	ldrb	r3, [r2, r0]
   191d8:	sub	r1, r0, #1
   191dc:	cmp	r3, #47	; 0x2f
   191e0:	beq	191c8 <lchmod@@Base+0x2f18>
   191e4:	pop	{r4, sl, fp, pc}
   191e8:	push	{r4, r5, r6, sl, fp, lr}
   191ec:	add	fp, sp, #16
   191f0:	mov	r4, r0
   191f4:	bl	118a4 <__fpending@plt>
   191f8:	mov	r5, r0
   191fc:	mov	r0, r4
   19200:	bl	118b0 <ferror_unlocked@plt>
   19204:	mov	r6, r0
   19208:	mov	r0, r4
   1920c:	bl	19354 <lchmod@@Base+0x30a4>
   19210:	cmp	r6, #0
   19214:	beq	19234 <lchmod@@Base+0x2f84>
   19218:	mvn	r4, #0
   1921c:	cmp	r0, #0
   19220:	bne	19260 <lchmod@@Base+0x2fb0>
   19224:	bl	11994 <__errno_location@plt>
   19228:	mov	r1, #0
   1922c:	str	r1, [r0]
   19230:	b	19260 <lchmod@@Base+0x2fb0>
   19234:	cmp	r0, #0
   19238:	mov	r4, r0
   1923c:	mvnne	r4, #0
   19240:	cmp	r5, #0
   19244:	bne	19260 <lchmod@@Base+0x2fb0>
   19248:	cmp	r0, #0
   1924c:	beq	19260 <lchmod@@Base+0x2fb0>
   19250:	bl	11994 <__errno_location@plt>
   19254:	ldr	r0, [r0]
   19258:	subs	r4, r0, #9
   1925c:	mvnne	r4, #0
   19260:	mov	r0, r4
   19264:	pop	{r4, r5, r6, sl, fp, pc}
   19268:	movw	r2, #62998	; 0xf616
   1926c:	mov	r1, #0
   19270:	movt	r2, #149	; 0x95
   19274:	str	r1, [r0, #16]
   19278:	str	r1, [r0, #20]
   1927c:	str	r2, [r0, #24]
   19280:	bx	lr
   19284:	push	{r4, r5, r6, r7, fp, lr}
   19288:	add	fp, sp, #16
   1928c:	ldr	r2, [r0, #24]
   19290:	movw	r3, #62998	; 0xf616
   19294:	movt	r3, #149	; 0x95
   19298:	cmp	r2, r3
   1929c:	bne	19334 <lchmod@@Base+0x3084>
   192a0:	mov	r3, r0
   192a4:	ldr	r2, [r3, #16]!
   192a8:	ldr	lr, [r3, #4]
   192ac:	orrs	r5, r2, lr
   192b0:	beq	192e8 <lchmod@@Base+0x3038>
   192b4:	ldrd	r4, [r0]
   192b8:	ldrd	r6, [r1, #96]	; 0x60
   192bc:	eor	r7, r7, r5
   192c0:	eor	r6, r6, r4
   192c4:	orrs	r7, r6, r7
   192c8:	bne	192e8 <lchmod@@Base+0x3038>
   192cc:	ldrd	r4, [r0, #8]
   192d0:	ldrd	r6, [r1]
   192d4:	mov	ip, #1
   192d8:	eor	r7, r7, r5
   192dc:	eor	r6, r6, r4
   192e0:	orrs	r7, r6, r7
   192e4:	beq	1932c <lchmod@@Base+0x307c>
   192e8:	adds	r4, r2, #1
   192ec:	mov	ip, #0
   192f0:	adc	r5, lr, #0
   192f4:	and	r2, r4, r2
   192f8:	strd	r4, [r3]
   192fc:	and	r3, r5, lr
   19300:	orrs	r2, r2, r3
   19304:	bne	1932c <lchmod@@Base+0x307c>
   19308:	orrs	r2, r4, r5
   1930c:	beq	19328 <lchmod@@Base+0x3078>
   19310:	ldrd	r2, [r1]
   19314:	str	r3, [r0, #12]
   19318:	str	r2, [r0, #8]
   1931c:	ldrd	r2, [r1, #96]	; 0x60
   19320:	stm	r0, {r2, r3}
   19324:	b	1932c <lchmod@@Base+0x307c>
   19328:	mov	ip, #1
   1932c:	mov	r0, ip
   19330:	pop	{r4, r5, r6, r7, fp, pc}
   19334:	movw	r0, #42596	; 0xa664
   19338:	movw	r1, #42620	; 0xa67c
   1933c:	movw	r3, #42638	; 0xa68e
   19340:	mov	r2, #60	; 0x3c
   19344:	movt	r0, #1
   19348:	movt	r1, #1
   1934c:	movt	r3, #1
   19350:	bl	11b50 <__assert_fail@plt>
   19354:	push	{r4, r5, r6, sl, fp, lr}
   19358:	add	fp, sp, #16
   1935c:	sub	sp, sp, #8
   19360:	mov	r4, r0
   19364:	bl	119d0 <fileno@plt>
   19368:	cmn	r0, #1
   1936c:	ble	193e0 <lchmod@@Base+0x3130>
   19370:	mov	r0, r4
   19374:	bl	11904 <__freading@plt>
   19378:	cmp	r0, #0
   1937c:	beq	193a8 <lchmod@@Base+0x30f8>
   19380:	mov	r0, r4
   19384:	bl	119d0 <fileno@plt>
   19388:	mov	r1, #1
   1938c:	mov	r2, #0
   19390:	mov	r3, #0
   19394:	str	r1, [sp]
   19398:	bl	11880 <lseek64@plt>
   1939c:	and	r0, r0, r1
   193a0:	cmn	r0, #1
   193a4:	beq	193e0 <lchmod@@Base+0x3130>
   193a8:	mov	r0, r4
   193ac:	bl	19610 <lchmod@@Base+0x3360>
   193b0:	cmp	r0, #0
   193b4:	beq	193e0 <lchmod@@Base+0x3130>
   193b8:	bl	11994 <__errno_location@plt>
   193bc:	ldr	r6, [r0]
   193c0:	mov	r5, r0
   193c4:	mov	r0, r4
   193c8:	bl	119e8 <fclose@plt>
   193cc:	cmp	r6, #0
   193d0:	strne	r6, [r5]
   193d4:	mvnne	r0, #0
   193d8:	sub	sp, fp, #16
   193dc:	pop	{r4, r5, r6, sl, fp, pc}
   193e0:	mov	r0, r4
   193e4:	sub	sp, fp, #16
   193e8:	pop	{r4, r5, r6, sl, fp, lr}
   193ec:	b	119e8 <fclose@plt>
   193f0:	sub	sp, sp, #8
   193f4:	push	{r4, r5, r6, r7, fp, lr}
   193f8:	add	fp, sp, #16
   193fc:	sub	sp, sp, #8
   19400:	mov	r5, r0
   19404:	add	r0, fp, #8
   19408:	cmp	r1, #11
   1940c:	str	r3, [fp, #12]
   19410:	str	r2, [fp, #8]
   19414:	str	r0, [sp, #4]
   19418:	bhi	19454 <lchmod@@Base+0x31a4>
   1941c:	mov	r0, #1
   19420:	movw	r2, #1300	; 0x514
   19424:	tst	r2, r0, lsl r1
   19428:	bne	1950c <lchmod@@Base+0x325c>
   1942c:	movw	r2, #2570	; 0xa0a
   19430:	tst	r2, r0, lsl r1
   19434:	bne	1947c <lchmod@@Base+0x31cc>
   19438:	cmp	r1, #0
   1943c:	bne	19454 <lchmod@@Base+0x31a4>
   19440:	ldr	r0, [sp, #4]
   19444:	add	r1, r0, #4
   19448:	str	r1, [sp, #4]
   1944c:	mov	r1, #0
   19450:	b	19518 <lchmod@@Base+0x3268>
   19454:	sub	r0, r1, #1024	; 0x400
   19458:	cmp	r0, #10
   1945c:	bhi	1950c <lchmod@@Base+0x325c>
   19460:	mov	r2, #1
   19464:	movw	r3, #645	; 0x285
   19468:	tst	r3, r2, lsl r0
   1946c:	bne	1950c <lchmod@@Base+0x325c>
   19470:	movw	r3, #1282	; 0x502
   19474:	tst	r3, r2, lsl r0
   19478:	beq	19488 <lchmod@@Base+0x31d8>
   1947c:	mov	r0, r5
   19480:	bl	11a00 <fcntl64@plt>
   19484:	b	19524 <lchmod@@Base+0x3274>
   19488:	cmp	r0, #6
   1948c:	bne	1950c <lchmod@@Base+0x325c>
   19490:	ldr	r0, [sp, #4]
   19494:	movw	r7, #45864	; 0xb328
   19498:	movt	r7, #2
   1949c:	add	r1, r0, #4
   194a0:	str	r1, [sp, #4]
   194a4:	ldr	r6, [r0]
   194a8:	ldr	r0, [r7]
   194ac:	cmp	r0, #0
   194b0:	blt	19548 <lchmod@@Base+0x3298>
   194b4:	mov	r0, r5
   194b8:	movw	r1, #1030	; 0x406
   194bc:	mov	r2, r6
   194c0:	bl	11a00 <fcntl64@plt>
   194c4:	mov	r4, r0
   194c8:	cmn	r0, #1
   194cc:	bgt	1953c <lchmod@@Base+0x328c>
   194d0:	bl	11994 <__errno_location@plt>
   194d4:	ldr	r0, [r0]
   194d8:	cmp	r0, #22
   194dc:	bne	1953c <lchmod@@Base+0x328c>
   194e0:	mov	r0, r5
   194e4:	mov	r1, #0
   194e8:	mov	r2, r6
   194ec:	bl	11a00 <fcntl64@plt>
   194f0:	mov	r4, r0
   194f4:	cmp	r0, #0
   194f8:	blt	19528 <lchmod@@Base+0x3278>
   194fc:	mvn	r0, #0
   19500:	str	r0, [r7]
   19504:	mov	r0, #1
   19508:	b	1956c <lchmod@@Base+0x32bc>
   1950c:	ldr	r0, [sp, #4]
   19510:	add	r2, r0, #4
   19514:	str	r2, [sp, #4]
   19518:	ldr	r2, [r0]
   1951c:	mov	r0, r5
   19520:	bl	11a00 <fcntl64@plt>
   19524:	mov	r4, r0
   19528:	mov	r0, r4
   1952c:	sub	sp, fp, #16
   19530:	pop	{r4, r5, r6, r7, fp, lr}
   19534:	add	sp, sp, #8
   19538:	bx	lr
   1953c:	mov	r0, #1
   19540:	str	r0, [r7]
   19544:	b	19528 <lchmod@@Base+0x3278>
   19548:	mov	r0, r5
   1954c:	mov	r1, #0
   19550:	mov	r2, r6
   19554:	bl	11a00 <fcntl64@plt>
   19558:	mov	r4, r0
   1955c:	ldr	r0, [r7]
   19560:	add	r0, r0, #1
   19564:	clz	r0, r0
   19568:	lsr	r0, r0, #5
   1956c:	cmp	r0, #0
   19570:	beq	19528 <lchmod@@Base+0x3278>
   19574:	cmp	r4, #0
   19578:	blt	19528 <lchmod@@Base+0x3278>
   1957c:	mov	r0, r4
   19580:	mov	r1, #1
   19584:	bl	11a00 <fcntl64@plt>
   19588:	cmp	r0, #0
   1958c:	blt	195a8 <lchmod@@Base+0x32f8>
   19590:	orr	r2, r0, #1
   19594:	mov	r0, r4
   19598:	mov	r1, #2
   1959c:	bl	11a00 <fcntl64@plt>
   195a0:	cmn	r0, #1
   195a4:	bne	19528 <lchmod@@Base+0x3278>
   195a8:	bl	11994 <__errno_location@plt>
   195ac:	ldr	r6, [r0]
   195b0:	mov	r5, r0
   195b4:	mov	r0, r4
   195b8:	bl	11afc <close@plt>
   195bc:	str	r6, [r5]
   195c0:	mvn	r4, #0
   195c4:	b	19528 <lchmod@@Base+0x3278>
   195c8:	sub	sp, sp, #8
   195cc:	push	{fp, lr}
   195d0:	mov	fp, sp
   195d4:	sub	sp, sp, #8
   195d8:	str	r2, [fp, #8]
   195dc:	mov	r2, #0
   195e0:	tst	r1, #64	; 0x40
   195e4:	str	r3, [fp, #12]
   195e8:	addne	r2, fp, #8
   195ec:	orrne	r2, r2, #4
   195f0:	strne	r2, [sp, #4]
   195f4:	ldrne	r2, [fp, #8]
   195f8:	bl	118d4 <open64@plt>
   195fc:	bl	18684 <lchmod@@Base+0x23d4>
   19600:	mov	sp, fp
   19604:	pop	{fp, lr}
   19608:	add	sp, sp, #8
   1960c:	bx	lr
   19610:	push	{r4, sl, fp, lr}
   19614:	add	fp, sp, #8
   19618:	sub	sp, sp, #8
   1961c:	mov	r4, r0
   19620:	cmp	r0, #0
   19624:	beq	19640 <lchmod@@Base+0x3390>
   19628:	mov	r0, r4
   1962c:	bl	11904 <__freading@plt>
   19630:	cmp	r0, #0
   19634:	ldrbne	r0, [r4, #1]
   19638:	tstne	r0, #1
   1963c:	bne	19650 <lchmod@@Base+0x33a0>
   19640:	mov	r0, r4
   19644:	sub	sp, fp, #8
   19648:	pop	{r4, sl, fp, lr}
   1964c:	b	11790 <fflush@plt>
   19650:	mov	r0, #1
   19654:	mov	r2, #0
   19658:	mov	r3, #0
   1965c:	str	r0, [sp]
   19660:	mov	r0, r4
   19664:	bl	1966c <lchmod@@Base+0x33bc>
   19668:	b	19640 <lchmod@@Base+0x3390>
   1966c:	push	{r4, r5, r6, r7, fp, lr}
   19670:	add	fp, sp, #16
   19674:	sub	sp, sp, #8
   19678:	mov	r4, r0
   1967c:	ldr	r0, [r0, #4]
   19680:	mov	r5, r3
   19684:	mov	r6, r2
   19688:	ldr	r1, [r4, #8]
   1968c:	cmp	r1, r0
   19690:	bne	196ac <lchmod@@Base+0x33fc>
   19694:	ldrd	r0, [r4, #16]
   19698:	cmp	r1, r0
   1969c:	bne	196ac <lchmod@@Base+0x33fc>
   196a0:	ldr	r0, [r4, #36]	; 0x24
   196a4:	cmp	r0, #0
   196a8:	beq	196c4 <lchmod@@Base+0x3414>
   196ac:	mov	r0, r4
   196b0:	mov	r2, r6
   196b4:	mov	r3, r5
   196b8:	sub	sp, fp, #16
   196bc:	pop	{r4, r5, r6, r7, fp, lr}
   196c0:	b	119f4 <fseeko64@plt>
   196c4:	ldr	r7, [fp, #8]
   196c8:	mov	r0, r4
   196cc:	bl	119d0 <fileno@plt>
   196d0:	mov	r2, r6
   196d4:	mov	r3, r5
   196d8:	str	r7, [sp]
   196dc:	bl	11880 <lseek64@plt>
   196e0:	and	r2, r0, r1
   196e4:	cmn	r2, #1
   196e8:	beq	19704 <lchmod@@Base+0x3454>
   196ec:	strd	r0, [r4, #80]	; 0x50
   196f0:	ldr	r0, [r4]
   196f4:	bic	r0, r0, #16
   196f8:	str	r0, [r4]
   196fc:	mov	r0, #0
   19700:	b	19708 <lchmod@@Base+0x3458>
   19704:	mvn	r0, #0
   19708:	sub	sp, fp, #16
   1970c:	pop	{r4, r5, r6, r7, fp, pc}
   19710:	ldrb	r2, [r0]
   19714:	cmp	r2, #0
   19718:	beq	1973c <lchmod@@Base+0x348c>
   1971c:	add	r3, r0, #1
   19720:	mov	r0, #0
   19724:	ror	r0, r0, #23
   19728:	uxtab	r0, r0, r2
   1972c:	ldrb	r2, [r3], #1
   19730:	cmp	r2, #0
   19734:	bne	19724 <lchmod@@Base+0x3474>
   19738:	b	19740 <lchmod@@Base+0x3490>
   1973c:	mov	r0, #0
   19740:	udiv	r2, r0, r1
   19744:	mls	r0, r2, r1, r0
   19748:	bx	lr
   1974c:	push	{fp, lr}
   19750:	mov	fp, sp
   19754:	mov	r0, #14
   19758:	bl	11a30 <nl_langinfo@plt>
   1975c:	movw	r1, #41036	; 0xa04c
   19760:	cmp	r0, #0
   19764:	movt	r1, #1
   19768:	movne	r1, r0
   1976c:	movw	r0, #42705	; 0xa6d1
   19770:	ldrb	r2, [r1]
   19774:	movt	r0, #1
   19778:	cmp	r2, #0
   1977c:	movne	r0, r1
   19780:	pop	{fp, pc}
   19784:	push	{r4, r5, r6, r7, fp, lr}
   19788:	add	fp, sp, #16
   1978c:	sub	sp, sp, #8
   19790:	add	r5, sp, #4
   19794:	cmp	r0, #0
   19798:	mov	r7, r2
   1979c:	mov	r4, r1
   197a0:	movne	r5, r0
   197a4:	mov	r0, r5
   197a8:	bl	118bc <mbrtowc@plt>
   197ac:	mov	r6, r0
   197b0:	cmp	r7, #0
   197b4:	beq	197d8 <lchmod@@Base+0x3528>
   197b8:	cmn	r6, #2
   197bc:	bcc	197d8 <lchmod@@Base+0x3528>
   197c0:	mov	r0, #0
   197c4:	bl	1982c <lchmod@@Base+0x357c>
   197c8:	cmp	r0, #0
   197cc:	ldrbeq	r0, [r4]
   197d0:	moveq	r6, #1
   197d4:	streq	r0, [r5]
   197d8:	mov	r0, r6
   197dc:	sub	sp, fp, #16
   197e0:	pop	{r4, r5, r6, r7, fp, pc}
   197e4:	cmp	r2, #0
   197e8:	beq	19818 <lchmod@@Base+0x3568>
   197ec:	mvn	r3, #0
   197f0:	udiv	r3, r3, r2
   197f4:	cmp	r3, r1
   197f8:	bcs	19818 <lchmod@@Base+0x3568>
   197fc:	push	{fp, lr}
   19800:	mov	fp, sp
   19804:	bl	11994 <__errno_location@plt>
   19808:	mov	r1, #12
   1980c:	str	r1, [r0]
   19810:	mov	r0, #0
   19814:	pop	{fp, pc}
   19818:	mul	r1, r2, r1
   1981c:	b	19118 <lchmod@@Base+0x2e68>
   19820:	mov	r1, #0
   19824:	mov	r2, #3
   19828:	b	193f0 <lchmod@@Base+0x3140>
   1982c:	push	{r4, sl, fp, lr}
   19830:	add	fp, sp, #8
   19834:	sub	sp, sp, #264	; 0x108
   19838:	add	r1, sp, #7
   1983c:	movw	r2, #257	; 0x101
   19840:	bl	19890 <lchmod@@Base+0x35e0>
   19844:	mov	r4, #0
   19848:	cmp	r0, #0
   1984c:	bne	19884 <lchmod@@Base+0x35d4>
   19850:	movw	r1, #42711	; 0xa6d7
   19854:	add	r0, sp, #7
   19858:	movt	r1, #1
   1985c:	bl	11778 <strcmp@plt>
   19860:	cmp	r0, #0
   19864:	beq	19884 <lchmod@@Base+0x35d4>
   19868:	movw	r1, #42713	; 0xa6d9
   1986c:	add	r0, sp, #7
   19870:	movt	r1, #1
   19874:	bl	11778 <strcmp@plt>
   19878:	mov	r4, r0
   1987c:	cmp	r0, #0
   19880:	movwne	r4, #1
   19884:	mov	r0, r4
   19888:	sub	sp, fp, #8
   1988c:	pop	{r4, sl, fp, pc}
   19890:	push	{r4, r5, r6, r7, fp, lr}
   19894:	add	fp, sp, #16
   19898:	mov	r4, r1
   1989c:	mov	r1, #0
   198a0:	mov	r6, r2
   198a4:	bl	11a0c <setlocale@plt>
   198a8:	cmp	r0, #0
   198ac:	beq	198d8 <lchmod@@Base+0x3628>
   198b0:	mov	r7, r0
   198b4:	bl	11964 <strlen@plt>
   198b8:	cmp	r0, r6
   198bc:	bcs	198ec <lchmod@@Base+0x363c>
   198c0:	add	r2, r0, #1
   198c4:	mov	r0, r4
   198c8:	mov	r1, r7
   198cc:	bl	117d8 <memcpy@plt>
   198d0:	mov	r5, #0
   198d4:	b	19914 <lchmod@@Base+0x3664>
   198d8:	cmp	r6, #0
   198dc:	mov	r5, #22
   198e0:	movne	r0, #0
   198e4:	strbne	r0, [r4]
   198e8:	b	19914 <lchmod@@Base+0x3664>
   198ec:	mov	r5, #34	; 0x22
   198f0:	cmp	r6, #0
   198f4:	beq	19914 <lchmod@@Base+0x3664>
   198f8:	sub	r6, r6, #1
   198fc:	mov	r0, r4
   19900:	mov	r1, r7
   19904:	mov	r2, r6
   19908:	bl	117d8 <memcpy@plt>
   1990c:	mov	r0, #0
   19910:	strb	r0, [r4, r6]
   19914:	mov	r0, r5
   19918:	pop	{r4, r5, r6, r7, fp, pc}
   1991c:	mov	r1, #0
   19920:	b	11a0c <setlocale@plt>
   19924:	cmp	r3, #0
   19928:	cmpeq	r2, #0
   1992c:	bne	19944 <lchmod@@Base+0x3694>
   19930:	cmp	r1, #0
   19934:	cmpeq	r0, #0
   19938:	mvnne	r1, #0
   1993c:	mvnne	r0, #0
   19940:	b	19960 <lchmod@@Base+0x36b0>
   19944:	sub	sp, sp, #8
   19948:	push	{sp, lr}
   1994c:	bl	19970 <lchmod@@Base+0x36c0>
   19950:	ldr	lr, [sp, #4]
   19954:	add	sp, sp, #8
   19958:	pop	{r2, r3}
   1995c:	bx	lr
   19960:	push	{r1, lr}
   19964:	mov	r0, #8
   19968:	bl	11760 <raise@plt>
   1996c:	pop	{r1, pc}
   19970:	cmp	r1, r3
   19974:	cmpeq	r0, r2
   19978:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1997c:	mov	r4, r0
   19980:	movcc	r0, #0
   19984:	mov	r5, r1
   19988:	ldr	lr, [sp, #36]	; 0x24
   1998c:	movcc	r1, r0
   19990:	bcc	19a8c <lchmod@@Base+0x37dc>
   19994:	cmp	r3, #0
   19998:	clzeq	ip, r2
   1999c:	clzne	ip, r3
   199a0:	addeq	ip, ip, #32
   199a4:	cmp	r5, #0
   199a8:	clzeq	r1, r4
   199ac:	addeq	r1, r1, #32
   199b0:	clzne	r1, r5
   199b4:	sub	ip, ip, r1
   199b8:	sub	sl, ip, #32
   199bc:	lsl	r9, r3, ip
   199c0:	rsb	fp, ip, #32
   199c4:	orr	r9, r9, r2, lsl sl
   199c8:	orr	r9, r9, r2, lsr fp
   199cc:	lsl	r8, r2, ip
   199d0:	cmp	r5, r9
   199d4:	cmpeq	r4, r8
   199d8:	movcc	r0, #0
   199dc:	movcc	r1, r0
   199e0:	bcc	199fc <lchmod@@Base+0x374c>
   199e4:	mov	r0, #1
   199e8:	subs	r4, r4, r8
   199ec:	lsl	r1, r0, sl
   199f0:	orr	r1, r1, r0, lsr fp
   199f4:	lsl	r0, r0, ip
   199f8:	sbc	r5, r5, r9
   199fc:	cmp	ip, #0
   19a00:	beq	19a8c <lchmod@@Base+0x37dc>
   19a04:	lsr	r6, r8, #1
   19a08:	orr	r6, r6, r9, lsl #31
   19a0c:	lsr	r7, r9, #1
   19a10:	mov	r2, ip
   19a14:	b	19a38 <lchmod@@Base+0x3788>
   19a18:	subs	r3, r4, r6
   19a1c:	sbc	r8, r5, r7
   19a20:	adds	r3, r3, r3
   19a24:	adc	r8, r8, r8
   19a28:	adds	r4, r3, #1
   19a2c:	adc	r5, r8, #0
   19a30:	subs	r2, r2, #1
   19a34:	beq	19a54 <lchmod@@Base+0x37a4>
   19a38:	cmp	r5, r7
   19a3c:	cmpeq	r4, r6
   19a40:	bcs	19a18 <lchmod@@Base+0x3768>
   19a44:	adds	r4, r4, r4
   19a48:	adc	r5, r5, r5
   19a4c:	subs	r2, r2, #1
   19a50:	bne	19a38 <lchmod@@Base+0x3788>
   19a54:	lsr	r3, r4, ip
   19a58:	orr	r3, r3, r5, lsl fp
   19a5c:	lsr	r2, r5, ip
   19a60:	orr	r3, r3, r5, lsr sl
   19a64:	adds	r0, r0, r4
   19a68:	mov	r4, r3
   19a6c:	lsl	r3, r2, ip
   19a70:	orr	r3, r3, r4, lsl sl
   19a74:	lsl	ip, r4, ip
   19a78:	orr	r3, r3, r4, lsr fp
   19a7c:	adc	r1, r1, r5
   19a80:	subs	r0, r0, ip
   19a84:	mov	r5, r2
   19a88:	sbc	r1, r1, r3
   19a8c:	cmp	lr, #0
   19a90:	strdne	r4, [lr]
   19a94:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19a98:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   19a9c:	mov	r7, r0
   19aa0:	ldr	r6, [pc, #72]	; 19af0 <lchmod@@Base+0x3840>
   19aa4:	ldr	r5, [pc, #72]	; 19af4 <lchmod@@Base+0x3844>
   19aa8:	add	r6, pc, r6
   19aac:	add	r5, pc, r5
   19ab0:	sub	r6, r6, r5
   19ab4:	mov	r8, r1
   19ab8:	mov	r9, r2
   19abc:	bl	11710 <fstatfs64@plt-0x20>
   19ac0:	asrs	r6, r6, #2
   19ac4:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   19ac8:	mov	r4, #0
   19acc:	add	r4, r4, #1
   19ad0:	ldr	r3, [r5], #4
   19ad4:	mov	r2, r9
   19ad8:	mov	r1, r8
   19adc:	mov	r0, r7
   19ae0:	blx	r3
   19ae4:	cmp	r6, r4
   19ae8:	bne	19acc <lchmod@@Base+0x381c>
   19aec:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   19af0:	andeq	r1, r1, r4, asr r4
   19af4:	andeq	r1, r1, ip, asr #8
   19af8:	bx	lr
   19afc:	ldr	r3, [pc, #12]	; 19b10 <lchmod@@Base+0x3860>
   19b00:	mov	r1, #0
   19b04:	add	r3, pc, r3
   19b08:	ldr	r2, [r3]
   19b0c:	b	119ac <__cxa_atexit@plt>
   19b10:	andeq	r1, r1, r0, ror r6
   19b14:	mov	r2, r1
   19b18:	mov	r1, r0
   19b1c:	mov	r0, #3
   19b20:	b	11acc <__xstat64@plt>
   19b24:	mov	r2, r1
   19b28:	mov	r1, r0
   19b2c:	mov	r0, #3
   19b30:	b	11868 <__fxstat64@plt>
   19b34:	mov	r2, r1
   19b38:	mov	r1, r0
   19b3c:	mov	r0, #3
   19b40:	b	11b08 <__lxstat64@plt>
   19b44:	push	{lr}		; (str lr, [sp, #-4]!)
   19b48:	sub	sp, sp, #12
   19b4c:	str	r3, [sp]
   19b50:	mov	r3, r2
   19b54:	mov	r2, r1
   19b58:	mov	r1, r0
   19b5c:	mov	r0, #3
   19b60:	bl	11850 <__fxstatat64@plt>
   19b64:	add	sp, sp, #12
   19b68:	pop	{pc}		; (ldr pc, [sp], #4)

Disassembly of section .fini:

00019b6c <.fini>:
   19b6c:	push	{r3, lr}
   19b70:	pop	{r3, pc}
