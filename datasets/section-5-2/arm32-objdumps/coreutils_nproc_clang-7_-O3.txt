
../repos/coreutils/src/nproc:     file format elf32-littlearm


Disassembly of section .init:

00010d9c <.init>:
   10d9c:	push	{r3, lr}
   10da0:	bl	11050 <__assert_fail@plt+0x48>
   10da4:	pop	{r3, pc}

Disassembly of section .plt:

00010da8 <calloc@plt-0x14>:
   10da8:	push	{lr}		; (str lr, [sp, #-4]!)
   10dac:	ldr	lr, [pc, #4]	; 10db8 <calloc@plt-0x4>
   10db0:	add	lr, pc, lr
   10db4:	ldr	pc, [lr, #8]!
   10db8:	andeq	r6, r1, r8, asr #4

00010dbc <calloc@plt>:
   10dbc:	add	ip, pc, #0, 12
   10dc0:	add	ip, ip, #90112	; 0x16000
   10dc4:	ldr	pc, [ip, #584]!	; 0x248

00010dc8 <fputs_unlocked@plt>:
   10dc8:	add	ip, pc, #0, 12
   10dcc:	add	ip, ip, #90112	; 0x16000
   10dd0:	ldr	pc, [ip, #576]!	; 0x240

00010dd4 <raise@plt>:
   10dd4:	add	ip, pc, #0, 12
   10dd8:	add	ip, ip, #90112	; 0x16000
   10ddc:	ldr	pc, [ip, #568]!	; 0x238

00010de0 <strcmp@plt>:
   10de0:	add	ip, pc, #0, 12
   10de4:	add	ip, ip, #90112	; 0x16000
   10de8:	ldr	pc, [ip, #560]!	; 0x230

00010dec <fflush@plt>:
   10dec:	add	ip, pc, #0, 12
   10df0:	add	ip, ip, #90112	; 0x16000
   10df4:	ldr	pc, [ip, #552]!	; 0x228

00010df8 <free@plt>:
   10df8:	add	ip, pc, #0, 12
   10dfc:	add	ip, ip, #90112	; 0x16000
   10e00:	ldr	pc, [ip, #544]!	; 0x220

00010e04 <_exit@plt>:
   10e04:	add	ip, pc, #0, 12
   10e08:	add	ip, ip, #90112	; 0x16000
   10e0c:	ldr	pc, [ip, #536]!	; 0x218

00010e10 <memcpy@plt>:
   10e10:	add	ip, pc, #0, 12
   10e14:	add	ip, ip, #90112	; 0x16000
   10e18:	ldr	pc, [ip, #528]!	; 0x210

00010e1c <__strtoull_internal@plt>:
   10e1c:	add	ip, pc, #0, 12
   10e20:	add	ip, ip, #90112	; 0x16000
   10e24:	ldr	pc, [ip, #520]!	; 0x208

00010e28 <mbsinit@plt>:
   10e28:	add	ip, pc, #0, 12
   10e2c:	add	ip, ip, #90112	; 0x16000
   10e30:	ldr	pc, [ip, #512]!	; 0x200

00010e34 <__sched_cpucount@plt>:
   10e34:	add	ip, pc, #0, 12
   10e38:	add	ip, ip, #90112	; 0x16000
   10e3c:	ldr	pc, [ip, #504]!	; 0x1f8

00010e40 <memcmp@plt>:
   10e40:	add	ip, pc, #0, 12
   10e44:	add	ip, ip, #90112	; 0x16000
   10e48:	ldr	pc, [ip, #496]!	; 0x1f0

00010e4c <dcgettext@plt>:
   10e4c:	add	ip, pc, #0, 12
   10e50:	add	ip, ip, #90112	; 0x16000
   10e54:	ldr	pc, [ip, #488]!	; 0x1e8

00010e58 <sysconf@plt>:
   10e58:	add	ip, pc, #0, 12
   10e5c:	add	ip, ip, #90112	; 0x16000
   10e60:	ldr	pc, [ip, #480]!	; 0x1e0

00010e64 <realloc@plt>:
   10e64:	add	ip, pc, #0, 12
   10e68:	add	ip, ip, #90112	; 0x16000
   10e6c:	ldr	pc, [ip, #472]!	; 0x1d8

00010e70 <textdomain@plt>:
   10e70:	add	ip, pc, #0, 12
   10e74:	add	ip, ip, #90112	; 0x16000
   10e78:	ldr	pc, [ip, #464]!	; 0x1d0

00010e7c <iswprint@plt>:
   10e7c:	add	ip, pc, #0, 12
   10e80:	add	ip, ip, #90112	; 0x16000
   10e84:	ldr	pc, [ip, #456]!	; 0x1c8

00010e88 <fwrite@plt>:
   10e88:	add	ip, pc, #0, 12
   10e8c:	add	ip, ip, #90112	; 0x16000
   10e90:	ldr	pc, [ip, #448]!	; 0x1c0

00010e94 <lseek64@plt>:
   10e94:	add	ip, pc, #0, 12
   10e98:	add	ip, ip, #90112	; 0x16000
   10e9c:	ldr	pc, [ip, #440]!	; 0x1b8

00010ea0 <__ctype_get_mb_cur_max@plt>:
   10ea0:	add	ip, pc, #0, 12
   10ea4:	add	ip, ip, #90112	; 0x16000
   10ea8:	ldr	pc, [ip, #432]!	; 0x1b0

00010eac <__fpending@plt>:
   10eac:	add	ip, pc, #0, 12
   10eb0:	add	ip, ip, #90112	; 0x16000
   10eb4:	ldr	pc, [ip, #424]!	; 0x1a8

00010eb8 <mbrtowc@plt>:
   10eb8:	add	ip, pc, #0, 12
   10ebc:	add	ip, ip, #90112	; 0x16000
   10ec0:	ldr	pc, [ip, #416]!	; 0x1a0

00010ec4 <error@plt>:
   10ec4:	add	ip, pc, #0, 12
   10ec8:	add	ip, ip, #90112	; 0x16000
   10ecc:	ldr	pc, [ip, #408]!	; 0x198

00010ed0 <getenv@plt>:
   10ed0:	add	ip, pc, #0, 12
   10ed4:	add	ip, ip, #90112	; 0x16000
   10ed8:	ldr	pc, [ip, #400]!	; 0x190

00010edc <malloc@plt>:
   10edc:	add	ip, pc, #0, 12
   10ee0:	add	ip, ip, #90112	; 0x16000
   10ee4:	ldr	pc, [ip, #392]!	; 0x188

00010ee8 <__libc_start_main@plt>:
   10ee8:	add	ip, pc, #0, 12
   10eec:	add	ip, ip, #90112	; 0x16000
   10ef0:	ldr	pc, [ip, #384]!	; 0x180

00010ef4 <__freading@plt>:
   10ef4:	add	ip, pc, #0, 12
   10ef8:	add	ip, ip, #90112	; 0x16000
   10efc:	ldr	pc, [ip, #376]!	; 0x178

00010f00 <__gmon_start__@plt>:
   10f00:	add	ip, pc, #0, 12
   10f04:	add	ip, ip, #90112	; 0x16000
   10f08:	ldr	pc, [ip, #368]!	; 0x170

00010f0c <getopt_long@plt>:
   10f0c:	add	ip, pc, #0, 12
   10f10:	add	ip, ip, #90112	; 0x16000
   10f14:	ldr	pc, [ip, #360]!	; 0x168

00010f18 <__ctype_b_loc@plt>:
   10f18:	add	ip, pc, #0, 12
   10f1c:	add	ip, ip, #90112	; 0x16000
   10f20:	ldr	pc, [ip, #352]!	; 0x160

00010f24 <exit@plt>:
   10f24:	add	ip, pc, #0, 12
   10f28:	add	ip, ip, #90112	; 0x16000
   10f2c:	ldr	pc, [ip, #344]!	; 0x158

00010f30 <strtoul@plt>:
   10f30:	add	ip, pc, #0, 12
   10f34:	add	ip, ip, #90112	; 0x16000
   10f38:	ldr	pc, [ip, #336]!	; 0x150

00010f3c <strlen@plt>:
   10f3c:	add	ip, pc, #0, 12
   10f40:	add	ip, ip, #90112	; 0x16000
   10f44:	ldr	pc, [ip, #328]!	; 0x148

00010f48 <strchr@plt>:
   10f48:	add	ip, pc, #0, 12
   10f4c:	add	ip, ip, #90112	; 0x16000
   10f50:	ldr	pc, [ip, #320]!	; 0x140

00010f54 <__errno_location@plt>:
   10f54:	add	ip, pc, #0, 12
   10f58:	add	ip, ip, #90112	; 0x16000
   10f5c:	ldr	pc, [ip, #312]!	; 0x138

00010f60 <__cxa_atexit@plt>:
   10f60:	add	ip, pc, #0, 12
   10f64:	add	ip, ip, #90112	; 0x16000
   10f68:	ldr	pc, [ip, #304]!	; 0x130

00010f6c <memset@plt>:
   10f6c:	add	ip, pc, #0, 12
   10f70:	add	ip, ip, #90112	; 0x16000
   10f74:	ldr	pc, [ip, #296]!	; 0x128

00010f78 <__printf_chk@plt>:
   10f78:	add	ip, pc, #0, 12
   10f7c:	add	ip, ip, #90112	; 0x16000
   10f80:	ldr	pc, [ip, #288]!	; 0x120

00010f84 <fileno@plt>:
   10f84:	add	ip, pc, #0, 12
   10f88:	add	ip, ip, #90112	; 0x16000
   10f8c:	ldr	pc, [ip, #280]!	; 0x118

00010f90 <__fprintf_chk@plt>:
   10f90:	add	ip, pc, #0, 12
   10f94:	add	ip, ip, #90112	; 0x16000
   10f98:	ldr	pc, [ip, #272]!	; 0x110

00010f9c <fclose@plt>:
   10f9c:	add	ip, pc, #0, 12
   10fa0:	add	ip, ip, #90112	; 0x16000
   10fa4:	ldr	pc, [ip, #264]!	; 0x108

00010fa8 <fseeko64@plt>:
   10fa8:	add	ip, pc, #0, 12
   10fac:	add	ip, ip, #90112	; 0x16000
   10fb0:	ldr	pc, [ip, #256]!	; 0x100

00010fb4 <setlocale@plt>:
   10fb4:	add	ip, pc, #0, 12
   10fb8:	add	ip, ip, #90112	; 0x16000
   10fbc:	ldr	pc, [ip, #248]!	; 0xf8

00010fc0 <strrchr@plt>:
   10fc0:	add	ip, pc, #0, 12
   10fc4:	add	ip, ip, #90112	; 0x16000
   10fc8:	ldr	pc, [ip, #240]!	; 0xf0

00010fcc <nl_langinfo@plt>:
   10fcc:	add	ip, pc, #0, 12
   10fd0:	add	ip, ip, #90112	; 0x16000
   10fd4:	ldr	pc, [ip, #232]!	; 0xe8

00010fd8 <sched_getaffinity@plt>:
   10fd8:	add	ip, pc, #0, 12
   10fdc:	add	ip, ip, #90112	; 0x16000
   10fe0:	ldr	pc, [ip, #224]!	; 0xe0

00010fe4 <bindtextdomain@plt>:
   10fe4:	add	ip, pc, #0, 12
   10fe8:	add	ip, ip, #90112	; 0x16000
   10fec:	ldr	pc, [ip, #216]!	; 0xd8

00010ff0 <strncmp@plt>:
   10ff0:	add	ip, pc, #0, 12
   10ff4:	add	ip, ip, #90112	; 0x16000
   10ff8:	ldr	pc, [ip, #208]!	; 0xd0

00010ffc <abort@plt>:
   10ffc:	add	ip, pc, #0, 12
   11000:	add	ip, ip, #90112	; 0x16000
   11004:	ldr	pc, [ip, #200]!	; 0xc8

00011008 <__assert_fail@plt>:
   11008:	add	ip, pc, #0, 12
   1100c:	add	ip, ip, #90112	; 0x16000
   11010:	ldr	pc, [ip, #192]!	; 0xc0

Disassembly of section .text:

00011014 <.text>:
   11014:	mov	fp, #0
   11018:	mov	lr, #0
   1101c:	pop	{r1}		; (ldr r1, [sp], #4)
   11020:	mov	r2, sp
   11024:	push	{r2}		; (str r2, [sp, #-4]!)
   11028:	push	{r0}		; (str r0, [sp, #-4]!)
   1102c:	ldr	ip, [pc, #16]	; 11044 <__assert_fail@plt+0x3c>
   11030:	push	{ip}		; (str ip, [sp, #-4]!)
   11034:	ldr	r0, [pc, #12]	; 11048 <__assert_fail@plt+0x40>
   11038:	ldr	r3, [pc, #12]	; 1104c <__assert_fail@plt+0x44>
   1103c:	bl	10ee8 <__libc_start_main@plt>
   11040:	bl	10ffc <abort@plt>
   11044:	ldrdeq	r5, [r1], -r0
   11048:	andeq	r1, r1, r4, ror #6
   1104c:	andeq	r5, r1, r0, ror r8
   11050:	ldr	r3, [pc, #20]	; 1106c <__assert_fail@plt+0x64>
   11054:	ldr	r2, [pc, #20]	; 11070 <__assert_fail@plt+0x68>
   11058:	add	r3, pc, r3
   1105c:	ldr	r2, [r3, r2]
   11060:	cmp	r2, #0
   11064:	bxeq	lr
   11068:	b	10f00 <__gmon_start__@plt>
   1106c:	andeq	r5, r1, r0, lsr #31
   11070:	ldrdeq	r0, [r0], -r4
   11074:	ldr	r0, [pc, #24]	; 11094 <__assert_fail@plt+0x8c>
   11078:	ldr	r3, [pc, #24]	; 11098 <__assert_fail@plt+0x90>
   1107c:	cmp	r3, r0
   11080:	bxeq	lr
   11084:	ldr	r3, [pc, #16]	; 1109c <__assert_fail@plt+0x94>
   11088:	cmp	r3, #0
   1108c:	bxeq	lr
   11090:	bx	r3
   11094:	andeq	r7, r2, r8, lsr #2
   11098:	andeq	r7, r2, r8, lsr #2
   1109c:	andeq	r0, r0, r0
   110a0:	ldr	r0, [pc, #36]	; 110cc <__assert_fail@plt+0xc4>
   110a4:	ldr	r1, [pc, #36]	; 110d0 <__assert_fail@plt+0xc8>
   110a8:	sub	r1, r1, r0
   110ac:	asr	r1, r1, #2
   110b0:	add	r1, r1, r1, lsr #31
   110b4:	asrs	r1, r1, #1
   110b8:	bxeq	lr
   110bc:	ldr	r3, [pc, #16]	; 110d4 <__assert_fail@plt+0xcc>
   110c0:	cmp	r3, #0
   110c4:	bxeq	lr
   110c8:	bx	r3
   110cc:	andeq	r7, r2, r8, lsr #2
   110d0:	andeq	r7, r2, r8, lsr #2
   110d4:	andeq	r0, r0, r0
   110d8:	push	{r4, lr}
   110dc:	ldr	r4, [pc, #24]	; 110fc <__assert_fail@plt+0xf4>
   110e0:	ldrb	r3, [r4]
   110e4:	cmp	r3, #0
   110e8:	popne	{r4, pc}
   110ec:	bl	11074 <__assert_fail@plt+0x6c>
   110f0:	mov	r3, #1
   110f4:	strb	r3, [r4]
   110f8:	pop	{r4, pc}
   110fc:	andeq	r7, r2, r4, asr #2
   11100:	b	110a0 <__assert_fail@plt+0x98>
   11104:	push	{fp, lr}
   11108:	mov	fp, sp
   1110c:	sub	sp, sp, #56	; 0x38
   11110:	mov	r4, r0
   11114:	cmp	r0, #0
   11118:	bne	11320 <__assert_fail@plt+0x318>
   1111c:	movw	r1, #22819	; 0x5923
   11120:	mov	r0, #0
   11124:	mov	r2, #5
   11128:	movt	r1, #1
   1112c:	bl	10e4c <dcgettext@plt>
   11130:	mov	r1, r0
   11134:	movw	r0, #29008	; 0x7150
   11138:	movt	r0, #2
   1113c:	ldr	r2, [r0]
   11140:	mov	r0, #1
   11144:	bl	10f78 <__printf_chk@plt>
   11148:	movw	r1, #22842	; 0x593a
   1114c:	mov	r0, #0
   11150:	mov	r2, #5
   11154:	movt	r1, #1
   11158:	bl	10e4c <dcgettext@plt>
   1115c:	movw	r7, #28988	; 0x713c
   11160:	movt	r7, #2
   11164:	ldr	r1, [r7]
   11168:	bl	10dc8 <fputs_unlocked@plt>
   1116c:	movw	r1, #22970	; 0x59ba
   11170:	mov	r0, #0
   11174:	mov	r2, #5
   11178:	movt	r1, #1
   1117c:	bl	10e4c <dcgettext@plt>
   11180:	ldr	r1, [r7]
   11184:	bl	10dc8 <fputs_unlocked@plt>
   11188:	movw	r1, #23087	; 0x5a2f
   1118c:	mov	r0, #0
   11190:	mov	r2, #5
   11194:	movt	r1, #1
   11198:	bl	10e4c <dcgettext@plt>
   1119c:	ldr	r1, [r7]
   111a0:	bl	10dc8 <fputs_unlocked@plt>
   111a4:	movw	r1, #23132	; 0x5a5c
   111a8:	mov	r0, #0
   111ac:	mov	r2, #5
   111b0:	movt	r1, #1
   111b4:	bl	10e4c <dcgettext@plt>
   111b8:	ldr	r1, [r7]
   111bc:	bl	10dc8 <fputs_unlocked@plt>
   111c0:	movw	r0, #23704	; 0x5c98
   111c4:	mov	r2, #48	; 0x30
   111c8:	mov	r6, sp
   111cc:	movw	r5, #23186	; 0x5a92
   111d0:	movt	r0, #1
   111d4:	movt	r5, #1
   111d8:	add	r1, r0, #32
   111dc:	add	r3, r0, #16
   111e0:	vld1.64	{d18-d19}, [r0], r2
   111e4:	vld1.64	{d16-d17}, [r1]
   111e8:	vld1.64	{d20-d21}, [r3]
   111ec:	add	r1, r6, #32
   111f0:	vldr	d22, [r0]
   111f4:	add	r0, r6, #16
   111f8:	vst1.64	{d16-d17}, [r1]
   111fc:	movw	r1, #23285	; 0x5af5
   11200:	vst1.64	{d20-d21}, [r0]
   11204:	mov	r0, r6
   11208:	vst1.64	{d18-d19}, [r0], r2
   1120c:	movt	r1, #1
   11210:	vstr	d22, [r0]
   11214:	mov	r0, r5
   11218:	bl	10de0 <strcmp@plt>
   1121c:	cmp	r0, #0
   11220:	ldrne	r1, [r6, #8]!
   11224:	cmpne	r1, #0
   11228:	bne	11214 <__assert_fail@plt+0x20c>
   1122c:	ldr	r6, [r6, #4]
   11230:	movw	r1, #23380	; 0x5b54
   11234:	mov	r0, #0
   11238:	mov	r2, #5
   1123c:	movt	r1, #1
   11240:	bl	10e4c <dcgettext@plt>
   11244:	movw	r2, #23216	; 0x5ab0
   11248:	movw	r3, #23403	; 0x5b6b
   1124c:	mov	r1, r0
   11250:	mov	r0, #1
   11254:	movt	r2, #1
   11258:	movt	r3, #1
   1125c:	bl	10f78 <__printf_chk@plt>
   11260:	cmp	r6, #0
   11264:	mov	r0, #5
   11268:	mov	r1, #0
   1126c:	moveq	r6, r5
   11270:	bl	10fb4 <setlocale@plt>
   11274:	cmp	r0, #0
   11278:	beq	112b0 <__assert_fail@plt+0x2a8>
   1127c:	movw	r1, #23443	; 0x5b93
   11280:	mov	r2, #3
   11284:	movt	r1, #1
   11288:	bl	10ff0 <strncmp@plt>
   1128c:	cmp	r0, #0
   11290:	beq	112b0 <__assert_fail@plt+0x2a8>
   11294:	movw	r1, #23447	; 0x5b97
   11298:	mov	r0, #0
   1129c:	mov	r2, #5
   112a0:	movt	r1, #1
   112a4:	bl	10e4c <dcgettext@plt>
   112a8:	ldr	r1, [r7]
   112ac:	bl	10dc8 <fputs_unlocked@plt>
   112b0:	movw	r1, #23518	; 0x5bde
   112b4:	mov	r0, #0
   112b8:	mov	r2, #5
   112bc:	movt	r1, #1
   112c0:	bl	10e4c <dcgettext@plt>
   112c4:	movw	r2, #23403	; 0x5b6b
   112c8:	mov	r1, r0
   112cc:	mov	r0, #1
   112d0:	mov	r3, r5
   112d4:	movt	r2, #1
   112d8:	bl	10f78 <__printf_chk@plt>
   112dc:	movw	r1, #23545	; 0x5bf9
   112e0:	mov	r0, #0
   112e4:	mov	r2, #5
   112e8:	movt	r1, #1
   112ec:	bl	10e4c <dcgettext@plt>
   112f0:	movw	r3, #22969	; 0x59b9
   112f4:	mov	r1, r0
   112f8:	movw	r0, #23313	; 0x5b11
   112fc:	cmp	r6, r5
   11300:	mov	r2, r6
   11304:	movt	r0, #1
   11308:	movt	r3, #1
   1130c:	moveq	r3, r0
   11310:	mov	r0, #1
   11314:	bl	10f78 <__printf_chk@plt>
   11318:	mov	r0, r4
   1131c:	bl	10f24 <exit@plt>
   11320:	movw	r0, #28984	; 0x7138
   11324:	movw	r1, #22780	; 0x58fc
   11328:	mov	r2, #5
   1132c:	movt	r0, #2
   11330:	movt	r1, #1
   11334:	ldr	r5, [r0]
   11338:	mov	r0, #0
   1133c:	bl	10e4c <dcgettext@plt>
   11340:	mov	r2, r0
   11344:	movw	r0, #29008	; 0x7150
   11348:	mov	r1, #1
   1134c:	movt	r0, #2
   11350:	ldr	r3, [r0]
   11354:	mov	r0, r5
   11358:	bl	10f90 <__fprintf_chk@plt>
   1135c:	mov	r0, r4
   11360:	bl	10f24 <exit@plt>
   11364:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11368:	add	fp, sp, #28
   1136c:	sub	sp, sp, #20
   11370:	mov	r5, r0
   11374:	ldr	r0, [r1]
   11378:	mov	r4, r1
   1137c:	bl	1184c <__assert_fail@plt+0x844>
   11380:	movw	sl, #22969	; 0x59b9
   11384:	mov	r0, #6
   11388:	movt	sl, #1
   1138c:	mov	r1, sl
   11390:	bl	10fb4 <setlocale@plt>
   11394:	movw	r6, #23220	; 0x5ab4
   11398:	movw	r1, #23192	; 0x5a98
   1139c:	movt	r6, #1
   113a0:	movt	r1, #1
   113a4:	mov	r0, r6
   113a8:	bl	10fe4 <bindtextdomain@plt>
   113ac:	mov	r0, r6
   113b0:	bl	10e70 <textdomain@plt>
   113b4:	movw	r0, #5496	; 0x1578
   113b8:	movt	r0, #1
   113bc:	bl	158d4 <__assert_fail@plt+0x48cc>
   113c0:	movw	r8, #23624	; 0x5c48
   113c4:	mov	r7, #2
   113c8:	mov	r6, #0
   113cc:	movt	r8, #1
   113d0:	b	11424 <__assert_fail@plt+0x41c>
   113d4:	movw	r0, #28992	; 0x7140
   113d8:	movw	r1, #23248	; 0x5ad0
   113dc:	mov	r2, #5
   113e0:	movt	r0, #2
   113e4:	movt	r1, #1
   113e8:	ldr	r6, [r0]
   113ec:	mov	r0, #0
   113f0:	bl	10e4c <dcgettext@plt>
   113f4:	mvn	r1, #0
   113f8:	mov	r2, #0
   113fc:	mov	r3, #0
   11400:	str	r1, [sp]
   11404:	mov	r1, #0
   11408:	stmib	sp, {r1, sl}
   1140c:	str	r0, [sp, #12]
   11410:	mov	r0, r6
   11414:	str	r1, [sp, #16]
   11418:	bl	14538 <__assert_fail@plt+0x3530>
   1141c:	mov	r6, r0
   11420:	mov	r7, r9
   11424:	mov	r9, r7
   11428:	mov	r7, #0
   1142c:	mov	r0, r5
   11430:	mov	r1, r4
   11434:	mov	r2, sl
   11438:	mov	r3, r8
   1143c:	str	r7, [sp]
   11440:	bl	10f0c <getopt_long@plt>
   11444:	cmp	r0, #255	; 0xff
   11448:	ble	11464 <__assert_fail@plt+0x45c>
   1144c:	cmp	r0, #256	; 0x100
   11450:	beq	11424 <__assert_fail@plt+0x41c>
   11454:	movw	r1, #257	; 0x101
   11458:	cmp	r0, r1
   1145c:	beq	113d4 <__assert_fail@plt+0x3cc>
   11460:	b	11550 <__assert_fail@plt+0x548>
   11464:	cmn	r0, #1
   11468:	bne	114b0 <__assert_fail@plt+0x4a8>
   1146c:	movw	r7, #28976	; 0x7130
   11470:	movt	r7, #2
   11474:	ldr	r0, [r7]
   11478:	cmp	r0, r5
   1147c:	bne	11510 <__assert_fail@plt+0x508>
   11480:	mov	r0, r9
   11484:	bl	11664 <__assert_fail@plt+0x65c>
   11488:	movw	r1, #23280	; 0x5af0
   1148c:	subs	r2, r0, r6
   11490:	mov	r0, #1
   11494:	movls	r2, r0
   11498:	movt	r1, #1
   1149c:	mov	r0, #1
   114a0:	bl	10f78 <__printf_chk@plt>
   114a4:	mov	r0, #0
   114a8:	sub	sp, fp, #28
   114ac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   114b0:	cmn	r0, #3
   114b4:	bne	11500 <__assert_fail@plt+0x4f8>
   114b8:	movw	r0, #28896	; 0x70e0
   114bc:	movw	r2, #23230	; 0x5abe
   114c0:	mov	r1, #0
   114c4:	movt	r0, #2
   114c8:	movt	r2, #1
   114cc:	str	r1, [sp, #4]
   114d0:	movw	r1, #23186	; 0x5a92
   114d4:	ldr	r3, [r0]
   114d8:	movw	r0, #28988	; 0x713c
   114dc:	str	r2, [sp]
   114e0:	movw	r2, #23216	; 0x5ab0
   114e4:	movt	r1, #1
   114e8:	movt	r0, #2
   114ec:	movt	r2, #1
   114f0:	ldr	r0, [r0]
   114f4:	bl	13c6c <__assert_fail@plt+0x2c64>
   114f8:	mov	r0, #0
   114fc:	bl	10f24 <exit@plt>
   11500:	cmn	r0, #2
   11504:	bne	11550 <__assert_fail@plt+0x548>
   11508:	mov	r0, #0
   1150c:	bl	11104 <__assert_fail@plt+0xfc>
   11510:	movw	r1, #23263	; 0x5adf
   11514:	mov	r0, #0
   11518:	mov	r2, #5
   1151c:	movt	r1, #1
   11520:	bl	10e4c <dcgettext@plt>
   11524:	mov	r5, r0
   11528:	ldr	r0, [r7]
   1152c:	ldr	r0, [r4, r0, lsl #2]
   11530:	bl	137c8 <__assert_fail@plt+0x27c0>
   11534:	mov	r3, r0
   11538:	mov	r0, #0
   1153c:	mov	r1, #0
   11540:	mov	r2, r5
   11544:	bl	10ec4 <error@plt>
   11548:	mov	r0, #1
   1154c:	bl	11104 <__assert_fail@plt+0xfc>
   11550:	mov	r0, #1
   11554:	bl	11104 <__assert_fail@plt+0xfc>
   11558:	movw	r1, #29000	; 0x7148
   1155c:	movt	r1, #2
   11560:	str	r0, [r1, #4]
   11564:	bx	lr
   11568:	movw	r1, #29000	; 0x7148
   1156c:	movt	r1, #2
   11570:	strb	r0, [r1]
   11574:	bx	lr
   11578:	push	{r4, r5, r6, sl, fp, lr}
   1157c:	add	fp, sp, #16
   11580:	sub	sp, sp, #8
   11584:	movw	r0, #28988	; 0x713c
   11588:	movt	r0, #2
   1158c:	ldr	r0, [r0]
   11590:	bl	152cc <__assert_fail@plt+0x42c4>
   11594:	cmp	r0, #0
   11598:	beq	115c0 <__assert_fail@plt+0x5b8>
   1159c:	movw	r5, #29000	; 0x7148
   115a0:	movt	r5, #2
   115a4:	ldrb	r0, [r5]
   115a8:	cmp	r0, #0
   115ac:	beq	115ec <__assert_fail@plt+0x5e4>
   115b0:	bl	10f54 <__errno_location@plt>
   115b4:	ldr	r0, [r0]
   115b8:	cmp	r0, #32
   115bc:	bne	115ec <__assert_fail@plt+0x5e4>
   115c0:	movw	r0, #28984	; 0x7138
   115c4:	movt	r0, #2
   115c8:	ldr	r0, [r0]
   115cc:	bl	152cc <__assert_fail@plt+0x42c4>
   115d0:	cmp	r0, #0
   115d4:	subeq	sp, fp, #16
   115d8:	popeq	{r4, r5, r6, sl, fp, pc}
   115dc:	movw	r0, #28900	; 0x70e4
   115e0:	movt	r0, #2
   115e4:	ldr	r0, [r0]
   115e8:	bl	10e04 <_exit@plt>
   115ec:	movw	r1, #23775	; 0x5cdf
   115f0:	mov	r0, #0
   115f4:	mov	r2, #5
   115f8:	movt	r1, #1
   115fc:	bl	10e4c <dcgettext@plt>
   11600:	ldr	r6, [r5, #4]
   11604:	mov	r4, r0
   11608:	bl	10f54 <__errno_location@plt>
   1160c:	ldr	r5, [r0]
   11610:	cmp	r6, #0
   11614:	bne	11630 <__assert_fail@plt+0x628>
   11618:	movw	r2, #23791	; 0x5cef
   1161c:	mov	r0, #0
   11620:	mov	r1, r5
   11624:	mov	r3, r4
   11628:	movt	r2, #1
   1162c:	b	11650 <__assert_fail@plt+0x648>
   11630:	mov	r0, r6
   11634:	bl	13440 <__assert_fail@plt+0x2438>
   11638:	movw	r2, #23787	; 0x5ceb
   1163c:	mov	r3, r0
   11640:	str	r4, [sp]
   11644:	mov	r0, #0
   11648:	mov	r1, r5
   1164c:	movt	r2, #1
   11650:	bl	10ec4 <error@plt>
   11654:	movw	r0, #28900	; 0x70e4
   11658:	movt	r0, #2
   1165c:	ldr	r0, [r0]
   11660:	bl	10e04 <_exit@plt>
   11664:	push	{r4, r5, fp, lr}
   11668:	add	fp, sp, #8
   1166c:	sub	sp, sp, #128	; 0x80
   11670:	mvn	r4, #0
   11674:	cmp	r0, #2
   11678:	bne	116d4 <__assert_fail@plt+0x6cc>
   1167c:	movw	r0, #23794	; 0x5cf2
   11680:	movt	r0, #1
   11684:	bl	10ed0 <getenv@plt>
   11688:	bl	1179c <__assert_fail@plt+0x794>
   1168c:	mov	r5, r0
   11690:	movw	r0, #23810	; 0x5d02
   11694:	movt	r0, #1
   11698:	bl	10ed0 <getenv@plt>
   1169c:	bl	1179c <__assert_fail@plt+0x794>
   116a0:	mov	r1, r0
   116a4:	cmp	r0, #0
   116a8:	mvneq	r1, #0
   116ac:	cmp	r5, r1
   116b0:	mov	r4, r1
   116b4:	movcc	r4, r5
   116b8:	cmp	r5, #0
   116bc:	beq	116cc <__assert_fail@plt+0x6c4>
   116c0:	mov	r0, r4
   116c4:	sub	sp, fp, #8
   116c8:	pop	{r4, r5, fp, pc}
   116cc:	mov	r0, #1
   116d0:	mov	r4, r1
   116d4:	cmp	r0, #1
   116d8:	bne	1170c <__assert_fail@plt+0x704>
   116dc:	mov	r2, sp
   116e0:	mov	r0, #0
   116e4:	mov	r1, #128	; 0x80
   116e8:	bl	10fd8 <sched_getaffinity@plt>
   116ec:	cmp	r0, #0
   116f0:	beq	11770 <__assert_fail@plt+0x768>
   116f4:	mov	r0, #84	; 0x54
   116f8:	bl	10e58 <sysconf@plt>
   116fc:	mov	r5, r0
   11700:	cmp	r0, #0
   11704:	movle	r5, #1
   11708:	b	11788 <__assert_fail@plt+0x780>
   1170c:	mov	r0, #83	; 0x53
   11710:	bl	10e58 <sysconf@plt>
   11714:	mov	r5, r0
   11718:	sub	r0, r0, #1
   1171c:	cmp	r0, #1
   11720:	bhi	11758 <__assert_fail@plt+0x750>
   11724:	mov	r2, sp
   11728:	mov	r0, #0
   1172c:	mov	r1, #128	; 0x80
   11730:	bl	10fd8 <sched_getaffinity@plt>
   11734:	cmp	r0, #0
   11738:	bne	11788 <__assert_fail@plt+0x780>
   1173c:	mov	r1, sp
   11740:	mov	r0, #128	; 0x80
   11744:	bl	10e34 <__sched_cpucount@plt>
   11748:	cmp	r0, #0
   1174c:	cmpne	r0, r5
   11750:	bls	11788 <__assert_fail@plt+0x780>
   11754:	b	1175c <__assert_fail@plt+0x754>
   11758:	mov	r0, r5
   1175c:	cmp	r0, #0
   11760:	mov	r5, r0
   11764:	bgt	11788 <__assert_fail@plt+0x780>
   11768:	mov	r5, #1
   1176c:	b	11788 <__assert_fail@plt+0x780>
   11770:	mov	r1, sp
   11774:	mov	r0, #128	; 0x80
   11778:	bl	10e34 <__sched_cpucount@plt>
   1177c:	cmp	r0, #0
   11780:	beq	116f4 <__assert_fail@plt+0x6ec>
   11784:	mov	r5, r0
   11788:	cmp	r5, r4
   1178c:	movcc	r4, r5
   11790:	mov	r0, r4
   11794:	sub	sp, fp, #8
   11798:	pop	{r4, r5, fp, pc}
   1179c:	push	{fp, lr}
   117a0:	mov	fp, sp
   117a4:	sub	sp, sp, #8
   117a8:	mov	r2, r0
   117ac:	mov	r0, #0
   117b0:	cmp	r2, #0
   117b4:	bne	117c0 <__assert_fail@plt+0x7b8>
   117b8:	b	11834 <__assert_fail@plt+0x82c>
   117bc:	add	r2, r2, #1
   117c0:	ldrb	r1, [r2]
   117c4:	sub	r3, r1, #9
   117c8:	cmp	r3, #5
   117cc:	bcc	117bc <__assert_fail@plt+0x7b4>
   117d0:	cmp	r1, #32
   117d4:	beq	117bc <__assert_fail@plt+0x7b4>
   117d8:	sub	r1, r1, #48	; 0x30
   117dc:	cmp	r1, #9
   117e0:	bhi	11834 <__assert_fail@plt+0x82c>
   117e4:	mov	r0, #0
   117e8:	add	r1, sp, #4
   117ec:	str	r0, [sp, #4]
   117f0:	mov	r0, r2
   117f4:	mov	r2, #10
   117f8:	bl	10f30 <strtoul@plt>
   117fc:	ldr	r1, [sp, #4]
   11800:	cmp	r1, #0
   11804:	bne	11810 <__assert_fail@plt+0x808>
   11808:	b	11840 <__assert_fail@plt+0x838>
   1180c:	add	r1, r1, #1
   11810:	ldrb	r2, [r1]
   11814:	sub	r3, r2, #9
   11818:	cmp	r3, #5
   1181c:	bcc	1180c <__assert_fail@plt+0x804>
   11820:	cmp	r2, #32
   11824:	beq	1180c <__assert_fail@plt+0x804>
   11828:	cmp	r2, #0
   1182c:	cmpne	r2, #44	; 0x2c
   11830:	bne	1183c <__assert_fail@plt+0x834>
   11834:	mov	sp, fp
   11838:	pop	{fp, pc}
   1183c:	str	r1, [sp, #4]
   11840:	mov	r0, #0
   11844:	mov	sp, fp
   11848:	pop	{fp, pc}
   1184c:	push	{r4, r5, fp, lr}
   11850:	add	fp, sp, #8
   11854:	cmp	r0, #0
   11858:	beq	118ec <__assert_fail@plt+0x8e4>
   1185c:	mov	r1, #47	; 0x2f
   11860:	mov	r4, r0
   11864:	bl	10fc0 <strrchr@plt>
   11868:	cmp	r0, #0
   1186c:	mov	r5, r4
   11870:	addne	r5, r0, #1
   11874:	sub	r0, r5, r4
   11878:	cmp	r0, #7
   1187c:	blt	118d0 <__assert_fail@plt+0x8c8>
   11880:	movw	r1, #23883	; 0x5d4b
   11884:	sub	r0, r5, #7
   11888:	mov	r2, #7
   1188c:	movt	r1, #1
   11890:	bl	10ff0 <strncmp@plt>
   11894:	cmp	r0, #0
   11898:	bne	118d0 <__assert_fail@plt+0x8c8>
   1189c:	movw	r1, #23891	; 0x5d53
   118a0:	mov	r0, r5
   118a4:	mov	r2, #3
   118a8:	movt	r1, #1
   118ac:	bl	10ff0 <strncmp@plt>
   118b0:	cmp	r0, #0
   118b4:	beq	118c0 <__assert_fail@plt+0x8b8>
   118b8:	mov	r4, r5
   118bc:	b	118d0 <__assert_fail@plt+0x8c8>
   118c0:	movw	r0, #28968	; 0x7128
   118c4:	add	r4, r5, #3
   118c8:	movt	r0, #2
   118cc:	str	r4, [r0]
   118d0:	movw	r0, #28972	; 0x712c
   118d4:	movt	r0, #2
   118d8:	str	r4, [r0]
   118dc:	movw	r0, #29008	; 0x7150
   118e0:	movt	r0, #2
   118e4:	str	r4, [r0]
   118e8:	pop	{r4, r5, fp, pc}
   118ec:	movw	r0, #28984	; 0x7138
   118f0:	mov	r1, #55	; 0x37
   118f4:	mov	r2, #1
   118f8:	movt	r0, #2
   118fc:	ldr	r3, [r0]
   11900:	movw	r0, #23827	; 0x5d13
   11904:	movt	r0, #1
   11908:	bl	10e88 <fwrite@plt>
   1190c:	bl	10ffc <abort@plt>
   11910:	push	{r4, r5, r6, sl, fp, lr}
   11914:	add	fp, sp, #16
   11918:	mov	r4, r0
   1191c:	movw	r0, #29016	; 0x7158
   11920:	movt	r0, #2
   11924:	cmp	r4, #0
   11928:	moveq	r4, r0
   1192c:	bl	10f54 <__errno_location@plt>
   11930:	ldr	r6, [r0]
   11934:	mov	r5, r0
   11938:	mov	r0, r4
   1193c:	mov	r1, #48	; 0x30
   11940:	bl	14300 <__assert_fail@plt+0x32f8>
   11944:	str	r6, [r5]
   11948:	pop	{r4, r5, r6, sl, fp, pc}
   1194c:	movw	r1, #29016	; 0x7158
   11950:	cmp	r0, #0
   11954:	movt	r1, #2
   11958:	movne	r1, r0
   1195c:	ldr	r0, [r1]
   11960:	bx	lr
   11964:	movw	r2, #29016	; 0x7158
   11968:	cmp	r0, #0
   1196c:	movt	r2, #2
   11970:	movne	r2, r0
   11974:	str	r1, [r2]
   11978:	bx	lr
   1197c:	movw	r3, #29016	; 0x7158
   11980:	cmp	r0, #0
   11984:	movt	r3, #2
   11988:	movne	r3, r0
   1198c:	ubfx	r0, r1, #5, #3
   11990:	and	r1, r1, #31
   11994:	add	r0, r3, r0, lsl #2
   11998:	ldr	r3, [r0, #8]
   1199c:	eor	r2, r2, r3, lsr r1
   119a0:	and	r2, r2, #1
   119a4:	eor	r2, r3, r2, lsl r1
   119a8:	str	r2, [r0, #8]
   119ac:	mov	r0, #1
   119b0:	and	r0, r0, r3, lsr r1
   119b4:	bx	lr
   119b8:	movw	r2, #29016	; 0x7158
   119bc:	cmp	r0, #0
   119c0:	movt	r2, #2
   119c4:	movne	r2, r0
   119c8:	ldr	r0, [r2, #4]
   119cc:	str	r1, [r2, #4]
   119d0:	bx	lr
   119d4:	movw	r3, #29016	; 0x7158
   119d8:	cmp	r0, #0
   119dc:	movt	r3, #2
   119e0:	movne	r3, r0
   119e4:	cmp	r1, #0
   119e8:	mov	r0, #10
   119ec:	cmpne	r2, #0
   119f0:	str	r0, [r3]
   119f4:	bne	11a04 <__assert_fail@plt+0x9fc>
   119f8:	push	{fp, lr}
   119fc:	mov	fp, sp
   11a00:	bl	10ffc <abort@plt>
   11a04:	str	r1, [r3, #40]	; 0x28
   11a08:	str	r2, [r3, #44]	; 0x2c
   11a0c:	bx	lr
   11a10:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11a14:	add	fp, sp, #28
   11a18:	sub	sp, sp, #20
   11a1c:	mov	r7, r0
   11a20:	ldr	r0, [fp, #8]
   11a24:	movw	r5, #29016	; 0x7158
   11a28:	mov	r8, r3
   11a2c:	mov	r9, r2
   11a30:	mov	sl, r1
   11a34:	movt	r5, #2
   11a38:	cmp	r0, #0
   11a3c:	movne	r5, r0
   11a40:	bl	10f54 <__errno_location@plt>
   11a44:	mov	r4, r0
   11a48:	ldm	r5, {r0, r1}
   11a4c:	ldr	r2, [r5, #40]	; 0x28
   11a50:	ldr	r3, [r5, #44]	; 0x2c
   11a54:	add	r5, r5, #8
   11a58:	ldr	r6, [r4]
   11a5c:	stm	sp, {r0, r1, r5}
   11a60:	str	r2, [sp, #12]
   11a64:	str	r3, [sp, #16]
   11a68:	mov	r0, r7
   11a6c:	mov	r1, sl
   11a70:	mov	r2, r9
   11a74:	mov	r3, r8
   11a78:	bl	11a88 <__assert_fail@plt+0xa80>
   11a7c:	str	r6, [r4]
   11a80:	sub	sp, fp, #28
   11a84:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11a88:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11a8c:	add	fp, sp, #28
   11a90:	sub	sp, sp, #156	; 0x9c
   11a94:	str	r0, [sp, #76]	; 0x4c
   11a98:	ldr	r0, [fp, #12]
   11a9c:	mov	r6, r1
   11aa0:	str	r3, [sp, #84]	; 0x54
   11aa4:	str	r2, [fp, #-84]	; 0xffffffac
   11aa8:	and	r1, r0, #4
   11aac:	str	r1, [sp, #24]
   11ab0:	and	r1, r0, #1
   11ab4:	str	r1, [sp, #28]
   11ab8:	ubfx	r8, r0, #1, #1
   11abc:	bl	10ea0 <__ctype_get_mb_cur_max@plt>
   11ac0:	str	r0, [sp, #32]
   11ac4:	ldr	r0, [fp, #24]
   11ac8:	ldr	r7, [fp, #8]
   11acc:	mov	r1, #0
   11ad0:	mov	r2, #0
   11ad4:	mov	r4, #1
   11ad8:	str	r1, [sp, #52]	; 0x34
   11adc:	str	r0, [sp, #72]	; 0x48
   11ae0:	ldr	r0, [fp, #20]
   11ae4:	str	r0, [sp, #68]	; 0x44
   11ae8:	mov	r0, #0
   11aec:	str	r0, [sp, #48]	; 0x30
   11af0:	mov	r0, #0
   11af4:	str	r0, [sp, #92]	; 0x5c
   11af8:	mov	r0, #0
   11afc:	str	r0, [fp, #-76]	; 0xffffffb4
   11b00:	mov	r0, #0
   11b04:	cmp	r7, #10
   11b08:	bhi	12df0 <__assert_fail@plt+0x1de8>
   11b0c:	add	r1, pc, #28
   11b10:	mov	sl, r6
   11b14:	ldr	r6, [sp, #76]	; 0x4c
   11b18:	ldr	ip, [fp, #-84]	; 0xffffffac
   11b1c:	ldr	lr, [sp, #84]	; 0x54
   11b20:	mov	r9, #0
   11b24:	mov	r3, #1
   11b28:	mov	r5, #0
   11b2c:	ldr	pc, [r1, r7, lsl #2]
   11b30:	andeq	r1, r1, r0, lsl #24
   11b34:	andeq	r1, r1, ip, lsr ip
   11b38:	andeq	r1, r1, r0, lsl ip
   11b3c:	strdeq	r1, [r1], -r8
   11b40:	andeq	r1, r1, r0, lsr ip
   11b44:	andeq	r1, r1, r4, ror #24
   11b48:	andeq	r1, r1, r0, lsr #24
   11b4c:	andeq	r1, r1, r0, ror lr
   11b50:	andeq	r1, r1, ip, asr fp
   11b54:	andeq	r1, r1, ip, asr fp
   11b58:	andeq	r1, r1, r4, lsl #28
   11b5c:	mov	r9, r4
   11b60:	movw	r4, #23973	; 0x5da5
   11b64:	mov	r5, r8
   11b68:	mov	r8, r2
   11b6c:	mov	r0, #0
   11b70:	mov	r2, #5
   11b74:	movt	r4, #1
   11b78:	mov	r1, r4
   11b7c:	bl	10e4c <dcgettext@plt>
   11b80:	cmp	r0, r4
   11b84:	str	r0, [sp, #68]	; 0x44
   11b88:	bne	11d18 <__assert_fail@plt+0xd10>
   11b8c:	bl	15520 <__assert_fail@plt+0x4518>
   11b90:	ldrb	r1, [r0]
   11b94:	and	r1, r1, #223	; 0xdf
   11b98:	cmp	r1, #71	; 0x47
   11b9c:	beq	11ce4 <__assert_fail@plt+0xcdc>
   11ba0:	cmp	r1, #85	; 0x55
   11ba4:	bne	11cfc <__assert_fail@plt+0xcf4>
   11ba8:	ldrb	r1, [r0, #1]
   11bac:	and	r1, r1, #223	; 0xdf
   11bb0:	cmp	r1, #84	; 0x54
   11bb4:	bne	11cfc <__assert_fail@plt+0xcf4>
   11bb8:	ldrb	r1, [r0, #2]
   11bbc:	and	r1, r1, #223	; 0xdf
   11bc0:	cmp	r1, #70	; 0x46
   11bc4:	bne	11cfc <__assert_fail@plt+0xcf4>
   11bc8:	ldrb	r1, [r0, #3]
   11bcc:	cmp	r1, #45	; 0x2d
   11bd0:	ldrbeq	r1, [r0, #4]
   11bd4:	cmpeq	r1, #56	; 0x38
   11bd8:	bne	11cfc <__assert_fail@plt+0xcf4>
   11bdc:	ldrb	r0, [r0, #5]
   11be0:	cmp	r0, #0
   11be4:	movw	r0, #23977	; 0x5da9
   11be8:	movt	r0, #1
   11bec:	str	r0, [sp, #68]	; 0x44
   11bf0:	bne	11cfc <__assert_fail@plt+0xcf4>
   11bf4:	b	11d18 <__assert_fail@plt+0xd10>
   11bf8:	mov	r0, #1
   11bfc:	b	11c3c <__assert_fail@plt+0xc34>
   11c00:	mov	r7, #0
   11c04:	mov	r9, #0
   11c08:	mov	r3, r0
   11c0c:	b	11cdc <__assert_fail@plt+0xcd4>
   11c10:	tst	r8, #1
   11c14:	bne	11c3c <__assert_fail@plt+0xc34>
   11c18:	mov	r3, r0
   11c1c:	b	11c94 <__assert_fail@plt+0xc8c>
   11c20:	mov	r0, #1
   11c24:	mov	r9, #0
   11c28:	mov	r7, #5
   11c2c:	b	11c78 <__assert_fail@plt+0xc70>
   11c30:	mov	r3, #1
   11c34:	tst	r8, #1
   11c38:	beq	11c94 <__assert_fail@plt+0xc8c>
   11c3c:	mov	r1, #1
   11c40:	mov	r9, #0
   11c44:	mov	r7, #2
   11c48:	mov	r3, r0
   11c4c:	mov	r5, #1
   11c50:	str	r1, [fp, #-76]	; 0xffffffb4
   11c54:	movw	r1, #23975	; 0x5da7
   11c58:	movt	r1, #1
   11c5c:	str	r1, [sp, #92]	; 0x5c
   11c60:	b	11e70 <__assert_fail@plt+0xe68>
   11c64:	mov	r7, #5
   11c68:	tst	r8, #1
   11c6c:	beq	11cb4 <__assert_fail@plt+0xcac>
   11c70:	mov	r0, #1
   11c74:	mov	r9, #0
   11c78:	str	r0, [fp, #-76]	; 0xffffffb4
   11c7c:	movw	r0, #23971	; 0x5da3
   11c80:	mov	r3, #1
   11c84:	mov	r5, #1
   11c88:	movt	r0, #1
   11c8c:	str	r0, [sp, #92]	; 0x5c
   11c90:	b	11e70 <__assert_fail@plt+0xe68>
   11c94:	cmp	sl, #0
   11c98:	mov	r9, #1
   11c9c:	mov	r7, #2
   11ca0:	movne	r0, #39	; 0x27
   11ca4:	strbne	r0, [r6]
   11ca8:	movw	r0, #23975	; 0x5da7
   11cac:	movt	r0, #1
   11cb0:	b	11cd0 <__assert_fail@plt+0xcc8>
   11cb4:	cmp	sl, #0
   11cb8:	mov	r9, #1
   11cbc:	mov	r3, #1
   11cc0:	movne	r0, #34	; 0x22
   11cc4:	strbne	r0, [r6]
   11cc8:	movw	r0, #23971	; 0x5da3
   11ccc:	movt	r0, #1
   11cd0:	str	r0, [sp, #92]	; 0x5c
   11cd4:	mov	r0, #1
   11cd8:	str	r0, [fp, #-76]	; 0xffffffb4
   11cdc:	mov	r5, #0
   11ce0:	b	11e70 <__assert_fail@plt+0xe68>
   11ce4:	ldrb	r1, [r0, #1]
   11ce8:	and	r1, r1, #223	; 0xdf
   11cec:	cmp	r1, #66	; 0x42
   11cf0:	ldrbeq	r1, [r0, #2]
   11cf4:	cmpeq	r1, #49	; 0x31
   11cf8:	beq	12c18 <__assert_fail@plt+0x1c10>
   11cfc:	movw	r0, #23975	; 0x5da7
   11d00:	movw	r1, #23971	; 0x5da3
   11d04:	cmp	r7, #9
   11d08:	movt	r0, #1
   11d0c:	movt	r1, #1
   11d10:	moveq	r0, r1
   11d14:	str	r0, [sp, #68]	; 0x44
   11d18:	movw	r4, #23975	; 0x5da7
   11d1c:	mov	r0, #0
   11d20:	mov	r2, #5
   11d24:	movt	r4, #1
   11d28:	mov	r1, r4
   11d2c:	bl	10e4c <dcgettext@plt>
   11d30:	cmp	r0, r4
   11d34:	str	r0, [sp, #72]	; 0x48
   11d38:	beq	11d48 <__assert_fail@plt+0xd40>
   11d3c:	mov	r4, r9
   11d40:	mov	r2, r8
   11d44:	b	11e00 <__assert_fail@plt+0xdf8>
   11d48:	bl	15520 <__assert_fail@plt+0x4518>
   11d4c:	ldrb	r1, [r0]
   11d50:	mov	r4, r9
   11d54:	and	r1, r1, #223	; 0xdf
   11d58:	cmp	r1, #71	; 0x47
   11d5c:	beq	11db8 <__assert_fail@plt+0xdb0>
   11d60:	cmp	r1, #85	; 0x55
   11d64:	mov	r2, r8
   11d68:	bne	11de0 <__assert_fail@plt+0xdd8>
   11d6c:	ldrb	r1, [r0, #1]
   11d70:	and	r1, r1, #223	; 0xdf
   11d74:	cmp	r1, #84	; 0x54
   11d78:	bne	11de0 <__assert_fail@plt+0xdd8>
   11d7c:	ldrb	r1, [r0, #2]
   11d80:	and	r1, r1, #223	; 0xdf
   11d84:	cmp	r1, #70	; 0x46
   11d88:	ldrbeq	r1, [r0, #3]
   11d8c:	cmpeq	r1, #45	; 0x2d
   11d90:	bne	11de0 <__assert_fail@plt+0xdd8>
   11d94:	ldrb	r1, [r0, #4]
   11d98:	cmp	r1, #56	; 0x38
   11d9c:	ldrbeq	r0, [r0, #5]
   11da0:	cmpeq	r0, #0
   11da4:	bne	11de0 <__assert_fail@plt+0xdd8>
   11da8:	movw	r0, #23981	; 0x5dad
   11dac:	movt	r0, #1
   11db0:	str	r0, [sp, #72]	; 0x48
   11db4:	b	11e00 <__assert_fail@plt+0xdf8>
   11db8:	ldrb	r1, [r0, #1]
   11dbc:	mov	r2, r8
   11dc0:	and	r1, r1, #223	; 0xdf
   11dc4:	cmp	r1, #66	; 0x42
   11dc8:	bne	11de0 <__assert_fail@plt+0xdd8>
   11dcc:	ldrb	r1, [r0, #2]
   11dd0:	cmp	r1, #49	; 0x31
   11dd4:	ldrbeq	r1, [r0, #3]
   11dd8:	cmpeq	r1, #56	; 0x38
   11ddc:	beq	12c5c <__assert_fail@plt+0x1c54>
   11de0:	movw	r0, #23975	; 0x5da7
   11de4:	cmp	r7, #9
   11de8:	movt	r0, #1
   11dec:	mov	r1, r0
   11df0:	movw	r0, #23971	; 0x5da3
   11df4:	movt	r0, #1
   11df8:	moveq	r1, r0
   11dfc:	str	r1, [sp, #72]	; 0x48
   11e00:	mov	r8, r5
   11e04:	mov	r9, #0
   11e08:	tst	r8, #1
   11e0c:	mov	r5, r8
   11e10:	str	r2, [fp, #-48]	; 0xffffffd0
   11e14:	bne	11e4c <__assert_fail@plt+0xe44>
   11e18:	ldr	r0, [sp, #68]	; 0x44
   11e1c:	ldrb	r0, [r0]
   11e20:	cmp	r0, #0
   11e24:	beq	11e4c <__assert_fail@plt+0xe44>
   11e28:	ldr	r1, [sp, #68]	; 0x44
   11e2c:	mov	r9, #0
   11e30:	add	r1, r1, #1
   11e34:	cmp	r9, sl
   11e38:	strbcc	r0, [r6, r9]
   11e3c:	ldrb	r0, [r1, r9]
   11e40:	add	r9, r9, #1
   11e44:	cmp	r0, #0
   11e48:	bne	11e34 <__assert_fail@plt+0xe2c>
   11e4c:	ldr	r8, [sp, #72]	; 0x48
   11e50:	mov	r0, r8
   11e54:	bl	10f3c <strlen@plt>
   11e58:	ldr	ip, [fp, #-84]	; 0xffffffac
   11e5c:	ldr	lr, [sp, #84]	; 0x54
   11e60:	ldr	r2, [fp, #-48]	; 0xffffffd0
   11e64:	str	r0, [fp, #-76]	; 0xffffffb4
   11e68:	str	r8, [sp, #92]	; 0x5c
   11e6c:	mov	r3, #1
   11e70:	ldr	r0, [fp, #16]
   11e74:	str	r7, [fp, #-64]	; 0xffffffc0
   11e78:	str	r5, [fp, #-72]	; 0xffffffb8
   11e7c:	str	r3, [sp, #80]	; 0x50
   11e80:	cmp	r0, #0
   11e84:	movwne	r0, #1
   11e88:	and	r0, r0, r5
   11e8c:	str	r0, [fp, #-88]	; 0xffffffa8
   11e90:	ldr	r0, [fp, #-76]	; 0xffffffb4
   11e94:	cmp	r0, #0
   11e98:	movwne	r0, #1
   11e9c:	subs	r7, r7, #2
   11ea0:	and	r1, r0, r5
   11ea4:	str	r7, [fp, #-80]	; 0xffffffb0
   11ea8:	and	r1, r3, r1
   11eac:	str	r1, [sp, #40]	; 0x28
   11eb0:	clz	r1, r7
   11eb4:	lsr	r1, r1, #5
   11eb8:	and	r1, r1, r5
   11ebc:	eor	r5, r5, #1
   11ec0:	str	r1, [sp, #36]	; 0x24
   11ec4:	mov	r1, r7
   11ec8:	str	r5, [sp, #88]	; 0x58
   11ecc:	mov	r7, #0
   11ed0:	movwne	r1, #1
   11ed4:	orr	r5, r1, r5
   11ed8:	and	r1, r1, r3
   11edc:	and	r0, r0, r1
   11ee0:	str	r5, [sp, #60]	; 0x3c
   11ee4:	str	r1, [fp, #-68]	; 0xffffffbc
   11ee8:	str	r0, [fp, #-60]	; 0xffffffc4
   11eec:	eor	r0, r3, #1
   11ef0:	str	r0, [sp, #44]	; 0x2c
   11ef4:	cmn	lr, #1
   11ef8:	beq	11f08 <__assert_fail@plt+0xf00>
   11efc:	cmp	r7, lr
   11f00:	bne	11f14 <__assert_fail@plt+0xf0c>
   11f04:	b	12b8c <__assert_fail@plt+0x1b84>
   11f08:	ldrb	r0, [ip, r7]
   11f0c:	cmp	r0, #0
   11f10:	beq	12b94 <__assert_fail@plt+0x1b8c>
   11f14:	ldr	r0, [fp, #-60]	; 0xffffffc4
   11f18:	mov	r8, #0
   11f1c:	str	r4, [fp, #-52]	; 0xffffffcc
   11f20:	str	r2, [fp, #-48]	; 0xffffffd0
   11f24:	cmp	r0, #0
   11f28:	beq	11f5c <__assert_fail@plt+0xf54>
   11f2c:	ldr	r0, [fp, #-76]	; 0xffffffb4
   11f30:	add	r4, r7, r0
   11f34:	cmp	r0, #2
   11f38:	bcc	11f54 <__assert_fail@plt+0xf4c>
   11f3c:	cmn	lr, #1
   11f40:	bne	11f54 <__assert_fail@plt+0xf4c>
   11f44:	mov	r0, ip
   11f48:	bl	10f3c <strlen@plt>
   11f4c:	ldr	ip, [fp, #-84]	; 0xffffffac
   11f50:	mov	lr, r0
   11f54:	cmp	r4, lr
   11f58:	bls	11f74 <__assert_fail@plt+0xf6c>
   11f5c:	mov	r0, #0
   11f60:	str	r0, [fp, #-56]	; 0xffffffc8
   11f64:	ldrb	r5, [ip, r7]
   11f68:	cmp	r5, #126	; 0x7e
   11f6c:	bls	11fc4 <__assert_fail@plt+0xfbc>
   11f70:	b	123cc <__assert_fail@plt+0x13c4>
   11f74:	ldr	r1, [sp, #92]	; 0x5c
   11f78:	ldr	r2, [fp, #-76]	; 0xffffffb4
   11f7c:	add	r0, ip, r7
   11f80:	mov	r4, lr
   11f84:	bl	10e40 <memcmp@plt>
   11f88:	ldr	r2, [sp, #88]	; 0x58
   11f8c:	cmp	r0, #0
   11f90:	mov	r1, r0
   11f94:	movwne	r1, #1
   11f98:	orr	r1, r1, r2
   11f9c:	tst	r1, #1
   11fa0:	beq	12ca0 <__assert_fail@plt+0x1c98>
   11fa4:	ldr	ip, [fp, #-84]	; 0xffffffac
   11fa8:	clz	r0, r0
   11fac:	mov	lr, r4
   11fb0:	lsr	r0, r0, #5
   11fb4:	str	r0, [fp, #-56]	; 0xffffffc8
   11fb8:	ldrb	r5, [ip, r7]
   11fbc:	cmp	r5, #126	; 0x7e
   11fc0:	bhi	123cc <__assert_fail@plt+0x13c4>
   11fc4:	add	r3, pc, #16
   11fc8:	mov	r4, #1
   11fcc:	mov	r2, #110	; 0x6e
   11fd0:	mov	r0, #97	; 0x61
   11fd4:	mov	r1, #0
   11fd8:	ldr	pc, [r3, r5, lsl #2]
   11fdc:	andeq	r2, r1, ip, lsr #5
   11fe0:	andeq	r2, r1, ip, asr #7
   11fe4:	andeq	r2, r1, ip, asr #7
   11fe8:	andeq	r2, r1, ip, asr #7
   11fec:	andeq	r2, r1, ip, asr #7
   11ff0:	andeq	r2, r1, ip, asr #7
   11ff4:	andeq	r2, r1, ip, asr #7
   11ff8:	andeq	r2, r1, r8, lsr #9
   11ffc:	andeq	r2, r1, ip, lsl #5
   12000:	andeq	r2, r1, r4, ror r2
   12004:	muleq	r1, r8, r2
   12008:	andeq	r2, r1, r8, lsr #6
   1200c:	andeq	r2, r1, ip, ror #4
   12010:	muleq	r1, r4, r2
   12014:	andeq	r2, r1, ip, asr #7
   12018:	andeq	r2, r1, ip, asr #7
   1201c:	andeq	r2, r1, ip, asr #7
   12020:	andeq	r2, r1, ip, asr #7
   12024:	andeq	r2, r1, ip, asr #7
   12028:	andeq	r2, r1, ip, asr #7
   1202c:	andeq	r2, r1, ip, asr #7
   12030:	andeq	r2, r1, ip, asr #7
   12034:	andeq	r2, r1, ip, asr #7
   12038:	andeq	r2, r1, ip, asr #7
   1203c:	andeq	r2, r1, ip, asr #7
   12040:	andeq	r2, r1, ip, asr #7
   12044:	andeq	r2, r1, ip, asr #7
   12048:	andeq	r2, r1, ip, asr #7
   1204c:	andeq	r2, r1, ip, asr #7
   12050:	andeq	r2, r1, ip, asr #7
   12054:	andeq	r2, r1, ip, asr #7
   12058:	andeq	r2, r1, ip, asr #7
   1205c:	andeq	r2, r1, r4, lsr #8
   12060:	andeq	r2, r1, r8, lsr #8
   12064:	andeq	r2, r1, r8, lsr #8
   12068:	strdeq	r2, [r1], -r8
   1206c:	andeq	r2, r1, r8, lsr #8
   12070:	ldrdeq	r2, [r1], -r8
   12074:	andeq	r2, r1, r8, lsr #8
   12078:	andeq	r2, r1, r0, lsr r3
   1207c:	andeq	r2, r1, r8, lsr #8
   12080:	andeq	r2, r1, r8, lsr #8
   12084:	andeq	r2, r1, r8, lsr #8
   12088:	ldrdeq	r2, [r1], -r8
   1208c:	ldrdeq	r2, [r1], -r8
   12090:	ldrdeq	r2, [r1], -r8
   12094:	ldrdeq	r2, [r1], -r8
   12098:	ldrdeq	r2, [r1], -r8
   1209c:	ldrdeq	r2, [r1], -r8
   120a0:	ldrdeq	r2, [r1], -r8
   120a4:	ldrdeq	r2, [r1], -r8
   120a8:	ldrdeq	r2, [r1], -r8
   120ac:	ldrdeq	r2, [r1], -r8
   120b0:	ldrdeq	r2, [r1], -r8
   120b4:	ldrdeq	r2, [r1], -r8
   120b8:	ldrdeq	r2, [r1], -r8
   120bc:	ldrdeq	r2, [r1], -r8
   120c0:	ldrdeq	r2, [r1], -r8
   120c4:	ldrdeq	r2, [r1], -r8
   120c8:	andeq	r2, r1, r8, lsr #8
   120cc:	andeq	r2, r1, r8, lsr #8
   120d0:	andeq	r2, r1, r8, lsr #8
   120d4:	andeq	r2, r1, r8, lsr #8
   120d8:	andeq	r2, r1, ip, ror #5
   120dc:	andeq	r2, r1, ip, asr #7
   120e0:	ldrdeq	r2, [r1], -r8
   120e4:	ldrdeq	r2, [r1], -r8
   120e8:	ldrdeq	r2, [r1], -r8
   120ec:	ldrdeq	r2, [r1], -r8
   120f0:	ldrdeq	r2, [r1], -r8
   120f4:	ldrdeq	r2, [r1], -r8
   120f8:	ldrdeq	r2, [r1], -r8
   120fc:	ldrdeq	r2, [r1], -r8
   12100:	ldrdeq	r2, [r1], -r8
   12104:	ldrdeq	r2, [r1], -r8
   12108:	ldrdeq	r2, [r1], -r8
   1210c:	ldrdeq	r2, [r1], -r8
   12110:	ldrdeq	r2, [r1], -r8
   12114:	ldrdeq	r2, [r1], -r8
   12118:	ldrdeq	r2, [r1], -r8
   1211c:	ldrdeq	r2, [r1], -r8
   12120:	ldrdeq	r2, [r1], -r8
   12124:	ldrdeq	r2, [r1], -r8
   12128:	ldrdeq	r2, [r1], -r8
   1212c:	ldrdeq	r2, [r1], -r8
   12130:	ldrdeq	r2, [r1], -r8
   12134:	ldrdeq	r2, [r1], -r8
   12138:	ldrdeq	r2, [r1], -r8
   1213c:	ldrdeq	r2, [r1], -r8
   12140:	ldrdeq	r2, [r1], -r8
   12144:	ldrdeq	r2, [r1], -r8
   12148:	andeq	r2, r1, r8, lsr #8
   1214c:	andeq	r2, r1, r8, lsr r2
   12150:	ldrdeq	r2, [r1], -r8
   12154:	andeq	r2, r1, r8, lsr #8
   12158:	ldrdeq	r2, [r1], -r8
   1215c:	andeq	r2, r1, r8, lsr #8
   12160:	ldrdeq	r2, [r1], -r8
   12164:	ldrdeq	r2, [r1], -r8
   12168:	ldrdeq	r2, [r1], -r8
   1216c:	ldrdeq	r2, [r1], -r8
   12170:	ldrdeq	r2, [r1], -r8
   12174:	ldrdeq	r2, [r1], -r8
   12178:	ldrdeq	r2, [r1], -r8
   1217c:	ldrdeq	r2, [r1], -r8
   12180:	ldrdeq	r2, [r1], -r8
   12184:	ldrdeq	r2, [r1], -r8
   12188:	ldrdeq	r2, [r1], -r8
   1218c:	ldrdeq	r2, [r1], -r8
   12190:	ldrdeq	r2, [r1], -r8
   12194:	ldrdeq	r2, [r1], -r8
   12198:	ldrdeq	r2, [r1], -r8
   1219c:	ldrdeq	r2, [r1], -r8
   121a0:	ldrdeq	r2, [r1], -r8
   121a4:	ldrdeq	r2, [r1], -r8
   121a8:	ldrdeq	r2, [r1], -r8
   121ac:	ldrdeq	r2, [r1], -r8
   121b0:	ldrdeq	r2, [r1], -r8
   121b4:	ldrdeq	r2, [r1], -r8
   121b8:	ldrdeq	r2, [r1], -r8
   121bc:	ldrdeq	r2, [r1], -r8
   121c0:	ldrdeq	r2, [r1], -r8
   121c4:	ldrdeq	r2, [r1], -r8
   121c8:	andeq	r2, r1, r8, lsl r2
   121cc:	andeq	r2, r1, r8, lsr #8
   121d0:	andeq	r2, r1, r8, lsl r2
   121d4:	strdeq	r2, [r1], -r8
   121d8:	ldr	r0, [fp, #-68]	; 0xffffffbc
   121dc:	cmp	r0, #0
   121e0:	beq	124bc <__assert_fail@plt+0x14b4>
   121e4:	ldr	r0, [fp, #16]
   121e8:	cmp	r0, #0
   121ec:	mov	r0, r5
   121f0:	bne	124cc <__assert_fail@plt+0x14c4>
   121f4:	b	124ec <__assert_fail@plt+0x14e4>
   121f8:	mov	r4, #0
   121fc:	cmp	r7, #0
   12200:	beq	12424 <__assert_fail@plt+0x141c>
   12204:	mov	r8, #0
   12208:	ldr	r0, [fp, #-68]	; 0xffffffbc
   1220c:	cmp	r0, #0
   12210:	bne	121e4 <__assert_fail@plt+0x11dc>
   12214:	b	124bc <__assert_fail@plt+0x14b4>
   12218:	mov	r4, #0
   1221c:	cmn	lr, #1
   12220:	beq	123fc <__assert_fail@plt+0x13f4>
   12224:	cmp	r7, #0
   12228:	bne	12204 <__assert_fail@plt+0x11fc>
   1222c:	cmp	lr, #1
   12230:	beq	12424 <__assert_fail@plt+0x141c>
   12234:	b	12204 <__assert_fail@plt+0x11fc>
   12238:	ldr	r0, [fp, #-64]	; 0xffffffc0
   1223c:	cmp	r0, #2
   12240:	bne	12454 <__assert_fail@plt+0x144c>
   12244:	ldr	r0, [fp, #-72]	; 0xffffffb8
   12248:	tst	r0, #1
   1224c:	bne	12cb4 <__assert_fail@plt+0x1cac>
   12250:	mov	r8, #0
   12254:	mov	r0, #92	; 0x5c
   12258:	mov	r4, #0
   1225c:	cmp	r8, #0
   12260:	beq	12474 <__assert_fail@plt+0x146c>
   12264:	ldr	r2, [fp, #-48]	; 0xffffffd0
   12268:	b	12568 <__assert_fail@plt+0x1560>
   1226c:	mov	r0, #102	; 0x66
   12270:	b	124a8 <__assert_fail@plt+0x14a0>
   12274:	mov	r2, #116	; 0x74
   12278:	ldr	r0, [sp, #60]	; 0x3c
   1227c:	tst	r0, #1
   12280:	mov	r0, r2
   12284:	bne	124a8 <__assert_fail@plt+0x14a0>
   12288:	b	12cb4 <__assert_fail@plt+0x1cac>
   1228c:	mov	r0, #98	; 0x62
   12290:	b	124a8 <__assert_fail@plt+0x14a0>
   12294:	mov	r2, #114	; 0x72
   12298:	ldr	r0, [sp, #60]	; 0x3c
   1229c:	tst	r0, #1
   122a0:	mov	r0, r2
   122a4:	bne	124a8 <__assert_fail@plt+0x14a0>
   122a8:	b	12cb4 <__assert_fail@plt+0x1cac>
   122ac:	ldr	r0, [sp, #80]	; 0x50
   122b0:	tst	r0, #1
   122b4:	beq	12590 <__assert_fail@plt+0x1588>
   122b8:	ldr	r0, [fp, #-72]	; 0xffffffb8
   122bc:	tst	r0, #1
   122c0:	bne	12ddc <__assert_fail@plt+0x1dd4>
   122c4:	ldr	r0, [fp, #-64]	; 0xffffffc0
   122c8:	ldr	r2, [fp, #-48]	; 0xffffffd0
   122cc:	cmp	r0, #2
   122d0:	ldr	r0, [fp, #-80]	; 0xffffffb0
   122d4:	movwne	r0, #1
   122d8:	orr	r0, r0, r2
   122dc:	tst	r0, #1
   122e0:	beq	12888 <__assert_fail@plt+0x1880>
   122e4:	mov	r0, r9
   122e8:	b	128bc <__assert_fail@plt+0x18b4>
   122ec:	ldr	r0, [fp, #-64]	; 0xffffffc0
   122f0:	mov	r8, #0
   122f4:	mov	r5, #63	; 0x3f
   122f8:	cmp	r0, #5
   122fc:	beq	12744 <__assert_fail@plt+0x173c>
   12300:	cmp	r0, #2
   12304:	bne	127f4 <__assert_fail@plt+0x17ec>
   12308:	ldr	r0, [fp, #-72]	; 0xffffffb8
   1230c:	tst	r0, #1
   12310:	bne	12cb4 <__assert_fail@plt+0x1cac>
   12314:	mov	r4, #0
   12318:	ldr	r0, [fp, #-68]	; 0xffffffbc
   1231c:	cmp	r0, #0
   12320:	bne	121e4 <__assert_fail@plt+0x11dc>
   12324:	b	124bc <__assert_fail@plt+0x14b4>
   12328:	mov	r0, #118	; 0x76
   1232c:	b	124a8 <__assert_fail@plt+0x14a0>
   12330:	mov	r0, #1
   12334:	mov	r5, #39	; 0x27
   12338:	str	r0, [sp, #52]	; 0x34
   1233c:	ldr	r0, [fp, #-64]	; 0xffffffc0
   12340:	cmp	r0, #2
   12344:	bne	123b8 <__assert_fail@plt+0x13b0>
   12348:	ldr	r0, [fp, #-72]	; 0xffffffb8
   1234c:	tst	r0, #1
   12350:	bne	12cb4 <__assert_fail@plt+0x1cac>
   12354:	ldr	r2, [sp, #48]	; 0x30
   12358:	clz	r1, sl
   1235c:	mov	r8, #0
   12360:	lsr	r1, r1, #5
   12364:	cmp	r2, #0
   12368:	mov	r0, r2
   1236c:	movwne	r0, #1
   12370:	orrs	r0, r0, r1
   12374:	moveq	r2, sl
   12378:	moveq	sl, r0
   1237c:	cmp	r9, sl
   12380:	str	r2, [sp, #48]	; 0x30
   12384:	movcc	r0, #39	; 0x27
   12388:	strbcc	r0, [r6, r9]
   1238c:	add	r0, r9, #1
   12390:	cmp	r0, sl
   12394:	movcc	r1, #92	; 0x5c
   12398:	strbcc	r1, [r6, r0]
   1239c:	add	r0, r9, #2
   123a0:	add	r9, r9, #3
   123a4:	cmp	r0, sl
   123a8:	movcc	r1, #39	; 0x27
   123ac:	strbcc	r1, [r6, r0]
   123b0:	mov	r0, #0
   123b4:	str	r0, [fp, #-48]	; 0xffffffd0
   123b8:	mov	r4, #1
   123bc:	ldr	r0, [fp, #-68]	; 0xffffffbc
   123c0:	cmp	r0, #0
   123c4:	bne	121e4 <__assert_fail@plt+0x11dc>
   123c8:	b	124bc <__assert_fail@plt+0x14b4>
   123cc:	ldr	r0, [sp, #32]
   123d0:	cmp	r0, #1
   123d4:	bne	125c0 <__assert_fail@plt+0x15b8>
   123d8:	str	lr, [sp, #84]	; 0x54
   123dc:	bl	10f18 <__ctype_b_loc@plt>
   123e0:	ldr	r0, [r0]
   123e4:	ldr	ip, [fp, #-84]	; 0xffffffac
   123e8:	mov	r1, #1
   123ec:	add	r0, r0, r5, lsl #1
   123f0:	ldrb	r0, [r0, #1]
   123f4:	ubfx	r4, r0, #6, #1
   123f8:	b	129b8 <__assert_fail@plt+0x19b0>
   123fc:	cmp	r7, #0
   12400:	ldrbeq	r0, [ip, #1]
   12404:	cmpeq	r0, #0
   12408:	beq	12424 <__assert_fail@plt+0x141c>
   1240c:	mvn	lr, #0
   12410:	mov	r8, #0
   12414:	ldr	r0, [fp, #-68]	; 0xffffffbc
   12418:	cmp	r0, #0
   1241c:	bne	121e4 <__assert_fail@plt+0x11dc>
   12420:	b	124bc <__assert_fail@plt+0x14b4>
   12424:	mov	r1, #1
   12428:	ldr	r0, [fp, #-64]	; 0xffffffc0
   1242c:	cmp	r0, #2
   12430:	bne	12440 <__assert_fail@plt+0x1438>
   12434:	ldr	r0, [fp, #-72]	; 0xffffffb8
   12438:	tst	r0, #1
   1243c:	bne	12cb4 <__assert_fail@plt+0x1cac>
   12440:	mov	r4, r1
   12444:	ldr	r0, [fp, #-68]	; 0xffffffbc
   12448:	cmp	r0, #0
   1244c:	bne	121e4 <__assert_fail@plt+0x11dc>
   12450:	b	124bc <__assert_fail@plt+0x14b4>
   12454:	ldr	r1, [sp, #40]	; 0x28
   12458:	mov	r8, #0
   1245c:	mov	r0, #92	; 0x5c
   12460:	cmp	r1, #0
   12464:	beq	124a8 <__assert_fail@plt+0x14a0>
   12468:	mov	r4, #0
   1246c:	cmp	r8, #0
   12470:	bne	12264 <__assert_fail@plt+0x125c>
   12474:	ldr	r2, [fp, #-48]	; 0xffffffd0
   12478:	tst	r2, #1
   1247c:	beq	12568 <__assert_fail@plt+0x1560>
   12480:	cmp	r9, sl
   12484:	movcc	r1, #39	; 0x27
   12488:	strbcc	r1, [r6, r9]
   1248c:	add	r1, r9, #1
   12490:	add	r9, r9, #2
   12494:	cmp	r1, sl
   12498:	movcc	r2, #39	; 0x27
   1249c:	strbcc	r2, [r6, r1]
   124a0:	mov	r2, #0
   124a4:	b	12568 <__assert_fail@plt+0x1560>
   124a8:	ldr	r1, [sp, #80]	; 0x50
   124ac:	mov	r4, #0
   124b0:	mov	r8, #0
   124b4:	tst	r1, #1
   124b8:	bne	124f8 <__assert_fail@plt+0x14f0>
   124bc:	ldr	r0, [fp, #-88]	; 0xffffffa8
   124c0:	cmp	r0, #0
   124c4:	mov	r0, r5
   124c8:	beq	124ec <__assert_fail@plt+0x14e4>
   124cc:	ldr	r1, [fp, #16]
   124d0:	ubfx	r0, r5, #5, #3
   124d4:	mov	r2, #1
   124d8:	ldr	r0, [r1, r0, lsl #2]
   124dc:	and	r1, r5, #31
   124e0:	tst	r0, r2, lsl r1
   124e4:	mov	r0, r5
   124e8:	bne	124f8 <__assert_fail@plt+0x14f0>
   124ec:	ldr	r1, [fp, #-56]	; 0xffffffc8
   124f0:	cmp	r1, #0
   124f4:	beq	12950 <__assert_fail@plt+0x1948>
   124f8:	ldr	r1, [fp, #-72]	; 0xffffffb8
   124fc:	tst	r1, #1
   12500:	bne	12c94 <__assert_fail@plt+0x1c8c>
   12504:	ldr	r1, [fp, #-64]	; 0xffffffc0
   12508:	ldr	r2, [fp, #-48]	; 0xffffffd0
   1250c:	cmp	r1, #2
   12510:	ldr	r1, [fp, #-80]	; 0xffffffb0
   12514:	movwne	r1, #1
   12518:	orr	r1, r1, r2
   1251c:	tst	r1, #1
   12520:	bne	12558 <__assert_fail@plt+0x1550>
   12524:	cmp	r9, sl
   12528:	movcc	r1, #39	; 0x27
   1252c:	strbcc	r1, [r6, r9]
   12530:	add	r1, r9, #1
   12534:	cmp	r1, sl
   12538:	movcc	r2, #36	; 0x24
   1253c:	strbcc	r2, [r6, r1]
   12540:	add	r1, r9, #2
   12544:	add	r9, r9, #3
   12548:	cmp	r1, sl
   1254c:	movcc	r2, #39	; 0x27
   12550:	strbcc	r2, [r6, r1]
   12554:	mov	r2, #1
   12558:	cmp	r9, sl
   1255c:	movcc	r1, #92	; 0x5c
   12560:	strbcc	r1, [r6, r9]
   12564:	add	r9, r9, #1
   12568:	cmp	r9, sl
   1256c:	add	r7, r7, #1
   12570:	strbcc	r0, [r6, r9]
   12574:	ldr	r0, [fp, #-52]	; 0xffffffcc
   12578:	add	r9, r9, #1
   1257c:	and	r0, r0, r4
   12580:	mov	r4, r0
   12584:	cmn	lr, #1
   12588:	bne	11efc <__assert_fail@plt+0xef4>
   1258c:	b	11f08 <__assert_fail@plt+0xf00>
   12590:	ldr	r0, [sp, #28]
   12594:	mov	r4, #0
   12598:	mov	r8, #0
   1259c:	mov	r5, #0
   125a0:	cmp	r0, #0
   125a4:	beq	124bc <__assert_fail@plt+0x14b4>
   125a8:	ldr	r4, [fp, #-52]	; 0xffffffcc
   125ac:	ldr	r2, [fp, #-48]	; 0xffffffd0
   125b0:	add	r7, r7, #1
   125b4:	cmn	lr, #1
   125b8:	bne	11efc <__assert_fail@plt+0xef4>
   125bc:	b	11f08 <__assert_fail@plt+0xf00>
   125c0:	mov	r0, #0
   125c4:	cmn	lr, #1
   125c8:	str	r0, [fp, #-36]	; 0xffffffdc
   125cc:	str	r0, [fp, #-40]	; 0xffffffd8
   125d0:	bne	125e4 <__assert_fail@plt+0x15dc>
   125d4:	mov	r0, ip
   125d8:	bl	10f3c <strlen@plt>
   125dc:	ldr	ip, [fp, #-84]	; 0xffffffac
   125e0:	mov	lr, r0
   125e4:	ldr	r0, [sp, #36]	; 0x24
   125e8:	str	sl, [sp, #56]	; 0x38
   125ec:	str	lr, [sp, #84]	; 0x54
   125f0:	cmp	r0, #0
   125f4:	beq	1280c <__assert_fail@plt+0x1804>
   125f8:	add	r0, ip, r7
   125fc:	mov	r4, #1
   12600:	mov	r6, #0
   12604:	sub	sl, fp, #40	; 0x28
   12608:	str	r0, [sp, #20]
   1260c:	str	r6, [sp, #64]	; 0x40
   12610:	add	r6, r6, r7
   12614:	sub	r0, fp, #44	; 0x2c
   12618:	mov	r3, sl
   1261c:	add	r1, ip, r6
   12620:	sub	r2, lr, r6
   12624:	bl	15558 <__assert_fail@plt+0x4550>
   12628:	cmn	r0, #2
   1262c:	beq	12968 <__assert_fail@plt+0x1960>
   12630:	ldr	sl, [sp, #56]	; 0x38
   12634:	cmn	r0, #1
   12638:	beq	1295c <__assert_fail@plt+0x1954>
   1263c:	cmp	r0, #0
   12640:	beq	12960 <__assert_fail@plt+0x1958>
   12644:	cmp	r0, #2
   12648:	bcc	12708 <__assert_fail@plt+0x1700>
   1264c:	ldr	r1, [sp, #64]	; 0x40
   12650:	ldr	r2, [sp, #20]
   12654:	add	r1, r2, r1
   12658:	mov	r2, #1
   1265c:	ldrb	r3, [r1, r2]
   12660:	sub	r3, r3, #91	; 0x5b
   12664:	cmp	r3, #33	; 0x21
   12668:	bhi	126fc <__assert_fail@plt+0x16f4>
   1266c:	add	r6, pc, #0
   12670:	ldr	pc, [r6, r3, lsl #2]
   12674:	andeq	r2, r1, r0, asr #25
   12678:	andeq	r2, r1, r0, asr #25
   1267c:	strdeq	r2, [r1], -ip
   12680:	andeq	r2, r1, r0, asr #25
   12684:	strdeq	r2, [r1], -ip
   12688:	andeq	r2, r1, r0, asr #25
   1268c:	strdeq	r2, [r1], -ip
   12690:	strdeq	r2, [r1], -ip
   12694:	strdeq	r2, [r1], -ip
   12698:	strdeq	r2, [r1], -ip
   1269c:	strdeq	r2, [r1], -ip
   126a0:	strdeq	r2, [r1], -ip
   126a4:	strdeq	r2, [r1], -ip
   126a8:	strdeq	r2, [r1], -ip
   126ac:	strdeq	r2, [r1], -ip
   126b0:	strdeq	r2, [r1], -ip
   126b4:	strdeq	r2, [r1], -ip
   126b8:	strdeq	r2, [r1], -ip
   126bc:	strdeq	r2, [r1], -ip
   126c0:	strdeq	r2, [r1], -ip
   126c4:	strdeq	r2, [r1], -ip
   126c8:	strdeq	r2, [r1], -ip
   126cc:	strdeq	r2, [r1], -ip
   126d0:	strdeq	r2, [r1], -ip
   126d4:	strdeq	r2, [r1], -ip
   126d8:	strdeq	r2, [r1], -ip
   126dc:	strdeq	r2, [r1], -ip
   126e0:	strdeq	r2, [r1], -ip
   126e4:	strdeq	r2, [r1], -ip
   126e8:	strdeq	r2, [r1], -ip
   126ec:	strdeq	r2, [r1], -ip
   126f0:	strdeq	r2, [r1], -ip
   126f4:	strdeq	r2, [r1], -ip
   126f8:	andeq	r2, r1, r0, asr #25
   126fc:	add	r2, r2, #1
   12700:	cmp	r2, r0
   12704:	bcc	1265c <__assert_fail@plt+0x1654>
   12708:	ldr	r6, [sp, #64]	; 0x40
   1270c:	add	r6, r0, r6
   12710:	ldr	r0, [fp, #-44]	; 0xffffffd4
   12714:	bl	10e7c <iswprint@plt>
   12718:	cmp	r0, #0
   1271c:	sub	sl, fp, #40	; 0x28
   12720:	movwne	r0, #1
   12724:	and	r4, r4, r0
   12728:	mov	r0, sl
   1272c:	bl	10e28 <mbsinit@plt>
   12730:	ldr	ip, [fp, #-84]	; 0xffffffac
   12734:	ldr	lr, [sp, #84]	; 0x54
   12738:	cmp	r0, #0
   1273c:	beq	1260c <__assert_fail@plt+0x1604>
   12740:	b	129ac <__assert_fail@plt+0x19a4>
   12744:	ldr	r0, [sp, #24]
   12748:	cmp	r0, #0
   1274c:	beq	127f4 <__assert_fail@plt+0x17ec>
   12750:	add	r0, r7, #2
   12754:	cmp	r0, lr
   12758:	bcs	127f4 <__assert_fail@plt+0x17ec>
   1275c:	add	r1, ip, r7
   12760:	ldrb	r1, [r1, #1]
   12764:	cmp	r1, #63	; 0x3f
   12768:	bne	127f4 <__assert_fail@plt+0x17ec>
   1276c:	ldrb	r5, [ip, r0]
   12770:	sub	r1, r5, #33	; 0x21
   12774:	cmp	r1, #29
   12778:	bhi	127f4 <__assert_fail@plt+0x17ec>
   1277c:	movw	r3, #20929	; 0x51c1
   12780:	mov	r2, #1
   12784:	movt	r3, #14336	; 0x3800
   12788:	tst	r3, r2, lsl r1
   1278c:	beq	127f4 <__assert_fail@plt+0x17ec>
   12790:	ldr	r1, [fp, #-72]	; 0xffffffb8
   12794:	tst	r1, #1
   12798:	bne	12de4 <__assert_fail@plt+0x1ddc>
   1279c:	cmp	r9, sl
   127a0:	mov	r7, r0
   127a4:	mov	r4, #0
   127a8:	movcc	r1, #63	; 0x3f
   127ac:	strbcc	r1, [r6, r9]
   127b0:	add	r1, r9, #1
   127b4:	cmp	r1, sl
   127b8:	movcc	r2, #34	; 0x22
   127bc:	strbcc	r2, [r6, r1]
   127c0:	add	r1, r9, #2
   127c4:	cmp	r1, sl
   127c8:	movcc	r2, #34	; 0x22
   127cc:	strbcc	r2, [r6, r1]
   127d0:	add	r1, r9, #3
   127d4:	add	r9, r9, #4
   127d8:	cmp	r1, sl
   127dc:	movcc	r2, #63	; 0x3f
   127e0:	strbcc	r2, [r6, r1]
   127e4:	ldr	r0, [fp, #-68]	; 0xffffffbc
   127e8:	cmp	r0, #0
   127ec:	bne	121e4 <__assert_fail@plt+0x11dc>
   127f0:	b	124bc <__assert_fail@plt+0x14b4>
   127f4:	mov	r5, #63	; 0x3f
   127f8:	mov	r4, #0
   127fc:	ldr	r0, [fp, #-68]	; 0xffffffbc
   12800:	cmp	r0, #0
   12804:	bne	121e4 <__assert_fail@plt+0x11dc>
   12808:	b	124bc <__assert_fail@plt+0x14b4>
   1280c:	mov	r4, #1
   12810:	mov	r6, #0
   12814:	sub	sl, fp, #40	; 0x28
   12818:	str	r6, [sp, #64]	; 0x40
   1281c:	add	r6, r6, r7
   12820:	sub	r0, fp, #44	; 0x2c
   12824:	mov	r3, sl
   12828:	add	r1, ip, r6
   1282c:	sub	r2, lr, r6
   12830:	bl	15558 <__assert_fail@plt+0x4550>
   12834:	cmn	r0, #2
   12838:	beq	12968 <__assert_fail@plt+0x1960>
   1283c:	cmn	r0, #1
   12840:	beq	1295c <__assert_fail@plt+0x1954>
   12844:	ldr	r6, [sp, #64]	; 0x40
   12848:	cmp	r0, #0
   1284c:	beq	129a8 <__assert_fail@plt+0x19a0>
   12850:	add	r6, r0, r6
   12854:	ldr	r0, [fp, #-44]	; 0xffffffd4
   12858:	bl	10e7c <iswprint@plt>
   1285c:	cmp	r0, #0
   12860:	sub	sl, fp, #40	; 0x28
   12864:	movwne	r0, #1
   12868:	and	r4, r4, r0
   1286c:	mov	r0, sl
   12870:	bl	10e28 <mbsinit@plt>
   12874:	ldr	ip, [fp, #-84]	; 0xffffffac
   12878:	ldr	lr, [sp, #84]	; 0x54
   1287c:	cmp	r0, #0
   12880:	beq	12818 <__assert_fail@plt+0x1810>
   12884:	b	129ac <__assert_fail@plt+0x19a4>
   12888:	cmp	r9, sl
   1288c:	mov	r2, #1
   12890:	movcc	r0, #39	; 0x27
   12894:	strbcc	r0, [r6, r9]
   12898:	add	r0, r9, #1
   1289c:	cmp	r0, sl
   128a0:	movcc	r1, #36	; 0x24
   128a4:	strbcc	r1, [r6, r0]
   128a8:	add	r0, r9, #2
   128ac:	cmp	r0, sl
   128b0:	movcc	r1, #39	; 0x27
   128b4:	strbcc	r1, [r6, r0]
   128b8:	add	r0, r9, #3
   128bc:	cmp	r0, sl
   128c0:	add	r9, r0, #1
   128c4:	str	r2, [fp, #-48]	; 0xffffffd0
   128c8:	movcc	r1, #92	; 0x5c
   128cc:	strbcc	r1, [r6, r0]
   128d0:	ldr	r1, [fp, #-64]	; 0xffffffc0
   128d4:	cmp	r1, #2
   128d8:	beq	12938 <__assert_fail@plt+0x1930>
   128dc:	add	r1, r7, #1
   128e0:	mov	r4, #0
   128e4:	mov	r8, #1
   128e8:	mov	r5, #48	; 0x30
   128ec:	cmp	r1, lr
   128f0:	bcs	121d8 <__assert_fail@plt+0x11d0>
   128f4:	ldrb	r1, [ip, r1]
   128f8:	sub	r1, r1, #48	; 0x30
   128fc:	uxtb	r1, r1
   12900:	cmp	r1, #9
   12904:	bhi	121d8 <__assert_fail@plt+0x11d0>
   12908:	cmp	r9, sl
   1290c:	movcc	r1, #48	; 0x30
   12910:	strbcc	r1, [r6, r9]
   12914:	add	r1, r0, #2
   12918:	add	r9, r0, #3
   1291c:	cmp	r1, sl
   12920:	movcc	r2, #48	; 0x30
   12924:	strbcc	r2, [r6, r1]
   12928:	ldr	r0, [fp, #-68]	; 0xffffffbc
   1292c:	cmp	r0, #0
   12930:	bne	121e4 <__assert_fail@plt+0x11dc>
   12934:	b	124bc <__assert_fail@plt+0x14b4>
   12938:	mov	r0, #48	; 0x30
   1293c:	mov	r8, #1
   12940:	mov	r4, #0
   12944:	ldr	r1, [fp, #-56]	; 0xffffffc8
   12948:	cmp	r1, #0
   1294c:	bne	124f8 <__assert_fail@plt+0x14f0>
   12950:	cmp	r8, #0
   12954:	beq	12474 <__assert_fail@plt+0x146c>
   12958:	b	12264 <__assert_fail@plt+0x125c>
   1295c:	mov	r4, #0
   12960:	ldr	ip, [fp, #-84]	; 0xffffffac
   12964:	b	129a0 <__assert_fail@plt+0x1998>
   12968:	ldr	r1, [sp, #84]	; 0x54
   1296c:	ldr	ip, [fp, #-84]	; 0xffffffac
   12970:	mov	r4, #0
   12974:	cmp	r6, r1
   12978:	bcs	129a0 <__assert_fail@plt+0x1998>
   1297c:	ldrb	r0, [ip, r6]
   12980:	cmp	r0, #0
   12984:	beq	129a0 <__assert_fail@plt+0x1998>
   12988:	ldr	r0, [sp, #64]	; 0x40
   1298c:	add	r0, r0, #1
   12990:	add	r6, r0, r7
   12994:	str	r0, [sp, #64]	; 0x40
   12998:	cmp	r6, r1
   1299c:	bcc	1297c <__assert_fail@plt+0x1974>
   129a0:	ldr	r6, [sp, #64]	; 0x40
   129a4:	b	129ac <__assert_fail@plt+0x19a4>
   129a8:	ldr	ip, [fp, #-84]	; 0xffffffac
   129ac:	mov	r1, r6
   129b0:	ldr	r6, [sp, #76]	; 0x4c
   129b4:	ldr	sl, [sp, #56]	; 0x38
   129b8:	ldr	r0, [sp, #44]	; 0x2c
   129bc:	cmp	r1, #1
   129c0:	orr	r2, r4, r0
   129c4:	mov	r0, r1
   129c8:	bhi	129e8 <__assert_fail@plt+0x19e0>
   129cc:	tst	r2, #1
   129d0:	beq	129e8 <__assert_fail@plt+0x19e0>
   129d4:	ldr	lr, [sp, #84]	; 0x54
   129d8:	ldr	r0, [fp, #-68]	; 0xffffffbc
   129dc:	cmp	r0, #0
   129e0:	bne	121e4 <__assert_fail@plt+0x11dc>
   129e4:	b	124bc <__assert_fail@plt+0x14b4>
   129e8:	str	r2, [sp, #64]	; 0x40
   129ec:	add	r0, r0, r7
   129f0:	add	r1, r7, #1
   129f4:	ldr	lr, [sp, #84]	; 0x54
   129f8:	ldr	r7, [fp, #-64]	; 0xffffffc0
   129fc:	ldr	r2, [fp, #-48]	; 0xffffffd0
   12a00:	mov	r3, #0
   12a04:	str	r0, [sp, #56]	; 0x38
   12a08:	ldr	r0, [sp, #64]	; 0x40
   12a0c:	tst	r0, #1
   12a10:	bne	12af8 <__assert_fail@plt+0x1af0>
   12a14:	ldr	r0, [fp, #-72]	; 0xffffffb8
   12a18:	tst	r0, #1
   12a1c:	bne	12c98 <__assert_fail@plt+0x1c90>
   12a20:	ldr	r3, [fp, #-80]	; 0xffffffb0
   12a24:	cmp	r7, #2
   12a28:	movwne	r3, #1
   12a2c:	orr	r3, r3, r2
   12a30:	tst	r3, #1
   12a34:	bne	12a6c <__assert_fail@plt+0x1a64>
   12a38:	cmp	r9, sl
   12a3c:	add	r3, r9, #1
   12a40:	movcc	r2, #39	; 0x27
   12a44:	strbcc	r2, [r6, r9]
   12a48:	cmp	r3, sl
   12a4c:	movcc	r2, #36	; 0x24
   12a50:	strbcc	r2, [r6, r3]
   12a54:	add	r3, r9, #2
   12a58:	add	r9, r9, #3
   12a5c:	cmp	r3, sl
   12a60:	movcc	r2, #39	; 0x27
   12a64:	strbcc	r2, [r6, r3]
   12a68:	mov	r2, #1
   12a6c:	cmp	r9, sl
   12a70:	mov	r0, r2
   12a74:	movcc	r3, #92	; 0x5c
   12a78:	strbcc	r3, [r6, r9]
   12a7c:	add	r3, r9, #1
   12a80:	cmp	r3, sl
   12a84:	andcc	r7, r5, #192	; 0xc0
   12a88:	movcc	r2, #48	; 0x30
   12a8c:	orrcc	r7, r2, r7, lsr #6
   12a90:	strbcc	r7, [r6, r3]
   12a94:	add	r3, r9, #2
   12a98:	add	r9, r9, #3
   12a9c:	cmp	r3, sl
   12aa0:	lsrcc	r7, r5, #3
   12aa4:	movcc	r2, #6
   12aa8:	bficc	r7, r2, #3, #29
   12aac:	mov	r2, #6
   12ab0:	strbcc	r7, [r6, r3]
   12ab4:	bfi	r5, r2, #3, #29
   12ab8:	mov	r3, #1
   12abc:	mov	r2, r0
   12ac0:	ldr	r0, [sp, #56]	; 0x38
   12ac4:	and	r8, r3, #1
   12ac8:	cmp	r0, r1
   12acc:	bhi	12b2c <__assert_fail@plt+0x1b24>
   12ad0:	b	12b6c <__assert_fail@plt+0x1b64>
   12ad4:	cmp	r9, sl
   12ad8:	ldr	r7, [fp, #-64]	; 0xffffffc0
   12adc:	strbcc	r5, [r6, r9]
   12ae0:	add	r9, r9, #1
   12ae4:	ldrb	r5, [ip, r1]
   12ae8:	add	r1, r1, #1
   12aec:	ldr	r0, [sp, #64]	; 0x40
   12af0:	tst	r0, #1
   12af4:	beq	12a14 <__assert_fail@plt+0x1a0c>
   12af8:	ldr	r7, [fp, #-56]	; 0xffffffc8
   12afc:	tst	r7, #1
   12b00:	beq	12b14 <__assert_fail@plt+0x1b0c>
   12b04:	cmp	r9, sl
   12b08:	movcc	r7, #92	; 0x5c
   12b0c:	strbcc	r7, [r6, r9]
   12b10:	add	r9, r9, #1
   12b14:	mov	r7, #0
   12b18:	str	r7, [fp, #-56]	; 0xffffffc8
   12b1c:	ldr	r0, [sp, #56]	; 0x38
   12b20:	and	r8, r3, #1
   12b24:	cmp	r0, r1
   12b28:	bls	12b6c <__assert_fail@plt+0x1b64>
   12b2c:	cmp	r8, #0
   12b30:	mvn	r7, r2
   12b34:	movwne	r8, #1
   12b38:	orr	r7, r7, r8
   12b3c:	tst	r7, #1
   12b40:	bne	12ad4 <__assert_fail@plt+0x1acc>
   12b44:	cmp	r9, sl
   12b48:	movcc	r7, #39	; 0x27
   12b4c:	strbcc	r7, [r6, r9]
   12b50:	add	r7, r9, #1
   12b54:	add	r9, r9, #2
   12b58:	cmp	r7, sl
   12b5c:	movcc	r2, #39	; 0x27
   12b60:	strbcc	r2, [r6, r7]
   12b64:	mov	r2, #0
   12b68:	b	12ad4 <__assert_fail@plt+0x1acc>
   12b6c:	cmp	r8, #0
   12b70:	sub	r7, r1, #1
   12b74:	mov	r0, r5
   12b78:	str	r2, [fp, #-48]	; 0xffffffd0
   12b7c:	movwne	r8, #1
   12b80:	cmp	r8, #0
   12b84:	beq	12474 <__assert_fail@plt+0x146c>
   12b88:	b	12264 <__assert_fail@plt+0x125c>
   12b8c:	mov	lr, r7
   12b90:	b	12b98 <__assert_fail@plt+0x1b90>
   12b94:	mvn	lr, #0
   12b98:	ldr	r7, [fp, #-64]	; 0xffffffc0
   12b9c:	ldr	r1, [fp, #-72]	; 0xffffffb8
   12ba0:	eor	r0, r7, #2
   12ba4:	orr	r0, r0, r9
   12ba8:	clz	r0, r0
   12bac:	lsr	r0, r0, #5
   12bb0:	tst	r1, r0
   12bb4:	bne	12cb4 <__assert_fail@plt+0x1cac>
   12bb8:	mov	r0, r1
   12bbc:	ldr	r1, [fp, #-80]	; 0xffffffb0
   12bc0:	cmp	r7, #2
   12bc4:	movwne	r1, #1
   12bc8:	orr	r0, r0, r1
   12bcc:	tst	r0, #1
   12bd0:	ldreq	r0, [sp, #52]	; 0x34
   12bd4:	streq	lr, [sp, #84]	; 0x54
   12bd8:	eoreq	r0, r0, #1
   12bdc:	tsteq	r0, #1
   12be0:	bne	12d78 <__assert_fail@plt+0x1d70>
   12be4:	tst	r4, #1
   12be8:	bne	12d34 <__assert_fail@plt+0x1d2c>
   12bec:	ldr	r6, [sp, #48]	; 0x30
   12bf0:	mov	r8, #0
   12bf4:	cmp	r6, #0
   12bf8:	beq	12d70 <__assert_fail@plt+0x1d68>
   12bfc:	ldr	r0, [sp, #80]	; 0x50
   12c00:	mov	r1, #0
   12c04:	cmp	sl, #0
   12c08:	mov	r4, #0
   12c0c:	str	r1, [fp, #-72]	; 0xffffffb8
   12c10:	beq	11b04 <__assert_fail@plt+0xafc>
   12c14:	b	12d78 <__assert_fail@plt+0x1d70>
   12c18:	ldrb	r1, [r0, #3]
   12c1c:	cmp	r1, #56	; 0x38
   12c20:	ldrbeq	r1, [r0, #4]
   12c24:	cmpeq	r1, #48	; 0x30
   12c28:	bne	11cfc <__assert_fail@plt+0xcf4>
   12c2c:	ldrb	r1, [r0, #5]
   12c30:	cmp	r1, #51	; 0x33
   12c34:	ldrbeq	r1, [r0, #6]
   12c38:	cmpeq	r1, #48	; 0x30
   12c3c:	bne	11cfc <__assert_fail@plt+0xcf4>
   12c40:	ldrb	r0, [r0, #7]
   12c44:	cmp	r0, #0
   12c48:	movw	r0, #23985	; 0x5db1
   12c4c:	movt	r0, #1
   12c50:	str	r0, [sp, #68]	; 0x44
   12c54:	bne	11cfc <__assert_fail@plt+0xcf4>
   12c58:	b	11d18 <__assert_fail@plt+0xd10>
   12c5c:	ldrb	r1, [r0, #4]
   12c60:	cmp	r1, #48	; 0x30
   12c64:	ldrbeq	r1, [r0, #5]
   12c68:	cmpeq	r1, #51	; 0x33
   12c6c:	bne	11de0 <__assert_fail@plt+0xdd8>
   12c70:	ldrb	r1, [r0, #6]
   12c74:	cmp	r1, #48	; 0x30
   12c78:	ldrbeq	r0, [r0, #7]
   12c7c:	cmpeq	r0, #0
   12c80:	bne	11de0 <__assert_fail@plt+0xdd8>
   12c84:	movw	r0, #23989	; 0x5db5
   12c88:	movt	r0, #1
   12c8c:	str	r0, [sp, #72]	; 0x48
   12c90:	b	11e00 <__assert_fail@plt+0xdf8>
   12c94:	ldr	r7, [fp, #-64]	; 0xffffffc0
   12c98:	ldr	r2, [sp, #80]	; 0x50
   12c9c:	b	12cd4 <__assert_fail@plt+0x1ccc>
   12ca0:	ldr	ip, [fp, #-84]	; 0xffffffac
   12ca4:	mov	r2, #1
   12ca8:	mov	lr, r4
   12cac:	ldr	r7, [fp, #-64]	; 0xffffffc0
   12cb0:	b	12cd4 <__assert_fail@plt+0x1ccc>
   12cb4:	ldr	r2, [sp, #80]	; 0x50
   12cb8:	mov	r7, #2
   12cbc:	b	12cd4 <__assert_fail@plt+0x1ccc>
   12cc0:	ldr	r6, [sp, #76]	; 0x4c
   12cc4:	ldr	ip, [fp, #-84]	; 0xffffffac
   12cc8:	ldr	lr, [sp, #84]	; 0x54
   12ccc:	ldr	r2, [sp, #80]	; 0x50
   12cd0:	mov	r7, #2
   12cd4:	mov	r0, #0
   12cd8:	ldr	r1, [fp, #12]
   12cdc:	tst	r2, #1
   12ce0:	mov	r2, r7
   12ce4:	mov	r3, lr
   12ce8:	str	r0, [sp, #8]
   12cec:	ldr	r0, [sp, #68]	; 0x44
   12cf0:	movwne	r2, #4
   12cf4:	cmp	r7, #2
   12cf8:	movne	r2, r7
   12cfc:	str	r2, [sp]
   12d00:	mov	r2, ip
   12d04:	bic	r1, r1, #2
   12d08:	str	r0, [sp, #12]
   12d0c:	ldr	r0, [sp, #72]	; 0x48
   12d10:	str	r1, [sp, #4]
   12d14:	mov	r1, sl
   12d18:	str	r0, [sp, #16]
   12d1c:	mov	r0, r6
   12d20:	bl	11a88 <__assert_fail@plt+0xa80>
   12d24:	mov	r9, r0
   12d28:	mov	r0, r9
   12d2c:	sub	sp, fp, #28
   12d30:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12d34:	mov	r0, #5
   12d38:	ldr	r1, [sp, #48]	; 0x30
   12d3c:	ldr	r2, [fp, #-84]	; 0xffffffac
   12d40:	ldr	r3, [sp, #84]	; 0x54
   12d44:	str	r0, [sp]
   12d48:	ldr	r0, [fp, #12]
   12d4c:	str	r0, [sp, #4]
   12d50:	ldr	r0, [fp, #16]
   12d54:	str	r0, [sp, #8]
   12d58:	ldr	r0, [sp, #68]	; 0x44
   12d5c:	str	r0, [sp, #12]
   12d60:	ldr	r0, [sp, #72]	; 0x48
   12d64:	str	r0, [sp, #16]
   12d68:	ldr	r0, [sp, #76]	; 0x4c
   12d6c:	b	12d20 <__assert_fail@plt+0x1d18>
   12d70:	mov	r0, #0
   12d74:	str	r0, [fp, #-72]	; 0xffffffb8
   12d78:	ldr	r1, [sp, #92]	; 0x5c
   12d7c:	cmp	r1, #0
   12d80:	beq	12dc0 <__assert_fail@plt+0x1db8>
   12d84:	ldr	r0, [fp, #-72]	; 0xffffffb8
   12d88:	ldr	r2, [sp, #76]	; 0x4c
   12d8c:	tst	r0, #1
   12d90:	bne	12dc4 <__assert_fail@plt+0x1dbc>
   12d94:	ldrb	r0, [r1]
   12d98:	cmp	r0, #0
   12d9c:	beq	12dc4 <__assert_fail@plt+0x1dbc>
   12da0:	add	r1, r1, #1
   12da4:	cmp	r9, sl
   12da8:	strbcc	r0, [r2, r9]
   12dac:	add	r9, r9, #1
   12db0:	ldrb	r0, [r1], #1
   12db4:	cmp	r0, #0
   12db8:	bne	12da4 <__assert_fail@plt+0x1d9c>
   12dbc:	b	12dc4 <__assert_fail@plt+0x1dbc>
   12dc0:	ldr	r2, [sp, #76]	; 0x4c
   12dc4:	cmp	r9, sl
   12dc8:	movcc	r0, #0
   12dcc:	strbcc	r0, [r2, r9]
   12dd0:	mov	r0, r9
   12dd4:	sub	sp, fp, #28
   12dd8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12ddc:	mov	r2, #1
   12de0:	b	12cac <__assert_fail@plt+0x1ca4>
   12de4:	ldr	r2, [sp, #80]	; 0x50
   12de8:	mov	r7, #5
   12dec:	b	12cd4 <__assert_fail@plt+0x1ccc>
   12df0:	bl	10ffc <abort@plt>
   12df4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12df8:	add	fp, sp, #28
   12dfc:	sub	sp, sp, #28
   12e00:	movw	r5, #29016	; 0x7158
   12e04:	cmp	r2, #0
   12e08:	mov	r4, r1
   12e0c:	mov	r7, r0
   12e10:	str	r0, [sp, #20]
   12e14:	movt	r5, #2
   12e18:	movne	r5, r2
   12e1c:	bl	10f54 <__errno_location@plt>
   12e20:	mov	sl, r0
   12e24:	ldm	r5, {r0, r1}
   12e28:	ldr	r2, [r5, #40]	; 0x28
   12e2c:	ldr	r3, [r5, #44]	; 0x2c
   12e30:	add	r9, r5, #8
   12e34:	ldr	r6, [sl]
   12e38:	orr	r8, r1, #1
   12e3c:	mov	r1, #0
   12e40:	str	r6, [sp, #24]
   12e44:	stm	sp, {r0, r8, r9}
   12e48:	str	r2, [sp, #12]
   12e4c:	str	r3, [sp, #16]
   12e50:	mov	r0, #0
   12e54:	mov	r2, r7
   12e58:	mov	r3, r4
   12e5c:	mov	r6, r4
   12e60:	bl	11a88 <__assert_fail@plt+0xa80>
   12e64:	add	r7, r0, #1
   12e68:	mov	r0, r7
   12e6c:	bl	13ed0 <__assert_fail@plt+0x2ec8>
   12e70:	mov	r4, r0
   12e74:	ldr	r0, [r5]
   12e78:	ldr	r2, [r5, #44]	; 0x2c
   12e7c:	ldr	r1, [r5, #40]	; 0x28
   12e80:	mov	r3, r6
   12e84:	stm	sp, {r0, r8, r9}
   12e88:	str	r2, [sp, #16]
   12e8c:	str	r1, [sp, #12]
   12e90:	mov	r0, r4
   12e94:	mov	r1, r7
   12e98:	ldr	r2, [sp, #20]
   12e9c:	bl	11a88 <__assert_fail@plt+0xa80>
   12ea0:	ldr	r0, [sp, #24]
   12ea4:	str	r0, [sl]
   12ea8:	mov	r0, r4
   12eac:	sub	sp, fp, #28
   12eb0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12eb4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12eb8:	add	fp, sp, #28
   12ebc:	sub	sp, sp, #36	; 0x24
   12ec0:	movw	r8, #29016	; 0x7158
   12ec4:	cmp	r3, #0
   12ec8:	mov	r4, r2
   12ecc:	str	r2, [sp, #24]
   12ed0:	mov	r5, r1
   12ed4:	mov	r6, r0
   12ed8:	str	r0, [sp, #20]
   12edc:	movt	r8, #2
   12ee0:	movne	r8, r3
   12ee4:	bl	10f54 <__errno_location@plt>
   12ee8:	str	r0, [sp, #28]
   12eec:	cmp	r4, #0
   12ef0:	add	sl, r8, #8
   12ef4:	ldm	r8, {r3, r9}
   12ef8:	ldr	r7, [r0]
   12efc:	ldr	r1, [r8, #40]	; 0x28
   12f00:	ldr	r2, [r8, #44]	; 0x2c
   12f04:	mov	r0, #0
   12f08:	orreq	r9, r9, #1
   12f0c:	str	r7, [sp, #32]
   12f10:	mov	r7, r5
   12f14:	stm	sp, {r3, r9, sl}
   12f18:	str	r1, [sp, #12]
   12f1c:	str	r2, [sp, #16]
   12f20:	mov	r1, #0
   12f24:	mov	r2, r6
   12f28:	mov	r3, r5
   12f2c:	bl	11a88 <__assert_fail@plt+0xa80>
   12f30:	add	r4, r0, #1
   12f34:	mov	r5, r0
   12f38:	mov	r0, r4
   12f3c:	bl	13ed0 <__assert_fail@plt+0x2ec8>
   12f40:	mov	r6, r0
   12f44:	ldr	r0, [r8]
   12f48:	ldr	r2, [r8, #44]	; 0x2c
   12f4c:	ldr	r1, [r8, #40]	; 0x28
   12f50:	mov	r3, r7
   12f54:	stm	sp, {r0, r9, sl}
   12f58:	str	r2, [sp, #16]
   12f5c:	str	r1, [sp, #12]
   12f60:	mov	r0, r6
   12f64:	mov	r1, r4
   12f68:	ldr	r2, [sp, #20]
   12f6c:	bl	11a88 <__assert_fail@plt+0xa80>
   12f70:	ldr	r0, [sp, #24]
   12f74:	ldr	r1, [sp, #32]
   12f78:	ldr	r2, [sp, #28]
   12f7c:	cmp	r0, #0
   12f80:	str	r1, [r2]
   12f84:	strne	r5, [r0]
   12f88:	mov	r0, r6
   12f8c:	sub	sp, fp, #28
   12f90:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12f94:	push	{r4, r5, r6, r7, fp, lr}
   12f98:	add	fp, sp, #16
   12f9c:	movw	r4, #28952	; 0x7118
   12fa0:	movt	r4, #2
   12fa4:	ldrd	r6, [r4]
   12fa8:	cmp	r7, #2
   12fac:	blt	12fd8 <__assert_fail@plt+0x1fd0>
   12fb0:	add	r5, r6, #12
   12fb4:	mov	r7, #0
   12fb8:	ldr	r0, [r5, r7, lsl #3]
   12fbc:	bl	15454 <__assert_fail@plt+0x444c>
   12fc0:	ldr	r1, [r4, #4]
   12fc4:	add	r2, r7, #2
   12fc8:	add	r0, r7, #1
   12fcc:	mov	r7, r0
   12fd0:	cmp	r2, r1
   12fd4:	blt	12fb8 <__assert_fail@plt+0x1fb0>
   12fd8:	ldr	r0, [r6, #4]
   12fdc:	movw	r5, #29064	; 0x7188
   12fe0:	movt	r5, #2
   12fe4:	cmp	r0, r5
   12fe8:	beq	12ffc <__assert_fail@plt+0x1ff4>
   12fec:	bl	15454 <__assert_fail@plt+0x444c>
   12ff0:	mov	r0, #256	; 0x100
   12ff4:	str	r0, [r4, #8]
   12ff8:	str	r5, [r4, #12]
   12ffc:	add	r5, r4, #8
   13000:	cmp	r6, r5
   13004:	beq	13014 <__assert_fail@plt+0x200c>
   13008:	mov	r0, r6
   1300c:	bl	15454 <__assert_fail@plt+0x444c>
   13010:	str	r5, [r4]
   13014:	mov	r0, #1
   13018:	str	r0, [r4, #4]
   1301c:	pop	{r4, r5, r6, r7, fp, pc}
   13020:	movw	r3, #29016	; 0x7158
   13024:	mvn	r2, #0
   13028:	movt	r3, #2
   1302c:	b	13030 <__assert_fail@plt+0x2028>
   13030:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13034:	add	fp, sp, #28
   13038:	sub	sp, sp, #44	; 0x2c
   1303c:	mov	r7, r3
   13040:	str	r2, [sp, #36]	; 0x24
   13044:	str	r1, [sp, #32]
   13048:	mov	r5, r0
   1304c:	bl	10f54 <__errno_location@plt>
   13050:	cmp	r5, #0
   13054:	blt	131b8 <__assert_fail@plt+0x21b0>
   13058:	cmn	r5, #-2147483647	; 0x80000001
   1305c:	beq	131b8 <__assert_fail@plt+0x21b0>
   13060:	movw	r8, #28952	; 0x7118
   13064:	mov	r4, r0
   13068:	movt	r8, #2
   1306c:	ldr	r6, [r8]
   13070:	ldr	r1, [r8, #4]
   13074:	ldr	r0, [r0]
   13078:	str	r4, [sp, #28]
   1307c:	cmp	r1, r5
   13080:	str	r0, [sp, #24]
   13084:	ble	13090 <__assert_fail@plt+0x2088>
   13088:	mov	sl, r6
   1308c:	b	130f4 <__assert_fail@plt+0x20ec>
   13090:	mov	r0, #8
   13094:	add	r9, r8, #8
   13098:	add	r2, r5, #1
   1309c:	str	r1, [fp, #-32]	; 0xffffffe0
   130a0:	mvn	r3, #-2147483648	; 0x80000000
   130a4:	str	r0, [sp]
   130a8:	subs	r0, r6, r9
   130ac:	sub	r2, r2, r1
   130b0:	sub	r1, fp, #32
   130b4:	movne	r0, r6
   130b8:	bl	140d0 <__assert_fail@plt+0x30c8>
   130bc:	str	r0, [r8]
   130c0:	cmp	r6, r9
   130c4:	mov	sl, r0
   130c8:	ldrdeq	r0, [r8, #8]
   130cc:	stmeq	sl, {r0, r1}
   130d0:	ldr	r1, [r8, #4]
   130d4:	ldr	r2, [fp, #-32]	; 0xffffffe0
   130d8:	add	r0, sl, r1, lsl #3
   130dc:	sub	r1, r2, r1
   130e0:	lsl	r2, r1, #3
   130e4:	mov	r1, #0
   130e8:	bl	10f6c <memset@plt>
   130ec:	ldr	r0, [fp, #-32]	; 0xffffffe0
   130f0:	str	r0, [r8, #4]
   130f4:	mov	r9, sl
   130f8:	ldr	r6, [r9, r5, lsl #3]!
   130fc:	ldr	r4, [r9, #4]!
   13100:	ldm	r7, {r0, r1}
   13104:	ldr	r2, [r7, #40]	; 0x28
   13108:	ldr	r3, [r7, #44]	; 0x2c
   1310c:	orr	r8, r1, #1
   13110:	add	r1, r7, #8
   13114:	stm	sp, {r0, r8}
   13118:	add	r0, sp, #8
   1311c:	str	r1, [sp, #20]
   13120:	stm	r0, {r1, r2, r3}
   13124:	mov	r0, r4
   13128:	mov	r1, r6
   1312c:	ldr	r2, [sp, #32]
   13130:	ldr	r3, [sp, #36]	; 0x24
   13134:	bl	11a88 <__assert_fail@plt+0xa80>
   13138:	cmp	r6, r0
   1313c:	bhi	131a0 <__assert_fail@plt+0x2198>
   13140:	add	r6, r0, #1
   13144:	movw	r0, #29064	; 0x7188
   13148:	movt	r0, #2
   1314c:	str	r6, [sl, r5, lsl #3]
   13150:	cmp	r4, r0
   13154:	beq	13160 <__assert_fail@plt+0x2158>
   13158:	mov	r0, r4
   1315c:	bl	15454 <__assert_fail@plt+0x444c>
   13160:	mov	r0, r6
   13164:	bl	13ed0 <__assert_fail@plt+0x2ec8>
   13168:	str	r0, [r9]
   1316c:	mov	r4, r0
   13170:	add	r3, sp, #8
   13174:	ldr	r0, [r7]
   13178:	ldr	r1, [r7, #40]	; 0x28
   1317c:	ldr	r2, [r7, #44]	; 0x2c
   13180:	stm	sp, {r0, r8}
   13184:	ldr	r0, [sp, #20]
   13188:	stm	r3, {r0, r1, r2}
   1318c:	mov	r0, r4
   13190:	mov	r1, r6
   13194:	ldr	r2, [sp, #32]
   13198:	ldr	r3, [sp, #36]	; 0x24
   1319c:	bl	11a88 <__assert_fail@plt+0xa80>
   131a0:	ldr	r1, [sp, #24]
   131a4:	ldr	r0, [sp, #28]
   131a8:	str	r1, [r0]
   131ac:	mov	r0, r4
   131b0:	sub	sp, fp, #28
   131b4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   131b8:	bl	10ffc <abort@plt>
   131bc:	movw	r3, #29016	; 0x7158
   131c0:	movt	r3, #2
   131c4:	b	13030 <__assert_fail@plt+0x2028>
   131c8:	movw	r3, #29016	; 0x7158
   131cc:	mov	r1, r0
   131d0:	mov	r0, #0
   131d4:	mvn	r2, #0
   131d8:	movt	r3, #2
   131dc:	b	13030 <__assert_fail@plt+0x2028>
   131e0:	movw	r3, #29016	; 0x7158
   131e4:	mov	r2, r1
   131e8:	mov	r1, r0
   131ec:	mov	r0, #0
   131f0:	movt	r3, #2
   131f4:	b	13030 <__assert_fail@plt+0x2028>
   131f8:	push	{fp, lr}
   131fc:	mov	fp, sp
   13200:	sub	sp, sp, #48	; 0x30
   13204:	vmov.i32	q8, #0	; 0x00000000
   13208:	mov	ip, #32
   1320c:	mov	r3, sp
   13210:	mov	lr, r2
   13214:	cmp	r1, #10
   13218:	add	r2, r3, #16
   1321c:	vst1.64	{d16-d17}, [r3], ip
   13220:	vst1.64	{d16-d17}, [r3]
   13224:	vst1.64	{d16-d17}, [r2]
   13228:	beq	13248 <__assert_fail@plt+0x2240>
   1322c:	str	r1, [sp]
   13230:	mov	r3, sp
   13234:	mov	r1, lr
   13238:	mvn	r2, #0
   1323c:	bl	13030 <__assert_fail@plt+0x2028>
   13240:	mov	sp, fp
   13244:	pop	{fp, pc}
   13248:	bl	10ffc <abort@plt>
   1324c:	push	{r4, sl, fp, lr}
   13250:	add	fp, sp, #8
   13254:	sub	sp, sp, #48	; 0x30
   13258:	mov	ip, r3
   1325c:	mov	r3, sp
   13260:	vmov.i32	q8, #0	; 0x00000000
   13264:	mov	lr, #32
   13268:	cmp	r1, #10
   1326c:	add	r4, r3, #16
   13270:	vst1.64	{d16-d17}, [r3], lr
   13274:	vst1.64	{d16-d17}, [r3]
   13278:	vst1.64	{d16-d17}, [r4]
   1327c:	beq	1329c <__assert_fail@plt+0x2294>
   13280:	str	r1, [sp]
   13284:	mov	r1, r2
   13288:	mov	r3, sp
   1328c:	mov	r2, ip
   13290:	bl	13030 <__assert_fail@plt+0x2028>
   13294:	sub	sp, fp, #8
   13298:	pop	{r4, sl, fp, pc}
   1329c:	bl	10ffc <abort@plt>
   132a0:	push	{fp, lr}
   132a4:	mov	fp, sp
   132a8:	sub	sp, sp, #48	; 0x30
   132ac:	mov	r3, sp
   132b0:	vmov.i32	q8, #0	; 0x00000000
   132b4:	mov	ip, #32
   132b8:	cmp	r0, #10
   132bc:	add	r2, r3, #16
   132c0:	vst1.64	{d16-d17}, [r3], ip
   132c4:	vst1.64	{d16-d17}, [r3]
   132c8:	vst1.64	{d16-d17}, [r2]
   132cc:	beq	132ec <__assert_fail@plt+0x22e4>
   132d0:	str	r0, [sp]
   132d4:	mov	r3, sp
   132d8:	mov	r0, #0
   132dc:	mvn	r2, #0
   132e0:	bl	13030 <__assert_fail@plt+0x2028>
   132e4:	mov	sp, fp
   132e8:	pop	{fp, pc}
   132ec:	bl	10ffc <abort@plt>
   132f0:	push	{fp, lr}
   132f4:	mov	fp, sp
   132f8:	sub	sp, sp, #48	; 0x30
   132fc:	mov	r3, sp
   13300:	vmov.i32	q8, #0	; 0x00000000
   13304:	mov	ip, #32
   13308:	cmp	r0, #10
   1330c:	add	lr, r3, #16
   13310:	vst1.64	{d16-d17}, [r3], ip
   13314:	vst1.64	{d16-d17}, [r3]
   13318:	vst1.64	{d16-d17}, [lr]
   1331c:	beq	13338 <__assert_fail@plt+0x2330>
   13320:	str	r0, [sp]
   13324:	mov	r3, sp
   13328:	mov	r0, #0
   1332c:	bl	13030 <__assert_fail@plt+0x2028>
   13330:	mov	sp, fp
   13334:	pop	{fp, pc}
   13338:	bl	10ffc <abort@plt>
   1333c:	push	{r4, sl, fp, lr}
   13340:	add	fp, sp, #8
   13344:	sub	sp, sp, #48	; 0x30
   13348:	mov	lr, r0
   1334c:	movw	r0, #29016	; 0x7158
   13350:	mov	r3, #32
   13354:	mov	ip, r1
   13358:	mov	r4, #1
   1335c:	movt	r0, #2
   13360:	add	r1, r0, #16
   13364:	vld1.64	{d16-d17}, [r0], r3
   13368:	mov	r3, sp
   1336c:	vld1.64	{d18-d19}, [r1]
   13370:	add	r1, r3, #16
   13374:	vld1.64	{d20-d21}, [r0]
   13378:	add	r0, r3, #32
   1337c:	vst1.64	{d18-d19}, [r1]
   13380:	mov	r1, r3
   13384:	vst1.64	{d20-d21}, [r0]
   13388:	mov	r0, #28
   1338c:	and	r0, r0, r2, lsr #3
   13390:	and	r2, r2, #31
   13394:	vst1.64	{d16-d17}, [r1], r0
   13398:	ldr	r0, [r1, #8]
   1339c:	bic	r4, r4, r0, lsr r2
   133a0:	eor	r0, r0, r4, lsl r2
   133a4:	mov	r2, ip
   133a8:	str	r0, [r1, #8]
   133ac:	mov	r0, #0
   133b0:	mov	r1, lr
   133b4:	bl	13030 <__assert_fail@plt+0x2028>
   133b8:	sub	sp, fp, #8
   133bc:	pop	{r4, sl, fp, pc}
   133c0:	push	{fp, lr}
   133c4:	mov	fp, sp
   133c8:	sub	sp, sp, #48	; 0x30
   133cc:	mov	ip, r0
   133d0:	movw	r0, #29016	; 0x7158
   133d4:	mov	r3, #32
   133d8:	movt	r0, #2
   133dc:	add	r2, r0, #16
   133e0:	vld1.64	{d16-d17}, [r0], r3
   133e4:	mov	r3, sp
   133e8:	vld1.64	{d18-d19}, [r2]
   133ec:	add	r2, r3, #16
   133f0:	vld1.64	{d20-d21}, [r0]
   133f4:	add	r0, r3, #32
   133f8:	vst1.64	{d18-d19}, [r2]
   133fc:	mov	r2, r3
   13400:	vst1.64	{d20-d21}, [r0]
   13404:	mov	r0, #28
   13408:	and	r0, r0, r1, lsr #3
   1340c:	and	r1, r1, #31
   13410:	vst1.64	{d16-d17}, [r2], r0
   13414:	mov	r0, #1
   13418:	ldr	lr, [r2, #8]
   1341c:	bic	r0, r0, lr, lsr r1
   13420:	eor	r0, lr, r0, lsl r1
   13424:	mov	r1, ip
   13428:	str	r0, [r2, #8]
   1342c:	mov	r0, #0
   13430:	mvn	r2, #0
   13434:	bl	13030 <__assert_fail@plt+0x2028>
   13438:	mov	sp, fp
   1343c:	pop	{fp, pc}
   13440:	push	{fp, lr}
   13444:	mov	fp, sp
   13448:	sub	sp, sp, #48	; 0x30
   1344c:	movw	r2, #29016	; 0x7158
   13450:	mov	r3, #32
   13454:	mov	r1, r0
   13458:	movt	r2, #2
   1345c:	add	r0, r2, #16
   13460:	vld1.64	{d16-d17}, [r2], r3
   13464:	mov	r3, sp
   13468:	vld1.64	{d18-d19}, [r0]
   1346c:	add	r0, r3, #16
   13470:	vld1.64	{d20-d21}, [r2]
   13474:	mov	r2, r3
   13478:	vst1.64	{d18-d19}, [r0]
   1347c:	add	r0, r3, #32
   13480:	vst1.64	{d20-d21}, [r0]
   13484:	mov	r0, #12
   13488:	vst1.64	{d16-d17}, [r2], r0
   1348c:	ldr	r0, [r2]
   13490:	orr	r0, r0, #67108864	; 0x4000000
   13494:	str	r0, [r2]
   13498:	mov	r0, #0
   1349c:	mvn	r2, #0
   134a0:	bl	13030 <__assert_fail@plt+0x2028>
   134a4:	mov	sp, fp
   134a8:	pop	{fp, pc}
   134ac:	push	{fp, lr}
   134b0:	mov	fp, sp
   134b4:	sub	sp, sp, #48	; 0x30
   134b8:	mov	ip, r1
   134bc:	mov	r1, r0
   134c0:	movw	r0, #29016	; 0x7158
   134c4:	mov	r3, #32
   134c8:	movt	r0, #2
   134cc:	add	r2, r0, #16
   134d0:	vld1.64	{d16-d17}, [r0], r3
   134d4:	mov	r3, sp
   134d8:	vld1.64	{d18-d19}, [r2]
   134dc:	add	r2, r3, #16
   134e0:	vld1.64	{d20-d21}, [r0]
   134e4:	add	r0, r3, #32
   134e8:	vst1.64	{d18-d19}, [r2]
   134ec:	mov	r2, r3
   134f0:	vst1.64	{d20-d21}, [r0]
   134f4:	mov	r0, #12
   134f8:	vst1.64	{d16-d17}, [r2], r0
   134fc:	ldr	r0, [r2]
   13500:	orr	r0, r0, #67108864	; 0x4000000
   13504:	str	r0, [r2]
   13508:	mov	r0, #0
   1350c:	mov	r2, ip
   13510:	bl	13030 <__assert_fail@plt+0x2028>
   13514:	mov	sp, fp
   13518:	pop	{fp, pc}
   1351c:	push	{r4, sl, fp, lr}
   13520:	add	fp, sp, #8
   13524:	sub	sp, sp, #96	; 0x60
   13528:	mov	ip, r2
   1352c:	mov	r2, sp
   13530:	vmov.i32	q8, #0	; 0x00000000
   13534:	mov	r4, #28
   13538:	cmp	r1, #10
   1353c:	mov	r3, r2
   13540:	add	lr, r2, #16
   13544:	vst1.64	{d16-d17}, [r3], r4
   13548:	vst1.64	{d16-d17}, [lr]
   1354c:	vst1.32	{d16-d17}, [r3]
   13550:	beq	135a0 <__assert_fail@plt+0x2598>
   13554:	vld1.64	{d16-d17}, [r2], r4
   13558:	vld1.64	{d18-d19}, [lr]
   1355c:	add	r3, sp, #48	; 0x30
   13560:	add	r4, r3, #4
   13564:	vld1.32	{d20-d21}, [r2]
   13568:	add	r2, r3, #20
   1356c:	vst1.32	{d16-d17}, [r4]
   13570:	vst1.32	{d18-d19}, [r2]
   13574:	add	r2, r3, #32
   13578:	vst1.32	{d20-d21}, [r2]
   1357c:	str	r1, [sp, #48]	; 0x30
   13580:	mvn	r2, #0
   13584:	ldr	r1, [sp, #60]	; 0x3c
   13588:	orr	r1, r1, #67108864	; 0x4000000
   1358c:	str	r1, [sp, #60]	; 0x3c
   13590:	mov	r1, ip
   13594:	bl	13030 <__assert_fail@plt+0x2028>
   13598:	sub	sp, fp, #8
   1359c:	pop	{r4, sl, fp, pc}
   135a0:	bl	10ffc <abort@plt>
   135a4:	push	{r4, r5, fp, lr}
   135a8:	add	fp, sp, #8
   135ac:	sub	sp, sp, #48	; 0x30
   135b0:	mov	ip, r3
   135b4:	movw	r3, #29016	; 0x7158
   135b8:	mov	lr, #32
   135bc:	cmp	r1, #0
   135c0:	mov	r5, sp
   135c4:	movt	r3, #2
   135c8:	cmpne	r2, #0
   135cc:	add	r4, r3, #16
   135d0:	vld1.64	{d16-d17}, [r3], lr
   135d4:	vld1.64	{d18-d19}, [r4]
   135d8:	add	r4, r5, #16
   135dc:	vld1.64	{d20-d21}, [r3]
   135e0:	vst1.64	{d16-d17}, [r5], lr
   135e4:	mov	r3, #10
   135e8:	vst1.64	{d18-d19}, [r4]
   135ec:	vst1.64	{d20-d21}, [r5]
   135f0:	str	r3, [sp]
   135f4:	bne	135fc <__assert_fail@plt+0x25f4>
   135f8:	bl	10ffc <abort@plt>
   135fc:	str	r2, [sp, #44]	; 0x2c
   13600:	str	r1, [sp, #40]	; 0x28
   13604:	mov	r3, sp
   13608:	mov	r1, ip
   1360c:	mvn	r2, #0
   13610:	bl	13030 <__assert_fail@plt+0x2028>
   13614:	sub	sp, fp, #8
   13618:	pop	{r4, r5, fp, pc}
   1361c:	push	{r4, r5, fp, lr}
   13620:	add	fp, sp, #8
   13624:	sub	sp, sp, #48	; 0x30
   13628:	mov	lr, r3
   1362c:	movw	r3, #29016	; 0x7158
   13630:	mov	ip, #32
   13634:	cmp	r1, #0
   13638:	mov	r5, sp
   1363c:	movt	r3, #2
   13640:	cmpne	r2, #0
   13644:	add	r4, r3, #16
   13648:	vld1.64	{d16-d17}, [r3], ip
   1364c:	vld1.64	{d18-d19}, [r4]
   13650:	add	r4, r5, #16
   13654:	vld1.64	{d20-d21}, [r3]
   13658:	vst1.64	{d16-d17}, [r5], ip
   1365c:	mov	r3, #10
   13660:	vst1.64	{d18-d19}, [r4]
   13664:	vst1.64	{d20-d21}, [r5]
   13668:	str	r3, [sp]
   1366c:	bne	13674 <__assert_fail@plt+0x266c>
   13670:	bl	10ffc <abort@plt>
   13674:	ldr	ip, [fp, #8]
   13678:	str	r2, [sp, #44]	; 0x2c
   1367c:	str	r1, [sp, #40]	; 0x28
   13680:	mov	r3, sp
   13684:	mov	r1, lr
   13688:	mov	r2, ip
   1368c:	bl	13030 <__assert_fail@plt+0x2028>
   13690:	sub	sp, fp, #8
   13694:	pop	{r4, r5, fp, pc}
   13698:	push	{r4, sl, fp, lr}
   1369c:	add	fp, sp, #8
   136a0:	sub	sp, sp, #48	; 0x30
   136a4:	mov	ip, r2
   136a8:	movw	r2, #29016	; 0x7158
   136ac:	mov	lr, #32
   136b0:	cmp	r0, #0
   136b4:	mov	r4, sp
   136b8:	movt	r2, #2
   136bc:	cmpne	r1, #0
   136c0:	add	r3, r2, #16
   136c4:	vld1.64	{d16-d17}, [r2], lr
   136c8:	vld1.64	{d18-d19}, [r3]
   136cc:	add	r3, r4, #16
   136d0:	vld1.64	{d20-d21}, [r2]
   136d4:	vst1.64	{d16-d17}, [r4], lr
   136d8:	mov	r2, #10
   136dc:	vst1.64	{d18-d19}, [r3]
   136e0:	vst1.64	{d20-d21}, [r4]
   136e4:	str	r2, [sp]
   136e8:	bne	136f0 <__assert_fail@plt+0x26e8>
   136ec:	bl	10ffc <abort@plt>
   136f0:	str	r1, [sp, #44]	; 0x2c
   136f4:	str	r0, [sp, #40]	; 0x28
   136f8:	mov	r3, sp
   136fc:	mov	r0, #0
   13700:	mov	r1, ip
   13704:	mvn	r2, #0
   13708:	bl	13030 <__assert_fail@plt+0x2028>
   1370c:	sub	sp, fp, #8
   13710:	pop	{r4, sl, fp, pc}
   13714:	push	{r4, r5, fp, lr}
   13718:	add	fp, sp, #8
   1371c:	sub	sp, sp, #48	; 0x30
   13720:	mov	lr, r2
   13724:	movw	r2, #29016	; 0x7158
   13728:	mov	ip, r3
   1372c:	mov	r3, #32
   13730:	cmp	r0, #0
   13734:	mov	r5, sp
   13738:	movt	r2, #2
   1373c:	cmpne	r1, #0
   13740:	add	r4, r2, #16
   13744:	vld1.64	{d16-d17}, [r2], r3
   13748:	vld1.64	{d18-d19}, [r4]
   1374c:	add	r4, r5, #16
   13750:	vld1.64	{d20-d21}, [r2]
   13754:	vst1.64	{d16-d17}, [r5], r3
   13758:	mov	r2, #10
   1375c:	vst1.64	{d18-d19}, [r4]
   13760:	vst1.64	{d20-d21}, [r5]
   13764:	str	r2, [sp]
   13768:	bne	13770 <__assert_fail@plt+0x2768>
   1376c:	bl	10ffc <abort@plt>
   13770:	str	r1, [sp, #44]	; 0x2c
   13774:	str	r0, [sp, #40]	; 0x28
   13778:	mov	r3, sp
   1377c:	mov	r0, #0
   13780:	mov	r1, lr
   13784:	mov	r2, ip
   13788:	bl	13030 <__assert_fail@plt+0x2028>
   1378c:	sub	sp, fp, #8
   13790:	pop	{r4, r5, fp, pc}
   13794:	movw	r3, #28904	; 0x70e8
   13798:	movt	r3, #2
   1379c:	b	13030 <__assert_fail@plt+0x2028>
   137a0:	movw	r3, #28904	; 0x70e8
   137a4:	mov	r2, r1
   137a8:	mov	r1, r0
   137ac:	mov	r0, #0
   137b0:	movt	r3, #2
   137b4:	b	13030 <__assert_fail@plt+0x2028>
   137b8:	movw	r3, #28904	; 0x70e8
   137bc:	mvn	r2, #0
   137c0:	movt	r3, #2
   137c4:	b	13030 <__assert_fail@plt+0x2028>
   137c8:	movw	r3, #28904	; 0x70e8
   137cc:	mov	r1, r0
   137d0:	mov	r0, #0
   137d4:	mvn	r2, #0
   137d8:	movt	r3, #2
   137dc:	b	13030 <__assert_fail@plt+0x2028>
   137e0:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   137e4:	add	fp, sp, #24
   137e8:	sub	sp, sp, #32
   137ec:	ldr	r6, [fp, #12]
   137f0:	ldr	r7, [fp, #8]
   137f4:	mov	r4, r2
   137f8:	mov	r8, r0
   137fc:	cmp	r1, #0
   13800:	beq	13828 <__assert_fail@plt+0x2820>
   13804:	movw	r2, #24076	; 0x5e0c
   13808:	mov	r5, r1
   1380c:	str	r3, [sp, #4]
   13810:	str	r4, [sp]
   13814:	mov	r0, r8
   13818:	mov	r1, #1
   1381c:	movt	r2, #1
   13820:	mov	r3, r5
   13824:	b	13840 <__assert_fail@plt+0x2838>
   13828:	movw	r2, #24088	; 0x5e18
   1382c:	str	r3, [sp]
   13830:	mov	r0, r8
   13834:	mov	r1, #1
   13838:	mov	r3, r4
   1383c:	movt	r2, #1
   13840:	bl	10f90 <__fprintf_chk@plt>
   13844:	movw	r1, #24095	; 0x5e1f
   13848:	mov	r0, #0
   1384c:	mov	r2, #5
   13850:	movt	r1, #1
   13854:	bl	10e4c <dcgettext@plt>
   13858:	movw	r2, #24813	; 0x60ed
   1385c:	mov	r3, r0
   13860:	movw	r0, #2022	; 0x7e6
   13864:	mov	r1, #1
   13868:	str	r0, [sp]
   1386c:	movt	r2, #1
   13870:	mov	r0, r8
   13874:	bl	10f90 <__fprintf_chk@plt>
   13878:	movw	r4, #22968	; 0x59b8
   1387c:	mov	r1, r8
   13880:	movt	r4, #1
   13884:	mov	r0, r4
   13888:	bl	10dc8 <fputs_unlocked@plt>
   1388c:	movw	r1, #24099	; 0x5e23
   13890:	mov	r0, #0
   13894:	mov	r2, #5
   13898:	movt	r1, #1
   1389c:	bl	10e4c <dcgettext@plt>
   138a0:	movw	r3, #24270	; 0x5ece
   138a4:	mov	r2, r0
   138a8:	mov	r0, r8
   138ac:	mov	r1, #1
   138b0:	movt	r3, #1
   138b4:	bl	10f90 <__fprintf_chk@plt>
   138b8:	mov	r0, r4
   138bc:	mov	r1, r8
   138c0:	bl	10dc8 <fputs_unlocked@plt>
   138c4:	cmp	r6, #9
   138c8:	bhi	13904 <__assert_fail@plt+0x28fc>
   138cc:	add	r0, pc, #0
   138d0:	ldr	pc, [r0, r6, lsl #2]
   138d4:	strdeq	r3, [r1], -ip
   138d8:	andeq	r3, r1, r0, lsl r9
   138dc:	andeq	r3, r1, r0, asr #18
   138e0:	andeq	r3, r1, r8, ror #18
   138e4:	muleq	r1, r0, r9
   138e8:			; <UNDEFINED> instruction: 0x000139b8
   138ec:	andeq	r3, r1, r0, ror #19
   138f0:	andeq	r3, r1, r8, lsl sl
   138f4:	andeq	r3, r1, r0, asr #21
   138f8:	andeq	r3, r1, r8, ror #20
   138fc:	sub	sp, fp, #24
   13900:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   13904:	movw	r1, #24623	; 0x602f
   13908:	movt	r1, #1
   1390c:	b	13a70 <__assert_fail@plt+0x2a68>
   13910:	movw	r1, #24304	; 0x5ef0
   13914:	mov	r0, #0
   13918:	mov	r2, #5
   1391c:	movt	r1, #1
   13920:	bl	10e4c <dcgettext@plt>
   13924:	ldr	r3, [r7]
   13928:	mov	r2, r0
   1392c:	mov	r0, r8
   13930:	mov	r1, #1
   13934:	sub	sp, fp, #24
   13938:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   1393c:	b	10f90 <__fprintf_chk@plt>
   13940:	movw	r1, #24320	; 0x5f00
   13944:	mov	r0, #0
   13948:	mov	r2, #5
   1394c:	movt	r1, #1
   13950:	bl	10e4c <dcgettext@plt>
   13954:	mov	r2, r0
   13958:	ldr	r3, [r7]
   1395c:	ldr	r0, [r7, #4]
   13960:	str	r0, [sp]
   13964:	b	13a54 <__assert_fail@plt+0x2a4c>
   13968:	movw	r1, #24343	; 0x5f17
   1396c:	mov	r0, #0
   13970:	mov	r2, #5
   13974:	movt	r1, #1
   13978:	bl	10e4c <dcgettext@plt>
   1397c:	ldr	r3, [r7]
   13980:	mov	r2, r0
   13984:	ldmib	r7, {r0, r1}
   13988:	stm	sp, {r0, r1}
   1398c:	b	13a54 <__assert_fail@plt+0x2a4c>
   13990:	movw	r1, #24371	; 0x5f33
   13994:	mov	r0, #0
   13998:	mov	r2, #5
   1399c:	movt	r1, #1
   139a0:	bl	10e4c <dcgettext@plt>
   139a4:	ldr	r3, [r7]
   139a8:	mov	r2, r0
   139ac:	ldmib	r7, {r0, r1, r7}
   139b0:	stm	sp, {r0, r1, r7}
   139b4:	b	13a54 <__assert_fail@plt+0x2a4c>
   139b8:	movw	r1, #24403	; 0x5f53
   139bc:	mov	r0, #0
   139c0:	mov	r2, #5
   139c4:	movt	r1, #1
   139c8:	bl	10e4c <dcgettext@plt>
   139cc:	ldr	r3, [r7]
   139d0:	mov	r2, r0
   139d4:	ldmib	r7, {r0, r1, r6, r7}
   139d8:	stm	sp, {r0, r1, r6, r7}
   139dc:	b	13a54 <__assert_fail@plt+0x2a4c>
   139e0:	movw	r1, #24439	; 0x5f77
   139e4:	mov	r0, #0
   139e8:	mov	r2, #5
   139ec:	movt	r1, #1
   139f0:	bl	10e4c <dcgettext@plt>
   139f4:	ldr	r3, [r7]
   139f8:	mov	r2, r0
   139fc:	ldmib	r7, {r0, r1, r6}
   13a00:	ldr	r5, [r7, #16]
   13a04:	ldr	r7, [r7, #20]
   13a08:	stm	sp, {r0, r1, r6}
   13a0c:	str	r5, [sp, #12]
   13a10:	str	r7, [sp, #16]
   13a14:	b	13a54 <__assert_fail@plt+0x2a4c>
   13a18:	movw	r1, #24479	; 0x5f9f
   13a1c:	mov	r0, #0
   13a20:	mov	r2, #5
   13a24:	movt	r1, #1
   13a28:	bl	10e4c <dcgettext@plt>
   13a2c:	ldr	r3, [r7]
   13a30:	mov	r2, r0
   13a34:	ldmib	r7, {r0, r1, r6}
   13a38:	ldr	r5, [r7, #16]
   13a3c:	ldr	r4, [r7, #20]
   13a40:	ldr	r7, [r7, #24]
   13a44:	stm	sp, {r0, r1, r6}
   13a48:	str	r5, [sp, #12]
   13a4c:	str	r4, [sp, #16]
   13a50:	str	r7, [sp, #20]
   13a54:	mov	r0, r8
   13a58:	mov	r1, #1
   13a5c:	bl	10f90 <__fprintf_chk@plt>
   13a60:	sub	sp, fp, #24
   13a64:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   13a68:	movw	r1, #24571	; 0x5ffb
   13a6c:	movt	r1, #1
   13a70:	mov	r0, #0
   13a74:	mov	r2, #5
   13a78:	bl	10e4c <dcgettext@plt>
   13a7c:	mov	ip, r0
   13a80:	ldr	r3, [r7]
   13a84:	ldr	r0, [r7, #4]
   13a88:	ldr	r1, [r7, #8]
   13a8c:	ldr	r6, [r7, #12]
   13a90:	ldr	r5, [r7, #16]
   13a94:	ldr	r4, [r7, #20]
   13a98:	ldr	r2, [r7, #24]
   13a9c:	ldr	lr, [r7, #28]
   13aa0:	ldr	r7, [r7, #32]
   13aa4:	stm	sp, {r0, r1, r6}
   13aa8:	str	r5, [sp, #12]
   13aac:	str	r4, [sp, #16]
   13ab0:	str	r2, [sp, #20]
   13ab4:	str	lr, [sp, #24]
   13ab8:	str	r7, [sp, #28]
   13abc:	b	13b04 <__assert_fail@plt+0x2afc>
   13ac0:	movw	r1, #24523	; 0x5fcb
   13ac4:	mov	r0, #0
   13ac8:	mov	r2, #5
   13acc:	movt	r1, #1
   13ad0:	bl	10e4c <dcgettext@plt>
   13ad4:	mov	ip, r0
   13ad8:	ldr	r3, [r7]
   13adc:	ldmib	r7, {r0, r1, r6}
   13ae0:	ldr	r5, [r7, #16]
   13ae4:	ldr	r4, [r7, #20]
   13ae8:	ldr	r2, [r7, #24]
   13aec:	ldr	r7, [r7, #28]
   13af0:	stm	sp, {r0, r1, r6}
   13af4:	str	r5, [sp, #12]
   13af8:	str	r4, [sp, #16]
   13afc:	str	r2, [sp, #20]
   13b00:	str	r7, [sp, #24]
   13b04:	mov	r0, r8
   13b08:	mov	r1, #1
   13b0c:	mov	r2, ip
   13b10:	bl	10f90 <__fprintf_chk@plt>
   13b14:	sub	sp, fp, #24
   13b18:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   13b1c:	push	{r4, sl, fp, lr}
   13b20:	add	fp, sp, #8
   13b24:	sub	sp, sp, #8
   13b28:	ldr	ip, [fp, #8]
   13b2c:	mov	lr, #0
   13b30:	ldr	r4, [ip, lr, lsl #2]
   13b34:	add	lr, lr, #1
   13b38:	cmp	r4, #0
   13b3c:	bne	13b30 <__assert_fail@plt+0x2b28>
   13b40:	sub	r4, lr, #1
   13b44:	str	ip, [sp]
   13b48:	str	r4, [sp, #4]
   13b4c:	bl	137e0 <__assert_fail@plt+0x27d8>
   13b50:	sub	sp, fp, #8
   13b54:	pop	{r4, sl, fp, pc}
   13b58:	push	{fp, lr}
   13b5c:	mov	fp, sp
   13b60:	sub	sp, sp, #48	; 0x30
   13b64:	ldr	ip, [fp, #8]
   13b68:	ldr	lr, [ip]
   13b6c:	cmp	lr, #0
   13b70:	str	lr, [sp, #8]
   13b74:	beq	13c10 <__assert_fail@plt+0x2c08>
   13b78:	ldr	lr, [ip, #4]
   13b7c:	cmp	lr, #0
   13b80:	str	lr, [sp, #12]
   13b84:	beq	13c18 <__assert_fail@plt+0x2c10>
   13b88:	ldr	lr, [ip, #8]
   13b8c:	cmp	lr, #0
   13b90:	str	lr, [sp, #16]
   13b94:	beq	13c20 <__assert_fail@plt+0x2c18>
   13b98:	ldr	lr, [ip, #12]
   13b9c:	cmp	lr, #0
   13ba0:	str	lr, [sp, #20]
   13ba4:	beq	13c28 <__assert_fail@plt+0x2c20>
   13ba8:	ldr	lr, [ip, #16]
   13bac:	cmp	lr, #0
   13bb0:	str	lr, [sp, #24]
   13bb4:	beq	13c30 <__assert_fail@plt+0x2c28>
   13bb8:	ldr	lr, [ip, #20]
   13bbc:	cmp	lr, #0
   13bc0:	str	lr, [sp, #28]
   13bc4:	beq	13c38 <__assert_fail@plt+0x2c30>
   13bc8:	ldr	lr, [ip, #24]
   13bcc:	cmp	lr, #0
   13bd0:	str	lr, [sp, #32]
   13bd4:	beq	13c40 <__assert_fail@plt+0x2c38>
   13bd8:	ldr	lr, [ip, #28]
   13bdc:	cmp	lr, #0
   13be0:	str	lr, [sp, #36]	; 0x24
   13be4:	beq	13c48 <__assert_fail@plt+0x2c40>
   13be8:	ldr	lr, [ip, #32]
   13bec:	cmp	lr, #0
   13bf0:	str	lr, [sp, #40]	; 0x28
   13bf4:	beq	13c50 <__assert_fail@plt+0x2c48>
   13bf8:	ldr	lr, [ip, #36]	; 0x24
   13bfc:	mov	ip, #10
   13c00:	cmp	lr, #0
   13c04:	str	lr, [sp, #44]	; 0x2c
   13c08:	movweq	ip, #9
   13c0c:	b	13c54 <__assert_fail@plt+0x2c4c>
   13c10:	mov	ip, #0
   13c14:	b	13c54 <__assert_fail@plt+0x2c4c>
   13c18:	mov	ip, #1
   13c1c:	b	13c54 <__assert_fail@plt+0x2c4c>
   13c20:	mov	ip, #2
   13c24:	b	13c54 <__assert_fail@plt+0x2c4c>
   13c28:	mov	ip, #3
   13c2c:	b	13c54 <__assert_fail@plt+0x2c4c>
   13c30:	mov	ip, #4
   13c34:	b	13c54 <__assert_fail@plt+0x2c4c>
   13c38:	mov	ip, #5
   13c3c:	b	13c54 <__assert_fail@plt+0x2c4c>
   13c40:	mov	ip, #6
   13c44:	b	13c54 <__assert_fail@plt+0x2c4c>
   13c48:	mov	ip, #7
   13c4c:	b	13c54 <__assert_fail@plt+0x2c4c>
   13c50:	mov	ip, #8
   13c54:	add	lr, sp, #8
   13c58:	str	ip, [sp, #4]
   13c5c:	str	lr, [sp]
   13c60:	bl	137e0 <__assert_fail@plt+0x27d8>
   13c64:	mov	sp, fp
   13c68:	pop	{fp, pc}
   13c6c:	push	{fp, lr}
   13c70:	mov	fp, sp
   13c74:	sub	sp, sp, #56	; 0x38
   13c78:	add	ip, fp, #8
   13c7c:	str	ip, [sp, #12]
   13c80:	ldr	lr, [fp, #8]
   13c84:	cmp	lr, #0
   13c88:	str	lr, [sp, #16]
   13c8c:	beq	13d28 <__assert_fail@plt+0x2d20>
   13c90:	ldr	lr, [ip, #4]
   13c94:	cmp	lr, #0
   13c98:	str	lr, [sp, #20]
   13c9c:	beq	13d30 <__assert_fail@plt+0x2d28>
   13ca0:	ldr	lr, [ip, #8]
   13ca4:	cmp	lr, #0
   13ca8:	str	lr, [sp, #24]
   13cac:	beq	13d38 <__assert_fail@plt+0x2d30>
   13cb0:	ldr	lr, [ip, #12]
   13cb4:	cmp	lr, #0
   13cb8:	str	lr, [sp, #28]
   13cbc:	beq	13d40 <__assert_fail@plt+0x2d38>
   13cc0:	ldr	lr, [ip, #16]
   13cc4:	cmp	lr, #0
   13cc8:	str	lr, [sp, #32]
   13ccc:	beq	13d48 <__assert_fail@plt+0x2d40>
   13cd0:	ldr	lr, [ip, #20]
   13cd4:	cmp	lr, #0
   13cd8:	str	lr, [sp, #36]	; 0x24
   13cdc:	beq	13d50 <__assert_fail@plt+0x2d48>
   13ce0:	ldr	lr, [ip, #24]
   13ce4:	cmp	lr, #0
   13ce8:	str	lr, [sp, #40]	; 0x28
   13cec:	beq	13d58 <__assert_fail@plt+0x2d50>
   13cf0:	ldr	lr, [ip, #28]
   13cf4:	cmp	lr, #0
   13cf8:	str	lr, [sp, #44]	; 0x2c
   13cfc:	beq	13d60 <__assert_fail@plt+0x2d58>
   13d00:	ldr	lr, [ip, #32]
   13d04:	cmp	lr, #0
   13d08:	str	lr, [sp, #48]	; 0x30
   13d0c:	beq	13d68 <__assert_fail@plt+0x2d60>
   13d10:	ldr	lr, [ip, #36]	; 0x24
   13d14:	mov	ip, #10
   13d18:	cmp	lr, #0
   13d1c:	str	lr, [sp, #52]	; 0x34
   13d20:	movweq	ip, #9
   13d24:	b	13d6c <__assert_fail@plt+0x2d64>
   13d28:	mov	ip, #0
   13d2c:	b	13d6c <__assert_fail@plt+0x2d64>
   13d30:	mov	ip, #1
   13d34:	b	13d6c <__assert_fail@plt+0x2d64>
   13d38:	mov	ip, #2
   13d3c:	b	13d6c <__assert_fail@plt+0x2d64>
   13d40:	mov	ip, #3
   13d44:	b	13d6c <__assert_fail@plt+0x2d64>
   13d48:	mov	ip, #4
   13d4c:	b	13d6c <__assert_fail@plt+0x2d64>
   13d50:	mov	ip, #5
   13d54:	b	13d6c <__assert_fail@plt+0x2d64>
   13d58:	mov	ip, #6
   13d5c:	b	13d6c <__assert_fail@plt+0x2d64>
   13d60:	mov	ip, #7
   13d64:	b	13d6c <__assert_fail@plt+0x2d64>
   13d68:	mov	ip, #8
   13d6c:	add	lr, sp, #16
   13d70:	str	ip, [sp, #4]
   13d74:	str	lr, [sp]
   13d78:	bl	137e0 <__assert_fail@plt+0x27d8>
   13d7c:	mov	sp, fp
   13d80:	pop	{fp, pc}
   13d84:	push	{fp, lr}
   13d88:	mov	fp, sp
   13d8c:	movw	r0, #28988	; 0x713c
   13d90:	movt	r0, #2
   13d94:	ldr	r1, [r0]
   13d98:	movw	r0, #22968	; 0x59b8
   13d9c:	movt	r0, #1
   13da0:	bl	10dc8 <fputs_unlocked@plt>
   13da4:	movw	r1, #24683	; 0x606b
   13da8:	mov	r0, #0
   13dac:	mov	r2, #5
   13db0:	movt	r1, #1
   13db4:	bl	10e4c <dcgettext@plt>
   13db8:	movw	r2, #24703	; 0x607f
   13dbc:	mov	r1, r0
   13dc0:	mov	r0, #1
   13dc4:	movt	r2, #1
   13dc8:	bl	10f78 <__printf_chk@plt>
   13dcc:	movw	r1, #24725	; 0x6095
   13dd0:	mov	r0, #0
   13dd4:	mov	r2, #5
   13dd8:	movt	r1, #1
   13ddc:	bl	10e4c <dcgettext@plt>
   13de0:	movw	r2, #23216	; 0x5ab0
   13de4:	movw	r3, #23403	; 0x5b6b
   13de8:	mov	r1, r0
   13dec:	mov	r0, #1
   13df0:	movt	r2, #1
   13df4:	movt	r3, #1
   13df8:	bl	10f78 <__printf_chk@plt>
   13dfc:	movw	r1, #24745	; 0x60a9
   13e00:	mov	r0, #0
   13e04:	mov	r2, #5
   13e08:	movt	r1, #1
   13e0c:	bl	10e4c <dcgettext@plt>
   13e10:	movw	r2, #24784	; 0x60d0
   13e14:	mov	r1, r0
   13e18:	mov	r0, #1
   13e1c:	movt	r2, #1
   13e20:	pop	{fp, lr}
   13e24:	b	10f78 <__printf_chk@plt>
   13e28:	push	{r4, r5, r6, sl, fp, lr}
   13e2c:	add	fp, sp, #16
   13e30:	mov	r4, r2
   13e34:	mov	r5, r1
   13e38:	mov	r6, r0
   13e3c:	bl	155b8 <__assert_fail@plt+0x45b0>
   13e40:	cmp	r0, #0
   13e44:	popne	{r4, r5, r6, sl, fp, pc}
   13e48:	cmp	r6, #0
   13e4c:	beq	13e60 <__assert_fail@plt+0x2e58>
   13e50:	cmp	r5, #0
   13e54:	cmpne	r4, #0
   13e58:	bne	13e60 <__assert_fail@plt+0x2e58>
   13e5c:	pop	{r4, r5, r6, sl, fp, pc}
   13e60:	bl	14400 <__assert_fail@plt+0x33f8>
   13e64:	push	{r4, r5, r6, sl, fp, lr}
   13e68:	add	fp, sp, #16
   13e6c:	mov	r4, r2
   13e70:	mov	r5, r1
   13e74:	mov	r6, r0
   13e78:	bl	155b8 <__assert_fail@plt+0x45b0>
   13e7c:	cmp	r0, #0
   13e80:	popne	{r4, r5, r6, sl, fp, pc}
   13e84:	cmp	r6, #0
   13e88:	beq	13e9c <__assert_fail@plt+0x2e94>
   13e8c:	cmp	r5, #0
   13e90:	cmpne	r4, #0
   13e94:	bne	13e9c <__assert_fail@plt+0x2e94>
   13e98:	pop	{r4, r5, r6, sl, fp, pc}
   13e9c:	bl	14400 <__assert_fail@plt+0x33f8>
   13ea0:	push	{fp, lr}
   13ea4:	mov	fp, sp
   13ea8:	bl	15248 <__assert_fail@plt+0x4240>
   13eac:	cmp	r0, #0
   13eb0:	popne	{fp, pc}
   13eb4:	bl	14400 <__assert_fail@plt+0x33f8>
   13eb8:	push	{fp, lr}
   13ebc:	mov	fp, sp
   13ec0:	bl	15248 <__assert_fail@plt+0x4240>
   13ec4:	cmp	r0, #0
   13ec8:	popne	{fp, pc}
   13ecc:	bl	14400 <__assert_fail@plt+0x33f8>
   13ed0:	push	{fp, lr}
   13ed4:	mov	fp, sp
   13ed8:	bl	15248 <__assert_fail@plt+0x4240>
   13edc:	cmp	r0, #0
   13ee0:	popne	{fp, pc}
   13ee4:	bl	14400 <__assert_fail@plt+0x33f8>
   13ee8:	push	{r4, r5, fp, lr}
   13eec:	add	fp, sp, #8
   13ef0:	mov	r4, r1
   13ef4:	mov	r5, r0
   13ef8:	bl	15278 <__assert_fail@plt+0x4270>
   13efc:	cmp	r0, #0
   13f00:	popne	{r4, r5, fp, pc}
   13f04:	cmp	r5, #0
   13f08:	beq	13f18 <__assert_fail@plt+0x2f10>
   13f0c:	cmp	r4, #0
   13f10:	bne	13f18 <__assert_fail@plt+0x2f10>
   13f14:	pop	{r4, r5, fp, pc}
   13f18:	bl	14400 <__assert_fail@plt+0x33f8>
   13f1c:	push	{fp, lr}
   13f20:	mov	fp, sp
   13f24:	cmp	r1, #0
   13f28:	orreq	r1, r1, #1
   13f2c:	bl	15278 <__assert_fail@plt+0x4270>
   13f30:	cmp	r0, #0
   13f34:	popne	{fp, pc}
   13f38:	bl	14400 <__assert_fail@plt+0x33f8>
   13f3c:	push	{fp, lr}
   13f40:	mov	fp, sp
   13f44:	clz	r3, r2
   13f48:	lsr	ip, r3, #5
   13f4c:	clz	r3, r1
   13f50:	lsr	r3, r3, #5
   13f54:	orrs	r3, r3, ip
   13f58:	movwne	r1, #1
   13f5c:	movwne	r2, #1
   13f60:	bl	155b8 <__assert_fail@plt+0x45b0>
   13f64:	cmp	r0, #0
   13f68:	popne	{fp, pc}
   13f6c:	bl	14400 <__assert_fail@plt+0x33f8>
   13f70:	push	{fp, lr}
   13f74:	mov	fp, sp
   13f78:	mov	r2, r1
   13f7c:	mov	r1, r0
   13f80:	mov	r0, #0
   13f84:	bl	155b8 <__assert_fail@plt+0x45b0>
   13f88:	cmp	r0, #0
   13f8c:	popne	{fp, pc}
   13f90:	bl	14400 <__assert_fail@plt+0x33f8>
   13f94:	push	{fp, lr}
   13f98:	mov	fp, sp
   13f9c:	mov	r2, r1
   13fa0:	mov	r1, r0
   13fa4:	clz	r0, r2
   13fa8:	clz	r3, r1
   13fac:	lsr	r0, r0, #5
   13fb0:	lsr	r3, r3, #5
   13fb4:	orrs	r0, r3, r0
   13fb8:	movwne	r1, #1
   13fbc:	movwne	r2, #1
   13fc0:	mov	r0, #0
   13fc4:	bl	155b8 <__assert_fail@plt+0x45b0>
   13fc8:	cmp	r0, #0
   13fcc:	popne	{fp, pc}
   13fd0:	bl	14400 <__assert_fail@plt+0x33f8>
   13fd4:	push	{r4, r5, r6, sl, fp, lr}
   13fd8:	add	fp, sp, #16
   13fdc:	ldr	r5, [r1]
   13fe0:	mov	r4, r1
   13fe4:	mov	r6, r0
   13fe8:	cmp	r0, #0
   13fec:	beq	14004 <__assert_fail@plt+0x2ffc>
   13ff0:	mov	r0, #1
   13ff4:	add	r0, r0, r5, lsr #1
   13ff8:	adds	r5, r5, r0
   13ffc:	bcc	1400c <__assert_fail@plt+0x3004>
   14000:	b	14048 <__assert_fail@plt+0x3040>
   14004:	cmp	r5, #0
   14008:	movweq	r5, #64	; 0x40
   1400c:	mov	r0, r6
   14010:	mov	r1, r5
   14014:	mov	r2, #1
   14018:	bl	155b8 <__assert_fail@plt+0x45b0>
   1401c:	cmp	r5, #0
   14020:	mov	r1, r5
   14024:	movwne	r1, #1
   14028:	cmp	r0, #0
   1402c:	bne	14040 <__assert_fail@plt+0x3038>
   14030:	clz	r2, r6
   14034:	lsr	r2, r2, #5
   14038:	orrs	r1, r2, r1
   1403c:	bne	14048 <__assert_fail@plt+0x3040>
   14040:	str	r5, [r4]
   14044:	pop	{r4, r5, r6, sl, fp, pc}
   14048:	bl	14400 <__assert_fail@plt+0x33f8>
   1404c:	push	{r4, r5, r6, r7, fp, lr}
   14050:	add	fp, sp, #16
   14054:	ldr	r5, [r1]
   14058:	mov	r6, r2
   1405c:	mov	r4, r1
   14060:	mov	r7, r0
   14064:	cmp	r0, #0
   14068:	beq	14080 <__assert_fail@plt+0x3078>
   1406c:	mov	r0, #1
   14070:	add	r0, r0, r5, lsr #1
   14074:	adds	r5, r5, r0
   14078:	bcc	14098 <__assert_fail@plt+0x3090>
   1407c:	b	140cc <__assert_fail@plt+0x30c4>
   14080:	cmp	r5, #0
   14084:	bne	14098 <__assert_fail@plt+0x3090>
   14088:	mov	r0, #64	; 0x40
   1408c:	cmp	r6, #64	; 0x40
   14090:	udiv	r5, r0, r6
   14094:	addhi	r5, r5, #1
   14098:	mov	r0, r7
   1409c:	mov	r1, r5
   140a0:	mov	r2, r6
   140a4:	bl	155b8 <__assert_fail@plt+0x45b0>
   140a8:	cmp	r0, #0
   140ac:	bne	140c4 <__assert_fail@plt+0x30bc>
   140b0:	cmp	r7, #0
   140b4:	beq	140cc <__assert_fail@plt+0x30c4>
   140b8:	cmp	r6, #0
   140bc:	cmpne	r5, #0
   140c0:	bne	140cc <__assert_fail@plt+0x30c4>
   140c4:	str	r5, [r4]
   140c8:	pop	{r4, r5, r6, r7, fp, pc}
   140cc:	bl	14400 <__assert_fail@plt+0x33f8>
   140d0:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   140d4:	add	fp, sp, #24
   140d8:	mov	r8, r1
   140dc:	ldr	r1, [r1]
   140e0:	mov	r5, r0
   140e4:	add	r0, r1, r1, asr #1
   140e8:	cmp	r0, r1
   140ec:	mvnvs	r0, #-2147483648	; 0x80000000
   140f0:	cmp	r0, r3
   140f4:	mov	r7, r0
   140f8:	movgt	r7, r3
   140fc:	cmn	r3, #1
   14100:	movle	r7, r0
   14104:	ldr	r0, [fp, #8]
   14108:	cmn	r0, #1
   1410c:	ble	14134 <__assert_fail@plt+0x312c>
   14110:	cmp	r0, #0
   14114:	beq	14188 <__assert_fail@plt+0x3180>
   14118:	cmn	r7, #1
   1411c:	ble	1415c <__assert_fail@plt+0x3154>
   14120:	mvn	r4, #-2147483648	; 0x80000000
   14124:	udiv	r6, r4, r0
   14128:	cmp	r6, r7
   1412c:	bge	14188 <__assert_fail@plt+0x3180>
   14130:	b	14198 <__assert_fail@plt+0x3190>
   14134:	cmn	r7, #1
   14138:	ble	14178 <__assert_fail@plt+0x3170>
   1413c:	cmn	r0, #1
   14140:	beq	14188 <__assert_fail@plt+0x3180>
   14144:	mov	r6, #-2147483648	; 0x80000000
   14148:	mvn	r4, #-2147483648	; 0x80000000
   1414c:	sdiv	r6, r6, r0
   14150:	cmp	r6, r7
   14154:	bge	14188 <__assert_fail@plt+0x3180>
   14158:	b	14198 <__assert_fail@plt+0x3190>
   1415c:	beq	14188 <__assert_fail@plt+0x3180>
   14160:	mov	r6, #-2147483648	; 0x80000000
   14164:	mvn	r4, #-2147483648	; 0x80000000
   14168:	sdiv	r6, r6, r7
   1416c:	cmp	r6, r0
   14170:	bge	14188 <__assert_fail@plt+0x3180>
   14174:	b	14198 <__assert_fail@plt+0x3190>
   14178:	mvn	r4, #-2147483648	; 0x80000000
   1417c:	sdiv	r6, r4, r0
   14180:	cmp	r7, r6
   14184:	blt	14198 <__assert_fail@plt+0x3190>
   14188:	mul	r6, r7, r0
   1418c:	mov	r4, #64	; 0x40
   14190:	cmp	r6, #63	; 0x3f
   14194:	bgt	141a0 <__assert_fail@plt+0x3198>
   14198:	sdiv	r7, r4, r0
   1419c:	mul	r6, r7, r0
   141a0:	cmp	r5, #0
   141a4:	moveq	r4, #0
   141a8:	streq	r4, [r8]
   141ac:	sub	r4, r7, r1
   141b0:	cmp	r4, r2
   141b4:	bge	14260 <__assert_fail@plt+0x3258>
   141b8:	add	r7, r1, r2
   141bc:	mov	r6, #0
   141c0:	mov	r2, #0
   141c4:	cmp	r7, r3
   141c8:	movwgt	r6, #1
   141cc:	cmn	r3, #1
   141d0:	movwgt	r2, #1
   141d4:	cmp	r7, r1
   141d8:	bvs	14294 <__assert_fail@plt+0x328c>
   141dc:	ands	r1, r2, r6
   141e0:	bne	14294 <__assert_fail@plt+0x328c>
   141e4:	cmn	r0, #1
   141e8:	ble	14210 <__assert_fail@plt+0x3208>
   141ec:	cmp	r0, #0
   141f0:	beq	1425c <__assert_fail@plt+0x3254>
   141f4:	cmn	r7, #1
   141f8:	ble	14234 <__assert_fail@plt+0x322c>
   141fc:	mvn	r1, #-2147483648	; 0x80000000
   14200:	udiv	r1, r1, r0
   14204:	cmp	r1, r7
   14208:	bge	1425c <__assert_fail@plt+0x3254>
   1420c:	b	14294 <__assert_fail@plt+0x328c>
   14210:	cmn	r7, #1
   14214:	ble	1424c <__assert_fail@plt+0x3244>
   14218:	cmn	r0, #1
   1421c:	beq	1425c <__assert_fail@plt+0x3254>
   14220:	mov	r1, #-2147483648	; 0x80000000
   14224:	sdiv	r1, r1, r0
   14228:	cmp	r1, r7
   1422c:	bge	1425c <__assert_fail@plt+0x3254>
   14230:	b	14294 <__assert_fail@plt+0x328c>
   14234:	beq	1425c <__assert_fail@plt+0x3254>
   14238:	mov	r1, #-2147483648	; 0x80000000
   1423c:	sdiv	r1, r1, r7
   14240:	cmp	r1, r0
   14244:	bge	1425c <__assert_fail@plt+0x3254>
   14248:	b	14294 <__assert_fail@plt+0x328c>
   1424c:	mvn	r1, #-2147483648	; 0x80000000
   14250:	sdiv	r1, r1, r0
   14254:	cmp	r7, r1
   14258:	blt	14294 <__assert_fail@plt+0x328c>
   1425c:	mul	r6, r7, r0
   14260:	mov	r0, r5
   14264:	mov	r1, r6
   14268:	bl	15278 <__assert_fail@plt+0x4270>
   1426c:	cmp	r6, #0
   14270:	movwne	r6, #1
   14274:	cmp	r0, #0
   14278:	bne	1428c <__assert_fail@plt+0x3284>
   1427c:	clz	r1, r5
   14280:	lsr	r1, r1, #5
   14284:	orrs	r1, r1, r6
   14288:	bne	14294 <__assert_fail@plt+0x328c>
   1428c:	str	r7, [r8]
   14290:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14294:	bl	14400 <__assert_fail@plt+0x33f8>
   14298:	push	{fp, lr}
   1429c:	mov	fp, sp
   142a0:	mov	r1, #1
   142a4:	bl	151f4 <__assert_fail@plt+0x41ec>
   142a8:	cmp	r0, #0
   142ac:	popne	{fp, pc}
   142b0:	bl	14400 <__assert_fail@plt+0x33f8>
   142b4:	push	{fp, lr}
   142b8:	mov	fp, sp
   142bc:	bl	151f4 <__assert_fail@plt+0x41ec>
   142c0:	cmp	r0, #0
   142c4:	popne	{fp, pc}
   142c8:	bl	14400 <__assert_fail@plt+0x33f8>
   142cc:	push	{fp, lr}
   142d0:	mov	fp, sp
   142d4:	mov	r1, #1
   142d8:	bl	151f4 <__assert_fail@plt+0x41ec>
   142dc:	cmp	r0, #0
   142e0:	popne	{fp, pc}
   142e4:	bl	14400 <__assert_fail@plt+0x33f8>
   142e8:	push	{fp, lr}
   142ec:	mov	fp, sp
   142f0:	bl	151f4 <__assert_fail@plt+0x41ec>
   142f4:	cmp	r0, #0
   142f8:	popne	{fp, pc}
   142fc:	bl	14400 <__assert_fail@plt+0x33f8>
   14300:	push	{r4, r5, r6, sl, fp, lr}
   14304:	add	fp, sp, #16
   14308:	mov	r5, r0
   1430c:	mov	r0, r1
   14310:	mov	r4, r1
   14314:	bl	15248 <__assert_fail@plt+0x4240>
   14318:	cmp	r0, #0
   1431c:	beq	14338 <__assert_fail@plt+0x3330>
   14320:	mov	r1, r5
   14324:	mov	r2, r4
   14328:	mov	r6, r0
   1432c:	bl	10e10 <memcpy@plt>
   14330:	mov	r0, r6
   14334:	pop	{r4, r5, r6, sl, fp, pc}
   14338:	bl	14400 <__assert_fail@plt+0x33f8>
   1433c:	push	{r4, r5, r6, sl, fp, lr}
   14340:	add	fp, sp, #16
   14344:	mov	r5, r0
   14348:	mov	r0, r1
   1434c:	mov	r4, r1
   14350:	bl	15248 <__assert_fail@plt+0x4240>
   14354:	cmp	r0, #0
   14358:	beq	14374 <__assert_fail@plt+0x336c>
   1435c:	mov	r1, r5
   14360:	mov	r2, r4
   14364:	mov	r6, r0
   14368:	bl	10e10 <memcpy@plt>
   1436c:	mov	r0, r6
   14370:	pop	{r4, r5, r6, sl, fp, pc}
   14374:	bl	14400 <__assert_fail@plt+0x33f8>
   14378:	push	{r4, r5, r6, sl, fp, lr}
   1437c:	add	fp, sp, #16
   14380:	mov	r5, r0
   14384:	add	r0, r1, #1
   14388:	mov	r4, r1
   1438c:	bl	15248 <__assert_fail@plt+0x4240>
   14390:	cmp	r0, #0
   14394:	beq	143bc <__assert_fail@plt+0x33b4>
   14398:	mov	r6, r0
   1439c:	mov	r0, #0
   143a0:	mov	r1, r5
   143a4:	mov	r2, r4
   143a8:	strb	r0, [r6, r4]
   143ac:	mov	r0, r6
   143b0:	bl	10e10 <memcpy@plt>
   143b4:	mov	r0, r6
   143b8:	pop	{r4, r5, r6, sl, fp, pc}
   143bc:	bl	14400 <__assert_fail@plt+0x33f8>
   143c0:	push	{r4, r5, r6, sl, fp, lr}
   143c4:	add	fp, sp, #16
   143c8:	mov	r4, r0
   143cc:	bl	10f3c <strlen@plt>
   143d0:	add	r5, r0, #1
   143d4:	mov	r0, r5
   143d8:	bl	15248 <__assert_fail@plt+0x4240>
   143dc:	cmp	r0, #0
   143e0:	beq	143fc <__assert_fail@plt+0x33f4>
   143e4:	mov	r1, r4
   143e8:	mov	r2, r5
   143ec:	mov	r6, r0
   143f0:	bl	10e10 <memcpy@plt>
   143f4:	mov	r0, r6
   143f8:	pop	{r4, r5, r6, sl, fp, pc}
   143fc:	bl	14400 <__assert_fail@plt+0x33f8>
   14400:	push	{fp, lr}
   14404:	mov	fp, sp
   14408:	movw	r0, #28900	; 0x70e4
   1440c:	movw	r1, #24860	; 0x611c
   14410:	mov	r2, #5
   14414:	movt	r0, #2
   14418:	movt	r1, #1
   1441c:	ldr	r4, [r0]
   14420:	mov	r0, #0
   14424:	bl	10e4c <dcgettext@plt>
   14428:	movw	r2, #23791	; 0x5cef
   1442c:	mov	r3, r0
   14430:	mov	r0, r4
   14434:	mov	r1, #0
   14438:	movt	r2, #1
   1443c:	bl	10ec4 <error@plt>
   14440:	bl	10ffc <abort@plt>
   14444:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   14448:	add	fp, sp, #24
   1444c:	sub	sp, sp, #16
   14450:	mov	r8, r0
   14454:	ldr	r0, [fp, #16]
   14458:	mov	r5, r3
   1445c:	mov	r6, r2
   14460:	mov	r2, r1
   14464:	add	r3, sp, #8
   14468:	mov	r1, #0
   1446c:	str	r0, [sp]
   14470:	mov	r0, r8
   14474:	bl	14540 <__assert_fail@plt+0x3538>
   14478:	cmp	r0, #0
   1447c:	bne	14508 <__assert_fail@plt+0x3500>
   14480:	ldr	r4, [sp, #8]
   14484:	ldr	r7, [sp, #12]
   14488:	subs	r0, r4, r6
   1448c:	sbcs	r0, r7, r5
   14490:	bcc	144b4 <__assert_fail@plt+0x34ac>
   14494:	ldr	r1, [fp, #8]
   14498:	ldr	r0, [fp, #12]
   1449c:	subs	r1, r1, r4
   144a0:	sbcs	r0, r0, r7
   144a4:	movcs	r0, r4
   144a8:	movcs	r1, r7
   144ac:	subcs	sp, fp, #24
   144b0:	popcs	{r4, r5, r6, r7, r8, sl, fp, pc}
   144b4:	bl	10f54 <__errno_location@plt>
   144b8:	subs	r1, r4, #1073741824	; 0x40000000
   144bc:	sbcs	r1, r7, #0
   144c0:	movcc	r1, #34	; 0x22
   144c4:	movcs	r1, #75	; 0x4b
   144c8:	str	r1, [r0]
   144cc:	ldr	r6, [r0]
   144d0:	ldr	r4, [fp, #24]
   144d4:	ldr	r5, [fp, #20]
   144d8:	mov	r0, r8
   144dc:	bl	137c8 <__assert_fail@plt+0x27c0>
   144e0:	subs	r1, r6, #22
   144e4:	movw	r2, #23787	; 0x5ceb
   144e8:	str	r0, [sp]
   144ec:	mov	r3, r5
   144f0:	movne	r1, r6
   144f4:	cmp	r4, #0
   144f8:	movt	r2, #1
   144fc:	movweq	r4, #1
   14500:	mov	r0, r4
   14504:	bl	10ec4 <error@plt>
   14508:	cmp	r0, #1
   1450c:	beq	14524 <__assert_fail@plt+0x351c>
   14510:	cmp	r0, #3
   14514:	bne	14530 <__assert_fail@plt+0x3528>
   14518:	bl	10f54 <__errno_location@plt>
   1451c:	mov	r1, #0
   14520:	b	144c8 <__assert_fail@plt+0x34c0>
   14524:	bl	10f54 <__errno_location@plt>
   14528:	mov	r1, #75	; 0x4b
   1452c:	b	144c8 <__assert_fail@plt+0x34c0>
   14530:	bl	10f54 <__errno_location@plt>
   14534:	b	144cc <__assert_fail@plt+0x34c4>
   14538:	mov	r1, #10
   1453c:	b	14444 <__assert_fail@plt+0x343c>
   14540:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14544:	add	fp, sp, #28
   14548:	sub	sp, sp, #44	; 0x2c
   1454c:	cmp	r2, #37	; 0x25
   14550:	bcs	151d4 <__assert_fail@plt+0x41cc>
   14554:	ldr	sl, [fp, #8]
   14558:	mov	r6, r2
   1455c:	mov	r7, r1
   14560:	mov	r4, r0
   14564:	str	r3, [sp, #36]	; 0x24
   14568:	bl	10f54 <__errno_location@plt>
   1456c:	mov	r5, r0
   14570:	mov	r0, #0
   14574:	str	r0, [r5]
   14578:	bl	10f18 <__ctype_b_loc@plt>
   1457c:	ldr	r1, [r0]
   14580:	mov	r2, r4
   14584:	ldrb	r0, [r2], #1
   14588:	add	r3, r1, r0, lsl #1
   1458c:	ldrb	r3, [r3, #1]
   14590:	tst	r3, #32
   14594:	bne	14584 <__assert_fail@plt+0x357c>
   14598:	sub	r9, fp, #32
   1459c:	cmp	r7, #0
   145a0:	mov	r8, #4
   145a4:	movne	r9, r7
   145a8:	cmp	r0, #45	; 0x2d
   145ac:	beq	1496c <__assert_fail@plt+0x3964>
   145b0:	mov	r0, r4
   145b4:	mov	r1, r9
   145b8:	mov	r2, r6
   145bc:	mov	r3, #0
   145c0:	bl	10e1c <__strtoull_internal@plt>
   145c4:	mov	r7, r1
   145c8:	ldr	r1, [r9]
   145cc:	cmp	r1, r4
   145d0:	beq	14608 <__assert_fail@plt+0x3600>
   145d4:	mov	r6, r0
   145d8:	ldr	r0, [r5]
   145dc:	cmp	r0, #0
   145e0:	beq	14924 <__assert_fail@plt+0x391c>
   145e4:	cmp	r0, #34	; 0x22
   145e8:	bne	1496c <__assert_fail@plt+0x3964>
   145ec:	mov	r8, #1
   145f0:	cmp	sl, #0
   145f4:	beq	151c0 <__assert_fail@plt+0x41b8>
   145f8:	ldrb	r4, [r1]
   145fc:	cmp	r4, #0
   14600:	bne	1464c <__assert_fail@plt+0x3644>
   14604:	b	151c0 <__assert_fail@plt+0x41b8>
   14608:	cmp	sl, #0
   1460c:	beq	1496c <__assert_fail@plt+0x3964>
   14610:	mov	r5, r1
   14614:	ldrb	r1, [r4]
   14618:	cmp	r1, #0
   1461c:	beq	1496c <__assert_fail@plt+0x3964>
   14620:	mov	r0, sl
   14624:	bl	10f48 <strchr@plt>
   14628:	cmp	r0, #0
   1462c:	beq	1496c <__assert_fail@plt+0x3964>
   14630:	mov	r1, r5
   14634:	mov	r8, #0
   14638:	mov	r6, #1
   1463c:	mov	r7, #0
   14640:	ldrb	r4, [r1]
   14644:	cmp	r4, #0
   14648:	beq	151c0 <__assert_fail@plt+0x41b8>
   1464c:	str	r1, [sp, #32]
   14650:	mov	r0, sl
   14654:	mov	r1, r4
   14658:	bl	10f48 <strchr@plt>
   1465c:	cmp	r0, #0
   14660:	beq	14960 <__assert_fail@plt+0x3958>
   14664:	sub	r0, r4, #69	; 0x45
   14668:	mov	r1, #1
   1466c:	mov	r3, #0
   14670:	mov	r5, #1024	; 0x400
   14674:	cmp	r0, #47	; 0x2f
   14678:	str	r1, [sp, #28]
   1467c:	bhi	14780 <__assert_fail@plt+0x3778>
   14680:	add	r1, pc, #0
   14684:	ldr	pc, [r1, r0, lsl #2]
   14688:	andeq	r4, r1, r8, asr #14
   1468c:	andeq	r4, r1, r0, lsl #15
   14690:	andeq	r4, r1, r8, asr #14
   14694:	andeq	r4, r1, r0, lsl #15
   14698:	andeq	r4, r1, r0, lsl #15
   1469c:	andeq	r4, r1, r0, lsl #15
   146a0:	andeq	r4, r1, r8, asr #14
   146a4:	andeq	r4, r1, r0, lsl #15
   146a8:	andeq	r4, r1, r8, asr #14
   146ac:	andeq	r4, r1, r0, lsl #15
   146b0:	andeq	r4, r1, r0, lsl #15
   146b4:	andeq	r4, r1, r8, asr #14
   146b8:	andeq	r4, r1, r0, lsl #15
   146bc:	andeq	r4, r1, r0, lsl #15
   146c0:	andeq	r4, r1, r0, lsl #15
   146c4:	andeq	r4, r1, r8, asr #14
   146c8:	andeq	r4, r1, r0, lsl #15
   146cc:	andeq	r4, r1, r0, lsl #15
   146d0:	andeq	r4, r1, r0, lsl #15
   146d4:	andeq	r4, r1, r0, lsl #15
   146d8:	andeq	r4, r1, r8, asr #14
   146dc:	andeq	r4, r1, r8, asr #14
   146e0:	andeq	r4, r1, r0, lsl #15
   146e4:	andeq	r4, r1, r0, lsl #15
   146e8:	andeq	r4, r1, r0, lsl #15
   146ec:	andeq	r4, r1, r0, lsl #15
   146f0:	andeq	r4, r1, r0, lsl #15
   146f4:	andeq	r4, r1, r0, lsl #15
   146f8:	andeq	r4, r1, r0, lsl #15
   146fc:	andeq	r4, r1, r0, lsl #15
   14700:	andeq	r4, r1, r0, lsl #15
   14704:	andeq	r4, r1, r0, lsl #15
   14708:	andeq	r4, r1, r0, lsl #15
   1470c:	andeq	r4, r1, r0, lsl #15
   14710:	andeq	r4, r1, r8, asr #14
   14714:	andeq	r4, r1, r0, lsl #15
   14718:	andeq	r4, r1, r0, lsl #15
   1471c:	andeq	r4, r1, r0, lsl #15
   14720:	andeq	r4, r1, r8, asr #14
   14724:	andeq	r4, r1, r0, lsl #15
   14728:	andeq	r4, r1, r8, asr #14
   1472c:	andeq	r4, r1, r0, lsl #15
   14730:	andeq	r4, r1, r0, lsl #15
   14734:	andeq	r4, r1, r0, lsl #15
   14738:	andeq	r4, r1, r0, lsl #15
   1473c:	andeq	r4, r1, r0, lsl #15
   14740:	andeq	r4, r1, r0, lsl #15
   14744:	andeq	r4, r1, r8, asr #14
   14748:	mov	r0, sl
   1474c:	mov	r1, #48	; 0x30
   14750:	bl	10f48 <strchr@plt>
   14754:	cmp	r0, #0
   14758:	beq	1477c <__assert_fail@plt+0x3774>
   1475c:	ldr	r1, [sp, #32]
   14760:	ldrb	r0, [r1, #1]
   14764:	cmp	r0, #66	; 0x42
   14768:	cmpne	r0, #68	; 0x44
   1476c:	bne	14934 <__assert_fail@plt+0x392c>
   14770:	mov	r5, #1000	; 0x3e8
   14774:	mov	r0, #2
   14778:	str	r0, [sp, #28]
   1477c:	mov	r3, #0
   14780:	sub	r0, r4, #66	; 0x42
   14784:	cmp	r0, #53	; 0x35
   14788:	bhi	14960 <__assert_fail@plt+0x3958>
   1478c:	add	r1, pc, #0
   14790:	ldr	pc, [r1, r0, lsl #2]
   14794:	ldrdeq	r4, [r1], -r0
   14798:	andeq	r4, r1, r0, ror #18
   1479c:	andeq	r4, r1, r0, ror #18
   147a0:	strdeq	r4, [r1], -r8
   147a4:	andeq	r4, r1, r0, ror #18
   147a8:	andeq	r4, r1, ip, ror #16
   147ac:	andeq	r4, r1, r0, ror #18
   147b0:	andeq	r4, r1, r0, ror #18
   147b4:	andeq	r4, r1, r0, ror #18
   147b8:	andeq	r4, r1, r8, ror r9
   147bc:	andeq	r4, r1, r0, ror #18
   147c0:	andeq	r4, r1, r0, asr #19
   147c4:	andeq	r4, r1, r0, ror #18
   147c8:	andeq	r4, r1, r0, ror #18
   147cc:	andeq	r4, r1, ip, asr #28
   147d0:	andeq	r4, r1, r0, ror #18
   147d4:	andeq	r4, r1, r0, ror #18
   147d8:	andeq	r4, r1, r0, ror #18
   147dc:	andeq	r4, r1, ip, asr #20
   147e0:	andeq	r4, r1, r0, ror #18
   147e4:	andeq	r4, r1, r0, ror #18
   147e8:	andeq	r4, r1, r0, ror #18
   147ec:	andeq	r4, r1, r0, ror #18
   147f0:	andeq	r4, r1, r4, ror pc
   147f4:	andeq	r4, r1, r4, lsr fp
   147f8:	andeq	r4, r1, r0, ror #18
   147fc:	andeq	r4, r1, r0, ror #18
   14800:	andeq	r4, r1, r0, ror #18
   14804:	andeq	r4, r1, r0, ror #18
   14808:	andeq	r4, r1, r0, ror #18
   1480c:	andeq	r4, r1, r0, ror #18
   14810:	andeq	r4, r1, r0, ror #18
   14814:	andeq	r5, r1, r8, asr #2
   14818:	andeq	r5, r1, r0, lsr #3
   1481c:	andeq	r4, r1, r0, ror #18
   14820:	andeq	r4, r1, r0, ror #18
   14824:	andeq	r4, r1, r0, ror #18
   14828:	andeq	r4, r1, ip, ror #16
   1482c:	andeq	r4, r1, r0, ror #18
   14830:	andeq	r4, r1, r0, ror #18
   14834:	andeq	r4, r1, r0, ror #18
   14838:	andeq	r4, r1, r8, ror r9
   1483c:	andeq	r4, r1, r0, ror #18
   14840:	andeq	r4, r1, r0, asr #19
   14844:	andeq	r4, r1, r0, ror #18
   14848:	andeq	r4, r1, r0, ror #18
   1484c:	andeq	r4, r1, r0, ror #18
   14850:	andeq	r4, r1, r0, ror #18
   14854:	andeq	r4, r1, r0, ror #18
   14858:	andeq	r4, r1, r0, ror #18
   1485c:	andeq	r4, r1, ip, asr #20
   14860:	andeq	r4, r1, r0, ror #18
   14864:	andeq	r4, r1, r0, ror #18
   14868:	andeq	r5, r1, ip, ror r1
   1486c:	mvn	r0, #0
   14870:	mvn	r1, #0
   14874:	mov	r2, r5
   14878:	mov	sl, r3
   1487c:	bl	156fc <__assert_fail@plt+0x46f4>
   14880:	subs	r3, r0, r6
   14884:	mov	lr, #0
   14888:	umull	r4, r2, r6, r5
   1488c:	str	r1, [sp, #20]
   14890:	sbcs	r3, r1, r7
   14894:	mla	ip, r6, sl, r2
   14898:	mov	r2, r1
   1489c:	movwcc	lr, #1
   148a0:	mla	r7, r7, r5, ip
   148a4:	mov	r2, #0
   148a8:	cmp	lr, #0
   148ac:	mvnne	r4, #0
   148b0:	mvnne	r7, #0
   148b4:	subs	r6, r0, r4
   148b8:	sbcs	r6, r1, r7
   148bc:	movwcc	r2, #1
   148c0:	umull	r3, r6, r4, r5
   148c4:	cmp	r2, #0
   148c8:	str	r6, [sp, #16]
   148cc:	mvnne	r3, #0
   148d0:	cmp	r2, #0
   148d4:	umull	r6, ip, r3, r5
   148d8:	mla	r1, r3, sl, ip
   148dc:	ldr	ip, [sp, #16]
   148e0:	str	r1, [sp, #12]
   148e4:	mla	r4, r4, sl, ip
   148e8:	mla	r4, r7, r5, r4
   148ec:	ldr	r7, [sp, #12]
   148f0:	mvnne	r4, #0
   148f4:	subs	r0, r0, r3
   148f8:	ldr	r0, [sp, #20]
   148fc:	mla	r7, r4, r5, r7
   14900:	sbcs	r0, r0, r4
   14904:	mov	r0, #0
   14908:	movwcc	r0, #1
   1490c:	cmp	r0, #0
   14910:	mov	r1, r0
   14914:	orr	r0, lr, r2
   14918:	mvnne	r7, #0
   1491c:	mvnne	r6, #0
   14920:	b	14f6c <__assert_fail@plt+0x3f64>
   14924:	mov	r8, r0
   14928:	cmp	sl, #0
   1492c:	bne	145f8 <__assert_fail@plt+0x35f0>
   14930:	b	151c0 <__assert_fail@plt+0x41b8>
   14934:	cmp	r0, #105	; 0x69
   14938:	mov	r3, #0
   1493c:	bne	14780 <__assert_fail@plt+0x3778>
   14940:	ldrb	r0, [r1, #2]
   14944:	mov	r1, #1
   14948:	cmp	r0, #66	; 0x42
   1494c:	movweq	r1, #3
   14950:	str	r1, [sp, #28]
   14954:	sub	r0, r4, #66	; 0x42
   14958:	cmp	r0, #53	; 0x35
   1495c:	bls	1478c <__assert_fail@plt+0x3784>
   14960:	ldr	r0, [sp, #36]	; 0x24
   14964:	orr	r8, r8, #2
   14968:	strd	r6, [r0]
   1496c:	mov	r0, r8
   14970:	sub	sp, fp, #28
   14974:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14978:	mvn	r0, #0
   1497c:	mvn	r1, #0
   14980:	mov	r2, r5
   14984:	mov	r4, r3
   14988:	bl	156fc <__assert_fail@plt+0x46f4>
   1498c:	subs	r0, r0, r6
   14990:	mov	r2, #0
   14994:	sbcs	r0, r1, r7
   14998:	movwcc	r2, #1
   1499c:	umull	r0, r1, r6, r5
   149a0:	mla	r1, r6, r4, r1
   149a4:	cmp	r2, #0
   149a8:	mov	r3, r2
   149ac:	mla	r7, r7, r5, r1
   149b0:	mvnne	r0, #0
   149b4:	mvnne	r7, #0
   149b8:	mov	r6, r0
   149bc:	b	151a0 <__assert_fail@plt+0x4198>
   149c0:	mvn	r0, #0
   149c4:	mvn	r1, #0
   149c8:	mov	r2, r5
   149cc:	str	r3, [sp, #24]
   149d0:	bl	156fc <__assert_fail@plt+0x46f4>
   149d4:	subs	r3, r0, r6
   149d8:	mov	ip, r0
   149dc:	umull	r4, r0, r6, r5
   149e0:	mov	sl, #0
   149e4:	sbcs	r3, r1, r7
   149e8:	str	r0, [sp, #20]
   149ec:	ldr	r0, [sp, #24]
   149f0:	mov	r3, #0
   149f4:	movwcc	r3, #1
   149f8:	cmp	r3, #0
   149fc:	mvnne	r4, #0
   14a00:	cmp	r3, #0
   14a04:	umull	lr, r2, r4, r5
   14a08:	mla	r2, r4, r0, r2
   14a0c:	str	r2, [sp, #16]
   14a10:	ldr	r2, [sp, #20]
   14a14:	mla	r6, r6, r0, r2
   14a18:	ldr	r0, [sp, #16]
   14a1c:	mla	r6, r7, r5, r6
   14a20:	mvnne	r6, #0
   14a24:	mla	r7, r6, r5, r0
   14a28:	subs	r0, ip, r4
   14a2c:	sbcs	r0, r1, r6
   14a30:	movwcc	sl, #1
   14a34:	cmp	sl, #0
   14a38:	orr	r3, r3, sl
   14a3c:	mvnne	lr, #0
   14a40:	mvnne	r7, #0
   14a44:	mov	r6, lr
   14a48:	b	151a0 <__assert_fail@plt+0x4198>
   14a4c:	mvn	r0, #0
   14a50:	mvn	r1, #0
   14a54:	mov	r2, r5
   14a58:	mov	sl, r3
   14a5c:	bl	156fc <__assert_fail@plt+0x46f4>
   14a60:	subs	r3, r0, r6
   14a64:	mov	ip, r1
   14a68:	umull	r2, lr, r6, r5
   14a6c:	str	r0, [sp, #20]
   14a70:	sbcs	r3, r1, r7
   14a74:	mov	r1, #0
   14a78:	mla	r6, r6, sl, lr
   14a7c:	mov	lr, #0
   14a80:	str	ip, [sp, #16]
   14a84:	movwcc	r1, #1
   14a88:	mla	r7, r7, r5, r6
   14a8c:	cmp	r1, #0
   14a90:	mvnne	r2, #0
   14a94:	cmp	r1, #0
   14a98:	umull	r3, r4, r2, r5
   14a9c:	mvnne	r7, #0
   14aa0:	mla	r4, r2, sl, r4
   14aa4:	subs	r2, r0, r2
   14aa8:	sbcs	r2, ip, r7
   14aac:	mla	r4, r7, r5, r4
   14ab0:	movwcc	lr, #1
   14ab4:	mov	r2, #0
   14ab8:	cmp	lr, #0
   14abc:	mvnne	r3, #0
   14ac0:	mvnne	r4, #0
   14ac4:	subs	r7, r0, r3
   14ac8:	mov	r0, r5
   14acc:	sbcs	r7, ip, r4
   14ad0:	movwcc	r2, #1
   14ad4:	umull	r5, r7, r3, r5
   14ad8:	cmp	r2, #0
   14adc:	mla	r3, r3, sl, r7
   14ae0:	mvnne	r5, #0
   14ae4:	mla	r3, r4, r0, r3
   14ae8:	cmp	r2, #0
   14aec:	umull	r6, ip, r5, r0
   14af0:	mvnne	r3, #0
   14af4:	mla	ip, r5, sl, ip
   14af8:	mla	r7, r3, r0, ip
   14afc:	ldr	r0, [sp, #20]
   14b00:	subs	r0, r0, r5
   14b04:	ldr	r0, [sp, #16]
   14b08:	sbcs	r0, r0, r3
   14b0c:	mov	r0, #0
   14b10:	movwcc	r0, #1
   14b14:	cmp	r0, #0
   14b18:	mov	r3, r0
   14b1c:	orr	r0, r1, lr
   14b20:	orr	r0, r0, r2
   14b24:	mvnne	r7, #0
   14b28:	mvnne	r6, #0
   14b2c:	orr	r3, r0, r3
   14b30:	b	151a0 <__assert_fail@plt+0x4198>
   14b34:	mvn	r0, #0
   14b38:	mvn	r1, #0
   14b3c:	mov	r2, r5
   14b40:	mov	r4, r3
   14b44:	str	r3, [sp, #24]
   14b48:	bl	156fc <__assert_fail@plt+0x46f4>
   14b4c:	umull	r3, r2, r6, r5
   14b50:	mla	r2, r6, r4, r2
   14b54:	subs	r6, r0, r6
   14b58:	sbcs	r6, r1, r7
   14b5c:	mla	r2, r7, r5, r2
   14b60:	mov	r7, #0
   14b64:	mov	r6, #0
   14b68:	movwcc	r6, #1
   14b6c:	cmp	r6, #0
   14b70:	str	r6, [sp, #20]
   14b74:	mvnne	r3, #0
   14b78:	mvnne	r2, #0
   14b7c:	subs	r4, r0, r3
   14b80:	umull	r6, ip, r3, r5
   14b84:	sbcs	r4, r1, r2
   14b88:	ldr	r4, [sp, #24]
   14b8c:	movwcc	r7, #1
   14b90:	cmp	r7, #0
   14b94:	mov	lr, r7
   14b98:	str	r7, [sp, #16]
   14b9c:	mvnne	r6, #0
   14ba0:	cmp	lr, #0
   14ba4:	mov	lr, #0
   14ba8:	umull	sl, r7, r6, r5
   14bac:	mla	r3, r3, r4, ip
   14bb0:	mla	r7, r6, r4, r7
   14bb4:	mov	r4, r0
   14bb8:	mla	r2, r2, r5, r3
   14bbc:	mvnne	r2, #0
   14bc0:	subs	r3, r0, r6
   14bc4:	mov	r0, #0
   14bc8:	mla	r7, r2, r5, r7
   14bcc:	sbcs	r2, r1, r2
   14bd0:	mov	r3, r4
   14bd4:	movwcc	r0, #1
   14bd8:	str	r3, [sp, #4]
   14bdc:	cmp	r0, #0
   14be0:	str	r0, [sp, #12]
   14be4:	mov	r0, r1
   14be8:	mvnne	sl, #0
   14bec:	mvnne	r7, #0
   14bf0:	str	r0, [sp, #8]
   14bf4:	subs	r2, r4, sl
   14bf8:	ldr	r4, [sp, #24]
   14bfc:	sbcs	r2, r1, r7
   14c00:	movwcc	lr, #1
   14c04:	umull	r6, r2, sl, r5
   14c08:	cmp	lr, #0
   14c0c:	mvnne	r6, #0
   14c10:	mla	r2, sl, r4, r2
   14c14:	cmp	lr, #0
   14c18:	umull	r1, ip, r6, r5
   14c1c:	mla	r2, r7, r5, r2
   14c20:	mla	ip, r6, r4, ip
   14c24:	mvnne	r2, #0
   14c28:	subs	r6, r3, r6
   14c2c:	mla	r7, r2, r5, ip
   14c30:	sbcs	r2, r0, r2
   14c34:	mov	ip, #0
   14c38:	movwcc	ip, #1
   14c3c:	mov	r2, #0
   14c40:	cmp	ip, #0
   14c44:	mvnne	r1, #0
   14c48:	mvnne	r7, #0
   14c4c:	subs	r6, r3, r1
   14c50:	ldr	r3, [sp, #24]
   14c54:	sbcs	r6, r0, r7
   14c58:	umull	r0, sl, r1, r5
   14c5c:	movwcc	r2, #1
   14c60:	cmp	r2, #0
   14c64:	mvnne	r0, #0
   14c68:	mla	r1, r1, r3, sl
   14c6c:	cmp	r2, #0
   14c70:	umull	r6, r4, r0, r5
   14c74:	mla	r1, r7, r5, r1
   14c78:	mla	r4, r0, r3, r4
   14c7c:	ldr	r3, [sp, #4]
   14c80:	mvnne	r1, #0
   14c84:	mla	r7, r1, r5, r4
   14c88:	ldr	r5, [sp, #16]
   14c8c:	subs	r0, r3, r0
   14c90:	ldr	r0, [sp, #8]
   14c94:	sbcs	r0, r0, r1
   14c98:	mov	r0, #0
   14c9c:	movwcc	r0, #1
   14ca0:	cmp	r0, #0
   14ca4:	mov	r1, r0
   14ca8:	ldr	r0, [sp, #20]
   14cac:	mvnne	r7, #0
   14cb0:	mvnne	r6, #0
   14cb4:	orr	r0, r0, r5
   14cb8:	ldr	r5, [sp, #12]
   14cbc:	orr	r0, r0, r5
   14cc0:	orr	r0, r0, lr
   14cc4:	orr	r0, r0, ip
   14cc8:	orr	r0, r0, r2
   14ccc:	b	1513c <__assert_fail@plt+0x4134>
   14cd0:	mov	r1, #0
   14cd4:	lsl	r2, r7, #10
   14cd8:	lsl	r0, r6, #10
   14cdc:	lsr	r3, r7, #22
   14ce0:	cmp	r1, r7, lsr #22
   14ce4:	orr	r2, r2, r6, lsr #22
   14ce8:	mvnne	r0, #0
   14cec:	movwne	r3, #1
   14cf0:	cmp	r1, r7, lsr #22
   14cf4:	b	1516c <__assert_fail@plt+0x4164>
   14cf8:	mvn	r0, #0
   14cfc:	mvn	r1, #0
   14d00:	mov	r2, r5
   14d04:	mov	sl, r3
   14d08:	bl	156fc <__assert_fail@plt+0x46f4>
   14d0c:	subs	r2, r0, r6
   14d10:	mov	ip, r0
   14d14:	mov	r0, #0
   14d18:	sbcs	r2, r1, r7
   14d1c:	movwcc	r0, #1
   14d20:	umull	r4, r2, r6, r5
   14d24:	cmp	r0, #0
   14d28:	mla	r2, r6, sl, r2
   14d2c:	str	r0, [sp, #20]
   14d30:	mvnne	r4, #0
   14d34:	cmp	r0, #0
   14d38:	mla	r2, r7, r5, r2
   14d3c:	mov	r0, #0
   14d40:	umull	lr, r3, r4, r5
   14d44:	mvnne	r2, #0
   14d48:	mla	r3, r4, sl, r3
   14d4c:	mla	r6, r2, r5, r3
   14d50:	subs	r3, ip, r4
   14d54:	sbcs	r2, r1, r2
   14d58:	mov	r3, r1
   14d5c:	movwcc	r0, #1
   14d60:	str	r3, [sp, #8]
   14d64:	cmp	r0, #0
   14d68:	str	r0, [sp, #16]
   14d6c:	mov	r0, ip
   14d70:	mvnne	lr, #0
   14d74:	mvnne	r6, #0
   14d78:	str	r0, [sp, #12]
   14d7c:	subs	r2, ip, lr
   14d80:	umull	r7, r4, lr, r5
   14d84:	sbcs	r2, r1, r6
   14d88:	mla	r4, lr, sl, r4
   14d8c:	mov	r2, #0
   14d90:	mla	r6, r6, r5, r4
   14d94:	mov	r4, #0
   14d98:	movwcc	r2, #1
   14d9c:	cmp	r2, #0
   14da0:	mvnne	r7, #0
   14da4:	cmp	r2, #0
   14da8:	umull	r1, ip, r7, r5
   14dac:	mvnne	r6, #0
   14db0:	mla	ip, r7, sl, ip
   14db4:	subs	r7, r0, r7
   14db8:	mla	lr, r6, r5, ip
   14dbc:	sbcs	r7, r3, r6
   14dc0:	mov	ip, #0
   14dc4:	movwcc	ip, #1
   14dc8:	cmp	ip, #0
   14dcc:	mvnne	r1, #0
   14dd0:	mvnne	lr, #0
   14dd4:	subs	r7, r0, r1
   14dd8:	sbcs	r7, r3, lr
   14ddc:	movwcc	r4, #1
   14de0:	umull	r0, r7, r1, r5
   14de4:	cmp	r4, #0
   14de8:	mla	r1, r1, sl, r7
   14dec:	mvnne	r0, #0
   14df0:	mla	r1, lr, r5, r1
   14df4:	cmp	r4, #0
   14df8:	umull	r6, r3, r0, r5
   14dfc:	mvnne	r1, #0
   14e00:	mla	r3, r0, sl, r3
   14e04:	mla	r7, r1, r5, r3
   14e08:	ldr	r3, [sp, #12]
   14e0c:	subs	r0, r3, r0
   14e10:	ldr	r3, [sp, #16]
   14e14:	ldr	r0, [sp, #8]
   14e18:	sbcs	r0, r0, r1
   14e1c:	mov	r0, #0
   14e20:	movwcc	r0, #1
   14e24:	cmp	r0, #0
   14e28:	mov	r1, r0
   14e2c:	ldr	r0, [sp, #20]
   14e30:	mvnne	r7, #0
   14e34:	mvnne	r6, #0
   14e38:	orr	r0, r0, r3
   14e3c:	orr	r0, r0, r2
   14e40:	orr	r0, r0, ip
   14e44:	orr	r0, r0, r4
   14e48:	b	14f6c <__assert_fail@plt+0x3f64>
   14e4c:	mvn	r0, #0
   14e50:	mvn	r1, #0
   14e54:	mov	r2, r5
   14e58:	mov	sl, r3
   14e5c:	bl	156fc <__assert_fail@plt+0x46f4>
   14e60:	umull	r3, r2, r6, r5
   14e64:	mov	lr, r1
   14e68:	mov	r1, r0
   14e6c:	mla	r2, r6, sl, r2
   14e70:	subs	r6, r0, r6
   14e74:	mov	r0, #0
   14e78:	sbcs	r6, lr, r7
   14e7c:	mla	r2, r7, r5, r2
   14e80:	movwcc	r0, #1
   14e84:	cmp	r0, #0
   14e88:	str	r0, [sp, #20]
   14e8c:	mov	r0, r1
   14e90:	mvnne	r3, #0
   14e94:	mvnne	r2, #0
   14e98:	str	r0, [sp, #16]
   14e9c:	subs	r4, r1, r3
   14ea0:	umull	r7, ip, r3, r5
   14ea4:	sbcs	r4, lr, r2
   14ea8:	mla	r3, r3, sl, ip
   14eac:	mov	ip, #0
   14eb0:	mov	r4, #0
   14eb4:	mla	r2, r2, r5, r3
   14eb8:	movwcc	r4, #1
   14ebc:	cmp	r4, #0
   14ec0:	mvnne	r7, #0
   14ec4:	cmp	r4, #0
   14ec8:	umull	r1, r6, r7, r5
   14ecc:	mvnne	r2, #0
   14ed0:	mla	r6, r7, sl, r6
   14ed4:	mla	r3, r2, r5, r6
   14ed8:	subs	r6, r0, r7
   14edc:	sbcs	r2, lr, r2
   14ee0:	movwcc	ip, #1
   14ee4:	mov	r2, #0
   14ee8:	cmp	ip, #0
   14eec:	mvnne	r1, #0
   14ef0:	mvnne	r3, #0
   14ef4:	subs	r6, r0, r1
   14ef8:	sbcs	r6, lr, r3
   14efc:	movwcc	r2, #1
   14f00:	umull	r0, r6, r1, r5
   14f04:	cmp	r2, #0
   14f08:	str	r6, [sp, #12]
   14f0c:	mvnne	r0, #0
   14f10:	cmp	r2, #0
   14f14:	umull	r6, r7, r0, r5
   14f18:	mla	r7, r0, sl, r7
   14f1c:	str	r7, [sp, #8]
   14f20:	ldr	r7, [sp, #12]
   14f24:	mla	r1, r1, sl, r7
   14f28:	mla	r1, r3, r5, r1
   14f2c:	ldr	r3, [sp, #8]
   14f30:	mvnne	r1, #0
   14f34:	mla	r7, r1, r5, r3
   14f38:	ldr	r3, [sp, #16]
   14f3c:	subs	r0, r3, r0
   14f40:	sbcs	r0, lr, r1
   14f44:	mov	r0, #0
   14f48:	movwcc	r0, #1
   14f4c:	cmp	r0, #0
   14f50:	mov	r1, r0
   14f54:	ldr	r0, [sp, #20]
   14f58:	mvnne	r7, #0
   14f5c:	mvnne	r6, #0
   14f60:	orr	r0, r0, r4
   14f64:	orr	r0, r0, ip
   14f68:	orr	r0, r0, r2
   14f6c:	orr	r3, r0, r1
   14f70:	b	151a0 <__assert_fail@plt+0x4198>
   14f74:	mvn	r0, #0
   14f78:	mvn	r1, #0
   14f7c:	mov	r2, r5
   14f80:	mov	sl, r3
   14f84:	bl	156fc <__assert_fail@plt+0x46f4>
   14f88:	mov	ip, r1
   14f8c:	subs	r1, r0, r6
   14f90:	umull	r3, lr, r6, r5
   14f94:	mov	r2, r5
   14f98:	sbcs	r1, ip, r7
   14f9c:	mla	r6, r6, sl, lr
   14fa0:	str	ip, [sp, #4]
   14fa4:	mov	r1, #0
   14fa8:	mla	r7, r7, r2, r6
   14fac:	movwcc	r1, #1
   14fb0:	cmp	r1, #0
   14fb4:	str	r1, [sp, #20]
   14fb8:	mvnne	r3, #0
   14fbc:	cmp	r1, #0
   14fc0:	mov	r1, r0
   14fc4:	umull	r4, r5, r3, r5
   14fc8:	mvnne	r7, #0
   14fcc:	mov	lr, r1
   14fd0:	mla	r5, r3, sl, r5
   14fd4:	subs	r3, r0, r3
   14fd8:	sbcs	r0, ip, r7
   14fdc:	mla	r5, r7, r2, r5
   14fe0:	mov	r0, #0
   14fe4:	movwcc	r0, #1
   14fe8:	cmp	r0, #0
   14fec:	str	r0, [sp, #16]
   14ff0:	mvnne	r4, #0
   14ff4:	mvnne	r5, #0
   14ff8:	subs	r0, r1, r4
   14ffc:	mov	r1, #0
   15000:	sbcs	r0, ip, r5
   15004:	movwcc	r1, #1
   15008:	umull	r3, r0, r4, r2
   1500c:	cmp	r1, #0
   15010:	mla	r0, r4, sl, r0
   15014:	mov	r4, lr
   15018:	str	r1, [sp, #12]
   1501c:	mvnne	r3, #0
   15020:	mla	r0, r5, r2, r0
   15024:	cmp	r1, #0
   15028:	str	r4, [sp]
   1502c:	umull	r7, r6, r3, r2
   15030:	mvnne	r0, #0
   15034:	mla	r6, r3, sl, r6
   15038:	subs	r3, lr, r3
   1503c:	mla	r5, r0, r2, r6
   15040:	sbcs	r0, ip, r0
   15044:	mov	r3, #0
   15048:	mov	r0, #0
   1504c:	movwcc	r0, #1
   15050:	cmp	r0, #0
   15054:	str	r0, [sp, #8]
   15058:	mvnne	r7, #0
   1505c:	mvnne	r5, #0
   15060:	subs	r0, lr, r7
   15064:	sbcs	r0, ip, r5
   15068:	movwcc	r3, #1
   1506c:	umull	r6, r0, r7, r2
   15070:	cmp	r3, #0
   15074:	mla	r7, r7, sl, r0
   15078:	mov	r0, ip
   1507c:	mvnne	r6, #0
   15080:	mla	r7, r5, r2, r7
   15084:	cmp	r3, #0
   15088:	mov	r5, #0
   1508c:	umull	r1, lr, r6, r2
   15090:	mvnne	r7, #0
   15094:	mla	lr, r6, sl, lr
   15098:	subs	r6, r4, r6
   1509c:	mla	lr, r7, r2, lr
   150a0:	sbcs	r7, ip, r7
   150a4:	mov	ip, #0
   150a8:	movwcc	ip, #1
   150ac:	cmp	ip, #0
   150b0:	mvnne	r1, #0
   150b4:	mvnne	lr, #0
   150b8:	subs	r7, r4, r1
   150bc:	sbcs	r7, r0, lr
   150c0:	movwcc	r5, #1
   150c4:	umull	r0, r7, r1, r2
   150c8:	cmp	r5, #0
   150cc:	mla	r1, r1, sl, r7
   150d0:	mvnne	r0, #0
   150d4:	mla	r1, lr, r2, r1
   150d8:	cmp	r5, #0
   150dc:	umull	r6, r4, r0, r2
   150e0:	mvnne	r1, #0
   150e4:	mla	r4, r0, sl, r4
   150e8:	mla	r7, r1, r2, r4
   150ec:	ldr	r2, [sp]
   150f0:	subs	r0, r2, r0
   150f4:	ldr	r2, [sp, #16]
   150f8:	ldr	r0, [sp, #4]
   150fc:	sbcs	r0, r0, r1
   15100:	mov	r0, #0
   15104:	movwcc	r0, #1
   15108:	cmp	r0, #0
   1510c:	mov	r1, r0
   15110:	ldr	r0, [sp, #20]
   15114:	mvnne	r7, #0
   15118:	mvnne	r6, #0
   1511c:	orr	r0, r0, r2
   15120:	ldr	r2, [sp, #12]
   15124:	orr	r0, r0, r2
   15128:	ldr	r2, [sp, #8]
   1512c:	orr	r0, r0, r2
   15130:	orr	r0, r0, r3
   15134:	orr	r0, r0, ip
   15138:	orr	r0, r0, r5
   1513c:	orr	r0, r0, r1
   15140:	and	r3, r0, #1
   15144:	b	151a0 <__assert_fail@plt+0x4198>
   15148:	mov	r1, #0
   1514c:	lsl	r2, r7, #9
   15150:	lsl	r0, r6, #9
   15154:	lsr	r3, r7, #23
   15158:	cmp	r1, r7, lsr #23
   1515c:	orr	r2, r2, r6, lsr #23
   15160:	mvnne	r0, #0
   15164:	movwne	r3, #1
   15168:	cmp	r1, r7, lsr #23
   1516c:	mvnne	r2, #0
   15170:	mov	r6, r0
   15174:	mov	r7, r2
   15178:	b	151a0 <__assert_fail@plt+0x4198>
   1517c:	lsl	r1, r7, #1
   15180:	lsl	r0, r6, #1
   15184:	cmp	r7, #0
   15188:	lsr	r3, r7, #31
   1518c:	orr	r1, r1, r6, lsr #31
   15190:	mvnlt	r0, #0
   15194:	mvnlt	r1, #0
   15198:	mov	r6, r0
   1519c:	mov	r7, r1
   151a0:	ldr	r1, [sp, #32]
   151a4:	ldr	r2, [sp, #28]
   151a8:	orr	r8, r3, r8
   151ac:	add	r0, r1, r2
   151b0:	str	r0, [r9]
   151b4:	ldrb	r0, [r1, r2]
   151b8:	cmp	r0, #0
   151bc:	orrne	r8, r8, #2
   151c0:	ldr	r0, [sp, #36]	; 0x24
   151c4:	strd	r6, [r0]
   151c8:	mov	r0, r8
   151cc:	sub	sp, fp, #28
   151d0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   151d4:	movw	r0, #24877	; 0x612d
   151d8:	movw	r1, #24915	; 0x6153
   151dc:	movw	r3, #24931	; 0x6163
   151e0:	mov	r2, #85	; 0x55
   151e4:	movt	r0, #1
   151e8:	movt	r1, #1
   151ec:	movt	r3, #1
   151f0:	bl	11008 <__assert_fail@plt>
   151f4:	clz	r2, r1
   151f8:	clz	r3, r0
   151fc:	lsr	r2, r2, #5
   15200:	lsr	r3, r3, #5
   15204:	orrs	r2, r3, r2
   15208:	movwne	r1, #1
   1520c:	movwne	r0, #1
   15210:	cmp	r1, #0
   15214:	beq	15244 <__assert_fail@plt+0x423c>
   15218:	mvn	r2, #-2147483648	; 0x80000000
   1521c:	udiv	r2, r2, r1
   15220:	cmp	r2, r0
   15224:	bcs	15244 <__assert_fail@plt+0x423c>
   15228:	push	{fp, lr}
   1522c:	mov	fp, sp
   15230:	bl	10f54 <__errno_location@plt>
   15234:	mov	r1, #12
   15238:	str	r1, [r0]
   1523c:	mov	r0, #0
   15240:	pop	{fp, pc}
   15244:	b	10dbc <calloc@plt>
   15248:	cmp	r0, #0
   1524c:	movweq	r0, #1
   15250:	cmn	r0, #1
   15254:	ble	1525c <__assert_fail@plt+0x4254>
   15258:	b	10edc <malloc@plt>
   1525c:	push	{fp, lr}
   15260:	mov	fp, sp
   15264:	bl	10f54 <__errno_location@plt>
   15268:	mov	r1, #12
   1526c:	str	r1, [r0]
   15270:	mov	r0, #0
   15274:	pop	{fp, pc}
   15278:	push	{fp, lr}
   1527c:	mov	fp, sp
   15280:	cmp	r0, #0
   15284:	beq	152a0 <__assert_fail@plt+0x4298>
   15288:	cmp	r1, #0
   1528c:	beq	152ac <__assert_fail@plt+0x42a4>
   15290:	cmn	r1, #1
   15294:	ble	152b8 <__assert_fail@plt+0x42b0>
   15298:	pop	{fp, lr}
   1529c:	b	10e64 <realloc@plt>
   152a0:	mov	r0, r1
   152a4:	pop	{fp, lr}
   152a8:	b	15248 <__assert_fail@plt+0x4240>
   152ac:	bl	15454 <__assert_fail@plt+0x444c>
   152b0:	mov	r0, #0
   152b4:	pop	{fp, pc}
   152b8:	bl	10f54 <__errno_location@plt>
   152bc:	mov	r1, #12
   152c0:	str	r1, [r0]
   152c4:	mov	r0, #0
   152c8:	pop	{fp, pc}
   152cc:	push	{r4, r5, r6, sl, fp, lr}
   152d0:	add	fp, sp, #16
   152d4:	mov	r4, r0
   152d8:	bl	10eac <__fpending@plt>
   152dc:	ldr	r6, [r4]
   152e0:	mov	r5, r0
   152e4:	mov	r0, r4
   152e8:	bl	15350 <__assert_fail@plt+0x4348>
   152ec:	tst	r6, #32
   152f0:	bne	15328 <__assert_fail@plt+0x4320>
   152f4:	cmp	r0, #0
   152f8:	mov	r4, r0
   152fc:	mvnne	r4, #0
   15300:	cmp	r5, #0
   15304:	bne	15334 <__assert_fail@plt+0x432c>
   15308:	cmp	r0, #0
   1530c:	beq	15334 <__assert_fail@plt+0x432c>
   15310:	bl	10f54 <__errno_location@plt>
   15314:	ldr	r0, [r0]
   15318:	subs	r4, r0, #9
   1531c:	mvnne	r4, #0
   15320:	mov	r0, r4
   15324:	pop	{r4, r5, r6, sl, fp, pc}
   15328:	mvn	r4, #0
   1532c:	cmp	r0, #0
   15330:	beq	1533c <__assert_fail@plt+0x4334>
   15334:	mov	r0, r4
   15338:	pop	{r4, r5, r6, sl, fp, pc}
   1533c:	bl	10f54 <__errno_location@plt>
   15340:	mov	r1, #0
   15344:	str	r1, [r0]
   15348:	mov	r0, r4
   1534c:	pop	{r4, r5, r6, sl, fp, pc}
   15350:	push	{r4, r5, r6, sl, fp, lr}
   15354:	add	fp, sp, #16
   15358:	sub	sp, sp, #8
   1535c:	mov	r4, r0
   15360:	bl	10f84 <fileno@plt>
   15364:	cmn	r0, #1
   15368:	ble	153dc <__assert_fail@plt+0x43d4>
   1536c:	mov	r0, r4
   15370:	bl	10ef4 <__freading@plt>
   15374:	cmp	r0, #0
   15378:	beq	153a4 <__assert_fail@plt+0x439c>
   1537c:	mov	r0, r4
   15380:	bl	10f84 <fileno@plt>
   15384:	mov	r1, #1
   15388:	mov	r2, #0
   1538c:	mov	r3, #0
   15390:	str	r1, [sp]
   15394:	bl	10e94 <lseek64@plt>
   15398:	and	r0, r0, r1
   1539c:	cmn	r0, #1
   153a0:	beq	153dc <__assert_fail@plt+0x43d4>
   153a4:	mov	r0, r4
   153a8:	bl	153ec <__assert_fail@plt+0x43e4>
   153ac:	cmp	r0, #0
   153b0:	beq	153dc <__assert_fail@plt+0x43d4>
   153b4:	bl	10f54 <__errno_location@plt>
   153b8:	ldr	r6, [r0]
   153bc:	mov	r5, r0
   153c0:	mov	r0, r4
   153c4:	bl	10f9c <fclose@plt>
   153c8:	cmp	r6, #0
   153cc:	strne	r6, [r5]
   153d0:	mvnne	r0, #0
   153d4:	sub	sp, fp, #16
   153d8:	pop	{r4, r5, r6, sl, fp, pc}
   153dc:	mov	r0, r4
   153e0:	sub	sp, fp, #16
   153e4:	pop	{r4, r5, r6, sl, fp, lr}
   153e8:	b	10f9c <fclose@plt>
   153ec:	push	{r4, sl, fp, lr}
   153f0:	add	fp, sp, #8
   153f4:	sub	sp, sp, #8
   153f8:	mov	r4, r0
   153fc:	cmp	r0, #0
   15400:	beq	1541c <__assert_fail@plt+0x4414>
   15404:	mov	r0, r4
   15408:	bl	10ef4 <__freading@plt>
   1540c:	cmp	r0, #0
   15410:	ldrbne	r0, [r4, #1]
   15414:	tstne	r0, #1
   15418:	bne	1542c <__assert_fail@plt+0x4424>
   1541c:	mov	r0, r4
   15420:	sub	sp, fp, #8
   15424:	pop	{r4, sl, fp, lr}
   15428:	b	10dec <fflush@plt>
   1542c:	mov	r0, #1
   15430:	mov	r2, #0
   15434:	mov	r3, #0
   15438:	str	r0, [sp]
   1543c:	mov	r0, r4
   15440:	bl	1547c <__assert_fail@plt+0x4474>
   15444:	mov	r0, r4
   15448:	sub	sp, fp, #8
   1544c:	pop	{r4, sl, fp, lr}
   15450:	b	10dec <fflush@plt>
   15454:	push	{r4, r5, r6, sl, fp, lr}
   15458:	add	fp, sp, #16
   1545c:	mov	r4, r0
   15460:	bl	10f54 <__errno_location@plt>
   15464:	ldr	r6, [r0]
   15468:	mov	r5, r0
   1546c:	mov	r0, r4
   15470:	bl	10df8 <free@plt>
   15474:	str	r6, [r5]
   15478:	pop	{r4, r5, r6, sl, fp, pc}
   1547c:	push	{r4, r5, r6, r7, fp, lr}
   15480:	add	fp, sp, #16
   15484:	sub	sp, sp, #8
   15488:	mov	r4, r0
   1548c:	ldr	r0, [r0, #4]
   15490:	mov	r5, r3
   15494:	mov	r6, r2
   15498:	ldr	r1, [r4, #8]
   1549c:	cmp	r1, r0
   154a0:	bne	154bc <__assert_fail@plt+0x44b4>
   154a4:	ldrd	r0, [r4, #16]
   154a8:	cmp	r1, r0
   154ac:	bne	154bc <__assert_fail@plt+0x44b4>
   154b0:	ldr	r0, [r4, #36]	; 0x24
   154b4:	cmp	r0, #0
   154b8:	beq	154d4 <__assert_fail@plt+0x44cc>
   154bc:	mov	r0, r4
   154c0:	mov	r2, r6
   154c4:	mov	r3, r5
   154c8:	sub	sp, fp, #16
   154cc:	pop	{r4, r5, r6, r7, fp, lr}
   154d0:	b	10fa8 <fseeko64@plt>
   154d4:	ldr	r7, [fp, #8]
   154d8:	mov	r0, r4
   154dc:	bl	10f84 <fileno@plt>
   154e0:	mov	r2, r6
   154e4:	mov	r3, r5
   154e8:	str	r7, [sp]
   154ec:	bl	10e94 <lseek64@plt>
   154f0:	and	r2, r0, r1
   154f4:	cmn	r2, #1
   154f8:	mvneq	r0, #0
   154fc:	subeq	sp, fp, #16
   15500:	popeq	{r4, r5, r6, r7, fp, pc}
   15504:	strd	r0, [r4, #80]	; 0x50
   15508:	ldr	r0, [r4]
   1550c:	bic	r0, r0, #16
   15510:	str	r0, [r4]
   15514:	mov	r0, #0
   15518:	sub	sp, fp, #16
   1551c:	pop	{r4, r5, r6, r7, fp, pc}
   15520:	push	{fp, lr}
   15524:	mov	fp, sp
   15528:	mov	r0, #14
   1552c:	bl	10fcc <nl_langinfo@plt>
   15530:	movw	r1, #22969	; 0x59b9
   15534:	cmp	r0, #0
   15538:	movt	r1, #1
   1553c:	movne	r1, r0
   15540:	movw	r0, #25010	; 0x61b2
   15544:	ldrb	r2, [r1]
   15548:	movt	r0, #1
   1554c:	cmp	r2, #0
   15550:	movne	r0, r1
   15554:	pop	{fp, pc}
   15558:	push	{r4, r5, r6, r7, fp, lr}
   1555c:	add	fp, sp, #16
   15560:	sub	sp, sp, #8
   15564:	add	r5, sp, #4
   15568:	cmp	r0, #0
   1556c:	mov	r7, r2
   15570:	mov	r4, r1
   15574:	movne	r5, r0
   15578:	mov	r0, r5
   1557c:	bl	10eb8 <mbrtowc@plt>
   15580:	mov	r6, r0
   15584:	cmp	r7, #0
   15588:	beq	155ac <__assert_fail@plt+0x45a4>
   1558c:	cmn	r6, #2
   15590:	bcc	155ac <__assert_fail@plt+0x45a4>
   15594:	mov	r0, #0
   15598:	bl	155f4 <__assert_fail@plt+0x45ec>
   1559c:	cmp	r0, #0
   155a0:	ldrbeq	r0, [r4]
   155a4:	moveq	r6, #1
   155a8:	streq	r0, [r5]
   155ac:	mov	r0, r6
   155b0:	sub	sp, fp, #16
   155b4:	pop	{r4, r5, r6, r7, fp, pc}
   155b8:	cmp	r2, #0
   155bc:	beq	155ec <__assert_fail@plt+0x45e4>
   155c0:	mvn	r3, #0
   155c4:	udiv	r3, r3, r2
   155c8:	cmp	r3, r1
   155cc:	bcs	155ec <__assert_fail@plt+0x45e4>
   155d0:	push	{fp, lr}
   155d4:	mov	fp, sp
   155d8:	bl	10f54 <__errno_location@plt>
   155dc:	mov	r1, #12
   155e0:	str	r1, [r0]
   155e4:	mov	r0, #0
   155e8:	pop	{fp, pc}
   155ec:	mul	r1, r2, r1
   155f0:	b	15278 <__assert_fail@plt+0x4270>
   155f4:	push	{r4, sl, fp, lr}
   155f8:	add	fp, sp, #8
   155fc:	sub	sp, sp, #264	; 0x108
   15600:	add	r1, sp, #7
   15604:	movw	r2, #257	; 0x101
   15608:	bl	15658 <__assert_fail@plt+0x4650>
   1560c:	mov	r4, #0
   15610:	cmp	r0, #0
   15614:	bne	1564c <__assert_fail@plt+0x4644>
   15618:	movw	r1, #25016	; 0x61b8
   1561c:	add	r0, sp, #7
   15620:	movt	r1, #1
   15624:	bl	10de0 <strcmp@plt>
   15628:	cmp	r0, #0
   1562c:	beq	1564c <__assert_fail@plt+0x4644>
   15630:	movw	r1, #25018	; 0x61ba
   15634:	add	r0, sp, #7
   15638:	movt	r1, #1
   1563c:	bl	10de0 <strcmp@plt>
   15640:	mov	r4, r0
   15644:	cmp	r0, #0
   15648:	movwne	r4, #1
   1564c:	mov	r0, r4
   15650:	sub	sp, fp, #8
   15654:	pop	{r4, sl, fp, pc}
   15658:	push	{r4, r5, r6, r7, fp, lr}
   1565c:	add	fp, sp, #16
   15660:	mov	r4, r1
   15664:	mov	r1, #0
   15668:	mov	r6, r2
   1566c:	bl	10fb4 <setlocale@plt>
   15670:	cmp	r0, #0
   15674:	beq	156a4 <__assert_fail@plt+0x469c>
   15678:	mov	r7, r0
   1567c:	bl	10f3c <strlen@plt>
   15680:	cmp	r0, r6
   15684:	bcs	156c4 <__assert_fail@plt+0x46bc>
   15688:	add	r2, r0, #1
   1568c:	mov	r0, r4
   15690:	mov	r1, r7
   15694:	bl	10e10 <memcpy@plt>
   15698:	mov	r5, #0
   1569c:	mov	r0, r5
   156a0:	pop	{r4, r5, r6, r7, fp, pc}
   156a4:	cmp	r6, #0
   156a8:	mov	r5, #22
   156ac:	movne	r0, #0
   156b0:	strbne	r0, [r4]
   156b4:	movne	r0, r5
   156b8:	popne	{r4, r5, r6, r7, fp, pc}
   156bc:	mov	r0, r5
   156c0:	pop	{r4, r5, r6, r7, fp, pc}
   156c4:	mov	r5, #34	; 0x22
   156c8:	cmp	r6, #0
   156cc:	beq	156ec <__assert_fail@plt+0x46e4>
   156d0:	sub	r6, r6, #1
   156d4:	mov	r0, r4
   156d8:	mov	r1, r7
   156dc:	mov	r2, r6
   156e0:	bl	10e10 <memcpy@plt>
   156e4:	mov	r0, #0
   156e8:	strb	r0, [r4, r6]
   156ec:	mov	r0, r5
   156f0:	pop	{r4, r5, r6, r7, fp, pc}
   156f4:	mov	r1, #0
   156f8:	b	10fb4 <setlocale@plt>
   156fc:	cmp	r3, #0
   15700:	cmpeq	r2, #0
   15704:	bne	1571c <__assert_fail@plt+0x4714>
   15708:	cmp	r1, #0
   1570c:	cmpeq	r0, #0
   15710:	mvnne	r1, #0
   15714:	mvnne	r0, #0
   15718:	b	15738 <__assert_fail@plt+0x4730>
   1571c:	sub	sp, sp, #8
   15720:	push	{sp, lr}
   15724:	bl	15748 <__assert_fail@plt+0x4740>
   15728:	ldr	lr, [sp, #4]
   1572c:	add	sp, sp, #8
   15730:	pop	{r2, r3}
   15734:	bx	lr
   15738:	push	{r1, lr}
   1573c:	mov	r0, #8
   15740:	bl	10dd4 <raise@plt>
   15744:	pop	{r1, pc}
   15748:	cmp	r1, r3
   1574c:	cmpeq	r0, r2
   15750:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15754:	mov	r4, r0
   15758:	movcc	r0, #0
   1575c:	mov	r5, r1
   15760:	ldr	lr, [sp, #36]	; 0x24
   15764:	movcc	r1, r0
   15768:	bcc	15864 <__assert_fail@plt+0x485c>
   1576c:	cmp	r3, #0
   15770:	clzeq	ip, r2
   15774:	clzne	ip, r3
   15778:	addeq	ip, ip, #32
   1577c:	cmp	r5, #0
   15780:	clzeq	r1, r4
   15784:	addeq	r1, r1, #32
   15788:	clzne	r1, r5
   1578c:	sub	ip, ip, r1
   15790:	sub	sl, ip, #32
   15794:	lsl	r9, r3, ip
   15798:	rsb	fp, ip, #32
   1579c:	orr	r9, r9, r2, lsl sl
   157a0:	orr	r9, r9, r2, lsr fp
   157a4:	lsl	r8, r2, ip
   157a8:	cmp	r5, r9
   157ac:	cmpeq	r4, r8
   157b0:	movcc	r0, #0
   157b4:	movcc	r1, r0
   157b8:	bcc	157d4 <__assert_fail@plt+0x47cc>
   157bc:	mov	r0, #1
   157c0:	subs	r4, r4, r8
   157c4:	lsl	r1, r0, sl
   157c8:	orr	r1, r1, r0, lsr fp
   157cc:	lsl	r0, r0, ip
   157d0:	sbc	r5, r5, r9
   157d4:	cmp	ip, #0
   157d8:	beq	15864 <__assert_fail@plt+0x485c>
   157dc:	lsr	r6, r8, #1
   157e0:	orr	r6, r6, r9, lsl #31
   157e4:	lsr	r7, r9, #1
   157e8:	mov	r2, ip
   157ec:	b	15810 <__assert_fail@plt+0x4808>
   157f0:	subs	r3, r4, r6
   157f4:	sbc	r8, r5, r7
   157f8:	adds	r3, r3, r3
   157fc:	adc	r8, r8, r8
   15800:	adds	r4, r3, #1
   15804:	adc	r5, r8, #0
   15808:	subs	r2, r2, #1
   1580c:	beq	1582c <__assert_fail@plt+0x4824>
   15810:	cmp	r5, r7
   15814:	cmpeq	r4, r6
   15818:	bcs	157f0 <__assert_fail@plt+0x47e8>
   1581c:	adds	r4, r4, r4
   15820:	adc	r5, r5, r5
   15824:	subs	r2, r2, #1
   15828:	bne	15810 <__assert_fail@plt+0x4808>
   1582c:	lsr	r3, r4, ip
   15830:	orr	r3, r3, r5, lsl fp
   15834:	lsr	r2, r5, ip
   15838:	orr	r3, r3, r5, lsr sl
   1583c:	adds	r0, r0, r4
   15840:	mov	r4, r3
   15844:	lsl	r3, r2, ip
   15848:	orr	r3, r3, r4, lsl sl
   1584c:	lsl	ip, r4, ip
   15850:	orr	r3, r3, r4, lsr fp
   15854:	adc	r1, r1, r5
   15858:	subs	r0, r0, ip
   1585c:	mov	r5, r2
   15860:	sbc	r1, r1, r3
   15864:	cmp	lr, #0
   15868:	strdne	r4, [lr]
   1586c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15870:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   15874:	mov	r7, r0
   15878:	ldr	r6, [pc, #72]	; 158c8 <__assert_fail@plt+0x48c0>
   1587c:	ldr	r5, [pc, #72]	; 158cc <__assert_fail@plt+0x48c4>
   15880:	add	r6, pc, r6
   15884:	add	r5, pc, r5
   15888:	sub	r6, r6, r5
   1588c:	mov	r8, r1
   15890:	mov	r9, r2
   15894:	bl	10d9c <calloc@plt-0x20>
   15898:	asrs	r6, r6, #2
   1589c:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   158a0:	mov	r4, #0
   158a4:	add	r4, r4, #1
   158a8:	ldr	r3, [r5], #4
   158ac:	mov	r2, r9
   158b0:	mov	r1, r8
   158b4:	mov	r0, r7
   158b8:	blx	r3
   158bc:	cmp	r6, r4
   158c0:	bne	158a4 <__assert_fail@plt+0x489c>
   158c4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   158c8:	andeq	r1, r1, r4, lsl #13
   158cc:	andeq	r1, r1, ip, ror r6
   158d0:	bx	lr
   158d4:	ldr	r3, [pc, #12]	; 158e8 <__assert_fail@plt+0x48e0>
   158d8:	mov	r1, #0
   158dc:	add	r3, pc, r3
   158e0:	ldr	r2, [r3]
   158e4:	b	10f60 <__cxa_atexit@plt>
   158e8:	strdeq	r1, [r1], -r8

Disassembly of section .fini:

000158ec <.fini>:
   158ec:	push	{r3, lr}
   158f0:	pop	{r3, pc}
