
../repos/coreutils/src/tsort:     file format elf32-littlearm


Disassembly of section .init:

00010c44 <.init>:
   10c44:	push	{r3, lr}
   10c48:	bl	10f10 <__assert_fail@plt+0x48>
   10c4c:	pop	{r3, pc}

Disassembly of section .plt:

00010c50 <calloc@plt-0x14>:
   10c50:	push	{lr}		; (str lr, [sp, #-4]!)
   10c54:	ldr	lr, [pc, #4]	; 10c60 <calloc@plt-0x4>
   10c58:	add	lr, pc, lr
   10c5c:	ldr	pc, [lr, #8]!
   10c60:	andeq	r8, r1, r0, lsr #7

00010c64 <calloc@plt>:
   10c64:	add	ip, pc, #0, 12
   10c68:	add	ip, ip, #24, 20	; 0x18000
   10c6c:	ldr	pc, [ip, #928]!	; 0x3a0

00010c70 <fputs_unlocked@plt>:
   10c70:	add	ip, pc, #0, 12
   10c74:	add	ip, ip, #24, 20	; 0x18000
   10c78:	ldr	pc, [ip, #920]!	; 0x398

00010c7c <raise@plt>:
   10c7c:	add	ip, pc, #0, 12
   10c80:	add	ip, ip, #24, 20	; 0x18000
   10c84:	ldr	pc, [ip, #912]!	; 0x390

00010c88 <strcmp@plt>:
   10c88:	add	ip, pc, #0, 12
   10c8c:	add	ip, ip, #24, 20	; 0x18000
   10c90:	ldr	pc, [ip, #904]!	; 0x388

00010c94 <posix_fadvise64@plt>:
   10c94:	add	ip, pc, #0, 12
   10c98:	add	ip, ip, #24, 20	; 0x18000
   10c9c:	ldr	pc, [ip, #896]!	; 0x380

00010ca0 <printf@plt>:
   10ca0:	add	ip, pc, #0, 12
   10ca4:	add	ip, ip, #24, 20	; 0x18000
   10ca8:	ldr	pc, [ip, #888]!	; 0x378

00010cac <fflush@plt>:
   10cac:	add	ip, pc, #0, 12
   10cb0:	add	ip, ip, #24, 20	; 0x18000
   10cb4:	ldr	pc, [ip, #880]!	; 0x370

00010cb8 <free@plt>:
   10cb8:	add	ip, pc, #0, 12
   10cbc:	add	ip, ip, #24, 20	; 0x18000
   10cc0:	ldr	pc, [ip, #872]!	; 0x368

00010cc4 <_exit@plt>:
   10cc4:	add	ip, pc, #0, 12
   10cc8:	add	ip, ip, #24, 20	; 0x18000
   10ccc:	ldr	pc, [ip, #864]!	; 0x360

00010cd0 <memcpy@plt>:
   10cd0:	add	ip, pc, #0, 12
   10cd4:	add	ip, ip, #24, 20	; 0x18000
   10cd8:	ldr	pc, [ip, #856]!	; 0x358

00010cdc <mbsinit@plt>:
   10cdc:	add	ip, pc, #0, 12
   10ce0:	add	ip, ip, #24, 20	; 0x18000
   10ce4:	ldr	pc, [ip, #848]!	; 0x350

00010ce8 <memcmp@plt>:
   10ce8:	add	ip, pc, #0, 12
   10cec:	add	ip, ip, #24, 20	; 0x18000
   10cf0:	ldr	pc, [ip, #840]!	; 0x348

00010cf4 <fputc_unlocked@plt>:
   10cf4:	add	ip, pc, #0, 12
   10cf8:	add	ip, ip, #24, 20	; 0x18000
   10cfc:	ldr	pc, [ip, #832]!	; 0x340

00010d00 <getc_unlocked@plt>:
   10d00:	add	ip, pc, #0, 12
   10d04:	add	ip, ip, #24, 20	; 0x18000
   10d08:	ldr	pc, [ip, #824]!	; 0x338

00010d0c <dup2@plt>:
   10d0c:	add	ip, pc, #0, 12
   10d10:	add	ip, ip, #24, 20	; 0x18000
   10d14:	ldr	pc, [ip, #816]!	; 0x330

00010d18 <realloc@plt>:
   10d18:	add	ip, pc, #0, 12
   10d1c:	add	ip, ip, #24, 20	; 0x18000
   10d20:	ldr	pc, [ip, #808]!	; 0x328

00010d24 <textdomain@plt>:
   10d24:	add	ip, pc, #0, 12
   10d28:	add	ip, ip, #24, 20	; 0x18000
   10d2c:	ldr	pc, [ip, #800]!	; 0x320

00010d30 <iswprint@plt>:
   10d30:	add	ip, pc, #0, 12
   10d34:	add	ip, ip, #24, 20	; 0x18000
   10d38:	ldr	pc, [ip, #792]!	; 0x318

00010d3c <fwrite@plt>:
   10d3c:	add	ip, pc, #0, 12
   10d40:	add	ip, ip, #24, 20	; 0x18000
   10d44:	ldr	pc, [ip, #784]!	; 0x310

00010d48 <lseek64@plt>:
   10d48:	add	ip, pc, #0, 12
   10d4c:	add	ip, ip, #24, 20	; 0x18000
   10d50:	ldr	pc, [ip, #776]!	; 0x308

00010d54 <__ctype_get_mb_cur_max@plt>:
   10d54:	add	ip, pc, #0, 12
   10d58:	add	ip, ip, #24, 20	; 0x18000
   10d5c:	ldr	pc, [ip, #768]!	; 0x300

00010d60 <__fpending@plt>:
   10d60:	add	ip, pc, #0, 12
   10d64:	add	ip, ip, #24, 20	; 0x18000
   10d68:	ldr	pc, [ip, #760]!	; 0x2f8

00010d6c <ferror_unlocked@plt>:
   10d6c:	add	ip, pc, #0, 12
   10d70:	add	ip, ip, #24, 20	; 0x18000
   10d74:	ldr	pc, [ip, #752]!	; 0x2f0

00010d78 <mbrtowc@plt>:
   10d78:	add	ip, pc, #0, 12
   10d7c:	add	ip, ip, #24, 20	; 0x18000
   10d80:	ldr	pc, [ip, #744]!	; 0x2e8

00010d84 <error@plt>:
   10d84:	add	ip, pc, #0, 12
   10d88:	add	ip, ip, #24, 20	; 0x18000
   10d8c:	ldr	pc, [ip, #736]!	; 0x2e0

00010d90 <open64@plt>:
   10d90:	add	ip, pc, #0, 12
   10d94:	add	ip, ip, #24, 20	; 0x18000
   10d98:	ldr	pc, [ip, #728]!	; 0x2d8

00010d9c <puts@plt>:
   10d9c:	add	ip, pc, #0, 12
   10da0:	add	ip, ip, #24, 20	; 0x18000
   10da4:	ldr	pc, [ip, #720]!	; 0x2d0

00010da8 <malloc@plt>:
   10da8:	add	ip, pc, #0, 12
   10dac:	add	ip, ip, #24, 20	; 0x18000
   10db0:	ldr	pc, [ip, #712]!	; 0x2c8

00010db4 <__libc_start_main@plt>:
   10db4:	add	ip, pc, #0, 12
   10db8:	add	ip, ip, #24, 20	; 0x18000
   10dbc:	ldr	pc, [ip, #704]!	; 0x2c0

00010dc0 <__freading@plt>:
   10dc0:	add	ip, pc, #0, 12
   10dc4:	add	ip, ip, #24, 20	; 0x18000
   10dc8:	ldr	pc, [ip, #696]!	; 0x2b8

00010dcc <__gmon_start__@plt>:
   10dcc:	add	ip, pc, #0, 12
   10dd0:	add	ip, ip, #24, 20	; 0x18000
   10dd4:	ldr	pc, [ip, #688]!	; 0x2b0

00010dd8 <freopen64@plt>:
   10dd8:	add	ip, pc, #0, 12
   10ddc:	add	ip, ip, #24, 20	; 0x18000
   10de0:	ldr	pc, [ip, #680]!	; 0x2a8

00010de4 <getopt_long@plt>:
   10de4:	add	ip, pc, #0, 12
   10de8:	add	ip, ip, #24, 20	; 0x18000
   10dec:	ldr	pc, [ip, #672]!	; 0x2a0

00010df0 <__ctype_b_loc@plt>:
   10df0:	add	ip, pc, #0, 12
   10df4:	add	ip, ip, #24, 20	; 0x18000
   10df8:	ldr	pc, [ip, #664]!	; 0x298

00010dfc <exit@plt>:
   10dfc:	add	ip, pc, #0, 12
   10e00:	add	ip, ip, #24, 20	; 0x18000
   10e04:	ldr	pc, [ip, #656]!	; 0x290

00010e08 <gettext@plt>:
   10e08:	add	ip, pc, #0, 12
   10e0c:	add	ip, ip, #24, 20	; 0x18000
   10e10:	ldr	pc, [ip, #648]!	; 0x288

00010e14 <strlen@plt>:
   10e14:	add	ip, pc, #0, 12
   10e18:	add	ip, ip, #24, 20	; 0x18000
   10e1c:	ldr	pc, [ip, #640]!	; 0x280

00010e20 <fprintf@plt>:
   10e20:	add	ip, pc, #0, 12
   10e24:	add	ip, ip, #24, 20	; 0x18000
   10e28:	ldr	pc, [ip, #632]!	; 0x278

00010e2c <__errno_location@plt>:
   10e2c:	add	ip, pc, #0, 12
   10e30:	add	ip, ip, #24, 20	; 0x18000
   10e34:	ldr	pc, [ip, #624]!	; 0x270

00010e38 <__cxa_atexit@plt>:
   10e38:	add	ip, pc, #0, 12
   10e3c:	add	ip, ip, #24, 20	; 0x18000
   10e40:	ldr	pc, [ip, #616]!	; 0x268

00010e44 <memset@plt>:
   10e44:	add	ip, pc, #0, 12
   10e48:	add	ip, ip, #24, 20	; 0x18000
   10e4c:	ldr	pc, [ip, #608]!	; 0x260

00010e50 <fileno@plt>:
   10e50:	add	ip, pc, #0, 12
   10e54:	add	ip, ip, #24, 20	; 0x18000
   10e58:	ldr	pc, [ip, #600]!	; 0x258

00010e5c <fclose@plt>:
   10e5c:	add	ip, pc, #0, 12
   10e60:	add	ip, ip, #24, 20	; 0x18000
   10e64:	ldr	pc, [ip, #592]!	; 0x250

00010e68 <fseeko64@plt>:
   10e68:	add	ip, pc, #0, 12
   10e6c:	add	ip, ip, #24, 20	; 0x18000
   10e70:	ldr	pc, [ip, #584]!	; 0x248

00010e74 <setlocale@plt>:
   10e74:	add	ip, pc, #0, 12
   10e78:	add	ip, ip, #24, 20	; 0x18000
   10e7c:	ldr	pc, [ip, #576]!	; 0x240

00010e80 <strrchr@plt>:
   10e80:	add	ip, pc, #0, 12
   10e84:	add	ip, ip, #24, 20	; 0x18000
   10e88:	ldr	pc, [ip, #568]!	; 0x238

00010e8c <nl_langinfo@plt>:
   10e8c:	add	ip, pc, #0, 12
   10e90:	add	ip, ip, #24, 20	; 0x18000
   10e94:	ldr	pc, [ip, #560]!	; 0x230

00010e98 <bindtextdomain@plt>:
   10e98:	add	ip, pc, #0, 12
   10e9c:	add	ip, ip, #24, 20	; 0x18000
   10ea0:	ldr	pc, [ip, #552]!	; 0x228

00010ea4 <strncmp@plt>:
   10ea4:	add	ip, pc, #0, 12
   10ea8:	add	ip, ip, #24, 20	; 0x18000
   10eac:	ldr	pc, [ip, #544]!	; 0x220

00010eb0 <abort@plt>:
   10eb0:	add	ip, pc, #0, 12
   10eb4:	add	ip, ip, #24, 20	; 0x18000
   10eb8:	ldr	pc, [ip, #536]!	; 0x218

00010ebc <close@plt>:
   10ebc:	add	ip, pc, #0, 12
   10ec0:	add	ip, ip, #24, 20	; 0x18000
   10ec4:	ldr	pc, [ip, #528]!	; 0x210

00010ec8 <__assert_fail@plt>:
   10ec8:	add	ip, pc, #0, 12
   10ecc:	add	ip, ip, #24, 20	; 0x18000
   10ed0:	ldr	pc, [ip, #520]!	; 0x208

Disassembly of section .text:

00010ed4 <.text>:
   10ed4:	mov	fp, #0
   10ed8:	mov	lr, #0
   10edc:	pop	{r1}		; (ldr r1, [sp], #4)
   10ee0:	mov	r2, sp
   10ee4:	push	{r2}		; (str r2, [sp, #-4]!)
   10ee8:	push	{r0}		; (str r0, [sp, #-4]!)
   10eec:	ldr	ip, [pc, #16]	; 10f04 <__assert_fail@plt+0x3c>
   10ef0:	push	{ip}		; (str ip, [sp, #-4]!)
   10ef4:	ldr	r0, [pc, #12]	; 10f08 <__assert_fail@plt+0x40>
   10ef8:	ldr	r3, [pc, #12]	; 10f0c <__assert_fail@plt+0x44>
   10efc:	bl	10db4 <__libc_start_main@plt>
   10f00:	bl	10eb0 <abort@plt>
   10f04:	andeq	r7, r1, r0, lsr #27
   10f08:	andeq	r2, r1, r8, lsr #1
   10f0c:	andeq	r7, r1, r0, asr #26
   10f10:	ldr	r3, [pc, #20]	; 10f2c <__assert_fail@plt+0x64>
   10f14:	ldr	r2, [pc, #20]	; 10f30 <__assert_fail@plt+0x68>
   10f18:	add	r3, pc, r3
   10f1c:	ldr	r2, [r3, r2]
   10f20:	cmp	r2, #0
   10f24:	bxeq	lr
   10f28:	b	10dcc <__gmon_start__@plt>
   10f2c:	andeq	r8, r1, r0, ror #1
   10f30:	ldrdeq	r0, [r0], -ip
   10f34:	ldr	r3, [pc, #28]	; 10f58 <__assert_fail@plt+0x90>
   10f38:	ldr	r0, [pc, #28]	; 10f5c <__assert_fail@plt+0x94>
   10f3c:	sub	r3, r3, r0
   10f40:	cmp	r3, #6
   10f44:	bxls	lr
   10f48:	ldr	r3, [pc, #16]	; 10f60 <__assert_fail@plt+0x98>
   10f4c:	cmp	r3, #0
   10f50:	bxeq	lr
   10f54:	bx	r3
   10f58:	andeq	r9, r2, r3, lsr r1
   10f5c:	andeq	r9, r2, r0, lsr r1
   10f60:	andeq	r0, r0, r0
   10f64:	ldr	r1, [pc, #36]	; 10f90 <__assert_fail@plt+0xc8>
   10f68:	ldr	r0, [pc, #36]	; 10f94 <__assert_fail@plt+0xcc>
   10f6c:	sub	r1, r1, r0
   10f70:	asr	r1, r1, #2
   10f74:	add	r1, r1, r1, lsr #31
   10f78:	asrs	r1, r1, #1
   10f7c:	bxeq	lr
   10f80:	ldr	r3, [pc, #16]	; 10f98 <__assert_fail@plt+0xd0>
   10f84:	cmp	r3, #0
   10f88:	bxeq	lr
   10f8c:	bx	r3
   10f90:	andeq	r9, r2, r0, lsr r1
   10f94:	andeq	r9, r2, r0, lsr r1
   10f98:	andeq	r0, r0, r0
   10f9c:	push	{r4, lr}
   10fa0:	ldr	r4, [pc, #24]	; 10fc0 <__assert_fail@plt+0xf8>
   10fa4:	ldrb	r3, [r4]
   10fa8:	cmp	r3, #0
   10fac:	popne	{r4, pc}
   10fb0:	bl	10f34 <__assert_fail@plt+0x6c>
   10fb4:	mov	r3, #1
   10fb8:	strb	r3, [r4]
   10fbc:	pop	{r4, pc}
   10fc0:	andeq	r9, r2, r4, asr r1
   10fc4:	ldr	r0, [pc, #40]	; 10ff4 <__assert_fail@plt+0x12c>
   10fc8:	ldr	r3, [r0]
   10fcc:	cmp	r3, #0
   10fd0:	bne	10fd8 <__assert_fail@plt+0x110>
   10fd4:	b	10f64 <__assert_fail@plt+0x9c>
   10fd8:	ldr	r3, [pc, #24]	; 10ff8 <__assert_fail@plt+0x130>
   10fdc:	cmp	r3, #0
   10fe0:	beq	10fd4 <__assert_fail@plt+0x10c>
   10fe4:	push	{r4, lr}
   10fe8:	blx	r3
   10fec:	pop	{r4, lr}
   10ff0:	b	10f64 <__assert_fail@plt+0x9c>
   10ff4:	andeq	r8, r2, r4, lsl pc
   10ff8:	andeq	r0, r0, r0
   10ffc:	push	{fp, lr}
   11000:	add	fp, sp, #4
   11004:	ldr	r0, [pc, #32]	; 1102c <__assert_fail@plt+0x164>
   11008:	bl	10e08 <gettext@plt>
   1100c:	mov	r2, r0
   11010:	ldr	r3, [pc, #24]	; 11030 <__assert_fail@plt+0x168>
   11014:	ldr	r3, [r3]
   11018:	mov	r1, r3
   1101c:	mov	r0, r2
   11020:	bl	10c70 <fputs_unlocked@plt>
   11024:	nop			; (mov r0, r0)
   11028:	pop	{fp, pc}
   1102c:	andeq	r7, r1, r8, asr #27
   11030:	andeq	r9, r2, ip, asr #2
   11034:	push	{fp, lr}
   11038:	add	fp, sp, #4
   1103c:	sub	sp, sp, #80	; 0x50
   11040:	str	r0, [fp, #-80]	; 0xffffffb0
   11044:	ldr	r3, [pc, #348]	; 111a8 <__assert_fail@plt+0x2e0>
   11048:	sub	ip, fp, #72	; 0x48
   1104c:	mov	lr, r3
   11050:	ldm	lr!, {r0, r1, r2, r3}
   11054:	stmia	ip!, {r0, r1, r2, r3}
   11058:	ldm	lr!, {r0, r1, r2, r3}
   1105c:	stmia	ip!, {r0, r1, r2, r3}
   11060:	ldm	lr!, {r0, r1, r2, r3}
   11064:	stmia	ip!, {r0, r1, r2, r3}
   11068:	ldm	lr, {r0, r1}
   1106c:	stm	ip, {r0, r1}
   11070:	ldr	r3, [fp, #-80]	; 0xffffffb0
   11074:	str	r3, [fp, #-8]
   11078:	sub	r3, fp, #72	; 0x48
   1107c:	str	r3, [fp, #-12]
   11080:	b	11090 <__assert_fail@plt+0x1c8>
   11084:	ldr	r3, [fp, #-12]
   11088:	add	r3, r3, #8
   1108c:	str	r3, [fp, #-12]
   11090:	ldr	r3, [fp, #-12]
   11094:	ldr	r3, [r3]
   11098:	cmp	r3, #0
   1109c:	beq	110c0 <__assert_fail@plt+0x1f8>
   110a0:	ldr	r3, [fp, #-12]
   110a4:	ldr	r3, [r3]
   110a8:	mov	r1, r3
   110ac:	ldr	r0, [fp, #-80]	; 0xffffffb0
   110b0:	bl	10c88 <strcmp@plt>
   110b4:	mov	r3, r0
   110b8:	cmp	r3, #0
   110bc:	bne	11084 <__assert_fail@plt+0x1bc>
   110c0:	ldr	r3, [fp, #-12]
   110c4:	ldr	r3, [r3, #4]
   110c8:	cmp	r3, #0
   110cc:	beq	110dc <__assert_fail@plt+0x214>
   110d0:	ldr	r3, [fp, #-12]
   110d4:	ldr	r3, [r3, #4]
   110d8:	str	r3, [fp, #-8]
   110dc:	ldr	r0, [pc, #200]	; 111ac <__assert_fail@plt+0x2e4>
   110e0:	bl	10e08 <gettext@plt>
   110e4:	mov	r3, r0
   110e8:	ldr	r2, [pc, #192]	; 111b0 <__assert_fail@plt+0x2e8>
   110ec:	ldr	r1, [pc, #192]	; 111b4 <__assert_fail@plt+0x2ec>
   110f0:	mov	r0, r3
   110f4:	bl	10ca0 <printf@plt>
   110f8:	mov	r1, #0
   110fc:	mov	r0, #5
   11100:	bl	10e74 <setlocale@plt>
   11104:	str	r0, [fp, #-16]
   11108:	ldr	r3, [fp, #-16]
   1110c:	cmp	r3, #0
   11110:	beq	11150 <__assert_fail@plt+0x288>
   11114:	mov	r2, #3
   11118:	ldr	r1, [pc, #152]	; 111b8 <__assert_fail@plt+0x2f0>
   1111c:	ldr	r0, [fp, #-16]
   11120:	bl	10ea4 <strncmp@plt>
   11124:	mov	r3, r0
   11128:	cmp	r3, #0
   1112c:	beq	11150 <__assert_fail@plt+0x288>
   11130:	ldr	r0, [pc, #132]	; 111bc <__assert_fail@plt+0x2f4>
   11134:	bl	10e08 <gettext@plt>
   11138:	mov	r2, r0
   1113c:	ldr	r3, [pc, #124]	; 111c0 <__assert_fail@plt+0x2f8>
   11140:	ldr	r3, [r3]
   11144:	mov	r1, r3
   11148:	mov	r0, r2
   1114c:	bl	10c70 <fputs_unlocked@plt>
   11150:	ldr	r0, [pc, #108]	; 111c4 <__assert_fail@plt+0x2fc>
   11154:	bl	10e08 <gettext@plt>
   11158:	mov	r3, r0
   1115c:	ldr	r2, [fp, #-80]	; 0xffffffb0
   11160:	ldr	r1, [pc, #72]	; 111b0 <__assert_fail@plt+0x2e8>
   11164:	mov	r0, r3
   11168:	bl	10ca0 <printf@plt>
   1116c:	ldr	r0, [pc, #84]	; 111c8 <__assert_fail@plt+0x300>
   11170:	bl	10e08 <gettext@plt>
   11174:	ldr	r2, [fp, #-8]
   11178:	ldr	r3, [fp, #-80]	; 0xffffffb0
   1117c:	cmp	r2, r3
   11180:	bne	1118c <__assert_fail@plt+0x2c4>
   11184:	ldr	r3, [pc, #64]	; 111cc <__assert_fail@plt+0x304>
   11188:	b	11190 <__assert_fail@plt+0x2c8>
   1118c:	ldr	r3, [pc, #60]	; 111d0 <__assert_fail@plt+0x308>
   11190:	mov	r2, r3
   11194:	ldr	r1, [fp, #-8]
   11198:	bl	10ca0 <printf@plt>
   1119c:	nop			; (mov r0, r0)
   111a0:	sub	sp, fp, #4
   111a4:	pop	{fp, pc}
   111a8:	andeq	r7, r1, r4, ror pc
   111ac:	andeq	r7, r1, r0, lsl #28
   111b0:	andeq	r7, r1, r8, lsl lr
   111b4:	andeq	r7, r1, r0, asr #28
   111b8:	andeq	r7, r1, r0, asr lr
   111bc:	andeq	r7, r1, r4, asr lr
   111c0:	andeq	r9, r2, ip, asr #2
   111c4:	muleq	r1, ip, lr
   111c8:			; <UNDEFINED> instruction: 0x00017eb8
   111cc:	andeq	r7, r1, ip, ror #29
   111d0:	strdeq	r7, [r1], -r8
   111d4:	push	{r4, fp, lr}
   111d8:	add	fp, sp, #8
   111dc:	sub	sp, sp, #12
   111e0:	str	r0, [fp, #-16]
   111e4:	ldr	r3, [fp, #-16]
   111e8:	cmp	r3, #0
   111ec:	beq	1121c <__assert_fail@plt+0x354>
   111f0:	ldr	r3, [pc, #184]	; 112b0 <__assert_fail@plt+0x3e8>
   111f4:	ldr	r4, [r3]
   111f8:	ldr	r0, [pc, #180]	; 112b4 <__assert_fail@plt+0x3ec>
   111fc:	bl	10e08 <gettext@plt>
   11200:	mov	r1, r0
   11204:	ldr	r3, [pc, #172]	; 112b8 <__assert_fail@plt+0x3f0>
   11208:	ldr	r3, [r3]
   1120c:	mov	r2, r3
   11210:	mov	r0, r4
   11214:	bl	10e20 <fprintf@plt>
   11218:	b	112a8 <__assert_fail@plt+0x3e0>
   1121c:	ldr	r0, [pc, #152]	; 112bc <__assert_fail@plt+0x3f4>
   11220:	bl	10e08 <gettext@plt>
   11224:	mov	r2, r0
   11228:	ldr	r3, [pc, #136]	; 112b8 <__assert_fail@plt+0x3f0>
   1122c:	ldr	r3, [r3]
   11230:	mov	r1, r3
   11234:	mov	r0, r2
   11238:	bl	10ca0 <printf@plt>
   1123c:	bl	10ffc <__assert_fail@plt+0x134>
   11240:	ldr	r0, [pc, #120]	; 112c0 <__assert_fail@plt+0x3f8>
   11244:	bl	10e08 <gettext@plt>
   11248:	mov	r2, r0
   1124c:	ldr	r3, [pc, #112]	; 112c4 <__assert_fail@plt+0x3fc>
   11250:	ldr	r3, [r3]
   11254:	mov	r1, r3
   11258:	mov	r0, r2
   1125c:	bl	10c70 <fputs_unlocked@plt>
   11260:	ldr	r0, [pc, #96]	; 112c8 <__assert_fail@plt+0x400>
   11264:	bl	10e08 <gettext@plt>
   11268:	mov	r2, r0
   1126c:	ldr	r3, [pc, #80]	; 112c4 <__assert_fail@plt+0x3fc>
   11270:	ldr	r3, [r3]
   11274:	mov	r1, r3
   11278:	mov	r0, r2
   1127c:	bl	10c70 <fputs_unlocked@plt>
   11280:	ldr	r0, [pc, #68]	; 112cc <__assert_fail@plt+0x404>
   11284:	bl	10e08 <gettext@plt>
   11288:	mov	r2, r0
   1128c:	ldr	r3, [pc, #48]	; 112c4 <__assert_fail@plt+0x3fc>
   11290:	ldr	r3, [r3]
   11294:	mov	r1, r3
   11298:	mov	r0, r2
   1129c:	bl	10c70 <fputs_unlocked@plt>
   112a0:	ldr	r0, [pc, #40]	; 112d0 <__assert_fail@plt+0x408>
   112a4:	bl	11034 <__assert_fail@plt+0x16c>
   112a8:	ldr	r0, [fp, #-16]
   112ac:	bl	10dfc <exit@plt>
   112b0:	andeq	r9, r2, r0, asr #2
   112b4:	andeq	r7, r1, ip, lsr #31
   112b8:	andeq	r9, r2, r0, ror r1
   112bc:	ldrdeq	r7, [r1], -r4
   112c0:	andeq	r8, r1, r8, lsr r0
   112c4:	andeq	r9, r2, ip, asr #2
   112c8:	andeq	r8, r1, ip, lsr r0
   112cc:	andeq	r8, r1, ip, rrx
   112d0:	andeq	r8, r1, r4, lsr #1
   112d4:	push	{fp, lr}
   112d8:	add	fp, sp, #4
   112dc:	sub	sp, sp, #16
   112e0:	str	r0, [fp, #-16]
   112e4:	mov	r0, #28
   112e8:	bl	1691c <__assert_fail@plt+0x5a54>
   112ec:	mov	r3, r0
   112f0:	str	r3, [fp, #-8]
   112f4:	ldr	r3, [fp, #-16]
   112f8:	cmp	r3, #0
   112fc:	beq	11318 <__assert_fail@plt+0x450>
   11300:	ldr	r0, [fp, #-16]
   11304:	bl	16ad4 <__assert_fail@plt+0x5c0c>
   11308:	mov	r3, r0
   1130c:	mov	r2, r3
   11310:	ldr	r3, [fp, #-8]
   11314:	str	r2, [r3]
   11318:	ldr	r3, [fp, #-8]
   1131c:	mov	r0, r3
   11320:	sub	sp, fp, #4
   11324:	pop	{fp, pc}
   11328:	push	{fp, lr}
   1132c:	add	fp, sp, #4
   11330:	sub	sp, sp, #32
   11334:	str	r0, [fp, #-32]	; 0xffffffe0
   11338:	str	r1, [fp, #-36]	; 0xffffffdc
   1133c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   11340:	cmp	r3, #0
   11344:	bne	1135c <__assert_fail@plt+0x494>
   11348:	ldr	r3, [pc, #1304]	; 11868 <__assert_fail@plt+0x9a0>
   1134c:	mov	r2, #126	; 0x7e
   11350:	ldr	r1, [pc, #1300]	; 1186c <__assert_fail@plt+0x9a4>
   11354:	ldr	r0, [pc, #1300]	; 11870 <__assert_fail@plt+0x9a8>
   11358:	bl	10ec8 <__assert_fail@plt>
   1135c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   11360:	ldr	r3, [r3, #8]
   11364:	cmp	r3, #0
   11368:	bne	1138c <__assert_fail@plt+0x4c4>
   1136c:	ldr	r0, [fp, #-36]	; 0xffffffdc
   11370:	bl	112d4 <__assert_fail@plt+0x40c>
   11374:	mov	r2, r0
   11378:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1137c:	str	r2, [r3, #8]
   11380:	ldr	r3, [fp, #-32]	; 0xffffffe0
   11384:	ldr	r3, [r3, #8]
   11388:	b	1185c <__assert_fail@plt+0x994>
   1138c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   11390:	str	r3, [fp, #-24]	; 0xffffffe8
   11394:	ldr	r3, [fp, #-32]	; 0xffffffe0
   11398:	ldr	r3, [r3, #8]
   1139c:	str	r3, [fp, #-8]
   113a0:	ldr	r3, [fp, #-8]
   113a4:	str	r3, [fp, #-20]	; 0xffffffec
   113a8:	ldr	r3, [fp, #-36]	; 0xffffffdc
   113ac:	cmp	r3, #0
   113b0:	beq	113d0 <__assert_fail@plt+0x508>
   113b4:	ldr	r3, [fp, #-8]
   113b8:	cmp	r3, #0
   113bc:	beq	113d0 <__assert_fail@plt+0x508>
   113c0:	ldr	r3, [fp, #-8]
   113c4:	ldr	r3, [r3]
   113c8:	cmp	r3, #0
   113cc:	bne	113e4 <__assert_fail@plt+0x51c>
   113d0:	ldr	r3, [pc, #1168]	; 11868 <__assert_fail@plt+0x9a0>
   113d4:	mov	r2, #140	; 0x8c
   113d8:	ldr	r1, [pc, #1164]	; 1186c <__assert_fail@plt+0x9a4>
   113dc:	ldr	r0, [pc, #1168]	; 11874 <__assert_fail@plt+0x9ac>
   113e0:	bl	10ec8 <__assert_fail@plt>
   113e4:	ldr	r3, [fp, #-8]
   113e8:	ldr	r3, [r3]
   113ec:	mov	r1, r3
   113f0:	ldr	r0, [fp, #-36]	; 0xffffffdc
   113f4:	bl	10c88 <strcmp@plt>
   113f8:	str	r0, [fp, #-28]	; 0xffffffe4
   113fc:	ldr	r3, [fp, #-28]	; 0xffffffe4
   11400:	cmp	r3, #0
   11404:	bne	11410 <__assert_fail@plt+0x548>
   11408:	ldr	r3, [fp, #-8]
   1140c:	b	1185c <__assert_fail@plt+0x994>
   11410:	ldr	r3, [fp, #-28]	; 0xffffffe4
   11414:	cmp	r3, #0
   11418:	bge	1142c <__assert_fail@plt+0x564>
   1141c:	ldr	r3, [fp, #-8]
   11420:	ldr	r3, [r3, #4]
   11424:	str	r3, [fp, #-12]
   11428:	b	11438 <__assert_fail@plt+0x570>
   1142c:	ldr	r3, [fp, #-8]
   11430:	ldr	r3, [r3, #8]
   11434:	str	r3, [fp, #-12]
   11438:	ldr	r3, [fp, #-12]
   1143c:	cmp	r3, #0
   11440:	bne	11830 <__assert_fail@plt+0x968>
   11444:	ldr	r0, [fp, #-36]	; 0xffffffdc
   11448:	bl	112d4 <__assert_fail@plt+0x40c>
   1144c:	str	r0, [fp, #-12]
   11450:	ldr	r3, [fp, #-28]	; 0xffffffe4
   11454:	cmp	r3, #0
   11458:	bge	1146c <__assert_fail@plt+0x5a4>
   1145c:	ldr	r3, [fp, #-8]
   11460:	ldr	r2, [fp, #-12]
   11464:	str	r2, [r3, #4]
   11468:	b	11478 <__assert_fail@plt+0x5b0>
   1146c:	ldr	r3, [fp, #-8]
   11470:	ldr	r2, [fp, #-12]
   11474:	str	r2, [r3, #8]
   11478:	ldr	r3, [fp, #-36]	; 0xffffffdc
   1147c:	cmp	r3, #0
   11480:	beq	114c0 <__assert_fail@plt+0x5f8>
   11484:	ldr	r3, [fp, #-20]	; 0xffffffec
   11488:	cmp	r3, #0
   1148c:	beq	114c0 <__assert_fail@plt+0x5f8>
   11490:	ldr	r3, [fp, #-20]	; 0xffffffec
   11494:	ldr	r3, [r3]
   11498:	cmp	r3, #0
   1149c:	beq	114c0 <__assert_fail@plt+0x5f8>
   114a0:	ldr	r3, [fp, #-20]	; 0xffffffec
   114a4:	ldr	r3, [r3]
   114a8:	mov	r1, r3
   114ac:	ldr	r0, [fp, #-36]	; 0xffffffdc
   114b0:	bl	10c88 <strcmp@plt>
   114b4:	mov	r3, r0
   114b8:	cmp	r3, #0
   114bc:	bne	114d4 <__assert_fail@plt+0x60c>
   114c0:	ldr	r3, [pc, #928]	; 11868 <__assert_fail@plt+0x9a0>
   114c4:	mov	r2, #163	; 0xa3
   114c8:	ldr	r1, [pc, #924]	; 1186c <__assert_fail@plt+0x9a4>
   114cc:	ldr	r0, [pc, #932]	; 11878 <__assert_fail@plt+0x9b0>
   114d0:	bl	10ec8 <__assert_fail@plt>
   114d4:	ldr	r3, [fp, #-20]	; 0xffffffec
   114d8:	ldr	r3, [r3]
   114dc:	mov	r1, r3
   114e0:	ldr	r0, [fp, #-36]	; 0xffffffdc
   114e4:	bl	10c88 <strcmp@plt>
   114e8:	mov	r3, r0
   114ec:	cmp	r3, #0
   114f0:	bge	11514 <__assert_fail@plt+0x64c>
   114f4:	ldr	r3, [fp, #-20]	; 0xffffffec
   114f8:	ldr	r3, [r3, #4]
   114fc:	str	r3, [fp, #-8]
   11500:	ldr	r3, [fp, #-8]
   11504:	str	r3, [fp, #-16]
   11508:	mvn	r3, #0
   1150c:	str	r3, [fp, #-28]	; 0xffffffe4
   11510:	b	115e4 <__assert_fail@plt+0x71c>
   11514:	ldr	r3, [fp, #-20]	; 0xffffffec
   11518:	ldr	r3, [r3, #8]
   1151c:	str	r3, [fp, #-8]
   11520:	ldr	r3, [fp, #-8]
   11524:	str	r3, [fp, #-16]
   11528:	mov	r3, #1
   1152c:	str	r3, [fp, #-28]	; 0xffffffe4
   11530:	b	115e4 <__assert_fail@plt+0x71c>
   11534:	ldr	r3, [fp, #-36]	; 0xffffffdc
   11538:	cmp	r3, #0
   1153c:	beq	1157c <__assert_fail@plt+0x6b4>
   11540:	ldr	r3, [fp, #-8]
   11544:	cmp	r3, #0
   11548:	beq	1157c <__assert_fail@plt+0x6b4>
   1154c:	ldr	r3, [fp, #-8]
   11550:	ldr	r3, [r3]
   11554:	cmp	r3, #0
   11558:	beq	1157c <__assert_fail@plt+0x6b4>
   1155c:	ldr	r3, [fp, #-8]
   11560:	ldr	r3, [r3]
   11564:	mov	r1, r3
   11568:	ldr	r0, [fp, #-36]	; 0xffffffdc
   1156c:	bl	10c88 <strcmp@plt>
   11570:	mov	r3, r0
   11574:	cmp	r3, #0
   11578:	bne	11590 <__assert_fail@plt+0x6c8>
   1157c:	ldr	r3, [pc, #740]	; 11868 <__assert_fail@plt+0x9a0>
   11580:	mov	r2, #177	; 0xb1
   11584:	ldr	r1, [pc, #736]	; 1186c <__assert_fail@plt+0x9a4>
   11588:	ldr	r0, [pc, #748]	; 1187c <__assert_fail@plt+0x9b4>
   1158c:	bl	10ec8 <__assert_fail@plt>
   11590:	ldr	r3, [fp, #-8]
   11594:	ldr	r3, [r3]
   11598:	mov	r1, r3
   1159c:	ldr	r0, [fp, #-36]	; 0xffffffdc
   115a0:	bl	10c88 <strcmp@plt>
   115a4:	mov	r3, r0
   115a8:	cmp	r3, #0
   115ac:	bge	115cc <__assert_fail@plt+0x704>
   115b0:	ldr	r3, [fp, #-8]
   115b4:	mvn	r2, #0
   115b8:	strb	r2, [r3, #12]
   115bc:	ldr	r3, [fp, #-8]
   115c0:	ldr	r3, [r3, #4]
   115c4:	str	r3, [fp, #-8]
   115c8:	b	115e4 <__assert_fail@plt+0x71c>
   115cc:	ldr	r3, [fp, #-8]
   115d0:	mov	r2, #1
   115d4:	strb	r2, [r3, #12]
   115d8:	ldr	r3, [fp, #-8]
   115dc:	ldr	r3, [r3, #8]
   115e0:	str	r3, [fp, #-8]
   115e4:	ldr	r2, [fp, #-8]
   115e8:	ldr	r3, [fp, #-12]
   115ec:	cmp	r2, r3
   115f0:	bne	11534 <__assert_fail@plt+0x66c>
   115f4:	ldr	r3, [fp, #-20]	; 0xffffffec
   115f8:	ldrsb	r3, [r3, #12]
   115fc:	cmp	r3, #0
   11600:	beq	11620 <__assert_fail@plt+0x758>
   11604:	ldr	r3, [fp, #-20]	; 0xffffffec
   11608:	ldrsb	r3, [r3, #12]
   1160c:	mov	r2, r3
   11610:	ldr	r3, [fp, #-28]	; 0xffffffe4
   11614:	rsb	r3, r3, #0
   11618:	cmp	r2, r3
   1161c:	bne	11650 <__assert_fail@plt+0x788>
   11620:	ldr	r3, [fp, #-20]	; 0xffffffec
   11624:	ldrsb	r3, [r3, #12]
   11628:	uxtb	r2, r3
   1162c:	ldr	r3, [fp, #-28]	; 0xffffffe4
   11630:	uxtb	r3, r3
   11634:	add	r3, r2, r3
   11638:	uxtb	r3, r3
   1163c:	sxtb	r2, r3
   11640:	ldr	r3, [fp, #-20]	; 0xffffffec
   11644:	strb	r2, [r3, #12]
   11648:	ldr	r3, [fp, #-12]
   1164c:	b	1185c <__assert_fail@plt+0x994>
   11650:	ldr	r3, [fp, #-16]
   11654:	ldrsb	r3, [r3, #12]
   11658:	mov	r2, r3
   1165c:	ldr	r3, [fp, #-28]	; 0xffffffe4
   11660:	cmp	r2, r3
   11664:	bne	116d8 <__assert_fail@plt+0x810>
   11668:	ldr	r3, [fp, #-16]
   1166c:	str	r3, [fp, #-8]
   11670:	ldr	r3, [fp, #-28]	; 0xffffffe4
   11674:	cmp	r3, #0
   11678:	bge	1169c <__assert_fail@plt+0x7d4>
   1167c:	ldr	r3, [fp, #-16]
   11680:	ldr	r2, [r3, #8]
   11684:	ldr	r3, [fp, #-20]	; 0xffffffec
   11688:	str	r2, [r3, #4]
   1168c:	ldr	r3, [fp, #-16]
   11690:	ldr	r2, [fp, #-20]	; 0xffffffec
   11694:	str	r2, [r3, #8]
   11698:	b	116b8 <__assert_fail@plt+0x7f0>
   1169c:	ldr	r3, [fp, #-16]
   116a0:	ldr	r2, [r3, #4]
   116a4:	ldr	r3, [fp, #-20]	; 0xffffffec
   116a8:	str	r2, [r3, #8]
   116ac:	ldr	r3, [fp, #-16]
   116b0:	ldr	r2, [fp, #-20]	; 0xffffffec
   116b4:	str	r2, [r3, #4]
   116b8:	ldr	r3, [fp, #-16]
   116bc:	mov	r2, #0
   116c0:	strb	r2, [r3, #12]
   116c4:	ldr	r3, [fp, #-16]
   116c8:	ldrsb	r2, [r3, #12]
   116cc:	ldr	r3, [fp, #-20]	; 0xffffffec
   116d0:	strb	r2, [r3, #12]
   116d4:	b	117f8 <__assert_fail@plt+0x930>
   116d8:	ldr	r3, [fp, #-28]	; 0xffffffe4
   116dc:	cmp	r3, #0
   116e0:	bge	1172c <__assert_fail@plt+0x864>
   116e4:	ldr	r3, [fp, #-16]
   116e8:	ldr	r3, [r3, #8]
   116ec:	str	r3, [fp, #-8]
   116f0:	ldr	r3, [fp, #-8]
   116f4:	ldr	r2, [r3, #4]
   116f8:	ldr	r3, [fp, #-16]
   116fc:	str	r2, [r3, #8]
   11700:	ldr	r3, [fp, #-8]
   11704:	ldr	r2, [fp, #-16]
   11708:	str	r2, [r3, #4]
   1170c:	ldr	r3, [fp, #-8]
   11710:	ldr	r2, [r3, #8]
   11714:	ldr	r3, [fp, #-20]	; 0xffffffec
   11718:	str	r2, [r3, #4]
   1171c:	ldr	r3, [fp, #-8]
   11720:	ldr	r2, [fp, #-20]	; 0xffffffec
   11724:	str	r2, [r3, #8]
   11728:	b	11770 <__assert_fail@plt+0x8a8>
   1172c:	ldr	r3, [fp, #-16]
   11730:	ldr	r3, [r3, #4]
   11734:	str	r3, [fp, #-8]
   11738:	ldr	r3, [fp, #-8]
   1173c:	ldr	r2, [r3, #8]
   11740:	ldr	r3, [fp, #-16]
   11744:	str	r2, [r3, #4]
   11748:	ldr	r3, [fp, #-8]
   1174c:	ldr	r2, [fp, #-16]
   11750:	str	r2, [r3, #8]
   11754:	ldr	r3, [fp, #-8]
   11758:	ldr	r2, [r3, #4]
   1175c:	ldr	r3, [fp, #-20]	; 0xffffffec
   11760:	str	r2, [r3, #8]
   11764:	ldr	r3, [fp, #-8]
   11768:	ldr	r2, [fp, #-20]	; 0xffffffec
   1176c:	str	r2, [r3, #4]
   11770:	ldr	r3, [fp, #-20]	; 0xffffffec
   11774:	mov	r2, #0
   11778:	strb	r2, [r3, #12]
   1177c:	ldr	r3, [fp, #-16]
   11780:	mov	r2, #0
   11784:	strb	r2, [r3, #12]
   11788:	ldr	r3, [fp, #-8]
   1178c:	ldrsb	r3, [r3, #12]
   11790:	mov	r2, r3
   11794:	ldr	r3, [fp, #-28]	; 0xffffffe4
   11798:	cmp	r2, r3
   1179c:	bne	117c0 <__assert_fail@plt+0x8f8>
   117a0:	ldr	r3, [fp, #-28]	; 0xffffffe4
   117a4:	uxtb	r3, r3
   117a8:	rsb	r3, r3, #0
   117ac:	uxtb	r3, r3
   117b0:	sxtb	r2, r3
   117b4:	ldr	r3, [fp, #-20]	; 0xffffffec
   117b8:	strb	r2, [r3, #12]
   117bc:	b	117ec <__assert_fail@plt+0x924>
   117c0:	ldr	r3, [fp, #-8]
   117c4:	ldrsb	r3, [r3, #12]
   117c8:	mov	r2, r3
   117cc:	ldr	r3, [fp, #-28]	; 0xffffffe4
   117d0:	rsb	r3, r3, #0
   117d4:	cmp	r2, r3
   117d8:	bne	117ec <__assert_fail@plt+0x924>
   117dc:	ldr	r3, [fp, #-28]	; 0xffffffe4
   117e0:	sxtb	r2, r3
   117e4:	ldr	r3, [fp, #-16]
   117e8:	strb	r2, [r3, #12]
   117ec:	ldr	r3, [fp, #-8]
   117f0:	mov	r2, #0
   117f4:	strb	r2, [r3, #12]
   117f8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   117fc:	ldr	r2, [r3, #8]
   11800:	ldr	r3, [fp, #-20]	; 0xffffffec
   11804:	cmp	r2, r3
   11808:	bne	1181c <__assert_fail@plt+0x954>
   1180c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   11810:	ldr	r2, [fp, #-8]
   11814:	str	r2, [r3, #8]
   11818:	b	11828 <__assert_fail@plt+0x960>
   1181c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   11820:	ldr	r2, [fp, #-8]
   11824:	str	r2, [r3, #4]
   11828:	ldr	r3, [fp, #-12]
   1182c:	b	1185c <__assert_fail@plt+0x994>
   11830:	ldr	r3, [fp, #-12]
   11834:	ldrsb	r3, [r3, #12]
   11838:	cmp	r3, #0
   1183c:	beq	11850 <__assert_fail@plt+0x988>
   11840:	ldr	r3, [fp, #-8]
   11844:	str	r3, [fp, #-24]	; 0xffffffe8
   11848:	ldr	r3, [fp, #-12]
   1184c:	str	r3, [fp, #-20]	; 0xffffffec
   11850:	ldr	r3, [fp, #-12]
   11854:	str	r3, [fp, #-8]
   11858:	b	113a8 <__assert_fail@plt+0x4e0>
   1185c:	mov	r0, r3
   11860:	sub	sp, fp, #4
   11864:	pop	{fp, pc}
   11868:	ldrdeq	r8, [r1], -ip
   1186c:	andeq	r8, r1, ip, lsr #1
   11870:	strheq	r8, [r1], -r8	; <UNPREDICTABLE>
   11874:	andeq	r8, r1, r0, asr #1
   11878:	ldrdeq	r8, [r1], -r4
   1187c:	andeq	r8, r1, r0, lsl #2
   11880:	push	{fp, lr}
   11884:	add	fp, sp, #4
   11888:	sub	sp, sp, #16
   1188c:	str	r0, [fp, #-16]
   11890:	str	r1, [fp, #-20]	; 0xffffffec
   11894:	ldr	r3, [fp, #-16]
   11898:	ldr	r2, [r3]
   1189c:	ldr	r3, [fp, #-20]	; 0xffffffec
   118a0:	ldr	r3, [r3]
   118a4:	mov	r1, r3
   118a8:	mov	r0, r2
   118ac:	bl	10c88 <strcmp@plt>
   118b0:	mov	r3, r0
   118b4:	cmp	r3, #0
   118b8:	beq	11908 <__assert_fail@plt+0xa40>
   118bc:	ldr	r3, [fp, #-20]	; 0xffffffec
   118c0:	ldr	r3, [r3, #16]
   118c4:	add	r2, r3, #1
   118c8:	ldr	r3, [fp, #-20]	; 0xffffffec
   118cc:	str	r2, [r3, #16]
   118d0:	mov	r0, #8
   118d4:	bl	15ff4 <__assert_fail@plt+0x512c>
   118d8:	mov	r3, r0
   118dc:	str	r3, [fp, #-8]
   118e0:	ldr	r3, [fp, #-8]
   118e4:	ldr	r2, [fp, #-20]	; 0xffffffec
   118e8:	str	r2, [r3]
   118ec:	ldr	r3, [fp, #-16]
   118f0:	ldr	r2, [r3, #24]
   118f4:	ldr	r3, [fp, #-8]
   118f8:	str	r2, [r3, #4]
   118fc:	ldr	r3, [fp, #-16]
   11900:	ldr	r2, [fp, #-8]
   11904:	str	r2, [r3, #24]
   11908:	nop			; (mov r0, r0)
   1190c:	sub	sp, fp, #4
   11910:	pop	{fp, pc}
   11914:	push	{fp}		; (str fp, [sp, #-4]!)
   11918:	add	fp, sp, #0
   1191c:	sub	sp, sp, #12
   11920:	str	r0, [fp, #-8]
   11924:	ldr	r3, [pc, #32]	; 1194c <__assert_fail@plt+0xa84>
   11928:	ldr	r3, [r3]
   1192c:	add	r3, r3, #1
   11930:	ldr	r2, [pc, #20]	; 1194c <__assert_fail@plt+0xa84>
   11934:	str	r3, [r2]
   11938:	mov	r3, #0
   1193c:	mov	r0, r3
   11940:	add	sp, fp, #0
   11944:	pop	{fp}		; (ldr fp, [sp], #4)
   11948:	bx	lr
   1194c:	andeq	r9, r2, r4, ror #2
   11950:	push	{fp}		; (str fp, [sp, #-4]!)
   11954:	add	fp, sp, #0
   11958:	sub	sp, sp, #12
   1195c:	str	r0, [fp, #-8]
   11960:	ldr	r3, [fp, #-8]
   11964:	ldr	r3, [r3, #16]
   11968:	cmp	r3, #0
   1196c:	bne	119c4 <__assert_fail@plt+0xafc>
   11970:	ldr	r3, [fp, #-8]
   11974:	ldrb	r3, [r3, #13]
   11978:	eor	r3, r3, #1
   1197c:	uxtb	r3, r3
   11980:	cmp	r3, #0
   11984:	beq	119c4 <__assert_fail@plt+0xafc>
   11988:	ldr	r3, [pc, #72]	; 119d8 <__assert_fail@plt+0xb10>
   1198c:	ldr	r3, [r3]
   11990:	cmp	r3, #0
   11994:	bne	119a8 <__assert_fail@plt+0xae0>
   11998:	ldr	r2, [pc, #56]	; 119d8 <__assert_fail@plt+0xb10>
   1199c:	ldr	r3, [fp, #-8]
   119a0:	str	r3, [r2]
   119a4:	b	119b8 <__assert_fail@plt+0xaf0>
   119a8:	ldr	r3, [pc, #44]	; 119dc <__assert_fail@plt+0xb14>
   119ac:	ldr	r3, [r3]
   119b0:	ldr	r2, [fp, #-8]
   119b4:	str	r2, [r3, #20]
   119b8:	ldr	r2, [pc, #28]	; 119dc <__assert_fail@plt+0xb14>
   119bc:	ldr	r3, [fp, #-8]
   119c0:	str	r3, [r2]
   119c4:	mov	r3, #0
   119c8:	mov	r0, r3
   119cc:	add	sp, fp, #0
   119d0:	pop	{fp}		; (ldr fp, [sp], #4)
   119d4:	bx	lr
   119d8:	andeq	r9, r2, r8, asr r1
   119dc:	andeq	r9, r2, ip, asr r1
   119e0:	push	{fp, lr}
   119e4:	add	fp, sp, #4
   119e8:	sub	sp, sp, #24
   119ec:	str	r0, [fp, #-24]	; 0xffffffe8
   119f0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   119f4:	ldr	r3, [r3, #16]
   119f8:	cmp	r3, #0
   119fc:	beq	11b90 <__assert_fail@plt+0xcc8>
   11a00:	ldr	r3, [pc, #408]	; 11ba0 <__assert_fail@plt+0xcd8>
   11a04:	ldr	r3, [r3]
   11a08:	cmp	r3, #0
   11a0c:	bne	11a20 <__assert_fail@plt+0xb58>
   11a10:	ldr	r2, [pc, #392]	; 11ba0 <__assert_fail@plt+0xcd8>
   11a14:	ldr	r3, [fp, #-24]	; 0xffffffe8
   11a18:	str	r3, [r2]
   11a1c:	b	11b90 <__assert_fail@plt+0xcc8>
   11a20:	ldr	r3, [fp, #-24]	; 0xffffffe8
   11a24:	add	r3, r3, #24
   11a28:	str	r3, [fp, #-8]
   11a2c:	b	11b80 <__assert_fail@plt+0xcb8>
   11a30:	ldr	r3, [fp, #-8]
   11a34:	ldr	r3, [r3]
   11a38:	ldr	r2, [r3]
   11a3c:	ldr	r3, [pc, #348]	; 11ba0 <__assert_fail@plt+0xcd8>
   11a40:	ldr	r3, [r3]
   11a44:	cmp	r2, r3
   11a48:	bne	11b70 <__assert_fail@plt+0xca8>
   11a4c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   11a50:	ldr	r3, [r3, #20]
   11a54:	cmp	r3, #0
   11a58:	beq	11b50 <__assert_fail@plt+0xc88>
   11a5c:	b	11af8 <__assert_fail@plt+0xc30>
   11a60:	ldr	r3, [pc, #312]	; 11ba0 <__assert_fail@plt+0xcd8>
   11a64:	ldr	r3, [r3]
   11a68:	ldr	r3, [r3, #20]
   11a6c:	str	r3, [fp, #-12]
   11a70:	ldr	r3, [pc, #296]	; 11ba0 <__assert_fail@plt+0xcd8>
   11a74:	ldr	r3, [r3]
   11a78:	ldr	r3, [r3]
   11a7c:	ldr	r2, [pc, #288]	; 11ba4 <__assert_fail@plt+0xcdc>
   11a80:	mov	r1, #0
   11a84:	mov	r0, #0
   11a88:	bl	10d84 <error@plt>
   11a8c:	ldr	r3, [pc, #268]	; 11ba0 <__assert_fail@plt+0xcd8>
   11a90:	ldr	r2, [r3]
   11a94:	ldr	r3, [fp, #-24]	; 0xffffffe8
   11a98:	cmp	r2, r3
   11a9c:	bne	11adc <__assert_fail@plt+0xc14>
   11aa0:	ldr	r3, [fp, #-8]
   11aa4:	ldr	r3, [r3]
   11aa8:	str	r3, [fp, #-16]
   11aac:	ldr	r3, [fp, #-16]
   11ab0:	ldr	r3, [r3]
   11ab4:	ldr	r2, [r3, #16]
   11ab8:	sub	r2, r2, #1
   11abc:	str	r2, [r3, #16]
   11ac0:	ldr	r3, [fp, #-16]
   11ac4:	ldr	r2, [r3, #4]
   11ac8:	ldr	r3, [fp, #-8]
   11acc:	str	r2, [r3]
   11ad0:	ldr	r0, [fp, #-16]
   11ad4:	bl	125e8 <__assert_fail@plt+0x1720>
   11ad8:	b	11b08 <__assert_fail@plt+0xc40>
   11adc:	ldr	r3, [pc, #188]	; 11ba0 <__assert_fail@plt+0xcd8>
   11ae0:	ldr	r3, [r3]
   11ae4:	mov	r2, #0
   11ae8:	str	r2, [r3, #20]
   11aec:	ldr	r2, [pc, #172]	; 11ba0 <__assert_fail@plt+0xcd8>
   11af0:	ldr	r3, [fp, #-12]
   11af4:	str	r3, [r2]
   11af8:	ldr	r3, [pc, #160]	; 11ba0 <__assert_fail@plt+0xcd8>
   11afc:	ldr	r3, [r3]
   11b00:	cmp	r3, #0
   11b04:	bne	11a60 <__assert_fail@plt+0xb98>
   11b08:	b	11b38 <__assert_fail@plt+0xc70>
   11b0c:	ldr	r3, [pc, #140]	; 11ba0 <__assert_fail@plt+0xcd8>
   11b10:	ldr	r3, [r3]
   11b14:	ldr	r3, [r3, #20]
   11b18:	str	r3, [fp, #-20]	; 0xffffffec
   11b1c:	ldr	r3, [pc, #124]	; 11ba0 <__assert_fail@plt+0xcd8>
   11b20:	ldr	r3, [r3]
   11b24:	mov	r2, #0
   11b28:	str	r2, [r3, #20]
   11b2c:	ldr	r2, [pc, #108]	; 11ba0 <__assert_fail@plt+0xcd8>
   11b30:	ldr	r3, [fp, #-20]	; 0xffffffec
   11b34:	str	r3, [r2]
   11b38:	ldr	r3, [pc, #96]	; 11ba0 <__assert_fail@plt+0xcd8>
   11b3c:	ldr	r3, [r3]
   11b40:	cmp	r3, #0
   11b44:	bne	11b0c <__assert_fail@plt+0xc44>
   11b48:	mov	r3, #1
   11b4c:	b	11b94 <__assert_fail@plt+0xccc>
   11b50:	ldr	r3, [pc, #72]	; 11ba0 <__assert_fail@plt+0xcd8>
   11b54:	ldr	r2, [r3]
   11b58:	ldr	r3, [fp, #-24]	; 0xffffffe8
   11b5c:	str	r2, [r3, #20]
   11b60:	ldr	r2, [pc, #56]	; 11ba0 <__assert_fail@plt+0xcd8>
   11b64:	ldr	r3, [fp, #-24]	; 0xffffffe8
   11b68:	str	r3, [r2]
   11b6c:	b	11b90 <__assert_fail@plt+0xcc8>
   11b70:	ldr	r3, [fp, #-8]
   11b74:	ldr	r3, [r3]
   11b78:	add	r3, r3, #4
   11b7c:	str	r3, [fp, #-8]
   11b80:	ldr	r3, [fp, #-8]
   11b84:	ldr	r3, [r3]
   11b88:	cmp	r3, #0
   11b8c:	bne	11a30 <__assert_fail@plt+0xb68>
   11b90:	mov	r3, #0
   11b94:	mov	r0, r3
   11b98:	sub	sp, fp, #4
   11b9c:	pop	{fp, pc}
   11ba0:	andeq	r9, r2, r0, ror #2
   11ba4:	andeq	r8, r1, ip, lsr #2
   11ba8:	push	{fp, lr}
   11bac:	add	fp, sp, #4
   11bb0:	sub	sp, sp, #8
   11bb4:	str	r0, [fp, #-8]
   11bb8:	str	r1, [fp, #-12]
   11bbc:	ldr	r3, [fp, #-8]
   11bc0:	ldr	r3, [r3, #4]
   11bc4:	cmp	r3, #0
   11bc8:	bne	11bf0 <__assert_fail@plt+0xd28>
   11bcc:	ldr	r3, [fp, #-8]
   11bd0:	ldr	r3, [r3, #8]
   11bd4:	cmp	r3, #0
   11bd8:	bne	11bf0 <__assert_fail@plt+0xd28>
   11bdc:	ldr	r3, [fp, #-12]
   11be0:	ldr	r0, [fp, #-8]
   11be4:	blx	r3
   11be8:	mov	r3, r0
   11bec:	b	11c84 <__assert_fail@plt+0xdbc>
   11bf0:	ldr	r3, [fp, #-8]
   11bf4:	ldr	r3, [r3, #4]
   11bf8:	cmp	r3, #0
   11bfc:	beq	11c28 <__assert_fail@plt+0xd60>
   11c00:	ldr	r3, [fp, #-8]
   11c04:	ldr	r3, [r3, #4]
   11c08:	ldr	r1, [fp, #-12]
   11c0c:	mov	r0, r3
   11c10:	bl	11ba8 <__assert_fail@plt+0xce0>
   11c14:	mov	r3, r0
   11c18:	cmp	r3, #0
   11c1c:	beq	11c28 <__assert_fail@plt+0xd60>
   11c20:	mov	r3, #1
   11c24:	b	11c84 <__assert_fail@plt+0xdbc>
   11c28:	ldr	r3, [fp, #-12]
   11c2c:	ldr	r0, [fp, #-8]
   11c30:	blx	r3
   11c34:	mov	r3, r0
   11c38:	cmp	r3, #0
   11c3c:	beq	11c48 <__assert_fail@plt+0xd80>
   11c40:	mov	r3, #1
   11c44:	b	11c84 <__assert_fail@plt+0xdbc>
   11c48:	ldr	r3, [fp, #-8]
   11c4c:	ldr	r3, [r3, #8]
   11c50:	cmp	r3, #0
   11c54:	beq	11c80 <__assert_fail@plt+0xdb8>
   11c58:	ldr	r3, [fp, #-8]
   11c5c:	ldr	r3, [r3, #8]
   11c60:	ldr	r1, [fp, #-12]
   11c64:	mov	r0, r3
   11c68:	bl	11ba8 <__assert_fail@plt+0xce0>
   11c6c:	mov	r3, r0
   11c70:	cmp	r3, #0
   11c74:	beq	11c80 <__assert_fail@plt+0xdb8>
   11c78:	mov	r3, #1
   11c7c:	b	11c84 <__assert_fail@plt+0xdbc>
   11c80:	mov	r3, #0
   11c84:	mov	r0, r3
   11c88:	sub	sp, fp, #4
   11c8c:	pop	{fp, pc}
   11c90:	push	{fp, lr}
   11c94:	add	fp, sp, #4
   11c98:	sub	sp, sp, #8
   11c9c:	str	r0, [fp, #-8]
   11ca0:	str	r1, [fp, #-12]
   11ca4:	ldr	r3, [fp, #-8]
   11ca8:	ldr	r3, [r3, #8]
   11cac:	cmp	r3, #0
   11cb0:	beq	11cc8 <__assert_fail@plt+0xe00>
   11cb4:	ldr	r3, [fp, #-8]
   11cb8:	ldr	r3, [r3, #8]
   11cbc:	ldr	r1, [fp, #-12]
   11cc0:	mov	r0, r3
   11cc4:	bl	11ba8 <__assert_fail@plt+0xce0>
   11cc8:	nop			; (mov r0, r0)
   11ccc:	sub	sp, fp, #4
   11cd0:	pop	{fp, pc}
   11cd4:	push	{r4, fp, lr}
   11cd8:	add	fp, sp, #8
   11cdc:	sub	sp, sp, #52	; 0x34
   11ce0:	str	r0, [fp, #-56]	; 0xffffffc8
   11ce4:	mov	r3, #1
   11ce8:	strb	r3, [fp, #-13]
   11cec:	mov	r3, #0
   11cf0:	str	r3, [fp, #-20]	; 0xffffffec
   11cf4:	mov	r3, #0
   11cf8:	str	r3, [fp, #-24]	; 0xffffffe8
   11cfc:	ldr	r1, [pc, #856]	; 1205c <__assert_fail@plt+0x1194>
   11d00:	ldr	r0, [fp, #-56]	; 0xffffffc8
   11d04:	bl	10c88 <strcmp@plt>
   11d08:	mov	r3, r0
   11d0c:	cmp	r3, #0
   11d10:	moveq	r3, #1
   11d14:	movne	r3, #0
   11d18:	strb	r3, [fp, #-29]	; 0xffffffe3
   11d1c:	mov	r0, #0
   11d20:	bl	112d4 <__assert_fail@plt+0x40c>
   11d24:	str	r0, [fp, #-36]	; 0xffffffdc
   11d28:	ldrb	r3, [fp, #-29]	; 0xffffffe3
   11d2c:	eor	r3, r3, #1
   11d30:	uxtb	r3, r3
   11d34:	cmp	r3, #0
   11d38:	beq	11d90 <__assert_fail@plt+0xec8>
   11d3c:	ldr	r3, [pc, #796]	; 12060 <__assert_fail@plt+0x1198>
   11d40:	ldr	r3, [r3]
   11d44:	mov	r2, r3
   11d48:	ldr	r1, [pc, #788]	; 12064 <__assert_fail@plt+0x119c>
   11d4c:	ldr	r0, [fp, #-56]	; 0xffffffc8
   11d50:	bl	126e4 <__assert_fail@plt+0x181c>
   11d54:	mov	r3, r0
   11d58:	cmp	r3, #0
   11d5c:	bne	11d90 <__assert_fail@plt+0xec8>
   11d60:	bl	10e2c <__errno_location@plt>
   11d64:	mov	r3, r0
   11d68:	ldr	r4, [r3]
   11d6c:	ldr	r2, [fp, #-56]	; 0xffffffc8
   11d70:	mov	r1, #3
   11d74:	mov	r0, #0
   11d78:	bl	15080 <__assert_fail@plt+0x41b8>
   11d7c:	mov	r3, r0
   11d80:	ldr	r2, [pc, #736]	; 12068 <__assert_fail@plt+0x11a0>
   11d84:	mov	r1, r4
   11d88:	mov	r0, #1
   11d8c:	bl	10d84 <error@plt>
   11d90:	ldr	r3, [pc, #712]	; 12060 <__assert_fail@plt+0x1198>
   11d94:	ldr	r3, [r3]
   11d98:	mov	r1, #2
   11d9c:	mov	r0, r3
   11da0:	bl	123ec <__assert_fail@plt+0x1524>
   11da4:	sub	r3, fp, #48	; 0x30
   11da8:	mov	r0, r3
   11dac:	bl	1531c <__assert_fail@plt+0x4454>
   11db0:	ldr	r3, [pc, #680]	; 12060 <__assert_fail@plt+0x1198>
   11db4:	ldr	r0, [r3]
   11db8:	sub	r3, fp, #48	; 0x30
   11dbc:	mov	r2, #3
   11dc0:	ldr	r1, [pc, #676]	; 1206c <__assert_fail@plt+0x11a4>
   11dc4:	bl	15418 <__assert_fail@plt+0x4550>
   11dc8:	str	r0, [fp, #-40]	; 0xffffffd8
   11dcc:	ldr	r3, [fp, #-40]	; 0xffffffd8
   11dd0:	cmn	r3, #1
   11dd4:	beq	11e38 <__assert_fail@plt+0xf70>
   11dd8:	ldr	r3, [fp, #-40]	; 0xffffffd8
   11ddc:	cmp	r3, #0
   11de0:	bne	11df8 <__assert_fail@plt+0xf30>
   11de4:	ldr	r3, [pc, #644]	; 12070 <__assert_fail@plt+0x11a8>
   11de8:	ldr	r2, [pc, #644]	; 12074 <__assert_fail@plt+0x11ac>
   11dec:	ldr	r1, [pc, #644]	; 12078 <__assert_fail@plt+0x11b0>
   11df0:	ldr	r0, [pc, #644]	; 1207c <__assert_fail@plt+0x11b4>
   11df4:	bl	10ec8 <__assert_fail@plt>
   11df8:	ldr	r3, [fp, #-44]	; 0xffffffd4
   11dfc:	mov	r1, r3
   11e00:	ldr	r0, [fp, #-36]	; 0xffffffdc
   11e04:	bl	11328 <__assert_fail@plt+0x460>
   11e08:	str	r0, [fp, #-24]	; 0xffffffe8
   11e0c:	ldr	r3, [fp, #-20]	; 0xffffffec
   11e10:	cmp	r3, #0
   11e14:	beq	11e2c <__assert_fail@plt+0xf64>
   11e18:	ldr	r1, [fp, #-24]	; 0xffffffe8
   11e1c:	ldr	r0, [fp, #-20]	; 0xffffffec
   11e20:	bl	11880 <__assert_fail@plt+0x9b8>
   11e24:	mov	r3, #0
   11e28:	str	r3, [fp, #-24]	; 0xffffffe8
   11e2c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   11e30:	str	r3, [fp, #-20]	; 0xffffffec
   11e34:	b	11db0 <__assert_fail@plt+0xee8>
   11e38:	nop			; (mov r0, r0)
   11e3c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   11e40:	cmp	r3, #0
   11e44:	beq	11e78 <__assert_fail@plt+0xfb0>
   11e48:	ldr	r0, [pc, #560]	; 12080 <__assert_fail@plt+0x11b8>
   11e4c:	bl	10e08 <gettext@plt>
   11e50:	mov	r4, r0
   11e54:	ldr	r2, [fp, #-56]	; 0xffffffc8
   11e58:	mov	r1, #3
   11e5c:	mov	r0, #0
   11e60:	bl	15080 <__assert_fail@plt+0x41b8>
   11e64:	mov	r3, r0
   11e68:	mov	r2, r4
   11e6c:	mov	r1, #0
   11e70:	mov	r0, #1
   11e74:	bl	10d84 <error@plt>
   11e78:	ldr	r1, [pc, #516]	; 12084 <__assert_fail@plt+0x11bc>
   11e7c:	ldr	r0, [fp, #-36]	; 0xffffffdc
   11e80:	bl	11c90 <__assert_fail@plt+0xdc8>
   11e84:	b	11fd0 <__assert_fail@plt+0x1108>
   11e88:	ldr	r1, [pc, #504]	; 12088 <__assert_fail@plt+0x11c0>
   11e8c:	ldr	r0, [fp, #-36]	; 0xffffffdc
   11e90:	bl	11c90 <__assert_fail@plt+0xdc8>
   11e94:	b	11f5c <__assert_fail@plt+0x1094>
   11e98:	ldr	r3, [pc, #492]	; 1208c <__assert_fail@plt+0x11c4>
   11e9c:	ldr	r3, [r3]
   11ea0:	ldr	r3, [r3, #24]
   11ea4:	str	r3, [fp, #-28]	; 0xffffffe4
   11ea8:	ldr	r3, [pc, #476]	; 1208c <__assert_fail@plt+0x11c4>
   11eac:	ldr	r3, [r3]
   11eb0:	ldr	r3, [r3]
   11eb4:	mov	r0, r3
   11eb8:	bl	10d9c <puts@plt>
   11ebc:	ldr	r3, [pc, #456]	; 1208c <__assert_fail@plt+0x11c4>
   11ec0:	ldr	r3, [r3]
   11ec4:	mov	r2, #1
   11ec8:	strb	r2, [r3, #13]
   11ecc:	ldr	r3, [pc, #444]	; 12090 <__assert_fail@plt+0x11c8>
   11ed0:	ldr	r3, [r3]
   11ed4:	sub	r3, r3, #1
   11ed8:	ldr	r2, [pc, #432]	; 12090 <__assert_fail@plt+0x11c8>
   11edc:	str	r3, [r2]
   11ee0:	b	11f3c <__assert_fail@plt+0x1074>
   11ee4:	ldr	r3, [fp, #-28]	; 0xffffffe4
   11ee8:	ldr	r3, [r3]
   11eec:	ldr	r2, [r3, #16]
   11ef0:	sub	r2, r2, #1
   11ef4:	str	r2, [r3, #16]
   11ef8:	ldr	r3, [fp, #-28]	; 0xffffffe4
   11efc:	ldr	r3, [r3]
   11f00:	ldr	r3, [r3, #16]
   11f04:	cmp	r3, #0
   11f08:	bne	11f30 <__assert_fail@plt+0x1068>
   11f0c:	ldr	r3, [pc, #384]	; 12094 <__assert_fail@plt+0x11cc>
   11f10:	ldr	r3, [r3]
   11f14:	ldr	r2, [fp, #-28]	; 0xffffffe4
   11f18:	ldr	r2, [r2]
   11f1c:	str	r2, [r3, #20]
   11f20:	ldr	r3, [fp, #-28]	; 0xffffffe4
   11f24:	ldr	r3, [r3]
   11f28:	ldr	r2, [pc, #356]	; 12094 <__assert_fail@plt+0x11cc>
   11f2c:	str	r3, [r2]
   11f30:	ldr	r3, [fp, #-28]	; 0xffffffe4
   11f34:	ldr	r3, [r3, #4]
   11f38:	str	r3, [fp, #-28]	; 0xffffffe4
   11f3c:	ldr	r3, [fp, #-28]	; 0xffffffe4
   11f40:	cmp	r3, #0
   11f44:	bne	11ee4 <__assert_fail@plt+0x101c>
   11f48:	ldr	r3, [pc, #316]	; 1208c <__assert_fail@plt+0x11c4>
   11f4c:	ldr	r3, [r3]
   11f50:	ldr	r3, [r3, #20]
   11f54:	ldr	r2, [pc, #304]	; 1208c <__assert_fail@plt+0x11c4>
   11f58:	str	r3, [r2]
   11f5c:	ldr	r3, [pc, #296]	; 1208c <__assert_fail@plt+0x11c4>
   11f60:	ldr	r3, [r3]
   11f64:	cmp	r3, #0
   11f68:	bne	11e98 <__assert_fail@plt+0xfd0>
   11f6c:	ldr	r3, [pc, #284]	; 12090 <__assert_fail@plt+0x11c8>
   11f70:	ldr	r3, [r3]
   11f74:	cmp	r3, #0
   11f78:	beq	11fd0 <__assert_fail@plt+0x1108>
   11f7c:	ldr	r0, [pc, #276]	; 12098 <__assert_fail@plt+0x11d0>
   11f80:	bl	10e08 <gettext@plt>
   11f84:	mov	r4, r0
   11f88:	ldr	r2, [fp, #-56]	; 0xffffffc8
   11f8c:	mov	r1, #3
   11f90:	mov	r0, #0
   11f94:	bl	15080 <__assert_fail@plt+0x41b8>
   11f98:	mov	r3, r0
   11f9c:	mov	r2, r4
   11fa0:	mov	r1, #0
   11fa4:	mov	r0, #0
   11fa8:	bl	10d84 <error@plt>
   11fac:	mov	r3, #0
   11fb0:	strb	r3, [fp, #-13]
   11fb4:	ldr	r1, [pc, #224]	; 1209c <__assert_fail@plt+0x11d4>
   11fb8:	ldr	r0, [fp, #-36]	; 0xffffffdc
   11fbc:	bl	11c90 <__assert_fail@plt+0xdc8>
   11fc0:	ldr	r3, [pc, #216]	; 120a0 <__assert_fail@plt+0x11d8>
   11fc4:	ldr	r3, [r3]
   11fc8:	cmp	r3, #0
   11fcc:	bne	11fb4 <__assert_fail@plt+0x10ec>
   11fd0:	ldr	r3, [pc, #184]	; 12090 <__assert_fail@plt+0x11c8>
   11fd4:	ldr	r3, [r3]
   11fd8:	cmp	r3, #0
   11fdc:	bne	11e88 <__assert_fail@plt+0xfc0>
   11fe0:	ldr	r3, [pc, #120]	; 12060 <__assert_fail@plt+0x1198>
   11fe4:	ldr	r3, [r3]
   11fe8:	mov	r0, r3
   11fec:	bl	12448 <__assert_fail@plt+0x1580>
   11ff0:	mov	r3, r0
   11ff4:	cmp	r3, #0
   11ff8:	beq	12048 <__assert_fail@plt+0x1180>
   11ffc:	bl	10e2c <__errno_location@plt>
   12000:	mov	r3, r0
   12004:	ldr	r4, [r3]
   12008:	ldrb	r3, [fp, #-29]	; 0xffffffe3
   1200c:	cmp	r3, #0
   12010:	beq	12024 <__assert_fail@plt+0x115c>
   12014:	ldr	r0, [pc, #136]	; 120a4 <__assert_fail@plt+0x11dc>
   12018:	bl	10e08 <gettext@plt>
   1201c:	mov	r3, r0
   12020:	b	12038 <__assert_fail@plt+0x1170>
   12024:	ldr	r2, [fp, #-56]	; 0xffffffc8
   12028:	mov	r1, #3
   1202c:	mov	r0, #0
   12030:	bl	15080 <__assert_fail@plt+0x41b8>
   12034:	mov	r3, r0
   12038:	ldr	r2, [pc, #40]	; 12068 <__assert_fail@plt+0x11a0>
   1203c:	mov	r1, r4
   12040:	mov	r0, #1
   12044:	bl	10d84 <error@plt>
   12048:	ldrb	r3, [fp, #-13]
   1204c:	eor	r3, r3, #1
   12050:	uxtb	r3, r3
   12054:	mov	r0, r3
   12058:	bl	10dfc <exit@plt>
   1205c:	andeq	r8, r1, r0, lsr r1
   12060:	andeq	r9, r2, r8, asr #2
   12064:	andeq	r8, r1, r4, lsr r1
   12068:	andeq	r8, r1, ip, lsr #2
   1206c:	andeq	r8, r1, r8, lsr r1
   12070:	andeq	r8, r1, r8, ror #3
   12074:	andeq	r0, r0, sl, asr #3
   12078:	andeq	r8, r1, ip, lsr #1
   1207c:	andeq	r8, r1, ip, lsr r1
   12080:	andeq	r8, r1, r8, asr #2
   12084:	andeq	r1, r1, r4, lsl r9
   12088:	andeq	r1, r1, r0, asr r9
   1208c:	andeq	r9, r2, r8, asr r1
   12090:	andeq	r9, r2, r4, ror #2
   12094:	andeq	r9, r2, ip, asr r1
   12098:	andeq	r8, r1, r4, ror r1
   1209c:	andeq	r1, r1, r0, ror #19
   120a0:	andeq	r9, r2, r0, ror #2
   120a4:	muleq	r1, r0, r1
   120a8:	push	{r4, fp, lr}
   120ac:	add	fp, sp, #8
   120b0:	sub	sp, sp, #36	; 0x24
   120b4:	str	r0, [fp, #-16]
   120b8:	str	r1, [fp, #-20]	; 0xffffffec
   120bc:	ldr	r3, [fp, #-20]	; 0xffffffec
   120c0:	ldr	r3, [r3]
   120c4:	mov	r0, r3
   120c8:	bl	12bc0 <__assert_fail@plt+0x1cf8>
   120cc:	ldr	r1, [pc, #272]	; 121e4 <__assert_fail@plt+0x131c>
   120d0:	mov	r0, #6
   120d4:	bl	10e74 <setlocale@plt>
   120d8:	ldr	r1, [pc, #264]	; 121e8 <__assert_fail@plt+0x1320>
   120dc:	ldr	r0, [pc, #264]	; 121ec <__assert_fail@plt+0x1324>
   120e0:	bl	10e98 <bindtextdomain@plt>
   120e4:	ldr	r0, [pc, #256]	; 121ec <__assert_fail@plt+0x1324>
   120e8:	bl	10d24 <textdomain@plt>
   120ec:	ldr	r0, [pc, #252]	; 121f0 <__assert_fail@plt+0x1328>
   120f0:	bl	17da4 <__assert_fail@plt+0x6edc>
   120f4:	ldr	r3, [pc, #248]	; 121f4 <__assert_fail@plt+0x132c>
   120f8:	ldr	r3, [r3]
   120fc:	mov	r2, #0
   12100:	str	r2, [sp, #16]
   12104:	ldr	r2, [pc, #236]	; 121f8 <__assert_fail@plt+0x1330>
   12108:	str	r2, [sp, #12]
   1210c:	ldr	r2, [pc, #232]	; 121fc <__assert_fail@plt+0x1334>
   12110:	str	r2, [sp, #8]
   12114:	mov	r2, #1
   12118:	str	r2, [sp, #4]
   1211c:	str	r3, [sp]
   12120:	ldr	r3, [pc, #216]	; 12200 <__assert_fail@plt+0x1338>
   12124:	ldr	r2, [pc, #216]	; 12204 <__assert_fail@plt+0x133c>
   12128:	ldr	r1, [fp, #-20]	; 0xffffffec
   1212c:	ldr	r0, [fp, #-16]
   12130:	bl	12aa4 <__assert_fail@plt+0x1bdc>
   12134:	ldr	r3, [pc, #204]	; 12208 <__assert_fail@plt+0x1340>
   12138:	ldr	r3, [r3]
   1213c:	ldr	r2, [fp, #-16]
   12140:	sub	r3, r2, r3
   12144:	cmp	r3, #1
   12148:	ble	12198 <__assert_fail@plt+0x12d0>
   1214c:	ldr	r0, [pc, #184]	; 1220c <__assert_fail@plt+0x1344>
   12150:	bl	10e08 <gettext@plt>
   12154:	mov	r4, r0
   12158:	ldr	r3, [pc, #168]	; 12208 <__assert_fail@plt+0x1340>
   1215c:	ldr	r3, [r3]
   12160:	add	r3, r3, #1
   12164:	lsl	r3, r3, #2
   12168:	ldr	r2, [fp, #-20]	; 0xffffffec
   1216c:	add	r3, r2, r3
   12170:	ldr	r3, [r3]
   12174:	mov	r0, r3
   12178:	bl	152f0 <__assert_fail@plt+0x4428>
   1217c:	mov	r3, r0
   12180:	mov	r2, r4
   12184:	mov	r1, #0
   12188:	mov	r0, #0
   1218c:	bl	10d84 <error@plt>
   12190:	mov	r0, #1
   12194:	bl	111d4 <__assert_fail@plt+0x30c>
   12198:	ldr	r3, [pc, #104]	; 12208 <__assert_fail@plt+0x1340>
   1219c:	ldr	r2, [r3]
   121a0:	ldr	r3, [fp, #-16]
   121a4:	cmp	r2, r3
   121a8:	beq	121c8 <__assert_fail@plt+0x1300>
   121ac:	ldr	r3, [pc, #84]	; 12208 <__assert_fail@plt+0x1340>
   121b0:	ldr	r3, [r3]
   121b4:	lsl	r3, r3, #2
   121b8:	ldr	r2, [fp, #-20]	; 0xffffffec
   121bc:	add	r3, r2, r3
   121c0:	ldr	r3, [r3]
   121c4:	b	121cc <__assert_fail@plt+0x1304>
   121c8:	ldr	r3, [pc, #64]	; 12210 <__assert_fail@plt+0x1348>
   121cc:	mov	r0, r3
   121d0:	bl	11cd4 <__assert_fail@plt+0xe0c>
   121d4:	mov	r3, #0
   121d8:	mov	r0, r3
   121dc:	sub	sp, fp, #8
   121e0:	pop	{r4, fp, pc}
   121e4:	strdeq	r7, [r1], -r8
   121e8:	andeq	r8, r1, r0, lsr #3
   121ec:	andeq	r7, r1, r0, lsl pc
   121f0:	andeq	r2, r1, r8, ror r2
   121f4:	andeq	r9, r2, r8, ror #1
   121f8:			; <UNDEFINED> instruction: 0x000181b8
   121fc:	ldrdeq	r1, [r1], -r4
   12200:	andeq	r7, r1, r0, asr #28
   12204:	andeq	r8, r1, r4, lsr #1
   12208:	andeq	r9, r2, r8, lsr r1
   1220c:	andeq	r8, r1, r8, asr #3
   12210:	andeq	r8, r1, r0, lsr r1
   12214:	push	{fp}		; (str fp, [sp, #-4]!)
   12218:	add	fp, sp, #0
   1221c:	sub	sp, sp, #12
   12220:	str	r0, [fp, #-8]
   12224:	ldr	r2, [pc, #20]	; 12240 <__assert_fail@plt+0x1378>
   12228:	ldr	r3, [fp, #-8]
   1222c:	str	r3, [r2]
   12230:	nop			; (mov r0, r0)
   12234:	add	sp, fp, #0
   12238:	pop	{fp}		; (ldr fp, [sp], #4)
   1223c:	bx	lr
   12240:	andeq	r9, r2, r8, ror #2
   12244:	push	{fp}		; (str fp, [sp, #-4]!)
   12248:	add	fp, sp, #0
   1224c:	sub	sp, sp, #12
   12250:	mov	r3, r0
   12254:	strb	r3, [fp, #-5]
   12258:	ldr	r2, [pc, #20]	; 12274 <__assert_fail@plt+0x13ac>
   1225c:	ldrb	r3, [fp, #-5]
   12260:	strb	r3, [r2]
   12264:	nop			; (mov r0, r0)
   12268:	add	sp, fp, #0
   1226c:	pop	{fp}		; (ldr fp, [sp], #4)
   12270:	bx	lr
   12274:	andeq	r9, r2, ip, ror #2
   12278:	push	{r4, fp, lr}
   1227c:	add	fp, sp, #8
   12280:	sub	sp, sp, #20
   12284:	ldr	r3, [pc, #256]	; 1238c <__assert_fail@plt+0x14c4>
   12288:	ldr	r3, [r3]
   1228c:	mov	r0, r3
   12290:	bl	16e20 <__assert_fail@plt+0x5f58>
   12294:	mov	r3, r0
   12298:	cmp	r3, #0
   1229c:	beq	12354 <__assert_fail@plt+0x148c>
   122a0:	ldr	r3, [pc, #232]	; 12390 <__assert_fail@plt+0x14c8>
   122a4:	ldrb	r3, [r3]
   122a8:	eor	r3, r3, #1
   122ac:	uxtb	r3, r3
   122b0:	cmp	r3, #0
   122b4:	bne	122cc <__assert_fail@plt+0x1404>
   122b8:	bl	10e2c <__errno_location@plt>
   122bc:	mov	r3, r0
   122c0:	ldr	r3, [r3]
   122c4:	cmp	r3, #32
   122c8:	beq	12354 <__assert_fail@plt+0x148c>
   122cc:	ldr	r0, [pc, #192]	; 12394 <__assert_fail@plt+0x14cc>
   122d0:	bl	10e08 <gettext@plt>
   122d4:	str	r0, [fp, #-16]
   122d8:	ldr	r3, [pc, #184]	; 12398 <__assert_fail@plt+0x14d0>
   122dc:	ldr	r3, [r3]
   122e0:	cmp	r3, #0
   122e4:	beq	12328 <__assert_fail@plt+0x1460>
   122e8:	bl	10e2c <__errno_location@plt>
   122ec:	mov	r3, r0
   122f0:	ldr	r4, [r3]
   122f4:	ldr	r3, [pc, #156]	; 12398 <__assert_fail@plt+0x14d0>
   122f8:	ldr	r3, [r3]
   122fc:	mov	r0, r3
   12300:	bl	15020 <__assert_fail@plt+0x4158>
   12304:	mov	r2, r0
   12308:	ldr	r3, [fp, #-16]
   1230c:	str	r3, [sp]
   12310:	mov	r3, r2
   12314:	ldr	r2, [pc, #128]	; 1239c <__assert_fail@plt+0x14d4>
   12318:	mov	r1, r4
   1231c:	mov	r0, #0
   12320:	bl	10d84 <error@plt>
   12324:	b	12344 <__assert_fail@plt+0x147c>
   12328:	bl	10e2c <__errno_location@plt>
   1232c:	mov	r3, r0
   12330:	ldr	r1, [r3]
   12334:	ldr	r3, [fp, #-16]
   12338:	ldr	r2, [pc, #96]	; 123a0 <__assert_fail@plt+0x14d8>
   1233c:	mov	r0, #0
   12340:	bl	10d84 <error@plt>
   12344:	ldr	r3, [pc, #88]	; 123a4 <__assert_fail@plt+0x14dc>
   12348:	ldr	r3, [r3]
   1234c:	mov	r0, r3
   12350:	bl	10cc4 <_exit@plt>
   12354:	ldr	r3, [pc, #76]	; 123a8 <__assert_fail@plt+0x14e0>
   12358:	ldr	r3, [r3]
   1235c:	mov	r0, r3
   12360:	bl	16e20 <__assert_fail@plt+0x5f58>
   12364:	mov	r3, r0
   12368:	cmp	r3, #0
   1236c:	beq	12380 <__assert_fail@plt+0x14b8>
   12370:	ldr	r3, [pc, #44]	; 123a4 <__assert_fail@plt+0x14dc>
   12374:	ldr	r3, [r3]
   12378:	mov	r0, r3
   1237c:	bl	10cc4 <_exit@plt>
   12380:	nop			; (mov r0, r0)
   12384:	sub	sp, fp, #8
   12388:	pop	{r4, fp, pc}
   1238c:	andeq	r9, r2, ip, asr #2
   12390:	andeq	r9, r2, ip, ror #2
   12394:	andeq	r8, r1, r0, lsl #4
   12398:	andeq	r9, r2, r8, ror #2
   1239c:	andeq	r8, r1, ip, lsl #4
   123a0:	andeq	r8, r1, r4, lsl r2
   123a4:	andeq	r9, r2, ip, ror #1
   123a8:	andeq	r9, r2, r0, asr #2
   123ac:	push	{fp, lr}
   123b0:	add	fp, sp, #4
   123b4:	sub	sp, sp, #40	; 0x28
   123b8:	str	r0, [fp, #-16]
   123bc:	strd	r2, [fp, #-28]	; 0xffffffe4
   123c0:	ldr	r3, [fp, #12]
   123c4:	str	r3, [sp, #8]
   123c8:	ldrd	r2, [fp, #4]
   123cc:	strd	r2, [sp]
   123d0:	ldrd	r2, [fp, #-28]	; 0xffffffe4
   123d4:	ldr	r0, [fp, #-16]
   123d8:	bl	10c94 <posix_fadvise64@plt>
   123dc:	str	r0, [fp, #-8]
   123e0:	nop			; (mov r0, r0)
   123e4:	sub	sp, fp, #4
   123e8:	pop	{fp, pc}
   123ec:	push	{fp, lr}
   123f0:	add	fp, sp, #4
   123f4:	sub	sp, sp, #24
   123f8:	str	r0, [fp, #-8]
   123fc:	str	r1, [fp, #-12]
   12400:	ldr	r3, [fp, #-8]
   12404:	cmp	r3, #0
   12408:	beq	1243c <__assert_fail@plt+0x1574>
   1240c:	ldr	r0, [fp, #-8]
   12410:	bl	10e50 <fileno@plt>
   12414:	mov	r1, r0
   12418:	ldr	r3, [fp, #-12]
   1241c:	str	r3, [sp, #8]
   12420:	mov	r2, #0
   12424:	mov	r3, #0
   12428:	strd	r2, [sp]
   1242c:	mov	r2, #0
   12430:	mov	r3, #0
   12434:	mov	r0, r1
   12438:	bl	123ac <__assert_fail@plt+0x14e4>
   1243c:	nop			; (mov r0, r0)
   12440:	sub	sp, fp, #4
   12444:	pop	{fp, pc}
   12448:	push	{fp, lr}
   1244c:	add	fp, sp, #4
   12450:	sub	sp, sp, #32
   12454:	str	r0, [fp, #-24]	; 0xffffffe8
   12458:	mov	r3, #0
   1245c:	str	r3, [fp, #-8]
   12460:	mov	r3, #0
   12464:	str	r3, [fp, #-12]
   12468:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1246c:	bl	10e50 <fileno@plt>
   12470:	str	r0, [fp, #-16]
   12474:	ldr	r3, [fp, #-16]
   12478:	cmp	r3, #0
   1247c:	bge	12490 <__assert_fail@plt+0x15c8>
   12480:	ldr	r0, [fp, #-24]	; 0xffffffe8
   12484:	bl	10e5c <fclose@plt>
   12488:	mov	r3, r0
   1248c:	b	12534 <__assert_fail@plt+0x166c>
   12490:	ldr	r0, [fp, #-24]	; 0xffffffe8
   12494:	bl	10dc0 <__freading@plt>
   12498:	mov	r3, r0
   1249c:	cmp	r3, #0
   124a0:	beq	124dc <__assert_fail@plt+0x1614>
   124a4:	ldr	r0, [fp, #-24]	; 0xffffffe8
   124a8:	bl	10e50 <fileno@plt>
   124ac:	mov	r1, r0
   124b0:	mov	r3, #1
   124b4:	str	r3, [sp]
   124b8:	mov	r2, #0
   124bc:	mov	r3, #0
   124c0:	mov	r0, r1
   124c4:	bl	10d48 <lseek64@plt>
   124c8:	mvn	r2, #0
   124cc:	mvn	r3, #0
   124d0:	cmp	r1, r3
   124d4:	cmpeq	r0, r2
   124d8:	beq	12500 <__assert_fail@plt+0x1638>
   124dc:	ldr	r0, [fp, #-24]	; 0xffffffe8
   124e0:	bl	12588 <__assert_fail@plt+0x16c0>
   124e4:	mov	r3, r0
   124e8:	cmp	r3, #0
   124ec:	beq	12500 <__assert_fail@plt+0x1638>
   124f0:	bl	10e2c <__errno_location@plt>
   124f4:	mov	r3, r0
   124f8:	ldr	r3, [r3]
   124fc:	str	r3, [fp, #-8]
   12500:	ldr	r0, [fp, #-24]	; 0xffffffe8
   12504:	bl	10e5c <fclose@plt>
   12508:	str	r0, [fp, #-12]
   1250c:	ldr	r3, [fp, #-8]
   12510:	cmp	r3, #0
   12514:	beq	12530 <__assert_fail@plt+0x1668>
   12518:	bl	10e2c <__errno_location@plt>
   1251c:	mov	r2, r0
   12520:	ldr	r3, [fp, #-8]
   12524:	str	r3, [r2]
   12528:	mvn	r3, #0
   1252c:	str	r3, [fp, #-12]
   12530:	ldr	r3, [fp, #-12]
   12534:	mov	r0, r3
   12538:	sub	sp, fp, #4
   1253c:	pop	{fp, pc}
   12540:	push	{fp, lr}
   12544:	add	fp, sp, #4
   12548:	sub	sp, sp, #16
   1254c:	str	r0, [fp, #-8]
   12550:	ldr	r3, [fp, #-8]
   12554:	ldr	r3, [r3]
   12558:	and	r3, r3, #256	; 0x100
   1255c:	cmp	r3, #0
   12560:	beq	1257c <__assert_fail@plt+0x16b4>
   12564:	mov	r3, #1
   12568:	str	r3, [sp]
   1256c:	mov	r2, #0
   12570:	mov	r3, #0
   12574:	ldr	r0, [fp, #-8]
   12578:	bl	128c4 <__assert_fail@plt+0x19fc>
   1257c:	nop			; (mov r0, r0)
   12580:	sub	sp, fp, #4
   12584:	pop	{fp, pc}
   12588:	push	{fp, lr}
   1258c:	add	fp, sp, #4
   12590:	sub	sp, sp, #8
   12594:	str	r0, [fp, #-8]
   12598:	ldr	r3, [fp, #-8]
   1259c:	cmp	r3, #0
   125a0:	beq	125b8 <__assert_fail@plt+0x16f0>
   125a4:	ldr	r0, [fp, #-8]
   125a8:	bl	10dc0 <__freading@plt>
   125ac:	mov	r3, r0
   125b0:	cmp	r3, #0
   125b4:	bne	125c8 <__assert_fail@plt+0x1700>
   125b8:	ldr	r0, [fp, #-8]
   125bc:	bl	10cac <fflush@plt>
   125c0:	mov	r3, r0
   125c4:	b	125dc <__assert_fail@plt+0x1714>
   125c8:	ldr	r0, [fp, #-8]
   125cc:	bl	12540 <__assert_fail@plt+0x1678>
   125d0:	ldr	r0, [fp, #-8]
   125d4:	bl	10cac <fflush@plt>
   125d8:	mov	r3, r0
   125dc:	mov	r0, r3
   125e0:	sub	sp, fp, #4
   125e4:	pop	{fp, pc}
   125e8:	push	{r4, fp, lr}
   125ec:	add	fp, sp, #8
   125f0:	sub	sp, sp, #20
   125f4:	str	r0, [fp, #-24]	; 0xffffffe8
   125f8:	bl	10e2c <__errno_location@plt>
   125fc:	mov	r3, r0
   12600:	ldr	r3, [r3]
   12604:	str	r3, [fp, #-20]	; 0xffffffec
   12608:	bl	10e2c <__errno_location@plt>
   1260c:	mov	r3, r0
   12610:	ldr	r3, [r3]
   12614:	str	r3, [fp, #-16]
   12618:	bl	10e2c <__errno_location@plt>
   1261c:	mov	r2, r0
   12620:	mov	r3, #0
   12624:	str	r3, [r2]
   12628:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1262c:	bl	10cb8 <free@plt>
   12630:	bl	10e2c <__errno_location@plt>
   12634:	mov	r4, r0
   12638:	bl	10e2c <__errno_location@plt>
   1263c:	mov	r3, r0
   12640:	ldr	r3, [r3]
   12644:	cmp	r3, #0
   12648:	moveq	r3, #1
   1264c:	movne	r3, #0
   12650:	uxtb	r3, r3
   12654:	lsl	r3, r3, #2
   12658:	sub	r2, fp, #12
   1265c:	add	r3, r2, r3
   12660:	ldr	r3, [r3, #-8]
   12664:	str	r3, [r4]
   12668:	nop			; (mov r0, r0)
   1266c:	sub	sp, fp, #8
   12670:	pop	{r4, fp, pc}
   12674:	push	{fp, lr}
   12678:	add	fp, sp, #4
   1267c:	sub	sp, sp, #16
   12680:	str	r0, [fp, #-16]
   12684:	mov	r1, #0
   12688:	ldr	r0, [pc, #80]	; 126e0 <__assert_fail@plt+0x1818>
   1268c:	bl	10d90 <open64@plt>
   12690:	str	r0, [fp, #-8]
   12694:	ldr	r2, [fp, #-8]
   12698:	ldr	r3, [fp, #-16]
   1269c:	cmp	r2, r3
   126a0:	beq	126d0 <__assert_fail@plt+0x1808>
   126a4:	ldr	r3, [fp, #-8]
   126a8:	cmp	r3, #0
   126ac:	blt	126c8 <__assert_fail@plt+0x1800>
   126b0:	ldr	r0, [fp, #-8]
   126b4:	bl	10ebc <close@plt>
   126b8:	bl	10e2c <__errno_location@plt>
   126bc:	mov	r2, r0
   126c0:	mov	r3, #9
   126c4:	str	r3, [r2]
   126c8:	mov	r3, #0
   126cc:	b	126d4 <__assert_fail@plt+0x180c>
   126d0:	mov	r3, #1
   126d4:	mov	r0, r3
   126d8:	sub	sp, fp, #4
   126dc:	pop	{fp, pc}
   126e0:	andeq	r8, r1, r8, lsl r2
   126e4:	push	{fp, lr}
   126e8:	add	fp, sp, #4
   126ec:	sub	sp, sp, #24
   126f0:	str	r0, [fp, #-16]
   126f4:	str	r1, [fp, #-20]	; 0xffffffec
   126f8:	str	r2, [fp, #-24]	; 0xffffffe8
   126fc:	mov	r3, #0
   12700:	strb	r3, [fp, #-5]
   12704:	mov	r3, #0
   12708:	strb	r3, [fp, #-6]
   1270c:	mov	r3, #0
   12710:	strb	r3, [fp, #-7]
   12714:	ldr	r0, [fp, #-24]	; 0xffffffe8
   12718:	bl	10e50 <fileno@plt>
   1271c:	mov	r3, r0
   12720:	cmp	r3, #1
   12724:	beq	12778 <__assert_fail@plt+0x18b0>
   12728:	cmp	r3, #2
   1272c:	beq	12758 <__assert_fail@plt+0x1890>
   12730:	cmp	r3, #0
   12734:	beq	12798 <__assert_fail@plt+0x18d0>
   12738:	mov	r1, #2
   1273c:	mov	r0, #2
   12740:	bl	10d0c <dup2@plt>
   12744:	mov	r3, r0
   12748:	cmp	r3, #2
   1274c:	beq	12758 <__assert_fail@plt+0x1890>
   12750:	mov	r3, #1
   12754:	strb	r3, [fp, #-7]
   12758:	mov	r1, #1
   1275c:	mov	r0, #1
   12760:	bl	10d0c <dup2@plt>
   12764:	mov	r3, r0
   12768:	cmp	r3, #1
   1276c:	beq	12778 <__assert_fail@plt+0x18b0>
   12770:	mov	r3, #1
   12774:	strb	r3, [fp, #-6]
   12778:	mov	r1, #0
   1277c:	mov	r0, #0
   12780:	bl	10d0c <dup2@plt>
   12784:	mov	r3, r0
   12788:	cmp	r3, #0
   1278c:	beq	12798 <__assert_fail@plt+0x18d0>
   12790:	mov	r3, #1
   12794:	strb	r3, [fp, #-5]
   12798:	nop			; (mov r0, r0)
   1279c:	ldrb	r3, [fp, #-5]
   127a0:	cmp	r3, #0
   127a4:	beq	127d0 <__assert_fail@plt+0x1908>
   127a8:	mov	r0, #0
   127ac:	bl	12674 <__assert_fail@plt+0x17ac>
   127b0:	mov	r3, r0
   127b4:	eor	r3, r3, #1
   127b8:	uxtb	r3, r3
   127bc:	cmp	r3, #0
   127c0:	beq	127d0 <__assert_fail@plt+0x1908>
   127c4:	mov	r3, #0
   127c8:	str	r3, [fp, #-24]	; 0xffffffe8
   127cc:	b	1284c <__assert_fail@plt+0x1984>
   127d0:	ldrb	r3, [fp, #-6]
   127d4:	cmp	r3, #0
   127d8:	beq	12804 <__assert_fail@plt+0x193c>
   127dc:	mov	r0, #1
   127e0:	bl	12674 <__assert_fail@plt+0x17ac>
   127e4:	mov	r3, r0
   127e8:	eor	r3, r3, #1
   127ec:	uxtb	r3, r3
   127f0:	cmp	r3, #0
   127f4:	beq	12804 <__assert_fail@plt+0x193c>
   127f8:	mov	r3, #0
   127fc:	str	r3, [fp, #-24]	; 0xffffffe8
   12800:	b	1284c <__assert_fail@plt+0x1984>
   12804:	ldrb	r3, [fp, #-7]
   12808:	cmp	r3, #0
   1280c:	beq	12838 <__assert_fail@plt+0x1970>
   12810:	mov	r0, #2
   12814:	bl	12674 <__assert_fail@plt+0x17ac>
   12818:	mov	r3, r0
   1281c:	eor	r3, r3, #1
   12820:	uxtb	r3, r3
   12824:	cmp	r3, #0
   12828:	beq	12838 <__assert_fail@plt+0x1970>
   1282c:	mov	r3, #0
   12830:	str	r3, [fp, #-24]	; 0xffffffe8
   12834:	b	1284c <__assert_fail@plt+0x1984>
   12838:	ldr	r2, [fp, #-24]	; 0xffffffe8
   1283c:	ldr	r1, [fp, #-20]	; 0xffffffec
   12840:	ldr	r0, [fp, #-16]
   12844:	bl	10dd8 <freopen64@plt>
   12848:	str	r0, [fp, #-24]	; 0xffffffe8
   1284c:	bl	10e2c <__errno_location@plt>
   12850:	mov	r3, r0
   12854:	ldr	r3, [r3]
   12858:	str	r3, [fp, #-12]
   1285c:	ldrb	r3, [fp, #-7]
   12860:	cmp	r3, #0
   12864:	beq	12870 <__assert_fail@plt+0x19a8>
   12868:	mov	r0, #2
   1286c:	bl	10ebc <close@plt>
   12870:	ldrb	r3, [fp, #-6]
   12874:	cmp	r3, #0
   12878:	beq	12884 <__assert_fail@plt+0x19bc>
   1287c:	mov	r0, #1
   12880:	bl	10ebc <close@plt>
   12884:	ldrb	r3, [fp, #-5]
   12888:	cmp	r3, #0
   1288c:	beq	12898 <__assert_fail@plt+0x19d0>
   12890:	mov	r0, #0
   12894:	bl	10ebc <close@plt>
   12898:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1289c:	cmp	r3, #0
   128a0:	bne	128b4 <__assert_fail@plt+0x19ec>
   128a4:	bl	10e2c <__errno_location@plt>
   128a8:	mov	r2, r0
   128ac:	ldr	r3, [fp, #-12]
   128b0:	str	r3, [r2]
   128b4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   128b8:	mov	r0, r3
   128bc:	sub	sp, fp, #4
   128c0:	pop	{fp, pc}
   128c4:	push	{fp, lr}
   128c8:	add	fp, sp, #4
   128cc:	sub	sp, sp, #32
   128d0:	str	r0, [fp, #-16]
   128d4:	strd	r2, [fp, #-28]	; 0xffffffe4
   128d8:	ldr	r3, [fp, #-16]
   128dc:	ldr	r2, [r3, #8]
   128e0:	ldr	r3, [fp, #-16]
   128e4:	ldr	r3, [r3, #4]
   128e8:	cmp	r2, r3
   128ec:	bne	12984 <__assert_fail@plt+0x1abc>
   128f0:	ldr	r3, [fp, #-16]
   128f4:	ldr	r2, [r3, #20]
   128f8:	ldr	r3, [fp, #-16]
   128fc:	ldr	r3, [r3, #16]
   12900:	cmp	r2, r3
   12904:	bne	12984 <__assert_fail@plt+0x1abc>
   12908:	ldr	r3, [fp, #-16]
   1290c:	ldr	r3, [r3, #36]	; 0x24
   12910:	cmp	r3, #0
   12914:	bne	12984 <__assert_fail@plt+0x1abc>
   12918:	ldr	r0, [fp, #-16]
   1291c:	bl	10e50 <fileno@plt>
   12920:	mov	r1, r0
   12924:	ldr	r3, [fp, #4]
   12928:	str	r3, [sp]
   1292c:	ldrd	r2, [fp, #-28]	; 0xffffffe4
   12930:	mov	r0, r1
   12934:	bl	10d48 <lseek64@plt>
   12938:	strd	r0, [fp, #-12]
   1293c:	ldrd	r2, [fp, #-12]
   12940:	mvn	r0, #0
   12944:	mvn	r1, #0
   12948:	cmp	r3, r1
   1294c:	cmpeq	r2, r0
   12950:	bne	1295c <__assert_fail@plt+0x1a94>
   12954:	mvn	r3, #0
   12958:	b	1299c <__assert_fail@plt+0x1ad4>
   1295c:	ldr	r3, [fp, #-16]
   12960:	ldr	r3, [r3]
   12964:	bic	r2, r3, #16
   12968:	ldr	r3, [fp, #-16]
   1296c:	str	r2, [r3]
   12970:	ldr	r1, [fp, #-16]
   12974:	ldrd	r2, [fp, #-12]
   12978:	strd	r2, [r1, #80]	; 0x50
   1297c:	mov	r3, #0
   12980:	b	1299c <__assert_fail@plt+0x1ad4>
   12984:	ldr	r3, [fp, #4]
   12988:	str	r3, [sp]
   1298c:	ldrd	r2, [fp, #-28]	; 0xffffffe4
   12990:	ldr	r0, [fp, #-16]
   12994:	bl	10e68 <fseeko64@plt>
   12998:	mov	r3, r0
   1299c:	mov	r0, r3
   129a0:	sub	sp, fp, #4
   129a4:	pop	{fp, pc}
   129a8:	push	{fp, lr}
   129ac:	add	fp, sp, #4
   129b0:	sub	sp, sp, #40	; 0x28
   129b4:	str	r0, [fp, #-24]	; 0xffffffe8
   129b8:	str	r1, [fp, #-28]	; 0xffffffe4
   129bc:	str	r2, [fp, #-32]	; 0xffffffe0
   129c0:	str	r3, [fp, #-36]	; 0xffffffdc
   129c4:	ldr	r3, [pc, #196]	; 12a90 <__assert_fail@plt+0x1bc8>
   129c8:	ldr	r3, [r3]
   129cc:	str	r3, [fp, #-8]
   129d0:	ldr	r3, [pc, #184]	; 12a90 <__assert_fail@plt+0x1bc8>
   129d4:	mov	r2, #0
   129d8:	str	r2, [r3]
   129dc:	ldr	r3, [fp, #-24]	; 0xffffffe8
   129e0:	cmp	r3, #2
   129e4:	bne	12a6c <__assert_fail@plt+0x1ba4>
   129e8:	mov	r3, #0
   129ec:	str	r3, [sp]
   129f0:	ldr	r3, [pc, #156]	; 12a94 <__assert_fail@plt+0x1bcc>
   129f4:	ldr	r2, [pc, #156]	; 12a98 <__assert_fail@plt+0x1bd0>
   129f8:	ldr	r1, [fp, #-28]	; 0xffffffe4
   129fc:	ldr	r0, [fp, #-24]	; 0xffffffe8
   12a00:	bl	10de4 <getopt_long@plt>
   12a04:	str	r0, [fp, #-12]
   12a08:	ldr	r3, [fp, #-12]
   12a0c:	cmn	r3, #1
   12a10:	beq	12a6c <__assert_fail@plt+0x1ba4>
   12a14:	ldr	r3, [fp, #-12]
   12a18:	cmp	r3, #104	; 0x68
   12a1c:	beq	12a2c <__assert_fail@plt+0x1b64>
   12a20:	cmp	r3, #118	; 0x76
   12a24:	beq	12a3c <__assert_fail@plt+0x1b74>
   12a28:	b	12a6c <__assert_fail@plt+0x1ba4>
   12a2c:	ldr	r3, [fp, #8]
   12a30:	mov	r0, #0
   12a34:	blx	r3
   12a38:	b	12a6c <__assert_fail@plt+0x1ba4>
   12a3c:	add	r3, fp, #12
   12a40:	str	r3, [fp, #-16]
   12a44:	ldr	r3, [pc, #80]	; 12a9c <__assert_fail@plt+0x1bd4>
   12a48:	ldr	r0, [r3]
   12a4c:	ldr	r3, [fp, #-16]
   12a50:	str	r3, [sp]
   12a54:	ldr	r3, [fp, #4]
   12a58:	ldr	r2, [fp, #-36]	; 0xffffffdc
   12a5c:	ldr	r1, [fp, #-32]	; 0xffffffe0
   12a60:	bl	15df8 <__assert_fail@plt+0x4f30>
   12a64:	mov	r0, #0
   12a68:	bl	10dfc <exit@plt>
   12a6c:	ldr	r2, [pc, #28]	; 12a90 <__assert_fail@plt+0x1bc8>
   12a70:	ldr	r3, [fp, #-8]
   12a74:	str	r3, [r2]
   12a78:	ldr	r3, [pc, #32]	; 12aa0 <__assert_fail@plt+0x1bd8>
   12a7c:	mov	r2, #0
   12a80:	str	r2, [r3]
   12a84:	nop			; (mov r0, r0)
   12a88:	sub	sp, fp, #4
   12a8c:	pop	{fp, pc}
   12a90:	andeq	r9, r2, r0, asr r1
   12a94:	andeq	r8, r1, r4, lsr r2
   12a98:	andeq	r8, r1, r4, ror #4
   12a9c:	andeq	r9, r2, ip, asr #2
   12aa0:	andeq	r9, r2, r8, lsr r1
   12aa4:	push	{fp, lr}
   12aa8:	add	fp, sp, #4
   12aac:	sub	sp, sp, #40	; 0x28
   12ab0:	str	r0, [fp, #-24]	; 0xffffffe8
   12ab4:	str	r1, [fp, #-28]	; 0xffffffe4
   12ab8:	str	r2, [fp, #-32]	; 0xffffffe0
   12abc:	str	r3, [fp, #-36]	; 0xffffffdc
   12ac0:	ldr	r3, [pc, #224]	; 12ba8 <__assert_fail@plt+0x1ce0>
   12ac4:	ldr	r3, [r3]
   12ac8:	str	r3, [fp, #-8]
   12acc:	ldr	r3, [pc, #212]	; 12ba8 <__assert_fail@plt+0x1ce0>
   12ad0:	mov	r2, #1
   12ad4:	str	r2, [r3]
   12ad8:	ldrb	r3, [fp, #8]
   12adc:	cmp	r3, #0
   12ae0:	beq	12aec <__assert_fail@plt+0x1c24>
   12ae4:	ldr	r3, [pc, #192]	; 12bac <__assert_fail@plt+0x1ce4>
   12ae8:	b	12af0 <__assert_fail@plt+0x1c28>
   12aec:	ldr	r3, [pc, #188]	; 12bb0 <__assert_fail@plt+0x1ce8>
   12af0:	str	r3, [fp, #-12]
   12af4:	mov	r3, #0
   12af8:	str	r3, [sp]
   12afc:	ldr	r3, [pc, #176]	; 12bb4 <__assert_fail@plt+0x1cec>
   12b00:	ldr	r2, [fp, #-12]
   12b04:	ldr	r1, [fp, #-28]	; 0xffffffe4
   12b08:	ldr	r0, [fp, #-24]	; 0xffffffe8
   12b0c:	bl	10de4 <getopt_long@plt>
   12b10:	str	r0, [fp, #-16]
   12b14:	ldr	r3, [fp, #-16]
   12b18:	cmn	r3, #1
   12b1c:	beq	12b90 <__assert_fail@plt+0x1cc8>
   12b20:	ldr	r3, [fp, #-16]
   12b24:	cmp	r3, #104	; 0x68
   12b28:	beq	12b38 <__assert_fail@plt+0x1c70>
   12b2c:	cmp	r3, #118	; 0x76
   12b30:	beq	12b48 <__assert_fail@plt+0x1c80>
   12b34:	b	12b78 <__assert_fail@plt+0x1cb0>
   12b38:	ldr	r3, [fp, #12]
   12b3c:	mov	r0, #0
   12b40:	blx	r3
   12b44:	b	12b90 <__assert_fail@plt+0x1cc8>
   12b48:	add	r3, fp, #16
   12b4c:	str	r3, [fp, #-20]	; 0xffffffec
   12b50:	ldr	r3, [pc, #96]	; 12bb8 <__assert_fail@plt+0x1cf0>
   12b54:	ldr	r0, [r3]
   12b58:	ldr	r3, [fp, #-20]	; 0xffffffec
   12b5c:	str	r3, [sp]
   12b60:	ldr	r3, [fp, #4]
   12b64:	ldr	r2, [fp, #-36]	; 0xffffffdc
   12b68:	ldr	r1, [fp, #-32]	; 0xffffffe0
   12b6c:	bl	15df8 <__assert_fail@plt+0x4f30>
   12b70:	mov	r0, #0
   12b74:	bl	10dfc <exit@plt>
   12b78:	ldr	r3, [pc, #60]	; 12bbc <__assert_fail@plt+0x1cf4>
   12b7c:	ldr	r2, [r3]
   12b80:	ldr	r3, [fp, #12]
   12b84:	mov	r0, r2
   12b88:	blx	r3
   12b8c:	nop			; (mov r0, r0)
   12b90:	ldr	r2, [pc, #16]	; 12ba8 <__assert_fail@plt+0x1ce0>
   12b94:	ldr	r3, [fp, #-8]
   12b98:	str	r3, [r2]
   12b9c:	nop			; (mov r0, r0)
   12ba0:	sub	sp, fp, #4
   12ba4:	pop	{fp, pc}
   12ba8:	andeq	r9, r2, r0, asr r1
   12bac:	andeq	r8, r1, r8, ror #4
   12bb0:	andeq	r8, r1, r4, ror #4
   12bb4:	andeq	r8, r1, r4, lsr r2
   12bb8:	andeq	r9, r2, ip, asr #2
   12bbc:	andeq	r9, r2, ip, ror #1
   12bc0:	push	{fp, lr}
   12bc4:	add	fp, sp, #4
   12bc8:	sub	sp, sp, #16
   12bcc:	str	r0, [fp, #-16]
   12bd0:	ldr	r3, [fp, #-16]
   12bd4:	cmp	r3, #0
   12bd8:	bne	12bf8 <__assert_fail@plt+0x1d30>
   12bdc:	ldr	r3, [pc, #220]	; 12cc0 <__assert_fail@plt+0x1df8>
   12be0:	ldr	r3, [r3]
   12be4:	mov	r2, #55	; 0x37
   12be8:	mov	r1, #1
   12bec:	ldr	r0, [pc, #208]	; 12cc4 <__assert_fail@plt+0x1dfc>
   12bf0:	bl	10d3c <fwrite@plt>
   12bf4:	bl	10eb0 <abort@plt>
   12bf8:	mov	r1, #47	; 0x2f
   12bfc:	ldr	r0, [fp, #-16]
   12c00:	bl	10e80 <strrchr@plt>
   12c04:	str	r0, [fp, #-8]
   12c08:	ldr	r3, [fp, #-8]
   12c0c:	cmp	r3, #0
   12c10:	beq	12c20 <__assert_fail@plt+0x1d58>
   12c14:	ldr	r3, [fp, #-8]
   12c18:	add	r3, r3, #1
   12c1c:	b	12c24 <__assert_fail@plt+0x1d5c>
   12c20:	ldr	r3, [fp, #-16]
   12c24:	str	r3, [fp, #-12]
   12c28:	ldr	r2, [fp, #-12]
   12c2c:	ldr	r3, [fp, #-16]
   12c30:	sub	r3, r2, r3
   12c34:	cmp	r3, #6
   12c38:	ble	12c9c <__assert_fail@plt+0x1dd4>
   12c3c:	ldr	r3, [fp, #-12]
   12c40:	sub	r3, r3, #7
   12c44:	mov	r2, #7
   12c48:	ldr	r1, [pc, #120]	; 12cc8 <__assert_fail@plt+0x1e00>
   12c4c:	mov	r0, r3
   12c50:	bl	10ea4 <strncmp@plt>
   12c54:	mov	r3, r0
   12c58:	cmp	r3, #0
   12c5c:	bne	12c9c <__assert_fail@plt+0x1dd4>
   12c60:	ldr	r3, [fp, #-12]
   12c64:	str	r3, [fp, #-16]
   12c68:	mov	r2, #3
   12c6c:	ldr	r1, [pc, #88]	; 12ccc <__assert_fail@plt+0x1e04>
   12c70:	ldr	r0, [fp, #-12]
   12c74:	bl	10ea4 <strncmp@plt>
   12c78:	mov	r3, r0
   12c7c:	cmp	r3, #0
   12c80:	bne	12c9c <__assert_fail@plt+0x1dd4>
   12c84:	ldr	r3, [fp, #-12]
   12c88:	add	r3, r3, #3
   12c8c:	str	r3, [fp, #-16]
   12c90:	ldr	r2, [pc, #56]	; 12cd0 <__assert_fail@plt+0x1e08>
   12c94:	ldr	r3, [fp, #-16]
   12c98:	str	r3, [r2]
   12c9c:	ldr	r2, [pc, #48]	; 12cd4 <__assert_fail@plt+0x1e0c>
   12ca0:	ldr	r3, [fp, #-16]
   12ca4:	str	r3, [r2]
   12ca8:	ldr	r2, [pc, #40]	; 12cd8 <__assert_fail@plt+0x1e10>
   12cac:	ldr	r3, [fp, #-16]
   12cb0:	str	r3, [r2]
   12cb4:	nop			; (mov r0, r0)
   12cb8:	sub	sp, fp, #4
   12cbc:	pop	{fp, pc}
   12cc0:	andeq	r9, r2, r0, asr #2
   12cc4:	andeq	r8, r1, ip, ror #4
   12cc8:	andeq	r8, r1, r4, lsr #5
   12ccc:	andeq	r8, r1, ip, lsr #5
   12cd0:	andeq	r9, r2, r0, lsr r1
   12cd4:	andeq	r9, r2, r0, ror r1
   12cd8:	andeq	r9, r2, r4, lsr r1
   12cdc:	push	{fp, lr}
   12ce0:	add	fp, sp, #4
   12ce4:	sub	sp, sp, #16
   12ce8:	str	r0, [fp, #-16]
   12cec:	bl	10e2c <__errno_location@plt>
   12cf0:	mov	r3, r0
   12cf4:	ldr	r3, [r3]
   12cf8:	str	r3, [fp, #-8]
   12cfc:	ldr	r3, [fp, #-16]
   12d00:	cmp	r3, #0
   12d04:	beq	12d10 <__assert_fail@plt+0x1e48>
   12d08:	ldr	r3, [fp, #-16]
   12d0c:	b	12d14 <__assert_fail@plt+0x1e4c>
   12d10:	ldr	r3, [pc, #48]	; 12d48 <__assert_fail@plt+0x1e80>
   12d14:	mov	r1, #48	; 0x30
   12d18:	mov	r0, r3
   12d1c:	bl	169ec <__assert_fail@plt+0x5b24>
   12d20:	mov	r3, r0
   12d24:	str	r3, [fp, #-12]
   12d28:	bl	10e2c <__errno_location@plt>
   12d2c:	mov	r2, r0
   12d30:	ldr	r3, [fp, #-8]
   12d34:	str	r3, [r2]
   12d38:	ldr	r3, [fp, #-12]
   12d3c:	mov	r0, r3
   12d40:	sub	sp, fp, #4
   12d44:	pop	{fp, pc}
   12d48:	andeq	r9, r2, r4, ror r1
   12d4c:	push	{fp}		; (str fp, [sp, #-4]!)
   12d50:	add	fp, sp, #0
   12d54:	sub	sp, sp, #12
   12d58:	str	r0, [fp, #-8]
   12d5c:	ldr	r3, [fp, #-8]
   12d60:	cmp	r3, #0
   12d64:	beq	12d70 <__assert_fail@plt+0x1ea8>
   12d68:	ldr	r3, [fp, #-8]
   12d6c:	b	12d74 <__assert_fail@plt+0x1eac>
   12d70:	ldr	r3, [pc, #16]	; 12d88 <__assert_fail@plt+0x1ec0>
   12d74:	ldr	r3, [r3]
   12d78:	mov	r0, r3
   12d7c:	add	sp, fp, #0
   12d80:	pop	{fp}		; (ldr fp, [sp], #4)
   12d84:	bx	lr
   12d88:	andeq	r9, r2, r4, ror r1
   12d8c:	push	{fp}		; (str fp, [sp, #-4]!)
   12d90:	add	fp, sp, #0
   12d94:	sub	sp, sp, #12
   12d98:	str	r0, [fp, #-8]
   12d9c:	str	r1, [fp, #-12]
   12da0:	ldr	r3, [fp, #-8]
   12da4:	cmp	r3, #0
   12da8:	beq	12db4 <__assert_fail@plt+0x1eec>
   12dac:	ldr	r3, [fp, #-8]
   12db0:	b	12db8 <__assert_fail@plt+0x1ef0>
   12db4:	ldr	r3, [pc, #20]	; 12dd0 <__assert_fail@plt+0x1f08>
   12db8:	ldr	r2, [fp, #-12]
   12dbc:	str	r2, [r3]
   12dc0:	nop			; (mov r0, r0)
   12dc4:	add	sp, fp, #0
   12dc8:	pop	{fp}		; (ldr fp, [sp], #4)
   12dcc:	bx	lr
   12dd0:	andeq	r9, r2, r4, ror r1
   12dd4:	push	{fp}		; (str fp, [sp, #-4]!)
   12dd8:	add	fp, sp, #0
   12ddc:	sub	sp, sp, #36	; 0x24
   12de0:	str	r0, [fp, #-24]	; 0xffffffe8
   12de4:	mov	r3, r1
   12de8:	str	r2, [fp, #-32]	; 0xffffffe0
   12dec:	strb	r3, [fp, #-25]	; 0xffffffe7
   12df0:	ldrb	r3, [fp, #-25]	; 0xffffffe7
   12df4:	strb	r3, [fp, #-5]
   12df8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   12dfc:	cmp	r3, #0
   12e00:	beq	12e0c <__assert_fail@plt+0x1f44>
   12e04:	ldr	r3, [fp, #-24]	; 0xffffffe8
   12e08:	b	12e10 <__assert_fail@plt+0x1f48>
   12e0c:	ldr	r3, [pc, #124]	; 12e90 <__assert_fail@plt+0x1fc8>
   12e10:	add	r2, r3, #8
   12e14:	ldrb	r3, [fp, #-5]
   12e18:	lsr	r3, r3, #5
   12e1c:	uxtb	r3, r3
   12e20:	lsl	r3, r3, #2
   12e24:	add	r3, r2, r3
   12e28:	str	r3, [fp, #-12]
   12e2c:	ldrb	r3, [fp, #-5]
   12e30:	and	r3, r3, #31
   12e34:	str	r3, [fp, #-16]
   12e38:	ldr	r3, [fp, #-12]
   12e3c:	ldr	r2, [r3]
   12e40:	ldr	r3, [fp, #-16]
   12e44:	lsr	r3, r2, r3
   12e48:	and	r3, r3, #1
   12e4c:	str	r3, [fp, #-20]	; 0xffffffec
   12e50:	ldr	r3, [fp, #-12]
   12e54:	ldr	r3, [r3]
   12e58:	ldr	r2, [fp, #-32]	; 0xffffffe0
   12e5c:	and	r1, r2, #1
   12e60:	ldr	r2, [fp, #-20]	; 0xffffffec
   12e64:	eor	r1, r1, r2
   12e68:	ldr	r2, [fp, #-16]
   12e6c:	lsl	r2, r1, r2
   12e70:	eor	r2, r2, r3
   12e74:	ldr	r3, [fp, #-12]
   12e78:	str	r2, [r3]
   12e7c:	ldr	r3, [fp, #-20]	; 0xffffffec
   12e80:	mov	r0, r3
   12e84:	add	sp, fp, #0
   12e88:	pop	{fp}		; (ldr fp, [sp], #4)
   12e8c:	bx	lr
   12e90:	andeq	r9, r2, r4, ror r1
   12e94:	push	{fp}		; (str fp, [sp, #-4]!)
   12e98:	add	fp, sp, #0
   12e9c:	sub	sp, sp, #20
   12ea0:	str	r0, [fp, #-16]
   12ea4:	str	r1, [fp, #-20]	; 0xffffffec
   12ea8:	ldr	r3, [fp, #-16]
   12eac:	cmp	r3, #0
   12eb0:	bne	12ebc <__assert_fail@plt+0x1ff4>
   12eb4:	ldr	r3, [pc, #44]	; 12ee8 <__assert_fail@plt+0x2020>
   12eb8:	str	r3, [fp, #-16]
   12ebc:	ldr	r3, [fp, #-16]
   12ec0:	ldr	r3, [r3, #4]
   12ec4:	str	r3, [fp, #-8]
   12ec8:	ldr	r3, [fp, #-16]
   12ecc:	ldr	r2, [fp, #-20]	; 0xffffffec
   12ed0:	str	r2, [r3, #4]
   12ed4:	ldr	r3, [fp, #-8]
   12ed8:	mov	r0, r3
   12edc:	add	sp, fp, #0
   12ee0:	pop	{fp}		; (ldr fp, [sp], #4)
   12ee4:	bx	lr
   12ee8:	andeq	r9, r2, r4, ror r1
   12eec:	push	{fp, lr}
   12ef0:	add	fp, sp, #4
   12ef4:	sub	sp, sp, #16
   12ef8:	str	r0, [fp, #-8]
   12efc:	str	r1, [fp, #-12]
   12f00:	str	r2, [fp, #-16]
   12f04:	ldr	r3, [fp, #-8]
   12f08:	cmp	r3, #0
   12f0c:	bne	12f18 <__assert_fail@plt+0x2050>
   12f10:	ldr	r3, [pc, #76]	; 12f64 <__assert_fail@plt+0x209c>
   12f14:	str	r3, [fp, #-8]
   12f18:	ldr	r3, [fp, #-8]
   12f1c:	mov	r2, #10
   12f20:	str	r2, [r3]
   12f24:	ldr	r3, [fp, #-12]
   12f28:	cmp	r3, #0
   12f2c:	beq	12f3c <__assert_fail@plt+0x2074>
   12f30:	ldr	r3, [fp, #-16]
   12f34:	cmp	r3, #0
   12f38:	bne	12f40 <__assert_fail@plt+0x2078>
   12f3c:	bl	10eb0 <abort@plt>
   12f40:	ldr	r3, [fp, #-8]
   12f44:	ldr	r2, [fp, #-12]
   12f48:	str	r2, [r3, #40]	; 0x28
   12f4c:	ldr	r3, [fp, #-8]
   12f50:	ldr	r2, [fp, #-16]
   12f54:	str	r2, [r3, #44]	; 0x2c
   12f58:	nop			; (mov r0, r0)
   12f5c:	sub	sp, fp, #4
   12f60:	pop	{fp, pc}
   12f64:	andeq	r9, r2, r4, ror r1
   12f68:	push	{fp, lr}
   12f6c:	add	fp, sp, #4
   12f70:	sub	sp, sp, #56	; 0x38
   12f74:	str	r0, [fp, #-56]	; 0xffffffc8
   12f78:	str	r1, [fp, #-60]	; 0xffffffc4
   12f7c:	sub	r3, fp, #52	; 0x34
   12f80:	mov	r2, #48	; 0x30
   12f84:	mov	r1, #0
   12f88:	mov	r0, r3
   12f8c:	bl	10e44 <memset@plt>
   12f90:	ldr	r3, [fp, #-60]	; 0xffffffc4
   12f94:	cmp	r3, #10
   12f98:	bne	12fa0 <__assert_fail@plt+0x20d8>
   12f9c:	bl	10eb0 <abort@plt>
   12fa0:	ldr	r3, [fp, #-60]	; 0xffffffc4
   12fa4:	str	r3, [fp, #-52]	; 0xffffffcc
   12fa8:	ldr	r3, [fp, #-56]	; 0xffffffc8
   12fac:	mov	lr, r3
   12fb0:	sub	ip, fp, #52	; 0x34
   12fb4:	ldm	ip!, {r0, r1, r2, r3}
   12fb8:	stmia	lr!, {r0, r1, r2, r3}
   12fbc:	ldm	ip!, {r0, r1, r2, r3}
   12fc0:	stmia	lr!, {r0, r1, r2, r3}
   12fc4:	ldm	ip, {r0, r1, r2, r3}
   12fc8:	stm	lr, {r0, r1, r2, r3}
   12fcc:	ldr	r0, [fp, #-56]	; 0xffffffc8
   12fd0:	sub	sp, fp, #4
   12fd4:	pop	{fp, pc}
   12fd8:	push	{fp, lr}
   12fdc:	add	fp, sp, #4
   12fe0:	sub	sp, sp, #16
   12fe4:	str	r0, [fp, #-16]
   12fe8:	str	r1, [fp, #-20]	; 0xffffffec
   12fec:	ldr	r0, [fp, #-16]
   12ff0:	bl	10e08 <gettext@plt>
   12ff4:	str	r0, [fp, #-8]
   12ff8:	ldr	r2, [fp, #-8]
   12ffc:	ldr	r3, [fp, #-16]
   13000:	cmp	r2, r3
   13004:	beq	13010 <__assert_fail@plt+0x2148>
   13008:	ldr	r3, [fp, #-8]
   1300c:	b	130a0 <__assert_fail@plt+0x21d8>
   13010:	bl	17034 <__assert_fail@plt+0x616c>
   13014:	str	r0, [fp, #-12]
   13018:	ldr	r1, [pc, #140]	; 130ac <__assert_fail@plt+0x21e4>
   1301c:	ldr	r0, [fp, #-12]
   13020:	bl	16d88 <__assert_fail@plt+0x5ec0>
   13024:	mov	r3, r0
   13028:	cmp	r3, #0
   1302c:	bne	13050 <__assert_fail@plt+0x2188>
   13030:	ldr	r3, [fp, #-16]
   13034:	ldrb	r3, [r3]
   13038:	cmp	r3, #96	; 0x60
   1303c:	bne	13048 <__assert_fail@plt+0x2180>
   13040:	ldr	r3, [pc, #104]	; 130b0 <__assert_fail@plt+0x21e8>
   13044:	b	130a0 <__assert_fail@plt+0x21d8>
   13048:	ldr	r3, [pc, #100]	; 130b4 <__assert_fail@plt+0x21ec>
   1304c:	b	130a0 <__assert_fail@plt+0x21d8>
   13050:	ldr	r1, [pc, #96]	; 130b8 <__assert_fail@plt+0x21f0>
   13054:	ldr	r0, [fp, #-12]
   13058:	bl	16d88 <__assert_fail@plt+0x5ec0>
   1305c:	mov	r3, r0
   13060:	cmp	r3, #0
   13064:	bne	13088 <__assert_fail@plt+0x21c0>
   13068:	ldr	r3, [fp, #-16]
   1306c:	ldrb	r3, [r3]
   13070:	cmp	r3, #96	; 0x60
   13074:	bne	13080 <__assert_fail@plt+0x21b8>
   13078:	ldr	r3, [pc, #60]	; 130bc <__assert_fail@plt+0x21f4>
   1307c:	b	130a0 <__assert_fail@plt+0x21d8>
   13080:	ldr	r3, [pc, #56]	; 130c0 <__assert_fail@plt+0x21f8>
   13084:	b	130a0 <__assert_fail@plt+0x21d8>
   13088:	ldr	r3, [fp, #-20]	; 0xffffffec
   1308c:	cmp	r3, #9
   13090:	bne	1309c <__assert_fail@plt+0x21d4>
   13094:	ldr	r3, [pc, #40]	; 130c4 <__assert_fail@plt+0x21fc>
   13098:	b	130a0 <__assert_fail@plt+0x21d8>
   1309c:	ldr	r3, [pc, #36]	; 130c8 <__assert_fail@plt+0x2200>
   130a0:	mov	r0, r3
   130a4:	sub	sp, fp, #4
   130a8:	pop	{fp, pc}
   130ac:	andeq	r8, r1, ip, ror #6
   130b0:	andeq	r8, r1, r4, ror r3
   130b4:	andeq	r8, r1, r8, ror r3
   130b8:	andeq	r8, r1, ip, ror r3
   130bc:	andeq	r8, r1, r4, lsl #7
   130c0:	andeq	r8, r1, r8, lsl #7
   130c4:	andeq	r8, r1, ip, lsl #7
   130c8:	muleq	r1, r0, r3
   130cc:	push	{r4, fp, lr}
   130d0:	add	fp, sp, #8
   130d4:	sub	sp, sp, #116	; 0x74
   130d8:	str	r0, [fp, #-88]	; 0xffffffa8
   130dc:	str	r1, [fp, #-92]	; 0xffffffa4
   130e0:	str	r2, [fp, #-96]	; 0xffffffa0
   130e4:	str	r3, [fp, #-100]	; 0xffffff9c
   130e8:	mov	r3, #0
   130ec:	str	r3, [fp, #-20]	; 0xffffffec
   130f0:	mov	r3, #0
   130f4:	str	r3, [fp, #-24]	; 0xffffffe8
   130f8:	mov	r3, #0
   130fc:	str	r3, [fp, #-28]	; 0xffffffe4
   13100:	mov	r3, #0
   13104:	str	r3, [fp, #-32]	; 0xffffffe0
   13108:	mov	r3, #0
   1310c:	strb	r3, [fp, #-33]	; 0xffffffdf
   13110:	bl	10d54 <__ctype_get_mb_cur_max@plt>
   13114:	mov	r3, r0
   13118:	cmp	r3, #1
   1311c:	moveq	r3, #1
   13120:	movne	r3, #0
   13124:	strb	r3, [fp, #-57]	; 0xffffffc7
   13128:	ldr	r3, [fp, #8]
   1312c:	and	r3, r3, #2
   13130:	cmp	r3, #0
   13134:	movne	r3, #1
   13138:	moveq	r3, #0
   1313c:	strb	r3, [fp, #-34]	; 0xffffffde
   13140:	mov	r3, #0
   13144:	strb	r3, [fp, #-35]	; 0xffffffdd
   13148:	mov	r3, #0
   1314c:	strb	r3, [fp, #-36]	; 0xffffffdc
   13150:	mov	r3, #1
   13154:	strb	r3, [fp, #-37]	; 0xffffffdb
   13158:	ldr	r3, [fp, #4]
   1315c:	cmp	r3, #10
   13160:	ldrls	pc, [pc, r3, lsl #2]
   13164:	b	1336c <__assert_fail@plt+0x24a4>
   13168:	andeq	r3, r1, r0, ror #6
   1316c:	ldrdeq	r3, [r1], -ip
   13170:	andeq	r3, r1, r0, lsl #6
   13174:	ldrdeq	r3, [r1], -r4
   13178:	andeq	r3, r1, r4, ror #5
   1317c:	andeq	r3, r1, r4, lsr #3
   13180:	muleq	r1, r4, r1
   13184:	andeq	r3, r1, r4, lsl #4
   13188:	andeq	r3, r1, r8, lsl r2
   1318c:	andeq	r3, r1, r8, lsl r2
   13190:	andeq	r3, r1, r8, lsl r2
   13194:	mov	r3, #5
   13198:	str	r3, [fp, #4]
   1319c:	mov	r3, #1
   131a0:	strb	r3, [fp, #-34]	; 0xffffffde
   131a4:	ldrb	r3, [fp, #-34]	; 0xffffffde
   131a8:	eor	r3, r3, #1
   131ac:	uxtb	r3, r3
   131b0:	cmp	r3, #0
   131b4:	beq	131e8 <__assert_fail@plt+0x2320>
   131b8:	ldr	r2, [fp, #-20]	; 0xffffffec
   131bc:	ldr	r3, [fp, #-92]	; 0xffffffa4
   131c0:	cmp	r2, r3
   131c4:	bcs	131dc <__assert_fail@plt+0x2314>
   131c8:	ldr	r2, [fp, #-88]	; 0xffffffa8
   131cc:	ldr	r3, [fp, #-20]	; 0xffffffec
   131d0:	add	r3, r2, r3
   131d4:	mov	r2, #34	; 0x22
   131d8:	strb	r2, [r3]
   131dc:	ldr	r3, [fp, #-20]	; 0xffffffec
   131e0:	add	r3, r3, #1
   131e4:	str	r3, [fp, #-20]	; 0xffffffec
   131e8:	mov	r3, #1
   131ec:	strb	r3, [fp, #-33]	; 0xffffffdf
   131f0:	ldr	r3, [pc, #3872]	; 14118 <__assert_fail@plt+0x3250>
   131f4:	str	r3, [fp, #-28]	; 0xffffffe4
   131f8:	mov	r3, #1
   131fc:	str	r3, [fp, #-32]	; 0xffffffe0
   13200:	b	13370 <__assert_fail@plt+0x24a8>
   13204:	mov	r3, #1
   13208:	strb	r3, [fp, #-33]	; 0xffffffdf
   1320c:	mov	r3, #0
   13210:	strb	r3, [fp, #-34]	; 0xffffffde
   13214:	b	13370 <__assert_fail@plt+0x24a8>
   13218:	ldr	r3, [fp, #4]
   1321c:	cmp	r3, #10
   13220:	beq	13244 <__assert_fail@plt+0x237c>
   13224:	ldr	r1, [fp, #4]
   13228:	ldr	r0, [pc, #3820]	; 1411c <__assert_fail@plt+0x3254>
   1322c:	bl	12fd8 <__assert_fail@plt+0x2110>
   13230:	str	r0, [fp, #16]
   13234:	ldr	r1, [fp, #4]
   13238:	ldr	r0, [pc, #3808]	; 14120 <__assert_fail@plt+0x3258>
   1323c:	bl	12fd8 <__assert_fail@plt+0x2110>
   13240:	str	r0, [fp, #20]
   13244:	ldrb	r3, [fp, #-34]	; 0xffffffde
   13248:	eor	r3, r3, #1
   1324c:	uxtb	r3, r3
   13250:	cmp	r3, #0
   13254:	beq	132b4 <__assert_fail@plt+0x23ec>
   13258:	ldr	r3, [fp, #16]
   1325c:	str	r3, [fp, #-28]	; 0xffffffe4
   13260:	b	132a4 <__assert_fail@plt+0x23dc>
   13264:	ldr	r2, [fp, #-20]	; 0xffffffec
   13268:	ldr	r3, [fp, #-92]	; 0xffffffa4
   1326c:	cmp	r2, r3
   13270:	bcs	1328c <__assert_fail@plt+0x23c4>
   13274:	ldr	r2, [fp, #-88]	; 0xffffffa8
   13278:	ldr	r3, [fp, #-20]	; 0xffffffec
   1327c:	add	r3, r2, r3
   13280:	ldr	r2, [fp, #-28]	; 0xffffffe4
   13284:	ldrb	r2, [r2]
   13288:	strb	r2, [r3]
   1328c:	ldr	r3, [fp, #-20]	; 0xffffffec
   13290:	add	r3, r3, #1
   13294:	str	r3, [fp, #-20]	; 0xffffffec
   13298:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1329c:	add	r3, r3, #1
   132a0:	str	r3, [fp, #-28]	; 0xffffffe4
   132a4:	ldr	r3, [fp, #-28]	; 0xffffffe4
   132a8:	ldrb	r3, [r3]
   132ac:	cmp	r3, #0
   132b0:	bne	13264 <__assert_fail@plt+0x239c>
   132b4:	mov	r3, #1
   132b8:	strb	r3, [fp, #-33]	; 0xffffffdf
   132bc:	ldr	r3, [fp, #20]
   132c0:	str	r3, [fp, #-28]	; 0xffffffe4
   132c4:	ldr	r0, [fp, #-28]	; 0xffffffe4
   132c8:	bl	10e14 <strlen@plt>
   132cc:	str	r0, [fp, #-32]	; 0xffffffe0
   132d0:	b	13370 <__assert_fail@plt+0x24a8>
   132d4:	mov	r3, #1
   132d8:	strb	r3, [fp, #-33]	; 0xffffffdf
   132dc:	mov	r3, #1
   132e0:	strb	r3, [fp, #-34]	; 0xffffffde
   132e4:	ldrb	r3, [fp, #-34]	; 0xffffffde
   132e8:	eor	r3, r3, #1
   132ec:	uxtb	r3, r3
   132f0:	cmp	r3, #0
   132f4:	beq	13300 <__assert_fail@plt+0x2438>
   132f8:	mov	r3, #1
   132fc:	strb	r3, [fp, #-33]	; 0xffffffdf
   13300:	mov	r3, #2
   13304:	str	r3, [fp, #4]
   13308:	ldrb	r3, [fp, #-34]	; 0xffffffde
   1330c:	eor	r3, r3, #1
   13310:	uxtb	r3, r3
   13314:	cmp	r3, #0
   13318:	beq	1334c <__assert_fail@plt+0x2484>
   1331c:	ldr	r2, [fp, #-20]	; 0xffffffec
   13320:	ldr	r3, [fp, #-92]	; 0xffffffa4
   13324:	cmp	r2, r3
   13328:	bcs	13340 <__assert_fail@plt+0x2478>
   1332c:	ldr	r2, [fp, #-88]	; 0xffffffa8
   13330:	ldr	r3, [fp, #-20]	; 0xffffffec
   13334:	add	r3, r2, r3
   13338:	mov	r2, #39	; 0x27
   1333c:	strb	r2, [r3]
   13340:	ldr	r3, [fp, #-20]	; 0xffffffec
   13344:	add	r3, r3, #1
   13348:	str	r3, [fp, #-20]	; 0xffffffec
   1334c:	ldr	r3, [pc, #3532]	; 14120 <__assert_fail@plt+0x3258>
   13350:	str	r3, [fp, #-28]	; 0xffffffe4
   13354:	mov	r3, #1
   13358:	str	r3, [fp, #-32]	; 0xffffffe0
   1335c:	b	13370 <__assert_fail@plt+0x24a8>
   13360:	mov	r3, #0
   13364:	strb	r3, [fp, #-34]	; 0xffffffde
   13368:	b	13370 <__assert_fail@plt+0x24a8>
   1336c:	bl	10eb0 <abort@plt>
   13370:	mov	r3, #0
   13374:	str	r3, [fp, #-16]
   13378:	b	14508 <__assert_fail@plt+0x3640>
   1337c:	mov	r3, #0
   13380:	strb	r3, [fp, #-40]	; 0xffffffd8
   13384:	mov	r3, #0
   13388:	strb	r3, [fp, #-41]	; 0xffffffd7
   1338c:	mov	r3, #0
   13390:	strb	r3, [fp, #-42]	; 0xffffffd6
   13394:	ldrb	r3, [fp, #-33]	; 0xffffffdf
   13398:	cmp	r3, #0
   1339c:	beq	13438 <__assert_fail@plt+0x2570>
   133a0:	ldr	r3, [fp, #4]
   133a4:	cmp	r3, #2
   133a8:	beq	13438 <__assert_fail@plt+0x2570>
   133ac:	ldr	r3, [fp, #-32]	; 0xffffffe0
   133b0:	cmp	r3, #0
   133b4:	beq	13438 <__assert_fail@plt+0x2570>
   133b8:	ldr	r2, [fp, #-16]
   133bc:	ldr	r3, [fp, #-32]	; 0xffffffe0
   133c0:	add	r4, r2, r3
   133c4:	ldr	r3, [fp, #-100]	; 0xffffff9c
   133c8:	cmn	r3, #1
   133cc:	bne	133f0 <__assert_fail@plt+0x2528>
   133d0:	ldr	r3, [fp, #-32]	; 0xffffffe0
   133d4:	cmp	r3, #1
   133d8:	bls	133f0 <__assert_fail@plt+0x2528>
   133dc:	ldr	r0, [fp, #-96]	; 0xffffffa0
   133e0:	bl	10e14 <strlen@plt>
   133e4:	str	r0, [fp, #-100]	; 0xffffff9c
   133e8:	ldr	r3, [fp, #-100]	; 0xffffff9c
   133ec:	b	133f4 <__assert_fail@plt+0x252c>
   133f0:	ldr	r3, [fp, #-100]	; 0xffffff9c
   133f4:	cmp	r4, r3
   133f8:	bhi	13438 <__assert_fail@plt+0x2570>
   133fc:	ldr	r2, [fp, #-96]	; 0xffffffa0
   13400:	ldr	r3, [fp, #-16]
   13404:	add	r3, r2, r3
   13408:	ldr	r2, [fp, #-32]	; 0xffffffe0
   1340c:	ldr	r1, [fp, #-28]	; 0xffffffe4
   13410:	mov	r0, r3
   13414:	bl	10ce8 <memcmp@plt>
   13418:	mov	r3, r0
   1341c:	cmp	r3, #0
   13420:	bne	13438 <__assert_fail@plt+0x2570>
   13424:	ldrb	r3, [fp, #-34]	; 0xffffffde
   13428:	cmp	r3, #0
   1342c:	bne	146c4 <__assert_fail@plt+0x37fc>
   13430:	mov	r3, #1
   13434:	strb	r3, [fp, #-40]	; 0xffffffd8
   13438:	ldr	r2, [fp, #-96]	; 0xffffffa0
   1343c:	ldr	r3, [fp, #-16]
   13440:	add	r3, r2, r3
   13444:	ldrb	r3, [r3]
   13448:	strb	r3, [fp, #-38]	; 0xffffffda
   1344c:	ldrb	r3, [fp, #-38]	; 0xffffffda
   13450:	cmp	r3, #126	; 0x7e
   13454:	ldrls	pc, [pc, r3, lsl #2]
   13458:	b	13c84 <__assert_fail@plt+0x2dbc>
   1345c:	andeq	r3, r1, r8, asr r6
   13460:	andeq	r3, r1, r4, lsl #25
   13464:	andeq	r3, r1, r4, lsl #25
   13468:	andeq	r3, r1, r4, lsl #25
   1346c:	andeq	r3, r1, r4, lsl #25
   13470:	andeq	r3, r1, r4, lsl #25
   13474:	andeq	r3, r1, r4, lsl #25
   13478:	andeq	r3, r1, r8, asr #20
   1347c:	andeq	r3, r1, r4, asr sl
   13480:	andeq	r3, r1, r4, lsl #21
   13484:	andeq	r3, r1, ip, ror #20
   13488:	muleq	r1, r0, sl
   1348c:	andeq	r3, r1, r0, ror #20
   13490:	andeq	r3, r1, r8, ror sl
   13494:	andeq	r3, r1, r4, lsl #25
   13498:	andeq	r3, r1, r4, lsl #25
   1349c:	andeq	r3, r1, r4, lsl #25
   134a0:	andeq	r3, r1, r4, lsl #25
   134a4:	andeq	r3, r1, r4, lsl #25
   134a8:	andeq	r3, r1, r4, lsl #25
   134ac:	andeq	r3, r1, r4, lsl #25
   134b0:	andeq	r3, r1, r4, lsl #25
   134b4:	andeq	r3, r1, r4, lsl #25
   134b8:	andeq	r3, r1, r4, lsl #25
   134bc:	andeq	r3, r1, r4, lsl #25
   134c0:	andeq	r3, r1, r4, lsl #25
   134c4:	andeq	r3, r1, r4, lsl #25
   134c8:	andeq	r3, r1, r4, lsl #25
   134cc:	andeq	r3, r1, r4, lsl #25
   134d0:	andeq	r3, r1, r4, lsl #25
   134d4:	andeq	r3, r1, r4, lsl #25
   134d8:	andeq	r3, r1, r4, lsl #25
   134dc:	andeq	r3, r1, r8, ror #22
   134e0:	andeq	r3, r1, r0, ror fp
   134e4:	andeq	r3, r1, r0, ror fp
   134e8:	andeq	r3, r1, ip, asr fp
   134ec:	andeq	r3, r1, r0, ror fp
   134f0:	andeq	r3, r1, r8, ror ip
   134f4:	andeq	r3, r1, r0, ror fp
   134f8:	andeq	r3, r1, ip, lsl #23
   134fc:	andeq	r3, r1, r0, ror fp
   13500:	andeq	r3, r1, r0, ror fp
   13504:	andeq	r3, r1, r0, ror fp
   13508:	andeq	r3, r1, r8, ror ip
   1350c:	andeq	r3, r1, r8, ror ip
   13510:	andeq	r3, r1, r8, ror ip
   13514:	andeq	r3, r1, r8, ror ip
   13518:	andeq	r3, r1, r8, ror ip
   1351c:	andeq	r3, r1, r8, ror ip
   13520:	andeq	r3, r1, r8, ror ip
   13524:	andeq	r3, r1, r8, ror ip
   13528:	andeq	r3, r1, r8, ror ip
   1352c:	andeq	r3, r1, r8, ror ip
   13530:	andeq	r3, r1, r8, ror ip
   13534:	andeq	r3, r1, r8, ror ip
   13538:	andeq	r3, r1, r8, ror ip
   1353c:	andeq	r3, r1, r8, ror ip
   13540:	andeq	r3, r1, r8, ror ip
   13544:	andeq	r3, r1, r8, ror ip
   13548:	andeq	r3, r1, r0, ror fp
   1354c:	andeq	r3, r1, r0, ror fp
   13550:	andeq	r3, r1, r0, ror fp
   13554:	andeq	r3, r1, r0, ror fp
   13558:	andeq	r3, r1, r8, lsr r8
   1355c:	andeq	r3, r1, r4, lsl #25
   13560:	andeq	r3, r1, r8, ror ip
   13564:	andeq	r3, r1, r8, ror ip
   13568:	andeq	r3, r1, r8, ror ip
   1356c:	andeq	r3, r1, r8, ror ip
   13570:	andeq	r3, r1, r8, ror ip
   13574:	andeq	r3, r1, r8, ror ip
   13578:	andeq	r3, r1, r8, ror ip
   1357c:	andeq	r3, r1, r8, ror ip
   13580:	andeq	r3, r1, r8, ror ip
   13584:	andeq	r3, r1, r8, ror ip
   13588:	andeq	r3, r1, r8, ror ip
   1358c:	andeq	r3, r1, r8, ror ip
   13590:	andeq	r3, r1, r8, ror ip
   13594:	andeq	r3, r1, r8, ror ip
   13598:	andeq	r3, r1, r8, ror ip
   1359c:	andeq	r3, r1, r8, ror ip
   135a0:	andeq	r3, r1, r8, ror ip
   135a4:	andeq	r3, r1, r8, ror ip
   135a8:	andeq	r3, r1, r8, ror ip
   135ac:	andeq	r3, r1, r8, ror ip
   135b0:	andeq	r3, r1, r8, ror ip
   135b4:	andeq	r3, r1, r8, ror ip
   135b8:	andeq	r3, r1, r8, ror ip
   135bc:	andeq	r3, r1, r8, ror ip
   135c0:	andeq	r3, r1, r8, ror ip
   135c4:	andeq	r3, r1, r8, ror ip
   135c8:	andeq	r3, r1, r0, ror fp
   135cc:	muleq	r1, ip, sl
   135d0:	andeq	r3, r1, r8, ror ip
   135d4:	andeq	r3, r1, r0, ror fp
   135d8:	andeq	r3, r1, r8, ror ip
   135dc:	andeq	r3, r1, r0, ror fp
   135e0:	andeq	r3, r1, r8, ror ip
   135e4:	andeq	r3, r1, r8, ror ip
   135e8:	andeq	r3, r1, r8, ror ip
   135ec:	andeq	r3, r1, r8, ror ip
   135f0:	andeq	r3, r1, r8, ror ip
   135f4:	andeq	r3, r1, r8, ror ip
   135f8:	andeq	r3, r1, r8, ror ip
   135fc:	andeq	r3, r1, r8, ror ip
   13600:	andeq	r3, r1, r8, ror ip
   13604:	andeq	r3, r1, r8, ror ip
   13608:	andeq	r3, r1, r8, ror ip
   1360c:	andeq	r3, r1, r8, ror ip
   13610:	andeq	r3, r1, r8, ror ip
   13614:	andeq	r3, r1, r8, ror ip
   13618:	andeq	r3, r1, r8, ror ip
   1361c:	andeq	r3, r1, r8, ror ip
   13620:	andeq	r3, r1, r8, ror ip
   13624:	andeq	r3, r1, r8, ror ip
   13628:	andeq	r3, r1, r8, ror ip
   1362c:	andeq	r3, r1, r8, ror ip
   13630:	andeq	r3, r1, r8, ror ip
   13634:	andeq	r3, r1, r8, ror ip
   13638:	andeq	r3, r1, r8, ror ip
   1363c:	andeq	r3, r1, r8, ror ip
   13640:	andeq	r3, r1, r8, ror ip
   13644:	andeq	r3, r1, r8, ror ip
   13648:	andeq	r3, r1, r4, lsl fp
   1364c:	andeq	r3, r1, r0, ror fp
   13650:	andeq	r3, r1, r4, lsl fp
   13654:	andeq	r3, r1, ip, asr fp
   13658:	ldrb	r3, [fp, #-33]	; 0xffffffdf
   1365c:	cmp	r3, #0
   13660:	beq	13824 <__assert_fail@plt+0x295c>
   13664:	ldrb	r3, [fp, #-34]	; 0xffffffde
   13668:	cmp	r3, #0
   1366c:	bne	146cc <__assert_fail@plt+0x3804>
   13670:	mov	r3, #1
   13674:	strb	r3, [fp, #-41]	; 0xffffffd7
   13678:	ldr	r3, [fp, #4]
   1367c:	cmp	r3, #2
   13680:	bne	13730 <__assert_fail@plt+0x2868>
   13684:	ldrb	r3, [fp, #-35]	; 0xffffffdd
   13688:	eor	r3, r3, #1
   1368c:	uxtb	r3, r3
   13690:	cmp	r3, #0
   13694:	beq	13730 <__assert_fail@plt+0x2868>
   13698:	ldr	r2, [fp, #-20]	; 0xffffffec
   1369c:	ldr	r3, [fp, #-92]	; 0xffffffa4
   136a0:	cmp	r2, r3
   136a4:	bcs	136bc <__assert_fail@plt+0x27f4>
   136a8:	ldr	r2, [fp, #-88]	; 0xffffffa8
   136ac:	ldr	r3, [fp, #-20]	; 0xffffffec
   136b0:	add	r3, r2, r3
   136b4:	mov	r2, #39	; 0x27
   136b8:	strb	r2, [r3]
   136bc:	ldr	r3, [fp, #-20]	; 0xffffffec
   136c0:	add	r3, r3, #1
   136c4:	str	r3, [fp, #-20]	; 0xffffffec
   136c8:	ldr	r2, [fp, #-20]	; 0xffffffec
   136cc:	ldr	r3, [fp, #-92]	; 0xffffffa4
   136d0:	cmp	r2, r3
   136d4:	bcs	136ec <__assert_fail@plt+0x2824>
   136d8:	ldr	r2, [fp, #-88]	; 0xffffffa8
   136dc:	ldr	r3, [fp, #-20]	; 0xffffffec
   136e0:	add	r3, r2, r3
   136e4:	mov	r2, #36	; 0x24
   136e8:	strb	r2, [r3]
   136ec:	ldr	r3, [fp, #-20]	; 0xffffffec
   136f0:	add	r3, r3, #1
   136f4:	str	r3, [fp, #-20]	; 0xffffffec
   136f8:	ldr	r2, [fp, #-20]	; 0xffffffec
   136fc:	ldr	r3, [fp, #-92]	; 0xffffffa4
   13700:	cmp	r2, r3
   13704:	bcs	1371c <__assert_fail@plt+0x2854>
   13708:	ldr	r2, [fp, #-88]	; 0xffffffa8
   1370c:	ldr	r3, [fp, #-20]	; 0xffffffec
   13710:	add	r3, r2, r3
   13714:	mov	r2, #39	; 0x27
   13718:	strb	r2, [r3]
   1371c:	ldr	r3, [fp, #-20]	; 0xffffffec
   13720:	add	r3, r3, #1
   13724:	str	r3, [fp, #-20]	; 0xffffffec
   13728:	mov	r3, #1
   1372c:	strb	r3, [fp, #-35]	; 0xffffffdd
   13730:	ldr	r2, [fp, #-20]	; 0xffffffec
   13734:	ldr	r3, [fp, #-92]	; 0xffffffa4
   13738:	cmp	r2, r3
   1373c:	bcs	13754 <__assert_fail@plt+0x288c>
   13740:	ldr	r2, [fp, #-88]	; 0xffffffa8
   13744:	ldr	r3, [fp, #-20]	; 0xffffffec
   13748:	add	r3, r2, r3
   1374c:	mov	r2, #92	; 0x5c
   13750:	strb	r2, [r3]
   13754:	ldr	r3, [fp, #-20]	; 0xffffffec
   13758:	add	r3, r3, #1
   1375c:	str	r3, [fp, #-20]	; 0xffffffec
   13760:	ldr	r3, [fp, #4]
   13764:	cmp	r3, #2
   13768:	beq	13818 <__assert_fail@plt+0x2950>
   1376c:	ldr	r3, [fp, #-16]
   13770:	add	r2, r3, #1
   13774:	ldr	r3, [fp, #-100]	; 0xffffff9c
   13778:	cmp	r2, r3
   1377c:	bcs	13818 <__assert_fail@plt+0x2950>
   13780:	ldr	r3, [fp, #-16]
   13784:	add	r3, r3, #1
   13788:	ldr	r2, [fp, #-96]	; 0xffffffa0
   1378c:	add	r3, r2, r3
   13790:	ldrb	r3, [r3]
   13794:	cmp	r3, #47	; 0x2f
   13798:	bls	13818 <__assert_fail@plt+0x2950>
   1379c:	ldr	r3, [fp, #-16]
   137a0:	add	r3, r3, #1
   137a4:	ldr	r2, [fp, #-96]	; 0xffffffa0
   137a8:	add	r3, r2, r3
   137ac:	ldrb	r3, [r3]
   137b0:	cmp	r3, #57	; 0x39
   137b4:	bhi	13818 <__assert_fail@plt+0x2950>
   137b8:	ldr	r2, [fp, #-20]	; 0xffffffec
   137bc:	ldr	r3, [fp, #-92]	; 0xffffffa4
   137c0:	cmp	r2, r3
   137c4:	bcs	137dc <__assert_fail@plt+0x2914>
   137c8:	ldr	r2, [fp, #-88]	; 0xffffffa8
   137cc:	ldr	r3, [fp, #-20]	; 0xffffffec
   137d0:	add	r3, r2, r3
   137d4:	mov	r2, #48	; 0x30
   137d8:	strb	r2, [r3]
   137dc:	ldr	r3, [fp, #-20]	; 0xffffffec
   137e0:	add	r3, r3, #1
   137e4:	str	r3, [fp, #-20]	; 0xffffffec
   137e8:	ldr	r2, [fp, #-20]	; 0xffffffec
   137ec:	ldr	r3, [fp, #-92]	; 0xffffffa4
   137f0:	cmp	r2, r3
   137f4:	bcs	1380c <__assert_fail@plt+0x2944>
   137f8:	ldr	r2, [fp, #-88]	; 0xffffffa8
   137fc:	ldr	r3, [fp, #-20]	; 0xffffffec
   13800:	add	r3, r2, r3
   13804:	mov	r2, #48	; 0x30
   13808:	strb	r2, [r3]
   1380c:	ldr	r3, [fp, #-20]	; 0xffffffec
   13810:	add	r3, r3, #1
   13814:	str	r3, [fp, #-20]	; 0xffffffec
   13818:	mov	r3, #48	; 0x30
   1381c:	strb	r3, [fp, #-38]	; 0xffffffda
   13820:	b	14260 <__assert_fail@plt+0x3398>
   13824:	ldr	r3, [fp, #8]
   13828:	and	r3, r3, #1
   1382c:	cmp	r3, #0
   13830:	beq	14260 <__assert_fail@plt+0x3398>
   13834:	b	144fc <__assert_fail@plt+0x3634>
   13838:	ldr	r3, [fp, #4]
   1383c:	cmp	r3, #2
   13840:	beq	13850 <__assert_fail@plt+0x2988>
   13844:	cmp	r3, #5
   13848:	beq	13860 <__assert_fail@plt+0x2998>
   1384c:	b	13a44 <__assert_fail@plt+0x2b7c>
   13850:	ldrb	r3, [fp, #-34]	; 0xffffffde
   13854:	cmp	r3, #0
   13858:	beq	13a38 <__assert_fail@plt+0x2b70>
   1385c:	b	14708 <__assert_fail@plt+0x3840>
   13860:	ldr	r3, [fp, #8]
   13864:	and	r3, r3, #4
   13868:	cmp	r3, #0
   1386c:	beq	13a40 <__assert_fail@plt+0x2b78>
   13870:	ldr	r3, [fp, #-16]
   13874:	add	r2, r3, #2
   13878:	ldr	r3, [fp, #-100]	; 0xffffff9c
   1387c:	cmp	r2, r3
   13880:	bcs	13a40 <__assert_fail@plt+0x2b78>
   13884:	ldr	r3, [fp, #-16]
   13888:	add	r3, r3, #1
   1388c:	ldr	r2, [fp, #-96]	; 0xffffffa0
   13890:	add	r3, r2, r3
   13894:	ldrb	r3, [r3]
   13898:	cmp	r3, #63	; 0x3f
   1389c:	bne	13a40 <__assert_fail@plt+0x2b78>
   138a0:	ldr	r3, [fp, #-16]
   138a4:	add	r3, r3, #2
   138a8:	ldr	r2, [fp, #-96]	; 0xffffffa0
   138ac:	add	r3, r2, r3
   138b0:	ldrb	r3, [r3]
   138b4:	sub	r3, r3, #33	; 0x21
   138b8:	cmp	r3, #29
   138bc:	ldrls	pc, [pc, r3, lsl #2]
   138c0:	b	13a30 <__assert_fail@plt+0x2b68>
   138c4:	andeq	r3, r1, ip, lsr r9
   138c8:	andeq	r3, r1, r0, lsr sl
   138cc:	andeq	r3, r1, r0, lsr sl
   138d0:	andeq	r3, r1, r0, lsr sl
   138d4:	andeq	r3, r1, r0, lsr sl
   138d8:	andeq	r3, r1, r0, lsr sl
   138dc:	andeq	r3, r1, ip, lsr r9
   138e0:	andeq	r3, r1, ip, lsr r9
   138e4:	andeq	r3, r1, ip, lsr r9
   138e8:	andeq	r3, r1, r0, lsr sl
   138ec:	andeq	r3, r1, r0, lsr sl
   138f0:	andeq	r3, r1, r0, lsr sl
   138f4:	andeq	r3, r1, ip, lsr r9
   138f8:	andeq	r3, r1, r0, lsr sl
   138fc:	andeq	r3, r1, ip, lsr r9
   13900:	andeq	r3, r1, r0, lsr sl
   13904:	andeq	r3, r1, r0, lsr sl
   13908:	andeq	r3, r1, r0, lsr sl
   1390c:	andeq	r3, r1, r0, lsr sl
   13910:	andeq	r3, r1, r0, lsr sl
   13914:	andeq	r3, r1, r0, lsr sl
   13918:	andeq	r3, r1, r0, lsr sl
   1391c:	andeq	r3, r1, r0, lsr sl
   13920:	andeq	r3, r1, r0, lsr sl
   13924:	andeq	r3, r1, r0, lsr sl
   13928:	andeq	r3, r1, r0, lsr sl
   1392c:	andeq	r3, r1, r0, lsr sl
   13930:	andeq	r3, r1, ip, lsr r9
   13934:	andeq	r3, r1, ip, lsr r9
   13938:	andeq	r3, r1, ip, lsr r9
   1393c:	ldrb	r3, [fp, #-34]	; 0xffffffde
   13940:	cmp	r3, #0
   13944:	bne	146d4 <__assert_fail@plt+0x380c>
   13948:	ldr	r3, [fp, #-16]
   1394c:	add	r3, r3, #2
   13950:	ldr	r2, [fp, #-96]	; 0xffffffa0
   13954:	add	r3, r2, r3
   13958:	ldrb	r3, [r3]
   1395c:	strb	r3, [fp, #-38]	; 0xffffffda
   13960:	ldr	r3, [fp, #-16]
   13964:	add	r3, r3, #2
   13968:	str	r3, [fp, #-16]
   1396c:	ldr	r2, [fp, #-20]	; 0xffffffec
   13970:	ldr	r3, [fp, #-92]	; 0xffffffa4
   13974:	cmp	r2, r3
   13978:	bcs	13990 <__assert_fail@plt+0x2ac8>
   1397c:	ldr	r2, [fp, #-88]	; 0xffffffa8
   13980:	ldr	r3, [fp, #-20]	; 0xffffffec
   13984:	add	r3, r2, r3
   13988:	mov	r2, #63	; 0x3f
   1398c:	strb	r2, [r3]
   13990:	ldr	r3, [fp, #-20]	; 0xffffffec
   13994:	add	r3, r3, #1
   13998:	str	r3, [fp, #-20]	; 0xffffffec
   1399c:	ldr	r2, [fp, #-20]	; 0xffffffec
   139a0:	ldr	r3, [fp, #-92]	; 0xffffffa4
   139a4:	cmp	r2, r3
   139a8:	bcs	139c0 <__assert_fail@plt+0x2af8>
   139ac:	ldr	r2, [fp, #-88]	; 0xffffffa8
   139b0:	ldr	r3, [fp, #-20]	; 0xffffffec
   139b4:	add	r3, r2, r3
   139b8:	mov	r2, #34	; 0x22
   139bc:	strb	r2, [r3]
   139c0:	ldr	r3, [fp, #-20]	; 0xffffffec
   139c4:	add	r3, r3, #1
   139c8:	str	r3, [fp, #-20]	; 0xffffffec
   139cc:	ldr	r2, [fp, #-20]	; 0xffffffec
   139d0:	ldr	r3, [fp, #-92]	; 0xffffffa4
   139d4:	cmp	r2, r3
   139d8:	bcs	139f0 <__assert_fail@plt+0x2b28>
   139dc:	ldr	r2, [fp, #-88]	; 0xffffffa8
   139e0:	ldr	r3, [fp, #-20]	; 0xffffffec
   139e4:	add	r3, r2, r3
   139e8:	mov	r2, #34	; 0x22
   139ec:	strb	r2, [r3]
   139f0:	ldr	r3, [fp, #-20]	; 0xffffffec
   139f4:	add	r3, r3, #1
   139f8:	str	r3, [fp, #-20]	; 0xffffffec
   139fc:	ldr	r2, [fp, #-20]	; 0xffffffec
   13a00:	ldr	r3, [fp, #-92]	; 0xffffffa4
   13a04:	cmp	r2, r3
   13a08:	bcs	13a20 <__assert_fail@plt+0x2b58>
   13a0c:	ldr	r2, [fp, #-88]	; 0xffffffa8
   13a10:	ldr	r3, [fp, #-20]	; 0xffffffec
   13a14:	add	r3, r2, r3
   13a18:	mov	r2, #63	; 0x3f
   13a1c:	strb	r2, [r3]
   13a20:	ldr	r3, [fp, #-20]	; 0xffffffec
   13a24:	add	r3, r3, #1
   13a28:	str	r3, [fp, #-20]	; 0xffffffec
   13a2c:	b	13a34 <__assert_fail@plt+0x2b6c>
   13a30:	nop			; (mov r0, r0)
   13a34:	b	13a40 <__assert_fail@plt+0x2b78>
   13a38:	nop			; (mov r0, r0)
   13a3c:	b	1428c <__assert_fail@plt+0x33c4>
   13a40:	nop			; (mov r0, r0)
   13a44:	b	1428c <__assert_fail@plt+0x33c4>
   13a48:	mov	r3, #97	; 0x61
   13a4c:	strb	r3, [fp, #-39]	; 0xffffffd9
   13a50:	b	13afc <__assert_fail@plt+0x2c34>
   13a54:	mov	r3, #98	; 0x62
   13a58:	strb	r3, [fp, #-39]	; 0xffffffd9
   13a5c:	b	13afc <__assert_fail@plt+0x2c34>
   13a60:	mov	r3, #102	; 0x66
   13a64:	strb	r3, [fp, #-39]	; 0xffffffd9
   13a68:	b	13afc <__assert_fail@plt+0x2c34>
   13a6c:	mov	r3, #110	; 0x6e
   13a70:	strb	r3, [fp, #-39]	; 0xffffffd9
   13a74:	b	13ae4 <__assert_fail@plt+0x2c1c>
   13a78:	mov	r3, #114	; 0x72
   13a7c:	strb	r3, [fp, #-39]	; 0xffffffd9
   13a80:	b	13ae4 <__assert_fail@plt+0x2c1c>
   13a84:	mov	r3, #116	; 0x74
   13a88:	strb	r3, [fp, #-39]	; 0xffffffd9
   13a8c:	b	13ae4 <__assert_fail@plt+0x2c1c>
   13a90:	mov	r3, #118	; 0x76
   13a94:	strb	r3, [fp, #-39]	; 0xffffffd9
   13a98:	b	13afc <__assert_fail@plt+0x2c34>
   13a9c:	ldrb	r3, [fp, #-38]	; 0xffffffda
   13aa0:	strb	r3, [fp, #-39]	; 0xffffffd9
   13aa4:	ldr	r3, [fp, #4]
   13aa8:	cmp	r3, #2
   13aac:	bne	13ac0 <__assert_fail@plt+0x2bf8>
   13ab0:	ldrb	r3, [fp, #-34]	; 0xffffffde
   13ab4:	cmp	r3, #0
   13ab8:	beq	14414 <__assert_fail@plt+0x354c>
   13abc:	b	14708 <__assert_fail@plt+0x3840>
   13ac0:	ldrb	r3, [fp, #-33]	; 0xffffffdf
   13ac4:	cmp	r3, #0
   13ac8:	beq	13ae4 <__assert_fail@plt+0x2c1c>
   13acc:	ldrb	r3, [fp, #-34]	; 0xffffffde
   13ad0:	cmp	r3, #0
   13ad4:	beq	13ae4 <__assert_fail@plt+0x2c1c>
   13ad8:	ldr	r3, [fp, #-32]	; 0xffffffe0
   13adc:	cmp	r3, #0
   13ae0:	bne	1441c <__assert_fail@plt+0x3554>
   13ae4:	ldr	r3, [fp, #4]
   13ae8:	cmp	r3, #2
   13aec:	bne	13afc <__assert_fail@plt+0x2c34>
   13af0:	ldrb	r3, [fp, #-34]	; 0xffffffde
   13af4:	cmp	r3, #0
   13af8:	bne	146dc <__assert_fail@plt+0x3814>
   13afc:	ldrb	r3, [fp, #-33]	; 0xffffffdf
   13b00:	cmp	r3, #0
   13b04:	beq	14268 <__assert_fail@plt+0x33a0>
   13b08:	ldrb	r3, [fp, #-39]	; 0xffffffd9
   13b0c:	strb	r3, [fp, #-38]	; 0xffffffda
   13b10:	b	14314 <__assert_fail@plt+0x344c>
   13b14:	ldr	r3, [fp, #-100]	; 0xffffff9c
   13b18:	cmn	r3, #1
   13b1c:	bne	13b40 <__assert_fail@plt+0x2c78>
   13b20:	ldr	r3, [fp, #-96]	; 0xffffffa0
   13b24:	add	r3, r3, #1
   13b28:	ldrb	r3, [r3]
   13b2c:	cmp	r3, #0
   13b30:	movne	r3, #1
   13b34:	moveq	r3, #0
   13b38:	uxtb	r3, r3
   13b3c:	b	13b54 <__assert_fail@plt+0x2c8c>
   13b40:	ldr	r3, [fp, #-100]	; 0xffffff9c
   13b44:	cmp	r3, #1
   13b48:	movne	r3, #1
   13b4c:	moveq	r3, #0
   13b50:	uxtb	r3, r3
   13b54:	cmp	r3, #0
   13b58:	bne	14270 <__assert_fail@plt+0x33a8>
   13b5c:	ldr	r3, [fp, #-16]
   13b60:	cmp	r3, #0
   13b64:	bne	14278 <__assert_fail@plt+0x33b0>
   13b68:	mov	r3, #1
   13b6c:	strb	r3, [fp, #-42]	; 0xffffffd6
   13b70:	ldr	r3, [fp, #4]
   13b74:	cmp	r3, #2
   13b78:	bne	14280 <__assert_fail@plt+0x33b8>
   13b7c:	ldrb	r3, [fp, #-34]	; 0xffffffde
   13b80:	cmp	r3, #0
   13b84:	beq	14280 <__assert_fail@plt+0x33b8>
   13b88:	b	14708 <__assert_fail@plt+0x3840>
   13b8c:	mov	r3, #1
   13b90:	strb	r3, [fp, #-36]	; 0xffffffdc
   13b94:	mov	r3, #1
   13b98:	strb	r3, [fp, #-42]	; 0xffffffd6
   13b9c:	ldr	r3, [fp, #4]
   13ba0:	cmp	r3, #2
   13ba4:	bne	14288 <__assert_fail@plt+0x33c0>
   13ba8:	ldrb	r3, [fp, #-34]	; 0xffffffde
   13bac:	cmp	r3, #0
   13bb0:	bne	146e4 <__assert_fail@plt+0x381c>
   13bb4:	ldr	r3, [fp, #-92]	; 0xffffffa4
   13bb8:	cmp	r3, #0
   13bbc:	beq	13bdc <__assert_fail@plt+0x2d14>
   13bc0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   13bc4:	cmp	r3, #0
   13bc8:	bne	13bdc <__assert_fail@plt+0x2d14>
   13bcc:	ldr	r3, [fp, #-92]	; 0xffffffa4
   13bd0:	str	r3, [fp, #-24]	; 0xffffffe8
   13bd4:	mov	r3, #0
   13bd8:	str	r3, [fp, #-92]	; 0xffffffa4
   13bdc:	ldr	r2, [fp, #-20]	; 0xffffffec
   13be0:	ldr	r3, [fp, #-92]	; 0xffffffa4
   13be4:	cmp	r2, r3
   13be8:	bcs	13c00 <__assert_fail@plt+0x2d38>
   13bec:	ldr	r2, [fp, #-88]	; 0xffffffa8
   13bf0:	ldr	r3, [fp, #-20]	; 0xffffffec
   13bf4:	add	r3, r2, r3
   13bf8:	mov	r2, #39	; 0x27
   13bfc:	strb	r2, [r3]
   13c00:	ldr	r3, [fp, #-20]	; 0xffffffec
   13c04:	add	r3, r3, #1
   13c08:	str	r3, [fp, #-20]	; 0xffffffec
   13c0c:	ldr	r2, [fp, #-20]	; 0xffffffec
   13c10:	ldr	r3, [fp, #-92]	; 0xffffffa4
   13c14:	cmp	r2, r3
   13c18:	bcs	13c30 <__assert_fail@plt+0x2d68>
   13c1c:	ldr	r2, [fp, #-88]	; 0xffffffa8
   13c20:	ldr	r3, [fp, #-20]	; 0xffffffec
   13c24:	add	r3, r2, r3
   13c28:	mov	r2, #92	; 0x5c
   13c2c:	strb	r2, [r3]
   13c30:	ldr	r3, [fp, #-20]	; 0xffffffec
   13c34:	add	r3, r3, #1
   13c38:	str	r3, [fp, #-20]	; 0xffffffec
   13c3c:	ldr	r2, [fp, #-20]	; 0xffffffec
   13c40:	ldr	r3, [fp, #-92]	; 0xffffffa4
   13c44:	cmp	r2, r3
   13c48:	bcs	13c60 <__assert_fail@plt+0x2d98>
   13c4c:	ldr	r2, [fp, #-88]	; 0xffffffa8
   13c50:	ldr	r3, [fp, #-20]	; 0xffffffec
   13c54:	add	r3, r2, r3
   13c58:	mov	r2, #39	; 0x27
   13c5c:	strb	r2, [r3]
   13c60:	ldr	r3, [fp, #-20]	; 0xffffffec
   13c64:	add	r3, r3, #1
   13c68:	str	r3, [fp, #-20]	; 0xffffffec
   13c6c:	mov	r3, #0
   13c70:	strb	r3, [fp, #-35]	; 0xffffffdd
   13c74:	b	14288 <__assert_fail@plt+0x33c0>
   13c78:	mov	r3, #1
   13c7c:	strb	r3, [fp, #-42]	; 0xffffffd6
   13c80:	b	1428c <__assert_fail@plt+0x33c4>
   13c84:	ldrb	r3, [fp, #-57]	; 0xffffffc7
   13c88:	cmp	r3, #0
   13c8c:	beq	13ccc <__assert_fail@plt+0x2e04>
   13c90:	mov	r3, #1
   13c94:	str	r3, [fp, #-48]	; 0xffffffd0
   13c98:	bl	10df0 <__ctype_b_loc@plt>
   13c9c:	mov	r3, r0
   13ca0:	ldr	r2, [r3]
   13ca4:	ldrb	r3, [fp, #-38]	; 0xffffffda
   13ca8:	lsl	r3, r3, #1
   13cac:	add	r3, r2, r3
   13cb0:	ldrh	r3, [r3]
   13cb4:	and	r3, r3, #16384	; 0x4000
   13cb8:	cmp	r3, #0
   13cbc:	movne	r3, #1
   13cc0:	moveq	r3, #0
   13cc4:	strb	r3, [fp, #-49]	; 0xffffffcf
   13cc8:	b	13f18 <__assert_fail@plt+0x3050>
   13ccc:	sub	r3, fp, #76	; 0x4c
   13cd0:	mov	r2, #8
   13cd4:	mov	r1, #0
   13cd8:	mov	r0, r3
   13cdc:	bl	10e44 <memset@plt>
   13ce0:	mov	r3, #0
   13ce4:	str	r3, [fp, #-48]	; 0xffffffd0
   13ce8:	mov	r3, #1
   13cec:	strb	r3, [fp, #-49]	; 0xffffffcf
   13cf0:	ldr	r3, [fp, #-100]	; 0xffffff9c
   13cf4:	cmn	r3, #1
   13cf8:	bne	13d08 <__assert_fail@plt+0x2e40>
   13cfc:	ldr	r0, [fp, #-96]	; 0xffffffa0
   13d00:	bl	10e14 <strlen@plt>
   13d04:	str	r0, [fp, #-100]	; 0xffffff9c
   13d08:	ldr	r2, [fp, #-16]
   13d0c:	ldr	r3, [fp, #-48]	; 0xffffffd0
   13d10:	add	r3, r2, r3
   13d14:	ldr	r2, [fp, #-96]	; 0xffffffa0
   13d18:	add	r1, r2, r3
   13d1c:	ldr	r2, [fp, #-16]
   13d20:	ldr	r3, [fp, #-48]	; 0xffffffd0
   13d24:	add	r3, r2, r3
   13d28:	ldr	r2, [fp, #-100]	; 0xffffff9c
   13d2c:	sub	r2, r2, r3
   13d30:	sub	r3, fp, #76	; 0x4c
   13d34:	sub	r0, fp, #80	; 0x50
   13d38:	bl	17090 <__assert_fail@plt+0x61c8>
   13d3c:	str	r0, [fp, #-64]	; 0xffffffc0
   13d40:	ldr	r3, [fp, #-64]	; 0xffffffc0
   13d44:	cmp	r3, #0
   13d48:	beq	13f0c <__assert_fail@plt+0x3044>
   13d4c:	ldr	r3, [fp, #-64]	; 0xffffffc0
   13d50:	cmn	r3, #1
   13d54:	bne	13d64 <__assert_fail@plt+0x2e9c>
   13d58:	mov	r3, #0
   13d5c:	strb	r3, [fp, #-49]	; 0xffffffcf
   13d60:	b	13f18 <__assert_fail@plt+0x3050>
   13d64:	ldr	r3, [fp, #-64]	; 0xffffffc0
   13d68:	cmn	r3, #2
   13d6c:	bne	13dc4 <__assert_fail@plt+0x2efc>
   13d70:	mov	r3, #0
   13d74:	strb	r3, [fp, #-49]	; 0xffffffcf
   13d78:	b	13d88 <__assert_fail@plt+0x2ec0>
   13d7c:	ldr	r3, [fp, #-48]	; 0xffffffd0
   13d80:	add	r3, r3, #1
   13d84:	str	r3, [fp, #-48]	; 0xffffffd0
   13d88:	ldr	r2, [fp, #-16]
   13d8c:	ldr	r3, [fp, #-48]	; 0xffffffd0
   13d90:	add	r2, r2, r3
   13d94:	ldr	r3, [fp, #-100]	; 0xffffff9c
   13d98:	cmp	r2, r3
   13d9c:	bcs	13f14 <__assert_fail@plt+0x304c>
   13da0:	ldr	r2, [fp, #-16]
   13da4:	ldr	r3, [fp, #-48]	; 0xffffffd0
   13da8:	add	r3, r2, r3
   13dac:	ldr	r2, [fp, #-96]	; 0xffffffa0
   13db0:	add	r3, r2, r3
   13db4:	ldrb	r3, [r3]
   13db8:	cmp	r3, #0
   13dbc:	bne	13d7c <__assert_fail@plt+0x2eb4>
   13dc0:	b	13f14 <__assert_fail@plt+0x304c>
   13dc4:	ldrb	r3, [fp, #-34]	; 0xffffffde
   13dc8:	cmp	r3, #0
   13dcc:	beq	13ec0 <__assert_fail@plt+0x2ff8>
   13dd0:	ldr	r3, [fp, #4]
   13dd4:	cmp	r3, #2
   13dd8:	bne	13ec0 <__assert_fail@plt+0x2ff8>
   13ddc:	mov	r3, #1
   13de0:	str	r3, [fp, #-56]	; 0xffffffc8
   13de4:	b	13eb0 <__assert_fail@plt+0x2fe8>
   13de8:	ldr	r2, [fp, #-16]
   13dec:	ldr	r3, [fp, #-48]	; 0xffffffd0
   13df0:	add	r2, r2, r3
   13df4:	ldr	r3, [fp, #-56]	; 0xffffffc8
   13df8:	add	r3, r2, r3
   13dfc:	ldr	r2, [fp, #-96]	; 0xffffffa0
   13e00:	add	r3, r2, r3
   13e04:	ldrb	r3, [r3]
   13e08:	sub	r3, r3, #91	; 0x5b
   13e0c:	cmp	r3, #33	; 0x21
   13e10:	ldrls	pc, [pc, r3, lsl #2]
   13e14:	b	13ea0 <__assert_fail@plt+0x2fd8>
   13e18:	andeq	r4, r1, ip, ror #13
   13e1c:	andeq	r4, r1, ip, ror #13
   13e20:	andeq	r3, r1, r0, lsr #29
   13e24:	andeq	r4, r1, ip, ror #13
   13e28:	andeq	r3, r1, r0, lsr #29
   13e2c:	andeq	r4, r1, ip, ror #13
   13e30:	andeq	r3, r1, r0, lsr #29
   13e34:	andeq	r3, r1, r0, lsr #29
   13e38:	andeq	r3, r1, r0, lsr #29
   13e3c:	andeq	r3, r1, r0, lsr #29
   13e40:	andeq	r3, r1, r0, lsr #29
   13e44:	andeq	r3, r1, r0, lsr #29
   13e48:	andeq	r3, r1, r0, lsr #29
   13e4c:	andeq	r3, r1, r0, lsr #29
   13e50:	andeq	r3, r1, r0, lsr #29
   13e54:	andeq	r3, r1, r0, lsr #29
   13e58:	andeq	r3, r1, r0, lsr #29
   13e5c:	andeq	r3, r1, r0, lsr #29
   13e60:	andeq	r3, r1, r0, lsr #29
   13e64:	andeq	r3, r1, r0, lsr #29
   13e68:	andeq	r3, r1, r0, lsr #29
   13e6c:	andeq	r3, r1, r0, lsr #29
   13e70:	andeq	r3, r1, r0, lsr #29
   13e74:	andeq	r3, r1, r0, lsr #29
   13e78:	andeq	r3, r1, r0, lsr #29
   13e7c:	andeq	r3, r1, r0, lsr #29
   13e80:	andeq	r3, r1, r0, lsr #29
   13e84:	andeq	r3, r1, r0, lsr #29
   13e88:	andeq	r3, r1, r0, lsr #29
   13e8c:	andeq	r3, r1, r0, lsr #29
   13e90:	andeq	r3, r1, r0, lsr #29
   13e94:	andeq	r3, r1, r0, lsr #29
   13e98:	andeq	r3, r1, r0, lsr #29
   13e9c:	andeq	r4, r1, ip, ror #13
   13ea0:	nop			; (mov r0, r0)
   13ea4:	ldr	r3, [fp, #-56]	; 0xffffffc8
   13ea8:	add	r3, r3, #1
   13eac:	str	r3, [fp, #-56]	; 0xffffffc8
   13eb0:	ldr	r2, [fp, #-56]	; 0xffffffc8
   13eb4:	ldr	r3, [fp, #-64]	; 0xffffffc0
   13eb8:	cmp	r2, r3
   13ebc:	bcc	13de8 <__assert_fail@plt+0x2f20>
   13ec0:	ldr	r3, [fp, #-80]	; 0xffffffb0
   13ec4:	mov	r0, r3
   13ec8:	bl	10d30 <iswprint@plt>
   13ecc:	mov	r3, r0
   13ed0:	cmp	r3, #0
   13ed4:	bne	13ee0 <__assert_fail@plt+0x3018>
   13ed8:	mov	r3, #0
   13edc:	strb	r3, [fp, #-49]	; 0xffffffcf
   13ee0:	ldr	r2, [fp, #-48]	; 0xffffffd0
   13ee4:	ldr	r3, [fp, #-64]	; 0xffffffc0
   13ee8:	add	r3, r2, r3
   13eec:	str	r3, [fp, #-48]	; 0xffffffd0
   13ef0:	sub	r3, fp, #76	; 0x4c
   13ef4:	mov	r0, r3
   13ef8:	bl	10cdc <mbsinit@plt>
   13efc:	mov	r3, r0
   13f00:	cmp	r3, #0
   13f04:	beq	13d08 <__assert_fail@plt+0x2e40>
   13f08:	b	13f18 <__assert_fail@plt+0x3050>
   13f0c:	nop			; (mov r0, r0)
   13f10:	b	13f18 <__assert_fail@plt+0x3050>
   13f14:	nop			; (mov r0, r0)
   13f18:	ldrb	r3, [fp, #-49]	; 0xffffffcf
   13f1c:	strb	r3, [fp, #-42]	; 0xffffffd6
   13f20:	ldr	r3, [fp, #-48]	; 0xffffffd0
   13f24:	cmp	r3, #1
   13f28:	bhi	13f4c <__assert_fail@plt+0x3084>
   13f2c:	ldrb	r3, [fp, #-33]	; 0xffffffdf
   13f30:	cmp	r3, #0
   13f34:	beq	1428c <__assert_fail@plt+0x33c4>
   13f38:	ldrb	r3, [fp, #-49]	; 0xffffffcf
   13f3c:	eor	r3, r3, #1
   13f40:	uxtb	r3, r3
   13f44:	cmp	r3, #0
   13f48:	beq	1428c <__assert_fail@plt+0x33c4>
   13f4c:	ldr	r2, [fp, #-16]
   13f50:	ldr	r3, [fp, #-48]	; 0xffffffd0
   13f54:	add	r3, r2, r3
   13f58:	str	r3, [fp, #-68]	; 0xffffffbc
   13f5c:	ldrb	r3, [fp, #-33]	; 0xffffffdf
   13f60:	cmp	r3, #0
   13f64:	beq	14124 <__assert_fail@plt+0x325c>
   13f68:	ldrb	r3, [fp, #-49]	; 0xffffffcf
   13f6c:	eor	r3, r3, #1
   13f70:	uxtb	r3, r3
   13f74:	cmp	r3, #0
   13f78:	beq	14124 <__assert_fail@plt+0x325c>
   13f7c:	ldrb	r3, [fp, #-34]	; 0xffffffde
   13f80:	cmp	r3, #0
   13f84:	bne	146f4 <__assert_fail@plt+0x382c>
   13f88:	mov	r3, #1
   13f8c:	strb	r3, [fp, #-41]	; 0xffffffd7
   13f90:	ldr	r3, [fp, #4]
   13f94:	cmp	r3, #2
   13f98:	bne	14048 <__assert_fail@plt+0x3180>
   13f9c:	ldrb	r3, [fp, #-35]	; 0xffffffdd
   13fa0:	eor	r3, r3, #1
   13fa4:	uxtb	r3, r3
   13fa8:	cmp	r3, #0
   13fac:	beq	14048 <__assert_fail@plt+0x3180>
   13fb0:	ldr	r2, [fp, #-20]	; 0xffffffec
   13fb4:	ldr	r3, [fp, #-92]	; 0xffffffa4
   13fb8:	cmp	r2, r3
   13fbc:	bcs	13fd4 <__assert_fail@plt+0x310c>
   13fc0:	ldr	r2, [fp, #-88]	; 0xffffffa8
   13fc4:	ldr	r3, [fp, #-20]	; 0xffffffec
   13fc8:	add	r3, r2, r3
   13fcc:	mov	r2, #39	; 0x27
   13fd0:	strb	r2, [r3]
   13fd4:	ldr	r3, [fp, #-20]	; 0xffffffec
   13fd8:	add	r3, r3, #1
   13fdc:	str	r3, [fp, #-20]	; 0xffffffec
   13fe0:	ldr	r2, [fp, #-20]	; 0xffffffec
   13fe4:	ldr	r3, [fp, #-92]	; 0xffffffa4
   13fe8:	cmp	r2, r3
   13fec:	bcs	14004 <__assert_fail@plt+0x313c>
   13ff0:	ldr	r2, [fp, #-88]	; 0xffffffa8
   13ff4:	ldr	r3, [fp, #-20]	; 0xffffffec
   13ff8:	add	r3, r2, r3
   13ffc:	mov	r2, #36	; 0x24
   14000:	strb	r2, [r3]
   14004:	ldr	r3, [fp, #-20]	; 0xffffffec
   14008:	add	r3, r3, #1
   1400c:	str	r3, [fp, #-20]	; 0xffffffec
   14010:	ldr	r2, [fp, #-20]	; 0xffffffec
   14014:	ldr	r3, [fp, #-92]	; 0xffffffa4
   14018:	cmp	r2, r3
   1401c:	bcs	14034 <__assert_fail@plt+0x316c>
   14020:	ldr	r2, [fp, #-88]	; 0xffffffa8
   14024:	ldr	r3, [fp, #-20]	; 0xffffffec
   14028:	add	r3, r2, r3
   1402c:	mov	r2, #39	; 0x27
   14030:	strb	r2, [r3]
   14034:	ldr	r3, [fp, #-20]	; 0xffffffec
   14038:	add	r3, r3, #1
   1403c:	str	r3, [fp, #-20]	; 0xffffffec
   14040:	mov	r3, #1
   14044:	strb	r3, [fp, #-35]	; 0xffffffdd
   14048:	ldr	r2, [fp, #-20]	; 0xffffffec
   1404c:	ldr	r3, [fp, #-92]	; 0xffffffa4
   14050:	cmp	r2, r3
   14054:	bcs	1406c <__assert_fail@plt+0x31a4>
   14058:	ldr	r2, [fp, #-88]	; 0xffffffa8
   1405c:	ldr	r3, [fp, #-20]	; 0xffffffec
   14060:	add	r3, r2, r3
   14064:	mov	r2, #92	; 0x5c
   14068:	strb	r2, [r3]
   1406c:	ldr	r3, [fp, #-20]	; 0xffffffec
   14070:	add	r3, r3, #1
   14074:	str	r3, [fp, #-20]	; 0xffffffec
   14078:	ldr	r2, [fp, #-20]	; 0xffffffec
   1407c:	ldr	r3, [fp, #-92]	; 0xffffffa4
   14080:	cmp	r2, r3
   14084:	bcs	140ac <__assert_fail@plt+0x31e4>
   14088:	ldr	r2, [fp, #-88]	; 0xffffffa8
   1408c:	ldr	r3, [fp, #-20]	; 0xffffffec
   14090:	add	r3, r2, r3
   14094:	ldrb	r2, [fp, #-38]	; 0xffffffda
   14098:	lsr	r2, r2, #6
   1409c:	uxtb	r2, r2
   140a0:	add	r2, r2, #48	; 0x30
   140a4:	uxtb	r2, r2
   140a8:	strb	r2, [r3]
   140ac:	ldr	r3, [fp, #-20]	; 0xffffffec
   140b0:	add	r3, r3, #1
   140b4:	str	r3, [fp, #-20]	; 0xffffffec
   140b8:	ldr	r2, [fp, #-20]	; 0xffffffec
   140bc:	ldr	r3, [fp, #-92]	; 0xffffffa4
   140c0:	cmp	r2, r3
   140c4:	bcs	140f4 <__assert_fail@plt+0x322c>
   140c8:	ldr	r2, [fp, #-88]	; 0xffffffa8
   140cc:	ldr	r3, [fp, #-20]	; 0xffffffec
   140d0:	add	r3, r2, r3
   140d4:	ldrb	r2, [fp, #-38]	; 0xffffffda
   140d8:	lsr	r2, r2, #3
   140dc:	uxtb	r2, r2
   140e0:	and	r2, r2, #7
   140e4:	uxtb	r2, r2
   140e8:	add	r2, r2, #48	; 0x30
   140ec:	uxtb	r2, r2
   140f0:	strb	r2, [r3]
   140f4:	ldr	r3, [fp, #-20]	; 0xffffffec
   140f8:	add	r3, r3, #1
   140fc:	str	r3, [fp, #-20]	; 0xffffffec
   14100:	ldrb	r3, [fp, #-38]	; 0xffffffda
   14104:	and	r3, r3, #7
   14108:	uxtb	r3, r3
   1410c:	add	r3, r3, #48	; 0x30
   14110:	strb	r3, [fp, #-38]	; 0xffffffda
   14114:	b	14168 <__assert_fail@plt+0x32a0>
   14118:	andeq	r8, r1, ip, lsl #7
   1411c:	muleq	r1, r4, r3
   14120:	muleq	r1, r0, r3
   14124:	ldrb	r3, [fp, #-40]	; 0xffffffd8
   14128:	cmp	r3, #0
   1412c:	beq	14168 <__assert_fail@plt+0x32a0>
   14130:	ldr	r2, [fp, #-20]	; 0xffffffec
   14134:	ldr	r3, [fp, #-92]	; 0xffffffa4
   14138:	cmp	r2, r3
   1413c:	bcs	14154 <__assert_fail@plt+0x328c>
   14140:	ldr	r2, [fp, #-88]	; 0xffffffa8
   14144:	ldr	r3, [fp, #-20]	; 0xffffffec
   14148:	add	r3, r2, r3
   1414c:	mov	r2, #92	; 0x5c
   14150:	strb	r2, [r3]
   14154:	ldr	r3, [fp, #-20]	; 0xffffffec
   14158:	add	r3, r3, #1
   1415c:	str	r3, [fp, #-20]	; 0xffffffec
   14160:	mov	r3, #0
   14164:	strb	r3, [fp, #-40]	; 0xffffffd8
   14168:	ldr	r3, [fp, #-16]
   1416c:	add	r2, r3, #1
   14170:	ldr	r3, [fp, #-68]	; 0xffffffbc
   14174:	cmp	r2, r3
   14178:	bcs	14258 <__assert_fail@plt+0x3390>
   1417c:	ldrb	r3, [fp, #-35]	; 0xffffffdd
   14180:	cmp	r3, #0
   14184:	beq	14204 <__assert_fail@plt+0x333c>
   14188:	ldrb	r3, [fp, #-41]	; 0xffffffd7
   1418c:	eor	r3, r3, #1
   14190:	uxtb	r3, r3
   14194:	cmp	r3, #0
   14198:	beq	14204 <__assert_fail@plt+0x333c>
   1419c:	ldr	r2, [fp, #-20]	; 0xffffffec
   141a0:	ldr	r3, [fp, #-92]	; 0xffffffa4
   141a4:	cmp	r2, r3
   141a8:	bcs	141c0 <__assert_fail@plt+0x32f8>
   141ac:	ldr	r2, [fp, #-88]	; 0xffffffa8
   141b0:	ldr	r3, [fp, #-20]	; 0xffffffec
   141b4:	add	r3, r2, r3
   141b8:	mov	r2, #39	; 0x27
   141bc:	strb	r2, [r3]
   141c0:	ldr	r3, [fp, #-20]	; 0xffffffec
   141c4:	add	r3, r3, #1
   141c8:	str	r3, [fp, #-20]	; 0xffffffec
   141cc:	ldr	r2, [fp, #-20]	; 0xffffffec
   141d0:	ldr	r3, [fp, #-92]	; 0xffffffa4
   141d4:	cmp	r2, r3
   141d8:	bcs	141f0 <__assert_fail@plt+0x3328>
   141dc:	ldr	r2, [fp, #-88]	; 0xffffffa8
   141e0:	ldr	r3, [fp, #-20]	; 0xffffffec
   141e4:	add	r3, r2, r3
   141e8:	mov	r2, #39	; 0x27
   141ec:	strb	r2, [r3]
   141f0:	ldr	r3, [fp, #-20]	; 0xffffffec
   141f4:	add	r3, r3, #1
   141f8:	str	r3, [fp, #-20]	; 0xffffffec
   141fc:	mov	r3, #0
   14200:	strb	r3, [fp, #-35]	; 0xffffffdd
   14204:	ldr	r2, [fp, #-20]	; 0xffffffec
   14208:	ldr	r3, [fp, #-92]	; 0xffffffa4
   1420c:	cmp	r2, r3
   14210:	bcs	14228 <__assert_fail@plt+0x3360>
   14214:	ldr	r2, [fp, #-88]	; 0xffffffa8
   14218:	ldr	r3, [fp, #-20]	; 0xffffffec
   1421c:	add	r3, r2, r3
   14220:	ldrb	r2, [fp, #-38]	; 0xffffffda
   14224:	strb	r2, [r3]
   14228:	ldr	r3, [fp, #-20]	; 0xffffffec
   1422c:	add	r3, r3, #1
   14230:	str	r3, [fp, #-20]	; 0xffffffec
   14234:	ldr	r3, [fp, #-16]
   14238:	add	r3, r3, #1
   1423c:	str	r3, [fp, #-16]
   14240:	ldr	r2, [fp, #-96]	; 0xffffffa0
   14244:	ldr	r3, [fp, #-16]
   14248:	add	r3, r2, r3
   1424c:	ldrb	r3, [r3]
   14250:	strb	r3, [fp, #-38]	; 0xffffffda
   14254:	b	13f5c <__assert_fail@plt+0x3094>
   14258:	nop			; (mov r0, r0)
   1425c:	b	14428 <__assert_fail@plt+0x3560>
   14260:	nop			; (mov r0, r0)
   14264:	b	1428c <__assert_fail@plt+0x33c4>
   14268:	nop			; (mov r0, r0)
   1426c:	b	1428c <__assert_fail@plt+0x33c4>
   14270:	nop			; (mov r0, r0)
   14274:	b	1428c <__assert_fail@plt+0x33c4>
   14278:	nop			; (mov r0, r0)
   1427c:	b	1428c <__assert_fail@plt+0x33c4>
   14280:	nop			; (mov r0, r0)
   14284:	b	1428c <__assert_fail@plt+0x33c4>
   14288:	nop			; (mov r0, r0)
   1428c:	ldrb	r3, [fp, #-33]	; 0xffffffdf
   14290:	eor	r3, r3, #1
   14294:	uxtb	r3, r3
   14298:	cmp	r3, #0
   1429c:	bne	142ac <__assert_fail@plt+0x33e4>
   142a0:	ldr	r3, [fp, #4]
   142a4:	cmp	r3, #2
   142a8:	bne	142c0 <__assert_fail@plt+0x33f8>
   142ac:	ldrb	r3, [fp, #-34]	; 0xffffffde
   142b0:	eor	r3, r3, #1
   142b4:	uxtb	r3, r3
   142b8:	cmp	r3, #0
   142bc:	bne	14300 <__assert_fail@plt+0x3438>
   142c0:	ldr	r3, [fp, #12]
   142c4:	cmp	r3, #0
   142c8:	beq	14300 <__assert_fail@plt+0x3438>
   142cc:	ldrb	r3, [fp, #-38]	; 0xffffffda
   142d0:	lsr	r3, r3, #5
   142d4:	uxtb	r3, r3
   142d8:	lsl	r3, r3, #2
   142dc:	ldr	r2, [fp, #12]
   142e0:	add	r3, r2, r3
   142e4:	ldr	r2, [r3]
   142e8:	ldrb	r3, [fp, #-38]	; 0xffffffda
   142ec:	and	r3, r3, #31
   142f0:	lsr	r3, r2, r3
   142f4:	and	r3, r3, #1
   142f8:	cmp	r3, #0
   142fc:	bne	14314 <__assert_fail@plt+0x344c>
   14300:	ldrb	r3, [fp, #-40]	; 0xffffffd8
   14304:	eor	r3, r3, #1
   14308:	uxtb	r3, r3
   1430c:	cmp	r3, #0
   14310:	bne	14424 <__assert_fail@plt+0x355c>
   14314:	ldrb	r3, [fp, #-34]	; 0xffffffde
   14318:	cmp	r3, #0
   1431c:	bne	146fc <__assert_fail@plt+0x3834>
   14320:	mov	r3, #1
   14324:	strb	r3, [fp, #-41]	; 0xffffffd7
   14328:	ldr	r3, [fp, #4]
   1432c:	cmp	r3, #2
   14330:	bne	143e0 <__assert_fail@plt+0x3518>
   14334:	ldrb	r3, [fp, #-35]	; 0xffffffdd
   14338:	eor	r3, r3, #1
   1433c:	uxtb	r3, r3
   14340:	cmp	r3, #0
   14344:	beq	143e0 <__assert_fail@plt+0x3518>
   14348:	ldr	r2, [fp, #-20]	; 0xffffffec
   1434c:	ldr	r3, [fp, #-92]	; 0xffffffa4
   14350:	cmp	r2, r3
   14354:	bcs	1436c <__assert_fail@plt+0x34a4>
   14358:	ldr	r2, [fp, #-88]	; 0xffffffa8
   1435c:	ldr	r3, [fp, #-20]	; 0xffffffec
   14360:	add	r3, r2, r3
   14364:	mov	r2, #39	; 0x27
   14368:	strb	r2, [r3]
   1436c:	ldr	r3, [fp, #-20]	; 0xffffffec
   14370:	add	r3, r3, #1
   14374:	str	r3, [fp, #-20]	; 0xffffffec
   14378:	ldr	r2, [fp, #-20]	; 0xffffffec
   1437c:	ldr	r3, [fp, #-92]	; 0xffffffa4
   14380:	cmp	r2, r3
   14384:	bcs	1439c <__assert_fail@plt+0x34d4>
   14388:	ldr	r2, [fp, #-88]	; 0xffffffa8
   1438c:	ldr	r3, [fp, #-20]	; 0xffffffec
   14390:	add	r3, r2, r3
   14394:	mov	r2, #36	; 0x24
   14398:	strb	r2, [r3]
   1439c:	ldr	r3, [fp, #-20]	; 0xffffffec
   143a0:	add	r3, r3, #1
   143a4:	str	r3, [fp, #-20]	; 0xffffffec
   143a8:	ldr	r2, [fp, #-20]	; 0xffffffec
   143ac:	ldr	r3, [fp, #-92]	; 0xffffffa4
   143b0:	cmp	r2, r3
   143b4:	bcs	143cc <__assert_fail@plt+0x3504>
   143b8:	ldr	r2, [fp, #-88]	; 0xffffffa8
   143bc:	ldr	r3, [fp, #-20]	; 0xffffffec
   143c0:	add	r3, r2, r3
   143c4:	mov	r2, #39	; 0x27
   143c8:	strb	r2, [r3]
   143cc:	ldr	r3, [fp, #-20]	; 0xffffffec
   143d0:	add	r3, r3, #1
   143d4:	str	r3, [fp, #-20]	; 0xffffffec
   143d8:	mov	r3, #1
   143dc:	strb	r3, [fp, #-35]	; 0xffffffdd
   143e0:	ldr	r2, [fp, #-20]	; 0xffffffec
   143e4:	ldr	r3, [fp, #-92]	; 0xffffffa4
   143e8:	cmp	r2, r3
   143ec:	bcs	14404 <__assert_fail@plt+0x353c>
   143f0:	ldr	r2, [fp, #-88]	; 0xffffffa8
   143f4:	ldr	r3, [fp, #-20]	; 0xffffffec
   143f8:	add	r3, r2, r3
   143fc:	mov	r2, #92	; 0x5c
   14400:	strb	r2, [r3]
   14404:	ldr	r3, [fp, #-20]	; 0xffffffec
   14408:	add	r3, r3, #1
   1440c:	str	r3, [fp, #-20]	; 0xffffffec
   14410:	b	14428 <__assert_fail@plt+0x3560>
   14414:	nop			; (mov r0, r0)
   14418:	b	14428 <__assert_fail@plt+0x3560>
   1441c:	nop			; (mov r0, r0)
   14420:	b	14428 <__assert_fail@plt+0x3560>
   14424:	nop			; (mov r0, r0)
   14428:	ldrb	r3, [fp, #-35]	; 0xffffffdd
   1442c:	cmp	r3, #0
   14430:	beq	144b0 <__assert_fail@plt+0x35e8>
   14434:	ldrb	r3, [fp, #-41]	; 0xffffffd7
   14438:	eor	r3, r3, #1
   1443c:	uxtb	r3, r3
   14440:	cmp	r3, #0
   14444:	beq	144b0 <__assert_fail@plt+0x35e8>
   14448:	ldr	r2, [fp, #-20]	; 0xffffffec
   1444c:	ldr	r3, [fp, #-92]	; 0xffffffa4
   14450:	cmp	r2, r3
   14454:	bcs	1446c <__assert_fail@plt+0x35a4>
   14458:	ldr	r2, [fp, #-88]	; 0xffffffa8
   1445c:	ldr	r3, [fp, #-20]	; 0xffffffec
   14460:	add	r3, r2, r3
   14464:	mov	r2, #39	; 0x27
   14468:	strb	r2, [r3]
   1446c:	ldr	r3, [fp, #-20]	; 0xffffffec
   14470:	add	r3, r3, #1
   14474:	str	r3, [fp, #-20]	; 0xffffffec
   14478:	ldr	r2, [fp, #-20]	; 0xffffffec
   1447c:	ldr	r3, [fp, #-92]	; 0xffffffa4
   14480:	cmp	r2, r3
   14484:	bcs	1449c <__assert_fail@plt+0x35d4>
   14488:	ldr	r2, [fp, #-88]	; 0xffffffa8
   1448c:	ldr	r3, [fp, #-20]	; 0xffffffec
   14490:	add	r3, r2, r3
   14494:	mov	r2, #39	; 0x27
   14498:	strb	r2, [r3]
   1449c:	ldr	r3, [fp, #-20]	; 0xffffffec
   144a0:	add	r3, r3, #1
   144a4:	str	r3, [fp, #-20]	; 0xffffffec
   144a8:	mov	r3, #0
   144ac:	strb	r3, [fp, #-35]	; 0xffffffdd
   144b0:	ldr	r2, [fp, #-20]	; 0xffffffec
   144b4:	ldr	r3, [fp, #-92]	; 0xffffffa4
   144b8:	cmp	r2, r3
   144bc:	bcs	144d4 <__assert_fail@plt+0x360c>
   144c0:	ldr	r2, [fp, #-88]	; 0xffffffa8
   144c4:	ldr	r3, [fp, #-20]	; 0xffffffec
   144c8:	add	r3, r2, r3
   144cc:	ldrb	r2, [fp, #-38]	; 0xffffffda
   144d0:	strb	r2, [r3]
   144d4:	ldr	r3, [fp, #-20]	; 0xffffffec
   144d8:	add	r3, r3, #1
   144dc:	str	r3, [fp, #-20]	; 0xffffffec
   144e0:	ldrb	r3, [fp, #-42]	; 0xffffffd6
   144e4:	eor	r3, r3, #1
   144e8:	uxtb	r3, r3
   144ec:	cmp	r3, #0
   144f0:	beq	144fc <__assert_fail@plt+0x3634>
   144f4:	mov	r3, #0
   144f8:	strb	r3, [fp, #-37]	; 0xffffffdb
   144fc:	ldr	r3, [fp, #-16]
   14500:	add	r3, r3, #1
   14504:	str	r3, [fp, #-16]
   14508:	ldr	r3, [fp, #-100]	; 0xffffff9c
   1450c:	cmn	r3, #1
   14510:	bne	14538 <__assert_fail@plt+0x3670>
   14514:	ldr	r2, [fp, #-96]	; 0xffffffa0
   14518:	ldr	r3, [fp, #-16]
   1451c:	add	r3, r2, r3
   14520:	ldrb	r3, [r3]
   14524:	cmp	r3, #0
   14528:	movne	r3, #1
   1452c:	moveq	r3, #0
   14530:	uxtb	r3, r3
   14534:	b	14550 <__assert_fail@plt+0x3688>
   14538:	ldr	r2, [fp, #-16]
   1453c:	ldr	r3, [fp, #-100]	; 0xffffff9c
   14540:	cmp	r2, r3
   14544:	movne	r3, #1
   14548:	moveq	r3, #0
   1454c:	uxtb	r3, r3
   14550:	cmp	r3, #0
   14554:	bne	1337c <__assert_fail@plt+0x24b4>
   14558:	ldr	r3, [fp, #-20]	; 0xffffffec
   1455c:	cmp	r3, #0
   14560:	bne	1457c <__assert_fail@plt+0x36b4>
   14564:	ldr	r3, [fp, #4]
   14568:	cmp	r3, #2
   1456c:	bne	1457c <__assert_fail@plt+0x36b4>
   14570:	ldrb	r3, [fp, #-34]	; 0xffffffde
   14574:	cmp	r3, #0
   14578:	bne	14704 <__assert_fail@plt+0x383c>
   1457c:	ldr	r3, [fp, #4]
   14580:	cmp	r3, #2
   14584:	bne	14624 <__assert_fail@plt+0x375c>
   14588:	ldrb	r3, [fp, #-34]	; 0xffffffde
   1458c:	eor	r3, r3, #1
   14590:	uxtb	r3, r3
   14594:	cmp	r3, #0
   14598:	beq	14624 <__assert_fail@plt+0x375c>
   1459c:	ldrb	r3, [fp, #-36]	; 0xffffffdc
   145a0:	cmp	r3, #0
   145a4:	beq	14624 <__assert_fail@plt+0x375c>
   145a8:	ldrb	r3, [fp, #-37]	; 0xffffffdb
   145ac:	cmp	r3, #0
   145b0:	beq	145f8 <__assert_fail@plt+0x3730>
   145b4:	ldr	r3, [fp, #20]
   145b8:	str	r3, [sp, #16]
   145bc:	ldr	r3, [fp, #16]
   145c0:	str	r3, [sp, #12]
   145c4:	ldr	r3, [fp, #12]
   145c8:	str	r3, [sp, #8]
   145cc:	ldr	r3, [fp, #8]
   145d0:	str	r3, [sp, #4]
   145d4:	mov	r3, #5
   145d8:	str	r3, [sp]
   145dc:	ldr	r3, [fp, #-100]	; 0xffffff9c
   145e0:	ldr	r2, [fp, #-96]	; 0xffffffa0
   145e4:	ldr	r1, [fp, #-24]	; 0xffffffe8
   145e8:	ldr	r0, [fp, #-88]	; 0xffffffa8
   145ec:	bl	130cc <__assert_fail@plt+0x2204>
   145f0:	mov	r3, r0
   145f4:	b	1476c <__assert_fail@plt+0x38a4>
   145f8:	ldr	r3, [fp, #-92]	; 0xffffffa4
   145fc:	cmp	r3, #0
   14600:	bne	14624 <__assert_fail@plt+0x375c>
   14604:	ldr	r3, [fp, #-24]	; 0xffffffe8
   14608:	cmp	r3, #0
   1460c:	beq	14624 <__assert_fail@plt+0x375c>
   14610:	ldr	r3, [fp, #-24]	; 0xffffffe8
   14614:	str	r3, [fp, #-92]	; 0xffffffa4
   14618:	mov	r3, #0
   1461c:	str	r3, [fp, #-20]	; 0xffffffec
   14620:	b	13158 <__assert_fail@plt+0x2290>
   14624:	ldr	r3, [fp, #-28]	; 0xffffffe4
   14628:	cmp	r3, #0
   1462c:	beq	14698 <__assert_fail@plt+0x37d0>
   14630:	ldrb	r3, [fp, #-34]	; 0xffffffde
   14634:	eor	r3, r3, #1
   14638:	uxtb	r3, r3
   1463c:	cmp	r3, #0
   14640:	beq	14698 <__assert_fail@plt+0x37d0>
   14644:	b	14688 <__assert_fail@plt+0x37c0>
   14648:	ldr	r2, [fp, #-20]	; 0xffffffec
   1464c:	ldr	r3, [fp, #-92]	; 0xffffffa4
   14650:	cmp	r2, r3
   14654:	bcs	14670 <__assert_fail@plt+0x37a8>
   14658:	ldr	r2, [fp, #-88]	; 0xffffffa8
   1465c:	ldr	r3, [fp, #-20]	; 0xffffffec
   14660:	add	r3, r2, r3
   14664:	ldr	r2, [fp, #-28]	; 0xffffffe4
   14668:	ldrb	r2, [r2]
   1466c:	strb	r2, [r3]
   14670:	ldr	r3, [fp, #-20]	; 0xffffffec
   14674:	add	r3, r3, #1
   14678:	str	r3, [fp, #-20]	; 0xffffffec
   1467c:	ldr	r3, [fp, #-28]	; 0xffffffe4
   14680:	add	r3, r3, #1
   14684:	str	r3, [fp, #-28]	; 0xffffffe4
   14688:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1468c:	ldrb	r3, [r3]
   14690:	cmp	r3, #0
   14694:	bne	14648 <__assert_fail@plt+0x3780>
   14698:	ldr	r2, [fp, #-20]	; 0xffffffec
   1469c:	ldr	r3, [fp, #-92]	; 0xffffffa4
   146a0:	cmp	r2, r3
   146a4:	bcs	146bc <__assert_fail@plt+0x37f4>
   146a8:	ldr	r2, [fp, #-88]	; 0xffffffa8
   146ac:	ldr	r3, [fp, #-20]	; 0xffffffec
   146b0:	add	r3, r2, r3
   146b4:	mov	r2, #0
   146b8:	strb	r2, [r3]
   146bc:	ldr	r3, [fp, #-20]	; 0xffffffec
   146c0:	b	1476c <__assert_fail@plt+0x38a4>
   146c4:	nop			; (mov r0, r0)
   146c8:	b	14708 <__assert_fail@plt+0x3840>
   146cc:	nop			; (mov r0, r0)
   146d0:	b	14708 <__assert_fail@plt+0x3840>
   146d4:	nop			; (mov r0, r0)
   146d8:	b	14708 <__assert_fail@plt+0x3840>
   146dc:	nop			; (mov r0, r0)
   146e0:	b	14708 <__assert_fail@plt+0x3840>
   146e4:	nop			; (mov r0, r0)
   146e8:	b	14708 <__assert_fail@plt+0x3840>
   146ec:	nop			; (mov r0, r0)
   146f0:	b	14708 <__assert_fail@plt+0x3840>
   146f4:	nop			; (mov r0, r0)
   146f8:	b	14708 <__assert_fail@plt+0x3840>
   146fc:	nop			; (mov r0, r0)
   14700:	b	14708 <__assert_fail@plt+0x3840>
   14704:	nop			; (mov r0, r0)
   14708:	ldr	r3, [fp, #4]
   1470c:	cmp	r3, #2
   14710:	bne	14728 <__assert_fail@plt+0x3860>
   14714:	ldrb	r3, [fp, #-33]	; 0xffffffdf
   14718:	cmp	r3, #0
   1471c:	beq	14728 <__assert_fail@plt+0x3860>
   14720:	mov	r3, #4
   14724:	str	r3, [fp, #4]
   14728:	ldr	r3, [fp, #8]
   1472c:	bic	r3, r3, #2
   14730:	ldr	r2, [fp, #20]
   14734:	str	r2, [sp, #16]
   14738:	ldr	r2, [fp, #16]
   1473c:	str	r2, [sp, #12]
   14740:	mov	r2, #0
   14744:	str	r2, [sp, #8]
   14748:	str	r3, [sp, #4]
   1474c:	ldr	r3, [fp, #4]
   14750:	str	r3, [sp]
   14754:	ldr	r3, [fp, #-100]	; 0xffffff9c
   14758:	ldr	r2, [fp, #-96]	; 0xffffffa0
   1475c:	ldr	r1, [fp, #-92]	; 0xffffffa4
   14760:	ldr	r0, [fp, #-88]	; 0xffffffa8
   14764:	bl	130cc <__assert_fail@plt+0x2204>
   14768:	mov	r3, r0
   1476c:	mov	r0, r3
   14770:	sub	sp, fp, #8
   14774:	pop	{r4, fp, pc}
   14778:	push	{fp, lr}
   1477c:	add	fp, sp, #4
   14780:	sub	sp, sp, #56	; 0x38
   14784:	str	r0, [fp, #-24]	; 0xffffffe8
   14788:	str	r1, [fp, #-28]	; 0xffffffe4
   1478c:	str	r2, [fp, #-32]	; 0xffffffe0
   14790:	str	r3, [fp, #-36]	; 0xffffffdc
   14794:	ldr	r3, [fp, #4]
   14798:	cmp	r3, #0
   1479c:	beq	147a8 <__assert_fail@plt+0x38e0>
   147a0:	ldr	r3, [fp, #4]
   147a4:	b	147ac <__assert_fail@plt+0x38e4>
   147a8:	ldr	r3, [pc, #132]	; 14834 <__assert_fail@plt+0x396c>
   147ac:	str	r3, [fp, #-8]
   147b0:	bl	10e2c <__errno_location@plt>
   147b4:	mov	r3, r0
   147b8:	ldr	r3, [r3]
   147bc:	str	r3, [fp, #-12]
   147c0:	ldr	r3, [fp, #-8]
   147c4:	ldr	r3, [r3]
   147c8:	ldr	r2, [fp, #-8]
   147cc:	ldr	r2, [r2, #4]
   147d0:	ldr	r1, [fp, #-8]
   147d4:	add	r1, r1, #8
   147d8:	ldr	r0, [fp, #-8]
   147dc:	ldr	r0, [r0, #40]	; 0x28
   147e0:	ldr	ip, [fp, #-8]
   147e4:	ldr	ip, [ip, #44]	; 0x2c
   147e8:	str	ip, [sp, #16]
   147ec:	str	r0, [sp, #12]
   147f0:	str	r1, [sp, #8]
   147f4:	str	r2, [sp, #4]
   147f8:	str	r3, [sp]
   147fc:	ldr	r3, [fp, #-36]	; 0xffffffdc
   14800:	ldr	r2, [fp, #-32]	; 0xffffffe0
   14804:	ldr	r1, [fp, #-28]	; 0xffffffe4
   14808:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1480c:	bl	130cc <__assert_fail@plt+0x2204>
   14810:	str	r0, [fp, #-16]
   14814:	bl	10e2c <__errno_location@plt>
   14818:	mov	r2, r0
   1481c:	ldr	r3, [fp, #-12]
   14820:	str	r3, [r2]
   14824:	ldr	r3, [fp, #-16]
   14828:	mov	r0, r3
   1482c:	sub	sp, fp, #4
   14830:	pop	{fp, pc}
   14834:	andeq	r9, r2, r4, ror r1
   14838:	push	{fp, lr}
   1483c:	add	fp, sp, #4
   14840:	sub	sp, sp, #16
   14844:	str	r0, [fp, #-8]
   14848:	str	r1, [fp, #-12]
   1484c:	str	r2, [fp, #-16]
   14850:	ldr	r3, [fp, #-16]
   14854:	mov	r2, #0
   14858:	ldr	r1, [fp, #-12]
   1485c:	ldr	r0, [fp, #-8]
   14860:	bl	14874 <__assert_fail@plt+0x39ac>
   14864:	mov	r3, r0
   14868:	mov	r0, r3
   1486c:	sub	sp, fp, #4
   14870:	pop	{fp, pc}
   14874:	push	{fp, lr}
   14878:	add	fp, sp, #4
   1487c:	sub	sp, sp, #64	; 0x40
   14880:	str	r0, [fp, #-32]	; 0xffffffe0
   14884:	str	r1, [fp, #-36]	; 0xffffffdc
   14888:	str	r2, [fp, #-40]	; 0xffffffd8
   1488c:	str	r3, [fp, #-44]	; 0xffffffd4
   14890:	ldr	r3, [fp, #-44]	; 0xffffffd4
   14894:	cmp	r3, #0
   14898:	beq	148a4 <__assert_fail@plt+0x39dc>
   1489c:	ldr	r3, [fp, #-44]	; 0xffffffd4
   148a0:	b	148a8 <__assert_fail@plt+0x39e0>
   148a4:	ldr	r3, [pc, #292]	; 149d0 <__assert_fail@plt+0x3b08>
   148a8:	str	r3, [fp, #-8]
   148ac:	bl	10e2c <__errno_location@plt>
   148b0:	mov	r3, r0
   148b4:	ldr	r3, [r3]
   148b8:	str	r3, [fp, #-12]
   148bc:	ldr	r3, [fp, #-8]
   148c0:	ldr	r3, [r3, #4]
   148c4:	ldr	r2, [fp, #-40]	; 0xffffffd8
   148c8:	cmp	r2, #0
   148cc:	moveq	r2, #1
   148d0:	movne	r2, #0
   148d4:	uxtb	r2, r2
   148d8:	orr	r3, r3, r2
   148dc:	str	r3, [fp, #-16]
   148e0:	ldr	r3, [fp, #-8]
   148e4:	ldr	r3, [r3]
   148e8:	ldr	r2, [fp, #-8]
   148ec:	add	r2, r2, #8
   148f0:	ldr	r1, [fp, #-8]
   148f4:	ldr	r1, [r1, #40]	; 0x28
   148f8:	ldr	r0, [fp, #-8]
   148fc:	ldr	r0, [r0, #44]	; 0x2c
   14900:	str	r0, [sp, #16]
   14904:	str	r1, [sp, #12]
   14908:	str	r2, [sp, #8]
   1490c:	ldr	r2, [fp, #-16]
   14910:	str	r2, [sp, #4]
   14914:	str	r3, [sp]
   14918:	ldr	r3, [fp, #-36]	; 0xffffffdc
   1491c:	ldr	r2, [fp, #-32]	; 0xffffffe0
   14920:	mov	r1, #0
   14924:	mov	r0, #0
   14928:	bl	130cc <__assert_fail@plt+0x2204>
   1492c:	mov	r3, r0
   14930:	add	r3, r3, #1
   14934:	str	r3, [fp, #-20]	; 0xffffffec
   14938:	ldr	r0, [fp, #-20]	; 0xffffffec
   1493c:	bl	1605c <__assert_fail@plt+0x5194>
   14940:	mov	r3, r0
   14944:	str	r3, [fp, #-24]	; 0xffffffe8
   14948:	ldr	r3, [fp, #-8]
   1494c:	ldr	r3, [r3]
   14950:	ldr	r2, [fp, #-8]
   14954:	add	r2, r2, #8
   14958:	ldr	r1, [fp, #-8]
   1495c:	ldr	r1, [r1, #40]	; 0x28
   14960:	ldr	r0, [fp, #-8]
   14964:	ldr	r0, [r0, #44]	; 0x2c
   14968:	str	r0, [sp, #16]
   1496c:	str	r1, [sp, #12]
   14970:	str	r2, [sp, #8]
   14974:	ldr	r2, [fp, #-16]
   14978:	str	r2, [sp, #4]
   1497c:	str	r3, [sp]
   14980:	ldr	r3, [fp, #-36]	; 0xffffffdc
   14984:	ldr	r2, [fp, #-32]	; 0xffffffe0
   14988:	ldr	r1, [fp, #-20]	; 0xffffffec
   1498c:	ldr	r0, [fp, #-24]	; 0xffffffe8
   14990:	bl	130cc <__assert_fail@plt+0x2204>
   14994:	bl	10e2c <__errno_location@plt>
   14998:	mov	r2, r0
   1499c:	ldr	r3, [fp, #-12]
   149a0:	str	r3, [r2]
   149a4:	ldr	r3, [fp, #-40]	; 0xffffffd8
   149a8:	cmp	r3, #0
   149ac:	beq	149c0 <__assert_fail@plt+0x3af8>
   149b0:	ldr	r3, [fp, #-20]	; 0xffffffec
   149b4:	sub	r2, r3, #1
   149b8:	ldr	r3, [fp, #-40]	; 0xffffffd8
   149bc:	str	r2, [r3]
   149c0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   149c4:	mov	r0, r3
   149c8:	sub	sp, fp, #4
   149cc:	pop	{fp, pc}
   149d0:	andeq	r9, r2, r4, ror r1
   149d4:	push	{fp, lr}
   149d8:	add	fp, sp, #4
   149dc:	sub	sp, sp, #8
   149e0:	ldr	r3, [pc, #196]	; 14aac <__assert_fail@plt+0x3be4>
   149e4:	ldr	r3, [r3]
   149e8:	str	r3, [fp, #-12]
   149ec:	mov	r3, #1
   149f0:	str	r3, [fp, #-8]
   149f4:	b	14a20 <__assert_fail@plt+0x3b58>
   149f8:	ldr	r3, [fp, #-8]
   149fc:	lsl	r3, r3, #3
   14a00:	ldr	r2, [fp, #-12]
   14a04:	add	r3, r2, r3
   14a08:	ldr	r3, [r3, #4]
   14a0c:	mov	r0, r3
   14a10:	bl	125e8 <__assert_fail@plt+0x1720>
   14a14:	ldr	r3, [fp, #-8]
   14a18:	add	r3, r3, #1
   14a1c:	str	r3, [fp, #-8]
   14a20:	ldr	r3, [pc, #136]	; 14ab0 <__assert_fail@plt+0x3be8>
   14a24:	ldr	r3, [r3]
   14a28:	ldr	r2, [fp, #-8]
   14a2c:	cmp	r2, r3
   14a30:	blt	149f8 <__assert_fail@plt+0x3b30>
   14a34:	ldr	r3, [fp, #-12]
   14a38:	ldr	r3, [r3, #4]
   14a3c:	ldr	r2, [pc, #112]	; 14ab4 <__assert_fail@plt+0x3bec>
   14a40:	cmp	r3, r2
   14a44:	beq	14a70 <__assert_fail@plt+0x3ba8>
   14a48:	ldr	r3, [fp, #-12]
   14a4c:	ldr	r3, [r3, #4]
   14a50:	mov	r0, r3
   14a54:	bl	125e8 <__assert_fail@plt+0x1720>
   14a58:	ldr	r3, [pc, #88]	; 14ab8 <__assert_fail@plt+0x3bf0>
   14a5c:	mov	r2, #256	; 0x100
   14a60:	str	r2, [r3]
   14a64:	ldr	r3, [pc, #76]	; 14ab8 <__assert_fail@plt+0x3bf0>
   14a68:	ldr	r2, [pc, #68]	; 14ab4 <__assert_fail@plt+0x3bec>
   14a6c:	str	r2, [r3, #4]
   14a70:	ldr	r3, [fp, #-12]
   14a74:	ldr	r2, [pc, #60]	; 14ab8 <__assert_fail@plt+0x3bf0>
   14a78:	cmp	r3, r2
   14a7c:	beq	14a94 <__assert_fail@plt+0x3bcc>
   14a80:	ldr	r0, [fp, #-12]
   14a84:	bl	125e8 <__assert_fail@plt+0x1720>
   14a88:	ldr	r3, [pc, #28]	; 14aac <__assert_fail@plt+0x3be4>
   14a8c:	ldr	r2, [pc, #36]	; 14ab8 <__assert_fail@plt+0x3bf0>
   14a90:	str	r2, [r3]
   14a94:	ldr	r3, [pc, #20]	; 14ab0 <__assert_fail@plt+0x3be8>
   14a98:	mov	r2, #1
   14a9c:	str	r2, [r3]
   14aa0:	nop			; (mov r0, r0)
   14aa4:	sub	sp, fp, #4
   14aa8:	pop	{fp, pc}
   14aac:	strdeq	r9, [r2], -ip
   14ab0:	strdeq	r9, [r2], -r0
   14ab4:	andeq	r9, r2, r4, lsr #3
   14ab8:	strdeq	r9, [r2], -r4
   14abc:	push	{r4, fp, lr}
   14ac0:	add	fp, sp, #8
   14ac4:	sub	sp, sp, #84	; 0x54
   14ac8:	str	r0, [fp, #-56]	; 0xffffffc8
   14acc:	str	r1, [fp, #-60]	; 0xffffffc4
   14ad0:	str	r2, [fp, #-64]	; 0xffffffc0
   14ad4:	str	r3, [fp, #-68]	; 0xffffffbc
   14ad8:	bl	10e2c <__errno_location@plt>
   14adc:	mov	r3, r0
   14ae0:	ldr	r3, [r3]
   14ae4:	str	r3, [fp, #-24]	; 0xffffffe8
   14ae8:	ldr	r3, [pc, #640]	; 14d70 <__assert_fail@plt+0x3ea8>
   14aec:	ldr	r3, [r3]
   14af0:	str	r3, [fp, #-16]
   14af4:	mvn	r3, #-2147483648	; 0x80000000
   14af8:	str	r3, [fp, #-28]	; 0xffffffe4
   14afc:	ldr	r3, [fp, #-56]	; 0xffffffc8
   14b00:	cmp	r3, #0
   14b04:	blt	14b18 <__assert_fail@plt+0x3c50>
   14b08:	ldr	r2, [fp, #-56]	; 0xffffffc8
   14b0c:	ldr	r3, [fp, #-28]	; 0xffffffe4
   14b10:	cmp	r2, r3
   14b14:	blt	14b1c <__assert_fail@plt+0x3c54>
   14b18:	bl	10eb0 <abort@plt>
   14b1c:	ldr	r3, [pc, #592]	; 14d74 <__assert_fail@plt+0x3eac>
   14b20:	ldr	r2, [r3]
   14b24:	ldr	r3, [fp, #-56]	; 0xffffffc8
   14b28:	cmp	r2, r3
   14b2c:	bgt	14c00 <__assert_fail@plt+0x3d38>
   14b30:	ldr	r3, [fp, #-16]
   14b34:	ldr	r2, [pc, #572]	; 14d78 <__assert_fail@plt+0x3eb0>
   14b38:	cmp	r3, r2
   14b3c:	moveq	r3, #1
   14b40:	movne	r3, #0
   14b44:	strb	r3, [fp, #-29]	; 0xffffffe3
   14b48:	ldr	r3, [pc, #548]	; 14d74 <__assert_fail@plt+0x3eac>
   14b4c:	ldr	r3, [r3]
   14b50:	str	r3, [fp, #-48]	; 0xffffffd0
   14b54:	ldrb	r3, [fp, #-29]	; 0xffffffe3
   14b58:	cmp	r3, #0
   14b5c:	beq	14b68 <__assert_fail@plt+0x3ca0>
   14b60:	mov	r0, #0
   14b64:	b	14b6c <__assert_fail@plt+0x3ca4>
   14b68:	ldr	r0, [fp, #-16]
   14b6c:	ldr	r3, [pc, #512]	; 14d74 <__assert_fail@plt+0x3eac>
   14b70:	ldr	r3, [r3]
   14b74:	ldr	r2, [fp, #-56]	; 0xffffffc8
   14b78:	sub	r3, r2, r3
   14b7c:	add	r2, r3, #1
   14b80:	sub	r1, fp, #48	; 0x30
   14b84:	mov	r3, #8
   14b88:	str	r3, [sp]
   14b8c:	ldr	r3, [fp, #-28]	; 0xffffffe4
   14b90:	bl	1637c <__assert_fail@plt+0x54b4>
   14b94:	str	r0, [fp, #-16]
   14b98:	ldr	r2, [pc, #464]	; 14d70 <__assert_fail@plt+0x3ea8>
   14b9c:	ldr	r3, [fp, #-16]
   14ba0:	str	r3, [r2]
   14ba4:	ldrb	r3, [fp, #-29]	; 0xffffffe3
   14ba8:	cmp	r3, #0
   14bac:	beq	14bc0 <__assert_fail@plt+0x3cf8>
   14bb0:	ldr	r3, [fp, #-16]
   14bb4:	ldr	r2, [pc, #444]	; 14d78 <__assert_fail@plt+0x3eb0>
   14bb8:	ldm	r2, {r0, r1}
   14bbc:	stm	r3, {r0, r1}
   14bc0:	ldr	r3, [pc, #428]	; 14d74 <__assert_fail@plt+0x3eac>
   14bc4:	ldr	r3, [r3]
   14bc8:	lsl	r3, r3, #3
   14bcc:	ldr	r2, [fp, #-16]
   14bd0:	add	r0, r2, r3
   14bd4:	ldr	r2, [fp, #-48]	; 0xffffffd0
   14bd8:	ldr	r3, [pc, #404]	; 14d74 <__assert_fail@plt+0x3eac>
   14bdc:	ldr	r3, [r3]
   14be0:	sub	r3, r2, r3
   14be4:	lsl	r3, r3, #3
   14be8:	mov	r2, r3
   14bec:	mov	r1, #0
   14bf0:	bl	10e44 <memset@plt>
   14bf4:	ldr	r3, [fp, #-48]	; 0xffffffd0
   14bf8:	ldr	r2, [pc, #372]	; 14d74 <__assert_fail@plt+0x3eac>
   14bfc:	str	r3, [r2]
   14c00:	ldr	r3, [fp, #-56]	; 0xffffffc8
   14c04:	lsl	r3, r3, #3
   14c08:	ldr	r2, [fp, #-16]
   14c0c:	add	r3, r2, r3
   14c10:	ldr	r3, [r3]
   14c14:	str	r3, [fp, #-36]	; 0xffffffdc
   14c18:	ldr	r3, [fp, #-56]	; 0xffffffc8
   14c1c:	lsl	r3, r3, #3
   14c20:	ldr	r2, [fp, #-16]
   14c24:	add	r3, r2, r3
   14c28:	ldr	r3, [r3, #4]
   14c2c:	str	r3, [fp, #-20]	; 0xffffffec
   14c30:	ldr	r3, [fp, #-68]	; 0xffffffbc
   14c34:	ldr	r3, [r3, #4]
   14c38:	orr	r3, r3, #1
   14c3c:	str	r3, [fp, #-40]	; 0xffffffd8
   14c40:	ldr	r3, [fp, #-68]	; 0xffffffbc
   14c44:	ldr	r3, [r3]
   14c48:	ldr	r2, [fp, #-68]	; 0xffffffbc
   14c4c:	add	r2, r2, #8
   14c50:	ldr	r1, [fp, #-68]	; 0xffffffbc
   14c54:	ldr	r1, [r1, #40]	; 0x28
   14c58:	ldr	r0, [fp, #-68]	; 0xffffffbc
   14c5c:	ldr	r0, [r0, #44]	; 0x2c
   14c60:	str	r0, [sp, #16]
   14c64:	str	r1, [sp, #12]
   14c68:	str	r2, [sp, #8]
   14c6c:	ldr	r2, [fp, #-40]	; 0xffffffd8
   14c70:	str	r2, [sp, #4]
   14c74:	str	r3, [sp]
   14c78:	ldr	r3, [fp, #-64]	; 0xffffffc0
   14c7c:	ldr	r2, [fp, #-60]	; 0xffffffc4
   14c80:	ldr	r1, [fp, #-36]	; 0xffffffdc
   14c84:	ldr	r0, [fp, #-20]	; 0xffffffec
   14c88:	bl	130cc <__assert_fail@plt+0x2204>
   14c8c:	str	r0, [fp, #-44]	; 0xffffffd4
   14c90:	ldr	r2, [fp, #-36]	; 0xffffffdc
   14c94:	ldr	r3, [fp, #-44]	; 0xffffffd4
   14c98:	cmp	r2, r3
   14c9c:	bhi	14d50 <__assert_fail@plt+0x3e88>
   14ca0:	ldr	r3, [fp, #-56]	; 0xffffffc8
   14ca4:	lsl	r3, r3, #3
   14ca8:	ldr	r2, [fp, #-16]
   14cac:	add	r3, r2, r3
   14cb0:	ldr	r2, [fp, #-44]	; 0xffffffd4
   14cb4:	add	r2, r2, #1
   14cb8:	str	r2, [fp, #-36]	; 0xffffffdc
   14cbc:	ldr	r2, [fp, #-36]	; 0xffffffdc
   14cc0:	str	r2, [r3]
   14cc4:	ldr	r3, [fp, #-20]	; 0xffffffec
   14cc8:	ldr	r2, [pc, #172]	; 14d7c <__assert_fail@plt+0x3eb4>
   14ccc:	cmp	r3, r2
   14cd0:	beq	14cdc <__assert_fail@plt+0x3e14>
   14cd4:	ldr	r0, [fp, #-20]	; 0xffffffec
   14cd8:	bl	125e8 <__assert_fail@plt+0x1720>
   14cdc:	ldr	r3, [fp, #-56]	; 0xffffffc8
   14ce0:	lsl	r3, r3, #3
   14ce4:	ldr	r2, [fp, #-16]
   14ce8:	add	r4, r2, r3
   14cec:	ldr	r0, [fp, #-36]	; 0xffffffdc
   14cf0:	bl	1605c <__assert_fail@plt+0x5194>
   14cf4:	mov	r3, r0
   14cf8:	str	r3, [fp, #-20]	; 0xffffffec
   14cfc:	ldr	r3, [fp, #-20]	; 0xffffffec
   14d00:	str	r3, [r4, #4]
   14d04:	ldr	r3, [fp, #-68]	; 0xffffffbc
   14d08:	ldr	r3, [r3]
   14d0c:	ldr	r2, [fp, #-68]	; 0xffffffbc
   14d10:	add	r2, r2, #8
   14d14:	ldr	r1, [fp, #-68]	; 0xffffffbc
   14d18:	ldr	r1, [r1, #40]	; 0x28
   14d1c:	ldr	r0, [fp, #-68]	; 0xffffffbc
   14d20:	ldr	r0, [r0, #44]	; 0x2c
   14d24:	str	r0, [sp, #16]
   14d28:	str	r1, [sp, #12]
   14d2c:	str	r2, [sp, #8]
   14d30:	ldr	r2, [fp, #-40]	; 0xffffffd8
   14d34:	str	r2, [sp, #4]
   14d38:	str	r3, [sp]
   14d3c:	ldr	r3, [fp, #-64]	; 0xffffffc0
   14d40:	ldr	r2, [fp, #-60]	; 0xffffffc4
   14d44:	ldr	r1, [fp, #-36]	; 0xffffffdc
   14d48:	ldr	r0, [fp, #-20]	; 0xffffffec
   14d4c:	bl	130cc <__assert_fail@plt+0x2204>
   14d50:	bl	10e2c <__errno_location@plt>
   14d54:	mov	r2, r0
   14d58:	ldr	r3, [fp, #-24]	; 0xffffffe8
   14d5c:	str	r3, [r2]
   14d60:	ldr	r3, [fp, #-20]	; 0xffffffec
   14d64:	mov	r0, r3
   14d68:	sub	sp, fp, #8
   14d6c:	pop	{r4, fp, pc}
   14d70:	strdeq	r9, [r2], -ip
   14d74:	strdeq	r9, [r2], -r0
   14d78:	strdeq	r9, [r2], -r4
   14d7c:	andeq	r9, r2, r4, lsr #3
   14d80:	push	{fp, lr}
   14d84:	add	fp, sp, #4
   14d88:	sub	sp, sp, #8
   14d8c:	str	r0, [fp, #-8]
   14d90:	str	r1, [fp, #-12]
   14d94:	ldr	r3, [pc, #28]	; 14db8 <__assert_fail@plt+0x3ef0>
   14d98:	mvn	r2, #0
   14d9c:	ldr	r1, [fp, #-12]
   14da0:	ldr	r0, [fp, #-8]
   14da4:	bl	14abc <__assert_fail@plt+0x3bf4>
   14da8:	mov	r3, r0
   14dac:	mov	r0, r3
   14db0:	sub	sp, fp, #4
   14db4:	pop	{fp, pc}
   14db8:	andeq	r9, r2, r4, ror r1
   14dbc:	push	{fp, lr}
   14dc0:	add	fp, sp, #4
   14dc4:	sub	sp, sp, #16
   14dc8:	str	r0, [fp, #-8]
   14dcc:	str	r1, [fp, #-12]
   14dd0:	str	r2, [fp, #-16]
   14dd4:	ldr	r3, [pc, #28]	; 14df8 <__assert_fail@plt+0x3f30>
   14dd8:	ldr	r2, [fp, #-16]
   14ddc:	ldr	r1, [fp, #-12]
   14de0:	ldr	r0, [fp, #-8]
   14de4:	bl	14abc <__assert_fail@plt+0x3bf4>
   14de8:	mov	r3, r0
   14dec:	mov	r0, r3
   14df0:	sub	sp, fp, #4
   14df4:	pop	{fp, pc}
   14df8:	andeq	r9, r2, r4, ror r1
   14dfc:	push	{fp, lr}
   14e00:	add	fp, sp, #4
   14e04:	sub	sp, sp, #8
   14e08:	str	r0, [fp, #-8]
   14e0c:	ldr	r1, [fp, #-8]
   14e10:	mov	r0, #0
   14e14:	bl	14d80 <__assert_fail@plt+0x3eb8>
   14e18:	mov	r3, r0
   14e1c:	mov	r0, r3
   14e20:	sub	sp, fp, #4
   14e24:	pop	{fp, pc}
   14e28:	push	{fp, lr}
   14e2c:	add	fp, sp, #4
   14e30:	sub	sp, sp, #8
   14e34:	str	r0, [fp, #-8]
   14e38:	str	r1, [fp, #-12]
   14e3c:	ldr	r2, [fp, #-12]
   14e40:	ldr	r1, [fp, #-8]
   14e44:	mov	r0, #0
   14e48:	bl	14dbc <__assert_fail@plt+0x3ef4>
   14e4c:	mov	r3, r0
   14e50:	mov	r0, r3
   14e54:	sub	sp, fp, #4
   14e58:	pop	{fp, pc}
   14e5c:	push	{fp, lr}
   14e60:	add	fp, sp, #4
   14e64:	sub	sp, sp, #64	; 0x40
   14e68:	str	r0, [fp, #-56]	; 0xffffffc8
   14e6c:	str	r1, [fp, #-60]	; 0xffffffc4
   14e70:	str	r2, [fp, #-64]	; 0xffffffc0
   14e74:	sub	r3, fp, #52	; 0x34
   14e78:	ldr	r1, [fp, #-60]	; 0xffffffc4
   14e7c:	mov	r0, r3
   14e80:	bl	12f68 <__assert_fail@plt+0x20a0>
   14e84:	sub	r3, fp, #52	; 0x34
   14e88:	mvn	r2, #0
   14e8c:	ldr	r1, [fp, #-64]	; 0xffffffc0
   14e90:	ldr	r0, [fp, #-56]	; 0xffffffc8
   14e94:	bl	14abc <__assert_fail@plt+0x3bf4>
   14e98:	mov	r3, r0
   14e9c:	mov	r0, r3
   14ea0:	sub	sp, fp, #4
   14ea4:	pop	{fp, pc}
   14ea8:	push	{fp, lr}
   14eac:	add	fp, sp, #4
   14eb0:	sub	sp, sp, #64	; 0x40
   14eb4:	str	r0, [fp, #-56]	; 0xffffffc8
   14eb8:	str	r1, [fp, #-60]	; 0xffffffc4
   14ebc:	str	r2, [fp, #-64]	; 0xffffffc0
   14ec0:	str	r3, [fp, #-68]	; 0xffffffbc
   14ec4:	sub	r3, fp, #52	; 0x34
   14ec8:	ldr	r1, [fp, #-60]	; 0xffffffc4
   14ecc:	mov	r0, r3
   14ed0:	bl	12f68 <__assert_fail@plt+0x20a0>
   14ed4:	sub	r3, fp, #52	; 0x34
   14ed8:	ldr	r2, [fp, #-68]	; 0xffffffbc
   14edc:	ldr	r1, [fp, #-64]	; 0xffffffc0
   14ee0:	ldr	r0, [fp, #-56]	; 0xffffffc8
   14ee4:	bl	14abc <__assert_fail@plt+0x3bf4>
   14ee8:	mov	r3, r0
   14eec:	mov	r0, r3
   14ef0:	sub	sp, fp, #4
   14ef4:	pop	{fp, pc}
   14ef8:	push	{fp, lr}
   14efc:	add	fp, sp, #4
   14f00:	sub	sp, sp, #8
   14f04:	str	r0, [fp, #-8]
   14f08:	str	r1, [fp, #-12]
   14f0c:	ldr	r2, [fp, #-12]
   14f10:	ldr	r1, [fp, #-8]
   14f14:	mov	r0, #0
   14f18:	bl	14e5c <__assert_fail@plt+0x3f94>
   14f1c:	mov	r3, r0
   14f20:	mov	r0, r3
   14f24:	sub	sp, fp, #4
   14f28:	pop	{fp, pc}
   14f2c:	push	{fp, lr}
   14f30:	add	fp, sp, #4
   14f34:	sub	sp, sp, #16
   14f38:	str	r0, [fp, #-8]
   14f3c:	str	r1, [fp, #-12]
   14f40:	str	r2, [fp, #-16]
   14f44:	ldr	r3, [fp, #-16]
   14f48:	ldr	r2, [fp, #-12]
   14f4c:	ldr	r1, [fp, #-8]
   14f50:	mov	r0, #0
   14f54:	bl	14ea8 <__assert_fail@plt+0x3fe0>
   14f58:	mov	r3, r0
   14f5c:	mov	r0, r3
   14f60:	sub	sp, fp, #4
   14f64:	pop	{fp, pc}
   14f68:	push	{fp, lr}
   14f6c:	add	fp, sp, #4
   14f70:	sub	sp, sp, #64	; 0x40
   14f74:	str	r0, [fp, #-56]	; 0xffffffc8
   14f78:	str	r1, [fp, #-60]	; 0xffffffc4
   14f7c:	mov	r3, r2
   14f80:	strb	r3, [fp, #-61]	; 0xffffffc3
   14f84:	ldr	r3, [pc, #84]	; 14fe0 <__assert_fail@plt+0x4118>
   14f88:	sub	ip, fp, #52	; 0x34
   14f8c:	mov	lr, r3
   14f90:	ldm	lr!, {r0, r1, r2, r3}
   14f94:	stmia	ip!, {r0, r1, r2, r3}
   14f98:	ldm	lr!, {r0, r1, r2, r3}
   14f9c:	stmia	ip!, {r0, r1, r2, r3}
   14fa0:	ldm	lr, {r0, r1, r2, r3}
   14fa4:	stm	ip, {r0, r1, r2, r3}
   14fa8:	ldrb	r1, [fp, #-61]	; 0xffffffc3
   14fac:	sub	r3, fp, #52	; 0x34
   14fb0:	mov	r2, #1
   14fb4:	mov	r0, r3
   14fb8:	bl	12dd4 <__assert_fail@plt+0x1f0c>
   14fbc:	sub	r3, fp, #52	; 0x34
   14fc0:	ldr	r2, [fp, #-60]	; 0xffffffc4
   14fc4:	ldr	r1, [fp, #-56]	; 0xffffffc8
   14fc8:	mov	r0, #0
   14fcc:	bl	14abc <__assert_fail@plt+0x3bf4>
   14fd0:	mov	r3, r0
   14fd4:	mov	r0, r3
   14fd8:	sub	sp, fp, #4
   14fdc:	pop	{fp, pc}
   14fe0:	andeq	r9, r2, r4, ror r1
   14fe4:	push	{fp, lr}
   14fe8:	add	fp, sp, #4
   14fec:	sub	sp, sp, #8
   14ff0:	str	r0, [fp, #-8]
   14ff4:	mov	r3, r1
   14ff8:	strb	r3, [fp, #-9]
   14ffc:	ldrb	r3, [fp, #-9]
   15000:	mov	r2, r3
   15004:	mvn	r1, #0
   15008:	ldr	r0, [fp, #-8]
   1500c:	bl	14f68 <__assert_fail@plt+0x40a0>
   15010:	mov	r3, r0
   15014:	mov	r0, r3
   15018:	sub	sp, fp, #4
   1501c:	pop	{fp, pc}
   15020:	push	{fp, lr}
   15024:	add	fp, sp, #4
   15028:	sub	sp, sp, #8
   1502c:	str	r0, [fp, #-8]
   15030:	mov	r1, #58	; 0x3a
   15034:	ldr	r0, [fp, #-8]
   15038:	bl	14fe4 <__assert_fail@plt+0x411c>
   1503c:	mov	r3, r0
   15040:	mov	r0, r3
   15044:	sub	sp, fp, #4
   15048:	pop	{fp, pc}
   1504c:	push	{fp, lr}
   15050:	add	fp, sp, #4
   15054:	sub	sp, sp, #8
   15058:	str	r0, [fp, #-8]
   1505c:	str	r1, [fp, #-12]
   15060:	mov	r2, #58	; 0x3a
   15064:	ldr	r1, [fp, #-12]
   15068:	ldr	r0, [fp, #-8]
   1506c:	bl	14f68 <__assert_fail@plt+0x40a0>
   15070:	mov	r3, r0
   15074:	mov	r0, r3
   15078:	sub	sp, fp, #4
   1507c:	pop	{fp, pc}
   15080:	push	{fp, lr}
   15084:	add	fp, sp, #4
   15088:	sub	sp, sp, #112	; 0x70
   1508c:	str	r0, [fp, #-56]	; 0xffffffc8
   15090:	str	r1, [fp, #-60]	; 0xffffffc4
   15094:	str	r2, [fp, #-64]	; 0xffffffc0
   15098:	sub	r3, fp, #116	; 0x74
   1509c:	ldr	r1, [fp, #-60]	; 0xffffffc4
   150a0:	mov	r0, r3
   150a4:	bl	12f68 <__assert_fail@plt+0x20a0>
   150a8:	sub	ip, fp, #52	; 0x34
   150ac:	sub	lr, fp, #116	; 0x74
   150b0:	ldm	lr!, {r0, r1, r2, r3}
   150b4:	stmia	ip!, {r0, r1, r2, r3}
   150b8:	ldm	lr!, {r0, r1, r2, r3}
   150bc:	stmia	ip!, {r0, r1, r2, r3}
   150c0:	ldm	lr, {r0, r1, r2, r3}
   150c4:	stm	ip, {r0, r1, r2, r3}
   150c8:	sub	r3, fp, #52	; 0x34
   150cc:	mov	r2, #1
   150d0:	mov	r1, #58	; 0x3a
   150d4:	mov	r0, r3
   150d8:	bl	12dd4 <__assert_fail@plt+0x1f0c>
   150dc:	sub	r3, fp, #52	; 0x34
   150e0:	mvn	r2, #0
   150e4:	ldr	r1, [fp, #-64]	; 0xffffffc0
   150e8:	ldr	r0, [fp, #-56]	; 0xffffffc8
   150ec:	bl	14abc <__assert_fail@plt+0x3bf4>
   150f0:	mov	r3, r0
   150f4:	mov	r0, r3
   150f8:	sub	sp, fp, #4
   150fc:	pop	{fp, pc}
   15100:	push	{fp, lr}
   15104:	add	fp, sp, #4
   15108:	sub	sp, sp, #24
   1510c:	str	r0, [fp, #-8]
   15110:	str	r1, [fp, #-12]
   15114:	str	r2, [fp, #-16]
   15118:	str	r3, [fp, #-20]	; 0xffffffec
   1511c:	mvn	r3, #0
   15120:	str	r3, [sp]
   15124:	ldr	r3, [fp, #-20]	; 0xffffffec
   15128:	ldr	r2, [fp, #-16]
   1512c:	ldr	r1, [fp, #-12]
   15130:	ldr	r0, [fp, #-8]
   15134:	bl	15148 <__assert_fail@plt+0x4280>
   15138:	mov	r3, r0
   1513c:	mov	r0, r3
   15140:	sub	sp, fp, #4
   15144:	pop	{fp, pc}
   15148:	push	{fp, lr}
   1514c:	add	fp, sp, #4
   15150:	sub	sp, sp, #64	; 0x40
   15154:	str	r0, [fp, #-56]	; 0xffffffc8
   15158:	str	r1, [fp, #-60]	; 0xffffffc4
   1515c:	str	r2, [fp, #-64]	; 0xffffffc0
   15160:	str	r3, [fp, #-68]	; 0xffffffbc
   15164:	ldr	r3, [pc, #84]	; 151c0 <__assert_fail@plt+0x42f8>
   15168:	sub	ip, fp, #52	; 0x34
   1516c:	mov	lr, r3
   15170:	ldm	lr!, {r0, r1, r2, r3}
   15174:	stmia	ip!, {r0, r1, r2, r3}
   15178:	ldm	lr!, {r0, r1, r2, r3}
   1517c:	stmia	ip!, {r0, r1, r2, r3}
   15180:	ldm	lr, {r0, r1, r2, r3}
   15184:	stm	ip, {r0, r1, r2, r3}
   15188:	sub	r3, fp, #52	; 0x34
   1518c:	ldr	r2, [fp, #-64]	; 0xffffffc0
   15190:	ldr	r1, [fp, #-60]	; 0xffffffc4
   15194:	mov	r0, r3
   15198:	bl	12eec <__assert_fail@plt+0x2024>
   1519c:	sub	r3, fp, #52	; 0x34
   151a0:	ldr	r2, [fp, #4]
   151a4:	ldr	r1, [fp, #-68]	; 0xffffffbc
   151a8:	ldr	r0, [fp, #-56]	; 0xffffffc8
   151ac:	bl	14abc <__assert_fail@plt+0x3bf4>
   151b0:	mov	r3, r0
   151b4:	mov	r0, r3
   151b8:	sub	sp, fp, #4
   151bc:	pop	{fp, pc}
   151c0:	andeq	r9, r2, r4, ror r1
   151c4:	push	{fp, lr}
   151c8:	add	fp, sp, #4
   151cc:	sub	sp, sp, #16
   151d0:	str	r0, [fp, #-8]
   151d4:	str	r1, [fp, #-12]
   151d8:	str	r2, [fp, #-16]
   151dc:	ldr	r3, [fp, #-16]
   151e0:	ldr	r2, [fp, #-12]
   151e4:	ldr	r1, [fp, #-8]
   151e8:	mov	r0, #0
   151ec:	bl	15100 <__assert_fail@plt+0x4238>
   151f0:	mov	r3, r0
   151f4:	mov	r0, r3
   151f8:	sub	sp, fp, #4
   151fc:	pop	{fp, pc}
   15200:	push	{fp, lr}
   15204:	add	fp, sp, #4
   15208:	sub	sp, sp, #24
   1520c:	str	r0, [fp, #-8]
   15210:	str	r1, [fp, #-12]
   15214:	str	r2, [fp, #-16]
   15218:	str	r3, [fp, #-20]	; 0xffffffec
   1521c:	ldr	r3, [fp, #-20]	; 0xffffffec
   15220:	str	r3, [sp]
   15224:	ldr	r3, [fp, #-16]
   15228:	ldr	r2, [fp, #-12]
   1522c:	ldr	r1, [fp, #-8]
   15230:	mov	r0, #0
   15234:	bl	15148 <__assert_fail@plt+0x4280>
   15238:	mov	r3, r0
   1523c:	mov	r0, r3
   15240:	sub	sp, fp, #4
   15244:	pop	{fp, pc}
   15248:	push	{fp, lr}
   1524c:	add	fp, sp, #4
   15250:	sub	sp, sp, #16
   15254:	str	r0, [fp, #-8]
   15258:	str	r1, [fp, #-12]
   1525c:	str	r2, [fp, #-16]
   15260:	ldr	r3, [pc, #28]	; 15284 <__assert_fail@plt+0x43bc>
   15264:	ldr	r2, [fp, #-16]
   15268:	ldr	r1, [fp, #-12]
   1526c:	ldr	r0, [fp, #-8]
   15270:	bl	14abc <__assert_fail@plt+0x3bf4>
   15274:	mov	r3, r0
   15278:	mov	r0, r3
   1527c:	sub	sp, fp, #4
   15280:	pop	{fp, pc}
   15284:	andeq	r9, r2, r0, lsl #2
   15288:	push	{fp, lr}
   1528c:	add	fp, sp, #4
   15290:	sub	sp, sp, #8
   15294:	str	r0, [fp, #-8]
   15298:	str	r1, [fp, #-12]
   1529c:	ldr	r2, [fp, #-12]
   152a0:	ldr	r1, [fp, #-8]
   152a4:	mov	r0, #0
   152a8:	bl	15248 <__assert_fail@plt+0x4380>
   152ac:	mov	r3, r0
   152b0:	mov	r0, r3
   152b4:	sub	sp, fp, #4
   152b8:	pop	{fp, pc}
   152bc:	push	{fp, lr}
   152c0:	add	fp, sp, #4
   152c4:	sub	sp, sp, #8
   152c8:	str	r0, [fp, #-8]
   152cc:	str	r1, [fp, #-12]
   152d0:	mvn	r2, #0
   152d4:	ldr	r1, [fp, #-12]
   152d8:	ldr	r0, [fp, #-8]
   152dc:	bl	15248 <__assert_fail@plt+0x4380>
   152e0:	mov	r3, r0
   152e4:	mov	r0, r3
   152e8:	sub	sp, fp, #4
   152ec:	pop	{fp, pc}
   152f0:	push	{fp, lr}
   152f4:	add	fp, sp, #4
   152f8:	sub	sp, sp, #8
   152fc:	str	r0, [fp, #-8]
   15300:	ldr	r1, [fp, #-8]
   15304:	mov	r0, #0
   15308:	bl	152bc <__assert_fail@plt+0x43f4>
   1530c:	mov	r3, r0
   15310:	mov	r0, r3
   15314:	sub	sp, fp, #4
   15318:	pop	{fp, pc}
   1531c:	push	{fp}		; (str fp, [sp, #-4]!)
   15320:	add	fp, sp, #0
   15324:	sub	sp, sp, #12
   15328:	str	r0, [fp, #-8]
   1532c:	ldr	r3, [fp, #-8]
   15330:	mov	r2, #0
   15334:	str	r2, [r3]
   15338:	ldr	r3, [fp, #-8]
   1533c:	mov	r2, #0
   15340:	str	r2, [r3, #4]
   15344:	nop			; (mov r0, r0)
   15348:	add	sp, fp, #0
   1534c:	pop	{fp}		; (ldr fp, [sp], #4)
   15350:	bx	lr
   15354:	push	{fp}		; (str fp, [sp, #-4]!)
   15358:	add	fp, sp, #0
   1535c:	sub	sp, sp, #12
   15360:	str	r0, [fp, #-8]
   15364:	str	r1, [fp, #-12]
   15368:	ldr	r3, [fp, #-8]
   1536c:	lsr	r3, r3, #5
   15370:	lsl	r3, r3, #2
   15374:	ldr	r2, [fp, #-12]
   15378:	add	r3, r2, r3
   1537c:	ldr	r2, [r3]
   15380:	ldr	r3, [fp, #-8]
   15384:	and	r3, r3, #31
   15388:	lsr	r3, r2, r3
   1538c:	and	r3, r3, #1
   15390:	cmp	r3, #0
   15394:	movne	r3, #1
   15398:	moveq	r3, #0
   1539c:	uxtb	r3, r3
   153a0:	mov	r0, r3
   153a4:	add	sp, fp, #0
   153a8:	pop	{fp}		; (ldr fp, [sp], #4)
   153ac:	bx	lr
   153b0:	push	{fp}		; (str fp, [sp, #-4]!)
   153b4:	add	fp, sp, #0
   153b8:	sub	sp, sp, #20
   153bc:	str	r0, [fp, #-16]
   153c0:	str	r1, [fp, #-20]	; 0xffffffec
   153c4:	mov	r3, #1
   153c8:	str	r3, [fp, #-8]
   153cc:	ldr	r3, [fp, #-16]
   153d0:	lsr	r3, r3, #5
   153d4:	lsl	r2, r3, #2
   153d8:	ldr	r1, [fp, #-20]	; 0xffffffec
   153dc:	add	r2, r1, r2
   153e0:	lsl	r3, r3, #2
   153e4:	ldr	r1, [fp, #-20]	; 0xffffffec
   153e8:	add	r3, r1, r3
   153ec:	ldr	r1, [r3]
   153f0:	ldr	r3, [fp, #-16]
   153f4:	and	r3, r3, #31
   153f8:	ldr	r0, [fp, #-8]
   153fc:	lsl	r3, r0, r3
   15400:	orr	r3, r1, r3
   15404:	str	r3, [r2]
   15408:	nop			; (mov r0, r0)
   1540c:	add	sp, fp, #0
   15410:	pop	{fp}		; (ldr fp, [sp], #4)
   15414:	bx	lr
   15418:	push	{fp, lr}
   1541c:	add	fp, sp, #4
   15420:	sub	sp, sp, #80	; 0x50
   15424:	str	r0, [fp, #-64]	; 0xffffffc0
   15428:	str	r1, [fp, #-68]	; 0xffffffbc
   1542c:	str	r2, [fp, #-72]	; 0xffffffb8
   15430:	str	r3, [fp, #-76]	; 0xffffffb4
   15434:	sub	r3, fp, #52	; 0x34
   15438:	mov	r2, #32
   1543c:	mov	r1, #0
   15440:	mov	r0, r3
   15444:	bl	10e44 <memset@plt>
   15448:	mov	r3, #0
   1544c:	str	r3, [fp, #-12]
   15450:	b	15488 <__assert_fail@plt+0x45c0>
   15454:	ldr	r3, [fp, #-12]
   15458:	ldr	r2, [fp, #-68]	; 0xffffffbc
   1545c:	add	r3, r2, r3
   15460:	ldrb	r3, [r3]
   15464:	strb	r3, [fp, #-17]	; 0xffffffef
   15468:	ldrb	r3, [fp, #-17]	; 0xffffffef
   1546c:	sub	r2, fp, #52	; 0x34
   15470:	mov	r1, r2
   15474:	mov	r0, r3
   15478:	bl	153b0 <__assert_fail@plt+0x44e8>
   1547c:	ldr	r3, [fp, #-12]
   15480:	add	r3, r3, #1
   15484:	str	r3, [fp, #-12]
   15488:	ldr	r2, [fp, #-12]
   1548c:	ldr	r3, [fp, #-72]	; 0xffffffb8
   15490:	cmp	r2, r3
   15494:	bcc	15454 <__assert_fail@plt+0x458c>
   15498:	ldr	r0, [fp, #-64]	; 0xffffffc0
   1549c:	bl	10d00 <getc_unlocked@plt>
   154a0:	str	r0, [fp, #-8]
   154a4:	b	154b4 <__assert_fail@plt+0x45ec>
   154a8:	ldr	r0, [fp, #-64]	; 0xffffffc0
   154ac:	bl	10d00 <getc_unlocked@plt>
   154b0:	str	r0, [fp, #-8]
   154b4:	ldr	r3, [fp, #-8]
   154b8:	cmp	r3, #0
   154bc:	blt	154e0 <__assert_fail@plt+0x4618>
   154c0:	ldr	r3, [fp, #-8]
   154c4:	sub	r2, fp, #52	; 0x34
   154c8:	mov	r1, r2
   154cc:	mov	r0, r3
   154d0:	bl	15354 <__assert_fail@plt+0x448c>
   154d4:	mov	r3, r0
   154d8:	cmp	r3, #0
   154dc:	bne	154a8 <__assert_fail@plt+0x45e0>
   154e0:	ldr	r3, [fp, #-76]	; 0xffffffb4
   154e4:	ldr	r3, [r3, #4]
   154e8:	str	r3, [fp, #-16]
   154ec:	ldr	r3, [fp, #-76]	; 0xffffffb4
   154f0:	ldr	r3, [r3]
   154f4:	str	r3, [fp, #-56]	; 0xffffffc8
   154f8:	mov	r3, #0
   154fc:	str	r3, [fp, #-12]
   15500:	ldr	r3, [fp, #-8]
   15504:	cmp	r3, #0
   15508:	bge	15520 <__assert_fail@plt+0x4658>
   1550c:	ldr	r3, [fp, #-12]
   15510:	cmp	r3, #0
   15514:	bne	15520 <__assert_fail@plt+0x4658>
   15518:	mvn	r3, #0
   1551c:	b	15600 <__assert_fail@plt+0x4738>
   15520:	ldr	r3, [fp, #-56]	; 0xffffffc8
   15524:	ldr	r2, [fp, #-12]
   15528:	cmp	r2, r3
   1552c:	bne	15550 <__assert_fail@plt+0x4688>
   15530:	sub	r1, fp, #56	; 0x38
   15534:	mov	r3, #1
   15538:	str	r3, [sp]
   1553c:	mvn	r3, #0
   15540:	mov	r2, #1
   15544:	ldr	r0, [fp, #-16]
   15548:	bl	1637c <__assert_fail@plt+0x54b4>
   1554c:	str	r0, [fp, #-16]
   15550:	ldr	r3, [fp, #-8]
   15554:	cmp	r3, #0
   15558:	bge	15574 <__assert_fail@plt+0x46ac>
   1555c:	ldr	r3, [fp, #-12]
   15560:	ldr	r2, [fp, #-16]
   15564:	add	r3, r2, r3
   15568:	mov	r2, #0
   1556c:	strb	r2, [r3]
   15570:	b	155e0 <__assert_fail@plt+0x4718>
   15574:	ldr	r3, [fp, #-8]
   15578:	sub	r2, fp, #52	; 0x34
   1557c:	mov	r1, r2
   15580:	mov	r0, r3
   15584:	bl	15354 <__assert_fail@plt+0x448c>
   15588:	mov	r3, r0
   1558c:	cmp	r3, #0
   15590:	beq	155ac <__assert_fail@plt+0x46e4>
   15594:	ldr	r3, [fp, #-12]
   15598:	ldr	r2, [fp, #-16]
   1559c:	add	r3, r2, r3
   155a0:	mov	r2, #0
   155a4:	strb	r2, [r3]
   155a8:	b	155e0 <__assert_fail@plt+0x4718>
   155ac:	ldr	r3, [fp, #-12]
   155b0:	add	r2, r3, #1
   155b4:	str	r2, [fp, #-12]
   155b8:	mov	r2, r3
   155bc:	ldr	r3, [fp, #-16]
   155c0:	add	r3, r3, r2
   155c4:	ldr	r2, [fp, #-8]
   155c8:	uxtb	r2, r2
   155cc:	strb	r2, [r3]
   155d0:	ldr	r0, [fp, #-64]	; 0xffffffc0
   155d4:	bl	10d00 <getc_unlocked@plt>
   155d8:	str	r0, [fp, #-8]
   155dc:	b	15500 <__assert_fail@plt+0x4638>
   155e0:	ldr	r3, [fp, #-76]	; 0xffffffb4
   155e4:	ldr	r2, [fp, #-16]
   155e8:	str	r2, [r3, #4]
   155ec:	ldr	r3, [fp, #-56]	; 0xffffffc8
   155f0:	mov	r2, r3
   155f4:	ldr	r3, [fp, #-76]	; 0xffffffb4
   155f8:	str	r2, [r3]
   155fc:	ldr	r3, [fp, #-12]
   15600:	mov	r0, r3
   15604:	sub	sp, fp, #4
   15608:	pop	{fp, pc}
   1560c:	push	{r4, fp, lr}
   15610:	add	fp, sp, #8
   15614:	sub	sp, sp, #68	; 0x44
   15618:	str	r0, [fp, #-56]	; 0xffffffc8
   1561c:	str	r1, [fp, #-60]	; 0xffffffc4
   15620:	str	r2, [fp, #-64]	; 0xffffffc0
   15624:	str	r3, [fp, #-68]	; 0xffffffbc
   15628:	sub	r3, fp, #44	; 0x2c
   1562c:	str	r3, [fp, #-28]	; 0xffffffe4
   15630:	ldr	r3, [fp, #-60]	; 0xffffffc4
   15634:	cmp	r3, #0
   15638:	bne	15648 <__assert_fail@plt+0x4780>
   1563c:	mov	r3, #64	; 0x40
   15640:	str	r3, [fp, #-60]	; 0xffffffc4
   15644:	b	15654 <__assert_fail@plt+0x478c>
   15648:	ldr	r3, [fp, #-60]	; 0xffffffc4
   1564c:	add	r3, r3, #1
   15650:	str	r3, [fp, #-60]	; 0xffffffc4
   15654:	ldr	r3, [fp, #-60]	; 0xffffffc4
   15658:	str	r3, [fp, #-48]	; 0xffffffd0
   1565c:	ldr	r3, [fp, #-48]	; 0xffffffd0
   15660:	mov	r1, #4
   15664:	mov	r0, r3
   15668:	bl	161d0 <__assert_fail@plt+0x5308>
   1566c:	mov	r3, r0
   15670:	str	r3, [fp, #-16]
   15674:	ldr	r3, [fp, #-48]	; 0xffffffd0
   15678:	mov	r1, #4
   1567c:	mov	r0, r3
   15680:	bl	161d0 <__assert_fail@plt+0x5308>
   15684:	mov	r3, r0
   15688:	str	r3, [fp, #-20]	; 0xffffffec
   1568c:	mov	r3, #0
   15690:	str	r3, [fp, #-24]	; 0xffffffe8
   15694:	ldr	r0, [fp, #-28]	; 0xffffffe4
   15698:	bl	1531c <__assert_fail@plt+0x4454>
   1569c:	ldr	r3, [fp, #-28]	; 0xffffffe4
   156a0:	ldr	r2, [fp, #-68]	; 0xffffffbc
   156a4:	ldr	r1, [fp, #-64]	; 0xffffffc0
   156a8:	ldr	r0, [fp, #-56]	; 0xffffffc8
   156ac:	bl	15418 <__assert_fail@plt+0x4550>
   156b0:	str	r0, [fp, #-32]	; 0xffffffe0
   156b4:	ldr	r3, [fp, #-48]	; 0xffffffd0
   156b8:	ldr	r2, [fp, #-24]	; 0xffffffe8
   156bc:	cmp	r2, r3
   156c0:	blt	156fc <__assert_fail@plt+0x4834>
   156c4:	sub	r1, fp, #48	; 0x30
   156c8:	mov	r3, #4
   156cc:	str	r3, [sp]
   156d0:	mvn	r3, #0
   156d4:	mov	r2, #1
   156d8:	ldr	r0, [fp, #-16]
   156dc:	bl	1637c <__assert_fail@plt+0x54b4>
   156e0:	str	r0, [fp, #-16]
   156e4:	ldr	r3, [fp, #-48]	; 0xffffffd0
   156e8:	mov	r2, #4
   156ec:	mov	r1, r3
   156f0:	ldr	r0, [fp, #-20]	; 0xffffffec
   156f4:	bl	1611c <__assert_fail@plt+0x5254>
   156f8:	str	r0, [fp, #-20]	; 0xffffffec
   156fc:	ldr	r3, [fp, #-32]	; 0xffffffe0
   15700:	cmn	r3, #1
   15704:	bne	15768 <__assert_fail@plt+0x48a0>
   15708:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1570c:	lsl	r3, r3, #2
   15710:	ldr	r2, [fp, #-16]
   15714:	add	r3, r2, r3
   15718:	mov	r2, #0
   1571c:	str	r2, [r3]
   15720:	ldr	r3, [fp, #-24]	; 0xffffffe8
   15724:	lsl	r3, r3, #2
   15728:	ldr	r2, [fp, #-20]	; 0xffffffec
   1572c:	add	r3, r2, r3
   15730:	mov	r2, #0
   15734:	str	r2, [r3]
   15738:	nop			; (mov r0, r0)
   1573c:	ldr	r3, [fp, #-28]	; 0xffffffe4
   15740:	ldr	r3, [r3, #4]
   15744:	mov	r0, r3
   15748:	bl	125e8 <__assert_fail@plt+0x1720>
   1574c:	ldr	r3, [fp, #4]
   15750:	ldr	r2, [fp, #-16]
   15754:	str	r2, [r3]
   15758:	ldr	r3, [fp, #8]
   1575c:	cmp	r3, #0
   15760:	beq	157f0 <__assert_fail@plt+0x4928>
   15764:	b	157e0 <__assert_fail@plt+0x4918>
   15768:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1576c:	add	r3, r3, #1
   15770:	mov	r1, #1
   15774:	mov	r0, r3
   15778:	bl	161d0 <__assert_fail@plt+0x5308>
   1577c:	mov	r3, r0
   15780:	str	r3, [fp, #-36]	; 0xffffffdc
   15784:	ldr	r3, [fp, #-24]	; 0xffffffe8
   15788:	lsl	r3, r3, #2
   1578c:	ldr	r2, [fp, #-20]	; 0xffffffec
   15790:	add	r3, r2, r3
   15794:	ldr	r2, [fp, #-32]	; 0xffffffe0
   15798:	str	r2, [r3]
   1579c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   157a0:	lsl	r3, r3, #2
   157a4:	ldr	r2, [fp, #-16]
   157a8:	add	r4, r2, r3
   157ac:	ldr	r3, [fp, #-28]	; 0xffffffe4
   157b0:	ldr	r1, [r3, #4]
   157b4:	ldr	r3, [fp, #-32]	; 0xffffffe0
   157b8:	add	r3, r3, #1
   157bc:	mov	r2, r3
   157c0:	ldr	r0, [fp, #-36]	; 0xffffffdc
   157c4:	bl	10cd0 <memcpy@plt>
   157c8:	mov	r3, r0
   157cc:	str	r3, [r4]
   157d0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   157d4:	add	r3, r3, #1
   157d8:	str	r3, [fp, #-24]	; 0xffffffe8
   157dc:	b	1569c <__assert_fail@plt+0x47d4>
   157e0:	ldr	r3, [fp, #8]
   157e4:	ldr	r2, [fp, #-20]	; 0xffffffec
   157e8:	str	r2, [r3]
   157ec:	b	157f8 <__assert_fail@plt+0x4930>
   157f0:	ldr	r0, [fp, #-20]	; 0xffffffec
   157f4:	bl	125e8 <__assert_fail@plt+0x1720>
   157f8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   157fc:	mov	r0, r3
   15800:	sub	sp, fp, #8
   15804:	pop	{r4, fp, pc}
   15808:	push	{r4, r5, r6, r7, fp, lr}
   1580c:	add	fp, sp, #20
   15810:	sub	sp, sp, #48	; 0x30
   15814:	str	r0, [fp, #-24]	; 0xffffffe8
   15818:	str	r1, [fp, #-28]	; 0xffffffe4
   1581c:	str	r2, [fp, #-32]	; 0xffffffe0
   15820:	str	r3, [fp, #-36]	; 0xffffffdc
   15824:	ldr	r3, [fp, #-28]	; 0xffffffe4
   15828:	cmp	r3, #0
   1582c:	beq	15850 <__assert_fail@plt+0x4988>
   15830:	ldr	r3, [fp, #-36]	; 0xffffffdc
   15834:	str	r3, [sp]
   15838:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1583c:	ldr	r2, [fp, #-28]	; 0xffffffe4
   15840:	ldr	r1, [pc, #1260]	; 15d34 <__assert_fail@plt+0x4e6c>
   15844:	ldr	r0, [fp, #-24]	; 0xffffffe8
   15848:	bl	10e20 <fprintf@plt>
   1584c:	b	15864 <__assert_fail@plt+0x499c>
   15850:	ldr	r3, [fp, #-36]	; 0xffffffdc
   15854:	ldr	r2, [fp, #-32]	; 0xffffffe0
   15858:	ldr	r1, [pc, #1240]	; 15d38 <__assert_fail@plt+0x4e70>
   1585c:	ldr	r0, [fp, #-24]	; 0xffffffe8
   15860:	bl	10e20 <fprintf@plt>
   15864:	ldr	r0, [pc, #1232]	; 15d3c <__assert_fail@plt+0x4e74>
   15868:	bl	10e08 <gettext@plt>
   1586c:	mov	r2, r0
   15870:	ldr	r3, [pc, #1224]	; 15d40 <__assert_fail@plt+0x4e78>
   15874:	ldr	r1, [pc, #1224]	; 15d44 <__assert_fail@plt+0x4e7c>
   15878:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1587c:	bl	10e20 <fprintf@plt>
   15880:	ldr	r1, [fp, #-24]	; 0xffffffe8
   15884:	mov	r0, #10
   15888:	bl	10cf4 <fputc_unlocked@plt>
   1588c:	ldr	r0, [pc, #1204]	; 15d48 <__assert_fail@plt+0x4e80>
   15890:	bl	10e08 <gettext@plt>
   15894:	mov	r3, r0
   15898:	ldr	r2, [pc, #1196]	; 15d4c <__assert_fail@plt+0x4e84>
   1589c:	mov	r1, r3
   158a0:	ldr	r0, [fp, #-24]	; 0xffffffe8
   158a4:	bl	10e20 <fprintf@plt>
   158a8:	ldr	r1, [fp, #-24]	; 0xffffffe8
   158ac:	mov	r0, #10
   158b0:	bl	10cf4 <fputc_unlocked@plt>
   158b4:	ldr	r3, [fp, #8]
   158b8:	cmp	r3, #9
   158bc:	ldrls	pc, [pc, r3, lsl #2]
   158c0:	b	15c7c <__assert_fail@plt+0x4db4>
   158c4:	andeq	r5, r1, r4, lsr #26
   158c8:	andeq	r5, r1, ip, ror #17
   158cc:	andeq	r5, r1, r0, lsl r9
   158d0:	andeq	r5, r1, ip, lsr r9
   158d4:	andeq	r5, r1, ip, ror r9
   158d8:	ldrdeq	r5, [r1], -r4
   158dc:	andeq	r5, r1, ip, lsr sl
   158e0:			; <UNDEFINED> instruction: 0x00015ab4
   158e4:	andeq	r5, r1, ip, lsr fp
   158e8:	ldrdeq	r5, [r1], -r4
   158ec:	ldr	r0, [pc, #1116]	; 15d50 <__assert_fail@plt+0x4e88>
   158f0:	bl	10e08 <gettext@plt>
   158f4:	mov	r1, r0
   158f8:	ldr	r3, [fp, #4]
   158fc:	ldr	r3, [r3]
   15900:	mov	r2, r3
   15904:	ldr	r0, [fp, #-24]	; 0xffffffe8
   15908:	bl	10e20 <fprintf@plt>
   1590c:	b	15d28 <__assert_fail@plt+0x4e60>
   15910:	ldr	r0, [pc, #1084]	; 15d54 <__assert_fail@plt+0x4e8c>
   15914:	bl	10e08 <gettext@plt>
   15918:	mov	r1, r0
   1591c:	ldr	r3, [fp, #4]
   15920:	ldr	r2, [r3]
   15924:	ldr	r3, [fp, #4]
   15928:	add	r3, r3, #4
   1592c:	ldr	r3, [r3]
   15930:	ldr	r0, [fp, #-24]	; 0xffffffe8
   15934:	bl	10e20 <fprintf@plt>
   15938:	b	15d28 <__assert_fail@plt+0x4e60>
   1593c:	ldr	r0, [pc, #1044]	; 15d58 <__assert_fail@plt+0x4e90>
   15940:	bl	10e08 <gettext@plt>
   15944:	ldr	r3, [fp, #4]
   15948:	ldr	r2, [r3]
   1594c:	ldr	r3, [fp, #4]
   15950:	add	r3, r3, #4
   15954:	ldr	r1, [r3]
   15958:	ldr	r3, [fp, #4]
   1595c:	add	r3, r3, #8
   15960:	ldr	r3, [r3]
   15964:	str	r3, [sp]
   15968:	mov	r3, r1
   1596c:	mov	r1, r0
   15970:	ldr	r0, [fp, #-24]	; 0xffffffe8
   15974:	bl	10e20 <fprintf@plt>
   15978:	b	15d28 <__assert_fail@plt+0x4e60>
   1597c:	ldr	r0, [pc, #984]	; 15d5c <__assert_fail@plt+0x4e94>
   15980:	bl	10e08 <gettext@plt>
   15984:	mov	ip, r0
   15988:	ldr	r3, [fp, #4]
   1598c:	ldr	r1, [r3]
   15990:	ldr	r3, [fp, #4]
   15994:	add	r3, r3, #4
   15998:	ldr	r0, [r3]
   1599c:	ldr	r3, [fp, #4]
   159a0:	add	r3, r3, #8
   159a4:	ldr	r3, [r3]
   159a8:	ldr	r2, [fp, #4]
   159ac:	add	r2, r2, #12
   159b0:	ldr	r2, [r2]
   159b4:	str	r2, [sp, #4]
   159b8:	str	r3, [sp]
   159bc:	mov	r3, r0
   159c0:	mov	r2, r1
   159c4:	mov	r1, ip
   159c8:	ldr	r0, [fp, #-24]	; 0xffffffe8
   159cc:	bl	10e20 <fprintf@plt>
   159d0:	b	15d28 <__assert_fail@plt+0x4e60>
   159d4:	ldr	r0, [pc, #900]	; 15d60 <__assert_fail@plt+0x4e98>
   159d8:	bl	10e08 <gettext@plt>
   159dc:	mov	lr, r0
   159e0:	ldr	r3, [fp, #4]
   159e4:	ldr	r0, [r3]
   159e8:	ldr	r3, [fp, #4]
   159ec:	add	r3, r3, #4
   159f0:	ldr	ip, [r3]
   159f4:	ldr	r3, [fp, #4]
   159f8:	add	r3, r3, #8
   159fc:	ldr	r3, [r3]
   15a00:	ldr	r2, [fp, #4]
   15a04:	add	r2, r2, #12
   15a08:	ldr	r2, [r2]
   15a0c:	ldr	r1, [fp, #4]
   15a10:	add	r1, r1, #16
   15a14:	ldr	r1, [r1]
   15a18:	str	r1, [sp, #8]
   15a1c:	str	r2, [sp, #4]
   15a20:	str	r3, [sp]
   15a24:	mov	r3, ip
   15a28:	mov	r2, r0
   15a2c:	mov	r1, lr
   15a30:	ldr	r0, [fp, #-24]	; 0xffffffe8
   15a34:	bl	10e20 <fprintf@plt>
   15a38:	b	15d28 <__assert_fail@plt+0x4e60>
   15a3c:	ldr	r0, [pc, #800]	; 15d64 <__assert_fail@plt+0x4e9c>
   15a40:	bl	10e08 <gettext@plt>
   15a44:	mov	r4, r0
   15a48:	ldr	r3, [fp, #4]
   15a4c:	ldr	ip, [r3]
   15a50:	ldr	r3, [fp, #4]
   15a54:	add	r3, r3, #4
   15a58:	ldr	lr, [r3]
   15a5c:	ldr	r3, [fp, #4]
   15a60:	add	r3, r3, #8
   15a64:	ldr	r3, [r3]
   15a68:	ldr	r2, [fp, #4]
   15a6c:	add	r2, r2, #12
   15a70:	ldr	r2, [r2]
   15a74:	ldr	r1, [fp, #4]
   15a78:	add	r1, r1, #16
   15a7c:	ldr	r1, [r1]
   15a80:	ldr	r0, [fp, #4]
   15a84:	add	r0, r0, #20
   15a88:	ldr	r0, [r0]
   15a8c:	str	r0, [sp, #12]
   15a90:	str	r1, [sp, #8]
   15a94:	str	r2, [sp, #4]
   15a98:	str	r3, [sp]
   15a9c:	mov	r3, lr
   15aa0:	mov	r2, ip
   15aa4:	mov	r1, r4
   15aa8:	ldr	r0, [fp, #-24]	; 0xffffffe8
   15aac:	bl	10e20 <fprintf@plt>
   15ab0:	b	15d28 <__assert_fail@plt+0x4e60>
   15ab4:	ldr	r0, [pc, #684]	; 15d68 <__assert_fail@plt+0x4ea0>
   15ab8:	bl	10e08 <gettext@plt>
   15abc:	mov	r5, r0
   15ac0:	ldr	r3, [fp, #4]
   15ac4:	ldr	lr, [r3]
   15ac8:	ldr	r3, [fp, #4]
   15acc:	add	r3, r3, #4
   15ad0:	ldr	r4, [r3]
   15ad4:	ldr	r3, [fp, #4]
   15ad8:	add	r3, r3, #8
   15adc:	ldr	r3, [r3]
   15ae0:	ldr	r2, [fp, #4]
   15ae4:	add	r2, r2, #12
   15ae8:	ldr	r2, [r2]
   15aec:	ldr	r1, [fp, #4]
   15af0:	add	r1, r1, #16
   15af4:	ldr	r1, [r1]
   15af8:	ldr	r0, [fp, #4]
   15afc:	add	r0, r0, #20
   15b00:	ldr	r0, [r0]
   15b04:	ldr	ip, [fp, #4]
   15b08:	add	ip, ip, #24
   15b0c:	ldr	ip, [ip]
   15b10:	str	ip, [sp, #16]
   15b14:	str	r0, [sp, #12]
   15b18:	str	r1, [sp, #8]
   15b1c:	str	r2, [sp, #4]
   15b20:	str	r3, [sp]
   15b24:	mov	r3, r4
   15b28:	mov	r2, lr
   15b2c:	mov	r1, r5
   15b30:	ldr	r0, [fp, #-24]	; 0xffffffe8
   15b34:	bl	10e20 <fprintf@plt>
   15b38:	b	15d28 <__assert_fail@plt+0x4e60>
   15b3c:	ldr	r0, [pc, #552]	; 15d6c <__assert_fail@plt+0x4ea4>
   15b40:	bl	10e08 <gettext@plt>
   15b44:	mov	r6, r0
   15b48:	ldr	r3, [fp, #4]
   15b4c:	ldr	r4, [r3]
   15b50:	ldr	r3, [fp, #4]
   15b54:	add	r3, r3, #4
   15b58:	ldr	r5, [r3]
   15b5c:	ldr	r3, [fp, #4]
   15b60:	add	r3, r3, #8
   15b64:	ldr	r3, [r3]
   15b68:	ldr	r2, [fp, #4]
   15b6c:	add	r2, r2, #12
   15b70:	ldr	r2, [r2]
   15b74:	ldr	r1, [fp, #4]
   15b78:	add	r1, r1, #16
   15b7c:	ldr	r1, [r1]
   15b80:	ldr	r0, [fp, #4]
   15b84:	add	r0, r0, #20
   15b88:	ldr	r0, [r0]
   15b8c:	ldr	ip, [fp, #4]
   15b90:	add	ip, ip, #24
   15b94:	ldr	ip, [ip]
   15b98:	ldr	lr, [fp, #4]
   15b9c:	add	lr, lr, #28
   15ba0:	ldr	lr, [lr]
   15ba4:	str	lr, [sp, #20]
   15ba8:	str	ip, [sp, #16]
   15bac:	str	r0, [sp, #12]
   15bb0:	str	r1, [sp, #8]
   15bb4:	str	r2, [sp, #4]
   15bb8:	str	r3, [sp]
   15bbc:	mov	r3, r5
   15bc0:	mov	r2, r4
   15bc4:	mov	r1, r6
   15bc8:	ldr	r0, [fp, #-24]	; 0xffffffe8
   15bcc:	bl	10e20 <fprintf@plt>
   15bd0:	b	15d28 <__assert_fail@plt+0x4e60>
   15bd4:	ldr	r0, [pc, #404]	; 15d70 <__assert_fail@plt+0x4ea8>
   15bd8:	bl	10e08 <gettext@plt>
   15bdc:	mov	r7, r0
   15be0:	ldr	r3, [fp, #4]
   15be4:	ldr	r5, [r3]
   15be8:	ldr	r3, [fp, #4]
   15bec:	add	r3, r3, #4
   15bf0:	ldr	r6, [r3]
   15bf4:	ldr	r3, [fp, #4]
   15bf8:	add	r3, r3, #8
   15bfc:	ldr	r3, [r3]
   15c00:	ldr	r2, [fp, #4]
   15c04:	add	r2, r2, #12
   15c08:	ldr	r2, [r2]
   15c0c:	ldr	r1, [fp, #4]
   15c10:	add	r1, r1, #16
   15c14:	ldr	r1, [r1]
   15c18:	ldr	r0, [fp, #4]
   15c1c:	add	r0, r0, #20
   15c20:	ldr	r0, [r0]
   15c24:	ldr	ip, [fp, #4]
   15c28:	add	ip, ip, #24
   15c2c:	ldr	ip, [ip]
   15c30:	ldr	lr, [fp, #4]
   15c34:	add	lr, lr, #28
   15c38:	ldr	lr, [lr]
   15c3c:	ldr	r4, [fp, #4]
   15c40:	add	r4, r4, #32
   15c44:	ldr	r4, [r4]
   15c48:	str	r4, [sp, #24]
   15c4c:	str	lr, [sp, #20]
   15c50:	str	ip, [sp, #16]
   15c54:	str	r0, [sp, #12]
   15c58:	str	r1, [sp, #8]
   15c5c:	str	r2, [sp, #4]
   15c60:	str	r3, [sp]
   15c64:	mov	r3, r6
   15c68:	mov	r2, r5
   15c6c:	mov	r1, r7
   15c70:	ldr	r0, [fp, #-24]	; 0xffffffe8
   15c74:	bl	10e20 <fprintf@plt>
   15c78:	b	15d28 <__assert_fail@plt+0x4e60>
   15c7c:	ldr	r0, [pc, #240]	; 15d74 <__assert_fail@plt+0x4eac>
   15c80:	bl	10e08 <gettext@plt>
   15c84:	mov	r7, r0
   15c88:	ldr	r3, [fp, #4]
   15c8c:	ldr	r5, [r3]
   15c90:	ldr	r3, [fp, #4]
   15c94:	add	r3, r3, #4
   15c98:	ldr	r6, [r3]
   15c9c:	ldr	r3, [fp, #4]
   15ca0:	add	r3, r3, #8
   15ca4:	ldr	r3, [r3]
   15ca8:	ldr	r2, [fp, #4]
   15cac:	add	r2, r2, #12
   15cb0:	ldr	r2, [r2]
   15cb4:	ldr	r1, [fp, #4]
   15cb8:	add	r1, r1, #16
   15cbc:	ldr	r1, [r1]
   15cc0:	ldr	r0, [fp, #4]
   15cc4:	add	r0, r0, #20
   15cc8:	ldr	r0, [r0]
   15ccc:	ldr	ip, [fp, #4]
   15cd0:	add	ip, ip, #24
   15cd4:	ldr	ip, [ip]
   15cd8:	ldr	lr, [fp, #4]
   15cdc:	add	lr, lr, #28
   15ce0:	ldr	lr, [lr]
   15ce4:	ldr	r4, [fp, #4]
   15ce8:	add	r4, r4, #32
   15cec:	ldr	r4, [r4]
   15cf0:	str	r4, [sp, #24]
   15cf4:	str	lr, [sp, #20]
   15cf8:	str	ip, [sp, #16]
   15cfc:	str	r0, [sp, #12]
   15d00:	str	r1, [sp, #8]
   15d04:	str	r2, [sp, #4]
   15d08:	str	r3, [sp]
   15d0c:	mov	r3, r6
   15d10:	mov	r2, r5
   15d14:	mov	r1, r7
   15d18:	ldr	r0, [fp, #-24]	; 0xffffffe8
   15d1c:	bl	10e20 <fprintf@plt>
   15d20:	b	15d28 <__assert_fail@plt+0x4e60>
   15d24:	nop			; (mov r0, r0)
   15d28:	nop			; (mov r0, r0)
   15d2c:	sub	sp, fp, #20
   15d30:	pop	{r4, r5, r6, r7, fp, pc}
   15d34:	muleq	r1, r8, r3
   15d38:	andeq	r8, r1, r4, lsr #7
   15d3c:	andeq	r8, r1, ip, lsr #7
   15d40:	andeq	r0, r0, r6, ror #15
   15d44:			; <UNDEFINED> instruction: 0x000186bc
   15d48:			; <UNDEFINED> instruction: 0x000183b0
   15d4c:	andeq	r8, r1, ip, asr r4
   15d50:	andeq	r8, r1, r0, lsl #9
   15d54:	muleq	r1, r0, r4
   15d58:	andeq	r8, r1, r8, lsr #9
   15d5c:	andeq	r8, r1, r4, asr #9
   15d60:	andeq	r8, r1, r4, ror #9
   15d64:	andeq	r8, r1, r8, lsl #10
   15d68:	andeq	r8, r1, r0, lsr r5
   15d6c:	andeq	r8, r1, ip, asr r5
   15d70:	andeq	r8, r1, ip, lsl #11
   15d74:	andeq	r8, r1, r0, asr #11
   15d78:	push	{fp, lr}
   15d7c:	add	fp, sp, #4
   15d80:	sub	sp, sp, #32
   15d84:	str	r0, [fp, #-16]
   15d88:	str	r1, [fp, #-20]	; 0xffffffec
   15d8c:	str	r2, [fp, #-24]	; 0xffffffe8
   15d90:	str	r3, [fp, #-28]	; 0xffffffe4
   15d94:	mov	r3, #0
   15d98:	str	r3, [fp, #-8]
   15d9c:	b	15dac <__assert_fail@plt+0x4ee4>
   15da0:	ldr	r3, [fp, #-8]
   15da4:	add	r3, r3, #1
   15da8:	str	r3, [fp, #-8]
   15dac:	ldr	r3, [fp, #-8]
   15db0:	lsl	r3, r3, #2
   15db4:	ldr	r2, [fp, #4]
   15db8:	add	r3, r2, r3
   15dbc:	ldr	r3, [r3]
   15dc0:	cmp	r3, #0
   15dc4:	bne	15da0 <__assert_fail@plt+0x4ed8>
   15dc8:	ldr	r3, [fp, #-8]
   15dcc:	str	r3, [sp, #4]
   15dd0:	ldr	r3, [fp, #4]
   15dd4:	str	r3, [sp]
   15dd8:	ldr	r3, [fp, #-28]	; 0xffffffe4
   15ddc:	ldr	r2, [fp, #-24]	; 0xffffffe8
   15de0:	ldr	r1, [fp, #-20]	; 0xffffffec
   15de4:	ldr	r0, [fp, #-16]
   15de8:	bl	15808 <__assert_fail@plt+0x4940>
   15dec:	nop			; (mov r0, r0)
   15df0:	sub	sp, fp, #4
   15df4:	pop	{fp, pc}
   15df8:	push	{fp, lr}
   15dfc:	add	fp, sp, #4
   15e00:	sub	sp, sp, #72	; 0x48
   15e04:	str	r0, [fp, #-56]	; 0xffffffc8
   15e08:	str	r1, [fp, #-60]	; 0xffffffc4
   15e0c:	str	r2, [fp, #-64]	; 0xffffffc0
   15e10:	str	r3, [fp, #-68]	; 0xffffffbc
   15e14:	mov	r3, #0
   15e18:	str	r3, [fp, #-8]
   15e1c:	b	15e2c <__assert_fail@plt+0x4f64>
   15e20:	ldr	r3, [fp, #-8]
   15e24:	add	r3, r3, #1
   15e28:	str	r3, [fp, #-8]
   15e2c:	ldr	r3, [fp, #-8]
   15e30:	cmp	r3, #9
   15e34:	bhi	15e78 <__assert_fail@plt+0x4fb0>
   15e38:	ldr	r3, [fp, #4]
   15e3c:	add	r2, r3, #4
   15e40:	str	r2, [fp, #4]
   15e44:	ldr	r2, [r3]
   15e48:	ldr	r3, [fp, #-8]
   15e4c:	lsl	r3, r3, #2
   15e50:	sub	r1, fp, #4
   15e54:	add	r3, r1, r3
   15e58:	str	r2, [r3, #-44]	; 0xffffffd4
   15e5c:	ldr	r3, [fp, #-8]
   15e60:	lsl	r3, r3, #2
   15e64:	sub	r2, fp, #4
   15e68:	add	r3, r2, r3
   15e6c:	ldr	r3, [r3, #-44]	; 0xffffffd4
   15e70:	cmp	r3, #0
   15e74:	bne	15e20 <__assert_fail@plt+0x4f58>
   15e78:	ldr	r3, [fp, #-8]
   15e7c:	str	r3, [sp, #4]
   15e80:	sub	r3, fp, #48	; 0x30
   15e84:	str	r3, [sp]
   15e88:	ldr	r3, [fp, #-68]	; 0xffffffbc
   15e8c:	ldr	r2, [fp, #-64]	; 0xffffffc0
   15e90:	ldr	r1, [fp, #-60]	; 0xffffffc4
   15e94:	ldr	r0, [fp, #-56]	; 0xffffffc8
   15e98:	bl	15808 <__assert_fail@plt+0x4940>
   15e9c:	nop			; (mov r0, r0)
   15ea0:	sub	sp, fp, #4
   15ea4:	pop	{fp, pc}
   15ea8:	push	{r3}		; (str r3, [sp, #-4]!)
   15eac:	push	{fp, lr}
   15eb0:	add	fp, sp, #4
   15eb4:	sub	sp, sp, #36	; 0x24
   15eb8:	str	r0, [fp, #-20]	; 0xffffffec
   15ebc:	str	r1, [fp, #-24]	; 0xffffffe8
   15ec0:	str	r2, [fp, #-28]	; 0xffffffe4
   15ec4:	add	r3, fp, #8
   15ec8:	str	r3, [fp, #-12]
   15ecc:	ldr	r3, [fp, #-12]
   15ed0:	str	r3, [sp]
   15ed4:	ldr	r3, [fp, #4]
   15ed8:	ldr	r2, [fp, #-28]	; 0xffffffe4
   15edc:	ldr	r1, [fp, #-24]	; 0xffffffe8
   15ee0:	ldr	r0, [fp, #-20]	; 0xffffffec
   15ee4:	bl	15df8 <__assert_fail@plt+0x4f30>
   15ee8:	nop			; (mov r0, r0)
   15eec:	sub	sp, fp, #4
   15ef0:	pop	{fp, lr}
   15ef4:	add	sp, sp, #4
   15ef8:	bx	lr
   15efc:	push	{fp, lr}
   15f00:	add	fp, sp, #4
   15f04:	ldr	r3, [pc, #96]	; 15f6c <__assert_fail@plt+0x50a4>
   15f08:	ldr	r3, [r3]
   15f0c:	mov	r1, r3
   15f10:	mov	r0, #10
   15f14:	bl	10cf4 <fputc_unlocked@plt>
   15f18:	ldr	r0, [pc, #80]	; 15f70 <__assert_fail@plt+0x50a8>
   15f1c:	bl	10e08 <gettext@plt>
   15f20:	mov	r3, r0
   15f24:	ldr	r1, [pc, #72]	; 15f74 <__assert_fail@plt+0x50ac>
   15f28:	mov	r0, r3
   15f2c:	bl	10ca0 <printf@plt>
   15f30:	ldr	r0, [pc, #64]	; 15f78 <__assert_fail@plt+0x50b0>
   15f34:	bl	10e08 <gettext@plt>
   15f38:	mov	r3, r0
   15f3c:	ldr	r2, [pc, #56]	; 15f7c <__assert_fail@plt+0x50b4>
   15f40:	ldr	r1, [pc, #56]	; 15f80 <__assert_fail@plt+0x50b8>
   15f44:	mov	r0, r3
   15f48:	bl	10ca0 <printf@plt>
   15f4c:	ldr	r0, [pc, #48]	; 15f84 <__assert_fail@plt+0x50bc>
   15f50:	bl	10e08 <gettext@plt>
   15f54:	mov	r3, r0
   15f58:	ldr	r1, [pc, #40]	; 15f88 <__assert_fail@plt+0x50c0>
   15f5c:	mov	r0, r3
   15f60:	bl	10ca0 <printf@plt>
   15f64:	nop			; (mov r0, r0)
   15f68:	pop	{fp, pc}
   15f6c:	andeq	r9, r2, ip, asr #2
   15f70:	strdeq	r8, [r1], -ip
   15f74:	andeq	r8, r1, r0, lsl r6
   15f78:	andeq	r8, r1, r8, lsr #12
   15f7c:	andeq	r8, r1, ip, lsr r6
   15f80:	andeq	r8, r1, r4, ror #12
   15f84:	andeq	r8, r1, r4, ror r6
   15f88:	muleq	r1, ip, r6
   15f8c:	push	{fp, lr}
   15f90:	add	fp, sp, #4
   15f94:	sub	sp, sp, #16
   15f98:	str	r0, [fp, #-8]
   15f9c:	str	r1, [fp, #-12]
   15fa0:	str	r2, [fp, #-16]
   15fa4:	ldr	r2, [fp, #-16]
   15fa8:	ldr	r1, [fp, #-12]
   15fac:	ldr	r0, [fp, #-8]
   15fb0:	bl	1611c <__assert_fail@plt+0x5254>
   15fb4:	mov	r3, r0
   15fb8:	mov	r0, r3
   15fbc:	sub	sp, fp, #4
   15fc0:	pop	{fp, pc}
   15fc4:	push	{fp, lr}
   15fc8:	add	fp, sp, #4
   15fcc:	sub	sp, sp, #8
   15fd0:	str	r0, [fp, #-8]
   15fd4:	ldr	r3, [fp, #-8]
   15fd8:	cmp	r3, #0
   15fdc:	bne	15fe4 <__assert_fail@plt+0x511c>
   15fe0:	bl	16b10 <__assert_fail@plt+0x5c48>
   15fe4:	ldr	r3, [fp, #-8]
   15fe8:	mov	r0, r3
   15fec:	sub	sp, fp, #4
   15ff0:	pop	{fp, pc}
   15ff4:	push	{fp, lr}
   15ff8:	add	fp, sp, #4
   15ffc:	sub	sp, sp, #8
   16000:	str	r0, [fp, #-8]
   16004:	ldr	r0, [fp, #-8]
   16008:	bl	16c10 <__assert_fail@plt+0x5d48>
   1600c:	mov	r3, r0
   16010:	mov	r0, r3
   16014:	bl	15fc4 <__assert_fail@plt+0x50fc>
   16018:	mov	r3, r0
   1601c:	mov	r0, r3
   16020:	sub	sp, fp, #4
   16024:	pop	{fp, pc}
   16028:	push	{fp, lr}
   1602c:	add	fp, sp, #4
   16030:	sub	sp, sp, #8
   16034:	str	r0, [fp, #-8]
   16038:	ldr	r0, [fp, #-8]
   1603c:	bl	16f1c <__assert_fail@plt+0x6054>
   16040:	mov	r3, r0
   16044:	mov	r0, r3
   16048:	bl	15fc4 <__assert_fail@plt+0x50fc>
   1604c:	mov	r3, r0
   16050:	mov	r0, r3
   16054:	sub	sp, fp, #4
   16058:	pop	{fp, pc}
   1605c:	push	{fp, lr}
   16060:	add	fp, sp, #4
   16064:	sub	sp, sp, #8
   16068:	str	r0, [fp, #-8]
   1606c:	ldr	r0, [fp, #-8]
   16070:	bl	15ff4 <__assert_fail@plt+0x512c>
   16074:	mov	r3, r0
   16078:	mov	r0, r3
   1607c:	sub	sp, fp, #4
   16080:	pop	{fp, pc}
   16084:	push	{fp, lr}
   16088:	add	fp, sp, #4
   1608c:	sub	sp, sp, #16
   16090:	str	r0, [fp, #-16]
   16094:	str	r1, [fp, #-20]	; 0xffffffec
   16098:	ldr	r1, [fp, #-20]	; 0xffffffec
   1609c:	ldr	r0, [fp, #-16]
   160a0:	bl	16cb8 <__assert_fail@plt+0x5df0>
   160a4:	str	r0, [fp, #-8]
   160a8:	ldr	r3, [fp, #-8]
   160ac:	cmp	r3, #0
   160b0:	bne	160d0 <__assert_fail@plt+0x5208>
   160b4:	ldr	r3, [fp, #-16]
   160b8:	cmp	r3, #0
   160bc:	beq	160cc <__assert_fail@plt+0x5204>
   160c0:	ldr	r3, [fp, #-20]	; 0xffffffec
   160c4:	cmp	r3, #0
   160c8:	beq	160d0 <__assert_fail@plt+0x5208>
   160cc:	bl	16b10 <__assert_fail@plt+0x5c48>
   160d0:	ldr	r3, [fp, #-8]
   160d4:	mov	r0, r3
   160d8:	sub	sp, fp, #4
   160dc:	pop	{fp, pc}
   160e0:	push	{fp, lr}
   160e4:	add	fp, sp, #4
   160e8:	sub	sp, sp, #8
   160ec:	str	r0, [fp, #-8]
   160f0:	str	r1, [fp, #-12]
   160f4:	ldr	r1, [fp, #-12]
   160f8:	ldr	r0, [fp, #-8]
   160fc:	bl	16f48 <__assert_fail@plt+0x6080>
   16100:	mov	r3, r0
   16104:	mov	r0, r3
   16108:	bl	15fc4 <__assert_fail@plt+0x50fc>
   1610c:	mov	r3, r0
   16110:	mov	r0, r3
   16114:	sub	sp, fp, #4
   16118:	pop	{fp, pc}
   1611c:	push	{fp, lr}
   16120:	add	fp, sp, #4
   16124:	sub	sp, sp, #24
   16128:	str	r0, [fp, #-16]
   1612c:	str	r1, [fp, #-20]	; 0xffffffec
   16130:	str	r2, [fp, #-24]	; 0xffffffe8
   16134:	ldr	r2, [fp, #-24]	; 0xffffffe8
   16138:	ldr	r1, [fp, #-20]	; 0xffffffec
   1613c:	ldr	r0, [fp, #-16]
   16140:	bl	1713c <__assert_fail@plt+0x6274>
   16144:	str	r0, [fp, #-8]
   16148:	ldr	r3, [fp, #-8]
   1614c:	cmp	r3, #0
   16150:	bne	1617c <__assert_fail@plt+0x52b4>
   16154:	ldr	r3, [fp, #-16]
   16158:	cmp	r3, #0
   1615c:	beq	16178 <__assert_fail@plt+0x52b0>
   16160:	ldr	r3, [fp, #-20]	; 0xffffffec
   16164:	cmp	r3, #0
   16168:	beq	1617c <__assert_fail@plt+0x52b4>
   1616c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   16170:	cmp	r3, #0
   16174:	beq	1617c <__assert_fail@plt+0x52b4>
   16178:	bl	16b10 <__assert_fail@plt+0x5c48>
   1617c:	ldr	r3, [fp, #-8]
   16180:	mov	r0, r3
   16184:	sub	sp, fp, #4
   16188:	pop	{fp, pc}
   1618c:	push	{fp, lr}
   16190:	add	fp, sp, #4
   16194:	sub	sp, sp, #16
   16198:	str	r0, [fp, #-8]
   1619c:	str	r1, [fp, #-12]
   161a0:	str	r2, [fp, #-16]
   161a4:	ldr	r2, [fp, #-16]
   161a8:	ldr	r1, [fp, #-12]
   161ac:	ldr	r0, [fp, #-8]
   161b0:	bl	16fd0 <__assert_fail@plt+0x6108>
   161b4:	mov	r3, r0
   161b8:	mov	r0, r3
   161bc:	bl	15fc4 <__assert_fail@plt+0x50fc>
   161c0:	mov	r3, r0
   161c4:	mov	r0, r3
   161c8:	sub	sp, fp, #4
   161cc:	pop	{fp, pc}
   161d0:	push	{fp, lr}
   161d4:	add	fp, sp, #4
   161d8:	sub	sp, sp, #8
   161dc:	str	r0, [fp, #-8]
   161e0:	str	r1, [fp, #-12]
   161e4:	ldr	r2, [fp, #-12]
   161e8:	ldr	r1, [fp, #-8]
   161ec:	mov	r0, #0
   161f0:	bl	1611c <__assert_fail@plt+0x5254>
   161f4:	mov	r3, r0
   161f8:	mov	r0, r3
   161fc:	sub	sp, fp, #4
   16200:	pop	{fp, pc}
   16204:	push	{fp, lr}
   16208:	add	fp, sp, #4
   1620c:	sub	sp, sp, #8
   16210:	str	r0, [fp, #-8]
   16214:	str	r1, [fp, #-12]
   16218:	ldr	r2, [fp, #-12]
   1621c:	ldr	r1, [fp, #-8]
   16220:	mov	r0, #0
   16224:	bl	1618c <__assert_fail@plt+0x52c4>
   16228:	mov	r3, r0
   1622c:	mov	r0, r3
   16230:	sub	sp, fp, #4
   16234:	pop	{fp, pc}
   16238:	push	{fp, lr}
   1623c:	add	fp, sp, #4
   16240:	sub	sp, sp, #8
   16244:	str	r0, [fp, #-8]
   16248:	str	r1, [fp, #-12]
   1624c:	mov	r2, #1
   16250:	ldr	r1, [fp, #-12]
   16254:	ldr	r0, [fp, #-8]
   16258:	bl	1626c <__assert_fail@plt+0x53a4>
   1625c:	mov	r3, r0
   16260:	mov	r0, r3
   16264:	sub	sp, fp, #4
   16268:	pop	{fp, pc}
   1626c:	push	{fp, lr}
   16270:	add	fp, sp, #4
   16274:	sub	sp, sp, #24
   16278:	str	r0, [fp, #-16]
   1627c:	str	r1, [fp, #-20]	; 0xffffffec
   16280:	str	r2, [fp, #-24]	; 0xffffffe8
   16284:	ldr	r3, [fp, #-20]	; 0xffffffec
   16288:	ldr	r3, [r3]
   1628c:	str	r3, [fp, #-8]
   16290:	ldr	r3, [fp, #-16]
   16294:	cmp	r3, #0
   16298:	bne	162e4 <__assert_fail@plt+0x541c>
   1629c:	ldr	r3, [fp, #-8]
   162a0:	cmp	r3, #0
   162a4:	bne	16348 <__assert_fail@plt+0x5480>
   162a8:	ldr	r1, [fp, #-24]	; 0xffffffe8
   162ac:	mov	r0, #64	; 0x40
   162b0:	bl	178e4 <__assert_fail@plt+0x6a1c>
   162b4:	mov	r3, r0
   162b8:	str	r3, [fp, #-8]
   162bc:	ldr	r3, [fp, #-8]
   162c0:	cmp	r3, #0
   162c4:	moveq	r3, #1
   162c8:	movne	r3, #0
   162cc:	uxtb	r3, r3
   162d0:	mov	r2, r3
   162d4:	ldr	r3, [fp, #-8]
   162d8:	add	r3, r2, r3
   162dc:	str	r3, [fp, #-8]
   162e0:	b	16348 <__assert_fail@plt+0x5480>
   162e4:	ldr	r3, [fp, #-8]
   162e8:	lsr	r3, r3, #1
   162ec:	add	r3, r3, #1
   162f0:	mvn	r2, r3
   162f4:	ldr	r3, [fp, #-8]
   162f8:	cmp	r2, r3
   162fc:	bcs	16320 <__assert_fail@plt+0x5458>
   16300:	ldr	r3, [fp, #-8]
   16304:	lsr	r2, r3, #1
   16308:	ldr	r3, [fp, #-8]
   1630c:	add	r3, r2, r3
   16310:	add	r3, r3, #1
   16314:	str	r3, [fp, #-8]
   16318:	mov	r3, #1
   1631c:	b	1633c <__assert_fail@plt+0x5474>
   16320:	ldr	r3, [fp, #-8]
   16324:	lsr	r2, r3, #1
   16328:	ldr	r3, [fp, #-8]
   1632c:	add	r3, r2, r3
   16330:	add	r3, r3, #1
   16334:	str	r3, [fp, #-8]
   16338:	mov	r3, #0
   1633c:	cmp	r3, #0
   16340:	beq	16348 <__assert_fail@plt+0x5480>
   16344:	bl	16b10 <__assert_fail@plt+0x5c48>
   16348:	ldr	r3, [fp, #-8]
   1634c:	ldr	r2, [fp, #-24]	; 0xffffffe8
   16350:	mov	r1, r3
   16354:	ldr	r0, [fp, #-16]
   16358:	bl	1611c <__assert_fail@plt+0x5254>
   1635c:	str	r0, [fp, #-16]
   16360:	ldr	r2, [fp, #-8]
   16364:	ldr	r3, [fp, #-20]	; 0xffffffec
   16368:	str	r2, [r3]
   1636c:	ldr	r3, [fp, #-16]
   16370:	mov	r0, r3
   16374:	sub	sp, fp, #4
   16378:	pop	{fp, pc}
   1637c:	push	{fp, lr}
   16380:	add	fp, sp, #4
   16384:	sub	sp, sp, #32
   16388:	str	r0, [fp, #-24]	; 0xffffffe8
   1638c:	str	r1, [fp, #-28]	; 0xffffffe4
   16390:	str	r2, [fp, #-32]	; 0xffffffe0
   16394:	str	r3, [fp, #-36]	; 0xffffffdc
   16398:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1639c:	ldr	r3, [r3]
   163a0:	str	r3, [fp, #-8]
   163a4:	ldr	r3, [fp, #-8]
   163a8:	asr	r3, r3, #1
   163ac:	cmp	r3, #0
   163b0:	bge	163d8 <__assert_fail@plt+0x5510>
   163b4:	ldr	r3, [fp, #-8]
   163b8:	asr	r3, r3, #1
   163bc:	rsb	r2, r3, #-2147483648	; 0x80000000
   163c0:	ldr	r3, [fp, #-8]
   163c4:	cmp	r2, r3
   163c8:	movgt	r3, #1
   163cc:	movle	r3, #0
   163d0:	uxtb	r3, r3
   163d4:	b	1642c <__assert_fail@plt+0x5564>
   163d8:	ldr	r3, [fp, #-8]
   163dc:	cmp	r3, #0
   163e0:	bge	16408 <__assert_fail@plt+0x5540>
   163e4:	ldr	r3, [fp, #-8]
   163e8:	asr	r2, r3, #1
   163ec:	ldr	r3, [fp, #-8]
   163f0:	rsb	r3, r3, #-2147483648	; 0x80000000
   163f4:	cmp	r2, r3
   163f8:	movlt	r3, #1
   163fc:	movge	r3, #0
   16400:	uxtb	r3, r3
   16404:	b	1642c <__assert_fail@plt+0x5564>
   16408:	ldr	r3, [fp, #-8]
   1640c:	asr	r2, r3, #1
   16410:	mvn	r3, #-2147483648	; 0x80000000
   16414:	sub	r3, r3, r2
   16418:	ldr	r2, [fp, #-8]
   1641c:	cmp	r3, r2
   16420:	movlt	r3, #1
   16424:	movge	r3, #0
   16428:	uxtb	r3, r3
   1642c:	cmp	r3, #0
   16430:	beq	16454 <__assert_fail@plt+0x558c>
   16434:	ldr	r3, [fp, #-8]
   16438:	asr	r3, r3, #1
   1643c:	mov	r2, r3
   16440:	ldr	r3, [fp, #-8]
   16444:	add	r3, r2, r3
   16448:	str	r3, [fp, #-16]
   1644c:	mov	r3, #1
   16450:	b	16470 <__assert_fail@plt+0x55a8>
   16454:	ldr	r3, [fp, #-8]
   16458:	asr	r3, r3, #1
   1645c:	mov	r2, r3
   16460:	ldr	r3, [fp, #-8]
   16464:	add	r3, r2, r3
   16468:	str	r3, [fp, #-16]
   1646c:	mov	r3, #0
   16470:	cmp	r3, #0
   16474:	beq	16480 <__assert_fail@plt+0x55b8>
   16478:	mvn	r3, #-2147483648	; 0x80000000
   1647c:	str	r3, [fp, #-16]
   16480:	ldr	r3, [fp, #-36]	; 0xffffffdc
   16484:	cmp	r3, #0
   16488:	blt	164a4 <__assert_fail@plt+0x55dc>
   1648c:	ldr	r3, [fp, #-16]
   16490:	ldr	r2, [fp, #-36]	; 0xffffffdc
   16494:	cmp	r2, r3
   16498:	bge	164a4 <__assert_fail@plt+0x55dc>
   1649c:	ldr	r3, [fp, #-36]	; 0xffffffdc
   164a0:	str	r3, [fp, #-16]
   164a4:	ldr	r3, [fp, #4]
   164a8:	cmp	r3, #0
   164ac:	bge	1653c <__assert_fail@plt+0x5674>
   164b0:	ldr	r3, [fp, #-16]
   164b4:	cmp	r3, #0
   164b8:	bge	164e8 <__assert_fail@plt+0x5620>
   164bc:	ldr	r1, [fp, #4]
   164c0:	mvn	r0, #-2147483648	; 0x80000000
   164c4:	bl	17af0 <__assert_fail@plt+0x6c28>
   164c8:	mov	r3, r0
   164cc:	mov	r2, r3
   164d0:	ldr	r3, [fp, #-16]
   164d4:	cmp	r2, r3
   164d8:	movgt	r3, #1
   164dc:	movle	r3, #0
   164e0:	uxtb	r3, r3
   164e4:	b	165dc <__assert_fail@plt+0x5714>
   164e8:	ldr	r3, [fp, #4]
   164ec:	cmn	r3, #1
   164f0:	bne	16510 <__assert_fail@plt+0x5648>
   164f4:	ldr	r3, [fp, #-16]
   164f8:	add	r3, r3, #-2147483648	; 0x80000000
   164fc:	cmp	r3, #0
   16500:	movgt	r3, #1
   16504:	movle	r3, #0
   16508:	uxtb	r3, r3
   1650c:	b	165dc <__assert_fail@plt+0x5714>
   16510:	ldr	r1, [fp, #4]
   16514:	mov	r0, #-2147483648	; 0x80000000
   16518:	bl	17af0 <__assert_fail@plt+0x6c28>
   1651c:	mov	r3, r0
   16520:	mov	r2, r3
   16524:	ldr	r3, [fp, #-16]
   16528:	cmp	r2, r3
   1652c:	movlt	r3, #1
   16530:	movge	r3, #0
   16534:	uxtb	r3, r3
   16538:	b	165dc <__assert_fail@plt+0x5714>
   1653c:	ldr	r3, [fp, #4]
   16540:	cmp	r3, #0
   16544:	beq	165d8 <__assert_fail@plt+0x5710>
   16548:	ldr	r3, [fp, #-16]
   1654c:	cmp	r3, #0
   16550:	bge	165ac <__assert_fail@plt+0x56e4>
   16554:	ldr	r3, [fp, #-16]
   16558:	cmn	r3, #1
   1655c:	bne	1657c <__assert_fail@plt+0x56b4>
   16560:	ldr	r3, [fp, #4]
   16564:	add	r3, r3, #-2147483648	; 0x80000000
   16568:	cmp	r3, #0
   1656c:	movgt	r3, #1
   16570:	movle	r3, #0
   16574:	uxtb	r3, r3
   16578:	b	165dc <__assert_fail@plt+0x5714>
   1657c:	ldr	r3, [fp, #-16]
   16580:	mov	r1, r3
   16584:	mov	r0, #-2147483648	; 0x80000000
   16588:	bl	17af0 <__assert_fail@plt+0x6c28>
   1658c:	mov	r3, r0
   16590:	mov	r2, r3
   16594:	ldr	r3, [fp, #4]
   16598:	cmp	r2, r3
   1659c:	movlt	r3, #1
   165a0:	movge	r3, #0
   165a4:	uxtb	r3, r3
   165a8:	b	165dc <__assert_fail@plt+0x5714>
   165ac:	ldr	r1, [fp, #4]
   165b0:	mvn	r0, #-2147483648	; 0x80000000
   165b4:	bl	17af0 <__assert_fail@plt+0x6c28>
   165b8:	mov	r3, r0
   165bc:	mov	r2, r3
   165c0:	ldr	r3, [fp, #-16]
   165c4:	cmp	r2, r3
   165c8:	movlt	r3, #1
   165cc:	movge	r3, #0
   165d0:	uxtb	r3, r3
   165d4:	b	165dc <__assert_fail@plt+0x5714>
   165d8:	mov	r3, #0
   165dc:	cmp	r3, #0
   165e0:	beq	16600 <__assert_fail@plt+0x5738>
   165e4:	ldr	r3, [fp, #-16]
   165e8:	mov	r2, r3
   165ec:	ldr	r3, [fp, #4]
   165f0:	mul	r3, r3, r2
   165f4:	str	r3, [fp, #-20]	; 0xffffffec
   165f8:	mov	r3, #1
   165fc:	b	16618 <__assert_fail@plt+0x5750>
   16600:	ldr	r3, [fp, #-16]
   16604:	mov	r2, r3
   16608:	ldr	r3, [fp, #4]
   1660c:	mul	r3, r3, r2
   16610:	str	r3, [fp, #-20]	; 0xffffffec
   16614:	mov	r3, #0
   16618:	cmp	r3, #0
   1661c:	beq	16628 <__assert_fail@plt+0x5760>
   16620:	mvn	r3, #-2147483648	; 0x80000000
   16624:	b	16640 <__assert_fail@plt+0x5778>
   16628:	ldr	r3, [fp, #-20]	; 0xffffffec
   1662c:	cmp	r3, #63	; 0x3f
   16630:	bgt	1663c <__assert_fail@plt+0x5774>
   16634:	mov	r3, #64	; 0x40
   16638:	b	16640 <__assert_fail@plt+0x5778>
   1663c:	mov	r3, #0
   16640:	str	r3, [fp, #-12]
   16644:	ldr	r3, [fp, #-12]
   16648:	cmp	r3, #0
   1664c:	beq	16688 <__assert_fail@plt+0x57c0>
   16650:	ldr	r1, [fp, #4]
   16654:	ldr	r0, [fp, #-12]
   16658:	bl	17af0 <__assert_fail@plt+0x6c28>
   1665c:	mov	r3, r0
   16660:	str	r3, [fp, #-16]
   16664:	ldr	r3, [fp, #-12]
   16668:	ldr	r1, [fp, #4]
   1666c:	mov	r0, r3
   16670:	bl	17d10 <__assert_fail@plt+0x6e48>
   16674:	mov	r3, r1
   16678:	mov	r2, r3
   1667c:	ldr	r3, [fp, #-12]
   16680:	sub	r3, r3, r2
   16684:	str	r3, [fp, #-20]	; 0xffffffec
   16688:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1668c:	cmp	r3, #0
   16690:	bne	166a0 <__assert_fail@plt+0x57d8>
   16694:	ldr	r3, [fp, #-28]	; 0xffffffe4
   16698:	mov	r2, #0
   1669c:	str	r2, [r3]
   166a0:	ldr	r2, [fp, #-16]
   166a4:	ldr	r3, [fp, #-8]
   166a8:	sub	r2, r2, r3
   166ac:	ldr	r3, [fp, #-32]	; 0xffffffe0
   166b0:	cmp	r2, r3
   166b4:	bge	168ec <__assert_fail@plt+0x5a24>
   166b8:	ldr	r3, [fp, #-32]	; 0xffffffe0
   166bc:	cmp	r3, #0
   166c0:	bge	166e4 <__assert_fail@plt+0x581c>
   166c4:	ldr	r3, [fp, #-32]	; 0xffffffe0
   166c8:	rsb	r2, r3, #-2147483648	; 0x80000000
   166cc:	ldr	r3, [fp, #-8]
   166d0:	cmp	r2, r3
   166d4:	movgt	r3, #1
   166d8:	movle	r3, #0
   166dc:	uxtb	r3, r3
   166e0:	b	16730 <__assert_fail@plt+0x5868>
   166e4:	ldr	r3, [fp, #-8]
   166e8:	cmp	r3, #0
   166ec:	bge	16710 <__assert_fail@plt+0x5848>
   166f0:	ldr	r3, [fp, #-8]
   166f4:	rsb	r2, r3, #-2147483648	; 0x80000000
   166f8:	ldr	r3, [fp, #-32]	; 0xffffffe0
   166fc:	cmp	r2, r3
   16700:	movgt	r3, #1
   16704:	movle	r3, #0
   16708:	uxtb	r3, r3
   1670c:	b	16730 <__assert_fail@plt+0x5868>
   16710:	ldr	r2, [fp, #-32]	; 0xffffffe0
   16714:	mvn	r3, #-2147483648	; 0x80000000
   16718:	sub	r3, r3, r2
   1671c:	ldr	r2, [fp, #-8]
   16720:	cmp	r3, r2
   16724:	movlt	r3, #1
   16728:	movge	r3, #0
   1672c:	uxtb	r3, r3
   16730:	cmp	r3, #0
   16734:	beq	1674c <__assert_fail@plt+0x5884>
   16738:	ldr	r2, [fp, #-8]
   1673c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   16740:	add	r3, r2, r3
   16744:	str	r3, [fp, #-16]
   16748:	b	168e8 <__assert_fail@plt+0x5a20>
   1674c:	ldr	r2, [fp, #-8]
   16750:	ldr	r3, [fp, #-32]	; 0xffffffe0
   16754:	add	r3, r2, r3
   16758:	str	r3, [fp, #-16]
   1675c:	ldr	r3, [fp, #-36]	; 0xffffffdc
   16760:	cmp	r3, #0
   16764:	blt	16778 <__assert_fail@plt+0x58b0>
   16768:	ldr	r3, [fp, #-16]
   1676c:	ldr	r2, [fp, #-36]	; 0xffffffdc
   16770:	cmp	r2, r3
   16774:	blt	168e8 <__assert_fail@plt+0x5a20>
   16778:	ldr	r3, [fp, #4]
   1677c:	cmp	r3, #0
   16780:	bge	16810 <__assert_fail@plt+0x5948>
   16784:	ldr	r3, [fp, #-16]
   16788:	cmp	r3, #0
   1678c:	bge	167bc <__assert_fail@plt+0x58f4>
   16790:	ldr	r1, [fp, #4]
   16794:	mvn	r0, #-2147483648	; 0x80000000
   16798:	bl	17af0 <__assert_fail@plt+0x6c28>
   1679c:	mov	r3, r0
   167a0:	mov	r2, r3
   167a4:	ldr	r3, [fp, #-16]
   167a8:	cmp	r2, r3
   167ac:	movgt	r3, #1
   167b0:	movle	r3, #0
   167b4:	uxtb	r3, r3
   167b8:	b	168b0 <__assert_fail@plt+0x59e8>
   167bc:	ldr	r3, [fp, #4]
   167c0:	cmn	r3, #1
   167c4:	bne	167e4 <__assert_fail@plt+0x591c>
   167c8:	ldr	r3, [fp, #-16]
   167cc:	add	r3, r3, #-2147483648	; 0x80000000
   167d0:	cmp	r3, #0
   167d4:	movgt	r3, #1
   167d8:	movle	r3, #0
   167dc:	uxtb	r3, r3
   167e0:	b	168b0 <__assert_fail@plt+0x59e8>
   167e4:	ldr	r1, [fp, #4]
   167e8:	mov	r0, #-2147483648	; 0x80000000
   167ec:	bl	17af0 <__assert_fail@plt+0x6c28>
   167f0:	mov	r3, r0
   167f4:	mov	r2, r3
   167f8:	ldr	r3, [fp, #-16]
   167fc:	cmp	r2, r3
   16800:	movlt	r3, #1
   16804:	movge	r3, #0
   16808:	uxtb	r3, r3
   1680c:	b	168b0 <__assert_fail@plt+0x59e8>
   16810:	ldr	r3, [fp, #4]
   16814:	cmp	r3, #0
   16818:	beq	168ac <__assert_fail@plt+0x59e4>
   1681c:	ldr	r3, [fp, #-16]
   16820:	cmp	r3, #0
   16824:	bge	16880 <__assert_fail@plt+0x59b8>
   16828:	ldr	r3, [fp, #-16]
   1682c:	cmn	r3, #1
   16830:	bne	16850 <__assert_fail@plt+0x5988>
   16834:	ldr	r3, [fp, #4]
   16838:	add	r3, r3, #-2147483648	; 0x80000000
   1683c:	cmp	r3, #0
   16840:	movgt	r3, #1
   16844:	movle	r3, #0
   16848:	uxtb	r3, r3
   1684c:	b	168b0 <__assert_fail@plt+0x59e8>
   16850:	ldr	r3, [fp, #-16]
   16854:	mov	r1, r3
   16858:	mov	r0, #-2147483648	; 0x80000000
   1685c:	bl	17af0 <__assert_fail@plt+0x6c28>
   16860:	mov	r3, r0
   16864:	mov	r2, r3
   16868:	ldr	r3, [fp, #4]
   1686c:	cmp	r2, r3
   16870:	movlt	r3, #1
   16874:	movge	r3, #0
   16878:	uxtb	r3, r3
   1687c:	b	168b0 <__assert_fail@plt+0x59e8>
   16880:	ldr	r1, [fp, #4]
   16884:	mvn	r0, #-2147483648	; 0x80000000
   16888:	bl	17af0 <__assert_fail@plt+0x6c28>
   1688c:	mov	r3, r0
   16890:	mov	r2, r3
   16894:	ldr	r3, [fp, #-16]
   16898:	cmp	r2, r3
   1689c:	movlt	r3, #1
   168a0:	movge	r3, #0
   168a4:	uxtb	r3, r3
   168a8:	b	168b0 <__assert_fail@plt+0x59e8>
   168ac:	mov	r3, #0
   168b0:	cmp	r3, #0
   168b4:	beq	168d0 <__assert_fail@plt+0x5a08>
   168b8:	ldr	r3, [fp, #-16]
   168bc:	mov	r2, r3
   168c0:	ldr	r3, [fp, #4]
   168c4:	mul	r3, r3, r2
   168c8:	str	r3, [fp, #-20]	; 0xffffffec
   168cc:	b	168e8 <__assert_fail@plt+0x5a20>
   168d0:	ldr	r3, [fp, #-16]
   168d4:	mov	r2, r3
   168d8:	ldr	r3, [fp, #4]
   168dc:	mul	r3, r3, r2
   168e0:	str	r3, [fp, #-20]	; 0xffffffec
   168e4:	b	168ec <__assert_fail@plt+0x5a24>
   168e8:	bl	16b10 <__assert_fail@plt+0x5c48>
   168ec:	ldr	r3, [fp, #-20]	; 0xffffffec
   168f0:	mov	r1, r3
   168f4:	ldr	r0, [fp, #-24]	; 0xffffffe8
   168f8:	bl	16084 <__assert_fail@plt+0x51bc>
   168fc:	str	r0, [fp, #-24]	; 0xffffffe8
   16900:	ldr	r2, [fp, #-16]
   16904:	ldr	r3, [fp, #-28]	; 0xffffffe4
   16908:	str	r2, [r3]
   1690c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   16910:	mov	r0, r3
   16914:	sub	sp, fp, #4
   16918:	pop	{fp, pc}
   1691c:	push	{fp, lr}
   16920:	add	fp, sp, #4
   16924:	sub	sp, sp, #8
   16928:	str	r0, [fp, #-8]
   1692c:	mov	r1, #1
   16930:	ldr	r0, [fp, #-8]
   16934:	bl	16974 <__assert_fail@plt+0x5aac>
   16938:	mov	r3, r0
   1693c:	mov	r0, r3
   16940:	sub	sp, fp, #4
   16944:	pop	{fp, pc}
   16948:	push	{fp, lr}
   1694c:	add	fp, sp, #4
   16950:	sub	sp, sp, #8
   16954:	str	r0, [fp, #-8]
   16958:	mov	r1, #1
   1695c:	ldr	r0, [fp, #-8]
   16960:	bl	169b0 <__assert_fail@plt+0x5ae8>
   16964:	mov	r3, r0
   16968:	mov	r0, r3
   1696c:	sub	sp, fp, #4
   16970:	pop	{fp, pc}
   16974:	push	{fp, lr}
   16978:	add	fp, sp, #4
   1697c:	sub	sp, sp, #8
   16980:	str	r0, [fp, #-8]
   16984:	str	r1, [fp, #-12]
   16988:	ldr	r1, [fp, #-12]
   1698c:	ldr	r0, [fp, #-8]
   16990:	bl	16b4c <__assert_fail@plt+0x5c84>
   16994:	mov	r3, r0
   16998:	mov	r0, r3
   1699c:	bl	15fc4 <__assert_fail@plt+0x50fc>
   169a0:	mov	r3, r0
   169a4:	mov	r0, r3
   169a8:	sub	sp, fp, #4
   169ac:	pop	{fp, pc}
   169b0:	push	{fp, lr}
   169b4:	add	fp, sp, #4
   169b8:	sub	sp, sp, #8
   169bc:	str	r0, [fp, #-8]
   169c0:	str	r1, [fp, #-12]
   169c4:	ldr	r1, [fp, #-12]
   169c8:	ldr	r0, [fp, #-8]
   169cc:	bl	16f98 <__assert_fail@plt+0x60d0>
   169d0:	mov	r3, r0
   169d4:	mov	r0, r3
   169d8:	bl	15fc4 <__assert_fail@plt+0x50fc>
   169dc:	mov	r3, r0
   169e0:	mov	r0, r3
   169e4:	sub	sp, fp, #4
   169e8:	pop	{fp, pc}
   169ec:	push	{fp, lr}
   169f0:	add	fp, sp, #4
   169f4:	sub	sp, sp, #8
   169f8:	str	r0, [fp, #-8]
   169fc:	str	r1, [fp, #-12]
   16a00:	ldr	r0, [fp, #-12]
   16a04:	bl	15ff4 <__assert_fail@plt+0x512c>
   16a08:	mov	r3, r0
   16a0c:	ldr	r2, [fp, #-12]
   16a10:	ldr	r1, [fp, #-8]
   16a14:	mov	r0, r3
   16a18:	bl	10cd0 <memcpy@plt>
   16a1c:	mov	r3, r0
   16a20:	mov	r0, r3
   16a24:	sub	sp, fp, #4
   16a28:	pop	{fp, pc}
   16a2c:	push	{fp, lr}
   16a30:	add	fp, sp, #4
   16a34:	sub	sp, sp, #8
   16a38:	str	r0, [fp, #-8]
   16a3c:	str	r1, [fp, #-12]
   16a40:	ldr	r0, [fp, #-12]
   16a44:	bl	16028 <__assert_fail@plt+0x5160>
   16a48:	mov	r3, r0
   16a4c:	mov	r0, r3
   16a50:	ldr	r3, [fp, #-12]
   16a54:	mov	r2, r3
   16a58:	ldr	r1, [fp, #-8]
   16a5c:	bl	10cd0 <memcpy@plt>
   16a60:	mov	r3, r0
   16a64:	mov	r0, r3
   16a68:	sub	sp, fp, #4
   16a6c:	pop	{fp, pc}
   16a70:	push	{fp, lr}
   16a74:	add	fp, sp, #4
   16a78:	sub	sp, sp, #16
   16a7c:	str	r0, [fp, #-16]
   16a80:	str	r1, [fp, #-20]	; 0xffffffec
   16a84:	ldr	r3, [fp, #-20]	; 0xffffffec
   16a88:	add	r3, r3, #1
   16a8c:	mov	r0, r3
   16a90:	bl	16028 <__assert_fail@plt+0x5160>
   16a94:	mov	r3, r0
   16a98:	str	r3, [fp, #-8]
   16a9c:	ldr	r3, [fp, #-20]	; 0xffffffec
   16aa0:	ldr	r2, [fp, #-8]
   16aa4:	add	r3, r2, r3
   16aa8:	mov	r2, #0
   16aac:	strb	r2, [r3]
   16ab0:	ldr	r3, [fp, #-20]	; 0xffffffec
   16ab4:	mov	r2, r3
   16ab8:	ldr	r1, [fp, #-16]
   16abc:	ldr	r0, [fp, #-8]
   16ac0:	bl	10cd0 <memcpy@plt>
   16ac4:	mov	r3, r0
   16ac8:	mov	r0, r3
   16acc:	sub	sp, fp, #4
   16ad0:	pop	{fp, pc}
   16ad4:	push	{fp, lr}
   16ad8:	add	fp, sp, #4
   16adc:	sub	sp, sp, #8
   16ae0:	str	r0, [fp, #-8]
   16ae4:	ldr	r0, [fp, #-8]
   16ae8:	bl	10e14 <strlen@plt>
   16aec:	mov	r3, r0
   16af0:	add	r3, r3, #1
   16af4:	mov	r1, r3
   16af8:	ldr	r0, [fp, #-8]
   16afc:	bl	169ec <__assert_fail@plt+0x5b24>
   16b00:	mov	r3, r0
   16b04:	mov	r0, r3
   16b08:	sub	sp, fp, #4
   16b0c:	pop	{fp, pc}
   16b10:	push	{r4, r5, fp, lr}
   16b14:	add	fp, sp, #12
   16b18:	ldr	r3, [pc, #32]	; 16b40 <__assert_fail@plt+0x5c78>
   16b1c:	ldr	r4, [r3]
   16b20:	ldr	r0, [pc, #28]	; 16b44 <__assert_fail@plt+0x5c7c>
   16b24:	bl	10e08 <gettext@plt>
   16b28:	mov	r3, r0
   16b2c:	ldr	r2, [pc, #20]	; 16b48 <__assert_fail@plt+0x5c80>
   16b30:	mov	r1, #0
   16b34:	mov	r0, r4
   16b38:	bl	10d84 <error@plt>
   16b3c:	bl	10eb0 <abort@plt>
   16b40:	andeq	r9, r2, ip, ror #1
   16b44:	andeq	r8, r1, ip, ror #13
   16b48:	andeq	r8, r1, r0, lsl #14
   16b4c:	push	{r4, r5, fp, lr}
   16b50:	add	fp, sp, #12
   16b54:	sub	sp, sp, #16
   16b58:	str	r0, [fp, #-24]	; 0xffffffe8
   16b5c:	str	r1, [fp, #-28]	; 0xffffffe4
   16b60:	ldr	r3, [fp, #-24]	; 0xffffffe8
   16b64:	cmp	r3, #0
   16b68:	beq	16b78 <__assert_fail@plt+0x5cb0>
   16b6c:	ldr	r3, [fp, #-28]	; 0xffffffe4
   16b70:	cmp	r3, #0
   16b74:	bne	16b88 <__assert_fail@plt+0x5cc0>
   16b78:	mov	r3, #1
   16b7c:	str	r3, [fp, #-28]	; 0xffffffe4
   16b80:	ldr	r3, [fp, #-28]	; 0xffffffe4
   16b84:	str	r3, [fp, #-24]	; 0xffffffe8
   16b88:	mov	r1, #0
   16b8c:	ldr	r2, [fp, #-24]	; 0xffffffe8
   16b90:	ldr	r3, [fp, #-28]	; 0xffffffe4
   16b94:	umull	r2, r3, r2, r3
   16b98:	mov	r4, r3
   16b9c:	mov	r5, #0
   16ba0:	cmp	r4, #0
   16ba4:	beq	16bac <__assert_fail@plt+0x5ce4>
   16ba8:	mov	r1, #1
   16bac:	cmp	r2, #0
   16bb0:	bge	16bb8 <__assert_fail@plt+0x5cf0>
   16bb4:	mov	r1, #1
   16bb8:	mov	r3, r2
   16bbc:	str	r3, [fp, #-20]	; 0xffffffec
   16bc0:	mov	r3, r1
   16bc4:	and	r3, r3, #1
   16bc8:	uxtb	r3, r3
   16bcc:	cmp	r3, #0
   16bd0:	beq	16bec <__assert_fail@plt+0x5d24>
   16bd4:	bl	10e2c <__errno_location@plt>
   16bd8:	mov	r2, r0
   16bdc:	mov	r3, #12
   16be0:	str	r3, [r2]
   16be4:	mov	r3, #0
   16be8:	b	16c04 <__assert_fail@plt+0x5d3c>
   16bec:	ldr	r1, [fp, #-28]	; 0xffffffe4
   16bf0:	ldr	r0, [fp, #-24]	; 0xffffffe8
   16bf4:	bl	10c64 <calloc@plt>
   16bf8:	mov	r3, r0
   16bfc:	str	r3, [fp, #-16]
   16c00:	ldr	r3, [fp, #-16]
   16c04:	mov	r0, r3
   16c08:	sub	sp, fp, #12
   16c0c:	pop	{r4, r5, fp, pc}
   16c10:	push	{r4, r5, fp, lr}
   16c14:	add	fp, sp, #12
   16c18:	sub	sp, sp, #16
   16c1c:	str	r0, [fp, #-24]	; 0xffffffe8
   16c20:	ldr	r3, [fp, #-24]	; 0xffffffe8
   16c24:	cmp	r3, #0
   16c28:	bne	16c34 <__assert_fail@plt+0x5d6c>
   16c2c:	mov	r3, #1
   16c30:	str	r3, [fp, #-24]	; 0xffffffe8
   16c34:	mov	r1, #0
   16c38:	ldr	r3, [fp, #-24]	; 0xffffffe8
   16c3c:	mov	r2, r3
   16c40:	mov	r3, #0
   16c44:	mov	r4, r3
   16c48:	mov	r5, #0
   16c4c:	cmp	r4, #0
   16c50:	beq	16c58 <__assert_fail@plt+0x5d90>
   16c54:	mov	r1, #1
   16c58:	cmp	r2, #0
   16c5c:	bge	16c64 <__assert_fail@plt+0x5d9c>
   16c60:	mov	r1, #1
   16c64:	mov	r3, r2
   16c68:	str	r3, [fp, #-20]	; 0xffffffec
   16c6c:	mov	r3, r1
   16c70:	and	r3, r3, #1
   16c74:	uxtb	r3, r3
   16c78:	cmp	r3, #0
   16c7c:	beq	16c98 <__assert_fail@plt+0x5dd0>
   16c80:	bl	10e2c <__errno_location@plt>
   16c84:	mov	r2, r0
   16c88:	mov	r3, #12
   16c8c:	str	r3, [r2]
   16c90:	mov	r3, #0
   16c94:	b	16cac <__assert_fail@plt+0x5de4>
   16c98:	ldr	r0, [fp, #-24]	; 0xffffffe8
   16c9c:	bl	10da8 <malloc@plt>
   16ca0:	mov	r3, r0
   16ca4:	str	r3, [fp, #-16]
   16ca8:	ldr	r3, [fp, #-16]
   16cac:	mov	r0, r3
   16cb0:	sub	sp, fp, #12
   16cb4:	pop	{r4, r5, fp, pc}
   16cb8:	push	{r4, r5, fp, lr}
   16cbc:	add	fp, sp, #12
   16cc0:	sub	sp, sp, #16
   16cc4:	str	r0, [fp, #-24]	; 0xffffffe8
   16cc8:	str	r1, [fp, #-28]	; 0xffffffe4
   16ccc:	ldr	r3, [fp, #-24]	; 0xffffffe8
   16cd0:	cmp	r3, #0
   16cd4:	bne	16ce8 <__assert_fail@plt+0x5e20>
   16cd8:	ldr	r0, [fp, #-28]	; 0xffffffe4
   16cdc:	bl	16c10 <__assert_fail@plt+0x5d48>
   16ce0:	mov	r3, r0
   16ce4:	b	16d7c <__assert_fail@plt+0x5eb4>
   16ce8:	ldr	r3, [fp, #-28]	; 0xffffffe4
   16cec:	cmp	r3, #0
   16cf0:	bne	16d04 <__assert_fail@plt+0x5e3c>
   16cf4:	ldr	r0, [fp, #-24]	; 0xffffffe8
   16cf8:	bl	125e8 <__assert_fail@plt+0x1720>
   16cfc:	mov	r3, #0
   16d00:	b	16d7c <__assert_fail@plt+0x5eb4>
   16d04:	mov	r1, #0
   16d08:	ldr	r3, [fp, #-28]	; 0xffffffe4
   16d0c:	mov	r2, r3
   16d10:	mov	r3, #0
   16d14:	mov	r4, r3
   16d18:	mov	r5, #0
   16d1c:	cmp	r4, #0
   16d20:	beq	16d28 <__assert_fail@plt+0x5e60>
   16d24:	mov	r1, #1
   16d28:	cmp	r2, #0
   16d2c:	bge	16d34 <__assert_fail@plt+0x5e6c>
   16d30:	mov	r1, #1
   16d34:	mov	r3, r2
   16d38:	str	r3, [fp, #-20]	; 0xffffffec
   16d3c:	mov	r3, r1
   16d40:	and	r3, r3, #1
   16d44:	uxtb	r3, r3
   16d48:	cmp	r3, #0
   16d4c:	beq	16d68 <__assert_fail@plt+0x5ea0>
   16d50:	bl	10e2c <__errno_location@plt>
   16d54:	mov	r2, r0
   16d58:	mov	r3, #12
   16d5c:	str	r3, [r2]
   16d60:	mov	r3, #0
   16d64:	b	16d7c <__assert_fail@plt+0x5eb4>
   16d68:	ldr	r1, [fp, #-28]	; 0xffffffe4
   16d6c:	ldr	r0, [fp, #-24]	; 0xffffffe8
   16d70:	bl	10d18 <realloc@plt>
   16d74:	str	r0, [fp, #-16]
   16d78:	ldr	r3, [fp, #-16]
   16d7c:	mov	r0, r3
   16d80:	sub	sp, fp, #12
   16d84:	pop	{r4, r5, fp, pc}
   16d88:	push	{r4, r5, fp, lr}
   16d8c:	add	fp, sp, #12
   16d90:	sub	sp, sp, #16
   16d94:	str	r0, [fp, #-24]	; 0xffffffe8
   16d98:	str	r1, [fp, #-28]	; 0xffffffe4
   16d9c:	ldr	r5, [fp, #-24]	; 0xffffffe8
   16da0:	ldr	r4, [fp, #-28]	; 0xffffffe4
   16da4:	cmp	r5, r4
   16da8:	bne	16db4 <__assert_fail@plt+0x5eec>
   16dac:	mov	r3, #0
   16db0:	b	16e14 <__assert_fail@plt+0x5f4c>
   16db4:	ldrb	r3, [r5]
   16db8:	mov	r0, r3
   16dbc:	bl	17660 <__assert_fail@plt+0x6798>
   16dc0:	mov	r3, r0
   16dc4:	strb	r3, [fp, #-13]
   16dc8:	ldrb	r3, [r4]
   16dcc:	mov	r0, r3
   16dd0:	bl	17660 <__assert_fail@plt+0x6798>
   16dd4:	mov	r3, r0
   16dd8:	strb	r3, [fp, #-14]
   16ddc:	ldrb	r3, [fp, #-13]
   16de0:	cmp	r3, #0
   16de4:	beq	16e04 <__assert_fail@plt+0x5f3c>
   16de8:	add	r5, r5, #1
   16dec:	add	r4, r4, #1
   16df0:	ldrb	r2, [fp, #-13]
   16df4:	ldrb	r3, [fp, #-14]
   16df8:	cmp	r2, r3
   16dfc:	beq	16db4 <__assert_fail@plt+0x5eec>
   16e00:	b	16e08 <__assert_fail@plt+0x5f40>
   16e04:	nop			; (mov r0, r0)
   16e08:	ldrb	r2, [fp, #-13]
   16e0c:	ldrb	r3, [fp, #-14]
   16e10:	sub	r3, r2, r3
   16e14:	mov	r0, r3
   16e18:	sub	sp, fp, #12
   16e1c:	pop	{r4, r5, fp, pc}
   16e20:	push	{fp, lr}
   16e24:	add	fp, sp, #4
   16e28:	sub	sp, sp, #16
   16e2c:	str	r0, [fp, #-16]
   16e30:	ldr	r0, [fp, #-16]
   16e34:	bl	10d60 <__fpending@plt>
   16e38:	mov	r3, r0
   16e3c:	cmp	r3, #0
   16e40:	movne	r3, #1
   16e44:	moveq	r3, #0
   16e48:	strb	r3, [fp, #-5]
   16e4c:	ldr	r0, [fp, #-16]
   16e50:	bl	10d6c <ferror_unlocked@plt>
   16e54:	mov	r3, r0
   16e58:	cmp	r3, #0
   16e5c:	movne	r3, #1
   16e60:	moveq	r3, #0
   16e64:	strb	r3, [fp, #-6]
   16e68:	ldr	r0, [fp, #-16]
   16e6c:	bl	12448 <__assert_fail@plt+0x1580>
   16e70:	mov	r3, r0
   16e74:	cmp	r3, #0
   16e78:	movne	r3, #1
   16e7c:	moveq	r3, #0
   16e80:	strb	r3, [fp, #-7]
   16e84:	ldrb	r3, [fp, #-6]
   16e88:	cmp	r3, #0
   16e8c:	bne	16ebc <__assert_fail@plt+0x5ff4>
   16e90:	ldrb	r3, [fp, #-7]
   16e94:	cmp	r3, #0
   16e98:	beq	16ee8 <__assert_fail@plt+0x6020>
   16e9c:	ldrb	r3, [fp, #-5]
   16ea0:	cmp	r3, #0
   16ea4:	bne	16ebc <__assert_fail@plt+0x5ff4>
   16ea8:	bl	10e2c <__errno_location@plt>
   16eac:	mov	r3, r0
   16eb0:	ldr	r3, [r3]
   16eb4:	cmp	r3, #9
   16eb8:	beq	16ee8 <__assert_fail@plt+0x6020>
   16ebc:	ldrb	r3, [fp, #-7]
   16ec0:	eor	r3, r3, #1
   16ec4:	uxtb	r3, r3
   16ec8:	cmp	r3, #0
   16ecc:	beq	16ee0 <__assert_fail@plt+0x6018>
   16ed0:	bl	10e2c <__errno_location@plt>
   16ed4:	mov	r2, r0
   16ed8:	mov	r3, #0
   16edc:	str	r3, [r2]
   16ee0:	mvn	r3, #0
   16ee4:	b	16eec <__assert_fail@plt+0x6024>
   16ee8:	mov	r3, #0
   16eec:	mov	r0, r3
   16ef0:	sub	sp, fp, #4
   16ef4:	pop	{fp, pc}
   16ef8:	push	{fp, lr}
   16efc:	add	fp, sp, #4
   16f00:	bl	10e2c <__errno_location@plt>
   16f04:	mov	r2, r0
   16f08:	mov	r3, #12
   16f0c:	str	r3, [r2]
   16f10:	mov	r3, #0
   16f14:	mov	r0, r3
   16f18:	pop	{fp, pc}
   16f1c:	push	{fp, lr}
   16f20:	add	fp, sp, #4
   16f24:	sub	sp, sp, #8
   16f28:	str	r0, [fp, #-8]
   16f2c:	ldr	r3, [fp, #-8]
   16f30:	mov	r0, r3
   16f34:	bl	16c10 <__assert_fail@plt+0x5d48>
   16f38:	mov	r3, r0
   16f3c:	mov	r0, r3
   16f40:	sub	sp, fp, #4
   16f44:	pop	{fp, pc}
   16f48:	push	{fp, lr}
   16f4c:	add	fp, sp, #4
   16f50:	sub	sp, sp, #8
   16f54:	str	r0, [fp, #-8]
   16f58:	str	r1, [fp, #-12]
   16f5c:	ldr	r3, [fp, #-12]
   16f60:	cmp	r3, #0
   16f64:	moveq	r3, #1
   16f68:	movne	r3, #0
   16f6c:	uxtb	r3, r3
   16f70:	mov	r2, r3
   16f74:	ldr	r3, [fp, #-12]
   16f78:	orr	r3, r2, r3
   16f7c:	mov	r1, r3
   16f80:	ldr	r0, [fp, #-8]
   16f84:	bl	16cb8 <__assert_fail@plt+0x5df0>
   16f88:	mov	r3, r0
   16f8c:	mov	r0, r3
   16f90:	sub	sp, fp, #4
   16f94:	pop	{fp, pc}
   16f98:	push	{fp, lr}
   16f9c:	add	fp, sp, #4
   16fa0:	sub	sp, sp, #8
   16fa4:	str	r0, [fp, #-8]
   16fa8:	str	r1, [fp, #-12]
   16fac:	ldr	r3, [fp, #-8]
   16fb0:	ldr	r2, [fp, #-12]
   16fb4:	mov	r1, r2
   16fb8:	mov	r0, r3
   16fbc:	bl	16b4c <__assert_fail@plt+0x5c84>
   16fc0:	mov	r3, r0
   16fc4:	mov	r0, r3
   16fc8:	sub	sp, fp, #4
   16fcc:	pop	{fp, pc}
   16fd0:	push	{fp, lr}
   16fd4:	add	fp, sp, #4
   16fd8:	sub	sp, sp, #16
   16fdc:	str	r0, [fp, #-8]
   16fe0:	str	r1, [fp, #-12]
   16fe4:	str	r2, [fp, #-16]
   16fe8:	ldr	r3, [fp, #-12]
   16fec:	cmp	r3, #0
   16ff0:	beq	17000 <__assert_fail@plt+0x6138>
   16ff4:	ldr	r3, [fp, #-16]
   16ff8:	cmp	r3, #0
   16ffc:	bne	17010 <__assert_fail@plt+0x6148>
   17000:	mov	r3, #1
   17004:	str	r3, [fp, #-16]
   17008:	ldr	r3, [fp, #-16]
   1700c:	str	r3, [fp, #-12]
   17010:	ldr	r3, [fp, #-12]
   17014:	ldr	r2, [fp, #-16]
   17018:	mov	r1, r3
   1701c:	ldr	r0, [fp, #-8]
   17020:	bl	1713c <__assert_fail@plt+0x6274>
   17024:	mov	r3, r0
   17028:	mov	r0, r3
   1702c:	sub	sp, fp, #4
   17030:	pop	{fp, pc}
   17034:	push	{fp, lr}
   17038:	add	fp, sp, #4
   1703c:	sub	sp, sp, #8
   17040:	mov	r0, #14
   17044:	bl	10e8c <nl_langinfo@plt>
   17048:	str	r0, [fp, #-8]
   1704c:	ldr	r3, [fp, #-8]
   17050:	cmp	r3, #0
   17054:	bne	17060 <__assert_fail@plt+0x6198>
   17058:	ldr	r3, [pc, #40]	; 17088 <__assert_fail@plt+0x61c0>
   1705c:	str	r3, [fp, #-8]
   17060:	ldr	r3, [fp, #-8]
   17064:	ldrb	r3, [r3]
   17068:	cmp	r3, #0
   1706c:	bne	17078 <__assert_fail@plt+0x61b0>
   17070:	ldr	r3, [pc, #20]	; 1708c <__assert_fail@plt+0x61c4>
   17074:	str	r3, [fp, #-8]
   17078:	ldr	r3, [fp, #-8]
   1707c:	mov	r0, r3
   17080:	sub	sp, fp, #4
   17084:	pop	{fp, pc}
   17088:	andeq	r8, r1, r4, lsl #14
   1708c:	andeq	r8, r1, r8, lsl #14
   17090:	push	{fp, lr}
   17094:	add	fp, sp, #4
   17098:	sub	sp, sp, #32
   1709c:	str	r0, [fp, #-24]	; 0xffffffe8
   170a0:	str	r1, [fp, #-28]	; 0xffffffe4
   170a4:	str	r2, [fp, #-32]	; 0xffffffe0
   170a8:	str	r3, [fp, #-36]	; 0xffffffdc
   170ac:	ldr	r3, [fp, #-24]	; 0xffffffe8
   170b0:	cmp	r3, #0
   170b4:	bne	170c0 <__assert_fail@plt+0x61f8>
   170b8:	sub	r3, fp, #16
   170bc:	str	r3, [fp, #-24]	; 0xffffffe8
   170c0:	ldr	r3, [fp, #-36]	; 0xffffffdc
   170c4:	ldr	r2, [fp, #-32]	; 0xffffffe0
   170c8:	ldr	r1, [fp, #-28]	; 0xffffffe4
   170cc:	ldr	r0, [fp, #-24]	; 0xffffffe8
   170d0:	bl	10d78 <mbrtowc@plt>
   170d4:	str	r0, [fp, #-8]
   170d8:	ldr	r3, [fp, #-8]
   170dc:	cmn	r3, #3
   170e0:	bls	1712c <__assert_fail@plt+0x6264>
   170e4:	ldr	r3, [fp, #-32]	; 0xffffffe0
   170e8:	cmp	r3, #0
   170ec:	beq	1712c <__assert_fail@plt+0x6264>
   170f0:	mov	r0, #0
   170f4:	bl	176e0 <__assert_fail@plt+0x6818>
   170f8:	mov	r3, r0
   170fc:	eor	r3, r3, #1
   17100:	uxtb	r3, r3
   17104:	cmp	r3, #0
   17108:	beq	1712c <__assert_fail@plt+0x6264>
   1710c:	ldr	r3, [fp, #-28]	; 0xffffffe4
   17110:	ldrb	r3, [r3]
   17114:	strb	r3, [fp, #-9]
   17118:	ldrb	r2, [fp, #-9]
   1711c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   17120:	str	r2, [r3]
   17124:	mov	r3, #1
   17128:	b	17130 <__assert_fail@plt+0x6268>
   1712c:	ldr	r3, [fp, #-8]
   17130:	mov	r0, r3
   17134:	sub	sp, fp, #4
   17138:	pop	{fp, pc}
   1713c:	push	{fp, lr}
   17140:	add	fp, sp, #4
   17144:	sub	sp, sp, #24
   17148:	str	r0, [fp, #-16]
   1714c:	str	r1, [fp, #-20]	; 0xffffffec
   17150:	str	r2, [fp, #-24]	; 0xffffffe8
   17154:	ldr	r3, [fp, #-24]	; 0xffffffe8
   17158:	cmp	r3, #0
   1715c:	beq	17198 <__assert_fail@plt+0x62d0>
   17160:	ldr	r1, [fp, #-24]	; 0xffffffe8
   17164:	mvn	r0, #0
   17168:	bl	178e4 <__assert_fail@plt+0x6a1c>
   1716c:	mov	r3, r0
   17170:	mov	r2, r3
   17174:	ldr	r3, [fp, #-20]	; 0xffffffec
   17178:	cmp	r2, r3
   1717c:	bcs	17198 <__assert_fail@plt+0x62d0>
   17180:	ldr	r3, [fp, #-20]	; 0xffffffec
   17184:	ldr	r2, [fp, #-24]	; 0xffffffe8
   17188:	mul	r3, r2, r3
   1718c:	str	r3, [fp, #-8]
   17190:	mov	r3, #1
   17194:	b	171ac <__assert_fail@plt+0x62e4>
   17198:	ldr	r3, [fp, #-20]	; 0xffffffec
   1719c:	ldr	r2, [fp, #-24]	; 0xffffffe8
   171a0:	mul	r3, r2, r3
   171a4:	str	r3, [fp, #-8]
   171a8:	mov	r3, #0
   171ac:	cmp	r3, #0
   171b0:	beq	171cc <__assert_fail@plt+0x6304>
   171b4:	bl	10e2c <__errno_location@plt>
   171b8:	mov	r2, r0
   171bc:	mov	r3, #12
   171c0:	str	r3, [r2]
   171c4:	mov	r3, #0
   171c8:	b	171e0 <__assert_fail@plt+0x6318>
   171cc:	ldr	r3, [fp, #-8]
   171d0:	mov	r1, r3
   171d4:	ldr	r0, [fp, #-16]
   171d8:	bl	16cb8 <__assert_fail@plt+0x5df0>
   171dc:	mov	r3, r0
   171e0:	mov	r0, r3
   171e4:	sub	sp, fp, #4
   171e8:	pop	{fp, pc}
   171ec:	push	{fp}		; (str fp, [sp, #-4]!)
   171f0:	add	fp, sp, #0
   171f4:	sub	sp, sp, #12
   171f8:	str	r0, [fp, #-8]
   171fc:	ldr	r3, [fp, #-8]
   17200:	cmp	r3, #90	; 0x5a
   17204:	bgt	17220 <__assert_fail@plt+0x6358>
   17208:	cmp	r3, #65	; 0x41
   1720c:	bge	1722c <__assert_fail@plt+0x6364>
   17210:	sub	r3, r3, #48	; 0x30
   17214:	cmp	r3, #9
   17218:	bhi	17234 <__assert_fail@plt+0x636c>
   1721c:	b	1722c <__assert_fail@plt+0x6364>
   17220:	sub	r3, r3, #97	; 0x61
   17224:	cmp	r3, #25
   17228:	bhi	17234 <__assert_fail@plt+0x636c>
   1722c:	mov	r3, #1
   17230:	b	17238 <__assert_fail@plt+0x6370>
   17234:	mov	r3, #0
   17238:	mov	r0, r3
   1723c:	add	sp, fp, #0
   17240:	pop	{fp}		; (ldr fp, [sp], #4)
   17244:	bx	lr
   17248:	push	{fp}		; (str fp, [sp, #-4]!)
   1724c:	add	fp, sp, #0
   17250:	sub	sp, sp, #12
   17254:	str	r0, [fp, #-8]
   17258:	ldr	r3, [fp, #-8]
   1725c:	cmp	r3, #65	; 0x41
   17260:	blt	17280 <__assert_fail@plt+0x63b8>
   17264:	cmp	r3, #90	; 0x5a
   17268:	ble	17278 <__assert_fail@plt+0x63b0>
   1726c:	sub	r3, r3, #97	; 0x61
   17270:	cmp	r3, #25
   17274:	bhi	17280 <__assert_fail@plt+0x63b8>
   17278:	mov	r3, #1
   1727c:	b	17284 <__assert_fail@plt+0x63bc>
   17280:	mov	r3, #0
   17284:	mov	r0, r3
   17288:	add	sp, fp, #0
   1728c:	pop	{fp}		; (ldr fp, [sp], #4)
   17290:	bx	lr
   17294:	push	{fp}		; (str fp, [sp, #-4]!)
   17298:	add	fp, sp, #0
   1729c:	sub	sp, sp, #12
   172a0:	str	r0, [fp, #-8]
   172a4:	ldr	r3, [fp, #-8]
   172a8:	add	r3, r3, #0
   172ac:	cmp	r3, #127	; 0x7f
   172b0:	bhi	172bc <__assert_fail@plt+0x63f4>
   172b4:	mov	r3, #1
   172b8:	b	172c0 <__assert_fail@plt+0x63f8>
   172bc:	mov	r3, #0
   172c0:	mov	r0, r3
   172c4:	add	sp, fp, #0
   172c8:	pop	{fp}		; (ldr fp, [sp], #4)
   172cc:	bx	lr
   172d0:	push	{fp}		; (str fp, [sp, #-4]!)
   172d4:	add	fp, sp, #0
   172d8:	sub	sp, sp, #12
   172dc:	str	r0, [fp, #-8]
   172e0:	ldr	r3, [fp, #-8]
   172e4:	cmp	r3, #32
   172e8:	beq	172f8 <__assert_fail@plt+0x6430>
   172ec:	ldr	r3, [fp, #-8]
   172f0:	cmp	r3, #9
   172f4:	bne	17300 <__assert_fail@plt+0x6438>
   172f8:	mov	r3, #1
   172fc:	b	17304 <__assert_fail@plt+0x643c>
   17300:	mov	r3, #0
   17304:	and	r3, r3, #1
   17308:	uxtb	r3, r3
   1730c:	mov	r0, r3
   17310:	add	sp, fp, #0
   17314:	pop	{fp}		; (ldr fp, [sp], #4)
   17318:	bx	lr
   1731c:	push	{fp}		; (str fp, [sp, #-4]!)
   17320:	add	fp, sp, #0
   17324:	sub	sp, sp, #12
   17328:	str	r0, [fp, #-8]
   1732c:	ldr	r3, [fp, #-8]
   17330:	cmp	r3, #0
   17334:	blt	17350 <__assert_fail@plt+0x6488>
   17338:	cmp	r3, #31
   1733c:	ble	17348 <__assert_fail@plt+0x6480>
   17340:	cmp	r3, #127	; 0x7f
   17344:	bne	17350 <__assert_fail@plt+0x6488>
   17348:	mov	r3, #1
   1734c:	b	17354 <__assert_fail@plt+0x648c>
   17350:	mov	r3, #0
   17354:	mov	r0, r3
   17358:	add	sp, fp, #0
   1735c:	pop	{fp}		; (ldr fp, [sp], #4)
   17360:	bx	lr
   17364:	push	{fp}		; (str fp, [sp, #-4]!)
   17368:	add	fp, sp, #0
   1736c:	sub	sp, sp, #12
   17370:	str	r0, [fp, #-8]
   17374:	ldr	r3, [fp, #-8]
   17378:	sub	r3, r3, #48	; 0x30
   1737c:	cmp	r3, #9
   17380:	bhi	1738c <__assert_fail@plt+0x64c4>
   17384:	mov	r3, #1
   17388:	b	17390 <__assert_fail@plt+0x64c8>
   1738c:	mov	r3, #0
   17390:	mov	r0, r3
   17394:	add	sp, fp, #0
   17398:	pop	{fp}		; (ldr fp, [sp], #4)
   1739c:	bx	lr
   173a0:	push	{fp}		; (str fp, [sp, #-4]!)
   173a4:	add	fp, sp, #0
   173a8:	sub	sp, sp, #12
   173ac:	str	r0, [fp, #-8]
   173b0:	ldr	r3, [fp, #-8]
   173b4:	sub	r3, r3, #33	; 0x21
   173b8:	cmp	r3, #93	; 0x5d
   173bc:	bhi	173c8 <__assert_fail@plt+0x6500>
   173c0:	mov	r3, #1
   173c4:	b	173cc <__assert_fail@plt+0x6504>
   173c8:	mov	r3, #0
   173cc:	mov	r0, r3
   173d0:	add	sp, fp, #0
   173d4:	pop	{fp}		; (ldr fp, [sp], #4)
   173d8:	bx	lr
   173dc:	push	{fp}		; (str fp, [sp, #-4]!)
   173e0:	add	fp, sp, #0
   173e4:	sub	sp, sp, #12
   173e8:	str	r0, [fp, #-8]
   173ec:	ldr	r3, [fp, #-8]
   173f0:	sub	r3, r3, #97	; 0x61
   173f4:	cmp	r3, #25
   173f8:	bhi	17404 <__assert_fail@plt+0x653c>
   173fc:	mov	r3, #1
   17400:	b	17408 <__assert_fail@plt+0x6540>
   17404:	mov	r3, #0
   17408:	mov	r0, r3
   1740c:	add	sp, fp, #0
   17410:	pop	{fp}		; (ldr fp, [sp], #4)
   17414:	bx	lr
   17418:	push	{fp}		; (str fp, [sp, #-4]!)
   1741c:	add	fp, sp, #0
   17420:	sub	sp, sp, #12
   17424:	str	r0, [fp, #-8]
   17428:	ldr	r3, [fp, #-8]
   1742c:	sub	r3, r3, #32
   17430:	cmp	r3, #94	; 0x5e
   17434:	bhi	17440 <__assert_fail@plt+0x6578>
   17438:	mov	r3, #1
   1743c:	b	17444 <__assert_fail@plt+0x657c>
   17440:	mov	r3, #0
   17444:	mov	r0, r3
   17448:	add	sp, fp, #0
   1744c:	pop	{fp}		; (ldr fp, [sp], #4)
   17450:	bx	lr
   17454:	push	{fp}		; (str fp, [sp, #-4]!)
   17458:	add	fp, sp, #0
   1745c:	sub	sp, sp, #12
   17460:	str	r0, [fp, #-8]
   17464:	ldr	r3, [fp, #-8]
   17468:	cmp	r3, #64	; 0x40
   1746c:	bgt	17488 <__assert_fail@plt+0x65c0>
   17470:	cmp	r3, #58	; 0x3a
   17474:	bge	174a4 <__assert_fail@plt+0x65dc>
   17478:	sub	r3, r3, #33	; 0x21
   1747c:	cmp	r3, #14
   17480:	bhi	174ac <__assert_fail@plt+0x65e4>
   17484:	b	174a4 <__assert_fail@plt+0x65dc>
   17488:	cmp	r3, #91	; 0x5b
   1748c:	blt	174ac <__assert_fail@plt+0x65e4>
   17490:	cmp	r3, #96	; 0x60
   17494:	ble	174a4 <__assert_fail@plt+0x65dc>
   17498:	sub	r3, r3, #123	; 0x7b
   1749c:	cmp	r3, #3
   174a0:	bhi	174ac <__assert_fail@plt+0x65e4>
   174a4:	mov	r3, #1
   174a8:	b	174b0 <__assert_fail@plt+0x65e8>
   174ac:	mov	r3, #0
   174b0:	mov	r0, r3
   174b4:	add	sp, fp, #0
   174b8:	pop	{fp}		; (ldr fp, [sp], #4)
   174bc:	bx	lr
   174c0:	push	{fp}		; (str fp, [sp, #-4]!)
   174c4:	add	fp, sp, #0
   174c8:	sub	sp, sp, #12
   174cc:	str	r0, [fp, #-8]
   174d0:	ldr	r3, [fp, #-8]
   174d4:	cmp	r3, #9
   174d8:	blt	174f4 <__assert_fail@plt+0x662c>
   174dc:	cmp	r3, #13
   174e0:	ble	174ec <__assert_fail@plt+0x6624>
   174e4:	cmp	r3, #32
   174e8:	bne	174f4 <__assert_fail@plt+0x662c>
   174ec:	mov	r3, #1
   174f0:	b	174f8 <__assert_fail@plt+0x6630>
   174f4:	mov	r3, #0
   174f8:	mov	r0, r3
   174fc:	add	sp, fp, #0
   17500:	pop	{fp}		; (ldr fp, [sp], #4)
   17504:	bx	lr
   17508:	push	{fp}		; (str fp, [sp, #-4]!)
   1750c:	add	fp, sp, #0
   17510:	sub	sp, sp, #12
   17514:	str	r0, [fp, #-8]
   17518:	ldr	r3, [fp, #-8]
   1751c:	sub	r3, r3, #65	; 0x41
   17520:	cmp	r3, #25
   17524:	bhi	17530 <__assert_fail@plt+0x6668>
   17528:	mov	r3, #1
   1752c:	b	17534 <__assert_fail@plt+0x666c>
   17530:	mov	r3, #0
   17534:	mov	r0, r3
   17538:	add	sp, fp, #0
   1753c:	pop	{fp}		; (ldr fp, [sp], #4)
   17540:	bx	lr
   17544:	push	{fp}		; (str fp, [sp, #-4]!)
   17548:	add	fp, sp, #0
   1754c:	sub	sp, sp, #12
   17550:	str	r0, [fp, #-8]
   17554:	ldr	r3, [fp, #-8]
   17558:	sub	r3, r3, #48	; 0x30
   1755c:	cmp	r3, #54	; 0x36
   17560:	addls	pc, pc, r3, lsl #2
   17564:	b	1764c <__assert_fail@plt+0x6784>
   17568:	b	17644 <__assert_fail@plt+0x677c>
   1756c:	b	17644 <__assert_fail@plt+0x677c>
   17570:	b	17644 <__assert_fail@plt+0x677c>
   17574:	b	17644 <__assert_fail@plt+0x677c>
   17578:	b	17644 <__assert_fail@plt+0x677c>
   1757c:	b	17644 <__assert_fail@plt+0x677c>
   17580:	b	17644 <__assert_fail@plt+0x677c>
   17584:	b	17644 <__assert_fail@plt+0x677c>
   17588:	b	17644 <__assert_fail@plt+0x677c>
   1758c:	b	17644 <__assert_fail@plt+0x677c>
   17590:	b	1764c <__assert_fail@plt+0x6784>
   17594:	b	1764c <__assert_fail@plt+0x6784>
   17598:	b	1764c <__assert_fail@plt+0x6784>
   1759c:	b	1764c <__assert_fail@plt+0x6784>
   175a0:	b	1764c <__assert_fail@plt+0x6784>
   175a4:	b	1764c <__assert_fail@plt+0x6784>
   175a8:	b	1764c <__assert_fail@plt+0x6784>
   175ac:	b	17644 <__assert_fail@plt+0x677c>
   175b0:	b	17644 <__assert_fail@plt+0x677c>
   175b4:	b	17644 <__assert_fail@plt+0x677c>
   175b8:	b	17644 <__assert_fail@plt+0x677c>
   175bc:	b	17644 <__assert_fail@plt+0x677c>
   175c0:	b	17644 <__assert_fail@plt+0x677c>
   175c4:	b	1764c <__assert_fail@plt+0x6784>
   175c8:	b	1764c <__assert_fail@plt+0x6784>
   175cc:	b	1764c <__assert_fail@plt+0x6784>
   175d0:	b	1764c <__assert_fail@plt+0x6784>
   175d4:	b	1764c <__assert_fail@plt+0x6784>
   175d8:	b	1764c <__assert_fail@plt+0x6784>
   175dc:	b	1764c <__assert_fail@plt+0x6784>
   175e0:	b	1764c <__assert_fail@plt+0x6784>
   175e4:	b	1764c <__assert_fail@plt+0x6784>
   175e8:	b	1764c <__assert_fail@plt+0x6784>
   175ec:	b	1764c <__assert_fail@plt+0x6784>
   175f0:	b	1764c <__assert_fail@plt+0x6784>
   175f4:	b	1764c <__assert_fail@plt+0x6784>
   175f8:	b	1764c <__assert_fail@plt+0x6784>
   175fc:	b	1764c <__assert_fail@plt+0x6784>
   17600:	b	1764c <__assert_fail@plt+0x6784>
   17604:	b	1764c <__assert_fail@plt+0x6784>
   17608:	b	1764c <__assert_fail@plt+0x6784>
   1760c:	b	1764c <__assert_fail@plt+0x6784>
   17610:	b	1764c <__assert_fail@plt+0x6784>
   17614:	b	1764c <__assert_fail@plt+0x6784>
   17618:	b	1764c <__assert_fail@plt+0x6784>
   1761c:	b	1764c <__assert_fail@plt+0x6784>
   17620:	b	1764c <__assert_fail@plt+0x6784>
   17624:	b	1764c <__assert_fail@plt+0x6784>
   17628:	b	1764c <__assert_fail@plt+0x6784>
   1762c:	b	17644 <__assert_fail@plt+0x677c>
   17630:	b	17644 <__assert_fail@plt+0x677c>
   17634:	b	17644 <__assert_fail@plt+0x677c>
   17638:	b	17644 <__assert_fail@plt+0x677c>
   1763c:	b	17644 <__assert_fail@plt+0x677c>
   17640:	b	17644 <__assert_fail@plt+0x677c>
   17644:	mov	r3, #1
   17648:	b	17650 <__assert_fail@plt+0x6788>
   1764c:	mov	r3, #0
   17650:	mov	r0, r3
   17654:	add	sp, fp, #0
   17658:	pop	{fp}		; (ldr fp, [sp], #4)
   1765c:	bx	lr
   17660:	push	{fp}		; (str fp, [sp, #-4]!)
   17664:	add	fp, sp, #0
   17668:	sub	sp, sp, #12
   1766c:	str	r0, [fp, #-8]
   17670:	ldr	r3, [fp, #-8]
   17674:	sub	r3, r3, #65	; 0x41
   17678:	cmp	r3, #25
   1767c:	bhi	1768c <__assert_fail@plt+0x67c4>
   17680:	ldr	r3, [fp, #-8]
   17684:	add	r3, r3, #32
   17688:	b	17690 <__assert_fail@plt+0x67c8>
   1768c:	ldr	r3, [fp, #-8]
   17690:	mov	r0, r3
   17694:	add	sp, fp, #0
   17698:	pop	{fp}		; (ldr fp, [sp], #4)
   1769c:	bx	lr
   176a0:	push	{fp}		; (str fp, [sp, #-4]!)
   176a4:	add	fp, sp, #0
   176a8:	sub	sp, sp, #12
   176ac:	str	r0, [fp, #-8]
   176b0:	ldr	r3, [fp, #-8]
   176b4:	sub	r3, r3, #97	; 0x61
   176b8:	cmp	r3, #25
   176bc:	bhi	176cc <__assert_fail@plt+0x6804>
   176c0:	ldr	r3, [fp, #-8]
   176c4:	sub	r3, r3, #32
   176c8:	b	176d0 <__assert_fail@plt+0x6808>
   176cc:	ldr	r3, [fp, #-8]
   176d0:	mov	r0, r3
   176d4:	add	sp, fp, #0
   176d8:	pop	{fp}		; (ldr fp, [sp], #4)
   176dc:	bx	lr
   176e0:	push	{fp, lr}
   176e4:	add	fp, sp, #4
   176e8:	sub	sp, sp, #272	; 0x110
   176ec:	str	r0, [fp, #-272]	; 0xfffffef0
   176f0:	sub	r3, fp, #264	; 0x108
   176f4:	ldr	r2, [pc, #116]	; 17770 <__assert_fail@plt+0x68a8>
   176f8:	mov	r1, r3
   176fc:	ldr	r0, [fp, #-272]	; 0xfffffef0
   17700:	bl	17884 <__assert_fail@plt+0x69bc>
   17704:	mov	r3, r0
   17708:	cmp	r3, #0
   1770c:	beq	17718 <__assert_fail@plt+0x6850>
   17710:	mov	r3, #0
   17714:	b	17764 <__assert_fail@plt+0x689c>
   17718:	sub	r3, fp, #264	; 0x108
   1771c:	ldr	r1, [pc, #80]	; 17774 <__assert_fail@plt+0x68ac>
   17720:	mov	r0, r3
   17724:	bl	10c88 <strcmp@plt>
   17728:	mov	r3, r0
   1772c:	cmp	r3, #0
   17730:	beq	17758 <__assert_fail@plt+0x6890>
   17734:	sub	r3, fp, #264	; 0x108
   17738:	ldr	r1, [pc, #56]	; 17778 <__assert_fail@plt+0x68b0>
   1773c:	mov	r0, r3
   17740:	bl	10c88 <strcmp@plt>
   17744:	mov	r3, r0
   17748:	cmp	r3, #0
   1774c:	beq	17758 <__assert_fail@plt+0x6890>
   17750:	mov	r3, #1
   17754:	b	1775c <__assert_fail@plt+0x6894>
   17758:	mov	r3, #0
   1775c:	and	r3, r3, #1
   17760:	uxtb	r3, r3
   17764:	mov	r0, r3
   17768:	sub	sp, fp, #4
   1776c:	pop	{fp, pc}
   17770:	andeq	r0, r0, r1, lsl #2
   17774:	andeq	r8, r1, r0, lsl r7
   17778:	andeq	r8, r1, r4, lsl r7
   1777c:	push	{fp, lr}
   17780:	add	fp, sp, #4
   17784:	sub	sp, sp, #16
   17788:	str	r0, [fp, #-16]
   1778c:	mov	r1, #0
   17790:	ldr	r0, [fp, #-16]
   17794:	bl	10e74 <setlocale@plt>
   17798:	str	r0, [fp, #-8]
   1779c:	ldr	r3, [fp, #-8]
   177a0:	mov	r0, r3
   177a4:	sub	sp, fp, #4
   177a8:	pop	{fp, pc}
   177ac:	push	{fp, lr}
   177b0:	add	fp, sp, #4
   177b4:	sub	sp, sp, #24
   177b8:	str	r0, [fp, #-16]
   177bc:	str	r1, [fp, #-20]	; 0xffffffec
   177c0:	str	r2, [fp, #-24]	; 0xffffffe8
   177c4:	ldr	r0, [fp, #-16]
   177c8:	bl	1777c <__assert_fail@plt+0x68b4>
   177cc:	str	r0, [fp, #-8]
   177d0:	ldr	r3, [fp, #-8]
   177d4:	cmp	r3, #0
   177d8:	bne	177fc <__assert_fail@plt+0x6934>
   177dc:	ldr	r3, [fp, #-24]	; 0xffffffe8
   177e0:	cmp	r3, #0
   177e4:	beq	177f4 <__assert_fail@plt+0x692c>
   177e8:	ldr	r3, [fp, #-20]	; 0xffffffec
   177ec:	mov	r2, #0
   177f0:	strb	r2, [r3]
   177f4:	mov	r3, #22
   177f8:	b	17878 <__assert_fail@plt+0x69b0>
   177fc:	ldr	r0, [fp, #-8]
   17800:	bl	10e14 <strlen@plt>
   17804:	str	r0, [fp, #-12]
   17808:	ldr	r2, [fp, #-12]
   1780c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   17810:	cmp	r2, r3
   17814:	bcs	17838 <__assert_fail@plt+0x6970>
   17818:	ldr	r3, [fp, #-12]
   1781c:	add	r3, r3, #1
   17820:	mov	r2, r3
   17824:	ldr	r1, [fp, #-8]
   17828:	ldr	r0, [fp, #-20]	; 0xffffffec
   1782c:	bl	10cd0 <memcpy@plt>
   17830:	mov	r3, #0
   17834:	b	17878 <__assert_fail@plt+0x69b0>
   17838:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1783c:	cmp	r3, #0
   17840:	beq	17874 <__assert_fail@plt+0x69ac>
   17844:	ldr	r3, [fp, #-24]	; 0xffffffe8
   17848:	sub	r3, r3, #1
   1784c:	mov	r2, r3
   17850:	ldr	r1, [fp, #-8]
   17854:	ldr	r0, [fp, #-20]	; 0xffffffec
   17858:	bl	10cd0 <memcpy@plt>
   1785c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   17860:	sub	r3, r3, #1
   17864:	ldr	r2, [fp, #-20]	; 0xffffffec
   17868:	add	r3, r2, r3
   1786c:	mov	r2, #0
   17870:	strb	r2, [r3]
   17874:	mov	r3, #34	; 0x22
   17878:	mov	r0, r3
   1787c:	sub	sp, fp, #4
   17880:	pop	{fp, pc}
   17884:	push	{fp, lr}
   17888:	add	fp, sp, #4
   1788c:	sub	sp, sp, #16
   17890:	str	r0, [fp, #-8]
   17894:	str	r1, [fp, #-12]
   17898:	str	r2, [fp, #-16]
   1789c:	ldr	r2, [fp, #-16]
   178a0:	ldr	r1, [fp, #-12]
   178a4:	ldr	r0, [fp, #-8]
   178a8:	bl	177ac <__assert_fail@plt+0x68e4>
   178ac:	mov	r3, r0
   178b0:	mov	r0, r3
   178b4:	sub	sp, fp, #4
   178b8:	pop	{fp, pc}
   178bc:	push	{fp, lr}
   178c0:	add	fp, sp, #4
   178c4:	sub	sp, sp, #8
   178c8:	str	r0, [fp, #-8]
   178cc:	ldr	r0, [fp, #-8]
   178d0:	bl	1777c <__assert_fail@plt+0x68b4>
   178d4:	mov	r3, r0
   178d8:	mov	r0, r3
   178dc:	sub	sp, fp, #4
   178e0:	pop	{fp, pc}
   178e4:	subs	r2, r1, #1
   178e8:	bxeq	lr
   178ec:	bcc	17ac4 <__assert_fail@plt+0x6bfc>
   178f0:	cmp	r0, r1
   178f4:	bls	17aa8 <__assert_fail@plt+0x6be0>
   178f8:	tst	r1, r2
   178fc:	beq	17ab4 <__assert_fail@plt+0x6bec>
   17900:	clz	r3, r0
   17904:	clz	r2, r1
   17908:	sub	r3, r2, r3
   1790c:	rsbs	r3, r3, #31
   17910:	addne	r3, r3, r3, lsl #1
   17914:	mov	r2, #0
   17918:	addne	pc, pc, r3, lsl #2
   1791c:	nop			; (mov r0, r0)
   17920:	cmp	r0, r1, lsl #31
   17924:	adc	r2, r2, r2
   17928:	subcs	r0, r0, r1, lsl #31
   1792c:	cmp	r0, r1, lsl #30
   17930:	adc	r2, r2, r2
   17934:	subcs	r0, r0, r1, lsl #30
   17938:	cmp	r0, r1, lsl #29
   1793c:	adc	r2, r2, r2
   17940:	subcs	r0, r0, r1, lsl #29
   17944:	cmp	r0, r1, lsl #28
   17948:	adc	r2, r2, r2
   1794c:	subcs	r0, r0, r1, lsl #28
   17950:	cmp	r0, r1, lsl #27
   17954:	adc	r2, r2, r2
   17958:	subcs	r0, r0, r1, lsl #27
   1795c:	cmp	r0, r1, lsl #26
   17960:	adc	r2, r2, r2
   17964:	subcs	r0, r0, r1, lsl #26
   17968:	cmp	r0, r1, lsl #25
   1796c:	adc	r2, r2, r2
   17970:	subcs	r0, r0, r1, lsl #25
   17974:	cmp	r0, r1, lsl #24
   17978:	adc	r2, r2, r2
   1797c:	subcs	r0, r0, r1, lsl #24
   17980:	cmp	r0, r1, lsl #23
   17984:	adc	r2, r2, r2
   17988:	subcs	r0, r0, r1, lsl #23
   1798c:	cmp	r0, r1, lsl #22
   17990:	adc	r2, r2, r2
   17994:	subcs	r0, r0, r1, lsl #22
   17998:	cmp	r0, r1, lsl #21
   1799c:	adc	r2, r2, r2
   179a0:	subcs	r0, r0, r1, lsl #21
   179a4:	cmp	r0, r1, lsl #20
   179a8:	adc	r2, r2, r2
   179ac:	subcs	r0, r0, r1, lsl #20
   179b0:	cmp	r0, r1, lsl #19
   179b4:	adc	r2, r2, r2
   179b8:	subcs	r0, r0, r1, lsl #19
   179bc:	cmp	r0, r1, lsl #18
   179c0:	adc	r2, r2, r2
   179c4:	subcs	r0, r0, r1, lsl #18
   179c8:	cmp	r0, r1, lsl #17
   179cc:	adc	r2, r2, r2
   179d0:	subcs	r0, r0, r1, lsl #17
   179d4:	cmp	r0, r1, lsl #16
   179d8:	adc	r2, r2, r2
   179dc:	subcs	r0, r0, r1, lsl #16
   179e0:	cmp	r0, r1, lsl #15
   179e4:	adc	r2, r2, r2
   179e8:	subcs	r0, r0, r1, lsl #15
   179ec:	cmp	r0, r1, lsl #14
   179f0:	adc	r2, r2, r2
   179f4:	subcs	r0, r0, r1, lsl #14
   179f8:	cmp	r0, r1, lsl #13
   179fc:	adc	r2, r2, r2
   17a00:	subcs	r0, r0, r1, lsl #13
   17a04:	cmp	r0, r1, lsl #12
   17a08:	adc	r2, r2, r2
   17a0c:	subcs	r0, r0, r1, lsl #12
   17a10:	cmp	r0, r1, lsl #11
   17a14:	adc	r2, r2, r2
   17a18:	subcs	r0, r0, r1, lsl #11
   17a1c:	cmp	r0, r1, lsl #10
   17a20:	adc	r2, r2, r2
   17a24:	subcs	r0, r0, r1, lsl #10
   17a28:	cmp	r0, r1, lsl #9
   17a2c:	adc	r2, r2, r2
   17a30:	subcs	r0, r0, r1, lsl #9
   17a34:	cmp	r0, r1, lsl #8
   17a38:	adc	r2, r2, r2
   17a3c:	subcs	r0, r0, r1, lsl #8
   17a40:	cmp	r0, r1, lsl #7
   17a44:	adc	r2, r2, r2
   17a48:	subcs	r0, r0, r1, lsl #7
   17a4c:	cmp	r0, r1, lsl #6
   17a50:	adc	r2, r2, r2
   17a54:	subcs	r0, r0, r1, lsl #6
   17a58:	cmp	r0, r1, lsl #5
   17a5c:	adc	r2, r2, r2
   17a60:	subcs	r0, r0, r1, lsl #5
   17a64:	cmp	r0, r1, lsl #4
   17a68:	adc	r2, r2, r2
   17a6c:	subcs	r0, r0, r1, lsl #4
   17a70:	cmp	r0, r1, lsl #3
   17a74:	adc	r2, r2, r2
   17a78:	subcs	r0, r0, r1, lsl #3
   17a7c:	cmp	r0, r1, lsl #2
   17a80:	adc	r2, r2, r2
   17a84:	subcs	r0, r0, r1, lsl #2
   17a88:	cmp	r0, r1, lsl #1
   17a8c:	adc	r2, r2, r2
   17a90:	subcs	r0, r0, r1, lsl #1
   17a94:	cmp	r0, r1
   17a98:	adc	r2, r2, r2
   17a9c:	subcs	r0, r0, r1
   17aa0:	mov	r0, r2
   17aa4:	bx	lr
   17aa8:	moveq	r0, #1
   17aac:	movne	r0, #0
   17ab0:	bx	lr
   17ab4:	clz	r2, r1
   17ab8:	rsb	r2, r2, #31
   17abc:	lsr	r0, r0, r2
   17ac0:	bx	lr
   17ac4:	cmp	r0, #0
   17ac8:	mvnne	r0, #0
   17acc:	b	17d30 <__assert_fail@plt+0x6e68>
   17ad0:	cmp	r1, #0
   17ad4:	beq	17ac4 <__assert_fail@plt+0x6bfc>
   17ad8:	push	{r0, r1, lr}
   17adc:	bl	178e4 <__assert_fail@plt+0x6a1c>
   17ae0:	pop	{r1, r2, lr}
   17ae4:	mul	r3, r2, r0
   17ae8:	sub	r1, r1, r3
   17aec:	bx	lr
   17af0:	cmp	r1, #0
   17af4:	beq	17d00 <__assert_fail@plt+0x6e38>
   17af8:	eor	ip, r0, r1
   17afc:	rsbmi	r1, r1, #0
   17b00:	subs	r2, r1, #1
   17b04:	beq	17ccc <__assert_fail@plt+0x6e04>
   17b08:	movs	r3, r0
   17b0c:	rsbmi	r3, r0, #0
   17b10:	cmp	r3, r1
   17b14:	bls	17cd8 <__assert_fail@plt+0x6e10>
   17b18:	tst	r1, r2
   17b1c:	beq	17ce8 <__assert_fail@plt+0x6e20>
   17b20:	clz	r2, r3
   17b24:	clz	r0, r1
   17b28:	sub	r2, r0, r2
   17b2c:	rsbs	r2, r2, #31
   17b30:	addne	r2, r2, r2, lsl #1
   17b34:	mov	r0, #0
   17b38:	addne	pc, pc, r2, lsl #2
   17b3c:	nop			; (mov r0, r0)
   17b40:	cmp	r3, r1, lsl #31
   17b44:	adc	r0, r0, r0
   17b48:	subcs	r3, r3, r1, lsl #31
   17b4c:	cmp	r3, r1, lsl #30
   17b50:	adc	r0, r0, r0
   17b54:	subcs	r3, r3, r1, lsl #30
   17b58:	cmp	r3, r1, lsl #29
   17b5c:	adc	r0, r0, r0
   17b60:	subcs	r3, r3, r1, lsl #29
   17b64:	cmp	r3, r1, lsl #28
   17b68:	adc	r0, r0, r0
   17b6c:	subcs	r3, r3, r1, lsl #28
   17b70:	cmp	r3, r1, lsl #27
   17b74:	adc	r0, r0, r0
   17b78:	subcs	r3, r3, r1, lsl #27
   17b7c:	cmp	r3, r1, lsl #26
   17b80:	adc	r0, r0, r0
   17b84:	subcs	r3, r3, r1, lsl #26
   17b88:	cmp	r3, r1, lsl #25
   17b8c:	adc	r0, r0, r0
   17b90:	subcs	r3, r3, r1, lsl #25
   17b94:	cmp	r3, r1, lsl #24
   17b98:	adc	r0, r0, r0
   17b9c:	subcs	r3, r3, r1, lsl #24
   17ba0:	cmp	r3, r1, lsl #23
   17ba4:	adc	r0, r0, r0
   17ba8:	subcs	r3, r3, r1, lsl #23
   17bac:	cmp	r3, r1, lsl #22
   17bb0:	adc	r0, r0, r0
   17bb4:	subcs	r3, r3, r1, lsl #22
   17bb8:	cmp	r3, r1, lsl #21
   17bbc:	adc	r0, r0, r0
   17bc0:	subcs	r3, r3, r1, lsl #21
   17bc4:	cmp	r3, r1, lsl #20
   17bc8:	adc	r0, r0, r0
   17bcc:	subcs	r3, r3, r1, lsl #20
   17bd0:	cmp	r3, r1, lsl #19
   17bd4:	adc	r0, r0, r0
   17bd8:	subcs	r3, r3, r1, lsl #19
   17bdc:	cmp	r3, r1, lsl #18
   17be0:	adc	r0, r0, r0
   17be4:	subcs	r3, r3, r1, lsl #18
   17be8:	cmp	r3, r1, lsl #17
   17bec:	adc	r0, r0, r0
   17bf0:	subcs	r3, r3, r1, lsl #17
   17bf4:	cmp	r3, r1, lsl #16
   17bf8:	adc	r0, r0, r0
   17bfc:	subcs	r3, r3, r1, lsl #16
   17c00:	cmp	r3, r1, lsl #15
   17c04:	adc	r0, r0, r0
   17c08:	subcs	r3, r3, r1, lsl #15
   17c0c:	cmp	r3, r1, lsl #14
   17c10:	adc	r0, r0, r0
   17c14:	subcs	r3, r3, r1, lsl #14
   17c18:	cmp	r3, r1, lsl #13
   17c1c:	adc	r0, r0, r0
   17c20:	subcs	r3, r3, r1, lsl #13
   17c24:	cmp	r3, r1, lsl #12
   17c28:	adc	r0, r0, r0
   17c2c:	subcs	r3, r3, r1, lsl #12
   17c30:	cmp	r3, r1, lsl #11
   17c34:	adc	r0, r0, r0
   17c38:	subcs	r3, r3, r1, lsl #11
   17c3c:	cmp	r3, r1, lsl #10
   17c40:	adc	r0, r0, r0
   17c44:	subcs	r3, r3, r1, lsl #10
   17c48:	cmp	r3, r1, lsl #9
   17c4c:	adc	r0, r0, r0
   17c50:	subcs	r3, r3, r1, lsl #9
   17c54:	cmp	r3, r1, lsl #8
   17c58:	adc	r0, r0, r0
   17c5c:	subcs	r3, r3, r1, lsl #8
   17c60:	cmp	r3, r1, lsl #7
   17c64:	adc	r0, r0, r0
   17c68:	subcs	r3, r3, r1, lsl #7
   17c6c:	cmp	r3, r1, lsl #6
   17c70:	adc	r0, r0, r0
   17c74:	subcs	r3, r3, r1, lsl #6
   17c78:	cmp	r3, r1, lsl #5
   17c7c:	adc	r0, r0, r0
   17c80:	subcs	r3, r3, r1, lsl #5
   17c84:	cmp	r3, r1, lsl #4
   17c88:	adc	r0, r0, r0
   17c8c:	subcs	r3, r3, r1, lsl #4
   17c90:	cmp	r3, r1, lsl #3
   17c94:	adc	r0, r0, r0
   17c98:	subcs	r3, r3, r1, lsl #3
   17c9c:	cmp	r3, r1, lsl #2
   17ca0:	adc	r0, r0, r0
   17ca4:	subcs	r3, r3, r1, lsl #2
   17ca8:	cmp	r3, r1, lsl #1
   17cac:	adc	r0, r0, r0
   17cb0:	subcs	r3, r3, r1, lsl #1
   17cb4:	cmp	r3, r1
   17cb8:	adc	r0, r0, r0
   17cbc:	subcs	r3, r3, r1
   17cc0:	cmp	ip, #0
   17cc4:	rsbmi	r0, r0, #0
   17cc8:	bx	lr
   17ccc:	teq	ip, r0
   17cd0:	rsbmi	r0, r0, #0
   17cd4:	bx	lr
   17cd8:	movcc	r0, #0
   17cdc:	asreq	r0, ip, #31
   17ce0:	orreq	r0, r0, #1
   17ce4:	bx	lr
   17ce8:	clz	r2, r1
   17cec:	rsb	r2, r2, #31
   17cf0:	cmp	ip, #0
   17cf4:	lsr	r0, r3, r2
   17cf8:	rsbmi	r0, r0, #0
   17cfc:	bx	lr
   17d00:	cmp	r0, #0
   17d04:	mvngt	r0, #-2147483648	; 0x80000000
   17d08:	movlt	r0, #-2147483648	; 0x80000000
   17d0c:	b	17d30 <__assert_fail@plt+0x6e68>
   17d10:	cmp	r1, #0
   17d14:	beq	17d00 <__assert_fail@plt+0x6e38>
   17d18:	push	{r0, r1, lr}
   17d1c:	bl	17af8 <__assert_fail@plt+0x6c30>
   17d20:	pop	{r1, r2, lr}
   17d24:	mul	r3, r2, r0
   17d28:	sub	r1, r1, r3
   17d2c:	bx	lr
   17d30:	push	{r1, lr}
   17d34:	mov	r0, #8
   17d38:	bl	10c7c <raise@plt>
   17d3c:	pop	{r1, pc}
   17d40:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   17d44:	mov	r7, r0
   17d48:	ldr	r6, [pc, #72]	; 17d98 <__assert_fail@plt+0x6ed0>
   17d4c:	ldr	r5, [pc, #72]	; 17d9c <__assert_fail@plt+0x6ed4>
   17d50:	add	r6, pc, r6
   17d54:	add	r5, pc, r5
   17d58:	sub	r6, r6, r5
   17d5c:	mov	r8, r1
   17d60:	mov	r9, r2
   17d64:	bl	10c44 <calloc@plt-0x20>
   17d68:	asrs	r6, r6, #2
   17d6c:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   17d70:	mov	r4, #0
   17d74:	add	r4, r4, #1
   17d78:	ldr	r3, [r5], #4
   17d7c:	mov	r2, r9
   17d80:	mov	r1, r8
   17d84:	mov	r0, r7
   17d88:	blx	r3
   17d8c:	cmp	r6, r4
   17d90:	bne	17d74 <__assert_fail@plt+0x6eac>
   17d94:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   17d98:			; <UNDEFINED> instruction: 0x000111b8
   17d9c:			; <UNDEFINED> instruction: 0x000111b0
   17da0:	bx	lr
   17da4:	ldr	r3, [pc, #12]	; 17db8 <__assert_fail@plt+0x6ef0>
   17da8:	mov	r1, #0
   17dac:	add	r3, pc, r3
   17db0:	ldr	r2, [r3]
   17db4:	b	10e38 <__cxa_atexit@plt>
   17db8:	andeq	r1, r1, r0, lsr r3

Disassembly of section .fini:

00017dbc <.fini>:
   17dbc:	push	{r3, lr}
   17dc0:	pop	{r3, pc}
