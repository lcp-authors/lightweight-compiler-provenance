
../repos/coreutils/src/chcon:     file format elf32-littlearm


Disassembly of section .init:

00011464 <.init>:
   11464:	push	{r3, lr}
   11468:	bl	1189c <__assert_fail@plt+0x4c>
   1146c:	pop	{r3, pc}

Disassembly of section .plt:

00011470 <fstatfs64@plt-0x14>:
   11470:	push	{lr}		; (str lr, [sp, #-4]!)
   11474:	ldr	lr, [pc, #4]	; 11480 <fstatfs64@plt-0x4>
   11478:	add	lr, pc, lr
   1147c:	ldr	pc, [lr, #8]!
   11480:	andeq	fp, r1, r0, lsl #23

00011484 <fstatfs64@plt>:
   11484:	add	ip, pc, #0, 12
   11488:	add	ip, ip, #110592	; 0x1b000
   1148c:	ldr	pc, [ip, #2944]!	; 0xb80

00011490 <calloc@plt>:
   11490:	add	ip, pc, #0, 12
   11494:	add	ip, ip, #110592	; 0x1b000
   11498:	ldr	pc, [ip, #2936]!	; 0xb78

0001149c <fputs_unlocked@plt>:
   1149c:	add	ip, pc, #0, 12
   114a0:	add	ip, ip, #110592	; 0x1b000
   114a4:	ldr	pc, [ip, #2928]!	; 0xb70

000114a8 <raise@plt>:
   114a8:	add	ip, pc, #0, 12
   114ac:	add	ip, ip, #110592	; 0x1b000
   114b0:	ldr	pc, [ip, #2920]!	; 0xb68

000114b4 <is_selinux_enabled@plt>:
   114b4:	add	ip, pc, #0, 12
   114b8:	add	ip, ip, #110592	; 0x1b000
   114bc:	ldr	pc, [ip, #2912]!	; 0xb60

000114c0 <strcmp@plt>:
   114c0:	add	ip, pc, #0, 12
   114c4:	add	ip, ip, #110592	; 0x1b000
   114c8:	ldr	pc, [ip, #2904]!	; 0xb58

000114cc <fflush@plt>:
   114cc:	add	ip, pc, #0, 12
   114d0:	add	ip, ip, #110592	; 0x1b000
   114d4:	ldr	pc, [ip, #2896]!	; 0xb50

000114d8 <lsetfilecon@plt>:
   114d8:	add	ip, pc, #0, 12
   114dc:	add	ip, ip, #110592	; 0x1b000
   114e0:	ldr	pc, [ip, #2888]!	; 0xb48

000114e4 <memmove@plt>:
   114e4:	add	ip, pc, #0, 12
   114e8:	add	ip, ip, #110592	; 0x1b000
   114ec:	ldr	pc, [ip, #2880]!	; 0xb40

000114f0 <free@plt>:
   114f0:	add	ip, pc, #0, 12
   114f4:	add	ip, ip, #110592	; 0x1b000
   114f8:	ldr	pc, [ip, #2872]!	; 0xb38

000114fc <_exit@plt>:
   114fc:	add	ip, pc, #0, 12
   11500:	add	ip, ip, #110592	; 0x1b000
   11504:	ldr	pc, [ip, #2864]!	; 0xb30

00011508 <memcpy@plt>:
   11508:	add	ip, pc, #0, 12
   1150c:	add	ip, ip, #110592	; 0x1b000
   11510:	ldr	pc, [ip, #2856]!	; 0xb28

00011514 <mbsinit@plt>:
   11514:	add	ip, pc, #0, 12
   11518:	add	ip, ip, #110592	; 0x1b000
   1151c:	ldr	pc, [ip, #2848]!	; 0xb20

00011520 <context_new@plt>:
   11520:	add	ip, pc, #0, 12
   11524:	add	ip, ip, #110592	; 0x1b000
   11528:	ldr	pc, [ip, #2840]!	; 0xb18

0001152c <context_role_set@plt>:
   1152c:	add	ip, pc, #0, 12
   11530:	add	ip, ip, #110592	; 0x1b000
   11534:	ldr	pc, [ip, #2832]!	; 0xb10

00011538 <dcgettext@plt>:
   11538:	add	ip, pc, #0, 12
   1153c:	add	ip, ip, #110592	; 0x1b000
   11540:	ldr	pc, [ip, #2824]!	; 0xb08

00011544 <context_type_set@plt>:
   11544:	add	ip, pc, #0, 12
   11548:	add	ip, ip, #110592	; 0x1b000
   1154c:	ldr	pc, [ip, #2816]!	; 0xb00

00011550 <realloc@plt>:
   11550:	add	ip, pc, #0, 12
   11554:	add	ip, ip, #110592	; 0x1b000
   11558:	ldr	pc, [ip, #2808]!	; 0xaf8

0001155c <fgetfilecon@plt>:
   1155c:	add	ip, pc, #0, 12
   11560:	add	ip, ip, #110592	; 0x1b000
   11564:	ldr	pc, [ip, #2800]!	; 0xaf0

00011568 <textdomain@plt>:
   11568:	add	ip, pc, #0, 12
   1156c:	add	ip, ip, #110592	; 0x1b000
   11570:	ldr	pc, [ip, #2792]!	; 0xae8

00011574 <chdir@plt>:
   11574:	add	ip, pc, #0, 12
   11578:	add	ip, ip, #110592	; 0x1b000
   1157c:	ldr	pc, [ip, #2784]!	; 0xae0

00011580 <__fxstatat64@plt>:
   11580:	add	ip, pc, #0, 12
   11584:	add	ip, ip, #110592	; 0x1b000
   11588:	ldr	pc, [ip, #2776]!	; 0xad8

0001158c <iswprint@plt>:
   1158c:	add	ip, pc, #0, 12
   11590:	add	ip, ip, #110592	; 0x1b000
   11594:	ldr	pc, [ip, #2768]!	; 0xad0

00011598 <__fxstat64@plt>:
   11598:	add	ip, pc, #0, 12
   1159c:	add	ip, ip, #110592	; 0x1b000
   115a0:	ldr	pc, [ip, #2760]!	; 0xac8

000115a4 <fwrite@plt>:
   115a4:	add	ip, pc, #0, 12
   115a8:	add	ip, ip, #110592	; 0x1b000
   115ac:	ldr	pc, [ip, #2752]!	; 0xac0

000115b0 <lseek64@plt>:
   115b0:	add	ip, pc, #0, 12
   115b4:	add	ip, ip, #110592	; 0x1b000
   115b8:	ldr	pc, [ip, #2744]!	; 0xab8

000115bc <__ctype_get_mb_cur_max@plt>:
   115bc:	add	ip, pc, #0, 12
   115c0:	add	ip, ip, #110592	; 0x1b000
   115c4:	ldr	pc, [ip, #2736]!	; 0xab0

000115c8 <strcpy@plt>:
   115c8:	add	ip, pc, #0, 12
   115cc:	add	ip, ip, #110592	; 0x1b000
   115d0:	ldr	pc, [ip, #2728]!	; 0xaa8

000115d4 <__fpending@plt>:
   115d4:	add	ip, pc, #0, 12
   115d8:	add	ip, ip, #110592	; 0x1b000
   115dc:	ldr	pc, [ip, #2720]!	; 0xaa0

000115e0 <mbrtowc@plt>:
   115e0:	add	ip, pc, #0, 12
   115e4:	add	ip, ip, #110592	; 0x1b000
   115e8:	ldr	pc, [ip, #2712]!	; 0xa98

000115ec <error@plt>:
   115ec:	add	ip, pc, #0, 12
   115f0:	add	ip, ip, #110592	; 0x1b000
   115f4:	ldr	pc, [ip, #2704]!	; 0xa90

000115f8 <security_check_context@plt>:
   115f8:	add	ip, pc, #0, 12
   115fc:	add	ip, ip, #110592	; 0x1b000
   11600:	ldr	pc, [ip, #2696]!	; 0xa88

00011604 <open64@plt>:
   11604:	add	ip, pc, #0, 12
   11608:	add	ip, ip, #110592	; 0x1b000
   1160c:	ldr	pc, [ip, #2688]!	; 0xa80

00011610 <lgetfilecon@plt>:
   11610:	add	ip, pc, #0, 12
   11614:	add	ip, ip, #110592	; 0x1b000
   11618:	ldr	pc, [ip, #2680]!	; 0xa78

0001161c <malloc@plt>:
   1161c:	add	ip, pc, #0, 12
   11620:	add	ip, ip, #110592	; 0x1b000
   11624:	ldr	pc, [ip, #2672]!	; 0xa70

00011628 <__libc_start_main@plt>:
   11628:	add	ip, pc, #0, 12
   1162c:	add	ip, ip, #110592	; 0x1b000
   11630:	ldr	pc, [ip, #2664]!	; 0xa68

00011634 <__freading@plt>:
   11634:	add	ip, pc, #0, 12
   11638:	add	ip, ip, #110592	; 0x1b000
   1163c:	ldr	pc, [ip, #2656]!	; 0xa60

00011640 <__gmon_start__@plt>:
   11640:	add	ip, pc, #0, 12
   11644:	add	ip, ip, #110592	; 0x1b000
   11648:	ldr	pc, [ip, #2648]!	; 0xa58

0001164c <context_free@plt>:
   1164c:	add	ip, pc, #0, 12
   11650:	add	ip, ip, #110592	; 0x1b000
   11654:	ldr	pc, [ip, #2640]!	; 0xa50

00011658 <getopt_long@plt>:
   11658:	add	ip, pc, #0, 12
   1165c:	add	ip, ip, #110592	; 0x1b000
   11660:	ldr	pc, [ip, #2632]!	; 0xa48

00011664 <__ctype_b_loc@plt>:
   11664:	add	ip, pc, #0, 12
   11668:	add	ip, ip, #110592	; 0x1b000
   1166c:	ldr	pc, [ip, #2624]!	; 0xa40

00011670 <getcwd@plt>:
   11670:	add	ip, pc, #0, 12
   11674:	add	ip, ip, #110592	; 0x1b000
   11678:	ldr	pc, [ip, #2616]!	; 0xa38

0001167c <exit@plt>:
   1167c:	add	ip, pc, #0, 12
   11680:	add	ip, ip, #110592	; 0x1b000
   11684:	ldr	pc, [ip, #2608]!	; 0xa30

00011688 <context_user_set@plt>:
   11688:	add	ip, pc, #0, 12
   1168c:	add	ip, ip, #110592	; 0x1b000
   11690:	ldr	pc, [ip, #2600]!	; 0xa28

00011694 <getfilecon@plt>:
   11694:	add	ip, pc, #0, 12
   11698:	add	ip, ip, #110592	; 0x1b000
   1169c:	ldr	pc, [ip, #2592]!	; 0xa20

000116a0 <bcmp@plt>:
   116a0:	add	ip, pc, #0, 12
   116a4:	add	ip, ip, #110592	; 0x1b000
   116a8:	ldr	pc, [ip, #2584]!	; 0xa18

000116ac <strlen@plt>:
   116ac:	add	ip, pc, #0, 12
   116b0:	add	ip, ip, #110592	; 0x1b000
   116b4:	ldr	pc, [ip, #2576]!	; 0xa10

000116b8 <openat64@plt>:
   116b8:	add	ip, pc, #0, 12
   116bc:	add	ip, ip, #110592	; 0x1b000
   116c0:	ldr	pc, [ip, #2568]!	; 0xa08

000116c4 <memrchr@plt>:
   116c4:	add	ip, pc, #0, 12
   116c8:	add	ip, ip, #110592	; 0x1b000
   116cc:	ldr	pc, [ip, #2560]!	; 0xa00

000116d0 <__errno_location@plt>:
   116d0:	add	ip, pc, #0, 12
   116d4:	add	ip, ip, #110592	; 0x1b000
   116d8:	ldr	pc, [ip, #2552]!	; 0x9f8

000116dc <__sprintf_chk@plt>:
   116dc:	add	ip, pc, #0, 12
   116e0:	add	ip, ip, #110592	; 0x1b000
   116e4:	ldr	pc, [ip, #2544]!	; 0x9f0

000116e8 <__cxa_atexit@plt>:
   116e8:	add	ip, pc, #0, 12
   116ec:	add	ip, ip, #110592	; 0x1b000
   116f0:	ldr	pc, [ip, #2536]!	; 0x9e8

000116f4 <memset@plt>:
   116f4:	add	ip, pc, #0, 12
   116f8:	add	ip, ip, #110592	; 0x1b000
   116fc:	ldr	pc, [ip, #2528]!	; 0x9e0

00011700 <__printf_chk@plt>:
   11700:	add	ip, pc, #0, 12
   11704:	add	ip, ip, #110592	; 0x1b000
   11708:	ldr	pc, [ip, #2520]!	; 0x9d8

0001170c <fileno@plt>:
   1170c:	add	ip, pc, #0, 12
   11710:	add	ip, ip, #110592	; 0x1b000
   11714:	ldr	pc, [ip, #2512]!	; 0x9d0

00011718 <__fprintf_chk@plt>:
   11718:	add	ip, pc, #0, 12
   1171c:	add	ip, ip, #110592	; 0x1b000
   11720:	ldr	pc, [ip, #2504]!	; 0x9c8

00011724 <memchr@plt>:
   11724:	add	ip, pc, #0, 12
   11728:	add	ip, ip, #110592	; 0x1b000
   1172c:	ldr	pc, [ip, #2496]!	; 0x9c0

00011730 <setfilecon@plt>:
   11730:	add	ip, pc, #0, 12
   11734:	add	ip, ip, #110592	; 0x1b000
   11738:	ldr	pc, [ip, #2488]!	; 0x9b8

0001173c <access@plt>:
   1173c:	add	ip, pc, #0, 12
   11740:	add	ip, ip, #110592	; 0x1b000
   11744:	ldr	pc, [ip, #2480]!	; 0x9b0

00011748 <fclose@plt>:
   11748:	add	ip, pc, #0, 12
   1174c:	add	ip, ip, #110592	; 0x1b000
   11750:	ldr	pc, [ip, #2472]!	; 0x9a8

00011754 <fseeko64@plt>:
   11754:	add	ip, pc, #0, 12
   11758:	add	ip, ip, #110592	; 0x1b000
   1175c:	ldr	pc, [ip, #2464]!	; 0x9a0

00011760 <fcntl64@plt>:
   11760:	add	ip, pc, #0, 12
   11764:	add	ip, ip, #110592	; 0x1b000
   11768:	ldr	pc, [ip, #2456]!	; 0x998

0001176c <setlocale@plt>:
   1176c:	add	ip, pc, #0, 12
   11770:	add	ip, ip, #110592	; 0x1b000
   11774:	ldr	pc, [ip, #2448]!	; 0x990

00011778 <strrchr@plt>:
   11778:	add	ip, pc, #0, 12
   1177c:	add	ip, ip, #110592	; 0x1b000
   11780:	ldr	pc, [ip, #2440]!	; 0x988

00011784 <nl_langinfo@plt>:
   11784:	add	ip, pc, #0, 12
   11788:	add	ip, ip, #110592	; 0x1b000
   1178c:	ldr	pc, [ip, #2432]!	; 0x980

00011790 <readdir64@plt>:
   11790:	add	ip, pc, #0, 12
   11794:	add	ip, ip, #110592	; 0x1b000
   11798:	ldr	pc, [ip, #2424]!	; 0x978

0001179c <fdopendir@plt>:
   1179c:	add	ip, pc, #0, 12
   117a0:	add	ip, ip, #110592	; 0x1b000
   117a4:	ldr	pc, [ip, #2416]!	; 0x970

000117a8 <dirfd@plt>:
   117a8:	add	ip, pc, #0, 12
   117ac:	add	ip, ip, #110592	; 0x1b000
   117b0:	ldr	pc, [ip, #2408]!	; 0x968

000117b4 <fchdir@plt>:
   117b4:	add	ip, pc, #0, 12
   117b8:	add	ip, ip, #110592	; 0x1b000
   117bc:	ldr	pc, [ip, #2400]!	; 0x960

000117c0 <qsort@plt>:
   117c0:	add	ip, pc, #0, 12
   117c4:	add	ip, ip, #110592	; 0x1b000
   117c8:	ldr	pc, [ip, #2392]!	; 0x958

000117cc <freecon@plt>:
   117cc:	add	ip, pc, #0, 12
   117d0:	add	ip, ip, #110592	; 0x1b000
   117d4:	ldr	pc, [ip, #2384]!	; 0x950

000117d8 <bindtextdomain@plt>:
   117d8:	add	ip, pc, #0, 12
   117dc:	add	ip, ip, #110592	; 0x1b000
   117e0:	ldr	pc, [ip, #2376]!	; 0x948

000117e4 <context_range_set@plt>:
   117e4:	add	ip, pc, #0, 12
   117e8:	add	ip, ip, #110592	; 0x1b000
   117ec:	ldr	pc, [ip, #2368]!	; 0x940

000117f0 <context_str@plt>:
   117f0:	add	ip, pc, #0, 12
   117f4:	add	ip, ip, #110592	; 0x1b000
   117f8:	ldr	pc, [ip, #2360]!	; 0x938

000117fc <__xstat64@plt>:
   117fc:	add	ip, pc, #0, 12
   11800:	add	ip, ip, #110592	; 0x1b000
   11804:	ldr	pc, [ip, #2352]!	; 0x930

00011808 <strncmp@plt>:
   11808:	add	ip, pc, #0, 12
   1180c:	add	ip, ip, #110592	; 0x1b000
   11810:	ldr	pc, [ip, #2344]!	; 0x928

00011814 <abort@plt>:
   11814:	add	ip, pc, #0, 12
   11818:	add	ip, ip, #110592	; 0x1b000
   1181c:	ldr	pc, [ip, #2336]!	; 0x920

00011820 <close@plt>:
   11820:	add	ip, pc, #0, 12
   11824:	add	ip, ip, #110592	; 0x1b000
   11828:	ldr	pc, [ip, #2328]!	; 0x918

0001182c <__lxstat64@plt>:
   1182c:	add	ip, pc, #0, 12
   11830:	add	ip, ip, #110592	; 0x1b000
   11834:	ldr	pc, [ip, #2320]!	; 0x910

00011838 <closedir@plt>:
   11838:	add	ip, pc, #0, 12
   1183c:	add	ip, ip, #110592	; 0x1b000
   11840:	ldr	pc, [ip, #2312]!	; 0x908

00011844 <strspn@plt>:
   11844:	add	ip, pc, #0, 12
   11848:	add	ip, ip, #110592	; 0x1b000
   1184c:	ldr	pc, [ip, #2304]!	; 0x900

00011850 <__assert_fail@plt>:
   11850:	add	ip, pc, #0, 12
   11854:	add	ip, ip, #110592	; 0x1b000
   11858:	ldr	pc, [ip, #2296]!	; 0x8f8

Disassembly of section .text:

00011860 <.text>:
   11860:	mov	fp, #0
   11864:	mov	lr, #0
   11868:	pop	{r1}		; (ldr r1, [sp], #4)
   1186c:	mov	r2, sp
   11870:	push	{r2}		; (str r2, [sp, #-4]!)
   11874:	push	{r0}		; (str r0, [sp, #-4]!)
   11878:	ldr	ip, [pc, #16]	; 11890 <__assert_fail@plt+0x40>
   1187c:	push	{ip}		; (str ip, [sp, #-4]!)
   11880:	ldr	r0, [pc, #12]	; 11894 <__assert_fail@plt+0x44>
   11884:	ldr	r3, [pc, #12]	; 11898 <__assert_fail@plt+0x48>
   11888:	bl	11628 <__libc_start_main@plt>
   1188c:	bl	11814 <abort@plt>
   11890:	andeq	sl, r1, r8, ror #21
   11894:	andeq	r1, r1, ip, ror ip
   11898:	andeq	sl, r1, r8, lsl #21
   1189c:	ldr	r3, [pc, #20]	; 118b8 <__assert_fail@plt+0x68>
   118a0:	ldr	r2, [pc, #20]	; 118bc <__assert_fail@plt+0x6c>
   118a4:	add	r3, pc, r3
   118a8:	ldr	r2, [r3, r2]
   118ac:	cmp	r2, #0
   118b0:	bxeq	lr
   118b4:	b	11640 <__gmon_start__@plt>
   118b8:	andeq	fp, r1, r4, asr r7
   118bc:	andeq	r0, r0, r4, asr r1
   118c0:	ldr	r0, [pc, #24]	; 118e0 <__assert_fail@plt+0x90>
   118c4:	ldr	r3, [pc, #24]	; 118e4 <__assert_fail@plt+0x94>
   118c8:	cmp	r3, r0
   118cc:	bxeq	lr
   118d0:	ldr	r3, [pc, #16]	; 118e8 <__assert_fail@plt+0x98>
   118d4:	cmp	r3, #0
   118d8:	bxeq	lr
   118dc:	bx	r3
   118e0:	andeq	sp, r2, r8, lsr #3
   118e4:	andeq	sp, r2, r8, lsr #3
   118e8:	andeq	r0, r0, r0
   118ec:	ldr	r0, [pc, #36]	; 11918 <__assert_fail@plt+0xc8>
   118f0:	ldr	r1, [pc, #36]	; 1191c <__assert_fail@plt+0xcc>
   118f4:	sub	r1, r1, r0
   118f8:	asr	r1, r1, #2
   118fc:	add	r1, r1, r1, lsr #31
   11900:	asrs	r1, r1, #1
   11904:	bxeq	lr
   11908:	ldr	r3, [pc, #16]	; 11920 <__assert_fail@plt+0xd0>
   1190c:	cmp	r3, #0
   11910:	bxeq	lr
   11914:	bx	r3
   11918:	andeq	sp, r2, r8, lsr #3
   1191c:	andeq	sp, r2, r8, lsr #3
   11920:	andeq	r0, r0, r0
   11924:	push	{r4, lr}
   11928:	ldr	r4, [pc, #24]	; 11948 <__assert_fail@plt+0xf8>
   1192c:	ldrb	r3, [r4]
   11930:	cmp	r3, #0
   11934:	popne	{r4, pc}
   11938:	bl	118c0 <__assert_fail@plt+0x70>
   1193c:	mov	r3, #1
   11940:	strb	r3, [r4]
   11944:	pop	{r4, pc}
   11948:	andeq	sp, r2, r4, asr #3
   1194c:	b	118ec <__assert_fail@plt+0x9c>
   11950:	push	{fp, lr}
   11954:	mov	fp, sp
   11958:	sub	sp, sp, #64	; 0x40
   1195c:	mov	r4, r0
   11960:	cmp	r0, #0
   11964:	bne	11c38 <__assert_fail@plt+0x3e8>
   11968:	movw	r1, #43835	; 0xab3b
   1196c:	mov	r0, #0
   11970:	mov	r2, #5
   11974:	movt	r1, #1
   11978:	bl	11538 <dcgettext@plt>
   1197c:	mov	r1, r0
   11980:	movw	r0, #53764	; 0xd204
   11984:	movt	r0, #2
   11988:	ldr	r2, [r0]
   1198c:	mov	r0, #1
   11990:	mov	r3, r2
   11994:	str	r2, [sp]
   11998:	bl	11700 <__printf_chk@plt>
   1199c:	movw	r1, #43993	; 0xabd9
   119a0:	mov	r0, #0
   119a4:	mov	r2, #5
   119a8:	movt	r1, #1
   119ac:	bl	11538 <dcgettext@plt>
   119b0:	movw	r7, #53692	; 0xd1bc
   119b4:	movt	r7, #2
   119b8:	ldr	r1, [r7]
   119bc:	bl	1149c <fputs_unlocked@plt>
   119c0:	movw	r1, #45920	; 0xb360
   119c4:	mov	r0, #0
   119c8:	mov	r2, #5
   119cc:	movt	r1, #1
   119d0:	bl	11538 <dcgettext@plt>
   119d4:	ldr	r1, [r7]
   119d8:	bl	1149c <fputs_unlocked@plt>
   119dc:	movw	r1, #44132	; 0xac64
   119e0:	mov	r0, #0
   119e4:	mov	r2, #5
   119e8:	movt	r1, #1
   119ec:	bl	11538 <dcgettext@plt>
   119f0:	ldr	r1, [r7]
   119f4:	bl	1149c <fputs_unlocked@plt>
   119f8:	movw	r1, #44363	; 0xad4b
   119fc:	mov	r0, #0
   11a00:	mov	r2, #5
   11a04:	movt	r1, #1
   11a08:	bl	11538 <dcgettext@plt>
   11a0c:	ldr	r1, [r7]
   11a10:	bl	1149c <fputs_unlocked@plt>
   11a14:	movw	r1, #44646	; 0xae66
   11a18:	mov	r0, #0
   11a1c:	mov	r2, #5
   11a20:	movt	r1, #1
   11a24:	bl	11538 <dcgettext@plt>
   11a28:	ldr	r1, [r7]
   11a2c:	bl	1149c <fputs_unlocked@plt>
   11a30:	movw	r1, #44774	; 0xaee6
   11a34:	mov	r0, #0
   11a38:	mov	r2, #5
   11a3c:	movt	r1, #1
   11a40:	bl	11538 <dcgettext@plt>
   11a44:	ldr	r1, [r7]
   11a48:	bl	1149c <fputs_unlocked@plt>
   11a4c:	movw	r1, #44893	; 0xaf5d
   11a50:	mov	r0, #0
   11a54:	mov	r2, #5
   11a58:	movt	r1, #1
   11a5c:	bl	11538 <dcgettext@plt>
   11a60:	ldr	r1, [r7]
   11a64:	bl	1149c <fputs_unlocked@plt>
   11a68:	movw	r1, #44964	; 0xafa4
   11a6c:	mov	r0, #0
   11a70:	mov	r2, #5
   11a74:	movt	r1, #1
   11a78:	bl	11538 <dcgettext@plt>
   11a7c:	ldr	r1, [r7]
   11a80:	bl	1149c <fputs_unlocked@plt>
   11a84:	movw	r1, #45035	; 0xafeb
   11a88:	mov	r0, #0
   11a8c:	mov	r2, #5
   11a90:	movt	r1, #1
   11a94:	bl	11538 <dcgettext@plt>
   11a98:	ldr	r1, [r7]
   11a9c:	bl	1149c <fputs_unlocked@plt>
   11aa0:	movw	r1, #45500	; 0xb1bc
   11aa4:	mov	r0, #0
   11aa8:	mov	r2, #5
   11aac:	movt	r1, #1
   11ab0:	bl	11538 <dcgettext@plt>
   11ab4:	ldr	r1, [r7]
   11ab8:	bl	1149c <fputs_unlocked@plt>
   11abc:	movw	r1, #45545	; 0xb1e9
   11ac0:	mov	r0, #0
   11ac4:	mov	r2, #5
   11ac8:	movt	r1, #1
   11acc:	bl	11538 <dcgettext@plt>
   11ad0:	ldr	r1, [r7]
   11ad4:	bl	1149c <fputs_unlocked@plt>
   11ad8:	movw	r0, #47240	; 0xb888
   11adc:	mov	r2, #48	; 0x30
   11ae0:	add	r6, sp, #8
   11ae4:	movw	r5, #45599	; 0xb21f
   11ae8:	movt	r0, #1
   11aec:	movt	r5, #1
   11af0:	add	r1, r0, #32
   11af4:	add	r3, r0, #16
   11af8:	vld1.64	{d18-d19}, [r0], r2
   11afc:	vld1.64	{d16-d17}, [r1]
   11b00:	vld1.64	{d20-d21}, [r3]
   11b04:	vldr	d22, [r0]
   11b08:	add	r1, r6, #32
   11b0c:	add	r0, r6, #16
   11b10:	vst1.64	{d16-d17}, [r1]
   11b14:	movw	r1, #45995	; 0xb3ab
   11b18:	vst1.64	{d20-d21}, [r0]
   11b1c:	mov	r0, r6
   11b20:	movt	r1, #1
   11b24:	vst1.64	{d18-d19}, [r0], r2
   11b28:	vstr	d22, [r0]
   11b2c:	mov	r0, r5
   11b30:	bl	114c0 <strcmp@plt>
   11b34:	cmp	r0, #0
   11b38:	ldrne	r1, [r6, #8]!
   11b3c:	cmpne	r1, #0
   11b40:	bne	11b2c <__assert_fail@plt+0x2dc>
   11b44:	movw	r1, #46090	; 0xb40a
   11b48:	ldr	r6, [r6, #4]
   11b4c:	mov	r0, #0
   11b50:	mov	r2, #5
   11b54:	movt	r1, #1
   11b58:	bl	11538 <dcgettext@plt>
   11b5c:	movw	r2, #45644	; 0xb24c
   11b60:	movw	r3, #46113	; 0xb421
   11b64:	mov	r1, r0
   11b68:	mov	r0, #1
   11b6c:	movt	r2, #1
   11b70:	movt	r3, #1
   11b74:	bl	11700 <__printf_chk@plt>
   11b78:	cmp	r6, #0
   11b7c:	mov	r0, #5
   11b80:	mov	r1, #0
   11b84:	moveq	r6, r5
   11b88:	bl	1176c <setlocale@plt>
   11b8c:	cmp	r0, #0
   11b90:	beq	11bc8 <__assert_fail@plt+0x378>
   11b94:	movw	r1, #46153	; 0xb449
   11b98:	mov	r2, #3
   11b9c:	movt	r1, #1
   11ba0:	bl	11808 <strncmp@plt>
   11ba4:	cmp	r0, #0
   11ba8:	beq	11bc8 <__assert_fail@plt+0x378>
   11bac:	movw	r1, #46157	; 0xb44d
   11bb0:	mov	r0, #0
   11bb4:	mov	r2, #5
   11bb8:	movt	r1, #1
   11bbc:	bl	11538 <dcgettext@plt>
   11bc0:	ldr	r1, [r7]
   11bc4:	bl	1149c <fputs_unlocked@plt>
   11bc8:	movw	r1, #46228	; 0xb494
   11bcc:	mov	r0, #0
   11bd0:	mov	r2, #5
   11bd4:	movt	r1, #1
   11bd8:	bl	11538 <dcgettext@plt>
   11bdc:	movw	r2, #46113	; 0xb421
   11be0:	mov	r1, r0
   11be4:	mov	r0, #1
   11be8:	mov	r3, r5
   11bec:	movt	r2, #1
   11bf0:	bl	11700 <__printf_chk@plt>
   11bf4:	movw	r1, #46255	; 0xb4af
   11bf8:	mov	r0, #0
   11bfc:	mov	r2, #5
   11c00:	movt	r1, #1
   11c04:	bl	11538 <dcgettext@plt>
   11c08:	mov	r1, r0
   11c0c:	movw	r0, #46023	; 0xb3c7
   11c10:	movw	r3, #45499	; 0xb1bb
   11c14:	cmp	r6, r5
   11c18:	mov	r2, r6
   11c1c:	movt	r0, #1
   11c20:	movt	r3, #1
   11c24:	moveq	r3, r0
   11c28:	mov	r0, #1
   11c2c:	bl	11700 <__printf_chk@plt>
   11c30:	mov	r0, r4
   11c34:	bl	1167c <exit@plt>
   11c38:	movw	r0, #53688	; 0xd1b8
   11c3c:	movw	r1, #43796	; 0xab14
   11c40:	mov	r2, #5
   11c44:	movt	r0, #2
   11c48:	movt	r1, #1
   11c4c:	ldr	r5, [r0]
   11c50:	mov	r0, #0
   11c54:	bl	11538 <dcgettext@plt>
   11c58:	mov	r2, r0
   11c5c:	movw	r0, #53764	; 0xd204
   11c60:	mov	r1, #1
   11c64:	movt	r0, #2
   11c68:	ldr	r3, [r0]
   11c6c:	mov	r0, r5
   11c70:	bl	11718 <__fprintf_chk@plt>
   11c74:	mov	r0, r4
   11c78:	bl	1167c <exit@plt>
   11c7c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11c80:	add	fp, sp, #28
   11c84:	sub	sp, sp, #36	; 0x24
   11c88:	mov	r5, r0
   11c8c:	ldr	r0, [r1]
   11c90:	mov	r4, r1
   11c94:	bl	16628 <__assert_fail@plt+0x4dd8>
   11c98:	movw	r1, #45499	; 0xb1bb
   11c9c:	mov	r0, #6
   11ca0:	movt	r1, #1
   11ca4:	bl	1176c <setlocale@plt>
   11ca8:	movw	r6, #45648	; 0xb250
   11cac:	movw	r1, #45605	; 0xb225
   11cb0:	movt	r6, #1
   11cb4:	movt	r1, #1
   11cb8:	mov	r0, r6
   11cbc:	bl	117d8 <bindtextdomain@plt>
   11cc0:	mov	r0, r6
   11cc4:	bl	11568 <textdomain@plt>
   11cc8:	movw	r0, #11508	; 0x2cf4
   11ccc:	movt	r0, #1
   11cd0:	bl	1aaec <__assert_fail@plt+0x929c>
   11cd4:	movw	r7, #45629	; 0xb23d
   11cd8:	movw	r6, #47016	; 0xb7a8
   11cdc:	mov	r0, #16
   11ce0:	mov	r9, #0
   11ce4:	mvn	r8, #0
   11ce8:	mov	sl, #0
   11cec:	str	r0, [sp, #24]
   11cf0:	mov	r0, #0
   11cf4:	movt	r7, #1
   11cf8:	movt	r6, #1
   11cfc:	str	r0, [sp, #20]
   11d00:	mov	r0, #0
   11d04:	str	r0, [sp, #16]
   11d08:	b	11d28 <__assert_fail@plt+0x4d8>
   11d0c:	movw	r0, #53696	; 0xd1c0
   11d10:	movw	r1, #53720	; 0xd1d8
   11d14:	movt	r0, #2
   11d18:	movt	r1, #2
   11d1c:	ldr	r0, [r0]
   11d20:	str	r0, [r1]
   11d24:	mov	sl, #1
   11d28:	mov	r0, r5
   11d2c:	mov	r1, r4
   11d30:	mov	r2, r7
   11d34:	mov	r3, r6
   11d38:	str	r9, [sp]
   11d3c:	bl	11658 <getopt_long@plt>
   11d40:	add	r1, r0, #3
   11d44:	cmp	r1, #121	; 0x79
   11d48:	bhi	11f48 <__assert_fail@plt+0x6f8>
   11d4c:	add	r0, pc, #0
   11d50:	ldr	pc, [r0, r1, lsl #2]
   11d54:	andeq	r2, r1, r8, asr fp
   11d58:	andeq	r2, r1, ip, lsr #23
   11d5c:	andeq	r2, r1, r8, lsl r0
   11d60:	strdeq	r2, [r1], -r4
   11d64:	strdeq	r2, [r1], -r4
   11d68:	strdeq	r2, [r1], -r4
   11d6c:	strdeq	r2, [r1], -r4
   11d70:	strdeq	r2, [r1], -r4
   11d74:	strdeq	r2, [r1], -r4
   11d78:	strdeq	r2, [r1], -r4
   11d7c:	strdeq	r2, [r1], -r4
   11d80:	strdeq	r2, [r1], -r4
   11d84:	strdeq	r2, [r1], -r4
   11d88:	strdeq	r2, [r1], -r4
   11d8c:	strdeq	r2, [r1], -r4
   11d90:	strdeq	r2, [r1], -r4
   11d94:	strdeq	r2, [r1], -r4
   11d98:	strdeq	r2, [r1], -r4
   11d9c:	strdeq	r2, [r1], -r4
   11da0:	strdeq	r2, [r1], -r4
   11da4:	strdeq	r2, [r1], -r4
   11da8:	strdeq	r2, [r1], -r4
   11dac:	strdeq	r2, [r1], -r4
   11db0:	strdeq	r2, [r1], -r4
   11db4:	strdeq	r2, [r1], -r4
   11db8:	strdeq	r2, [r1], -r4
   11dbc:	strdeq	r2, [r1], -r4
   11dc0:	strdeq	r2, [r1], -r4
   11dc4:	strdeq	r2, [r1], -r4
   11dc8:	strdeq	r2, [r1], -r4
   11dcc:	strdeq	r2, [r1], -r4
   11dd0:	strdeq	r2, [r1], -r4
   11dd4:	strdeq	r2, [r1], -r4
   11dd8:	strdeq	r2, [r1], -r4
   11ddc:	strdeq	r2, [r1], -r4
   11de0:	strdeq	r2, [r1], -r4
   11de4:	strdeq	r2, [r1], -r4
   11de8:	strdeq	r2, [r1], -r4
   11dec:	strdeq	r2, [r1], -r4
   11df0:	strdeq	r2, [r1], -r4
   11df4:	strdeq	r2, [r1], -r4
   11df8:	strdeq	r2, [r1], -r4
   11dfc:	strdeq	r2, [r1], -r4
   11e00:	strdeq	r2, [r1], -r4
   11e04:	strdeq	r2, [r1], -r4
   11e08:	strdeq	r2, [r1], -r4
   11e0c:	strdeq	r2, [r1], -r4
   11e10:	strdeq	r2, [r1], -r4
   11e14:	strdeq	r2, [r1], -r4
   11e18:	strdeq	r2, [r1], -r4
   11e1c:	strdeq	r2, [r1], -r4
   11e20:	strdeq	r2, [r1], -r4
   11e24:	strdeq	r2, [r1], -r4
   11e28:	strdeq	r2, [r1], -r4
   11e2c:	strdeq	r2, [r1], -r4
   11e30:	strdeq	r2, [r1], -r4
   11e34:	strdeq	r2, [r1], -r4
   11e38:	strdeq	r2, [r1], -r4
   11e3c:	strdeq	r2, [r1], -r4
   11e40:	strdeq	r2, [r1], -r4
   11e44:	strdeq	r2, [r1], -r4
   11e48:	strdeq	r2, [r1], -r4
   11e4c:	strdeq	r2, [r1], -r4
   11e50:	strdeq	r2, [r1], -r4
   11e54:	strdeq	r2, [r1], -r4
   11e58:	strdeq	r2, [r1], -r4
   11e5c:	strdeq	r2, [r1], -r4
   11e60:	strdeq	r2, [r1], -r4
   11e64:	strdeq	r2, [r1], -r4
   11e68:	strdeq	r2, [r1], -r4
   11e6c:	strdeq	r2, [r1], -r4
   11e70:	strdeq	r2, [r1], -r4
   11e74:	strdeq	r2, [r1], -r4
   11e78:	strdeq	r2, [r1], -r4
   11e7c:	strdeq	r2, [r1], -r4
   11e80:	andeq	r1, r1, ip, lsr pc
   11e84:	strdeq	r2, [r1], -r4
   11e88:	strdeq	r2, [r1], -r4
   11e8c:	strdeq	r2, [r1], -r4
   11e90:	muleq	r1, r4, pc	; <UNPREDICTABLE>
   11e94:	strdeq	r2, [r1], -r4
   11e98:	strdeq	r2, [r1], -r4
   11e9c:	strdeq	r2, [r1], -r4
   11ea0:	andeq	r1, r1, r8, lsl #31
   11ea4:	strdeq	r2, [r1], -r4
   11ea8:	andeq	r1, r1, ip, lsr #31
   11eac:	strdeq	r2, [r1], -r4
   11eb0:	strdeq	r2, [r1], -r4
   11eb4:	strdeq	r2, [r1], -r4
   11eb8:	strdeq	r2, [r1], -r4
   11ebc:	strdeq	r2, [r1], -r4
   11ec0:	strdeq	r2, [r1], -r4
   11ec4:	strdeq	r2, [r1], -r4
   11ec8:	strdeq	r2, [r1], -r4
   11ecc:	strdeq	r2, [r1], -r4
   11ed0:	strdeq	r2, [r1], -r4
   11ed4:	strdeq	r2, [r1], -r4
   11ed8:	strdeq	r2, [r1], -r4
   11edc:	strdeq	r2, [r1], -r4
   11ee0:	strdeq	r2, [r1], -r4
   11ee4:	strdeq	r2, [r1], -r4
   11ee8:	strdeq	r2, [r1], -r4
   11eec:	strdeq	r2, [r1], -r4
   11ef0:	strdeq	r2, [r1], -r4
   11ef4:	strdeq	r2, [r1], -r4
   11ef8:	andeq	r1, r1, r8, lsr #26
   11efc:	strdeq	r2, [r1], -r4
   11f00:	andeq	r1, r1, ip, asr #31
   11f04:	strdeq	r2, [r1], -r4
   11f08:	strdeq	r2, [r1], -r4
   11f0c:	strdeq	r2, [r1], -r4
   11f10:	andeq	r1, r1, ip, lsl #26
   11f14:	strdeq	r2, [r1], -r4
   11f18:	strdeq	r2, [r1], -r4
   11f1c:	strdeq	r2, [r1], -r4
   11f20:	strdeq	r2, [r1], -r4
   11f24:	strdeq	r2, [r1], -r4
   11f28:	andeq	r1, r1, r0, ror #31
   11f2c:	strdeq	r2, [r1], -r4
   11f30:	andeq	r1, r1, r4, ror pc
   11f34:	strdeq	r1, [r1], -r4
   11f38:	andeq	r1, r1, r0, lsr #31
   11f3c:	mov	r0, #17
   11f40:	str	r0, [sp, #24]
   11f44:	b	11d28 <__assert_fail@plt+0x4d8>
   11f48:	sub	r0, r0, #256	; 0x100
   11f4c:	cmp	r0, #3
   11f50:	bhi	12bf4 <__assert_fail@plt+0x13a4>
   11f54:	add	r1, pc, #0
   11f58:	ldr	pc, [r1, r0, lsl #2]
   11f5c:	andeq	r1, r1, ip, ror #30
   11f60:	ldrdeq	r1, [r1], -r4
   11f64:	andeq	r1, r1, r0, asr #31
   11f68:	andeq	r2, r1, r8
   11f6c:	mov	r8, #1
   11f70:	b	11d28 <__assert_fail@plt+0x4d8>
   11f74:	movw	r0, #53696	; 0xd1c0
   11f78:	movw	r1, #53716	; 0xd1d4
   11f7c:	movt	r0, #2
   11f80:	movt	r1, #2
   11f84:	b	11d1c <__assert_fail@plt+0x4cc>
   11f88:	mov	r0, #16
   11f8c:	str	r0, [sp, #24]
   11f90:	b	11d28 <__assert_fail@plt+0x4d8>
   11f94:	mov	r0, #2
   11f98:	str	r0, [sp, #24]
   11f9c:	b	11d28 <__assert_fail@plt+0x4d8>
   11fa0:	movw	r0, #53705	; 0xd1c9
   11fa4:	movt	r0, #2
   11fa8:	b	11fb4 <__assert_fail@plt+0x764>
   11fac:	movw	r0, #53704	; 0xd1c8
   11fb0:	movt	r0, #2
   11fb4:	mov	r1, #1
   11fb8:	strb	r1, [r0]
   11fbc:	b	11d28 <__assert_fail@plt+0x4d8>
   11fc0:	mov	r0, #1
   11fc4:	str	r0, [sp, #20]
   11fc8:	b	11d28 <__assert_fail@plt+0x4d8>
   11fcc:	mov	r8, #0
   11fd0:	b	11d28 <__assert_fail@plt+0x4d8>
   11fd4:	mov	r0, #0
   11fd8:	str	r0, [sp, #20]
   11fdc:	b	11d28 <__assert_fail@plt+0x4d8>
   11fe0:	movw	r0, #53696	; 0xd1c0
   11fe4:	movw	r1, #53712	; 0xd1d0
   11fe8:	movt	r0, #2
   11fec:	movt	r1, #2
   11ff0:	b	11d1c <__assert_fail@plt+0x4cc>
   11ff4:	movw	r0, #53696	; 0xd1c0
   11ff8:	movw	r1, #53708	; 0xd1cc
   11ffc:	movt	r0, #2
   12000:	movt	r1, #2
   12004:	b	11d1c <__assert_fail@plt+0x4cc>
   12008:	movw	r0, #53696	; 0xd1c0
   1200c:	movt	r0, #2
   12010:	ldr	r0, [r0]
   12014:	b	11d04 <__assert_fail@plt+0x4b4>
   12018:	movw	r0, #53704	; 0xd1c8
   1201c:	movt	r0, #2
   12020:	ldrb	r0, [r0]
   12024:	cmp	r0, #1
   12028:	bne	1204c <__assert_fail@plt+0x7fc>
   1202c:	ldr	r7, [sp, #24]
   12030:	cmp	r7, #16
   12034:	bne	12064 <__assert_fail@plt+0x814>
   12038:	cmp	r8, #1
   1203c:	beq	12c68 <__assert_fail@plt+0x1418>
   12040:	mov	r7, #16
   12044:	mov	r0, #0
   12048:	b	1205c <__assert_fail@plt+0x80c>
   1204c:	cmp	r8, #0
   12050:	mov	r7, #16
   12054:	movwne	r8, #1
   12058:	mov	r0, r8
   1205c:	ldr	r6, [sp, #16]
   12060:	b	12074 <__assert_fail@plt+0x824>
   12064:	ldr	r6, [sp, #16]
   12068:	mov	r0, #1
   1206c:	cmp	r8, #0
   12070:	beq	12c74 <__assert_fail@plt+0x1424>
   12074:	movw	r1, #53724	; 0xd1dc
   12078:	movw	r8, #53680	; 0xd1b0
   1207c:	cmp	r6, #0
   12080:	movt	r1, #2
   12084:	movt	r8, #2
   12088:	strb	r0, [r1]
   1208c:	ldr	r0, [r8]
   12090:	mov	r1, #2
   12094:	movwne	r1, #1
   12098:	tst	sl, #1
   1209c:	movwne	r1, #1
   120a0:	sub	r2, r5, r0
   120a4:	cmp	r2, r1
   120a8:	blt	12bb4 <__assert_fail@plt+0x1364>
   120ac:	cmp	r6, #0
   120b0:	beq	120f4 <__assert_fail@plt+0x8a4>
   120b4:	mov	r0, #0
   120b8:	add	r1, sp, #28
   120bc:	str	r0, [sp, #28]
   120c0:	mov	r0, r6
   120c4:	bl	18d00 <__assert_fail@plt+0x74b0>
   120c8:	cmn	r0, #1
   120cc:	ble	12bfc <__assert_fail@plt+0x13ac>
   120d0:	ldr	r0, [sp, #28]
   120d4:	movw	r1, #53728	; 0xd1e0
   120d8:	tst	sl, #1
   120dc:	movt	r1, #2
   120e0:	str	r0, [r1]
   120e4:	beq	1213c <__assert_fail@plt+0x8ec>
   120e8:	movw	r1, #45843	; 0xb313
   120ec:	movt	r1, #1
   120f0:	b	12c44 <__assert_fail@plt+0x13f4>
   120f4:	movw	r5, #53728	; 0xd1e0
   120f8:	tst	sl, #1
   120fc:	movt	r5, #2
   12100:	beq	12110 <__assert_fail@plt+0x8c0>
   12104:	mov	r0, #0
   12108:	str	r0, [r5]
   1210c:	b	1213c <__assert_fail@plt+0x8ec>
   12110:	add	r1, r0, #1
   12114:	str	r1, [r8]
   12118:	ldr	r0, [r4, r0, lsl #2]
   1211c:	str	r0, [r5]
   12120:	bl	114b4 <is_selinux_enabled@plt>
   12124:	cmp	r0, #1
   12128:	blt	1213c <__assert_fail@plt+0x8ec>
   1212c:	ldr	r0, [r5]
   12130:	bl	115f8 <security_check_context@plt>
   12134:	cmn	r0, #1
   12138:	ble	12c98 <__assert_fail@plt+0x1448>
   1213c:	movw	r0, #53704	; 0xd1c8
   12140:	ldr	r1, [sp, #20]
   12144:	movw	r5, #53752	; 0xd1f8
   12148:	movt	r0, #2
   1214c:	movt	r5, #2
   12150:	ldrb	r0, [r0]
   12154:	and	r0, r1, r0
   12158:	tst	r0, #1
   1215c:	beq	121a8 <__assert_fail@plt+0x958>
   12160:	movw	r0, #53736	; 0xd1e8
   12164:	movt	r0, #2
   12168:	bl	183c8 <__assert_fail@plt+0x6b78>
   1216c:	cmp	r0, #0
   12170:	str	r0, [r5]
   12174:	bne	121b0 <__assert_fail@plt+0x960>
   12178:	bl	116d0 <__errno_location@plt>
   1217c:	movw	r1, #45889	; 0xb341
   12180:	ldr	r4, [r0]
   12184:	mov	r0, #0
   12188:	mov	r2, #5
   1218c:	movt	r1, #1
   12190:	bl	11538 <dcgettext@plt>
   12194:	movw	r1, #48733	; 0xbe5d
   12198:	mov	r5, r0
   1219c:	mov	r0, #4
   121a0:	movt	r1, #1
   121a4:	b	12c24 <__assert_fail@plt+0x13d4>
   121a8:	mov	r0, #0
   121ac:	str	r0, [r5]
   121b0:	ldr	r0, [r8]
   121b4:	orr	r1, r7, #8
   121b8:	mov	r2, #0
   121bc:	add	r0, r4, r0, lsl #2
   121c0:	bl	19adc <__assert_fail@plt+0x828c>
   121c4:	str	r0, [sp, #24]
   121c8:	bl	13744 <__assert_fail@plt+0x1ef4>
   121cc:	cmp	r0, #0
   121d0:	beq	12ad0 <__assert_fail@plt+0x1280>
   121d4:	mov	r8, r0
   121d8:	mov	r7, #1
   121dc:	b	12204 <__assert_fail@plt+0x9b4>
   121e0:	mov	r7, r4
   121e4:	ldr	r0, [sp, #20]
   121e8:	and	r0, r0, r7
   121ec:	mov	r7, r0
   121f0:	ldr	r0, [sp, #24]
   121f4:	bl	13744 <__assert_fail@plt+0x1ef4>
   121f8:	mov	r8, r0
   121fc:	cmp	r0, #0
   12200:	beq	12ad4 <__assert_fail@plt+0x1284>
   12204:	ldrh	r0, [r8, #56]	; 0x38
   12208:	str	r7, [sp, #20]
   1220c:	add	r4, r8, #64	; 0x40
   12210:	add	sl, r8, #160	; 0xa0
   12214:	ldr	r9, [r8, #24]
   12218:	ldr	r6, [r8, #28]
   1221c:	sub	r1, r0, #1
   12220:	cmp	r1, #9
   12224:	bhi	124fc <__assert_fail@plt+0xcac>
   12228:	add	r2, pc, #4
   1222c:	mov	r7, #1
   12230:	ldr	pc, [r2, r1, lsl #2]
   12234:	andeq	r2, r1, ip, asr r2
   12238:	muleq	r1, r0, r3
   1223c:	andeq	r2, r1, r8, lsr r4
   12240:	andeq	r2, r1, r8, lsr #6
   12244:	andeq	r2, r1, r8, lsr r4
   12248:	andeq	r2, r1, r8, ror #7
   1224c:	andeq	r2, r1, r4, lsl #8
   12250:	andeq	r2, r1, r8, lsr r4
   12254:	andeq	r2, r1, r8, lsr r4
   12258:	andeq	r2, r1, ip, lsr r3
   1225c:	movw	r0, #53704	; 0xd1c8
   12260:	movt	r0, #2
   12264:	ldrb	r0, [r0]
   12268:	cmp	r0, #1
   1226c:	bne	12514 <__assert_fail@plt+0xcc4>
   12270:	movw	r0, #53752	; 0xd1f8
   12274:	mov	r7, #1
   12278:	movt	r0, #2
   1227c:	ldr	r0, [r0]
   12280:	cmp	r0, #0
   12284:	beq	121e4 <__assert_fail@plt+0x994>
   12288:	ldrd	r2, [r0]
   1228c:	ldm	sl, {r1, r5}
   12290:	eor	r3, r5, r3
   12294:	eor	r1, r1, r2
   12298:	orrs	r1, r1, r3
   1229c:	bne	121e4 <__assert_fail@plt+0x994>
   122a0:	ldrd	r0, [r0, #8]
   122a4:	ldrd	r2, [r4]
   122a8:	eor	r1, r3, r1
   122ac:	eor	r0, r2, r0
   122b0:	orrs	r0, r0, r1
   122b4:	bne	121e4 <__assert_fail@plt+0x994>
   122b8:	movw	r4, #48733	; 0xbe5d
   122bc:	mov	r0, r6
   122c0:	movt	r4, #1
   122c4:	mov	r1, r4
   122c8:	bl	114c0 <strcmp@plt>
   122cc:	cmp	r0, #0
   122d0:	beq	12a50 <__assert_fail@plt+0x1200>
   122d4:	movw	r1, #46468	; 0xb584
   122d8:	mov	r0, #0
   122dc:	mov	r2, #5
   122e0:	movt	r1, #1
   122e4:	bl	11538 <dcgettext@plt>
   122e8:	mov	r5, r0
   122ec:	mov	r0, #0
   122f0:	mov	r1, #4
   122f4:	mov	r2, r6
   122f8:	bl	17cac <__assert_fail@plt+0x645c>
   122fc:	mov	r7, r0
   12300:	mov	r0, #1
   12304:	mov	r1, #4
   12308:	mov	r2, r4
   1230c:	bl	17cac <__assert_fail@plt+0x645c>
   12310:	str	r0, [sp]
   12314:	mov	r0, #0
   12318:	mov	r1, #0
   1231c:	mov	r2, r5
   12320:	mov	r3, r7
   12324:	b	12a84 <__assert_fail@plt+0x1234>
   12328:	ldr	r5, [r8, #32]
   1232c:	movw	r1, #46592	; 0xb600
   12330:	mov	r0, #0
   12334:	movt	r1, #1
   12338:	b	12364 <__assert_fail@plt+0xb14>
   1233c:	ldr	r0, [r8, #48]	; 0x30
   12340:	cmp	r0, #0
   12344:	bne	12354 <__assert_fail@plt+0xb04>
   12348:	ldr	r0, [r8, #16]
   1234c:	cmp	r0, #0
   12350:	beq	1298c <__assert_fail@plt+0x113c>
   12354:	ldr	r5, [r8, #32]
   12358:	movw	r1, #46575	; 0xb5ef
   1235c:	mov	r0, #0
   12360:	movt	r1, #1
   12364:	mov	r2, #5
   12368:	bl	11538 <dcgettext@plt>
   1236c:	mov	r7, r0
   12370:	mov	r0, #4
   12374:	mov	r1, r6
   12378:	bl	17d54 <__assert_fail@plt+0x6504>
   1237c:	mov	r3, r0
   12380:	mov	r0, #0
   12384:	mov	r1, r5
   12388:	mov	r2, r7
   1238c:	b	1242c <__assert_fail@plt+0xbdc>
   12390:	ldr	r0, [sp, #24]
   12394:	mov	r1, r8
   12398:	bl	19b28 <__assert_fail@plt+0x82d8>
   1239c:	cmp	r0, #0
   123a0:	beq	12514 <__assert_fail@plt+0xcc4>
   123a4:	movw	r1, #46617	; 0xb619
   123a8:	mov	r0, #0
   123ac:	mov	r2, #5
   123b0:	mov	r7, #0
   123b4:	movt	r1, #1
   123b8:	bl	11538 <dcgettext@plt>
   123bc:	mov	r5, r0
   123c0:	mov	r0, #0
   123c4:	mov	r1, #3
   123c8:	mov	r2, r6
   123cc:	bl	17fd0 <__assert_fail@plt+0x6780>
   123d0:	mov	r3, r0
   123d4:	mov	r0, #0
   123d8:	mov	r1, #0
   123dc:	mov	r2, r5
   123e0:	bl	115ec <error@plt>
   123e4:	b	121e4 <__assert_fail@plt+0x994>
   123e8:	movw	r0, #53704	; 0xd1c8
   123ec:	mov	r7, #1
   123f0:	movt	r0, #2
   123f4:	ldrb	r0, [r0]
   123f8:	cmp	r0, #0
   123fc:	beq	121e4 <__assert_fail@plt+0x994>
   12400:	b	12440 <__assert_fail@plt+0xbf0>
   12404:	ldr	r5, [r8, #32]
   12408:	mov	r0, #0
   1240c:	mov	r1, #3
   12410:	mov	r2, r6
   12414:	bl	17fd0 <__assert_fail@plt+0x6780>
   12418:	movw	r2, #47327	; 0xb8df
   1241c:	mov	r3, r0
   12420:	mov	r0, #0
   12424:	mov	r1, r5
   12428:	movt	r2, #1
   1242c:	bl	115ec <error@plt>
   12430:	ldrh	r0, [r8, #56]	; 0x38
   12434:	mov	r7, #0
   12438:	cmp	r0, #6
   1243c:	bne	12508 <__assert_fail@plt+0xcb8>
   12440:	cmp	r7, #0
   12444:	beq	12508 <__assert_fail@plt+0xcb8>
   12448:	movw	r0, #53752	; 0xd1f8
   1244c:	movt	r0, #2
   12450:	ldr	r0, [r0]
   12454:	cmp	r0, #0
   12458:	beq	12508 <__assert_fail@plt+0xcb8>
   1245c:	ldrd	r2, [r0]
   12460:	ldm	sl, {r1, r5}
   12464:	eor	r3, r5, r3
   12468:	eor	r1, r1, r2
   1246c:	orrs	r1, r1, r3
   12470:	bne	12514 <__assert_fail@plt+0xcc4>
   12474:	ldrd	r0, [r0, #8]
   12478:	ldrd	r2, [r4]
   1247c:	eor	r1, r3, r1
   12480:	eor	r0, r2, r0
   12484:	orrs	r0, r0, r1
   12488:	bne	12514 <__assert_fail@plt+0xcc4>
   1248c:	movw	r4, #48733	; 0xbe5d
   12490:	mov	r0, r6
   12494:	movt	r4, #1
   12498:	mov	r1, r4
   1249c:	bl	114c0 <strcmp@plt>
   124a0:	cmp	r0, #0
   124a4:	beq	129c8 <__assert_fail@plt+0x1178>
   124a8:	movw	r1, #46468	; 0xb584
   124ac:	mov	r0, #0
   124b0:	mov	r2, #5
   124b4:	movt	r1, #1
   124b8:	bl	11538 <dcgettext@plt>
   124bc:	mov	r5, r0
   124c0:	mov	r0, #0
   124c4:	mov	r1, #4
   124c8:	mov	r2, r6
   124cc:	bl	17cac <__assert_fail@plt+0x645c>
   124d0:	mov	r7, r0
   124d4:	mov	r0, #1
   124d8:	mov	r1, #4
   124dc:	mov	r2, r4
   124e0:	bl	17cac <__assert_fail@plt+0x645c>
   124e4:	str	r0, [sp]
   124e8:	mov	r0, #0
   124ec:	mov	r1, #0
   124f0:	mov	r2, r5
   124f4:	mov	r3, r7
   124f8:	b	129fc <__assert_fail@plt+0x11ac>
   124fc:	mov	r7, #1
   12500:	cmp	r0, #6
   12504:	beq	12440 <__assert_fail@plt+0xbf0>
   12508:	mov	r4, #0
   1250c:	cmp	r7, #0
   12510:	beq	12a28 <__assert_fail@plt+0x11d8>
   12514:	movw	r0, #53705	; 0xd1c9
   12518:	movt	r0, #2
   1251c:	ldrb	r0, [r0]
   12520:	cmp	r0, #1
   12524:	bne	1255c <__assert_fail@plt+0xd0c>
   12528:	movw	r1, #46803	; 0xb6d3
   1252c:	mov	r0, #0
   12530:	mov	r2, #5
   12534:	movt	r1, #1
   12538:	bl	11538 <dcgettext@plt>
   1253c:	mov	r5, r0
   12540:	mov	r0, #4
   12544:	mov	r1, r6
   12548:	bl	17d54 <__assert_fail@plt+0x6504>
   1254c:	mov	r2, r0
   12550:	mov	r0, #1
   12554:	mov	r1, r5
   12558:	bl	11700 <__printf_chk@plt>
   1255c:	ldr	r0, [sp, #24]
   12560:	mov	r4, r9
   12564:	ldr	r5, [r0, #32]
   12568:	mov	r0, #0
   1256c:	str	r0, [sp, #32]
   12570:	movw	r0, #53728	; 0xd1e0
   12574:	movt	r0, #2
   12578:	ldr	r7, [r0]
   1257c:	cmp	r7, #0
   12580:	beq	125b4 <__assert_fail@plt+0xd64>
   12584:	movw	r0, #53724	; 0xd1dc
   12588:	movt	r0, #2
   1258c:	ldrb	r0, [r0]
   12590:	cmp	r0, #0
   12594:	beq	125e4 <__assert_fail@plt+0xd94>
   12598:	mov	r0, r5
   1259c:	mov	r1, r4
   125a0:	mov	r2, r7
   125a4:	bl	18890 <__assert_fail@plt+0x7040>
   125a8:	cmp	r0, #0
   125ac:	bne	125fc <__assert_fail@plt+0xdac>
   125b0:	b	128e0 <__assert_fail@plt+0x1090>
   125b4:	movw	r0, #53724	; 0xd1dc
   125b8:	movt	r0, #2
   125bc:	ldrb	r0, [r0]
   125c0:	cmp	r0, #0
   125c4:	beq	1265c <__assert_fail@plt+0xe0c>
   125c8:	mov	r0, r5
   125cc:	mov	r1, r4
   125d0:	add	r2, sp, #32
   125d4:	bl	18420 <__assert_fail@plt+0x6bd0>
   125d8:	cmn	r0, #1
   125dc:	bgt	12684 <__assert_fail@plt+0xe34>
   125e0:	b	12674 <__assert_fail@plt+0xe24>
   125e4:	mov	r0, r5
   125e8:	mov	r1, r4
   125ec:	mov	r2, r7
   125f0:	bl	18ac8 <__assert_fail@plt+0x7278>
   125f4:	cmp	r0, #0
   125f8:	beq	128e0 <__assert_fail@plt+0x1090>
   125fc:	bl	116d0 <__errno_location@plt>
   12600:	movw	r1, #46885	; 0xb725
   12604:	ldr	r5, [r0]
   12608:	mov	r0, #0
   1260c:	mov	r2, #5
   12610:	movt	r1, #1
   12614:	bl	11538 <dcgettext@plt>
   12618:	mov	r6, r0
   1261c:	mov	r0, #0
   12620:	mov	r1, #4
   12624:	mov	r2, r4
   12628:	bl	17cac <__assert_fail@plt+0x645c>
   1262c:	mov	sl, r0
   12630:	mov	r0, #1
   12634:	mov	r1, r7
   12638:	mov	r4, #1
   1263c:	bl	1826c <__assert_fail@plt+0x6a1c>
   12640:	str	r0, [sp]
   12644:	mov	r0, #0
   12648:	mov	r1, r5
   1264c:	mov	r2, r6
   12650:	mov	r3, sl
   12654:	bl	115ec <error@plt>
   12658:	b	128e4 <__assert_fail@plt+0x1094>
   1265c:	mov	r0, r5
   12660:	mov	r1, r4
   12664:	add	r2, sp, #32
   12668:	bl	18658 <__assert_fail@plt+0x6e08>
   1266c:	cmn	r0, #1
   12670:	bgt	12684 <__assert_fail@plt+0xe34>
   12674:	bl	116d0 <__errno_location@plt>
   12678:	ldr	r7, [r0]
   1267c:	cmp	r7, #61	; 0x3d
   12680:	bne	1294c <__assert_fail@plt+0x10fc>
   12684:	ldr	r7, [sp, #32]
   12688:	cmp	r7, #0
   1268c:	beq	1287c <__assert_fail@plt+0x102c>
   12690:	mov	r0, r7
   12694:	bl	11520 <context_new@plt>
   12698:	cmp	r0, #0
   1269c:	beq	12910 <__assert_fail@plt+0x10c0>
   126a0:	str	r0, [sp, #16]
   126a4:	movw	r0, #53708	; 0xd1cc
   126a8:	mov	r9, #1
   126ac:	movt	r0, #2
   126b0:	ldr	r1, [r0]
   126b4:	cmp	r1, #0
   126b8:	beq	1271c <__assert_fail@plt+0xecc>
   126bc:	ldr	r0, [sp, #16]
   126c0:	bl	11688 <context_user_set@plt>
   126c4:	cmp	r0, #0
   126c8:	beq	1271c <__assert_fail@plt+0xecc>
   126cc:	bl	116d0 <__errno_location@plt>
   126d0:	movw	r1, #46960	; 0xb770
   126d4:	ldr	r6, [r0]
   126d8:	mov	r0, #0
   126dc:	mov	r2, #5
   126e0:	mov	r9, #0
   126e4:	movt	r1, #1
   126e8:	bl	11538 <dcgettext@plt>
   126ec:	mov	r7, r0
   126f0:	movw	r0, #53708	; 0xd1cc
   126f4:	movt	r0, #2
   126f8:	ldr	r0, [r0]
   126fc:	bl	1827c <__assert_fail@plt+0x6a2c>
   12700:	movw	r3, #46348	; 0xb50c
   12704:	str	r0, [sp]
   12708:	mov	r0, #0
   1270c:	mov	r1, r6
   12710:	mov	r2, r7
   12714:	movt	r3, #1
   12718:	bl	115ec <error@plt>
   1271c:	movw	r0, #53720	; 0xd1d8
   12720:	movt	r0, #2
   12724:	ldr	r1, [r0]
   12728:	cmp	r1, #0
   1272c:	beq	12790 <__assert_fail@plt+0xf40>
   12730:	ldr	r0, [sp, #16]
   12734:	bl	117e4 <context_range_set@plt>
   12738:	cmp	r0, #0
   1273c:	beq	12790 <__assert_fail@plt+0xf40>
   12740:	bl	116d0 <__errno_location@plt>
   12744:	movw	r1, #46960	; 0xb770
   12748:	ldr	r6, [r0]
   1274c:	mov	r0, #0
   12750:	mov	r2, #5
   12754:	mov	r9, #0
   12758:	movt	r1, #1
   1275c:	bl	11538 <dcgettext@plt>
   12760:	mov	r7, r0
   12764:	movw	r0, #53720	; 0xd1d8
   12768:	movt	r0, #2
   1276c:	ldr	r0, [r0]
   12770:	bl	1827c <__assert_fail@plt+0x6a2c>
   12774:	movw	r3, #46363	; 0xb51b
   12778:	str	r0, [sp]
   1277c:	mov	r0, #0
   12780:	mov	r1, r6
   12784:	mov	r2, r7
   12788:	movt	r3, #1
   1278c:	bl	115ec <error@plt>
   12790:	movw	r0, #53712	; 0xd1d0
   12794:	movt	r0, #2
   12798:	ldr	r1, [r0]
   1279c:	cmp	r1, #0
   127a0:	beq	12804 <__assert_fail@plt+0xfb4>
   127a4:	ldr	r0, [sp, #16]
   127a8:	bl	1152c <context_role_set@plt>
   127ac:	cmp	r0, #0
   127b0:	beq	12804 <__assert_fail@plt+0xfb4>
   127b4:	bl	116d0 <__errno_location@plt>
   127b8:	movw	r1, #46960	; 0xb770
   127bc:	ldr	r6, [r0]
   127c0:	mov	r0, #0
   127c4:	mov	r2, #5
   127c8:	mov	r9, #0
   127cc:	movt	r1, #1
   127d0:	bl	11538 <dcgettext@plt>
   127d4:	mov	r7, r0
   127d8:	movw	r0, #53712	; 0xd1d0
   127dc:	movt	r0, #2
   127e0:	ldr	r0, [r0]
   127e4:	bl	1827c <__assert_fail@plt+0x6a2c>
   127e8:	movw	r3, #46353	; 0xb511
   127ec:	str	r0, [sp]
   127f0:	mov	r0, #0
   127f4:	mov	r1, r6
   127f8:	mov	r2, r7
   127fc:	movt	r3, #1
   12800:	bl	115ec <error@plt>
   12804:	movw	r0, #53716	; 0xd1d4
   12808:	movt	r0, #2
   1280c:	ldr	r1, [r0]
   12810:	cmp	r1, #0
   12814:	beq	128b0 <__assert_fail@plt+0x1060>
   12818:	ldr	r0, [sp, #16]
   1281c:	bl	11544 <context_type_set@plt>
   12820:	cmp	r0, #0
   12824:	beq	128b0 <__assert_fail@plt+0x1060>
   12828:	bl	116d0 <__errno_location@plt>
   1282c:	movw	r1, #46960	; 0xb770
   12830:	ldr	r6, [r0]
   12834:	mov	r5, r0
   12838:	mov	r0, #0
   1283c:	mov	r2, #5
   12840:	movt	r1, #1
   12844:	bl	11538 <dcgettext@plt>
   12848:	mov	r7, r0
   1284c:	movw	r0, #53716	; 0xd1d4
   12850:	movt	r0, #2
   12854:	ldr	r0, [r0]
   12858:	bl	1827c <__assert_fail@plt+0x6a2c>
   1285c:	movw	r3, #46358	; 0xb516
   12860:	str	r0, [sp]
   12864:	mov	r0, #0
   12868:	mov	r1, r6
   1286c:	mov	r2, r7
   12870:	movt	r3, #1
   12874:	bl	115ec <error@plt>
   12878:	b	129b0 <__assert_fail@plt+0x1160>
   1287c:	movw	r1, #46836	; 0xb6f4
   12880:	mov	r0, #0
   12884:	mov	r2, #5
   12888:	movt	r1, #1
   1288c:	bl	11538 <dcgettext@plt>
   12890:	mov	r5, r0
   12894:	mov	r0, #4
   12898:	mov	r1, r4
   1289c:	bl	17d54 <__assert_fail@plt+0x6504>
   128a0:	mov	r3, r0
   128a4:	mov	r0, #0
   128a8:	mov	r1, #0
   128ac:	b	1297c <__assert_fail@plt+0x112c>
   128b0:	cmp	r9, #0
   128b4:	beq	129a8 <__assert_fail@plt+0x1158>
   128b8:	ldr	r0, [sp, #16]
   128bc:	bl	117f0 <context_str@plt>
   128c0:	ldr	r1, [sp, #32]
   128c4:	mov	r7, r0
   128c8:	cmp	r1, #0
   128cc:	beq	12584 <__assert_fail@plt+0xd34>
   128d0:	mov	r0, r7
   128d4:	bl	114c0 <strcmp@plt>
   128d8:	cmp	r0, #0
   128dc:	bne	12584 <__assert_fail@plt+0xd34>
   128e0:	mov	r4, #0
   128e4:	movw	r0, #53728	; 0xd1e0
   128e8:	movt	r0, #2
   128ec:	ldr	r0, [r0]
   128f0:	cmp	r0, #0
   128f4:	bne	12908 <__assert_fail@plt+0x10b8>
   128f8:	ldr	r0, [sp, #16]
   128fc:	bl	1164c <context_free@plt>
   12900:	ldr	r0, [sp, #32]
   12904:	bl	117cc <freecon@plt>
   12908:	eor	r4, r4, #1
   1290c:	b	12a28 <__assert_fail@plt+0x11d8>
   12910:	bl	116d0 <__errno_location@plt>
   12914:	movw	r1, #46922	; 0xb74a
   12918:	ldr	r5, [r0]
   1291c:	mov	r0, #0
   12920:	mov	r2, #5
   12924:	movt	r1, #1
   12928:	bl	11538 <dcgettext@plt>
   1292c:	mov	r6, r0
   12930:	mov	r0, r7
   12934:	bl	1827c <__assert_fail@plt+0x6a2c>
   12938:	mov	r3, r0
   1293c:	mov	r0, #0
   12940:	mov	r1, r5
   12944:	mov	r2, r6
   12948:	b	12980 <__assert_fail@plt+0x1130>
   1294c:	movw	r1, #45786	; 0xb2da
   12950:	mov	r0, #0
   12954:	mov	r2, #5
   12958:	movt	r1, #1
   1295c:	bl	11538 <dcgettext@plt>
   12960:	mov	r5, r0
   12964:	mov	r0, #4
   12968:	mov	r1, r4
   1296c:	bl	17d54 <__assert_fail@plt+0x6504>
   12970:	mov	r3, r0
   12974:	mov	r0, #0
   12978:	mov	r1, r7
   1297c:	mov	r2, r5
   12980:	bl	115ec <error@plt>
   12984:	mov	r4, #0
   12988:	b	12a28 <__assert_fail@plt+0x11d8>
   1298c:	ldr	r0, [sp, #24]
   12990:	mov	r7, #1
   12994:	mov	r1, r8
   12998:	mov	r2, #1
   1299c:	str	r7, [r8, #16]
   129a0:	bl	14dc8 <__assert_fail@plt+0x3578>
   129a4:	b	121e4 <__assert_fail@plt+0x994>
   129a8:	bl	116d0 <__errno_location@plt>
   129ac:	mov	r5, r0
   129b0:	ldr	r0, [sp, #16]
   129b4:	ldr	r4, [r5]
   129b8:	bl	1164c <context_free@plt>
   129bc:	str	r4, [r5]
   129c0:	mov	r4, #0
   129c4:	b	12a28 <__assert_fail@plt+0x11d8>
   129c8:	movw	r1, #46423	; 0xb557
   129cc:	mov	r0, #0
   129d0:	mov	r2, #5
   129d4:	movt	r1, #1
   129d8:	bl	11538 <dcgettext@plt>
   129dc:	mov	r5, r0
   129e0:	mov	r0, #4
   129e4:	mov	r1, r6
   129e8:	bl	17d54 <__assert_fail@plt+0x6504>
   129ec:	mov	r3, r0
   129f0:	mov	r0, #0
   129f4:	mov	r1, #0
   129f8:	mov	r2, r5
   129fc:	bl	115ec <error@plt>
   12a00:	movw	r1, #46526	; 0xb5be
   12a04:	mov	r0, #0
   12a08:	mov	r2, #5
   12a0c:	mov	r4, #0
   12a10:	movt	r1, #1
   12a14:	bl	11538 <dcgettext@plt>
   12a18:	mov	r2, r0
   12a1c:	mov	r0, #0
   12a20:	mov	r1, #0
   12a24:	bl	115ec <error@plt>
   12a28:	movw	r0, #53704	; 0xd1c8
   12a2c:	movt	r0, #2
   12a30:	ldrb	r0, [r0]
   12a34:	cmp	r0, #0
   12a38:	bne	121e0 <__assert_fail@plt+0x990>
   12a3c:	ldr	r0, [sp, #24]
   12a40:	mov	r1, r8
   12a44:	mov	r2, #4
   12a48:	bl	14dc8 <__assert_fail@plt+0x3578>
   12a4c:	b	121e0 <__assert_fail@plt+0x990>
   12a50:	movw	r1, #46423	; 0xb557
   12a54:	mov	r0, #0
   12a58:	mov	r2, #5
   12a5c:	movt	r1, #1
   12a60:	bl	11538 <dcgettext@plt>
   12a64:	mov	r5, r0
   12a68:	mov	r0, #4
   12a6c:	mov	r1, r6
   12a70:	bl	17d54 <__assert_fail@plt+0x6504>
   12a74:	mov	r3, r0
   12a78:	mov	r0, #0
   12a7c:	mov	r1, #0
   12a80:	mov	r2, r5
   12a84:	bl	115ec <error@plt>
   12a88:	movw	r1, #46526	; 0xb5be
   12a8c:	mov	r0, #0
   12a90:	mov	r2, #5
   12a94:	mov	r7, #0
   12a98:	movt	r1, #1
   12a9c:	bl	11538 <dcgettext@plt>
   12aa0:	mov	r2, r0
   12aa4:	mov	r0, #0
   12aa8:	mov	r1, #0
   12aac:	bl	115ec <error@plt>
   12ab0:	ldr	r4, [sp, #24]
   12ab4:	mov	r1, r8
   12ab8:	mov	r2, #4
   12abc:	mov	r0, r4
   12ac0:	bl	14dc8 <__assert_fail@plt+0x3578>
   12ac4:	mov	r0, r4
   12ac8:	bl	13744 <__assert_fail@plt+0x1ef4>
   12acc:	b	121e4 <__assert_fail@plt+0x994>
   12ad0:	mov	r7, #1
   12ad4:	bl	116d0 <__errno_location@plt>
   12ad8:	ldr	r6, [r0]
   12adc:	mov	r5, r0
   12ae0:	cmp	r6, #0
   12ae4:	beq	12b10 <__assert_fail@plt+0x12c0>
   12ae8:	movw	r1, #46390	; 0xb536
   12aec:	mov	r0, #0
   12af0:	mov	r2, #5
   12af4:	mov	r7, #0
   12af8:	movt	r1, #1
   12afc:	bl	11538 <dcgettext@plt>
   12b00:	mov	r2, r0
   12b04:	mov	r0, #0
   12b08:	mov	r1, r6
   12b0c:	bl	115ec <error@plt>
   12b10:	ldr	r0, [sp, #24]
   12b14:	bl	1359c <__assert_fail@plt+0x1d4c>
   12b18:	cmp	r0, #0
   12b1c:	beq	12b4c <__assert_fail@plt+0x12fc>
   12b20:	movw	r1, #46406	; 0xb546
   12b24:	ldr	r4, [r5]
   12b28:	mov	r0, #0
   12b2c:	mov	r2, #5
   12b30:	mov	r7, #0
   12b34:	movt	r1, #1
   12b38:	bl	11538 <dcgettext@plt>
   12b3c:	mov	r2, r0
   12b40:	mov	r0, #0
   12b44:	mov	r1, r4
   12b48:	bl	115ec <error@plt>
   12b4c:	eor	r0, r7, #1
   12b50:	sub	sp, fp, #28
   12b54:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12b58:	movw	r0, #53600	; 0xd160
   12b5c:	movw	r2, #45672	; 0xb268
   12b60:	mov	r1, #0
   12b64:	movw	r7, #45658	; 0xb25a
   12b68:	movt	r0, #2
   12b6c:	movt	r2, #1
   12b70:	str	r1, [sp, #8]
   12b74:	movw	r1, #45599	; 0xb21f
   12b78:	movt	r7, #1
   12b7c:	movt	r1, #1
   12b80:	ldr	r3, [r0]
   12b84:	movw	r0, #53692	; 0xd1bc
   12b88:	str	r2, [sp, #4]
   12b8c:	movw	r2, #45644	; 0xb24c
   12b90:	str	r7, [sp]
   12b94:	movt	r0, #2
   12b98:	movt	r2, #1
   12b9c:	ldr	r0, [r0]
   12ba0:	bl	19328 <__assert_fail@plt+0x7ad8>
   12ba4:	mov	r0, #0
   12ba8:	bl	1167c <exit@plt>
   12bac:	mov	r0, #0
   12bb0:	bl	11950 <__assert_fail@plt+0x100>
   12bb4:	cmp	r0, r5
   12bb8:	bge	12c3c <__assert_fail@plt+0x13ec>
   12bbc:	movw	r1, #45761	; 0xb2c1
   12bc0:	mov	r0, #0
   12bc4:	mov	r2, #5
   12bc8:	movt	r1, #1
   12bcc:	bl	11538 <dcgettext@plt>
   12bd0:	mov	r6, r0
   12bd4:	add	r0, r4, r5, lsl #2
   12bd8:	ldr	r0, [r0, #-4]
   12bdc:	bl	1827c <__assert_fail@plt+0x6a2c>
   12be0:	mov	r3, r0
   12be4:	mov	r0, #0
   12be8:	mov	r1, #0
   12bec:	mov	r2, r6
   12bf0:	bl	115ec <error@plt>
   12bf4:	mov	r0, #1
   12bf8:	bl	11950 <__assert_fail@plt+0x100>
   12bfc:	bl	116d0 <__errno_location@plt>
   12c00:	movw	r1, #45786	; 0xb2da
   12c04:	ldr	r4, [r0]
   12c08:	mov	r0, #0
   12c0c:	mov	r2, #5
   12c10:	movt	r1, #1
   12c14:	bl	11538 <dcgettext@plt>
   12c18:	mov	r5, r0
   12c1c:	mov	r0, #4
   12c20:	mov	r1, r6
   12c24:	bl	17d54 <__assert_fail@plt+0x6504>
   12c28:	mov	r3, r0
   12c2c:	mov	r0, #1
   12c30:	mov	r1, r4
   12c34:	mov	r2, r5
   12c38:	bl	115ec <error@plt>
   12c3c:	movw	r1, #45745	; 0xb2b1
   12c40:	movt	r1, #1
   12c44:	mov	r0, #0
   12c48:	mov	r2, #5
   12c4c:	bl	11538 <dcgettext@plt>
   12c50:	mov	r2, r0
   12c54:	mov	r0, #0
   12c58:	mov	r1, #0
   12c5c:	bl	115ec <error@plt>
   12c60:	mov	r0, #1
   12c64:	bl	11950 <__assert_fail@plt+0x100>
   12c68:	movw	r1, #45685	; 0xb275
   12c6c:	movt	r1, #1
   12c70:	b	12c7c <__assert_fail@plt+0x142c>
   12c74:	movw	r1, #45727	; 0xb29f
   12c78:	movt	r1, #1
   12c7c:	mov	r0, #0
   12c80:	mov	r2, #5
   12c84:	bl	11538 <dcgettext@plt>
   12c88:	mov	r2, r0
   12c8c:	mov	r0, #1
   12c90:	mov	r1, #0
   12c94:	bl	115ec <error@plt>
   12c98:	bl	116d0 <__errno_location@plt>
   12c9c:	movw	r1, #45823	; 0xb2ff
   12ca0:	ldr	r4, [r0]
   12ca4:	mov	r0, #0
   12ca8:	mov	r2, #5
   12cac:	movt	r1, #1
   12cb0:	bl	11538 <dcgettext@plt>
   12cb4:	mov	r6, r0
   12cb8:	ldr	r0, [r5]
   12cbc:	bl	1827c <__assert_fail@plt+0x6a2c>
   12cc0:	mov	r3, r0
   12cc4:	mov	r0, #1
   12cc8:	mov	r1, r4
   12ccc:	mov	r2, r6
   12cd0:	bl	115ec <error@plt>
   12cd4:	movw	r1, #53756	; 0xd1fc
   12cd8:	movt	r1, #2
   12cdc:	str	r0, [r1]
   12ce0:	bx	lr
   12ce4:	movw	r1, #53760	; 0xd200
   12ce8:	movt	r1, #2
   12cec:	strb	r0, [r1]
   12cf0:	bx	lr
   12cf4:	push	{r4, r5, r6, sl, fp, lr}
   12cf8:	add	fp, sp, #16
   12cfc:	sub	sp, sp, #8
   12d00:	movw	r0, #53692	; 0xd1bc
   12d04:	movt	r0, #2
   12d08:	ldr	r0, [r0]
   12d0c:	bl	19d54 <__assert_fail@plt+0x8504>
   12d10:	cmp	r0, #0
   12d14:	beq	12d3c <__assert_fail@plt+0x14ec>
   12d18:	movw	r0, #53760	; 0xd200
   12d1c:	movt	r0, #2
   12d20:	ldrb	r0, [r0]
   12d24:	cmp	r0, #0
   12d28:	beq	12d5c <__assert_fail@plt+0x150c>
   12d2c:	bl	116d0 <__errno_location@plt>
   12d30:	ldr	r0, [r0]
   12d34:	cmp	r0, #32
   12d38:	bne	12d5c <__assert_fail@plt+0x150c>
   12d3c:	movw	r0, #53688	; 0xd1b8
   12d40:	movt	r0, #2
   12d44:	ldr	r0, [r0]
   12d48:	bl	19d54 <__assert_fail@plt+0x8504>
   12d4c:	cmp	r0, #0
   12d50:	subeq	sp, fp, #16
   12d54:	popeq	{r4, r5, r6, sl, fp, pc}
   12d58:	b	12dcc <__assert_fail@plt+0x157c>
   12d5c:	movw	r1, #47311	; 0xb8cf
   12d60:	mov	r0, #0
   12d64:	mov	r2, #5
   12d68:	movt	r1, #1
   12d6c:	bl	11538 <dcgettext@plt>
   12d70:	mov	r4, r0
   12d74:	movw	r0, #53756	; 0xd1fc
   12d78:	movt	r0, #2
   12d7c:	ldr	r6, [r0]
   12d80:	bl	116d0 <__errno_location@plt>
   12d84:	ldr	r5, [r0]
   12d88:	cmp	r6, #0
   12d8c:	bne	12da8 <__assert_fail@plt+0x1558>
   12d90:	movw	r2, #47327	; 0xb8df
   12d94:	mov	r0, #0
   12d98:	mov	r1, r5
   12d9c:	mov	r3, r4
   12da0:	movt	r2, #1
   12da4:	b	12dc8 <__assert_fail@plt+0x1578>
   12da8:	mov	r0, r6
   12dac:	bl	17ef4 <__assert_fail@plt+0x66a4>
   12db0:	movw	r2, #47323	; 0xb8db
   12db4:	mov	r3, r0
   12db8:	str	r4, [sp]
   12dbc:	mov	r0, #0
   12dc0:	mov	r1, r5
   12dc4:	movt	r2, #1
   12dc8:	bl	115ec <error@plt>
   12dcc:	movw	r0, #53604	; 0xd164
   12dd0:	movt	r0, #2
   12dd4:	ldr	r0, [r0]
   12dd8:	bl	114fc <_exit@plt>
   12ddc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12de0:	add	fp, sp, #28
   12de4:	sub	sp, sp, #28
   12de8:	cmp	r1, #4096	; 0x1000
   12dec:	bcs	12e08 <__assert_fail@plt+0x15b8>
   12df0:	mov	r7, r0
   12df4:	and	r0, r1, #516	; 0x204
   12df8:	mov	r5, r1
   12dfc:	cmp	r0, #516	; 0x204
   12e00:	tstne	r5, #18
   12e04:	bne	12e24 <__assert_fail@plt+0x15d4>
   12e08:	bl	116d0 <__errno_location@plt>
   12e0c:	mov	r1, #22
   12e10:	mov	r4, #0
   12e14:	str	r1, [r0]
   12e18:	mov	r0, r4
   12e1c:	sub	sp, fp, #28
   12e20:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12e24:	mov	r0, #1
   12e28:	mov	r1, #96	; 0x60
   12e2c:	mov	sl, r2
   12e30:	bl	19b58 <__assert_fail@plt+0x8308>
   12e34:	cmp	r0, #0
   12e38:	beq	13240 <__assert_fail@plt+0x19f0>
   12e3c:	mov	r4, r0
   12e40:	mvn	r0, #99	; 0x63
   12e44:	tst	r5, #2
   12e48:	mov	r1, r5
   12e4c:	str	r0, [r4, #32]
   12e50:	bic	r0, r5, #516	; 0x204
   12e54:	str	sl, [r4, #44]	; 0x2c
   12e58:	str	r4, [sp, #24]
   12e5c:	orrne	r1, r0, #4
   12e60:	str	r1, [r4, #48]	; 0x30
   12e64:	ldr	r0, [r7]
   12e68:	cmp	r0, #0
   12e6c:	beq	12ea4 <__assert_fail@plt+0x1654>
   12e70:	add	r6, r7, #4
   12e74:	mov	r4, #0
   12e78:	bl	116ac <strlen@plt>
   12e7c:	cmp	r0, r4
   12e80:	movhi	r4, r0
   12e84:	ldr	r0, [r6], #4
   12e88:	cmp	r0, #0
   12e8c:	bne	12e78 <__assert_fail@plt+0x1628>
   12e90:	add	r0, r4, #1
   12e94:	ldr	r4, [sp, #24]
   12e98:	cmp	r0, #4096	; 0x1000
   12e9c:	movls	r0, #4096	; 0x1000
   12ea0:	b	12ea8 <__assert_fail@plt+0x1658>
   12ea4:	mov	r0, #4096	; 0x1000
   12ea8:	ldr	r1, [r4, #36]	; 0x24
   12eac:	add	r0, r0, #256	; 0x100
   12eb0:	adds	r1, r0, r1
   12eb4:	bcc	12ed8 <__assert_fail@plt+0x1688>
   12eb8:	ldr	r0, [r4, #24]
   12ebc:	bl	1a1dc <__assert_fail@plt+0x898c>
   12ec0:	mov	r0, #0
   12ec4:	str	r0, [r4, #24]
   12ec8:	bl	116d0 <__errno_location@plt>
   12ecc:	mov	r1, #36	; 0x24
   12ed0:	str	r1, [r0]
   12ed4:	b	13238 <__assert_fail@plt+0x19e8>
   12ed8:	str	r1, [r4, #36]	; 0x24
   12edc:	ldr	r0, [r4, #24]
   12ee0:	bl	19bdc <__assert_fail@plt+0x838c>
   12ee4:	cmp	r0, #0
   12ee8:	beq	12f5c <__assert_fail@plt+0x170c>
   12eec:	str	r0, [r4, #24]
   12ef0:	ldr	r0, [r7]
   12ef4:	cmp	r0, #0
   12ef8:	beq	12f70 <__assert_fail@plt+0x1720>
   12efc:	mov	r0, #176	; 0xb0
   12f00:	bl	19bac <__assert_fail@plt+0x835c>
   12f04:	cmp	r0, #0
   12f08:	beq	13230 <__assert_fail@plt+0x19e0>
   12f0c:	ldr	r1, [r4, #24]
   12f10:	mov	r6, r0
   12f14:	mov	r0, #0
   12f18:	mov	r2, #196608	; 0x30000
   12f1c:	strb	r0, [r6, #168]	; 0xa8
   12f20:	str	r2, [r6, #58]	; 0x3a
   12f24:	mvn	r2, #0
   12f28:	str	r4, [r6, #44]	; 0x2c
   12f2c:	str	r2, [r6, #48]	; 0x30
   12f30:	str	r0, [r6, #52]	; 0x34
   12f34:	str	r0, [r6, #12]
   12f38:	str	r0, [r6, #16]
   12f3c:	str	r0, [r6, #20]
   12f40:	str	r1, [r6, #28]
   12f44:	str	r0, [r6, #32]
   12f48:	cmp	sl, #0
   12f4c:	beq	12f7c <__assert_fail@plt+0x172c>
   12f50:	ldrb	r0, [r4, #49]	; 0x31
   12f54:	ubfx	r0, r0, #2, #1
   12f58:	b	12f80 <__assert_fail@plt+0x1730>
   12f5c:	ldr	r0, [r4, #24]
   12f60:	bl	1a1dc <__assert_fail@plt+0x898c>
   12f64:	mov	r0, #0
   12f68:	str	r0, [r4, #24]
   12f6c:	b	13238 <__assert_fail@plt+0x19e8>
   12f70:	mov	r6, #0
   12f74:	cmp	sl, #0
   12f78:	bne	12f50 <__assert_fail@plt+0x1700>
   12f7c:	mov	r0, #1
   12f80:	ldr	r4, [r7]
   12f84:	cmp	r4, #0
   12f88:	beq	130f4 <__assert_fail@plt+0x18a4>
   12f8c:	eor	r0, r0, #1
   12f90:	str	r6, [sp, #20]
   12f94:	and	r1, r5, #2048	; 0x800
   12f98:	mov	r9, #0
   12f9c:	mov	r6, #0
   12fa0:	str	sl, [sp, #8]
   12fa4:	str	r0, [sp, #12]
   12fa8:	mov	r0, #0
   12fac:	str	r1, [sp, #16]
   12fb0:	str	r0, [sp, #4]
   12fb4:	b	12fe0 <__assert_fail@plt+0x1790>
   12fb8:	cmp	r9, #0
   12fbc:	str	r4, [r5, #8]
   12fc0:	beq	130e8 <__assert_fail@plt+0x1898>
   12fc4:	ldr	r0, [sp, #4]
   12fc8:	str	r5, [sp, #4]
   12fcc:	str	r5, [r0, #8]
   12fd0:	ldr	r4, [r7, #4]!
   12fd4:	add	r6, r6, #1
   12fd8:	cmp	r4, #0
   12fdc:	beq	13110 <__assert_fail@plt+0x18c0>
   12fe0:	mov	r0, r4
   12fe4:	bl	116ac <strlen@plt>
   12fe8:	mov	r8, r0
   12fec:	ldr	r0, [sp, #16]
   12ff0:	cmp	r0, #0
   12ff4:	bne	1302c <__assert_fail@plt+0x17dc>
   12ff8:	cmp	r8, #3
   12ffc:	bcc	1302c <__assert_fail@plt+0x17dc>
   13000:	add	r0, r8, r4
   13004:	ldrb	r0, [r0, #-1]
   13008:	cmp	r0, #47	; 0x2f
   1300c:	bne	1302c <__assert_fail@plt+0x17dc>
   13010:	sub	r0, r4, #2
   13014:	ldrb	r1, [r0, r8]
   13018:	cmp	r1, #47	; 0x2f
   1301c:	bne	1302c <__assert_fail@plt+0x17dc>
   13020:	sub	r8, r8, #1
   13024:	cmp	r8, #1
   13028:	bhi	13014 <__assert_fail@plt+0x17c4>
   1302c:	add	r0, r8, #176	; 0xb0
   13030:	bic	r0, r0, #7
   13034:	bl	19bac <__assert_fail@plt+0x835c>
   13038:	cmp	r0, #0
   1303c:	beq	13100 <__assert_fail@plt+0x18b0>
   13040:	add	sl, r0, #168	; 0xa8
   13044:	mov	r5, r0
   13048:	mov	r1, r4
   1304c:	mov	r2, r8
   13050:	mov	r0, sl
   13054:	bl	11508 <memcpy@plt>
   13058:	ldr	r0, [sp, #24]
   1305c:	ldr	r2, [sp, #20]
   13060:	mov	r4, #0
   13064:	strb	r4, [sl, r8]
   13068:	str	r2, [r5, #4]
   1306c:	add	r2, r5, #44	; 0x2c
   13070:	ldr	r1, [r0, #24]
   13074:	stm	r2, {r0, r4, r8}
   13078:	mov	r2, #196608	; 0x30000
   1307c:	str	r2, [r5, #58]	; 0x3a
   13080:	ldr	r2, [sp, #12]
   13084:	str	r4, [r5, #12]
   13088:	str	r4, [r5, #16]
   1308c:	str	r4, [r5, #20]
   13090:	str	sl, [r5, #24]
   13094:	str	r1, [r5, #28]
   13098:	clz	r1, r9
   1309c:	str	r4, [r5, #32]
   130a0:	lsr	r1, r1, #5
   130a4:	orrs	r1, r2, r1
   130a8:	bne	130c0 <__assert_fail@plt+0x1870>
   130ac:	mov	r0, #2
   130b0:	str	r0, [r5, #112]	; 0x70
   130b4:	str	r4, [r5, #116]	; 0x74
   130b8:	mov	r0, #11
   130bc:	b	130cc <__assert_fail@plt+0x187c>
   130c0:	mov	r1, r5
   130c4:	mov	r2, #0
   130c8:	bl	132d4 <__assert_fail@plt+0x1a84>
   130cc:	ldr	sl, [sp, #8]
   130d0:	strh	r0, [r5, #56]	; 0x38
   130d4:	cmp	sl, #0
   130d8:	beq	12fb8 <__assert_fail@plt+0x1768>
   130dc:	str	r9, [r5, #8]
   130e0:	mov	r9, r5
   130e4:	b	12fd0 <__assert_fail@plt+0x1780>
   130e8:	mov	r0, r5
   130ec:	str	r5, [sp, #4]
   130f0:	b	130e0 <__assert_fail@plt+0x1890>
   130f4:	ldr	r4, [sp, #24]
   130f8:	mov	r9, #0
   130fc:	b	13144 <__assert_fail@plt+0x18f4>
   13100:	ldr	r6, [sp, #20]
   13104:	cmp	r9, #0
   13108:	bne	1320c <__assert_fail@plt+0x19bc>
   1310c:	b	13224 <__assert_fail@plt+0x19d4>
   13110:	cmp	sl, #0
   13114:	beq	1313c <__assert_fail@plt+0x18ec>
   13118:	ldr	r4, [sp, #24]
   1311c:	cmp	r6, #2
   13120:	bcc	13140 <__assert_fail@plt+0x18f0>
   13124:	mov	r0, r4
   13128:	mov	r1, r9
   1312c:	mov	r2, r6
   13130:	bl	1346c <__assert_fail@plt+0x1c1c>
   13134:	mov	r9, r0
   13138:	b	13140 <__assert_fail@plt+0x18f0>
   1313c:	ldr	r4, [sp, #24]
   13140:	ldr	r6, [sp, #20]
   13144:	mov	r0, #176	; 0xb0
   13148:	bl	19bac <__assert_fail@plt+0x835c>
   1314c:	cmp	r0, #0
   13150:	beq	131e4 <__assert_fail@plt+0x1994>
   13154:	ldr	r2, [r4, #24]
   13158:	mov	r1, #0
   1315c:	mov	r3, #196608	; 0x30000
   13160:	str	r0, [r4]
   13164:	str	r1, [r0, #52]	; 0x34
   13168:	strb	r1, [r0, #168]	; 0xa8
   1316c:	str	r4, [r0, #44]	; 0x2c
   13170:	str	r3, [r0, #58]	; 0x3a
   13174:	str	r2, [r0, #28]
   13178:	mov	r2, #9
   1317c:	str	r1, [r0, #32]
   13180:	strh	r2, [r0, #56]	; 0x38
   13184:	str	r9, [r0, #8]
   13188:	str	r1, [r0, #12]
   1318c:	str	r1, [r0, #16]
   13190:	str	r1, [r0, #20]
   13194:	mov	r1, #1
   13198:	str	r1, [r0, #48]	; 0x30
   1319c:	ldrh	r0, [r4, #48]	; 0x30
   131a0:	movw	r1, #258	; 0x102
   131a4:	tst	r0, r1
   131a8:	beq	13248 <__assert_fail@plt+0x19f8>
   131ac:	movw	r0, #41436	; 0xa1dc
   131b0:	movw	r2, #20448	; 0x4fe0
   131b4:	movw	r3, #20480	; 0x5000
   131b8:	mov	r1, #0
   131bc:	movt	r0, #1
   131c0:	movt	r2, #1
   131c4:	movt	r3, #1
   131c8:	str	r0, [sp]
   131cc:	mov	r0, #31
   131d0:	bl	1568c <__assert_fail@plt+0x3e3c>
   131d4:	cmp	r0, #0
   131d8:	str	r0, [r4, #56]	; 0x38
   131dc:	bne	13260 <__assert_fail@plt+0x1a10>
   131e0:	b	131ec <__assert_fail@plt+0x199c>
   131e4:	mov	r0, #0
   131e8:	str	r0, [r4]
   131ec:	cmp	r9, #0
   131f0:	bne	1320c <__assert_fail@plt+0x19bc>
   131f4:	b	13224 <__assert_fail@plt+0x19d4>
   131f8:	mov	r0, r9
   131fc:	bl	1a1dc <__assert_fail@plt+0x898c>
   13200:	cmp	r4, #0
   13204:	mov	r9, r4
   13208:	beq	13224 <__assert_fail@plt+0x19d4>
   1320c:	ldrd	r4, [r9, #8]
   13210:	cmp	r5, #0
   13214:	beq	131f8 <__assert_fail@plt+0x19a8>
   13218:	mov	r0, r5
   1321c:	bl	11838 <closedir@plt>
   13220:	b	131f8 <__assert_fail@plt+0x19a8>
   13224:	mov	r0, r6
   13228:	bl	1a1dc <__assert_fail@plt+0x898c>
   1322c:	ldr	r4, [sp, #24]
   13230:	ldr	r0, [r4, #24]
   13234:	bl	1a1dc <__assert_fail@plt+0x898c>
   13238:	mov	r0, r4
   1323c:	bl	1a1dc <__assert_fail@plt+0x898c>
   13240:	mov	r4, #0
   13244:	b	12e18 <__assert_fail@plt+0x15c8>
   13248:	mov	r0, #32
   1324c:	bl	19bac <__assert_fail@plt+0x835c>
   13250:	cmp	r0, #0
   13254:	str	r0, [r4, #56]	; 0x38
   13258:	beq	131ec <__assert_fail@plt+0x199c>
   1325c:	bl	19dd8 <__assert_fail@plt+0x8588>
   13260:	ldr	r4, [sp, #24]
   13264:	ldr	r0, [r4, #48]	; 0x30
   13268:	tst	r0, #516	; 0x204
   1326c:	bne	132c4 <__assert_fail@plt+0x1a74>
   13270:	mov	r1, #32768	; 0x8000
   13274:	tst	r0, #512	; 0x200
   13278:	and	r1, r1, r0, lsl #11
   1327c:	orr	r1, r1, #18688	; 0x4900
   13280:	orr	r2, r1, #524288	; 0x80000
   13284:	bne	1329c <__assert_fail@plt+0x1a4c>
   13288:	movw	r0, #47331	; 0xb8e3
   1328c:	mov	r1, r2
   13290:	movt	r0, #1
   13294:	bl	1a144 <__assert_fail@plt+0x88f4>
   13298:	b	132ac <__assert_fail@plt+0x1a5c>
   1329c:	ldr	r0, [r4, #32]
   132a0:	movw	r1, #47331	; 0xb8e3
   132a4:	movt	r1, #1
   132a8:	bl	16590 <__assert_fail@plt+0x4d40>
   132ac:	cmn	r0, #1
   132b0:	str	r0, [r4, #28]
   132b4:	bgt	132c4 <__assert_fail@plt+0x1a74>
   132b8:	ldr	r0, [r4, #48]	; 0x30
   132bc:	orr	r0, r0, #4
   132c0:	str	r0, [r4, #48]	; 0x30
   132c4:	add	r0, r4, #60	; 0x3c
   132c8:	mvn	r1, #0
   132cc:	bl	164c8 <__assert_fail@plt+0x4c78>
   132d0:	b	12e18 <__assert_fail@plt+0x15c8>
   132d4:	push	{r4, r5, r6, sl, fp, lr}
   132d8:	add	fp, sp, #16
   132dc:	sub	sp, sp, #8
   132e0:	mov	r4, r1
   132e4:	ldr	r1, [r0, #48]	; 0x30
   132e8:	ldr	r3, [r4, #48]	; 0x30
   132ec:	add	r5, r4, #64	; 0x40
   132f0:	cmp	r3, #0
   132f4:	andeq	r3, r1, #1
   132f8:	orreq	r2, r3, r2
   132fc:	cmp	r2, #0
   13300:	andseq	r1, r1, #2
   13304:	beq	13360 <__assert_fail@plt+0x1b10>
   13308:	ldr	r1, [r4, #24]
   1330c:	mov	r0, #3
   13310:	mov	r2, r5
   13314:	bl	117fc <__xstat64@plt>
   13318:	cmp	r0, #0
   1331c:	beq	133e0 <__assert_fail@plt+0x1b90>
   13320:	bl	116d0 <__errno_location@plt>
   13324:	mov	r6, r0
   13328:	ldr	r0, [r0]
   1332c:	cmp	r0, #2
   13330:	bne	13390 <__assert_fail@plt+0x1b40>
   13334:	ldr	r1, [r4, #24]
   13338:	mov	r0, #3
   1333c:	mov	r2, r5
   13340:	bl	1182c <__lxstat64@plt>
   13344:	cmp	r0, #0
   13348:	bne	1338c <__assert_fail@plt+0x1b3c>
   1334c:	mov	r0, #0
   13350:	str	r0, [r6]
   13354:	mov	r0, #13
   13358:	sub	sp, fp, #16
   1335c:	pop	{r4, r5, r6, sl, fp, pc}
   13360:	ldr	r1, [r0, #32]
   13364:	ldr	r2, [r4, #24]
   13368:	mov	r0, #256	; 0x100
   1336c:	mov	r3, r5
   13370:	str	r0, [sp]
   13374:	mov	r0, #3
   13378:	bl	11580 <__fxstatat64@plt>
   1337c:	cmp	r0, #0
   13380:	beq	133e0 <__assert_fail@plt+0x1b90>
   13384:	bl	116d0 <__errno_location@plt>
   13388:	mov	r6, r0
   1338c:	ldr	r0, [r6]
   13390:	vmov.i32	q8, #0	; 0x00000000
   13394:	add	r1, r5, #80	; 0x50
   13398:	str	r0, [r4, #32]
   1339c:	mov	r0, #0
   133a0:	str	r0, [r5, #96]	; 0x60
   133a4:	vst1.64	{d16-d17}, [r1]
   133a8:	add	r1, r5, #64	; 0x40
   133ac:	vst1.64	{d16-d17}, [r1]
   133b0:	add	r1, r5, #48	; 0x30
   133b4:	vst1.64	{d16-d17}, [r1]
   133b8:	add	r1, r5, #32
   133bc:	vst1.64	{d16-d17}, [r1]
   133c0:	add	r1, r5, #16
   133c4:	vst1.64	{d16-d17}, [r1]
   133c8:	mov	r1, #100	; 0x64
   133cc:	vst1.64	{d16-d17}, [r5], r1
   133d0:	str	r0, [r5]
   133d4:	mov	r0, #10
   133d8:	sub	sp, fp, #16
   133dc:	pop	{r4, r5, r6, sl, fp, pc}
   133e0:	ldr	r0, [r4, #80]	; 0x50
   133e4:	and	r0, r0, #61440	; 0xf000
   133e8:	cmp	r0, #40960	; 0xa000
   133ec:	beq	13454 <__assert_fail@plt+0x1c04>
   133f0:	cmp	r0, #32768	; 0x8000
   133f4:	beq	13448 <__assert_fail@plt+0x1bf8>
   133f8:	cmp	r0, #16384	; 0x4000
   133fc:	bne	13460 <__assert_fail@plt+0x1c10>
   13400:	ldrb	r1, [r4, #168]	; 0xa8
   13404:	mov	r0, #1
   13408:	cmp	r1, #46	; 0x2e
   1340c:	bne	13464 <__assert_fail@plt+0x1c14>
   13410:	ldrb	r1, [r4, #169]	; 0xa9
   13414:	cmp	r1, #0
   13418:	beq	13430 <__assert_fail@plt+0x1be0>
   1341c:	cmp	r1, #46	; 0x2e
   13420:	bne	13464 <__assert_fail@plt+0x1c14>
   13424:	ldrb	r1, [r4, #170]	; 0xaa
   13428:	cmp	r1, #0
   1342c:	bne	13464 <__assert_fail@plt+0x1c14>
   13430:	ldr	r1, [r4, #48]	; 0x30
   13434:	mov	r0, #5
   13438:	cmp	r1, #0
   1343c:	movweq	r0, #1
   13440:	sub	sp, fp, #16
   13444:	pop	{r4, r5, r6, sl, fp, pc}
   13448:	mov	r0, #8
   1344c:	sub	sp, fp, #16
   13450:	pop	{r4, r5, r6, sl, fp, pc}
   13454:	mov	r0, #12
   13458:	sub	sp, fp, #16
   1345c:	pop	{r4, r5, r6, sl, fp, pc}
   13460:	mov	r0, #3
   13464:	sub	sp, fp, #16
   13468:	pop	{r4, r5, r6, sl, fp, pc}
   1346c:	push	{r4, r5, r6, r7, fp, lr}
   13470:	add	fp, sp, #16
   13474:	mov	r6, r0
   13478:	ldr	r7, [r0, #44]	; 0x2c
   1347c:	ldr	r0, [r0, #40]	; 0x28
   13480:	mov	r5, r2
   13484:	mov	r4, r1
   13488:	cmp	r0, r2
   1348c:	bcs	134c4 <__assert_fail@plt+0x1c74>
   13490:	add	r1, r5, #40	; 0x28
   13494:	cmn	r1, #-1073741823	; 0xc0000001
   13498:	str	r1, [r6, #40]	; 0x28
   1349c:	bhi	13568 <__assert_fail@plt+0x1d18>
   134a0:	ldr	r0, [r6, #8]
   134a4:	lsl	r1, r1, #2
   134a8:	bl	19bdc <__assert_fail@plt+0x838c>
   134ac:	cmp	r0, #0
   134b0:	beq	13568 <__assert_fail@plt+0x1d18>
   134b4:	str	r0, [r6, #8]
   134b8:	cmp	r4, #0
   134bc:	bne	134d0 <__assert_fail@plt+0x1c80>
   134c0:	b	134e4 <__assert_fail@plt+0x1c94>
   134c4:	ldr	r0, [r6, #8]
   134c8:	cmp	r4, #0
   134cc:	beq	134e4 <__assert_fail@plt+0x1c94>
   134d0:	str	r4, [r0], #4
   134d4:	ldr	r4, [r4, #8]
   134d8:	cmp	r4, #0
   134dc:	bne	134d0 <__assert_fail@plt+0x1c80>
   134e0:	ldr	r0, [r6, #8]
   134e4:	mov	r1, r5
   134e8:	mov	r2, #4
   134ec:	mov	r3, r7
   134f0:	bl	117c0 <qsort@plt>
   134f4:	ldr	r0, [r6, #8]
   134f8:	cmp	r5, #1
   134fc:	ldr	r4, [r0]
   13500:	mov	r1, r4
   13504:	beq	1358c <__assert_fail@plt+0x1d3c>
   13508:	mov	r2, r0
   1350c:	ldr	r1, [r2, #4]!
   13510:	str	r1, [r4, #8]
   13514:	subs	r1, r5, #2
   13518:	beq	13584 <__assert_fail@plt+0x1d34>
   1351c:	tst	r1, #1
   13520:	beq	13538 <__assert_fail@plt+0x1ce8>
   13524:	ldr	r1, [r0, #8]!
   13528:	ldr	r2, [r0, #-4]
   1352c:	str	r1, [r2, #8]
   13530:	sub	r1, r5, #3
   13534:	mov	r2, r0
   13538:	cmp	r5, #3
   1353c:	beq	13588 <__assert_fail@plt+0x1d38>
   13540:	mov	r0, r2
   13544:	ldm	r2, {r3, r7}
   13548:	subs	r1, r1, #2
   1354c:	str	r7, [r3, #8]
   13550:	ldr	r3, [r0, #8]!
   13554:	ldr	r2, [r2, #4]
   13558:	str	r3, [r2, #8]
   1355c:	mov	r2, r0
   13560:	bne	13544 <__assert_fail@plt+0x1cf4>
   13564:	b	13588 <__assert_fail@plt+0x1d38>
   13568:	ldr	r0, [r6, #8]
   1356c:	bl	1a1dc <__assert_fail@plt+0x898c>
   13570:	mov	r0, #0
   13574:	str	r0, [r6, #40]	; 0x28
   13578:	str	r0, [r6, #8]
   1357c:	mov	r0, r4
   13580:	pop	{r4, r5, r6, r7, fp, pc}
   13584:	mov	r0, r2
   13588:	ldr	r1, [r0]
   1358c:	mov	r0, #0
   13590:	str	r0, [r1, #8]
   13594:	mov	r0, r4
   13598:	pop	{r4, r5, r6, r7, fp, pc}
   1359c:	push	{r4, r5, r6, r7, fp, lr}
   135a0:	add	fp, sp, #16
   135a4:	mov	r4, r0
   135a8:	ldr	r0, [r0]
   135ac:	cmp	r0, #0
   135b0:	beq	135f0 <__assert_fail@plt+0x1da0>
   135b4:	ldr	r1, [r0, #48]	; 0x30
   135b8:	cmp	r1, #0
   135bc:	bmi	135e4 <__assert_fail@plt+0x1d94>
   135c0:	ldr	r5, [r0, #8]
   135c4:	cmp	r5, #0
   135c8:	ldreq	r5, [r0, #4]
   135cc:	bl	1a1dc <__assert_fail@plt+0x898c>
   135d0:	ldr	r0, [r5, #48]	; 0x30
   135d4:	cmn	r0, #1
   135d8:	mov	r0, r5
   135dc:	bgt	135c0 <__assert_fail@plt+0x1d70>
   135e0:	b	135e8 <__assert_fail@plt+0x1d98>
   135e4:	mov	r5, r0
   135e8:	mov	r0, r5
   135ec:	bl	1a1dc <__assert_fail@plt+0x898c>
   135f0:	ldr	r5, [r4, #4]
   135f4:	cmp	r5, #0
   135f8:	bne	13614 <__assert_fail@plt+0x1dc4>
   135fc:	b	1362c <__assert_fail@plt+0x1ddc>
   13600:	mov	r0, r5
   13604:	bl	1a1dc <__assert_fail@plt+0x898c>
   13608:	cmp	r6, #0
   1360c:	mov	r5, r6
   13610:	beq	1362c <__assert_fail@plt+0x1ddc>
   13614:	ldrd	r6, [r5, #8]
   13618:	cmp	r7, #0
   1361c:	beq	13600 <__assert_fail@plt+0x1db0>
   13620:	mov	r0, r7
   13624:	bl	11838 <closedir@plt>
   13628:	b	13600 <__assert_fail@plt+0x1db0>
   1362c:	ldr	r0, [r4, #8]
   13630:	bl	1a1dc <__assert_fail@plt+0x898c>
   13634:	ldr	r0, [r4, #24]
   13638:	bl	1a1dc <__assert_fail@plt+0x898c>
   1363c:	ldr	r0, [r4, #48]	; 0x30
   13640:	tst	r0, #512	; 0x200
   13644:	bne	13670 <__assert_fail@plt+0x1e20>
   13648:	mov	r6, #0
   1364c:	tst	r0, #4
   13650:	bne	136b4 <__assert_fail@plt+0x1e64>
   13654:	ldr	r0, [r4, #28]
   13658:	bl	117b4 <fchdir@plt>
   1365c:	cmp	r0, #0
   13660:	beq	13690 <__assert_fail@plt+0x1e40>
   13664:	bl	116d0 <__errno_location@plt>
   13668:	ldr	r6, [r0]
   1366c:	b	13694 <__assert_fail@plt+0x1e44>
   13670:	ldr	r0, [r4, #32]
   13674:	mov	r6, #0
   13678:	cmp	r0, #0
   1367c:	bmi	136b4 <__assert_fail@plt+0x1e64>
   13680:	bl	11820 <close@plt>
   13684:	cmp	r0, #0
   13688:	bne	136ac <__assert_fail@plt+0x1e5c>
   1368c:	b	136b4 <__assert_fail@plt+0x1e64>
   13690:	mov	r6, #0
   13694:	ldr	r0, [r4, #28]
   13698:	bl	11820 <close@plt>
   1369c:	cmp	r6, #0
   136a0:	bne	136b4 <__assert_fail@plt+0x1e64>
   136a4:	cmp	r0, #0
   136a8:	beq	136b4 <__assert_fail@plt+0x1e64>
   136ac:	bl	116d0 <__errno_location@plt>
   136b0:	ldr	r6, [r0]
   136b4:	add	r5, r4, #60	; 0x3c
   136b8:	mov	r0, r5
   136bc:	bl	164ec <__assert_fail@plt+0x4c9c>
   136c0:	cmp	r0, #0
   136c4:	bne	136e0 <__assert_fail@plt+0x1e90>
   136c8:	mov	r0, r5
   136cc:	bl	16540 <__assert_fail@plt+0x4cf0>
   136d0:	cmp	r0, #0
   136d4:	bmi	136b8 <__assert_fail@plt+0x1e68>
   136d8:	bl	11820 <close@plt>
   136dc:	b	136b8 <__assert_fail@plt+0x1e68>
   136e0:	ldr	r0, [r4, #52]	; 0x34
   136e4:	cmp	r0, #0
   136e8:	beq	136f0 <__assert_fail@plt+0x1ea0>
   136ec:	bl	15990 <__assert_fail@plt+0x4140>
   136f0:	ldrh	r0, [r4, #48]	; 0x30
   136f4:	movw	r1, #258	; 0x102
   136f8:	tst	r0, r1
   136fc:	beq	13714 <__assert_fail@plt+0x1ec4>
   13700:	ldr	r0, [r4, #56]	; 0x38
   13704:	cmp	r0, #0
   13708:	beq	1371c <__assert_fail@plt+0x1ecc>
   1370c:	bl	15990 <__assert_fail@plt+0x4140>
   13710:	b	1371c <__assert_fail@plt+0x1ecc>
   13714:	ldr	r0, [r4, #56]	; 0x38
   13718:	bl	1a1dc <__assert_fail@plt+0x898c>
   1371c:	mov	r0, r4
   13720:	bl	1a1dc <__assert_fail@plt+0x898c>
   13724:	cmp	r6, #0
   13728:	beq	1373c <__assert_fail@plt+0x1eec>
   1372c:	bl	116d0 <__errno_location@plt>
   13730:	str	r6, [r0]
   13734:	mvn	r0, #0
   13738:	pop	{r4, r5, r6, r7, fp, pc}
   1373c:	mov	r0, #0
   13740:	pop	{r4, r5, r6, r7, fp, pc}
   13744:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   13748:	add	fp, sp, #24
   1374c:	sub	sp, sp, #8
   13750:	ldr	r6, [r0]
   13754:	mov	r5, #0
   13758:	cmp	r6, #0
   1375c:	beq	13e9c <__assert_fail@plt+0x264c>
   13760:	mov	r4, r0
   13764:	ldr	r0, [r0, #48]	; 0x30
   13768:	tst	r0, #8192	; 0x2000
   1376c:	bne	13e9c <__assert_fail@plt+0x264c>
   13770:	ldrh	r1, [r6, #60]	; 0x3c
   13774:	mov	r2, #3
   13778:	strh	r2, [r6, #60]	; 0x3c
   1377c:	cmp	r1, #1
   13780:	beq	137f0 <__assert_fail@plt+0x1fa0>
   13784:	cmp	r1, #2
   13788:	bne	1380c <__assert_fail@plt+0x1fbc>
   1378c:	ldrh	r2, [r6, #56]	; 0x38
   13790:	bic	r3, r2, #1
   13794:	cmp	r3, #12
   13798:	bne	13810 <__assert_fail@plt+0x1fc0>
   1379c:	mov	r0, r4
   137a0:	mov	r1, r6
   137a4:	mov	r2, #1
   137a8:	bl	132d4 <__assert_fail@plt+0x1a84>
   137ac:	cmp	r0, #1
   137b0:	strh	r0, [r6, #56]	; 0x38
   137b4:	bne	13900 <__assert_fail@plt+0x20b0>
   137b8:	ldr	r0, [r4, #48]	; 0x30
   137bc:	tst	r0, #4
   137c0:	bne	13900 <__assert_fail@plt+0x20b0>
   137c4:	mov	r1, #32768	; 0x8000
   137c8:	tst	r0, #512	; 0x200
   137cc:	and	r1, r1, r0, lsl #11
   137d0:	orr	r1, r1, #18688	; 0x4900
   137d4:	orr	r2, r1, #524288	; 0x80000
   137d8:	bne	13ae4 <__assert_fail@plt+0x2294>
   137dc:	movw	r0, #47331	; 0xb8e3
   137e0:	mov	r1, r2
   137e4:	movt	r0, #1
   137e8:	bl	1a144 <__assert_fail@plt+0x88f4>
   137ec:	b	13af4 <__assert_fail@plt+0x22a4>
   137f0:	mov	r0, r4
   137f4:	mov	r1, r6
   137f8:	mov	r2, #0
   137fc:	bl	132d4 <__assert_fail@plt+0x1a84>
   13800:	strh	r0, [r6, #56]	; 0x38
   13804:	mov	r5, r6
   13808:	b	13e9c <__assert_fail@plt+0x264c>
   1380c:	ldrh	r2, [r6, #56]	; 0x38
   13810:	cmp	r2, #1
   13814:	bne	13870 <__assert_fail@plt+0x2020>
   13818:	cmp	r1, #4
   1381c:	bne	13908 <__assert_fail@plt+0x20b8>
   13820:	ldrb	r0, [r6, #58]	; 0x3a
   13824:	tst	r0, #2
   13828:	beq	13834 <__assert_fail@plt+0x1fe4>
   1382c:	ldr	r0, [r6, #36]	; 0x24
   13830:	bl	11820 <close@plt>
   13834:	ldr	r5, [r4, #4]
   13838:	cmp	r5, #0
   1383c:	bne	13858 <__assert_fail@plt+0x2008>
   13840:	b	139a0 <__assert_fail@plt+0x2150>
   13844:	mov	r0, r5
   13848:	bl	1a1dc <__assert_fail@plt+0x898c>
   1384c:	cmp	r8, #0
   13850:	mov	r5, r8
   13854:	beq	13998 <__assert_fail@plt+0x2148>
   13858:	ldrd	r8, [r5, #8]
   1385c:	cmp	r9, #0
   13860:	beq	13844 <__assert_fail@plt+0x1ff4>
   13864:	mov	r0, r9
   13868:	bl	11838 <closedir@plt>
   1386c:	b	13844 <__assert_fail@plt+0x1ff4>
   13870:	ldr	r5, [r6, #8]
   13874:	cmp	r5, #0
   13878:	beq	139bc <__assert_fail@plt+0x216c>
   1387c:	mov	r0, r6
   13880:	str	r5, [r4]
   13884:	bl	1a1dc <__assert_fail@plt+0x898c>
   13888:	ldr	r0, [r5, #48]	; 0x30
   1388c:	cmp	r0, #0
   13890:	beq	13a08 <__assert_fail@plt+0x21b8>
   13894:	ldrh	r0, [r5, #60]	; 0x3c
   13898:	mov	r6, r5
   1389c:	cmp	r0, #4
   138a0:	beq	13870 <__assert_fail@plt+0x2020>
   138a4:	cmp	r0, #2
   138a8:	bne	13d64 <__assert_fail@plt+0x2514>
   138ac:	mov	r0, r4
   138b0:	mov	r1, r5
   138b4:	mov	r2, #1
   138b8:	bl	132d4 <__assert_fail@plt+0x1a84>
   138bc:	cmp	r0, #1
   138c0:	strh	r0, [r5, #56]	; 0x38
   138c4:	bne	13d5c <__assert_fail@plt+0x250c>
   138c8:	ldr	r0, [r4, #48]	; 0x30
   138cc:	tst	r0, #4
   138d0:	bne	13d5c <__assert_fail@plt+0x250c>
   138d4:	mov	r1, #32768	; 0x8000
   138d8:	tst	r0, #512	; 0x200
   138dc:	and	r1, r1, r0, lsl #11
   138e0:	orr	r1, r1, #18688	; 0x4900
   138e4:	orr	r2, r1, #524288	; 0x80000
   138e8:	bne	13d1c <__assert_fail@plt+0x24cc>
   138ec:	movw	r0, #47331	; 0xb8e3
   138f0:	mov	r1, r2
   138f4:	movt	r0, #1
   138f8:	bl	1a144 <__assert_fail@plt+0x88f4>
   138fc:	b	13d2c <__assert_fail@plt+0x24dc>
   13900:	mov	r5, r6
   13904:	b	13da0 <__assert_fail@plt+0x2550>
   13908:	tst	r0, #64	; 0x40
   1390c:	beq	13928 <__assert_fail@plt+0x20d8>
   13910:	ldrd	r2, [r4, #16]
   13914:	ldrd	r8, [r6, #64]	; 0x40
   13918:	eor	r1, r9, r3
   1391c:	eor	r2, r8, r2
   13920:	orrs	r1, r2, r1
   13924:	bne	13820 <__assert_fail@plt+0x1fd0>
   13928:	ldr	r5, [r4, #4]
   1392c:	cmp	r5, #0
   13930:	beq	13a8c <__assert_fail@plt+0x223c>
   13934:	tst	r0, #4096	; 0x1000
   13938:	bne	13a4c <__assert_fail@plt+0x21fc>
   1393c:	ldr	r3, [r6, #24]
   13940:	mov	r0, r4
   13944:	mov	r1, r6
   13948:	mvn	r2, #0
   1394c:	bl	13f88 <__assert_fail@plt+0x2738>
   13950:	cmp	r0, #0
   13954:	beq	13aa4 <__assert_fail@plt+0x2254>
   13958:	bl	116d0 <__errno_location@plt>
   1395c:	ldr	r0, [r0]
   13960:	str	r0, [r6, #32]
   13964:	ldrh	r0, [r6, #58]	; 0x3a
   13968:	orr	r0, r0, #1
   1396c:	strh	r0, [r6, #58]	; 0x3a
   13970:	ldr	r0, [r4, #4]
   13974:	cmp	r0, #0
   13978:	beq	13aa4 <__assert_fail@plt+0x2254>
   1397c:	ldmib	r0, {r1, r2}
   13980:	cmp	r2, #0
   13984:	ldr	r1, [r1, #24]
   13988:	str	r1, [r0, #24]
   1398c:	mov	r0, r2
   13990:	bne	1397c <__assert_fail@plt+0x212c>
   13994:	b	13aa4 <__assert_fail@plt+0x2254>
   13998:	mov	r0, #0
   1399c:	str	r0, [r4, #4]
   139a0:	mov	r0, #6
   139a4:	strh	r0, [r6, #56]	; 0x38
   139a8:	mov	r0, r4
   139ac:	mov	r1, r6
   139b0:	bl	13eac <__assert_fail@plt+0x265c>
   139b4:	mov	r5, r6
   139b8:	b	13e9c <__assert_fail@plt+0x264c>
   139bc:	ldr	r5, [r6, #4]
   139c0:	ldr	r0, [r5, #12]
   139c4:	cmp	r0, #0
   139c8:	beq	13b24 <__assert_fail@plt+0x22d4>
   139cc:	str	r5, [r4]
   139d0:	ldr	r1, [r5, #40]	; 0x28
   139d4:	ldr	r0, [r4, #24]
   139d8:	mov	r5, #0
   139dc:	strb	r5, [r0, r1]
   139e0:	mov	r0, r4
   139e4:	mov	r1, #3
   139e8:	bl	141e8 <__assert_fail@plt+0x2998>
   139ec:	cmp	r0, #0
   139f0:	beq	13b14 <__assert_fail@plt+0x22c4>
   139f4:	mov	r7, r0
   139f8:	mov	r0, r6
   139fc:	bl	1a1dc <__assert_fail@plt+0x898c>
   13a00:	mov	r5, r7
   13a04:	b	13d64 <__assert_fail@plt+0x2514>
   13a08:	mov	r0, r4
   13a0c:	bl	14c78 <__assert_fail@plt+0x3428>
   13a10:	ldr	r1, [r4, #48]	; 0x30
   13a14:	cmp	r0, #0
   13a18:	beq	13a2c <__assert_fail@plt+0x21dc>
   13a1c:	orr	r0, r1, #8192	; 0x2000
   13a20:	mov	r5, #0
   13a24:	str	r0, [r4, #48]	; 0x30
   13a28:	b	13e9c <__assert_fail@plt+0x264c>
   13a2c:	movw	r0, #258	; 0x102
   13a30:	tst	r1, r0
   13a34:	beq	13bd4 <__assert_fail@plt+0x2384>
   13a38:	ldr	r0, [r4, #56]	; 0x38
   13a3c:	cmp	r0, #0
   13a40:	beq	13bdc <__assert_fail@plt+0x238c>
   13a44:	bl	15990 <__assert_fail@plt+0x4140>
   13a48:	b	13bdc <__assert_fail@plt+0x238c>
   13a4c:	bic	r0, r0, #4096	; 0x1000
   13a50:	str	r0, [r4, #48]	; 0x30
   13a54:	b	13a6c <__assert_fail@plt+0x221c>
   13a58:	mov	r0, r5
   13a5c:	bl	1a1dc <__assert_fail@plt+0x898c>
   13a60:	cmp	r8, #0
   13a64:	mov	r5, r8
   13a68:	beq	13a84 <__assert_fail@plt+0x2234>
   13a6c:	ldrd	r8, [r5, #8]
   13a70:	cmp	r9, #0
   13a74:	beq	13a58 <__assert_fail@plt+0x2208>
   13a78:	mov	r0, r9
   13a7c:	bl	11838 <closedir@plt>
   13a80:	b	13a58 <__assert_fail@plt+0x2208>
   13a84:	mov	r0, #0
   13a88:	str	r0, [r4, #4]
   13a8c:	mov	r0, r4
   13a90:	mov	r1, #3
   13a94:	bl	141e8 <__assert_fail@plt+0x2998>
   13a98:	cmp	r0, #0
   13a9c:	str	r0, [r4, #4]
   13aa0:	beq	13ab4 <__assert_fail@plt+0x2264>
   13aa4:	ldr	r5, [r4, #4]
   13aa8:	mov	r0, #0
   13aac:	str	r0, [r4, #4]
   13ab0:	b	13d64 <__assert_fail@plt+0x2514>
   13ab4:	ldrb	r0, [r4, #49]	; 0x31
   13ab8:	mov	r5, #0
   13abc:	tst	r0, #32
   13ac0:	bne	13e9c <__assert_fail@plt+0x264c>
   13ac4:	ldr	r0, [r6, #32]
   13ac8:	cmp	r0, #0
   13acc:	beq	139a8 <__assert_fail@plt+0x2158>
   13ad0:	ldrh	r0, [r6, #56]	; 0x38
   13ad4:	cmp	r0, #4
   13ad8:	beq	139a8 <__assert_fail@plt+0x2158>
   13adc:	mov	r0, #7
   13ae0:	b	139a4 <__assert_fail@plt+0x2154>
   13ae4:	ldr	r0, [r4, #32]
   13ae8:	movw	r1, #47331	; 0xb8e3
   13aec:	movt	r1, #1
   13af0:	bl	16590 <__assert_fail@plt+0x4d40>
   13af4:	cmn	r0, #1
   13af8:	str	r0, [r6, #36]	; 0x24
   13afc:	ble	13bb8 <__assert_fail@plt+0x2368>
   13b00:	ldrh	r0, [r6, #58]	; 0x3a
   13b04:	mov	r5, r6
   13b08:	orr	r0, r0, #2
   13b0c:	strh	r0, [r6, #58]	; 0x3a
   13b10:	b	13da0 <__assert_fail@plt+0x2550>
   13b14:	ldrb	r0, [r4, #49]	; 0x31
   13b18:	tst	r0, #32
   13b1c:	bne	13e9c <__assert_fail@plt+0x264c>
   13b20:	ldr	r5, [r6, #4]
   13b24:	mov	r0, r6
   13b28:	str	r5, [r4]
   13b2c:	bl	1a1dc <__assert_fail@plt+0x898c>
   13b30:	ldr	r0, [r5, #48]	; 0x30
   13b34:	cmn	r0, #1
   13b38:	beq	13b9c <__assert_fail@plt+0x234c>
   13b3c:	ldrh	r0, [r5, #56]	; 0x38
   13b40:	cmp	r0, #11
   13b44:	beq	13ea8 <__assert_fail@plt+0x2658>
   13b48:	ldr	r0, [r5, #40]	; 0x28
   13b4c:	ldr	r1, [r4, #24]
   13b50:	mov	r2, #0
   13b54:	strb	r2, [r1, r0]
   13b58:	ldr	r0, [r5, #48]	; 0x30
   13b5c:	cmp	r0, #0
   13b60:	beq	13cac <__assert_fail@plt+0x245c>
   13b64:	ldrh	r0, [r5, #58]	; 0x3a
   13b68:	tst	r0, #2
   13b6c:	bne	13cd8 <__assert_fail@plt+0x2488>
   13b70:	tst	r0, #1
   13b74:	bne	13e60 <__assert_fail@plt+0x2610>
   13b78:	ldr	r1, [r5, #4]
   13b7c:	movw	r3, #47330	; 0xb8e2
   13b80:	mov	r0, r4
   13b84:	mvn	r2, #0
   13b88:	movt	r3, #1
   13b8c:	bl	13f88 <__assert_fail@plt+0x2738>
   13b90:	cmp	r0, #0
   13b94:	bne	13cbc <__assert_fail@plt+0x246c>
   13b98:	b	13e60 <__assert_fail@plt+0x2610>
   13b9c:	mov	r0, r5
   13ba0:	bl	1a1dc <__assert_fail@plt+0x898c>
   13ba4:	bl	116d0 <__errno_location@plt>
   13ba8:	mov	r5, #0
   13bac:	str	r5, [r0]
   13bb0:	str	r5, [r4]
   13bb4:	b	13e9c <__assert_fail@plt+0x264c>
   13bb8:	bl	116d0 <__errno_location@plt>
   13bbc:	ldr	r0, [r0]
   13bc0:	mov	r1, #7
   13bc4:	mov	r5, r6
   13bc8:	strh	r1, [r6, #56]	; 0x38
   13bcc:	str	r0, [r6, #32]
   13bd0:	b	13da0 <__assert_fail@plt+0x2550>
   13bd4:	ldr	r0, [r4, #56]	; 0x38
   13bd8:	bl	1a1dc <__assert_fail@plt+0x898c>
   13bdc:	ldr	r1, [r5, #52]	; 0x34
   13be0:	add	r6, r5, #168	; 0xa8
   13be4:	str	r1, [r5, #40]	; 0x28
   13be8:	add	r2, r1, #1
   13bec:	mov	r1, r6
   13bf0:	ldr	r0, [r4, #24]
   13bf4:	bl	114e4 <memmove@plt>
   13bf8:	mov	r0, r6
   13bfc:	mov	r1, #47	; 0x2f
   13c00:	bl	11778 <strrchr@plt>
   13c04:	cmp	r0, #0
   13c08:	beq	13c44 <__assert_fail@plt+0x23f4>
   13c0c:	cmp	r0, r6
   13c10:	bne	13c20 <__assert_fail@plt+0x23d0>
   13c14:	ldrb	r1, [r5, #169]	; 0xa9
   13c18:	cmp	r1, #0
   13c1c:	beq	13c44 <__assert_fail@plt+0x23f4>
   13c20:	add	r7, r0, #1
   13c24:	mov	r0, r7
   13c28:	bl	116ac <strlen@plt>
   13c2c:	mov	r8, r0
   13c30:	add	r2, r0, #1
   13c34:	mov	r0, r6
   13c38:	mov	r1, r7
   13c3c:	bl	114e4 <memmove@plt>
   13c40:	str	r8, [r5, #52]	; 0x34
   13c44:	ldr	r0, [r4, #24]
   13c48:	movw	r1, #258	; 0x102
   13c4c:	str	r0, [r5, #24]
   13c50:	str	r0, [r5, #28]
   13c54:	ldrh	r0, [r4, #48]	; 0x30
   13c58:	tst	r0, r1
   13c5c:	beq	13c90 <__assert_fail@plt+0x2440>
   13c60:	movw	r0, #41436	; 0xa1dc
   13c64:	movw	r2, #20448	; 0x4fe0
   13c68:	movw	r3, #20480	; 0x5000
   13c6c:	mov	r1, #0
   13c70:	movt	r0, #1
   13c74:	movt	r2, #1
   13c78:	movt	r3, #1
   13c7c:	str	r0, [sp]
   13c80:	mov	r0, #31
   13c84:	bl	1568c <__assert_fail@plt+0x3e3c>
   13c88:	str	r0, [r4, #56]	; 0x38
   13c8c:	b	13da0 <__assert_fail@plt+0x2550>
   13c90:	mov	r0, #32
   13c94:	bl	19bac <__assert_fail@plt+0x835c>
   13c98:	cmp	r0, #0
   13c9c:	str	r0, [r4, #56]	; 0x38
   13ca0:	beq	13da0 <__assert_fail@plt+0x2550>
   13ca4:	bl	19dd8 <__assert_fail@plt+0x8588>
   13ca8:	b	13da0 <__assert_fail@plt+0x2550>
   13cac:	mov	r0, r4
   13cb0:	bl	14c78 <__assert_fail@plt+0x3428>
   13cb4:	cmp	r0, #0
   13cb8:	beq	13e60 <__assert_fail@plt+0x2610>
   13cbc:	bl	116d0 <__errno_location@plt>
   13cc0:	ldr	r0, [r0]
   13cc4:	str	r0, [r5, #32]
   13cc8:	ldr	r0, [r4, #48]	; 0x30
   13ccc:	orr	r0, r0, #8192	; 0x2000
   13cd0:	str	r0, [r4, #48]	; 0x30
   13cd4:	b	13e60 <__assert_fail@plt+0x2610>
   13cd8:	ldr	r0, [r4, #48]	; 0x30
   13cdc:	tst	r0, #4
   13ce0:	bne	13e58 <__assert_fail@plt+0x2608>
   13ce4:	ldr	r6, [r5, #36]	; 0x24
   13ce8:	tst	r0, #512	; 0x200
   13cec:	bne	13e2c <__assert_fail@plt+0x25dc>
   13cf0:	mov	r0, r6
   13cf4:	bl	117b4 <fchdir@plt>
   13cf8:	cmp	r0, #0
   13cfc:	beq	13e58 <__assert_fail@plt+0x2608>
   13d00:	bl	116d0 <__errno_location@plt>
   13d04:	ldr	r0, [r0]
   13d08:	str	r0, [r5, #32]
   13d0c:	ldr	r0, [r4, #48]	; 0x30
   13d10:	orr	r0, r0, #8192	; 0x2000
   13d14:	str	r0, [r4, #48]	; 0x30
   13d18:	b	13e58 <__assert_fail@plt+0x2608>
   13d1c:	ldr	r0, [r4, #32]
   13d20:	movw	r1, #47331	; 0xb8e3
   13d24:	movt	r1, #1
   13d28:	bl	16590 <__assert_fail@plt+0x4d40>
   13d2c:	cmn	r0, #1
   13d30:	str	r0, [r5, #36]	; 0x24
   13d34:	ble	13d48 <__assert_fail@plt+0x24f8>
   13d38:	ldrh	r0, [r5, #58]	; 0x3a
   13d3c:	orr	r0, r0, #2
   13d40:	strh	r0, [r5, #58]	; 0x3a
   13d44:	b	13d5c <__assert_fail@plt+0x250c>
   13d48:	bl	116d0 <__errno_location@plt>
   13d4c:	ldr	r0, [r0]
   13d50:	mov	r1, #7
   13d54:	strh	r1, [r5, #56]	; 0x38
   13d58:	str	r0, [r5, #32]
   13d5c:	mov	r0, #3
   13d60:	strh	r0, [r5, #60]	; 0x3c
   13d64:	ldr	r0, [r5, #4]
   13d68:	ldr	r1, [r0, #28]
   13d6c:	ldr	r0, [r0, #40]	; 0x28
   13d70:	sub	r2, r0, #1
   13d74:	ldrb	r1, [r1, r2]
   13d78:	cmp	r1, #47	; 0x2f
   13d7c:	ldr	r1, [r4, #24]
   13d80:	moveq	r0, r2
   13d84:	mov	r2, #47	; 0x2f
   13d88:	strb	r2, [r1, r0]!
   13d8c:	ldr	r2, [r5, #52]	; 0x34
   13d90:	add	r0, r1, #1
   13d94:	add	r1, r5, #168	; 0xa8
   13d98:	add	r2, r2, #1
   13d9c:	bl	114e4 <memmove@plt>
   13da0:	str	r5, [r4]
   13da4:	ldrh	r0, [r5, #56]	; 0x38
   13da8:	cmp	r0, #11
   13dac:	bne	13de4 <__assert_fail@plt+0x2594>
   13db0:	add	r0, r5, #112	; 0x70
   13db4:	ldrd	r0, [r0]
   13db8:	eor	r2, r0, #1
   13dbc:	orrs	r2, r2, r1
   13dc0:	beq	13e9c <__assert_fail@plt+0x264c>
   13dc4:	eor	r0, r0, #2
   13dc8:	orrs	r0, r0, r1
   13dcc:	bne	13ea8 <__assert_fail@plt+0x2658>
   13dd0:	mov	r0, r4
   13dd4:	mov	r1, r5
   13dd8:	mov	r2, #0
   13ddc:	bl	132d4 <__assert_fail@plt+0x1a84>
   13de0:	strh	r0, [r5, #56]	; 0x38
   13de4:	cmp	r0, #1
   13de8:	bne	13e9c <__assert_fail@plt+0x264c>
   13dec:	ldr	r0, [r5, #48]	; 0x30
   13df0:	cmp	r0, #0
   13df4:	bne	13e04 <__assert_fail@plt+0x25b4>
   13df8:	add	r0, r5, #64	; 0x40
   13dfc:	ldrd	r0, [r0]
   13e00:	strd	r0, [r4, #16]
   13e04:	mov	r0, r4
   13e08:	mov	r1, r5
   13e0c:	bl	14d08 <__assert_fail@plt+0x34b8>
   13e10:	cmp	r0, #0
   13e14:	bne	13e9c <__assert_fail@plt+0x264c>
   13e18:	bl	116d0 <__errno_location@plt>
   13e1c:	mov	r1, #12
   13e20:	mov	r5, #0
   13e24:	str	r1, [r0]
   13e28:	b	13e9c <__assert_fail@plt+0x264c>
   13e2c:	ldr	r1, [r4, #32]
   13e30:	cmp	r1, r6
   13e34:	bne	13e40 <__assert_fail@plt+0x25f0>
   13e38:	cmn	r1, #100	; 0x64
   13e3c:	bne	13ea8 <__assert_fail@plt+0x2658>
   13e40:	add	r0, r4, #60	; 0x3c
   13e44:	bl	164f4 <__assert_fail@plt+0x4ca4>
   13e48:	cmp	r0, #0
   13e4c:	bmi	13e54 <__assert_fail@plt+0x2604>
   13e50:	bl	11820 <close@plt>
   13e54:	str	r6, [r4, #32]
   13e58:	ldr	r0, [r5, #36]	; 0x24
   13e5c:	bl	11820 <close@plt>
   13e60:	ldrh	r0, [r5, #56]	; 0x38
   13e64:	cmp	r0, #2
   13e68:	beq	13e90 <__assert_fail@plt+0x2640>
   13e6c:	ldr	r0, [r5, #32]
   13e70:	mov	r1, #7
   13e74:	cmp	r0, #0
   13e78:	movweq	r1, #6
   13e7c:	strh	r1, [r5, #56]	; 0x38
   13e80:	bne	13e90 <__assert_fail@plt+0x2640>
   13e84:	mov	r0, r4
   13e88:	mov	r1, r5
   13e8c:	bl	13eac <__assert_fail@plt+0x265c>
   13e90:	ldrb	r0, [r4, #49]	; 0x31
   13e94:	tst	r0, #32
   13e98:	movne	r5, #0
   13e9c:	mov	r0, r5
   13ea0:	sub	sp, fp, #24
   13ea4:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   13ea8:	bl	11814 <abort@plt>
   13eac:	push	{r4, r5, r7, sl, fp, lr}
   13eb0:	add	fp, sp, #16
   13eb4:	sub	sp, sp, #24
   13eb8:	ldrh	r2, [r0, #48]	; 0x30
   13ebc:	movw	r3, #258	; 0x102
   13ec0:	add	lr, r1, #64	; 0x40
   13ec4:	add	r4, r1, #160	; 0xa0
   13ec8:	tst	r2, r3
   13ecc:	beq	13f04 <__assert_fail@plt+0x26b4>
   13ed0:	ldrd	r2, [lr]
   13ed4:	mov	r1, sp
   13ed8:	stm	sp, {r2, r3}
   13edc:	ldrd	r2, [r4]
   13ee0:	str	r3, [sp, #12]
   13ee4:	str	r2, [sp, #8]
   13ee8:	ldr	r0, [r0, #56]	; 0x38
   13eec:	bl	16220 <__assert_fail@plt+0x49d0>
   13ef0:	cmp	r0, #0
   13ef4:	beq	13f84 <__assert_fail@plt+0x2734>
   13ef8:	bl	1a1dc <__assert_fail@plt+0x898c>
   13efc:	sub	sp, fp, #16
   13f00:	pop	{r4, r5, r7, sl, fp, pc}
   13f04:	ldr	r1, [r1, #4]
   13f08:	cmp	r1, #0
   13f0c:	beq	13f7c <__assert_fail@plt+0x272c>
   13f10:	ldr	r2, [r1, #48]	; 0x30
   13f14:	cmp	r2, #0
   13f18:	bmi	13f7c <__assert_fail@plt+0x272c>
   13f1c:	ldr	ip, [r0, #56]	; 0x38
   13f20:	ldrd	r2, [ip, #16]
   13f24:	orrs	r2, r2, r3
   13f28:	beq	13f84 <__assert_fail@plt+0x2734>
   13f2c:	ldrd	r2, [r4]
   13f30:	ldrd	r4, [ip]
   13f34:	eor	r3, r5, r3
   13f38:	eor	r2, r4, r2
   13f3c:	orrs	r2, r2, r3
   13f40:	bne	13f7c <__assert_fail@plt+0x272c>
   13f44:	add	r3, ip, #8
   13f48:	ldm	lr, {r2, r5}
   13f4c:	ldm	r3, {r4, r7}
   13f50:	eor	r7, r7, r5
   13f54:	eor	r2, r4, r2
   13f58:	orrs	r2, r2, r7
   13f5c:	bne	13f7c <__assert_fail@plt+0x272c>
   13f60:	add	r2, r1, #64	; 0x40
   13f64:	add	r1, r1, #160	; 0xa0
   13f68:	ldm	r2, {r2, r5}
   13f6c:	stm	r3, {r2, r5}
   13f70:	ldr	r0, [r0, #56]	; 0x38
   13f74:	ldrd	r2, [r1]
   13f78:	strd	r2, [r0]
   13f7c:	sub	sp, fp, #16
   13f80:	pop	{r4, r5, r7, sl, fp, pc}
   13f84:	bl	11814 <abort@plt>
   13f88:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13f8c:	add	fp, sp, #28
   13f90:	sub	sp, sp, #108	; 0x6c
   13f94:	mov	r7, r3
   13f98:	mov	r4, r2
   13f9c:	mov	r8, r1
   13fa0:	mov	sl, r0
   13fa4:	cmp	r3, #0
   13fa8:	beq	13fcc <__assert_fail@plt+0x277c>
   13fac:	movw	r1, #47330	; 0xb8e2
   13fb0:	mov	r0, r7
   13fb4:	movt	r1, #1
   13fb8:	bl	114c0 <strcmp@plt>
   13fbc:	cmp	r0, #0
   13fc0:	mov	r6, r0
   13fc4:	movwne	r6, #1
   13fc8:	b	13fd0 <__assert_fail@plt+0x2780>
   13fcc:	mov	r6, #1
   13fd0:	ldr	r0, [sl, #48]	; 0x30
   13fd4:	tst	r0, #4
   13fd8:	bne	14030 <__assert_fail@plt+0x27e0>
   13fdc:	cmn	r4, #1
   13fe0:	mov	r1, #0
   13fe4:	mov	r9, #0
   13fe8:	movwgt	r1, #1
   13fec:	orrs	r1, r1, r6
   13ff0:	bne	14050 <__assert_fail@plt+0x2800>
   13ff4:	ands	r0, r0, #512	; 0x200
   13ff8:	beq	14050 <__assert_fail@plt+0x2800>
   13ffc:	add	r4, sl, #60	; 0x3c
   14000:	mov	r0, r4
   14004:	bl	164ec <__assert_fail@plt+0x4c9c>
   14008:	cmp	r0, #0
   1400c:	bne	14058 <__assert_fail@plt+0x2808>
   14010:	mov	r0, r4
   14014:	bl	16540 <__assert_fail@plt+0x4cf0>
   14018:	cmn	r0, #1
   1401c:	ble	14058 <__assert_fail@plt+0x2808>
   14020:	mov	r4, r0
   14024:	mov	r9, #0
   14028:	mov	r7, #0
   1402c:	b	140a0 <__assert_fail@plt+0x2850>
   14030:	mov	r5, #0
   14034:	cmp	r4, #0
   14038:	bmi	141d8 <__assert_fail@plt+0x2988>
   1403c:	ands	r0, r0, #512	; 0x200
   14040:	beq	141d8 <__assert_fail@plt+0x2988>
   14044:	mov	r0, r4
   14048:	bl	11820 <close@plt>
   1404c:	b	141d8 <__assert_fail@plt+0x2988>
   14050:	cmn	r4, #1
   14054:	bgt	140a0 <__assert_fail@plt+0x2850>
   14058:	ldr	r0, [sl, #48]	; 0x30
   1405c:	mov	r1, #32768	; 0x8000
   14060:	and	r1, r1, r0, lsl #11
   14064:	tst	r0, #512	; 0x200
   14068:	orr	r1, r1, #18688	; 0x4900
   1406c:	orr	r2, r1, #524288	; 0x80000
   14070:	bne	14084 <__assert_fail@plt+0x2834>
   14074:	mov	r0, r7
   14078:	mov	r1, r2
   1407c:	bl	1a144 <__assert_fail@plt+0x88f4>
   14080:	b	14090 <__assert_fail@plt+0x2840>
   14084:	ldr	r0, [sl, #32]
   14088:	mov	r1, r7
   1408c:	bl	16590 <__assert_fail@plt+0x4d40>
   14090:	mov	r4, r0
   14094:	mov	r9, #1
   14098:	cmp	r0, #0
   1409c:	bmi	1417c <__assert_fail@plt+0x292c>
   140a0:	ldr	r5, [sl, #48]	; 0x30
   140a4:	tst	r5, #2
   140a8:	bne	140ec <__assert_fail@plt+0x289c>
   140ac:	cmp	r7, #0
   140b0:	beq	140cc <__assert_fail@plt+0x287c>
   140b4:	movw	r1, #47330	; 0xb8e2
   140b8:	mov	r0, r7
   140bc:	movt	r1, #1
   140c0:	bl	114c0 <strcmp@plt>
   140c4:	cmp	r0, #0
   140c8:	beq	140ec <__assert_fail@plt+0x289c>
   140cc:	tst	r5, #512	; 0x200
   140d0:	bne	1414c <__assert_fail@plt+0x28fc>
   140d4:	mov	r0, r4
   140d8:	bl	117b4 <fchdir@plt>
   140dc:	mov	r5, r0
   140e0:	cmp	r9, #0
   140e4:	bne	1419c <__assert_fail@plt+0x294c>
   140e8:	b	141d8 <__assert_fail@plt+0x2988>
   140ec:	mov	r2, sp
   140f0:	mov	r0, #3
   140f4:	mov	r1, r4
   140f8:	bl	11598 <__fxstat64@plt>
   140fc:	cmp	r0, #0
   14100:	bne	14190 <__assert_fail@plt+0x2940>
   14104:	add	r0, r8, #64	; 0x40
   14108:	ldm	sp, {r2, r3}
   1410c:	ldrd	r0, [r0]
   14110:	eor	r1, r1, r3
   14114:	eor	r0, r0, r2
   14118:	orrs	r0, r0, r1
   1411c:	bne	14184 <__assert_fail@plt+0x2934>
   14120:	add	r0, r8, #160	; 0xa0
   14124:	ldr	r2, [sp, #96]	; 0x60
   14128:	ldr	r3, [sp, #100]	; 0x64
   1412c:	ldrd	r0, [r0]
   14130:	eor	r1, r1, r3
   14134:	eor	r0, r0, r2
   14138:	orrs	r0, r0, r1
   1413c:	bne	14184 <__assert_fail@plt+0x2934>
   14140:	ldr	r5, [sl, #48]	; 0x30
   14144:	tst	r5, #512	; 0x200
   14148:	beq	140d4 <__assert_fail@plt+0x2884>
   1414c:	ldr	r1, [sl, #32]
   14150:	cmp	r1, r4
   14154:	bne	14160 <__assert_fail@plt+0x2910>
   14158:	cmn	r1, #100	; 0x64
   1415c:	bne	141e4 <__assert_fail@plt+0x2994>
   14160:	cmp	r6, #0
   14164:	beq	141b8 <__assert_fail@plt+0x2968>
   14168:	add	r0, sl, #60	; 0x3c
   1416c:	bl	164f4 <__assert_fail@plt+0x4ca4>
   14170:	cmp	r0, #0
   14174:	bpl	141cc <__assert_fail@plt+0x297c>
   14178:	b	141d0 <__assert_fail@plt+0x2980>
   1417c:	mvn	r5, #0
   14180:	b	141d8 <__assert_fail@plt+0x2988>
   14184:	bl	116d0 <__errno_location@plt>
   14188:	mov	r1, #2
   1418c:	str	r1, [r0]
   14190:	mvn	r5, #0
   14194:	cmp	r9, #0
   14198:	beq	141d8 <__assert_fail@plt+0x2988>
   1419c:	bl	116d0 <__errno_location@plt>
   141a0:	ldr	r7, [r0]
   141a4:	mov	r6, r0
   141a8:	mov	r0, r4
   141ac:	bl	11820 <close@plt>
   141b0:	str	r7, [r6]
   141b4:	b	141d8 <__assert_fail@plt+0x2988>
   141b8:	tst	r5, #4
   141bc:	bne	141d0 <__assert_fail@plt+0x2980>
   141c0:	cmp	r1, #0
   141c4:	bmi	141d0 <__assert_fail@plt+0x2980>
   141c8:	mov	r0, r1
   141cc:	bl	11820 <close@plt>
   141d0:	str	r4, [sl, #32]
   141d4:	mov	r5, #0
   141d8:	mov	r0, r5
   141dc:	sub	sp, fp, #28
   141e0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   141e4:	bl	11814 <abort@plt>
   141e8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   141ec:	add	fp, sp, #28
   141f0:	sub	sp, sp, #68	; 0x44
   141f4:	ldr	sl, [r0]
   141f8:	mov	r7, r1
   141fc:	mov	r5, r0
   14200:	str	r0, [sp, #48]	; 0x30
   14204:	ldr	r4, [sl, #12]
   14208:	cmp	r4, #0
   1420c:	beq	14254 <__assert_fail@plt+0x2a04>
   14210:	mov	r0, r4
   14214:	bl	117a8 <dirfd@plt>
   14218:	cmn	r0, #1
   1421c:	str	r0, [fp, #-32]	; 0xffffffe0
   14220:	ble	14288 <__assert_fail@plt+0x2a38>
   14224:	mov	r1, r5
   14228:	str	r4, [sp, #12]
   1422c:	str	r7, [sp, #4]
   14230:	mov	ip, #0
   14234:	ldr	r0, [r1, #44]!	; 0x2c
   14238:	str	r1, [sp, #20]
   1423c:	mvn	r1, #0
   14240:	cmp	r0, #0
   14244:	movweq	r1, #34464	; 0x86a0
   14248:	movteq	r1, #1
   1424c:	str	r1, [sp, #32]
   14250:	b	144d8 <__assert_fail@plt+0x2c88>
   14254:	ldr	r3, [r5, #48]	; 0x30
   14258:	mvn	r0, #99	; 0x63
   1425c:	mov	r2, #0
   14260:	and	r1, r3, #516	; 0x204
   14264:	cmp	r1, #512	; 0x200
   14268:	ldr	r1, [sl, #24]
   1426c:	ldreq	r0, [r5, #32]
   14270:	tst	r3, #16
   14274:	beq	142b0 <__assert_fail@plt+0x2a60>
   14278:	tst	r3, #1
   1427c:	bne	142a4 <__assert_fail@plt+0x2a54>
   14280:	mov	r2, #32768	; 0x8000
   14284:	b	142b0 <__assert_fail@plt+0x2a60>
   14288:	ldr	r0, [sl, #12]
   1428c:	bl	11838 <closedir@plt>
   14290:	mov	r6, #0
   14294:	str	r6, [sl, #12]
   14298:	cmp	r7, #3
   1429c:	beq	142f4 <__assert_fail@plt+0x2aa4>
   142a0:	b	14c6c <__assert_fail@plt+0x341c>
   142a4:	ldr	r3, [sl, #48]	; 0x30
   142a8:	cmp	r3, #0
   142ac:	movne	r2, #32768	; 0x8000
   142b0:	sub	r3, fp, #32
   142b4:	bl	165c8 <__assert_fail@plt+0x4d78>
   142b8:	cmp	r0, #0
   142bc:	str	r0, [sl, #12]
   142c0:	beq	142e8 <__assert_fail@plt+0x2a98>
   142c4:	ldrh	r0, [sl, #56]	; 0x38
   142c8:	cmp	r0, #11
   142cc:	bne	1430c <__assert_fail@plt+0x2abc>
   142d0:	mov	r0, r5
   142d4:	mov	r1, sl
   142d8:	mov	r2, #0
   142dc:	bl	132d4 <__assert_fail@plt+0x1a84>
   142e0:	strh	r0, [sl, #56]	; 0x38
   142e4:	b	1434c <__assert_fail@plt+0x2afc>
   142e8:	mov	r6, #0
   142ec:	cmp	r7, #3
   142f0:	bne	14c6c <__assert_fail@plt+0x341c>
   142f4:	mov	r0, #4
   142f8:	strh	r0, [sl, #56]	; 0x38
   142fc:	bl	116d0 <__errno_location@plt>
   14300:	ldr	r0, [r0]
   14304:	str	r0, [sl, #32]
   14308:	b	14c6c <__assert_fail@plt+0x341c>
   1430c:	ldrb	r0, [r5, #49]	; 0x31
   14310:	tst	r0, #1
   14314:	beq	1434c <__assert_fail@plt+0x2afc>
   14318:	mov	r0, r5
   1431c:	mov	r1, sl
   14320:	bl	13eac <__assert_fail@plt+0x265c>
   14324:	mov	r0, r5
   14328:	mov	r1, sl
   1432c:	mov	r2, #0
   14330:	mov	r6, #0
   14334:	bl	132d4 <__assert_fail@plt+0x1a84>
   14338:	mov	r0, r5
   1433c:	mov	r1, sl
   14340:	bl	14d08 <__assert_fail@plt+0x34b8>
   14344:	cmp	r0, #0
   14348:	beq	143f0 <__assert_fail@plt+0x2ba0>
   1434c:	mov	r1, r5
   14350:	str	r7, [sp, #4]
   14354:	str	r4, [sp, #12]
   14358:	ldr	r0, [r1, #44]!	; 0x2c
   1435c:	str	r1, [sp, #20]
   14360:	mvn	r1, #0
   14364:	cmp	r0, #0
   14368:	movweq	r1, #34464	; 0x86a0
   1436c:	movteq	r1, #1
   14370:	cmp	r7, #2
   14374:	str	r1, [sp, #32]
   14378:	bne	14394 <__assert_fail@plt+0x2b44>
   1437c:	mov	ip, #1
   14380:	cmp	r7, #3
   14384:	bne	144d8 <__assert_fail@plt+0x2c88>
   14388:	sub	r0, r7, #3
   1438c:	mov	r5, #0
   14390:	b	1441c <__assert_fail@plt+0x2bcc>
   14394:	ldr	r0, [r5, #48]	; 0x30
   14398:	and	r0, r0, #56	; 0x38
   1439c:	cmp	r0, #24
   143a0:	bne	14414 <__assert_fail@plt+0x2bc4>
   143a4:	ldr	r0, [sl, #84]	; 0x54
   143a8:	cmp	r0, #2
   143ac:	bne	14414 <__assert_fail@plt+0x2bc4>
   143b0:	ldr	r1, [fp, #-32]	; 0xffffffe0
   143b4:	mov	r0, sl
   143b8:	bl	15080 <__assert_fail@plt+0x3830>
   143bc:	movw	r1, #26984	; 0x6968
   143c0:	cmp	r0, r1
   143c4:	ble	14400 <__assert_fail@plt+0x2bb0>
   143c8:	movw	r1, #26985	; 0x6969
   143cc:	cmp	r0, r1
   143d0:	movwne	r1, #16719	; 0x414f
   143d4:	movtne	r1, #21318	; 0x5346
   143d8:	cmpne	r0, r1
   143dc:	beq	14414 <__assert_fail@plt+0x2bc4>
   143e0:	movw	r1, #40864	; 0x9fa0
   143e4:	cmp	r0, r1
   143e8:	beq	14414 <__assert_fail@plt+0x2bc4>
   143ec:	b	1437c <__assert_fail@plt+0x2b2c>
   143f0:	bl	116d0 <__errno_location@plt>
   143f4:	mov	r1, #12
   143f8:	str	r1, [r0]
   143fc:	b	14c6c <__assert_fail@plt+0x341c>
   14400:	movw	r1, #19778	; 0x4d42
   14404:	movt	r1, #65363	; 0xff53
   14408:	cmp	r0, r1
   1440c:	cmpne	r0, #0
   14410:	bne	1437c <__assert_fail@plt+0x2b2c>
   14414:	sub	r0, r7, #3
   14418:	mov	r5, #1
   1441c:	clz	r0, r0
   14420:	lsr	r6, r0, #5
   14424:	ldr	r0, [sp, #48]	; 0x30
   14428:	ldr	r2, [fp, #-32]	; 0xffffffe0
   1442c:	ldrb	r0, [r0, #49]	; 0x31
   14430:	tst	r0, #2
   14434:	beq	14450 <__assert_fail@plt+0x2c00>
   14438:	mov	r0, r2
   1443c:	movw	r1, #1030	; 0x406
   14440:	mov	r2, #3
   14444:	bl	19f64 <__assert_fail@plt+0x8714>
   14448:	mov	r2, r0
   1444c:	str	r0, [fp, #-32]	; 0xffffffe0
   14450:	cmp	r2, #0
   14454:	bmi	14470 <__assert_fail@plt+0x2c20>
   14458:	ldr	r0, [sp, #48]	; 0x30
   1445c:	mov	r1, sl
   14460:	mov	r3, #0
   14464:	bl	13f88 <__assert_fail@plt+0x2738>
   14468:	cmp	r0, #0
   1446c:	beq	144d0 <__assert_fail@plt+0x2c80>
   14470:	and	r0, r6, r5
   14474:	cmp	r0, #1
   14478:	bne	14488 <__assert_fail@plt+0x2c38>
   1447c:	bl	116d0 <__errno_location@plt>
   14480:	ldr	r0, [r0]
   14484:	str	r0, [sl, #32]
   14488:	ldrh	r0, [sl, #58]	; 0x3a
   1448c:	orr	r0, r0, #1
   14490:	strh	r0, [sl, #58]	; 0x3a
   14494:	ldr	r0, [sl, #12]
   14498:	bl	11838 <closedir@plt>
   1449c:	ldr	r5, [sp, #48]	; 0x30
   144a0:	mov	r4, #0
   144a4:	str	r4, [sl, #12]
   144a8:	ldrb	r0, [r5, #49]	; 0x31
   144ac:	tst	r0, #2
   144b0:	beq	144c4 <__assert_fail@plt+0x2c74>
   144b4:	ldr	r0, [fp, #-32]	; 0xffffffe0
   144b8:	cmp	r0, #0
   144bc:	bmi	144c4 <__assert_fail@plt+0x2c74>
   144c0:	bl	11820 <close@plt>
   144c4:	mov	ip, #1
   144c8:	str	r4, [sl, #12]
   144cc:	b	144d8 <__assert_fail@plt+0x2c88>
   144d0:	ldr	r5, [sp, #48]	; 0x30
   144d4:	mov	ip, #0
   144d8:	ldr	r0, [sl, #40]	; 0x28
   144dc:	ldr	r1, [sl, #28]
   144e0:	mov	r9, #0
   144e4:	sub	r2, r0, #1
   144e8:	ldrb	r1, [r1, r2]
   144ec:	cmp	r1, #47	; 0x2f
   144f0:	ldrb	r1, [r5, #48]	; 0x30
   144f4:	moveq	r0, r2
   144f8:	tst	r1, #4
   144fc:	mov	r1, #0
   14500:	str	r1, [sp, #40]	; 0x28
   14504:	beq	1451c <__assert_fail@plt+0x2ccc>
   14508:	ldr	r1, [r5, #24]
   1450c:	mov	r2, #47	; 0x2f
   14510:	strb	r2, [r1, r0]!
   14514:	add	r1, r1, #1
   14518:	str	r1, [sp, #40]	; 0x28
   1451c:	ldr	r6, [sl, #12]
   14520:	add	r1, r0, #1
   14524:	str	r1, [fp, #-44]	; 0xffffffd4
   14528:	cmp	r6, #0
   1452c:	beq	1488c <__assert_fail@plt+0x303c>
   14530:	ldr	r0, [sl, #48]	; 0x30
   14534:	str	ip, [sp]
   14538:	mov	r4, #0
   1453c:	add	r0, r0, #1
   14540:	str	r0, [sp, #24]
   14544:	ldr	r0, [r5, #36]	; 0x24
   14548:	sub	r0, r0, r1
   1454c:	str	r0, [fp, #-36]	; 0xffffffdc
   14550:	bl	116d0 <__errno_location@plt>
   14554:	str	r0, [sp, #36]	; 0x24
   14558:	mov	r0, #0
   1455c:	mov	r9, #0
   14560:	mov	r7, #0
   14564:	str	sl, [sp, #28]
   14568:	str	r0, [sp, #44]	; 0x2c
   1456c:	mov	r0, #0
   14570:	str	r0, [sp, #8]
   14574:	mov	r0, #0
   14578:	str	r0, [sp, #16]
   1457c:	ldr	r0, [sp, #36]	; 0x24
   14580:	str	r4, [r0]
   14584:	mov	r0, r6
   14588:	bl	11790 <readdir64@plt>
   1458c:	cmp	r0, #0
   14590:	beq	14898 <__assert_fail@plt+0x3048>
   14594:	mov	r8, r0
   14598:	ldrb	r0, [r5, #48]	; 0x30
   1459c:	tst	r0, #32
   145a0:	bne	145d0 <__assert_fail@plt+0x2d80>
   145a4:	ldrb	r0, [r8, #19]
   145a8:	cmp	r0, #46	; 0x2e
   145ac:	bne	145d0 <__assert_fail@plt+0x2d80>
   145b0:	ldrb	r0, [r8, #20]
   145b4:	cmp	r0, #0
   145b8:	beq	14868 <__assert_fail@plt+0x3018>
   145bc:	cmp	r0, #46	; 0x2e
   145c0:	bne	145d0 <__assert_fail@plt+0x2d80>
   145c4:	ldrb	r0, [r8, #21]
   145c8:	cmp	r0, #0
   145cc:	beq	14868 <__assert_fail@plt+0x3018>
   145d0:	add	r4, r8, #19
   145d4:	mov	r0, r4
   145d8:	bl	116ac <strlen@plt>
   145dc:	mov	r5, r0
   145e0:	add	r0, r0, #176	; 0xb0
   145e4:	bic	r0, r0, #7
   145e8:	bl	19bac <__assert_fail@plt+0x835c>
   145ec:	mov	r6, r0
   145f0:	cmp	r0, #0
   145f4:	beq	14bf4 <__assert_fail@plt+0x33a4>
   145f8:	add	sl, r6, #168	; 0xa8
   145fc:	mov	r1, r4
   14600:	mov	r2, r5
   14604:	str	r7, [fp, #-40]	; 0xffffffd8
   14608:	mov	r0, sl
   1460c:	bl	11508 <memcpy@plt>
   14610:	ldr	r2, [sp, #48]	; 0x30
   14614:	mov	r0, #0
   14618:	mov	r1, #196608	; 0x30000
   1461c:	ldr	r3, [fp, #-44]	; 0xffffffd4
   14620:	strb	r0, [sl, r5]
   14624:	str	r5, [r6, #52]	; 0x34
   14628:	str	r2, [r6, #44]	; 0x2c
   1462c:	add	r7, r5, r3
   14630:	ldr	r4, [r2, #24]
   14634:	str	r0, [r6, #12]
   14638:	str	r0, [r6, #16]
   1463c:	str	r0, [r6, #20]
   14640:	str	r1, [r6, #58]	; 0x3a
   14644:	str	r4, [r6, #28]
   14648:	str	r0, [r6, #32]
   1464c:	ldr	r0, [fp, #-36]	; 0xffffffdc
   14650:	cmp	r5, r0
   14654:	bcs	14668 <__assert_fail@plt+0x2e18>
   14658:	mov	r5, r2
   1465c:	cmp	r7, r3
   14660:	bcs	146d8 <__assert_fail@plt+0x2e88>
   14664:	b	14ae4 <__assert_fail@plt+0x3294>
   14668:	ldr	r1, [r2, #36]	; 0x24
   1466c:	movw	r0, #257	; 0x101
   14670:	mov	r5, r2
   14674:	add	r0, r7, r0
   14678:	adds	r1, r0, r1
   1467c:	bcs	14bc0 <__assert_fail@plt+0x3370>
   14680:	mov	r0, r4
   14684:	str	r1, [r5, #36]	; 0x24
   14688:	bl	19bdc <__assert_fail@plt+0x838c>
   1468c:	cmp	r0, #0
   14690:	beq	14be0 <__assert_fail@plt+0x3390>
   14694:	cmp	r0, r4
   14698:	str	r0, [r5, #24]
   1469c:	beq	146c4 <__assert_fail@plt+0x2e74>
   146a0:	ldrb	r1, [r5, #48]	; 0x30
   146a4:	ldr	r3, [fp, #-44]	; 0xffffffd4
   146a8:	tst	r1, #4
   146ac:	ldr	r1, [sp, #40]	; 0x28
   146b0:	addne	r1, r0, r3
   146b4:	mov	r0, #1
   146b8:	str	r1, [sp, #40]	; 0x28
   146bc:	str	r0, [sp, #16]
   146c0:	b	146c8 <__assert_fail@plt+0x2e78>
   146c4:	ldr	r3, [fp, #-44]	; 0xffffffd4
   146c8:	ldr	r0, [r5, #36]	; 0x24
   146cc:	sub	r0, r0, r3
   146d0:	cmp	r7, r3
   146d4:	bcc	14ae4 <__assert_fail@plt+0x3294>
   146d8:	str	r0, [fp, #-36]	; 0xffffffdc
   146dc:	ldr	r0, [sp, #24]
   146e0:	add	r4, r6, #112	; 0x70
   146e4:	str	r0, [r6, #48]	; 0x30
   146e8:	ldr	r0, [r5]
   146ec:	str	r7, [r6, #40]	; 0x28
   146f0:	str	r0, [r6, #4]
   146f4:	ldrd	r0, [r8]
   146f8:	strd	r0, [r4, #48]	; 0x30
   146fc:	ldrb	r0, [r5, #48]	; 0x30
   14700:	tst	r0, #4
   14704:	bne	14710 <__assert_fail@plt+0x2ec0>
   14708:	str	sl, [r6, #24]
   1470c:	b	1472c <__assert_fail@plt+0x2edc>
   14710:	ldr	r0, [r6, #28]
   14714:	ldr	r1, [r6, #52]	; 0x34
   14718:	str	r0, [r6, #24]
   1471c:	ldr	r0, [sp, #40]	; 0x28
   14720:	add	r2, r1, #1
   14724:	mov	r1, sl
   14728:	bl	114e4 <memmove@plt>
   1472c:	ldr	r0, [r5, #44]	; 0x2c
   14730:	ldr	r7, [fp, #-40]	; 0xffffffd8
   14734:	ldr	r2, [r5, #48]	; 0x30
   14738:	ldr	sl, [sp, #28]
   1473c:	cmp	r0, #0
   14740:	beq	14764 <__assert_fail@plt+0x2f14>
   14744:	ands	r0, r2, #1024	; 0x400
   14748:	bne	14764 <__assert_fail@plt+0x2f14>
   1474c:	mov	r0, r5
   14750:	mov	r1, r6
   14754:	mov	r2, #0
   14758:	bl	132d4 <__assert_fail@plt+0x1a84>
   1475c:	strh	r0, [r6, #56]	; 0x38
   14760:	b	147d8 <__assert_fail@plt+0x2f88>
   14764:	ldrb	r3, [r8, #18]
   14768:	mov	r0, #0
   1476c:	tst	r2, #8
   14770:	mov	r1, #0
   14774:	beq	14798 <__assert_fail@plt+0x2f48>
   14778:	orr	r1, r3, #4
   1477c:	cmp	r1, #4
   14780:	mov	r1, #0
   14784:	beq	14798 <__assert_fail@plt+0x2f48>
   14788:	eor	r1, r3, #10
   1478c:	and	r2, r2, #16
   14790:	orrs	r1, r2, r1
   14794:	movwne	r1, #1
   14798:	mov	r2, #11
   1479c:	strh	r2, [r6, #56]	; 0x38
   147a0:	sub	r2, r3, #1
   147a4:	uxtb	r3, r2
   147a8:	cmp	r3, #11
   147ac:	bhi	147c0 <__assert_fail@plt+0x2f70>
   147b0:	sxtb	r0, r2
   147b4:	movw	r2, #47336	; 0xb8e8
   147b8:	movt	r2, #1
   147bc:	ldr	r0, [r2, r0, lsl #2]
   147c0:	cmp	r1, #0
   147c4:	str	r0, [r6, #80]	; 0x50
   147c8:	mov	r0, #2
   147cc:	mov	r1, #0
   147d0:	movwne	r0, #1
   147d4:	strd	r0, [r4]
   147d8:	mov	r4, #0
   147dc:	cmp	r9, #0
   147e0:	str	r4, [r6, #8]
   147e4:	beq	147f4 <__assert_fail@plt+0x2fa4>
   147e8:	ldr	r0, [sp, #44]	; 0x2c
   147ec:	str	r6, [r0, #8]
   147f0:	b	147f8 <__assert_fail@plt+0x2fa8>
   147f4:	mov	r9, r6
   147f8:	movw	r0, #10000	; 0x2710
   147fc:	cmp	r7, r0
   14800:	bne	14854 <__assert_fail@plt+0x3004>
   14804:	ldr	r0, [sp, #20]
   14808:	ldr	r0, [r0]
   1480c:	cmp	r0, #0
   14810:	bne	14854 <__assert_fail@plt+0x3004>
   14814:	ldr	r1, [fp, #-32]	; 0xffffffe0
   14818:	mov	r0, sl
   1481c:	bl	15080 <__assert_fail@plt+0x3830>
   14820:	mov	r1, #0
   14824:	str	r1, [sp, #8]
   14828:	movw	r1, #19778	; 0x4d42
   1482c:	movt	r1, #65363	; 0xff53
   14830:	cmp	r0, r1
   14834:	movwne	r1, #26985	; 0x6969
   14838:	cmpne	r0, r1
   1483c:	beq	14854 <__assert_fail@plt+0x3004>
   14840:	movw	r1, #6548	; 0x1994
   14844:	movt	r1, #258	; 0x102
   14848:	cmp	r0, r1
   1484c:	movne	r0, #1
   14850:	strne	r0, [sp, #8]
   14854:	ldr	r0, [sp, #32]
   14858:	add	r7, r7, #1
   1485c:	cmp	r0, r7
   14860:	bls	14874 <__assert_fail@plt+0x3024>
   14864:	str	r6, [sp, #44]	; 0x2c
   14868:	ldr	r6, [sl, #12]
   1486c:	cmp	r6, #0
   14870:	bne	1457c <__assert_fail@plt+0x2d2c>
   14874:	ldr	r0, [sp, #16]
   14878:	ldr	ip, [sp]
   1487c:	ldr	r4, [sp, #8]
   14880:	tst	r0, #1
   14884:	bne	148ec <__assert_fail@plt+0x309c>
   14888:	b	1498c <__assert_fail@plt+0x313c>
   1488c:	mov	r7, #0
   14890:	mov	r4, #0
   14894:	b	1498c <__assert_fail@plt+0x313c>
   14898:	ldr	r0, [sp, #36]	; 0x24
   1489c:	ldr	r0, [r0]
   148a0:	cmp	r0, #0
   148a4:	beq	148c0 <__assert_fail@plt+0x3070>
   148a8:	str	r0, [sl, #32]
   148ac:	ldr	r0, [sp, #12]
   148b0:	orrs	r0, r0, r7
   148b4:	mov	r0, #4
   148b8:	movwne	r0, #7
   148bc:	strh	r0, [sl, #56]	; 0x38
   148c0:	ldr	r0, [sl, #12]
   148c4:	ldr	r4, [sp, #8]
   148c8:	cmp	r0, #0
   148cc:	beq	148dc <__assert_fail@plt+0x308c>
   148d0:	bl	11838 <closedir@plt>
   148d4:	mov	r0, #0
   148d8:	str	r0, [sl, #12]
   148dc:	ldr	r0, [sp, #16]
   148e0:	ldr	ip, [sp]
   148e4:	tst	r0, #1
   148e8:	beq	1498c <__assert_fail@plt+0x313c>
   148ec:	ldr	r1, [r5, #4]
   148f0:	ldr	r0, [r5, #24]
   148f4:	cmp	r1, #0
   148f8:	bne	14910 <__assert_fail@plt+0x30c0>
   148fc:	b	14934 <__assert_fail@plt+0x30e4>
   14900:	str	r0, [r1, #28]
   14904:	ldr	r1, [r1, #8]
   14908:	cmp	r1, #0
   1490c:	beq	14934 <__assert_fail@plt+0x30e4>
   14910:	ldr	r2, [r1, #24]
   14914:	add	r3, r1, #168	; 0xa8
   14918:	cmp	r2, r3
   1491c:	beq	14900 <__assert_fail@plt+0x30b0>
   14920:	ldr	r3, [r1, #28]
   14924:	sub	r2, r2, r3
   14928:	add	r2, r0, r2
   1492c:	str	r2, [r1, #24]
   14930:	b	14900 <__assert_fail@plt+0x30b0>
   14934:	ldr	r1, [r9, #48]	; 0x30
   14938:	cmp	r1, #0
   1493c:	bmi	1498c <__assert_fail@plt+0x313c>
   14940:	mov	r1, r9
   14944:	b	14968 <__assert_fail@plt+0x3118>
   14948:	str	r0, [r1, #28]
   1494c:	ldr	r2, [r1, #8]
   14950:	cmp	r2, #0
   14954:	ldreq	r2, [r1, #4]
   14958:	ldr	r1, [r2, #48]	; 0x30
   1495c:	cmn	r1, #1
   14960:	mov	r1, r2
   14964:	ble	1498c <__assert_fail@plt+0x313c>
   14968:	ldr	r2, [r1, #24]
   1496c:	add	r3, r1, #168	; 0xa8
   14970:	cmp	r2, r3
   14974:	beq	14948 <__assert_fail@plt+0x30f8>
   14978:	ldr	r3, [r1, #28]
   1497c:	sub	r2, r2, r3
   14980:	add	r2, r0, r2
   14984:	str	r2, [r1, #24]
   14988:	b	14948 <__assert_fail@plt+0x30f8>
   1498c:	ldrb	r0, [r5, #48]	; 0x30
   14990:	tst	r0, #4
   14994:	beq	149c0 <__assert_fail@plt+0x3170>
   14998:	ldr	r2, [sp, #40]	; 0x28
   1499c:	ldr	r0, [r5, #36]	; 0x24
   149a0:	ldr	r3, [fp, #-44]	; 0xffffffd4
   149a4:	cmp	r3, r0
   149a8:	sub	r1, r2, #1
   149ac:	mov	r0, #0
   149b0:	moveq	r2, r1
   149b4:	cmp	r7, #0
   149b8:	moveq	r2, r1
   149bc:	strb	r0, [r2]
   149c0:	ldr	r0, [sp, #12]
   149c4:	cmp	r0, #0
   149c8:	movwne	r0, #1
   149cc:	orrs	r0, r0, ip
   149d0:	beq	14a38 <__assert_fail@plt+0x31e8>
   149d4:	cmp	r7, #0
   149d8:	bne	14a78 <__assert_fail@plt+0x3228>
   149dc:	ldr	r0, [sp, #4]
   149e0:	cmp	r0, #3
   149e4:	bne	149fc <__assert_fail@plt+0x31ac>
   149e8:	ldrh	r0, [sl, #56]	; 0x38
   149ec:	cmp	r0, #4
   149f0:	cmpne	r0, #7
   149f4:	movne	r0, #6
   149f8:	strhne	r0, [sl, #56]	; 0x38
   149fc:	mov	r6, #0
   14a00:	cmp	r9, #0
   14a04:	bne	14a20 <__assert_fail@plt+0x31d0>
   14a08:	b	14c6c <__assert_fail@plt+0x341c>
   14a0c:	mov	r0, r9
   14a10:	bl	1a1dc <__assert_fail@plt+0x898c>
   14a14:	cmp	r4, #0
   14a18:	mov	r9, r4
   14a1c:	beq	14c6c <__assert_fail@plt+0x341c>
   14a20:	ldrd	r4, [r9, #8]
   14a24:	cmp	r5, #0
   14a28:	beq	14a0c <__assert_fail@plt+0x31bc>
   14a2c:	mov	r0, r5
   14a30:	bl	11838 <closedir@plt>
   14a34:	b	14a0c <__assert_fail@plt+0x31bc>
   14a38:	ldr	r0, [sp, #4]
   14a3c:	cmp	r0, #1
   14a40:	cmpne	r7, #0
   14a44:	bne	14a78 <__assert_fail@plt+0x3228>
   14a48:	ldr	r0, [sl, #48]	; 0x30
   14a4c:	cmp	r0, #0
   14a50:	beq	14b60 <__assert_fail@plt+0x3310>
   14a54:	ldr	r1, [sl, #4]
   14a58:	movw	r3, #47330	; 0xb8e2
   14a5c:	mov	r0, r5
   14a60:	mvn	r2, #0
   14a64:	movt	r3, #1
   14a68:	bl	13f88 <__assert_fail@plt+0x2738>
   14a6c:	cmp	r0, #0
   14a70:	bne	14b70 <__assert_fail@plt+0x3320>
   14a74:	b	149d4 <__assert_fail@plt+0x3184>
   14a78:	tst	r4, #1
   14a7c:	beq	14aac <__assert_fail@plt+0x325c>
   14a80:	movw	r0, #20552	; 0x5048
   14a84:	mov	r1, r9
   14a88:	mov	r2, r7
   14a8c:	movt	r0, #1
   14a90:	str	r0, [r5, #44]	; 0x2c
   14a94:	mov	r0, r5
   14a98:	bl	1346c <__assert_fail@plt+0x1c1c>
   14a9c:	mov	r6, r0
   14aa0:	mov	r0, #0
   14aa4:	str	r0, [r5, #44]	; 0x2c
   14aa8:	b	14c6c <__assert_fail@plt+0x341c>
   14aac:	cmp	r7, #2
   14ab0:	bcc	14adc <__assert_fail@plt+0x328c>
   14ab4:	ldr	r0, [sp, #20]
   14ab8:	ldr	r0, [r0]
   14abc:	cmp	r0, #0
   14ac0:	beq	14adc <__assert_fail@plt+0x328c>
   14ac4:	mov	r0, r5
   14ac8:	mov	r1, r9
   14acc:	mov	r2, r7
   14ad0:	bl	1346c <__assert_fail@plt+0x1c1c>
   14ad4:	mov	r6, r0
   14ad8:	b	14c6c <__assert_fail@plt+0x341c>
   14adc:	mov	r6, r9
   14ae0:	b	14c6c <__assert_fail@plt+0x341c>
   14ae4:	mov	r0, r6
   14ae8:	bl	1a1dc <__assert_fail@plt+0x898c>
   14aec:	ldr	r7, [sp, #28]
   14af0:	cmp	r9, #0
   14af4:	bne	14b10 <__assert_fail@plt+0x32c0>
   14af8:	b	14b28 <__assert_fail@plt+0x32d8>
   14afc:	mov	r0, r9
   14b00:	bl	1a1dc <__assert_fail@plt+0x898c>
   14b04:	cmp	r4, #0
   14b08:	mov	r9, r4
   14b0c:	beq	14b28 <__assert_fail@plt+0x32d8>
   14b10:	ldrd	r4, [r9, #8]
   14b14:	cmp	r5, #0
   14b18:	beq	14afc <__assert_fail@plt+0x32ac>
   14b1c:	mov	r0, r5
   14b20:	bl	11838 <closedir@plt>
   14b24:	b	14afc <__assert_fail@plt+0x32ac>
   14b28:	ldr	r0, [r7, #12]
   14b2c:	bl	11838 <closedir@plt>
   14b30:	ldr	r1, [sp, #48]	; 0x30
   14b34:	mov	r0, #7
   14b38:	mov	r6, #0
   14b3c:	strh	r0, [r7, #56]	; 0x38
   14b40:	str	r6, [r7, #12]
   14b44:	ldr	r0, [r1, #48]	; 0x30
   14b48:	orr	r0, r0, #8192	; 0x2000
   14b4c:	str	r0, [r1, #48]	; 0x30
   14b50:	ldr	r1, [sp, #36]	; 0x24
   14b54:	mov	r0, #36	; 0x24
   14b58:	str	r0, [r1]
   14b5c:	b	14c6c <__assert_fail@plt+0x341c>
   14b60:	mov	r0, r5
   14b64:	bl	14c78 <__assert_fail@plt+0x3428>
   14b68:	cmp	r0, #0
   14b6c:	beq	149d4 <__assert_fail@plt+0x3184>
   14b70:	mov	r0, #7
   14b74:	mov	r6, #0
   14b78:	cmp	r9, #0
   14b7c:	strh	r0, [sl, #56]	; 0x38
   14b80:	ldr	r0, [r5, #48]	; 0x30
   14b84:	orr	r0, r0, #8192	; 0x2000
   14b88:	str	r0, [r5, #48]	; 0x30
   14b8c:	bne	14ba8 <__assert_fail@plt+0x3358>
   14b90:	b	14c6c <__assert_fail@plt+0x341c>
   14b94:	mov	r0, r9
   14b98:	bl	1a1dc <__assert_fail@plt+0x898c>
   14b9c:	cmp	r4, #0
   14ba0:	mov	r9, r4
   14ba4:	beq	14c6c <__assert_fail@plt+0x341c>
   14ba8:	ldrd	r4, [r9, #8]
   14bac:	cmp	r5, #0
   14bb0:	beq	14b94 <__assert_fail@plt+0x3344>
   14bb4:	mov	r0, r5
   14bb8:	bl	11838 <closedir@plt>
   14bbc:	b	14b94 <__assert_fail@plt+0x3344>
   14bc0:	mov	r0, r4
   14bc4:	bl	1a1dc <__assert_fail@plt+0x898c>
   14bc8:	ldr	r1, [sp, #36]	; 0x24
   14bcc:	mov	r0, #0
   14bd0:	str	r0, [r5, #24]
   14bd4:	mov	r0, #36	; 0x24
   14bd8:	str	r0, [r1]
   14bdc:	b	14bf0 <__assert_fail@plt+0x33a0>
   14be0:	ldr	r0, [r5, #24]
   14be4:	bl	1a1dc <__assert_fail@plt+0x898c>
   14be8:	mov	r0, #0
   14bec:	str	r0, [r5, #24]
   14bf0:	ldr	sl, [sp, #28]
   14bf4:	ldr	r0, [sp, #36]	; 0x24
   14bf8:	ldr	r4, [r0]
   14bfc:	mov	r0, r6
   14c00:	bl	1a1dc <__assert_fail@plt+0x898c>
   14c04:	ldr	r5, [sp, #48]	; 0x30
   14c08:	cmp	r9, #0
   14c0c:	bne	14c28 <__assert_fail@plt+0x33d8>
   14c10:	b	14c40 <__assert_fail@plt+0x33f0>
   14c14:	mov	r0, r9
   14c18:	bl	1a1dc <__assert_fail@plt+0x898c>
   14c1c:	cmp	r6, #0
   14c20:	mov	r9, r6
   14c24:	beq	14c40 <__assert_fail@plt+0x33f0>
   14c28:	ldrd	r6, [r9, #8]
   14c2c:	cmp	r7, #0
   14c30:	beq	14c14 <__assert_fail@plt+0x33c4>
   14c34:	mov	r0, r7
   14c38:	bl	11838 <closedir@plt>
   14c3c:	b	14c14 <__assert_fail@plt+0x33c4>
   14c40:	ldr	r0, [sl, #12]
   14c44:	bl	11838 <closedir@plt>
   14c48:	mov	r0, #7
   14c4c:	mov	r6, #0
   14c50:	strh	r0, [sl, #56]	; 0x38
   14c54:	str	r6, [sl, #12]
   14c58:	ldr	r0, [r5, #48]	; 0x30
   14c5c:	orr	r0, r0, #8192	; 0x2000
   14c60:	str	r0, [r5, #48]	; 0x30
   14c64:	ldr	r0, [sp, #36]	; 0x24
   14c68:	str	r4, [r0]
   14c6c:	mov	r0, r6
   14c70:	sub	sp, fp, #28
   14c74:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14c78:	push	{r4, r5, fp, lr}
   14c7c:	add	fp, sp, #8
   14c80:	mov	r5, r0
   14c84:	ldr	r0, [r0, #48]	; 0x30
   14c88:	mov	r4, #0
   14c8c:	tst	r0, #4
   14c90:	bne	14cd4 <__assert_fail@plt+0x3484>
   14c94:	tst	r0, #512	; 0x200
   14c98:	bne	14cb4 <__assert_fail@plt+0x3464>
   14c9c:	ldr	r0, [r5, #28]
   14ca0:	bl	117b4 <fchdir@plt>
   14ca4:	cmp	r0, #0
   14ca8:	mov	r4, r0
   14cac:	movwne	r4, #1
   14cb0:	b	14cd4 <__assert_fail@plt+0x3484>
   14cb4:	ldr	r1, [r5, #32]
   14cb8:	add	r0, r5, #60	; 0x3c
   14cbc:	bl	164f4 <__assert_fail@plt+0x4ca4>
   14cc0:	cmp	r0, #0
   14cc4:	bmi	14ccc <__assert_fail@plt+0x347c>
   14cc8:	bl	11820 <close@plt>
   14ccc:	mvn	r0, #99	; 0x63
   14cd0:	str	r0, [r5, #32]
   14cd4:	add	r5, r5, #60	; 0x3c
   14cd8:	mov	r0, r5
   14cdc:	bl	164ec <__assert_fail@plt+0x4c9c>
   14ce0:	cmp	r0, #0
   14ce4:	bne	14d00 <__assert_fail@plt+0x34b0>
   14ce8:	mov	r0, r5
   14cec:	bl	16540 <__assert_fail@plt+0x4cf0>
   14cf0:	cmp	r0, #0
   14cf4:	bmi	14cd8 <__assert_fail@plt+0x3488>
   14cf8:	bl	11820 <close@plt>
   14cfc:	b	14cd8 <__assert_fail@plt+0x3488>
   14d00:	mov	r0, r4
   14d04:	pop	{r4, r5, fp, pc}
   14d08:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   14d0c:	add	fp, sp, #24
   14d10:	mov	r6, r0
   14d14:	ldrh	r0, [r0, #48]	; 0x30
   14d18:	mov	r4, r1
   14d1c:	add	r5, r1, #64	; 0x40
   14d20:	movw	r1, #258	; 0x102
   14d24:	tst	r0, r1
   14d28:	beq	14da0 <__assert_fail@plt+0x3550>
   14d2c:	mov	r0, #24
   14d30:	bl	19bac <__assert_fail@plt+0x835c>
   14d34:	mov	r8, #0
   14d38:	cmp	r0, #0
   14d3c:	beq	14dc0 <__assert_fail@plt+0x3570>
   14d40:	ldrd	r2, [r5]
   14d44:	mov	r7, r0
   14d48:	add	r0, r4, #160	; 0xa0
   14d4c:	stm	r7, {r2, r3}
   14d50:	add	r2, r7, #8
   14d54:	ldrd	r0, [r0]
   14d58:	stm	r2, {r0, r1, r4}
   14d5c:	mov	r1, r7
   14d60:	ldr	r0, [r6, #56]	; 0x38
   14d64:	bl	161e0 <__assert_fail@plt+0x4990>
   14d68:	cmp	r0, r7
   14d6c:	beq	14d94 <__assert_fail@plt+0x3544>
   14d70:	mov	r5, r0
   14d74:	mov	r0, r7
   14d78:	bl	1a1dc <__assert_fail@plt+0x898c>
   14d7c:	cmp	r5, #0
   14d80:	beq	14dc0 <__assert_fail@plt+0x3570>
   14d84:	ldr	r0, [r5, #16]
   14d88:	mov	r1, #2
   14d8c:	strh	r1, [r4, #56]	; 0x38
   14d90:	str	r0, [r4]
   14d94:	mov	r8, #1
   14d98:	mov	r0, r8
   14d9c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14da0:	ldr	r0, [r6, #56]	; 0x38
   14da4:	mov	r1, r5
   14da8:	bl	19df4 <__assert_fail@plt+0x85a4>
   14dac:	cmp	r0, #0
   14db0:	mov	r8, #1
   14db4:	movne	r0, #2
   14db8:	strhne	r0, [r4, #56]	; 0x38
   14dbc:	strne	r4, [r4]
   14dc0:	mov	r0, r8
   14dc4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14dc8:	push	{fp, lr}
   14dcc:	mov	fp, sp
   14dd0:	cmp	r2, #5
   14dd4:	bcc	14dec <__assert_fail@plt+0x359c>
   14dd8:	bl	116d0 <__errno_location@plt>
   14ddc:	mov	r1, #22
   14de0:	str	r1, [r0]
   14de4:	mov	r0, #1
   14de8:	pop	{fp, pc}
   14dec:	mov	r0, #0
   14df0:	strh	r2, [r1, #60]	; 0x3c
   14df4:	pop	{fp, pc}
   14df8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14dfc:	add	fp, sp, #28
   14e00:	sub	sp, sp, #4
   14e04:	mov	r9, r0
   14e08:	mvn	r0, #4096	; 0x1000
   14e0c:	tst	r1, r0
   14e10:	beq	14e28 <__assert_fail@plt+0x35d8>
   14e14:	bl	116d0 <__errno_location@plt>
   14e18:	mov	r1, #22
   14e1c:	mov	r5, #0
   14e20:	str	r1, [r0]
   14e24:	b	14f28 <__assert_fail@plt+0x36d8>
   14e28:	ldr	r8, [r9]
   14e2c:	mov	r7, r1
   14e30:	bl	116d0 <__errno_location@plt>
   14e34:	mov	r5, #0
   14e38:	mov	sl, r0
   14e3c:	str	r5, [r0]
   14e40:	ldrb	r0, [r9, #49]	; 0x31
   14e44:	tst	r0, #32
   14e48:	bne	14f28 <__assert_fail@plt+0x36d8>
   14e4c:	ldrh	r0, [r8, #56]	; 0x38
   14e50:	cmp	r0, #1
   14e54:	beq	14e64 <__assert_fail@plt+0x3614>
   14e58:	cmp	r0, #9
   14e5c:	ldreq	r5, [r8, #8]
   14e60:	b	14f28 <__assert_fail@plt+0x36d8>
   14e64:	ldr	r6, [r9, #4]
   14e68:	cmp	r6, #0
   14e6c:	bne	14e88 <__assert_fail@plt+0x3638>
   14e70:	b	14ea4 <__assert_fail@plt+0x3654>
   14e74:	mov	r0, r6
   14e78:	bl	1a1dc <__assert_fail@plt+0x898c>
   14e7c:	cmp	r4, #0
   14e80:	mov	r6, r4
   14e84:	beq	14ea4 <__assert_fail@plt+0x3654>
   14e88:	ldr	r1, [r6, #12]
   14e8c:	ldr	r4, [r6, #8]
   14e90:	cmp	r1, #0
   14e94:	beq	14e74 <__assert_fail@plt+0x3624>
   14e98:	mov	r0, r1
   14e9c:	bl	11838 <closedir@plt>
   14ea0:	b	14e74 <__assert_fail@plt+0x3624>
   14ea4:	mov	r4, #1
   14ea8:	cmp	r7, #4096	; 0x1000
   14eac:	bne	14ec0 <__assert_fail@plt+0x3670>
   14eb0:	ldr	r0, [r9, #48]	; 0x30
   14eb4:	mov	r4, #2
   14eb8:	orr	r0, r0, #4096	; 0x1000
   14ebc:	str	r0, [r9, #48]	; 0x30
   14ec0:	ldr	r0, [r8, #48]	; 0x30
   14ec4:	cmp	r0, #0
   14ec8:	bne	14f14 <__assert_fail@plt+0x36c4>
   14ecc:	ldr	r0, [r8, #24]
   14ed0:	ldrb	r0, [r0]
   14ed4:	cmp	r0, #47	; 0x2f
   14ed8:	beq	14f14 <__assert_fail@plt+0x36c4>
   14edc:	ldr	r0, [r9, #48]	; 0x30
   14ee0:	tst	r0, #4
   14ee4:	bne	14f14 <__assert_fail@plt+0x36c4>
   14ee8:	mov	r1, #32768	; 0x8000
   14eec:	tst	r0, #512	; 0x200
   14ef0:	and	r1, r1, r0, lsl #11
   14ef4:	orr	r1, r1, #18688	; 0x4900
   14ef8:	orr	r2, r1, #524288	; 0x80000
   14efc:	bne	14f34 <__assert_fail@plt+0x36e4>
   14f00:	movw	r0, #47331	; 0xb8e3
   14f04:	mov	r1, r2
   14f08:	movt	r0, #1
   14f0c:	bl	1a144 <__assert_fail@plt+0x88f4>
   14f10:	b	14f44 <__assert_fail@plt+0x36f4>
   14f14:	mov	r0, r9
   14f18:	mov	r1, r4
   14f1c:	bl	141e8 <__assert_fail@plt+0x2998>
   14f20:	mov	r5, r0
   14f24:	str	r0, [r9, #4]
   14f28:	mov	r0, r5
   14f2c:	sub	sp, fp, #28
   14f30:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14f34:	ldr	r0, [r9, #32]
   14f38:	movw	r1, #47331	; 0xb8e3
   14f3c:	movt	r1, #1
   14f40:	bl	16590 <__assert_fail@plt+0x4d40>
   14f44:	mov	r8, r0
   14f48:	cmn	r0, #1
   14f4c:	ble	14f90 <__assert_fail@plt+0x3740>
   14f50:	mov	r0, r9
   14f54:	mov	r1, r4
   14f58:	bl	141e8 <__assert_fail@plt+0x2998>
   14f5c:	str	r0, [r9, #4]
   14f60:	ldrb	r0, [r9, #49]	; 0x31
   14f64:	tst	r0, #2
   14f68:	bne	14f9c <__assert_fail@plt+0x374c>
   14f6c:	mov	r0, r8
   14f70:	bl	117b4 <fchdir@plt>
   14f74:	cmp	r0, #0
   14f78:	beq	14fcc <__assert_fail@plt+0x377c>
   14f7c:	ldr	r4, [sl]
   14f80:	mov	r0, r8
   14f84:	bl	11820 <close@plt>
   14f88:	str	r4, [sl]
   14f8c:	b	14f28 <__assert_fail@plt+0x36d8>
   14f90:	mov	r5, #0
   14f94:	str	r5, [r9, #4]
   14f98:	b	14f28 <__assert_fail@plt+0x36d8>
   14f9c:	ldr	r1, [r9, #32]
   14fa0:	cmp	r1, r8
   14fa4:	bne	14fb0 <__assert_fail@plt+0x3760>
   14fa8:	cmn	r1, #100	; 0x64
   14fac:	bne	14fdc <__assert_fail@plt+0x378c>
   14fb0:	add	r0, r9, #60	; 0x3c
   14fb4:	bl	164f4 <__assert_fail@plt+0x4ca4>
   14fb8:	cmp	r0, #0
   14fbc:	bmi	14fc4 <__assert_fail@plt+0x3774>
   14fc0:	bl	11820 <close@plt>
   14fc4:	str	r8, [r9, #32]
   14fc8:	b	14fd4 <__assert_fail@plt+0x3784>
   14fcc:	mov	r0, r8
   14fd0:	bl	11820 <close@plt>
   14fd4:	ldr	r5, [r9, #4]
   14fd8:	b	14f28 <__assert_fail@plt+0x36d8>
   14fdc:	bl	11814 <abort@plt>
   14fe0:	push	{fp, lr}
   14fe4:	mov	fp, sp
   14fe8:	mov	r2, r1
   14fec:	ldrd	r0, [r0, #8]
   14ff0:	mov	r3, #0
   14ff4:	bl	1a914 <__assert_fail@plt+0x90c4>
   14ff8:	mov	r0, r2
   14ffc:	pop	{fp, pc}
   15000:	push	{r4, r5, fp, lr}
   15004:	add	fp, sp, #8
   15008:	ldrd	r2, [r1, #8]
   1500c:	ldrd	r4, [r0, #8]
   15010:	eor	r3, r5, r3
   15014:	eor	r2, r4, r2
   15018:	orrs	r2, r2, r3
   1501c:	mov	r2, #0
   15020:	bne	15040 <__assert_fail@plt+0x37f0>
   15024:	ldrd	r2, [r1]
   15028:	ldrd	r0, [r0]
   1502c:	eor	r1, r1, r3
   15030:	eor	r0, r0, r2
   15034:	orr	r0, r0, r1
   15038:	clz	r0, r0
   1503c:	lsr	r2, r0, #5
   15040:	mov	r0, r2
   15044:	pop	{r4, r5, fp, pc}
   15048:	push	{r4, r5, fp, lr}
   1504c:	add	fp, sp, #8
   15050:	ldr	r0, [r0]
   15054:	ldrd	r2, [r0, #160]	; 0xa0
   15058:	ldr	r0, [r1]
   1505c:	ldrd	r4, [r0, #160]	; 0xa0
   15060:	mov	r0, #0
   15064:	subs	r1, r4, r2
   15068:	sbcs	r1, r5, r3
   1506c:	movwcc	r0, #1
   15070:	subs	r1, r2, r4
   15074:	sbcs	r1, r3, r5
   15078:	subcc	r0, r0, #1
   1507c:	pop	{r4, r5, fp, pc}
   15080:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   15084:	add	fp, sp, #24
   15088:	sub	sp, sp, #96	; 0x60
   1508c:	ldr	r7, [r0, #44]	; 0x2c
   15090:	mov	r4, r0
   15094:	mov	r5, #0
   15098:	ldrb	r0, [r7, #49]	; 0x31
   1509c:	tst	r0, #2
   150a0:	beq	1519c <__assert_fail@plt+0x394c>
   150a4:	ldr	r6, [r7, #52]	; 0x34
   150a8:	mov	r9, r1
   150ac:	cmp	r6, #0
   150b0:	bne	150f0 <__assert_fail@plt+0x38a0>
   150b4:	movw	r0, #41436	; 0xa1dc
   150b8:	movw	r2, #20904	; 0x51a8
   150bc:	movw	r3, #20936	; 0x51c8
   150c0:	mov	r1, #0
   150c4:	mov	r8, #0
   150c8:	movt	r0, #1
   150cc:	movt	r2, #1
   150d0:	movt	r3, #1
   150d4:	str	r0, [sp]
   150d8:	mov	r0, #13
   150dc:	bl	1568c <__assert_fail@plt+0x3e3c>
   150e0:	mov	r6, r0
   150e4:	cmp	r0, #0
   150e8:	str	r0, [r7, #52]	; 0x34
   150ec:	beq	15128 <__assert_fail@plt+0x38d8>
   150f0:	ldrd	r0, [r4, #64]	; 0x40
   150f4:	str	r1, [sp, #12]
   150f8:	str	r0, [sp, #8]
   150fc:	add	r1, sp, #8
   15100:	mov	r0, r6
   15104:	bl	153d8 <__assert_fail@plt+0x3b88>
   15108:	cmp	r0, #0
   1510c:	beq	15118 <__assert_fail@plt+0x38c8>
   15110:	ldr	r5, [r0, #8]
   15114:	b	1519c <__assert_fail@plt+0x394c>
   15118:	mov	r8, #1
   1511c:	cmp	r9, #0
   15120:	bpl	15134 <__assert_fail@plt+0x38e4>
   15124:	b	1519c <__assert_fail@plt+0x394c>
   15128:	mov	r6, #0
   1512c:	cmp	r9, #0
   15130:	bmi	1519c <__assert_fail@plt+0x394c>
   15134:	add	r1, sp, #8
   15138:	mov	r0, r9
   1513c:	bl	11484 <fstatfs64@plt>
   15140:	cmp	r0, #0
   15144:	bne	1519c <__assert_fail@plt+0x394c>
   15148:	cmp	r8, #0
   1514c:	beq	15198 <__assert_fail@plt+0x3948>
   15150:	mov	r0, #16
   15154:	bl	19bac <__assert_fail@plt+0x835c>
   15158:	cmp	r0, #0
   1515c:	beq	15198 <__assert_fail@plt+0x3948>
   15160:	mov	r5, r0
   15164:	ldrd	r0, [r4, #64]	; 0x40
   15168:	ldr	r2, [sp, #8]
   1516c:	stm	r5, {r0, r1, r2}
   15170:	mov	r0, r6
   15174:	mov	r1, r5
   15178:	bl	161e0 <__assert_fail@plt+0x4990>
   1517c:	cmp	r0, #0
   15180:	beq	15190 <__assert_fail@plt+0x3940>
   15184:	cmp	r0, r5
   15188:	beq	15198 <__assert_fail@plt+0x3948>
   1518c:	bl	11814 <abort@plt>
   15190:	mov	r0, r5
   15194:	bl	1a1dc <__assert_fail@plt+0x898c>
   15198:	ldr	r5, [sp, #8]
   1519c:	mov	r0, r5
   151a0:	sub	sp, fp, #24
   151a4:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   151a8:	push	{fp, lr}
   151ac:	mov	fp, sp
   151b0:	mov	r2, r1
   151b4:	ldrd	r0, [r0]
   151b8:	mov	r3, #0
   151bc:	bl	1a914 <__assert_fail@plt+0x90c4>
   151c0:	mov	r0, r2
   151c4:	pop	{fp, pc}
   151c8:	ldrd	r2, [r1]
   151cc:	ldrd	r0, [r0]
   151d0:	eor	r1, r1, r3
   151d4:	eor	r0, r0, r2
   151d8:	orr	r0, r0, r1
   151dc:	clz	r0, r0
   151e0:	lsr	r0, r0, #5
   151e4:	bx	lr
   151e8:	ldr	r0, [r0, #8]
   151ec:	bx	lr
   151f0:	ldr	r0, [r0, #12]
   151f4:	bx	lr
   151f8:	ldr	r0, [r0, #16]
   151fc:	bx	lr
   15200:	ldm	r0, {r2, ip}
   15204:	mov	r0, #0
   15208:	cmp	r2, ip
   1520c:	bxcs	lr
   15210:	mov	r0, #0
   15214:	b	15224 <__assert_fail@plt+0x39d4>
   15218:	add	r2, r2, #8
   1521c:	cmp	r2, ip
   15220:	bcs	15254 <__assert_fail@plt+0x3a04>
   15224:	ldr	r1, [r2]
   15228:	cmp	r1, #0
   1522c:	beq	15218 <__assert_fail@plt+0x39c8>
   15230:	mov	r3, #0
   15234:	mov	r1, r2
   15238:	ldr	r1, [r1, #4]
   1523c:	add	r3, r3, #1
   15240:	cmp	r1, #0
   15244:	bne	15238 <__assert_fail@plt+0x39e8>
   15248:	cmp	r3, r0
   1524c:	movhi	r0, r3
   15250:	b	15218 <__assert_fail@plt+0x39c8>
   15254:	bx	lr
   15258:	push	{fp, lr}
   1525c:	mov	fp, sp
   15260:	ldm	r0, {r3, ip}
   15264:	mov	lr, #0
   15268:	mov	r1, #0
   1526c:	cmp	r3, ip
   15270:	bcs	152b4 <__assert_fail@plt+0x3a64>
   15274:	mov	r1, #0
   15278:	mov	lr, #0
   1527c:	b	1528c <__assert_fail@plt+0x3a3c>
   15280:	add	r3, r3, #8
   15284:	cmp	r3, ip
   15288:	bcs	152b4 <__assert_fail@plt+0x3a64>
   1528c:	ldr	r2, [r3]
   15290:	cmp	r2, #0
   15294:	beq	15280 <__assert_fail@plt+0x3a30>
   15298:	mov	r2, r3
   1529c:	ldr	r2, [r2, #4]
   152a0:	add	r1, r1, #1
   152a4:	cmp	r2, #0
   152a8:	bne	1529c <__assert_fail@plt+0x3a4c>
   152ac:	add	lr, lr, #1
   152b0:	b	15280 <__assert_fail@plt+0x3a30>
   152b4:	ldr	r2, [r0, #12]
   152b8:	cmp	lr, r2
   152bc:	bne	152d4 <__assert_fail@plt+0x3a84>
   152c0:	ldr	r2, [r0, #16]
   152c4:	mov	r0, #1
   152c8:	cmp	r1, r2
   152cc:	movne	r0, #0
   152d0:	pop	{fp, pc}
   152d4:	mov	r0, #0
   152d8:	pop	{fp, pc}
   152dc:	nop	{0}
   152e0:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   152e4:	add	fp, sp, #24
   152e8:	sub	sp, sp, #8
   152ec:	ldr	r6, [r0]
   152f0:	ldmib	r0, {r2, r7, r8}
   152f4:	ldr	r3, [r0, #16]
   152f8:	mov	r4, r1
   152fc:	mov	r5, #0
   15300:	cmp	r6, r2
   15304:	bcs	1534c <__assert_fail@plt+0x3afc>
   15308:	mov	r5, #0
   1530c:	b	1531c <__assert_fail@plt+0x3acc>
   15310:	add	r6, r6, #8
   15314:	cmp	r6, r2
   15318:	bcs	1534c <__assert_fail@plt+0x3afc>
   1531c:	ldr	r0, [r6]
   15320:	cmp	r0, #0
   15324:	beq	15310 <__assert_fail@plt+0x3ac0>
   15328:	mov	r0, #0
   1532c:	mov	r1, r6
   15330:	ldr	r1, [r1, #4]
   15334:	add	r0, r0, #1
   15338:	cmp	r1, #0
   1533c:	bne	15330 <__assert_fail@plt+0x3ae0>
   15340:	cmp	r0, r5
   15344:	movhi	r5, r0
   15348:	b	15310 <__assert_fail@plt+0x3ac0>
   1534c:	movw	r2, #47384	; 0xb918
   15350:	mov	r0, r4
   15354:	mov	r1, #1
   15358:	movt	r2, #1
   1535c:	bl	11718 <__fprintf_chk@plt>
   15360:	movw	r2, #47408	; 0xb930
   15364:	mov	r0, r4
   15368:	mov	r1, #1
   1536c:	mov	r3, r7
   15370:	movt	r2, #1
   15374:	bl	11718 <__fprintf_chk@plt>
   15378:	vmov	s0, r8
   1537c:	vldr	d16, [pc, #76]	; 153d0 <__assert_fail@plt+0x3b80>
   15380:	movw	r2, #47432	; 0xb948
   15384:	mov	r0, r4
   15388:	mov	r1, #1
   1538c:	mov	r3, r8
   15390:	movt	r2, #1
   15394:	vcvt.f64.u32	d17, s0
   15398:	vmov	s0, r7
   1539c:	vcvt.f64.u32	d18, s0
   153a0:	vmul.f64	d16, d17, d16
   153a4:	vdiv.f64	d16, d16, d18
   153a8:	vstr	d16, [sp]
   153ac:	bl	11718 <__fprintf_chk@plt>
   153b0:	movw	r2, #47465	; 0xb969
   153b4:	mov	r0, r4
   153b8:	mov	r1, #1
   153bc:	mov	r3, r5
   153c0:	movt	r2, #1
   153c4:	sub	sp, fp, #24
   153c8:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   153cc:	b	11718 <__fprintf_chk@plt>
   153d0:	andeq	r0, r0, r0
   153d4:	subsmi	r0, r9, r0
   153d8:	push	{r4, r5, r6, r7, fp, lr}
   153dc:	add	fp, sp, #16
   153e0:	mov	r4, r1
   153e4:	ldr	r1, [r0, #8]
   153e8:	ldr	r2, [r0, #24]
   153ec:	mov	r5, r0
   153f0:	mov	r0, r4
   153f4:	blx	r2
   153f8:	ldr	r1, [r5, #8]
   153fc:	cmp	r0, r1
   15400:	bcs	15468 <__assert_fail@plt+0x3c18>
   15404:	ldr	r7, [r5]
   15408:	mov	r6, #0
   1540c:	ldr	r1, [r7, r0, lsl #3]!
   15410:	cmp	r1, #0
   15414:	cmpne	r7, #0
   15418:	bne	15448 <__assert_fail@plt+0x3bf8>
   1541c:	mov	r0, r6
   15420:	pop	{r4, r5, r6, r7, fp, pc}
   15424:	ldr	r2, [r5, #28]
   15428:	mov	r0, r4
   1542c:	blx	r2
   15430:	cmp	r0, #0
   15434:	bne	1545c <__assert_fail@plt+0x3c0c>
   15438:	ldr	r7, [r7, #4]
   1543c:	cmp	r7, #0
   15440:	beq	1541c <__assert_fail@plt+0x3bcc>
   15444:	ldr	r1, [r7]
   15448:	cmp	r1, r4
   1544c:	bne	15424 <__assert_fail@plt+0x3bd4>
   15450:	mov	r6, r4
   15454:	mov	r0, r6
   15458:	pop	{r4, r5, r6, r7, fp, pc}
   1545c:	ldr	r6, [r7]
   15460:	mov	r0, r6
   15464:	pop	{r4, r5, r6, r7, fp, pc}
   15468:	bl	11814 <abort@plt>
   1546c:	push	{fp, lr}
   15470:	mov	fp, sp
   15474:	ldr	r1, [r0, #16]
   15478:	cmp	r1, #0
   1547c:	beq	1549c <__assert_fail@plt+0x3c4c>
   15480:	ldm	r0, {r1, r2}
   15484:	cmp	r1, r2
   15488:	bcs	154a4 <__assert_fail@plt+0x3c54>
   1548c:	ldr	r0, [r1], #8
   15490:	cmp	r0, #0
   15494:	beq	15484 <__assert_fail@plt+0x3c34>
   15498:	pop	{fp, pc}
   1549c:	mov	r0, #0
   154a0:	pop	{fp, pc}
   154a4:	bl	11814 <abort@plt>
   154a8:	push	{r4, r5, fp, lr}
   154ac:	add	fp, sp, #8
   154b0:	mov	r5, r1
   154b4:	ldr	r1, [r0, #8]
   154b8:	ldr	r2, [r0, #24]
   154bc:	mov	r4, r0
   154c0:	mov	r0, r5
   154c4:	blx	r2
   154c8:	ldr	r1, [r4, #8]
   154cc:	cmp	r0, r1
   154d0:	bcs	15534 <__assert_fail@plt+0x3ce4>
   154d4:	ldr	r1, [r4]
   154d8:	add	r2, r1, r0, lsl #3
   154dc:	ldr	r3, [r2]
   154e0:	ldr	r2, [r2, #4]
   154e4:	cmp	r3, r5
   154e8:	beq	154f8 <__assert_fail@plt+0x3ca8>
   154ec:	cmp	r2, #0
   154f0:	bne	154dc <__assert_fail@plt+0x3c8c>
   154f4:	b	15508 <__assert_fail@plt+0x3cb8>
   154f8:	cmp	r2, #0
   154fc:	beq	15508 <__assert_fail@plt+0x3cb8>
   15500:	ldr	r0, [r2]
   15504:	pop	{r4, r5, fp, pc}
   15508:	ldr	r2, [r4, #4]
   1550c:	add	r0, r1, r0, lsl #3
   15510:	add	r1, r0, #8
   15514:	cmp	r1, r2
   15518:	bcs	1552c <__assert_fail@plt+0x3cdc>
   1551c:	ldr	r0, [r1], #8
   15520:	cmp	r0, #0
   15524:	beq	15514 <__assert_fail@plt+0x3cc4>
   15528:	pop	{r4, r5, fp, pc}
   1552c:	mov	r0, #0
   15530:	pop	{r4, r5, fp, pc}
   15534:	bl	11814 <abort@plt>
   15538:	push	{r4, r5, fp, lr}
   1553c:	add	fp, sp, #8
   15540:	ldm	r0, {r5, lr}
   15544:	mov	ip, r0
   15548:	mov	r0, #0
   1554c:	cmp	r5, lr
   15550:	popcs	{r4, r5, fp, pc}
   15554:	mov	r0, #0
   15558:	b	1556c <__assert_fail@plt+0x3d1c>
   1555c:	ldr	lr, [ip, #4]
   15560:	add	r5, r5, #8
   15564:	cmp	r5, lr
   15568:	bcs	155a4 <__assert_fail@plt+0x3d54>
   1556c:	ldr	r3, [r5]
   15570:	cmp	r3, #0
   15574:	cmpne	r5, #0
   15578:	beq	15560 <__assert_fail@plt+0x3d10>
   1557c:	mov	r3, r5
   15580:	cmp	r0, r2
   15584:	bcs	155a4 <__assert_fail@plt+0x3d54>
   15588:	ldr	r4, [r3]
   1558c:	str	r4, [r1, r0, lsl #2]
   15590:	add	r0, r0, #1
   15594:	ldr	r3, [r3, #4]
   15598:	cmp	r3, #0
   1559c:	bne	15580 <__assert_fail@plt+0x3d30>
   155a0:	b	1555c <__assert_fail@plt+0x3d0c>
   155a4:	pop	{r4, r5, fp, pc}
   155a8:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   155ac:	add	fp, sp, #24
   155b0:	mov	r5, r1
   155b4:	ldr	r4, [r0]
   155b8:	ldr	r1, [r0, #4]
   155bc:	mov	r6, #0
   155c0:	cmp	r4, r1
   155c4:	bcs	15630 <__assert_fail@plt+0x3de0>
   155c8:	mov	r9, r2
   155cc:	mov	r8, r0
   155d0:	mov	r6, #0
   155d4:	b	155e8 <__assert_fail@plt+0x3d98>
   155d8:	ldr	r1, [r8, #4]
   155dc:	add	r4, r4, #8
   155e0:	cmp	r4, r1
   155e4:	bcs	15630 <__assert_fail@plt+0x3de0>
   155e8:	ldr	r0, [r4]
   155ec:	cmp	r0, #0
   155f0:	cmpne	r4, #0
   155f4:	beq	155dc <__assert_fail@plt+0x3d8c>
   155f8:	mov	r1, r9
   155fc:	blx	r5
   15600:	cmp	r0, #0
   15604:	beq	15630 <__assert_fail@plt+0x3de0>
   15608:	mov	r7, r4
   1560c:	ldr	r7, [r7, #4]
   15610:	add	r6, r6, #1
   15614:	cmp	r7, #0
   15618:	beq	155d8 <__assert_fail@plt+0x3d88>
   1561c:	ldr	r0, [r7]
   15620:	mov	r1, r9
   15624:	blx	r5
   15628:	cmp	r0, #0
   1562c:	bne	1560c <__assert_fail@plt+0x3dbc>
   15630:	mov	r0, r6
   15634:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   15638:	ldrb	r2, [r0]
   1563c:	cmp	r2, #0
   15640:	moveq	r0, #0
   15644:	bxeq	lr
   15648:	add	r3, r0, #1
   1564c:	mov	r0, #0
   15650:	rsb	r0, r0, r0, lsl #5
   15654:	uxtab	r0, r0, r2
   15658:	udiv	r2, r0, r1
   1565c:	mls	r0, r2, r1, r0
   15660:	ldrb	r2, [r3], #1
   15664:	cmp	r2, #0
   15668:	bne	15650 <__assert_fail@plt+0x3e00>
   1566c:	bx	lr
   15670:	movw	r1, #47496	; 0xb988
   15674:	movt	r1, #1
   15678:	vld1.32	{d16-d17}, [r1]!
   1567c:	ldr	r1, [r1]
   15680:	vst1.32	{d16-d17}, [r0]!
   15684:	str	r1, [r0]
   15688:	bx	lr
   1568c:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   15690:	add	fp, sp, #24
   15694:	movw	r9, #22708	; 0x58b4
   15698:	cmp	r3, #0
   1569c:	movw	r5, #22688	; 0x58a0
   156a0:	mov	r6, r0
   156a4:	mov	r0, #40	; 0x28
   156a8:	mov	r7, r1
   156ac:	movt	r9, #1
   156b0:	movne	r9, r3
   156b4:	cmp	r2, #0
   156b8:	movt	r5, #1
   156bc:	movne	r5, r2
   156c0:	bl	19bac <__assert_fail@plt+0x835c>
   156c4:	mov	r8, #0
   156c8:	cmp	r0, #0
   156cc:	beq	15888 <__assert_fail@plt+0x4038>
   156d0:	mov	r4, r0
   156d4:	movw	r0, #47496	; 0xb988
   156d8:	cmp	r7, #0
   156dc:	movt	r0, #1
   156e0:	moveq	r7, r0
   156e4:	cmp	r7, r0
   156e8:	str	r7, [r4, #20]
   156ec:	beq	15768 <__assert_fail@plt+0x3f18>
   156f0:	vldr	s2, [pc, #408]	; 15890 <__assert_fail@plt+0x4040>
   156f4:	vldr	s0, [r7, #8]
   156f8:	vcmpe.f32	s0, s2
   156fc:	vmrs	APSR_nzcv, fpscr
   15700:	ble	15814 <__assert_fail@plt+0x3fc4>
   15704:	vldr	s4, [pc, #392]	; 15894 <__assert_fail@plt+0x4044>
   15708:	vcmpe.f32	s0, s4
   1570c:	vmrs	APSR_nzcv, fpscr
   15710:	bpl	15814 <__assert_fail@plt+0x3fc4>
   15714:	vldr	s4, [pc, #380]	; 15898 <__assert_fail@plt+0x4048>
   15718:	vldr	s6, [r7, #12]
   1571c:	vcmpe.f32	s6, s4
   15720:	vmrs	APSR_nzcv, fpscr
   15724:	ble	15814 <__assert_fail@plt+0x3fc4>
   15728:	vldr	s4, [r7]
   1572c:	vcmpe.f32	s4, #0.0
   15730:	vmrs	APSR_nzcv, fpscr
   15734:	blt	15814 <__assert_fail@plt+0x3fc4>
   15738:	vadd.f32	s2, s4, s2
   1573c:	vcmpe.f32	s2, s0
   15740:	vmrs	APSR_nzcv, fpscr
   15744:	bpl	15814 <__assert_fail@plt+0x3fc4>
   15748:	vldr	s0, [r7, #4]
   1574c:	vmov.f32	s4, #112	; 0x3f800000  1.0
   15750:	vcmpe.f32	s0, s4
   15754:	vmrs	APSR_nzcv, fpscr
   15758:	bhi	15814 <__assert_fail@plt+0x3fc4>
   1575c:	vcmpe.f32	s2, s0
   15760:	vmrs	APSR_nzcv, fpscr
   15764:	bpl	15814 <__assert_fail@plt+0x3fc4>
   15768:	ldrb	r0, [r7, #16]
   1576c:	cmp	r0, #0
   15770:	bne	1579c <__assert_fail@plt+0x3f4c>
   15774:	vmov	s2, r6
   15778:	vldr	s0, [r7, #8]
   1577c:	vldr	s4, [pc, #280]	; 1589c <__assert_fail@plt+0x404c>
   15780:	vcvt.f32.u32	s2, s2
   15784:	vdiv.f32	s2, s2, s0
   15788:	vcvt.u32.f32	s0, s2
   1578c:	vcmpe.f32	s2, s4
   15790:	vmrs	APSR_nzcv, fpscr
   15794:	bge	15824 <__assert_fail@plt+0x3fd4>
   15798:	vmov	r6, s0
   1579c:	cmp	r6, #10
   157a0:	movls	r6, #10
   157a4:	orr	r0, r6, #1
   157a8:	cmn	r0, #1
   157ac:	beq	15824 <__assert_fail@plt+0x3fd4>
   157b0:	ldr	r6, [fp, #8]
   157b4:	mov	r1, #3
   157b8:	cmp	r0, #10
   157bc:	bcc	157f4 <__assert_fail@plt+0x3fa4>
   157c0:	mov	r1, #3
   157c4:	mov	r3, #9
   157c8:	mov	r2, #12
   157cc:	udiv	r7, r0, r1
   157d0:	mls	r7, r7, r1, r0
   157d4:	cmp	r7, #0
   157d8:	beq	157f4 <__assert_fail@plt+0x3fa4>
   157dc:	add	r3, r3, r2
   157e0:	add	r2, r2, #8
   157e4:	add	r1, r1, #2
   157e8:	add	r3, r3, #4
   157ec:	cmp	r3, r0
   157f0:	bcc	157cc <__assert_fail@plt+0x3f7c>
   157f4:	udiv	r2, r0, r1
   157f8:	mls	r1, r2, r1, r0
   157fc:	cmp	r1, #0
   15800:	bne	1581c <__assert_fail@plt+0x3fcc>
   15804:	add	r0, r0, #2
   15808:	cmn	r0, #1
   1580c:	bne	157b4 <__assert_fail@plt+0x3f64>
   15810:	b	15824 <__assert_fail@plt+0x3fd4>
   15814:	str	r0, [r4, #20]
   15818:	b	1582c <__assert_fail@plt+0x3fdc>
   1581c:	cmp	r0, #536870912	; 0x20000000
   15820:	bcc	1583c <__assert_fail@plt+0x3fec>
   15824:	mov	r0, #0
   15828:	str	r0, [r4, #8]
   1582c:	mov	r0, r4
   15830:	bl	1a1dc <__assert_fail@plt+0x898c>
   15834:	mov	r0, r8
   15838:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1583c:	cmp	r0, #0
   15840:	str	r0, [r4, #8]
   15844:	beq	1582c <__assert_fail@plt+0x3fdc>
   15848:	mov	r1, #8
   1584c:	bl	19b58 <__assert_fail@plt+0x8308>
   15850:	cmp	r0, #0
   15854:	str	r0, [r4]
   15858:	beq	1582c <__assert_fail@plt+0x3fdc>
   1585c:	mov	r1, #0
   15860:	str	r5, [r4, #24]
   15864:	str	r9, [r4, #28]
   15868:	str	r6, [r4, #32]
   1586c:	mov	r8, r4
   15870:	str	r1, [r4, #36]	; 0x24
   15874:	str	r1, [r4, #12]
   15878:	str	r1, [r4, #16]
   1587c:	ldr	r1, [r4, #8]
   15880:	add	r0, r0, r1, lsl #3
   15884:	str	r0, [r4, #4]
   15888:	mov	r0, r8
   1588c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   15890:	stclcc	12, cr12, [ip, #820]	; 0x334
   15894:	svccc	0x00666666
   15898:	svccc	0x008ccccd
   1589c:	svcmi	0x00800000
   158a0:	ror	r2, r0, #3
   158a4:	udiv	r2, r2, r1
   158a8:	mul	r1, r2, r1
   158ac:	rsb	r0, r1, r0, ror #3
   158b0:	bx	lr
   158b4:	sub	r0, r0, r1
   158b8:	clz	r0, r0
   158bc:	lsr	r0, r0, #5
   158c0:	bx	lr
   158c4:	push	{r4, r5, r6, r7, fp, lr}
   158c8:	add	fp, sp, #16
   158cc:	mov	r4, r0
   158d0:	ldr	r5, [r0]
   158d4:	ldr	r0, [r0, #4]
   158d8:	cmp	r5, r0
   158dc:	bcs	15980 <__assert_fail@plt+0x4130>
   158e0:	mov	r6, #0
   158e4:	b	15900 <__assert_fail@plt+0x40b0>
   158e8:	str	r6, [r5]
   158ec:	str	r6, [r5, #4]
   158f0:	ldr	r0, [r4, #4]
   158f4:	add	r5, r5, #8
   158f8:	cmp	r5, r0
   158fc:	bcs	15980 <__assert_fail@plt+0x4130>
   15900:	ldr	r1, [r5]
   15904:	cmp	r1, #0
   15908:	beq	158f4 <__assert_fail@plt+0x40a4>
   1590c:	ldr	r1, [r4, #32]
   15910:	ldr	r7, [r5, #4]
   15914:	cmp	r1, #0
   15918:	mov	r0, r1
   1591c:	movwne	r0, #1
   15920:	cmp	r7, #0
   15924:	bne	15968 <__assert_fail@plt+0x4118>
   15928:	cmp	r0, #0
   1592c:	beq	158e8 <__assert_fail@plt+0x4098>
   15930:	ldr	r0, [r5]
   15934:	blx	r1
   15938:	b	158e8 <__assert_fail@plt+0x4098>
   1593c:	str	r6, [r7]
   15940:	cmp	r1, #0
   15944:	ldr	r2, [r7, #4]
   15948:	ldr	r0, [r4, #36]	; 0x24
   1594c:	str	r0, [r7, #4]
   15950:	mov	r0, r1
   15954:	str	r7, [r4, #36]	; 0x24
   15958:	movwne	r0, #1
   1595c:	cmp	r2, #0
   15960:	mov	r7, r2
   15964:	beq	15928 <__assert_fail@plt+0x40d8>
   15968:	tst	r0, #1
   1596c:	beq	1593c <__assert_fail@plt+0x40ec>
   15970:	ldr	r0, [r7]
   15974:	blx	r1
   15978:	ldr	r1, [r4, #32]
   1597c:	b	1593c <__assert_fail@plt+0x40ec>
   15980:	mov	r0, #0
   15984:	str	r0, [r4, #12]
   15988:	str	r0, [r4, #16]
   1598c:	pop	{r4, r5, r6, r7, fp, pc}
   15990:	push	{r4, r5, r6, sl, fp, lr}
   15994:	add	fp, sp, #16
   15998:	mov	r4, r0
   1599c:	ldr	r0, [r0, #32]
   159a0:	cmp	r0, #0
   159a4:	beq	15a18 <__assert_fail@plt+0x41c8>
   159a8:	ldr	r0, [r4, #16]
   159ac:	cmp	r0, #0
   159b0:	beq	15a18 <__assert_fail@plt+0x41c8>
   159b4:	ldr	r5, [r4]
   159b8:	ldr	r1, [r4, #4]
   159bc:	cmp	r5, r1
   159c0:	bcc	159d8 <__assert_fail@plt+0x4188>
   159c4:	b	15a18 <__assert_fail@plt+0x41c8>
   159c8:	ldr	r1, [r4, #4]
   159cc:	add	r5, r5, #8
   159d0:	cmp	r5, r1
   159d4:	bcs	15a18 <__assert_fail@plt+0x41c8>
   159d8:	ldr	r0, [r5]
   159dc:	cmp	r0, #0
   159e0:	cmpne	r5, #0
   159e4:	beq	159cc <__assert_fail@plt+0x417c>
   159e8:	ldr	r1, [r4, #32]
   159ec:	blx	r1
   159f0:	ldr	r6, [r5, #4]
   159f4:	cmp	r6, #0
   159f8:	beq	159c8 <__assert_fail@plt+0x4178>
   159fc:	ldr	r1, [r4, #32]
   15a00:	ldr	r0, [r6]
   15a04:	blx	r1
   15a08:	ldr	r6, [r6, #4]
   15a0c:	cmp	r6, #0
   15a10:	bne	159fc <__assert_fail@plt+0x41ac>
   15a14:	b	159c8 <__assert_fail@plt+0x4178>
   15a18:	ldr	r5, [r4]
   15a1c:	ldr	r1, [r4, #4]
   15a20:	cmp	r5, r1
   15a24:	bcc	15a38 <__assert_fail@plt+0x41e8>
   15a28:	b	15a60 <__assert_fail@plt+0x4210>
   15a2c:	add	r5, r5, #8
   15a30:	cmp	r5, r1
   15a34:	bcs	15a60 <__assert_fail@plt+0x4210>
   15a38:	ldr	r0, [r5, #4]
   15a3c:	cmp	r0, #0
   15a40:	beq	15a2c <__assert_fail@plt+0x41dc>
   15a44:	ldr	r6, [r0, #4]
   15a48:	bl	1a1dc <__assert_fail@plt+0x898c>
   15a4c:	cmp	r6, #0
   15a50:	mov	r0, r6
   15a54:	bne	15a44 <__assert_fail@plt+0x41f4>
   15a58:	ldr	r1, [r4, #4]
   15a5c:	b	15a2c <__assert_fail@plt+0x41dc>
   15a60:	ldr	r0, [r4, #36]	; 0x24
   15a64:	cmp	r0, #0
   15a68:	beq	15a80 <__assert_fail@plt+0x4230>
   15a6c:	ldr	r5, [r0, #4]
   15a70:	bl	1a1dc <__assert_fail@plt+0x898c>
   15a74:	cmp	r5, #0
   15a78:	mov	r0, r5
   15a7c:	bne	15a6c <__assert_fail@plt+0x421c>
   15a80:	ldr	r0, [r4]
   15a84:	bl	1a1dc <__assert_fail@plt+0x898c>
   15a88:	mov	r0, r4
   15a8c:	pop	{r4, r5, r6, sl, fp, lr}
   15a90:	b	1a1dc <__assert_fail@plt+0x898c>
   15a94:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15a98:	add	fp, sp, #28
   15a9c:	sub	sp, sp, #44	; 0x2c
   15aa0:	mov	r7, r0
   15aa4:	mov	r4, r0
   15aa8:	ldr	r0, [r7, #20]!
   15aac:	ldrb	r2, [r0, #16]
   15ab0:	cmp	r2, #0
   15ab4:	bne	15ae4 <__assert_fail@plt+0x4294>
   15ab8:	vmov	s2, r1
   15abc:	vldr	s0, [r0, #8]
   15ac0:	vldr	s4, [pc, #564]	; 15cfc <__assert_fail@plt+0x44ac>
   15ac4:	mov	r5, #0
   15ac8:	vcvt.f32.u32	s2, s2
   15acc:	vdiv.f32	s2, s2, s0
   15ad0:	vcvt.u32.f32	s0, s2
   15ad4:	vcmpe.f32	s2, s4
   15ad8:	vmrs	APSR_nzcv, fpscr
   15adc:	bge	15cec <__assert_fail@plt+0x449c>
   15ae0:	vmov	r1, s0
   15ae4:	cmp	r1, #10
   15ae8:	mov	r5, #0
   15aec:	movls	r1, #10
   15af0:	orr	r6, r1, #1
   15af4:	cmn	r6, #1
   15af8:	beq	15cec <__assert_fail@plt+0x449c>
   15afc:	mov	r0, #3
   15b00:	cmp	r6, #10
   15b04:	bcc	15b3c <__assert_fail@plt+0x42ec>
   15b08:	mov	r0, #3
   15b0c:	mov	r2, #9
   15b10:	mov	r1, #12
   15b14:	udiv	r3, r6, r0
   15b18:	mls	r3, r3, r0, r6
   15b1c:	cmp	r3, #0
   15b20:	beq	15b3c <__assert_fail@plt+0x42ec>
   15b24:	add	r2, r2, r1
   15b28:	add	r1, r1, #8
   15b2c:	add	r0, r0, #2
   15b30:	add	r2, r2, #4
   15b34:	cmp	r2, r6
   15b38:	bcc	15b14 <__assert_fail@plt+0x42c4>
   15b3c:	udiv	r1, r6, r0
   15b40:	mls	r0, r1, r0, r6
   15b44:	cmp	r0, #0
   15b48:	bne	15b5c <__assert_fail@plt+0x430c>
   15b4c:	add	r6, r6, #2
   15b50:	cmn	r6, #1
   15b54:	bne	15afc <__assert_fail@plt+0x42ac>
   15b58:	b	15cec <__assert_fail@plt+0x449c>
   15b5c:	sub	r0, r6, #1
   15b60:	cmn	r0, #-536870910	; 0xe0000002
   15b64:	bhi	15cec <__assert_fail@plt+0x449c>
   15b68:	ldr	r0, [r4, #8]
   15b6c:	cmp	r6, r0
   15b70:	bne	15b7c <__assert_fail@plt+0x432c>
   15b74:	mov	r5, #1
   15b78:	b	15cec <__assert_fail@plt+0x449c>
   15b7c:	mov	r0, r6
   15b80:	mov	r1, #8
   15b84:	bl	19b58 <__assert_fail@plt+0x8308>
   15b88:	cmp	r0, #0
   15b8c:	str	r0, [sp, #4]
   15b90:	beq	15cec <__assert_fail@plt+0x449c>
   15b94:	add	r0, r0, r6, lsl #3
   15b98:	mov	r1, #0
   15b9c:	add	r5, sp, #4
   15ba0:	mov	sl, r4
   15ba4:	mov	r2, #0
   15ba8:	str	r1, [sp, #20]
   15bac:	str	r1, [sp, #16]
   15bb0:	str	r6, [sp, #12]
   15bb4:	mov	r1, r4
   15bb8:	str	r0, [sp, #8]
   15bbc:	add	r0, r5, #20
   15bc0:	vld1.32	{d16-d17}, [r7]
   15bc4:	vst1.32	{d16-d17}, [r0]
   15bc8:	ldr	r0, [sl, #36]!	; 0x24
   15bcc:	str	r0, [sp, #40]	; 0x28
   15bd0:	mov	r0, r5
   15bd4:	bl	15d00 <__assert_fail@plt+0x44b0>
   15bd8:	cmp	r0, #0
   15bdc:	beq	15c04 <__assert_fail@plt+0x43b4>
   15be0:	ldr	r0, [r4]
   15be4:	bl	1a1dc <__assert_fail@plt+0x898c>
   15be8:	mov	r0, #36	; 0x24
   15bec:	vld1.32	{d16-d17}, [r5], r0
   15bf0:	vst1.32	{d16-d17}, [r4], r0
   15bf4:	ldr	r0, [r5]
   15bf8:	mov	r5, #1
   15bfc:	str	r0, [r4]
   15c00:	b	15cec <__assert_fail@plt+0x449c>
   15c04:	ldr	r0, [sp, #40]	; 0x28
   15c08:	str	r0, [sl]
   15c0c:	ldr	r0, [sp, #8]
   15c10:	ldr	r8, [sp, #4]
   15c14:	cmp	r8, r0
   15c18:	str	r0, [sp]
   15c1c:	bcs	15cc8 <__assert_fail@plt+0x4478>
   15c20:	mov	r9, #0
   15c24:	b	15c3c <__assert_fail@plt+0x43ec>
   15c28:	str	r9, [r8, #4]
   15c2c:	ldr	r0, [sp]
   15c30:	add	r8, r8, #8
   15c34:	cmp	r8, r0
   15c38:	bcs	15cc8 <__assert_fail@plt+0x4478>
   15c3c:	ldr	r0, [r8]
   15c40:	cmp	r0, #0
   15c44:	beq	15c2c <__assert_fail@plt+0x43dc>
   15c48:	ldr	r6, [r8, #4]
   15c4c:	cmp	r6, #0
   15c50:	beq	15c28 <__assert_fail@plt+0x43d8>
   15c54:	ldr	r1, [r4, #8]
   15c58:	b	15c7c <__assert_fail@plt+0x442c>
   15c5c:	add	r0, r3, r0, lsl #3
   15c60:	add	r0, r0, #4
   15c64:	ldr	r3, [r0]
   15c68:	cmp	r2, #0
   15c6c:	str	r3, [r6, #4]
   15c70:	str	r6, [r0]
   15c74:	mov	r6, r2
   15c78:	beq	15c28 <__assert_fail@plt+0x43d8>
   15c7c:	ldr	r5, [r6]
   15c80:	ldr	r2, [r4, #24]
   15c84:	mov	r0, r5
   15c88:	blx	r2
   15c8c:	ldr	r1, [r4, #8]
   15c90:	cmp	r0, r1
   15c94:	bcs	15cf8 <__assert_fail@plt+0x44a8>
   15c98:	ldr	r3, [r4]
   15c9c:	ldr	r2, [r6, #4]
   15ca0:	ldr	r7, [r3, r0, lsl #3]
   15ca4:	cmp	r7, #0
   15ca8:	bne	15c5c <__assert_fail@plt+0x440c>
   15cac:	str	r5, [r3, r0, lsl #3]
   15cb0:	ldr	r0, [r4, #12]
   15cb4:	add	r0, r0, #1
   15cb8:	str	r0, [r4, #12]
   15cbc:	mov	r0, sl
   15cc0:	str	r9, [r6]
   15cc4:	b	15c64 <__assert_fail@plt+0x4414>
   15cc8:	add	r1, sp, #4
   15ccc:	mov	r0, r4
   15cd0:	mov	r2, #0
   15cd4:	mov	r5, #0
   15cd8:	bl	15d00 <__assert_fail@plt+0x44b0>
   15cdc:	cmp	r0, #0
   15ce0:	beq	15cf8 <__assert_fail@plt+0x44a8>
   15ce4:	ldr	r0, [sp, #4]
   15ce8:	bl	1a1dc <__assert_fail@plt+0x898c>
   15cec:	mov	r0, r5
   15cf0:	sub	sp, fp, #28
   15cf4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15cf8:	bl	11814 <abort@plt>
   15cfc:	svcmi	0x00800000
   15d00:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15d04:	add	fp, sp, #28
   15d08:	sub	sp, sp, #12
   15d0c:	ldr	sl, [r1]
   15d10:	str	r1, [sp, #8]
   15d14:	ldr	r1, [r1, #4]
   15d18:	mov	r7, r0
   15d1c:	mov	r0, #1
   15d20:	str	r2, [sp, #4]
   15d24:	cmp	sl, r1
   15d28:	bcs	15e84 <__assert_fail@plt+0x4634>
   15d2c:	add	r8, r7, #36	; 0x24
   15d30:	mov	r9, #0
   15d34:	b	15d70 <__assert_fail@plt+0x4520>
   15d38:	str	r4, [r6, r5, lsl #3]
   15d3c:	ldr	r0, [r7, #12]
   15d40:	add	r0, r0, #1
   15d44:	str	r0, [r7, #12]
   15d48:	ldr	r1, [sp, #8]
   15d4c:	str	r9, [sl]
   15d50:	ldr	r0, [r1, #12]
   15d54:	sub	r0, r0, #1
   15d58:	str	r0, [r1, #12]
   15d5c:	ldr	r0, [sp, #8]
   15d60:	add	sl, sl, #8
   15d64:	ldr	r0, [r0, #4]
   15d68:	cmp	sl, r0
   15d6c:	bcs	15e80 <__assert_fail@plt+0x4630>
   15d70:	ldr	r4, [sl]
   15d74:	cmp	r4, #0
   15d78:	beq	15d5c <__assert_fail@plt+0x450c>
   15d7c:	ldr	r5, [sl, #4]
   15d80:	cmp	r5, #0
   15d84:	beq	15e00 <__assert_fail@plt+0x45b0>
   15d88:	ldr	r1, [r7, #8]
   15d8c:	b	15dc0 <__assert_fail@plt+0x4570>
   15d90:	str	r4, [r3, r0, lsl #3]
   15d94:	ldr	r0, [r7, #12]
   15d98:	add	r0, r0, #1
   15d9c:	str	r0, [r7, #12]
   15da0:	mov	r0, r8
   15da4:	str	r9, [r5]
   15da8:	ldr	r3, [r0]
   15dac:	cmp	r2, #0
   15db0:	str	r3, [r5, #4]
   15db4:	str	r5, [r0]
   15db8:	mov	r5, r2
   15dbc:	beq	15dfc <__assert_fail@plt+0x45ac>
   15dc0:	ldr	r4, [r5]
   15dc4:	ldr	r2, [r7, #24]
   15dc8:	mov	r0, r4
   15dcc:	blx	r2
   15dd0:	ldr	r1, [r7, #8]
   15dd4:	cmp	r0, r1
   15dd8:	bcs	15e98 <__assert_fail@plt+0x4648>
   15ddc:	ldr	r3, [r7]
   15de0:	ldr	r2, [r5, #4]
   15de4:	ldr	r6, [r3, r0, lsl #3]
   15de8:	cmp	r6, #0
   15dec:	beq	15d90 <__assert_fail@plt+0x4540>
   15df0:	add	r0, r3, r0, lsl #3
   15df4:	add	r0, r0, #4
   15df8:	b	15da8 <__assert_fail@plt+0x4558>
   15dfc:	ldr	r4, [sl]
   15e00:	ldr	r0, [sp, #4]
   15e04:	str	r9, [sl, #4]
   15e08:	cmp	r0, #0
   15e0c:	bne	15d5c <__assert_fail@plt+0x450c>
   15e10:	ldr	r1, [r7, #8]
   15e14:	ldr	r2, [r7, #24]
   15e18:	mov	r0, r4
   15e1c:	blx	r2
   15e20:	mov	r5, r0
   15e24:	ldr	r0, [r7, #8]
   15e28:	cmp	r5, r0
   15e2c:	bcs	15e98 <__assert_fail@plt+0x4648>
   15e30:	ldr	r6, [r7]
   15e34:	ldr	r0, [r6, r5, lsl #3]
   15e38:	cmp	r0, #0
   15e3c:	beq	15d38 <__assert_fail@plt+0x44e8>
   15e40:	ldr	r0, [r8]
   15e44:	cmp	r0, #0
   15e48:	beq	15e58 <__assert_fail@plt+0x4608>
   15e4c:	ldr	r1, [r0, #4]
   15e50:	str	r1, [r8]
   15e54:	b	15e68 <__assert_fail@plt+0x4618>
   15e58:	mov	r0, #8
   15e5c:	bl	19bac <__assert_fail@plt+0x835c>
   15e60:	cmp	r0, #0
   15e64:	beq	15e8c <__assert_fail@plt+0x463c>
   15e68:	add	r1, r6, r5, lsl #3
   15e6c:	str	r4, [r0]
   15e70:	ldr	r2, [r1, #4]
   15e74:	str	r2, [r0, #4]
   15e78:	str	r0, [r1, #4]
   15e7c:	b	15d48 <__assert_fail@plt+0x44f8>
   15e80:	mov	r0, #1
   15e84:	sub	sp, fp, #28
   15e88:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15e8c:	mov	r0, #0
   15e90:	sub	sp, fp, #28
   15e94:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15e98:	bl	11814 <abort@plt>
   15e9c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15ea0:	add	fp, sp, #28
   15ea4:	sub	sp, sp, #4
   15ea8:	cmp	r1, #0
   15eac:	beq	161c8 <__assert_fail@plt+0x4978>
   15eb0:	mov	r8, r2
   15eb4:	mov	sl, r1
   15eb8:	ldr	r1, [r0, #8]
   15ebc:	ldr	r2, [r0, #24]
   15ec0:	mov	r4, r0
   15ec4:	mov	r0, sl
   15ec8:	blx	r2
   15ecc:	mov	r7, r0
   15ed0:	ldr	r0, [r4, #8]
   15ed4:	cmp	r7, r0
   15ed8:	bcs	161c8 <__assert_fail@plt+0x4978>
   15edc:	ldr	r5, [r4]
   15ee0:	mov	r9, r5
   15ee4:	ldr	r1, [r9, r7, lsl #3]!
   15ee8:	cmp	r1, #0
   15eec:	beq	15f78 <__assert_fail@plt+0x4728>
   15ef0:	cmp	r1, sl
   15ef4:	beq	15f20 <__assert_fail@plt+0x46d0>
   15ef8:	ldr	r2, [r4, #28]
   15efc:	mov	r0, sl
   15f00:	blx	r2
   15f04:	cmp	r0, #0
   15f08:	mov	r6, r9
   15f0c:	beq	15f34 <__assert_fail@plt+0x46e4>
   15f10:	ldr	r0, [r6]
   15f14:	cmp	r0, #0
   15f18:	bne	15f24 <__assert_fail@plt+0x46d4>
   15f1c:	b	15f78 <__assert_fail@plt+0x4728>
   15f20:	mov	r0, sl
   15f24:	cmp	r8, #0
   15f28:	mov	r7, #0
   15f2c:	strne	r0, [r8]
   15f30:	b	16164 <__assert_fail@plt+0x4914>
   15f34:	add	r6, r5, r7, lsl #3
   15f38:	ldr	r0, [r6, #4]!
   15f3c:	cmp	r0, #0
   15f40:	beq	15f78 <__assert_fail@plt+0x4728>
   15f44:	ldr	r1, [r0]
   15f48:	cmp	r1, sl
   15f4c:	beq	15f6c <__assert_fail@plt+0x471c>
   15f50:	ldr	r2, [r4, #28]
   15f54:	mov	r0, sl
   15f58:	blx	r2
   15f5c:	ldr	r6, [r6]
   15f60:	cmp	r0, #0
   15f64:	beq	15f38 <__assert_fail@plt+0x46e8>
   15f68:	b	15f10 <__assert_fail@plt+0x46c0>
   15f6c:	mov	r0, sl
   15f70:	cmp	r0, #0
   15f74:	bne	15f24 <__assert_fail@plt+0x46d4>
   15f78:	vldr	s0, [r4, #8]
   15f7c:	vldr	s2, [r4, #12]
   15f80:	ldr	r0, [r4, #20]
   15f84:	vcvt.f32.u32	s0, s0
   15f88:	vcvt.f32.u32	s4, s2
   15f8c:	vldr	s2, [r0, #8]
   15f90:	vmul.f32	s6, s2, s0
   15f94:	vcmpe.f32	s6, s4
   15f98:	vmrs	APSR_nzcv, fpscr
   15f9c:	bpl	160f0 <__assert_fail@plt+0x48a0>
   15fa0:	movw	r1, #47496	; 0xb988
   15fa4:	movt	r1, #1
   15fa8:	cmp	r0, r1
   15fac:	beq	16038 <__assert_fail@plt+0x47e8>
   15fb0:	vldr	s6, [pc, #532]	; 161cc <__assert_fail@plt+0x497c>
   15fb4:	vcmpe.f32	s2, s6
   15fb8:	vmrs	APSR_nzcv, fpscr
   15fbc:	ble	16024 <__assert_fail@plt+0x47d4>
   15fc0:	vldr	s8, [pc, #520]	; 161d0 <__assert_fail@plt+0x4980>
   15fc4:	vcmpe.f32	s2, s8
   15fc8:	vmrs	APSR_nzcv, fpscr
   15fcc:	bpl	16024 <__assert_fail@plt+0x47d4>
   15fd0:	vldr	s8, [pc, #508]	; 161d4 <__assert_fail@plt+0x4984>
   15fd4:	vldr	s10, [r0, #12]
   15fd8:	vcmpe.f32	s10, s8
   15fdc:	vmrs	APSR_nzcv, fpscr
   15fe0:	ble	16024 <__assert_fail@plt+0x47d4>
   15fe4:	vldr	s8, [r0]
   15fe8:	vcmpe.f32	s8, #0.0
   15fec:	vmrs	APSR_nzcv, fpscr
   15ff0:	blt	16024 <__assert_fail@plt+0x47d4>
   15ff4:	vadd.f32	s6, s8, s6
   15ff8:	vcmpe.f32	s6, s2
   15ffc:	vmrs	APSR_nzcv, fpscr
   16000:	bpl	16024 <__assert_fail@plt+0x47d4>
   16004:	vldr	s8, [r0, #4]
   16008:	vmov.f32	s10, #112	; 0x3f800000  1.0
   1600c:	vcmpe.f32	s8, s10
   16010:	vmrs	APSR_nzcv, fpscr
   16014:	bhi	16024 <__assert_fail@plt+0x47d4>
   16018:	vcmpe.f32	s6, s8
   1601c:	vmrs	APSR_nzcv, fpscr
   16020:	bmi	1603c <__assert_fail@plt+0x47ec>
   16024:	vldr	s2, [pc, #428]	; 161d8 <__assert_fail@plt+0x4988>
   16028:	movw	r0, #47496	; 0xb988
   1602c:	movt	r0, #1
   16030:	str	r0, [r4, #20]
   16034:	b	1603c <__assert_fail@plt+0x47ec>
   16038:	mov	r0, r1
   1603c:	vmul.f32	s6, s2, s0
   16040:	vcmpe.f32	s6, s4
   16044:	vmrs	APSR_nzcv, fpscr
   16048:	bpl	160f0 <__assert_fail@plt+0x48a0>
   1604c:	vldr	s4, [r0, #12]
   16050:	ldrb	r0, [r0, #16]
   16054:	mvn	r7, #0
   16058:	cmp	r0, #0
   1605c:	vmul.f32	s0, s4, s0
   16060:	vldr	s4, [pc, #372]	; 161dc <__assert_fail@plt+0x498c>
   16064:	vmul.f32	s2, s2, s0
   16068:	vseleq.f32	s0, s2, s0
   1606c:	vcmpe.f32	s0, s4
   16070:	vmrs	APSR_nzcv, fpscr
   16074:	bge	16164 <__assert_fail@plt+0x4914>
   16078:	vcvt.u32.f32	s0, s0
   1607c:	mov	r0, r4
   16080:	vmov	r1, s0
   16084:	bl	15a94 <__assert_fail@plt+0x4244>
   16088:	cmp	r0, #0
   1608c:	beq	16164 <__assert_fail@plt+0x4914>
   16090:	ldr	r1, [r4, #8]
   16094:	ldr	r2, [r4, #24]
   16098:	mov	r0, sl
   1609c:	blx	r2
   160a0:	mov	r7, r0
   160a4:	ldr	r0, [r4, #8]
   160a8:	cmp	r7, r0
   160ac:	bcs	161c8 <__assert_fail@plt+0x4978>
   160b0:	ldr	r5, [r4]
   160b4:	mov	r9, r5
   160b8:	ldr	r1, [r9, r7, lsl #3]!
   160bc:	cmp	r1, #0
   160c0:	beq	160f0 <__assert_fail@plt+0x48a0>
   160c4:	cmp	r1, sl
   160c8:	mov	r0, sl
   160cc:	beq	160e8 <__assert_fail@plt+0x4898>
   160d0:	ldr	r2, [r4, #28]
   160d4:	mov	r0, sl
   160d8:	blx	r2
   160dc:	cmp	r0, #0
   160e0:	beq	16178 <__assert_fail@plt+0x4928>
   160e4:	ldr	r0, [r9]
   160e8:	cmp	r0, #0
   160ec:	bne	161c8 <__assert_fail@plt+0x4978>
   160f0:	ldr	r0, [r9]
   160f4:	cmp	r0, #0
   160f8:	beq	16114 <__assert_fail@plt+0x48c4>
   160fc:	ldr	r0, [r4, #36]	; 0x24
   16100:	cmp	r0, #0
   16104:	beq	16134 <__assert_fail@plt+0x48e4>
   16108:	ldr	r1, [r0, #4]
   1610c:	str	r1, [r4, #36]	; 0x24
   16110:	b	16144 <__assert_fail@plt+0x48f4>
   16114:	str	sl, [r9]
   16118:	ldr	r0, [r4, #12]
   1611c:	ldr	r1, [r4, #16]
   16120:	add	r0, r0, #1
   16124:	add	r1, r1, #1
   16128:	str	r0, [r4, #12]
   1612c:	str	r1, [r4, #16]
   16130:	b	16160 <__assert_fail@plt+0x4910>
   16134:	mov	r0, #8
   16138:	bl	19bac <__assert_fail@plt+0x835c>
   1613c:	cmp	r0, #0
   16140:	beq	16170 <__assert_fail@plt+0x4920>
   16144:	str	sl, [r0]
   16148:	ldr	r1, [r9, #4]
   1614c:	str	r1, [r0, #4]
   16150:	str	r0, [r9, #4]
   16154:	ldr	r0, [r4, #16]
   16158:	add	r0, r0, #1
   1615c:	str	r0, [r4, #16]
   16160:	mov	r7, #1
   16164:	mov	r0, r7
   16168:	sub	sp, fp, #28
   1616c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16170:	mvn	r7, #0
   16174:	b	16164 <__assert_fail@plt+0x4914>
   16178:	add	r6, r5, r7, lsl #3
   1617c:	ldr	r0, [r6, #4]!
   16180:	cmp	r0, #0
   16184:	beq	160f0 <__assert_fail@plt+0x48a0>
   16188:	ldr	r1, [r0]
   1618c:	cmp	r1, sl
   16190:	beq	161bc <__assert_fail@plt+0x496c>
   16194:	ldr	r2, [r4, #28]
   16198:	mov	r0, sl
   1619c:	blx	r2
   161a0:	ldr	r6, [r6]
   161a4:	cmp	r0, #0
   161a8:	beq	1617c <__assert_fail@plt+0x492c>
   161ac:	ldr	r0, [r6]
   161b0:	cmp	r0, #0
   161b4:	beq	160f0 <__assert_fail@plt+0x48a0>
   161b8:	b	161c8 <__assert_fail@plt+0x4978>
   161bc:	mov	r0, sl
   161c0:	cmp	r0, #0
   161c4:	beq	160f0 <__assert_fail@plt+0x48a0>
   161c8:	bl	11814 <abort@plt>
   161cc:	stclcc	12, cr12, [ip, #820]	; 0x334
   161d0:	svccc	0x00666666
   161d4:	svccc	0x008ccccd
   161d8:	svccc	0x004ccccd
   161dc:	svcmi	0x00800000
   161e0:	push	{r4, sl, fp, lr}
   161e4:	add	fp, sp, #8
   161e8:	sub	sp, sp, #8
   161ec:	add	r2, sp, #4
   161f0:	mov	r4, r1
   161f4:	bl	15e9c <__assert_fail@plt+0x464c>
   161f8:	cmn	r0, #1
   161fc:	beq	16210 <__assert_fail@plt+0x49c0>
   16200:	ldr	r1, [sp, #4]
   16204:	cmp	r0, #0
   16208:	moveq	r4, r1
   1620c:	b	16214 <__assert_fail@plt+0x49c4>
   16210:	mov	r4, #0
   16214:	mov	r0, r4
   16218:	sub	sp, fp, #8
   1621c:	pop	{r4, sl, fp, pc}
   16220:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   16224:	add	fp, sp, #24
   16228:	mov	r9, r1
   1622c:	ldr	r1, [r0, #8]
   16230:	ldr	r2, [r0, #24]
   16234:	mov	r5, r0
   16238:	mov	r0, r9
   1623c:	blx	r2
   16240:	mov	r7, r0
   16244:	ldr	r0, [r5, #8]
   16248:	cmp	r7, r0
   1624c:	bcs	164b0 <__assert_fail@plt+0x4c60>
   16250:	ldr	r6, [r5]
   16254:	mov	r8, #0
   16258:	mov	r4, r6
   1625c:	ldr	r1, [r4, r7, lsl #3]!
   16260:	cmp	r1, #0
   16264:	beq	16318 <__assert_fail@plt+0x4ac8>
   16268:	cmp	r1, r9
   1626c:	beq	16288 <__assert_fail@plt+0x4a38>
   16270:	ldr	r2, [r5, #28]
   16274:	mov	r0, r9
   16278:	blx	r2
   1627c:	cmp	r0, #0
   16280:	beq	162c0 <__assert_fail@plt+0x4a70>
   16284:	ldr	r9, [r4]
   16288:	add	r0, r6, r7, lsl #3
   1628c:	ldr	r0, [r0, #4]
   16290:	cmp	r0, #0
   16294:	beq	16308 <__assert_fail@plt+0x4ab8>
   16298:	ldm	r0, {r1, r2}
   1629c:	stm	r4, {r1, r2}
   162a0:	mov	r1, #0
   162a4:	str	r1, [r0]
   162a8:	ldr	r1, [r5, #36]	; 0x24
   162ac:	str	r1, [r0, #4]
   162b0:	str	r0, [r5, #36]	; 0x24
   162b4:	cmp	r9, #0
   162b8:	bne	16350 <__assert_fail@plt+0x4b00>
   162bc:	b	16318 <__assert_fail@plt+0x4ac8>
   162c0:	add	r7, r6, r7, lsl #3
   162c4:	ldr	r0, [r7, #4]!
   162c8:	cmp	r0, #0
   162cc:	beq	16318 <__assert_fail@plt+0x4ac8>
   162d0:	ldr	r1, [r0]
   162d4:	cmp	r1, r9
   162d8:	beq	16320 <__assert_fail@plt+0x4ad0>
   162dc:	ldr	r2, [r5, #28]
   162e0:	mov	r0, r9
   162e4:	blx	r2
   162e8:	ldr	r1, [r7]
   162ec:	cmp	r0, #0
   162f0:	bne	16328 <__assert_fail@plt+0x4ad8>
   162f4:	ldr	r0, [r1, #4]!
   162f8:	mov	r7, r1
   162fc:	cmp	r0, #0
   16300:	bne	162d0 <__assert_fail@plt+0x4a80>
   16304:	b	16318 <__assert_fail@plt+0x4ac8>
   16308:	mov	r0, #0
   1630c:	str	r0, [r4]
   16310:	cmp	r9, #0
   16314:	bne	16350 <__assert_fail@plt+0x4b00>
   16318:	mov	r0, r8
   1631c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   16320:	mov	r1, r0
   16324:	b	1632c <__assert_fail@plt+0x4adc>
   16328:	ldr	r9, [r1]
   1632c:	ldr	r0, [r1, #4]
   16330:	str	r0, [r7]
   16334:	mov	r0, #0
   16338:	str	r0, [r1]
   1633c:	ldr	r0, [r5, #36]	; 0x24
   16340:	str	r0, [r1, #4]
   16344:	str	r1, [r5, #36]	; 0x24
   16348:	cmp	r9, #0
   1634c:	beq	16318 <__assert_fail@plt+0x4ac8>
   16350:	ldr	r0, [r5, #16]
   16354:	sub	r0, r0, #1
   16358:	str	r0, [r5, #16]
   1635c:	ldr	r0, [r4]
   16360:	cmp	r0, #0
   16364:	bne	164a4 <__assert_fail@plt+0x4c54>
   16368:	ldr	r0, [r5, #12]
   1636c:	vldr	s0, [r5, #8]
   16370:	sub	r1, r0, #1
   16374:	str	r1, [r5, #12]
   16378:	vmov	s2, r1
   1637c:	ldr	r0, [r5, #20]
   16380:	vcvt.f32.u32	s0, s0
   16384:	vcvt.f32.u32	s2, s2
   16388:	vldr	s4, [r0]
   1638c:	vmul.f32	s6, s4, s0
   16390:	vcmpe.f32	s6, s2
   16394:	vmrs	APSR_nzcv, fpscr
   16398:	ble	164a4 <__assert_fail@plt+0x4c54>
   1639c:	movw	r1, #47496	; 0xb988
   163a0:	movt	r1, #1
   163a4:	cmp	r0, r1
   163a8:	beq	16434 <__assert_fail@plt+0x4be4>
   163ac:	vldr	s8, [pc, #256]	; 164b4 <__assert_fail@plt+0x4c64>
   163b0:	vldr	s6, [r0, #8]
   163b4:	vcmpe.f32	s6, s8
   163b8:	vmrs	APSR_nzcv, fpscr
   163bc:	ble	16420 <__assert_fail@plt+0x4bd0>
   163c0:	vldr	s10, [pc, #240]	; 164b8 <__assert_fail@plt+0x4c68>
   163c4:	vcmpe.f32	s6, s10
   163c8:	vmrs	APSR_nzcv, fpscr
   163cc:	bpl	16420 <__assert_fail@plt+0x4bd0>
   163d0:	vcmpe.f32	s4, #0.0
   163d4:	vmrs	APSR_nzcv, fpscr
   163d8:	blt	16420 <__assert_fail@plt+0x4bd0>
   163dc:	vldr	s10, [r0, #12]
   163e0:	vldr	s12, [pc, #212]	; 164bc <__assert_fail@plt+0x4c6c>
   163e4:	vcmpe.f32	s10, s12
   163e8:	vmrs	APSR_nzcv, fpscr
   163ec:	ble	16420 <__assert_fail@plt+0x4bd0>
   163f0:	vadd.f32	s8, s4, s8
   163f4:	vcmpe.f32	s8, s6
   163f8:	vmrs	APSR_nzcv, fpscr
   163fc:	bpl	16420 <__assert_fail@plt+0x4bd0>
   16400:	vldr	s6, [r0, #4]
   16404:	vmov.f32	s10, #112	; 0x3f800000  1.0
   16408:	vcmpe.f32	s6, s10
   1640c:	vmrs	APSR_nzcv, fpscr
   16410:	bhi	16420 <__assert_fail@plt+0x4bd0>
   16414:	vcmpe.f32	s8, s6
   16418:	vmrs	APSR_nzcv, fpscr
   1641c:	bmi	16438 <__assert_fail@plt+0x4be8>
   16420:	vldr	s4, [pc, #152]	; 164c0 <__assert_fail@plt+0x4c70>
   16424:	movw	r0, #47496	; 0xb988
   16428:	movt	r0, #1
   1642c:	str	r0, [r5, #20]
   16430:	b	16438 <__assert_fail@plt+0x4be8>
   16434:	mov	r0, r1
   16438:	vmul.f32	s4, s4, s0
   1643c:	vcmpe.f32	s4, s2
   16440:	vmrs	APSR_nzcv, fpscr
   16444:	ble	164a4 <__assert_fail@plt+0x4c54>
   16448:	vldr	s2, [r0, #4]
   1644c:	ldrb	r1, [r0, #16]
   16450:	cmp	r1, #0
   16454:	vmul.f32	s0, s2, s0
   16458:	bne	16464 <__assert_fail@plt+0x4c14>
   1645c:	vldr	s2, [r0, #8]
   16460:	vmul.f32	s0, s0, s2
   16464:	vcvt.u32.f32	s0, s0
   16468:	mov	r0, r5
   1646c:	vmov	r1, s0
   16470:	bl	15a94 <__assert_fail@plt+0x4244>
   16474:	cmp	r0, #0
   16478:	bne	164a4 <__assert_fail@plt+0x4c54>
   1647c:	ldr	r0, [r5, #36]	; 0x24
   16480:	cmp	r0, #0
   16484:	beq	1649c <__assert_fail@plt+0x4c4c>
   16488:	ldr	r4, [r0, #4]
   1648c:	bl	1a1dc <__assert_fail@plt+0x898c>
   16490:	cmp	r4, #0
   16494:	mov	r0, r4
   16498:	bne	16488 <__assert_fail@plt+0x4c38>
   1649c:	mov	r0, #0
   164a0:	str	r0, [r5, #36]	; 0x24
   164a4:	mov	r8, r9
   164a8:	mov	r0, r8
   164ac:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   164b0:	bl	11814 <abort@plt>
   164b4:	stclcc	12, cr12, [ip, #820]	; 0x334
   164b8:	svccc	0x00666666
   164bc:	svccc	0x008ccccd
   164c0:	andeq	r0, r0, r0
   164c4:	b	16220 <__assert_fail@plt+0x49d0>
   164c8:	vdup.32	q8, r1
   164cc:	mov	r2, #0
   164d0:	str	r2, [r0, #20]
   164d4:	str	r2, [r0, #24]
   164d8:	mov	r2, #1
   164dc:	strb	r2, [r0, #28]
   164e0:	vst1.32	{d16-d17}, [r0]!
   164e4:	str	r1, [r0]
   164e8:	bx	lr
   164ec:	ldrb	r0, [r0, #28]
   164f0:	bx	lr
   164f4:	push	{fp, lr}
   164f8:	mov	fp, sp
   164fc:	ldrb	r3, [r0, #28]
   16500:	ldr	r2, [r0, #20]
   16504:	eor	lr, r3, #1
   16508:	add	r2, r2, lr
   1650c:	and	r3, r2, #3
   16510:	ldr	ip, [r0, r3, lsl #2]
   16514:	str	r1, [r0, r3, lsl #2]
   16518:	str	r3, [r0, #20]
   1651c:	ldr	r1, [r0, #24]
   16520:	cmp	r3, r1
   16524:	addeq	r1, r2, lr
   16528:	andeq	r1, r1, #3
   1652c:	streq	r1, [r0, #24]
   16530:	mov	r1, #0
   16534:	strb	r1, [r0, #28]
   16538:	mov	r0, ip
   1653c:	pop	{fp, pc}
   16540:	push	{fp, lr}
   16544:	mov	fp, sp
   16548:	ldrb	r1, [r0, #28]
   1654c:	cmp	r1, #0
   16550:	bne	1658c <__assert_fail@plt+0x4d3c>
   16554:	ldr	r3, [r0, #20]
   16558:	ldr	r2, [r0, #16]
   1655c:	ldr	r1, [r0, r3, lsl #2]
   16560:	str	r2, [r0, r3, lsl #2]
   16564:	ldr	r2, [r0, #20]
   16568:	ldr	r3, [r0, #24]
   1656c:	cmp	r2, r3
   16570:	moveq	r2, #1
   16574:	strbeq	r2, [r0, #28]
   16578:	subne	r2, r2, #1
   1657c:	andne	r2, r2, #3
   16580:	strne	r2, [r0, #20]
   16584:	mov	r0, r1
   16588:	pop	{fp, pc}
   1658c:	bl	11814 <abort@plt>
   16590:	sub	sp, sp, #4
   16594:	push	{fp, lr}
   16598:	mov	fp, sp
   1659c:	sub	sp, sp, #4
   165a0:	str	r3, [fp, #8]
   165a4:	tst	r2, #64	; 0x40
   165a8:	mov	r3, #0
   165ac:	ldrne	r3, [fp, #8]
   165b0:	bl	116b8 <openat64@plt>
   165b4:	bl	18e5c <__assert_fail@plt+0x760c>
   165b8:	mov	sp, fp
   165bc:	pop	{fp, lr}
   165c0:	add	sp, sp, #4
   165c4:	bx	lr
   165c8:	push	{r4, r5, r6, sl, fp, lr}
   165cc:	add	fp, sp, #16
   165d0:	orr	r2, r2, #18688	; 0x4900
   165d4:	mov	r4, r3
   165d8:	orr	r2, r2, #524288	; 0x80000
   165dc:	bl	16590 <__assert_fail@plt+0x4d40>
   165e0:	mov	r5, r0
   165e4:	mov	r0, #0
   165e8:	cmp	r5, #0
   165ec:	bmi	16624 <__assert_fail@plt+0x4dd4>
   165f0:	mov	r0, r5
   165f4:	bl	1179c <fdopendir@plt>
   165f8:	cmp	r0, #0
   165fc:	beq	16608 <__assert_fail@plt+0x4db8>
   16600:	str	r5, [r4]
   16604:	pop	{r4, r5, r6, sl, fp, pc}
   16608:	bl	116d0 <__errno_location@plt>
   1660c:	ldr	r6, [r0]
   16610:	mov	r4, r0
   16614:	mov	r0, r5
   16618:	bl	11820 <close@plt>
   1661c:	mov	r0, #0
   16620:	str	r6, [r4]
   16624:	pop	{r4, r5, r6, sl, fp, pc}
   16628:	push	{r4, r5, fp, lr}
   1662c:	add	fp, sp, #8
   16630:	cmp	r0, #0
   16634:	beq	166c8 <__assert_fail@plt+0x4e78>
   16638:	mov	r1, #47	; 0x2f
   1663c:	mov	r4, r0
   16640:	bl	11778 <strrchr@plt>
   16644:	cmp	r0, #0
   16648:	mov	r5, r4
   1664c:	addne	r5, r0, #1
   16650:	sub	r0, r5, r4
   16654:	cmp	r0, #7
   16658:	blt	166ac <__assert_fail@plt+0x4e5c>
   1665c:	movw	r1, #47572	; 0xb9d4
   16660:	sub	r0, r5, #7
   16664:	mov	r2, #7
   16668:	movt	r1, #1
   1666c:	bl	11808 <strncmp@plt>
   16670:	cmp	r0, #0
   16674:	bne	166ac <__assert_fail@plt+0x4e5c>
   16678:	movw	r1, #47580	; 0xb9dc
   1667c:	mov	r0, r5
   16680:	mov	r2, #3
   16684:	movt	r1, #1
   16688:	bl	11808 <strncmp@plt>
   1668c:	cmp	r0, #0
   16690:	beq	1669c <__assert_fail@plt+0x4e4c>
   16694:	mov	r4, r5
   16698:	b	166ac <__assert_fail@plt+0x4e5c>
   1669c:	movw	r0, #53672	; 0xd1a8
   166a0:	add	r4, r5, #3
   166a4:	movt	r0, #2
   166a8:	str	r4, [r0]
   166ac:	movw	r0, #53676	; 0xd1ac
   166b0:	movt	r0, #2
   166b4:	str	r4, [r0]
   166b8:	movw	r0, #53764	; 0xd204
   166bc:	movt	r0, #2
   166c0:	str	r4, [r0]
   166c4:	pop	{r4, r5, fp, pc}
   166c8:	movw	r0, #53688	; 0xd1b8
   166cc:	mov	r1, #55	; 0x37
   166d0:	mov	r2, #1
   166d4:	movt	r0, #2
   166d8:	ldr	r3, [r0]
   166dc:	movw	r0, #47516	; 0xb99c
   166e0:	movt	r0, #1
   166e4:	bl	115a4 <fwrite@plt>
   166e8:	bl	11814 <abort@plt>
   166ec:	push	{r4, r5, r6, sl, fp, lr}
   166f0:	add	fp, sp, #16
   166f4:	mov	r4, r0
   166f8:	movw	r0, #53768	; 0xd208
   166fc:	movt	r0, #2
   16700:	cmp	r4, #0
   16704:	moveq	r4, r0
   16708:	bl	116d0 <__errno_location@plt>
   1670c:	ldr	r6, [r0]
   16710:	mov	r5, r0
   16714:	mov	r0, r4
   16718:	mov	r1, #48	; 0x30
   1671c:	bl	199bc <__assert_fail@plt+0x816c>
   16720:	str	r6, [r5]
   16724:	pop	{r4, r5, r6, sl, fp, pc}
   16728:	movw	r1, #53768	; 0xd208
   1672c:	cmp	r0, #0
   16730:	movt	r1, #2
   16734:	movne	r1, r0
   16738:	ldr	r0, [r1]
   1673c:	bx	lr
   16740:	movw	r2, #53768	; 0xd208
   16744:	cmp	r0, #0
   16748:	movt	r2, #2
   1674c:	movne	r2, r0
   16750:	str	r1, [r2]
   16754:	bx	lr
   16758:	movw	r3, #53768	; 0xd208
   1675c:	cmp	r0, #0
   16760:	and	r2, r2, #1
   16764:	movt	r3, #2
   16768:	movne	r3, r0
   1676c:	ubfx	r0, r1, #5, #3
   16770:	and	r1, r1, #31
   16774:	add	ip, r3, r0, lsl #2
   16778:	mov	r0, #1
   1677c:	ldr	r3, [ip, #8]
   16780:	and	r0, r0, r3, lsr r1
   16784:	eor	r2, r0, r2
   16788:	eor	r1, r3, r2, lsl r1
   1678c:	str	r1, [ip, #8]
   16790:	bx	lr
   16794:	movw	r2, #53768	; 0xd208
   16798:	cmp	r0, #0
   1679c:	movt	r2, #2
   167a0:	movne	r2, r0
   167a4:	ldr	r0, [r2, #4]
   167a8:	str	r1, [r2, #4]
   167ac:	bx	lr
   167b0:	push	{fp, lr}
   167b4:	mov	fp, sp
   167b8:	movw	r3, #53768	; 0xd208
   167bc:	cmp	r0, #0
   167c0:	movt	r3, #2
   167c4:	movne	r3, r0
   167c8:	cmp	r1, #0
   167cc:	mov	r0, #10
   167d0:	cmpne	r2, #0
   167d4:	str	r0, [r3]
   167d8:	bne	167e0 <__assert_fail@plt+0x4f90>
   167dc:	bl	11814 <abort@plt>
   167e0:	str	r1, [r3, #40]	; 0x28
   167e4:	str	r2, [r3, #44]	; 0x2c
   167e8:	pop	{fp, pc}
   167ec:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   167f0:	add	fp, sp, #28
   167f4:	sub	sp, sp, #20
   167f8:	mov	r7, r0
   167fc:	ldr	r0, [fp, #8]
   16800:	movw	r5, #53768	; 0xd208
   16804:	mov	r8, r3
   16808:	mov	r9, r2
   1680c:	mov	sl, r1
   16810:	movt	r5, #2
   16814:	cmp	r0, #0
   16818:	movne	r5, r0
   1681c:	bl	116d0 <__errno_location@plt>
   16820:	ldr	r2, [r5, #40]	; 0x28
   16824:	ldr	r3, [r5, #44]	; 0x2c
   16828:	mov	r4, r0
   1682c:	ldm	r5, {r0, r1}
   16830:	add	r5, r5, #8
   16834:	ldr	r6, [r4]
   16838:	stm	sp, {r0, r1, r5}
   1683c:	mov	r0, r7
   16840:	mov	r1, sl
   16844:	str	r2, [sp, #12]
   16848:	str	r3, [sp, #16]
   1684c:	mov	r2, r9
   16850:	mov	r3, r8
   16854:	bl	16864 <__assert_fail@plt+0x5014>
   16858:	str	r6, [r4]
   1685c:	sub	sp, fp, #28
   16860:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16864:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16868:	add	fp, sp, #28
   1686c:	sub	sp, sp, #156	; 0x9c
   16870:	mov	r5, r0
   16874:	add	r0, r2, #1
   16878:	mov	r6, r1
   1687c:	mov	sl, r3
   16880:	str	r2, [fp, #-80]	; 0xffffffb0
   16884:	str	r0, [sp, #72]	; 0x48
   16888:	ldr	r0, [fp, #12]
   1688c:	and	r1, r0, #1
   16890:	str	r1, [sp, #36]	; 0x24
   16894:	and	r1, r0, #4
   16898:	str	r1, [sp, #32]
   1689c:	ubfx	r9, r0, #1, #1
   168a0:	bl	115bc <__ctype_get_mb_cur_max@plt>
   168a4:	str	r0, [sp, #40]	; 0x28
   168a8:	ldr	r0, [fp, #24]
   168ac:	ldr	r7, [fp, #8]
   168b0:	mov	r1, #0
   168b4:	str	r5, [fp, #-84]	; 0xffffffac
   168b8:	str	r1, [fp, #-56]	; 0xffffffc8
   168bc:	mov	r1, #0
   168c0:	str	r1, [sp, #60]	; 0x3c
   168c4:	mov	r1, #1
   168c8:	str	r1, [fp, #-48]	; 0xffffffd0
   168cc:	str	r0, [sp, #80]	; 0x50
   168d0:	ldr	r0, [fp, #20]
   168d4:	str	r0, [sp, #76]	; 0x4c
   168d8:	mov	r0, #0
   168dc:	str	r0, [sp, #56]	; 0x38
   168e0:	mov	r0, #0
   168e4:	str	r0, [fp, #-88]	; 0xffffffa8
   168e8:	mov	r0, #0
   168ec:	str	r0, [fp, #-72]	; 0xffffffb8
   168f0:	mov	r0, #0
   168f4:	cmp	r7, #10
   168f8:	bhi	1788c <__assert_fail@plt+0x603c>
   168fc:	add	r1, pc, #24
   16900:	ldr	ip, [fp, #-80]	; 0xffffffb0
   16904:	mov	r4, r6
   16908:	mov	r8, #0
   1690c:	mov	r2, #1
   16910:	mov	r3, #0
   16914:	mov	lr, sl
   16918:	ldr	pc, [r1, r7, lsl #2]
   1691c:	andeq	r6, r1, r0, ror #19
   16920:	andeq	r6, r1, r4, lsr sl
   16924:	strdeq	r6, [r1], -r4
   16928:	ldrdeq	r6, [r1], -r8
   1692c:	andeq	r6, r1, r8, lsr #20
   16930:	andeq	r6, r1, ip, asr sl
   16934:	andeq	r6, r1, r4, lsl #20
   16938:	andeq	r6, r1, r0, ror #21
   1693c:	andeq	r6, r1, r8, asr #18
   16940:	andeq	r6, r1, r8, asr #18
   16944:	andeq	r6, r1, r0, ror r9
   16948:	movw	r0, #47662	; 0xba2e
   1694c:	mov	r1, r7
   16950:	movt	r0, #1
   16954:	bl	18294 <__assert_fail@plt+0x6a44>
   16958:	str	r0, [sp, #76]	; 0x4c
   1695c:	movw	r0, #49009	; 0xbf71
   16960:	mov	r1, r7
   16964:	movt	r0, #1
   16968:	bl	18294 <__assert_fail@plt+0x6a44>
   1696c:	str	r0, [sp, #80]	; 0x50
   16970:	mov	r8, #0
   16974:	tst	r9, #1
   16978:	bne	169b0 <__assert_fail@plt+0x5160>
   1697c:	ldr	r0, [sp, #76]	; 0x4c
   16980:	ldrb	r0, [r0]
   16984:	cmp	r0, #0
   16988:	beq	169b0 <__assert_fail@plt+0x5160>
   1698c:	ldr	r1, [sp, #76]	; 0x4c
   16990:	mov	r8, #0
   16994:	add	r1, r1, #1
   16998:	cmp	r8, r4
   1699c:	strbcc	r0, [r5, r8]
   169a0:	ldrb	r0, [r1, r8]
   169a4:	add	r8, r8, #1
   169a8:	cmp	r0, #0
   169ac:	bne	16998 <__assert_fail@plt+0x5148>
   169b0:	ldr	r6, [sp, #80]	; 0x50
   169b4:	mov	r0, r6
   169b8:	bl	116ac <strlen@plt>
   169bc:	ldr	ip, [fp, #-80]	; 0xffffffb0
   169c0:	str	r0, [fp, #-72]	; 0xffffffb8
   169c4:	str	r6, [fp, #-88]	; 0xffffffa8
   169c8:	mov	r2, #1
   169cc:	mov	r3, r9
   169d0:	mov	lr, sl
   169d4:	b	16ae0 <__assert_fail@plt+0x5290>
   169d8:	mov	r0, #1
   169dc:	b	16a34 <__assert_fail@plt+0x51e4>
   169e0:	mov	r7, #0
   169e4:	mov	r8, #0
   169e8:	mov	r2, r0
   169ec:	mov	r3, #0
   169f0:	b	16ae0 <__assert_fail@plt+0x5290>
   169f4:	tst	r9, #1
   169f8:	bne	16a34 <__assert_fail@plt+0x51e4>
   169fc:	mov	r2, r0
   16a00:	b	16a8c <__assert_fail@plt+0x523c>
   16a04:	mov	r0, #1
   16a08:	mov	r8, #0
   16a0c:	mov	r7, #5
   16a10:	mov	r2, #1
   16a14:	str	r0, [fp, #-72]	; 0xffffffb8
   16a18:	movw	r0, #47660	; 0xba2c
   16a1c:	movt	r0, #1
   16a20:	str	r0, [fp, #-88]	; 0xffffffa8
   16a24:	b	16a54 <__assert_fail@plt+0x5204>
   16a28:	mov	r2, #1
   16a2c:	tst	r9, #1
   16a30:	beq	16a8c <__assert_fail@plt+0x523c>
   16a34:	mov	r1, #1
   16a38:	mov	r8, #0
   16a3c:	mov	r7, #2
   16a40:	mov	r2, r0
   16a44:	str	r1, [fp, #-72]	; 0xffffffb8
   16a48:	movw	r1, #49009	; 0xbf71
   16a4c:	movt	r1, #1
   16a50:	str	r1, [fp, #-88]	; 0xffffffa8
   16a54:	mov	r3, #1
   16a58:	b	16ae0 <__assert_fail@plt+0x5290>
   16a5c:	tst	r9, #1
   16a60:	beq	16ab0 <__assert_fail@plt+0x5260>
   16a64:	mov	r0, #1
   16a68:	mov	r8, #0
   16a6c:	mov	r2, #1
   16a70:	mov	r3, #1
   16a74:	mov	r7, #5
   16a78:	str	r0, [fp, #-72]	; 0xffffffb8
   16a7c:	movw	r0, #47660	; 0xba2c
   16a80:	movt	r0, #1
   16a84:	str	r0, [fp, #-88]	; 0xffffffa8
   16a88:	b	16ae0 <__assert_fail@plt+0x5290>
   16a8c:	cmp	r4, #0
   16a90:	mov	r8, #1
   16a94:	mov	r3, #0
   16a98:	mov	r7, #2
   16a9c:	movne	r0, #39	; 0x27
   16aa0:	strbne	r0, [r5]
   16aa4:	movw	r0, #49009	; 0xbf71
   16aa8:	movt	r0, #1
   16aac:	b	16ad4 <__assert_fail@plt+0x5284>
   16ab0:	cmp	r4, #0
   16ab4:	mov	r8, #1
   16ab8:	mov	r2, #1
   16abc:	mov	r7, #5
   16ac0:	mov	r3, #0
   16ac4:	movne	r0, #34	; 0x22
   16ac8:	strbne	r0, [r5]
   16acc:	movw	r0, #47660	; 0xba2c
   16ad0:	movt	r0, #1
   16ad4:	str	r0, [fp, #-88]	; 0xffffffa8
   16ad8:	mov	r0, #1
   16adc:	str	r0, [fp, #-72]	; 0xffffffb8
   16ae0:	ldr	r0, [fp, #-72]	; 0xffffffb8
   16ae4:	eor	r6, r3, #1
   16ae8:	str	r7, [fp, #-68]	; 0xffffffbc
   16aec:	str	r3, [fp, #-76]	; 0xffffffb4
   16af0:	str	r2, [sp, #84]	; 0x54
   16af4:	str	r6, [sp, #92]	; 0x5c
   16af8:	cmp	r0, #0
   16afc:	movwne	r0, #1
   16b00:	and	r1, r0, r3
   16b04:	and	r1, r2, r1
   16b08:	str	r1, [sp, #48]	; 0x30
   16b0c:	sub	r1, r7, #2
   16b10:	clz	r1, r1
   16b14:	lsr	r1, r1, #5
   16b18:	and	r1, r1, r3
   16b1c:	str	r1, [sp, #64]	; 0x40
   16b20:	subs	r1, r7, #2
   16b24:	mov	r7, #0
   16b28:	movwne	r1, #1
   16b2c:	orr	r6, r1, r6
   16b30:	and	r1, r1, r2
   16b34:	and	r0, r0, r1
   16b38:	str	r6, [sp, #68]	; 0x44
   16b3c:	str	r0, [fp, #-60]	; 0xffffffc4
   16b40:	orr	r0, r1, r3
   16b44:	ldr	r1, [fp, #16]
   16b48:	eor	r0, r0, #1
   16b4c:	clz	r1, r1
   16b50:	lsr	r1, r1, #5
   16b54:	orr	r0, r1, r0
   16b58:	str	r0, [fp, #-64]	; 0xffffffc0
   16b5c:	eor	r0, r2, #1
   16b60:	str	r0, [sp, #52]	; 0x34
   16b64:	cmn	lr, #1
   16b68:	beq	16b78 <__assert_fail@plt+0x5328>
   16b6c:	cmp	r7, lr
   16b70:	bne	16b84 <__assert_fail@plt+0x5334>
   16b74:	b	176cc <__assert_fail@plt+0x5e7c>
   16b78:	ldrb	r0, [ip, r7]
   16b7c:	cmp	r0, #0
   16b80:	beq	176d4 <__assert_fail@plt+0x5e84>
   16b84:	ldr	r0, [fp, #-60]	; 0xffffffc4
   16b88:	mov	sl, #0
   16b8c:	cmp	r0, #0
   16b90:	beq	16bc8 <__assert_fail@plt+0x5378>
   16b94:	ldr	r0, [fp, #-72]	; 0xffffffb8
   16b98:	add	r5, r7, r0
   16b9c:	cmp	r0, #2
   16ba0:	bcc	16bbc <__assert_fail@plt+0x536c>
   16ba4:	cmn	lr, #1
   16ba8:	bne	16bbc <__assert_fail@plt+0x536c>
   16bac:	mov	r0, ip
   16bb0:	bl	116ac <strlen@plt>
   16bb4:	ldr	ip, [fp, #-80]	; 0xffffffb0
   16bb8:	mov	lr, r0
   16bbc:	cmp	r5, lr
   16bc0:	bls	16bd0 <__assert_fail@plt+0x5380>
   16bc4:	ldr	r5, [fp, #-84]	; 0xffffffac
   16bc8:	mov	r0, #0
   16bcc:	b	16c1c <__assert_fail@plt+0x53cc>
   16bd0:	ldr	r1, [fp, #-88]	; 0xffffffa8
   16bd4:	ldr	r2, [fp, #-72]	; 0xffffffb8
   16bd8:	add	r0, ip, r7
   16bdc:	mov	r6, r4
   16be0:	mov	r4, lr
   16be4:	bl	116a0 <bcmp@plt>
   16be8:	ldr	r2, [sp, #92]	; 0x5c
   16bec:	cmp	r0, #0
   16bf0:	ldr	r5, [fp, #-84]	; 0xffffffac
   16bf4:	mov	r1, r0
   16bf8:	movwne	r1, #1
   16bfc:	orr	r1, r1, r2
   16c00:	tst	r1, #1
   16c04:	beq	1775c <__assert_fail@plt+0x5f0c>
   16c08:	ldr	ip, [fp, #-80]	; 0xffffffb0
   16c0c:	clz	r0, r0
   16c10:	mov	lr, r4
   16c14:	mov	r4, r6
   16c18:	lsr	r0, r0, #5
   16c1c:	str	r0, [fp, #-52]	; 0xffffffcc
   16c20:	ldrb	r6, [ip, r7]
   16c24:	cmp	r6, #126	; 0x7e
   16c28:	bhi	17158 <__assert_fail@plt+0x5908>
   16c2c:	add	r3, pc, #16
   16c30:	mov	r9, #1
   16c34:	mov	r2, #110	; 0x6e
   16c38:	mov	r0, #97	; 0x61
   16c3c:	mov	r1, #0
   16c40:	ldr	pc, [r3, r6, lsl #2]
   16c44:			; <UNDEFINED> instruction: 0x00016fb8
   16c48:	andeq	r7, r1, r8, asr r1
   16c4c:	andeq	r7, r1, r8, asr r1
   16c50:	andeq	r7, r1, r8, asr r1
   16c54:	andeq	r7, r1, r8, asr r1
   16c58:	andeq	r7, r1, r8, asr r1
   16c5c:	andeq	r7, r1, r8, asr r1
   16c60:	andeq	r7, r1, r4, lsr r2
   16c64:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   16c68:	muleq	r1, r0, pc	; <UNPREDICTABLE>
   16c6c:	andeq	r6, r1, r4, lsr #31
   16c70:	andeq	r7, r1, r0, asr #1
   16c74:	andeq	r6, r1, r8, lsl #31
   16c78:	andeq	r6, r1, r0, lsr #31
   16c7c:	andeq	r7, r1, r8, asr r1
   16c80:	andeq	r7, r1, r8, asr r1
   16c84:	andeq	r7, r1, r8, asr r1
   16c88:	andeq	r7, r1, r8, asr r1
   16c8c:	andeq	r7, r1, r8, asr r1
   16c90:	andeq	r7, r1, r8, asr r1
   16c94:	andeq	r7, r1, r8, asr r1
   16c98:	andeq	r7, r1, r8, asr r1
   16c9c:	andeq	r7, r1, r8, asr r1
   16ca0:	andeq	r7, r1, r8, asr r1
   16ca4:	andeq	r7, r1, r8, asr r1
   16ca8:	andeq	r7, r1, r8, asr r1
   16cac:	andeq	r7, r1, r8, asr r1
   16cb0:	andeq	r7, r1, r8, asr r1
   16cb4:	andeq	r7, r1, r8, asr r1
   16cb8:	andeq	r7, r1, r8, asr r1
   16cbc:	andeq	r7, r1, r8, asr r1
   16cc0:	andeq	r7, r1, r8, asr r1
   16cc4:	andeq	r6, r1, ip, lsr pc
   16cc8:	andeq	r6, r1, r0, asr #30
   16ccc:	andeq	r6, r1, r0, asr #30
   16cd0:	andeq	r6, r1, r8, lsr #30
   16cd4:	andeq	r6, r1, r0, asr #30
   16cd8:	andeq	r6, r1, r0, asr #28
   16cdc:	andeq	r6, r1, r0, asr #30
   16ce0:	andeq	r7, r1, r8, asr #1
   16ce4:	andeq	r6, r1, r0, asr #30
   16ce8:	andeq	r6, r1, r0, asr #30
   16cec:	andeq	r6, r1, r0, asr #30
   16cf0:	andeq	r6, r1, r0, asr #28
   16cf4:	andeq	r6, r1, r0, asr #28
   16cf8:	andeq	r6, r1, r0, asr #28
   16cfc:	andeq	r6, r1, r0, asr #28
   16d00:	andeq	r6, r1, r0, asr #28
   16d04:	andeq	r6, r1, r0, asr #28
   16d08:	andeq	r6, r1, r0, asr #28
   16d0c:	andeq	r6, r1, r0, asr #28
   16d10:	andeq	r6, r1, r0, asr #28
   16d14:	andeq	r6, r1, r0, asr #28
   16d18:	andeq	r6, r1, r0, asr #28
   16d1c:	andeq	r6, r1, r0, asr #28
   16d20:	andeq	r6, r1, r0, asr #28
   16d24:	andeq	r6, r1, r0, asr #28
   16d28:	andeq	r6, r1, r0, asr #28
   16d2c:	andeq	r6, r1, r0, asr #28
   16d30:	andeq	r6, r1, r0, asr #30
   16d34:	andeq	r6, r1, r0, asr #30
   16d38:	andeq	r6, r1, r0, asr #30
   16d3c:	andeq	r6, r1, r0, asr #30
   16d40:	muleq	r1, r0, r0
   16d44:	andeq	r7, r1, r8, asr r1
   16d48:	andeq	r6, r1, r0, asr #28
   16d4c:	andeq	r6, r1, r0, asr #28
   16d50:	andeq	r6, r1, r0, asr #28
   16d54:	andeq	r6, r1, r0, asr #28
   16d58:	andeq	r6, r1, r0, asr #28
   16d5c:	andeq	r6, r1, r0, asr #28
   16d60:	andeq	r6, r1, r0, asr #28
   16d64:	andeq	r6, r1, r0, asr #28
   16d68:	andeq	r6, r1, r0, asr #28
   16d6c:	andeq	r6, r1, r0, asr #28
   16d70:	andeq	r6, r1, r0, asr #28
   16d74:	andeq	r6, r1, r0, asr #28
   16d78:	andeq	r6, r1, r0, asr #28
   16d7c:	andeq	r6, r1, r0, asr #28
   16d80:	andeq	r6, r1, r0, asr #28
   16d84:	andeq	r6, r1, r0, asr #28
   16d88:	andeq	r6, r1, r0, asr #28
   16d8c:	andeq	r6, r1, r0, asr #28
   16d90:	andeq	r6, r1, r0, asr #28
   16d94:	andeq	r6, r1, r0, asr #28
   16d98:	andeq	r6, r1, r0, asr #28
   16d9c:	andeq	r6, r1, r0, asr #28
   16da0:	andeq	r6, r1, r0, asr #28
   16da4:	andeq	r6, r1, r0, asr #28
   16da8:	andeq	r6, r1, r0, asr #28
   16dac:	andeq	r6, r1, r0, asr #28
   16db0:	andeq	r6, r1, r0, asr #30
   16db4:	andeq	r6, r1, r8, ror #30
   16db8:	andeq	r6, r1, r0, asr #28
   16dbc:	andeq	r6, r1, r0, asr #30
   16dc0:	andeq	r6, r1, r0, asr #28
   16dc4:	andeq	r6, r1, r0, asr #30
   16dc8:	andeq	r6, r1, r0, asr #28
   16dcc:	andeq	r6, r1, r0, asr #28
   16dd0:	andeq	r6, r1, r0, asr #28
   16dd4:	andeq	r6, r1, r0, asr #28
   16dd8:	andeq	r6, r1, r0, asr #28
   16ddc:	andeq	r6, r1, r0, asr #28
   16de0:	andeq	r6, r1, r0, asr #28
   16de4:	andeq	r6, r1, r0, asr #28
   16de8:	andeq	r6, r1, r0, asr #28
   16dec:	andeq	r6, r1, r0, asr #28
   16df0:	andeq	r6, r1, r0, asr #28
   16df4:	andeq	r6, r1, r0, asr #28
   16df8:	andeq	r6, r1, r0, asr #28
   16dfc:	andeq	r6, r1, r0, asr #28
   16e00:	andeq	r6, r1, r0, asr #28
   16e04:	andeq	r6, r1, r0, asr #28
   16e08:	andeq	r6, r1, r0, asr #28
   16e0c:	andeq	r6, r1, r0, asr #28
   16e10:	andeq	r6, r1, r0, asr #28
   16e14:	andeq	r6, r1, r0, asr #28
   16e18:	andeq	r6, r1, r0, asr #28
   16e1c:	andeq	r6, r1, r0, asr #28
   16e20:	andeq	r6, r1, r0, asr #28
   16e24:	andeq	r6, r1, r0, asr #28
   16e28:	andeq	r6, r1, r0, asr #28
   16e2c:	andeq	r6, r1, r0, asr #28
   16e30:	strdeq	r6, [r1], -ip
   16e34:	andeq	r6, r1, r0, asr #30
   16e38:	strdeq	r6, [r1], -ip
   16e3c:	andeq	r6, r1, r8, lsr #30
   16e40:	ldr	r0, [fp, #-64]	; 0xffffffc0
   16e44:	tst	r0, #1
   16e48:	bne	16e74 <__assert_fail@plt+0x5624>
   16e4c:	ldr	r1, [fp, #16]
   16e50:	ubfx	r0, r6, #5, #3
   16e54:	mov	r2, #1
   16e58:	ldr	r0, [r1, r0, lsl #2]
   16e5c:	and	r1, r6, #31
   16e60:	tst	r0, r2, lsl r1
   16e64:	beq	16e74 <__assert_fail@plt+0x5624>
   16e68:	mov	r0, r6
   16e6c:	mov	r1, r9
   16e70:	b	16e88 <__assert_fail@plt+0x5638>
   16e74:	ldr	r0, [fp, #-52]	; 0xffffffcc
   16e78:	mov	r1, r9
   16e7c:	cmp	r0, #0
   16e80:	mov	r0, r6
   16e84:	beq	171c8 <__assert_fail@plt+0x5978>
   16e88:	ldr	r2, [fp, #-76]	; 0xffffffb4
   16e8c:	tst	r2, #1
   16e90:	bne	17798 <__assert_fail@plt+0x5f48>
   16e94:	ldr	r2, [fp, #-68]	; 0xffffffbc
   16e98:	ldr	r3, [fp, #-56]	; 0xffffffc8
   16e9c:	subs	r2, r2, #2
   16ea0:	movwne	r2, #1
   16ea4:	orr	r2, r2, r3
   16ea8:	tst	r2, #1
   16eac:	bne	16ee8 <__assert_fail@plt+0x5698>
   16eb0:	cmp	r8, r4
   16eb4:	movcc	r2, #39	; 0x27
   16eb8:	strbcc	r2, [r5, r8]
   16ebc:	add	r2, r8, #1
   16ec0:	cmp	r2, r4
   16ec4:	movcc	r3, #36	; 0x24
   16ec8:	strbcc	r3, [r5, r2]
   16ecc:	add	r2, r8, #2
   16ed0:	add	r8, r8, #3
   16ed4:	cmp	r2, r4
   16ed8:	movcc	r3, #39	; 0x27
   16edc:	strbcc	r3, [r5, r2]
   16ee0:	mov	r2, #1
   16ee4:	str	r2, [fp, #-56]	; 0xffffffc8
   16ee8:	cmp	r8, r4
   16eec:	movcc	r2, #92	; 0x5c
   16ef0:	strbcc	r2, [r5, r8]
   16ef4:	add	r8, r8, #1
   16ef8:	b	1720c <__assert_fail@plt+0x59bc>
   16efc:	cmp	lr, #1
   16f00:	beq	16f28 <__assert_fail@plt+0x56d8>
   16f04:	mov	r9, #0
   16f08:	cmn	lr, #1
   16f0c:	bne	16f34 <__assert_fail@plt+0x56e4>
   16f10:	ldrb	r0, [ip, #1]
   16f14:	cmp	r0, #0
   16f18:	beq	16f28 <__assert_fail@plt+0x56d8>
   16f1c:	mvn	lr, #0
   16f20:	mov	sl, #0
   16f24:	b	16e40 <__assert_fail@plt+0x55f0>
   16f28:	mov	r9, #0
   16f2c:	cmp	r7, #0
   16f30:	beq	16f3c <__assert_fail@plt+0x56ec>
   16f34:	mov	sl, #0
   16f38:	b	16e40 <__assert_fail@plt+0x55f0>
   16f3c:	mov	r1, #1
   16f40:	ldr	r0, [fp, #-68]	; 0xffffffbc
   16f44:	cmp	r0, #2
   16f48:	bne	16f60 <__assert_fail@plt+0x5710>
   16f4c:	ldr	r0, [fp, #-76]	; 0xffffffb4
   16f50:	mov	r9, r1
   16f54:	tst	r0, #1
   16f58:	beq	16e40 <__assert_fail@plt+0x55f0>
   16f5c:	b	17798 <__assert_fail@plt+0x5f48>
   16f60:	mov	r9, r1
   16f64:	b	16e40 <__assert_fail@plt+0x55f0>
   16f68:	ldr	r0, [fp, #-68]	; 0xffffffbc
   16f6c:	cmp	r0, #2
   16f70:	bne	171ac <__assert_fail@plt+0x595c>
   16f74:	ldr	r0, [fp, #-76]	; 0xffffffb4
   16f78:	tst	r0, #1
   16f7c:	bne	17798 <__assert_fail@plt+0x5f48>
   16f80:	mov	sl, #0
   16f84:	b	171c0 <__assert_fail@plt+0x5970>
   16f88:	mov	r0, #102	; 0x66
   16f8c:	b	17234 <__assert_fail@plt+0x59e4>
   16f90:	mov	r2, #116	; 0x74
   16f94:	b	16fa4 <__assert_fail@plt+0x5754>
   16f98:	mov	r0, #98	; 0x62
   16f9c:	b	17234 <__assert_fail@plt+0x59e4>
   16fa0:	mov	r2, #114	; 0x72
   16fa4:	ldr	r0, [sp, #68]	; 0x44
   16fa8:	tst	r0, #1
   16fac:	mov	r0, r2
   16fb0:	bne	17234 <__assert_fail@plt+0x59e4>
   16fb4:	b	17798 <__assert_fail@plt+0x5f48>
   16fb8:	ldr	r0, [sp, #84]	; 0x54
   16fbc:	tst	r0, #1
   16fc0:	beq	17250 <__assert_fail@plt+0x5a00>
   16fc4:	ldr	r0, [fp, #-76]	; 0xffffffb4
   16fc8:	tst	r0, #1
   16fcc:	bne	17884 <__assert_fail@plt+0x6034>
   16fd0:	ldr	r0, [fp, #-68]	; 0xffffffbc
   16fd4:	ldr	r1, [fp, #-56]	; 0xffffffc8
   16fd8:	subs	r0, r0, #2
   16fdc:	movwne	r0, #1
   16fe0:	orr	r0, r0, r1
   16fe4:	tst	r0, #1
   16fe8:	bne	17024 <__assert_fail@plt+0x57d4>
   16fec:	cmp	r8, r4
   16ff0:	movcc	r0, #39	; 0x27
   16ff4:	strbcc	r0, [r5, r8]
   16ff8:	add	r0, r8, #1
   16ffc:	cmp	r0, r4
   17000:	movcc	r1, #36	; 0x24
   17004:	strbcc	r1, [r5, r0]
   17008:	add	r0, r8, #2
   1700c:	add	r8, r8, #3
   17010:	cmp	r0, r4
   17014:	movcc	r1, #39	; 0x27
   17018:	strbcc	r1, [r5, r0]
   1701c:	mov	r0, #1
   17020:	str	r0, [fp, #-56]	; 0xffffffc8
   17024:	ldr	r1, [fp, #-68]	; 0xffffffbc
   17028:	cmp	r8, r4
   1702c:	mov	r9, #0
   17030:	mov	sl, #1
   17034:	mov	r6, #48	; 0x30
   17038:	movcc	r0, #92	; 0x5c
   1703c:	strbcc	r0, [r5, r8]
   17040:	add	r0, r8, #1
   17044:	cmp	r1, #2
   17048:	beq	17418 <__assert_fail@plt+0x5bc8>
   1704c:	add	r1, r7, #1
   17050:	cmp	r1, lr
   17054:	bcs	17418 <__assert_fail@plt+0x5bc8>
   17058:	ldrb	r1, [ip, r1]
   1705c:	sub	r1, r1, #48	; 0x30
   17060:	uxtb	r1, r1
   17064:	cmp	r1, #9
   17068:	bhi	17418 <__assert_fail@plt+0x5bc8>
   1706c:	cmp	r0, r4
   17070:	movcc	r1, #48	; 0x30
   17074:	strbcc	r1, [r5, r0]
   17078:	add	r0, r8, #2
   1707c:	add	r8, r8, #3
   17080:	cmp	r0, r4
   17084:	movcc	r1, #48	; 0x30
   17088:	strbcc	r1, [r5, r0]
   1708c:	b	16e40 <__assert_fail@plt+0x55f0>
   17090:	ldr	r0, [fp, #-68]	; 0xffffffbc
   17094:	mov	sl, #0
   17098:	mov	r6, #63	; 0x3f
   1709c:	cmp	r0, #5
   170a0:	beq	17420 <__assert_fail@plt+0x5bd0>
   170a4:	cmp	r0, #2
   170a8:	bne	174c8 <__assert_fail@plt+0x5c78>
   170ac:	ldr	r0, [fp, #-76]	; 0xffffffb4
   170b0:	mov	r9, #0
   170b4:	tst	r0, #1
   170b8:	beq	16e40 <__assert_fail@plt+0x55f0>
   170bc:	b	17798 <__assert_fail@plt+0x5f48>
   170c0:	mov	r0, #118	; 0x76
   170c4:	b	17234 <__assert_fail@plt+0x59e4>
   170c8:	mov	r0, #1
   170cc:	mov	r6, #39	; 0x27
   170d0:	str	r0, [sp, #60]	; 0x3c
   170d4:	ldr	r0, [fp, #-68]	; 0xffffffbc
   170d8:	cmp	r0, #2
   170dc:	bne	1726c <__assert_fail@plt+0x5a1c>
   170e0:	ldr	r0, [fp, #-76]	; 0xffffffb4
   170e4:	tst	r0, #1
   170e8:	bne	17798 <__assert_fail@plt+0x5f48>
   170ec:	ldr	r2, [sp, #56]	; 0x38
   170f0:	clz	r1, r4
   170f4:	mov	sl, #0
   170f8:	mov	r9, #1
   170fc:	lsr	r1, r1, #5
   17100:	cmp	r2, #0
   17104:	mov	r0, r2
   17108:	movwne	r0, #1
   1710c:	orrs	r0, r0, r1
   17110:	moveq	r2, r4
   17114:	moveq	r4, r0
   17118:	cmp	r8, r4
   1711c:	str	r2, [sp, #56]	; 0x38
   17120:	movcc	r0, #39	; 0x27
   17124:	strbcc	r0, [r5, r8]
   17128:	add	r0, r8, #1
   1712c:	cmp	r0, r4
   17130:	movcc	r1, #92	; 0x5c
   17134:	strbcc	r1, [r5, r0]
   17138:	add	r0, r8, #2
   1713c:	add	r8, r8, #3
   17140:	cmp	r0, r4
   17144:	movcc	r1, #39	; 0x27
   17148:	strbcc	r1, [r5, r0]
   1714c:	mov	r0, #0
   17150:	str	r0, [fp, #-56]	; 0xffffffc8
   17154:	b	16e40 <__assert_fail@plt+0x55f0>
   17158:	ldr	r0, [sp, #40]	; 0x28
   1715c:	str	r4, [sp, #88]	; 0x58
   17160:	cmp	r0, #1
   17164:	bne	17274 <__assert_fail@plt+0x5a24>
   17168:	str	lr, [sp, #28]
   1716c:	bl	11664 <__ctype_b_loc@plt>
   17170:	ldr	r0, [r0]
   17174:	ldr	ip, [fp, #-80]	; 0xffffffb0
   17178:	mov	r2, #1
   1717c:	add	r0, r0, r6, lsl #1
   17180:	ldrb	r0, [r0, #1]
   17184:	ubfx	r9, r0, #6, #1
   17188:	ldr	r0, [sp, #52]	; 0x34
   1718c:	cmp	r2, #1
   17190:	orr	r0, r9, r0
   17194:	bhi	174d0 <__assert_fail@plt+0x5c80>
   17198:	tst	r0, #1
   1719c:	beq	174d0 <__assert_fail@plt+0x5c80>
   171a0:	ldr	lr, [sp, #28]
   171a4:	ldr	r4, [sp, #88]	; 0x58
   171a8:	b	16e40 <__assert_fail@plt+0x55f0>
   171ac:	ldr	r1, [sp, #48]	; 0x30
   171b0:	mov	sl, #0
   171b4:	mov	r0, #92	; 0x5c
   171b8:	cmp	r1, #0
   171bc:	beq	17234 <__assert_fail@plt+0x59e4>
   171c0:	mov	r6, #92	; 0x5c
   171c4:	mov	r9, #0
   171c8:	cmp	sl, #0
   171cc:	bne	17204 <__assert_fail@plt+0x59b4>
   171d0:	ldr	r0, [fp, #-56]	; 0xffffffc8
   171d4:	tst	r0, #1
   171d8:	beq	17204 <__assert_fail@plt+0x59b4>
   171dc:	cmp	r8, r4
   171e0:	movcc	r0, #39	; 0x27
   171e4:	strbcc	r0, [r5, r8]
   171e8:	add	r0, r8, #1
   171ec:	add	r8, r8, #2
   171f0:	cmp	r0, r4
   171f4:	movcc	r1, #39	; 0x27
   171f8:	strbcc	r1, [r5, r0]
   171fc:	mov	r0, #0
   17200:	str	r0, [fp, #-56]	; 0xffffffc8
   17204:	mov	r1, r9
   17208:	mov	r0, r6
   1720c:	cmp	r8, r4
   17210:	strbcc	r0, [r5, r8]
   17214:	ldr	r0, [fp, #-48]	; 0xffffffd0
   17218:	add	r8, r8, #1
   1721c:	and	r0, r0, r1
   17220:	str	r0, [fp, #-48]	; 0xffffffd0
   17224:	add	r7, r7, #1
   17228:	cmn	lr, #1
   1722c:	bne	16b6c <__assert_fail@plt+0x531c>
   17230:	b	16b78 <__assert_fail@plt+0x5328>
   17234:	ldr	r1, [sp, #84]	; 0x54
   17238:	mov	sl, #0
   1723c:	mov	r9, #0
   17240:	tst	r1, #1
   17244:	mov	r1, #0
   17248:	beq	16e40 <__assert_fail@plt+0x55f0>
   1724c:	b	16e88 <__assert_fail@plt+0x5638>
   17250:	ldr	r0, [sp, #36]	; 0x24
   17254:	mov	r6, #0
   17258:	mov	sl, #0
   1725c:	mov	r9, #0
   17260:	cmp	r0, #0
   17264:	beq	16e40 <__assert_fail@plt+0x55f0>
   17268:	b	17224 <__assert_fail@plt+0x59d4>
   1726c:	mov	r9, #1
   17270:	b	16e40 <__assert_fail@plt+0x55f0>
   17274:	mov	r0, #0
   17278:	cmn	lr, #1
   1727c:	sub	r4, fp, #40	; 0x28
   17280:	str	r0, [fp, #-36]	; 0xffffffdc
   17284:	str	r0, [fp, #-40]	; 0xffffffd8
   17288:	bne	1729c <__assert_fail@plt+0x5a4c>
   1728c:	mov	r0, ip
   17290:	bl	116ac <strlen@plt>
   17294:	ldr	ip, [fp, #-80]	; 0xffffffb0
   17298:	mov	lr, r0
   1729c:	ldr	r0, [sp, #72]	; 0x48
   172a0:	mov	r9, #1
   172a4:	mov	r2, #0
   172a8:	str	lr, [sp, #28]
   172ac:	add	r0, r0, r7
   172b0:	str	r0, [sp, #20]
   172b4:	b	172f8 <__assert_fail@plt+0x5aa8>
   172b8:	ldr	r5, [sp, #44]	; 0x2c
   172bc:	add	r5, r0, r5
   172c0:	ldr	r0, [fp, #-44]	; 0xffffffd4
   172c4:	bl	1158c <iswprint@plt>
   172c8:	cmp	r0, #0
   172cc:	sub	r4, fp, #40	; 0x28
   172d0:	movwne	r0, #1
   172d4:	and	r9, r9, r0
   172d8:	mov	r0, r4
   172dc:	bl	11514 <mbsinit@plt>
   172e0:	mov	r2, r5
   172e4:	ldr	lr, [sp, #28]
   172e8:	ldr	r5, [fp, #-84]	; 0xffffffac
   172ec:	ldr	ip, [fp, #-80]	; 0xffffffb0
   172f0:	cmp	r0, #0
   172f4:	bne	17188 <__assert_fail@plt+0x5938>
   172f8:	add	r0, r2, r7
   172fc:	str	r2, [sp, #44]	; 0x2c
   17300:	mov	r3, r4
   17304:	add	r1, ip, r0
   17308:	str	r0, [sp, #24]
   1730c:	sub	r2, lr, r0
   17310:	sub	r0, fp, #44	; 0x2c
   17314:	bl	1a2e4 <__assert_fail@plt+0x8a94>
   17318:	cmp	r0, #0
   1731c:	beq	176c0 <__assert_fail@plt+0x5e70>
   17320:	cmn	r0, #1
   17324:	beq	1767c <__assert_fail@plt+0x5e2c>
   17328:	ldr	lr, [sp, #28]
   1732c:	cmn	r0, #2
   17330:	beq	17684 <__assert_fail@plt+0x5e34>
   17334:	ldr	r2, [sp, #64]	; 0x40
   17338:	ldr	r4, [sp, #88]	; 0x58
   1733c:	ldr	ip, [sp, #84]	; 0x54
   17340:	cmp	r0, #2
   17344:	mov	r1, #0
   17348:	movwcc	r1, #1
   1734c:	eor	r2, r2, #1
   17350:	orrs	r1, r2, r1
   17354:	bne	172b8 <__assert_fail@plt+0x5a68>
   17358:	ldr	r1, [sp, #44]	; 0x2c
   1735c:	ldr	r2, [sp, #20]
   17360:	add	r1, r2, r1
   17364:	sub	r2, r0, #1
   17368:	b	17378 <__assert_fail@plt+0x5b28>
   1736c:	add	r1, r1, #1
   17370:	subs	r2, r2, #1
   17374:	beq	172b8 <__assert_fail@plt+0x5a68>
   17378:	ldrb	r3, [r1]
   1737c:	sub	r3, r3, #91	; 0x5b
   17380:	cmp	r3, #33	; 0x21
   17384:	bhi	1736c <__assert_fail@plt+0x5b1c>
   17388:	add	r5, pc, #0
   1738c:	ldr	pc, [r5, r3, lsl #2]
   17390:	andeq	r7, r1, r4, ror r7
   17394:	andeq	r7, r1, r4, ror r7
   17398:	andeq	r7, r1, ip, ror #6
   1739c:	andeq	r7, r1, r4, ror r7
   173a0:	andeq	r7, r1, ip, ror #6
   173a4:	andeq	r7, r1, r4, ror r7
   173a8:	andeq	r7, r1, ip, ror #6
   173ac:	andeq	r7, r1, ip, ror #6
   173b0:	andeq	r7, r1, ip, ror #6
   173b4:	andeq	r7, r1, ip, ror #6
   173b8:	andeq	r7, r1, ip, ror #6
   173bc:	andeq	r7, r1, ip, ror #6
   173c0:	andeq	r7, r1, ip, ror #6
   173c4:	andeq	r7, r1, ip, ror #6
   173c8:	andeq	r7, r1, ip, ror #6
   173cc:	andeq	r7, r1, ip, ror #6
   173d0:	andeq	r7, r1, ip, ror #6
   173d4:	andeq	r7, r1, ip, ror #6
   173d8:	andeq	r7, r1, ip, ror #6
   173dc:	andeq	r7, r1, ip, ror #6
   173e0:	andeq	r7, r1, ip, ror #6
   173e4:	andeq	r7, r1, ip, ror #6
   173e8:	andeq	r7, r1, ip, ror #6
   173ec:	andeq	r7, r1, ip, ror #6
   173f0:	andeq	r7, r1, ip, ror #6
   173f4:	andeq	r7, r1, ip, ror #6
   173f8:	andeq	r7, r1, ip, ror #6
   173fc:	andeq	r7, r1, ip, ror #6
   17400:	andeq	r7, r1, ip, ror #6
   17404:	andeq	r7, r1, ip, ror #6
   17408:	andeq	r7, r1, ip, ror #6
   1740c:	andeq	r7, r1, ip, ror #6
   17410:	andeq	r7, r1, ip, ror #6
   17414:	andeq	r7, r1, r4, ror r7
   17418:	mov	r8, r0
   1741c:	b	16e40 <__assert_fail@plt+0x55f0>
   17420:	ldr	r0, [sp, #32]
   17424:	cmp	r0, #0
   17428:	beq	174c8 <__assert_fail@plt+0x5c78>
   1742c:	add	r0, r7, #2
   17430:	cmp	r0, lr
   17434:	bcs	174c8 <__assert_fail@plt+0x5c78>
   17438:	add	r1, r7, ip
   1743c:	ldrb	r1, [r1, #1]
   17440:	cmp	r1, #63	; 0x3f
   17444:	bne	174c8 <__assert_fail@plt+0x5c78>
   17448:	ldrb	r9, [ip, r0]
   1744c:	sub	r2, r9, #33	; 0x21
   17450:	cmp	r2, #29
   17454:	bhi	174c8 <__assert_fail@plt+0x5c78>
   17458:	movw	r1, #20929	; 0x51c1
   1745c:	mov	r3, #1
   17460:	movt	r1, #14336	; 0x3800
   17464:	tst	r1, r3, lsl r2
   17468:	beq	174c8 <__assert_fail@plt+0x5c78>
   1746c:	ldr	r1, [fp, #-76]	; 0xffffffb4
   17470:	tst	r1, #1
   17474:	bne	17798 <__assert_fail@plt+0x5f48>
   17478:	cmp	r8, r4
   1747c:	add	r2, r8, #1
   17480:	mov	r6, r9
   17484:	mov	r7, r0
   17488:	mov	r9, #0
   1748c:	movcc	r1, #63	; 0x3f
   17490:	strbcc	r1, [r5, r8]
   17494:	cmp	r2, r4
   17498:	movcc	r1, #34	; 0x22
   1749c:	strbcc	r1, [r5, r2]
   174a0:	add	r2, r8, #2
   174a4:	cmp	r2, r4
   174a8:	movcc	r1, #34	; 0x22
   174ac:	strbcc	r1, [r5, r2]
   174b0:	add	r2, r8, #3
   174b4:	add	r8, r8, #4
   174b8:	cmp	r2, r4
   174bc:	movcc	r1, #63	; 0x3f
   174c0:	strbcc	r1, [r5, r2]
   174c4:	b	16e40 <__assert_fail@plt+0x55f0>
   174c8:	mov	r9, #0
   174cc:	b	16e40 <__assert_fail@plt+0x55f0>
   174d0:	ldr	lr, [sp, #28]
   174d4:	ldr	r4, [fp, #-56]	; 0xffffffc8
   174d8:	add	r1, r2, r7
   174dc:	mov	r2, #0
   174e0:	str	r1, [sp, #44]	; 0x2c
   174e4:	tst	r0, #1
   174e8:	bne	17604 <__assert_fail@plt+0x5db4>
   174ec:	ldr	r1, [fp, #-76]	; 0xffffffb4
   174f0:	tst	r1, #1
   174f4:	bne	17794 <__assert_fail@plt+0x5f44>
   174f8:	ldr	r1, [fp, #-68]	; 0xffffffbc
   174fc:	subs	r2, r1, #2
   17500:	movwne	r2, #1
   17504:	orr	r2, r2, r4
   17508:	tst	r2, #1
   1750c:	bne	17550 <__assert_fail@plt+0x5d00>
   17510:	ldr	r1, [sp, #88]	; 0x58
   17514:	add	r2, r8, #1
   17518:	mov	r4, #1
   1751c:	cmp	r8, r1
   17520:	movcc	r1, #39	; 0x27
   17524:	strbcc	r1, [r5, r8]
   17528:	ldr	r1, [sp, #88]	; 0x58
   1752c:	cmp	r2, r1
   17530:	movcc	r1, #36	; 0x24
   17534:	strbcc	r1, [r5, r2]
   17538:	ldr	r1, [sp, #88]	; 0x58
   1753c:	add	r2, r8, #2
   17540:	add	r8, r8, #3
   17544:	cmp	r2, r1
   17548:	movcc	r1, #39	; 0x27
   1754c:	strbcc	r1, [r5, r2]
   17550:	ldr	r1, [sp, #88]	; 0x58
   17554:	add	r2, r8, #1
   17558:	cmp	r8, r1
   1755c:	movcc	r1, #92	; 0x5c
   17560:	strbcc	r1, [r5, r8]
   17564:	ldr	r1, [sp, #88]	; 0x58
   17568:	cmp	r2, r1
   1756c:	bcs	17580 <__assert_fail@plt+0x5d30>
   17570:	uxtb	r3, r6
   17574:	mov	r1, #48	; 0x30
   17578:	orr	r3, r1, r3, lsr #6
   1757c:	strb	r3, [r5, r2]
   17580:	ldr	r1, [sp, #88]	; 0x58
   17584:	add	r2, r8, #2
   17588:	add	r8, r8, #3
   1758c:	cmp	r2, r1
   17590:	lsrcc	r3, r6, #3
   17594:	movcc	r1, #6
   17598:	bficc	r3, r1, #3, #29
   1759c:	mov	r1, #6
   175a0:	bfi	r6, r1, #3, #29
   175a4:	strbcc	r3, [r5, r2]
   175a8:	mov	r2, #1
   175ac:	b	1762c <__assert_fail@plt+0x5ddc>
   175b0:	ldr	r1, [sp, #88]	; 0x58
   175b4:	ldr	r5, [fp, #-84]	; 0xffffffac
   175b8:	ldr	r4, [sp, #88]	; 0x58
   175bc:	cmp	r8, r1
   175c0:	movcc	r1, #39	; 0x27
   175c4:	strbcc	r1, [r5, r8]
   175c8:	add	r1, r8, #1
   175cc:	add	r8, r8, #2
   175d0:	cmp	r1, r4
   175d4:	movcc	r4, #39	; 0x27
   175d8:	strbcc	r4, [r5, r1]
   175dc:	mov	r4, #0
   175e0:	ldr	r1, [sp, #88]	; 0x58
   175e4:	cmp	r8, r1
   175e8:	ldr	r1, [sp, #72]	; 0x48
   175ec:	strbcc	r6, [r5, r8]
   175f0:	add	r8, r8, #1
   175f4:	ldrb	r6, [r1, r7]
   175f8:	mov	r7, r3
   175fc:	tst	r0, #1
   17600:	beq	174ec <__assert_fail@plt+0x5c9c>
   17604:	ldr	r1, [fp, #-52]	; 0xffffffcc
   17608:	tst	r1, #1
   1760c:	beq	17624 <__assert_fail@plt+0x5dd4>
   17610:	ldr	r1, [sp, #88]	; 0x58
   17614:	cmp	r8, r1
   17618:	movcc	r1, #92	; 0x5c
   1761c:	strbcc	r1, [r5, r8]
   17620:	add	r8, r8, #1
   17624:	mov	r1, #0
   17628:	str	r1, [fp, #-52]	; 0xffffffcc
   1762c:	ldr	r1, [sp, #44]	; 0x2c
   17630:	add	r3, r7, #1
   17634:	and	sl, r2, #1
   17638:	cmp	r1, r3
   1763c:	bls	17660 <__assert_fail@plt+0x5e10>
   17640:	cmp	sl, #0
   17644:	mvn	r5, r4
   17648:	movwne	sl, #1
   1764c:	orr	r5, r5, sl
   17650:	tst	r5, #1
   17654:	beq	175b0 <__assert_fail@plt+0x5d60>
   17658:	ldr	r5, [fp, #-84]	; 0xffffffac
   1765c:	b	175e0 <__assert_fail@plt+0x5d90>
   17660:	str	r4, [fp, #-56]	; 0xffffffc8
   17664:	ldr	r4, [sp, #88]	; 0x58
   17668:	cmp	sl, #0
   1766c:	movwne	sl, #1
   17670:	cmp	sl, #0
   17674:	beq	171d0 <__assert_fail@plt+0x5980>
   17678:	b	17204 <__assert_fail@plt+0x59b4>
   1767c:	mov	r9, #0
   17680:	b	176c0 <__assert_fail@plt+0x5e70>
   17684:	ldr	r0, [sp, #24]
   17688:	mov	r9, #0
   1768c:	cmp	lr, r0
   17690:	bls	176c0 <__assert_fail@plt+0x5e70>
   17694:	ldr	ip, [fp, #-80]	; 0xffffffb0
   17698:	ldr	r2, [sp, #44]	; 0x2c
   1769c:	add	r0, ip, r7
   176a0:	ldrb	r1, [r0, r2]
   176a4:	cmp	r1, #0
   176a8:	beq	17188 <__assert_fail@plt+0x5938>
   176ac:	add	r2, r2, #1
   176b0:	add	r1, r7, r2
   176b4:	cmp	r1, lr
   176b8:	bcc	176a0 <__assert_fail@plt+0x5e50>
   176bc:	b	17188 <__assert_fail@plt+0x5938>
   176c0:	ldr	ip, [fp, #-80]	; 0xffffffb0
   176c4:	ldr	r2, [sp, #44]	; 0x2c
   176c8:	b	17188 <__assert_fail@plt+0x5938>
   176cc:	mov	lr, r7
   176d0:	b	176d8 <__assert_fail@plt+0x5e88>
   176d4:	mvn	lr, #0
   176d8:	ldr	r1, [fp, #-68]	; 0xffffffbc
   176dc:	ldr	r2, [fp, #-76]	; 0xffffffb4
   176e0:	eor	r0, r1, #2
   176e4:	orr	r0, r0, r8
   176e8:	clz	r0, r0
   176ec:	lsr	r0, r0, #5
   176f0:	tst	r2, r0
   176f4:	bne	17798 <__assert_fail@plt+0x5f48>
   176f8:	subs	r0, r1, #2
   176fc:	movwne	r0, #1
   17700:	orr	r0, r2, r0
   17704:	tst	r0, #1
   17708:	ldreq	r0, [sp, #60]	; 0x3c
   1770c:	eoreq	r0, r0, #1
   17710:	tsteq	r0, #1
   17714:	bne	1782c <__assert_fail@plt+0x5fdc>
   17718:	ldr	r0, [fp, #-48]	; 0xffffffd0
   1771c:	mov	sl, lr
   17720:	tst	r0, #1
   17724:	bne	177f8 <__assert_fail@plt+0x5fa8>
   17728:	ldr	r6, [sp, #56]	; 0x38
   1772c:	mov	r9, #0
   17730:	cmp	r6, #0
   17734:	beq	17824 <__assert_fail@plt+0x5fd4>
   17738:	ldr	r0, [sp, #84]	; 0x54
   1773c:	mov	r1, #0
   17740:	mov	r7, #2
   17744:	cmp	r4, #0
   17748:	str	r1, [fp, #-48]	; 0xffffffd0
   1774c:	mov	r1, #0
   17750:	str	r1, [fp, #-76]	; 0xffffffb4
   17754:	beq	168f4 <__assert_fail@plt+0x50a4>
   17758:	b	1782c <__assert_fail@plt+0x5fdc>
   1775c:	ldr	ip, [fp, #-80]	; 0xffffffb0
   17760:	ldr	r1, [fp, #12]
   17764:	ldr	r2, [fp, #-68]	; 0xffffffbc
   17768:	mov	lr, r4
   1776c:	mov	r4, r6
   17770:	b	177b8 <__assert_fail@plt+0x5f68>
   17774:	tst	ip, #1
   17778:	ldr	r5, [fp, #-84]	; 0xffffffac
   1777c:	ldr	ip, [fp, #-80]	; 0xffffffb0
   17780:	ldr	r1, [fp, #12]
   17784:	mov	r0, #2
   17788:	movwne	r0, #4
   1778c:	mov	r2, r0
   17790:	b	177b8 <__assert_fail@plt+0x5f68>
   17794:	ldr	r4, [sp, #88]	; 0x58
   17798:	ldr	r1, [sp, #84]	; 0x54
   1779c:	mov	r0, #2
   177a0:	tst	r1, #1
   177a4:	movwne	r0, #4
   177a8:	ldr	r2, [fp, #-68]	; 0xffffffbc
   177ac:	ldr	r1, [fp, #12]
   177b0:	cmp	r2, #2
   177b4:	moveq	r2, r0
   177b8:	mov	r0, #0
   177bc:	bic	r1, r1, #2
   177c0:	str	r2, [sp]
   177c4:	mov	r2, ip
   177c8:	mov	r3, lr
   177cc:	str	r0, [sp, #8]
   177d0:	ldr	r0, [sp, #76]	; 0x4c
   177d4:	str	r1, [sp, #4]
   177d8:	mov	r1, r4
   177dc:	str	r0, [sp, #12]
   177e0:	ldr	r0, [sp, #80]	; 0x50
   177e4:	str	r0, [sp, #16]
   177e8:	mov	r0, r5
   177ec:	bl	16864 <__assert_fail@plt+0x5014>
   177f0:	mov	r8, r0
   177f4:	b	17878 <__assert_fail@plt+0x6028>
   177f8:	mov	r0, #5
   177fc:	ldr	r1, [sp, #56]	; 0x38
   17800:	ldr	r2, [fp, #-80]	; 0xffffffb0
   17804:	mov	r3, sl
   17808:	str	r0, [sp]
   1780c:	ldr	r0, [fp, #12]
   17810:	str	r0, [sp, #4]
   17814:	ldr	r0, [fp, #16]
   17818:	str	r0, [sp, #8]
   1781c:	ldr	r0, [sp, #76]	; 0x4c
   17820:	b	177dc <__assert_fail@plt+0x5f8c>
   17824:	mov	r0, #0
   17828:	str	r0, [fp, #-76]	; 0xffffffb4
   1782c:	ldr	r1, [fp, #-88]	; 0xffffffa8
   17830:	cmp	r1, #0
   17834:	beq	1786c <__assert_fail@plt+0x601c>
   17838:	ldr	r0, [fp, #-76]	; 0xffffffb4
   1783c:	tst	r0, #1
   17840:	bne	1786c <__assert_fail@plt+0x601c>
   17844:	ldrb	r0, [r1]
   17848:	cmp	r0, #0
   1784c:	beq	1786c <__assert_fail@plt+0x601c>
   17850:	add	r1, r1, #1
   17854:	cmp	r8, r4
   17858:	strbcc	r0, [r5, r8]
   1785c:	add	r8, r8, #1
   17860:	ldrb	r0, [r1], #1
   17864:	cmp	r0, #0
   17868:	bne	17854 <__assert_fail@plt+0x6004>
   1786c:	cmp	r8, r4
   17870:	movcc	r0, #0
   17874:	strbcc	r0, [r5, r8]
   17878:	mov	r0, r8
   1787c:	sub	sp, fp, #28
   17880:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17884:	mov	r0, #4
   17888:	b	177a8 <__assert_fail@plt+0x5f58>
   1788c:	bl	11814 <abort@plt>
   17890:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17894:	add	fp, sp, #28
   17898:	sub	sp, sp, #28
   1789c:	movw	r5, #53768	; 0xd208
   178a0:	cmp	r2, #0
   178a4:	mov	r4, r1
   178a8:	mov	r7, r0
   178ac:	str	r0, [sp, #20]
   178b0:	movt	r5, #2
   178b4:	movne	r5, r2
   178b8:	bl	116d0 <__errno_location@plt>
   178bc:	mov	sl, r0
   178c0:	ldr	r2, [r5, #40]	; 0x28
   178c4:	ldr	r3, [r5, #44]	; 0x2c
   178c8:	ldm	r5, {r0, r1}
   178cc:	orr	r8, r1, #1
   178d0:	add	r9, r5, #8
   178d4:	mov	r1, #0
   178d8:	ldr	r6, [sl]
   178dc:	stm	sp, {r0, r8, r9}
   178e0:	mov	r0, #0
   178e4:	str	r2, [sp, #12]
   178e8:	str	r3, [sp, #16]
   178ec:	mov	r2, r7
   178f0:	mov	r3, r4
   178f4:	str	r6, [sp, #24]
   178f8:	mov	r6, r4
   178fc:	bl	16864 <__assert_fail@plt+0x5014>
   17900:	add	r7, r0, #1
   17904:	mov	r0, r7
   17908:	bl	1958c <__assert_fail@plt+0x7d3c>
   1790c:	mov	r4, r0
   17910:	ldr	r0, [r5]
   17914:	ldr	r2, [r5, #44]	; 0x2c
   17918:	ldr	r1, [r5, #40]	; 0x28
   1791c:	mov	r3, r6
   17920:	stm	sp, {r0, r8, r9}
   17924:	str	r2, [sp, #16]
   17928:	ldr	r2, [sp, #20]
   1792c:	str	r1, [sp, #12]
   17930:	mov	r0, r4
   17934:	mov	r1, r7
   17938:	bl	16864 <__assert_fail@plt+0x5014>
   1793c:	ldr	r0, [sp, #24]
   17940:	str	r0, [sl]
   17944:	mov	r0, r4
   17948:	sub	sp, fp, #28
   1794c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17950:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17954:	add	fp, sp, #28
   17958:	sub	sp, sp, #36	; 0x24
   1795c:	movw	r8, #53768	; 0xd208
   17960:	cmp	r3, #0
   17964:	mov	r4, r2
   17968:	str	r2, [sp, #24]
   1796c:	mov	r5, r1
   17970:	mov	r6, r0
   17974:	str	r0, [sp, #20]
   17978:	movt	r8, #2
   1797c:	movne	r8, r3
   17980:	bl	116d0 <__errno_location@plt>
   17984:	str	r0, [sp, #28]
   17988:	ldr	r1, [r8, #40]	; 0x28
   1798c:	ldr	r2, [r8, #44]	; 0x2c
   17990:	ldr	r7, [r0]
   17994:	cmp	r4, #0
   17998:	add	sl, r8, #8
   1799c:	mov	r0, #0
   179a0:	ldm	r8, {r3, r9}
   179a4:	orreq	r9, r9, #1
   179a8:	stm	sp, {r3, r9, sl}
   179ac:	str	r1, [sp, #12]
   179b0:	str	r2, [sp, #16]
   179b4:	mov	r1, #0
   179b8:	mov	r2, r6
   179bc:	mov	r3, r5
   179c0:	str	r7, [sp, #32]
   179c4:	mov	r7, r5
   179c8:	bl	16864 <__assert_fail@plt+0x5014>
   179cc:	add	r4, r0, #1
   179d0:	mov	r5, r0
   179d4:	mov	r0, r4
   179d8:	bl	1958c <__assert_fail@plt+0x7d3c>
   179dc:	mov	r6, r0
   179e0:	ldr	r0, [r8]
   179e4:	ldr	r2, [r8, #44]	; 0x2c
   179e8:	ldr	r1, [r8, #40]	; 0x28
   179ec:	mov	r3, r7
   179f0:	stm	sp, {r0, r9, sl}
   179f4:	str	r2, [sp, #16]
   179f8:	ldr	r2, [sp, #20]
   179fc:	str	r1, [sp, #12]
   17a00:	mov	r0, r6
   17a04:	mov	r1, r4
   17a08:	bl	16864 <__assert_fail@plt+0x5014>
   17a0c:	ldr	r0, [sp, #24]
   17a10:	ldr	r1, [sp, #32]
   17a14:	ldr	r2, [sp, #28]
   17a18:	cmp	r0, #0
   17a1c:	str	r1, [r2]
   17a20:	strne	r5, [r0]
   17a24:	mov	r0, r6
   17a28:	sub	sp, fp, #28
   17a2c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17a30:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   17a34:	add	fp, sp, #24
   17a38:	movw	r5, #53612	; 0xd16c
   17a3c:	movw	r8, #53608	; 0xd168
   17a40:	movt	r5, #2
   17a44:	movt	r8, #2
   17a48:	ldr	r0, [r5]
   17a4c:	ldr	r4, [r8]
   17a50:	cmp	r0, #2
   17a54:	blt	17a80 <__assert_fail@plt+0x6230>
   17a58:	add	r7, r4, #12
   17a5c:	mov	r6, #0
   17a60:	ldr	r0, [r7, r6, lsl #3]
   17a64:	bl	1a1dc <__assert_fail@plt+0x898c>
   17a68:	ldr	r1, [r5]
   17a6c:	add	r2, r6, #2
   17a70:	add	r0, r6, #1
   17a74:	mov	r6, r0
   17a78:	cmp	r2, r1
   17a7c:	blt	17a60 <__assert_fail@plt+0x6210>
   17a80:	ldr	r0, [r4, #4]
   17a84:	movw	r9, #53816	; 0xd238
   17a88:	movw	r7, #53616	; 0xd170
   17a8c:	movt	r9, #2
   17a90:	movt	r7, #2
   17a94:	cmp	r0, r9
   17a98:	beq	17aa8 <__assert_fail@plt+0x6258>
   17a9c:	bl	1a1dc <__assert_fail@plt+0x898c>
   17aa0:	mov	r0, #256	; 0x100
   17aa4:	stm	r7, {r0, r9}
   17aa8:	cmp	r4, r7
   17aac:	beq	17abc <__assert_fail@plt+0x626c>
   17ab0:	mov	r0, r4
   17ab4:	bl	1a1dc <__assert_fail@plt+0x898c>
   17ab8:	str	r7, [r8]
   17abc:	mov	r0, #1
   17ac0:	str	r0, [r5]
   17ac4:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   17ac8:	movw	r3, #53768	; 0xd208
   17acc:	mvn	r2, #0
   17ad0:	movt	r3, #2
   17ad4:	b	17ad8 <__assert_fail@plt+0x6288>
   17ad8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17adc:	add	fp, sp, #28
   17ae0:	sub	sp, sp, #44	; 0x2c
   17ae4:	mov	r7, r3
   17ae8:	str	r2, [sp, #36]	; 0x24
   17aec:	str	r1, [sp, #32]
   17af0:	mov	r5, r0
   17af4:	bl	116d0 <__errno_location@plt>
   17af8:	cmp	r5, #0
   17afc:	bmi	17c6c <__assert_fail@plt+0x641c>
   17b00:	cmn	r5, #-2147483647	; 0x80000001
   17b04:	beq	17c6c <__assert_fail@plt+0x641c>
   17b08:	movw	r8, #53612	; 0xd16c
   17b0c:	movw	r4, #53608	; 0xd168
   17b10:	str	r0, [sp, #28]
   17b14:	ldr	r0, [r0]
   17b18:	movt	r8, #2
   17b1c:	movt	r4, #2
   17b20:	ldr	r1, [r8]
   17b24:	ldr	r6, [r4]
   17b28:	str	r0, [sp, #24]
   17b2c:	cmp	r1, r5
   17b30:	ble	17b3c <__assert_fail@plt+0x62ec>
   17b34:	mov	sl, r6
   17b38:	b	17ba8 <__assert_fail@plt+0x6358>
   17b3c:	movw	r9, #53616	; 0xd170
   17b40:	mov	r0, #8
   17b44:	str	r1, [fp, #-32]	; 0xffffffe0
   17b48:	sub	r1, r5, r1
   17b4c:	mvn	r3, #-2147483648	; 0x80000000
   17b50:	movt	r9, #2
   17b54:	str	r0, [sp]
   17b58:	add	r2, r1, #1
   17b5c:	sub	r1, fp, #32
   17b60:	subs	r0, r6, r9
   17b64:	movne	r0, r6
   17b68:	bl	1978c <__assert_fail@plt+0x7f3c>
   17b6c:	mov	sl, r0
   17b70:	cmp	r6, r9
   17b74:	str	r0, [r4]
   17b78:	bne	17b84 <__assert_fail@plt+0x6334>
   17b7c:	ldrd	r0, [r9]
   17b80:	stm	sl, {r0, r1}
   17b84:	ldr	r1, [r8]
   17b88:	ldr	r2, [fp, #-32]	; 0xffffffe0
   17b8c:	add	r0, sl, r1, lsl #3
   17b90:	sub	r1, r2, r1
   17b94:	lsl	r2, r1, #3
   17b98:	mov	r1, #0
   17b9c:	bl	116f4 <memset@plt>
   17ba0:	ldr	r0, [fp, #-32]	; 0xffffffe0
   17ba4:	str	r0, [r8]
   17ba8:	mov	r9, sl
   17bac:	ldm	r7, {r0, r1}
   17bb0:	orr	r8, r1, #1
   17bb4:	add	r1, r7, #8
   17bb8:	ldr	r2, [r7, #40]	; 0x28
   17bbc:	ldr	r3, [r7, #44]	; 0x2c
   17bc0:	ldr	r6, [r9, r5, lsl #3]!
   17bc4:	str	r1, [sp, #20]
   17bc8:	ldr	r4, [r9, #4]!
   17bcc:	stm	sp, {r0, r8}
   17bd0:	add	r0, sp, #8
   17bd4:	stm	r0, {r1, r2, r3}
   17bd8:	ldr	r2, [sp, #32]
   17bdc:	ldr	r3, [sp, #36]	; 0x24
   17be0:	mov	r1, r6
   17be4:	mov	r0, r4
   17be8:	bl	16864 <__assert_fail@plt+0x5014>
   17bec:	cmp	r6, r0
   17bf0:	bhi	17c54 <__assert_fail@plt+0x6404>
   17bf4:	add	r6, r0, #1
   17bf8:	movw	r0, #53816	; 0xd238
   17bfc:	movt	r0, #2
   17c00:	str	r6, [sl, r5, lsl #3]
   17c04:	cmp	r4, r0
   17c08:	beq	17c14 <__assert_fail@plt+0x63c4>
   17c0c:	mov	r0, r4
   17c10:	bl	1a1dc <__assert_fail@plt+0x898c>
   17c14:	mov	r0, r6
   17c18:	bl	1958c <__assert_fail@plt+0x7d3c>
   17c1c:	str	r0, [r9]
   17c20:	mov	r4, r0
   17c24:	add	r3, sp, #8
   17c28:	ldr	r0, [r7]
   17c2c:	ldr	r1, [r7, #40]	; 0x28
   17c30:	ldr	r2, [r7, #44]	; 0x2c
   17c34:	stm	sp, {r0, r8}
   17c38:	ldr	r0, [sp, #20]
   17c3c:	stm	r3, {r0, r1, r2}
   17c40:	ldr	r2, [sp, #32]
   17c44:	ldr	r3, [sp, #36]	; 0x24
   17c48:	mov	r0, r4
   17c4c:	mov	r1, r6
   17c50:	bl	16864 <__assert_fail@plt+0x5014>
   17c54:	ldr	r0, [sp, #28]
   17c58:	ldr	r1, [sp, #24]
   17c5c:	str	r1, [r0]
   17c60:	mov	r0, r4
   17c64:	sub	sp, fp, #28
   17c68:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17c6c:	bl	11814 <abort@plt>
   17c70:	movw	r3, #53768	; 0xd208
   17c74:	movt	r3, #2
   17c78:	b	17ad8 <__assert_fail@plt+0x6288>
   17c7c:	movw	r3, #53768	; 0xd208
   17c80:	mov	r1, r0
   17c84:	mov	r0, #0
   17c88:	mvn	r2, #0
   17c8c:	movt	r3, #2
   17c90:	b	17ad8 <__assert_fail@plt+0x6288>
   17c94:	movw	r3, #53768	; 0xd208
   17c98:	mov	r2, r1
   17c9c:	mov	r1, r0
   17ca0:	mov	r0, #0
   17ca4:	movt	r3, #2
   17ca8:	b	17ad8 <__assert_fail@plt+0x6288>
   17cac:	push	{fp, lr}
   17cb0:	mov	fp, sp
   17cb4:	sub	sp, sp, #48	; 0x30
   17cb8:	vmov.i32	q8, #0	; 0x00000000
   17cbc:	mov	ip, #32
   17cc0:	mov	r3, sp
   17cc4:	mov	lr, r2
   17cc8:	cmp	r1, #10
   17ccc:	add	r2, r3, #16
   17cd0:	vst1.64	{d16-d17}, [r3], ip
   17cd4:	vst1.64	{d16-d17}, [r2]
   17cd8:	vst1.64	{d16-d17}, [r3]
   17cdc:	beq	17cfc <__assert_fail@plt+0x64ac>
   17ce0:	str	r1, [sp]
   17ce4:	mov	r3, sp
   17ce8:	mov	r1, lr
   17cec:	mvn	r2, #0
   17cf0:	bl	17ad8 <__assert_fail@plt+0x6288>
   17cf4:	mov	sp, fp
   17cf8:	pop	{fp, pc}
   17cfc:	bl	11814 <abort@plt>
   17d00:	push	{r4, sl, fp, lr}
   17d04:	add	fp, sp, #8
   17d08:	sub	sp, sp, #48	; 0x30
   17d0c:	vmov.i32	q8, #0	; 0x00000000
   17d10:	mov	ip, r3
   17d14:	mov	r3, sp
   17d18:	mov	lr, #32
   17d1c:	cmp	r1, #10
   17d20:	add	r4, r3, #16
   17d24:	vst1.64	{d16-d17}, [r3], lr
   17d28:	vst1.64	{d16-d17}, [r4]
   17d2c:	vst1.64	{d16-d17}, [r3]
   17d30:	beq	17d50 <__assert_fail@plt+0x6500>
   17d34:	str	r1, [sp]
   17d38:	mov	r1, r2
   17d3c:	mov	r3, sp
   17d40:	mov	r2, ip
   17d44:	bl	17ad8 <__assert_fail@plt+0x6288>
   17d48:	sub	sp, fp, #8
   17d4c:	pop	{r4, sl, fp, pc}
   17d50:	bl	11814 <abort@plt>
   17d54:	push	{fp, lr}
   17d58:	mov	fp, sp
   17d5c:	sub	sp, sp, #48	; 0x30
   17d60:	vmov.i32	q8, #0	; 0x00000000
   17d64:	mov	r3, sp
   17d68:	mov	ip, #32
   17d6c:	cmp	r0, #10
   17d70:	add	r2, r3, #16
   17d74:	vst1.64	{d16-d17}, [r3], ip
   17d78:	vst1.64	{d16-d17}, [r2]
   17d7c:	vst1.64	{d16-d17}, [r3]
   17d80:	beq	17da0 <__assert_fail@plt+0x6550>
   17d84:	str	r0, [sp]
   17d88:	mov	r3, sp
   17d8c:	mov	r0, #0
   17d90:	mvn	r2, #0
   17d94:	bl	17ad8 <__assert_fail@plt+0x6288>
   17d98:	mov	sp, fp
   17d9c:	pop	{fp, pc}
   17da0:	bl	11814 <abort@plt>
   17da4:	push	{fp, lr}
   17da8:	mov	fp, sp
   17dac:	sub	sp, sp, #48	; 0x30
   17db0:	vmov.i32	q8, #0	; 0x00000000
   17db4:	mov	r3, sp
   17db8:	mov	ip, #32
   17dbc:	cmp	r0, #10
   17dc0:	add	lr, r3, #16
   17dc4:	vst1.64	{d16-d17}, [r3], ip
   17dc8:	vst1.64	{d16-d17}, [lr]
   17dcc:	vst1.64	{d16-d17}, [r3]
   17dd0:	beq	17dec <__assert_fail@plt+0x659c>
   17dd4:	str	r0, [sp]
   17dd8:	mov	r3, sp
   17ddc:	mov	r0, #0
   17de0:	bl	17ad8 <__assert_fail@plt+0x6288>
   17de4:	mov	sp, fp
   17de8:	pop	{fp, pc}
   17dec:	bl	11814 <abort@plt>
   17df0:	push	{r4, sl, fp, lr}
   17df4:	add	fp, sp, #8
   17df8:	sub	sp, sp, #48	; 0x30
   17dfc:	mov	lr, r0
   17e00:	movw	r0, #53768	; 0xd208
   17e04:	mov	ip, r1
   17e08:	mov	r1, #32
   17e0c:	mov	r4, #1
   17e10:	movt	r0, #2
   17e14:	add	r3, r0, #16
   17e18:	vld1.64	{d16-d17}, [r0], r1
   17e1c:	vld1.64	{d20-d21}, [r0]
   17e20:	vld1.64	{d18-d19}, [r3]
   17e24:	mov	r3, sp
   17e28:	add	r0, r3, #32
   17e2c:	add	r1, r3, #16
   17e30:	vst1.64	{d20-d21}, [r0]
   17e34:	mov	r0, #28
   17e38:	vst1.64	{d18-d19}, [r1]
   17e3c:	mov	r1, r3
   17e40:	and	r0, r0, r2, lsr #3
   17e44:	and	r2, r2, #31
   17e48:	vst1.64	{d16-d17}, [r1], r0
   17e4c:	ldr	r0, [r1, #8]
   17e50:	bic	r4, r4, r0, lsr r2
   17e54:	eor	r0, r0, r4, lsl r2
   17e58:	mov	r2, ip
   17e5c:	str	r0, [r1, #8]
   17e60:	mov	r0, #0
   17e64:	mov	r1, lr
   17e68:	bl	17ad8 <__assert_fail@plt+0x6288>
   17e6c:	sub	sp, fp, #8
   17e70:	pop	{r4, sl, fp, pc}
   17e74:	push	{fp, lr}
   17e78:	mov	fp, sp
   17e7c:	sub	sp, sp, #48	; 0x30
   17e80:	mov	ip, r0
   17e84:	movw	r0, #53768	; 0xd208
   17e88:	mov	r2, #32
   17e8c:	movt	r0, #2
   17e90:	add	r3, r0, #16
   17e94:	vld1.64	{d16-d17}, [r0], r2
   17e98:	vld1.64	{d20-d21}, [r0]
   17e9c:	vld1.64	{d18-d19}, [r3]
   17ea0:	mov	r3, sp
   17ea4:	add	r0, r3, #32
   17ea8:	add	r2, r3, #16
   17eac:	vst1.64	{d20-d21}, [r0]
   17eb0:	mov	r0, #28
   17eb4:	vst1.64	{d18-d19}, [r2]
   17eb8:	mov	r2, r3
   17ebc:	and	r0, r0, r1, lsr #3
   17ec0:	and	r1, r1, #31
   17ec4:	vst1.64	{d16-d17}, [r2], r0
   17ec8:	mov	r0, #1
   17ecc:	ldr	lr, [r2, #8]
   17ed0:	bic	r0, r0, lr, lsr r1
   17ed4:	eor	r0, lr, r0, lsl r1
   17ed8:	mov	r1, ip
   17edc:	str	r0, [r2, #8]
   17ee0:	mov	r0, #0
   17ee4:	mvn	r2, #0
   17ee8:	bl	17ad8 <__assert_fail@plt+0x6288>
   17eec:	mov	sp, fp
   17ef0:	pop	{fp, pc}
   17ef4:	push	{fp, lr}
   17ef8:	mov	fp, sp
   17efc:	sub	sp, sp, #48	; 0x30
   17f00:	mov	r1, r0
   17f04:	movw	r0, #53768	; 0xd208
   17f08:	mov	r3, #32
   17f0c:	movt	r0, #2
   17f10:	add	r2, r0, #16
   17f14:	vld1.64	{d16-d17}, [r0], r3
   17f18:	mov	r3, sp
   17f1c:	vld1.64	{d18-d19}, [r2]
   17f20:	vld1.64	{d20-d21}, [r0]
   17f24:	add	r2, r3, #16
   17f28:	add	r0, r3, #32
   17f2c:	vst1.64	{d18-d19}, [r2]
   17f30:	vst1.64	{d20-d21}, [r0]
   17f34:	mov	r0, #12
   17f38:	mov	r2, r3
   17f3c:	vst1.64	{d16-d17}, [r2], r0
   17f40:	ldr	r0, [r2]
   17f44:	orr	r0, r0, #67108864	; 0x4000000
   17f48:	str	r0, [r2]
   17f4c:	mov	r0, #0
   17f50:	mvn	r2, #0
   17f54:	bl	17ad8 <__assert_fail@plt+0x6288>
   17f58:	mov	sp, fp
   17f5c:	pop	{fp, pc}
   17f60:	push	{fp, lr}
   17f64:	mov	fp, sp
   17f68:	sub	sp, sp, #48	; 0x30
   17f6c:	mov	ip, r1
   17f70:	mov	r1, r0
   17f74:	movw	r0, #53768	; 0xd208
   17f78:	mov	r2, #32
   17f7c:	movt	r0, #2
   17f80:	add	r3, r0, #16
   17f84:	vld1.64	{d16-d17}, [r0], r2
   17f88:	vld1.64	{d18-d19}, [r3]
   17f8c:	vld1.64	{d20-d21}, [r0]
   17f90:	mov	r3, sp
   17f94:	add	r2, r3, #16
   17f98:	add	r0, r3, #32
   17f9c:	vst1.64	{d18-d19}, [r2]
   17fa0:	vst1.64	{d20-d21}, [r0]
   17fa4:	mov	r0, #12
   17fa8:	mov	r2, r3
   17fac:	vst1.64	{d16-d17}, [r2], r0
   17fb0:	ldr	r0, [r2]
   17fb4:	orr	r0, r0, #67108864	; 0x4000000
   17fb8:	str	r0, [r2]
   17fbc:	mov	r0, #0
   17fc0:	mov	r2, ip
   17fc4:	bl	17ad8 <__assert_fail@plt+0x6288>
   17fc8:	mov	sp, fp
   17fcc:	pop	{fp, pc}
   17fd0:	push	{r4, sl, fp, lr}
   17fd4:	add	fp, sp, #8
   17fd8:	sub	sp, sp, #96	; 0x60
   17fdc:	vmov.i32	q8, #0	; 0x00000000
   17fe0:	mov	ip, r2
   17fe4:	mov	r2, sp
   17fe8:	mov	r4, #28
   17fec:	cmp	r1, #10
   17ff0:	mov	r3, r2
   17ff4:	add	lr, r2, #16
   17ff8:	vst1.64	{d16-d17}, [r3], r4
   17ffc:	vst1.64	{d16-d17}, [lr]
   18000:	vst1.32	{d16-d17}, [r3]
   18004:	beq	18054 <__assert_fail@plt+0x6804>
   18008:	vld1.64	{d16-d17}, [r2], r4
   1800c:	vld1.64	{d18-d19}, [lr]
   18010:	add	r3, sp, #48	; 0x30
   18014:	vld1.32	{d20-d21}, [r2]
   18018:	add	r2, r3, #20
   1801c:	add	r4, r3, #4
   18020:	vst1.32	{d18-d19}, [r2]
   18024:	add	r2, r3, #32
   18028:	vst1.32	{d16-d17}, [r4]
   1802c:	vst1.32	{d20-d21}, [r2]
   18030:	str	r1, [sp, #48]	; 0x30
   18034:	mvn	r2, #0
   18038:	ldr	r1, [sp, #60]	; 0x3c
   1803c:	orr	r1, r1, #67108864	; 0x4000000
   18040:	str	r1, [sp, #60]	; 0x3c
   18044:	mov	r1, ip
   18048:	bl	17ad8 <__assert_fail@plt+0x6288>
   1804c:	sub	sp, fp, #8
   18050:	pop	{r4, sl, fp, pc}
   18054:	bl	11814 <abort@plt>
   18058:	push	{r4, r5, r6, sl, fp, lr}
   1805c:	add	fp, sp, #16
   18060:	sub	sp, sp, #48	; 0x30
   18064:	mov	ip, r3
   18068:	movw	r3, #53768	; 0xd208
   1806c:	mov	r6, #32
   18070:	cmp	r1, #0
   18074:	mov	r4, sp
   18078:	movt	r3, #2
   1807c:	cmpne	r2, #0
   18080:	add	r5, r4, #16
   18084:	add	lr, r3, #16
   18088:	vld1.64	{d16-d17}, [r3], r6
   1808c:	vld1.64	{d18-d19}, [lr]
   18090:	vld1.64	{d20-d21}, [r3]
   18094:	mov	r3, #10
   18098:	vst1.64	{d16-d17}, [r4], r6
   1809c:	vst1.64	{d18-d19}, [r5]
   180a0:	vst1.64	{d20-d21}, [r4]
   180a4:	str	r3, [sp]
   180a8:	bne	180b0 <__assert_fail@plt+0x6860>
   180ac:	bl	11814 <abort@plt>
   180b0:	str	r2, [sp, #44]	; 0x2c
   180b4:	str	r1, [sp, #40]	; 0x28
   180b8:	mov	r3, sp
   180bc:	mov	r1, ip
   180c0:	mvn	r2, #0
   180c4:	bl	17ad8 <__assert_fail@plt+0x6288>
   180c8:	sub	sp, fp, #16
   180cc:	pop	{r4, r5, r6, sl, fp, pc}
   180d0:	push	{r4, r5, r6, sl, fp, lr}
   180d4:	add	fp, sp, #16
   180d8:	sub	sp, sp, #48	; 0x30
   180dc:	mov	lr, r3
   180e0:	movw	r3, #53768	; 0xd208
   180e4:	mov	r6, #32
   180e8:	cmp	r1, #0
   180ec:	mov	r4, sp
   180f0:	movt	r3, #2
   180f4:	cmpne	r2, #0
   180f8:	add	r5, r4, #16
   180fc:	add	ip, r3, #16
   18100:	vld1.64	{d16-d17}, [r3], r6
   18104:	vld1.64	{d18-d19}, [ip]
   18108:	vld1.64	{d20-d21}, [r3]
   1810c:	mov	r3, #10
   18110:	vst1.64	{d16-d17}, [r4], r6
   18114:	vst1.64	{d18-d19}, [r5]
   18118:	vst1.64	{d20-d21}, [r4]
   1811c:	str	r3, [sp]
   18120:	bne	18128 <__assert_fail@plt+0x68d8>
   18124:	bl	11814 <abort@plt>
   18128:	ldr	ip, [fp, #8]
   1812c:	str	r2, [sp, #44]	; 0x2c
   18130:	str	r1, [sp, #40]	; 0x28
   18134:	mov	r3, sp
   18138:	mov	r1, lr
   1813c:	mov	r2, ip
   18140:	bl	17ad8 <__assert_fail@plt+0x6288>
   18144:	sub	sp, fp, #16
   18148:	pop	{r4, r5, r6, sl, fp, pc}
   1814c:	push	{r4, sl, fp, lr}
   18150:	add	fp, sp, #8
   18154:	sub	sp, sp, #48	; 0x30
   18158:	movw	r3, #53768	; 0xd208
   1815c:	mov	lr, #32
   18160:	mov	ip, r2
   18164:	cmp	r0, #0
   18168:	movt	r3, #2
   1816c:	cmpne	r1, #0
   18170:	add	r2, r3, #16
   18174:	vld1.64	{d16-d17}, [r3], lr
   18178:	vld1.64	{d20-d21}, [r3]
   1817c:	vld1.64	{d18-d19}, [r2]
   18180:	mov	r2, sp
   18184:	add	r4, r2, #16
   18188:	vst1.64	{d16-d17}, [r2], lr
   1818c:	vst1.64	{d20-d21}, [r2]
   18190:	mov	r2, #10
   18194:	vst1.64	{d18-d19}, [r4]
   18198:	str	r2, [sp]
   1819c:	bne	181a4 <__assert_fail@plt+0x6954>
   181a0:	bl	11814 <abort@plt>
   181a4:	str	r1, [sp, #44]	; 0x2c
   181a8:	str	r0, [sp, #40]	; 0x28
   181ac:	mov	r3, sp
   181b0:	mov	r0, #0
   181b4:	mov	r1, ip
   181b8:	mvn	r2, #0
   181bc:	bl	17ad8 <__assert_fail@plt+0x6288>
   181c0:	sub	sp, fp, #8
   181c4:	pop	{r4, sl, fp, pc}
   181c8:	push	{r4, r5, fp, lr}
   181cc:	add	fp, sp, #8
   181d0:	sub	sp, sp, #48	; 0x30
   181d4:	mov	ip, r3
   181d8:	movw	r3, #53768	; 0xd208
   181dc:	mov	r4, #32
   181e0:	mov	lr, r2
   181e4:	cmp	r0, #0
   181e8:	movt	r3, #2
   181ec:	cmpne	r1, #0
   181f0:	add	r2, r3, #16
   181f4:	vld1.64	{d16-d17}, [r3], r4
   181f8:	vld1.64	{d20-d21}, [r3]
   181fc:	vld1.64	{d18-d19}, [r2]
   18200:	mov	r2, sp
   18204:	add	r5, r2, #16
   18208:	vst1.64	{d16-d17}, [r2], r4
   1820c:	vst1.64	{d20-d21}, [r2]
   18210:	mov	r2, #10
   18214:	vst1.64	{d18-d19}, [r5]
   18218:	str	r2, [sp]
   1821c:	bne	18224 <__assert_fail@plt+0x69d4>
   18220:	bl	11814 <abort@plt>
   18224:	str	r1, [sp, #44]	; 0x2c
   18228:	str	r0, [sp, #40]	; 0x28
   1822c:	mov	r3, sp
   18230:	mov	r0, #0
   18234:	mov	r1, lr
   18238:	mov	r2, ip
   1823c:	bl	17ad8 <__assert_fail@plt+0x6288>
   18240:	sub	sp, fp, #8
   18244:	pop	{r4, r5, fp, pc}
   18248:	movw	r3, #53624	; 0xd178
   1824c:	movt	r3, #2
   18250:	b	17ad8 <__assert_fail@plt+0x6288>
   18254:	movw	r3, #53624	; 0xd178
   18258:	mov	r2, r1
   1825c:	mov	r1, r0
   18260:	mov	r0, #0
   18264:	movt	r3, #2
   18268:	b	17ad8 <__assert_fail@plt+0x6288>
   1826c:	movw	r3, #53624	; 0xd178
   18270:	mvn	r2, #0
   18274:	movt	r3, #2
   18278:	b	17ad8 <__assert_fail@plt+0x6288>
   1827c:	movw	r3, #53624	; 0xd178
   18280:	mov	r1, r0
   18284:	mov	r0, #0
   18288:	mvn	r2, #0
   1828c:	movt	r3, #2
   18290:	b	17ad8 <__assert_fail@plt+0x6288>
   18294:	push	{r4, r5, fp, lr}
   18298:	add	fp, sp, #8
   1829c:	mov	r5, r0
   182a0:	mov	r4, r1
   182a4:	mov	r0, #0
   182a8:	mov	r2, #5
   182ac:	mov	r1, r5
   182b0:	bl	11538 <dcgettext@plt>
   182b4:	cmp	r0, r5
   182b8:	popne	{r4, r5, fp, pc}
   182bc:	bl	1a2ac <__assert_fail@plt+0x8a5c>
   182c0:	ldrb	r1, [r0]
   182c4:	and	r1, r1, #223	; 0xdf
   182c8:	cmp	r1, #71	; 0x47
   182cc:	beq	18334 <__assert_fail@plt+0x6ae4>
   182d0:	cmp	r1, #85	; 0x55
   182d4:	bne	1838c <__assert_fail@plt+0x6b3c>
   182d8:	ldrb	r1, [r0, #1]
   182dc:	and	r1, r1, #223	; 0xdf
   182e0:	cmp	r1, #84	; 0x54
   182e4:	bne	1838c <__assert_fail@plt+0x6b3c>
   182e8:	ldrb	r1, [r0, #2]
   182ec:	and	r1, r1, #223	; 0xdf
   182f0:	cmp	r1, #70	; 0x46
   182f4:	bne	1838c <__assert_fail@plt+0x6b3c>
   182f8:	ldrb	r1, [r0, #3]
   182fc:	cmp	r1, #45	; 0x2d
   18300:	bne	1838c <__assert_fail@plt+0x6b3c>
   18304:	ldrb	r1, [r0, #4]
   18308:	cmp	r1, #56	; 0x38
   1830c:	bne	1838c <__assert_fail@plt+0x6b3c>
   18310:	ldrb	r0, [r0, #5]
   18314:	cmp	r0, #0
   18318:	bne	1838c <__assert_fail@plt+0x6b3c>
   1831c:	ldrb	r1, [r5]
   18320:	movw	r2, #47664	; 0xba30
   18324:	movw	r0, #47668	; 0xba34
   18328:	movt	r2, #1
   1832c:	movt	r0, #1
   18330:	b	183bc <__assert_fail@plt+0x6b6c>
   18334:	ldrb	r1, [r0, #1]
   18338:	and	r1, r1, #223	; 0xdf
   1833c:	cmp	r1, #66	; 0x42
   18340:	bne	1838c <__assert_fail@plt+0x6b3c>
   18344:	ldrb	r1, [r0, #2]
   18348:	cmp	r1, #49	; 0x31
   1834c:	bne	1838c <__assert_fail@plt+0x6b3c>
   18350:	ldrb	r1, [r0, #3]
   18354:	cmp	r1, #56	; 0x38
   18358:	bne	1838c <__assert_fail@plt+0x6b3c>
   1835c:	ldrb	r1, [r0, #4]
   18360:	cmp	r1, #48	; 0x30
   18364:	bne	1838c <__assert_fail@plt+0x6b3c>
   18368:	ldrb	r1, [r0, #5]
   1836c:	cmp	r1, #51	; 0x33
   18370:	bne	1838c <__assert_fail@plt+0x6b3c>
   18374:	ldrb	r1, [r0, #6]
   18378:	cmp	r1, #48	; 0x30
   1837c:	bne	1838c <__assert_fail@plt+0x6b3c>
   18380:	ldrb	r0, [r0, #7]
   18384:	cmp	r0, #0
   18388:	beq	183a8 <__assert_fail@plt+0x6b58>
   1838c:	movw	r1, #47660	; 0xba2c
   18390:	movw	r0, #49009	; 0xbf71
   18394:	cmp	r4, #9
   18398:	movt	r1, #1
   1839c:	movt	r0, #1
   183a0:	moveq	r0, r1
   183a4:	pop	{r4, r5, fp, pc}
   183a8:	ldrb	r1, [r5]
   183ac:	movw	r2, #47672	; 0xba38
   183b0:	movw	r0, #47676	; 0xba3c
   183b4:	movt	r2, #1
   183b8:	movt	r0, #1
   183bc:	cmp	r1, #96	; 0x60
   183c0:	moveq	r0, r2
   183c4:	pop	{r4, r5, fp, pc}
   183c8:	push	{r4, sl, fp, lr}
   183cc:	add	fp, sp, #8
   183d0:	sub	sp, sp, #104	; 0x68
   183d4:	movw	r1, #48733	; 0xbe5d
   183d8:	mov	r4, r0
   183dc:	mov	r2, sp
   183e0:	mov	r0, #3
   183e4:	movt	r1, #1
   183e8:	bl	1182c <__lxstat64@plt>
   183ec:	mov	r1, r0
   183f0:	mov	r0, #0
   183f4:	cmp	r1, #0
   183f8:	beq	18404 <__assert_fail@plt+0x6bb4>
   183fc:	sub	sp, fp, #8
   18400:	pop	{r4, sl, fp, pc}
   18404:	ldr	r0, [sp, #96]	; 0x60
   18408:	ldr	r1, [sp, #100]	; 0x64
   1840c:	ldm	sp, {r2, r3}
   18410:	stm	r4, {r0, r1, r2, r3}
   18414:	mov	r0, r4
   18418:	sub	sp, fp, #8
   1841c:	pop	{r4, sl, fp, pc}
   18420:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18424:	add	fp, sp, #28
   18428:	sub	sp, sp, #964	; 0x3c4
   1842c:	sub	sp, sp, #3072	; 0xc00
   18430:	mov	r4, r2
   18434:	mov	r5, r1
   18438:	cmn	r0, #100	; 0x64
   1843c:	beq	18450 <__assert_fail@plt+0x6c00>
   18440:	mov	r7, r0
   18444:	ldrb	r0, [r5]
   18448:	cmp	r0, #47	; 0x2f
   1844c:	bne	18464 <__assert_fail@plt+0x6c14>
   18450:	mov	r0, r5
   18454:	mov	r1, r4
   18458:	sub	sp, fp, #28
   1845c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18460:	b	18d00 <__assert_fail@plt+0x74b0>
   18464:	mov	sl, sp
   18468:	mov	r1, r7
   1846c:	mov	r2, r5
   18470:	mov	r0, sl
   18474:	bl	19c30 <__assert_fail@plt+0x83e0>
   18478:	cmp	r0, #0
   1847c:	beq	18568 <__assert_fail@plt+0x6d18>
   18480:	mov	r1, r4
   18484:	mov	r6, r0
   18488:	bl	18d00 <__assert_fail@plt+0x74b0>
   1848c:	mov	r9, r0
   18490:	bl	116d0 <__errno_location@plt>
   18494:	ldr	r2, [r0]
   18498:	mov	r8, r0
   1849c:	cmp	r6, sl
   184a0:	beq	184b4 <__assert_fail@plt+0x6c64>
   184a4:	mov	r0, r6
   184a8:	mov	r6, r2
   184ac:	bl	1a1dc <__assert_fail@plt+0x898c>
   184b0:	mov	r2, r6
   184b4:	cmn	r9, #1
   184b8:	bne	18634 <__assert_fail@plt+0x6de4>
   184bc:	sub	r0, r2, #1
   184c0:	cmp	r0, #37	; 0x25
   184c4:	bhi	18628 <__assert_fail@plt+0x6dd8>
   184c8:	add	r1, pc, #0
   184cc:	ldr	pc, [r1, r0, lsl #2]
   184d0:	andeq	r8, r1, r8, ror #10
   184d4:	andeq	r8, r1, r8, ror #10
   184d8:	andeq	r8, r1, r0, lsr r6
   184dc:	andeq	r8, r1, r0, lsr r6
   184e0:	andeq	r8, r1, r0, lsr r6
   184e4:	andeq	r8, r1, r0, lsr r6
   184e8:	andeq	r8, r1, r0, lsr r6
   184ec:	andeq	r8, r1, r0, lsr r6
   184f0:	andeq	r8, r1, r0, lsr r6
   184f4:	andeq	r8, r1, r0, lsr r6
   184f8:	andeq	r8, r1, r0, lsr r6
   184fc:	andeq	r8, r1, r0, lsr r6
   18500:	andeq	r8, r1, r8, ror #10
   18504:	andeq	r8, r1, r0, lsr r6
   18508:	andeq	r8, r1, r0, lsr r6
   1850c:	andeq	r8, r1, r0, lsr r6
   18510:	andeq	r8, r1, r0, lsr r6
   18514:	andeq	r8, r1, r0, lsr r6
   18518:	andeq	r8, r1, r0, lsr r6
   1851c:	andeq	r8, r1, r8, ror #10
   18520:	andeq	r8, r1, r0, lsr r6
   18524:	andeq	r8, r1, r0, lsr r6
   18528:	andeq	r8, r1, r0, lsr r6
   1852c:	andeq	r8, r1, r0, lsr r6
   18530:	andeq	r8, r1, r0, lsr r6
   18534:	andeq	r8, r1, r0, lsr r6
   18538:	andeq	r8, r1, r0, lsr r6
   1853c:	andeq	r8, r1, r0, lsr r6
   18540:	andeq	r8, r1, r0, lsr r6
   18544:	andeq	r8, r1, r0, lsr r6
   18548:	andeq	r8, r1, r0, lsr r6
   1854c:	andeq	r8, r1, r0, lsr r6
   18550:	andeq	r8, r1, r0, lsr r6
   18554:	andeq	r8, r1, r0, lsr r6
   18558:	andeq	r8, r1, r0, lsr r6
   1855c:	andeq	r8, r1, r0, lsr r6
   18560:	andeq	r8, r1, r0, lsr r6
   18564:	andeq	r8, r1, r8, ror #10
   18568:	mov	r0, sp
   1856c:	bl	1a404 <__assert_fail@plt+0x8bb4>
   18570:	cmp	r0, #0
   18574:	bne	18640 <__assert_fail@plt+0x6df0>
   18578:	cmp	r7, #0
   1857c:	bmi	185a8 <__assert_fail@plt+0x6d58>
   18580:	ldr	r0, [sp]
   18584:	cmp	r0, r7
   18588:	bne	185a8 <__assert_fail@plt+0x6d58>
   1858c:	mov	r0, sp
   18590:	bl	1a47c <__assert_fail@plt+0x8c2c>
   18594:	bl	116d0 <__errno_location@plt>
   18598:	mov	r1, #9
   1859c:	mvn	r9, #0
   185a0:	str	r1, [r0]
   185a4:	b	18634 <__assert_fail@plt+0x6de4>
   185a8:	mov	r0, r7
   185ac:	bl	117b4 <fchdir@plt>
   185b0:	cmp	r0, #0
   185b4:	beq	185d8 <__assert_fail@plt+0x6d88>
   185b8:	bl	116d0 <__errno_location@plt>
   185bc:	ldr	r5, [r0]
   185c0:	mov	r4, r0
   185c4:	mov	r0, sp
   185c8:	bl	1a47c <__assert_fail@plt+0x8c2c>
   185cc:	str	r5, [r4]
   185d0:	mvn	r9, #0
   185d4:	b	18634 <__assert_fail@plt+0x6de4>
   185d8:	mov	r0, r5
   185dc:	mov	r1, r4
   185e0:	bl	18d00 <__assert_fail@plt+0x74b0>
   185e4:	mov	r9, r0
   185e8:	mov	r4, #0
   185ec:	cmn	r0, #1
   185f0:	bne	185fc <__assert_fail@plt+0x6dac>
   185f4:	bl	116d0 <__errno_location@plt>
   185f8:	ldr	r4, [r0]
   185fc:	mov	r0, sp
   18600:	bl	1a460 <__assert_fail@plt+0x8c10>
   18604:	cmp	r0, #0
   18608:	bne	1864c <__assert_fail@plt+0x6dfc>
   1860c:	mov	r0, sp
   18610:	bl	1a47c <__assert_fail@plt+0x8c2c>
   18614:	cmp	r4, #0
   18618:	beq	18634 <__assert_fail@plt+0x6de4>
   1861c:	bl	116d0 <__errno_location@plt>
   18620:	str	r4, [r0]
   18624:	b	18634 <__assert_fail@plt+0x6de4>
   18628:	cmp	r2, #95	; 0x5f
   1862c:	beq	18568 <__assert_fail@plt+0x6d18>
   18630:	str	r2, [r8]
   18634:	mov	r0, r9
   18638:	sub	sp, fp, #28
   1863c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18640:	bl	116d0 <__errno_location@plt>
   18644:	ldr	r0, [r0]
   18648:	bl	1a348 <__assert_fail@plt+0x8af8>
   1864c:	bl	116d0 <__errno_location@plt>
   18650:	ldr	r0, [r0]
   18654:	bl	1a388 <__assert_fail@plt+0x8b38>
   18658:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1865c:	add	fp, sp, #28
   18660:	sub	sp, sp, #964	; 0x3c4
   18664:	sub	sp, sp, #3072	; 0xc00
   18668:	mov	r4, r2
   1866c:	mov	r5, r1
   18670:	cmn	r0, #100	; 0x64
   18674:	beq	18688 <__assert_fail@plt+0x6e38>
   18678:	mov	r7, r0
   1867c:	ldrb	r0, [r5]
   18680:	cmp	r0, #47	; 0x2f
   18684:	bne	1869c <__assert_fail@plt+0x6e4c>
   18688:	mov	r0, r5
   1868c:	mov	r1, r4
   18690:	sub	sp, fp, #28
   18694:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18698:	b	18d74 <__assert_fail@plt+0x7524>
   1869c:	mov	sl, sp
   186a0:	mov	r1, r7
   186a4:	mov	r2, r5
   186a8:	mov	r0, sl
   186ac:	bl	19c30 <__assert_fail@plt+0x83e0>
   186b0:	cmp	r0, #0
   186b4:	beq	187a0 <__assert_fail@plt+0x6f50>
   186b8:	mov	r1, r4
   186bc:	mov	r6, r0
   186c0:	bl	18d74 <__assert_fail@plt+0x7524>
   186c4:	mov	r9, r0
   186c8:	bl	116d0 <__errno_location@plt>
   186cc:	ldr	r2, [r0]
   186d0:	mov	r8, r0
   186d4:	cmp	r6, sl
   186d8:	beq	186ec <__assert_fail@plt+0x6e9c>
   186dc:	mov	r0, r6
   186e0:	mov	r6, r2
   186e4:	bl	1a1dc <__assert_fail@plt+0x898c>
   186e8:	mov	r2, r6
   186ec:	cmn	r9, #1
   186f0:	bne	1886c <__assert_fail@plt+0x701c>
   186f4:	sub	r0, r2, #1
   186f8:	cmp	r0, #37	; 0x25
   186fc:	bhi	18860 <__assert_fail@plt+0x7010>
   18700:	add	r1, pc, #0
   18704:	ldr	pc, [r1, r0, lsl #2]
   18708:	andeq	r8, r1, r0, lsr #15
   1870c:	andeq	r8, r1, r0, lsr #15
   18710:	andeq	r8, r1, r8, ror #16
   18714:	andeq	r8, r1, r8, ror #16
   18718:	andeq	r8, r1, r8, ror #16
   1871c:	andeq	r8, r1, r8, ror #16
   18720:	andeq	r8, r1, r8, ror #16
   18724:	andeq	r8, r1, r8, ror #16
   18728:	andeq	r8, r1, r8, ror #16
   1872c:	andeq	r8, r1, r8, ror #16
   18730:	andeq	r8, r1, r8, ror #16
   18734:	andeq	r8, r1, r8, ror #16
   18738:	andeq	r8, r1, r0, lsr #15
   1873c:	andeq	r8, r1, r8, ror #16
   18740:	andeq	r8, r1, r8, ror #16
   18744:	andeq	r8, r1, r8, ror #16
   18748:	andeq	r8, r1, r8, ror #16
   1874c:	andeq	r8, r1, r8, ror #16
   18750:	andeq	r8, r1, r8, ror #16
   18754:	andeq	r8, r1, r0, lsr #15
   18758:	andeq	r8, r1, r8, ror #16
   1875c:	andeq	r8, r1, r8, ror #16
   18760:	andeq	r8, r1, r8, ror #16
   18764:	andeq	r8, r1, r8, ror #16
   18768:	andeq	r8, r1, r8, ror #16
   1876c:	andeq	r8, r1, r8, ror #16
   18770:	andeq	r8, r1, r8, ror #16
   18774:	andeq	r8, r1, r8, ror #16
   18778:	andeq	r8, r1, r8, ror #16
   1877c:	andeq	r8, r1, r8, ror #16
   18780:	andeq	r8, r1, r8, ror #16
   18784:	andeq	r8, r1, r8, ror #16
   18788:	andeq	r8, r1, r8, ror #16
   1878c:	andeq	r8, r1, r8, ror #16
   18790:	andeq	r8, r1, r8, ror #16
   18794:	andeq	r8, r1, r8, ror #16
   18798:	andeq	r8, r1, r8, ror #16
   1879c:	andeq	r8, r1, r0, lsr #15
   187a0:	mov	r0, sp
   187a4:	bl	1a404 <__assert_fail@plt+0x8bb4>
   187a8:	cmp	r0, #0
   187ac:	bne	18878 <__assert_fail@plt+0x7028>
   187b0:	cmp	r7, #0
   187b4:	bmi	187e0 <__assert_fail@plt+0x6f90>
   187b8:	ldr	r0, [sp]
   187bc:	cmp	r0, r7
   187c0:	bne	187e0 <__assert_fail@plt+0x6f90>
   187c4:	mov	r0, sp
   187c8:	bl	1a47c <__assert_fail@plt+0x8c2c>
   187cc:	bl	116d0 <__errno_location@plt>
   187d0:	mov	r1, #9
   187d4:	mvn	r9, #0
   187d8:	str	r1, [r0]
   187dc:	b	1886c <__assert_fail@plt+0x701c>
   187e0:	mov	r0, r7
   187e4:	bl	117b4 <fchdir@plt>
   187e8:	cmp	r0, #0
   187ec:	beq	18810 <__assert_fail@plt+0x6fc0>
   187f0:	bl	116d0 <__errno_location@plt>
   187f4:	ldr	r5, [r0]
   187f8:	mov	r4, r0
   187fc:	mov	r0, sp
   18800:	bl	1a47c <__assert_fail@plt+0x8c2c>
   18804:	str	r5, [r4]
   18808:	mvn	r9, #0
   1880c:	b	1886c <__assert_fail@plt+0x701c>
   18810:	mov	r0, r5
   18814:	mov	r1, r4
   18818:	bl	18d74 <__assert_fail@plt+0x7524>
   1881c:	mov	r9, r0
   18820:	mov	r4, #0
   18824:	cmn	r0, #1
   18828:	bne	18834 <__assert_fail@plt+0x6fe4>
   1882c:	bl	116d0 <__errno_location@plt>
   18830:	ldr	r4, [r0]
   18834:	mov	r0, sp
   18838:	bl	1a460 <__assert_fail@plt+0x8c10>
   1883c:	cmp	r0, #0
   18840:	bne	18884 <__assert_fail@plt+0x7034>
   18844:	mov	r0, sp
   18848:	bl	1a47c <__assert_fail@plt+0x8c2c>
   1884c:	cmp	r4, #0
   18850:	beq	1886c <__assert_fail@plt+0x701c>
   18854:	bl	116d0 <__errno_location@plt>
   18858:	str	r4, [r0]
   1885c:	b	1886c <__assert_fail@plt+0x701c>
   18860:	cmp	r2, #95	; 0x5f
   18864:	beq	187a0 <__assert_fail@plt+0x6f50>
   18868:	str	r2, [r8]
   1886c:	mov	r0, r9
   18870:	sub	sp, fp, #28
   18874:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18878:	bl	116d0 <__errno_location@plt>
   1887c:	ldr	r0, [r0]
   18880:	bl	1a348 <__assert_fail@plt+0x8af8>
   18884:	bl	116d0 <__errno_location@plt>
   18888:	ldr	r0, [r0]
   1888c:	bl	1a388 <__assert_fail@plt+0x8b38>
   18890:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18894:	add	fp, sp, #28
   18898:	sub	sp, sp, #964	; 0x3c4
   1889c:	sub	sp, sp, #3072	; 0xc00
   188a0:	mov	r4, r2
   188a4:	mov	r5, r1
   188a8:	cmn	r0, #100	; 0x64
   188ac:	beq	188c0 <__assert_fail@plt+0x7070>
   188b0:	mov	r7, r0
   188b4:	ldrb	r0, [r5]
   188b8:	cmp	r0, #47	; 0x2f
   188bc:	bne	188d4 <__assert_fail@plt+0x7084>
   188c0:	mov	r0, r5
   188c4:	mov	r1, r4
   188c8:	sub	sp, fp, #28
   188cc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   188d0:	b	11730 <setfilecon@plt>
   188d4:	mov	sl, sp
   188d8:	mov	r1, r7
   188dc:	mov	r2, r5
   188e0:	mov	r0, sl
   188e4:	bl	19c30 <__assert_fail@plt+0x83e0>
   188e8:	cmp	r0, #0
   188ec:	beq	189d8 <__assert_fail@plt+0x7188>
   188f0:	mov	r1, r4
   188f4:	mov	r6, r0
   188f8:	bl	11730 <setfilecon@plt>
   188fc:	mov	r9, r0
   18900:	bl	116d0 <__errno_location@plt>
   18904:	ldr	r2, [r0]
   18908:	mov	r8, r0
   1890c:	cmp	r6, sl
   18910:	beq	18924 <__assert_fail@plt+0x70d4>
   18914:	mov	r0, r6
   18918:	mov	r6, r2
   1891c:	bl	1a1dc <__assert_fail@plt+0x898c>
   18920:	mov	r2, r6
   18924:	cmn	r9, #1
   18928:	bne	18aa4 <__assert_fail@plt+0x7254>
   1892c:	sub	r0, r2, #1
   18930:	cmp	r0, #37	; 0x25
   18934:	bhi	18a98 <__assert_fail@plt+0x7248>
   18938:	add	r1, pc, #0
   1893c:	ldr	pc, [r1, r0, lsl #2]
   18940:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18944:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18948:	andeq	r8, r1, r0, lsr #21
   1894c:	andeq	r8, r1, r0, lsr #21
   18950:	andeq	r8, r1, r0, lsr #21
   18954:	andeq	r8, r1, r0, lsr #21
   18958:	andeq	r8, r1, r0, lsr #21
   1895c:	andeq	r8, r1, r0, lsr #21
   18960:	andeq	r8, r1, r0, lsr #21
   18964:	andeq	r8, r1, r0, lsr #21
   18968:	andeq	r8, r1, r0, lsr #21
   1896c:	andeq	r8, r1, r0, lsr #21
   18970:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18974:	andeq	r8, r1, r0, lsr #21
   18978:	andeq	r8, r1, r0, lsr #21
   1897c:	andeq	r8, r1, r0, lsr #21
   18980:	andeq	r8, r1, r0, lsr #21
   18984:	andeq	r8, r1, r0, lsr #21
   18988:	andeq	r8, r1, r0, lsr #21
   1898c:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18990:	andeq	r8, r1, r0, lsr #21
   18994:	andeq	r8, r1, r0, lsr #21
   18998:	andeq	r8, r1, r0, lsr #21
   1899c:	andeq	r8, r1, r0, lsr #21
   189a0:	andeq	r8, r1, r0, lsr #21
   189a4:	andeq	r8, r1, r0, lsr #21
   189a8:	andeq	r8, r1, r0, lsr #21
   189ac:	andeq	r8, r1, r0, lsr #21
   189b0:	andeq	r8, r1, r0, lsr #21
   189b4:	andeq	r8, r1, r0, lsr #21
   189b8:	andeq	r8, r1, r0, lsr #21
   189bc:	andeq	r8, r1, r0, lsr #21
   189c0:	andeq	r8, r1, r0, lsr #21
   189c4:	andeq	r8, r1, r0, lsr #21
   189c8:	andeq	r8, r1, r0, lsr #21
   189cc:	andeq	r8, r1, r0, lsr #21
   189d0:	andeq	r8, r1, r0, lsr #21
   189d4:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   189d8:	mov	r0, sp
   189dc:	bl	1a404 <__assert_fail@plt+0x8bb4>
   189e0:	cmp	r0, #0
   189e4:	bne	18ab0 <__assert_fail@plt+0x7260>
   189e8:	cmp	r7, #0
   189ec:	bmi	18a18 <__assert_fail@plt+0x71c8>
   189f0:	ldr	r0, [sp]
   189f4:	cmp	r0, r7
   189f8:	bne	18a18 <__assert_fail@plt+0x71c8>
   189fc:	mov	r0, sp
   18a00:	bl	1a47c <__assert_fail@plt+0x8c2c>
   18a04:	bl	116d0 <__errno_location@plt>
   18a08:	mov	r1, #9
   18a0c:	mvn	r9, #0
   18a10:	str	r1, [r0]
   18a14:	b	18aa4 <__assert_fail@plt+0x7254>
   18a18:	mov	r0, r7
   18a1c:	bl	117b4 <fchdir@plt>
   18a20:	cmp	r0, #0
   18a24:	beq	18a48 <__assert_fail@plt+0x71f8>
   18a28:	bl	116d0 <__errno_location@plt>
   18a2c:	ldr	r5, [r0]
   18a30:	mov	r4, r0
   18a34:	mov	r0, sp
   18a38:	bl	1a47c <__assert_fail@plt+0x8c2c>
   18a3c:	str	r5, [r4]
   18a40:	mvn	r9, #0
   18a44:	b	18aa4 <__assert_fail@plt+0x7254>
   18a48:	mov	r0, r5
   18a4c:	mov	r1, r4
   18a50:	bl	11730 <setfilecon@plt>
   18a54:	mov	r9, r0
   18a58:	mov	r4, #0
   18a5c:	cmn	r0, #1
   18a60:	bne	18a6c <__assert_fail@plt+0x721c>
   18a64:	bl	116d0 <__errno_location@plt>
   18a68:	ldr	r4, [r0]
   18a6c:	mov	r0, sp
   18a70:	bl	1a460 <__assert_fail@plt+0x8c10>
   18a74:	cmp	r0, #0
   18a78:	bne	18abc <__assert_fail@plt+0x726c>
   18a7c:	mov	r0, sp
   18a80:	bl	1a47c <__assert_fail@plt+0x8c2c>
   18a84:	cmp	r4, #0
   18a88:	beq	18aa4 <__assert_fail@plt+0x7254>
   18a8c:	bl	116d0 <__errno_location@plt>
   18a90:	str	r4, [r0]
   18a94:	b	18aa4 <__assert_fail@plt+0x7254>
   18a98:	cmp	r2, #95	; 0x5f
   18a9c:	beq	189d8 <__assert_fail@plt+0x7188>
   18aa0:	str	r2, [r8]
   18aa4:	mov	r0, r9
   18aa8:	sub	sp, fp, #28
   18aac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18ab0:	bl	116d0 <__errno_location@plt>
   18ab4:	ldr	r0, [r0]
   18ab8:	bl	1a348 <__assert_fail@plt+0x8af8>
   18abc:	bl	116d0 <__errno_location@plt>
   18ac0:	ldr	r0, [r0]
   18ac4:	bl	1a388 <__assert_fail@plt+0x8b38>
   18ac8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18acc:	add	fp, sp, #28
   18ad0:	sub	sp, sp, #964	; 0x3c4
   18ad4:	sub	sp, sp, #3072	; 0xc00
   18ad8:	mov	r4, r2
   18adc:	mov	r5, r1
   18ae0:	cmn	r0, #100	; 0x64
   18ae4:	beq	18af8 <__assert_fail@plt+0x72a8>
   18ae8:	mov	r7, r0
   18aec:	ldrb	r0, [r5]
   18af0:	cmp	r0, #47	; 0x2f
   18af4:	bne	18b0c <__assert_fail@plt+0x72bc>
   18af8:	mov	r0, r5
   18afc:	mov	r1, r4
   18b00:	sub	sp, fp, #28
   18b04:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18b08:	b	114d8 <lsetfilecon@plt>
   18b0c:	mov	sl, sp
   18b10:	mov	r1, r7
   18b14:	mov	r2, r5
   18b18:	mov	r0, sl
   18b1c:	bl	19c30 <__assert_fail@plt+0x83e0>
   18b20:	cmp	r0, #0
   18b24:	beq	18c10 <__assert_fail@plt+0x73c0>
   18b28:	mov	r1, r4
   18b2c:	mov	r6, r0
   18b30:	bl	114d8 <lsetfilecon@plt>
   18b34:	mov	r9, r0
   18b38:	bl	116d0 <__errno_location@plt>
   18b3c:	ldr	r2, [r0]
   18b40:	mov	r8, r0
   18b44:	cmp	r6, sl
   18b48:	beq	18b5c <__assert_fail@plt+0x730c>
   18b4c:	mov	r0, r6
   18b50:	mov	r6, r2
   18b54:	bl	1a1dc <__assert_fail@plt+0x898c>
   18b58:	mov	r2, r6
   18b5c:	cmn	r9, #1
   18b60:	bne	18cdc <__assert_fail@plt+0x748c>
   18b64:	sub	r0, r2, #1
   18b68:	cmp	r0, #37	; 0x25
   18b6c:	bhi	18cd0 <__assert_fail@plt+0x7480>
   18b70:	add	r1, pc, #0
   18b74:	ldr	pc, [r1, r0, lsl #2]
   18b78:	andeq	r8, r1, r0, lsl ip
   18b7c:	andeq	r8, r1, r0, lsl ip
   18b80:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18b84:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18b88:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18b8c:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18b90:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18b94:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18b98:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18b9c:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18ba0:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18ba4:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18ba8:	andeq	r8, r1, r0, lsl ip
   18bac:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18bb0:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18bb4:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18bb8:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18bbc:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18bc0:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18bc4:	andeq	r8, r1, r0, lsl ip
   18bc8:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18bcc:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18bd0:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18bd4:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18bd8:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18bdc:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18be0:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18be4:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18be8:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18bec:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18bf0:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18bf4:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18bf8:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18bfc:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18c00:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18c04:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18c08:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18c0c:	andeq	r8, r1, r0, lsl ip
   18c10:	mov	r0, sp
   18c14:	bl	1a404 <__assert_fail@plt+0x8bb4>
   18c18:	cmp	r0, #0
   18c1c:	bne	18ce8 <__assert_fail@plt+0x7498>
   18c20:	cmp	r7, #0
   18c24:	bmi	18c50 <__assert_fail@plt+0x7400>
   18c28:	ldr	r0, [sp]
   18c2c:	cmp	r0, r7
   18c30:	bne	18c50 <__assert_fail@plt+0x7400>
   18c34:	mov	r0, sp
   18c38:	bl	1a47c <__assert_fail@plt+0x8c2c>
   18c3c:	bl	116d0 <__errno_location@plt>
   18c40:	mov	r1, #9
   18c44:	mvn	r9, #0
   18c48:	str	r1, [r0]
   18c4c:	b	18cdc <__assert_fail@plt+0x748c>
   18c50:	mov	r0, r7
   18c54:	bl	117b4 <fchdir@plt>
   18c58:	cmp	r0, #0
   18c5c:	beq	18c80 <__assert_fail@plt+0x7430>
   18c60:	bl	116d0 <__errno_location@plt>
   18c64:	ldr	r5, [r0]
   18c68:	mov	r4, r0
   18c6c:	mov	r0, sp
   18c70:	bl	1a47c <__assert_fail@plt+0x8c2c>
   18c74:	str	r5, [r4]
   18c78:	mvn	r9, #0
   18c7c:	b	18cdc <__assert_fail@plt+0x748c>
   18c80:	mov	r0, r5
   18c84:	mov	r1, r4
   18c88:	bl	114d8 <lsetfilecon@plt>
   18c8c:	mov	r9, r0
   18c90:	mov	r4, #0
   18c94:	cmn	r0, #1
   18c98:	bne	18ca4 <__assert_fail@plt+0x7454>
   18c9c:	bl	116d0 <__errno_location@plt>
   18ca0:	ldr	r4, [r0]
   18ca4:	mov	r0, sp
   18ca8:	bl	1a460 <__assert_fail@plt+0x8c10>
   18cac:	cmp	r0, #0
   18cb0:	bne	18cf4 <__assert_fail@plt+0x74a4>
   18cb4:	mov	r0, sp
   18cb8:	bl	1a47c <__assert_fail@plt+0x8c2c>
   18cbc:	cmp	r4, #0
   18cc0:	beq	18cdc <__assert_fail@plt+0x748c>
   18cc4:	bl	116d0 <__errno_location@plt>
   18cc8:	str	r4, [r0]
   18ccc:	b	18cdc <__assert_fail@plt+0x748c>
   18cd0:	cmp	r2, #95	; 0x5f
   18cd4:	beq	18c10 <__assert_fail@plt+0x73c0>
   18cd8:	str	r2, [r8]
   18cdc:	mov	r0, r9
   18ce0:	sub	sp, fp, #28
   18ce4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18ce8:	bl	116d0 <__errno_location@plt>
   18cec:	ldr	r0, [r0]
   18cf0:	bl	1a348 <__assert_fail@plt+0x8af8>
   18cf4:	bl	116d0 <__errno_location@plt>
   18cf8:	ldr	r0, [r0]
   18cfc:	bl	1a388 <__assert_fail@plt+0x8b38>
   18d00:	push	{r4, r5, fp, lr}
   18d04:	add	fp, sp, #8
   18d08:	mov	r4, r1
   18d0c:	bl	11694 <getfilecon@plt>
   18d10:	cmp	r0, #10
   18d14:	beq	18d2c <__assert_fail@plt+0x74dc>
   18d18:	cmp	r0, #0
   18d1c:	bne	18d70 <__assert_fail@plt+0x7520>
   18d20:	bl	116d0 <__errno_location@plt>
   18d24:	mov	r1, #95	; 0x5f
   18d28:	b	18d68 <__assert_fail@plt+0x7518>
   18d2c:	ldr	r5, [r4]
   18d30:	movw	r1, #47764	; 0xba94
   18d34:	movt	r1, #1
   18d38:	mov	r0, r5
   18d3c:	bl	114c0 <strcmp@plt>
   18d40:	mov	r1, r0
   18d44:	mov	r0, #10
   18d48:	cmp	r1, #0
   18d4c:	popne	{r4, r5, fp, pc}
   18d50:	mov	r0, r5
   18d54:	bl	117cc <freecon@plt>
   18d58:	mov	r0, #0
   18d5c:	str	r0, [r4]
   18d60:	bl	116d0 <__errno_location@plt>
   18d64:	mov	r1, #61	; 0x3d
   18d68:	str	r1, [r0]
   18d6c:	mvn	r0, #0
   18d70:	pop	{r4, r5, fp, pc}
   18d74:	push	{r4, r5, fp, lr}
   18d78:	add	fp, sp, #8
   18d7c:	mov	r4, r1
   18d80:	bl	11610 <lgetfilecon@plt>
   18d84:	cmp	r0, #10
   18d88:	beq	18da0 <__assert_fail@plt+0x7550>
   18d8c:	cmp	r0, #0
   18d90:	bne	18de4 <__assert_fail@plt+0x7594>
   18d94:	bl	116d0 <__errno_location@plt>
   18d98:	mov	r1, #95	; 0x5f
   18d9c:	b	18ddc <__assert_fail@plt+0x758c>
   18da0:	ldr	r5, [r4]
   18da4:	movw	r1, #47764	; 0xba94
   18da8:	movt	r1, #1
   18dac:	mov	r0, r5
   18db0:	bl	114c0 <strcmp@plt>
   18db4:	mov	r1, r0
   18db8:	mov	r0, #10
   18dbc:	cmp	r1, #0
   18dc0:	popne	{r4, r5, fp, pc}
   18dc4:	mov	r0, r5
   18dc8:	bl	117cc <freecon@plt>
   18dcc:	mov	r0, #0
   18dd0:	str	r0, [r4]
   18dd4:	bl	116d0 <__errno_location@plt>
   18dd8:	mov	r1, #61	; 0x3d
   18ddc:	str	r1, [r0]
   18de0:	mvn	r0, #0
   18de4:	pop	{r4, r5, fp, pc}
   18de8:	push	{r4, r5, fp, lr}
   18dec:	add	fp, sp, #8
   18df0:	mov	r4, r1
   18df4:	bl	1155c <fgetfilecon@plt>
   18df8:	cmp	r0, #10
   18dfc:	beq	18e14 <__assert_fail@plt+0x75c4>
   18e00:	cmp	r0, #0
   18e04:	bne	18e58 <__assert_fail@plt+0x7608>
   18e08:	bl	116d0 <__errno_location@plt>
   18e0c:	mov	r1, #95	; 0x5f
   18e10:	b	18e50 <__assert_fail@plt+0x7600>
   18e14:	ldr	r5, [r4]
   18e18:	movw	r1, #47764	; 0xba94
   18e1c:	movt	r1, #1
   18e20:	mov	r0, r5
   18e24:	bl	114c0 <strcmp@plt>
   18e28:	mov	r1, r0
   18e2c:	mov	r0, #10
   18e30:	cmp	r1, #0
   18e34:	popne	{r4, r5, fp, pc}
   18e38:	mov	r0, r5
   18e3c:	bl	117cc <freecon@plt>
   18e40:	mov	r0, #0
   18e44:	str	r0, [r4]
   18e48:	bl	116d0 <__errno_location@plt>
   18e4c:	mov	r1, #61	; 0x3d
   18e50:	str	r1, [r0]
   18e54:	mvn	r0, #0
   18e58:	pop	{r4, r5, fp, pc}
   18e5c:	push	{r4, r5, r6, r7, fp, lr}
   18e60:	add	fp, sp, #16
   18e64:	mov	r4, r0
   18e68:	cmp	r0, #2
   18e6c:	bhi	18e9c <__assert_fail@plt+0x764c>
   18e70:	mov	r0, r4
   18e74:	bl	1a4a4 <__assert_fail@plt+0x8c54>
   18e78:	mov	r5, r0
   18e7c:	bl	116d0 <__errno_location@plt>
   18e80:	ldr	r7, [r0]
   18e84:	mov	r6, r0
   18e88:	mov	r0, r4
   18e8c:	bl	11820 <close@plt>
   18e90:	mov	r0, r5
   18e94:	str	r7, [r6]
   18e98:	pop	{r4, r5, r6, r7, fp, pc}
   18e9c:	mov	r0, r4
   18ea0:	pop	{r4, r5, r6, r7, fp, pc}
   18ea4:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   18ea8:	add	fp, sp, #24
   18eac:	sub	sp, sp, #32
   18eb0:	ldr	r6, [fp, #12]
   18eb4:	ldr	r7, [fp, #8]
   18eb8:	mov	r4, r2
   18ebc:	mov	r8, r0
   18ec0:	cmp	r1, #0
   18ec4:	beq	18eec <__assert_fail@plt+0x769c>
   18ec8:	movw	r2, #47774	; 0xba9e
   18ecc:	mov	r5, r1
   18ed0:	str	r3, [sp, #4]
   18ed4:	str	r4, [sp]
   18ed8:	mov	r0, r8
   18edc:	mov	r1, #1
   18ee0:	movt	r2, #1
   18ee4:	mov	r3, r5
   18ee8:	b	18f04 <__assert_fail@plt+0x76b4>
   18eec:	movw	r2, #47786	; 0xbaaa
   18ef0:	str	r3, [sp]
   18ef4:	mov	r0, r8
   18ef8:	mov	r1, #1
   18efc:	mov	r3, r4
   18f00:	movt	r2, #1
   18f04:	bl	11718 <__fprintf_chk@plt>
   18f08:	movw	r1, #47793	; 0xbab1
   18f0c:	mov	r0, #0
   18f10:	mov	r2, #5
   18f14:	movt	r1, #1
   18f18:	bl	11538 <dcgettext@plt>
   18f1c:	movw	r2, #48511	; 0xbd7f
   18f20:	mov	r3, r0
   18f24:	movw	r0, #2022	; 0x7e6
   18f28:	mov	r1, #1
   18f2c:	movt	r2, #1
   18f30:	str	r0, [sp]
   18f34:	mov	r0, r8
   18f38:	bl	11718 <__fprintf_chk@plt>
   18f3c:	movw	r4, #45498	; 0xb1ba
   18f40:	mov	r1, r8
   18f44:	movt	r4, #1
   18f48:	mov	r0, r4
   18f4c:	bl	1149c <fputs_unlocked@plt>
   18f50:	movw	r1, #47797	; 0xbab5
   18f54:	mov	r0, #0
   18f58:	mov	r2, #5
   18f5c:	movt	r1, #1
   18f60:	bl	11538 <dcgettext@plt>
   18f64:	movw	r3, #47968	; 0xbb60
   18f68:	mov	r2, r0
   18f6c:	mov	r0, r8
   18f70:	mov	r1, #1
   18f74:	movt	r3, #1
   18f78:	bl	11718 <__fprintf_chk@plt>
   18f7c:	mov	r0, r4
   18f80:	mov	r1, r8
   18f84:	bl	1149c <fputs_unlocked@plt>
   18f88:	cmp	r6, #9
   18f8c:	bhi	18fc8 <__assert_fail@plt+0x7778>
   18f90:	add	r0, pc, #0
   18f94:	ldr	pc, [r0, r6, lsl #2]
   18f98:	andeq	r8, r1, r0, asr #31
   18f9c:	ldrdeq	r8, [r1], -r4
   18fa0:	andeq	r9, r1, r4
   18fa4:	andeq	r9, r1, ip, lsr #32
   18fa8:	andeq	r9, r1, r4, asr r0
   18fac:	andeq	r9, r1, ip, ror r0
   18fb0:	andeq	r9, r1, r4, lsr #1
   18fb4:	ldrdeq	r9, [r1], -ip
   18fb8:	andeq	r9, r1, ip, ror r1
   18fbc:	andeq	r9, r1, r4, lsr #2
   18fc0:	sub	sp, fp, #24
   18fc4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   18fc8:	movw	r1, #48321	; 0xbcc1
   18fcc:	movt	r1, #1
   18fd0:	b	1912c <__assert_fail@plt+0x78dc>
   18fd4:	movw	r1, #48002	; 0xbb82
   18fd8:	mov	r0, #0
   18fdc:	mov	r2, #5
   18fe0:	movt	r1, #1
   18fe4:	bl	11538 <dcgettext@plt>
   18fe8:	ldr	r3, [r7]
   18fec:	mov	r2, r0
   18ff0:	mov	r0, r8
   18ff4:	mov	r1, #1
   18ff8:	sub	sp, fp, #24
   18ffc:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   19000:	b	11718 <__fprintf_chk@plt>
   19004:	movw	r1, #48018	; 0xbb92
   19008:	mov	r0, #0
   1900c:	mov	r2, #5
   19010:	movt	r1, #1
   19014:	bl	11538 <dcgettext@plt>
   19018:	mov	r2, r0
   1901c:	ldr	r3, [r7]
   19020:	ldr	r0, [r7, #4]
   19024:	str	r0, [sp]
   19028:	b	19118 <__assert_fail@plt+0x78c8>
   1902c:	movw	r1, #48041	; 0xbba9
   19030:	mov	r0, #0
   19034:	mov	r2, #5
   19038:	movt	r1, #1
   1903c:	bl	11538 <dcgettext@plt>
   19040:	mov	r2, r0
   19044:	ldr	r3, [r7]
   19048:	ldmib	r7, {r0, r1}
   1904c:	stm	sp, {r0, r1}
   19050:	b	19118 <__assert_fail@plt+0x78c8>
   19054:	movw	r1, #48069	; 0xbbc5
   19058:	mov	r0, #0
   1905c:	mov	r2, #5
   19060:	movt	r1, #1
   19064:	bl	11538 <dcgettext@plt>
   19068:	ldr	r3, [r7]
   1906c:	mov	r2, r0
   19070:	ldmib	r7, {r0, r1, r7}
   19074:	stm	sp, {r0, r1, r7}
   19078:	b	19118 <__assert_fail@plt+0x78c8>
   1907c:	movw	r1, #48101	; 0xbbe5
   19080:	mov	r0, #0
   19084:	mov	r2, #5
   19088:	movt	r1, #1
   1908c:	bl	11538 <dcgettext@plt>
   19090:	ldr	r3, [r7]
   19094:	mov	r2, r0
   19098:	ldmib	r7, {r0, r1, r6, r7}
   1909c:	stm	sp, {r0, r1, r6, r7}
   190a0:	b	19118 <__assert_fail@plt+0x78c8>
   190a4:	movw	r1, #48137	; 0xbc09
   190a8:	mov	r0, #0
   190ac:	mov	r2, #5
   190b0:	movt	r1, #1
   190b4:	bl	11538 <dcgettext@plt>
   190b8:	mov	r2, r0
   190bc:	ldr	r3, [r7]
   190c0:	ldmib	r7, {r0, r1, r6}
   190c4:	ldr	r5, [r7, #16]
   190c8:	ldr	r7, [r7, #20]
   190cc:	stm	sp, {r0, r1, r6}
   190d0:	str	r5, [sp, #12]
   190d4:	str	r7, [sp, #16]
   190d8:	b	19118 <__assert_fail@plt+0x78c8>
   190dc:	movw	r1, #48177	; 0xbc31
   190e0:	mov	r0, #0
   190e4:	mov	r2, #5
   190e8:	movt	r1, #1
   190ec:	bl	11538 <dcgettext@plt>
   190f0:	mov	r2, r0
   190f4:	ldr	r3, [r7]
   190f8:	ldmib	r7, {r0, r1, r6}
   190fc:	ldr	r5, [r7, #16]
   19100:	ldr	r4, [r7, #20]
   19104:	ldr	r7, [r7, #24]
   19108:	stm	sp, {r0, r1, r6}
   1910c:	str	r5, [sp, #12]
   19110:	str	r4, [sp, #16]
   19114:	str	r7, [sp, #20]
   19118:	mov	r0, r8
   1911c:	mov	r1, #1
   19120:	b	191cc <__assert_fail@plt+0x797c>
   19124:	movw	r1, #48269	; 0xbc8d
   19128:	movt	r1, #1
   1912c:	mov	r0, #0
   19130:	mov	r2, #5
   19134:	bl	11538 <dcgettext@plt>
   19138:	mov	ip, r0
   1913c:	ldr	r3, [r7]
   19140:	ldr	r0, [r7, #4]
   19144:	ldr	r1, [r7, #8]
   19148:	ldr	r6, [r7, #12]
   1914c:	ldr	r5, [r7, #16]
   19150:	ldr	r4, [r7, #20]
   19154:	ldr	r2, [r7, #24]
   19158:	ldr	lr, [r7, #28]
   1915c:	ldr	r7, [r7, #32]
   19160:	stm	sp, {r0, r1, r6}
   19164:	str	r5, [sp, #12]
   19168:	str	r4, [sp, #16]
   1916c:	str	r2, [sp, #20]
   19170:	str	lr, [sp, #24]
   19174:	str	r7, [sp, #28]
   19178:	b	191c0 <__assert_fail@plt+0x7970>
   1917c:	movw	r1, #48221	; 0xbc5d
   19180:	mov	r0, #0
   19184:	mov	r2, #5
   19188:	movt	r1, #1
   1918c:	bl	11538 <dcgettext@plt>
   19190:	mov	ip, r0
   19194:	ldr	r3, [r7]
   19198:	ldmib	r7, {r0, r1, r6}
   1919c:	ldr	r5, [r7, #16]
   191a0:	ldr	r4, [r7, #20]
   191a4:	ldr	r2, [r7, #24]
   191a8:	ldr	r7, [r7, #28]
   191ac:	stm	sp, {r0, r1, r6}
   191b0:	str	r5, [sp, #12]
   191b4:	str	r4, [sp, #16]
   191b8:	str	r2, [sp, #20]
   191bc:	str	r7, [sp, #24]
   191c0:	mov	r0, r8
   191c4:	mov	r1, #1
   191c8:	mov	r2, ip
   191cc:	bl	11718 <__fprintf_chk@plt>
   191d0:	sub	sp, fp, #24
   191d4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   191d8:	push	{r4, sl, fp, lr}
   191dc:	add	fp, sp, #8
   191e0:	sub	sp, sp, #8
   191e4:	ldr	ip, [fp, #8]
   191e8:	mov	lr, #0
   191ec:	ldr	r4, [ip, lr, lsl #2]
   191f0:	add	lr, lr, #1
   191f4:	cmp	r4, #0
   191f8:	bne	191ec <__assert_fail@plt+0x799c>
   191fc:	sub	r4, lr, #1
   19200:	str	ip, [sp]
   19204:	str	r4, [sp, #4]
   19208:	bl	18ea4 <__assert_fail@plt+0x7654>
   1920c:	sub	sp, fp, #8
   19210:	pop	{r4, sl, fp, pc}
   19214:	push	{fp, lr}
   19218:	mov	fp, sp
   1921c:	sub	sp, sp, #48	; 0x30
   19220:	ldr	ip, [fp, #8]
   19224:	ldr	lr, [ip]
   19228:	cmp	lr, #0
   1922c:	str	lr, [sp, #8]
   19230:	beq	192cc <__assert_fail@plt+0x7a7c>
   19234:	ldr	lr, [ip, #4]
   19238:	cmp	lr, #0
   1923c:	str	lr, [sp, #12]
   19240:	beq	192d4 <__assert_fail@plt+0x7a84>
   19244:	ldr	lr, [ip, #8]
   19248:	cmp	lr, #0
   1924c:	str	lr, [sp, #16]
   19250:	beq	192dc <__assert_fail@plt+0x7a8c>
   19254:	ldr	lr, [ip, #12]
   19258:	cmp	lr, #0
   1925c:	str	lr, [sp, #20]
   19260:	beq	192e4 <__assert_fail@plt+0x7a94>
   19264:	ldr	lr, [ip, #16]
   19268:	cmp	lr, #0
   1926c:	str	lr, [sp, #24]
   19270:	beq	192ec <__assert_fail@plt+0x7a9c>
   19274:	ldr	lr, [ip, #20]
   19278:	cmp	lr, #0
   1927c:	str	lr, [sp, #28]
   19280:	beq	192f4 <__assert_fail@plt+0x7aa4>
   19284:	ldr	lr, [ip, #24]
   19288:	cmp	lr, #0
   1928c:	str	lr, [sp, #32]
   19290:	beq	192fc <__assert_fail@plt+0x7aac>
   19294:	ldr	lr, [ip, #28]
   19298:	cmp	lr, #0
   1929c:	str	lr, [sp, #36]	; 0x24
   192a0:	beq	19304 <__assert_fail@plt+0x7ab4>
   192a4:	ldr	lr, [ip, #32]
   192a8:	cmp	lr, #0
   192ac:	str	lr, [sp, #40]	; 0x28
   192b0:	beq	1930c <__assert_fail@plt+0x7abc>
   192b4:	ldr	lr, [ip, #36]	; 0x24
   192b8:	mov	ip, #10
   192bc:	cmp	lr, #0
   192c0:	str	lr, [sp, #44]	; 0x2c
   192c4:	movweq	ip, #9
   192c8:	b	19310 <__assert_fail@plt+0x7ac0>
   192cc:	mov	ip, #0
   192d0:	b	19310 <__assert_fail@plt+0x7ac0>
   192d4:	mov	ip, #1
   192d8:	b	19310 <__assert_fail@plt+0x7ac0>
   192dc:	mov	ip, #2
   192e0:	b	19310 <__assert_fail@plt+0x7ac0>
   192e4:	mov	ip, #3
   192e8:	b	19310 <__assert_fail@plt+0x7ac0>
   192ec:	mov	ip, #4
   192f0:	b	19310 <__assert_fail@plt+0x7ac0>
   192f4:	mov	ip, #5
   192f8:	b	19310 <__assert_fail@plt+0x7ac0>
   192fc:	mov	ip, #6
   19300:	b	19310 <__assert_fail@plt+0x7ac0>
   19304:	mov	ip, #7
   19308:	b	19310 <__assert_fail@plt+0x7ac0>
   1930c:	mov	ip, #8
   19310:	add	lr, sp, #8
   19314:	str	ip, [sp, #4]
   19318:	str	lr, [sp]
   1931c:	bl	18ea4 <__assert_fail@plt+0x7654>
   19320:	mov	sp, fp
   19324:	pop	{fp, pc}
   19328:	push	{fp, lr}
   1932c:	mov	fp, sp
   19330:	sub	sp, sp, #56	; 0x38
   19334:	add	ip, fp, #8
   19338:	str	ip, [sp, #12]
   1933c:	ldr	lr, [fp, #8]
   19340:	cmp	lr, #0
   19344:	str	lr, [sp, #16]
   19348:	beq	193e4 <__assert_fail@plt+0x7b94>
   1934c:	ldr	lr, [ip, #4]
   19350:	cmp	lr, #0
   19354:	str	lr, [sp, #20]
   19358:	beq	193ec <__assert_fail@plt+0x7b9c>
   1935c:	ldr	lr, [ip, #8]
   19360:	cmp	lr, #0
   19364:	str	lr, [sp, #24]
   19368:	beq	193f4 <__assert_fail@plt+0x7ba4>
   1936c:	ldr	lr, [ip, #12]
   19370:	cmp	lr, #0
   19374:	str	lr, [sp, #28]
   19378:	beq	193fc <__assert_fail@plt+0x7bac>
   1937c:	ldr	lr, [ip, #16]
   19380:	cmp	lr, #0
   19384:	str	lr, [sp, #32]
   19388:	beq	19404 <__assert_fail@plt+0x7bb4>
   1938c:	ldr	lr, [ip, #20]
   19390:	cmp	lr, #0
   19394:	str	lr, [sp, #36]	; 0x24
   19398:	beq	1940c <__assert_fail@plt+0x7bbc>
   1939c:	ldr	lr, [ip, #24]
   193a0:	cmp	lr, #0
   193a4:	str	lr, [sp, #40]	; 0x28
   193a8:	beq	19414 <__assert_fail@plt+0x7bc4>
   193ac:	ldr	lr, [ip, #28]
   193b0:	cmp	lr, #0
   193b4:	str	lr, [sp, #44]	; 0x2c
   193b8:	beq	1941c <__assert_fail@plt+0x7bcc>
   193bc:	ldr	lr, [ip, #32]
   193c0:	cmp	lr, #0
   193c4:	str	lr, [sp, #48]	; 0x30
   193c8:	beq	19424 <__assert_fail@plt+0x7bd4>
   193cc:	ldr	lr, [ip, #36]	; 0x24
   193d0:	mov	ip, #10
   193d4:	cmp	lr, #0
   193d8:	str	lr, [sp, #52]	; 0x34
   193dc:	movweq	ip, #9
   193e0:	b	19428 <__assert_fail@plt+0x7bd8>
   193e4:	mov	ip, #0
   193e8:	b	19428 <__assert_fail@plt+0x7bd8>
   193ec:	mov	ip, #1
   193f0:	b	19428 <__assert_fail@plt+0x7bd8>
   193f4:	mov	ip, #2
   193f8:	b	19428 <__assert_fail@plt+0x7bd8>
   193fc:	mov	ip, #3
   19400:	b	19428 <__assert_fail@plt+0x7bd8>
   19404:	mov	ip, #4
   19408:	b	19428 <__assert_fail@plt+0x7bd8>
   1940c:	mov	ip, #5
   19410:	b	19428 <__assert_fail@plt+0x7bd8>
   19414:	mov	ip, #6
   19418:	b	19428 <__assert_fail@plt+0x7bd8>
   1941c:	mov	ip, #7
   19420:	b	19428 <__assert_fail@plt+0x7bd8>
   19424:	mov	ip, #8
   19428:	add	lr, sp, #16
   1942c:	str	ip, [sp, #4]
   19430:	str	lr, [sp]
   19434:	bl	18ea4 <__assert_fail@plt+0x7654>
   19438:	mov	sp, fp
   1943c:	pop	{fp, pc}
   19440:	push	{fp, lr}
   19444:	mov	fp, sp
   19448:	movw	r0, #53692	; 0xd1bc
   1944c:	movt	r0, #2
   19450:	ldr	r1, [r0]
   19454:	movw	r0, #45498	; 0xb1ba
   19458:	movt	r0, #1
   1945c:	bl	1149c <fputs_unlocked@plt>
   19460:	movw	r1, #48381	; 0xbcfd
   19464:	mov	r0, #0
   19468:	mov	r2, #5
   1946c:	movt	r1, #1
   19470:	bl	11538 <dcgettext@plt>
   19474:	movw	r2, #48401	; 0xbd11
   19478:	mov	r1, r0
   1947c:	mov	r0, #1
   19480:	movt	r2, #1
   19484:	bl	11700 <__printf_chk@plt>
   19488:	movw	r1, #48423	; 0xbd27
   1948c:	mov	r0, #0
   19490:	mov	r2, #5
   19494:	movt	r1, #1
   19498:	bl	11538 <dcgettext@plt>
   1949c:	movw	r2, #45644	; 0xb24c
   194a0:	movw	r3, #46113	; 0xb421
   194a4:	mov	r1, r0
   194a8:	mov	r0, #1
   194ac:	movt	r2, #1
   194b0:	movt	r3, #1
   194b4:	bl	11700 <__printf_chk@plt>
   194b8:	movw	r1, #48443	; 0xbd3b
   194bc:	mov	r0, #0
   194c0:	mov	r2, #5
   194c4:	movt	r1, #1
   194c8:	bl	11538 <dcgettext@plt>
   194cc:	movw	r2, #48482	; 0xbd62
   194d0:	mov	r1, r0
   194d4:	mov	r0, #1
   194d8:	movt	r2, #1
   194dc:	pop	{fp, lr}
   194e0:	b	11700 <__printf_chk@plt>
   194e4:	push	{r4, r5, r6, sl, fp, lr}
   194e8:	add	fp, sp, #16
   194ec:	mov	r4, r2
   194f0:	mov	r5, r1
   194f4:	mov	r6, r0
   194f8:	bl	1a3c8 <__assert_fail@plt+0x8b78>
   194fc:	cmp	r0, #0
   19500:	popne	{r4, r5, r6, sl, fp, pc}
   19504:	cmp	r6, #0
   19508:	beq	1951c <__assert_fail@plt+0x7ccc>
   1950c:	cmp	r5, #0
   19510:	cmpne	r4, #0
   19514:	bne	1951c <__assert_fail@plt+0x7ccc>
   19518:	pop	{r4, r5, r6, sl, fp, pc}
   1951c:	bl	19a98 <__assert_fail@plt+0x8248>
   19520:	push	{r4, r5, r6, sl, fp, lr}
   19524:	add	fp, sp, #16
   19528:	mov	r4, r2
   1952c:	mov	r5, r1
   19530:	mov	r6, r0
   19534:	bl	1a3c8 <__assert_fail@plt+0x8b78>
   19538:	cmp	r0, #0
   1953c:	popne	{r4, r5, r6, sl, fp, pc}
   19540:	cmp	r6, #0
   19544:	beq	19558 <__assert_fail@plt+0x7d08>
   19548:	cmp	r5, #0
   1954c:	cmpne	r4, #0
   19550:	bne	19558 <__assert_fail@plt+0x7d08>
   19554:	pop	{r4, r5, r6, sl, fp, pc}
   19558:	bl	19a98 <__assert_fail@plt+0x8248>
   1955c:	push	{fp, lr}
   19560:	mov	fp, sp
   19564:	bl	19bac <__assert_fail@plt+0x835c>
   19568:	cmp	r0, #0
   1956c:	popne	{fp, pc}
   19570:	bl	19a98 <__assert_fail@plt+0x8248>
   19574:	push	{fp, lr}
   19578:	mov	fp, sp
   1957c:	bl	19bac <__assert_fail@plt+0x835c>
   19580:	cmp	r0, #0
   19584:	popne	{fp, pc}
   19588:	bl	19a98 <__assert_fail@plt+0x8248>
   1958c:	push	{fp, lr}
   19590:	mov	fp, sp
   19594:	bl	19bac <__assert_fail@plt+0x835c>
   19598:	cmp	r0, #0
   1959c:	popne	{fp, pc}
   195a0:	bl	19a98 <__assert_fail@plt+0x8248>
   195a4:	push	{r4, r5, fp, lr}
   195a8:	add	fp, sp, #8
   195ac:	mov	r4, r1
   195b0:	mov	r5, r0
   195b4:	bl	19bdc <__assert_fail@plt+0x838c>
   195b8:	cmp	r0, #0
   195bc:	popne	{r4, r5, fp, pc}
   195c0:	cmp	r5, #0
   195c4:	beq	195d4 <__assert_fail@plt+0x7d84>
   195c8:	cmp	r4, #0
   195cc:	bne	195d4 <__assert_fail@plt+0x7d84>
   195d0:	pop	{r4, r5, fp, pc}
   195d4:	bl	19a98 <__assert_fail@plt+0x8248>
   195d8:	push	{fp, lr}
   195dc:	mov	fp, sp
   195e0:	cmp	r1, #0
   195e4:	orreq	r1, r1, #1
   195e8:	bl	19bdc <__assert_fail@plt+0x838c>
   195ec:	cmp	r0, #0
   195f0:	popne	{fp, pc}
   195f4:	bl	19a98 <__assert_fail@plt+0x8248>
   195f8:	push	{fp, lr}
   195fc:	mov	fp, sp
   19600:	clz	r3, r2
   19604:	lsr	ip, r3, #5
   19608:	clz	r3, r1
   1960c:	lsr	r3, r3, #5
   19610:	orrs	r3, r3, ip
   19614:	movwne	r1, #1
   19618:	movwne	r2, #1
   1961c:	bl	1a3c8 <__assert_fail@plt+0x8b78>
   19620:	cmp	r0, #0
   19624:	popne	{fp, pc}
   19628:	bl	19a98 <__assert_fail@plt+0x8248>
   1962c:	push	{fp, lr}
   19630:	mov	fp, sp
   19634:	mov	r2, r1
   19638:	mov	r1, r0
   1963c:	mov	r0, #0
   19640:	bl	1a3c8 <__assert_fail@plt+0x8b78>
   19644:	cmp	r0, #0
   19648:	popne	{fp, pc}
   1964c:	bl	19a98 <__assert_fail@plt+0x8248>
   19650:	push	{fp, lr}
   19654:	mov	fp, sp
   19658:	mov	r2, r1
   1965c:	mov	r1, r0
   19660:	clz	r0, r2
   19664:	clz	r3, r1
   19668:	lsr	r0, r0, #5
   1966c:	lsr	r3, r3, #5
   19670:	orrs	r0, r3, r0
   19674:	mov	r0, #0
   19678:	movwne	r1, #1
   1967c:	movwne	r2, #1
   19680:	bl	1a3c8 <__assert_fail@plt+0x8b78>
   19684:	cmp	r0, #0
   19688:	popne	{fp, pc}
   1968c:	bl	19a98 <__assert_fail@plt+0x8248>
   19690:	push	{r4, r5, r6, sl, fp, lr}
   19694:	add	fp, sp, #16
   19698:	ldr	r5, [r1]
   1969c:	mov	r4, r1
   196a0:	mov	r6, r0
   196a4:	cmp	r0, #0
   196a8:	beq	196c0 <__assert_fail@plt+0x7e70>
   196ac:	mov	r0, #1
   196b0:	add	r0, r0, r5, lsr #1
   196b4:	adds	r5, r5, r0
   196b8:	bcc	196c8 <__assert_fail@plt+0x7e78>
   196bc:	b	19704 <__assert_fail@plt+0x7eb4>
   196c0:	cmp	r5, #0
   196c4:	movweq	r5, #64	; 0x40
   196c8:	mov	r0, r6
   196cc:	mov	r1, r5
   196d0:	mov	r2, #1
   196d4:	bl	1a3c8 <__assert_fail@plt+0x8b78>
   196d8:	cmp	r5, #0
   196dc:	mov	r1, r5
   196e0:	movwne	r1, #1
   196e4:	cmp	r0, #0
   196e8:	bne	196fc <__assert_fail@plt+0x7eac>
   196ec:	clz	r2, r6
   196f0:	lsr	r2, r2, #5
   196f4:	orrs	r1, r2, r1
   196f8:	bne	19704 <__assert_fail@plt+0x7eb4>
   196fc:	str	r5, [r4]
   19700:	pop	{r4, r5, r6, sl, fp, pc}
   19704:	bl	19a98 <__assert_fail@plt+0x8248>
   19708:	push	{r4, r5, r6, r7, fp, lr}
   1970c:	add	fp, sp, #16
   19710:	ldr	r5, [r1]
   19714:	mov	r6, r2
   19718:	mov	r4, r1
   1971c:	mov	r7, r0
   19720:	cmp	r0, #0
   19724:	beq	1973c <__assert_fail@plt+0x7eec>
   19728:	mov	r0, #1
   1972c:	add	r0, r0, r5, lsr #1
   19730:	adds	r5, r5, r0
   19734:	bcc	19754 <__assert_fail@plt+0x7f04>
   19738:	b	19788 <__assert_fail@plt+0x7f38>
   1973c:	cmp	r5, #0
   19740:	bne	19754 <__assert_fail@plt+0x7f04>
   19744:	mov	r0, #64	; 0x40
   19748:	cmp	r6, #64	; 0x40
   1974c:	udiv	r5, r0, r6
   19750:	addhi	r5, r5, #1
   19754:	mov	r0, r7
   19758:	mov	r1, r5
   1975c:	mov	r2, r6
   19760:	bl	1a3c8 <__assert_fail@plt+0x8b78>
   19764:	cmp	r0, #0
   19768:	bne	19780 <__assert_fail@plt+0x7f30>
   1976c:	cmp	r7, #0
   19770:	beq	19788 <__assert_fail@plt+0x7f38>
   19774:	cmp	r6, #0
   19778:	cmpne	r5, #0
   1977c:	bne	19788 <__assert_fail@plt+0x7f38>
   19780:	str	r5, [r4]
   19784:	pop	{r4, r5, r6, r7, fp, pc}
   19788:	bl	19a98 <__assert_fail@plt+0x8248>
   1978c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   19790:	add	fp, sp, #24
   19794:	mov	r8, r1
   19798:	ldr	r1, [r1]
   1979c:	mov	r5, r0
   197a0:	add	r0, r1, r1, asr #1
   197a4:	cmp	r0, r1
   197a8:	mvnvs	r0, #-2147483648	; 0x80000000
   197ac:	cmp	r0, r3
   197b0:	mov	r7, r0
   197b4:	movgt	r7, r3
   197b8:	cmn	r3, #1
   197bc:	movle	r7, r0
   197c0:	ldr	r0, [fp, #8]
   197c4:	cmn	r0, #1
   197c8:	ble	197f0 <__assert_fail@plt+0x7fa0>
   197cc:	cmp	r0, #0
   197d0:	beq	19844 <__assert_fail@plt+0x7ff4>
   197d4:	cmn	r7, #1
   197d8:	ble	19818 <__assert_fail@plt+0x7fc8>
   197dc:	mvn	r4, #-2147483648	; 0x80000000
   197e0:	udiv	r6, r4, r0
   197e4:	cmp	r6, r7
   197e8:	bge	19844 <__assert_fail@plt+0x7ff4>
   197ec:	b	19854 <__assert_fail@plt+0x8004>
   197f0:	cmn	r7, #1
   197f4:	ble	19834 <__assert_fail@plt+0x7fe4>
   197f8:	cmn	r0, #1
   197fc:	beq	19844 <__assert_fail@plt+0x7ff4>
   19800:	mov	r6, #-2147483648	; 0x80000000
   19804:	mvn	r4, #-2147483648	; 0x80000000
   19808:	sdiv	r6, r6, r0
   1980c:	cmp	r6, r7
   19810:	bge	19844 <__assert_fail@plt+0x7ff4>
   19814:	b	19854 <__assert_fail@plt+0x8004>
   19818:	beq	19844 <__assert_fail@plt+0x7ff4>
   1981c:	mov	r6, #-2147483648	; 0x80000000
   19820:	mvn	r4, #-2147483648	; 0x80000000
   19824:	sdiv	r6, r6, r7
   19828:	cmp	r6, r0
   1982c:	bge	19844 <__assert_fail@plt+0x7ff4>
   19830:	b	19854 <__assert_fail@plt+0x8004>
   19834:	mvn	r4, #-2147483648	; 0x80000000
   19838:	sdiv	r6, r4, r0
   1983c:	cmp	r7, r6
   19840:	blt	19854 <__assert_fail@plt+0x8004>
   19844:	mul	r6, r7, r0
   19848:	mov	r4, #64	; 0x40
   1984c:	cmp	r6, #63	; 0x3f
   19850:	bgt	1985c <__assert_fail@plt+0x800c>
   19854:	sdiv	r7, r4, r0
   19858:	mul	r6, r7, r0
   1985c:	cmp	r5, #0
   19860:	moveq	r4, #0
   19864:	streq	r4, [r8]
   19868:	sub	r4, r7, r1
   1986c:	cmp	r4, r2
   19870:	bge	1991c <__assert_fail@plt+0x80cc>
   19874:	add	r7, r1, r2
   19878:	mov	r6, #0
   1987c:	mov	r2, #0
   19880:	cmp	r7, r3
   19884:	movwgt	r6, #1
   19888:	cmn	r3, #1
   1988c:	movwgt	r2, #1
   19890:	cmp	r7, r1
   19894:	bvs	19950 <__assert_fail@plt+0x8100>
   19898:	ands	r1, r2, r6
   1989c:	bne	19950 <__assert_fail@plt+0x8100>
   198a0:	cmn	r0, #1
   198a4:	ble	198cc <__assert_fail@plt+0x807c>
   198a8:	cmp	r0, #0
   198ac:	beq	19918 <__assert_fail@plt+0x80c8>
   198b0:	cmn	r7, #1
   198b4:	ble	198f0 <__assert_fail@plt+0x80a0>
   198b8:	mvn	r1, #-2147483648	; 0x80000000
   198bc:	udiv	r1, r1, r0
   198c0:	cmp	r1, r7
   198c4:	bge	19918 <__assert_fail@plt+0x80c8>
   198c8:	b	19950 <__assert_fail@plt+0x8100>
   198cc:	cmn	r7, #1
   198d0:	ble	19908 <__assert_fail@plt+0x80b8>
   198d4:	cmn	r0, #1
   198d8:	beq	19918 <__assert_fail@plt+0x80c8>
   198dc:	mov	r1, #-2147483648	; 0x80000000
   198e0:	sdiv	r1, r1, r0
   198e4:	cmp	r1, r7
   198e8:	bge	19918 <__assert_fail@plt+0x80c8>
   198ec:	b	19950 <__assert_fail@plt+0x8100>
   198f0:	beq	19918 <__assert_fail@plt+0x80c8>
   198f4:	mov	r1, #-2147483648	; 0x80000000
   198f8:	sdiv	r1, r1, r7
   198fc:	cmp	r1, r0
   19900:	bge	19918 <__assert_fail@plt+0x80c8>
   19904:	b	19950 <__assert_fail@plt+0x8100>
   19908:	mvn	r1, #-2147483648	; 0x80000000
   1990c:	sdiv	r1, r1, r0
   19910:	cmp	r7, r1
   19914:	blt	19950 <__assert_fail@plt+0x8100>
   19918:	mul	r6, r7, r0
   1991c:	mov	r0, r5
   19920:	mov	r1, r6
   19924:	bl	19bdc <__assert_fail@plt+0x838c>
   19928:	cmp	r6, #0
   1992c:	movwne	r6, #1
   19930:	cmp	r0, #0
   19934:	bne	19948 <__assert_fail@plt+0x80f8>
   19938:	clz	r1, r5
   1993c:	lsr	r1, r1, #5
   19940:	orrs	r1, r1, r6
   19944:	bne	19950 <__assert_fail@plt+0x8100>
   19948:	str	r7, [r8]
   1994c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   19950:	bl	19a98 <__assert_fail@plt+0x8248>
   19954:	push	{fp, lr}
   19958:	mov	fp, sp
   1995c:	mov	r1, #1
   19960:	bl	19b58 <__assert_fail@plt+0x8308>
   19964:	cmp	r0, #0
   19968:	popne	{fp, pc}
   1996c:	bl	19a98 <__assert_fail@plt+0x8248>
   19970:	push	{fp, lr}
   19974:	mov	fp, sp
   19978:	bl	19b58 <__assert_fail@plt+0x8308>
   1997c:	cmp	r0, #0
   19980:	popne	{fp, pc}
   19984:	bl	19a98 <__assert_fail@plt+0x8248>
   19988:	push	{fp, lr}
   1998c:	mov	fp, sp
   19990:	mov	r1, #1
   19994:	bl	19b58 <__assert_fail@plt+0x8308>
   19998:	cmp	r0, #0
   1999c:	popne	{fp, pc}
   199a0:	bl	19a98 <__assert_fail@plt+0x8248>
   199a4:	push	{fp, lr}
   199a8:	mov	fp, sp
   199ac:	bl	19b58 <__assert_fail@plt+0x8308>
   199b0:	cmp	r0, #0
   199b4:	popne	{fp, pc}
   199b8:	bl	19a98 <__assert_fail@plt+0x8248>
   199bc:	push	{r4, r5, fp, lr}
   199c0:	add	fp, sp, #8
   199c4:	mov	r5, r0
   199c8:	mov	r0, r1
   199cc:	mov	r4, r1
   199d0:	bl	19bac <__assert_fail@plt+0x835c>
   199d4:	cmp	r0, #0
   199d8:	beq	199ec <__assert_fail@plt+0x819c>
   199dc:	mov	r1, r5
   199e0:	mov	r2, r4
   199e4:	pop	{r4, r5, fp, lr}
   199e8:	b	11508 <memcpy@plt>
   199ec:	bl	19a98 <__assert_fail@plt+0x8248>
   199f0:	push	{r4, r5, fp, lr}
   199f4:	add	fp, sp, #8
   199f8:	mov	r5, r0
   199fc:	mov	r0, r1
   19a00:	mov	r4, r1
   19a04:	bl	19bac <__assert_fail@plt+0x835c>
   19a08:	cmp	r0, #0
   19a0c:	beq	19a20 <__assert_fail@plt+0x81d0>
   19a10:	mov	r1, r5
   19a14:	mov	r2, r4
   19a18:	pop	{r4, r5, fp, lr}
   19a1c:	b	11508 <memcpy@plt>
   19a20:	bl	19a98 <__assert_fail@plt+0x8248>
   19a24:	push	{r4, r5, fp, lr}
   19a28:	add	fp, sp, #8
   19a2c:	mov	r5, r0
   19a30:	add	r0, r1, #1
   19a34:	mov	r4, r1
   19a38:	bl	19bac <__assert_fail@plt+0x835c>
   19a3c:	cmp	r0, #0
   19a40:	beq	19a5c <__assert_fail@plt+0x820c>
   19a44:	mov	r1, #0
   19a48:	mov	r2, r4
   19a4c:	strb	r1, [r0, r4]
   19a50:	mov	r1, r5
   19a54:	pop	{r4, r5, fp, lr}
   19a58:	b	11508 <memcpy@plt>
   19a5c:	bl	19a98 <__assert_fail@plt+0x8248>
   19a60:	push	{r4, r5, fp, lr}
   19a64:	add	fp, sp, #8
   19a68:	mov	r4, r0
   19a6c:	bl	116ac <strlen@plt>
   19a70:	add	r5, r0, #1
   19a74:	mov	r0, r5
   19a78:	bl	19bac <__assert_fail@plt+0x835c>
   19a7c:	cmp	r0, #0
   19a80:	beq	19a94 <__assert_fail@plt+0x8244>
   19a84:	mov	r1, r4
   19a88:	mov	r2, r5
   19a8c:	pop	{r4, r5, fp, lr}
   19a90:	b	11508 <memcpy@plt>
   19a94:	bl	19a98 <__assert_fail@plt+0x8248>
   19a98:	push	{fp, lr}
   19a9c:	mov	fp, sp
   19aa0:	movw	r0, #53604	; 0xd164
   19aa4:	movw	r1, #48558	; 0xbdae
   19aa8:	mov	r2, #5
   19aac:	movt	r0, #2
   19ab0:	movt	r1, #1
   19ab4:	ldr	r4, [r0]
   19ab8:	mov	r0, #0
   19abc:	bl	11538 <dcgettext@plt>
   19ac0:	movw	r2, #47327	; 0xb8df
   19ac4:	mov	r3, r0
   19ac8:	mov	r0, r4
   19acc:	mov	r1, #0
   19ad0:	movt	r2, #1
   19ad4:	bl	115ec <error@plt>
   19ad8:	bl	11814 <abort@plt>
   19adc:	push	{fp, lr}
   19ae0:	mov	fp, sp
   19ae4:	orr	r1, r1, #512	; 0x200
   19ae8:	bl	12ddc <__assert_fail@plt+0x158c>
   19aec:	cmp	r0, #0
   19af0:	popne	{fp, pc}
   19af4:	bl	116d0 <__errno_location@plt>
   19af8:	ldr	r0, [r0]
   19afc:	cmp	r0, #22
   19b00:	bne	19b24 <__assert_fail@plt+0x82d4>
   19b04:	movw	r0, #48575	; 0xbdbf
   19b08:	movw	r1, #48591	; 0xbdcf
   19b0c:	movw	r3, #48602	; 0xbdda
   19b10:	mov	r2, #41	; 0x29
   19b14:	movt	r0, #1
   19b18:	movt	r1, #1
   19b1c:	movt	r3, #1
   19b20:	bl	11850 <__assert_fail@plt>
   19b24:	bl	19a98 <__assert_fail@plt+0x8248>
   19b28:	ldr	r0, [r0, #48]	; 0x30
   19b2c:	and	r0, r0, #17
   19b30:	cmp	r0, #16
   19b34:	moveq	r0, #1
   19b38:	bxeq	lr
   19b3c:	cmp	r0, #17
   19b40:	movne	r0, #0
   19b44:	bxne	lr
   19b48:	ldr	r0, [r1, #48]	; 0x30
   19b4c:	cmp	r0, #0
   19b50:	movwne	r0, #1
   19b54:	bx	lr
   19b58:	clz	r2, r1
   19b5c:	clz	r3, r0
   19b60:	lsr	r2, r2, #5
   19b64:	lsr	r3, r3, #5
   19b68:	orrs	r2, r3, r2
   19b6c:	movwne	r1, #1
   19b70:	movwne	r0, #1
   19b74:	cmp	r1, #0
   19b78:	beq	19ba8 <__assert_fail@plt+0x8358>
   19b7c:	mvn	r2, #-2147483648	; 0x80000000
   19b80:	udiv	r2, r2, r1
   19b84:	cmp	r2, r0
   19b88:	bcs	19ba8 <__assert_fail@plt+0x8358>
   19b8c:	push	{fp, lr}
   19b90:	mov	fp, sp
   19b94:	bl	116d0 <__errno_location@plt>
   19b98:	mov	r1, #12
   19b9c:	str	r1, [r0]
   19ba0:	mov	r0, #0
   19ba4:	pop	{fp, pc}
   19ba8:	b	11490 <calloc@plt>
   19bac:	cmp	r0, #0
   19bb0:	movweq	r0, #1
   19bb4:	cmn	r0, #1
   19bb8:	ble	19bc0 <__assert_fail@plt+0x8370>
   19bbc:	b	1161c <malloc@plt>
   19bc0:	push	{fp, lr}
   19bc4:	mov	fp, sp
   19bc8:	bl	116d0 <__errno_location@plt>
   19bcc:	mov	r1, #12
   19bd0:	str	r1, [r0]
   19bd4:	mov	r0, #0
   19bd8:	pop	{fp, pc}
   19bdc:	push	{fp, lr}
   19be0:	mov	fp, sp
   19be4:	cmp	r0, #0
   19be8:	beq	19c04 <__assert_fail@plt+0x83b4>
   19bec:	cmp	r1, #0
   19bf0:	beq	19c10 <__assert_fail@plt+0x83c0>
   19bf4:	cmn	r1, #1
   19bf8:	ble	19c1c <__assert_fail@plt+0x83cc>
   19bfc:	pop	{fp, lr}
   19c00:	b	11550 <realloc@plt>
   19c04:	mov	r0, r1
   19c08:	pop	{fp, lr}
   19c0c:	b	19bac <__assert_fail@plt+0x835c>
   19c10:	bl	1a1dc <__assert_fail@plt+0x898c>
   19c14:	mov	r0, #0
   19c18:	pop	{fp, pc}
   19c1c:	bl	116d0 <__errno_location@plt>
   19c20:	mov	r1, #12
   19c24:	str	r1, [r0]
   19c28:	mov	r0, #0
   19c2c:	pop	{fp, pc}
   19c30:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   19c34:	add	fp, sp, #24
   19c38:	sub	sp, sp, #40	; 0x28
   19c3c:	mov	r5, r0
   19c40:	ldrb	r0, [r2]
   19c44:	cmp	r0, #0
   19c48:	beq	19d2c <__assert_fail@plt+0x84dc>
   19c4c:	movw	r9, #54072	; 0xd338
   19c50:	mov	r4, r2
   19c54:	mov	r6, r1
   19c58:	movt	r9, #2
   19c5c:	ldr	r0, [r9]
   19c60:	cmp	r0, #0
   19c64:	bne	19cd0 <__assert_fail@plt+0x8480>
   19c68:	movw	r0, #48680	; 0xbe28
   19c6c:	movw	r1, #18688	; 0x4900
   19c70:	movt	r0, #1
   19c74:	movt	r1, #8
   19c78:	bl	11604 <open64@plt>
   19c7c:	cmn	r0, #1
   19c80:	ble	19d44 <__assert_fail@plt+0x84f4>
   19c84:	movw	r3, #48694	; 0xbe36
   19c88:	add	r8, sp, #8
   19c8c:	mov	r7, r0
   19c90:	str	r0, [sp]
   19c94:	mov	r1, #1
   19c98:	mov	r2, #32
   19c9c:	movt	r3, #1
   19ca0:	mov	r0, r8
   19ca4:	bl	116dc <__sprintf_chk@plt>
   19ca8:	mov	r0, r8
   19cac:	mov	r1, #0
   19cb0:	bl	1173c <access@plt>
   19cb4:	cmp	r0, #0
   19cb8:	mvn	r1, #0
   19cbc:	mov	r0, r7
   19cc0:	movweq	r1, #1
   19cc4:	str	r1, [r9]
   19cc8:	bl	11820 <close@plt>
   19ccc:	ldr	r0, [r9]
   19cd0:	mov	r7, #0
   19cd4:	cmp	r0, #0
   19cd8:	bmi	19d38 <__assert_fail@plt+0x84e8>
   19cdc:	mov	r0, r4
   19ce0:	bl	116ac <strlen@plt>
   19ce4:	add	r0, r0, #27
   19ce8:	cmp	r0, #4032	; 0xfc0
   19cec:	bls	19d00 <__assert_fail@plt+0x84b0>
   19cf0:	bl	19bac <__assert_fail@plt+0x835c>
   19cf4:	mov	r5, r0
   19cf8:	cmp	r0, #0
   19cfc:	beq	19d38 <__assert_fail@plt+0x84e8>
   19d00:	movw	r3, #48717	; 0xbe4d
   19d04:	mov	r0, r5
   19d08:	mov	r1, #1
   19d0c:	mvn	r2, #0
   19d10:	str	r6, [sp]
   19d14:	movt	r3, #1
   19d18:	bl	116dc <__sprintf_chk@plt>
   19d1c:	add	r0, r5, r0
   19d20:	mov	r1, r4
   19d24:	bl	115c8 <strcpy@plt>
   19d28:	b	19d34 <__assert_fail@plt+0x84e4>
   19d2c:	mov	r0, #0
   19d30:	strb	r0, [r5]
   19d34:	mov	r7, r5
   19d38:	mov	r0, r7
   19d3c:	sub	sp, fp, #24
   19d40:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   19d44:	mvn	r0, #0
   19d48:	mov	r7, #0
   19d4c:	str	r0, [r9]
   19d50:	b	19d38 <__assert_fail@plt+0x84e8>
   19d54:	push	{r4, r5, r6, sl, fp, lr}
   19d58:	add	fp, sp, #16
   19d5c:	mov	r4, r0
   19d60:	bl	115d4 <__fpending@plt>
   19d64:	ldr	r6, [r4]
   19d68:	mov	r5, r0
   19d6c:	mov	r0, r4
   19d70:	bl	19ec8 <__assert_fail@plt+0x8678>
   19d74:	tst	r6, #32
   19d78:	bne	19db0 <__assert_fail@plt+0x8560>
   19d7c:	cmp	r0, #0
   19d80:	mov	r4, r0
   19d84:	mvnne	r4, #0
   19d88:	cmp	r5, #0
   19d8c:	bne	19dbc <__assert_fail@plt+0x856c>
   19d90:	cmp	r0, #0
   19d94:	beq	19dbc <__assert_fail@plt+0x856c>
   19d98:	bl	116d0 <__errno_location@plt>
   19d9c:	ldr	r0, [r0]
   19da0:	subs	r4, r0, #9
   19da4:	mvnne	r4, #0
   19da8:	mov	r0, r4
   19dac:	pop	{r4, r5, r6, sl, fp, pc}
   19db0:	mvn	r4, #0
   19db4:	cmp	r0, #0
   19db8:	beq	19dc4 <__assert_fail@plt+0x8574>
   19dbc:	mov	r0, r4
   19dc0:	pop	{r4, r5, r6, sl, fp, pc}
   19dc4:	bl	116d0 <__errno_location@plt>
   19dc8:	mov	r1, #0
   19dcc:	str	r1, [r0]
   19dd0:	mov	r0, r4
   19dd4:	pop	{r4, r5, r6, sl, fp, pc}
   19dd8:	movw	r2, #62998	; 0xf616
   19ddc:	mov	r1, #0
   19de0:	movt	r2, #149	; 0x95
   19de4:	str	r1, [r0, #16]
   19de8:	str	r1, [r0, #20]
   19dec:	str	r2, [r0, #24]
   19df0:	bx	lr
   19df4:	push	{r4, r5, r6, r7, r9, sl, fp, lr}
   19df8:	add	fp, sp, #24
   19dfc:	ldr	r2, [r0, #24]
   19e00:	movw	r3, #62998	; 0xf616
   19e04:	movt	r3, #149	; 0x95
   19e08:	cmp	r2, r3
   19e0c:	bne	19ea8 <__assert_fail@plt+0x8658>
   19e10:	add	r3, r0, #16
   19e14:	add	ip, r0, #8
   19e18:	ldrd	r4, [r3]
   19e1c:	orrs	r2, r4, r5
   19e20:	beq	19e5c <__assert_fail@plt+0x860c>
   19e24:	ldr	r6, [r1, #96]	; 0x60
   19e28:	ldr	r9, [r1, #100]	; 0x64
   19e2c:	ldm	r0, {r2, r7}
   19e30:	eor	r7, r9, r7
   19e34:	eor	r2, r6, r2
   19e38:	orrs	r2, r2, r7
   19e3c:	bne	19e5c <__assert_fail@plt+0x860c>
   19e40:	ldm	ip, {r2, r7}
   19e44:	ldm	r1, {r6, r9}
   19e48:	eor	r7, r9, r7
   19e4c:	eor	r2, r6, r2
   19e50:	orrs	r2, r2, r7
   19e54:	mov	r2, #1
   19e58:	beq	19e94 <__assert_fail@plt+0x8644>
   19e5c:	adds	r6, r4, #1
   19e60:	adc	r7, r5, #0
   19e64:	and	r2, r6, r4
   19e68:	strd	r6, [r3]
   19e6c:	and	r3, r7, r5
   19e70:	orrs	r2, r2, r3
   19e74:	mov	r2, #0
   19e78:	bne	19e94 <__assert_fail@plt+0x8644>
   19e7c:	orrs	r3, r6, r7
   19e80:	beq	19e9c <__assert_fail@plt+0x864c>
   19e84:	ldrd	r4, [r1]
   19e88:	strd	r4, [ip]
   19e8c:	ldrd	r4, [r1, #96]	; 0x60
   19e90:	strd	r4, [r0]
   19e94:	mov	r0, r2
   19e98:	pop	{r4, r5, r6, r7, r9, sl, fp, pc}
   19e9c:	mov	r2, #1
   19ea0:	mov	r0, r2
   19ea4:	pop	{r4, r5, r6, r7, r9, sl, fp, pc}
   19ea8:	movw	r0, #48735	; 0xbe5f
   19eac:	movw	r1, #48759	; 0xbe77
   19eb0:	movw	r3, #48777	; 0xbe89
   19eb4:	mov	r2, #60	; 0x3c
   19eb8:	movt	r0, #1
   19ebc:	movt	r1, #1
   19ec0:	movt	r3, #1
   19ec4:	bl	11850 <__assert_fail@plt>
   19ec8:	push	{r4, r5, r6, sl, fp, lr}
   19ecc:	add	fp, sp, #16
   19ed0:	sub	sp, sp, #8
   19ed4:	mov	r4, r0
   19ed8:	bl	1170c <fileno@plt>
   19edc:	cmn	r0, #1
   19ee0:	ble	19f54 <__assert_fail@plt+0x8704>
   19ee4:	mov	r0, r4
   19ee8:	bl	11634 <__freading@plt>
   19eec:	cmp	r0, #0
   19ef0:	beq	19f1c <__assert_fail@plt+0x86cc>
   19ef4:	mov	r0, r4
   19ef8:	bl	1170c <fileno@plt>
   19efc:	mov	r1, #1
   19f00:	mov	r2, #0
   19f04:	mov	r3, #0
   19f08:	str	r1, [sp]
   19f0c:	bl	115b0 <lseek64@plt>
   19f10:	and	r0, r0, r1
   19f14:	cmn	r0, #1
   19f18:	beq	19f54 <__assert_fail@plt+0x8704>
   19f1c:	mov	r0, r4
   19f20:	bl	1a180 <__assert_fail@plt+0x8930>
   19f24:	cmp	r0, #0
   19f28:	beq	19f54 <__assert_fail@plt+0x8704>
   19f2c:	bl	116d0 <__errno_location@plt>
   19f30:	ldr	r6, [r0]
   19f34:	mov	r5, r0
   19f38:	mov	r0, r4
   19f3c:	bl	11748 <fclose@plt>
   19f40:	cmp	r6, #0
   19f44:	strne	r6, [r5]
   19f48:	mvnne	r0, #0
   19f4c:	sub	sp, fp, #16
   19f50:	pop	{r4, r5, r6, sl, fp, pc}
   19f54:	mov	r0, r4
   19f58:	sub	sp, fp, #16
   19f5c:	pop	{r4, r5, r6, sl, fp, lr}
   19f60:	b	11748 <fclose@plt>
   19f64:	sub	sp, sp, #8
   19f68:	push	{r4, r5, r6, r7, fp, lr}
   19f6c:	add	fp, sp, #16
   19f70:	sub	sp, sp, #8
   19f74:	mov	r5, r0
   19f78:	add	r0, fp, #8
   19f7c:	cmp	r1, #11
   19f80:	str	r2, [fp, #8]
   19f84:	str	r3, [fp, #12]
   19f88:	str	r0, [sp, #4]
   19f8c:	bhi	19fc8 <__assert_fail@plt+0x8778>
   19f90:	mov	r0, #1
   19f94:	movw	r2, #1300	; 0x514
   19f98:	tst	r2, r0, lsl r1
   19f9c:	bne	1a088 <__assert_fail@plt+0x8838>
   19fa0:	movw	r2, #2570	; 0xa0a
   19fa4:	tst	r2, r0, lsl r1
   19fa8:	bne	19ff0 <__assert_fail@plt+0x87a0>
   19fac:	cmp	r1, #0
   19fb0:	bne	19fc8 <__assert_fail@plt+0x8778>
   19fb4:	ldr	r0, [sp, #4]
   19fb8:	add	r1, r0, #4
   19fbc:	str	r1, [sp, #4]
   19fc0:	mov	r1, #0
   19fc4:	b	1a094 <__assert_fail@plt+0x8844>
   19fc8:	sub	r0, r1, #1024	; 0x400
   19fcc:	cmp	r0, #10
   19fd0:	bhi	1a088 <__assert_fail@plt+0x8838>
   19fd4:	mov	r2, #1
   19fd8:	movw	r3, #645	; 0x285
   19fdc:	tst	r3, r2, lsl r0
   19fe0:	bne	1a088 <__assert_fail@plt+0x8838>
   19fe4:	movw	r3, #1282	; 0x502
   19fe8:	tst	r3, r2, lsl r0
   19fec:	beq	19ffc <__assert_fail@plt+0x87ac>
   19ff0:	mov	r0, r5
   19ff4:	bl	11760 <fcntl64@plt>
   19ff8:	b	1a0a0 <__assert_fail@plt+0x8850>
   19ffc:	cmp	r0, #6
   1a000:	bne	1a088 <__assert_fail@plt+0x8838>
   1a004:	ldr	r0, [sp, #4]
   1a008:	movw	r7, #54076	; 0xd33c
   1a00c:	movt	r7, #2
   1a010:	add	r1, r0, #4
   1a014:	str	r1, [sp, #4]
   1a018:	ldr	r6, [r0]
   1a01c:	ldr	r0, [r7]
   1a020:	cmp	r0, #0
   1a024:	bmi	1a0c4 <__assert_fail@plt+0x8874>
   1a028:	mov	r0, r5
   1a02c:	movw	r1, #1030	; 0x406
   1a030:	mov	r2, r6
   1a034:	bl	11760 <fcntl64@plt>
   1a038:	mov	r4, r0
   1a03c:	cmn	r0, #1
   1a040:	bgt	1a0b8 <__assert_fail@plt+0x8868>
   1a044:	bl	116d0 <__errno_location@plt>
   1a048:	ldr	r0, [r0]
   1a04c:	cmp	r0, #22
   1a050:	bne	1a0b8 <__assert_fail@plt+0x8868>
   1a054:	mov	r0, r5
   1a058:	mov	r1, #0
   1a05c:	mov	r2, r6
   1a060:	bl	11760 <fcntl64@plt>
   1a064:	mov	r4, r0
   1a068:	cmp	r0, #0
   1a06c:	bmi	1a0a4 <__assert_fail@plt+0x8854>
   1a070:	mvn	r0, #0
   1a074:	str	r0, [r7]
   1a078:	mov	r0, #1
   1a07c:	cmp	r0, #0
   1a080:	bne	1a0f0 <__assert_fail@plt+0x88a0>
   1a084:	b	1a0a4 <__assert_fail@plt+0x8854>
   1a088:	ldr	r0, [sp, #4]
   1a08c:	add	r2, r0, #4
   1a090:	str	r2, [sp, #4]
   1a094:	ldr	r2, [r0]
   1a098:	mov	r0, r5
   1a09c:	bl	11760 <fcntl64@plt>
   1a0a0:	mov	r4, r0
   1a0a4:	mov	r0, r4
   1a0a8:	sub	sp, fp, #16
   1a0ac:	pop	{r4, r5, r6, r7, fp, lr}
   1a0b0:	add	sp, sp, #8
   1a0b4:	bx	lr
   1a0b8:	mov	r0, #1
   1a0bc:	str	r0, [r7]
   1a0c0:	b	1a0a4 <__assert_fail@plt+0x8854>
   1a0c4:	mov	r0, r5
   1a0c8:	mov	r1, #0
   1a0cc:	mov	r2, r6
   1a0d0:	bl	11760 <fcntl64@plt>
   1a0d4:	mov	r4, r0
   1a0d8:	ldr	r0, [r7]
   1a0dc:	add	r0, r0, #1
   1a0e0:	clz	r0, r0
   1a0e4:	lsr	r0, r0, #5
   1a0e8:	cmp	r0, #0
   1a0ec:	beq	1a0a4 <__assert_fail@plt+0x8854>
   1a0f0:	cmp	r4, #0
   1a0f4:	bmi	1a0a4 <__assert_fail@plt+0x8854>
   1a0f8:	mov	r0, r4
   1a0fc:	mov	r1, #1
   1a100:	bl	11760 <fcntl64@plt>
   1a104:	cmp	r0, #0
   1a108:	bmi	1a124 <__assert_fail@plt+0x88d4>
   1a10c:	orr	r2, r0, #1
   1a110:	mov	r0, r4
   1a114:	mov	r1, #2
   1a118:	bl	11760 <fcntl64@plt>
   1a11c:	cmn	r0, #1
   1a120:	bne	1a0a4 <__assert_fail@plt+0x8854>
   1a124:	bl	116d0 <__errno_location@plt>
   1a128:	ldr	r6, [r0]
   1a12c:	mov	r5, r0
   1a130:	mov	r0, r4
   1a134:	bl	11820 <close@plt>
   1a138:	str	r6, [r5]
   1a13c:	mvn	r4, #0
   1a140:	b	1a0a4 <__assert_fail@plt+0x8854>
   1a144:	sub	sp, sp, #8
   1a148:	push	{fp, lr}
   1a14c:	mov	fp, sp
   1a150:	sub	sp, sp, #8
   1a154:	str	r2, [fp, #8]
   1a158:	str	r3, [fp, #12]
   1a15c:	tst	r1, #64	; 0x40
   1a160:	mov	r2, #0
   1a164:	ldrne	r2, [fp, #8]
   1a168:	bl	11604 <open64@plt>
   1a16c:	bl	18e5c <__assert_fail@plt+0x760c>
   1a170:	mov	sp, fp
   1a174:	pop	{fp, lr}
   1a178:	add	sp, sp, #8
   1a17c:	bx	lr
   1a180:	push	{r4, sl, fp, lr}
   1a184:	add	fp, sp, #8
   1a188:	sub	sp, sp, #8
   1a18c:	mov	r4, r0
   1a190:	cmp	r0, #0
   1a194:	beq	1a1cc <__assert_fail@plt+0x897c>
   1a198:	mov	r0, r4
   1a19c:	bl	11634 <__freading@plt>
   1a1a0:	cmp	r0, #0
   1a1a4:	beq	1a1cc <__assert_fail@plt+0x897c>
   1a1a8:	ldrb	r0, [r4, #1]
   1a1ac:	tst	r0, #1
   1a1b0:	beq	1a1cc <__assert_fail@plt+0x897c>
   1a1b4:	mov	r0, #1
   1a1b8:	mov	r2, #0
   1a1bc:	mov	r3, #0
   1a1c0:	str	r0, [sp]
   1a1c4:	mov	r0, r4
   1a1c8:	bl	1a204 <__assert_fail@plt+0x89b4>
   1a1cc:	mov	r0, r4
   1a1d0:	sub	sp, fp, #8
   1a1d4:	pop	{r4, sl, fp, lr}
   1a1d8:	b	114cc <fflush@plt>
   1a1dc:	push	{r4, r5, r6, sl, fp, lr}
   1a1e0:	add	fp, sp, #16
   1a1e4:	mov	r4, r0
   1a1e8:	bl	116d0 <__errno_location@plt>
   1a1ec:	ldr	r6, [r0]
   1a1f0:	mov	r5, r0
   1a1f4:	mov	r0, r4
   1a1f8:	bl	114f0 <free@plt>
   1a1fc:	str	r6, [r5]
   1a200:	pop	{r4, r5, r6, sl, fp, pc}
   1a204:	push	{r4, r5, r6, r7, fp, lr}
   1a208:	add	fp, sp, #16
   1a20c:	sub	sp, sp, #8
   1a210:	mov	r4, r0
   1a214:	ldr	r0, [r0, #4]
   1a218:	mov	r5, r3
   1a21c:	mov	r6, r2
   1a220:	ldr	r1, [r4, #8]
   1a224:	cmp	r1, r0
   1a228:	bne	1a244 <__assert_fail@plt+0x89f4>
   1a22c:	ldrd	r0, [r4, #16]
   1a230:	cmp	r1, r0
   1a234:	bne	1a244 <__assert_fail@plt+0x89f4>
   1a238:	ldr	r0, [r4, #36]	; 0x24
   1a23c:	cmp	r0, #0
   1a240:	beq	1a25c <__assert_fail@plt+0x8a0c>
   1a244:	mov	r0, r4
   1a248:	mov	r2, r6
   1a24c:	mov	r3, r5
   1a250:	sub	sp, fp, #16
   1a254:	pop	{r4, r5, r6, r7, fp, lr}
   1a258:	b	11754 <fseeko64@plt>
   1a25c:	ldr	r7, [fp, #8]
   1a260:	mov	r0, r4
   1a264:	bl	1170c <fileno@plt>
   1a268:	mov	r2, r6
   1a26c:	mov	r3, r5
   1a270:	str	r7, [sp]
   1a274:	bl	115b0 <lseek64@plt>
   1a278:	and	r2, r0, r1
   1a27c:	cmn	r2, #1
   1a280:	beq	1a2a0 <__assert_fail@plt+0x8a50>
   1a284:	strd	r0, [r4, #80]	; 0x50
   1a288:	ldr	r0, [r4]
   1a28c:	bic	r0, r0, #16
   1a290:	str	r0, [r4]
   1a294:	mov	r0, #0
   1a298:	sub	sp, fp, #16
   1a29c:	pop	{r4, r5, r6, r7, fp, pc}
   1a2a0:	mvn	r0, #0
   1a2a4:	sub	sp, fp, #16
   1a2a8:	pop	{r4, r5, r6, r7, fp, pc}
   1a2ac:	push	{fp, lr}
   1a2b0:	mov	fp, sp
   1a2b4:	mov	r0, #14
   1a2b8:	bl	11784 <nl_langinfo@plt>
   1a2bc:	movw	r1, #45499	; 0xb1bb
   1a2c0:	cmp	r0, #0
   1a2c4:	movt	r1, #1
   1a2c8:	movne	r1, r0
   1a2cc:	movw	r0, #48844	; 0xbecc
   1a2d0:	ldrb	r2, [r1]
   1a2d4:	movt	r0, #1
   1a2d8:	cmp	r2, #0
   1a2dc:	movne	r0, r1
   1a2e0:	pop	{fp, pc}
   1a2e4:	push	{r4, r5, r6, r7, fp, lr}
   1a2e8:	add	fp, sp, #16
   1a2ec:	sub	sp, sp, #8
   1a2f0:	cmp	r0, #0
   1a2f4:	add	r5, sp, #4
   1a2f8:	mov	r7, r2
   1a2fc:	mov	r4, r1
   1a300:	movne	r5, r0
   1a304:	mov	r0, r5
   1a308:	bl	115e0 <mbrtowc@plt>
   1a30c:	mov	r6, r0
   1a310:	cmp	r7, #0
   1a314:	beq	1a33c <__assert_fail@plt+0x8aec>
   1a318:	cmn	r6, #2
   1a31c:	bcc	1a33c <__assert_fail@plt+0x8aec>
   1a320:	mov	r0, #0
   1a324:	bl	1a808 <__assert_fail@plt+0x8fb8>
   1a328:	cmp	r0, #0
   1a32c:	bne	1a33c <__assert_fail@plt+0x8aec>
   1a330:	ldrb	r0, [r4]
   1a334:	mov	r6, #1
   1a338:	str	r0, [r5]
   1a33c:	mov	r0, r6
   1a340:	sub	sp, fp, #16
   1a344:	pop	{r4, r5, r6, r7, fp, pc}
   1a348:	push	{fp, lr}
   1a34c:	mov	fp, sp
   1a350:	mov	r4, r0
   1a354:	movw	r0, #53604	; 0xd164
   1a358:	movw	r1, #48850	; 0xbed2
   1a35c:	mov	r2, #5
   1a360:	movt	r0, #2
   1a364:	movt	r1, #1
   1a368:	ldr	r5, [r0]
   1a36c:	mov	r0, #0
   1a370:	bl	11538 <dcgettext@plt>
   1a374:	mov	r2, r0
   1a378:	mov	r0, r5
   1a37c:	mov	r1, r4
   1a380:	bl	115ec <error@plt>
   1a384:	bl	11814 <abort@plt>
   1a388:	push	{fp, lr}
   1a38c:	mov	fp, sp
   1a390:	mov	r4, r0
   1a394:	movw	r0, #53604	; 0xd164
   1a398:	movw	r1, #48893	; 0xbefd
   1a39c:	mov	r2, #5
   1a3a0:	movt	r0, #2
   1a3a4:	movt	r1, #1
   1a3a8:	ldr	r5, [r0]
   1a3ac:	mov	r0, #0
   1a3b0:	bl	11538 <dcgettext@plt>
   1a3b4:	mov	r2, r0
   1a3b8:	mov	r0, r5
   1a3bc:	mov	r1, r4
   1a3c0:	bl	115ec <error@plt>
   1a3c4:	bl	11814 <abort@plt>
   1a3c8:	cmp	r2, #0
   1a3cc:	beq	1a3fc <__assert_fail@plt+0x8bac>
   1a3d0:	mvn	r3, #0
   1a3d4:	udiv	r3, r3, r2
   1a3d8:	cmp	r3, r1
   1a3dc:	bcs	1a3fc <__assert_fail@plt+0x8bac>
   1a3e0:	push	{fp, lr}
   1a3e4:	mov	fp, sp
   1a3e8:	bl	116d0 <__errno_location@plt>
   1a3ec:	mov	r1, #12
   1a3f0:	str	r1, [r0]
   1a3f4:	mov	r0, #0
   1a3f8:	pop	{fp, pc}
   1a3fc:	mul	r1, r2, r1
   1a400:	b	19bdc <__assert_fail@plt+0x838c>
   1a404:	push	{r4, r5, fp, lr}
   1a408:	add	fp, sp, #8
   1a40c:	mov	r4, #0
   1a410:	mov	r5, r0
   1a414:	mov	r1, #524288	; 0x80000
   1a418:	str	r4, [r0, #4]
   1a41c:	movw	r0, #47331	; 0xb8e3
   1a420:	movt	r0, #1
   1a424:	bl	1a144 <__assert_fail@plt+0x88f4>
   1a428:	cmn	r0, #1
   1a42c:	str	r0, [r5]
   1a430:	ble	1a43c <__assert_fail@plt+0x8bec>
   1a434:	mov	r0, r4
   1a438:	pop	{r4, r5, fp, pc}
   1a43c:	mov	r0, #0
   1a440:	mov	r1, #0
   1a444:	mov	r4, #0
   1a448:	bl	11670 <getcwd@plt>
   1a44c:	cmp	r0, #0
   1a450:	str	r0, [r5, #4]
   1a454:	mvneq	r4, #0
   1a458:	mov	r0, r4
   1a45c:	pop	{r4, r5, fp, pc}
   1a460:	ldr	r1, [r0]
   1a464:	cmp	r1, #0
   1a468:	bmi	1a474 <__assert_fail@plt+0x8c24>
   1a46c:	mov	r0, r1
   1a470:	b	117b4 <fchdir@plt>
   1a474:	ldr	r0, [r0, #4]
   1a478:	b	1a4b0 <__assert_fail@plt+0x8c60>
   1a47c:	push	{r4, sl, fp, lr}
   1a480:	add	fp, sp, #8
   1a484:	mov	r4, r0
   1a488:	ldr	r0, [r0]
   1a48c:	cmp	r0, #0
   1a490:	bmi	1a498 <__assert_fail@plt+0x8c48>
   1a494:	bl	11820 <close@plt>
   1a498:	ldr	r0, [r4, #4]
   1a49c:	pop	{r4, sl, fp, lr}
   1a4a0:	b	1a1dc <__assert_fail@plt+0x898c>
   1a4a4:	mov	r1, #0
   1a4a8:	mov	r2, #3
   1a4ac:	b	19f64 <__assert_fail@plt+0x8714>
   1a4b0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a4b4:	add	fp, sp, #28
   1a4b8:	sub	sp, sp, #4
   1a4bc:	mov	r4, r0
   1a4c0:	bl	11574 <chdir@plt>
   1a4c4:	cmp	r0, #0
   1a4c8:	beq	1a58c <__assert_fail@plt+0x8d3c>
   1a4cc:	mov	r6, r0
   1a4d0:	bl	116d0 <__errno_location@plt>
   1a4d4:	mov	r9, r0
   1a4d8:	ldr	r0, [r0]
   1a4dc:	cmp	r0, #36	; 0x24
   1a4e0:	bne	1a77c <__assert_fail@plt+0x8f2c>
   1a4e4:	mov	r0, r4
   1a4e8:	bl	116ac <strlen@plt>
   1a4ec:	cmp	r0, #0
   1a4f0:	beq	1a7a0 <__assert_fail@plt+0x8f50>
   1a4f4:	mov	r7, r0
   1a4f8:	mov	r0, #0
   1a4fc:	cmp	r0, r7, lsr #12
   1a500:	beq	1a7b8 <__assert_fail@plt+0x8f68>
   1a504:	movw	r1, #48733	; 0xbe5d
   1a508:	mov	r0, r4
   1a50c:	movt	r1, #1
   1a510:	bl	11844 <strspn@plt>
   1a514:	cmp	r0, #0
   1a518:	beq	1a594 <__assert_fail@plt+0x8d44>
   1a51c:	mov	r6, r0
   1a520:	cmp	r0, #2
   1a524:	bne	1a5a0 <__assert_fail@plt+0x8d50>
   1a528:	add	r0, r4, #3
   1a52c:	sub	r2, r7, #3
   1a530:	mov	r1, #47	; 0x2f
   1a534:	mov	r8, #47	; 0x2f
   1a538:	bl	11724 <memchr@plt>
   1a53c:	cmp	r0, #0
   1a540:	beq	1a728 <__assert_fail@plt+0x8ed8>
   1a544:	mov	r6, r0
   1a548:	mov	r0, #0
   1a54c:	mov	r1, r4
   1a550:	mov	r2, #18688	; 0x4900
   1a554:	strb	r0, [r6]
   1a558:	mvn	r0, #99	; 0x63
   1a55c:	bl	116b8 <openat64@plt>
   1a560:	cmp	r0, #0
   1a564:	strb	r8, [r6]
   1a568:	bmi	1a720 <__assert_fail@plt+0x8ed0>
   1a56c:	movw	r1, #48733	; 0xbe5d
   1a570:	add	r6, r6, #1
   1a574:	mov	r5, r0
   1a578:	movt	r1, #1
   1a57c:	mov	r0, r6
   1a580:	bl	11844 <strspn@plt>
   1a584:	add	r6, r6, r0
   1a588:	b	1a5c4 <__assert_fail@plt+0x8d74>
   1a58c:	mov	r6, #0
   1a590:	b	1a77c <__assert_fail@plt+0x8f2c>
   1a594:	mvn	r5, #99	; 0x63
   1a598:	mov	r6, r4
   1a59c:	b	1a5c4 <__assert_fail@plt+0x8d74>
   1a5a0:	movw	r1, #48733	; 0xbe5d
   1a5a4:	mvn	r0, #99	; 0x63
   1a5a8:	mov	r2, #18688	; 0x4900
   1a5ac:	movt	r1, #1
   1a5b0:	bl	116b8 <openat64@plt>
   1a5b4:	cmp	r0, #0
   1a5b8:	bmi	1a720 <__assert_fail@plt+0x8ed0>
   1a5bc:	mov	r5, r0
   1a5c0:	add	r6, r4, r6
   1a5c4:	ldrb	r0, [r6]
   1a5c8:	cmp	r0, #47	; 0x2f
   1a5cc:	beq	1a7d0 <__assert_fail@plt+0x8f80>
   1a5d0:	add	sl, r4, r7
   1a5d4:	cmp	r6, sl
   1a5d8:	bhi	1a7e8 <__assert_fail@plt+0x8f98>
   1a5dc:	sub	r0, sl, r6
   1a5e0:	str	r9, [sp]
   1a5e4:	cmp	r0, #4096	; 0x1000
   1a5e8:	blt	1a6a0 <__assert_fail@plt+0x8e50>
   1a5ec:	movw	r9, #48733	; 0xbe5d
   1a5f0:	mov	r8, #0
   1a5f4:	movt	r9, #1
   1a5f8:	b	1a624 <__assert_fail@plt+0x8dd4>
   1a5fc:	mov	r0, #47	; 0x2f
   1a600:	mov	r1, r9
   1a604:	strb	r0, [r4], #1
   1a608:	mov	r0, r4
   1a60c:	bl	11844 <strspn@plt>
   1a610:	add	r6, r4, r0
   1a614:	mov	r5, r7
   1a618:	sub	r0, sl, r6
   1a61c:	cmp	r0, #4096	; 0x1000
   1a620:	blt	1a6a4 <__assert_fail@plt+0x8e54>
   1a624:	mov	r0, r6
   1a628:	mov	r1, #47	; 0x2f
   1a62c:	mov	r2, #4096	; 0x1000
   1a630:	bl	116c4 <memrchr@plt>
   1a634:	cmp	r0, #0
   1a638:	beq	1a734 <__assert_fail@plt+0x8ee4>
   1a63c:	mov	r4, r0
   1a640:	strb	r8, [r0], -r6
   1a644:	cmp	r0, #4096	; 0x1000
   1a648:	bge	1a788 <__assert_fail@plt+0x8f38>
   1a64c:	mov	r0, r5
   1a650:	mov	r1, r6
   1a654:	mov	r2, #18688	; 0x4900
   1a658:	bl	116b8 <openat64@plt>
   1a65c:	cmp	r0, #0
   1a660:	bmi	1a744 <__assert_fail@plt+0x8ef4>
   1a664:	mov	r7, r0
   1a668:	cmp	r5, #0
   1a66c:	bmi	1a5fc <__assert_fail@plt+0x8dac>
   1a670:	mov	r0, r5
   1a674:	bl	11820 <close@plt>
   1a678:	cmp	r0, #0
   1a67c:	beq	1a5fc <__assert_fail@plt+0x8dac>
   1a680:	movw	r0, #49045	; 0xbf95
   1a684:	movw	r1, #48947	; 0xbf33
   1a688:	movw	r3, #49058	; 0xbfa2
   1a68c:	mov	r2, #64	; 0x40
   1a690:	movt	r0, #1
   1a694:	movt	r1, #1
   1a698:	movt	r3, #1
   1a69c:	bl	11850 <__assert_fail@plt>
   1a6a0:	mov	r7, r5
   1a6a4:	cmp	r6, sl
   1a6a8:	bcs	1a6e8 <__assert_fail@plt+0x8e98>
   1a6ac:	mov	r0, r7
   1a6b0:	mov	r1, r6
   1a6b4:	mov	r2, #18688	; 0x4900
   1a6b8:	bl	116b8 <openat64@plt>
   1a6bc:	ldr	r9, [sp]
   1a6c0:	cmp	r0, #0
   1a6c4:	bmi	1a754 <__assert_fail@plt+0x8f04>
   1a6c8:	mov	r5, r0
   1a6cc:	cmp	r7, #0
   1a6d0:	bmi	1a6f0 <__assert_fail@plt+0x8ea0>
   1a6d4:	mov	r0, r7
   1a6d8:	bl	11820 <close@plt>
   1a6dc:	cmp	r0, #0
   1a6e0:	beq	1a6f0 <__assert_fail@plt+0x8ea0>
   1a6e4:	b	1a680 <__assert_fail@plt+0x8e30>
   1a6e8:	ldr	r9, [sp]
   1a6ec:	mov	r5, r7
   1a6f0:	mov	r0, r5
   1a6f4:	bl	117b4 <fchdir@plt>
   1a6f8:	cmp	r0, #0
   1a6fc:	bne	1a758 <__assert_fail@plt+0x8f08>
   1a700:	mov	r6, #0
   1a704:	cmp	r5, #0
   1a708:	bmi	1a77c <__assert_fail@plt+0x8f2c>
   1a70c:	mov	r0, r5
   1a710:	bl	11820 <close@plt>
   1a714:	cmp	r0, #0
   1a718:	beq	1a77c <__assert_fail@plt+0x8f2c>
   1a71c:	b	1a680 <__assert_fail@plt+0x8e30>
   1a720:	ldr	r4, [r9]
   1a724:	b	1a774 <__assert_fail@plt+0x8f24>
   1a728:	mov	r0, #36	; 0x24
   1a72c:	str	r0, [r9]
   1a730:	b	1a778 <__assert_fail@plt+0x8f28>
   1a734:	ldr	r1, [sp]
   1a738:	mov	r0, #36	; 0x24
   1a73c:	str	r0, [r1]
   1a740:	b	1a778 <__assert_fail@plt+0x8f28>
   1a744:	ldr	r9, [sp]
   1a748:	mov	r0, #47	; 0x2f
   1a74c:	strb	r0, [r4]
   1a750:	b	1a758 <__assert_fail@plt+0x8f08>
   1a754:	mov	r5, r7
   1a758:	ldr	r4, [r9]
   1a75c:	cmp	r5, #0
   1a760:	bmi	1a774 <__assert_fail@plt+0x8f24>
   1a764:	mov	r0, r5
   1a768:	bl	11820 <close@plt>
   1a76c:	cmp	r0, #0
   1a770:	bne	1a680 <__assert_fail@plt+0x8e30>
   1a774:	str	r4, [r9]
   1a778:	mvn	r6, #0
   1a77c:	mov	r0, r6
   1a780:	sub	sp, fp, #28
   1a784:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a788:	movw	r0, #49026	; 0xbf82
   1a78c:	movw	r1, #48947	; 0xbf33
   1a790:	movw	r3, #48964	; 0xbf44
   1a794:	mov	r2, #179	; 0xb3
   1a798:	movt	r0, #1
   1a79c:	b	1a7fc <__assert_fail@plt+0x8fac>
   1a7a0:	movw	r0, #48939	; 0xbf2b
   1a7a4:	movw	r1, #48947	; 0xbf33
   1a7a8:	movw	r3, #48964	; 0xbf44
   1a7ac:	mov	r2, #126	; 0x7e
   1a7b0:	movt	r0, #1
   1a7b4:	b	1a7fc <__assert_fail@plt+0x8fac>
   1a7b8:	movw	r0, #48987	; 0xbf5b
   1a7bc:	movw	r1, #48947	; 0xbf33
   1a7c0:	movw	r3, #48964	; 0xbf44
   1a7c4:	mov	r2, #127	; 0x7f
   1a7c8:	movt	r0, #1
   1a7cc:	b	1a7fc <__assert_fail@plt+0x8fac>
   1a7d0:	movw	r0, #48999	; 0xbf67
   1a7d4:	movw	r1, #48947	; 0xbf33
   1a7d8:	movw	r3, #48964	; 0xbf44
   1a7dc:	mov	r2, #162	; 0xa2
   1a7e0:	movt	r0, #1
   1a7e4:	b	1a7fc <__assert_fail@plt+0x8fac>
   1a7e8:	movw	r0, #49011	; 0xbf73
   1a7ec:	movw	r1, #48947	; 0xbf33
   1a7f0:	movw	r3, #48964	; 0xbf44
   1a7f4:	mov	r2, #163	; 0xa3
   1a7f8:	movt	r0, #1
   1a7fc:	movt	r1, #1
   1a800:	movt	r3, #1
   1a804:	bl	11850 <__assert_fail@plt>
   1a808:	push	{r4, sl, fp, lr}
   1a80c:	add	fp, sp, #8
   1a810:	sub	sp, sp, #264	; 0x108
   1a814:	add	r1, sp, #7
   1a818:	movw	r2, #257	; 0x101
   1a81c:	bl	1a874 <__assert_fail@plt+0x9024>
   1a820:	mov	r4, #0
   1a824:	cmp	r0, #0
   1a828:	bne	1a868 <__assert_fail@plt+0x9018>
   1a82c:	movw	r1, #49095	; 0xbfc7
   1a830:	add	r0, sp, #7
   1a834:	mov	r2, #2
   1a838:	movt	r1, #1
   1a83c:	bl	116a0 <bcmp@plt>
   1a840:	cmp	r0, #0
   1a844:	beq	1a868 <__assert_fail@plt+0x9018>
   1a848:	movw	r1, #49097	; 0xbfc9
   1a84c:	add	r0, sp, #7
   1a850:	mov	r2, #6
   1a854:	movt	r1, #1
   1a858:	bl	116a0 <bcmp@plt>
   1a85c:	cmp	r0, #0
   1a860:	mov	r4, r0
   1a864:	movwne	r4, #1
   1a868:	mov	r0, r4
   1a86c:	sub	sp, fp, #8
   1a870:	pop	{r4, sl, fp, pc}
   1a874:	push	{r4, r5, r6, r7, fp, lr}
   1a878:	add	fp, sp, #16
   1a87c:	mov	r4, r1
   1a880:	mov	r1, #0
   1a884:	mov	r6, r2
   1a888:	bl	1176c <setlocale@plt>
   1a88c:	cmp	r0, #0
   1a890:	beq	1a8c0 <__assert_fail@plt+0x9070>
   1a894:	mov	r7, r0
   1a898:	bl	116ac <strlen@plt>
   1a89c:	cmp	r0, r6
   1a8a0:	bcs	1a8dc <__assert_fail@plt+0x908c>
   1a8a4:	add	r2, r0, #1
   1a8a8:	mov	r0, r4
   1a8ac:	mov	r1, r7
   1a8b0:	bl	11508 <memcpy@plt>
   1a8b4:	mov	r5, #0
   1a8b8:	mov	r0, r5
   1a8bc:	pop	{r4, r5, r6, r7, fp, pc}
   1a8c0:	mov	r5, #22
   1a8c4:	cmp	r6, #0
   1a8c8:	beq	1a904 <__assert_fail@plt+0x90b4>
   1a8cc:	mov	r0, #0
   1a8d0:	strb	r0, [r4]
   1a8d4:	mov	r0, r5
   1a8d8:	pop	{r4, r5, r6, r7, fp, pc}
   1a8dc:	mov	r5, #34	; 0x22
   1a8e0:	cmp	r6, #0
   1a8e4:	beq	1a904 <__assert_fail@plt+0x90b4>
   1a8e8:	sub	r6, r6, #1
   1a8ec:	mov	r0, r4
   1a8f0:	mov	r1, r7
   1a8f4:	mov	r2, r6
   1a8f8:	bl	11508 <memcpy@plt>
   1a8fc:	mov	r0, #0
   1a900:	strb	r0, [r4, r6]
   1a904:	mov	r0, r5
   1a908:	pop	{r4, r5, r6, r7, fp, pc}
   1a90c:	mov	r1, #0
   1a910:	b	1176c <setlocale@plt>
   1a914:	cmp	r3, #0
   1a918:	cmpeq	r2, #0
   1a91c:	bne	1a934 <__assert_fail@plt+0x90e4>
   1a920:	cmp	r1, #0
   1a924:	cmpeq	r0, #0
   1a928:	mvnne	r1, #0
   1a92c:	mvnne	r0, #0
   1a930:	b	1a950 <__assert_fail@plt+0x9100>
   1a934:	sub	sp, sp, #8
   1a938:	push	{sp, lr}
   1a93c:	bl	1a960 <__assert_fail@plt+0x9110>
   1a940:	ldr	lr, [sp, #4]
   1a944:	add	sp, sp, #8
   1a948:	pop	{r2, r3}
   1a94c:	bx	lr
   1a950:	push	{r1, lr}
   1a954:	mov	r0, #8
   1a958:	bl	114a8 <raise@plt>
   1a95c:	pop	{r1, pc}
   1a960:	cmp	r1, r3
   1a964:	cmpeq	r0, r2
   1a968:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a96c:	mov	r4, r0
   1a970:	movcc	r0, #0
   1a974:	mov	r5, r1
   1a978:	ldr	lr, [sp, #36]	; 0x24
   1a97c:	movcc	r1, r0
   1a980:	bcc	1aa7c <__assert_fail@plt+0x922c>
   1a984:	cmp	r3, #0
   1a988:	clzeq	ip, r2
   1a98c:	clzne	ip, r3
   1a990:	addeq	ip, ip, #32
   1a994:	cmp	r5, #0
   1a998:	clzeq	r1, r4
   1a99c:	addeq	r1, r1, #32
   1a9a0:	clzne	r1, r5
   1a9a4:	sub	ip, ip, r1
   1a9a8:	sub	sl, ip, #32
   1a9ac:	lsl	r9, r3, ip
   1a9b0:	rsb	fp, ip, #32
   1a9b4:	orr	r9, r9, r2, lsl sl
   1a9b8:	orr	r9, r9, r2, lsr fp
   1a9bc:	lsl	r8, r2, ip
   1a9c0:	cmp	r5, r9
   1a9c4:	cmpeq	r4, r8
   1a9c8:	movcc	r0, #0
   1a9cc:	movcc	r1, r0
   1a9d0:	bcc	1a9ec <__assert_fail@plt+0x919c>
   1a9d4:	mov	r0, #1
   1a9d8:	subs	r4, r4, r8
   1a9dc:	lsl	r1, r0, sl
   1a9e0:	orr	r1, r1, r0, lsr fp
   1a9e4:	lsl	r0, r0, ip
   1a9e8:	sbc	r5, r5, r9
   1a9ec:	cmp	ip, #0
   1a9f0:	beq	1aa7c <__assert_fail@plt+0x922c>
   1a9f4:	lsr	r6, r8, #1
   1a9f8:	orr	r6, r6, r9, lsl #31
   1a9fc:	lsr	r7, r9, #1
   1aa00:	mov	r2, ip
   1aa04:	b	1aa28 <__assert_fail@plt+0x91d8>
   1aa08:	subs	r3, r4, r6
   1aa0c:	sbc	r8, r5, r7
   1aa10:	adds	r3, r3, r3
   1aa14:	adc	r8, r8, r8
   1aa18:	adds	r4, r3, #1
   1aa1c:	adc	r5, r8, #0
   1aa20:	subs	r2, r2, #1
   1aa24:	beq	1aa44 <__assert_fail@plt+0x91f4>
   1aa28:	cmp	r5, r7
   1aa2c:	cmpeq	r4, r6
   1aa30:	bcs	1aa08 <__assert_fail@plt+0x91b8>
   1aa34:	adds	r4, r4, r4
   1aa38:	adc	r5, r5, r5
   1aa3c:	subs	r2, r2, #1
   1aa40:	bne	1aa28 <__assert_fail@plt+0x91d8>
   1aa44:	lsr	r3, r4, ip
   1aa48:	orr	r3, r3, r5, lsl fp
   1aa4c:	lsr	r2, r5, ip
   1aa50:	orr	r3, r3, r5, lsr sl
   1aa54:	adds	r0, r0, r4
   1aa58:	mov	r4, r3
   1aa5c:	lsl	r3, r2, ip
   1aa60:	orr	r3, r3, r4, lsl sl
   1aa64:	lsl	ip, r4, ip
   1aa68:	orr	r3, r3, r4, lsr fp
   1aa6c:	adc	r1, r1, r5
   1aa70:	subs	r0, r0, ip
   1aa74:	mov	r5, r2
   1aa78:	sbc	r1, r1, r3
   1aa7c:	cmp	lr, #0
   1aa80:	strdne	r4, [lr]
   1aa84:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1aa88:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1aa8c:	mov	r7, r0
   1aa90:	ldr	r6, [pc, #72]	; 1aae0 <__assert_fail@plt+0x9290>
   1aa94:	ldr	r5, [pc, #72]	; 1aae4 <__assert_fail@plt+0x9294>
   1aa98:	add	r6, pc, r6
   1aa9c:	add	r5, pc, r5
   1aaa0:	sub	r6, r6, r5
   1aaa4:	mov	r8, r1
   1aaa8:	mov	r9, r2
   1aaac:	bl	11464 <fstatfs64@plt-0x20>
   1aab0:	asrs	r6, r6, #2
   1aab4:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   1aab8:	mov	r4, #0
   1aabc:	add	r4, r4, #1
   1aac0:	ldr	r3, [r5], #4
   1aac4:	mov	r2, r9
   1aac8:	mov	r1, r8
   1aacc:	mov	r0, r7
   1aad0:	blx	r3
   1aad4:	cmp	r6, r4
   1aad8:	bne	1aabc <__assert_fail@plt+0x926c>
   1aadc:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1aae0:	andeq	r2, r1, r4, ror #8
   1aae4:	andeq	r2, r1, ip, asr r4
   1aae8:	bx	lr
   1aaec:	ldr	r3, [pc, #12]	; 1ab00 <__assert_fail@plt+0x92b0>
   1aaf0:	mov	r1, #0
   1aaf4:	add	r3, pc, r3
   1aaf8:	ldr	r2, [r3]
   1aafc:	b	116e8 <__cxa_atexit@plt>
   1ab00:	andeq	r2, r1, r0, ror #12

Disassembly of section .fini:

0001ab04 <.fini>:
   1ab04:	push	{r3, lr}
   1ab08:	pop	{r3, pc}
