
../repos/inetutils/tests/ls:     file format elf32-littlearm


Disassembly of section .init:

00010cb8 <.init>:
   10cb8:	push	{r3, lr}
   10cbc:	bl	10f9c <__assert_fail@plt+0x48>
   10cc0:	pop	{r3, pc}

Disassembly of section .plt:

00010cc4 <fstatfs64@plt-0x14>:
   10cc4:	push	{lr}		; (str lr, [sp, #-4]!)
   10cc8:	ldr	lr, [pc, #4]	; 10cd4 <fstatfs64@plt-0x4>
   10ccc:	add	lr, pc, lr
   10cd0:	ldr	pc, [lr, #8]!
   10cd4:	andeq	r7, r1, ip, lsr #6

00010cd8 <fstatfs64@plt>:
   10cd8:	add	ip, pc, #0, 12
   10cdc:	add	ip, ip, #94208	; 0x17000
   10ce0:	ldr	pc, [ip, #812]!	; 0x32c

00010ce4 <calloc@plt>:
   10ce4:	add	ip, pc, #0, 12
   10ce8:	add	ip, ip, #94208	; 0x17000
   10cec:	ldr	pc, [ip, #804]!	; 0x324

00010cf0 <raise@plt>:
   10cf0:	add	ip, pc, #0, 12
   10cf4:	add	ip, ip, #94208	; 0x17000
   10cf8:	ldr	pc, [ip, #796]!	; 0x31c

00010cfc <strcmp@plt>:
   10cfc:	add	ip, pc, #0, 12
   10d00:	add	ip, ip, #94208	; 0x17000
   10d04:	ldr	pc, [ip, #788]!	; 0x314

00010d08 <getpwuid@plt>:
   10d08:	add	ip, pc, #0, 12
   10d0c:	add	ip, ip, #94208	; 0x17000
   10d10:	ldr	pc, [ip, #780]!	; 0x30c

00010d14 <printf@plt>:
   10d14:	add	ip, pc, #0, 12
   10d18:	add	ip, ip, #94208	; 0x17000
   10d1c:	ldr	pc, [ip, #772]!	; 0x304

00010d20 <getuid@plt>:
   10d20:	add	ip, pc, #0, 12
   10d24:	add	ip, ip, #94208	; 0x17000
   10d28:	ldr	pc, [ip, #764]!	; 0x2fc

00010d2c <memmove@plt>:
   10d2c:	add	ip, pc, #0, 12
   10d30:	add	ip, ip, #94208	; 0x17000
   10d34:	ldr	pc, [ip, #756]!	; 0x2f4

00010d38 <free@plt>:
   10d38:	add	ip, pc, #0, 12
   10d3c:	add	ip, ip, #94208	; 0x17000
   10d40:	ldr	pc, [ip, #748]!	; 0x2ec

00010d44 <memcpy@plt>:
   10d44:	add	ip, pc, #0, 12
   10d48:	add	ip, ip, #94208	; 0x17000
   10d4c:	ldr	pc, [ip, #740]!	; 0x2e4

00010d50 <time@plt>:
   10d50:	add	ip, pc, #0, 12
   10d54:	add	ip, ip, #94208	; 0x17000
   10d58:	ldr	pc, [ip, #732]!	; 0x2dc

00010d5c <ctime@plt>:
   10d5c:	add	ip, pc, #0, 12
   10d60:	add	ip, ip, #94208	; 0x17000
   10d64:	ldr	pc, [ip, #724]!	; 0x2d4

00010d68 <realloc@plt>:
   10d68:	add	ip, pc, #0, 12
   10d6c:	add	ip, ip, #94208	; 0x17000
   10d70:	ldr	pc, [ip, #716]!	; 0x2cc

00010d74 <funlockfile@plt>:
   10d74:	add	ip, pc, #0, 12
   10d78:	add	ip, ip, #94208	; 0x17000
   10d7c:	ldr	pc, [ip, #708]!	; 0x2c4

00010d80 <__fxstatat64@plt>:
   10d80:	add	ip, pc, #0, 12
   10d84:	add	ip, ip, #94208	; 0x17000
   10d88:	ldr	pc, [ip, #700]!	; 0x2bc

00010d8c <__fxstat64@plt>:
   10d8c:	add	ip, pc, #0, 12
   10d90:	add	ip, ip, #94208	; 0x17000
   10d94:	ldr	pc, [ip, #692]!	; 0x2b4

00010d98 <readlink@plt>:
   10d98:	add	ip, pc, #0, 12
   10d9c:	add	ip, ip, #94208	; 0x17000
   10da0:	ldr	pc, [ip, #684]!	; 0x2ac

00010da4 <fwrite@plt>:
   10da4:	add	ip, pc, #0, 12
   10da8:	add	ip, ip, #94208	; 0x17000
   10dac:	ldr	pc, [ip, #676]!	; 0x2a4

00010db0 <ioctl@plt>:
   10db0:	add	ip, pc, #0, 12
   10db4:	add	ip, ip, #94208	; 0x17000
   10db8:	ldr	pc, [ip, #668]!	; 0x29c

00010dbc <strcpy@plt>:
   10dbc:	add	ip, pc, #0, 12
   10dc0:	add	ip, ip, #94208	; 0x17000
   10dc4:	ldr	pc, [ip, #660]!	; 0x294

00010dc8 <open64@plt>:
   10dc8:	add	ip, pc, #0, 12
   10dcc:	add	ip, ip, #94208	; 0x17000
   10dd0:	ldr	pc, [ip, #652]!	; 0x28c

00010dd4 <getenv@plt>:
   10dd4:	add	ip, pc, #0, 12
   10dd8:	add	ip, ip, #94208	; 0x17000
   10ddc:	ldr	pc, [ip, #644]!	; 0x284

00010de0 <malloc@plt>:
   10de0:	add	ip, pc, #0, 12
   10de4:	add	ip, ip, #94208	; 0x17000
   10de8:	ldr	pc, [ip, #636]!	; 0x27c

00010dec <__libc_start_main@plt>:
   10dec:	add	ip, pc, #0, 12
   10df0:	add	ip, ip, #94208	; 0x17000
   10df4:	ldr	pc, [ip, #628]!	; 0x274

00010df8 <strerror@plt>:
   10df8:	add	ip, pc, #0, 12
   10dfc:	add	ip, ip, #94208	; 0x17000
   10e00:	ldr	pc, [ip, #620]!	; 0x26c

00010e04 <__gmon_start__@plt>:
   10e04:	add	ip, pc, #0, 12
   10e08:	add	ip, ip, #94208	; 0x17000
   10e0c:	ldr	pc, [ip, #612]!	; 0x264

00010e10 <__ctype_b_loc@plt>:
   10e10:	add	ip, pc, #0, 12
   10e14:	add	ip, ip, #94208	; 0x17000
   10e18:	ldr	pc, [ip, #604]!	; 0x25c

00010e1c <strlen@plt>:
   10e1c:	add	ip, pc, #0, 12
   10e20:	add	ip, ip, #94208	; 0x17000
   10e24:	ldr	pc, [ip, #596]!	; 0x254

00010e28 <strchr@plt>:
   10e28:	add	ip, pc, #0, 12
   10e2c:	add	ip, ip, #94208	; 0x17000
   10e30:	ldr	pc, [ip, #588]!	; 0x24c

00010e34 <openat64@plt>:
   10e34:	add	ip, pc, #0, 12
   10e38:	add	ip, ip, #94208	; 0x17000
   10e3c:	ldr	pc, [ip, #580]!	; 0x244

00010e40 <fprintf@plt>:
   10e40:	add	ip, pc, #0, 12
   10e44:	add	ip, ip, #94208	; 0x17000
   10e48:	ldr	pc, [ip, #572]!	; 0x23c

00010e4c <__errno_location@plt>:
   10e4c:	add	ip, pc, #0, 12
   10e50:	add	ip, ip, #94208	; 0x17000
   10e54:	ldr	pc, [ip, #564]!	; 0x234

00010e58 <snprintf@plt>:
   10e58:	add	ip, pc, #0, 12
   10e5c:	add	ip, ip, #94208	; 0x17000
   10e60:	ldr	pc, [ip, #556]!	; 0x22c

00010e64 <memset@plt>:
   10e64:	add	ip, pc, #0, 12
   10e68:	add	ip, ip, #94208	; 0x17000
   10e6c:	ldr	pc, [ip, #548]!	; 0x224

00010e70 <putchar@plt>:
   10e70:	add	ip, pc, #0, 12
   10e74:	add	ip, ip, #94208	; 0x17000
   10e78:	ldr	pc, [ip, #540]!	; 0x21c

00010e7c <fcntl64@plt>:
   10e7c:	add	ip, pc, #0, 12
   10e80:	add	ip, ip, #94208	; 0x17000
   10e84:	ldr	pc, [ip, #532]!	; 0x214

00010e88 <strrchr@plt>:
   10e88:	add	ip, pc, #0, 12
   10e8c:	add	ip, ip, #94208	; 0x17000
   10e90:	ldr	pc, [ip, #524]!	; 0x20c

00010e94 <fputc@plt>:
   10e94:	add	ip, pc, #0, 12
   10e98:	add	ip, ip, #94208	; 0x17000
   10e9c:	ldr	pc, [ip, #516]!	; 0x204

00010ea0 <readdir64@plt>:
   10ea0:	add	ip, pc, #0, 12
   10ea4:	add	ip, ip, #94208	; 0x17000
   10ea8:	ldr	pc, [ip, #508]!	; 0x1fc

00010eac <fdopendir@plt>:
   10eac:	add	ip, pc, #0, 12
   10eb0:	add	ip, ip, #94208	; 0x17000
   10eb4:	ldr	pc, [ip, #500]!	; 0x1f4

00010eb8 <dirfd@plt>:
   10eb8:	add	ip, pc, #0, 12
   10ebc:	add	ip, ip, #94208	; 0x17000
   10ec0:	ldr	pc, [ip, #492]!	; 0x1ec

00010ec4 <flockfile@plt>:
   10ec4:	add	ip, pc, #0, 12
   10ec8:	add	ip, ip, #94208	; 0x17000
   10ecc:	ldr	pc, [ip, #484]!	; 0x1e4

00010ed0 <atoi@plt>:
   10ed0:	add	ip, pc, #0, 12
   10ed4:	add	ip, ip, #94208	; 0x17000
   10ed8:	ldr	pc, [ip, #476]!	; 0x1dc

00010edc <fchdir@plt>:
   10edc:	add	ip, pc, #0, 12
   10ee0:	add	ip, ip, #94208	; 0x17000
   10ee4:	ldr	pc, [ip, #468]!	; 0x1d4

00010ee8 <qsort@plt>:
   10ee8:	add	ip, pc, #0, 12
   10eec:	add	ip, ip, #94208	; 0x17000
   10ef0:	ldr	pc, [ip, #460]!	; 0x1cc

00010ef4 <__xstat64@plt>:
   10ef4:	add	ip, pc, #0, 12
   10ef8:	add	ip, ip, #94208	; 0x17000
   10efc:	ldr	pc, [ip, #452]!	; 0x1c4

00010f00 <isatty@plt>:
   10f00:	add	ip, pc, #0, 12
   10f04:	add	ip, ip, #94208	; 0x17000
   10f08:	ldr	pc, [ip, #444]!	; 0x1bc

00010f0c <strncmp@plt>:
   10f0c:	add	ip, pc, #0, 12
   10f10:	add	ip, ip, #94208	; 0x17000
   10f14:	ldr	pc, [ip, #436]!	; 0x1b4

00010f18 <abort@plt>:
   10f18:	add	ip, pc, #0, 12
   10f1c:	add	ip, ip, #94208	; 0x17000
   10f20:	ldr	pc, [ip, #428]!	; 0x1ac

00010f24 <close@plt>:
   10f24:	add	ip, pc, #0, 12
   10f28:	add	ip, ip, #94208	; 0x17000
   10f2c:	ldr	pc, [ip, #420]!	; 0x1a4

00010f30 <__lxstat64@plt>:
   10f30:	add	ip, pc, #0, 12
   10f34:	add	ip, ip, #94208	; 0x17000
   10f38:	ldr	pc, [ip, #412]!	; 0x19c

00010f3c <closedir@plt>:
   10f3c:	add	ip, pc, #0, 12
   10f40:	add	ip, ip, #94208	; 0x17000
   10f44:	ldr	pc, [ip, #404]!	; 0x194

00010f48 <getgrgid@plt>:
   10f48:	add	ip, pc, #0, 12
   10f4c:	add	ip, ip, #94208	; 0x17000
   10f50:	ldr	pc, [ip, #396]!	; 0x18c

00010f54 <__assert_fail@plt>:
   10f54:	add	ip, pc, #0, 12
   10f58:	add	ip, ip, #94208	; 0x17000
   10f5c:	ldr	pc, [ip, #388]!	; 0x184

Disassembly of section .text:

00010f60 <.text>:
   10f60:	mov	fp, #0
   10f64:	mov	lr, #0
   10f68:	pop	{r1}		; (ldr r1, [sp], #4)
   10f6c:	mov	r2, sp
   10f70:	push	{r2}		; (str r2, [sp, #-4]!)
   10f74:	push	{r0}		; (str r0, [sp, #-4]!)
   10f78:	ldr	ip, [pc, #16]	; 10f90 <__assert_fail@plt+0x3c>
   10f7c:	push	{ip}		; (str ip, [sp, #-4]!)
   10f80:	ldr	r0, [pc, #12]	; 10f94 <__assert_fail@plt+0x40>
   10f84:	ldr	r3, [pc, #12]	; 10f98 <__assert_fail@plt+0x44>
   10f88:	bl	10dec <__libc_start_main@plt>
   10f8c:	bl	10f18 <abort@plt>
   10f90:	andeq	r7, r1, r8, ror #14
   10f94:	andeq	r1, r1, r0, asr r0
   10f98:	andeq	r7, r1, r8, lsl #14
   10f9c:	ldr	r3, [pc, #20]	; 10fb8 <__assert_fail@plt+0x64>
   10fa0:	ldr	r2, [pc, #20]	; 10fbc <__assert_fail@plt+0x68>
   10fa4:	add	r3, pc, r3
   10fa8:	ldr	r2, [r3, r2]
   10fac:	cmp	r2, #0
   10fb0:	bxeq	lr
   10fb4:	b	10e04 <__gmon_start__@plt>
   10fb8:	andeq	r7, r1, r4, asr r0
   10fbc:	andeq	r0, r0, r4, ror #1
   10fc0:	ldr	r0, [pc, #24]	; 10fe0 <__assert_fail@plt+0x8c>
   10fc4:	ldr	r3, [pc, #24]	; 10fe4 <__assert_fail@plt+0x90>
   10fc8:	cmp	r3, r0
   10fcc:	bxeq	lr
   10fd0:	ldr	r3, [pc, #16]	; 10fe8 <__assert_fail@plt+0x94>
   10fd4:	cmp	r3, #0
   10fd8:	bxeq	lr
   10fdc:	bx	r3
   10fe0:	andeq	r8, r2, r0, lsl r1
   10fe4:	andeq	r8, r2, r0, lsl r1
   10fe8:	andeq	r0, r0, r0
   10fec:	ldr	r0, [pc, #36]	; 11018 <__assert_fail@plt+0xc4>
   10ff0:	ldr	r1, [pc, #36]	; 1101c <__assert_fail@plt+0xc8>
   10ff4:	sub	r1, r1, r0
   10ff8:	asr	r1, r1, #2
   10ffc:	add	r1, r1, r1, lsr #31
   11000:	asrs	r1, r1, #1
   11004:	bxeq	lr
   11008:	ldr	r3, [pc, #16]	; 11020 <__assert_fail@plt+0xcc>
   1100c:	cmp	r3, #0
   11010:	bxeq	lr
   11014:	bx	r3
   11018:	andeq	r8, r2, r0, lsl r1
   1101c:	andeq	r8, r2, r0, lsl r1
   11020:	andeq	r0, r0, r0
   11024:	push	{r4, lr}
   11028:	ldr	r4, [pc, #24]	; 11048 <__assert_fail@plt+0xf4>
   1102c:	ldrb	r3, [r4]
   11030:	cmp	r3, #0
   11034:	popne	{r4, pc}
   11038:	bl	10fc0 <__assert_fail@plt+0x6c>
   1103c:	mov	r3, #1
   11040:	strb	r3, [r4]
   11044:	pop	{r4, pc}
   11048:	andeq	r8, r2, r4, lsl r1
   1104c:	b	10fec <__assert_fail@plt+0x98>
   11050:	b	11054 <__assert_fail@plt+0x100>
   11054:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11058:	add	fp, sp, #28
   1105c:	sub	sp, sp, #12
   11060:	mov	r4, r1
   11064:	mov	r5, r0
   11068:	movw	r1, #33132	; 0x816c
   1106c:	movt	r1, #2
   11070:	mov	r0, #0
   11074:	str	r0, [r1]
   11078:	movw	r1, #33052	; 0x811c
   1107c:	movt	r1, #2
   11080:	strb	r0, [r1]
   11084:	movw	r1, #33124	; 0x8164
   11088:	movt	r1, #2
   1108c:	str	r0, [r1]
   11090:	movw	r1, #33176	; 0x8198
   11094:	movt	r1, #2
   11098:	str	r0, [r1]
   1109c:	movw	r8, #33120	; 0x8160
   110a0:	movt	r8, #2
   110a4:	str	r0, [r8]
   110a8:	movw	r1, #33140	; 0x8174
   110ac:	movt	r1, #2
   110b0:	str	r0, [r1]
   110b4:	movw	r1, #33192	; 0x81a8
   110b8:	movt	r1, #2
   110bc:	str	r0, [r1]
   110c0:	movw	sl, #33160	; 0x8188
   110c4:	movt	sl, #2
   110c8:	str	r0, [sl]
   110cc:	movw	r1, #33196	; 0x81ac
   110d0:	movt	r1, #2
   110d4:	str	r0, [r1]
   110d8:	movw	r1, #33180	; 0x819c
   110dc:	movt	r1, #2
   110e0:	str	r0, [r1]
   110e4:	movw	r1, #33172	; 0x8194
   110e8:	movt	r1, #2
   110ec:	str	r0, [r1]
   110f0:	movw	r1, #33144	; 0x8178
   110f4:	movt	r1, #2
   110f8:	str	r0, [r1]
   110fc:	movw	r1, #33200	; 0x81b0
   11100:	movt	r1, #2
   11104:	str	r0, [r1]
   11108:	movw	r6, #33116	; 0x815c
   1110c:	movt	r6, #2
   11110:	str	r0, [r6]
   11114:	movw	r1, #33168	; 0x8190
   11118:	movt	r1, #2
   1111c:	str	r0, [r1]
   11120:	movw	r1, #33136	; 0x8170
   11124:	movt	r1, #2
   11128:	str	r0, [r1]
   1112c:	movw	r1, #33128	; 0x8168
   11130:	movt	r1, #2
   11134:	str	r0, [r1]
   11138:	movw	r1, #33112	; 0x8158
   1113c:	movt	r1, #2
   11140:	str	r0, [r1]
   11144:	movw	r9, #33204	; 0x81b4
   11148:	movt	r9, #2
   1114c:	str	r0, [r9]
   11150:	movw	r1, #33108	; 0x8154
   11154:	movt	r1, #2
   11158:	str	r0, [r1]
   1115c:	movw	r1, #33184	; 0x81a0
   11160:	movt	r1, #2
   11164:	str	r0, [r1]
   11168:	movw	r1, #33152	; 0x8180
   1116c:	movt	r1, #2
   11170:	str	r0, [r1]
   11174:	movw	r1, #33164	; 0x818c
   11178:	movt	r1, #2
   1117c:	str	r0, [r1]
   11180:	movw	r1, #33148	; 0x817c
   11184:	movt	r1, #2
   11188:	str	r0, [r1]
   1118c:	mov	r7, #1
   11190:	mov	r0, #1
   11194:	bl	10f00 <isatty@plt>
   11198:	cmp	r0, #0
   1119c:	beq	111f4 <__assert_fail@plt+0x2a0>
   111a0:	movw	r0, #30676	; 0x77d4
   111a4:	movt	r0, #1
   111a8:	bl	10dd4 <getenv@plt>
   111ac:	cmp	r0, #0
   111b0:	beq	111c8 <__assert_fail@plt+0x274>
   111b4:	bl	10ed0 <atoi@plt>
   111b8:	movw	r1, #33008	; 0x80f0
   111bc:	movt	r1, #2
   111c0:	str	r0, [r1]
   111c4:	b	111e0 <__assert_fail@plt+0x28c>
   111c8:	add	r2, sp, #4
   111cc:	mov	r0, #1
   111d0:	movw	r1, #21523	; 0x5413
   111d4:	bl	16e20 <__assert_fail@plt+0x5ecc>
   111d8:	cmp	r0, #0
   111dc:	beq	1180c <__assert_fail@plt+0x8b8>
   111e0:	mov	r0, #1
   111e4:	movw	r1, #33200	; 0x81b0
   111e8:	movt	r1, #2
   111ec:	str	r0, [r1]
   111f0:	mov	r6, r8
   111f4:	str	r7, [r6]
   111f8:	bl	10d20 <getuid@plt>
   111fc:	cmp	r0, #0
   11200:	bne	11214 <__assert_fail@plt+0x2c0>
   11204:	mov	r0, #1
   11208:	movw	r1, #33196	; 0x81ac
   1120c:	movt	r1, #2
   11210:	str	r0, [r1]
   11214:	movw	r1, #33028	; 0x8104
   11218:	movt	r1, #2
   1121c:	mov	r0, #1
   11220:	str	r0, [r1]
   11224:	mov	r6, #20
   11228:	movw	r7, #30684	; 0x77dc
   1122c:	movt	r7, #1
   11230:	movw	r8, #33176	; 0x8198
   11234:	movt	r8, #2
   11238:	b	11248 <__assert_fail@plt+0x2f4>
   1123c:	movw	r1, #33120	; 0x8160
   11240:	movt	r1, #2
   11244:	str	r0, [r1]
   11248:	mov	r0, r5
   1124c:	mov	r1, r4
   11250:	mov	r2, r7
   11254:	bl	15df0 <__assert_fail@plt+0x4e9c>
   11258:	add	r0, r0, #1
   1125c:	cmp	r0, #121	; 0x79
   11260:	bhi	117d4 <__assert_fail@plt+0x880>
   11264:	add	r1, pc, #0
   11268:	ldr	pc, [r1, r0, lsl #2]
   1126c:	andeq	r1, r1, ip, ror #13
   11270:	ldrdeq	r1, [r1], -r4
   11274:	ldrdeq	r1, [r1], -r4
   11278:	ldrdeq	r1, [r1], -r4
   1127c:	ldrdeq	r1, [r1], -r4
   11280:	ldrdeq	r1, [r1], -r4
   11284:	ldrdeq	r1, [r1], -r4
   11288:	ldrdeq	r1, [r1], -r4
   1128c:	ldrdeq	r1, [r1], -r4
   11290:	ldrdeq	r1, [r1], -r4
   11294:	ldrdeq	r1, [r1], -r4
   11298:	ldrdeq	r1, [r1], -r4
   1129c:	ldrdeq	r1, [r1], -r4
   112a0:	ldrdeq	r1, [r1], -r4
   112a4:	ldrdeq	r1, [r1], -r4
   112a8:	ldrdeq	r1, [r1], -r4
   112ac:	ldrdeq	r1, [r1], -r4
   112b0:	ldrdeq	r1, [r1], -r4
   112b4:	ldrdeq	r1, [r1], -r4
   112b8:	ldrdeq	r1, [r1], -r4
   112bc:	ldrdeq	r1, [r1], -r4
   112c0:	ldrdeq	r1, [r1], -r4
   112c4:	ldrdeq	r1, [r1], -r4
   112c8:	ldrdeq	r1, [r1], -r4
   112cc:	ldrdeq	r1, [r1], -r4
   112d0:	ldrdeq	r1, [r1], -r4
   112d4:	ldrdeq	r1, [r1], -r4
   112d8:	ldrdeq	r1, [r1], -r4
   112dc:	ldrdeq	r1, [r1], -r4
   112e0:	ldrdeq	r1, [r1], -r4
   112e4:	ldrdeq	r1, [r1], -r4
   112e8:	ldrdeq	r1, [r1], -r4
   112ec:	ldrdeq	r1, [r1], -r4
   112f0:	ldrdeq	r1, [r1], -r4
   112f4:	ldrdeq	r1, [r1], -r4
   112f8:	ldrdeq	r1, [r1], -r4
   112fc:	ldrdeq	r1, [r1], -r4
   11300:	ldrdeq	r1, [r1], -r4
   11304:	ldrdeq	r1, [r1], -r4
   11308:	ldrdeq	r1, [r1], -r4
   1130c:	ldrdeq	r1, [r1], -r4
   11310:	ldrdeq	r1, [r1], -r4
   11314:	ldrdeq	r1, [r1], -r4
   11318:	ldrdeq	r1, [r1], -r4
   1131c:	ldrdeq	r1, [r1], -r4
   11320:	ldrdeq	r1, [r1], -r4
   11324:	ldrdeq	r1, [r1], -r4
   11328:	ldrdeq	r1, [r1], -r4
   1132c:	ldrdeq	r1, [r1], -r4
   11330:	ldrdeq	r1, [r1], -r4
   11334:	andeq	r1, r1, r4, asr r4
   11338:	ldrdeq	r1, [r1], -r4
   1133c:	ldrdeq	r1, [r1], -r4
   11340:	ldrdeq	r1, [r1], -r4
   11344:	ldrdeq	r1, [r1], -r4
   11348:	ldrdeq	r1, [r1], -r4
   1134c:	ldrdeq	r1, [r1], -r4
   11350:	ldrdeq	r1, [r1], -r4
   11354:	ldrdeq	r1, [r1], -r4
   11358:	ldrdeq	r1, [r1], -r4
   1135c:	ldrdeq	r1, [r1], -r4
   11360:	ldrdeq	r1, [r1], -r4
   11364:	ldrdeq	r1, [r1], -r4
   11368:	ldrdeq	r1, [r1], -r4
   1136c:	ldrdeq	r1, [r1], -r4
   11370:	ldrdeq	r1, [r1], -r4
   11374:	andeq	r1, r1, r8, lsl r5
   11378:	ldrdeq	r1, [r1], -r4
   1137c:	andeq	r1, r1, r4, ror r4
   11380:	ldrdeq	r1, [r1], -r4
   11384:	ldrdeq	r1, [r1], -r4
   11388:	andeq	r1, r1, r4, lsr #9
   1138c:	ldrdeq	r1, [r1], -r4
   11390:	ldrdeq	r1, [r1], -r4
   11394:	ldrdeq	r1, [r1], -r4
   11398:	ldrdeq	r1, [r1], -r4
   1139c:	ldrdeq	r1, [r1], -r4
   113a0:			; <UNDEFINED> instruction: 0x000114b8
   113a4:	ldrdeq	r1, [r1], -r4
   113a8:	ldrdeq	r1, [r1], -r4
   113ac:	ldrdeq	r1, [r1], -r4
   113b0:	ldrdeq	r1, [r1], -r4
   113b4:	ldrdeq	r1, [r1], -r4
   113b8:	andeq	r1, r1, r4, asr #9
   113bc:	ldrdeq	r1, [r1], -r8
   113c0:	andeq	r1, r1, ip, ror #9
   113c4:	ldrdeq	r1, [r1], -r4
   113c8:	ldrdeq	r1, [r1], -r4
   113cc:	andeq	r1, r1, r0, lsl #10
   113d0:	ldrdeq	r1, [r1], -r4
   113d4:	ldrdeq	r1, [r1], -r4
   113d8:	ldrdeq	r1, [r1], -r4
   113dc:	ldrdeq	r1, [r1], -r4
   113e0:	ldrdeq	r1, [r1], -r4
   113e4:	ldrdeq	r1, [r1], -r4
   113e8:	ldrdeq	r1, [r1], -r4
   113ec:	ldrdeq	r1, [r1], -r4
   113f0:	ldrdeq	r1, [r1], -r4
   113f4:	andeq	r1, r1, r4, lsl r5
   113f8:	ldrdeq	r1, [r1], -r4
   113fc:	andeq	r1, r1, ip, lsr #10
   11400:	andeq	r1, r1, r0, asr r5
   11404:	ldrdeq	r1, [r1], -r4
   11408:	andeq	r1, r1, r4, ror r5
   1140c:	andeq	r1, r1, r8, asr #4
   11410:	ldrdeq	r1, [r1], -r4
   11414:	andeq	r1, r1, r8, lsl #11
   11418:	ldrdeq	r1, [r1], -r4
   1141c:	muleq	r1, ip, r5
   11420:			; <UNDEFINED> instruction: 0x000115b0
   11424:	andeq	r1, r1, ip, asr #11
   11428:	strdeq	r1, [r1], -ip
   1142c:	andeq	r1, r1, ip, lsr #12
   11430:	andeq	r1, r1, r0, asr #12
   11434:	andeq	r1, r1, r4, asr r6
   11438:	andeq	r1, r1, r8, ror #12
   1143c:	andeq	r1, r1, ip, ror r6
   11440:	muleq	r1, r0, r6
   11444:	andeq	r1, r1, r4, lsr #13
   11448:	ldrdeq	r1, [r1], -r4
   1144c:	ldrdeq	r1, [r1], -r4
   11450:	andeq	r1, r1, r8, asr #13
   11454:	mov	r0, #0
   11458:	str	r0, [r9]
   1145c:	movw	r1, #33116	; 0x815c
   11460:	movt	r1, #2
   11464:	mov	r2, #1
   11468:	str	r2, [r1]
   1146c:	str	r0, [sl]
   11470:	b	11624 <__assert_fail@plt+0x6d0>
   11474:	mov	r0, #0
   11478:	str	r0, [r9]
   1147c:	movw	r1, #33120	; 0x8160
   11480:	movt	r1, #2
   11484:	mov	r2, #1
   11488:	str	r2, [r1]
   1148c:	movw	r1, #33116	; 0x815c
   11490:	movt	r1, #2
   11494:	str	r0, [r1]
   11498:	str	r0, [r8]
   1149c:	str	r0, [sl]
   114a0:	b	11248 <__assert_fail@plt+0x2f4>
   114a4:	mov	r0, #1
   114a8:	movw	r1, #33148	; 0x817c
   114ac:	movt	r1, #2
   114b0:	str	r0, [r1]
   114b4:	b	11248 <__assert_fail@plt+0x2f4>
   114b8:	bic	r0, r6, #18
   114bc:	orr	r6, r0, #2
   114c0:	b	11248 <__assert_fail@plt+0x2f4>
   114c4:	mov	r0, #1
   114c8:	movw	r1, #33128	; 0x8168
   114cc:	movt	r1, #2
   114d0:	str	r0, [r1]
   114d4:	b	11248 <__assert_fail@plt+0x2f4>
   114d8:	movw	r0, #33048	; 0x8118
   114dc:	movt	r0, #2
   114e0:	mov	r1, #1
   114e4:	str	r1, [r0]
   114e8:	b	11248 <__assert_fail@plt+0x2f4>
   114ec:	mov	r0, #1
   114f0:	movw	r1, #33168	; 0x8190
   114f4:	movt	r1, #2
   114f8:	str	r0, [r1]
   114fc:	b	11248 <__assert_fail@plt+0x2f4>
   11500:	mov	r0, #1
   11504:	movw	r1, #33152	; 0x8180
   11508:	movt	r1, #2
   1150c:	str	r0, [r1]
   11510:	b	11248 <__assert_fail@plt+0x2f4>
   11514:	orr	r6, r6, #32
   11518:	mov	r0, #1
   1151c:	movw	r1, #33196	; 0x81ac
   11520:	movt	r1, #2
   11524:	str	r0, [r1]
   11528:	b	11248 <__assert_fail@plt+0x2f4>
   1152c:	mov	r0, #0
   11530:	movw	r1, #33140	; 0x8174
   11534:	movt	r1, #2
   11538:	str	r0, [r1]
   1153c:	mov	r0, #1
   11540:	movw	r1, #33184	; 0x81a0
   11544:	movt	r1, #2
   11548:	str	r0, [r1]
   1154c:	b	11248 <__assert_fail@plt+0x2f4>
   11550:	mov	r0, #0
   11554:	movw	r1, #33128	; 0x8168
   11558:	movt	r1, #2
   1155c:	str	r0, [r1]
   11560:	mov	r0, #1
   11564:	movw	r1, #33180	; 0x819c
   11568:	movt	r1, #2
   1156c:	str	r0, [r1]
   11570:	b	11248 <__assert_fail@plt+0x2f4>
   11574:	mov	r0, #1
   11578:	movw	r1, #33144	; 0x8178
   1157c:	movt	r1, #2
   11580:	str	r0, [r1]
   11584:	b	11248 <__assert_fail@plt+0x2f4>
   11588:	mov	r0, #1
   1158c:	movw	r1, #33132	; 0x816c
   11590:	movt	r1, #2
   11594:	str	r0, [r1]
   11598:	b	11248 <__assert_fail@plt+0x2f4>
   1159c:	movw	r0, #33188	; 0x81a4
   115a0:	movt	r0, #2
   115a4:	mov	r1, #1024	; 0x400
   115a8:	str	r1, [r0]
   115ac:	b	11248 <__assert_fail@plt+0x2f4>
   115b0:	mov	r0, #0
   115b4:	movw	r1, #33172	; 0x8194
   115b8:	movt	r1, #2
   115bc:	str	r0, [r1]
   115c0:	mov	r1, #1
   115c4:	str	r1, [sl]
   115c8:	b	11614 <__assert_fail@plt+0x6c0>
   115cc:	movw	r0, #33116	; 0x815c
   115d0:	movt	r0, #2
   115d4:	mov	r1, #0
   115d8:	str	r1, [r0]
   115dc:	mov	r0, #1
   115e0:	str	r0, [r9]
   115e4:	str	r1, [sl]
   115e8:	str	r1, [r8]
   115ec:	movw	r0, #33120	; 0x8160
   115f0:	movt	r0, #2
   115f4:	str	r1, [r0]
   115f8:	b	11248 <__assert_fail@plt+0x2f4>
   115fc:	mov	r0, #1
   11600:	movw	r1, #33172	; 0x8194
   11604:	movt	r1, #2
   11608:	str	r0, [r1]
   1160c:	str	r0, [sl]
   11610:	mov	r0, #0
   11614:	str	r0, [r9]
   11618:	movw	r1, #33116	; 0x815c
   1161c:	movt	r1, #2
   11620:	str	r0, [r1]
   11624:	str	r0, [r8]
   11628:	b	1123c <__assert_fail@plt+0x2e8>
   1162c:	mov	r0, #1
   11630:	movw	r1, #33124	; 0x8164
   11634:	movt	r1, #2
   11638:	str	r0, [r1]
   1163c:	b	11248 <__assert_fail@plt+0x2f4>
   11640:	mov	r0, #1
   11644:	movw	r1, #33164	; 0x818c
   11648:	movt	r1, #2
   1164c:	str	r0, [r1]
   11650:	b	11248 <__assert_fail@plt+0x2f4>
   11654:	mov	r0, #1
   11658:	movw	r1, #33200	; 0x81b0
   1165c:	movt	r1, #2
   11660:	str	r0, [r1]
   11664:	b	11248 <__assert_fail@plt+0x2f4>
   11668:	mov	r0, #1
   1166c:	movw	r1, #33136	; 0x8170
   11670:	movt	r1, #2
   11674:	str	r0, [r1]
   11678:	b	11248 <__assert_fail@plt+0x2f4>
   1167c:	mov	r0, #1
   11680:	movw	r1, #33108	; 0x8154
   11684:	movt	r1, #2
   11688:	str	r0, [r1]
   1168c:	b	11248 <__assert_fail@plt+0x2f4>
   11690:	movw	r0, #33048	; 0x8118
   11694:	movt	r0, #2
   11698:	mov	r1, #2
   1169c:	str	r1, [r0]
   116a0:	b	11248 <__assert_fail@plt+0x2f4>
   116a4:	mov	r0, #0
   116a8:	movw	r1, #33184	; 0x81a0
   116ac:	movt	r1, #2
   116b0:	str	r0, [r1]
   116b4:	mov	r0, #1
   116b8:	movw	r1, #33140	; 0x8174
   116bc:	movt	r1, #2
   116c0:	str	r0, [r1]
   116c4:	b	11248 <__assert_fail@plt+0x2f4>
   116c8:	mov	r0, #0
   116cc:	str	r0, [r9]
   116d0:	mov	r1, #1
   116d4:	str	r1, [r8]
   116d8:	movw	r1, #33116	; 0x815c
   116dc:	movt	r1, #2
   116e0:	str	r0, [r1]
   116e4:	str	r0, [sl]
   116e8:	b	1123c <__assert_fail@plt+0x2e8>
   116ec:	ldr	r2, [sl]
   116f0:	movw	r0, #33148	; 0x817c
   116f4:	movt	r0, #2
   116f8:	ldr	r0, [r0]
   116fc:	orr	r1, r0, r2
   11700:	movw	r3, #33180	; 0x819c
   11704:	movt	r3, #2
   11708:	ldr	r3, [r3]
   1170c:	orr	r1, r1, r3
   11710:	movw	r3, #33108	; 0x8154
   11714:	movt	r3, #2
   11718:	ldr	r3, [r3]
   1171c:	orr	r3, r3, r2
   11720:	movw	r7, #33132	; 0x816c
   11724:	movt	r7, #2
   11728:	ldr	r7, [r7]
   1172c:	orr	r7, r3, r7
   11730:	orr	r0, r7, r0
   11734:	movw	r7, #33164	; 0x818c
   11738:	movt	r7, #2
   1173c:	ldr	r7, [r7]
   11740:	orr	r7, r0, r7
   11744:	movw	r0, #33048	; 0x8118
   11748:	movt	r0, #2
   1174c:	ldr	r0, [r0]
   11750:	orrs	r7, r7, r0
   11754:	orreq	r6, r6, #8
   11758:	cmp	r1, #0
   1175c:	orreq	r6, r6, #1
   11760:	movw	r1, #33152	; 0x8180
   11764:	movt	r1, #2
   11768:	ldr	r1, [r1]
   1176c:	cmp	r1, #0
   11770:	orrne	r6, r6, #128	; 0x80
   11774:	movw	r1, #33028	; 0x8104
   11778:	movt	r1, #2
   1177c:	ldr	r1, [r1]
   11780:	cmp	r3, #0
   11784:	movwne	r3, #33188	; 0x81a4
   11788:	movtne	r3, #2
   1178c:	movne	r7, #2
   11790:	strne	r7, [r3]
   11794:	movw	r3, #33136	; 0x8170
   11798:	movt	r3, #2
   1179c:	ldr	r3, [r3]
   117a0:	cmp	r3, #0
   117a4:	beq	117e0 <__assert_fail@plt+0x88c>
   117a8:	cmp	r0, #2
   117ac:	beq	1181c <__assert_fail@plt+0x8c8>
   117b0:	cmp	r0, #1
   117b4:	beq	11844 <__assert_fail@plt+0x8f0>
   117b8:	cmp	r0, #0
   117bc:	bne	1190c <__assert_fail@plt+0x9b8>
   117c0:	movw	r0, #33056	; 0x8120
   117c4:	movt	r0, #2
   117c8:	movw	r3, #11596	; 0x2d4c
   117cc:	movt	r3, #1
   117d0:	b	11908 <__assert_fail@plt+0x9b4>
   117d4:	bl	12d10 <__assert_fail@plt+0x1dbc>
   117d8:	sub	sp, fp, #28
   117dc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   117e0:	cmp	r0, #2
   117e4:	beq	11858 <__assert_fail@plt+0x904>
   117e8:	cmp	r0, #1
   117ec:	beq	11880 <__assert_fail@plt+0x92c>
   117f0:	cmp	r0, #0
   117f4:	bne	1190c <__assert_fail@plt+0x9b8>
   117f8:	movw	r0, #33056	; 0x8120
   117fc:	movt	r0, #2
   11800:	movw	r3, #11584	; 0x2d40
   11804:	movt	r3, #1
   11808:	b	11908 <__assert_fail@plt+0x9b4>
   1180c:	ldrh	r0, [sp, #6]
   11810:	cmp	r0, #0
   11814:	bne	111b8 <__assert_fail@plt+0x264>
   11818:	b	111e0 <__assert_fail@plt+0x28c>
   1181c:	movw	r0, #33140	; 0x8174
   11820:	movt	r0, #2
   11824:	ldr	r0, [r0]
   11828:	cmp	r0, #0
   1182c:	beq	11894 <__assert_fail@plt+0x940>
   11830:	movw	r0, #33056	; 0x8120
   11834:	movt	r0, #2
   11838:	movw	r3, #11832	; 0x2e38
   1183c:	movt	r3, #1
   11840:	b	11908 <__assert_fail@plt+0x9b4>
   11844:	movw	r0, #33056	; 0x8120
   11848:	movt	r0, #2
   1184c:	movw	r3, #12044	; 0x2f0c
   11850:	movt	r3, #1
   11854:	b	11908 <__assert_fail@plt+0x9b4>
   11858:	movw	r0, #33140	; 0x8174
   1185c:	movt	r0, #2
   11860:	ldr	r0, [r0]
   11864:	cmp	r0, #0
   11868:	beq	118bc <__assert_fail@plt+0x968>
   1186c:	movw	r0, #33056	; 0x8120
   11870:	movt	r0, #2
   11874:	movw	r3, #11732	; 0x2dd4
   11878:	movt	r3, #1
   1187c:	b	11908 <__assert_fail@plt+0x9b4>
   11880:	movw	r0, #33056	; 0x8120
   11884:	movt	r0, #2
   11888:	movw	r3, #11972	; 0x2ec4
   1188c:	movt	r3, #1
   11890:	b	11908 <__assert_fail@plt+0x9b4>
   11894:	movw	r0, #33184	; 0x81a0
   11898:	movt	r0, #2
   1189c:	ldr	r0, [r0]
   118a0:	cmp	r0, #0
   118a4:	beq	118e4 <__assert_fail@plt+0x990>
   118a8:	movw	r0, #33056	; 0x8120
   118ac:	movt	r0, #2
   118b0:	movw	r3, #11952	; 0x2eb0
   118b4:	movt	r3, #1
   118b8:	b	11908 <__assert_fail@plt+0x9b4>
   118bc:	movw	r0, #33184	; 0x81a0
   118c0:	movt	r0, #2
   118c4:	ldr	r0, [r0]
   118c8:	cmp	r0, #0
   118cc:	beq	118f8 <__assert_fail@plt+0x9a4>
   118d0:	movw	r0, #33056	; 0x8120
   118d4:	movt	r0, #2
   118d8:	movw	r3, #11852	; 0x2e4c
   118dc:	movt	r3, #1
   118e0:	b	11908 <__assert_fail@plt+0x9b4>
   118e4:	movw	r0, #33056	; 0x8120
   118e8:	movt	r0, #2
   118ec:	movw	r3, #11712	; 0x2dc0
   118f0:	movt	r3, #1
   118f4:	b	11908 <__assert_fail@plt+0x9b4>
   118f8:	movw	r0, #33056	; 0x8120
   118fc:	movt	r0, #2
   11900:	movw	r3, #11612	; 0x2d5c
   11904:	movt	r3, #1
   11908:	str	r3, [r0]
   1190c:	sub	r0, r5, r1
   11910:	movw	r3, #33116	; 0x815c
   11914:	movt	r3, #2
   11918:	ldr	r3, [r3]
   1191c:	cmp	r3, #0
   11920:	beq	11930 <__assert_fail@plt+0x9dc>
   11924:	movw	r2, #8720	; 0x2210
   11928:	movt	r2, #1
   1192c:	b	11978 <__assert_fail@plt+0xa24>
   11930:	ldr	r3, [r8]
   11934:	cmp	r3, #0
   11938:	beq	11948 <__assert_fail@plt+0x9f4>
   1193c:	movw	r2, #10920	; 0x2aa8
   11940:	movt	r2, #1
   11944:	b	11978 <__assert_fail@plt+0xa24>
   11948:	cmp	r2, #0
   1194c:	beq	1195c <__assert_fail@plt+0xa08>
   11950:	movw	r2, #9036	; 0x234c
   11954:	movt	r2, #1
   11958:	b	11978 <__assert_fail@plt+0xa24>
   1195c:	ldr	r3, [r9]
   11960:	movw	r7, #10252	; 0x280c
   11964:	movt	r7, #1
   11968:	movw	r2, #11180	; 0x2bac
   1196c:	movt	r2, #1
   11970:	cmp	r3, #0
   11974:	moveq	r2, r7
   11978:	movw	r3, #33060	; 0x8124
   1197c:	movt	r3, #2
   11980:	str	r2, [r3]
   11984:	cmp	r0, #0
   11988:	beq	11994 <__assert_fail@plt+0xa40>
   1198c:	add	r1, r4, r1, lsl #2
   11990:	b	119a0 <__assert_fail@plt+0xa4c>
   11994:	movw	r1, #33016	; 0x80f8
   11998:	movt	r1, #2
   1199c:	mov	r0, #1
   119a0:	mov	r2, r6
   119a4:	bl	119bc <__assert_fail@plt+0xa68>
   119a8:	movw	r0, #33156	; 0x8184
   119ac:	movt	r0, #2
   119b0:	ldr	r0, [r0]
   119b4:	sub	sp, fp, #28
   119b8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   119bc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   119c0:	add	fp, sp, #28
   119c4:	sub	sp, sp, #4
   119c8:	mov	r7, r2
   119cc:	mov	r6, r1
   119d0:	mov	r8, r0
   119d4:	movw	r0, #33144	; 0x8178
   119d8:	movt	r0, #2
   119dc:	ldr	r0, [r0]
   119e0:	movw	r2, #7268	; 0x1c64
   119e4:	movt	r2, #1
   119e8:	cmp	r0, #0
   119ec:	movne	r2, #0
   119f0:	mov	r0, r1
   119f4:	mov	r1, r7
   119f8:	bl	130bc <__assert_fail@plt+0x2168>
   119fc:	cmp	r0, #0
   11a00:	beq	11bf0 <__assert_fail@plt+0xc9c>
   11a04:	mov	r5, r0
   11a08:	mov	r6, #0
   11a0c:	mov	r1, #0
   11a10:	bl	14cf8 <__assert_fail@plt+0x3da4>
   11a14:	mov	r1, r0
   11a18:	mov	r0, #0
   11a1c:	bl	11d0c <__assert_fail@plt+0xdb8>
   11a20:	movw	r0, #33180	; 0x819c
   11a24:	movt	r0, #2
   11a28:	ldr	r0, [r0]
   11a2c:	cmp	r0, #0
   11a30:	bne	11be8 <__assert_fail@plt+0xc94>
   11a34:	mov	r0, #4096	; 0x1000
   11a38:	movw	r1, #33128	; 0x8168
   11a3c:	movt	r1, #2
   11a40:	ldr	r1, [r1]
   11a44:	cmp	r1, #0
   11a48:	andeq	r6, r0, r7, lsl #9
   11a4c:	mov	r0, r5
   11a50:	bl	139f4 <__assert_fail@plt+0x2aa0>
   11a54:	cmp	r0, #0
   11a58:	beq	11bd8 <__assert_fail@plt+0xc84>
   11a5c:	mov	r9, r0
   11a60:	movw	r7, #33196	; 0x81ac
   11a64:	movt	r7, #2
   11a68:	movw	r4, #33052	; 0x811c
   11a6c:	movt	r4, #2
   11a70:	b	11ae4 <__assert_fail@plt+0xb90>
   11a74:	mov	sl, r4
   11a78:	mov	r4, r7
   11a7c:	movw	r0, #33040	; 0x8110
   11a80:	movt	r0, #2
   11a84:	ldr	r7, [r0]
   11a88:	ldr	r0, [r9, #32]
   11a8c:	bl	10df8 <strerror@plt>
   11a90:	mov	r3, r0
   11a94:	add	r2, r9, #168	; 0xa8
   11a98:	mov	r0, r7
   11a9c:	mov	r7, r4
   11aa0:	mov	r4, sl
   11aa4:	movw	r1, #30889	; 0x78a9
   11aa8:	movt	r1, #1
   11aac:	bl	10e40 <fprintf@plt>
   11ab0:	mov	r0, #1
   11ab4:	movw	r1, #33156	; 0x8184
   11ab8:	movt	r1, #2
   11abc:	str	r0, [r1]
   11ac0:	b	11bc4 <__assert_fail@plt+0xc70>
   11ac4:	movw	r0, #33040	; 0x8110
   11ac8:	movt	r0, #2
   11acc:	ldr	r0, [r0]
   11ad0:	add	r2, r9, #168	; 0xa8
   11ad4:	movw	r1, #30735	; 0x780f
   11ad8:	movt	r1, #1
   11adc:	bl	10e40 <fprintf@plt>
   11ae0:	b	11bc4 <__assert_fail@plt+0xc70>
   11ae4:	ldrh	r0, [r9, #56]	; 0x38
   11ae8:	sub	r0, r0, #1
   11aec:	cmp	r0, #6
   11af0:	bhi	11bc4 <__assert_fail@plt+0xc70>
   11af4:	add	r1, pc, #0
   11af8:	ldr	pc, [r1, r0, lsl #2]
   11afc:	andeq	r1, r1, r8, lsl fp
   11b00:	andeq	r1, r1, r4, asr #21
   11b04:	andeq	r1, r1, r4, asr #23
   11b08:	andeq	r1, r1, r4, ror sl
   11b0c:	andeq	r1, r1, r4, asr #23
   11b10:	andeq	r1, r1, r4, asr #23
   11b14:	andeq	r1, r1, r4, ror sl
   11b18:	ldrb	r0, [r9, #168]	; 0xa8
   11b1c:	cmp	r0, #46	; 0x2e
   11b20:	bne	11b3c <__assert_fail@plt+0xbe8>
   11b24:	ldr	r0, [r9, #48]	; 0x30
   11b28:	cmp	r0, #0
   11b2c:	beq	11b3c <__assert_fail@plt+0xbe8>
   11b30:	ldr	r0, [r7]
   11b34:	cmp	r0, #0
   11b38:	beq	11bc4 <__assert_fail@plt+0xc70>
   11b3c:	ldrb	r0, [r4]
   11b40:	cmp	r0, #1
   11b44:	bne	11b5c <__assert_fail@plt+0xc08>
   11b48:	ldr	r1, [r9, #28]
   11b4c:	movw	r0, #30729	; 0x7809
   11b50:	movt	r0, #1
   11b54:	bl	10d14 <printf@plt>
   11b58:	b	11b7c <__assert_fail@plt+0xc28>
   11b5c:	cmp	r8, #2
   11b60:	blt	11b7c <__assert_fail@plt+0xc28>
   11b64:	ldr	r1, [r9, #28]
   11b68:	movw	r0, #30730	; 0x780a
   11b6c:	movt	r0, #1
   11b70:	bl	10d14 <printf@plt>
   11b74:	mov	r0, #1
   11b78:	strb	r0, [r4]
   11b7c:	mov	r0, r5
   11b80:	mov	r1, r6
   11b84:	bl	14cf8 <__assert_fail@plt+0x3da4>
   11b88:	mov	sl, r0
   11b8c:	mov	r0, r9
   11b90:	mov	r1, sl
   11b94:	bl	11d0c <__assert_fail@plt+0xdb8>
   11b98:	cmp	sl, #0
   11b9c:	beq	11bc4 <__assert_fail@plt+0xc70>
   11ba0:	movw	r0, #33128	; 0x8168
   11ba4:	movt	r0, #2
   11ba8:	ldr	r0, [r0]
   11bac:	cmp	r0, #0
   11bb0:	bne	11bc4 <__assert_fail@plt+0xc70>
   11bb4:	mov	r0, r5
   11bb8:	mov	r1, r9
   11bbc:	mov	r2, #4
   11bc0:	bl	14ccc <__assert_fail@plt+0x3d78>
   11bc4:	mov	r0, r5
   11bc8:	bl	139f4 <__assert_fail@plt+0x2aa0>
   11bcc:	mov	r9, r0
   11bd0:	cmp	r0, #0
   11bd4:	bne	11ae4 <__assert_fail@plt+0xb90>
   11bd8:	bl	10e4c <__errno_location@plt>
   11bdc:	ldr	r0, [r0]
   11be0:	cmp	r0, #0
   11be4:	bne	11c28 <__assert_fail@plt+0xcd4>
   11be8:	sub	sp, fp, #28
   11bec:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11bf0:	ldr	r4, [r6]
   11bf4:	movw	r0, #33040	; 0x8110
   11bf8:	movt	r0, #2
   11bfc:	ldr	r5, [r0]
   11c00:	bl	10e4c <__errno_location@plt>
   11c04:	ldr	r0, [r0]
   11c08:	bl	10df8 <strerror@plt>
   11c0c:	mov	r3, r0
   11c10:	movw	r1, #30712	; 0x77f8
   11c14:	movt	r1, #1
   11c18:	mov	r0, r5
   11c1c:	mov	r2, r4
   11c20:	bl	10e40 <fprintf@plt>
   11c24:	b	11c4c <__assert_fail@plt+0xcf8>
   11c28:	movw	r1, #33040	; 0x8110
   11c2c:	movt	r1, #2
   11c30:	ldr	r4, [r1]
   11c34:	bl	10df8 <strerror@plt>
   11c38:	mov	r2, r0
   11c3c:	movw	r1, #30764	; 0x782c
   11c40:	movt	r1, #1
   11c44:	mov	r0, r4
   11c48:	bl	10e40 <fprintf@plt>
   11c4c:	movw	r0, #33156	; 0x8184
   11c50:	movt	r0, #2
   11c54:	mov	r1, #1
   11c58:	str	r1, [r0]
   11c5c:	sub	sp, fp, #28
   11c60:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11c64:	ldr	r0, [r0]
   11c68:	ldrh	r3, [r0, #56]	; 0x38
   11c6c:	mov	r2, #0
   11c70:	cmp	r3, #7
   11c74:	beq	11cac <__assert_fail@plt+0xd58>
   11c78:	ldr	r1, [r1]
   11c7c:	ldrh	ip, [r1, #56]	; 0x38
   11c80:	cmp	ip, #7
   11c84:	beq	11cac <__assert_fail@plt+0xd58>
   11c88:	cmp	r3, #10
   11c8c:	cmpne	ip, #10
   11c90:	bne	11cb4 <__assert_fail@plt+0xd60>
   11c94:	mov	r2, #1
   11c98:	cmp	ip, #10
   11c9c:	mvneq	r2, #0
   11ca0:	cmp	r3, #10
   11ca4:	cmpeq	ip, #10
   11ca8:	beq	11cf0 <__assert_fail@plt+0xd9c>
   11cac:	mov	r0, r2
   11cb0:	bx	lr
   11cb4:	cmp	r3, ip
   11cb8:	beq	11ce0 <__assert_fail@plt+0xd8c>
   11cbc:	push	{fp, lr}
   11cc0:	mov	fp, sp
   11cc4:	ldr	lr, [r0, #48]	; 0x30
   11cc8:	movw	r2, #33180	; 0x819c
   11ccc:	movt	r2, #2
   11cd0:	ldr	r2, [r2]
   11cd4:	orrs	r2, r2, lr
   11cd8:	pop	{fp, lr}
   11cdc:	beq	11cf4 <__assert_fail@plt+0xda0>
   11ce0:	movw	r2, #33056	; 0x8120
   11ce4:	movt	r2, #2
   11ce8:	ldr	r2, [r2]
   11cec:	bx	r2
   11cf0:	b	12d40 <__assert_fail@plt+0x1dec>
   11cf4:	mov	r2, #1
   11cf8:	cmp	r3, #1
   11cfc:	mvnne	r2, #0
   11d00:	cmpne	ip, #1
   11d04:	beq	11cac <__assert_fail@plt+0xd58>
   11d08:	b	11ce0 <__assert_fail@plt+0xd8c>
   11d0c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11d10:	add	fp, sp, #28
   11d14:	sub	sp, sp, #180	; 0xb4
   11d18:	cmp	r1, #0
   11d1c:	beq	121c4 <__assert_fail@plt+0x1270>
   11d20:	mov	lr, r0
   11d24:	movw	r0, #33132	; 0x816c
   11d28:	movt	r0, #2
   11d2c:	ldr	r0, [r0]
   11d30:	movw	r2, #33160	; 0x8188
   11d34:	movt	r2, #2
   11d38:	ldr	r2, [r2]
   11d3c:	orr	r0, r2, r0
   11d40:	movw	r2, #33108	; 0x8154
   11d44:	movt	r2, #2
   11d48:	ldr	r2, [r2]
   11d4c:	orr	r0, r0, r2
   11d50:	str	r0, [sp, #44]	; 0x2c
   11d54:	mov	sl, #0
   11d58:	str	r1, [sp, #4]
   11d5c:	mov	r4, r1
   11d60:	mov	r5, #0
   11d64:	mov	r0, #0
   11d68:	str	r0, [sp, #40]	; 0x28
   11d6c:	mov	r0, #0
   11d70:	str	r0, [sp, #56]	; 0x38
   11d74:	mov	r7, #0
   11d78:	mov	r0, #0
   11d7c:	str	r0, [sp, #36]	; 0x24
   11d80:	mov	r0, #0
   11d84:	str	r0, [sp, #32]
   11d88:	mov	r0, #0
   11d8c:	str	r0, [sp, #28]
   11d90:	mov	r0, #0
   11d94:	str	r0, [sp, #60]	; 0x3c
   11d98:	mov	r1, #0
   11d9c:	mov	r0, #0
   11da0:	str	r0, [sp, #8]
   11da4:	mov	r0, #0
   11da8:	str	r0, [sp, #52]	; 0x34
   11dac:	mov	ip, #0
   11db0:	str	lr, [sp, #12]
   11db4:	b	11e10 <__assert_fail@plt+0xebc>
   11db8:	movw	r0, #33040	; 0x8110
   11dbc:	movt	r0, #2
   11dc0:	ldr	r6, [r0]
   11dc4:	ldr	r0, [r4, #32]
   11dc8:	mov	r9, ip
   11dcc:	str	r1, [sp, #64]	; 0x40
   11dd0:	bl	10df8 <strerror@plt>
   11dd4:	mov	r3, r0
   11dd8:	add	r2, r4, #168	; 0xa8
   11ddc:	mov	r0, r6
   11de0:	movw	r1, #30889	; 0x78a9
   11de4:	movt	r1, #1
   11de8:	bl	10e40 <fprintf@plt>
   11dec:	ldr	lr, [sp, #12]
   11df0:	mov	ip, r9
   11df4:	mov	r1, #1
   11df8:	str	r1, [r4, #16]
   11dfc:	movw	r0, #33156	; 0x8184
   11e00:	movt	r0, #2
   11e04:	str	r1, [r0]
   11e08:	ldr	r1, [sp, #64]	; 0x40
   11e0c:	b	120b0 <__assert_fail@plt+0x115c>
   11e10:	ldrh	r0, [r4, #56]	; 0x38
   11e14:	cmp	r0, #10
   11e18:	cmpne	r0, #7
   11e1c:	beq	11db8 <__assert_fail@plt+0xe64>
   11e20:	cmp	lr, #0
   11e24:	beq	11e40 <__assert_fail@plt+0xeec>
   11e28:	ldrb	r0, [r4, #168]	; 0xa8
   11e2c:	cmp	r0, #46	; 0x2e
   11e30:	bne	11e68 <__assert_fail@plt+0xf14>
   11e34:	movw	r0, #33196	; 0x81ac
   11e38:	movt	r0, #2
   11e3c:	b	11e50 <__assert_fail@plt+0xefc>
   11e40:	cmp	r0, #1
   11e44:	bne	11e68 <__assert_fail@plt+0xf14>
   11e48:	movw	r0, #33180	; 0x819c
   11e4c:	movt	r0, #2
   11e50:	ldr	r0, [r0]
   11e54:	cmp	r0, #0
   11e58:	bne	11e68 <__assert_fail@plt+0xf14>
   11e5c:	mov	r0, #1
   11e60:	str	r0, [r4, #16]
   11e64:	b	120b0 <__assert_fail@plt+0x115c>
   11e68:	ldr	r0, [r4, #52]	; 0x34
   11e6c:	cmp	r0, r1
   11e70:	movhi	r1, r0
   11e74:	ldr	r0, [sp, #44]	; 0x2c
   11e78:	cmp	r0, #0
   11e7c:	beq	120ac <__assert_fail@plt+0x1158>
   11e80:	str	r1, [sp, #64]	; 0x40
   11e84:	str	r7, [sp, #48]	; 0x30
   11e88:	ldrd	r0, [r4, #160]	; 0xa0
   11e8c:	ldr	r3, [sp, #60]	; 0x3c
   11e90:	subs	r2, r3, r0
   11e94:	rscs	r1, r1, #0
   11e98:	movcc	r3, r0
   11e9c:	str	r3, [sp, #60]	; 0x3c
   11ea0:	ldrd	r0, [r4, #128]	; 0x80
   11ea4:	ldr	r2, [r4, #84]	; 0x54
   11ea8:	ldrd	r6, [r4, #112]	; 0x70
   11eac:	ldr	r9, [sp, #52]	; 0x34
   11eb0:	subs	r3, r9, r0
   11eb4:	rscs	r1, r1, r9, asr #31
   11eb8:	movlt	r9, r0
   11ebc:	str	r9, [sp, #52]	; 0x34
   11ec0:	subs	r1, sl, r6
   11ec4:	sbcs	r1, r5, r7
   11ec8:	mov	r1, #0
   11ecc:	movwlt	r1, #1
   11ed0:	cmp	r1, #0
   11ed4:	movne	r5, r7
   11ed8:	movne	sl, r6
   11edc:	ldr	r1, [sp, #56]	; 0x38
   11ee0:	add	r1, r1, r0
   11ee4:	str	r1, [sp, #56]	; 0x38
   11ee8:	cmp	r2, ip
   11eec:	movhi	ip, r2
   11ef0:	movw	r0, #33160	; 0x8188
   11ef4:	movt	r0, #2
   11ef8:	ldr	r0, [r0]
   11efc:	cmp	r0, #0
   11f00:	beq	120a4 <__assert_fail@plt+0x1150>
   11f04:	str	ip, [sp, #20]
   11f08:	str	r5, [sp, #24]
   11f0c:	movw	r0, #33172	; 0x8194
   11f10:	movt	r0, #2
   11f14:	ldr	r0, [r0]
   11f18:	mov	r9, #0
   11f1c:	cmp	r0, #0
   11f20:	beq	11f44 <__assert_fail@plt+0xff0>
   11f24:	ldr	r0, [r4, #88]	; 0x58
   11f28:	mov	r1, #0
   11f2c:	add	r2, sp, #90	; 0x5a
   11f30:	bl	16dc4 <__assert_fail@plt+0x5e70>
   11f34:	mov	r8, r0
   11f38:	cmp	r9, #0
   11f3c:	bne	11f90 <__assert_fail@plt+0x103c>
   11f40:	b	11f7c <__assert_fail@plt+0x1028>
   11f44:	ldr	r0, [r4, #88]	; 0x58
   11f48:	bl	10d08 <getpwuid@plt>
   11f4c:	mov	r9, #0
   11f50:	cmp	r0, #0
   11f54:	mov	r8, #0
   11f58:	ldrne	r8, [r0]
   11f5c:	ldr	r0, [r4, #92]	; 0x5c
   11f60:	bl	10f48 <getgrgid@plt>
   11f64:	cmp	r0, #0
   11f68:	ldrne	r9, [r0]
   11f6c:	cmp	r8, #0
   11f70:	beq	11f24 <__assert_fail@plt+0xfd0>
   11f74:	cmp	r9, #0
   11f78:	bne	11f90 <__assert_fail@plt+0x103c>
   11f7c:	ldr	r0, [r4, #92]	; 0x5c
   11f80:	mov	r1, #0
   11f84:	add	r2, sp, #69	; 0x45
   11f88:	bl	16dc4 <__assert_fail@plt+0x5e70>
   11f8c:	mov	r9, r0
   11f90:	mov	r0, r8
   11f94:	bl	10e1c <strlen@plt>
   11f98:	mov	r5, r0
   11f9c:	mov	r0, r9
   11fa0:	bl	10e1c <strlen@plt>
   11fa4:	movw	r1, #33124	; 0x8164
   11fa8:	movt	r1, #2
   11fac:	ldr	r1, [r1]
   11fb0:	cmp	r1, #0
   11fb4:	movw	r2, #31009	; 0x7921
   11fb8:	movt	r2, #1
   11fbc:	ldr	r3, [sp, #40]	; 0x28
   11fc0:	movne	r3, r2
   11fc4:	str	r3, [sp, #40]	; 0x28
   11fc8:	mov	r2, #1
   11fcc:	ldr	r3, [sp, #28]
   11fd0:	moveq	r2, r3
   11fd4:	cmp	r3, #1
   11fd8:	movle	r3, r2
   11fdc:	str	r3, [sp, #28]
   11fe0:	ldr	r2, [sp, #36]	; 0x24
   11fe4:	cmp	r5, r2
   11fe8:	movgt	r2, r5
   11fec:	str	r2, [sp, #36]	; 0x24
   11ff0:	ldr	r2, [sp, #32]
   11ff4:	cmp	r0, r2
   11ff8:	movgt	r2, r0
   11ffc:	str	r2, [sp, #32]
   12000:	cmp	r1, #0
   12004:	movwne	r1, #1
   12008:	add	r7, r0, r5
   1200c:	add	r0, r7, r1
   12010:	add	r0, r0, #19
   12014:	bl	16f94 <__assert_fail@plt+0x6040>
   12018:	cmp	r0, #0
   1201c:	beq	121cc <__assert_fail@plt+0x1278>
   12020:	mov	r6, r0
   12024:	str	sl, [sp, #16]
   12028:	add	sl, r0, #12
   1202c:	str	sl, [r0]
   12030:	mov	r0, sl
   12034:	mov	r1, r8
   12038:	bl	10dbc <strcpy@plt>
   1203c:	add	r0, sl, r5
   12040:	add	r0, r0, #1
   12044:	str	r0, [r6, #4]
   12048:	mov	r1, r9
   1204c:	bl	10dbc <strcpy@plt>
   12050:	ldr	r0, [r4, #80]	; 0x50
   12054:	and	r0, r0, #45056	; 0xb000
   12058:	orr	r0, r0, #16384	; 0x4000
   1205c:	cmp	r0, #24576	; 0x6000
   12060:	moveq	r0, #1
   12064:	streq	r0, [sp, #8]
   12068:	movw	r0, #33124	; 0x8164
   1206c:	movt	r0, #2
   12070:	ldr	r0, [r0]
   12074:	cmp	r0, #0
   12078:	beq	12090 <__assert_fail@plt+0x113c>
   1207c:	add	r0, sl, r7
   12080:	add	r0, r0, #2
   12084:	str	r0, [r6, #8]
   12088:	ldr	r1, [sp, #40]	; 0x28
   1208c:	bl	10dbc <strcpy@plt>
   12090:	str	r6, [r4, #20]
   12094:	ldr	sl, [sp, #16]
   12098:	ldr	r5, [sp, #24]
   1209c:	ldr	ip, [sp, #20]
   120a0:	ldr	lr, [sp, #12]
   120a4:	ldr	r7, [sp, #48]	; 0x30
   120a8:	ldr	r1, [sp, #64]	; 0x40
   120ac:	add	r7, r7, #1
   120b0:	ldr	r4, [r4, #8]
   120b4:	cmp	r4, #0
   120b8:	bne	11e10 <__assert_fail@plt+0xebc>
   120bc:	cmp	r7, #0
   120c0:	ldr	r4, [sp, #4]
   120c4:	beq	121c4 <__assert_fail@plt+0x1270>
   120c8:	str	r7, [fp, #-64]	; 0xffffffc0
   120cc:	str	r4, [fp, #-76]	; 0xffffffb4
   120d0:	str	r1, [fp, #-60]	; 0xffffffc4
   120d4:	ldr	r0, [sp, #44]	; 0x2c
   120d8:	cmp	r0, #0
   120dc:	beq	12178 <__assert_fail@plt+0x1224>
   120e0:	ldr	r0, [sp, #56]	; 0x38
   120e4:	str	r0, [fp, #-72]	; 0xffffffb8
   120e8:	ldr	r0, [sp, #8]
   120ec:	str	r0, [fp, #-68]	; 0xffffffbc
   120f0:	ldr	r0, [sp, #52]	; 0x34
   120f4:	asr	r1, r0, #31
   120f8:	sub	r6, fp, #97	; 0x61
   120fc:	mov	r2, r6
   12100:	mov	r4, r5
   12104:	mov	r5, ip
   12108:	bl	16dc4 <__assert_fail@plt+0x5e70>
   1210c:	bl	10e1c <strlen@plt>
   12110:	str	r0, [fp, #-56]	; 0xffffffc8
   12114:	ldr	r0, [sp, #28]
   12118:	str	r0, [fp, #-52]	; 0xffffffcc
   1211c:	ldr	r0, [sp, #32]
   12120:	str	r0, [fp, #-48]	; 0xffffffd0
   12124:	ldr	r0, [sp, #60]	; 0x3c
   12128:	mov	r1, #0
   1212c:	mov	r2, r6
   12130:	bl	16dc4 <__assert_fail@plt+0x5e70>
   12134:	bl	10e1c <strlen@plt>
   12138:	str	r0, [fp, #-44]	; 0xffffffd4
   1213c:	mov	r0, r5
   12140:	mov	r1, #0
   12144:	mov	r2, r6
   12148:	bl	16dc4 <__assert_fail@plt+0x5e70>
   1214c:	bl	10e1c <strlen@plt>
   12150:	str	r0, [fp, #-40]	; 0xffffffd8
   12154:	mov	r0, sl
   12158:	mov	r1, r4
   1215c:	ldr	r4, [sp, #4]
   12160:	mov	r2, r6
   12164:	bl	16dc4 <__assert_fail@plt+0x5e70>
   12168:	bl	10e1c <strlen@plt>
   1216c:	str	r0, [fp, #-36]	; 0xffffffdc
   12170:	ldr	r0, [sp, #36]	; 0x24
   12174:	str	r0, [fp, #-32]	; 0xffffffe0
   12178:	movw	r0, #33060	; 0x8124
   1217c:	movt	r0, #2
   12180:	ldr	r1, [r0]
   12184:	sub	r0, fp, #76	; 0x4c
   12188:	blx	r1
   1218c:	movw	r0, #33052	; 0x811c
   12190:	movt	r0, #2
   12194:	mov	r1, #1
   12198:	strb	r1, [r0]
   1219c:	movw	r0, #33160	; 0x8188
   121a0:	movt	r0, #2
   121a4:	ldr	r0, [r0]
   121a8:	cmp	r0, #0
   121ac:	beq	121c4 <__assert_fail@plt+0x1270>
   121b0:	ldr	r0, [r4, #20]
   121b4:	bl	13094 <__assert_fail@plt+0x2140>
   121b8:	ldr	r4, [r4, #8]
   121bc:	cmp	r4, #0
   121c0:	bne	121b0 <__assert_fail@plt+0x125c>
   121c4:	sub	sp, fp, #28
   121c8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   121cc:	movw	r0, #33040	; 0x8110
   121d0:	movt	r0, #2
   121d4:	ldr	r4, [r0]
   121d8:	bl	10e4c <__errno_location@plt>
   121dc:	ldr	r0, [r0]
   121e0:	bl	10df8 <strerror@plt>
   121e4:	mov	r2, r0
   121e8:	movw	r1, #30777	; 0x7839
   121ec:	movt	r1, #1
   121f0:	mov	r0, r4
   121f4:	bl	10e40 <fprintf@plt>
   121f8:	mov	r0, #1
   121fc:	movw	r1, #33156	; 0x8184
   12200:	movt	r1, #2
   12204:	str	r0, [r1]
   12208:	sub	sp, fp, #28
   1220c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12210:	push	{r4, r5, fp, lr}
   12214:	add	fp, sp, #8
   12218:	ldr	r5, [r0]
   1221c:	cmp	r5, #0
   12220:	popeq	{r4, r5, fp, pc}
   12224:	mov	r4, r0
   12228:	ldr	r0, [r5, #16]
   1222c:	cmp	r0, #1
   12230:	beq	1224c <__assert_fail@plt+0x12f8>
   12234:	ldr	r2, [r4, #20]
   12238:	ldr	r1, [r4, #32]
   1223c:	mov	r0, r5
   12240:	bl	1225c <__assert_fail@plt+0x1308>
   12244:	mov	r0, #10
   12248:	bl	10e70 <putchar@plt>
   1224c:	ldr	r5, [r5, #8]
   12250:	cmp	r5, #0
   12254:	bne	12228 <__assert_fail@plt+0x12d4>
   12258:	pop	{r4, r5, fp, pc}
   1225c:	push	{r4, r5, r6, sl, fp, lr}
   12260:	add	fp, sp, #16
   12264:	mov	r6, r2
   12268:	mov	r4, r0
   1226c:	movw	r0, #33132	; 0x816c
   12270:	movt	r0, #2
   12274:	ldr	r0, [r0]
   12278:	cmp	r0, #0
   1227c:	beq	12298 <__assert_fail@plt+0x1344>
   12280:	ldr	r2, [r4, #160]	; 0xa0
   12284:	movw	r0, #30799	; 0x784f
   12288:	movt	r0, #1
   1228c:	bl	10d14 <printf@plt>
   12290:	mov	r5, r0
   12294:	b	1229c <__assert_fail@plt+0x1348>
   12298:	mov	r5, #0
   1229c:	movw	r0, #33108	; 0x8154
   122a0:	movt	r0, #2
   122a4:	ldr	r0, [r0]
   122a8:	cmp	r0, #0
   122ac:	beq	122f0 <__assert_fail@plt+0x139c>
   122b0:	ldrd	r0, [r4, #128]	; 0x80
   122b4:	movw	r2, #33188	; 0x81a4
   122b8:	movt	r2, #2
   122bc:	ldr	r2, [r2]
   122c0:	sub	r3, r2, #1
   122c4:	adds	r0, r0, r3
   122c8:	adc	r1, r1, r3, asr #31
   122cc:	asr	r3, r2, #31
   122d0:	bl	174c0 <__assert_fail@plt+0x656c>
   122d4:	mov	r2, r0
   122d8:	mov	r3, r1
   122dc:	movw	r0, #30844	; 0x787c
   122e0:	movt	r0, #1
   122e4:	mov	r1, r6
   122e8:	bl	10d14 <printf@plt>
   122ec:	add	r5, r0, r5
   122f0:	add	r0, r4, #168	; 0xa8
   122f4:	bl	12c98 <__assert_fail@plt+0x1d44>
   122f8:	add	r5, r0, r5
   122fc:	movw	r0, #33148	; 0x817c
   12300:	movt	r0, #2
   12304:	ldr	r0, [r0]
   12308:	cmp	r0, #0
   1230c:	beq	12324 <__assert_fail@plt+0x13d0>
   12310:	ldr	r0, [r4, #80]	; 0x50
   12314:	bl	126c4 <__assert_fail@plt+0x1770>
   12318:	add	r5, r0, r5
   1231c:	mov	r0, r5
   12320:	pop	{r4, r5, r6, sl, fp, pc}
   12324:	movw	r0, #33164	; 0x818c
   12328:	movt	r0, #2
   1232c:	ldr	r0, [r0]
   12330:	cmp	r0, #0
   12334:	beq	1231c <__assert_fail@plt+0x13c8>
   12338:	ldr	r0, [r4, #80]	; 0x50
   1233c:	and	r0, r0, #61440	; 0xf000
   12340:	cmp	r0, #16384	; 0x4000
   12344:	beq	12310 <__assert_fail@plt+0x13bc>
   12348:	b	1231c <__assert_fail@plt+0x13c8>
   1234c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12350:	add	fp, sp, #28
   12354:	sub	sp, sp, #36	; 0x24
   12358:	mov	r4, r0
   1235c:	ldr	r5, [r0]
   12360:	ldr	r0, [r5, #48]	; 0x30
   12364:	cmp	r0, #0
   12368:	beq	123b8 <__assert_fail@plt+0x1464>
   1236c:	movw	r0, #33160	; 0x8188
   12370:	movt	r0, #2
   12374:	ldr	r0, [r0]
   12378:	movw	r1, #33108	; 0x8154
   1237c:	movt	r1, #2
   12380:	ldr	r1, [r1]
   12384:	orrs	r0, r1, r0
   12388:	beq	123b4 <__assert_fail@plt+0x1460>
   1238c:	movw	r0, #33188	; 0x81a4
   12390:	movt	r0, #2
   12394:	ldr	r0, [r0]
   12398:	ldr	r1, [r4, #4]
   1239c:	add	r1, r1, r0
   123a0:	sub	r1, r1, #1
   123a4:	udiv	r1, r1, r0
   123a8:	movw	r0, #30788	; 0x7844
   123ac:	movt	r0, #1
   123b0:	bl	10d14 <printf@plt>
   123b4:	ldr	r5, [r4]
   123b8:	cmp	r5, #0
   123bc:	beq	125e0 <__assert_fail@plt+0x168c>
   123c0:	add	sl, sp, #16
   123c4:	movw	r8, #33148	; 0x817c
   123c8:	movt	r8, #2
   123cc:	b	123f8 <__assert_fail@plt+0x14a4>
   123d0:	movw	r0, #33164	; 0x818c
   123d4:	movt	r0, #2
   123d8:	ldr	r0, [r0]
   123dc:	cmp	r0, #0
   123e0:	beq	125b8 <__assert_fail@plt+0x1664>
   123e4:	ldr	r0, [r5, #80]	; 0x50
   123e8:	and	r0, r0, #61440	; 0xf000
   123ec:	cmp	r0, #16384	; 0x4000
   123f0:	beq	125b0 <__assert_fail@plt+0x165c>
   123f4:	b	125b8 <__assert_fail@plt+0x1664>
   123f8:	ldr	r0, [r5, #16]
   123fc:	cmp	r0, #1
   12400:	beq	125d4 <__assert_fail@plt+0x1680>
   12404:	movw	r0, #33132	; 0x816c
   12408:	movt	r0, #2
   1240c:	ldr	r0, [r0]
   12410:	cmp	r0, #0
   12414:	beq	1242c <__assert_fail@plt+0x14d8>
   12418:	ldr	r2, [r5, #160]	; 0xa0
   1241c:	ldr	r1, [r4, #32]
   12420:	movw	r0, #30799	; 0x784f
   12424:	movt	r0, #1
   12428:	bl	10d14 <printf@plt>
   1242c:	movw	r0, #33108	; 0x8154
   12430:	movt	r0, #2
   12434:	ldr	r0, [r0]
   12438:	cmp	r0, #0
   1243c:	beq	1247c <__assert_fail@plt+0x1528>
   12440:	ldrd	r0, [r5, #128]	; 0x80
   12444:	movw	r2, #33188	; 0x81a4
   12448:	movt	r2, #2
   1244c:	ldr	r2, [r2]
   12450:	sub	r3, r2, #1
   12454:	adds	r0, r0, r3
   12458:	adc	r1, r1, r3, asr #31
   1245c:	asr	r3, r2, #31
   12460:	bl	174c0 <__assert_fail@plt+0x656c>
   12464:	mov	r2, r0
   12468:	mov	r3, r1
   1246c:	ldr	r1, [r4, #20]
   12470:	movw	r0, #30844	; 0x787c
   12474:	movt	r0, #1
   12478:	bl	10d14 <printf@plt>
   1247c:	ldr	r0, [r5, #80]	; 0x50
   12480:	mov	r1, sl
   12484:	bl	12f20 <__assert_fail@plt+0x1fcc>
   12488:	ldr	r0, [r4, #28]
   1248c:	ldr	r2, [r4, #36]	; 0x24
   12490:	ldr	r1, [r4, #44]	; 0x2c
   12494:	ldr	r9, [r5, #20]
   12498:	ldr	r3, [r5, #84]	; 0x54
   1249c:	ldr	r7, [r9]
   124a0:	ldr	r6, [r9, #4]
   124a4:	stm	sp, {r1, r7}
   124a8:	str	r0, [sp, #8]
   124ac:	str	r6, [sp, #12]
   124b0:	movw	r0, #30805	; 0x7855
   124b4:	movt	r0, #1
   124b8:	mov	r1, sl
   124bc:	bl	10d14 <printf@plt>
   124c0:	movw	r0, #33124	; 0x8164
   124c4:	movt	r0, #2
   124c8:	ldr	r0, [r0]
   124cc:	cmp	r0, #0
   124d0:	beq	124e8 <__assert_fail@plt+0x1594>
   124d4:	ldr	r2, [r9, #8]
   124d8:	ldr	r1, [r4, #24]
   124dc:	movw	r0, #30825	; 0x7869
   124e0:	movt	r0, #1
   124e4:	bl	10d14 <printf@plt>
   124e8:	ldr	r0, [r5, #80]	; 0x50
   124ec:	and	r0, r0, #45056	; 0xb000
   124f0:	orr	r0, r0, #16384	; 0x4000
   124f4:	cmp	r0, #24576	; 0x6000
   124f8:	bne	12518 <__assert_fail@plt+0x15c4>
   124fc:	ldr	r0, [r5, #96]	; 0x60
   12500:	ubfx	r1, r0, #8, #8
   12504:	uxtb	r2, r0
   12508:	movw	r0, #30831	; 0x786f
   1250c:	movt	r0, #1
   12510:	bl	10d14 <printf@plt>
   12514:	b	12564 <__assert_fail@plt+0x1610>
   12518:	ldr	r0, [r4, #8]
   1251c:	ldr	r3, [r4, #40]	; 0x28
   12520:	cmp	r0, #0
   12524:	beq	12548 <__assert_fail@plt+0x15f4>
   12528:	ldrd	r0, [r5, #112]	; 0x70
   1252c:	stm	sp, {r0, r1}
   12530:	rsb	r1, r3, #8
   12534:	movw	r0, #30841	; 0x7879
   12538:	movt	r0, #1
   1253c:	movw	r2, #30865	; 0x7891
   12540:	movt	r2, #1
   12544:	b	12560 <__assert_fail@plt+0x160c>
   12548:	ldr	r2, [r5, #112]	; 0x70
   1254c:	ldr	r7, [r5, #116]	; 0x74
   12550:	movw	r0, #30844	; 0x787c
   12554:	movt	r0, #1
   12558:	mov	r1, r3
   1255c:	mov	r3, r7
   12560:	bl	10d14 <printf@plt>
   12564:	movw	r0, #33140	; 0x8174
   12568:	movt	r0, #2
   1256c:	ldr	r0, [r0]
   12570:	cmp	r0, #0
   12574:	beq	12580 <__assert_fail@plt+0x162c>
   12578:	ldr	r0, [r5, #136]	; 0x88
   1257c:	b	12598 <__assert_fail@plt+0x1644>
   12580:	movw	r0, #33184	; 0x81a0
   12584:	movt	r0, #2
   12588:	ldr	r0, [r0]
   1258c:	cmp	r0, #0
   12590:	ldreq	r0, [r5, #144]	; 0x90
   12594:	ldrne	r0, [r5, #152]	; 0x98
   12598:	bl	125e8 <__assert_fail@plt+0x1694>
   1259c:	add	r0, r5, #168	; 0xa8
   125a0:	bl	12c98 <__assert_fail@plt+0x1d44>
   125a4:	ldr	r0, [r8]
   125a8:	cmp	r0, #0
   125ac:	beq	123d0 <__assert_fail@plt+0x147c>
   125b0:	ldr	r0, [r5, #80]	; 0x50
   125b4:	bl	126c4 <__assert_fail@plt+0x1770>
   125b8:	ldr	r0, [r5, #80]	; 0x50
   125bc:	and	r0, r0, #61440	; 0xf000
   125c0:	cmp	r0, #40960	; 0xa000
   125c4:	moveq	r0, r5
   125c8:	bleq	12730 <__assert_fail@plt+0x17dc>
   125cc:	mov	r0, #10
   125d0:	bl	10e70 <putchar@plt>
   125d4:	ldr	r5, [r5, #8]
   125d8:	cmp	r5, #0
   125dc:	bne	123f8 <__assert_fail@plt+0x14a4>
   125e0:	sub	sp, fp, #28
   125e4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   125e8:	push	{r4, r5, r6, sl, fp, lr}
   125ec:	add	fp, sp, #16
   125f0:	sub	sp, sp, #8
   125f4:	str	r0, [sp, #4]
   125f8:	add	r0, sp, #4
   125fc:	bl	10d5c <ctime@plt>
   12600:	mov	r4, r0
   12604:	add	r5, r0, #4
   12608:	mov	r6, #0
   1260c:	ldrb	r0, [r5, r6]
   12610:	bl	10e70 <putchar@plt>
   12614:	add	r6, r6, #1
   12618:	cmp	r6, #7
   1261c:	bne	1260c <__assert_fail@plt+0x16b8>
   12620:	movw	r0, #33168	; 0x8190
   12624:	movt	r0, #2
   12628:	ldr	r0, [r0]
   1262c:	cmp	r0, #0
   12630:	beq	12654 <__assert_fail@plt+0x1700>
   12634:	add	r4, r4, #11
   12638:	mov	r5, #0
   1263c:	ldrb	r0, [r4, r5]
   12640:	bl	10e70 <putchar@plt>
   12644:	add	r5, r5, #1
   12648:	cmp	r5, #13
   1264c:	bne	1263c <__assert_fail@plt+0x16e8>
   12650:	b	126b4 <__assert_fail@plt+0x1760>
   12654:	ldr	r0, [sp, #4]
   12658:	add	r0, r0, #61696	; 0xf100
   1265c:	add	r6, r0, #15663104	; 0xef0000
   12660:	mov	r5, #0
   12664:	mov	r0, #0
   12668:	bl	10d50 <time@plt>
   1266c:	cmp	r6, r0
   12670:	ble	12694 <__assert_fail@plt+0x1740>
   12674:	add	r4, r4, #11
   12678:	mov	r5, #0
   1267c:	ldrb	r0, [r4, r5]
   12680:	bl	10e70 <putchar@plt>
   12684:	add	r5, r5, #1
   12688:	cmp	r5, #5
   1268c:	bne	1267c <__assert_fail@plt+0x1728>
   12690:	b	126b4 <__assert_fail@plt+0x1760>
   12694:	mov	r0, #32
   12698:	bl	10e70 <putchar@plt>
   1269c:	add	r4, r4, #20
   126a0:	ldrb	r0, [r4, r5]
   126a4:	bl	10e70 <putchar@plt>
   126a8:	add	r5, r5, #1
   126ac:	cmp	r5, #4
   126b0:	bne	126a0 <__assert_fail@plt+0x174c>
   126b4:	mov	r0, #32
   126b8:	bl	10e70 <putchar@plt>
   126bc:	sub	sp, fp, #16
   126c0:	pop	{r4, r5, r6, sl, fp, pc}
   126c4:	push	{fp, lr}
   126c8:	mov	fp, sp
   126cc:	and	r1, r0, #61440	; 0xf000
   126d0:	cmp	r1, #40960	; 0xa000
   126d4:	bge	126f0 <__assert_fail@plt+0x179c>
   126d8:	cmp	r1, #4096	; 0x1000
   126dc:	beq	12718 <__assert_fail@plt+0x17c4>
   126e0:	cmp	r1, #16384	; 0x4000
   126e4:	bne	12704 <__assert_fail@plt+0x17b0>
   126e8:	mov	r0, #47	; 0x2f
   126ec:	b	12724 <__assert_fail@plt+0x17d0>
   126f0:	beq	12720 <__assert_fail@plt+0x17cc>
   126f4:	cmp	r1, #49152	; 0xc000
   126f8:	bne	12704 <__assert_fail@plt+0x17b0>
   126fc:	mov	r0, #61	; 0x3d
   12700:	b	12724 <__assert_fail@plt+0x17d0>
   12704:	tst	r0, #73	; 0x49
   12708:	moveq	r0, #0
   1270c:	popeq	{fp, pc}
   12710:	mov	r0, #42	; 0x2a
   12714:	b	12724 <__assert_fail@plt+0x17d0>
   12718:	mov	r0, #124	; 0x7c
   1271c:	b	12724 <__assert_fail@plt+0x17d0>
   12720:	mov	r0, #64	; 0x40
   12724:	bl	10e70 <putchar@plt>
   12728:	mov	r0, #1
   1272c:	pop	{fp, pc}
   12730:	push	{r4, sl, fp, lr}
   12734:	add	fp, sp, #8
   12738:	sub	sp, sp, #8
   1273c:	sub	sp, sp, #8192	; 0x2000
   12740:	ldr	r1, [r0, #48]	; 0x30
   12744:	cmp	r1, #0
   12748:	beq	12770 <__assert_fail@plt+0x181c>
   1274c:	ldr	r1, [r0, #4]
   12750:	ldr	r3, [r1, #24]
   12754:	add	r0, r0, #168	; 0xa8
   12758:	str	r0, [sp]
   1275c:	add	lr, sp, #4096	; 0x1000
   12760:	add	r0, lr, #8
   12764:	movw	r2, #30878	; 0x789e
   12768:	movt	r2, #1
   1276c:	b	12784 <__assert_fail@plt+0x1830>
   12770:	add	r3, r0, #168	; 0xa8
   12774:	add	lr, sp, #4096	; 0x1000
   12778:	add	r0, lr, #8
   1277c:	movw	r2, #30785	; 0x7841
   12780:	movt	r2, #1
   12784:	mov	r1, #4096	; 0x1000
   12788:	bl	10e58 <snprintf@plt>
   1278c:	add	lr, sp, #4096	; 0x1000
   12790:	add	r0, lr, #8
   12794:	add	r4, sp, #8
   12798:	mov	r1, r4
   1279c:	movw	r2, #4095	; 0xfff
   127a0:	bl	10d98 <readlink@plt>
   127a4:	cmn	r0, #1
   127a8:	beq	127d0 <__assert_fail@plt+0x187c>
   127ac:	mov	r1, #0
   127b0:	strb	r1, [r4, r0]
   127b4:	movw	r0, #30897	; 0x78b1
   127b8:	movt	r0, #1
   127bc:	bl	10d14 <printf@plt>
   127c0:	mov	r0, r4
   127c4:	bl	12c98 <__assert_fail@plt+0x1d44>
   127c8:	sub	sp, fp, #8
   127cc:	pop	{r4, sl, fp, pc}
   127d0:	movw	r0, #33040	; 0x8110
   127d4:	movt	r0, #2
   127d8:	ldr	r4, [r0]
   127dc:	bl	10e4c <__errno_location@plt>
   127e0:	ldr	r0, [r0]
   127e4:	bl	10df8 <strerror@plt>
   127e8:	mov	r3, r0
   127ec:	movw	r1, #30884	; 0x78a4
   127f0:	movt	r1, #1
   127f4:	add	lr, sp, #4096	; 0x1000
   127f8:	add	r2, lr, #8
   127fc:	mov	r0, r4
   12800:	bl	10e40 <fprintf@plt>
   12804:	sub	sp, fp, #8
   12808:	pop	{r4, sl, fp, pc}
   1280c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12810:	add	fp, sp, #28
   12814:	sub	sp, sp, #12
   12818:	mov	r4, r0
   1281c:	add	r1, sp, #8
   12820:	bl	12a10 <__assert_fail@plt+0x1abc>
   12824:	str	r0, [sp, #4]
   12828:	cmp	r0, #0
   1282c:	beq	129cc <__assert_fail@plt+0x1a78>
   12830:	ldr	r1, [r4, #12]
   12834:	movw	r5, #33024	; 0x8100
   12838:	movt	r5, #2
   1283c:	ldr	r0, [r5]
   12840:	cmp	r1, r0
   12844:	ble	12870 <__assert_fail@plt+0x191c>
   12848:	movw	r6, #33064	; 0x8128
   1284c:	movt	r6, #2
   12850:	ldr	r0, [r6]
   12854:	lsl	r1, r1, #2
   12858:	bl	16fc4 <__assert_fail@plt+0x6070>
   1285c:	cmp	r0, #0
   12860:	beq	129d4 <__assert_fail@plt+0x1a80>
   12864:	ldr	r1, [r4, #12]
   12868:	str	r0, [r6]
   1286c:	str	r1, [r5]
   12870:	ldr	r0, [r4]
   12874:	cmp	r0, #0
   12878:	beq	128ac <__assert_fail@plt+0x1958>
   1287c:	movw	r1, #33064	; 0x8128
   12880:	movt	r1, #2
   12884:	ldr	r1, [r1]
   12888:	mov	r6, #0
   1288c:	ldr	r2, [r0, #16]
   12890:	cmp	r2, #1
   12894:	strne	r0, [r1, r6, lsl #2]
   12898:	addne	r6, r6, #1
   1289c:	ldr	r0, [r0, #8]
   128a0:	cmp	r0, #0
   128a4:	bne	1288c <__assert_fail@plt+0x1938>
   128a8:	b	128b0 <__assert_fail@plt+0x195c>
   128ac:	mov	r6, #0
   128b0:	ldr	r1, [sp, #8]
   128b4:	sdiv	r0, r6, r1
   128b8:	str	r1, [sp]
   128bc:	mls	r1, r0, r1, r6
   128c0:	cmp	r1, #0
   128c4:	movwne	r1, #1
   128c8:	add	r7, r0, r1
   128cc:	ldr	r0, [r4]
   128d0:	ldr	r0, [r0, #48]	; 0x30
   128d4:	cmp	r0, #0
   128d8:	beq	12924 <__assert_fail@plt+0x19d0>
   128dc:	movw	r0, #33160	; 0x8188
   128e0:	movt	r0, #2
   128e4:	ldr	r0, [r0]
   128e8:	movw	r1, #33108	; 0x8154
   128ec:	movt	r1, #2
   128f0:	ldr	r1, [r1]
   128f4:	orrs	r0, r1, r0
   128f8:	beq	12924 <__assert_fail@plt+0x19d0>
   128fc:	movw	r0, #33188	; 0x81a4
   12900:	movt	r0, #2
   12904:	ldr	r0, [r0]
   12908:	ldr	r1, [r4, #4]
   1290c:	add	r1, r1, r0
   12910:	sub	r1, r1, #1
   12914:	udiv	r1, r1, r0
   12918:	movw	r0, #30788	; 0x7844
   1291c:	movt	r0, #1
   12920:	bl	10d14 <printf@plt>
   12924:	cmp	r7, #1
   12928:	blt	129cc <__assert_fail@plt+0x1a78>
   1292c:	mov	r5, #0
   12930:	movw	r0, #33064	; 0x8128
   12934:	movt	r0, #2
   12938:	ldr	r0, [r0]
   1293c:	ldr	r0, [r0, r5, lsl #2]
   12940:	ldr	r2, [r4, #20]
   12944:	ldr	r1, [r4, #32]
   12948:	bl	1225c <__assert_fail@plt+0x1308>
   1294c:	add	sl, r5, r7
   12950:	cmp	sl, r6
   12954:	bge	129b8 <__assert_fail@plt+0x1a64>
   12958:	mov	r8, #0
   1295c:	add	r8, r8, #1
   12960:	ldr	r1, [sp]
   12964:	cmp	r8, r1
   12968:	beq	129b8 <__assert_fail@plt+0x1a64>
   1296c:	ldr	r1, [sp, #4]
   12970:	cmp	r0, r1
   12974:	bge	12990 <__assert_fail@plt+0x1a3c>
   12978:	ldr	r1, [sp, #4]
   1297c:	sub	r9, r1, r0
   12980:	mov	r0, #32
   12984:	bl	10e70 <putchar@plt>
   12988:	subs	r9, r9, #1
   1298c:	bne	12980 <__assert_fail@plt+0x1a2c>
   12990:	movw	r0, #33064	; 0x8128
   12994:	movt	r0, #2
   12998:	ldr	r0, [r0]
   1299c:	ldr	r0, [r0, sl, lsl #2]
   129a0:	ldr	r2, [r4, #20]
   129a4:	ldr	r1, [r4, #32]
   129a8:	bl	1225c <__assert_fail@plt+0x1308>
   129ac:	add	sl, sl, r7
   129b0:	cmp	sl, r6
   129b4:	blt	1295c <__assert_fail@plt+0x1a08>
   129b8:	mov	r0, #10
   129bc:	bl	10e70 <putchar@plt>
   129c0:	add	r5, r5, #1
   129c4:	cmp	r5, r7
   129c8:	bne	12930 <__assert_fail@plt+0x19dc>
   129cc:	sub	sp, fp, #28
   129d0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   129d4:	movw	r0, #33040	; 0x8110
   129d8:	movt	r0, #2
   129dc:	ldr	r5, [r0]
   129e0:	bl	10e4c <__errno_location@plt>
   129e4:	ldr	r0, [r0]
   129e8:	bl	10df8 <strerror@plt>
   129ec:	mov	r2, r0
   129f0:	movw	r1, #30851	; 0x7883
   129f4:	movt	r1, #1
   129f8:	mov	r0, r5
   129fc:	bl	10e40 <fprintf@plt>
   12a00:	mov	r0, r4
   12a04:	bl	12210 <__assert_fail@plt+0x12bc>
   12a08:	sub	sp, fp, #28
   12a0c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12a10:	ldr	r2, [r0, #16]
   12a14:	movw	r3, #33132	; 0x816c
   12a18:	movt	r3, #2
   12a1c:	ldr	r3, [r3]
   12a20:	cmp	r3, #0
   12a24:	ldrne	r3, [r0, #32]
   12a28:	addne	r2, r2, r3
   12a2c:	addne	r2, r2, #1
   12a30:	movw	r3, #33108	; 0x8154
   12a34:	movt	r3, #2
   12a38:	ldr	r3, [r3]
   12a3c:	cmp	r3, #0
   12a40:	ldrne	r3, [r0, #20]
   12a44:	addne	r2, r2, r3
   12a48:	addne	r2, r2, #1
   12a4c:	movw	r3, #33148	; 0x817c
   12a50:	movt	r3, #2
   12a54:	ldr	ip, [r3]
   12a58:	movw	r3, #33164	; 0x818c
   12a5c:	movt	r3, #2
   12a60:	ldr	r3, [r3]
   12a64:	orrs	r3, r3, ip
   12a68:	addne	r2, r2, #1
   12a6c:	add	r2, r2, #1
   12a70:	movw	r3, #33008	; 0x80f0
   12a74:	movt	r3, #2
   12a78:	ldr	r3, [r3]
   12a7c:	add	r3, r3, #1
   12a80:	cmp	r3, r2, lsl #1
   12a84:	sdivge	r0, r3, r2
   12a88:	strge	r0, [r1]
   12a8c:	sdivge	r0, r3, r0
   12a90:	bxge	lr
   12a94:	push	{fp, lr}
   12a98:	mov	fp, sp
   12a9c:	bl	12210 <__assert_fail@plt+0x12bc>
   12aa0:	mov	r0, #0
   12aa4:	pop	{fp, pc}
   12aa8:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   12aac:	add	fp, sp, #24
   12ab0:	sub	sp, sp, #8
   12ab4:	mov	r9, r0
   12ab8:	add	r1, sp, #4
   12abc:	bl	12a10 <__assert_fail@plt+0x1abc>
   12ac0:	cmp	r0, #0
   12ac4:	beq	12ba4 <__assert_fail@plt+0x1c50>
   12ac8:	mov	r8, r0
   12acc:	ldr	r6, [r9]
   12ad0:	ldr	r0, [r6, #48]	; 0x30
   12ad4:	cmp	r0, #0
   12ad8:	beq	12b2c <__assert_fail@plt+0x1bd8>
   12adc:	movw	r0, #33160	; 0x8188
   12ae0:	movt	r0, #2
   12ae4:	ldr	r0, [r0]
   12ae8:	movw	r1, #33108	; 0x8154
   12aec:	movt	r1, #2
   12af0:	ldr	r1, [r1]
   12af4:	orrs	r0, r1, r0
   12af8:	beq	12b28 <__assert_fail@plt+0x1bd4>
   12afc:	movw	r0, #33188	; 0x81a4
   12b00:	movt	r0, #2
   12b04:	ldr	r0, [r0]
   12b08:	ldr	r1, [r9, #4]
   12b0c:	add	r1, r1, r0
   12b10:	sub	r1, r1, #1
   12b14:	udiv	r2, r1, r0
   12b18:	movw	r0, #30866	; 0x7892
   12b1c:	movt	r0, #1
   12b20:	mov	r3, #0
   12b24:	bl	10d14 <printf@plt>
   12b28:	ldr	r6, [r9]
   12b2c:	cmp	r6, #0
   12b30:	beq	12b9c <__assert_fail@plt+0x1c48>
   12b34:	mov	r5, #0
   12b38:	ldr	r7, [sp, #4]
   12b3c:	ldr	r0, [r6, #16]
   12b40:	cmp	r0, #1
   12b44:	beq	12b90 <__assert_fail@plt+0x1c3c>
   12b48:	cmp	r5, r7
   12b4c:	blt	12b5c <__assert_fail@plt+0x1c08>
   12b50:	mov	r0, #10
   12b54:	bl	10e70 <putchar@plt>
   12b58:	mov	r5, #0
   12b5c:	ldr	r2, [r9, #20]
   12b60:	ldr	r1, [r9, #32]
   12b64:	mov	r0, r6
   12b68:	bl	1225c <__assert_fail@plt+0x1308>
   12b6c:	add	r5, r5, #1
   12b70:	cmp	r5, r7
   12b74:	cmplt	r0, r8
   12b78:	bge	12b90 <__assert_fail@plt+0x1c3c>
   12b7c:	sub	r4, r8, r0
   12b80:	mov	r0, #32
   12b84:	bl	10e70 <putchar@plt>
   12b88:	subs	r4, r4, #1
   12b8c:	bne	12b80 <__assert_fail@plt+0x1c2c>
   12b90:	ldr	r6, [r6, #8]
   12b94:	cmp	r6, #0
   12b98:	bne	12b3c <__assert_fail@plt+0x1be8>
   12b9c:	mov	r0, #10
   12ba0:	bl	10e70 <putchar@plt>
   12ba4:	sub	sp, fp, #24
   12ba8:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   12bac:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   12bb0:	add	fp, sp, #24
   12bb4:	mov	r4, r0
   12bb8:	movw	r0, #33132	; 0x816c
   12bbc:	movt	r0, #2
   12bc0:	ldr	r0, [r0]
   12bc4:	cmp	r0, #0
   12bc8:	ldrne	r0, [r4, #32]
   12bcc:	addne	r6, r0, #1
   12bd0:	moveq	r6, #0
   12bd4:	movw	r0, #33108	; 0x8154
   12bd8:	movt	r0, #2
   12bdc:	ldr	r0, [r0]
   12be0:	cmp	r0, #0
   12be4:	ldrne	r0, [r4, #20]
   12be8:	addne	r0, r6, r0
   12bec:	addne	r6, r0, #1
   12bf0:	movw	r0, #33148	; 0x817c
   12bf4:	movt	r0, #2
   12bf8:	ldr	r0, [r0]
   12bfc:	cmp	r0, #0
   12c00:	addne	r6, r6, #1
   12c04:	ldr	r5, [r4]
   12c08:	cmp	r5, #0
   12c0c:	beq	12c8c <__assert_fail@plt+0x1d38>
   12c10:	mov	r7, #0
   12c14:	movw	r8, #33008	; 0x80f0
   12c18:	movt	r8, #2
   12c1c:	ldr	r0, [r5, #16]
   12c20:	cmp	r0, #1
   12c24:	beq	12c80 <__assert_fail@plt+0x1d2c>
   12c28:	cmp	r7, #1
   12c2c:	blt	12c6c <__assert_fail@plt+0x1d18>
   12c30:	mov	r0, #44	; 0x2c
   12c34:	bl	10e70 <putchar@plt>
   12c38:	add	r7, r7, #2
   12c3c:	add	r0, r6, r7
   12c40:	ldr	r1, [r5, #52]	; 0x34
   12c44:	add	r0, r0, r1
   12c48:	ldr	r1, [r8]
   12c4c:	cmp	r0, r1
   12c50:	bcs	12c60 <__assert_fail@plt+0x1d0c>
   12c54:	mov	r0, #32
   12c58:	bl	10e70 <putchar@plt>
   12c5c:	b	12c6c <__assert_fail@plt+0x1d18>
   12c60:	mov	r0, #10
   12c64:	bl	10e70 <putchar@plt>
   12c68:	mov	r7, #0
   12c6c:	ldr	r2, [r4, #20]
   12c70:	ldr	r1, [r4, #32]
   12c74:	mov	r0, r5
   12c78:	bl	1225c <__assert_fail@plt+0x1308>
   12c7c:	add	r7, r0, r7
   12c80:	ldr	r5, [r5, #8]
   12c84:	cmp	r5, #0
   12c88:	bne	12c1c <__assert_fail@plt+0x1cc8>
   12c8c:	mov	r0, #10
   12c90:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   12c94:	b	10e70 <putchar@plt>
   12c98:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   12c9c:	add	fp, sp, #24
   12ca0:	ldrb	r7, [r0]
   12ca4:	cmp	r7, #0
   12ca8:	moveq	r4, #0
   12cac:	moveq	r0, r4
   12cb0:	popeq	{r4, r5, r6, r7, r8, sl, fp, pc}
   12cb4:	add	r6, r0, #1
   12cb8:	bl	10e10 <__ctype_b_loc@plt>
   12cbc:	mov	r5, r0
   12cc0:	mov	r4, #0
   12cc4:	movw	r8, #33200	; 0x81b0
   12cc8:	movt	r8, #2
   12ccc:	ldr	r0, [r8]
   12cd0:	uxtb	r1, r7
   12cd4:	cmp	r0, #0
   12cd8:	mov	r0, r1
   12cdc:	movwne	r0, #63	; 0x3f
   12ce0:	ldr	r2, [r5]
   12ce4:	add	r2, r2, r1, lsl #1
   12ce8:	ldrh	r2, [r2]
   12cec:	tst	r2, #16384	; 0x4000
   12cf0:	movne	r0, r1
   12cf4:	bl	10e70 <putchar@plt>
   12cf8:	ldrb	r7, [r6, r4]
   12cfc:	add	r4, r4, #1
   12d00:	cmp	r7, #0
   12d04:	bne	12ccc <__assert_fail@plt+0x1d78>
   12d08:	mov	r0, r4
   12d0c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   12d10:	push	{fp, lr}
   12d14:	mov	fp, sp
   12d18:	movw	r0, #33040	; 0x8110
   12d1c:	movt	r0, #2
   12d20:	ldr	r3, [r0]
   12d24:	movw	r0, #30902	; 0x78b6
   12d28:	movt	r0, #1
   12d2c:	mov	r1, #51	; 0x33
   12d30:	mov	r2, #1
   12d34:	bl	10da4 <fwrite@plt>
   12d38:	mov	r0, #1
   12d3c:	pop	{fp, pc}
   12d40:	add	r0, r0, #168	; 0xa8
   12d44:	add	r1, r1, #168	; 0xa8
   12d48:	b	10cfc <strcmp@plt>
   12d4c:	add	r2, r1, #168	; 0xa8
   12d50:	add	r1, r0, #168	; 0xa8
   12d54:	mov	r0, r2
   12d58:	b	10cfc <strcmp@plt>
   12d5c:	mov	ip, r0
   12d60:	ldr	r3, [r0, #144]	; 0x90
   12d64:	ldr	r2, [r1, #144]	; 0x90
   12d68:	mov	r0, #1
   12d6c:	cmp	r2, r3
   12d70:	ble	12d78 <__assert_fail@plt+0x1e24>
   12d74:	bx	lr
   12d78:	bne	12d98 <__assert_fail@plt+0x1e44>
   12d7c:	push	{r4, sl, fp, lr}
   12d80:	add	fp, sp, #8
   12d84:	ldr	lr, [ip, #148]	; 0x94
   12d88:	ldr	r4, [r1, #148]	; 0x94
   12d8c:	cmp	r4, lr
   12d90:	pop	{r4, sl, fp, lr}
   12d94:	bgt	12d74 <__assert_fail@plt+0x1e20>
   12d98:	mvn	r0, #0
   12d9c:	cmp	r2, r3
   12da0:	bxlt	lr
   12da4:	bne	12db8 <__assert_fail@plt+0x1e64>
   12da8:	ldr	r2, [ip, #148]	; 0x94
   12dac:	ldr	r3, [r1, #148]	; 0x94
   12db0:	cmp	r3, r2
   12db4:	blt	12d74 <__assert_fail@plt+0x1e20>
   12db8:	mov	r0, ip
   12dbc:	b	12d40 <__assert_fail@plt+0x1dec>
   12dc0:	push	{fp, lr}
   12dc4:	mov	fp, sp
   12dc8:	bl	12d5c <__assert_fail@plt+0x1e08>
   12dcc:	rsb	r0, r0, #0
   12dd0:	pop	{fp, pc}
   12dd4:	mov	ip, r0
   12dd8:	ldr	r3, [r0, #136]	; 0x88
   12ddc:	ldr	r2, [r1, #136]	; 0x88
   12de0:	mov	r0, #1
   12de4:	cmp	r2, r3
   12de8:	ble	12df0 <__assert_fail@plt+0x1e9c>
   12dec:	bx	lr
   12df0:	bne	12e10 <__assert_fail@plt+0x1ebc>
   12df4:	push	{r4, sl, fp, lr}
   12df8:	add	fp, sp, #8
   12dfc:	ldr	lr, [ip, #140]	; 0x8c
   12e00:	ldr	r4, [r1, #140]	; 0x8c
   12e04:	cmp	r4, lr
   12e08:	pop	{r4, sl, fp, lr}
   12e0c:	bgt	12dec <__assert_fail@plt+0x1e98>
   12e10:	mvn	r0, #0
   12e14:	cmp	r2, r3
   12e18:	bxlt	lr
   12e1c:	bne	12e30 <__assert_fail@plt+0x1edc>
   12e20:	ldr	r2, [ip, #140]	; 0x8c
   12e24:	ldr	r3, [r1, #140]	; 0x8c
   12e28:	cmp	r3, r2
   12e2c:	blt	12dec <__assert_fail@plt+0x1e98>
   12e30:	mov	r0, ip
   12e34:	b	12d40 <__assert_fail@plt+0x1dec>
   12e38:	push	{fp, lr}
   12e3c:	mov	fp, sp
   12e40:	bl	12dd4 <__assert_fail@plt+0x1e80>
   12e44:	rsb	r0, r0, #0
   12e48:	pop	{fp, pc}
   12e4c:	mov	ip, r0
   12e50:	ldr	r3, [r0, #152]	; 0x98
   12e54:	ldr	r2, [r1, #152]	; 0x98
   12e58:	mov	r0, #1
   12e5c:	cmp	r2, r3
   12e60:	ble	12e68 <__assert_fail@plt+0x1f14>
   12e64:	bx	lr
   12e68:	bne	12e88 <__assert_fail@plt+0x1f34>
   12e6c:	push	{r4, sl, fp, lr}
   12e70:	add	fp, sp, #8
   12e74:	ldr	lr, [ip, #156]	; 0x9c
   12e78:	ldr	r4, [r1, #156]	; 0x9c
   12e7c:	cmp	r4, lr
   12e80:	pop	{r4, sl, fp, lr}
   12e84:	bgt	12e64 <__assert_fail@plt+0x1f10>
   12e88:	mvn	r0, #0
   12e8c:	cmp	r2, r3
   12e90:	bxlt	lr
   12e94:	bne	12ea8 <__assert_fail@plt+0x1f54>
   12e98:	ldr	r2, [ip, #156]	; 0x9c
   12e9c:	ldr	r3, [r1, #156]	; 0x9c
   12ea0:	cmp	r3, r2
   12ea4:	blt	12e64 <__assert_fail@plt+0x1f10>
   12ea8:	mov	r0, ip
   12eac:	b	12d40 <__assert_fail@plt+0x1dec>
   12eb0:	push	{fp, lr}
   12eb4:	mov	fp, sp
   12eb8:	bl	12e4c <__assert_fail@plt+0x1ef8>
   12ebc:	rsb	r0, r0, #0
   12ec0:	pop	{fp, pc}
   12ec4:	push	{r4, r5, r6, sl, fp, lr}
   12ec8:	add	fp, sp, #16
   12ecc:	ldr	r4, [r0, #112]	; 0x70
   12ed0:	ldr	r3, [r0, #116]	; 0x74
   12ed4:	ldr	r6, [r1, #112]	; 0x70
   12ed8:	ldr	r5, [r1, #116]	; 0x74
   12edc:	mov	ip, #1
   12ee0:	subs	r2, r4, r6
   12ee4:	sbcs	r2, r3, r5
   12ee8:	blt	12efc <__assert_fail@plt+0x1fa8>
   12eec:	mvn	ip, #0
   12ef0:	subs	r2, r6, r4
   12ef4:	sbcs	r2, r5, r3
   12ef8:	bge	12f04 <__assert_fail@plt+0x1fb0>
   12efc:	mov	r0, ip
   12f00:	pop	{r4, r5, r6, sl, fp, pc}
   12f04:	pop	{r4, r5, r6, sl, fp, lr}
   12f08:	b	12d40 <__assert_fail@plt+0x1dec>
   12f0c:	push	{fp, lr}
   12f10:	mov	fp, sp
   12f14:	bl	12ec4 <__assert_fail@plt+0x1f70>
   12f18:	rsb	r0, r0, #0
   12f1c:	pop	{fp, pc}
   12f20:	push	{r4, r5, fp, lr}
   12f24:	add	fp, sp, #8
   12f28:	mov	r4, r1
   12f2c:	mov	r5, r0
   12f30:	bl	13004 <__assert_fail@plt+0x20b0>
   12f34:	strb	r0, [r4]
   12f38:	mov	r0, #114	; 0x72
   12f3c:	tst	r5, #256	; 0x100
   12f40:	mov	r1, #114	; 0x72
   12f44:	movweq	r1, #45	; 0x2d
   12f48:	strb	r1, [r4, #1]
   12f4c:	mov	r1, #119	; 0x77
   12f50:	tst	r5, #128	; 0x80
   12f54:	mov	r2, #119	; 0x77
   12f58:	movweq	r2, #45	; 0x2d
   12f5c:	strb	r2, [r4, #2]
   12f60:	tst	r5, #32
   12f64:	mov	r2, #114	; 0x72
   12f68:	movweq	r2, #45	; 0x2d
   12f6c:	strb	r2, [r4, #4]
   12f70:	tst	r5, #16
   12f74:	mov	r2, #119	; 0x77
   12f78:	movweq	r2, #45	; 0x2d
   12f7c:	strb	r2, [r4, #5]
   12f80:	tst	r5, #4
   12f84:	movweq	r0, #45	; 0x2d
   12f88:	strb	r0, [r4, #7]
   12f8c:	tst	r5, #2
   12f90:	movweq	r1, #45	; 0x2d
   12f94:	strb	r1, [r4, #8]
   12f98:	mov	r0, #32
   12f9c:	strh	r0, [r4, #10]
   12fa0:	ands	r0, r5, #64	; 0x40
   12fa4:	mov	r0, #45	; 0x2d
   12fa8:	mov	r1, #45	; 0x2d
   12fac:	movwne	r1, #120	; 0x78
   12fb0:	mov	r2, #83	; 0x53
   12fb4:	mov	r3, #83	; 0x53
   12fb8:	movwne	r3, #115	; 0x73
   12fbc:	tst	r5, #2048	; 0x800
   12fc0:	moveq	r3, r1
   12fc4:	strb	r3, [r4, #3]
   12fc8:	ands	r1, r5, #8
   12fcc:	mov	r1, #45	; 0x2d
   12fd0:	movwne	r1, #120	; 0x78
   12fd4:	movwne	r2, #115	; 0x73
   12fd8:	tst	r5, #1024	; 0x400
   12fdc:	moveq	r2, r1
   12fe0:	strb	r2, [r4, #6]
   12fe4:	ands	r1, r5, #1
   12fe8:	movwne	r0, #120	; 0x78
   12fec:	mov	r1, #84	; 0x54
   12ff0:	movwne	r1, #116	; 0x74
   12ff4:	tst	r5, #512	; 0x200
   12ff8:	moveq	r1, r0
   12ffc:	strb	r1, [r4, #9]
   13000:	pop	{r4, r5, fp, pc}
   13004:	and	r0, r0, #61440	; 0xf000
   13008:	sub	r0, r0, #4096	; 0x1000
   1300c:	lsr	r1, r0, #12
   13010:	cmp	r1, #11
   13014:	bhi	13064 <__assert_fail@plt+0x2110>
   13018:	mov	r0, #45	; 0x2d
   1301c:	add	r2, pc, #0
   13020:	ldr	pc, [r2, r1, lsl #2]
   13024:	andeq	r3, r1, r4, asr r0
   13028:	andeq	r3, r1, ip, asr r0
   1302c:	andeq	r3, r1, r4, rrx
   13030:	andeq	r3, r1, ip, rrx
   13034:	andeq	r3, r1, r4, rrx
   13038:	andeq	r3, r1, r4, lsl #1
   1303c:	andeq	r3, r1, r4, rrx
   13040:	andeq	r3, r1, r8, rrx
   13044:	andeq	r3, r1, r4, rrx
   13048:	andeq	r3, r1, r4, ror r0
   1304c:	andeq	r3, r1, r4, rrx
   13050:	andeq	r3, r1, ip, ror r0
   13054:	mov	r0, #112	; 0x70
   13058:	bx	lr
   1305c:	mov	r0, #99	; 0x63
   13060:	bx	lr
   13064:	mov	r0, #63	; 0x3f
   13068:	bx	lr
   1306c:	mov	r0, #100	; 0x64
   13070:	bx	lr
   13074:	mov	r0, #108	; 0x6c
   13078:	bx	lr
   1307c:	mov	r0, #115	; 0x73
   13080:	bx	lr
   13084:	mov	r0, #98	; 0x62
   13088:	bx	lr
   1308c:	ldr	r0, [r0, #16]
   13090:	b	12f20 <__assert_fail@plt+0x1fcc>
   13094:	push	{r4, r5, r6, sl, fp, lr}
   13098:	add	fp, sp, #16
   1309c:	mov	r4, r0
   130a0:	bl	10e4c <__errno_location@plt>
   130a4:	mov	r5, r0
   130a8:	ldr	r6, [r0]
   130ac:	mov	r0, r4
   130b0:	bl	10d38 <free@plt>
   130b4:	str	r6, [r5]
   130b8:	pop	{r4, r5, r6, sl, fp, pc}
   130bc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   130c0:	add	fp, sp, #28
   130c4:	sub	sp, sp, #12
   130c8:	cmp	r1, #4096	; 0x1000
   130cc:	bcs	130e8 <__assert_fail@plt+0x2194>
   130d0:	mov	r6, r1
   130d4:	mov	r7, r0
   130d8:	and	r0, r1, #516	; 0x204
   130dc:	cmp	r0, #516	; 0x204
   130e0:	tstne	r6, #18
   130e4:	bne	13104 <__assert_fail@plt+0x21b0>
   130e8:	bl	10e4c <__errno_location@plt>
   130ec:	mov	r1, #22
   130f0:	str	r1, [r0]
   130f4:	mov	r4, #0
   130f8:	mov	r0, r4
   130fc:	sub	sp, fp, #28
   13100:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13104:	mov	sl, r2
   13108:	mov	r0, #1
   1310c:	mov	r1, #96	; 0x60
   13110:	bl	16f40 <__assert_fail@plt+0x5fec>
   13114:	cmp	r0, #0
   13118:	beq	130f4 <__assert_fail@plt+0x21a0>
   1311c:	mov	r4, r0
   13120:	mvn	r0, #99	; 0x63
   13124:	str	r0, [r4, #32]
   13128:	bic	r0, r6, #516	; 0x204
   1312c:	tst	r6, #2
   13130:	mov	r1, r6
   13134:	orrne	r1, r0, #4
   13138:	str	sl, [r4, #44]	; 0x2c
   1313c:	str	r1, [r4, #48]	; 0x30
   13140:	mov	r0, r7
   13144:	bl	133b8 <__assert_fail@plt+0x2464>
   13148:	mov	r1, r0
   1314c:	cmp	r0, #4096	; 0x1000
   13150:	movls	r1, #4096	; 0x1000
   13154:	mov	r0, r4
   13158:	bl	133fc <__assert_fail@plt+0x24a8>
   1315c:	cmp	r0, #0
   13160:	beq	133ac <__assert_fail@plt+0x2458>
   13164:	ldr	r0, [r7]
   13168:	cmp	r0, #0
   1316c:	beq	1319c <__assert_fail@plt+0x2248>
   13170:	movw	r1, #30865	; 0x7891
   13174:	movt	r1, #1
   13178:	mov	r0, r4
   1317c:	mov	r2, #0
   13180:	bl	13474 <__assert_fail@plt+0x2520>
   13184:	cmp	r0, #0
   13188:	beq	133a4 <__assert_fail@plt+0x2450>
   1318c:	mov	r8, r0
   13190:	mvn	r0, #0
   13194:	str	r0, [r8, #48]	; 0x30
   13198:	b	131a0 <__assert_fail@plt+0x224c>
   1319c:	mov	r8, #0
   131a0:	cmp	sl, #0
   131a4:	ldrbne	r0, [r4, #49]	; 0x31
   131a8:	ubfxne	r0, r0, #2, #1
   131ac:	moveq	r0, #1
   131b0:	ldr	r5, [r7]
   131b4:	cmp	r5, #0
   131b8:	beq	132e4 <__assert_fail@plt+0x2390>
   131bc:	and	r1, r6, #2048	; 0x800
   131c0:	str	r1, [sp, #8]
   131c4:	eor	r0, r0, #1
   131c8:	str	r0, [sp, #4]
   131cc:	mov	r9, #0
   131d0:	mov	r0, #0
   131d4:	str	r0, [sp]
   131d8:	mov	r6, #0
   131dc:	mov	r0, r5
   131e0:	bl	10e1c <strlen@plt>
   131e4:	mov	r2, r0
   131e8:	ldr	r0, [sp, #8]
   131ec:	cmp	r0, #0
   131f0:	bne	13228 <__assert_fail@plt+0x22d4>
   131f4:	cmp	r2, #3
   131f8:	bcc	13228 <__assert_fail@plt+0x22d4>
   131fc:	add	r0, r5, r2
   13200:	ldrb	r0, [r0, #-1]
   13204:	cmp	r0, #47	; 0x2f
   13208:	bne	13228 <__assert_fail@plt+0x22d4>
   1320c:	sub	r0, r5, #2
   13210:	ldrb	r1, [r0, r2]
   13214:	cmp	r1, #47	; 0x2f
   13218:	bne	13228 <__assert_fail@plt+0x22d4>
   1321c:	sub	r2, r2, #1
   13220:	cmp	r2, #1
   13224:	bhi	13210 <__assert_fail@plt+0x22bc>
   13228:	mov	r0, r4
   1322c:	mov	r1, r5
   13230:	bl	13474 <__assert_fail@plt+0x2520>
   13234:	cmp	r0, #0
   13238:	beq	13394 <__assert_fail@plt+0x2440>
   1323c:	mov	r5, r0
   13240:	str	r8, [r0, #4]
   13244:	mov	r0, #0
   13248:	str	r0, [r5, #48]	; 0x30
   1324c:	add	r0, r5, #168	; 0xa8
   13250:	str	r0, [r5, #24]
   13254:	clz	r0, r9
   13258:	lsr	r0, r0, #5
   1325c:	ldr	r1, [sp, #4]
   13260:	orrs	r0, r1, r0
   13264:	bne	13290 <__assert_fail@plt+0x233c>
   13268:	mov	r0, #11
   1326c:	strh	r0, [r5, #56]	; 0x38
   13270:	mov	r0, r5
   13274:	mov	r1, #1
   13278:	bl	134f4 <__assert_fail@plt+0x25a0>
   1327c:	cmp	sl, #0
   13280:	beq	132ac <__assert_fail@plt+0x2358>
   13284:	str	r9, [r5, #8]
   13288:	mov	r9, r5
   1328c:	b	132c8 <__assert_fail@plt+0x2374>
   13290:	mov	r0, r4
   13294:	mov	r1, r5
   13298:	mov	r2, #0
   1329c:	bl	13524 <__assert_fail@plt+0x25d0>
   132a0:	strh	r0, [r5, #56]	; 0x38
   132a4:	cmp	sl, #0
   132a8:	bne	13284 <__assert_fail@plt+0x2330>
   132ac:	mov	r0, #0
   132b0:	str	r0, [r5, #8]
   132b4:	cmp	r9, #0
   132b8:	beq	132dc <__assert_fail@plt+0x2388>
   132bc:	ldr	r0, [sp]
   132c0:	str	r5, [r0, #8]
   132c4:	str	r5, [sp]
   132c8:	add	r6, r6, #1
   132cc:	ldr	r5, [r7, #4]!
   132d0:	cmp	r5, #0
   132d4:	bne	131dc <__assert_fail@plt+0x2288>
   132d8:	b	132ec <__assert_fail@plt+0x2398>
   132dc:	str	r5, [sp]
   132e0:	b	13288 <__assert_fail@plt+0x2334>
   132e4:	mov	r9, #0
   132e8:	b	13310 <__assert_fail@plt+0x23bc>
   132ec:	cmp	sl, #0
   132f0:	beq	13310 <__assert_fail@plt+0x23bc>
   132f4:	cmp	r6, #2
   132f8:	bcc	13310 <__assert_fail@plt+0x23bc>
   132fc:	mov	r0, r4
   13300:	mov	r1, r9
   13304:	mov	r2, r6
   13308:	bl	1368c <__assert_fail@plt+0x2738>
   1330c:	mov	r9, r0
   13310:	movw	r1, #30865	; 0x7891
   13314:	movt	r1, #1
   13318:	mov	r0, r4
   1331c:	mov	r2, #0
   13320:	bl	13474 <__assert_fail@plt+0x2520>
   13324:	str	r0, [r4]
   13328:	cmp	r0, #0
   1332c:	beq	13394 <__assert_fail@plt+0x2440>
   13330:	mov	r1, #9
   13334:	strh	r1, [r0, #56]	; 0x38
   13338:	str	r9, [r0, #8]
   1333c:	mov	r1, #1
   13340:	str	r1, [r0, #48]	; 0x30
   13344:	mov	r0, r4
   13348:	bl	1376c <__assert_fail@plt+0x2818>
   1334c:	cmp	r0, #0
   13350:	beq	13394 <__assert_fail@plt+0x2440>
   13354:	ldrh	r0, [r4, #48]	; 0x30
   13358:	tst	r0, #516	; 0x204
   1335c:	bne	13384 <__assert_fail@plt+0x2430>
   13360:	movw	r1, #30955	; 0x78eb
   13364:	movt	r1, #1
   13368:	mov	r0, r4
   1336c:	bl	137f8 <__assert_fail@plt+0x28a4>
   13370:	str	r0, [r4, #28]
   13374:	cmn	r0, #1
   13378:	ldrle	r0, [r4, #48]	; 0x30
   1337c:	orrle	r0, r0, #4
   13380:	strle	r0, [r4, #48]	; 0x30
   13384:	add	r0, r4, #60	; 0x3c
   13388:	mvn	r1, #0
   1338c:	bl	16cf8 <__assert_fail@plt+0x5da4>
   13390:	b	130f8 <__assert_fail@plt+0x21a4>
   13394:	mov	r0, r9
   13398:	bl	13828 <__assert_fail@plt+0x28d4>
   1339c:	mov	r0, r8
   133a0:	bl	13094 <__assert_fail@plt+0x2140>
   133a4:	ldr	r0, [r4, #24]
   133a8:	bl	13094 <__assert_fail@plt+0x2140>
   133ac:	mov	r0, r4
   133b0:	bl	13094 <__assert_fail@plt+0x2140>
   133b4:	b	130f4 <__assert_fail@plt+0x21a0>
   133b8:	mov	r1, r0
   133bc:	ldr	r0, [r0]
   133c0:	cmp	r0, #0
   133c4:	moveq	r0, #1
   133c8:	bxeq	lr
   133cc:	push	{r4, r5, fp, lr}
   133d0:	add	fp, sp, #8
   133d4:	add	r5, r1, #4
   133d8:	mov	r4, #0
   133dc:	bl	10e1c <strlen@plt>
   133e0:	cmp	r0, r4
   133e4:	movhi	r4, r0
   133e8:	ldr	r0, [r5], #4
   133ec:	cmp	r0, #0
   133f0:	bne	133dc <__assert_fail@plt+0x2488>
   133f4:	add	r0, r4, #1
   133f8:	pop	{r4, r5, fp, pc}
   133fc:	push	{r4, r5, fp, lr}
   13400:	add	fp, sp, #8
   13404:	mov	r4, r0
   13408:	ldr	r0, [r0, #36]	; 0x24
   1340c:	add	r1, r1, #256	; 0x100
   13410:	adds	r1, r1, r0
   13414:	bcc	1343c <__assert_fail@plt+0x24e8>
   13418:	ldr	r0, [r4, #24]
   1341c:	bl	13094 <__assert_fail@plt+0x2140>
   13420:	mov	r5, #0
   13424:	str	r5, [r4, #24]
   13428:	bl	10e4c <__errno_location@plt>
   1342c:	mov	r1, #36	; 0x24
   13430:	str	r1, [r0]
   13434:	mov	r0, r5
   13438:	pop	{r4, r5, fp, pc}
   1343c:	str	r1, [r4, #36]	; 0x24
   13440:	ldr	r0, [r4, #24]
   13444:	bl	16fc4 <__assert_fail@plt+0x6070>
   13448:	cmp	r0, #0
   1344c:	strne	r0, [r4, #24]
   13450:	movne	r5, #1
   13454:	movne	r0, r5
   13458:	popne	{r4, r5, fp, pc}
   1345c:	ldr	r0, [r4, #24]
   13460:	bl	13094 <__assert_fail@plt+0x2140>
   13464:	mov	r5, #0
   13468:	str	r5, [r4, #24]
   1346c:	mov	r0, r5
   13470:	pop	{r4, r5, fp, pc}
   13474:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   13478:	add	fp, sp, #24
   1347c:	mov	r6, r2
   13480:	mov	r8, r1
   13484:	mov	r5, r0
   13488:	add	r0, r2, #176	; 0xb0
   1348c:	bic	r0, r0, #7
   13490:	bl	16f94 <__assert_fail@plt+0x6040>
   13494:	cmp	r0, #0
   13498:	moveq	r4, #0
   1349c:	moveq	r0, r4
   134a0:	popeq	{r4, r5, r6, r7, r8, sl, fp, pc}
   134a4:	mov	r4, r0
   134a8:	add	r7, r0, #168	; 0xa8
   134ac:	mov	r0, r7
   134b0:	mov	r1, r8
   134b4:	mov	r2, r6
   134b8:	bl	10d44 <memcpy@plt>
   134bc:	mov	r0, #0
   134c0:	strb	r0, [r7, r6]
   134c4:	str	r6, [r4, #52]	; 0x34
   134c8:	str	r5, [r4, #44]	; 0x2c
   134cc:	ldr	r1, [r5, #24]
   134d0:	mov	r2, #196608	; 0x30000
   134d4:	str	r2, [r4, #58]	; 0x3a
   134d8:	str	r0, [r4, #12]
   134dc:	str	r0, [r4, #16]
   134e0:	str	r0, [r4, #20]
   134e4:	str	r1, [r4, #28]
   134e8:	str	r0, [r4, #32]
   134ec:	mov	r0, r4
   134f0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   134f4:	ldrh	r2, [r0, #56]	; 0x38
   134f8:	cmp	r2, #11
   134fc:	bne	13518 <__assert_fail@plt+0x25c4>
   13500:	mov	r3, #0
   13504:	mov	r2, #1
   13508:	cmp	r1, #0
   1350c:	movwne	r2, #2
   13510:	strd	r2, [r0, #112]	; 0x70
   13514:	bx	lr
   13518:	push	{fp, lr}
   1351c:	mov	fp, sp
   13520:	bl	10f18 <abort@plt>
   13524:	push	{r4, r5, r6, sl, fp, lr}
   13528:	add	fp, sp, #16
   1352c:	mov	r4, r1
   13530:	ldr	r1, [r1, #48]	; 0x30
   13534:	cmp	r1, #0
   13538:	ldrbeq	r1, [r0, #48]	; 0x30
   1353c:	andeq	r1, r1, #1
   13540:	orreq	r2, r1, r2
   13544:	add	r5, r4, #64	; 0x40
   13548:	cmp	r2, #0
   1354c:	ldreq	r1, [r0, #48]	; 0x30
   13550:	andseq	r1, r1, #2
   13554:	beq	135a4 <__assert_fail@plt+0x2650>
   13558:	ldr	r0, [r4, #24]
   1355c:	mov	r1, r5
   13560:	bl	1776c <__assert_fail@plt+0x6818>
   13564:	cmp	r0, #0
   13568:	beq	13618 <__assert_fail@plt+0x26c4>
   1356c:	bl	10e4c <__errno_location@plt>
   13570:	mov	r6, r0
   13574:	ldr	r0, [r0]
   13578:	cmp	r0, #2
   1357c:	bne	135c8 <__assert_fail@plt+0x2674>
   13580:	ldr	r0, [r4, #24]
   13584:	mov	r1, r5
   13588:	bl	1778c <__assert_fail@plt+0x6838>
   1358c:	cmp	r0, #0
   13590:	bne	135c8 <__assert_fail@plt+0x2674>
   13594:	mov	r0, #0
   13598:	str	r0, [r6]
   1359c:	mov	r0, #13
   135a0:	pop	{r4, r5, r6, sl, fp, pc}
   135a4:	ldr	r1, [r4, #24]
   135a8:	ldr	r0, [r0, #32]
   135ac:	mov	r2, r5
   135b0:	mov	r3, #256	; 0x100
   135b4:	bl	1779c <__assert_fail@plt+0x6848>
   135b8:	cmp	r0, #0
   135bc:	beq	13618 <__assert_fail@plt+0x26c4>
   135c0:	bl	10e4c <__errno_location@plt>
   135c4:	mov	r6, r0
   135c8:	ldr	r0, [r6]
   135cc:	str	r0, [r4, #32]
   135d0:	mov	r0, #0
   135d4:	vmov.i32	q8, #0	; 0x00000000
   135d8:	str	r0, [r5, #96]	; 0x60
   135dc:	add	r1, r5, #80	; 0x50
   135e0:	vst1.64	{d16-d17}, [r1]
   135e4:	add	r1, r5, #64	; 0x40
   135e8:	vst1.64	{d16-d17}, [r1]
   135ec:	add	r1, r5, #48	; 0x30
   135f0:	vst1.64	{d16-d17}, [r1]
   135f4:	add	r1, r5, #32
   135f8:	vst1.64	{d16-d17}, [r1]
   135fc:	add	r1, r5, #16
   13600:	vst1.64	{d16-d17}, [r1]
   13604:	mov	r1, #100	; 0x64
   13608:	vst1.64	{d16-d17}, [r5], r1
   1360c:	str	r0, [r5]
   13610:	mov	r0, #10
   13614:	pop	{r4, r5, r6, sl, fp, pc}
   13618:	ldr	r0, [r4, #80]	; 0x50
   1361c:	and	r0, r0, #61440	; 0xf000
   13620:	cmp	r0, #40960	; 0xa000
   13624:	moveq	r0, #12
   13628:	popeq	{r4, r5, r6, sl, fp, pc}
   1362c:	cmp	r0, #32768	; 0x8000
   13630:	moveq	r0, #8
   13634:	popeq	{r4, r5, r6, sl, fp, pc}
   13638:	cmp	r0, #16384	; 0x4000
   1363c:	bne	13670 <__assert_fail@plt+0x271c>
   13640:	ldrb	r1, [r4, #168]	; 0xa8
   13644:	mov	r0, #1
   13648:	cmp	r1, #46	; 0x2e
   1364c:	popne	{r4, r5, r6, sl, fp, pc}
   13650:	ldrb	r1, [r4, #169]	; 0xa9
   13654:	cmp	r1, #0
   13658:	beq	13678 <__assert_fail@plt+0x2724>
   1365c:	cmp	r1, #46	; 0x2e
   13660:	ldrbeq	r1, [r4, #170]	; 0xaa
   13664:	cmpeq	r1, #0
   13668:	beq	13678 <__assert_fail@plt+0x2724>
   1366c:	pop	{r4, r5, r6, sl, fp, pc}
   13670:	mov	r0, #3
   13674:	pop	{r4, r5, r6, sl, fp, pc}
   13678:	ldr	r1, [r4, #48]	; 0x30
   1367c:	mov	r0, #5
   13680:	cmp	r1, #0
   13684:	movweq	r0, #1
   13688:	pop	{r4, r5, r6, sl, fp, pc}
   1368c:	push	{r4, r5, r6, r7, fp, lr}
   13690:	add	fp, sp, #16
   13694:	mov	r6, r2
   13698:	mov	r4, r1
   1369c:	mov	r5, r0
   136a0:	ldr	r7, [r0, #44]	; 0x2c
   136a4:	ldr	r0, [r0, #40]	; 0x28
   136a8:	cmp	r0, r2
   136ac:	bcs	136d8 <__assert_fail@plt+0x2784>
   136b0:	add	r1, r6, #40	; 0x28
   136b4:	str	r1, [r5, #40]	; 0x28
   136b8:	cmn	r1, #-1073741823	; 0xc0000001
   136bc:	bhi	13750 <__assert_fail@plt+0x27fc>
   136c0:	ldr	r0, [r5, #8]
   136c4:	lsl	r1, r1, #2
   136c8:	bl	16fc4 <__assert_fail@plt+0x6070>
   136cc:	cmp	r0, #0
   136d0:	beq	13750 <__assert_fail@plt+0x27fc>
   136d4:	str	r0, [r5, #8]
   136d8:	cmp	r4, #0
   136dc:	beq	136f4 <__assert_fail@plt+0x27a0>
   136e0:	ldr	r0, [r5, #8]
   136e4:	str	r4, [r0], #4
   136e8:	ldr	r4, [r4, #8]
   136ec:	cmp	r4, #0
   136f0:	bne	136e4 <__assert_fail@plt+0x2790>
   136f4:	ldr	r0, [r5, #8]
   136f8:	mov	r1, r6
   136fc:	mov	r2, #4
   13700:	mov	r3, r7
   13704:	bl	10ee8 <qsort@plt>
   13708:	subs	r1, r6, #1
   1370c:	ldr	r0, [r5, #8]
   13710:	ldr	r4, [r0]
   13714:	beq	1373c <__assert_fail@plt+0x27e8>
   13718:	add	r2, r0, #4
   1371c:	rsb	r3, r6, #1
   13720:	ldr	r7, [r2, #-4]
   13724:	ldr	r6, [r2]
   13728:	str	r6, [r7, #8]
   1372c:	add	r2, r2, #4
   13730:	adds	r3, r3, #1
   13734:	bne	13720 <__assert_fail@plt+0x27cc>
   13738:	add	r0, r0, r1, lsl #2
   1373c:	ldr	r0, [r0]
   13740:	mov	r1, #0
   13744:	str	r1, [r0, #8]
   13748:	mov	r0, r4
   1374c:	pop	{r4, r5, r6, r7, fp, pc}
   13750:	ldr	r0, [r5, #8]
   13754:	bl	13094 <__assert_fail@plt+0x2140>
   13758:	mov	r0, #0
   1375c:	str	r0, [r5, #40]	; 0x28
   13760:	str	r0, [r5, #8]
   13764:	mov	r0, r4
   13768:	pop	{r4, r5, r6, r7, fp, pc}
   1376c:	push	{r4, r5, fp, lr}
   13770:	add	fp, sp, #8
   13774:	sub	sp, sp, #8
   13778:	mov	r4, r0
   1377c:	ldrh	r0, [r0, #48]	; 0x30
   13780:	movw	r1, #258	; 0x102
   13784:	tst	r0, r1
   13788:	beq	137c8 <__assert_fail@plt+0x2874>
   1378c:	movw	r0, #12436	; 0x3094
   13790:	movt	r0, #1
   13794:	str	r0, [sp]
   13798:	mov	r5, #0
   1379c:	movw	r2, #20060	; 0x4e5c
   137a0:	movt	r2, #1
   137a4:	movw	r3, #20092	; 0x4e7c
   137a8:	movt	r3, #1
   137ac:	mov	r0, #31
   137b0:	mov	r1, #0
   137b4:	bl	16260 <__assert_fail@plt+0x530c>
   137b8:	str	r0, [r4, #56]	; 0x38
   137bc:	cmp	r0, #0
   137c0:	movne	r5, #1
   137c4:	b	137ec <__assert_fail@plt+0x2898>
   137c8:	mov	r0, #32
   137cc:	bl	16f94 <__assert_fail@plt+0x6040>
   137d0:	str	r0, [r4, #56]	; 0x38
   137d4:	cmp	r0, #0
   137d8:	beq	137e8 <__assert_fail@plt+0x2894>
   137dc:	bl	1716c <__assert_fail@plt+0x6218>
   137e0:	mov	r5, #1
   137e4:	b	137ec <__assert_fail@plt+0x2898>
   137e8:	mov	r5, #0
   137ec:	mov	r0, r5
   137f0:	sub	sp, fp, #8
   137f4:	pop	{r4, r5, fp, pc}
   137f8:	ldr	r3, [r0, #48]	; 0x30
   137fc:	mov	r2, #32768	; 0x8000
   13800:	and	r2, r2, r3, lsl #11
   13804:	orr	r2, r2, #18688	; 0x4900
   13808:	orr	r2, r2, #524288	; 0x80000
   1380c:	tst	r3, #512	; 0x200
   13810:	bne	13820 <__assert_fail@plt+0x28cc>
   13814:	mov	r0, r1
   13818:	mov	r1, r2
   1381c:	b	1746c <__assert_fail@plt+0x6518>
   13820:	ldr	r0, [r0, #32]
   13824:	b	16e5c <__assert_fail@plt+0x5f08>
   13828:	push	{r4, r6, r7, sl, fp, lr}
   1382c:	add	fp, sp, #16
   13830:	cmp	r0, #0
   13834:	popeq	{r4, r6, r7, sl, fp, pc}
   13838:	mov	r4, r0
   1383c:	ldrd	r6, [r4, #8]
   13840:	cmp	r7, #0
   13844:	beq	13850 <__assert_fail@plt+0x28fc>
   13848:	mov	r0, r7
   1384c:	bl	10f3c <closedir@plt>
   13850:	mov	r0, r4
   13854:	bl	13094 <__assert_fail@plt+0x2140>
   13858:	cmp	r6, #0
   1385c:	mov	r4, r6
   13860:	bne	1383c <__assert_fail@plt+0x28e8>
   13864:	pop	{r4, r6, r7, sl, fp, pc}
   13868:	push	{r4, r5, fp, lr}
   1386c:	add	fp, sp, #8
   13870:	mov	r4, r0
   13874:	ldr	r0, [r0]
   13878:	cmp	r0, #0
   1387c:	beq	138bc <__assert_fail@plt+0x2968>
   13880:	ldr	r1, [r0, #48]	; 0x30
   13884:	cmp	r1, #0
   13888:	blt	138b0 <__assert_fail@plt+0x295c>
   1388c:	ldr	r5, [r0, #8]
   13890:	cmp	r5, #0
   13894:	ldreq	r5, [r0, #4]
   13898:	bl	13094 <__assert_fail@plt+0x2140>
   1389c:	ldr	r0, [r5, #48]	; 0x30
   138a0:	cmn	r0, #1
   138a4:	mov	r0, r5
   138a8:	bgt	1388c <__assert_fail@plt+0x2938>
   138ac:	b	138b4 <__assert_fail@plt+0x2960>
   138b0:	mov	r5, r0
   138b4:	mov	r0, r5
   138b8:	bl	13094 <__assert_fail@plt+0x2140>
   138bc:	ldr	r0, [r4, #4]
   138c0:	cmp	r0, #0
   138c4:	blne	13828 <__assert_fail@plt+0x28d4>
   138c8:	ldr	r0, [r4, #8]
   138cc:	bl	13094 <__assert_fail@plt+0x2140>
   138d0:	ldr	r0, [r4, #24]
   138d4:	bl	13094 <__assert_fail@plt+0x2140>
   138d8:	ldr	r0, [r4, #48]	; 0x30
   138dc:	tst	r0, #512	; 0x200
   138e0:	bne	1390c <__assert_fail@plt+0x29b8>
   138e4:	mov	r5, #0
   138e8:	tst	r0, #4
   138ec:	bne	13950 <__assert_fail@plt+0x29fc>
   138f0:	ldr	r0, [r4, #28]
   138f4:	bl	10edc <fchdir@plt>
   138f8:	cmp	r0, #0
   138fc:	beq	1392c <__assert_fail@plt+0x29d8>
   13900:	bl	10e4c <__errno_location@plt>
   13904:	ldr	r5, [r0]
   13908:	b	13930 <__assert_fail@plt+0x29dc>
   1390c:	ldr	r0, [r4, #32]
   13910:	mov	r5, #0
   13914:	cmp	r0, #0
   13918:	blt	13950 <__assert_fail@plt+0x29fc>
   1391c:	bl	10f24 <close@plt>
   13920:	cmp	r0, #0
   13924:	bne	13948 <__assert_fail@plt+0x29f4>
   13928:	b	13950 <__assert_fail@plt+0x29fc>
   1392c:	mov	r5, #0
   13930:	ldr	r0, [r4, #28]
   13934:	bl	10f24 <close@plt>
   13938:	cmp	r5, #0
   1393c:	bne	13950 <__assert_fail@plt+0x29fc>
   13940:	cmp	r0, #0
   13944:	beq	13950 <__assert_fail@plt+0x29fc>
   13948:	bl	10e4c <__errno_location@plt>
   1394c:	ldr	r5, [r0]
   13950:	add	r0, r4, #60	; 0x3c
   13954:	bl	13994 <__assert_fail@plt+0x2a40>
   13958:	ldr	r0, [r4, #52]	; 0x34
   1395c:	cmp	r0, #0
   13960:	beq	13968 <__assert_fail@plt+0x2a14>
   13964:	bl	16534 <__assert_fail@plt+0x55e0>
   13968:	mov	r0, r4
   1396c:	bl	139cc <__assert_fail@plt+0x2a78>
   13970:	mov	r0, r4
   13974:	bl	13094 <__assert_fail@plt+0x2140>
   13978:	cmp	r5, #0
   1397c:	moveq	r0, #0
   13980:	popeq	{r4, r5, fp, pc}
   13984:	bl	10e4c <__errno_location@plt>
   13988:	str	r5, [r0]
   1398c:	mvn	r0, #0
   13990:	pop	{r4, r5, fp, pc}
   13994:	push	{r4, sl, fp, lr}
   13998:	add	fp, sp, #8
   1399c:	mov	r4, r0
   139a0:	b	139a8 <__assert_fail@plt+0x2a54>
   139a4:	mov	r0, r4
   139a8:	bl	16d24 <__assert_fail@plt+0x5dd0>
   139ac:	cmp	r0, #0
   139b0:	popne	{r4, sl, fp, pc}
   139b4:	mov	r0, r4
   139b8:	bl	16d70 <__assert_fail@plt+0x5e1c>
   139bc:	cmp	r0, #0
   139c0:	blt	139a4 <__assert_fail@plt+0x2a50>
   139c4:	bl	10f24 <close@plt>
   139c8:	b	139a4 <__assert_fail@plt+0x2a50>
   139cc:	ldrh	r1, [r0, #48]	; 0x30
   139d0:	movw	r2, #258	; 0x102
   139d4:	tst	r1, r2
   139d8:	beq	139ec <__assert_fail@plt+0x2a98>
   139dc:	ldr	r0, [r0, #56]	; 0x38
   139e0:	cmp	r0, #0
   139e4:	bxeq	lr
   139e8:	b	16534 <__assert_fail@plt+0x55e0>
   139ec:	ldr	r0, [r0, #56]	; 0x38
   139f0:	b	13094 <__assert_fail@plt+0x2140>
   139f4:	push	{r4, r5, r6, r7, fp, lr}
   139f8:	add	fp, sp, #16
   139fc:	ldr	r6, [r0]
   13a00:	mov	r5, #0
   13a04:	cmp	r6, #0
   13a08:	beq	13fa0 <__assert_fail@plt+0x304c>
   13a0c:	mov	r4, r0
   13a10:	ldr	r1, [r0, #48]	; 0x30
   13a14:	tst	r1, #8192	; 0x2000
   13a18:	bne	13fa0 <__assert_fail@plt+0x304c>
   13a1c:	ldrh	r0, [r6, #60]	; 0x3c
   13a20:	mov	r2, #3
   13a24:	strh	r2, [r6, #60]	; 0x3c
   13a28:	cmp	r0, #2
   13a2c:	beq	13a54 <__assert_fail@plt+0x2b00>
   13a30:	cmp	r0, #1
   13a34:	bne	13ac0 <__assert_fail@plt+0x2b6c>
   13a38:	mov	r0, r4
   13a3c:	mov	r1, r6
   13a40:	mov	r2, #0
   13a44:	bl	13524 <__assert_fail@plt+0x25d0>
   13a48:	strh	r0, [r6, #56]	; 0x38
   13a4c:	mov	r0, r6
   13a50:	pop	{r4, r5, r6, r7, fp, pc}
   13a54:	ldrh	r2, [r6, #56]	; 0x38
   13a58:	movw	r3, #65534	; 0xfffe
   13a5c:	and	r2, r2, r3
   13a60:	cmp	r2, #12
   13a64:	bne	13ac0 <__assert_fail@plt+0x2b6c>
   13a68:	mov	r0, r4
   13a6c:	mov	r1, r6
   13a70:	mov	r2, #1
   13a74:	bl	13524 <__assert_fail@plt+0x25d0>
   13a78:	strh	r0, [r6, #56]	; 0x38
   13a7c:	cmp	r0, #1
   13a80:	bne	13b88 <__assert_fail@plt+0x2c34>
   13a84:	ldrb	r0, [r4, #48]	; 0x30
   13a88:	tst	r0, #4
   13a8c:	bne	13b88 <__assert_fail@plt+0x2c34>
   13a90:	movw	r1, #30955	; 0x78eb
   13a94:	movt	r1, #1
   13a98:	mov	r0, r4
   13a9c:	bl	137f8 <__assert_fail@plt+0x28a4>
   13aa0:	str	r0, [r6, #36]	; 0x24
   13aa4:	cmn	r0, #1
   13aa8:	ble	13e80 <__assert_fail@plt+0x2f2c>
   13aac:	ldrh	r0, [r6, #58]	; 0x3a
   13ab0:	orr	r0, r0, #2
   13ab4:	strh	r0, [r6, #58]	; 0x3a
   13ab8:	mov	r5, r6
   13abc:	b	13d28 <__assert_fail@plt+0x2dd4>
   13ac0:	ldrh	r2, [r6, #56]	; 0x38
   13ac4:	cmp	r2, #1
   13ac8:	bne	13b1c <__assert_fail@plt+0x2bc8>
   13acc:	cmp	r0, #4
   13ad0:	bne	13b90 <__assert_fail@plt+0x2c3c>
   13ad4:	ldrb	r0, [r6, #58]	; 0x3a
   13ad8:	tst	r0, #2
   13adc:	beq	13ae8 <__assert_fail@plt+0x2b94>
   13ae0:	ldr	r0, [r6, #36]	; 0x24
   13ae4:	bl	10f24 <close@plt>
   13ae8:	ldr	r0, [r4, #4]
   13aec:	cmp	r0, #0
   13af0:	beq	13b00 <__assert_fail@plt+0x2bac>
   13af4:	bl	13828 <__assert_fail@plt+0x28d4>
   13af8:	mov	r0, #0
   13afc:	str	r0, [r4, #4]
   13b00:	mov	r0, #6
   13b04:	strh	r0, [r6, #56]	; 0x38
   13b08:	mov	r0, r4
   13b0c:	mov	r1, r6
   13b10:	bl	13fac <__assert_fail@plt+0x3058>
   13b14:	mov	r0, r6
   13b18:	pop	{r4, r5, r6, r7, fp, pc}
   13b1c:	ldr	r5, [r6, #8]
   13b20:	cmp	r5, #0
   13b24:	beq	13c28 <__assert_fail@plt+0x2cd4>
   13b28:	str	r5, [r4]
   13b2c:	mov	r0, r6
   13b30:	bl	13094 <__assert_fail@plt+0x2140>
   13b34:	ldr	r0, [r5, #48]	; 0x30
   13b38:	cmp	r0, #0
   13b3c:	beq	13c74 <__assert_fail@plt+0x2d20>
   13b40:	ldrh	r0, [r5, #60]	; 0x3c
   13b44:	cmp	r0, #4
   13b48:	mov	r6, r5
   13b4c:	beq	13b1c <__assert_fail@plt+0x2bc8>
   13b50:	cmp	r0, #2
   13b54:	bne	13cec <__assert_fail@plt+0x2d98>
   13b58:	mov	r0, r4
   13b5c:	mov	r1, r5
   13b60:	mov	r2, #1
   13b64:	bl	13524 <__assert_fail@plt+0x25d0>
   13b68:	strh	r0, [r5, #56]	; 0x38
   13b6c:	cmp	r0, #1
   13b70:	ldrbeq	r0, [r4, #48]	; 0x30
   13b74:	tsteq	r0, #4
   13b78:	beq	13f0c <__assert_fail@plt+0x2fb8>
   13b7c:	mov	r0, #3
   13b80:	strh	r0, [r5, #60]	; 0x3c
   13b84:	b	13cec <__assert_fail@plt+0x2d98>
   13b88:	mov	r5, r6
   13b8c:	b	13d28 <__assert_fail@plt+0x2dd4>
   13b90:	tst	r1, #64	; 0x40
   13b94:	beq	13bb8 <__assert_fail@plt+0x2c64>
   13b98:	ldr	r0, [r4, #16]
   13b9c:	ldr	r3, [r4, #20]
   13ba0:	ldr	r2, [r6, #64]	; 0x40
   13ba4:	ldr	r5, [r6, #68]	; 0x44
   13ba8:	eor	r3, r5, r3
   13bac:	eor	r0, r2, r0
   13bb0:	orrs	r0, r0, r3
   13bb4:	bne	13ad4 <__assert_fail@plt+0x2b80>
   13bb8:	ldr	r0, [r4, #4]
   13bbc:	cmp	r0, #0
   13bc0:	beq	13cc8 <__assert_fail@plt+0x2d74>
   13bc4:	tst	r1, #4096	; 0x1000
   13bc8:	bne	13cb4 <__assert_fail@plt+0x2d60>
   13bcc:	ldr	r3, [r6, #24]
   13bd0:	mov	r0, r4
   13bd4:	mov	r1, r6
   13bd8:	mvn	r2, #0
   13bdc:	bl	1407c <__assert_fail@plt+0x3128>
   13be0:	cmp	r0, #0
   13be4:	beq	13ce0 <__assert_fail@plt+0x2d8c>
   13be8:	bl	10e4c <__errno_location@plt>
   13bec:	ldr	r0, [r0]
   13bf0:	str	r0, [r6, #32]
   13bf4:	ldrh	r0, [r6, #58]	; 0x3a
   13bf8:	orr	r0, r0, #1
   13bfc:	strh	r0, [r6, #58]	; 0x3a
   13c00:	ldr	r0, [r4, #4]
   13c04:	cmp	r0, #0
   13c08:	beq	13ce0 <__assert_fail@plt+0x2d8c>
   13c0c:	ldmib	r0, {r1, r2}
   13c10:	ldr	r1, [r1, #24]
   13c14:	str	r1, [r0, #24]
   13c18:	cmp	r2, #0
   13c1c:	mov	r0, r2
   13c20:	bne	13c0c <__assert_fail@plt+0x2cb8>
   13c24:	b	13ce0 <__assert_fail@plt+0x2d8c>
   13c28:	ldr	r0, [r6, #4]
   13c2c:	ldr	r1, [r0, #12]
   13c30:	cmp	r1, #0
   13c34:	beq	13de4 <__assert_fail@plt+0x2e90>
   13c38:	str	r0, [r4]
   13c3c:	ldr	r1, [r4, #24]
   13c40:	ldr	r0, [r0, #40]	; 0x28
   13c44:	mov	r5, #0
   13c48:	strb	r5, [r1, r0]
   13c4c:	mov	r0, r4
   13c50:	mov	r1, #3
   13c54:	bl	1425c <__assert_fail@plt+0x3308>
   13c58:	cmp	r0, #0
   13c5c:	beq	13dd8 <__assert_fail@plt+0x2e84>
   13c60:	mov	r7, r0
   13c64:	mov	r0, r6
   13c68:	bl	13094 <__assert_fail@plt+0x2140>
   13c6c:	mov	r5, r7
   13c70:	b	13cec <__assert_fail@plt+0x2d98>
   13c74:	mov	r0, r4
   13c78:	bl	14ac8 <__assert_fail@plt+0x3b74>
   13c7c:	cmp	r0, #0
   13c80:	beq	13c94 <__assert_fail@plt+0x2d40>
   13c84:	ldr	r0, [r4, #48]	; 0x30
   13c88:	orr	r0, r0, #8192	; 0x2000
   13c8c:	str	r0, [r4, #48]	; 0x30
   13c90:	b	13da0 <__assert_fail@plt+0x2e4c>
   13c94:	mov	r0, r4
   13c98:	bl	139cc <__assert_fail@plt+0x2a78>
   13c9c:	mov	r0, r4
   13ca0:	mov	r1, r5
   13ca4:	bl	14b24 <__assert_fail@plt+0x3bd0>
   13ca8:	mov	r0, r4
   13cac:	bl	1376c <__assert_fail@plt+0x2818>
   13cb0:	b	13d28 <__assert_fail@plt+0x2dd4>
   13cb4:	bic	r1, r1, #4096	; 0x1000
   13cb8:	str	r1, [r4, #48]	; 0x30
   13cbc:	bl	13828 <__assert_fail@plt+0x28d4>
   13cc0:	mov	r0, #0
   13cc4:	str	r0, [r4, #4]
   13cc8:	mov	r0, r4
   13ccc:	mov	r1, #3
   13cd0:	bl	1425c <__assert_fail@plt+0x3308>
   13cd4:	str	r0, [r4, #4]
   13cd8:	cmp	r0, #0
   13cdc:	beq	13dac <__assert_fail@plt+0x2e58>
   13ce0:	ldr	r5, [r4, #4]
   13ce4:	mov	r0, #0
   13ce8:	str	r0, [r4, #4]
   13cec:	ldr	r0, [r5, #4]
   13cf0:	ldr	r1, [r0, #28]
   13cf4:	ldr	r0, [r0, #40]	; 0x28
   13cf8:	sub	r2, r0, #1
   13cfc:	ldrb	r1, [r1, r2]
   13d00:	cmp	r1, #47	; 0x2f
   13d04:	moveq	r0, r2
   13d08:	ldr	r1, [r4, #24]
   13d0c:	mov	r2, #47	; 0x2f
   13d10:	strb	r2, [r1, r0]!
   13d14:	add	r0, r1, #1
   13d18:	add	r1, r5, #168	; 0xa8
   13d1c:	ldr	r2, [r5, #52]	; 0x34
   13d20:	add	r2, r2, #1
   13d24:	bl	10d2c <memmove@plt>
   13d28:	str	r5, [r4]
   13d2c:	ldrh	r0, [r5, #56]	; 0x38
   13d30:	cmp	r0, #11
   13d34:	bne	13d68 <__assert_fail@plt+0x2e14>
   13d38:	ldrd	r0, [r5, #112]	; 0x70
   13d3c:	eor	r2, r0, #1
   13d40:	orrs	r2, r2, r1
   13d44:	beq	13fa0 <__assert_fail@plt+0x304c>
   13d48:	eor	r0, r0, #2
   13d4c:	orrs	r0, r0, r1
   13d50:	bne	13fa8 <__assert_fail@plt+0x3054>
   13d54:	mov	r0, r4
   13d58:	mov	r1, r5
   13d5c:	mov	r2, #0
   13d60:	bl	13524 <__assert_fail@plt+0x25d0>
   13d64:	strh	r0, [r5, #56]	; 0x38
   13d68:	cmp	r0, #1
   13d6c:	bne	13fa0 <__assert_fail@plt+0x304c>
   13d70:	ldr	r0, [r5, #48]	; 0x30
   13d74:	cmp	r0, #0
   13d78:	ldrdeq	r0, [r5, #64]	; 0x40
   13d7c:	strdeq	r0, [r4, #16]
   13d80:	mov	r0, r4
   13d84:	mov	r1, r5
   13d88:	bl	14bac <__assert_fail@plt+0x3c58>
   13d8c:	cmp	r0, #0
   13d90:	bne	13fa0 <__assert_fail@plt+0x304c>
   13d94:	bl	10e4c <__errno_location@plt>
   13d98:	mov	r1, #12
   13d9c:	str	r1, [r0]
   13da0:	mov	r5, #0
   13da4:	mov	r0, r5
   13da8:	pop	{r4, r5, r6, r7, fp, pc}
   13dac:	ldrb	r0, [r4, #49]	; 0x31
   13db0:	tst	r0, #32
   13db4:	mov	r5, #0
   13db8:	bne	13fa0 <__assert_fail@plt+0x304c>
   13dbc:	ldr	r0, [r6, #32]
   13dc0:	cmp	r0, #0
   13dc4:	ldrhne	r0, [r6, #56]	; 0x38
   13dc8:	cmpne	r0, #4
   13dcc:	beq	13b08 <__assert_fail@plt+0x2bb4>
   13dd0:	mov	r0, #7
   13dd4:	b	13b04 <__assert_fail@plt+0x2bb0>
   13dd8:	ldrb	r0, [r4, #49]	; 0x31
   13ddc:	tst	r0, #32
   13de0:	bne	13fa0 <__assert_fail@plt+0x304c>
   13de4:	ldr	r5, [r6, #4]
   13de8:	str	r5, [r4]
   13dec:	mov	r0, r6
   13df0:	bl	13094 <__assert_fail@plt+0x2140>
   13df4:	ldr	r0, [r5, #48]	; 0x30
   13df8:	cmn	r0, #1
   13dfc:	beq	13e60 <__assert_fail@plt+0x2f0c>
   13e00:	ldrh	r0, [r5, #56]	; 0x38
   13e04:	cmp	r0, #11
   13e08:	beq	13fa8 <__assert_fail@plt+0x3054>
   13e0c:	ldr	r0, [r5, #40]	; 0x28
   13e10:	ldr	r1, [r4, #24]
   13e14:	mov	r2, #0
   13e18:	strb	r2, [r1, r0]
   13e1c:	ldr	r0, [r5, #48]	; 0x30
   13e20:	cmp	r0, #0
   13e24:	beq	13e9c <__assert_fail@plt+0x2f48>
   13e28:	ldrh	r0, [r5, #58]	; 0x3a
   13e2c:	tst	r0, #2
   13e30:	bne	13ec8 <__assert_fail@plt+0x2f74>
   13e34:	tst	r0, #1
   13e38:	bne	13f64 <__assert_fail@plt+0x3010>
   13e3c:	ldr	r1, [r5, #4]
   13e40:	movw	r3, #30954	; 0x78ea
   13e44:	movt	r3, #1
   13e48:	mov	r0, r4
   13e4c:	mvn	r2, #0
   13e50:	bl	1407c <__assert_fail@plt+0x3128>
   13e54:	cmp	r0, #0
   13e58:	bne	13eac <__assert_fail@plt+0x2f58>
   13e5c:	b	13f64 <__assert_fail@plt+0x3010>
   13e60:	mov	r0, r5
   13e64:	bl	13094 <__assert_fail@plt+0x2140>
   13e68:	bl	10e4c <__errno_location@plt>
   13e6c:	mov	r5, #0
   13e70:	str	r5, [r0]
   13e74:	str	r5, [r4]
   13e78:	mov	r0, r5
   13e7c:	pop	{r4, r5, r6, r7, fp, pc}
   13e80:	bl	10e4c <__errno_location@plt>
   13e84:	ldr	r0, [r0]
   13e88:	mov	r1, #7
   13e8c:	strh	r1, [r6, #56]	; 0x38
   13e90:	str	r0, [r6, #32]
   13e94:	mov	r5, r6
   13e98:	b	13d28 <__assert_fail@plt+0x2dd4>
   13e9c:	mov	r0, r4
   13ea0:	bl	14ac8 <__assert_fail@plt+0x3b74>
   13ea4:	cmp	r0, #0
   13ea8:	beq	13f64 <__assert_fail@plt+0x3010>
   13eac:	bl	10e4c <__errno_location@plt>
   13eb0:	ldr	r0, [r0]
   13eb4:	str	r0, [r5, #32]
   13eb8:	ldr	r0, [r4, #48]	; 0x30
   13ebc:	orr	r0, r0, #8192	; 0x2000
   13ec0:	str	r0, [r4, #48]	; 0x30
   13ec4:	b	13f64 <__assert_fail@plt+0x3010>
   13ec8:	ldr	r0, [r4, #48]	; 0x30
   13ecc:	tst	r0, #4
   13ed0:	bne	13f5c <__assert_fail@plt+0x3008>
   13ed4:	ldr	r1, [r5, #36]	; 0x24
   13ed8:	tst	r0, #512	; 0x200
   13edc:	bne	13f50 <__assert_fail@plt+0x2ffc>
   13ee0:	mov	r0, r1
   13ee4:	bl	10edc <fchdir@plt>
   13ee8:	cmp	r0, #0
   13eec:	beq	13f5c <__assert_fail@plt+0x3008>
   13ef0:	bl	10e4c <__errno_location@plt>
   13ef4:	ldr	r0, [r0]
   13ef8:	str	r0, [r5, #32]
   13efc:	ldr	r0, [r4, #48]	; 0x30
   13f00:	orr	r0, r0, #8192	; 0x2000
   13f04:	str	r0, [r4, #48]	; 0x30
   13f08:	b	13f5c <__assert_fail@plt+0x3008>
   13f0c:	movw	r1, #30955	; 0x78eb
   13f10:	movt	r1, #1
   13f14:	mov	r0, r4
   13f18:	bl	137f8 <__assert_fail@plt+0x28a4>
   13f1c:	str	r0, [r5, #36]	; 0x24
   13f20:	cmn	r0, #1
   13f24:	ble	13f38 <__assert_fail@plt+0x2fe4>
   13f28:	ldrh	r0, [r5, #58]	; 0x3a
   13f2c:	orr	r0, r0, #2
   13f30:	strh	r0, [r5, #58]	; 0x3a
   13f34:	b	13b7c <__assert_fail@plt+0x2c28>
   13f38:	bl	10e4c <__errno_location@plt>
   13f3c:	ldr	r0, [r0]
   13f40:	mov	r1, #7
   13f44:	strh	r1, [r5, #56]	; 0x38
   13f48:	str	r0, [r5, #32]
   13f4c:	b	13b7c <__assert_fail@plt+0x2c28>
   13f50:	mov	r0, r4
   13f54:	mov	r2, #1
   13f58:	bl	14c64 <__assert_fail@plt+0x3d10>
   13f5c:	ldr	r0, [r5, #36]	; 0x24
   13f60:	bl	10f24 <close@plt>
   13f64:	ldrh	r0, [r5, #56]	; 0x38
   13f68:	cmp	r0, #2
   13f6c:	beq	13f94 <__assert_fail@plt+0x3040>
   13f70:	ldr	r0, [r5, #32]
   13f74:	mov	r1, #7
   13f78:	cmp	r0, #0
   13f7c:	movweq	r1, #6
   13f80:	strh	r1, [r5, #56]	; 0x38
   13f84:	bne	13f94 <__assert_fail@plt+0x3040>
   13f88:	mov	r0, r4
   13f8c:	mov	r1, r5
   13f90:	bl	13fac <__assert_fail@plt+0x3058>
   13f94:	ldrb	r0, [r4, #49]	; 0x31
   13f98:	tst	r0, #32
   13f9c:	movne	r5, #0
   13fa0:	mov	r0, r5
   13fa4:	pop	{r4, r5, r6, r7, fp, pc}
   13fa8:	bl	10f18 <abort@plt>
   13fac:	push	{r4, r5, r6, r7, fp, lr}
   13fb0:	add	fp, sp, #16
   13fb4:	sub	sp, sp, #24
   13fb8:	add	lr, r1, #64	; 0x40
   13fbc:	ldrh	r2, [r0, #48]	; 0x30
   13fc0:	movw	r3, #258	; 0x102
   13fc4:	tst	r2, r3
   13fc8:	beq	14000 <__assert_fail@plt+0x30ac>
   13fcc:	ldrd	r2, [lr]
   13fd0:	stm	sp, {r2, r3}
   13fd4:	ldrd	r2, [r1, #160]	; 0xa0
   13fd8:	str	r3, [sp, #12]
   13fdc:	str	r2, [sp, #8]
   13fe0:	ldr	r0, [r0, #56]	; 0x38
   13fe4:	mov	r1, sp
   13fe8:	bl	16b30 <__assert_fail@plt+0x5bdc>
   13fec:	cmp	r0, #0
   13ff0:	beq	14078 <__assert_fail@plt+0x3124>
   13ff4:	bl	13094 <__assert_fail@plt+0x2140>
   13ff8:	sub	sp, fp, #16
   13ffc:	pop	{r4, r5, r6, r7, fp, pc}
   14000:	ldr	r2, [r1, #4]
   14004:	cmp	r2, #0
   14008:	beq	14070 <__assert_fail@plt+0x311c>
   1400c:	ldr	r3, [r2, #48]	; 0x30
   14010:	cmp	r3, #0
   14014:	blt	14070 <__assert_fail@plt+0x311c>
   14018:	ldr	ip, [r0, #56]	; 0x38
   1401c:	ldrd	r4, [ip, #16]
   14020:	orrs	r3, r4, r5
   14024:	beq	14078 <__assert_fail@plt+0x3124>
   14028:	ldrd	r4, [r1, #160]	; 0xa0
   1402c:	ldrd	r6, [ip]
   14030:	eor	r1, r7, r5
   14034:	eor	r3, r6, r4
   14038:	orrs	r1, r3, r1
   1403c:	bne	14070 <__assert_fail@plt+0x311c>
   14040:	ldrd	r4, [lr]
   14044:	ldr	r1, [ip, #8]!
   14048:	eor	r1, r1, r4
   1404c:	ldr	r3, [ip, #4]
   14050:	eor	r3, r3, r5
   14054:	orrs	r1, r1, r3
   14058:	bne	14070 <__assert_fail@plt+0x311c>
   1405c:	ldrd	r4, [r2, #64]	; 0x40
   14060:	strd	r4, [ip]
   14064:	ldr	r0, [r0, #56]	; 0x38
   14068:	ldrd	r2, [r2, #160]	; 0xa0
   1406c:	strd	r2, [r0]
   14070:	sub	sp, fp, #16
   14074:	pop	{r4, r5, r6, r7, fp, pc}
   14078:	bl	10f18 <abort@plt>
   1407c:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   14080:	add	fp, sp, #24
   14084:	sub	sp, sp, #104	; 0x68
   14088:	mov	r7, r3
   1408c:	mov	r4, r2
   14090:	mov	r8, r1
   14094:	mov	r5, r0
   14098:	cmp	r3, #0
   1409c:	beq	140c0 <__assert_fail@plt+0x316c>
   140a0:	movw	r1, #30954	; 0x78ea
   140a4:	movt	r1, #1
   140a8:	mov	r0, r7
   140ac:	bl	10cfc <strcmp@plt>
   140b0:	mov	r6, r0
   140b4:	cmp	r0, #0
   140b8:	movwne	r6, #1
   140bc:	b	140c4 <__assert_fail@plt+0x3170>
   140c0:	mov	r6, #1
   140c4:	ldr	r0, [r5, #48]	; 0x30
   140c8:	tst	r0, #4
   140cc:	bne	14124 <__assert_fail@plt+0x31d0>
   140d0:	mov	r9, #0
   140d4:	cmn	r4, #1
   140d8:	mov	r1, #0
   140dc:	movwgt	r1, #1
   140e0:	orrs	r1, r1, r6
   140e4:	bne	14144 <__assert_fail@plt+0x31f0>
   140e8:	ands	r0, r0, #512	; 0x200
   140ec:	beq	14144 <__assert_fail@plt+0x31f0>
   140f0:	add	r4, r5, #60	; 0x3c
   140f4:	mov	r0, r4
   140f8:	bl	16d24 <__assert_fail@plt+0x5dd0>
   140fc:	cmp	r0, #0
   14100:	bne	1414c <__assert_fail@plt+0x31f8>
   14104:	mov	r0, r4
   14108:	bl	16d70 <__assert_fail@plt+0x5e1c>
   1410c:	cmn	r0, #1
   14110:	ble	1414c <__assert_fail@plt+0x31f8>
   14114:	mov	r4, r0
   14118:	mov	r9, #0
   1411c:	mov	r7, #0
   14120:	b	14168 <__assert_fail@plt+0x3214>
   14124:	mov	r5, #0
   14128:	cmp	r4, #0
   1412c:	blt	14250 <__assert_fail@plt+0x32fc>
   14130:	ands	r0, r0, #512	; 0x200
   14134:	beq	14250 <__assert_fail@plt+0x32fc>
   14138:	mov	r0, r4
   1413c:	bl	10f24 <close@plt>
   14140:	b	14250 <__assert_fail@plt+0x32fc>
   14144:	cmn	r4, #1
   14148:	bgt	14168 <__assert_fail@plt+0x3214>
   1414c:	mov	r0, r5
   14150:	mov	r1, r7
   14154:	bl	137f8 <__assert_fail@plt+0x28a4>
   14158:	cmp	r0, #0
   1415c:	blt	14200 <__assert_fail@plt+0x32ac>
   14160:	mov	r4, r0
   14164:	mov	r9, #1
   14168:	ldrb	r0, [r5, #48]	; 0x30
   1416c:	tst	r0, #2
   14170:	bne	14194 <__assert_fail@plt+0x3240>
   14174:	cmp	r7, #0
   14178:	beq	141dc <__assert_fail@plt+0x3288>
   1417c:	movw	r1, #30954	; 0x78ea
   14180:	movt	r1, #1
   14184:	mov	r0, r7
   14188:	bl	10cfc <strcmp@plt>
   1418c:	cmp	r0, #0
   14190:	bne	141dc <__assert_fail@plt+0x3288>
   14194:	mov	r1, sp
   14198:	mov	r0, r4
   1419c:	bl	1777c <__assert_fail@plt+0x6828>
   141a0:	cmp	r0, #0
   141a4:	bne	1422c <__assert_fail@plt+0x32d8>
   141a8:	ldrd	r0, [r8, #64]	; 0x40
   141ac:	ldm	sp, {r2, r3}
   141b0:	eor	r1, r1, r3
   141b4:	eor	r0, r0, r2
   141b8:	orrs	r0, r0, r1
   141bc:	bne	14220 <__assert_fail@plt+0x32cc>
   141c0:	ldrd	r0, [r8, #160]	; 0xa0
   141c4:	ldr	r2, [sp, #96]	; 0x60
   141c8:	ldr	r3, [sp, #100]	; 0x64
   141cc:	eor	r1, r1, r3
   141d0:	eor	r0, r0, r2
   141d4:	orrs	r0, r0, r1
   141d8:	bne	14220 <__assert_fail@plt+0x32cc>
   141dc:	ldrb	r0, [r5, #49]	; 0x31
   141e0:	tst	r0, #2
   141e4:	bne	14208 <__assert_fail@plt+0x32b4>
   141e8:	mov	r0, r4
   141ec:	bl	10edc <fchdir@plt>
   141f0:	mov	r5, r0
   141f4:	cmp	r9, #0
   141f8:	bne	14238 <__assert_fail@plt+0x32e4>
   141fc:	b	14250 <__assert_fail@plt+0x32fc>
   14200:	mvn	r5, #0
   14204:	b	14250 <__assert_fail@plt+0x32fc>
   14208:	mov	r0, r5
   1420c:	mov	r1, r4
   14210:	mov	r2, r6
   14214:	bl	14c64 <__assert_fail@plt+0x3d10>
   14218:	mov	r5, #0
   1421c:	b	14250 <__assert_fail@plt+0x32fc>
   14220:	bl	10e4c <__errno_location@plt>
   14224:	mov	r1, #2
   14228:	str	r1, [r0]
   1422c:	mvn	r5, #0
   14230:	cmp	r9, #0
   14234:	beq	14250 <__assert_fail@plt+0x32fc>
   14238:	bl	10e4c <__errno_location@plt>
   1423c:	mov	r6, r0
   14240:	ldr	r7, [r0]
   14244:	mov	r0, r4
   14248:	bl	10f24 <close@plt>
   1424c:	str	r7, [r6]
   14250:	mov	r0, r5
   14254:	sub	sp, fp, #24
   14258:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1425c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14260:	add	fp, sp, #28
   14264:	sub	sp, sp, #68	; 0x44
   14268:	mov	r4, r1
   1426c:	ldr	sl, [r0]
   14270:	ldr	r7, [sl, #12]
   14274:	cmp	r7, #0
   14278:	str	r0, [fp, #-36]	; 0xffffffdc
   1427c:	beq	145f0 <__assert_fail@plt+0x369c>
   14280:	mov	r0, r7
   14284:	bl	10eb8 <dirfd@plt>
   14288:	str	r0, [fp, #-32]	; 0xffffffe0
   1428c:	cmn	r0, #1
   14290:	ble	14628 <__assert_fail@plt+0x36d4>
   14294:	ldr	ip, [fp, #-36]	; 0xffffffdc
   14298:	mov	r1, ip
   1429c:	ldr	r0, [r1, #44]!	; 0x2c
   142a0:	str	r1, [fp, #-44]	; 0xffffffd4
   142a4:	mvn	r1, #0
   142a8:	cmp	r0, #0
   142ac:	movweq	r1, #34464	; 0x86a0
   142b0:	movteq	r1, #1
   142b4:	str	r1, [sp, #28]
   142b8:	mov	r0, #1
   142bc:	str	r0, [sp, #4]
   142c0:	str	r4, [sp, #8]
   142c4:	ldr	r1, [sl, #28]
   142c8:	ldr	r0, [sl, #40]	; 0x28
   142cc:	sub	r2, r0, #1
   142d0:	ldrb	r1, [r1, r2]
   142d4:	cmp	r1, #47	; 0x2f
   142d8:	moveq	r0, r2
   142dc:	ldrb	r1, [ip, #48]	; 0x30
   142e0:	mov	r9, #0
   142e4:	tst	r1, #4
   142e8:	mov	r1, #0
   142ec:	str	r1, [sp, #40]	; 0x28
   142f0:	beq	14308 <__assert_fail@plt+0x33b4>
   142f4:	ldr	r1, [ip, #24]
   142f8:	mov	r2, #47	; 0x2f
   142fc:	strb	r2, [r1, r0]!
   14300:	add	r1, r1, #1
   14304:	str	r1, [sp, #40]	; 0x28
   14308:	str	r7, [sp, #12]
   1430c:	add	r1, r0, #1
   14310:	ldr	r4, [sl, #12]
   14314:	cmp	r4, #0
   14318:	str	r1, [fp, #-40]	; 0xffffffd8
   1431c:	beq	14644 <__assert_fail@plt+0x36f0>
   14320:	ldr	r0, [sl, #48]	; 0x30
   14324:	add	r0, r0, #1
   14328:	str	r0, [sp, #24]
   1432c:	ldr	r0, [ip, #36]	; 0x24
   14330:	sub	r0, r0, r1
   14334:	str	r0, [sp, #44]	; 0x2c
   14338:	mov	r6, #0
   1433c:	bl	10e4c <__errno_location@plt>
   14340:	str	r0, [sp, #36]	; 0x24
   14344:	mov	r9, #0
   14348:	mov	r7, #0
   1434c:	mov	r0, #0
   14350:	str	r0, [sp, #48]	; 0x30
   14354:	mov	r0, #0
   14358:	str	r0, [sp, #20]
   1435c:	mov	r0, #0
   14360:	str	r0, [sp, #16]
   14364:	str	sl, [sp, #32]
   14368:	ldr	r0, [sp, #36]	; 0x24
   1436c:	str	r6, [r0]
   14370:	mov	r0, r4
   14374:	bl	10ea0 <readdir64@plt>
   14378:	cmp	r0, #0
   1437c:	beq	1487c <__assert_fail@plt+0x3928>
   14380:	mov	r8, r0
   14384:	mov	r6, r9
   14388:	ldr	r5, [fp, #-36]	; 0xffffffdc
   1438c:	ldrb	r0, [r5, #48]	; 0x30
   14390:	tst	r0, #32
   14394:	ldrbeq	r0, [r8, #19]
   14398:	cmpeq	r0, #46	; 0x2e
   1439c:	beq	14444 <__assert_fail@plt+0x34f0>
   143a0:	add	r4, r8, #19
   143a4:	mov	r0, r4
   143a8:	bl	10e1c <strlen@plt>
   143ac:	mov	sl, r0
   143b0:	mov	r0, r5
   143b4:	mov	r1, r4
   143b8:	mov	r2, sl
   143bc:	bl	13474 <__assert_fail@plt+0x2520>
   143c0:	mov	r9, r0
   143c4:	cmp	r0, #0
   143c8:	beq	14658 <__assert_fail@plt+0x3704>
   143cc:	ldr	r0, [sp, #44]	; 0x2c
   143d0:	cmp	sl, r0
   143d4:	bcs	143ec <__assert_fail@plt+0x3498>
   143d8:	ldr	r2, [fp, #-36]	; 0xffffffdc
   143dc:	ldr	r3, [fp, #-40]	; 0xffffffd8
   143e0:	adds	r0, sl, r3
   143e4:	bcc	14488 <__assert_fail@plt+0x3534>
   143e8:	b	149ec <__assert_fail@plt+0x3a98>
   143ec:	ldr	r0, [fp, #-40]	; 0xffffffd8
   143f0:	add	r0, sl, r0
   143f4:	add	r1, r0, #1
   143f8:	ldr	r5, [fp, #-36]	; 0xffffffdc
   143fc:	ldr	r4, [r5, #24]
   14400:	mov	r0, r5
   14404:	bl	133fc <__assert_fail@plt+0x24a8>
   14408:	cmp	r0, #0
   1440c:	beq	14658 <__assert_fail@plt+0x3704>
   14410:	ldr	r0, [r5, #24]
   14414:	cmp	r4, r0
   14418:	mov	r2, r5
   1441c:	beq	14470 <__assert_fail@plt+0x351c>
   14420:	ldrb	r1, [r2, #48]	; 0x30
   14424:	tst	r1, #4
   14428:	ldr	r1, [sp, #40]	; 0x28
   1442c:	ldr	r3, [fp, #-40]	; 0xffffffd8
   14430:	addne	r1, r0, r3
   14434:	str	r1, [sp, #40]	; 0x28
   14438:	mov	r0, #1
   1443c:	str	r0, [sp, #16]
   14440:	b	14474 <__assert_fail@plt+0x3520>
   14444:	ldrb	r0, [r8, #20]
   14448:	cmp	r0, #0
   1444c:	beq	14460 <__assert_fail@plt+0x350c>
   14450:	cmp	r0, #46	; 0x2e
   14454:	ldrbeq	r0, [r8, #21]
   14458:	cmpeq	r0, #0
   1445c:	bne	143a0 <__assert_fail@plt+0x344c>
   14460:	ldr	sl, [sp, #32]
   14464:	mov	r9, r6
   14468:	mov	r6, #0
   1446c:	b	145d4 <__assert_fail@plt+0x3680>
   14470:	ldr	r3, [fp, #-40]	; 0xffffffd8
   14474:	ldr	r0, [r2, #36]	; 0x24
   14478:	sub	r0, r0, r3
   1447c:	str	r0, [sp, #44]	; 0x2c
   14480:	adds	r0, sl, r3
   14484:	bcs	149ec <__assert_fail@plt+0x3a98>
   14488:	ldr	r1, [sp, #24]
   1448c:	str	r1, [r9, #48]	; 0x30
   14490:	ldr	r1, [r2]
   14494:	str	r0, [r9, #40]	; 0x28
   14498:	str	r1, [r9, #4]
   1449c:	ldrd	r0, [r8]
   144a0:	strd	r0, [r9, #160]	; 0xa0
   144a4:	ldrb	r0, [r2, #48]	; 0x30
   144a8:	tst	r0, #4
   144ac:	ldr	sl, [sp, #32]
   144b0:	mov	r5, r6
   144b4:	bne	144c4 <__assert_fail@plt+0x3570>
   144b8:	add	r0, r9, #168	; 0xa8
   144bc:	str	r0, [r9, #24]
   144c0:	b	144e4 <__assert_fail@plt+0x3590>
   144c4:	ldr	r0, [r9, #28]
   144c8:	ldr	r2, [r9, #52]	; 0x34
   144cc:	str	r0, [r9, #24]
   144d0:	add	r1, r9, #168	; 0xa8
   144d4:	add	r2, r2, #1
   144d8:	ldr	r0, [sp, #40]	; 0x28
   144dc:	bl	10d2c <memmove@plt>
   144e0:	ldr	r2, [fp, #-36]	; 0xffffffdc
   144e4:	ldr	r0, [fp, #-44]	; 0xffffffd4
   144e8:	ldr	r0, [r0]
   144ec:	cmp	r0, #0
   144f0:	beq	14518 <__assert_fail@plt+0x35c4>
   144f4:	ldrb	r0, [r2, #49]	; 0x31
   144f8:	tst	r0, #4
   144fc:	bne	14518 <__assert_fail@plt+0x35c4>
   14500:	mov	r0, r2
   14504:	mov	r1, r9
   14508:	mov	r2, #0
   1450c:	bl	13524 <__assert_fail@plt+0x25d0>
   14510:	strh	r0, [r9, #56]	; 0x38
   14514:	b	14568 <__assert_fail@plt+0x3614>
   14518:	add	r0, r9, #64	; 0x40
   1451c:	ldr	r1, [r2, #48]	; 0x30
   14520:	mov	r4, #0
   14524:	tst	r1, #8
   14528:	beq	1454c <__assert_fail@plt+0x35f8>
   1452c:	ldrb	r2, [r8, #18]
   14530:	orr	r3, r2, #4
   14534:	cmp	r3, #4
   14538:	beq	1454c <__assert_fail@plt+0x35f8>
   1453c:	eor	r2, r2, #10
   14540:	and	r1, r1, #16
   14544:	orrs	r4, r1, r2
   14548:	movwne	r4, #1
   1454c:	mov	r1, #11
   14550:	strh	r1, [r9, #56]	; 0x38
   14554:	ldrb	r1, [r8, #18]
   14558:	bl	14f2c <__assert_fail@plt+0x3fd8>
   1455c:	eor	r1, r4, #1
   14560:	mov	r0, r9
   14564:	bl	134f4 <__assert_fail@plt+0x25a0>
   14568:	mov	r6, #0
   1456c:	str	r6, [r9, #8]
   14570:	cmp	r5, #0
   14574:	mov	r4, r9
   14578:	ldrne	r0, [sp, #48]	; 0x30
   1457c:	strne	r9, [r0, #8]
   14580:	movne	r4, r5
   14584:	movw	r0, #10000	; 0x2710
   14588:	cmp	r7, r0
   1458c:	bne	145b0 <__assert_fail@plt+0x365c>
   14590:	ldr	r0, [fp, #-44]	; 0xffffffd4
   14594:	ldr	r0, [r0]
   14598:	cmp	r0, #0
   1459c:	bne	145b0 <__assert_fail@plt+0x365c>
   145a0:	ldr	r1, [fp, #-32]	; 0xffffffe0
   145a4:	mov	r0, sl
   145a8:	bl	14f4c <__assert_fail@plt+0x3ff8>
   145ac:	str	r0, [sp, #20]
   145b0:	add	r7, r7, #1
   145b4:	ldr	r0, [sp, #28]
   145b8:	cmp	r0, r7
   145bc:	mov	r0, #0
   145c0:	movwls	r0, #15
   145c4:	cmp	r0, #0
   145c8:	bne	14a38 <__assert_fail@plt+0x3ae4>
   145cc:	str	r9, [sp, #48]	; 0x30
   145d0:	mov	r9, r4
   145d4:	ldr	r4, [sl, #12]
   145d8:	cmp	r4, #0
   145dc:	bne	14368 <__assert_fail@plt+0x3414>
   145e0:	ldr	r0, [sp, #16]
   145e4:	tst	r0, #1
   145e8:	ldr	r4, [sp, #8]
   145ec:	b	148c8 <__assert_fail@plt+0x3974>
   145f0:	mov	r2, r0
   145f4:	ldr	r3, [r0, #48]	; 0x30
   145f8:	and	r1, r3, #516	; 0x204
   145fc:	mvn	r0, #99	; 0x63
   14600:	cmp	r1, #512	; 0x200
   14604:	ldreq	r0, [r2, #32]
   14608:	ldr	r1, [sl, #24]
   1460c:	mov	r2, #0
   14610:	tst	r3, #16
   14614:	beq	146ac <__assert_fail@plt+0x3758>
   14618:	tst	r3, #1
   1461c:	bne	146a0 <__assert_fail@plt+0x374c>
   14620:	mov	r2, #32768	; 0x8000
   14624:	b	146ac <__assert_fail@plt+0x3758>
   14628:	ldr	r0, [sl, #12]
   1462c:	bl	10f3c <closedir@plt>
   14630:	mov	r9, #0
   14634:	str	r9, [sl, #12]
   14638:	cmp	r4, #3
   1463c:	beq	146f8 <__assert_fail@plt+0x37a4>
   14640:	b	14aa0 <__assert_fail@plt+0x3b4c>
   14644:	mov	r7, #0
   14648:	mov	r0, #0
   1464c:	str	r0, [sp, #20]
   14650:	ldr	r4, [sp, #8]
   14654:	b	148e0 <__assert_fail@plt+0x398c>
   14658:	ldr	r4, [sp, #36]	; 0x24
   1465c:	ldr	r8, [r4]
   14660:	mov	r0, r9
   14664:	bl	13094 <__assert_fail@plt+0x2140>
   14668:	mov	r0, r6
   1466c:	bl	13828 <__assert_fail@plt+0x28d4>
   14670:	ldr	r7, [sp, #32]
   14674:	ldr	r0, [r7, #12]
   14678:	bl	10f3c <closedir@plt>
   1467c:	mov	r9, #0
   14680:	str	r9, [r7, #12]
   14684:	mov	r0, #7
   14688:	strh	r0, [r7, #56]	; 0x38
   1468c:	ldr	r0, [r5, #48]	; 0x30
   14690:	orr	r0, r0, #8192	; 0x2000
   14694:	str	r0, [r5, #48]	; 0x30
   14698:	str	r8, [r4]
   1469c:	b	14aa0 <__assert_fail@plt+0x3b4c>
   146a0:	ldr	r3, [sl, #48]	; 0x30
   146a4:	cmp	r3, #0
   146a8:	movne	r2, #32768	; 0x8000
   146ac:	sub	r3, fp, #32
   146b0:	bl	16ea0 <__assert_fail@plt+0x5f4c>
   146b4:	str	r0, [sl, #12]
   146b8:	cmp	r0, #0
   146bc:	beq	146ec <__assert_fail@plt+0x3798>
   146c0:	ldrh	r0, [sl, #56]	; 0x38
   146c4:	cmp	r0, #11
   146c8:	bne	14710 <__assert_fail@plt+0x37bc>
   146cc:	ldr	r6, [fp, #-36]	; 0xffffffdc
   146d0:	mov	r0, r6
   146d4:	mov	r1, sl
   146d8:	mov	r2, #0
   146dc:	bl	13524 <__assert_fail@plt+0x25d0>
   146e0:	mov	ip, r6
   146e4:	strh	r0, [sl, #56]	; 0x38
   146e8:	b	14758 <__assert_fail@plt+0x3804>
   146ec:	mov	r9, #0
   146f0:	cmp	r4, #3
   146f4:	bne	14aa0 <__assert_fail@plt+0x3b4c>
   146f8:	mov	r0, #4
   146fc:	strh	r0, [sl, #56]	; 0x38
   14700:	bl	10e4c <__errno_location@plt>
   14704:	ldr	r0, [r0]
   14708:	str	r0, [sl, #32]
   1470c:	b	14aa0 <__assert_fail@plt+0x3b4c>
   14710:	ldr	ip, [fp, #-36]	; 0xffffffdc
   14714:	ldrb	r0, [ip, #49]	; 0x31
   14718:	tst	r0, #1
   1471c:	beq	14758 <__assert_fail@plt+0x3804>
   14720:	mov	r0, ip
   14724:	mov	r1, sl
   14728:	bl	13fac <__assert_fail@plt+0x3058>
   1472c:	mov	r9, #0
   14730:	ldr	r0, [fp, #-36]	; 0xffffffdc
   14734:	mov	r1, sl
   14738:	mov	r2, #0
   1473c:	bl	13524 <__assert_fail@plt+0x25d0>
   14740:	ldr	r0, [fp, #-36]	; 0xffffffdc
   14744:	mov	r1, sl
   14748:	bl	14bac <__assert_fail@plt+0x3c58>
   1474c:	ldr	ip, [fp, #-36]	; 0xffffffdc
   14750:	cmp	r0, #0
   14754:	beq	14a5c <__assert_fail@plt+0x3b08>
   14758:	mov	r1, ip
   1475c:	ldr	r0, [r1, #44]!	; 0x2c
   14760:	str	r1, [fp, #-44]	; 0xffffffd4
   14764:	mvn	r1, #0
   14768:	cmp	r0, #0
   1476c:	movweq	r1, #34464	; 0x86a0
   14770:	movteq	r1, #1
   14774:	str	r1, [sp, #28]
   14778:	mov	r6, #0
   1477c:	cmp	r4, #2
   14780:	beq	147a4 <__assert_fail@plt+0x3850>
   14784:	ldr	r0, [ip, #48]	; 0x30
   14788:	and	r1, r0, #56	; 0x38
   1478c:	mov	r0, #0
   14790:	cmp	r1, #24
   14794:	ldreq	r1, [sl, #84]	; 0x54
   14798:	cmpeq	r1, #2
   1479c:	beq	14aac <__assert_fail@plt+0x3b58>
   147a0:	eor	r6, r0, #1
   147a4:	cmp	r4, #3
   147a8:	beq	147bc <__assert_fail@plt+0x3868>
   147ac:	cmp	r6, #0
   147b0:	bne	147bc <__assert_fail@plt+0x3868>
   147b4:	str	r6, [sp, #4]
   147b8:	b	142c0 <__assert_fail@plt+0x336c>
   147bc:	ldrb	r0, [ip, #49]	; 0x31
   147c0:	ldr	r2, [fp, #-32]	; 0xffffffe0
   147c4:	tst	r0, #2
   147c8:	beq	147e8 <__assert_fail@plt+0x3894>
   147cc:	mov	r0, r2
   147d0:	movw	r1, #1030	; 0x406
   147d4:	mov	r2, #3
   147d8:	bl	17288 <__assert_fail@plt+0x6334>
   147dc:	ldr	ip, [fp, #-36]	; 0xffffffdc
   147e0:	mov	r2, r0
   147e4:	str	r0, [fp, #-32]	; 0xffffffe0
   147e8:	cmp	r2, #0
   147ec:	blt	1480c <__assert_fail@plt+0x38b8>
   147f0:	mov	r0, ip
   147f4:	mov	r1, sl
   147f8:	mov	r3, #0
   147fc:	bl	1407c <__assert_fail@plt+0x3128>
   14800:	ldr	ip, [fp, #-36]	; 0xffffffdc
   14804:	cmp	r0, #0
   14808:	beq	142b8 <__assert_fail@plt+0x3364>
   1480c:	subs	r0, r4, #3
   14810:	movwne	r0, #1
   14814:	eor	r1, r6, #1
   14818:	orrs	r0, r0, r1
   1481c:	bne	1482c <__assert_fail@plt+0x38d8>
   14820:	bl	10e4c <__errno_location@plt>
   14824:	ldr	r0, [r0]
   14828:	str	r0, [sl, #32]
   1482c:	ldrh	r0, [sl, #58]	; 0x3a
   14830:	orr	r0, r0, #1
   14834:	strh	r0, [sl, #58]	; 0x3a
   14838:	ldr	r0, [sl, #12]
   1483c:	bl	10f3c <closedir@plt>
   14840:	mov	r6, #0
   14844:	str	r6, [sl, #12]
   14848:	ldr	ip, [fp, #-36]	; 0xffffffdc
   1484c:	ldr	r0, [ip, #48]	; 0x30
   14850:	tst	r0, #512	; 0x200
   14854:	beq	1486c <__assert_fail@plt+0x3918>
   14858:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1485c:	cmp	r0, #0
   14860:	blt	1486c <__assert_fail@plt+0x3918>
   14864:	bl	10f24 <close@plt>
   14868:	ldr	ip, [fp, #-36]	; 0xffffffdc
   1486c:	mov	r0, #0
   14870:	str	r0, [sp, #4]
   14874:	str	r6, [sl, #12]
   14878:	b	142c0 <__assert_fail@plt+0x336c>
   1487c:	ldr	r0, [sp, #36]	; 0x24
   14880:	ldr	r0, [r0]
   14884:	cmp	r0, #0
   14888:	beq	148a4 <__assert_fail@plt+0x3950>
   1488c:	str	r0, [sl, #32]
   14890:	ldr	r0, [sp, #12]
   14894:	orrs	r0, r0, r7
   14898:	mov	r0, #4
   1489c:	movwne	r0, #7
   148a0:	strh	r0, [sl, #56]	; 0x38
   148a4:	ldr	r0, [sl, #12]
   148a8:	cmp	r0, #0
   148ac:	ldr	r4, [sp, #8]
   148b0:	beq	14a48 <__assert_fail@plt+0x3af4>
   148b4:	bl	10f3c <closedir@plt>
   148b8:	mov	r0, #0
   148bc:	str	r0, [sl, #12]
   148c0:	ldr	r0, [sp, #16]
   148c4:	tst	r0, #1
   148c8:	ldr	ip, [fp, #-36]	; 0xffffffdc
   148cc:	beq	148e0 <__assert_fail@plt+0x398c>
   148d0:	mov	r0, ip
   148d4:	mov	r1, r9
   148d8:	bl	14f90 <__assert_fail@plt+0x403c>
   148dc:	ldr	ip, [fp, #-36]	; 0xffffffdc
   148e0:	ldrb	r0, [ip, #48]	; 0x30
   148e4:	tst	r0, #4
   148e8:	beq	14914 <__assert_fail@plt+0x39c0>
   148ec:	ldr	r0, [ip, #36]	; 0x24
   148f0:	ldr	r2, [sp, #40]	; 0x28
   148f4:	sub	r1, r2, #1
   148f8:	ldr	r3, [fp, #-40]	; 0xffffffd8
   148fc:	cmp	r3, r0
   14900:	moveq	r2, r1
   14904:	cmp	r7, #0
   14908:	moveq	r2, r1
   1490c:	mov	r0, #0
   14910:	strb	r0, [r2]
   14914:	ldr	r0, [sp, #12]
   14918:	cmp	r0, #0
   1491c:	ldreq	r0, [sp, #4]
   14920:	eorseq	r0, r0, #1
   14924:	beq	14950 <__assert_fail@plt+0x39fc>
   14928:	cmp	r7, #0
   1492c:	bne	14984 <__assert_fail@plt+0x3a30>
   14930:	cmp	r4, #3
   14934:	bne	14a94 <__assert_fail@plt+0x3b40>
   14938:	ldrh	r0, [sl, #56]	; 0x38
   1493c:	cmp	r0, #4
   14940:	cmpne	r0, #7
   14944:	movne	r0, #6
   14948:	strhne	r0, [sl, #56]	; 0x38
   1494c:	b	14a94 <__assert_fail@plt+0x3b40>
   14950:	cmp	r4, #1
   14954:	cmpne	r7, #0
   14958:	bne	14984 <__assert_fail@plt+0x3a30>
   1495c:	ldr	r0, [sl, #48]	; 0x30
   14960:	cmp	r0, #0
   14964:	beq	14a6c <__assert_fail@plt+0x3b18>
   14968:	ldr	r1, [sl, #4]
   1496c:	movw	r3, #30954	; 0x78ea
   14970:	movt	r3, #1
   14974:	mov	r0, ip
   14978:	mvn	r2, #0
   1497c:	bl	1407c <__assert_fail@plt+0x3128>
   14980:	b	14a74 <__assert_fail@plt+0x3b20>
   14984:	ldr	r0, [sp, #20]
   14988:	tst	r0, #1
   1498c:	beq	149bc <__assert_fail@plt+0x3a68>
   14990:	movw	r0, #20504	; 0x5018
   14994:	movt	r0, #1
   14998:	str	r0, [ip, #44]	; 0x2c
   1499c:	mov	r0, ip
   149a0:	mov	r1, r9
   149a4:	mov	r2, r7
   149a8:	bl	1368c <__assert_fail@plt+0x2738>
   149ac:	ldr	ip, [fp, #-36]	; 0xffffffdc
   149b0:	mov	r9, r0
   149b4:	mov	r0, #0
   149b8:	str	r0, [ip, #44]	; 0x2c
   149bc:	cmp	r7, #2
   149c0:	bcc	14aa0 <__assert_fail@plt+0x3b4c>
   149c4:	ldr	r0, [fp, #-44]	; 0xffffffd4
   149c8:	ldr	r0, [r0]
   149cc:	cmp	r0, #0
   149d0:	beq	14aa0 <__assert_fail@plt+0x3b4c>
   149d4:	mov	r0, ip
   149d8:	mov	r1, r9
   149dc:	mov	r2, r7
   149e0:	bl	1368c <__assert_fail@plt+0x2738>
   149e4:	mov	r9, r0
   149e8:	b	14aa0 <__assert_fail@plt+0x3b4c>
   149ec:	mov	r0, r9
   149f0:	mov	r4, r2
   149f4:	bl	13094 <__assert_fail@plt+0x2140>
   149f8:	mov	r0, r6
   149fc:	bl	13828 <__assert_fail@plt+0x28d4>
   14a00:	ldr	r5, [sp, #32]
   14a04:	ldr	r0, [r5, #12]
   14a08:	bl	10f3c <closedir@plt>
   14a0c:	mov	r9, #0
   14a10:	str	r9, [r5, #12]
   14a14:	mov	r0, #7
   14a18:	strh	r0, [r5, #56]	; 0x38
   14a1c:	ldr	r0, [r4, #48]	; 0x30
   14a20:	orr	r0, r0, #8192	; 0x2000
   14a24:	str	r0, [r4, #48]	; 0x30
   14a28:	mov	r0, #36	; 0x24
   14a2c:	ldr	r1, [sp, #36]	; 0x24
   14a30:	str	r0, [r1]
   14a34:	b	14aa0 <__assert_fail@plt+0x3b4c>
   14a38:	cmp	r0, #15
   14a3c:	bne	14a9c <__assert_fail@plt+0x3b48>
   14a40:	mov	r9, r4
   14a44:	ldr	r4, [sp, #8]
   14a48:	ldr	ip, [fp, #-36]	; 0xffffffdc
   14a4c:	ldr	r0, [sp, #16]
   14a50:	tst	r0, #1
   14a54:	bne	148d0 <__assert_fail@plt+0x397c>
   14a58:	b	148e0 <__assert_fail@plt+0x398c>
   14a5c:	bl	10e4c <__errno_location@plt>
   14a60:	mov	r1, #12
   14a64:	str	r1, [r0]
   14a68:	b	14aa0 <__assert_fail@plt+0x3b4c>
   14a6c:	mov	r0, ip
   14a70:	bl	14ac8 <__assert_fail@plt+0x3b74>
   14a74:	ldr	ip, [fp, #-36]	; 0xffffffdc
   14a78:	cmp	r0, #0
   14a7c:	beq	14928 <__assert_fail@plt+0x39d4>
   14a80:	mov	r0, #7
   14a84:	strh	r0, [sl, #56]	; 0x38
   14a88:	ldr	r0, [ip, #48]	; 0x30
   14a8c:	orr	r0, r0, #8192	; 0x2000
   14a90:	str	r0, [ip, #48]	; 0x30
   14a94:	mov	r0, r9
   14a98:	bl	13828 <__assert_fail@plt+0x28d4>
   14a9c:	mov	r9, #0
   14aa0:	mov	r0, r9
   14aa4:	sub	sp, fp, #28
   14aa8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14aac:	ldr	r1, [fp, #-32]	; 0xffffffe0
   14ab0:	mov	r0, sl
   14ab4:	bl	14ec4 <__assert_fail@plt+0x3f70>
   14ab8:	ldr	ip, [fp, #-36]	; 0xffffffdc
   14abc:	cmp	r0, #0
   14ac0:	movwne	r0, #1
   14ac4:	b	147a0 <__assert_fail@plt+0x384c>
   14ac8:	push	{r4, r5, fp, lr}
   14acc:	add	fp, sp, #8
   14ad0:	mov	r4, r0
   14ad4:	ldr	r0, [r0, #48]	; 0x30
   14ad8:	mov	r5, #0
   14adc:	tst	r0, #4
   14ae0:	bne	14b14 <__assert_fail@plt+0x3bc0>
   14ae4:	tst	r0, #512	; 0x200
   14ae8:	bne	14b04 <__assert_fail@plt+0x3bb0>
   14aec:	ldr	r0, [r4, #28]
   14af0:	bl	10edc <fchdir@plt>
   14af4:	mov	r5, r0
   14af8:	cmp	r0, #0
   14afc:	movwne	r5, #1
   14b00:	b	14b14 <__assert_fail@plt+0x3bc0>
   14b04:	mov	r0, r4
   14b08:	mvn	r1, #99	; 0x63
   14b0c:	mov	r2, #1
   14b10:	bl	14c64 <__assert_fail@plt+0x3d10>
   14b14:	add	r0, r4, #60	; 0x3c
   14b18:	bl	13994 <__assert_fail@plt+0x2a40>
   14b1c:	mov	r0, r5
   14b20:	pop	{r4, r5, fp, pc}
   14b24:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   14b28:	add	fp, sp, #24
   14b2c:	mov	r4, r1
   14b30:	mov	r8, r0
   14b34:	ldr	r1, [r1, #52]	; 0x34
   14b38:	str	r1, [r4, #40]	; 0x28
   14b3c:	ldr	r0, [r0, #24]
   14b40:	add	r6, r4, #168	; 0xa8
   14b44:	add	r2, r1, #1
   14b48:	mov	r1, r6
   14b4c:	bl	10d2c <memmove@plt>
   14b50:	mov	r0, r6
   14b54:	mov	r1, #47	; 0x2f
   14b58:	bl	10e88 <strrchr@plt>
   14b5c:	cmp	r0, #0
   14b60:	beq	14b9c <__assert_fail@plt+0x3c48>
   14b64:	cmp	r0, r6
   14b68:	bne	14b78 <__assert_fail@plt+0x3c24>
   14b6c:	ldrb	r1, [r0, #1]
   14b70:	cmp	r1, #0
   14b74:	beq	14b9c <__assert_fail@plt+0x3c48>
   14b78:	add	r7, r0, #1
   14b7c:	mov	r0, r7
   14b80:	bl	10e1c <strlen@plt>
   14b84:	mov	r5, r0
   14b88:	add	r2, r0, #1
   14b8c:	mov	r0, r6
   14b90:	mov	r1, r7
   14b94:	bl	10d2c <memmove@plt>
   14b98:	str	r5, [r4, #52]	; 0x34
   14b9c:	ldr	r0, [r8, #24]
   14ba0:	str	r0, [r4, #24]
   14ba4:	str	r0, [r4, #28]
   14ba8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14bac:	push	{r4, r5, r6, r7, fp, lr}
   14bb0:	add	fp, sp, #16
   14bb4:	mov	r4, r1
   14bb8:	mov	r6, r0
   14bbc:	ldrh	r0, [r0, #48]	; 0x30
   14bc0:	movw	r1, #258	; 0x102
   14bc4:	tst	r0, r1
   14bc8:	beq	14c3c <__assert_fail@plt+0x3ce8>
   14bcc:	mov	r0, #24
   14bd0:	bl	16f94 <__assert_fail@plt+0x6040>
   14bd4:	mov	r5, #0
   14bd8:	cmp	r0, #0
   14bdc:	beq	14c5c <__assert_fail@plt+0x3d08>
   14be0:	mov	r7, r0
   14be4:	ldrd	r0, [r4, #64]	; 0x40
   14be8:	stm	r7, {r0, r1}
   14bec:	ldrd	r0, [r4, #160]	; 0xa0
   14bf0:	add	r2, r7, #8
   14bf4:	stm	r2, {r0, r1, r4}
   14bf8:	ldr	r0, [r6, #56]	; 0x38
   14bfc:	mov	r1, r7
   14c00:	bl	16af0 <__assert_fail@plt+0x5b9c>
   14c04:	cmp	r0, r7
   14c08:	beq	14c30 <__assert_fail@plt+0x3cdc>
   14c0c:	mov	r6, r0
   14c10:	mov	r0, r7
   14c14:	bl	13094 <__assert_fail@plt+0x2140>
   14c18:	cmp	r6, #0
   14c1c:	beq	14c5c <__assert_fail@plt+0x3d08>
   14c20:	ldr	r0, [r6, #16]
   14c24:	mov	r1, #2
   14c28:	strh	r1, [r4, #56]	; 0x38
   14c2c:	str	r0, [r4]
   14c30:	mov	r5, #1
   14c34:	mov	r0, r5
   14c38:	pop	{r4, r5, r6, r7, fp, pc}
   14c3c:	ldr	r0, [r6, #56]	; 0x38
   14c40:	add	r1, r4, #64	; 0x40
   14c44:	bl	17188 <__assert_fail@plt+0x6234>
   14c48:	mov	r5, #1
   14c4c:	cmp	r0, #0
   14c50:	movne	r0, #2
   14c54:	strhne	r0, [r4, #56]	; 0x38
   14c58:	strne	r4, [r4]
   14c5c:	mov	r0, r5
   14c60:	pop	{r4, r5, r6, r7, fp, pc}
   14c64:	push	{r4, r5, fp, lr}
   14c68:	add	fp, sp, #8
   14c6c:	mov	r4, r1
   14c70:	mov	r5, r0
   14c74:	ldr	r1, [r0, #32]
   14c78:	cmp	r1, r4
   14c7c:	bne	14c88 <__assert_fail@plt+0x3d34>
   14c80:	cmn	r1, #100	; 0x64
   14c84:	bne	14cc8 <__assert_fail@plt+0x3d74>
   14c88:	cmp	r2, #0
   14c8c:	beq	14ca4 <__assert_fail@plt+0x3d50>
   14c90:	add	r0, r5, #60	; 0x3c
   14c94:	bl	16d2c <__assert_fail@plt+0x5dd8>
   14c98:	cmp	r0, #0
   14c9c:	bge	14cbc <__assert_fail@plt+0x3d68>
   14ca0:	b	14cc0 <__assert_fail@plt+0x3d6c>
   14ca4:	cmp	r1, #0
   14ca8:	blt	14cc0 <__assert_fail@plt+0x3d6c>
   14cac:	ldr	r0, [r5, #48]	; 0x30
   14cb0:	ands	r0, r0, #4
   14cb4:	bne	14cc0 <__assert_fail@plt+0x3d6c>
   14cb8:	mov	r0, r1
   14cbc:	bl	10f24 <close@plt>
   14cc0:	str	r4, [r5, #32]
   14cc4:	pop	{r4, r5, fp, pc}
   14cc8:	bl	10f18 <abort@plt>
   14ccc:	cmp	r2, #5
   14cd0:	strhcc	r2, [r1, #60]	; 0x3c
   14cd4:	movcc	r0, #0
   14cd8:	bxcc	lr
   14cdc:	push	{fp, lr}
   14ce0:	mov	fp, sp
   14ce4:	bl	10e4c <__errno_location@plt>
   14ce8:	mov	r1, #22
   14cec:	str	r1, [r0]
   14cf0:	mov	r0, #1
   14cf4:	pop	{fp, pc}
   14cf8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14cfc:	add	fp, sp, #28
   14d00:	sub	sp, sp, #4
   14d04:	mov	r5, r0
   14d08:	orr	r0, r1, #4096	; 0x1000
   14d0c:	cmp	r0, #4096	; 0x1000
   14d10:	bne	14d50 <__assert_fail@plt+0x3dfc>
   14d14:	mov	r7, r1
   14d18:	ldr	r6, [r5]
   14d1c:	bl	10e4c <__errno_location@plt>
   14d20:	mov	sl, r0
   14d24:	mov	r4, #0
   14d28:	str	r4, [r0]
   14d2c:	ldrb	r0, [r5, #49]	; 0x31
   14d30:	tst	r0, #32
   14d34:	bne	14d60 <__assert_fail@plt+0x3e0c>
   14d38:	ldrh	r0, [r6, #56]	; 0x38
   14d3c:	cmp	r0, #1
   14d40:	beq	14d6c <__assert_fail@plt+0x3e18>
   14d44:	cmp	r0, #9
   14d48:	ldreq	r4, [r6, #8]
   14d4c:	b	14d60 <__assert_fail@plt+0x3e0c>
   14d50:	bl	10e4c <__errno_location@plt>
   14d54:	mov	r1, #22
   14d58:	str	r1, [r0]
   14d5c:	mov	r4, #0
   14d60:	mov	r0, r4
   14d64:	sub	sp, fp, #28
   14d68:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14d6c:	ldr	r0, [r5, #4]
   14d70:	cmp	r0, #0
   14d74:	blne	13828 <__assert_fail@plt+0x28d4>
   14d78:	mov	r9, #1
   14d7c:	cmp	r7, #4096	; 0x1000
   14d80:	ldreq	r0, [r5, #48]	; 0x30
   14d84:	orreq	r0, r0, #4096	; 0x1000
   14d88:	streq	r0, [r5, #48]	; 0x30
   14d8c:	moveq	r9, #2
   14d90:	ldr	r0, [r6, #48]	; 0x30
   14d94:	cmp	r0, #0
   14d98:	bne	14e14 <__assert_fail@plt+0x3ec0>
   14d9c:	ldr	r0, [r6, #24]
   14da0:	ldrb	r0, [r0]
   14da4:	cmp	r0, #47	; 0x2f
   14da8:	beq	14e14 <__assert_fail@plt+0x3ec0>
   14dac:	ldrb	r0, [r5, #48]	; 0x30
   14db0:	tst	r0, #4
   14db4:	bne	14e14 <__assert_fail@plt+0x3ec0>
   14db8:	movw	r1, #30955	; 0x78eb
   14dbc:	movt	r1, #1
   14dc0:	mov	r0, r5
   14dc4:	bl	137f8 <__assert_fail@plt+0x28a4>
   14dc8:	cmn	r0, #1
   14dcc:	ble	14e2c <__assert_fail@plt+0x3ed8>
   14dd0:	mov	r8, r0
   14dd4:	mov	r0, r5
   14dd8:	mov	r1, r9
   14ddc:	bl	1425c <__assert_fail@plt+0x3308>
   14de0:	str	r0, [r5, #4]
   14de4:	ldrb	r0, [r5, #49]	; 0x31
   14de8:	tst	r0, #2
   14dec:	bne	14e38 <__assert_fail@plt+0x3ee4>
   14df0:	mov	r0, r8
   14df4:	bl	10edc <fchdir@plt>
   14df8:	cmp	r0, #0
   14dfc:	beq	14e4c <__assert_fail@plt+0x3ef8>
   14e00:	ldr	r5, [sl]
   14e04:	mov	r0, r8
   14e08:	bl	10f24 <close@plt>
   14e0c:	str	r5, [sl]
   14e10:	b	14d60 <__assert_fail@plt+0x3e0c>
   14e14:	mov	r0, r5
   14e18:	mov	r1, r9
   14e1c:	bl	1425c <__assert_fail@plt+0x3308>
   14e20:	mov	r4, r0
   14e24:	str	r0, [r5, #4]
   14e28:	b	14d60 <__assert_fail@plt+0x3e0c>
   14e2c:	mov	r4, #0
   14e30:	str	r4, [r5, #4]
   14e34:	b	14d60 <__assert_fail@plt+0x3e0c>
   14e38:	mov	r0, r5
   14e3c:	mov	r1, r8
   14e40:	mov	r2, #1
   14e44:	bl	14c64 <__assert_fail@plt+0x3d10>
   14e48:	b	14e54 <__assert_fail@plt+0x3f00>
   14e4c:	mov	r0, r8
   14e50:	bl	10f24 <close@plt>
   14e54:	ldr	r4, [r5, #4]
   14e58:	b	14d60 <__assert_fail@plt+0x3e0c>
   14e5c:	push	{fp, lr}
   14e60:	mov	fp, sp
   14e64:	mov	r2, r1
   14e68:	ldrd	r0, [r0, #8]
   14e6c:	mov	r3, #0
   14e70:	bl	17594 <__assert_fail@plt+0x6640>
   14e74:	mov	r0, r2
   14e78:	pop	{fp, pc}
   14e7c:	push	{r4, r5, fp, lr}
   14e80:	add	fp, sp, #8
   14e84:	ldrd	r2, [r1, #8]
   14e88:	ldrd	r4, [r0, #8]
   14e8c:	eor	r3, r5, r3
   14e90:	eor	r2, r4, r2
   14e94:	orrs	r2, r2, r3
   14e98:	mov	r2, #0
   14e9c:	bne	14ebc <__assert_fail@plt+0x3f68>
   14ea0:	ldrd	r2, [r1]
   14ea4:	ldrd	r0, [r0]
   14ea8:	eor	r1, r1, r3
   14eac:	eor	r0, r0, r2
   14eb0:	orr	r0, r0, r1
   14eb4:	clz	r0, r0
   14eb8:	lsr	r2, r0, #5
   14ebc:	mov	r0, r2
   14ec0:	pop	{r4, r5, fp, pc}
   14ec4:	push	{fp, lr}
   14ec8:	mov	fp, sp
   14ecc:	bl	15050 <__assert_fail@plt+0x40fc>
   14ed0:	mov	r1, r0
   14ed4:	mov	r0, #0
   14ed8:	movw	r2, #26984	; 0x6968
   14edc:	cmp	r1, r2
   14ee0:	ble	14f10 <__assert_fail@plt+0x3fbc>
   14ee4:	movw	r2, #26985	; 0x6969
   14ee8:	cmp	r1, r2
   14eec:	movwne	r2, #40864	; 0x9fa0
   14ef0:	cmpne	r1, r2
   14ef4:	beq	14f28 <__assert_fail@plt+0x3fd4>
   14ef8:	movw	r2, #16719	; 0x414f
   14efc:	movt	r2, #21318	; 0x5346
   14f00:	cmp	r1, r2
   14f04:	popeq	{fp, pc}
   14f08:	mov	r0, #1
   14f0c:	pop	{fp, pc}
   14f10:	movw	r2, #19778	; 0x4d42
   14f14:	movt	r2, #65363	; 0xff53
   14f18:	cmp	r1, r2
   14f1c:	beq	14f28 <__assert_fail@plt+0x3fd4>
   14f20:	cmp	r1, #0
   14f24:	movne	r0, #1
   14f28:	pop	{fp, pc}
   14f2c:	sub	r2, r1, #1
   14f30:	mov	r1, #0
   14f34:	cmp	r2, #11
   14f38:	movwls	r1, #30960	; 0x78f0
   14f3c:	movtls	r1, #1
   14f40:	ldrls	r1, [r1, r2, lsl #2]
   14f44:	str	r1, [r0, #16]
   14f48:	bx	lr
   14f4c:	push	{fp, lr}
   14f50:	mov	fp, sp
   14f54:	bl	15050 <__assert_fail@plt+0x40fc>
   14f58:	mov	r1, r0
   14f5c:	mov	r0, #0
   14f60:	movw	r2, #19778	; 0x4d42
   14f64:	movt	r2, #65363	; 0xff53
   14f68:	cmp	r1, r2
   14f6c:	movwne	r2, #26985	; 0x6969
   14f70:	cmpne	r1, r2
   14f74:	bne	14f7c <__assert_fail@plt+0x4028>
   14f78:	pop	{fp, pc}
   14f7c:	movw	r2, #6548	; 0x1994
   14f80:	movt	r2, #258	; 0x102
   14f84:	cmp	r1, r2
   14f88:	movne	r0, #1
   14f8c:	pop	{fp, pc}
   14f90:	ldr	r2, [r0, #4]
   14f94:	ldr	ip, [r0, #24]
   14f98:	cmp	r2, #0
   14f9c:	beq	14fcc <__assert_fail@plt+0x4078>
   14fa0:	ldr	r3, [r2, #24]
   14fa4:	add	r0, r2, #168	; 0xa8
   14fa8:	cmp	r3, r0
   14fac:	ldrne	r0, [r2, #28]
   14fb0:	subne	r0, r3, r0
   14fb4:	addne	r0, ip, r0
   14fb8:	strne	r0, [r2, #24]
   14fbc:	str	ip, [r2, #28]
   14fc0:	ldr	r2, [r2, #8]
   14fc4:	cmp	r2, #0
   14fc8:	bne	14fa0 <__assert_fail@plt+0x404c>
   14fcc:	ldr	r2, [r1, #48]	; 0x30
   14fd0:	cmp	r2, #0
   14fd4:	bxlt	lr
   14fd8:	ldr	r2, [r1, #24]
   14fdc:	add	r0, r1, #168	; 0xa8
   14fe0:	cmp	r2, r0
   14fe4:	ldrne	r0, [r1, #28]
   14fe8:	subne	r0, r2, r0
   14fec:	addne	r0, ip, r0
   14ff0:	strne	r0, [r1, #24]
   14ff4:	str	ip, [r1, #28]
   14ff8:	ldr	r2, [r1, #8]
   14ffc:	cmp	r2, #0
   15000:	ldreq	r2, [r1, #4]
   15004:	ldr	r0, [r2, #48]	; 0x30
   15008:	cmn	r0, #1
   1500c:	mov	r1, r2
   15010:	bgt	14fd8 <__assert_fail@plt+0x4084>
   15014:	bx	lr
   15018:	push	{r4, r5, fp, lr}
   1501c:	add	fp, sp, #8
   15020:	ldr	r0, [r0]
   15024:	ldrd	r2, [r0, #160]	; 0xa0
   15028:	ldr	r0, [r1]
   1502c:	ldrd	r4, [r0, #160]	; 0xa0
   15030:	mov	r0, #0
   15034:	subs	r1, r4, r2
   15038:	sbcs	r1, r5, r3
   1503c:	movwcc	r0, #1
   15040:	subs	r1, r2, r4
   15044:	sbcs	r1, r3, r5
   15048:	subcc	r0, r0, #1
   1504c:	pop	{r4, r5, fp, pc}
   15050:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   15054:	add	fp, sp, #24
   15058:	sub	sp, sp, #96	; 0x60
   1505c:	mov	r4, r0
   15060:	ldr	r7, [r0, #44]	; 0x2c
   15064:	ldrb	r0, [r7, #49]	; 0x31
   15068:	mov	r5, #0
   1506c:	tst	r0, #2
   15070:	beq	1516c <__assert_fail@plt+0x4218>
   15074:	mov	r9, r1
   15078:	ldr	r6, [r7, #52]	; 0x34
   1507c:	cmp	r6, #0
   15080:	bne	150c0 <__assert_fail@plt+0x416c>
   15084:	movw	r0, #12436	; 0x3094
   15088:	movt	r0, #1
   1508c:	str	r0, [sp]
   15090:	mov	r8, #0
   15094:	movw	r2, #20856	; 0x5178
   15098:	movt	r2, #1
   1509c:	movw	r3, #20888	; 0x5198
   150a0:	movt	r3, #1
   150a4:	mov	r0, #13
   150a8:	mov	r1, #0
   150ac:	bl	16260 <__assert_fail@plt+0x530c>
   150b0:	mov	r6, r0
   150b4:	str	r0, [r7, #52]	; 0x34
   150b8:	cmp	r0, #0
   150bc:	beq	150f8 <__assert_fail@plt+0x41a4>
   150c0:	ldrd	r0, [r4, #64]	; 0x40
   150c4:	str	r1, [sp, #12]
   150c8:	str	r0, [sp, #8]
   150cc:	add	r1, sp, #8
   150d0:	mov	r0, r6
   150d4:	bl	15fd8 <__assert_fail@plt+0x5084>
   150d8:	cmp	r0, #0
   150dc:	beq	150e8 <__assert_fail@plt+0x4194>
   150e0:	ldr	r5, [r0, #8]
   150e4:	b	1516c <__assert_fail@plt+0x4218>
   150e8:	mov	r8, #1
   150ec:	cmp	r9, #0
   150f0:	bge	15104 <__assert_fail@plt+0x41b0>
   150f4:	b	1516c <__assert_fail@plt+0x4218>
   150f8:	mov	r6, #0
   150fc:	cmp	r9, #0
   15100:	blt	1516c <__assert_fail@plt+0x4218>
   15104:	add	r1, sp, #8
   15108:	mov	r0, r9
   1510c:	bl	10cd8 <fstatfs64@plt>
   15110:	cmp	r0, #0
   15114:	bne	1516c <__assert_fail@plt+0x4218>
   15118:	cmp	r8, #0
   1511c:	beq	15168 <__assert_fail@plt+0x4214>
   15120:	mov	r0, #16
   15124:	bl	16f94 <__assert_fail@plt+0x6040>
   15128:	cmp	r0, #0
   1512c:	beq	15168 <__assert_fail@plt+0x4214>
   15130:	mov	r5, r0
   15134:	ldrd	r0, [r4, #64]	; 0x40
   15138:	ldr	r2, [sp, #8]
   1513c:	stm	r5, {r0, r1, r2}
   15140:	mov	r0, r6
   15144:	mov	r1, r5
   15148:	bl	16af0 <__assert_fail@plt+0x5b9c>
   1514c:	cmp	r0, #0
   15150:	beq	15160 <__assert_fail@plt+0x420c>
   15154:	cmp	r0, r5
   15158:	beq	15168 <__assert_fail@plt+0x4214>
   1515c:	bl	10f18 <abort@plt>
   15160:	mov	r0, r5
   15164:	bl	13094 <__assert_fail@plt+0x2140>
   15168:	ldr	r5, [sp, #8]
   1516c:	mov	r0, r5
   15170:	sub	sp, fp, #24
   15174:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   15178:	push	{fp, lr}
   1517c:	mov	fp, sp
   15180:	mov	r2, r1
   15184:	ldrd	r0, [r0]
   15188:	mov	r3, #0
   1518c:	bl	17594 <__assert_fail@plt+0x6640>
   15190:	mov	r0, r2
   15194:	pop	{fp, pc}
   15198:	ldrd	r2, [r1]
   1519c:	ldrd	r0, [r0]
   151a0:	eor	r1, r1, r3
   151a4:	eor	r0, r0, r2
   151a8:	orr	r0, r0, r1
   151ac:	clz	r0, r0
   151b0:	lsr	r0, r0, #5
   151b4:	bx	lr
   151b8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   151bc:	add	fp, sp, #28
   151c0:	sub	sp, sp, #28
   151c4:	mvn	r8, #0
   151c8:	cmp	r0, #1
   151cc:	blt	15634 <__assert_fail@plt+0x46e0>
   151d0:	mov	r9, r3
   151d4:	mov	sl, r2
   151d8:	mov	r7, r1
   151dc:	mov	r5, r0
   151e0:	ldr	r4, [fp, #16]
   151e4:	ldm	r4, {r0, r6}
   151e8:	mov	r1, #0
   151ec:	str	r1, [r4, #12]
   151f0:	cmp	r0, #0
   151f4:	ldrne	r0, [r4, #16]
   151f8:	cmpne	r0, #0
   151fc:	bne	15218 <__assert_fail@plt+0x42c4>
   15200:	ldr	r2, [fp, #20]
   15204:	mov	r0, sl
   15208:	mov	r1, r4
   1520c:	bl	15688 <__assert_fail@plt+0x4734>
   15210:	mov	sl, r0
   15214:	b	15228 <__assert_fail@plt+0x42d4>
   15218:	ldrb	r0, [sl]
   1521c:	cmp	r0, #45	; 0x2d
   15220:	cmpne	r0, #43	; 0x2b
   15224:	addeq	sl, sl, #1
   15228:	ldrb	r0, [sl]
   1522c:	subs	r0, r0, #58	; 0x3a
   15230:	movne	r0, r6
   15234:	str	r0, [sp, #24]
   15238:	ldr	r0, [r4, #20]
   1523c:	cmp	r0, #0
   15240:	ldrbne	r0, [r0]
   15244:	cmpne	r0, #0
   15248:	bne	15470 <__assert_fail@plt+0x451c>
   1524c:	ldr	r0, [r4]
   15250:	ldr	r1, [r4, #32]
   15254:	cmp	r1, r0
   15258:	strgt	r0, [r4, #32]
   1525c:	ldr	r1, [r4, #28]
   15260:	cmp	r1, r0
   15264:	strgt	r0, [r4, #28]
   15268:	ldr	r1, [r4, #24]
   1526c:	cmp	r1, #1
   15270:	bne	152e0 <__assert_fail@plt+0x438c>
   15274:	ldr	r2, [r4, #28]
   15278:	ldr	r1, [r4, #32]
   1527c:	cmp	r2, r1
   15280:	cmpne	r1, r0
   15284:	bne	15294 <__assert_fail@plt+0x4340>
   15288:	cmp	r1, r0
   1528c:	strne	r0, [r4, #28]
   15290:	b	152a0 <__assert_fail@plt+0x434c>
   15294:	mov	r0, r7
   15298:	mov	r1, r4
   1529c:	bl	1571c <__assert_fail@plt+0x47c8>
   152a0:	ldr	r0, [r4]
   152a4:	cmp	r0, r5
   152a8:	blt	152c0 <__assert_fail@plt+0x436c>
   152ac:	b	152dc <__assert_fail@plt+0x4388>
   152b0:	add	r0, r0, #1
   152b4:	str	r0, [r4]
   152b8:	cmp	r0, r5
   152bc:	bge	152dc <__assert_fail@plt+0x4388>
   152c0:	ldr	r1, [r7, r0, lsl #2]
   152c4:	ldrb	r2, [r1]
   152c8:	cmp	r2, #45	; 0x2d
   152cc:	bne	152b0 <__assert_fail@plt+0x435c>
   152d0:	ldrb	r1, [r1, #1]
   152d4:	cmp	r1, #0
   152d8:	beq	152b0 <__assert_fail@plt+0x435c>
   152dc:	str	r0, [r4, #32]
   152e0:	ldr	r6, [r4]
   152e4:	cmp	r6, r5
   152e8:	beq	15340 <__assert_fail@plt+0x43ec>
   152ec:	ldr	r0, [r7, r6, lsl #2]
   152f0:	movw	r1, #31008	; 0x7920
   152f4:	movt	r1, #1
   152f8:	bl	10cfc <strcmp@plt>
   152fc:	cmp	r0, #0
   15300:	bne	15340 <__assert_fail@plt+0x43ec>
   15304:	add	r0, r6, #1
   15308:	str	r0, [r4]
   1530c:	ldr	r1, [r4, #28]
   15310:	ldr	r2, [r4, #32]
   15314:	cmp	r1, r2
   15318:	cmpne	r2, r0
   1531c:	bne	1532c <__assert_fail@plt+0x43d8>
   15320:	cmp	r1, r2
   15324:	streq	r0, [r4, #28]
   15328:	b	15338 <__assert_fail@plt+0x43e4>
   1532c:	mov	r0, r7
   15330:	mov	r1, r4
   15334:	bl	1571c <__assert_fail@plt+0x47c8>
   15338:	str	r5, [r4]
   1533c:	str	r5, [r4, #32]
   15340:	ldr	r2, [r4]
   15344:	cmp	r2, r5
   15348:	bne	15360 <__assert_fail@plt+0x440c>
   1534c:	ldr	r0, [r4, #28]
   15350:	ldr	r1, [r4, #32]
   15354:	cmp	r0, r1
   15358:	strne	r0, [r4]
   1535c:	b	15634 <__assert_fail@plt+0x46e0>
   15360:	ldr	r0, [r7, r2, lsl #2]
   15364:	ldrb	r1, [r0]
   15368:	cmp	r1, #45	; 0x2d
   1536c:	bne	153d0 <__assert_fail@plt+0x447c>
   15370:	mov	r6, r0
   15374:	ldrb	r1, [r6, #1]!
   15378:	cmp	r1, #0
   1537c:	beq	153d0 <__assert_fail@plt+0x447c>
   15380:	cmp	r9, #0
   15384:	beq	15460 <__assert_fail@plt+0x450c>
   15388:	ldr	r8, [fp, #12]
   1538c:	cmp	r1, #45	; 0x2d
   15390:	bne	153f4 <__assert_fail@plt+0x44a0>
   15394:	add	r0, r0, #2
   15398:	str	r0, [r4, #20]
   1539c:	movw	r0, #31008	; 0x7920
   153a0:	movt	r0, #1
   153a4:	ldr	r1, [fp, #8]
   153a8:	stm	sp, {r1, r8}
   153ac:	str	r4, [sp, #8]
   153b0:	ldr	r1, [sp, #24]
   153b4:	str	r1, [sp, #12]
   153b8:	str	r0, [sp, #16]
   153bc:	mov	r0, r5
   153c0:	mov	r1, r7
   153c4:	mov	r2, sl
   153c8:	mov	r3, r9
   153cc:	b	15610 <__assert_fail@plt+0x46bc>
   153d0:	ldr	r0, [r4, #24]
   153d4:	cmp	r0, #0
   153d8:	beq	15634 <__assert_fail@plt+0x46e0>
   153dc:	add	r0, r2, #1
   153e0:	str	r0, [r4]
   153e4:	ldr	r0, [r7, r2, lsl #2]
   153e8:	str	r0, [r4, #12]
   153ec:	mov	r8, #1
   153f0:	b	15634 <__assert_fail@plt+0x46e0>
   153f4:	cmp	r8, #0
   153f8:	beq	15460 <__assert_fail@plt+0x450c>
   153fc:	ldrb	r0, [r0, #2]
   15400:	cmp	r0, #0
   15404:	beq	15450 <__assert_fail@plt+0x44fc>
   15408:	str	r6, [r4, #20]
   1540c:	movw	r0, #31009	; 0x7921
   15410:	movt	r0, #1
   15414:	ldr	r1, [fp, #8]
   15418:	stm	sp, {r1, r8}
   1541c:	str	r4, [sp, #8]
   15420:	ldr	r1, [sp, #24]
   15424:	str	r1, [sp, #12]
   15428:	str	r0, [sp, #16]
   1542c:	mov	r0, r5
   15430:	mov	r1, r7
   15434:	mov	r2, sl
   15438:	mov	r3, r9
   1543c:	bl	157f8 <__assert_fail@plt+0x48a4>
   15440:	mov	r8, r0
   15444:	cmn	r0, #1
   15448:	bne	15634 <__assert_fail@plt+0x46e0>
   1544c:	b	15460 <__assert_fail@plt+0x450c>
   15450:	mov	r0, sl
   15454:	bl	10e28 <strchr@plt>
   15458:	cmp	r0, #0
   1545c:	beq	15408 <__assert_fail@plt+0x44b4>
   15460:	ldr	r0, [r4]
   15464:	ldr	r0, [r7, r0, lsl #2]
   15468:	add	r0, r0, #1
   1546c:	str	r0, [r4, #20]
   15470:	str	r9, [sp, #20]
   15474:	ldr	r6, [r4, #20]
   15478:	add	r9, r6, #1
   1547c:	str	r9, [r4, #20]
   15480:	ldrb	r8, [r6]
   15484:	mov	r0, sl
   15488:	mov	r1, r8
   1548c:	bl	10e28 <strchr@plt>
   15490:	ldrb	r1, [r6, #1]
   15494:	cmp	r1, #0
   15498:	ldreq	r1, [r4]
   1549c:	addeq	r1, r1, #1
   154a0:	streq	r1, [r4]
   154a4:	orr	r1, r8, #1
   154a8:	cmp	r1, #59	; 0x3b
   154ac:	cmpne	r0, #0
   154b0:	bne	154cc <__assert_fail@plt+0x4578>
   154b4:	ldr	r0, [sp, #24]
   154b8:	cmp	r0, #0
   154bc:	bne	155a4 <__assert_fail@plt+0x4650>
   154c0:	str	r8, [r4, #8]
   154c4:	mov	r8, #63	; 0x3f
   154c8:	b	15634 <__assert_fail@plt+0x46e0>
   154cc:	ldrb	r1, [r0]
   154d0:	cmp	r1, #87	; 0x57
   154d4:	bne	15504 <__assert_fail@plt+0x45b0>
   154d8:	ldr	r1, [sp, #20]
   154dc:	cmp	r1, #0
   154e0:	beq	15504 <__assert_fail@plt+0x45b0>
   154e4:	ldrb	r1, [r0, #1]
   154e8:	cmp	r1, #59	; 0x3b
   154ec:	bne	15504 <__assert_fail@plt+0x45b0>
   154f0:	ldrb	r0, [r9]
   154f4:	cmp	r0, #0
   154f8:	beq	1554c <__assert_fail@plt+0x45f8>
   154fc:	str	r9, [r4, #12]
   15500:	b	155d0 <__assert_fail@plt+0x467c>
   15504:	ldrb	r1, [r0, #1]
   15508:	cmp	r1, #58	; 0x3a
   1550c:	bne	15634 <__assert_fail@plt+0x46e0>
   15510:	ldrb	r1, [r9]
   15514:	ldrb	r0, [r0, #2]
   15518:	cmp	r0, #58	; 0x3a
   1551c:	bne	15530 <__assert_fail@plt+0x45dc>
   15520:	cmp	r1, #0
   15524:	bne	15538 <__assert_fail@plt+0x45e4>
   15528:	mov	r0, #0
   1552c:	b	15628 <__assert_fail@plt+0x46d4>
   15530:	cmp	r1, #0
   15534:	beq	15578 <__assert_fail@plt+0x4624>
   15538:	str	r9, [r4, #12]
   1553c:	ldr	r0, [r4]
   15540:	add	r0, r0, #1
   15544:	str	r0, [r4]
   15548:	b	1562c <__assert_fail@plt+0x46d8>
   1554c:	ldr	r0, [r4]
   15550:	cmp	r0, r5
   15554:	bne	155c8 <__assert_fail@plt+0x4674>
   15558:	ldr	r0, [sp, #24]
   1555c:	cmp	r0, #0
   15560:	bne	15640 <__assert_fail@plt+0x46ec>
   15564:	str	r8, [r4, #8]
   15568:	ldrb	r8, [sl]
   1556c:	cmp	r8, #58	; 0x3a
   15570:	movwne	r8, #63	; 0x3f
   15574:	b	15634 <__assert_fail@plt+0x46e0>
   15578:	ldr	r0, [r4]
   1557c:	cmp	r0, r5
   15580:	bne	1561c <__assert_fail@plt+0x46c8>
   15584:	ldr	r0, [sp, #24]
   15588:	cmp	r0, #0
   1558c:	bne	15664 <__assert_fail@plt+0x4710>
   15590:	str	r8, [r4, #8]
   15594:	ldrb	r8, [sl]
   15598:	cmp	r8, #58	; 0x3a
   1559c:	movwne	r8, #63	; 0x3f
   155a0:	b	1562c <__assert_fail@plt+0x46d8>
   155a4:	ldr	r2, [r7]
   155a8:	movw	r0, #33040	; 0x8110
   155ac:	movt	r0, #2
   155b0:	ldr	r0, [r0]
   155b4:	movw	r1, #31011	; 0x7923
   155b8:	movt	r1, #1
   155bc:	mov	r3, r8
   155c0:	bl	10e40 <fprintf@plt>
   155c4:	b	154c0 <__assert_fail@plt+0x456c>
   155c8:	ldr	r0, [r7, r0, lsl #2]
   155cc:	str	r0, [r4, #12]
   155d0:	ldr	r0, [r4, #12]
   155d4:	mov	r1, #0
   155d8:	str	r1, [r4, #12]
   155dc:	str	r0, [r4, #20]
   155e0:	movw	r0, #31080	; 0x7968
   155e4:	movt	r0, #1
   155e8:	ldr	r2, [fp, #8]
   155ec:	str	r2, [sp]
   155f0:	stmib	sp, {r1, r4}
   155f4:	ldr	r1, [sp, #24]
   155f8:	str	r1, [sp, #12]
   155fc:	str	r0, [sp, #16]
   15600:	mov	r0, r5
   15604:	mov	r1, r7
   15608:	mov	r2, sl
   1560c:	ldr	r3, [sp, #20]
   15610:	bl	157f8 <__assert_fail@plt+0x48a4>
   15614:	sub	sp, fp, #28
   15618:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1561c:	add	r1, r0, #1
   15620:	str	r1, [r4]
   15624:	ldr	r0, [r7, r0, lsl #2]
   15628:	str	r0, [r4, #12]
   1562c:	mov	r0, #0
   15630:	str	r0, [r4, #20]
   15634:	mov	r0, r8
   15638:	sub	sp, fp, #28
   1563c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15640:	ldr	r2, [r7]
   15644:	movw	r0, #33040	; 0x8110
   15648:	movt	r0, #2
   1564c:	ldr	r0, [r0]
   15650:	movw	r1, #31039	; 0x793f
   15654:	movt	r1, #1
   15658:	mov	r3, r8
   1565c:	bl	10e40 <fprintf@plt>
   15660:	b	15564 <__assert_fail@plt+0x4610>
   15664:	ldr	r2, [r7]
   15668:	movw	r0, #33040	; 0x8110
   1566c:	movt	r0, #2
   15670:	ldr	r0, [r0]
   15674:	movw	r1, #31039	; 0x793f
   15678:	movt	r1, #1
   1567c:	mov	r3, r8
   15680:	bl	10e40 <fprintf@plt>
   15684:	b	15590 <__assert_fail@plt+0x463c>
   15688:	push	{r4, r5, fp, lr}
   1568c:	add	fp, sp, #8
   15690:	mov	r4, r1
   15694:	mov	r5, r0
   15698:	ldr	r0, [r1]
   1569c:	cmp	r0, #0
   156a0:	moveq	r0, #1
   156a4:	streq	r0, [r4]
   156a8:	mov	r0, #0
   156ac:	str	r0, [r4, #20]
   156b0:	ldr	r1, [r4]
   156b4:	str	r1, [r4, #28]
   156b8:	str	r1, [r4, #32]
   156bc:	ldrb	r1, [r5]
   156c0:	cmp	r1, #43	; 0x2b
   156c4:	beq	156d4 <__assert_fail@plt+0x4780>
   156c8:	cmp	r1, #45	; 0x2d
   156cc:	bne	156e0 <__assert_fail@plt+0x478c>
   156d0:	mov	r0, #2
   156d4:	str	r0, [r4, #24]
   156d8:	add	r5, r5, #1
   156dc:	b	15704 <__assert_fail@plt+0x47b0>
   156e0:	cmp	r2, #0
   156e4:	bne	156fc <__assert_fail@plt+0x47a8>
   156e8:	movw	r0, #31084	; 0x796c
   156ec:	movt	r0, #1
   156f0:	bl	10dd4 <getenv@plt>
   156f4:	cmp	r0, #0
   156f8:	beq	15714 <__assert_fail@plt+0x47c0>
   156fc:	mov	r0, #0
   15700:	str	r0, [r4, #24]
   15704:	mov	r0, #1
   15708:	str	r0, [r4, #16]
   1570c:	mov	r0, r5
   15710:	pop	{r4, r5, fp, pc}
   15714:	mov	r0, #1
   15718:	b	15700 <__assert_fail@plt+0x47ac>
   1571c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15720:	add	fp, sp, #28
   15724:	sub	sp, sp, #8
   15728:	ldr	r2, [r1]
   1572c:	ldr	r3, [r1, #28]
   15730:	str	r3, [sp, #4]
   15734:	ldr	lr, [r1, #32]
   15738:	str	r2, [sp]
   1573c:	cmp	r2, lr
   15740:	ble	157d8 <__assert_fail@plt+0x4884>
   15744:	ldr	r2, [sp, #4]
   15748:	cmp	r2, lr
   1574c:	bge	157d8 <__assert_fail@plt+0x4884>
   15750:	add	r8, r0, lr, lsl #2
   15754:	ldm	sp, {r9, sl}
   15758:	sub	r7, lr, sl
   1575c:	sub	r5, r9, lr
   15760:	cmp	r5, r7
   15764:	ble	1579c <__assert_fail@plt+0x4848>
   15768:	cmp	r7, #1
   1576c:	blt	15794 <__assert_fail@plt+0x4840>
   15770:	add	r2, r0, sl, lsl #2
   15774:	add	r5, r0, r9, lsl #2
   15778:	mov	r6, r7
   1577c:	ldr	r4, [r5, -r6, lsl #2]
   15780:	ldr	ip, [r2]
   15784:	str	r4, [r2], #4
   15788:	str	ip, [r5, -r6, lsl #2]
   1578c:	subs	r6, r6, #1
   15790:	bne	1577c <__assert_fail@plt+0x4828>
   15794:	sub	r9, r9, r7
   15798:	b	157cc <__assert_fail@plt+0x4878>
   1579c:	cmp	r5, #1
   157a0:	blt	157c8 <__assert_fail@plt+0x4874>
   157a4:	add	r7, r0, sl, lsl #2
   157a8:	mov	r2, r8
   157ac:	mov	r6, r5
   157b0:	ldr	r4, [r7]
   157b4:	ldr	r3, [r2]
   157b8:	str	r3, [r7], #4
   157bc:	str	r4, [r2], #4
   157c0:	subs	r6, r6, #1
   157c4:	bne	157b0 <__assert_fail@plt+0x485c>
   157c8:	add	sl, sl, r5
   157cc:	cmp	r9, lr
   157d0:	cmpgt	lr, sl
   157d4:	bgt	15758 <__assert_fail@plt+0x4804>
   157d8:	ldr	r0, [sp, #4]
   157dc:	sub	r0, r0, lr
   157e0:	ldr	r2, [sp]
   157e4:	add	r0, r0, r2
   157e8:	str	r0, [r1, #28]
   157ec:	str	r2, [r1, #32]
   157f0:	sub	sp, fp, #28
   157f4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   157f8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   157fc:	add	fp, sp, #28
   15800:	sub	sp, sp, #36	; 0x24
   15804:	mov	r6, r3
   15808:	str	r1, [sp, #12]
   1580c:	stmib	sp, {r0, r2}
   15810:	ldr	r1, [fp, #16]
   15814:	ldr	sl, [r1, #20]
   15818:	mov	r5, sl
   1581c:	b	15824 <__assert_fail@plt+0x48d0>
   15820:	add	r5, r5, #1
   15824:	ldrb	r0, [r5]
   15828:	cmp	r0, #0
   1582c:	cmpne	r0, #61	; 0x3d
   15830:	bne	15820 <__assert_fail@plt+0x48cc>
   15834:	ldr	r0, [r1, #20]
   15838:	sub	r8, r5, r0
   1583c:	ldr	r9, [r6]
   15840:	mov	r0, #0
   15844:	str	r0, [sp, #32]
   15848:	cmp	r9, #0
   1584c:	mov	r4, #0
   15850:	beq	15894 <__assert_fail@plt+0x4940>
   15854:	mov	r4, #0
   15858:	mov	r7, r6
   1585c:	mov	r0, r9
   15860:	mov	r1, sl
   15864:	mov	r2, r8
   15868:	bl	10f0c <strncmp@plt>
   1586c:	cmp	r0, #0
   15870:	bne	15884 <__assert_fail@plt+0x4930>
   15874:	mov	r0, r9
   15878:	bl	10e1c <strlen@plt>
   1587c:	cmp	r8, r0
   15880:	beq	15b24 <__assert_fail@plt+0x4bd0>
   15884:	add	r4, r4, #1
   15888:	ldr	r9, [r7, #16]!
   1588c:	cmp	r9, #0
   15890:	bne	1585c <__assert_fail@plt+0x4908>
   15894:	ldr	r0, [r6]
   15898:	cmp	r0, #0
   1589c:	beq	15a2c <__assert_fail@plt+0x4ad8>
   158a0:	mov	sl, #0
   158a4:	mvn	r1, #0
   158a8:	str	r1, [sp, #20]
   158ac:	mov	r1, #0
   158b0:	str	r1, [sp, #28]
   158b4:	mov	r1, #0
   158b8:	str	r1, [sp, #16]
   158bc:	mov	r1, #0
   158c0:	str	r1, [sp, #24]
   158c4:	mov	r9, #0
   158c8:	mov	r1, #0
   158cc:	str	r1, [sp, #32]
   158d0:	ldr	r7, [fp, #16]
   158d4:	b	159fc <__assert_fail@plt+0x4aa8>
   158d8:	ldr	r0, [sp, #32]
   158dc:	cmp	r0, #0
   158e0:	beq	15990 <__assert_fail@plt+0x4a3c>
   158e4:	ldr	r0, [fp, #12]
   158e8:	cmp	r0, #0
   158ec:	bne	1591c <__assert_fail@plt+0x49c8>
   158f0:	add	r0, r6, r9, lsl #4
   158f4:	ldr	r1, [r0, #4]
   158f8:	ldr	r2, [sp, #32]
   158fc:	ldr	r2, [r2, #4]
   15900:	cmp	r2, r1
   15904:	bne	1591c <__assert_fail@plt+0x49c8>
   15908:	ldr	r1, [r0, #8]
   1590c:	ldr	r2, [sp, #32]
   15910:	ldr	r2, [r2, #8]
   15914:	cmp	r2, r1
   15918:	beq	159c4 <__assert_fail@plt+0x4a70>
   1591c:	ldr	r0, [sp, #28]
   15920:	cmp	r0, #0
   15924:	bne	15a10 <__assert_fail@plt+0x4abc>
   15928:	ldr	r0, [fp, #20]
   1592c:	cmp	r0, #0
   15930:	beq	159a0 <__assert_fail@plt+0x4a4c>
   15934:	mov	r0, #0
   15938:	str	r0, [sp, #28]
   1593c:	ldr	r0, [sp, #24]
   15940:	cmp	r0, #0
   15944:	bne	159b4 <__assert_fail@plt+0x4a60>
   15948:	mov	r0, r4
   1594c:	bl	16f94 <__assert_fail@plt+0x6040>
   15950:	cmp	r0, #0
   15954:	beq	159e8 <__assert_fail@plt+0x4a94>
   15958:	mov	r1, #0
   1595c:	str	r1, [sp, #28]
   15960:	str	r0, [sp, #24]
   15964:	ldr	r0, [sp, #24]
   15968:	mov	r1, #0
   1596c:	mov	r2, r4
   15970:	bl	10e64 <memset@plt>
   15974:	ldr	r0, [sp, #24]
   15978:	mov	r2, #1
   1597c:	mov	r1, #1
   15980:	str	r1, [sp, #16]
   15984:	ldr	r1, [sp, #20]
   15988:	strb	r2, [r0, r1]
   1598c:	b	159b4 <__assert_fail@plt+0x4a60>
   15990:	add	r0, r6, sl
   15994:	str	r0, [sp, #32]
   15998:	str	r9, [sp, #20]
   1599c:	b	15a10 <__assert_fail@plt+0x4abc>
   159a0:	mov	r0, #1
   159a4:	str	r0, [sp, #28]
   159a8:	ldr	r0, [sp, #24]
   159ac:	cmp	r0, #0
   159b0:	beq	159f0 <__assert_fail@plt+0x4a9c>
   159b4:	str	r0, [sp, #24]
   159b8:	mov	r1, #1
   159bc:	strb	r1, [r0, r9]
   159c0:	b	15a10 <__assert_fail@plt+0x4abc>
   159c4:	ldr	r1, [sp, #28]
   159c8:	cmp	r1, #0
   159cc:	bne	15a10 <__assert_fail@plt+0x4abc>
   159d0:	ldr	r0, [r0, #12]
   159d4:	ldr	r1, [sp, #32]
   159d8:	ldr	r1, [r1, #12]
   159dc:	cmp	r1, r0
   159e0:	bne	15928 <__assert_fail@plt+0x49d4>
   159e4:	b	15a10 <__assert_fail@plt+0x4abc>
   159e8:	mov	r0, #1
   159ec:	str	r0, [sp, #28]
   159f0:	mov	r0, #0
   159f4:	str	r0, [sp, #24]
   159f8:	b	15a10 <__assert_fail@plt+0x4abc>
   159fc:	ldr	r1, [r7, #20]
   15a00:	mov	r2, r8
   15a04:	bl	10f0c <strncmp@plt>
   15a08:	cmp	r0, #0
   15a0c:	beq	158d8 <__assert_fail@plt+0x4984>
   15a10:	add	r0, r6, r9, lsl #4
   15a14:	ldr	r0, [r0, #16]
   15a18:	add	sl, sl, #16
   15a1c:	add	r9, r9, #1
   15a20:	cmp	r0, #0
   15a24:	bne	159fc <__assert_fail@plt+0x4aa8>
   15a28:	b	15a50 <__assert_fail@plt+0x4afc>
   15a2c:	mvn	r0, #0
   15a30:	str	r0, [sp, #20]
   15a34:	mov	r0, #0
   15a38:	str	r0, [sp, #24]
   15a3c:	mov	r0, #0
   15a40:	str	r0, [sp, #16]
   15a44:	mov	r0, #0
   15a48:	str	r0, [sp, #28]
   15a4c:	ldr	r7, [fp, #16]
   15a50:	ldr	r0, [sp, #24]
   15a54:	cmp	r0, #0
   15a58:	ldreq	r0, [sp, #28]
   15a5c:	cmpeq	r0, #0
   15a60:	beq	15aa4 <__assert_fail@plt+0x4b50>
   15a64:	ldr	r0, [fp, #20]
   15a68:	cmp	r0, #0
   15a6c:	bne	15c10 <__assert_fail@plt+0x4cbc>
   15a70:	ldr	r0, [sp, #16]
   15a74:	cmp	r0, #0
   15a78:	beq	15a84 <__assert_fail@plt+0x4b30>
   15a7c:	ldr	r0, [sp, #24]
   15a80:	bl	13094 <__assert_fail@plt+0x2140>
   15a84:	ldr	r4, [r7, #20]
   15a88:	mov	r0, r4
   15a8c:	bl	10e1c <strlen@plt>
   15a90:	mov	r1, #0
   15a94:	str	r1, [r7, #8]
   15a98:	add	r0, r4, r0
   15a9c:	str	r0, [r7, #20]
   15aa0:	b	15b0c <__assert_fail@plt+0x4bb8>
   15aa4:	ldr	r0, [sp, #32]
   15aa8:	cmp	r0, #0
   15aac:	bne	15b30 <__assert_fail@plt+0x4bdc>
   15ab0:	ldr	r0, [fp, #12]
   15ab4:	cmp	r0, #0
   15ab8:	beq	15af4 <__assert_fail@plt+0x4ba0>
   15abc:	ldr	r0, [r7]
   15ac0:	ldr	r1, [sp, #12]
   15ac4:	ldr	r0, [r1, r0, lsl #2]
   15ac8:	ldrb	r0, [r0, #1]
   15acc:	cmp	r0, #45	; 0x2d
   15ad0:	beq	15af4 <__assert_fail@plt+0x4ba0>
   15ad4:	ldr	r0, [r7, #20]
   15ad8:	ldrb	r1, [r0]
   15adc:	ldr	r0, [sp, #8]
   15ae0:	bl	10e28 <strchr@plt>
   15ae4:	mov	r1, r0
   15ae8:	mvn	r0, #0
   15aec:	cmp	r1, #0
   15af0:	bne	15bc4 <__assert_fail@plt+0x4c70>
   15af4:	ldr	r0, [fp, #20]
   15af8:	cmp	r0, #0
   15afc:	bne	15ce0 <__assert_fail@plt+0x4d8c>
   15b00:	mov	r0, #0
   15b04:	str	r0, [r7, #20]
   15b08:	str	r0, [r7, #8]
   15b0c:	ldr	r0, [r7]
   15b10:	add	r0, r0, #1
   15b14:	str	r0, [r7]
   15b18:	mov	r0, #63	; 0x3f
   15b1c:	sub	sp, fp, #28
   15b20:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15b24:	str	r4, [sp, #20]
   15b28:	mov	r0, r7
   15b2c:	ldr	r7, [fp, #16]
   15b30:	mov	r2, r0
   15b34:	mov	r0, #0
   15b38:	str	r0, [r7, #20]
   15b3c:	ldr	r1, [r7]
   15b40:	add	r0, r1, #1
   15b44:	str	r0, [r7]
   15b48:	mov	r4, r2
   15b4c:	ldr	r2, [r2, #4]
   15b50:	ldrb	r3, [r5]
   15b54:	cmp	r3, #0
   15b58:	beq	15b70 <__assert_fail@plt+0x4c1c>
   15b5c:	cmp	r2, #0
   15b60:	beq	15bcc <__assert_fail@plt+0x4c78>
   15b64:	add	r0, r5, #1
   15b68:	str	r0, [r7, #12]
   15b6c:	b	15b98 <__assert_fail@plt+0x4c44>
   15b70:	cmp	r2, #1
   15b74:	bne	15b98 <__assert_fail@plt+0x4c44>
   15b78:	ldr	r2, [sp, #4]
   15b7c:	cmp	r0, r2
   15b80:	bge	15be4 <__assert_fail@plt+0x4c90>
   15b84:	add	r1, r1, #2
   15b88:	str	r1, [r7]
   15b8c:	ldr	r1, [sp, #12]
   15b90:	ldr	r0, [r1, r0, lsl #2]
   15b94:	b	15b68 <__assert_fail@plt+0x4c14>
   15b98:	ldr	r0, [fp, #8]
   15b9c:	cmp	r0, #0
   15ba0:	ldrne	r1, [sp, #20]
   15ba4:	strne	r1, [r0]
   15ba8:	ldr	r1, [r4, #8]
   15bac:	ldr	r0, [r4, #12]
   15bb0:	cmp	r1, #0
   15bb4:	strne	r0, [r1]
   15bb8:	movne	r0, #0
   15bbc:	subne	sp, fp, #28
   15bc0:	popne	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15bc4:	sub	sp, fp, #28
   15bc8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15bcc:	ldr	r0, [fp, #20]
   15bd0:	cmp	r0, #0
   15bd4:	bne	15d10 <__assert_fail@plt+0x4dbc>
   15bd8:	ldr	r0, [r4, #12]
   15bdc:	str	r0, [r7, #8]
   15be0:	b	15b18 <__assert_fail@plt+0x4bc4>
   15be4:	ldr	r0, [fp, #20]
   15be8:	cmp	r0, #0
   15bec:	bne	15d40 <__assert_fail@plt+0x4dec>
   15bf0:	ldr	r0, [r4, #12]
   15bf4:	str	r0, [r7, #8]
   15bf8:	ldr	r0, [sp, #8]
   15bfc:	ldrb	r0, [r0]
   15c00:	cmp	r0, #58	; 0x3a
   15c04:	movwne	r0, #63	; 0x3f
   15c08:	sub	sp, fp, #28
   15c0c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15c10:	movw	r5, #33040	; 0x8110
   15c14:	movt	r5, #2
   15c18:	ldr	r0, [r5]
   15c1c:	ldr	r1, [sp, #28]
   15c20:	cmp	r1, #0
   15c24:	beq	15c4c <__assert_fail@plt+0x4cf8>
   15c28:	ldr	r1, [sp, #12]
   15c2c:	ldr	r2, [r1]
   15c30:	ldr	r1, [r7, #20]
   15c34:	str	r1, [sp]
   15c38:	movw	r1, #31100	; 0x797c
   15c3c:	movt	r1, #1
   15c40:	ldr	r3, [fp, #24]
   15c44:	bl	10e40 <fprintf@plt>
   15c48:	b	15a70 <__assert_fail@plt+0x4b1c>
   15c4c:	bl	10ec4 <flockfile@plt>
   15c50:	ldr	r0, [sp, #12]
   15c54:	ldr	r2, [r0]
   15c58:	ldr	r0, [r5]
   15c5c:	ldr	r1, [r7, #20]
   15c60:	str	r1, [sp]
   15c64:	movw	r1, #31132	; 0x799c
   15c68:	movt	r1, #1
   15c6c:	ldr	r9, [fp, #24]
   15c70:	mov	r3, r9
   15c74:	bl	10e40 <fprintf@plt>
   15c78:	cmp	r4, #0
   15c7c:	beq	15cc4 <__assert_fail@plt+0x4d70>
   15c80:	movw	r8, #31179	; 0x79cb
   15c84:	movt	r8, #1
   15c88:	ldr	r7, [sp, #24]
   15c8c:	b	15ca8 <__assert_fail@plt+0x4d54>
   15c90:	ldr	r3, [r6]
   15c94:	ldr	r0, [r5]
   15c98:	mov	r1, r8
   15c9c:	mov	r2, r9
   15ca0:	bl	10e40 <fprintf@plt>
   15ca4:	b	15cb4 <__assert_fail@plt+0x4d60>
   15ca8:	ldrb	r0, [r7]
   15cac:	cmp	r0, #0
   15cb0:	bne	15c90 <__assert_fail@plt+0x4d3c>
   15cb4:	add	r6, r6, #16
   15cb8:	add	r7, r7, #1
   15cbc:	subs	r4, r4, #1
   15cc0:	bne	15ca8 <__assert_fail@plt+0x4d54>
   15cc4:	ldr	r1, [r5]
   15cc8:	mov	r0, #10
   15ccc:	bl	10e94 <fputc@plt>
   15cd0:	ldr	r0, [r5]
   15cd4:	bl	10d74 <funlockfile@plt>
   15cd8:	ldr	r7, [fp, #16]
   15cdc:	b	15a70 <__assert_fail@plt+0x4b1c>
   15ce0:	ldr	r0, [sp, #12]
   15ce4:	ldr	r2, [r0]
   15ce8:	movw	r0, #33040	; 0x8110
   15cec:	movt	r0, #2
   15cf0:	ldr	r0, [r0]
   15cf4:	ldr	r1, [r7, #20]
   15cf8:	str	r1, [sp]
   15cfc:	movw	r1, #31187	; 0x79d3
   15d00:	movt	r1, #1
   15d04:	ldr	r3, [fp, #24]
   15d08:	bl	10e40 <fprintf@plt>
   15d0c:	b	15b00 <__assert_fail@plt+0x4bac>
   15d10:	ldr	r0, [sp, #12]
   15d14:	ldr	r2, [r0]
   15d18:	movw	r0, #33040	; 0x8110
   15d1c:	movt	r0, #2
   15d20:	ldr	r0, [r0]
   15d24:	ldr	r1, [r4]
   15d28:	str	r1, [sp]
   15d2c:	movw	r1, #31219	; 0x79f3
   15d30:	movt	r1, #1
   15d34:	ldr	r3, [fp, #24]
   15d38:	bl	10e40 <fprintf@plt>
   15d3c:	b	15bd8 <__assert_fail@plt+0x4c84>
   15d40:	ldr	r0, [sp, #12]
   15d44:	ldr	r2, [r0]
   15d48:	movw	r0, #33040	; 0x8110
   15d4c:	movt	r0, #2
   15d50:	ldr	r0, [r0]
   15d54:	ldr	r1, [r4]
   15d58:	str	r1, [sp]
   15d5c:	movw	r1, #31264	; 0x7a20
   15d60:	movt	r1, #1
   15d64:	ldr	r3, [fp, #24]
   15d68:	bl	10e40 <fprintf@plt>
   15d6c:	b	15bf0 <__assert_fail@plt+0x4c9c>
   15d70:	push	{r4, r5, r6, r7, fp, lr}
   15d74:	add	fp, sp, #16
   15d78:	sub	sp, sp, #16
   15d7c:	movw	r7, #33028	; 0x8104
   15d80:	movt	r7, #2
   15d84:	ldr	r4, [r7]
   15d88:	movw	r6, #33068	; 0x812c
   15d8c:	movt	r6, #2
   15d90:	movw	r5, #33032	; 0x8108
   15d94:	movt	r5, #2
   15d98:	ldr	r5, [r5]
   15d9c:	stm	r6, {r4, r5}
   15da0:	ldr	r5, [fp, #16]
   15da4:	str	r5, [sp, #12]
   15da8:	str	r6, [sp, #8]
   15dac:	ldr	r5, [fp, #12]
   15db0:	str	r5, [sp, #4]
   15db4:	ldr	r5, [fp, #8]
   15db8:	str	r5, [sp]
   15dbc:	bl	151b8 <__assert_fail@plt+0x4264>
   15dc0:	ldr	r1, [r6]
   15dc4:	ldr	r2, [r6, #8]
   15dc8:	ldr	r3, [r6, #12]
   15dcc:	str	r1, [r7]
   15dd0:	movw	r1, #33208	; 0x81b8
   15dd4:	movt	r1, #2
   15dd8:	str	r3, [r1]
   15ddc:	movw	r1, #33036	; 0x810c
   15de0:	movt	r1, #2
   15de4:	str	r2, [r1]
   15de8:	sub	sp, fp, #16
   15dec:	pop	{r4, r5, r6, r7, fp, pc}
   15df0:	push	{fp, lr}
   15df4:	mov	fp, sp
   15df8:	sub	sp, sp, #16
   15dfc:	mov	ip, #1
   15e00:	mov	r3, #0
   15e04:	str	r3, [sp]
   15e08:	stmib	sp, {r3, ip}
   15e0c:	mov	r3, #0
   15e10:	bl	15d70 <__assert_fail@plt+0x4e1c>
   15e14:	mov	sp, fp
   15e18:	pop	{fp, pc}
   15e1c:	andeq	r0, r0, r0
   15e20:	ldr	r0, [r0, #8]
   15e24:	bx	lr
   15e28:	ldr	r0, [r0, #12]
   15e2c:	bx	lr
   15e30:	ldr	r0, [r0, #16]
   15e34:	bx	lr
   15e38:	mov	r2, r0
   15e3c:	ldm	r0, {r1, r3}
   15e40:	mov	r0, #0
   15e44:	cmp	r1, r3
   15e48:	bxcs	lr
   15e4c:	ldr	ip, [r2, #4]
   15e50:	mov	r0, #0
   15e54:	ldr	r2, [r1]
   15e58:	cmp	r2, #0
   15e5c:	beq	15e80 <__assert_fail@plt+0x4f2c>
   15e60:	mov	r3, #0
   15e64:	mov	r2, r1
   15e68:	add	r3, r3, #1
   15e6c:	ldr	r2, [r2, #4]
   15e70:	cmp	r2, #0
   15e74:	bne	15e68 <__assert_fail@plt+0x4f14>
   15e78:	cmp	r3, r0
   15e7c:	movhi	r0, r3
   15e80:	add	r1, r1, #8
   15e84:	cmp	r1, ip
   15e88:	bcc	15e54 <__assert_fail@plt+0x4f00>
   15e8c:	bx	lr
   15e90:	push	{fp, lr}
   15e94:	mov	fp, sp
   15e98:	ldr	r3, [r0]
   15e9c:	ldr	r1, [r0, #4]
   15ea0:	mov	lr, #0
   15ea4:	cmp	r3, r1
   15ea8:	mov	r1, #0
   15eac:	bcs	15eec <__assert_fail@plt+0x4f98>
   15eb0:	ldr	ip, [r0, #4]
   15eb4:	mov	r1, #0
   15eb8:	mov	lr, #0
   15ebc:	ldr	r2, [r3]
   15ec0:	cmp	r2, #0
   15ec4:	beq	15ee0 <__assert_fail@plt+0x4f8c>
   15ec8:	mov	r2, r3
   15ecc:	add	r1, r1, #1
   15ed0:	ldr	r2, [r2, #4]
   15ed4:	cmp	r2, #0
   15ed8:	bne	15ecc <__assert_fail@plt+0x4f78>
   15edc:	add	lr, lr, #1
   15ee0:	add	r3, r3, #8
   15ee4:	cmp	r3, ip
   15ee8:	bcc	15ebc <__assert_fail@plt+0x4f68>
   15eec:	ldr	r2, [r0, #12]
   15ef0:	cmp	lr, r2
   15ef4:	bne	15f0c <__assert_fail@plt+0x4fb8>
   15ef8:	ldr	r2, [r0, #16]
   15efc:	mov	r0, #1
   15f00:	cmp	r1, r2
   15f04:	movne	r0, #0
   15f08:	pop	{fp, pc}
   15f0c:	mov	r0, #0
   15f10:	pop	{fp, pc}
   15f14:	nop	{0}
   15f18:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   15f1c:	add	fp, sp, #24
   15f20:	sub	sp, sp, #8
   15f24:	mov	r4, r1
   15f28:	mov	r5, r0
   15f2c:	bl	15e30 <__assert_fail@plt+0x4edc>
   15f30:	mov	r8, r0
   15f34:	mov	r0, r5
   15f38:	bl	15e20 <__assert_fail@plt+0x4ecc>
   15f3c:	mov	r7, r0
   15f40:	mov	r0, r5
   15f44:	bl	15e28 <__assert_fail@plt+0x4ed4>
   15f48:	mov	r6, r0
   15f4c:	mov	r0, r5
   15f50:	bl	15e38 <__assert_fail@plt+0x4ee4>
   15f54:	mov	r5, r0
   15f58:	movw	r1, #31304	; 0x7a48
   15f5c:	movt	r1, #1
   15f60:	mov	r0, r4
   15f64:	mov	r2, r8
   15f68:	bl	10e40 <fprintf@plt>
   15f6c:	movw	r1, #31328	; 0x7a60
   15f70:	movt	r1, #1
   15f74:	mov	r0, r4
   15f78:	mov	r2, r7
   15f7c:	bl	10e40 <fprintf@plt>
   15f80:	vldr	d16, [pc, #72]	; 15fd0 <__assert_fail@plt+0x507c>
   15f84:	vmov	s0, r6
   15f88:	vmov	s2, r7
   15f8c:	vcvt.f64.u32	d17, s0
   15f90:	vcvt.f64.u32	d18, s2
   15f94:	vmul.f64	d16, d17, d16
   15f98:	vdiv.f64	d16, d16, d18
   15f9c:	vstr	d16, [sp]
   15fa0:	movw	r1, #31352	; 0x7a78
   15fa4:	movt	r1, #1
   15fa8:	mov	r0, r4
   15fac:	mov	r2, r6
   15fb0:	bl	10e40 <fprintf@plt>
   15fb4:	movw	r1, #31385	; 0x7a99
   15fb8:	movt	r1, #1
   15fbc:	mov	r0, r4
   15fc0:	mov	r2, r5
   15fc4:	sub	sp, fp, #24
   15fc8:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   15fcc:	b	10e40 <fprintf@plt>
   15fd0:	andeq	r0, r0, r0
   15fd4:	subsmi	r0, r9, r0
   15fd8:	push	{r4, r5, r6, r7, fp, lr}
   15fdc:	add	fp, sp, #16
   15fe0:	mov	r5, r1
   15fe4:	mov	r6, r0
   15fe8:	bl	1603c <__assert_fail@plt+0x50e8>
   15fec:	mov	r7, r0
   15ff0:	ldr	r0, [r0]
   15ff4:	mov	r4, #0
   15ff8:	cmp	r0, #0
   15ffc:	bne	16008 <__assert_fail@plt+0x50b4>
   16000:	b	16034 <__assert_fail@plt+0x50e0>
   16004:	ldr	r7, [r7, #4]
   16008:	cmp	r7, #0
   1600c:	beq	16034 <__assert_fail@plt+0x50e0>
   16010:	ldr	r1, [r7]
   16014:	cmp	r1, r5
   16018:	beq	16030 <__assert_fail@plt+0x50dc>
   1601c:	ldr	r2, [r6, #28]
   16020:	mov	r0, r5
   16024:	blx	r2
   16028:	cmp	r0, #0
   1602c:	beq	16004 <__assert_fail@plt+0x50b0>
   16030:	ldr	r4, [r7]
   16034:	mov	r0, r4
   16038:	pop	{r4, r5, r6, r7, fp, pc}
   1603c:	push	{r4, sl, fp, lr}
   16040:	add	fp, sp, #8
   16044:	mov	r2, r1
   16048:	mov	r4, r0
   1604c:	ldr	r1, [r0, #8]
   16050:	ldr	r3, [r0, #24]
   16054:	mov	r0, r2
   16058:	blx	r3
   1605c:	ldr	r1, [r4, #8]
   16060:	cmp	r0, r1
   16064:	ldrcc	r1, [r4]
   16068:	addcc	r0, r1, r0, lsl #3
   1606c:	popcc	{r4, sl, fp, pc}
   16070:	bl	10f18 <abort@plt>
   16074:	ldr	r1, [r0, #16]
   16078:	cmp	r1, #0
   1607c:	moveq	r1, #0
   16080:	moveq	r0, r1
   16084:	bxeq	lr
   16088:	ldr	r2, [r0]
   1608c:	b	160a0 <__assert_fail@plt+0x514c>
   16090:	ldr	r1, [r2], #8
   16094:	cmp	r1, #0
   16098:	movne	r0, r1
   1609c:	bxne	lr
   160a0:	ldr	r1, [r0, #4]
   160a4:	cmp	r2, r1
   160a8:	bcc	16090 <__assert_fail@plt+0x513c>
   160ac:	push	{fp, lr}
   160b0:	mov	fp, sp
   160b4:	bl	10f18 <abort@plt>
   160b8:	push	{r4, r5, fp, lr}
   160bc:	add	fp, sp, #8
   160c0:	mov	r5, r1
   160c4:	mov	r4, r0
   160c8:	bl	1603c <__assert_fail@plt+0x50e8>
   160cc:	mov	r1, r0
   160d0:	ldr	r2, [r1]
   160d4:	cmp	r2, r5
   160d8:	bne	160ec <__assert_fail@plt+0x5198>
   160dc:	ldr	r2, [r1, #4]
   160e0:	cmp	r2, #0
   160e4:	ldrne	r0, [r2]
   160e8:	popne	{r4, r5, fp, pc}
   160ec:	ldr	r1, [r1, #4]
   160f0:	cmp	r1, #0
   160f4:	bne	160d0 <__assert_fail@plt+0x517c>
   160f8:	add	r1, r0, #8
   160fc:	ldr	r2, [r4, #4]
   16100:	cmp	r1, r2
   16104:	movcs	r0, #0
   16108:	popcs	{r4, r5, fp, pc}
   1610c:	ldr	r0, [r1], #8
   16110:	cmp	r0, #0
   16114:	popne	{r4, r5, fp, pc}
   16118:	b	16100 <__assert_fail@plt+0x51ac>
   1611c:	push	{r4, sl, fp, lr}
   16120:	add	fp, sp, #8
   16124:	mov	ip, r0
   16128:	ldr	lr, [r0]
   1612c:	ldr	r3, [r0, #4]
   16130:	mov	r0, #0
   16134:	cmp	lr, r3
   16138:	bcs	16184 <__assert_fail@plt+0x5230>
   1613c:	mov	r0, #0
   16140:	ldr	r3, [lr]
   16144:	cmp	r3, #0
   16148:	cmpne	lr, #0
   1614c:	beq	16174 <__assert_fail@plt+0x5220>
   16150:	mov	r3, lr
   16154:	cmp	r0, r2
   16158:	popcs	{r4, sl, fp, pc}
   1615c:	ldr	r4, [r3]
   16160:	str	r4, [r1, r0, lsl #2]
   16164:	add	r0, r0, #1
   16168:	ldr	r3, [r3, #4]
   1616c:	cmp	r3, #0
   16170:	bne	16154 <__assert_fail@plt+0x5200>
   16174:	ldr	r3, [ip, #4]
   16178:	add	lr, lr, #8
   1617c:	cmp	lr, r3
   16180:	bcc	16140 <__assert_fail@plt+0x51ec>
   16184:	pop	{r4, sl, fp, pc}
   16188:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1618c:	add	fp, sp, #24
   16190:	mov	r8, r0
   16194:	ldr	r9, [r0]
   16198:	ldr	r0, [r0, #4]
   1619c:	mov	r6, #0
   161a0:	cmp	r9, r0
   161a4:	bcs	16204 <__assert_fail@plt+0x52b0>
   161a8:	mov	r4, r2
   161ac:	mov	r5, r1
   161b0:	mov	r6, #0
   161b4:	b	161e4 <__assert_fail@plt+0x5290>
   161b8:	mov	r7, r9
   161bc:	ldr	r0, [r7]
   161c0:	mov	r1, r4
   161c4:	blx	r5
   161c8:	cmp	r0, #0
   161cc:	beq	16204 <__assert_fail@plt+0x52b0>
   161d0:	add	r6, r6, #1
   161d4:	ldr	r7, [r7, #4]
   161d8:	cmp	r7, #0
   161dc:	bne	161bc <__assert_fail@plt+0x5268>
   161e0:	b	161f4 <__assert_fail@plt+0x52a0>
   161e4:	ldr	r0, [r9]
   161e8:	cmp	r0, #0
   161ec:	cmpne	r9, #0
   161f0:	bne	161b8 <__assert_fail@plt+0x5264>
   161f4:	ldr	r0, [r8, #4]
   161f8:	add	r9, r9, #8
   161fc:	cmp	r9, r0
   16200:	bcc	161e4 <__assert_fail@plt+0x5290>
   16204:	mov	r0, r6
   16208:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1620c:	ldrb	r2, [r0]
   16210:	cmp	r2, #0
   16214:	moveq	r0, #0
   16218:	bxeq	lr
   1621c:	add	r3, r0, #1
   16220:	mov	r0, #0
   16224:	rsb	r0, r0, r0, lsl #5
   16228:	uxtab	r0, r0, r2
   1622c:	udiv	r2, r0, r1
   16230:	mls	r0, r2, r1, r0
   16234:	ldrb	r2, [r3], #1
   16238:	cmp	r2, #0
   1623c:	bne	16224 <__assert_fail@plt+0x52d0>
   16240:	bx	lr
   16244:	movw	r1, #31416	; 0x7ab8
   16248:	movt	r1, #1
   1624c:	vld1.32	{d16-d17}, [r1]!
   16250:	vst1.32	{d16-d17}, [r0]!
   16254:	ldr	r1, [r1]
   16258:	str	r1, [r0]
   1625c:	bx	lr
   16260:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16264:	add	fp, sp, #28
   16268:	sub	sp, sp, #4
   1626c:	mov	r7, r1
   16270:	mov	r8, r0
   16274:	movw	sl, #25440	; 0x6360
   16278:	movt	sl, #1
   1627c:	cmp	r3, #0
   16280:	movne	sl, r3
   16284:	movw	r5, #25408	; 0x6340
   16288:	movt	r5, #1
   1628c:	cmp	r2, #0
   16290:	movne	r5, r2
   16294:	mov	r0, #40	; 0x28
   16298:	bl	16f94 <__assert_fail@plt+0x6040>
   1629c:	mov	r9, #0
   162a0:	cmp	r0, #0
   162a4:	beq	16334 <__assert_fail@plt+0x53e0>
   162a8:	mov	r4, r0
   162ac:	movw	r6, #31416	; 0x7ab8
   162b0:	movt	r6, #1
   162b4:	cmp	r7, #0
   162b8:	movne	r6, r7
   162bc:	str	r6, [r0, #20]
   162c0:	bl	16370 <__assert_fail@plt+0x541c>
   162c4:	cmp	r0, #0
   162c8:	beq	1632c <__assert_fail@plt+0x53d8>
   162cc:	mov	r0, r8
   162d0:	mov	r1, r6
   162d4:	bl	1641c <__assert_fail@plt+0x54c8>
   162d8:	str	r0, [r4, #8]
   162dc:	cmp	r0, #0
   162e0:	beq	1632c <__assert_fail@plt+0x53d8>
   162e4:	mov	r1, #8
   162e8:	bl	16f40 <__assert_fail@plt+0x5fec>
   162ec:	str	r0, [r4]
   162f0:	cmp	r0, #0
   162f4:	beq	1632c <__assert_fail@plt+0x53d8>
   162f8:	ldr	r1, [fp, #8]
   162fc:	mov	r2, #0
   16300:	str	r2, [r4, #12]
   16304:	str	r2, [r4, #16]
   16308:	str	r5, [r4, #24]
   1630c:	str	sl, [r4, #28]
   16310:	str	r1, [r4, #32]
   16314:	str	r2, [r4, #36]	; 0x24
   16318:	ldr	r1, [r4, #8]
   1631c:	add	r0, r0, r1, lsl #3
   16320:	str	r0, [r4, #4]
   16324:	mov	r9, r4
   16328:	b	16334 <__assert_fail@plt+0x53e0>
   1632c:	mov	r0, r4
   16330:	bl	13094 <__assert_fail@plt+0x2140>
   16334:	mov	r0, r9
   16338:	sub	sp, fp, #28
   1633c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16340:	push	{r4, sl, fp, lr}
   16344:	add	fp, sp, #8
   16348:	mov	r4, r1
   1634c:	mov	r1, #3
   16350:	bl	170f4 <__assert_fail@plt+0x61a0>
   16354:	udiv	r1, r0, r4
   16358:	mls	r0, r1, r4, r0
   1635c:	pop	{r4, sl, fp, pc}
   16360:	sub	r0, r0, r1
   16364:	clz	r0, r0
   16368:	lsr	r0, r0, #5
   1636c:	bx	lr
   16370:	mov	r1, r0
   16374:	ldr	r3, [r0, #20]
   16378:	mov	r0, #1
   1637c:	movw	r2, #31416	; 0x7ab8
   16380:	movt	r2, #1
   16384:	cmp	r3, r2
   16388:	beq	1640c <__assert_fail@plt+0x54b8>
   1638c:	vldr	s2, [pc, #124]	; 16410 <__assert_fail@plt+0x54bc>
   16390:	vldr	s0, [r3, #8]
   16394:	vcmpe.f32	s0, s2
   16398:	vmrs	APSR_nzcv, fpscr
   1639c:	ble	16404 <__assert_fail@plt+0x54b0>
   163a0:	vldr	s4, [pc, #108]	; 16414 <__assert_fail@plt+0x54c0>
   163a4:	vcmpe.f32	s0, s4
   163a8:	vmrs	APSR_nzcv, fpscr
   163ac:	bpl	16404 <__assert_fail@plt+0x54b0>
   163b0:	vldr	s4, [pc, #96]	; 16418 <__assert_fail@plt+0x54c4>
   163b4:	vldr	s6, [r3, #12]
   163b8:	vcmpe.f32	s6, s4
   163bc:	vmrs	APSR_nzcv, fpscr
   163c0:	ble	16404 <__assert_fail@plt+0x54b0>
   163c4:	vldr	s4, [r3]
   163c8:	vcmpe.f32	s4, #0.0
   163cc:	vmrs	APSR_nzcv, fpscr
   163d0:	blt	16404 <__assert_fail@plt+0x54b0>
   163d4:	vadd.f32	s2, s4, s2
   163d8:	vcmpe.f32	s2, s0
   163dc:	vmrs	APSR_nzcv, fpscr
   163e0:	bpl	16404 <__assert_fail@plt+0x54b0>
   163e4:	vldr	s0, [r3, #4]
   163e8:	vmov.f32	s4, #112	; 0x3f800000  1.0
   163ec:	vcmpe.f32	s0, s4
   163f0:	vmrs	APSR_nzcv, fpscr
   163f4:	bhi	16404 <__assert_fail@plt+0x54b0>
   163f8:	vcmpe.f32	s2, s0
   163fc:	vmrs	APSR_nzcv, fpscr
   16400:	bxmi	lr
   16404:	str	r2, [r1, #20]
   16408:	mov	r0, #0
   1640c:	bx	lr
   16410:	stclcc	12, cr12, [ip, #820]	; 0x334
   16414:	svccc	0x00666666
   16418:	svccc	0x008ccccd
   1641c:	ldrb	r2, [r1, #16]
   16420:	cmp	r2, #0
   16424:	bne	16454 <__assert_fail@plt+0x5500>
   16428:	vldr	s0, [r1, #8]
   1642c:	vmov	s2, r0
   16430:	vcvt.f32.u32	s2, s2
   16434:	vdiv.f32	s2, s2, s0
   16438:	vcvt.u32.f32	s0, s2
   1643c:	vldr	s4, [pc, #44]	; 16470 <__assert_fail@plt+0x551c>
   16440:	mov	r0, #0
   16444:	vcmpe.f32	s2, s4
   16448:	vmrs	APSR_nzcv, fpscr
   1644c:	bxge	lr
   16450:	vmov	r0, s0
   16454:	push	{fp, lr}
   16458:	mov	fp, sp
   1645c:	bl	16c40 <__assert_fail@plt+0x5cec>
   16460:	cmn	r0, #-536870911	; 0xe0000001
   16464:	movwhi	r0, #0
   16468:	pop	{fp, lr}
   1646c:	bx	lr
   16470:	svcmi	0x00800000
   16474:	push	{r4, r5, r6, r7, fp, lr}
   16478:	add	fp, sp, #16
   1647c:	mov	r4, r0
   16480:	ldr	r5, [r0]
   16484:	ldr	r0, [r0, #4]
   16488:	cmp	r5, r0
   1648c:	bcs	16524 <__assert_fail@plt+0x55d0>
   16490:	mov	r6, #0
   16494:	ldr	r0, [r5]
   16498:	cmp	r0, #0
   1649c:	beq	16514 <__assert_fail@plt+0x55c0>
   164a0:	ldr	r7, [r5, #4]
   164a4:	ldr	r1, [r4, #32]
   164a8:	cmp	r1, #0
   164ac:	mov	r0, r1
   164b0:	movwne	r0, #1
   164b4:	cmp	r7, #0
   164b8:	beq	164fc <__assert_fail@plt+0x55a8>
   164bc:	tst	r0, #1
   164c0:	beq	164cc <__assert_fail@plt+0x5578>
   164c4:	ldr	r0, [r7]
   164c8:	blx	r1
   164cc:	str	r6, [r7]
   164d0:	ldr	r2, [r7, #4]
   164d4:	ldr	r0, [r4, #36]	; 0x24
   164d8:	str	r0, [r7, #4]
   164dc:	str	r7, [r4, #36]	; 0x24
   164e0:	ldr	r1, [r4, #32]
   164e4:	cmp	r1, #0
   164e8:	mov	r0, r1
   164ec:	movwne	r0, #1
   164f0:	cmp	r2, #0
   164f4:	mov	r7, r2
   164f8:	bne	164bc <__assert_fail@plt+0x5568>
   164fc:	cmp	r0, #0
   16500:	beq	1650c <__assert_fail@plt+0x55b8>
   16504:	ldr	r0, [r5]
   16508:	blx	r1
   1650c:	str	r6, [r5]
   16510:	str	r6, [r5, #4]
   16514:	ldr	r0, [r4, #4]
   16518:	add	r5, r5, #8
   1651c:	cmp	r5, r0
   16520:	bcc	16494 <__assert_fail@plt+0x5540>
   16524:	mov	r0, #0
   16528:	str	r0, [r4, #12]
   1652c:	str	r0, [r4, #16]
   16530:	pop	{r4, r5, r6, r7, fp, pc}
   16534:	push	{r4, r5, r6, sl, fp, lr}
   16538:	add	fp, sp, #16
   1653c:	mov	r4, r0
   16540:	ldr	r0, [r0, #32]
   16544:	cmp	r0, #0
   16548:	ldrne	r0, [r4, #16]
   1654c:	cmpne	r0, #0
   16550:	beq	165a8 <__assert_fail@plt+0x5654>
   16554:	ldr	r5, [r4]
   16558:	ldr	r0, [r4, #4]
   1655c:	cmp	r5, r0
   16560:	bcc	16578 <__assert_fail@plt+0x5624>
   16564:	b	165a8 <__assert_fail@plt+0x5654>
   16568:	ldr	r0, [r4, #4]
   1656c:	add	r5, r5, #8
   16570:	cmp	r5, r0
   16574:	bcs	165a8 <__assert_fail@plt+0x5654>
   16578:	ldr	r0, [r5]
   1657c:	cmp	r0, #0
   16580:	cmpne	r5, #0
   16584:	beq	16568 <__assert_fail@plt+0x5614>
   16588:	mov	r6, r5
   1658c:	ldr	r0, [r6]
   16590:	ldr	r1, [r4, #32]
   16594:	blx	r1
   16598:	ldr	r6, [r6, #4]
   1659c:	cmp	r6, #0
   165a0:	bne	1658c <__assert_fail@plt+0x5638>
   165a4:	b	16568 <__assert_fail@plt+0x5614>
   165a8:	ldr	r5, [r4]
   165ac:	ldr	r0, [r4, #4]
   165b0:	cmp	r5, r0
   165b4:	bcc	165cc <__assert_fail@plt+0x5678>
   165b8:	b	165f0 <__assert_fail@plt+0x569c>
   165bc:	ldr	r0, [r4, #4]
   165c0:	add	r5, r5, #8
   165c4:	cmp	r5, r0
   165c8:	bcs	165f0 <__assert_fail@plt+0x569c>
   165cc:	ldr	r0, [r5, #4]
   165d0:	cmp	r0, #0
   165d4:	beq	165bc <__assert_fail@plt+0x5668>
   165d8:	ldr	r6, [r0, #4]
   165dc:	bl	13094 <__assert_fail@plt+0x2140>
   165e0:	cmp	r6, #0
   165e4:	mov	r0, r6
   165e8:	bne	165d8 <__assert_fail@plt+0x5684>
   165ec:	b	165bc <__assert_fail@plt+0x5668>
   165f0:	ldr	r0, [r4, #36]	; 0x24
   165f4:	cmp	r0, #0
   165f8:	beq	16610 <__assert_fail@plt+0x56bc>
   165fc:	ldr	r5, [r0, #4]
   16600:	bl	13094 <__assert_fail@plt+0x2140>
   16604:	cmp	r5, #0
   16608:	mov	r0, r5
   1660c:	bne	165fc <__assert_fail@plt+0x56a8>
   16610:	ldr	r0, [r4]
   16614:	bl	13094 <__assert_fail@plt+0x2140>
   16618:	mov	r0, r4
   1661c:	pop	{r4, r5, r6, sl, fp, lr}
   16620:	b	13094 <__assert_fail@plt+0x2140>
   16624:	push	{r4, r5, r6, sl, fp, lr}
   16628:	add	fp, sp, #16
   1662c:	sub	sp, sp, #40	; 0x28
   16630:	mov	r2, r1
   16634:	mov	r4, r0
   16638:	ldr	r1, [r0, #20]
   1663c:	mov	r0, r2
   16640:	bl	1641c <__assert_fail@plt+0x54c8>
   16644:	mov	r5, #0
   16648:	cmp	r0, #0
   1664c:	beq	16728 <__assert_fail@plt+0x57d4>
   16650:	mov	r6, r0
   16654:	ldr	r0, [r4, #8]
   16658:	cmp	r6, r0
   1665c:	bne	16668 <__assert_fail@plt+0x5714>
   16660:	mov	r5, #1
   16664:	b	16728 <__assert_fail@plt+0x57d4>
   16668:	mov	r0, r6
   1666c:	mov	r1, #8
   16670:	bl	16f40 <__assert_fail@plt+0x5fec>
   16674:	str	r0, [sp]
   16678:	cmp	r0, #0
   1667c:	beq	16728 <__assert_fail@plt+0x57d4>
   16680:	str	r6, [sp, #8]
   16684:	mov	r0, #0
   16688:	str	r0, [sp, #12]
   1668c:	str	r0, [sp, #16]
   16690:	ldr	r0, [sp]
   16694:	add	r0, r0, r6, lsl #3
   16698:	str	r0, [sp, #4]
   1669c:	add	r6, r4, #20
   166a0:	ldm	r6, {r0, r1, r2, r3, r6}
   166a4:	add	ip, sp, #20
   166a8:	stm	ip, {r0, r1, r2, r3, r6}
   166ac:	mov	r0, sp
   166b0:	mov	r1, r4
   166b4:	mov	r2, #0
   166b8:	bl	16738 <__assert_fail@plt+0x57e4>
   166bc:	cmp	r0, #0
   166c0:	beq	166e4 <__assert_fail@plt+0x5790>
   166c4:	ldr	r0, [r4]
   166c8:	bl	13094 <__assert_fail@plt+0x2140>
   166cc:	ldm	sp, {r0, r1, r2, r3}
   166d0:	stm	r4, {r0, r1, r2, r3}
   166d4:	ldr	r0, [sp, #36]	; 0x24
   166d8:	str	r0, [r4, #36]	; 0x24
   166dc:	mov	r5, #1
   166e0:	b	16728 <__assert_fail@plt+0x57d4>
   166e4:	ldr	r0, [sp, #36]	; 0x24
   166e8:	str	r0, [r4, #36]	; 0x24
   166ec:	mov	r1, sp
   166f0:	mov	r0, r4
   166f4:	mov	r2, #1
   166f8:	bl	16738 <__assert_fail@plt+0x57e4>
   166fc:	cmp	r0, #0
   16700:	beq	16734 <__assert_fail@plt+0x57e0>
   16704:	mov	r1, sp
   16708:	mov	r5, #0
   1670c:	mov	r0, r4
   16710:	mov	r2, #0
   16714:	bl	16738 <__assert_fail@plt+0x57e4>
   16718:	cmp	r0, #0
   1671c:	beq	16734 <__assert_fail@plt+0x57e0>
   16720:	ldr	r0, [sp]
   16724:	bl	13094 <__assert_fail@plt+0x2140>
   16728:	mov	r0, r5
   1672c:	sub	sp, fp, #16
   16730:	pop	{r4, r5, r6, sl, fp, pc}
   16734:	bl	10f18 <abort@plt>
   16738:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1673c:	add	fp, sp, #28
   16740:	sub	sp, sp, #4
   16744:	mov	r7, r0
   16748:	ldr	r6, [r1]
   1674c:	ldr	r0, [r1, #4]
   16750:	cmp	r6, r0
   16754:	bcs	16858 <__assert_fail@plt+0x5904>
   16758:	mov	r9, r2
   1675c:	mov	sl, r1
   16760:	ldr	r0, [r6]
   16764:	cmp	r0, #0
   16768:	beq	16848 <__assert_fail@plt+0x58f4>
   1676c:	ldr	r4, [r6, #4]
   16770:	cmp	r4, #0
   16774:	beq	167d0 <__assert_fail@plt+0x587c>
   16778:	ldr	r5, [r4]
   1677c:	mov	r0, r7
   16780:	mov	r1, r5
   16784:	bl	1603c <__assert_fail@plt+0x50e8>
   16788:	ldr	r1, [r0]
   1678c:	ldr	r8, [r4, #4]
   16790:	cmp	r1, #0
   16794:	beq	167a8 <__assert_fail@plt+0x5854>
   16798:	ldr	r1, [r0, #4]
   1679c:	str	r1, [r4, #4]
   167a0:	str	r4, [r0, #4]
   167a4:	b	167c4 <__assert_fail@plt+0x5870>
   167a8:	str	r5, [r0]
   167ac:	ldr	r0, [r7, #12]
   167b0:	add	r0, r0, #1
   167b4:	str	r0, [r7, #12]
   167b8:	mov	r0, r7
   167bc:	mov	r1, r4
   167c0:	bl	16ce0 <__assert_fail@plt+0x5d8c>
   167c4:	cmp	r8, #0
   167c8:	mov	r4, r8
   167cc:	bne	16778 <__assert_fail@plt+0x5824>
   167d0:	mov	r0, #0
   167d4:	str	r0, [r6, #4]
   167d8:	cmp	r9, #0
   167dc:	bne	16848 <__assert_fail@plt+0x58f4>
   167e0:	ldr	r4, [r6]
   167e4:	mov	r0, r7
   167e8:	mov	r1, r4
   167ec:	bl	1603c <__assert_fail@plt+0x50e8>
   167f0:	mov	r5, r0
   167f4:	ldr	r0, [r0]
   167f8:	cmp	r0, #0
   167fc:	beq	16824 <__assert_fail@plt+0x58d0>
   16800:	mov	r0, r7
   16804:	bl	16ac4 <__assert_fail@plt+0x5b70>
   16808:	cmp	r0, #0
   1680c:	beq	16864 <__assert_fail@plt+0x5910>
   16810:	str	r4, [r0]
   16814:	ldr	r1, [r5, #4]
   16818:	str	r1, [r0, #4]
   1681c:	str	r0, [r5, #4]
   16820:	b	16834 <__assert_fail@plt+0x58e0>
   16824:	str	r4, [r5]
   16828:	ldr	r0, [r7, #12]
   1682c:	add	r0, r0, #1
   16830:	str	r0, [r7, #12]
   16834:	mov	r0, #0
   16838:	str	r0, [r6]
   1683c:	ldr	r0, [sl, #12]
   16840:	sub	r0, r0, #1
   16844:	str	r0, [sl, #12]
   16848:	add	r6, r6, #8
   1684c:	ldr	r0, [sl, #4]
   16850:	cmp	r6, r0
   16854:	bcc	16760 <__assert_fail@plt+0x580c>
   16858:	mov	r0, #1
   1685c:	sub	sp, fp, #28
   16860:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16864:	mov	r0, #0
   16868:	sub	sp, fp, #28
   1686c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16870:	push	{r4, r5, r6, r7, fp, lr}
   16874:	add	fp, sp, #16
   16878:	sub	sp, sp, #8
   1687c:	cmp	r1, #0
   16880:	beq	169e0 <__assert_fail@plt+0x5a8c>
   16884:	mov	r7, r2
   16888:	mov	r5, r1
   1688c:	mov	r4, r0
   16890:	add	r2, sp, #4
   16894:	mov	r6, #0
   16898:	mov	r3, #0
   1689c:	bl	169e8 <__assert_fail@plt+0x5a94>
   168a0:	cmp	r0, #0
   168a4:	beq	168b4 <__assert_fail@plt+0x5960>
   168a8:	cmp	r7, #0
   168ac:	strne	r0, [r7]
   168b0:	b	169d4 <__assert_fail@plt+0x5a80>
   168b4:	vldr	s0, [r4, #8]
   168b8:	vldr	s2, [r4, #12]
   168bc:	ldr	r0, [r4, #20]
   168c0:	vldr	s4, [r0, #8]
   168c4:	vcvt.f32.u32	s0, s0
   168c8:	vcvt.f32.u32	s2, s2
   168cc:	vmul.f32	s0, s4, s0
   168d0:	vcmpe.f32	s0, s2
   168d4:	vmrs	APSR_nzcv, fpscr
   168d8:	bpl	1696c <__assert_fail@plt+0x5a18>
   168dc:	mov	r0, r4
   168e0:	bl	16370 <__assert_fail@plt+0x541c>
   168e4:	vldr	s0, [r4, #8]
   168e8:	vldr	s4, [r4, #12]
   168ec:	ldr	r0, [r4, #20]
   168f0:	vcvt.f32.u32	s2, s0
   168f4:	vldr	s0, [r0, #8]
   168f8:	vcvt.f32.u32	s4, s4
   168fc:	vmul.f32	s6, s0, s2
   16900:	vcmpe.f32	s6, s4
   16904:	vmrs	APSR_nzcv, fpscr
   16908:	bpl	1696c <__assert_fail@plt+0x5a18>
   1690c:	vldr	s4, [r0, #12]
   16910:	vmul.f32	s2, s4, s2
   16914:	ldrb	r0, [r0, #16]
   16918:	vmul.f32	s0, s0, s2
   1691c:	mvn	r6, #0
   16920:	vldr	s4, [pc, #188]	; 169e4 <__assert_fail@plt+0x5a90>
   16924:	cmp	r0, #0
   16928:	vseleq.f32	s0, s0, s2
   1692c:	vcmpe.f32	s0, s4
   16930:	vmrs	APSR_nzcv, fpscr
   16934:	bge	169d4 <__assert_fail@plt+0x5a80>
   16938:	vcvt.u32.f32	s0, s0
   1693c:	vmov	r1, s0
   16940:	mov	r0, r4
   16944:	bl	16624 <__assert_fail@plt+0x56d0>
   16948:	cmp	r0, #0
   1694c:	beq	169d4 <__assert_fail@plt+0x5a80>
   16950:	add	r2, sp, #4
   16954:	mov	r0, r4
   16958:	mov	r1, r5
   1695c:	mov	r3, #0
   16960:	bl	169e8 <__assert_fail@plt+0x5a94>
   16964:	cmp	r0, #0
   16968:	bne	169e0 <__assert_fail@plt+0x5a8c>
   1696c:	ldr	r6, [sp, #4]
   16970:	ldr	r0, [r6]
   16974:	cmp	r0, #0
   16978:	beq	169ac <__assert_fail@plt+0x5a58>
   1697c:	mov	r0, r4
   16980:	bl	16ac4 <__assert_fail@plt+0x5b70>
   16984:	cmp	r0, #0
   16988:	beq	169d0 <__assert_fail@plt+0x5a7c>
   1698c:	str	r5, [r0]
   16990:	ldr	r1, [r6, #4]
   16994:	str	r1, [r0, #4]
   16998:	str	r0, [r6, #4]
   1699c:	ldr	r0, [r4, #16]
   169a0:	add	r0, r0, #1
   169a4:	str	r0, [r4, #16]
   169a8:	b	169c8 <__assert_fail@plt+0x5a74>
   169ac:	str	r5, [r6]
   169b0:	ldr	r0, [r4, #12]
   169b4:	ldr	r1, [r4, #16]
   169b8:	add	r1, r1, #1
   169bc:	add	r0, r0, #1
   169c0:	str	r0, [r4, #12]
   169c4:	str	r1, [r4, #16]
   169c8:	mov	r6, #1
   169cc:	b	169d4 <__assert_fail@plt+0x5a80>
   169d0:	mvn	r6, #0
   169d4:	mov	r0, r6
   169d8:	sub	sp, fp, #16
   169dc:	pop	{r4, r5, r6, r7, fp, pc}
   169e0:	bl	10f18 <abort@plt>
   169e4:	svcmi	0x00800000
   169e8:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   169ec:	add	fp, sp, #24
   169f0:	mov	r8, r3
   169f4:	mov	r4, r2
   169f8:	mov	r7, r1
   169fc:	mov	r5, r0
   16a00:	bl	1603c <__assert_fail@plt+0x50e8>
   16a04:	str	r0, [r4]
   16a08:	ldr	r1, [r0]
   16a0c:	mov	r4, #0
   16a10:	cmp	r1, #0
   16a14:	beq	16abc <__assert_fail@plt+0x5b68>
   16a18:	mov	r6, r0
   16a1c:	cmp	r1, r7
   16a20:	beq	16a38 <__assert_fail@plt+0x5ae4>
   16a24:	ldr	r2, [r5, #28]
   16a28:	mov	r0, r7
   16a2c:	blx	r2
   16a30:	cmp	r0, #0
   16a34:	beq	16a60 <__assert_fail@plt+0x5b0c>
   16a38:	ldr	r4, [r6]
   16a3c:	cmp	r8, #0
   16a40:	beq	16abc <__assert_fail@plt+0x5b68>
   16a44:	ldr	r1, [r6, #4]
   16a48:	cmp	r1, #0
   16a4c:	beq	16ab4 <__assert_fail@plt+0x5b60>
   16a50:	ldm	r1, {r0, r2}
   16a54:	stm	r6, {r0, r2}
   16a58:	b	16aa4 <__assert_fail@plt+0x5b50>
   16a5c:	ldr	r6, [r6]
   16a60:	ldr	r0, [r6, #4]!
   16a64:	cmp	r0, #0
   16a68:	beq	16abc <__assert_fail@plt+0x5b68>
   16a6c:	ldr	r1, [r0]
   16a70:	cmp	r1, r7
   16a74:	beq	16a8c <__assert_fail@plt+0x5b38>
   16a78:	ldr	r2, [r5, #28]
   16a7c:	mov	r0, r7
   16a80:	blx	r2
   16a84:	cmp	r0, #0
   16a88:	beq	16a5c <__assert_fail@plt+0x5b08>
   16a8c:	ldr	r1, [r6]
   16a90:	ldr	r4, [r1]
   16a94:	cmp	r8, #0
   16a98:	beq	16abc <__assert_fail@plt+0x5b68>
   16a9c:	ldr	r0, [r1, #4]
   16aa0:	str	r0, [r6]
   16aa4:	mov	r0, r5
   16aa8:	bl	16ce0 <__assert_fail@plt+0x5d8c>
   16aac:	mov	r0, r4
   16ab0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   16ab4:	mov	r0, #0
   16ab8:	str	r0, [r6]
   16abc:	mov	r0, r4
   16ac0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   16ac4:	mov	r1, r0
   16ac8:	ldr	r0, [r0, #36]	; 0x24
   16acc:	cmp	r0, #0
   16ad0:	ldrne	r2, [r0, #4]
   16ad4:	strne	r2, [r1, #36]	; 0x24
   16ad8:	bxne	lr
   16adc:	push	{fp, lr}
   16ae0:	mov	fp, sp
   16ae4:	mov	r0, #8
   16ae8:	bl	16f94 <__assert_fail@plt+0x6040>
   16aec:	pop	{fp, pc}
   16af0:	push	{r4, sl, fp, lr}
   16af4:	add	fp, sp, #8
   16af8:	sub	sp, sp, #8
   16afc:	mov	r4, r1
   16b00:	add	r2, sp, #4
   16b04:	bl	16870 <__assert_fail@plt+0x591c>
   16b08:	cmn	r0, #1
   16b0c:	beq	16b20 <__assert_fail@plt+0x5bcc>
   16b10:	ldr	r1, [sp, #4]
   16b14:	cmp	r0, #0
   16b18:	moveq	r4, r1
   16b1c:	b	16b24 <__assert_fail@plt+0x5bd0>
   16b20:	mov	r4, #0
   16b24:	mov	r0, r4
   16b28:	sub	sp, fp, #8
   16b2c:	pop	{r4, sl, fp, pc}
   16b30:	push	{r4, r5, r6, sl, fp, lr}
   16b34:	add	fp, sp, #16
   16b38:	sub	sp, sp, #8
   16b3c:	mov	r4, r0
   16b40:	add	r2, sp, #4
   16b44:	mov	r3, #1
   16b48:	bl	169e8 <__assert_fail@plt+0x5a94>
   16b4c:	mov	r5, r0
   16b50:	cmp	r0, #0
   16b54:	beq	16c30 <__assert_fail@plt+0x5cdc>
   16b58:	ldr	r0, [r4, #16]
   16b5c:	sub	r0, r0, #1
   16b60:	str	r0, [r4, #16]
   16b64:	ldr	r0, [sp, #4]
   16b68:	ldr	r0, [r0]
   16b6c:	cmp	r0, #0
   16b70:	bne	16c30 <__assert_fail@plt+0x5cdc>
   16b74:	ldr	r0, [r4, #12]
   16b78:	sub	r0, r0, #1
   16b7c:	vldr	s0, [r4, #8]
   16b80:	str	r0, [r4, #12]
   16b84:	ldr	r1, [r4, #20]
   16b88:	vldr	s2, [r1]
   16b8c:	vcvt.f32.u32	s0, s0
   16b90:	vmov	s4, r0
   16b94:	vcvt.f32.u32	s4, s4
   16b98:	vmul.f32	s0, s2, s0
   16b9c:	vcmpe.f32	s0, s4
   16ba0:	vmrs	APSR_nzcv, fpscr
   16ba4:	ble	16c30 <__assert_fail@plt+0x5cdc>
   16ba8:	mov	r0, r4
   16bac:	bl	16370 <__assert_fail@plt+0x541c>
   16bb0:	vldr	s0, [r4, #8]
   16bb4:	vldr	s2, [r4, #12]
   16bb8:	ldr	r0, [r4, #20]
   16bbc:	vcvt.f32.u32	s0, s0
   16bc0:	vldr	s4, [r0]
   16bc4:	vcvt.f32.u32	s2, s2
   16bc8:	vmul.f32	s4, s4, s0
   16bcc:	vcmpe.f32	s4, s2
   16bd0:	vmrs	APSR_nzcv, fpscr
   16bd4:	ble	16c30 <__assert_fail@plt+0x5cdc>
   16bd8:	vldr	s2, [r0, #4]
   16bdc:	ldrb	r1, [r0, #16]
   16be0:	vmul.f32	s0, s2, s0
   16be4:	cmp	r1, #0
   16be8:	vldreq	s2, [r0, #8]
   16bec:	vmuleq.f32	s0, s0, s2
   16bf0:	vcvt.u32.f32	s0, s0
   16bf4:	vmov	r1, s0
   16bf8:	mov	r0, r4
   16bfc:	bl	16624 <__assert_fail@plt+0x56d0>
   16c00:	cmp	r0, #0
   16c04:	bne	16c30 <__assert_fail@plt+0x5cdc>
   16c08:	ldr	r0, [r4, #36]	; 0x24
   16c0c:	cmp	r0, #0
   16c10:	beq	16c28 <__assert_fail@plt+0x5cd4>
   16c14:	ldr	r6, [r0, #4]
   16c18:	bl	13094 <__assert_fail@plt+0x2140>
   16c1c:	cmp	r6, #0
   16c20:	mov	r0, r6
   16c24:	bne	16c14 <__assert_fail@plt+0x5cc0>
   16c28:	mov	r0, #0
   16c2c:	str	r0, [r4, #36]	; 0x24
   16c30:	mov	r0, r5
   16c34:	sub	sp, fp, #16
   16c38:	pop	{r4, r5, r6, sl, fp, pc}
   16c3c:	b	16b30 <__assert_fail@plt+0x5bdc>
   16c40:	push	{r4, r5, fp, lr}
   16c44:	add	fp, sp, #8
   16c48:	cmp	r0, #10
   16c4c:	movls	r0, #10
   16c50:	orr	r5, r0, #1
   16c54:	mvn	r4, #0
   16c58:	cmn	r5, #1
   16c5c:	bne	16c74 <__assert_fail@plt+0x5d20>
   16c60:	mov	r0, r4
   16c64:	pop	{r4, r5, fp, pc}
   16c68:	add	r5, r5, #2
   16c6c:	cmn	r5, #1
   16c70:	beq	16c60 <__assert_fail@plt+0x5d0c>
   16c74:	mov	r0, r5
   16c78:	bl	16c90 <__assert_fail@plt+0x5d3c>
   16c7c:	cmp	r0, #0
   16c80:	beq	16c68 <__assert_fail@plt+0x5d14>
   16c84:	mov	r4, r5
   16c88:	mov	r0, r4
   16c8c:	pop	{r4, r5, fp, pc}
   16c90:	mov	ip, #3
   16c94:	cmp	r0, #10
   16c98:	bcc	16ccc <__assert_fail@plt+0x5d78>
   16c9c:	mov	ip, #3
   16ca0:	mov	r2, #9
   16ca4:	mov	r3, #16
   16ca8:	udiv	r1, r0, ip
   16cac:	mls	r1, r1, ip, r0
   16cb0:	cmp	r1, #0
   16cb4:	beq	16ccc <__assert_fail@plt+0x5d78>
   16cb8:	add	r2, r3, r2
   16cbc:	add	r3, r3, #8
   16cc0:	add	ip, ip, #2
   16cc4:	cmp	r2, r0
   16cc8:	bcc	16ca8 <__assert_fail@plt+0x5d54>
   16ccc:	udiv	r1, r0, ip
   16cd0:	mls	r0, r1, ip, r0
   16cd4:	cmp	r0, #0
   16cd8:	movwne	r0, #1
   16cdc:	bx	lr
   16ce0:	mov	r2, #0
   16ce4:	str	r2, [r1]
   16ce8:	ldr	r2, [r0, #36]	; 0x24
   16cec:	str	r2, [r1, #4]
   16cf0:	str	r1, [r0, #36]	; 0x24
   16cf4:	bx	lr
   16cf8:	mov	r2, #0
   16cfc:	mov	r3, #1
   16d00:	strb	r3, [r0, #28]
   16d04:	str	r2, [r0, #20]
   16d08:	str	r2, [r0, #24]
   16d0c:	str	r1, [r0, r2, lsl #2]
   16d10:	add	r2, r2, #1
   16d14:	cmp	r2, #4
   16d18:	bne	16d0c <__assert_fail@plt+0x5db8>
   16d1c:	str	r1, [r0, #16]
   16d20:	bx	lr
   16d24:	ldrb	r0, [r0, #28]
   16d28:	bx	lr
   16d2c:	ldr	r2, [r0, #20]
   16d30:	ldrb	r3, [r0, #28]
   16d34:	eor	r3, r3, #1
   16d38:	add	r2, r2, r3
   16d3c:	and	r2, r2, #3
   16d40:	ldr	ip, [r0, r2, lsl #2]
   16d44:	str	r1, [r0, r2, lsl #2]
   16d48:	str	r2, [r0, #20]
   16d4c:	ldr	r1, [r0, #24]
   16d50:	cmp	r2, r1
   16d54:	addeq	r1, r1, r3
   16d58:	andeq	r1, r1, #3
   16d5c:	streq	r1, [r0, #24]
   16d60:	mov	r1, #0
   16d64:	strb	r1, [r0, #28]
   16d68:	mov	r0, ip
   16d6c:	bx	lr
   16d70:	push	{r4, sl, fp, lr}
   16d74:	add	fp, sp, #8
   16d78:	mov	r4, r0
   16d7c:	bl	16d24 <__assert_fail@plt+0x5dd0>
   16d80:	cmp	r0, #0
   16d84:	bne	16dc0 <__assert_fail@plt+0x5e6c>
   16d88:	ldr	r1, [r4, #16]
   16d8c:	ldr	r2, [r4, #20]
   16d90:	ldr	r0, [r4, r2, lsl #2]
   16d94:	str	r1, [r4, r2, lsl #2]
   16d98:	ldr	r1, [r4, #20]
   16d9c:	ldr	r2, [r4, #24]
   16da0:	cmp	r1, r2
   16da4:	moveq	r1, #1
   16da8:	strbeq	r1, [r4, #28]
   16dac:	popeq	{r4, sl, fp, pc}
   16db0:	sub	r1, r1, #1
   16db4:	and	r1, r1, #3
   16db8:	str	r1, [r4, #20]
   16dbc:	pop	{r4, sl, fp, pc}
   16dc0:	bl	10f18 <abort@plt>
   16dc4:	push	{r4, r5, r6, sl, fp, lr}
   16dc8:	add	fp, sp, #16
   16dcc:	mov	r4, r1
   16dd0:	mov	r5, r0
   16dd4:	mov	r0, #0
   16dd8:	strb	r0, [r2, #20]
   16ddc:	add	r6, r2, #19
   16de0:	mov	r0, r5
   16de4:	mov	r1, r4
   16de8:	mov	r2, #10
   16dec:	mov	r3, #0
   16df0:	bl	17594 <__assert_fail@plt+0x6640>
   16df4:	add	r2, r0, r0, lsl #2
   16df8:	sub	r2, r5, r2, lsl #1
   16dfc:	orr	r2, r2, #48	; 0x30
   16e00:	strb	r2, [r6], #-1
   16e04:	rsbs	r2, r5, #9
   16e08:	rscs	r2, r4, #0
   16e0c:	mov	r5, r0
   16e10:	mov	r4, r1
   16e14:	bcc	16de0 <__assert_fail@plt+0x5e8c>
   16e18:	add	r0, r6, #1
   16e1c:	pop	{r4, r5, r6, sl, fp, pc}
   16e20:	sub	sp, sp, #8
   16e24:	push	{fp, lr}
   16e28:	mov	fp, sp
   16e2c:	sub	sp, sp, #8
   16e30:	str	r3, [fp, #12]
   16e34:	str	r2, [fp, #8]
   16e38:	add	r2, fp, #8
   16e3c:	orr	r2, r2, #4
   16e40:	str	r2, [sp, #4]
   16e44:	ldr	r2, [fp, #8]
   16e48:	bl	10db0 <ioctl@plt>
   16e4c:	mov	sp, fp
   16e50:	pop	{fp, lr}
   16e54:	add	sp, sp, #8
   16e58:	bx	lr
   16e5c:	sub	sp, sp, #4
   16e60:	push	{fp, lr}
   16e64:	mov	fp, sp
   16e68:	sub	sp, sp, #4
   16e6c:	str	r3, [fp, #8]
   16e70:	mov	r3, #0
   16e74:	tst	r2, #64	; 0x40
   16e78:	addne	r3, fp, #8
   16e7c:	addne	r3, r3, #4
   16e80:	strne	r3, [sp]
   16e84:	ldrne	r3, [fp, #8]
   16e88:	bl	10e34 <openat64@plt>
   16e8c:	bl	16efc <__assert_fail@plt+0x5fa8>
   16e90:	mov	sp, fp
   16e94:	pop	{fp, lr}
   16e98:	add	sp, sp, #4
   16e9c:	bx	lr
   16ea0:	push	{r4, r5, r6, sl, fp, lr}
   16ea4:	add	fp, sp, #16
   16ea8:	mov	r4, r3
   16eac:	orr	r2, r2, #18688	; 0x4900
   16eb0:	orr	r2, r2, #524288	; 0x80000
   16eb4:	bl	16e5c <__assert_fail@plt+0x5f08>
   16eb8:	mov	r5, r0
   16ebc:	mov	r0, #0
   16ec0:	cmp	r5, #0
   16ec4:	poplt	{r4, r5, r6, sl, fp, pc}
   16ec8:	mov	r0, r5
   16ecc:	bl	10eac <fdopendir@plt>
   16ed0:	cmp	r0, #0
   16ed4:	strne	r5, [r4]
   16ed8:	popne	{r4, r5, r6, sl, fp, pc}
   16edc:	bl	10e4c <__errno_location@plt>
   16ee0:	mov	r4, r0
   16ee4:	ldr	r6, [r0]
   16ee8:	mov	r0, r5
   16eec:	bl	10f24 <close@plt>
   16ef0:	str	r6, [r4]
   16ef4:	mov	r0, #0
   16ef8:	pop	{r4, r5, r6, sl, fp, pc}
   16efc:	push	{r4, r5, r6, r7, fp, lr}
   16f00:	add	fp, sp, #16
   16f04:	mov	r4, r0
   16f08:	cmp	r0, #2
   16f0c:	movhi	r0, r4
   16f10:	pophi	{r4, r5, r6, r7, fp, pc}
   16f14:	mov	r0, r4
   16f18:	bl	174b4 <__assert_fail@plt+0x6560>
   16f1c:	mov	r5, r0
   16f20:	bl	10e4c <__errno_location@plt>
   16f24:	mov	r6, r0
   16f28:	ldr	r7, [r0]
   16f2c:	mov	r0, r4
   16f30:	bl	10f24 <close@plt>
   16f34:	str	r7, [r6]
   16f38:	mov	r0, r5
   16f3c:	pop	{r4, r5, r6, r7, fp, pc}
   16f40:	clz	r2, r1
   16f44:	lsr	r2, r2, #5
   16f48:	clz	r3, r0
   16f4c:	lsr	r3, r3, #5
   16f50:	orrs	r2, r3, r2
   16f54:	movwne	r1, #1
   16f58:	movwne	r0, #1
   16f5c:	cmp	r1, #0
   16f60:	beq	16f90 <__assert_fail@plt+0x603c>
   16f64:	mvn	r2, #-2147483648	; 0x80000000
   16f68:	udiv	r2, r2, r1
   16f6c:	cmp	r2, r0
   16f70:	bcs	16f90 <__assert_fail@plt+0x603c>
   16f74:	push	{fp, lr}
   16f78:	mov	fp, sp
   16f7c:	bl	10e4c <__errno_location@plt>
   16f80:	mov	r1, #12
   16f84:	str	r1, [r0]
   16f88:	mov	r0, #0
   16f8c:	pop	{fp, pc}
   16f90:	b	10ce4 <calloc@plt>
   16f94:	cmp	r0, #0
   16f98:	movweq	r0, #1
   16f9c:	cmn	r0, #1
   16fa0:	ble	16fa8 <__assert_fail@plt+0x6054>
   16fa4:	b	10de0 <malloc@plt>
   16fa8:	push	{fp, lr}
   16fac:	mov	fp, sp
   16fb0:	bl	10e4c <__errno_location@plt>
   16fb4:	mov	r1, #12
   16fb8:	str	r1, [r0]
   16fbc:	mov	r0, #0
   16fc0:	pop	{fp, pc}
   16fc4:	push	{fp, lr}
   16fc8:	mov	fp, sp
   16fcc:	cmp	r0, #0
   16fd0:	beq	16fec <__assert_fail@plt+0x6098>
   16fd4:	cmp	r1, #0
   16fd8:	beq	16ff8 <__assert_fail@plt+0x60a4>
   16fdc:	cmn	r1, #1
   16fe0:	ble	17004 <__assert_fail@plt+0x60b0>
   16fe4:	pop	{fp, lr}
   16fe8:	b	10d68 <realloc@plt>
   16fec:	mov	r0, r1
   16ff0:	pop	{fp, lr}
   16ff4:	b	16f94 <__assert_fail@plt+0x6040>
   16ff8:	bl	13094 <__assert_fail@plt+0x2140>
   16ffc:	mov	r0, #0
   17000:	pop	{fp, pc}
   17004:	bl	10e4c <__errno_location@plt>
   17008:	mov	r1, #12
   1700c:	str	r1, [r0]
   17010:	mov	r0, #0
   17014:	pop	{fp, pc}
   17018:	push	{r4, r5, fp, lr}
   1701c:	add	fp, sp, #8
   17020:	rsb	lr, r2, #64	; 0x40
   17024:	lsr	ip, r0, lr
   17028:	rsb	r3, lr, #32
   1702c:	orr	ip, ip, r1, lsl r3
   17030:	rsb	r4, r2, #32
   17034:	cmp	r4, #0
   17038:	lsrge	ip, r1, r4
   1703c:	lsl	r3, r0, r2
   17040:	sub	r5, r2, #32
   17044:	cmp	r5, #0
   17048:	movwge	r3, #0
   1704c:	orr	ip, ip, r3
   17050:	lsr	r3, r0, r4
   17054:	orr	r2, r3, r1, lsl r2
   17058:	lslge	r2, r0, r5
   1705c:	lsr	r0, r1, lr
   17060:	cmp	r4, #0
   17064:	movwge	r0, #0
   17068:	orr	r1, r0, r2
   1706c:	mov	r0, ip
   17070:	pop	{r4, r5, fp, pc}
   17074:	push	{r4, r5, fp, lr}
   17078:	add	fp, sp, #8
   1707c:	lsr	ip, r0, r2
   17080:	rsb	r3, r2, #32
   17084:	orr	ip, ip, r1, lsl r3
   17088:	sub	lr, r2, #32
   1708c:	cmp	lr, #0
   17090:	lsrge	ip, r1, lr
   17094:	rsb	r4, r2, #64	; 0x40
   17098:	lsl	r5, r0, r4
   1709c:	cmp	r3, #0
   170a0:	movwge	r5, #0
   170a4:	orr	ip, r5, ip
   170a8:	rsb	r5, r4, #32
   170ac:	lsr	r5, r0, r5
   170b0:	orr	r4, r5, r1, lsl r4
   170b4:	cmp	r3, #0
   170b8:	lslge	r4, r0, r3
   170bc:	lsr	r0, r1, r2
   170c0:	cmp	lr, #0
   170c4:	movwge	r0, #0
   170c8:	orr	r1, r4, r0
   170cc:	mov	r0, ip
   170d0:	pop	{r4, r5, fp, pc}
   170d4:	rsb	r1, r1, #32
   170d8:	ror	r0, r0, r1
   170dc:	bx	lr
   170e0:	ror	r0, r0, r1
   170e4:	bx	lr
   170e8:	rsb	r1, r1, #32
   170ec:	ror	r0, r0, r1
   170f0:	bx	lr
   170f4:	ror	r0, r0, r1
   170f8:	bx	lr
   170fc:	and	r2, r1, #15
   17100:	lsl	r2, r0, r2
   17104:	rsb	r1, r1, #0
   17108:	and	r1, r1, #15
   1710c:	orr	r0, r2, r0, lsr r1
   17110:	uxth	r0, r0
   17114:	bx	lr
   17118:	and	r2, r1, #15
   1711c:	lsr	r2, r0, r2
   17120:	rsb	r1, r1, #0
   17124:	and	r1, r1, #15
   17128:	orr	r0, r2, r0, lsl r1
   1712c:	uxth	r0, r0
   17130:	bx	lr
   17134:	and	r2, r1, #7
   17138:	lsl	r2, r0, r2
   1713c:	rsb	r1, r1, #0
   17140:	and	r1, r1, #7
   17144:	orr	r0, r2, r0, lsr r1
   17148:	uxtb	r0, r0
   1714c:	bx	lr
   17150:	and	r2, r1, #7
   17154:	lsr	r2, r0, r2
   17158:	rsb	r1, r1, #0
   1715c:	and	r1, r1, #7
   17160:	orr	r0, r2, r0, lsl r1
   17164:	uxtb	r0, r0
   17168:	bx	lr
   1716c:	mov	r1, #0
   17170:	movw	r2, #62998	; 0xf616
   17174:	movt	r2, #149	; 0x95
   17178:	str	r1, [r0, #16]
   1717c:	str	r1, [r0, #20]
   17180:	str	r2, [r0, #24]
   17184:	bx	lr
   17188:	push	{r4, r5, r6, r7, r9, sl, fp, lr}
   1718c:	add	fp, sp, #24
   17190:	mov	r5, r1
   17194:	mov	r4, r0
   17198:	ldr	r0, [r0, #24]
   1719c:	movw	r1, #62998	; 0xf616
   171a0:	movt	r1, #149	; 0x95
   171a4:	cmp	r0, r1
   171a8:	bne	17248 <__assert_fail@plt+0x62f4>
   171ac:	mov	r1, r4
   171b0:	ldr	r2, [r1, #16]!
   171b4:	ldr	r3, [r1, #4]
   171b8:	orrs	r0, r2, r3
   171bc:	beq	171fc <__assert_fail@plt+0x62a8>
   171c0:	ldm	r4, {r0, r7}
   171c4:	ldr	r6, [r5, #96]	; 0x60
   171c8:	ldr	r9, [r5, #100]	; 0x64
   171cc:	eor	r7, r9, r7
   171d0:	eor	r0, r6, r0
   171d4:	orrs	r0, r0, r7
   171d8:	bne	171fc <__assert_fail@plt+0x62a8>
   171dc:	ldr	r0, [r4, #8]
   171e0:	ldr	r7, [r4, #12]
   171e4:	ldm	r5, {r6, r9}
   171e8:	eor	r7, r9, r7
   171ec:	eor	r0, r6, r0
   171f0:	orrs	r0, r0, r7
   171f4:	mov	r0, #1
   171f8:	popeq	{r4, r5, r6, r7, r9, sl, fp, pc}
   171fc:	adds	r6, r2, #1
   17200:	adc	r7, r3, #0
   17204:	strd	r6, [r1]
   17208:	mov	r0, r6
   1720c:	mov	r1, r7
   17210:	bl	17268 <__assert_fail@plt+0x6314>
   17214:	mov	r1, r0
   17218:	mov	r0, #0
   1721c:	cmp	r1, #0
   17220:	beq	17244 <__assert_fail@plt+0x62f0>
   17224:	orrs	r1, r6, r7
   17228:	moveq	r0, #1
   1722c:	popeq	{r4, r5, r6, r7, r9, sl, fp, pc}
   17230:	ldrd	r2, [r5]
   17234:	str	r3, [r4, #12]
   17238:	str	r2, [r4, #8]
   1723c:	ldrd	r2, [r5, #96]	; 0x60
   17240:	stm	r4, {r2, r3}
   17244:	pop	{r4, r5, r6, r7, r9, sl, fp, pc}
   17248:	movw	r0, #31436	; 0x7acc
   1724c:	movt	r0, #1
   17250:	movw	r1, #31460	; 0x7ae4
   17254:	movt	r1, #1
   17258:	movw	r3, #31474	; 0x7af2
   1725c:	movt	r3, #1
   17260:	mov	r2, #60	; 0x3c
   17264:	bl	10f54 <__assert_fail@plt>
   17268:	subs	r2, r0, #1
   1726c:	and	r0, r2, r0
   17270:	sbc	r2, r1, #0
   17274:	and	r1, r2, r1
   17278:	orr	r0, r0, r1
   1727c:	clz	r0, r0
   17280:	lsr	r0, r0, #5
   17284:	bx	lr
   17288:	sub	sp, sp, #8
   1728c:	push	{fp, lr}
   17290:	mov	fp, sp
   17294:	sub	sp, sp, #8
   17298:	str	r3, [fp, #12]
   1729c:	str	r2, [fp, #8]
   172a0:	add	r2, fp, #8
   172a4:	str	r2, [sp, #4]
   172a8:	cmp	r1, #11
   172ac:	bhi	172ec <__assert_fail@plt+0x6398>
   172b0:	mov	r2, #1
   172b4:	movw	r3, #1300	; 0x514
   172b8:	tst	r3, r2, lsl r1
   172bc:	bne	1733c <__assert_fail@plt+0x63e8>
   172c0:	movw	r3, #2570	; 0xa0a
   172c4:	tst	r3, r2, lsl r1
   172c8:	bne	17314 <__assert_fail@plt+0x63c0>
   172cc:	cmp	r1, #0
   172d0:	bne	172ec <__assert_fail@plt+0x6398>
   172d4:	ldr	r1, [sp, #4]
   172d8:	add	r2, r1, #4
   172dc:	str	r2, [sp, #4]
   172e0:	ldr	r1, [r1]
   172e4:	bl	17360 <__assert_fail@plt+0x640c>
   172e8:	b	17350 <__assert_fail@plt+0x63fc>
   172ec:	sub	r2, r1, #1024	; 0x400
   172f0:	cmp	r2, #10
   172f4:	bhi	1733c <__assert_fail@plt+0x63e8>
   172f8:	mov	ip, #1
   172fc:	movw	r3, #645	; 0x285
   17300:	tst	r3, ip, lsl r2
   17304:	bne	1733c <__assert_fail@plt+0x63e8>
   17308:	movw	r3, #1282	; 0x502
   1730c:	tst	r3, ip, lsl r2
   17310:	beq	1731c <__assert_fail@plt+0x63c8>
   17314:	bl	10e7c <fcntl64@plt>
   17318:	b	17350 <__assert_fail@plt+0x63fc>
   1731c:	cmp	r2, #6
   17320:	bne	1733c <__assert_fail@plt+0x63e8>
   17324:	ldr	r1, [sp, #4]
   17328:	add	r2, r1, #4
   1732c:	str	r2, [sp, #4]
   17330:	ldr	r1, [r1]
   17334:	bl	1736c <__assert_fail@plt+0x6418>
   17338:	b	17350 <__assert_fail@plt+0x63fc>
   1733c:	ldr	r2, [sp, #4]
   17340:	add	r3, r2, #4
   17344:	str	r3, [sp, #4]
   17348:	ldr	r2, [r2]
   1734c:	bl	10e7c <fcntl64@plt>
   17350:	mov	sp, fp
   17354:	pop	{fp, lr}
   17358:	add	sp, sp, #8
   1735c:	bx	lr
   17360:	mov	r2, r1
   17364:	mov	r1, #0
   17368:	b	10e7c <fcntl64@plt>
   1736c:	push	{r4, r5, r6, r7, fp, lr}
   17370:	add	fp, sp, #16
   17374:	mov	r5, r1
   17378:	mov	r6, r0
   1737c:	movw	r7, #33104	; 0x8150
   17380:	movt	r7, #2
   17384:	ldr	r0, [r7]
   17388:	cmp	r0, #0
   1738c:	blt	173f0 <__assert_fail@plt+0x649c>
   17390:	mov	r0, r6
   17394:	movw	r1, #1030	; 0x406
   17398:	mov	r2, r5
   1739c:	bl	10e7c <fcntl64@plt>
   173a0:	mov	r4, r0
   173a4:	cmn	r0, #1
   173a8:	bgt	173dc <__assert_fail@plt+0x6488>
   173ac:	bl	10e4c <__errno_location@plt>
   173b0:	ldr	r0, [r0]
   173b4:	cmp	r0, #22
   173b8:	bne	173dc <__assert_fail@plt+0x6488>
   173bc:	mov	r0, r6
   173c0:	mov	r1, r5
   173c4:	bl	17360 <__assert_fail@plt+0x640c>
   173c8:	mov	r4, r0
   173cc:	cmp	r0, #0
   173d0:	blt	17440 <__assert_fail@plt+0x64ec>
   173d4:	mvn	r0, #0
   173d8:	b	173e0 <__assert_fail@plt+0x648c>
   173dc:	mov	r0, #1
   173e0:	str	r0, [r7]
   173e4:	cmp	r4, #0
   173e8:	bge	17408 <__assert_fail@plt+0x64b4>
   173ec:	b	17440 <__assert_fail@plt+0x64ec>
   173f0:	mov	r0, r6
   173f4:	mov	r1, r5
   173f8:	bl	17360 <__assert_fail@plt+0x640c>
   173fc:	mov	r4, r0
   17400:	cmp	r4, #0
   17404:	blt	17440 <__assert_fail@plt+0x64ec>
   17408:	ldr	r0, [r7]
   1740c:	cmn	r0, #1
   17410:	bne	17440 <__assert_fail@plt+0x64ec>
   17414:	mov	r0, r4
   17418:	mov	r1, #1
   1741c:	bl	10e7c <fcntl64@plt>
   17420:	cmp	r0, #0
   17424:	blt	17448 <__assert_fail@plt+0x64f4>
   17428:	orr	r2, r0, #1
   1742c:	mov	r0, r4
   17430:	mov	r1, #2
   17434:	bl	10e7c <fcntl64@plt>
   17438:	cmn	r0, #1
   1743c:	beq	17448 <__assert_fail@plt+0x64f4>
   17440:	mov	r0, r4
   17444:	pop	{r4, r5, r6, r7, fp, pc}
   17448:	bl	10e4c <__errno_location@plt>
   1744c:	mov	r5, r0
   17450:	ldr	r6, [r0]
   17454:	mov	r0, r4
   17458:	bl	10f24 <close@plt>
   1745c:	str	r6, [r5]
   17460:	mvn	r4, #0
   17464:	mov	r0, r4
   17468:	pop	{r4, r5, r6, r7, fp, pc}
   1746c:	sub	sp, sp, #8
   17470:	push	{fp, lr}
   17474:	mov	fp, sp
   17478:	sub	sp, sp, #8
   1747c:	str	r3, [fp, #12]
   17480:	str	r2, [fp, #8]
   17484:	mov	r2, #0
   17488:	tst	r1, #64	; 0x40
   1748c:	addne	r2, fp, #8
   17490:	orrne	r2, r2, #4
   17494:	strne	r2, [sp, #4]
   17498:	ldrne	r2, [fp, #8]
   1749c:	bl	10dc8 <open64@plt>
   174a0:	bl	16efc <__assert_fail@plt+0x5fa8>
   174a4:	mov	sp, fp
   174a8:	pop	{fp, lr}
   174ac:	add	sp, sp, #8
   174b0:	bx	lr
   174b4:	mov	r1, #0
   174b8:	mov	r2, #3
   174bc:	b	17288 <__assert_fail@plt+0x6334>
   174c0:	cmp	r3, #0
   174c4:	cmpeq	r2, #0
   174c8:	bne	174ec <__assert_fail@plt+0x6598>
   174cc:	cmp	r1, #0
   174d0:	movlt	r1, #-2147483648	; 0x80000000
   174d4:	movlt	r0, #0
   174d8:	blt	174e8 <__assert_fail@plt+0x6594>
   174dc:	cmpeq	r0, #0
   174e0:	mvnne	r1, #-2147483648	; 0x80000000
   174e4:	mvnne	r0, #0
   174e8:	b	175d0 <__assert_fail@plt+0x667c>
   174ec:	sub	sp, sp, #8
   174f0:	push	{sp, lr}
   174f4:	cmp	r1, #0
   174f8:	blt	17518 <__assert_fail@plt+0x65c4>
   174fc:	cmp	r3, #0
   17500:	blt	1754c <__assert_fail@plt+0x65f8>
   17504:	bl	175e0 <__assert_fail@plt+0x668c>
   17508:	ldr	lr, [sp, #4]
   1750c:	add	sp, sp, #8
   17510:	pop	{r2, r3}
   17514:	bx	lr
   17518:	rsbs	r0, r0, #0
   1751c:	sbc	r1, r1, r1, lsl #1
   17520:	cmp	r3, #0
   17524:	blt	17570 <__assert_fail@plt+0x661c>
   17528:	bl	175e0 <__assert_fail@plt+0x668c>
   1752c:	ldr	lr, [sp, #4]
   17530:	add	sp, sp, #8
   17534:	pop	{r2, r3}
   17538:	rsbs	r0, r0, #0
   1753c:	sbc	r1, r1, r1, lsl #1
   17540:	rsbs	r2, r2, #0
   17544:	sbc	r3, r3, r3, lsl #1
   17548:	bx	lr
   1754c:	rsbs	r2, r2, #0
   17550:	sbc	r3, r3, r3, lsl #1
   17554:	bl	175e0 <__assert_fail@plt+0x668c>
   17558:	ldr	lr, [sp, #4]
   1755c:	add	sp, sp, #8
   17560:	pop	{r2, r3}
   17564:	rsbs	r0, r0, #0
   17568:	sbc	r1, r1, r1, lsl #1
   1756c:	bx	lr
   17570:	rsbs	r2, r2, #0
   17574:	sbc	r3, r3, r3, lsl #1
   17578:	bl	175e0 <__assert_fail@plt+0x668c>
   1757c:	ldr	lr, [sp, #4]
   17580:	add	sp, sp, #8
   17584:	pop	{r2, r3}
   17588:	rsbs	r2, r2, #0
   1758c:	sbc	r3, r3, r3, lsl #1
   17590:	bx	lr
   17594:	cmp	r3, #0
   17598:	cmpeq	r2, #0
   1759c:	bne	175b4 <__assert_fail@plt+0x6660>
   175a0:	cmp	r1, #0
   175a4:	cmpeq	r0, #0
   175a8:	mvnne	r1, #0
   175ac:	mvnne	r0, #0
   175b0:	b	175d0 <__assert_fail@plt+0x667c>
   175b4:	sub	sp, sp, #8
   175b8:	push	{sp, lr}
   175bc:	bl	175e0 <__assert_fail@plt+0x668c>
   175c0:	ldr	lr, [sp, #4]
   175c4:	add	sp, sp, #8
   175c8:	pop	{r2, r3}
   175cc:	bx	lr
   175d0:	push	{r1, lr}
   175d4:	mov	r0, #8
   175d8:	bl	10cf0 <raise@plt>
   175dc:	pop	{r1, pc}
   175e0:	cmp	r1, r3
   175e4:	cmpeq	r0, r2
   175e8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   175ec:	mov	r4, r0
   175f0:	movcc	r0, #0
   175f4:	mov	r5, r1
   175f8:	ldr	lr, [sp, #36]	; 0x24
   175fc:	movcc	r1, r0
   17600:	bcc	176fc <__assert_fail@plt+0x67a8>
   17604:	cmp	r3, #0
   17608:	clzeq	ip, r2
   1760c:	clzne	ip, r3
   17610:	addeq	ip, ip, #32
   17614:	cmp	r5, #0
   17618:	clzeq	r1, r4
   1761c:	addeq	r1, r1, #32
   17620:	clzne	r1, r5
   17624:	sub	ip, ip, r1
   17628:	sub	sl, ip, #32
   1762c:	lsl	r9, r3, ip
   17630:	rsb	fp, ip, #32
   17634:	orr	r9, r9, r2, lsl sl
   17638:	orr	r9, r9, r2, lsr fp
   1763c:	lsl	r8, r2, ip
   17640:	cmp	r5, r9
   17644:	cmpeq	r4, r8
   17648:	movcc	r0, #0
   1764c:	movcc	r1, r0
   17650:	bcc	1766c <__assert_fail@plt+0x6718>
   17654:	mov	r0, #1
   17658:	subs	r4, r4, r8
   1765c:	lsl	r1, r0, sl
   17660:	orr	r1, r1, r0, lsr fp
   17664:	lsl	r0, r0, ip
   17668:	sbc	r5, r5, r9
   1766c:	cmp	ip, #0
   17670:	beq	176fc <__assert_fail@plt+0x67a8>
   17674:	lsr	r6, r8, #1
   17678:	orr	r6, r6, r9, lsl #31
   1767c:	lsr	r7, r9, #1
   17680:	mov	r2, ip
   17684:	b	176a8 <__assert_fail@plt+0x6754>
   17688:	subs	r3, r4, r6
   1768c:	sbc	r8, r5, r7
   17690:	adds	r3, r3, r3
   17694:	adc	r8, r8, r8
   17698:	adds	r4, r3, #1
   1769c:	adc	r5, r8, #0
   176a0:	subs	r2, r2, #1
   176a4:	beq	176c4 <__assert_fail@plt+0x6770>
   176a8:	cmp	r5, r7
   176ac:	cmpeq	r4, r6
   176b0:	bcs	17688 <__assert_fail@plt+0x6734>
   176b4:	adds	r4, r4, r4
   176b8:	adc	r5, r5, r5
   176bc:	subs	r2, r2, #1
   176c0:	bne	176a8 <__assert_fail@plt+0x6754>
   176c4:	lsr	r3, r4, ip
   176c8:	orr	r3, r3, r5, lsl fp
   176cc:	lsr	r2, r5, ip
   176d0:	orr	r3, r3, r5, lsr sl
   176d4:	adds	r0, r0, r4
   176d8:	mov	r4, r3
   176dc:	lsl	r3, r2, ip
   176e0:	orr	r3, r3, r4, lsl sl
   176e4:	lsl	ip, r4, ip
   176e8:	orr	r3, r3, r4, lsr fp
   176ec:	adc	r1, r1, r5
   176f0:	subs	r0, r0, ip
   176f4:	mov	r5, r2
   176f8:	sbc	r1, r1, r3
   176fc:	cmp	lr, #0
   17700:	strdne	r4, [lr]
   17704:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17708:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1770c:	mov	r7, r0
   17710:	ldr	r6, [pc, #72]	; 17760 <__assert_fail@plt+0x680c>
   17714:	ldr	r5, [pc, #72]	; 17764 <__assert_fail@plt+0x6810>
   17718:	add	r6, pc, r6
   1771c:	add	r5, pc, r5
   17720:	sub	r6, r6, r5
   17724:	mov	r8, r1
   17728:	mov	r9, r2
   1772c:	bl	10cb8 <fstatfs64@plt-0x20>
   17730:	asrs	r6, r6, #2
   17734:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   17738:	mov	r4, #0
   1773c:	add	r4, r4, #1
   17740:	ldr	r3, [r5], #4
   17744:	mov	r2, r9
   17748:	mov	r1, r8
   1774c:	mov	r0, r7
   17750:	blx	r3
   17754:	cmp	r6, r4
   17758:	bne	1773c <__assert_fail@plt+0x67e8>
   1775c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   17760:	andeq	r0, r1, ip, ror #15
   17764:	andeq	r0, r1, r4, ror #15
   17768:	bx	lr
   1776c:	mov	r2, r1
   17770:	mov	r1, r0
   17774:	mov	r0, #3
   17778:	b	10ef4 <__xstat64@plt>
   1777c:	mov	r2, r1
   17780:	mov	r1, r0
   17784:	mov	r0, #3
   17788:	b	10d8c <__fxstat64@plt>
   1778c:	mov	r2, r1
   17790:	mov	r1, r0
   17794:	mov	r0, #3
   17798:	b	10f30 <__lxstat64@plt>
   1779c:	push	{lr}		; (str lr, [sp, #-4]!)
   177a0:	sub	sp, sp, #12
   177a4:	str	r3, [sp]
   177a8:	mov	r3, r2
   177ac:	mov	r2, r1
   177b0:	mov	r1, r0
   177b4:	mov	r0, #3
   177b8:	bl	10d80 <__fxstatat64@plt>
   177bc:	add	sp, sp, #12
   177c0:	pop	{pc}		; (ldr pc, [sp], #4)

Disassembly of section .fini:

000177c4 <.fini>:
   177c4:	push	{r3, lr}
   177c8:	pop	{r3, pc}
