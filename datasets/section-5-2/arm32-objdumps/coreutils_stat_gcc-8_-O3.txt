
../repos/coreutils/src/stat:     file format elf32-littlearm


Disassembly of section .init:

000113d4 <.init>:
   113d4:	push	{r3, lr}
   113d8:	bl	12290 <__assert_fail@plt+0xa70>
   113dc:	pop	{r3, pc}

Disassembly of section .plt:

000113e0 <calloc@plt-0x14>:
   113e0:	push	{lr}		; (str lr, [sp, #-4]!)
   113e4:	ldr	lr, [pc, #4]	; 113f0 <calloc@plt-0x4>
   113e8:	add	lr, pc, lr
   113ec:	ldr	pc, [lr, #8]!
   113f0:	andeq	r1, r2, r0, lsl ip

000113f4 <calloc@plt>:
   113f4:	add	ip, pc, #0, 12
   113f8:	add	ip, ip, #135168	; 0x21000
   113fc:	ldr	pc, [ip, #3088]!	; 0xc10

00011400 <fputs_unlocked@plt>:
   11400:	add	ip, pc, #0, 12
   11404:	add	ip, ip, #135168	; 0x21000
   11408:	ldr	pc, [ip, #3080]!	; 0xc08

0001140c <raise@plt>:
   1140c:	add	ip, pc, #0, 12
   11410:	add	ip, ip, #135168	; 0x21000
   11414:	ldr	pc, [ip, #3072]!	; 0xc00

00011418 <gmtime_r@plt>:
   11418:	add	ip, pc, #0, 12
   1141c:	add	ip, ip, #135168	; 0x21000
   11420:	ldr	pc, [ip, #3064]!	; 0xbf8

00011424 <__getdelim@plt>:
   11424:	add	ip, pc, #0, 12
   11428:	add	ip, ip, #135168	; 0x21000
   1142c:	ldr	pc, [ip, #3056]!	; 0xbf0

00011430 <is_selinux_enabled@plt>:
   11430:	add	ip, pc, #0, 12
   11434:	add	ip, ip, #135168	; 0x21000
   11438:	ldr	pc, [ip, #3048]!	; 0xbe8

0001143c <strcmp@plt>:
   1143c:	add	ip, pc, #0, 12
   11440:	add	ip, ip, #135168	; 0x21000
   11444:	ldr	pc, [ip, #3040]!	; 0xbe0

00011448 <strtol@plt>:
   11448:	add	ip, pc, #0, 12
   1144c:	add	ip, ip, #135168	; 0x21000
   11450:	ldr	pc, [ip, #3032]!	; 0xbd8

00011454 <getpwuid@plt>:
   11454:	add	ip, pc, #0, 12
   11458:	add	ip, ip, #135168	; 0x21000
   1145c:	ldr	pc, [ip, #3024]!	; 0xbd0

00011460 <mktime@plt>:
   11460:	add	ip, pc, #0, 12
   11464:	add	ip, ip, #135168	; 0x21000
   11468:	ldr	pc, [ip, #3016]!	; 0xbc8

0001146c <fflush@plt>:
   1146c:	add	ip, pc, #0, 12
   11470:	add	ip, ip, #135168	; 0x21000
   11474:	ldr	pc, [ip, #3008]!	; 0xbc0

00011478 <free@plt>:
   11478:	add	ip, pc, #0, 12
   1147c:	add	ip, ip, #135168	; 0x21000
   11480:	ldr	pc, [ip, #3000]!	; 0xbb8

00011484 <_exit@plt>:
   11484:	add	ip, pc, #0, 12
   11488:	add	ip, ip, #135168	; 0x21000
   1148c:	ldr	pc, [ip, #2992]!	; 0xbb0

00011490 <memcpy@plt>:
   11490:	add	ip, pc, #0, 12
   11494:	add	ip, ip, #135168	; 0x21000
   11498:	ldr	pc, [ip, #2984]!	; 0xba8

0001149c <mbsinit@plt>:
   1149c:	add	ip, pc, #0, 12
   114a0:	add	ip, ip, #135168	; 0x21000
   114a4:	ldr	pc, [ip, #2976]!	; 0xba0

000114a8 <memcmp@plt>:
   114a8:	add	ip, pc, #0, 12
   114ac:	add	ip, ip, #135168	; 0x21000
   114b0:	ldr	pc, [ip, #2968]!	; 0xb98

000114b4 <fputc_unlocked@plt>:
   114b4:	add	ip, pc, #0, 12
   114b8:	add	ip, ip, #135168	; 0x21000
   114bc:	ldr	pc, [ip, #2960]!	; 0xb90

000114c0 <dcgettext@plt>:
   114c0:	add	ip, pc, #0, 12
   114c4:	add	ip, ip, #135168	; 0x21000
   114c8:	ldr	pc, [ip, #2952]!	; 0xb88

000114cc <realloc@plt>:
   114cc:	add	ip, pc, #0, 12
   114d0:	add	ip, ip, #135168	; 0x21000
   114d4:	ldr	pc, [ip, #2944]!	; 0xb80

000114d8 <fgetfilecon@plt>:
   114d8:	add	ip, pc, #0, 12
   114dc:	add	ip, ip, #135168	; 0x21000
   114e0:	ldr	pc, [ip, #2936]!	; 0xb78

000114e4 <localtime_r@plt>:
   114e4:	add	ip, pc, #0, 12
   114e8:	add	ip, ip, #135168	; 0x21000
   114ec:	ldr	pc, [ip, #2928]!	; 0xb70

000114f0 <textdomain@plt>:
   114f0:	add	ip, pc, #0, 12
   114f4:	add	ip, ip, #135168	; 0x21000
   114f8:	ldr	pc, [ip, #2920]!	; 0xb68

000114fc <chdir@plt>:
   114fc:	add	ip, pc, #0, 12
   11500:	add	ip, ip, #135168	; 0x21000
   11504:	ldr	pc, [ip, #2912]!	; 0xb60

00011508 <iswprint@plt>:
   11508:	add	ip, pc, #0, 12
   1150c:	add	ip, ip, #135168	; 0x21000
   11510:	ldr	pc, [ip, #2904]!	; 0xb58

00011514 <tzset@plt>:
   11514:	add	ip, pc, #0, 12
   11518:	add	ip, ip, #135168	; 0x21000
   1151c:	ldr	pc, [ip, #2896]!	; 0xb50

00011520 <readlink@plt>:
   11520:	add	ip, pc, #0, 12
   11524:	add	ip, ip, #135168	; 0x21000
   11528:	ldr	pc, [ip, #2888]!	; 0xb48

0001152c <fwrite@plt>:
   1152c:	add	ip, pc, #0, 12
   11530:	add	ip, ip, #135168	; 0x21000
   11534:	ldr	pc, [ip, #2880]!	; 0xb40

00011538 <lseek64@plt>:
   11538:	add	ip, pc, #0, 12
   1153c:	add	ip, ip, #135168	; 0x21000
   11540:	ldr	pc, [ip, #2872]!	; 0xb38

00011544 <__ctype_get_mb_cur_max@plt>:
   11544:	add	ip, pc, #0, 12
   11548:	add	ip, ip, #135168	; 0x21000
   1154c:	ldr	pc, [ip, #2864]!	; 0xb30

00011550 <hasmntopt@plt>:
   11550:	add	ip, pc, #0, 12
   11554:	add	ip, ip, #135168	; 0x21000
   11558:	ldr	pc, [ip, #2856]!	; 0xb28

0001155c <__fpending@plt>:
   1155c:	add	ip, pc, #0, 12
   11560:	add	ip, ip, #135168	; 0x21000
   11564:	ldr	pc, [ip, #2848]!	; 0xb20

00011568 <mbrtowc@plt>:
   11568:	add	ip, pc, #0, 12
   1156c:	add	ip, ip, #135168	; 0x21000
   11570:	ldr	pc, [ip, #2840]!	; 0xb18

00011574 <error@plt>:
   11574:	add	ip, pc, #0, 12
   11578:	add	ip, ip, #135168	; 0x21000
   1157c:	ldr	pc, [ip, #2832]!	; 0xb10

00011580 <getmntent@plt>:
   11580:	add	ip, pc, #0, 12
   11584:	add	ip, ip, #135168	; 0x21000
   11588:	ldr	pc, [ip, #2824]!	; 0xb08

0001158c <open64@plt>:
   1158c:	add	ip, pc, #0, 12
   11590:	add	ip, ip, #135168	; 0x21000
   11594:	ldr	pc, [ip, #2816]!	; 0xb00

00011598 <getenv@plt>:
   11598:	add	ip, pc, #0, 12
   1159c:	add	ip, ip, #135168	; 0x21000
   115a0:	ldr	pc, [ip, #2808]!	; 0xaf8

000115a4 <lgetfilecon@plt>:
   115a4:	add	ip, pc, #0, 12
   115a8:	add	ip, ip, #135168	; 0x21000
   115ac:	ldr	pc, [ip, #2800]!	; 0xaf0

000115b0 <malloc@plt>:
   115b0:	add	ip, pc, #0, 12
   115b4:	add	ip, ip, #135168	; 0x21000
   115b8:	ldr	pc, [ip, #2792]!	; 0xae8

000115bc <__libc_start_main@plt>:
   115bc:	add	ip, pc, #0, 12
   115c0:	add	ip, ip, #135168	; 0x21000
   115c4:	ldr	pc, [ip, #2784]!	; 0xae0

000115c8 <strftime@plt>:
   115c8:	add	ip, pc, #0, 12
   115cc:	add	ip, ip, #135168	; 0x21000
   115d0:	ldr	pc, [ip, #2776]!	; 0xad8

000115d4 <__freading@plt>:
   115d4:	add	ip, pc, #0, 12
   115d8:	add	ip, ip, #135168	; 0x21000
   115dc:	ldr	pc, [ip, #2768]!	; 0xad0

000115e0 <__ctype_tolower_loc@plt>:
   115e0:	add	ip, pc, #0, 12
   115e4:	add	ip, ip, #135168	; 0x21000
   115e8:	ldr	pc, [ip, #2760]!	; 0xac8

000115ec <__ctype_toupper_loc@plt>:
   115ec:	add	ip, pc, #0, 12
   115f0:	add	ip, ip, #135168	; 0x21000
   115f4:	ldr	pc, [ip, #2752]!	; 0xac0

000115f8 <__gmon_start__@plt>:
   115f8:	add	ip, pc, #0, 12
   115fc:	add	ip, ip, #135168	; 0x21000
   11600:	ldr	pc, [ip, #2744]!	; 0xab8

00011604 <getopt_long@plt>:
   11604:	add	ip, pc, #0, 12
   11608:	add	ip, ip, #135168	; 0x21000
   1160c:	ldr	pc, [ip, #2736]!	; 0xab0

00011610 <__ctype_b_loc@plt>:
   11610:	add	ip, pc, #0, 12
   11614:	add	ip, ip, #135168	; 0x21000
   11618:	ldr	pc, [ip, #2728]!	; 0xaa8

0001161c <getcwd@plt>:
   1161c:	add	ip, pc, #0, 12
   11620:	add	ip, ip, #135168	; 0x21000
   11624:	ldr	pc, [ip, #2720]!	; 0xaa0

00011628 <exit@plt>:
   11628:	add	ip, pc, #0, 12
   1162c:	add	ip, ip, #135168	; 0x21000
   11630:	ldr	pc, [ip, #2712]!	; 0xa98

00011634 <getfilecon@plt>:
   11634:	add	ip, pc, #0, 12
   11638:	add	ip, ip, #135168	; 0x21000
   1163c:	ldr	pc, [ip, #2704]!	; 0xa90

00011640 <strlen@plt>:
   11640:	add	ip, pc, #0, 12
   11644:	add	ip, ip, #135168	; 0x21000
   11648:	ldr	pc, [ip, #2696]!	; 0xa88

0001164c <strchr@plt>:
   1164c:	add	ip, pc, #0, 12
   11650:	add	ip, ip, #135168	; 0x21000
   11654:	ldr	pc, [ip, #2688]!	; 0xa80

00011658 <setenv@plt>:
   11658:	add	ip, pc, #0, 12
   1165c:	add	ip, ip, #135168	; 0x21000
   11660:	ldr	pc, [ip, #2680]!	; 0xa78

00011664 <openat64@plt>:
   11664:	add	ip, pc, #0, 12
   11668:	add	ip, ip, #135168	; 0x21000
   1166c:	ldr	pc, [ip, #2672]!	; 0xa70

00011670 <memrchr@plt>:
   11670:	add	ip, pc, #0, 12
   11674:	add	ip, ip, #135168	; 0x21000
   11678:	ldr	pc, [ip, #2664]!	; 0xa68

0001167c <__errno_location@plt>:
   1167c:	add	ip, pc, #0, 12
   11680:	add	ip, ip, #135168	; 0x21000
   11684:	ldr	pc, [ip, #2656]!	; 0xa60

00011688 <__sprintf_chk@plt>:
   11688:	add	ip, pc, #0, 12
   1168c:	add	ip, ip, #135168	; 0x21000
   11690:	ldr	pc, [ip, #2648]!	; 0xa58

00011694 <__cxa_atexit@plt>:
   11694:	add	ip, pc, #0, 12
   11698:	add	ip, ip, #135168	; 0x21000
   1169c:	ldr	pc, [ip, #2640]!	; 0xa50

000116a0 <__vasprintf_chk@plt>:
   116a0:	add	ip, pc, #0, 12
   116a4:	add	ip, ip, #135168	; 0x21000
   116a8:	ldr	pc, [ip, #2632]!	; 0xa48

000116ac <memset@plt>:
   116ac:	add	ip, pc, #0, 12
   116b0:	add	ip, ip, #135168	; 0x21000
   116b4:	ldr	pc, [ip, #2624]!	; 0xa40

000116b8 <__printf_chk@plt>:
   116b8:	add	ip, pc, #0, 12
   116bc:	add	ip, ip, #135168	; 0x21000
   116c0:	ldr	pc, [ip, #2616]!	; 0xa38

000116c4 <fileno@plt>:
   116c4:	add	ip, pc, #0, 12
   116c8:	add	ip, ip, #135168	; 0x21000
   116cc:	ldr	pc, [ip, #2608]!	; 0xa30

000116d0 <__fprintf_chk@plt>:
   116d0:	add	ip, pc, #0, 12
   116d4:	add	ip, ip, #135168	; 0x21000
   116d8:	ldr	pc, [ip, #2600]!	; 0xa28

000116dc <memchr@plt>:
   116dc:	add	ip, pc, #0, 12
   116e0:	add	ip, ip, #135168	; 0x21000
   116e4:	ldr	pc, [ip, #2592]!	; 0xa20

000116e8 <fclose@plt>:
   116e8:	add	ip, pc, #0, 12
   116ec:	add	ip, ip, #135168	; 0x21000
   116f0:	ldr	pc, [ip, #2584]!	; 0xa18

000116f4 <fseeko64@plt>:
   116f4:	add	ip, pc, #0, 12
   116f8:	add	ip, ip, #135168	; 0x21000
   116fc:	ldr	pc, [ip, #2576]!	; 0xa10

00011700 <statx@plt>:
   11700:	add	ip, pc, #0, 12
   11704:	add	ip, ip, #135168	; 0x21000
   11708:	ldr	pc, [ip, #2568]!	; 0xa08

0001170c <endmntent@plt>:
   1170c:	add	ip, pc, #0, 12
   11710:	add	ip, ip, #135168	; 0x21000
   11714:	ldr	pc, [ip, #2560]!	; 0xa00

00011718 <fcntl64@plt>:
   11718:	add	ip, pc, #0, 12
   1171c:	add	ip, ip, #135168	; 0x21000
   11720:	ldr	pc, [ip, #2552]!	; 0x9f8

00011724 <__overflow@plt>:
   11724:	add	ip, pc, #0, 12
   11728:	add	ip, ip, #135168	; 0x21000
   1172c:	ldr	pc, [ip, #2544]!	; 0x9f0

00011730 <setlocale@plt>:
   11730:	add	ip, pc, #0, 12
   11734:	add	ip, ip, #135168	; 0x21000
   11738:	ldr	pc, [ip, #2536]!	; 0x9e8

0001173c <strrchr@plt>:
   1173c:	add	ip, pc, #0, 12
   11740:	add	ip, ip, #135168	; 0x21000
   11744:	ldr	pc, [ip, #2528]!	; 0x9e0

00011748 <statfs64@plt>:
   11748:	add	ip, pc, #0, 12
   1174c:	add	ip, ip, #135168	; 0x21000
   11750:	ldr	pc, [ip, #2520]!	; 0x9d8

00011754 <nl_langinfo@plt>:
   11754:	add	ip, pc, #0, 12
   11758:	add	ip, ip, #135168	; 0x21000
   1175c:	ldr	pc, [ip, #2512]!	; 0x9d0

00011760 <sscanf@plt>:
   11760:	add	ip, pc, #0, 12
   11764:	add	ip, ip, #135168	; 0x21000
   11768:	ldr	pc, [ip, #2504]!	; 0x9c8

0001176c <localeconv@plt>:
   1176c:	add	ip, pc, #0, 12
   11770:	add	ip, ip, #135168	; 0x21000
   11774:	ldr	pc, [ip, #2496]!	; 0x9c0

00011778 <timegm@plt>:
   11778:	add	ip, pc, #0, 12
   1177c:	add	ip, ip, #135168	; 0x21000
   11780:	ldr	pc, [ip, #2488]!	; 0x9b8

00011784 <fchdir@plt>:
   11784:	add	ip, pc, #0, 12
   11788:	add	ip, ip, #135168	; 0x21000
   1178c:	ldr	pc, [ip, #2480]!	; 0x9b0

00011790 <canonicalize_file_name@plt>:
   11790:	add	ip, pc, #0, 12
   11794:	add	ip, ip, #135168	; 0x21000
   11798:	ldr	pc, [ip, #2472]!	; 0x9a8

0001179c <fopen64@plt>:
   1179c:	add	ip, pc, #0, 12
   117a0:	add	ip, ip, #135168	; 0x21000
   117a4:	ldr	pc, [ip, #2464]!	; 0x9a0

000117a8 <freecon@plt>:
   117a8:	add	ip, pc, #0, 12
   117ac:	add	ip, ip, #135168	; 0x21000
   117b0:	ldr	pc, [ip, #2456]!	; 0x998

000117b4 <setmntent@plt>:
   117b4:	add	ip, pc, #0, 12
   117b8:	add	ip, ip, #135168	; 0x21000
   117bc:	ldr	pc, [ip, #2448]!	; 0x990

000117c0 <bindtextdomain@plt>:
   117c0:	add	ip, pc, #0, 12
   117c4:	add	ip, ip, #135168	; 0x21000
   117c8:	ldr	pc, [ip, #2440]!	; 0x988

000117cc <__xstat64@plt>:
   117cc:	add	ip, pc, #0, 12
   117d0:	add	ip, ip, #135168	; 0x21000
   117d4:	ldr	pc, [ip, #2432]!	; 0x980

000117d8 <unsetenv@plt>:
   117d8:	add	ip, pc, #0, 12
   117dc:	add	ip, ip, #135168	; 0x21000
   117e0:	ldr	pc, [ip, #2424]!	; 0x978

000117e4 <strncmp@plt>:
   117e4:	add	ip, pc, #0, 12
   117e8:	add	ip, ip, #135168	; 0x21000
   117ec:	ldr	pc, [ip, #2416]!	; 0x970

000117f0 <abort@plt>:
   117f0:	add	ip, pc, #0, 12
   117f4:	add	ip, ip, #135168	; 0x21000
   117f8:	ldr	pc, [ip, #2408]!	; 0x968

000117fc <close@plt>:
   117fc:	add	ip, pc, #0, 12
   11800:	add	ip, ip, #135168	; 0x21000
   11804:	ldr	pc, [ip, #2400]!	; 0x960

00011808 <getgrgid@plt>:
   11808:	add	ip, pc, #0, 12
   1180c:	add	ip, ip, #135168	; 0x21000
   11810:	ldr	pc, [ip, #2392]!	; 0x958

00011814 <strspn@plt>:
   11814:	add	ip, pc, #0, 12
   11818:	add	ip, ip, #135168	; 0x21000
   1181c:	ldr	pc, [ip, #2384]!	; 0x950

00011820 <__assert_fail@plt>:
   11820:	add	ip, pc, #0, 12
   11824:	add	ip, ip, #135168	; 0x21000
   11828:	ldr	pc, [ip, #2376]!	; 0x948

Disassembly of section .text:

0001182c <.text>:
   1182c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   11830:	strd	r6, [sp, #8]
   11834:	movw	r7, #2484	; 0x9b4
   11838:	movt	r7, #2
   1183c:	strd	r8, [sp, #16]
   11840:	movw	r6, #8940	; 0x22ec
   11844:	movt	r6, #2
   11848:	strd	sl, [sp, #24]
   1184c:	mov	fp, r1
   11850:	movw	sl, #12784	; 0x31f0
   11854:	movt	sl, #3
   11858:	str	lr, [sp, #32]
   1185c:	sub	sp, sp, #148	; 0x94
   11860:	movw	r8, #12776	; 0x31e8
   11864:	movt	r8, #3
   11868:	str	r0, [sp, #16]
   1186c:	add	r9, r7, #360	; 0x168
   11870:	ldr	r0, [r1]
   11874:	bl	19e24 <__assert_fail@plt+0x8604>
   11878:	mov	r3, #0
   1187c:	movw	r1, #3392	; 0xd40
   11880:	movt	r1, #2
   11884:	mov	r0, #6
   11888:	mov	r4, r3
   1188c:	str	r3, [sp, #28]
   11890:	bl	11730 <setlocale@plt>
   11894:	movw	r1, #8888	; 0x22b8
   11898:	movt	r1, #2
   1189c:	movw	r0, #8716	; 0x220c
   118a0:	movt	r0, #2
   118a4:	bl	117c0 <bindtextdomain@plt>
   118a8:	movw	r0, #8716	; 0x220c
   118ac:	movt	r0, #2
   118b0:	bl	114f0 <textdomain@plt>
   118b4:	bl	1176c <localeconv@plt>
   118b8:	ldr	r3, [r0]
   118bc:	movw	r2, #8884	; 0x22b4
   118c0:	movt	r2, #2
   118c4:	str	r4, [sp, #20]
   118c8:	str	r4, [sp, #24]
   118cc:	ldrb	r1, [r3]
   118d0:	cmp	r1, r4
   118d4:	moveq	r3, r2
   118d8:	mov	r0, r3
   118dc:	str	r3, [sl, #80]	; 0x50
   118e0:	bl	11640 <strlen@plt>
   118e4:	str	r0, [sl, #76]	; 0x4c
   118e8:	movw	r0, #27468	; 0x6b4c
   118ec:	movt	r0, #1
   118f0:	bl	20990 <__assert_fail@plt+0xf170>
   118f4:	mov	r5, #0
   118f8:	mov	r3, r9
   118fc:	ldr	r0, [sp, #16]
   11900:	mov	r2, r6
   11904:	mov	r1, fp
   11908:	str	r5, [sp]
   1190c:	bl	11604 <getopt_long@plt>
   11910:	cmn	r0, #1
   11914:	mov	r4, r0
   11918:	beq	11a84 <__assert_fail@plt+0x264>
   1191c:	cmp	r4, #76	; 0x4c
   11920:	beq	119d0 <__assert_fail@plt+0x1b0>
   11924:	ble	1196c <__assert_fail@plt+0x14c>
   11928:	cmp	r4, #102	; 0x66
   1192c:	beq	119c4 <__assert_fail@plt+0x1a4>
   11930:	ble	1198c <__assert_fail@plt+0x16c>
   11934:	cmp	r4, #116	; 0x74
   11938:	beq	119b8 <__assert_fail@plt+0x198>
   1193c:	cmp	r4, #256	; 0x100
   11940:	bne	11984 <__assert_fail@plt+0x164>
   11944:	ldr	r2, [r8]
   11948:	movw	r3, #12672	; 0x3180
   1194c:	movt	r3, #3
   11950:	mov	r1, #1
   11954:	strb	r1, [sl, #123]	; 0x7b
   11958:	str	r2, [sp, #28]
   1195c:	movw	r2, #3392	; 0xd40
   11960:	movt	r2, #2
   11964:	str	r2, [r3]
   11968:	b	118f4 <__assert_fail@plt+0xd4>
   1196c:	cmn	r4, #2
   11970:	beq	11a7c <__assert_fail@plt+0x25c>
   11974:	cmp	r4, #0
   11978:	beq	119dc <__assert_fail@plt+0x1bc>
   1197c:	cmn	r4, #3
   11980:	beq	11a3c <__assert_fail@plt+0x21c>
   11984:	mov	r0, #1
   11988:	bl	15cd8 <__assert_fail@plt+0x44b8>
   1198c:	cmp	r4, #99	; 0x63
   11990:	bne	11984 <__assert_fail@plt+0x164>
   11994:	ldr	r1, [r8]
   11998:	movw	r3, #12672	; 0x3180
   1199c:	movt	r3, #3
   119a0:	movw	r2, #7836	; 0x1e9c
   119a4:	movt	r2, #2
   119a8:	strb	r5, [sl, #123]	; 0x7b
   119ac:	str	r2, [r3]
   119b0:	str	r1, [sp, #28]
   119b4:	b	118f4 <__assert_fail@plt+0xd4>
   119b8:	mov	r3, #1
   119bc:	str	r3, [sp, #20]
   119c0:	b	118f4 <__assert_fail@plt+0xd4>
   119c4:	mov	r3, #1
   119c8:	str	r3, [sp, #24]
   119cc:	b	118f4 <__assert_fail@plt+0xd4>
   119d0:	mov	r3, #1
   119d4:	strb	r3, [sl, #96]	; 0x60
   119d8:	b	118f4 <__assert_fail@plt+0xd4>
   119dc:	movw	r2, #12680	; 0x3188
   119e0:	movt	r2, #3
   119e4:	ldr	r3, [pc, #2140]	; 12248 <__assert_fail@plt+0xa28>
   119e8:	mov	r5, #1
   119ec:	mov	r1, #4
   119f0:	ldr	ip, [r2]
   119f4:	movw	r0, #8912	; 0x22d0
   119f8:	movt	r0, #2
   119fc:	str	r1, [sp]
   11a00:	str	r5, [sp, #8]
   11a04:	add	r2, r3, #12
   11a08:	ldr	r1, [r8]
   11a0c:	str	ip, [sp, #4]
   11a10:	bl	1698c <__assert_fail@plt+0x516c>
   11a14:	add	r0, r7, r0, lsl #2
   11a18:	ldr	r3, [r0, #332]	; 0x14c
   11a1c:	cmp	r3, r5
   11a20:	beq	12030 <__assert_fail@plt+0x810>
   11a24:	cmp	r3, #0
   11a28:	beq	12024 <__assert_fail@plt+0x804>
   11a2c:	cmp	r3, #2
   11a30:	strbeq	r5, [sl, #121]	; 0x79
   11a34:	strbeq	r4, [sl, #122]	; 0x7a
   11a38:	b	118f4 <__assert_fail@plt+0xd4>
   11a3c:	movw	r2, #8924	; 0x22dc
   11a40:	movt	r2, #2
   11a44:	movw	r3, #12676	; 0x3184
   11a48:	movt	r3, #3
   11a4c:	movw	r0, #12772	; 0x31e4
   11a50:	movt	r0, #3
   11a54:	stm	sp, {r2, r5}
   11a58:	movw	r1, #4976	; 0x1370
   11a5c:	movt	r1, #2
   11a60:	ldr	r0, [r0]
   11a64:	movw	r2, #8712	; 0x2208
   11a68:	movt	r2, #2
   11a6c:	ldr	r3, [r3]
   11a70:	bl	1e6f8 <__assert_fail@plt+0xced8>
   11a74:	mov	r0, r5
   11a78:	bl	11628 <exit@plt>
   11a7c:	mov	r0, r5
   11a80:	bl	15cd8 <__assert_fail@plt+0x44b8>
   11a84:	movw	r4, #12760	; 0x31d8
   11a88:	movt	r4, #3
   11a8c:	ldr	r2, [sp, #16]
   11a90:	ldr	r3, [r4]
   11a94:	cmp	r3, r2
   11a98:	beq	12134 <__assert_fail@plt+0x914>
   11a9c:	ldr	r8, [sp, #28]
   11aa0:	cmp	r8, #0
   11aa4:	beq	1215c <__assert_fail@plt+0x93c>
   11aa8:	movw	r1, #8964	; 0x2304
   11aac:	movt	r1, #2
   11ab0:	mov	r0, r8
   11ab4:	bl	1f604 <__assert_fail@plt+0xdde4>
   11ab8:	cmp	r0, #0
   11abc:	ldreq	r3, [sp, #28]
   11ac0:	streq	r3, [sp, #44]	; 0x2c
   11ac4:	beq	11b10 <__assert_fail@plt+0x2f0>
   11ac8:	movw	r0, #8968	; 0x2308
   11acc:	movt	r0, #2
   11ad0:	bl	11598 <getenv@plt>
   11ad4:	subs	r7, r0, #0
   11ad8:	beq	121f0 <__assert_fail@plt+0x9d0>
   11adc:	movw	r6, #10060	; 0x274c
   11ae0:	movt	r6, #2
   11ae4:	mov	r3, #4
   11ae8:	mov	r2, r6
   11aec:	movw	r1, #10100	; 0x2774
   11af0:	movt	r1, #2
   11af4:	bl	165f0 <__assert_fail@plt+0x4dd0>
   11af8:	subs	r3, r0, #0
   11afc:	blt	12190 <__assert_fail@plt+0x970>
   11b00:	mov	r0, r5
   11b04:	ldr	r1, [r6, r3, lsl #2]
   11b08:	str	r8, [sp, #44]	; 0x2c
   11b0c:	bl	1bc7c <__assert_fail@plt+0xa45c>
   11b10:	ldr	r6, [r4]
   11b14:	movw	r3, #3540	; 0xdd4
   11b18:	movt	r3, #2
   11b1c:	movw	r9, #12772	; 0x31e4
   11b20:	movt	r9, #3
   11b24:	str	fp, [sp, #36]	; 0x24
   11b28:	str	r3, [sp, #40]	; 0x28
   11b2c:	mov	r3, #1
   11b30:	str	r3, [sp, #20]
   11b34:	str	sl, [sp, #52]	; 0x34
   11b38:	ldr	r3, [sp, #16]
   11b3c:	cmp	r6, r3
   11b40:	bge	1203c <__assert_fail@plt+0x81c>
   11b44:	ldr	r3, [sp, #24]
   11b48:	cmp	r3, #0
   11b4c:	ldr	r3, [sp, #36]	; 0x24
   11b50:	ldr	r7, [r3, r6, lsl #2]
   11b54:	beq	11d68 <__assert_fail@plt+0x548>
   11b58:	mov	r0, r7
   11b5c:	ldr	r1, [sp, #40]	; 0x28
   11b60:	bl	1143c <strcmp@plt>
   11b64:	subs	r4, r0, #0
   11b68:	beq	11db8 <__assert_fail@plt+0x598>
   11b6c:	mov	r0, r7
   11b70:	add	r1, sp, #56	; 0x38
   11b74:	bl	11748 <statfs64@plt>
   11b78:	subs	r4, r0, #0
   11b7c:	bne	12048 <__assert_fail@plt+0x828>
   11b80:	ldr	fp, [sp, #28]
   11b84:	mov	r0, fp
   11b88:	bl	11640 <strlen@plt>
   11b8c:	add	r0, r0, #4
   11b90:	bl	1e908 <__assert_fail@plt+0xd0e8>
   11b94:	ldrb	r5, [fp]
   11b98:	mov	sl, r0
   11b9c:	cmp	r5, #0
   11ba0:	beq	121e8 <__assert_fail@plt+0x9c8>
   11ba4:	str	r4, [sp, #32]
   11ba8:	str	r6, [sp, #48]	; 0x30
   11bac:	mov	r6, fp
   11bb0:	mov	fp, r7
   11bb4:	ldr	r7, [sp, #52]	; 0x34
   11bb8:	b	11bf0 <__assert_fail@plt+0x3d0>
   11bbc:	ldr	r0, [r9]
   11bc0:	ldr	r2, [r0, #20]
   11bc4:	ldr	r1, [r0, #24]
   11bc8:	cmp	r2, r1
   11bcc:	addcc	r3, r2, #1
   11bd0:	movcc	r4, r6
   11bd4:	strcc	r3, [r0, #20]
   11bd8:	strbcc	r5, [r2]
   11bdc:	bcs	11c7c <__assert_fail@plt+0x45c>
   11be0:	ldrb	r5, [r4, #1]
   11be4:	add	r6, r4, #1
   11be8:	cmp	r5, #0
   11bec:	beq	11d8c <__assert_fail@plt+0x56c>
   11bf0:	cmp	r5, #37	; 0x25
   11bf4:	add	r4, r6, #1
   11bf8:	beq	11c8c <__assert_fail@plt+0x46c>
   11bfc:	cmp	r5, #92	; 0x5c
   11c00:	bne	11bbc <__assert_fail@plt+0x39c>
   11c04:	ldrb	r2, [r7, #123]	; 0x7b
   11c08:	cmp	r2, #0
   11c0c:	beq	11c58 <__assert_fail@plt+0x438>
   11c10:	ldrb	r8, [r6, #1]
   11c14:	sub	r1, r8, #48	; 0x30
   11c18:	uxtb	r2, r1
   11c1c:	cmp	r2, #7
   11c20:	bls	11fc8 <__assert_fail@plt+0x7a8>
   11c24:	cmp	r8, #120	; 0x78
   11c28:	beq	11f58 <__assert_fail@plt+0x738>
   11c2c:	cmp	r8, #0
   11c30:	bne	11df4 <__assert_fail@plt+0x5d4>
   11c34:	mov	r2, #5
   11c38:	movw	r1, #4904	; 0x1328
   11c3c:	movt	r1, #2
   11c40:	mov	r0, r8
   11c44:	bl	114c0 <dcgettext@plt>
   11c48:	mov	r2, r0
   11c4c:	mov	r1, r8
   11c50:	mov	r0, r8
   11c54:	bl	11574 <error@plt>
   11c58:	ldr	r0, [r9]
   11c5c:	ldr	r2, [r0, #20]
   11c60:	ldr	r1, [r0, #24]
   11c64:	cmp	r2, r1
   11c68:	addcc	r1, r2, #1
   11c6c:	movcc	r4, r6
   11c70:	strcc	r1, [r0, #20]
   11c74:	strbcc	r5, [r2]
   11c78:	bcc	11be0 <__assert_fail@plt+0x3c0>
   11c7c:	mov	r1, r5
   11c80:	mov	r4, r6
   11c84:	bl	11724 <__overflow@plt>
   11c88:	b	11be0 <__assert_fail@plt+0x3c0>
   11c8c:	mov	r0, r4
   11c90:	ldr	r1, [pc, #1460]	; 1224c <__assert_fail@plt+0xa2c>
   11c94:	bl	11814 <strspn@plt>
   11c98:	add	r4, r0, #1
   11c9c:	ldr	r1, [pc, #1452]	; 12250 <__assert_fail@plt+0xa30>
   11ca0:	add	r4, r6, r4
   11ca4:	mov	r0, r4
   11ca8:	bl	11814 <strspn@plt>
   11cac:	ldrb	r2, [r4, r0]
   11cb0:	add	r4, r4, r0
   11cb4:	cmp	r2, #46	; 0x2e
   11cb8:	bne	11cd0 <__assert_fail@plt+0x4b0>
   11cbc:	add	r0, r4, #1
   11cc0:	ldr	r1, [pc, #1416]	; 12250 <__assert_fail@plt+0xa30>
   11cc4:	bl	11814 <strspn@plt>
   11cc8:	add	r0, r0, #1
   11ccc:	add	r4, r4, r0
   11cd0:	ldrb	r8, [r4]
   11cd4:	sub	r5, r4, r6
   11cd8:	mov	r1, r6
   11cdc:	mov	r2, r5
   11ce0:	mov	r0, sl
   11ce4:	bl	11490 <memcpy@plt>
   11ce8:	cmp	r8, #0
   11cec:	beq	11d2c <__assert_fail@plt+0x50c>
   11cf0:	cmp	r8, #37	; 0x25
   11cf4:	beq	11d30 <__assert_fail@plt+0x510>
   11cf8:	mvn	r0, #0
   11cfc:	add	ip, sp, #56	; 0x38
   11d00:	mov	r3, r8
   11d04:	mov	r1, r5
   11d08:	mov	r2, #0
   11d0c:	stm	sp, {r0, fp, ip}
   11d10:	mov	r0, sl
   11d14:	bl	13c58 <__assert_fail@plt+0x2438>
   11d18:	ldr	r3, [sp, #32]
   11d1c:	orr	r0, r3, r0
   11d20:	uxtb	r3, r0
   11d24:	str	r3, [sp, #32]
   11d28:	b	11be0 <__assert_fail@plt+0x3c0>
   11d2c:	sub	r4, r4, #1
   11d30:	cmp	r5, #1
   11d34:	bhi	12204 <__assert_fail@plt+0x9e4>
   11d38:	ldr	r0, [r9]
   11d3c:	ldr	r3, [r0, #20]
   11d40:	ldr	r2, [r0, #24]
   11d44:	cmp	r3, r2
   11d48:	addcc	r1, r3, #1
   11d4c:	movcc	r2, #37	; 0x25
   11d50:	strcc	r1, [r0, #20]
   11d54:	strbcc	r2, [r3]
   11d58:	bcc	11be0 <__assert_fail@plt+0x3c0>
   11d5c:	mov	r1, #37	; 0x25
   11d60:	bl	11724 <__overflow@plt>
   11d64:	b	11be0 <__assert_fail@plt+0x3c0>
   11d68:	mov	r0, r7
   11d6c:	ldr	r1, [sp, #28]
   11d70:	ldr	r2, [sp, #44]	; 0x2c
   11d74:	bl	15350 <__assert_fail@plt+0x3b30>
   11d78:	ldr	r3, [sp, #20]
   11d7c:	add	r6, r6, #1
   11d80:	and	r3, r3, r0
   11d84:	str	r3, [sp, #20]
   11d88:	b	11b38 <__assert_fail@plt+0x318>
   11d8c:	ldr	r6, [sp, #48]	; 0x30
   11d90:	mov	r0, sl
   11d94:	bl	171c0 <__assert_fail@plt+0x59a0>
   11d98:	movw	r3, #12672	; 0x3180
   11d9c:	movt	r3, #3
   11da0:	ldr	r1, [r9]
   11da4:	ldr	r0, [r3]
   11da8:	bl	11400 <fputs_unlocked@plt>
   11dac:	ldr	r3, [sp, #32]
   11db0:	eor	r0, r3, #1
   11db4:	b	11d78 <__assert_fail@plt+0x558>
   11db8:	movw	r1, #9052	; 0x235c
   11dbc:	movt	r1, #2
   11dc0:	mov	r2, #5
   11dc4:	bl	114c0 <dcgettext@plt>
   11dc8:	mov	r5, r0
   11dcc:	mov	r1, r7
   11dd0:	mov	r0, #4
   11dd4:	bl	1c468 <__assert_fail@plt+0xac48>
   11dd8:	mov	r3, r0
   11ddc:	mov	r2, r5
   11de0:	mov	r0, #0
   11de4:	mov	r1, r4
   11de8:	bl	11574 <error@plt>
   11dec:	mov	r0, #0
   11df0:	b	11d78 <__assert_fail@plt+0x558>
   11df4:	sub	r3, r8, #34	; 0x22
   11df8:	cmp	r3, #84	; 0x54
   11dfc:	ldrls	pc, [pc, r3, lsl #2]
   11e00:	b	11f74 <__assert_fail@plt+0x754>
   11e04:	muleq	r1, ip, pc	; <UNPREDICTABLE>
   11e08:	andeq	r1, r1, r4, ror pc
   11e0c:	andeq	r1, r1, r4, ror pc
   11e10:	andeq	r1, r1, r4, ror pc
   11e14:	andeq	r1, r1, r4, ror pc
   11e18:	andeq	r1, r1, r4, ror pc
   11e1c:	andeq	r1, r1, r4, ror pc
   11e20:	andeq	r1, r1, r4, ror pc
   11e24:	andeq	r1, r1, r4, ror pc
   11e28:	andeq	r1, r1, r4, ror pc
   11e2c:	andeq	r1, r1, r4, ror pc
   11e30:	andeq	r1, r1, r4, ror pc
   11e34:	andeq	r1, r1, r4, ror pc
   11e38:	andeq	r1, r1, r4, ror pc
   11e3c:	andeq	r1, r1, r4, ror pc
   11e40:	andeq	r1, r1, r4, ror pc
   11e44:	andeq	r1, r1, r4, ror pc
   11e48:	andeq	r1, r1, r4, ror pc
   11e4c:	andeq	r1, r1, r4, ror pc
   11e50:	andeq	r1, r1, r4, ror pc
   11e54:	andeq	r1, r1, r4, ror pc
   11e58:	andeq	r1, r1, r4, ror pc
   11e5c:	andeq	r1, r1, r4, ror pc
   11e60:	andeq	r1, r1, r4, ror pc
   11e64:	andeq	r1, r1, r4, ror pc
   11e68:	andeq	r1, r1, r4, ror pc
   11e6c:	andeq	r1, r1, r4, ror pc
   11e70:	andeq	r1, r1, r4, ror pc
   11e74:	andeq	r1, r1, r4, ror pc
   11e78:	andeq	r1, r1, r4, ror pc
   11e7c:	andeq	r1, r1, r4, ror pc
   11e80:	andeq	r1, r1, r4, ror pc
   11e84:	andeq	r1, r1, r4, ror pc
   11e88:	andeq	r1, r1, r4, ror pc
   11e8c:	andeq	r1, r1, r4, ror pc
   11e90:	andeq	r1, r1, r4, ror pc
   11e94:	andeq	r1, r1, r4, ror pc
   11e98:	andeq	r1, r1, r4, ror pc
   11e9c:	andeq	r1, r1, r4, ror pc
   11ea0:	andeq	r1, r1, r4, ror pc
   11ea4:	andeq	r1, r1, r4, ror pc
   11ea8:	andeq	r1, r1, r4, ror pc
   11eac:	andeq	r1, r1, r4, ror pc
   11eb0:	andeq	r1, r1, r4, ror pc
   11eb4:	andeq	r1, r1, r4, ror pc
   11eb8:	andeq	r1, r1, r4, ror pc
   11ebc:	andeq	r1, r1, r4, ror pc
   11ec0:	andeq	r1, r1, r4, ror pc
   11ec4:	andeq	r1, r1, r4, ror pc
   11ec8:	andeq	r1, r1, r4, ror pc
   11ecc:	andeq	r1, r1, r4, ror pc
   11ed0:	andeq	r1, r1, r4, ror pc
   11ed4:	andeq	r1, r1, r4, ror pc
   11ed8:	andeq	r1, r1, r4, ror pc
   11edc:	andeq	r1, r1, r4, ror pc
   11ee0:	andeq	r1, r1, r4, ror pc
   11ee4:	andeq	r1, r1, r4, ror pc
   11ee8:	andeq	r1, r1, r4, ror pc
   11eec:	muleq	r1, ip, pc	; <UNPREDICTABLE>
   11ef0:	andeq	r1, r1, r4, ror pc
   11ef4:	andeq	r1, r1, r4, ror pc
   11ef8:	andeq	r1, r1, r4, ror pc
   11efc:	andeq	r1, r1, r4, ror pc
   11f00:	strdeq	r2, [r1], -r4
   11f04:	andeq	r2, r1, ip, lsr #2
   11f08:	andeq	r1, r1, r4, ror pc
   11f0c:	andeq	r1, r1, r4, ror pc
   11f10:	andeq	r2, r1, r4, lsr #2
   11f14:	andeq	r2, r1, ip, lsl r1
   11f18:	andeq	r1, r1, r4, ror pc
   11f1c:	andeq	r1, r1, r4, ror pc
   11f20:	andeq	r1, r1, r4, ror pc
   11f24:	andeq	r1, r1, r4, ror pc
   11f28:	andeq	r1, r1, r4, ror pc
   11f2c:	andeq	r1, r1, r4, ror pc
   11f30:	andeq	r1, r1, r4, ror pc
   11f34:	andeq	r2, r1, r4, lsl r1
   11f38:	andeq	r1, r1, r4, ror pc
   11f3c:	andeq	r1, r1, r4, ror pc
   11f40:	andeq	r1, r1, r4, ror pc
   11f44:	andeq	r2, r1, ip, lsl #2
   11f48:	andeq	r1, r1, r4, ror pc
   11f4c:	andeq	r2, r1, r4, lsl #2
   11f50:	andeq	r1, r1, r4, ror pc
   11f54:	strdeq	r2, [r1], -ip
   11f58:	bl	11610 <__ctype_b_loc@plt>
   11f5c:	ldrb	r1, [r6, #2]
   11f60:	ldr	r2, [r0]
   11f64:	lsl	r0, r1, #1
   11f68:	ldrh	r0, [r2, r0]
   11f6c:	tst	r0, #4096	; 0x1000
   11f70:	bne	12064 <__assert_fail@plt+0x844>
   11f74:	mov	r2, #5
   11f78:	movw	r1, #4940	; 0x134c
   11f7c:	movt	r1, #2
   11f80:	mov	r0, #0
   11f84:	bl	114c0 <dcgettext@plt>
   11f88:	mov	r1, #0
   11f8c:	mov	r2, r0
   11f90:	mov	r3, r8
   11f94:	mov	r0, r1
   11f98:	bl	11574 <error@plt>
   11f9c:	ldr	r0, [r9]
   11fa0:	ldr	r3, [r0, #20]
   11fa4:	ldr	r2, [r0, #24]
   11fa8:	cmp	r3, r2
   11fac:	addcc	r2, r3, #1
   11fb0:	strcc	r2, [r0, #20]
   11fb4:	strbcc	r8, [r3]
   11fb8:	bcc	11be0 <__assert_fail@plt+0x3c0>
   11fbc:	mov	r1, r8
   11fc0:	bl	11724 <__overflow@plt>
   11fc4:	b	11be0 <__assert_fail@plt+0x3c0>
   11fc8:	ldrb	r2, [r6, #2]
   11fcc:	sub	r2, r2, #48	; 0x30
   11fd0:	uxtb	r0, r2
   11fd4:	cmp	r0, #7
   11fd8:	addhi	r6, r6, #2
   11fdc:	bhi	12000 <__assert_fail@plt+0x7e0>
   11fe0:	ldrb	r0, [r6, #3]
   11fe4:	add	r1, r2, r1, lsl #3
   11fe8:	sub	r2, r0, #48	; 0x30
   11fec:	uxtb	r0, r2
   11ff0:	cmp	r0, #7
   11ff4:	addls	r1, r2, r1, lsl #3
   11ff8:	addhi	r6, r6, #3
   11ffc:	addls	r6, r6, #4
   12000:	ldr	r0, [r9]
   12004:	ldrd	r2, [r0, #20]
   12008:	cmp	r2, r3
   1200c:	addcc	r3, r2, #1
   12010:	strcc	r3, [r0, #20]
   12014:	strbcc	r1, [r2]
   12018:	bcs	121dc <__assert_fail@plt+0x9bc>
   1201c:	sub	r4, r6, #1
   12020:	b	11be0 <__assert_fail@plt+0x3c0>
   12024:	strb	r3, [sl, #121]	; 0x79
   12028:	strb	r3, [sl, #122]	; 0x7a
   1202c:	b	118f4 <__assert_fail@plt+0xd4>
   12030:	strb	r4, [sl, #121]	; 0x79
   12034:	strb	r3, [sl, #122]	; 0x7a
   12038:	b	118f4 <__assert_fail@plt+0xd4>
   1203c:	ldr	r3, [sp, #20]
   12040:	eor	r0, r3, #1
   12044:	bl	11628 <exit@plt>
   12048:	bl	1167c <__errno_location@plt>
   1204c:	movw	r1, #9120	; 0x23a0
   12050:	movt	r1, #2
   12054:	ldr	r4, [r0]
   12058:	mov	r2, #5
   1205c:	mov	r0, #0
   12060:	b	11dc4 <__assert_fail@plt+0x5a4>
   12064:	sub	r0, r1, #97	; 0x61
   12068:	cmp	r0, #5
   1206c:	subls	r1, r1, #87	; 0x57
   12070:	bls	12084 <__assert_fail@plt+0x864>
   12074:	sub	r0, r1, #65	; 0x41
   12078:	cmp	r0, #5
   1207c:	subls	r1, r1, #55	; 0x37
   12080:	subhi	r1, r1, #48	; 0x30
   12084:	ldrb	r0, [r6, #3]
   12088:	lsl	ip, r0, #1
   1208c:	ldrh	r2, [r2, ip]
   12090:	tst	r2, #4096	; 0x1000
   12094:	addeq	r4, r6, #2
   12098:	beq	120c8 <__assert_fail@plt+0x8a8>
   1209c:	sub	r2, r0, #97	; 0x61
   120a0:	add	r4, r6, #3
   120a4:	lsl	r1, r1, #4
   120a8:	cmp	r2, #5
   120ac:	subls	r0, r0, #87	; 0x57
   120b0:	bls	120c4 <__assert_fail@plt+0x8a4>
   120b4:	sub	r3, r0, #65	; 0x41
   120b8:	cmp	r3, #5
   120bc:	subls	r0, r0, #55	; 0x37
   120c0:	subhi	r0, r0, #48	; 0x30
   120c4:	add	r1, r1, r0
   120c8:	ldr	r0, [r9]
   120cc:	ldr	r3, [r0, #20]
   120d0:	ldr	r2, [r0, #24]
   120d4:	cmp	r3, r2
   120d8:	addcc	r2, r3, #1
   120dc:	strcc	r2, [r0, #20]
   120e0:	strbcc	r1, [r3]
   120e4:	bcc	11be0 <__assert_fail@plt+0x3c0>
   120e8:	uxtb	r1, r1
   120ec:	bl	11724 <__overflow@plt>
   120f0:	b	11be0 <__assert_fail@plt+0x3c0>
   120f4:	mov	r8, #7
   120f8:	b	11f9c <__assert_fail@plt+0x77c>
   120fc:	mov	r8, #11
   12100:	b	11f9c <__assert_fail@plt+0x77c>
   12104:	mov	r8, #9
   12108:	b	11f9c <__assert_fail@plt+0x77c>
   1210c:	mov	r8, #13
   12110:	b	11f9c <__assert_fail@plt+0x77c>
   12114:	mov	r8, #10
   12118:	b	11f9c <__assert_fail@plt+0x77c>
   1211c:	mov	r8, #12
   12120:	b	11f9c <__assert_fail@plt+0x77c>
   12124:	mov	r8, #27
   12128:	b	11f9c <__assert_fail@plt+0x77c>
   1212c:	mov	r8, #8
   12130:	b	11f9c <__assert_fail@plt+0x77c>
   12134:	mov	r2, #5
   12138:	mov	r0, r5
   1213c:	movw	r1, #8948	; 0x22f4
   12140:	movt	r1, #2
   12144:	bl	114c0 <dcgettext@plt>
   12148:	mov	r2, r0
   1214c:	mov	r1, r5
   12150:	mov	r0, r5
   12154:	bl	11574 <error@plt>
   12158:	b	11984 <__assert_fail@plt+0x164>
   1215c:	ldr	r6, [sp, #20]
   12160:	ldr	r5, [sp, #24]
   12164:	ldr	r2, [sp, #28]
   12168:	mov	r1, r6
   1216c:	mov	r0, r5
   12170:	bl	12344 <__assert_fail@plt+0xb24>
   12174:	mov	r1, r6
   12178:	mov	r2, #1
   1217c:	str	r0, [sp, #28]
   12180:	mov	r0, r5
   12184:	bl	12344 <__assert_fail@plt+0xb24>
   12188:	str	r0, [sp, #44]	; 0x2c
   1218c:	b	11b10 <__assert_fail@plt+0x2f0>
   12190:	mov	r1, #4
   12194:	mov	r0, r5
   12198:	bl	1bc7c <__assert_fail@plt+0xa45c>
   1219c:	mov	r2, #5
   121a0:	movw	r1, #8984	; 0x2318
   121a4:	movt	r1, #2
   121a8:	mov	r0, r5
   121ac:	bl	114c0 <dcgettext@plt>
   121b0:	mov	r6, r0
   121b4:	mov	r0, r7
   121b8:	bl	1d794 <__assert_fail@plt+0xbf74>
   121bc:	mov	r3, r0
   121c0:	mov	r2, r6
   121c4:	mov	r1, r5
   121c8:	mov	r0, r5
   121cc:	bl	11574 <error@plt>
   121d0:	ldr	r3, [sp, #28]
   121d4:	str	r3, [sp, #44]	; 0x2c
   121d8:	b	11b10 <__assert_fail@plt+0x2f0>
   121dc:	uxtb	r1, r1
   121e0:	bl	11724 <__overflow@plt>
   121e4:	b	1201c <__assert_fail@plt+0x7fc>
   121e8:	str	r5, [sp, #32]
   121ec:	b	11d90 <__assert_fail@plt+0x570>
   121f0:	ldr	r3, [sp, #28]
   121f4:	mov	r1, #4
   121f8:	str	r3, [sp, #44]	; 0x2c
   121fc:	bl	1bc7c <__assert_fail@plt+0xa45c>
   12200:	b	11b10 <__assert_fail@plt+0x2f0>
   12204:	mov	r3, sl
   12208:	mov	r4, #0
   1220c:	mov	r2, #5
   12210:	mov	r0, r4
   12214:	movw	r1, #4880	; 0x1310
   12218:	movt	r1, #2
   1221c:	strb	r8, [r3, r5]!
   12220:	strb	r4, [r3, #1]
   12224:	bl	114c0 <dcgettext@plt>
   12228:	mov	r5, r0
   1222c:	mov	r0, sl
   12230:	bl	1d794 <__assert_fail@plt+0xbf74>
   12234:	mov	r3, r0
   12238:	mov	r2, r5
   1223c:	mov	r1, r4
   12240:	mov	r0, #1
   12244:	bl	11574 <error@plt>
   12248:	andeq	r0, r2, r0, lsl #22
   1224c:	andeq	r0, r2, r0, asr #20
   12250:	andeq	r0, r2, r8, asr #20
   12254:	mov	fp, #0
   12258:	mov	lr, #0
   1225c:	pop	{r1}		; (ldr r1, [sp], #4)
   12260:	mov	r2, sp
   12264:	push	{r2}		; (str r2, [sp, #-4]!)
   12268:	push	{r0}		; (str r0, [sp, #-4]!)
   1226c:	ldr	ip, [pc, #16]	; 12284 <__assert_fail@plt+0xa64>
   12270:	push	{ip}		; (str ip, [sp, #-4]!)
   12274:	ldr	r0, [pc, #12]	; 12288 <__assert_fail@plt+0xa68>
   12278:	ldr	r3, [pc, #12]	; 1228c <__assert_fail@plt+0xa6c>
   1227c:	bl	115bc <__libc_start_main@plt>
   12280:	bl	117f0 <abort@plt>
   12284:	andeq	r0, r2, ip, lsl #19
   12288:	andeq	r1, r1, ip, lsr #16
   1228c:	andeq	r0, r2, ip, lsr #18
   12290:	ldr	r3, [pc, #20]	; 122ac <__assert_fail@plt+0xa8c>
   12294:	ldr	r2, [pc, #20]	; 122b0 <__assert_fail@plt+0xa90>
   12298:	add	r3, pc, r3
   1229c:	ldr	r2, [r3, r2]
   122a0:	cmp	r2, #0
   122a4:	bxeq	lr
   122a8:	b	115f8 <__gmon_start__@plt>
   122ac:	andeq	r0, r2, r0, ror #26
   122b0:	andeq	r0, r0, r4, ror r1
   122b4:	ldr	r0, [pc, #24]	; 122d4 <__assert_fail@plt+0xab4>
   122b8:	ldr	r3, [pc, #24]	; 122d8 <__assert_fail@plt+0xab8>
   122bc:	cmp	r3, r0
   122c0:	bxeq	lr
   122c4:	ldr	r3, [pc, #16]	; 122dc <__assert_fail@plt+0xabc>
   122c8:	cmp	r3, #0
   122cc:	bxeq	lr
   122d0:	bx	r3
   122d4:	ldrdeq	r3, [r3], -r0
   122d8:	ldrdeq	r3, [r3], -r0
   122dc:	andeq	r0, r0, r0
   122e0:	ldr	r0, [pc, #36]	; 1230c <__assert_fail@plt+0xaec>
   122e4:	ldr	r1, [pc, #36]	; 12310 <__assert_fail@plt+0xaf0>
   122e8:	sub	r1, r1, r0
   122ec:	asr	r1, r1, #2
   122f0:	add	r1, r1, r1, lsr #31
   122f4:	asrs	r1, r1, #1
   122f8:	bxeq	lr
   122fc:	ldr	r3, [pc, #16]	; 12314 <__assert_fail@plt+0xaf4>
   12300:	cmp	r3, #0
   12304:	bxeq	lr
   12308:	bx	r3
   1230c:	ldrdeq	r3, [r3], -r0
   12310:	ldrdeq	r3, [r3], -r0
   12314:	andeq	r0, r0, r0
   12318:	push	{r4, lr}
   1231c:	ldr	r4, [pc, #24]	; 1233c <__assert_fail@plt+0xb1c>
   12320:	ldrb	r3, [r4]
   12324:	cmp	r3, #0
   12328:	popne	{r4, pc}
   1232c:	bl	122b4 <__assert_fail@plt+0xa94>
   12330:	mov	r3, #1
   12334:	strb	r3, [r4]
   12338:	pop	{r4, pc}
   1233c:	andeq	r3, r3, ip, ror #3
   12340:	b	122e0 <__assert_fail@plt+0xac0>
   12344:	cmp	r0, #0
   12348:	strd	r4, [sp, #-16]!
   1234c:	mov	r4, r1
   12350:	str	r6, [sp, #8]
   12354:	str	lr, [sp, #12]
   12358:	beq	12398 <__assert_fail@plt+0xb78>
   1235c:	cmp	r1, #0
   12360:	bne	1238c <__assert_fail@plt+0xb6c>
   12364:	mov	r0, r1
   12368:	mov	r2, #5
   1236c:	movw	r1, #2988	; 0xbac
   12370:	movt	r1, #2
   12374:	bl	114c0 <dcgettext@plt>
   12378:	ldrd	r4, [sp]
   1237c:	ldr	r6, [sp, #8]
   12380:	ldr	lr, [sp, #12]
   12384:	add	sp, sp, #16
   12388:	b	1ee74 <__assert_fail@plt+0xd654>
   1238c:	movw	r0, #2484	; 0x9b4
   12390:	movt	r0, #2
   12394:	b	12378 <__assert_fail@plt+0xb58>
   12398:	cmp	r1, #0
   1239c:	beq	123b4 <__assert_fail@plt+0xb94>
   123a0:	bl	11430 <is_selinux_enabled@plt>
   123a4:	cmp	r0, #0
   123a8:	ldrgt	r0, [pc, #300]	; 124dc <__assert_fail@plt+0xcbc>
   123ac:	ldrle	r0, [pc, #300]	; 124e0 <__assert_fail@plt+0xcc0>
   123b0:	b	12378 <__assert_fail@plt+0xb58>
   123b4:	mov	r5, r2
   123b8:	movw	r1, #3160	; 0xc58
   123bc:	movt	r1, #2
   123c0:	mov	r2, #5
   123c4:	bl	114c0 <dcgettext@plt>
   123c8:	bl	1ee74 <__assert_fail@plt+0xd654>
   123cc:	cmp	r5, #0
   123d0:	mov	r6, r0
   123d4:	bne	124cc <__assert_fail@plt+0xcac>
   123d8:	movw	r1, #3292	; 0xcdc
   123dc:	movt	r1, #2
   123e0:	mov	r0, r5
   123e4:	mov	r2, #5
   123e8:	bl	114c0 <dcgettext@plt>
   123ec:	mov	r2, r0
   123f0:	mov	r1, r6
   123f4:	movw	r0, #3284	; 0xcd4
   123f8:	movt	r0, #2
   123fc:	bl	1ef44 <__assert_fail@plt+0xd724>
   12400:	mov	r5, r0
   12404:	mov	r0, r6
   12408:	bl	171c0 <__assert_fail@plt+0x59a0>
   1240c:	mov	r2, #5
   12410:	movw	r1, #3336	; 0xd08
   12414:	movt	r1, #2
   12418:	mov	r0, #0
   1241c:	bl	114c0 <dcgettext@plt>
   12420:	mov	r2, r0
   12424:	mov	r1, r5
   12428:	movw	r0, #3284	; 0xcd4
   1242c:	movt	r0, #2
   12430:	bl	1ef44 <__assert_fail@plt+0xd724>
   12434:	mov	r4, r0
   12438:	mov	r0, r5
   1243c:	bl	171c0 <__assert_fail@plt+0x59a0>
   12440:	bl	11430 <is_selinux_enabled@plt>
   12444:	cmp	r0, #0
   12448:	ble	12484 <__assert_fail@plt+0xc64>
   1244c:	mov	r2, #5
   12450:	movw	r1, #3396	; 0xd44
   12454:	movt	r1, #2
   12458:	mov	r0, #0
   1245c:	bl	114c0 <dcgettext@plt>
   12460:	mov	r2, r0
   12464:	mov	r1, r4
   12468:	movw	r0, #3284	; 0xcd4
   1246c:	movt	r0, #2
   12470:	bl	1ef44 <__assert_fail@plt+0xd724>
   12474:	mov	r3, r0
   12478:	mov	r0, r4
   1247c:	mov	r4, r3
   12480:	bl	171c0 <__assert_fail@plt+0x59a0>
   12484:	mov	r2, #5
   12488:	movw	r1, #3412	; 0xd54
   1248c:	movt	r1, #2
   12490:	mov	r0, #0
   12494:	bl	114c0 <dcgettext@plt>
   12498:	mov	r2, r0
   1249c:	mov	r1, r4
   124a0:	movw	r0, #3284	; 0xcd4
   124a4:	movt	r0, #2
   124a8:	bl	1ef44 <__assert_fail@plt+0xd724>
   124ac:	mov	r5, r0
   124b0:	mov	r0, r4
   124b4:	bl	171c0 <__assert_fail@plt+0x59a0>
   124b8:	mov	r0, r5
   124bc:	ldrd	r4, [sp]
   124c0:	ldr	r6, [sp, #8]
   124c4:	add	sp, sp, #12
   124c8:	pop	{pc}		; (ldr pc, [sp], #4)
   124cc:	movw	r1, #3220	; 0xc94
   124d0:	movt	r1, #2
   124d4:	mov	r0, r4
   124d8:	b	123e4 <__assert_fail@plt+0xbc4>
   124dc:	ldrdeq	r0, [r2], -r8
   124e0:	andeq	r0, r2, ip, lsl #20
   124e4:	strd	r4, [sp, #-20]!	; 0xffffffec
   124e8:	movw	r4, #12784	; 0x31f0
   124ec:	movt	r4, #3
   124f0:	ldrb	r3, [r4]
   124f4:	mov	r5, r0
   124f8:	strd	r6, [sp, #8]
   124fc:	str	lr, [sp, #16]
   12500:	sub	sp, sp, #212	; 0xd4
   12504:	cmp	r3, #0
   12508:	beq	125d0 <__assert_fail@plt+0xdb0>
   1250c:	mov	r2, sp
   12510:	mov	r1, r5
   12514:	mov	r0, #3
   12518:	bl	117cc <__xstat64@plt>
   1251c:	cmp	r0, #0
   12520:	bne	125b8 <__assert_fail@plt+0xd98>
   12524:	ldr	r4, [r4, #4]
   12528:	cmp	r4, #0
   1252c:	bne	12540 <__assert_fail@plt+0xd20>
   12530:	b	125b8 <__assert_fail@plt+0xd98>
   12534:	ldr	r4, [r4, #28]
   12538:	cmp	r4, #0
   1253c:	beq	125b8 <__assert_fail@plt+0xd98>
   12540:	ldrb	r3, [r4, #24]
   12544:	tst	r3, #1
   12548:	beq	12534 <__assert_fail@plt+0xd14>
   1254c:	ldr	r6, [r4]
   12550:	ldrb	r3, [r6]
   12554:	cmp	r3, #47	; 0x2f
   12558:	bne	12534 <__assert_fail@plt+0xd14>
   1255c:	mov	r1, r5
   12560:	ldr	r0, [r4, #4]
   12564:	bl	1143c <strcmp@plt>
   12568:	cmp	r0, #0
   1256c:	bne	12534 <__assert_fail@plt+0xd14>
   12570:	mov	r1, r6
   12574:	add	r2, sp, #104	; 0x68
   12578:	mov	r0, #3
   1257c:	bl	117cc <__xstat64@plt>
   12580:	cmp	r0, #0
   12584:	bne	12534 <__assert_fail@plt+0xd14>
   12588:	ldrd	r0, [sp, #96]	; 0x60
   1258c:	ldrd	r2, [sp, #200]	; 0xc8
   12590:	cmp	r1, r3
   12594:	cmpeq	r0, r2
   12598:	bne	12534 <__assert_fail@plt+0xd14>
   1259c:	ldrd	r0, [sp]
   125a0:	ldrd	r2, [sp, #104]	; 0x68
   125a4:	cmp	r1, r3
   125a8:	cmpeq	r0, r2
   125ac:	bne	12534 <__assert_fail@plt+0xd14>
   125b0:	ldr	r0, [r4]
   125b4:	b	125bc <__assert_fail@plt+0xd9c>
   125b8:	mov	r0, #0
   125bc:	add	sp, sp, #212	; 0xd4
   125c0:	ldrd	r4, [sp]
   125c4:	ldrd	r6, [sp, #8]
   125c8:	add	sp, sp, #16
   125cc:	pop	{pc}		; (ldr pc, [sp], #4)
   125d0:	mov	r0, r3
   125d4:	bl	173bc <__assert_fail@plt+0x5b9c>
   125d8:	cmp	r0, #0
   125dc:	mov	r6, r0
   125e0:	str	r0, [r4, #4]
   125e4:	beq	125f4 <__assert_fail@plt+0xdd4>
   125e8:	mov	r3, #1
   125ec:	strb	r3, [r4]
   125f0:	b	1250c <__assert_fail@plt+0xcec>
   125f4:	bl	1167c <__errno_location@plt>
   125f8:	ldr	r7, [r0]
   125fc:	mov	r2, #5
   12600:	mov	r0, r6
   12604:	movw	r1, #3460	; 0xd84
   12608:	movt	r1, #2
   1260c:	bl	114c0 <dcgettext@plt>
   12610:	mov	r3, r0
   12614:	movw	r2, #8384	; 0x20c0
   12618:	movt	r2, #2
   1261c:	mov	r0, r6
   12620:	mov	r1, r7
   12624:	bl	11574 <error@plt>
   12628:	b	125e8 <__assert_fail@plt+0xdc8>
   1262c:	strd	r4, [sp, #-12]!
   12630:	movw	r4, #12784	; 0x31f0
   12634:	movt	r4, #3
   12638:	ldr	r3, [r4, #8]
   1263c:	str	lr, [sp, #8]
   12640:	sub	sp, sp, #92	; 0x5c
   12644:	add	r5, sp, #8
   12648:	stm	r5, {r0, r1}
   1264c:	cmp	r3, #0
   12650:	beq	126d8 <__assert_fail@plt+0xeb8>
   12654:	mov	r1, r5
   12658:	mov	r0, r3
   1265c:	ldr	r5, [sp, #12]
   12660:	add	r2, sp, #44	; 0x2c
   12664:	bl	1df34 <__assert_fail@plt+0xc714>
   12668:	cmp	r0, #0
   1266c:	beq	126a8 <__assert_fail@plt+0xe88>
   12670:	ldr	ip, [r4, #8]
   12674:	movw	r2, #3508	; 0xdb4
   12678:	movt	r2, #2
   1267c:	add	r3, sp, #44	; 0x2c
   12680:	mov	r1, #61	; 0x3d
   12684:	ldr	r0, [pc, #104]	; 126f4 <__assert_fail@plt+0xed4>
   12688:	str	ip, [sp]
   1268c:	str	r5, [sp, #4]
   12690:	bl	19dcc <__assert_fail@plt+0x85ac>
   12694:	ldr	r0, [pc, #88]	; 126f4 <__assert_fail@plt+0xed4>
   12698:	add	sp, sp, #92	; 0x5c
   1269c:	ldrd	r4, [sp]
   126a0:	add	sp, sp, #8
   126a4:	pop	{pc}		; (ldr pc, [sp], #4)
   126a8:	ldr	r0, [sp, #8]
   126ac:	add	r2, sp, #20
   126b0:	asr	r1, r0, #31
   126b4:	bl	17220 <__assert_fail@plt+0x5a00>
   126b8:	movw	r3, #3532	; 0xdcc
   126bc:	movt	r3, #2
   126c0:	stm	sp, {r0, r5}
   126c4:	mov	r2, #61	; 0x3d
   126c8:	mov	r1, #1
   126cc:	ldr	r0, [pc, #32]	; 126f4 <__assert_fail@plt+0xed4>
   126d0:	bl	11688 <__sprintf_chk@plt>
   126d4:	b	12694 <__assert_fail@plt+0xe74>
   126d8:	movw	r0, #3504	; 0xdb0
   126dc:	movt	r0, #2
   126e0:	bl	11598 <getenv@plt>
   126e4:	bl	1de68 <__assert_fail@plt+0xc648>
   126e8:	mov	r3, r0
   126ec:	str	r0, [r4, #8]
   126f0:	b	12654 <__assert_fail@plt+0xe34>
   126f4:	strdeq	r3, [r3], -ip
   126f8:	strd	r4, [sp, #-36]!	; 0xffffffdc
   126fc:	add	r4, r0, #1
   12700:	strd	r6, [sp, #8]
   12704:	add	r6, r0, r1
   12708:	strd	r8, [sp, #16]
   1270c:	cmp	r4, r6
   12710:	mov	r8, r0
   12714:	strd	sl, [sp, #24]
   12718:	str	lr, [sp, #32]
   1271c:	sub	sp, sp, #12
   12720:	str	r2, [sp, #4]
   12724:	bcs	12830 <__assert_fail@plt+0x1010>
   12728:	movw	sl, #3540	; 0xdd4
   1272c:	movt	sl, #2
   12730:	mov	r5, r4
   12734:	b	12758 <__assert_fail@plt+0xf38>
   12738:	bl	1164c <strchr@plt>
   1273c:	cmp	r0, #0
   12740:	mov	r1, r4
   12744:	mov	r5, r7
   12748:	strbne	fp, [r1], #1
   1274c:	movne	r4, r1
   12750:	cmp	r6, r7
   12754:	bls	12830 <__assert_fail@plt+0x1010>
   12758:	mov	r7, r5
   1275c:	ldr	r0, [pc, #292]	; 12888 <__assert_fail@plt+0x1068>
   12760:	mov	r9, r5
   12764:	ldrb	fp, [r7], #1
   12768:	mov	r1, fp
   1276c:	bl	1164c <strchr@plt>
   12770:	cmp	r0, #0
   12774:	mov	r1, fp
   12778:	mov	r0, sl
   1277c:	bne	12738 <__assert_fail@plt+0xf18>
   12780:	cmp	r6, r5
   12784:	bls	12830 <__assert_fail@plt+0x1010>
   12788:	add	r1, r4, #4
   1278c:	add	r2, r5, #4
   12790:	cmp	r1, r5
   12794:	sub	r3, r6, #1
   12798:	movhi	r1, #0
   1279c:	movls	r1, #1
   127a0:	cmp	r4, r2
   127a4:	movcc	r2, r1
   127a8:	orrcs	r2, r1, #1
   127ac:	sub	r3, r3, r5
   127b0:	cmp	r3, #7
   127b4:	movls	r3, #0
   127b8:	andhi	r3, r2, #1
   127bc:	cmp	r3, #0
   127c0:	beq	1286c <__assert_fail@plt+0x104c>
   127c4:	sub	r0, r6, r5
   127c8:	mov	r2, r4
   127cc:	bic	r1, r0, #3
   127d0:	mov	r3, r5
   127d4:	add	r1, r1, r5
   127d8:	ldr	ip, [r3], #4
   127dc:	cmp	r3, r1
   127e0:	str	ip, [r2], #4
   127e4:	bne	127d8 <__assert_fail@plt+0xfb8>
   127e8:	bic	r3, r0, #3
   127ec:	cmp	r0, r3
   127f0:	add	r2, r5, r3
   127f4:	add	r1, r4, r3
   127f8:	beq	1282c <__assert_fail@plt+0x100c>
   127fc:	ldrb	ip, [r5, r3]
   12800:	add	lr, r2, #1
   12804:	cmp	r6, lr
   12808:	strb	ip, [r4, r3]
   1280c:	bls	1282c <__assert_fail@plt+0x100c>
   12810:	ldrb	r3, [r2, #1]
   12814:	add	ip, r2, #2
   12818:	cmp	r6, ip
   1281c:	strb	r3, [r1, #1]
   12820:	bls	1282c <__assert_fail@plt+0x100c>
   12824:	ldrb	r3, [r2, #2]
   12828:	strb	r3, [r1, #2]
   1282c:	add	r4, r4, r0
   12830:	movw	r3, #3676	; 0xe5c
   12834:	movt	r3, #2
   12838:	ldr	r2, [sp, #4]
   1283c:	mov	r1, r8
   12840:	mov	r0, #1
   12844:	ldrh	r3, [r3]
   12848:	strh	r3, [r4]
   1284c:	add	sp, sp, #12
   12850:	ldrd	r4, [sp]
   12854:	ldrd	r6, [sp, #8]
   12858:	ldrd	r8, [sp, #16]
   1285c:	ldrd	sl, [sp, #24]
   12860:	ldr	lr, [sp, #32]
   12864:	add	sp, sp, #36	; 0x24
   12868:	b	116b8 <__printf_chk@plt>
   1286c:	sub	r3, r4, #1
   12870:	ldrb	r2, [r9], #1
   12874:	cmp	r6, r9
   12878:	strb	r2, [r3, #1]!
   1287c:	bne	12870 <__assert_fail@plt+0x1050>
   12880:	sub	r0, r6, r5
   12884:	b	1282c <__assert_fail@plt+0x100c>
   12888:	andeq	r0, r2, r0, asr #20
   1288c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   12890:	add	r4, r0, #1
   12894:	strd	r6, [sp, #8]
   12898:	add	r6, r0, r1
   1289c:	mov	r7, r0
   128a0:	strd	r8, [sp, #16]
   128a4:	cmp	r4, r6
   128a8:	strd	sl, [sp, #24]
   128ac:	str	lr, [sp, #32]
   128b0:	sub	sp, sp, #12
   128b4:	strd	r2, [sp]
   128b8:	bcs	129c4 <__assert_fail@plt+0x11a4>
   128bc:	movw	sl, #3544	; 0xdd8
   128c0:	movt	sl, #2
   128c4:	mov	r5, r4
   128c8:	b	128ec <__assert_fail@plt+0x10cc>
   128cc:	bl	1164c <strchr@plt>
   128d0:	cmp	r0, #0
   128d4:	mov	r3, r4
   128d8:	mov	r5, fp
   128dc:	strbne	r9, [r3], #1
   128e0:	movne	r4, r3
   128e4:	cmp	r6, fp
   128e8:	bls	129c4 <__assert_fail@plt+0x11a4>
   128ec:	mov	fp, r5
   128f0:	ldr	r0, [pc, #292]	; 12a1c <__assert_fail@plt+0x11fc>
   128f4:	mov	r8, r5
   128f8:	ldrb	r9, [fp], #1
   128fc:	mov	r1, r9
   12900:	bl	1164c <strchr@plt>
   12904:	cmp	r0, #0
   12908:	mov	r1, r9
   1290c:	mov	r0, sl
   12910:	bne	128cc <__assert_fail@plt+0x10ac>
   12914:	cmp	r6, r5
   12918:	bls	129c4 <__assert_fail@plt+0x11a4>
   1291c:	add	r1, r4, #4
   12920:	add	r2, r5, #4
   12924:	cmp	r1, r5
   12928:	sub	r3, r6, #1
   1292c:	movhi	r1, #0
   12930:	movls	r1, #1
   12934:	cmp	r4, r2
   12938:	movcc	r2, r1
   1293c:	orrcs	r2, r1, #1
   12940:	sub	r3, r3, r5
   12944:	cmp	r3, #7
   12948:	movls	r3, #0
   1294c:	andhi	r3, r2, #1
   12950:	cmp	r3, #0
   12954:	beq	12a00 <__assert_fail@plt+0x11e0>
   12958:	sub	r0, r6, r5
   1295c:	mov	r2, r4
   12960:	bic	r1, r0, #3
   12964:	mov	r3, r5
   12968:	add	r1, r1, r5
   1296c:	ldr	ip, [r3], #4
   12970:	cmp	r3, r1
   12974:	str	ip, [r2], #4
   12978:	bne	1296c <__assert_fail@plt+0x114c>
   1297c:	bic	r3, r0, #3
   12980:	cmp	r0, r3
   12984:	add	r2, r5, r3
   12988:	add	r1, r4, r3
   1298c:	beq	129c0 <__assert_fail@plt+0x11a0>
   12990:	ldrb	ip, [r5, r3]
   12994:	add	lr, r2, #1
   12998:	cmp	r6, lr
   1299c:	strb	ip, [r4, r3]
   129a0:	bls	129c0 <__assert_fail@plt+0x11a0>
   129a4:	ldrb	r3, [r2, #1]
   129a8:	add	ip, r2, #2
   129ac:	cmp	r6, ip
   129b0:	strb	r3, [r1, #1]
   129b4:	bls	129c0 <__assert_fail@plt+0x11a0>
   129b8:	ldrb	r3, [r2, #2]
   129bc:	strb	r3, [r1, #2]
   129c0:	add	r4, r4, r0
   129c4:	movw	r3, #3548	; 0xddc
   129c8:	movt	r3, #2
   129cc:	ldr	ip, [r3]
   129d0:	mov	r1, r7
   129d4:	mov	r0, #1
   129d8:	ldrd	r2, [sp]
   129dc:	str	ip, [r4]
   129e0:	add	sp, sp, #12
   129e4:	ldrd	r4, [sp]
   129e8:	ldrd	r6, [sp, #8]
   129ec:	ldrd	r8, [sp, #16]
   129f0:	ldrd	sl, [sp, #24]
   129f4:	ldr	lr, [sp, #32]
   129f8:	add	sp, sp, #36	; 0x24
   129fc:	b	116b8 <__printf_chk@plt>
   12a00:	sub	r3, r4, #1
   12a04:	ldrb	r2, [r8], #1
   12a08:	cmp	r6, r8
   12a0c:	strb	r2, [r3, #1]!
   12a10:	bne	12a04 <__assert_fail@plt+0x11e4>
   12a14:	sub	r0, r6, r5
   12a18:	b	129c0 <__assert_fail@plt+0x11a0>
   12a1c:	andeq	r0, r2, r0, asr #20
   12a20:	strd	r4, [sp, #-36]!	; 0xffffffdc
   12a24:	add	r4, r0, #1
   12a28:	strd	r6, [sp, #8]
   12a2c:	add	r6, r0, r1
   12a30:	mov	r7, r0
   12a34:	strd	r8, [sp, #16]
   12a38:	cmp	r4, r6
   12a3c:	strd	sl, [sp, #24]
   12a40:	str	lr, [sp, #32]
   12a44:	sub	sp, sp, #12
   12a48:	strd	r2, [sp]
   12a4c:	bcs	12b58 <__assert_fail@plt+0x1338>
   12a50:	movw	sl, #3552	; 0xde0
   12a54:	movt	sl, #2
   12a58:	mov	r5, r4
   12a5c:	b	12a80 <__assert_fail@plt+0x1260>
   12a60:	bl	1164c <strchr@plt>
   12a64:	cmp	r0, #0
   12a68:	mov	r3, r4
   12a6c:	mov	r5, fp
   12a70:	strbne	r9, [r3], #1
   12a74:	movne	r4, r3
   12a78:	cmp	r6, fp
   12a7c:	bls	12b58 <__assert_fail@plt+0x1338>
   12a80:	mov	fp, r5
   12a84:	ldr	r0, [pc, #292]	; 12bb0 <__assert_fail@plt+0x1390>
   12a88:	mov	r8, r5
   12a8c:	ldrb	r9, [fp], #1
   12a90:	mov	r1, r9
   12a94:	bl	1164c <strchr@plt>
   12a98:	cmp	r0, #0
   12a9c:	mov	r1, r9
   12aa0:	mov	r0, sl
   12aa4:	bne	12a60 <__assert_fail@plt+0x1240>
   12aa8:	cmp	r6, r5
   12aac:	bls	12b58 <__assert_fail@plt+0x1338>
   12ab0:	add	r1, r4, #4
   12ab4:	add	r2, r5, #4
   12ab8:	cmp	r1, r5
   12abc:	sub	r3, r6, #1
   12ac0:	movhi	r1, #0
   12ac4:	movls	r1, #1
   12ac8:	cmp	r4, r2
   12acc:	movcc	r2, r1
   12ad0:	orrcs	r2, r1, #1
   12ad4:	sub	r3, r3, r5
   12ad8:	cmp	r3, #7
   12adc:	movls	r3, #0
   12ae0:	andhi	r3, r2, #1
   12ae4:	cmp	r3, #0
   12ae8:	beq	12b94 <__assert_fail@plt+0x1374>
   12aec:	sub	r0, r6, r5
   12af0:	mov	r2, r4
   12af4:	bic	r1, r0, #3
   12af8:	mov	r3, r5
   12afc:	add	r1, r1, r5
   12b00:	ldr	ip, [r3], #4
   12b04:	cmp	r3, r1
   12b08:	str	ip, [r2], #4
   12b0c:	bne	12b00 <__assert_fail@plt+0x12e0>
   12b10:	bic	r3, r0, #3
   12b14:	cmp	r0, r3
   12b18:	add	r2, r5, r3
   12b1c:	add	r1, r4, r3
   12b20:	beq	12b54 <__assert_fail@plt+0x1334>
   12b24:	ldrb	ip, [r5, r3]
   12b28:	add	lr, r2, #1
   12b2c:	cmp	r6, lr
   12b30:	strb	ip, [r4, r3]
   12b34:	bls	12b54 <__assert_fail@plt+0x1334>
   12b38:	ldrb	r3, [r2, #1]
   12b3c:	add	ip, r2, #2
   12b40:	cmp	r6, ip
   12b44:	strb	r3, [r1, #1]
   12b48:	bls	12b54 <__assert_fail@plt+0x1334>
   12b4c:	ldrb	r3, [r2, #2]
   12b50:	strb	r3, [r1, #2]
   12b54:	add	r4, r4, r0
   12b58:	movw	r3, #3556	; 0xde4
   12b5c:	movt	r3, #2
   12b60:	ldr	ip, [r3]
   12b64:	mov	r1, r7
   12b68:	mov	r0, #1
   12b6c:	ldrd	r2, [sp]
   12b70:	str	ip, [r4]
   12b74:	add	sp, sp, #12
   12b78:	ldrd	r4, [sp]
   12b7c:	ldrd	r6, [sp, #8]
   12b80:	ldrd	r8, [sp, #16]
   12b84:	ldrd	sl, [sp, #24]
   12b88:	ldr	lr, [sp, #32]
   12b8c:	add	sp, sp, #36	; 0x24
   12b90:	b	116b8 <__printf_chk@plt>
   12b94:	sub	r3, r4, #1
   12b98:	ldrb	r2, [r8], #1
   12b9c:	cmp	r6, r8
   12ba0:	strb	r2, [r3, #1]!
   12ba4:	bne	12b98 <__assert_fail@plt+0x1378>
   12ba8:	sub	r0, r6, r5
   12bac:	b	12b54 <__assert_fail@plt+0x1334>
   12bb0:	andeq	r0, r2, r0, asr #20
   12bb4:	strd	r4, [sp, #-36]!	; 0xffffffdc
   12bb8:	strd	r6, [sp, #8]
   12bbc:	mov	r6, r0
   12bc0:	strd	r8, [sp, #16]
   12bc4:	mov	r8, r1
   12bc8:	mov	r1, #46	; 0x2e
   12bcc:	strd	sl, [sp, #24]
   12bd0:	str	lr, [sp, #32]
   12bd4:	sub	sp, sp, #52	; 0x34
   12bd8:	add	ip, sp, #48	; 0x30
   12bdc:	str	r0, [sp, #20]
   12be0:	stmdb	ip, {r2, r3}
   12be4:	mov	r2, r8
   12be8:	bl	116dc <memchr@plt>
   12bec:	subs	r5, r0, #0
   12bf0:	mov	r3, r6
   12bf4:	ldr	r4, [sp, #40]	; 0x28
   12bf8:	add	r6, r6, r8
   12bfc:	ldr	r7, [sp, #44]	; 0x2c
   12c00:	beq	12f54 <__assert_fail@plt+0x1734>
   12c04:	mov	r9, #0
   12c08:	strb	r9, [r3, r8]
   12c0c:	ldrb	r3, [r5, #1]
   12c10:	sub	r3, r3, #48	; 0x30
   12c14:	cmp	r3, #9
   12c18:	bls	12f14 <__assert_fail@plt+0x16f4>
   12c1c:	ldrb	r3, [r5, #-1]
   12c20:	sub	r3, r3, #48	; 0x30
   12c24:	cmp	r3, #9
   12c28:	movls	r3, #9
   12c2c:	strls	r3, [sp, #16]
   12c30:	bhi	130e0 <__assert_fail@plt+0x18c0>
   12c34:	mov	r3, #0
   12c38:	mov	r2, r5
   12c3c:	strb	r3, [r2], #-1
   12c40:	mov	r6, r2
   12c44:	ldrb	r3, [r2, #-1]!
   12c48:	sub	r3, r3, #48	; 0x30
   12c4c:	cmp	r3, #9
   12c50:	bls	12c40 <__assert_fail@plt+0x1420>
   12c54:	mov	r0, r6
   12c58:	mov	r2, #10
   12c5c:	mov	r1, #0
   12c60:	bl	11448 <strtol@plt>
   12c64:	cmp	r0, #1
   12c68:	str	r0, [sp, #36]	; 0x24
   12c6c:	movle	r6, r5
   12c70:	ble	12d00 <__assert_fail@plt+0x14e0>
   12c74:	movw	ip, #12784	; 0x31f0
   12c78:	movt	ip, #3
   12c7c:	ldrb	r2, [r6]
   12c80:	ldr	r3, [ip, #76]	; 0x4c
   12c84:	cmp	r2, #48	; 0x30
   12c88:	addeq	r6, r6, #1
   12c8c:	cmp	r3, r0
   12c90:	bcs	12d00 <__assert_fail@plt+0x14e0>
   12c94:	sub	r3, r0, r3
   12c98:	cmp	r3, #1
   12c9c:	ble	12d00 <__assert_fail@plt+0x14e0>
   12ca0:	ldr	r2, [sp, #16]
   12ca4:	sub	r1, r3, r2
   12ca8:	cmp	r1, #1
   12cac:	ble	12d00 <__assert_fail@plt+0x14e0>
   12cb0:	ldr	r0, [sp, #20]
   12cb4:	cmp	r0, r6
   12cb8:	bcs	13118 <__assert_fail@plt+0x18f8>
   12cbc:	sub	r6, r6, #1
   12cc0:	sub	r3, r0, #1
   12cc4:	mov	lr, #0
   12cc8:	ldrb	ip, [r3, #1]!
   12ccc:	mov	r2, r0
   12cd0:	cmp	ip, #45	; 0x2d
   12cd4:	moveq	lr, #1
   12cd8:	strbne	ip, [r2], #1
   12cdc:	movne	r0, r2
   12ce0:	cmp	r3, r6
   12ce4:	bne	12cc8 <__assert_fail@plt+0x14a8>
   12ce8:	ldr	r3, [sp, #20]
   12cec:	cmp	lr, #0
   12cf0:	sub	r6, r0, r3
   12cf4:	beq	1311c <__assert_fail@plt+0x18fc>
   12cf8:	ldr	r3, [sp, #20]
   12cfc:	add	r6, r3, r6
   12d00:	ldr	r3, [sp, #16]
   12d04:	cmp	r3, #8
   12d08:	bgt	13158 <__assert_fail@plt+0x1938>
   12d0c:	ldr	r2, [sp, #16]
   12d10:	mov	r3, #1
   12d14:	add	r3, r3, r3, lsl #2
   12d18:	add	r2, r2, #1
   12d1c:	cmp	r2, #9
   12d20:	lsl	r3, r3, #1
   12d24:	bne	12d14 <__assert_fail@plt+0x14f4>
   12d28:	sdiv	r2, r7, r3
   12d2c:	str	r2, [sp, #32]
   12d30:	ldr	r1, [sp, #20]
   12d34:	cmp	r7, #0
   12d38:	lsrne	r2, r4, #31
   12d3c:	moveq	r2, #0
   12d40:	cmp	r2, #0
   12d44:	add	r5, r1, #1
   12d48:	bne	12f60 <__assert_fail@plt+0x1740>
   12d4c:	asr	r3, r4, #31
   12d50:	mov	r2, r4
   12d54:	cmp	r6, r5
   12d58:	strd	r2, [sp, #24]
   12d5c:	bls	12e6c <__assert_fail@plt+0x164c>
   12d60:	movw	r8, #3564	; 0xdec
   12d64:	movt	r8, #2
   12d68:	ldr	r9, [pc, #1012]	; 13164 <__assert_fail@plt+0x1944>
   12d6c:	mov	fp, r5
   12d70:	b	12d94 <__assert_fail@plt+0x1574>
   12d74:	bl	1164c <strchr@plt>
   12d78:	cmp	r0, #0
   12d7c:	mov	r3, r5
   12d80:	mov	fp, r4
   12d84:	strbne	sl, [r3], #1
   12d88:	movne	r5, r3
   12d8c:	cmp	r6, r4
   12d90:	bls	12e6c <__assert_fail@plt+0x164c>
   12d94:	mov	r4, fp
   12d98:	mov	r0, r9
   12d9c:	ldrb	sl, [r4], #1
   12da0:	mov	r7, fp
   12da4:	mov	r1, sl
   12da8:	bl	1164c <strchr@plt>
   12dac:	cmp	r0, #0
   12db0:	mov	r1, sl
   12db4:	mov	r0, r8
   12db8:	bne	12d74 <__assert_fail@plt+0x1554>
   12dbc:	cmp	r6, fp
   12dc0:	bls	12e6c <__assert_fail@plt+0x164c>
   12dc4:	add	r2, r5, #4
   12dc8:	add	ip, fp, #4
   12dcc:	mov	r1, r2
   12dd0:	sub	r0, r6, #1
   12dd4:	cmp	ip, r5
   12dd8:	cmphi	r1, fp
   12ddc:	mov	r2, ip
   12de0:	sub	r1, r0, fp
   12de4:	movls	r2, #1
   12de8:	movhi	r2, #0
   12dec:	cmp	r1, #7
   12df0:	movls	r2, #0
   12df4:	andhi	r2, r2, #1
   12df8:	cmp	r2, #0
   12dfc:	beq	130fc <__assert_fail@plt+0x18dc>
   12e00:	sub	lr, r6, fp
   12e04:	mov	r1, r5
   12e08:	bic	ip, lr, #3
   12e0c:	mov	r2, fp
   12e10:	add	ip, ip, fp
   12e14:	ldr	r3, [r2], #4
   12e18:	cmp	r2, ip
   12e1c:	str	r3, [r1], #4
   12e20:	bne	12e14 <__assert_fail@plt+0x15f4>
   12e24:	bic	r2, lr, #3
   12e28:	cmp	lr, r2
   12e2c:	add	r1, fp, r2
   12e30:	add	r0, r5, r2
   12e34:	beq	12e68 <__assert_fail@plt+0x1648>
   12e38:	ldrb	r3, [fp, r2]
   12e3c:	add	ip, r1, #1
   12e40:	cmp	r6, ip
   12e44:	strb	r3, [r5, r2]
   12e48:	bls	12e68 <__assert_fail@plt+0x1648>
   12e4c:	ldrb	r3, [r1, #1]
   12e50:	add	r2, r1, #2
   12e54:	cmp	r6, r2
   12e58:	strb	r3, [r0, #1]
   12e5c:	bls	12e68 <__assert_fail@plt+0x1648>
   12e60:	ldrb	r3, [r1, #2]
   12e64:	strb	r3, [r0, #2]
   12e68:	add	r5, r5, lr
   12e6c:	movw	r3, #3576	; 0xdf8
   12e70:	movt	r3, #2
   12e74:	ldr	r1, [sp, #20]
   12e78:	mov	r0, #1
   12e7c:	ldr	ip, [r3]
   12e80:	ldrd	r2, [sp, #24]
   12e84:	str	ip, [r5]
   12e88:	bl	116b8 <__printf_chk@plt>
   12e8c:	ldr	r2, [sp, #16]
   12e90:	cmp	r2, #0
   12e94:	beq	12ef8 <__assert_fail@plt+0x16d8>
   12e98:	ldr	r1, [sp, #36]	; 0x24
   12e9c:	bic	r0, r0, r0, asr #31
   12ea0:	cmp	r2, #9
   12ea4:	movlt	r3, r2
   12ea8:	movge	r3, #9
   12eac:	movw	ip, #12784	; 0x31f0
   12eb0:	movt	ip, #3
   12eb4:	sub	sl, r2, r3
   12eb8:	cmp	r0, r1
   12ebc:	bge	12f4c <__assert_fail@plt+0x172c>
   12ec0:	ldr	r2, [ip, #76]	; 0x4c
   12ec4:	sub	r0, r1, r0
   12ec8:	cmp	r0, r2
   12ecc:	addhi	r2, r3, r2
   12ed0:	subhi	r2, r0, r2
   12ed4:	bls	12f4c <__assert_fail@plt+0x172c>
   12ed8:	ldr	r1, [sp, #32]
   12edc:	mov	lr, #0
   12ee0:	mov	r0, #1
   12ee4:	stm	sp, {r1, r2, sl, lr}
   12ee8:	movw	r1, #3580	; 0xdfc
   12eec:	movt	r1, #2
   12ef0:	ldr	r2, [ip, #80]	; 0x50
   12ef4:	bl	116b8 <__printf_chk@plt>
   12ef8:	add	sp, sp, #52	; 0x34
   12efc:	ldrd	r4, [sp]
   12f00:	ldrd	r6, [sp, #8]
   12f04:	ldrd	r8, [sp, #16]
   12f08:	ldrd	sl, [sp, #24]
   12f0c:	add	sp, sp, #32
   12f10:	pop	{pc}		; (ldr pc, [sp], #4)
   12f14:	mov	r2, #10
   12f18:	mov	r1, r9
   12f1c:	add	r0, r5, #1
   12f20:	bl	11448 <strtol@plt>
   12f24:	subs	r3, r0, #0
   12f28:	str	r3, [sp, #16]
   12f2c:	beq	130d4 <__assert_fail@plt+0x18b4>
   12f30:	ldrb	r3, [r5, #-1]
   12f34:	sub	r3, r3, #48	; 0x30
   12f38:	cmp	r3, #9
   12f3c:	movhi	r6, r5
   12f40:	strhi	r9, [sp, #36]	; 0x24
   12f44:	bhi	12d00 <__assert_fail@plt+0x14e0>
   12f48:	b	12c34 <__assert_fail@plt+0x1414>
   12f4c:	mov	r2, #0
   12f50:	b	12ed8 <__assert_fail@plt+0x16b8>
   12f54:	str	r5, [sp, #16]
   12f58:	str	r5, [sp, #36]	; 0x24
   12f5c:	b	12d0c <__assert_fail@plt+0x14ec>
   12f60:	sdiv	r1, r7, r3
   12f64:	mov	r2, #51712	; 0xca00
   12f68:	movt	r2, #15258	; 0x3b9a
   12f6c:	udiv	r2, r2, r3
   12f70:	mls	r7, r3, r1, r7
   12f74:	ldr	r3, [sp, #32]
   12f78:	sub	r2, r2, r3
   12f7c:	cmp	r7, #0
   12f80:	subne	r2, r2, #1
   12f84:	cmp	r2, #0
   12f88:	addne	r4, r4, #1
   12f8c:	cmp	r4, #0
   12f90:	str	r2, [sp, #32]
   12f94:	bne	12d4c <__assert_fail@plt+0x152c>
   12f98:	cmp	r6, r5
   12f9c:	bls	130a8 <__assert_fail@plt+0x1888>
   12fa0:	movw	r8, #3564	; 0xdec
   12fa4:	movt	r8, #2
   12fa8:	ldr	r9, [pc, #436]	; 13164 <__assert_fail@plt+0x1944>
   12fac:	mov	fp, r5
   12fb0:	b	12fd4 <__assert_fail@plt+0x17b4>
   12fb4:	bl	1164c <strchr@plt>
   12fb8:	cmp	r0, #0
   12fbc:	mov	r3, r5
   12fc0:	mov	fp, r4
   12fc4:	strbne	sl, [r3], #1
   12fc8:	movne	r5, r3
   12fcc:	cmp	r6, r4
   12fd0:	bls	130a8 <__assert_fail@plt+0x1888>
   12fd4:	mov	r4, fp
   12fd8:	mov	r0, r9
   12fdc:	ldrb	sl, [r4], #1
   12fe0:	mov	r7, fp
   12fe4:	mov	r1, sl
   12fe8:	bl	1164c <strchr@plt>
   12fec:	cmp	r0, #0
   12ff0:	mov	r1, sl
   12ff4:	mov	r0, r8
   12ff8:	bne	12fb4 <__assert_fail@plt+0x1794>
   12ffc:	cmp	r6, fp
   13000:	bls	130a8 <__assert_fail@plt+0x1888>
   13004:	add	r2, r5, #4
   13008:	add	r0, fp, #4
   1300c:	cmp	r2, fp
   13010:	sub	r1, r6, #1
   13014:	movhi	r2, #0
   13018:	movls	r2, #1
   1301c:	cmp	r5, r0
   13020:	orrcs	r2, r2, #1
   13024:	sub	r1, r1, fp
   13028:	cmp	r1, #7
   1302c:	movls	r2, #0
   13030:	andhi	r2, r2, #1
   13034:	cmp	r2, #0
   13038:	beq	1313c <__assert_fail@plt+0x191c>
   1303c:	sub	lr, r6, fp
   13040:	mov	r1, r5
   13044:	bic	ip, lr, #3
   13048:	mov	r2, fp
   1304c:	add	ip, ip, fp
   13050:	ldr	r3, [r2], #4
   13054:	cmp	r2, ip
   13058:	str	r3, [r1], #4
   1305c:	bne	13050 <__assert_fail@plt+0x1830>
   13060:	bic	r2, lr, #3
   13064:	cmp	r2, lr
   13068:	add	r1, fp, r2
   1306c:	add	r0, r5, r2
   13070:	beq	130a4 <__assert_fail@plt+0x1884>
   13074:	ldrb	r3, [fp, r2]
   13078:	add	ip, r1, #1
   1307c:	cmp	r6, ip
   13080:	strb	r3, [r5, r2]
   13084:	bls	130a4 <__assert_fail@plt+0x1884>
   13088:	ldrb	r3, [r1, #1]
   1308c:	add	r2, r1, #2
   13090:	cmp	r6, r2
   13094:	strb	r3, [r0, #1]
   13098:	bls	130a4 <__assert_fail@plt+0x1884>
   1309c:	ldrb	r3, [r1, #2]
   130a0:	strb	r3, [r0, #2]
   130a4:	add	r5, r5, lr
   130a8:	movw	r0, #3572	; 0xdf4
   130ac:	movt	r0, #2
   130b0:	ldr	r1, [sp, #20]
   130b4:	mov	r2, #0
   130b8:	mov	r3, #0
   130bc:	movt	r3, #49104	; 0xbfd0
   130c0:	ldr	ip, [r0]
   130c4:	mov	r0, #1
   130c8:	str	ip, [r5]
   130cc:	bl	116b8 <__printf_chk@plt>
   130d0:	b	12e8c <__assert_fail@plt+0x166c>
   130d4:	mov	r6, r5
   130d8:	str	r3, [sp, #36]	; 0x24
   130dc:	b	12d0c <__assert_fail@plt+0x14ec>
   130e0:	mov	r3, #9
   130e4:	mov	r6, r5
   130e8:	str	r3, [sp, #16]
   130ec:	mov	r3, #1
   130f0:	str	r7, [sp, #32]
   130f4:	str	r9, [sp, #36]	; 0x24
   130f8:	b	12d30 <__assert_fail@plt+0x1510>
   130fc:	sub	r2, r5, #1
   13100:	ldrb	r3, [r7], #1
   13104:	cmp	r6, r7
   13108:	strb	r3, [r2, #1]!
   1310c:	bne	13100 <__assert_fail@plt+0x18e0>
   13110:	sub	lr, r6, fp
   13114:	b	12e68 <__assert_fail@plt+0x1648>
   13118:	mov	r6, #0
   1311c:	movw	r3, #3560	; 0xde8
   13120:	movt	r3, #2
   13124:	str	r1, [sp]
   13128:	mvn	r2, #0
   1312c:	mov	r1, #1
   13130:	bl	11688 <__sprintf_chk@plt>
   13134:	add	r6, r6, r0
   13138:	b	12cf8 <__assert_fail@plt+0x14d8>
   1313c:	sub	r2, r5, #1
   13140:	ldrb	r3, [r7], #1
   13144:	cmp	r6, r7
   13148:	strb	r3, [r2, #1]!
   1314c:	bne	13140 <__assert_fail@plt+0x1920>
   13150:	sub	lr, r6, fp
   13154:	b	130a4 <__assert_fail@plt+0x1884>
   13158:	mov	r3, #1
   1315c:	str	r7, [sp, #32]
   13160:	b	12d30 <__assert_fail@plt+0x1510>
   13164:	andeq	r0, r2, r0, asr #20
   13168:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1316c:	mov	r5, r0
   13170:	mov	r4, r1
   13174:	strd	r6, [sp, #8]
   13178:	sub	r3, r3, #65	; 0x41
   1317c:	strd	r8, [sp, #16]
   13180:	strd	sl, [sp, #24]
   13184:	str	lr, [sp, #32]
   13188:	sub	sp, sp, #76	; 0x4c
   1318c:	ldr	ip, [sp, #120]	; 0x78
   13190:	ldr	r6, [ip]
   13194:	ldrd	r0, [ip, #4]
   13198:	strd	r0, [sp, #8]
   1319c:	ldmib	ip, {r0, ip}
   131a0:	cmp	r3, #57	; 0x39
   131a4:	ldrls	pc, [pc, r3, lsl #2]
   131a8:	b	13a4c <__assert_fail@plt+0x222c>
   131ac:	strdeq	r3, [r1], -ip
   131b0:	andeq	r3, r1, r0, ror #19
   131b4:	andeq	r3, r1, r0, ror r9
   131b8:	andeq	r3, r1, r8, asr r9
   131bc:	andeq	r3, r1, ip, asr #20
   131c0:	andeq	r3, r1, ip, lsr #20
   131c4:	andeq	r3, r1, ip, lsr r9
   131c8:	andeq	r3, r1, ip, asr #20
   131cc:	andeq	r3, r1, ip, asr #20
   131d0:	andeq	r3, r1, ip, asr #20
   131d4:	andeq	r3, r1, ip, asr #20
   131d8:	andeq	r3, r1, ip, asr #20
   131dc:	andeq	r3, r1, ip, asr #20
   131e0:			; <UNDEFINED> instruction: 0x000138b4
   131e4:	andeq	r3, r1, ip, asr #20
   131e8:	andeq	r3, r1, ip, asr #20
   131ec:	andeq	r3, r1, ip, asr #20
   131f0:	muleq	r1, ip, r8
   131f4:	andeq	r3, r1, ip, asr #20
   131f8:	andeq	r3, r1, r8, ror #16
   131fc:	andeq	r3, r1, r0, asr #16
   13200:	andeq	r3, r1, ip, asr #20
   13204:	andeq	r3, r1, r0, lsl r8
   13208:	andeq	r3, r1, ip, ror #15
   1320c:	andeq	r3, r1, r8, asr #15
   13210:	andeq	r3, r1, r4, lsr #15
   13214:	andeq	r3, r1, ip, asr #20
   13218:	andeq	r3, r1, ip, asr #20
   1321c:	andeq	r3, r1, ip, asr #20
   13220:	andeq	r3, r1, ip, asr #20
   13224:	andeq	r3, r1, ip, asr #20
   13228:	andeq	r3, r1, ip, asr #20
   1322c:	andeq	r3, r1, r4, asr r6
   13230:	andeq	r3, r1, ip, lsr r6
   13234:	andeq	r3, r1, ip, asr #20
   13238:	andeq	r3, r1, r8, lsl #12
   1323c:	andeq	r3, r1, ip, asr #20
   13240:	andeq	r3, r1, ip, ror #11
   13244:	ldrdeq	r3, [r1], -r0
   13248:			; <UNDEFINED> instruction: 0x000135b4
   1324c:	muleq	r1, ip, r5
   13250:	andeq	r3, r1, ip, asr #20
   13254:	andeq	r3, r1, ip, asr #20
   13258:	andeq	r3, r1, ip, asr #20
   1325c:	andeq	r3, r1, ip, lsr #10
   13260:	andeq	r3, r1, r4, lsl r5
   13264:	andeq	r3, r1, ip, ror #9
   13268:	andeq	r3, r1, ip, asr #20
   1326c:	andeq	r3, r1, ip, asr #20
   13270:	andeq	r3, r1, r8, lsl #9
   13274:	andeq	r3, r1, r0, asr #6
   13278:			; <UNDEFINED> instruction: 0x000134bc
   1327c:	andeq	r3, r1, r4, lsr #6
   13280:	andeq	r3, r1, ip, asr #20
   13284:	andeq	r3, r1, r4, lsl #6
   13288:	strdeq	r3, [r1], -r0
   1328c:	ldrdeq	r3, [r1], -ip
   13290:	muleq	r1, r4, r2
   13294:	ldrd	r2, [r6, #88]	; 0x58
   13298:	add	r1, sp, #56	; 0x38
   1329c:	mov	r8, #0
   132a0:	strd	r2, [sp, #56]	; 0x38
   132a4:	ldm	r1, {r0, r1}
   132a8:	bl	1262c <__assert_fail@plt+0xe0c>
   132ac:	mov	r2, r0
   132b0:	mov	r1, r4
   132b4:	mov	r0, r5
   132b8:	bl	126f8 <__assert_fail@plt+0xed8>
   132bc:	mov	r0, r8
   132c0:	add	sp, sp, #76	; 0x4c
   132c4:	ldrd	r4, [sp]
   132c8:	ldrd	r6, [sp, #8]
   132cc:	ldrd	r8, [sp, #16]
   132d0:	ldrd	sl, [sp, #24]
   132d4:	add	sp, sp, #32
   132d8:	pop	{pc}		; (ldr pc, [sp], #4)
   132dc:	ldrd	r2, [r6, #80]	; 0x50
   132e0:	add	r1, sp, #40	; 0x28
   132e4:	mov	r8, #0
   132e8:	strd	r2, [sp, #40]	; 0x28
   132ec:	b	132a4 <__assert_fail@plt+0x1a84>
   132f0:	ldrd	r2, [r6, #72]	; 0x48
   132f4:	add	r1, sp, #24
   132f8:	mov	r8, #0
   132fc:	strd	r2, [sp, #24]
   13300:	b	132a4 <__assert_fail@plt+0x1a84>
   13304:	cmp	ip, #0
   13308:	blt	13ae4 <__assert_fail@plt+0x22c4>
   1330c:	add	r3, sp, #8
   13310:	mov	r8, #0
   13314:	str	r0, [sp, #8]
   13318:	str	ip, [sp, #12]
   1331c:	ldm	r3, {r0, r1}
   13320:	b	132a8 <__assert_fail@plt+0x1a88>
   13324:	mov	r3, #0
   13328:	mov	r1, r4
   1332c:	ldr	r2, [r6, #24]
   13330:	mov	r0, r5
   13334:	mov	r8, r3
   13338:	bl	12a20 <__assert_fail@plt+0x1200>
   1333c:	b	132bc <__assert_fail@plt+0x1a9c>
   13340:	ldrd	r2, [r6, #48]	; 0x30
   13344:	add	r4, r5, r4
   13348:	add	r7, r5, #1
   1334c:	cmp	r7, r4
   13350:	strd	r2, [sp]
   13354:	bcs	13460 <__assert_fail@plt+0x1c40>
   13358:	movw	r9, #3564	; 0xdec
   1335c:	movt	r9, #2
   13360:	mov	fp, r7
   13364:	b	13388 <__assert_fail@plt+0x1b68>
   13368:	bl	1164c <strchr@plt>
   1336c:	cmp	r0, #0
   13370:	mov	r3, r7
   13374:	mov	fp, r6
   13378:	strbne	sl, [r3], #1
   1337c:	movne	r7, r3
   13380:	cmp	r4, r6
   13384:	bls	13460 <__assert_fail@plt+0x1c40>
   13388:	mov	r6, fp
   1338c:	ldr	r0, [pc, #2240]	; 13c54 <__assert_fail@plt+0x2434>
   13390:	mov	r8, fp
   13394:	ldrb	sl, [r6], #1
   13398:	mov	r1, sl
   1339c:	bl	1164c <strchr@plt>
   133a0:	cmp	r0, #0
   133a4:	mov	r1, sl
   133a8:	mov	r0, r9
   133ac:	bne	13368 <__assert_fail@plt+0x1b48>
   133b0:	cmp	fp, r4
   133b4:	bcs	13460 <__assert_fail@plt+0x1c40>
   133b8:	add	r2, r7, #4
   133bc:	add	r3, fp, #4
   133c0:	cmp	r2, fp
   133c4:	sub	r1, r4, #1
   133c8:	movhi	r2, #0
   133cc:	movls	r2, #1
   133d0:	cmp	r7, r3
   133d4:	movcc	r3, r2
   133d8:	orrcs	r3, r2, #1
   133dc:	sub	r2, r1, fp
   133e0:	cmp	r2, #7
   133e4:	movls	r3, #0
   133e8:	andhi	r3, r3, #1
   133ec:	cmp	r3, #0
   133f0:	beq	13bf0 <__assert_fail@plt+0x23d0>
   133f4:	sub	ip, r4, fp
   133f8:	mov	r2, r7
   133fc:	bic	r0, ip, #3
   13400:	mov	r3, fp
   13404:	add	r0, r0, fp
   13408:	ldr	r1, [r3], #4
   1340c:	cmp	r3, r0
   13410:	str	r1, [r2], #4
   13414:	bne	13408 <__assert_fail@plt+0x1be8>
   13418:	bic	r3, ip, #3
   1341c:	cmp	r3, ip
   13420:	add	r2, fp, r3
   13424:	add	r1, r7, r3
   13428:	beq	1345c <__assert_fail@plt+0x1c3c>
   1342c:	ldrb	r0, [fp, r3]
   13430:	add	lr, r2, #1
   13434:	cmp	r4, lr
   13438:	strb	r0, [r7, r3]
   1343c:	bls	1345c <__assert_fail@plt+0x1c3c>
   13440:	ldrb	r3, [r2, #1]
   13444:	add	r0, r2, #2
   13448:	cmp	r4, r0
   1344c:	strb	r3, [r1, #1]
   13450:	bls	1345c <__assert_fail@plt+0x1c3c>
   13454:	ldrb	r3, [r2, #2]
   13458:	strb	r3, [r1, #2]
   1345c:	add	r7, r7, ip
   13460:	movw	r3, #3576	; 0xdf8
   13464:	movt	r3, #2
   13468:	ldr	ip, [r3]
   1346c:	mov	r1, r5
   13470:	mov	r0, #1
   13474:	mov	r8, #0
   13478:	ldrd	r2, [sp]
   1347c:	str	ip, [r7]
   13480:	bl	116b8 <__printf_chk@plt>
   13484:	b	132bc <__assert_fail@plt+0x1a9c>
   13488:	cmp	r2, #72	; 0x48
   1348c:	ldr	r3, [r6, #32]
   13490:	ldr	ip, [r6, #36]	; 0x24
   13494:	beq	13614 <__assert_fail@plt+0x1df4>
   13498:	cmp	r2, #76	; 0x4c
   1349c:	beq	13a80 <__assert_fail@plt+0x2260>
   134a0:	mov	r2, r3
   134a4:	mov	r1, r4
   134a8:	mov	r3, ip
   134ac:	mov	r0, r5
   134b0:	bl	12a20 <__assert_fail@plt+0x1200>
   134b4:	mov	r8, #0
   134b8:	b	132bc <__assert_fail@plt+0x1a9c>
   134bc:	ldr	ip, [r6, #32]
   134c0:	mov	r3, #0
   134c4:	mov	r1, r4
   134c8:	mov	r0, r5
   134cc:	mov	r8, r3
   134d0:	ldr	r2, [r6, #36]	; 0x24
   134d4:	ubfx	ip, ip, #8, #12
   134d8:	bic	r2, r2, #4080	; 0xff0
   134dc:	bic	r2, r2, #15
   134e0:	orr	r2, r2, ip
   134e4:	bl	1288c <__assert_fail@plt+0x106c>
   134e8:	b	132bc <__assert_fail@plt+0x1a9c>
   134ec:	ldr	r2, [r6, #56]	; 0x38
   134f0:	mov	r1, r4
   134f4:	mov	r0, r5
   134f8:	mov	r8, #0
   134fc:	sub	r3, r2, #1
   13500:	cmp	r3, #536870912	; 0x20000000
   13504:	movcs	r2, #512	; 0x200
   13508:	asr	r3, r2, #31
   1350c:	bl	12a20 <__assert_fail@plt+0x1200>
   13510:	b	132bc <__assert_fail@plt+0x1a9c>
   13514:	mov	r1, r4
   13518:	mov	r0, r5
   1351c:	ldr	r2, [sp, #116]	; 0x74
   13520:	mov	r8, #0
   13524:	bl	126f8 <__assert_fail@plt+0xed8>
   13528:	b	132bc <__assert_fail@plt+0x1a9c>
   1352c:	movw	r3, #12784	; 0x31f0
   13530:	movt	r3, #3
   13534:	ldrb	r3, [r3, #96]	; 0x60
   13538:	cmp	r3, #0
   1353c:	bne	13550 <__assert_fail@plt+0x1d30>
   13540:	ldr	r3, [r6, #16]
   13544:	and	r3, r3, #61440	; 0xf000
   13548:	cmp	r3, #40960	; 0xa000
   1354c:	beq	13aac <__assert_fail@plt+0x228c>
   13550:	ldr	r0, [sp, #116]	; 0x74
   13554:	bl	11790 <canonicalize_file_name@plt>
   13558:	subs	r9, r0, #0
   1355c:	beq	13b74 <__assert_fail@plt+0x2354>
   13560:	bl	124e4 <__assert_fail@plt+0xcc4>
   13564:	mov	r7, r0
   13568:	mov	r0, r9
   1356c:	bl	171c0 <__assert_fail@plt+0x59a0>
   13570:	cmp	r7, #0
   13574:	movne	r8, #0
   13578:	movne	r9, r8
   1357c:	beq	13aac <__assert_fail@plt+0x228c>
   13580:	mov	r0, r5
   13584:	mov	r2, r7
   13588:	mov	r1, r4
   1358c:	bl	126f8 <__assert_fail@plt+0xed8>
   13590:	mov	r0, r9
   13594:	bl	171c0 <__assert_fail@plt+0x59a0>
   13598:	b	132bc <__assert_fail@plt+0x1a9c>
   1359c:	mov	r1, r4
   135a0:	mov	r0, r5
   135a4:	ldrd	r2, [r6, #96]	; 0x60
   135a8:	mov	r8, #0
   135ac:	bl	12a20 <__assert_fail@plt+0x1200>
   135b0:	b	132bc <__assert_fail@plt+0x1a9c>
   135b4:	mov	r3, #0
   135b8:	mov	r1, r4
   135bc:	ldr	r2, [r6, #20]
   135c0:	mov	r0, r5
   135c4:	mov	r8, r3
   135c8:	bl	12a20 <__assert_fail@plt+0x1200>
   135cc:	b	132bc <__assert_fail@plt+0x1a9c>
   135d0:	mov	r3, #0
   135d4:	mov	r1, r4
   135d8:	ldr	r2, [r6, #28]
   135dc:	mov	r0, r5
   135e0:	mov	r8, r3
   135e4:	bl	12a20 <__assert_fail@plt+0x1200>
   135e8:	b	132bc <__assert_fail@plt+0x1a9c>
   135ec:	mov	r3, #0
   135f0:	mov	r1, r4
   135f4:	ldr	r2, [r6, #16]
   135f8:	mov	r0, r5
   135fc:	mov	r8, r3
   13600:	bl	1288c <__assert_fail@plt+0x106c>
   13604:	b	132bc <__assert_fail@plt+0x1a9c>
   13608:	cmp	r2, #72	; 0x48
   1360c:	ldm	r6, {r3, ip}
   13610:	bne	13498 <__assert_fail@plt+0x1c78>
   13614:	bic	r2, ip, #4080	; 0xff0
   13618:	ubfx	r3, r3, #8, #12
   1361c:	mov	r1, r4
   13620:	bic	r2, r2, #15
   13624:	mov	r0, r5
   13628:	orr	r2, r2, r3
   1362c:	mov	r3, #0
   13630:	bl	12a20 <__assert_fail@plt+0x1200>
   13634:	mov	r8, #0
   13638:	b	132bc <__assert_fail@plt+0x1a9c>
   1363c:	mov	r1, r4
   13640:	mov	r0, r5
   13644:	ldrd	r2, [r6, #64]	; 0x40
   13648:	mov	r8, #0
   1364c:	bl	12a20 <__assert_fail@plt+0x1200>
   13650:	b	132bc <__assert_fail@plt+0x1a9c>
   13654:	ldr	fp, [r6, #16]
   13658:	add	r4, r5, r4
   1365c:	add	r7, r5, #1
   13660:	cmp	r7, r4
   13664:	ubfx	r3, fp, #0, #12
   13668:	str	r3, [sp]
   1366c:	bcs	13778 <__assert_fail@plt+0x1f58>
   13670:	movw	r9, #3544	; 0xdd8
   13674:	movt	r9, #2
   13678:	mov	fp, r7
   1367c:	b	136a0 <__assert_fail@plt+0x1e80>
   13680:	bl	1164c <strchr@plt>
   13684:	cmp	r0, #0
   13688:	mov	r3, r7
   1368c:	mov	fp, r6
   13690:	strbne	sl, [r3], #1
   13694:	movne	r7, r3
   13698:	cmp	r4, r6
   1369c:	bls	13778 <__assert_fail@plt+0x1f58>
   136a0:	mov	r6, fp
   136a4:	ldr	r0, [pc, #1448]	; 13c54 <__assert_fail@plt+0x2434>
   136a8:	mov	r8, fp
   136ac:	ldrb	sl, [r6], #1
   136b0:	mov	r1, sl
   136b4:	bl	1164c <strchr@plt>
   136b8:	cmp	r0, #0
   136bc:	mov	r1, sl
   136c0:	mov	r0, r9
   136c4:	bne	13680 <__assert_fail@plt+0x1e60>
   136c8:	cmp	fp, r4
   136cc:	bcs	13778 <__assert_fail@plt+0x1f58>
   136d0:	add	r2, r7, #4
   136d4:	add	ip, fp, #4
   136d8:	mov	r1, r2
   136dc:	sub	r0, r4, #1
   136e0:	cmp	ip, r7
   136e4:	cmphi	r1, fp
   136e8:	mov	r2, ip
   136ec:	sub	r1, r0, fp
   136f0:	movls	r2, #1
   136f4:	movhi	r2, #0
   136f8:	cmp	r1, #7
   136fc:	movls	r2, #0
   13700:	andhi	r2, r2, #1
   13704:	cmp	r2, #0
   13708:	beq	13bd4 <__assert_fail@plt+0x23b4>
   1370c:	sub	r8, r4, fp
   13710:	mov	r1, r7
   13714:	bic	ip, r8, #3
   13718:	mov	r2, fp
   1371c:	add	ip, ip, fp
   13720:	ldr	r3, [r2], #4
   13724:	cmp	r2, ip
   13728:	str	r3, [r1], #4
   1372c:	bne	13720 <__assert_fail@plt+0x1f00>
   13730:	bic	r2, r8, #3
   13734:	cmp	r2, r8
   13738:	add	r1, fp, r2
   1373c:	add	r0, r7, r2
   13740:	beq	13774 <__assert_fail@plt+0x1f54>
   13744:	ldrb	r3, [fp, r2]
   13748:	add	ip, r1, #1
   1374c:	cmp	r4, ip
   13750:	strb	r3, [r7, r2]
   13754:	bls	13774 <__assert_fail@plt+0x1f54>
   13758:	ldrb	r3, [r1, #1]
   1375c:	add	r2, r1, #2
   13760:	cmp	r4, r2
   13764:	strb	r3, [r0, #1]
   13768:	bls	13774 <__assert_fail@plt+0x1f54>
   1376c:	ldrb	r3, [r1, #2]
   13770:	strb	r3, [r0, #2]
   13774:	add	r7, r7, r8
   13778:	movw	r3, #3648	; 0xe40
   1377c:	movt	r3, #2
   13780:	ldr	r2, [sp]
   13784:	mov	r1, r5
   13788:	mov	r0, #1
   1378c:	ldr	ip, [r3]
   13790:	mov	r3, #0
   13794:	mov	r8, r3
   13798:	str	ip, [r7]
   1379c:	bl	116b8 <__printf_chk@plt>
   137a0:	b	132bc <__assert_fail@plt+0x1a9c>
   137a4:	ldrd	r2, [r6, #88]	; 0x58
   137a8:	mov	r1, r4
   137ac:	mov	r0, r5
   137b0:	mov	r8, #0
   137b4:	strd	r2, [sp, #64]	; 0x40
   137b8:	add	r3, sp, #72	; 0x48
   137bc:	ldmdb	r3, {r2, r3}
   137c0:	bl	12bb4 <__assert_fail@plt+0x1394>
   137c4:	b	132bc <__assert_fail@plt+0x1a9c>
   137c8:	ldrd	r2, [r6, #80]	; 0x50
   137cc:	add	ip, sp, #48	; 0x30
   137d0:	mov	r1, r4
   137d4:	mov	r0, r5
   137d8:	mov	r8, #0
   137dc:	strd	r2, [sp, #48]	; 0x30
   137e0:	ldm	ip, {r2, r3}
   137e4:	bl	12bb4 <__assert_fail@plt+0x1394>
   137e8:	b	132bc <__assert_fail@plt+0x1a9c>
   137ec:	ldrd	r2, [r6, #72]	; 0x48
   137f0:	add	ip, sp, #32
   137f4:	mov	r1, r4
   137f8:	mov	r0, r5
   137fc:	mov	r8, #0
   13800:	strd	r2, [sp, #32]
   13804:	ldm	ip, {r2, r3}
   13808:	bl	12bb4 <__assert_fail@plt+0x1394>
   1380c:	b	132bc <__assert_fail@plt+0x1a9c>
   13810:	cmp	ip, #0
   13814:	add	r3, sp, #16
   13818:	movlt	ip, #0
   1381c:	mov	r1, r4
   13820:	movlt	r0, ip
   13824:	mov	r8, #0
   13828:	str	r0, [sp, #16]
   1382c:	mov	r0, r5
   13830:	str	ip, [sp, #20]
   13834:	ldm	r3, {r2, r3}
   13838:	bl	12bb4 <__assert_fail@plt+0x1394>
   1383c:	b	132bc <__assert_fail@plt+0x1a9c>
   13840:	ldr	r0, [r6, #24]
   13844:	bl	11454 <getpwuid@plt>
   13848:	cmp	r0, #0
   1384c:	beq	1394c <__assert_fail@plt+0x212c>
   13850:	ldr	r2, [r0]
   13854:	mov	r1, r4
   13858:	mov	r0, r5
   1385c:	mov	r8, #0
   13860:	bl	126f8 <__assert_fail@plt+0xed8>
   13864:	b	132bc <__assert_fail@plt+0x1a9c>
   13868:	ldr	r2, [r6, #32]
   1386c:	mov	r3, #0
   13870:	mov	r1, r4
   13874:	mov	r0, r5
   13878:	mov	r8, r3
   1387c:	ldr	lr, [r6, #36]	; 0x24
   13880:	lsr	ip, r2, #12
   13884:	uxtb	r2, r2
   13888:	orr	ip, ip, lr, lsl #20
   1388c:	bic	ip, ip, #255	; 0xff
   13890:	orr	r2, ip, r2
   13894:	bl	1288c <__assert_fail@plt+0x106c>
   13898:	b	132bc <__assert_fail@plt+0x1a9c>
   1389c:	mov	r1, r4
   138a0:	mov	r0, r5
   138a4:	ldrd	r2, [r6, #32]
   138a8:	mov	r8, #0
   138ac:	bl	1288c <__assert_fail@plt+0x106c>
   138b0:	b	132bc <__assert_fail@plt+0x1a9c>
   138b4:	mov	r0, #0
   138b8:	bl	1bc64 <__assert_fail@plt+0xa444>
   138bc:	ldr	r1, [sp, #116]	; 0x74
   138c0:	bl	1c468 <__assert_fail@plt+0xac48>
   138c4:	mov	r2, r0
   138c8:	mov	r1, r4
   138cc:	mov	r0, r5
   138d0:	bl	126f8 <__assert_fail@plt+0xed8>
   138d4:	ldr	r3, [r6, #16]
   138d8:	and	r3, r3, #61440	; 0xf000
   138dc:	cmp	r3, #40960	; 0xa000
   138e0:	movne	r8, #0
   138e4:	bne	132bc <__assert_fail@plt+0x1a9c>
   138e8:	ldr	r1, [r6, #48]	; 0x30
   138ec:	ldr	r0, [sp, #116]	; 0x74
   138f0:	bl	164a4 <__assert_fail@plt+0x4c84>
   138f4:	subs	r6, r0, #0
   138f8:	beq	13c0c <__assert_fail@plt+0x23ec>
   138fc:	mov	r8, #0
   13900:	movw	r1, #3640	; 0xe38
   13904:	movt	r1, #2
   13908:	mov	r0, #1
   1390c:	bl	116b8 <__printf_chk@plt>
   13910:	mov	r0, r8
   13914:	bl	1bc64 <__assert_fail@plt+0xa444>
   13918:	mov	r1, r6
   1391c:	bl	1c468 <__assert_fail@plt+0xac48>
   13920:	mov	r2, r0
   13924:	mov	r1, r4
   13928:	mov	r0, r5
   1392c:	bl	126f8 <__assert_fail@plt+0xed8>
   13930:	mov	r0, r6
   13934:	bl	171c0 <__assert_fail@plt+0x59a0>
   13938:	b	132bc <__assert_fail@plt+0x1a9c>
   1393c:	ldr	r0, [r6, #28]
   13940:	bl	11808 <getgrgid@plt>
   13944:	cmp	r0, #0
   13948:	bne	13850 <__assert_fail@plt+0x2030>
   1394c:	movw	r2, #3596	; 0xe0c
   13950:	movt	r2, #2
   13954:	b	13854 <__assert_fail@plt+0x2034>
   13958:	mov	r1, r4
   1395c:	mov	r0, r5
   13960:	ldrd	r2, [r6]
   13964:	mov	r8, #0
   13968:	bl	1288c <__assert_fail@plt+0x106c>
   1396c:	b	132bc <__assert_fail@plt+0x1a9c>
   13970:	movw	r3, #12784	; 0x31f0
   13974:	movt	r3, #3
   13978:	ldr	r0, [sp, #116]	; 0x74
   1397c:	add	r1, sp, #64	; 0x40
   13980:	ldrb	r3, [r3, #96]	; 0x60
   13984:	cmp	r3, #0
   13988:	beq	13ad8 <__assert_fail@plt+0x22b8>
   1398c:	bl	1d9e8 <__assert_fail@plt+0xc1c8>
   13990:	lsr	r8, r0, #31
   13994:	cmp	r8, #0
   13998:	bne	13b00 <__assert_fail@plt+0x22e0>
   1399c:	ldr	r2, [sp, #64]	; 0x40
   139a0:	movw	r1, #3676	; 0xe5c
   139a4:	movt	r1, #2
   139a8:	movw	r3, #3604	; 0xe14
   139ac:	movt	r3, #2
   139b0:	ldrh	r1, [r1]
   139b4:	cmp	r2, #0
   139b8:	moveq	r2, r3
   139bc:	strh	r1, [r5, r4]
   139c0:	mov	r1, r5
   139c4:	mov	r0, #1
   139c8:	bl	116b8 <__printf_chk@plt>
   139cc:	ldr	r0, [sp, #64]	; 0x40
   139d0:	cmp	r0, #0
   139d4:	beq	132bc <__assert_fail@plt+0x1a9c>
   139d8:	bl	117a8 <freecon@plt>
   139dc:	b	132bc <__assert_fail@plt+0x1a9c>
   139e0:	mov	r1, r4
   139e4:	mov	r0, r5
   139e8:	mov	r2, #512	; 0x200
   139ec:	mov	r3, #0
   139f0:	mov	r8, #0
   139f4:	bl	12a20 <__assert_fail@plt+0x1200>
   139f8:	b	132bc <__assert_fail@plt+0x1a9c>
   139fc:	movw	r7, #12784	; 0x31f0
   13a00:	movt	r7, #3
   13a04:	mov	r0, r6
   13a08:	add	r1, r7, #84	; 0x54
   13a0c:	mov	r8, #0
   13a10:	bl	17068 <__assert_fail@plt+0x5848>
   13a14:	mov	r1, r4
   13a18:	mov	r0, r5
   13a1c:	strb	r8, [r7, #94]	; 0x5e
   13a20:	add	r2, r7, #84	; 0x54
   13a24:	bl	126f8 <__assert_fail@plt+0xed8>
   13a28:	b	132bc <__assert_fail@plt+0x1a9c>
   13a2c:	mov	r0, r6
   13a30:	mov	r8, #0
   13a34:	bl	16e14 <__assert_fail@plt+0x55f4>
   13a38:	mov	r2, r0
   13a3c:	mov	r1, r4
   13a40:	mov	r0, r5
   13a44:	bl	126f8 <__assert_fail@plt+0xed8>
   13a48:	b	132bc <__assert_fail@plt+0x1a9c>
   13a4c:	movw	r3, #12772	; 0x31e4
   13a50:	movt	r3, #3
   13a54:	ldr	r0, [r3]
   13a58:	ldr	r3, [r0, #20]
   13a5c:	ldr	r2, [r0, #24]
   13a60:	cmp	r3, r2
   13a64:	bcs	13bc4 <__assert_fail@plt+0x23a4>
   13a68:	add	r1, r3, #1
   13a6c:	mov	r2, #63	; 0x3f
   13a70:	mov	r8, #0
   13a74:	str	r1, [r0, #20]
   13a78:	strb	r2, [r3]
   13a7c:	b	132bc <__assert_fail@plt+0x1a9c>
   13a80:	lsr	lr, r3, #12
   13a84:	uxtb	r2, r3
   13a88:	mov	r1, r4
   13a8c:	mov	r3, #0
   13a90:	mov	r0, r5
   13a94:	orr	lr, lr, ip, lsl #20
   13a98:	mov	r8, r3
   13a9c:	bic	lr, lr, #255	; 0xff
   13aa0:	orr	r2, lr, r2
   13aa4:	bl	12a20 <__assert_fail@plt+0x1200>
   13aa8:	b	132bc <__assert_fail@plt+0x1a9c>
   13aac:	mov	r1, r6
   13ab0:	ldr	r0, [sp, #116]	; 0x74
   13ab4:	bl	1619c <__assert_fail@plt+0x497c>
   13ab8:	subs	r9, r0, #0
   13abc:	beq	13b64 <__assert_fail@plt+0x2344>
   13ac0:	bl	124e4 <__assert_fail@plt+0xcc4>
   13ac4:	subs	r7, r0, #0
   13ac8:	moveq	r8, r7
   13acc:	movne	r8, #0
   13ad0:	moveq	r7, r9
   13ad4:	b	13580 <__assert_fail@plt+0x1d60>
   13ad8:	bl	1da78 <__assert_fail@plt+0xc258>
   13adc:	lsr	r8, r0, #31
   13ae0:	b	13994 <__assert_fail@plt+0x2174>
   13ae4:	mov	r1, r4
   13ae8:	mov	r0, r5
   13aec:	movw	r2, #3540	; 0xdd4
   13af0:	movt	r2, #2
   13af4:	bl	126f8 <__assert_fail@plt+0xed8>
   13af8:	mov	r8, #0
   13afc:	b	132bc <__assert_fail@plt+0x1a9c>
   13b00:	bl	1167c <__errno_location@plt>
   13b04:	ldr	r6, [r0]
   13b08:	mov	r2, #5
   13b0c:	movw	r1, #3680	; 0xe60
   13b10:	movt	r1, #2
   13b14:	mov	r0, #0
   13b18:	bl	114c0 <dcgettext@plt>
   13b1c:	mov	r7, r0
   13b20:	mov	r0, #4
   13b24:	ldr	r1, [sp, #116]	; 0x74
   13b28:	bl	1c468 <__assert_fail@plt+0xac48>
   13b2c:	mov	r3, r0
   13b30:	mov	r2, r7
   13b34:	mov	r1, r6
   13b38:	mov	r0, #0
   13b3c:	bl	11574 <error@plt>
   13b40:	movw	r3, #3676	; 0xe5c
   13b44:	movt	r3, #2
   13b48:	ldrh	r3, [r3]
   13b4c:	mov	r1, #0
   13b50:	movw	r2, #3604	; 0xe14
   13b54:	movt	r2, #2
   13b58:	str	r1, [sp, #64]	; 0x40
   13b5c:	strh	r3, [r5, r4]
   13b60:	b	139c0 <__assert_fail@plt+0x21a0>
   13b64:	movw	r7, #3604	; 0xe14
   13b68:	movt	r7, #2
   13b6c:	mov	r8, #1
   13b70:	b	13580 <__assert_fail@plt+0x1d60>
   13b74:	bl	1167c <__errno_location@plt>
   13b78:	ldr	r6, [r0]
   13b7c:	mov	r2, #5
   13b80:	movw	r1, #3652	; 0xe44
   13b84:	movt	r1, #2
   13b88:	mov	r0, r9
   13b8c:	bl	114c0 <dcgettext@plt>
   13b90:	mov	r8, r0
   13b94:	mov	r0, #4
   13b98:	ldr	r1, [sp, #116]	; 0x74
   13b9c:	bl	1c468 <__assert_fail@plt+0xac48>
   13ba0:	mov	r3, r0
   13ba4:	mov	r2, r8
   13ba8:	mov	r1, r6
   13bac:	mov	r0, r9
   13bb0:	movw	r7, #3604	; 0xe14
   13bb4:	movt	r7, #2
   13bb8:	bl	11574 <error@plt>
   13bbc:	mov	r8, #1
   13bc0:	b	13580 <__assert_fail@plt+0x1d60>
   13bc4:	mov	r1, #63	; 0x3f
   13bc8:	mov	r8, #0
   13bcc:	bl	11724 <__overflow@plt>
   13bd0:	b	132bc <__assert_fail@plt+0x1a9c>
   13bd4:	sub	r2, r7, #1
   13bd8:	ldrb	r3, [r8], #1
   13bdc:	cmp	r8, r4
   13be0:	strb	r3, [r2, #1]!
   13be4:	bne	13bd8 <__assert_fail@plt+0x23b8>
   13be8:	sub	r8, r8, fp
   13bec:	b	13774 <__assert_fail@plt+0x1f54>
   13bf0:	sub	r3, r7, #1
   13bf4:	ldrb	r2, [r8], #1
   13bf8:	cmp	r4, r8
   13bfc:	strb	r2, [r3, #1]!
   13c00:	bne	13bf4 <__assert_fail@plt+0x23d4>
   13c04:	sub	ip, r4, fp
   13c08:	b	1345c <__assert_fail@plt+0x1c3c>
   13c0c:	bl	1167c <__errno_location@plt>
   13c10:	ldr	r4, [r0]
   13c14:	mov	r2, #5
   13c18:	mov	r0, r6
   13c1c:	movw	r1, #3608	; 0xe18
   13c20:	movt	r1, #2
   13c24:	bl	114c0 <dcgettext@plt>
   13c28:	mov	r5, r0
   13c2c:	mov	r0, #4
   13c30:	ldr	r1, [sp, #116]	; 0x74
   13c34:	bl	1c468 <__assert_fail@plt+0xac48>
   13c38:	mov	r3, r0
   13c3c:	mov	r2, r5
   13c40:	mov	r1, r4
   13c44:	mov	r0, r6
   13c48:	mov	r8, #1
   13c4c:	bl	11574 <error@plt>
   13c50:	b	132bc <__assert_fail@plt+0x1a9c>
   13c54:	andeq	r0, r2, r0, asr #20
   13c58:	sub	r3, r3, #83	; 0x53
   13c5c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   13c60:	mov	r5, r0
   13c64:	mov	r4, r1
   13c68:	strd	r6, [sp, #8]
   13c6c:	strd	r8, [sp, #16]
   13c70:	strd	sl, [sp, #24]
   13c74:	str	lr, [sp, #32]
   13c78:	sub	sp, sp, #28
   13c7c:	cmp	r3, #33	; 0x21
   13c80:	ldrls	pc, [pc, r3, lsl #2]
   13c84:	b	14520 <__assert_fail@plt+0x2d00>
   13c88:	andeq	r3, r1, r8, asr #28
   13c8c:	andeq	r3, r1, r8, ror lr
   13c90:	andeq	r4, r1, r0, lsr #10
   13c94:	andeq	r4, r1, r0, lsr #10
   13c98:	andeq	r4, r1, r0, lsr #10
   13c9c:	andeq	r4, r1, r0, lsr #10
   13ca0:	andeq	r4, r1, r0, lsr #10
   13ca4:	andeq	r4, r1, r0, lsr #10
   13ca8:	andeq	r4, r1, r0, lsr #10
   13cac:	andeq	r4, r1, r0, lsr #10
   13cb0:	andeq	r4, r1, r0, lsr #10
   13cb4:	andeq	r4, r1, r0, lsr #10
   13cb8:	andeq	r4, r1, r0, lsr #10
   13cbc:	andeq	r4, r1, r0, lsr #10
   13cc0:	andeq	r3, r1, r8, lsr pc
   13cc4:	andeq	r4, r1, r0, lsl #1
   13cc8:	strdeq	r4, [r1], -r0
   13ccc:	andeq	r4, r1, r0, lsr r3
   13cd0:	andeq	r4, r1, r0, lsr #10
   13cd4:	andeq	r4, r1, r0, lsl r4
   13cd8:	andeq	r4, r1, r0, lsr #10
   13cdc:	andeq	r4, r1, r0, lsr #10
   13ce0:	andeq	r4, r1, r8, lsr #3
   13ce4:	andeq	r4, r1, r0, lsr #10
   13ce8:	andeq	r4, r1, r0, lsr #10
   13cec:	andeq	r4, r1, r0, lsl #6
   13cf0:	andeq	r4, r1, r0, lsr #10
   13cf4:	andeq	r4, r1, r0, lsl #10
   13cf8:	andeq	r4, r1, r0, lsr #10
   13cfc:	andeq	r4, r1, r0, lsr #10
   13d00:	andeq	r4, r1, r0, lsr #10
   13d04:	andeq	r4, r1, r0, lsr #10
   13d08:	andeq	r4, r1, ip, lsl #10
   13d0c:	andeq	r3, r1, r0, lsl sp
   13d10:	ldr	r3, [sp, #72]	; 0x48
   13d14:	add	r4, r0, r1
   13d18:	add	r7, r0, #1
   13d1c:	cmp	r7, r4
   13d20:	ldr	r3, [r3]
   13d24:	asr	r1, r3, #31
   13d28:	mov	r0, r3
   13d2c:	strd	r0, [sp, #8]
   13d30:	bcs	13e3c <__assert_fail@plt+0x261c>
   13d34:	movw	r9, #3544	; 0xdd8
   13d38:	movt	r9, #2
   13d3c:	mov	fp, r7
   13d40:	b	13d64 <__assert_fail@plt+0x2544>
   13d44:	bl	1164c <strchr@plt>
   13d48:	cmp	r0, #0
   13d4c:	mov	r3, r7
   13d50:	mov	fp, r6
   13d54:	strbne	sl, [r3], #1
   13d58:	movne	r7, r3
   13d5c:	cmp	r4, r6
   13d60:	bls	13e3c <__assert_fail@plt+0x261c>
   13d64:	mov	r6, fp
   13d68:	ldr	r0, [pc, #4056]	; 14d48 <__assert_fail@plt+0x3528>
   13d6c:	mov	r8, fp
   13d70:	ldrb	sl, [r6], #1
   13d74:	mov	r1, sl
   13d78:	bl	1164c <strchr@plt>
   13d7c:	cmp	r0, #0
   13d80:	mov	r1, sl
   13d84:	mov	r0, r9
   13d88:	bne	13d44 <__assert_fail@plt+0x2524>
   13d8c:	cmp	r4, fp
   13d90:	bls	13e3c <__assert_fail@plt+0x261c>
   13d94:	add	r3, r7, #4
   13d98:	add	r0, fp, #4
   13d9c:	mov	r2, r3
   13da0:	sub	r1, r4, #1
   13da4:	cmp	r0, r7
   13da8:	cmphi	r2, fp
   13dac:	mov	r3, r0
   13db0:	sub	r2, r1, fp
   13db4:	movls	r3, #1
   13db8:	movhi	r3, #0
   13dbc:	cmp	r2, #7
   13dc0:	movls	r3, #0
   13dc4:	andhi	r3, r3, #1
   13dc8:	cmp	r3, #0
   13dcc:	beq	15218 <__assert_fail@plt+0x39f8>
   13dd0:	sub	ip, r4, fp
   13dd4:	mov	r2, r7
   13dd8:	bic	r0, ip, #3
   13ddc:	mov	r3, fp
   13de0:	add	r0, r0, fp
   13de4:	ldr	r1, [r3], #4
   13de8:	cmp	r3, r0
   13dec:	str	r1, [r2], #4
   13df0:	bne	13de4 <__assert_fail@plt+0x25c4>
   13df4:	bic	r3, ip, #3
   13df8:	cmp	ip, r3
   13dfc:	add	r2, fp, r3
   13e00:	add	r1, r7, r3
   13e04:	beq	13e38 <__assert_fail@plt+0x2618>
   13e08:	ldrb	r0, [fp, r3]
   13e0c:	add	lr, r2, #1
   13e10:	cmp	r4, lr
   13e14:	strb	r0, [r7, r3]
   13e18:	bls	13e38 <__assert_fail@plt+0x2618>
   13e1c:	ldrb	r3, [r2, #1]
   13e20:	add	r0, r2, #2
   13e24:	cmp	r4, r0
   13e28:	strb	r3, [r1, #1]
   13e2c:	bls	13e38 <__assert_fail@plt+0x2618>
   13e30:	ldrb	r3, [r2, #2]
   13e34:	strb	r3, [r1, #2]
   13e38:	add	r7, r7, ip
   13e3c:	movw	r3, #3548	; 0xddc
   13e40:	movt	r3, #2
   13e44:	b	14064 <__assert_fail@plt+0x2844>
   13e48:	ldr	r3, [sp, #72]	; 0x48
   13e4c:	ldr	r2, [r3, #60]	; 0x3c
   13e50:	asr	r3, r2, #31
   13e54:	orrs	r1, r2, r3
   13e58:	bne	13e68 <__assert_fail@plt+0x2648>
   13e5c:	ldr	r3, [sp, #72]	; 0x48
   13e60:	ldr	r2, [r3, #4]
   13e64:	asr	r3, r2, #31
   13e68:	mov	r1, r4
   13e6c:	mov	r0, r5
   13e70:	bl	12a20 <__assert_fail@plt+0x1200>
   13e74:	b	14310 <__assert_fail@plt+0x2af0>
   13e78:	ldr	r3, [sp, #72]	; 0x48
   13e7c:	ldr	r1, [r3]
   13e80:	movw	r3, #63415	; 0xf7b7
   13e84:	movt	r3, #303	; 0x12f
   13e88:	cmp	r1, r3
   13e8c:	beq	15344 <__assert_fail@plt+0x3b24>
   13e90:	ble	145e4 <__assert_fail@plt+0x2dc4>
   13e94:	movw	r3, #17227	; 0x434b
   13e98:	movt	r3, #21327	; 0x534f
   13e9c:	cmp	r1, r3
   13ea0:	beq	1532c <__assert_fail@plt+0x3b0c>
   13ea4:	ble	146e0 <__assert_fail@plt+0x2ec0>
   13ea8:	movw	r3, #21827	; 0x5543
   13eac:	movt	r3, #25971	; 0x6573
   13eb0:	cmp	r1, r3
   13eb4:	beq	15320 <__assert_fail@plt+0x3b00>
   13eb8:	movw	r3, #26227	; 0x6673
   13ebc:	ble	14558 <__assert_fail@plt+0x2d38>
   13ec0:	movt	r3, #29539	; 0x7363
   13ec4:	cmp	r1, r3
   13ec8:	beq	152d8 <__assert_fail@plt+0x3ab8>
   13ecc:	ble	14d50 <__assert_fail@plt+0x3530>
   13ed0:	movw	r3, #25455	; 0x636f
   13ed4:	movt	r3, #29793	; 0x7461
   13ed8:	cmp	r1, r3
   13edc:	beq	151c0 <__assert_fail@plt+0x39a0>
   13ee0:	ble	14ef0 <__assert_fail@plt+0x36d0>
   13ee4:	movw	r3, #16982	; 0x4256
   13ee8:	movt	r3, #30831	; 0x786f
   13eec:	cmp	r1, r3
   13ef0:	beq	15100 <__assert_fail@plt+0x38e0>
   13ef4:	ble	14f4c <__assert_fail@plt+0x372c>
   13ef8:	movw	r3, #30256	; 0x7630
   13efc:	movt	r3, #31052	; 0x794c
   13f00:	cmp	r1, r3
   13f04:	movweq	r2, #4448	; 0x1160
   13f08:	movteq	r2, #2
   13f0c:	beq	13f28 <__assert_fail@plt+0x2708>
   13f10:	movw	r3, #26227	; 0x6673
   13f14:	movt	r3, #31868	; 0x7c7c
   13f18:	cmp	r1, r3
   13f1c:	movweq	r2, #4480	; 0x1180
   13f20:	movteq	r2, #2
   13f24:	bne	145c0 <__assert_fail@plt+0x2da0>
   13f28:	mov	r1, r4
   13f2c:	mov	r0, r5
   13f30:	bl	126f8 <__assert_fail@plt+0xed8>
   13f34:	b	14310 <__assert_fail@plt+0x2af0>
   13f38:	ldr	r3, [sp, #72]	; 0x48
   13f3c:	add	r4, r0, r1
   13f40:	add	r7, r0, #1
   13f44:	cmp	r7, r4
   13f48:	ldrd	r2, [r3, #24]
   13f4c:	strd	r2, [sp, #8]
   13f50:	bcs	1405c <__assert_fail@plt+0x283c>
   13f54:	movw	r9, #3564	; 0xdec
   13f58:	movt	r9, #2
   13f5c:	mov	fp, r7
   13f60:	b	13f84 <__assert_fail@plt+0x2764>
   13f64:	bl	1164c <strchr@plt>
   13f68:	cmp	r0, #0
   13f6c:	mov	r3, r7
   13f70:	mov	fp, r6
   13f74:	strbne	sl, [r3], #1
   13f78:	movne	r7, r3
   13f7c:	cmp	r4, r6
   13f80:	bls	1405c <__assert_fail@plt+0x283c>
   13f84:	mov	r6, fp
   13f88:	ldr	r0, [pc, #3512]	; 14d48 <__assert_fail@plt+0x3528>
   13f8c:	mov	r8, fp
   13f90:	ldrb	sl, [r6], #1
   13f94:	mov	r1, sl
   13f98:	bl	1164c <strchr@plt>
   13f9c:	cmp	r0, #0
   13fa0:	mov	r1, sl
   13fa4:	mov	r0, r9
   13fa8:	bne	13f64 <__assert_fail@plt+0x2744>
   13fac:	cmp	r4, fp
   13fb0:	bls	1405c <__assert_fail@plt+0x283c>
   13fb4:	add	r3, r7, #4
   13fb8:	add	r0, fp, #4
   13fbc:	mov	r2, r3
   13fc0:	sub	r1, r4, #1
   13fc4:	cmp	r0, r7
   13fc8:	cmphi	r2, fp
   13fcc:	mov	r3, r0
   13fd0:	sub	r2, r1, fp
   13fd4:	movls	r3, #1
   13fd8:	movhi	r3, #0
   13fdc:	cmp	r2, #7
   13fe0:	movls	r3, #0
   13fe4:	andhi	r3, r3, #1
   13fe8:	cmp	r3, #0
   13fec:	beq	151fc <__assert_fail@plt+0x39dc>
   13ff0:	sub	ip, r4, fp
   13ff4:	mov	r3, r7
   13ff8:	bic	r0, ip, #3
   13ffc:	mov	r2, fp
   14000:	add	r0, r0, r7
   14004:	ldr	r1, [r2], #4
   14008:	str	r1, [r3], #4
   1400c:	cmp	r3, r0
   14010:	bne	14004 <__assert_fail@plt+0x27e4>
   14014:	bic	r3, ip, #3
   14018:	cmp	ip, r3
   1401c:	add	r2, fp, r3
   14020:	add	r1, r7, r3
   14024:	beq	14058 <__assert_fail@plt+0x2838>
   14028:	ldrb	r0, [fp, r3]
   1402c:	add	lr, r2, #1
   14030:	cmp	r4, lr
   14034:	strb	r0, [r7, r3]
   14038:	bls	14058 <__assert_fail@plt+0x2838>
   1403c:	ldrb	r3, [r2, #1]
   14040:	add	r0, r2, #2
   14044:	cmp	r4, r0
   14048:	strb	r3, [r1, #1]
   1404c:	bls	14058 <__assert_fail@plt+0x2838>
   14050:	ldrb	r3, [r2, #2]
   14054:	strb	r3, [r1, #2]
   14058:	add	r7, r7, ip
   1405c:	movw	r3, #3576	; 0xdf8
   14060:	movt	r3, #2
   14064:	ldr	ip, [r3]
   14068:	mov	r1, r5
   1406c:	mov	r0, #1
   14070:	ldrd	r2, [sp, #8]
   14074:	str	ip, [r7]
   14078:	bl	116b8 <__printf_chk@plt>
   1407c:	b	14310 <__assert_fail@plt+0x2af0>
   14080:	ldr	r3, [sp, #72]	; 0x48
   14084:	add	r4, r0, r1
   14088:	add	r7, r0, #1
   1408c:	cmp	r7, r4
   14090:	ldrd	r2, [r3, #8]
   14094:	strd	r2, [sp, #8]
   14098:	bcs	1405c <__assert_fail@plt+0x283c>
   1409c:	movw	r9, #3564	; 0xdec
   140a0:	movt	r9, #2
   140a4:	mov	fp, r7
   140a8:	b	140cc <__assert_fail@plt+0x28ac>
   140ac:	bl	1164c <strchr@plt>
   140b0:	cmp	r0, #0
   140b4:	mov	r3, r7
   140b8:	mov	fp, r6
   140bc:	strbne	sl, [r3], #1
   140c0:	movne	r7, r3
   140c4:	cmp	r4, r6
   140c8:	bls	1405c <__assert_fail@plt+0x283c>
   140cc:	mov	r6, fp
   140d0:	ldr	r0, [pc, #3184]	; 14d48 <__assert_fail@plt+0x3528>
   140d4:	mov	r8, fp
   140d8:	ldrb	sl, [r6], #1
   140dc:	mov	r1, sl
   140e0:	bl	1164c <strchr@plt>
   140e4:	cmp	r0, #0
   140e8:	mov	r1, sl
   140ec:	mov	r0, r9
   140f0:	bne	140ac <__assert_fail@plt+0x288c>
   140f4:	cmp	fp, r4
   140f8:	bcs	1405c <__assert_fail@plt+0x283c>
   140fc:	add	r2, r7, #4
   14100:	add	r3, fp, #4
   14104:	cmp	r2, fp
   14108:	sub	r1, r4, #1
   1410c:	movhi	r2, #0
   14110:	movls	r2, #1
   14114:	cmp	r7, r3
   14118:	movcc	r3, r2
   1411c:	orrcs	r3, r2, #1
   14120:	sub	r2, r1, fp
   14124:	cmp	r2, #7
   14128:	movls	r3, #0
   1412c:	andhi	r3, r3, #1
   14130:	cmp	r3, #0
   14134:	beq	15280 <__assert_fail@plt+0x3a60>
   14138:	sub	r8, r4, fp
   1413c:	mov	r2, r7
   14140:	bic	r0, r8, #3
   14144:	mov	r3, fp
   14148:	add	r0, r0, fp
   1414c:	ldr	r1, [r3], #4
   14150:	cmp	r3, r0
   14154:	str	r1, [r2], #4
   14158:	bne	1414c <__assert_fail@plt+0x292c>
   1415c:	bic	r3, r8, #3
   14160:	cmp	r8, r3
   14164:	add	r2, fp, r3
   14168:	add	r1, r7, r3
   1416c:	beq	141a0 <__assert_fail@plt+0x2980>
   14170:	ldrb	r0, [fp, r3]
   14174:	add	ip, r2, #1
   14178:	cmp	r4, ip
   1417c:	strb	r0, [r7, r3]
   14180:	bls	141a0 <__assert_fail@plt+0x2980>
   14184:	ldrb	r3, [r2, #1]
   14188:	add	r0, r2, #2
   1418c:	cmp	r4, r0
   14190:	strb	r3, [r1, #1]
   14194:	bls	141a0 <__assert_fail@plt+0x2980>
   14198:	ldrb	r3, [r2, #2]
   1419c:	strb	r3, [r1, #2]
   141a0:	add	r7, r7, r8
   141a4:	b	1405c <__assert_fail@plt+0x283c>
   141a8:	ldr	r3, [sp, #72]	; 0x48
   141ac:	add	r4, r0, r1
   141b0:	add	r7, r0, #1
   141b4:	cmp	r7, r4
   141b8:	ldr	r3, [r3, #48]	; 0x30
   141bc:	str	r3, [sp, #8]
   141c0:	ldr	r3, [sp, #72]	; 0x48
   141c4:	ldr	r3, [r3, #52]	; 0x34
   141c8:	str	r3, [sp, #20]
   141cc:	bcs	142d8 <__assert_fail@plt+0x2ab8>
   141d0:	movw	r9, #3544	; 0xdd8
   141d4:	movt	r9, #2
   141d8:	mov	fp, r7
   141dc:	b	14200 <__assert_fail@plt+0x29e0>
   141e0:	bl	1164c <strchr@plt>
   141e4:	cmp	r0, #0
   141e8:	mov	r3, r7
   141ec:	mov	fp, r6
   141f0:	strbne	sl, [r3], #1
   141f4:	movne	r7, r3
   141f8:	cmp	r4, r6
   141fc:	bls	142d8 <__assert_fail@plt+0x2ab8>
   14200:	mov	r6, fp
   14204:	ldr	r0, [pc, #2876]	; 14d48 <__assert_fail@plt+0x3528>
   14208:	mov	r8, fp
   1420c:	ldrb	sl, [r6], #1
   14210:	mov	r1, sl
   14214:	bl	1164c <strchr@plt>
   14218:	cmp	r0, #0
   1421c:	mov	r1, sl
   14220:	mov	r0, r9
   14224:	bne	141e0 <__assert_fail@plt+0x29c0>
   14228:	cmp	r4, fp
   1422c:	bls	142d8 <__assert_fail@plt+0x2ab8>
   14230:	add	r2, r7, #4
   14234:	add	ip, fp, #4
   14238:	mov	r1, r2
   1423c:	sub	r0, r4, #1
   14240:	cmp	ip, r7
   14244:	cmphi	r1, fp
   14248:	mov	r2, ip
   1424c:	sub	r1, r0, fp
   14250:	movls	r2, #1
   14254:	movhi	r2, #0
   14258:	cmp	r1, #7
   1425c:	movls	r2, #0
   14260:	andhi	r2, r2, #1
   14264:	cmp	r2, #0
   14268:	beq	15264 <__assert_fail@plt+0x3a44>
   1426c:	sub	lr, r4, fp
   14270:	mov	r1, r7
   14274:	bic	ip, lr, #3
   14278:	mov	r2, fp
   1427c:	add	ip, ip, fp
   14280:	ldr	r3, [r2], #4
   14284:	cmp	r2, ip
   14288:	str	r3, [r1], #4
   1428c:	bne	14280 <__assert_fail@plt+0x2a60>
   14290:	bic	r2, lr, #3
   14294:	cmp	lr, r2
   14298:	add	r1, fp, r2
   1429c:	add	r0, r7, r2
   142a0:	beq	142d4 <__assert_fail@plt+0x2ab4>
   142a4:	ldrb	r3, [fp, r2]
   142a8:	add	ip, r1, #1
   142ac:	cmp	r4, ip
   142b0:	strb	r3, [r7, r2]
   142b4:	bls	142d4 <__assert_fail@plt+0x2ab4>
   142b8:	ldrb	r3, [r1, #1]
   142bc:	add	r2, r1, #2
   142c0:	cmp	r4, r2
   142c4:	strb	r3, [r0, #1]
   142c8:	bls	142d4 <__assert_fail@plt+0x2ab4>
   142cc:	ldrb	r3, [r1, #2]
   142d0:	strb	r3, [r0, #2]
   142d4:	add	r7, r7, lr
   142d8:	movw	r3, #3548	; 0xddc
   142dc:	movt	r3, #2
   142e0:	ldr	r2, [sp, #20]
   142e4:	mov	r1, r5
   142e8:	mov	r0, #1
   142ec:	ldr	ip, [r3]
   142f0:	ldr	r3, [sp, #8]
   142f4:	str	ip, [r7]
   142f8:	bl	116b8 <__printf_chk@plt>
   142fc:	b	14310 <__assert_fail@plt+0x2af0>
   14300:	ldr	r3, [sp, #72]	; 0x48
   14304:	ldr	r2, [r3, #56]	; 0x38
   14308:	asr	r3, r2, #31
   1430c:	bl	12a20 <__assert_fail@plt+0x1200>
   14310:	mov	r0, #0
   14314:	add	sp, sp, #28
   14318:	ldrd	r4, [sp]
   1431c:	ldrd	r6, [sp, #8]
   14320:	ldrd	r8, [sp, #16]
   14324:	ldrd	sl, [sp, #24]
   14328:	add	sp, sp, #32
   1432c:	pop	{pc}		; (ldr pc, [sp], #4)
   14330:	ldr	r3, [sp, #72]	; 0x48
   14334:	add	r4, r0, r1
   14338:	add	r7, r0, #1
   1433c:	cmp	r7, r4
   14340:	ldrd	r2, [r3, #40]	; 0x28
   14344:	strd	r2, [sp, #8]
   14348:	bcs	1405c <__assert_fail@plt+0x283c>
   1434c:	movw	r9, #3564	; 0xdec
   14350:	movt	r9, #2
   14354:	mov	fp, r7
   14358:	b	1437c <__assert_fail@plt+0x2b5c>
   1435c:	bl	1164c <strchr@plt>
   14360:	cmp	r0, #0
   14364:	mov	r3, r7
   14368:	mov	fp, r6
   1436c:	strbne	sl, [r3], #1
   14370:	movne	r7, r3
   14374:	cmp	r4, r6
   14378:	bls	1405c <__assert_fail@plt+0x283c>
   1437c:	mov	r6, fp
   14380:	ldr	r0, [pc, #2496]	; 14d48 <__assert_fail@plt+0x3528>
   14384:	mov	r8, fp
   14388:	ldrb	sl, [r6], #1
   1438c:	mov	r1, sl
   14390:	bl	1164c <strchr@plt>
   14394:	cmp	r0, #0
   14398:	mov	r1, sl
   1439c:	mov	r0, r9
   143a0:	bne	1435c <__assert_fail@plt+0x2b3c>
   143a4:	cmp	r4, fp
   143a8:	bls	1405c <__assert_fail@plt+0x283c>
   143ac:	add	r3, r7, #4
   143b0:	add	r0, fp, #4
   143b4:	mov	r2, r3
   143b8:	sub	r1, r4, #1
   143bc:	cmp	r0, r7
   143c0:	cmphi	r2, fp
   143c4:	mov	r3, r0
   143c8:	sub	r2, r1, fp
   143cc:	movls	r3, #1
   143d0:	movhi	r3, #0
   143d4:	cmp	r2, #7
   143d8:	movls	r3, #0
   143dc:	andhi	r3, r3, #1
   143e0:	cmp	r3, #0
   143e4:	beq	1524c <__assert_fail@plt+0x3a2c>
   143e8:	sub	ip, r4, fp
   143ec:	mov	r2, r7
   143f0:	bic	r0, ip, #3
   143f4:	mov	r3, fp
   143f8:	add	r0, r0, fp
   143fc:	ldr	r1, [r3], #4
   14400:	cmp	r3, r0
   14404:	str	r1, [r2], #4
   14408:	bne	143fc <__assert_fail@plt+0x2bdc>
   1440c:	b	14014 <__assert_fail@plt+0x27f4>
   14410:	ldr	r3, [sp, #72]	; 0x48
   14414:	add	r4, r0, r1
   14418:	add	r7, r0, #1
   1441c:	cmp	r7, r4
   14420:	ldrd	r2, [r3, #16]
   14424:	strd	r2, [sp, #8]
   14428:	bcs	1405c <__assert_fail@plt+0x283c>
   1442c:	movw	r9, #3564	; 0xdec
   14430:	movt	r9, #2
   14434:	mov	fp, r7
   14438:	b	1445c <__assert_fail@plt+0x2c3c>
   1443c:	bl	1164c <strchr@plt>
   14440:	cmp	r0, #0
   14444:	mov	r3, r7
   14448:	mov	fp, r6
   1444c:	strbne	sl, [r3], #1
   14450:	movne	r7, r3
   14454:	cmp	r4, r6
   14458:	bls	1405c <__assert_fail@plt+0x283c>
   1445c:	mov	r6, fp
   14460:	ldr	r0, [pc, #2272]	; 14d48 <__assert_fail@plt+0x3528>
   14464:	mov	r8, fp
   14468:	ldrb	sl, [r6], #1
   1446c:	mov	r1, sl
   14470:	bl	1164c <strchr@plt>
   14474:	cmp	r0, #0
   14478:	mov	r1, sl
   1447c:	mov	r0, r9
   14480:	bne	1443c <__assert_fail@plt+0x2c1c>
   14484:	cmp	r4, fp
   14488:	bls	1405c <__assert_fail@plt+0x283c>
   1448c:	add	r3, r7, #4
   14490:	add	r0, fp, #4
   14494:	mov	r2, r3
   14498:	sub	r1, r4, #1
   1449c:	cmp	r0, r7
   144a0:	cmphi	r2, fp
   144a4:	mov	r3, r0
   144a8:	sub	r2, r1, fp
   144ac:	movls	r3, #1
   144b0:	movhi	r3, #0
   144b4:	cmp	r2, #7
   144b8:	movls	r3, #0
   144bc:	andhi	r3, r3, #1
   144c0:	cmp	r3, #0
   144c4:	beq	15234 <__assert_fail@plt+0x3a14>
   144c8:	sub	ip, r4, fp
   144cc:	mov	r2, r7
   144d0:	bic	r0, ip, #3
   144d4:	mov	r3, fp
   144d8:	add	r0, r0, fp
   144dc:	ldr	r1, [r3], #4
   144e0:	cmp	r3, r0
   144e4:	str	r1, [r2], #4
   144e8:	bne	144dc <__assert_fail@plt+0x2cbc>
   144ec:	b	14014 <__assert_fail@plt+0x27f4>
   144f0:	ldr	r3, [sp, #72]	; 0x48
   144f4:	ldrd	r2, [r3, #32]
   144f8:	bl	12a20 <__assert_fail@plt+0x1200>
   144fc:	b	14310 <__assert_fail@plt+0x2af0>
   14500:	ldr	r2, [sp, #68]	; 0x44
   14504:	bl	126f8 <__assert_fail@plt+0xed8>
   14508:	b	14310 <__assert_fail@plt+0x2af0>
   1450c:	ldr	r3, [sp, #72]	; 0x48
   14510:	ldr	r2, [r3, #4]
   14514:	asr	r3, r2, #31
   14518:	bl	12a20 <__assert_fail@plt+0x1200>
   1451c:	b	14310 <__assert_fail@plt+0x2af0>
   14520:	movw	r3, #12772	; 0x31e4
   14524:	movt	r3, #3
   14528:	ldr	r0, [r3]
   1452c:	ldr	r3, [r0, #20]
   14530:	ldr	r2, [r0, #24]
   14534:	cmp	r3, r2
   14538:	addcc	r1, r3, #1
   1453c:	movcc	r2, #63	; 0x3f
   14540:	strcc	r1, [r0, #20]
   14544:	strbcc	r2, [r3]
   14548:	bcc	14310 <__assert_fail@plt+0x2af0>
   1454c:	mov	r1, #63	; 0x3f
   14550:	bl	11724 <__overflow@plt>
   14554:	b	14310 <__assert_fail@plt+0x2af0>
   14558:	movt	r3, #24931	; 0x6163
   1455c:	cmp	r1, r3
   14560:	beq	152cc <__assert_fail@plt+0x3aac>
   14564:	ble	14c14 <__assert_fail@plt+0x33f4>
   14568:	movw	r3, #25968	; 0x6570
   1456c:	movt	r3, #25189	; 0x6265
   14570:	cmp	r1, r3
   14574:	beq	151d8 <__assert_fail@plt+0x39b8>
   14578:	ble	14dec <__assert_fail@plt+0x35cc>
   1457c:	movw	r3, #29296	; 0x7270
   14580:	movt	r3, #25447	; 0x6367
   14584:	cmp	r1, r3
   14588:	beq	15130 <__assert_fail@plt+0x3910>
   1458c:	ble	14f84 <__assert_fail@plt+0x3764>
   14590:	movw	r3, #26400	; 0x6720
   14594:	movt	r3, #25698	; 0x6462
   14598:	cmp	r1, r3
   1459c:	movweq	r2, #3956	; 0xf74
   145a0:	movteq	r2, #2
   145a4:	beq	13f28 <__assert_fail@plt+0x2708>
   145a8:	movw	r3, #24952	; 0x6178
   145ac:	movt	r3, #25700	; 0x6464
   145b0:	cmp	r1, r3
   145b4:	movweq	r2, #3948	; 0xf6c
   145b8:	movteq	r2, #2
   145bc:	beq	13f28 <__assert_fail@plt+0x2708>
   145c0:	mov	r2, #21
   145c4:	movw	r3, #4820	; 0x12d4
   145c8:	movt	r3, #2
   145cc:	ldr	r0, [pc, #1912]	; 14d4c <__assert_fail@plt+0x352c>
   145d0:	str	r1, [sp]
   145d4:	mov	r1, #1
   145d8:	bl	11688 <__sprintf_chk@plt>
   145dc:	ldr	r2, [pc, #1896]	; 14d4c <__assert_fail@plt+0x352c>
   145e0:	b	13f28 <__assert_fail@plt+0x2708>
   145e4:	movw	r3, #16390	; 0x4006
   145e8:	cmp	r1, r3
   145ec:	beq	15338 <__assert_fail@plt+0x3b18>
   145f0:	bgt	14660 <__assert_fail@plt+0x2e40>
   145f4:	movw	r3, #59465	; 0xe849
   145f8:	movt	r3, #63893	; 0xf995
   145fc:	cmp	r1, r3
   14600:	beq	15308 <__assert_fail@plt+0x3ae8>
   14604:	ble	148b0 <__assert_fail@plt+0x3090>
   14608:	movw	r3, #4989	; 0x137d
   1460c:	cmp	r1, r3
   14610:	beq	152e4 <__assert_fail@plt+0x3ac4>
   14614:	ble	14b98 <__assert_fail@plt+0x3378>
   14618:	movw	r3, #9320	; 0x2468
   1461c:	cmp	r1, r3
   14620:	beq	151e4 <__assert_fail@plt+0x39c4>
   14624:	ble	14eb8 <__assert_fail@plt+0x3698>
   14628:	movw	r3, #13364	; 0x3434
   1462c:	cmp	r1, r3
   14630:	beq	15118 <__assert_fail@plt+0x38f8>
   14634:	ble	14f34 <__assert_fail@plt+0x3714>
   14638:	cmp	r1, #16384	; 0x4000
   1463c:	movweq	r2, #4220	; 0x107c
   14640:	movteq	r2, #2
   14644:	beq	13f28 <__assert_fail@plt+0x2708>
   14648:	movw	r3, #16388	; 0x4004
   1464c:	cmp	r1, r3
   14650:	movweq	r2, #4220	; 0x107c
   14654:	movteq	r2, #2
   14658:	beq	13f28 <__assert_fail@plt+0x2708>
   1465c:	b	145c0 <__assert_fail@plt+0x2da0>
   14660:	movw	r3, #44533	; 0xadf5
   14664:	cmp	r1, r3
   14668:	beq	152fc <__assert_fail@plt+0x3adc>
   1466c:	ble	149fc <__assert_fail@plt+0x31dc>
   14670:	movw	r3, #65518	; 0xffee
   14674:	movt	r3, #192	; 0xc0
   14678:	cmp	r1, r3
   1467c:	beq	152f0 <__assert_fail@plt+0x3ad0>
   14680:	ble	14b0c <__assert_fail@plt+0x32ec>
   14684:	movw	r3, #6512	; 0x1970
   14688:	movt	r3, #278	; 0x116
   1468c:	cmp	r1, r3
   14690:	beq	151f0 <__assert_fail@plt+0x39d0>
   14694:	ble	14e74 <__assert_fail@plt+0x3654>
   14698:	movw	r3, #63412	; 0xf7b4
   1469c:	movt	r3, #303	; 0x12f
   146a0:	cmp	r1, r3
   146a4:	beq	15124 <__assert_fail@plt+0x3904>
   146a8:	ble	14fa0 <__assert_fail@plt+0x3780>
   146ac:	movw	r3, #63413	; 0xf7b5
   146b0:	movt	r3, #303	; 0x12f
   146b4:	cmp	r1, r3
   146b8:	movweq	r2, #4676	; 0x1244
   146bc:	movteq	r2, #2
   146c0:	beq	13f28 <__assert_fail@plt+0x2708>
   146c4:	movw	r3, #63414	; 0xf7b6
   146c8:	movt	r3, #303	; 0x12f
   146cc:	cmp	r1, r3
   146d0:	movweq	r2, #4668	; 0x123c
   146d4:	movteq	r2, #2
   146d8:	beq	13f28 <__assert_fail@plt+0x2708>
   146dc:	b	145c0 <__assert_fail@plt+0x2da0>
   146e0:	movw	r3, #12225	; 0x2fc1
   146e4:	movt	r3, #12225	; 0x2fc1
   146e8:	cmp	r1, r3
   146ec:	beq	15314 <__assert_fail@plt+0x3af4>
   146f0:	ble	14764 <__assert_fail@plt+0x2f44>
   146f4:	movw	r3, #18003	; 0x4653
   146f8:	movt	r3, #17752	; 0x4558
   146fc:	cmp	r1, r3
   14700:	beq	152c0 <__assert_fail@plt+0x3aa0>
   14704:	ble	14cac <__assert_fail@plt+0x348c>
   14708:	movw	r3, #17229	; 0x434d
   1470c:	movt	r3, #21317	; 0x5345
   14710:	cmp	r1, r3
   14714:	beq	151cc <__assert_fail@plt+0x39ac>
   14718:	ble	14e30 <__assert_fail@plt+0x3610>
   1471c:	movw	r3, #16719	; 0x414f
   14720:	movt	r3, #21318	; 0x5346
   14724:	cmp	r1, r3
   14728:	beq	1510c <__assert_fail@plt+0x38ec>
   1472c:	ble	14f68 <__assert_fail@plt+0x3748>
   14730:	movw	r3, #18502	; 0x4846
   14734:	movt	r3, #21318	; 0x5346
   14738:	cmp	r1, r3
   1473c:	movweq	r2, #4776	; 0x12a8
   14740:	movteq	r2, #2
   14744:	beq	13f28 <__assert_fail@plt+0x2708>
   14748:	movw	r3, #21582	; 0x544e
   1474c:	movt	r3, #21318	; 0x5346
   14750:	cmp	r1, r3
   14754:	movweq	r2, #4420	; 0x1144
   14758:	movteq	r2, #2
   1475c:	beq	13f28 <__assert_fail@plt+0x2708>
   14760:	b	145c0 <__assert_fail@plt+0x2da0>
   14764:	movw	r3, #13126	; 0x3346
   14768:	movt	r3, #5377	; 0x1501
   1476c:	cmp	r1, r3
   14770:	beq	152b4 <__assert_fail@plt+0x3a94>
   14774:	ble	14814 <__assert_fail@plt+0x2ff4>
   14778:	movw	r3, #47792	; 0xbab0
   1477c:	movt	r3, #8209	; 0x2011
   14780:	cmp	r1, r3
   14784:	beq	1519c <__assert_fail@plt+0x397c>
   14788:	ble	147d0 <__assert_fail@plt+0x2fb0>
   1478c:	movw	r3, #15685	; 0x3d45
   14790:	movt	r3, #10445	; 0x28cd
   14794:	cmp	r1, r3
   14798:	beq	15034 <__assert_fail@plt+0x3814>
   1479c:	movw	r3, #7658	; 0x1dea
   147a0:	movt	r3, #11181	; 0x2bad
   147a4:	cmp	r1, r3
   147a8:	movweq	r2, #4208	; 0x1070
   147ac:	movteq	r2, #2
   147b0:	beq	13f28 <__assert_fail@plt+0x2708>
   147b4:	movw	r3, #6405	; 0x1905
   147b8:	movt	r3, #9221	; 0x2405
   147bc:	cmp	r1, r3
   147c0:	bne	145c0 <__assert_fail@plt+0x2da0>
   147c4:	movw	r2, #4700	; 0x125c
   147c8:	movt	r2, #2
   147cc:	b	13f28 <__assert_fail@plt+0x2708>
   147d0:	movw	r3, #806	; 0x326
   147d4:	movt	r3, #6531	; 0x1983
   147d8:	cmp	r1, r3
   147dc:	beq	15028 <__assert_fail@plt+0x3808>
   147e0:	movw	r3, #64206	; 0xface
   147e4:	movt	r3, #7085	; 0x1bad
   147e8:	cmp	r1, r3
   147ec:	movweq	r2, #3808	; 0xee0
   147f0:	movteq	r2, #2
   147f4:	beq	13f28 <__assert_fail@plt+0x2708>
   147f8:	movw	r3, #514	; 0x202
   147fc:	movt	r3, #6528	; 0x1980
   14800:	cmp	r1, r3
   14804:	bne	145c0 <__assert_fail@plt+0x2da0>
   14808:	movw	r2, #4368	; 0x1110
   1480c:	movt	r2, #2
   14810:	b	13f28 <__assert_fail@plt+0x2708>
   14814:	movw	r3, #7658	; 0x1dea
   14818:	movt	r3, #2989	; 0xbad
   1481c:	cmp	r1, r3
   14820:	beq	15190 <__assert_fail@plt+0x3970>
   14824:	ble	1486c <__assert_fail@plt+0x304c>
   14828:	movw	r3, #30804	; 0x7854
   1482c:	movt	r3, #4400	; 0x1130
   14830:	cmp	r1, r3
   14834:	beq	14fd4 <__assert_fail@plt+0x37b4>
   14838:	movw	r3, #4966	; 0x1366
   1483c:	movt	r3, #4966	; 0x1366
   14840:	cmp	r1, r3
   14844:	movweq	r2, #3776	; 0xec0
   14848:	movteq	r2, #2
   1484c:	beq	13f28 <__assert_fail@plt+0x2708>
   14850:	mov	r3, #3024	; 0xbd0
   14854:	movt	r3, #3024	; 0xbd0
   14858:	cmp	r1, r3
   1485c:	bne	145c0 <__assert_fail@plt+0x2da0>
   14860:	movw	r2, #4284	; 0x10bc
   14864:	movt	r2, #2
   14868:	b	13f28 <__assert_fail@plt+0x2708>
   1486c:	movw	r3, #22561	; 0x5821
   14870:	movt	r3, #1893	; 0x765
   14874:	cmp	r1, r3
   14878:	beq	150c4 <__assert_fail@plt+0x38a4>
   1487c:	movw	r3, #6452	; 0x1934
   14880:	movt	r3, #2308	; 0x904
   14884:	cmp	r1, r3
   14888:	movweq	r2, #3744	; 0xea0
   1488c:	movteq	r2, #2
   14890:	beq	13f28 <__assert_fail@plt+0x2708>
   14894:	movw	r3, #4520	; 0x11a8
   14898:	movt	r3, #305	; 0x131
   1489c:	cmp	r1, r3
   148a0:	bne	145c0 <__assert_fail@plt+0x2da0>
   148a4:	movw	r2, #4200	; 0x1068
   148a8:	movt	r2, #2
   148ac:	b	13f28 <__assert_fail@plt+0x2708>
   148b0:	movw	r3, #57005	; 0xdead
   148b4:	movt	r3, #48879	; 0xbeef
   148b8:	cmp	r1, r3
   148bc:	beq	152a8 <__assert_fail@plt+0x3a88>
   148c0:	ble	14960 <__assert_fail@plt+0x3140>
   148c4:	movw	r3, #33252	; 0x81e4
   148c8:	movt	r3, #56926	; 0xde5e
   148cc:	cmp	r1, r3
   148d0:	beq	15184 <__assert_fail@plt+0x3964>
   148d4:	ble	1491c <__assert_fail@plt+0x30fc>
   148d8:	movw	r3, #8208	; 0x2010
   148dc:	movt	r3, #62197	; 0xf2f5
   148e0:	cmp	r1, r3
   148e4:	beq	150f4 <__assert_fail@plt+0x38d4>
   148e8:	movw	r3, #65420	; 0xff8c
   148ec:	movt	r3, #63868	; 0xf97c
   148f0:	cmp	r1, r3
   148f4:	movweq	r2, #4604	; 0x11fc
   148f8:	movteq	r2, #2
   148fc:	beq	13f28 <__assert_fail@plt+0x2708>
   14900:	movw	r3, #57826	; 0xe1e2
   14904:	movt	r3, #57589	; 0xe0f5
   14908:	cmp	r1, r3
   1490c:	bne	145c0 <__assert_fail@plt+0x2da0>
   14910:	movw	r2, #4024	; 0xfb8
   14914:	movt	r2, #2
   14918:	b	13f28 <__assert_fail@plt+0x2708>
   1491c:	movw	r3, #33128	; 0x8168
   14920:	movt	r3, #51582	; 0xc97e
   14924:	cmp	r1, r3
   14928:	beq	150e8 <__assert_fail@plt+0x38c8>
   1492c:	movw	r3, #18961	; 0x4a11
   14930:	movt	r3, #51966	; 0xcafe
   14934:	cmp	r1, r3
   14938:	movweq	r2, #3824	; 0xef0
   1493c:	movteq	r2, #2
   14940:	beq	13f28 <__assert_fail@plt+0x2708>
   14944:	movw	r3, #5520	; 0x1590
   14948:	movt	r3, #51031	; 0xc757
   1494c:	cmp	r1, r3
   14950:	bne	145c0 <__assert_fail@plt+0x2da0>
   14954:	movw	r2, #4468	; 0x1174
   14958:	movt	r2, #2
   1495c:	b	13f28 <__assert_fail@plt+0x2708>
   14960:	movw	r3, #64757	; 0xfcf5
   14964:	movt	r3, #42241	; 0xa501
   14968:	cmp	r1, r3
   1496c:	beq	15178 <__assert_fail@plt+0x3958>
   14970:	ble	149b8 <__assert_fail@plt+0x3198>
   14974:	movw	r3, #6516	; 0x1974
   14978:	movt	r3, #43962	; 0xabba
   1497c:	cmp	r1, r3
   14980:	beq	150dc <__assert_fail@plt+0x38bc>
   14984:	movw	r3, #44220	; 0xacbc
   14988:	movt	r3, #47819	; 0xbacb
   1498c:	cmp	r1, r3
   14990:	movweq	r2, #4752	; 0x1290
   14994:	movteq	r2, #2
   14998:	beq	13f28 <__assert_fail@plt+0x2708>
   1499c:	movw	r3, #43754	; 0xaaea
   149a0:	movt	r3, #43735	; 0xaad7
   149a4:	cmp	r1, r3
   149a8:	bne	145c0 <__assert_fail@plt+0x2da0>
   149ac:	movw	r2, #4460	; 0x116c
   149b0:	movt	r2, #2
   149b4:	b	13f28 <__assert_fail@plt+0x2708>
   149b8:	movw	r3, #26686	; 0x683e
   149bc:	movt	r3, #37155	; 0x9123
   149c0:	cmp	r1, r3
   149c4:	beq	150d0 <__assert_fail@plt+0x38b0>
   149c8:	movw	r3, #22774	; 0x58f6
   149cc:	movt	r3, #38276	; 0x9584
   149d0:	cmp	r1, r3
   149d4:	movweq	r2, #4180	; 0x1054
   149d8:	movteq	r2, #2
   149dc:	beq	13f28 <__assert_fail@plt+0x2708>
   149e0:	movw	r3, #22774	; 0x58f6
   149e4:	movt	r3, #34180	; 0x8584
   149e8:	cmp	r1, r3
   149ec:	bne	145c0 <__assert_fail@plt+0x2da0>
   149f0:	movw	r2, #4524	; 0x11ac
   149f4:	movt	r2, #2
   149f8:	b	13f28 <__assert_fail@plt+0x2708>
   149fc:	movw	r3, #24053	; 0x5df5
   14a00:	cmp	r1, r3
   14a04:	beq	1529c <__assert_fail@plt+0x3a7c>
   14a08:	ble	14a8c <__assert_fail@plt+0x326c>
   14a0c:	movw	r3, #38496	; 0x9660
   14a10:	cmp	r1, r3
   14a14:	beq	15160 <__assert_fail@plt+0x3940>
   14a18:	ble	14a54 <__assert_fail@plt+0x3234>
   14a1c:	movw	r3, #40865	; 0x9fa1
   14a20:	cmp	r1, r3
   14a24:	beq	150b8 <__assert_fail@plt+0x3898>
   14a28:	movw	r3, #40866	; 0x9fa2
   14a2c:	cmp	r1, r3
   14a30:	movweq	r2, #4724	; 0x1274
   14a34:	movteq	r2, #2
   14a38:	beq	13f28 <__assert_fail@plt+0x2708>
   14a3c:	movw	r3, #40864	; 0x9fa0
   14a40:	cmp	r1, r3
   14a44:	bne	145c0 <__assert_fail@plt+0x2da0>
   14a48:	movw	r2, #4488	; 0x1188
   14a4c:	movt	r2, #2
   14a50:	b	13f28 <__assert_fail@plt+0x2708>
   14a54:	movw	r3, #29301	; 0x7275
   14a58:	cmp	r1, r3
   14a5c:	beq	150ac <__assert_fail@plt+0x388c>
   14a60:	movw	r3, #29366	; 0x72b6
   14a64:	cmp	r1, r3
   14a68:	movweq	r2, #4256	; 0x10a0
   14a6c:	movteq	r2, #2
   14a70:	beq	13f28 <__assert_fail@plt+0x2708>
   14a74:	movw	r3, #26985	; 0x6969
   14a78:	cmp	r1, r3
   14a7c:	bne	145c0 <__assert_fail@plt+0x2da0>
   14a80:	movw	r2, #4392	; 0x1128
   14a84:	movt	r2, #2
   14a88:	b	13f28 <__assert_fail@plt+0x2708>
   14a8c:	movw	r3, #19780	; 0x4d44
   14a90:	cmp	r1, r3
   14a94:	beq	1516c <__assert_fail@plt+0x394c>
   14a98:	ble	14ad4 <__assert_fail@plt+0x32b4>
   14a9c:	movw	r3, #20859	; 0x517b
   14aa0:	cmp	r1, r3
   14aa4:	beq	150a0 <__assert_fail@plt+0x3880>
   14aa8:	movw	r3, #22092	; 0x564c
   14aac:	cmp	r1, r3
   14ab0:	movweq	r2, #4384	; 0x1120
   14ab4:	movteq	r2, #2
   14ab8:	beq	13f28 <__assert_fail@plt+0x2708>
   14abc:	movw	r3, #19802	; 0x4d5a
   14ac0:	cmp	r1, r3
   14ac4:	bne	145c0 <__assert_fail@plt+0x2da0>
   14ac8:	movw	r2, #4360	; 0x1108
   14acc:	movt	r2, #2
   14ad0:	b	13f28 <__assert_fail@plt+0x2708>
   14ad4:	movw	r3, #18475	; 0x482b
   14ad8:	cmp	r1, r3
   14adc:	beq	15094 <__assert_fail@plt+0x3874>
   14ae0:	movw	r3, #18520	; 0x4858
   14ae4:	cmp	r1, r3
   14ae8:	movweq	r2, #4156	; 0x103c
   14aec:	movteq	r2, #2
   14af0:	beq	13f28 <__assert_fail@plt+0x2708>
   14af4:	movw	r3, #16964	; 0x4244
   14af8:	cmp	r1, r3
   14afc:	bne	145c0 <__assert_fail@plt+0x2da0>
   14b00:	movw	r2, #4144	; 0x1030
   14b04:	movt	r2, #2
   14b08:	b	13f28 <__assert_fail@plt+0x2708>
   14b0c:	movw	r3, #61791	; 0xf15f
   14b10:	cmp	r1, r3
   14b14:	beq	15154 <__assert_fail@plt+0x3934>
   14b18:	ble	14b60 <__assert_fail@plt+0x3340>
   14b1c:	movw	r3, #57579	; 0xe0eb
   14b20:	movt	r3, #39	; 0x27
   14b24:	cmp	r1, r3
   14b28:	beq	15064 <__assert_fail@plt+0x3844>
   14b2c:	movw	r3, #19027	; 0x4a53
   14b30:	movt	r3, #65	; 0x41
   14b34:	cmp	r1, r3
   14b38:	movweq	r2, #4696	; 0x1258
   14b3c:	movteq	r2, #2
   14b40:	beq	13f28 <__assert_fail@plt+0x2708>
   14b44:	movw	r3, #6484	; 0x1954
   14b48:	movt	r3, #1
   14b4c:	cmp	r1, r3
   14b50:	bne	145c0 <__assert_fail@plt+0x2da0>
   14b54:	movw	r2, #4712	; 0x1268
   14b58:	movt	r2, #2
   14b5c:	b	13f28 <__assert_fail@plt+0x2708>
   14b60:	movw	r3, #61265	; 0xef51
   14b64:	cmp	r1, r3
   14b68:	beq	15058 <__assert_fail@plt+0x3838>
   14b6c:	movw	r3, #61267	; 0xef53
   14b70:	cmp	r1, r3
   14b74:	movweq	r2, #4060	; 0xfdc
   14b78:	movteq	r2, #2
   14b7c:	beq	13f28 <__assert_fail@plt+0x2708>
   14b80:	movw	r3, #44543	; 0xadff
   14b84:	cmp	r1, r3
   14b88:	bne	145c0 <__assert_fail@plt+0x2da0>
   14b8c:	movw	r2, #3732	; 0xe94
   14b90:	movt	r2, #2
   14b94:	b	13f28 <__assert_fail@plt+0x2708>
   14b98:	cmp	r1, #51	; 0x33
   14b9c:	beq	1513c <__assert_fail@plt+0x391c>
   14ba0:	ble	14bd8 <__assert_fail@plt+0x33b8>
   14ba4:	cmp	r1, #1984	; 0x7c0
   14ba8:	beq	1504c <__assert_fail@plt+0x382c>
   14bac:	movw	r3, #4979	; 0x1373
   14bb0:	cmp	r1, r3
   14bb4:	movweq	r2, #3964	; 0xf7c
   14bb8:	movteq	r2, #2
   14bbc:	beq	13f28 <__assert_fail@plt+0x2708>
   14bc0:	movw	r3, #391	; 0x187
   14bc4:	cmp	r1, r3
   14bc8:	bne	145c0 <__assert_fail@plt+0x2da0>
   14bcc:	movw	r2, #3768	; 0xeb8
   14bd0:	movt	r2, #2
   14bd4:	b	13f28 <__assert_fail@plt+0x2708>
   14bd8:	movw	r3, #19778	; 0x4d42
   14bdc:	movt	r3, #65363	; 0xff53
   14be0:	cmp	r1, r3
   14be4:	beq	15070 <__assert_fail@plt+0x3850>
   14be8:	cmp	r1, #47	; 0x2f
   14bec:	movweq	r2, #4508	; 0x119c
   14bf0:	movteq	r2, #2
   14bf4:	beq	13f28 <__assert_fail@plt+0x2708>
   14bf8:	movw	r3, #19778	; 0x4d42
   14bfc:	movt	r3, #65107	; 0xfe53
   14c00:	cmp	r1, r3
   14c04:	bne	145c0 <__assert_fail@plt+0x2da0>
   14c08:	movw	r2, #4624	; 0x1210
   14c0c:	movt	r2, #2
   14c10:	b	13f28 <__assert_fail@plt+0x2708>
   14c14:	movw	r3, #21314	; 0x5342
   14c18:	movt	r3, #22598	; 0x5846
   14c1c:	cmp	r1, r3
   14c20:	beq	15148 <__assert_fail@plt+0x3928>
   14c24:	movw	r3, #18003	; 0x4653
   14c28:	ble	14c6c <__assert_fail@plt+0x344c>
   14c2c:	movt	r3, #23119	; 0x5a4f
   14c30:	cmp	r1, r3
   14c34:	beq	15088 <__assert_fail@plt+0x3868>
   14c38:	movw	r3, #11765	; 0x2df5
   14c3c:	movt	r3, #24010	; 0x5dca
   14c40:	cmp	r1, r3
   14c44:	movweq	r2, #4568	; 0x11d8
   14c48:	movteq	r2, #2
   14c4c:	beq	13f28 <__assert_fail@plt+0x2708>
   14c50:	movw	r3, #27120	; 0x69f0
   14c54:	movt	r3, #23100	; 0x5a3c
   14c58:	cmp	r1, r3
   14c5c:	bne	145c0 <__assert_fail@plt+0x2da0>
   14c60:	movw	r2, #4228	; 0x1084
   14c64:	movt	r2, #2
   14c68:	b	13f28 <__assert_fail@plt+0x2708>
   14c6c:	movt	r3, #22106	; 0x565a
   14c70:	cmp	r1, r3
   14c74:	beq	1507c <__assert_fail@plt+0x385c>
   14c78:	movw	r3, #22569	; 0x5829
   14c7c:	movt	r3, #22569	; 0x5829
   14c80:	cmp	r1, r3
   14c84:	movweq	r2, #4236	; 0x108c
   14c88:	movteq	r2, #2
   14c8c:	beq	13f28 <__assert_fail@plt+0x2708>
   14c90:	mov	r3, #256	; 0x100
   14c94:	movt	r3, #21529	; 0x5419
   14c98:	cmp	r1, r3
   14c9c:	bne	145c0 <__assert_fail@plt+0x2da0>
   14ca0:	movw	r2, #4712	; 0x1268
   14ca4:	movt	r2, #2
   14ca8:	b	13f28 <__assert_fail@plt+0x2708>
   14cac:	movw	r3, #23891	; 0x5d53
   14cb0:	movt	r3, #17217	; 0x4341
   14cb4:	cmp	r1, r3
   14cb8:	beq	151b4 <__assert_fail@plt+0x3994>
   14cbc:	ble	14d04 <__assert_fail@plt+0x34e4>
   14cc0:	movw	r3, #52520	; 0xcd28
   14cc4:	movt	r3, #17725	; 0x453d
   14cc8:	cmp	r1, r3
   14ccc:	beq	14fec <__assert_fail@plt+0x37cc>
   14cd0:	movw	r3, #17485	; 0x444d
   14cd4:	movt	r3, #17741	; 0x454d
   14cd8:	cmp	r1, r3
   14cdc:	movweq	r2, #3972	; 0xf84
   14ce0:	movteq	r2, #2
   14ce4:	beq	13f28 <__assert_fail@plt+0x2708>
   14ce8:	movw	r3, #16706	; 0x4142
   14cec:	movt	r3, #17485	; 0x444d
   14cf0:	cmp	r1, r3
   14cf4:	bne	145c0 <__assert_fail@plt+0x2da0>
   14cf8:	movw	r2, #3988	; 0xf94
   14cfc:	movt	r2, #2
   14d00:	b	13f28 <__assert_fail@plt+0x2708>
   14d04:	movw	r3, #21297	; 0x5331
   14d08:	movt	r3, #16966	; 0x4246
   14d0c:	cmp	r1, r3
   14d10:	beq	14fe0 <__assert_fail@plt+0x37c0>
   14d14:	movw	r3, #20045	; 0x4e4d
   14d18:	movt	r3, #16969	; 0x4249
   14d1c:	cmp	r1, r3
   14d20:	movweq	r2, #3832	; 0xef8
   14d24:	movteq	r2, #2
   14d28:	beq	13f28 <__assert_fail@plt+0x2708>
   14d2c:	movw	r3, #17994	; 0x464a
   14d30:	movt	r3, #12627	; 0x3153
   14d34:	cmp	r1, r3
   14d38:	bne	145c0 <__assert_fail@plt+0x2da0>
   14d3c:	movw	r2, #4264	; 0x10a8
   14d40:	movt	r2, #2
   14d44:	b	13f28 <__assert_fail@plt+0x2708>
   14d48:	andeq	r0, r2, r0, asr #20
   14d4c:	andeq	r3, r3, r4, asr r2
   14d50:	movw	r3, #18003	; 0x4653
   14d54:	movt	r3, #27457	; 0x6b41
   14d58:	cmp	r1, r3
   14d5c:	beq	151a8 <__assert_fail@plt+0x3988>
   14d60:	ble	14da8 <__assert_fail@plt+0x3588>
   14d64:	movw	r3, #29540	; 0x7364
   14d68:	movt	r3, #28262	; 0x6e66
   14d6c:	cmp	r1, r3
   14d70:	beq	1501c <__assert_fail@plt+0x37fc>
   14d74:	movw	r3, #26227	; 0x6673
   14d78:	movt	r3, #28275	; 0x6e73
   14d7c:	cmp	r1, r3
   14d80:	movweq	r2, #4412	; 0x113c
   14d84:	movteq	r2, #2
   14d88:	beq	13f28 <__assert_fail@plt+0x2708>
   14d8c:	movw	r3, #28528	; 0x6f70
   14d90:	movt	r3, #27759	; 0x6c6f
   14d94:	cmp	r1, r3
   14d98:	bne	145c0 <__assert_fail@plt+0x2da0>
   14d9c:	movw	r2, #3812	; 0xee4
   14da0:	movt	r2, #2
   14da4:	b	13f28 <__assert_fail@plt+0x2708>
   14da8:	movw	r3, #26985	; 0x6969
   14dac:	movt	r3, #26457	; 0x6759
   14db0:	cmp	r1, r3
   14db4:	beq	15010 <__assert_fail@plt+0x37f0>
   14db8:	movw	r3, #4386	; 0x1122
   14dbc:	movt	r3, #26649	; 0x6819
   14dc0:	cmp	r1, r3
   14dc4:	movweq	r2, #4516	; 0x11a4
   14dc8:	movteq	r2, #2
   14dcc:	beq	13f28 <__assert_fail@plt+0x2708>
   14dd0:	movw	r3, #21830	; 0x5546
   14dd4:	movt	r3, #25971	; 0x6573
   14dd8:	cmp	r1, r3
   14ddc:	bne	145c0 <__assert_fail@plt+0x2da0>
   14de0:	movw	r2, #4100	; 0x1004
   14de4:	movt	r2, #2
   14de8:	b	13f28 <__assert_fail@plt+0x2708>
   14dec:	movw	r3, #26227	; 0x6673
   14df0:	movt	r3, #24949	; 0x6175
   14df4:	cmp	r1, r3
   14df8:	beq	15004 <__assert_fail@plt+0x37e4>
   14dfc:	movw	r3, #25974	; 0x6576
   14e00:	movt	r3, #25188	; 0x6264
   14e04:	cmp	r1, r3
   14e08:	movweq	r2, #3800	; 0xed8
   14e0c:	movteq	r2, #2
   14e10:	beq	13f28 <__assert_fail@plt+0x2708>
   14e14:	movw	r3, #26476	; 0x676c
   14e18:	movt	r3, #24933	; 0x6165
   14e1c:	cmp	r1, r3
   14e20:	bne	145c0 <__assert_fail@plt+0x2da0>
   14e24:	movw	r2, #4496	; 0x1190
   14e28:	movt	r2, #2
   14e2c:	b	13f28 <__assert_fail@plt+0x2708>
   14e30:	movw	r3, #20549	; 0x5045
   14e34:	movt	r3, #20553	; 0x5049
   14e38:	cmp	r1, r3
   14e3c:	beq	14ff8 <__assert_fail@plt+0x37d8>
   14e40:	movw	r3, #18803	; 0x4973
   14e44:	movt	r3, #21093	; 0x5265
   14e48:	cmp	r1, r3
   14e4c:	movweq	r2, #4536	; 0x11b8
   14e50:	movteq	r2, #2
   14e54:	beq	13f28 <__assert_fail@plt+0x2708>
   14e58:	movw	r3, #18003	; 0x4653
   14e5c:	movt	r3, #18256	; 0x4750
   14e60:	cmp	r1, r3
   14e64:	bne	145c0 <__assert_fail@plt+0x2da0>
   14e68:	movw	r2, #4136	; 0x1028
   14e6c:	movt	r2, #2
   14e70:	b	13f28 <__assert_fail@plt+0x2708>
   14e74:	movw	r3, #6548	; 0x1994
   14e78:	movt	r3, #258	; 0x102
   14e7c:	cmp	r1, r3
   14e80:	beq	14fc8 <__assert_fail@plt+0x37a8>
   14e84:	movw	r3, #6551	; 0x1997
   14e88:	movt	r3, #258	; 0x102
   14e8c:	cmp	r1, r3
   14e90:	movweq	r2, #4736	; 0x1280
   14e94:	movteq	r2, #2
   14e98:	beq	13f28 <__assert_fail@plt+0x2708>
   14e9c:	mov	r3, #25600	; 0x6400
   14ea0:	movt	r3, #195	; 0xc3
   14ea4:	cmp	r1, r3
   14ea8:	bne	145c0 <__assert_fail@plt+0x2da0>
   14eac:	movw	r2, #3864	; 0xf18
   14eb0:	movt	r2, #2
   14eb4:	b	13f28 <__assert_fail@plt+0x2708>
   14eb8:	movw	r3, #5007	; 0x138f
   14ebc:	cmp	r1, r3
   14ec0:	beq	14fbc <__assert_fail@plt+0x379c>
   14ec4:	movw	r3, #7377	; 0x1cd1
   14ec8:	cmp	r1, r3
   14ecc:	movweq	r2, #3980	; 0xf8c
   14ed0:	movteq	r2, #2
   14ed4:	beq	13f28 <__assert_fail@plt+0x2708>
   14ed8:	movw	r3, #4991	; 0x137f
   14edc:	cmp	r1, r3
   14ee0:	bne	145c0 <__assert_fail@plt+0x2da0>
   14ee4:	movw	r2, #4300	; 0x10cc
   14ee8:	movt	r2, #2
   14eec:	b	13f28 <__assert_fail@plt+0x2708>
   14ef0:	movw	r3, #29305	; 0x7279
   14ef4:	movt	r3, #29554	; 0x7372
   14ef8:	cmp	r1, r3
   14efc:	beq	15040 <__assert_fail@plt+0x3820>
   14f00:	movw	r3, #29253	; 0x7245
   14f04:	movt	r3, #29557	; 0x7375
   14f08:	cmp	r1, r3
   14f0c:	movweq	r2, #3904	; 0xf40
   14f10:	movteq	r2, #2
   14f14:	beq	13f28 <__assert_fail@plt+0x2708>
   14f18:	movw	r3, #29544	; 0x7368
   14f1c:	movt	r3, #29553	; 0x7371
   14f20:	cmp	r1, r3
   14f24:	bne	145c0 <__assert_fail@plt+0x2da0>
   14f28:	movw	r2, #4648	; 0x1228
   14f2c:	movt	r2, #2
   14f30:	b	13f28 <__assert_fail@plt+0x2708>
   14f34:	movw	r3, #9336	; 0x2478
   14f38:	cmp	r1, r3
   14f3c:	movweq	r2, #4340	; 0x10f4
   14f40:	movteq	r2, #2
   14f44:	beq	13f28 <__assert_fail@plt+0x2708>
   14f48:	b	145c0 <__assert_fail@plt+0x2da0>
   14f4c:	movw	r3, #24931	; 0x6163
   14f50:	movt	r3, #29810	; 0x7472
   14f54:	cmp	r1, r3
   14f58:	movweq	r2, #4692	; 0x1254
   14f5c:	movteq	r2, #2
   14f60:	beq	13f28 <__assert_fail@plt+0x2708>
   14f64:	b	145c0 <__assert_fail@plt+0x2da0>
   14f68:	movw	r3, #12621	; 0x314d
   14f6c:	movt	r3, #21318	; 0x5346
   14f70:	cmp	r1, r3
   14f74:	movweq	r2, #4292	; 0x10c4
   14f78:	movteq	r2, #2
   14f7c:	beq	13f28 <__assert_fail@plt+0x2708>
   14f80:	b	145c0 <__assert_fail@plt+0x2da0>
   14f84:	movw	r3, #25970	; 0x6572
   14f88:	movt	r3, #25189	; 0x6265
   14f8c:	cmp	r1, r3
   14f90:	movweq	r2, #4660	; 0x1234
   14f94:	movteq	r2, #2
   14f98:	beq	13f28 <__assert_fail@plt+0x2708>
   14f9c:	b	145c0 <__assert_fail@plt+0x2da0>
   14fa0:	movw	r3, #53613	; 0xd16d
   14fa4:	movt	r3, #303	; 0x12f
   14fa8:	cmp	r1, r3
   14fac:	movweq	r2, #4800	; 0x12c0
   14fb0:	movteq	r2, #2
   14fb4:	beq	13f28 <__assert_fail@plt+0x2708>
   14fb8:	b	145c0 <__assert_fail@plt+0x2da0>
   14fbc:	movw	r2, #4308	; 0x10d4
   14fc0:	movt	r2, #2
   14fc4:	b	13f28 <__assert_fail@plt+0x2708>
   14fc8:	movw	r2, #4684	; 0x124c
   14fcc:	movt	r2, #2
   14fd0:	b	13f28 <__assert_fail@plt+0x2708>
   14fd4:	movw	r2, #4192	; 0x1060
   14fd8:	movt	r2, #2
   14fdc:	b	13f28 <__assert_fail@plt+0x2708>
   14fe0:	movw	r2, #3792	; 0xed0
   14fe4:	movt	r2, #2
   14fe8:	b	13f28 <__assert_fail@plt+0x2708>
   14fec:	movw	r2, #3936	; 0xf60
   14ff0:	movt	r2, #2
   14ff4:	b	13f28 <__assert_fail@plt+0x2708>
   14ff8:	movw	r2, #4560	; 0x11d0
   14ffc:	movt	r2, #2
   15000:	b	13f28 <__assert_fail@plt+0x2708>
   15004:	movw	r2, #3760	; 0xeb0
   15008:	movt	r2, #2
   1500c:	b	13f28 <__assert_fail@plt+0x2708>
   15010:	movw	r2, #4556	; 0x11cc
   15014:	movt	r2, #2
   15018:	b	13f28 <__assert_fail@plt+0x2708>
   1501c:	movw	r2, #4396	; 0x112c
   15020:	movt	r2, #2
   15024:	b	13f28 <__assert_fail@plt+0x2708>
   15028:	movw	r2, #4092	; 0xffc
   1502c:	movt	r2, #2
   15030:	b	13f28 <__assert_fail@plt+0x2708>
   15034:	movw	r2, #3928	; 0xf58
   15038:	movt	r2, #2
   1503c:	b	13f28 <__assert_fail@plt+0x2708>
   15040:	movw	r2, #3852	; 0xf0c
   15044:	movt	r2, #2
   15048:	b	13f28 <__assert_fail@plt+0x2708>
   1504c:	movw	r2, #4248	; 0x1098
   15050:	movt	r2, #2
   15054:	b	13f28 <__assert_fail@plt+0x2708>
   15058:	movw	r2, #4072	; 0xfe8
   1505c:	movt	r2, #2
   15060:	b	13f28 <__assert_fail@plt+0x2708>
   15064:	movw	r2, #3872	; 0xf20
   15068:	movt	r2, #2
   1506c:	b	13f28 <__assert_fail@plt+0x2708>
   15070:	movw	r2, #3896	; 0xf38
   15074:	movt	r2, #2
   15078:	b	13f28 <__assert_fail@plt+0x2708>
   1507c:	movw	r2, #4768	; 0x12a0
   15080:	movt	r2, #2
   15084:	b	13f28 <__assert_fail@plt+0x2708>
   15088:	movw	r2, #4716	; 0x126c
   1508c:	movt	r2, #2
   15090:	b	13f28 <__assert_fail@plt+0x2708>
   15094:	movw	r2, #4148	; 0x1034
   15098:	movt	r2, #2
   1509c:	b	13f28 <__assert_fail@plt+0x2708>
   150a0:	movw	r2, #4620	; 0x120c
   150a4:	movt	r2, #2
   150a8:	b	13f28 <__assert_fail@plt+0x2708>
   150ac:	movw	r2, #4548	; 0x11c4
   150b0:	movt	r2, #2
   150b4:	b	13f28 <__assert_fail@plt+0x2708>
   150b8:	movw	r2, #4428	; 0x114c
   150bc:	movt	r2, #2
   150c0:	b	13f28 <__assert_fail@plt+0x2708>
   150c4:	movw	r2, #4532	; 0x11b4
   150c8:	movt	r2, #2
   150cc:	b	13f28 <__assert_fail@plt+0x2708>
   150d0:	movw	r2, #3844	; 0xf04
   150d4:	movt	r2, #2
   150d8:	b	13f28 <__assert_fail@plt+0x2708>
   150dc:	movw	r2, #4784	; 0x12b0
   150e0:	movt	r2, #2
   150e4:	b	13f28 <__assert_fail@plt+0x2708>
   150e8:	movw	r2, #4276	; 0x10b4
   150ec:	movt	r2, #2
   150f0:	b	13f28 <__assert_fail@plt+0x2708>
   150f4:	movw	r2, #4080	; 0xff0
   150f8:	movt	r2, #2
   150fc:	b	13f28 <__assert_fail@plt+0x2708>
   15100:	movw	r2, #4744	; 0x1288
   15104:	movt	r2, #2
   15108:	b	13f28 <__assert_fail@plt+0x2708>
   1510c:	movw	r2, #3740	; 0xe9c
   15110:	movt	r2, #2
   15114:	b	13f28 <__assert_fail@plt+0x2708>
   15118:	movw	r2, #4404	; 0x1134
   1511c:	movt	r2, #2
   15120:	b	13f28 <__assert_fail@plt+0x2708>
   15124:	movw	r2, #4792	; 0x12b8
   15128:	movt	r2, #2
   1512c:	b	13f28 <__assert_fail@plt+0x2708>
   15130:	movw	r2, #3884	; 0xf2c
   15134:	movt	r2, #2
   15138:	b	13f28 <__assert_fail@plt+0x2708>
   1513c:	movw	r2, #4804	; 0x12c4
   15140:	movt	r2, #2
   15144:	b	13f28 <__assert_fail@plt+0x2708>
   15148:	movw	r2, #4120	; 0x1018
   1514c:	movt	r2, #2
   15150:	b	13f28 <__assert_fail@plt+0x2708>
   15154:	movw	r2, #4000	; 0xfa0
   15158:	movt	r2, #2
   1515c:	b	13f28 <__assert_fail@plt+0x2708>
   15160:	movw	r2, #4220	; 0x107c
   15164:	movt	r2, #2
   15168:	b	13f28 <__assert_fail@plt+0x2708>
   1516c:	movw	r2, #4376	; 0x1118
   15170:	movt	r2, #2
   15174:	b	13f28 <__assert_fail@plt+0x2708>
   15178:	movw	r2, #4760	; 0x1298
   1517c:	movt	r2, #2
   15180:	b	13f28 <__assert_fail@plt+0x2708>
   15184:	movw	r2, #4012	; 0xfac
   15188:	movt	r2, #2
   1518c:	b	13f28 <__assert_fail@plt+0x2708>
   15190:	movw	r2, #4116	; 0x1014
   15194:	movt	r2, #2
   15198:	b	13f28 <__assert_fail@plt+0x2708>
   1519c:	movw	r2, #4032	; 0xfc0
   151a0:	movt	r2, #2
   151a4:	b	13f28 <__assert_fail@plt+0x2708>
   151a8:	movw	r2, #4268	; 0x10ac
   151ac:	movt	r2, #2
   151b0:	b	13f28 <__assert_fail@plt+0x2708>
   151b4:	movw	r2, #4612	; 0x1204
   151b8:	movt	r2, #2
   151bc:	b	13f28 <__assert_fail@plt+0x2708>
   151c0:	movw	r2, #4440	; 0x1158
   151c4:	movt	r2, #2
   151c8:	b	13f28 <__assert_fail@plt+0x2708>
   151cc:	movw	r2, #4580	; 0x11e4
   151d0:	movt	r2, #2
   151d4:	b	13f28 <__assert_fail@plt+0x2708>
   151d8:	movw	r2, #3916	; 0xf4c
   151dc:	movt	r2, #2
   151e0:	b	13f28 <__assert_fail@plt+0x2708>
   151e4:	movw	r2, #4328	; 0x10e8
   151e8:	movt	r2, #2
   151ec:	b	13f28 <__assert_fail@plt+0x2708>
   151f0:	movw	r2, #4124	; 0x101c
   151f4:	movt	r2, #2
   151f8:	b	13f28 <__assert_fail@plt+0x2708>
   151fc:	sub	r3, r7, #1
   15200:	ldrb	r2, [r8], #1
   15204:	cmp	r4, r8
   15208:	strb	r2, [r3, #1]!
   1520c:	bne	15200 <__assert_fail@plt+0x39e0>
   15210:	sub	ip, r4, fp
   15214:	b	14058 <__assert_fail@plt+0x2838>
   15218:	sub	r3, r7, #1
   1521c:	ldrb	r2, [r8], #1
   15220:	cmp	r4, r8
   15224:	strb	r2, [r3, #1]!
   15228:	bne	1521c <__assert_fail@plt+0x39fc>
   1522c:	sub	ip, r4, fp
   15230:	b	13e38 <__assert_fail@plt+0x2618>
   15234:	sub	r3, r7, #1
   15238:	ldrb	r2, [r8], #1
   1523c:	cmp	r4, r8
   15240:	strb	r2, [r3, #1]!
   15244:	bne	15238 <__assert_fail@plt+0x3a18>
   15248:	b	15210 <__assert_fail@plt+0x39f0>
   1524c:	sub	r3, r7, #1
   15250:	ldrb	r2, [r8], #1
   15254:	cmp	r4, r8
   15258:	strb	r2, [r3, #1]!
   1525c:	bne	15250 <__assert_fail@plt+0x3a30>
   15260:	b	15210 <__assert_fail@plt+0x39f0>
   15264:	sub	r2, r7, #1
   15268:	ldrb	r3, [r8], #1
   1526c:	cmp	r4, r8
   15270:	strb	r3, [r2, #1]!
   15274:	bne	15268 <__assert_fail@plt+0x3a48>
   15278:	sub	lr, r4, fp
   1527c:	b	142d4 <__assert_fail@plt+0x2ab4>
   15280:	sub	r3, r7, #1
   15284:	ldrb	r2, [r8], #1
   15288:	cmp	r8, r4
   1528c:	strb	r2, [r3, #1]!
   15290:	bne	15284 <__assert_fail@plt+0x3a64>
   15294:	sub	r8, r8, fp
   15298:	b	141a0 <__assert_fail@plt+0x2980>
   1529c:	movw	r2, #4048	; 0xfd0
   152a0:	movt	r2, #2
   152a4:	b	13f28 <__assert_fail@plt+0x2708>
   152a8:	movw	r2, #4632	; 0x1218
   152ac:	movt	r2, #2
   152b0:	b	13f28 <__assert_fail@plt+0x2708>
   152b4:	movw	r2, #4708	; 0x1264
   152b8:	movt	r2, #2
   152bc:	b	13f28 <__assert_fail@plt+0x2708>
   152c0:	movw	r2, #4040	; 0xfc8
   152c4:	movt	r2, #2
   152c8:	b	13f28 <__assert_fail@plt+0x2708>
   152cc:	movw	r2, #4812	; 0x12cc
   152d0:	movt	r2, #2
   152d4:	b	13f28 <__assert_fail@plt+0x2708>
   152d8:	movw	r2, #4592	; 0x11f0
   152dc:	movt	r2, #2
   152e0:	b	13f28 <__assert_fail@plt+0x2708>
   152e4:	movw	r2, #4056	; 0xfd8
   152e8:	movt	r2, #2
   152ec:	b	13f28 <__assert_fail@plt+0x2708>
   152f0:	movw	r2, #4164	; 0x1044
   152f4:	movt	r2, #2
   152f8:	b	13f28 <__assert_fail@plt+0x2708>
   152fc:	movw	r2, #3724	; 0xe8c
   15300:	movt	r2, #2
   15304:	b	13f28 <__assert_fail@plt+0x2708>
   15308:	movw	r2, #4172	; 0x104c
   1530c:	movt	r2, #2
   15310:	b	13f28 <__assert_fail@plt+0x2708>
   15314:	movw	r2, #3720	; 0xe88
   15318:	movt	r2, #2
   1531c:	b	13f28 <__assert_fail@plt+0x2708>
   15320:	movw	r2, #4108	; 0x100c
   15324:	movt	r2, #2
   15328:	b	13f28 <__assert_fail@plt+0x2708>
   1532c:	movw	r2, #4640	; 0x1220
   15330:	movt	r2, #2
   15334:	b	13f28 <__assert_fail@plt+0x2708>
   15338:	movw	r2, #4088	; 0xff8
   1533c:	movt	r2, #2
   15340:	b	13f28 <__assert_fail@plt+0x2708>
   15344:	movw	r2, #3912	; 0xf48
   15348:	movt	r2, #2
   1534c:	b	13f28 <__assert_fail@plt+0x2708>
   15350:	strd	r4, [sp, #-36]!	; 0xffffffdc
   15354:	mov	r5, r2
   15358:	strd	r6, [sp, #8]
   1535c:	mov	r7, r1
   15360:	movw	r1, #3540	; 0xdd4
   15364:	movt	r1, #2
   15368:	strd	r8, [sp, #16]
   1536c:	strd	sl, [sp, #24]
   15370:	str	lr, [sp, #32]
   15374:	sub	sp, sp, #412	; 0x19c
   15378:	add	r4, sp, #152	; 0x98
   1537c:	str	r0, [sp, #16]
   15380:	bl	1143c <strcmp@plt>
   15384:	subs	r3, r0, #0
   15388:	mov	r2, #256	; 0x100
   1538c:	mov	r0, r4
   15390:	str	r3, [sp, #20]
   15394:	bne	15a40 <__assert_fail@plt+0x4220>
   15398:	mov	r1, r3
   1539c:	movw	r9, #3392	; 0xd40
   153a0:	movt	r9, #2
   153a4:	movw	sl, #12784	; 0x31f0
   153a8:	movt	sl, #3
   153ac:	bl	116ac <memset@plt>
   153b0:	mvn	r3, #0
   153b4:	add	r2, sp, #48	; 0x30
   153b8:	mov	r1, #4096	; 0x1000
   153bc:	strd	r2, [sp, #36]	; 0x24
   153c0:	mov	r2, #12288	; 0x3000
   153c4:	str	r3, [sp, #44]	; 0x2c
   153c8:	mov	r3, #20480	; 0x5000
   153cc:	str	r3, [sp, #24]
   153d0:	str	r1, [sp, #28]
   153d4:	ldrb	r3, [sl, #121]	; 0x79
   153d8:	cmp	r3, #0
   153dc:	bne	153f0 <__assert_fail@plt+0x3bd0>
   153e0:	ldrb	fp, [sl, #122]	; 0x7a
   153e4:	cmp	fp, #0
   153e8:	movne	r1, r2
   153ec:	str	r1, [sp, #24]
   153f0:	ldrb	r1, [r7]
   153f4:	cmp	r1, #0
   153f8:	beq	15c7c <__assert_fail@plt+0x445c>
   153fc:	ldr	r6, [pc, #2252]	; 15cd0 <__assert_fail@plt+0x44b0>
   15400:	mov	r8, r7
   15404:	mov	fp, #0
   15408:	cmp	r1, #37	; 0x25
   1540c:	add	r0, r8, #1
   15410:	bne	15484 <__assert_fail@plt+0x3c64>
   15414:	mov	r1, r6
   15418:	bl	11814 <strspn@plt>
   1541c:	add	r0, r0, #1
   15420:	ldr	r1, [pc, #2220]	; 15cd4 <__assert_fail@plt+0x44b4>
   15424:	add	r8, r8, r0
   15428:	mov	r0, r8
   1542c:	bl	11814 <strspn@plt>
   15430:	ldrb	r3, [r8, r0]
   15434:	add	r8, r8, r0
   15438:	cmp	r3, #46	; 0x2e
   1543c:	bne	15454 <__assert_fail@plt+0x3c34>
   15440:	add	r0, r8, #1
   15444:	ldr	r1, [pc, #2184]	; 15cd4 <__assert_fail@plt+0x44b4>
   15448:	bl	11814 <strspn@plt>
   1544c:	add	r0, r0, #1
   15450:	ldrb	r3, [r8, r0]!
   15454:	cmp	r3, #0
   15458:	beq	15494 <__assert_fail@plt+0x3c74>
   1545c:	sub	r3, r3, #65	; 0x41
   15460:	uxtb	r3, r3
   15464:	cmp	r3, #57	; 0x39
   15468:	bhi	15480 <__assert_fail@plt+0x3c60>
   1546c:	movw	r2, #2484	; 0x9b4
   15470:	movt	r2, #2
   15474:	add	r3, r2, r3, lsl #1
   15478:	ldrh	r3, [r3, #160]	; 0xa0
   1547c:	orr	fp, fp, r3
   15480:	add	r0, r8, #1
   15484:	ldrb	r1, [r8, #1]
   15488:	mov	r8, r0
   1548c:	cmp	r1, #0
   15490:	bne	15408 <__assert_fail@plt+0x3be8>
   15494:	mov	r3, fp
   15498:	mov	r1, r9
   1549c:	str	r4, [sp]
   154a0:	ldr	r0, [sp, #20]
   154a4:	ldr	r2, [sp, #24]
   154a8:	bl	11700 <statx@plt>
   154ac:	subs	r3, r0, #0
   154b0:	str	r3, [sp, #20]
   154b4:	blt	15b60 <__assert_fail@plt+0x4340>
   154b8:	ldr	r6, [sp, #280]	; 0x118
   154bc:	mov	lr, #65280	; 0xff00
   154c0:	movt	lr, #15
   154c4:	mov	r1, #61440	; 0xf000
   154c8:	movt	r1, #65535	; 0xffff
   154cc:	ldr	r3, [sp, #284]	; 0x11c
   154d0:	mov	ip, #0
   154d4:	movt	ip, #65520	; 0xfff0
   154d8:	ldr	r0, [sp, #288]	; 0x120
   154dc:	ldr	r2, [sp, #292]	; 0x124
   154e0:	and	r9, lr, r0, lsl #8
   154e4:	and	r0, r0, r1
   154e8:	and	r1, r1, r6
   154ec:	and	lr, lr, r6, lsl #8
   154f0:	ldrh	r6, [r4, #28]
   154f4:	orr	r1, r1, r3, lsr #20
   154f8:	uxtb	r8, r2
   154fc:	orr	r0, r0, r2, lsr #20
   15500:	orr	r8, r8, r9
   15504:	ldr	r9, [sp, #156]	; 0x9c
   15508:	and	r2, ip, r2, lsl #12
   1550c:	and	ip, ip, r3, lsl #12
   15510:	uxtb	r3, r3
   15514:	orr	r3, r3, lr
   15518:	orr	r2, r2, r8
   1551c:	ldr	r8, [sp, #168]	; 0xa8
   15520:	orr	ip, ip, r3
   15524:	ldr	r3, [sp, #172]	; 0xac
   15528:	str	r2, [sp, #48]	; 0x30
   1552c:	ldr	r2, [r4, #112]	; 0x70
   15530:	str	r6, [sp, #64]	; 0x40
   15534:	and	r6, r6, #45056	; 0xb000
   15538:	cmp	r6, #8192	; 0x2000
   1553c:	ldr	r6, [sp, #176]	; 0xb0
   15540:	movne	r5, r7
   15544:	str	r0, [sp, #52]	; 0x34
   15548:	str	r3, [sp, #72]	; 0x48
   1554c:	str	r8, [sp, #68]	; 0x44
   15550:	ldr	r3, [sp, #272]	; 0x110
   15554:	str	r6, [sp, #76]	; 0x4c
   15558:	str	r9, [sp, #104]	; 0x68
   1555c:	ldrd	r6, [r4, #40]	; 0x28
   15560:	str	ip, [sp, #80]	; 0x50
   15564:	ldrd	r8, [r4, #48]	; 0x30
   15568:	strd	r2, [sp, #128]	; 0x80
   1556c:	ldr	r3, [r4, #64]	; 0x40
   15570:	str	r1, [sp, #84]	; 0x54
   15574:	ldr	lr, [sp, #224]	; 0xe0
   15578:	strd	r6, [sp, #96]	; 0x60
   1557c:	strd	r8, [sp, #112]	; 0x70
   15580:	str	r3, [sp, #120]	; 0x78
   15584:	ldrd	r2, [r4, #32]
   15588:	str	lr, [sp, #124]	; 0x7c
   1558c:	ldr	r1, [sp, #256]	; 0x100
   15590:	strd	r2, [sp, #144]	; 0x90
   15594:	ldr	r2, [sp, #152]	; 0x98
   15598:	str	r1, [sp, #140]	; 0x8c
   1559c:	ldr	r3, [r4, #96]	; 0x60
   155a0:	tst	r2, #2048	; 0x800
   155a4:	str	r3, [sp, #136]	; 0x88
   155a8:	bne	15a94 <__assert_fail@plt+0x4274>
   155ac:	mov	r0, r5
   155b0:	bl	11640 <strlen@plt>
   155b4:	add	r0, r0, #4
   155b8:	bl	1e908 <__assert_fail@plt+0xd0e8>
   155bc:	ldrb	fp, [r5]
   155c0:	mov	r9, r0
   155c4:	cmp	fp, #0
   155c8:	beq	15c84 <__assert_fail@plt+0x4464>
   155cc:	movw	r8, #12772	; 0x31e4
   155d0:	movt	r8, #3
   155d4:	mov	r7, #0
   155d8:	b	15668 <__assert_fail@plt+0x3e48>
   155dc:	cmp	fp, #92	; 0x5c
   155e0:	bne	15638 <__assert_fail@plt+0x3e18>
   155e4:	ldrb	r3, [sl, #123]	; 0x7b
   155e8:	cmp	r3, #0
   155ec:	beq	15638 <__assert_fail@plt+0x3e18>
   155f0:	ldrb	r4, [r5, #1]
   155f4:	sub	r1, r4, #48	; 0x30
   155f8:	uxtb	r3, r1
   155fc:	cmp	r3, #7
   15600:	bls	159e0 <__assert_fail@plt+0x41c0>
   15604:	cmp	r4, #120	; 0x78
   15608:	beq	15968 <__assert_fail@plt+0x4148>
   1560c:	cmp	r4, #0
   15610:	bne	15800 <__assert_fail@plt+0x3fe0>
   15614:	mov	r2, #5
   15618:	movw	r1, #4904	; 0x1328
   1561c:	movt	r1, #2
   15620:	mov	r0, r4
   15624:	bl	114c0 <dcgettext@plt>
   15628:	mov	r2, r0
   1562c:	mov	r1, r4
   15630:	mov	r0, r4
   15634:	bl	11574 <error@plt>
   15638:	ldr	r0, [r8]
   1563c:	ldr	r3, [r0, #20]
   15640:	ldr	r2, [r0, #24]
   15644:	cmp	r3, r2
   15648:	addcc	r2, r3, #1
   1564c:	strcc	r2, [r0, #20]
   15650:	strbcc	fp, [r3]
   15654:	bcs	157f4 <__assert_fail@plt+0x3fd4>
   15658:	ldrb	fp, [r5, #1]
   1565c:	mov	r5, r6
   15660:	cmp	fp, #0
   15664:	beq	15730 <__assert_fail@plt+0x3f10>
   15668:	cmp	fp, #37	; 0x25
   1566c:	add	r6, r5, #1
   15670:	bne	155dc <__assert_fail@plt+0x3dbc>
   15674:	ldr	r1, [pc, #1620]	; 15cd0 <__assert_fail@plt+0x44b0>
   15678:	mov	r0, r6
   1567c:	bl	11814 <strspn@plt>
   15680:	add	r4, r0, #1
   15684:	ldr	r1, [pc, #1608]	; 15cd4 <__assert_fail@plt+0x44b4>
   15688:	add	r4, r5, r4
   1568c:	mov	r0, r4
   15690:	bl	11814 <strspn@plt>
   15694:	ldrb	r3, [r4, r0]
   15698:	add	r4, r4, r0
   1569c:	cmp	r3, #46	; 0x2e
   156a0:	bne	156b8 <__assert_fail@plt+0x3e98>
   156a4:	add	r0, r4, #1
   156a8:	ldr	r1, [pc, #1572]	; 15cd4 <__assert_fail@plt+0x44b4>
   156ac:	bl	11814 <strspn@plt>
   156b0:	add	r0, r0, #1
   156b4:	ldrb	r3, [r4, r0]!
   156b8:	sub	fp, r4, r5
   156bc:	mov	r1, r5
   156c0:	str	r3, [sp, #24]
   156c4:	mov	r2, fp
   156c8:	mov	r0, r9
   156cc:	bl	11490 <memcpy@plt>
   156d0:	ldr	r3, [sp, #24]
   156d4:	cmp	r3, #37	; 0x25
   156d8:	beq	156ec <__assert_fail@plt+0x3ecc>
   156dc:	bhi	157b0 <__assert_fail@plt+0x3f90>
   156e0:	cmp	r3, #0
   156e4:	subeq	r4, r4, #1
   156e8:	bne	15778 <__assert_fail@plt+0x3f58>
   156ec:	cmp	fp, #1
   156f0:	bhi	15c8c <__assert_fail@plt+0x446c>
   156f4:	ldr	r0, [r8]
   156f8:	add	r6, r4, #1
   156fc:	ldr	r3, [r0, #20]
   15700:	ldr	r2, [r0, #24]
   15704:	cmp	r3, r2
   15708:	bcs	15ba0 <__assert_fail@plt+0x4380>
   1570c:	add	r1, r3, #1
   15710:	mov	r2, #37	; 0x25
   15714:	mov	r5, r4
   15718:	str	r1, [r0, #20]
   1571c:	strb	r2, [r3]
   15720:	ldrb	fp, [r5, #1]
   15724:	mov	r5, r6
   15728:	cmp	fp, #0
   1572c:	bne	15668 <__assert_fail@plt+0x3e48>
   15730:	eor	r7, r7, #1
   15734:	mov	r0, r9
   15738:	bl	171c0 <__assert_fail@plt+0x59a0>
   1573c:	movw	r2, #12772	; 0x31e4
   15740:	movt	r2, #3
   15744:	movw	r3, #12672	; 0x3180
   15748:	movt	r3, #3
   1574c:	ldr	r1, [r2]
   15750:	ldr	r0, [r3]
   15754:	bl	11400 <fputs_unlocked@plt>
   15758:	mov	r0, r7
   1575c:	add	sp, sp, #412	; 0x19c
   15760:	ldrd	r4, [sp]
   15764:	ldrd	r6, [sp, #8]
   15768:	ldrd	r8, [sp, #16]
   1576c:	ldrd	sl, [sp, #24]
   15770:	add	sp, sp, #32
   15774:	pop	{pc}		; (ldr pc, [sp], #4)
   15778:	add	r6, r4, #1
   1577c:	mov	r2, #0
   15780:	ldr	ip, [sp, #16]
   15784:	add	r0, sp, #36	; 0x24
   15788:	mov	r5, r4
   1578c:	ldr	r1, [sp, #20]
   15790:	stm	sp, {r1, ip}
   15794:	mov	r1, fp
   15798:	str	r0, [sp, #8]
   1579c:	mov	r0, r9
   157a0:	bl	13168 <__assert_fail@plt+0x1948>
   157a4:	orr	r7, r0, r7
   157a8:	uxtb	r7, r7
   157ac:	b	15658 <__assert_fail@plt+0x3e38>
   157b0:	cmp	r3, #72	; 0x48
   157b4:	beq	157c0 <__assert_fail@plt+0x3fa0>
   157b8:	cmp	r3, #76	; 0x4c
   157bc:	bne	15778 <__assert_fail@plt+0x3f58>
   157c0:	mov	r6, r4
   157c4:	ldrb	r1, [r6, #1]!
   157c8:	cmp	r1, #114	; 0x72
   157cc:	cmpne	r1, #100	; 0x64
   157d0:	moveq	r2, #1
   157d4:	movne	r2, #0
   157d8:	bne	15780 <__assert_fail@plt+0x3f60>
   157dc:	add	r0, r4, #2
   157e0:	mov	r2, r3
   157e4:	mov	r4, r6
   157e8:	mov	r3, r1
   157ec:	mov	r6, r0
   157f0:	b	15780 <__assert_fail@plt+0x3f60>
   157f4:	mov	r1, fp
   157f8:	bl	11724 <__overflow@plt>
   157fc:	b	15658 <__assert_fail@plt+0x3e38>
   15800:	sub	r3, r4, #34	; 0x22
   15804:	mov	fp, r4
   15808:	cmp	r3, #84	; 0x54
   1580c:	ldrls	pc, [pc, r3, lsl #2]
   15810:	b	15988 <__assert_fail@plt+0x4168>
   15814:			; <UNDEFINED> instruction: 0x000159b0
   15818:	andeq	r5, r1, r8, lsl #19
   1581c:	andeq	r5, r1, r8, lsl #19
   15820:	andeq	r5, r1, r8, lsl #19
   15824:	andeq	r5, r1, r8, lsl #19
   15828:	andeq	r5, r1, r8, lsl #19
   1582c:	andeq	r5, r1, r8, lsl #19
   15830:	andeq	r5, r1, r8, lsl #19
   15834:	andeq	r5, r1, r8, lsl #19
   15838:	andeq	r5, r1, r8, lsl #19
   1583c:	andeq	r5, r1, r8, lsl #19
   15840:	andeq	r5, r1, r8, lsl #19
   15844:	andeq	r5, r1, r8, lsl #19
   15848:	andeq	r5, r1, r8, lsl #19
   1584c:	andeq	r5, r1, r8, lsl #19
   15850:	andeq	r5, r1, r8, lsl #19
   15854:	andeq	r5, r1, r8, lsl #19
   15858:	andeq	r5, r1, r8, lsl #19
   1585c:	andeq	r5, r1, r8, lsl #19
   15860:	andeq	r5, r1, r8, lsl #19
   15864:	andeq	r5, r1, r8, lsl #19
   15868:	andeq	r5, r1, r8, lsl #19
   1586c:	andeq	r5, r1, r8, lsl #19
   15870:	andeq	r5, r1, r8, lsl #19
   15874:	andeq	r5, r1, r8, lsl #19
   15878:	andeq	r5, r1, r8, lsl #19
   1587c:	andeq	r5, r1, r8, lsl #19
   15880:	andeq	r5, r1, r8, lsl #19
   15884:	andeq	r5, r1, r8, lsl #19
   15888:	andeq	r5, r1, r8, lsl #19
   1588c:	andeq	r5, r1, r8, lsl #19
   15890:	andeq	r5, r1, r8, lsl #19
   15894:	andeq	r5, r1, r8, lsl #19
   15898:	andeq	r5, r1, r8, lsl #19
   1589c:	andeq	r5, r1, r8, lsl #19
   158a0:	andeq	r5, r1, r8, lsl #19
   158a4:	andeq	r5, r1, r8, lsl #19
   158a8:	andeq	r5, r1, r8, lsl #19
   158ac:	andeq	r5, r1, r8, lsl #19
   158b0:	andeq	r5, r1, r8, lsl #19
   158b4:	andeq	r5, r1, r8, lsl #19
   158b8:	andeq	r5, r1, r8, lsl #19
   158bc:	andeq	r5, r1, r8, lsl #19
   158c0:	andeq	r5, r1, r8, lsl #19
   158c4:	andeq	r5, r1, r8, lsl #19
   158c8:	andeq	r5, r1, r8, lsl #19
   158cc:	andeq	r5, r1, r8, lsl #19
   158d0:	andeq	r5, r1, r8, lsl #19
   158d4:	andeq	r5, r1, r8, lsl #19
   158d8:	andeq	r5, r1, r8, lsl #19
   158dc:	andeq	r5, r1, r8, lsl #19
   158e0:	andeq	r5, r1, r8, lsl #19
   158e4:	andeq	r5, r1, r8, lsl #19
   158e8:	andeq	r5, r1, r8, lsl #19
   158ec:	andeq	r5, r1, r8, lsl #19
   158f0:	andeq	r5, r1, r8, lsl #19
   158f4:	andeq	r5, r1, r8, lsl #19
   158f8:	andeq	r5, r1, r8, lsl #19
   158fc:			; <UNDEFINED> instruction: 0x000159b0
   15900:	andeq	r5, r1, r8, lsl #19
   15904:	andeq	r5, r1, r8, lsl #19
   15908:	andeq	r5, r1, r8, lsl #19
   1590c:	andeq	r5, r1, r8, lsl #19
   15910:	strdeq	r5, [r1], -r4
   15914:	andeq	r5, r1, r0, lsl #24
   15918:	andeq	r5, r1, r8, lsl #19
   1591c:	andeq	r5, r1, r8, lsl #19
   15920:	andeq	r5, r1, ip, lsl #24
   15924:	andeq	r5, r1, r8, lsl ip
   15928:	andeq	r5, r1, r8, lsl #19
   1592c:	andeq	r5, r1, r8, lsl #19
   15930:	andeq	r5, r1, r8, lsl #19
   15934:	andeq	r5, r1, r8, lsl #19
   15938:	andeq	r5, r1, r8, lsl #19
   1593c:	andeq	r5, r1, r8, lsl #19
   15940:	andeq	r5, r1, r8, lsl #19
   15944:	andeq	r5, r1, r4, lsr #24
   15948:	andeq	r5, r1, r8, lsl #19
   1594c:	andeq	r5, r1, r8, lsl #19
   15950:	andeq	r5, r1, r8, lsl #19
   15954:	andeq	r5, r1, r0, lsr ip
   15958:	andeq	r5, r1, r8, lsl #19
   1595c:	andeq	r5, r1, ip, lsr ip
   15960:	andeq	r5, r1, r8, lsl #19
   15964:	andeq	r5, r1, r8, asr #24
   15968:	bl	11610 <__ctype_b_loc@plt>
   1596c:	ldrb	r1, [r5, #2]
   15970:	ldr	r3, [r0]
   15974:	lsl	r2, r1, #1
   15978:	ldrh	r2, [r3, r2]
   1597c:	tst	r2, #4096	; 0x1000
   15980:	bne	15aa4 <__assert_fail@plt+0x4284>
   15984:	mov	fp, r4
   15988:	mov	r2, #5
   1598c:	movw	r1, #4940	; 0x134c
   15990:	movt	r1, #2
   15994:	mov	r0, #0
   15998:	bl	114c0 <dcgettext@plt>
   1599c:	mov	r1, #0
   159a0:	mov	r2, r0
   159a4:	mov	r3, r4
   159a8:	mov	r0, r1
   159ac:	bl	11574 <error@plt>
   159b0:	ldr	r0, [r8]
   159b4:	add	r3, r5, #2
   159b8:	ldr	r2, [r0, #20]
   159bc:	ldr	r1, [r0, #24]
   159c0:	cmp	r2, r1
   159c4:	bcs	15c54 <__assert_fail@plt+0x4434>
   159c8:	add	r1, r2, #1
   159cc:	mov	r5, r6
   159d0:	mov	r6, r3
   159d4:	str	r1, [r0, #20]
   159d8:	strb	r4, [r2]
   159dc:	b	15658 <__assert_fail@plt+0x3e38>
   159e0:	ldrb	r3, [r5, #2]
   159e4:	sub	r3, r3, #48	; 0x30
   159e8:	uxtb	r2, r3
   159ec:	cmp	r2, #7
   159f0:	addhi	r6, r5, #2
   159f4:	bhi	15a18 <__assert_fail@plt+0x41f8>
   159f8:	ldrb	r2, [r5, #3]
   159fc:	add	r1, r3, r1, lsl #3
   15a00:	sub	r3, r2, #48	; 0x30
   15a04:	uxtb	r2, r3
   15a08:	cmp	r2, #7
   15a0c:	addls	r1, r3, r1, lsl #3
   15a10:	addhi	r6, r5, #3
   15a14:	addls	r6, r5, #4
   15a18:	ldr	r0, [r8]
   15a1c:	ldr	r3, [r0, #20]
   15a20:	ldr	r2, [r0, #24]
   15a24:	cmp	r3, r2
   15a28:	addcc	r2, r3, #1
   15a2c:	strcc	r2, [r0, #20]
   15a30:	strbcc	r1, [r3]
   15a34:	bcs	15c70 <__assert_fail@plt+0x4450>
   15a38:	sub	r5, r6, #1
   15a3c:	b	15658 <__assert_fail@plt+0x3e38>
   15a40:	mov	r1, #0
   15a44:	movw	sl, #12784	; 0x31f0
   15a48:	movt	sl, #3
   15a4c:	bl	116ac <memset@plt>
   15a50:	ldrb	r2, [sl, #96]	; 0x60
   15a54:	mvn	r3, #0
   15a58:	add	r1, sp, #48	; 0x30
   15a5c:	str	r1, [sp, #36]	; 0x24
   15a60:	str	r3, [sp, #40]	; 0x28
   15a64:	str	r3, [sp, #44]	; 0x2c
   15a68:	cmp	r2, #0
   15a6c:	bne	15b38 <__assert_fail@plt+0x4318>
   15a70:	mov	r3, #16640	; 0x4100
   15a74:	mov	r1, #256	; 0x100
   15a78:	ldr	r9, [sp, #16]
   15a7c:	str	r3, [sp, #24]
   15a80:	mvn	r3, #99	; 0x63
   15a84:	str	r3, [sp, #20]
   15a88:	str	r2, [sp, #28]
   15a8c:	mov	r2, #8448	; 0x2100
   15a90:	b	153d4 <__assert_fail@plt+0x3bb4>
   15a94:	ldr	r2, [r4, #80]	; 0x50
   15a98:	ldr	r3, [sp, #240]	; 0xf0
   15a9c:	strd	r2, [sp, #40]	; 0x28
   15aa0:	b	155ac <__assert_fail@plt+0x3d8c>
   15aa4:	sub	r2, r1, #97	; 0x61
   15aa8:	cmp	r2, #5
   15aac:	subls	r1, r1, #87	; 0x57
   15ab0:	bls	15ac4 <__assert_fail@plt+0x42a4>
   15ab4:	sub	r2, r1, #65	; 0x41
   15ab8:	cmp	r2, #5
   15abc:	subls	r1, r1, #55	; 0x37
   15ac0:	subhi	r1, r1, #48	; 0x30
   15ac4:	ldrb	r2, [r5, #3]
   15ac8:	lsl	r0, r2, #1
   15acc:	ldrh	r3, [r3, r0]
   15ad0:	tst	r3, #4096	; 0x1000
   15ad4:	addeq	r5, r5, #2
   15ad8:	beq	15b08 <__assert_fail@plt+0x42e8>
   15adc:	sub	r3, r2, #97	; 0x61
   15ae0:	add	r5, r5, #3
   15ae4:	lsl	r1, r1, #4
   15ae8:	cmp	r3, #5
   15aec:	subls	r2, r2, #87	; 0x57
   15af0:	bls	15b04 <__assert_fail@plt+0x42e4>
   15af4:	sub	r3, r2, #65	; 0x41
   15af8:	cmp	r3, #5
   15afc:	subls	r2, r2, #55	; 0x37
   15b00:	subhi	r2, r2, #48	; 0x30
   15b04:	add	r1, r1, r2
   15b08:	ldr	r0, [r8]
   15b0c:	add	r6, r5, #1
   15b10:	ldr	r3, [r0, #20]
   15b14:	ldr	r2, [r0, #24]
   15b18:	cmp	r3, r2
   15b1c:	addcc	r2, r3, #1
   15b20:	strcc	r2, [r0, #20]
   15b24:	strbcc	r1, [r3]
   15b28:	bcc	15658 <__assert_fail@plt+0x3e38>
   15b2c:	uxtb	r1, r1
   15b30:	bl	11724 <__overflow@plt>
   15b34:	b	15658 <__assert_fail@plt+0x3e38>
   15b38:	mov	r3, #0
   15b3c:	mov	r2, #8192	; 0x2000
   15b40:	ldr	r9, [sp, #16]
   15b44:	mov	r1, r3
   15b48:	str	r3, [sp, #28]
   15b4c:	mov	r3, #16384	; 0x4000
   15b50:	str	r3, [sp, #24]
   15b54:	mvn	r3, #99	; 0x63
   15b58:	str	r3, [sp, #20]
   15b5c:	b	153d4 <__assert_fail@plt+0x3bb4>
   15b60:	bl	1167c <__errno_location@plt>
   15b64:	ldr	r3, [sp, #28]
   15b68:	ldr	r4, [r0]
   15b6c:	cmp	r3, #0
   15b70:	beq	15bb0 <__assert_fail@plt+0x4390>
   15b74:	mov	r2, #5
   15b78:	movw	r1, #4836	; 0x12e4
   15b7c:	movt	r1, #2
   15b80:	mov	r0, #0
   15b84:	bl	114c0 <dcgettext@plt>
   15b88:	mov	r2, r0
   15b8c:	mov	r1, r4
   15b90:	mov	r0, #0
   15b94:	mov	r7, r0
   15b98:	bl	11574 <error@plt>
   15b9c:	b	15758 <__assert_fail@plt+0x3f38>
   15ba0:	mov	r1, #37	; 0x25
   15ba4:	mov	r5, r4
   15ba8:	bl	11724 <__overflow@plt>
   15bac:	b	15658 <__assert_fail@plt+0x3e38>
   15bb0:	mov	r2, #5
   15bb4:	mov	r0, r3
   15bb8:	movw	r1, #4864	; 0x1300
   15bbc:	movt	r1, #2
   15bc0:	mov	r6, r3
   15bc4:	bl	114c0 <dcgettext@plt>
   15bc8:	mov	r5, r0
   15bcc:	mov	r0, #4
   15bd0:	ldr	r1, [sp, #16]
   15bd4:	bl	1c468 <__assert_fail@plt+0xac48>
   15bd8:	mov	r3, r0
   15bdc:	mov	r2, r5
   15be0:	mov	r1, r4
   15be4:	mov	r0, r6
   15be8:	mov	r7, r6
   15bec:	bl	11574 <error@plt>
   15bf0:	b	15758 <__assert_fail@plt+0x3f38>
   15bf4:	mov	fp, #7
   15bf8:	mov	r4, fp
   15bfc:	b	159b0 <__assert_fail@plt+0x4190>
   15c00:	mov	fp, #8
   15c04:	mov	r4, fp
   15c08:	b	159b0 <__assert_fail@plt+0x4190>
   15c0c:	mov	fp, #27
   15c10:	mov	r4, fp
   15c14:	b	159b0 <__assert_fail@plt+0x4190>
   15c18:	mov	fp, #12
   15c1c:	mov	r4, fp
   15c20:	b	159b0 <__assert_fail@plt+0x4190>
   15c24:	mov	fp, #10
   15c28:	mov	r4, fp
   15c2c:	b	159b0 <__assert_fail@plt+0x4190>
   15c30:	mov	fp, #13
   15c34:	mov	r4, fp
   15c38:	b	159b0 <__assert_fail@plt+0x4190>
   15c3c:	mov	fp, #9
   15c40:	mov	r4, fp
   15c44:	b	159b0 <__assert_fail@plt+0x4190>
   15c48:	mov	fp, #11
   15c4c:	mov	r4, fp
   15c50:	b	159b0 <__assert_fail@plt+0x4190>
   15c54:	mov	r1, fp
   15c58:	str	r3, [sp, #24]
   15c5c:	mov	r5, r6
   15c60:	bl	11724 <__overflow@plt>
   15c64:	ldr	r3, [sp, #24]
   15c68:	mov	r6, r3
   15c6c:	b	15658 <__assert_fail@plt+0x3e38>
   15c70:	uxtb	r1, r1
   15c74:	bl	11724 <__overflow@plt>
   15c78:	b	15a38 <__assert_fail@plt+0x4218>
   15c7c:	mov	fp, r1
   15c80:	b	15494 <__assert_fail@plt+0x3c74>
   15c84:	mov	r7, #1
   15c88:	b	15734 <__assert_fail@plt+0x3f14>
   15c8c:	mov	ip, r9
   15c90:	mov	r4, #0
   15c94:	mov	r2, #5
   15c98:	mov	r0, r4
   15c9c:	movw	r1, #4880	; 0x1310
   15ca0:	movt	r1, #2
   15ca4:	strb	r3, [ip, fp]!
   15ca8:	strb	r4, [ip, #1]
   15cac:	bl	114c0 <dcgettext@plt>
   15cb0:	mov	r5, r0
   15cb4:	mov	r0, r9
   15cb8:	bl	1d794 <__assert_fail@plt+0xbf74>
   15cbc:	mov	r3, r0
   15cc0:	mov	r2, r5
   15cc4:	mov	r1, r4
   15cc8:	mov	r0, #1
   15ccc:	bl	11574 <error@plt>
   15cd0:	andeq	r0, r2, r0, asr #20
   15cd4:	andeq	r0, r2, r8, asr #20
   15cd8:	subs	r6, r0, #0
   15cdc:	str	r7, [sp, #-8]!
   15ce0:	str	lr, [sp, #4]
   15ce4:	sub	sp, sp, #56	; 0x38
   15ce8:	beq	15d30 <__assert_fail@plt+0x4510>
   15cec:	movw	r3, #12768	; 0x31e0
   15cf0:	movt	r3, #3
   15cf4:	ldr	r4, [r3]
   15cf8:	mov	r2, #5
   15cfc:	movw	r1, #4984	; 0x1378
   15d00:	movt	r1, #2
   15d04:	mov	r0, #0
   15d08:	bl	114c0 <dcgettext@plt>
   15d0c:	movw	r3, #12916	; 0x3274
   15d10:	movt	r3, #3
   15d14:	mov	r2, r0
   15d18:	mov	r1, #1
   15d1c:	ldr	r3, [r3]
   15d20:	mov	r0, r4
   15d24:	bl	116d0 <__fprintf_chk@plt>
   15d28:	mov	r0, r6
   15d2c:	bl	11628 <exit@plt>
   15d30:	mov	r2, #5
   15d34:	movw	r1, #5024	; 0x13a0
   15d38:	movt	r1, #2
   15d3c:	movw	r7, #12772	; 0x31e4
   15d40:	movt	r7, #3
   15d44:	bl	114c0 <dcgettext@plt>
   15d48:	movw	r3, #12916	; 0x3274
   15d4c:	movt	r3, #3
   15d50:	mov	r1, r0
   15d54:	mov	r0, #1
   15d58:	ldr	r2, [r3]
   15d5c:	bl	116b8 <__printf_chk@plt>
   15d60:	mov	r2, #5
   15d64:	movw	r1, #5056	; 0x13c0
   15d68:	movt	r1, #2
   15d6c:	mov	r0, r6
   15d70:	bl	114c0 <dcgettext@plt>
   15d74:	ldr	r1, [r7]
   15d78:	bl	11400 <fputs_unlocked@plt>
   15d7c:	mov	r2, #5
   15d80:	movw	r1, #5096	; 0x13e8
   15d84:	movt	r1, #2
   15d88:	mov	r0, r6
   15d8c:	bl	114c0 <dcgettext@plt>
   15d90:	ldr	r1, [r7]
   15d94:	bl	11400 <fputs_unlocked@plt>
   15d98:	mov	r2, #5
   15d9c:	movw	r1, #5172	; 0x1434
   15da0:	movt	r1, #2
   15da4:	mov	r0, r6
   15da8:	bl	114c0 <dcgettext@plt>
   15dac:	ldr	r1, [r7]
   15db0:	bl	11400 <fputs_unlocked@plt>
   15db4:	mov	r2, #5
   15db8:	movw	r1, #5284	; 0x14a4
   15dbc:	movt	r1, #2
   15dc0:	mov	r0, r6
   15dc4:	bl	114c0 <dcgettext@plt>
   15dc8:	ldr	r1, [r7]
   15dcc:	bl	11400 <fputs_unlocked@plt>
   15dd0:	mov	r2, #5
   15dd4:	movw	r1, #5420	; 0x152c
   15dd8:	movt	r1, #2
   15ddc:	mov	r0, r6
   15de0:	bl	114c0 <dcgettext@plt>
   15de4:	ldr	r1, [r7]
   15de8:	bl	11400 <fputs_unlocked@plt>
   15dec:	mov	r2, #5
   15df0:	movw	r1, #5840	; 0x16d0
   15df4:	movt	r1, #2
   15df8:	mov	r0, r6
   15dfc:	bl	114c0 <dcgettext@plt>
   15e00:	ldr	r1, [r7]
   15e04:	bl	11400 <fputs_unlocked@plt>
   15e08:	mov	r2, #5
   15e0c:	movw	r1, #5888	; 0x1700
   15e10:	movt	r1, #2
   15e14:	mov	r0, r6
   15e18:	bl	114c0 <dcgettext@plt>
   15e1c:	ldr	r1, [r7]
   15e20:	bl	11400 <fputs_unlocked@plt>
   15e24:	mov	r2, #5
   15e28:	movw	r1, #5944	; 0x1738
   15e2c:	movt	r1, #2
   15e30:	mov	r0, r6
   15e34:	bl	114c0 <dcgettext@plt>
   15e38:	ldr	r1, [r7]
   15e3c:	bl	11400 <fputs_unlocked@plt>
   15e40:	mov	r2, #5
   15e44:	movw	r1, #6192	; 0x1830
   15e48:	movt	r1, #2
   15e4c:	mov	r0, r6
   15e50:	bl	114c0 <dcgettext@plt>
   15e54:	ldr	r1, [r7]
   15e58:	bl	11400 <fputs_unlocked@plt>
   15e5c:	mov	r2, #5
   15e60:	movw	r1, #6520	; 0x1978
   15e64:	movt	r1, #2
   15e68:	mov	r0, r6
   15e6c:	bl	114c0 <dcgettext@plt>
   15e70:	ldr	r1, [r7]
   15e74:	bl	11400 <fputs_unlocked@plt>
   15e78:	mov	r2, #5
   15e7c:	movw	r1, #6768	; 0x1a70
   15e80:	movt	r1, #2
   15e84:	mov	r0, r6
   15e88:	bl	114c0 <dcgettext@plt>
   15e8c:	ldr	r1, [r7]
   15e90:	bl	11400 <fputs_unlocked@plt>
   15e94:	mov	r2, #5
   15e98:	movw	r1, #7360	; 0x1cc0
   15e9c:	movt	r1, #2
   15ea0:	mov	r0, r6
   15ea4:	bl	114c0 <dcgettext@plt>
   15ea8:	ldr	r1, [r7]
   15eac:	bl	11400 <fputs_unlocked@plt>
   15eb0:	mov	r2, #5
   15eb4:	movw	r1, #7840	; 0x1ea0
   15eb8:	movt	r1, #2
   15ebc:	mov	r0, r6
   15ec0:	bl	114c0 <dcgettext@plt>
   15ec4:	ldr	r1, [r7]
   15ec8:	bl	11400 <fputs_unlocked@plt>
   15ecc:	mov	r2, #5
   15ed0:	movw	r1, #8080	; 0x1f90
   15ed4:	movt	r1, #2
   15ed8:	mov	r0, r6
   15edc:	bl	114c0 <dcgettext@plt>
   15ee0:	ldr	r1, [r7]
   15ee4:	bl	11400 <fputs_unlocked@plt>
   15ee8:	mov	r2, #5
   15eec:	movw	r1, #8332	; 0x208c
   15ef0:	movt	r1, #2
   15ef4:	mov	r0, r6
   15ef8:	bl	114c0 <dcgettext@plt>
   15efc:	mov	r1, r0
   15f00:	ldr	r2, [pc, #652]	; 16194 <__assert_fail@plt+0x4974>
   15f04:	mov	r0, #1
   15f08:	bl	116b8 <__printf_chk@plt>
   15f0c:	mov	r2, #5
   15f10:	movw	r1, #8388	; 0x20c4
   15f14:	movt	r1, #2
   15f18:	mov	r0, r6
   15f1c:	bl	114c0 <dcgettext@plt>
   15f20:	mov	r1, r0
   15f24:	movw	r2, #2484	; 0x9b4
   15f28:	movt	r2, #2
   15f2c:	mov	r0, #1
   15f30:	bl	116b8 <__printf_chk@plt>
   15f34:	mov	r2, #5
   15f38:	movw	r1, #8456	; 0x2108
   15f3c:	movt	r1, #2
   15f40:	mov	r0, r6
   15f44:	bl	114c0 <dcgettext@plt>
   15f48:	mov	r1, r0
   15f4c:	movw	r2, #4976	; 0x1370
   15f50:	movt	r2, #2
   15f54:	mov	r0, #1
   15f58:	bl	116b8 <__printf_chk@plt>
   15f5c:	ldr	lr, [pc, #564]	; 16198 <__assert_fail@plt+0x4978>
   15f60:	ldr	ip, [lr]
   15f64:	ldr	r4, [lr, #4]
   15f68:	ldrd	r8, [lr, #8]
   15f6c:	subs	r1, ip, #0
   15f70:	str	ip, [sp]
   15f74:	ldrd	r2, [lr, #16]
   15f78:	str	r4, [sp, #4]
   15f7c:	ldrd	r4, [lr, #24]
   15f80:	strd	r8, [sp, #8]
   15f84:	ldrd	r8, [lr, #32]
   15f88:	strd	r2, [sp, #16]
   15f8c:	ldrd	r2, [lr, #40]	; 0x28
   15f90:	strd	r4, [sp, #24]
   15f94:	ldrd	r4, [lr, #48]	; 0x30
   15f98:	strd	r8, [sp, #32]
   15f9c:	strd	r2, [sp, #40]	; 0x28
   15fa0:	strd	r4, [sp, #48]	; 0x30
   15fa4:	movwne	r5, #4976	; 0x1370
   15fa8:	mov	r4, sp
   15fac:	movtne	r5, #2
   15fb0:	bne	160a8 <__assert_fail@plt+0x4888>
   15fb4:	ldr	r4, [r4, #4]
   15fb8:	movw	r1, #8648	; 0x21c8
   15fbc:	movt	r1, #2
   15fc0:	mov	r2, #5
   15fc4:	cmp	r4, #0
   15fc8:	beq	160bc <__assert_fail@plt+0x489c>
   15fcc:	mov	r0, #0
   15fd0:	bl	114c0 <dcgettext@plt>
   15fd4:	mov	r1, r0
   15fd8:	movw	r3, #8672	; 0x21e0
   15fdc:	movt	r3, #2
   15fe0:	movw	r2, #8712	; 0x2208
   15fe4:	movt	r2, #2
   15fe8:	mov	r0, #1
   15fec:	bl	116b8 <__printf_chk@plt>
   15ff0:	mov	r1, #0
   15ff4:	mov	r0, #5
   15ff8:	bl	11730 <setlocale@plt>
   15ffc:	cmp	r0, #0
   16000:	movweq	r5, #4976	; 0x1370
   16004:	movteq	r5, #2
   16008:	beq	1602c <__assert_fail@plt+0x480c>
   1600c:	movw	r1, #8728	; 0x2218
   16010:	movt	r1, #2
   16014:	mov	r2, #3
   16018:	movw	r5, #4976	; 0x1370
   1601c:	movt	r5, #2
   16020:	bl	117e4 <strncmp@plt>
   16024:	cmp	r0, #0
   16028:	bne	16174 <__assert_fail@plt+0x4954>
   1602c:	mov	r2, #5
   16030:	movw	r1, #8804	; 0x2264
   16034:	movt	r1, #2
   16038:	mov	r0, #0
   1603c:	bl	114c0 <dcgettext@plt>
   16040:	mov	r1, r0
   16044:	movw	r3, #4976	; 0x1370
   16048:	movt	r3, #2
   1604c:	movw	r2, #8672	; 0x21e0
   16050:	movt	r2, #2
   16054:	mov	r0, #1
   16058:	bl	116b8 <__printf_chk@plt>
   1605c:	mov	r2, #5
   16060:	movw	r1, #8832	; 0x2280
   16064:	movt	r1, #2
   16068:	mov	r0, #0
   1606c:	bl	114c0 <dcgettext@plt>
   16070:	movw	r2, #9172	; 0x23d4
   16074:	movt	r2, #2
   16078:	cmp	r4, r5
   1607c:	movw	r3, #3392	; 0xd40
   16080:	movt	r3, #2
   16084:	mov	r1, r0
   16088:	moveq	r3, r2
   1608c:	mov	r2, r4
   16090:	mov	r0, #1
   16094:	bl	116b8 <__printf_chk@plt>
   16098:	b	15d28 <__assert_fail@plt+0x4508>
   1609c:	ldr	r1, [r4, #8]!
   160a0:	cmp	r1, #0
   160a4:	beq	15fb4 <__assert_fail@plt+0x4794>
   160a8:	mov	r0, r5
   160ac:	bl	1143c <strcmp@plt>
   160b0:	cmp	r0, #0
   160b4:	bne	1609c <__assert_fail@plt+0x487c>
   160b8:	b	15fb4 <__assert_fail@plt+0x4794>
   160bc:	mov	r0, r4
   160c0:	bl	114c0 <dcgettext@plt>
   160c4:	mov	r1, r0
   160c8:	movw	r3, #8672	; 0x21e0
   160cc:	movt	r3, #2
   160d0:	movw	r2, #8712	; 0x2208
   160d4:	movt	r2, #2
   160d8:	mov	r0, #1
   160dc:	bl	116b8 <__printf_chk@plt>
   160e0:	mov	r1, r4
   160e4:	mov	r0, #5
   160e8:	bl	11730 <setlocale@plt>
   160ec:	cmp	r0, #0
   160f0:	beq	1610c <__assert_fail@plt+0x48ec>
   160f4:	movw	r1, #8728	; 0x2218
   160f8:	movt	r1, #2
   160fc:	mov	r2, #3
   16100:	bl	117e4 <strncmp@plt>
   16104:	cmp	r0, #0
   16108:	bne	16168 <__assert_fail@plt+0x4948>
   1610c:	mov	r2, #5
   16110:	movw	r1, #8804	; 0x2264
   16114:	movt	r1, #2
   16118:	mov	r0, #0
   1611c:	bl	114c0 <dcgettext@plt>
   16120:	mov	r1, r0
   16124:	movw	r3, #4976	; 0x1370
   16128:	movt	r3, #2
   1612c:	movw	r2, #8672	; 0x21e0
   16130:	movt	r2, #2
   16134:	mov	r0, #1
   16138:	bl	116b8 <__printf_chk@plt>
   1613c:	movw	r1, #8832	; 0x2280
   16140:	movt	r1, #2
   16144:	mov	r2, #5
   16148:	mov	r0, #0
   1614c:	bl	114c0 <dcgettext@plt>
   16150:	movw	r4, #4976	; 0x1370
   16154:	movt	r4, #2
   16158:	movw	r3, #9172	; 0x23d4
   1615c:	movt	r3, #2
   16160:	mov	r1, r0
   16164:	b	1608c <__assert_fail@plt+0x486c>
   16168:	movw	r5, #4976	; 0x1370
   1616c:	movt	r5, #2
   16170:	mov	r4, r5
   16174:	mov	r2, #5
   16178:	movw	r1, #8732	; 0x221c
   1617c:	movt	r1, #2
   16180:	mov	r0, #0
   16184:	bl	114c0 <dcgettext@plt>
   16188:	ldr	r1, [r7]
   1618c:	bl	11400 <fputs_unlocked@plt>
   16190:	b	1602c <__assert_fail@plt+0x480c>
   16194:	ldrdeq	r0, [r2], -r8
   16198:	andeq	r0, r2, r8, asr #21
   1619c:	strd	r4, [sp, #-32]!	; 0xffffffe0
   161a0:	strd	r6, [sp, #8]
   161a4:	mov	r7, r1
   161a8:	strd	r8, [sp, #16]
   161ac:	mov	r8, r0
   161b0:	str	fp, [sp, #24]
   161b4:	add	fp, sp, #28
   161b8:	str	lr, [sp, #28]
   161bc:	sub	sp, sp, #216	; 0xd8
   161c0:	sub	r0, fp, #244	; 0xf4
   161c4:	bl	1d928 <__assert_fail@plt+0xc108>
   161c8:	mov	r4, r0
   161cc:	bl	1167c <__errno_location@plt>
   161d0:	cmp	r4, #0
   161d4:	mov	r6, r0
   161d8:	bne	16408 <__assert_fail@plt+0x4be8>
   161dc:	ldr	r3, [r7, #16]
   161e0:	and	r3, r3, #61440	; 0xf000
   161e4:	cmp	r3, #16384	; 0x4000
   161e8:	beq	16350 <__assert_fail@plt+0x4b30>
   161ec:	mov	r0, r8
   161f0:	bl	16c38 <__assert_fail@plt+0x5418>
   161f4:	mov	r5, r0
   161f8:	bl	11640 <strlen@plt>
   161fc:	add	r3, r0, #8
   16200:	add	r2, r0, #1
   16204:	bic	r3, r3, #7
   16208:	mov	r1, r5
   1620c:	sub	sp, sp, r3
   16210:	mov	r0, sp
   16214:	bl	11490 <memcpy@plt>
   16218:	mov	r7, r0
   1621c:	mov	r0, r5
   16220:	bl	171c0 <__assert_fail@plt+0x59a0>
   16224:	mov	r0, r7
   16228:	bl	114fc <chdir@plt>
   1622c:	cmp	r0, #0
   16230:	blt	16438 <__assert_fail@plt+0x4c18>
   16234:	sub	r5, fp, #236	; 0xec
   16238:	movw	r1, #8884	; 0x22b4
   1623c:	movt	r1, #2
   16240:	mov	r2, r5
   16244:	mov	r0, #3
   16248:	bl	117cc <__xstat64@plt>
   1624c:	cmp	r0, #0
   16250:	blt	163b8 <__assert_fail@plt+0x4b98>
   16254:	movw	r4, #9472	; 0x2500
   16258:	movt	r4, #2
   1625c:	b	162a8 <__assert_fail@plt+0x4a88>
   16260:	ldrd	r2, [fp, #-236]	; 0xffffff14
   16264:	ldrd	r0, [fp, #-132]	; 0xffffff7c
   16268:	cmp	r1, r3
   1626c:	cmpeq	r0, r2
   16270:	bne	16308 <__assert_fail@plt+0x4ae8>
   16274:	ldrd	r2, [fp, #-140]	; 0xffffff74
   16278:	ldrd	r0, [fp, #-36]	; 0xffffffdc
   1627c:	cmp	r1, r3
   16280:	cmpeq	r0, r2
   16284:	beq	16308 <__assert_fail@plt+0x4ae8>
   16288:	mov	r0, r4
   1628c:	bl	114fc <chdir@plt>
   16290:	cmp	r0, #0
   16294:	blt	163fc <__assert_fail@plt+0x4bdc>
   16298:	mov	r2, #104	; 0x68
   1629c:	sub	r1, fp, #132	; 0x84
   162a0:	mov	r0, r5
   162a4:	bl	11490 <memcpy@plt>
   162a8:	sub	r2, fp, #132	; 0x84
   162ac:	mov	r1, r4
   162b0:	mov	r0, #3
   162b4:	bl	117cc <__xstat64@plt>
   162b8:	cmp	r0, #0
   162bc:	bge	16260 <__assert_fail@plt+0x4a40>
   162c0:	movw	r1, #9476	; 0x2504
   162c4:	movt	r1, #2
   162c8:	ldr	r4, [r6]
   162cc:	mov	r2, #5
   162d0:	mov	r0, #0
   162d4:	bl	114c0 <dcgettext@plt>
   162d8:	mov	r5, r0
   162dc:	movw	r1, #9472	; 0x2500
   162e0:	movt	r1, #2
   162e4:	mov	r0, #4
   162e8:	bl	1c468 <__assert_fail@plt+0xac48>
   162ec:	mov	r3, r0
   162f0:	mov	r2, r5
   162f4:	mov	r1, r4
   162f8:	mov	r0, #0
   162fc:	bl	11574 <error@plt>
   16300:	mov	r5, #0
   16304:	b	16310 <__assert_fail@plt+0x4af0>
   16308:	bl	1ef04 <__assert_fail@plt+0xd6e4>
   1630c:	mov	r5, r0
   16310:	sub	r0, fp, #244	; 0xf4
   16314:	ldr	r4, [r6]
   16318:	bl	1d99c <__assert_fail@plt+0xc17c>
   1631c:	cmp	r0, #0
   16320:	bne	1647c <__assert_fail@plt+0x4c5c>
   16324:	sub	r0, fp, #244	; 0xf4
   16328:	bl	1d9b8 <__assert_fail@plt+0xc198>
   1632c:	str	r4, [r6]
   16330:	mov	r0, r5
   16334:	sub	sp, fp, #28
   16338:	ldrd	r4, [sp]
   1633c:	ldrd	r6, [sp, #8]
   16340:	ldrd	r8, [sp, #16]
   16344:	ldr	fp, [sp, #24]
   16348:	add	sp, sp, #28
   1634c:	pop	{pc}		; (ldr pc, [sp], #4)
   16350:	sub	r5, fp, #236	; 0xec
   16354:	mov	r1, r7
   16358:	mov	r2, #104	; 0x68
   1635c:	mov	r0, r5
   16360:	bl	11490 <memcpy@plt>
   16364:	mov	r0, r8
   16368:	bl	114fc <chdir@plt>
   1636c:	cmp	r0, #0
   16370:	bge	16254 <__assert_fail@plt+0x4a34>
   16374:	ldr	r6, [r6]
   16378:	mov	r2, #5
   1637c:	mov	r0, r4
   16380:	movw	r1, #9400	; 0x24b8
   16384:	movt	r1, #2
   16388:	bl	114c0 <dcgettext@plt>
   1638c:	mov	r7, r0
   16390:	mov	r1, r8
   16394:	mov	r0, #4
   16398:	mov	r5, r4
   1639c:	bl	1c468 <__assert_fail@plt+0xac48>
   163a0:	mov	r3, r0
   163a4:	mov	r2, r7
   163a8:	mov	r1, r6
   163ac:	mov	r0, r4
   163b0:	bl	11574 <error@plt>
   163b4:	b	16330 <__assert_fail@plt+0x4b10>
   163b8:	ldr	r8, [r6]
   163bc:	mov	r2, #5
   163c0:	mov	r0, r4
   163c4:	movw	r1, #9432	; 0x24d8
   163c8:	movt	r1, #2
   163cc:	bl	114c0 <dcgettext@plt>
   163d0:	mov	r9, r0
   163d4:	mov	r1, r7
   163d8:	mov	r0, #4
   163dc:	mov	r5, r4
   163e0:	bl	1c468 <__assert_fail@plt+0xac48>
   163e4:	mov	r3, r0
   163e8:	mov	r2, r9
   163ec:	mov	r1, r8
   163f0:	mov	r0, r4
   163f4:	bl	11574 <error@plt>
   163f8:	b	16310 <__assert_fail@plt+0x4af0>
   163fc:	movw	r1, #9400	; 0x24b8
   16400:	movt	r1, #2
   16404:	b	162c8 <__assert_fail@plt+0x4aa8>
   16408:	ldr	r4, [r6]
   1640c:	mov	r2, #5
   16410:	movw	r1, #9368	; 0x2498
   16414:	movt	r1, #2
   16418:	mov	r0, #0
   1641c:	bl	114c0 <dcgettext@plt>
   16420:	mov	r2, r0
   16424:	mov	r0, #0
   16428:	mov	r5, r0
   1642c:	mov	r1, r4
   16430:	bl	11574 <error@plt>
   16434:	b	16330 <__assert_fail@plt+0x4b10>
   16438:	ldr	r6, [r6]
   1643c:	mov	r2, #5
   16440:	mov	r0, r4
   16444:	movw	r1, #9400	; 0x24b8
   16448:	movt	r1, #2
   1644c:	bl	114c0 <dcgettext@plt>
   16450:	mov	r8, r0
   16454:	mov	r1, r7
   16458:	mov	r0, #4
   1645c:	mov	r5, r4
   16460:	bl	1c468 <__assert_fail@plt+0xac48>
   16464:	mov	r3, r0
   16468:	mov	r2, r8
   1646c:	mov	r1, r6
   16470:	mov	r0, r4
   16474:	bl	11574 <error@plt>
   16478:	b	16330 <__assert_fail@plt+0x4b10>
   1647c:	ldr	r4, [r6]
   16480:	mov	r2, #5
   16484:	movw	r1, #9492	; 0x2514
   16488:	movt	r1, #2
   1648c:	mov	r0, #0
   16490:	bl	114c0 <dcgettext@plt>
   16494:	mov	r2, r0
   16498:	mov	r0, #1
   1649c:	mov	r1, r4
   164a0:	bl	11574 <error@plt>
   164a4:	cmp	r1, #0
   164a8:	strd	r4, [sp, #-24]!	; 0xffffffe8
   164ac:	moveq	r4, #128	; 0x80
   164b0:	strd	r6, [sp, #8]
   164b4:	movne	r7, #1
   164b8:	moveq	r7, #0
   164bc:	str	r8, [sp, #16]
   164c0:	mov	r8, r0
   164c4:	str	lr, [sp, #20]
   164c8:	sub	sp, sp, #128	; 0x80
   164cc:	beq	164dc <__assert_fail@plt+0x4cbc>
   164d0:	cmp	r1, #1024	; 0x400
   164d4:	addls	r4, r1, #1
   164d8:	movwhi	r4, #1025	; 0x401
   164dc:	cmp	r4, #128	; 0x80
   164e0:	moveq	r0, r7
   164e4:	orrne	r0, r7, #1
   164e8:	mov	r6, sp
   164ec:	cmp	r0, #0
   164f0:	mov	r5, r0
   164f4:	bne	1654c <__assert_fail@plt+0x4d2c>
   164f8:	mov	r2, r4
   164fc:	mov	r1, r6
   16500:	mov	r0, r8
   16504:	bl	11520 <readlink@plt>
   16508:	subs	r3, r0, #0
   1650c:	mov	r0, r5
   16510:	blt	16570 <__assert_fail@plt+0x4d50>
   16514:	cmp	r4, r3
   16518:	bhi	16594 <__assert_fail@plt+0x4d74>
   1651c:	bl	171c0 <__assert_fail@plt+0x59a0>
   16520:	cmn	r4, #-1073741823	; 0xc0000001
   16524:	lslls	r4, r4, #1
   16528:	bls	164dc <__assert_fail@plt+0x4cbc>
   1652c:	cmn	r4, #-2147483646	; 0x80000002
   16530:	mvn	r4, #-2147483648	; 0x80000000
   16534:	bls	164dc <__assert_fail@plt+0x4cbc>
   16538:	bl	1167c <__errno_location@plt>
   1653c:	mov	r3, #12
   16540:	mov	r5, #0
   16544:	str	r3, [r0]
   16548:	b	16578 <__assert_fail@plt+0x4d58>
   1654c:	mov	r0, r4
   16550:	bl	1efe8 <__assert_fail@plt+0xd7c8>
   16554:	subs	r6, r0, #0
   16558:	mov	r5, r6
   1655c:	bne	164f8 <__assert_fail@plt+0x4cd8>
   16560:	bl	1167c <__errno_location@plt>
   16564:	mov	r3, #12
   16568:	str	r3, [r0]
   1656c:	b	16578 <__assert_fail@plt+0x4d58>
   16570:	mov	r5, #0
   16574:	bl	171c0 <__assert_fail@plt+0x59a0>
   16578:	mov	r0, r5
   1657c:	add	sp, sp, #128	; 0x80
   16580:	ldrd	r4, [sp]
   16584:	ldrd	r6, [sp, #8]
   16588:	ldr	r8, [sp, #16]
   1658c:	add	sp, sp, #20
   16590:	pop	{pc}		; (ldr pc, [sp], #4)
   16594:	mov	r2, #0
   16598:	add	r7, r3, #1
   1659c:	cmp	r5, r2
   165a0:	strb	r2, [r6, r3]
   165a4:	beq	165c4 <__assert_fail@plt+0x4da4>
   165a8:	cmp	r4, r7
   165ac:	bls	16578 <__assert_fail@plt+0x4d58>
   165b0:	mov	r1, r7
   165b4:	bl	1f024 <__assert_fail@plt+0xd804>
   165b8:	cmp	r0, #0
   165bc:	movne	r5, r0
   165c0:	b	16578 <__assert_fail@plt+0x4d58>
   165c4:	mov	r0, r7
   165c8:	bl	1efe8 <__assert_fail@plt+0xd7c8>
   165cc:	subs	r5, r0, #0
   165d0:	beq	16578 <__assert_fail@plt+0x4d58>
   165d4:	mov	r2, r7
   165d8:	mov	r1, r6
   165dc:	bl	11490 <memcpy@plt>
   165e0:	mov	r5, r0
   165e4:	b	16578 <__assert_fail@plt+0x4d58>
   165e8:	mov	r0, #1
   165ec:	b	15cd8 <__assert_fail@plt+0x44b8>
   165f0:	strd	r4, [sp, #-36]!	; 0xffffffdc
   165f4:	mov	r4, r1
   165f8:	strd	r6, [sp, #8]
   165fc:	mov	r6, r2
   16600:	strd	r8, [sp, #16]
   16604:	mov	r8, r3
   16608:	strd	sl, [sp, #24]
   1660c:	mov	sl, r0
   16610:	str	lr, [sp, #32]
   16614:	sub	sp, sp, #12
   16618:	str	r2, [sp]
   1661c:	bl	11640 <strlen@plt>
   16620:	ldr	fp, [r4]
   16624:	cmp	fp, #0
   16628:	beq	16738 <__assert_fail@plt+0x4f18>
   1662c:	cmp	r6, #0
   16630:	mov	r7, r0
   16634:	beq	166e4 <__assert_fail@plt+0x4ec4>
   16638:	mov	r5, #0
   1663c:	mvn	r9, #0
   16640:	str	r5, [sp, #4]
   16644:	mov	r2, r7
   16648:	mov	r1, sl
   1664c:	mov	r0, fp
   16650:	bl	117e4 <strncmp@plt>
   16654:	cmp	r0, #0
   16658:	mov	r0, fp
   1665c:	bne	1669c <__assert_fail@plt+0x4e7c>
   16660:	bl	11640 <strlen@plt>
   16664:	ldr	r3, [sp]
   16668:	cmp	r0, r7
   1666c:	mov	r2, r8
   16670:	mov	r1, r6
   16674:	mla	r0, r8, r9, r3
   16678:	beq	166dc <__assert_fail@plt+0x4ebc>
   1667c:	cmn	r9, #1
   16680:	moveq	r9, r5
   16684:	beq	1669c <__assert_fail@plt+0x4e7c>
   16688:	bl	114a8 <memcmp@plt>
   1668c:	ldr	r3, [sp, #4]
   16690:	cmp	r0, #0
   16694:	movne	r3, #1
   16698:	str	r3, [sp, #4]
   1669c:	ldr	fp, [r4, #4]!
   166a0:	add	r5, r5, #1
   166a4:	add	r6, r6, r8
   166a8:	cmp	fp, #0
   166ac:	bne	16644 <__assert_fail@plt+0x4e24>
   166b0:	ldr	r3, [sp, #4]
   166b4:	cmp	r3, #0
   166b8:	mvnne	r9, #1
   166bc:	mov	r0, r9
   166c0:	add	sp, sp, #12
   166c4:	ldrd	r4, [sp]
   166c8:	ldrd	r6, [sp, #8]
   166cc:	ldrd	r8, [sp, #16]
   166d0:	ldrd	sl, [sp, #24]
   166d4:	add	sp, sp, #32
   166d8:	pop	{pc}		; (ldr pc, [sp], #4)
   166dc:	mov	r9, r5
   166e0:	b	166bc <__assert_fail@plt+0x4e9c>
   166e4:	mov	r5, r6
   166e8:	mvn	r9, #0
   166ec:	mov	r2, r7
   166f0:	mov	r1, sl
   166f4:	mov	r0, fp
   166f8:	bl	117e4 <strncmp@plt>
   166fc:	cmp	r0, #0
   16700:	mov	r0, fp
   16704:	bne	16720 <__assert_fail@plt+0x4f00>
   16708:	bl	11640 <strlen@plt>
   1670c:	cmp	r0, r7
   16710:	beq	166dc <__assert_fail@plt+0x4ebc>
   16714:	cmn	r9, #1
   16718:	moveq	r9, r5
   1671c:	movne	r6, #1
   16720:	ldr	fp, [r4, #4]!
   16724:	add	r5, r5, #1
   16728:	cmp	fp, #0
   1672c:	bne	166ec <__assert_fail@plt+0x4ecc>
   16730:	str	r6, [sp, #4]
   16734:	b	166b0 <__assert_fail@plt+0x4e90>
   16738:	mvn	r9, #0
   1673c:	b	166bc <__assert_fail@plt+0x4e9c>
   16740:	strd	r4, [sp, #-16]!
   16744:	str	r6, [sp, #8]
   16748:	mov	r6, r0
   1674c:	ldr	r0, [r1]
   16750:	str	lr, [sp, #12]
   16754:	cmp	r0, #0
   16758:	beq	1679c <__assert_fail@plt+0x4f7c>
   1675c:	mov	r4, r1
   16760:	mov	r5, #0
   16764:	b	16778 <__assert_fail@plt+0x4f58>
   16768:	ldr	r0, [r4, #4]!
   1676c:	add	r5, r5, #1
   16770:	cmp	r0, #0
   16774:	beq	1679c <__assert_fail@plt+0x4f7c>
   16778:	mov	r1, r6
   1677c:	bl	1143c <strcmp@plt>
   16780:	cmp	r0, #0
   16784:	bne	16768 <__assert_fail@plt+0x4f48>
   16788:	mov	r0, r5
   1678c:	ldrd	r4, [sp]
   16790:	ldr	r6, [sp, #8]
   16794:	add	sp, sp, #12
   16798:	pop	{pc}		; (ldr pc, [sp], #4)
   1679c:	ldrd	r4, [sp]
   167a0:	mvn	r0, #0
   167a4:	ldr	r6, [sp, #8]
   167a8:	add	sp, sp, #12
   167ac:	pop	{pc}		; (ldr pc, [sp], #4)
   167b0:	cmn	r2, #1
   167b4:	strd	r4, [sp, #-16]!
   167b8:	mov	r5, r1
   167bc:	movweq	r1, #9556	; 0x2554
   167c0:	movwne	r1, #9584	; 0x2570
   167c4:	str	r6, [sp, #8]
   167c8:	movteq	r1, #2
   167cc:	movtne	r1, #2
   167d0:	str	lr, [sp, #12]
   167d4:	mov	r6, r0
   167d8:	sub	sp, sp, #8
   167dc:	mov	r2, #5
   167e0:	mov	r0, #0
   167e4:	bl	114c0 <dcgettext@plt>
   167e8:	mov	r4, r0
   167ec:	mov	r2, r5
   167f0:	mov	r1, #8
   167f4:	mov	r0, #0
   167f8:	bl	1c38c <__assert_fail@plt+0xab6c>
   167fc:	mov	r5, r0
   16800:	mov	r1, r6
   16804:	mov	r0, #1
   16808:	bl	1d784 <__assert_fail@plt+0xbf64>
   1680c:	mov	r1, #0
   16810:	mov	r3, r5
   16814:	str	r0, [sp]
   16818:	mov	r2, r4
   1681c:	mov	r0, r1
   16820:	bl	11574 <error@plt>
   16824:	add	sp, sp, #8
   16828:	ldrd	r4, [sp]
   1682c:	ldr	r6, [sp, #8]
   16830:	add	sp, sp, #12
   16834:	pop	{pc}		; (ldr pc, [sp], #4)
   16838:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1683c:	mov	r4, r1
   16840:	movw	r1, #9616	; 0x2590
   16844:	movt	r1, #2
   16848:	strd	r6, [sp, #8]
   1684c:	mov	r6, r0
   16850:	mov	r7, r2
   16854:	mov	r0, #0
   16858:	strd	r8, [sp, #16]
   1685c:	mov	r2, #5
   16860:	strd	sl, [sp, #24]
   16864:	movw	sl, #12768	; 0x31e0
   16868:	movt	sl, #3
   1686c:	str	lr, [sp, #32]
   16870:	sub	sp, sp, #12
   16874:	bl	114c0 <dcgettext@plt>
   16878:	ldr	r1, [sl]
   1687c:	bl	11400 <fputs_unlocked@plt>
   16880:	ldr	fp, [r6]
   16884:	cmp	fp, #0
   16888:	beq	16928 <__assert_fail@plt+0x5108>
   1688c:	movw	r3, #9640	; 0x25a8
   16890:	movt	r3, #2
   16894:	mov	r9, #0
   16898:	str	r3, [sp]
   1689c:	movw	r3, #9648	; 0x25b0
   168a0:	movt	r3, #2
   168a4:	mov	r5, r9
   168a8:	str	r3, [sp, #4]
   168ac:	b	168e4 <__assert_fail@plt+0x50c4>
   168b0:	mov	r0, fp
   168b4:	mov	r9, r4
   168b8:	bl	1d794 <__assert_fail@plt+0xbf74>
   168bc:	mov	r3, r0
   168c0:	mov	r1, #1
   168c4:	ldr	r2, [sp]
   168c8:	mov	r0, r8
   168cc:	bl	116d0 <__fprintf_chk@plt>
   168d0:	ldr	fp, [r6, #4]!
   168d4:	add	r5, r5, #1
   168d8:	add	r4, r4, r7
   168dc:	cmp	fp, #0
   168e0:	beq	16928 <__assert_fail@plt+0x5108>
   168e4:	cmp	r5, #0
   168e8:	mov	r1, r4
   168ec:	ldr	r8, [sl]
   168f0:	mov	r2, r7
   168f4:	mov	r0, r9
   168f8:	beq	168b0 <__assert_fail@plt+0x5090>
   168fc:	bl	114a8 <memcmp@plt>
   16900:	cmp	r0, #0
   16904:	bne	168b0 <__assert_fail@plt+0x5090>
   16908:	mov	r0, fp
   1690c:	bl	1d794 <__assert_fail@plt+0xbf74>
   16910:	mov	r3, r0
   16914:	mov	r1, #1
   16918:	ldr	r2, [sp, #4]
   1691c:	mov	r0, r8
   16920:	bl	116d0 <__fprintf_chk@plt>
   16924:	b	168d0 <__assert_fail@plt+0x50b0>
   16928:	ldr	r0, [sl]
   1692c:	ldr	r3, [r0, #20]
   16930:	ldr	r2, [r0, #24]
   16934:	cmp	r3, r2
   16938:	bcs	16968 <__assert_fail@plt+0x5148>
   1693c:	add	r1, r3, #1
   16940:	mov	r2, #10
   16944:	str	r1, [r0, #20]
   16948:	strb	r2, [r3]
   1694c:	add	sp, sp, #12
   16950:	ldrd	r4, [sp]
   16954:	ldrd	r6, [sp, #8]
   16958:	ldrd	r8, [sp, #16]
   1695c:	ldrd	sl, [sp, #24]
   16960:	add	sp, sp, #32
   16964:	pop	{pc}		; (ldr pc, [sp], #4)
   16968:	mov	r1, #10
   1696c:	add	sp, sp, #12
   16970:	ldrd	r4, [sp]
   16974:	ldrd	r6, [sp, #8]
   16978:	ldrd	r8, [sp, #16]
   1697c:	ldrd	sl, [sp, #24]
   16980:	ldr	lr, [sp, #32]
   16984:	add	sp, sp, #36	; 0x24
   16988:	b	11724 <__overflow@plt>
   1698c:	strd	r4, [sp, #-28]!	; 0xffffffe4
   16990:	mov	r5, r1
   16994:	strd	r6, [sp, #8]
   16998:	mov	r6, r2
   1699c:	mov	r7, r3
   169a0:	strd	r8, [sp, #16]
   169a4:	mov	r8, r0
   169a8:	str	lr, [sp, #24]
   169ac:	sub	sp, sp, #12
   169b0:	ldrb	r4, [sp, #48]	; 0x30
   169b4:	cmp	r4, #0
   169b8:	bne	16a64 <__assert_fail@plt+0x5244>
   169bc:	ldr	r0, [r2]
   169c0:	cmp	r0, #0
   169c4:	movne	r9, r2
   169c8:	bne	16a4c <__assert_fail@plt+0x522c>
   169cc:	movw	r1, #9556	; 0x2554
   169d0:	movt	r1, #2
   169d4:	mov	r2, #5
   169d8:	mov	r0, #0
   169dc:	bl	114c0 <dcgettext@plt>
   169e0:	mov	r9, r0
   169e4:	mov	r2, r5
   169e8:	mov	r1, #8
   169ec:	mov	r0, #0
   169f0:	bl	1c38c <__assert_fail@plt+0xab6c>
   169f4:	mov	r4, r0
   169f8:	mov	r1, r8
   169fc:	mov	r0, #1
   16a00:	bl	1d784 <__assert_fail@plt+0xbf64>
   16a04:	mov	r1, #0
   16a08:	mov	r3, r4
   16a0c:	str	r0, [sp]
   16a10:	mov	r2, r9
   16a14:	mov	r0, r1
   16a18:	bl	11574 <error@plt>
   16a1c:	mov	r0, r6
   16a20:	mov	r1, r7
   16a24:	ldr	r2, [sp, #40]	; 0x28
   16a28:	bl	16838 <__assert_fail@plt+0x5018>
   16a2c:	ldr	r3, [sp, #44]	; 0x2c
   16a30:	blx	r3
   16a34:	mvn	r0, #0
   16a38:	b	16a80 <__assert_fail@plt+0x5260>
   16a3c:	ldr	r0, [r9, #4]!
   16a40:	add	r4, r4, #1
   16a44:	cmp	r0, #0
   16a48:	beq	169cc <__assert_fail@plt+0x51ac>
   16a4c:	mov	r1, r5
   16a50:	bl	1143c <strcmp@plt>
   16a54:	cmp	r0, #0
   16a58:	bne	16a3c <__assert_fail@plt+0x521c>
   16a5c:	mov	r0, r4
   16a60:	b	16a80 <__assert_fail@plt+0x5260>
   16a64:	mov	r2, r3
   16a68:	mov	r1, r6
   16a6c:	ldr	r3, [sp, #40]	; 0x28
   16a70:	mov	r0, r5
   16a74:	bl	165f0 <__assert_fail@plt+0x4dd0>
   16a78:	cmp	r0, #0
   16a7c:	blt	16a98 <__assert_fail@plt+0x5278>
   16a80:	add	sp, sp, #12
   16a84:	ldrd	r4, [sp]
   16a88:	ldrd	r6, [sp, #8]
   16a8c:	ldrd	r8, [sp, #16]
   16a90:	add	sp, sp, #24
   16a94:	pop	{pc}		; (ldr pc, [sp], #4)
   16a98:	cmn	r0, #1
   16a9c:	beq	169cc <__assert_fail@plt+0x51ac>
   16aa0:	movw	r1, #9584	; 0x2570
   16aa4:	movt	r1, #2
   16aa8:	mov	r2, #5
   16aac:	mov	r0, #0
   16ab0:	bl	114c0 <dcgettext@plt>
   16ab4:	mov	r9, r0
   16ab8:	b	169e4 <__assert_fail@plt+0x51c4>
   16abc:	strd	r4, [sp, #-24]!	; 0xffffffe8
   16ac0:	strd	r6, [sp, #8]
   16ac4:	ldr	r7, [r1]
   16ac8:	str	r8, [sp, #16]
   16acc:	str	lr, [sp, #20]
   16ad0:	cmp	r7, #0
   16ad4:	beq	16b14 <__assert_fail@plt+0x52f4>
   16ad8:	mov	r6, r3
   16adc:	mov	r8, r0
   16ae0:	mov	r4, r2
   16ae4:	mov	r5, r1
   16ae8:	b	16af8 <__assert_fail@plt+0x52d8>
   16aec:	ldr	r7, [r5, #4]!
   16af0:	cmp	r7, #0
   16af4:	beq	16b14 <__assert_fail@plt+0x52f4>
   16af8:	mov	r1, r4
   16afc:	mov	r2, r6
   16b00:	mov	r0, r8
   16b04:	add	r4, r4, r6
   16b08:	bl	114a8 <memcmp@plt>
   16b0c:	cmp	r0, #0
   16b10:	bne	16aec <__assert_fail@plt+0x52cc>
   16b14:	mov	r0, r7
   16b18:	ldrd	r4, [sp]
   16b1c:	ldrd	r6, [sp, #8]
   16b20:	ldr	r8, [sp, #16]
   16b24:	add	sp, sp, #20
   16b28:	pop	{pc}		; (ldr pc, [sp], #4)
   16b2c:	movw	r3, #12908	; 0x326c
   16b30:	movt	r3, #3
   16b34:	str	r0, [r3]
   16b38:	bx	lr
   16b3c:	movw	r3, #12908	; 0x326c
   16b40:	movt	r3, #3
   16b44:	strb	r0, [r3, #4]
   16b48:	bx	lr
   16b4c:	movw	r3, #12772	; 0x31e4
   16b50:	movt	r3, #3
   16b54:	strd	r4, [sp, #-16]!
   16b58:	ldr	r0, [r3]
   16b5c:	str	r6, [sp, #8]
   16b60:	str	lr, [sp, #12]
   16b64:	sub	sp, sp, #8
   16b68:	bl	1fe54 <__assert_fail@plt+0xe634>
   16b6c:	cmp	r0, #0
   16b70:	beq	16b9c <__assert_fail@plt+0x537c>
   16b74:	movw	r4, #12908	; 0x326c
   16b78:	movt	r4, #3
   16b7c:	ldrb	r6, [r4, #4]
   16b80:	bl	1167c <__errno_location@plt>
   16b84:	mov	r5, r0
   16b88:	cmp	r6, #0
   16b8c:	beq	16bc8 <__assert_fail@plt+0x53a8>
   16b90:	ldr	r3, [r0]
   16b94:	cmp	r3, #32
   16b98:	bne	16bc8 <__assert_fail@plt+0x53a8>
   16b9c:	movw	r3, #12768	; 0x31e0
   16ba0:	movt	r3, #3
   16ba4:	ldr	r0, [r3]
   16ba8:	bl	1fe54 <__assert_fail@plt+0xe634>
   16bac:	cmp	r0, #0
   16bb0:	bne	16c10 <__assert_fail@plt+0x53f0>
   16bb4:	add	sp, sp, #8
   16bb8:	ldrd	r4, [sp]
   16bbc:	ldr	r6, [sp, #8]
   16bc0:	add	sp, sp, #12
   16bc4:	pop	{pc}		; (ldr pc, [sp], #4)
   16bc8:	movw	r1, #9656	; 0x25b8
   16bcc:	movt	r1, #2
   16bd0:	mov	r2, #5
   16bd4:	mov	r0, #0
   16bd8:	bl	114c0 <dcgettext@plt>
   16bdc:	mov	r6, r0
   16be0:	ldr	r0, [r4]
   16be4:	cmp	r0, #0
   16be8:	beq	16c20 <__assert_fail@plt+0x5400>
   16bec:	ldr	r4, [r5]
   16bf0:	bl	1cc18 <__assert_fail@plt+0xb3f8>
   16bf4:	mov	r3, r0
   16bf8:	movw	r2, #9668	; 0x25c4
   16bfc:	movt	r2, #2
   16c00:	mov	r0, #0
   16c04:	str	r6, [sp]
   16c08:	mov	r1, r4
   16c0c:	bl	11574 <error@plt>
   16c10:	movw	r3, #12684	; 0x318c
   16c14:	movt	r3, #3
   16c18:	ldr	r0, [r3]
   16c1c:	bl	11484 <_exit@plt>
   16c20:	mov	r3, r6
   16c24:	movw	r2, #8384	; 0x20c0
   16c28:	movt	r2, #2
   16c2c:	ldr	r1, [r5]
   16c30:	bl	11574 <error@plt>
   16c34:	b	16c10 <__assert_fail@plt+0x53f0>
   16c38:	str	r4, [sp, #-8]!
   16c3c:	str	lr, [sp, #4]
   16c40:	bl	16cfc <__assert_fail@plt+0x54dc>
   16c44:	cmp	r0, #0
   16c48:	beq	16c58 <__assert_fail@plt+0x5438>
   16c4c:	ldr	r4, [sp]
   16c50:	add	sp, sp, #4
   16c54:	pop	{pc}		; (ldr pc, [sp], #4)
   16c58:	bl	1eec0 <__assert_fail@plt+0xd6a0>
   16c5c:	strd	r4, [sp, #-16]!
   16c60:	mov	r4, r0
   16c64:	str	r6, [sp, #8]
   16c68:	str	lr, [sp, #12]
   16c6c:	ldrb	ip, [r0]
   16c70:	sub	r5, ip, #47	; 0x2f
   16c74:	clz	r5, r5
   16c78:	bl	1fa0c <__assert_fail@plt+0xe1ec>
   16c7c:	lsr	r5, r5, #5
   16c80:	sub	r0, r0, r4
   16c84:	cmp	r0, r5
   16c88:	bls	16ce4 <__assert_fail@plt+0x54c4>
   16c8c:	sub	r3, r0, #1
   16c90:	ldrb	r2, [r4, r3]
   16c94:	cmp	r2, #47	; 0x2f
   16c98:	bne	16ce4 <__assert_fail@plt+0x54c4>
   16c9c:	cmp	r3, r5
   16ca0:	bls	16cf4 <__assert_fail@plt+0x54d4>
   16ca4:	add	r2, r4, r0
   16ca8:	ldrb	r2, [r2, #-2]
   16cac:	cmp	r2, #47	; 0x2f
   16cb0:	bne	16cf4 <__assert_fail@plt+0x54d4>
   16cb4:	sub	r0, r0, #3
   16cb8:	sub	ip, r4, #1
   16cbc:	add	r3, r4, r0
   16cc0:	add	ip, ip, r5
   16cc4:	rsb	r2, r4, #1
   16cc8:	b	16cd8 <__assert_fail@plt+0x54b8>
   16ccc:	ldrb	r1, [r3], #-1
   16cd0:	cmp	r1, #47	; 0x2f
   16cd4:	bne	16ce4 <__assert_fail@plt+0x54c4>
   16cd8:	cmp	r3, ip
   16cdc:	add	r0, r2, r3
   16ce0:	bne	16ccc <__assert_fail@plt+0x54ac>
   16ce4:	ldrd	r4, [sp]
   16ce8:	ldr	r6, [sp, #8]
   16cec:	add	sp, sp, #12
   16cf0:	pop	{pc}		; (ldr pc, [sp], #4)
   16cf4:	mov	r0, r3
   16cf8:	b	16ce4 <__assert_fail@plt+0x54c4>
   16cfc:	strd	r4, [sp, #-16]!
   16d00:	mov	r5, r0
   16d04:	str	r6, [sp, #8]
   16d08:	str	lr, [sp, #12]
   16d0c:	ldrb	r6, [r0]
   16d10:	bl	1fa0c <__assert_fail@plt+0xe1ec>
   16d14:	sub	r4, r0, r5
   16d18:	sub	r6, r6, #47	; 0x2f
   16d1c:	clz	r6, r6
   16d20:	lsr	r6, r6, #5
   16d24:	cmp	r6, r4
   16d28:	bcs	16d84 <__assert_fail@plt+0x5564>
   16d2c:	sub	r3, r4, #1
   16d30:	ldrb	r2, [r5, r3]
   16d34:	cmp	r2, #47	; 0x2f
   16d38:	bne	16ddc <__assert_fail@plt+0x55bc>
   16d3c:	cmp	r6, r3
   16d40:	bcs	16e0c <__assert_fail@plt+0x55ec>
   16d44:	add	r2, r5, r4
   16d48:	ldrb	r2, [r2, #-2]
   16d4c:	cmp	r2, #47	; 0x2f
   16d50:	bne	16dd8 <__assert_fail@plt+0x55b8>
   16d54:	sub	r4, r4, #3
   16d58:	sub	r2, r5, #1
   16d5c:	add	r3, r5, r4
   16d60:	add	r6, r2, r6
   16d64:	rsb	r1, r5, #1
   16d68:	b	16d78 <__assert_fail@plt+0x5558>
   16d6c:	ldrb	r2, [r3], #-1
   16d70:	cmp	r2, #47	; 0x2f
   16d74:	bne	16ddc <__assert_fail@plt+0x55bc>
   16d78:	cmp	r3, r6
   16d7c:	add	r4, r1, r3
   16d80:	bne	16d6c <__assert_fail@plt+0x554c>
   16d84:	add	r0, r4, #1
   16d88:	cmp	r4, #0
   16d8c:	addeq	r0, r0, #1
   16d90:	bl	1efe8 <__assert_fail@plt+0xd7c8>
   16d94:	subs	r6, r0, #0
   16d98:	beq	16e04 <__assert_fail@plt+0x55e4>
   16d9c:	mov	r1, r5
   16da0:	mov	r2, r4
   16da4:	bl	11490 <memcpy@plt>
   16da8:	cmp	r4, #0
   16dac:	bne	16dbc <__assert_fail@plt+0x559c>
   16db0:	mov	r3, #46	; 0x2e
   16db4:	mov	r4, #1
   16db8:	strb	r3, [r6]
   16dbc:	mov	r3, #0
   16dc0:	strb	r3, [r6, r4]
   16dc4:	mov	r0, r6
   16dc8:	ldrd	r4, [sp]
   16dcc:	ldr	r6, [sp, #8]
   16dd0:	add	sp, sp, #12
   16dd4:	pop	{pc}		; (ldr pc, [sp], #4)
   16dd8:	mov	r4, r3
   16ddc:	add	r0, r4, #1
   16de0:	cmp	r4, #0
   16de4:	addeq	r0, r0, #1
   16de8:	bl	1efe8 <__assert_fail@plt+0xd7c8>
   16dec:	subs	r6, r0, #0
   16df0:	beq	16e04 <__assert_fail@plt+0x55e4>
   16df4:	mov	r1, r5
   16df8:	mov	r2, r4
   16dfc:	bl	11490 <memcpy@plt>
   16e00:	b	16dbc <__assert_fail@plt+0x559c>
   16e04:	mov	r6, #0
   16e08:	b	16dc4 <__assert_fail@plt+0x55a4>
   16e0c:	mov	r4, r3
   16e10:	b	16d84 <__assert_fail@plt+0x5564>
   16e14:	ldr	r3, [r0, #16]
   16e18:	and	r3, r3, #61440	; 0xf000
   16e1c:	cmp	r3, #32768	; 0x8000
   16e20:	beq	16e68 <__assert_fail@plt+0x5648>
   16e24:	cmp	r3, #16384	; 0x4000
   16e28:	beq	16eb0 <__assert_fail@plt+0x5690>
   16e2c:	cmp	r3, #40960	; 0xa000
   16e30:	beq	16ed8 <__assert_fail@plt+0x56b8>
   16e34:	cmp	r3, #24576	; 0x6000
   16e38:	beq	16eec <__assert_fail@plt+0x56cc>
   16e3c:	cmp	r3, #8192	; 0x2000
   16e40:	beq	16e9c <__assert_fail@plt+0x567c>
   16e44:	cmp	r3, #4096	; 0x1000
   16e48:	beq	16f00 <__assert_fail@plt+0x56e0>
   16e4c:	cmp	r3, #49152	; 0xc000
   16e50:	beq	16ec4 <__assert_fail@plt+0x56a4>
   16e54:	movw	r1, #9788	; 0x263c
   16e58:	movt	r1, #2
   16e5c:	mov	r2, #5
   16e60:	mov	r0, #0
   16e64:	b	114c0 <dcgettext@plt>
   16e68:	ldrd	r2, [r0, #48]	; 0x30
   16e6c:	orrs	r3, r2, r3
   16e70:	bne	16e88 <__assert_fail@plt+0x5668>
   16e74:	movw	r1, #9676	; 0x25cc
   16e78:	movt	r1, #2
   16e7c:	mov	r2, #5
   16e80:	mov	r0, #0
   16e84:	b	114c0 <dcgettext@plt>
   16e88:	movw	r1, #9696	; 0x25e0
   16e8c:	movt	r1, #2
   16e90:	mov	r2, #5
   16e94:	mov	r0, #0
   16e98:	b	114c0 <dcgettext@plt>
   16e9c:	movw	r1, #9748	; 0x2614
   16ea0:	movt	r1, #2
   16ea4:	mov	r2, #5
   16ea8:	mov	r0, #0
   16eac:	b	114c0 <dcgettext@plt>
   16eb0:	movw	r1, #9528	; 0x2538
   16eb4:	movt	r1, #2
   16eb8:	mov	r2, #5
   16ebc:	mov	r0, #0
   16ec0:	b	114c0 <dcgettext@plt>
   16ec4:	movw	r1, #9780	; 0x2634
   16ec8:	movt	r1, #2
   16ecc:	mov	r2, #5
   16ed0:	mov	r0, #0
   16ed4:	b	114c0 <dcgettext@plt>
   16ed8:	movw	r1, #9712	; 0x25f0
   16edc:	movt	r1, #2
   16ee0:	mov	r2, #5
   16ee4:	mov	r0, #0
   16ee8:	b	114c0 <dcgettext@plt>
   16eec:	movw	r1, #9728	; 0x2600
   16ef0:	movt	r1, #2
   16ef4:	mov	r2, #5
   16ef8:	mov	r0, #0
   16efc:	b	114c0 <dcgettext@plt>
   16f00:	movw	r1, #9772	; 0x262c
   16f04:	movt	r1, #2
   16f08:	mov	r2, #5
   16f0c:	mov	r0, #0
   16f10:	b	114c0 <dcgettext@plt>
   16f14:	and	r3, r0, #61440	; 0xf000
   16f18:	cmp	r3, #32768	; 0x8000
   16f1c:	moveq	r2, #45	; 0x2d
   16f20:	beq	16f6c <__assert_fail@plt+0x574c>
   16f24:	cmp	r3, #16384	; 0x4000
   16f28:	moveq	r2, #100	; 0x64
   16f2c:	beq	16f6c <__assert_fail@plt+0x574c>
   16f30:	cmp	r3, #24576	; 0x6000
   16f34:	moveq	r2, #98	; 0x62
   16f38:	beq	16f6c <__assert_fail@plt+0x574c>
   16f3c:	cmp	r3, #8192	; 0x2000
   16f40:	moveq	r2, #99	; 0x63
   16f44:	beq	16f6c <__assert_fail@plt+0x574c>
   16f48:	cmp	r3, #40960	; 0xa000
   16f4c:	moveq	r2, #108	; 0x6c
   16f50:	beq	16f6c <__assert_fail@plt+0x574c>
   16f54:	cmp	r3, #4096	; 0x1000
   16f58:	moveq	r2, #112	; 0x70
   16f5c:	beq	16f6c <__assert_fail@plt+0x574c>
   16f60:	cmp	r3, #49152	; 0xc000
   16f64:	moveq	r2, #115	; 0x73
   16f68:	movne	r2, #63	; 0x3f
   16f6c:	tst	r0, #256	; 0x100
   16f70:	strb	r2, [r1]
   16f74:	and	r3, r0, #64	; 0x40
   16f78:	movne	ip, #114	; 0x72
   16f7c:	moveq	ip, #45	; 0x2d
   16f80:	tst	r0, #128	; 0x80
   16f84:	movne	r2, #119	; 0x77
   16f88:	moveq	r2, #45	; 0x2d
   16f8c:	strb	ip, [r1, #1]
   16f90:	tst	r0, #2048	; 0x800
   16f94:	strb	r2, [r1, #2]
   16f98:	beq	17038 <__assert_fail@plt+0x5818>
   16f9c:	cmp	r3, #0
   16fa0:	movne	r2, #115	; 0x73
   16fa4:	moveq	r2, #83	; 0x53
   16fa8:	tst	r0, #32
   16fac:	strb	r2, [r1, #3]
   16fb0:	and	r3, r0, #8
   16fb4:	movne	ip, #114	; 0x72
   16fb8:	moveq	ip, #45	; 0x2d
   16fbc:	tst	r0, #16
   16fc0:	movne	r2, #119	; 0x77
   16fc4:	moveq	r2, #45	; 0x2d
   16fc8:	strb	ip, [r1, #4]
   16fcc:	tst	r0, #1024	; 0x400
   16fd0:	strb	r2, [r1, #5]
   16fd4:	beq	17048 <__assert_fail@plt+0x5828>
   16fd8:	cmp	r3, #0
   16fdc:	movne	r2, #115	; 0x73
   16fe0:	moveq	r2, #83	; 0x53
   16fe4:	tst	r0, #4
   16fe8:	strb	r2, [r1, #6]
   16fec:	and	r3, r0, #1
   16ff0:	movne	ip, #114	; 0x72
   16ff4:	moveq	ip, #45	; 0x2d
   16ff8:	tst	r0, #2
   16ffc:	movne	r2, #119	; 0x77
   17000:	moveq	r2, #45	; 0x2d
   17004:	strb	ip, [r1, #7]
   17008:	tst	r0, #512	; 0x200
   1700c:	strb	r2, [r1, #8]
   17010:	beq	17058 <__assert_fail@plt+0x5838>
   17014:	cmp	r3, #0
   17018:	movne	r0, #116	; 0x74
   1701c:	moveq	r0, #84	; 0x54
   17020:	mov	r2, #32
   17024:	mov	r3, #0
   17028:	strb	r0, [r1, #9]
   1702c:	strb	r2, [r1, #10]
   17030:	strb	r3, [r1, #11]
   17034:	bx	lr
   17038:	cmp	r3, #0
   1703c:	movne	r2, #120	; 0x78
   17040:	moveq	r2, #45	; 0x2d
   17044:	b	16fa8 <__assert_fail@plt+0x5788>
   17048:	cmp	r3, #0
   1704c:	movne	r2, #120	; 0x78
   17050:	moveq	r2, #45	; 0x2d
   17054:	b	16fe4 <__assert_fail@plt+0x57c4>
   17058:	cmp	r3, #0
   1705c:	movne	r0, #120	; 0x78
   17060:	moveq	r0, #45	; 0x2d
   17064:	b	17020 <__assert_fail@plt+0x5800>
   17068:	ldr	r3, [r0, #16]
   1706c:	and	r2, r3, #61440	; 0xf000
   17070:	cmp	r2, #32768	; 0x8000
   17074:	moveq	r0, #45	; 0x2d
   17078:	beq	170c4 <__assert_fail@plt+0x58a4>
   1707c:	cmp	r2, #16384	; 0x4000
   17080:	moveq	r0, #100	; 0x64
   17084:	beq	170c4 <__assert_fail@plt+0x58a4>
   17088:	cmp	r2, #24576	; 0x6000
   1708c:	moveq	r0, #98	; 0x62
   17090:	beq	170c4 <__assert_fail@plt+0x58a4>
   17094:	cmp	r2, #8192	; 0x2000
   17098:	moveq	r0, #99	; 0x63
   1709c:	beq	170c4 <__assert_fail@plt+0x58a4>
   170a0:	cmp	r2, #40960	; 0xa000
   170a4:	moveq	r0, #108	; 0x6c
   170a8:	beq	170c4 <__assert_fail@plt+0x58a4>
   170ac:	cmp	r2, #4096	; 0x1000
   170b0:	moveq	r0, #112	; 0x70
   170b4:	beq	170c4 <__assert_fail@plt+0x58a4>
   170b8:	cmp	r2, #49152	; 0xc000
   170bc:	moveq	r0, #115	; 0x73
   170c0:	movne	r0, #63	; 0x3f
   170c4:	tst	r3, #256	; 0x100
   170c8:	strb	r0, [r1]
   170cc:	and	r2, r3, #64	; 0x40
   170d0:	movne	ip, #114	; 0x72
   170d4:	moveq	ip, #45	; 0x2d
   170d8:	tst	r3, #128	; 0x80
   170dc:	movne	r0, #119	; 0x77
   170e0:	moveq	r0, #45	; 0x2d
   170e4:	strb	ip, [r1, #1]
   170e8:	tst	r3, #2048	; 0x800
   170ec:	strb	r0, [r1, #2]
   170f0:	beq	17190 <__assert_fail@plt+0x5970>
   170f4:	cmp	r2, #0
   170f8:	movne	r0, #115	; 0x73
   170fc:	moveq	r0, #83	; 0x53
   17100:	tst	r3, #32
   17104:	strb	r0, [r1, #3]
   17108:	and	r2, r3, #8
   1710c:	movne	ip, #114	; 0x72
   17110:	moveq	ip, #45	; 0x2d
   17114:	tst	r3, #16
   17118:	movne	r0, #119	; 0x77
   1711c:	moveq	r0, #45	; 0x2d
   17120:	strb	ip, [r1, #4]
   17124:	tst	r3, #1024	; 0x400
   17128:	strb	r0, [r1, #5]
   1712c:	beq	171a0 <__assert_fail@plt+0x5980>
   17130:	cmp	r2, #0
   17134:	movne	r0, #115	; 0x73
   17138:	moveq	r0, #83	; 0x53
   1713c:	tst	r3, #4
   17140:	strb	r0, [r1, #6]
   17144:	and	r2, r3, #1
   17148:	movne	ip, #114	; 0x72
   1714c:	moveq	ip, #45	; 0x2d
   17150:	tst	r3, #2
   17154:	movne	r0, #119	; 0x77
   17158:	moveq	r0, #45	; 0x2d
   1715c:	strb	ip, [r1, #7]
   17160:	tst	r3, #512	; 0x200
   17164:	strb	r0, [r1, #8]
   17168:	beq	171b0 <__assert_fail@plt+0x5990>
   1716c:	cmp	r2, #0
   17170:	movne	r0, #116	; 0x74
   17174:	moveq	r0, #84	; 0x54
   17178:	mov	r2, #32
   1717c:	mov	r3, #0
   17180:	strb	r0, [r1, #9]
   17184:	strb	r2, [r1, #10]
   17188:	strb	r3, [r1, #11]
   1718c:	bx	lr
   17190:	cmp	r2, #0
   17194:	movne	r0, #120	; 0x78
   17198:	moveq	r0, #45	; 0x2d
   1719c:	b	17100 <__assert_fail@plt+0x58e0>
   171a0:	cmp	r2, #0
   171a4:	movne	r0, #120	; 0x78
   171a8:	moveq	r0, #45	; 0x2d
   171ac:	b	1713c <__assert_fail@plt+0x591c>
   171b0:	cmp	r2, #0
   171b4:	movne	r0, #120	; 0x78
   171b8:	moveq	r0, #45	; 0x2d
   171bc:	b	17178 <__assert_fail@plt+0x5958>
   171c0:	strd	r4, [sp, #-12]!
   171c4:	mov	r5, r0
   171c8:	str	lr, [sp, #8]
   171cc:	sub	sp, sp, #12
   171d0:	bl	1167c <__errno_location@plt>
   171d4:	mov	r4, r0
   171d8:	mov	r2, #0
   171dc:	ldr	r3, [r4]
   171e0:	mov	r0, r5
   171e4:	str	r2, [r4]
   171e8:	str	r3, [sp]
   171ec:	str	r3, [sp, #4]
   171f0:	bl	11478 <free@plt>
   171f4:	ldr	r3, [r4]
   171f8:	add	r2, sp, #8
   171fc:	clz	r3, r3
   17200:	lsr	r3, r3, #5
   17204:	add	r3, r2, r3, lsl #2
   17208:	ldr	r3, [r3, #-8]
   1720c:	str	r3, [r4]
   17210:	add	sp, sp, #12
   17214:	ldrd	r4, [sp]
   17218:	add	sp, sp, #8
   1721c:	pop	{pc}		; (ldr pc, [sp], #4)
   17220:	mov	r3, #0
   17224:	cmp	r0, #0
   17228:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1722c:	mov	r5, r1
   17230:	sbcs	r1, r1, #0
   17234:	strd	r6, [sp, #8]
   17238:	mov	r4, r0
   1723c:	add	r6, r2, #20
   17240:	str	r8, [sp, #16]
   17244:	str	lr, [sp, #20]
   17248:	strb	r3, [r2, #20]
   1724c:	blt	172ac <__assert_fail@plt+0x5a8c>
   17250:	mov	r0, r4
   17254:	mov	r1, r5
   17258:	mov	r2, #10
   1725c:	mov	r3, #0
   17260:	bl	206e4 <__assert_fail@plt+0xeec4>
   17264:	add	ip, r2, #48	; 0x30
   17268:	mov	r0, r4
   1726c:	mov	r1, r5
   17270:	mov	r3, #0
   17274:	mov	r2, #10
   17278:	strb	ip, [r6, #-1]!
   1727c:	bl	206e4 <__assert_fail@plt+0xeec4>
   17280:	mov	r4, r0
   17284:	mov	r5, r1
   17288:	orrs	r3, r4, r5
   1728c:	bne	17250 <__assert_fail@plt+0x5a30>
   17290:	mov	r0, r6
   17294:	ldrd	r4, [sp]
   17298:	ldrd	r6, [sp, #8]
   1729c:	ldr	r8, [sp, #16]
   172a0:	add	sp, sp, #20
   172a4:	pop	{pc}		; (ldr pc, [sp], #4)
   172a8:	mov	r6, r7
   172ac:	mov	r0, r4
   172b0:	mov	r1, r5
   172b4:	mov	r2, #10
   172b8:	mov	r3, #0
   172bc:	bl	206e4 <__assert_fail@plt+0xeec4>
   172c0:	rsb	ip, r2, #48	; 0x30
   172c4:	mov	r0, r4
   172c8:	mov	r1, r5
   172cc:	mov	r3, #0
   172d0:	mov	r2, #10
   172d4:	strb	ip, [r6, #-1]
   172d8:	sub	r7, r6, #1
   172dc:	bl	206e4 <__assert_fail@plt+0xeec4>
   172e0:	mov	r4, r0
   172e4:	mov	r5, r1
   172e8:	orrs	r3, r4, r5
   172ec:	bne	172a8 <__assert_fail@plt+0x5a88>
   172f0:	mov	r3, #45	; 0x2d
   172f4:	sub	r6, r6, #2
   172f8:	strb	r3, [r7, #-1]
   172fc:	b	17290 <__assert_fail@plt+0x5a70>
   17300:	strd	r4, [sp, #-24]!	; 0xffffffe8
   17304:	mov	r4, r0
   17308:	strd	r6, [sp, #8]
   1730c:	str	r8, [sp, #16]
   17310:	str	lr, [sp, #20]
   17314:	bl	11640 <strlen@plt>
   17318:	add	r0, r0, #1
   1731c:	mov	ip, r4
   17320:	mov	r3, #0
   17324:	b	17338 <__assert_fail@plt+0x5b18>
   17328:	cmp	r0, r2
   1732c:	strb	r1, [ip], #1
   17330:	bls	173a8 <__assert_fail@plt+0x5b88>
   17334:	mov	r3, r2
   17338:	ldrb	r1, [r4, r3]
   1733c:	add	r2, r3, #1
   17340:	cmp	r1, #92	; 0x5c
   17344:	bne	17328 <__assert_fail@plt+0x5b08>
   17348:	add	lr, r3, #4
   1734c:	cmp	lr, r0
   17350:	bcs	17328 <__assert_fail@plt+0x5b08>
   17354:	ldrb	r5, [r4, r2]
   17358:	sub	r5, r5, #48	; 0x30
   1735c:	uxtb	r6, r5
   17360:	cmp	r6, #3
   17364:	bhi	17328 <__assert_fail@plt+0x5b08>
   17368:	add	r3, r4, r3
   1736c:	ldrb	r6, [r3, #2]
   17370:	sub	r6, r6, #48	; 0x30
   17374:	uxtb	r7, r6
   17378:	cmp	r7, #7
   1737c:	bhi	17328 <__assert_fail@plt+0x5b08>
   17380:	ldrb	r3, [r3, #3]
   17384:	sub	r3, r3, #48	; 0x30
   17388:	uxtb	r3, r3
   1738c:	cmp	r3, #7
   17390:	bhi	17328 <__assert_fail@plt+0x5b08>
   17394:	add	r5, r6, r5, lsl #3
   17398:	mov	r2, lr
   1739c:	add	r5, r3, r5, lsl #3
   173a0:	strb	r5, [ip], #1
   173a4:	b	17334 <__assert_fail@plt+0x5b14>
   173a8:	ldrd	r4, [sp]
   173ac:	ldrd	r6, [sp, #8]
   173b0:	ldr	r8, [sp, #16]
   173b4:	add	sp, sp, #20
   173b8:	pop	{pc}		; (ldr pc, [sp], #4)
   173bc:	movw	r1, #9880	; 0x2698
   173c0:	movt	r1, #2
   173c4:	strd	r4, [sp, #-36]!	; 0xffffffdc
   173c8:	movw	r0, #9800	; 0x2648
   173cc:	movt	r0, #2
   173d0:	strd	r6, [sp, #8]
   173d4:	strd	r8, [sp, #16]
   173d8:	strd	sl, [sp, #24]
   173dc:	str	lr, [sp, #32]
   173e0:	sub	sp, sp, #44	; 0x2c
   173e4:	bl	1179c <fopen64@plt>
   173e8:	subs	r8, r0, #0
   173ec:	beq	17874 <__assert_fail@plt+0x6054>
   173f0:	movw	r2, #9844	; 0x2674
   173f4:	movt	r2, #2
   173f8:	mov	r3, #0
   173fc:	movw	r9, #9824	; 0x2660
   17400:	movt	r9, #2
   17404:	add	sl, sp, #16
   17408:	str	r2, [sp, #8]
   1740c:	mov	r2, #65280	; 0xff00
   17410:	movt	r2, #15
   17414:	str	r2, [sp, #12]
   17418:	str	r3, [sp, #20]
   1741c:	str	r3, [sp, #24]
   17420:	mov	r3, r8
   17424:	mov	r2, #10
   17428:	add	r1, sp, #24
   1742c:	add	r0, sp, #20
   17430:	bl	11424 <__getdelim@plt>
   17434:	cmn	r0, #1
   17438:	beq	17600 <__assert_fail@plt+0x5de0>
   1743c:	add	ip, sp, #36	; 0x24
   17440:	add	r3, sp, #32
   17444:	ldr	r0, [sp, #20]
   17448:	add	r2, sp, #28
   1744c:	mov	r1, r9
   17450:	str	ip, [sp]
   17454:	bl	11760 <sscanf@plt>
   17458:	sub	r0, r0, #2
   1745c:	cmp	r0, #1
   17460:	bhi	17420 <__assert_fail@plt+0x5c00>
   17464:	ldr	r5, [sp, #20]
   17468:	mov	r1, #32
   1746c:	ldr	r3, [sp, #36]	; 0x24
   17470:	add	r5, r5, r3
   17474:	mov	r0, r5
   17478:	bl	1164c <strchr@plt>
   1747c:	subs	r4, r0, #0
   17480:	beq	17420 <__assert_fail@plt+0x5c00>
   17484:	mov	r6, #0
   17488:	mov	r1, #32
   1748c:	strb	r6, [r4], #1
   17490:	mov	r0, r4
   17494:	bl	1164c <strchr@plt>
   17498:	cmp	r0, #0
   1749c:	beq	17420 <__assert_fail@plt+0x5c00>
   174a0:	strb	r6, [r0], #1
   174a4:	ldr	r1, [sp, #8]
   174a8:	bl	1f604 <__assert_fail@plt+0xdde4>
   174ac:	cmp	r0, #0
   174b0:	beq	17420 <__assert_fail@plt+0x5c00>
   174b4:	add	r7, r0, #3
   174b8:	mov	r1, #32
   174bc:	mov	r0, r7
   174c0:	bl	1164c <strchr@plt>
   174c4:	subs	fp, r0, #0
   174c8:	beq	17420 <__assert_fail@plt+0x5c00>
   174cc:	mov	r1, #32
   174d0:	strb	r6, [fp], #1
   174d4:	mov	r0, fp
   174d8:	bl	1164c <strchr@plt>
   174dc:	cmp	r0, #0
   174e0:	beq	17420 <__assert_fail@plt+0x5c00>
   174e4:	strb	r6, [r0]
   174e8:	mov	r0, fp
   174ec:	bl	17300 <__assert_fail@plt+0x5ae0>
   174f0:	mov	r0, r4
   174f4:	bl	17300 <__assert_fail@plt+0x5ae0>
   174f8:	mov	r0, r5
   174fc:	bl	17300 <__assert_fail@plt+0x5ae0>
   17500:	mov	r0, r7
   17504:	bl	17300 <__assert_fail@plt+0x5ae0>
   17508:	mov	r0, #32
   1750c:	bl	1e908 <__assert_fail@plt+0xd0e8>
   17510:	mov	r6, r0
   17514:	mov	r0, fp
   17518:	bl	1ee74 <__assert_fail@plt+0xd654>
   1751c:	str	r0, [r6]
   17520:	mov	r0, r4
   17524:	bl	1ee74 <__assert_fail@plt+0xd654>
   17528:	str	r0, [r6, #4]
   1752c:	mov	r0, r5
   17530:	bl	1ee74 <__assert_fail@plt+0xd654>
   17534:	str	r0, [r6, #8]
   17538:	mov	r0, r7
   1753c:	bl	1ee74 <__assert_fail@plt+0xd654>
   17540:	ldr	r1, [sp, #12]
   17544:	mov	r2, #0
   17548:	movt	r2, #65520	; 0xfff0
   1754c:	str	r0, [r6, #12]
   17550:	mov	r4, r0
   17554:	ldr	ip, [sp, #28]
   17558:	ldr	r5, [sp, #32]
   1755c:	ldrb	r3, [r6, #24]
   17560:	and	lr, r1, ip, lsl #8
   17564:	bic	ip, ip, #4080	; 0xff0
   17568:	bic	ip, ip, #15
   1756c:	and	r1, r2, r5, lsl #12
   17570:	uxtb	r2, r5
   17574:	orr	ip, ip, r5, lsr #20
   17578:	orr	r2, r2, lr
   1757c:	orr	r2, r1, r2
   17580:	orr	r3, r3, #4
   17584:	movw	r1, #3768	; 0xeb8
   17588:	movt	r1, #2
   1758c:	str	r2, [r6, #16]
   17590:	str	ip, [r6, #20]
   17594:	strb	r3, [r6, #24]
   17598:	bl	1143c <strcmp@plt>
   1759c:	cmp	r0, #0
   175a0:	beq	175bc <__assert_fail@plt+0x5d9c>
   175a4:	movw	r1, #4488	; 0x1188
   175a8:	movt	r1, #2
   175ac:	mov	r0, r4
   175b0:	bl	1143c <strcmp@plt>
   175b4:	cmp	r0, #0
   175b8:	bne	17650 <__assert_fail@plt+0x5e30>
   175bc:	mov	r0, #1
   175c0:	ldrb	r3, [r6, #24]
   175c4:	mov	r1, #58	; 0x3a
   175c8:	ldr	r5, [r6]
   175cc:	bfi	r3, r0, #0, #1
   175d0:	mov	r0, r5
   175d4:	strb	r3, [r6, #24]
   175d8:	bl	1164c <strchr@plt>
   175dc:	cmp	r0, #0
   175e0:	beq	17774 <__assert_fail@plt+0x5f54>
   175e4:	mov	r0, #1
   175e8:	ldrb	r3, [r6, #24]
   175ec:	bfi	r3, r0, #1, #1
   175f0:	strb	r3, [r6, #24]
   175f4:	str	r6, [sl]
   175f8:	add	sl, r6, #28
   175fc:	b	17420 <__assert_fail@plt+0x5c00>
   17600:	ldr	r0, [sp, #20]
   17604:	bl	171c0 <__assert_fail@plt+0x59a0>
   17608:	ldr	r3, [r8]
   1760c:	tst	r3, #32
   17610:	bne	17c54 <__assert_fail@plt+0x6434>
   17614:	mov	r0, r8
   17618:	bl	1fedc <__assert_fail@plt+0xe6bc>
   1761c:	cmn	r0, #1
   17620:	beq	17ac8 <__assert_fail@plt+0x62a8>
   17624:	mov	r3, #0
   17628:	str	r3, [sl]
   1762c:	ldr	r6, [sp, #16]
   17630:	mov	r0, r6
   17634:	add	sp, sp, #44	; 0x2c
   17638:	ldrd	r4, [sp]
   1763c:	ldrd	r6, [sp, #8]
   17640:	ldrd	r8, [sp, #16]
   17644:	ldrd	sl, [sp, #24]
   17648:	add	sp, sp, #32
   1764c:	pop	{pc}		; (ldr pc, [sp], #4)
   17650:	movw	r1, #9848	; 0x2678
   17654:	movt	r1, #2
   17658:	mov	r0, r4
   1765c:	bl	1143c <strcmp@plt>
   17660:	cmp	r0, #0
   17664:	beq	175bc <__assert_fail@plt+0x5d9c>
   17668:	movw	r1, #3956	; 0xf74
   1766c:	movt	r1, #2
   17670:	mov	r0, r4
   17674:	bl	1143c <strcmp@plt>
   17678:	cmp	r0, #0
   1767c:	beq	175bc <__assert_fail@plt+0x5d9c>
   17680:	movw	r1, #3980	; 0xf8c
   17684:	movt	r1, #2
   17688:	mov	r0, r4
   1768c:	bl	1143c <strcmp@plt>
   17690:	cmp	r0, #0
   17694:	beq	175bc <__assert_fail@plt+0x5d9c>
   17698:	movw	r1, #4108	; 0x100c
   1769c:	movt	r1, #2
   176a0:	mov	r0, r4
   176a4:	bl	1143c <strcmp@plt>
   176a8:	cmp	r0, #0
   176ac:	beq	175bc <__assert_fail@plt+0x5d9c>
   176b0:	movw	r1, #9856	; 0x2680
   176b4:	movt	r1, #2
   176b8:	mov	r0, r4
   176bc:	bl	1143c <strcmp@plt>
   176c0:	cmp	r0, #0
   176c4:	beq	175bc <__assert_fail@plt+0x5d9c>
   176c8:	movw	r1, #4368	; 0x1110
   176cc:	movt	r1, #2
   176d0:	mov	r0, r4
   176d4:	bl	1143c <strcmp@plt>
   176d8:	cmp	r0, #0
   176dc:	beq	175bc <__assert_fail@plt+0x5d9c>
   176e0:	movw	r1, #4556	; 0x11cc
   176e4:	movt	r1, #2
   176e8:	mov	r0, r4
   176ec:	bl	1143c <strcmp@plt>
   176f0:	cmp	r0, #0
   176f4:	beq	175bc <__assert_fail@plt+0x5d9c>
   176f8:	movw	r1, #4660	; 0x1234
   176fc:	movt	r1, #2
   17700:	mov	r0, r4
   17704:	bl	1143c <strcmp@plt>
   17708:	cmp	r0, #0
   1770c:	beq	175bc <__assert_fail@plt+0x5d9c>
   17710:	movw	r1, #3964	; 0xf7c
   17714:	movt	r1, #2
   17718:	mov	r0, r4
   1771c:	bl	1143c <strcmp@plt>
   17720:	cmp	r0, #0
   17724:	beq	175bc <__assert_fail@plt+0x5d9c>
   17728:	movw	r1, #9868	; 0x268c
   1772c:	movt	r1, #2
   17730:	mov	r0, r4
   17734:	bl	1143c <strcmp@plt>
   17738:	cmp	r0, #0
   1773c:	beq	175bc <__assert_fail@plt+0x5d9c>
   17740:	movw	r1, #9876	; 0x2694
   17744:	movt	r1, #2
   17748:	mov	r0, r4
   1774c:	bl	1143c <strcmp@plt>
   17750:	cmp	r0, #0
   17754:	beq	175bc <__assert_fail@plt+0x5d9c>
   17758:	movw	r1, #9884	; 0x269c
   1775c:	movt	r1, #2
   17760:	mov	r0, r4
   17764:	bl	1143c <strcmp@plt>
   17768:	clz	r0, r0
   1776c:	lsr	r0, r0, #5
   17770:	b	175c0 <__assert_fail@plt+0x5da0>
   17774:	ldrb	r3, [r5]
   17778:	cmp	r3, #47	; 0x2f
   1777c:	beq	17cc8 <__assert_fail@plt+0x64a8>
   17780:	movw	r1, #4812	; 0x12cc
   17784:	movt	r1, #2
   17788:	mov	r0, r4
   1778c:	bl	1143c <strcmp@plt>
   17790:	cmp	r0, #0
   17794:	beq	175e4 <__assert_fail@plt+0x5dc4>
   17798:	movw	r1, #3740	; 0xe9c
   1779c:	movt	r1, #2
   177a0:	mov	r0, r4
   177a4:	bl	1143c <strcmp@plt>
   177a8:	cmp	r0, #0
   177ac:	beq	175e4 <__assert_fail@plt+0x5dc4>
   177b0:	movw	r1, #3904	; 0xf40
   177b4:	movt	r1, #2
   177b8:	mov	r0, r4
   177bc:	bl	1143c <strcmp@plt>
   177c0:	cmp	r0, #0
   177c4:	beq	175e4 <__assert_fail@plt+0x5dc4>
   177c8:	movw	r1, #9908	; 0x26b4
   177cc:	movt	r1, #2
   177d0:	mov	r0, r4
   177d4:	bl	1143c <strcmp@plt>
   177d8:	cmp	r0, #0
   177dc:	beq	175e4 <__assert_fail@plt+0x5dc4>
   177e0:	movw	r1, #4092	; 0xffc
   177e4:	movt	r1, #2
   177e8:	mov	r0, r4
   177ec:	bl	1143c <strcmp@plt>
   177f0:	cmp	r0, #0
   177f4:	beq	175e4 <__assert_fail@plt+0x5dc4>
   177f8:	movw	r1, #4136	; 0x1028
   177fc:	movt	r1, #2
   17800:	mov	r0, r4
   17804:	bl	1143c <strcmp@plt>
   17808:	cmp	r0, #0
   1780c:	beq	175e4 <__assert_fail@plt+0x5dc4>
   17810:	movw	r1, #4200	; 0x1068
   17814:	movt	r1, #2
   17818:	mov	r0, r4
   1781c:	bl	1143c <strcmp@plt>
   17820:	cmp	r0, #0
   17824:	beq	175e4 <__assert_fail@plt+0x5dc4>
   17828:	movw	r1, #4440	; 0x1158
   1782c:	movt	r1, #2
   17830:	mov	r0, r4
   17834:	bl	1143c <strcmp@plt>
   17838:	cmp	r0, #0
   1783c:	beq	175e4 <__assert_fail@plt+0x5dc4>
   17840:	mov	r0, r4
   17844:	movw	r1, #4760	; 0x1298
   17848:	movt	r1, #2
   1784c:	bl	1143c <strcmp@plt>
   17850:	cmp	r0, #0
   17854:	beq	175e4 <__assert_fail@plt+0x5dc4>
   17858:	mov	r1, r5
   1785c:	movw	r0, #9920	; 0x26c0
   17860:	movt	r0, #2
   17864:	bl	1143c <strcmp@plt>
   17868:	clz	r0, r0
   1786c:	lsr	r0, r0, #5
   17870:	b	175e8 <__assert_fail@plt+0x5dc8>
   17874:	movw	r1, #9356	; 0x248c
   17878:	movt	r1, #2
   1787c:	movw	r0, #9928	; 0x26c8
   17880:	movt	r0, #2
   17884:	bl	117b4 <setmntent@plt>
   17888:	subs	r6, r0, #0
   1788c:	beq	17630 <__assert_fail@plt+0x5e10>
   17890:	mov	r0, r6
   17894:	movw	r8, #9940	; 0x26d4
   17898:	movt	r8, #2
   1789c:	movw	r7, #3768	; 0xeb8
   178a0:	movt	r7, #2
   178a4:	movw	fp, #4488	; 0x1188
   178a8:	movt	fp, #2
   178ac:	add	sl, sp, #16
   178b0:	bl	11580 <getmntent@plt>
   178b4:	subs	r5, r0, #0
   178b8:	beq	17ab8 <__assert_fail@plt+0x6298>
   178bc:	mov	r1, r8
   178c0:	bl	11550 <hasmntopt@plt>
   178c4:	mov	r9, r0
   178c8:	mov	r0, #32
   178cc:	bl	1e908 <__assert_fail@plt+0xd0e8>
   178d0:	mov	r4, r0
   178d4:	ldr	r0, [r5]
   178d8:	bl	1ee74 <__assert_fail@plt+0xd654>
   178dc:	str	r0, [r4]
   178e0:	ldr	r0, [r5, #4]
   178e4:	bl	1ee74 <__assert_fail@plt+0xd654>
   178e8:	mov	r3, #0
   178ec:	str	r0, [r4, #4]
   178f0:	ldr	r0, [r5, #8]
   178f4:	str	r3, [r4, #8]
   178f8:	bl	1ee74 <__assert_fail@plt+0xd654>
   178fc:	ldrb	r3, [r4, #24]
   17900:	mov	r1, r7
   17904:	mov	r5, r0
   17908:	str	r0, [r4, #12]
   1790c:	orr	r3, r3, #4
   17910:	strb	r3, [r4, #24]
   17914:	bl	1143c <strcmp@plt>
   17918:	cmp	r0, #0
   1791c:	beq	17a5c <__assert_fail@plt+0x623c>
   17920:	mov	r1, fp
   17924:	mov	r0, r5
   17928:	bl	1143c <strcmp@plt>
   1792c:	cmp	r0, #0
   17930:	beq	17a5c <__assert_fail@plt+0x623c>
   17934:	movw	r1, #9848	; 0x2678
   17938:	movt	r1, #2
   1793c:	mov	r0, r5
   17940:	bl	1143c <strcmp@plt>
   17944:	cmp	r0, #0
   17948:	beq	17a5c <__assert_fail@plt+0x623c>
   1794c:	movw	r1, #3956	; 0xf74
   17950:	movt	r1, #2
   17954:	mov	r0, r5
   17958:	bl	1143c <strcmp@plt>
   1795c:	cmp	r0, #0
   17960:	beq	17a5c <__assert_fail@plt+0x623c>
   17964:	movw	r1, #3980	; 0xf8c
   17968:	movt	r1, #2
   1796c:	mov	r0, r5
   17970:	bl	1143c <strcmp@plt>
   17974:	cmp	r0, #0
   17978:	beq	17a5c <__assert_fail@plt+0x623c>
   1797c:	movw	r1, #4108	; 0x100c
   17980:	movt	r1, #2
   17984:	mov	r0, r5
   17988:	bl	1143c <strcmp@plt>
   1798c:	cmp	r0, #0
   17990:	beq	17a5c <__assert_fail@plt+0x623c>
   17994:	movw	r1, #9856	; 0x2680
   17998:	movt	r1, #2
   1799c:	mov	r0, r5
   179a0:	bl	1143c <strcmp@plt>
   179a4:	cmp	r0, #0
   179a8:	beq	17a5c <__assert_fail@plt+0x623c>
   179ac:	movw	r1, #4368	; 0x1110
   179b0:	movt	r1, #2
   179b4:	mov	r0, r5
   179b8:	bl	1143c <strcmp@plt>
   179bc:	cmp	r0, #0
   179c0:	beq	17a5c <__assert_fail@plt+0x623c>
   179c4:	movw	r1, #4556	; 0x11cc
   179c8:	movt	r1, #2
   179cc:	mov	r0, r5
   179d0:	bl	1143c <strcmp@plt>
   179d4:	cmp	r0, #0
   179d8:	beq	17a5c <__assert_fail@plt+0x623c>
   179dc:	movw	r1, #4660	; 0x1234
   179e0:	movt	r1, #2
   179e4:	mov	r0, r5
   179e8:	bl	1143c <strcmp@plt>
   179ec:	cmp	r0, #0
   179f0:	beq	17a5c <__assert_fail@plt+0x623c>
   179f4:	movw	r1, #3964	; 0xf7c
   179f8:	movt	r1, #2
   179fc:	mov	r0, r5
   17a00:	bl	1143c <strcmp@plt>
   17a04:	cmp	r0, #0
   17a08:	beq	17a5c <__assert_fail@plt+0x623c>
   17a0c:	movw	r1, #9868	; 0x268c
   17a10:	movt	r1, #2
   17a14:	mov	r0, r5
   17a18:	bl	1143c <strcmp@plt>
   17a1c:	cmp	r0, #0
   17a20:	beq	17a5c <__assert_fail@plt+0x623c>
   17a24:	movw	r1, #9876	; 0x2694
   17a28:	movt	r1, #2
   17a2c:	mov	r0, r5
   17a30:	bl	1143c <strcmp@plt>
   17a34:	cmp	r0, #0
   17a38:	beq	17a5c <__assert_fail@plt+0x623c>
   17a3c:	movw	r1, #9884	; 0x269c
   17a40:	movt	r1, #2
   17a44:	mov	r0, r5
   17a48:	bl	1143c <strcmp@plt>
   17a4c:	orrs	r3, r9, r0
   17a50:	moveq	r2, #1
   17a54:	movne	r2, #0
   17a58:	b	17a60 <__assert_fail@plt+0x6240>
   17a5c:	mov	r2, #1
   17a60:	ldrb	r3, [r4, #24]
   17a64:	mov	r1, #58	; 0x3a
   17a68:	ldr	r9, [r4]
   17a6c:	bfi	r3, r2, #0, #1
   17a70:	mov	r0, r9
   17a74:	strb	r3, [r4, #24]
   17a78:	bl	1164c <strchr@plt>
   17a7c:	cmp	r0, #0
   17a80:	beq	17b54 <__assert_fail@plt+0x6334>
   17a84:	mov	r0, #1
   17a88:	ldrb	r1, [r4, #24]
   17a8c:	mvn	r2, #0
   17a90:	mvn	r3, #0
   17a94:	strd	r2, [r4, #16]
   17a98:	bfi	r1, r0, #1, #1
   17a9c:	mov	r0, r6
   17aa0:	strb	r1, [r4, #24]
   17aa4:	str	r4, [sl]
   17aa8:	add	sl, r4, #28
   17aac:	bl	11580 <getmntent@plt>
   17ab0:	subs	r5, r0, #0
   17ab4:	bne	178bc <__assert_fail@plt+0x609c>
   17ab8:	mov	r0, r6
   17abc:	bl	1170c <endmntent@plt>
   17ac0:	cmp	r0, #0
   17ac4:	bne	17624 <__assert_fail@plt+0x5e04>
   17ac8:	bl	1167c <__errno_location@plt>
   17acc:	ldr	r8, [r0]
   17ad0:	mov	r7, r0
   17ad4:	mov	r3, #0
   17ad8:	str	r3, [sl]
   17adc:	ldr	r4, [sp, #16]
   17ae0:	cmp	r4, r3
   17ae4:	bne	17b00 <__assert_fail@plt+0x62e0>
   17ae8:	b	17b48 <__assert_fail@plt+0x6328>
   17aec:	bl	171c0 <__assert_fail@plt+0x59a0>
   17af0:	cmp	r5, #0
   17af4:	str	r5, [sp, #16]
   17af8:	beq	17b48 <__assert_fail@plt+0x6328>
   17afc:	mov	r4, r5
   17b00:	ldr	r0, [r4]
   17b04:	ldr	r5, [r4, #28]
   17b08:	bl	171c0 <__assert_fail@plt+0x59a0>
   17b0c:	ldr	r0, [r4, #4]
   17b10:	bl	171c0 <__assert_fail@plt+0x59a0>
   17b14:	ldr	r0, [r4, #8]
   17b18:	bl	171c0 <__assert_fail@plt+0x59a0>
   17b1c:	ldrb	r3, [r4, #24]
   17b20:	mov	r0, r4
   17b24:	tst	r3, #4
   17b28:	beq	17aec <__assert_fail@plt+0x62cc>
   17b2c:	ldr	r0, [r4, #12]
   17b30:	bl	171c0 <__assert_fail@plt+0x59a0>
   17b34:	mov	r0, r4
   17b38:	bl	171c0 <__assert_fail@plt+0x59a0>
   17b3c:	cmp	r5, #0
   17b40:	str	r5, [sp, #16]
   17b44:	bne	17afc <__assert_fail@plt+0x62dc>
   17b48:	mov	r6, #0
   17b4c:	str	r8, [r7]
   17b50:	b	17630 <__assert_fail@plt+0x5e10>
   17b54:	ldrb	r3, [r9]
   17b58:	cmp	r3, #47	; 0x2f
   17b5c:	beq	17c70 <__assert_fail@plt+0x6450>
   17b60:	movw	r1, #4812	; 0x12cc
   17b64:	movt	r1, #2
   17b68:	mov	r0, r5
   17b6c:	bl	1143c <strcmp@plt>
   17b70:	cmp	r0, #0
   17b74:	beq	17a84 <__assert_fail@plt+0x6264>
   17b78:	movw	r1, #3740	; 0xe9c
   17b7c:	movt	r1, #2
   17b80:	mov	r0, r5
   17b84:	bl	1143c <strcmp@plt>
   17b88:	cmp	r0, #0
   17b8c:	beq	17a84 <__assert_fail@plt+0x6264>
   17b90:	movw	r1, #3904	; 0xf40
   17b94:	movt	r1, #2
   17b98:	mov	r0, r5
   17b9c:	bl	1143c <strcmp@plt>
   17ba0:	cmp	r0, #0
   17ba4:	beq	17a84 <__assert_fail@plt+0x6264>
   17ba8:	movw	r1, #9908	; 0x26b4
   17bac:	movt	r1, #2
   17bb0:	mov	r0, r5
   17bb4:	bl	1143c <strcmp@plt>
   17bb8:	cmp	r0, #0
   17bbc:	beq	17a84 <__assert_fail@plt+0x6264>
   17bc0:	movw	r1, #4092	; 0xffc
   17bc4:	movt	r1, #2
   17bc8:	mov	r0, r5
   17bcc:	bl	1143c <strcmp@plt>
   17bd0:	cmp	r0, #0
   17bd4:	beq	17a84 <__assert_fail@plt+0x6264>
   17bd8:	movw	r1, #4136	; 0x1028
   17bdc:	movt	r1, #2
   17be0:	mov	r0, r5
   17be4:	bl	1143c <strcmp@plt>
   17be8:	cmp	r0, #0
   17bec:	beq	17a84 <__assert_fail@plt+0x6264>
   17bf0:	movw	r1, #4200	; 0x1068
   17bf4:	movt	r1, #2
   17bf8:	mov	r0, r5
   17bfc:	bl	1143c <strcmp@plt>
   17c00:	cmp	r0, #0
   17c04:	beq	17a84 <__assert_fail@plt+0x6264>
   17c08:	movw	r1, #4440	; 0x1158
   17c0c:	movt	r1, #2
   17c10:	mov	r0, r5
   17c14:	bl	1143c <strcmp@plt>
   17c18:	cmp	r0, #0
   17c1c:	beq	17a84 <__assert_fail@plt+0x6264>
   17c20:	mov	r0, r5
   17c24:	movw	r1, #4760	; 0x1298
   17c28:	movt	r1, #2
   17c2c:	bl	1143c <strcmp@plt>
   17c30:	cmp	r0, #0
   17c34:	beq	17a84 <__assert_fail@plt+0x6264>
   17c38:	mov	r1, r9
   17c3c:	movw	r0, #9920	; 0x26c0
   17c40:	movt	r0, #2
   17c44:	bl	1143c <strcmp@plt>
   17c48:	clz	r0, r0
   17c4c:	lsr	r0, r0, #5
   17c50:	b	17a88 <__assert_fail@plt+0x6268>
   17c54:	bl	1167c <__errno_location@plt>
   17c58:	mov	r7, r0
   17c5c:	mov	r0, r8
   17c60:	ldr	r8, [r7]
   17c64:	bl	1fedc <__assert_fail@plt+0xe6bc>
   17c68:	str	r8, [r7]
   17c6c:	b	17ad4 <__assert_fail@plt+0x62b4>
   17c70:	ldrb	r3, [r9, #1]
   17c74:	cmp	r3, #47	; 0x2f
   17c78:	bne	17b60 <__assert_fail@plt+0x6340>
   17c7c:	movw	r1, #9892	; 0x26a4
   17c80:	movt	r1, #2
   17c84:	mov	r0, r5
   17c88:	bl	1143c <strcmp@plt>
   17c8c:	cmp	r0, #0
   17c90:	beq	17a84 <__assert_fail@plt+0x6264>
   17c94:	movw	r1, #9900	; 0x26ac
   17c98:	movt	r1, #2
   17c9c:	mov	r0, r5
   17ca0:	bl	1143c <strcmp@plt>
   17ca4:	cmp	r0, #0
   17ca8:	beq	17a84 <__assert_fail@plt+0x6264>
   17cac:	movw	r1, #3896	; 0xf38
   17cb0:	movt	r1, #2
   17cb4:	mov	r0, r5
   17cb8:	bl	1143c <strcmp@plt>
   17cbc:	cmp	r0, #0
   17cc0:	beq	17a84 <__assert_fail@plt+0x6264>
   17cc4:	b	17b60 <__assert_fail@plt+0x6340>
   17cc8:	ldrb	r3, [r5, #1]
   17ccc:	cmp	r3, #47	; 0x2f
   17cd0:	bne	17780 <__assert_fail@plt+0x5f60>
   17cd4:	movw	r1, #9892	; 0x26a4
   17cd8:	movt	r1, #2
   17cdc:	mov	r0, r4
   17ce0:	bl	1143c <strcmp@plt>
   17ce4:	cmp	r0, #0
   17ce8:	beq	175e4 <__assert_fail@plt+0x5dc4>
   17cec:	movw	r1, #9900	; 0x26ac
   17cf0:	movt	r1, #2
   17cf4:	mov	r0, r4
   17cf8:	bl	1143c <strcmp@plt>
   17cfc:	cmp	r0, #0
   17d00:	beq	175e4 <__assert_fail@plt+0x5dc4>
   17d04:	movw	r1, #3896	; 0xf38
   17d08:	movt	r1, #2
   17d0c:	mov	r0, r4
   17d10:	bl	1143c <strcmp@plt>
   17d14:	cmp	r0, #0
   17d18:	beq	175e4 <__assert_fail@plt+0x5dc4>
   17d1c:	b	17780 <__assert_fail@plt+0x5f60>
   17d20:	str	r4, [sp, #-8]!
   17d24:	mov	r4, r0
   17d28:	ldr	r0, [r0]
   17d2c:	str	lr, [sp, #4]
   17d30:	bl	171c0 <__assert_fail@plt+0x59a0>
   17d34:	ldr	r0, [r4, #4]
   17d38:	bl	171c0 <__assert_fail@plt+0x59a0>
   17d3c:	ldr	r0, [r4, #8]
   17d40:	bl	171c0 <__assert_fail@plt+0x59a0>
   17d44:	ldrb	r3, [r4, #24]
   17d48:	tst	r3, #4
   17d4c:	bne	17d64 <__assert_fail@plt+0x6544>
   17d50:	mov	r0, r4
   17d54:	ldr	r4, [sp]
   17d58:	ldr	lr, [sp, #4]
   17d5c:	add	sp, sp, #8
   17d60:	b	171c0 <__assert_fail@plt+0x59a0>
   17d64:	ldr	r0, [r4, #12]
   17d68:	bl	171c0 <__assert_fail@plt+0x59a0>
   17d6c:	b	17d50 <__assert_fail@plt+0x6530>
   17d70:	strd	r4, [sp, #-36]!	; 0xffffffdc
   17d74:	mov	r4, r3
   17d78:	strd	r6, [sp, #8]
   17d7c:	strd	r8, [sp, #16]
   17d80:	strd	sl, [sp, #24]
   17d84:	str	lr, [sp, #32]
   17d88:	sub	sp, sp, #1184	; 0x4a0
   17d8c:	sub	sp, sp, #12
   17d90:	str	r1, [sp, #48]	; 0x30
   17d94:	str	r3, [sp, #100]	; 0x64
   17d98:	ldrb	r3, [sp, #1232]	; 0x4d0
   17d9c:	str	r2, [sp, #52]	; 0x34
   17da0:	str	r0, [sp, #84]	; 0x54
   17da4:	str	r3, [sp, #96]	; 0x60
   17da8:	bl	1167c <__errno_location@plt>
   17dac:	ldr	r1, [r0]
   17db0:	movw	r3, #3392	; 0xd40
   17db4:	movt	r3, #2
   17db8:	str	r0, [sp, #88]	; 0x58
   17dbc:	ldr	r2, [r4, #40]	; 0x28
   17dc0:	ldr	ip, [r4, #8]
   17dc4:	ldr	fp, [sp, #1240]	; 0x4d8
   17dc8:	cmp	r2, #0
   17dcc:	ldr	r9, [sp, #1252]	; 0x4e4
   17dd0:	str	r1, [sp, #104]	; 0x68
   17dd4:	mov	r1, r2
   17dd8:	moveq	r1, r3
   17ddc:	cmp	ip, #12
   17de0:	str	ip, [sp, #80]	; 0x50
   17de4:	subgt	r3, ip, #12
   17de8:	str	r1, [sp, #112]	; 0x70
   17dec:	strgt	r3, [sp, #80]	; 0x50
   17df0:	bgt	17e04 <__assert_fail@plt+0x65e4>
   17df4:	cmp	ip, #0
   17df8:	mov	r3, ip
   17dfc:	moveq	r3, #12
   17e00:	str	r3, [sp, #80]	; 0x50
   17e04:	ldr	r3, [sp, #52]	; 0x34
   17e08:	ldrb	r1, [r3]
   17e0c:	cmp	r1, #0
   17e10:	beq	19604 <__assert_fail@plt+0x7de4>
   17e14:	movw	r8, #34079	; 0x851f
   17e18:	movt	r8, #20971	; 0x51eb
   17e1c:	asr	r2, r9, #31
   17e20:	movw	r3, #26215	; 0x6667
   17e24:	movt	r3, #26214	; 0x6666
   17e28:	smull	r0, r8, r8, r9
   17e2c:	movw	r4, #46473	; 0xb589
   17e30:	movt	r4, #5368	; 0x14f8
   17e34:	smull	r0, r6, r3, r9
   17e38:	movw	ip, #51819	; 0xca6b
   17e3c:	movt	ip, #27487	; 0x6b5f
   17e40:	movw	r5, #35757	; 0x8bad
   17e44:	movt	r5, #26843	; 0x68db
   17e48:	smull	r0, r4, r4, r9
   17e4c:	rsb	r8, r2, r8, asr #5
   17e50:	movw	r7, #19923	; 0x4dd3
   17e54:	movt	r7, #4194	; 0x1062
   17e58:	smull	sl, ip, ip, r9
   17e5c:	movw	lr, #56963	; 0xde83
   17e60:	movt	lr, #17179	; 0x431b
   17e64:	smull	r0, r5, r5, r9
   17e68:	movw	sl, #46021	; 0xb3c5
   17e6c:	movt	sl, #37282	; 0x91a2
   17e70:	asr	r6, r6, #2
   17e74:	str	r8, [sp, #44]	; 0x2c
   17e78:	smull	r0, r7, r7, r9
   17e7c:	str	sl, [sp, #116]	; 0x74
   17e80:	movw	sl, #52429	; 0xcccd
   17e84:	movt	sl, #52428	; 0xcccc
   17e88:	sub	r8, r6, r2
   17e8c:	rsb	r6, r2, r4, asr #13
   17e90:	rsb	r4, r2, ip, asr #22
   17e94:	ldr	ip, [sp, #44]	; 0x2c
   17e98:	rsb	r5, r2, r5, asr #12
   17e9c:	rsb	r7, r2, r7, asr #6
   17ea0:	str	r4, [sp, #28]
   17ea4:	smull	r0, lr, lr, r9
   17ea8:	movw	r0, #15241	; 0x3b89
   17eac:	movt	r0, #21990	; 0x55e6
   17eb0:	str	r6, [sp, #36]	; 0x24
   17eb4:	str	r5, [sp, #40]	; 0x28
   17eb8:	smull	r5, r6, r3, ip
   17ebc:	str	r8, [sp, #56]	; 0x38
   17ec0:	rsb	lr, r2, lr, asr #18
   17ec4:	str	r8, [sp, #76]	; 0x4c
   17ec8:	smull	r5, r8, r3, r8
   17ecc:	smull	r4, r5, r3, r7
   17ed0:	ldr	r4, [sp, #40]	; 0x28
   17ed4:	str	lr, [sp, #32]
   17ed8:	smull	lr, r0, r0, r9
   17edc:	str	r7, [sp, #72]	; 0x48
   17ee0:	str	sl, [sp, #108]	; 0x6c
   17ee4:	mov	sl, #0
   17ee8:	rsb	r2, r2, r0, asr #25
   17eec:	smull	ip, r4, r3, r4
   17ef0:	ldr	ip, [sp, #36]	; 0x24
   17ef4:	str	r2, [sp, #92]	; 0x5c
   17ef8:	ldr	r2, [sp, #44]	; 0x2c
   17efc:	smull	r7, lr, r3, ip
   17f00:	ldr	ip, [sp, #32]
   17f04:	asr	r2, r2, #31
   17f08:	smull	r7, ip, r3, ip
   17f0c:	ldr	r7, [sp, #28]
   17f10:	rsb	r6, r2, r6, asr #2
   17f14:	ldr	r2, [sp, #40]	; 0x28
   17f18:	add	r6, r6, r6, lsl #2
   17f1c:	smull	r7, r3, r3, r7
   17f20:	ldr	r7, [sp, #76]	; 0x4c
   17f24:	asr	r2, r2, #31
   17f28:	rsb	r4, r2, r4, asr #2
   17f2c:	asr	r7, r7, #31
   17f30:	rsb	r8, r7, r8, asr #2
   17f34:	ldr	r7, [sp, #72]	; 0x48
   17f38:	str	r4, [sp, #68]	; 0x44
   17f3c:	ldr	r4, [sp, #32]
   17f40:	asr	r0, r7, #31
   17f44:	add	r7, r8, r8, lsl #2
   17f48:	rsb	r5, r0, r5, asr #2
   17f4c:	ldr	r0, [sp, #36]	; 0x24
   17f50:	asr	r2, r4, #31
   17f54:	add	r5, r5, r5, lsl #2
   17f58:	rsb	r2, r2, ip, asr #2
   17f5c:	ldr	ip, [sp, #92]	; 0x5c
   17f60:	asr	r0, r0, #31
   17f64:	str	r2, [sp, #60]	; 0x3c
   17f68:	movw	r2, #26215	; 0x6667
   17f6c:	movt	r2, #26214	; 0x6666
   17f70:	rsb	lr, r0, lr, asr #2
   17f74:	str	lr, [sp, #64]	; 0x40
   17f78:	ldr	lr, [sp, #28]
   17f7c:	asr	r0, lr, #31
   17f80:	smull	lr, r2, r2, ip
   17f84:	ldr	ip, [sp, #56]	; 0x38
   17f88:	rsb	r3, r0, r3, asr #2
   17f8c:	add	r3, r3, r3, lsl #2
   17f90:	asr	r2, r2, #2
   17f94:	add	r0, ip, ip, lsl #2
   17f98:	ldr	ip, [sp, #68]	; 0x44
   17f9c:	sub	r8, r9, r0, lsl #1
   17fa0:	add	r4, ip, ip, lsl #2
   17fa4:	ldr	ip, [sp, #64]	; 0x40
   17fa8:	str	r8, [sp, #56]	; 0x38
   17fac:	add	lr, ip, ip, lsl #2
   17fb0:	ldr	ip, [sp, #60]	; 0x3c
   17fb4:	ldr	r8, [sp, #76]	; 0x4c
   17fb8:	str	r2, [sp, #124]	; 0x7c
   17fbc:	ldr	r0, [sp, #44]	; 0x2c
   17fc0:	add	ip, ip, ip, lsl #2
   17fc4:	str	r9, [sp, #1252]	; 0x4e4
   17fc8:	sub	r8, r8, r7, lsl #1
   17fcc:	sub	r6, r0, r6, lsl #1
   17fd0:	ldr	r0, [sp, #72]	; 0x48
   17fd4:	str	r6, [sp, #132]	; 0x84
   17fd8:	str	r8, [sp, #136]	; 0x88
   17fdc:	sub	r5, r0, r5, lsl #1
   17fe0:	ldr	r0, [sp, #40]	; 0x28
   17fe4:	str	r5, [sp, #128]	; 0x80
   17fe8:	ldr	r5, [sp, #84]	; 0x54
   17fec:	sub	r7, r0, r4, lsl #1
   17ff0:	ldr	r4, [sp, #32]
   17ff4:	ldr	r0, [sp, #36]	; 0x24
   17ff8:	str	r7, [sp, #68]	; 0x44
   17ffc:	ldr	r7, [sp, #52]	; 0x34
   18000:	sub	r0, r0, lr, lsl #1
   18004:	ldr	lr, [sp, #28]
   18008:	str	r0, [sp, #64]	; 0x40
   1800c:	sub	r0, r4, ip, lsl #1
   18010:	str	r0, [sp, #60]	; 0x3c
   18014:	sub	r0, lr, r3, lsl #1
   18018:	str	r0, [sp, #120]	; 0x78
   1801c:	cmp	r1, #37	; 0x25
   18020:	beq	1810c <__assert_fail@plt+0x68ec>
   18024:	ldr	r3, [sp, #48]	; 0x30
   18028:	cmp	fp, #0
   1802c:	sub	r3, r3, sl
   18030:	blt	180c0 <__assert_fail@plt+0x68a0>
   18034:	cmp	fp, #1
   18038:	movcs	r4, fp
   1803c:	movcc	r4, #1
   18040:	cmp	r4, r3
   18044:	bcs	180c8 <__assert_fail@plt+0x68a8>
   18048:	cmp	r5, #0
   1804c:	beq	18078 <__assert_fail@plt+0x6858>
   18050:	cmp	fp, #1
   18054:	ble	18074 <__assert_fail@plt+0x6854>
   18058:	sub	fp, fp, #1
   1805c:	mov	r1, #32
   18060:	mov	r0, r5
   18064:	mov	r2, fp
   18068:	bl	116ac <memset@plt>
   1806c:	ldrb	r1, [r7]
   18070:	add	r5, r5, fp
   18074:	strb	r1, [r5], #1
   18078:	add	sl, sl, r4
   1807c:	mov	r4, r7
   18080:	ldrb	r1, [r4, #1]
   18084:	add	r7, r4, #1
   18088:	mvn	fp, #0
   1808c:	cmp	r1, #0
   18090:	bne	1801c <__assert_fail@plt+0x67fc>
   18094:	str	r5, [sp, #84]	; 0x54
   18098:	ldr	r3, [sp, #48]	; 0x30
   1809c:	ldr	r2, [sp, #84]	; 0x54
   180a0:	cmp	r2, #0
   180a4:	cmpne	r3, #0
   180a8:	movne	r3, #0
   180ac:	strbne	r3, [r2]
   180b0:	ldr	r3, [sp, #88]	; 0x58
   180b4:	ldr	r2, [sp, #104]	; 0x68
   180b8:	str	r2, [r3]
   180bc:	b	180d8 <__assert_fail@plt+0x68b8>
   180c0:	cmp	r3, #1
   180c4:	bhi	180fc <__assert_fail@plt+0x68dc>
   180c8:	ldr	r2, [sp, #88]	; 0x58
   180cc:	mov	r3, #34	; 0x22
   180d0:	str	r3, [r2]
   180d4:	mov	sl, #0
   180d8:	mov	r0, sl
   180dc:	add	sp, sp, #1184	; 0x4a0
   180e0:	add	sp, sp, #12
   180e4:	ldrd	r4, [sp]
   180e8:	ldrd	r6, [sp, #8]
   180ec:	ldrd	r8, [sp, #16]
   180f0:	ldrd	sl, [sp, #24]
   180f4:	add	sp, sp, #32
   180f8:	pop	{pc}		; (ldr pc, [sp], #4)
   180fc:	cmp	r5, #0
   18100:	mov	r4, #1
   18104:	bne	18074 <__assert_fail@plt+0x6854>
   18108:	b	18078 <__assert_fail@plt+0x6858>
   1810c:	ldr	r3, [sp, #96]	; 0x60
   18110:	mov	r8, #0
   18114:	mov	r4, r7
   18118:	mov	r9, r8
   1811c:	str	r3, [sp, #52]	; 0x34
   18120:	ldrb	r3, [r4, #1]!
   18124:	sub	r2, r3, #35	; 0x23
   18128:	mov	r6, r3
   1812c:	cmp	r2, #60	; 0x3c
   18130:	ldrls	pc, [pc, r2, lsl #2]
   18134:	b	18248 <__assert_fail@plt+0x6a28>
   18138:	andeq	r8, r1, r0, asr #4
   1813c:	andeq	r8, r1, r8, asr #4
   18140:	andeq	r8, r1, r8, asr #4
   18144:	andeq	r8, r1, r8, asr #4
   18148:	andeq	r8, r1, r8, asr #4
   1814c:	andeq	r8, r1, r8, asr #4
   18150:	andeq	r8, r1, r8, asr #4
   18154:	andeq	r8, r1, r8, asr #4
   18158:	andeq	r8, r1, r8, lsr r2
   1815c:	andeq	r8, r1, r8, asr #4
   18160:	andeq	r8, r1, r8, lsr r2
   18164:	andeq	r8, r1, r8, asr #4
   18168:	andeq	r8, r1, r8, asr #4
   1816c:	andeq	r8, r1, r8, lsr r2
   18170:	andeq	r8, r1, r8, asr #4
   18174:	andeq	r8, r1, r8, asr #4
   18178:	andeq	r8, r1, r8, asr #4
   1817c:	andeq	r8, r1, r8, asr #4
   18180:	andeq	r8, r1, r8, asr #4
   18184:	andeq	r8, r1, r8, asr #4
   18188:	andeq	r8, r1, r8, asr #4
   1818c:	andeq	r8, r1, r8, asr #4
   18190:	andeq	r8, r1, r8, asr #4
   18194:	andeq	r8, r1, r8, asr #4
   18198:	andeq	r8, r1, r8, asr #4
   1819c:	andeq	r8, r1, r8, asr #4
   181a0:	andeq	r8, r1, r8, asr #4
   181a4:	andeq	r8, r1, r8, asr #4
   181a8:	andeq	r8, r1, r8, asr #4
   181ac:	andeq	r8, r1, r8, asr #4
   181b0:	andeq	r8, r1, r8, asr #4
   181b4:	andeq	r8, r1, r8, asr #4
   181b8:	andeq	r8, r1, r8, asr #4
   181bc:	andeq	r8, r1, r8, asr #4
   181c0:	andeq	r8, r1, r8, asr #4
   181c4:	andeq	r8, r1, r8, asr #4
   181c8:	andeq	r8, r1, r8, asr #4
   181cc:	andeq	r8, r1, r8, asr #4
   181d0:	andeq	r8, r1, r8, asr #4
   181d4:	andeq	r8, r1, r8, asr #4
   181d8:	andeq	r8, r1, r8, asr #4
   181dc:	andeq	r8, r1, r8, asr #4
   181e0:	andeq	r8, r1, r8, asr #4
   181e4:	andeq	r8, r1, r8, asr #4
   181e8:	andeq	r8, r1, r8, asr #4
   181ec:	andeq	r8, r1, r8, asr #4
   181f0:	andeq	r8, r1, r8, asr #4
   181f4:	andeq	r8, r1, r8, asr #4
   181f8:	andeq	r8, r1, r8, asr #4
   181fc:	andeq	r8, r1, r8, asr #4
   18200:	andeq	r8, r1, r8, asr #4
   18204:	andeq	r8, r1, r8, asr #4
   18208:	andeq	r8, r1, r8, asr #4
   1820c:	andeq	r8, r1, r8, asr #4
   18210:	andeq	r8, r1, r8, asr #4
   18214:	andeq	r8, r1, r8, asr #4
   18218:	andeq	r8, r1, r8, asr #4
   1821c:	andeq	r8, r1, r8, asr #4
   18220:	andeq	r8, r1, r8, asr #4
   18224:	andeq	r8, r1, ip, lsr #4
   18228:	andeq	r8, r1, r8, lsr r2
   1822c:	mov	r3, #1
   18230:	str	r3, [sp, #52]	; 0x34
   18234:	b	18120 <__assert_fail@plt+0x6900>
   18238:	mov	r9, r3
   1823c:	b	18120 <__assert_fail@plt+0x6900>
   18240:	mov	r8, #1
   18244:	b	18120 <__assert_fail@plt+0x6900>
   18248:	sub	r2, r3, #48	; 0x30
   1824c:	cmp	r2, #9
   18250:	bls	18550 <__assert_fail@plt+0x6d30>
   18254:	cmp	r3, #69	; 0x45
   18258:	beq	18524 <__assert_fail@plt+0x6d04>
   1825c:	cmp	r3, #79	; 0x4f
   18260:	movne	r6, #0
   18264:	movne	lr, r6
   18268:	beq	18524 <__assert_fail@plt+0x6d04>
   1826c:	cmp	r3, #122	; 0x7a
   18270:	ldrls	pc, [pc, r3, lsl #2]
   18274:	b	18468 <__assert_fail@plt+0x6c48>
   18278:	andeq	r8, r1, r4, ror #8
   1827c:	andeq	r8, r1, r8, ror #8
   18280:	andeq	r8, r1, r8, ror #8
   18284:	andeq	r8, r1, r8, ror #8
   18288:	andeq	r8, r1, r8, ror #8
   1828c:	andeq	r8, r1, r8, ror #8
   18290:	andeq	r8, r1, r8, ror #8
   18294:	andeq	r8, r1, r8, ror #8
   18298:	andeq	r8, r1, r8, ror #8
   1829c:	andeq	r8, r1, r8, ror #8
   182a0:	andeq	r8, r1, r8, ror #8
   182a4:	andeq	r8, r1, r8, ror #8
   182a8:	andeq	r8, r1, r8, ror #8
   182ac:	andeq	r8, r1, r8, ror #8
   182b0:	andeq	r8, r1, r8, ror #8
   182b4:	andeq	r8, r1, r8, ror #8
   182b8:	andeq	r8, r1, r8, ror #8
   182bc:	andeq	r8, r1, r8, ror #8
   182c0:	andeq	r8, r1, r8, ror #8
   182c4:	andeq	r8, r1, r8, ror #8
   182c8:	andeq	r8, r1, r8, ror #8
   182cc:	andeq	r8, r1, r8, ror #8
   182d0:	andeq	r8, r1, r8, ror #8
   182d4:	andeq	r8, r1, r8, ror #8
   182d8:	andeq	r8, r1, r8, ror #8
   182dc:	andeq	r8, r1, r8, ror #8
   182e0:	andeq	r8, r1, r8, ror #8
   182e4:	andeq	r8, r1, r8, ror #8
   182e8:	andeq	r8, r1, r8, ror #8
   182ec:	andeq	r8, r1, r8, ror #8
   182f0:	andeq	r8, r1, r8, ror #8
   182f4:	andeq	r8, r1, r8, ror #8
   182f8:	andeq	r8, r1, r8, ror #8
   182fc:	andeq	r8, r1, r8, ror #8
   18300:	andeq	r8, r1, r8, ror #8
   18304:	andeq	r8, r1, r8, ror #8
   18308:	andeq	r8, r1, r8, ror #8
   1830c:	strdeq	r8, [r1], -r0
   18310:	andeq	r8, r1, r8, ror #8
   18314:	andeq	r8, r1, r8, ror #8
   18318:	andeq	r8, r1, r8, ror #8
   1831c:	andeq	r8, r1, r8, ror #8
   18320:	andeq	r8, r1, r8, ror #8
   18324:	andeq	r8, r1, r8, ror #8
   18328:	andeq	r8, r1, r8, ror #8
   1832c:	andeq	r8, r1, r8, ror #8
   18330:	andeq	r8, r1, r8, ror #8
   18334:	andeq	r8, r1, r8, ror #8
   18338:	andeq	r8, r1, r8, ror #8
   1833c:	andeq	r8, r1, r8, ror #8
   18340:	andeq	r8, r1, r8, ror #8
   18344:	andeq	r8, r1, r8, ror #8
   18348:	andeq	r8, r1, r8, ror #8
   1834c:	andeq	r8, r1, r8, ror #8
   18350:	andeq	r8, r1, r8, ror #8
   18354:	andeq	r8, r1, r8, ror #8
   18358:	andeq	r8, r1, r8, ror #8
   1835c:	andeq	r8, r1, r8, ror #8
   18360:	ldrdeq	r9, [r1], -r4
   18364:	andeq	r8, r1, r8, ror #8
   18368:	andeq	r8, r1, r8, ror #8
   1836c:	andeq	r8, r1, r8, ror #8
   18370:	andeq	r8, r1, r8, ror #8
   18374:	andeq	r8, r1, r8, ror #8
   18378:	andeq	r8, r1, r8, ror #8
   1837c:	muleq	r1, ip, r6
   18380:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18384:			; <UNDEFINED> instruction: 0x000191b0
   18388:	andeq	r9, r1, r8, asr r4
   1838c:	andeq	r8, r1, r8, ror #8
   18390:	andeq	r9, r1, r4, lsl #9
   18394:	andeq	r9, r1, r4, ror r2
   18398:	andeq	r9, r1, r8, lsl #8
   1839c:	andeq	r9, r1, r4, lsr #8
   183a0:	andeq	r8, r1, r8, ror #8
   183a4:	andeq	r8, r1, r8, ror #8
   183a8:	andeq	r8, r1, r8, ror #8
   183ac:	andeq	r9, r1, ip, lsr r4
   183b0:	andeq	r8, r1, r4, asr #27
   183b4:	andeq	r8, r1, r8, ror #8
   183b8:	strdeq	r9, [r1], -ip
   183bc:	andeq	r8, r1, r8, ror #8
   183c0:	andeq	r9, r1, r8, asr #9
   183c4:	andeq	r8, r1, ip, lsl ip
   183c8:	andeq	r8, r1, r8, lsr ip
   183cc:	andeq	r8, r1, ip, lsr #26
   183d0:	andeq	r9, r1, r4, ror r2
   183d4:	andeq	r8, r1, r8, ror #26
   183d8:	muleq	r1, r0, r5
   183dc:	andeq	r9, r1, r4, asr #2
   183e0:	andeq	r8, r1, r8, ror #16
   183e4:	andeq	r8, r1, r8, ror #8
   183e8:	andeq	r8, r1, r8, ror #8
   183ec:	andeq	r8, r1, r8, ror #8
   183f0:	andeq	r8, r1, r8, ror #8
   183f4:	andeq	r8, r1, r8, ror #8
   183f8:	andeq	r8, r1, r8, ror #8
   183fc:	muleq	r1, ip, r6
   18400:	andeq	r9, r1, r8, lsr #1
   18404:	muleq	r1, r0, r5
   18408:	andeq	r8, r1, r8, lsl #20
   1840c:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18410:	andeq	r8, r1, r8, ror #8
   18414:	andeq	r9, r1, r4, ror r2
   18418:	andeq	r9, r1, r8, lsr #1
   1841c:	andeq	r8, r1, r8, ror #8
   18420:	andeq	r9, r1, r4, asr #4
   18424:	andeq	r9, r1, r0, ror #4
   18428:	andeq	r8, r1, ip, asr #31
   1842c:	ldrdeq	r8, [r1], -ip
   18430:	andeq	r9, r1, ip, lsl r0
   18434:	andeq	r8, r1, r8, ror #8
   18438:	andeq	r9, r1, r8, lsl #1
   1843c:	andeq	r8, r1, ip, lsr #15
   18440:	muleq	r1, r8, r5
   18444:	andeq	r8, r1, ip, asr #13
   18448:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   1844c:	andeq	r8, r1, r4, ror pc
   18450:	andeq	r8, r1, r8, ror #8
   18454:			; <UNDEFINED> instruction: 0x00018fb0
   18458:	muleq	r1, r0, r5
   1845c:	andeq	r9, r1, r4, asr #1
   18460:	andeq	r8, r1, r4, asr #18
   18464:	sub	r4, r4, #1
   18468:	ldr	r3, [sp, #48]	; 0x30
   1846c:	sub	r3, r3, sl
   18470:	str	r3, [sp, #84]	; 0x54
   18474:	mvn	r3, fp
   18478:	cmp	r9, #45	; 0x2d
   1847c:	lsr	r3, r3, #31
   18480:	sub	r6, r4, r7
   18484:	moveq	r3, #0
   18488:	add	r6, r6, #1
   1848c:	cmp	r3, #0
   18490:	moveq	fp, r3
   18494:	moveq	r8, r6
   18498:	beq	184a8 <__assert_fail@plt+0x6c88>
   1849c:	cmp	r6, fp
   184a0:	movcs	r8, r6
   184a4:	movcc	r8, fp
   184a8:	ldr	r3, [sp, #84]	; 0x54
   184ac:	cmp	r8, r3
   184b0:	bcs	180c8 <__assert_fail@plt+0x68a8>
   184b4:	cmp	r5, #0
   184b8:	beq	18548 <__assert_fail@plt+0x6d28>
   184bc:	cmp	r6, fp
   184c0:	bcs	184e8 <__assert_fail@plt+0x6cc8>
   184c4:	cmp	r9, #43	; 0x2b
   184c8:	cmpne	r9, #48	; 0x30
   184cc:	sub	r2, fp, r6
   184d0:	mov	r0, r5
   184d4:	add	r3, r5, r2
   184d8:	moveq	r1, #48	; 0x30
   184dc:	movne	r1, #32
   184e0:	mov	r5, r3
   184e4:	bl	116ac <memset@plt>
   184e8:	ldr	r3, [sp, #52]	; 0x34
   184ec:	cmp	r3, #0
   184f0:	beq	18534 <__assert_fail@plt+0x6d14>
   184f4:	cmp	r6, #0
   184f8:	beq	18544 <__assert_fail@plt+0x6d24>
   184fc:	bl	115ec <__ctype_toupper_loc@plt>
   18500:	add	r3, r7, r6
   18504:	add	r2, r5, r6
   18508:	ldrb	ip, [r3, #-1]!
   1850c:	ldr	r1, [r0]
   18510:	cmp	r7, r3
   18514:	ldr	r1, [r1, ip, lsl #2]
   18518:	strb	r1, [r2, #-1]!
   1851c:	bne	18508 <__assert_fail@plt+0x6ce8>
   18520:	b	18544 <__assert_fail@plt+0x6d24>
   18524:	mov	lr, r3
   18528:	add	r4, r4, #1
   1852c:	ldrb	r3, [r4]
   18530:	b	1826c <__assert_fail@plt+0x6a4c>
   18534:	mov	r1, r7
   18538:	mov	r2, r6
   1853c:	mov	r0, r5
   18540:	bl	11490 <memcpy@plt>
   18544:	add	r5, r5, r6
   18548:	add	sl, sl, r8
   1854c:	b	18080 <__assert_fail@plt+0x6860>
   18550:	mov	fp, #0
   18554:	mov	r1, #10
   18558:	smull	r2, r3, fp, r1
   1855c:	mvn	fp, #-2147483648	; 0x80000000
   18560:	cmp	r3, r2, asr #31
   18564:	bne	18578 <__assert_fail@plt+0x6d58>
   18568:	ldrb	r3, [r4]
   1856c:	sub	fp, r3, #48	; 0x30
   18570:	adds	fp, r2, fp
   18574:	mvnvs	fp, #-2147483648	; 0x80000000
   18578:	ldrb	r3, [r4, #1]!
   1857c:	sub	r2, r3, #48	; 0x30
   18580:	cmp	r2, #9
   18584:	bls	18558 <__assert_fail@plt+0x6d38>
   18588:	mov	r6, r3
   1858c:	b	18254 <__assert_fail@plt+0x6a34>
   18590:	cmp	r6, #79	; 0x4f
   18594:	beq	18468 <__assert_fail@plt+0x6c48>
   18598:	mov	r7, #0
   1859c:	add	r2, sp, #152	; 0x98
   185a0:	movw	r1, #9504	; 0x2520
   185a4:	cmp	r6, #0
   185a8:	strh	r1, [r2]
   185ac:	addeq	r1, r2, #2
   185b0:	bne	187cc <__assert_fail@plt+0x6fac>
   185b4:	mov	ip, #0
   185b8:	add	r6, sp, #168	; 0xa8
   185bc:	strb	r3, [r1]
   185c0:	mov	r0, r6
   185c4:	ldr	r3, [sp, #100]	; 0x64
   185c8:	strb	ip, [r1, #1]
   185cc:	mov	r1, #1024	; 0x400
   185d0:	bl	115c8 <strftime@plt>
   185d4:	cmp	r0, #0
   185d8:	beq	18080 <__assert_fail@plt+0x6860>
   185dc:	mvn	r3, fp
   185e0:	cmp	r9, #45	; 0x2d
   185e4:	lsr	r3, r3, #31
   185e8:	moveq	r3, #0
   185ec:	sub	r8, r0, #1
   185f0:	cmp	r3, #0
   185f4:	moveq	fp, r8
   185f8:	beq	1860c <__assert_fail@plt+0x6dec>
   185fc:	mov	r3, fp
   18600:	cmp	r8, fp
   18604:	movcs	fp, r8
   18608:	movcc	fp, r3
   1860c:	ldr	r2, [sp, #48]	; 0x30
   18610:	sub	r2, r2, sl
   18614:	cmp	r2, fp
   18618:	bls	180c8 <__assert_fail@plt+0x68a8>
   1861c:	cmp	r5, #0
   18620:	beq	18694 <__assert_fail@plt+0x6e74>
   18624:	cmp	r8, r3
   18628:	bcs	18650 <__assert_fail@plt+0x6e30>
   1862c:	cmp	r9, #43	; 0x2b
   18630:	cmpne	r9, #48	; 0x30
   18634:	sub	r2, r3, r8
   18638:	mov	r0, r5
   1863c:	add	r3, r5, r2
   18640:	moveq	r1, #48	; 0x30
   18644:	movne	r1, #32
   18648:	mov	r5, r3
   1864c:	bl	116ac <memset@plt>
   18650:	cmp	r7, #0
   18654:	bne	1963c <__assert_fail@plt+0x7e1c>
   18658:	ldr	r3, [sp, #52]	; 0x34
   1865c:	cmp	r3, #0
   18660:	beq	19624 <__assert_fail@plt+0x7e04>
   18664:	cmp	r8, #0
   18668:	beq	18694 <__assert_fail@plt+0x6e74>
   1866c:	add	r5, r5, r8
   18670:	add	r8, r6, r8
   18674:	bl	115ec <__ctype_toupper_loc@plt>
   18678:	mov	r3, r5
   1867c:	ldrb	r1, [r8], #-1
   18680:	ldr	r2, [r0]
   18684:	cmp	r6, r8
   18688:	ldr	r2, [r2, r1, lsl #2]
   1868c:	strb	r2, [r3, #-1]!
   18690:	bne	1867c <__assert_fail@plt+0x6e5c>
   18694:	add	sl, sl, fp
   18698:	b	18080 <__assert_fail@plt+0x6860>
   1869c:	cmp	r6, #0
   186a0:	bne	18468 <__assert_fail@plt+0x6c48>
   186a4:	ldr	r2, [sp, #52]	; 0x34
   186a8:	cmp	r8, #0
   186ac:	movw	r0, #9504	; 0x2520
   186b0:	movne	r2, r8
   186b4:	mov	r7, #0
   186b8:	str	r2, [sp, #52]	; 0x34
   186bc:	add	r2, sp, #152	; 0x98
   186c0:	mov	r1, r2
   186c4:	strh	r0, [r1], #2
   186c8:	b	185b4 <__assert_fail@plt+0x6d94>
   186cc:	ldr	lr, [sp, #100]	; 0x64
   186d0:	mvn	ip, #0
   186d4:	add	r1, sp, #168	; 0xa8
   186d8:	ldr	r0, [sp, #1248]	; 0x4e0
   186dc:	ldrd	r6, [lr]
   186e0:	ldrd	r2, [lr, #24]
   186e4:	strd	r6, [sp, #168]	; 0xa8
   186e8:	ldrd	r6, [lr, #8]
   186ec:	strd	r2, [sp, #192]	; 0xc0
   186f0:	ldr	r3, [lr, #40]	; 0x28
   186f4:	strd	r6, [sp, #176]	; 0xb0
   186f8:	ldrd	r6, [lr, #32]
   186fc:	str	ip, [sp, #196]	; 0xc4
   18700:	str	r3, [sp, #208]	; 0xd0
   18704:	ldrd	r2, [lr, #16]
   18708:	strd	r2, [sp, #184]	; 0xb8
   1870c:	strd	r6, [sp, #200]	; 0xc8
   18710:	bl	1e050 <__assert_fail@plt+0xc830>
   18714:	ldr	r3, [sp, #196]	; 0xc4
   18718:	cmp	r3, #0
   1871c:	blt	19d84 <__assert_fail@plt+0x8564>
   18720:	lsr	r3, r0, #31
   18724:	add	r2, sp, #152	; 0x98
   18728:	cmp	r0, #0
   1872c:	add	r6, r2, #14
   18730:	str	r3, [sp, #84]	; 0x54
   18734:	blt	18778 <__assert_fail@plt+0x6f58>
   18738:	movw	r3, #26215	; 0x6667
   1873c:	movt	r3, #26214	; 0x6666
   18740:	asr	ip, r0, #31
   18744:	smull	r3, r1, r3, r0
   18748:	asr	r1, r1, #2
   1874c:	sub	r3, r1, ip
   18750:	add	r3, r3, r3, lsl #2
   18754:	sub	r3, r0, r3, lsl #1
   18758:	subs	r0, r1, ip
   1875c:	add	r3, r3, #48	; 0x30
   18760:	strb	r3, [r6, #-1]!
   18764:	bne	18738 <__assert_fail@plt+0x6f18>
   18768:	mov	r0, #1
   1876c:	mov	r1, #0
   18770:	strd	r0, [sp, #140]	; 0x8c
   18774:	b	18afc <__assert_fail@plt+0x72dc>
   18778:	movw	r3, #26215	; 0x6667
   1877c:	movt	r3, #26214	; 0x6666
   18780:	asr	ip, r0, #31
   18784:	smull	r3, r1, r3, r0
   18788:	asr	r1, r1, #2
   1878c:	sub	r3, r1, ip
   18790:	add	r3, r3, r3, lsl #2
   18794:	sub	r3, r0, r3, lsl #1
   18798:	subs	r0, r1, ip
   1879c:	rsb	r3, r3, #48	; 0x30
   187a0:	strb	r3, [r6, #-1]!
   187a4:	bne	18778 <__assert_fail@plt+0x6f58>
   187a8:	b	18768 <__assert_fail@plt+0x6f48>
   187ac:	ldr	r2, [sp, #100]	; 0x64
   187b0:	cmp	r6, #79	; 0x4f
   187b4:	ldr	r2, [r2, #16]
   187b8:	bne	1978c <__assert_fail@plt+0x7f6c>
   187bc:	add	r2, sp, #152	; 0x98
   187c0:	movw	r1, #9504	; 0x2520
   187c4:	mov	r7, #0
   187c8:	strh	r1, [r2]
   187cc:	add	r1, r2, #3
   187d0:	strb	lr, [sp, #154]	; 0x9a
   187d4:	b	185b4 <__assert_fail@plt+0x6d94>
   187d8:	cmp	r6, #69	; 0x45
   187dc:	beq	18468 <__assert_fail@plt+0x6c48>
   187e0:	ldr	r2, [sp, #52]	; 0x34
   187e4:	cmp	r8, #0
   187e8:	mov	r7, #0
   187ec:	movne	r2, r8
   187f0:	str	r2, [sp, #52]	; 0x34
   187f4:	b	1859c <__assert_fail@plt+0x6d7c>
   187f8:	ldr	r3, [sp, #48]	; 0x30
   187fc:	cmp	r9, #45	; 0x2d
   18800:	sub	r3, r3, sl
   18804:	beq	196b8 <__assert_fail@plt+0x7e98>
   18808:	cmp	fp, #0
   1880c:	blt	196b8 <__assert_fail@plt+0x7e98>
   18810:	cmp	fp, #1
   18814:	movcs	r6, fp
   18818:	movcc	r6, #1
   1881c:	cmp	r6, r3
   18820:	bcs	180c8 <__assert_fail@plt+0x68a8>
   18824:	cmp	r5, #0
   18828:	beq	18860 <__assert_fail@plt+0x7040>
   1882c:	cmp	fp, #1
   18830:	ble	18858 <__assert_fail@plt+0x7038>
   18834:	cmp	r9, #43	; 0x2b
   18838:	cmpne	r9, #48	; 0x30
   1883c:	sub	r2, fp, #1
   18840:	mov	r0, r5
   18844:	add	r3, r5, r2
   18848:	moveq	r1, #48	; 0x30
   1884c:	movne	r1, #32
   18850:	mov	r5, r3
   18854:	bl	116ac <memset@plt>
   18858:	mov	r3, #9
   1885c:	strb	r3, [r5], #1
   18860:	add	sl, sl, r6
   18864:	b	18080 <__assert_fail@plt+0x6860>
   18868:	ldr	r3, [sp, #52]	; 0x34
   1886c:	cmp	r8, #0
   18870:	movne	r3, #0
   18874:	ldr	r0, [sp, #112]	; 0x70
   18878:	str	r3, [sp, #52]	; 0x34
   1887c:	bl	11640 <strlen@plt>
   18880:	subs	r3, r9, #45	; 0x2d
   18884:	mov	r6, r0
   18888:	movne	r3, #1
   1888c:	cmp	fp, #0
   18890:	movlt	r3, #0
   18894:	cmp	r3, #0
   18898:	moveq	fp, r3
   1889c:	moveq	r7, r0
   188a0:	beq	188b0 <__assert_fail@plt+0x7090>
   188a4:	cmp	r0, fp
   188a8:	movcs	r7, r0
   188ac:	movcc	r7, fp
   188b0:	ldr	r3, [sp, #48]	; 0x30
   188b4:	sub	r3, r3, sl
   188b8:	cmp	r3, r7
   188bc:	bls	180c8 <__assert_fail@plt+0x68a8>
   188c0:	cmp	r5, #0
   188c4:	beq	1893c <__assert_fail@plt+0x711c>
   188c8:	cmp	r6, fp
   188cc:	bcs	188f4 <__assert_fail@plt+0x70d4>
   188d0:	cmp	r9, #43	; 0x2b
   188d4:	cmpne	r9, #48	; 0x30
   188d8:	sub	r2, fp, r6
   188dc:	mov	r0, r5
   188e0:	add	r3, r5, r2
   188e4:	moveq	r1, #48	; 0x30
   188e8:	movne	r1, #32
   188ec:	mov	r5, r3
   188f0:	bl	116ac <memset@plt>
   188f4:	cmp	r8, #0
   188f8:	bne	19c50 <__assert_fail@plt+0x8430>
   188fc:	ldr	r3, [sp, #52]	; 0x34
   18900:	cmp	r3, #0
   18904:	beq	19c38 <__assert_fail@plt+0x8418>
   18908:	cmp	r6, #0
   1890c:	beq	1893c <__assert_fail@plt+0x711c>
   18910:	bl	115ec <__ctype_toupper_loc@plt>
   18914:	ldr	ip, [sp, #112]	; 0x70
   18918:	add	r5, r5, r6
   1891c:	mov	r3, r5
   18920:	add	r6, ip, r6
   18924:	ldrb	r1, [r6, #-1]!
   18928:	ldr	r2, [r0]
   1892c:	cmp	ip, r6
   18930:	ldr	r2, [r2, r1, lsl #2]
   18934:	strb	r2, [r3, #-1]!
   18938:	bne	18924 <__assert_fail@plt+0x7104>
   1893c:	add	sl, sl, r7
   18940:	b	18080 <__assert_fail@plt+0x6860>
   18944:	mov	r2, #0
   18948:	str	r2, [sp, #140]	; 0x8c
   1894c:	ldr	r1, [sp, #100]	; 0x64
   18950:	ldr	r2, [r1, #32]
   18954:	cmp	r2, #0
   18958:	blt	18080 <__assert_fail@plt+0x6860>
   1895c:	ldr	r1, [r1, #36]	; 0x24
   18960:	cmp	r1, #0
   18964:	blt	19868 <__assert_fail@plt+0x8048>
   18968:	bne	19960 <__assert_fail@plt+0x8140>
   1896c:	ldr	r2, [sp, #112]	; 0x70
   18970:	ldrb	r2, [r2]
   18974:	cmp	r2, #45	; 0x2d
   18978:	movne	r2, r1
   1897c:	moveq	r2, #1
   18980:	moveq	r8, r1
   18984:	movne	r8, #1
   18988:	str	r2, [sp, #84]	; 0x54
   1898c:	ldr	r0, [sp, #116]	; 0x74
   18990:	movw	ip, #34953	; 0x8889
   18994:	movt	ip, #34952	; 0x8888
   18998:	smull	r2, r0, r0, r1
   1899c:	str	r0, [sp, #144]	; 0x90
   189a0:	smull	r0, r2, ip, r1
   189a4:	ldr	r0, [sp, #144]	; 0x90
   189a8:	add	r2, r2, r1
   189ac:	str	r2, [sp, #144]	; 0x90
   189b0:	asr	r2, r1, #31
   189b4:	add	r0, r0, r1
   189b8:	rsb	r0, r2, r0, asr #11
   189bc:	str	r0, [sp, #148]	; 0x94
   189c0:	ldr	r0, [sp, #144]	; 0x90
   189c4:	rsb	r2, r2, r0, asr #5
   189c8:	smull	ip, r0, ip, r2
   189cc:	rsb	ip, r2, r2, lsl #4
   189d0:	sub	ip, r1, ip, lsl #2
   189d4:	add	r0, r0, r2
   189d8:	asr	r1, r2, #31
   189dc:	rsb	r0, r1, r0, asr #5
   189e0:	rsb	r0, r0, r0, lsl #4
   189e4:	sub	r0, r2, r0, lsl #2
   189e8:	ldr	r2, [sp, #140]	; 0x8c
   189ec:	cmp	r2, #3
   189f0:	ldrls	pc, [pc, r2, lsl #2]
   189f4:	b	18468 <__assert_fail@plt+0x6c48>
   189f8:	andeq	r9, r1, r8, asr r5
   189fc:	andeq	r9, r1, r4, lsl #10
   18a00:	andeq	r9, r1, r8, lsr #10
   18a04:	andeq	r9, r1, r8, ror r5
   18a08:	cmp	r6, #69	; 0x45
   18a0c:	beq	18468 <__assert_fail@plt+0x6c48>
   18a10:	mov	r2, #2
   18a14:	str	r2, [sp, #140]	; 0x8c
   18a18:	ldr	r2, [sp, #100]	; 0x64
   18a1c:	ldr	r2, [r2, #12]
   18a20:	mov	r1, r2
   18a24:	mov	r0, #0
   18a28:	lsr	r2, r2, #31
   18a2c:	cmp	r1, r0
   18a30:	movlt	r8, #0
   18a34:	movge	r8, #1
   18a38:	str	r2, [sp, #84]	; 0x54
   18a3c:	str	r0, [sp, #144]	; 0x90
   18a40:	cmp	r6, #79	; 0x4f
   18a44:	movne	r6, #0
   18a48:	andeq	r6, r8, #1
   18a4c:	cmp	r6, #0
   18a50:	bne	187bc <__assert_fail@plt+0x6f9c>
   18a54:	ldr	r3, [sp, #84]	; 0x54
   18a58:	cmp	r3, #0
   18a5c:	rsbne	r1, r1, #0
   18a60:	add	r2, sp, #152	; 0x98
   18a64:	mov	r7, #58	; 0x3a
   18a68:	str	r4, [sp, #148]	; 0x94
   18a6c:	add	ip, r2, #14
   18a70:	ldr	r4, [sp, #108]	; 0x6c
   18a74:	b	18ab8 <__assert_fail@plt+0x7298>
   18a78:	lsr	r3, r3, #3
   18a7c:	sub	r6, ip, #2
   18a80:	strb	r7, [ip, #-1]
   18a84:	asrs	r0, r0, #1
   18a88:	add	lr, r3, r3, lsl #2
   18a8c:	movne	r8, #1
   18a90:	moveq	r8, #0
   18a94:	cmp	r1, #9
   18a98:	orrhi	r8, r8, #1
   18a9c:	sub	r1, r1, lr, lsl #1
   18aa0:	cmp	r8, #0
   18aa4:	add	r1, r1, #48	; 0x30
   18aa8:	strb	r1, [ip, #-2]
   18aac:	beq	18af8 <__assert_fail@plt+0x72d8>
   18ab0:	mov	ip, r6
   18ab4:	mov	r1, r3
   18ab8:	tst	r0, #1
   18abc:	umull	lr, r3, r4, r1
   18ac0:	sub	r6, ip, #1
   18ac4:	bne	18a78 <__assert_fail@plt+0x7258>
   18ac8:	lsr	r3, r3, #3
   18acc:	asrs	r0, r0, #1
   18ad0:	add	lr, r3, r3, lsl #2
   18ad4:	movne	r8, #1
   18ad8:	moveq	r8, #0
   18adc:	cmp	r1, #9
   18ae0:	orrhi	r8, r8, #1
   18ae4:	sub	r1, r1, lr, lsl #1
   18ae8:	cmp	r8, #0
   18aec:	add	r1, r1, #48	; 0x30
   18af0:	strb	r1, [ip, #-1]
   18af4:	bne	18ab0 <__assert_fail@plt+0x7290>
   18af8:	ldr	r4, [sp, #148]	; 0x94
   18afc:	cmp	r9, #0
   18b00:	moveq	r3, #1
   18b04:	moveq	r9, #48	; 0x30
   18b08:	beq	18b14 <__assert_fail@plt+0x72f4>
   18b0c:	subs	r3, r9, #45	; 0x2d
   18b10:	movne	r3, #1
   18b14:	ldr	r1, [sp, #140]	; 0x8c
   18b18:	cmp	fp, #0
   18b1c:	add	r2, r2, #14
   18b20:	sub	r7, r2, r6
   18b24:	movlt	fp, r1
   18b28:	ldr	r1, [sp, #84]	; 0x54
   18b2c:	cmp	r1, #0
   18b30:	bne	195a0 <__assert_fail@plt+0x7d80>
   18b34:	ldr	r1, [sp, #144]	; 0x90
   18b38:	cmp	r1, #0
   18b3c:	bne	1967c <__assert_fail@plt+0x7e5c>
   18b40:	sub	r2, fp, r7
   18b44:	cmp	r2, #0
   18b48:	movle	r3, #0
   18b4c:	andgt	r3, r3, #1
   18b50:	cmp	r3, #0
   18b54:	bne	18b68 <__assert_fail@plt+0x7348>
   18b58:	cmp	r9, #45	; 0x2d
   18b5c:	moveq	fp, r1
   18b60:	moveq	r8, r7
   18b64:	beq	18b74 <__assert_fail@plt+0x7354>
   18b68:	cmp	fp, r7
   18b6c:	movcs	r8, fp
   18b70:	movcc	r8, r7
   18b74:	ldr	r3, [sp, #48]	; 0x30
   18b78:	sub	r3, r3, sl
   18b7c:	cmp	r3, r8
   18b80:	bls	180c8 <__assert_fail@plt+0x68a8>
   18b84:	cmp	r5, #0
   18b88:	beq	18548 <__assert_fail@plt+0x6d28>
   18b8c:	cmp	fp, r7
   18b90:	bls	18bb8 <__assert_fail@plt+0x7398>
   18b94:	cmp	r9, #43	; 0x2b
   18b98:	cmpne	r9, #48	; 0x30
   18b9c:	sub	r2, fp, r7
   18ba0:	mov	r0, r5
   18ba4:	add	r3, r5, r2
   18ba8:	moveq	r1, #48	; 0x30
   18bac:	movne	r1, #32
   18bb0:	mov	r5, r3
   18bb4:	bl	116ac <memset@plt>
   18bb8:	ldr	r3, [sp, #52]	; 0x34
   18bbc:	cmp	r3, #0
   18bc0:	beq	1960c <__assert_fail@plt+0x7dec>
   18bc4:	cmp	r7, #0
   18bc8:	beq	18548 <__assert_fail@plt+0x6d28>
   18bcc:	add	r5, r5, r7
   18bd0:	add	r7, r6, r7
   18bd4:	bl	115ec <__ctype_toupper_loc@plt>
   18bd8:	mov	r3, r5
   18bdc:	ldrb	r1, [r7, #-1]!
   18be0:	ldr	r2, [r0]
   18be4:	cmp	r6, r7
   18be8:	ldr	r2, [r2, r1, lsl #2]
   18bec:	strb	r2, [r3, #-1]!
   18bf0:	bne	18bdc <__assert_fail@plt+0x73bc>
   18bf4:	b	18548 <__assert_fail@plt+0x6d28>
   18bf8:	cmp	r6, #69	; 0x45
   18bfc:	beq	18468 <__assert_fail@plt+0x6c48>
   18c00:	ldr	r2, [sp, #100]	; 0x64
   18c04:	ldr	r2, [r2, #12]
   18c08:	mov	r1, #2
   18c0c:	cmp	r9, #0
   18c10:	moveq	r9, #95	; 0x5f
   18c14:	str	r1, [sp, #140]	; 0x8c
   18c18:	b	18a20 <__assert_fail@plt+0x7200>
   18c1c:	cmp	r6, #69	; 0x45
   18c20:	beq	18468 <__assert_fail@plt+0x6c48>
   18c24:	mov	r2, #2
   18c28:	str	r2, [sp, #140]	; 0x8c
   18c2c:	ldr	r2, [sp, #100]	; 0x64
   18c30:	ldr	r2, [r2]
   18c34:	b	18a20 <__assert_fail@plt+0x7200>
   18c38:	movw	r8, #9948	; 0x26dc
   18c3c:	movt	r8, #2
   18c40:	ldr	r3, [sp, #48]	; 0x30
   18c44:	sub	r3, r3, sl
   18c48:	str	r3, [sp, #84]	; 0x54
   18c4c:	mvn	r3, #0
   18c50:	mov	ip, r3
   18c54:	str	r3, [sp, #140]	; 0x8c
   18c58:	ldr	r1, [sp, #52]	; 0x34
   18c5c:	mov	r2, r8
   18c60:	mov	r0, #0
   18c64:	ldr	r3, [sp, #100]	; 0x64
   18c68:	stm	sp, {r1, r9, ip}
   18c6c:	mvn	r1, #0
   18c70:	ldr	ip, [sp, #1244]	; 0x4dc
   18c74:	str	ip, [sp, #12]
   18c78:	ldr	ip, [sp, #1248]	; 0x4e0
   18c7c:	str	ip, [sp, #16]
   18c80:	ldr	ip, [sp, #1252]	; 0x4e4
   18c84:	str	ip, [sp, #20]
   18c88:	bl	17d70 <__assert_fail@plt+0x6550>
   18c8c:	cmp	r9, #45	; 0x2d
   18c90:	mov	r7, r0
   18c94:	beq	19670 <__assert_fail@plt+0x7e50>
   18c98:	cmp	fp, #0
   18c9c:	blt	19670 <__assert_fail@plt+0x7e50>
   18ca0:	cmp	r0, fp
   18ca4:	movcs	r6, r0
   18ca8:	movcc	r6, fp
   18cac:	ldr	r3, [sp, #84]	; 0x54
   18cb0:	cmp	r6, r3
   18cb4:	bcs	180c8 <__assert_fail@plt+0x68a8>
   18cb8:	cmp	r5, #0
   18cbc:	beq	18860 <__assert_fail@plt+0x7040>
   18cc0:	cmp	fp, r7
   18cc4:	bls	18cec <__assert_fail@plt+0x74cc>
   18cc8:	cmp	r9, #43	; 0x2b
   18ccc:	cmpne	r9, #48	; 0x30
   18cd0:	sub	r2, fp, r7
   18cd4:	mov	r0, r5
   18cd8:	add	r3, r5, r2
   18cdc:	moveq	r1, #48	; 0x30
   18ce0:	movne	r1, #32
   18ce4:	mov	r5, r3
   18ce8:	bl	116ac <memset@plt>
   18cec:	ldr	r3, [sp, #52]	; 0x34
   18cf0:	mov	r2, r8
   18cf4:	mov	r0, r5
   18cf8:	add	r5, r5, r7
   18cfc:	ldr	r1, [sp, #84]	; 0x54
   18d00:	ldr	ip, [sp, #140]	; 0x8c
   18d04:	stm	sp, {r3, r9, ip}
   18d08:	ldr	r3, [sp, #100]	; 0x64
   18d0c:	ldr	ip, [sp, #1244]	; 0x4dc
   18d10:	str	ip, [sp, #12]
   18d14:	ldr	ip, [sp, #1248]	; 0x4e0
   18d18:	str	ip, [sp, #16]
   18d1c:	ldr	ip, [sp, #1252]	; 0x4e4
   18d20:	str	ip, [sp, #20]
   18d24:	bl	17d70 <__assert_fail@plt+0x6550>
   18d28:	b	18860 <__assert_fail@plt+0x7040>
   18d2c:	cmp	r6, #69	; 0x45
   18d30:	beq	18468 <__assert_fail@plt+0x6c48>
   18d34:	ldr	r1, [sp, #100]	; 0x64
   18d38:	movw	r2, #9363	; 0x2493
   18d3c:	movt	r2, #37449	; 0x9249
   18d40:	mov	ip, #2
   18d44:	str	ip, [sp, #140]	; 0x8c
   18d48:	ldrd	r0, [r1, #24]
   18d4c:	sub	r1, r1, r0
   18d50:	add	r1, r1, #7
   18d54:	smull	r2, r0, r2, r1
   18d58:	asr	r2, r1, #31
   18d5c:	add	r1, r0, r1
   18d60:	rsb	r2, r2, r1, asr ip
   18d64:	b	18a20 <__assert_fail@plt+0x7200>
   18d68:	cmp	r6, #69	; 0x45
   18d6c:	beq	18468 <__assert_fail@plt+0x6c48>
   18d70:	ldr	r0, [sp, #100]	; 0x64
   18d74:	mov	ip, #2
   18d78:	movw	r1, #9363	; 0x2493
   18d7c:	movt	r1, #37449	; 0x9249
   18d80:	str	ip, [sp, #140]	; 0x8c
   18d84:	ldr	r2, [r0, #24]
   18d88:	ldr	r7, [r0, #28]
   18d8c:	add	r2, r2, #6
   18d90:	asr	r0, r2, #31
   18d94:	smull	r8, ip, r1, r2
   18d98:	add	ip, ip, r2
   18d9c:	rsb	r0, r0, ip, asr #2
   18da0:	rsb	r0, r0, r0, lsl #3
   18da4:	sub	r0, r2, r0
   18da8:	sub	r0, r7, r0
   18dac:	add	r0, r0, #7
   18db0:	asr	r2, r0, #31
   18db4:	smull	ip, r1, r1, r0
   18db8:	add	r1, r1, r0
   18dbc:	rsb	r2, r2, r1, asr #2
   18dc0:	b	18a20 <__assert_fail@plt+0x7200>
   18dc4:	ldr	r3, [sp, #48]	; 0x30
   18dc8:	cmp	r6, #69	; 0x45
   18dcc:	sub	r3, r3, sl
   18dd0:	str	r3, [sp, #84]	; 0x54
   18dd4:	beq	18474 <__assert_fail@plt+0x6c54>
   18dd8:	cmp	fp, #0
   18ddc:	ble	19970 <__assert_fail@plt+0x8150>
   18de0:	cmp	fp, #8
   18de4:	bgt	19db4 <__assert_fail@plt+0x8594>
   18de8:	cmp	fp, #7
   18dec:	bgt	19980 <__assert_fail@plt+0x8160>
   18df0:	beq	19994 <__assert_fail@plt+0x8174>
   18df4:	cmp	fp, #6
   18df8:	beq	199a8 <__assert_fail@plt+0x8188>
   18dfc:	cmp	fp, #5
   18e00:	beq	199bc <__assert_fail@plt+0x819c>
   18e04:	cmp	fp, #4
   18e08:	beq	199d0 <__assert_fail@plt+0x81b0>
   18e0c:	cmp	fp, #3
   18e10:	beq	199e4 <__assert_fail@plt+0x81c4>
   18e14:	cmp	fp, #1
   18e18:	bne	19d94 <__assert_fail@plt+0x8574>
   18e1c:	ldr	r2, [sp, #92]	; 0x5c
   18e20:	mov	r6, #1
   18e24:	ldr	r3, [sp, #124]	; 0x7c
   18e28:	sub	r3, r3, r2, asr #31
   18e2c:	add	r3, r3, r3, lsl #2
   18e30:	sub	r3, r2, r3, lsl r6
   18e34:	add	r3, r3, #48	; 0x30
   18e38:	strb	r3, [sp, #152]	; 0x98
   18e3c:	cmp	r9, #0
   18e40:	ldr	r3, [sp, #84]	; 0x54
   18e44:	bne	19894 <__assert_fail@plt+0x8074>
   18e48:	cmp	r6, r3
   18e4c:	bcs	180c8 <__assert_fail@plt+0x68a8>
   18e50:	ldr	r3, [sp, #48]	; 0x30
   18e54:	add	sl, sl, r6
   18e58:	cmp	r5, #0
   18e5c:	movne	r9, #48	; 0x30
   18e60:	sub	r7, r3, sl
   18e64:	beq	19d4c <__assert_fail@plt+0x852c>
   18e68:	ldr	r3, [sp, #52]	; 0x34
   18e6c:	cmp	r3, #0
   18e70:	beq	19c88 <__assert_fail@plt+0x8468>
   18e74:	bl	115ec <__ctype_toupper_loc@plt>
   18e78:	add	r5, r5, r6
   18e7c:	add	lr, sp, #152	; 0x98
   18e80:	mov	r2, r5
   18e84:	add	r3, lr, r6
   18e88:	ldrb	ip, [r3, #-1]!
   18e8c:	ldr	r1, [r0]
   18e90:	cmp	lr, r3
   18e94:	ldr	r1, [r1, ip, lsl #2]
   18e98:	strb	r1, [r2, #-1]!
   18e9c:	bne	18e88 <__assert_fail@plt+0x7668>
   18ea0:	cmp	r9, #45	; 0x2d
   18ea4:	beq	198b8 <__assert_fail@plt+0x8098>
   18ea8:	sub	r2, fp, r6
   18eac:	cmp	r2, r7
   18eb0:	bcs	180c8 <__assert_fail@plt+0x68a8>
   18eb4:	cmp	r5, #0
   18eb8:	addeq	sl, sl, r2
   18ebc:	beq	18080 <__assert_fail@plt+0x6860>
   18ec0:	cmp	r2, #0
   18ec4:	beq	18080 <__assert_fail@plt+0x6860>
   18ec8:	cmp	r9, #43	; 0x2b
   18ecc:	cmpne	r9, #48	; 0x30
   18ed0:	add	r3, r5, r2
   18ed4:	mov	r0, r5
   18ed8:	moveq	r1, #48	; 0x30
   18edc:	movne	r1, #32
   18ee0:	add	sl, sl, r2
   18ee4:	mov	r5, r3
   18ee8:	bl	116ac <memset@plt>
   18eec:	b	18080 <__assert_fail@plt+0x6860>
   18ef0:	ldr	r2, [sp, #48]	; 0x30
   18ef4:	sub	r3, r4, #1
   18ef8:	cmp	r3, r7
   18efc:	movne	r4, r3
   18f00:	sub	r2, r2, sl
   18f04:	str	r2, [sp, #84]	; 0x54
   18f08:	bne	18474 <__assert_fail@plt+0x6c54>
   18f0c:	cmp	r9, #45	; 0x2d
   18f10:	mov	r3, r2
   18f14:	beq	198c8 <__assert_fail@plt+0x80a8>
   18f18:	cmp	fp, #0
   18f1c:	blt	198c8 <__assert_fail@plt+0x80a8>
   18f20:	cmp	fp, #1
   18f24:	movcs	r6, fp
   18f28:	movcc	r6, #1
   18f2c:	cmp	r6, r2
   18f30:	bcs	180c8 <__assert_fail@plt+0x68a8>
   18f34:	cmp	r5, #0
   18f38:	beq	18860 <__assert_fail@plt+0x7040>
   18f3c:	cmp	fp, #1
   18f40:	ble	18f68 <__assert_fail@plt+0x7748>
   18f44:	cmp	r9, #43	; 0x2b
   18f48:	cmpne	r9, #48	; 0x30
   18f4c:	sub	r2, fp, #1
   18f50:	mov	r0, r5
   18f54:	add	r3, r5, r2
   18f58:	moveq	r1, #48	; 0x30
   18f5c:	movne	r1, #32
   18f60:	mov	r5, r3
   18f64:	bl	116ac <memset@plt>
   18f68:	ldrb	r3, [r4]
   18f6c:	strb	r3, [r5], #1
   18f70:	b	18860 <__assert_fail@plt+0x7040>
   18f74:	ldr	r2, [sp, #100]	; 0x64
   18f78:	movw	r0, #9363	; 0x2493
   18f7c:	movt	r0, #37449	; 0x9249
   18f80:	mov	r1, #1
   18f84:	str	r1, [sp, #140]	; 0x8c
   18f88:	ldr	r2, [r2, #24]
   18f8c:	add	r2, r2, #6
   18f90:	asr	r1, r2, #31
   18f94:	smull	ip, r0, r0, r2
   18f98:	add	r0, r0, r2
   18f9c:	rsb	r1, r1, r0, asr #2
   18fa0:	rsb	r1, r1, r1, lsl #3
   18fa4:	sub	r2, r2, r1
   18fa8:	add	r2, r2, #1
   18fac:	b	18a20 <__assert_fail@plt+0x7200>
   18fb0:	cmp	r6, #69	; 0x45
   18fb4:	beq	18468 <__assert_fail@plt+0x6c48>
   18fb8:	mov	r2, #1
   18fbc:	str	r2, [sp, #140]	; 0x8c
   18fc0:	ldr	r2, [sp, #100]	; 0x64
   18fc4:	ldr	r2, [r2, #24]
   18fc8:	b	18a20 <__assert_fail@plt+0x7200>
   18fcc:	cmp	r6, #69	; 0x45
   18fd0:	beq	18468 <__assert_fail@plt+0x6c48>
   18fd4:	ldr	r2, [sp, #80]	; 0x50
   18fd8:	b	18c08 <__assert_fail@plt+0x73e8>
   18fdc:	cmp	r6, #69	; 0x45
   18fe0:	beq	18468 <__assert_fail@plt+0x6c48>
   18fe4:	ldr	r2, [sp, #100]	; 0x64
   18fe8:	mov	r0, #0
   18fec:	ldr	r1, [r2, #16]
   18ff0:	mov	r2, #2
   18ff4:	cmn	r1, #1
   18ff8:	str	r2, [sp, #140]	; 0x8c
   18ffc:	add	r1, r1, #1
   19000:	movlt	r2, #1
   19004:	movge	r2, r0
   19008:	movge	r8, #1
   1900c:	movlt	r8, r0
   19010:	str	r2, [sp, #84]	; 0x54
   19014:	str	r0, [sp, #144]	; 0x90
   19018:	b	18a40 <__assert_fail@plt+0x7220>
   1901c:	ldr	r3, [sp, #48]	; 0x30
   19020:	cmp	r9, #45	; 0x2d
   19024:	sub	r3, r3, sl
   19028:	beq	196d0 <__assert_fail@plt+0x7eb0>
   1902c:	cmp	fp, #0
   19030:	blt	196d0 <__assert_fail@plt+0x7eb0>
   19034:	cmp	fp, #1
   19038:	movcs	r6, fp
   1903c:	movcc	r6, #1
   19040:	cmp	r6, r3
   19044:	bcs	180c8 <__assert_fail@plt+0x68a8>
   19048:	cmp	r5, #0
   1904c:	beq	18860 <__assert_fail@plt+0x7040>
   19050:	cmp	fp, #1
   19054:	ble	1907c <__assert_fail@plt+0x785c>
   19058:	cmp	r9, #43	; 0x2b
   1905c:	cmpne	r9, #48	; 0x30
   19060:	sub	r2, fp, #1
   19064:	mov	r0, r5
   19068:	add	r3, r5, r2
   1906c:	moveq	r1, #48	; 0x30
   19070:	movne	r1, #32
   19074:	mov	r5, r3
   19078:	bl	116ac <memset@plt>
   1907c:	mov	r3, #10
   19080:	strb	r3, [r5], #1
   19084:	b	18860 <__assert_fail@plt+0x7040>
   19088:	mov	r7, #0
   1908c:	ldr	r2, [sp, #52]	; 0x34
   19090:	cmp	r8, #0
   19094:	mov	r3, #112	; 0x70
   19098:	movne	r2, #0
   1909c:	movne	r7, r8
   190a0:	str	r2, [sp, #52]	; 0x34
   190a4:	b	1859c <__assert_fail@plt+0x6d7c>
   190a8:	ldr	r2, [sp, #52]	; 0x34
   190ac:	cmp	r8, #0
   190b0:	movne	r2, r8
   190b4:	cmp	r6, #69	; 0x45
   190b8:	str	r2, [sp, #52]	; 0x34
   190bc:	bne	18598 <__assert_fail@plt+0x6d78>
   190c0:	b	18468 <__assert_fail@plt+0x6c48>
   190c4:	cmp	r6, #69	; 0x45
   190c8:	beq	187bc <__assert_fail@plt+0x6f9c>
   190cc:	ldr	r2, [sp, #100]	; 0x64
   190d0:	movw	r1, #34079	; 0x851f
   190d4:	movt	r1, #20971	; 0x51eb
   190d8:	mov	r0, #100	; 0x64
   190dc:	ldr	r2, [r2, #20]
   190e0:	smull	r1, ip, r1, r2
   190e4:	asr	r1, r2, #31
   190e8:	rsb	r1, r1, ip, asr #5
   190ec:	mls	r1, r0, r1, r2
   190f0:	cmp	r1, #0
   190f4:	bge	1910c <__assert_fail@plt+0x78ec>
   190f8:	movw	r0, #63636	; 0xf894
   190fc:	movt	r0, #65535	; 0xffff
   19100:	cmp	r2, r0
   19104:	rsblt	r1, r1, #0
   19108:	addge	r1, r1, #100	; 0x64
   1910c:	cmp	r9, #0
   19110:	bne	19768 <__assert_fail@plt+0x7f48>
   19114:	ldr	r2, [sp, #1236]	; 0x4d4
   19118:	cmp	r2, #43	; 0x2b
   1911c:	beq	19cdc <__assert_fail@plt+0x84bc>
   19120:	mov	r9, r2
   19124:	mov	r2, #0
   19128:	mov	r8, #1
   1912c:	str	r2, [sp, #84]	; 0x54
   19130:	str	r2, [sp, #144]	; 0x90
   19134:	mov	r2, #2
   19138:	str	r2, [sp, #140]	; 0x8c
   1913c:	mov	r0, #0
   19140:	b	18a40 <__assert_fail@plt+0x7220>
   19144:	cmp	r6, #69	; 0x45
   19148:	beq	187bc <__assert_fail@plt+0x6f9c>
   1914c:	cmp	r6, #79	; 0x4f
   19150:	beq	18468 <__assert_fail@plt+0x6c48>
   19154:	ldr	r2, [sp, #100]	; 0x64
   19158:	ldr	r1, [r2, #20]
   1915c:	movw	r2, #63636	; 0xf894
   19160:	movt	r2, #65535	; 0xffff
   19164:	cmp	r1, r2
   19168:	add	r1, r1, #1888	; 0x760
   1916c:	movlt	r2, #1
   19170:	movge	r2, #0
   19174:	movge	r8, #1
   19178:	movlt	r8, #0
   1917c:	cmp	r9, #0
   19180:	add	r1, r1, #12
   19184:	str	r2, [sp, #84]	; 0x54
   19188:	bne	196fc <__assert_fail@plt+0x7edc>
   1918c:	ldr	r2, [sp, #1236]	; 0x4d4
   19190:	cmp	r2, #43	; 0x2b
   19194:	beq	19714 <__assert_fail@plt+0x7ef4>
   19198:	mov	r0, r9
   1919c:	mov	r3, #4
   191a0:	mov	r9, r2
   191a4:	str	r3, [sp, #140]	; 0x8c
   191a8:	str	r0, [sp, #144]	; 0x90
   191ac:	b	18a54 <__assert_fail@plt+0x7234>
   191b0:	cmp	r6, #69	; 0x45
   191b4:	beq	187bc <__assert_fail@plt+0x6f9c>
   191b8:	ldr	r2, [sp, #100]	; 0x64
   191bc:	movw	r0, #63636	; 0xf894
   191c0:	movt	r0, #65535	; 0xffff
   191c4:	movw	r7, #1899	; 0x76b
   191c8:	movw	ip, #34079	; 0x851f
   191cc:	movt	ip, #20971	; 0x51eb
   191d0:	ldr	r1, [r2, #20]
   191d4:	add	r2, r1, #1888	; 0x760
   191d8:	cmp	r1, r0
   191dc:	add	r2, r2, #12
   191e0:	movge	r8, #0
   191e4:	movlt	r8, #1
   191e8:	cmp	r2, r7
   191ec:	mvnls	r2, #98	; 0x62
   191f0:	movhi	r2, #0
   191f4:	add	r2, r2, r1
   191f8:	cmp	r1, r0
   191fc:	str	r8, [sp, #84]	; 0x54
   19200:	asr	r0, r2, #31
   19204:	movlt	r8, #0
   19208:	movge	r8, #1
   1920c:	smull	r1, r2, ip, r2
   19210:	cmp	r9, #0
   19214:	rsb	r2, r0, r2, asr #5
   19218:	add	r1, r2, #19
   1921c:	bne	19878 <__assert_fail@plt+0x8058>
   19220:	ldr	r2, [sp, #1236]	; 0x4d4
   19224:	cmp	r2, #43	; 0x2b
   19228:	beq	19d64 <__assert_fail@plt+0x8544>
   1922c:	mov	r9, r2
   19230:	mov	r2, #0
   19234:	str	r2, [sp, #144]	; 0x90
   19238:	mov	r2, #2
   1923c:	str	r2, [sp, #140]	; 0x8c
   19240:	b	1913c <__assert_fail@plt+0x791c>
   19244:	cmp	r6, #69	; 0x45
   19248:	beq	18468 <__assert_fail@plt+0x6c48>
   1924c:	ldr	r2, [sp, #100]	; 0x64
   19250:	mov	r0, #0
   19254:	ldr	r1, [r2, #28]
   19258:	mov	r2, #3
   1925c:	b	18ff4 <__assert_fail@plt+0x77d4>
   19260:	cmp	r6, #69	; 0x45
   19264:	beq	18468 <__assert_fail@plt+0x6c48>
   19268:	ldr	r2, [sp, #100]	; 0x64
   1926c:	ldr	r2, [r2, #8]
   19270:	b	18c08 <__assert_fail@plt+0x73e8>
   19274:	cmp	r6, #69	; 0x45
   19278:	beq	18468 <__assert_fail@plt+0x6c48>
   1927c:	ldr	r2, [sp, #100]	; 0x64
   19280:	movw	r0, #9363	; 0x2493
   19284:	movt	r0, #37449	; 0x9249
   19288:	ldr	r7, [r2, #20]
   1928c:	ldr	r1, [r2, #24]
   19290:	ldr	r8, [r2, #28]
   19294:	cmp	r7, #0
   19298:	str	r1, [sp, #140]	; 0x8c
   1929c:	sub	r2, r8, r1
   192a0:	add	r2, r2, #380	; 0x17c
   192a4:	add	r2, r2, #2
   192a8:	asr	r1, r2, #31
   192ac:	smull	ip, r0, r0, r2
   192b0:	movlt	ip, #300	; 0x12c
   192b4:	mvnge	ip, #99	; 0x63
   192b8:	add	r0, r0, r2
   192bc:	add	ip, r7, ip
   192c0:	rsb	r1, r1, r0, asr #2
   192c4:	rsb	r1, r1, r1, lsl #3
   192c8:	sub	r2, r2, r1
   192cc:	sub	r2, r8, r2
   192d0:	adds	r2, r2, #3
   192d4:	str	r2, [sp, #84]	; 0x54
   192d8:	bmi	197b4 <__assert_fail@plt+0x7f94>
   192dc:	tst	ip, #3
   192e0:	movwne	r1, #365	; 0x16d
   192e4:	bne	19330 <__assert_fail@plt+0x7b10>
   192e8:	movw	r1, #34079	; 0x851f
   192ec:	movt	r1, #20971	; 0x51eb
   192f0:	asr	r2, ip, #31
   192f4:	smull	r0, r1, r1, ip
   192f8:	rsb	r2, r2, r1, asr #5
   192fc:	mov	r1, #100	; 0x64
   19300:	mls	r2, r1, r2, ip
   19304:	cmp	r2, #0
   19308:	movwne	r1, #366	; 0x16e
   1930c:	bne	19330 <__assert_fail@plt+0x7b10>
   19310:	mov	r0, #400	; 0x190
   19314:	movw	r2, #365	; 0x16d
   19318:	sdiv	r1, ip, r0
   1931c:	mls	r1, r0, r1, ip
   19320:	movw	r0, #366	; 0x16e
   19324:	cmp	r1, #0
   19328:	movne	r0, r2
   1932c:	mov	r1, r0
   19330:	ldr	r2, [sp, #140]	; 0x8c
   19334:	sub	r1, r8, r1
   19338:	movw	ip, #9363	; 0x2493
   1933c:	movt	ip, #37449	; 0x9249
   19340:	sub	r2, r1, r2
   19344:	add	r2, r2, #380	; 0x17c
   19348:	add	r2, r2, #2
   1934c:	asr	r0, r2, #31
   19350:	smull	r8, ip, ip, r2
   19354:	add	ip, ip, r2
   19358:	rsb	r0, r0, ip, asr #2
   1935c:	rsb	r0, r0, r0, lsl #3
   19360:	sub	r0, r2, r0
   19364:	sub	r0, r1, r0
   19368:	adds	r0, r0, #3
   1936c:	bmi	19ca0 <__assert_fail@plt+0x8480>
   19370:	mov	r1, #1
   19374:	movw	r2, #63635	; 0xf893
   19378:	movt	r2, #65535	; 0xffff
   1937c:	mov	r8, r1
   19380:	str	r0, [sp, #84]	; 0x54
   19384:	str	r2, [sp, #140]	; 0x8c
   19388:	cmp	r3, #71	; 0x47
   1938c:	beq	1990c <__assert_fail@plt+0x80ec>
   19390:	cmp	r3, #103	; 0x67
   19394:	bne	198e0 <__assert_fail@plt+0x80c0>
   19398:	movw	r1, #34079	; 0x851f
   1939c:	movt	r1, #20971	; 0x51eb
   193a0:	asr	r2, r7, #31
   193a4:	smull	r0, ip, r1, r7
   193a8:	rsb	r2, r2, ip, asr #5
   193ac:	mov	ip, #100	; 0x64
   193b0:	mls	r2, ip, r2, r7
   193b4:	add	r2, r2, r8
   193b8:	asr	ip, r2, #31
   193bc:	smull	r0, r1, r1, r2
   193c0:	rsb	r1, ip, r1, asr #5
   193c4:	mov	ip, #100	; 0x64
   193c8:	mls	r1, ip, r1, r2
   193cc:	cmp	r1, #0
   193d0:	blt	19750 <__assert_fail@plt+0x7f30>
   193d4:	cmp	r9, #0
   193d8:	bne	19768 <__assert_fail@plt+0x7f48>
   193dc:	ldr	r2, [sp, #1236]	; 0x4d4
   193e0:	cmp	r2, #43	; 0x2b
   193e4:	beq	19cdc <__assert_fail@plt+0x84bc>
   193e8:	mov	r2, #0
   193ec:	mov	r8, #1
   193f0:	ldr	r9, [sp, #1236]	; 0x4d4
   193f4:	str	r2, [sp, #84]	; 0x54
   193f8:	str	r2, [sp, #144]	; 0x90
   193fc:	mov	r2, #2
   19400:	str	r2, [sp, #140]	; 0x8c
   19404:	b	1913c <__assert_fail@plt+0x791c>
   19408:	cmp	r6, #69	; 0x45
   1940c:	beq	18468 <__assert_fail@plt+0x6c48>
   19410:	mov	r2, #2
   19414:	str	r2, [sp, #140]	; 0x8c
   19418:	ldr	r2, [sp, #100]	; 0x64
   1941c:	ldr	r2, [r2, #8]
   19420:	b	18a20 <__assert_fail@plt+0x7200>
   19424:	cmp	r6, #69	; 0x45
   19428:	beq	18468 <__assert_fail@plt+0x6c48>
   1942c:	mov	r1, #2
   19430:	ldr	r2, [sp, #80]	; 0x50
   19434:	str	r1, [sp, #140]	; 0x8c
   19438:	b	18a20 <__assert_fail@plt+0x7200>
   1943c:	cmp	r6, #69	; 0x45
   19440:	beq	18468 <__assert_fail@plt+0x6c48>
   19444:	mov	r2, #2
   19448:	str	r2, [sp, #140]	; 0x8c
   1944c:	ldr	r2, [sp, #100]	; 0x64
   19450:	ldr	r2, [r2, #4]
   19454:	b	18a20 <__assert_fail@plt+0x7200>
   19458:	ldr	r3, [sp, #48]	; 0x30
   1945c:	cmp	r6, #0
   19460:	sub	r3, r3, sl
   19464:	str	r3, [sp, #84]	; 0x54
   19468:	bne	18474 <__assert_fail@plt+0x6c54>
   1946c:	mvn	r3, #0
   19470:	movw	r8, #9980	; 0x26fc
   19474:	movt	r8, #2
   19478:	mov	ip, r3
   1947c:	str	r3, [sp, #140]	; 0x8c
   19480:	b	18c58 <__assert_fail@plt+0x7438>
   19484:	ldr	r3, [sp, #48]	; 0x30
   19488:	cmp	r6, #0
   1948c:	sub	r3, r3, sl
   19490:	str	r3, [sp, #84]	; 0x54
   19494:	bne	18474 <__assert_fail@plt+0x6c54>
   19498:	cmp	r9, #0
   1949c:	lsreq	r3, fp, #31
   194a0:	movne	r3, #0
   194a4:	cmp	r3, #0
   194a8:	bne	19cf0 <__assert_fail@plt+0x84d0>
   194ac:	sub	r3, fp, #6
   194b0:	movw	r8, #9960	; 0x26e8
   194b4:	movt	r8, #2
   194b8:	bic	r3, r3, r3, asr #31
   194bc:	mov	ip, r3
   194c0:	str	r3, [sp, #140]	; 0x8c
   194c4:	b	18c58 <__assert_fail@plt+0x7438>
   194c8:	movw	r8, #9972	; 0x26f4
   194cc:	movt	r8, #2
   194d0:	b	18c40 <__assert_fail@plt+0x7420>
   194d4:	ldrb	r2, [r4, #1]
   194d8:	add	r1, r4, #1
   194dc:	cmp	r2, #58	; 0x3a
   194e0:	beq	19cb8 <__assert_fail@plt+0x8498>
   194e4:	mov	r0, #1
   194e8:	str	r0, [sp, #140]	; 0x8c
   194ec:	cmp	r2, #122	; 0x7a
   194f0:	bne	18468 <__assert_fail@plt+0x6c48>
   194f4:	mov	r4, r1
   194f8:	b	1894c <__assert_fail@plt+0x712c>
   194fc:	mov	r7, #1
   19500:	b	1908c <__assert_fail@plt+0x786c>
   19504:	mov	r2, #1
   19508:	mov	r1, #100	; 0x64
   1950c:	str	r2, [sp, #144]	; 0x90
   19510:	mov	r2, #6
   19514:	str	r2, [sp, #140]	; 0x8c
   19518:	ldr	r2, [sp, #148]	; 0x94
   1951c:	mla	r1, r1, r2, r0
   19520:	mov	r0, #4
   19524:	b	18a40 <__assert_fail@plt+0x7220>
   19528:	mov	r1, #100	; 0x64
   1952c:	ldr	r7, [sp, #148]	; 0x94
   19530:	movw	r2, #10000	; 0x2710
   19534:	mul	r1, r1, r0
   19538:	mov	r0, #1
   1953c:	str	r0, [sp, #144]	; 0x90
   19540:	mov	r0, #20
   19544:	mla	r1, r2, r7, r1
   19548:	mov	r2, #9
   1954c:	str	r2, [sp, #140]	; 0x8c
   19550:	add	r1, r1, ip
   19554:	b	18a40 <__assert_fail@plt+0x7220>
   19558:	mov	r2, #1
   1955c:	mov	r1, #100	; 0x64
   19560:	str	r2, [sp, #144]	; 0x90
   19564:	mov	r2, #5
   19568:	str	r2, [sp, #140]	; 0x8c
   1956c:	ldr	r2, [sp, #148]	; 0x94
   19570:	mla	r1, r1, r2, r0
   19574:	b	1913c <__assert_fail@plt+0x791c>
   19578:	cmp	ip, #0
   1957c:	bne	19528 <__assert_fail@plt+0x7d08>
   19580:	cmp	r0, #0
   19584:	bne	19504 <__assert_fail@plt+0x7ce4>
   19588:	mov	r2, #1
   1958c:	ldr	r1, [sp, #148]	; 0x94
   19590:	str	r2, [sp, #144]	; 0x90
   19594:	mov	r2, #3
   19598:	str	r2, [sp, #140]	; 0x8c
   1959c:	b	18a40 <__assert_fail@plt+0x7220>
   195a0:	mov	r8, #45	; 0x2d
   195a4:	sub	r2, fp, #1
   195a8:	sub	r2, r2, r7
   195ac:	cmp	r2, #0
   195b0:	movle	r3, #0
   195b4:	andgt	r3, r3, #1
   195b8:	cmp	r3, #0
   195bc:	moveq	r2, #0
   195c0:	cmp	r9, #95	; 0x5f
   195c4:	beq	19684 <__assert_fail@plt+0x7e64>
   195c8:	ldr	r3, [sp, #48]	; 0x30
   195cc:	sub	r3, r3, sl
   195d0:	cmp	r3, #1
   195d4:	bls	180c8 <__assert_fail@plt+0x68a8>
   195d8:	cmp	r5, #0
   195dc:	add	sl, sl, #1
   195e0:	strbne	r8, [r5], #1
   195e4:	cmp	r9, #45	; 0x2d
   195e8:	beq	195f8 <__assert_fail@plt+0x7dd8>
   195ec:	sub	fp, fp, #1
   195f0:	cmp	fp, #0
   195f4:	bge	18b68 <__assert_fail@plt+0x7348>
   195f8:	mov	r8, r7
   195fc:	mov	fp, #0
   19600:	b	18b74 <__assert_fail@plt+0x7354>
   19604:	mov	sl, r1
   19608:	b	18098 <__assert_fail@plt+0x6878>
   1960c:	mov	r0, r5
   19610:	mov	r1, r6
   19614:	mov	r2, r7
   19618:	add	r5, r5, r7
   1961c:	bl	11490 <memcpy@plt>
   19620:	b	18548 <__assert_fail@plt+0x6d28>
   19624:	mov	r0, r5
   19628:	add	r1, r6, #1
   1962c:	mov	r2, r8
   19630:	add	r5, r5, r8
   19634:	bl	11490 <memcpy@plt>
   19638:	b	18694 <__assert_fail@plt+0x6e74>
   1963c:	cmp	r8, #0
   19640:	beq	18694 <__assert_fail@plt+0x6e74>
   19644:	add	r5, r5, r8
   19648:	add	r8, r6, r8
   1964c:	bl	115e0 <__ctype_tolower_loc@plt>
   19650:	mov	r3, r5
   19654:	ldrb	r1, [r8], #-1
   19658:	ldr	r2, [r0]
   1965c:	cmp	r8, r6
   19660:	ldr	r2, [r2, r1, lsl #2]
   19664:	strb	r2, [r3, #-1]!
   19668:	bne	19654 <__assert_fail@plt+0x7e34>
   1966c:	b	18694 <__assert_fail@plt+0x6e74>
   19670:	mov	r6, r7
   19674:	mov	fp, #0
   19678:	b	18cac <__assert_fail@plt+0x748c>
   1967c:	mov	r8, #43	; 0x2b
   19680:	b	195a4 <__assert_fail@plt+0x7d84>
   19684:	ldr	r3, [sp, #48]	; 0x30
   19688:	add	sl, sl, r2
   1968c:	cmp	r5, #0
   19690:	sub	fp, fp, r2
   19694:	sub	r3, r3, sl
   19698:	beq	196e8 <__assert_fail@plt+0x7ec8>
   1969c:	mov	r0, r5
   196a0:	mov	r1, #32
   196a4:	str	r3, [sp, #84]	; 0x54
   196a8:	add	r5, r5, r2
   196ac:	bl	116ac <memset@plt>
   196b0:	ldr	r3, [sp, #84]	; 0x54
   196b4:	b	195d0 <__assert_fail@plt+0x7db0>
   196b8:	cmp	r3, #1
   196bc:	bls	180c8 <__assert_fail@plt+0x68a8>
   196c0:	cmp	r5, #0
   196c4:	mov	r6, #1
   196c8:	bne	18858 <__assert_fail@plt+0x7038>
   196cc:	b	18860 <__assert_fail@plt+0x7040>
   196d0:	cmp	r3, #1
   196d4:	bls	180c8 <__assert_fail@plt+0x68a8>
   196d8:	cmp	r5, #0
   196dc:	mov	r6, #1
   196e0:	bne	1907c <__assert_fail@plt+0x785c>
   196e4:	b	18860 <__assert_fail@plt+0x7040>
   196e8:	cmp	r3, #1
   196ec:	bls	180c8 <__assert_fail@plt+0x68a8>
   196f0:	add	sl, sl, #1
   196f4:	sub	fp, fp, #1
   196f8:	b	195f0 <__assert_fail@plt+0x7dd0>
   196fc:	cmp	r9, #43	; 0x2b
   19700:	movne	r2, #0
   19704:	strne	r2, [sp, #144]	; 0x90
   19708:	movne	r2, #4
   1970c:	strne	r2, [sp, #140]	; 0x8c
   19710:	bne	1913c <__assert_fail@plt+0x791c>
   19714:	mov	r2, #4
   19718:	str	r2, [sp, #140]	; 0x8c
   1971c:	movw	r2, #9999	; 0x270f
   19720:	cmp	r2, r1
   19724:	movcc	r2, #1
   19728:	movcc	r9, #43	; 0x2b
   1972c:	strcc	r2, [sp, #144]	; 0x90
   19730:	bcc	1913c <__assert_fail@plt+0x791c>
   19734:	ldr	r2, [sp, #140]	; 0x8c
   19738:	mov	r9, #43	; 0x2b
   1973c:	cmp	fp, r2
   19740:	movle	r2, #0
   19744:	movgt	r2, #1
   19748:	str	r2, [sp, #144]	; 0x90
   1974c:	b	1913c <__assert_fail@plt+0x791c>
   19750:	ldr	r2, [sp, #140]	; 0x8c
   19754:	cmp	r7, r2
   19758:	bge	19d74 <__assert_fail@plt+0x8554>
   1975c:	cmp	r9, #0
   19760:	rsb	r1, r1, #0
   19764:	beq	193dc <__assert_fail@plt+0x7bbc>
   19768:	cmp	r9, #43	; 0x2b
   1976c:	beq	19d9c <__assert_fail@plt+0x857c>
   19770:	mov	r2, #0
   19774:	mov	r8, #1
   19778:	str	r2, [sp, #84]	; 0x54
   1977c:	str	r2, [sp, #144]	; 0x90
   19780:	mov	r2, #2
   19784:	str	r2, [sp, #140]	; 0x8c
   19788:	b	1913c <__assert_fail@plt+0x791c>
   1978c:	mov	r1, #11
   19790:	mov	r0, #0
   19794:	mov	r3, #1
   19798:	mul	r1, r1, r2
   1979c:	str	r0, [sp, #84]	; 0x54
   197a0:	str	r3, [sp, #140]	; 0x8c
   197a4:	str	r0, [sp, #144]	; 0x90
   197a8:	asr	r1, r1, #5
   197ac:	add	r1, r1, r3
   197b0:	b	18a60 <__assert_fail@plt+0x7240>
   197b4:	sub	ip, ip, #1
   197b8:	tst	ip, #3
   197bc:	movwne	r2, #365	; 0x16d
   197c0:	bne	19808 <__assert_fail@plt+0x7fe8>
   197c4:	movw	r1, #34079	; 0x851f
   197c8:	movt	r1, #20971	; 0x51eb
   197cc:	asr	r2, ip, #31
   197d0:	smull	r0, r1, r1, ip
   197d4:	rsb	r2, r2, r1, asr #5
   197d8:	mov	r1, #100	; 0x64
   197dc:	mls	r2, r1, r2, ip
   197e0:	cmp	r2, #0
   197e4:	movwne	r2, #366	; 0x16e
   197e8:	bne	19808 <__assert_fail@plt+0x7fe8>
   197ec:	mov	r0, #400	; 0x190
   197f0:	movw	r2, #365	; 0x16d
   197f4:	sdiv	r1, ip, r0
   197f8:	mls	r1, r0, r1, ip
   197fc:	movw	r0, #366	; 0x16e
   19800:	cmp	r1, #0
   19804:	moveq	r2, r0
   19808:	ldr	r1, [sp, #140]	; 0x8c
   1980c:	add	r2, r8, r2
   19810:	movw	ip, #9363	; 0x2493
   19814:	movt	ip, #37449	; 0x9249
   19818:	movw	r0, #63637	; 0xf895
   1981c:	movt	r0, #65535	; 0xffff
   19820:	str	r2, [sp, #84]	; 0x54
   19824:	str	r0, [sp, #140]	; 0x8c
   19828:	sub	r2, r2, r1
   1982c:	mvn	r1, #0
   19830:	add	r2, r2, #380	; 0x17c
   19834:	add	r2, r2, #2
   19838:	asr	r0, r2, #31
   1983c:	smull	r8, ip, ip, r2
   19840:	mov	r8, r1
   19844:	add	ip, ip, r2
   19848:	rsb	ip, r0, ip, asr #2
   1984c:	rsb	ip, ip, ip, lsl #3
   19850:	sub	r2, r2, ip
   19854:	ldr	ip, [sp, #84]	; 0x54
   19858:	sub	r2, ip, r2
   1985c:	add	r2, r2, #3
   19860:	str	r2, [sp, #84]	; 0x54
   19864:	b	19388 <__assert_fail@plt+0x7b68>
   19868:	mov	r2, #1
   1986c:	mov	r8, #0
   19870:	str	r2, [sp, #84]	; 0x54
   19874:	b	1898c <__assert_fail@plt+0x716c>
   19878:	cmp	r9, #43	; 0x2b
   1987c:	beq	19d64 <__assert_fail@plt+0x8544>
   19880:	mov	r2, #0
   19884:	str	r2, [sp, #144]	; 0x90
   19888:	mov	r2, #2
   1988c:	str	r2, [sp, #140]	; 0x8c
   19890:	b	1913c <__assert_fail@plt+0x791c>
   19894:	cmp	r6, r3
   19898:	bcs	180c8 <__assert_fail@plt+0x68a8>
   1989c:	ldr	r3, [sp, #48]	; 0x30
   198a0:	add	sl, sl, r6
   198a4:	cmp	r5, #0
   198a8:	sub	r7, r3, sl
   198ac:	bne	18e68 <__assert_fail@plt+0x7648>
   198b0:	cmp	r9, #45	; 0x2d
   198b4:	bne	19d4c <__assert_fail@plt+0x852c>
   198b8:	ldr	r3, [sp, #48]	; 0x30
   198bc:	cmp	r3, sl
   198c0:	bne	18080 <__assert_fail@plt+0x6860>
   198c4:	b	180c8 <__assert_fail@plt+0x68a8>
   198c8:	cmp	r3, #1
   198cc:	bls	180c8 <__assert_fail@plt+0x68a8>
   198d0:	cmp	r5, #0
   198d4:	mov	r6, #1
   198d8:	bne	18f68 <__assert_fail@plt+0x7748>
   198dc:	b	18860 <__assert_fail@plt+0x7040>
   198e0:	ldr	r0, [sp, #84]	; 0x54
   198e4:	movw	r1, #9363	; 0x2493
   198e8:	movt	r1, #37449	; 0x9249
   198ec:	smull	ip, r1, r1, r0
   198f0:	mov	ip, #2
   198f4:	asr	r2, r0, #31
   198f8:	str	ip, [sp, #140]	; 0x8c
   198fc:	add	r1, r1, r0
   19900:	rsb	r2, r2, r1, asr ip
   19904:	add	r2, r2, #1
   19908:	b	18a20 <__assert_fail@plt+0x7200>
   1990c:	ldr	r2, [sp, #140]	; 0x8c
   19910:	cmp	r7, r2
   19914:	add	r7, r7, #1888	; 0x760
   19918:	movlt	r2, #1
   1991c:	movge	r2, #0
   19920:	add	r7, r7, #12
   19924:	movge	r8, #1
   19928:	movlt	r8, #0
   1992c:	cmp	r9, #0
   19930:	str	r2, [sp, #84]	; 0x54
   19934:	add	r1, r7, r1
   19938:	bne	196fc <__assert_fail@plt+0x7edc>
   1993c:	ldr	r2, [sp, #1236]	; 0x4d4
   19940:	cmp	r2, #43	; 0x2b
   19944:	beq	19714 <__assert_fail@plt+0x7ef4>
   19948:	mov	r9, r2
   1994c:	mov	r2, #0
   19950:	str	r2, [sp, #144]	; 0x90
   19954:	mov	r2, #4
   19958:	str	r2, [sp, #140]	; 0x8c
   1995c:	b	1913c <__assert_fail@plt+0x791c>
   19960:	mov	r2, #0
   19964:	mov	r8, #1
   19968:	str	r2, [sp, #84]	; 0x54
   1996c:	b	1898c <__assert_fail@plt+0x716c>
   19970:	ldr	r3, [sp, #56]	; 0x38
   19974:	mov	fp, #9
   19978:	cmp	r3, #0
   1997c:	bne	19dc0 <__assert_fail@plt+0x85a0>
   19980:	ldr	r3, [sp, #136]	; 0x88
   19984:	cmp	r3, #0
   19988:	movne	r6, #8
   1998c:	ldrne	r3, [sp, #76]	; 0x4c
   19990:	bne	19a0c <__assert_fail@plt+0x81ec>
   19994:	ldr	r3, [sp, #132]	; 0x84
   19998:	cmp	r3, #0
   1999c:	movne	r6, #7
   199a0:	ldrne	r3, [sp, #44]	; 0x2c
   199a4:	bne	19a0c <__assert_fail@plt+0x81ec>
   199a8:	ldr	r3, [sp, #128]	; 0x80
   199ac:	cmp	r3, #0
   199b0:	movne	r6, #6
   199b4:	ldrne	r3, [sp, #72]	; 0x48
   199b8:	bne	19a0c <__assert_fail@plt+0x81ec>
   199bc:	ldr	r3, [sp, #68]	; 0x44
   199c0:	cmp	r3, #0
   199c4:	movne	r6, #5
   199c8:	ldrne	r3, [sp, #40]	; 0x28
   199cc:	bne	19a0c <__assert_fail@plt+0x81ec>
   199d0:	ldr	r3, [sp, #64]	; 0x40
   199d4:	cmp	r3, #0
   199d8:	movne	r6, #4
   199dc:	ldrne	r3, [sp, #36]	; 0x24
   199e0:	bne	19a0c <__assert_fail@plt+0x81ec>
   199e4:	ldr	r3, [sp, #60]	; 0x3c
   199e8:	cmp	r3, #0
   199ec:	movne	r6, #3
   199f0:	ldrne	r3, [sp, #32]
   199f4:	bne	19a0c <__assert_fail@plt+0x81ec>
   199f8:	ldr	r3, [sp, #120]	; 0x78
   199fc:	cmp	r3, #0
   19a00:	beq	18e1c <__assert_fail@plt+0x75fc>
   19a04:	ldr	r3, [sp, #28]
   19a08:	mov	r6, #2
   19a0c:	movw	ip, #26215	; 0x6667
   19a10:	movt	ip, #26214	; 0x6666
   19a14:	asr	lr, r3, #31
   19a18:	movw	r0, #34079	; 0x851f
   19a1c:	movt	r0, #20971	; 0x51eb
   19a20:	smull	r2, r1, ip, r3
   19a24:	sub	r8, r6, #2
   19a28:	smull	r2, r0, r0, r3
   19a2c:	add	r2, sp, #1184	; 0x4a0
   19a30:	cmp	r8, #0
   19a34:	add	r2, r2, #8
   19a38:	rsb	r1, lr, r1, asr #2
   19a3c:	add	r8, r2, r8
   19a40:	asr	r2, r1, #31
   19a44:	smull	r7, ip, ip, r1
   19a48:	rsb	r7, lr, r0, asr #5
   19a4c:	add	r0, r1, r1, lsl #2
   19a50:	rsb	r2, r2, ip, asr #2
   19a54:	add	r2, r2, r2, lsl #2
   19a58:	sub	r2, r1, r2, lsl #1
   19a5c:	sub	r1, r3, r0, lsl #1
   19a60:	add	r0, sp, #1184	; 0x4a0
   19a64:	add	r0, r0, #8
   19a68:	add	r2, r2, #48	; 0x30
   19a6c:	add	r1, r1, #48	; 0x30
   19a70:	add	r0, r0, r6
   19a74:	strb	r1, [r0, #-1041]	; 0xfffffbef
   19a78:	strb	r2, [r8, #-1040]	; 0xfffffbf0
   19a7c:	beq	18e3c <__assert_fail@plt+0x761c>
   19a80:	movw	r8, #26215	; 0x6667
   19a84:	movt	r8, #26214	; 0x6666
   19a88:	movw	r1, #19923	; 0x4dd3
   19a8c:	movt	r1, #4194	; 0x1062
   19a90:	smull	r2, r0, r8, r7
   19a94:	asr	r2, r7, #31
   19a98:	smull	ip, r1, r1, r3
   19a9c:	add	ip, sp, #1184	; 0x4a0
   19aa0:	rsb	r2, r2, r0, asr #2
   19aa4:	add	ip, ip, #8
   19aa8:	sub	r0, r6, #3
   19aac:	cmp	r0, #0
   19ab0:	add	r0, ip, r0
   19ab4:	add	r2, r2, r2, lsl #2
   19ab8:	rsb	r1, lr, r1, asr #6
   19abc:	sub	r2, r7, r2, lsl #1
   19ac0:	add	r2, r2, #48	; 0x30
   19ac4:	strb	r2, [r0, #-1040]	; 0xfffffbf0
   19ac8:	beq	18e3c <__assert_fail@plt+0x761c>
   19acc:	smull	r2, ip, r8, r1
   19ad0:	movw	r2, #35757	; 0x8bad
   19ad4:	movt	r2, #26843	; 0x68db
   19ad8:	asr	r0, r1, #31
   19adc:	smull	r7, r2, r2, r3
   19ae0:	add	r7, sp, #1184	; 0x4a0
   19ae4:	rsb	r0, r0, ip, asr #2
   19ae8:	add	r7, r7, #8
   19aec:	sub	ip, r6, #4
   19af0:	cmp	ip, #0
   19af4:	add	ip, r7, ip
   19af8:	add	r0, r0, r0, lsl #2
   19afc:	rsb	r2, lr, r2, asr #12
   19b00:	sub	r1, r1, r0, lsl #1
   19b04:	add	r1, r1, #48	; 0x30
   19b08:	strb	r1, [ip, #-1040]	; 0xfffffbf0
   19b0c:	beq	18e3c <__assert_fail@plt+0x761c>
   19b10:	smull	r1, ip, r8, r2
   19b14:	movw	r1, #46473	; 0xb589
   19b18:	movt	r1, #5368	; 0x14f8
   19b1c:	asr	r0, r2, #31
   19b20:	smull	r7, r1, r1, r3
   19b24:	add	r7, sp, #1184	; 0x4a0
   19b28:	rsb	r0, r0, ip, asr #2
   19b2c:	add	r7, r7, #8
   19b30:	sub	ip, r6, #5
   19b34:	cmp	ip, #0
   19b38:	add	ip, r7, ip
   19b3c:	add	r0, r0, r0, lsl #2
   19b40:	rsb	r1, lr, r1, asr #13
   19b44:	sub	r2, r2, r0, lsl #1
   19b48:	add	r2, r2, #48	; 0x30
   19b4c:	strb	r2, [ip, #-1040]	; 0xfffffbf0
   19b50:	beq	18e3c <__assert_fail@plt+0x761c>
   19b54:	smull	r2, ip, r8, r1
   19b58:	movw	r2, #56963	; 0xde83
   19b5c:	movt	r2, #17179	; 0x431b
   19b60:	asr	r0, r1, #31
   19b64:	smull	r7, r2, r2, r3
   19b68:	add	r7, sp, #1184	; 0x4a0
   19b6c:	rsb	r0, r0, ip, asr #2
   19b70:	add	r7, r7, #8
   19b74:	sub	ip, r6, #6
   19b78:	cmp	ip, #0
   19b7c:	add	ip, r7, ip
   19b80:	add	r0, r0, r0, lsl #2
   19b84:	rsb	r2, lr, r2, asr #18
   19b88:	sub	r1, r1, r0, lsl #1
   19b8c:	add	r1, r1, #48	; 0x30
   19b90:	strb	r1, [ip, #-1040]	; 0xfffffbf0
   19b94:	beq	18e3c <__assert_fail@plt+0x761c>
   19b98:	smull	r1, ip, r8, r2
   19b9c:	movw	r1, #51819	; 0xca6b
   19ba0:	movt	r1, #27487	; 0x6b5f
   19ba4:	asr	r0, r2, #31
   19ba8:	smull	r7, r1, r1, r3
   19bac:	add	r7, sp, #1184	; 0x4a0
   19bb0:	rsb	r0, r0, ip, asr #2
   19bb4:	add	r7, r7, #8
   19bb8:	sub	ip, r6, #7
   19bbc:	cmp	ip, #0
   19bc0:	add	ip, r7, ip
   19bc4:	add	r0, r0, r0, lsl #2
   19bc8:	rsb	r1, lr, r1, asr #22
   19bcc:	sub	r2, r2, r0, lsl #1
   19bd0:	add	r2, r2, #48	; 0x30
   19bd4:	strb	r2, [ip, #-1040]	; 0xfffffbf0
   19bd8:	beq	18e3c <__assert_fail@plt+0x761c>
   19bdc:	smull	r2, ip, r8, r1
   19be0:	movw	r2, #15241	; 0x3b89
   19be4:	movt	r2, #21990	; 0x55e6
   19be8:	asr	r0, r1, #31
   19bec:	smull	r2, r3, r2, r3
   19bf0:	sub	r2, r6, #8
   19bf4:	rsb	r0, r0, ip, asr #2
   19bf8:	add	r7, r7, r2
   19bfc:	cmp	r2, #1
   19c00:	add	r0, r0, r0, lsl #2
   19c04:	rsb	r3, lr, r3, asr #25
   19c08:	sub	r0, r1, r0, lsl #1
   19c0c:	add	r2, r0, #48	; 0x30
   19c10:	strb	r2, [r7, #-1040]	; 0xfffffbf0
   19c14:	bne	18e3c <__assert_fail@plt+0x761c>
   19c18:	smull	r2, r1, r8, r3
   19c1c:	asr	r2, r3, #31
   19c20:	rsb	r2, r2, r1, asr #2
   19c24:	add	r2, r2, r2, lsl #2
   19c28:	sub	r3, r3, r2, lsl #1
   19c2c:	add	r3, r3, #48	; 0x30
   19c30:	strb	r3, [sp, #152]	; 0x98
   19c34:	b	18e3c <__assert_fail@plt+0x761c>
   19c38:	mov	r2, r6
   19c3c:	mov	r0, r5
   19c40:	ldr	r1, [sp, #112]	; 0x70
   19c44:	add	r5, r5, r6
   19c48:	bl	11490 <memcpy@plt>
   19c4c:	b	1893c <__assert_fail@plt+0x711c>
   19c50:	cmp	r6, #0
   19c54:	beq	1893c <__assert_fail@plt+0x711c>
   19c58:	bl	115e0 <__ctype_tolower_loc@plt>
   19c5c:	ldr	ip, [sp, #112]	; 0x70
   19c60:	add	r5, r5, r6
   19c64:	mov	r3, r5
   19c68:	add	r6, ip, r6
   19c6c:	ldrb	r1, [r6, #-1]!
   19c70:	ldr	r2, [r0]
   19c74:	cmp	ip, r6
   19c78:	ldr	r2, [r2, r1, lsl #2]
   19c7c:	strb	r2, [r3, #-1]!
   19c80:	bne	19c6c <__assert_fail@plt+0x844c>
   19c84:	b	1893c <__assert_fail@plt+0x711c>
   19c88:	mov	r0, r5
   19c8c:	mov	r2, r6
   19c90:	add	r1, sp, #152	; 0x98
   19c94:	add	r5, r5, r6
   19c98:	bl	11490 <memcpy@plt>
   19c9c:	b	18ea0 <__assert_fail@plt+0x7680>
   19ca0:	movw	r2, #63636	; 0xf894
   19ca4:	movt	r2, #65535	; 0xffff
   19ca8:	mov	r1, #0
   19cac:	mov	r8, r1
   19cb0:	str	r2, [sp, #140]	; 0x8c
   19cb4:	b	19388 <__assert_fail@plt+0x7b68>
   19cb8:	add	r0, r4, #2
   19cbc:	mov	ip, #1
   19cc0:	mov	r1, r0
   19cc4:	ldrb	r2, [r0], #1
   19cc8:	add	ip, ip, #1
   19ccc:	cmp	r2, #58	; 0x3a
   19cd0:	beq	19cc0 <__assert_fail@plt+0x84a0>
   19cd4:	str	ip, [sp, #140]	; 0x8c
   19cd8:	b	194ec <__assert_fail@plt+0x7ccc>
   19cdc:	mov	r2, #2
   19ce0:	mov	r8, #1
   19ce4:	str	r9, [sp, #84]	; 0x54
   19ce8:	str	r2, [sp, #140]	; 0x8c
   19cec:	b	19734 <__assert_fail@plt+0x7f14>
   19cf0:	ldr	r3, [sp, #52]	; 0x34
   19cf4:	mov	lr, #4
   19cf8:	mov	ip, #43	; 0x2b
   19cfc:	mov	r9, ip
   19d00:	mov	r0, r6
   19d04:	movw	r2, #9960	; 0x26e8
   19d08:	movt	r2, #2
   19d0c:	mvn	r1, #0
   19d10:	mov	r8, r2
   19d14:	mov	fp, r6
   19d18:	stm	sp, {r3, ip, lr}
   19d1c:	str	lr, [sp, #140]	; 0x8c
   19d20:	ldr	r3, [sp, #1244]	; 0x4dc
   19d24:	ldr	lr, [sp, #1248]	; 0x4e0
   19d28:	ldr	ip, [sp, #1252]	; 0x4e4
   19d2c:	str	r3, [sp, #12]
   19d30:	ldr	r3, [sp, #100]	; 0x64
   19d34:	str	lr, [sp, #16]
   19d38:	str	ip, [sp, #20]
   19d3c:	bl	17d70 <__assert_fail@plt+0x6550>
   19d40:	mov	r7, r0
   19d44:	mov	r6, r0
   19d48:	b	18cac <__assert_fail@plt+0x748c>
   19d4c:	sub	r6, fp, r6
   19d50:	cmp	r6, r7
   19d54:	bcs	180c8 <__assert_fail@plt+0x68a8>
   19d58:	add	sl, sl, r6
   19d5c:	mov	r5, #0
   19d60:	b	18080 <__assert_fail@plt+0x6860>
   19d64:	mov	r2, #2
   19d68:	str	r2, [sp, #140]	; 0x8c
   19d6c:	mov	r2, #99	; 0x63
   19d70:	b	19720 <__assert_fail@plt+0x7f00>
   19d74:	cmp	r9, #0
   19d78:	add	r1, r1, #100	; 0x64
   19d7c:	beq	193dc <__assert_fail@plt+0x7bbc>
   19d80:	b	19768 <__assert_fail@plt+0x7f48>
   19d84:	ldr	r2, [sp, #88]	; 0x58
   19d88:	mov	r3, #75	; 0x4b
   19d8c:	str	r3, [r2]
   19d90:	b	180d4 <__assert_fail@plt+0x68b4>
   19d94:	mov	fp, #2
   19d98:	b	199f8 <__assert_fail@plt+0x81d8>
   19d9c:	mov	r2, #0
   19da0:	mov	r8, #1
   19da4:	str	r2, [sp, #84]	; 0x54
   19da8:	mov	r2, #2
   19dac:	str	r2, [sp, #140]	; 0x8c
   19db0:	b	19734 <__assert_fail@plt+0x7f14>
   19db4:	ldr	r3, [sp, #56]	; 0x38
   19db8:	cmp	r3, #0
   19dbc:	beq	19980 <__assert_fail@plt+0x8160>
   19dc0:	mov	r6, #9
   19dc4:	ldr	r3, [sp, #1252]	; 0x4e4
   19dc8:	b	19a0c <__assert_fail@plt+0x81ec>
   19dcc:	strd	r4, [sp, #-16]!
   19dd0:	mov	ip, #0
   19dd4:	str	r6, [sp, #8]
   19dd8:	mvn	r6, #0
   19ddc:	str	lr, [sp, #12]
   19de0:	sub	sp, sp, #32
   19de4:	ldr	r4, [sp, #48]	; 0x30
   19de8:	add	r5, sp, #31
   19dec:	str	ip, [sp]
   19df0:	ldr	lr, [sp, #52]	; 0x34
   19df4:	str	ip, [sp, #4]
   19df8:	str	r6, [sp, #8]
   19dfc:	str	r5, [sp, #12]
   19e00:	str	r4, [sp, #16]
   19e04:	str	lr, [sp, #20]
   19e08:	strb	ip, [sp, #31]
   19e0c:	bl	17d70 <__assert_fail@plt+0x6550>
   19e10:	add	sp, sp, #32
   19e14:	ldrd	r4, [sp]
   19e18:	ldr	r6, [sp, #8]
   19e1c:	add	sp, sp, #12
   19e20:	pop	{pc}		; (ldr pc, [sp], #4)
   19e24:	strd	r4, [sp, #-16]!
   19e28:	subs	r4, r0, #0
   19e2c:	str	r6, [sp, #8]
   19e30:	str	lr, [sp, #12]
   19e34:	beq	19ecc <__assert_fail@plt+0x86ac>
   19e38:	mov	r1, #47	; 0x2f
   19e3c:	bl	1173c <strrchr@plt>
   19e40:	subs	r5, r0, #0
   19e44:	beq	19ea4 <__assert_fail@plt+0x8684>
   19e48:	add	r6, r5, #1
   19e4c:	sub	r3, r6, r4
   19e50:	cmp	r3, #6
   19e54:	ble	19ea4 <__assert_fail@plt+0x8684>
   19e58:	movw	r1, #10048	; 0x2740
   19e5c:	movt	r1, #2
   19e60:	mov	r2, #7
   19e64:	sub	r0, r5, #6
   19e68:	bl	117e4 <strncmp@plt>
   19e6c:	cmp	r0, #0
   19e70:	bne	19ea4 <__assert_fail@plt+0x8684>
   19e74:	movw	r1, #10056	; 0x2748
   19e78:	movt	r1, #2
   19e7c:	mov	r2, #3
   19e80:	mov	r0, r6
   19e84:	bl	117e4 <strncmp@plt>
   19e88:	cmp	r0, #0
   19e8c:	movne	r4, r6
   19e90:	bne	19ea4 <__assert_fail@plt+0x8684>
   19e94:	add	r4, r5, #4
   19e98:	movw	r3, #12752	; 0x31d0
   19e9c:	movt	r3, #3
   19ea0:	str	r4, [r3]
   19ea4:	movw	r2, #12916	; 0x3274
   19ea8:	movt	r2, #3
   19eac:	ldr	r6, [sp, #8]
   19eb0:	movw	r3, #12756	; 0x31d4
   19eb4:	movt	r3, #3
   19eb8:	str	r4, [r2]
   19ebc:	str	r4, [r3]
   19ec0:	ldrd	r4, [sp]
   19ec4:	add	sp, sp, #12
   19ec8:	pop	{pc}		; (ldr pc, [sp], #4)
   19ecc:	movw	r3, #12768	; 0x31e0
   19ed0:	movt	r3, #3
   19ed4:	movw	r0, #9992	; 0x2708
   19ed8:	movt	r0, #2
   19edc:	ldr	r3, [r3]
   19ee0:	mov	r2, #55	; 0x37
   19ee4:	mov	r1, #1
   19ee8:	bl	1152c <fwrite@plt>
   19eec:	bl	117f0 <abort@plt>
   19ef0:	mov	r2, #5
   19ef4:	strd	r4, [sp, #-16]!
   19ef8:	mov	r5, r0
   19efc:	str	r6, [sp, #8]
   19f00:	mov	r6, r1
   19f04:	mov	r1, r0
   19f08:	mov	r0, #0
   19f0c:	str	lr, [sp, #12]
   19f10:	bl	114c0 <dcgettext@plt>
   19f14:	cmp	r5, r0
   19f18:	mov	r4, r0
   19f1c:	beq	19f34 <__assert_fail@plt+0x8714>
   19f20:	mov	r0, r4
   19f24:	ldrd	r4, [sp]
   19f28:	ldr	r6, [sp, #8]
   19f2c:	add	sp, sp, #12
   19f30:	pop	{pc}		; (ldr pc, [sp], #4)
   19f34:	bl	20100 <__assert_fail@plt+0xe8e0>
   19f38:	ldrb	r3, [r0]
   19f3c:	bic	r3, r3, #32
   19f40:	cmp	r3, #85	; 0x55
   19f44:	bne	19fac <__assert_fail@plt+0x878c>
   19f48:	ldrb	r3, [r0, #1]
   19f4c:	bic	r3, r3, #32
   19f50:	cmp	r3, #84	; 0x54
   19f54:	bne	1a02c <__assert_fail@plt+0x880c>
   19f58:	ldrb	r3, [r0, #2]
   19f5c:	bic	r3, r3, #32
   19f60:	cmp	r3, #70	; 0x46
   19f64:	bne	1a02c <__assert_fail@plt+0x880c>
   19f68:	ldrb	r3, [r0, #3]
   19f6c:	cmp	r3, #45	; 0x2d
   19f70:	bne	1a02c <__assert_fail@plt+0x880c>
   19f74:	ldrb	r3, [r0, #4]
   19f78:	cmp	r3, #56	; 0x38
   19f7c:	bne	1a02c <__assert_fail@plt+0x880c>
   19f80:	ldrb	r3, [r0, #5]
   19f84:	cmp	r3, #0
   19f88:	bne	1a02c <__assert_fail@plt+0x880c>
   19f8c:	ldrb	r2, [r4]
   19f90:	movw	r3, #10148	; 0x27a4
   19f94:	movt	r3, #2
   19f98:	movw	r4, #10160	; 0x27b0
   19f9c:	movt	r4, #2
   19fa0:	cmp	r2, #96	; 0x60
   19fa4:	movne	r4, r3
   19fa8:	b	19f20 <__assert_fail@plt+0x8700>
   19fac:	cmp	r3, #71	; 0x47
   19fb0:	bne	1a02c <__assert_fail@plt+0x880c>
   19fb4:	ldrb	r3, [r0, #1]
   19fb8:	bic	r3, r3, #32
   19fbc:	cmp	r3, #66	; 0x42
   19fc0:	bne	1a02c <__assert_fail@plt+0x880c>
   19fc4:	ldrb	r3, [r0, #2]
   19fc8:	cmp	r3, #49	; 0x31
   19fcc:	bne	1a02c <__assert_fail@plt+0x880c>
   19fd0:	ldrb	r3, [r0, #3]
   19fd4:	cmp	r3, #56	; 0x38
   19fd8:	bne	1a02c <__assert_fail@plt+0x880c>
   19fdc:	ldrb	r3, [r0, #4]
   19fe0:	cmp	r3, #48	; 0x30
   19fe4:	bne	1a02c <__assert_fail@plt+0x880c>
   19fe8:	ldrb	r3, [r0, #5]
   19fec:	cmp	r3, #51	; 0x33
   19ff0:	bne	1a02c <__assert_fail@plt+0x880c>
   19ff4:	ldrb	r3, [r0, #6]
   19ff8:	cmp	r3, #48	; 0x30
   19ffc:	bne	1a02c <__assert_fail@plt+0x880c>
   1a000:	ldrb	r3, [r0, #7]
   1a004:	cmp	r3, #0
   1a008:	bne	1a02c <__assert_fail@plt+0x880c>
   1a00c:	ldrb	r2, [r4]
   1a010:	movw	r3, #10152	; 0x27a8
   1a014:	movt	r3, #2
   1a018:	movw	r4, #10156	; 0x27ac
   1a01c:	movt	r4, #2
   1a020:	cmp	r2, #96	; 0x60
   1a024:	movne	r4, r3
   1a028:	b	19f20 <__assert_fail@plt+0x8700>
   1a02c:	movw	r3, #10164	; 0x27b4
   1a030:	movt	r3, #2
   1a034:	cmp	r6, #9
   1a038:	movw	r4, #10144	; 0x27a0
   1a03c:	movt	r4, #2
   1a040:	movne	r4, r3
   1a044:	b	19f20 <__assert_fail@plt+0x8700>
   1a048:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1a04c:	strd	r6, [sp, #8]
   1a050:	strd	r8, [sp, #16]
   1a054:	mov	r8, r3
   1a058:	strd	sl, [sp, #24]
   1a05c:	mov	fp, r0
   1a060:	mov	sl, r1
   1a064:	str	lr, [sp, #32]
   1a068:	sub	sp, sp, #140	; 0x8c
   1a06c:	ldr	r3, [sp, #180]	; 0xb4
   1a070:	str	r2, [sp, #28]
   1a074:	and	r4, r3, #2
   1a078:	ubfx	r3, r3, #1, #1
   1a07c:	str	r3, [sp, #44]	; 0x2c
   1a080:	bl	11544 <__ctype_get_mb_cur_max@plt>
   1a084:	ldr	r3, [sp, #176]	; 0xb0
   1a088:	str	r0, [sp, #76]	; 0x4c
   1a08c:	cmp	r3, #10
   1a090:	ldrls	pc, [pc, r3, lsl #2]
   1a094:	b	1ba30 <__assert_fail@plt+0xa210>
   1a098:	andeq	sl, r1, r8, lsl r5
   1a09c:	andeq	sl, r1, r4, lsr r6
   1a0a0:			; <UNDEFINED> instruction: 0x0001abb0
   1a0a4:	andeq	sl, r1, r0, lsr #13
   1a0a8:	andeq	sl, r1, r0, lsr #8
   1a0ac:	muleq	r1, ip, r4
   1a0b0:	andeq	sl, r1, r4, ror r5
   1a0b4:	ldrdeq	sl, [r1], -ip
   1a0b8:	andeq	sl, r1, r4, asr #1
   1a0bc:	andeq	sl, r1, r4, asr #1
   1a0c0:	andeq	sl, r1, r4, asr #1
   1a0c4:	ldr	r3, [sp, #176]	; 0xb0
   1a0c8:	cmp	r3, #10
   1a0cc:	beq	1a0f8 <__assert_fail@plt+0x88d8>
   1a0d0:	mov	r1, r3
   1a0d4:	movw	r0, #10168	; 0x27b8
   1a0d8:	movt	r0, #2
   1a0dc:	bl	19ef0 <__assert_fail@plt+0x86d0>
   1a0e0:	str	r0, [sp, #188]	; 0xbc
   1a0e4:	movw	r0, #10164	; 0x27b4
   1a0e8:	movt	r0, #2
   1a0ec:	ldr	r1, [sp, #176]	; 0xb0
   1a0f0:	bl	19ef0 <__assert_fail@plt+0x86d0>
   1a0f4:	str	r0, [sp, #192]	; 0xc0
   1a0f8:	cmp	r4, #0
   1a0fc:	movne	r4, #0
   1a100:	beq	1b7bc <__assert_fail@plt+0x9f9c>
   1a104:	mov	r5, #0
   1a108:	ldr	r0, [sp, #192]	; 0xc0
   1a10c:	mov	r9, r5
   1a110:	str	r5, [sp, #64]	; 0x40
   1a114:	bl	11640 <strlen@plt>
   1a118:	mov	r3, #1
   1a11c:	ldr	r2, [sp, #44]	; 0x2c
   1a120:	cmp	r0, r5
   1a124:	moveq	r2, r5
   1a128:	str	r3, [sp, #32]
   1a12c:	str	r3, [sp, #48]	; 0x30
   1a130:	str	r5, [sp, #52]	; 0x34
   1a134:	str	r3, [sp, #60]	; 0x3c
   1a138:	ldr	r3, [sp, #180]	; 0xb4
   1a13c:	str	r0, [sp, #56]	; 0x38
   1a140:	str	r5, [sp, #68]	; 0x44
   1a144:	str	r5, [sp, #80]	; 0x50
   1a148:	str	r5, [sp, #84]	; 0x54
   1a14c:	and	r3, r3, #1
   1a150:	str	r2, [sp, #88]	; 0x58
   1a154:	str	r3, [sp, #92]	; 0x5c
   1a158:	ldr	r3, [sp, #180]	; 0xb4
   1a15c:	and	r3, r3, #4
   1a160:	str	r3, [sp, #96]	; 0x60
   1a164:	ldr	r3, [sp, #192]	; 0xc0
   1a168:	str	r3, [sp, #72]	; 0x48
   1a16c:	mov	r3, fp
   1a170:	mov	r7, #0
   1a174:	mov	fp, r9
   1a178:	mov	r9, r3
   1a17c:	cmn	r8, #1
   1a180:	beq	1a784 <__assert_fail@plt+0x8f64>
   1a184:	subs	r6, r8, r7
   1a188:	movne	r6, #1
   1a18c:	cmp	r6, #0
   1a190:	beq	1a79c <__assert_fail@plt+0x8f7c>
   1a194:	ldr	r0, [sp, #28]
   1a198:	ldr	r3, [sp, #48]	; 0x30
   1a19c:	cmp	r3, #0
   1a1a0:	add	r3, r0, r7
   1a1a4:	str	r3, [sp, #36]	; 0x24
   1a1a8:	beq	1ac28 <__assert_fail@plt+0x9408>
   1a1ac:	ldr	r2, [sp, #56]	; 0x38
   1a1b0:	cmp	r2, #0
   1a1b4:	beq	1b128 <__assert_fail@plt+0x9908>
   1a1b8:	cmp	r2, #1
   1a1bc:	mov	r3, r2
   1a1c0:	movls	r3, #0
   1a1c4:	movhi	r3, #1
   1a1c8:	cmn	r8, #1
   1a1cc:	add	r5, r7, r2
   1a1d0:	movne	r3, #0
   1a1d4:	cmp	r3, #0
   1a1d8:	beq	1a1e4 <__assert_fail@plt+0x89c4>
   1a1dc:	bl	11640 <strlen@plt>
   1a1e0:	mov	r8, r0
   1a1e4:	cmp	r5, r8
   1a1e8:	bhi	1b128 <__assert_fail@plt+0x9908>
   1a1ec:	ldr	r0, [sp, #36]	; 0x24
   1a1f0:	ldr	r2, [sp, #56]	; 0x38
   1a1f4:	ldr	r1, [sp, #72]	; 0x48
   1a1f8:	bl	114a8 <memcmp@plt>
   1a1fc:	cmp	r0, #0
   1a200:	bne	1b128 <__assert_fail@plt+0x9908>
   1a204:	ldr	r3, [sp, #44]	; 0x2c
   1a208:	cmp	r3, #0
   1a20c:	bne	1b8d4 <__assert_fail@plt+0xa0b4>
   1a210:	ldr	r3, [sp, #36]	; 0x24
   1a214:	ldrb	r5, [r3]
   1a218:	cmp	r5, #126	; 0x7e
   1a21c:	ldrls	pc, [pc, r5, lsl #2]
   1a220:	b	1b6bc <__assert_fail@plt+0x9e9c>
   1a224:	strdeq	sl, [r1], -r8
   1a228:			; <UNDEFINED> instruction: 0x0001b6bc
   1a22c:			; <UNDEFINED> instruction: 0x0001b6bc
   1a230:			; <UNDEFINED> instruction: 0x0001b6bc
   1a234:			; <UNDEFINED> instruction: 0x0001b6bc
   1a238:			; <UNDEFINED> instruction: 0x0001b6bc
   1a23c:			; <UNDEFINED> instruction: 0x0001b6bc
   1a240:	andeq	sl, r1, r0, asr r8
   1a244:	andeq	sl, r1, r8, asr #16
   1a248:	andeq	sl, r1, r8, asr r8
   1a24c:	ldrdeq	sl, [r1], -ip
   1a250:	andeq	sl, r1, ip, asr #19
   1a254:	strdeq	sl, [r1], -r4
   1a258:	andeq	sl, r1, r8, lsr #19
   1a25c:			; <UNDEFINED> instruction: 0x0001b6bc
   1a260:			; <UNDEFINED> instruction: 0x0001b6bc
   1a264:			; <UNDEFINED> instruction: 0x0001b6bc
   1a268:			; <UNDEFINED> instruction: 0x0001b6bc
   1a26c:			; <UNDEFINED> instruction: 0x0001b6bc
   1a270:			; <UNDEFINED> instruction: 0x0001b6bc
   1a274:			; <UNDEFINED> instruction: 0x0001b6bc
   1a278:			; <UNDEFINED> instruction: 0x0001b6bc
   1a27c:			; <UNDEFINED> instruction: 0x0001b6bc
   1a280:			; <UNDEFINED> instruction: 0x0001b6bc
   1a284:			; <UNDEFINED> instruction: 0x0001b6bc
   1a288:			; <UNDEFINED> instruction: 0x0001b6bc
   1a28c:			; <UNDEFINED> instruction: 0x0001b6bc
   1a290:			; <UNDEFINED> instruction: 0x0001b6bc
   1a294:			; <UNDEFINED> instruction: 0x0001b6bc
   1a298:			; <UNDEFINED> instruction: 0x0001b6bc
   1a29c:			; <UNDEFINED> instruction: 0x0001b6bc
   1a2a0:			; <UNDEFINED> instruction: 0x0001b6bc
   1a2a4:	andeq	sl, r1, r4, asr sl
   1a2a8:	andeq	sl, r1, r8, asr #20
   1a2ac:	andeq	sl, r1, r8, asr #20
   1a2b0:	andeq	sl, r1, ip, lsr sl
   1a2b4:	andeq	sl, r1, r8, asr #20
   1a2b8:	andeq	sl, r1, r0, lsr #22
   1a2bc:	andeq	sl, r1, r8, asr #20
   1a2c0:	muleq	r1, r0, fp
   1a2c4:	andeq	sl, r1, r8, asr #20
   1a2c8:	andeq	sl, r1, r8, asr #20
   1a2cc:	andeq	sl, r1, r8, asr #20
   1a2d0:	andeq	sl, r1, r0, lsr #22
   1a2d4:	andeq	sl, r1, r0, lsr #22
   1a2d8:	andeq	sl, r1, r0, lsr #22
   1a2dc:	andeq	sl, r1, r0, lsr #22
   1a2e0:	andeq	sl, r1, r0, lsr #22
   1a2e4:	andeq	sl, r1, r0, lsr #22
   1a2e8:	andeq	sl, r1, r0, lsr #22
   1a2ec:	andeq	sl, r1, r0, lsr #22
   1a2f0:	andeq	sl, r1, r0, lsr #22
   1a2f4:	andeq	sl, r1, r0, lsr #22
   1a2f8:	andeq	sl, r1, r0, lsr #22
   1a2fc:	andeq	sl, r1, r0, lsr #22
   1a300:	andeq	sl, r1, r0, lsr #22
   1a304:	andeq	sl, r1, r0, lsr #22
   1a308:	andeq	sl, r1, r0, lsr #22
   1a30c:	andeq	sl, r1, r0, lsr #22
   1a310:	andeq	sl, r1, r8, asr #20
   1a314:	andeq	sl, r1, r8, asr #20
   1a318:	andeq	sl, r1, r8, asr #20
   1a31c:	andeq	sl, r1, r8, asr #20
   1a320:	andeq	sl, r1, r0, asr #22
   1a324:			; <UNDEFINED> instruction: 0x0001b6bc
   1a328:	andeq	sl, r1, r0, lsr #22
   1a32c:	andeq	sl, r1, r0, lsr #22
   1a330:	andeq	sl, r1, r0, lsr #22
   1a334:	andeq	sl, r1, r0, lsr #22
   1a338:	andeq	sl, r1, r0, lsr #22
   1a33c:	andeq	sl, r1, r0, lsr #22
   1a340:	andeq	sl, r1, r0, lsr #22
   1a344:	andeq	sl, r1, r0, lsr #22
   1a348:	andeq	sl, r1, r0, lsr #22
   1a34c:	andeq	sl, r1, r0, lsr #22
   1a350:	andeq	sl, r1, r0, lsr #22
   1a354:	andeq	sl, r1, r0, lsr #22
   1a358:	andeq	sl, r1, r0, lsr #22
   1a35c:	andeq	sl, r1, r0, lsr #22
   1a360:	andeq	sl, r1, r0, lsr #22
   1a364:	andeq	sl, r1, r0, lsr #22
   1a368:	andeq	sl, r1, r0, lsr #22
   1a36c:	andeq	sl, r1, r0, lsr #22
   1a370:	andeq	sl, r1, r0, lsr #22
   1a374:	andeq	sl, r1, r0, lsr #22
   1a378:	andeq	sl, r1, r0, lsr #22
   1a37c:	andeq	sl, r1, r0, lsr #22
   1a380:	andeq	sl, r1, r0, lsr #22
   1a384:	andeq	sl, r1, r0, lsr #22
   1a388:	andeq	sl, r1, r0, lsr #22
   1a38c:	andeq	sl, r1, r0, lsr #22
   1a390:	andeq	sl, r1, r8, asr #20
   1a394:	andeq	sl, r1, r4, ror #21
   1a398:	andeq	sl, r1, r0, lsr #22
   1a39c:	andeq	sl, r1, r8, asr #20
   1a3a0:	andeq	sl, r1, r0, lsr #22
   1a3a4:	andeq	sl, r1, r8, asr #20
   1a3a8:	andeq	sl, r1, r0, lsr #22
   1a3ac:	andeq	sl, r1, r0, lsr #22
   1a3b0:	andeq	sl, r1, r0, lsr #22
   1a3b4:	andeq	sl, r1, r0, lsr #22
   1a3b8:	andeq	sl, r1, r0, lsr #22
   1a3bc:	andeq	sl, r1, r0, lsr #22
   1a3c0:	andeq	sl, r1, r0, lsr #22
   1a3c4:	andeq	sl, r1, r0, lsr #22
   1a3c8:	andeq	sl, r1, r0, lsr #22
   1a3cc:	andeq	sl, r1, r0, lsr #22
   1a3d0:	andeq	sl, r1, r0, lsr #22
   1a3d4:	andeq	sl, r1, r0, lsr #22
   1a3d8:	andeq	sl, r1, r0, lsr #22
   1a3dc:	andeq	sl, r1, r0, lsr #22
   1a3e0:	andeq	sl, r1, r0, lsr #22
   1a3e4:	andeq	sl, r1, r0, lsr #22
   1a3e8:	andeq	sl, r1, r0, lsr #22
   1a3ec:	andeq	sl, r1, r0, lsr #22
   1a3f0:	andeq	sl, r1, r0, lsr #22
   1a3f4:	andeq	sl, r1, r0, lsr #22
   1a3f8:	andeq	sl, r1, r0, lsr #22
   1a3fc:	andeq	sl, r1, r0, lsr #22
   1a400:	andeq	sl, r1, r0, lsr #22
   1a404:	andeq	sl, r1, r0, lsr #22
   1a408:	andeq	sl, r1, r0, lsr #22
   1a40c:	andeq	sl, r1, r0, lsr #22
   1a410:	strdeq	sl, [r1], -r0
   1a414:	andeq	sl, r1, r8, asr #20
   1a418:	strdeq	sl, [r1], -r0
   1a41c:	andeq	sl, r1, ip, lsr sl
   1a420:	ldr	r3, [sp, #180]	; 0xb4
   1a424:	cmp	r4, #0
   1a428:	and	r3, r3, #1
   1a42c:	str	r3, [sp, #92]	; 0x5c
   1a430:	ldr	r3, [sp, #180]	; 0xb4
   1a434:	and	r3, r3, #4
   1a438:	str	r3, [sp, #96]	; 0x60
   1a43c:	moveq	r3, #1
   1a440:	streq	r3, [sp, #60]	; 0x3c
   1a444:	beq	1abd4 <__assert_fail@plt+0x93b4>
   1a448:	mov	r3, #0
   1a44c:	mov	r2, #1
   1a450:	mov	r4, r3
   1a454:	mov	r9, r3
   1a458:	str	r2, [sp, #32]
   1a45c:	str	r2, [sp, #44]	; 0x2c
   1a460:	str	r3, [sp, #48]	; 0x30
   1a464:	str	r2, [sp, #52]	; 0x34
   1a468:	str	r2, [sp, #56]	; 0x38
   1a46c:	str	r3, [sp, #60]	; 0x3c
   1a470:	str	r2, [sp, #64]	; 0x40
   1a474:	str	r2, [sp, #68]	; 0x44
   1a478:	str	r3, [sp, #80]	; 0x50
   1a47c:	str	r3, [sp, #84]	; 0x54
   1a480:	str	r3, [sp, #88]	; 0x58
   1a484:	movw	r3, #10164	; 0x27b4
   1a488:	movt	r3, #2
   1a48c:	str	r3, [sp, #72]	; 0x48
   1a490:	mov	r3, #2
   1a494:	str	r3, [sp, #176]	; 0xb0
   1a498:	b	1a16c <__assert_fail@plt+0x894c>
   1a49c:	ldr	r3, [sp, #180]	; 0xb4
   1a4a0:	cmp	r4, #0
   1a4a4:	and	r3, r3, #1
   1a4a8:	str	r3, [sp, #92]	; 0x5c
   1a4ac:	ldr	r3, [sp, #180]	; 0xb4
   1a4b0:	and	r3, r3, #4
   1a4b4:	str	r3, [sp, #96]	; 0x60
   1a4b8:	bne	1b88c <__assert_fail@plt+0xa06c>
   1a4bc:	cmp	sl, #0
   1a4c0:	beq	1b638 <__assert_fail@plt+0x9e18>
   1a4c4:	mov	r3, #34	; 0x22
   1a4c8:	mov	r2, r4
   1a4cc:	mov	r1, #1
   1a4d0:	mov	r9, r2
   1a4d4:	strb	r3, [fp]
   1a4d8:	movw	r3, #10144	; 0x27a0
   1a4dc:	movt	r3, #2
   1a4e0:	mov	r4, r1
   1a4e4:	str	r1, [sp, #32]
   1a4e8:	str	r2, [sp, #44]	; 0x2c
   1a4ec:	str	r1, [sp, #48]	; 0x30
   1a4f0:	str	r2, [sp, #52]	; 0x34
   1a4f4:	str	r1, [sp, #56]	; 0x38
   1a4f8:	str	r1, [sp, #60]	; 0x3c
   1a4fc:	str	r2, [sp, #64]	; 0x40
   1a500:	str	r2, [sp, #68]	; 0x44
   1a504:	str	r3, [sp, #72]	; 0x48
   1a508:	str	r2, [sp, #80]	; 0x50
   1a50c:	str	r2, [sp, #84]	; 0x54
   1a510:	str	r2, [sp, #88]	; 0x58
   1a514:	b	1a16c <__assert_fail@plt+0x894c>
   1a518:	mov	r3, #0
   1a51c:	mov	r2, #1
   1a520:	mov	r9, r3
   1a524:	str	r2, [sp, #32]
   1a528:	str	r3, [sp, #44]	; 0x2c
   1a52c:	str	r3, [sp, #48]	; 0x30
   1a530:	str	r3, [sp, #52]	; 0x34
   1a534:	str	r3, [sp, #60]	; 0x3c
   1a538:	strd	r2, [sp, #64]	; 0x40
   1a53c:	str	r3, [sp, #72]	; 0x48
   1a540:	str	r3, [sp, #80]	; 0x50
   1a544:	str	r3, [sp, #88]	; 0x58
   1a548:	ldr	r3, [sp, #180]	; 0xb4
   1a54c:	and	r3, r3, r2
   1a550:	str	r3, [sp, #92]	; 0x5c
   1a554:	ldr	r3, [sp, #180]	; 0xb4
   1a558:	and	r3, r3, #4
   1a55c:	str	r3, [sp, #96]	; 0x60
   1a560:	ldr	r3, [sp, #176]	; 0xb0
   1a564:	mov	r4, r3
   1a568:	str	r3, [sp, #56]	; 0x38
   1a56c:	str	r3, [sp, #84]	; 0x54
   1a570:	b	1a16c <__assert_fail@plt+0x894c>
   1a574:	mov	r3, #1
   1a578:	mov	r4, #0
   1a57c:	mov	r9, r4
   1a580:	str	r3, [sp, #32]
   1a584:	str	r3, [sp, #44]	; 0x2c
   1a588:	str	r3, [sp, #48]	; 0x30
   1a58c:	str	r4, [sp, #52]	; 0x34
   1a590:	str	r3, [sp, #56]	; 0x38
   1a594:	str	r3, [sp, #60]	; 0x3c
   1a598:	str	r3, [sp, #88]	; 0x58
   1a59c:	movw	r3, #10144	; 0x27a0
   1a5a0:	movt	r3, #2
   1a5a4:	str	r4, [sp, #64]	; 0x40
   1a5a8:	str	r4, [sp, #68]	; 0x44
   1a5ac:	str	r3, [sp, #72]	; 0x48
   1a5b0:	ldr	r3, [sp, #180]	; 0xb4
   1a5b4:	str	r4, [sp, #80]	; 0x50
   1a5b8:	str	r4, [sp, #84]	; 0x54
   1a5bc:	and	r3, r3, #1
   1a5c0:	str	r3, [sp, #92]	; 0x5c
   1a5c4:	ldr	r3, [sp, #180]	; 0xb4
   1a5c8:	and	r3, r3, #4
   1a5cc:	str	r3, [sp, #96]	; 0x60
   1a5d0:	mov	r3, #5
   1a5d4:	str	r3, [sp, #176]	; 0xb0
   1a5d8:	b	1a16c <__assert_fail@plt+0x894c>
   1a5dc:	mov	r3, #1
   1a5e0:	mov	r4, #0
   1a5e4:	mov	r9, r4
   1a5e8:	str	r3, [sp, #32]
   1a5ec:	str	r4, [sp, #44]	; 0x2c
   1a5f0:	str	r3, [sp, #48]	; 0x30
   1a5f4:	str	r3, [sp, #60]	; 0x3c
   1a5f8:	ldr	r3, [sp, #180]	; 0xb4
   1a5fc:	str	r4, [sp, #52]	; 0x34
   1a600:	str	r4, [sp, #56]	; 0x38
   1a604:	str	r4, [sp, #64]	; 0x40
   1a608:	str	r4, [sp, #68]	; 0x44
   1a60c:	and	r3, r3, #1
   1a610:	str	r4, [sp, #72]	; 0x48
   1a614:	str	r4, [sp, #80]	; 0x50
   1a618:	str	r4, [sp, #84]	; 0x54
   1a61c:	str	r3, [sp, #92]	; 0x5c
   1a620:	ldr	r3, [sp, #180]	; 0xb4
   1a624:	str	r4, [sp, #88]	; 0x58
   1a628:	and	r3, r3, #4
   1a62c:	str	r3, [sp, #96]	; 0x60
   1a630:	b	1a16c <__assert_fail@plt+0x894c>
   1a634:	mov	r3, #0
   1a638:	mov	r2, #1
   1a63c:	ldr	r1, [sp, #176]	; 0xb0
   1a640:	mov	r4, r3
   1a644:	mov	r9, r3
   1a648:	movw	r3, #10164	; 0x27b4
   1a64c:	movt	r3, #2
   1a650:	str	r2, [sp, #32]
   1a654:	str	r2, [sp, #44]	; 0x2c
   1a658:	str	r4, [sp, #48]	; 0x30
   1a65c:	strd	r2, [sp, #68]	; 0x44
   1a660:	ldr	r3, [sp, #180]	; 0xb4
   1a664:	str	r2, [sp, #52]	; 0x34
   1a668:	str	r1, [sp, #56]	; 0x38
   1a66c:	str	r4, [sp, #60]	; 0x3c
   1a670:	str	r2, [sp, #64]	; 0x40
   1a674:	and	r3, r3, r2
   1a678:	str	r4, [sp, #80]	; 0x50
   1a67c:	str	r4, [sp, #84]	; 0x54
   1a680:	str	r4, [sp, #88]	; 0x58
   1a684:	str	r3, [sp, #92]	; 0x5c
   1a688:	ldr	r3, [sp, #180]	; 0xb4
   1a68c:	and	r3, r3, #4
   1a690:	str	r3, [sp, #96]	; 0x60
   1a694:	mov	r3, #2
   1a698:	str	r3, [sp, #176]	; 0xb0
   1a69c:	b	1a16c <__assert_fail@plt+0x894c>
   1a6a0:	mov	r3, #1
   1a6a4:	mov	r2, #0
   1a6a8:	mov	r4, r2
   1a6ac:	mov	r9, r2
   1a6b0:	str	r3, [sp, #32]
   1a6b4:	str	r3, [sp, #44]	; 0x2c
   1a6b8:	str	r2, [sp, #48]	; 0x30
   1a6bc:	str	r3, [sp, #52]	; 0x34
   1a6c0:	str	r3, [sp, #56]	; 0x38
   1a6c4:	str	r3, [sp, #60]	; 0x3c
   1a6c8:	str	r3, [sp, #64]	; 0x40
   1a6cc:	str	r3, [sp, #68]	; 0x44
   1a6d0:	str	r3, [sp, #88]	; 0x58
   1a6d4:	movw	r3, #10164	; 0x27b4
   1a6d8:	movt	r3, #2
   1a6dc:	str	r3, [sp, #72]	; 0x48
   1a6e0:	ldr	r3, [sp, #180]	; 0xb4
   1a6e4:	str	r2, [sp, #80]	; 0x50
   1a6e8:	str	r2, [sp, #84]	; 0x54
   1a6ec:	and	r3, r3, #1
   1a6f0:	b	1a684 <__assert_fail@plt+0x8e64>
   1a6f4:	mov	r5, #102	; 0x66
   1a6f8:	mov	r6, #0
   1a6fc:	ldr	r3, [sp, #44]	; 0x2c
   1a700:	cmp	r3, #0
   1a704:	bne	1b5b4 <__assert_fail@plt+0x9d94>
   1a708:	ldr	r2, [sp, #52]	; 0x34
   1a70c:	eor	r3, fp, #1
   1a710:	ands	r3, r2, r3
   1a714:	beq	1a74c <__assert_fail@plt+0x8f2c>
   1a718:	cmp	sl, r4
   1a71c:	mov	fp, r3
   1a720:	movhi	r2, #39	; 0x27
   1a724:	strbhi	r2, [r9, r4]
   1a728:	add	r2, r4, #1
   1a72c:	cmp	sl, r2
   1a730:	movhi	r1, #36	; 0x24
   1a734:	strbhi	r1, [r9, r2]
   1a738:	add	r2, r4, #2
   1a73c:	add	r4, r4, #3
   1a740:	cmp	sl, r2
   1a744:	movhi	r1, #39	; 0x27
   1a748:	strbhi	r1, [r9, r2]
   1a74c:	cmp	sl, r4
   1a750:	add	r7, r7, #1
   1a754:	movhi	r3, #92	; 0x5c
   1a758:	strbhi	r3, [r9, r4]
   1a75c:	add	r4, r4, #1
   1a760:	cmp	r4, sl
   1a764:	ldr	r3, [sp, #32]
   1a768:	strbcc	r5, [r9, r4]
   1a76c:	cmp	r6, #0
   1a770:	add	r4, r4, #1
   1a774:	moveq	r3, #0
   1a778:	cmn	r8, #1
   1a77c:	str	r3, [sp, #32]
   1a780:	bne	1a184 <__assert_fail@plt+0x8964>
   1a784:	ldr	r3, [sp, #28]
   1a788:	ldrb	r6, [r3, r7]
   1a78c:	adds	r6, r6, #0
   1a790:	movne	r6, #1
   1a794:	cmp	r6, #0
   1a798:	bne	1a194 <__assert_fail@plt+0x8974>
   1a79c:	mov	r3, r9
   1a7a0:	mov	r9, fp
   1a7a4:	mov	fp, r3
   1a7a8:	ldr	r3, [sp, #68]	; 0x44
   1a7ac:	cmp	r4, #0
   1a7b0:	movne	r3, #0
   1a7b4:	cmp	r3, #0
   1a7b8:	bne	1b9ac <__assert_fail@plt+0xa18c>
   1a7bc:	ldr	r3, [sp, #44]	; 0x2c
   1a7c0:	ldr	r2, [sp, #52]	; 0x34
   1a7c4:	eor	r3, r3, #1
   1a7c8:	ands	r2, r3, r2
   1a7cc:	beq	1b8e4 <__assert_fail@plt+0xa0c4>
   1a7d0:	ldr	r3, [sp, #80]	; 0x50
   1a7d4:	cmp	r3, #0
   1a7d8:	beq	1b8e8 <__assert_fail@plt+0xa0c8>
   1a7dc:	ldr	r3, [sp, #32]
   1a7e0:	cmp	r3, #0
   1a7e4:	bne	1b95c <__assert_fail@plt+0xa13c>
   1a7e8:	ldr	r3, [sp, #84]	; 0x54
   1a7ec:	adds	r3, r3, #0
   1a7f0:	movne	r3, #1
   1a7f4:	cmp	sl, #0
   1a7f8:	movne	r3, #0
   1a7fc:	cmp	r3, #0
   1a800:	ldreq	r2, [sp, #80]	; 0x50
   1a804:	beq	1b8e8 <__assert_fail@plt+0xa0c8>
   1a808:	ldr	r2, [sp, #84]	; 0x54
   1a80c:	mov	sl, r2
   1a810:	mov	r0, #0
   1a814:	mov	r4, #1
   1a818:	mov	r1, #39	; 0x27
   1a81c:	str	r0, [sp, #44]	; 0x2c
   1a820:	strb	r1, [fp]
   1a824:	str	r0, [sp, #48]	; 0x30
   1a828:	str	r4, [sp, #52]	; 0x34
   1a82c:	str	r4, [sp, #56]	; 0x38
   1a830:	str	r4, [sp, #64]	; 0x40
   1a834:	str	r0, [sp, #68]	; 0x44
   1a838:	str	r3, [sp, #80]	; 0x50
   1a83c:	str	r2, [sp, #84]	; 0x54
   1a840:	str	r0, [sp, #88]	; 0x58
   1a844:	b	1a484 <__assert_fail@plt+0x8c64>
   1a848:	mov	r5, #98	; 0x62
   1a84c:	b	1a6f8 <__assert_fail@plt+0x8ed8>
   1a850:	mov	r5, #97	; 0x61
   1a854:	b	1a6f8 <__assert_fail@plt+0x8ed8>
   1a858:	ldr	r3, [sp, #48]	; 0x30
   1a85c:	str	r3, [sp, #40]	; 0x28
   1a860:	mov	r3, #116	; 0x74
   1a864:	ldr	r2, [sp, #68]	; 0x44
   1a868:	cmp	r2, #0
   1a86c:	bne	1aa68 <__assert_fail@plt+0x9248>
   1a870:	ldr	r2, [sp, #60]	; 0x3c
   1a874:	cmp	r2, #0
   1a878:	bne	1a9c4 <__assert_fail@plt+0x91a4>
   1a87c:	ldr	r3, [sp, #44]	; 0x2c
   1a880:	mov	r6, #0
   1a884:	cmp	r3, #0
   1a888:	beq	1aa34 <__assert_fail@plt+0x9214>
   1a88c:	mov	r3, fp
   1a890:	ldr	r2, [sp, #184]	; 0xb8
   1a894:	cmp	r2, #0
   1a898:	beq	1a8b8 <__assert_fail@plt+0x9098>
   1a89c:	ubfx	r1, r5, #5, #8
   1a8a0:	mov	r0, r2
   1a8a4:	and	r2, r5, #31
   1a8a8:	ldr	r1, [r0, r1, lsl #2]
   1a8ac:	lsr	r2, r1, r2
   1a8b0:	tst	r2, #1
   1a8b4:	bne	1a6fc <__assert_fail@plt+0x8edc>
   1a8b8:	ldr	r2, [sp, #40]	; 0x28
   1a8bc:	cmp	r2, #0
   1a8c0:	addeq	r7, r7, #1
   1a8c4:	bne	1a6fc <__assert_fail@plt+0x8edc>
   1a8c8:	cmp	r3, #0
   1a8cc:	beq	1a760 <__assert_fail@plt+0x8f40>
   1a8d0:	cmp	sl, r4
   1a8d4:	mov	fp, #0
   1a8d8:	movhi	r3, #39	; 0x27
   1a8dc:	strbhi	r3, [r9, r4]
   1a8e0:	add	r3, r4, #1
   1a8e4:	add	r4, r4, #2
   1a8e8:	cmp	sl, r3
   1a8ec:	movhi	r2, #39	; 0x27
   1a8f0:	strbhi	r2, [r9, r3]
   1a8f4:	b	1a760 <__assert_fail@plt+0x8f40>
   1a8f8:	ldr	r3, [sp, #48]	; 0x30
   1a8fc:	str	r3, [sp, #40]	; 0x28
   1a900:	eor	r3, fp, #1
   1a904:	ldr	r2, [sp, #52]	; 0x34
   1a908:	ands	r2, r2, r3
   1a90c:	beq	1b5cc <__assert_fail@plt+0x9dac>
   1a910:	cmp	sl, r4
   1a914:	movhi	r3, #39	; 0x27
   1a918:	strbhi	r3, [r9, r4]
   1a91c:	add	r3, r4, #1
   1a920:	cmp	sl, r3
   1a924:	movhi	r1, #36	; 0x24
   1a928:	strbhi	r1, [r9, r3]
   1a92c:	add	r3, r4, #2
   1a930:	cmp	sl, r3
   1a934:	movhi	r1, #39	; 0x27
   1a938:	strbhi	r1, [r9, r3]
   1a93c:	add	r3, r4, #3
   1a940:	cmp	sl, r3
   1a944:	bls	1b618 <__assert_fail@plt+0x9df8>
   1a948:	mov	r4, r3
   1a94c:	mov	r3, #92	; 0x5c
   1a950:	mov	fp, r2
   1a954:	mov	r2, r4
   1a958:	strb	r3, [r9, r4]
   1a95c:	ldr	r3, [sp, #176]	; 0xb0
   1a960:	add	r4, r4, #1
   1a964:	cmp	r3, #2
   1a968:	beq	1b680 <__assert_fail@plt+0x9e60>
   1a96c:	add	r3, r7, #1
   1a970:	cmp	r3, r8
   1a974:	bcs	1a98c <__assert_fail@plt+0x916c>
   1a978:	ldr	r1, [sp, #28]
   1a97c:	ldrb	r3, [r1, r3]
   1a980:	sub	r3, r3, #48	; 0x30
   1a984:	cmp	r3, #9
   1a988:	bls	1b690 <__assert_fail@plt+0x9e70>
   1a98c:	mov	r3, #0
   1a990:	mov	r5, #48	; 0x30
   1a994:	ldr	r6, [sp, #64]	; 0x40
   1a998:	cmp	r6, #0
   1a99c:	beq	1a890 <__assert_fail@plt+0x9070>
   1a9a0:	mov	r6, #0
   1a9a4:	b	1a8b8 <__assert_fail@plt+0x9098>
   1a9a8:	ldr	r3, [sp, #48]	; 0x30
   1a9ac:	str	r3, [sp, #40]	; 0x28
   1a9b0:	ldr	r2, [sp, #60]	; 0x3c
   1a9b4:	mov	r5, #13
   1a9b8:	mov	r3, #114	; 0x72
   1a9bc:	cmp	r2, #0
   1a9c0:	beq	1a87c <__assert_fail@plt+0x905c>
   1a9c4:	mov	r5, r3
   1a9c8:	b	1a6f8 <__assert_fail@plt+0x8ed8>
   1a9cc:	ldr	r3, [sp, #48]	; 0x30
   1a9d0:	str	r3, [sp, #40]	; 0x28
   1a9d4:	mov	r3, #118	; 0x76
   1a9d8:	b	1a870 <__assert_fail@plt+0x9050>
   1a9dc:	ldr	r3, [sp, #48]	; 0x30
   1a9e0:	str	r3, [sp, #40]	; 0x28
   1a9e4:	mov	r5, #10
   1a9e8:	mov	r3, #110	; 0x6e
   1a9ec:	b	1a870 <__assert_fail@plt+0x9050>
   1a9f0:	ldr	r3, [sp, #48]	; 0x30
   1a9f4:	cmn	r8, #1
   1a9f8:	str	r3, [sp, #40]	; 0x28
   1a9fc:	beq	1ae44 <__assert_fail@plt+0x9624>
   1aa00:	subs	r3, r8, #1
   1aa04:	movne	r3, #1
   1aa08:	cmp	r3, #0
   1aa0c:	bne	1aa18 <__assert_fail@plt+0x91f8>
   1aa10:	cmp	r7, #0
   1aa14:	beq	1aa5c <__assert_fail@plt+0x923c>
   1aa18:	mov	r6, #0
   1aa1c:	ldr	r3, [sp, #64]	; 0x40
   1aa20:	cmp	r3, #0
   1aa24:	beq	1a88c <__assert_fail@plt+0x906c>
   1aa28:	ldr	r3, [sp, #44]	; 0x2c
   1aa2c:	cmp	r3, #0
   1aa30:	bne	1a88c <__assert_fail@plt+0x906c>
   1aa34:	mov	r3, fp
   1aa38:	b	1a8b8 <__assert_fail@plt+0x9098>
   1aa3c:	ldr	r3, [sp, #48]	; 0x30
   1aa40:	str	r3, [sp, #40]	; 0x28
   1aa44:	b	1aa10 <__assert_fail@plt+0x91f0>
   1aa48:	ldr	r3, [sp, #48]	; 0x30
   1aa4c:	str	r3, [sp, #40]	; 0x28
   1aa50:	b	1aa18 <__assert_fail@plt+0x91f8>
   1aa54:	ldr	r6, [sp, #48]	; 0x30
   1aa58:	str	r6, [sp, #40]	; 0x28
   1aa5c:	ldr	r3, [sp, #68]	; 0x44
   1aa60:	cmp	r3, #0
   1aa64:	beq	1aa1c <__assert_fail@plt+0x91fc>
   1aa68:	mov	r3, #2
   1aa6c:	mov	fp, r9
   1aa70:	str	r3, [sp, #176]	; 0xb0
   1aa74:	ldr	r3, [sp, #60]	; 0x3c
   1aa78:	cmp	r3, #0
   1aa7c:	ldr	r3, [sp, #176]	; 0xb0
   1aa80:	movne	r3, #4
   1aa84:	str	r3, [sp, #176]	; 0xb0
   1aa88:	mov	lr, #0
   1aa8c:	mov	r0, fp
   1aa90:	ldr	r2, [sp, #28]
   1aa94:	ldr	r3, [sp, #180]	; 0xb4
   1aa98:	ldr	r1, [sp, #188]	; 0xbc
   1aa9c:	bic	ip, r3, #2
   1aaa0:	ldr	r3, [sp, #176]	; 0xb0
   1aaa4:	stm	sp, {r3, ip, lr}
   1aaa8:	mov	r3, r8
   1aaac:	ldr	ip, [sp, #192]	; 0xc0
   1aab0:	str	r1, [sp, #12]
   1aab4:	mov	r1, sl
   1aab8:	str	ip, [sp, #16]
   1aabc:	bl	1a048 <__assert_fail@plt+0x8828>
   1aac0:	mov	r4, r0
   1aac4:	mov	r0, r4
   1aac8:	add	sp, sp, #140	; 0x8c
   1aacc:	ldrd	r4, [sp]
   1aad0:	ldrd	r6, [sp, #8]
   1aad4:	ldrd	r8, [sp, #16]
   1aad8:	ldrd	sl, [sp, #24]
   1aadc:	add	sp, sp, #32
   1aae0:	pop	{pc}		; (ldr pc, [sp], #4)
   1aae4:	ldr	r3, [sp, #48]	; 0x30
   1aae8:	str	r3, [sp, #40]	; 0x28
   1aaec:	ldr	r3, [sp, #176]	; 0xb0
   1aaf0:	cmp	r3, #2
   1aaf4:	beq	1ae6c <__assert_fail@plt+0x964c>
   1aaf8:	ldr	r3, [sp, #88]	; 0x58
   1aafc:	cmp	r3, #0
   1ab00:	moveq	r5, #92	; 0x5c
   1ab04:	moveq	r3, r5
   1ab08:	beq	1a870 <__assert_fail@plt+0x9050>
   1ab0c:	add	r7, r7, #1
   1ab10:	mov	r3, fp
   1ab14:	mov	r6, #0
   1ab18:	mov	r5, #92	; 0x5c
   1ab1c:	b	1a8c8 <__assert_fail@plt+0x90a8>
   1ab20:	ldr	r3, [sp, #64]	; 0x40
   1ab24:	cmp	r3, #0
   1ab28:	bne	1b9a0 <__assert_fail@plt+0xa180>
   1ab2c:	ldr	r2, [sp, #48]	; 0x30
   1ab30:	mov	r3, fp
   1ab34:	mov	r6, r2
   1ab38:	str	r2, [sp, #40]	; 0x28
   1ab3c:	b	1a890 <__assert_fail@plt+0x9070>
   1ab40:	ldr	r3, [sp, #176]	; 0xb0
   1ab44:	cmp	r3, #2
   1ab48:	beq	1b8dc <__assert_fail@plt+0xa0bc>
   1ab4c:	cmp	r3, #5
   1ab50:	ldr	r3, [sp, #48]	; 0x30
   1ab54:	str	r3, [sp, #40]	; 0x28
   1ab58:	bne	1ab84 <__assert_fail@plt+0x9364>
   1ab5c:	ldr	r3, [sp, #96]	; 0x60
   1ab60:	cmp	r3, #0
   1ab64:	beq	1b5e0 <__assert_fail@plt+0x9dc0>
   1ab68:	add	r3, r7, #2
   1ab6c:	cmp	r3, r8
   1ab70:	bcs	1ab84 <__assert_fail@plt+0x9364>
   1ab74:	ldr	r2, [sp, #36]	; 0x24
   1ab78:	ldrb	r5, [r2, #1]
   1ab7c:	cmp	r5, #63	; 0x3f
   1ab80:	beq	1b6c8 <__assert_fail@plt+0x9ea8>
   1ab84:	mov	r6, #0
   1ab88:	mov	r5, #63	; 0x3f
   1ab8c:	b	1aa1c <__assert_fail@plt+0x91fc>
   1ab90:	ldr	r3, [sp, #176]	; 0xb0
   1ab94:	cmp	r3, #2
   1ab98:	ldr	r3, [sp, #48]	; 0x30
   1ab9c:	beq	1b384 <__assert_fail@plt+0x9b64>
   1aba0:	mov	r5, #39	; 0x27
   1aba4:	str	r3, [sp, #40]	; 0x28
   1aba8:	str	r6, [sp, #80]	; 0x50
   1abac:	b	1aa1c <__assert_fail@plt+0x91fc>
   1abb0:	ldr	r3, [sp, #180]	; 0xb4
   1abb4:	cmp	r4, #0
   1abb8:	and	r3, r3, #1
   1abbc:	str	r3, [sp, #92]	; 0x5c
   1abc0:	ldr	r3, [sp, #180]	; 0xb4
   1abc4:	and	r3, r3, #4
   1abc8:	str	r3, [sp, #96]	; 0x60
   1abcc:	bne	1b9ec <__assert_fail@plt+0xa1cc>
   1abd0:	str	r4, [sp, #60]	; 0x3c
   1abd4:	cmp	sl, #0
   1abd8:	bne	1b9d0 <__assert_fail@plt+0xa1b0>
   1abdc:	mov	r3, #1
   1abe0:	movw	r2, #10164	; 0x27b4
   1abe4:	movt	r2, #2
   1abe8:	mov	r4, r3
   1abec:	mov	r3, #2
   1abf0:	mov	r9, sl
   1abf4:	str	r4, [sp, #32]
   1abf8:	str	sl, [sp, #44]	; 0x2c
   1abfc:	str	sl, [sp, #48]	; 0x30
   1ac00:	str	r4, [sp, #52]	; 0x34
   1ac04:	str	r4, [sp, #56]	; 0x38
   1ac08:	str	r4, [sp, #64]	; 0x40
   1ac0c:	str	sl, [sp, #68]	; 0x44
   1ac10:	str	r2, [sp, #72]	; 0x48
   1ac14:	str	sl, [sp, #80]	; 0x50
   1ac18:	str	sl, [sp, #84]	; 0x54
   1ac1c:	str	sl, [sp, #88]	; 0x58
   1ac20:	str	r3, [sp, #176]	; 0xb0
   1ac24:	b	1a16c <__assert_fail@plt+0x894c>
   1ac28:	ldrb	r5, [r0, r7]
   1ac2c:	cmp	r5, #126	; 0x7e
   1ac30:	ldrls	pc, [pc, r5, lsl #2]
   1ac34:	b	1af98 <__assert_fail@plt+0x9778>
   1ac38:	andeq	sl, r1, r4, ror #30
   1ac3c:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   1ac40:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   1ac44:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   1ac48:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   1ac4c:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   1ac50:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   1ac54:	andeq	sl, r1, r4, asr pc
   1ac58:	andeq	sl, r1, r4, asr #30
   1ac5c:	andeq	sl, r1, r8, asr #29
   1ac60:	andeq	sl, r1, r4, lsr pc
   1ac64:	andeq	sl, r1, r8, lsr #29
   1ac68:	andeq	sl, r1, r8, lsl #31
   1ac6c:	andeq	sl, r1, r4, lsl pc
   1ac70:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   1ac74:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   1ac78:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   1ac7c:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   1ac80:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   1ac84:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   1ac88:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   1ac8c:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   1ac90:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   1ac94:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   1ac98:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   1ac9c:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   1aca0:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   1aca4:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   1aca8:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   1acac:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   1acb0:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   1acb4:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   1acb8:			; <UNDEFINED> instruction: 0x0001aebc
   1acbc:	andeq	sl, r1, r4, lsr #30
   1acc0:	andeq	sl, r1, r4, lsr #30
   1acc4:	muleq	r1, ip, lr
   1acc8:	andeq	sl, r1, r4, lsr #30
   1accc:	muleq	r1, r0, lr
   1acd0:	andeq	sl, r1, r4, lsr #30
   1acd4:	andeq	sl, r1, r0, lsl #30
   1acd8:	andeq	sl, r1, r4, lsr #30
   1acdc:	andeq	sl, r1, r4, lsr #30
   1ace0:	andeq	sl, r1, r4, lsr #30
   1ace4:	muleq	r1, r0, lr
   1ace8:	muleq	r1, r0, lr
   1acec:	muleq	r1, r0, lr
   1acf0:	muleq	r1, r0, lr
   1acf4:	muleq	r1, r0, lr
   1acf8:	muleq	r1, r0, lr
   1acfc:	muleq	r1, r0, lr
   1ad00:	muleq	r1, r0, lr
   1ad04:	muleq	r1, r0, lr
   1ad08:	muleq	r1, r0, lr
   1ad0c:	muleq	r1, r0, lr
   1ad10:	muleq	r1, r0, lr
   1ad14:	muleq	r1, r0, lr
   1ad18:	muleq	r1, r0, lr
   1ad1c:	muleq	r1, r0, lr
   1ad20:	muleq	r1, r0, lr
   1ad24:	andeq	sl, r1, r4, lsr #30
   1ad28:	andeq	sl, r1, r4, lsr #30
   1ad2c:	andeq	sl, r1, r4, lsr #30
   1ad30:	andeq	sl, r1, r4, lsr #30
   1ad34:	ldrdeq	sl, [r1], -r8
   1ad38:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   1ad3c:	muleq	r1, r0, lr
   1ad40:	muleq	r1, r0, lr
   1ad44:	muleq	r1, r0, lr
   1ad48:	muleq	r1, r0, lr
   1ad4c:	muleq	r1, r0, lr
   1ad50:	muleq	r1, r0, lr
   1ad54:	muleq	r1, r0, lr
   1ad58:	muleq	r1, r0, lr
   1ad5c:	muleq	r1, r0, lr
   1ad60:	muleq	r1, r0, lr
   1ad64:	muleq	r1, r0, lr
   1ad68:	muleq	r1, r0, lr
   1ad6c:	muleq	r1, r0, lr
   1ad70:	muleq	r1, r0, lr
   1ad74:	muleq	r1, r0, lr
   1ad78:	muleq	r1, r0, lr
   1ad7c:	muleq	r1, r0, lr
   1ad80:	muleq	r1, r0, lr
   1ad84:	muleq	r1, r0, lr
   1ad88:	muleq	r1, r0, lr
   1ad8c:	muleq	r1, r0, lr
   1ad90:	muleq	r1, r0, lr
   1ad94:	muleq	r1, r0, lr
   1ad98:	muleq	r1, r0, lr
   1ad9c:	muleq	r1, r0, lr
   1ada0:	muleq	r1, r0, lr
   1ada4:	andeq	sl, r1, r4, lsr #30
   1ada8:	andeq	sl, r1, r8, asr lr
   1adac:	muleq	r1, r0, lr
   1adb0:	andeq	sl, r1, r4, lsr #30
   1adb4:	muleq	r1, r0, lr
   1adb8:	andeq	sl, r1, r4, lsr #30
   1adbc:	muleq	r1, r0, lr
   1adc0:	muleq	r1, r0, lr
   1adc4:	muleq	r1, r0, lr
   1adc8:	muleq	r1, r0, lr
   1adcc:	muleq	r1, r0, lr
   1add0:	muleq	r1, r0, lr
   1add4:	muleq	r1, r0, lr
   1add8:	muleq	r1, r0, lr
   1addc:	muleq	r1, r0, lr
   1ade0:	muleq	r1, r0, lr
   1ade4:	muleq	r1, r0, lr
   1ade8:	muleq	r1, r0, lr
   1adec:	muleq	r1, r0, lr
   1adf0:	muleq	r1, r0, lr
   1adf4:	muleq	r1, r0, lr
   1adf8:	muleq	r1, r0, lr
   1adfc:	muleq	r1, r0, lr
   1ae00:	muleq	r1, r0, lr
   1ae04:	muleq	r1, r0, lr
   1ae08:	muleq	r1, r0, lr
   1ae0c:	muleq	r1, r0, lr
   1ae10:	muleq	r1, r0, lr
   1ae14:	muleq	r1, r0, lr
   1ae18:	muleq	r1, r0, lr
   1ae1c:	muleq	r1, r0, lr
   1ae20:	muleq	r1, r0, lr
   1ae24:	andeq	sl, r1, r4, lsr lr
   1ae28:	andeq	sl, r1, r4, lsr #30
   1ae2c:	andeq	sl, r1, r4, lsr lr
   1ae30:	muleq	r1, ip, lr
   1ae34:	mov	r3, #0
   1ae38:	cmn	r8, #1
   1ae3c:	str	r3, [sp, #40]	; 0x28
   1ae40:	bne	1aa00 <__assert_fail@plt+0x91e0>
   1ae44:	ldr	r3, [sp, #28]
   1ae48:	ldrb	r3, [r3, #1]
   1ae4c:	adds	r3, r3, #0
   1ae50:	movne	r3, #1
   1ae54:	b	1aa08 <__assert_fail@plt+0x91e8>
   1ae58:	mov	r3, #0
   1ae5c:	str	r3, [sp, #40]	; 0x28
   1ae60:	ldr	r3, [sp, #176]	; 0xb0
   1ae64:	cmp	r3, #2
   1ae68:	bne	1aaf8 <__assert_fail@plt+0x92d8>
   1ae6c:	ldr	r3, [sp, #44]	; 0x2c
   1ae70:	cmp	r3, #0
   1ae74:	bne	1b7b4 <__assert_fail@plt+0x9f94>
   1ae78:	mov	r6, r3
   1ae7c:	add	r7, r7, #1
   1ae80:	mov	r3, fp
   1ae84:	mov	r5, #92	; 0x5c
   1ae88:	b	1a8c8 <__assert_fail@plt+0x90a8>
   1ae8c:	ldr	r6, [sp, #48]	; 0x30
   1ae90:	mov	r3, #0
   1ae94:	str	r3, [sp, #40]	; 0x28
   1ae98:	b	1aa1c <__assert_fail@plt+0x91fc>
   1ae9c:	mov	r3, #0
   1aea0:	str	r3, [sp, #40]	; 0x28
   1aea4:	b	1aa10 <__assert_fail@plt+0x91f0>
   1aea8:	mov	r3, #0
   1aeac:	str	r3, [sp, #40]	; 0x28
   1aeb0:	mov	r3, #118	; 0x76
   1aeb4:	b	1a870 <__assert_fail@plt+0x9050>
   1aeb8:	ldr	r6, [sp, #48]	; 0x30
   1aebc:	mov	r3, #0
   1aec0:	str	r3, [sp, #40]	; 0x28
   1aec4:	b	1aa5c <__assert_fail@plt+0x923c>
   1aec8:	mov	r3, #0
   1aecc:	str	r3, [sp, #40]	; 0x28
   1aed0:	mov	r3, #116	; 0x74
   1aed4:	b	1a864 <__assert_fail@plt+0x9044>
   1aed8:	ldr	r3, [sp, #176]	; 0xb0
   1aedc:	cmp	r3, #2
   1aee0:	beq	1b3f0 <__assert_fail@plt+0x9bd0>
   1aee4:	cmp	r3, #5
   1aee8:	mov	r3, #0
   1aeec:	str	r3, [sp, #40]	; 0x28
   1aef0:	beq	1ab5c <__assert_fail@plt+0x933c>
   1aef4:	mov	r6, #0
   1aef8:	mov	r5, #63	; 0x3f
   1aefc:	b	1aa1c <__assert_fail@plt+0x91fc>
   1af00:	ldr	r3, [sp, #176]	; 0xb0
   1af04:	cmp	r3, #2
   1af08:	beq	1b378 <__assert_fail@plt+0x9b58>
   1af0c:	mov	r3, #0
   1af10:	b	1aba0 <__assert_fail@plt+0x9380>
   1af14:	mov	r3, #0
   1af18:	str	r3, [sp, #40]	; 0x28
   1af1c:	mov	r3, #114	; 0x72
   1af20:	b	1a864 <__assert_fail@plt+0x9044>
   1af24:	mov	r3, #0
   1af28:	mov	r6, r3
   1af2c:	str	r3, [sp, #40]	; 0x28
   1af30:	b	1aa5c <__assert_fail@plt+0x923c>
   1af34:	mov	r3, #0
   1af38:	str	r3, [sp, #40]	; 0x28
   1af3c:	mov	r3, #110	; 0x6e
   1af40:	b	1a864 <__assert_fail@plt+0x9044>
   1af44:	mov	r3, #0
   1af48:	str	r3, [sp, #40]	; 0x28
   1af4c:	mov	r3, #98	; 0x62
   1af50:	b	1a870 <__assert_fail@plt+0x9050>
   1af54:	mov	r3, #0
   1af58:	str	r3, [sp, #40]	; 0x28
   1af5c:	mov	r3, #97	; 0x61
   1af60:	b	1a870 <__assert_fail@plt+0x9050>
   1af64:	ldr	r3, [sp, #60]	; 0x3c
   1af68:	cmp	r3, #0
   1af6c:	bne	1b35c <__assert_fail@plt+0x9b3c>
   1af70:	ldr	r3, [sp, #92]	; 0x5c
   1af74:	cmp	r3, #0
   1af78:	addne	r7, r7, #1
   1af7c:	bne	1a17c <__assert_fail@plt+0x895c>
   1af80:	str	r3, [sp, #40]	; 0x28
   1af84:	b	1a87c <__assert_fail@plt+0x905c>
   1af88:	mov	r3, #0
   1af8c:	str	r3, [sp, #40]	; 0x28
   1af90:	mov	r3, #102	; 0x66
   1af94:	b	1a870 <__assert_fail@plt+0x9050>
   1af98:	mov	r3, #0
   1af9c:	str	r3, [sp, #40]	; 0x28
   1afa0:	ldr	r3, [sp, #76]	; 0x4c
   1afa4:	cmp	r3, #1
   1afa8:	bne	1b410 <__assert_fail@plt+0x9bf0>
   1afac:	bl	11610 <__ctype_b_loc@plt>
   1afb0:	ldr	r2, [r0]
   1afb4:	sxth	r3, r5
   1afb8:	lsl	r3, r3, #1
   1afbc:	ldr	r1, [sp, #76]	; 0x4c
   1afc0:	ldrh	r3, [r2, r3]
   1afc4:	mov	r0, r1
   1afc8:	and	r3, r3, #16384	; 0x4000
   1afcc:	cmp	r3, #0
   1afd0:	ldr	r3, [sp, #60]	; 0x3c
   1afd4:	movne	r6, #1
   1afd8:	moveq	r6, #0
   1afdc:	movne	r2, #0
   1afe0:	andeq	r2, r3, #1
   1afe4:	cmp	r2, #0
   1afe8:	beq	1aa1c <__assert_fail@plt+0x91fc>
   1afec:	ldr	r2, [sp, #60]	; 0x3c
   1aff0:	mov	r6, #0
   1aff4:	add	r1, r0, r7
   1aff8:	mov	ip, #39	; 0x27
   1affc:	str	r6, [sp, #100]	; 0x64
   1b000:	mov	r0, #0
   1b004:	ldr	lr, [sp, #36]	; 0x24
   1b008:	str	r8, [sp, #36]	; 0x24
   1b00c:	ldr	r6, [sp, #40]	; 0x28
   1b010:	ldr	r8, [sp, #44]	; 0x2c
   1b014:	b	1b0c4 <__assert_fail@plt+0x98a4>
   1b018:	cmp	r8, #0
   1b01c:	bne	1b5f8 <__assert_fail@plt+0x9dd8>
   1b020:	ldr	r0, [sp, #52]	; 0x34
   1b024:	eor	r3, fp, #1
   1b028:	ands	r3, r0, r3
   1b02c:	beq	1b05c <__assert_fail@plt+0x983c>
   1b030:	cmp	sl, r4
   1b034:	add	r0, r4, #1
   1b038:	strbhi	ip, [r9, r4]
   1b03c:	cmp	sl, r0
   1b040:	movhi	fp, #36	; 0x24
   1b044:	strbhi	fp, [r9, r0]
   1b048:	add	r0, r4, #2
   1b04c:	mov	fp, r3
   1b050:	cmp	sl, r0
   1b054:	add	r4, r4, #3
   1b058:	strbhi	ip, [r9, r0]
   1b05c:	cmp	sl, r4
   1b060:	movhi	r3, #92	; 0x5c
   1b064:	strbhi	r3, [r9, r4]
   1b068:	add	r3, r4, #1
   1b06c:	cmp	sl, r3
   1b070:	bls	1b080 <__assert_fail@plt+0x9860>
   1b074:	lsr	r0, r5, #6
   1b078:	add	r0, r0, #48	; 0x30
   1b07c:	strb	r0, [r9, r3]
   1b080:	add	r3, r4, #2
   1b084:	cmp	sl, r3
   1b088:	bls	1b098 <__assert_fail@plt+0x9878>
   1b08c:	ubfx	r0, r5, #3, #3
   1b090:	add	r0, r0, #48	; 0x30
   1b094:	strb	r0, [r9, r3]
   1b098:	add	r7, r7, #1
   1b09c:	and	r5, r5, #7
   1b0a0:	cmp	r1, r7
   1b0a4:	add	r5, r5, #48	; 0x30
   1b0a8:	add	r4, r4, #3
   1b0ac:	bls	1b60c <__assert_fail@plt+0x9dec>
   1b0b0:	mov	r0, r2
   1b0b4:	cmp	sl, r4
   1b0b8:	strbhi	r5, [r9, r4]
   1b0bc:	add	r4, r4, #1
   1b0c0:	ldrb	r5, [lr, #1]!
   1b0c4:	cmp	r2, #0
   1b0c8:	bne	1b018 <__assert_fail@plt+0x97f8>
   1b0cc:	eor	r3, r0, #1
   1b0d0:	cmp	r6, #0
   1b0d4:	and	r3, r3, fp
   1b0d8:	uxtb	r3, r3
   1b0dc:	beq	1b0f0 <__assert_fail@plt+0x98d0>
   1b0e0:	cmp	sl, r4
   1b0e4:	movhi	r6, #92	; 0x5c
   1b0e8:	strbhi	r6, [r9, r4]
   1b0ec:	add	r4, r4, #1
   1b0f0:	add	r7, r7, #1
   1b0f4:	cmp	r7, r1
   1b0f8:	bcs	1b5ec <__assert_fail@plt+0x9dcc>
   1b0fc:	cmp	r3, #0
   1b100:	beq	1b630 <__assert_fail@plt+0x9e10>
   1b104:	cmp	sl, r4
   1b108:	add	r3, r4, #1
   1b10c:	mov	r6, #0
   1b110:	strbhi	ip, [r9, r4]
   1b114:	cmp	sl, r3
   1b118:	add	r4, r4, #2
   1b11c:	mov	fp, r6
   1b120:	strbhi	ip, [r9, r3]
   1b124:	b	1b0b4 <__assert_fail@plt+0x9894>
   1b128:	ldr	r3, [sp, #36]	; 0x24
   1b12c:	ldrb	r5, [r3]
   1b130:	cmp	r5, #126	; 0x7e
   1b134:	ldrls	pc, [pc, r5, lsl #2]
   1b138:	b	1af98 <__assert_fail@plt+0x9778>
   1b13c:	andeq	fp, r1, ip, asr r3
   1b140:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   1b144:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   1b148:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   1b14c:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   1b150:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   1b154:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   1b158:	andeq	sl, r1, r0, asr r8
   1b15c:	andeq	sl, r1, r8, asr #16
   1b160:	andeq	sl, r1, r8, asr #29
   1b164:	andeq	fp, r1, r0, asr r3
   1b168:	andeq	sl, r1, r8, lsr #29
   1b16c:	strdeq	sl, [r1], -r4
   1b170:	andeq	fp, r1, r4, asr #6
   1b174:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   1b178:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   1b17c:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   1b180:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   1b184:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   1b188:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   1b18c:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   1b190:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   1b194:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   1b198:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   1b19c:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   1b1a0:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   1b1a4:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   1b1a8:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   1b1ac:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   1b1b0:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   1b1b4:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   1b1b8:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   1b1bc:			; <UNDEFINED> instruction: 0x0001aeb8
   1b1c0:	andeq	fp, r1, r8, lsr r3
   1b1c4:	andeq	fp, r1, r8, lsr r3
   1b1c8:	muleq	r1, ip, lr
   1b1cc:	andeq	fp, r1, r8, lsr r3
   1b1d0:	andeq	sl, r1, ip, lsl #29
   1b1d4:	andeq	fp, r1, r8, lsr r3
   1b1d8:	andeq	sl, r1, r0, lsl #30
   1b1dc:	andeq	fp, r1, r8, lsr r3
   1b1e0:	andeq	fp, r1, r8, lsr r3
   1b1e4:	andeq	fp, r1, r8, lsr r3
   1b1e8:	andeq	sl, r1, ip, lsl #29
   1b1ec:	andeq	sl, r1, ip, lsl #29
   1b1f0:	andeq	sl, r1, ip, lsl #29
   1b1f4:	andeq	sl, r1, ip, lsl #29
   1b1f8:	andeq	sl, r1, ip, lsl #29
   1b1fc:	andeq	sl, r1, ip, lsl #29
   1b200:	andeq	sl, r1, ip, lsl #29
   1b204:	andeq	sl, r1, ip, lsl #29
   1b208:	andeq	sl, r1, ip, lsl #29
   1b20c:	andeq	sl, r1, ip, lsl #29
   1b210:	andeq	sl, r1, ip, lsl #29
   1b214:	andeq	sl, r1, ip, lsl #29
   1b218:	andeq	sl, r1, ip, lsl #29
   1b21c:	andeq	sl, r1, ip, lsl #29
   1b220:	andeq	sl, r1, ip, lsl #29
   1b224:	andeq	sl, r1, ip, lsl #29
   1b228:	andeq	fp, r1, r8, lsr r3
   1b22c:	andeq	fp, r1, r8, lsr r3
   1b230:	andeq	fp, r1, r8, lsr r3
   1b234:	andeq	fp, r1, r8, lsr r3
   1b238:	ldrdeq	sl, [r1], -r8
   1b23c:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   1b240:	andeq	sl, r1, ip, lsl #29
   1b244:	andeq	sl, r1, ip, lsl #29
   1b248:	andeq	sl, r1, ip, lsl #29
   1b24c:	andeq	sl, r1, ip, lsl #29
   1b250:	andeq	sl, r1, ip, lsl #29
   1b254:	andeq	sl, r1, ip, lsl #29
   1b258:	andeq	sl, r1, ip, lsl #29
   1b25c:	andeq	sl, r1, ip, lsl #29
   1b260:	andeq	sl, r1, ip, lsl #29
   1b264:	andeq	sl, r1, ip, lsl #29
   1b268:	andeq	sl, r1, ip, lsl #29
   1b26c:	andeq	sl, r1, ip, lsl #29
   1b270:	andeq	sl, r1, ip, lsl #29
   1b274:	andeq	sl, r1, ip, lsl #29
   1b278:	andeq	sl, r1, ip, lsl #29
   1b27c:	andeq	sl, r1, ip, lsl #29
   1b280:	andeq	sl, r1, ip, lsl #29
   1b284:	andeq	sl, r1, ip, lsl #29
   1b288:	andeq	sl, r1, ip, lsl #29
   1b28c:	andeq	sl, r1, ip, lsl #29
   1b290:	andeq	sl, r1, ip, lsl #29
   1b294:	andeq	sl, r1, ip, lsl #29
   1b298:	andeq	sl, r1, ip, lsl #29
   1b29c:	andeq	sl, r1, ip, lsl #29
   1b2a0:	andeq	sl, r1, ip, lsl #29
   1b2a4:	andeq	sl, r1, ip, lsl #29
   1b2a8:	andeq	fp, r1, r8, lsr r3
   1b2ac:	andeq	sl, r1, r8, asr lr
   1b2b0:	andeq	sl, r1, ip, lsl #29
   1b2b4:	andeq	fp, r1, r8, lsr r3
   1b2b8:	andeq	sl, r1, ip, lsl #29
   1b2bc:	andeq	fp, r1, r8, lsr r3
   1b2c0:	andeq	sl, r1, ip, lsl #29
   1b2c4:	andeq	sl, r1, ip, lsl #29
   1b2c8:	andeq	sl, r1, ip, lsl #29
   1b2cc:	andeq	sl, r1, ip, lsl #29
   1b2d0:	andeq	sl, r1, ip, lsl #29
   1b2d4:	andeq	sl, r1, ip, lsl #29
   1b2d8:	andeq	sl, r1, ip, lsl #29
   1b2dc:	andeq	sl, r1, ip, lsl #29
   1b2e0:	andeq	sl, r1, ip, lsl #29
   1b2e4:	andeq	sl, r1, ip, lsl #29
   1b2e8:	andeq	sl, r1, ip, lsl #29
   1b2ec:	andeq	sl, r1, ip, lsl #29
   1b2f0:	andeq	sl, r1, ip, lsl #29
   1b2f4:	andeq	sl, r1, ip, lsl #29
   1b2f8:	andeq	sl, r1, ip, lsl #29
   1b2fc:	andeq	sl, r1, ip, lsl #29
   1b300:	andeq	sl, r1, ip, lsl #29
   1b304:	andeq	sl, r1, ip, lsl #29
   1b308:	andeq	sl, r1, ip, lsl #29
   1b30c:	andeq	sl, r1, ip, lsl #29
   1b310:	andeq	sl, r1, ip, lsl #29
   1b314:	andeq	sl, r1, ip, lsl #29
   1b318:	andeq	sl, r1, ip, lsl #29
   1b31c:	andeq	sl, r1, ip, lsl #29
   1b320:	andeq	sl, r1, ip, lsl #29
   1b324:	andeq	sl, r1, ip, lsl #29
   1b328:	andeq	sl, r1, r4, lsr lr
   1b32c:	andeq	fp, r1, r8, lsr r3
   1b330:	andeq	sl, r1, r4, lsr lr
   1b334:	muleq	r1, ip, lr
   1b338:	mov	r3, #0
   1b33c:	str	r3, [sp, #40]	; 0x28
   1b340:	b	1aa18 <__assert_fail@plt+0x91f8>
   1b344:	mov	r3, #0
   1b348:	str	r3, [sp, #40]	; 0x28
   1b34c:	b	1a9b0 <__assert_fail@plt+0x9190>
   1b350:	mov	r3, #0
   1b354:	str	r3, [sp, #40]	; 0x28
   1b358:	b	1a9e4 <__assert_fail@plt+0x91c4>
   1b35c:	ldr	r3, [sp, #44]	; 0x2c
   1b360:	cmp	r3, #0
   1b364:	beq	1a8fc <__assert_fail@plt+0x90dc>
   1b368:	ldr	r3, [sp, #52]	; 0x34
   1b36c:	mov	fp, r9
   1b370:	str	r3, [sp, #60]	; 0x3c
   1b374:	b	1aa74 <__assert_fail@plt+0x9254>
   1b378:	ldr	r3, [sp, #44]	; 0x2c
   1b37c:	cmp	r3, #0
   1b380:	bne	1b7b4 <__assert_fail@plt+0x9f94>
   1b384:	str	r3, [sp, #40]	; 0x28
   1b388:	cmp	sl, #0
   1b38c:	ldr	r3, [sp, #84]	; 0x54
   1b390:	clz	r3, r3
   1b394:	lsr	r3, r3, #5
   1b398:	moveq	r3, #0
   1b39c:	cmp	r3, #0
   1b3a0:	strne	sl, [sp, #84]	; 0x54
   1b3a4:	movne	sl, #0
   1b3a8:	bne	1b3d8 <__assert_fail@plt+0x9bb8>
   1b3ac:	cmp	sl, r4
   1b3b0:	movhi	r3, #39	; 0x27
   1b3b4:	strbhi	r3, [r9, r4]
   1b3b8:	add	r3, r4, #1
   1b3bc:	cmp	sl, r3
   1b3c0:	movhi	r2, #92	; 0x5c
   1b3c4:	strbhi	r2, [r9, r3]
   1b3c8:	add	r3, r4, #2
   1b3cc:	cmp	sl, r3
   1b3d0:	movhi	r2, #39	; 0x27
   1b3d4:	strbhi	r2, [r9, r3]
   1b3d8:	mov	r3, #0
   1b3dc:	add	r4, r4, #3
   1b3e0:	str	r6, [sp, #80]	; 0x50
   1b3e4:	mov	fp, r3
   1b3e8:	mov	r5, #39	; 0x27
   1b3ec:	b	1a8b8 <__assert_fail@plt+0x9098>
   1b3f0:	ldr	r3, [sp, #44]	; 0x2c
   1b3f4:	cmp	r3, #0
   1b3f8:	bne	1b7b4 <__assert_fail@plt+0x9f94>
   1b3fc:	mov	r6, #0
   1b400:	mov	r5, #63	; 0x3f
   1b404:	str	r3, [sp, #40]	; 0x28
   1b408:	mov	r3, fp
   1b40c:	b	1a8b8 <__assert_fail@plt+0x9098>
   1b410:	mov	r2, #0
   1b414:	mov	r3, #0
   1b418:	cmn	r8, #1
   1b41c:	strd	r2, [sp, #128]	; 0x80
   1b420:	bne	1b430 <__assert_fail@plt+0x9c10>
   1b424:	ldr	r0, [sp, #28]
   1b428:	bl	11640 <strlen@plt>
   1b42c:	mov	r8, r0
   1b430:	str	r9, [sp, #100]	; 0x64
   1b434:	mov	r3, #0
   1b438:	strd	sl, [sp, #104]	; 0x68
   1b43c:	ldr	sl, [sp, #28]
   1b440:	str	r5, [sp, #112]	; 0x70
   1b444:	mov	r5, r3
   1b448:	ldr	r9, [sp, #68]	; 0x44
   1b44c:	str	r4, [sp, #116]	; 0x74
   1b450:	add	r4, r7, r5
   1b454:	add	r3, sp, #128	; 0x80
   1b458:	add	fp, sl, r4
   1b45c:	sub	r2, r8, r4
   1b460:	mov	r1, fp
   1b464:	add	r0, sp, #124	; 0x7c
   1b468:	bl	2014c <__assert_fail@plt+0xe92c>
   1b46c:	subs	r1, r0, #0
   1b470:	beq	1b4b0 <__assert_fail@plt+0x9c90>
   1b474:	cmn	r1, #1
   1b478:	beq	1b808 <__assert_fail@plt+0x9fe8>
   1b47c:	cmn	r1, #2
   1b480:	beq	1b828 <__assert_fail@plt+0xa008>
   1b484:	cmp	r9, #0
   1b488:	bne	1b4e0 <__assert_fail@plt+0x9cc0>
   1b48c:	ldr	r0, [sp, #124]	; 0x7c
   1b490:	add	r5, r5, r1
   1b494:	bl	11508 <iswprint@plt>
   1b498:	cmp	r0, #0
   1b49c:	add	r0, sp, #128	; 0x80
   1b4a0:	moveq	r6, #0
   1b4a4:	bl	1149c <mbsinit@plt>
   1b4a8:	cmp	r0, #0
   1b4ac:	beq	1b450 <__assert_fail@plt+0x9c30>
   1b4b0:	ldr	r3, [sp, #60]	; 0x3c
   1b4b4:	add	r9, sp, #100	; 0x64
   1b4b8:	mov	r0, r5
   1b4bc:	ldm	r9, {r9, sl, fp}
   1b4c0:	eor	r2, r6, #1
   1b4c4:	ldr	r5, [sp, #112]	; 0x70
   1b4c8:	and	r2, r2, r3
   1b4cc:	uxtb	r2, r2
   1b4d0:	ldr	r4, [sp, #116]	; 0x74
   1b4d4:	cmp	r0, #1
   1b4d8:	bhi	1aff4 <__assert_fail@plt+0x97d4>
   1b4dc:	b	1afe4 <__assert_fail@plt+0x97c4>
   1b4e0:	cmp	r1, #1
   1b4e4:	beq	1b48c <__assert_fail@plt+0x9c6c>
   1b4e8:	add	r2, r4, #1
   1b4ec:	add	r3, sl, r1
   1b4f0:	add	r2, sl, r2
   1b4f4:	add	r4, r3, r4
   1b4f8:	ldrb	r3, [r2], #1
   1b4fc:	sub	r3, r3, #91	; 0x5b
   1b500:	cmp	r3, #33	; 0x21
   1b504:	ldrls	pc, [pc, r3, lsl #2]
   1b508:	b	1b594 <__assert_fail@plt+0x9d74>
   1b50c:	andeq	fp, r1, r0, lsr #11
   1b510:	andeq	fp, r1, r0, lsr #11
   1b514:	muleq	r1, r4, r5
   1b518:	andeq	fp, r1, r0, lsr #11
   1b51c:	muleq	r1, r4, r5
   1b520:	andeq	fp, r1, r0, lsr #11
   1b524:	muleq	r1, r4, r5
   1b528:	muleq	r1, r4, r5
   1b52c:	muleq	r1, r4, r5
   1b530:	muleq	r1, r4, r5
   1b534:	muleq	r1, r4, r5
   1b538:	muleq	r1, r4, r5
   1b53c:	muleq	r1, r4, r5
   1b540:	muleq	r1, r4, r5
   1b544:	muleq	r1, r4, r5
   1b548:	muleq	r1, r4, r5
   1b54c:	muleq	r1, r4, r5
   1b550:	muleq	r1, r4, r5
   1b554:	muleq	r1, r4, r5
   1b558:	muleq	r1, r4, r5
   1b55c:	muleq	r1, r4, r5
   1b560:	muleq	r1, r4, r5
   1b564:	muleq	r1, r4, r5
   1b568:	muleq	r1, r4, r5
   1b56c:	muleq	r1, r4, r5
   1b570:	muleq	r1, r4, r5
   1b574:	muleq	r1, r4, r5
   1b578:	muleq	r1, r4, r5
   1b57c:	muleq	r1, r4, r5
   1b580:	muleq	r1, r4, r5
   1b584:	muleq	r1, r4, r5
   1b588:	muleq	r1, r4, r5
   1b58c:	muleq	r1, r4, r5
   1b590:	andeq	fp, r1, r0, lsr #11
   1b594:	cmp	r4, r2
   1b598:	bne	1b4f8 <__assert_fail@plt+0x9cd8>
   1b59c:	b	1b48c <__assert_fail@plt+0x9c6c>
   1b5a0:	mov	r3, #2
   1b5a4:	ldr	fp, [sp, #100]	; 0x64
   1b5a8:	str	r3, [sp, #176]	; 0xb0
   1b5ac:	ldr	sl, [sp, #104]	; 0x68
   1b5b0:	b	1aa74 <__assert_fail@plt+0x9254>
   1b5b4:	ldr	r2, [sp, #52]	; 0x34
   1b5b8:	mov	fp, r9
   1b5bc:	ldr	r3, [sp, #60]	; 0x3c
   1b5c0:	and	r3, r3, r2
   1b5c4:	str	r3, [sp, #60]	; 0x3c
   1b5c8:	b	1aa74 <__assert_fail@plt+0x9254>
   1b5cc:	cmp	sl, r4
   1b5d0:	movhi	r2, fp
   1b5d4:	bhi	1a94c <__assert_fail@plt+0x912c>
   1b5d8:	mov	r2, r4
   1b5dc:	b	1a95c <__assert_fail@plt+0x913c>
   1b5e0:	mov	r6, r3
   1b5e4:	mov	r5, #63	; 0x3f
   1b5e8:	b	1aa1c <__assert_fail@plt+0x91fc>
   1b5ec:	ldr	r8, [sp, #36]	; 0x24
   1b5f0:	ldr	r6, [sp, #100]	; 0x64
   1b5f4:	b	1a8c8 <__assert_fail@plt+0x90a8>
   1b5f8:	mov	fp, r9
   1b5fc:	ldr	r8, [sp, #36]	; 0x24
   1b600:	ldr	r3, [sp, #52]	; 0x34
   1b604:	str	r3, [sp, #60]	; 0x3c
   1b608:	b	1aa74 <__assert_fail@plt+0x9254>
   1b60c:	ldr	r8, [sp, #36]	; 0x24
   1b610:	ldr	r6, [sp, #100]	; 0x64
   1b614:	b	1a760 <__assert_fail@plt+0x8f40>
   1b618:	mov	r3, #0
   1b61c:	add	r4, r4, #4
   1b620:	mov	fp, r2
   1b624:	mov	r6, r3
   1b628:	mov	r5, #48	; 0x30
   1b62c:	b	1a8b8 <__assert_fail@plt+0x9098>
   1b630:	mov	r6, r3
   1b634:	b	1b0b4 <__assert_fail@plt+0x9894>
   1b638:	mov	r3, #1
   1b63c:	movw	r2, #10144	; 0x27a0
   1b640:	movt	r2, #2
   1b644:	mov	r4, r3
   1b648:	mov	r9, sl
   1b64c:	str	r3, [sp, #32]
   1b650:	str	sl, [sp, #44]	; 0x2c
   1b654:	str	r3, [sp, #48]	; 0x30
   1b658:	str	sl, [sp, #52]	; 0x34
   1b65c:	str	r3, [sp, #56]	; 0x38
   1b660:	str	r3, [sp, #60]	; 0x3c
   1b664:	str	sl, [sp, #64]	; 0x40
   1b668:	str	sl, [sp, #68]	; 0x44
   1b66c:	str	r2, [sp, #72]	; 0x48
   1b670:	str	sl, [sp, #80]	; 0x50
   1b674:	str	sl, [sp, #84]	; 0x54
   1b678:	str	sl, [sp, #88]	; 0x58
   1b67c:	b	1a16c <__assert_fail@plt+0x894c>
   1b680:	mov	r3, #0
   1b684:	mov	r5, #48	; 0x30
   1b688:	mov	r6, r3
   1b68c:	b	1a8b8 <__assert_fail@plt+0x9098>
   1b690:	cmp	sl, r4
   1b694:	mov	r5, #48	; 0x30
   1b698:	movhi	r3, #48	; 0x30
   1b69c:	strbhi	r3, [r9, r4]
   1b6a0:	add	r3, r2, #2
   1b6a4:	add	r4, r2, #3
   1b6a8:	cmp	sl, r3
   1b6ac:	movhi	r1, #48	; 0x30
   1b6b0:	strbhi	r1, [r9, r3]
   1b6b4:	mov	r3, #0
   1b6b8:	b	1a994 <__assert_fail@plt+0x9174>
   1b6bc:	ldr	r3, [sp, #48]	; 0x30
   1b6c0:	str	r3, [sp, #40]	; 0x28
   1b6c4:	b	1afa0 <__assert_fail@plt+0x9780>
   1b6c8:	ldr	r2, [sp, #28]
   1b6cc:	ldrb	r2, [r2, r3]
   1b6d0:	sub	r1, r2, #33	; 0x21
   1b6d4:	cmp	r1, #29
   1b6d8:	ldrls	pc, [pc, r1, lsl #2]
   1b6dc:	b	1aa18 <__assert_fail@plt+0x91f8>
   1b6e0:	andeq	fp, r1, r8, asr r7
   1b6e4:	andeq	sl, r1, r8, lsl sl
   1b6e8:	andeq	sl, r1, r8, lsl sl
   1b6ec:	andeq	sl, r1, r8, lsl sl
   1b6f0:	andeq	sl, r1, r8, lsl sl
   1b6f4:	andeq	sl, r1, r8, lsl sl
   1b6f8:	andeq	fp, r1, r8, asr r7
   1b6fc:	andeq	fp, r1, r8, asr r7
   1b700:	andeq	fp, r1, r8, asr r7
   1b704:	andeq	sl, r1, r8, lsl sl
   1b708:	andeq	sl, r1, r8, lsl sl
   1b70c:	andeq	sl, r1, r8, lsl sl
   1b710:	andeq	fp, r1, r8, asr r7
   1b714:	andeq	sl, r1, r8, lsl sl
   1b718:	andeq	fp, r1, r8, asr r7
   1b71c:	andeq	sl, r1, r8, lsl sl
   1b720:	andeq	sl, r1, r8, lsl sl
   1b724:	andeq	sl, r1, r8, lsl sl
   1b728:	andeq	sl, r1, r8, lsl sl
   1b72c:	andeq	sl, r1, r8, lsl sl
   1b730:	andeq	sl, r1, r8, lsl sl
   1b734:	andeq	sl, r1, r8, lsl sl
   1b738:	andeq	sl, r1, r8, lsl sl
   1b73c:	andeq	sl, r1, r8, lsl sl
   1b740:	andeq	sl, r1, r8, lsl sl
   1b744:	andeq	sl, r1, r8, lsl sl
   1b748:	andeq	sl, r1, r8, lsl sl
   1b74c:	andeq	fp, r1, r8, asr r7
   1b750:	andeq	fp, r1, r8, asr r7
   1b754:	andeq	fp, r1, r8, asr r7
   1b758:	ldr	r1, [sp, #44]	; 0x2c
   1b75c:	cmp	r1, #0
   1b760:	bne	1b9c0 <__assert_fail@plt+0xa1a0>
   1b764:	cmp	sl, r4
   1b768:	mov	r7, r3
   1b76c:	movhi	r1, #63	; 0x3f
   1b770:	mov	r5, r2
   1b774:	mov	r3, fp
   1b778:	strbhi	r1, [r9, r4]
   1b77c:	add	r1, r4, #1
   1b780:	cmp	sl, r1
   1b784:	movhi	r0, #34	; 0x22
   1b788:	strbhi	r0, [r9, r1]
   1b78c:	add	r1, r4, #2
   1b790:	cmp	sl, r1
   1b794:	movhi	r0, #34	; 0x22
   1b798:	strbhi	r0, [r9, r1]
   1b79c:	add	r1, r4, #3
   1b7a0:	add	r4, r4, #4
   1b7a4:	cmp	sl, r1
   1b7a8:	movhi	r0, #63	; 0x3f
   1b7ac:	strbhi	r0, [r9, r1]
   1b7b0:	b	1a994 <__assert_fail@plt+0x9174>
   1b7b4:	mov	fp, r9
   1b7b8:	b	1aa74 <__assert_fail@plt+0x9254>
   1b7bc:	ldr	r3, [sp, #188]	; 0xbc
   1b7c0:	ldrb	r3, [r3]
   1b7c4:	cmp	r3, #0
   1b7c8:	beq	1a104 <__assert_fail@plt+0x88e4>
   1b7cc:	ldr	r2, [sp, #188]	; 0xbc
   1b7d0:	cmp	sl, r4
   1b7d4:	bls	1b7f4 <__assert_fail@plt+0x9fd4>
   1b7d8:	strb	r3, [fp, r4]
   1b7dc:	add	r4, r4, #1
   1b7e0:	ldrb	r3, [r2, #1]!
   1b7e4:	cmp	r3, #0
   1b7e8:	beq	1a104 <__assert_fail@plt+0x88e4>
   1b7ec:	cmp	sl, r4
   1b7f0:	bhi	1b7d8 <__assert_fail@plt+0x9fb8>
   1b7f4:	ldrb	r3, [r2, #1]!
   1b7f8:	add	r4, r4, #1
   1b7fc:	cmp	r3, #0
   1b800:	bne	1b7d0 <__assert_fail@plt+0x9fb0>
   1b804:	b	1a104 <__assert_fail@plt+0x88e4>
   1b808:	add	r9, sp, #100	; 0x64
   1b80c:	mov	r0, r5
   1b810:	ldr	r2, [sp, #60]	; 0x3c
   1b814:	mov	r6, #0
   1b818:	ldm	r9, {r9, sl, fp}
   1b81c:	ldr	r5, [sp, #112]	; 0x70
   1b820:	ldr	r4, [sp, #116]	; 0x74
   1b824:	b	1b4d4 <__assert_fail@plt+0x9cb4>
   1b828:	cmp	r4, r8
   1b82c:	add	r9, sp, #100	; 0x64
   1b830:	mov	r1, r4
   1b834:	mov	r2, fp
   1b838:	ldm	r9, {r9, sl, fp}
   1b83c:	mov	r3, r5
   1b840:	mov	r0, r5
   1b844:	ldr	r5, [sp, #112]	; 0x70
   1b848:	ldr	r4, [sp, #116]	; 0x74
   1b84c:	bcs	1b880 <__assert_fail@plt+0xa060>
   1b850:	ldrb	r6, [r2]
   1b854:	cmp	r6, #0
   1b858:	bne	1b86c <__assert_fail@plt+0xa04c>
   1b85c:	b	1b9b8 <__assert_fail@plt+0xa198>
   1b860:	ldrb	r6, [r2, #1]!
   1b864:	cmp	r6, #0
   1b868:	beq	1b950 <__assert_fail@plt+0xa130>
   1b86c:	add	r3, r3, #1
   1b870:	add	r1, r7, r3
   1b874:	cmp	r8, r1
   1b878:	bhi	1b860 <__assert_fail@plt+0xa040>
   1b87c:	mov	r0, r3
   1b880:	mov	r6, #0
   1b884:	ldr	r2, [sp, #60]	; 0x3c
   1b888:	b	1b4d4 <__assert_fail@plt+0x9cb4>
   1b88c:	mov	r3, #1
   1b890:	mov	r4, #0
   1b894:	mov	r9, r4
   1b898:	str	r3, [sp, #32]
   1b89c:	str	r3, [sp, #44]	; 0x2c
   1b8a0:	str	r3, [sp, #48]	; 0x30
   1b8a4:	str	r4, [sp, #52]	; 0x34
   1b8a8:	str	r3, [sp, #56]	; 0x38
   1b8ac:	str	r3, [sp, #60]	; 0x3c
   1b8b0:	str	r3, [sp, #88]	; 0x58
   1b8b4:	movw	r3, #10144	; 0x27a0
   1b8b8:	movt	r3, #2
   1b8bc:	str	r4, [sp, #64]	; 0x40
   1b8c0:	str	r4, [sp, #68]	; 0x44
   1b8c4:	str	r3, [sp, #72]	; 0x48
   1b8c8:	str	r4, [sp, #80]	; 0x50
   1b8cc:	str	r4, [sp, #84]	; 0x54
   1b8d0:	b	1a16c <__assert_fail@plt+0x894c>
   1b8d4:	mov	fp, r9
   1b8d8:	b	1aa88 <__assert_fail@plt+0x9268>
   1b8dc:	ldr	r3, [sp, #48]	; 0x30
   1b8e0:	b	1b3fc <__assert_fail@plt+0x9bdc>
   1b8e4:	mov	r2, r3
   1b8e8:	ldr	r3, [sp, #72]	; 0x48
   1b8ec:	cmp	r3, #0
   1b8f0:	moveq	r2, #0
   1b8f4:	andne	r2, r2, #1
   1b8f8:	cmp	r2, #0
   1b8fc:	beq	1b92c <__assert_fail@plt+0xa10c>
   1b900:	mov	r2, r3
   1b904:	ldrb	r3, [r3]
   1b908:	cmp	r3, #0
   1b90c:	beq	1b92c <__assert_fail@plt+0xa10c>
   1b910:	cmp	sl, r4
   1b914:	bls	1b93c <__assert_fail@plt+0xa11c>
   1b918:	strb	r3, [fp, r4]
   1b91c:	add	r4, r4, #1
   1b920:	ldrb	r3, [r2, #1]!
   1b924:	cmp	r3, #0
   1b928:	bne	1b910 <__assert_fail@plt+0xa0f0>
   1b92c:	cmp	sl, r4
   1b930:	movhi	r3, #0
   1b934:	strbhi	r3, [fp, r4]
   1b938:	b	1aac4 <__assert_fail@plt+0x92a4>
   1b93c:	ldrb	r3, [r2, #1]!
   1b940:	add	r4, r4, #1
   1b944:	cmp	r3, #0
   1b948:	bne	1b910 <__assert_fail@plt+0xa0f0>
   1b94c:	b	1b92c <__assert_fail@plt+0xa10c>
   1b950:	mov	r0, r3
   1b954:	ldr	r2, [sp, #60]	; 0x3c
   1b958:	b	1b4d4 <__assert_fail@plt+0x9cb4>
   1b95c:	mov	ip, #5
   1b960:	mov	r3, r8
   1b964:	ldr	r1, [sp, #84]	; 0x54
   1b968:	str	ip, [sp]
   1b96c:	ldr	r2, [sp, #180]	; 0xb4
   1b970:	ldr	ip, [sp, #188]	; 0xbc
   1b974:	ldr	r0, [sp, #184]	; 0xb8
   1b978:	str	r2, [sp, #4]
   1b97c:	ldr	r2, [sp, #28]
   1b980:	str	ip, [sp, #12]
   1b984:	ldr	ip, [sp, #192]	; 0xc0
   1b988:	str	r0, [sp, #8]
   1b98c:	mov	r0, fp
   1b990:	str	ip, [sp, #16]
   1b994:	bl	1a048 <__assert_fail@plt+0x8828>
   1b998:	mov	r4, r0
   1b99c:	b	1aac4 <__assert_fail@plt+0x92a4>
   1b9a0:	mov	r6, r3
   1b9a4:	str	r3, [sp, #40]	; 0x28
   1b9a8:	b	1aa34 <__assert_fail@plt+0x9214>
   1b9ac:	mov	r3, #2
   1b9b0:	str	r3, [sp, #176]	; 0xb0
   1b9b4:	b	1aa74 <__assert_fail@plt+0x9254>
   1b9b8:	ldr	r2, [sp, #60]	; 0x3c
   1b9bc:	b	1b4d4 <__assert_fail@plt+0x9cb4>
   1b9c0:	mov	r3, #5
   1b9c4:	mov	fp, r9
   1b9c8:	str	r3, [sp, #176]	; 0xb0
   1b9cc:	b	1aa88 <__assert_fail@plt+0x9268>
   1b9d0:	mov	r1, #1
   1b9d4:	mov	r9, #0
   1b9d8:	mov	r3, r9
   1b9dc:	mov	r2, r9
   1b9e0:	str	r1, [sp, #32]
   1b9e4:	str	sl, [sp, #84]	; 0x54
   1b9e8:	b	1a810 <__assert_fail@plt+0x8ff0>
   1b9ec:	mov	r3, #0
   1b9f0:	mov	r2, #1
   1b9f4:	mov	r9, r3
   1b9f8:	mov	r4, r3
   1b9fc:	str	r2, [sp, #32]
   1ba00:	strd	r2, [sp, #44]	; 0x2c
   1ba04:	strd	r2, [sp, #56]	; 0x38
   1ba08:	str	r3, [sp, #80]	; 0x50
   1ba0c:	str	r3, [sp, #84]	; 0x54
   1ba10:	str	r3, [sp, #88]	; 0x58
   1ba14:	movw	r3, #10164	; 0x27b4
   1ba18:	movt	r3, #2
   1ba1c:	str	r2, [sp, #52]	; 0x34
   1ba20:	str	r2, [sp, #64]	; 0x40
   1ba24:	str	r2, [sp, #68]	; 0x44
   1ba28:	str	r3, [sp, #72]	; 0x48
   1ba2c:	b	1a16c <__assert_fail@plt+0x894c>
   1ba30:	bl	117f0 <abort@plt>
   1ba34:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1ba38:	mov	r4, r0
   1ba3c:	mov	r5, r3
   1ba40:	strd	r6, [sp, #8]
   1ba44:	movw	r7, #12688	; 0x3190
   1ba48:	movt	r7, #3
   1ba4c:	strd	r8, [sp, #16]
   1ba50:	strd	sl, [sp, #24]
   1ba54:	mov	sl, r1
   1ba58:	mov	fp, r2
   1ba5c:	str	lr, [sp, #32]
   1ba60:	sub	sp, sp, #60	; 0x3c
   1ba64:	bl	1167c <__errno_location@plt>
   1ba68:	mov	r8, r0
   1ba6c:	cmn	r4, #-2147483647	; 0x80000001
   1ba70:	ldr	r6, [r7]
   1ba74:	movne	r0, #0
   1ba78:	moveq	r0, #1
   1ba7c:	ldr	r3, [r8]
   1ba80:	orrs	r0, r0, r4, lsr #31
   1ba84:	str	r3, [sp, #28]
   1ba88:	bne	1bc18 <__assert_fail@plt+0xa3f8>
   1ba8c:	ldr	r3, [r7, #4]
   1ba90:	cmp	r3, r4
   1ba94:	bgt	1baf4 <__assert_fail@plt+0xa2d4>
   1ba98:	add	r1, r7, #8
   1ba9c:	sub	r2, r4, r3
   1baa0:	str	r3, [sp, #52]	; 0x34
   1baa4:	cmp	r6, r1
   1baa8:	add	r2, r2, #1
   1baac:	beq	1bbf0 <__assert_fail@plt+0xa3d0>
   1bab0:	mov	r1, #8
   1bab4:	mov	r0, r6
   1bab8:	mvn	r3, #-2147483648	; 0x80000000
   1babc:	str	r1, [sp]
   1bac0:	add	r1, sp, #52	; 0x34
   1bac4:	bl	1ebf4 <__assert_fail@plt+0xd3d4>
   1bac8:	mov	r6, r0
   1bacc:	str	r0, [r7]
   1bad0:	ldr	r0, [r7, #4]
   1bad4:	mov	r1, #0
   1bad8:	ldr	r2, [sp, #52]	; 0x34
   1badc:	sub	r2, r2, r0
   1bae0:	add	r0, r6, r0, lsl #3
   1bae4:	lsl	r2, r2, #3
   1bae8:	bl	116ac <memset@plt>
   1baec:	ldr	r3, [sp, #52]	; 0x34
   1baf0:	str	r3, [r7, #4]
   1baf4:	ldr	r1, [r5, #4]
   1baf8:	add	r0, r6, r4, lsl #3
   1bafc:	add	ip, r5, #8
   1bb00:	mov	r3, fp
   1bb04:	mov	r2, sl
   1bb08:	ldr	r7, [r0, #4]
   1bb0c:	str	r0, [sp, #36]	; 0x24
   1bb10:	str	ip, [sp, #40]	; 0x28
   1bb14:	orr	r0, r1, #1
   1bb18:	ldr	r9, [r6, r4, lsl #3]
   1bb1c:	str	ip, [sp, #8]
   1bb20:	ldr	lr, [r5, #44]	; 0x2c
   1bb24:	str	r0, [sp, #4]
   1bb28:	ldr	ip, [r5]
   1bb2c:	mov	r1, r9
   1bb30:	str	ip, [sp, #32]
   1bb34:	ldr	ip, [r5, #40]	; 0x28
   1bb38:	str	ip, [sp, #12]
   1bb3c:	ldr	ip, [sp, #32]
   1bb40:	str	lr, [sp, #16]
   1bb44:	str	r0, [sp, #44]	; 0x2c
   1bb48:	mov	r0, r7
   1bb4c:	str	ip, [sp]
   1bb50:	bl	1a048 <__assert_fail@plt+0x8828>
   1bb54:	cmp	r9, r0
   1bb58:	bhi	1bbc8 <__assert_fail@plt+0xa3a8>
   1bb5c:	add	r9, r0, #1
   1bb60:	movw	r3, #12920	; 0x3278
   1bb64:	movt	r3, #3
   1bb68:	cmp	r7, r3
   1bb6c:	str	r9, [r6, r4, lsl #3]
   1bb70:	beq	1bb7c <__assert_fail@plt+0xa35c>
   1bb74:	mov	r0, r7
   1bb78:	bl	171c0 <__assert_fail@plt+0x59a0>
   1bb7c:	mov	r0, r9
   1bb80:	bl	1e950 <__assert_fail@plt+0xd130>
   1bb84:	ldr	ip, [r5]
   1bb88:	mov	r3, fp
   1bb8c:	mov	r2, sl
   1bb90:	mov	r1, r9
   1bb94:	mov	r7, r0
   1bb98:	ldr	lr, [sp, #36]	; 0x24
   1bb9c:	ldr	r4, [r5, #40]	; 0x28
   1bba0:	str	r0, [lr, #4]
   1bba4:	ldr	lr, [r5, #44]	; 0x2c
   1bba8:	str	ip, [sp]
   1bbac:	ldr	ip, [sp, #44]	; 0x2c
   1bbb0:	str	ip, [sp, #4]
   1bbb4:	ldr	ip, [sp, #40]	; 0x28
   1bbb8:	str	r4, [sp, #12]
   1bbbc:	str	lr, [sp, #16]
   1bbc0:	str	ip, [sp, #8]
   1bbc4:	bl	1a048 <__assert_fail@plt+0x8828>
   1bbc8:	ldr	r3, [sp, #28]
   1bbcc:	mov	r0, r7
   1bbd0:	str	r3, [r8]
   1bbd4:	add	sp, sp, #60	; 0x3c
   1bbd8:	ldrd	r4, [sp]
   1bbdc:	ldrd	r6, [sp, #8]
   1bbe0:	ldrd	r8, [sp, #16]
   1bbe4:	ldrd	sl, [sp, #24]
   1bbe8:	add	sp, sp, #32
   1bbec:	pop	{pc}		; (ldr pc, [sp], #4)
   1bbf0:	mov	r1, #8
   1bbf4:	mvn	r3, #-2147483648	; 0x80000000
   1bbf8:	str	r1, [sp]
   1bbfc:	add	r1, sp, #52	; 0x34
   1bc00:	bl	1ebf4 <__assert_fail@plt+0xd3d4>
   1bc04:	ldrd	r2, [r7, #8]
   1bc08:	mov	r6, r0
   1bc0c:	str	r0, [r7]
   1bc10:	strd	r2, [r0]
   1bc14:	b	1bad0 <__assert_fail@plt+0xa2b0>
   1bc18:	bl	117f0 <abort@plt>
   1bc1c:	strd	r4, [sp, #-16]!
   1bc20:	mov	r5, r0
   1bc24:	str	r6, [sp, #8]
   1bc28:	str	lr, [sp, #12]
   1bc2c:	bl	1167c <__errno_location@plt>
   1bc30:	mov	r4, r0
   1bc34:	cmp	r5, #0
   1bc38:	ldr	r0, [pc, #32]	; 1bc60 <__assert_fail@plt+0xa440>
   1bc3c:	mov	r1, #48	; 0x30
   1bc40:	movne	r0, r5
   1bc44:	ldr	r6, [r4]
   1bc48:	bl	1ed94 <__assert_fail@plt+0xd574>
   1bc4c:	str	r6, [r4]
   1bc50:	ldrd	r4, [sp]
   1bc54:	ldr	r6, [sp, #8]
   1bc58:	add	sp, sp, #12
   1bc5c:	pop	{pc}		; (ldr pc, [sp], #4)
   1bc60:	andeq	r3, r3, r8, ror r3
   1bc64:	ldr	r3, [pc, #12]	; 1bc78 <__assert_fail@plt+0xa458>
   1bc68:	cmp	r0, #0
   1bc6c:	moveq	r0, r3
   1bc70:	ldr	r0, [r0]
   1bc74:	bx	lr
   1bc78:	andeq	r3, r3, r8, ror r3
   1bc7c:	ldr	r3, [pc, #12]	; 1bc90 <__assert_fail@plt+0xa470>
   1bc80:	cmp	r0, #0
   1bc84:	moveq	r0, r3
   1bc88:	str	r1, [r0]
   1bc8c:	bx	lr
   1bc90:	andeq	r3, r3, r8, ror r3
   1bc94:	ldr	r3, [pc, #52]	; 1bcd0 <__assert_fail@plt+0xa4b0>
   1bc98:	cmp	r0, #0
   1bc9c:	push	{lr}		; (str lr, [sp, #-4]!)
   1bca0:	lsr	lr, r1, #5
   1bca4:	and	r1, r1, #31
   1bca8:	moveq	r0, r3
   1bcac:	add	r3, r0, #8
   1bcb0:	ldr	ip, [r3, lr, lsl #2]
   1bcb4:	lsr	r0, ip, r1
   1bcb8:	eor	r2, r2, r0
   1bcbc:	and	r0, r0, #1
   1bcc0:	and	r2, r2, #1
   1bcc4:	eor	r1, ip, r2, lsl r1
   1bcc8:	str	r1, [r3, lr, lsl #2]
   1bccc:	pop	{pc}		; (ldr pc, [sp], #4)
   1bcd0:	andeq	r3, r3, r8, ror r3
   1bcd4:	ldr	r3, [pc, #16]	; 1bcec <__assert_fail@plt+0xa4cc>
   1bcd8:	cmp	r0, #0
   1bcdc:	movne	r3, r0
   1bce0:	ldr	r0, [r3, #4]
   1bce4:	str	r1, [r3, #4]
   1bce8:	bx	lr
   1bcec:	andeq	r3, r3, r8, ror r3
   1bcf0:	ldr	r3, [pc, #48]	; 1bd28 <__assert_fail@plt+0xa508>
   1bcf4:	cmp	r0, #0
   1bcf8:	mov	ip, #10
   1bcfc:	moveq	r0, r3
   1bd00:	cmp	r2, #0
   1bd04:	cmpne	r1, #0
   1bd08:	str	ip, [r0]
   1bd0c:	beq	1bd1c <__assert_fail@plt+0xa4fc>
   1bd10:	str	r1, [r0, #40]	; 0x28
   1bd14:	str	r2, [r0, #44]	; 0x2c
   1bd18:	bx	lr
   1bd1c:	str	r4, [sp, #-8]!
   1bd20:	str	lr, [sp, #4]
   1bd24:	bl	117f0 <abort@plt>
   1bd28:	andeq	r3, r3, r8, ror r3
   1bd2c:	strd	r4, [sp, #-28]!	; 0xffffffe4
   1bd30:	strd	r6, [sp, #8]
   1bd34:	mov	r7, r0
   1bd38:	mov	r6, r1
   1bd3c:	strd	r8, [sp, #16]
   1bd40:	mov	r8, r2
   1bd44:	mov	r9, r3
   1bd48:	str	lr, [sp, #24]
   1bd4c:	sub	sp, sp, #28
   1bd50:	ldr	r4, [sp, #56]	; 0x38
   1bd54:	ldr	ip, [pc, #104]	; 1bdc4 <__assert_fail@plt+0xa5a4>
   1bd58:	cmp	r4, #0
   1bd5c:	moveq	r4, ip
   1bd60:	bl	1167c <__errno_location@plt>
   1bd64:	ldr	ip, [r4, #44]	; 0x2c
   1bd68:	mov	r5, r0
   1bd6c:	mov	r1, r6
   1bd70:	add	lr, r4, #8
   1bd74:	mov	r3, r9
   1bd78:	ldr	r6, [r5]
   1bd7c:	mov	r2, r8
   1bd80:	mov	r0, r7
   1bd84:	str	ip, [sp, #16]
   1bd88:	ldr	ip, [r4, #40]	; 0x28
   1bd8c:	str	lr, [sp, #8]
   1bd90:	str	ip, [sp, #12]
   1bd94:	ldr	ip, [r4, #4]
   1bd98:	str	ip, [sp, #4]
   1bd9c:	ldr	ip, [r4]
   1bda0:	str	ip, [sp]
   1bda4:	bl	1a048 <__assert_fail@plt+0x8828>
   1bda8:	str	r6, [r5]
   1bdac:	add	sp, sp, #28
   1bdb0:	ldrd	r4, [sp]
   1bdb4:	ldrd	r6, [sp, #8]
   1bdb8:	ldrd	r8, [sp, #16]
   1bdbc:	add	sp, sp, #24
   1bdc0:	pop	{pc}		; (ldr pc, [sp], #4)
   1bdc4:	andeq	r3, r3, r8, ror r3
   1bdc8:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1bdcc:	cmp	r2, #0
   1bdd0:	ldr	r4, [pc, #192]	; 1be98 <__assert_fail@plt+0xa678>
   1bdd4:	movne	r4, r2
   1bdd8:	strd	r6, [sp, #8]
   1bddc:	strd	r8, [sp, #16]
   1bde0:	mov	r9, r1
   1bde4:	mov	r8, r0
   1bde8:	strd	sl, [sp, #24]
   1bdec:	str	lr, [sp, #32]
   1bdf0:	sub	sp, sp, #36	; 0x24
   1bdf4:	bl	1167c <__errno_location@plt>
   1bdf8:	ldr	r5, [r4, #4]
   1bdfc:	mov	r6, r0
   1be00:	add	r7, r4, #8
   1be04:	mov	r1, #0
   1be08:	mov	r3, r9
   1be0c:	ldr	ip, [r4, #44]	; 0x2c
   1be10:	mov	r2, r8
   1be14:	mov	r0, r1
   1be18:	ldr	sl, [r6]
   1be1c:	orr	r5, r5, #1
   1be20:	str	ip, [sp, #16]
   1be24:	ldr	ip, [r4, #40]	; 0x28
   1be28:	stmib	sp, {r5, r7, ip}
   1be2c:	ldr	ip, [r4]
   1be30:	str	ip, [sp]
   1be34:	bl	1a048 <__assert_fail@plt+0x8828>
   1be38:	add	r1, r0, #1
   1be3c:	mov	r0, r1
   1be40:	str	r1, [sp, #28]
   1be44:	bl	1e950 <__assert_fail@plt+0xd130>
   1be48:	ldr	ip, [r4, #44]	; 0x2c
   1be4c:	mov	fp, r0
   1be50:	mov	r3, r9
   1be54:	mov	r2, r8
   1be58:	ldr	r1, [sp, #28]
   1be5c:	str	ip, [sp, #16]
   1be60:	ldr	ip, [r4, #40]	; 0x28
   1be64:	stmib	sp, {r5, r7, ip}
   1be68:	ldr	ip, [r4]
   1be6c:	str	ip, [sp]
   1be70:	bl	1a048 <__assert_fail@plt+0x8828>
   1be74:	mov	r0, fp
   1be78:	str	sl, [r6]
   1be7c:	add	sp, sp, #36	; 0x24
   1be80:	ldrd	r4, [sp]
   1be84:	ldrd	r6, [sp, #8]
   1be88:	ldrd	r8, [sp, #16]
   1be8c:	ldrd	sl, [sp, #24]
   1be90:	add	sp, sp, #32
   1be94:	pop	{pc}		; (ldr pc, [sp], #4)
   1be98:	andeq	r3, r3, r8, ror r3
   1be9c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1bea0:	cmp	r3, #0
   1bea4:	ldr	r4, [pc, #220]	; 1bf88 <__assert_fail@plt+0xa768>
   1bea8:	movne	r4, r3
   1beac:	strd	r6, [sp, #8]
   1beb0:	mov	r6, r2
   1beb4:	strd	r8, [sp, #16]
   1beb8:	mov	r9, r0
   1bebc:	strd	sl, [sp, #24]
   1bec0:	mov	sl, r1
   1bec4:	str	lr, [sp, #32]
   1bec8:	sub	sp, sp, #44	; 0x2c
   1becc:	bl	1167c <__errno_location@plt>
   1bed0:	ldr	r5, [r4, #4]
   1bed4:	mov	r7, r0
   1bed8:	mov	r1, #0
   1bedc:	add	r8, r4, #8
   1bee0:	mov	r3, sl
   1bee4:	ldr	ip, [r4, #44]	; 0x2c
   1bee8:	mov	r2, r9
   1beec:	mov	r0, r1
   1bef0:	ldr	lr, [r7]
   1bef4:	cmp	r6, r1
   1bef8:	orreq	r5, r5, #1
   1befc:	str	ip, [sp, #16]
   1bf00:	ldr	ip, [r4, #40]	; 0x28
   1bf04:	stmib	sp, {r5, r8, ip}
   1bf08:	ldr	ip, [r4]
   1bf0c:	str	lr, [sp, #28]
   1bf10:	str	ip, [sp]
   1bf14:	bl	1a048 <__assert_fail@plt+0x8828>
   1bf18:	add	r1, r0, #1
   1bf1c:	mov	fp, r0
   1bf20:	mov	r0, r1
   1bf24:	str	r1, [sp, #36]	; 0x24
   1bf28:	bl	1e950 <__assert_fail@plt+0xd130>
   1bf2c:	ldr	ip, [r4, #44]	; 0x2c
   1bf30:	mov	r3, sl
   1bf34:	mov	r2, r9
   1bf38:	ldr	r1, [sp, #36]	; 0x24
   1bf3c:	str	ip, [sp, #16]
   1bf40:	ldr	ip, [r4, #40]	; 0x28
   1bf44:	str	r0, [sp, #32]
   1bf48:	stmib	sp, {r5, r8, ip}
   1bf4c:	ldr	ip, [r4]
   1bf50:	str	ip, [sp]
   1bf54:	bl	1a048 <__assert_fail@plt+0x8828>
   1bf58:	ldr	lr, [sp, #28]
   1bf5c:	cmp	r6, #0
   1bf60:	ldr	r0, [sp, #32]
   1bf64:	str	lr, [r7]
   1bf68:	strne	fp, [r6]
   1bf6c:	add	sp, sp, #44	; 0x2c
   1bf70:	ldrd	r4, [sp]
   1bf74:	ldrd	r6, [sp, #8]
   1bf78:	ldrd	r8, [sp, #16]
   1bf7c:	ldrd	sl, [sp, #24]
   1bf80:	add	sp, sp, #32
   1bf84:	pop	{pc}		; (ldr pc, [sp], #4)
   1bf88:	andeq	r3, r3, r8, ror r3
   1bf8c:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1bf90:	movw	r5, #12688	; 0x3190
   1bf94:	movt	r5, #3
   1bf98:	ldr	r3, [r5, #4]
   1bf9c:	strd	r6, [sp, #8]
   1bfa0:	str	r8, [sp, #16]
   1bfa4:	str	lr, [sp, #20]
   1bfa8:	ldr	r7, [r5]
   1bfac:	cmp	r3, #1
   1bfb0:	ble	1bfd4 <__assert_fail@plt+0xa7b4>
   1bfb4:	mov	r4, #1
   1bfb8:	add	r6, r7, #4
   1bfbc:	ldr	r0, [r6, r4, lsl #3]
   1bfc0:	add	r4, r4, #1
   1bfc4:	bl	171c0 <__assert_fail@plt+0x59a0>
   1bfc8:	ldr	r3, [r5, #4]
   1bfcc:	cmp	r3, r4
   1bfd0:	bgt	1bfbc <__assert_fail@plt+0xa79c>
   1bfd4:	ldr	r0, [r7, #4]
   1bfd8:	movw	r4, #12920	; 0x3278
   1bfdc:	movt	r4, #3
   1bfe0:	cmp	r0, r4
   1bfe4:	beq	1bff8 <__assert_fail@plt+0xa7d8>
   1bfe8:	bl	171c0 <__assert_fail@plt+0x59a0>
   1bfec:	mov	r3, #256	; 0x100
   1bff0:	str	r3, [r5, #8]
   1bff4:	str	r4, [r5, #12]
   1bff8:	ldr	r4, [pc, #44]	; 1c02c <__assert_fail@plt+0xa80c>
   1bffc:	cmp	r7, r4
   1c000:	beq	1c010 <__assert_fail@plt+0xa7f0>
   1c004:	mov	r0, r7
   1c008:	bl	171c0 <__assert_fail@plt+0x59a0>
   1c00c:	str	r4, [r5]
   1c010:	mov	r3, #1
   1c014:	ldrd	r6, [sp, #8]
   1c018:	str	r3, [r5, #4]
   1c01c:	ldrd	r4, [sp]
   1c020:	ldr	r8, [sp, #16]
   1c024:	add	sp, sp, #20
   1c028:	pop	{pc}		; (ldr pc, [sp], #4)
   1c02c:	muleq	r3, r8, r1
   1c030:	ldr	r3, [pc, #4]	; 1c03c <__assert_fail@plt+0xa81c>
   1c034:	mvn	r2, #0
   1c038:	b	1ba34 <__assert_fail@plt+0xa214>
   1c03c:	andeq	r3, r3, r8, ror r3
   1c040:	ldr	r3, [pc]	; 1c048 <__assert_fail@plt+0xa828>
   1c044:	b	1ba34 <__assert_fail@plt+0xa214>
   1c048:	andeq	r3, r3, r8, ror r3
   1c04c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1c050:	movw	r4, #12688	; 0x3190
   1c054:	movt	r4, #3
   1c058:	strd	r6, [sp, #8]
   1c05c:	strd	r8, [sp, #16]
   1c060:	strd	sl, [sp, #24]
   1c064:	mov	sl, r0
   1c068:	str	lr, [sp, #32]
   1c06c:	sub	sp, sp, #44	; 0x2c
   1c070:	bl	1167c <__errno_location@plt>
   1c074:	ldr	r3, [r0]
   1c078:	mov	r8, r0
   1c07c:	ldr	r2, [r4, #4]
   1c080:	ldr	r5, [r4]
   1c084:	str	r3, [sp, #28]
   1c088:	cmp	r2, #0
   1c08c:	bgt	1c0e8 <__assert_fail@plt+0xa8c8>
   1c090:	add	r3, r4, #8
   1c094:	str	r2, [sp, #36]	; 0x24
   1c098:	rsb	r2, r2, #1
   1c09c:	cmp	r5, r3
   1c0a0:	beq	1c1b4 <__assert_fail@plt+0xa994>
   1c0a4:	mov	r1, #8
   1c0a8:	mov	r0, r5
   1c0ac:	mvn	r3, #-2147483648	; 0x80000000
   1c0b0:	str	r1, [sp]
   1c0b4:	add	r1, sp, #36	; 0x24
   1c0b8:	bl	1ebf4 <__assert_fail@plt+0xd3d4>
   1c0bc:	mov	r5, r0
   1c0c0:	str	r0, [r4]
   1c0c4:	ldr	r0, [r4, #4]
   1c0c8:	mov	r1, #0
   1c0cc:	ldr	r2, [sp, #36]	; 0x24
   1c0d0:	sub	r2, r2, r0
   1c0d4:	add	r0, r5, r0, lsl #3
   1c0d8:	lsl	r2, r2, #3
   1c0dc:	bl	116ac <memset@plt>
   1c0e0:	ldr	r3, [sp, #36]	; 0x24
   1c0e4:	str	r3, [r4, #4]
   1c0e8:	movw	r4, #12920	; 0x3278
   1c0ec:	movt	r4, #3
   1c0f0:	ldr	r9, [r5]
   1c0f4:	add	fp, r4, #264	; 0x108
   1c0f8:	mvn	r3, #0
   1c0fc:	ldr	r7, [r4, #260]	; 0x104
   1c100:	mov	r2, sl
   1c104:	ldr	r6, [r5, #4]
   1c108:	str	fp, [sp, #8]
   1c10c:	mov	r1, r9
   1c110:	ldr	ip, [r4, #256]	; 0x100
   1c114:	orr	r7, r7, #1
   1c118:	ldr	lr, [r4, #300]	; 0x12c
   1c11c:	mov	r0, r6
   1c120:	str	ip, [sp]
   1c124:	str	r7, [sp, #4]
   1c128:	str	lr, [sp, #16]
   1c12c:	ldr	ip, [r4, #296]	; 0x128
   1c130:	str	ip, [sp, #12]
   1c134:	bl	1a048 <__assert_fail@plt+0x8828>
   1c138:	cmp	r9, r0
   1c13c:	bhi	1c18c <__assert_fail@plt+0xa96c>
   1c140:	add	r9, r0, #1
   1c144:	cmp	r6, r4
   1c148:	str	r9, [r5]
   1c14c:	beq	1c158 <__assert_fail@plt+0xa938>
   1c150:	mov	r0, r6
   1c154:	bl	171c0 <__assert_fail@plt+0x59a0>
   1c158:	mov	r0, r9
   1c15c:	bl	1e950 <__assert_fail@plt+0xd130>
   1c160:	ldr	r3, [r4, #256]	; 0x100
   1c164:	mov	r2, sl
   1c168:	mov	r1, r9
   1c16c:	mov	r6, r0
   1c170:	ldr	lr, [r4, #296]	; 0x128
   1c174:	ldr	ip, [r4, #300]	; 0x12c
   1c178:	str	r0, [r5, #4]
   1c17c:	stm	sp, {r3, r7, fp, lr}
   1c180:	mvn	r3, #0
   1c184:	str	ip, [sp, #16]
   1c188:	bl	1a048 <__assert_fail@plt+0x8828>
   1c18c:	ldr	r3, [sp, #28]
   1c190:	mov	r0, r6
   1c194:	str	r3, [r8]
   1c198:	add	sp, sp, #44	; 0x2c
   1c19c:	ldrd	r4, [sp]
   1c1a0:	ldrd	r6, [sp, #8]
   1c1a4:	ldrd	r8, [sp, #16]
   1c1a8:	ldrd	sl, [sp, #24]
   1c1ac:	add	sp, sp, #32
   1c1b0:	pop	{pc}		; (ldr pc, [sp], #4)
   1c1b4:	mov	r0, #8
   1c1b8:	mvn	r3, #-2147483648	; 0x80000000
   1c1bc:	add	r1, sp, #36	; 0x24
   1c1c0:	str	r0, [sp]
   1c1c4:	mov	r0, #0
   1c1c8:	bl	1ebf4 <__assert_fail@plt+0xd3d4>
   1c1cc:	ldrd	r2, [r4, #8]
   1c1d0:	mov	r5, r0
   1c1d4:	str	r0, [r4]
   1c1d8:	strd	r2, [r0]
   1c1dc:	b	1c0c4 <__assert_fail@plt+0xa8a4>
   1c1e0:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1c1e4:	movw	r4, #12688	; 0x3190
   1c1e8:	movt	r4, #3
   1c1ec:	strd	r6, [sp, #8]
   1c1f0:	strd	r8, [sp, #16]
   1c1f4:	strd	sl, [sp, #24]
   1c1f8:	mov	sl, r0
   1c1fc:	mov	fp, r1
   1c200:	str	lr, [sp, #32]
   1c204:	sub	sp, sp, #44	; 0x2c
   1c208:	bl	1167c <__errno_location@plt>
   1c20c:	ldr	r3, [r0]
   1c210:	mov	r8, r0
   1c214:	ldr	r2, [r4, #4]
   1c218:	ldr	r5, [r4]
   1c21c:	str	r3, [sp, #28]
   1c220:	cmp	r2, #0
   1c224:	bgt	1c280 <__assert_fail@plt+0xaa60>
   1c228:	add	r3, r4, #8
   1c22c:	str	r2, [sp, #36]	; 0x24
   1c230:	rsb	r2, r2, #1
   1c234:	cmp	r5, r3
   1c238:	beq	1c35c <__assert_fail@plt+0xab3c>
   1c23c:	mov	r1, #8
   1c240:	mov	r0, r5
   1c244:	mvn	r3, #-2147483648	; 0x80000000
   1c248:	str	r1, [sp]
   1c24c:	add	r1, sp, #36	; 0x24
   1c250:	bl	1ebf4 <__assert_fail@plt+0xd3d4>
   1c254:	mov	r5, r0
   1c258:	str	r0, [r4]
   1c25c:	ldr	r0, [r4, #4]
   1c260:	mov	r1, #0
   1c264:	ldr	r2, [sp, #36]	; 0x24
   1c268:	sub	r2, r2, r0
   1c26c:	add	r0, r5, r0, lsl #3
   1c270:	lsl	r2, r2, #3
   1c274:	bl	116ac <memset@plt>
   1c278:	ldr	r3, [sp, #36]	; 0x24
   1c27c:	str	r3, [r4, #4]
   1c280:	movw	r4, #12920	; 0x3278
   1c284:	movt	r4, #3
   1c288:	ldr	r9, [r5]
   1c28c:	add	r0, r4, #264	; 0x108
   1c290:	mov	r3, fp
   1c294:	ldr	r7, [r4, #260]	; 0x104
   1c298:	mov	r2, sl
   1c29c:	ldr	r6, [r5, #4]
   1c2a0:	str	r0, [sp, #8]
   1c2a4:	mov	r1, r9
   1c2a8:	ldr	ip, [r4, #256]	; 0x100
   1c2ac:	orr	r7, r7, #1
   1c2b0:	ldr	lr, [r4, #300]	; 0x12c
   1c2b4:	mov	r0, r6
   1c2b8:	str	ip, [sp]
   1c2bc:	str	r7, [sp, #4]
   1c2c0:	str	lr, [sp, #16]
   1c2c4:	ldr	ip, [r4, #296]	; 0x128
   1c2c8:	str	ip, [sp, #12]
   1c2cc:	bl	1a048 <__assert_fail@plt+0x8828>
   1c2d0:	cmp	r9, r0
   1c2d4:	bhi	1c334 <__assert_fail@plt+0xab14>
   1c2d8:	add	r9, r0, #1
   1c2dc:	cmp	r6, r4
   1c2e0:	str	r9, [r5]
   1c2e4:	beq	1c2f0 <__assert_fail@plt+0xaad0>
   1c2e8:	mov	r0, r6
   1c2ec:	bl	171c0 <__assert_fail@plt+0x59a0>
   1c2f0:	mov	r0, r9
   1c2f4:	bl	1e950 <__assert_fail@plt+0xd130>
   1c2f8:	ldr	ip, [r4, #256]	; 0x100
   1c2fc:	mov	r1, r9
   1c300:	mov	r3, fp
   1c304:	mov	r2, sl
   1c308:	mov	r6, r0
   1c30c:	ldr	r9, [r4, #296]	; 0x128
   1c310:	ldr	lr, [r4, #300]	; 0x12c
   1c314:	str	r0, [r5, #4]
   1c318:	str	ip, [sp]
   1c31c:	ldr	ip, [pc, #100]	; 1c388 <__assert_fail@plt+0xab68>
   1c320:	str	r7, [sp, #4]
   1c324:	str	ip, [sp, #8]
   1c328:	str	r9, [sp, #12]
   1c32c:	str	lr, [sp, #16]
   1c330:	bl	1a048 <__assert_fail@plt+0x8828>
   1c334:	ldr	r3, [sp, #28]
   1c338:	mov	r0, r6
   1c33c:	str	r3, [r8]
   1c340:	add	sp, sp, #44	; 0x2c
   1c344:	ldrd	r4, [sp]
   1c348:	ldrd	r6, [sp, #8]
   1c34c:	ldrd	r8, [sp, #16]
   1c350:	ldrd	sl, [sp, #24]
   1c354:	add	sp, sp, #32
   1c358:	pop	{pc}		; (ldr pc, [sp], #4)
   1c35c:	mov	r0, #8
   1c360:	mvn	r3, #-2147483648	; 0x80000000
   1c364:	add	r1, sp, #36	; 0x24
   1c368:	str	r0, [sp]
   1c36c:	mov	r0, #0
   1c370:	bl	1ebf4 <__assert_fail@plt+0xd3d4>
   1c374:	ldrd	r2, [r4, #8]
   1c378:	mov	r5, r0
   1c37c:	str	r0, [r4]
   1c380:	strd	r2, [r0]
   1c384:	b	1c25c <__assert_fail@plt+0xaa3c>
   1c388:	andeq	r3, r3, r0, lsl #7
   1c38c:	strd	r4, [sp, #-20]!	; 0xffffffec
   1c390:	mov	r4, #0
   1c394:	mov	r5, #0
   1c398:	strd	r6, [sp, #8]
   1c39c:	cmp	r1, #10
   1c3a0:	str	lr, [sp, #16]
   1c3a4:	sub	sp, sp, #100	; 0x64
   1c3a8:	strd	r4, [sp, #48]	; 0x30
   1c3ac:	beq	1c3f4 <__assert_fail@plt+0xabd4>
   1c3b0:	mov	r3, sp
   1c3b4:	strd	r4, [sp, #8]
   1c3b8:	str	r1, [sp, #48]	; 0x30
   1c3bc:	mov	r1, r2
   1c3c0:	mvn	r2, #0
   1c3c4:	ldrd	r6, [sp, #48]	; 0x30
   1c3c8:	strd	r6, [sp]
   1c3cc:	strd	r4, [sp, #16]
   1c3d0:	strd	r4, [sp, #24]
   1c3d4:	strd	r4, [sp, #32]
   1c3d8:	strd	r4, [sp, #40]	; 0x28
   1c3dc:	bl	1ba34 <__assert_fail@plt+0xa214>
   1c3e0:	add	sp, sp, #100	; 0x64
   1c3e4:	ldrd	r4, [sp]
   1c3e8:	ldrd	r6, [sp, #8]
   1c3ec:	add	sp, sp, #16
   1c3f0:	pop	{pc}		; (ldr pc, [sp], #4)
   1c3f4:	bl	117f0 <abort@plt>
   1c3f8:	strd	r4, [sp, #-20]!	; 0xffffffec
   1c3fc:	mov	r4, #0
   1c400:	mov	r5, #0
   1c404:	strd	r6, [sp, #8]
   1c408:	cmp	r1, #10
   1c40c:	str	lr, [sp, #16]
   1c410:	sub	sp, sp, #100	; 0x64
   1c414:	strd	r4, [sp, #48]	; 0x30
   1c418:	beq	1c464 <__assert_fail@plt+0xac44>
   1c41c:	mov	ip, r2
   1c420:	mov	r2, r3
   1c424:	strd	r4, [sp, #8]
   1c428:	str	r1, [sp, #48]	; 0x30
   1c42c:	mov	r3, sp
   1c430:	mov	r1, ip
   1c434:	ldrd	r6, [sp, #48]	; 0x30
   1c438:	strd	r6, [sp]
   1c43c:	strd	r4, [sp, #16]
   1c440:	strd	r4, [sp, #24]
   1c444:	strd	r4, [sp, #32]
   1c448:	strd	r4, [sp, #40]	; 0x28
   1c44c:	bl	1ba34 <__assert_fail@plt+0xa214>
   1c450:	add	sp, sp, #100	; 0x64
   1c454:	ldrd	r4, [sp]
   1c458:	ldrd	r6, [sp, #8]
   1c45c:	add	sp, sp, #16
   1c460:	pop	{pc}		; (ldr pc, [sp], #4)
   1c464:	bl	117f0 <abort@plt>
   1c468:	mov	r2, #0
   1c46c:	mov	r3, #0
   1c470:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1c474:	strd	r6, [sp, #8]
   1c478:	cmp	r0, #10
   1c47c:	strd	r8, [sp, #16]
   1c480:	strd	sl, [sp, #24]
   1c484:	str	lr, [sp, #32]
   1c488:	sub	sp, sp, #124	; 0x7c
   1c48c:	strd	r2, [sp, #72]	; 0x48
   1c490:	strd	r2, [sp, #80]	; 0x50
   1c494:	strd	r2, [sp, #88]	; 0x58
   1c498:	strd	r2, [sp, #96]	; 0x60
   1c49c:	strd	r2, [sp, #104]	; 0x68
   1c4a0:	strd	r2, [sp, #112]	; 0x70
   1c4a4:	beq	1c648 <__assert_fail@plt+0xae28>
   1c4a8:	mov	r6, r1
   1c4ac:	movw	r4, #12688	; 0x3190
   1c4b0:	movt	r4, #3
   1c4b4:	str	r0, [sp, #72]	; 0x48
   1c4b8:	ldrd	r0, [sp, #72]	; 0x48
   1c4bc:	strd	r0, [sp, #24]
   1c4c0:	strd	r2, [sp, #32]
   1c4c4:	strd	r2, [sp, #40]	; 0x28
   1c4c8:	strd	r2, [sp, #48]	; 0x30
   1c4cc:	strd	r2, [sp, #56]	; 0x38
   1c4d0:	strd	r2, [sp, #64]	; 0x40
   1c4d4:	bl	1167c <__errno_location@plt>
   1c4d8:	mov	r8, r0
   1c4dc:	ldr	r5, [r4]
   1c4e0:	ldr	r2, [r4, #4]
   1c4e4:	ldr	r9, [r0]
   1c4e8:	cmp	r2, #0
   1c4ec:	bgt	1c548 <__assert_fail@plt+0xad28>
   1c4f0:	add	r3, r4, #8
   1c4f4:	str	r2, [sp, #72]	; 0x48
   1c4f8:	rsb	r2, r2, #1
   1c4fc:	cmp	r5, r3
   1c500:	beq	1c61c <__assert_fail@plt+0xadfc>
   1c504:	mov	r3, #8
   1c508:	mov	r0, r5
   1c50c:	add	r1, sp, #72	; 0x48
   1c510:	str	r3, [sp]
   1c514:	mvn	r3, #-2147483648	; 0x80000000
   1c518:	bl	1ebf4 <__assert_fail@plt+0xd3d4>
   1c51c:	mov	r5, r0
   1c520:	str	r0, [r4]
   1c524:	ldr	r0, [r4, #4]
   1c528:	mov	r1, #0
   1c52c:	ldr	r2, [sp, #72]	; 0x48
   1c530:	sub	r2, r2, r0
   1c534:	add	r0, r5, r0, lsl #3
   1c538:	lsl	r2, r2, #3
   1c53c:	bl	116ac <memset@plt>
   1c540:	ldr	r3, [sp, #72]	; 0x48
   1c544:	str	r3, [r4, #4]
   1c548:	ldr	sl, [r5]
   1c54c:	add	r0, sp, #32
   1c550:	mvn	r3, #0
   1c554:	mov	r2, r6
   1c558:	ldr	r7, [sp, #28]
   1c55c:	ldr	r4, [r5, #4]
   1c560:	mov	r1, sl
   1c564:	str	r0, [sp, #8]
   1c568:	ldr	lr, [sp, #24]
   1c56c:	orr	r7, r7, #1
   1c570:	ldr	ip, [sp, #64]	; 0x40
   1c574:	mov	r0, r4
   1c578:	ldr	fp, [sp, #68]	; 0x44
   1c57c:	str	lr, [sp]
   1c580:	str	r7, [sp, #4]
   1c584:	str	ip, [sp, #12]
   1c588:	str	fp, [sp, #16]
   1c58c:	bl	1a048 <__assert_fail@plt+0x8828>
   1c590:	cmp	sl, r0
   1c594:	bhi	1c5f8 <__assert_fail@plt+0xadd8>
   1c598:	add	sl, r0, #1
   1c59c:	movw	r3, #12920	; 0x3278
   1c5a0:	movt	r3, #3
   1c5a4:	cmp	r4, r3
   1c5a8:	str	sl, [r5]
   1c5ac:	beq	1c5b8 <__assert_fail@plt+0xad98>
   1c5b0:	mov	r0, r4
   1c5b4:	bl	171c0 <__assert_fail@plt+0x59a0>
   1c5b8:	mov	r0, sl
   1c5bc:	bl	1e950 <__assert_fail@plt+0xd130>
   1c5c0:	ldr	r3, [sp, #24]
   1c5c4:	mov	r2, r6
   1c5c8:	mov	r1, sl
   1c5cc:	mov	r4, r0
   1c5d0:	ldr	lr, [sp, #64]	; 0x40
   1c5d4:	ldr	ip, [sp, #68]	; 0x44
   1c5d8:	str	r0, [r5, #4]
   1c5dc:	add	r5, sp, #32
   1c5e0:	stm	sp, {r3, r7}
   1c5e4:	mvn	r3, #0
   1c5e8:	str	r5, [sp, #8]
   1c5ec:	str	lr, [sp, #12]
   1c5f0:	str	ip, [sp, #16]
   1c5f4:	bl	1a048 <__assert_fail@plt+0x8828>
   1c5f8:	mov	r0, r4
   1c5fc:	str	r9, [r8]
   1c600:	add	sp, sp, #124	; 0x7c
   1c604:	ldrd	r4, [sp]
   1c608:	ldrd	r6, [sp, #8]
   1c60c:	ldrd	r8, [sp, #16]
   1c610:	ldrd	sl, [sp, #24]
   1c614:	add	sp, sp, #32
   1c618:	pop	{pc}		; (ldr pc, [sp], #4)
   1c61c:	mov	r0, #8
   1c620:	mvn	r3, #-2147483648	; 0x80000000
   1c624:	add	r1, sp, #72	; 0x48
   1c628:	str	r0, [sp]
   1c62c:	mov	r0, #0
   1c630:	bl	1ebf4 <__assert_fail@plt+0xd3d4>
   1c634:	ldrd	r2, [r4, #8]
   1c638:	mov	r5, r0
   1c63c:	str	r0, [r4]
   1c640:	strd	r2, [r0]
   1c644:	b	1c524 <__assert_fail@plt+0xad04>
   1c648:	bl	117f0 <abort@plt>
   1c64c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1c650:	cmp	r0, #10
   1c654:	strd	r6, [sp, #8]
   1c658:	mov	r6, #0
   1c65c:	mov	r7, #0
   1c660:	strd	r8, [sp, #16]
   1c664:	strd	sl, [sp, #24]
   1c668:	str	lr, [sp, #32]
   1c66c:	sub	sp, sp, #124	; 0x7c
   1c670:	strd	r6, [sp, #72]	; 0x48
   1c674:	strd	r6, [sp, #80]	; 0x50
   1c678:	strd	r6, [sp, #88]	; 0x58
   1c67c:	strd	r6, [sp, #96]	; 0x60
   1c680:	strd	r6, [sp, #104]	; 0x68
   1c684:	strd	r6, [sp, #112]	; 0x70
   1c688:	beq	1c834 <__assert_fail@plt+0xb014>
   1c68c:	mov	sl, r2
   1c690:	movw	r5, #12688	; 0x3190
   1c694:	movt	r5, #3
   1c698:	str	r0, [sp, #72]	; 0x48
   1c69c:	mov	r9, r1
   1c6a0:	ldrd	r2, [sp, #72]	; 0x48
   1c6a4:	strd	r2, [sp, #24]
   1c6a8:	strd	r6, [sp, #32]
   1c6ac:	strd	r6, [sp, #40]	; 0x28
   1c6b0:	strd	r6, [sp, #48]	; 0x30
   1c6b4:	strd	r6, [sp, #56]	; 0x38
   1c6b8:	strd	r6, [sp, #64]	; 0x40
   1c6bc:	bl	1167c <__errno_location@plt>
   1c6c0:	mov	r7, r0
   1c6c4:	ldr	r4, [r5]
   1c6c8:	ldr	r2, [r5, #4]
   1c6cc:	ldr	fp, [r0]
   1c6d0:	cmp	r2, #0
   1c6d4:	bgt	1c730 <__assert_fail@plt+0xaf10>
   1c6d8:	add	r3, r5, #8
   1c6dc:	str	r2, [sp, #72]	; 0x48
   1c6e0:	rsb	r2, r2, #1
   1c6e4:	cmp	r4, r3
   1c6e8:	beq	1c808 <__assert_fail@plt+0xafe8>
   1c6ec:	mov	r3, #8
   1c6f0:	mov	r0, r4
   1c6f4:	add	r1, sp, #72	; 0x48
   1c6f8:	str	r3, [sp]
   1c6fc:	mvn	r3, #-2147483648	; 0x80000000
   1c700:	bl	1ebf4 <__assert_fail@plt+0xd3d4>
   1c704:	mov	r4, r0
   1c708:	str	r0, [r5]
   1c70c:	ldr	r0, [r5, #4]
   1c710:	mov	r1, #0
   1c714:	ldr	r2, [sp, #72]	; 0x48
   1c718:	sub	r2, r2, r0
   1c71c:	add	r0, r4, r0, lsl #3
   1c720:	lsl	r2, r2, #3
   1c724:	bl	116ac <memset@plt>
   1c728:	ldr	r3, [sp, #72]	; 0x48
   1c72c:	str	r3, [r5, #4]
   1c730:	ldr	ip, [sp, #24]
   1c734:	add	r0, sp, #32
   1c738:	mov	r3, sl
   1c73c:	mov	r2, r9
   1c740:	ldr	r6, [sp, #28]
   1c744:	ldr	r8, [r4]
   1c748:	ldr	r5, [r4, #4]
   1c74c:	str	ip, [sp]
   1c750:	orr	r6, r6, #1
   1c754:	ldr	ip, [sp, #64]	; 0x40
   1c758:	mov	r1, r8
   1c75c:	str	r6, [sp, #4]
   1c760:	ldr	lr, [sp, #68]	; 0x44
   1c764:	str	r0, [sp, #8]
   1c768:	mov	r0, r5
   1c76c:	str	ip, [sp, #12]
   1c770:	str	lr, [sp, #16]
   1c774:	bl	1a048 <__assert_fail@plt+0x8828>
   1c778:	cmp	r8, r0
   1c77c:	bhi	1c7e4 <__assert_fail@plt+0xafc4>
   1c780:	add	r8, r0, #1
   1c784:	movw	r3, #12920	; 0x3278
   1c788:	movt	r3, #3
   1c78c:	cmp	r5, r3
   1c790:	str	r8, [r4]
   1c794:	beq	1c7a0 <__assert_fail@plt+0xaf80>
   1c798:	mov	r0, r5
   1c79c:	bl	171c0 <__assert_fail@plt+0x59a0>
   1c7a0:	mov	r0, r8
   1c7a4:	bl	1e950 <__assert_fail@plt+0xd130>
   1c7a8:	ldr	lr, [sp, #24]
   1c7ac:	mov	r1, r8
   1c7b0:	mov	r3, sl
   1c7b4:	mov	r2, r9
   1c7b8:	mov	r5, r0
   1c7bc:	ldr	r8, [sp, #64]	; 0x40
   1c7c0:	ldr	ip, [sp, #68]	; 0x44
   1c7c4:	str	r0, [r4, #4]
   1c7c8:	str	lr, [sp]
   1c7cc:	add	lr, sp, #32
   1c7d0:	str	r6, [sp, #4]
   1c7d4:	str	lr, [sp, #8]
   1c7d8:	str	r8, [sp, #12]
   1c7dc:	str	ip, [sp, #16]
   1c7e0:	bl	1a048 <__assert_fail@plt+0x8828>
   1c7e4:	mov	r0, r5
   1c7e8:	str	fp, [r7]
   1c7ec:	add	sp, sp, #124	; 0x7c
   1c7f0:	ldrd	r4, [sp]
   1c7f4:	ldrd	r6, [sp, #8]
   1c7f8:	ldrd	r8, [sp, #16]
   1c7fc:	ldrd	sl, [sp, #24]
   1c800:	add	sp, sp, #32
   1c804:	pop	{pc}		; (ldr pc, [sp], #4)
   1c808:	mov	r0, #8
   1c80c:	mvn	r3, #-2147483648	; 0x80000000
   1c810:	add	r1, sp, #72	; 0x48
   1c814:	str	r0, [sp]
   1c818:	mov	r0, #0
   1c81c:	bl	1ebf4 <__assert_fail@plt+0xd3d4>
   1c820:	ldrd	r2, [r5, #8]
   1c824:	mov	r4, r0
   1c828:	str	r0, [r5]
   1c82c:	strd	r2, [r0]
   1c830:	b	1c70c <__assert_fail@plt+0xaeec>
   1c834:	bl	117f0 <abort@plt>
   1c838:	ldr	r3, [pc, #492]	; 1ca2c <__assert_fail@plt+0xb20c>
   1c83c:	lsr	ip, r2, #5
   1c840:	and	r2, r2, #31
   1c844:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1c848:	movw	r5, #12688	; 0x3190
   1c84c:	movt	r5, #3
   1c850:	strd	r6, [sp, #8]
   1c854:	strd	r8, [sp, #16]
   1c858:	strd	sl, [sp, #24]
   1c85c:	mov	sl, r0
   1c860:	mov	fp, r1
   1c864:	ldrd	r0, [r3]
   1c868:	str	lr, [sp, #32]
   1c86c:	sub	sp, sp, #92	; 0x5c
   1c870:	ldrd	r8, [r3, #8]
   1c874:	add	r6, sp, #48	; 0x30
   1c878:	strd	r0, [sp, #40]	; 0x28
   1c87c:	ldrd	r0, [r3, #16]
   1c880:	strd	r8, [sp, #48]	; 0x30
   1c884:	ldrd	r8, [r3, #24]
   1c888:	strd	r0, [sp, #56]	; 0x38
   1c88c:	ldrd	r0, [r3, #32]
   1c890:	strd	r8, [sp, #64]	; 0x40
   1c894:	ldrd	r8, [r3, #40]	; 0x28
   1c898:	strd	r0, [sp, #72]	; 0x48
   1c89c:	strd	r8, [sp, #80]	; 0x50
   1c8a0:	ldr	r3, [r6, ip, lsl #2]
   1c8a4:	mvn	r1, r3, lsr r2
   1c8a8:	and	r1, r1, #1
   1c8ac:	eor	r2, r3, r1, lsl r2
   1c8b0:	str	r2, [r6, ip, lsl #2]
   1c8b4:	bl	1167c <__errno_location@plt>
   1c8b8:	ldr	r3, [r0]
   1c8bc:	mov	r8, r0
   1c8c0:	ldr	r2, [r5, #4]
   1c8c4:	ldr	r4, [r5]
   1c8c8:	str	r3, [sp, #28]
   1c8cc:	cmp	r2, #0
   1c8d0:	bgt	1c92c <__assert_fail@plt+0xb10c>
   1c8d4:	add	r3, r5, #8
   1c8d8:	str	r2, [sp, #36]	; 0x24
   1c8dc:	rsb	r2, r2, #1
   1c8e0:	cmp	r4, r3
   1c8e4:	beq	1ca00 <__assert_fail@plt+0xb1e0>
   1c8e8:	mov	r1, #8
   1c8ec:	mov	r0, r4
   1c8f0:	mvn	r3, #-2147483648	; 0x80000000
   1c8f4:	str	r1, [sp]
   1c8f8:	add	r1, sp, #36	; 0x24
   1c8fc:	bl	1ebf4 <__assert_fail@plt+0xd3d4>
   1c900:	mov	r4, r0
   1c904:	str	r0, [r5]
   1c908:	ldr	r0, [r5, #4]
   1c90c:	mov	r1, #0
   1c910:	ldr	r2, [sp, #36]	; 0x24
   1c914:	sub	r2, r2, r0
   1c918:	add	r0, r4, r0, lsl #3
   1c91c:	lsl	r2, r2, #3
   1c920:	bl	116ac <memset@plt>
   1c924:	ldr	r3, [sp, #36]	; 0x24
   1c928:	str	r3, [r5, #4]
   1c92c:	ldr	ip, [sp, #40]	; 0x28
   1c930:	mov	r3, fp
   1c934:	mov	r2, sl
   1c938:	ldr	r7, [sp, #44]	; 0x2c
   1c93c:	ldr	r9, [r4]
   1c940:	ldr	r5, [r4, #4]
   1c944:	str	ip, [sp]
   1c948:	orr	r7, r7, #1
   1c94c:	ldr	ip, [sp, #80]	; 0x50
   1c950:	mov	r1, r9
   1c954:	str	r7, [sp, #4]
   1c958:	ldr	lr, [sp, #84]	; 0x54
   1c95c:	mov	r0, r5
   1c960:	str	r6, [sp, #8]
   1c964:	str	ip, [sp, #12]
   1c968:	str	lr, [sp, #16]
   1c96c:	bl	1a048 <__assert_fail@plt+0x8828>
   1c970:	cmp	r9, r0
   1c974:	bhi	1c9d8 <__assert_fail@plt+0xb1b8>
   1c978:	add	r9, r0, #1
   1c97c:	movw	r3, #12920	; 0x3278
   1c980:	movt	r3, #3
   1c984:	cmp	r5, r3
   1c988:	str	r9, [r4]
   1c98c:	beq	1c998 <__assert_fail@plt+0xb178>
   1c990:	mov	r0, r5
   1c994:	bl	171c0 <__assert_fail@plt+0x59a0>
   1c998:	mov	r0, r9
   1c99c:	bl	1e950 <__assert_fail@plt+0xd130>
   1c9a0:	mov	r1, r9
   1c9a4:	ldr	ip, [sp, #40]	; 0x28
   1c9a8:	mov	r3, fp
   1c9ac:	mov	r2, sl
   1c9b0:	mov	r5, r0
   1c9b4:	ldr	r9, [sp, #80]	; 0x50
   1c9b8:	ldr	lr, [sp, #84]	; 0x54
   1c9bc:	str	r0, [r4, #4]
   1c9c0:	str	ip, [sp]
   1c9c4:	str	r7, [sp, #4]
   1c9c8:	str	r6, [sp, #8]
   1c9cc:	str	r9, [sp, #12]
   1c9d0:	str	lr, [sp, #16]
   1c9d4:	bl	1a048 <__assert_fail@plt+0x8828>
   1c9d8:	ldr	r3, [sp, #28]
   1c9dc:	mov	r0, r5
   1c9e0:	str	r3, [r8]
   1c9e4:	add	sp, sp, #92	; 0x5c
   1c9e8:	ldrd	r4, [sp]
   1c9ec:	ldrd	r6, [sp, #8]
   1c9f0:	ldrd	r8, [sp, #16]
   1c9f4:	ldrd	sl, [sp, #24]
   1c9f8:	add	sp, sp, #32
   1c9fc:	pop	{pc}		; (ldr pc, [sp], #4)
   1ca00:	mov	r0, #8
   1ca04:	mvn	r3, #-2147483648	; 0x80000000
   1ca08:	add	r1, sp, #36	; 0x24
   1ca0c:	str	r0, [sp]
   1ca10:	mov	r0, #0
   1ca14:	bl	1ebf4 <__assert_fail@plt+0xd3d4>
   1ca18:	ldrd	r2, [r5, #8]
   1ca1c:	mov	r4, r0
   1ca20:	str	r0, [r5]
   1ca24:	strd	r2, [r0]
   1ca28:	b	1c908 <__assert_fail@plt+0xb0e8>
   1ca2c:	andeq	r3, r3, r8, ror r3
   1ca30:	ldr	ip, [pc, #476]	; 1cc14 <__assert_fail@plt+0xb3f4>
   1ca34:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1ca38:	movw	r4, #12688	; 0x3190
   1ca3c:	movt	r4, #3
   1ca40:	ldrd	r2, [ip, #8]
   1ca44:	strd	r6, [sp, #8]
   1ca48:	lsr	r7, r1, #5
   1ca4c:	mov	r6, r0
   1ca50:	strd	r8, [sp, #16]
   1ca54:	str	lr, [sp, #32]
   1ca58:	and	lr, r1, #31
   1ca5c:	ldrd	r0, [ip]
   1ca60:	strd	sl, [sp, #24]
   1ca64:	sub	sp, sp, #84	; 0x54
   1ca68:	add	r5, sp, #40	; 0x28
   1ca6c:	strd	r0, [sp, #32]
   1ca70:	strd	r2, [sp, #40]	; 0x28
   1ca74:	ldrd	r0, [ip, #16]
   1ca78:	ldrd	r2, [ip, #24]
   1ca7c:	strd	r0, [sp, #48]	; 0x30
   1ca80:	ldrd	r0, [ip, #32]
   1ca84:	strd	r2, [sp, #56]	; 0x38
   1ca88:	ldrd	r2, [ip, #40]	; 0x28
   1ca8c:	strd	r0, [sp, #64]	; 0x40
   1ca90:	strd	r2, [sp, #72]	; 0x48
   1ca94:	ldr	r1, [r5, r7, lsl #2]
   1ca98:	mvn	r3, r1, lsr lr
   1ca9c:	and	r3, r3, #1
   1caa0:	eor	r1, r1, r3, lsl lr
   1caa4:	str	r1, [r5, r7, lsl #2]
   1caa8:	bl	1167c <__errno_location@plt>
   1caac:	mov	r9, r0
   1cab0:	ldr	sl, [r0]
   1cab4:	ldr	r2, [r4, #4]
   1cab8:	ldr	r7, [r4]
   1cabc:	cmp	r2, #0
   1cac0:	bgt	1cb1c <__assert_fail@plt+0xb2fc>
   1cac4:	add	r3, r4, #8
   1cac8:	str	r2, [sp, #28]
   1cacc:	rsb	r2, r2, #1
   1cad0:	cmp	r7, r3
   1cad4:	beq	1cbe8 <__assert_fail@plt+0xb3c8>
   1cad8:	mov	r1, #8
   1cadc:	mov	r0, r7
   1cae0:	mvn	r3, #-2147483648	; 0x80000000
   1cae4:	str	r1, [sp]
   1cae8:	add	r1, sp, #28
   1caec:	bl	1ebf4 <__assert_fail@plt+0xd3d4>
   1caf0:	mov	r7, r0
   1caf4:	str	r0, [r4]
   1caf8:	ldr	r0, [r4, #4]
   1cafc:	mov	r1, #0
   1cb00:	ldr	r2, [sp, #28]
   1cb04:	sub	r2, r2, r0
   1cb08:	add	r0, r7, r0, lsl #3
   1cb0c:	lsl	r2, r2, #3
   1cb10:	bl	116ac <memset@plt>
   1cb14:	ldr	r3, [sp, #28]
   1cb18:	str	r3, [r4, #4]
   1cb1c:	ldr	ip, [sp, #32]
   1cb20:	mvn	r3, #0
   1cb24:	mov	r2, r6
   1cb28:	ldr	r8, [sp, #36]	; 0x24
   1cb2c:	ldr	fp, [r7]
   1cb30:	ldr	r4, [r7, #4]
   1cb34:	str	ip, [sp]
   1cb38:	orr	r8, r8, #1
   1cb3c:	ldr	ip, [sp, #72]	; 0x48
   1cb40:	mov	r1, fp
   1cb44:	str	r8, [sp, #4]
   1cb48:	ldr	lr, [sp, #76]	; 0x4c
   1cb4c:	mov	r0, r4
   1cb50:	str	r5, [sp, #8]
   1cb54:	str	ip, [sp, #12]
   1cb58:	str	lr, [sp, #16]
   1cb5c:	bl	1a048 <__assert_fail@plt+0x8828>
   1cb60:	cmp	fp, r0
   1cb64:	bhi	1cbc4 <__assert_fail@plt+0xb3a4>
   1cb68:	add	fp, r0, #1
   1cb6c:	movw	r3, #12920	; 0x3278
   1cb70:	movt	r3, #3
   1cb74:	cmp	r4, r3
   1cb78:	str	fp, [r7]
   1cb7c:	beq	1cb88 <__assert_fail@plt+0xb368>
   1cb80:	mov	r0, r4
   1cb84:	bl	171c0 <__assert_fail@plt+0x59a0>
   1cb88:	mov	r0, fp
   1cb8c:	bl	1e950 <__assert_fail@plt+0xd130>
   1cb90:	ldr	r3, [sp, #32]
   1cb94:	mov	r2, r6
   1cb98:	mov	r1, fp
   1cb9c:	mov	r4, r0
   1cba0:	ldr	lr, [sp, #72]	; 0x48
   1cba4:	ldr	ip, [sp, #76]	; 0x4c
   1cba8:	str	r0, [r7, #4]
   1cbac:	stm	sp, {r3, r8}
   1cbb0:	mvn	r3, #0
   1cbb4:	str	r5, [sp, #8]
   1cbb8:	str	lr, [sp, #12]
   1cbbc:	str	ip, [sp, #16]
   1cbc0:	bl	1a048 <__assert_fail@plt+0x8828>
   1cbc4:	mov	r0, r4
   1cbc8:	str	sl, [r9]
   1cbcc:	add	sp, sp, #84	; 0x54
   1cbd0:	ldrd	r4, [sp]
   1cbd4:	ldrd	r6, [sp, #8]
   1cbd8:	ldrd	r8, [sp, #16]
   1cbdc:	ldrd	sl, [sp, #24]
   1cbe0:	add	sp, sp, #32
   1cbe4:	pop	{pc}		; (ldr pc, [sp], #4)
   1cbe8:	mov	r0, #8
   1cbec:	mvn	r3, #-2147483648	; 0x80000000
   1cbf0:	add	r1, sp, #28
   1cbf4:	str	r0, [sp]
   1cbf8:	mov	r0, #0
   1cbfc:	bl	1ebf4 <__assert_fail@plt+0xd3d4>
   1cc00:	ldrd	r2, [r4, #8]
   1cc04:	mov	r7, r0
   1cc08:	str	r0, [r4]
   1cc0c:	strd	r2, [r0]
   1cc10:	b	1caf8 <__assert_fail@plt+0xb2d8>
   1cc14:	andeq	r3, r3, r8, ror r3
   1cc18:	ldr	ip, [pc, #472]	; 1cdf8 <__assert_fail@plt+0xb5d8>
   1cc1c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1cc20:	mov	r5, r0
   1cc24:	movw	r4, #12688	; 0x3190
   1cc28:	movt	r4, #3
   1cc2c:	ldrd	r2, [ip]
   1cc30:	ldrd	r0, [ip, #8]
   1cc34:	strd	r6, [sp, #8]
   1cc38:	strd	r8, [sp, #16]
   1cc3c:	strd	sl, [sp, #24]
   1cc40:	str	lr, [sp, #32]
   1cc44:	sub	sp, sp, #84	; 0x54
   1cc48:	strd	r2, [sp, #32]
   1cc4c:	strd	r0, [sp, #40]	; 0x28
   1cc50:	ldr	r6, [sp, #44]	; 0x2c
   1cc54:	ldrd	r2, [ip, #16]
   1cc58:	ldrd	r0, [ip, #24]
   1cc5c:	mvn	lr, r6
   1cc60:	and	lr, lr, #67108864	; 0x4000000
   1cc64:	eor	lr, lr, r6
   1cc68:	ldrd	r6, [ip, #40]	; 0x28
   1cc6c:	strd	r2, [sp, #48]	; 0x30
   1cc70:	ldrd	r2, [ip, #32]
   1cc74:	str	lr, [sp, #44]	; 0x2c
   1cc78:	strd	r0, [sp, #56]	; 0x38
   1cc7c:	strd	r2, [sp, #64]	; 0x40
   1cc80:	strd	r6, [sp, #72]	; 0x48
   1cc84:	bl	1167c <__errno_location@plt>
   1cc88:	mov	r8, r0
   1cc8c:	ldr	r9, [r0]
   1cc90:	ldr	r2, [r4, #4]
   1cc94:	ldr	r6, [r4]
   1cc98:	cmp	r2, #0
   1cc9c:	bgt	1ccf8 <__assert_fail@plt+0xb4d8>
   1cca0:	add	r3, r4, #8
   1cca4:	str	r2, [sp, #28]
   1cca8:	rsb	r2, r2, #1
   1ccac:	cmp	r6, r3
   1ccb0:	beq	1cdcc <__assert_fail@plt+0xb5ac>
   1ccb4:	mov	r1, #8
   1ccb8:	mov	r0, r6
   1ccbc:	mvn	r3, #-2147483648	; 0x80000000
   1ccc0:	str	r1, [sp]
   1ccc4:	add	r1, sp, #28
   1ccc8:	bl	1ebf4 <__assert_fail@plt+0xd3d4>
   1cccc:	mov	r6, r0
   1ccd0:	str	r0, [r4]
   1ccd4:	ldr	r0, [r4, #4]
   1ccd8:	mov	r1, #0
   1ccdc:	ldr	r2, [sp, #28]
   1cce0:	sub	r2, r2, r0
   1cce4:	add	r0, r6, r0, lsl #3
   1cce8:	lsl	r2, r2, #3
   1ccec:	bl	116ac <memset@plt>
   1ccf0:	ldr	r3, [sp, #28]
   1ccf4:	str	r3, [r4, #4]
   1ccf8:	ldr	sl, [r6]
   1ccfc:	add	r0, sp, #40	; 0x28
   1cd00:	mvn	r3, #0
   1cd04:	mov	r2, r5
   1cd08:	ldr	r7, [sp, #36]	; 0x24
   1cd0c:	ldr	r4, [r6, #4]
   1cd10:	mov	r1, sl
   1cd14:	str	r0, [sp, #8]
   1cd18:	ldr	lr, [sp, #32]
   1cd1c:	orr	r7, r7, #1
   1cd20:	ldr	ip, [sp, #72]	; 0x48
   1cd24:	mov	r0, r4
   1cd28:	ldr	fp, [sp, #76]	; 0x4c
   1cd2c:	str	lr, [sp]
   1cd30:	str	r7, [sp, #4]
   1cd34:	str	ip, [sp, #12]
   1cd38:	str	fp, [sp, #16]
   1cd3c:	bl	1a048 <__assert_fail@plt+0x8828>
   1cd40:	cmp	sl, r0
   1cd44:	bhi	1cda8 <__assert_fail@plt+0xb588>
   1cd48:	add	sl, r0, #1
   1cd4c:	movw	r3, #12920	; 0x3278
   1cd50:	movt	r3, #3
   1cd54:	cmp	r4, r3
   1cd58:	str	sl, [r6]
   1cd5c:	beq	1cd68 <__assert_fail@plt+0xb548>
   1cd60:	mov	r0, r4
   1cd64:	bl	171c0 <__assert_fail@plt+0x59a0>
   1cd68:	mov	r0, sl
   1cd6c:	bl	1e950 <__assert_fail@plt+0xd130>
   1cd70:	ldr	r3, [sp, #32]
   1cd74:	mov	r2, r5
   1cd78:	add	r5, sp, #40	; 0x28
   1cd7c:	mov	r1, sl
   1cd80:	mov	r4, r0
   1cd84:	ldr	lr, [sp, #72]	; 0x48
   1cd88:	ldr	ip, [sp, #76]	; 0x4c
   1cd8c:	str	r0, [r6, #4]
   1cd90:	stm	sp, {r3, r7}
   1cd94:	mvn	r3, #0
   1cd98:	str	r5, [sp, #8]
   1cd9c:	str	lr, [sp, #12]
   1cda0:	str	ip, [sp, #16]
   1cda4:	bl	1a048 <__assert_fail@plt+0x8828>
   1cda8:	mov	r0, r4
   1cdac:	str	r9, [r8]
   1cdb0:	add	sp, sp, #84	; 0x54
   1cdb4:	ldrd	r4, [sp]
   1cdb8:	ldrd	r6, [sp, #8]
   1cdbc:	ldrd	r8, [sp, #16]
   1cdc0:	ldrd	sl, [sp, #24]
   1cdc4:	add	sp, sp, #32
   1cdc8:	pop	{pc}		; (ldr pc, [sp], #4)
   1cdcc:	mov	r0, #8
   1cdd0:	mvn	r3, #-2147483648	; 0x80000000
   1cdd4:	add	r1, sp, #28
   1cdd8:	str	r0, [sp]
   1cddc:	mov	r0, #0
   1cde0:	bl	1ebf4 <__assert_fail@plt+0xd3d4>
   1cde4:	ldrd	r2, [r4, #8]
   1cde8:	mov	r6, r0
   1cdec:	str	r0, [r4]
   1cdf0:	strd	r2, [r0]
   1cdf4:	b	1ccd4 <__assert_fail@plt+0xb4b4>
   1cdf8:	andeq	r3, r3, r8, ror r3
   1cdfc:	ldr	ip, [pc, #480]	; 1cfe4 <__assert_fail@plt+0xb7c4>
   1ce00:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1ce04:	mov	r5, r0
   1ce08:	movw	r4, #12688	; 0x3190
   1ce0c:	movt	r4, #3
   1ce10:	ldrd	r2, [ip]
   1ce14:	strd	r6, [sp, #8]
   1ce18:	mov	r6, r1
   1ce1c:	ldrd	r0, [ip, #8]
   1ce20:	strd	r8, [sp, #16]
   1ce24:	strd	sl, [sp, #24]
   1ce28:	str	lr, [sp, #32]
   1ce2c:	sub	sp, sp, #84	; 0x54
   1ce30:	ldrd	r8, [ip, #40]	; 0x28
   1ce34:	strd	r2, [sp, #32]
   1ce38:	strd	r0, [sp, #40]	; 0x28
   1ce3c:	ldrd	r2, [ip, #16]
   1ce40:	ldr	r7, [sp, #44]	; 0x2c
   1ce44:	ldrd	r0, [ip, #24]
   1ce48:	strd	r2, [sp, #48]	; 0x30
   1ce4c:	ldrd	r2, [ip, #32]
   1ce50:	mvn	lr, r7
   1ce54:	and	lr, lr, #67108864	; 0x4000000
   1ce58:	eor	lr, lr, r7
   1ce5c:	str	lr, [sp, #44]	; 0x2c
   1ce60:	strd	r0, [sp, #56]	; 0x38
   1ce64:	strd	r2, [sp, #64]	; 0x40
   1ce68:	strd	r8, [sp, #72]	; 0x48
   1ce6c:	bl	1167c <__errno_location@plt>
   1ce70:	mov	r9, r0
   1ce74:	ldr	sl, [r0]
   1ce78:	ldr	r2, [r4, #4]
   1ce7c:	ldr	r7, [r4]
   1ce80:	cmp	r2, #0
   1ce84:	bgt	1cee0 <__assert_fail@plt+0xb6c0>
   1ce88:	add	r3, r4, #8
   1ce8c:	str	r2, [sp, #28]
   1ce90:	rsb	r2, r2, #1
   1ce94:	cmp	r7, r3
   1ce98:	beq	1cfb8 <__assert_fail@plt+0xb798>
   1ce9c:	mov	r1, #8
   1cea0:	mov	r0, r7
   1cea4:	mvn	r3, #-2147483648	; 0x80000000
   1cea8:	str	r1, [sp]
   1ceac:	add	r1, sp, #28
   1ceb0:	bl	1ebf4 <__assert_fail@plt+0xd3d4>
   1ceb4:	mov	r7, r0
   1ceb8:	str	r0, [r4]
   1cebc:	ldr	r0, [r4, #4]
   1cec0:	mov	r1, #0
   1cec4:	ldr	r2, [sp, #28]
   1cec8:	sub	r2, r2, r0
   1cecc:	add	r0, r7, r0, lsl #3
   1ced0:	lsl	r2, r2, #3
   1ced4:	bl	116ac <memset@plt>
   1ced8:	ldr	r3, [sp, #28]
   1cedc:	str	r3, [r4, #4]
   1cee0:	ldr	ip, [sp, #32]
   1cee4:	add	r0, sp, #40	; 0x28
   1cee8:	mov	r3, r6
   1ceec:	mov	r2, r5
   1cef0:	ldr	r8, [sp, #36]	; 0x24
   1cef4:	ldr	fp, [r7]
   1cef8:	ldr	r4, [r7, #4]
   1cefc:	str	ip, [sp]
   1cf00:	orr	r8, r8, #1
   1cf04:	ldr	ip, [sp, #72]	; 0x48
   1cf08:	mov	r1, fp
   1cf0c:	str	r8, [sp, #4]
   1cf10:	ldr	lr, [sp, #76]	; 0x4c
   1cf14:	str	r0, [sp, #8]
   1cf18:	mov	r0, r4
   1cf1c:	str	ip, [sp, #12]
   1cf20:	str	lr, [sp, #16]
   1cf24:	bl	1a048 <__assert_fail@plt+0x8828>
   1cf28:	cmp	fp, r0
   1cf2c:	bhi	1cf94 <__assert_fail@plt+0xb774>
   1cf30:	add	fp, r0, #1
   1cf34:	movw	r3, #12920	; 0x3278
   1cf38:	movt	r3, #3
   1cf3c:	cmp	r4, r3
   1cf40:	str	fp, [r7]
   1cf44:	beq	1cf50 <__assert_fail@plt+0xb730>
   1cf48:	mov	r0, r4
   1cf4c:	bl	171c0 <__assert_fail@plt+0x59a0>
   1cf50:	mov	r0, fp
   1cf54:	bl	1e950 <__assert_fail@plt+0xd130>
   1cf58:	ldr	lr, [sp, #32]
   1cf5c:	mov	r2, r5
   1cf60:	mov	r3, r6
   1cf64:	mov	r1, fp
   1cf68:	mov	r4, r0
   1cf6c:	ldr	r5, [sp, #72]	; 0x48
   1cf70:	ldr	ip, [sp, #76]	; 0x4c
   1cf74:	str	r0, [r7, #4]
   1cf78:	str	lr, [sp]
   1cf7c:	add	lr, sp, #40	; 0x28
   1cf80:	str	r8, [sp, #4]
   1cf84:	str	lr, [sp, #8]
   1cf88:	str	r5, [sp, #12]
   1cf8c:	str	ip, [sp, #16]
   1cf90:	bl	1a048 <__assert_fail@plt+0x8828>
   1cf94:	mov	r0, r4
   1cf98:	str	sl, [r9]
   1cf9c:	add	sp, sp, #84	; 0x54
   1cfa0:	ldrd	r4, [sp]
   1cfa4:	ldrd	r6, [sp, #8]
   1cfa8:	ldrd	r8, [sp, #16]
   1cfac:	ldrd	sl, [sp, #24]
   1cfb0:	add	sp, sp, #32
   1cfb4:	pop	{pc}		; (ldr pc, [sp], #4)
   1cfb8:	mov	r0, #8
   1cfbc:	mvn	r3, #-2147483648	; 0x80000000
   1cfc0:	add	r1, sp, #28
   1cfc4:	str	r0, [sp]
   1cfc8:	mov	r0, #0
   1cfcc:	bl	1ebf4 <__assert_fail@plt+0xd3d4>
   1cfd0:	ldrd	r2, [r4, #8]
   1cfd4:	mov	r7, r0
   1cfd8:	str	r0, [r4]
   1cfdc:	strd	r2, [r0]
   1cfe0:	b	1cebc <__assert_fail@plt+0xb69c>
   1cfe4:	andeq	r3, r3, r8, ror r3
   1cfe8:	strd	r4, [sp, #-12]!
   1cfec:	mov	r4, #0
   1cff0:	mov	r5, #0
   1cff4:	str	lr, [sp, #8]
   1cff8:	sub	sp, sp, #100	; 0x64
   1cffc:	cmp	r1, #10
   1d000:	strd	r4, [sp]
   1d004:	strd	r4, [sp, #8]
   1d008:	strd	r4, [sp, #16]
   1d00c:	strd	r4, [sp, #24]
   1d010:	strd	r4, [sp, #32]
   1d014:	strd	r4, [sp, #40]	; 0x28
   1d018:	beq	1d048 <__assert_fail@plt+0xb828>
   1d01c:	mov	ip, #67108864	; 0x4000000
   1d020:	mov	r3, sp
   1d024:	str	r1, [sp]
   1d028:	mov	r1, r2
   1d02c:	mvn	r2, #0
   1d030:	str	ip, [sp, #12]
   1d034:	bl	1ba34 <__assert_fail@plt+0xa214>
   1d038:	add	sp, sp, #100	; 0x64
   1d03c:	ldrd	r4, [sp]
   1d040:	add	sp, sp, #8
   1d044:	pop	{pc}		; (ldr pc, [sp], #4)
   1d048:	bl	117f0 <abort@plt>
   1d04c:	ldr	ip, [pc, #156]	; 1d0f0 <__assert_fail@plt+0xb8d0>
   1d050:	cmp	r2, #0
   1d054:	cmpne	r1, #0
   1d058:	strd	r4, [sp, #-32]!	; 0xffffffe0
   1d05c:	strd	r6, [sp, #8]
   1d060:	mov	r6, r2
   1d064:	str	r8, [sp, #16]
   1d068:	mov	r8, r3
   1d06c:	strd	sl, [sp, #20]
   1d070:	ldrd	r4, [ip]
   1d074:	str	lr, [sp, #28]
   1d078:	sub	sp, sp, #48	; 0x30
   1d07c:	mov	lr, #10
   1d080:	ldrd	r2, [ip, #8]
   1d084:	ldrd	sl, [ip, #16]
   1d088:	strd	r4, [sp]
   1d08c:	ldrd	r4, [ip, #32]
   1d090:	str	lr, [sp]
   1d094:	strd	r2, [sp, #8]
   1d098:	strd	sl, [sp, #16]
   1d09c:	ldrd	r2, [ip, #24]
   1d0a0:	ldrd	sl, [ip, #40]	; 0x28
   1d0a4:	strd	r2, [sp, #24]
   1d0a8:	strd	r4, [sp, #32]
   1d0ac:	strd	sl, [sp, #40]	; 0x28
   1d0b0:	beq	1d0ec <__assert_fail@plt+0xb8cc>
   1d0b4:	mov	r7, r1
   1d0b8:	mov	r3, sp
   1d0bc:	mov	r1, r8
   1d0c0:	mvn	r2, #0
   1d0c4:	str	r7, [sp, #40]	; 0x28
   1d0c8:	str	r6, [sp, #44]	; 0x2c
   1d0cc:	bl	1ba34 <__assert_fail@plt+0xa214>
   1d0d0:	add	sp, sp, #48	; 0x30
   1d0d4:	ldrd	r4, [sp]
   1d0d8:	ldrd	r6, [sp, #8]
   1d0dc:	ldr	r8, [sp, #16]
   1d0e0:	ldrd	sl, [sp, #20]
   1d0e4:	add	sp, sp, #28
   1d0e8:	pop	{pc}		; (ldr pc, [sp], #4)
   1d0ec:	bl	117f0 <abort@plt>
   1d0f0:	andeq	r3, r3, r8, ror r3
   1d0f4:	ldr	ip, [pc, #156]	; 1d198 <__assert_fail@plt+0xb978>
   1d0f8:	cmp	r2, #0
   1d0fc:	cmpne	r1, #0
   1d100:	strd	r4, [sp, #-32]!	; 0xffffffe0
   1d104:	strd	r6, [sp, #8]
   1d108:	mov	r6, r2
   1d10c:	str	r8, [sp, #16]
   1d110:	mov	r8, r3
   1d114:	strd	sl, [sp, #20]
   1d118:	ldrd	r4, [ip]
   1d11c:	str	lr, [sp, #28]
   1d120:	sub	sp, sp, #48	; 0x30
   1d124:	mov	lr, #10
   1d128:	ldrd	r2, [ip, #8]
   1d12c:	ldrd	sl, [ip, #16]
   1d130:	strd	r4, [sp]
   1d134:	ldrd	r4, [ip, #32]
   1d138:	str	lr, [sp]
   1d13c:	strd	r2, [sp, #8]
   1d140:	strd	sl, [sp, #16]
   1d144:	ldrd	r2, [ip, #24]
   1d148:	ldrd	sl, [ip, #40]	; 0x28
   1d14c:	strd	r2, [sp, #24]
   1d150:	strd	r4, [sp, #32]
   1d154:	strd	sl, [sp, #40]	; 0x28
   1d158:	beq	1d194 <__assert_fail@plt+0xb974>
   1d15c:	ldr	r2, [sp, #80]	; 0x50
   1d160:	mov	r7, r1
   1d164:	mov	r3, sp
   1d168:	mov	r1, r8
   1d16c:	str	r7, [sp, #40]	; 0x28
   1d170:	str	r6, [sp, #44]	; 0x2c
   1d174:	bl	1ba34 <__assert_fail@plt+0xa214>
   1d178:	add	sp, sp, #48	; 0x30
   1d17c:	ldrd	r4, [sp]
   1d180:	ldrd	r6, [sp, #8]
   1d184:	ldr	r8, [sp, #16]
   1d188:	ldrd	sl, [sp, #20]
   1d18c:	add	sp, sp, #28
   1d190:	pop	{pc}		; (ldr pc, [sp], #4)
   1d194:	bl	117f0 <abort@plt>
   1d198:	andeq	r3, r3, r8, ror r3
   1d19c:	ldr	ip, [pc, #512]	; 1d3a4 <__assert_fail@plt+0xbb84>
   1d1a0:	cmp	r0, #0
   1d1a4:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1d1a8:	ldrd	r4, [ip, #16]
   1d1ac:	strd	r6, [sp, #8]
   1d1b0:	clz	r6, r1
   1d1b4:	mov	r7, r1
   1d1b8:	strd	r8, [sp, #16]
   1d1bc:	mov	r8, r0
   1d1c0:	lsr	r6, r6, #5
   1d1c4:	strd	sl, [sp, #24]
   1d1c8:	mov	fp, r2
   1d1cc:	mov	sl, #10
   1d1d0:	ldrd	r2, [ip]
   1d1d4:	moveq	r6, #1
   1d1d8:	str	lr, [sp, #32]
   1d1dc:	sub	sp, sp, #92	; 0x5c
   1d1e0:	cmp	r6, #0
   1d1e4:	ldrd	r0, [ip, #8]
   1d1e8:	strd	r2, [sp, #40]	; 0x28
   1d1ec:	strd	r4, [sp, #56]	; 0x38
   1d1f0:	ldrd	r2, [ip, #24]
   1d1f4:	strd	r0, [sp, #48]	; 0x30
   1d1f8:	ldrd	r0, [ip, #32]
   1d1fc:	str	sl, [sp, #40]	; 0x28
   1d200:	ldrd	r4, [ip, #40]	; 0x28
   1d204:	strd	r2, [sp, #64]	; 0x40
   1d208:	strd	r0, [sp, #72]	; 0x48
   1d20c:	strd	r4, [sp, #80]	; 0x50
   1d210:	bne	1d3a0 <__assert_fail@plt+0xbb80>
   1d214:	movw	r5, #12688	; 0x3190
   1d218:	movt	r5, #3
   1d21c:	str	r8, [sp, #80]	; 0x50
   1d220:	str	r7, [sp, #84]	; 0x54
   1d224:	bl	1167c <__errno_location@plt>
   1d228:	ldr	r3, [r0]
   1d22c:	mov	r9, r0
   1d230:	ldr	r2, [r5, #4]
   1d234:	ldr	r4, [r5]
   1d238:	str	r3, [sp, #28]
   1d23c:	cmp	r2, #0
   1d240:	movgt	r1, sl
   1d244:	bgt	1d2ac <__assert_fail@plt+0xba8c>
   1d248:	add	r3, r5, #8
   1d24c:	str	r2, [sp, #36]	; 0x24
   1d250:	rsb	r2, r2, #1
   1d254:	cmp	r4, r3
   1d258:	beq	1d374 <__assert_fail@plt+0xbb54>
   1d25c:	mov	r1, #8
   1d260:	mov	r0, r4
   1d264:	mvn	r3, #-2147483648	; 0x80000000
   1d268:	str	r1, [sp]
   1d26c:	add	r1, sp, #36	; 0x24
   1d270:	bl	1ebf4 <__assert_fail@plt+0xd3d4>
   1d274:	mov	r4, r0
   1d278:	str	r0, [r5]
   1d27c:	ldr	r0, [r5, #4]
   1d280:	mov	r1, #0
   1d284:	ldr	r2, [sp, #36]	; 0x24
   1d288:	sub	r2, r2, r0
   1d28c:	add	r0, r4, r0, lsl #3
   1d290:	lsl	r2, r2, #3
   1d294:	bl	116ac <memset@plt>
   1d298:	ldr	r3, [sp, #36]	; 0x24
   1d29c:	ldr	r1, [sp, #40]	; 0x28
   1d2a0:	ldr	r8, [sp, #80]	; 0x50
   1d2a4:	str	r3, [r5, #4]
   1d2a8:	ldr	r7, [sp, #84]	; 0x54
   1d2ac:	mvn	r3, #0
   1d2b0:	mov	r2, fp
   1d2b4:	ldr	r6, [sp, #44]	; 0x2c
   1d2b8:	ldr	sl, [r4]
   1d2bc:	ldr	r5, [r4, #4]
   1d2c0:	orr	r6, r6, #1
   1d2c4:	stm	sp, {r1, r6}
   1d2c8:	add	r1, sp, #48	; 0x30
   1d2cc:	str	r8, [sp, #12]
   1d2d0:	mov	r0, r5
   1d2d4:	str	r1, [sp, #8]
   1d2d8:	mov	r1, sl
   1d2dc:	str	r7, [sp, #16]
   1d2e0:	bl	1a048 <__assert_fail@plt+0x8828>
   1d2e4:	cmp	sl, r0
   1d2e8:	bhi	1d34c <__assert_fail@plt+0xbb2c>
   1d2ec:	add	r7, r0, #1
   1d2f0:	movw	r3, #12920	; 0x3278
   1d2f4:	movt	r3, #3
   1d2f8:	cmp	r5, r3
   1d2fc:	str	r7, [r4]
   1d300:	beq	1d30c <__assert_fail@plt+0xbaec>
   1d304:	mov	r0, r5
   1d308:	bl	171c0 <__assert_fail@plt+0x59a0>
   1d30c:	mov	r0, r7
   1d310:	bl	1e950 <__assert_fail@plt+0xd130>
   1d314:	ldr	r3, [sp, #40]	; 0x28
   1d318:	mov	r2, fp
   1d31c:	mov	r1, r7
   1d320:	mov	r5, r0
   1d324:	ldr	lr, [sp, #80]	; 0x50
   1d328:	ldr	ip, [sp, #84]	; 0x54
   1d32c:	str	r0, [r4, #4]
   1d330:	add	r4, sp, #48	; 0x30
   1d334:	stm	sp, {r3, r6}
   1d338:	mvn	r3, #0
   1d33c:	str	r4, [sp, #8]
   1d340:	str	lr, [sp, #12]
   1d344:	str	ip, [sp, #16]
   1d348:	bl	1a048 <__assert_fail@plt+0x8828>
   1d34c:	ldr	r3, [sp, #28]
   1d350:	mov	r0, r5
   1d354:	str	r3, [r9]
   1d358:	add	sp, sp, #92	; 0x5c
   1d35c:	ldrd	r4, [sp]
   1d360:	ldrd	r6, [sp, #8]
   1d364:	ldrd	r8, [sp, #16]
   1d368:	ldrd	sl, [sp, #24]
   1d36c:	add	sp, sp, #32
   1d370:	pop	{pc}		; (ldr pc, [sp], #4)
   1d374:	mov	r1, #8
   1d378:	mvn	r3, #-2147483648	; 0x80000000
   1d37c:	mov	r0, r6
   1d380:	str	r1, [sp]
   1d384:	add	r1, sp, #36	; 0x24
   1d388:	bl	1ebf4 <__assert_fail@plt+0xd3d4>
   1d38c:	ldrd	r2, [r5, #8]
   1d390:	mov	r4, r0
   1d394:	str	r0, [r5]
   1d398:	strd	r2, [r0]
   1d39c:	b	1d27c <__assert_fail@plt+0xba5c>
   1d3a0:	bl	117f0 <abort@plt>
   1d3a4:	andeq	r3, r3, r8, ror r3
   1d3a8:	ldr	ip, [pc, #536]	; 1d5c8 <__assert_fail@plt+0xbda8>
   1d3ac:	cmp	r0, #0
   1d3b0:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1d3b4:	ldrd	r4, [ip, #16]
   1d3b8:	strd	r6, [sp, #8]
   1d3bc:	mov	r6, r1
   1d3c0:	mov	r7, r0
   1d3c4:	strd	r8, [sp, #16]
   1d3c8:	mov	r9, #10
   1d3cc:	strd	sl, [sp, #24]
   1d3d0:	mov	sl, r2
   1d3d4:	mov	fp, r3
   1d3d8:	str	lr, [sp, #32]
   1d3dc:	clz	lr, r1
   1d3e0:	sub	sp, sp, #92	; 0x5c
   1d3e4:	ldrd	r2, [ip]
   1d3e8:	lsr	lr, lr, #5
   1d3ec:	moveq	lr, #1
   1d3f0:	ldrd	r0, [ip, #8]
   1d3f4:	cmp	lr, #0
   1d3f8:	strd	r4, [sp, #56]	; 0x38
   1d3fc:	ldrd	r4, [ip, #40]	; 0x28
   1d400:	str	lr, [sp, #28]
   1d404:	strd	r2, [sp, #40]	; 0x28
   1d408:	ldrd	r2, [ip, #24]
   1d40c:	strd	r0, [sp, #48]	; 0x30
   1d410:	ldrd	r0, [ip, #32]
   1d414:	str	r9, [sp, #40]	; 0x28
   1d418:	strd	r2, [sp, #64]	; 0x40
   1d41c:	strd	r4, [sp, #80]	; 0x50
   1d420:	strd	r0, [sp, #72]	; 0x48
   1d424:	bne	1d5c4 <__assert_fail@plt+0xbda4>
   1d428:	movw	r5, #12688	; 0x3190
   1d42c:	movt	r5, #3
   1d430:	str	r7, [sp, #80]	; 0x50
   1d434:	str	r6, [sp, #84]	; 0x54
   1d438:	bl	1167c <__errno_location@plt>
   1d43c:	ldr	r3, [r0]
   1d440:	mov	r8, r0
   1d444:	ldr	r2, [r5, #4]
   1d448:	ldr	r4, [r5]
   1d44c:	str	r3, [sp, #24]
   1d450:	cmp	r2, #0
   1d454:	movgt	r1, r9
   1d458:	bgt	1d4c0 <__assert_fail@plt+0xbca0>
   1d45c:	add	r3, r5, #8
   1d460:	str	r2, [sp, #36]	; 0x24
   1d464:	rsb	r2, r2, #1
   1d468:	cmp	r4, r3
   1d46c:	beq	1d598 <__assert_fail@plt+0xbd78>
   1d470:	mov	r1, #8
   1d474:	mov	r0, r4
   1d478:	mvn	r3, #-2147483648	; 0x80000000
   1d47c:	str	r1, [sp]
   1d480:	add	r1, sp, #36	; 0x24
   1d484:	bl	1ebf4 <__assert_fail@plt+0xd3d4>
   1d488:	mov	r4, r0
   1d48c:	str	r0, [r5]
   1d490:	ldr	r0, [r5, #4]
   1d494:	mov	r1, #0
   1d498:	ldr	r2, [sp, #36]	; 0x24
   1d49c:	sub	r2, r2, r0
   1d4a0:	add	r0, r4, r0, lsl #3
   1d4a4:	lsl	r2, r2, #3
   1d4a8:	bl	116ac <memset@plt>
   1d4ac:	ldr	r3, [sp, #36]	; 0x24
   1d4b0:	ldr	r1, [sp, #40]	; 0x28
   1d4b4:	ldr	r7, [sp, #80]	; 0x50
   1d4b8:	str	r3, [r5, #4]
   1d4bc:	ldr	r6, [sp, #84]	; 0x54
   1d4c0:	mov	r3, fp
   1d4c4:	mov	r2, sl
   1d4c8:	ldr	r0, [sp, #44]	; 0x2c
   1d4cc:	ldr	r9, [r4]
   1d4d0:	ldr	r5, [r4, #4]
   1d4d4:	orr	r0, r0, #1
   1d4d8:	str	r1, [sp]
   1d4dc:	add	r1, sp, #48	; 0x30
   1d4e0:	str	r0, [sp, #4]
   1d4e4:	str	r1, [sp, #8]
   1d4e8:	mov	r1, r9
   1d4ec:	str	r7, [sp, #12]
   1d4f0:	str	r6, [sp, #16]
   1d4f4:	str	r0, [sp, #28]
   1d4f8:	mov	r0, r5
   1d4fc:	bl	1a048 <__assert_fail@plt+0x8828>
   1d500:	cmp	r9, r0
   1d504:	bhi	1d570 <__assert_fail@plt+0xbd50>
   1d508:	add	r6, r0, #1
   1d50c:	movw	r3, #12920	; 0x3278
   1d510:	movt	r3, #3
   1d514:	cmp	r5, r3
   1d518:	str	r6, [r4]
   1d51c:	beq	1d528 <__assert_fail@plt+0xbd08>
   1d520:	mov	r0, r5
   1d524:	bl	171c0 <__assert_fail@plt+0x59a0>
   1d528:	mov	r0, r6
   1d52c:	bl	1e950 <__assert_fail@plt+0xd130>
   1d530:	ldr	lr, [sp, #40]	; 0x28
   1d534:	mov	r1, r6
   1d538:	mov	r3, fp
   1d53c:	mov	r2, sl
   1d540:	mov	r5, r0
   1d544:	ldr	r6, [sp, #80]	; 0x50
   1d548:	ldr	ip, [sp, #84]	; 0x54
   1d54c:	str	r0, [r4, #4]
   1d550:	str	lr, [sp]
   1d554:	ldr	lr, [sp, #28]
   1d558:	str	lr, [sp, #4]
   1d55c:	add	lr, sp, #48	; 0x30
   1d560:	str	r6, [sp, #12]
   1d564:	str	lr, [sp, #8]
   1d568:	str	ip, [sp, #16]
   1d56c:	bl	1a048 <__assert_fail@plt+0x8828>
   1d570:	ldr	r3, [sp, #24]
   1d574:	mov	r0, r5
   1d578:	str	r3, [r8]
   1d57c:	add	sp, sp, #92	; 0x5c
   1d580:	ldrd	r4, [sp]
   1d584:	ldrd	r6, [sp, #8]
   1d588:	ldrd	r8, [sp, #16]
   1d58c:	ldrd	sl, [sp, #24]
   1d590:	add	sp, sp, #32
   1d594:	pop	{pc}		; (ldr pc, [sp], #4)
   1d598:	mov	r1, #8
   1d59c:	mvn	r3, #-2147483648	; 0x80000000
   1d5a0:	ldr	r0, [sp, #28]
   1d5a4:	str	r1, [sp]
   1d5a8:	add	r1, sp, #36	; 0x24
   1d5ac:	bl	1ebf4 <__assert_fail@plt+0xd3d4>
   1d5b0:	ldrd	r2, [r5, #8]
   1d5b4:	mov	r4, r0
   1d5b8:	str	r0, [r5]
   1d5bc:	strd	r2, [r0]
   1d5c0:	b	1d490 <__assert_fail@plt+0xbc70>
   1d5c4:	bl	117f0 <abort@plt>
   1d5c8:	andeq	r3, r3, r8, ror r3
   1d5cc:	ldr	r3, [pc]	; 1d5d4 <__assert_fail@plt+0xbdb4>
   1d5d0:	b	1ba34 <__assert_fail@plt+0xa214>
   1d5d4:	andeq	r3, r3, r0, lsr #3
   1d5d8:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1d5dc:	movw	r4, #12688	; 0x3190
   1d5e0:	movt	r4, #3
   1d5e4:	strd	r6, [sp, #8]
   1d5e8:	strd	r8, [sp, #16]
   1d5ec:	strd	sl, [sp, #24]
   1d5f0:	mov	sl, r0
   1d5f4:	mov	fp, r1
   1d5f8:	str	lr, [sp, #32]
   1d5fc:	sub	sp, sp, #44	; 0x2c
   1d600:	bl	1167c <__errno_location@plt>
   1d604:	ldr	r3, [r0]
   1d608:	mov	r8, r0
   1d60c:	ldr	r2, [r4, #4]
   1d610:	ldr	r5, [r4]
   1d614:	str	r3, [sp, #28]
   1d618:	cmp	r2, #0
   1d61c:	bgt	1d678 <__assert_fail@plt+0xbe58>
   1d620:	add	r3, r4, #8
   1d624:	str	r2, [sp, #36]	; 0x24
   1d628:	rsb	r2, r2, #1
   1d62c:	cmp	r5, r3
   1d630:	beq	1d754 <__assert_fail@plt+0xbf34>
   1d634:	mov	r1, #8
   1d638:	mov	r0, r5
   1d63c:	mvn	r3, #-2147483648	; 0x80000000
   1d640:	str	r1, [sp]
   1d644:	add	r1, sp, #36	; 0x24
   1d648:	bl	1ebf4 <__assert_fail@plt+0xd3d4>
   1d64c:	mov	r5, r0
   1d650:	str	r0, [r4]
   1d654:	ldr	r0, [r4, #4]
   1d658:	mov	r1, #0
   1d65c:	ldr	r2, [sp, #36]	; 0x24
   1d660:	sub	r2, r2, r0
   1d664:	add	r0, r5, r0, lsl #3
   1d668:	lsl	r2, r2, #3
   1d66c:	bl	116ac <memset@plt>
   1d670:	ldr	r3, [sp, #36]	; 0x24
   1d674:	str	r3, [r4, #4]
   1d678:	ldr	ip, [r4, #16]
   1d67c:	mov	r3, fp
   1d680:	mov	r2, sl
   1d684:	ldr	r7, [r4, #20]
   1d688:	ldr	r0, [pc, #240]	; 1d780 <__assert_fail@plt+0xbf60>
   1d68c:	ldr	r9, [r5]
   1d690:	orr	r7, r7, #1
   1d694:	ldr	r6, [r5, #4]
   1d698:	str	ip, [sp]
   1d69c:	ldr	ip, [r4, #56]	; 0x38
   1d6a0:	mov	r1, r9
   1d6a4:	str	r7, [sp, #4]
   1d6a8:	ldr	lr, [r4, #60]	; 0x3c
   1d6ac:	str	r0, [sp, #8]
   1d6b0:	mov	r0, r6
   1d6b4:	str	ip, [sp, #12]
   1d6b8:	str	lr, [sp, #16]
   1d6bc:	bl	1a048 <__assert_fail@plt+0x8828>
   1d6c0:	cmp	r9, r0
   1d6c4:	bhi	1d72c <__assert_fail@plt+0xbf0c>
   1d6c8:	add	r9, r0, #1
   1d6cc:	movw	r3, #12920	; 0x3278
   1d6d0:	movt	r3, #3
   1d6d4:	cmp	r6, r3
   1d6d8:	str	r9, [r5]
   1d6dc:	beq	1d6e8 <__assert_fail@plt+0xbec8>
   1d6e0:	mov	r0, r6
   1d6e4:	bl	171c0 <__assert_fail@plt+0x59a0>
   1d6e8:	mov	r0, r9
   1d6ec:	bl	1e950 <__assert_fail@plt+0xd130>
   1d6f0:	ldr	ip, [r4, #16]
   1d6f4:	mov	r1, r9
   1d6f8:	mov	r3, fp
   1d6fc:	mov	r2, sl
   1d700:	mov	r6, r0
   1d704:	ldr	r9, [r4, #56]	; 0x38
   1d708:	ldr	lr, [r4, #60]	; 0x3c
   1d70c:	str	r0, [r5, #4]
   1d710:	str	ip, [sp]
   1d714:	ldr	ip, [pc, #100]	; 1d780 <__assert_fail@plt+0xbf60>
   1d718:	str	r7, [sp, #4]
   1d71c:	str	ip, [sp, #8]
   1d720:	str	r9, [sp, #12]
   1d724:	str	lr, [sp, #16]
   1d728:	bl	1a048 <__assert_fail@plt+0x8828>
   1d72c:	ldr	r3, [sp, #28]
   1d730:	mov	r0, r6
   1d734:	str	r3, [r8]
   1d738:	add	sp, sp, #44	; 0x2c
   1d73c:	ldrd	r4, [sp]
   1d740:	ldrd	r6, [sp, #8]
   1d744:	ldrd	r8, [sp, #16]
   1d748:	ldrd	sl, [sp, #24]
   1d74c:	add	sp, sp, #32
   1d750:	pop	{pc}		; (ldr pc, [sp], #4)
   1d754:	mov	r0, #8
   1d758:	mvn	r3, #-2147483648	; 0x80000000
   1d75c:	add	r1, sp, #36	; 0x24
   1d760:	str	r0, [sp]
   1d764:	mov	r0, #0
   1d768:	bl	1ebf4 <__assert_fail@plt+0xd3d4>
   1d76c:	ldrd	r2, [r4, #8]
   1d770:	mov	r5, r0
   1d774:	str	r0, [r4]
   1d778:	strd	r2, [r0]
   1d77c:	b	1d654 <__assert_fail@plt+0xbe34>
   1d780:	andeq	r3, r3, r8, lsr #3
   1d784:	ldr	r3, [pc, #4]	; 1d790 <__assert_fail@plt+0xbf70>
   1d788:	mvn	r2, #0
   1d78c:	b	1ba34 <__assert_fail@plt+0xa214>
   1d790:	andeq	r3, r3, r0, lsr #3
   1d794:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1d798:	movw	r4, #12688	; 0x3190
   1d79c:	movt	r4, #3
   1d7a0:	strd	r6, [sp, #8]
   1d7a4:	strd	r8, [sp, #16]
   1d7a8:	strd	sl, [sp, #24]
   1d7ac:	mov	sl, r0
   1d7b0:	str	lr, [sp, #32]
   1d7b4:	sub	sp, sp, #44	; 0x2c
   1d7b8:	bl	1167c <__errno_location@plt>
   1d7bc:	ldr	r3, [r0]
   1d7c0:	mov	r8, r0
   1d7c4:	ldr	r2, [r4, #4]
   1d7c8:	ldr	r5, [r4]
   1d7cc:	str	r3, [sp, #28]
   1d7d0:	cmp	r2, #0
   1d7d4:	bgt	1d830 <__assert_fail@plt+0xc010>
   1d7d8:	add	r3, r4, #8
   1d7dc:	str	r2, [sp, #36]	; 0x24
   1d7e0:	rsb	r2, r2, #1
   1d7e4:	cmp	r5, r3
   1d7e8:	beq	1d8f8 <__assert_fail@plt+0xc0d8>
   1d7ec:	mov	r1, #8
   1d7f0:	mov	r0, r5
   1d7f4:	mvn	r3, #-2147483648	; 0x80000000
   1d7f8:	str	r1, [sp]
   1d7fc:	add	r1, sp, #36	; 0x24
   1d800:	bl	1ebf4 <__assert_fail@plt+0xd3d4>
   1d804:	mov	r5, r0
   1d808:	str	r0, [r4]
   1d80c:	ldr	r0, [r4, #4]
   1d810:	mov	r1, #0
   1d814:	ldr	r2, [sp, #36]	; 0x24
   1d818:	sub	r2, r2, r0
   1d81c:	add	r0, r5, r0, lsl #3
   1d820:	lsl	r2, r2, #3
   1d824:	bl	116ac <memset@plt>
   1d828:	ldr	r3, [sp, #36]	; 0x24
   1d82c:	str	r3, [r4, #4]
   1d830:	ldr	ip, [r4, #16]
   1d834:	mvn	r3, #0
   1d838:	mov	r2, sl
   1d83c:	ldr	r7, [r4, #20]
   1d840:	ldr	fp, [pc, #220]	; 1d924 <__assert_fail@plt+0xc104>
   1d844:	ldr	r9, [r5]
   1d848:	orr	r7, r7, #1
   1d84c:	ldr	r6, [r5, #4]
   1d850:	str	ip, [sp]
   1d854:	ldr	ip, [r4, #56]	; 0x38
   1d858:	mov	r1, r9
   1d85c:	stmib	sp, {r7, fp}
   1d860:	ldr	lr, [r4, #60]	; 0x3c
   1d864:	mov	r0, r6
   1d868:	str	ip, [sp, #12]
   1d86c:	str	lr, [sp, #16]
   1d870:	bl	1a048 <__assert_fail@plt+0x8828>
   1d874:	cmp	r9, r0
   1d878:	bhi	1d8d0 <__assert_fail@plt+0xc0b0>
   1d87c:	add	r9, r0, #1
   1d880:	movw	r3, #12920	; 0x3278
   1d884:	movt	r3, #3
   1d888:	cmp	r6, r3
   1d88c:	str	r9, [r5]
   1d890:	beq	1d89c <__assert_fail@plt+0xc07c>
   1d894:	mov	r0, r6
   1d898:	bl	171c0 <__assert_fail@plt+0x59a0>
   1d89c:	mov	r0, r9
   1d8a0:	bl	1e950 <__assert_fail@plt+0xd130>
   1d8a4:	ldr	r3, [r4, #16]
   1d8a8:	mov	r2, sl
   1d8ac:	mov	r1, r9
   1d8b0:	mov	r6, r0
   1d8b4:	ldr	lr, [r4, #56]	; 0x38
   1d8b8:	ldr	ip, [r4, #60]	; 0x3c
   1d8bc:	str	r0, [r5, #4]
   1d8c0:	stm	sp, {r3, r7, fp, lr}
   1d8c4:	mvn	r3, #0
   1d8c8:	str	ip, [sp, #16]
   1d8cc:	bl	1a048 <__assert_fail@plt+0x8828>
   1d8d0:	ldr	r3, [sp, #28]
   1d8d4:	mov	r0, r6
   1d8d8:	str	r3, [r8]
   1d8dc:	add	sp, sp, #44	; 0x2c
   1d8e0:	ldrd	r4, [sp]
   1d8e4:	ldrd	r6, [sp, #8]
   1d8e8:	ldrd	r8, [sp, #16]
   1d8ec:	ldrd	sl, [sp, #24]
   1d8f0:	add	sp, sp, #32
   1d8f4:	pop	{pc}		; (ldr pc, [sp], #4)
   1d8f8:	mov	r0, #8
   1d8fc:	mvn	r3, #-2147483648	; 0x80000000
   1d900:	add	r1, sp, #36	; 0x24
   1d904:	str	r0, [sp]
   1d908:	mov	r0, #0
   1d90c:	bl	1ebf4 <__assert_fail@plt+0xd3d4>
   1d910:	ldrd	r2, [r4, #8]
   1d914:	mov	r5, r0
   1d918:	str	r0, [r4]
   1d91c:	strd	r2, [r0]
   1d920:	b	1d80c <__assert_fail@plt+0xbfec>
   1d924:	andeq	r3, r3, r8, lsr #3
   1d928:	strd	r4, [sp, #-16]!
   1d92c:	mov	r5, r0
   1d930:	mov	r4, #0
   1d934:	movw	r0, #8884	; 0x22b4
   1d938:	movt	r0, #2
   1d93c:	str	r6, [sp, #8]
   1d940:	mov	r1, #524288	; 0x80000
   1d944:	str	lr, [sp, #12]
   1d948:	str	r4, [r5, #4]
   1d94c:	bl	1ff90 <__assert_fail@plt+0xe770>
   1d950:	cmp	r0, r4
   1d954:	str	r0, [r5]
   1d958:	movge	r0, r4
   1d95c:	blt	1d970 <__assert_fail@plt+0xc150>
   1d960:	ldrd	r4, [sp]
   1d964:	ldr	r6, [sp, #8]
   1d968:	add	sp, sp, #12
   1d96c:	pop	{pc}		; (ldr pc, [sp], #4)
   1d970:	mov	r1, r4
   1d974:	mov	r0, r4
   1d978:	bl	1161c <getcwd@plt>
   1d97c:	clz	r4, r0
   1d980:	str	r0, [r5, #4]
   1d984:	lsr	r4, r4, #5
   1d988:	ldr	r6, [sp, #8]
   1d98c:	rsb	r0, r4, #0
   1d990:	ldrd	r4, [sp]
   1d994:	add	sp, sp, #12
   1d998:	pop	{pc}		; (ldr pc, [sp], #4)
   1d99c:	ldr	r3, [r0]
   1d9a0:	cmp	r3, #0
   1d9a4:	blt	1d9b0 <__assert_fail@plt+0xc190>
   1d9a8:	mov	r0, r3
   1d9ac:	b	11784 <fchdir@plt>
   1d9b0:	ldr	r0, [r0, #4]
   1d9b4:	b	1fb08 <__assert_fail@plt+0xe2e8>
   1d9b8:	str	r4, [sp, #-8]!
   1d9bc:	mov	r4, r0
   1d9c0:	ldr	r0, [r0]
   1d9c4:	str	lr, [sp, #4]
   1d9c8:	cmp	r0, #0
   1d9cc:	blt	1d9d4 <__assert_fail@plt+0xc1b4>
   1d9d0:	bl	117fc <close@plt>
   1d9d4:	ldr	r0, [r4, #4]
   1d9d8:	ldr	r4, [sp]
   1d9dc:	ldr	lr, [sp, #4]
   1d9e0:	add	sp, sp, #8
   1d9e4:	b	171c0 <__assert_fail@plt+0x59a0>
   1d9e8:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1d9ec:	mov	r5, r1
   1d9f0:	strd	r6, [sp, #8]
   1d9f4:	str	r8, [sp, #16]
   1d9f8:	str	lr, [sp, #20]
   1d9fc:	bl	11634 <getfilecon@plt>
   1da00:	subs	r4, r0, #0
   1da04:	beq	1da64 <__assert_fail@plt+0xc244>
   1da08:	cmp	r4, #10
   1da0c:	beq	1da28 <__assert_fail@plt+0xc208>
   1da10:	mov	r0, r4
   1da14:	ldrd	r4, [sp]
   1da18:	ldrd	r6, [sp, #8]
   1da1c:	ldr	r8, [sp, #16]
   1da20:	add	sp, sp, #20
   1da24:	pop	{pc}		; (ldr pc, [sp], #4)
   1da28:	ldr	r6, [r5]
   1da2c:	movw	r1, #10276	; 0x2824
   1da30:	movt	r1, #2
   1da34:	mov	r0, r6
   1da38:	bl	1143c <strcmp@plt>
   1da3c:	subs	r7, r0, #0
   1da40:	bne	1da10 <__assert_fail@plt+0xc1f0>
   1da44:	mov	r0, r6
   1da48:	mvn	r4, #0
   1da4c:	bl	117a8 <freecon@plt>
   1da50:	str	r7, [r5]
   1da54:	bl	1167c <__errno_location@plt>
   1da58:	mov	r3, #61	; 0x3d
   1da5c:	str	r3, [r0]
   1da60:	b	1da10 <__assert_fail@plt+0xc1f0>
   1da64:	bl	1167c <__errno_location@plt>
   1da68:	mov	r3, #95	; 0x5f
   1da6c:	mvn	r4, #0
   1da70:	str	r3, [r0]
   1da74:	b	1da10 <__assert_fail@plt+0xc1f0>
   1da78:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1da7c:	mov	r5, r1
   1da80:	strd	r6, [sp, #8]
   1da84:	str	r8, [sp, #16]
   1da88:	str	lr, [sp, #20]
   1da8c:	bl	115a4 <lgetfilecon@plt>
   1da90:	subs	r4, r0, #0
   1da94:	beq	1daf4 <__assert_fail@plt+0xc2d4>
   1da98:	cmp	r4, #10
   1da9c:	beq	1dab8 <__assert_fail@plt+0xc298>
   1daa0:	mov	r0, r4
   1daa4:	ldrd	r4, [sp]
   1daa8:	ldrd	r6, [sp, #8]
   1daac:	ldr	r8, [sp, #16]
   1dab0:	add	sp, sp, #20
   1dab4:	pop	{pc}		; (ldr pc, [sp], #4)
   1dab8:	ldr	r6, [r5]
   1dabc:	movw	r1, #10276	; 0x2824
   1dac0:	movt	r1, #2
   1dac4:	mov	r0, r6
   1dac8:	bl	1143c <strcmp@plt>
   1dacc:	subs	r7, r0, #0
   1dad0:	bne	1daa0 <__assert_fail@plt+0xc280>
   1dad4:	mov	r0, r6
   1dad8:	mvn	r4, #0
   1dadc:	bl	117a8 <freecon@plt>
   1dae0:	str	r7, [r5]
   1dae4:	bl	1167c <__errno_location@plt>
   1dae8:	mov	r3, #61	; 0x3d
   1daec:	str	r3, [r0]
   1daf0:	b	1daa0 <__assert_fail@plt+0xc280>
   1daf4:	bl	1167c <__errno_location@plt>
   1daf8:	mov	r3, #95	; 0x5f
   1dafc:	mvn	r4, #0
   1db00:	str	r3, [r0]
   1db04:	b	1daa0 <__assert_fail@plt+0xc280>
   1db08:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1db0c:	mov	r5, r1
   1db10:	strd	r6, [sp, #8]
   1db14:	str	r8, [sp, #16]
   1db18:	str	lr, [sp, #20]
   1db1c:	bl	114d8 <fgetfilecon@plt>
   1db20:	subs	r4, r0, #0
   1db24:	beq	1db84 <__assert_fail@plt+0xc364>
   1db28:	cmp	r4, #10
   1db2c:	beq	1db48 <__assert_fail@plt+0xc328>
   1db30:	mov	r0, r4
   1db34:	ldrd	r4, [sp]
   1db38:	ldrd	r6, [sp, #8]
   1db3c:	ldr	r8, [sp, #16]
   1db40:	add	sp, sp, #20
   1db44:	pop	{pc}		; (ldr pc, [sp], #4)
   1db48:	ldr	r6, [r5]
   1db4c:	movw	r1, #10276	; 0x2824
   1db50:	movt	r1, #2
   1db54:	mov	r0, r6
   1db58:	bl	1143c <strcmp@plt>
   1db5c:	subs	r7, r0, #0
   1db60:	bne	1db30 <__assert_fail@plt+0xc310>
   1db64:	mov	r0, r6
   1db68:	mvn	r4, #0
   1db6c:	bl	117a8 <freecon@plt>
   1db70:	str	r7, [r5]
   1db74:	bl	1167c <__errno_location@plt>
   1db78:	mov	r3, #61	; 0x3d
   1db7c:	str	r3, [r0]
   1db80:	b	1db30 <__assert_fail@plt+0xc310>
   1db84:	bl	1167c <__errno_location@plt>
   1db88:	mov	r3, #95	; 0x5f
   1db8c:	mvn	r4, #0
   1db90:	str	r3, [r0]
   1db94:	b	1db30 <__assert_fail@plt+0xc310>
   1db98:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1db9c:	strd	r6, [sp, #8]
   1dba0:	mov	r6, r0
   1dba4:	movw	r0, #3504	; 0xdb0
   1dba8:	movt	r0, #2
   1dbac:	str	r8, [sp, #16]
   1dbb0:	str	lr, [sp, #20]
   1dbb4:	bl	11598 <getenv@plt>
   1dbb8:	subs	r5, r0, #0
   1dbbc:	ldrb	r3, [r6, #4]
   1dbc0:	beq	1dc78 <__assert_fail@plt+0xc458>
   1dbc4:	cmp	r3, #0
   1dbc8:	beq	1dbfc <__assert_fail@plt+0xc3dc>
   1dbcc:	mov	r1, r5
   1dbd0:	add	r0, r6, #5
   1dbd4:	bl	1143c <strcmp@plt>
   1dbd8:	cmp	r0, #0
   1dbdc:	bne	1dbfc <__assert_fail@plt+0xc3dc>
   1dbe0:	mov	r4, #1
   1dbe4:	mov	r0, r4
   1dbe8:	ldrd	r4, [sp]
   1dbec:	ldrd	r6, [sp, #8]
   1dbf0:	ldr	r8, [sp, #16]
   1dbf4:	add	sp, sp, #20
   1dbf8:	pop	{pc}		; (ldr pc, [sp], #4)
   1dbfc:	mov	r0, r5
   1dc00:	bl	11640 <strlen@plt>
   1dc04:	add	r7, r0, #1
   1dc08:	cmp	r7, #58	; 0x3a
   1dc0c:	movcs	r0, r7
   1dc10:	movcc	r0, #58	; 0x3a
   1dc14:	add	r0, r0, #9
   1dc18:	bic	r0, r0, #3
   1dc1c:	bl	1efe8 <__assert_fail@plt+0xd7c8>
   1dc20:	subs	r4, r0, #0
   1dc24:	beq	1dc98 <__assert_fail@plt+0xc478>
   1dc28:	mov	r8, #0
   1dc2c:	mov	ip, #1
   1dc30:	add	r3, r4, #5
   1dc34:	mov	r1, r5
   1dc38:	mov	r0, r3
   1dc3c:	mov	r2, r7
   1dc40:	str	r8, [r4]
   1dc44:	strh	ip, [r4, #4]
   1dc48:	bl	11490 <memcpy@plt>
   1dc4c:	strb	r8, [r0, r7]
   1dc50:	ldrb	r3, [r6, #4]
   1dc54:	cmp	r3, #0
   1dc58:	bne	1dca0 <__assert_fail@plt+0xc480>
   1dc5c:	movw	r0, #3504	; 0xdb0
   1dc60:	movt	r0, #2
   1dc64:	bl	117d8 <unsetenv@plt>
   1dc68:	cmp	r0, #0
   1dc6c:	bne	1dcbc <__assert_fail@plt+0xc49c>
   1dc70:	bl	11514 <tzset@plt>
   1dc74:	b	1dbe4 <__assert_fail@plt+0xc3c4>
   1dc78:	cmp	r3, #0
   1dc7c:	beq	1dbe0 <__assert_fail@plt+0xc3c0>
   1dc80:	mov	r0, #64	; 0x40
   1dc84:	bl	1efe8 <__assert_fail@plt+0xd7c8>
   1dc88:	subs	r4, r0, #0
   1dc8c:	strne	r5, [r4]
   1dc90:	strhne	r5, [r4, #4]
   1dc94:	bne	1dc50 <__assert_fail@plt+0xc430>
   1dc98:	mov	r4, #0
   1dc9c:	b	1dbe4 <__assert_fail@plt+0xc3c4>
   1dca0:	add	r1, r6, #5
   1dca4:	movw	r0, #3504	; 0xdb0
   1dca8:	movt	r0, #2
   1dcac:	mov	r2, #1
   1dcb0:	bl	11658 <setenv@plt>
   1dcb4:	cmp	r0, #0
   1dcb8:	beq	1dc70 <__assert_fail@plt+0xc450>
   1dcbc:	bl	1167c <__errno_location@plt>
   1dcc0:	cmp	r4, #1
   1dcc4:	mov	r5, r0
   1dcc8:	ldr	r6, [r0]
   1dccc:	beq	1dce4 <__assert_fail@plt+0xc4c4>
   1dcd0:	mov	r0, r4
   1dcd4:	ldr	r4, [r4]
   1dcd8:	bl	171c0 <__assert_fail@plt+0x59a0>
   1dcdc:	cmp	r4, #0
   1dce0:	bne	1dcd0 <__assert_fail@plt+0xc4b0>
   1dce4:	mov	r4, #0
   1dce8:	str	r6, [r5]
   1dcec:	b	1dbe4 <__assert_fail@plt+0xc3c4>
   1dcf0:	strd	r4, [sp, #-32]!	; 0xffffffe0
   1dcf4:	strd	r6, [sp, #8]
   1dcf8:	ldr	r6, [r1, #40]	; 0x28
   1dcfc:	strd	r8, [sp, #16]
   1dd00:	str	sl, [sp, #24]
   1dd04:	str	lr, [sp, #28]
   1dd08:	cmp	r6, #0
   1dd0c:	beq	1de1c <__assert_fail@plt+0xc5fc>
   1dd10:	cmp	r1, r6
   1dd14:	mov	r7, r1
   1dd18:	mov	r5, r0
   1dd1c:	bhi	1dd2c <__assert_fail@plt+0xc50c>
   1dd20:	add	r3, r1, #44	; 0x2c
   1dd24:	cmp	r6, r3
   1dd28:	bcc	1de1c <__assert_fail@plt+0xc5fc>
   1dd2c:	ldrb	r3, [r6]
   1dd30:	cmp	r3, #0
   1dd34:	addne	r4, r5, #5
   1dd38:	beq	1de10 <__assert_fail@plt+0xc5f0>
   1dd3c:	mov	r1, r6
   1dd40:	mov	r0, r4
   1dd44:	bl	1143c <strcmp@plt>
   1dd48:	cmp	r0, #0
   1dd4c:	add	r2, r5, #5
   1dd50:	mov	r0, r4
   1dd54:	beq	1ddf0 <__assert_fail@plt+0xc5d0>
   1dd58:	ldrb	r3, [r4]
   1dd5c:	cmp	r3, #0
   1dd60:	bne	1dd78 <__assert_fail@plt+0xc558>
   1dd64:	cmp	r4, r2
   1dd68:	bne	1de24 <__assert_fail@plt+0xc604>
   1dd6c:	ldrb	r3, [r5, #4]
   1dd70:	cmp	r3, #0
   1dd74:	beq	1de24 <__assert_fail@plt+0xc604>
   1dd78:	bl	11640 <strlen@plt>
   1dd7c:	add	r0, r0, #1
   1dd80:	ldrb	r3, [r4, r0]!
   1dd84:	cmp	r3, #0
   1dd88:	bne	1dd3c <__assert_fail@plt+0xc51c>
   1dd8c:	ldr	r3, [r5]
   1dd90:	cmp	r3, #0
   1dd94:	addne	r4, r3, #5
   1dd98:	movne	r5, r3
   1dd9c:	b	1dd3c <__assert_fail@plt+0xc51c>
   1dda0:	cmp	r8, #58	; 0x3a
   1dda4:	movcs	r0, r8
   1dda8:	movcc	r0, #58	; 0x3a
   1ddac:	add	r0, r0, #9
   1ddb0:	bic	r0, r0, #3
   1ddb4:	bl	1efe8 <__assert_fail@plt+0xd7c8>
   1ddb8:	subs	r9, r0, #0
   1ddbc:	beq	1de5c <__assert_fail@plt+0xc63c>
   1ddc0:	mov	sl, #0
   1ddc4:	mov	r3, #1
   1ddc8:	add	r4, r9, #5
   1ddcc:	mov	r1, r6
   1ddd0:	mov	r0, r4
   1ddd4:	mov	r2, r8
   1ddd8:	str	sl, [r9]
   1dddc:	strh	r3, [r9, #4]
   1dde0:	bl	11490 <memcpy@plt>
   1dde4:	strb	sl, [r4, r8]
   1dde8:	str	r9, [r5]
   1ddec:	strb	sl, [r9, #4]
   1ddf0:	mov	r0, #1
   1ddf4:	str	r4, [r7, #40]	; 0x28
   1ddf8:	ldrd	r4, [sp]
   1ddfc:	ldrd	r6, [sp, #8]
   1de00:	ldrd	r8, [sp, #16]
   1de04:	ldr	sl, [sp, #24]
   1de08:	add	sp, sp, #28
   1de0c:	pop	{pc}		; (ldr pc, [sp], #4)
   1de10:	movw	r4, #3392	; 0xd40
   1de14:	movt	r4, #2
   1de18:	b	1ddf0 <__assert_fail@plt+0xc5d0>
   1de1c:	mov	r0, #1
   1de20:	b	1ddf8 <__assert_fail@plt+0xc5d8>
   1de24:	mov	r0, r6
   1de28:	bl	11640 <strlen@plt>
   1de2c:	add	r3, r5, #64	; 0x40
   1de30:	add	r8, r0, #1
   1de34:	sub	r3, r3, r4
   1de38:	cmp	r3, r8
   1de3c:	ble	1dda0 <__assert_fail@plt+0xc580>
   1de40:	mov	r1, r6
   1de44:	mov	r2, r8
   1de48:	mov	r0, r4
   1de4c:	bl	11490 <memcpy@plt>
   1de50:	mov	r3, #0
   1de54:	strb	r3, [r4, r8]
   1de58:	b	1ddf0 <__assert_fail@plt+0xc5d0>
   1de5c:	mov	r0, r9
   1de60:	str	r9, [r5]
   1de64:	b	1ddf8 <__assert_fail@plt+0xc5d8>
   1de68:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1de6c:	strd	r6, [sp, #8]
   1de70:	subs	r6, r0, #0
   1de74:	str	r8, [sp, #16]
   1de78:	str	lr, [sp, #20]
   1de7c:	beq	1dee8 <__assert_fail@plt+0xc6c8>
   1de80:	bl	11640 <strlen@plt>
   1de84:	add	r5, r0, #1
   1de88:	cmp	r5, #58	; 0x3a
   1de8c:	movcs	r0, r5
   1de90:	movcc	r0, #58	; 0x3a
   1de94:	add	r0, r0, #9
   1de98:	bic	r0, r0, #3
   1de9c:	bl	1efe8 <__assert_fail@plt+0xd7c8>
   1dea0:	subs	r4, r0, #0
   1dea4:	beq	1ded0 <__assert_fail@plt+0xc6b0>
   1dea8:	mov	r7, #0
   1deac:	mov	ip, #1
   1deb0:	add	r3, r4, #5
   1deb4:	mov	r1, r6
   1deb8:	mov	r0, r3
   1debc:	mov	r2, r5
   1dec0:	str	r7, [r4]
   1dec4:	strh	ip, [r4, #4]
   1dec8:	bl	11490 <memcpy@plt>
   1decc:	strb	r7, [r0, r5]
   1ded0:	mov	r0, r4
   1ded4:	ldrd	r4, [sp]
   1ded8:	ldrd	r6, [sp, #8]
   1dedc:	ldr	r8, [sp, #16]
   1dee0:	add	sp, sp, #20
   1dee4:	pop	{pc}		; (ldr pc, [sp], #4)
   1dee8:	mov	r0, #64	; 0x40
   1deec:	bl	1efe8 <__assert_fail@plt+0xd7c8>
   1def0:	subs	r4, r0, #0
   1def4:	strne	r6, [r4]
   1def8:	strhne	r6, [r4, #4]
   1defc:	b	1ded0 <__assert_fail@plt+0xc6b0>
   1df00:	cmp	r0, #1
   1df04:	bxeq	lr
   1df08:	cmp	r0, #0
   1df0c:	bxeq	lr
   1df10:	str	r4, [sp, #-8]!
   1df14:	str	lr, [sp, #4]
   1df18:	ldr	r4, [r0]
   1df1c:	bl	171c0 <__assert_fail@plt+0x59a0>
   1df20:	subs	r0, r4, #0
   1df24:	bne	1df18 <__assert_fail@plt+0xc6f8>
   1df28:	ldr	r4, [sp]
   1df2c:	add	sp, sp, #4
   1df30:	pop	{pc}		; (ldr pc, [sp], #4)
   1df34:	subs	ip, r0, #0
   1df38:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1df3c:	strd	r6, [sp, #8]
   1df40:	mov	r6, r1
   1df44:	str	r8, [sp, #16]
   1df48:	str	lr, [sp, #20]
   1df4c:	beq	1e030 <__assert_fail@plt+0xc810>
   1df50:	mov	r5, r2
   1df54:	mov	r7, ip
   1df58:	bl	1db98 <__assert_fail@plt+0xc378>
   1df5c:	subs	r4, r0, #0
   1df60:	beq	1e004 <__assert_fail@plt+0xc7e4>
   1df64:	mov	r0, r6
   1df68:	mov	r1, r5
   1df6c:	bl	114e4 <localtime_r@plt>
   1df70:	cmp	r0, #0
   1df74:	beq	1dff8 <__assert_fail@plt+0xc7d8>
   1df78:	mov	r0, r7
   1df7c:	mov	r1, r5
   1df80:	bl	1dcf0 <__assert_fail@plt+0xc4d0>
   1df84:	subs	r7, r0, #0
   1df88:	beq	1dff8 <__assert_fail@plt+0xc7d8>
   1df8c:	cmp	r4, #1
   1df90:	beq	1dff0 <__assert_fail@plt+0xc7d0>
   1df94:	bl	1167c <__errno_location@plt>
   1df98:	ldrb	r3, [r4, #4]
   1df9c:	mov	r6, r0
   1dfa0:	movw	r0, #3504	; 0xdb0
   1dfa4:	movt	r0, #2
   1dfa8:	ldr	r8, [r6]
   1dfac:	cmp	r3, #0
   1dfb0:	beq	1e01c <__assert_fail@plt+0xc7fc>
   1dfb4:	mov	r2, #1
   1dfb8:	add	r1, r4, #5
   1dfbc:	bl	11658 <setenv@plt>
   1dfc0:	cmp	r0, #0
   1dfc4:	beq	1e028 <__assert_fail@plt+0xc808>
   1dfc8:	ldr	r8, [r6]
   1dfcc:	mov	r7, #0
   1dfd0:	mov	r0, r4
   1dfd4:	ldr	r4, [r4]
   1dfd8:	bl	171c0 <__assert_fail@plt+0x59a0>
   1dfdc:	cmp	r4, #0
   1dfe0:	bne	1dfd0 <__assert_fail@plt+0xc7b0>
   1dfe4:	cmp	r7, #0
   1dfe8:	str	r8, [r6]
   1dfec:	beq	1e004 <__assert_fail@plt+0xc7e4>
   1dff0:	mov	r0, r5
   1dff4:	b	1e008 <__assert_fail@plt+0xc7e8>
   1dff8:	cmp	r4, #1
   1dffc:	movne	r7, #0
   1e000:	bne	1df94 <__assert_fail@plt+0xc774>
   1e004:	mov	r0, #0
   1e008:	ldrd	r4, [sp]
   1e00c:	ldrd	r6, [sp, #8]
   1e010:	ldr	r8, [sp, #16]
   1e014:	add	sp, sp, #20
   1e018:	pop	{pc}		; (ldr pc, [sp], #4)
   1e01c:	bl	117d8 <unsetenv@plt>
   1e020:	cmp	r0, #0
   1e024:	bne	1dfc8 <__assert_fail@plt+0xc7a8>
   1e028:	bl	11514 <tzset@plt>
   1e02c:	b	1dfd0 <__assert_fail@plt+0xc7b0>
   1e030:	mov	r0, r6
   1e034:	mov	r1, r2
   1e038:	ldrd	r4, [sp]
   1e03c:	ldrd	r6, [sp, #8]
   1e040:	ldr	r8, [sp, #16]
   1e044:	ldr	lr, [sp, #20]
   1e048:	add	sp, sp, #24
   1e04c:	b	11418 <gmtime_r@plt>
   1e050:	strd	r4, [sp, #-28]!	; 0xffffffe4
   1e054:	subs	r5, r0, #0
   1e058:	strd	r6, [sp, #8]
   1e05c:	mov	r6, r1
   1e060:	strd	r8, [sp, #16]
   1e064:	str	lr, [sp, #24]
   1e068:	sub	sp, sp, #52	; 0x34
   1e06c:	beq	1e1b0 <__assert_fail@plt+0xc990>
   1e070:	bl	1db98 <__assert_fail@plt+0xc378>
   1e074:	subs	r4, r0, #0
   1e078:	beq	1e1c0 <__assert_fail@plt+0xc9a0>
   1e07c:	ldr	r3, [r6]
   1e080:	mvn	r2, #0
   1e084:	add	r0, sp, #4
   1e088:	ldr	r1, [r6, #4]
   1e08c:	str	r3, [sp, #4]
   1e090:	str	r2, [sp, #32]
   1e094:	ldrd	r2, [r6, #8]
   1e098:	str	r1, [sp, #8]
   1e09c:	ldr	r1, [r6, #16]
   1e0a0:	strd	r2, [sp, #12]
   1e0a4:	ldr	r2, [r6, #20]
   1e0a8:	str	r1, [sp, #20]
   1e0ac:	ldr	r3, [r6, #32]
   1e0b0:	str	r2, [sp, #24]
   1e0b4:	str	r3, [sp, #36]	; 0x24
   1e0b8:	bl	11460 <mktime@plt>
   1e0bc:	ldr	r3, [sp, #32]
   1e0c0:	mov	r7, r0
   1e0c4:	cmp	r3, #0
   1e0c8:	bge	1e17c <__assert_fail@plt+0xc95c>
   1e0cc:	cmp	r4, #1
   1e0d0:	beq	1e1c0 <__assert_fail@plt+0xc9a0>
   1e0d4:	mov	r5, #0
   1e0d8:	bl	1167c <__errno_location@plt>
   1e0dc:	ldrb	r3, [r4, #4]
   1e0e0:	mov	r8, r0
   1e0e4:	movw	r0, #3504	; 0xdb0
   1e0e8:	movt	r0, #2
   1e0ec:	ldr	r9, [r8]
   1e0f0:	cmp	r3, #0
   1e0f4:	beq	1e1a8 <__assert_fail@plt+0xc988>
   1e0f8:	mov	r2, #1
   1e0fc:	add	r1, r4, #5
   1e100:	bl	11658 <setenv@plt>
   1e104:	cmp	r0, #0
   1e108:	bne	1e19c <__assert_fail@plt+0xc97c>
   1e10c:	bl	11514 <tzset@plt>
   1e110:	mov	r0, r4
   1e114:	ldr	r4, [r4]
   1e118:	bl	171c0 <__assert_fail@plt+0x59a0>
   1e11c:	cmp	r4, #0
   1e120:	bne	1e110 <__assert_fail@plt+0xc8f0>
   1e124:	cmp	r5, #0
   1e128:	str	r9, [r8]
   1e12c:	beq	1e1c0 <__assert_fail@plt+0xc9a0>
   1e130:	ldrd	r0, [sp, #4]
   1e134:	ldrd	r2, [sp, #12]
   1e138:	ldrd	r4, [sp, #20]
   1e13c:	strd	r0, [r6]
   1e140:	ldrd	r0, [sp, #28]
   1e144:	strd	r2, [r6, #8]
   1e148:	ldrd	r2, [sp, #36]	; 0x24
   1e14c:	strd	r4, [r6, #16]
   1e150:	ldr	ip, [sp, #44]	; 0x2c
   1e154:	strd	r0, [r6, #24]
   1e158:	strd	r2, [r6, #32]
   1e15c:	str	ip, [r6, #40]	; 0x28
   1e160:	mov	r0, r7
   1e164:	add	sp, sp, #52	; 0x34
   1e168:	ldrd	r4, [sp]
   1e16c:	ldrd	r6, [sp, #8]
   1e170:	ldrd	r8, [sp, #16]
   1e174:	add	sp, sp, #24
   1e178:	pop	{pc}		; (ldr pc, [sp], #4)
   1e17c:	mov	r0, r5
   1e180:	add	r1, sp, #4
   1e184:	bl	1dcf0 <__assert_fail@plt+0xc4d0>
   1e188:	subs	r5, r0, #0
   1e18c:	beq	1e0cc <__assert_fail@plt+0xc8ac>
   1e190:	cmp	r4, #1
   1e194:	beq	1e130 <__assert_fail@plt+0xc910>
   1e198:	b	1e0d8 <__assert_fail@plt+0xc8b8>
   1e19c:	mov	r5, #0
   1e1a0:	ldr	r9, [r8]
   1e1a4:	b	1e110 <__assert_fail@plt+0xc8f0>
   1e1a8:	bl	117d8 <unsetenv@plt>
   1e1ac:	b	1e104 <__assert_fail@plt+0xc8e4>
   1e1b0:	mov	r0, r1
   1e1b4:	bl	11778 <timegm@plt>
   1e1b8:	mov	r7, r0
   1e1bc:	b	1e160 <__assert_fail@plt+0xc940>
   1e1c0:	mvn	r7, #0
   1e1c4:	b	1e160 <__assert_fail@plt+0xc940>
   1e1c8:	cmp	r1, #0
   1e1cc:	strd	r4, [sp, #-16]!
   1e1d0:	mov	ip, r3
   1e1d4:	str	r6, [sp, #8]
   1e1d8:	mov	r4, r0
   1e1dc:	str	lr, [sp, #12]
   1e1e0:	sub	sp, sp, #32
   1e1e4:	ldr	r5, [sp, #48]	; 0x30
   1e1e8:	ldr	r6, [sp, #52]	; 0x34
   1e1ec:	beq	1e330 <__assert_fail@plt+0xcb10>
   1e1f0:	mov	r3, r1
   1e1f4:	mov	r1, #1
   1e1f8:	stm	sp, {r2, ip}
   1e1fc:	movw	r2, #10288	; 0x2830
   1e200:	movt	r2, #2
   1e204:	bl	116d0 <__fprintf_chk@plt>
   1e208:	mov	r2, #5
   1e20c:	movw	r1, #10308	; 0x2844
   1e210:	movt	r1, #2
   1e214:	mov	r0, #0
   1e218:	bl	114c0 <dcgettext@plt>
   1e21c:	movw	ip, #2022	; 0x7e6
   1e220:	mov	r3, r0
   1e224:	mov	r1, #1
   1e228:	movw	r2, #11036	; 0x2b1c
   1e22c:	movt	r2, #2
   1e230:	mov	r0, r4
   1e234:	str	ip, [sp]
   1e238:	bl	116d0 <__fprintf_chk@plt>
   1e23c:	mov	r1, r4
   1e240:	mov	r0, #10
   1e244:	bl	114b4 <fputc_unlocked@plt>
   1e248:	mov	r2, #5
   1e24c:	movw	r1, #10312	; 0x2848
   1e250:	movt	r1, #2
   1e254:	mov	r0, #0
   1e258:	bl	114c0 <dcgettext@plt>
   1e25c:	mov	r2, r0
   1e260:	mov	r1, #1
   1e264:	movw	r3, #10484	; 0x28f4
   1e268:	movt	r3, #2
   1e26c:	mov	r0, r4
   1e270:	bl	116d0 <__fprintf_chk@plt>
   1e274:	mov	r1, r4
   1e278:	mov	r0, #10
   1e27c:	bl	114b4 <fputc_unlocked@plt>
   1e280:	cmp	r6, #9
   1e284:	ldrls	pc, [pc, r6, lsl #2]
   1e288:	b	1e59c <__assert_fail@plt+0xcd7c>
   1e28c:	andeq	lr, r1, ip, lsl r3
   1e290:	andeq	lr, r1, ip, asr #6
   1e294:	andeq	lr, r1, r8, lsl #7
   1e298:	andeq	lr, r1, r8, asr #7
   1e29c:	andeq	lr, r1, r0, lsl r4
   1e2a0:	andeq	lr, r1, r8, asr #8
   1e2a4:	muleq	r1, r0, r4
   1e2a8:	andeq	lr, r1, r4, ror #9
   1e2ac:	andeq	lr, r1, ip, lsr r5
   1e2b0:			; <UNDEFINED> instruction: 0x0001e2b4
   1e2b4:	movw	r1, #10788	; 0x2a24
   1e2b8:	movt	r1, #2
   1e2bc:	mov	r2, #5
   1e2c0:	mov	r0, #0
   1e2c4:	bl	114c0 <dcgettext@plt>
   1e2c8:	ldr	lr, [r5, #4]
   1e2cc:	mov	r2, r0
   1e2d0:	mov	r1, #1
   1e2d4:	mov	r0, r4
   1e2d8:	ldr	r3, [r5, #8]
   1e2dc:	ldr	ip, [r5, #32]
   1e2e0:	str	lr, [sp]
   1e2e4:	ldr	lr, [r5, #12]
   1e2e8:	str	ip, [sp, #28]
   1e2ec:	ldr	ip, [r5, #28]
   1e2f0:	str	r3, [sp, #4]
   1e2f4:	ldr	r3, [r5, #16]
   1e2f8:	str	lr, [sp, #8]
   1e2fc:	ldr	lr, [r5, #20]
   1e300:	str	ip, [sp, #24]
   1e304:	ldr	ip, [r5, #24]
   1e308:	str	r3, [sp, #12]
   1e30c:	ldr	r3, [r5]
   1e310:	str	lr, [sp, #16]
   1e314:	str	ip, [sp, #20]
   1e318:	bl	116d0 <__fprintf_chk@plt>
   1e31c:	add	sp, sp, #32
   1e320:	ldrd	r4, [sp]
   1e324:	ldr	r6, [sp, #8]
   1e328:	add	sp, sp, #12
   1e32c:	pop	{pc}		; (ldr pc, [sp], #4)
   1e330:	mov	r3, r2
   1e334:	mov	r1, #1
   1e338:	str	ip, [sp]
   1e33c:	movw	r2, #10300	; 0x283c
   1e340:	movt	r2, #2
   1e344:	bl	116d0 <__fprintf_chk@plt>
   1e348:	b	1e208 <__assert_fail@plt+0xc9e8>
   1e34c:	mov	r2, #5
   1e350:	movw	r1, #10520	; 0x2918
   1e354:	movt	r1, #2
   1e358:	mov	r0, #0
   1e35c:	bl	114c0 <dcgettext@plt>
   1e360:	ldr	r3, [r5]
   1e364:	mov	r2, r0
   1e368:	mov	r1, #1
   1e36c:	mov	r0, r4
   1e370:	add	sp, sp, #32
   1e374:	ldrd	r4, [sp]
   1e378:	ldr	r6, [sp, #8]
   1e37c:	ldr	lr, [sp, #12]
   1e380:	add	sp, sp, #16
   1e384:	b	116d0 <__fprintf_chk@plt>
   1e388:	mov	r2, #5
   1e38c:	movw	r1, #10536	; 0x2928
   1e390:	movt	r1, #2
   1e394:	mov	r0, #0
   1e398:	bl	114c0 <dcgettext@plt>
   1e39c:	ldm	r5, {r3, ip}
   1e3a0:	mov	r2, r0
   1e3a4:	mov	r1, #1
   1e3a8:	mov	r0, r4
   1e3ac:	str	ip, [sp, #48]	; 0x30
   1e3b0:	add	sp, sp, #32
   1e3b4:	ldrd	r4, [sp]
   1e3b8:	ldr	r6, [sp, #8]
   1e3bc:	ldr	lr, [sp, #12]
   1e3c0:	add	sp, sp, #16
   1e3c4:	b	116d0 <__fprintf_chk@plt>
   1e3c8:	mov	r2, #5
   1e3cc:	movw	r1, #10560	; 0x2940
   1e3d0:	movt	r1, #2
   1e3d4:	mov	r0, #0
   1e3d8:	bl	114c0 <dcgettext@plt>
   1e3dc:	ldm	r5, {r3, lr}
   1e3e0:	mov	r2, r0
   1e3e4:	mov	r1, #1
   1e3e8:	mov	r0, r4
   1e3ec:	ldr	ip, [r5, #8]
   1e3f0:	str	lr, [sp, #48]	; 0x30
   1e3f4:	str	ip, [sp, #52]	; 0x34
   1e3f8:	add	sp, sp, #32
   1e3fc:	ldrd	r4, [sp]
   1e400:	ldr	r6, [sp, #8]
   1e404:	ldr	lr, [sp, #12]
   1e408:	add	sp, sp, #16
   1e40c:	b	116d0 <__fprintf_chk@plt>
   1e410:	mov	r2, #5
   1e414:	movw	r1, #10588	; 0x295c
   1e418:	movt	r1, #2
   1e41c:	mov	r0, #0
   1e420:	bl	114c0 <dcgettext@plt>
   1e424:	ldmib	r5, {r3, ip, lr}
   1e428:	mov	r2, r0
   1e42c:	mov	r1, #1
   1e430:	mov	r0, r4
   1e434:	str	r3, [sp]
   1e438:	ldr	r3, [r5]
   1e43c:	stmib	sp, {ip, lr}
   1e440:	bl	116d0 <__fprintf_chk@plt>
   1e444:	b	1e31c <__assert_fail@plt+0xcafc>
   1e448:	mov	r2, #5
   1e44c:	movw	r1, #10620	; 0x297c
   1e450:	movt	r1, #2
   1e454:	mov	r0, #0
   1e458:	bl	114c0 <dcgettext@plt>
   1e45c:	ldmib	r5, {ip, lr}
   1e460:	mov	r2, r0
   1e464:	mov	r1, #1
   1e468:	mov	r0, r4
   1e46c:	ldr	r3, [r5, #16]
   1e470:	str	ip, [sp]
   1e474:	ldr	ip, [r5, #12]
   1e478:	str	r3, [sp, #12]
   1e47c:	ldr	r3, [r5]
   1e480:	str	lr, [sp, #4]
   1e484:	str	ip, [sp, #8]
   1e488:	bl	116d0 <__fprintf_chk@plt>
   1e48c:	b	1e31c <__assert_fail@plt+0xcafc>
   1e490:	mov	r2, #5
   1e494:	movw	r1, #10656	; 0x29a0
   1e498:	movt	r1, #2
   1e49c:	mov	r0, #0
   1e4a0:	bl	114c0 <dcgettext@plt>
   1e4a4:	ldr	lr, [r5, #4]
   1e4a8:	mov	r2, r0
   1e4ac:	mov	r1, #1
   1e4b0:	mov	r0, r4
   1e4b4:	ldr	r3, [r5, #8]
   1e4b8:	ldr	ip, [r5, #20]
   1e4bc:	str	lr, [sp]
   1e4c0:	ldr	lr, [r5, #12]
   1e4c4:	str	ip, [sp, #16]
   1e4c8:	ldr	ip, [r5, #16]
   1e4cc:	str	r3, [sp, #4]
   1e4d0:	ldr	r3, [r5]
   1e4d4:	str	lr, [sp, #8]
   1e4d8:	str	ip, [sp, #12]
   1e4dc:	bl	116d0 <__fprintf_chk@plt>
   1e4e0:	b	1e31c <__assert_fail@plt+0xcafc>
   1e4e4:	mov	r2, #5
   1e4e8:	movw	r1, #10696	; 0x29c8
   1e4ec:	movt	r1, #2
   1e4f0:	mov	r0, #0
   1e4f4:	bl	114c0 <dcgettext@plt>
   1e4f8:	ldmib	r5, {r3, ip}
   1e4fc:	mov	r2, r0
   1e500:	mov	r1, #1
   1e504:	mov	r0, r4
   1e508:	ldr	lr, [r5, #24]
   1e50c:	str	r3, [sp]
   1e510:	ldr	r3, [r5, #12]
   1e514:	str	lr, [sp, #20]
   1e518:	ldr	lr, [r5, #20]
   1e51c:	str	ip, [sp, #4]
   1e520:	ldr	ip, [r5, #16]
   1e524:	str	r3, [sp, #8]
   1e528:	ldr	r3, [r5]
   1e52c:	str	ip, [sp, #12]
   1e530:	str	lr, [sp, #16]
   1e534:	bl	116d0 <__fprintf_chk@plt>
   1e538:	b	1e31c <__assert_fail@plt+0xcafc>
   1e53c:	mov	r2, #5
   1e540:	movw	r1, #10740	; 0x29f4
   1e544:	movt	r1, #2
   1e548:	mov	r0, #0
   1e54c:	bl	114c0 <dcgettext@plt>
   1e550:	ldmib	r5, {ip, lr}
   1e554:	mov	r2, r0
   1e558:	mov	r1, #1
   1e55c:	mov	r0, r4
   1e560:	ldr	r3, [r5, #28]
   1e564:	str	ip, [sp]
   1e568:	ldr	ip, [r5, #12]
   1e56c:	str	r3, [sp, #24]
   1e570:	ldr	r3, [r5, #24]
   1e574:	str	lr, [sp, #4]
   1e578:	ldr	lr, [r5, #16]
   1e57c:	str	ip, [sp, #8]
   1e580:	ldr	ip, [r5, #20]
   1e584:	str	r3, [sp, #20]
   1e588:	ldr	r3, [r5]
   1e58c:	str	lr, [sp, #12]
   1e590:	str	ip, [sp, #16]
   1e594:	bl	116d0 <__fprintf_chk@plt>
   1e598:	b	1e31c <__assert_fail@plt+0xcafc>
   1e59c:	movw	r1, #10840	; 0x2a58
   1e5a0:	movt	r1, #2
   1e5a4:	b	1e2bc <__assert_fail@plt+0xca9c>
   1e5a8:	strd	r4, [sp, #-12]!
   1e5ac:	str	lr, [sp, #8]
   1e5b0:	sub	sp, sp, #12
   1e5b4:	ldr	r5, [sp, #24]
   1e5b8:	ldr	ip, [r5]
   1e5bc:	cmp	ip, #0
   1e5c0:	beq	1e5dc <__assert_fail@plt+0xcdbc>
   1e5c4:	mov	lr, r5
   1e5c8:	mov	ip, #0
   1e5cc:	ldr	r4, [lr, #4]!
   1e5d0:	add	ip, ip, #1
   1e5d4:	cmp	r4, #0
   1e5d8:	bne	1e5cc <__assert_fail@plt+0xcdac>
   1e5dc:	stm	sp, {r5, ip}
   1e5e0:	bl	1e1c8 <__assert_fail@plt+0xc9a8>
   1e5e4:	add	sp, sp, #12
   1e5e8:	ldrd	r4, [sp]
   1e5ec:	add	sp, sp, #8
   1e5f0:	pop	{pc}		; (ldr pc, [sp], #4)
   1e5f4:	push	{lr}		; (str lr, [sp, #-4]!)
   1e5f8:	sub	sp, sp, #52	; 0x34
   1e5fc:	ldr	ip, [sp, #56]	; 0x38
   1e600:	ldr	lr, [ip]
   1e604:	cmp	lr, #0
   1e608:	str	lr, [sp, #8]
   1e60c:	beq	1e6a4 <__assert_fail@plt+0xce84>
   1e610:	ldr	lr, [ip, #4]
   1e614:	cmp	lr, #0
   1e618:	str	lr, [sp, #12]
   1e61c:	beq	1e6b8 <__assert_fail@plt+0xce98>
   1e620:	ldr	lr, [ip, #8]
   1e624:	cmp	lr, #0
   1e628:	str	lr, [sp, #16]
   1e62c:	beq	1e6c0 <__assert_fail@plt+0xcea0>
   1e630:	ldr	lr, [ip, #12]
   1e634:	cmp	lr, #0
   1e638:	str	lr, [sp, #20]
   1e63c:	beq	1e6c8 <__assert_fail@plt+0xcea8>
   1e640:	ldr	lr, [ip, #16]
   1e644:	cmp	lr, #0
   1e648:	str	lr, [sp, #24]
   1e64c:	beq	1e6d0 <__assert_fail@plt+0xceb0>
   1e650:	ldr	lr, [ip, #20]
   1e654:	cmp	lr, #0
   1e658:	str	lr, [sp, #28]
   1e65c:	beq	1e6d8 <__assert_fail@plt+0xceb8>
   1e660:	ldr	lr, [ip, #24]
   1e664:	cmp	lr, #0
   1e668:	str	lr, [sp, #32]
   1e66c:	beq	1e6e0 <__assert_fail@plt+0xcec0>
   1e670:	ldr	lr, [ip, #28]
   1e674:	cmp	lr, #0
   1e678:	str	lr, [sp, #36]	; 0x24
   1e67c:	beq	1e6e8 <__assert_fail@plt+0xcec8>
   1e680:	ldr	lr, [ip, #32]
   1e684:	cmp	lr, #0
   1e688:	str	lr, [sp, #40]	; 0x28
   1e68c:	beq	1e6f0 <__assert_fail@plt+0xced0>
   1e690:	ldr	ip, [ip, #36]	; 0x24
   1e694:	cmp	ip, #0
   1e698:	str	ip, [sp, #44]	; 0x2c
   1e69c:	movne	lr, #10
   1e6a0:	moveq	lr, #9
   1e6a4:	add	ip, sp, #8
   1e6a8:	stm	sp, {ip, lr}
   1e6ac:	bl	1e1c8 <__assert_fail@plt+0xc9a8>
   1e6b0:	add	sp, sp, #52	; 0x34
   1e6b4:	pop	{pc}		; (ldr pc, [sp], #4)
   1e6b8:	mov	lr, #1
   1e6bc:	b	1e6a4 <__assert_fail@plt+0xce84>
   1e6c0:	mov	lr, #2
   1e6c4:	b	1e6a4 <__assert_fail@plt+0xce84>
   1e6c8:	mov	lr, #3
   1e6cc:	b	1e6a4 <__assert_fail@plt+0xce84>
   1e6d0:	mov	lr, #4
   1e6d4:	b	1e6a4 <__assert_fail@plt+0xce84>
   1e6d8:	mov	lr, #5
   1e6dc:	b	1e6a4 <__assert_fail@plt+0xce84>
   1e6e0:	mov	lr, #6
   1e6e4:	b	1e6a4 <__assert_fail@plt+0xce84>
   1e6e8:	mov	lr, #7
   1e6ec:	b	1e6a4 <__assert_fail@plt+0xce84>
   1e6f0:	mov	lr, #8
   1e6f4:	b	1e6a4 <__assert_fail@plt+0xce84>
   1e6f8:	push	{r3}		; (str r3, [sp, #-4]!)
   1e6fc:	push	{lr}		; (str lr, [sp, #-4]!)
   1e700:	sub	sp, sp, #56	; 0x38
   1e704:	ldr	ip, [sp, #64]	; 0x40
   1e708:	add	r3, sp, #64	; 0x40
   1e70c:	str	r3, [sp, #12]
   1e710:	cmp	ip, #0
   1e714:	str	ip, [sp, #16]
   1e718:	beq	1e7b0 <__assert_fail@plt+0xcf90>
   1e71c:	ldr	ip, [sp, #68]	; 0x44
   1e720:	cmp	ip, #0
   1e724:	str	ip, [sp, #20]
   1e728:	beq	1e7d4 <__assert_fail@plt+0xcfb4>
   1e72c:	ldr	ip, [sp, #72]	; 0x48
   1e730:	cmp	ip, #0
   1e734:	str	ip, [sp, #24]
   1e738:	beq	1e7dc <__assert_fail@plt+0xcfbc>
   1e73c:	ldr	ip, [sp, #76]	; 0x4c
   1e740:	cmp	ip, #0
   1e744:	str	ip, [sp, #28]
   1e748:	beq	1e7e4 <__assert_fail@plt+0xcfc4>
   1e74c:	ldr	ip, [sp, #80]	; 0x50
   1e750:	cmp	ip, #0
   1e754:	str	ip, [sp, #32]
   1e758:	beq	1e7ec <__assert_fail@plt+0xcfcc>
   1e75c:	ldr	ip, [sp, #84]	; 0x54
   1e760:	cmp	ip, #0
   1e764:	str	ip, [sp, #36]	; 0x24
   1e768:	beq	1e7f4 <__assert_fail@plt+0xcfd4>
   1e76c:	ldr	ip, [sp, #88]	; 0x58
   1e770:	cmp	ip, #0
   1e774:	str	ip, [sp, #40]	; 0x28
   1e778:	beq	1e7fc <__assert_fail@plt+0xcfdc>
   1e77c:	ldr	ip, [sp, #92]	; 0x5c
   1e780:	cmp	ip, #0
   1e784:	str	ip, [sp, #44]	; 0x2c
   1e788:	beq	1e804 <__assert_fail@plt+0xcfe4>
   1e78c:	ldr	ip, [sp, #96]	; 0x60
   1e790:	cmp	ip, #0
   1e794:	str	ip, [sp, #48]	; 0x30
   1e798:	beq	1e80c <__assert_fail@plt+0xcfec>
   1e79c:	ldr	r3, [sp, #100]	; 0x64
   1e7a0:	cmp	r3, #0
   1e7a4:	str	r3, [sp, #52]	; 0x34
   1e7a8:	movne	ip, #10
   1e7ac:	moveq	ip, #9
   1e7b0:	ldr	r3, [sp, #60]	; 0x3c
   1e7b4:	add	lr, sp, #16
   1e7b8:	str	lr, [sp]
   1e7bc:	str	ip, [sp, #4]
   1e7c0:	bl	1e1c8 <__assert_fail@plt+0xc9a8>
   1e7c4:	add	sp, sp, #56	; 0x38
   1e7c8:	pop	{lr}		; (ldr lr, [sp], #4)
   1e7cc:	add	sp, sp, #4
   1e7d0:	bx	lr
   1e7d4:	mov	ip, #1
   1e7d8:	b	1e7b0 <__assert_fail@plt+0xcf90>
   1e7dc:	mov	ip, #2
   1e7e0:	b	1e7b0 <__assert_fail@plt+0xcf90>
   1e7e4:	mov	ip, #3
   1e7e8:	b	1e7b0 <__assert_fail@plt+0xcf90>
   1e7ec:	mov	ip, #4
   1e7f0:	b	1e7b0 <__assert_fail@plt+0xcf90>
   1e7f4:	mov	ip, #5
   1e7f8:	b	1e7b0 <__assert_fail@plt+0xcf90>
   1e7fc:	mov	ip, #6
   1e800:	b	1e7b0 <__assert_fail@plt+0xcf90>
   1e804:	mov	ip, #7
   1e808:	b	1e7b0 <__assert_fail@plt+0xcf90>
   1e80c:	mov	ip, #8
   1e810:	b	1e7b0 <__assert_fail@plt+0xcf90>
   1e814:	movw	r3, #12772	; 0x31e4
   1e818:	movt	r3, #3
   1e81c:	str	r4, [sp, #-8]!
   1e820:	mov	r0, #10
   1e824:	ldr	r1, [r3]
   1e828:	str	lr, [sp, #4]
   1e82c:	bl	114b4 <fputc_unlocked@plt>
   1e830:	mov	r2, #5
   1e834:	movw	r1, #10900	; 0x2a94
   1e838:	movt	r1, #2
   1e83c:	mov	r0, #0
   1e840:	bl	114c0 <dcgettext@plt>
   1e844:	mov	r1, r0
   1e848:	movw	r2, #10920	; 0x2aa8
   1e84c:	movt	r2, #2
   1e850:	mov	r0, #1
   1e854:	bl	116b8 <__printf_chk@plt>
   1e858:	mov	r2, #5
   1e85c:	movw	r1, #10944	; 0x2ac0
   1e860:	movt	r1, #2
   1e864:	mov	r0, #0
   1e868:	bl	114c0 <dcgettext@plt>
   1e86c:	mov	r1, r0
   1e870:	movw	r3, #8672	; 0x21e0
   1e874:	movt	r3, #2
   1e878:	movw	r2, #8712	; 0x2208
   1e87c:	movt	r2, #2
   1e880:	mov	r0, #1
   1e884:	bl	116b8 <__printf_chk@plt>
   1e888:	mov	r2, #5
   1e88c:	movw	r1, #10964	; 0x2ad4
   1e890:	movt	r1, #2
   1e894:	mov	r0, #0
   1e898:	bl	114c0 <dcgettext@plt>
   1e89c:	mov	r1, r0
   1e8a0:	movw	r2, #11004	; 0x2afc
   1e8a4:	movt	r2, #2
   1e8a8:	mov	r0, #1
   1e8ac:	ldr	r4, [sp]
   1e8b0:	ldr	lr, [sp, #4]
   1e8b4:	add	sp, sp, #8
   1e8b8:	b	116b8 <__printf_chk@plt>
   1e8bc:	strd	r4, [sp, #-16]!
   1e8c0:	mov	r4, r0
   1e8c4:	mov	r5, r2
   1e8c8:	str	r6, [sp, #8]
   1e8cc:	mov	r6, r1
   1e8d0:	str	lr, [sp, #12]
   1e8d4:	bl	201bc <__assert_fail@plt+0xe99c>
   1e8d8:	cmp	r0, #0
   1e8dc:	beq	1e8f0 <__assert_fail@plt+0xd0d0>
   1e8e0:	ldrd	r4, [sp]
   1e8e4:	ldr	r6, [sp, #8]
   1e8e8:	add	sp, sp, #12
   1e8ec:	pop	{pc}		; (ldr pc, [sp], #4)
   1e8f0:	cmp	r4, #0
   1e8f4:	beq	1e904 <__assert_fail@plt+0xd0e4>
   1e8f8:	cmp	r6, #0
   1e8fc:	cmpne	r5, #0
   1e900:	beq	1e8e0 <__assert_fail@plt+0xd0c0>
   1e904:	bl	1eec0 <__assert_fail@plt+0xd6a0>
   1e908:	str	r4, [sp, #-8]!
   1e90c:	str	lr, [sp, #4]
   1e910:	bl	1efe8 <__assert_fail@plt+0xd7c8>
   1e914:	cmp	r0, #0
   1e918:	beq	1e928 <__assert_fail@plt+0xd108>
   1e91c:	ldr	r4, [sp]
   1e920:	add	sp, sp, #4
   1e924:	pop	{pc}		; (ldr pc, [sp], #4)
   1e928:	bl	1eec0 <__assert_fail@plt+0xd6a0>
   1e92c:	str	r4, [sp, #-8]!
   1e930:	str	lr, [sp, #4]
   1e934:	bl	1efe8 <__assert_fail@plt+0xd7c8>
   1e938:	cmp	r0, #0
   1e93c:	beq	1e94c <__assert_fail@plt+0xd12c>
   1e940:	ldr	r4, [sp]
   1e944:	add	sp, sp, #4
   1e948:	pop	{pc}		; (ldr pc, [sp], #4)
   1e94c:	bl	1eec0 <__assert_fail@plt+0xd6a0>
   1e950:	str	r4, [sp, #-8]!
   1e954:	str	lr, [sp, #4]
   1e958:	bl	1efe8 <__assert_fail@plt+0xd7c8>
   1e95c:	cmp	r0, #0
   1e960:	beq	1e970 <__assert_fail@plt+0xd150>
   1e964:	ldr	r4, [sp]
   1e968:	add	sp, sp, #4
   1e96c:	pop	{pc}		; (ldr pc, [sp], #4)
   1e970:	bl	1eec0 <__assert_fail@plt+0xd6a0>
   1e974:	strd	r4, [sp, #-16]!
   1e978:	mov	r5, r0
   1e97c:	mov	r4, r1
   1e980:	str	r6, [sp, #8]
   1e984:	str	lr, [sp, #12]
   1e988:	bl	1f024 <__assert_fail@plt+0xd804>
   1e98c:	cmp	r0, #0
   1e990:	beq	1e9a4 <__assert_fail@plt+0xd184>
   1e994:	ldrd	r4, [sp]
   1e998:	ldr	r6, [sp, #8]
   1e99c:	add	sp, sp, #12
   1e9a0:	pop	{pc}		; (ldr pc, [sp], #4)
   1e9a4:	adds	r4, r4, #0
   1e9a8:	movne	r4, #1
   1e9ac:	cmp	r5, #0
   1e9b0:	moveq	r4, #1
   1e9b4:	cmp	r4, #0
   1e9b8:	beq	1e994 <__assert_fail@plt+0xd174>
   1e9bc:	bl	1eec0 <__assert_fail@plt+0xd6a0>
   1e9c0:	cmp	r1, #0
   1e9c4:	orreq	r1, r1, #1
   1e9c8:	str	r4, [sp, #-8]!
   1e9cc:	str	lr, [sp, #4]
   1e9d0:	bl	1f024 <__assert_fail@plt+0xd804>
   1e9d4:	cmp	r0, #0
   1e9d8:	beq	1e9e8 <__assert_fail@plt+0xd1c8>
   1e9dc:	ldr	r4, [sp]
   1e9e0:	add	sp, sp, #4
   1e9e4:	pop	{pc}		; (ldr pc, [sp], #4)
   1e9e8:	bl	1eec0 <__assert_fail@plt+0xd6a0>
   1e9ec:	strd	r4, [sp, #-16]!
   1e9f0:	mov	r4, r0
   1e9f4:	mov	r5, r2
   1e9f8:	str	r6, [sp, #8]
   1e9fc:	mov	r6, r1
   1ea00:	str	lr, [sp, #12]
   1ea04:	bl	201bc <__assert_fail@plt+0xe99c>
   1ea08:	cmp	r0, #0
   1ea0c:	beq	1ea20 <__assert_fail@plt+0xd200>
   1ea10:	ldrd	r4, [sp]
   1ea14:	ldr	r6, [sp, #8]
   1ea18:	add	sp, sp, #12
   1ea1c:	pop	{pc}		; (ldr pc, [sp], #4)
   1ea20:	cmp	r4, #0
   1ea24:	beq	1ea34 <__assert_fail@plt+0xd214>
   1ea28:	cmp	r6, #0
   1ea2c:	cmpne	r5, #0
   1ea30:	beq	1ea10 <__assert_fail@plt+0xd1f0>
   1ea34:	bl	1eec0 <__assert_fail@plt+0xd6a0>
   1ea38:	cmp	r2, #0
   1ea3c:	cmpne	r1, #0
   1ea40:	str	r4, [sp, #-8]!
   1ea44:	moveq	r2, #1
   1ea48:	str	lr, [sp, #4]
   1ea4c:	moveq	r1, r2
   1ea50:	bl	201bc <__assert_fail@plt+0xe99c>
   1ea54:	cmp	r0, #0
   1ea58:	beq	1ea68 <__assert_fail@plt+0xd248>
   1ea5c:	ldr	r4, [sp]
   1ea60:	add	sp, sp, #4
   1ea64:	pop	{pc}		; (ldr pc, [sp], #4)
   1ea68:	bl	1eec0 <__assert_fail@plt+0xd6a0>
   1ea6c:	mov	r2, r1
   1ea70:	mov	r1, r0
   1ea74:	str	r4, [sp, #-8]!
   1ea78:	mov	r0, #0
   1ea7c:	str	lr, [sp, #4]
   1ea80:	bl	201bc <__assert_fail@plt+0xe99c>
   1ea84:	cmp	r0, #0
   1ea88:	beq	1ea98 <__assert_fail@plt+0xd278>
   1ea8c:	ldr	r4, [sp]
   1ea90:	add	sp, sp, #4
   1ea94:	pop	{pc}		; (ldr pc, [sp], #4)
   1ea98:	bl	1eec0 <__assert_fail@plt+0xd6a0>
   1ea9c:	cmp	r1, #0
   1eaa0:	cmpne	r0, #0
   1eaa4:	str	r4, [sp, #-8]!
   1eaa8:	moveq	r2, #1
   1eaac:	movne	r2, r1
   1eab0:	str	lr, [sp, #4]
   1eab4:	movne	r1, r0
   1eab8:	moveq	r1, r2
   1eabc:	mov	r0, #0
   1eac0:	bl	201bc <__assert_fail@plt+0xe99c>
   1eac4:	cmp	r0, #0
   1eac8:	beq	1ead8 <__assert_fail@plt+0xd2b8>
   1eacc:	ldr	r4, [sp]
   1ead0:	add	sp, sp, #4
   1ead4:	pop	{pc}		; (ldr pc, [sp], #4)
   1ead8:	bl	1eec0 <__assert_fail@plt+0xd6a0>
   1eadc:	cmp	r0, #0
   1eae0:	strd	r4, [sp, #-16]!
   1eae4:	mov	r5, r1
   1eae8:	ldr	r4, [r1]
   1eaec:	str	r6, [sp, #8]
   1eaf0:	str	lr, [sp, #12]
   1eaf4:	beq	1eb3c <__assert_fail@plt+0xd31c>
   1eaf8:	lsr	r3, r4, #1
   1eafc:	add	r3, r3, #1
   1eb00:	adds	r4, r4, r3
   1eb04:	bcs	1eb38 <__assert_fail@plt+0xd318>
   1eb08:	mov	r2, #1
   1eb0c:	mov	r1, r4
   1eb10:	bl	201bc <__assert_fail@plt+0xe99c>
   1eb14:	cmp	r0, #0
   1eb18:	beq	1eb30 <__assert_fail@plt+0xd310>
   1eb1c:	ldr	r6, [sp, #8]
   1eb20:	str	r4, [r5]
   1eb24:	ldrd	r4, [sp]
   1eb28:	add	sp, sp, #12
   1eb2c:	pop	{pc}		; (ldr pc, [sp], #4)
   1eb30:	cmp	r4, #0
   1eb34:	beq	1eb1c <__assert_fail@plt+0xd2fc>
   1eb38:	bl	1eec0 <__assert_fail@plt+0xd6a0>
   1eb3c:	cmp	r4, #0
   1eb40:	mov	r2, #1
   1eb44:	moveq	r4, #64	; 0x40
   1eb48:	mov	r1, r4
   1eb4c:	bl	201bc <__assert_fail@plt+0xe99c>
   1eb50:	cmp	r0, #0
   1eb54:	bne	1eb1c <__assert_fail@plt+0xd2fc>
   1eb58:	b	1eb38 <__assert_fail@plt+0xd318>
   1eb5c:	cmp	r0, #0
   1eb60:	strd	r4, [sp, #-16]!
   1eb64:	mov	r5, r1
   1eb68:	ldr	r4, [r1]
   1eb6c:	str	r6, [sp, #8]
   1eb70:	mov	r6, r2
   1eb74:	str	lr, [sp, #12]
   1eb78:	beq	1ebc0 <__assert_fail@plt+0xd3a0>
   1eb7c:	lsr	r3, r4, #1
   1eb80:	add	r3, r3, #1
   1eb84:	adds	r4, r4, r3
   1eb88:	bcs	1ebbc <__assert_fail@plt+0xd39c>
   1eb8c:	mov	r1, r4
   1eb90:	bl	201bc <__assert_fail@plt+0xe99c>
   1eb94:	cmp	r0, #0
   1eb98:	beq	1ebb0 <__assert_fail@plt+0xd390>
   1eb9c:	ldr	r6, [sp, #8]
   1eba0:	str	r4, [r5]
   1eba4:	ldrd	r4, [sp]
   1eba8:	add	sp, sp, #12
   1ebac:	pop	{pc}		; (ldr pc, [sp], #4)
   1ebb0:	cmp	r4, #0
   1ebb4:	cmpne	r6, #0
   1ebb8:	beq	1eb9c <__assert_fail@plt+0xd37c>
   1ebbc:	bl	1eec0 <__assert_fail@plt+0xd6a0>
   1ebc0:	cmp	r4, #0
   1ebc4:	bne	1ebd8 <__assert_fail@plt+0xd3b8>
   1ebc8:	mov	r4, #64	; 0x40
   1ebcc:	udiv	r4, r4, r2
   1ebd0:	cmp	r2, #64	; 0x40
   1ebd4:	addhi	r4, r4, #1
   1ebd8:	mov	r2, r6
   1ebdc:	mov	r1, r4
   1ebe0:	mov	r0, #0
   1ebe4:	bl	201bc <__assert_fail@plt+0xe99c>
   1ebe8:	cmp	r0, #0
   1ebec:	bne	1eb9c <__assert_fail@plt+0xd37c>
   1ebf0:	b	1ebbc <__assert_fail@plt+0xd39c>
   1ebf4:	ldr	ip, [r1]
   1ebf8:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1ebfc:	strd	r6, [sp, #8]
   1ec00:	mov	r7, r1
   1ec04:	mov	r6, r0
   1ec08:	str	r8, [sp, #16]
   1ec0c:	mvn	r8, r3
   1ec10:	lsr	r8, r8, #31
   1ec14:	str	lr, [sp, #20]
   1ec18:	asr	r1, ip, #1
   1ec1c:	ldr	lr, [sp, #24]
   1ec20:	adds	r4, ip, r1
   1ec24:	mvnvs	r4, #-2147483648	; 0x80000000
   1ec28:	cmp	r3, r4
   1ec2c:	movge	r1, #0
   1ec30:	andlt	r1, r8, #1
   1ec34:	cmp	r1, #0
   1ec38:	movne	r4, r3
   1ec3c:	smull	r0, r1, r4, lr
   1ec40:	cmp	r1, r0, asr #31
   1ec44:	bne	1ecf4 <__assert_fail@plt+0xd4d4>
   1ec48:	cmp	r0, #63	; 0x3f
   1ec4c:	mov	r5, r0
   1ec50:	ble	1ecc0 <__assert_fail@plt+0xd4a0>
   1ec54:	cmp	r6, #0
   1ec58:	sub	r1, r4, ip
   1ec5c:	streq	r6, [r7]
   1ec60:	cmp	r1, r2
   1ec64:	bge	1ec94 <__assert_fail@plt+0xd474>
   1ec68:	adds	r4, ip, r2
   1ec6c:	bvs	1ecf0 <__assert_fail@plt+0xd4d0>
   1ec70:	cmp	r4, r3
   1ec74:	movle	r3, #0
   1ec78:	andgt	r3, r8, #1
   1ec7c:	cmp	r3, #0
   1ec80:	bne	1ecf0 <__assert_fail@plt+0xd4d0>
   1ec84:	smull	r0, r1, r4, lr
   1ec88:	cmp	r1, r0, asr #31
   1ec8c:	mov	r5, r0
   1ec90:	bne	1ecf0 <__assert_fail@plt+0xd4d0>
   1ec94:	mov	r1, r5
   1ec98:	mov	r0, r6
   1ec9c:	bl	1f024 <__assert_fail@plt+0xd804>
   1eca0:	cmp	r0, #0
   1eca4:	beq	1ecd4 <__assert_fail@plt+0xd4b4>
   1eca8:	ldr	r8, [sp, #16]
   1ecac:	str	r4, [r7]
   1ecb0:	ldrd	r4, [sp]
   1ecb4:	ldrd	r6, [sp, #8]
   1ecb8:	add	sp, sp, #20
   1ecbc:	pop	{pc}		; (ldr pc, [sp], #4)
   1ecc0:	mov	r0, #64	; 0x40
   1ecc4:	sdiv	r4, r0, lr
   1ecc8:	mls	r5, lr, r4, r0
   1eccc:	sub	r5, r0, r5
   1ecd0:	b	1ec54 <__assert_fail@plt+0xd434>
   1ecd4:	adds	r5, r5, #0
   1ecd8:	movne	r5, #1
   1ecdc:	cmp	r6, #0
   1ece0:	movne	r6, r5
   1ece4:	moveq	r6, #1
   1ece8:	cmp	r6, #0
   1ecec:	beq	1eca8 <__assert_fail@plt+0xd488>
   1ecf0:	bl	1eec0 <__assert_fail@plt+0xd6a0>
   1ecf4:	mvn	r0, #-2147483648	; 0x80000000
   1ecf8:	b	1ecc4 <__assert_fail@plt+0xd4a4>
   1ecfc:	mov	r1, #1
   1ed00:	str	r4, [sp, #-8]!
   1ed04:	str	lr, [sp, #4]
   1ed08:	bl	1ef74 <__assert_fail@plt+0xd754>
   1ed0c:	cmp	r0, #0
   1ed10:	beq	1ed20 <__assert_fail@plt+0xd500>
   1ed14:	ldr	r4, [sp]
   1ed18:	add	sp, sp, #4
   1ed1c:	pop	{pc}		; (ldr pc, [sp], #4)
   1ed20:	bl	1eec0 <__assert_fail@plt+0xd6a0>
   1ed24:	mov	r1, #1
   1ed28:	str	r4, [sp, #-8]!
   1ed2c:	str	lr, [sp, #4]
   1ed30:	bl	1ef74 <__assert_fail@plt+0xd754>
   1ed34:	cmp	r0, #0
   1ed38:	beq	1ed48 <__assert_fail@plt+0xd528>
   1ed3c:	ldr	r4, [sp]
   1ed40:	add	sp, sp, #4
   1ed44:	pop	{pc}		; (ldr pc, [sp], #4)
   1ed48:	bl	1eec0 <__assert_fail@plt+0xd6a0>
   1ed4c:	str	r4, [sp, #-8]!
   1ed50:	str	lr, [sp, #4]
   1ed54:	bl	1ef74 <__assert_fail@plt+0xd754>
   1ed58:	cmp	r0, #0
   1ed5c:	beq	1ed6c <__assert_fail@plt+0xd54c>
   1ed60:	ldr	r4, [sp]
   1ed64:	add	sp, sp, #4
   1ed68:	pop	{pc}		; (ldr pc, [sp], #4)
   1ed6c:	bl	1eec0 <__assert_fail@plt+0xd6a0>
   1ed70:	str	r4, [sp, #-8]!
   1ed74:	str	lr, [sp, #4]
   1ed78:	bl	1ef74 <__assert_fail@plt+0xd754>
   1ed7c:	cmp	r0, #0
   1ed80:	beq	1ed90 <__assert_fail@plt+0xd570>
   1ed84:	ldr	r4, [sp]
   1ed88:	add	sp, sp, #4
   1ed8c:	pop	{pc}		; (ldr pc, [sp], #4)
   1ed90:	bl	1eec0 <__assert_fail@plt+0xd6a0>
   1ed94:	strd	r4, [sp, #-16]!
   1ed98:	mov	r4, r1
   1ed9c:	str	r6, [sp, #8]
   1eda0:	mov	r6, r0
   1eda4:	mov	r0, r1
   1eda8:	str	lr, [sp, #12]
   1edac:	bl	1efe8 <__assert_fail@plt+0xd7c8>
   1edb0:	subs	r5, r0, #0
   1edb4:	beq	1edd8 <__assert_fail@plt+0xd5b8>
   1edb8:	mov	r2, r4
   1edbc:	mov	r1, r6
   1edc0:	bl	11490 <memcpy@plt>
   1edc4:	mov	r0, r5
   1edc8:	ldrd	r4, [sp]
   1edcc:	ldr	r6, [sp, #8]
   1edd0:	add	sp, sp, #12
   1edd4:	pop	{pc}		; (ldr pc, [sp], #4)
   1edd8:	bl	1eec0 <__assert_fail@plt+0xd6a0>
   1eddc:	strd	r4, [sp, #-16]!
   1ede0:	mov	r4, r1
   1ede4:	str	r6, [sp, #8]
   1ede8:	mov	r6, r0
   1edec:	mov	r0, r1
   1edf0:	str	lr, [sp, #12]
   1edf4:	bl	1efe8 <__assert_fail@plt+0xd7c8>
   1edf8:	subs	r5, r0, #0
   1edfc:	beq	1ee20 <__assert_fail@plt+0xd600>
   1ee00:	mov	r2, r4
   1ee04:	mov	r1, r6
   1ee08:	bl	11490 <memcpy@plt>
   1ee0c:	mov	r0, r5
   1ee10:	ldrd	r4, [sp]
   1ee14:	ldr	r6, [sp, #8]
   1ee18:	add	sp, sp, #12
   1ee1c:	pop	{pc}		; (ldr pc, [sp], #4)
   1ee20:	bl	1eec0 <__assert_fail@plt+0xd6a0>
   1ee24:	strd	r4, [sp, #-16]!
   1ee28:	mov	r4, r1
   1ee2c:	str	r6, [sp, #8]
   1ee30:	mov	r6, r0
   1ee34:	add	r0, r1, #1
   1ee38:	str	lr, [sp, #12]
   1ee3c:	bl	1efe8 <__assert_fail@plt+0xd7c8>
   1ee40:	subs	r5, r0, #0
   1ee44:	beq	1ee70 <__assert_fail@plt+0xd650>
   1ee48:	mov	r3, #0
   1ee4c:	mov	r1, r6
   1ee50:	mov	r2, r4
   1ee54:	strb	r3, [r5, r4]
   1ee58:	bl	11490 <memcpy@plt>
   1ee5c:	mov	r0, r5
   1ee60:	ldrd	r4, [sp]
   1ee64:	ldr	r6, [sp, #8]
   1ee68:	add	sp, sp, #12
   1ee6c:	pop	{pc}		; (ldr pc, [sp], #4)
   1ee70:	bl	1eec0 <__assert_fail@plt+0xd6a0>
   1ee74:	strd	r4, [sp, #-16]!
   1ee78:	str	r6, [sp, #8]
   1ee7c:	mov	r6, r0
   1ee80:	str	lr, [sp, #12]
   1ee84:	bl	11640 <strlen@plt>
   1ee88:	add	r4, r0, #1
   1ee8c:	mov	r0, r4
   1ee90:	bl	1efe8 <__assert_fail@plt+0xd7c8>
   1ee94:	subs	r5, r0, #0
   1ee98:	beq	1eebc <__assert_fail@plt+0xd69c>
   1ee9c:	mov	r2, r4
   1eea0:	mov	r1, r6
   1eea4:	bl	11490 <memcpy@plt>
   1eea8:	mov	r0, r5
   1eeac:	ldrd	r4, [sp]
   1eeb0:	ldr	r6, [sp, #8]
   1eeb4:	add	sp, sp, #12
   1eeb8:	pop	{pc}		; (ldr pc, [sp], #4)
   1eebc:	bl	1eec0 <__assert_fail@plt+0xd6a0>
   1eec0:	movw	r3, #12684	; 0x318c
   1eec4:	movt	r3, #3
   1eec8:	str	r4, [sp, #-8]!
   1eecc:	ldr	r4, [r3]
   1eed0:	mov	r2, #5
   1eed4:	movw	r1, #11084	; 0x2b4c
   1eed8:	movt	r1, #2
   1eedc:	mov	r0, #0
   1eee0:	str	lr, [sp, #4]
   1eee4:	bl	114c0 <dcgettext@plt>
   1eee8:	mov	r3, r0
   1eeec:	movw	r2, #8384	; 0x20c0
   1eef0:	movt	r2, #2
   1eef4:	mov	r1, #0
   1eef8:	mov	r0, r4
   1eefc:	bl	11574 <error@plt>
   1ef00:	bl	117f0 <abort@plt>
   1ef04:	mov	r1, #0
   1ef08:	str	r4, [sp, #-8]!
   1ef0c:	mov	r0, r1
   1ef10:	str	lr, [sp, #4]
   1ef14:	bl	1161c <getcwd@plt>
   1ef18:	subs	r4, r0, #0
   1ef1c:	beq	1ef30 <__assert_fail@plt+0xd710>
   1ef20:	mov	r0, r4
   1ef24:	ldr	r4, [sp]
   1ef28:	add	sp, sp, #4
   1ef2c:	pop	{pc}		; (ldr pc, [sp], #4)
   1ef30:	bl	1167c <__errno_location@plt>
   1ef34:	ldr	r3, [r0]
   1ef38:	cmp	r3, #12
   1ef3c:	bne	1ef20 <__assert_fail@plt+0xd700>
   1ef40:	bl	1eec0 <__assert_fail@plt+0xd6a0>
   1ef44:	push	{r0, r1, r2, r3}
   1ef48:	push	{lr}		; (str lr, [sp, #-4]!)
   1ef4c:	sub	sp, sp, #12
   1ef50:	add	r3, sp, #20
   1ef54:	ldr	r0, [sp, #16]
   1ef58:	mov	r1, r3
   1ef5c:	str	r3, [sp, #4]
   1ef60:	bl	2032c <__assert_fail@plt+0xeb0c>
   1ef64:	add	sp, sp, #12
   1ef68:	pop	{lr}		; (ldr lr, [sp], #4)
   1ef6c:	add	sp, sp, #16
   1ef70:	bx	lr
   1ef74:	cmp	r1, #0
   1ef78:	cmpne	r0, #0
   1ef7c:	beq	1efc8 <__assert_fail@plt+0xd7a8>
   1ef80:	strd	r4, [sp, #-16]!
   1ef84:	umull	r4, r5, r0, r1
   1ef88:	str	r6, [sp, #8]
   1ef8c:	str	lr, [sp, #12]
   1ef90:	adds	r3, r5, #0
   1ef94:	movne	r3, #1
   1ef98:	cmp	r4, #0
   1ef9c:	blt	1efa8 <__assert_fail@plt+0xd788>
   1efa0:	cmp	r3, #0
   1efa4:	beq	1efd4 <__assert_fail@plt+0xd7b4>
   1efa8:	bl	1167c <__errno_location@plt>
   1efac:	mov	r3, #12
   1efb0:	ldrd	r4, [sp]
   1efb4:	ldr	r6, [sp, #8]
   1efb8:	add	sp, sp, #12
   1efbc:	str	r3, [r0]
   1efc0:	mov	r0, #0
   1efc4:	pop	{pc}		; (ldr pc, [sp], #4)
   1efc8:	mov	r1, #1
   1efcc:	mov	r0, r1
   1efd0:	b	113f4 <calloc@plt>
   1efd4:	ldrd	r4, [sp]
   1efd8:	ldr	r6, [sp, #8]
   1efdc:	ldr	lr, [sp, #12]
   1efe0:	add	sp, sp, #16
   1efe4:	b	113f4 <calloc@plt>
   1efe8:	cmp	r0, #0
   1efec:	beq	1eff8 <__assert_fail@plt+0xd7d8>
   1eff0:	blt	1f000 <__assert_fail@plt+0xd7e0>
   1eff4:	b	115b0 <malloc@plt>
   1eff8:	mov	r0, #1
   1effc:	b	115b0 <malloc@plt>
   1f000:	str	r4, [sp, #-8]!
   1f004:	str	lr, [sp, #4]
   1f008:	bl	1167c <__errno_location@plt>
   1f00c:	mov	r3, #12
   1f010:	ldr	r4, [sp]
   1f014:	add	sp, sp, #4
   1f018:	str	r3, [r0]
   1f01c:	mov	r0, #0
   1f020:	pop	{pc}		; (ldr pc, [sp], #4)
   1f024:	cmp	r0, #0
   1f028:	beq	1f050 <__assert_fail@plt+0xd830>
   1f02c:	cmp	r1, #0
   1f030:	str	r4, [sp, #-8]!
   1f034:	str	lr, [sp, #4]
   1f038:	beq	1f058 <__assert_fail@plt+0xd838>
   1f03c:	blt	1f06c <__assert_fail@plt+0xd84c>
   1f040:	ldr	r4, [sp]
   1f044:	ldr	lr, [sp, #4]
   1f048:	add	sp, sp, #8
   1f04c:	b	114cc <realloc@plt>
   1f050:	mov	r0, r1
   1f054:	b	1efe8 <__assert_fail@plt+0xd7c8>
   1f058:	bl	171c0 <__assert_fail@plt+0x59a0>
   1f05c:	ldr	r4, [sp]
   1f060:	add	sp, sp, #4
   1f064:	mov	r0, #0
   1f068:	pop	{pc}		; (ldr pc, [sp], #4)
   1f06c:	bl	1167c <__errno_location@plt>
   1f070:	mov	r3, #12
   1f074:	str	r3, [r0]
   1f078:	b	1f05c <__assert_fail@plt+0xd83c>
   1f07c:	cmp	r1, #1
   1f080:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1f084:	strd	r6, [sp, #8]
   1f088:	str	r8, [sp, #16]
   1f08c:	str	lr, [sp, #20]
   1f090:	bls	1f1b4 <__assert_fail@plt+0xd994>
   1f094:	mov	r8, #1
   1f098:	mov	r4, #0
   1f09c:	mov	lr, r8
   1f0a0:	mov	r3, r8
   1f0a4:	mvn	r5, #0
   1f0a8:	b	1f0c4 <__assert_fail@plt+0xd8a4>
   1f0ac:	sub	r8, r3, r5
   1f0b0:	mov	r4, r3
   1f0b4:	mov	lr, #1
   1f0b8:	add	r3, r4, lr
   1f0bc:	cmp	r1, r3
   1f0c0:	bls	1f0f8 <__assert_fail@plt+0xd8d8>
   1f0c4:	add	ip, r0, r5
   1f0c8:	ldrb	r6, [r0, r3]
   1f0cc:	ldrb	ip, [ip, lr]
   1f0d0:	cmp	r6, ip
   1f0d4:	bcc	1f0ac <__assert_fail@plt+0xd88c>
   1f0d8:	beq	1f18c <__assert_fail@plt+0xd96c>
   1f0dc:	mov	r8, #1
   1f0e0:	mov	r5, r4
   1f0e4:	mov	lr, r8
   1f0e8:	add	r4, r4, r8
   1f0ec:	add	r3, r4, lr
   1f0f0:	cmp	r1, r3
   1f0f4:	bhi	1f0c4 <__assert_fail@plt+0xd8a4>
   1f0f8:	mov	r7, #1
   1f0fc:	mov	r4, #0
   1f100:	str	r8, [r2]
   1f104:	mov	lr, r7
   1f108:	mov	r3, r7
   1f10c:	mvn	r6, #0
   1f110:	b	1f12c <__assert_fail@plt+0xd90c>
   1f114:	sub	r7, r3, r6
   1f118:	mov	r4, r3
   1f11c:	mov	lr, #1
   1f120:	add	r3, r4, lr
   1f124:	cmp	r1, r3
   1f128:	bls	1f160 <__assert_fail@plt+0xd940>
   1f12c:	add	ip, r0, r6
   1f130:	ldrb	r8, [r0, r3]
   1f134:	ldrb	ip, [ip, lr]
   1f138:	cmp	r8, ip
   1f13c:	bhi	1f114 <__assert_fail@plt+0xd8f4>
   1f140:	beq	1f1a0 <__assert_fail@plt+0xd980>
   1f144:	mov	r7, #1
   1f148:	mov	r6, r4
   1f14c:	mov	lr, r7
   1f150:	add	r4, r4, r7
   1f154:	add	r3, r4, lr
   1f158:	cmp	r1, r3
   1f15c:	bhi	1f12c <__assert_fail@plt+0xd90c>
   1f160:	add	r6, r6, #1
   1f164:	add	r0, r5, #1
   1f168:	cmp	r6, r0
   1f16c:	bcc	1f178 <__assert_fail@plt+0xd958>
   1f170:	mov	r0, r6
   1f174:	str	r7, [r2]
   1f178:	ldrd	r4, [sp]
   1f17c:	ldrd	r6, [sp, #8]
   1f180:	ldr	r8, [sp, #16]
   1f184:	add	sp, sp, #20
   1f188:	pop	{pc}		; (ldr pc, [sp], #4)
   1f18c:	cmp	lr, r8
   1f190:	addeq	r4, r4, lr
   1f194:	addne	lr, lr, #1
   1f198:	moveq	lr, #1
   1f19c:	b	1f0b8 <__assert_fail@plt+0xd898>
   1f1a0:	cmp	lr, r7
   1f1a4:	addeq	r4, r4, lr
   1f1a8:	addne	lr, lr, #1
   1f1ac:	moveq	lr, #1
   1f1b0:	b	1f120 <__assert_fail@plt+0xd900>
   1f1b4:	mov	r7, #1
   1f1b8:	mov	r6, #0
   1f1bc:	b	1f170 <__assert_fail@plt+0xd950>
   1f1c0:	cmp	r3, #2
   1f1c4:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1f1c8:	mov	r4, r3
   1f1cc:	strd	r6, [sp, #8]
   1f1d0:	mov	r5, r0
   1f1d4:	strd	r8, [sp, #16]
   1f1d8:	strd	sl, [sp, #24]
   1f1dc:	mov	fp, r1
   1f1e0:	mov	sl, r2
   1f1e4:	str	lr, [sp, #32]
   1f1e8:	sub	sp, sp, #1056	; 0x420
   1f1ec:	sub	sp, sp, #12
   1f1f0:	bls	1f5e0 <__assert_fail@plt+0xddc0>
   1f1f4:	add	r6, sp, #40	; 0x28
   1f1f8:	mov	r1, r3
   1f1fc:	sub	r2, r6, #4
   1f200:	mov	r0, sl
   1f204:	bl	1f07c <__assert_fail@plt+0xd85c>
   1f208:	ldr	r3, [sp, #36]	; 0x24
   1f20c:	str	r3, [sp, #4]
   1f210:	str	r0, [sp, #8]
   1f214:	mov	r3, r6
   1f218:	add	r2, sp, #1056	; 0x420
   1f21c:	add	r3, r3, #8
   1f220:	str	r4, [r3, #-8]
   1f224:	add	r2, r2, #8
   1f228:	str	r4, [r3, #-4]
   1f22c:	cmp	r3, r2
   1f230:	bne	1f218 <__assert_fail@plt+0xd9f8>
   1f234:	ldr	r3, [sp, #4]
   1f238:	cmp	r4, #0
   1f23c:	add	r1, sl, r3
   1f240:	beq	1f3f4 <__assert_fail@plt+0xdbd4>
   1f244:	sub	r3, r4, #1
   1f248:	sub	r2, sl, #1
   1f24c:	add	ip, sl, r3
   1f250:	str	r3, [sp]
   1f254:	ldrb	r0, [r2, #1]!
   1f258:	add	lr, sp, #1056	; 0x420
   1f25c:	add	lr, lr, #8
   1f260:	mvn	r3, r2
   1f264:	add	r0, lr, r0, lsl #2
   1f268:	cmp	ip, r2
   1f26c:	add	r3, r3, r4
   1f270:	add	r3, sl, r3
   1f274:	str	r3, [r0, #-1024]	; 0xfffffc00
   1f278:	bne	1f254 <__assert_fail@plt+0xda34>
   1f27c:	mov	r0, sl
   1f280:	ldr	r2, [sp, #8]
   1f284:	bl	114a8 <memcmp@plt>
   1f288:	cmp	r0, #0
   1f28c:	beq	1f440 <__assert_fail@plt+0xdc20>
   1f290:	ldr	r2, [sp, #8]
   1f294:	sub	r8, sl, #1
   1f298:	mov	r7, #0
   1f29c:	rsb	r9, sl, #1
   1f2a0:	sub	r3, r4, r2
   1f2a4:	sub	r1, r2, #1
   1f2a8:	cmp	r3, r2
   1f2ac:	movcc	r3, r2
   1f2b0:	str	r1, [sp, #16]
   1f2b4:	add	r1, sl, r1
   1f2b8:	add	r3, r3, #1
   1f2bc:	str	r1, [sp, #12]
   1f2c0:	str	r3, [sp, #20]
   1f2c4:	ldr	r3, [sp]
   1f2c8:	add	r8, r8, r3
   1f2cc:	mov	r3, r2
   1f2d0:	add	r2, sl, r2
   1f2d4:	str	r2, [sp, #4]
   1f2d8:	rsb	r2, r3, #1
   1f2dc:	str	r2, [sp, #8]
   1f2e0:	mov	r2, fp
   1f2e4:	mov	fp, r3
   1f2e8:	b	1f2f0 <__assert_fail@plt+0xdad0>
   1f2ec:	mov	r2, r6
   1f2f0:	add	r6, r7, r4
   1f2f4:	add	r0, r5, r2
   1f2f8:	mov	r1, #0
   1f2fc:	sub	r2, r6, r2
   1f300:	bl	116dc <memchr@plt>
   1f304:	adds	r2, r6, #0
   1f308:	movne	r2, #1
   1f30c:	cmp	r0, #0
   1f310:	moveq	r0, r2
   1f314:	movne	r0, #0
   1f318:	cmp	r0, #0
   1f31c:	beq	1f410 <__assert_fail@plt+0xdbf0>
   1f320:	add	r2, r5, r6
   1f324:	add	r3, sp, #1056	; 0x420
   1f328:	ldrb	r2, [r2, #-1]
   1f32c:	add	r3, r3, #8
   1f330:	add	r2, r3, r2, lsl #2
   1f334:	ldr	r2, [r2, #-1024]	; 0xfffffc00
   1f338:	cmp	r2, #0
   1f33c:	addne	r7, r7, r2
   1f340:	bne	1f2ec <__assert_fail@plt+0xdacc>
   1f344:	ldr	r3, [sp]
   1f348:	cmp	fp, r3
   1f34c:	bcs	1f394 <__assert_fail@plt+0xdb74>
   1f350:	ldr	r3, [sp, #4]
   1f354:	add	r2, r7, fp
   1f358:	add	r1, r5, r2
   1f35c:	ldrb	r2, [r5, r2]
   1f360:	ldrb	r0, [r3]
   1f364:	cmp	r2, r0
   1f368:	movne	lr, fp
   1f36c:	bne	1f3e4 <__assert_fail@plt+0xdbc4>
   1f370:	mov	r2, r3
   1f374:	b	1f388 <__assert_fail@plt+0xdb68>
   1f378:	ldrb	r0, [r2, #1]!
   1f37c:	ldrb	r3, [r1, #1]!
   1f380:	cmp	r0, r3
   1f384:	bne	1f3e4 <__assert_fail@plt+0xdbc4>
   1f388:	cmp	r8, r2
   1f38c:	add	lr, r9, r2
   1f390:	bne	1f378 <__assert_fail@plt+0xdb58>
   1f394:	ldr	r3, [sp, #16]
   1f398:	cmn	r3, #1
   1f39c:	beq	1f3dc <__assert_fail@plt+0xdbbc>
   1f3a0:	add	r2, r7, r3
   1f3a4:	ldr	r3, [sp, #12]
   1f3a8:	add	r1, r5, r2
   1f3ac:	ldrb	r2, [r5, r2]
   1f3b0:	ldrb	r0, [r3]
   1f3b4:	cmp	r2, r0
   1f3b8:	moveq	r2, r3
   1f3bc:	beq	1f3d4 <__assert_fail@plt+0xdbb4>
   1f3c0:	b	1f434 <__assert_fail@plt+0xdc14>
   1f3c4:	ldrb	r0, [r2, #-1]!
   1f3c8:	ldrb	r3, [r1, #-1]!
   1f3cc:	cmp	r0, r3
   1f3d0:	bne	1f434 <__assert_fail@plt+0xdc14>
   1f3d4:	cmp	sl, r2
   1f3d8:	bne	1f3c4 <__assert_fail@plt+0xdba4>
   1f3dc:	add	r0, r5, r7
   1f3e0:	b	1f414 <__assert_fail@plt+0xdbf4>
   1f3e4:	ldr	r3, [sp, #8]
   1f3e8:	add	r7, r3, r7
   1f3ec:	add	r7, lr, r7
   1f3f0:	b	1f2ec <__assert_fail@plt+0xdacc>
   1f3f4:	mov	r0, sl
   1f3f8:	ldr	r2, [sp, #8]
   1f3fc:	bl	114a8 <memcmp@plt>
   1f400:	cmp	r0, #0
   1f404:	mvnne	r3, #0
   1f408:	strne	r3, [sp]
   1f40c:	bne	1f290 <__assert_fail@plt+0xda70>
   1f410:	mov	r0, #0
   1f414:	add	sp, sp, #1056	; 0x420
   1f418:	add	sp, sp, #12
   1f41c:	ldrd	r4, [sp]
   1f420:	ldrd	r6, [sp, #8]
   1f424:	ldrd	r8, [sp, #16]
   1f428:	ldrd	sl, [sp, #24]
   1f42c:	add	sp, sp, #32
   1f430:	pop	{pc}		; (ldr pc, [sp], #4)
   1f434:	ldr	r3, [sp, #20]
   1f438:	add	r7, r7, r3
   1f43c:	b	1f2ec <__assert_fail@plt+0xdacc>
   1f440:	ldr	r2, [sp, #8]
   1f444:	sub	r8, r4, #2
   1f448:	rsb	r9, sl, #1
   1f44c:	add	r8, sl, r8
   1f450:	mov	r7, r0
   1f454:	str	sl, [sp, #12]
   1f458:	sub	r3, r2, #1
   1f45c:	str	r3, [sp, #28]
   1f460:	add	r3, sl, r3
   1f464:	mov	sl, r0
   1f468:	str	r3, [sp, #24]
   1f46c:	ldr	r3, [sp, #4]
   1f470:	sub	r3, r4, r3
   1f474:	str	r3, [sp, #20]
   1f478:	rsb	r3, r2, #1
   1f47c:	mov	r2, fp
   1f480:	str	r3, [sp, #16]
   1f484:	b	1f4a4 <__assert_fail@plt+0xdc84>
   1f488:	ldr	r2, [sp, #4]
   1f48c:	cmp	sl, #0
   1f490:	cmpne	r3, r2
   1f494:	mov	sl, #0
   1f498:	ldrcc	r3, [sp, #20]
   1f49c:	add	r7, r7, r3
   1f4a0:	mov	r2, r6
   1f4a4:	add	r6, r7, r4
   1f4a8:	add	r0, r5, r2
   1f4ac:	mov	r1, #0
   1f4b0:	sub	r2, r6, r2
   1f4b4:	bl	116dc <memchr@plt>
   1f4b8:	adds	r3, r6, #0
   1f4bc:	movne	r3, #1
   1f4c0:	cmp	r0, #0
   1f4c4:	moveq	r0, r3
   1f4c8:	movne	r0, #0
   1f4cc:	cmp	r0, #0
   1f4d0:	beq	1f410 <__assert_fail@plt+0xdbf0>
   1f4d4:	add	r3, r5, r6
   1f4d8:	add	r2, sp, #1056	; 0x420
   1f4dc:	ldrb	r3, [r3, #-1]
   1f4e0:	add	r2, r2, #8
   1f4e4:	add	r3, r2, r3, lsl #2
   1f4e8:	ldr	r3, [r3, #-1024]	; 0xfffffc00
   1f4ec:	cmp	r3, #0
   1f4f0:	bne	1f488 <__assert_fail@plt+0xdc68>
   1f4f4:	ldr	r3, [sp, #8]
   1f4f8:	cmp	sl, r3
   1f4fc:	movcc	r0, r3
   1f500:	ldr	r3, [sp]
   1f504:	movcs	r0, sl
   1f508:	cmp	r0, r3
   1f50c:	bcs	1f550 <__assert_fail@plt+0xdd30>
   1f510:	ldr	r3, [sp, #12]
   1f514:	add	r1, r7, r0
   1f518:	add	r2, r5, r1
   1f51c:	ldrb	r1, [r5, r1]
   1f520:	ldrb	ip, [r3, r0]
   1f524:	add	r3, r3, r0
   1f528:	cmp	ip, r1
   1f52c:	beq	1f544 <__assert_fail@plt+0xdd24>
   1f530:	b	1f5cc <__assert_fail@plt+0xddac>
   1f534:	ldrb	ip, [r3, #1]!
   1f538:	ldrb	r1, [r2, #1]!
   1f53c:	cmp	ip, r1
   1f540:	bne	1f5cc <__assert_fail@plt+0xddac>
   1f544:	cmp	r8, r3
   1f548:	add	r0, r9, r3
   1f54c:	bne	1f534 <__assert_fail@plt+0xdd14>
   1f550:	ldr	r3, [sp, #8]
   1f554:	cmp	sl, r3
   1f558:	bcs	1f5fc <__assert_fail@plt+0xdddc>
   1f55c:	ldr	r3, [sp, #28]
   1f560:	add	r2, r7, r3
   1f564:	ldr	r3, [sp, #24]
   1f568:	ldrb	r1, [r3]
   1f56c:	add	r3, r5, r2
   1f570:	ldrb	r2, [r5, r2]
   1f574:	cmp	r1, r2
   1f578:	ldrne	lr, [sp, #8]
   1f57c:	bne	1f5b0 <__assert_fail@plt+0xdd90>
   1f580:	add	ip, r7, sl
   1f584:	add	fp, r5, r7
   1f588:	add	ip, ip, r5
   1f58c:	ldr	r2, [sp, #24]
   1f590:	b	1f5a4 <__assert_fail@plt+0xdd84>
   1f594:	ldrb	r0, [r2, #-1]!
   1f598:	ldrb	r1, [r3, #-1]!
   1f59c:	cmp	r0, r1
   1f5a0:	bne	1f5b0 <__assert_fail@plt+0xdd90>
   1f5a4:	cmp	ip, r3
   1f5a8:	sub	lr, r3, fp
   1f5ac:	bne	1f594 <__assert_fail@plt+0xdd74>
   1f5b0:	add	sl, sl, #1
   1f5b4:	cmp	sl, lr
   1f5b8:	bhi	1f3dc <__assert_fail@plt+0xdbbc>
   1f5bc:	ldr	r3, [sp, #4]
   1f5c0:	ldr	sl, [sp, #20]
   1f5c4:	add	r7, r7, r3
   1f5c8:	b	1f4a0 <__assert_fail@plt+0xdc80>
   1f5cc:	ldr	r3, [sp, #16]
   1f5d0:	mov	sl, #0
   1f5d4:	add	r7, r3, r7
   1f5d8:	add	r7, r0, r7
   1f5dc:	b	1f4a0 <__assert_fail@plt+0xdc80>
   1f5e0:	mov	r3, #1
   1f5e4:	sub	r2, r4, #1
   1f5e8:	add	r6, sp, #40	; 0x28
   1f5ec:	str	r3, [sp, #4]
   1f5f0:	str	r2, [sp, #8]
   1f5f4:	str	r3, [sp, #36]	; 0x24
   1f5f8:	b	1f214 <__assert_fail@plt+0xd9f4>
   1f5fc:	mov	lr, r3
   1f600:	b	1f5b0 <__assert_fail@plt+0xdd90>
   1f604:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1f608:	strd	r6, [sp, #8]
   1f60c:	strd	r8, [sp, #16]
   1f610:	strd	sl, [sp, #24]
   1f614:	str	lr, [sp, #32]
   1f618:	sub	sp, sp, #44	; 0x2c
   1f61c:	ldrb	r4, [r0]
   1f620:	ldrb	r3, [r1]
   1f624:	cmp	r4, #0
   1f628:	beq	1f9dc <__assert_fail@plt+0xe1bc>
   1f62c:	cmp	r3, #0
   1f630:	beq	1f6fc <__assert_fail@plt+0xdedc>
   1f634:	mov	r8, r0
   1f638:	add	r2, r1, #1
   1f63c:	mov	ip, r3
   1f640:	mov	lr, #1
   1f644:	b	1f650 <__assert_fail@plt+0xde30>
   1f648:	cmp	ip, #0
   1f64c:	beq	1f678 <__assert_fail@plt+0xde58>
   1f650:	cmp	ip, r4
   1f654:	movne	lr, #0
   1f658:	andeq	lr, lr, #1
   1f65c:	ldrb	r4, [r8, #1]!
   1f660:	mov	r5, r2
   1f664:	ldrb	ip, [r2], #1
   1f668:	cmp	r4, #0
   1f66c:	bne	1f648 <__assert_fail@plt+0xde28>
   1f670:	cmp	ip, #0
   1f674:	bne	1f6dc <__assert_fail@plt+0xdebc>
   1f678:	cmp	lr, #0
   1f67c:	bne	1f6fc <__assert_fail@plt+0xdedc>
   1f680:	mov	r7, r1
   1f684:	mov	r6, r0
   1f688:	mov	r1, r3
   1f68c:	add	r0, r0, #1
   1f690:	bl	1164c <strchr@plt>
   1f694:	subs	r4, r0, #0
   1f698:	sub	r7, r5, r7
   1f69c:	beq	1f6dc <__assert_fail@plt+0xdebc>
   1f6a0:	cmp	r7, #1
   1f6a4:	beq	1f6dc <__assert_fail@plt+0xdebc>
   1f6a8:	add	r6, r6, r7
   1f6ac:	sub	r5, r5, r7
   1f6b0:	cmp	r6, r4
   1f6b4:	subcs	r6, r6, r4
   1f6b8:	movcc	r6, #1
   1f6bc:	cmp	r7, #31
   1f6c0:	bls	1f704 <__assert_fail@plt+0xdee4>
   1f6c4:	mov	r0, r4
   1f6c8:	mov	r3, r7
   1f6cc:	mov	r2, r5
   1f6d0:	mov	r1, r6
   1f6d4:	bl	1f1c0 <__assert_fail@plt+0xd9a0>
   1f6d8:	mov	r4, r0
   1f6dc:	mov	r0, r4
   1f6e0:	add	sp, sp, #44	; 0x2c
   1f6e4:	ldrd	r4, [sp]
   1f6e8:	ldrd	r6, [sp, #8]
   1f6ec:	ldrd	r8, [sp, #16]
   1f6f0:	ldrd	sl, [sp, #24]
   1f6f4:	add	sp, sp, #32
   1f6f8:	pop	{pc}		; (ldr pc, [sp], #4)
   1f6fc:	mov	r4, r0
   1f700:	b	1f6dc <__assert_fail@plt+0xdebc>
   1f704:	cmp	r7, #2
   1f708:	bls	1f9ec <__assert_fail@plt+0xe1cc>
   1f70c:	add	r2, sp, #36	; 0x24
   1f710:	mov	r1, r7
   1f714:	mov	r0, r5
   1f718:	bl	1f07c <__assert_fail@plt+0xd85c>
   1f71c:	ldr	r3, [sp, #36]	; 0x24
   1f720:	mov	r8, r0
   1f724:	str	r3, [sp, #16]
   1f728:	mov	r2, r8
   1f72c:	add	r1, r5, r3
   1f730:	mov	r0, r5
   1f734:	bl	114a8 <memcmp@plt>
   1f738:	cmp	r0, #0
   1f73c:	bne	1f8a0 <__assert_fail@plt+0xe080>
   1f740:	sub	r2, r8, #1
   1f744:	mov	r3, r8
   1f748:	str	r7, [sp, #4]
   1f74c:	sub	r8, r7, #1
   1f750:	rsb	r9, r5, #1
   1f754:	str	r5, [sp, #8]
   1f758:	str	r2, [sp, #20]
   1f75c:	add	r2, r5, r2
   1f760:	add	r8, r8, r5
   1f764:	mov	sl, r0
   1f768:	mov	r5, r0
   1f76c:	str	r2, [sp, #28]
   1f770:	ldr	r2, [sp, #16]
   1f774:	sub	r2, r7, r2
   1f778:	mov	r7, r3
   1f77c:	str	r2, [sp, #24]
   1f780:	rsb	r2, r3, #1
   1f784:	str	r2, [sp, #12]
   1f788:	mov	r2, r6
   1f78c:	ldr	r3, [sp, #4]
   1f790:	add	r0, r4, r2
   1f794:	mov	r1, #0
   1f798:	add	fp, r3, sl
   1f79c:	sub	r2, fp, r2
   1f7a0:	bl	116dc <memchr@plt>
   1f7a4:	clz	r0, r0
   1f7a8:	cmp	fp, #0
   1f7ac:	lsr	r0, r0, #5
   1f7b0:	moveq	r0, #0
   1f7b4:	cmp	r0, #0
   1f7b8:	beq	1f6fc <__assert_fail@plt+0xdedc>
   1f7bc:	ldr	r3, [sp, #4]
   1f7c0:	cmp	r7, r5
   1f7c4:	movcs	r0, r7
   1f7c8:	movcc	r0, r5
   1f7cc:	cmp	r3, r0
   1f7d0:	bls	1f814 <__assert_fail@plt+0xdff4>
   1f7d4:	ldr	r3, [sp, #8]
   1f7d8:	add	r1, r0, sl
   1f7dc:	add	r2, r4, r1
   1f7e0:	ldrb	r1, [r4, r1]
   1f7e4:	ldrb	ip, [r3, r0]
   1f7e8:	add	r3, r3, r0
   1f7ec:	cmp	r1, ip
   1f7f0:	beq	1f808 <__assert_fail@plt+0xdfe8>
   1f7f4:	b	1f88c <__assert_fail@plt+0xe06c>
   1f7f8:	ldrb	ip, [r3, #1]!
   1f7fc:	ldrb	r1, [r2, #1]!
   1f800:	cmp	ip, r1
   1f804:	bne	1f88c <__assert_fail@plt+0xe06c>
   1f808:	cmp	r8, r3
   1f80c:	add	r0, r9, r3
   1f810:	bne	1f7f8 <__assert_fail@plt+0xdfd8>
   1f814:	cmp	r7, r5
   1f818:	bls	1fa04 <__assert_fail@plt+0xe1e4>
   1f81c:	ldr	r3, [sp, #20]
   1f820:	ldr	r0, [sp, #28]
   1f824:	add	r2, sl, r3
   1f828:	add	r3, r4, r2
   1f82c:	ldrb	r2, [r4, r2]
   1f830:	ldrb	r1, [r0]
   1f834:	cmp	r1, r2
   1f838:	bne	1fa04 <__assert_fail@plt+0xe1e4>
   1f83c:	add	ip, r5, sl
   1f840:	mov	r2, r0
   1f844:	add	ip, ip, r4
   1f848:	add	r6, r4, sl
   1f84c:	b	1f860 <__assert_fail@plt+0xe040>
   1f850:	ldrb	r0, [r2, #-1]!
   1f854:	ldrb	r1, [r3, #-1]!
   1f858:	cmp	r0, r1
   1f85c:	bne	1f86c <__assert_fail@plt+0xe04c>
   1f860:	cmp	ip, r3
   1f864:	sub	lr, r3, r6
   1f868:	bne	1f850 <__assert_fail@plt+0xe030>
   1f86c:	add	r5, r5, #1
   1f870:	cmp	r5, lr
   1f874:	bhi	1f9b4 <__assert_fail@plt+0xe194>
   1f878:	ldr	r3, [sp, #16]
   1f87c:	ldr	r5, [sp, #24]
   1f880:	add	sl, sl, r3
   1f884:	mov	r2, fp
   1f888:	b	1f78c <__assert_fail@plt+0xdf6c>
   1f88c:	ldr	r3, [sp, #12]
   1f890:	mov	r5, #0
   1f894:	add	sl, r3, sl
   1f898:	add	sl, r0, sl
   1f89c:	b	1f884 <__assert_fail@plt+0xe064>
   1f8a0:	sub	r3, r7, r8
   1f8a4:	mov	r2, r8
   1f8a8:	cmp	r3, r8
   1f8ac:	sub	r1, r8, #1
   1f8b0:	movcc	r3, r2
   1f8b4:	sub	r8, r7, #1
   1f8b8:	add	r3, r3, #1
   1f8bc:	add	r8, r8, r5
   1f8c0:	str	r1, [sp, #12]
   1f8c4:	mov	sl, #0
   1f8c8:	add	r1, r5, r1
   1f8cc:	str	r3, [sp, #16]
   1f8d0:	mov	r3, r2
   1f8d4:	add	r2, r5, r2
   1f8d8:	rsb	r9, r5, #1
   1f8dc:	str	r2, [sp, #4]
   1f8e0:	rsb	r2, r3, #1
   1f8e4:	str	r2, [sp, #8]
   1f8e8:	mov	r2, r6
   1f8ec:	mov	r6, r3
   1f8f0:	str	r1, [sp, #20]
   1f8f4:	add	fp, r7, sl
   1f8f8:	add	r0, r4, r2
   1f8fc:	mov	r1, #0
   1f900:	sub	r2, fp, r2
   1f904:	bl	116dc <memchr@plt>
   1f908:	clz	r0, r0
   1f90c:	cmp	fp, #0
   1f910:	lsr	r0, r0, #5
   1f914:	moveq	r0, #0
   1f918:	cmp	r0, #0
   1f91c:	beq	1f6fc <__assert_fail@plt+0xdedc>
   1f920:	cmp	r7, r6
   1f924:	bls	1f96c <__assert_fail@plt+0xe14c>
   1f928:	ldr	r3, [sp, #4]
   1f92c:	add	r2, r6, sl
   1f930:	add	r1, r4, r2
   1f934:	ldrb	r2, [r4, r2]
   1f938:	ldrb	r0, [r3]
   1f93c:	cmp	r2, r0
   1f940:	movne	lr, r6
   1f944:	bne	1f9bc <__assert_fail@plt+0xe19c>
   1f948:	mov	r2, r3
   1f94c:	b	1f960 <__assert_fail@plt+0xe140>
   1f950:	ldrb	r0, [r2, #1]!
   1f954:	ldrb	r3, [r1, #1]!
   1f958:	cmp	r0, r3
   1f95c:	bne	1f9bc <__assert_fail@plt+0xe19c>
   1f960:	cmp	r8, r2
   1f964:	add	lr, r9, r2
   1f968:	bne	1f950 <__assert_fail@plt+0xe130>
   1f96c:	ldr	r3, [sp, #12]
   1f970:	cmn	r3, #1
   1f974:	beq	1f9b4 <__assert_fail@plt+0xe194>
   1f978:	add	r2, sl, r3
   1f97c:	ldr	r3, [sp, #20]
   1f980:	add	r1, r4, r2
   1f984:	ldrb	r2, [r4, r2]
   1f988:	ldrb	r0, [r3]
   1f98c:	cmp	r2, r0
   1f990:	bne	1f9d0 <__assert_fail@plt+0xe1b0>
   1f994:	mov	r2, r3
   1f998:	b	1f9ac <__assert_fail@plt+0xe18c>
   1f99c:	ldrb	r0, [r2, #-1]!
   1f9a0:	ldrb	r3, [r1, #-1]!
   1f9a4:	cmp	r0, r3
   1f9a8:	bne	1f9d0 <__assert_fail@plt+0xe1b0>
   1f9ac:	cmp	r5, r2
   1f9b0:	bne	1f99c <__assert_fail@plt+0xe17c>
   1f9b4:	add	r4, r4, sl
   1f9b8:	b	1f6dc <__assert_fail@plt+0xdebc>
   1f9bc:	ldr	r3, [sp, #8]
   1f9c0:	add	sl, r3, sl
   1f9c4:	add	sl, lr, sl
   1f9c8:	mov	r2, fp
   1f9cc:	b	1f8f4 <__assert_fail@plt+0xe0d4>
   1f9d0:	ldr	r3, [sp, #16]
   1f9d4:	add	sl, sl, r3
   1f9d8:	b	1f9c8 <__assert_fail@plt+0xe1a8>
   1f9dc:	cmp	r3, #0
   1f9e0:	moveq	r4, r0
   1f9e4:	movne	r4, #0
   1f9e8:	b	1f6dc <__assert_fail@plt+0xdebc>
   1f9ec:	mov	r3, #1
   1f9f0:	sub	r2, r7, #1
   1f9f4:	mov	r8, r2
   1f9f8:	str	r3, [sp, #16]
   1f9fc:	str	r3, [sp, #36]	; 0x24
   1fa00:	b	1f728 <__assert_fail@plt+0xdf08>
   1fa04:	mov	lr, r7
   1fa08:	b	1f86c <__assert_fail@plt+0xe04c>
   1fa0c:	ldrb	r3, [r0]
   1fa10:	cmp	r3, #47	; 0x2f
   1fa14:	bne	1fa24 <__assert_fail@plt+0xe204>
   1fa18:	ldrb	r3, [r0, #1]!
   1fa1c:	cmp	r3, #47	; 0x2f
   1fa20:	beq	1fa18 <__assert_fail@plt+0xe1f8>
   1fa24:	cmp	r3, #0
   1fa28:	beq	1fa58 <__assert_fail@plt+0xe238>
   1fa2c:	mov	r2, r0
   1fa30:	mov	r1, #0
   1fa34:	cmp	r3, #47	; 0x2f
   1fa38:	moveq	r1, #1
   1fa3c:	beq	1fa4c <__assert_fail@plt+0xe22c>
   1fa40:	cmp	r1, #0
   1fa44:	movne	r0, r2
   1fa48:	movne	r1, #0
   1fa4c:	ldrb	r3, [r2, #1]!
   1fa50:	cmp	r3, #0
   1fa54:	bne	1fa34 <__assert_fail@plt+0xe214>
   1fa58:	bx	lr
   1fa5c:	str	r4, [sp, #-8]!
   1fa60:	mov	r4, r0
   1fa64:	str	lr, [sp, #4]
   1fa68:	bl	11640 <strlen@plt>
   1fa6c:	cmp	r0, #1
   1fa70:	bls	1fa84 <__assert_fail@plt+0xe264>
   1fa74:	sub	r2, r0, #1
   1fa78:	ldrb	r1, [r4, r2]
   1fa7c:	cmp	r1, #47	; 0x2f
   1fa80:	beq	1fa90 <__assert_fail@plt+0xe270>
   1fa84:	ldr	r4, [sp]
   1fa88:	add	sp, sp, #4
   1fa8c:	pop	{pc}		; (ldr pc, [sp], #4)
   1fa90:	cmp	r2, #1
   1fa94:	beq	1faa8 <__assert_fail@plt+0xe288>
   1fa98:	add	r1, r4, r0
   1fa9c:	ldrb	r1, [r1, #-2]
   1faa0:	cmp	r1, #47	; 0x2f
   1faa4:	beq	1fab8 <__assert_fail@plt+0xe298>
   1faa8:	ldr	r4, [sp]
   1faac:	add	sp, sp, #4
   1fab0:	mov	r0, r2
   1fab4:	pop	{pc}		; (ldr pc, [sp], #4)
   1fab8:	sub	r3, r0, #3
   1fabc:	rsb	r0, r4, #1
   1fac0:	add	r3, r4, r3
   1fac4:	cmp	r3, r4
   1fac8:	add	r2, r0, r3
   1facc:	beq	1faa8 <__assert_fail@plt+0xe288>
   1fad0:	ldrb	r1, [r3], #-1
   1fad4:	cmp	r1, #47	; 0x2f
   1fad8:	bne	1faa8 <__assert_fail@plt+0xe288>
   1fadc:	b	1fac4 <__assert_fail@plt+0xe2a4>
   1fae0:	movw	r3, #11104	; 0x2b60
   1fae4:	movt	r3, #2
   1fae8:	str	r4, [sp, #-8]!
   1faec:	movw	r1, #11128	; 0x2b78
   1faf0:	movt	r1, #2
   1faf4:	str	lr, [sp, #4]
   1faf8:	movw	r0, #11148	; 0x2b8c
   1fafc:	movt	r0, #2
   1fb00:	mov	r2, #64	; 0x40
   1fb04:	bl	11820 <__assert_fail@plt>
   1fb08:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1fb0c:	strd	r6, [sp, #8]
   1fb10:	mov	r6, r0
   1fb14:	strd	r8, [sp, #16]
   1fb18:	strd	sl, [sp, #24]
   1fb1c:	str	lr, [sp, #32]
   1fb20:	sub	sp, sp, #4
   1fb24:	bl	114fc <chdir@plt>
   1fb28:	subs	r4, r0, #0
   1fb2c:	beq	1fc90 <__assert_fail@plt+0xe470>
   1fb30:	bl	1167c <__errno_location@plt>
   1fb34:	ldr	r3, [r0]
   1fb38:	mov	sl, r0
   1fb3c:	cmp	r3, #36	; 0x24
   1fb40:	bne	1fc90 <__assert_fail@plt+0xe470>
   1fb44:	mov	r0, r6
   1fb48:	bl	11640 <strlen@plt>
   1fb4c:	subs	r7, r0, #0
   1fb50:	beq	1fde0 <__assert_fail@plt+0xe5c0>
   1fb54:	cmp	r7, #4096	; 0x1000
   1fb58:	bcc	1fdfc <__assert_fail@plt+0xe5dc>
   1fb5c:	movw	r1, #11184	; 0x2bb0
   1fb60:	movt	r1, #2
   1fb64:	mov	r0, r6
   1fb68:	bl	11814 <strspn@plt>
   1fb6c:	cmp	r0, #2
   1fb70:	mov	r4, r0
   1fb74:	beq	1fcd4 <__assert_fail@plt+0xe4b4>
   1fb78:	cmp	r0, #0
   1fb7c:	moveq	r4, r6
   1fb80:	mvneq	r5, #99	; 0x63
   1fb84:	bne	1fcb0 <__assert_fail@plt+0xe490>
   1fb88:	ldrb	r3, [r4]
   1fb8c:	cmp	r3, #47	; 0x2f
   1fb90:	beq	1fe18 <__assert_fail@plt+0xe5f8>
   1fb94:	add	r6, r6, r7
   1fb98:	cmp	r4, r6
   1fb9c:	bhi	1fe34 <__assert_fail@plt+0xe614>
   1fba0:	sub	r3, r6, r4
   1fba4:	cmp	r3, #4096	; 0x1000
   1fba8:	blt	1fc40 <__assert_fail@plt+0xe420>
   1fbac:	movw	r8, #11184	; 0x2bb0
   1fbb0:	movt	r8, #2
   1fbb4:	mov	r9, #47	; 0x2f
   1fbb8:	b	1fbe0 <__assert_fail@plt+0xe3c0>
   1fbbc:	mov	r1, r8
   1fbc0:	strb	r9, [fp], #1
   1fbc4:	mov	r0, fp
   1fbc8:	bl	11814 <strspn@plt>
   1fbcc:	add	r4, fp, r0
   1fbd0:	mov	r5, r7
   1fbd4:	sub	r3, r6, r4
   1fbd8:	cmp	r3, #4096	; 0x1000
   1fbdc:	blt	1fc44 <__assert_fail@plt+0xe424>
   1fbe0:	mov	r2, #4096	; 0x1000
   1fbe4:	mov	r1, #47	; 0x2f
   1fbe8:	mov	r0, r4
   1fbec:	bl	11670 <memrchr@plt>
   1fbf0:	subs	fp, r0, #0
   1fbf4:	beq	1fd30 <__assert_fail@plt+0xe510>
   1fbf8:	mov	r3, #0
   1fbfc:	sub	r2, fp, r4
   1fc00:	cmp	r2, #4096	; 0x1000
   1fc04:	strb	r3, [fp]
   1fc08:	bge	1fdc4 <__assert_fail@plt+0xe5a4>
   1fc0c:	mov	r1, r4
   1fc10:	mov	r2, #18688	; 0x4900
   1fc14:	mov	r0, r5
   1fc18:	bl	11664 <openat64@plt>
   1fc1c:	subs	r7, r0, #0
   1fc20:	blt	1fd84 <__assert_fail@plt+0xe564>
   1fc24:	cmp	r5, #0
   1fc28:	blt	1fbbc <__assert_fail@plt+0xe39c>
   1fc2c:	mov	r0, r5
   1fc30:	bl	117fc <close@plt>
   1fc34:	cmp	r0, #0
   1fc38:	beq	1fbbc <__assert_fail@plt+0xe39c>
   1fc3c:	bl	1fae0 <__assert_fail@plt+0xe2c0>
   1fc40:	mov	r7, r5
   1fc44:	cmp	r6, r4
   1fc48:	bls	1fd40 <__assert_fail@plt+0xe520>
   1fc4c:	mov	r1, r4
   1fc50:	mov	r2, #18688	; 0x4900
   1fc54:	mov	r0, r7
   1fc58:	bl	11664 <openat64@plt>
   1fc5c:	subs	r5, r0, #0
   1fc60:	blt	1fd50 <__assert_fail@plt+0xe530>
   1fc64:	cmp	r7, #0
   1fc68:	bge	1fda8 <__assert_fail@plt+0xe588>
   1fc6c:	mov	r0, r5
   1fc70:	bl	11784 <fchdir@plt>
   1fc74:	cmp	r0, #0
   1fc78:	bne	1fd6c <__assert_fail@plt+0xe54c>
   1fc7c:	mov	r0, r5
   1fc80:	bl	117fc <close@plt>
   1fc84:	cmp	r0, #0
   1fc88:	bne	1fc3c <__assert_fail@plt+0xe41c>
   1fc8c:	mov	r4, #0
   1fc90:	mov	r0, r4
   1fc94:	add	sp, sp, #4
   1fc98:	ldrd	r4, [sp]
   1fc9c:	ldrd	r6, [sp, #8]
   1fca0:	ldrd	r8, [sp, #16]
   1fca4:	ldrd	sl, [sp, #24]
   1fca8:	add	sp, sp, #32
   1fcac:	pop	{pc}		; (ldr pc, [sp], #4)
   1fcb0:	movw	r1, #11184	; 0x2bb0
   1fcb4:	movt	r1, #2
   1fcb8:	mov	r2, #18688	; 0x4900
   1fcbc:	mvn	r0, #99	; 0x63
   1fcc0:	bl	11664 <openat64@plt>
   1fcc4:	subs	r5, r0, #0
   1fcc8:	blt	1fdbc <__assert_fail@plt+0xe59c>
   1fccc:	add	r4, r6, r4
   1fcd0:	b	1fb88 <__assert_fail@plt+0xe368>
   1fcd4:	sub	r2, r7, #3
   1fcd8:	mov	r1, #47	; 0x2f
   1fcdc:	add	r0, r6, #3
   1fce0:	bl	116dc <memchr@plt>
   1fce4:	subs	r4, r0, #0
   1fce8:	beq	1fd90 <__assert_fail@plt+0xe570>
   1fcec:	mov	r3, #0
   1fcf0:	mov	r2, #18688	; 0x4900
   1fcf4:	mov	r1, r6
   1fcf8:	mvn	r0, #99	; 0x63
   1fcfc:	strb	r3, [r4]
   1fd00:	bl	11664 <openat64@plt>
   1fd04:	subs	r5, r0, #0
   1fd08:	mov	r3, #47	; 0x2f
   1fd0c:	strblt	r3, [r4]
   1fd10:	blt	1fdbc <__assert_fail@plt+0xe59c>
   1fd14:	movw	r1, #11184	; 0x2bb0
   1fd18:	movt	r1, #2
   1fd1c:	strb	r3, [r4], #1
   1fd20:	mov	r0, r4
   1fd24:	bl	11814 <strspn@plt>
   1fd28:	add	r4, r4, r0
   1fd2c:	b	1fb88 <__assert_fail@plt+0xe368>
   1fd30:	mov	r3, #36	; 0x24
   1fd34:	mvn	r4, #0
   1fd38:	str	r3, [sl]
   1fd3c:	b	1fc90 <__assert_fail@plt+0xe470>
   1fd40:	mov	r0, r7
   1fd44:	bl	11784 <fchdir@plt>
   1fd48:	cmp	r0, #0
   1fd4c:	beq	1fd98 <__assert_fail@plt+0xe578>
   1fd50:	mov	r5, r7
   1fd54:	cmp	r5, #0
   1fd58:	ldr	r6, [sl]
   1fd5c:	bge	1fd70 <__assert_fail@plt+0xe550>
   1fd60:	mvn	r4, #0
   1fd64:	str	r6, [sl]
   1fd68:	b	1fc90 <__assert_fail@plt+0xe470>
   1fd6c:	ldr	r6, [sl]
   1fd70:	mov	r0, r5
   1fd74:	bl	117fc <close@plt>
   1fd78:	cmp	r0, #0
   1fd7c:	beq	1fd60 <__assert_fail@plt+0xe540>
   1fd80:	b	1fc3c <__assert_fail@plt+0xe41c>
   1fd84:	mov	r3, #47	; 0x2f
   1fd88:	strb	r3, [fp]
   1fd8c:	b	1fd54 <__assert_fail@plt+0xe534>
   1fd90:	mvn	r4, #0
   1fd94:	b	1fc90 <__assert_fail@plt+0xe470>
   1fd98:	cmp	r7, #0
   1fd9c:	blt	1fc8c <__assert_fail@plt+0xe46c>
   1fda0:	mov	r5, r7
   1fda4:	b	1fc7c <__assert_fail@plt+0xe45c>
   1fda8:	mov	r0, r7
   1fdac:	bl	117fc <close@plt>
   1fdb0:	cmp	r0, #0
   1fdb4:	beq	1fc6c <__assert_fail@plt+0xe44c>
   1fdb8:	b	1fc3c <__assert_fail@plt+0xe41c>
   1fdbc:	ldr	r6, [sl]
   1fdc0:	b	1fd60 <__assert_fail@plt+0xe540>
   1fdc4:	movw	r1, #11128	; 0x2b78
   1fdc8:	movt	r1, #2
   1fdcc:	ldr	r3, [pc, #124]	; 1fe50 <__assert_fail@plt+0xe630>
   1fdd0:	movw	r0, #11216	; 0x2bd0
   1fdd4:	movt	r0, #2
   1fdd8:	mov	r2, #179	; 0xb3
   1fddc:	bl	11820 <__assert_fail@plt>
   1fde0:	movw	r1, #11128	; 0x2b78
   1fde4:	movt	r1, #2
   1fde8:	ldr	r3, [pc, #96]	; 1fe50 <__assert_fail@plt+0xe630>
   1fdec:	movw	r0, #11164	; 0x2b9c
   1fdf0:	movt	r0, #2
   1fdf4:	mov	r2, #126	; 0x7e
   1fdf8:	bl	11820 <__assert_fail@plt>
   1fdfc:	movw	r1, #11128	; 0x2b78
   1fe00:	movt	r1, #2
   1fe04:	ldr	r3, [pc, #68]	; 1fe50 <__assert_fail@plt+0xe630>
   1fe08:	movw	r0, #11172	; 0x2ba4
   1fe0c:	movt	r0, #2
   1fe10:	mov	r2, #127	; 0x7f
   1fe14:	bl	11820 <__assert_fail@plt>
   1fe18:	movw	r1, #11128	; 0x2b78
   1fe1c:	movt	r1, #2
   1fe20:	ldr	r3, [pc, #40]	; 1fe50 <__assert_fail@plt+0xe630>
   1fe24:	movw	r0, #11188	; 0x2bb4
   1fe28:	movt	r0, #2
   1fe2c:	mov	r2, #162	; 0xa2
   1fe30:	bl	11820 <__assert_fail@plt>
   1fe34:	movw	r1, #11128	; 0x2b78
   1fe38:	movt	r1, #2
   1fe3c:	ldr	r3, [pc, #12]	; 1fe50 <__assert_fail@plt+0xe630>
   1fe40:	movw	r0, #11200	; 0x2bc0
   1fe44:	movt	r0, #2
   1fe48:	mov	r2, #163	; 0xa3
   1fe4c:	bl	11820 <__assert_fail@plt>
   1fe50:	andeq	r2, r2, ip, ror #22
   1fe54:	strd	r4, [sp, #-16]!
   1fe58:	mov	r4, r0
   1fe5c:	str	r6, [sp, #8]
   1fe60:	str	lr, [sp, #12]
   1fe64:	bl	1155c <__fpending@plt>
   1fe68:	ldr	r5, [r4]
   1fe6c:	mov	r6, r0
   1fe70:	mov	r0, r4
   1fe74:	bl	1fedc <__assert_fail@plt+0xe6bc>
   1fe78:	mov	r4, r0
   1fe7c:	and	r5, r5, #32
   1fe80:	cmp	r5, #0
   1fe84:	bne	1febc <__assert_fail@plt+0xe69c>
   1fe88:	cmp	r0, #0
   1fe8c:	beq	1fea8 <__assert_fail@plt+0xe688>
   1fe90:	cmp	r6, #0
   1fe94:	bne	1fed4 <__assert_fail@plt+0xe6b4>
   1fe98:	bl	1167c <__errno_location@plt>
   1fe9c:	ldr	r4, [r0]
   1fea0:	subs	r4, r4, #9
   1fea4:	mvnne	r4, #0
   1fea8:	mov	r0, r4
   1feac:	ldrd	r4, [sp]
   1feb0:	ldr	r6, [sp, #8]
   1feb4:	add	sp, sp, #12
   1feb8:	pop	{pc}		; (ldr pc, [sp], #4)
   1febc:	cmp	r0, #0
   1fec0:	bne	1fed4 <__assert_fail@plt+0xe6b4>
   1fec4:	bl	1167c <__errno_location@plt>
   1fec8:	str	r4, [r0]
   1fecc:	mvn	r4, #0
   1fed0:	b	1fea8 <__assert_fail@plt+0xe688>
   1fed4:	mvn	r4, #0
   1fed8:	b	1fea8 <__assert_fail@plt+0xe688>
   1fedc:	strd	r4, [sp, #-12]!
   1fee0:	mov	r4, r0
   1fee4:	str	lr, [sp, #8]
   1fee8:	sub	sp, sp, #12
   1feec:	bl	116c4 <fileno@plt>
   1fef0:	cmp	r0, #0
   1fef4:	mov	r0, r4
   1fef8:	blt	1ff7c <__assert_fail@plt+0xe75c>
   1fefc:	bl	115d4 <__freading@plt>
   1ff00:	cmp	r0, #0
   1ff04:	bne	1ff48 <__assert_fail@plt+0xe728>
   1ff08:	mov	r0, r4
   1ff0c:	bl	1ffd0 <__assert_fail@plt+0xe7b0>
   1ff10:	cmp	r0, #0
   1ff14:	beq	1ff78 <__assert_fail@plt+0xe758>
   1ff18:	bl	1167c <__errno_location@plt>
   1ff1c:	mov	r5, r0
   1ff20:	mov	r0, r4
   1ff24:	ldr	r4, [r5]
   1ff28:	bl	116e8 <fclose@plt>
   1ff2c:	cmp	r4, #0
   1ff30:	mvnne	r0, #0
   1ff34:	strne	r4, [r5]
   1ff38:	add	sp, sp, #12
   1ff3c:	ldrd	r4, [sp]
   1ff40:	add	sp, sp, #8
   1ff44:	pop	{pc}		; (ldr pc, [sp], #4)
   1ff48:	mov	r0, r4
   1ff4c:	bl	116c4 <fileno@plt>
   1ff50:	mov	r1, #1
   1ff54:	mov	r2, #0
   1ff58:	mov	r3, #0
   1ff5c:	str	r1, [sp]
   1ff60:	bl	11538 <lseek64@plt>
   1ff64:	mvn	r3, #0
   1ff68:	mvn	r2, #0
   1ff6c:	cmp	r1, r3
   1ff70:	cmpeq	r0, r2
   1ff74:	bne	1ff08 <__assert_fail@plt+0xe6e8>
   1ff78:	mov	r0, r4
   1ff7c:	add	sp, sp, #12
   1ff80:	ldrd	r4, [sp]
   1ff84:	ldr	lr, [sp, #8]
   1ff88:	add	sp, sp, #12
   1ff8c:	b	116e8 <fclose@plt>
   1ff90:	push	{r1, r2, r3}
   1ff94:	push	{lr}		; (str lr, [sp, #-4]!)
   1ff98:	sub	sp, sp, #8
   1ff9c:	ldr	r1, [sp, #12]
   1ffa0:	ands	r2, r1, #64	; 0x40
   1ffa4:	bne	1ffc0 <__assert_fail@plt+0xe7a0>
   1ffa8:	bl	1158c <open64@plt>
   1ffac:	bl	201f4 <__assert_fail@plt+0xe9d4>
   1ffb0:	add	sp, sp, #8
   1ffb4:	pop	{lr}		; (ldr lr, [sp], #4)
   1ffb8:	add	sp, sp, #12
   1ffbc:	bx	lr
   1ffc0:	add	r3, sp, #16
   1ffc4:	ldr	r2, [sp, #16]
   1ffc8:	str	r3, [sp, #4]
   1ffcc:	b	1ffa8 <__assert_fail@plt+0xe788>
   1ffd0:	str	r4, [sp, #-8]!
   1ffd4:	subs	r4, r0, #0
   1ffd8:	str	lr, [sp, #4]
   1ffdc:	sub	sp, sp, #8
   1ffe0:	beq	1fffc <__assert_fail@plt+0xe7dc>
   1ffe4:	bl	115d4 <__freading@plt>
   1ffe8:	cmp	r0, #0
   1ffec:	beq	1fffc <__assert_fail@plt+0xe7dc>
   1fff0:	ldr	r3, [r4]
   1fff4:	tst	r3, #256	; 0x100
   1fff8:	bne	20014 <__assert_fail@plt+0xe7f4>
   1fffc:	mov	r0, r4
   20000:	add	sp, sp, #8
   20004:	ldr	r4, [sp]
   20008:	ldr	lr, [sp, #4]
   2000c:	add	sp, sp, #8
   20010:	b	1146c <fflush@plt>
   20014:	mov	r1, #1
   20018:	mov	r2, #0
   2001c:	mov	r3, #0
   20020:	mov	r0, r4
   20024:	str	r1, [sp]
   20028:	bl	20030 <__assert_fail@plt+0xe810>
   2002c:	b	1fffc <__assert_fail@plt+0xe7dc>
   20030:	strd	r4, [sp, #-24]!	; 0xffffffe8
   20034:	mov	r4, r0
   20038:	ldr	ip, [r0, #4]
   2003c:	strd	r6, [sp, #8]
   20040:	str	lr, [sp, #20]
   20044:	ldr	lr, [r0, #8]
   20048:	str	r8, [sp, #16]
   2004c:	sub	sp, sp, #8
   20050:	ldr	r5, [sp, #32]
   20054:	cmp	lr, ip
   20058:	beq	20080 <__assert_fail@plt+0xe860>
   2005c:	mov	r0, r4
   20060:	str	r5, [sp, #32]
   20064:	add	sp, sp, #8
   20068:	ldrd	r4, [sp]
   2006c:	ldrd	r6, [sp, #8]
   20070:	ldr	r8, [sp, #16]
   20074:	ldr	lr, [sp, #20]
   20078:	add	sp, sp, #24
   2007c:	b	116f4 <fseeko64@plt>
   20080:	ldr	ip, [r0, #16]
   20084:	ldr	lr, [r0, #20]
   20088:	cmp	lr, ip
   2008c:	bne	2005c <__assert_fail@plt+0xe83c>
   20090:	ldr	r8, [r0, #36]	; 0x24
   20094:	cmp	r8, #0
   20098:	bne	2005c <__assert_fail@plt+0xe83c>
   2009c:	mov	r6, r2
   200a0:	mov	r7, r3
   200a4:	bl	116c4 <fileno@plt>
   200a8:	mov	r2, r6
   200ac:	mov	r3, r7
   200b0:	str	r5, [sp]
   200b4:	bl	11538 <lseek64@plt>
   200b8:	mvn	r3, #0
   200bc:	mvn	r2, #0
   200c0:	cmp	r1, r3
   200c4:	cmpeq	r0, r2
   200c8:	beq	200f8 <__assert_fail@plt+0xe8d8>
   200cc:	ldr	r3, [r4]
   200d0:	strd	r0, [r4, #80]	; 0x50
   200d4:	bic	r3, r3, #16
   200d8:	str	r3, [r4]
   200dc:	mov	r0, r8
   200e0:	add	sp, sp, #8
   200e4:	ldrd	r4, [sp]
   200e8:	ldrd	r6, [sp, #8]
   200ec:	ldr	r8, [sp, #16]
   200f0:	add	sp, sp, #20
   200f4:	pop	{pc}		; (ldr pc, [sp], #4)
   200f8:	mvn	r8, #0
   200fc:	b	200dc <__assert_fail@plt+0xe8bc>
   20100:	mov	r0, #14
   20104:	str	r4, [sp, #-8]!
   20108:	str	lr, [sp, #4]
   2010c:	bl	11754 <nl_langinfo@plt>
   20110:	cmp	r0, #0
   20114:	beq	20138 <__assert_fail@plt+0xe918>
   20118:	ldrb	r2, [r0]
   2011c:	movw	r3, #11236	; 0x2be4
   20120:	movt	r3, #2
   20124:	ldr	r4, [sp]
   20128:	add	sp, sp, #4
   2012c:	cmp	r2, #0
   20130:	moveq	r0, r3
   20134:	pop	{pc}		; (ldr pc, [sp], #4)
   20138:	ldr	r4, [sp]
   2013c:	add	sp, sp, #4
   20140:	movw	r0, #11236	; 0x2be4
   20144:	movt	r0, #2
   20148:	pop	{pc}		; (ldr pc, [sp], #4)
   2014c:	strd	r4, [sp, #-20]!	; 0xffffffec
   20150:	mov	r5, r2
   20154:	strd	r6, [sp, #8]
   20158:	subs	r6, r0, #0
   2015c:	mov	r7, r1
   20160:	str	lr, [sp, #16]
   20164:	sub	sp, sp, #12
   20168:	addeq	r6, sp, #4
   2016c:	mov	r0, r6
   20170:	bl	11568 <mbrtowc@plt>
   20174:	cmp	r5, #0
   20178:	cmnne	r0, #3
   2017c:	mov	r4, r0
   20180:	bhi	2019c <__assert_fail@plt+0xe97c>
   20184:	mov	r0, r4
   20188:	add	sp, sp, #12
   2018c:	ldrd	r4, [sp]
   20190:	ldrd	r6, [sp, #8]
   20194:	add	sp, sp, #16
   20198:	pop	{pc}		; (ldr pc, [sp], #4)
   2019c:	mov	r0, #0
   201a0:	bl	203d4 <__assert_fail@plt+0xebb4>
   201a4:	cmp	r0, #0
   201a8:	bne	20184 <__assert_fail@plt+0xe964>
   201ac:	ldrb	r3, [r7]
   201b0:	mov	r4, #1
   201b4:	str	r3, [r6]
   201b8:	b	20184 <__assert_fail@plt+0xe964>
   201bc:	umull	r2, r3, r1, r2
   201c0:	cmp	r3, #0
   201c4:	bne	201d0 <__assert_fail@plt+0xe9b0>
   201c8:	mov	r1, r2
   201cc:	b	1f024 <__assert_fail@plt+0xd804>
   201d0:	str	r4, [sp, #-8]!
   201d4:	str	lr, [sp, #4]
   201d8:	bl	1167c <__errno_location@plt>
   201dc:	mov	r3, #12
   201e0:	ldr	r4, [sp]
   201e4:	add	sp, sp, #4
   201e8:	str	r3, [r0]
   201ec:	mov	r0, #0
   201f0:	pop	{pc}		; (ldr pc, [sp], #4)
   201f4:	cmp	r0, #2
   201f8:	strd	r4, [sp, #-24]!	; 0xffffffe8
   201fc:	mov	r4, r0
   20200:	strd	r6, [sp, #8]
   20204:	str	r8, [sp, #16]
   20208:	str	lr, [sp, #20]
   2020c:	bls	20228 <__assert_fail@plt+0xea08>
   20210:	mov	r0, r4
   20214:	ldrd	r4, [sp]
   20218:	ldrd	r6, [sp, #8]
   2021c:	ldr	r8, [sp, #16]
   20220:	add	sp, sp, #20
   20224:	pop	{pc}		; (ldr pc, [sp], #4)
   20228:	bl	204f0 <__assert_fail@plt+0xecd0>
   2022c:	mov	r7, r0
   20230:	bl	1167c <__errno_location@plt>
   20234:	mov	r5, r0
   20238:	mov	r0, r4
   2023c:	ldr	r6, [r5]
   20240:	mov	r4, r7
   20244:	bl	117fc <close@plt>
   20248:	str	r6, [r5]
   2024c:	b	20210 <__assert_fail@plt+0xe9f0>
   20250:	strd	r4, [sp, #-28]!	; 0xffffffe4
   20254:	strd	r6, [sp, #8]
   20258:	subs	r7, r0, #0
   2025c:	strd	r8, [sp, #16]
   20260:	str	lr, [sp, #24]
   20264:	sub	sp, sp, #12
   20268:	str	r1, [sp, #4]
   2026c:	beq	20318 <__assert_fail@plt+0xeaf8>
   20270:	mov	r8, r1
   20274:	mov	r5, r1
   20278:	mov	r6, r7
   2027c:	mov	r4, #0
   20280:	add	r5, r5, #4
   20284:	ldr	r0, [r5, #-4]
   20288:	str	r5, [sp, #4]
   2028c:	bl	11640 <strlen@plt>
   20290:	adds	r4, r0, r4
   20294:	mvncs	r4, #0
   20298:	subs	r6, r6, #1
   2029c:	bne	20280 <__assert_fail@plt+0xea60>
   202a0:	cmp	r4, #0
   202a4:	blt	20308 <__assert_fail@plt+0xeae8>
   202a8:	add	r0, r4, #1
   202ac:	bl	1e908 <__assert_fail@plt+0xd0e8>
   202b0:	mov	r6, r0
   202b4:	mov	r4, r0
   202b8:	ldr	r9, [r8], #4
   202bc:	mov	r0, r9
   202c0:	bl	11640 <strlen@plt>
   202c4:	mov	r5, r0
   202c8:	mov	r2, r0
   202cc:	mov	r1, r9
   202d0:	mov	r0, r4
   202d4:	bl	11490 <memcpy@plt>
   202d8:	subs	r7, r7, #1
   202dc:	add	r4, r4, r5
   202e0:	bne	202b8 <__assert_fail@plt+0xea98>
   202e4:	mov	r3, #0
   202e8:	strb	r3, [r4]
   202ec:	mov	r0, r6
   202f0:	add	sp, sp, #12
   202f4:	ldrd	r4, [sp]
   202f8:	ldrd	r6, [sp, #8]
   202fc:	ldrd	r8, [sp, #16]
   20300:	add	sp, sp, #24
   20304:	pop	{pc}		; (ldr pc, [sp], #4)
   20308:	bl	1167c <__errno_location@plt>
   2030c:	mov	r3, #75	; 0x4b
   20310:	str	r3, [r0]
   20314:	b	202ec <__assert_fail@plt+0xeacc>
   20318:	mov	r0, #1
   2031c:	bl	1e908 <__assert_fail@plt+0xd0e8>
   20320:	mov	r4, r0
   20324:	mov	r6, r0
   20328:	b	202e4 <__assert_fail@plt+0xeac4>
   2032c:	push	{lr}		; (str lr, [sp, #-4]!)
   20330:	sub	sp, sp, #12
   20334:	ldrb	ip, [r0]
   20338:	cmp	ip, #0
   2033c:	beq	20384 <__assert_fail@plt+0xeb64>
   20340:	cmp	ip, #37	; 0x25
   20344:	bne	20394 <__assert_fail@plt+0xeb74>
   20348:	ldrb	r3, [r0, #1]
   2034c:	cmp	r3, #115	; 0x73
   20350:	bne	20394 <__assert_fail@plt+0xeb74>
   20354:	mov	ip, #0
   20358:	add	r2, r0, #1
   2035c:	b	20374 <__assert_fail@plt+0xeb54>
   20360:	cmp	lr, #37	; 0x25
   20364:	bne	20394 <__assert_fail@plt+0xeb74>
   20368:	ldrb	lr, [r2, ip, lsl #1]
   2036c:	cmp	lr, #115	; 0x73
   20370:	bne	20394 <__assert_fail@plt+0xeb74>
   20374:	add	ip, ip, #1
   20378:	ldrb	lr, [r0, ip, lsl #1]
   2037c:	cmp	lr, #0
   20380:	bne	20360 <__assert_fail@plt+0xeb40>
   20384:	mov	r0, ip
   20388:	bl	20250 <__assert_fail@plt+0xea30>
   2038c:	add	sp, sp, #12
   20390:	pop	{pc}		; (ldr pc, [sp], #4)
   20394:	mov	r3, r1
   20398:	mov	r2, r0
   2039c:	mov	r1, #1
   203a0:	add	r0, sp, #4
   203a4:	bl	116a0 <__vasprintf_chk@plt>
   203a8:	cmp	r0, #0
   203ac:	blt	203bc <__assert_fail@plt+0xeb9c>
   203b0:	ldr	r0, [sp, #4]
   203b4:	add	sp, sp, #12
   203b8:	pop	{pc}		; (ldr pc, [sp], #4)
   203bc:	bl	1167c <__errno_location@plt>
   203c0:	ldr	r3, [r0]
   203c4:	cmp	r3, #12
   203c8:	movne	r0, #0
   203cc:	bne	203b4 <__assert_fail@plt+0xeb94>
   203d0:	bl	1eec0 <__assert_fail@plt+0xd6a0>
   203d4:	push	{lr}		; (str lr, [sp, #-4]!)
   203d8:	sub	sp, sp, #268	; 0x10c
   203dc:	movw	r2, #257	; 0x101
   203e0:	add	r1, sp, #4
   203e4:	bl	2042c <__assert_fail@plt+0xec0c>
   203e8:	cmp	r0, #0
   203ec:	movne	r0, #0
   203f0:	bne	20424 <__assert_fail@plt+0xec04>
   203f4:	movw	r1, #11244	; 0x2bec
   203f8:	movt	r1, #2
   203fc:	add	r0, sp, #4
   20400:	bl	1143c <strcmp@plt>
   20404:	cmp	r0, #0
   20408:	beq	20424 <__assert_fail@plt+0xec04>
   2040c:	add	r0, sp, #4
   20410:	movw	r1, #11248	; 0x2bf0
   20414:	movt	r1, #2
   20418:	bl	1143c <strcmp@plt>
   2041c:	adds	r0, r0, #0
   20420:	movne	r0, #1
   20424:	add	sp, sp, #268	; 0x10c
   20428:	pop	{pc}		; (ldr pc, [sp], #4)
   2042c:	strd	r4, [sp, #-16]!
   20430:	mov	r5, r1
   20434:	mov	r1, #0
   20438:	mov	r4, r2
   2043c:	str	r6, [sp, #8]
   20440:	str	lr, [sp, #12]
   20444:	bl	11730 <setlocale@plt>
   20448:	subs	r6, r0, #0
   2044c:	beq	204cc <__assert_fail@plt+0xecac>
   20450:	bl	11640 <strlen@plt>
   20454:	cmp	r4, r0
   20458:	bhi	20478 <__assert_fail@plt+0xec58>
   2045c:	cmp	r4, #0
   20460:	moveq	r0, #34	; 0x22
   20464:	bne	2049c <__assert_fail@plt+0xec7c>
   20468:	ldrd	r4, [sp]
   2046c:	ldr	r6, [sp, #8]
   20470:	add	sp, sp, #12
   20474:	pop	{pc}		; (ldr pc, [sp], #4)
   20478:	add	r2, r0, #1
   2047c:	mov	r1, r6
   20480:	mov	r0, r5
   20484:	bl	11490 <memcpy@plt>
   20488:	ldrd	r4, [sp]
   2048c:	mov	r0, #0
   20490:	ldr	r6, [sp, #8]
   20494:	add	sp, sp, #12
   20498:	pop	{pc}		; (ldr pc, [sp], #4)
   2049c:	sub	r4, r4, #1
   204a0:	mov	r1, r6
   204a4:	mov	r2, r4
   204a8:	mov	r0, r5
   204ac:	bl	11490 <memcpy@plt>
   204b0:	mov	r3, #0
   204b4:	mov	r0, #34	; 0x22
   204b8:	strb	r3, [r5, r4]
   204bc:	ldrd	r4, [sp]
   204c0:	ldr	r6, [sp, #8]
   204c4:	add	sp, sp, #12
   204c8:	pop	{pc}		; (ldr pc, [sp], #4)
   204cc:	cmp	r4, #0
   204d0:	mov	r0, #22
   204d4:	strbne	r6, [r5]
   204d8:	ldrd	r4, [sp]
   204dc:	ldr	r6, [sp, #8]
   204e0:	add	sp, sp, #12
   204e4:	pop	{pc}		; (ldr pc, [sp], #4)
   204e8:	mov	r1, #0
   204ec:	b	11730 <setlocale@plt>
   204f0:	mov	r2, #3
   204f4:	mov	r1, #0
   204f8:	b	204fc <__assert_fail@plt+0xecdc>
   204fc:	push	{r1, r2, r3}
   20500:	strd	r4, [sp, #-20]!	; 0xffffffec
   20504:	strd	r6, [sp, #8]
   20508:	str	lr, [sp, #16]
   2050c:	sub	sp, sp, #8
   20510:	ldr	r1, [sp, #28]
   20514:	add	r2, sp, #32
   20518:	str	r2, [sp, #4]
   2051c:	cmp	r1, #0
   20520:	beq	205fc <__assert_fail@plt+0xeddc>
   20524:	movw	r3, #1030	; 0x406
   20528:	mov	r6, r0
   2052c:	cmp	r1, r3
   20530:	beq	2060c <__assert_fail@plt+0xedec>
   20534:	cmp	r1, #11
   20538:	beq	205b4 <__assert_fail@plt+0xed94>
   2053c:	ble	20594 <__assert_fail@plt+0xed74>
   20540:	movw	r2, #1031	; 0x407
   20544:	cmp	r1, r2
   20548:	bgt	205d0 <__assert_fail@plt+0xedb0>
   2054c:	cmp	r1, r3
   20550:	bge	20560 <__assert_fail@plt+0xed40>
   20554:	movw	r3, #1025	; 0x401
   20558:	cmp	r1, r3
   2055c:	beq	205b4 <__assert_fail@plt+0xed94>
   20560:	ldr	r3, [sp, #4]
   20564:	mov	r0, r6
   20568:	ldr	r2, [r3]
   2056c:	bl	11718 <fcntl64@plt>
   20570:	mov	r4, r0
   20574:	mov	r0, r4
   20578:	add	sp, sp, #8
   2057c:	ldrd	r4, [sp]
   20580:	ldrd	r6, [sp, #8]
   20584:	ldr	lr, [sp, #16]
   20588:	add	sp, sp, #20
   2058c:	add	sp, sp, #12
   20590:	bx	lr
   20594:	cmp	r1, #4
   20598:	beq	20560 <__assert_fail@plt+0xed40>
   2059c:	bgt	205c4 <__assert_fail@plt+0xeda4>
   205a0:	cmp	r1, #2
   205a4:	beq	20560 <__assert_fail@plt+0xed40>
   205a8:	bgt	205b4 <__assert_fail@plt+0xed94>
   205ac:	cmp	r1, #1
   205b0:	bne	20560 <__assert_fail@plt+0xed40>
   205b4:	mov	r0, r6
   205b8:	bl	11718 <fcntl64@plt>
   205bc:	mov	r4, r0
   205c0:	b	20574 <__assert_fail@plt+0xed54>
   205c4:	cmp	r1, #9
   205c8:	bne	20560 <__assert_fail@plt+0xed40>
   205cc:	b	205b4 <__assert_fail@plt+0xed94>
   205d0:	movw	r3, #1033	; 0x409
   205d4:	cmp	r1, r3
   205d8:	beq	20560 <__assert_fail@plt+0xed40>
   205dc:	blt	205b4 <__assert_fail@plt+0xed94>
   205e0:	movw	r3, #1034	; 0x40a
   205e4:	cmp	r1, r3
   205e8:	bne	20560 <__assert_fail@plt+0xed40>
   205ec:	mov	r0, r6
   205f0:	bl	11718 <fcntl64@plt>
   205f4:	mov	r4, r0
   205f8:	b	20574 <__assert_fail@plt+0xed54>
   205fc:	ldr	r2, [sp, #32]
   20600:	bl	11718 <fcntl64@plt>
   20604:	mov	r4, r0
   20608:	b	20574 <__assert_fail@plt+0xed54>
   2060c:	movw	r5, #13224	; 0x33a8
   20610:	movt	r5, #3
   20614:	ldr	r7, [r2]
   20618:	add	r2, sp, #36	; 0x24
   2061c:	ldr	r3, [r5]
   20620:	str	r2, [sp, #4]
   20624:	mov	r2, r7
   20628:	cmp	r3, #0
   2062c:	blt	20648 <__assert_fail@plt+0xee28>
   20630:	bl	11718 <fcntl64@plt>
   20634:	subs	r4, r0, #0
   20638:	blt	206b0 <__assert_fail@plt+0xee90>
   2063c:	mov	r3, #1
   20640:	str	r3, [r5]
   20644:	b	20574 <__assert_fail@plt+0xed54>
   20648:	mov	r1, #0
   2064c:	bl	11718 <fcntl64@plt>
   20650:	subs	r4, r0, #0
   20654:	blt	20574 <__assert_fail@plt+0xed54>
   20658:	ldr	r3, [r5]
   2065c:	cmn	r3, #1
   20660:	bne	20574 <__assert_fail@plt+0xed54>
   20664:	mov	r1, #1
   20668:	mov	r0, r4
   2066c:	bl	11718 <fcntl64@plt>
   20670:	subs	r2, r0, #0
   20674:	blt	20690 <__assert_fail@plt+0xee70>
   20678:	orr	r2, r2, #1
   2067c:	mov	r1, #2
   20680:	mov	r0, r4
   20684:	bl	11718 <fcntl64@plt>
   20688:	cmn	r0, #1
   2068c:	bne	20574 <__assert_fail@plt+0xed54>
   20690:	bl	1167c <__errno_location@plt>
   20694:	mov	r5, r0
   20698:	mov	r0, r4
   2069c:	ldr	r6, [r5]
   206a0:	mvn	r4, #0
   206a4:	bl	117fc <close@plt>
   206a8:	str	r6, [r5]
   206ac:	b	20574 <__assert_fail@plt+0xed54>
   206b0:	bl	1167c <__errno_location@plt>
   206b4:	ldr	r3, [r0]
   206b8:	cmp	r3, #22
   206bc:	bne	2063c <__assert_fail@plt+0xee1c>
   206c0:	mov	r2, r7
   206c4:	mov	r0, r6
   206c8:	mov	r1, #0
   206cc:	bl	11718 <fcntl64@plt>
   206d0:	subs	r4, r0, #0
   206d4:	mvnge	r3, #0
   206d8:	strge	r3, [r5]
   206dc:	bge	20664 <__assert_fail@plt+0xee44>
   206e0:	b	20574 <__assert_fail@plt+0xed54>
   206e4:	cmp	r3, #0
   206e8:	cmpeq	r2, #0
   206ec:	bne	20710 <__assert_fail@plt+0xeef0>
   206f0:	cmp	r1, #0
   206f4:	movlt	r1, #-2147483648	; 0x80000000
   206f8:	movlt	r0, #0
   206fc:	blt	2070c <__assert_fail@plt+0xeeec>
   20700:	cmpeq	r0, #0
   20704:	mvnne	r1, #-2147483648	; 0x80000000
   20708:	mvnne	r0, #0
   2070c:	b	207f4 <__assert_fail@plt+0xefd4>
   20710:	sub	sp, sp, #8
   20714:	push	{sp, lr}
   20718:	cmp	r1, #0
   2071c:	blt	2073c <__assert_fail@plt+0xef1c>
   20720:	cmp	r3, #0
   20724:	blt	20770 <__assert_fail@plt+0xef50>
   20728:	bl	20804 <__assert_fail@plt+0xefe4>
   2072c:	ldr	lr, [sp, #4]
   20730:	add	sp, sp, #8
   20734:	pop	{r2, r3}
   20738:	bx	lr
   2073c:	rsbs	r0, r0, #0
   20740:	sbc	r1, r1, r1, lsl #1
   20744:	cmp	r3, #0
   20748:	blt	20794 <__assert_fail@plt+0xef74>
   2074c:	bl	20804 <__assert_fail@plt+0xefe4>
   20750:	ldr	lr, [sp, #4]
   20754:	add	sp, sp, #8
   20758:	pop	{r2, r3}
   2075c:	rsbs	r0, r0, #0
   20760:	sbc	r1, r1, r1, lsl #1
   20764:	rsbs	r2, r2, #0
   20768:	sbc	r3, r3, r3, lsl #1
   2076c:	bx	lr
   20770:	rsbs	r2, r2, #0
   20774:	sbc	r3, r3, r3, lsl #1
   20778:	bl	20804 <__assert_fail@plt+0xefe4>
   2077c:	ldr	lr, [sp, #4]
   20780:	add	sp, sp, #8
   20784:	pop	{r2, r3}
   20788:	rsbs	r0, r0, #0
   2078c:	sbc	r1, r1, r1, lsl #1
   20790:	bx	lr
   20794:	rsbs	r2, r2, #0
   20798:	sbc	r3, r3, r3, lsl #1
   2079c:	bl	20804 <__assert_fail@plt+0xefe4>
   207a0:	ldr	lr, [sp, #4]
   207a4:	add	sp, sp, #8
   207a8:	pop	{r2, r3}
   207ac:	rsbs	r2, r2, #0
   207b0:	sbc	r3, r3, r3, lsl #1
   207b4:	bx	lr
   207b8:	cmp	r3, #0
   207bc:	cmpeq	r2, #0
   207c0:	bne	207d8 <__assert_fail@plt+0xefb8>
   207c4:	cmp	r1, #0
   207c8:	cmpeq	r0, #0
   207cc:	mvnne	r1, #0
   207d0:	mvnne	r0, #0
   207d4:	b	207f4 <__assert_fail@plt+0xefd4>
   207d8:	sub	sp, sp, #8
   207dc:	push	{sp, lr}
   207e0:	bl	20804 <__assert_fail@plt+0xefe4>
   207e4:	ldr	lr, [sp, #4]
   207e8:	add	sp, sp, #8
   207ec:	pop	{r2, r3}
   207f0:	bx	lr
   207f4:	push	{r1, lr}
   207f8:	mov	r0, #8
   207fc:	bl	1140c <raise@plt>
   20800:	pop	{r1, pc}
   20804:	cmp	r1, r3
   20808:	cmpeq	r0, r2
   2080c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20810:	mov	r4, r0
   20814:	movcc	r0, #0
   20818:	mov	r5, r1
   2081c:	ldr	lr, [sp, #36]	; 0x24
   20820:	movcc	r1, r0
   20824:	bcc	20920 <__assert_fail@plt+0xf100>
   20828:	cmp	r3, #0
   2082c:	clzeq	ip, r2
   20830:	clzne	ip, r3
   20834:	addeq	ip, ip, #32
   20838:	cmp	r5, #0
   2083c:	clzeq	r1, r4
   20840:	addeq	r1, r1, #32
   20844:	clzne	r1, r5
   20848:	sub	ip, ip, r1
   2084c:	sub	sl, ip, #32
   20850:	lsl	r9, r3, ip
   20854:	rsb	fp, ip, #32
   20858:	orr	r9, r9, r2, lsl sl
   2085c:	orr	r9, r9, r2, lsr fp
   20860:	lsl	r8, r2, ip
   20864:	cmp	r5, r9
   20868:	cmpeq	r4, r8
   2086c:	movcc	r0, #0
   20870:	movcc	r1, r0
   20874:	bcc	20890 <__assert_fail@plt+0xf070>
   20878:	mov	r0, #1
   2087c:	subs	r4, r4, r8
   20880:	lsl	r1, r0, sl
   20884:	orr	r1, r1, r0, lsr fp
   20888:	lsl	r0, r0, ip
   2088c:	sbc	r5, r5, r9
   20890:	cmp	ip, #0
   20894:	beq	20920 <__assert_fail@plt+0xf100>
   20898:	lsr	r6, r8, #1
   2089c:	orr	r6, r6, r9, lsl #31
   208a0:	lsr	r7, r9, #1
   208a4:	mov	r2, ip
   208a8:	b	208cc <__assert_fail@plt+0xf0ac>
   208ac:	subs	r3, r4, r6
   208b0:	sbc	r8, r5, r7
   208b4:	adds	r3, r3, r3
   208b8:	adc	r8, r8, r8
   208bc:	adds	r4, r3, #1
   208c0:	adc	r5, r8, #0
   208c4:	subs	r2, r2, #1
   208c8:	beq	208e8 <__assert_fail@plt+0xf0c8>
   208cc:	cmp	r5, r7
   208d0:	cmpeq	r4, r6
   208d4:	bcs	208ac <__assert_fail@plt+0xf08c>
   208d8:	adds	r4, r4, r4
   208dc:	adc	r5, r5, r5
   208e0:	subs	r2, r2, #1
   208e4:	bne	208cc <__assert_fail@plt+0xf0ac>
   208e8:	lsr	r3, r4, ip
   208ec:	orr	r3, r3, r5, lsl fp
   208f0:	lsr	r2, r5, ip
   208f4:	orr	r3, r3, r5, lsr sl
   208f8:	adds	r0, r0, r4
   208fc:	mov	r4, r3
   20900:	lsl	r3, r2, ip
   20904:	orr	r3, r3, r4, lsl sl
   20908:	lsl	ip, r4, ip
   2090c:	orr	r3, r3, r4, lsr fp
   20910:	adc	r1, r1, r5
   20914:	subs	r0, r0, ip
   20918:	mov	r5, r2
   2091c:	sbc	r1, r1, r3
   20920:	cmp	lr, #0
   20924:	strdne	r4, [lr]
   20928:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2092c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   20930:	mov	r7, r0
   20934:	ldr	r6, [pc, #72]	; 20984 <__assert_fail@plt+0xf164>
   20938:	ldr	r5, [pc, #72]	; 20988 <__assert_fail@plt+0xf168>
   2093c:	add	r6, pc, r6
   20940:	add	r5, pc, r5
   20944:	sub	r6, r6, r5
   20948:	mov	r8, r1
   2094c:	mov	r9, r2
   20950:	bl	113d4 <calloc@plt-0x20>
   20954:	asrs	r6, r6, #2
   20958:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   2095c:	mov	r4, #0
   20960:	add	r4, r4, #1
   20964:	ldr	r3, [r5], #4
   20968:	mov	r2, r9
   2096c:	mov	r1, r8
   20970:	mov	r0, r7
   20974:	blx	r3
   20978:	cmp	r6, r4
   2097c:	bne	20960 <__assert_fail@plt+0xf140>
   20980:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   20984:	andeq	r2, r1, r8, asr #11
   20988:	andeq	r2, r1, r0, asr #11
   2098c:	bx	lr
   20990:	ldr	r3, [pc, #12]	; 209a4 <__assert_fail@plt+0xf184>
   20994:	mov	r1, #0
   20998:	add	r3, pc, r3
   2099c:	ldr	r2, [r3]
   209a0:	b	11694 <__cxa_atexit@plt>
   209a4:	ldrdeq	r2, [r1], -ip

Disassembly of section .fini:

000209a8 <.fini>:
   209a8:	push	{r3, lr}
   209ac:	pop	{r3, pc}
