
../repos/stcorp-coda-3a25f25/codaeval:     file format elf32-littlearm


Disassembly of section .init:

00010cb4 <.init>:
   10cb4:	push	{r3, lr}
   10cb8:	bl	11734 <_start@@Base+0x3c>
   10cbc:	pop	{r3, pc}

Disassembly of section .plt:

00010cc0 <coda_match_filefilter@plt-0x14>:
   10cc0:	push	{lr}		; (str lr, [sp, #-4]!)
   10cc4:	ldr	lr, [pc, #4]	; 10cd0 <coda_match_filefilter@plt-0x4>
   10cc8:	add	lr, pc, lr
   10ccc:	ldr	pc, [lr, #8]!
   10cd0:	andeq	r2, r1, r0, lsr r3

00010cd4 <coda_match_filefilter@plt>:
   10cd4:	add	ip, pc, #0, 12
   10cd8:	add	ip, ip, #73728	; 0x12000
   10cdc:	ldr	pc, [ip, #816]!	; 0x330

00010ce0 <coda_expression_eval_integer@plt>:
   10ce0:	add	ip, pc, #0, 12
   10ce4:	add	ip, ip, #73728	; 0x12000
   10ce8:	ldr	pc, [ip, #808]!	; 0x328

00010cec <strcmp@plt>:
   10cec:	add	ip, pc, #0, 12
   10cf0:	add	ip, ip, #73728	; 0x12000
   10cf4:	ldr	pc, [ip, #800]!	; 0x320

00010cf8 <printf@plt>:
   10cf8:	add	ip, pc, #0, 12
   10cfc:	add	ip, ip, #73728	; 0x12000
   10d00:	ldr	pc, [ip, #792]!	; 0x318

00010d04 <coda_set_error@plt>:
   10d04:	add	ip, pc, #0, 12
   10d08:	add	ip, ip, #73728	; 0x12000
   10d0c:	ldr	pc, [ip, #784]!	; 0x310

00010d10 <coda_open@plt>:
   10d10:	add	ip, pc, #0, 12
   10d14:	add	ip, ip, #73728	; 0x12000
   10d18:	ldr	pc, [ip, #776]!	; 0x308

00010d1c <free@plt>:
   10d1c:	add	ip, pc, #0, 12
   10d20:	add	ip, ip, #73728	; 0x12000
   10d24:	ldr	pc, [ip, #768]!	; 0x300

00010d28 <coda_set_definition_path_conditional@plt>:
   10d28:	add	ip, pc, #0, 12
   10d2c:	add	ip, ip, #73728	; 0x12000
   10d30:	ldr	pc, [ip, #760]!	; 0x2f8

00010d34 <coda_set_definition_path@plt>:
   10d34:	add	ip, pc, #0, 12
   10d38:	add	ip, ip, #73728	; 0x12000
   10d3c:	ldr	pc, [ip, #752]!	; 0x2f0

00010d40 <fwrite@plt>:
   10d40:	add	ip, pc, #0, 12
   10d44:	add	ip, ip, #73728	; 0x12000
   10d48:	ldr	pc, [ip, #744]!	; 0x2e8

00010d4c <coda_expression_eval_bool@plt>:
   10d4c:	add	ip, pc, #0, 12
   10d50:	add	ip, ip, #73728	; 0x12000
   10d54:	ldr	pc, [ip, #736]!	; 0x2e0

00010d58 <coda_cursor_set_product@plt>:
   10d58:	add	ip, pc, #0, 12
   10d5c:	add	ip, ip, #73728	; 0x12000
   10d60:	ldr	pc, [ip, #728]!	; 0x2d8

00010d64 <coda_done@plt>:
   10d64:	add	ip, pc, #0, 12
   10d68:	add	ip, ip, #73728	; 0x12000
   10d6c:	ldr	pc, [ip, #720]!	; 0x2d0

00010d70 <puts@plt>:
   10d70:	add	ip, pc, #0, 12
   10d74:	add	ip, ip, #73728	; 0x12000
   10d78:	ldr	pc, [ip, #712]!	; 0x2c8

00010d7c <__libc_start_main@plt>:
   10d7c:	add	ip, pc, #0, 12
   10d80:	add	ip, ip, #73728	; 0x12000
   10d84:	ldr	pc, [ip, #704]!	; 0x2c0

00010d88 <coda_expression_delete@plt>:
   10d88:	add	ip, pc, #0, 12
   10d8c:	add	ip, ip, #73728	; 0x12000
   10d90:	ldr	pc, [ip, #696]!	; 0x2b8

00010d94 <__gmon_start__@plt>:
   10d94:	add	ip, pc, #0, 12
   10d98:	add	ip, ip, #73728	; 0x12000
   10d9c:	ldr	pc, [ip, #688]!	; 0x2b0

00010da0 <__ctype_b_loc@plt>:
   10da0:	add	ip, pc, #0, 12
   10da4:	add	ip, ip, #73728	; 0x12000
   10da8:	ldr	pc, [ip, #680]!	; 0x2a8

00010dac <exit@plt>:
   10dac:	add	ip, pc, #0, 12
   10db0:	add	ip, ip, #73728	; 0x12000
   10db4:	ldr	pc, [ip, #672]!	; 0x2a0

00010db8 <strlen@plt>:
   10db8:	add	ip, pc, #0, 12
   10dbc:	add	ip, ip, #73728	; 0x12000
   10dc0:	ldr	pc, [ip, #664]!	; 0x298

00010dc4 <fprintf@plt>:
   10dc4:	add	ip, pc, #0, 12
   10dc8:	add	ip, ip, #73728	; 0x12000
   10dcc:	ldr	pc, [ip, #656]!	; 0x290

00010dd0 <coda_init@plt>:
   10dd0:	add	ip, pc, #0, 12
   10dd4:	add	ip, ip, #73728	; 0x12000
   10dd8:	ldr	pc, [ip, #648]!	; 0x288

00010ddc <coda_set_option_perform_conversions@plt>:
   10ddc:	add	ip, pc, #0, 12
   10de0:	add	ip, ip, #73728	; 0x12000
   10de4:	ldr	pc, [ip, #640]!	; 0x280

00010de8 <coda_expression_eval_string@plt>:
   10de8:	add	ip, pc, #0, 12
   10dec:	add	ip, ip, #73728	; 0x12000
   10df0:	ldr	pc, [ip, #632]!	; 0x278

00010df4 <putchar@plt>:
   10df4:	add	ip, pc, #0, 12
   10df8:	add	ip, ip, #73728	; 0x12000
   10dfc:	ldr	pc, [ip, #624]!	; 0x270

00010e00 <coda_expression_get_type@plt>:
   10e00:	add	ip, pc, #0, 12
   10e04:	add	ip, ip, #73728	; 0x12000
   10e08:	ldr	pc, [ip, #616]!	; 0x268

00010e0c <coda_close@plt>:
   10e0c:	add	ip, pc, #0, 12
   10e10:	add	ip, ip, #73728	; 0x12000
   10e14:	ldr	pc, [ip, #608]!	; 0x260

00010e18 <coda_expression_is_constant@plt>:
   10e18:	add	ip, pc, #0, 12
   10e1c:	add	ip, ip, #73728	; 0x12000
   10e20:	ldr	pc, [ip, #600]!	; 0x258

00010e24 <coda_expression_eval_float@plt>:
   10e24:	add	ip, pc, #0, 12
   10e28:	add	ip, ip, #73728	; 0x12000
   10e2c:	ldr	pc, [ip, #592]!	; 0x250

00010e30 <coda_expression_eval_node@plt>:
   10e30:	add	ip, pc, #0, 12
   10e34:	add	ip, ip, #73728	; 0x12000
   10e38:	ldr	pc, [ip, #584]!	; 0x248

00010e3c <coda_errno_to_string@plt>:
   10e3c:	add	ip, pc, #0, 12
   10e40:	add	ip, ip, #73728	; 0x12000
   10e44:	ldr	pc, [ip, #576]!	; 0x240

00010e48 <coda_expression_get_type_name@plt>:
   10e48:	add	ip, pc, #0, 12
   10e4c:	add	ip, ip, #73728	; 0x12000
   10e50:	ldr	pc, [ip, #568]!	; 0x238

00010e54 <coda_expression_from_string@plt>:
   10e54:	add	ip, pc, #0, 12
   10e58:	add	ip, ip, #73728	; 0x12000
   10e5c:	ldr	pc, [ip, #560]!	; 0x230

00010e60 <coda_get_libcoda_version@plt>:
   10e60:	add	ip, pc, #0, 12
   10e64:	add	ip, ip, #73728	; 0x12000
   10e68:	ldr	pc, [ip, #552]!	; 0x228

00010e6c <coda_get_errno@plt>:
   10e6c:	add	ip, pc, #0, 12
   10e70:	add	ip, ip, #73728	; 0x12000
   10e74:	ldr	pc, [ip, #544]!	; 0x220

00010e78 <abort@plt>:
   10e78:	add	ip, pc, #0, 12
   10e7c:	add	ip, ip, #73728	; 0x12000
   10e80:	ldr	pc, [ip, #536]!	; 0x218

00010e84 <coda_str64@plt>:
   10e84:	add	ip, pc, #0, 12
   10e88:	add	ip, ip, #73728	; 0x12000
   10e8c:	ldr	pc, [ip, #528]!	; 0x210

00010e90 <__assert_fail@plt>:
   10e90:	add	ip, pc, #0, 12
   10e94:	add	ip, ip, #73728	; 0x12000
   10e98:	ldr	pc, [ip, #520]!	; 0x208

Disassembly of section .text:

00010e9c <main@@Base-0x238>:
   10e9c:	ldr	r0, [pc, #432]	; 11054 <__assert_fail@plt+0x1c4>
   10ea0:	push	{r4, lr}
   10ea4:	add	r0, pc, r0
   10ea8:	bl	10d70 <puts@plt>
   10eac:	ldr	r0, [pc, #420]	; 11058 <__assert_fail@plt+0x1c8>
   10eb0:	add	r0, pc, r0
   10eb4:	bl	10d70 <puts@plt>
   10eb8:	ldr	r0, [pc, #412]	; 1105c <__assert_fail@plt+0x1cc>
   10ebc:	add	r0, pc, r0
   10ec0:	bl	10d70 <puts@plt>
   10ec4:	ldr	r0, [pc, #404]	; 11060 <__assert_fail@plt+0x1d0>
   10ec8:	add	r0, pc, r0
   10ecc:	bl	10d70 <puts@plt>
   10ed0:	ldr	r0, [pc, #396]	; 11064 <__assert_fail@plt+0x1d4>
   10ed4:	add	r0, pc, r0
   10ed8:	bl	10d70 <puts@plt>
   10edc:	ldr	r0, [pc, #388]	; 11068 <__assert_fail@plt+0x1d8>
   10ee0:	add	r0, pc, r0
   10ee4:	bl	10d70 <puts@plt>
   10ee8:	ldr	r0, [pc, #380]	; 1106c <__assert_fail@plt+0x1dc>
   10eec:	add	r0, pc, r0
   10ef0:	bl	10d70 <puts@plt>
   10ef4:	mov	r0, #10
   10ef8:	bl	10df4 <putchar@plt>
   10efc:	ldr	r0, [pc, #364]	; 11070 <__assert_fail@plt+0x1e0>
   10f00:	add	r0, pc, r0
   10f04:	bl	10d70 <puts@plt>
   10f08:	ldr	r0, [pc, #356]	; 11074 <__assert_fail@plt+0x1e4>
   10f0c:	add	r0, pc, r0
   10f10:	bl	10d70 <puts@plt>
   10f14:	ldr	r0, [pc, #348]	; 11078 <__assert_fail@plt+0x1e8>
   10f18:	add	r0, pc, r0
   10f1c:	bl	10d70 <puts@plt>
   10f20:	ldr	r0, [pc, #340]	; 1107c <__assert_fail@plt+0x1ec>
   10f24:	add	r0, pc, r0
   10f28:	bl	10d70 <puts@plt>
   10f2c:	ldr	r0, [pc, #332]	; 11080 <__assert_fail@plt+0x1f0>
   10f30:	add	r0, pc, r0
   10f34:	bl	10d70 <puts@plt>
   10f38:	ldr	r0, [pc, #324]	; 11084 <__assert_fail@plt+0x1f4>
   10f3c:	add	r0, pc, r0
   10f40:	bl	10d70 <puts@plt>
   10f44:	ldr	r0, [pc, #316]	; 11088 <__assert_fail@plt+0x1f8>
   10f48:	add	r0, pc, r0
   10f4c:	bl	10d70 <puts@plt>
   10f50:	ldr	r0, [pc, #308]	; 1108c <__assert_fail@plt+0x1fc>
   10f54:	add	r0, pc, r0
   10f58:	bl	10d70 <puts@plt>
   10f5c:	ldr	r0, [pc, #300]	; 11090 <__assert_fail@plt+0x200>
   10f60:	add	r0, pc, r0
   10f64:	bl	10d70 <puts@plt>
   10f68:	ldr	r0, [pc, #292]	; 11094 <__assert_fail@plt+0x204>
   10f6c:	add	r0, pc, r0
   10f70:	bl	10d70 <puts@plt>
   10f74:	ldr	r0, [pc, #284]	; 11098 <__assert_fail@plt+0x208>
   10f78:	add	r0, pc, r0
   10f7c:	bl	10d70 <puts@plt>
   10f80:	ldr	r0, [pc, #276]	; 1109c <__assert_fail@plt+0x20c>
   10f84:	add	r0, pc, r0
   10f88:	bl	10d70 <puts@plt>
   10f8c:	mov	r0, #10
   10f90:	bl	10df4 <putchar@plt>
   10f94:	ldr	r0, [pc, #260]	; 110a0 <__assert_fail@plt+0x210>
   10f98:	add	r0, pc, r0
   10f9c:	bl	10d70 <puts@plt>
   10fa0:	ldr	r0, [pc, #252]	; 110a4 <__assert_fail@plt+0x214>
   10fa4:	add	r0, pc, r0
   10fa8:	bl	10d70 <puts@plt>
   10fac:	mov	r0, #10
   10fb0:	bl	10df4 <putchar@plt>
   10fb4:	ldr	r0, [pc, #236]	; 110a8 <__assert_fail@plt+0x218>
   10fb8:	add	r0, pc, r0
   10fbc:	bl	10d70 <puts@plt>
   10fc0:	ldr	r0, [pc, #228]	; 110ac <__assert_fail@plt+0x21c>
   10fc4:	add	r0, pc, r0
   10fc8:	bl	10d70 <puts@plt>
   10fcc:	mov	r0, #10
   10fd0:	bl	10df4 <putchar@plt>
   10fd4:	ldr	r0, [pc, #212]	; 110b0 <__assert_fail@plt+0x220>
   10fd8:	add	r0, pc, r0
   10fdc:	bl	10d70 <puts@plt>
   10fe0:	ldr	r0, [pc, #204]	; 110b4 <__assert_fail@plt+0x224>
   10fe4:	add	r0, pc, r0
   10fe8:	bl	10d70 <puts@plt>
   10fec:	mov	r0, #10
   10ff0:	bl	10df4 <putchar@plt>
   10ff4:	ldr	r0, [pc, #188]	; 110b8 <__assert_fail@plt+0x228>
   10ff8:	add	r0, pc, r0
   10ffc:	bl	10d70 <puts@plt>
   11000:	ldr	r0, [pc, #180]	; 110bc <__assert_fail@plt+0x22c>
   11004:	add	r0, pc, r0
   11008:	bl	10d70 <puts@plt>
   1100c:	ldr	r0, [pc, #172]	; 110c0 <__assert_fail@plt+0x230>
   11010:	add	r0, pc, r0
   11014:	bl	10d70 <puts@plt>
   11018:	ldr	r0, [pc, #164]	; 110c4 <__assert_fail@plt+0x234>
   1101c:	add	r0, pc, r0
   11020:	bl	10d70 <puts@plt>
   11024:	ldr	r0, [pc, #156]	; 110c8 <__assert_fail@plt+0x238>
   11028:	add	r0, pc, r0
   1102c:	bl	10d70 <puts@plt>
   11030:	ldr	r0, [pc, #148]	; 110cc <__assert_fail@plt+0x23c>
   11034:	add	r0, pc, r0
   11038:	bl	10d70 <puts@plt>
   1103c:	ldr	r0, [pc, #140]	; 110d0 <__assert_fail@plt+0x240>
   11040:	add	r0, pc, r0
   11044:	bl	10d70 <puts@plt>
   11048:	mov	r0, #10
   1104c:	pop	{r4, lr}
   11050:	b	10df4 <putchar@plt>
   11054:	strdeq	r1, [r0], -r4
   11058:	strdeq	r1, [r0], -r0
   1105c:	andeq	r1, r0, r4, lsr r1
   11060:	andeq	r1, r0, r8, ror r1
   11064:	muleq	r0, r0, r1
   11068:	ldrdeq	r1, [r0], -r0
   1106c:	andeq	r1, r0, r0, lsl r2
   11070:	andeq	r1, r0, ip, lsr #4
   11074:	andeq	r1, r0, r4, lsr r2
   11078:	andeq	r1, r0, r0, asr #4
   1107c:	andeq	r1, r0, r4, lsl #5
   11080:	andeq	r1, r0, r8, asr #5
   11084:	andeq	r1, r0, r4, ror #5
   11088:	andeq	r1, r0, r4, lsl r3
   1108c:	andeq	r1, r0, r0, lsr #6
   11090:	andeq	r1, r0, r0, ror #6
   11094:	andeq	r1, r0, r0, lsr #7
   11098:			; <UNDEFINED> instruction: 0x000013b4
   1109c:	strdeq	r1, [r0], -r4
   110a0:	andeq	r1, r0, r0, lsl r4
   110a4:	andeq	r1, r0, r4, asr r4
   110a8:	andeq	r1, r0, r8, asr r4
   110ac:	andeq	r1, r0, r4, ror #8
   110b0:	andeq	r1, r0, r0, ror r4
   110b4:	andeq	r1, r0, r0, lsl #9
   110b8:	andeq	r1, r0, r0, lsr #9
   110bc:	andeq	r1, r0, r0, ror #9
   110c0:	andeq	r1, r0, r0, lsr #10
   110c4:	andeq	r1, r0, r4, asr #10
   110c8:	andeq	r1, r0, r4, lsl #11
   110cc:	andeq	r1, r0, r4, asr #11
   110d0:	strdeq	r1, [r0], -r8

000110d4 <main@@Base>:
   110d4:	ldr	r3, [pc, #1440]	; 1167c <main@@Base+0x5a8>
   110d8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   110dc:	sub	sp, sp, #36	; 0x24
   110e0:	cmp	r0, #1
   110e4:	add	r3, pc, r3
   110e8:	str	r3, [sp, #28]
   110ec:	beq	11498 <main@@Base+0x3c4>
   110f0:	ldr	r4, [r1, #4]
   110f4:	mov	r7, r1
   110f8:	ldr	r1, [pc, #1408]	; 11680 <main@@Base+0x5ac>
   110fc:	mov	r6, r0
   11100:	add	r1, pc, r1
   11104:	mov	r0, r4
   11108:	bl	10cec <strcmp@plt>
   1110c:	cmp	r0, #0
   11110:	beq	11498 <main@@Base+0x3c4>
   11114:	ldr	r1, [pc, #1384]	; 11684 <main@@Base+0x5b0>
   11118:	mov	r0, r4
   1111c:	add	r1, pc, r1
   11120:	bl	10cec <strcmp@plt>
   11124:	cmp	r0, #0
   11128:	beq	11498 <main@@Base+0x3c4>
   1112c:	ldr	r1, [pc, #1364]	; 11688 <main@@Base+0x5b4>
   11130:	mov	r0, r4
   11134:	add	r1, pc, r1
   11138:	bl	10cec <strcmp@plt>
   1113c:	cmp	r0, #0
   11140:	beq	11430 <main@@Base+0x35c>
   11144:	ldr	r1, [pc, #1344]	; 1168c <main@@Base+0x5b8>
   11148:	mov	r0, r4
   1114c:	add	r1, pc, r1
   11150:	bl	10cec <strcmp@plt>
   11154:	cmp	r0, #0
   11158:	beq	11430 <main@@Base+0x35c>
   1115c:	cmp	r6, #2
   11160:	ble	1117c <main@@Base+0xa8>
   11164:	ldr	r1, [pc, #1316]	; 11690 <main@@Base+0x5bc>
   11168:	mov	r0, r4
   1116c:	add	r1, pc, r1
   11170:	bl	10cec <strcmp@plt>
   11174:	cmp	r0, #0
   11178:	beq	112ec <main@@Base+0x218>
   1117c:	ldr	r2, [pc, #1296]	; 11694 <main@@Base+0x5c0>
   11180:	mov	r1, #0
   11184:	add	r2, pc, r2
   11188:	ldr	r0, [r7]
   1118c:	bl	10d28 <coda_set_definition_path_conditional@plt>
   11190:	cmp	r0, #0
   11194:	moveq	fp, #1
   11198:	bne	11460 <main@@Base+0x38c>
   1119c:	cmp	r6, fp
   111a0:	ble	112b4 <main@@Base+0x1e0>
   111a4:	ldr	r3, [pc, #1260]	; 11698 <main@@Base+0x5c4>
   111a8:	ldr	r2, [pc, #1260]	; 1169c <main@@Base+0x5c8>
   111ac:	add	r3, pc, r3
   111b0:	str	r3, [sp, #8]
   111b4:	ldr	r3, [pc, #1252]	; 116a0 <main@@Base+0x5cc>
   111b8:	add	r2, pc, r2
   111bc:	add	r3, pc, r3
   111c0:	ldr	r8, [pc, #1244]	; 116a4 <main@@Base+0x5d0>
   111c4:	ldr	sl, [pc, #1244]	; 116a8 <main@@Base+0x5d4>
   111c8:	str	r3, [sp, #16]
   111cc:	add	r3, r2, #8
   111d0:	str	r3, [sp, #24]
   111d4:	mov	r3, #1
   111d8:	add	r8, pc, r8
   111dc:	add	sl, pc, sl
   111e0:	mov	r9, #0
   111e4:	str	r3, [sp, #12]
   111e8:	b	11288 <main@@Base+0x1b4>
   111ec:	mov	r1, sl
   111f0:	mov	r0, r4
   111f4:	bl	10cec <strcmp@plt>
   111f8:	cmp	r0, #0
   111fc:	beq	112a4 <main@@Base+0x1d0>
   11200:	ldr	r1, [sp, #8]
   11204:	mov	r0, r4
   11208:	bl	10cec <strcmp@plt>
   1120c:	cmp	r0, #0
   11210:	beq	112e4 <main@@Base+0x210>
   11214:	ldr	r1, [sp, #16]
   11218:	mov	r0, r4
   1121c:	bl	10cec <strcmp@plt>
   11220:	cmp	r0, #0
   11224:	beq	112e4 <main@@Base+0x210>
   11228:	ldr	r1, [pc, #1148]	; 116ac <main@@Base+0x5d8>
   1122c:	mov	r0, r4
   11230:	add	r1, pc, r1
   11234:	bl	10cec <strcmp@plt>
   11238:	cmp	r0, #0
   1123c:	bne	112fc <main@@Base+0x228>
   11240:	add	r2, fp, #1
   11244:	cmp	r6, r2
   11248:	str	r2, [sp, #20]
   1124c:	ble	112fc <main@@Base+0x228>
   11250:	add	r5, r7, r5
   11254:	ldr	r0, [r5, #4]
   11258:	ldrb	r1, [r0]
   1125c:	cmp	r1, #45	; 0x2d
   11260:	beq	112fc <main@@Base+0x228>
   11264:	ldr	r1, [sp, #24]
   11268:	bl	10e54 <coda_expression_from_string@plt>
   1126c:	ldr	r2, [sp, #20]
   11270:	cmp	r0, #0
   11274:	bne	114a4 <main@@Base+0x3d0>
   11278:	mov	fp, r2
   1127c:	add	fp, fp, #1
   11280:	cmp	r6, fp
   11284:	ble	112b4 <main@@Base+0x1e0>
   11288:	ldr	r4, [r7, fp, lsl #2]
   1128c:	mov	r1, r8
   11290:	mov	r0, r4
   11294:	bl	10cec <strcmp@plt>
   11298:	lsl	r5, fp, #2
   1129c:	cmp	r0, #0
   112a0:	bne	111ec <main@@Base+0x118>
   112a4:	add	fp, fp, #1
   112a8:	cmp	r6, fp
   112ac:	mov	r9, #1
   112b0:	bgt	11288 <main@@Base+0x1b4>
   112b4:	ldr	r0, [sp, #28]
   112b8:	ldr	r3, [pc, #1008]	; 116b0 <main@@Base+0x5dc>
   112bc:	mov	r2, #25
   112c0:	mov	r1, #1
   112c4:	ldr	r3, [r0, r3]
   112c8:	ldr	r0, [pc, #996]	; 116b4 <main@@Base+0x5e0>
   112cc:	add	r0, pc, r0
   112d0:	ldr	r3, [r3]
   112d4:	bl	10d40 <fwrite@plt>
   112d8:	bl	10e9c <__assert_fail@plt+0xc>
   112dc:	mov	r0, #1
   112e0:	bl	10dac <exit@plt>
   112e4:	str	r0, [sp, #12]
   112e8:	b	1127c <main@@Base+0x1a8>
   112ec:	ldr	r0, [r7, #8]
   112f0:	bl	10d34 <coda_set_definition_path@plt>
   112f4:	mov	fp, #3
   112f8:	b	1119c <main@@Base+0xc8>
   112fc:	ldrb	r2, [r4]
   11300:	cmp	r2, #45	; 0x2d
   11304:	beq	11410 <main@@Base+0x33c>
   11308:	ldr	r5, [pc, #936]	; 116b8 <main@@Base+0x5e4>
   1130c:	mov	r0, r4
   11310:	add	r5, pc, r5
   11314:	add	r1, r5, #4
   11318:	bl	10e54 <coda_expression_from_string@plt>
   1131c:	cmp	r0, #0
   11320:	bne	11644 <main@@Base+0x570>
   11324:	mov	r1, r5
   11328:	ldr	r0, [r5, #4]
   1132c:	bl	10e00 <coda_expression_get_type@plt>
   11330:	cmp	r0, #0
   11334:	bne	1160c <main@@Base+0x538>
   11338:	ldr	r0, [r5]
   1133c:	sub	r2, r0, #4
   11340:	cmp	r2, #1
   11344:	bls	115dc <main@@Base+0x508>
   11348:	cmp	r9, #0
   1134c:	bne	113b4 <main@@Base+0x2e0>
   11350:	add	fp, fp, #1
   11354:	cmp	r6, fp
   11358:	bgt	113cc <main@@Base+0x2f8>
   1135c:	ldr	r3, [r5, #8]
   11360:	cmp	r3, #0
   11364:	bne	115b0 <main@@Base+0x4dc>
   11368:	ldr	r0, [r5, #4]
   1136c:	bl	10e18 <coda_expression_is_constant@plt>
   11370:	cmp	r0, #0
   11374:	beq	11584 <main@@Base+0x4b0>
   11378:	mov	r0, r9
   1137c:	bl	11820 <_start@@Base+0x128>
   11380:	cmp	r0, #0
   11384:	bne	1154c <main@@Base+0x478>
   11388:	ldr	r4, [pc, #812]	; 116bc <main@@Base+0x5e8>
   1138c:	add	r4, pc, r4
   11390:	ldr	r0, [r4, #4]
   11394:	bl	10d88 <coda_expression_delete@plt>
   11398:	ldr	r0, [r4, #8]
   1139c:	cmp	r0, #0
   113a0:	beq	113a8 <main@@Base+0x2d4>
   113a4:	bl	10d88 <coda_expression_delete@plt>
   113a8:	mov	r0, #0
   113ac:	add	sp, sp, #36	; 0x24
   113b0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   113b4:	ldr	r0, [r5, #4]
   113b8:	bl	10d88 <coda_expression_delete@plt>
   113bc:	ldr	r0, [r5, #8]
   113c0:	cmp	r0, #0
   113c4:	bne	113a4 <main@@Base+0x2d0>
   113c8:	b	113a8 <main@@Base+0x2d4>
   113cc:	bl	10dd0 <coda_init@plt>
   113d0:	cmp	r0, #0
   113d4:	bne	11514 <main@@Base+0x440>
   113d8:	ldr	r0, [sp, #12]
   113dc:	bl	10ddc <coda_set_option_perform_conversions@plt>
   113e0:	ldr	r0, [sp, #28]
   113e4:	ldr	r3, [pc, #724]	; 116c0 <main@@Base+0x5ec>
   113e8:	add	r2, r7, fp, lsl #2
   113ec:	sub	r1, r6, fp
   113f0:	ldr	r3, [r0, r3]
   113f4:	mov	r0, r9
   113f8:	str	r9, [sp]
   113fc:	bl	10cd4 <coda_match_filefilter@plt>
   11400:	cmp	r0, #0
   11404:	bne	114dc <main@@Base+0x408>
   11408:	bl	10d64 <coda_done@plt>
   1140c:	b	11388 <main@@Base+0x2b4>
   11410:	ldr	r0, [sp, #28]
   11414:	ldr	r3, [pc, #660]	; 116b0 <main@@Base+0x5dc>
   11418:	mov	r2, #25
   1141c:	mov	r1, #1
   11420:	ldr	r3, [r0, r3]
   11424:	ldr	r0, [pc, #664]	; 116c4 <main@@Base+0x5f0>
   11428:	add	r0, pc, r0
   1142c:	b	112d0 <main@@Base+0x1fc>
   11430:	bl	10e60 <coda_get_libcoda_version@plt>
   11434:	mov	r1, r0
   11438:	ldr	r0, [pc, #648]	; 116c8 <main@@Base+0x5f4>
   1143c:	add	r0, pc, r0
   11440:	bl	10cf8 <printf@plt>
   11444:	ldr	r0, [pc, #640]	; 116cc <main@@Base+0x5f8>
   11448:	add	r0, pc, r0
   1144c:	bl	10d70 <puts@plt>
   11450:	mov	r0, #10
   11454:	bl	10df4 <putchar@plt>
   11458:	mov	r0, #0
   1145c:	bl	10dac <exit@plt>
   11460:	ldr	r2, [sp, #28]
   11464:	ldr	r3, [pc, #580]	; 116b0 <main@@Base+0x5dc>
   11468:	ldr	r3, [r2, r3]
   1146c:	ldr	r4, [r3]
   11470:	bl	10e6c <coda_get_errno@plt>
   11474:	ldr	r0, [r0]
   11478:	bl	10e3c <coda_errno_to_string@plt>
   1147c:	ldr	r1, [pc, #588]	; 116d0 <main@@Base+0x5fc>
   11480:	add	r1, pc, r1
   11484:	mov	r2, r0
   11488:	mov	r0, r4
   1148c:	bl	10dc4 <fprintf@plt>
   11490:	mov	r0, #1
   11494:	bl	10dac <exit@plt>
   11498:	bl	10e9c <__assert_fail@plt+0xc>
   1149c:	mov	r0, #0
   114a0:	bl	10dac <exit@plt>
   114a4:	ldr	r2, [sp, #28]
   114a8:	ldr	r3, [pc, #512]	; 116b0 <main@@Base+0x5dc>
   114ac:	ldr	r3, [r2, r3]
   114b0:	ldr	r4, [r3]
   114b4:	bl	10e6c <coda_get_errno@plt>
   114b8:	ldr	r0, [r0]
   114bc:	bl	10e3c <coda_errno_to_string@plt>
   114c0:	ldr	r1, [pc, #524]	; 116d4 <main@@Base+0x600>
   114c4:	add	r1, pc, r1
   114c8:	mov	r2, r0
   114cc:	mov	r0, r4
   114d0:	bl	10dc4 <fprintf@plt>
   114d4:	mov	r0, #1
   114d8:	bl	10dac <exit@plt>
   114dc:	ldr	r2, [sp, #28]
   114e0:	ldr	r3, [pc, #456]	; 116b0 <main@@Base+0x5dc>
   114e4:	ldr	r3, [r2, r3]
   114e8:	ldr	r4, [r3]
   114ec:	bl	10e6c <coda_get_errno@plt>
   114f0:	ldr	r0, [r0]
   114f4:	bl	10e3c <coda_errno_to_string@plt>
   114f8:	ldr	r1, [pc, #472]	; 116d8 <main@@Base+0x604>
   114fc:	add	r1, pc, r1
   11500:	mov	r2, r0
   11504:	mov	r0, r4
   11508:	bl	10dc4 <fprintf@plt>
   1150c:	mov	r0, #1
   11510:	bl	10dac <exit@plt>
   11514:	ldr	r2, [sp, #28]
   11518:	ldr	r3, [pc, #400]	; 116b0 <main@@Base+0x5dc>
   1151c:	ldr	r3, [r2, r3]
   11520:	ldr	r4, [r3]
   11524:	bl	10e6c <coda_get_errno@plt>
   11528:	ldr	r0, [r0]
   1152c:	bl	10e3c <coda_errno_to_string@plt>
   11530:	ldr	r1, [pc, #420]	; 116dc <main@@Base+0x608>
   11534:	add	r1, pc, r1
   11538:	mov	r2, r0
   1153c:	mov	r0, r4
   11540:	bl	10dc4 <fprintf@plt>
   11544:	mov	r0, #1
   11548:	bl	10dac <exit@plt>
   1154c:	ldr	r2, [sp, #28]
   11550:	ldr	r3, [pc, #344]	; 116b0 <main@@Base+0x5dc>
   11554:	ldr	r3, [r2, r3]
   11558:	ldr	r4, [r3]
   1155c:	bl	10e6c <coda_get_errno@plt>
   11560:	ldr	r0, [r0]
   11564:	bl	10e3c <coda_errno_to_string@plt>
   11568:	ldr	r1, [pc, #368]	; 116e0 <main@@Base+0x60c>
   1156c:	add	r1, pc, r1
   11570:	mov	r2, r0
   11574:	mov	r0, r4
   11578:	bl	10dc4 <fprintf@plt>
   1157c:	mov	r0, #1
   11580:	bl	10dac <exit@plt>
   11584:	ldr	r0, [sp, #28]
   11588:	ldr	r3, [pc, #288]	; 116b0 <main@@Base+0x5dc>
   1158c:	mov	r2, #111	; 0x6f
   11590:	mov	r1, #1
   11594:	ldr	r3, [r0, r3]
   11598:	ldr	r0, [pc, #324]	; 116e4 <main@@Base+0x610>
   1159c:	ldr	r3, [r3]
   115a0:	add	r0, pc, r0
   115a4:	bl	10d40 <fwrite@plt>
   115a8:	mov	r0, #1
   115ac:	bl	10dac <exit@plt>
   115b0:	ldr	r0, [sp, #28]
   115b4:	ldr	r3, [pc, #244]	; 116b0 <main@@Base+0x5dc>
   115b8:	mov	r2, #96	; 0x60
   115bc:	mov	r1, #1
   115c0:	ldr	r3, [r0, r3]
   115c4:	ldr	r0, [pc, #284]	; 116e8 <main@@Base+0x614>
   115c8:	ldr	r3, [r3]
   115cc:	add	r0, pc, r0
   115d0:	bl	10d40 <fwrite@plt>
   115d4:	mov	r0, #1
   115d8:	bl	10dac <exit@plt>
   115dc:	ldr	r2, [sp, #28]
   115e0:	ldr	r3, [pc, #200]	; 116b0 <main@@Base+0x5dc>
   115e4:	ldr	r3, [r2, r3]
   115e8:	ldr	r4, [r3]
   115ec:	bl	10e48 <coda_expression_get_type_name@plt>
   115f0:	ldr	r1, [pc, #244]	; 116ec <main@@Base+0x618>
   115f4:	add	r1, pc, r1
   115f8:	mov	r2, r0
   115fc:	mov	r0, r4
   11600:	bl	10dc4 <fprintf@plt>
   11604:	mov	r0, #1
   11608:	bl	10dac <exit@plt>
   1160c:	ldr	r2, [sp, #28]
   11610:	ldr	r3, [pc, #152]	; 116b0 <main@@Base+0x5dc>
   11614:	ldr	r3, [r2, r3]
   11618:	ldr	r4, [r3]
   1161c:	bl	10e6c <coda_get_errno@plt>
   11620:	ldr	r0, [r0]
   11624:	bl	10e3c <coda_errno_to_string@plt>
   11628:	ldr	r1, [pc, #192]	; 116f0 <main@@Base+0x61c>
   1162c:	add	r1, pc, r1
   11630:	mov	r2, r0
   11634:	mov	r0, r4
   11638:	bl	10dc4 <fprintf@plt>
   1163c:	mov	r0, #1
   11640:	bl	10dac <exit@plt>
   11644:	ldr	r2, [sp, #28]
   11648:	ldr	r3, [pc, #96]	; 116b0 <main@@Base+0x5dc>
   1164c:	ldr	r3, [r2, r3]
   11650:	ldr	r4, [r3]
   11654:	bl	10e6c <coda_get_errno@plt>
   11658:	ldr	r0, [r0]
   1165c:	bl	10e3c <coda_errno_to_string@plt>
   11660:	ldr	r1, [pc, #140]	; 116f4 <main@@Base+0x620>
   11664:	add	r1, pc, r1
   11668:	mov	r2, r0
   1166c:	mov	r0, r4
   11670:	bl	10dc4 <fprintf@plt>
   11674:	mov	r0, #1
   11678:	bl	10dac <exit@plt>
   1167c:	andeq	r1, r1, r4, lsl pc
   11680:	andeq	r1, r0, r8, asr r7
   11684:	andeq	r1, r0, r4, lsl #6
   11688:	andeq	r1, r0, r8, lsr #14
   1168c:	andeq	r1, r0, r4, lsl r7
   11690:	andeq	r1, r0, r0, asr #14
   11694:	andeq	r1, r0, ip, lsr #14
   11698:	andeq	r1, r0, r0, lsr r7
   1169c:	strdeq	r1, [r1], -ip
   116a0:	andeq	r1, r0, ip, asr #32
   116a4:	andeq	r1, r0, r0, lsl #14
   116a8:	andeq	r0, r0, r4, ror pc
   116ac:			; <UNDEFINED> instruction: 0x000016b0
   116b0:	andeq	r0, r0, r4, lsr #1
   116b4:	andeq	r1, r0, r0, asr #12
   116b8:	andeq	r1, r1, r4, lsr #27
   116bc:	andeq	r1, r1, r8, lsr #26
   116c0:	andeq	r0, r0, ip, lsr #1
   116c4:	andeq	r1, r0, r4, ror #9
   116c8:	andeq	r1, r0, r0, lsr r4
   116cc:	andeq	r1, r0, r4, lsr r4
   116d0:	andeq	r1, r0, ip, asr #8
   116d4:	andeq	r1, r0, r0, lsr #8
   116d8:	ldrdeq	r1, [r0], -r0
   116dc:	muleq	r0, r8, r3
   116e0:	andeq	r1, r0, r0, ror #6
   116e4:	andeq	r1, r0, ip, lsr r4
   116e8:	andeq	r1, r0, ip, lsr #7
   116ec:	andeq	r1, r0, r4, asr r3
   116f0:	andeq	r1, r0, r0, lsr #5
   116f4:	andeq	r1, r0, r4, asr #5

000116f8 <_start@@Base>:
   116f8:	mov	fp, #0
   116fc:	mov	lr, #0
   11700:	pop	{r1}		; (ldr r1, [sp], #4)
   11704:	mov	r2, sp
   11708:	push	{r2}		; (str r2, [sp, #-4]!)
   1170c:	push	{r0}		; (str r0, [sp, #-4]!)
   11710:	ldr	ip, [pc, #16]	; 11728 <_start@@Base+0x30>
   11714:	push	{ip}		; (str ip, [sp, #-4]!)
   11718:	ldr	r0, [pc, #12]	; 1172c <_start@@Base+0x34>
   1171c:	ldr	r3, [pc, #12]	; 11730 <_start@@Base+0x38>
   11720:	bl	10d7c <__libc_start_main@plt>
   11724:	bl	10e78 <abort@plt>
   11728:	andeq	r1, r1, r0, lsl #31
   1172c:	ldrdeq	r1, [r1], -r4
   11730:	andeq	r1, r1, r0, lsr #30
   11734:	ldr	r3, [pc, #20]	; 11750 <_start@@Base+0x58>
   11738:	ldr	r2, [pc, #20]	; 11754 <_start@@Base+0x5c>
   1173c:	add	r3, pc, r3
   11740:	ldr	r2, [r3, r2]
   11744:	cmp	r2, #0
   11748:	bxeq	lr
   1174c:	b	10d94 <__gmon_start__@plt>
   11750:			; <UNDEFINED> instruction: 0x000118bc
   11754:	andeq	r0, r0, r8, lsr #1
   11758:	ldr	r3, [pc, #28]	; 1177c <_start@@Base+0x84>
   1175c:	ldr	r0, [pc, #28]	; 11780 <_start@@Base+0x88>
   11760:	sub	r3, r3, r0
   11764:	cmp	r3, #6
   11768:	bxls	lr
   1176c:	ldr	r3, [pc, #16]	; 11784 <_start@@Base+0x8c>
   11770:	cmp	r3, #0
   11774:	bxeq	lr
   11778:	bx	r3
   1177c:	strheq	r3, [r2], -fp
   11780:	strheq	r3, [r2], -r8
   11784:	andeq	r0, r0, r0
   11788:	ldr	r1, [pc, #36]	; 117b4 <_start@@Base+0xbc>
   1178c:	ldr	r0, [pc, #36]	; 117b8 <_start@@Base+0xc0>
   11790:	sub	r1, r1, r0
   11794:	asr	r1, r1, #2
   11798:	add	r1, r1, r1, lsr #31
   1179c:	asrs	r1, r1, #1
   117a0:	bxeq	lr
   117a4:	ldr	r3, [pc, #16]	; 117bc <_start@@Base+0xc4>
   117a8:	cmp	r3, #0
   117ac:	bxeq	lr
   117b0:	bx	r3
   117b4:	strheq	r3, [r2], -r8
   117b8:	strheq	r3, [r2], -r8
   117bc:	andeq	r0, r0, r0
   117c0:	push	{r4, lr}
   117c4:	ldr	r4, [pc, #24]	; 117e4 <_start@@Base+0xec>
   117c8:	ldrb	r3, [r4]
   117cc:	cmp	r3, #0
   117d0:	popne	{r4, pc}
   117d4:	bl	11758 <_start@@Base+0x60>
   117d8:	mov	r3, #1
   117dc:	strb	r3, [r4]
   117e0:	pop	{r4, pc}
   117e4:	strheq	r3, [r2], -r8
   117e8:	ldr	r0, [pc, #40]	; 11818 <_start@@Base+0x120>
   117ec:	ldr	r3, [r0]
   117f0:	cmp	r3, #0
   117f4:	bne	117fc <_start@@Base+0x104>
   117f8:	b	11788 <_start@@Base+0x90>
   117fc:	ldr	r3, [pc, #24]	; 1181c <_start@@Base+0x124>
   11800:	cmp	r3, #0
   11804:	beq	117f8 <_start@@Base+0x100>
   11808:	push	{r4, lr}
   1180c:	blx	r3
   11810:	pop	{r4, lr}
   11814:	b	11788 <_start@@Base+0x90>
   11818:	strdeq	r2, [r2], -ip
   1181c:	andeq	r0, r0, r0
   11820:	ldr	r3, [pc, #1184]	; 11cc8 <_start@@Base+0x5d0>
   11824:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11828:	add	r3, pc, r3
   1182c:	sub	sp, sp, #44	; 0x2c
   11830:	ldr	r3, [r3]
   11834:	cmp	r3, #5
   11838:	addls	pc, pc, r3, lsl #2
   1183c:	b	11cc0 <_start@@Base+0x5c8>
   11840:	b	11878 <_start@@Base+0x180>
   11844:	b	118c0 <_start@@Base+0x1c8>
   11848:	b	118f8 <_start@@Base+0x200>
   1184c:	b	11934 <_start@@Base+0x23c>
   11850:	b	11858 <_start@@Base+0x160>
   11854:	b	11858 <_start@@Base+0x160>
   11858:	ldr	r3, [pc, #1132]	; 11ccc <_start@@Base+0x5d4>
   1185c:	ldr	r1, [pc, #1132]	; 11cd0 <_start@@Base+0x5d8>
   11860:	ldr	r0, [pc, #1132]	; 11cd4 <_start@@Base+0x5dc>
   11864:	add	r3, pc, r3
   11868:	mov	r2, #230	; 0xe6
   1186c:	add	r1, pc, r1
   11870:	add	r0, pc, r0
   11874:	bl	10e90 <__assert_fail@plt>
   11878:	ldr	r3, [pc, #1112]	; 11cd8 <_start@@Base+0x5e0>
   1187c:	mov	r1, r0
   11880:	add	r3, pc, r3
   11884:	add	r2, sp, #16
   11888:	ldr	r0, [r3, #4]
   1188c:	bl	10d4c <coda_expression_eval_bool@plt>
   11890:	subs	r5, r0, #0
   11894:	bne	11c98 <_start@@Base+0x5a0>
   11898:	ldr	r3, [sp, #16]
   1189c:	ldr	r0, [pc, #1080]	; 11cdc <_start@@Base+0x5e4>
   118a0:	cmp	r3, #0
   118a4:	add	r0, pc, r0
   118a8:	ldrne	r0, [pc, #1072]	; 11ce0 <_start@@Base+0x5e8>
   118ac:	addne	r0, pc, r0
   118b0:	bl	10d70 <puts@plt>
   118b4:	mov	r0, r5
   118b8:	add	sp, sp, #44	; 0x2c
   118bc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   118c0:	ldr	r3, [pc, #1052]	; 11ce4 <_start@@Base+0x5ec>
   118c4:	mov	r1, r0
   118c8:	add	r3, pc, r3
   118cc:	add	r2, sp, #8
   118d0:	ldr	r0, [r3, #4]
   118d4:	bl	10ce0 <coda_expression_eval_integer@plt>
   118d8:	subs	r5, r0, #0
   118dc:	bne	11c70 <_start@@Base+0x578>
   118e0:	add	r4, sp, #16
   118e4:	ldrd	r0, [sp, #8]
   118e8:	mov	r2, r4
   118ec:	bl	10e84 <coda_str64@plt>
   118f0:	mov	r0, r4
   118f4:	b	118b0 <_start@@Base+0x1b8>
   118f8:	ldr	r3, [pc, #1000]	; 11ce8 <_start@@Base+0x5f0>
   118fc:	mov	r1, r0
   11900:	add	r3, pc, r3
   11904:	add	r2, sp, #16
   11908:	ldr	r0, [r3, #4]
   1190c:	bl	10e24 <coda_expression_eval_float@plt>
   11910:	subs	r5, r0, #0
   11914:	bne	11c48 <_start@@Base+0x550>
   11918:	ldr	r0, [pc, #972]	; 11cec <_start@@Base+0x5f4>
   1191c:	ldrd	r2, [sp, #16]
   11920:	add	r0, pc, r0
   11924:	bl	10cf8 <printf@plt>
   11928:	mov	r0, r5
   1192c:	add	sp, sp, #44	; 0x2c
   11930:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11934:	ldr	r3, [pc, #948]	; 11cf0 <_start@@Base+0x5f8>
   11938:	mov	r1, r0
   1193c:	add	r3, pc, r3
   11940:	mov	ip, #0
   11944:	ldr	r0, [r3, #4]
   11948:	add	r2, sp, #8
   1194c:	add	r3, sp, #16
   11950:	str	ip, [sp, #8]
   11954:	bl	10de8 <coda_expression_eval_string@plt>
   11958:	subs	r5, r0, #0
   1195c:	bne	11c20 <_start@@Base+0x528>
   11960:	ldr	fp, [sp, #8]
   11964:	ldr	r0, [sp, #16]
   11968:	cmp	fp, #0
   1196c:	cmpne	r0, #0
   11970:	beq	11b30 <_start@@Base+0x438>
   11974:	cmp	r0, #0
   11978:	blt	11c0c <_start@@Base+0x514>
   1197c:	ldr	sl, [pc, #880]	; 11cf4 <_start@@Base+0x5fc>
   11980:	ldr	r9, [pc, #880]	; 11cf8 <_start@@Base+0x600>
   11984:	ldr	r8, [pc, #880]	; 11cfc <_start@@Base+0x604>
   11988:	ldr	r7, [pc, #880]	; 11d00 <_start@@Base+0x608>
   1198c:	ldr	r6, [pc, #880]	; 11d04 <_start@@Base+0x60c>
   11990:	ldr	r3, [pc, #880]	; 11d08 <_start@@Base+0x610>
   11994:	add	sl, pc, sl
   11998:	add	r9, pc, r9
   1199c:	add	r8, pc, r8
   119a0:	add	r7, pc, r7
   119a4:	add	r6, pc, r6
   119a8:	add	r4, fp, r0
   119ac:	add	r3, pc, r3
   119b0:	str	r3, [sp, #4]
   119b4:	ldrb	r1, [fp], #1
   119b8:	sub	r2, r1, #7
   119bc:	cmp	r2, #85	; 0x55
   119c0:	addls	pc, pc, r2, lsl #2
   119c4:	b	11bd4 <_start@@Base+0x4dc>
   119c8:	b	11bc4 <_start@@Base+0x4cc>
   119cc:	b	11bb4 <_start@@Base+0x4bc>
   119d0:	b	11ba8 <_start@@Base+0x4b0>
   119d4:	b	11b98 <_start@@Base+0x4a0>
   119d8:	b	11b8c <_start@@Base+0x494>
   119dc:	b	11b7c <_start@@Base+0x484>
   119e0:	b	11b70 <_start@@Base+0x478>
   119e4:	b	11bd4 <_start@@Base+0x4dc>
   119e8:	b	11bd4 <_start@@Base+0x4dc>
   119ec:	b	11bd4 <_start@@Base+0x4dc>
   119f0:	b	11bd4 <_start@@Base+0x4dc>
   119f4:	b	11bd4 <_start@@Base+0x4dc>
   119f8:	b	11bd4 <_start@@Base+0x4dc>
   119fc:	b	11bd4 <_start@@Base+0x4dc>
   11a00:	b	11bd4 <_start@@Base+0x4dc>
   11a04:	b	11bd4 <_start@@Base+0x4dc>
   11a08:	b	11bd4 <_start@@Base+0x4dc>
   11a0c:	b	11bd4 <_start@@Base+0x4dc>
   11a10:	b	11bd4 <_start@@Base+0x4dc>
   11a14:	b	11bd4 <_start@@Base+0x4dc>
   11a18:	b	11b60 <_start@@Base+0x468>
   11a1c:	b	11bd4 <_start@@Base+0x4dc>
   11a20:	b	11bd4 <_start@@Base+0x4dc>
   11a24:	b	11bd4 <_start@@Base+0x4dc>
   11a28:	b	11bd4 <_start@@Base+0x4dc>
   11a2c:	b	11bd4 <_start@@Base+0x4dc>
   11a30:	b	11bd4 <_start@@Base+0x4dc>
   11a34:	b	11b54 <_start@@Base+0x45c>
   11a38:	b	11bd4 <_start@@Base+0x4dc>
   11a3c:	b	11bd4 <_start@@Base+0x4dc>
   11a40:	b	11bd4 <_start@@Base+0x4dc>
   11a44:	b	11bd4 <_start@@Base+0x4dc>
   11a48:	b	11bd4 <_start@@Base+0x4dc>
   11a4c:	b	11bd4 <_start@@Base+0x4dc>
   11a50:	b	11bd4 <_start@@Base+0x4dc>
   11a54:	b	11bd4 <_start@@Base+0x4dc>
   11a58:	b	11bd4 <_start@@Base+0x4dc>
   11a5c:	b	11bd4 <_start@@Base+0x4dc>
   11a60:	b	11bd4 <_start@@Base+0x4dc>
   11a64:	b	11bd4 <_start@@Base+0x4dc>
   11a68:	b	11bd4 <_start@@Base+0x4dc>
   11a6c:	b	11bd4 <_start@@Base+0x4dc>
   11a70:	b	11bd4 <_start@@Base+0x4dc>
   11a74:	b	11bd4 <_start@@Base+0x4dc>
   11a78:	b	11bd4 <_start@@Base+0x4dc>
   11a7c:	b	11bd4 <_start@@Base+0x4dc>
   11a80:	b	11bd4 <_start@@Base+0x4dc>
   11a84:	b	11bd4 <_start@@Base+0x4dc>
   11a88:	b	11bd4 <_start@@Base+0x4dc>
   11a8c:	b	11bd4 <_start@@Base+0x4dc>
   11a90:	b	11bd4 <_start@@Base+0x4dc>
   11a94:	b	11bd4 <_start@@Base+0x4dc>
   11a98:	b	11bd4 <_start@@Base+0x4dc>
   11a9c:	b	11bd4 <_start@@Base+0x4dc>
   11aa0:	b	11bd4 <_start@@Base+0x4dc>
   11aa4:	b	11bd4 <_start@@Base+0x4dc>
   11aa8:	b	11bd4 <_start@@Base+0x4dc>
   11aac:	b	11bd4 <_start@@Base+0x4dc>
   11ab0:	b	11bd4 <_start@@Base+0x4dc>
   11ab4:	b	11bd4 <_start@@Base+0x4dc>
   11ab8:	b	11bd4 <_start@@Base+0x4dc>
   11abc:	b	11bd4 <_start@@Base+0x4dc>
   11ac0:	b	11bd4 <_start@@Base+0x4dc>
   11ac4:	b	11bd4 <_start@@Base+0x4dc>
   11ac8:	b	11bd4 <_start@@Base+0x4dc>
   11acc:	b	11bd4 <_start@@Base+0x4dc>
   11ad0:	b	11bd4 <_start@@Base+0x4dc>
   11ad4:	b	11bd4 <_start@@Base+0x4dc>
   11ad8:	b	11bd4 <_start@@Base+0x4dc>
   11adc:	b	11bd4 <_start@@Base+0x4dc>
   11ae0:	b	11bd4 <_start@@Base+0x4dc>
   11ae4:	b	11bd4 <_start@@Base+0x4dc>
   11ae8:	b	11bd4 <_start@@Base+0x4dc>
   11aec:	b	11bd4 <_start@@Base+0x4dc>
   11af0:	b	11bd4 <_start@@Base+0x4dc>
   11af4:	b	11bd4 <_start@@Base+0x4dc>
   11af8:	b	11bd4 <_start@@Base+0x4dc>
   11afc:	b	11bd4 <_start@@Base+0x4dc>
   11b00:	b	11bd4 <_start@@Base+0x4dc>
   11b04:	b	11bd4 <_start@@Base+0x4dc>
   11b08:	b	11bd4 <_start@@Base+0x4dc>
   11b0c:	b	11bd4 <_start@@Base+0x4dc>
   11b10:	b	11bd4 <_start@@Base+0x4dc>
   11b14:	b	11bd4 <_start@@Base+0x4dc>
   11b18:	b	11bd4 <_start@@Base+0x4dc>
   11b1c:	b	11b20 <_start@@Base+0x428>
   11b20:	mov	r0, r9
   11b24:	bl	10cf8 <printf@plt>
   11b28:	cmp	r4, fp
   11b2c:	bne	119b4 <_start@@Base+0x2bc>
   11b30:	mov	r0, #10
   11b34:	bl	10df4 <putchar@plt>
   11b38:	ldr	r0, [sp, #8]
   11b3c:	cmp	r0, #0
   11b40:	beq	118b4 <_start@@Base+0x1bc>
   11b44:	bl	10d1c <free@plt>
   11b48:	mov	r0, r5
   11b4c:	add	sp, sp, #44	; 0x2c
   11b50:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11b54:	mov	r0, sl
   11b58:	bl	10cf8 <printf@plt>
   11b5c:	b	11b28 <_start@@Base+0x430>
   11b60:	ldr	r0, [pc, #420]	; 11d0c <_start@@Base+0x614>
   11b64:	add	r0, pc, r0
   11b68:	bl	10cf8 <printf@plt>
   11b6c:	b	11b28 <_start@@Base+0x430>
   11b70:	mov	r0, r6
   11b74:	bl	10cf8 <printf@plt>
   11b78:	b	11b28 <_start@@Base+0x430>
   11b7c:	ldr	r0, [pc, #396]	; 11d10 <_start@@Base+0x618>
   11b80:	add	r0, pc, r0
   11b84:	bl	10cf8 <printf@plt>
   11b88:	b	11b28 <_start@@Base+0x430>
   11b8c:	mov	r0, r8
   11b90:	bl	10cf8 <printf@plt>
   11b94:	b	11b28 <_start@@Base+0x430>
   11b98:	ldr	r0, [pc, #372]	; 11d14 <_start@@Base+0x61c>
   11b9c:	add	r0, pc, r0
   11ba0:	bl	10cf8 <printf@plt>
   11ba4:	b	11b28 <_start@@Base+0x430>
   11ba8:	mov	r0, r7
   11bac:	bl	10cf8 <printf@plt>
   11bb0:	b	11b28 <_start@@Base+0x430>
   11bb4:	ldr	r0, [pc, #348]	; 11d18 <_start@@Base+0x620>
   11bb8:	add	r0, pc, r0
   11bbc:	bl	10cf8 <printf@plt>
   11bc0:	b	11b28 <_start@@Base+0x430>
   11bc4:	ldr	r0, [pc, #336]	; 11d1c <_start@@Base+0x624>
   11bc8:	add	r0, pc, r0
   11bcc:	bl	10cf8 <printf@plt>
   11bd0:	b	11b28 <_start@@Base+0x430>
   11bd4:	str	r1, [sp]
   11bd8:	bl	10da0 <__ctype_b_loc@plt>
   11bdc:	ldr	r1, [sp]
   11be0:	lsl	r2, r1, #1
   11be4:	ldr	r0, [r0]
   11be8:	ldrh	r2, [r0, r2]
   11bec:	tst	r2, #16384	; 0x4000
   11bf0:	bne	11c00 <_start@@Base+0x508>
   11bf4:	ldr	r0, [sp, #4]
   11bf8:	bl	10cf8 <printf@plt>
   11bfc:	b	11b28 <_start@@Base+0x430>
   11c00:	mov	r0, r1
   11c04:	bl	10df4 <putchar@plt>
   11c08:	b	11b28 <_start@@Base+0x430>
   11c0c:	mov	r0, fp
   11c10:	bl	10db8 <strlen@plt>
   11c14:	cmp	r0, #0
   11c18:	bgt	1197c <_start@@Base+0x284>
   11c1c:	b	11b30 <_start@@Base+0x438>
   11c20:	bl	10e6c <coda_get_errno@plt>
   11c24:	mvn	r5, #0
   11c28:	ldr	r0, [r0]
   11c2c:	bl	10e3c <coda_errno_to_string@plt>
   11c30:	ldr	r1, [pc, #232]	; 11d20 <_start@@Base+0x628>
   11c34:	add	r1, pc, r1
   11c38:	mov	r2, r0
   11c3c:	mvn	r0, #400	; 0x190
   11c40:	bl	10d04 <coda_set_error@plt>
   11c44:	b	118b4 <_start@@Base+0x1bc>
   11c48:	bl	10e6c <coda_get_errno@plt>
   11c4c:	mvn	r5, #0
   11c50:	ldr	r0, [r0]
   11c54:	bl	10e3c <coda_errno_to_string@plt>
   11c58:	ldr	r1, [pc, #196]	; 11d24 <_start@@Base+0x62c>
   11c5c:	add	r1, pc, r1
   11c60:	mov	r2, r0
   11c64:	mvn	r0, #400	; 0x190
   11c68:	bl	10d04 <coda_set_error@plt>
   11c6c:	b	118b4 <_start@@Base+0x1bc>
   11c70:	bl	10e6c <coda_get_errno@plt>
   11c74:	mvn	r5, #0
   11c78:	ldr	r0, [r0]
   11c7c:	bl	10e3c <coda_errno_to_string@plt>
   11c80:	ldr	r1, [pc, #160]	; 11d28 <_start@@Base+0x630>
   11c84:	add	r1, pc, r1
   11c88:	mov	r2, r0
   11c8c:	mvn	r0, #400	; 0x190
   11c90:	bl	10d04 <coda_set_error@plt>
   11c94:	b	118b4 <_start@@Base+0x1bc>
   11c98:	bl	10e6c <coda_get_errno@plt>
   11c9c:	mvn	r5, #0
   11ca0:	ldr	r0, [r0]
   11ca4:	bl	10e3c <coda_errno_to_string@plt>
   11ca8:	ldr	r1, [pc, #124]	; 11d2c <_start@@Base+0x634>
   11cac:	add	r1, pc, r1
   11cb0:	mov	r2, r0
   11cb4:	mvn	r0, #400	; 0x190
   11cb8:	bl	10d04 <coda_set_error@plt>
   11cbc:	b	118b4 <_start@@Base+0x1bc>
   11cc0:	mov	r5, #0
   11cc4:	b	118b4 <_start@@Base+0x1bc>
   11cc8:	andeq	r1, r1, ip, lsl #17
   11ccc:	andeq	r0, r0, r4, lsr #14
   11cd0:	strdeq	r0, [r0], -ip
   11cd4:	andeq	r0, r0, r4, asr pc
   11cd8:	andeq	r1, r1, r4, lsr r8
   11cdc:	ldrdeq	r0, [r0], -ip
   11ce0:	andeq	r0, r0, ip, asr #27
   11ce4:	andeq	r1, r1, ip, ror #15
   11ce8:			; <UNDEFINED> instruction: 0x000117b4
   11cec:	andeq	r0, r0, r8, ror #27
   11cf0:	andeq	r1, r1, r8, ror r7
   11cf4:	andeq	r0, r0, r8, asr #27
   11cf8:	andeq	r0, r0, r0, asr #27
   11cfc:			; <UNDEFINED> instruction: 0x00000db8
   11d00:			; <UNDEFINED> instruction: 0x00000db0
   11d04:	andeq	r0, r0, r8, lsr #27
   11d08:			; <UNDEFINED> instruction: 0x00000db4
   11d0c:	ldrdeq	r0, [r0], -r4
   11d10:	andeq	r0, r0, r4, asr #23
   11d14:	andeq	r0, r0, ip, lsr #23
   11d18:	andeq	r0, r0, r8, lsl #23
   11d1c:	andeq	r0, r0, r4, ror fp
   11d20:	ldrdeq	r0, [r0], -ip
   11d24:	andeq	r0, r0, ip, ror sl
   11d28:	andeq	r0, r0, ip, lsr #20
   11d2c:	ldrdeq	r0, [r0], -ip
   11d30:	push	{r4, r5, r6, r7, lr}
   11d34:	sub	sp, sp, #532	; 0x214
   11d38:	add	r1, sp, #528	; 0x210
   11d3c:	mov	r3, #0
   11d40:	str	r3, [r1, #-524]!	; 0xfffffdf4
   11d44:	mov	r7, r0
   11d48:	bl	10d10 <coda_open@plt>
   11d4c:	ldr	r5, [pc, #252]	; 11e50 <_start@@Base+0x758>
   11d50:	add	r5, pc, r5
   11d54:	cmp	r0, #0
   11d58:	movne	r4, #1
   11d5c:	beq	11d6c <_start@@Base+0x674>
   11d60:	mov	r0, r4
   11d64:	add	sp, sp, #532	; 0x214
   11d68:	pop	{r4, r5, r6, r7, pc}
   11d6c:	add	r6, sp, #8
   11d70:	mov	r0, r6
   11d74:	ldr	r1, [sp, #4]
   11d78:	bl	10d58 <coda_cursor_set_product@plt>
   11d7c:	subs	r4, r0, #0
   11d80:	bne	11e08 <_start@@Base+0x710>
   11d84:	ldr	r3, [pc, #200]	; 11e54 <_start@@Base+0x75c>
   11d88:	add	r3, pc, r3
   11d8c:	ldr	r0, [r3, #8]
   11d90:	cmp	r0, #0
   11d94:	beq	11da8 <_start@@Base+0x6b0>
   11d98:	mov	r1, r6
   11d9c:	bl	10e30 <coda_expression_eval_node@plt>
   11da0:	cmp	r0, #0
   11da4:	bne	11e18 <_start@@Base+0x720>
   11da8:	mov	r0, r6
   11dac:	bl	11820 <_start@@Base+0x128>
   11db0:	cmp	r0, #0
   11db4:	bne	11dd4 <_start@@Base+0x6dc>
   11db8:	ldr	r0, [sp, #4]
   11dbc:	bl	10e0c <coda_close@plt>
   11dc0:	adds	r4, r0, #0
   11dc4:	movne	r4, #1
   11dc8:	mov	r0, r4
   11dcc:	add	sp, sp, #532	; 0x214
   11dd0:	pop	{r4, r5, r6, r7, pc}
   11dd4:	ldr	r3, [pc, #124]	; 11e58 <_start@@Base+0x760>
   11dd8:	ldr	r3, [r5, r3]
   11ddc:	ldr	r4, [r3]
   11de0:	bl	10e6c <coda_get_errno@plt>
   11de4:	ldr	r0, [r0]
   11de8:	bl	10e3c <coda_errno_to_string@plt>
   11dec:	ldr	r1, [pc, #104]	; 11e5c <_start@@Base+0x764>
   11df0:	mov	r3, r7
   11df4:	add	r1, pc, r1
   11df8:	mov	r2, r0
   11dfc:	mov	r0, r4
   11e00:	bl	10dc4 <fprintf@plt>
   11e04:	b	11db8 <_start@@Base+0x6c0>
   11e08:	ldr	r0, [sp, #4]
   11e0c:	bl	10e0c <coda_close@plt>
   11e10:	mov	r4, #1
   11e14:	b	11d60 <_start@@Base+0x668>
   11e18:	ldr	r3, [pc, #56]	; 11e58 <_start@@Base+0x760>
   11e1c:	ldr	r3, [r5, r3]
   11e20:	ldr	r5, [r3]
   11e24:	bl	10e6c <coda_get_errno@plt>
   11e28:	ldr	r0, [r0]
   11e2c:	bl	10e3c <coda_errno_to_string@plt>
   11e30:	ldr	r1, [pc, #40]	; 11e60 <_start@@Base+0x768>
   11e34:	add	r1, pc, r1
   11e38:	mov	r2, r0
   11e3c:	mov	r0, r5
   11e40:	bl	10dc4 <fprintf@plt>
   11e44:	ldr	r0, [sp, #4]
   11e48:	bl	10e0c <coda_close@plt>
   11e4c:	b	11d60 <_start@@Base+0x668>
   11e50:	andeq	r1, r1, r8, lsr #5
   11e54:	andeq	r1, r1, ip, lsr #6
   11e58:	andeq	r0, r0, r4, lsr #1
   11e5c:	andeq	r0, r0, r4, lsl #20
   11e60:	muleq	r0, r4, r9

00011e64 <callback@@Base>:
   11e64:	ldr	ip, [pc, #160]	; 11f0c <callback@@Base+0xa8>
   11e68:	push	{r4, lr}
   11e6c:	subs	r4, r1, #0
   11e70:	add	ip, pc, ip
   11e74:	mov	r1, r0
   11e78:	beq	11e9c <callback@@Base+0x38>
   11e7c:	cmp	r4, #2
   11e80:	beq	11ec8 <callback@@Base+0x64>
   11e84:	cmp	r4, #1
   11e88:	beq	11ee8 <callback@@Base+0x84>
   11e8c:	cmp	r4, #4
   11e90:	beq	11ec0 <callback@@Base+0x5c>
   11e94:	mov	r0, #0
   11e98:	pop	{r4, pc}
   11e9c:	ldr	r0, [pc, #108]	; 11f10 <callback@@Base+0xac>
   11ea0:	mov	r3, r1
   11ea4:	ldr	r1, [pc, #104]	; 11f14 <callback@@Base+0xb0>
   11ea8:	ldr	r0, [ip, r0]
   11eac:	add	r1, pc, r1
   11eb0:	ldr	r0, [r0]
   11eb4:	bl	10dc4 <fprintf@plt>
   11eb8:	mov	r0, r4
   11ebc:	pop	{r4, pc}
   11ec0:	pop	{r4, lr}
   11ec4:	b	11d30 <_start@@Base+0x638>
   11ec8:	ldr	r3, [pc, #64]	; 11f10 <callback@@Base+0xac>
   11ecc:	ldr	r1, [pc, #68]	; 11f18 <callback@@Base+0xb4>
   11ed0:	mov	r2, r0
   11ed4:	ldr	r3, [ip, r3]
   11ed8:	add	r1, pc, r1
   11edc:	ldr	r0, [r3]
   11ee0:	bl	10dc4 <fprintf@plt>
   11ee4:	b	11e94 <callback@@Base+0x30>
   11ee8:	ldr	r0, [pc, #32]	; 11f10 <callback@@Base+0xac>
   11eec:	mov	r3, r2
   11ef0:	mov	r2, r1
   11ef4:	ldr	r0, [ip, r0]
   11ef8:	ldr	r1, [pc, #28]	; 11f1c <callback@@Base+0xb8>
   11efc:	ldr	r0, [r0]
   11f00:	add	r1, pc, r1
   11f04:	bl	10dc4 <fprintf@plt>
   11f08:	b	11e94 <callback@@Base+0x30>
   11f0c:	andeq	r1, r1, r8, lsl #3
   11f10:	andeq	r0, r0, r4, lsr #1
   11f14:	andeq	r0, r0, ip, asr #18
   11f18:	andeq	r0, r0, r4, lsr r9
   11f1c:	andeq	r0, r0, r4, lsr r9

00011f20 <__libc_csu_init@@Base>:
   11f20:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   11f24:	mov	r7, r0
   11f28:	ldr	r6, [pc, #72]	; 11f78 <__libc_csu_init@@Base+0x58>
   11f2c:	ldr	r5, [pc, #72]	; 11f7c <__libc_csu_init@@Base+0x5c>
   11f30:	add	r6, pc, r6
   11f34:	add	r5, pc, r5
   11f38:	sub	r6, r6, r5
   11f3c:	mov	r8, r1
   11f40:	mov	r9, r2
   11f44:	bl	10cb4 <coda_match_filefilter@plt-0x20>
   11f48:	asrs	r6, r6, #2
   11f4c:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   11f50:	mov	r4, #0
   11f54:	add	r4, r4, #1
   11f58:	ldr	r3, [r5], #4
   11f5c:	mov	r2, r9
   11f60:	mov	r1, r8
   11f64:	mov	r0, r7
   11f68:	blx	r3
   11f6c:	cmp	r6, r4
   11f70:	bne	11f54 <__libc_csu_init@@Base+0x34>
   11f74:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   11f78:	andeq	r0, r1, r0, asr #31
   11f7c:			; <UNDEFINED> instruction: 0x00010fb8

00011f80 <__libc_csu_fini@@Base>:
   11f80:	bx	lr

Disassembly of section .fini:

00011f84 <.fini>:
   11f84:	push	{r3, lr}
   11f88:	pop	{r3, pc}
