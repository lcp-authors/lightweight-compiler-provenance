
../repos/coreutils/src/wc:     file format elf32-littlearm


Disassembly of section .init:

00011044 <.init>:
   11044:	push	{r3, lr}
   11048:	bl	11eb0 <__assert_fail@plt+0xb28>
   1104c:	pop	{r3, pc}

Disassembly of section .plt:

00011050 <calloc@plt-0x14>:
   11050:	push	{lr}		; (str lr, [sp, #-4]!)
   11054:	ldr	lr, [pc, #4]	; 11060 <calloc@plt-0x4>
   11058:	add	lr, pc, lr
   1105c:	ldr	pc, [lr, #8]!
   11060:	andeq	r7, r1, r0, lsr #31

00011064 <calloc@plt>:
   11064:	add	ip, pc, #0, 12
   11068:	add	ip, ip, #94208	; 0x17000
   1106c:	ldr	pc, [ip, #4000]!	; 0xfa0

00011070 <fputs_unlocked@plt>:
   11070:	add	ip, pc, #0, 12
   11074:	add	ip, ip, #94208	; 0x17000
   11078:	ldr	pc, [ip, #3992]!	; 0xf98

0001107c <raise@plt>:
   1107c:	add	ip, pc, #0, 12
   11080:	add	ip, ip, #94208	; 0x17000
   11084:	ldr	pc, [ip, #3984]!	; 0xf90

00011088 <strcmp@plt>:
   11088:	add	ip, pc, #0, 12
   1108c:	add	ip, ip, #94208	; 0x17000
   11090:	ldr	pc, [ip, #3976]!	; 0xf88

00011094 <posix_fadvise64@plt>:
   11094:	add	ip, pc, #0, 12
   11098:	add	ip, ip, #94208	; 0x17000
   1109c:	ldr	pc, [ip, #3968]!	; 0xf80

000110a0 <read@plt>:
   110a0:	add	ip, pc, #0, 12
   110a4:	add	ip, ip, #94208	; 0x17000
   110a8:	ldr	pc, [ip, #3960]!	; 0xf78

000110ac <fflush@plt>:
   110ac:	add	ip, pc, #0, 12
   110b0:	add	ip, ip, #94208	; 0x17000
   110b4:	ldr	pc, [ip, #3952]!	; 0xf70

000110b8 <wcwidth@plt>:
   110b8:	add	ip, pc, #0, 12
   110bc:	add	ip, ip, #94208	; 0x17000
   110c0:	ldr	pc, [ip, #3944]!	; 0xf68

000110c4 <__memmove_chk@plt>:
   110c4:	add	ip, pc, #0, 12
   110c8:	add	ip, ip, #94208	; 0x17000
   110cc:	ldr	pc, [ip, #3936]!	; 0xf60

000110d0 <free@plt>:
   110d0:	add	ip, pc, #0, 12
   110d4:	add	ip, ip, #94208	; 0x17000
   110d8:	ldr	pc, [ip, #3928]!	; 0xf58

000110dc <ferror@plt>:
   110dc:	add	ip, pc, #0, 12
   110e0:	add	ip, ip, #94208	; 0x17000
   110e4:	ldr	pc, [ip, #3920]!	; 0xf50

000110e8 <_exit@plt>:
   110e8:	add	ip, pc, #0, 12
   110ec:	add	ip, ip, #94208	; 0x17000
   110f0:	ldr	pc, [ip, #3912]!	; 0xf48

000110f4 <memcpy@plt>:
   110f4:	add	ip, pc, #0, 12
   110f8:	add	ip, ip, #94208	; 0x17000
   110fc:	ldr	pc, [ip, #3904]!	; 0xf40

00011100 <mbsinit@plt>:
   11100:	add	ip, pc, #0, 12
   11104:	add	ip, ip, #94208	; 0x17000
   11108:	ldr	pc, [ip, #3896]!	; 0xf38

0001110c <memcmp@plt>:
   1110c:	add	ip, pc, #0, 12
   11110:	add	ip, ip, #94208	; 0x17000
   11114:	ldr	pc, [ip, #3888]!	; 0xf30

00011118 <fputc_unlocked@plt>:
   11118:	add	ip, pc, #0, 12
   1111c:	add	ip, ip, #94208	; 0x17000
   11120:	ldr	pc, [ip, #3880]!	; 0xf28

00011124 <dcgettext@plt>:
   11124:	add	ip, pc, #0, 12
   11128:	add	ip, ip, #94208	; 0x17000
   1112c:	ldr	pc, [ip, #3872]!	; 0xf20

00011130 <sysconf@plt>:
   11130:	add	ip, pc, #0, 12
   11134:	add	ip, ip, #94208	; 0x17000
   11138:	ldr	pc, [ip, #3864]!	; 0xf18

0001113c <realloc@plt>:
   1113c:	add	ip, pc, #0, 12
   11140:	add	ip, ip, #94208	; 0x17000
   11144:	ldr	pc, [ip, #3856]!	; 0xf10

00011148 <textdomain@plt>:
   11148:	add	ip, pc, #0, 12
   1114c:	add	ip, ip, #94208	; 0x17000
   11150:	ldr	pc, [ip, #3848]!	; 0xf08

00011154 <iswcntrl@plt>:
   11154:	add	ip, pc, #0, 12
   11158:	add	ip, ip, #94208	; 0x17000
   1115c:	ldr	pc, [ip, #3840]!	; 0xf00

00011160 <rawmemchr@plt>:
   11160:	add	ip, pc, #0, 12
   11164:	add	ip, ip, #94208	; 0x17000
   11168:	ldr	pc, [ip, #3832]!	; 0xef8

0001116c <iswprint@plt>:
   1116c:	add	ip, pc, #0, 12
   11170:	add	ip, ip, #94208	; 0x17000
   11174:	ldr	pc, [ip, #3824]!	; 0xef0

00011178 <__fxstat64@plt>:
   11178:	add	ip, pc, #0, 12
   1117c:	add	ip, ip, #94208	; 0x17000
   11180:	ldr	pc, [ip, #3816]!	; 0xee8

00011184 <fwrite@plt>:
   11184:	add	ip, pc, #0, 12
   11188:	add	ip, ip, #94208	; 0x17000
   1118c:	ldr	pc, [ip, #3808]!	; 0xee0

00011190 <lseek64@plt>:
   11190:	add	ip, pc, #0, 12
   11194:	add	ip, ip, #94208	; 0x17000
   11198:	ldr	pc, [ip, #3800]!	; 0xed8

0001119c <__ctype_get_mb_cur_max@plt>:
   1119c:	add	ip, pc, #0, 12
   111a0:	add	ip, ip, #94208	; 0x17000
   111a4:	ldr	pc, [ip, #3792]!	; 0xed0

000111a8 <__fpending@plt>:
   111a8:	add	ip, pc, #0, 12
   111ac:	add	ip, ip, #94208	; 0x17000
   111b0:	ldr	pc, [ip, #3784]!	; 0xec8

000111b4 <mbrtowc@plt>:
   111b4:	add	ip, pc, #0, 12
   111b8:	add	ip, ip, #94208	; 0x17000
   111bc:	ldr	pc, [ip, #3776]!	; 0xec0

000111c0 <error@plt>:
   111c0:	add	ip, pc, #0, 12
   111c4:	add	ip, ip, #94208	; 0x17000
   111c8:	ldr	pc, [ip, #3768]!	; 0xeb8

000111cc <open64@plt>:
   111cc:	add	ip, pc, #0, 12
   111d0:	add	ip, ip, #94208	; 0x17000
   111d4:	ldr	pc, [ip, #3760]!	; 0xeb0

000111d8 <getenv@plt>:
   111d8:	add	ip, pc, #0, 12
   111dc:	add	ip, ip, #94208	; 0x17000
   111e0:	ldr	pc, [ip, #3752]!	; 0xea8

000111e4 <sysinfo@plt>:
   111e4:	add	ip, pc, #0, 12
   111e8:	add	ip, ip, #94208	; 0x17000
   111ec:	ldr	pc, [ip, #3744]!	; 0xea0

000111f0 <malloc@plt>:
   111f0:	add	ip, pc, #0, 12
   111f4:	add	ip, ip, #94208	; 0x17000
   111f8:	ldr	pc, [ip, #3736]!	; 0xe98

000111fc <__libc_start_main@plt>:
   111fc:	add	ip, pc, #0, 12
   11200:	add	ip, ip, #94208	; 0x17000
   11204:	ldr	pc, [ip, #3728]!	; 0xe90

00011208 <__freading@plt>:
   11208:	add	ip, pc, #0, 12
   1120c:	add	ip, ip, #94208	; 0x17000
   11210:	ldr	pc, [ip, #3720]!	; 0xe88

00011214 <__gmon_start__@plt>:
   11214:	add	ip, pc, #0, 12
   11218:	add	ip, ip, #94208	; 0x17000
   1121c:	ldr	pc, [ip, #3712]!	; 0xe80

00011220 <getopt_long@plt>:
   11220:	add	ip, pc, #0, 12
   11224:	add	ip, ip, #94208	; 0x17000
   11228:	ldr	pc, [ip, #3704]!	; 0xe78

0001122c <__ctype_b_loc@plt>:
   1122c:	add	ip, pc, #0, 12
   11230:	add	ip, ip, #94208	; 0x17000
   11234:	ldr	pc, [ip, #3696]!	; 0xe70

00011238 <exit@plt>:
   11238:	add	ip, pc, #0, 12
   1123c:	add	ip, ip, #94208	; 0x17000
   11240:	ldr	pc, [ip, #3688]!	; 0xe68

00011244 <feof@plt>:
   11244:	add	ip, pc, #0, 12
   11248:	add	ip, ip, #94208	; 0x17000
   1124c:	ldr	pc, [ip, #3680]!	; 0xe60

00011250 <iswspace@plt>:
   11250:	add	ip, pc, #0, 12
   11254:	add	ip, ip, #94208	; 0x17000
   11258:	ldr	pc, [ip, #3672]!	; 0xe58

0001125c <strlen@plt>:
   1125c:	add	ip, pc, #0, 12
   11260:	add	ip, ip, #94208	; 0x17000
   11264:	ldr	pc, [ip, #3664]!	; 0xe50

00011268 <strchr@plt>:
   11268:	add	ip, pc, #0, 12
   1126c:	add	ip, ip, #94208	; 0x17000
   11270:	ldr	pc, [ip, #3656]!	; 0xe48

00011274 <getpagesize@plt>:
   11274:	add	ip, pc, #0, 12
   11278:	add	ip, ip, #94208	; 0x17000
   1127c:	ldr	pc, [ip, #3648]!	; 0xe40

00011280 <__errno_location@plt>:
   11280:	add	ip, pc, #0, 12
   11284:	add	ip, ip, #94208	; 0x17000
   11288:	ldr	pc, [ip, #3640]!	; 0xe38

0001128c <__cxa_atexit@plt>:
   1128c:	add	ip, pc, #0, 12
   11290:	add	ip, ip, #94208	; 0x17000
   11294:	ldr	pc, [ip, #3632]!	; 0xe30

00011298 <setvbuf@plt>:
   11298:	add	ip, pc, #0, 12
   1129c:	add	ip, ip, #94208	; 0x17000
   112a0:	ldr	pc, [ip, #3624]!	; 0xe28

000112a4 <memset@plt>:
   112a4:	add	ip, pc, #0, 12
   112a8:	add	ip, ip, #94208	; 0x17000
   112ac:	ldr	pc, [ip, #3616]!	; 0xe20

000112b0 <btowc@plt>:
   112b0:	add	ip, pc, #0, 12
   112b4:	add	ip, ip, #94208	; 0x17000
   112b8:	ldr	pc, [ip, #3608]!	; 0xe18

000112bc <fgetc@plt>:
   112bc:	add	ip, pc, #0, 12
   112c0:	add	ip, ip, #94208	; 0x17000
   112c4:	ldr	pc, [ip, #3600]!	; 0xe10

000112c8 <__printf_chk@plt>:
   112c8:	add	ip, pc, #0, 12
   112cc:	add	ip, ip, #94208	; 0x17000
   112d0:	ldr	pc, [ip, #3592]!	; 0xe08

000112d4 <fileno@plt>:
   112d4:	add	ip, pc, #0, 12
   112d8:	add	ip, ip, #94208	; 0x17000
   112dc:	ldr	pc, [ip, #3584]!	; 0xe00

000112e0 <__fprintf_chk@plt>:
   112e0:	add	ip, pc, #0, 12
   112e4:	add	ip, ip, #94208	; 0x17000
   112e8:	ldr	pc, [ip, #3576]!	; 0xdf8

000112ec <fclose@plt>:
   112ec:	add	ip, pc, #0, 12
   112f0:	add	ip, ip, #94208	; 0x17000
   112f4:	ldr	pc, [ip, #3568]!	; 0xdf0

000112f8 <fseeko64@plt>:
   112f8:	add	ip, pc, #0, 12
   112fc:	add	ip, ip, #94208	; 0x17000
   11300:	ldr	pc, [ip, #3560]!	; 0xde8

00011304 <__overflow@plt>:
   11304:	add	ip, pc, #0, 12
   11308:	add	ip, ip, #94208	; 0x17000
   1130c:	ldr	pc, [ip, #3552]!	; 0xde0

00011310 <setlocale@plt>:
   11310:	add	ip, pc, #0, 12
   11314:	add	ip, ip, #94208	; 0x17000
   11318:	ldr	pc, [ip, #3544]!	; 0xdd8

0001131c <strrchr@plt>:
   1131c:	add	ip, pc, #0, 12
   11320:	add	ip, ip, #94208	; 0x17000
   11324:	ldr	pc, [ip, #3536]!	; 0xdd0

00011328 <nl_langinfo@plt>:
   11328:	add	ip, pc, #0, 12
   1132c:	add	ip, ip, #94208	; 0x17000
   11330:	ldr	pc, [ip, #3528]!	; 0xdc8

00011334 <fopen64@plt>:
   11334:	add	ip, pc, #0, 12
   11338:	add	ip, ip, #94208	; 0x17000
   1133c:	ldr	pc, [ip, #3520]!	; 0xdc0

00011340 <bindtextdomain@plt>:
   11340:	add	ip, pc, #0, 12
   11344:	add	ip, ip, #94208	; 0x17000
   11348:	ldr	pc, [ip, #3512]!	; 0xdb8

0001134c <getdelim@plt>:
   1134c:	add	ip, pc, #0, 12
   11350:	add	ip, ip, #94208	; 0x17000
   11354:	ldr	pc, [ip, #3504]!	; 0xdb0

00011358 <__xstat64@plt>:
   11358:	add	ip, pc, #0, 12
   1135c:	add	ip, ip, #94208	; 0x17000
   11360:	ldr	pc, [ip, #3496]!	; 0xda8

00011364 <strncmp@plt>:
   11364:	add	ip, pc, #0, 12
   11368:	add	ip, ip, #94208	; 0x17000
   1136c:	ldr	pc, [ip, #3488]!	; 0xda0

00011370 <abort@plt>:
   11370:	add	ip, pc, #0, 12
   11374:	add	ip, ip, #94208	; 0x17000
   11378:	ldr	pc, [ip, #3480]!	; 0xd98

0001137c <close@plt>:
   1137c:	add	ip, pc, #0, 12
   11380:	add	ip, ip, #94208	; 0x17000
   11384:	ldr	pc, [ip, #3472]!	; 0xd90

00011388 <__assert_fail@plt>:
   11388:	add	ip, pc, #0, 12
   1138c:	add	ip, ip, #94208	; 0x17000
   11390:	ldr	pc, [ip, #3464]!	; 0xd88

Disassembly of section .text:

00011398 <_obstack_begin@@Base-0x5ba4>:
   11398:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1139c:	movw	r4, #37280	; 0x91a0
   113a0:	movt	r4, #2
   113a4:	strd	r6, [sp, #8]
   113a8:	mov	r7, r1
   113ac:	movw	r6, #32492	; 0x7eec
   113b0:	movt	r6, #1
   113b4:	strd	r8, [sp, #16]
   113b8:	mov	r8, r0
   113bc:	strd	sl, [sp, #24]
   113c0:	movw	sl, #37268	; 0x9194
   113c4:	movt	sl, #2
   113c8:	str	lr, [sp, #32]
   113cc:	movw	fp, #37272	; 0x9198
   113d0:	movt	fp, #2
   113d4:	vpush	{d8-d9}
   113d8:	sub	sp, sp, #340	; 0x154
   113dc:	ldr	r0, [r1]
   113e0:	bl	13a70 <__assert_fail@plt+0x26e8>
   113e4:	movw	r1, #32080	; 0x7d50
   113e8:	movt	r1, #1
   113ec:	ldr	r9, [pc, #2676]	; 11e68 <__assert_fail@plt+0xae0>
   113f0:	mov	r0, #6
   113f4:	bl	11310 <setlocale@plt>
   113f8:	movw	r1, #32424	; 0x7ea8
   113fc:	movt	r1, #1
   11400:	movw	r0, #32256	; 0x7e00
   11404:	movt	r0, #1
   11408:	bl	11340 <bindtextdomain@plt>
   1140c:	movw	r0, #32256	; 0x7e00
   11410:	movt	r0, #1
   11414:	bl	11148 <textdomain@plt>
   11418:	movw	r0, #13288	; 0x33e8
   1141c:	movt	r0, #1
   11420:	bl	17864 <_obstack_memory_used@@Base+0x6c8>
   11424:	bl	11274 <getpagesize@plt>
   11428:	mov	r3, #0
   1142c:	mov	r2, #1
   11430:	str	r0, [r4, #12]
   11434:	mov	r1, r3
   11438:	ldr	r0, [sl]
   1143c:	bl	11298 <setvbuf@plt>
   11440:	movw	r0, #32448	; 0x7ec0
   11444:	movt	r0, #1
   11448:	bl	111d8 <getenv@plt>
   1144c:	adds	r2, r0, #0
   11450:	mov	r3, #0
   11454:	mov	r0, #0
   11458:	mov	r1, #0
   1145c:	movne	r2, #1
   11460:	strb	r3, [r4]
   11464:	strb	r3, [r4, #8]
   11468:	strb	r3, [r4, #9]
   1146c:	strb	r3, [r4, #10]
   11470:	strb	r3, [r4, #11]
   11474:	strb	r2, [r4, #16]
   11478:	strd	r0, [r4, #24]
   1147c:	strd	r0, [r4, #32]
   11480:	str	r3, [sp, #32]
   11484:	strd	r0, [r4, #40]	; 0x28
   11488:	strd	r0, [r4, #48]	; 0x30
   1148c:	strd	r0, [r4, #56]	; 0x38
   11490:	mov	r5, #0
   11494:	mov	r3, r9
   11498:	mov	r2, r6
   1149c:	mov	r1, r7
   114a0:	mov	r0, r8
   114a4:	str	r5, [sp]
   114a8:	bl	11220 <getopt_long@plt>
   114ac:	cmn	r0, #1
   114b0:	beq	11598 <__assert_fail@plt+0x210>
   114b4:	cmp	r0, #108	; 0x6c
   114b8:	beq	11580 <__assert_fail@plt+0x1f8>
   114bc:	ble	114ec <__assert_fail@plt+0x164>
   114c0:	cmp	r0, #119	; 0x77
   114c4:	beq	1158c <__assert_fail@plt+0x204>
   114c8:	ble	1150c <__assert_fail@plt+0x184>
   114cc:	cmp	r0, #256	; 0x100
   114d0:	beq	11490 <__assert_fail@plt+0x108>
   114d4:	movw	r3, #257	; 0x101
   114d8:	cmp	r0, r3
   114dc:	bne	11e14 <__assert_fail@plt+0xa8c>
   114e0:	ldr	r3, [fp]
   114e4:	str	r3, [sp, #32]
   114e8:	b	11490 <__assert_fail@plt+0x108>
   114ec:	cmn	r0, #2
   114f0:	beq	11d98 <__assert_fail@plt+0xa10>
   114f4:	ble	11534 <__assert_fail@plt+0x1ac>
   114f8:	cmp	r0, #76	; 0x4c
   114fc:	bne	11520 <__assert_fail@plt+0x198>
   11500:	mov	r3, #1
   11504:	strb	r3, [r4, #11]
   11508:	b	11490 <__assert_fail@plt+0x108>
   1150c:	cmp	r0, #109	; 0x6d
   11510:	bne	11e14 <__assert_fail@plt+0xa8c>
   11514:	mov	r3, #1
   11518:	strb	r3, [r4, #9]
   1151c:	b	11490 <__assert_fail@plt+0x108>
   11520:	cmp	r0, #99	; 0x63
   11524:	bne	11e14 <__assert_fail@plt+0xa8c>
   11528:	mov	r3, #1
   1152c:	strb	r3, [r4, #10]
   11530:	b	11490 <__assert_fail@plt+0x108>
   11534:	cmn	r0, #3
   11538:	bne	11e14 <__assert_fail@plt+0xa8c>
   1153c:	movw	r2, #32464	; 0x7ed0
   11540:	movt	r2, #1
   11544:	str	r5, [sp, #8]
   11548:	movw	r1, #32480	; 0x7ee0
   1154c:	movt	r1, #1
   11550:	ldr	r0, [sl]
   11554:	movw	r3, #37160	; 0x9128
   11558:	movt	r3, #2
   1155c:	stm	sp, {r1, r2}
   11560:	movw	r2, #32252	; 0x7dfc
   11564:	movt	r2, #1
   11568:	movw	r1, #31108	; 0x7984
   1156c:	movt	r1, #1
   11570:	ldr	r3, [r3]
   11574:	bl	165fc <__assert_fail@plt+0x5274>
   11578:	mov	r0, r5
   1157c:	bl	11238 <exit@plt>
   11580:	mov	r3, #1
   11584:	strb	r3, [r4]
   11588:	b	11490 <__assert_fail@plt+0x108>
   1158c:	mov	r3, #1
   11590:	strb	r3, [r4, #8]
   11594:	b	11490 <__assert_fail@plt+0x108>
   11598:	ldrb	r3, [r4]
   1159c:	cmp	r3, r5
   115a0:	bne	115b0 <__assert_fail@plt+0x228>
   115a4:	ldrb	r3, [r4, #8]
   115a8:	cmp	r3, r5
   115ac:	beq	11b80 <__assert_fail@plt+0x7f8>
   115b0:	ldr	r3, [sp, #32]
   115b4:	movw	r5, #37248	; 0x9180
   115b8:	movt	r5, #2
   115bc:	cmp	r3, #0
   115c0:	ldr	r3, [r5]
   115c4:	beq	11aa4 <__assert_fail@plt+0x71c>
   115c8:	cmp	r8, r3
   115cc:	bgt	11da0 <__assert_fail@plt+0xa18>
   115d0:	movw	r1, #32572	; 0x7f3c
   115d4:	movt	r1, #1
   115d8:	ldr	r0, [sp, #32]
   115dc:	bl	11088 <strcmp@plt>
   115e0:	cmp	r0, #0
   115e4:	bne	11c98 <__assert_fail@plt+0x910>
   115e8:	movw	r3, #37264	; 0x9190
   115ec:	movt	r3, #2
   115f0:	ldr	r5, [r3]
   115f4:	add	r3, sp, #88	; 0x58
   115f8:	mov	r0, r5
   115fc:	mov	r6, r3
   11600:	str	r3, [sp, #40]	; 0x28
   11604:	bl	112d4 <fileno@plt>
   11608:	mov	r1, r0
   1160c:	mov	r2, r6
   11610:	mov	r0, #3
   11614:	bl	11178 <__fxstat64@plt>
   11618:	cmp	r0, #0
   1161c:	bne	11630 <__assert_fail@plt+0x2a8>
   11620:	ldr	r3, [sp, #104]	; 0x68
   11624:	and	r3, r3, #61440	; 0xf000
   11628:	cmp	r3, #32768	; 0x8000
   1162c:	beq	11cf4 <__assert_fail@plt+0x96c>
   11630:	mov	r0, r5
   11634:	bl	13278 <__assert_fail@plt+0x1ef0>
   11638:	subs	r9, r0, #0
   1163c:	beq	11cf0 <__assert_fail@plt+0x968>
   11640:	mov	r3, #0
   11644:	str	r3, [sp, #80]	; 0x50
   11648:	mov	r1, #112	; 0x70
   1164c:	mov	r0, #1
   11650:	bl	16874 <__assert_fail@plt+0x54ec>
   11654:	mov	r3, #1
   11658:	mov	r8, #0
   1165c:	str	r0, [sp, #52]	; 0x34
   11660:	mov	r5, r3
   11664:	str	r3, [r0]
   11668:	movw	r3, #33036	; 0x810c
   1166c:	movt	r3, #1
   11670:	str	r5, [r4, #4]
   11674:	movw	fp, #32572	; 0x7f3c
   11678:	movt	fp, #1
   1167c:	mov	r7, #0
   11680:	mov	r6, #1
   11684:	str	fp, [sp, #56]	; 0x38
   11688:	str	r4, [sp, #64]	; 0x40
   1168c:	str	r3, [sp, #72]	; 0x48
   11690:	ldr	r4, [sp, #32]
   11694:	b	1172c <__assert_fail@plt+0x3a4>
   11698:	mov	r1, sl
   1169c:	mov	r0, r5
   116a0:	bl	11088 <strcmp@plt>
   116a4:	subs	sl, r0, #0
   116a8:	beq	117c8 <__assert_fail@plt+0x440>
   116ac:	ldrb	r3, [r5]
   116b0:	cmp	r3, #0
   116b4:	beq	1180c <__assert_fail@plt+0x484>
   116b8:	cmp	r8, #0
   116bc:	ldreq	sl, [sp, #52]	; 0x34
   116c0:	bne	11778 <__assert_fail@plt+0x3f0>
   116c4:	mov	r1, #0
   116c8:	mov	r0, r5
   116cc:	bl	111cc <open64@plt>
   116d0:	cmn	r0, #1
   116d4:	beq	11a3c <__assert_fail@plt+0x6b4>
   116d8:	mov	r2, sl
   116dc:	mov	fp, #0
   116e0:	str	r0, [sp, #84]	; 0x54
   116e4:	mov	sl, #0
   116e8:	mov	r1, r5
   116ec:	strd	sl, [sp]
   116f0:	bl	1214c <__assert_fail@plt+0xdc4>
   116f4:	ldr	r3, [sp, #84]	; 0x54
   116f8:	mov	sl, r0
   116fc:	mov	r0, r3
   11700:	bl	1137c <close@plt>
   11704:	cmp	r0, #0
   11708:	bne	11a3c <__assert_fail@plt+0x6b4>
   1170c:	and	r6, r6, sl
   11710:	uxtb	r6, r6
   11714:	cmp	r8, #0
   11718:	bne	11728 <__assert_fail@plt+0x3a0>
   1171c:	ldr	r2, [sp, #52]	; 0x34
   11720:	mov	r3, #1
   11724:	str	r3, [r2]
   11728:	add	r7, r7, #1
   1172c:	mov	r0, r9
   11730:	ldr	r1, [sp, #40]	; 0x28
   11734:	bl	132b8 <__assert_fail@plt+0x1f30>
   11738:	subs	r5, r0, #0
   1173c:	beq	118a4 <__assert_fail@plt+0x51c>
   11740:	cmp	r4, #0
   11744:	beq	11868 <__assert_fail@plt+0x4e0>
   11748:	ldr	sl, [sp, #56]	; 0x38
   1174c:	mov	r0, r4
   11750:	mov	r1, sl
   11754:	bl	11088 <strcmp@plt>
   11758:	cmp	r0, #0
   1175c:	beq	11698 <__assert_fail@plt+0x310>
   11760:	ldrb	r3, [r5]
   11764:	cmp	r3, #0
   11768:	beq	1180c <__assert_fail@plt+0x484>
   1176c:	cmp	r8, #0
   11770:	moveq	sl, r8
   11774:	beq	11780 <__assert_fail@plt+0x3f8>
   11778:	mov	sl, #112	; 0x70
   1177c:	mul	sl, sl, r7
   11780:	ldr	r3, [sp, #52]	; 0x34
   11784:	mov	r0, r5
   11788:	ldr	r1, [sp, #56]	; 0x38
   1178c:	add	sl, r3, sl
   11790:	bl	11088 <strcmp@plt>
   11794:	cmp	r0, #0
   11798:	bne	116c4 <__assert_fail@plt+0x33c>
   1179c:	ldr	ip, [sp, #64]	; 0x40
   117a0:	mov	r3, #1
   117a4:	mov	r2, sl
   117a8:	mvn	fp, #0
   117ac:	mvn	sl, #0
   117b0:	mov	r1, r5
   117b4:	strd	sl, [sp]
   117b8:	strb	r3, [ip, #68]	; 0x44
   117bc:	bl	1214c <__assert_fail@plt+0xdc4>
   117c0:	mov	sl, r0
   117c4:	b	1170c <__assert_fail@plt+0x384>
   117c8:	mov	r2, #5
   117cc:	movw	r1, #32708	; 0x7fc4
   117d0:	movt	r1, #1
   117d4:	bl	11124 <dcgettext@plt>
   117d8:	mov	r6, r0
   117dc:	mov	r1, r5
   117e0:	mov	r0, #4
   117e4:	bl	15aac <__assert_fail@plt+0x4724>
   117e8:	mov	r3, r0
   117ec:	mov	r2, r6
   117f0:	mov	r1, sl
   117f4:	mov	r0, sl
   117f8:	bl	111c0 <error@plt>
   117fc:	ldrb	r3, [r5]
   11800:	cmp	r3, #0
   11804:	movne	r6, sl
   11808:	bne	11714 <__assert_fail@plt+0x38c>
   1180c:	mov	r0, r9
   11810:	mov	r6, #0
   11814:	bl	1336c <__assert_fail@plt+0x1fe4>
   11818:	mov	r5, r0
   1181c:	mov	r2, r4
   11820:	mov	r1, #3
   11824:	mov	r0, r6
   11828:	bl	15b88 <__assert_fail@plt+0x4800>
   1182c:	mov	sl, r0
   11830:	mov	r2, #5
   11834:	mov	r0, r6
   11838:	movw	r1, #32780	; 0x800c
   1183c:	movt	r1, #1
   11840:	bl	11124 <dcgettext@plt>
   11844:	mov	r1, r6
   11848:	mov	r3, sl
   1184c:	str	r5, [sp]
   11850:	movw	r2, #32812	; 0x802c
   11854:	movt	r2, #1
   11858:	str	r0, [sp, #4]
   1185c:	mov	r0, r6
   11860:	bl	111c0 <error@plt>
   11864:	b	11714 <__assert_fail@plt+0x38c>
   11868:	ldrb	r3, [r5]
   1186c:	cmp	r3, #0
   11870:	bne	1176c <__assert_fail@plt+0x3e4>
   11874:	mov	r2, #5
   11878:	mov	r0, r4
   1187c:	movw	r1, #32780	; 0x800c
   11880:	movt	r1, #1
   11884:	bl	11124 <dcgettext@plt>
   11888:	mov	r3, r0
   1188c:	mov	r1, r4
   11890:	ldr	r2, [sp, #72]	; 0x48
   11894:	mov	r0, r4
   11898:	mov	r6, r4
   1189c:	bl	111c0 <error@plt>
   118a0:	b	11714 <__assert_fail@plt+0x38c>
   118a4:	ldr	r4, [sp, #64]	; 0x40
   118a8:	ldr	r3, [sp, #88]	; 0x58
   118ac:	cmp	r3, #3
   118b0:	beq	11cf0 <__assert_fail@plt+0x968>
   118b4:	cmp	r3, #4
   118b8:	bne	119c8 <__assert_fail@plt+0x640>
   118bc:	bl	11280 <__errno_location@plt>
   118c0:	ldr	r6, [r0]
   118c4:	mov	r2, #5
   118c8:	movw	r1, #32640	; 0x7f80
   118cc:	movt	r1, #1
   118d0:	mov	r0, r5
   118d4:	bl	11124 <dcgettext@plt>
   118d8:	mov	r7, r0
   118dc:	mov	r1, #3
   118e0:	ldr	r2, [sp, #32]
   118e4:	mov	r0, r5
   118e8:	bl	15b88 <__assert_fail@plt+0x4800>
   118ec:	mov	r3, r0
   118f0:	mov	r1, r6
   118f4:	mov	r2, r7
   118f8:	mov	r0, r5
   118fc:	mov	r6, r5
   11900:	bl	111c0 <error@plt>
   11904:	ldr	r3, [sp, #80]	; 0x50
   11908:	cmp	r3, #0
   1190c:	bne	11a70 <__assert_fail@plt+0x6e8>
   11910:	mov	r0, r9
   11914:	bl	1336c <__assert_fail@plt+0x1fe4>
   11918:	cmp	r0, #1
   1191c:	bls	11984 <__assert_fail@plt+0x5fc>
   11920:	ldrd	r2, [r4, #24]
   11924:	movw	r1, #32772	; 0x8004
   11928:	movt	r1, #1
   1192c:	mov	r0, #0
   11930:	ldrd	sl, [r4, #32]
   11934:	strd	r2, [sp, #32]
   11938:	mov	r2, #5
   1193c:	strd	sl, [sp, #40]	; 0x28
   11940:	ldrd	sl, [r4, #40]	; 0x28
   11944:	strd	sl, [sp, #56]	; 0x38
   11948:	ldrd	sl, [r4, #48]	; 0x30
   1194c:	strd	sl, [sp, #64]	; 0x40
   11950:	ldrd	sl, [r4, #56]	; 0x38
   11954:	strd	sl, [sp, #72]	; 0x48
   11958:	bl	11124 <dcgettext@plt>
   1195c:	str	r0, [sp, #24]
   11960:	ldrd	sl, [sp, #56]	; 0x38
   11964:	ldrd	r0, [sp, #32]
   11968:	ldrd	r2, [sp, #40]	; 0x28
   1196c:	strd	sl, [sp]
   11970:	ldrd	sl, [sp, #64]	; 0x40
   11974:	strd	sl, [sp, #8]
   11978:	ldrd	sl, [sp, #72]	; 0x48
   1197c:	strd	sl, [sp, #16]
   11980:	bl	11f64 <__assert_fail@plt+0xbdc>
   11984:	mov	r0, r9
   11988:	bl	13394 <__assert_fail@plt+0x200c>
   1198c:	ldr	r0, [sp, #52]	; 0x34
   11990:	bl	1363c <__assert_fail@plt+0x22b4>
   11994:	ldrb	r3, [r4, #68]	; 0x44
   11998:	cmp	r3, #0
   1199c:	bne	11a7c <__assert_fail@plt+0x6f4>
   119a0:	eor	r0, r6, #1
   119a4:	uxtb	r0, r0
   119a8:	add	sp, sp, #340	; 0x154
   119ac:	vpop	{d8-d9}
   119b0:	ldrd	r4, [sp]
   119b4:	ldrd	r6, [sp, #8]
   119b8:	ldrd	r8, [sp, #16]
   119bc:	ldrd	sl, [sp, #24]
   119c0:	add	sp, sp, #32
   119c4:	pop	{pc}		; (ldr pc, [sp], #4)
   119c8:	cmp	r3, #2
   119cc:	beq	119ec <__assert_fail@plt+0x664>
   119d0:	movw	r1, #32656	; 0x7f90
   119d4:	movt	r1, #1
   119d8:	ldr	r3, [pc, #1164]	; 11e6c <__assert_fail@plt+0xae4>
   119dc:	movw	r0, #32668	; 0x7f9c
   119e0:	movt	r0, #1
   119e4:	movw	r2, #938	; 0x3aa
   119e8:	bl	11388 <__assert_fail@plt>
   119ec:	ldr	r3, [sp, #32]
   119f0:	cmp	r3, #0
   119f4:	movne	r5, #0
   119f8:	andeq	r5, r6, #1
   119fc:	cmp	r5, #0
   11a00:	beq	11904 <__assert_fail@plt+0x57c>
   11a04:	mov	r0, r9
   11a08:	bl	1336c <__assert_fail@plt+0x1fe4>
   11a0c:	subs	r1, r0, #0
   11a10:	movne	r6, r5
   11a14:	bne	11904 <__assert_fail@plt+0x57c>
   11a18:	mvn	r2, #0
   11a1c:	mvn	r3, #0
   11a20:	mov	ip, #1
   11a24:	strd	r2, [sp]
   11a28:	strb	ip, [r4, #68]	; 0x44
   11a2c:	ldr	r2, [sp, #52]	; 0x34
   11a30:	bl	1214c <__assert_fail@plt+0xdc4>
   11a34:	mov	r6, r0
   11a38:	b	11904 <__assert_fail@plt+0x57c>
   11a3c:	bl	11280 <__errno_location@plt>
   11a40:	mov	r2, r5
   11a44:	ldr	r5, [r0]
   11a48:	mov	r1, #3
   11a4c:	mov	r0, #0
   11a50:	mov	sl, r0
   11a54:	bl	15b88 <__assert_fail@plt+0x4800>
   11a58:	mov	r3, r0
   11a5c:	mov	r0, sl
   11a60:	ldr	r2, [sp, #72]	; 0x48
   11a64:	mov	r1, r5
   11a68:	bl	111c0 <error@plt>
   11a6c:	b	1170c <__assert_fail@plt+0x384>
   11a70:	add	r0, sp, #192	; 0xc0
   11a74:	bl	15efc <__assert_fail@plt+0x4b74>
   11a78:	b	11910 <__assert_fail@plt+0x588>
   11a7c:	mov	r0, #0
   11a80:	bl	1137c <close@plt>
   11a84:	cmp	r0, #0
   11a88:	beq	119a0 <__assert_fail@plt+0x618>
   11a8c:	bl	11280 <__errno_location@plt>
   11a90:	movw	r2, #32572	; 0x7f3c
   11a94:	movt	r2, #1
   11a98:	ldr	r1, [r0]
   11a9c:	mov	r0, #1
   11aa0:	bl	111c0 <error@plt>
   11aa4:	cmp	r8, r3
   11aa8:	bgt	11bb8 <__assert_fail@plt+0x830>
   11aac:	ldr	r0, [pc, #956]	; 11e70 <__assert_fail@plt+0xae8>
   11ab0:	bl	13240 <__assert_fail@plt+0x1eb8>
   11ab4:	subs	r9, r0, #0
   11ab8:	beq	11cf0 <__assert_fail@plt+0x968>
   11abc:	mov	r1, #112	; 0x70
   11ac0:	mov	r0, #1
   11ac4:	ldr	r7, [pc, #932]	; 11e70 <__assert_fail@plt+0xae8>
   11ac8:	bl	16874 <__assert_fail@plt+0x54ec>
   11acc:	ldr	r3, [sp, #32]
   11ad0:	str	r0, [sp, #52]	; 0x34
   11ad4:	str	r3, [sp, #80]	; 0x50
   11ad8:	add	r3, sp, #88	; 0x58
   11adc:	str	r3, [sp, #40]	; 0x28
   11ae0:	ldrb	r5, [r4]
   11ae4:	ldrb	r1, [r4, #8]
   11ae8:	ldrb	r2, [r4, #9]
   11aec:	ldrb	r3, [r4, #10]
   11af0:	add	r5, r5, r1
   11af4:	ldrb	r6, [r4, #11]
   11af8:	add	r5, r5, r2
   11afc:	add	r5, r5, r3
   11b00:	add	r5, r5, r6
   11b04:	cmp	r5, #1
   11b08:	beq	11d7c <__assert_fail@plt+0x9f4>
   11b0c:	mov	r8, #1
   11b10:	ldr	r3, [sp, #52]	; 0x34
   11b14:	movw	r6, #32572	; 0x7f3c
   11b18:	movt	r6, #1
   11b1c:	mov	r5, #0
   11b20:	add	sl, r3, #8
   11b24:	b	11b4c <__assert_fail@plt+0x7c4>
   11b28:	mov	r2, sl
   11b2c:	mov	r1, #0
   11b30:	mov	r0, #3
   11b34:	bl	11178 <__fxstat64@plt>
   11b38:	add	r5, r5, #1
   11b3c:	add	sl, sl, #112	; 0x70
   11b40:	str	r0, [sl, #-120]	; 0xffffff88
   11b44:	cmp	r5, r8
   11b48:	bcs	11bfc <__assert_fail@plt+0x874>
   11b4c:	ldr	fp, [r7, r5, lsl #2]
   11b50:	cmp	fp, #0
   11b54:	beq	11b28 <__assert_fail@plt+0x7a0>
   11b58:	mov	r1, r6
   11b5c:	mov	r0, fp
   11b60:	bl	11088 <strcmp@plt>
   11b64:	cmp	r0, #0
   11b68:	beq	11b28 <__assert_fail@plt+0x7a0>
   11b6c:	mov	r1, fp
   11b70:	mov	r2, sl
   11b74:	mov	r0, #3
   11b78:	bl	11358 <__xstat64@plt>
   11b7c:	b	11b38 <__assert_fail@plt+0x7b0>
   11b80:	ldrb	r3, [r4, #9]
   11b84:	cmp	r3, r5
   11b88:	bne	115b0 <__assert_fail@plt+0x228>
   11b8c:	ldrb	r3, [r4, #10]
   11b90:	cmp	r3, r5
   11b94:	bne	115b0 <__assert_fail@plt+0x228>
   11b98:	ldrb	r3, [r4, #11]
   11b9c:	cmp	r3, r5
   11ba0:	bne	115b0 <__assert_fail@plt+0x228>
   11ba4:	mov	r3, #1
   11ba8:	strb	r3, [r4]
   11bac:	strb	r3, [r4, #8]
   11bb0:	strb	r3, [r4, #10]
   11bb4:	b	115b0 <__assert_fail@plt+0x228>
   11bb8:	add	r7, r7, r3, lsl #2
   11bbc:	sub	r8, r8, r3
   11bc0:	mov	r0, r7
   11bc4:	bl	13240 <__assert_fail@plt+0x1eb8>
   11bc8:	subs	r9, r0, #0
   11bcc:	beq	11cf0 <__assert_fail@plt+0x968>
   11bd0:	ldr	r3, [sp, #32]
   11bd4:	str	r3, [sp, #80]	; 0x50
   11bd8:	add	r3, sp, #88	; 0x58
   11bdc:	str	r3, [sp, #40]	; 0x28
   11be0:	mov	r1, #112	; 0x70
   11be4:	mov	r0, r8
   11be8:	bl	16874 <__assert_fail@plt+0x54ec>
   11bec:	cmp	r8, #1
   11bf0:	str	r0, [sp, #52]	; 0x34
   11bf4:	bne	11b10 <__assert_fail@plt+0x788>
   11bf8:	b	11ae0 <__assert_fail@plt+0x758>
   11bfc:	ldr	r2, [sp, #52]	; 0x34
   11c00:	ldr	r3, [r2]
   11c04:	cmp	r3, #0
   11c08:	movgt	r5, #1
   11c0c:	bgt	11668 <__assert_fail@plt+0x2e0>
   11c10:	mov	ip, #112	; 0x70
   11c14:	mov	r3, r2
   11c18:	mov	r0, #0
   11c1c:	mov	r1, #0
   11c20:	mov	r6, #1
   11c24:	mla	ip, ip, r8, r2
   11c28:	b	11c60 <__assert_fail@plt+0x8d8>
   11c2c:	ldr	r2, [r3]
   11c30:	cmp	r2, #0
   11c34:	bne	11c5c <__assert_fail@plt+0x8d4>
   11c38:	ldr	r2, [r3, #24]
   11c3c:	and	r2, r2, #61440	; 0xf000
   11c40:	cmp	r2, #32768	; 0x8000
   11c44:	movne	r6, #7
   11c48:	bne	11c5c <__assert_fail@plt+0x8d4>
   11c4c:	ldr	r2, [r3, #56]	; 0x38
   11c50:	ldr	lr, [r3, #60]	; 0x3c
   11c54:	adds	r0, r0, r2
   11c58:	adc	r1, r1, lr
   11c5c:	add	r3, r3, #112	; 0x70
   11c60:	cmp	ip, r3
   11c64:	bne	11c2c <__assert_fail@plt+0x8a4>
   11c68:	mov	r5, #1
   11c6c:	b	11c80 <__assert_fail@plt+0x8f8>
   11c70:	mov	r2, #10
   11c74:	mov	r3, #0
   11c78:	add	r5, r5, #1
   11c7c:	bl	1768c <_obstack_memory_used@@Base+0x4f0>
   11c80:	cmp	r1, #0
   11c84:	cmpeq	r0, #9
   11c88:	bhi	11c70 <__assert_fail@plt+0x8e8>
   11c8c:	cmp	r5, r6
   11c90:	movlt	r5, r6
   11c94:	b	11668 <__assert_fail@plt+0x2e0>
   11c98:	movw	r1, #32576	; 0x7f40
   11c9c:	movt	r1, #1
   11ca0:	ldr	r0, [sp, #32]
   11ca4:	bl	11334 <fopen64@plt>
   11ca8:	subs	r5, r0, #0
   11cac:	bne	115f4 <__assert_fail@plt+0x26c>
   11cb0:	bl	11280 <__errno_location@plt>
   11cb4:	ldr	r4, [r0]
   11cb8:	mov	r2, #5
   11cbc:	mov	r0, r5
   11cc0:	movw	r1, #32580	; 0x7f44
   11cc4:	movt	r1, #1
   11cc8:	bl	11124 <dcgettext@plt>
   11ccc:	mov	r5, r0
   11cd0:	mov	r0, #4
   11cd4:	ldr	r1, [sp, #32]
   11cd8:	bl	15aac <__assert_fail@plt+0x4724>
   11cdc:	mov	r3, r0
   11ce0:	mov	r2, r5
   11ce4:	mov	r1, r4
   11ce8:	mov	r0, #1
   11cec:	bl	111c0 <error@plt>
   11cf0:	bl	16b84 <__assert_fail@plt+0x57fc>
   11cf4:	vldr	d8, [pc, #348]	; 11e58 <__assert_fail@plt+0xad0>
   11cf8:	ldrd	r0, [sp, #136]	; 0x88
   11cfc:	bl	1762c <_obstack_memory_used@@Base+0x490>
   11d00:	vmov	d9, r0, r1
   11d04:	bl	139b8 <__assert_fail@plt+0x2630>
   11d08:	vmul.f64	d0, d0, d8
   11d0c:	vldr	d7, [pc, #332]	; 11e60 <__assert_fail@plt+0xad8>
   11d10:	vcmpe.f64	d0, d7
   11d14:	vmrs	APSR_nzcv, fpscr
   11d18:	ble	11d8c <__assert_fail@plt+0xa04>
   11d1c:	vcmpe.f64	d9, d7
   11d20:	vmrs	APSR_nzcv, fpscr
   11d24:	bhi	11630 <__assert_fail@plt+0x2a8>
   11d28:	add	r0, sp, #192	; 0xc0
   11d2c:	bl	15e6c <__assert_fail@plt+0x4ae4>
   11d30:	add	r1, sp, #192	; 0xc0
   11d34:	mov	r0, r5
   11d38:	bl	15f38 <__assert_fail@plt+0x4bb0>
   11d3c:	subs	r3, r0, #0
   11d40:	str	r3, [sp, #80]	; 0x50
   11d44:	beq	11e1c <__assert_fail@plt+0xa94>
   11d48:	mov	r0, r5
   11d4c:	bl	13528 <__assert_fail@plt+0x21a0>
   11d50:	cmp	r0, #0
   11d54:	bne	11e1c <__assert_fail@plt+0xa94>
   11d58:	ldr	r8, [sp, #192]	; 0xc0
   11d5c:	ldr	r7, [sp, #196]	; 0xc4
   11d60:	mov	r0, r7
   11d64:	bl	13240 <__assert_fail@plt+0x1eb8>
   11d68:	subs	r9, r0, #0
   11d6c:	beq	11cf0 <__assert_fail@plt+0x968>
   11d70:	cmp	r8, #0
   11d74:	bne	11be0 <__assert_fail@plt+0x858>
   11d78:	b	11648 <__assert_fail@plt+0x2c0>
   11d7c:	ldr	r3, [sp, #52]	; 0x34
   11d80:	mov	r8, r5
   11d84:	str	r5, [r3]
   11d88:	b	11668 <__assert_fail@plt+0x2e0>
   11d8c:	bl	139b8 <__assert_fail@plt+0x2630>
   11d90:	vmul.f64	d7, d0, d8
   11d94:	b	11d1c <__assert_fail@plt+0x994>
   11d98:	mov	r0, r5
   11d9c:	bl	12ed0 <__assert_fail@plt+0x1b48>
   11da0:	mov	r2, #5
   11da4:	movw	r1, #32500	; 0x7ef4
   11da8:	movt	r1, #1
   11dac:	mov	r0, #0
   11db0:	bl	11124 <dcgettext@plt>
   11db4:	ldr	r3, [r5]
   11db8:	mov	r4, r0
   11dbc:	mov	r0, #4
   11dc0:	ldr	r1, [r7, r3, lsl #2]
   11dc4:	bl	15aac <__assert_fail@plt+0x4724>
   11dc8:	mov	r1, #0
   11dcc:	mov	r3, r0
   11dd0:	mov	r2, r4
   11dd4:	mov	r0, r1
   11dd8:	bl	111c0 <error@plt>
   11ddc:	movw	r3, #37256	; 0x9188
   11de0:	movt	r3, #2
   11de4:	ldr	r4, [r3]
   11de8:	mov	r2, #5
   11dec:	movw	r1, #32520	; 0x7f08
   11df0:	movt	r1, #1
   11df4:	mov	r0, #0
   11df8:	bl	11124 <dcgettext@plt>
   11dfc:	mov	r3, r0
   11e00:	movw	r2, #33364	; 0x8254
   11e04:	movt	r2, #1
   11e08:	mov	r1, #1
   11e0c:	mov	r0, r4
   11e10:	bl	112e0 <__fprintf_chk@plt>
   11e14:	mov	r0, #1
   11e18:	bl	12ed0 <__assert_fail@plt+0x1b48>
   11e1c:	mov	r2, #5
   11e20:	movw	r1, #32608	; 0x7f60
   11e24:	movt	r1, #1
   11e28:	mov	r0, #0
   11e2c:	bl	11124 <dcgettext@plt>
   11e30:	mov	r4, r0
   11e34:	mov	r0, #4
   11e38:	ldr	r1, [sp, #32]
   11e3c:	bl	15aac <__assert_fail@plt+0x4724>
   11e40:	mov	r3, r0
   11e44:	mov	r2, r4
   11e48:	mov	r1, #0
   11e4c:	mov	r0, #1
   11e50:	bl	111c0 <error@plt>
   11e54:	nop	{0}
   11e58:	andeq	r0, r0, r0
   11e5c:	svccc	0x00e00000
   11e60:	andeq	r0, r0, r0
   11e64:	cmnmi	r4, r0
   11e68:	andeq	r7, r1, r8, asr #17
   11e6c:	andeq	r7, r1, r8, ror #18
   11e70:	andeq	r9, r2, r0, ror #3
   11e74:	mov	fp, #0
   11e78:	mov	lr, #0
   11e7c:	pop	{r1}		; (ldr r1, [sp], #4)
   11e80:	mov	r2, sp
   11e84:	push	{r2}		; (str r2, [sp, #-4]!)
   11e88:	push	{r0}		; (str r0, [sp, #-4]!)
   11e8c:	ldr	ip, [pc, #16]	; 11ea4 <__assert_fail@plt+0xb1c>
   11e90:	push	{ip}		; (str ip, [sp, #-4]!)
   11e94:	ldr	r0, [pc, #12]	; 11ea8 <__assert_fail@plt+0xb20>
   11e98:	ldr	r3, [pc, #12]	; 11eac <__assert_fail@plt+0xb24>
   11e9c:	bl	111fc <__libc_start_main@plt>
   11ea0:	bl	11370 <abort@plt>
   11ea4:	andeq	r7, r1, r0, ror #16
   11ea8:	muleq	r1, r8, r3
   11eac:	andeq	r7, r1, r0, lsl #16
   11eb0:	ldr	r3, [pc, #20]	; 11ecc <__assert_fail@plt+0xb44>
   11eb4:	ldr	r2, [pc, #20]	; 11ed0 <__assert_fail@plt+0xb48>
   11eb8:	add	r3, pc, r3
   11ebc:	ldr	r2, [r3, r2]
   11ec0:	cmp	r2, #0
   11ec4:	bxeq	lr
   11ec8:	b	11214 <__gmon_start__@plt>
   11ecc:	andeq	r7, r1, r0, asr #2
   11ed0:	andeq	r0, r0, ip, lsl r1
   11ed4:	ldr	r0, [pc, #24]	; 11ef4 <__assert_fail@plt+0xb6c>
   11ed8:	ldr	r3, [pc, #24]	; 11ef8 <__assert_fail@plt+0xb70>
   11edc:	cmp	r3, r0
   11ee0:	bxeq	lr
   11ee4:	ldr	r3, [pc, #16]	; 11efc <__assert_fail@plt+0xb74>
   11ee8:	cmp	r3, #0
   11eec:	bxeq	lr
   11ef0:	bx	r3
   11ef4:	andeq	r9, r2, r4, ror r1
   11ef8:	andeq	r9, r2, r4, ror r1
   11efc:	andeq	r0, r0, r0
   11f00:	ldr	r0, [pc, #36]	; 11f2c <__assert_fail@plt+0xba4>
   11f04:	ldr	r1, [pc, #36]	; 11f30 <__assert_fail@plt+0xba8>
   11f08:	sub	r1, r1, r0
   11f0c:	asr	r1, r1, #2
   11f10:	add	r1, r1, r1, lsr #31
   11f14:	asrs	r1, r1, #1
   11f18:	bxeq	lr
   11f1c:	ldr	r3, [pc, #16]	; 11f34 <__assert_fail@plt+0xbac>
   11f20:	cmp	r3, #0
   11f24:	bxeq	lr
   11f28:	bx	r3
   11f2c:	andeq	r9, r2, r4, ror r1
   11f30:	andeq	r9, r2, r4, ror r1
   11f34:	andeq	r0, r0, r0
   11f38:	push	{r4, lr}
   11f3c:	ldr	r4, [pc, #24]	; 11f5c <__assert_fail@plt+0xbd4>
   11f40:	ldrb	r3, [r4]
   11f44:	cmp	r3, #0
   11f48:	popne	{r4, pc}
   11f4c:	bl	11ed4 <__assert_fail@plt+0xb4c>
   11f50:	mov	r3, #1
   11f54:	strb	r3, [r4]
   11f58:	pop	{r4, pc}
   11f5c:	muleq	r2, ip, r1
   11f60:	b	11f00 <__assert_fail@plt+0xb78>
   11f64:	strd	r4, [sp, #-28]!	; 0xffffffe4
   11f68:	movw	r4, #37280	; 0x91a0
   11f6c:	movt	r4, #2
   11f70:	strd	r6, [sp, #8]
   11f74:	strd	r8, [sp, #16]
   11f78:	mov	r9, r3
   11f7c:	mov	r8, r2
   11f80:	ldrb	r3, [r4]
   11f84:	str	lr, [sp, #24]
   11f88:	sub	sp, sp, #28
   11f8c:	ldr	r6, [sp, #80]	; 0x50
   11f90:	cmp	r3, #0
   11f94:	ldreq	r5, [pc, #428]	; 12148 <__assert_fail@plt+0xdc0>
   11f98:	bne	12110 <__assert_fail@plt+0xd88>
   11f9c:	ldrb	r3, [r4, #8]
   11fa0:	cmp	r3, #0
   11fa4:	bne	120dc <__assert_fail@plt+0xd54>
   11fa8:	ldrb	r3, [r4, #9]
   11fac:	cmp	r3, #0
   11fb0:	bne	120ac <__assert_fail@plt+0xd24>
   11fb4:	ldrb	r3, [r4, #10]
   11fb8:	cmp	r3, #0
   11fbc:	bne	1207c <__assert_fail@plt+0xcf4>
   11fc0:	ldrb	r3, [r4, #11]
   11fc4:	cmp	r3, #0
   11fc8:	bne	12054 <__assert_fail@plt+0xccc>
   11fcc:	cmp	r6, #0
   11fd0:	beq	12010 <__assert_fail@plt+0xc88>
   11fd4:	mov	r1, #10
   11fd8:	mov	r0, r6
   11fdc:	bl	11268 <strchr@plt>
   11fe0:	cmp	r0, #0
   11fe4:	beq	11ffc <__assert_fail@plt+0xc74>
   11fe8:	mov	r2, r6
   11fec:	mov	r1, #3
   11ff0:	mov	r0, #0
   11ff4:	bl	15b88 <__assert_fail@plt+0x4800>
   11ff8:	mov	r6, r0
   11ffc:	movw	r1, #31088	; 0x7970
   12000:	movt	r1, #1
   12004:	mov	r2, r6
   12008:	mov	r0, #1
   1200c:	bl	112c8 <__printf_chk@plt>
   12010:	movw	r3, #37268	; 0x9194
   12014:	movt	r3, #2
   12018:	ldr	r0, [r3]
   1201c:	ldr	r3, [r0, #20]
   12020:	ldr	r2, [r0, #24]
   12024:	cmp	r3, r2
   12028:	addcc	r1, r3, #1
   1202c:	movcc	r2, #10
   12030:	strcc	r1, [r0, #20]
   12034:	strbcc	r2, [r3]
   12038:	bcs	1213c <__assert_fail@plt+0xdb4>
   1203c:	add	sp, sp, #28
   12040:	ldrd	r4, [sp]
   12044:	ldrd	r6, [sp, #8]
   12048:	ldrd	r8, [sp, #16]
   1204c:	add	sp, sp, #24
   12050:	pop	{pc}		; (ldr pc, [sp], #4)
   12054:	ldr	r4, [r4, #4]
   12058:	mov	r2, sp
   1205c:	ldrd	r0, [sp, #72]	; 0x48
   12060:	bl	1376c <__assert_fail@plt+0x23e4>
   12064:	mov	r3, r0
   12068:	mov	r1, r5
   1206c:	mov	r2, r4
   12070:	mov	r0, #1
   12074:	bl	112c8 <__printf_chk@plt>
   12078:	b	11fcc <__assert_fail@plt+0xc44>
   1207c:	ldr	r7, [r4, #4]
   12080:	mov	r2, sp
   12084:	ldrd	r0, [sp, #64]	; 0x40
   12088:	bl	1376c <__assert_fail@plt+0x23e4>
   1208c:	mov	r3, r0
   12090:	mov	r1, r5
   12094:	mov	r2, r7
   12098:	mov	r0, #1
   1209c:	movw	r5, #30856	; 0x7888
   120a0:	movt	r5, #1
   120a4:	bl	112c8 <__printf_chk@plt>
   120a8:	b	11fc0 <__assert_fail@plt+0xc38>
   120ac:	ldr	r7, [r4, #4]
   120b0:	mov	r2, sp
   120b4:	ldrd	r0, [sp, #56]	; 0x38
   120b8:	bl	1376c <__assert_fail@plt+0x23e4>
   120bc:	mov	r3, r0
   120c0:	mov	r1, r5
   120c4:	mov	r2, r7
   120c8:	mov	r0, #1
   120cc:	movw	r5, #30856	; 0x7888
   120d0:	movt	r5, #1
   120d4:	bl	112c8 <__printf_chk@plt>
   120d8:	b	11fb4 <__assert_fail@plt+0xc2c>
   120dc:	ldr	r7, [r4, #4]
   120e0:	mov	r1, r9
   120e4:	mov	r2, sp
   120e8:	mov	r0, r8
   120ec:	bl	1376c <__assert_fail@plt+0x23e4>
   120f0:	mov	r3, r0
   120f4:	mov	r1, r5
   120f8:	mov	r0, #1
   120fc:	movw	r5, #30856	; 0x7888
   12100:	movt	r5, #1
   12104:	mov	r2, r7
   12108:	bl	112c8 <__printf_chk@plt>
   1210c:	b	11fa8 <__assert_fail@plt+0xc20>
   12110:	ldr	r7, [r4, #4]
   12114:	mov	r2, sp
   12118:	movw	r5, #30856	; 0x7888
   1211c:	movt	r5, #1
   12120:	bl	1376c <__assert_fail@plt+0x23e4>
   12124:	mov	r3, r0
   12128:	add	r1, r5, #1
   1212c:	mov	r0, #1
   12130:	mov	r2, r7
   12134:	bl	112c8 <__printf_chk@plt>
   12138:	b	11f9c <__assert_fail@plt+0xc14>
   1213c:	mov	r1, #10
   12140:	bl	11304 <__overflow@plt>
   12144:	b	1203c <__assert_fail@plt+0xcb4>
   12148:	andeq	r7, r1, r9, lsl #17
   1214c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   12150:	subs	r3, r1, #0
   12154:	strd	r6, [sp, #8]
   12158:	mov	r7, r2
   1215c:	strd	r8, [sp, #16]
   12160:	strd	sl, [sp, #24]
   12164:	str	lr, [sp, #32]
   12168:	sub	sp, sp, #16384	; 0x4000
   1216c:	sub	sp, sp, #156	; 0x9c
   12170:	str	r0, [sp, #80]	; 0x50
   12174:	str	r3, [sp, #88]	; 0x58
   12178:	beq	12a24 <__assert_fail@plt+0x169c>
   1217c:	ldr	r3, [sp, #88]	; 0x58
   12180:	str	r3, [sp, #96]	; 0x60
   12184:	mov	r2, #0
   12188:	mov	r3, #0
   1218c:	movw	sl, #37280	; 0x91a0
   12190:	movt	sl, #2
   12194:	strd	r2, [sp, #112]	; 0x70
   12198:	strd	r2, [sp, #120]	; 0x78
   1219c:	bl	1119c <__ctype_get_mb_cur_max@plt>
   121a0:	cmp	r0, #1
   121a4:	ldrb	r4, [sl, #10]
   121a8:	bls	12580 <__assert_fail@plt+0x11f8>
   121ac:	ldrb	r3, [sl, #9]
   121b0:	str	r3, [sp, #92]	; 0x5c
   121b4:	ldrb	r3, [sl, #8]
   121b8:	cmp	r3, #0
   121bc:	bne	12424 <__assert_fail@plt+0x109c>
   121c0:	ldrb	r3, [sl, #11]
   121c4:	cmp	r3, #0
   121c8:	str	r3, [sp, #44]	; 0x2c
   121cc:	bne	12424 <__assert_fail@plt+0x109c>
   121d0:	ldr	r2, [sp, #92]	; 0x5c
   121d4:	eor	r3, r4, #1
   121d8:	orrs	r3, r3, r2
   121dc:	bne	12c18 <__assert_fail@plt+0x1890>
   121e0:	ldrb	r3, [sl]
   121e4:	cmp	r3, #0
   121e8:	bne	12c98 <__assert_fail@plt+0x1910>
   121ec:	ldr	r6, [r7]
   121f0:	cmp	r6, #0
   121f4:	bgt	12b80 <__assert_fail@plt+0x17f8>
   121f8:	cmp	r6, #0
   121fc:	bne	122c4 <__assert_fail@plt+0xf3c>
   12200:	ldr	r3, [r7, #24]
   12204:	and	r3, r3, #53248	; 0xd000
   12208:	cmp	r3, #32768	; 0x8000
   1220c:	bne	122c4 <__assert_fail@plt+0xf3c>
   12210:	ldrd	r4, [r7, #56]	; 0x38
   12214:	cmp	r4, #0
   12218:	sbcs	r3, r5, #0
   1221c:	blt	122c4 <__assert_fail@plt+0xf3c>
   12220:	add	r1, sp, #16384	; 0x4000
   12224:	mvn	r3, #0
   12228:	ldr	r8, [sl, #12]
   1222c:	add	r1, r1, #192	; 0xc0
   12230:	mvn	r2, #0
   12234:	ldrd	r0, [r1]
   12238:	cmp	r1, r3
   1223c:	cmpeq	r0, r2
   12240:	beq	12b9c <__assert_fail@plt+0x1814>
   12244:	udiv	r3, r4, r8
   12248:	mls	r8, r8, r3, r4
   1224c:	cmp	r8, #0
   12250:	bne	12c0c <__assert_fail@plt+0x1884>
   12254:	mov	r0, #0
   12258:	mov	r1, #0
   1225c:	strd	r0, [sp, #32]
   12260:	ldr	r3, [r7, #64]	; 0x40
   12264:	mov	r7, #0
   12268:	sub	r2, r3, #1
   1226c:	cmn	r2, #-536870911	; 0xe0000001
   12270:	addls	r3, r3, #1
   12274:	movwhi	r3, #513	; 0x201
   12278:	cmp	r7, r1
   1227c:	udiv	r6, r4, r3
   12280:	mls	r6, r3, r6, r4
   12284:	sub	r6, r4, r6
   12288:	cmpeq	r6, r0
   1228c:	bls	122c4 <__assert_fail@plt+0xf3c>
   12290:	mov	r1, #1
   12294:	mov	r3, r7
   12298:	ldr	r0, [sp, #80]	; 0x50
   1229c:	mov	r2, r6
   122a0:	str	r1, [sp]
   122a4:	bl	11190 <lseek64@plt>
   122a8:	cmp	r0, #0
   122ac:	sbcs	r3, r1, #0
   122b0:	blt	122c4 <__assert_fail@plt+0xf3c>
   122b4:	ldrd	r0, [sp, #32]
   122b8:	subs	r2, r6, r0
   122bc:	sbc	r3, r7, r1
   122c0:	strd	r2, [sp, #120]	; 0x78
   122c4:	ldr	r4, [sp, #80]	; 0x50
   122c8:	mov	r1, #2
   122cc:	mov	r2, #0
   122d0:	mov	r3, #0
   122d4:	add	r5, sp, #148	; 0x94
   122d8:	strd	r2, [sp]
   122dc:	str	r1, [sp, #8]
   122e0:	mov	r0, r4
   122e4:	bl	134d4 <__assert_fail@plt+0x214c>
   122e8:	b	12304 <__assert_fail@plt+0xf7c>
   122ec:	cmn	r0, #1
   122f0:	beq	12b2c <__assert_fail@plt+0x17a4>
   122f4:	ldrd	r2, [sp, #120]	; 0x78
   122f8:	adds	r6, r2, r0
   122fc:	adc	r7, r3, #0
   12300:	strd	r6, [sp, #120]	; 0x78
   12304:	mov	r2, #16384	; 0x4000
   12308:	mov	r1, r5
   1230c:	mov	r0, r4
   12310:	bl	160f4 <__assert_fail@plt+0x4d6c>
   12314:	cmp	r0, #0
   12318:	bne	122ec <__assert_fail@plt+0xf64>
   1231c:	mov	r1, #1
   12320:	ldr	r0, [sp, #120]	; 0x78
   12324:	mov	r2, #0
   12328:	mov	r3, #0
   1232c:	mov	r8, r2
   12330:	str	r1, [sp, #44]	; 0x2c
   12334:	mov	r9, r3
   12338:	mov	r4, r2
   1233c:	ldr	r1, [sp, #124]	; 0x7c
   12340:	mov	r5, r3
   12344:	strd	r8, [sp, #32]
   12348:	ldrb	r3, [sl, #9]
   1234c:	strd	r0, [sp, #8]
   12350:	ldrd	r6, [sp, #32]
   12354:	ldr	r2, [sp, #92]	; 0x5c
   12358:	strd	r6, [sp, #16]
   1235c:	cmp	r3, r2
   12360:	mov	r2, r8
   12364:	movhi	r5, r1
   12368:	ldr	r1, [sp, #88]	; 0x58
   1236c:	movhi	r4, r0
   12370:	mov	r3, r9
   12374:	strd	r4, [sp]
   12378:	str	r1, [sp, #24]
   1237c:	ldrd	r0, [sp, #112]	; 0x70
   12380:	bl	11f64 <__assert_fail@plt+0xbdc>
   12384:	ldr	r3, [sl, #24]
   12388:	ldr	r2, [sp, #112]	; 0x70
   1238c:	ldr	r1, [sl, #28]
   12390:	ldr	r0, [sp, #116]	; 0x74
   12394:	adds	r2, r3, r2
   12398:	ldr	r3, [sl, #32]
   1239c:	str	r2, [sl, #24]
   123a0:	ldr	ip, [sl, #36]	; 0x24
   123a4:	adc	r1, r1, r0
   123a8:	ldr	r2, [sl, #40]	; 0x28
   123ac:	adds	r3, r3, r8
   123b0:	str	r1, [sl, #28]
   123b4:	ldr	r0, [sl, #44]	; 0x2c
   123b8:	str	r3, [sl, #32]
   123bc:	adc	ip, ip, r9
   123c0:	ldr	r3, [sl, #48]	; 0x30
   123c4:	adds	r4, r2, r4
   123c8:	str	ip, [sl, #36]	; 0x24
   123cc:	ldr	r1, [sp, #120]	; 0x78
   123d0:	adc	r5, r0, r5
   123d4:	ldr	r0, [sl, #52]	; 0x34
   123d8:	strd	r4, [sl, #40]	; 0x28
   123dc:	ldr	ip, [sp, #124]	; 0x7c
   123e0:	adds	r1, r3, r1
   123e4:	ldrd	r2, [sl, #56]	; 0x38
   123e8:	str	r1, [sl, #48]	; 0x30
   123ec:	adc	r1, r0, ip
   123f0:	ldr	r0, [sp, #44]	; 0x2c
   123f4:	cmp	r3, r7
   123f8:	str	r1, [sl, #52]	; 0x34
   123fc:	cmpeq	r2, r6
   12400:	strdcc	r6, [sl, #56]	; 0x38
   12404:	add	sp, sp, #16384	; 0x4000
   12408:	add	sp, sp, #156	; 0x9c
   1240c:	ldrd	r4, [sp]
   12410:	ldrd	r6, [sp, #8]
   12414:	ldrd	r8, [sp, #16]
   12418:	ldrd	sl, [sp, #24]
   1241c:	add	sp, sp, #32
   12420:	pop	{pc}		; (ldr pc, [sp], #4)
   12424:	mov	r1, #2
   12428:	mov	r2, #0
   1242c:	ldr	r0, [sp, #80]	; 0x50
   12430:	mov	r3, #0
   12434:	strd	r2, [sp]
   12438:	str	r1, [sp, #8]
   1243c:	bl	134d4 <__assert_fail@plt+0x214c>
   12440:	bl	1119c <__ctype_get_mb_cur_max@plt>
   12444:	cmp	r0, #1
   12448:	bls	1269c <__assert_fail@plt+0x1314>
   1244c:	mov	r2, #0
   12450:	mov	r3, r2
   12454:	mov	r6, r2
   12458:	mov	r8, r2
   1245c:	strd	r2, [sp, #48]	; 0x30
   12460:	ldrd	r0, [sp, #48]	; 0x30
   12464:	str	sl, [sp, #100]	; 0x64
   12468:	strd	r2, [sp, #132]	; 0x84
   1246c:	movw	r3, #33040	; 0x8110
   12470:	movt	r3, #1
   12474:	mov	r4, r0
   12478:	mov	r5, r1
   1247c:	str	r3, [sp, #72]	; 0x48
   12480:	add	r3, sp, #148	; 0x94
   12484:	strd	r0, [sp, #56]	; 0x38
   12488:	strd	r0, [sp, #64]	; 0x40
   1248c:	str	r3, [sp, #76]	; 0x4c
   12490:	str	r2, [sp, #84]	; 0x54
   12494:	ldr	r3, [sp, #76]	; 0x4c
   12498:	rsb	r2, r6, #16384	; 0x4000
   1249c:	ldr	r0, [sp, #80]	; 0x50
   124a0:	add	r1, r3, r6
   124a4:	bl	160f4 <__assert_fail@plt+0x4d6c>
   124a8:	cmp	r0, #0
   124ac:	beq	12a40 <__assert_fail@plt+0x16b8>
   124b0:	cmn	r0, #1
   124b4:	beq	12a7c <__assert_fail@plt+0x16f4>
   124b8:	ldr	r7, [sp, #76]	; 0x4c
   124bc:	add	r6, r6, r0
   124c0:	add	r9, sp, #132	; 0x84
   124c4:	str	r4, [sp, #32]
   124c8:	ldrd	r2, [sp, #120]	; 0x78
   124cc:	str	r5, [sp, #44]	; 0x2c
   124d0:	adds	sl, r2, r0
   124d4:	mov	r2, r8
   124d8:	adc	fp, r3, #0
   124dc:	strd	sl, [sp, #120]	; 0x78
   124e0:	ldr	fp, [sp, #84]	; 0x54
   124e4:	cmp	r2, #0
   124e8:	bne	1284c <__assert_fail@plt+0x14c4>
   124ec:	ldrb	r8, [r7]
   124f0:	ldr	r0, [sp, #72]	; 0x48
   124f4:	lsr	r3, r8, #5
   124f8:	and	r1, r8, #31
   124fc:	ldr	r3, [r0, r3, lsl #2]
   12500:	lsr	r3, r3, r1
   12504:	ands	sl, r3, #1
   12508:	beq	1284c <__assert_fail@plt+0x14c4>
   1250c:	sub	r1, r8, #9
   12510:	str	r8, [sp, #108]	; 0x6c
   12514:	cmp	r1, #23
   12518:	ldrls	pc, [pc, r1, lsl #2]
   1251c:	b	12654 <__assert_fail@plt+0x12cc>
   12520:	muleq	r1, r4, r5
   12524:	strdeq	r2, [r1], -ip
   12528:	andeq	r2, r1, ip, lsr #11
   1252c:	andeq	r2, r1, r4, lsl r6
   12530:	andeq	r2, r1, r4, lsl r6
   12534:	andeq	r2, r1, r4, asr r6
   12538:	andeq	r2, r1, r4, asr r6
   1253c:	andeq	r2, r1, r4, asr r6
   12540:	andeq	r2, r1, r4, asr r6
   12544:	andeq	r2, r1, r4, asr r6
   12548:	andeq	r2, r1, r4, asr r6
   1254c:	andeq	r2, r1, r4, asr r6
   12550:	andeq	r2, r1, r4, asr r6
   12554:	andeq	r2, r1, r4, asr r6
   12558:	andeq	r2, r1, r4, asr r6
   1255c:	andeq	r2, r1, r4, asr r6
   12560:	andeq	r2, r1, r4, asr r6
   12564:	andeq	r2, r1, r4, asr r6
   12568:	andeq	r2, r1, r4, asr r6
   1256c:	andeq	r2, r1, r4, asr r6
   12570:	andeq	r2, r1, r4, asr r6
   12574:	andeq	r2, r1, r4, asr r6
   12578:	andeq	r2, r1, r4, asr r6
   1257c:	andeq	r2, r1, r8, lsr r6
   12580:	mov	r3, #0
   12584:	cmp	r4, #0
   12588:	ldrbeq	r4, [sl, #9]
   1258c:	str	r3, [sp, #92]	; 0x5c
   12590:	b	121b4 <__assert_fail@plt+0xe2c>
   12594:	ldrd	r4, [sp, #48]	; 0x30
   12598:	bic	r1, r4, #7
   1259c:	adds	r3, r1, #8
   125a0:	str	r3, [sp, #48]	; 0x30
   125a4:	adc	r3, r5, #0
   125a8:	str	r3, [sp, #52]	; 0x34
   125ac:	ldrd	r0, [sp, #56]	; 0x38
   125b0:	adds	r0, r0, fp
   125b4:	mov	fp, #0
   125b8:	adc	r1, r1, #0
   125bc:	strd	r0, [sp, #56]	; 0x38
   125c0:	ldr	r3, [sp, #32]
   125c4:	add	r7, r7, sl
   125c8:	sub	r6, r6, sl
   125cc:	adds	r3, r3, #1
   125d0:	str	r3, [sp, #32]
   125d4:	ldr	r3, [sp, #44]	; 0x2c
   125d8:	adc	r3, r3, #0
   125dc:	str	r3, [sp, #44]	; 0x2c
   125e0:	cmp	r6, #0
   125e4:	bne	124e4 <__assert_fail@plt+0x115c>
   125e8:	mov	r8, r2
   125ec:	str	fp, [sp, #84]	; 0x54
   125f0:	ldr	r4, [sp, #32]
   125f4:	ldr	r5, [sp, #44]	; 0x2c
   125f8:	b	12494 <__assert_fail@plt+0x110c>
   125fc:	ldr	r1, [sp, #112]	; 0x70
   12600:	ldr	r0, [sp, #116]	; 0x74
   12604:	adds	r1, r1, #1
   12608:	adc	r0, r0, #0
   1260c:	str	r1, [sp, #112]	; 0x70
   12610:	str	r0, [sp, #116]	; 0x74
   12614:	ldrd	r0, [sp, #48]	; 0x30
   12618:	ldrd	r4, [sp, #64]	; 0x40
   1261c:	cmp	r5, r1
   12620:	cmpeq	r4, r0
   12624:	strdcc	r0, [sp, #64]	; 0x40
   12628:	mov	r0, #0
   1262c:	mov	r1, #0
   12630:	strd	r0, [sp, #48]	; 0x30
   12634:	b	125ac <__assert_fail@plt+0x1224>
   12638:	ldr	r3, [sp, #48]	; 0x30
   1263c:	adds	r3, r3, #1
   12640:	str	r3, [sp, #48]	; 0x30
   12644:	ldr	r3, [sp, #52]	; 0x34
   12648:	adc	r3, r3, #0
   1264c:	str	r3, [sp, #52]	; 0x34
   12650:	b	125ac <__assert_fail@plt+0x1224>
   12654:	str	r2, [sp, #84]	; 0x54
   12658:	lsl	r8, r8, #1
   1265c:	bl	1122c <__ctype_b_loc@plt>
   12660:	ldr	r1, [r0]
   12664:	ldr	r2, [sp, #84]	; 0x54
   12668:	ldrh	r1, [r1, r8]
   1266c:	tst	r1, #16384	; 0x4000
   12670:	beq	125c0 <__assert_fail@plt+0x1238>
   12674:	ldr	r3, [sp, #48]	; 0x30
   12678:	adds	r3, r3, #1
   1267c:	str	r3, [sp, #48]	; 0x30
   12680:	ldr	r3, [sp, #52]	; 0x34
   12684:	adc	r3, r3, #0
   12688:	tst	r1, #8192	; 0x2000
   1268c:	moveq	fp, #1
   12690:	str	r3, [sp, #52]	; 0x34
   12694:	beq	125c0 <__assert_fail@plt+0x1238>
   12698:	b	125ac <__assert_fail@plt+0x1224>
   1269c:	mov	r8, #0
   126a0:	mov	r9, #0
   126a4:	add	r3, sp, #148	; 0x94
   126a8:	mov	r4, #0
   126ac:	mov	r6, r8
   126b0:	mov	r7, r9
   126b4:	strd	r8, [sp, #32]
   126b8:	str	sl, [sp, #44]	; 0x2c
   126bc:	str	r3, [sp, #76]	; 0x4c
   126c0:	mov	r2, #16384	; 0x4000
   126c4:	ldr	r1, [sp, #76]	; 0x4c
   126c8:	ldr	r0, [sp, #80]	; 0x50
   126cc:	bl	160f4 <__assert_fail@plt+0x4d6c>
   126d0:	cmp	r0, #0
   126d4:	beq	12abc <__assert_fail@plt+0x1734>
   126d8:	cmn	r0, #1
   126dc:	beq	12af0 <__assert_fail@plt+0x1768>
   126e0:	ldr	r5, [sp, #76]	; 0x4c
   126e4:	ldrd	r2, [sp, #120]	; 0x78
   126e8:	add	r1, r5, r0
   126ec:	adds	sl, r2, r0
   126f0:	adc	fp, r3, #0
   126f4:	strd	sl, [sp, #120]	; 0x78
   126f8:	mov	sl, r1
   126fc:	mov	fp, r4
   12700:	ldrb	r4, [r5], #1
   12704:	sub	r3, r4, #9
   12708:	cmp	r3, #23
   1270c:	ldrls	pc, [pc, r3, lsl #2]
   12710:	b	127dc <__assert_fail@plt+0x1454>
   12714:	andeq	r2, r1, r4, ror r7
   12718:	muleq	r1, ip, r7
   1271c:	andeq	r2, r1, r0, lsl #15
   12720:			; <UNDEFINED> instruction: 0x000127b4
   12724:			; <UNDEFINED> instruction: 0x000127b4
   12728:	ldrdeq	r2, [r1], -ip
   1272c:	ldrdeq	r2, [r1], -ip
   12730:	ldrdeq	r2, [r1], -ip
   12734:	ldrdeq	r2, [r1], -ip
   12738:	ldrdeq	r2, [r1], -ip
   1273c:	ldrdeq	r2, [r1], -ip
   12740:	ldrdeq	r2, [r1], -ip
   12744:	ldrdeq	r2, [r1], -ip
   12748:	ldrdeq	r2, [r1], -ip
   1274c:	ldrdeq	r2, [r1], -ip
   12750:	ldrdeq	r2, [r1], -ip
   12754:	ldrdeq	r2, [r1], -ip
   12758:	ldrdeq	r2, [r1], -ip
   1275c:	ldrdeq	r2, [r1], -ip
   12760:	ldrdeq	r2, [r1], -ip
   12764:	ldrdeq	r2, [r1], -ip
   12768:	ldrdeq	r2, [r1], -ip
   1276c:	ldrdeq	r2, [r1], -ip
   12770:	ldrdeq	r2, [r1], -r0
   12774:	bic	r3, r8, #7
   12778:	adds	r8, r3, #8
   1277c:	adc	r9, r9, #0
   12780:	adds	r6, r6, fp
   12784:	mov	fp, #0
   12788:	adc	r7, r7, #0
   1278c:	cmp	sl, r5
   12790:	bne	12700 <__assert_fail@plt+0x1378>
   12794:	mov	r4, fp
   12798:	b	126c0 <__assert_fail@plt+0x1338>
   1279c:	ldr	r3, [sp, #112]	; 0x70
   127a0:	ldr	r0, [sp, #116]	; 0x74
   127a4:	adds	r3, r3, #1
   127a8:	adc	r0, r0, #0
   127ac:	str	r3, [sp, #112]	; 0x70
   127b0:	str	r0, [sp, #116]	; 0x74
   127b4:	ldrd	r2, [sp, #32]
   127b8:	cmp	r3, r9
   127bc:	cmpeq	r2, r8
   127c0:	strdcc	r8, [sp, #32]
   127c4:	mov	r8, #0
   127c8:	mov	r9, #0
   127cc:	b	12780 <__assert_fail@plt+0x13f8>
   127d0:	adds	r8, r8, #1
   127d4:	adc	r9, r9, #0
   127d8:	b	12780 <__assert_fail@plt+0x13f8>
   127dc:	bl	1122c <__ctype_b_loc@plt>
   127e0:	ldr	r0, [r0]
   127e4:	lsl	r3, r4, #1
   127e8:	ldrh	r3, [r0, r3]
   127ec:	tst	r3, #16384	; 0x4000
   127f0:	beq	1278c <__assert_fail@plt+0x1404>
   127f4:	adds	r8, r8, #1
   127f8:	adc	r9, r9, #0
   127fc:	tst	r3, #8192	; 0x2000
   12800:	bne	12780 <__assert_fail@plt+0x13f8>
   12804:	mov	r0, r4
   12808:	bl	112b0 <btowc@plt>
   1280c:	ldr	r3, [sp, #44]	; 0x2c
   12810:	ldrb	r3, [r3, #16]
   12814:	cmp	r3, #0
   12818:	movne	fp, r3
   1281c:	bne	1278c <__assert_fail@plt+0x1404>
   12820:	movw	r3, #8199	; 0x2007
   12824:	cmp	r0, r3
   12828:	cmpne	r0, #160	; 0xa0
   1282c:	beq	12780 <__assert_fail@plt+0x13f8>
   12830:	movw	r3, #8239	; 0x202f
   12834:	movw	r2, #8288	; 0x2060
   12838:	cmp	r0, r2
   1283c:	cmpne	r0, r3
   12840:	movne	fp, #1
   12844:	bne	1278c <__assert_fail@plt+0x1404>
   12848:	b	12780 <__assert_fail@plt+0x13f8>
   1284c:	ldrd	r4, [r9]
   12850:	mov	r3, r9
   12854:	mov	r2, r6
   12858:	mov	r1, r7
   1285c:	add	r0, sp, #108	; 0x6c
   12860:	add	r8, sp, #140	; 0x8c
   12864:	strd	r4, [sp, #140]	; 0x8c
   12868:	bl	138a4 <__assert_fail@plt+0x251c>
   1286c:	cmn	r0, #2
   12870:	mov	sl, r0
   12874:	beq	129b4 <__assert_fail@plt+0x162c>
   12878:	cmn	r0, #1
   1287c:	addeq	r7, r7, #1
   12880:	subeq	r6, r6, #1
   12884:	moveq	r2, #1
   12888:	beq	125e0 <__assert_fail@plt+0x1258>
   1288c:	mov	r0, r9
   12890:	bl	11100 <mbsinit@plt>
   12894:	cmp	sl, #0
   12898:	clz	r2, r0
   1289c:	lsr	r2, r2, #5
   128a0:	moveq	r8, #1
   128a4:	streq	sl, [sp, #108]	; 0x6c
   128a8:	bne	12940 <__assert_fail@plt+0x15b8>
   128ac:	mov	r0, sl
   128b0:	str	r2, [sp, #84]	; 0x54
   128b4:	bl	1116c <iswprint@plt>
   128b8:	cmp	r0, #0
   128bc:	ldr	r2, [sp, #84]	; 0x54
   128c0:	moveq	sl, r8
   128c4:	beq	125c0 <__assert_fail@plt+0x1238>
   128c8:	ldr	r3, [sp, #100]	; 0x64
   128cc:	ldrb	r1, [r3, #11]
   128d0:	cmp	r1, #0
   128d4:	bne	129fc <__assert_fail@plt+0x1674>
   128d8:	ldr	sl, [sp, #108]	; 0x6c
   128dc:	str	r2, [sp, #84]	; 0x54
   128e0:	mov	r0, sl
   128e4:	bl	11250 <iswspace@plt>
   128e8:	cmp	r0, #0
   128ec:	ldr	r2, [sp, #84]	; 0x54
   128f0:	bne	12938 <__assert_fail@plt+0x15b0>
   128f4:	ldr	r3, [sp, #100]	; 0x64
   128f8:	ldrb	r1, [r3, #16]
   128fc:	cmp	r1, #0
   12900:	movne	sl, r8
   12904:	movne	fp, r1
   12908:	bne	125c0 <__assert_fail@plt+0x1238>
   1290c:	movw	r1, #8199	; 0x2007
   12910:	cmp	sl, r1
   12914:	cmpne	sl, #160	; 0xa0
   12918:	beq	12938 <__assert_fail@plt+0x15b0>
   1291c:	movw	r0, #8239	; 0x202f
   12920:	movw	r1, #8288	; 0x2060
   12924:	cmp	sl, r1
   12928:	cmpne	sl, r0
   1292c:	movne	sl, r8
   12930:	movne	fp, #1
   12934:	bne	125c0 <__assert_fail@plt+0x1238>
   12938:	mov	sl, r8
   1293c:	b	125ac <__assert_fail@plt+0x1224>
   12940:	ldr	r0, [sp, #108]	; 0x6c
   12944:	sub	r1, r0, #9
   12948:	cmp	r1, #23
   1294c:	ldrls	pc, [pc, r1, lsl #2]
   12950:	b	12cb8 <__assert_fail@plt+0x1930>
   12954:	muleq	r1, r4, r5
   12958:	strdeq	r2, [r1], -ip
   1295c:	andeq	r2, r1, ip, lsr #11
   12960:	andeq	r2, r1, r4, lsl r6
   12964:	andeq	r2, r1, r4, lsl r6
   12968:			; <UNDEFINED> instruction: 0x00012cb8
   1296c:			; <UNDEFINED> instruction: 0x00012cb8
   12970:			; <UNDEFINED> instruction: 0x00012cb8
   12974:			; <UNDEFINED> instruction: 0x00012cb8
   12978:			; <UNDEFINED> instruction: 0x00012cb8
   1297c:			; <UNDEFINED> instruction: 0x00012cb8
   12980:			; <UNDEFINED> instruction: 0x00012cb8
   12984:			; <UNDEFINED> instruction: 0x00012cb8
   12988:			; <UNDEFINED> instruction: 0x00012cb8
   1298c:			; <UNDEFINED> instruction: 0x00012cb8
   12990:			; <UNDEFINED> instruction: 0x00012cb8
   12994:			; <UNDEFINED> instruction: 0x00012cb8
   12998:			; <UNDEFINED> instruction: 0x00012cb8
   1299c:			; <UNDEFINED> instruction: 0x00012cb8
   129a0:			; <UNDEFINED> instruction: 0x00012cb8
   129a4:			; <UNDEFINED> instruction: 0x00012cb8
   129a8:			; <UNDEFINED> instruction: 0x00012cb8
   129ac:			; <UNDEFINED> instruction: 0x00012cb8
   129b0:	andeq	r2, r1, r8, lsr r6
   129b4:	ldrd	r2, [r8]
   129b8:	cmp	r6, #0
   129bc:	moveq	r8, #1
   129c0:	str	fp, [sp, #84]	; 0x54
   129c4:	ldr	r4, [sp, #32]
   129c8:	ldr	r5, [sp, #44]	; 0x2c
   129cc:	strd	r2, [sp, #132]	; 0x84
   129d0:	beq	12494 <__assert_fail@plt+0x110c>
   129d4:	cmp	r6, #16384	; 0x4000
   129d8:	movw	r3, #16385	; 0x4001
   129dc:	ldr	r0, [sp, #76]	; 0x4c
   129e0:	addeq	r7, r7, #1
   129e4:	movweq	r6, #16383	; 0x3fff
   129e8:	mov	r1, r7
   129ec:	mov	r2, r6
   129f0:	mov	r8, #1
   129f4:	bl	110c4 <__memmove_chk@plt>
   129f8:	b	12494 <__assert_fail@plt+0x110c>
   129fc:	mov	r0, sl
   12a00:	bl	110b8 <wcwidth@plt>
   12a04:	cmp	r0, #0
   12a08:	ldr	r2, [sp, #84]	; 0x54
   12a0c:	ble	128d8 <__assert_fail@plt+0x1550>
   12a10:	ldrd	r4, [sp, #48]	; 0x30
   12a14:	adds	r4, r4, r0
   12a18:	adc	r5, r5, r0, asr #31
   12a1c:	strd	r4, [sp, #48]	; 0x30
   12a20:	b	128d8 <__assert_fail@plt+0x1550>
   12a24:	movw	r1, #31092	; 0x7974
   12a28:	movt	r1, #1
   12a2c:	mov	r2, #5
   12a30:	mov	r0, r3
   12a34:	bl	11124 <dcgettext@plt>
   12a38:	str	r0, [sp, #96]	; 0x60
   12a3c:	b	12184 <__assert_fail@plt+0xdfc>
   12a40:	ldr	fp, [sp, #84]	; 0x54
   12a44:	mov	r3, #1
   12a48:	ldr	sl, [sp, #100]	; 0x64
   12a4c:	str	r3, [sp, #44]	; 0x2c
   12a50:	ldrd	r0, [sp, #48]	; 0x30
   12a54:	ldrd	r8, [sp, #56]	; 0x38
   12a58:	ldrd	r2, [sp, #64]	; 0x40
   12a5c:	cmp	r3, r1
   12a60:	strd	r2, [sp, #32]
   12a64:	cmpeq	r2, r0
   12a68:	strdcc	r0, [sp, #32]
   12a6c:	adds	r8, r8, fp
   12a70:	adc	r9, r9, #0
   12a74:	ldrd	r0, [sp, #120]	; 0x78
   12a78:	b	12348 <__assert_fail@plt+0xfc0>
   12a7c:	bl	11280 <__errno_location@plt>
   12a80:	ldr	r6, [r0]
   12a84:	mov	r0, #0
   12a88:	mov	r1, #3
   12a8c:	str	r0, [sp, #44]	; 0x2c
   12a90:	ldr	r2, [sp, #96]	; 0x60
   12a94:	ldr	fp, [sp, #84]	; 0x54
   12a98:	ldr	sl, [sp, #100]	; 0x64
   12a9c:	bl	15b88 <__assert_fail@plt+0x4800>
   12aa0:	mov	r3, r0
   12aa4:	movw	r2, #33036	; 0x810c
   12aa8:	movt	r2, #1
   12aac:	mov	r0, #0
   12ab0:	mov	r1, r6
   12ab4:	bl	111c0 <error@plt>
   12ab8:	b	12a50 <__assert_fail@plt+0x16c8>
   12abc:	mov	r3, #1
   12ac0:	ldr	sl, [sp, #44]	; 0x2c
   12ac4:	str	r3, [sp, #44]	; 0x2c
   12ac8:	ldrd	r2, [sp, #32]
   12acc:	ldrd	r0, [sp, #120]	; 0x78
   12ad0:	cmp	r3, r9
   12ad4:	cmpeq	r2, r8
   12ad8:	strdcc	r8, [sp, #32]
   12adc:	adds	r8, r6, r4
   12ae0:	mov	r4, #0
   12ae4:	adc	r9, r7, #0
   12ae8:	mov	r5, r4
   12aec:	b	12348 <__assert_fail@plt+0xfc0>
   12af0:	bl	11280 <__errno_location@plt>
   12af4:	ldr	r5, [r0]
   12af8:	mov	r0, #0
   12afc:	mov	r1, #3
   12b00:	ldr	sl, [sp, #44]	; 0x2c
   12b04:	str	r0, [sp, #44]	; 0x2c
   12b08:	ldr	r2, [sp, #96]	; 0x60
   12b0c:	bl	15b88 <__assert_fail@plt+0x4800>
   12b10:	mov	r3, r0
   12b14:	movw	r2, #33036	; 0x810c
   12b18:	movt	r2, #1
   12b1c:	mov	r0, #0
   12b20:	mov	r1, r5
   12b24:	bl	111c0 <error@plt>
   12b28:	b	12ac8 <__assert_fail@plt+0x1740>
   12b2c:	bl	11280 <__errno_location@plt>
   12b30:	ldr	r4, [r0]
   12b34:	mov	r6, #0
   12b38:	mov	r7, #0
   12b3c:	mov	r8, r6
   12b40:	mov	r9, r7
   12b44:	mov	r1, #3
   12b48:	mov	r0, #0
   12b4c:	ldr	r2, [sp, #96]	; 0x60
   12b50:	strd	r8, [sp, #32]
   12b54:	mov	r5, r7
   12b58:	bl	15b88 <__assert_fail@plt+0x4800>
   12b5c:	mov	r3, r0
   12b60:	mov	r1, r4
   12b64:	mov	r0, #0
   12b68:	movw	r2, #33036	; 0x810c
   12b6c:	movt	r2, #1
   12b70:	mov	r4, r6
   12b74:	bl	111c0 <error@plt>
   12b78:	ldrd	r0, [sp, #120]	; 0x78
   12b7c:	b	12348 <__assert_fail@plt+0xfc0>
   12b80:	add	r2, r7, #8
   12b84:	mov	r0, #3
   12b88:	ldr	r1, [sp, #80]	; 0x50
   12b8c:	bl	11178 <__fxstat64@plt>
   12b90:	mov	r6, r0
   12b94:	str	r0, [r7]
   12b98:	b	121f8 <__assert_fail@plt+0xe70>
   12b9c:	mov	r1, #1
   12ba0:	mov	r3, #0
   12ba4:	ldr	r0, [sp, #80]	; 0x50
   12ba8:	mov	r2, #0
   12bac:	str	r1, [sp]
   12bb0:	bl	11190 <lseek64@plt>
   12bb4:	udiv	r3, r4, r8
   12bb8:	strd	r0, [sp, #32]
   12bbc:	mls	r8, r8, r3, r4
   12bc0:	cmp	r8, #0
   12bc4:	beq	12cd4 <__assert_fail@plt+0x194c>
   12bc8:	cmp	r4, r0
   12bcc:	mov	r2, r4
   12bd0:	sbcs	r1, r6, r1
   12bd4:	movlt	r0, #0
   12bd8:	movlt	r1, r0
   12bdc:	bge	12cc4 <__assert_fail@plt+0x193c>
   12be0:	mov	r2, #0
   12be4:	mov	r3, #0
   12be8:	mov	ip, #1
   12bec:	mov	r4, r2
   12bf0:	mov	r5, r3
   12bf4:	mov	r8, r2
   12bf8:	strd	r2, [sp, #32]
   12bfc:	mov	r9, r3
   12c00:	str	ip, [sp, #44]	; 0x2c
   12c04:	strd	r0, [sp, #120]	; 0x78
   12c08:	b	12348 <__assert_fail@plt+0xfc0>
   12c0c:	mov	r0, r4
   12c10:	mov	r1, r6
   12c14:	b	12be0 <__assert_fail@plt+0x1858>
   12c18:	mov	r3, #0
   12c1c:	mov	r1, #2
   12c20:	ldr	r0, [sp, #80]	; 0x50
   12c24:	mov	r2, #0
   12c28:	strd	r2, [sp]
   12c2c:	str	r1, [sp, #8]
   12c30:	bl	134d4 <__assert_fail@plt+0x214c>
   12c34:	ldr	r3, [sp, #92]	; 0x5c
   12c38:	eor	r3, r3, #1
   12c3c:	tst	r4, r3
   12c40:	beq	12c88 <__assert_fail@plt+0x1900>
   12c44:	ldrb	r3, [sl]
   12c48:	cmp	r3, #0
   12c4c:	beq	121ec <__assert_fail@plt+0xe64>
   12c50:	mov	r4, #0
   12c54:	mov	r5, #0
   12c58:	ldr	r1, [sp, #80]	; 0x50
   12c5c:	mov	r8, r4
   12c60:	mov	r9, r5
   12c64:	add	r3, sp, #120	; 0x78
   12c68:	add	r2, sp, #112	; 0x70
   12c6c:	ldr	r0, [sp, #96]	; 0x60
   12c70:	strd	r8, [sp, #32]
   12c74:	bl	12eb8 <__assert_fail@plt+0x1b30>
   12c78:	str	r0, [sp, #44]	; 0x2c
   12c7c:	ldr	r0, [sp, #120]	; 0x78
   12c80:	ldr	r1, [sp, #124]	; 0x7c
   12c84:	b	12348 <__assert_fail@plt+0xfc0>
   12c88:	ldr	r3, [sp, #92]	; 0x5c
   12c8c:	cmp	r3, #0
   12c90:	beq	12c50 <__assert_fail@plt+0x18c8>
   12c94:	b	12440 <__assert_fail@plt+0x10b8>
   12c98:	mov	r1, #2
   12c9c:	mov	r2, #0
   12ca0:	ldr	r0, [sp, #80]	; 0x50
   12ca4:	mov	r3, #0
   12ca8:	strd	r2, [sp]
   12cac:	str	r1, [sp, #8]
   12cb0:	bl	134d4 <__assert_fail@plt+0x214c>
   12cb4:	b	12c44 <__assert_fail@plt+0x18bc>
   12cb8:	mov	r8, sl
   12cbc:	mov	sl, r0
   12cc0:	b	128ac <__assert_fail@plt+0x1524>
   12cc4:	ldrd	r4, [sp, #32]
   12cc8:	subs	r0, r2, r4
   12ccc:	sbc	r1, r6, r5
   12cd0:	b	12be0 <__assert_fail@plt+0x1858>
   12cd4:	ldrd	r0, [sp, #32]
   12cd8:	b	12260 <__assert_fail@plt+0xed8>
   12cdc:	strd	r4, [sp, #-36]!	; 0xffffffdc
   12ce0:	mov	r5, #0
   12ce4:	mov	r4, #0
   12ce8:	strd	r6, [sp, #8]
   12cec:	strd	r8, [sp, #16]
   12cf0:	mov	r9, r5
   12cf4:	mov	r8, r4
   12cf8:	strd	sl, [sp, #24]
   12cfc:	str	lr, [sp, #32]
   12d00:	sub	sp, sp, #16384	; 0x4000
   12d04:	sub	sp, sp, #60	; 0x3c
   12d08:	strd	r4, [sp]
   12d0c:	add	r5, sp, #52	; 0x34
   12d10:	str	r1, [sp, #28]
   12d14:	strd	r2, [sp, #36]	; 0x24
   12d18:	movw	r3, #34953	; 0x8889
   12d1c:	movt	r3, #34952	; 0x8888
   12d20:	str	r3, [sp, #32]
   12d24:	str	r0, [sp, #44]	; 0x2c
   12d28:	mov	r2, #16384	; 0x4000
   12d2c:	mov	r1, r5
   12d30:	ldr	r0, [sp, #28]
   12d34:	bl	160f4 <__assert_fail@plt+0x4d6c>
   12d38:	cmp	r0, #0
   12d3c:	beq	12e40 <__assert_fail@plt+0x1ab8>
   12d40:	cmn	r0, #1
   12d44:	beq	12e78 <__assert_fail@plt+0x1af0>
   12d48:	ldr	r3, [sp, #32]
   12d4c:	add	fp, r5, r0
   12d50:	mov	r7, #0
   12d54:	umull	r3, r6, r3, r0
   12d58:	ldrd	r2, [sp]
   12d5c:	lsr	r6, r6, #3
   12d60:	adds	r2, r2, r0
   12d64:	adc	r3, r3, #0
   12d68:	cmp	r4, #0
   12d6c:	strd	r2, [sp]
   12d70:	bne	12dd8 <__assert_fail@plt+0x1a50>
   12d74:	cmp	fp, r5
   12d78:	beq	12eb0 <__assert_fail@plt+0x1b28>
   12d7c:	mov	r0, r8
   12d80:	mov	ip, r5
   12d84:	mov	r1, r9
   12d88:	ldrb	r3, [ip], #1
   12d8c:	sub	r3, r3, #10
   12d90:	clz	r3, r3
   12d94:	lsr	r3, r3, #5
   12d98:	adds	r0, r0, r3
   12d9c:	adc	r1, r1, #0
   12da0:	cmp	fp, ip
   12da4:	bne	12d88 <__assert_fail@plt+0x1a00>
   12da8:	subs	r3, r0, r8
   12dac:	mov	r8, r0
   12db0:	str	r3, [sp, #16]
   12db4:	sbc	r3, r1, r9
   12db8:	mov	r9, r1
   12dbc:	str	r3, [sp, #20]
   12dc0:	ldrd	r2, [sp, #16]
   12dc4:	cmp	r3, r7
   12dc8:	cmpeq	r2, r6
   12dcc:	movls	r4, #1
   12dd0:	movhi	r4, #0
   12dd4:	b	12d28 <__assert_fail@plt+0x19a0>
   12dd8:	mov	r3, #10
   12ddc:	mov	r4, r8
   12de0:	mov	sl, r9
   12de4:	strb	r3, [r5, r0]
   12de8:	mov	r0, r5
   12dec:	b	12df8 <__assert_fail@plt+0x1a70>
   12df0:	adds	r4, r4, #1
   12df4:	adc	sl, sl, #0
   12df8:	mov	r1, #10
   12dfc:	bl	11160 <rawmemchr@plt>
   12e00:	mov	r3, r0
   12e04:	add	r0, r0, #1
   12e08:	cmp	fp, r3
   12e0c:	bhi	12df0 <__assert_fail@plt+0x1a68>
   12e10:	subs	r3, r4, r8
   12e14:	mov	r8, r4
   12e18:	str	r3, [sp, #8]
   12e1c:	sbc	r3, sl, r9
   12e20:	mov	r9, sl
   12e24:	str	r3, [sp, #12]
   12e28:	ldrd	r2, [sp, #8]
   12e2c:	cmp	r3, r7
   12e30:	cmpeq	r2, r6
   12e34:	movls	r4, #1
   12e38:	movhi	r4, #0
   12e3c:	b	12d28 <__assert_fail@plt+0x19a0>
   12e40:	ldrd	r2, [sp]
   12e44:	mov	r0, #1
   12e48:	ldr	r1, [sp, #40]	; 0x28
   12e4c:	strd	r2, [r1]
   12e50:	ldr	r3, [sp, #36]	; 0x24
   12e54:	strd	r8, [r3]
   12e58:	add	sp, sp, #16384	; 0x4000
   12e5c:	add	sp, sp, #60	; 0x3c
   12e60:	ldrd	r4, [sp]
   12e64:	ldrd	r6, [sp, #8]
   12e68:	ldrd	r8, [sp, #16]
   12e6c:	ldrd	sl, [sp, #24]
   12e70:	add	sp, sp, #32
   12e74:	pop	{pc}		; (ldr pc, [sp], #4)
   12e78:	bl	11280 <__errno_location@plt>
   12e7c:	ldr	r4, [r0]
   12e80:	mov	r1, #3
   12e84:	mov	r0, #0
   12e88:	ldr	r2, [sp, #44]	; 0x2c
   12e8c:	bl	15b88 <__assert_fail@plt+0x4800>
   12e90:	mov	r3, r0
   12e94:	movw	r2, #33036	; 0x810c
   12e98:	movt	r2, #1
   12e9c:	mov	r0, #0
   12ea0:	mov	r1, r4
   12ea4:	bl	111c0 <error@plt>
   12ea8:	mov	r0, #0
   12eac:	b	12e58 <__assert_fail@plt+0x1ad0>
   12eb0:	mov	r4, #1
   12eb4:	b	12d28 <__assert_fail@plt+0x19a0>
   12eb8:	cmp	r3, #0
   12ebc:	cmpne	r2, #0
   12ec0:	beq	12ec8 <__assert_fail@plt+0x1b40>
   12ec4:	b	12cdc <__assert_fail@plt+0x1954>
   12ec8:	mov	r0, #0
   12ecc:	bx	lr
   12ed0:	subs	r4, r0, #0
   12ed4:	str	r7, [sp, #-8]!
   12ed8:	str	lr, [sp, #4]
   12edc:	sub	sp, sp, #56	; 0x38
   12ee0:	beq	12f28 <__assert_fail@plt+0x1ba0>
   12ee4:	movw	r3, #37256	; 0x9188
   12ee8:	movt	r3, #2
   12eec:	ldr	r5, [r3]
   12ef0:	mov	r2, #5
   12ef4:	movw	r1, #31112	; 0x7988
   12ef8:	movt	r1, #1
   12efc:	mov	r0, #0
   12f00:	bl	11124 <dcgettext@plt>
   12f04:	movw	r3, #37360	; 0x91f0
   12f08:	movt	r3, #2
   12f0c:	mov	r2, r0
   12f10:	mov	r1, #1
   12f14:	ldr	r3, [r3]
   12f18:	mov	r0, r5
   12f1c:	bl	112e0 <__fprintf_chk@plt>
   12f20:	mov	r0, r4
   12f24:	bl	11238 <exit@plt>
   12f28:	mov	r2, #5
   12f2c:	movw	r1, #31152	; 0x79b0
   12f30:	movt	r1, #1
   12f34:	movw	r5, #37268	; 0x9194
   12f38:	movt	r5, #2
   12f3c:	bl	11124 <dcgettext@plt>
   12f40:	movw	r3, #37360	; 0x91f0
   12f44:	movt	r3, #2
   12f48:	ldr	r3, [r3]
   12f4c:	mov	r1, r0
   12f50:	mov	r0, #1
   12f54:	mov	r2, r3
   12f58:	bl	112c8 <__printf_chk@plt>
   12f5c:	mov	r2, #5
   12f60:	movw	r1, #31224	; 0x79f8
   12f64:	movt	r1, #1
   12f68:	mov	r0, r4
   12f6c:	bl	11124 <dcgettext@plt>
   12f70:	ldr	r1, [r5]
   12f74:	bl	11070 <fputs_unlocked@plt>
   12f78:	mov	r2, #5
   12f7c:	movw	r1, #31420	; 0x7abc
   12f80:	movt	r1, #1
   12f84:	mov	r0, r4
   12f88:	bl	11124 <dcgettext@plt>
   12f8c:	ldr	r1, [r5]
   12f90:	bl	11070 <fputs_unlocked@plt>
   12f94:	mov	r2, #5
   12f98:	movw	r1, #31476	; 0x7af4
   12f9c:	movt	r1, #1
   12fa0:	mov	r0, r4
   12fa4:	bl	11124 <dcgettext@plt>
   12fa8:	ldr	r1, [r5]
   12fac:	bl	11070 <fputs_unlocked@plt>
   12fb0:	mov	r2, #5
   12fb4:	movw	r1, #31780	; 0x7c24
   12fb8:	movt	r1, #1
   12fbc:	mov	r0, r4
   12fc0:	bl	11124 <dcgettext@plt>
   12fc4:	ldr	r1, [r5]
   12fc8:	bl	11070 <fputs_unlocked@plt>
   12fcc:	mov	r2, #5
   12fd0:	movw	r1, #32084	; 0x7d54
   12fd4:	movt	r1, #1
   12fd8:	mov	r0, r4
   12fdc:	bl	11124 <dcgettext@plt>
   12fe0:	ldr	r1, [r5]
   12fe4:	bl	11070 <fputs_unlocked@plt>
   12fe8:	mov	r2, #5
   12fec:	movw	r1, #32132	; 0x7d84
   12ff0:	movt	r1, #1
   12ff4:	mov	r0, r4
   12ff8:	bl	11124 <dcgettext@plt>
   12ffc:	ldr	r1, [r5]
   13000:	bl	11070 <fputs_unlocked@plt>
   13004:	movw	r0, #30856	; 0x7888
   13008:	movt	r0, #1
   1300c:	ldr	ip, [r0, #8]
   13010:	ldrd	r2, [r0, #16]
   13014:	ldr	r6, [r0, #12]
   13018:	subs	r1, ip, #0
   1301c:	str	ip, [sp]
   13020:	ldrd	r8, [r0, #24]
   13024:	strd	r2, [sp, #8]
   13028:	ldrd	r2, [r0, #32]
   1302c:	str	r6, [sp, #4]
   13030:	ldrd	r6, [r0, #40]	; 0x28
   13034:	strd	r8, [sp, #16]
   13038:	ldrd	r8, [r0, #48]	; 0x30
   1303c:	strd	r2, [sp, #24]
   13040:	ldrd	r2, [r0, #56]	; 0x38
   13044:	strd	r6, [sp, #32]
   13048:	movwne	r7, #31108	; 0x7984
   1304c:	mov	r6, sp
   13050:	movtne	r7, #1
   13054:	strd	r8, [sp, #40]	; 0x28
   13058:	strd	r2, [sp, #48]	; 0x30
   1305c:	bne	13154 <__assert_fail@plt+0x1dcc>
   13060:	ldr	r6, [r6, #4]
   13064:	movw	r1, #32188	; 0x7dbc
   13068:	movt	r1, #1
   1306c:	mov	r2, #5
   13070:	cmp	r6, #0
   13074:	beq	13168 <__assert_fail@plt+0x1de0>
   13078:	mov	r0, #0
   1307c:	bl	11124 <dcgettext@plt>
   13080:	mov	r1, r0
   13084:	movw	r3, #32212	; 0x7dd4
   13088:	movt	r3, #1
   1308c:	movw	r2, #32252	; 0x7dfc
   13090:	movt	r2, #1
   13094:	mov	r0, #1
   13098:	bl	112c8 <__printf_chk@plt>
   1309c:	mov	r1, #0
   130a0:	mov	r0, #5
   130a4:	bl	11310 <setlocale@plt>
   130a8:	cmp	r0, #0
   130ac:	movweq	r7, #31108	; 0x7984
   130b0:	movteq	r7, #1
   130b4:	beq	130d8 <__assert_fail@plt+0x1d50>
   130b8:	movw	r1, #32268	; 0x7e0c
   130bc:	movt	r1, #1
   130c0:	mov	r2, #3
   130c4:	movw	r7, #31108	; 0x7984
   130c8:	movt	r7, #1
   130cc:	bl	11364 <strncmp@plt>
   130d0:	cmp	r0, #0
   130d4:	bne	13220 <__assert_fail@plt+0x1e98>
   130d8:	mov	r2, #5
   130dc:	movw	r1, #32344	; 0x7e58
   130e0:	movt	r1, #1
   130e4:	mov	r0, #0
   130e8:	bl	11124 <dcgettext@plt>
   130ec:	mov	r1, r0
   130f0:	movw	r3, #31108	; 0x7984
   130f4:	movt	r3, #1
   130f8:	movw	r2, #32212	; 0x7dd4
   130fc:	movt	r2, #1
   13100:	mov	r0, #1
   13104:	bl	112c8 <__printf_chk@plt>
   13108:	mov	r2, #5
   1310c:	movw	r1, #32372	; 0x7e74
   13110:	movt	r1, #1
   13114:	mov	r0, #0
   13118:	bl	11124 <dcgettext@plt>
   1311c:	movw	r2, #32832	; 0x8040
   13120:	movt	r2, #1
   13124:	cmp	r6, r7
   13128:	movw	r3, #32080	; 0x7d50
   1312c:	movt	r3, #1
   13130:	mov	r1, r0
   13134:	moveq	r3, r2
   13138:	mov	r2, r6
   1313c:	mov	r0, #1
   13140:	bl	112c8 <__printf_chk@plt>
   13144:	b	12f20 <__assert_fail@plt+0x1b98>
   13148:	ldr	r1, [r6, #8]!
   1314c:	cmp	r1, #0
   13150:	beq	13060 <__assert_fail@plt+0x1cd8>
   13154:	mov	r0, r7
   13158:	bl	11088 <strcmp@plt>
   1315c:	cmp	r0, #0
   13160:	bne	13148 <__assert_fail@plt+0x1dc0>
   13164:	b	13060 <__assert_fail@plt+0x1cd8>
   13168:	mov	r0, r6
   1316c:	bl	11124 <dcgettext@plt>
   13170:	mov	r1, r0
   13174:	movw	r3, #32212	; 0x7dd4
   13178:	movt	r3, #1
   1317c:	movw	r2, #32252	; 0x7dfc
   13180:	movt	r2, #1
   13184:	mov	r0, #1
   13188:	bl	112c8 <__printf_chk@plt>
   1318c:	mov	r1, r6
   13190:	mov	r0, #5
   13194:	bl	11310 <setlocale@plt>
   13198:	cmp	r0, #0
   1319c:	beq	131b8 <__assert_fail@plt+0x1e30>
   131a0:	movw	r1, #32268	; 0x7e0c
   131a4:	movt	r1, #1
   131a8:	mov	r2, #3
   131ac:	bl	11364 <strncmp@plt>
   131b0:	cmp	r0, #0
   131b4:	bne	13214 <__assert_fail@plt+0x1e8c>
   131b8:	mov	r2, #5
   131bc:	movw	r1, #32344	; 0x7e58
   131c0:	movt	r1, #1
   131c4:	mov	r0, #0
   131c8:	bl	11124 <dcgettext@plt>
   131cc:	mov	r1, r0
   131d0:	movw	r3, #31108	; 0x7984
   131d4:	movt	r3, #1
   131d8:	movw	r2, #32212	; 0x7dd4
   131dc:	movt	r2, #1
   131e0:	mov	r0, #1
   131e4:	bl	112c8 <__printf_chk@plt>
   131e8:	movw	r1, #32372	; 0x7e74
   131ec:	movt	r1, #1
   131f0:	mov	r2, #5
   131f4:	mov	r0, #0
   131f8:	bl	11124 <dcgettext@plt>
   131fc:	movw	r6, #31108	; 0x7984
   13200:	movt	r6, #1
   13204:	movw	r3, #32832	; 0x8040
   13208:	movt	r3, #1
   1320c:	mov	r1, r0
   13210:	b	13138 <__assert_fail@plt+0x1db0>
   13214:	movw	r7, #31108	; 0x7984
   13218:	movt	r7, #1
   1321c:	mov	r6, r7
   13220:	mov	r2, #5
   13224:	movw	r1, #32272	; 0x7e10
   13228:	movt	r1, #1
   1322c:	mov	r0, #0
   13230:	bl	11124 <dcgettext@plt>
   13234:	ldr	r1, [r5]
   13238:	bl	11070 <fputs_unlocked@plt>
   1323c:	b	130d8 <__assert_fail@plt+0x1d50>
   13240:	str	r4, [sp, #-8]!
   13244:	mov	r4, r0
   13248:	mov	r0, #24
   1324c:	str	lr, [sp, #4]
   13250:	bl	16c3c <__assert_fail@plt+0x58b4>
   13254:	cmp	r0, #0
   13258:	beq	1326c <__assert_fail@plt+0x1ee4>
   1325c:	mov	r3, #0
   13260:	str	r3, [r0]
   13264:	str	r4, [r0, #16]
   13268:	str	r4, [r0, #20]
   1326c:	ldr	r4, [sp]
   13270:	add	sp, sp, #4
   13274:	pop	{pc}		; (ldr pc, [sp], #4)
   13278:	str	r4, [sp, #-8]!
   1327c:	mov	r4, r0
   13280:	mov	r0, #24
   13284:	str	lr, [sp, #4]
   13288:	bl	16c3c <__assert_fail@plt+0x58b4>
   1328c:	cmp	r0, #0
   13290:	beq	132ac <__assert_fail@plt+0x1f24>
   13294:	mov	r3, #0
   13298:	str	r4, [r0]
   1329c:	str	r3, [r0, #4]
   132a0:	str	r3, [r0, #8]
   132a4:	str	r3, [r0, #12]
   132a8:	str	r3, [r0, #16]
   132ac:	ldr	r4, [sp]
   132b0:	add	sp, sp, #4
   132b4:	pop	{pc}		; (ldr pc, [sp], #4)
   132b8:	ldr	r3, [r0]
   132bc:	cmp	r3, #0
   132c0:	beq	1331c <__assert_fail@plt+0x1f94>
   132c4:	mov	r2, #0
   132c8:	strd	r4, [sp, #-16]!
   132cc:	mov	r5, r1
   132d0:	mov	r4, r0
   132d4:	add	r1, r0, #12
   132d8:	str	r6, [sp, #8]
   132dc:	add	r0, r0, #8
   132e0:	str	lr, [sp, #12]
   132e4:	bl	1134c <getdelim@plt>
   132e8:	cmp	r0, #0
   132ec:	blt	1334c <__assert_fail@plt+0x1fc4>
   132f0:	mov	r3, #1
   132f4:	ldr	r2, [r4, #4]
   132f8:	str	r3, [r5]
   132fc:	ldr	r3, [r4, #8]
   13300:	add	r2, r2, #1
   13304:	str	r2, [r4, #4]
   13308:	ldrd	r4, [sp]
   1330c:	mov	r0, r3
   13310:	ldr	r6, [sp, #8]
   13314:	add	sp, sp, #12
   13318:	pop	{pc}		; (ldr pc, [sp], #4)
   1331c:	ldr	r2, [r0, #20]
   13320:	ldr	r3, [r2]
   13324:	cmp	r3, #0
   13328:	moveq	r2, #2
   1332c:	streq	r2, [r1]
   13330:	beq	13344 <__assert_fail@plt+0x1fbc>
   13334:	add	r2, r2, #4
   13338:	mov	ip, #1
   1333c:	str	ip, [r1]
   13340:	str	r2, [r0, #20]
   13344:	mov	r0, r3
   13348:	bx	lr
   1334c:	ldr	r0, [r4]
   13350:	bl	11244 <feof@plt>
   13354:	cmp	r0, #0
   13358:	mov	r3, #0
   1335c:	movne	r2, #2
   13360:	moveq	r2, #4
   13364:	str	r2, [r5]
   13368:	b	13308 <__assert_fail@plt+0x1f80>
   1336c:	ldr	r3, [r0]
   13370:	cmp	r3, #0
   13374:	beq	13380 <__assert_fail@plt+0x1ff8>
   13378:	ldr	r0, [r0, #4]
   1337c:	bx	lr
   13380:	ldr	r3, [r0, #16]
   13384:	ldr	r0, [r0, #20]
   13388:	sub	r0, r0, r3
   1338c:	asr	r0, r0, #2
   13390:	bx	lr
   13394:	ldr	r3, [r0]
   13398:	str	r4, [sp, #-8]!
   1339c:	mov	r4, r0
   133a0:	str	lr, [sp, #4]
   133a4:	cmp	r3, #0
   133a8:	beq	133b4 <__assert_fail@plt+0x202c>
   133ac:	ldr	r0, [r0, #8]
   133b0:	bl	1363c <__assert_fail@plt+0x22b4>
   133b4:	mov	r0, r4
   133b8:	ldr	r4, [sp]
   133bc:	ldr	lr, [sp, #4]
   133c0:	add	sp, sp, #8
   133c4:	b	1363c <__assert_fail@plt+0x22b4>
   133c8:	movw	r3, #37352	; 0x91e8
   133cc:	movt	r3, #2
   133d0:	str	r0, [r3]
   133d4:	bx	lr
   133d8:	movw	r3, #37352	; 0x91e8
   133dc:	movt	r3, #2
   133e0:	strb	r0, [r3, #4]
   133e4:	bx	lr
   133e8:	movw	r3, #37268	; 0x9194
   133ec:	movt	r3, #2
   133f0:	strd	r4, [sp, #-16]!
   133f4:	ldr	r0, [r3]
   133f8:	str	r6, [sp, #8]
   133fc:	str	lr, [sp, #12]
   13400:	sub	sp, sp, #8
   13404:	bl	16cd0 <__assert_fail@plt+0x5948>
   13408:	cmp	r0, #0
   1340c:	beq	13438 <__assert_fail@plt+0x20b0>
   13410:	movw	r4, #37352	; 0x91e8
   13414:	movt	r4, #2
   13418:	ldrb	r6, [r4, #4]
   1341c:	bl	11280 <__errno_location@plt>
   13420:	mov	r5, r0
   13424:	cmp	r6, #0
   13428:	beq	13464 <__assert_fail@plt+0x20dc>
   1342c:	ldr	r3, [r0]
   13430:	cmp	r3, #32
   13434:	bne	13464 <__assert_fail@plt+0x20dc>
   13438:	movw	r3, #37256	; 0x9188
   1343c:	movt	r3, #2
   13440:	ldr	r0, [r3]
   13444:	bl	16cd0 <__assert_fail@plt+0x5948>
   13448:	cmp	r0, #0
   1344c:	bne	134ac <__assert_fail@plt+0x2124>
   13450:	add	sp, sp, #8
   13454:	ldrd	r4, [sp]
   13458:	ldr	r6, [sp, #8]
   1345c:	add	sp, sp, #12
   13460:	pop	{pc}		; (ldr pc, [sp], #4)
   13464:	movw	r1, #33020	; 0x80fc
   13468:	movt	r1, #1
   1346c:	mov	r2, #5
   13470:	mov	r0, #0
   13474:	bl	11124 <dcgettext@plt>
   13478:	mov	r6, r0
   1347c:	ldr	r0, [r4]
   13480:	cmp	r0, #0
   13484:	beq	134bc <__assert_fail@plt+0x2134>
   13488:	ldr	r4, [r5]
   1348c:	bl	15b74 <__assert_fail@plt+0x47ec>
   13490:	mov	r3, r0
   13494:	movw	r2, #33032	; 0x8108
   13498:	movt	r2, #1
   1349c:	mov	r0, #0
   134a0:	str	r6, [sp]
   134a4:	mov	r1, r4
   134a8:	bl	111c0 <error@plt>
   134ac:	movw	r3, #37164	; 0x912c
   134b0:	movt	r3, #2
   134b4:	ldr	r0, [r3]
   134b8:	bl	110e8 <_exit@plt>
   134bc:	mov	r3, r6
   134c0:	movw	r2, #33036	; 0x810c
   134c4:	movt	r2, #1
   134c8:	ldr	r1, [r5]
   134cc:	bl	111c0 <error@plt>
   134d0:	b	134ac <__assert_fail@plt+0x2124>
   134d4:	b	11094 <posix_fadvise64@plt>
   134d8:	cmp	r0, #0
   134dc:	bxeq	lr
   134e0:	str	r4, [sp, #-16]!
   134e4:	mov	r4, r1
   134e8:	strd	r6, [sp, #4]
   134ec:	mov	r6, #0
   134f0:	mov	r7, #0
   134f4:	str	lr, [sp, #12]
   134f8:	sub	sp, sp, #16
   134fc:	bl	112d4 <fileno@plt>
   13500:	mov	r2, r6
   13504:	mov	r3, r7
   13508:	strd	r6, [sp]
   1350c:	str	r4, [sp, #8]
   13510:	bl	11094 <posix_fadvise64@plt>
   13514:	add	sp, sp, #16
   13518:	ldr	r4, [sp]
   1351c:	ldrd	r6, [sp, #4]
   13520:	add	sp, sp, #12
   13524:	pop	{pc}		; (ldr pc, [sp], #4)
   13528:	strd	r4, [sp, #-12]!
   1352c:	mov	r4, r0
   13530:	str	lr, [sp, #8]
   13534:	sub	sp, sp, #12
   13538:	bl	112d4 <fileno@plt>
   1353c:	cmp	r0, #0
   13540:	mov	r0, r4
   13544:	blt	135c8 <__assert_fail@plt+0x2240>
   13548:	bl	11208 <__freading@plt>
   1354c:	cmp	r0, #0
   13550:	bne	13594 <__assert_fail@plt+0x220c>
   13554:	mov	r0, r4
   13558:	bl	135dc <__assert_fail@plt+0x2254>
   1355c:	cmp	r0, #0
   13560:	beq	135c4 <__assert_fail@plt+0x223c>
   13564:	bl	11280 <__errno_location@plt>
   13568:	mov	r5, r0
   1356c:	mov	r0, r4
   13570:	ldr	r4, [r5]
   13574:	bl	112ec <fclose@plt>
   13578:	cmp	r4, #0
   1357c:	mvnne	r0, #0
   13580:	strne	r4, [r5]
   13584:	add	sp, sp, #12
   13588:	ldrd	r4, [sp]
   1358c:	add	sp, sp, #8
   13590:	pop	{pc}		; (ldr pc, [sp], #4)
   13594:	mov	r0, r4
   13598:	bl	112d4 <fileno@plt>
   1359c:	mov	r1, #1
   135a0:	mov	r2, #0
   135a4:	mov	r3, #0
   135a8:	str	r1, [sp]
   135ac:	bl	11190 <lseek64@plt>
   135b0:	mvn	r3, #0
   135b4:	mvn	r2, #0
   135b8:	cmp	r1, r3
   135bc:	cmpeq	r0, r2
   135c0:	bne	13554 <__assert_fail@plt+0x21cc>
   135c4:	mov	r0, r4
   135c8:	add	sp, sp, #12
   135cc:	ldrd	r4, [sp]
   135d0:	ldr	lr, [sp, #8]
   135d4:	add	sp, sp, #12
   135d8:	b	112ec <fclose@plt>
   135dc:	str	r4, [sp, #-8]!
   135e0:	subs	r4, r0, #0
   135e4:	str	lr, [sp, #4]
   135e8:	sub	sp, sp, #8
   135ec:	beq	13608 <__assert_fail@plt+0x2280>
   135f0:	bl	11208 <__freading@plt>
   135f4:	cmp	r0, #0
   135f8:	beq	13608 <__assert_fail@plt+0x2280>
   135fc:	ldr	r3, [r4]
   13600:	tst	r3, #256	; 0x100
   13604:	bne	13620 <__assert_fail@plt+0x2298>
   13608:	mov	r0, r4
   1360c:	add	sp, sp, #8
   13610:	ldr	r4, [sp]
   13614:	ldr	lr, [sp, #4]
   13618:	add	sp, sp, #8
   1361c:	b	110ac <fflush@plt>
   13620:	mov	r1, #1
   13624:	mov	r2, #0
   13628:	mov	r3, #0
   1362c:	mov	r0, r4
   13630:	str	r1, [sp]
   13634:	bl	1369c <__assert_fail@plt+0x2314>
   13638:	b	13608 <__assert_fail@plt+0x2280>
   1363c:	strd	r4, [sp, #-12]!
   13640:	mov	r5, r0
   13644:	str	lr, [sp, #8]
   13648:	sub	sp, sp, #12
   1364c:	bl	11280 <__errno_location@plt>
   13650:	mov	r4, r0
   13654:	mov	r2, #0
   13658:	ldr	r3, [r4]
   1365c:	mov	r0, r5
   13660:	str	r2, [r4]
   13664:	str	r3, [sp]
   13668:	str	r3, [sp, #4]
   1366c:	bl	110d0 <free@plt>
   13670:	ldr	r3, [r4]
   13674:	add	r2, sp, #8
   13678:	clz	r3, r3
   1367c:	lsr	r3, r3, #5
   13680:	add	r3, r2, r3, lsl #2
   13684:	ldr	r3, [r3, #-8]
   13688:	str	r3, [r4]
   1368c:	add	sp, sp, #12
   13690:	ldrd	r4, [sp]
   13694:	add	sp, sp, #8
   13698:	pop	{pc}		; (ldr pc, [sp], #4)
   1369c:	strd	r4, [sp, #-24]!	; 0xffffffe8
   136a0:	mov	r4, r0
   136a4:	ldr	ip, [r0, #4]
   136a8:	strd	r6, [sp, #8]
   136ac:	str	lr, [sp, #20]
   136b0:	ldr	lr, [r0, #8]
   136b4:	str	r8, [sp, #16]
   136b8:	sub	sp, sp, #8
   136bc:	ldr	r5, [sp, #32]
   136c0:	cmp	lr, ip
   136c4:	beq	136ec <__assert_fail@plt+0x2364>
   136c8:	mov	r0, r4
   136cc:	str	r5, [sp, #32]
   136d0:	add	sp, sp, #8
   136d4:	ldrd	r4, [sp]
   136d8:	ldrd	r6, [sp, #8]
   136dc:	ldr	r8, [sp, #16]
   136e0:	ldr	lr, [sp, #20]
   136e4:	add	sp, sp, #24
   136e8:	b	112f8 <fseeko64@plt>
   136ec:	ldr	ip, [r0, #16]
   136f0:	ldr	lr, [r0, #20]
   136f4:	cmp	lr, ip
   136f8:	bne	136c8 <__assert_fail@plt+0x2340>
   136fc:	ldr	r8, [r0, #36]	; 0x24
   13700:	cmp	r8, #0
   13704:	bne	136c8 <__assert_fail@plt+0x2340>
   13708:	mov	r6, r2
   1370c:	mov	r7, r3
   13710:	bl	112d4 <fileno@plt>
   13714:	mov	r2, r6
   13718:	mov	r3, r7
   1371c:	str	r5, [sp]
   13720:	bl	11190 <lseek64@plt>
   13724:	mvn	r3, #0
   13728:	mvn	r2, #0
   1372c:	cmp	r1, r3
   13730:	cmpeq	r0, r2
   13734:	beq	13764 <__assert_fail@plt+0x23dc>
   13738:	ldr	r3, [r4]
   1373c:	strd	r0, [r4, #80]	; 0x50
   13740:	bic	r3, r3, #16
   13744:	str	r3, [r4]
   13748:	mov	r0, r8
   1374c:	add	sp, sp, #8
   13750:	ldrd	r4, [sp]
   13754:	ldrd	r6, [sp, #8]
   13758:	ldr	r8, [sp, #16]
   1375c:	add	sp, sp, #20
   13760:	pop	{pc}		; (ldr pc, [sp], #4)
   13764:	mvn	r8, #0
   13768:	b	13748 <__assert_fail@plt+0x23c0>
   1376c:	mov	r3, #0
   13770:	strd	r4, [sp, #-16]!
   13774:	mov	r4, r0
   13778:	mov	r5, r1
   1377c:	str	r6, [sp, #8]
   13780:	add	r6, r2, #20
   13784:	str	lr, [sp, #12]
   13788:	strb	r3, [r2, #20]
   1378c:	mov	r0, r4
   13790:	mov	r1, r5
   13794:	mov	r2, #10
   13798:	mov	r3, #0
   1379c:	bl	1768c <_obstack_memory_used@@Base+0x4f0>
   137a0:	add	ip, r2, #48	; 0x30
   137a4:	mov	r0, r4
   137a8:	mov	r1, r5
   137ac:	mov	r2, #10
   137b0:	mov	r3, #0
   137b4:	strb	ip, [r6, #-1]!
   137b8:	bl	1768c <_obstack_memory_used@@Base+0x4f0>
   137bc:	cmp	r5, #0
   137c0:	mov	r5, r1
   137c4:	cmpeq	r4, #9
   137c8:	mov	r4, r0
   137cc:	bhi	1378c <__assert_fail@plt+0x2404>
   137d0:	mov	r0, r6
   137d4:	ldrd	r4, [sp]
   137d8:	ldr	r6, [sp, #8]
   137dc:	add	sp, sp, #12
   137e0:	pop	{pc}		; (ldr pc, [sp], #4)
   137e4:	str	r4, [sp, #-8]!
   137e8:	mov	r4, r0
   137ec:	str	lr, [sp, #4]
   137f0:	bl	110b8 <wcwidth@plt>
   137f4:	cmp	r0, #0
   137f8:	bge	1380c <__assert_fail@plt+0x2484>
   137fc:	mov	r0, r4
   13800:	bl	11154 <iswcntrl@plt>
   13804:	clz	r0, r0
   13808:	lsr	r0, r0, #5
   1380c:	ldr	r4, [sp]
   13810:	add	sp, sp, #4
   13814:	pop	{pc}		; (ldr pc, [sp], #4)
   13818:	mov	r3, r1
   1381c:	strd	r4, [sp, #-16]!
   13820:	mov	r4, r1
   13824:	ldr	r2, [r1, #4]
   13828:	mov	r5, r0
   1382c:	ldr	r1, [r3], #16
   13830:	str	r6, [sp, #8]
   13834:	str	lr, [sp, #12]
   13838:	cmp	r1, r3
   1383c:	strne	r1, [r0]
   13840:	beq	1386c <__assert_fail@plt+0x24e4>
   13844:	ldrb	r3, [r4, #8]
   13848:	str	r2, [r5, #4]
   1384c:	ldr	r6, [sp, #8]
   13850:	cmp	r3, #0
   13854:	strb	r3, [r5, #8]
   13858:	ldrne	r3, [r4, #12]
   1385c:	strne	r3, [r5, #12]
   13860:	ldrd	r4, [sp]
   13864:	add	sp, sp, #12
   13868:	pop	{pc}		; (ldr pc, [sp], #4)
   1386c:	add	r3, r0, #16
   13870:	mov	r0, r3
   13874:	bl	110f4 <memcpy@plt>
   13878:	ldr	r2, [r4, #4]
   1387c:	str	r0, [r5]
   13880:	b	13844 <__assert_fail@plt+0x24bc>
   13884:	lsr	r2, r0, #5
   13888:	movw	r3, #33040	; 0x8110
   1388c:	movt	r3, #1
   13890:	and	r0, r0, #31
   13894:	ldr	r3, [r3, r2, lsl #2]
   13898:	lsr	r0, r3, r0
   1389c:	and	r0, r0, #1
   138a0:	bx	lr
   138a4:	strd	r4, [sp, #-20]!	; 0xffffffec
   138a8:	mov	r5, r2
   138ac:	strd	r6, [sp, #8]
   138b0:	subs	r6, r0, #0
   138b4:	mov	r7, r1
   138b8:	str	lr, [sp, #16]
   138bc:	sub	sp, sp, #12
   138c0:	addeq	r6, sp, #4
   138c4:	mov	r0, r6
   138c8:	bl	111b4 <mbrtowc@plt>
   138cc:	cmp	r5, #0
   138d0:	cmnne	r0, #3
   138d4:	mov	r4, r0
   138d8:	bhi	138f4 <__assert_fail@plt+0x256c>
   138dc:	mov	r0, r4
   138e0:	add	sp, sp, #12
   138e4:	ldrd	r4, [sp]
   138e8:	ldrd	r6, [sp, #8]
   138ec:	add	sp, sp, #16
   138f0:	pop	{pc}		; (ldr pc, [sp], #4)
   138f4:	mov	r0, #0
   138f8:	bl	16d58 <__assert_fail@plt+0x59d0>
   138fc:	cmp	r0, #0
   13900:	bne	138dc <__assert_fail@plt+0x2554>
   13904:	ldrb	r3, [r7]
   13908:	mov	r4, #1
   1390c:	str	r3, [r6]
   13910:	b	138dc <__assert_fail@plt+0x2554>
   13914:	andeq	r0, r0, r0
   13918:	mov	r0, #85	; 0x55
   1391c:	str	r4, [sp, #-8]!
   13920:	str	lr, [sp, #4]
   13924:	sub	sp, sp, #64	; 0x40
   13928:	bl	11130 <sysconf@plt>
   1392c:	mov	r4, r0
   13930:	mov	r0, #30
   13934:	bl	11130 <sysconf@plt>
   13938:	cmp	r4, #0
   1393c:	cmpge	r0, #0
   13940:	bge	1398c <__assert_fail@plt+0x2604>
   13944:	mov	r0, sp
   13948:	bl	111e4 <sysinfo@plt>
   1394c:	cmp	r0, #0
   13950:	beq	13968 <__assert_fail@plt+0x25e0>
   13954:	vldr	d0, [pc, #84]	; 139b0 <__assert_fail@plt+0x2628>
   13958:	add	sp, sp, #64	; 0x40
   1395c:	ldr	r4, [sp]
   13960:	add	sp, sp, #4
   13964:	pop	{pc}		; (ldr pc, [sp], #4)
   13968:	vldr	s15, [sp, #16]
   1396c:	vcvt.f64.u32	d0, s15
   13970:	vldr	s15, [sp, #52]	; 0x34
   13974:	vcvt.f64.u32	d7, s15
   13978:	vmul.f64	d0, d0, d7
   1397c:	add	sp, sp, #64	; 0x40
   13980:	ldr	r4, [sp]
   13984:	add	sp, sp, #4
   13988:	pop	{pc}		; (ldr pc, [sp], #4)
   1398c:	vmov	s15, r4
   13990:	vcvt.f64.s32	d0, s15
   13994:	vmov	s15, r0
   13998:	vcvt.f64.s32	d7, s15
   1399c:	vmul.f64	d0, d0, d7
   139a0:	add	sp, sp, #64	; 0x40
   139a4:	ldr	r4, [sp]
   139a8:	add	sp, sp, #4
   139ac:	pop	{pc}		; (ldr pc, [sp], #4)
   139b0:	andeq	r0, r0, r0
   139b4:	orrsmi	r0, r0, r0
   139b8:	mov	r0, #86	; 0x56
   139bc:	str	r4, [sp, #-8]!
   139c0:	str	lr, [sp, #4]
   139c4:	sub	sp, sp, #64	; 0x40
   139c8:	bl	11130 <sysconf@plt>
   139cc:	mov	r4, r0
   139d0:	mov	r0, #30
   139d4:	bl	11130 <sysconf@plt>
   139d8:	cmp	r0, #0
   139dc:	cmpge	r4, #0
   139e0:	bge	13a40 <__assert_fail@plt+0x26b8>
   139e4:	mov	r0, sp
   139e8:	bl	111e4 <sysinfo@plt>
   139ec:	cmp	r0, #0
   139f0:	bne	13a24 <__assert_fail@plt+0x269c>
   139f4:	vldr	s15, [sp, #20]
   139f8:	vcvt.f64.u32	d0, s15
   139fc:	vldr	s15, [sp, #28]
   13a00:	vcvt.f64.u32	d6, s15
   13a04:	vldr	s15, [sp, #52]	; 0x34
   13a08:	vadd.f64	d0, d0, d6
   13a0c:	vcvt.f64.u32	d7, s15
   13a10:	vmul.f64	d0, d0, d7
   13a14:	add	sp, sp, #64	; 0x40
   13a18:	ldr	r4, [sp]
   13a1c:	add	sp, sp, #4
   13a20:	pop	{pc}		; (ldr pc, [sp], #4)
   13a24:	bl	13918 <__assert_fail@plt+0x2590>
   13a28:	vldr	d7, [pc, #56]	; 13a68 <__assert_fail@plt+0x26e0>
   13a2c:	vmul.f64	d0, d0, d7
   13a30:	add	sp, sp, #64	; 0x40
   13a34:	ldr	r4, [sp]
   13a38:	add	sp, sp, #4
   13a3c:	pop	{pc}		; (ldr pc, [sp], #4)
   13a40:	vmov	s15, r4
   13a44:	vcvt.f64.s32	d0, s15
   13a48:	vmov	s15, r0
   13a4c:	vcvt.f64.s32	d7, s15
   13a50:	vmul.f64	d0, d0, d7
   13a54:	add	sp, sp, #64	; 0x40
   13a58:	ldr	r4, [sp]
   13a5c:	add	sp, sp, #4
   13a60:	pop	{pc}		; (ldr pc, [sp], #4)
   13a64:	nop	{0}
   13a68:	andeq	r0, r0, r0
   13a6c:	svccc	0x00d00000
   13a70:	strd	r4, [sp, #-16]!
   13a74:	subs	r4, r0, #0
   13a78:	str	r6, [sp, #8]
   13a7c:	str	lr, [sp, #12]
   13a80:	beq	13b18 <__assert_fail@plt+0x2790>
   13a84:	mov	r1, #47	; 0x2f
   13a88:	bl	1131c <strrchr@plt>
   13a8c:	subs	r5, r0, #0
   13a90:	beq	13af0 <__assert_fail@plt+0x2768>
   13a94:	add	r6, r5, #1
   13a98:	sub	r3, r6, r4
   13a9c:	cmp	r3, #6
   13aa0:	ble	13af0 <__assert_fail@plt+0x2768>
   13aa4:	movw	r1, #33128	; 0x8168
   13aa8:	movt	r1, #1
   13aac:	mov	r2, #7
   13ab0:	sub	r0, r5, #6
   13ab4:	bl	11364 <strncmp@plt>
   13ab8:	cmp	r0, #0
   13abc:	bne	13af0 <__assert_fail@plt+0x2768>
   13ac0:	movw	r1, #33136	; 0x8170
   13ac4:	movt	r1, #1
   13ac8:	mov	r2, #3
   13acc:	mov	r0, r6
   13ad0:	bl	11364 <strncmp@plt>
   13ad4:	cmp	r0, #0
   13ad8:	movne	r4, r6
   13adc:	bne	13af0 <__assert_fail@plt+0x2768>
   13ae0:	add	r4, r5, #4
   13ae4:	movw	r3, #37240	; 0x9178
   13ae8:	movt	r3, #2
   13aec:	str	r4, [r3]
   13af0:	movw	r2, #37360	; 0x91f0
   13af4:	movt	r2, #2
   13af8:	ldr	r6, [sp, #8]
   13afc:	movw	r3, #37244	; 0x917c
   13b00:	movt	r3, #2
   13b04:	str	r4, [r2]
   13b08:	str	r4, [r3]
   13b0c:	ldrd	r4, [sp]
   13b10:	add	sp, sp, #12
   13b14:	pop	{pc}		; (ldr pc, [sp], #4)
   13b18:	movw	r3, #37256	; 0x9188
   13b1c:	movt	r3, #2
   13b20:	movw	r0, #33072	; 0x8130
   13b24:	movt	r0, #1
   13b28:	ldr	r3, [r3]
   13b2c:	mov	r2, #55	; 0x37
   13b30:	mov	r1, #1
   13b34:	bl	11184 <fwrite@plt>
   13b38:	bl	11370 <abort@plt>
   13b3c:	strd	r4, [sp, #-16]!
   13b40:	mov	r4, #0
   13b44:	mov	r5, #0
   13b48:	cmp	r1, #10
   13b4c:	str	r6, [sp, #8]
   13b50:	strd	r4, [r0]
   13b54:	strd	r4, [r0, #8]
   13b58:	str	lr, [sp, #12]
   13b5c:	strd	r4, [r0, #16]
   13b60:	strd	r4, [r0, #24]
   13b64:	strd	r4, [r0, #32]
   13b68:	strd	r4, [r0, #40]	; 0x28
   13b6c:	beq	13b84 <__assert_fail@plt+0x27fc>
   13b70:	ldrd	r4, [sp]
   13b74:	str	r1, [r0]
   13b78:	ldr	r6, [sp, #8]
   13b7c:	add	sp, sp, #12
   13b80:	pop	{pc}		; (ldr pc, [sp], #4)
   13b84:	bl	11370 <abort@plt>
   13b88:	mov	r2, #5
   13b8c:	strd	r4, [sp, #-16]!
   13b90:	mov	r5, r0
   13b94:	str	r6, [sp, #8]
   13b98:	mov	r6, r1
   13b9c:	mov	r1, r0
   13ba0:	mov	r0, #0
   13ba4:	str	lr, [sp, #12]
   13ba8:	bl	11124 <dcgettext@plt>
   13bac:	cmp	r5, r0
   13bb0:	mov	r4, r0
   13bb4:	beq	13bcc <__assert_fail@plt+0x2844>
   13bb8:	mov	r0, r4
   13bbc:	ldrd	r4, [sp]
   13bc0:	ldr	r6, [sp, #8]
   13bc4:	add	sp, sp, #12
   13bc8:	pop	{pc}		; (ldr pc, [sp], #4)
   13bcc:	bl	16db0 <__assert_fail@plt+0x5a28>
   13bd0:	ldrb	r3, [r0]
   13bd4:	bic	r3, r3, #32
   13bd8:	cmp	r3, #85	; 0x55
   13bdc:	bne	13c44 <__assert_fail@plt+0x28bc>
   13be0:	ldrb	r3, [r0, #1]
   13be4:	bic	r3, r3, #32
   13be8:	cmp	r3, #84	; 0x54
   13bec:	bne	13cc4 <__assert_fail@plt+0x293c>
   13bf0:	ldrb	r3, [r0, #2]
   13bf4:	bic	r3, r3, #32
   13bf8:	cmp	r3, #70	; 0x46
   13bfc:	bne	13cc4 <__assert_fail@plt+0x293c>
   13c00:	ldrb	r3, [r0, #3]
   13c04:	cmp	r3, #45	; 0x2d
   13c08:	bne	13cc4 <__assert_fail@plt+0x293c>
   13c0c:	ldrb	r3, [r0, #4]
   13c10:	cmp	r3, #56	; 0x38
   13c14:	bne	13cc4 <__assert_fail@plt+0x293c>
   13c18:	ldrb	r3, [r0, #5]
   13c1c:	cmp	r3, #0
   13c20:	bne	13cc4 <__assert_fail@plt+0x293c>
   13c24:	ldrb	r2, [r4]
   13c28:	movw	r3, #33228	; 0x81cc
   13c2c:	movt	r3, #1
   13c30:	movw	r4, #33240	; 0x81d8
   13c34:	movt	r4, #1
   13c38:	cmp	r2, #96	; 0x60
   13c3c:	movne	r4, r3
   13c40:	b	13bb8 <__assert_fail@plt+0x2830>
   13c44:	cmp	r3, #71	; 0x47
   13c48:	bne	13cc4 <__assert_fail@plt+0x293c>
   13c4c:	ldrb	r3, [r0, #1]
   13c50:	bic	r3, r3, #32
   13c54:	cmp	r3, #66	; 0x42
   13c58:	bne	13cc4 <__assert_fail@plt+0x293c>
   13c5c:	ldrb	r3, [r0, #2]
   13c60:	cmp	r3, #49	; 0x31
   13c64:	bne	13cc4 <__assert_fail@plt+0x293c>
   13c68:	ldrb	r3, [r0, #3]
   13c6c:	cmp	r3, #56	; 0x38
   13c70:	bne	13cc4 <__assert_fail@plt+0x293c>
   13c74:	ldrb	r3, [r0, #4]
   13c78:	cmp	r3, #48	; 0x30
   13c7c:	bne	13cc4 <__assert_fail@plt+0x293c>
   13c80:	ldrb	r3, [r0, #5]
   13c84:	cmp	r3, #51	; 0x33
   13c88:	bne	13cc4 <__assert_fail@plt+0x293c>
   13c8c:	ldrb	r3, [r0, #6]
   13c90:	cmp	r3, #48	; 0x30
   13c94:	bne	13cc4 <__assert_fail@plt+0x293c>
   13c98:	ldrb	r3, [r0, #7]
   13c9c:	cmp	r3, #0
   13ca0:	bne	13cc4 <__assert_fail@plt+0x293c>
   13ca4:	ldrb	r2, [r4]
   13ca8:	movw	r3, #33232	; 0x81d0
   13cac:	movt	r3, #1
   13cb0:	movw	r4, #33236	; 0x81d4
   13cb4:	movt	r4, #1
   13cb8:	cmp	r2, #96	; 0x60
   13cbc:	movne	r4, r3
   13cc0:	b	13bb8 <__assert_fail@plt+0x2830>
   13cc4:	movw	r3, #33244	; 0x81dc
   13cc8:	movt	r3, #1
   13ccc:	cmp	r6, #9
   13cd0:	movw	r4, #33224	; 0x81c8
   13cd4:	movt	r4, #1
   13cd8:	movne	r4, r3
   13cdc:	b	13bb8 <__assert_fail@plt+0x2830>
   13ce0:	strd	r4, [sp, #-36]!	; 0xffffffdc
   13ce4:	strd	r6, [sp, #8]
   13ce8:	strd	r8, [sp, #16]
   13cec:	strd	sl, [sp, #24]
   13cf0:	mov	fp, r0
   13cf4:	mov	sl, r1
   13cf8:	str	lr, [sp, #32]
   13cfc:	sub	sp, sp, #116	; 0x74
   13d00:	ldr	r8, [sp, #152]	; 0x98
   13d04:	str	r3, [sp, #28]
   13d08:	ldr	r3, [sp, #156]	; 0x9c
   13d0c:	str	r2, [sp, #32]
   13d10:	and	r4, r3, #2
   13d14:	ubfx	r3, r3, #1, #1
   13d18:	str	r3, [sp, #44]	; 0x2c
   13d1c:	bl	1119c <__ctype_get_mb_cur_max@plt>
   13d20:	str	r0, [sp, #64]	; 0x40
   13d24:	cmp	r8, #10
   13d28:	ldrls	pc, [pc, r8, lsl #2]
   13d2c:	b	1549c <__assert_fail@plt+0x4114>
   13d30:	andeq	r4, r1, r4, lsr r1
   13d34:	ldrdeq	r4, [r1], -r0
   13d38:	andeq	r4, r1, ip, lsr #15
   13d3c:	strdeq	r4, [r1], -r0
   13d40:	muleq	r1, r8, r0
   13d44:	andeq	r4, r1, r4, ror #1
   13d48:	andeq	r4, r1, r4, ror #2
   13d4c:	andeq	r4, r1, r0, lsr #3
   13d50:	andeq	r3, r1, ip, asr sp
   13d54:	andeq	r3, r1, ip, asr sp
   13d58:	andeq	r3, r1, ip, asr sp
   13d5c:	cmp	r8, #10
   13d60:	beq	13d8c <__assert_fail@plt+0x2a04>
   13d64:	mov	r1, r8
   13d68:	movw	r0, #33248	; 0x81e0
   13d6c:	movt	r0, #1
   13d70:	bl	13b88 <__assert_fail@plt+0x2800>
   13d74:	mov	r1, r8
   13d78:	str	r0, [sp, #164]	; 0xa4
   13d7c:	movw	r0, #33244	; 0x81dc
   13d80:	movt	r0, #1
   13d84:	bl	13b88 <__assert_fail@plt+0x2800>
   13d88:	str	r0, [sp, #168]	; 0xa8
   13d8c:	cmp	r4, #0
   13d90:	movne	r4, #0
   13d94:	beq	15178 <__assert_fail@plt+0x3df0>
   13d98:	mov	r3, #1
   13d9c:	mov	r5, #0
   13da0:	ldr	r0, [sp, #168]	; 0xa8
   13da4:	str	r3, [sp, #36]	; 0x24
   13da8:	str	r3, [sp, #40]	; 0x28
   13dac:	str	r5, [sp, #68]	; 0x44
   13db0:	bl	1125c <strlen@plt>
   13db4:	ldr	r3, [sp, #168]	; 0xa8
   13db8:	str	r5, [sp, #48]	; 0x30
   13dbc:	str	r0, [sp, #56]	; 0x38
   13dc0:	str	r3, [sp, #60]	; 0x3c
   13dc4:	str	r5, [sp, #72]	; 0x48
   13dc8:	str	r8, [sp, #152]	; 0x98
   13dcc:	mov	r8, fp
   13dd0:	mov	r9, #0
   13dd4:	ldr	fp, [sp, #152]	; 0x98
   13dd8:	ldr	r3, [sp, #28]
   13ddc:	cmn	r3, #1
   13de0:	beq	14340 <__assert_fail@plt+0x2fb8>
   13de4:	ldr	r3, [sp, #28]
   13de8:	subs	r6, r3, r9
   13dec:	movne	r6, #1
   13df0:	cmp	r6, #0
   13df4:	beq	14358 <__assert_fail@plt+0x2fd0>
   13df8:	ldr	r0, [sp, #32]
   13dfc:	ldr	r7, [sp, #40]	; 0x28
   13e00:	add	r3, r0, r9
   13e04:	cmp	fp, #2
   13e08:	moveq	r7, #0
   13e0c:	andne	r7, r7, #1
   13e10:	str	r3, [sp, #52]	; 0x34
   13e14:	cmp	r7, #0
   13e18:	beq	147f4 <__assert_fail@plt+0x346c>
   13e1c:	ldr	r2, [sp, #56]	; 0x38
   13e20:	cmp	r2, #0
   13e24:	beq	14a90 <__assert_fail@plt+0x3708>
   13e28:	ldr	r1, [sp, #28]
   13e2c:	cmp	r2, #1
   13e30:	mov	r3, r2
   13e34:	movls	r3, #0
   13e38:	movhi	r3, #1
   13e3c:	add	r5, r9, r2
   13e40:	cmn	r1, #1
   13e44:	movne	r3, #0
   13e48:	cmp	r3, #0
   13e4c:	beq	13e58 <__assert_fail@plt+0x2ad0>
   13e50:	bl	1125c <strlen@plt>
   13e54:	str	r0, [sp, #28]
   13e58:	ldr	r3, [sp, #28]
   13e5c:	cmp	r5, r3
   13e60:	bhi	14a90 <__assert_fail@plt+0x3708>
   13e64:	ldr	r0, [sp, #52]	; 0x34
   13e68:	ldr	r2, [sp, #56]	; 0x38
   13e6c:	ldr	r1, [sp, #60]	; 0x3c
   13e70:	bl	1110c <memcmp@plt>
   13e74:	cmp	r0, #0
   13e78:	bne	14a90 <__assert_fail@plt+0x3708>
   13e7c:	ldr	r3, [sp, #44]	; 0x2c
   13e80:	cmp	r3, #0
   13e84:	bne	153c0 <__assert_fail@plt+0x4038>
   13e88:	ldr	r3, [sp, #52]	; 0x34
   13e8c:	ldrb	r5, [r3]
   13e90:	cmp	r5, #126	; 0x7e
   13e94:	ldrls	pc, [pc, r5, lsl #2]
   13e98:	b	14750 <__assert_fail@plt+0x33c8>
   13e9c:	andeq	r4, r1, r4, asr r6
   13ea0:	andeq	r4, r1, r0, asr r7
   13ea4:	andeq	r4, r1, r0, asr r7
   13ea8:	andeq	r4, r1, r0, asr r7
   13eac:	andeq	r4, r1, r0, asr r7
   13eb0:	andeq	r4, r1, r0, asr r7
   13eb4:	andeq	r4, r1, r0, asr r7
   13eb8:	andeq	r4, r1, r8, lsr #12
   13ebc:	andeq	r4, r1, r0, lsr #12
   13ec0:	andeq	r4, r1, r8, ror #10
   13ec4:	andeq	r4, r1, r4, lsl r6
   13ec8:	andeq	r4, r1, r0, ror #10
   13ecc:	strdeq	r4, [r1], -r0
   13ed0:	andeq	r4, r1, ip, lsr r6
   13ed4:	andeq	r4, r1, r0, asr r7
   13ed8:	andeq	r4, r1, r0, asr r7
   13edc:	andeq	r4, r1, r0, asr r7
   13ee0:	andeq	r4, r1, r0, asr r7
   13ee4:	andeq	r4, r1, r0, asr r7
   13ee8:	andeq	r4, r1, r0, asr r7
   13eec:	andeq	r4, r1, r0, asr r7
   13ef0:	andeq	r4, r1, r0, asr r7
   13ef4:	andeq	r4, r1, r0, asr r7
   13ef8:	andeq	r4, r1, r0, asr r7
   13efc:	andeq	r4, r1, r0, asr r7
   13f00:	andeq	r4, r1, r0, asr r7
   13f04:	andeq	r4, r1, r0, asr r7
   13f08:	andeq	r4, r1, r0, asr r7
   13f0c:	andeq	r4, r1, r0, asr r7
   13f10:	andeq	r4, r1, r0, asr r7
   13f14:	andeq	r4, r1, r0, asr r7
   13f18:	andeq	r4, r1, r0, asr r7
   13f1c:	andeq	r4, r1, ip, lsr #14
   13f20:	andeq	r4, r1, r4, lsr r6
   13f24:	andeq	r4, r1, r4, lsr r6
   13f28:	andeq	r4, r1, r0, lsl r7
   13f2c:	andeq	r4, r1, r4, lsr r6
   13f30:	andeq	r4, r1, r4, asr #14
   13f34:	andeq	r4, r1, r4, lsr r6
   13f38:	muleq	r1, r0, r4
   13f3c:	andeq	r4, r1, r4, lsr r6
   13f40:	andeq	r4, r1, r4, lsr r6
   13f44:	andeq	r4, r1, r4, lsr r6
   13f48:	andeq	r4, r1, r4, asr #14
   13f4c:	andeq	r4, r1, r4, asr #14
   13f50:	andeq	r4, r1, r4, asr #14
   13f54:	andeq	r4, r1, r4, asr #14
   13f58:	andeq	r4, r1, r4, asr #14
   13f5c:	andeq	r4, r1, r4, asr #14
   13f60:	andeq	r4, r1, r4, asr #14
   13f64:	andeq	r4, r1, r4, asr #14
   13f68:	andeq	r4, r1, r4, asr #14
   13f6c:	andeq	r4, r1, r4, asr #14
   13f70:	andeq	r4, r1, r4, asr #14
   13f74:	andeq	r4, r1, r4, asr #14
   13f78:	andeq	r4, r1, r4, asr #14
   13f7c:	andeq	r4, r1, r4, asr #14
   13f80:	andeq	r4, r1, r4, asr #14
   13f84:	andeq	r4, r1, r4, asr #14
   13f88:	andeq	r4, r1, r4, lsr r6
   13f8c:	andeq	r4, r1, r4, lsr r6
   13f90:	andeq	r4, r1, r4, lsr r6
   13f94:	andeq	r4, r1, r4, lsr r6
   13f98:	andeq	r4, r1, r4, ror #8
   13f9c:	andeq	r4, r1, r0, asr r7
   13fa0:	andeq	r4, r1, r4, asr #14
   13fa4:	andeq	r4, r1, r4, asr #14
   13fa8:	andeq	r4, r1, r4, asr #14
   13fac:	andeq	r4, r1, r4, asr #14
   13fb0:	andeq	r4, r1, r4, asr #14
   13fb4:	andeq	r4, r1, r4, asr #14
   13fb8:	andeq	r4, r1, r4, asr #14
   13fbc:	andeq	r4, r1, r4, asr #14
   13fc0:	andeq	r4, r1, r4, asr #14
   13fc4:	andeq	r4, r1, r4, asr #14
   13fc8:	andeq	r4, r1, r4, asr #14
   13fcc:	andeq	r4, r1, r4, asr #14
   13fd0:	andeq	r4, r1, r4, asr #14
   13fd4:	andeq	r4, r1, r4, asr #14
   13fd8:	andeq	r4, r1, r4, asr #14
   13fdc:	andeq	r4, r1, r4, asr #14
   13fe0:	andeq	r4, r1, r4, asr #14
   13fe4:	andeq	r4, r1, r4, asr #14
   13fe8:	andeq	r4, r1, r4, asr #14
   13fec:	andeq	r4, r1, r4, asr #14
   13ff0:	andeq	r4, r1, r4, asr #14
   13ff4:	andeq	r4, r1, r4, asr #14
   13ff8:	andeq	r4, r1, r4, asr #14
   13ffc:	andeq	r4, r1, r4, asr #14
   14000:	andeq	r4, r1, r4, asr #14
   14004:	andeq	r4, r1, r4, asr #14
   14008:	andeq	r4, r1, r4, lsr r6
   1400c:	andeq	r4, r1, ip, lsl #8
   14010:	andeq	r4, r1, r4, asr #14
   14014:	andeq	r4, r1, r4, lsr r6
   14018:	andeq	r4, r1, r4, asr #14
   1401c:	andeq	r4, r1, r4, lsr r6
   14020:	andeq	r4, r1, r4, asr #14
   14024:	andeq	r4, r1, r4, asr #14
   14028:	andeq	r4, r1, r4, asr #14
   1402c:	andeq	r4, r1, r4, asr #14
   14030:	andeq	r4, r1, r4, asr #14
   14034:	andeq	r4, r1, r4, asr #14
   14038:	andeq	r4, r1, r4, asr #14
   1403c:	andeq	r4, r1, r4, asr #14
   14040:	andeq	r4, r1, r4, asr #14
   14044:	andeq	r4, r1, r4, asr #14
   14048:	andeq	r4, r1, r4, asr #14
   1404c:	andeq	r4, r1, r4, asr #14
   14050:	andeq	r4, r1, r4, asr #14
   14054:	andeq	r4, r1, r4, asr #14
   14058:	andeq	r4, r1, r4, asr #14
   1405c:	andeq	r4, r1, r4, asr #14
   14060:	andeq	r4, r1, r4, asr #14
   14064:	andeq	r4, r1, r4, asr #14
   14068:	andeq	r4, r1, r4, asr #14
   1406c:	andeq	r4, r1, r4, asr #14
   14070:	andeq	r4, r1, r4, asr #14
   14074:	andeq	r4, r1, r4, asr #14
   14078:	andeq	r4, r1, r4, asr #14
   1407c:	andeq	r4, r1, r4, asr #14
   14080:	andeq	r4, r1, r4, asr #14
   14084:	andeq	r4, r1, r4, asr #14
   14088:	andeq	r4, r1, r0, lsr r2
   1408c:	andeq	r4, r1, r4, lsr r6
   14090:	andeq	r4, r1, r0, lsr r2
   14094:	andeq	r4, r1, r0, lsl r7
   14098:	cmp	r4, #0
   1409c:	moveq	r3, #1
   140a0:	streq	r3, [sp, #40]	; 0x28
   140a4:	beq	147b8 <__assert_fail@plt+0x3430>
   140a8:	mov	r3, #0
   140ac:	mov	r2, #1
   140b0:	mov	r4, r3
   140b4:	str	r2, [sp, #36]	; 0x24
   140b8:	str	r2, [sp, #44]	; 0x2c
   140bc:	str	r2, [sp, #56]	; 0x38
   140c0:	str	r3, [sp, #68]	; 0x44
   140c4:	movw	r3, #33244	; 0x81dc
   140c8:	movt	r3, #1
   140cc:	str	r4, [sp, #40]	; 0x28
   140d0:	mov	r8, #2
   140d4:	str	r4, [sp, #48]	; 0x30
   140d8:	str	r3, [sp, #60]	; 0x3c
   140dc:	str	r4, [sp, #72]	; 0x48
   140e0:	b	13dc8 <__assert_fail@plt+0x2a40>
   140e4:	cmp	r4, #0
   140e8:	bne	15334 <__assert_fail@plt+0x3fac>
   140ec:	cmp	sl, #0
   140f0:	beq	150f4 <__assert_fail@plt+0x3d6c>
   140f4:	mov	r3, #34	; 0x22
   140f8:	mov	r1, r4
   140fc:	mov	r2, #1
   14100:	strb	r3, [fp]
   14104:	movw	r3, #33224	; 0x81c8
   14108:	movt	r3, #1
   1410c:	mov	r4, r2
   14110:	str	r2, [sp, #36]	; 0x24
   14114:	str	r2, [sp, #40]	; 0x28
   14118:	str	r1, [sp, #44]	; 0x2c
   1411c:	str	r1, [sp, #48]	; 0x30
   14120:	str	r2, [sp, #56]	; 0x38
   14124:	str	r3, [sp, #60]	; 0x3c
   14128:	str	r1, [sp, #68]	; 0x44
   1412c:	str	r1, [sp, #72]	; 0x48
   14130:	b	13dc8 <__assert_fail@plt+0x2a40>
   14134:	mov	r3, #0
   14138:	mov	r4, r8
   1413c:	str	r3, [sp, #40]	; 0x28
   14140:	str	r3, [sp, #44]	; 0x2c
   14144:	str	r3, [sp, #48]	; 0x30
   14148:	str	r8, [sp, #56]	; 0x38
   1414c:	str	r3, [sp, #60]	; 0x3c
   14150:	str	r3, [sp, #68]	; 0x44
   14154:	mov	r3, #1
   14158:	str	r3, [sp, #36]	; 0x24
   1415c:	str	r8, [sp, #72]	; 0x48
   14160:	b	13dc8 <__assert_fail@plt+0x2a40>
   14164:	mov	r3, #1
   14168:	mov	r2, #0
   1416c:	mov	r4, r2
   14170:	mov	r8, #5
   14174:	str	r3, [sp, #36]	; 0x24
   14178:	str	r3, [sp, #40]	; 0x28
   1417c:	str	r3, [sp, #44]	; 0x2c
   14180:	str	r2, [sp, #48]	; 0x30
   14184:	str	r3, [sp, #56]	; 0x38
   14188:	movw	r3, #33224	; 0x81c8
   1418c:	movt	r3, #1
   14190:	str	r3, [sp, #60]	; 0x3c
   14194:	str	r2, [sp, #68]	; 0x44
   14198:	str	r2, [sp, #72]	; 0x48
   1419c:	b	13dc8 <__assert_fail@plt+0x2a40>
   141a0:	mov	r3, #0
   141a4:	mov	r2, #1
   141a8:	mov	r4, r3
   141ac:	str	r2, [sp, #36]	; 0x24
   141b0:	str	r2, [sp, #40]	; 0x28
   141b4:	str	r3, [sp, #44]	; 0x2c
   141b8:	str	r3, [sp, #48]	; 0x30
   141bc:	str	r3, [sp, #56]	; 0x38
   141c0:	str	r3, [sp, #60]	; 0x3c
   141c4:	str	r3, [sp, #68]	; 0x44
   141c8:	str	r3, [sp, #72]	; 0x48
   141cc:	b	13dc8 <__assert_fail@plt+0x2a40>
   141d0:	mov	r2, #1
   141d4:	mov	r3, #0
   141d8:	mov	r4, r3
   141dc:	str	r2, [sp, #36]	; 0x24
   141e0:	str	r2, [sp, #44]	; 0x2c
   141e4:	str	r8, [sp, #56]	; 0x38
   141e8:	str	r3, [sp, #68]	; 0x44
   141ec:	b	140c4 <__assert_fail@plt+0x2d3c>
   141f0:	mov	r3, #1
   141f4:	mov	r2, #0
   141f8:	mov	r4, r2
   141fc:	mov	r8, #2
   14200:	str	r3, [sp, #36]	; 0x24
   14204:	str	r3, [sp, #40]	; 0x28
   14208:	str	r3, [sp, #44]	; 0x2c
   1420c:	str	r2, [sp, #48]	; 0x30
   14210:	str	r3, [sp, #56]	; 0x38
   14214:	movw	r3, #33244	; 0x81dc
   14218:	movt	r3, #1
   1421c:	str	r3, [sp, #60]	; 0x3c
   14220:	str	r2, [sp, #68]	; 0x44
   14224:	str	r2, [sp, #72]	; 0x48
   14228:	b	13dc8 <__assert_fail@plt+0x2a40>
   1422c:	mov	r7, #0
   14230:	ldr	r3, [sp, #28]
   14234:	cmn	r3, #1
   14238:	beq	14d10 <__assert_fail@plt+0x3988>
   1423c:	ldr	r3, [sp, #28]
   14240:	subs	r2, r3, #1
   14244:	movne	r2, #1
   14248:	sub	r3, fp, #2
   1424c:	cmp	r2, #0
   14250:	clz	r3, r3
   14254:	lsr	r3, r3, #5
   14258:	bne	14264 <__assert_fail@plt+0x2edc>
   1425c:	cmp	r9, #0
   14260:	beq	14a70 <__assert_fail@plt+0x36e8>
   14264:	mov	r6, #0
   14268:	ldr	r2, [sp, #40]	; 0x28
   1426c:	eor	r2, r2, #1
   14270:	orrs	r3, r3, r2
   14274:	bne	1444c <__assert_fail@plt+0x30c4>
   14278:	ldr	r2, [sp, #160]	; 0xa0
   1427c:	cmp	r2, #0
   14280:	beq	142a0 <__assert_fail@plt+0x2f18>
   14284:	ldr	r0, [sp, #160]	; 0xa0
   14288:	ubfx	r1, r5, #5, #8
   1428c:	and	r2, r5, #31
   14290:	ldr	r1, [r0, r1, lsl #2]
   14294:	lsr	r2, r1, r2
   14298:	tst	r2, #1
   1429c:	bne	142a8 <__assert_fail@plt+0x2f20>
   142a0:	cmp	r7, #0
   142a4:	beq	14518 <__assert_fail@plt+0x3190>
   142a8:	ldr	r2, [sp, #44]	; 0x2c
   142ac:	sub	r3, fp, #2
   142b0:	clz	r3, r3
   142b4:	lsr	r3, r3, #5
   142b8:	cmp	r2, #0
   142bc:	bne	15064 <__assert_fail@plt+0x3cdc>
   142c0:	ldr	r2, [sp, #48]	; 0x30
   142c4:	eor	r2, r2, #1
   142c8:	ands	r3, r3, r2
   142cc:	beq	14304 <__assert_fail@plt+0x2f7c>
   142d0:	cmp	sl, r4
   142d4:	str	r3, [sp, #48]	; 0x30
   142d8:	movhi	r2, #39	; 0x27
   142dc:	strbhi	r2, [r8, r4]
   142e0:	add	r2, r4, #1
   142e4:	cmp	sl, r2
   142e8:	movhi	r1, #36	; 0x24
   142ec:	strbhi	r1, [r8, r2]
   142f0:	add	r2, r4, #2
   142f4:	add	r4, r4, #3
   142f8:	cmp	sl, r2
   142fc:	movhi	r1, #39	; 0x27
   14300:	strbhi	r1, [r8, r2]
   14304:	cmp	r4, sl
   14308:	add	r9, r9, #1
   1430c:	movcc	r3, #92	; 0x5c
   14310:	strbcc	r3, [r8, r4]
   14314:	add	r4, r4, #1
   14318:	cmp	r4, sl
   1431c:	ldr	r3, [sp, #36]	; 0x24
   14320:	strbcc	r5, [r8, r4]
   14324:	cmp	r6, #0
   14328:	add	r4, r4, #1
   1432c:	moveq	r3, #0
   14330:	str	r3, [sp, #36]	; 0x24
   14334:	ldr	r3, [sp, #28]
   14338:	cmn	r3, #1
   1433c:	bne	13de4 <__assert_fail@plt+0x2a5c>
   14340:	ldr	r3, [sp, #32]
   14344:	ldrb	r6, [r3, r9]
   14348:	adds	r6, r6, #0
   1434c:	movne	r6, #1
   14350:	cmp	r6, #0
   14354:	bne	13df8 <__assert_fail@plt+0x2a70>
   14358:	str	fp, [sp, #152]	; 0x98
   1435c:	mov	fp, r8
   14360:	cmp	r4, #0
   14364:	ldr	r1, [sp, #44]	; 0x2c
   14368:	movne	r3, #0
   1436c:	ldr	r8, [sp, #152]	; 0x98
   14370:	sub	r2, r8, #2
   14374:	clz	r2, r2
   14378:	lsr	r2, r2, #5
   1437c:	andeq	r3, r2, r1
   14380:	cmp	r3, #0
   14384:	bne	15440 <__assert_fail@plt+0x40b8>
   14388:	eor	r3, r1, #1
   1438c:	ands	r2, r2, r3
   14390:	beq	1536c <__assert_fail@plt+0x3fe4>
   14394:	ldr	r3, [sp, #68]	; 0x44
   14398:	cmp	r3, #0
   1439c:	beq	15370 <__assert_fail@plt+0x3fe8>
   143a0:	ldr	r3, [sp, #36]	; 0x24
   143a4:	cmp	r3, #0
   143a8:	bne	153fc <__assert_fail@plt+0x4074>
   143ac:	ldr	r3, [sp, #72]	; 0x48
   143b0:	adds	r3, r3, #0
   143b4:	movne	r3, #1
   143b8:	cmp	sl, #0
   143bc:	movne	r3, #0
   143c0:	cmp	r3, #0
   143c4:	ldreq	r2, [sp, #68]	; 0x44
   143c8:	beq	15370 <__assert_fail@plt+0x3fe8>
   143cc:	ldr	r2, [sp, #72]	; 0x48
   143d0:	str	r3, [sp, #68]	; 0x44
   143d4:	movw	r3, #33244	; 0x81dc
   143d8:	movt	r3, #1
   143dc:	mov	r1, #39	; 0x27
   143e0:	mov	r4, #1
   143e4:	ldr	sl, [sp, #72]	; 0x48
   143e8:	mov	r8, #2
   143ec:	str	r3, [sp, #60]	; 0x3c
   143f0:	mov	r3, #0
   143f4:	strb	r1, [fp]
   143f8:	str	r3, [sp, #44]	; 0x2c
   143fc:	str	r4, [sp, #56]	; 0x38
   14400:	str	r2, [sp, #72]	; 0x48
   14404:	b	13dc8 <__assert_fail@plt+0x2a40>
   14408:	mov	r7, #0
   1440c:	cmp	fp, #2
   14410:	beq	14cf0 <__assert_fail@plt+0x3968>
   14414:	ldr	r2, [sp, #40]	; 0x28
   14418:	ldr	r3, [sp, #56]	; 0x38
   1441c:	ldr	r1, [sp, #44]	; 0x2c
   14420:	cmp	r3, #0
   14424:	moveq	r3, #0
   14428:	andne	r3, r2, r1
   1442c:	cmp	r3, #0
   14430:	moveq	r5, #92	; 0x5c
   14434:	moveq	r3, r5
   14438:	bne	14cfc <__assert_fail@plt+0x3974>
   1443c:	ldr	r2, [sp, #40]	; 0x28
   14440:	cmp	r2, #0
   14444:	bne	15138 <__assert_fail@plt+0x3db0>
   14448:	mov	r6, #0
   1444c:	ldr	r3, [sp, #44]	; 0x2c
   14450:	cmp	r3, #0
   14454:	beq	14ce8 <__assert_fail@plt+0x3960>
   14458:	mov	r3, #0
   1445c:	b	14278 <__assert_fail@plt+0x2ef0>
   14460:	mov	r7, #0
   14464:	cmp	fp, #2
   14468:	beq	14d60 <__assert_fail@plt+0x39d8>
   1446c:	cmp	fp, #5
   14470:	beq	14d24 <__assert_fail@plt+0x399c>
   14474:	sub	r3, fp, #2
   14478:	mov	r6, #0
   1447c:	clz	r3, r3
   14480:	mov	r5, #63	; 0x3f
   14484:	lsr	r3, r3, #5
   14488:	b	14268 <__assert_fail@plt+0x2ee0>
   1448c:	mov	r7, #0
   14490:	cmp	fp, #2
   14494:	movne	r3, #0
   14498:	movne	r5, #39	; 0x27
   1449c:	strne	r6, [sp, #68]	; 0x44
   144a0:	bne	14268 <__assert_fail@plt+0x2ee0>
   144a4:	ldr	r3, [sp, #44]	; 0x2c
   144a8:	cmp	r3, #0
   144ac:	bne	15168 <__assert_fail@plt+0x3de0>
   144b0:	ldr	r3, [sp, #72]	; 0x48
   144b4:	cmp	sl, #0
   144b8:	clz	r3, r3
   144bc:	lsr	r3, r3, #5
   144c0:	moveq	r3, #0
   144c4:	cmp	r3, #0
   144c8:	bne	15094 <__assert_fail@plt+0x3d0c>
   144cc:	cmp	sl, r4
   144d0:	movhi	r3, #39	; 0x27
   144d4:	strbhi	r3, [r8, r4]
   144d8:	add	r3, r4, #1
   144dc:	cmp	sl, r3
   144e0:	movhi	r2, #92	; 0x5c
   144e4:	strbhi	r2, [r8, r3]
   144e8:	add	r3, r4, #2
   144ec:	cmp	sl, r3
   144f0:	bls	144fc <__assert_fail@plt+0x3174>
   144f4:	mov	r2, #39	; 0x27
   144f8:	strb	r2, [r8, r3]
   144fc:	mov	r3, #0
   14500:	cmp	r7, #0
   14504:	add	r4, r4, #3
   14508:	mov	r5, #39	; 0x27
   1450c:	str	r3, [sp, #48]	; 0x30
   14510:	str	r6, [sp, #68]	; 0x44
   14514:	bne	142a8 <__assert_fail@plt+0x2f20>
   14518:	ldr	r2, [sp, #48]	; 0x30
   1451c:	eor	r3, r3, #1
   14520:	add	r9, r9, #1
   14524:	and	r3, r3, r2
   14528:	uxtb	r3, r3
   1452c:	cmp	r3, #0
   14530:	beq	14318 <__assert_fail@plt+0x2f90>
   14534:	cmp	sl, r4
   14538:	movhi	r3, #39	; 0x27
   1453c:	strbhi	r3, [r8, r4]
   14540:	add	r3, r4, #1
   14544:	add	r4, r4, #2
   14548:	cmp	sl, r3
   1454c:	movhi	r2, #39	; 0x27
   14550:	strbhi	r2, [r8, r3]
   14554:	mov	r3, #0
   14558:	str	r3, [sp, #48]	; 0x30
   1455c:	b	14318 <__assert_fail@plt+0x2f90>
   14560:	mov	r3, #118	; 0x76
   14564:	b	1443c <__assert_fail@plt+0x30b4>
   14568:	mov	r3, #116	; 0x74
   1456c:	ldr	r2, [sp, #44]	; 0x2c
   14570:	cmp	fp, #2
   14574:	movne	r2, #0
   14578:	andeq	r2, r2, #1
   1457c:	cmp	r2, #0
   14580:	beq	1443c <__assert_fail@plt+0x30b4>
   14584:	mov	fp, r8
   14588:	mov	r8, #2
   1458c:	ldr	r3, [sp, #40]	; 0x28
   14590:	cmp	r3, #0
   14594:	movne	r8, #4
   14598:	mov	lr, #0
   1459c:	mov	r0, fp
   145a0:	ldr	r2, [sp, #32]
   145a4:	ldr	r3, [sp, #156]	; 0x9c
   145a8:	ldr	r1, [sp, #164]	; 0xa4
   145ac:	bic	ip, r3, #2
   145b0:	ldr	r3, [sp, #28]
   145b4:	stm	sp, {r8, ip, lr}
   145b8:	ldr	ip, [sp, #168]	; 0xa8
   145bc:	str	r1, [sp, #12]
   145c0:	mov	r1, sl
   145c4:	str	ip, [sp, #16]
   145c8:	bl	13ce0 <__assert_fail@plt+0x2958>
   145cc:	mov	r4, r0
   145d0:	mov	r0, r4
   145d4:	add	sp, sp, #116	; 0x74
   145d8:	ldrd	r4, [sp]
   145dc:	ldrd	r6, [sp, #8]
   145e0:	ldrd	r8, [sp, #16]
   145e4:	ldrd	sl, [sp, #24]
   145e8:	add	sp, sp, #32
   145ec:	pop	{pc}		; (ldr pc, [sp], #4)
   145f0:	mov	r5, #102	; 0x66
   145f4:	ldr	r2, [sp, #44]	; 0x2c
   145f8:	sub	r3, fp, #2
   145fc:	clz	r3, r3
   14600:	lsr	r3, r3, #5
   14604:	cmp	r2, #0
   14608:	bne	15064 <__assert_fail@plt+0x3cdc>
   1460c:	mov	r6, r2
   14610:	b	14304 <__assert_fail@plt+0x2f7c>
   14614:	mov	r5, #110	; 0x6e
   14618:	mov	r6, #0
   1461c:	b	142a8 <__assert_fail@plt+0x2f20>
   14620:	mov	r5, #98	; 0x62
   14624:	b	145f4 <__assert_fail@plt+0x326c>
   14628:	mov	r5, #97	; 0x61
   1462c:	b	145f4 <__assert_fail@plt+0x326c>
   14630:	mov	r7, #0
   14634:	mov	r6, #0
   14638:	b	14458 <__assert_fail@plt+0x30d0>
   1463c:	mov	r5, #114	; 0x72
   14640:	b	14618 <__assert_fail@plt+0x3290>
   14644:	ldr	r3, [sp, #44]	; 0x2c
   14648:	cmp	r3, #0
   1464c:	bne	153dc <__assert_fail@plt+0x4054>
   14650:	mov	r7, r3
   14654:	ldr	r3, [sp, #48]	; 0x30
   14658:	sub	r2, fp, #2
   1465c:	clz	r2, r2
   14660:	lsr	r2, r2, #5
   14664:	eor	r3, r3, #1
   14668:	ands	r3, r2, r3
   1466c:	beq	15080 <__assert_fail@plt+0x3cf8>
   14670:	cmp	sl, r4
   14674:	movhi	r1, #39	; 0x27
   14678:	strbhi	r1, [r8, r4]
   1467c:	add	r1, r4, #1
   14680:	cmp	sl, r1
   14684:	movhi	r0, #36	; 0x24
   14688:	strbhi	r0, [r8, r1]
   1468c:	add	r1, r4, #2
   14690:	cmp	sl, r1
   14694:	movhi	r0, #39	; 0x27
   14698:	strbhi	r0, [r8, r1]
   1469c:	add	r1, r4, #3
   146a0:	cmp	sl, r1
   146a4:	bls	150d8 <__assert_fail@plt+0x3d50>
   146a8:	mov	r4, r1
   146ac:	mov	r1, #92	; 0x5c
   146b0:	mov	r0, r4
   146b4:	str	r3, [sp, #48]	; 0x30
   146b8:	strb	r1, [r8, r4]
   146bc:	cmp	fp, #2
   146c0:	add	r4, r4, #1
   146c4:	beq	15128 <__assert_fail@plt+0x3da0>
   146c8:	ldr	r1, [sp, #28]
   146cc:	add	r3, r9, #1
   146d0:	cmp	r3, r1
   146d4:	bcs	146ec <__assert_fail@plt+0x3364>
   146d8:	ldr	r1, [sp, #32]
   146dc:	ldrb	r3, [r1, r3]
   146e0:	sub	r3, r3, #48	; 0x30
   146e4:	cmp	r3, #9
   146e8:	bls	15140 <__assert_fail@plt+0x3db8>
   146ec:	mov	r5, #48	; 0x30
   146f0:	ldr	r3, [sp, #40]	; 0x28
   146f4:	eor	r3, r3, #1
   146f8:	orrs	r2, r2, r3
   146fc:	mov	r3, r6
   14700:	moveq	r6, r2
   14704:	beq	14278 <__assert_fail@plt+0x2ef0>
   14708:	mov	r6, #0
   1470c:	b	142a0 <__assert_fail@plt+0x2f18>
   14710:	cmp	r9, #0
   14714:	mov	r2, r7
   14718:	bne	14cb8 <__assert_fail@plt+0x3930>
   1471c:	mov	r6, r7
   14720:	mov	r3, r9
   14724:	mov	r7, r2
   14728:	b	14268 <__assert_fail@plt+0x2ee0>
   1472c:	mov	r2, r7
   14730:	mov	r6, r7
   14734:	mov	r3, #0
   14738:	mov	r7, r2
   1473c:	mov	r5, #32
   14740:	b	14268 <__assert_fail@plt+0x2ee0>
   14744:	mov	r6, r7
   14748:	b	14458 <__assert_fail@plt+0x30d0>
   1474c:	mov	r7, #0
   14750:	ldr	r3, [sp, #64]	; 0x40
   14754:	cmp	r3, #1
   14758:	bne	14d78 <__assert_fail@plt+0x39f0>
   1475c:	bl	1122c <__ctype_b_loc@plt>
   14760:	ldr	r2, [r0]
   14764:	sxth	r3, r5
   14768:	lsl	r3, r3, #1
   1476c:	ldr	r1, [sp, #64]	; 0x40
   14770:	ldrh	r3, [r2, r3]
   14774:	mov	ip, r1
   14778:	and	r3, r3, #16384	; 0x4000
   1477c:	cmp	r3, #0
   14780:	ldr	r3, [sp, #40]	; 0x28
   14784:	movne	r6, #1
   14788:	moveq	r6, #0
   1478c:	movne	r2, #0
   14790:	andeq	r2, r3, #1
   14794:	cmp	r2, #0
   14798:	bne	150c0 <__assert_fail@plt+0x3d38>
   1479c:	sub	r3, fp, #2
   147a0:	clz	r3, r3
   147a4:	lsr	r3, r3, #5
   147a8:	b	14268 <__assert_fail@plt+0x2ee0>
   147ac:	cmp	r4, #0
   147b0:	bne	15450 <__assert_fail@plt+0x40c8>
   147b4:	str	r4, [sp, #40]	; 0x28
   147b8:	cmp	sl, #0
   147bc:	bne	15480 <__assert_fail@plt+0x40f8>
   147c0:	mov	r3, #1
   147c4:	movw	r2, #33244	; 0x81dc
   147c8:	movt	r2, #1
   147cc:	mov	r4, r3
   147d0:	mov	r8, #2
   147d4:	str	r3, [sp, #36]	; 0x24
   147d8:	str	sl, [sp, #44]	; 0x2c
   147dc:	str	sl, [sp, #48]	; 0x30
   147e0:	str	r3, [sp, #56]	; 0x38
   147e4:	str	r2, [sp, #60]	; 0x3c
   147e8:	str	sl, [sp, #68]	; 0x44
   147ec:	str	sl, [sp, #72]	; 0x48
   147f0:	b	13dc8 <__assert_fail@plt+0x2a40>
   147f4:	ldr	r3, [sp, #32]
   147f8:	ldrb	r5, [r3, r9]
   147fc:	cmp	r5, #126	; 0x7e
   14800:	ldrls	pc, [pc, r5, lsl #2]
   14804:	b	14750 <__assert_fail@plt+0x33c8>
   14808:	andeq	r4, r1, ip, lsr #20
   1480c:	andeq	r4, r1, r0, asr r7
   14810:	andeq	r4, r1, r0, asr r7
   14814:	andeq	r4, r1, r0, asr r7
   14818:	andeq	r4, r1, r0, asr r7
   1481c:	andeq	r4, r1, r0, asr r7
   14820:	andeq	r4, r1, r0, asr r7
   14824:	andeq	r4, r1, r4, lsr #20
   14828:	andeq	r4, r1, ip, lsl sl
   1482c:	andeq	r4, r1, r8, ror #10
   14830:	andeq	r4, r1, r4, lsl sl
   14834:	andeq	r4, r1, r0, ror #10
   14838:	andeq	r4, r1, ip, lsl #20
   1483c:	andeq	r4, r1, r4, lsl #20
   14840:	andeq	r4, r1, r0, asr r7
   14844:	andeq	r4, r1, r0, asr r7
   14848:	andeq	r4, r1, r0, asr r7
   1484c:	andeq	r4, r1, r0, asr r7
   14850:	andeq	r4, r1, r0, asr r7
   14854:	andeq	r4, r1, r0, asr r7
   14858:	andeq	r4, r1, r0, asr r7
   1485c:	andeq	r4, r1, r0, asr r7
   14860:	andeq	r4, r1, r0, asr r7
   14864:	andeq	r4, r1, r0, asr r7
   14868:	andeq	r4, r1, r0, asr r7
   1486c:	andeq	r4, r1, r0, asr r7
   14870:	andeq	r4, r1, r0, asr r7
   14874:	andeq	r4, r1, r0, asr r7
   14878:	andeq	r4, r1, r0, asr r7
   1487c:	andeq	r4, r1, r0, asr r7
   14880:	andeq	r4, r1, r0, asr r7
   14884:	andeq	r4, r1, r0, asr r7
   14888:	andeq	r4, r1, r0, lsl #21
   1488c:	andeq	r4, r1, r0, ror #20
   14890:	andeq	r4, r1, r0, ror #20
   14894:	andeq	r4, r1, r0, asr sl
   14898:	andeq	r4, r1, r0, ror #20
   1489c:	muleq	r1, ip, r7
   148a0:	andeq	r4, r1, r0, ror #20
   148a4:	muleq	r1, r0, r4
   148a8:	andeq	r4, r1, r0, ror #20
   148ac:	andeq	r4, r1, r0, ror #20
   148b0:	andeq	r4, r1, r0, ror #20
   148b4:	muleq	r1, ip, r7
   148b8:	muleq	r1, ip, r7
   148bc:	muleq	r1, ip, r7
   148c0:	muleq	r1, ip, r7
   148c4:	muleq	r1, ip, r7
   148c8:	muleq	r1, ip, r7
   148cc:	muleq	r1, ip, r7
   148d0:	muleq	r1, ip, r7
   148d4:	muleq	r1, ip, r7
   148d8:	muleq	r1, ip, r7
   148dc:	muleq	r1, ip, r7
   148e0:	muleq	r1, ip, r7
   148e4:	muleq	r1, ip, r7
   148e8:	muleq	r1, ip, r7
   148ec:	muleq	r1, ip, r7
   148f0:	muleq	r1, ip, r7
   148f4:	andeq	r4, r1, r0, ror #20
   148f8:	andeq	r4, r1, r0, ror #20
   148fc:	andeq	r4, r1, r0, ror #20
   14900:	andeq	r4, r1, r0, ror #20
   14904:	andeq	r4, r1, r4, ror #8
   14908:	andeq	r4, r1, r0, asr r7
   1490c:	muleq	r1, ip, r7
   14910:	muleq	r1, ip, r7
   14914:	muleq	r1, ip, r7
   14918:	muleq	r1, ip, r7
   1491c:	muleq	r1, ip, r7
   14920:	muleq	r1, ip, r7
   14924:	muleq	r1, ip, r7
   14928:	muleq	r1, ip, r7
   1492c:	muleq	r1, ip, r7
   14930:	muleq	r1, ip, r7
   14934:	muleq	r1, ip, r7
   14938:	muleq	r1, ip, r7
   1493c:	muleq	r1, ip, r7
   14940:	muleq	r1, ip, r7
   14944:	muleq	r1, ip, r7
   14948:	muleq	r1, ip, r7
   1494c:	muleq	r1, ip, r7
   14950:	muleq	r1, ip, r7
   14954:	muleq	r1, ip, r7
   14958:	muleq	r1, ip, r7
   1495c:	muleq	r1, ip, r7
   14960:	muleq	r1, ip, r7
   14964:	muleq	r1, ip, r7
   14968:	muleq	r1, ip, r7
   1496c:	muleq	r1, ip, r7
   14970:	muleq	r1, ip, r7
   14974:	andeq	r4, r1, r0, ror #20
   14978:	andeq	r4, r1, ip, lsl #8
   1497c:	muleq	r1, ip, r7
   14980:	andeq	r4, r1, r0, ror #20
   14984:	muleq	r1, ip, r7
   14988:	andeq	r4, r1, r0, ror #20
   1498c:	muleq	r1, ip, r7
   14990:	muleq	r1, ip, r7
   14994:	muleq	r1, ip, r7
   14998:	muleq	r1, ip, r7
   1499c:	muleq	r1, ip, r7
   149a0:	muleq	r1, ip, r7
   149a4:	muleq	r1, ip, r7
   149a8:	muleq	r1, ip, r7
   149ac:	muleq	r1, ip, r7
   149b0:	muleq	r1, ip, r7
   149b4:	muleq	r1, ip, r7
   149b8:	muleq	r1, ip, r7
   149bc:	muleq	r1, ip, r7
   149c0:	muleq	r1, ip, r7
   149c4:	muleq	r1, ip, r7
   149c8:	muleq	r1, ip, r7
   149cc:	muleq	r1, ip, r7
   149d0:	muleq	r1, ip, r7
   149d4:	muleq	r1, ip, r7
   149d8:	muleq	r1, ip, r7
   149dc:	muleq	r1, ip, r7
   149e0:	muleq	r1, ip, r7
   149e4:	muleq	r1, ip, r7
   149e8:	muleq	r1, ip, r7
   149ec:	muleq	r1, ip, r7
   149f0:	muleq	r1, ip, r7
   149f4:	andeq	r4, r1, r0, lsr r2
   149f8:	andeq	r4, r1, r0, ror #20
   149fc:	andeq	r4, r1, r0, lsr r2
   14a00:	andeq	r4, r1, r0, asr sl
   14a04:	mov	r3, #114	; 0x72
   14a08:	b	1456c <__assert_fail@plt+0x31e4>
   14a0c:	mov	r3, #102	; 0x66
   14a10:	b	1443c <__assert_fail@plt+0x30b4>
   14a14:	mov	r3, #110	; 0x6e
   14a18:	b	1456c <__assert_fail@plt+0x31e4>
   14a1c:	mov	r3, #98	; 0x62
   14a20:	b	1443c <__assert_fail@plt+0x30b4>
   14a24:	mov	r3, #97	; 0x61
   14a28:	b	1443c <__assert_fail@plt+0x30b4>
   14a2c:	ldr	r3, [sp, #40]	; 0x28
   14a30:	cmp	r3, #0
   14a34:	bne	14644 <__assert_fail@plt+0x32bc>
   14a38:	ldr	r3, [sp, #156]	; 0x9c
   14a3c:	tst	r3, #1
   14a40:	addne	r9, r9, #1
   14a44:	bne	13dd8 <__assert_fail@plt+0x2a50>
   14a48:	ldr	r7, [sp, #40]	; 0x28
   14a4c:	b	14448 <__assert_fail@plt+0x30c0>
   14a50:	sub	r3, fp, #2
   14a54:	clz	r3, r3
   14a58:	lsr	r3, r3, #5
   14a5c:	b	1425c <__assert_fail@plt+0x2ed4>
   14a60:	sub	r3, fp, #2
   14a64:	mov	r6, #0
   14a68:	clz	r3, r3
   14a6c:	lsr	r3, r3, #5
   14a70:	ldr	r2, [sp, #44]	; 0x2c
   14a74:	tst	r2, r3
   14a78:	beq	14268 <__assert_fail@plt+0x2ee0>
   14a7c:	b	14584 <__assert_fail@plt+0x31fc>
   14a80:	sub	r3, fp, #2
   14a84:	clz	r3, r3
   14a88:	lsr	r3, r3, #5
   14a8c:	b	14a70 <__assert_fail@plt+0x36e8>
   14a90:	ldr	r3, [sp, #52]	; 0x34
   14a94:	ldrb	r5, [r3]
   14a98:	cmp	r5, #126	; 0x7e
   14a9c:	ldrls	pc, [pc, r5, lsl #2]
   14aa0:	b	1474c <__assert_fail@plt+0x33c4>
   14aa4:	andeq	r4, r1, r4, asr #12
   14aa8:	andeq	r4, r1, ip, asr #14
   14aac:	andeq	r4, r1, ip, asr #14
   14ab0:	andeq	r4, r1, ip, asr #14
   14ab4:	andeq	r4, r1, ip, asr #14
   14ab8:	andeq	r4, r1, ip, asr #14
   14abc:	andeq	r4, r1, ip, asr #14
   14ac0:	andeq	r4, r1, r8, lsr #12
   14ac4:	andeq	r4, r1, r0, lsr #12
   14ac8:	ldrdeq	r4, [r1], -ip
   14acc:	andeq	r4, r1, r4, lsl r6
   14ad0:	ldrdeq	r4, [r1], -r0
   14ad4:	strdeq	r4, [r1], -r0
   14ad8:	andeq	r4, r1, ip, lsr r6
   14adc:	andeq	r4, r1, ip, asr #14
   14ae0:	andeq	r4, r1, ip, asr #14
   14ae4:	andeq	r4, r1, ip, asr #14
   14ae8:	andeq	r4, r1, ip, asr #14
   14aec:	andeq	r4, r1, ip, asr #14
   14af0:	andeq	r4, r1, ip, asr #14
   14af4:	andeq	r4, r1, ip, asr #14
   14af8:	andeq	r4, r1, ip, asr #14
   14afc:	andeq	r4, r1, ip, asr #14
   14b00:	andeq	r4, r1, ip, asr #14
   14b04:	andeq	r4, r1, ip, asr #14
   14b08:	andeq	r4, r1, ip, asr #14
   14b0c:	andeq	r4, r1, ip, asr #14
   14b10:	andeq	r4, r1, ip, asr #14
   14b14:	andeq	r4, r1, ip, asr #14
   14b18:	andeq	r4, r1, ip, asr #14
   14b1c:	andeq	r4, r1, ip, asr #14
   14b20:	andeq	r4, r1, ip, asr #14
   14b24:	andeq	r4, r1, r8, asr #25
   14b28:	andeq	r4, r1, r0, lsr r6
   14b2c:	andeq	r4, r1, r0, lsr r6
   14b30:	andeq	r4, r1, ip, lsr #25
   14b34:	andeq	r4, r1, r0, lsr r6
   14b38:	andeq	r4, r1, r0, lsr #25
   14b3c:	andeq	r4, r1, r0, lsr r6
   14b40:	andeq	r4, r1, ip, lsl #9
   14b44:	andeq	r4, r1, r0, lsr r6
   14b48:	andeq	r4, r1, r0, lsr r6
   14b4c:	andeq	r4, r1, r0, lsr r6
   14b50:	andeq	r4, r1, r0, lsr #25
   14b54:	andeq	r4, r1, r0, lsr #25
   14b58:	andeq	r4, r1, r0, lsr #25
   14b5c:	andeq	r4, r1, r0, lsr #25
   14b60:	andeq	r4, r1, r0, lsr #25
   14b64:	andeq	r4, r1, r0, lsr #25
   14b68:	andeq	r4, r1, r0, lsr #25
   14b6c:	andeq	r4, r1, r0, lsr #25
   14b70:	andeq	r4, r1, r0, lsr #25
   14b74:	andeq	r4, r1, r0, lsr #25
   14b78:	andeq	r4, r1, r0, lsr #25
   14b7c:	andeq	r4, r1, r0, lsr #25
   14b80:	andeq	r4, r1, r0, lsr #25
   14b84:	andeq	r4, r1, r0, lsr #25
   14b88:	andeq	r4, r1, r0, lsr #25
   14b8c:	andeq	r4, r1, r0, lsr #25
   14b90:	andeq	r4, r1, r0, lsr r6
   14b94:	andeq	r4, r1, r0, lsr r6
   14b98:	andeq	r4, r1, r0, lsr r6
   14b9c:	andeq	r4, r1, r0, lsr r6
   14ba0:	andeq	r4, r1, r0, ror #8
   14ba4:	andeq	r4, r1, ip, asr #14
   14ba8:	andeq	r4, r1, r0, lsr #25
   14bac:	andeq	r4, r1, r0, lsr #25
   14bb0:	andeq	r4, r1, r0, lsr #25
   14bb4:	andeq	r4, r1, r0, lsr #25
   14bb8:	andeq	r4, r1, r0, lsr #25
   14bbc:	andeq	r4, r1, r0, lsr #25
   14bc0:	andeq	r4, r1, r0, lsr #25
   14bc4:	andeq	r4, r1, r0, lsr #25
   14bc8:	andeq	r4, r1, r0, lsr #25
   14bcc:	andeq	r4, r1, r0, lsr #25
   14bd0:	andeq	r4, r1, r0, lsr #25
   14bd4:	andeq	r4, r1, r0, lsr #25
   14bd8:	andeq	r4, r1, r0, lsr #25
   14bdc:	andeq	r4, r1, r0, lsr #25
   14be0:	andeq	r4, r1, r0, lsr #25
   14be4:	andeq	r4, r1, r0, lsr #25
   14be8:	andeq	r4, r1, r0, lsr #25
   14bec:	andeq	r4, r1, r0, lsr #25
   14bf0:	andeq	r4, r1, r0, lsr #25
   14bf4:	andeq	r4, r1, r0, lsr #25
   14bf8:	andeq	r4, r1, r0, lsr #25
   14bfc:	andeq	r4, r1, r0, lsr #25
   14c00:	andeq	r4, r1, r0, lsr #25
   14c04:	andeq	r4, r1, r0, lsr #25
   14c08:	andeq	r4, r1, r0, lsr #25
   14c0c:	andeq	r4, r1, r0, lsr #25
   14c10:	andeq	r4, r1, r0, lsr r6
   14c14:	andeq	r4, r1, r8, lsl #8
   14c18:	andeq	r4, r1, r0, lsr #25
   14c1c:	andeq	r4, r1, r0, lsr r6
   14c20:	andeq	r4, r1, r0, lsr #25
   14c24:	andeq	r4, r1, r0, lsr r6
   14c28:	andeq	r4, r1, r0, lsr #25
   14c2c:	andeq	r4, r1, r0, lsr #25
   14c30:	andeq	r4, r1, r0, lsr #25
   14c34:	andeq	r4, r1, r0, lsr #25
   14c38:	andeq	r4, r1, r0, lsr #25
   14c3c:	andeq	r4, r1, r0, lsr #25
   14c40:	andeq	r4, r1, r0, lsr #25
   14c44:	andeq	r4, r1, r0, lsr #25
   14c48:	andeq	r4, r1, r0, lsr #25
   14c4c:	andeq	r4, r1, r0, lsr #25
   14c50:	andeq	r4, r1, r0, lsr #25
   14c54:	andeq	r4, r1, r0, lsr #25
   14c58:	andeq	r4, r1, r0, lsr #25
   14c5c:	andeq	r4, r1, r0, lsr #25
   14c60:	andeq	r4, r1, r0, lsr #25
   14c64:	andeq	r4, r1, r0, lsr #25
   14c68:	andeq	r4, r1, r0, lsr #25
   14c6c:	andeq	r4, r1, r0, lsr #25
   14c70:	andeq	r4, r1, r0, lsr #25
   14c74:	andeq	r4, r1, r0, lsr #25
   14c78:	andeq	r4, r1, r0, lsr #25
   14c7c:	andeq	r4, r1, r0, lsr #25
   14c80:	andeq	r4, r1, r0, lsr #25
   14c84:	andeq	r4, r1, r0, lsr #25
   14c88:	andeq	r4, r1, r0, lsr #25
   14c8c:	andeq	r4, r1, r0, lsr #25
   14c90:	andeq	r4, r1, ip, lsr #4
   14c94:	andeq	r4, r1, r0, lsr r6
   14c98:	andeq	r4, r1, ip, lsr #4
   14c9c:	andeq	r4, r1, ip, lsr #25
   14ca0:	mov	r6, r7
   14ca4:	mov	r7, #0
   14ca8:	b	14458 <__assert_fail@plt+0x30d0>
   14cac:	cmp	r9, #0
   14cb0:	mov	r2, #0
   14cb4:	beq	1471c <__assert_fail@plt+0x3394>
   14cb8:	mov	r6, #0
   14cbc:	mov	r7, r2
   14cc0:	mov	r3, r6
   14cc4:	b	14278 <__assert_fail@plt+0x2ef0>
   14cc8:	mov	r2, #0
   14ccc:	b	14730 <__assert_fail@plt+0x33a8>
   14cd0:	mov	r7, #0
   14cd4:	mov	r3, #118	; 0x76
   14cd8:	b	1443c <__assert_fail@plt+0x30b4>
   14cdc:	mov	r7, #0
   14ce0:	mov	r3, #116	; 0x74
   14ce4:	b	1456c <__assert_fail@plt+0x31e4>
   14ce8:	ldr	r3, [sp, #44]	; 0x2c
   14cec:	b	142a0 <__assert_fail@plt+0x2f18>
   14cf0:	ldr	r3, [sp, #44]	; 0x2c
   14cf4:	cmp	r3, #0
   14cf8:	bne	15168 <__assert_fail@plt+0x3de0>
   14cfc:	add	r9, r9, #1
   14d00:	mov	r6, #0
   14d04:	ldr	r3, [sp, #48]	; 0x30
   14d08:	mov	r5, #92	; 0x5c
   14d0c:	b	1452c <__assert_fail@plt+0x31a4>
   14d10:	ldr	r3, [sp, #32]
   14d14:	ldrb	r2, [r3, #1]
   14d18:	adds	r2, r2, #0
   14d1c:	movne	r2, #1
   14d20:	b	14248 <__assert_fail@plt+0x2ec0>
   14d24:	ldr	r3, [sp, #156]	; 0x9c
   14d28:	ands	r3, r3, #4
   14d2c:	beq	14d54 <__assert_fail@plt+0x39cc>
   14d30:	ldr	r2, [sp, #28]
   14d34:	add	r3, r9, #2
   14d38:	cmp	r3, r2
   14d3c:	bcs	14d50 <__assert_fail@plt+0x39c8>
   14d40:	ldr	r2, [sp, #52]	; 0x34
   14d44:	ldrb	r5, [r2, #1]
   14d48:	cmp	r5, #63	; 0x3f
   14d4c:	beq	151cc <__assert_fail@plt+0x3e44>
   14d50:	mov	r3, #0
   14d54:	mov	r5, #63	; 0x3f
   14d58:	mov	r6, r3
   14d5c:	b	14268 <__assert_fail@plt+0x2ee0>
   14d60:	ldr	r3, [sp, #44]	; 0x2c
   14d64:	cmp	r3, #0
   14d68:	bne	15168 <__assert_fail@plt+0x3de0>
   14d6c:	mov	r6, r3
   14d70:	mov	r5, #63	; 0x3f
   14d74:	b	142a0 <__assert_fail@plt+0x2f18>
   14d78:	ldr	r1, [sp, #28]
   14d7c:	mov	r2, #0
   14d80:	mov	r3, #0
   14d84:	strd	r2, [sp, #104]	; 0x68
   14d88:	cmn	r1, #1
   14d8c:	bne	14d9c <__assert_fail@plt+0x3a14>
   14d90:	ldr	r0, [sp, #32]
   14d94:	bl	1125c <strlen@plt>
   14d98:	str	r0, [sp, #28]
   14d9c:	str	r8, [sp, #76]	; 0x4c
   14da0:	mov	r3, #0
   14da4:	str	sl, [sp, #80]	; 0x50
   14da8:	ldr	sl, [sp, #32]
   14dac:	str	r5, [sp, #84]	; 0x54
   14db0:	mov	r5, r3
   14db4:	ldr	r8, [sp, #44]	; 0x2c
   14db8:	str	r7, [sp, #88]	; 0x58
   14dbc:	str	r4, [sp, #92]	; 0x5c
   14dc0:	ldr	r2, [sp, #28]
   14dc4:	add	r4, r9, r5
   14dc8:	add	r3, sp, #104	; 0x68
   14dcc:	add	r7, sl, r4
   14dd0:	add	r0, sp, #100	; 0x64
   14dd4:	mov	r1, r7
   14dd8:	sub	r2, r2, r4
   14ddc:	bl	138a4 <__assert_fail@plt+0x251c>
   14de0:	subs	r1, r0, #0
   14de4:	beq	14e30 <__assert_fail@plt+0x3aa8>
   14de8:	cmn	r1, #1
   14dec:	beq	151a8 <__assert_fail@plt+0x3e20>
   14df0:	cmn	r1, #2
   14df4:	beq	152c8 <__assert_fail@plt+0x3f40>
   14df8:	cmp	fp, #2
   14dfc:	movne	r3, #0
   14e00:	andeq	r3, r8, #1
   14e04:	cmp	r3, #0
   14e08:	bne	14f94 <__assert_fail@plt+0x3c0c>
   14e0c:	ldr	r0, [sp, #100]	; 0x64
   14e10:	add	r5, r5, r1
   14e14:	bl	1116c <iswprint@plt>
   14e18:	cmp	r0, #0
   14e1c:	add	r0, sp, #104	; 0x68
   14e20:	moveq	r6, #0
   14e24:	bl	11100 <mbsinit@plt>
   14e28:	cmp	r0, #0
   14e2c:	beq	14dc0 <__assert_fail@plt+0x3a38>
   14e30:	ldr	r3, [sp, #40]	; 0x28
   14e34:	mov	ip, r5
   14e38:	eor	r2, r6, #1
   14e3c:	ldr	r8, [sp, #76]	; 0x4c
   14e40:	ldr	sl, [sp, #80]	; 0x50
   14e44:	and	r2, r2, r3
   14e48:	ldr	r5, [sp, #84]	; 0x54
   14e4c:	ldr	r7, [sp, #88]	; 0x58
   14e50:	ldr	r4, [sp, #92]	; 0x5c
   14e54:	cmp	ip, #1
   14e58:	bls	14794 <__assert_fail@plt+0x340c>
   14e5c:	add	r1, ip, r9
   14e60:	mov	r0, #39	; 0x27
   14e64:	ldr	lr, [sp, #52]	; 0x34
   14e68:	mov	ip, #0
   14e6c:	str	r6, [sp, #52]	; 0x34
   14e70:	ldr	r6, [sp, #48]	; 0x30
   14e74:	b	14f30 <__assert_fail@plt+0x3ba8>
   14e78:	ldr	ip, [sp, #44]	; 0x2c
   14e7c:	sub	r3, fp, #2
   14e80:	clz	r3, r3
   14e84:	lsr	r3, r3, #5
   14e88:	cmp	ip, #0
   14e8c:	bne	150a0 <__assert_fail@plt+0x3d18>
   14e90:	eor	ip, r6, #1
   14e94:	ands	r3, r3, ip
   14e98:	beq	14ec8 <__assert_fail@plt+0x3b40>
   14e9c:	cmp	sl, r4
   14ea0:	add	ip, r4, #1
   14ea4:	strbhi	r0, [r8, r4]
   14ea8:	cmp	sl, ip
   14eac:	movhi	r6, #36	; 0x24
   14eb0:	strbhi	r6, [r8, ip]
   14eb4:	add	ip, r4, #2
   14eb8:	mov	r6, r3
   14ebc:	cmp	sl, ip
   14ec0:	add	r4, r4, #3
   14ec4:	strbhi	r0, [r8, ip]
   14ec8:	cmp	sl, r4
   14ecc:	movhi	r3, #92	; 0x5c
   14ed0:	strbhi	r3, [r8, r4]
   14ed4:	add	r3, r4, #1
   14ed8:	cmp	sl, r3
   14edc:	bls	14eec <__assert_fail@plt+0x3b64>
   14ee0:	lsr	ip, r5, #6
   14ee4:	add	ip, ip, #48	; 0x30
   14ee8:	strb	ip, [r8, r3]
   14eec:	add	r3, r4, #2
   14ef0:	cmp	sl, r3
   14ef4:	bls	14f04 <__assert_fail@plt+0x3b7c>
   14ef8:	ubfx	ip, r5, #3, #3
   14efc:	add	ip, ip, #48	; 0x30
   14f00:	strb	ip, [r8, r3]
   14f04:	add	r9, r9, #1
   14f08:	and	r5, r5, #7
   14f0c:	cmp	r9, r1
   14f10:	add	r5, r5, #48	; 0x30
   14f14:	add	r4, r4, #3
   14f18:	bcs	150cc <__assert_fail@plt+0x3d44>
   14f1c:	mov	ip, r2
   14f20:	cmp	sl, r4
   14f24:	strbhi	r5, [r8, r4]
   14f28:	add	r4, r4, #1
   14f2c:	ldrb	r5, [lr, #1]!
   14f30:	cmp	r2, #0
   14f34:	bne	14e78 <__assert_fail@plt+0x3af0>
   14f38:	eor	r3, ip, #1
   14f3c:	cmp	r7, #0
   14f40:	and	r3, r3, r6
   14f44:	uxtb	r3, r3
   14f48:	beq	14f5c <__assert_fail@plt+0x3bd4>
   14f4c:	cmp	sl, r4
   14f50:	movhi	r7, #92	; 0x5c
   14f54:	strbhi	r7, [r8, r4]
   14f58:	add	r4, r4, #1
   14f5c:	add	r9, r9, #1
   14f60:	cmp	r9, r1
   14f64:	bcs	150b4 <__assert_fail@plt+0x3d2c>
   14f68:	cmp	r3, #0
   14f6c:	beq	150ec <__assert_fail@plt+0x3d64>
   14f70:	cmp	sl, r4
   14f74:	add	r3, r4, #1
   14f78:	mov	r7, #0
   14f7c:	strbhi	r0, [r8, r4]
   14f80:	cmp	sl, r3
   14f84:	add	r4, r4, #2
   14f88:	mov	r6, r7
   14f8c:	strbhi	r0, [r8, r3]
   14f90:	b	14f20 <__assert_fail@plt+0x3b98>
   14f94:	cmp	r1, #1
   14f98:	beq	14e0c <__assert_fail@plt+0x3a84>
   14f9c:	add	r2, r4, #1
   14fa0:	add	r3, sl, r1
   14fa4:	add	r2, sl, r2
   14fa8:	add	r4, r3, r4
   14fac:	ldrb	r3, [r2], #1
   14fb0:	sub	r3, r3, #91	; 0x5b
   14fb4:	cmp	r3, #33	; 0x21
   14fb8:	ldrls	pc, [pc, r3, lsl #2]
   14fbc:	b	15048 <__assert_fail@plt+0x3cc0>
   14fc0:	andeq	r5, r1, r4, asr r0
   14fc4:	andeq	r5, r1, r4, asr r0
   14fc8:	andeq	r5, r1, r8, asr #32
   14fcc:	andeq	r5, r1, r4, asr r0
   14fd0:	andeq	r5, r1, r8, asr #32
   14fd4:	andeq	r5, r1, r4, asr r0
   14fd8:	andeq	r5, r1, r8, asr #32
   14fdc:	andeq	r5, r1, r8, asr #32
   14fe0:	andeq	r5, r1, r8, asr #32
   14fe4:	andeq	r5, r1, r8, asr #32
   14fe8:	andeq	r5, r1, r8, asr #32
   14fec:	andeq	r5, r1, r8, asr #32
   14ff0:	andeq	r5, r1, r8, asr #32
   14ff4:	andeq	r5, r1, r8, asr #32
   14ff8:	andeq	r5, r1, r8, asr #32
   14ffc:	andeq	r5, r1, r8, asr #32
   15000:	andeq	r5, r1, r8, asr #32
   15004:	andeq	r5, r1, r8, asr #32
   15008:	andeq	r5, r1, r8, asr #32
   1500c:	andeq	r5, r1, r8, asr #32
   15010:	andeq	r5, r1, r8, asr #32
   15014:	andeq	r5, r1, r8, asr #32
   15018:	andeq	r5, r1, r8, asr #32
   1501c:	andeq	r5, r1, r8, asr #32
   15020:	andeq	r5, r1, r8, asr #32
   15024:	andeq	r5, r1, r8, asr #32
   15028:	andeq	r5, r1, r8, asr #32
   1502c:	andeq	r5, r1, r8, asr #32
   15030:	andeq	r5, r1, r8, asr #32
   15034:	andeq	r5, r1, r8, asr #32
   15038:	andeq	r5, r1, r8, asr #32
   1503c:	andeq	r5, r1, r8, asr #32
   15040:	andeq	r5, r1, r8, asr #32
   15044:	andeq	r5, r1, r4, asr r0
   15048:	cmp	r4, r2
   1504c:	bne	14fac <__assert_fail@plt+0x3c24>
   15050:	b	14e0c <__assert_fail@plt+0x3a84>
   15054:	mov	r8, #2
   15058:	ldr	fp, [sp, #76]	; 0x4c
   1505c:	ldr	sl, [sp, #80]	; 0x50
   15060:	b	1458c <__assert_fail@plt+0x3204>
   15064:	ldr	r2, [sp, #40]	; 0x28
   15068:	str	fp, [sp, #152]	; 0x98
   1506c:	mov	fp, r8
   15070:	ldr	r8, [sp, #152]	; 0x98
   15074:	and	r2, r2, r3
   15078:	str	r2, [sp, #40]	; 0x28
   1507c:	b	1458c <__assert_fail@plt+0x3204>
   15080:	cmp	sl, r4
   15084:	movls	r0, r4
   15088:	bls	146bc <__assert_fail@plt+0x3334>
   1508c:	ldr	r3, [sp, #48]	; 0x30
   15090:	b	146ac <__assert_fail@plt+0x3324>
   15094:	str	sl, [sp, #72]	; 0x48
   15098:	ldr	sl, [sp, #44]	; 0x2c
   1509c:	b	144fc <__assert_fail@plt+0x3174>
   150a0:	str	r3, [sp, #40]	; 0x28
   150a4:	str	fp, [sp, #152]	; 0x98
   150a8:	mov	fp, r8
   150ac:	ldr	r8, [sp, #152]	; 0x98
   150b0:	b	1458c <__assert_fail@plt+0x3204>
   150b4:	str	r6, [sp, #48]	; 0x30
   150b8:	ldr	r6, [sp, #52]	; 0x34
   150bc:	b	1452c <__assert_fail@plt+0x31a4>
   150c0:	mov	r6, #0
   150c4:	ldr	r2, [sp, #40]	; 0x28
   150c8:	b	14e5c <__assert_fail@plt+0x3ad4>
   150cc:	str	r6, [sp, #48]	; 0x30
   150d0:	ldr	r6, [sp, #52]	; 0x34
   150d4:	b	14318 <__assert_fail@plt+0x2f90>
   150d8:	add	r4, r4, #4
   150dc:	mov	r6, #0
   150e0:	str	r3, [sp, #48]	; 0x30
   150e4:	mov	r5, #48	; 0x30
   150e8:	b	142a0 <__assert_fail@plt+0x2f18>
   150ec:	mov	r7, r3
   150f0:	b	14f20 <__assert_fail@plt+0x3b98>
   150f4:	mov	r3, #1
   150f8:	movw	r2, #33224	; 0x81c8
   150fc:	movt	r2, #1
   15100:	mov	r4, r3
   15104:	str	r3, [sp, #36]	; 0x24
   15108:	str	r3, [sp, #40]	; 0x28
   1510c:	str	sl, [sp, #44]	; 0x2c
   15110:	str	sl, [sp, #48]	; 0x30
   15114:	str	r3, [sp, #56]	; 0x38
   15118:	str	r2, [sp, #60]	; 0x3c
   1511c:	str	sl, [sp, #68]	; 0x44
   15120:	str	sl, [sp, #72]	; 0x48
   15124:	b	13dc8 <__assert_fail@plt+0x2a40>
   15128:	mov	r3, r6
   1512c:	mov	r5, #48	; 0x30
   15130:	mov	r6, #0
   15134:	b	142a0 <__assert_fail@plt+0x2f18>
   15138:	mov	r5, r3
   1513c:	b	14618 <__assert_fail@plt+0x3290>
   15140:	cmp	sl, r4
   15144:	mov	r5, #48	; 0x30
   15148:	movhi	r3, #48	; 0x30
   1514c:	strbhi	r3, [r8, r4]
   15150:	add	r3, r0, #2
   15154:	add	r4, r0, #3
   15158:	cmp	sl, r3
   1515c:	movhi	r1, #48	; 0x30
   15160:	strbhi	r1, [r8, r3]
   15164:	b	146f0 <__assert_fail@plt+0x3368>
   15168:	str	fp, [sp, #152]	; 0x98
   1516c:	mov	fp, r8
   15170:	ldr	r8, [sp, #152]	; 0x98
   15174:	b	1458c <__assert_fail@plt+0x3204>
   15178:	ldr	r3, [sp, #164]	; 0xa4
   1517c:	ldrb	r3, [r3]
   15180:	cmp	r3, #0
   15184:	beq	13d98 <__assert_fail@plt+0x2a10>
   15188:	ldr	r2, [sp, #164]	; 0xa4
   1518c:	cmp	sl, r4
   15190:	strbhi	r3, [fp, r4]
   15194:	add	r4, r4, #1
   15198:	ldrb	r3, [r2, #1]!
   1519c:	cmp	r3, #0
   151a0:	bne	1518c <__assert_fail@plt+0x3e04>
   151a4:	b	13d98 <__assert_fail@plt+0x2a10>
   151a8:	mov	ip, r5
   151ac:	mov	r6, #0
   151b0:	ldr	r2, [sp, #40]	; 0x28
   151b4:	ldr	r8, [sp, #76]	; 0x4c
   151b8:	ldr	sl, [sp, #80]	; 0x50
   151bc:	ldr	r5, [sp, #84]	; 0x54
   151c0:	ldr	r7, [sp, #88]	; 0x58
   151c4:	ldr	r4, [sp, #92]	; 0x5c
   151c8:	b	14e54 <__assert_fail@plt+0x3acc>
   151cc:	ldr	r2, [sp, #32]
   151d0:	ldrb	r1, [r2, r3]
   151d4:	sub	r2, r1, #33	; 0x21
   151d8:	cmp	r2, #29
   151dc:	ldrls	pc, [pc, r2, lsl #2]
   151e0:	b	152bc <__assert_fail@plt+0x3f34>
   151e4:	andeq	r5, r1, ip, asr r2
   151e8:			; <UNDEFINED> instruction: 0x000152bc
   151ec:			; <UNDEFINED> instruction: 0x000152bc
   151f0:			; <UNDEFINED> instruction: 0x000152bc
   151f4:			; <UNDEFINED> instruction: 0x000152bc
   151f8:			; <UNDEFINED> instruction: 0x000152bc
   151fc:	andeq	r5, r1, ip, asr r2
   15200:	andeq	r5, r1, ip, asr r2
   15204:	andeq	r5, r1, ip, asr r2
   15208:			; <UNDEFINED> instruction: 0x000152bc
   1520c:			; <UNDEFINED> instruction: 0x000152bc
   15210:			; <UNDEFINED> instruction: 0x000152bc
   15214:	andeq	r5, r1, ip, asr r2
   15218:			; <UNDEFINED> instruction: 0x000152bc
   1521c:	andeq	r5, r1, ip, asr r2
   15220:			; <UNDEFINED> instruction: 0x000152bc
   15224:			; <UNDEFINED> instruction: 0x000152bc
   15228:			; <UNDEFINED> instruction: 0x000152bc
   1522c:			; <UNDEFINED> instruction: 0x000152bc
   15230:			; <UNDEFINED> instruction: 0x000152bc
   15234:			; <UNDEFINED> instruction: 0x000152bc
   15238:			; <UNDEFINED> instruction: 0x000152bc
   1523c:			; <UNDEFINED> instruction: 0x000152bc
   15240:			; <UNDEFINED> instruction: 0x000152bc
   15244:			; <UNDEFINED> instruction: 0x000152bc
   15248:			; <UNDEFINED> instruction: 0x000152bc
   1524c:			; <UNDEFINED> instruction: 0x000152bc
   15250:	andeq	r5, r1, ip, asr r2
   15254:	andeq	r5, r1, ip, asr r2
   15258:	andeq	r5, r1, ip, asr r2
   1525c:	ldr	r2, [sp, #44]	; 0x2c
   15260:	cmp	r2, #0
   15264:	bne	153c0 <__assert_fail@plt+0x4038>
   15268:	cmp	sl, r4
   1526c:	mov	r5, r1
   15270:	movhi	r2, #63	; 0x3f
   15274:	mov	r9, r3
   15278:	strbhi	r2, [r8, r4]
   1527c:	add	r2, r4, #1
   15280:	cmp	sl, r2
   15284:	movhi	r0, #34	; 0x22
   15288:	strbhi	r0, [r8, r2]
   1528c:	add	r2, r4, #2
   15290:	cmp	sl, r2
   15294:	movhi	r0, #34	; 0x22
   15298:	strbhi	r0, [r8, r2]
   1529c:	add	r2, r4, #3
   152a0:	add	r4, r4, #4
   152a4:	cmp	sl, r2
   152a8:	movhi	r0, #63	; 0x3f
   152ac:	strbhi	r0, [r8, r2]
   152b0:	mov	r2, #0
   152b4:	mov	r6, r2
   152b8:	b	146f0 <__assert_fail@plt+0x3368>
   152bc:	mov	r3, #0
   152c0:	mov	r6, r3
   152c4:	b	14268 <__assert_fail@plt+0x2ee0>
   152c8:	ldr	r0, [sp, #28]
   152cc:	mov	r1, r4
   152d0:	mov	r2, r7
   152d4:	mov	r3, r5
   152d8:	mov	ip, r5
   152dc:	ldr	r8, [sp, #76]	; 0x4c
   152e0:	ldr	sl, [sp, #80]	; 0x50
   152e4:	cmp	r1, r0
   152e8:	ldr	r5, [sp, #84]	; 0x54
   152ec:	ldr	r7, [sp, #88]	; 0x58
   152f0:	ldr	r4, [sp, #92]	; 0x5c
   152f4:	bcs	15328 <__assert_fail@plt+0x3fa0>
   152f8:	ldrb	r6, [r2]
   152fc:	cmp	r6, #0
   15300:	bne	15314 <__assert_fail@plt+0x3f8c>
   15304:	b	15448 <__assert_fail@plt+0x40c0>
   15308:	ldrb	r6, [r2, #1]!
   1530c:	cmp	r6, #0
   15310:	beq	153d0 <__assert_fail@plt+0x4048>
   15314:	add	r3, r3, #1
   15318:	add	r1, r9, r3
   1531c:	cmp	r1, r0
   15320:	bcc	15308 <__assert_fail@plt+0x3f80>
   15324:	mov	ip, r3
   15328:	mov	r6, #0
   1532c:	ldr	r2, [sp, #40]	; 0x28
   15330:	b	14e54 <__assert_fail@plt+0x3acc>
   15334:	mov	r3, #1
   15338:	mov	r2, #0
   1533c:	mov	r4, r2
   15340:	str	r3, [sp, #36]	; 0x24
   15344:	str	r3, [sp, #40]	; 0x28
   15348:	str	r3, [sp, #44]	; 0x2c
   1534c:	str	r2, [sp, #48]	; 0x30
   15350:	str	r3, [sp, #56]	; 0x38
   15354:	movw	r3, #33224	; 0x81c8
   15358:	movt	r3, #1
   1535c:	str	r3, [sp, #60]	; 0x3c
   15360:	str	r2, [sp, #68]	; 0x44
   15364:	str	r2, [sp, #72]	; 0x48
   15368:	b	13dc8 <__assert_fail@plt+0x2a40>
   1536c:	mov	r2, r3
   15370:	ldr	r3, [sp, #60]	; 0x3c
   15374:	cmp	r3, #0
   15378:	moveq	r2, #0
   1537c:	andne	r2, r2, #1
   15380:	cmp	r2, #0
   15384:	beq	153b0 <__assert_fail@plt+0x4028>
   15388:	mov	r2, r3
   1538c:	ldrb	r3, [r3]
   15390:	cmp	r3, #0
   15394:	beq	153b0 <__assert_fail@plt+0x4028>
   15398:	cmp	sl, r4
   1539c:	strbhi	r3, [fp, r4]
   153a0:	add	r4, r4, #1
   153a4:	ldrb	r3, [r2, #1]!
   153a8:	cmp	r3, #0
   153ac:	bne	15398 <__assert_fail@plt+0x4010>
   153b0:	cmp	sl, r4
   153b4:	movhi	r3, #0
   153b8:	strbhi	r3, [fp, r4]
   153bc:	b	145d0 <__assert_fail@plt+0x3248>
   153c0:	str	fp, [sp, #152]	; 0x98
   153c4:	mov	fp, r8
   153c8:	ldr	r8, [sp, #152]	; 0x98
   153cc:	b	14598 <__assert_fail@plt+0x3210>
   153d0:	mov	ip, r3
   153d4:	ldr	r2, [sp, #40]	; 0x28
   153d8:	b	14e54 <__assert_fail@plt+0x3acc>
   153dc:	str	fp, [sp, #152]	; 0x98
   153e0:	mov	fp, r8
   153e4:	ldr	r8, [sp, #152]	; 0x98
   153e8:	sub	r3, r8, #2
   153ec:	clz	r3, r3
   153f0:	lsr	r3, r3, #5
   153f4:	str	r3, [sp, #40]	; 0x28
   153f8:	b	1458c <__assert_fail@plt+0x3204>
   153fc:	mov	ip, #5
   15400:	ldr	r3, [sp, #28]
   15404:	str	ip, [sp]
   15408:	ldr	r2, [sp, #156]	; 0x9c
   1540c:	ldr	ip, [sp, #164]	; 0xa4
   15410:	ldr	r0, [sp, #160]	; 0xa0
   15414:	str	r2, [sp, #4]
   15418:	ldr	r2, [sp, #32]
   1541c:	ldr	r1, [sp, #72]	; 0x48
   15420:	str	ip, [sp, #12]
   15424:	ldr	ip, [sp, #168]	; 0xa8
   15428:	str	r0, [sp, #8]
   1542c:	mov	r0, fp
   15430:	str	ip, [sp, #16]
   15434:	bl	13ce0 <__assert_fail@plt+0x2958>
   15438:	mov	r4, r0
   1543c:	b	145d0 <__assert_fail@plt+0x3248>
   15440:	mov	r8, #2
   15444:	b	1458c <__assert_fail@plt+0x3204>
   15448:	ldr	r2, [sp, #40]	; 0x28
   1544c:	b	14e54 <__assert_fail@plt+0x3acc>
   15450:	mov	r3, #0
   15454:	mov	r2, #1
   15458:	mov	r4, r3
   1545c:	strd	r2, [sp, #36]	; 0x24
   15460:	strd	r2, [sp, #44]	; 0x2c
   15464:	str	r2, [sp, #56]	; 0x38
   15468:	str	r3, [sp, #68]	; 0x44
   1546c:	str	r3, [sp, #72]	; 0x48
   15470:	movw	r3, #33244	; 0x81dc
   15474:	movt	r3, #1
   15478:	str	r3, [sp, #60]	; 0x3c
   1547c:	b	13dc8 <__assert_fail@plt+0x2a40>
   15480:	mov	r3, #0
   15484:	mov	r1, #1
   15488:	mov	r2, r3
   1548c:	str	r1, [sp, #36]	; 0x24
   15490:	str	r3, [sp, #48]	; 0x30
   15494:	str	sl, [sp, #72]	; 0x48
   15498:	b	143d0 <__assert_fail@plt+0x3048>
   1549c:	bl	11370 <abort@plt>
   154a0:	strd	r4, [sp, #-36]!	; 0xffffffdc
   154a4:	mov	r4, r0
   154a8:	mov	r5, r3
   154ac:	strd	r6, [sp, #8]
   154b0:	movw	r7, #37168	; 0x9130
   154b4:	movt	r7, #2
   154b8:	strd	r8, [sp, #16]
   154bc:	strd	sl, [sp, #24]
   154c0:	mov	sl, r1
   154c4:	mov	fp, r2
   154c8:	str	lr, [sp, #32]
   154cc:	sub	sp, sp, #60	; 0x3c
   154d0:	bl	11280 <__errno_location@plt>
   154d4:	mov	r8, r0
   154d8:	cmn	r4, #-2147483647	; 0x80000001
   154dc:	ldr	r6, [r7]
   154e0:	movne	r0, #0
   154e4:	moveq	r0, #1
   154e8:	ldr	r3, [r8]
   154ec:	orrs	r0, r0, r4, lsr #31
   154f0:	str	r3, [sp, #28]
   154f4:	bne	15684 <__assert_fail@plt+0x42fc>
   154f8:	ldr	r3, [r7, #4]
   154fc:	cmp	r3, r4
   15500:	bgt	15560 <__assert_fail@plt+0x41d8>
   15504:	add	r1, r7, #8
   15508:	sub	r2, r4, r3
   1550c:	str	r3, [sp, #52]	; 0x34
   15510:	cmp	r6, r1
   15514:	add	r2, r2, #1
   15518:	beq	1565c <__assert_fail@plt+0x42d4>
   1551c:	mov	r1, #8
   15520:	mov	r0, r6
   15524:	mvn	r3, #-2147483648	; 0x80000000
   15528:	str	r1, [sp]
   1552c:	add	r1, sp, #52	; 0x34
   15530:	bl	16904 <__assert_fail@plt+0x557c>
   15534:	mov	r6, r0
   15538:	str	r0, [r7]
   1553c:	ldr	r0, [r7, #4]
   15540:	mov	r1, #0
   15544:	ldr	r2, [sp, #52]	; 0x34
   15548:	sub	r2, r2, r0
   1554c:	add	r0, r6, r0, lsl #3
   15550:	lsl	r2, r2, #3
   15554:	bl	112a4 <memset@plt>
   15558:	ldr	r3, [sp, #52]	; 0x34
   1555c:	str	r3, [r7, #4]
   15560:	ldr	r1, [r5, #4]
   15564:	add	r0, r6, r4, lsl #3
   15568:	add	ip, r5, #8
   1556c:	mov	r3, fp
   15570:	mov	r2, sl
   15574:	ldr	r7, [r0, #4]
   15578:	str	r0, [sp, #36]	; 0x24
   1557c:	str	ip, [sp, #40]	; 0x28
   15580:	orr	r0, r1, #1
   15584:	ldr	r9, [r6, r4, lsl #3]
   15588:	str	ip, [sp, #8]
   1558c:	ldr	lr, [r5, #44]	; 0x2c
   15590:	str	r0, [sp, #4]
   15594:	ldr	ip, [r5]
   15598:	mov	r1, r9
   1559c:	str	ip, [sp, #32]
   155a0:	ldr	ip, [r5, #40]	; 0x28
   155a4:	str	ip, [sp, #12]
   155a8:	ldr	ip, [sp, #32]
   155ac:	str	lr, [sp, #16]
   155b0:	str	r0, [sp, #44]	; 0x2c
   155b4:	mov	r0, r7
   155b8:	str	ip, [sp]
   155bc:	bl	13ce0 <__assert_fail@plt+0x2958>
   155c0:	cmp	r9, r0
   155c4:	bhi	15634 <__assert_fail@plt+0x42ac>
   155c8:	add	r9, r0, #1
   155cc:	movw	r3, #37364	; 0x91f4
   155d0:	movt	r3, #2
   155d4:	cmp	r7, r3
   155d8:	str	r9, [r6, r4, lsl #3]
   155dc:	beq	155e8 <__assert_fail@plt+0x4260>
   155e0:	mov	r0, r7
   155e4:	bl	1363c <__assert_fail@plt+0x22b4>
   155e8:	mov	r0, r9
   155ec:	bl	16754 <__assert_fail@plt+0x53cc>
   155f0:	ldr	ip, [r5]
   155f4:	mov	r3, fp
   155f8:	mov	r2, sl
   155fc:	mov	r1, r9
   15600:	mov	r7, r0
   15604:	ldr	lr, [sp, #36]	; 0x24
   15608:	ldr	r4, [r5, #40]	; 0x28
   1560c:	str	r0, [lr, #4]
   15610:	ldr	lr, [r5, #44]	; 0x2c
   15614:	str	ip, [sp]
   15618:	ldr	ip, [sp, #44]	; 0x2c
   1561c:	str	ip, [sp, #4]
   15620:	ldr	ip, [sp, #40]	; 0x28
   15624:	str	r4, [sp, #12]
   15628:	str	lr, [sp, #16]
   1562c:	str	ip, [sp, #8]
   15630:	bl	13ce0 <__assert_fail@plt+0x2958>
   15634:	ldr	r3, [sp, #28]
   15638:	mov	r0, r7
   1563c:	str	r3, [r8]
   15640:	add	sp, sp, #60	; 0x3c
   15644:	ldrd	r4, [sp]
   15648:	ldrd	r6, [sp, #8]
   1564c:	ldrd	r8, [sp, #16]
   15650:	ldrd	sl, [sp, #24]
   15654:	add	sp, sp, #32
   15658:	pop	{pc}		; (ldr pc, [sp], #4)
   1565c:	mov	r1, #8
   15660:	mvn	r3, #-2147483648	; 0x80000000
   15664:	str	r1, [sp]
   15668:	add	r1, sp, #52	; 0x34
   1566c:	bl	16904 <__assert_fail@plt+0x557c>
   15670:	ldrd	r2, [r7, #8]
   15674:	mov	r6, r0
   15678:	str	r0, [r7]
   1567c:	strd	r2, [r0]
   15680:	b	1553c <__assert_fail@plt+0x41b4>
   15684:	bl	11370 <abort@plt>
   15688:	strd	r4, [sp, #-16]!
   1568c:	mov	r5, r0
   15690:	str	r6, [sp, #8]
   15694:	str	lr, [sp, #12]
   15698:	bl	11280 <__errno_location@plt>
   1569c:	mov	r4, r0
   156a0:	cmp	r5, #0
   156a4:	ldr	r0, [pc, #32]	; 156cc <__assert_fail@plt+0x4344>
   156a8:	mov	r1, #48	; 0x30
   156ac:	movne	r0, r5
   156b0:	ldr	r6, [r4]
   156b4:	bl	16a7c <__assert_fail@plt+0x56f4>
   156b8:	str	r6, [r4]
   156bc:	ldrd	r4, [sp]
   156c0:	ldr	r6, [sp, #8]
   156c4:	add	sp, sp, #12
   156c8:	pop	{pc}		; (ldr pc, [sp], #4)
   156cc:	strdeq	r9, [r2], -r4
   156d0:	ldr	r3, [pc, #12]	; 156e4 <__assert_fail@plt+0x435c>
   156d4:	cmp	r0, #0
   156d8:	moveq	r0, r3
   156dc:	ldr	r0, [r0]
   156e0:	bx	lr
   156e4:	strdeq	r9, [r2], -r4
   156e8:	ldr	r3, [pc, #12]	; 156fc <__assert_fail@plt+0x4374>
   156ec:	cmp	r0, #0
   156f0:	moveq	r0, r3
   156f4:	str	r1, [r0]
   156f8:	bx	lr
   156fc:	strdeq	r9, [r2], -r4
   15700:	ldr	r3, [pc, #52]	; 1573c <__assert_fail@plt+0x43b4>
   15704:	cmp	r0, #0
   15708:	push	{lr}		; (str lr, [sp, #-4]!)
   1570c:	lsr	lr, r1, #5
   15710:	and	r1, r1, #31
   15714:	moveq	r0, r3
   15718:	add	r3, r0, #8
   1571c:	ldr	ip, [r3, lr, lsl #2]
   15720:	lsr	r0, ip, r1
   15724:	eor	r2, r2, r0
   15728:	and	r0, r0, #1
   1572c:	and	r2, r2, #1
   15730:	eor	r1, ip, r2, lsl r1
   15734:	str	r1, [r3, lr, lsl #2]
   15738:	pop	{pc}		; (ldr pc, [sp], #4)
   1573c:	strdeq	r9, [r2], -r4
   15740:	ldr	r3, [pc, #16]	; 15758 <__assert_fail@plt+0x43d0>
   15744:	cmp	r0, #0
   15748:	movne	r3, r0
   1574c:	ldr	r0, [r3, #4]
   15750:	str	r1, [r3, #4]
   15754:	bx	lr
   15758:	strdeq	r9, [r2], -r4
   1575c:	ldr	r3, [pc, #48]	; 15794 <__assert_fail@plt+0x440c>
   15760:	cmp	r0, #0
   15764:	mov	ip, #10
   15768:	moveq	r0, r3
   1576c:	cmp	r2, #0
   15770:	cmpne	r1, #0
   15774:	str	ip, [r0]
   15778:	beq	15788 <__assert_fail@plt+0x4400>
   1577c:	str	r1, [r0, #40]	; 0x28
   15780:	str	r2, [r0, #44]	; 0x2c
   15784:	bx	lr
   15788:	str	r4, [sp, #-8]!
   1578c:	str	lr, [sp, #4]
   15790:	bl	11370 <abort@plt>
   15794:	strdeq	r9, [r2], -r4
   15798:	strd	r4, [sp, #-28]!	; 0xffffffe4
   1579c:	strd	r6, [sp, #8]
   157a0:	mov	r7, r0
   157a4:	mov	r6, r1
   157a8:	strd	r8, [sp, #16]
   157ac:	mov	r8, r2
   157b0:	mov	r9, r3
   157b4:	str	lr, [sp, #24]
   157b8:	sub	sp, sp, #28
   157bc:	ldr	r4, [sp, #56]	; 0x38
   157c0:	ldr	ip, [pc, #104]	; 15830 <__assert_fail@plt+0x44a8>
   157c4:	cmp	r4, #0
   157c8:	moveq	r4, ip
   157cc:	bl	11280 <__errno_location@plt>
   157d0:	ldr	ip, [r4, #44]	; 0x2c
   157d4:	mov	r5, r0
   157d8:	mov	r1, r6
   157dc:	add	lr, r4, #8
   157e0:	mov	r3, r9
   157e4:	ldr	r6, [r5]
   157e8:	mov	r2, r8
   157ec:	mov	r0, r7
   157f0:	str	ip, [sp, #16]
   157f4:	ldr	ip, [r4, #40]	; 0x28
   157f8:	str	lr, [sp, #8]
   157fc:	str	ip, [sp, #12]
   15800:	ldr	ip, [r4, #4]
   15804:	str	ip, [sp, #4]
   15808:	ldr	ip, [r4]
   1580c:	str	ip, [sp]
   15810:	bl	13ce0 <__assert_fail@plt+0x2958>
   15814:	str	r6, [r5]
   15818:	add	sp, sp, #28
   1581c:	ldrd	r4, [sp]
   15820:	ldrd	r6, [sp, #8]
   15824:	ldrd	r8, [sp, #16]
   15828:	add	sp, sp, #24
   1582c:	pop	{pc}		; (ldr pc, [sp], #4)
   15830:	strdeq	r9, [r2], -r4
   15834:	strd	r4, [sp, #-36]!	; 0xffffffdc
   15838:	cmp	r3, #0
   1583c:	ldr	r4, [pc, #220]	; 15920 <__assert_fail@plt+0x4598>
   15840:	movne	r4, r3
   15844:	strd	r6, [sp, #8]
   15848:	mov	r6, r2
   1584c:	strd	r8, [sp, #16]
   15850:	mov	r9, r0
   15854:	strd	sl, [sp, #24]
   15858:	mov	sl, r1
   1585c:	str	lr, [sp, #32]
   15860:	sub	sp, sp, #44	; 0x2c
   15864:	bl	11280 <__errno_location@plt>
   15868:	ldr	r5, [r4, #4]
   1586c:	mov	r7, r0
   15870:	mov	r1, #0
   15874:	add	r8, r4, #8
   15878:	mov	r3, sl
   1587c:	ldr	ip, [r4, #44]	; 0x2c
   15880:	mov	r2, r9
   15884:	mov	r0, r1
   15888:	ldr	lr, [r7]
   1588c:	cmp	r6, r1
   15890:	orreq	r5, r5, #1
   15894:	str	ip, [sp, #16]
   15898:	ldr	ip, [r4, #40]	; 0x28
   1589c:	stmib	sp, {r5, r8, ip}
   158a0:	ldr	ip, [r4]
   158a4:	str	lr, [sp, #28]
   158a8:	str	ip, [sp]
   158ac:	bl	13ce0 <__assert_fail@plt+0x2958>
   158b0:	add	r1, r0, #1
   158b4:	mov	fp, r0
   158b8:	mov	r0, r1
   158bc:	str	r1, [sp, #36]	; 0x24
   158c0:	bl	16754 <__assert_fail@plt+0x53cc>
   158c4:	ldr	ip, [r4, #44]	; 0x2c
   158c8:	mov	r3, sl
   158cc:	mov	r2, r9
   158d0:	ldr	r1, [sp, #36]	; 0x24
   158d4:	str	ip, [sp, #16]
   158d8:	ldr	ip, [r4, #40]	; 0x28
   158dc:	str	r0, [sp, #32]
   158e0:	stmib	sp, {r5, r8, ip}
   158e4:	ldr	ip, [r4]
   158e8:	str	ip, [sp]
   158ec:	bl	13ce0 <__assert_fail@plt+0x2958>
   158f0:	ldr	lr, [sp, #28]
   158f4:	cmp	r6, #0
   158f8:	ldr	r0, [sp, #32]
   158fc:	str	lr, [r7]
   15900:	strne	fp, [r6]
   15904:	add	sp, sp, #44	; 0x2c
   15908:	ldrd	r4, [sp]
   1590c:	ldrd	r6, [sp, #8]
   15910:	ldrd	r8, [sp, #16]
   15914:	ldrd	sl, [sp, #24]
   15918:	add	sp, sp, #32
   1591c:	pop	{pc}		; (ldr pc, [sp], #4)
   15920:	strdeq	r9, [r2], -r4
   15924:	mov	r3, r2
   15928:	mov	r2, #0
   1592c:	b	15834 <__assert_fail@plt+0x44ac>
   15930:	strd	r4, [sp, #-24]!	; 0xffffffe8
   15934:	movw	r5, #37168	; 0x9130
   15938:	movt	r5, #2
   1593c:	ldr	r3, [r5, #4]
   15940:	strd	r6, [sp, #8]
   15944:	str	r8, [sp, #16]
   15948:	str	lr, [sp, #20]
   1594c:	ldr	r7, [r5]
   15950:	cmp	r3, #1
   15954:	ble	15978 <__assert_fail@plt+0x45f0>
   15958:	mov	r4, #1
   1595c:	add	r6, r7, #4
   15960:	ldr	r0, [r6, r4, lsl #3]
   15964:	add	r4, r4, #1
   15968:	bl	1363c <__assert_fail@plt+0x22b4>
   1596c:	ldr	r3, [r5, #4]
   15970:	cmp	r3, r4
   15974:	bgt	15960 <__assert_fail@plt+0x45d8>
   15978:	ldr	r0, [r7, #4]
   1597c:	movw	r4, #37364	; 0x91f4
   15980:	movt	r4, #2
   15984:	cmp	r0, r4
   15988:	beq	1599c <__assert_fail@plt+0x4614>
   1598c:	bl	1363c <__assert_fail@plt+0x22b4>
   15990:	mov	r3, #256	; 0x100
   15994:	str	r3, [r5, #8]
   15998:	str	r4, [r5, #12]
   1599c:	ldr	r4, [pc, #44]	; 159d0 <__assert_fail@plt+0x4648>
   159a0:	cmp	r7, r4
   159a4:	beq	159b4 <__assert_fail@plt+0x462c>
   159a8:	mov	r0, r7
   159ac:	bl	1363c <__assert_fail@plt+0x22b4>
   159b0:	str	r4, [r5]
   159b4:	mov	r3, #1
   159b8:	ldrd	r6, [sp, #8]
   159bc:	str	r3, [r5, #4]
   159c0:	ldrd	r4, [sp]
   159c4:	ldr	r8, [sp, #16]
   159c8:	add	sp, sp, #20
   159cc:	pop	{pc}		; (ldr pc, [sp], #4)
   159d0:	andeq	r9, r2, r8, lsr r1
   159d4:	ldr	r3, [pc, #4]	; 159e0 <__assert_fail@plt+0x4658>
   159d8:	mvn	r2, #0
   159dc:	b	154a0 <__assert_fail@plt+0x4118>
   159e0:	strdeq	r9, [r2], -r4
   159e4:	ldr	r3, [pc]	; 159ec <__assert_fail@plt+0x4664>
   159e8:	b	154a0 <__assert_fail@plt+0x4118>
   159ec:	strdeq	r9, [r2], -r4
   159f0:	mov	r1, r0
   159f4:	ldr	r3, [pc, #8]	; 15a04 <__assert_fail@plt+0x467c>
   159f8:	mvn	r2, #0
   159fc:	mov	r0, #0
   15a00:	b	154a0 <__assert_fail@plt+0x4118>
   15a04:	strdeq	r9, [r2], -r4
   15a08:	mov	r2, r1
   15a0c:	ldr	r3, [pc, #8]	; 15a1c <__assert_fail@plt+0x4694>
   15a10:	mov	r1, r0
   15a14:	mov	r0, #0
   15a18:	b	154a0 <__assert_fail@plt+0x4118>
   15a1c:	strdeq	r9, [r2], -r4
   15a20:	strd	r4, [sp, #-12]!
   15a24:	mov	r5, r2
   15a28:	mov	r4, r0
   15a2c:	str	lr, [sp, #8]
   15a30:	sub	sp, sp, #52	; 0x34
   15a34:	mov	r0, sp
   15a38:	bl	13b3c <__assert_fail@plt+0x27b4>
   15a3c:	mov	r3, sp
   15a40:	mov	r1, r5
   15a44:	mov	r0, r4
   15a48:	mvn	r2, #0
   15a4c:	bl	154a0 <__assert_fail@plt+0x4118>
   15a50:	add	sp, sp, #52	; 0x34
   15a54:	ldrd	r4, [sp]
   15a58:	add	sp, sp, #8
   15a5c:	pop	{pc}		; (ldr pc, [sp], #4)
   15a60:	strd	r4, [sp, #-16]!
   15a64:	mov	r5, r2
   15a68:	mov	r4, r0
   15a6c:	str	r6, [sp, #8]
   15a70:	mov	r6, r3
   15a74:	str	lr, [sp, #12]
   15a78:	sub	sp, sp, #48	; 0x30
   15a7c:	mov	r0, sp
   15a80:	bl	13b3c <__assert_fail@plt+0x27b4>
   15a84:	mov	r3, sp
   15a88:	mov	r2, r6
   15a8c:	mov	r1, r5
   15a90:	mov	r0, r4
   15a94:	bl	154a0 <__assert_fail@plt+0x4118>
   15a98:	add	sp, sp, #48	; 0x30
   15a9c:	ldrd	r4, [sp]
   15aa0:	ldr	r6, [sp, #8]
   15aa4:	add	sp, sp, #12
   15aa8:	pop	{pc}		; (ldr pc, [sp], #4)
   15aac:	mov	r2, r1
   15ab0:	mov	r1, r0
   15ab4:	mov	r0, #0
   15ab8:	b	15a20 <__assert_fail@plt+0x4698>
   15abc:	mov	r3, r2
   15ac0:	mov	r2, r1
   15ac4:	mov	r1, r0
   15ac8:	mov	r0, #0
   15acc:	b	15a60 <__assert_fail@plt+0x46d8>
   15ad0:	ldr	ip, [pc, #140]	; 15b64 <__assert_fail@plt+0x47dc>
   15ad4:	strd	r4, [sp, #-28]!	; 0xffffffe4
   15ad8:	ldrd	r4, [ip]
   15adc:	strd	r6, [sp, #8]
   15ae0:	ldrd	r6, [ip, #8]
   15ae4:	strd	r8, [sp, #16]
   15ae8:	lsr	r9, r2, #5
   15aec:	str	lr, [sp, #24]
   15af0:	sub	sp, sp, #52	; 0x34
   15af4:	and	lr, r2, #31
   15af8:	add	r8, sp, #8
   15afc:	mov	r2, r1
   15b00:	strd	r4, [sp]
   15b04:	mov	r1, r0
   15b08:	mov	r3, sp
   15b0c:	strd	r6, [sp, #8]
   15b10:	mov	r0, #0
   15b14:	ldrd	r4, [ip, #16]
   15b18:	ldrd	r6, [ip, #24]
   15b1c:	strd	r4, [sp, #16]
   15b20:	ldrd	r4, [ip, #32]
   15b24:	strd	r6, [sp, #24]
   15b28:	ldrd	r6, [ip, #40]	; 0x28
   15b2c:	strd	r4, [sp, #32]
   15b30:	strd	r6, [sp, #40]	; 0x28
   15b34:	ldr	ip, [r8, r9, lsl #2]
   15b38:	mvn	r4, ip, lsr lr
   15b3c:	and	r4, r4, #1
   15b40:	eor	lr, ip, r4, lsl lr
   15b44:	str	lr, [r8, r9, lsl #2]
   15b48:	bl	154a0 <__assert_fail@plt+0x4118>
   15b4c:	add	sp, sp, #52	; 0x34
   15b50:	ldrd	r4, [sp]
   15b54:	ldrd	r6, [sp, #8]
   15b58:	ldrd	r8, [sp, #16]
   15b5c:	add	sp, sp, #24
   15b60:	pop	{pc}		; (ldr pc, [sp], #4)
   15b64:	strdeq	r9, [r2], -r4
   15b68:	mov	r2, r1
   15b6c:	mvn	r1, #0
   15b70:	b	15ad0 <__assert_fail@plt+0x4748>
   15b74:	mov	r2, #58	; 0x3a
   15b78:	mvn	r1, #0
   15b7c:	b	15ad0 <__assert_fail@plt+0x4748>
   15b80:	mov	r2, #58	; 0x3a
   15b84:	b	15ad0 <__assert_fail@plt+0x4748>
   15b88:	strd	r4, [sp, #-20]!	; 0xffffffec
   15b8c:	strd	r6, [sp, #8]
   15b90:	mov	r6, r0
   15b94:	mov	r7, r2
   15b98:	str	lr, [sp, #16]
   15b9c:	sub	sp, sp, #100	; 0x64
   15ba0:	mov	r0, sp
   15ba4:	bl	13b3c <__assert_fail@plt+0x27b4>
   15ba8:	ldrd	r4, [sp, #8]
   15bac:	mov	r1, r7
   15bb0:	mov	r0, r6
   15bb4:	add	r3, sp, #48	; 0x30
   15bb8:	mvn	r2, #0
   15bbc:	ldrd	r6, [sp]
   15bc0:	strd	r4, [sp, #56]	; 0x38
   15bc4:	ldrd	r4, [sp, #16]
   15bc8:	strd	r6, [sp, #48]	; 0x30
   15bcc:	ldrd	r6, [sp, #32]
   15bd0:	ldr	lr, [sp, #60]	; 0x3c
   15bd4:	strd	r4, [sp, #64]	; 0x40
   15bd8:	ldrd	r4, [sp, #24]
   15bdc:	mvn	ip, lr
   15be0:	and	ip, ip, #67108864	; 0x4000000
   15be4:	strd	r4, [sp, #72]	; 0x48
   15be8:	eor	ip, ip, lr
   15bec:	ldrd	r4, [sp, #40]	; 0x28
   15bf0:	str	ip, [sp, #60]	; 0x3c
   15bf4:	strd	r6, [sp, #80]	; 0x50
   15bf8:	strd	r4, [sp, #88]	; 0x58
   15bfc:	bl	154a0 <__assert_fail@plt+0x4118>
   15c00:	add	sp, sp, #100	; 0x64
   15c04:	ldrd	r4, [sp]
   15c08:	ldrd	r6, [sp, #8]
   15c0c:	add	sp, sp, #16
   15c10:	pop	{pc}		; (ldr pc, [sp], #4)
   15c14:	ldr	ip, [pc, #156]	; 15cb8 <__assert_fail@plt+0x4930>
   15c18:	cmp	r2, #0
   15c1c:	cmpne	r1, #0
   15c20:	strd	r4, [sp, #-32]!	; 0xffffffe0
   15c24:	strd	r6, [sp, #8]
   15c28:	mov	r6, r2
   15c2c:	str	r8, [sp, #16]
   15c30:	mov	r8, r3
   15c34:	strd	sl, [sp, #20]
   15c38:	ldrd	r4, [ip]
   15c3c:	str	lr, [sp, #28]
   15c40:	sub	sp, sp, #48	; 0x30
   15c44:	mov	lr, #10
   15c48:	ldrd	r2, [ip, #8]
   15c4c:	ldrd	sl, [ip, #16]
   15c50:	strd	r4, [sp]
   15c54:	ldrd	r4, [ip, #32]
   15c58:	str	lr, [sp]
   15c5c:	strd	r2, [sp, #8]
   15c60:	strd	sl, [sp, #16]
   15c64:	ldrd	r2, [ip, #24]
   15c68:	ldrd	sl, [ip, #40]	; 0x28
   15c6c:	strd	r2, [sp, #24]
   15c70:	strd	r4, [sp, #32]
   15c74:	strd	sl, [sp, #40]	; 0x28
   15c78:	beq	15cb4 <__assert_fail@plt+0x492c>
   15c7c:	ldr	r2, [sp, #80]	; 0x50
   15c80:	mov	r7, r1
   15c84:	mov	r3, sp
   15c88:	mov	r1, r8
   15c8c:	str	r7, [sp, #40]	; 0x28
   15c90:	str	r6, [sp, #44]	; 0x2c
   15c94:	bl	154a0 <__assert_fail@plt+0x4118>
   15c98:	add	sp, sp, #48	; 0x30
   15c9c:	ldrd	r4, [sp]
   15ca0:	ldrd	r6, [sp, #8]
   15ca4:	ldr	r8, [sp, #16]
   15ca8:	ldrd	sl, [sp, #20]
   15cac:	add	sp, sp, #28
   15cb0:	pop	{pc}		; (ldr pc, [sp], #4)
   15cb4:	bl	11370 <abort@plt>
   15cb8:	strdeq	r9, [r2], -r4
   15cbc:	mvn	ip, #0
   15cc0:	push	{lr}		; (str lr, [sp, #-4]!)
   15cc4:	sub	sp, sp, #12
   15cc8:	str	ip, [sp]
   15ccc:	bl	15c14 <__assert_fail@plt+0x488c>
   15cd0:	add	sp, sp, #12
   15cd4:	pop	{pc}		; (ldr pc, [sp], #4)
   15cd8:	mvn	ip, #0
   15cdc:	push	{lr}		; (str lr, [sp, #-4]!)
   15ce0:	sub	sp, sp, #12
   15ce4:	mov	r3, r2
   15ce8:	mov	r2, r1
   15cec:	mov	r1, r0
   15cf0:	mov	r0, #0
   15cf4:	str	ip, [sp]
   15cf8:	bl	15c14 <__assert_fail@plt+0x488c>
   15cfc:	add	sp, sp, #12
   15d00:	pop	{pc}		; (ldr pc, [sp], #4)
   15d04:	push	{lr}		; (str lr, [sp, #-4]!)
   15d08:	sub	sp, sp, #12
   15d0c:	str	r3, [sp]
   15d10:	mov	r3, r2
   15d14:	mov	r2, r1
   15d18:	mov	r1, r0
   15d1c:	mov	r0, #0
   15d20:	bl	15c14 <__assert_fail@plt+0x488c>
   15d24:	add	sp, sp, #12
   15d28:	pop	{pc}		; (ldr pc, [sp], #4)
   15d2c:	ldr	r3, [pc]	; 15d34 <__assert_fail@plt+0x49ac>
   15d30:	b	154a0 <__assert_fail@plt+0x4118>
   15d34:	andeq	r9, r2, r0, asr #2
   15d38:	mov	r2, r1
   15d3c:	ldr	r3, [pc, #8]	; 15d4c <__assert_fail@plt+0x49c4>
   15d40:	mov	r1, r0
   15d44:	mov	r0, #0
   15d48:	b	154a0 <__assert_fail@plt+0x4118>
   15d4c:	andeq	r9, r2, r0, asr #2
   15d50:	ldr	r3, [pc, #4]	; 15d5c <__assert_fail@plt+0x49d4>
   15d54:	mvn	r2, #0
   15d58:	b	154a0 <__assert_fail@plt+0x4118>
   15d5c:	andeq	r9, r2, r0, asr #2
   15d60:	mov	r1, r0
   15d64:	ldr	r3, [pc, #8]	; 15d74 <__assert_fail@plt+0x49ec>
   15d68:	mvn	r2, #0
   15d6c:	mov	r0, #0
   15d70:	b	154a0 <__assert_fail@plt+0x4118>
   15d74:	andeq	r9, r2, r0, asr #2
   15d78:	strd	r4, [sp, #-16]!
   15d7c:	mov	r4, r0
   15d80:	ldr	r3, [r0, #24]
   15d84:	str	r6, [sp, #8]
   15d88:	ldr	r6, [r0, #20]
   15d8c:	str	lr, [sp, #12]
   15d90:	sub	r5, r3, r6
   15d94:	cmp	r3, r6
   15d98:	sub	r5, r5, #1
   15d9c:	beq	15e5c <__assert_fail@plt+0x4ad4>
   15da0:	ldr	r2, [r4, #16]
   15da4:	ldr	r0, [r4, #36]	; 0x24
   15da8:	ldr	r1, [r4, #28]
   15dac:	add	r3, r3, r0
   15db0:	bic	r3, r3, r0
   15db4:	sub	r0, r3, r2
   15db8:	sub	r2, r1, r2
   15dbc:	cmp	r0, r2
   15dc0:	str	r3, [r4, #24]
   15dc4:	movhi	r3, r1
   15dc8:	ldr	r2, [r4, #68]	; 0x44
   15dcc:	strhi	r1, [r4, #24]
   15dd0:	str	r3, [r4, #20]
   15dd4:	ldr	r3, [r4, #72]	; 0x48
   15dd8:	sub	r3, r3, r2
   15ddc:	cmp	r3, #3
   15de0:	bls	15e34 <__assert_fail@plt+0x4aac>
   15de4:	str	r6, [r2]
   15de8:	ldr	r2, [r4, #68]	; 0x44
   15dec:	ldr	r1, [r4, #112]	; 0x70
   15df0:	ldr	r3, [r4, #116]	; 0x74
   15df4:	add	r2, r2, #4
   15df8:	str	r2, [r4, #68]	; 0x44
   15dfc:	sub	r3, r3, r1
   15e00:	cmp	r3, #3
   15e04:	bls	15e48 <__assert_fail@plt+0x4ac0>
   15e08:	str	r5, [r1]
   15e0c:	ldr	r2, [r4]
   15e10:	ldr	r3, [r4, #112]	; 0x70
   15e14:	ldr	r6, [sp, #8]
   15e18:	add	r2, r2, #1
   15e1c:	add	r3, r3, #4
   15e20:	str	r2, [r4]
   15e24:	str	r3, [r4, #112]	; 0x70
   15e28:	ldrd	r4, [sp]
   15e2c:	add	sp, sp, #12
   15e30:	pop	{pc}		; (ldr pc, [sp], #4)
   15e34:	mov	r1, #4
   15e38:	add	r0, r4, #56	; 0x38
   15e3c:	bl	16fa4 <_obstack_newchunk@@Base>
   15e40:	ldr	r2, [r4, #68]	; 0x44
   15e44:	b	15de4 <__assert_fail@plt+0x4a5c>
   15e48:	mov	r1, #4
   15e4c:	add	r0, r4, #100	; 0x64
   15e50:	bl	16fa4 <_obstack_newchunk@@Base>
   15e54:	ldr	r1, [r4, #112]	; 0x70
   15e58:	b	15e08 <__assert_fail@plt+0x4a80>
   15e5c:	ldrb	r2, [r0, #52]	; 0x34
   15e60:	orr	r2, r2, #2
   15e64:	strb	r2, [r0, #52]	; 0x34
   15e68:	b	15da0 <__assert_fail@plt+0x4a18>
   15e6c:	strd	r4, [sp, #-20]!	; 0xffffffec
   15e70:	mov	r4, #0
   15e74:	mov	r5, r0
   15e78:	strd	r6, [sp, #8]
   15e7c:	movw	r6, #13884	; 0x363c
   15e80:	movt	r6, #1
   15e84:	str	lr, [sp, #16]
   15e88:	sub	sp, sp, #12
   15e8c:	movw	r7, #27708	; 0x6c3c
   15e90:	movt	r7, #1
   15e94:	mov	r2, r4
   15e98:	mov	r1, r4
   15e9c:	mov	r3, r7
   15ea0:	str	r6, [sp]
   15ea4:	add	r0, r0, #12
   15ea8:	str	r4, [r5]
   15eac:	str	r4, [r5, #4]
   15eb0:	str	r4, [r5, #8]
   15eb4:	bl	16f3c <_obstack_begin@@Base>
   15eb8:	mov	r3, r7
   15ebc:	mov	r2, r4
   15ec0:	str	r6, [sp]
   15ec4:	mov	r1, r4
   15ec8:	add	r0, r5, #56	; 0x38
   15ecc:	bl	16f3c <_obstack_begin@@Base>
   15ed0:	mov	r3, r7
   15ed4:	add	r0, r5, #100	; 0x64
   15ed8:	str	r6, [sp]
   15edc:	mov	r2, r4
   15ee0:	mov	r1, r4
   15ee4:	bl	16f3c <_obstack_begin@@Base>
   15ee8:	add	sp, sp, #12
   15eec:	ldrd	r4, [sp]
   15ef0:	ldrd	r6, [sp, #8]
   15ef4:	add	sp, sp, #16
   15ef8:	pop	{pc}		; (ldr pc, [sp], #4)
   15efc:	mov	r1, #0
   15f00:	str	r4, [sp, #-8]!
   15f04:	mov	r4, r0
   15f08:	add	r0, r0, #12
   15f0c:	str	lr, [sp, #4]
   15f10:	bl	1710c <_obstack_free@@Base>
   15f14:	add	r0, r4, #56	; 0x38
   15f18:	mov	r1, #0
   15f1c:	bl	1710c <_obstack_free@@Base>
   15f20:	add	r0, r4, #100	; 0x64
   15f24:	mov	r1, #0
   15f28:	ldr	r4, [sp]
   15f2c:	ldr	lr, [sp, #4]
   15f30:	add	sp, sp, #8
   15f34:	b	1710c <_obstack_free@@Base>
   15f38:	strd	r4, [sp, #-24]!	; 0xffffffe8
   15f3c:	mov	r4, r1
   15f40:	strd	r6, [sp, #8]
   15f44:	mov	r6, r0
   15f48:	add	r7, r1, #12
   15f4c:	str	r8, [sp, #16]
   15f50:	str	lr, [sp, #20]
   15f54:	b	15f6c <__assert_fail@plt+0x4be4>
   15f58:	add	r2, r3, #1
   15f5c:	cmp	r5, #0
   15f60:	str	r2, [r4, #24]
   15f64:	strb	r5, [r3]
   15f68:	beq	160a0 <__assert_fail@plt+0x4d18>
   15f6c:	mov	r0, r6
   15f70:	bl	112bc <fgetc@plt>
   15f74:	cmn	r0, #1
   15f78:	mov	r5, r0
   15f7c:	beq	15fa4 <__assert_fail@plt+0x4c1c>
   15f80:	ldr	r3, [r4, #24]
   15f84:	ldr	r2, [r4, #28]
   15f88:	cmp	r2, r3
   15f8c:	bne	15f58 <__assert_fail@plt+0x4bd0>
   15f90:	mov	r1, #1
   15f94:	mov	r0, r7
   15f98:	bl	16fa4 <_obstack_newchunk@@Base>
   15f9c:	ldr	r3, [r4, #24]
   15fa0:	b	15f58 <__assert_fail@plt+0x4bd0>
   15fa4:	ldrd	r2, [r4, #20]
   15fa8:	cmp	r3, r2
   15fac:	beq	15fd4 <__assert_fail@plt+0x4c4c>
   15fb0:	ldr	r2, [r4, #28]
   15fb4:	cmp	r3, r2
   15fb8:	beq	160e0 <__assert_fail@plt+0x4d58>
   15fbc:	add	r1, r3, #1
   15fc0:	mov	r2, #0
   15fc4:	mov	r0, r4
   15fc8:	str	r1, [r4, #24]
   15fcc:	strb	r2, [r3]
   15fd0:	bl	15d78 <__assert_fail@plt+0x49f0>
   15fd4:	ldrd	r2, [r4, #68]	; 0x44
   15fd8:	sub	r3, r3, r2
   15fdc:	cmp	r3, #3
   15fe0:	bls	160ac <__assert_fail@plt+0x4d24>
   15fe4:	mov	r3, #0
   15fe8:	str	r3, [r2]
   15fec:	ldr	r1, [r4, #64]	; 0x40
   15ff0:	ldr	r3, [r4, #68]	; 0x44
   15ff4:	add	r3, r3, #4
   15ff8:	cmp	r3, r1
   15ffc:	str	r3, [r4, #68]	; 0x44
   16000:	beq	160d0 <__assert_fail@plt+0x4d48>
   16004:	ldr	r2, [r4, #60]	; 0x3c
   16008:	str	r1, [r4, #4]
   1600c:	ldr	r0, [r4, #80]	; 0x50
   16010:	ldr	ip, [r4, #72]	; 0x48
   16014:	add	r3, r3, r0
   16018:	bic	r3, r3, r0
   1601c:	sub	r0, r3, r2
   16020:	sub	r2, ip, r2
   16024:	cmp	r0, r2
   16028:	str	r3, [r4, #68]	; 0x44
   1602c:	movhi	r3, ip
   16030:	ldr	r2, [r4, #112]	; 0x70
   16034:	strhi	ip, [r4, #68]	; 0x44
   16038:	ldr	ip, [r4, #108]	; 0x6c
   1603c:	str	r3, [r4, #64]	; 0x40
   16040:	cmp	r2, ip
   16044:	beq	160c0 <__assert_fail@plt+0x4d38>
   16048:	ldr	r1, [r4, #104]	; 0x68
   1604c:	str	ip, [r4, #8]
   16050:	ldr	r0, [r4, #124]	; 0x7c
   16054:	ldr	lr, [r4, #116]	; 0x74
   16058:	add	r3, r2, r0
   1605c:	bic	r3, r3, r0
   16060:	mov	r0, r6
   16064:	sub	r2, r3, r1
   16068:	sub	r1, lr, r1
   1606c:	cmp	r2, r1
   16070:	str	r3, [r4, #112]	; 0x70
   16074:	movhi	r3, lr
   16078:	strhi	lr, [r4, #112]	; 0x70
   1607c:	str	r3, [r4, #108]	; 0x6c
   16080:	bl	110dc <ferror@plt>
   16084:	clz	r0, r0
   16088:	ldrd	r4, [sp]
   1608c:	lsr	r0, r0, #5
   16090:	ldrd	r6, [sp, #8]
   16094:	ldr	r8, [sp, #16]
   16098:	add	sp, sp, #20
   1609c:	pop	{pc}		; (ldr pc, [sp], #4)
   160a0:	mov	r0, r4
   160a4:	bl	15d78 <__assert_fail@plt+0x49f0>
   160a8:	b	15f6c <__assert_fail@plt+0x4be4>
   160ac:	mov	r1, #4
   160b0:	add	r0, r4, #56	; 0x38
   160b4:	bl	16fa4 <_obstack_newchunk@@Base>
   160b8:	ldr	r2, [r4, #68]	; 0x44
   160bc:	b	15fe4 <__assert_fail@plt+0x4c5c>
   160c0:	ldrb	r3, [r4, #140]	; 0x8c
   160c4:	orr	r3, r3, #2
   160c8:	strb	r3, [r4, #140]	; 0x8c
   160cc:	b	16048 <__assert_fail@plt+0x4cc0>
   160d0:	ldrb	r2, [r4, #96]	; 0x60
   160d4:	orr	r2, r2, #2
   160d8:	strb	r2, [r4, #96]	; 0x60
   160dc:	b	16004 <__assert_fail@plt+0x4c7c>
   160e0:	mov	r1, #1
   160e4:	add	r0, r4, #12
   160e8:	bl	16fa4 <_obstack_newchunk@@Base>
   160ec:	ldr	r3, [r4, #24]
   160f0:	b	15fbc <__assert_fail@plt+0x4c34>
   160f4:	strd	r4, [sp, #-24]!	; 0xffffffe8
   160f8:	mov	r5, #0
   160fc:	movt	r5, #32752	; 0x7ff0
   16100:	mov	r4, r2
   16104:	strd	r6, [sp, #8]
   16108:	mov	r7, r1
   1610c:	str	r8, [sp, #16]
   16110:	mov	r8, r0
   16114:	str	lr, [sp, #20]
   16118:	mov	r2, r4
   1611c:	mov	r1, r7
   16120:	mov	r0, r8
   16124:	bl	110a0 <read@plt>
   16128:	subs	r6, r0, #0
   1612c:	bge	16160 <__assert_fail@plt+0x4dd8>
   16130:	bl	11280 <__errno_location@plt>
   16134:	ldr	r3, [r0]
   16138:	cmp	r3, #4
   1613c:	beq	16118 <__assert_fail@plt+0x4d90>
   16140:	cmp	r4, r5
   16144:	mov	r4, r5
   16148:	movls	r2, #0
   1614c:	movhi	r2, #1
   16150:	cmp	r3, #22
   16154:	movne	r2, #0
   16158:	cmp	r2, #0
   1615c:	bne	16118 <__assert_fail@plt+0x4d90>
   16160:	mov	r0, r6
   16164:	ldrd	r4, [sp]
   16168:	ldrd	r6, [sp, #8]
   1616c:	ldr	r8, [sp, #16]
   16170:	add	sp, sp, #20
   16174:	pop	{pc}		; (ldr pc, [sp], #4)
   16178:	cmp	r1, #0
   1617c:	strd	r4, [sp, #-16]!
   16180:	mov	ip, r3
   16184:	str	r6, [sp, #8]
   16188:	mov	r4, r0
   1618c:	str	lr, [sp, #12]
   16190:	sub	sp, sp, #32
   16194:	ldr	r5, [sp, #48]	; 0x30
   16198:	ldr	r6, [sp, #52]	; 0x34
   1619c:	beq	162e0 <__assert_fail@plt+0x4f58>
   161a0:	mov	r3, r1
   161a4:	mov	r1, #1
   161a8:	stm	sp, {r2, ip}
   161ac:	movw	r2, #33356	; 0x824c
   161b0:	movt	r2, #1
   161b4:	bl	112e0 <__fprintf_chk@plt>
   161b8:	mov	r2, #5
   161bc:	movw	r1, #33376	; 0x8260
   161c0:	movt	r1, #1
   161c4:	mov	r0, #0
   161c8:	bl	11124 <dcgettext@plt>
   161cc:	movw	ip, #2022	; 0x7e6
   161d0:	mov	r3, r0
   161d4:	mov	r1, #1
   161d8:	movw	r2, #34104	; 0x8538
   161dc:	movt	r2, #1
   161e0:	mov	r0, r4
   161e4:	str	ip, [sp]
   161e8:	bl	112e0 <__fprintf_chk@plt>
   161ec:	mov	r1, r4
   161f0:	mov	r0, #10
   161f4:	bl	11118 <fputc_unlocked@plt>
   161f8:	mov	r2, #5
   161fc:	movw	r1, #33380	; 0x8264
   16200:	movt	r1, #1
   16204:	mov	r0, #0
   16208:	bl	11124 <dcgettext@plt>
   1620c:	mov	r2, r0
   16210:	mov	r1, #1
   16214:	movw	r3, #33552	; 0x8310
   16218:	movt	r3, #1
   1621c:	mov	r0, r4
   16220:	bl	112e0 <__fprintf_chk@plt>
   16224:	mov	r1, r4
   16228:	mov	r0, #10
   1622c:	bl	11118 <fputc_unlocked@plt>
   16230:	cmp	r6, #9
   16234:	ldrls	pc, [pc, r6, lsl #2]
   16238:	b	1654c <__assert_fail@plt+0x51c4>
   1623c:	andeq	r6, r1, ip, asr #5
   16240:	strdeq	r6, [r1], -ip
   16244:	andeq	r6, r1, r8, lsr r3
   16248:	andeq	r6, r1, r8, ror r3
   1624c:	andeq	r6, r1, r0, asr #7
   16250:	strdeq	r6, [r1], -r8
   16254:	andeq	r6, r1, r0, asr #8
   16258:	muleq	r1, r4, r4
   1625c:	andeq	r6, r1, ip, ror #9
   16260:	andeq	r6, r1, r4, ror #4
   16264:	movw	r1, #33856	; 0x8440
   16268:	movt	r1, #1
   1626c:	mov	r2, #5
   16270:	mov	r0, #0
   16274:	bl	11124 <dcgettext@plt>
   16278:	ldr	lr, [r5, #4]
   1627c:	mov	r2, r0
   16280:	mov	r1, #1
   16284:	mov	r0, r4
   16288:	ldr	r3, [r5, #8]
   1628c:	ldr	ip, [r5, #32]
   16290:	str	lr, [sp]
   16294:	ldr	lr, [r5, #12]
   16298:	str	ip, [sp, #28]
   1629c:	ldr	ip, [r5, #28]
   162a0:	str	r3, [sp, #4]
   162a4:	ldr	r3, [r5, #16]
   162a8:	str	lr, [sp, #8]
   162ac:	ldr	lr, [r5, #20]
   162b0:	str	ip, [sp, #24]
   162b4:	ldr	ip, [r5, #24]
   162b8:	str	r3, [sp, #12]
   162bc:	ldr	r3, [r5]
   162c0:	str	lr, [sp, #16]
   162c4:	str	ip, [sp, #20]
   162c8:	bl	112e0 <__fprintf_chk@plt>
   162cc:	add	sp, sp, #32
   162d0:	ldrd	r4, [sp]
   162d4:	ldr	r6, [sp, #8]
   162d8:	add	sp, sp, #12
   162dc:	pop	{pc}		; (ldr pc, [sp], #4)
   162e0:	mov	r3, r2
   162e4:	mov	r1, #1
   162e8:	str	ip, [sp]
   162ec:	movw	r2, #33368	; 0x8258
   162f0:	movt	r2, #1
   162f4:	bl	112e0 <__fprintf_chk@plt>
   162f8:	b	161b8 <__assert_fail@plt+0x4e30>
   162fc:	mov	r2, #5
   16300:	movw	r1, #33588	; 0x8334
   16304:	movt	r1, #1
   16308:	mov	r0, #0
   1630c:	bl	11124 <dcgettext@plt>
   16310:	ldr	r3, [r5]
   16314:	mov	r2, r0
   16318:	mov	r1, #1
   1631c:	mov	r0, r4
   16320:	add	sp, sp, #32
   16324:	ldrd	r4, [sp]
   16328:	ldr	r6, [sp, #8]
   1632c:	ldr	lr, [sp, #12]
   16330:	add	sp, sp, #16
   16334:	b	112e0 <__fprintf_chk@plt>
   16338:	mov	r2, #5
   1633c:	movw	r1, #33604	; 0x8344
   16340:	movt	r1, #1
   16344:	mov	r0, #0
   16348:	bl	11124 <dcgettext@plt>
   1634c:	ldm	r5, {r3, ip}
   16350:	mov	r2, r0
   16354:	mov	r1, #1
   16358:	mov	r0, r4
   1635c:	str	ip, [sp, #48]	; 0x30
   16360:	add	sp, sp, #32
   16364:	ldrd	r4, [sp]
   16368:	ldr	r6, [sp, #8]
   1636c:	ldr	lr, [sp, #12]
   16370:	add	sp, sp, #16
   16374:	b	112e0 <__fprintf_chk@plt>
   16378:	mov	r2, #5
   1637c:	movw	r1, #33628	; 0x835c
   16380:	movt	r1, #1
   16384:	mov	r0, #0
   16388:	bl	11124 <dcgettext@plt>
   1638c:	ldm	r5, {r3, lr}
   16390:	mov	r2, r0
   16394:	mov	r1, #1
   16398:	mov	r0, r4
   1639c:	ldr	ip, [r5, #8]
   163a0:	str	lr, [sp, #48]	; 0x30
   163a4:	str	ip, [sp, #52]	; 0x34
   163a8:	add	sp, sp, #32
   163ac:	ldrd	r4, [sp]
   163b0:	ldr	r6, [sp, #8]
   163b4:	ldr	lr, [sp, #12]
   163b8:	add	sp, sp, #16
   163bc:	b	112e0 <__fprintf_chk@plt>
   163c0:	mov	r2, #5
   163c4:	movw	r1, #33656	; 0x8378
   163c8:	movt	r1, #1
   163cc:	mov	r0, #0
   163d0:	bl	11124 <dcgettext@plt>
   163d4:	ldmib	r5, {r3, ip, lr}
   163d8:	mov	r2, r0
   163dc:	mov	r1, #1
   163e0:	mov	r0, r4
   163e4:	str	r3, [sp]
   163e8:	ldr	r3, [r5]
   163ec:	stmib	sp, {ip, lr}
   163f0:	bl	112e0 <__fprintf_chk@plt>
   163f4:	b	162cc <__assert_fail@plt+0x4f44>
   163f8:	mov	r2, #5
   163fc:	movw	r1, #33688	; 0x8398
   16400:	movt	r1, #1
   16404:	mov	r0, #0
   16408:	bl	11124 <dcgettext@plt>
   1640c:	ldmib	r5, {ip, lr}
   16410:	mov	r2, r0
   16414:	mov	r1, #1
   16418:	mov	r0, r4
   1641c:	ldr	r3, [r5, #16]
   16420:	str	ip, [sp]
   16424:	ldr	ip, [r5, #12]
   16428:	str	r3, [sp, #12]
   1642c:	ldr	r3, [r5]
   16430:	str	lr, [sp, #4]
   16434:	str	ip, [sp, #8]
   16438:	bl	112e0 <__fprintf_chk@plt>
   1643c:	b	162cc <__assert_fail@plt+0x4f44>
   16440:	mov	r2, #5
   16444:	movw	r1, #33724	; 0x83bc
   16448:	movt	r1, #1
   1644c:	mov	r0, #0
   16450:	bl	11124 <dcgettext@plt>
   16454:	ldr	lr, [r5, #4]
   16458:	mov	r2, r0
   1645c:	mov	r1, #1
   16460:	mov	r0, r4
   16464:	ldr	r3, [r5, #8]
   16468:	ldr	ip, [r5, #20]
   1646c:	str	lr, [sp]
   16470:	ldr	lr, [r5, #12]
   16474:	str	ip, [sp, #16]
   16478:	ldr	ip, [r5, #16]
   1647c:	str	r3, [sp, #4]
   16480:	ldr	r3, [r5]
   16484:	str	lr, [sp, #8]
   16488:	str	ip, [sp, #12]
   1648c:	bl	112e0 <__fprintf_chk@plt>
   16490:	b	162cc <__assert_fail@plt+0x4f44>
   16494:	mov	r2, #5
   16498:	movw	r1, #33764	; 0x83e4
   1649c:	movt	r1, #1
   164a0:	mov	r0, #0
   164a4:	bl	11124 <dcgettext@plt>
   164a8:	ldmib	r5, {r3, ip}
   164ac:	mov	r2, r0
   164b0:	mov	r1, #1
   164b4:	mov	r0, r4
   164b8:	ldr	lr, [r5, #24]
   164bc:	str	r3, [sp]
   164c0:	ldr	r3, [r5, #12]
   164c4:	str	lr, [sp, #20]
   164c8:	ldr	lr, [r5, #20]
   164cc:	str	ip, [sp, #4]
   164d0:	ldr	ip, [r5, #16]
   164d4:	str	r3, [sp, #8]
   164d8:	ldr	r3, [r5]
   164dc:	str	ip, [sp, #12]
   164e0:	str	lr, [sp, #16]
   164e4:	bl	112e0 <__fprintf_chk@plt>
   164e8:	b	162cc <__assert_fail@plt+0x4f44>
   164ec:	mov	r2, #5
   164f0:	movw	r1, #33808	; 0x8410
   164f4:	movt	r1, #1
   164f8:	mov	r0, #0
   164fc:	bl	11124 <dcgettext@plt>
   16500:	ldmib	r5, {ip, lr}
   16504:	mov	r2, r0
   16508:	mov	r1, #1
   1650c:	mov	r0, r4
   16510:	ldr	r3, [r5, #28]
   16514:	str	ip, [sp]
   16518:	ldr	ip, [r5, #12]
   1651c:	str	r3, [sp, #24]
   16520:	ldr	r3, [r5, #24]
   16524:	str	lr, [sp, #4]
   16528:	ldr	lr, [r5, #16]
   1652c:	str	ip, [sp, #8]
   16530:	ldr	ip, [r5, #20]
   16534:	str	r3, [sp, #20]
   16538:	ldr	r3, [r5]
   1653c:	str	lr, [sp, #12]
   16540:	str	ip, [sp, #16]
   16544:	bl	112e0 <__fprintf_chk@plt>
   16548:	b	162cc <__assert_fail@plt+0x4f44>
   1654c:	movw	r1, #33908	; 0x8474
   16550:	movt	r1, #1
   16554:	b	1626c <__assert_fail@plt+0x4ee4>
   16558:	strd	r4, [sp, #-12]!
   1655c:	str	lr, [sp, #8]
   16560:	sub	sp, sp, #12
   16564:	ldr	r5, [sp, #24]
   16568:	ldr	ip, [r5]
   1656c:	cmp	ip, #0
   16570:	beq	1658c <__assert_fail@plt+0x5204>
   16574:	mov	lr, r5
   16578:	mov	ip, #0
   1657c:	ldr	r4, [lr, #4]!
   16580:	add	ip, ip, #1
   16584:	cmp	r4, #0
   16588:	bne	1657c <__assert_fail@plt+0x51f4>
   1658c:	stm	sp, {r5, ip}
   16590:	bl	16178 <__assert_fail@plt+0x4df0>
   16594:	add	sp, sp, #12
   16598:	ldrd	r4, [sp]
   1659c:	add	sp, sp, #8
   165a0:	pop	{pc}		; (ldr pc, [sp], #4)
   165a4:	strd	r4, [sp, #-16]!
   165a8:	mov	ip, #0
   165ac:	str	r6, [sp, #8]
   165b0:	str	lr, [sp, #12]
   165b4:	sub	sp, sp, #48	; 0x30
   165b8:	ldr	r5, [sp, #64]	; 0x40
   165bc:	add	r6, sp, #8
   165c0:	mov	r4, r6
   165c4:	ldr	lr, [r5], #4
   165c8:	cmp	lr, #0
   165cc:	str	lr, [r4], #4
   165d0:	beq	165e0 <__assert_fail@plt+0x5258>
   165d4:	add	ip, ip, #1
   165d8:	cmp	ip, #10
   165dc:	bne	165c4 <__assert_fail@plt+0x523c>
   165e0:	stm	sp, {r6, ip}
   165e4:	bl	16178 <__assert_fail@plt+0x4df0>
   165e8:	add	sp, sp, #48	; 0x30
   165ec:	ldrd	r4, [sp]
   165f0:	ldr	r6, [sp, #8]
   165f4:	add	sp, sp, #12
   165f8:	pop	{pc}		; (ldr pc, [sp], #4)
   165fc:	push	{r3}		; (str r3, [sp, #-4]!)
   16600:	mov	ip, #0
   16604:	strd	r4, [sp, #-12]!
   16608:	str	lr, [sp, #8]
   1660c:	sub	sp, sp, #56	; 0x38
   16610:	add	r3, sp, #72	; 0x48
   16614:	add	r5, sp, #16
   16618:	mov	r4, r3
   1661c:	mov	lr, r5
   16620:	str	r3, [sp, #12]
   16624:	ldr	r3, [r4], #4
   16628:	cmp	r3, #0
   1662c:	str	r3, [lr], #4
   16630:	beq	16640 <__assert_fail@plt+0x52b8>
   16634:	add	ip, ip, #1
   16638:	cmp	ip, #10
   1663c:	bne	16624 <__assert_fail@plt+0x529c>
   16640:	ldr	r3, [sp, #68]	; 0x44
   16644:	stm	sp, {r5, ip}
   16648:	bl	16178 <__assert_fail@plt+0x4df0>
   1664c:	add	sp, sp, #56	; 0x38
   16650:	ldrd	r4, [sp]
   16654:	ldr	lr, [sp, #8]
   16658:	add	sp, sp, #12
   1665c:	add	sp, sp, #4
   16660:	bx	lr
   16664:	movw	r3, #37268	; 0x9194
   16668:	movt	r3, #2
   1666c:	str	r4, [sp, #-8]!
   16670:	mov	r0, #10
   16674:	ldr	r1, [r3]
   16678:	str	lr, [sp, #4]
   1667c:	bl	11118 <fputc_unlocked@plt>
   16680:	mov	r2, #5
   16684:	movw	r1, #33968	; 0x84b0
   16688:	movt	r1, #1
   1668c:	mov	r0, #0
   16690:	bl	11124 <dcgettext@plt>
   16694:	mov	r1, r0
   16698:	movw	r2, #33988	; 0x84c4
   1669c:	movt	r2, #1
   166a0:	mov	r0, #1
   166a4:	bl	112c8 <__printf_chk@plt>
   166a8:	mov	r2, #5
   166ac:	movw	r1, #34012	; 0x84dc
   166b0:	movt	r1, #1
   166b4:	mov	r0, #0
   166b8:	bl	11124 <dcgettext@plt>
   166bc:	mov	r1, r0
   166c0:	movw	r3, #32212	; 0x7dd4
   166c4:	movt	r3, #1
   166c8:	movw	r2, #32252	; 0x7dfc
   166cc:	movt	r2, #1
   166d0:	mov	r0, #1
   166d4:	bl	112c8 <__printf_chk@plt>
   166d8:	mov	r2, #5
   166dc:	movw	r1, #34032	; 0x84f0
   166e0:	movt	r1, #1
   166e4:	mov	r0, #0
   166e8:	bl	11124 <dcgettext@plt>
   166ec:	mov	r1, r0
   166f0:	movw	r2, #34072	; 0x8518
   166f4:	movt	r2, #1
   166f8:	mov	r0, #1
   166fc:	ldr	r4, [sp]
   16700:	ldr	lr, [sp, #4]
   16704:	add	sp, sp, #8
   16708:	b	112c8 <__printf_chk@plt>
   1670c:	str	r4, [sp, #-8]!
   16710:	str	lr, [sp, #4]
   16714:	bl	16c3c <__assert_fail@plt+0x58b4>
   16718:	cmp	r0, #0
   1671c:	beq	1672c <__assert_fail@plt+0x53a4>
   16720:	ldr	r4, [sp]
   16724:	add	sp, sp, #4
   16728:	pop	{pc}		; (ldr pc, [sp], #4)
   1672c:	bl	16b84 <__assert_fail@plt+0x57fc>
   16730:	str	r4, [sp, #-8]!
   16734:	str	lr, [sp, #4]
   16738:	bl	16c3c <__assert_fail@plt+0x58b4>
   1673c:	cmp	r0, #0
   16740:	beq	16750 <__assert_fail@plt+0x53c8>
   16744:	ldr	r4, [sp]
   16748:	add	sp, sp, #4
   1674c:	pop	{pc}		; (ldr pc, [sp], #4)
   16750:	bl	16b84 <__assert_fail@plt+0x57fc>
   16754:	str	r4, [sp, #-8]!
   16758:	str	lr, [sp, #4]
   1675c:	bl	16c3c <__assert_fail@plt+0x58b4>
   16760:	cmp	r0, #0
   16764:	beq	16774 <__assert_fail@plt+0x53ec>
   16768:	ldr	r4, [sp]
   1676c:	add	sp, sp, #4
   16770:	pop	{pc}		; (ldr pc, [sp], #4)
   16774:	bl	16b84 <__assert_fail@plt+0x57fc>
   16778:	strd	r4, [sp, #-16]!
   1677c:	mov	r5, r0
   16780:	mov	r4, r1
   16784:	str	r6, [sp, #8]
   16788:	str	lr, [sp, #12]
   1678c:	bl	16c78 <__assert_fail@plt+0x58f0>
   16790:	cmp	r0, #0
   16794:	beq	167a8 <__assert_fail@plt+0x5420>
   16798:	ldrd	r4, [sp]
   1679c:	ldr	r6, [sp, #8]
   167a0:	add	sp, sp, #12
   167a4:	pop	{pc}		; (ldr pc, [sp], #4)
   167a8:	adds	r4, r4, #0
   167ac:	movne	r4, #1
   167b0:	cmp	r5, #0
   167b4:	moveq	r4, #1
   167b8:	cmp	r4, #0
   167bc:	beq	16798 <__assert_fail@plt+0x5410>
   167c0:	bl	16b84 <__assert_fail@plt+0x57fc>
   167c4:	cmp	r1, #0
   167c8:	orreq	r1, r1, #1
   167cc:	str	r4, [sp, #-8]!
   167d0:	str	lr, [sp, #4]
   167d4:	bl	16c78 <__assert_fail@plt+0x58f0>
   167d8:	cmp	r0, #0
   167dc:	beq	167ec <__assert_fail@plt+0x5464>
   167e0:	ldr	r4, [sp]
   167e4:	add	sp, sp, #4
   167e8:	pop	{pc}		; (ldr pc, [sp], #4)
   167ec:	bl	16b84 <__assert_fail@plt+0x57fc>
   167f0:	strd	r4, [sp, #-16]!
   167f4:	mov	r4, r0
   167f8:	mov	r5, r2
   167fc:	str	r6, [sp, #8]
   16800:	mov	r6, r1
   16804:	str	lr, [sp, #12]
   16808:	bl	171d0 <_obstack_memory_used@@Base+0x34>
   1680c:	cmp	r0, #0
   16810:	beq	16824 <__assert_fail@plt+0x549c>
   16814:	ldrd	r4, [sp]
   16818:	ldr	r6, [sp, #8]
   1681c:	add	sp, sp, #12
   16820:	pop	{pc}		; (ldr pc, [sp], #4)
   16824:	cmp	r4, #0
   16828:	beq	16838 <__assert_fail@plt+0x54b0>
   1682c:	cmp	r6, #0
   16830:	cmpne	r5, #0
   16834:	beq	16814 <__assert_fail@plt+0x548c>
   16838:	bl	16b84 <__assert_fail@plt+0x57fc>
   1683c:	b	167f0 <__assert_fail@plt+0x5468>
   16840:	cmp	r2, #0
   16844:	cmpne	r1, #0
   16848:	str	r4, [sp, #-8]!
   1684c:	moveq	r2, #1
   16850:	str	lr, [sp, #4]
   16854:	moveq	r1, r2
   16858:	bl	171d0 <_obstack_memory_used@@Base+0x34>
   1685c:	cmp	r0, #0
   16860:	beq	16870 <__assert_fail@plt+0x54e8>
   16864:	ldr	r4, [sp]
   16868:	add	sp, sp, #4
   1686c:	pop	{pc}		; (ldr pc, [sp], #4)
   16870:	bl	16b84 <__assert_fail@plt+0x57fc>
   16874:	mov	r2, r1
   16878:	mov	r1, r0
   1687c:	mov	r0, #0
   16880:	b	167f0 <__assert_fail@plt+0x5468>
   16884:	mov	r2, r1
   16888:	mov	r1, r0
   1688c:	mov	r0, #0
   16890:	b	16840 <__assert_fail@plt+0x54b8>
   16894:	cmp	r0, #0
   16898:	strd	r4, [sp, #-16]!
   1689c:	mov	r5, r1
   168a0:	ldr	r4, [r1]
   168a4:	str	r6, [sp, #8]
   168a8:	str	lr, [sp, #12]
   168ac:	beq	168dc <__assert_fail@plt+0x5554>
   168b0:	lsr	r3, r4, #1
   168b4:	add	r3, r3, #1
   168b8:	adds	r4, r4, r3
   168bc:	bcs	168f8 <__assert_fail@plt+0x5570>
   168c0:	mov	r1, r4
   168c4:	bl	167f0 <__assert_fail@plt+0x5468>
   168c8:	ldr	r6, [sp, #8]
   168cc:	str	r4, [r5]
   168d0:	ldrd	r4, [sp]
   168d4:	add	sp, sp, #12
   168d8:	pop	{pc}		; (ldr pc, [sp], #4)
   168dc:	cmp	r4, #0
   168e0:	bne	168c0 <__assert_fail@plt+0x5538>
   168e4:	mov	r4, #64	; 0x40
   168e8:	udiv	r4, r4, r2
   168ec:	cmp	r2, #64	; 0x40
   168f0:	addhi	r4, r4, #1
   168f4:	b	168c0 <__assert_fail@plt+0x5538>
   168f8:	bl	16b84 <__assert_fail@plt+0x57fc>
   168fc:	mov	r2, #1
   16900:	b	16894 <__assert_fail@plt+0x550c>
   16904:	ldr	ip, [r1]
   16908:	strd	r4, [sp, #-32]!	; 0xffffffe0
   1690c:	mov	r5, r1
   16910:	strd	r6, [sp, #8]
   16914:	str	lr, [sp, #28]
   16918:	strd	r8, [sp, #16]
   1691c:	asr	lr, ip, #1
   16920:	ldr	r8, [sp, #32]
   16924:	str	sl, [sp, #24]
   16928:	adds	r4, ip, lr
   1692c:	mvn	lr, r3
   16930:	lsr	lr, lr, #31
   16934:	mvnvs	r4, #-2147483648	; 0x80000000
   16938:	cmp	r3, r4
   1693c:	movge	r1, #0
   16940:	andlt	r1, lr, #1
   16944:	cmp	r1, #0
   16948:	movne	r4, r3
   1694c:	smull	r6, r7, r4, r8
   16950:	cmp	r7, r6, asr #31
   16954:	bne	169dc <__assert_fail@plt+0x5654>
   16958:	cmp	r6, #63	; 0x3f
   1695c:	mov	r1, r6
   16960:	ble	169c4 <__assert_fail@plt+0x563c>
   16964:	cmp	r0, #0
   16968:	sub	r6, r4, ip
   1696c:	streq	r0, [r5]
   16970:	cmp	r6, r2
   16974:	bge	169a4 <__assert_fail@plt+0x561c>
   16978:	adds	r4, ip, r2
   1697c:	bvs	169d8 <__assert_fail@plt+0x5650>
   16980:	cmp	r4, r3
   16984:	movle	r3, #0
   16988:	andgt	r3, lr, #1
   1698c:	cmp	r3, #0
   16990:	bne	169d8 <__assert_fail@plt+0x5650>
   16994:	smull	r8, r9, r4, r8
   16998:	cmp	r9, r8, asr #31
   1699c:	mov	r1, r8
   169a0:	bne	169d8 <__assert_fail@plt+0x5650>
   169a4:	bl	16778 <__assert_fail@plt+0x53f0>
   169a8:	ldrd	r6, [sp, #8]
   169ac:	ldrd	r8, [sp, #16]
   169b0:	ldr	sl, [sp, #24]
   169b4:	str	r4, [r5]
   169b8:	ldrd	r4, [sp]
   169bc:	add	sp, sp, #28
   169c0:	pop	{pc}		; (ldr pc, [sp], #4)
   169c4:	mov	r6, #64	; 0x40
   169c8:	sdiv	r4, r6, r8
   169cc:	mls	r1, r8, r4, r6
   169d0:	sub	r1, r6, r1
   169d4:	b	16964 <__assert_fail@plt+0x55dc>
   169d8:	bl	16b84 <__assert_fail@plt+0x57fc>
   169dc:	mvn	r6, #-2147483648	; 0x80000000
   169e0:	b	169c8 <__assert_fail@plt+0x5640>
   169e4:	mov	r1, #1
   169e8:	str	r4, [sp, #-8]!
   169ec:	str	lr, [sp, #4]
   169f0:	bl	16bc8 <__assert_fail@plt+0x5840>
   169f4:	cmp	r0, #0
   169f8:	beq	16a08 <__assert_fail@plt+0x5680>
   169fc:	ldr	r4, [sp]
   16a00:	add	sp, sp, #4
   16a04:	pop	{pc}		; (ldr pc, [sp], #4)
   16a08:	bl	16b84 <__assert_fail@plt+0x57fc>
   16a0c:	mov	r1, #1
   16a10:	str	r4, [sp, #-8]!
   16a14:	str	lr, [sp, #4]
   16a18:	bl	16bc8 <__assert_fail@plt+0x5840>
   16a1c:	cmp	r0, #0
   16a20:	beq	16a30 <__assert_fail@plt+0x56a8>
   16a24:	ldr	r4, [sp]
   16a28:	add	sp, sp, #4
   16a2c:	pop	{pc}		; (ldr pc, [sp], #4)
   16a30:	bl	16b84 <__assert_fail@plt+0x57fc>
   16a34:	str	r4, [sp, #-8]!
   16a38:	str	lr, [sp, #4]
   16a3c:	bl	16bc8 <__assert_fail@plt+0x5840>
   16a40:	cmp	r0, #0
   16a44:	beq	16a54 <__assert_fail@plt+0x56cc>
   16a48:	ldr	r4, [sp]
   16a4c:	add	sp, sp, #4
   16a50:	pop	{pc}		; (ldr pc, [sp], #4)
   16a54:	bl	16b84 <__assert_fail@plt+0x57fc>
   16a58:	str	r4, [sp, #-8]!
   16a5c:	str	lr, [sp, #4]
   16a60:	bl	16bc8 <__assert_fail@plt+0x5840>
   16a64:	cmp	r0, #0
   16a68:	beq	16a78 <__assert_fail@plt+0x56f0>
   16a6c:	ldr	r4, [sp]
   16a70:	add	sp, sp, #4
   16a74:	pop	{pc}		; (ldr pc, [sp], #4)
   16a78:	bl	16b84 <__assert_fail@plt+0x57fc>
   16a7c:	strd	r4, [sp, #-16]!
   16a80:	mov	r4, r1
   16a84:	str	r6, [sp, #8]
   16a88:	mov	r6, r0
   16a8c:	mov	r0, r1
   16a90:	str	lr, [sp, #12]
   16a94:	bl	16c3c <__assert_fail@plt+0x58b4>
   16a98:	subs	r5, r0, #0
   16a9c:	beq	16ac0 <__assert_fail@plt+0x5738>
   16aa0:	mov	r2, r4
   16aa4:	mov	r1, r6
   16aa8:	bl	110f4 <memcpy@plt>
   16aac:	mov	r0, r5
   16ab0:	ldrd	r4, [sp]
   16ab4:	ldr	r6, [sp, #8]
   16ab8:	add	sp, sp, #12
   16abc:	pop	{pc}		; (ldr pc, [sp], #4)
   16ac0:	bl	16b84 <__assert_fail@plt+0x57fc>
   16ac4:	strd	r4, [sp, #-16]!
   16ac8:	mov	r4, r1
   16acc:	str	r6, [sp, #8]
   16ad0:	mov	r6, r0
   16ad4:	mov	r0, r1
   16ad8:	str	lr, [sp, #12]
   16adc:	bl	16c3c <__assert_fail@plt+0x58b4>
   16ae0:	subs	r5, r0, #0
   16ae4:	beq	16b08 <__assert_fail@plt+0x5780>
   16ae8:	mov	r2, r4
   16aec:	mov	r1, r6
   16af0:	bl	110f4 <memcpy@plt>
   16af4:	mov	r0, r5
   16af8:	ldrd	r4, [sp]
   16afc:	ldr	r6, [sp, #8]
   16b00:	add	sp, sp, #12
   16b04:	pop	{pc}		; (ldr pc, [sp], #4)
   16b08:	bl	16b84 <__assert_fail@plt+0x57fc>
   16b0c:	strd	r4, [sp, #-16]!
   16b10:	mov	r4, r1
   16b14:	str	r6, [sp, #8]
   16b18:	mov	r6, r0
   16b1c:	add	r0, r1, #1
   16b20:	str	lr, [sp, #12]
   16b24:	bl	16c3c <__assert_fail@plt+0x58b4>
   16b28:	subs	r5, r0, #0
   16b2c:	beq	16b58 <__assert_fail@plt+0x57d0>
   16b30:	mov	r3, #0
   16b34:	mov	r1, r6
   16b38:	mov	r2, r4
   16b3c:	strb	r3, [r5, r4]
   16b40:	bl	110f4 <memcpy@plt>
   16b44:	mov	r0, r5
   16b48:	ldrd	r4, [sp]
   16b4c:	ldr	r6, [sp, #8]
   16b50:	add	sp, sp, #12
   16b54:	pop	{pc}		; (ldr pc, [sp], #4)
   16b58:	bl	16b84 <__assert_fail@plt+0x57fc>
   16b5c:	str	r4, [sp, #-8]!
   16b60:	mov	r4, r0
   16b64:	str	lr, [sp, #4]
   16b68:	bl	1125c <strlen@plt>
   16b6c:	add	r1, r0, #1
   16b70:	mov	r0, r4
   16b74:	ldr	r4, [sp]
   16b78:	ldr	lr, [sp, #4]
   16b7c:	add	sp, sp, #8
   16b80:	b	16a7c <__assert_fail@plt+0x56f4>
   16b84:	movw	r3, #37164	; 0x912c
   16b88:	movt	r3, #2
   16b8c:	str	r4, [sp, #-8]!
   16b90:	ldr	r4, [r3]
   16b94:	mov	r2, #5
   16b98:	movw	r1, #34152	; 0x8568
   16b9c:	movt	r1, #1
   16ba0:	mov	r0, #0
   16ba4:	str	lr, [sp, #4]
   16ba8:	bl	11124 <dcgettext@plt>
   16bac:	mov	r3, r0
   16bb0:	movw	r2, #33036	; 0x810c
   16bb4:	movt	r2, #1
   16bb8:	mov	r1, #0
   16bbc:	mov	r0, r4
   16bc0:	bl	111c0 <error@plt>
   16bc4:	bl	11370 <abort@plt>
   16bc8:	cmp	r1, #0
   16bcc:	cmpne	r0, #0
   16bd0:	beq	16c1c <__assert_fail@plt+0x5894>
   16bd4:	strd	r4, [sp, #-16]!
   16bd8:	umull	r4, r5, r0, r1
   16bdc:	str	r6, [sp, #8]
   16be0:	str	lr, [sp, #12]
   16be4:	adds	r3, r5, #0
   16be8:	movne	r3, #1
   16bec:	cmp	r4, #0
   16bf0:	blt	16bfc <__assert_fail@plt+0x5874>
   16bf4:	cmp	r3, #0
   16bf8:	beq	16c28 <__assert_fail@plt+0x58a0>
   16bfc:	bl	11280 <__errno_location@plt>
   16c00:	mov	r3, #12
   16c04:	ldrd	r4, [sp]
   16c08:	ldr	r6, [sp, #8]
   16c0c:	add	sp, sp, #12
   16c10:	str	r3, [r0]
   16c14:	mov	r0, #0
   16c18:	pop	{pc}		; (ldr pc, [sp], #4)
   16c1c:	mov	r1, #1
   16c20:	mov	r0, r1
   16c24:	b	11064 <calloc@plt>
   16c28:	ldrd	r4, [sp]
   16c2c:	ldr	r6, [sp, #8]
   16c30:	ldr	lr, [sp, #12]
   16c34:	add	sp, sp, #16
   16c38:	b	11064 <calloc@plt>
   16c3c:	cmp	r0, #0
   16c40:	beq	16c4c <__assert_fail@plt+0x58c4>
   16c44:	blt	16c54 <__assert_fail@plt+0x58cc>
   16c48:	b	111f0 <malloc@plt>
   16c4c:	mov	r0, #1
   16c50:	b	111f0 <malloc@plt>
   16c54:	str	r4, [sp, #-8]!
   16c58:	str	lr, [sp, #4]
   16c5c:	bl	11280 <__errno_location@plt>
   16c60:	mov	r3, #12
   16c64:	ldr	r4, [sp]
   16c68:	add	sp, sp, #4
   16c6c:	str	r3, [r0]
   16c70:	mov	r0, #0
   16c74:	pop	{pc}		; (ldr pc, [sp], #4)
   16c78:	cmp	r0, #0
   16c7c:	beq	16ca4 <__assert_fail@plt+0x591c>
   16c80:	cmp	r1, #0
   16c84:	str	r4, [sp, #-8]!
   16c88:	str	lr, [sp, #4]
   16c8c:	beq	16cac <__assert_fail@plt+0x5924>
   16c90:	blt	16cc0 <__assert_fail@plt+0x5938>
   16c94:	ldr	r4, [sp]
   16c98:	ldr	lr, [sp, #4]
   16c9c:	add	sp, sp, #8
   16ca0:	b	1113c <realloc@plt>
   16ca4:	mov	r0, r1
   16ca8:	b	16c3c <__assert_fail@plt+0x58b4>
   16cac:	bl	1363c <__assert_fail@plt+0x22b4>
   16cb0:	ldr	r4, [sp]
   16cb4:	add	sp, sp, #4
   16cb8:	mov	r0, #0
   16cbc:	pop	{pc}		; (ldr pc, [sp], #4)
   16cc0:	bl	11280 <__errno_location@plt>
   16cc4:	mov	r3, #12
   16cc8:	str	r3, [r0]
   16ccc:	b	16cb0 <__assert_fail@plt+0x5928>
   16cd0:	strd	r4, [sp, #-16]!
   16cd4:	mov	r4, r0
   16cd8:	str	r6, [sp, #8]
   16cdc:	str	lr, [sp, #12]
   16ce0:	bl	111a8 <__fpending@plt>
   16ce4:	ldr	r5, [r4]
   16ce8:	mov	r6, r0
   16cec:	mov	r0, r4
   16cf0:	bl	13528 <__assert_fail@plt+0x21a0>
   16cf4:	mov	r4, r0
   16cf8:	and	r5, r5, #32
   16cfc:	cmp	r5, #0
   16d00:	bne	16d38 <__assert_fail@plt+0x59b0>
   16d04:	cmp	r0, #0
   16d08:	beq	16d24 <__assert_fail@plt+0x599c>
   16d0c:	cmp	r6, #0
   16d10:	bne	16d50 <__assert_fail@plt+0x59c8>
   16d14:	bl	11280 <__errno_location@plt>
   16d18:	ldr	r4, [r0]
   16d1c:	subs	r4, r4, #9
   16d20:	mvnne	r4, #0
   16d24:	mov	r0, r4
   16d28:	ldrd	r4, [sp]
   16d2c:	ldr	r6, [sp, #8]
   16d30:	add	sp, sp, #12
   16d34:	pop	{pc}		; (ldr pc, [sp], #4)
   16d38:	cmp	r0, #0
   16d3c:	bne	16d50 <__assert_fail@plt+0x59c8>
   16d40:	bl	11280 <__errno_location@plt>
   16d44:	str	r4, [r0]
   16d48:	mvn	r4, #0
   16d4c:	b	16d24 <__assert_fail@plt+0x599c>
   16d50:	mvn	r4, #0
   16d54:	b	16d24 <__assert_fail@plt+0x599c>
   16d58:	push	{lr}		; (str lr, [sp, #-4]!)
   16d5c:	sub	sp, sp, #268	; 0x10c
   16d60:	movw	r2, #257	; 0x101
   16d64:	add	r1, sp, #4
   16d68:	bl	17208 <_obstack_memory_used@@Base+0x6c>
   16d6c:	cmp	r0, #0
   16d70:	movne	r0, #0
   16d74:	bne	16da8 <__assert_fail@plt+0x5a20>
   16d78:	movw	r1, #34172	; 0x857c
   16d7c:	movt	r1, #1
   16d80:	add	r0, sp, #4
   16d84:	bl	11088 <strcmp@plt>
   16d88:	cmp	r0, #0
   16d8c:	beq	16da8 <__assert_fail@plt+0x5a20>
   16d90:	add	r0, sp, #4
   16d94:	movw	r1, #34176	; 0x8580
   16d98:	movt	r1, #1
   16d9c:	bl	11088 <strcmp@plt>
   16da0:	adds	r0, r0, #0
   16da4:	movne	r0, #1
   16da8:	add	sp, sp, #268	; 0x10c
   16dac:	pop	{pc}		; (ldr pc, [sp], #4)
   16db0:	mov	r0, #14
   16db4:	str	r4, [sp, #-8]!
   16db8:	str	lr, [sp, #4]
   16dbc:	bl	11328 <nl_langinfo@plt>
   16dc0:	cmp	r0, #0
   16dc4:	beq	16de8 <__assert_fail@plt+0x5a60>
   16dc8:	ldrb	r2, [r0]
   16dcc:	movw	r3, #34184	; 0x8588
   16dd0:	movt	r3, #1
   16dd4:	ldr	r4, [sp]
   16dd8:	add	sp, sp, #4
   16ddc:	cmp	r2, #0
   16de0:	moveq	r0, r3
   16de4:	pop	{pc}		; (ldr pc, [sp], #4)
   16de8:	ldr	r4, [sp]
   16dec:	add	sp, sp, #4
   16df0:	movw	r0, #34184	; 0x8588
   16df4:	movt	r0, #1
   16df8:	pop	{pc}		; (ldr pc, [sp], #4)
   16dfc:	movw	r3, #37256	; 0x9188
   16e00:	movt	r3, #2
   16e04:	str	r4, [sp, #-8]!
   16e08:	ldr	r4, [r3]
   16e0c:	mov	r2, #5
   16e10:	movw	r1, #34152	; 0x8568
   16e14:	movt	r1, #1
   16e18:	mov	r0, #0
   16e1c:	str	lr, [sp, #4]
   16e20:	bl	11124 <dcgettext@plt>
   16e24:	mov	r3, r0
   16e28:	movw	r2, #33364	; 0x8254
   16e2c:	movt	r2, #1
   16e30:	mov	r1, #1
   16e34:	mov	r0, r4
   16e38:	bl	112e0 <__fprintf_chk@plt>
   16e3c:	movw	r3, #37164	; 0x912c
   16e40:	movt	r3, #2
   16e44:	ldr	r0, [r3]
   16e48:	bl	11238 <exit@plt>
   16e4c:	ldrb	r2, [r0, #40]	; 0x28
   16e50:	ldr	r3, [r0, #28]
   16e54:	tst	r2, #1
   16e58:	beq	16e64 <__assert_fail@plt+0x5adc>
   16e5c:	ldr	r0, [r0, #36]	; 0x24
   16e60:	bx	r3
   16e64:	mov	r0, r1
   16e68:	bx	r3
   16e6c:	ldrb	r2, [r0, #40]	; 0x28
   16e70:	ldr	r3, [r0, #32]
   16e74:	tst	r2, #1
   16e78:	beq	16e84 <__assert_fail@plt+0x5afc>
   16e7c:	ldr	r0, [r0, #36]	; 0x24
   16e80:	bx	r3
   16e84:	mov	r0, r1
   16e88:	bx	r3
   16e8c:	strd	r4, [sp, #-16]!
   16e90:	subs	r5, r2, #0
   16e94:	movw	r2, #4072	; 0xfe8
   16e98:	moveq	r5, #8
   16e9c:	str	r6, [sp, #8]
   16ea0:	subne	r6, r5, #1
   16ea4:	moveq	r6, #7
   16ea8:	cmp	r1, #0
   16eac:	str	lr, [sp, #12]
   16eb0:	mov	r3, r1
   16eb4:	moveq	r3, r2
   16eb8:	mov	r1, r3
   16ebc:	mov	r4, r0
   16ec0:	str	r3, [r0]
   16ec4:	str	r6, [r0, #24]
   16ec8:	bl	16e4c <__assert_fail@plt+0x5ac4>
   16ecc:	cmp	r0, #0
   16ed0:	mov	r3, r0
   16ed4:	str	r0, [r4, #4]
   16ed8:	beq	16f2c <__assert_fail@plt+0x5ba4>
   16edc:	ldrb	lr, [r4, #40]	; 0x28
   16ee0:	add	r1, r0, #8
   16ee4:	rsb	r2, r5, #0
   16ee8:	add	r1, r1, r6
   16eec:	mov	r5, #0
   16ef0:	ldr	ip, [r4]
   16ef4:	and	r2, r2, r1
   16ef8:	mov	r0, #1
   16efc:	ldr	r6, [sp, #8]
   16f00:	bic	lr, lr, #6
   16f04:	str	r2, [r4, #8]
   16f08:	str	r2, [r4, #12]
   16f0c:	add	r2, r3, ip
   16f10:	str	r2, [r3]
   16f14:	str	r2, [r4, #16]
   16f18:	str	r5, [r3, #4]
   16f1c:	strb	lr, [r4, #40]	; 0x28
   16f20:	ldrd	r4, [sp]
   16f24:	add	sp, sp, #12
   16f28:	pop	{pc}		; (ldr pc, [sp], #4)
   16f2c:	movw	r3, #37232	; 0x9170
   16f30:	movt	r3, #2
   16f34:	ldr	r3, [r3]
   16f38:	blx	r3

00016f3c <_obstack_begin@@Base>:
   16f3c:	str	r4, [sp, #-8]!
   16f40:	str	lr, [sp, #4]
   16f44:	ldrb	lr, [r0, #40]	; 0x28
   16f48:	str	r3, [r0, #28]
   16f4c:	ldr	r4, [sp, #8]
   16f50:	bfc	lr, #0, #1
   16f54:	str	r4, [r0, #32]
   16f58:	ldr	r4, [sp]
   16f5c:	strb	lr, [r0, #40]	; 0x28
   16f60:	ldr	lr, [sp, #4]
   16f64:	add	sp, sp, #8
   16f68:	b	16e8c <__assert_fail@plt+0x5b04>

00016f6c <_obstack_begin_1@@Base>:
   16f6c:	str	r4, [sp, #-8]!
   16f70:	str	lr, [sp, #4]
   16f74:	ldrb	lr, [r0, #40]	; 0x28
   16f78:	str	r3, [r0, #28]
   16f7c:	ldr	r4, [sp, #8]
   16f80:	ldr	r3, [sp, #12]
   16f84:	orr	lr, lr, #1
   16f88:	str	r4, [r0, #32]
   16f8c:	ldr	r4, [sp]
   16f90:	str	r3, [r0, #36]	; 0x24
   16f94:	strb	lr, [r0, #40]	; 0x28
   16f98:	ldr	lr, [sp, #4]
   16f9c:	add	sp, sp, #8
   16fa0:	b	16e8c <__assert_fail@plt+0x5b04>

00016fa4 <_obstack_newchunk@@Base>:
   16fa4:	strd	r4, [sp, #-24]!	; 0xffffffe8
   16fa8:	ldr	r2, [r0, #8]
   16fac:	ldr	r3, [r0, #24]
   16fb0:	strd	r6, [sp, #8]
   16fb4:	str	r8, [sp, #16]
   16fb8:	ldr	r6, [r0, #12]
   16fbc:	str	lr, [sp, #20]
   16fc0:	ldr	lr, [r0]
   16fc4:	ldr	r7, [r0, #4]
   16fc8:	sub	r6, r6, r2
   16fcc:	adds	r1, r6, r1
   16fd0:	movcs	ip, #1
   16fd4:	movcc	ip, #0
   16fd8:	adds	r3, r3, r1
   16fdc:	eor	ip, ip, #1
   16fe0:	add	r4, r3, r6, lsr #3
   16fe4:	movcs	r2, #1
   16fe8:	movcc	r2, #0
   16fec:	cmp	r3, lr
   16ff0:	eor	r2, r2, #1
   16ff4:	add	r4, r4, #100	; 0x64
   16ff8:	movcc	r3, lr
   16ffc:	cmp	r3, r4
   17000:	movcs	r4, r3
   17004:	tst	ip, r2
   17008:	beq	170c0 <_obstack_newchunk@@Base+0x11c>
   1700c:	mov	r1, r4
   17010:	mov	r5, r0
   17014:	bl	16e4c <__assert_fail@plt+0x5ac4>
   17018:	subs	r8, r0, #0
   1701c:	beq	170c0 <_obstack_newchunk@@Base+0x11c>
   17020:	add	r3, r8, r4
   17024:	mov	r4, r8
   17028:	str	r8, [r5, #4]
   1702c:	ldr	r0, [r5, #24]
   17030:	mov	r2, r6
   17034:	ldr	r1, [r5, #8]
   17038:	str	r7, [r8, #4]
   1703c:	str	r3, [r5, #16]
   17040:	str	r3, [r4], #8
   17044:	add	r4, r4, r0
   17048:	bic	r4, r4, r0
   1704c:	mov	r0, r4
   17050:	bl	110f4 <memcpy@plt>
   17054:	ldrb	r3, [r5, #40]	; 0x28
   17058:	tst	r3, #2
   1705c:	bne	1707c <_obstack_newchunk@@Base+0xd8>
   17060:	ldr	r1, [r5, #8]
   17064:	add	r3, r7, #8
   17068:	ldr	r2, [r5, #24]
   1706c:	add	r3, r3, r2
   17070:	bic	r3, r3, r2
   17074:	cmp	r1, r3
   17078:	beq	170a8 <_obstack_newchunk@@Base+0x104>
   1707c:	ldrb	r3, [r5, #40]	; 0x28
   17080:	add	r6, r4, r6
   17084:	ldr	r8, [sp, #16]
   17088:	str	r4, [r5, #8]
   1708c:	str	r6, [r5, #12]
   17090:	bfc	r3, #1, #1
   17094:	ldrd	r6, [sp, #8]
   17098:	strb	r3, [r5, #40]	; 0x28
   1709c:	ldrd	r4, [sp]
   170a0:	add	sp, sp, #20
   170a4:	pop	{pc}		; (ldr pc, [sp], #4)
   170a8:	ldr	r3, [r7, #4]
   170ac:	mov	r1, r7
   170b0:	mov	r0, r5
   170b4:	str	r3, [r8, #4]
   170b8:	bl	16e6c <__assert_fail@plt+0x5ae4>
   170bc:	b	1707c <_obstack_newchunk@@Base+0xd8>
   170c0:	movw	r3, #37232	; 0x9170
   170c4:	movt	r3, #2
   170c8:	ldr	r3, [r3]
   170cc:	blx	r3

000170d0 <_obstack_allocated_p@@Base>:
   170d0:	ldr	r0, [r0, #4]
   170d4:	cmp	r0, #0
   170d8:	beq	17108 <_obstack_allocated_p@@Base+0x38>
   170dc:	cmp	r1, r0
   170e0:	bls	170f0 <_obstack_allocated_p@@Base+0x20>
   170e4:	ldr	r3, [r0]
   170e8:	cmp	r3, r1
   170ec:	bcs	17100 <_obstack_allocated_p@@Base+0x30>
   170f0:	ldr	r0, [r0, #4]
   170f4:	cmp	r0, #0
   170f8:	bne	170dc <_obstack_allocated_p@@Base+0xc>
   170fc:	bx	lr
   17100:	mov	r0, #1
   17104:	bx	lr
   17108:	bx	lr

0001710c <_obstack_free@@Base>:
   1710c:	strd	r4, [sp, #-16]!
   17110:	ldr	r4, [r0, #4]
   17114:	str	r6, [sp, #8]
   17118:	mov	r6, r1
   1711c:	str	lr, [sp, #12]
   17120:	cmp	r4, #0
   17124:	movne	r5, r0
   17128:	beq	17164 <_obstack_free@@Base+0x58>
   1712c:	cmp	r4, r6
   17130:	bcs	17140 <_obstack_free@@Base+0x34>
   17134:	ldr	r2, [r4]
   17138:	cmp	r2, r6
   1713c:	bcs	1717c <_obstack_free@@Base+0x70>
   17140:	mov	r1, r4
   17144:	mov	r0, r5
   17148:	ldr	r4, [r4, #4]
   1714c:	bl	16e6c <__assert_fail@plt+0x5ae4>
   17150:	ldrb	r2, [r5, #40]	; 0x28
   17154:	cmp	r4, #0
   17158:	orr	r2, r2, #2
   1715c:	strb	r2, [r5, #40]	; 0x28
   17160:	bne	1712c <_obstack_free@@Base+0x20>
   17164:	cmp	r6, #0
   17168:	bne	17198 <_obstack_free@@Base+0x8c>
   1716c:	ldrd	r4, [sp]
   17170:	ldr	r6, [sp, #8]
   17174:	add	sp, sp, #12
   17178:	pop	{pc}		; (ldr pc, [sp], #4)
   1717c:	stmib	r5, {r4, r6}
   17180:	str	r6, [r5, #12]
   17184:	str	r2, [r5, #16]
   17188:	ldrd	r4, [sp]
   1718c:	ldr	r6, [sp, #8]
   17190:	add	sp, sp, #12
   17194:	pop	{pc}		; (ldr pc, [sp], #4)
   17198:	bl	11370 <abort@plt>

0001719c <_obstack_memory_used@@Base>:
   1719c:	ldr	r3, [r0, #4]
   171a0:	cmp	r3, #0
   171a4:	beq	171c8 <_obstack_memory_used@@Base+0x2c>
   171a8:	mov	r0, #0
   171ac:	ldr	r2, [r3]
   171b0:	sub	r2, r2, r3
   171b4:	ldr	r3, [r3, #4]
   171b8:	add	r0, r0, r2
   171bc:	cmp	r3, #0
   171c0:	bne	171ac <_obstack_memory_used@@Base+0x10>
   171c4:	bx	lr
   171c8:	mov	r0, r3
   171cc:	bx	lr
   171d0:	umull	r2, r3, r1, r2
   171d4:	cmp	r3, #0
   171d8:	bne	171e4 <_obstack_memory_used@@Base+0x48>
   171dc:	mov	r1, r2
   171e0:	b	16c78 <__assert_fail@plt+0x58f0>
   171e4:	str	r4, [sp, #-8]!
   171e8:	str	lr, [sp, #4]
   171ec:	bl	11280 <__errno_location@plt>
   171f0:	mov	r3, #12
   171f4:	ldr	r4, [sp]
   171f8:	add	sp, sp, #4
   171fc:	str	r3, [r0]
   17200:	mov	r0, #0
   17204:	pop	{pc}		; (ldr pc, [sp], #4)
   17208:	strd	r4, [sp, #-16]!
   1720c:	mov	r5, r1
   17210:	mov	r1, #0
   17214:	mov	r4, r2
   17218:	str	r6, [sp, #8]
   1721c:	str	lr, [sp, #12]
   17220:	bl	11310 <setlocale@plt>
   17224:	subs	r6, r0, #0
   17228:	beq	172a8 <_obstack_memory_used@@Base+0x10c>
   1722c:	bl	1125c <strlen@plt>
   17230:	cmp	r4, r0
   17234:	bhi	17254 <_obstack_memory_used@@Base+0xb8>
   17238:	cmp	r4, #0
   1723c:	moveq	r0, #34	; 0x22
   17240:	bne	17278 <_obstack_memory_used@@Base+0xdc>
   17244:	ldrd	r4, [sp]
   17248:	ldr	r6, [sp, #8]
   1724c:	add	sp, sp, #12
   17250:	pop	{pc}		; (ldr pc, [sp], #4)
   17254:	add	r2, r0, #1
   17258:	mov	r1, r6
   1725c:	mov	r0, r5
   17260:	bl	110f4 <memcpy@plt>
   17264:	ldrd	r4, [sp]
   17268:	mov	r0, #0
   1726c:	ldr	r6, [sp, #8]
   17270:	add	sp, sp, #12
   17274:	pop	{pc}		; (ldr pc, [sp], #4)
   17278:	sub	r4, r4, #1
   1727c:	mov	r1, r6
   17280:	mov	r2, r4
   17284:	mov	r0, r5
   17288:	bl	110f4 <memcpy@plt>
   1728c:	mov	r3, #0
   17290:	mov	r0, #34	; 0x22
   17294:	strb	r3, [r5, r4]
   17298:	ldrd	r4, [sp]
   1729c:	ldr	r6, [sp, #8]
   172a0:	add	sp, sp, #12
   172a4:	pop	{pc}		; (ldr pc, [sp], #4)
   172a8:	cmp	r4, #0
   172ac:	mov	r0, #22
   172b0:	strbne	r6, [r5]
   172b4:	ldrd	r4, [sp]
   172b8:	ldr	r6, [sp, #8]
   172bc:	add	sp, sp, #12
   172c0:	pop	{pc}		; (ldr pc, [sp], #4)
   172c4:	mov	r1, #0
   172c8:	b	11310 <setlocale@plt>
   172cc:	eor	r1, r1, #-2147483648	; 0x80000000
   172d0:	b	172d8 <_obstack_memory_used@@Base+0x13c>
   172d4:	eor	r3, r3, #-2147483648	; 0x80000000
   172d8:	push	{r4, r5, lr}
   172dc:	lsl	r4, r1, #1
   172e0:	lsl	r5, r3, #1
   172e4:	teq	r4, r5
   172e8:	teqeq	r0, r2
   172ec:	orrsne	ip, r4, r0
   172f0:	orrsne	ip, r5, r2
   172f4:	mvnsne	ip, r4, asr #21
   172f8:	mvnsne	ip, r5, asr #21
   172fc:	beq	174e8 <_obstack_memory_used@@Base+0x34c>
   17300:	lsr	r4, r4, #21
   17304:	rsbs	r5, r4, r5, lsr #21
   17308:	rsblt	r5, r5, #0
   1730c:	ble	1732c <_obstack_memory_used@@Base+0x190>
   17310:	add	r4, r4, r5
   17314:	eor	r2, r0, r2
   17318:	eor	r3, r1, r3
   1731c:	eor	r0, r2, r0
   17320:	eor	r1, r3, r1
   17324:	eor	r2, r0, r2
   17328:	eor	r3, r1, r3
   1732c:	cmp	r5, #54	; 0x36
   17330:	pophi	{r4, r5, pc}
   17334:	tst	r1, #-2147483648	; 0x80000000
   17338:	lsl	r1, r1, #12
   1733c:	mov	ip, #1048576	; 0x100000
   17340:	orr	r1, ip, r1, lsr #12
   17344:	beq	17350 <_obstack_memory_used@@Base+0x1b4>
   17348:	rsbs	r0, r0, #0
   1734c:	rsc	r1, r1, #0
   17350:	tst	r3, #-2147483648	; 0x80000000
   17354:	lsl	r3, r3, #12
   17358:	orr	r3, ip, r3, lsr #12
   1735c:	beq	17368 <_obstack_memory_used@@Base+0x1cc>
   17360:	rsbs	r2, r2, #0
   17364:	rsc	r3, r3, #0
   17368:	teq	r4, r5
   1736c:	beq	174d0 <_obstack_memory_used@@Base+0x334>
   17370:	sub	r4, r4, #1
   17374:	rsbs	lr, r5, #32
   17378:	blt	17394 <_obstack_memory_used@@Base+0x1f8>
   1737c:	lsl	ip, r2, lr
   17380:	adds	r0, r0, r2, lsr r5
   17384:	adc	r1, r1, #0
   17388:	adds	r0, r0, r3, lsl lr
   1738c:	adcs	r1, r1, r3, asr r5
   17390:	b	173b0 <_obstack_memory_used@@Base+0x214>
   17394:	sub	r5, r5, #32
   17398:	add	lr, lr, #32
   1739c:	cmp	r2, #1
   173a0:	lsl	ip, r3, lr
   173a4:	orrcs	ip, ip, #2
   173a8:	adds	r0, r0, r3, asr r5
   173ac:	adcs	r1, r1, r3, asr #31
   173b0:	and	r5, r1, #-2147483648	; 0x80000000
   173b4:	bpl	173c4 <_obstack_memory_used@@Base+0x228>
   173b8:	rsbs	ip, ip, #0
   173bc:	rscs	r0, r0, #0
   173c0:	rsc	r1, r1, #0
   173c4:	cmp	r1, #1048576	; 0x100000
   173c8:	bcc	17408 <_obstack_memory_used@@Base+0x26c>
   173cc:	cmp	r1, #2097152	; 0x200000
   173d0:	bcc	173f0 <_obstack_memory_used@@Base+0x254>
   173d4:	lsrs	r1, r1, #1
   173d8:	rrxs	r0, r0
   173dc:	rrx	ip, ip
   173e0:	add	r4, r4, #1
   173e4:	lsl	r2, r4, #21
   173e8:	cmn	r2, #4194304	; 0x400000
   173ec:	bcs	17548 <_obstack_memory_used@@Base+0x3ac>
   173f0:	cmp	ip, #-2147483648	; 0x80000000
   173f4:	lsrseq	ip, r0, #1
   173f8:	adcs	r0, r0, #0
   173fc:	adc	r1, r1, r4, lsl #20
   17400:	orr	r1, r1, r5
   17404:	pop	{r4, r5, pc}
   17408:	lsls	ip, ip, #1
   1740c:	adcs	r0, r0, r0
   17410:	adc	r1, r1, r1
   17414:	tst	r1, #1048576	; 0x100000
   17418:	sub	r4, r4, #1
   1741c:	bne	173f0 <_obstack_memory_used@@Base+0x254>
   17420:	teq	r1, #0
   17424:	moveq	r1, r0
   17428:	moveq	r0, #0
   1742c:	clz	r3, r1
   17430:	addeq	r3, r3, #32
   17434:	sub	r3, r3, #11
   17438:	subs	r2, r3, #32
   1743c:	bge	17460 <_obstack_memory_used@@Base+0x2c4>
   17440:	adds	r2, r2, #12
   17444:	ble	1745c <_obstack_memory_used@@Base+0x2c0>
   17448:	add	ip, r2, #20
   1744c:	rsb	r2, r2, #12
   17450:	lsl	r0, r1, ip
   17454:	lsr	r1, r1, r2
   17458:	b	17470 <_obstack_memory_used@@Base+0x2d4>
   1745c:	add	r2, r2, #20
   17460:	rsble	ip, r2, #32
   17464:	lsl	r1, r1, r2
   17468:	orrle	r1, r1, r0, lsr ip
   1746c:	lslle	r0, r0, r2
   17470:	subs	r4, r4, r3
   17474:	addge	r1, r1, r4, lsl #20
   17478:	orrge	r1, r1, r5
   1747c:	popge	{r4, r5, pc}
   17480:	mvn	r4, r4
   17484:	subs	r4, r4, #31
   17488:	bge	174c4 <_obstack_memory_used@@Base+0x328>
   1748c:	adds	r4, r4, #12
   17490:	bgt	174ac <_obstack_memory_used@@Base+0x310>
   17494:	add	r4, r4, #20
   17498:	rsb	r2, r4, #32
   1749c:	lsr	r0, r0, r4
   174a0:	orr	r0, r0, r1, lsl r2
   174a4:	orr	r1, r5, r1, lsr r4
   174a8:	pop	{r4, r5, pc}
   174ac:	rsb	r4, r4, #12
   174b0:	rsb	r2, r4, #32
   174b4:	lsr	r0, r0, r2
   174b8:	orr	r0, r0, r1, lsl r4
   174bc:	mov	r1, r5
   174c0:	pop	{r4, r5, pc}
   174c4:	lsr	r0, r1, r4
   174c8:	mov	r1, r5
   174cc:	pop	{r4, r5, pc}
   174d0:	teq	r4, #0
   174d4:	eor	r3, r3, #1048576	; 0x100000
   174d8:	eoreq	r1, r1, #1048576	; 0x100000
   174dc:	addeq	r4, r4, #1
   174e0:	subne	r5, r5, #1
   174e4:	b	17370 <_obstack_memory_used@@Base+0x1d4>
   174e8:	mvns	ip, r4, asr #21
   174ec:	mvnsne	ip, r5, asr #21
   174f0:	beq	17558 <_obstack_memory_used@@Base+0x3bc>
   174f4:	teq	r4, r5
   174f8:	teqeq	r0, r2
   174fc:	beq	17510 <_obstack_memory_used@@Base+0x374>
   17500:	orrs	ip, r4, r0
   17504:	moveq	r1, r3
   17508:	moveq	r0, r2
   1750c:	pop	{r4, r5, pc}
   17510:	teq	r1, r3
   17514:	movne	r1, #0
   17518:	movne	r0, #0
   1751c:	popne	{r4, r5, pc}
   17520:	lsrs	ip, r4, #21
   17524:	bne	17538 <_obstack_memory_used@@Base+0x39c>
   17528:	lsls	r0, r0, #1
   1752c:	adcs	r1, r1, r1
   17530:	orrcs	r1, r1, #-2147483648	; 0x80000000
   17534:	pop	{r4, r5, pc}
   17538:	adds	r4, r4, #4194304	; 0x400000
   1753c:	addcc	r1, r1, #1048576	; 0x100000
   17540:	popcc	{r4, r5, pc}
   17544:	and	r5, r1, #-2147483648	; 0x80000000
   17548:	orr	r1, r5, #2130706432	; 0x7f000000
   1754c:	orr	r1, r1, #15728640	; 0xf00000
   17550:	mov	r0, #0
   17554:	pop	{r4, r5, pc}
   17558:	mvns	ip, r4, asr #21
   1755c:	movne	r1, r3
   17560:	movne	r0, r2
   17564:	mvnseq	ip, r5, asr #21
   17568:	movne	r3, r1
   1756c:	movne	r2, r0
   17570:	orrs	r4, r0, r1, lsl #12
   17574:	orrseq	r5, r2, r3, lsl #12
   17578:	teqeq	r1, r3
   1757c:	orrne	r1, r1, #524288	; 0x80000
   17580:	pop	{r4, r5, pc}
   17584:	teq	r0, #0
   17588:	moveq	r1, #0
   1758c:	bxeq	lr
   17590:	push	{r4, r5, lr}
   17594:	mov	r4, #1024	; 0x400
   17598:	add	r4, r4, #50	; 0x32
   1759c:	mov	r5, #0
   175a0:	mov	r1, #0
   175a4:	b	17420 <_obstack_memory_used@@Base+0x284>
   175a8:	teq	r0, #0
   175ac:	moveq	r1, #0
   175b0:	bxeq	lr
   175b4:	push	{r4, r5, lr}
   175b8:	mov	r4, #1024	; 0x400
   175bc:	add	r4, r4, #50	; 0x32
   175c0:	ands	r5, r0, #-2147483648	; 0x80000000
   175c4:	rsbmi	r0, r0, #0
   175c8:	mov	r1, #0
   175cc:	b	17420 <_obstack_memory_used@@Base+0x284>
   175d0:	lsls	r2, r0, #1
   175d4:	asr	r1, r2, #3
   175d8:	rrx	r1, r1
   175dc:	lsl	r0, r2, #28
   175e0:	andsne	r3, r2, #-16777216	; 0xff000000
   175e4:	teqne	r3, #-16777216	; 0xff000000
   175e8:	eorne	r1, r1, #939524096	; 0x38000000
   175ec:	bxne	lr
   175f0:	bics	r2, r2, #-16777216	; 0xff000000
   175f4:	bxeq	lr
   175f8:	teq	r3, #-16777216	; 0xff000000
   175fc:	orreq	r1, r1, #524288	; 0x80000
   17600:	bxeq	lr
   17604:	push	{r4, r5, lr}
   17608:	mov	r4, #896	; 0x380
   1760c:	and	r5, r1, #-2147483648	; 0x80000000
   17610:	bic	r1, r1, #-2147483648	; 0x80000000
   17614:	b	17420 <_obstack_memory_used@@Base+0x284>
   17618:	orrs	r2, r0, r1
   1761c:	bxeq	lr
   17620:	push	{r4, r5, lr}
   17624:	mov	r5, #0
   17628:	b	17648 <_obstack_memory_used@@Base+0x4ac>
   1762c:	orrs	r2, r0, r1
   17630:	bxeq	lr
   17634:	push	{r4, r5, lr}
   17638:	ands	r5, r1, #-2147483648	; 0x80000000
   1763c:	bpl	17648 <_obstack_memory_used@@Base+0x4ac>
   17640:	rsbs	r0, r0, #0
   17644:	rsc	r1, r1, #0
   17648:	mov	r4, #1024	; 0x400
   1764c:	add	r4, r4, #50	; 0x32
   17650:	lsrs	ip, r1, #22
   17654:	beq	173c4 <_obstack_memory_used@@Base+0x228>
   17658:	mov	r2, #3
   1765c:	lsrs	ip, ip, #3
   17660:	addne	r2, r2, #3
   17664:	lsrs	ip, ip, #3
   17668:	addne	r2, r2, #3
   1766c:	add	r2, r2, ip, lsr #3
   17670:	rsb	r3, r2, #32
   17674:	lsl	ip, r0, r3
   17678:	lsr	r0, r0, r2
   1767c:	orr	r0, r0, r1, lsl r3
   17680:	lsr	r1, r1, r2
   17684:	add	r4, r4, r2
   17688:	b	173c4 <_obstack_memory_used@@Base+0x228>
   1768c:	cmp	r3, #0
   17690:	cmpeq	r2, #0
   17694:	bne	176ac <_obstack_memory_used@@Base+0x510>
   17698:	cmp	r1, #0
   1769c:	cmpeq	r0, #0
   176a0:	mvnne	r1, #0
   176a4:	mvnne	r0, #0
   176a8:	b	176c8 <_obstack_memory_used@@Base+0x52c>
   176ac:	sub	sp, sp, #8
   176b0:	push	{sp, lr}
   176b4:	bl	176d8 <_obstack_memory_used@@Base+0x53c>
   176b8:	ldr	lr, [sp, #4]
   176bc:	add	sp, sp, #8
   176c0:	pop	{r2, r3}
   176c4:	bx	lr
   176c8:	push	{r1, lr}
   176cc:	mov	r0, #8
   176d0:	bl	1107c <raise@plt>
   176d4:	pop	{r1, pc}
   176d8:	cmp	r1, r3
   176dc:	cmpeq	r0, r2
   176e0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   176e4:	mov	r4, r0
   176e8:	movcc	r0, #0
   176ec:	mov	r5, r1
   176f0:	ldr	lr, [sp, #36]	; 0x24
   176f4:	movcc	r1, r0
   176f8:	bcc	177f4 <_obstack_memory_used@@Base+0x658>
   176fc:	cmp	r3, #0
   17700:	clzeq	ip, r2
   17704:	clzne	ip, r3
   17708:	addeq	ip, ip, #32
   1770c:	cmp	r5, #0
   17710:	clzeq	r1, r4
   17714:	addeq	r1, r1, #32
   17718:	clzne	r1, r5
   1771c:	sub	ip, ip, r1
   17720:	sub	sl, ip, #32
   17724:	lsl	r9, r3, ip
   17728:	rsb	fp, ip, #32
   1772c:	orr	r9, r9, r2, lsl sl
   17730:	orr	r9, r9, r2, lsr fp
   17734:	lsl	r8, r2, ip
   17738:	cmp	r5, r9
   1773c:	cmpeq	r4, r8
   17740:	movcc	r0, #0
   17744:	movcc	r1, r0
   17748:	bcc	17764 <_obstack_memory_used@@Base+0x5c8>
   1774c:	mov	r0, #1
   17750:	subs	r4, r4, r8
   17754:	lsl	r1, r0, sl
   17758:	orr	r1, r1, r0, lsr fp
   1775c:	lsl	r0, r0, ip
   17760:	sbc	r5, r5, r9
   17764:	cmp	ip, #0
   17768:	beq	177f4 <_obstack_memory_used@@Base+0x658>
   1776c:	lsr	r6, r8, #1
   17770:	orr	r6, r6, r9, lsl #31
   17774:	lsr	r7, r9, #1
   17778:	mov	r2, ip
   1777c:	b	177a0 <_obstack_memory_used@@Base+0x604>
   17780:	subs	r3, r4, r6
   17784:	sbc	r8, r5, r7
   17788:	adds	r3, r3, r3
   1778c:	adc	r8, r8, r8
   17790:	adds	r4, r3, #1
   17794:	adc	r5, r8, #0
   17798:	subs	r2, r2, #1
   1779c:	beq	177bc <_obstack_memory_used@@Base+0x620>
   177a0:	cmp	r5, r7
   177a4:	cmpeq	r4, r6
   177a8:	bcs	17780 <_obstack_memory_used@@Base+0x5e4>
   177ac:	adds	r4, r4, r4
   177b0:	adc	r5, r5, r5
   177b4:	subs	r2, r2, #1
   177b8:	bne	177a0 <_obstack_memory_used@@Base+0x604>
   177bc:	lsr	r3, r4, ip
   177c0:	orr	r3, r3, r5, lsl fp
   177c4:	lsr	r2, r5, ip
   177c8:	orr	r3, r3, r5, lsr sl
   177cc:	adds	r0, r0, r4
   177d0:	mov	r4, r3
   177d4:	lsl	r3, r2, ip
   177d8:	orr	r3, r3, r4, lsl sl
   177dc:	lsl	ip, r4, ip
   177e0:	orr	r3, r3, r4, lsr fp
   177e4:	adc	r1, r1, r5
   177e8:	subs	r0, r0, ip
   177ec:	mov	r5, r2
   177f0:	sbc	r1, r1, r3
   177f4:	cmp	lr, #0
   177f8:	strdne	r4, [lr]
   177fc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17800:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   17804:	mov	r7, r0
   17808:	ldr	r6, [pc, #72]	; 17858 <_obstack_memory_used@@Base+0x6bc>
   1780c:	ldr	r5, [pc, #72]	; 1785c <_obstack_memory_used@@Base+0x6c0>
   17810:	add	r6, pc, r6
   17814:	add	r5, pc, r5
   17818:	sub	r6, r6, r5
   1781c:	mov	r8, r1
   17820:	mov	r9, r2
   17824:	bl	11044 <calloc@plt-0x20>
   17828:	asrs	r6, r6, #2
   1782c:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   17830:	mov	r4, #0
   17834:	add	r4, r4, #1
   17838:	ldr	r3, [r5], #4
   1783c:	mov	r2, r9
   17840:	mov	r1, r8
   17844:	mov	r0, r7
   17848:	blx	r3
   1784c:	cmp	r6, r4
   17850:	bne	17834 <_obstack_memory_used@@Base+0x698>
   17854:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   17858:	strdeq	r1, [r1], -ip
   1785c:	strdeq	r1, [r1], -r4
   17860:	bx	lr
   17864:	ldr	r3, [pc, #12]	; 17878 <_obstack_memory_used@@Base+0x6dc>
   17868:	mov	r1, #0
   1786c:	add	r3, pc, r3
   17870:	ldr	r2, [r3]
   17874:	b	1128c <__cxa_atexit@plt>
   17878:			; <UNDEFINED> instruction: 0x000118b0

Disassembly of section .fini:

0001787c <.fini>:
   1787c:	push	{r3, lr}
   17880:	pop	{r3, pc}
