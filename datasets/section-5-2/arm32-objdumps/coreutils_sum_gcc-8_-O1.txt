
../repos/coreutils/src/sum:     file format elf32-littlearm


Disassembly of section .init:

00010e20 <.init>:
   10e20:	push	{r3, lr}
   10e24:	bl	1114c <__assert_fail@plt+0x48>
   10e28:	pop	{r3, pc}

Disassembly of section .plt:

00010e2c <fdopen@plt-0x14>:
   10e2c:	push	{lr}		; (str lr, [sp, #-4]!)
   10e30:	ldr	lr, [pc, #4]	; 10e3c <fdopen@plt-0x4>
   10e34:	add	lr, pc, lr
   10e38:	ldr	pc, [lr, #8]!
   10e3c:	andeq	r7, r1, r4, asr #3

00010e40 <fdopen@plt>:
   10e40:	add	ip, pc, #0, 12
   10e44:	add	ip, ip, #94208	; 0x17000
   10e48:	ldr	pc, [ip, #452]!	; 0x1c4

00010e4c <calloc@plt>:
   10e4c:	add	ip, pc, #0, 12
   10e50:	add	ip, ip, #94208	; 0x17000
   10e54:	ldr	pc, [ip, #444]!	; 0x1bc

00010e58 <fputs_unlocked@plt>:
   10e58:	add	ip, pc, #0, 12
   10e5c:	add	ip, ip, #94208	; 0x17000
   10e60:	ldr	pc, [ip, #436]!	; 0x1b4

00010e64 <raise@plt>:
   10e64:	add	ip, pc, #0, 12
   10e68:	add	ip, ip, #94208	; 0x17000
   10e6c:	ldr	pc, [ip, #428]!	; 0x1ac

00010e70 <strcmp@plt>:
   10e70:	add	ip, pc, #0, 12
   10e74:	add	ip, ip, #94208	; 0x17000
   10e78:	ldr	pc, [ip, #420]!	; 0x1a4

00010e7c <posix_fadvise64@plt>:
   10e7c:	add	ip, pc, #0, 12
   10e80:	add	ip, ip, #94208	; 0x17000
   10e84:	ldr	pc, [ip, #412]!	; 0x19c

00010e88 <fflush@plt>:
   10e88:	add	ip, pc, #0, 12
   10e8c:	add	ip, ip, #94208	; 0x17000
   10e90:	ldr	pc, [ip, #404]!	; 0x194

00010e94 <memmove@plt>:
   10e94:	add	ip, pc, #0, 12
   10e98:	add	ip, ip, #94208	; 0x17000
   10e9c:	ldr	pc, [ip, #396]!	; 0x18c

00010ea0 <free@plt>:
   10ea0:	add	ip, pc, #0, 12
   10ea4:	add	ip, ip, #94208	; 0x17000
   10ea8:	ldr	pc, [ip, #388]!	; 0x184

00010eac <_exit@plt>:
   10eac:	add	ip, pc, #0, 12
   10eb0:	add	ip, ip, #94208	; 0x17000
   10eb4:	ldr	pc, [ip, #380]!	; 0x17c

00010eb8 <memcpy@plt>:
   10eb8:	add	ip, pc, #0, 12
   10ebc:	add	ip, ip, #94208	; 0x17000
   10ec0:	ldr	pc, [ip, #372]!	; 0x174

00010ec4 <__strtoull_internal@plt>:
   10ec4:	add	ip, pc, #0, 12
   10ec8:	add	ip, ip, #94208	; 0x17000
   10ecc:	ldr	pc, [ip, #364]!	; 0x16c

00010ed0 <mbsinit@plt>:
   10ed0:	add	ip, pc, #0, 12
   10ed4:	add	ip, ip, #94208	; 0x17000
   10ed8:	ldr	pc, [ip, #356]!	; 0x164

00010edc <memcmp@plt>:
   10edc:	add	ip, pc, #0, 12
   10ee0:	add	ip, ip, #94208	; 0x17000
   10ee4:	ldr	pc, [ip, #348]!	; 0x15c

00010ee8 <fputc_unlocked@plt>:
   10ee8:	add	ip, pc, #0, 12
   10eec:	add	ip, ip, #94208	; 0x17000
   10ef0:	ldr	pc, [ip, #340]!	; 0x154

00010ef4 <dcgettext@plt>:
   10ef4:	add	ip, pc, #0, 12
   10ef8:	add	ip, ip, #94208	; 0x17000
   10efc:	ldr	pc, [ip, #332]!	; 0x14c

00010f00 <realloc@plt>:
   10f00:	add	ip, pc, #0, 12
   10f04:	add	ip, ip, #94208	; 0x17000
   10f08:	ldr	pc, [ip, #324]!	; 0x144

00010f0c <textdomain@plt>:
   10f0c:	add	ip, pc, #0, 12
   10f10:	add	ip, ip, #94208	; 0x17000
   10f14:	ldr	pc, [ip, #316]!	; 0x13c

00010f18 <iswprint@plt>:
   10f18:	add	ip, pc, #0, 12
   10f1c:	add	ip, ip, #94208	; 0x17000
   10f20:	ldr	pc, [ip, #308]!	; 0x134

00010f24 <__memcpy_chk@plt>:
   10f24:	add	ip, pc, #0, 12
   10f28:	add	ip, ip, #94208	; 0x17000
   10f2c:	ldr	pc, [ip, #300]!	; 0x12c

00010f30 <fwrite@plt>:
   10f30:	add	ip, pc, #0, 12
   10f34:	add	ip, ip, #94208	; 0x17000
   10f38:	ldr	pc, [ip, #292]!	; 0x124

00010f3c <lseek64@plt>:
   10f3c:	add	ip, pc, #0, 12
   10f40:	add	ip, ip, #94208	; 0x17000
   10f44:	ldr	pc, [ip, #284]!	; 0x11c

00010f48 <__ctype_get_mb_cur_max@plt>:
   10f48:	add	ip, pc, #0, 12
   10f4c:	add	ip, ip, #94208	; 0x17000
   10f50:	ldr	pc, [ip, #276]!	; 0x114

00010f54 <__fpending@plt>:
   10f54:	add	ip, pc, #0, 12
   10f58:	add	ip, ip, #94208	; 0x17000
   10f5c:	ldr	pc, [ip, #268]!	; 0x10c

00010f60 <mbrtowc@plt>:
   10f60:	add	ip, pc, #0, 12
   10f64:	add	ip, ip, #94208	; 0x17000
   10f68:	ldr	pc, [ip, #260]!	; 0x104

00010f6c <error@plt>:
   10f6c:	add	ip, pc, #0, 12
   10f70:	add	ip, ip, #94208	; 0x17000
   10f74:	ldr	pc, [ip, #252]!	; 0xfc

00010f78 <getenv@plt>:
   10f78:	add	ip, pc, #0, 12
   10f7c:	add	ip, ip, #94208	; 0x17000
   10f80:	ldr	pc, [ip, #244]!	; 0xf4

00010f84 <malloc@plt>:
   10f84:	add	ip, pc, #0, 12
   10f88:	add	ip, ip, #94208	; 0x17000
   10f8c:	ldr	pc, [ip, #236]!	; 0xec

00010f90 <__libc_start_main@plt>:
   10f90:	add	ip, pc, #0, 12
   10f94:	add	ip, ip, #94208	; 0x17000
   10f98:	ldr	pc, [ip, #228]!	; 0xe4

00010f9c <__freading@plt>:
   10f9c:	add	ip, pc, #0, 12
   10fa0:	add	ip, ip, #94208	; 0x17000
   10fa4:	ldr	pc, [ip, #220]!	; 0xdc

00010fa8 <__gmon_start__@plt>:
   10fa8:	add	ip, pc, #0, 12
   10fac:	add	ip, ip, #94208	; 0x17000
   10fb0:	ldr	pc, [ip, #212]!	; 0xd4

00010fb4 <getopt_long@plt>:
   10fb4:	add	ip, pc, #0, 12
   10fb8:	add	ip, ip, #94208	; 0x17000
   10fbc:	ldr	pc, [ip, #204]!	; 0xcc

00010fc0 <__ctype_b_loc@plt>:
   10fc0:	add	ip, pc, #0, 12
   10fc4:	add	ip, ip, #94208	; 0x17000
   10fc8:	ldr	pc, [ip, #196]!	; 0xc4

00010fcc <exit@plt>:
   10fcc:	add	ip, pc, #0, 12
   10fd0:	add	ip, ip, #94208	; 0x17000
   10fd4:	ldr	pc, [ip, #188]!	; 0xbc

00010fd8 <strlen@plt>:
   10fd8:	add	ip, pc, #0, 12
   10fdc:	add	ip, ip, #94208	; 0x17000
   10fe0:	ldr	pc, [ip, #180]!	; 0xb4

00010fe4 <strchr@plt>:
   10fe4:	add	ip, pc, #0, 12
   10fe8:	add	ip, ip, #94208	; 0x17000
   10fec:	ldr	pc, [ip, #172]!	; 0xac

00010ff0 <__errno_location@plt>:
   10ff0:	add	ip, pc, #0, 12
   10ff4:	add	ip, ip, #94208	; 0x17000
   10ff8:	ldr	pc, [ip, #164]!	; 0xa4

00010ffc <__sprintf_chk@plt>:
   10ffc:	add	ip, pc, #0, 12
   11000:	add	ip, ip, #94208	; 0x17000
   11004:	ldr	pc, [ip, #156]!	; 0x9c

00011008 <__cxa_atexit@plt>:
   11008:	add	ip, pc, #0, 12
   1100c:	add	ip, ip, #94208	; 0x17000
   11010:	ldr	pc, [ip, #148]!	; 0x94

00011014 <setvbuf@plt>:
   11014:	add	ip, pc, #0, 12
   11018:	add	ip, ip, #94208	; 0x17000
   1101c:	ldr	pc, [ip, #140]!	; 0x8c

00011020 <memset@plt>:
   11020:	add	ip, pc, #0, 12
   11024:	add	ip, ip, #94208	; 0x17000
   11028:	ldr	pc, [ip, #132]!	; 0x84

0001102c <__printf_chk@plt>:
   1102c:	add	ip, pc, #0, 12
   11030:	add	ip, ip, #94208	; 0x17000
   11034:	ldr	pc, [ip, #124]!	; 0x7c

00011038 <fileno@plt>:
   11038:	add	ip, pc, #0, 12
   1103c:	add	ip, ip, #94208	; 0x17000
   11040:	ldr	pc, [ip, #116]!	; 0x74

00011044 <__fprintf_chk@plt>:
   11044:	add	ip, pc, #0, 12
   11048:	add	ip, ip, #94208	; 0x17000
   1104c:	ldr	pc, [ip, #108]!	; 0x6c

00011050 <fclose@plt>:
   11050:	add	ip, pc, #0, 12
   11054:	add	ip, ip, #94208	; 0x17000
   11058:	ldr	pc, [ip, #100]!	; 0x64

0001105c <fseeko64@plt>:
   1105c:	add	ip, pc, #0, 12
   11060:	add	ip, ip, #94208	; 0x17000
   11064:	ldr	pc, [ip, #92]!	; 0x5c

00011068 <fcntl64@plt>:
   11068:	add	ip, pc, #0, 12
   1106c:	add	ip, ip, #94208	; 0x17000
   11070:	ldr	pc, [ip, #84]!	; 0x54

00011074 <__overflow@plt>:
   11074:	add	ip, pc, #0, 12
   11078:	add	ip, ip, #94208	; 0x17000
   1107c:	ldr	pc, [ip, #76]!	; 0x4c

00011080 <setlocale@plt>:
   11080:	add	ip, pc, #0, 12
   11084:	add	ip, ip, #94208	; 0x17000
   11088:	ldr	pc, [ip, #68]!	; 0x44

0001108c <strrchr@plt>:
   1108c:	add	ip, pc, #0, 12
   11090:	add	ip, ip, #94208	; 0x17000
   11094:	ldr	pc, [ip, #60]!	; 0x3c

00011098 <nl_langinfo@plt>:
   11098:	add	ip, pc, #0, 12
   1109c:	add	ip, ip, #94208	; 0x17000
   110a0:	ldr	pc, [ip, #52]!	; 0x34

000110a4 <localeconv@plt>:
   110a4:	add	ip, pc, #0, 12
   110a8:	add	ip, ip, #94208	; 0x17000
   110ac:	ldr	pc, [ip, #44]!	; 0x2c

000110b0 <clearerr_unlocked@plt>:
   110b0:	add	ip, pc, #0, 12
   110b4:	add	ip, ip, #94208	; 0x17000
   110b8:	ldr	pc, [ip, #36]!	; 0x24

000110bc <fopen64@plt>:
   110bc:	add	ip, pc, #0, 12
   110c0:	add	ip, ip, #94208	; 0x17000
   110c4:	ldr	pc, [ip, #28]!

000110c8 <bindtextdomain@plt>:
   110c8:	add	ip, pc, #0, 12
   110cc:	add	ip, ip, #94208	; 0x17000
   110d0:	ldr	pc, [ip, #20]!

000110d4 <fread_unlocked@plt>:
   110d4:	add	ip, pc, #0, 12
   110d8:	add	ip, ip, #94208	; 0x17000
   110dc:	ldr	pc, [ip, #12]!

000110e0 <strncmp@plt>:
   110e0:	add	ip, pc, #0, 12
   110e4:	add	ip, ip, #94208	; 0x17000
   110e8:	ldr	pc, [ip, #4]!

000110ec <abort@plt>:
   110ec:	add	ip, pc, #0, 12
   110f0:	add	ip, ip, #90112	; 0x16000
   110f4:	ldr	pc, [ip, #4092]!	; 0xffc

000110f8 <close@plt>:
   110f8:	add	ip, pc, #0, 12
   110fc:	add	ip, ip, #90112	; 0x16000
   11100:	ldr	pc, [ip, #4084]!	; 0xff4

00011104 <__assert_fail@plt>:
   11104:	add	ip, pc, #0, 12
   11108:	add	ip, ip, #90112	; 0x16000
   1110c:	ldr	pc, [ip, #4076]!	; 0xfec

Disassembly of section .text:

00011110 <.text>:
   11110:	mov	fp, #0
   11114:	mov	lr, #0
   11118:	pop	{r1}		; (ldr r1, [sp], #4)
   1111c:	mov	r2, sp
   11120:	push	{r2}		; (str r2, [sp, #-4]!)
   11124:	push	{r0}		; (str r0, [sp, #-4]!)
   11128:	ldr	ip, [pc, #16]	; 11140 <__assert_fail@plt+0x3c>
   1112c:	push	{ip}		; (str ip, [sp, #-4]!)
   11130:	ldr	r0, [pc, #12]	; 11144 <__assert_fail@plt+0x40>
   11134:	ldr	r3, [pc, #12]	; 11148 <__assert_fail@plt+0x44>
   11138:	bl	10f90 <__libc_start_main@plt>
   1113c:	bl	110ec <abort@plt>
   11140:	andeq	r7, r1, r8, ror #5
   11144:	andeq	r1, r1, r8, ror sl
   11148:	andeq	r7, r1, r8, lsl #5
   1114c:	ldr	r3, [pc, #20]	; 11168 <__assert_fail@plt+0x64>
   11150:	ldr	r2, [pc, #20]	; 1116c <__assert_fail@plt+0x68>
   11154:	add	r3, pc, r3
   11158:	ldr	r2, [r3, r2]
   1115c:	cmp	r2, #0
   11160:	bxeq	lr
   11164:	b	10fa8 <__gmon_start__@plt>
   11168:	andeq	r6, r1, r4, lsr #29
   1116c:	strdeq	r0, [r0], -ip
   11170:	ldr	r0, [pc, #24]	; 11190 <__assert_fail@plt+0x8c>
   11174:	ldr	r3, [pc, #24]	; 11194 <__assert_fail@plt+0x90>
   11178:	cmp	r3, r0
   1117c:	bxeq	lr
   11180:	ldr	r3, [pc, #16]	; 11198 <__assert_fail@plt+0x94>
   11184:	cmp	r3, #0
   11188:	bxeq	lr
   1118c:	bx	r3
   11190:	andeq	r8, r2, r4, asr r1
   11194:	andeq	r8, r2, r4, asr r1
   11198:	andeq	r0, r0, r0
   1119c:	ldr	r0, [pc, #36]	; 111c8 <__assert_fail@plt+0xc4>
   111a0:	ldr	r1, [pc, #36]	; 111cc <__assert_fail@plt+0xc8>
   111a4:	sub	r1, r1, r0
   111a8:	asr	r1, r1, #2
   111ac:	add	r1, r1, r1, lsr #31
   111b0:	asrs	r1, r1, #1
   111b4:	bxeq	lr
   111b8:	ldr	r3, [pc, #16]	; 111d0 <__assert_fail@plt+0xcc>
   111bc:	cmp	r3, #0
   111c0:	bxeq	lr
   111c4:	bx	r3
   111c8:	andeq	r8, r2, r4, asr r1
   111cc:	andeq	r8, r2, r4, asr r1
   111d0:	andeq	r0, r0, r0
   111d4:	push	{r4, lr}
   111d8:	ldr	r4, [pc, #24]	; 111f8 <__assert_fail@plt+0xf4>
   111dc:	ldrb	r3, [r4]
   111e0:	cmp	r3, #0
   111e4:	popne	{r4, pc}
   111e8:	bl	11170 <__assert_fail@plt+0x6c>
   111ec:	mov	r3, #1
   111f0:	strb	r3, [r4]
   111f4:	pop	{r4, pc}
   111f8:	andeq	r8, r2, r8, ror r1
   111fc:	b	1119c <__assert_fail@plt+0x98>
   11200:	strd	r4, [sp, #-36]!	; 0xffffffdc
   11204:	strd	r6, [sp, #8]
   11208:	strd	r8, [sp, #16]
   1120c:	strd	sl, [sp, #24]
   11210:	str	lr, [sp, #32]
   11214:	sub	sp, sp, #20
   11218:	mov	r8, r0
   1121c:	str	r1, [sp, #8]
   11220:	str	r2, [sp, #12]
   11224:	mov	r0, #32768	; 0x8000
   11228:	bl	16318 <__assert_fail@plt+0x5214>
   1122c:	subs	r9, r0, #0
   11230:	beq	11374 <__assert_fail@plt+0x270>
   11234:	mov	r4, #0
   11238:	mov	r6, #0
   1123c:	mov	r7, #0
   11240:	mov	sl, #1
   11244:	add	fp, r9, #32512	; 0x7f00
   11248:	add	fp, fp, #255	; 0xff
   1124c:	mov	r5, #0
   11250:	mov	r3, r8
   11254:	rsb	r2, r5, #32768	; 0x8000
   11258:	mov	r1, sl
   1125c:	add	r0, r9, r5
   11260:	bl	110d4 <fread_unlocked@plt>
   11264:	add	r5, r5, r0
   11268:	cmp	r5, #32768	; 0x8000
   1126c:	beq	11314 <__assert_fail@plt+0x210>
   11270:	cmp	r0, #0
   11274:	beq	11300 <__assert_fail@plt+0x1fc>
   11278:	ldr	r3, [r8]
   1127c:	tst	r3, #16
   11280:	beq	11250 <__assert_fail@plt+0x14c>
   11284:	cmp	r5, #0
   11288:	subne	r2, r9, #1
   1128c:	addne	r1, r2, r5
   11290:	beq	1137c <__assert_fail@plt+0x278>
   11294:	lsl	r3, r4, #15
   11298:	uxth	r3, r3
   1129c:	add	r4, r3, r4, asr #1
   112a0:	ldrb	r3, [r2, #1]!
   112a4:	add	r4, r4, r3
   112a8:	uxth	r4, r4
   112ac:	cmp	r2, r1
   112b0:	bne	11294 <__assert_fail@plt+0x190>
   112b4:	adds	r2, r6, r5
   112b8:	adc	r3, r7, #0
   112bc:	cmp	r3, r7
   112c0:	cmpeq	r2, r6
   112c4:	bcs	11384 <__assert_fail@plt+0x280>
   112c8:	bl	10ff0 <__errno_location@plt>
   112cc:	mov	r3, #75	; 0x4b
   112d0:	str	r3, [r0]
   112d4:	mvn	r4, #0
   112d8:	mov	r0, r9
   112dc:	bl	12200 <__assert_fail@plt+0x10fc>
   112e0:	mov	r0, r4
   112e4:	add	sp, sp, #20
   112e8:	ldrd	r4, [sp]
   112ec:	ldrd	r6, [sp, #8]
   112f0:	ldrd	r8, [sp, #16]
   112f4:	ldrd	sl, [sp, #24]
   112f8:	add	sp, sp, #32
   112fc:	pop	{pc}		; (ldr pc, [sp], #4)
   11300:	ldr	r3, [r8]
   11304:	tst	r3, #32
   11308:	mvnne	r4, #0
   1130c:	bne	112d8 <__assert_fail@plt+0x1d4>
   11310:	b	11284 <__assert_fail@plt+0x180>
   11314:	sub	r2, r9, #1
   11318:	lsl	r3, r4, #15
   1131c:	uxth	r3, r3
   11320:	add	r4, r3, r4, asr #1
   11324:	ldrb	r3, [r2, #1]!
   11328:	add	r4, r4, r3
   1132c:	uxth	r4, r4
   11330:	cmp	r2, fp
   11334:	bne	11318 <__assert_fail@plt+0x214>
   11338:	adds	r3, r6, #32768	; 0x8000
   1133c:	str	r3, [sp]
   11340:	adc	r3, r7, #0
   11344:	str	r3, [sp, #4]
   11348:	ldrd	r2, [sp]
   1134c:	cmp	r3, r7
   11350:	cmpeq	r2, r6
   11354:	bcc	11360 <__assert_fail@plt+0x25c>
   11358:	ldrd	r6, [sp]
   1135c:	b	1124c <__assert_fail@plt+0x148>
   11360:	bl	10ff0 <__errno_location@plt>
   11364:	mov	r3, #75	; 0x4b
   11368:	str	r3, [r0]
   1136c:	mvn	r4, #0
   11370:	b	112d8 <__assert_fail@plt+0x1d4>
   11374:	mvn	r4, #0
   11378:	b	112e0 <__assert_fail@plt+0x1dc>
   1137c:	adds	r2, r6, r5
   11380:	adc	r3, r7, #0
   11384:	ldr	r1, [sp, #8]
   11388:	str	r4, [r1]
   1138c:	ldr	r1, [sp, #12]
   11390:	strd	r2, [r1]
   11394:	mov	r4, #0
   11398:	b	112d8 <__assert_fail@plt+0x1d4>
   1139c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   113a0:	strd	r6, [sp, #8]
   113a4:	strd	r8, [sp, #16]
   113a8:	strd	sl, [sp, #24]
   113ac:	str	lr, [sp, #32]
   113b0:	sub	sp, sp, #20
   113b4:	mov	r5, r0
   113b8:	str	r1, [sp, #8]
   113bc:	str	r2, [sp, #12]
   113c0:	mov	r0, #32768	; 0x8000
   113c4:	bl	16318 <__assert_fail@plt+0x5214>
   113c8:	subs	r9, r0, #0
   113cc:	beq	114f0 <__assert_fail@plt+0x3ec>
   113d0:	mov	r8, #0
   113d4:	mov	r6, #0
   113d8:	mov	r7, #0
   113dc:	mov	sl, #1
   113e0:	add	fp, r9, #32512	; 0x7f00
   113e4:	add	fp, fp, #255	; 0xff
   113e8:	mov	r4, #0
   113ec:	mov	r3, r5
   113f0:	rsb	r2, r4, #32768	; 0x8000
   113f4:	mov	r1, sl
   113f8:	add	r0, r9, r4
   113fc:	bl	110d4 <fread_unlocked@plt>
   11400:	add	r4, r4, r0
   11404:	cmp	r4, #32768	; 0x8000
   11408:	beq	114a0 <__assert_fail@plt+0x39c>
   1140c:	cmp	r0, #0
   11410:	beq	1148c <__assert_fail@plt+0x388>
   11414:	ldr	r3, [r5]
   11418:	tst	r3, #16
   1141c:	beq	113ec <__assert_fail@plt+0x2e8>
   11420:	cmp	r4, #0
   11424:	subne	r3, r9, #1
   11428:	addne	r1, r3, r4
   1142c:	beq	114f8 <__assert_fail@plt+0x3f4>
   11430:	ldrb	r2, [r3, #1]!
   11434:	add	r8, r8, r2
   11438:	cmp	r3, r1
   1143c:	bne	11430 <__assert_fail@plt+0x32c>
   11440:	adds	r2, r6, r4
   11444:	adc	r3, r7, #0
   11448:	cmp	r3, r7
   1144c:	cmpeq	r2, r6
   11450:	bcs	11500 <__assert_fail@plt+0x3fc>
   11454:	bl	10ff0 <__errno_location@plt>
   11458:	mov	r3, #75	; 0x4b
   1145c:	str	r3, [r0]
   11460:	mvn	r4, #0
   11464:	mov	r0, r9
   11468:	bl	12200 <__assert_fail@plt+0x10fc>
   1146c:	mov	r0, r4
   11470:	add	sp, sp, #20
   11474:	ldrd	r4, [sp]
   11478:	ldrd	r6, [sp, #8]
   1147c:	ldrd	r8, [sp, #16]
   11480:	ldrd	sl, [sp, #24]
   11484:	add	sp, sp, #32
   11488:	pop	{pc}		; (ldr pc, [sp], #4)
   1148c:	ldr	r3, [r5]
   11490:	tst	r3, #32
   11494:	mvnne	r4, #0
   11498:	bne	11464 <__assert_fail@plt+0x360>
   1149c:	b	11420 <__assert_fail@plt+0x31c>
   114a0:	sub	r3, r9, #1
   114a4:	ldrb	r2, [r3, #1]!
   114a8:	add	r8, r8, r2
   114ac:	cmp	fp, r3
   114b0:	bne	114a4 <__assert_fail@plt+0x3a0>
   114b4:	adds	r3, r6, #32768	; 0x8000
   114b8:	str	r3, [sp]
   114bc:	adc	r3, r7, #0
   114c0:	str	r3, [sp, #4]
   114c4:	ldrd	r2, [sp]
   114c8:	cmp	r3, r7
   114cc:	cmpeq	r2, r6
   114d0:	bcc	114dc <__assert_fail@plt+0x3d8>
   114d4:	ldrd	r6, [sp]
   114d8:	b	113e8 <__assert_fail@plt+0x2e4>
   114dc:	bl	10ff0 <__errno_location@plt>
   114e0:	mov	r3, #75	; 0x4b
   114e4:	str	r3, [r0]
   114e8:	mvn	r4, #0
   114ec:	b	11464 <__assert_fail@plt+0x360>
   114f0:	mvn	r4, #0
   114f4:	b	1146c <__assert_fail@plt+0x368>
   114f8:	adds	r2, r6, r4
   114fc:	adc	r3, r7, #0
   11500:	lsr	r1, r8, #16
   11504:	uxtah	r8, r1, r8
   11508:	asr	r1, r8, #16
   1150c:	uxtah	r8, r1, r8
   11510:	ldr	r1, [sp, #8]
   11514:	str	r8, [r1]
   11518:	ldr	r1, [sp, #12]
   1151c:	strd	r2, [r1]
   11520:	mov	r4, #0
   11524:	b	11464 <__assert_fail@plt+0x360>
   11528:	strd	r4, [sp, #-16]!
   1152c:	str	r6, [sp, #8]
   11530:	str	lr, [sp, #12]
   11534:	sub	sp, sp, #672	; 0x2a0
   11538:	mov	r6, r0
   1153c:	ldrb	r4, [sp, #688]	; 0x2b0
   11540:	ldr	r5, [r2]
   11544:	mov	r2, #1024	; 0x400
   11548:	mov	r3, #0
   1154c:	strd	r2, [sp, #8]
   11550:	mov	r2, #1
   11554:	mov	r3, #0
   11558:	strd	r2, [sp]
   1155c:	mov	r3, #0
   11560:	add	r2, sp, #20
   11564:	add	r1, sp, #696	; 0x2b8
   11568:	ldrd	r0, [r1]
   1156c:	bl	123c0 <__assert_fail@plt+0x12bc>
   11570:	mov	r3, r0
   11574:	mov	r2, r5
   11578:	movw	r1, #29456	; 0x7310
   1157c:	movt	r1, #1
   11580:	mov	r0, #1
   11584:	bl	1102c <__printf_chk@plt>
   11588:	ldrb	r3, [sp, #692]	; 0x2b4
   1158c:	cmp	r3, #0
   11590:	bne	115d0 <__assert_fail@plt+0x4cc>
   11594:	movw	r3, #33140	; 0x8174
   11598:	movt	r3, #2
   1159c:	ldr	r0, [r3]
   115a0:	ldr	r3, [r0, #20]
   115a4:	ldr	r2, [r0, #24]
   115a8:	cmp	r3, r2
   115ac:	addcc	r2, r3, #1
   115b0:	strcc	r2, [r0, #20]
   115b4:	strbcc	r4, [r3]
   115b8:	bcs	115e8 <__assert_fail@plt+0x4e4>
   115bc:	add	sp, sp, #672	; 0x2a0
   115c0:	ldrd	r4, [sp]
   115c4:	ldr	r6, [sp, #8]
   115c8:	add	sp, sp, #12
   115cc:	pop	{pc}		; (ldr pc, [sp], #4)
   115d0:	mov	r2, r6
   115d4:	movw	r1, #31908	; 0x7ca4
   115d8:	movt	r1, #1
   115dc:	mov	r0, #1
   115e0:	bl	1102c <__printf_chk@plt>
   115e4:	b	11594 <__assert_fail@plt+0x490>
   115e8:	mov	r1, r4
   115ec:	bl	11074 <__overflow@plt>
   115f0:	b	115bc <__assert_fail@plt+0x4b8>
   115f4:	strd	r4, [sp, #-16]!
   115f8:	str	r6, [sp, #8]
   115fc:	str	lr, [sp, #12]
   11600:	sub	sp, sp, #672	; 0x2a0
   11604:	mov	r6, r0
   11608:	ldrb	r4, [sp, #688]	; 0x2b0
   1160c:	ldr	r5, [r2]
   11610:	mov	r2, #512	; 0x200
   11614:	mov	r3, #0
   11618:	strd	r2, [sp, #8]
   1161c:	mov	r2, #1
   11620:	mov	r3, #0
   11624:	strd	r2, [sp]
   11628:	mov	r3, #0
   1162c:	add	r2, sp, #20
   11630:	add	r1, sp, #696	; 0x2b8
   11634:	ldrd	r0, [r1]
   11638:	bl	123c0 <__assert_fail@plt+0x12bc>
   1163c:	mov	r3, r0
   11640:	mov	r2, r5
   11644:	movw	r1, #29468	; 0x731c
   11648:	movt	r1, #1
   1164c:	mov	r0, #1
   11650:	bl	1102c <__printf_chk@plt>
   11654:	ldrb	r3, [sp, #692]	; 0x2b4
   11658:	cmp	r3, #0
   1165c:	bne	1169c <__assert_fail@plt+0x598>
   11660:	movw	r3, #33140	; 0x8174
   11664:	movt	r3, #2
   11668:	ldr	r0, [r3]
   1166c:	ldr	r3, [r0, #20]
   11670:	ldr	r2, [r0, #24]
   11674:	cmp	r3, r2
   11678:	addcc	r2, r3, #1
   1167c:	strcc	r2, [r0, #20]
   11680:	strbcc	r4, [r3]
   11684:	bcs	116b4 <__assert_fail@plt+0x5b0>
   11688:	add	sp, sp, #672	; 0x2a0
   1168c:	ldrd	r4, [sp]
   11690:	ldr	r6, [sp, #8]
   11694:	add	sp, sp, #12
   11698:	pop	{pc}		; (ldr pc, [sp], #4)
   1169c:	mov	r2, r6
   116a0:	movw	r1, #31908	; 0x7ca4
   116a4:	movt	r1, #1
   116a8:	mov	r0, #1
   116ac:	bl	1102c <__printf_chk@plt>
   116b0:	b	11660 <__assert_fail@plt+0x55c>
   116b4:	mov	r1, r4
   116b8:	bl	11074 <__overflow@plt>
   116bc:	b	11688 <__assert_fail@plt+0x584>
   116c0:	push	{lr}		; (str lr, [sp, #-4]!)
   116c4:	sub	sp, sp, #60	; 0x3c
   116c8:	subs	r4, r0, #0
   116cc:	beq	11714 <__assert_fail@plt+0x610>
   116d0:	movw	r3, #33128	; 0x8168
   116d4:	movt	r3, #2
   116d8:	ldr	r5, [r3]
   116dc:	mov	r2, #5
   116e0:	movw	r1, #29616	; 0x73b0
   116e4:	movt	r1, #1
   116e8:	mov	r0, #0
   116ec:	bl	10ef4 <dcgettext@plt>
   116f0:	movw	r3, #33164	; 0x818c
   116f4:	movt	r3, #2
   116f8:	ldr	r3, [r3]
   116fc:	mov	r2, r0
   11700:	mov	r1, #1
   11704:	mov	r0, r5
   11708:	bl	11044 <__fprintf_chk@plt>
   1170c:	mov	r0, r4
   11710:	bl	10fcc <exit@plt>
   11714:	mov	r2, #5
   11718:	movw	r1, #29656	; 0x73d8
   1171c:	movt	r1, #1
   11720:	mov	r0, #0
   11724:	bl	10ef4 <dcgettext@plt>
   11728:	movw	r3, #33164	; 0x818c
   1172c:	movt	r3, #2
   11730:	ldr	r2, [r3]
   11734:	mov	r1, r0
   11738:	mov	r0, #1
   1173c:	bl	1102c <__printf_chk@plt>
   11740:	mov	r2, #5
   11744:	movw	r1, #29692	; 0x73fc
   11748:	movt	r1, #1
   1174c:	mov	r0, #0
   11750:	bl	10ef4 <dcgettext@plt>
   11754:	mov	r3, #16
   11758:	movw	r2, #29732	; 0x7424
   1175c:	movt	r2, #1
   11760:	mov	r1, r0
   11764:	mov	r0, #1
   11768:	bl	1102c <__printf_chk@plt>
   1176c:	mov	r2, #5
   11770:	movw	r1, #29736	; 0x7428
   11774:	movt	r1, #1
   11778:	mov	r0, #0
   1177c:	bl	10ef4 <dcgettext@plt>
   11780:	movw	r5, #33140	; 0x8174
   11784:	movt	r5, #2
   11788:	ldr	r1, [r5]
   1178c:	bl	10e58 <fputs_unlocked@plt>
   11790:	mov	r2, #5
   11794:	movw	r1, #29792	; 0x7460
   11798:	movt	r1, #1
   1179c:	mov	r0, #0
   117a0:	bl	10ef4 <dcgettext@plt>
   117a4:	ldr	r1, [r5]
   117a8:	bl	10e58 <fputs_unlocked@plt>
   117ac:	mov	r2, #5
   117b0:	movw	r1, #29932	; 0x74ec
   117b4:	movt	r1, #1
   117b8:	mov	r0, #0
   117bc:	bl	10ef4 <dcgettext@plt>
   117c0:	ldr	r1, [r5]
   117c4:	bl	10e58 <fputs_unlocked@plt>
   117c8:	mov	r2, #5
   117cc:	movw	r1, #29980	; 0x751c
   117d0:	movt	r1, #1
   117d4:	mov	r0, #0
   117d8:	bl	10ef4 <dcgettext@plt>
   117dc:	ldr	r1, [r5]
   117e0:	bl	10e58 <fputs_unlocked@plt>
   117e4:	movw	r0, #29476	; 0x7324
   117e8:	movt	r0, #1
   117ec:	ldr	r1, [r0]
   117f0:	ldr	r3, [r0, #4]
   117f4:	str	r1, [sp]
   117f8:	str	r3, [sp, #4]
   117fc:	ldrd	r2, [r0, #8]
   11800:	strd	r2, [sp, #8]
   11804:	ldrd	r2, [r0, #16]
   11808:	strd	r2, [sp, #16]
   1180c:	ldrd	r2, [r0, #24]
   11810:	strd	r2, [sp, #24]
   11814:	ldrd	r2, [r0, #32]
   11818:	strd	r2, [sp, #32]
   1181c:	ldrd	r2, [r0, #40]	; 0x28
   11820:	strd	r2, [sp, #40]	; 0x28
   11824:	ldrd	r2, [r0, #48]	; 0x30
   11828:	strd	r2, [sp, #48]	; 0x30
   1182c:	cmp	r1, #0
   11830:	moveq	r5, sp
   11834:	beq	11860 <__assert_fail@plt+0x75c>
   11838:	mov	r5, sp
   1183c:	movw	r6, #29612	; 0x73ac
   11840:	movt	r6, #1
   11844:	mov	r0, r6
   11848:	bl	10e70 <strcmp@plt>
   1184c:	cmp	r0, #0
   11850:	beq	11860 <__assert_fail@plt+0x75c>
   11854:	ldr	r1, [r5, #8]!
   11858:	cmp	r1, #0
   1185c:	bne	11844 <__assert_fail@plt+0x740>
   11860:	ldr	r5, [r5, #4]
   11864:	cmp	r5, #0
   11868:	beq	119c4 <__assert_fail@plt+0x8c0>
   1186c:	mov	r2, #5
   11870:	movw	r1, #30036	; 0x7554
   11874:	movt	r1, #1
   11878:	mov	r0, #0
   1187c:	bl	10ef4 <dcgettext@plt>
   11880:	movw	r3, #30060	; 0x756c
   11884:	movt	r3, #1
   11888:	movw	r2, #30100	; 0x7594
   1188c:	movt	r2, #1
   11890:	mov	r1, r0
   11894:	mov	r0, #1
   11898:	bl	1102c <__printf_chk@plt>
   1189c:	mov	r1, #0
   118a0:	mov	r0, #5
   118a4:	bl	11080 <setlocale@plt>
   118a8:	cmp	r0, #0
   118ac:	beq	118c8 <__assert_fail@plt+0x7c4>
   118b0:	mov	r2, #3
   118b4:	movw	r1, #30116	; 0x75a4
   118b8:	movt	r1, #1
   118bc:	bl	110e0 <strncmp@plt>
   118c0:	cmp	r0, #0
   118c4:	bne	11944 <__assert_fail@plt+0x840>
   118c8:	mov	r2, #5
   118cc:	movw	r1, #30192	; 0x75f0
   118d0:	movt	r1, #1
   118d4:	mov	r0, #0
   118d8:	bl	10ef4 <dcgettext@plt>
   118dc:	movw	r6, #29612	; 0x73ac
   118e0:	movt	r6, #1
   118e4:	mov	r3, r6
   118e8:	movw	r2, #30060	; 0x756c
   118ec:	movt	r2, #1
   118f0:	mov	r1, r0
   118f4:	mov	r0, #1
   118f8:	bl	1102c <__printf_chk@plt>
   118fc:	mov	r2, #5
   11900:	movw	r1, #30220	; 0x760c
   11904:	movt	r1, #1
   11908:	mov	r0, #0
   1190c:	bl	10ef4 <dcgettext@plt>
   11910:	mov	r1, r0
   11914:	movw	r2, #30364	; 0x769c
   11918:	movt	r2, #1
   1191c:	movw	r3, #29688	; 0x73f8
   11920:	movt	r3, #1
   11924:	cmp	r5, r6
   11928:	moveq	r3, r2
   1192c:	mov	r2, r5
   11930:	mov	r0, #1
   11934:	bl	1102c <__printf_chk@plt>
   11938:	b	1170c <__assert_fail@plt+0x608>
   1193c:	movw	r5, #29612	; 0x73ac
   11940:	movt	r5, #1
   11944:	mov	r2, #5
   11948:	movw	r1, #30120	; 0x75a8
   1194c:	movt	r1, #1
   11950:	mov	r0, #0
   11954:	bl	10ef4 <dcgettext@plt>
   11958:	movw	r3, #33140	; 0x8174
   1195c:	movt	r3, #2
   11960:	ldr	r1, [r3]
   11964:	bl	10e58 <fputs_unlocked@plt>
   11968:	b	118c8 <__assert_fail@plt+0x7c4>
   1196c:	mov	r2, #5
   11970:	movw	r1, #30192	; 0x75f0
   11974:	movt	r1, #1
   11978:	mov	r0, #0
   1197c:	bl	10ef4 <dcgettext@plt>
   11980:	movw	r5, #29612	; 0x73ac
   11984:	movt	r5, #1
   11988:	mov	r3, r5
   1198c:	movw	r2, #30060	; 0x756c
   11990:	movt	r2, #1
   11994:	mov	r1, r0
   11998:	mov	r0, #1
   1199c:	bl	1102c <__printf_chk@plt>
   119a0:	mov	r2, #5
   119a4:	movw	r1, #30220	; 0x760c
   119a8:	movt	r1, #1
   119ac:	mov	r0, #0
   119b0:	bl	10ef4 <dcgettext@plt>
   119b4:	mov	r1, r0
   119b8:	movw	r3, #30364	; 0x769c
   119bc:	movt	r3, #1
   119c0:	b	1192c <__assert_fail@plt+0x828>
   119c4:	mov	r2, #5
   119c8:	movw	r1, #30036	; 0x7554
   119cc:	movt	r1, #1
   119d0:	mov	r0, #0
   119d4:	bl	10ef4 <dcgettext@plt>
   119d8:	movw	r3, #30060	; 0x756c
   119dc:	movt	r3, #1
   119e0:	movw	r2, #30100	; 0x7594
   119e4:	movt	r2, #1
   119e8:	mov	r1, r0
   119ec:	mov	r0, #1
   119f0:	bl	1102c <__printf_chk@plt>
   119f4:	mov	r1, #0
   119f8:	mov	r0, #5
   119fc:	bl	11080 <setlocale@plt>
   11a00:	cmp	r0, #0
   11a04:	beq	1196c <__assert_fail@plt+0x868>
   11a08:	mov	r2, #3
   11a0c:	movw	r1, #30116	; 0x75a4
   11a10:	movt	r1, #1
   11a14:	bl	110e0 <strncmp@plt>
   11a18:	cmp	r0, #0
   11a1c:	bne	1193c <__assert_fail@plt+0x838>
   11a20:	mov	r2, #5
   11a24:	movw	r1, #30192	; 0x75f0
   11a28:	movt	r1, #1
   11a2c:	mov	r0, #0
   11a30:	bl	10ef4 <dcgettext@plt>
   11a34:	movw	r5, #29612	; 0x73ac
   11a38:	movt	r5, #1
   11a3c:	mov	r3, r5
   11a40:	movw	r2, #30060	; 0x756c
   11a44:	movt	r2, #1
   11a48:	mov	r1, r0
   11a4c:	mov	r0, #1
   11a50:	bl	1102c <__printf_chk@plt>
   11a54:	mov	r2, #5
   11a58:	movw	r1, #30220	; 0x760c
   11a5c:	movt	r1, #1
   11a60:	mov	r0, #0
   11a64:	bl	10ef4 <dcgettext@plt>
   11a68:	mov	r1, r0
   11a6c:	movw	r3, #30364	; 0x769c
   11a70:	movt	r3, #1
   11a74:	b	1192c <__assert_fail@plt+0x828>
   11a78:	strd	r4, [sp, #-36]!	; 0xffffffdc
   11a7c:	strd	r6, [sp, #8]
   11a80:	strd	r8, [sp, #16]
   11a84:	strd	sl, [sp, #24]
   11a88:	str	lr, [sp, #32]
   11a8c:	sub	sp, sp, #44	; 0x2c
   11a90:	mov	r5, r0
   11a94:	mov	r4, r1
   11a98:	ldr	r0, [r1]
   11a9c:	bl	12e68 <__assert_fail@plt+0x1d64>
   11aa0:	movw	r1, #29688	; 0x73f8
   11aa4:	movt	r1, #1
   11aa8:	mov	r0, #6
   11aac:	bl	11080 <setlocale@plt>
   11ab0:	movw	r6, #30104	; 0x7598
   11ab4:	movt	r6, #1
   11ab8:	movw	r1, #30272	; 0x7640
   11abc:	movt	r1, #1
   11ac0:	mov	r0, r6
   11ac4:	bl	110c8 <bindtextdomain@plt>
   11ac8:	mov	r0, r6
   11acc:	bl	10f0c <textdomain@plt>
   11ad0:	movw	r0, #7844	; 0x1ea4
   11ad4:	movt	r0, #1
   11ad8:	bl	172ec <__assert_fail@plt+0x61e8>
   11adc:	movw	r0, #33140	; 0x8174
   11ae0:	movt	r0, #2
   11ae4:	mov	r3, #0
   11ae8:	mov	r2, #1
   11aec:	mov	r1, r3
   11af0:	ldr	r0, [r0]
   11af4:	bl	11014 <setvbuf@plt>
   11af8:	ldr	r8, [pc, #896]	; 11e80 <__assert_fail@plt+0xd7c>
   11afc:	movw	r6, #30332	; 0x767c
   11b00:	movt	r6, #1
   11b04:	movw	r7, #33148	; 0x817c
   11b08:	movt	r7, #2
   11b0c:	mov	r3, #0
   11b10:	str	r3, [sp]
   11b14:	mov	r3, r8
   11b18:	mov	r2, r6
   11b1c:	mov	r1, r4
   11b20:	mov	r0, r5
   11b24:	bl	10fb4 <getopt_long@plt>
   11b28:	cmn	r0, #1
   11b2c:	beq	11bd0 <__assert_fail@plt+0xacc>
   11b30:	cmn	r0, #2
   11b34:	beq	11bc0 <__assert_fail@plt+0xabc>
   11b38:	ble	11b58 <__assert_fail@plt+0xa54>
   11b3c:	cmp	r0, #114	; 0x72
   11b40:	beq	11bb4 <__assert_fail@plt+0xab0>
   11b44:	cmp	r0, #115	; 0x73
   11b48:	bne	11bc8 <__assert_fail@plt+0xac4>
   11b4c:	mov	r3, #1
   11b50:	str	r3, [r7]
   11b54:	b	11b0c <__assert_fail@plt+0xa08>
   11b58:	cmn	r0, #3
   11b5c:	bne	11bc8 <__assert_fail@plt+0xac4>
   11b60:	movw	r3, #33032	; 0x8108
   11b64:	movt	r3, #2
   11b68:	movw	r0, #33140	; 0x8174
   11b6c:	movt	r0, #2
   11b70:	mov	r4, #0
   11b74:	str	r4, [sp, #8]
   11b78:	movw	r2, #30296	; 0x7658
   11b7c:	movt	r2, #1
   11b80:	str	r2, [sp, #4]
   11b84:	movw	r2, #30312	; 0x7668
   11b88:	movt	r2, #1
   11b8c:	str	r2, [sp]
   11b90:	ldr	r3, [r3]
   11b94:	movw	r2, #30100	; 0x7594
   11b98:	movt	r2, #1
   11b9c:	movw	r1, #29612	; 0x73ac
   11ba0:	movt	r1, #1
   11ba4:	ldr	r0, [r0]
   11ba8:	bl	15680 <__assert_fail@plt+0x457c>
   11bac:	mov	r0, r4
   11bb0:	bl	10fcc <exit@plt>
   11bb4:	mov	r3, #0
   11bb8:	str	r3, [r7]
   11bbc:	b	11b0c <__assert_fail@plt+0xa08>
   11bc0:	mov	r0, #0
   11bc4:	bl	116c0 <__assert_fail@plt+0x5bc>
   11bc8:	mov	r0, #1
   11bcc:	bl	116c0 <__assert_fail@plt+0x5bc>
   11bd0:	add	fp, r4, r5, lsl #2
   11bd4:	movw	r3, #33120	; 0x8160
   11bd8:	movt	r3, #2
   11bdc:	ldr	r3, [r3]
   11be0:	cmp	r3, r5
   11be4:	beq	11c28 <__assert_fail@plt+0xb24>
   11be8:	movw	r3, #33120	; 0x8160
   11bec:	movt	r3, #2
   11bf0:	ldr	r3, [r3]
   11bf4:	add	r4, r4, r3, lsl #2
   11bf8:	cmp	fp, r4
   11bfc:	bls	11dc8 <__assert_fail@plt+0xcc4>
   11c00:	mov	r3, #1
   11c04:	str	r3, [sp, #20]
   11c08:	movw	r3, #30336	; 0x7680
   11c0c:	movt	r3, #1
   11c10:	str	r3, [sp, #16]
   11c14:	movw	sl, #29476	; 0x7324
   11c18:	movt	sl, #1
   11c1c:	movw	r9, #33148	; 0x817c
   11c20:	movt	r9, #2
   11c24:	b	11d2c <__assert_fail@plt+0xc28>
   11c28:	movw	r3, #30336	; 0x7680
   11c2c:	movt	r3, #1
   11c30:	str	r3, [r4, r5, lsl #2]
   11c34:	add	fp, fp, #4
   11c38:	b	11be8 <__assert_fail@plt+0xae4>
   11c3c:	movw	r1, #30328	; 0x7678
   11c40:	movt	r1, #1
   11c44:	mov	r0, r6
   11c48:	bl	12150 <__assert_fail@plt+0x104c>
   11c4c:	subs	r7, r0, #0
   11c50:	beq	11c98 <__assert_fail@plt+0xb94>
   11c54:	mov	r1, #2
   11c58:	mov	r0, r7
   11c5c:	bl	11fe4 <__assert_fail@plt+0xee0>
   11c60:	ldr	r3, [r9]
   11c64:	add	r3, sl, r3, lsl #2
   11c68:	ldr	r3, [r3, #120]	; 0x78
   11c6c:	add	r2, sp, #24
   11c70:	add	r1, sp, #32
   11c74:	mov	r0, r7
   11c78:	blx	r3
   11c7c:	cmp	r0, #0
   11c80:	bne	11e4c <__assert_fail@plt+0xd48>
   11c84:	mov	r0, r7
   11c88:	bl	12024 <__assert_fail@plt+0xf20>
   11c8c:	cmp	r0, #0
   11c90:	beq	11cdc <__assert_fail@plt+0xbd8>
   11c94:	b	11e74 <__assert_fail@plt+0xd70>
   11c98:	bl	10ff0 <__errno_location@plt>
   11c9c:	ldr	r7, [r0]
   11ca0:	mov	r2, r6
   11ca4:	mov	r1, #3
   11ca8:	mov	r0, #0
   11cac:	bl	14f98 <__assert_fail@plt+0x3e94>
   11cb0:	mov	r3, r0
   11cb4:	movw	r2, #30520	; 0x7738
   11cb8:	movt	r2, #1
   11cbc:	mov	r1, r7
   11cc0:	mov	r0, #0
   11cc4:	bl	10f6c <error@plt>
   11cc8:	b	11dbc <__assert_fail@plt+0xcb8>
   11ccc:	mov	r0, r7
   11cd0:	bl	110b0 <clearerr_unlocked@plt>
   11cd4:	cmp	r8, #0
   11cd8:	bne	11d94 <__assert_fail@plt+0xc90>
   11cdc:	ldr	r1, [r9]
   11ce0:	add	r1, sl, r1, lsl #2
   11ce4:	ldrd	r2, [sp, #24]
   11ce8:	strd	r2, [sp, #8]
   11cec:	movw	r3, #33120	; 0x8160
   11cf0:	movt	r3, #2
   11cf4:	ldr	r3, [r3]
   11cf8:	subs	r3, r3, r5
   11cfc:	movne	r3, #1
   11d00:	str	r3, [sp, #4]
   11d04:	mov	r3, #10
   11d08:	str	r3, [sp]
   11d0c:	ldr	r7, [r1, #128]	; 0x80
   11d10:	mov	r3, #0
   11d14:	add	r2, sp, #32
   11d18:	mov	r1, r3
   11d1c:	mov	r0, r6
   11d20:	blx	r7
   11d24:	cmp	fp, r4
   11d28:	bls	11dd0 <__assert_fail@plt+0xccc>
   11d2c:	ldr	r6, [r4], #4
   11d30:	ldr	r1, [sp, #16]
   11d34:	mov	r0, r6
   11d38:	bl	10e70 <strcmp@plt>
   11d3c:	cmp	r0, #0
   11d40:	bne	11c3c <__assert_fail@plt+0xb38>
   11d44:	mov	r3, #1
   11d48:	strb	r3, [r9, #4]
   11d4c:	movw	r3, #33136	; 0x8170
   11d50:	movt	r3, #2
   11d54:	ldr	r7, [r3]
   11d58:	mov	r1, #2
   11d5c:	mov	r0, r7
   11d60:	bl	11fe4 <__assert_fail@plt+0xee0>
   11d64:	ldr	r3, [r9]
   11d68:	add	r3, sl, r3, lsl #2
   11d6c:	ldr	r3, [r3, #120]	; 0x78
   11d70:	add	r2, sp, #24
   11d74:	add	r1, sp, #32
   11d78:	mov	r0, r7
   11d7c:	blx	r3
   11d80:	subs	r8, r0, #0
   11d84:	beq	11ccc <__assert_fail@plt+0xbc8>
   11d88:	bl	10ff0 <__errno_location@plt>
   11d8c:	ldr	r8, [r0]
   11d90:	b	11ccc <__assert_fail@plt+0xbc8>
   11d94:	mov	r2, r6
   11d98:	mov	r1, #3
   11d9c:	mov	r0, #0
   11da0:	bl	14f98 <__assert_fail@plt+0x3e94>
   11da4:	mov	r3, r0
   11da8:	movw	r2, #30520	; 0x7738
   11dac:	movt	r2, #1
   11db0:	mov	r1, r8
   11db4:	mov	r0, #0
   11db8:	bl	10f6c <error@plt>
   11dbc:	mov	r3, #0
   11dc0:	str	r3, [sp, #20]
   11dc4:	b	11d24 <__assert_fail@plt+0xc20>
   11dc8:	mov	r3, #1
   11dcc:	str	r3, [sp, #20]
   11dd0:	movw	r3, #33148	; 0x817c
   11dd4:	movt	r3, #2
   11dd8:	ldrb	r3, [r3, #4]
   11ddc:	cmp	r3, #0
   11de0:	bne	11e08 <__assert_fail@plt+0xd04>
   11de4:	ldr	r3, [sp, #20]
   11de8:	eor	r0, r3, #1
   11dec:	add	sp, sp, #44	; 0x2c
   11df0:	ldrd	r4, [sp]
   11df4:	ldrd	r6, [sp, #8]
   11df8:	ldrd	r8, [sp, #16]
   11dfc:	ldrd	sl, [sp, #24]
   11e00:	add	sp, sp, #32
   11e04:	pop	{pc}		; (ldr pc, [sp], #4)
   11e08:	movw	r3, #33136	; 0x8170
   11e0c:	movt	r3, #2
   11e10:	ldr	r0, [r3]
   11e14:	bl	12024 <__assert_fail@plt+0xf20>
   11e18:	cmn	r0, #1
   11e1c:	bne	11de4 <__assert_fail@plt+0xce0>
   11e20:	bl	10ff0 <__errno_location@plt>
   11e24:	ldr	r4, [r0]
   11e28:	mov	r2, #5
   11e2c:	movw	r1, #30340	; 0x7684
   11e30:	movt	r1, #1
   11e34:	mov	r0, #0
   11e38:	bl	10ef4 <dcgettext@plt>
   11e3c:	mov	r2, r0
   11e40:	mov	r1, r4
   11e44:	mov	r0, #1
   11e48:	bl	10f6c <error@plt>
   11e4c:	bl	10ff0 <__errno_location@plt>
   11e50:	ldr	r8, [r0]
   11e54:	mov	r0, r7
   11e58:	bl	12024 <__assert_fail@plt+0xf20>
   11e5c:	adds	r0, r0, #0
   11e60:	movne	r0, #1
   11e64:	cmp	r8, #0
   11e68:	movne	r0, #0
   11e6c:	cmp	r0, #0
   11e70:	beq	11cd4 <__assert_fail@plt+0xbd0>
   11e74:	bl	10ff0 <__errno_location@plt>
   11e78:	ldr	r8, [r0]
   11e7c:	b	11cd4 <__assert_fail@plt+0xbd0>
   11e80:	andeq	r7, r1, ip, asr r3
   11e84:	movw	r3, #33156	; 0x8184
   11e88:	movt	r3, #2
   11e8c:	str	r0, [r3]
   11e90:	bx	lr
   11e94:	movw	r3, #33156	; 0x8184
   11e98:	movt	r3, #2
   11e9c:	strb	r0, [r3, #4]
   11ea0:	bx	lr
   11ea4:	strd	r4, [sp, #-16]!
   11ea8:	str	r6, [sp, #8]
   11eac:	str	lr, [sp, #12]
   11eb0:	sub	sp, sp, #8
   11eb4:	movw	r3, #33140	; 0x8174
   11eb8:	movt	r3, #2
   11ebc:	ldr	r0, [r3]
   11ec0:	bl	16810 <__assert_fail@plt+0x570c>
   11ec4:	cmp	r0, #0
   11ec8:	beq	11ef0 <__assert_fail@plt+0xdec>
   11ecc:	movw	r3, #33156	; 0x8184
   11ed0:	movt	r3, #2
   11ed4:	ldrb	r3, [r3, #4]
   11ed8:	cmp	r3, #0
   11edc:	beq	11f1c <__assert_fail@plt+0xe18>
   11ee0:	bl	10ff0 <__errno_location@plt>
   11ee4:	ldr	r3, [r0]
   11ee8:	cmp	r3, #32
   11eec:	bne	11f1c <__assert_fail@plt+0xe18>
   11ef0:	movw	r3, #33128	; 0x8168
   11ef4:	movt	r3, #2
   11ef8:	ldr	r0, [r3]
   11efc:	bl	16810 <__assert_fail@plt+0x570c>
   11f00:	cmp	r0, #0
   11f04:	bne	11fa4 <__assert_fail@plt+0xea0>
   11f08:	add	sp, sp, #8
   11f0c:	ldrd	r4, [sp]
   11f10:	ldr	r6, [sp, #8]
   11f14:	add	sp, sp, #12
   11f18:	pop	{pc}		; (ldr pc, [sp], #4)
   11f1c:	mov	r2, #5
   11f20:	movw	r1, #30504	; 0x7728
   11f24:	movt	r1, #1
   11f28:	mov	r0, #0
   11f2c:	bl	10ef4 <dcgettext@plt>
   11f30:	mov	r4, r0
   11f34:	movw	r3, #33156	; 0x8184
   11f38:	movt	r3, #2
   11f3c:	ldr	r5, [r3]
   11f40:	cmp	r5, #0
   11f44:	beq	11f84 <__assert_fail@plt+0xe80>
   11f48:	bl	10ff0 <__errno_location@plt>
   11f4c:	ldr	r6, [r0]
   11f50:	mov	r0, r5
   11f54:	bl	14f60 <__assert_fail@plt+0x3e5c>
   11f58:	str	r4, [sp]
   11f5c:	mov	r3, r0
   11f60:	movw	r2, #30516	; 0x7734
   11f64:	movt	r2, #1
   11f68:	mov	r1, r6
   11f6c:	mov	r0, #0
   11f70:	bl	10f6c <error@plt>
   11f74:	movw	r3, #33036	; 0x810c
   11f78:	movt	r3, #2
   11f7c:	ldr	r0, [r3]
   11f80:	bl	10eac <_exit@plt>
   11f84:	bl	10ff0 <__errno_location@plt>
   11f88:	mov	r3, r4
   11f8c:	movw	r2, #30520	; 0x7738
   11f90:	movt	r2, #1
   11f94:	ldr	r1, [r0]
   11f98:	mov	r0, #0
   11f9c:	bl	10f6c <error@plt>
   11fa0:	b	11f74 <__assert_fail@plt+0xe70>
   11fa4:	movw	r3, #33036	; 0x810c
   11fa8:	movt	r3, #2
   11fac:	ldr	r0, [r3]
   11fb0:	bl	10eac <_exit@plt>
   11fb4:	strd	r4, [sp, #-12]!
   11fb8:	str	lr, [sp, #8]
   11fbc:	sub	sp, sp, #20
   11fc0:	ldr	r1, [sp, #40]	; 0x28
   11fc4:	str	r1, [sp, #8]
   11fc8:	ldrd	r4, [sp, #32]
   11fcc:	strd	r4, [sp]
   11fd0:	bl	10e7c <posix_fadvise64@plt>
   11fd4:	add	sp, sp, #20
   11fd8:	ldrd	r4, [sp]
   11fdc:	add	sp, sp, #8
   11fe0:	pop	{pc}		; (ldr pc, [sp], #4)
   11fe4:	cmp	r0, #0
   11fe8:	bxeq	lr
   11fec:	str	r4, [sp, #-8]!
   11ff0:	str	lr, [sp, #4]
   11ff4:	sub	sp, sp, #16
   11ff8:	mov	r4, r1
   11ffc:	bl	11038 <fileno@plt>
   12000:	str	r4, [sp, #8]
   12004:	mov	r2, #0
   12008:	mov	r3, #0
   1200c:	strd	r2, [sp]
   12010:	bl	10e7c <posix_fadvise64@plt>
   12014:	add	sp, sp, #16
   12018:	ldr	r4, [sp]
   1201c:	add	sp, sp, #4
   12020:	pop	{pc}		; (ldr pc, [sp], #4)
   12024:	strd	r4, [sp, #-16]!
   12028:	str	r6, [sp, #8]
   1202c:	str	lr, [sp, #12]
   12030:	sub	sp, sp, #8
   12034:	mov	r4, r0
   12038:	bl	11038 <fileno@plt>
   1203c:	cmp	r0, #0
   12040:	blt	120b8 <__assert_fail@plt+0xfb4>
   12044:	mov	r0, r4
   12048:	bl	10f9c <__freading@plt>
   1204c:	cmp	r0, #0
   12050:	beq	12084 <__assert_fail@plt+0xf80>
   12054:	mov	r0, r4
   12058:	bl	11038 <fileno@plt>
   1205c:	mov	r3, #1
   12060:	str	r3, [sp]
   12064:	mov	r2, #0
   12068:	mov	r3, #0
   1206c:	bl	10f3c <lseek64@plt>
   12070:	mvn	r2, #0
   12074:	mvn	r3, #0
   12078:	cmp	r1, r3
   1207c:	cmpeq	r0, r2
   12080:	beq	120c4 <__assert_fail@plt+0xfc0>
   12084:	mov	r0, r4
   12088:	bl	120e0 <__assert_fail@plt+0xfdc>
   1208c:	cmp	r0, #0
   12090:	beq	120c4 <__assert_fail@plt+0xfc0>
   12094:	bl	10ff0 <__errno_location@plt>
   12098:	mov	r5, r0
   1209c:	ldr	r6, [r0]
   120a0:	mov	r0, r4
   120a4:	bl	11050 <fclose@plt>
   120a8:	cmp	r6, #0
   120ac:	strne	r6, [r5]
   120b0:	mvnne	r0, #0
   120b4:	b	120cc <__assert_fail@plt+0xfc8>
   120b8:	mov	r0, r4
   120bc:	bl	11050 <fclose@plt>
   120c0:	b	120cc <__assert_fail@plt+0xfc8>
   120c4:	mov	r0, r4
   120c8:	bl	11050 <fclose@plt>
   120cc:	add	sp, sp, #8
   120d0:	ldrd	r4, [sp]
   120d4:	ldr	r6, [sp, #8]
   120d8:	add	sp, sp, #12
   120dc:	pop	{pc}		; (ldr pc, [sp], #4)
   120e0:	str	r4, [sp, #-8]!
   120e4:	str	lr, [sp, #4]
   120e8:	sub	sp, sp, #8
   120ec:	subs	r4, r0, #0
   120f0:	beq	12104 <__assert_fail@plt+0x1000>
   120f4:	mov	r0, r4
   120f8:	bl	10f9c <__freading@plt>
   120fc:	cmp	r0, #0
   12100:	bne	1211c <__assert_fail@plt+0x1018>
   12104:	mov	r0, r4
   12108:	bl	10e88 <fflush@plt>
   1210c:	add	sp, sp, #8
   12110:	ldr	r4, [sp]
   12114:	add	sp, sp, #4
   12118:	pop	{pc}		; (ldr pc, [sp], #4)
   1211c:	ldr	r3, [r4]
   12120:	tst	r3, #256	; 0x100
   12124:	bne	12134 <__assert_fail@plt+0x1030>
   12128:	mov	r0, r4
   1212c:	bl	10e88 <fflush@plt>
   12130:	b	1210c <__assert_fail@plt+0x1008>
   12134:	mov	r3, #1
   12138:	str	r3, [sp]
   1213c:	mov	r2, #0
   12140:	mov	r3, #0
   12144:	mov	r0, r4
   12148:	bl	12260 <__assert_fail@plt+0x115c>
   1214c:	b	12128 <__assert_fail@plt+0x1024>
   12150:	strd	r4, [sp, #-16]!
   12154:	str	r6, [sp, #8]
   12158:	str	lr, [sp, #12]
   1215c:	mov	r5, r1
   12160:	bl	110bc <fopen64@plt>
   12164:	subs	r4, r0, #0
   12168:	beq	1217c <__assert_fail@plt+0x1078>
   1216c:	mov	r0, r4
   12170:	bl	11038 <fileno@plt>
   12174:	cmp	r0, #2
   12178:	bls	12190 <__assert_fail@plt+0x108c>
   1217c:	mov	r0, r4
   12180:	ldrd	r4, [sp]
   12184:	ldr	r6, [sp, #8]
   12188:	add	sp, sp, #12
   1218c:	pop	{pc}		; (ldr pc, [sp], #4)
   12190:	bl	15184 <__assert_fail@plt+0x4080>
   12194:	subs	r6, r0, #0
   12198:	blt	121e0 <__assert_fail@plt+0x10dc>
   1219c:	mov	r0, r4
   121a0:	bl	12024 <__assert_fail@plt+0xf20>
   121a4:	cmp	r0, #0
   121a8:	bne	121c0 <__assert_fail@plt+0x10bc>
   121ac:	mov	r1, r5
   121b0:	mov	r0, r6
   121b4:	bl	10e40 <fdopen@plt>
   121b8:	subs	r4, r0, #0
   121bc:	bne	1217c <__assert_fail@plt+0x1078>
   121c0:	bl	10ff0 <__errno_location@plt>
   121c4:	mov	r4, r0
   121c8:	ldr	r5, [r0]
   121cc:	mov	r0, r6
   121d0:	bl	110f8 <close@plt>
   121d4:	str	r5, [r4]
   121d8:	mov	r4, #0
   121dc:	b	1217c <__assert_fail@plt+0x1078>
   121e0:	bl	10ff0 <__errno_location@plt>
   121e4:	mov	r5, r0
   121e8:	ldr	r6, [r0]
   121ec:	mov	r0, r4
   121f0:	bl	12024 <__assert_fail@plt+0xf20>
   121f4:	str	r6, [r5]
   121f8:	mov	r4, #0
   121fc:	b	1217c <__assert_fail@plt+0x1078>
   12200:	strd	r4, [sp, #-12]!
   12204:	str	lr, [sp, #8]
   12208:	sub	sp, sp, #12
   1220c:	mov	r5, r0
   12210:	bl	10ff0 <__errno_location@plt>
   12214:	mov	r4, r0
   12218:	ldr	r3, [r0]
   1221c:	str	r3, [sp]
   12220:	str	r3, [sp, #4]
   12224:	mov	r3, #0
   12228:	str	r3, [r0]
   1222c:	mov	r0, r5
   12230:	bl	10ea0 <free@plt>
   12234:	ldr	r3, [r4]
   12238:	clz	r3, r3
   1223c:	lsr	r3, r3, #5
   12240:	add	r2, sp, #8
   12244:	add	r3, r2, r3, lsl #2
   12248:	ldr	r3, [r3, #-8]
   1224c:	str	r3, [r4]
   12250:	add	sp, sp, #12
   12254:	ldrd	r4, [sp]
   12258:	add	sp, sp, #8
   1225c:	pop	{pc}		; (ldr pc, [sp], #4)
   12260:	str	r4, [sp, #-16]!
   12264:	strd	r6, [sp, #4]
   12268:	str	lr, [sp, #12]
   1226c:	sub	sp, sp, #8
   12270:	mov	r4, r0
   12274:	mov	r6, r2
   12278:	mov	r7, r3
   1227c:	ldr	r2, [r0, #8]
   12280:	ldr	r3, [r0, #4]
   12284:	cmp	r2, r3
   12288:	beq	122b8 <__assert_fail@plt+0x11b4>
   1228c:	ldr	r3, [sp, #24]
   12290:	str	r3, [sp]
   12294:	mov	r2, r6
   12298:	mov	r3, r7
   1229c:	mov	r0, r4
   122a0:	bl	1105c <fseeko64@plt>
   122a4:	add	sp, sp, #8
   122a8:	ldr	r4, [sp]
   122ac:	ldrd	r6, [sp, #4]
   122b0:	add	sp, sp, #12
   122b4:	pop	{pc}		; (ldr pc, [sp], #4)
   122b8:	ldr	r2, [r0, #20]
   122bc:	ldr	r3, [r0, #16]
   122c0:	cmp	r2, r3
   122c4:	bne	1228c <__assert_fail@plt+0x1188>
   122c8:	ldr	r3, [r0, #36]	; 0x24
   122cc:	cmp	r3, #0
   122d0:	bne	1228c <__assert_fail@plt+0x1188>
   122d4:	bl	11038 <fileno@plt>
   122d8:	ldr	r3, [sp, #24]
   122dc:	str	r3, [sp]
   122e0:	mov	r2, r6
   122e4:	mov	r3, r7
   122e8:	bl	10f3c <lseek64@plt>
   122ec:	mvn	r2, #0
   122f0:	mvn	r3, #0
   122f4:	cmp	r1, r3
   122f8:	cmpeq	r0, r2
   122fc:	beq	12318 <__assert_fail@plt+0x1214>
   12300:	ldr	r3, [r4]
   12304:	bic	r3, r3, #16
   12308:	str	r3, [r4]
   1230c:	strd	r0, [r4, #80]	; 0x50
   12310:	mov	r0, #0
   12314:	b	122a4 <__assert_fail@plt+0x11a0>
   12318:	mvn	r0, #0
   1231c:	b	122a4 <__assert_fail@plt+0x11a0>
   12320:	str	r4, [sp, #-16]!
   12324:	strd	r6, [sp, #4]
   12328:	str	lr, [sp, #12]
   1232c:	vpush	{d8}
   12330:	vmov.f64	d8, d0
   12334:	cmp	r0, #1
   12338:	beq	123a0 <__assert_fail@plt+0x129c>
   1233c:	mov	r4, r0
   12340:	vldr	d7, [pc, #112]	; 123b8 <__assert_fail@plt+0x12b4>
   12344:	vcmpe.f64	d0, d7
   12348:	vmrs	APSR_nzcv, fpscr
   1234c:	bpl	123a0 <__assert_fail@plt+0x129c>
   12350:	vmov	r0, r1, d0
   12354:	bl	17120 <__assert_fail@plt+0x601c>
   12358:	mov	r6, r0
   1235c:	mov	r7, r1
   12360:	cmp	r4, #0
   12364:	movne	r0, #0
   12368:	bne	12388 <__assert_fail@plt+0x1284>
   1236c:	mov	r0, r6
   12370:	bl	17060 <__assert_fail@plt+0x5f5c>
   12374:	vmov	d7, r0, r1
   12378:	vcmp.f64	d7, d8
   1237c:	vmrs	APSR_nzcv, fpscr
   12380:	movne	r0, #1
   12384:	moveq	r0, #0
   12388:	adds	r2, r6, r0
   1238c:	adc	r3, r7, r0, asr #31
   12390:	mov	r0, r2
   12394:	mov	r1, r3
   12398:	bl	17060 <__assert_fail@plt+0x5f5c>
   1239c:	vmov	d8, r0, r1
   123a0:	vmov.f64	d0, d8
   123a4:	vpop	{d8}
   123a8:	ldr	r4, [sp]
   123ac:	ldrd	r6, [sp, #4]
   123b0:	add	sp, sp, #12
   123b4:	pop	{pc}		; (ldr pc, [sp], #4)
   123b8:	andeq	r0, r0, r0
   123bc:	mvnsmi	r0, #0
   123c0:	strd	r4, [sp, #-36]!	; 0xffffffdc
   123c4:	strd	r6, [sp, #8]
   123c8:	strd	r8, [sp, #16]
   123cc:	strd	sl, [sp, #24]
   123d0:	str	lr, [sp, #32]
   123d4:	vpush	{d8-d9}
   123d8:	sub	sp, sp, #124	; 0x7c
   123dc:	mov	r6, r0
   123e0:	mov	r7, r1
   123e4:	mov	r8, r2
   123e8:	str	r2, [sp, #36]	; 0x24
   123ec:	mov	r9, r3
   123f0:	and	r3, r3, #3
   123f4:	str	r3, [sp, #8]
   123f8:	ands	r3, r9, #32
   123fc:	str	r3, [sp, #44]	; 0x2c
   12400:	movne	r3, #1024	; 0x400
   12404:	moveq	r3, #1000	; 0x3e8
   12408:	str	r3, [sp, #40]	; 0x28
   1240c:	bl	110a4 <localeconv@plt>
   12410:	mov	r4, r0
   12414:	ldr	r5, [r0]
   12418:	mov	r0, r5
   1241c:	bl	10fd8 <strlen@plt>
   12420:	mov	fp, r0
   12424:	sub	r2, r0, #1
   12428:	cmp	r2, #16
   1242c:	movcc	fp, r0
   12430:	movcs	fp, #1
   12434:	movw	r3, #30556	; 0x775c
   12438:	movt	r3, #1
   1243c:	cmp	r2, #15
   12440:	movhi	r5, r3
   12444:	ldr	sl, [r4, #8]
   12448:	ldr	r3, [r4, #4]
   1244c:	mov	r4, r3
   12450:	mov	r0, r3
   12454:	bl	10fd8 <strlen@plt>
   12458:	movw	r3, #29688	; 0x73f8
   1245c:	movt	r3, #1
   12460:	mov	r1, r4
   12464:	cmp	r0, #16
   12468:	movhi	r1, r3
   1246c:	str	r1, [sp, #20]
   12470:	add	r3, r8, #644	; 0x284
   12474:	add	r3, r3, #3
   12478:	str	r3, [sp, #32]
   1247c:	ldrd	r2, [sp, #184]	; 0xb8
   12480:	ldrd	r0, [sp, #176]	; 0xb0
   12484:	cmp	r3, r1
   12488:	cmpeq	r2, r0
   1248c:	bhi	12610 <__assert_fail@plt+0x150c>
   12490:	bl	170d4 <__assert_fail@plt+0x5fd0>
   12494:	orrs	r3, r2, r3
   12498:	bne	124dc <__assert_fail@plt+0x13d8>
   1249c:	ldrd	r2, [sp, #184]	; 0xb8
   124a0:	ldrd	r0, [sp, #176]	; 0xb0
   124a4:	bl	170d4 <__assert_fail@plt+0x5fd0>
   124a8:	mov	r2, r0
   124ac:	mov	r3, r1
   124b0:	mul	r0, r0, r7
   124b4:	mla	ip, r6, r1, r0
   124b8:	umull	r0, r1, r2, r6
   124bc:	strd	r0, [sp, #24]
   124c0:	add	r1, ip, r1
   124c4:	str	r1, [sp, #28]
   124c8:	ldrd	r0, [sp, #24]
   124cc:	bl	170d4 <__assert_fail@plt+0x5fd0>
   124d0:	cmp	r1, r7
   124d4:	cmpeq	r0, r6
   124d8:	beq	127ac <__assert_fail@plt+0x16a8>
   124dc:	ldrd	r0, [sp, #176]	; 0xb0
   124e0:	bl	17060 <__assert_fail@plt+0x5f5c>
   124e4:	vmov	d9, r0, r1
   124e8:	ldrd	r0, [sp, #184]	; 0xb8
   124ec:	bl	17060 <__assert_fail@plt+0x5f5c>
   124f0:	vmov	d7, r0, r1
   124f4:	vdiv.f64	d8, d9, d7
   124f8:	mov	r0, r6
   124fc:	mov	r1, r7
   12500:	bl	17060 <__assert_fail@plt+0x5f5c>
   12504:	vmov	d7, r0, r1
   12508:	vmul.f64	d0, d8, d7
   1250c:	tst	r9, #16
   12510:	beq	126fc <__assert_fail@plt+0x15f8>
   12514:	vldr	d7, [pc, #1004]	; 12908 <__assert_fail@plt+0x1804>
   12518:	mov	r7, #0
   1251c:	vldr	s13, [sp, #40]	; 0x28
   12520:	vcvt.f64.u32	d6, s13
   12524:	vmul.f64	d7, d7, d6
   12528:	add	r7, r7, #1
   1252c:	vmul.f64	d5, d6, d7
   12530:	vcmpe.f64	d5, d0
   12534:	vmrs	APSR_nzcv, fpscr
   12538:	movls	r3, #1
   1253c:	movhi	r3, #0
   12540:	cmp	r7, #7
   12544:	movgt	r3, #0
   12548:	andle	r3, r3, #1
   1254c:	cmp	r3, #0
   12550:	bne	12524 <__assert_fail@plt+0x1420>
   12554:	vdiv.f64	d8, d0, d7
   12558:	vmov.f64	d0, d8
   1255c:	ldr	r0, [sp, #8]
   12560:	bl	12320 <__assert_fail@plt+0x121c>
   12564:	vstr	d0, [sp]
   12568:	movw	r3, #30568	; 0x7768
   1256c:	movt	r3, #1
   12570:	mvn	r2, #0
   12574:	mov	r1, #1
   12578:	ldr	r4, [sp, #36]	; 0x24
   1257c:	mov	r0, r4
   12580:	bl	10ffc <__sprintf_chk@plt>
   12584:	mov	r0, r4
   12588:	bl	10fd8 <strlen@plt>
   1258c:	mov	r8, r0
   12590:	add	fp, fp, #1
   12594:	ldr	r3, [sp, #44]	; 0x2c
   12598:	clz	r3, r3
   1259c:	lsr	r3, r3, #5
   125a0:	add	r3, r3, #1
   125a4:	add	r3, r3, fp
   125a8:	cmp	r3, r0
   125ac:	bcc	125c8 <__assert_fail@plt+0x14c4>
   125b0:	tst	r9, #8
   125b4:	beq	12738 <__assert_fail@plt+0x1634>
   125b8:	add	r3, r4, r0
   125bc:	ldrb	r3, [r3, #-1]
   125c0:	cmp	r3, #48	; 0x30
   125c4:	bne	12738 <__assert_fail@plt+0x1634>
   125c8:	vldr	d9, [pc, #832]	; 12910 <__assert_fail@plt+0x180c>
   125cc:	vmul.f64	d0, d8, d9
   125d0:	ldr	r0, [sp, #8]
   125d4:	bl	12320 <__assert_fail@plt+0x121c>
   125d8:	vdiv.f64	d0, d0, d9
   125dc:	vstr	d0, [sp]
   125e0:	movw	r3, #30560	; 0x7760
   125e4:	movt	r3, #1
   125e8:	mvn	r2, #0
   125ec:	mov	r1, #1
   125f0:	ldr	r4, [sp, #36]	; 0x24
   125f4:	mov	r0, r4
   125f8:	bl	10ffc <__sprintf_chk@plt>
   125fc:	mov	r0, r4
   12600:	bl	10fd8 <strlen@plt>
   12604:	mov	r8, r0
   12608:	mov	fp, #0
   1260c:	b	12738 <__assert_fail@plt+0x1634>
   12610:	ldrd	r2, [sp, #176]	; 0xb0
   12614:	orrs	r3, r2, r3
   12618:	beq	124dc <__assert_fail@plt+0x13d8>
   1261c:	ldrd	r2, [sp, #176]	; 0xb0
   12620:	ldrd	r0, [sp, #184]	; 0xb8
   12624:	bl	170d4 <__assert_fail@plt+0x5fd0>
   12628:	orrs	r3, r2, r3
   1262c:	bne	124dc <__assert_fail@plt+0x13d8>
   12630:	ldrd	r2, [sp, #176]	; 0xb0
   12634:	ldrd	r0, [sp, #184]	; 0xb8
   12638:	bl	170d4 <__assert_fail@plt+0x5fd0>
   1263c:	strd	r0, [sp, #48]	; 0x30
   12640:	mov	r2, r0
   12644:	mov	r3, r1
   12648:	mov	r0, r6
   1264c:	mov	r1, r7
   12650:	bl	170d4 <__assert_fail@plt+0x5fd0>
   12654:	lsl	r1, r3, #2
   12658:	lsl	r4, r2, #2
   1265c:	orr	r0, r1, r2, lsr #30
   12660:	adds	r4, r4, r2
   12664:	adc	r3, r0, r3
   12668:	adds	r4, r4, r4
   1266c:	adc	r8, r3, r3
   12670:	ldrd	r2, [sp, #48]	; 0x30
   12674:	mov	r0, r4
   12678:	mov	r1, r8
   1267c:	bl	170d4 <__assert_fail@plt+0x5fd0>
   12680:	adds	r1, r2, r2
   12684:	str	r1, [sp, #56]	; 0x38
   12688:	adc	r3, r3, r3
   1268c:	str	r3, [sp, #60]	; 0x3c
   12690:	ldrd	r2, [sp, #48]	; 0x30
   12694:	mov	r0, r6
   12698:	mov	r1, r7
   1269c:	bl	170d4 <__assert_fail@plt+0x5fd0>
   126a0:	strd	r0, [sp, #24]
   126a4:	ldrd	r2, [sp, #48]	; 0x30
   126a8:	mov	r0, r4
   126ac:	mov	r1, r8
   126b0:	bl	170d4 <__assert_fail@plt+0x5fd0>
   126b4:	mov	r6, r0
   126b8:	ldrd	r2, [sp, #48]	; 0x30
   126bc:	ldrd	r0, [sp, #56]	; 0x38
   126c0:	cmp	r3, r1
   126c4:	cmpeq	r2, r0
   126c8:	bls	126e0 <__assert_fail@plt+0x15dc>
   126cc:	mov	r3, r0
   126d0:	orrs	r3, r3, r1
   126d4:	movne	r4, #1
   126d8:	moveq	r4, #0
   126dc:	b	127b4 <__assert_fail@plt+0x16b0>
   126e0:	ldrd	r2, [sp, #48]	; 0x30
   126e4:	ldrd	r0, [sp, #56]	; 0x38
   126e8:	cmp	r3, r1
   126ec:	cmpeq	r2, r0
   126f0:	movcc	r4, #3
   126f4:	movcs	r4, #2
   126f8:	b	127b4 <__assert_fail@plt+0x16b0>
   126fc:	ldr	r0, [sp, #8]
   12700:	bl	12320 <__assert_fail@plt+0x121c>
   12704:	vstr	d0, [sp]
   12708:	movw	r3, #30560	; 0x7760
   1270c:	movt	r3, #1
   12710:	mvn	r2, #0
   12714:	mov	r1, #1
   12718:	ldr	r4, [sp, #36]	; 0x24
   1271c:	mov	r0, r4
   12720:	bl	10ffc <__sprintf_chk@plt>
   12724:	mov	r0, r4
   12728:	bl	10fd8 <strlen@plt>
   1272c:	mov	r8, r0
   12730:	mov	fp, #0
   12734:	mvn	r7, #0
   12738:	ldr	r3, [sp, #32]
   1273c:	sub	r6, r3, r8
   12740:	mov	r2, r8
   12744:	ldr	r1, [sp, #36]	; 0x24
   12748:	mov	r0, r6
   1274c:	bl	10e94 <memmove@plt>
   12750:	sub	r8, r8, fp
   12754:	add	r8, r6, r8
   12758:	tst	r9, #4
   1275c:	bne	12afc <__assert_fail@plt+0x19f8>
   12760:	tst	r9, #128	; 0x80
   12764:	beq	1277c <__assert_fail@plt+0x1678>
   12768:	cmp	r7, #0
   1276c:	blt	12b8c <__assert_fail@plt+0x1a88>
   12770:	and	r3, r9, #256	; 0x100
   12774:	orrs	r2, r3, r7
   12778:	bne	12bec <__assert_fail@plt+0x1ae8>
   1277c:	mov	r3, #0
   12780:	ldr	r2, [sp, #32]
   12784:	strb	r3, [r2]
   12788:	mov	r0, r6
   1278c:	add	sp, sp, #124	; 0x7c
   12790:	vpop	{d8-d9}
   12794:	ldrd	r4, [sp]
   12798:	ldrd	r6, [sp, #8]
   1279c:	ldrd	r8, [sp, #16]
   127a0:	ldrd	sl, [sp, #24]
   127a4:	add	sp, sp, #32
   127a8:	pop	{pc}		; (ldr pc, [sp], #4)
   127ac:	mov	r4, #0
   127b0:	mov	r6, r4
   127b4:	ands	r3, r9, #16
   127b8:	str	r3, [sp, #48]	; 0x30
   127bc:	beq	12974 <__assert_fail@plt+0x1870>
   127c0:	ldr	r8, [sp, #40]	; 0x28
   127c4:	mov	r3, #0
   127c8:	ldrd	r0, [sp, #24]
   127cc:	cmp	r3, r1
   127d0:	cmpeq	r8, r0
   127d4:	bhi	129ac <__assert_fail@plt+0x18a8>
   127d8:	mov	r7, #0
   127dc:	str	r5, [sp, #56]	; 0x38
   127e0:	str	fp, [sp, #64]	; 0x40
   127e4:	str	sl, [sp, #68]	; 0x44
   127e8:	mov	sl, r8
   127ec:	mov	fp, r3
   127f0:	b	12830 <__assert_fail@plt+0x172c>
   127f4:	add	r4, r4, r5
   127f8:	cmp	r4, r8
   127fc:	movhi	r4, #3
   12800:	movls	r4, #2
   12804:	add	r7, r7, #1
   12808:	ldrd	r2, [sp, #24]
   1280c:	cmp	fp, r3
   12810:	cmpeq	sl, r2
   12814:	movls	r3, #1
   12818:	movhi	r3, #0
   1281c:	cmp	r7, #7
   12820:	movgt	r3, #0
   12824:	andle	r3, r3, #1
   12828:	cmp	r3, #0
   1282c:	beq	12884 <__assert_fail@plt+0x1780>
   12830:	mov	r2, sl
   12834:	mov	r3, fp
   12838:	ldrd	r0, [sp, #24]
   1283c:	bl	170d4 <__assert_fail@plt+0x5fd0>
   12840:	add	r2, r2, r2, lsl #2
   12844:	add	r2, r6, r2, lsl #1
   12848:	udiv	r6, r2, r8
   1284c:	mls	r2, r8, r6, r2
   12850:	asr	r5, r4, #1
   12854:	add	r5, r5, r2, lsl #1
   12858:	mov	r2, sl
   1285c:	mov	r3, fp
   12860:	ldrd	r0, [sp, #24]
   12864:	bl	170d4 <__assert_fail@plt+0x5fd0>
   12868:	strd	r0, [sp, #24]
   1286c:	cmp	r8, r5
   12870:	bls	127f4 <__assert_fail@plt+0x16f0>
   12874:	cmn	r4, r5
   12878:	movne	r4, #1
   1287c:	moveq	r4, #0
   12880:	b	12804 <__assert_fail@plt+0x1700>
   12884:	ldr	r5, [sp, #56]	; 0x38
   12888:	ldr	fp, [sp, #64]	; 0x40
   1288c:	ldr	sl, [sp, #68]	; 0x44
   12890:	ldrd	r2, [sp, #24]
   12894:	cmp	r3, #0
   12898:	cmpeq	r2, #9
   1289c:	bhi	129b8 <__assert_fail@plt+0x18b4>
   128a0:	ldr	r3, [sp, #8]
   128a4:	cmp	r3, #1
   128a8:	beq	12918 <__assert_fail@plt+0x1814>
   128ac:	adds	r3, r4, #0
   128b0:	movne	r3, #1
   128b4:	ldr	r2, [sp, #8]
   128b8:	cmp	r2, #0
   128bc:	movne	r3, #0
   128c0:	cmp	r3, #0
   128c4:	beq	12c78 <__assert_fail@plt+0x1b74>
   128c8:	add	r6, r6, #1
   128cc:	cmp	r6, #10
   128d0:	beq	12930 <__assert_fail@plt+0x182c>
   128d4:	ldr	r3, [sp, #36]	; 0x24
   128d8:	add	r8, r3, #644	; 0x284
   128dc:	add	r8, r8, #2
   128e0:	add	r6, r6, #48	; 0x30
   128e4:	strb	r6, [r3, #646]	; 0x286
   128e8:	sub	r8, r8, fp
   128ec:	mov	r2, fp
   128f0:	mov	r1, r5
   128f4:	mov	r0, r8
   128f8:	bl	10eb8 <memcpy@plt>
   128fc:	mov	r6, #0
   12900:	mov	r4, r6
   12904:	b	1297c <__assert_fail@plt+0x1878>
   12908:	andeq	r0, r0, r0
   1290c:	svccc	0x00f00000	; IMB
   12910:	andeq	r0, r0, r0
   12914:	eormi	r0, r4, r0
   12918:	and	r3, r6, #1
   1291c:	add	r3, r3, r4
   12920:	cmp	r3, #2
   12924:	movle	r3, #0
   12928:	movgt	r3, #1
   1292c:	b	128c0 <__assert_fail@plt+0x17bc>
   12930:	ldr	r3, [sp, #24]
   12934:	adds	r3, r3, #1
   12938:	str	r3, [sp, #24]
   1293c:	ldr	r3, [sp, #28]
   12940:	adc	r3, r3, #0
   12944:	str	r3, [sp, #28]
   12948:	ldrd	r2, [sp, #24]
   1294c:	cmp	r3, #0
   12950:	cmpeq	r2, #9
   12954:	bls	12968 <__assert_fail@plt+0x1864>
   12958:	ldr	r8, [sp, #32]
   1295c:	mov	r4, #0
   12960:	mov	r6, r4
   12964:	b	1297c <__assert_fail@plt+0x1878>
   12968:	mov	r4, #0
   1296c:	mov	r6, r4
   12970:	b	12c80 <__assert_fail@plt+0x1b7c>
   12974:	ldr	r8, [sp, #32]
   12978:	mvn	r7, #0
   1297c:	ldr	r3, [sp, #8]
   12980:	cmp	r3, #1
   12984:	beq	129c0 <__assert_fail@plt+0x18bc>
   12988:	ldr	r3, [sp, #8]
   1298c:	cmp	r3, #0
   12990:	movne	r6, #0
   12994:	bne	129ec <__assert_fail@plt+0x18e8>
   12998:	add	r6, r6, r4
   1299c:	cmp	r6, #0
   129a0:	movle	r6, #0
   129a4:	movgt	r6, #1
   129a8:	b	129ec <__assert_fail@plt+0x18e8>
   129ac:	ldr	r8, [sp, #32]
   129b0:	mov	r7, #0
   129b4:	b	1297c <__assert_fail@plt+0x1878>
   129b8:	ldr	r8, [sp, #32]
   129bc:	b	1297c <__assert_fail@plt+0x1878>
   129c0:	ldr	r3, [sp, #24]
   129c4:	and	r0, r3, #1
   129c8:	mov	r1, #0
   129cc:	adds	r2, r0, r4
   129d0:	adc	r3, r1, r4, asr #31
   129d4:	orr	r2, r2, r3
   129d8:	cmp	r2, r1
   129dc:	addne	r6, r6, #1
   129e0:	cmp	r6, #5
   129e4:	movle	r6, #0
   129e8:	movgt	r6, #1
   129ec:	cmp	r6, #0
   129f0:	beq	12a48 <__assert_fail@plt+0x1944>
   129f4:	ldr	r3, [sp, #24]
   129f8:	adds	r3, r3, #1
   129fc:	str	r3, [sp, #24]
   12a00:	ldr	r3, [sp, #28]
   12a04:	adc	r3, r3, #0
   12a08:	str	r3, [sp, #28]
   12a0c:	ldr	r3, [sp, #48]	; 0x30
   12a10:	cmp	r3, #0
   12a14:	beq	12a48 <__assert_fail@plt+0x1944>
   12a18:	ldr	r2, [sp, #40]	; 0x28
   12a1c:	mov	r3, #0
   12a20:	ldrd	r0, [sp, #24]
   12a24:	cmp	r3, r1
   12a28:	cmpeq	r2, r0
   12a2c:	moveq	r3, #1
   12a30:	movne	r3, #0
   12a34:	cmp	r7, #7
   12a38:	movgt	r3, #0
   12a3c:	andle	r3, r3, #1
   12a40:	cmp	r3, #0
   12a44:	bne	12a6c <__assert_fail@plt+0x1968>
   12a48:	mov	r4, #10
   12a4c:	mov	r5, #0
   12a50:	mov	fp, r8
   12a54:	strd	r4, [sp, #8]
   12a58:	mov	r5, r9
   12a5c:	mov	r9, r8
   12a60:	mov	r8, r7
   12a64:	ldrd	r6, [sp, #24]
   12a68:	b	12ab4 <__assert_fail@plt+0x19b0>
   12a6c:	add	r7, r7, #1
   12a70:	tst	r9, #8
   12a74:	beq	12a88 <__assert_fail@plt+0x1984>
   12a78:	sub	r6, r8, #1
   12a7c:	mov	r3, #49	; 0x31
   12a80:	strb	r3, [r8, #-1]
   12a84:	b	12758 <__assert_fail@plt+0x1654>
   12a88:	mov	r3, #48	; 0x30
   12a8c:	strb	r3, [r8, #-1]
   12a90:	mvn	r3, fp
   12a94:	add	r8, r8, r3
   12a98:	mov	r2, fp
   12a9c:	mov	r1, r5
   12aa0:	mov	r0, r8
   12aa4:	bl	10eb8 <memcpy@plt>
   12aa8:	b	12a78 <__assert_fail@plt+0x1974>
   12aac:	mov	r6, r0
   12ab0:	mov	r7, r1
   12ab4:	ldrd	r2, [sp, #8]
   12ab8:	mov	r0, r6
   12abc:	mov	r1, r7
   12ac0:	bl	170d4 <__assert_fail@plt+0x5fd0>
   12ac4:	add	r2, r2, #48	; 0x30
   12ac8:	strb	r2, [fp, #-1]!
   12acc:	ldrd	r2, [sp, #8]
   12ad0:	mov	r0, r6
   12ad4:	mov	r1, r7
   12ad8:	bl	170d4 <__assert_fail@plt+0x5fd0>
   12adc:	cmp	r7, #0
   12ae0:	cmpeq	r6, #9
   12ae4:	bhi	12aac <__assert_fail@plt+0x19a8>
   12ae8:	mov	r7, r8
   12aec:	mov	r8, r9
   12af0:	mov	r6, fp
   12af4:	mov	r9, r5
   12af8:	b	12758 <__assert_fail@plt+0x1654>
   12afc:	sub	r4, r8, r6
   12b00:	ldr	r0, [sp, #20]
   12b04:	bl	10fd8 <strlen@plt>
   12b08:	mov	fp, r0
   12b0c:	mov	r3, #41	; 0x29
   12b10:	mov	r2, r4
   12b14:	mov	r1, r6
   12b18:	add	r0, sp, #76	; 0x4c
   12b1c:	bl	10f24 <__memcpy_chk@plt>
   12b20:	mvn	r5, #0
   12b24:	mov	r6, r8
   12b28:	b	12b6c <__assert_fail@plt+0x1a68>
   12b2c:	cmp	r5, r4
   12b30:	movcs	r5, r4
   12b34:	sub	r6, r6, r5
   12b38:	sub	r4, r4, r5
   12b3c:	mov	r2, r5
   12b40:	add	r3, sp, #76	; 0x4c
   12b44:	add	r1, r3, r4
   12b48:	mov	r0, r6
   12b4c:	bl	10eb8 <memcpy@plt>
   12b50:	cmp	r4, #0
   12b54:	beq	12760 <__assert_fail@plt+0x165c>
   12b58:	sub	r6, r6, fp
   12b5c:	mov	r2, fp
   12b60:	ldr	r1, [sp, #20]
   12b64:	mov	r0, r6
   12b68:	bl	10eb8 <memcpy@plt>
   12b6c:	ldrb	r3, [sl]
   12b70:	cmp	r3, #0
   12b74:	beq	12b2c <__assert_fail@plt+0x1a28>
   12b78:	cmp	r3, #255	; 0xff
   12b7c:	movne	r5, r3
   12b80:	moveq	r5, r4
   12b84:	add	sl, sl, #1
   12b88:	b	12b2c <__assert_fail@plt+0x1a28>
   12b8c:	ldrd	r2, [sp, #184]	; 0xb8
   12b90:	cmp	r3, #0
   12b94:	cmpeq	r2, #1
   12b98:	movls	r7, #0
   12b9c:	bls	12770 <__assert_fail@plt+0x166c>
   12ba0:	mov	r7, #1
   12ba4:	mov	r2, #1
   12ba8:	mov	r3, #0
   12bac:	ldr	r1, [sp, #40]	; 0x28
   12bb0:	ldrd	r4, [sp, #184]	; 0xb8
   12bb4:	mul	r0, r1, r3
   12bb8:	umull	r2, r3, r2, r1
   12bbc:	add	r3, r0, r3
   12bc0:	cmp	r5, r3
   12bc4:	cmpeq	r4, r2
   12bc8:	bls	12770 <__assert_fail@plt+0x166c>
   12bcc:	add	r7, r7, #1
   12bd0:	cmp	r7, #8
   12bd4:	bne	12bb4 <__assert_fail@plt+0x1ab0>
   12bd8:	and	r3, r9, #256	; 0x100
   12bdc:	tst	r9, #64	; 0x40
   12be0:	bne	12bf4 <__assert_fail@plt+0x1af0>
   12be4:	ldr	r2, [sp, #32]
   12be8:	b	12c0c <__assert_fail@plt+0x1b08>
   12bec:	tst	r9, #64	; 0x40
   12bf0:	beq	12c54 <__assert_fail@plt+0x1b50>
   12bf4:	ldr	r0, [sp, #36]	; 0x24
   12bf8:	add	r2, r0, #648	; 0x288
   12bfc:	mov	r1, #32
   12c00:	strb	r1, [r0, #647]	; 0x287
   12c04:	cmp	r7, #0
   12c08:	beq	12c5c <__assert_fail@plt+0x1b58>
   12c0c:	ldr	ip, [sp, #44]	; 0x2c
   12c10:	cmp	ip, #0
   12c14:	cmpeq	r7, #1
   12c18:	beq	12c94 <__assert_fail@plt+0x1b90>
   12c1c:	mov	r0, r2
   12c20:	movw	r1, #30524	; 0x773c
   12c24:	movt	r1, #1
   12c28:	ldrb	r1, [r1, r7]
   12c2c:	strb	r1, [r0], #1
   12c30:	str	r0, [sp, #32]
   12c34:	cmp	r3, #0
   12c38:	beq	1277c <__assert_fail@plt+0x1678>
   12c3c:	cmp	ip, #0
   12c40:	movne	r3, #105	; 0x69
   12c44:	strbne	r3, [r2, #1]
   12c48:	addne	r2, r2, #2
   12c4c:	ldreq	r2, [sp, #32]
   12c50:	b	12c68 <__assert_fail@plt+0x1b64>
   12c54:	ldr	r2, [sp, #32]
   12c58:	b	12c04 <__assert_fail@plt+0x1b00>
   12c5c:	cmp	r3, #0
   12c60:	streq	r2, [sp, #32]
   12c64:	beq	1277c <__assert_fail@plt+0x1678>
   12c68:	mov	r3, #66	; 0x42
   12c6c:	strb	r3, [r2], #1
   12c70:	str	r2, [sp, #32]
   12c74:	b	1277c <__assert_fail@plt+0x1678>
   12c78:	cmp	r6, #0
   12c7c:	bne	128d4 <__assert_fail@plt+0x17d0>
   12c80:	tst	r9, #8
   12c84:	beq	128d4 <__assert_fail@plt+0x17d0>
   12c88:	ldr	r8, [sp, #32]
   12c8c:	mov	r6, #0
   12c90:	b	1297c <__assert_fail@plt+0x1878>
   12c94:	mov	r1, r2
   12c98:	mov	r2, #107	; 0x6b
   12c9c:	strb	r2, [r1], #1
   12ca0:	str	r1, [sp, #32]
   12ca4:	cmp	r3, #0
   12ca8:	beq	1277c <__assert_fail@plt+0x1678>
   12cac:	ldr	r2, [sp, #32]
   12cb0:	b	12c68 <__assert_fail@plt+0x1b64>
   12cb4:	strd	r4, [sp, #-20]!	; 0xffffffec
   12cb8:	strd	r6, [sp, #8]
   12cbc:	str	lr, [sp, #16]
   12cc0:	sub	sp, sp, #20
   12cc4:	mov	r7, r1
   12cc8:	mov	r6, r2
   12ccc:	subs	r4, r0, #0
   12cd0:	beq	12d54 <__assert_fail@plt+0x1c50>
   12cd4:	ldrb	r3, [r4]
   12cd8:	cmp	r3, #39	; 0x27
   12cdc:	addeq	r4, r4, #1
   12ce0:	moveq	r5, #4
   12ce4:	movne	r5, #0
   12ce8:	movw	r1, #30524	; 0x773c
   12cec:	movt	r1, #1
   12cf0:	mov	r3, #4
   12cf4:	add	r2, r1, #12
   12cf8:	add	r1, r1, #20
   12cfc:	mov	r0, r4
   12d00:	bl	163cc <__assert_fail@plt+0x52c8>
   12d04:	cmp	r0, #0
   12d08:	blt	12da4 <__assert_fail@plt+0x1ca0>
   12d0c:	movw	r3, #30524	; 0x773c
   12d10:	movt	r3, #1
   12d14:	add	r3, r3, r0, lsl #2
   12d18:	ldr	r3, [r3, #12]
   12d1c:	orr	r5, r5, r3
   12d20:	mov	r2, #1
   12d24:	mov	r3, #0
   12d28:	strd	r2, [r6]
   12d2c:	str	r5, [r7]
   12d30:	mov	r0, #0
   12d34:	ldrd	r2, [r6]
   12d38:	orrs	r3, r2, r3
   12d3c:	beq	12e40 <__assert_fail@plt+0x1d3c>
   12d40:	add	sp, sp, #20
   12d44:	ldrd	r4, [sp]
   12d48:	ldrd	r6, [sp, #8]
   12d4c:	add	sp, sp, #16
   12d50:	pop	{pc}		; (ldr pc, [sp], #4)
   12d54:	movw	r0, #30576	; 0x7770
   12d58:	movt	r0, #1
   12d5c:	bl	10f78 <getenv@plt>
   12d60:	subs	r4, r0, #0
   12d64:	bne	12cd4 <__assert_fail@plt+0x1bd0>
   12d68:	movw	r0, #30588	; 0x777c
   12d6c:	movt	r0, #1
   12d70:	bl	10f78 <getenv@plt>
   12d74:	subs	r4, r0, #0
   12d78:	bne	12cd4 <__assert_fail@plt+0x1bd0>
   12d7c:	movw	r0, #30600	; 0x7788
   12d80:	movt	r0, #1
   12d84:	bl	10f78 <getenv@plt>
   12d88:	cmp	r0, #0
   12d8c:	moveq	r2, #1024	; 0x400
   12d90:	movne	r2, #512	; 0x200
   12d94:	mov	r3, #0
   12d98:	strd	r2, [r6]
   12d9c:	mov	r5, #0
   12da0:	b	12d2c <__assert_fail@plt+0x1c28>
   12da4:	movw	r3, #30616	; 0x7798
   12da8:	movt	r3, #1
   12dac:	str	r3, [sp]
   12db0:	mov	r3, r6
   12db4:	mov	r2, #0
   12db8:	add	r1, sp, #12
   12dbc:	mov	r0, r4
   12dc0:	bl	15d54 <__assert_fail@plt+0x4c50>
   12dc4:	cmp	r0, #0
   12dc8:	bne	12e20 <__assert_fail@plt+0x1d1c>
   12dcc:	ldrb	r3, [r4]
   12dd0:	sub	r3, r3, #48	; 0x30
   12dd4:	uxtb	r3, r3
   12dd8:	cmp	r3, #9
   12ddc:	bls	12d2c <__assert_fail@plt+0x1c28>
   12de0:	ldr	r2, [sp, #12]
   12de4:	cmp	r2, r4
   12de8:	beq	12e08 <__assert_fail@plt+0x1d04>
   12dec:	ldrb	r3, [r4, #1]!
   12df0:	sub	r3, r3, #48	; 0x30
   12df4:	uxtb	r3, r3
   12df8:	cmp	r3, #9
   12dfc:	bls	12d2c <__assert_fail@plt+0x1c28>
   12e00:	cmp	r2, r4
   12e04:	bne	12dec <__assert_fail@plt+0x1ce8>
   12e08:	ldrb	r3, [r4, #-1]
   12e0c:	cmp	r3, #66	; 0x42
   12e10:	orrne	r5, r5, #128	; 0x80
   12e14:	beq	12e2c <__assert_fail@plt+0x1d28>
   12e18:	orr	r5, r5, #32
   12e1c:	b	12d2c <__assert_fail@plt+0x1c28>
   12e20:	mov	r3, #0
   12e24:	str	r3, [r7]
   12e28:	b	12d34 <__assert_fail@plt+0x1c30>
   12e2c:	orr	r5, r5, #384	; 0x180
   12e30:	ldrb	r3, [r4, #-2]
   12e34:	cmp	r3, #105	; 0x69
   12e38:	bne	12d2c <__assert_fail@plt+0x1c28>
   12e3c:	b	12e18 <__assert_fail@plt+0x1d14>
   12e40:	movw	r0, #30600	; 0x7788
   12e44:	movt	r0, #1
   12e48:	bl	10f78 <getenv@plt>
   12e4c:	cmp	r0, #0
   12e50:	moveq	r2, #1024	; 0x400
   12e54:	movne	r2, #512	; 0x200
   12e58:	mov	r3, #0
   12e5c:	strd	r2, [r6]
   12e60:	mov	r0, #4
   12e64:	b	12d40 <__assert_fail@plt+0x1c3c>
   12e68:	strd	r4, [sp, #-16]!
   12e6c:	str	r6, [sp, #8]
   12e70:	str	lr, [sp, #12]
   12e74:	subs	r4, r0, #0
   12e78:	beq	12f14 <__assert_fail@plt+0x1e10>
   12e7c:	mov	r1, #47	; 0x2f
   12e80:	mov	r0, r4
   12e84:	bl	1108c <strrchr@plt>
   12e88:	subs	r5, r0, #0
   12e8c:	beq	12eec <__assert_fail@plt+0x1de8>
   12e90:	add	r6, r5, #1
   12e94:	sub	r3, r6, r4
   12e98:	cmp	r3, #6
   12e9c:	ble	12eec <__assert_fail@plt+0x1de8>
   12ea0:	mov	r2, #7
   12ea4:	movw	r1, #30712	; 0x77f8
   12ea8:	movt	r1, #1
   12eac:	sub	r0, r5, #6
   12eb0:	bl	110e0 <strncmp@plt>
   12eb4:	cmp	r0, #0
   12eb8:	bne	12eec <__assert_fail@plt+0x1de8>
   12ebc:	mov	r2, #3
   12ec0:	movw	r1, #30720	; 0x7800
   12ec4:	movt	r1, #1
   12ec8:	mov	r0, r6
   12ecc:	bl	110e0 <strncmp@plt>
   12ed0:	cmp	r0, #0
   12ed4:	movne	r4, r6
   12ed8:	bne	12eec <__assert_fail@plt+0x1de8>
   12edc:	add	r4, r5, #4
   12ee0:	movw	r3, #33112	; 0x8158
   12ee4:	movt	r3, #2
   12ee8:	str	r4, [r3]
   12eec:	movw	r3, #33164	; 0x818c
   12ef0:	movt	r3, #2
   12ef4:	str	r4, [r3]
   12ef8:	movw	r3, #33116	; 0x815c
   12efc:	movt	r3, #2
   12f00:	str	r4, [r3]
   12f04:	ldrd	r4, [sp]
   12f08:	ldr	r6, [sp, #8]
   12f0c:	add	sp, sp, #12
   12f10:	pop	{pc}		; (ldr pc, [sp], #4)
   12f14:	movw	r3, #33128	; 0x8168
   12f18:	movt	r3, #2
   12f1c:	ldr	r3, [r3]
   12f20:	mov	r2, #55	; 0x37
   12f24:	mov	r1, #1
   12f28:	movw	r0, #30656	; 0x77c0
   12f2c:	movt	r0, #1
   12f30:	bl	10f30 <fwrite@plt>
   12f34:	bl	110ec <abort@plt>
   12f38:	mov	r2, #0
   12f3c:	mov	r3, #0
   12f40:	strd	r2, [r0]
   12f44:	strd	r2, [r0, #8]
   12f48:	strd	r2, [r0, #16]
   12f4c:	strd	r2, [r0, #24]
   12f50:	strd	r2, [r0, #32]
   12f54:	strd	r2, [r0, #40]	; 0x28
   12f58:	cmp	r1, #10
   12f5c:	beq	12f68 <__assert_fail@plt+0x1e64>
   12f60:	str	r1, [r0]
   12f64:	bx	lr
   12f68:	str	r4, [sp, #-8]!
   12f6c:	str	lr, [sp, #4]
   12f70:	bl	110ec <abort@plt>
   12f74:	strd	r4, [sp, #-16]!
   12f78:	str	r6, [sp, #8]
   12f7c:	str	lr, [sp, #12]
   12f80:	mov	r5, r0
   12f84:	mov	r6, r1
   12f88:	mov	r2, #5
   12f8c:	mov	r1, r0
   12f90:	mov	r0, #0
   12f94:	bl	10ef4 <dcgettext@plt>
   12f98:	mov	r4, r0
   12f9c:	cmp	r5, r0
   12fa0:	beq	12fb8 <__assert_fail@plt+0x1eb4>
   12fa4:	mov	r0, r4
   12fa8:	ldrd	r4, [sp]
   12fac:	ldr	r6, [sp, #8]
   12fb0:	add	sp, sp, #12
   12fb4:	pop	{pc}		; (ldr pc, [sp], #4)
   12fb8:	bl	16b08 <__assert_fail@plt+0x5a04>
   12fbc:	ldrb	r3, [r0]
   12fc0:	bic	r3, r3, #32
   12fc4:	cmp	r3, #85	; 0x55
   12fc8:	bne	1304c <__assert_fail@plt+0x1f48>
   12fcc:	ldrb	r3, [r0, #1]
   12fd0:	bic	r3, r3, #32
   12fd4:	cmp	r3, #84	; 0x54
   12fd8:	bne	13010 <__assert_fail@plt+0x1f0c>
   12fdc:	ldrb	r3, [r0, #2]
   12fe0:	bic	r3, r3, #32
   12fe4:	cmp	r3, #70	; 0x46
   12fe8:	bne	13010 <__assert_fail@plt+0x1f0c>
   12fec:	ldrb	r3, [r0, #3]
   12ff0:	cmp	r3, #45	; 0x2d
   12ff4:	bne	13010 <__assert_fail@plt+0x1f0c>
   12ff8:	ldrb	r3, [r0, #4]
   12ffc:	cmp	r3, #56	; 0x38
   13000:	bne	13010 <__assert_fail@plt+0x1f0c>
   13004:	ldrb	r3, [r0, #5]
   13008:	cmp	r3, #0
   1300c:	beq	1302c <__assert_fail@plt+0x1f28>
   13010:	movw	r4, #30808	; 0x7858
   13014:	movt	r4, #1
   13018:	movw	r3, #30828	; 0x786c
   1301c:	movt	r3, #1
   13020:	cmp	r6, #9
   13024:	movne	r4, r3
   13028:	b	12fa4 <__assert_fail@plt+0x1ea0>
   1302c:	ldrb	r2, [r4]
   13030:	movw	r4, #30824	; 0x7868
   13034:	movt	r4, #1
   13038:	movw	r3, #30812	; 0x785c
   1303c:	movt	r3, #1
   13040:	cmp	r2, #96	; 0x60
   13044:	movne	r4, r3
   13048:	b	12fa4 <__assert_fail@plt+0x1ea0>
   1304c:	cmp	r3, #71	; 0x47
   13050:	bne	13010 <__assert_fail@plt+0x1f0c>
   13054:	ldrb	r3, [r0, #1]
   13058:	bic	r3, r3, #32
   1305c:	cmp	r3, #66	; 0x42
   13060:	bne	13010 <__assert_fail@plt+0x1f0c>
   13064:	ldrb	r3, [r0, #2]
   13068:	cmp	r3, #49	; 0x31
   1306c:	bne	13010 <__assert_fail@plt+0x1f0c>
   13070:	ldrb	r3, [r0, #3]
   13074:	cmp	r3, #56	; 0x38
   13078:	bne	13010 <__assert_fail@plt+0x1f0c>
   1307c:	ldrb	r3, [r0, #4]
   13080:	cmp	r3, #48	; 0x30
   13084:	bne	13010 <__assert_fail@plt+0x1f0c>
   13088:	ldrb	r3, [r0, #5]
   1308c:	cmp	r3, #51	; 0x33
   13090:	bne	13010 <__assert_fail@plt+0x1f0c>
   13094:	ldrb	r3, [r0, #6]
   13098:	cmp	r3, #48	; 0x30
   1309c:	bne	13010 <__assert_fail@plt+0x1f0c>
   130a0:	ldrb	r3, [r0, #7]
   130a4:	cmp	r3, #0
   130a8:	bne	13010 <__assert_fail@plt+0x1f0c>
   130ac:	ldrb	r2, [r4]
   130b0:	movw	r4, #30820	; 0x7864
   130b4:	movt	r4, #1
   130b8:	movw	r3, #30816	; 0x7860
   130bc:	movt	r3, #1
   130c0:	cmp	r2, #96	; 0x60
   130c4:	movne	r4, r3
   130c8:	b	12fa4 <__assert_fail@plt+0x1ea0>
   130cc:	strd	r4, [sp, #-36]!	; 0xffffffdc
   130d0:	strd	r6, [sp, #8]
   130d4:	strd	r8, [sp, #16]
   130d8:	strd	sl, [sp, #24]
   130dc:	str	lr, [sp, #32]
   130e0:	sub	sp, sp, #116	; 0x74
   130e4:	str	r0, [sp, #64]	; 0x40
   130e8:	mov	r8, r1
   130ec:	str	r2, [sp, #48]	; 0x30
   130f0:	str	r3, [sp, #24]
   130f4:	ldr	r7, [sp, #152]	; 0x98
   130f8:	bl	10f48 <__ctype_get_mb_cur_max@plt>
   130fc:	str	r0, [sp, #76]	; 0x4c
   13100:	ldr	r3, [sp, #156]	; 0x9c
   13104:	ubfx	r3, r3, #1, #1
   13108:	str	r3, [sp, #32]
   1310c:	mov	r3, #1
   13110:	str	r3, [sp, #40]	; 0x28
   13114:	mov	r3, #0
   13118:	str	r3, [sp, #68]	; 0x44
   1311c:	str	r3, [sp, #36]	; 0x24
   13120:	str	r3, [sp, #28]
   13124:	str	r3, [sp, #52]	; 0x34
   13128:	str	r3, [sp, #60]	; 0x3c
   1312c:	str	r3, [sp, #72]	; 0x48
   13130:	movw	r3, #30832	; 0x7870
   13134:	movt	r3, #1
   13138:	str	r3, [sp, #80]	; 0x50
   1313c:	mov	r9, r8
   13140:	mov	sl, r7
   13144:	cmp	sl, #10
   13148:	ldrls	pc, [pc, sl, lsl #2]
   1314c:	b	13310 <__assert_fail@plt+0x220c>
   13150:			; <UNDEFINED> instruction: 0x000131b0
   13154:	andeq	r3, r1, r4, lsl #3
   13158:	andeq	r3, r1, r8, ror #5
   1315c:	andeq	r3, r1, ip, ror r1
   13160:	muleq	r1, ip, r2
   13164:	andeq	r3, r1, r0, asr #3
   13168:	andeq	r4, r1, ip, lsl #11
   1316c:	andeq	r3, r1, r4, lsl r3
   13170:	strdeq	r3, [r1], -ip
   13174:	strdeq	r3, [r1], -ip
   13178:	strdeq	r3, [r1], -ip
   1317c:	mov	r3, #1
   13180:	str	r3, [sp, #28]
   13184:	mov	r3, #1
   13188:	str	r3, [sp, #32]
   1318c:	str	r3, [sp, #52]	; 0x34
   13190:	movw	r3, #30828	; 0x786c
   13194:	movt	r3, #1
   13198:	str	r3, [sp, #60]	; 0x3c
   1319c:	mov	fp, #0
   131a0:	mov	sl, #2
   131a4:	mov	r6, #0
   131a8:	ldr	r8, [sp, #64]	; 0x40
   131ac:	b	13a24 <__assert_fail@plt+0x2920>
   131b0:	mov	fp, sl
   131b4:	mov	r3, #0
   131b8:	str	r3, [sp, #32]
   131bc:	b	131a4 <__assert_fail@plt+0x20a0>
   131c0:	ldr	r3, [sp, #32]
   131c4:	cmp	r3, #0
   131c8:	bne	13328 <__assert_fail@plt+0x2224>
   131cc:	cmp	r9, #0
   131d0:	beq	1334c <__assert_fail@plt+0x2248>
   131d4:	mov	r3, #34	; 0x22
   131d8:	ldr	r2, [sp, #64]	; 0x40
   131dc:	strb	r3, [r2]
   131e0:	mov	fp, #1
   131e4:	str	fp, [sp, #28]
   131e8:	str	fp, [sp, #52]	; 0x34
   131ec:	movw	r3, #30808	; 0x7858
   131f0:	movt	r3, #1
   131f4:	str	r3, [sp, #60]	; 0x3c
   131f8:	b	131a4 <__assert_fail@plt+0x20a0>
   131fc:	cmp	sl, #10
   13200:	bne	13234 <__assert_fail@plt+0x2130>
   13204:	ldr	r3, [sp, #32]
   13208:	cmp	r3, #0
   1320c:	movne	fp, #0
   13210:	beq	1325c <__assert_fail@plt+0x2158>
   13214:	ldr	r0, [sp, #168]	; 0xa8
   13218:	bl	10fd8 <strlen@plt>
   1321c:	str	r0, [sp, #52]	; 0x34
   13220:	ldr	r3, [sp, #168]	; 0xa8
   13224:	str	r3, [sp, #60]	; 0x3c
   13228:	mov	r3, #1
   1322c:	str	r3, [sp, #28]
   13230:	b	131a4 <__assert_fail@plt+0x20a0>
   13234:	mov	r1, sl
   13238:	ldr	r0, [sp, #80]	; 0x50
   1323c:	bl	12f74 <__assert_fail@plt+0x1e70>
   13240:	str	r0, [sp, #164]	; 0xa4
   13244:	mov	r1, sl
   13248:	movw	r0, #30828	; 0x786c
   1324c:	movt	r0, #1
   13250:	bl	12f74 <__assert_fail@plt+0x1e70>
   13254:	str	r0, [sp, #168]	; 0xa8
   13258:	b	13204 <__assert_fail@plt+0x2100>
   1325c:	ldr	r3, [sp, #164]	; 0xa4
   13260:	ldrb	r3, [r3]
   13264:	cmp	r3, #0
   13268:	beq	13294 <__assert_fail@plt+0x2190>
   1326c:	ldr	r2, [sp, #164]	; 0xa4
   13270:	mov	fp, #0
   13274:	ldr	r1, [sp, #64]	; 0x40
   13278:	cmp	r9, fp
   1327c:	strbhi	r3, [r1, fp]
   13280:	add	fp, fp, #1
   13284:	ldrb	r3, [r2, #1]!
   13288:	cmp	r3, #0
   1328c:	bne	13278 <__assert_fail@plt+0x2174>
   13290:	b	13214 <__assert_fail@plt+0x2110>
   13294:	mov	fp, #0
   13298:	b	13214 <__assert_fail@plt+0x2110>
   1329c:	ldr	r3, [sp, #32]
   132a0:	cmp	r3, #0
   132a4:	bne	13184 <__assert_fail@plt+0x2080>
   132a8:	mov	r3, #1
   132ac:	str	r3, [sp, #28]
   132b0:	cmp	r9, #0
   132b4:	beq	13368 <__assert_fail@plt+0x2264>
   132b8:	mov	r3, #39	; 0x27
   132bc:	ldr	r2, [sp, #64]	; 0x40
   132c0:	strb	r3, [r2]
   132c4:	mov	r3, #0
   132c8:	str	r3, [sp, #32]
   132cc:	mov	fp, #1
   132d0:	str	fp, [sp, #52]	; 0x34
   132d4:	movw	r3, #30828	; 0x786c
   132d8:	movt	r3, #1
   132dc:	str	r3, [sp, #60]	; 0x3c
   132e0:	mov	sl, #2
   132e4:	b	131a4 <__assert_fail@plt+0x20a0>
   132e8:	ldr	r3, [sp, #32]
   132ec:	cmp	r3, #0
   132f0:	beq	132b0 <__assert_fail@plt+0x21ac>
   132f4:	mov	r3, #1
   132f8:	str	r3, [sp, #52]	; 0x34
   132fc:	movw	r3, #30828	; 0x786c
   13300:	movt	r3, #1
   13304:	str	r3, [sp, #60]	; 0x3c
   13308:	mov	fp, #0
   1330c:	b	131a4 <__assert_fail@plt+0x20a0>
   13310:	bl	110ec <abort@plt>
   13314:	mov	fp, #0
   13318:	str	fp, [sp, #32]
   1331c:	mov	r3, #1
   13320:	str	r3, [sp, #28]
   13324:	b	131a4 <__assert_fail@plt+0x20a0>
   13328:	ldr	r3, [sp, #32]
   1332c:	str	r3, [sp, #28]
   13330:	mov	r3, #1
   13334:	str	r3, [sp, #52]	; 0x34
   13338:	movw	r3, #30808	; 0x7858
   1333c:	movt	r3, #1
   13340:	str	r3, [sp, #60]	; 0x3c
   13344:	mov	fp, #0
   13348:	b	131a4 <__assert_fail@plt+0x20a0>
   1334c:	mov	fp, #1
   13350:	str	fp, [sp, #28]
   13354:	str	fp, [sp, #52]	; 0x34
   13358:	movw	r3, #30808	; 0x7858
   1335c:	movt	r3, #1
   13360:	str	r3, [sp, #60]	; 0x3c
   13364:	b	131a4 <__assert_fail@plt+0x20a0>
   13368:	mov	r3, #0
   1336c:	str	r3, [sp, #32]
   13370:	mov	fp, #1
   13374:	str	fp, [sp, #52]	; 0x34
   13378:	movw	r3, #30828	; 0x786c
   1337c:	movt	r3, #1
   13380:	str	r3, [sp, #60]	; 0x3c
   13384:	mov	sl, #2
   13388:	b	131a4 <__assert_fail@plt+0x20a0>
   1338c:	mov	r3, r2
   13390:	add	r4, r6, r2
   13394:	ldr	r2, [sp, #24]
   13398:	cmp	r3, #1
   1339c:	movls	r3, #0
   133a0:	movhi	r3, #1
   133a4:	cmn	r2, #1
   133a8:	movne	r3, #0
   133ac:	cmp	r3, #0
   133b0:	beq	133c0 <__assert_fail@plt+0x22bc>
   133b4:	ldr	r0, [sp, #48]	; 0x30
   133b8:	bl	10fd8 <strlen@plt>
   133bc:	str	r0, [sp, #24]
   133c0:	ldr	r3, [sp, #24]
   133c4:	cmp	r4, r3
   133c8:	bhi	145b4 <__assert_fail@plt+0x34b0>
   133cc:	ldr	r3, [sp, #48]	; 0x30
   133d0:	add	r4, r3, r6
   133d4:	ldr	r2, [sp, #52]	; 0x34
   133d8:	ldr	r1, [sp, #60]	; 0x3c
   133dc:	mov	r0, r4
   133e0:	bl	10edc <memcmp@plt>
   133e4:	cmp	r0, #0
   133e8:	bne	145b4 <__assert_fail@plt+0x34b0>
   133ec:	ldr	r3, [sp, #32]
   133f0:	cmp	r3, #0
   133f4:	bne	13604 <__assert_fail@plt+0x2500>
   133f8:	ldrb	r4, [r4]
   133fc:	cmp	r4, #126	; 0x7e
   13400:	ldrls	pc, [pc, r4, lsl #2]
   13404:	b	13eb8 <__assert_fail@plt+0x2db4>
   13408:	andeq	r3, r1, r8, asr #12
   1340c:			; <UNDEFINED> instruction: 0x00013eb8
   13410:			; <UNDEFINED> instruction: 0x00013eb8
   13414:			; <UNDEFINED> instruction: 0x00013eb8
   13418:			; <UNDEFINED> instruction: 0x00013eb8
   1341c:			; <UNDEFINED> instruction: 0x00013eb8
   13420:			; <UNDEFINED> instruction: 0x00013eb8
   13424:	andeq	r3, r1, r0, ror #26
   13428:	andeq	r3, r1, r4, ror #17
   1342c:	andeq	r3, r1, r8, lsl #25
   13430:	andeq	r3, r1, r4, lsr sp
   13434:	muleq	r1, ip, ip
   13438:	strdeq	r3, [r1], -r8
   1343c:	andeq	r3, r1, ip, lsl #18
   13440:			; <UNDEFINED> instruction: 0x00013eb8
   13444:			; <UNDEFINED> instruction: 0x00013eb8
   13448:			; <UNDEFINED> instruction: 0x00013eb8
   1344c:			; <UNDEFINED> instruction: 0x00013eb8
   13450:			; <UNDEFINED> instruction: 0x00013eb8
   13454:			; <UNDEFINED> instruction: 0x00013eb8
   13458:			; <UNDEFINED> instruction: 0x00013eb8
   1345c:			; <UNDEFINED> instruction: 0x00013eb8
   13460:			; <UNDEFINED> instruction: 0x00013eb8
   13464:			; <UNDEFINED> instruction: 0x00013eb8
   13468:			; <UNDEFINED> instruction: 0x00013eb8
   1346c:			; <UNDEFINED> instruction: 0x00013eb8
   13470:			; <UNDEFINED> instruction: 0x00013eb8
   13474:			; <UNDEFINED> instruction: 0x00013eb8
   13478:			; <UNDEFINED> instruction: 0x00013eb8
   1347c:			; <UNDEFINED> instruction: 0x00013eb8
   13480:			; <UNDEFINED> instruction: 0x00013eb8
   13484:			; <UNDEFINED> instruction: 0x00013eb8
   13488:	ldrdeq	r3, [r1], -r4
   1348c:	strdeq	r3, [r1], -r8
   13490:	strdeq	r3, [r1], -r8
   13494:	muleq	r1, r0, sp
   13498:	strdeq	r3, [r1], -r8
   1349c:	andeq	r4, r1, r8, lsl r3
   134a0:	strdeq	r3, [r1], -r8
   134a4:	andeq	r3, r1, r8, lsl lr
   134a8:	strdeq	r3, [r1], -r8
   134ac:	strdeq	r3, [r1], -r8
   134b0:	strdeq	r3, [r1], -r8
   134b4:	andeq	r4, r1, r8, lsl r3
   134b8:	andeq	r4, r1, r8, lsl r3
   134bc:	andeq	r4, r1, r8, lsl r3
   134c0:	andeq	r4, r1, r8, lsl r3
   134c4:	andeq	r4, r1, r8, lsl r3
   134c8:	andeq	r4, r1, r8, lsl r3
   134cc:	andeq	r4, r1, r8, lsl r3
   134d0:	andeq	r4, r1, r8, lsl r3
   134d4:	andeq	r4, r1, r8, lsl r3
   134d8:	andeq	r4, r1, r8, lsl r3
   134dc:	andeq	r4, r1, r8, lsl r3
   134e0:	andeq	r4, r1, r8, lsl r3
   134e4:	andeq	r4, r1, r8, lsl r3
   134e8:	andeq	r4, r1, r8, lsl r3
   134ec:	andeq	r4, r1, r8, lsl r3
   134f0:	andeq	r4, r1, r8, lsl r3
   134f4:	strdeq	r3, [r1], -r8
   134f8:	strdeq	r3, [r1], -r8
   134fc:	strdeq	r3, [r1], -r8
   13500:	strdeq	r3, [r1], -r8
   13504:	andeq	r3, r1, r8, ror r7
   13508:			; <UNDEFINED> instruction: 0x00013eb8
   1350c:	andeq	r4, r1, r8, lsl r3
   13510:	andeq	r4, r1, r8, lsl r3
   13514:	andeq	r4, r1, r8, lsl r3
   13518:	andeq	r4, r1, r8, lsl r3
   1351c:	andeq	r4, r1, r8, lsl r3
   13520:	andeq	r4, r1, r8, lsl r3
   13524:	andeq	r4, r1, r8, lsl r3
   13528:	andeq	r4, r1, r8, lsl r3
   1352c:	andeq	r4, r1, r8, lsl r3
   13530:	andeq	r4, r1, r8, lsl r3
   13534:	andeq	r4, r1, r8, lsl r3
   13538:	andeq	r4, r1, r8, lsl r3
   1353c:	andeq	r4, r1, r8, lsl r3
   13540:	andeq	r4, r1, r8, lsl r3
   13544:	andeq	r4, r1, r8, lsl r3
   13548:	andeq	r4, r1, r8, lsl r3
   1354c:	andeq	r4, r1, r8, lsl r3
   13550:	andeq	r4, r1, r8, lsl r3
   13554:	andeq	r4, r1, r8, lsl r3
   13558:	andeq	r4, r1, r8, lsl r3
   1355c:	andeq	r4, r1, r8, lsl r3
   13560:	andeq	r4, r1, r8, lsl r3
   13564:	andeq	r4, r1, r8, lsl r3
   13568:	andeq	r4, r1, r8, lsl r3
   1356c:	andeq	r4, r1, r8, lsl r3
   13570:	andeq	r4, r1, r8, lsl r3
   13574:	strdeq	r3, [r1], -r8
   13578:			; <UNDEFINED> instruction: 0x00013cb0
   1357c:	andeq	r4, r1, r8, lsl r3
   13580:	strdeq	r3, [r1], -r8
   13584:	andeq	r4, r1, r8, lsl r3
   13588:	strdeq	r3, [r1], -r8
   1358c:	andeq	r4, r1, r8, lsl r3
   13590:	andeq	r4, r1, r8, lsl r3
   13594:	andeq	r4, r1, r8, lsl r3
   13598:	andeq	r4, r1, r8, lsl r3
   1359c:	andeq	r4, r1, r8, lsl r3
   135a0:	andeq	r4, r1, r8, lsl r3
   135a4:	andeq	r4, r1, r8, lsl r3
   135a8:	andeq	r4, r1, r8, lsl r3
   135ac:	andeq	r4, r1, r8, lsl r3
   135b0:	andeq	r4, r1, r8, lsl r3
   135b4:	andeq	r4, r1, r8, lsl r3
   135b8:	andeq	r4, r1, r8, lsl r3
   135bc:	andeq	r4, r1, r8, lsl r3
   135c0:	andeq	r4, r1, r8, lsl r3
   135c4:	andeq	r4, r1, r8, lsl r3
   135c8:	andeq	r4, r1, r8, lsl r3
   135cc:	andeq	r4, r1, r8, lsl r3
   135d0:	andeq	r4, r1, r8, lsl r3
   135d4:	andeq	r4, r1, r8, lsl r3
   135d8:	andeq	r4, r1, r8, lsl r3
   135dc:	andeq	r4, r1, r8, lsl r3
   135e0:	andeq	r4, r1, r8, lsl r3
   135e4:	andeq	r4, r1, r8, lsl r3
   135e8:	andeq	r4, r1, r8, lsl r3
   135ec:	andeq	r4, r1, r8, lsl r3
   135f0:	andeq	r4, r1, r8, lsl r3
   135f4:	andeq	r3, r1, r0, ror sp
   135f8:	strdeq	r3, [r1], -r8
   135fc:	andeq	r3, r1, r0, ror sp
   13600:	muleq	r1, r0, sp
   13604:	mov	r8, r9
   13608:	mov	r7, sl
   1360c:	b	1450c <__assert_fail@plt+0x3408>
   13610:	ldr	r3, [sp, #28]
   13614:	cmp	r3, #0
   13618:	bne	13638 <__assert_fail@plt+0x2534>
   1361c:	ldr	r3, [sp, #156]	; 0x9c
   13620:	tst	r3, #1
   13624:	bne	13a20 <__assert_fail@plt+0x291c>
   13628:	ldr	r3, [sp, #28]
   1362c:	str	r3, [sp, #44]	; 0x2c
   13630:	mov	r5, r3
   13634:	b	13940 <__assert_fail@plt+0x283c>
   13638:	ldr	r3, [sp, #32]
   1363c:	cmp	r3, #0
   13640:	bne	144bc <__assert_fail@plt+0x33b8>
   13644:	str	r3, [sp, #44]	; 0x2c
   13648:	ldr	r3, [sp, #36]	; 0x24
   1364c:	eor	r3, r3, #1
   13650:	cmp	sl, #2
   13654:	movne	r3, #0
   13658:	andeq	r3, r3, #1
   1365c:	cmp	r3, #0
   13660:	beq	136b8 <__assert_fail@plt+0x25b4>
   13664:	cmp	r9, fp
   13668:	movhi	r2, #39	; 0x27
   1366c:	strbhi	r2, [r8, fp]
   13670:	add	r2, fp, #1
   13674:	cmp	r9, r2
   13678:	movhi	r1, #36	; 0x24
   1367c:	strbhi	r1, [r8, r2]
   13680:	add	r2, fp, #2
   13684:	cmp	r9, r2
   13688:	movhi	r1, #39	; 0x27
   1368c:	strbhi	r1, [r8, r2]
   13690:	add	r2, fp, #3
   13694:	cmp	r9, r2
   13698:	bls	14578 <__assert_fail@plt+0x3474>
   1369c:	mov	r1, #92	; 0x5c
   136a0:	strb	r1, [r8, r2]
   136a4:	add	fp, fp, #4
   136a8:	str	r3, [sp, #36]	; 0x24
   136ac:	mov	r5, #0
   136b0:	mov	r4, #48	; 0x30
   136b4:	b	1398c <__assert_fail@plt+0x2888>
   136b8:	cmp	r9, fp
   136bc:	bhi	136e4 <__assert_fail@plt+0x25e0>
   136c0:	add	r1, fp, #1
   136c4:	ldr	r2, [sp, #56]	; 0x38
   136c8:	cmp	r2, #0
   136cc:	bne	1370c <__assert_fail@plt+0x2608>
   136d0:	mov	r3, r5
   136d4:	ldr	r5, [sp, #56]	; 0x38
   136d8:	mov	fp, r1
   136dc:	mov	r4, #48	; 0x30
   136e0:	b	13940 <__assert_fail@plt+0x283c>
   136e4:	mov	r2, #92	; 0x5c
   136e8:	strb	r2, [r8, fp]
   136ec:	add	r1, fp, #1
   136f0:	ldr	r2, [sp, #56]	; 0x38
   136f4:	cmp	r2, #0
   136f8:	moveq	r3, r5
   136fc:	moveq	r5, r2
   13700:	moveq	fp, r1
   13704:	moveq	r4, #48	; 0x30
   13708:	beq	1398c <__assert_fail@plt+0x2888>
   1370c:	add	r2, r6, #1
   13710:	ldr	r0, [sp, #24]
   13714:	cmp	r2, r0
   13718:	bcs	13734 <__assert_fail@plt+0x2630>
   1371c:	ldr	r0, [sp, #48]	; 0x30
   13720:	ldrb	r2, [r0, r2]
   13724:	sub	r2, r2, #48	; 0x30
   13728:	uxtb	r2, r2
   1372c:	cmp	r2, #9
   13730:	bls	1374c <__assert_fail@plt+0x2648>
   13734:	mov	r2, r3
   13738:	mov	r3, r5
   1373c:	mov	r5, r2
   13740:	mov	fp, r1
   13744:	mov	r4, #48	; 0x30
   13748:	b	13964 <__assert_fail@plt+0x2860>
   1374c:	cmp	r9, r1
   13750:	movhi	r2, #48	; 0x30
   13754:	strbhi	r2, [r8, r1]
   13758:	add	r2, fp, #2
   1375c:	cmp	r9, r2
   13760:	movhi	r1, #48	; 0x30
   13764:	strbhi	r1, [r8, r2]
   13768:	add	r1, fp, #3
   1376c:	b	13734 <__assert_fail@plt+0x2630>
   13770:	mov	r3, #0
   13774:	str	r3, [sp, #44]	; 0x2c
   13778:	cmp	sl, #2
   1377c:	beq	13798 <__assert_fail@plt+0x2694>
   13780:	cmp	sl, #5
   13784:	beq	137b0 <__assert_fail@plt+0x26ac>
   13788:	mov	r5, #0
   1378c:	mov	r3, r5
   13790:	mov	r4, #63	; 0x3f
   13794:	b	13940 <__assert_fail@plt+0x283c>
   13798:	ldr	r3, [sp, #32]
   1379c:	cmp	r3, #0
   137a0:	bne	144c8 <__assert_fail@plt+0x33c4>
   137a4:	mov	r5, r3
   137a8:	mov	r4, #63	; 0x3f
   137ac:	b	13ea8 <__assert_fail@plt+0x2da4>
   137b0:	ldr	r3, [sp, #156]	; 0x9c
   137b4:	tst	r3, #4
   137b8:	beq	142e0 <__assert_fail@plt+0x31dc>
   137bc:	add	r2, r6, #2
   137c0:	ldr	r3, [sp, #24]
   137c4:	cmp	r2, r3
   137c8:	bcs	142f0 <__assert_fail@plt+0x31ec>
   137cc:	ldr	r3, [sp, #48]	; 0x30
   137d0:	add	r3, r3, r6
   137d4:	ldrb	r4, [r3, #1]
   137d8:	cmp	r4, #63	; 0x3f
   137dc:	movne	r5, #0
   137e0:	movne	r3, r5
   137e4:	movne	r4, #63	; 0x3f
   137e8:	bne	13940 <__assert_fail@plt+0x283c>
   137ec:	ldr	r3, [sp, #48]	; 0x30
   137f0:	ldrb	r1, [r3, r2]
   137f4:	sub	r3, r1, #33	; 0x21
   137f8:	cmp	r3, #29
   137fc:	ldrls	pc, [pc, r3, lsl #2]
   13800:	b	14300 <__assert_fail@plt+0x31fc>
   13804:	andeq	r3, r1, ip, ror r8
   13808:	andeq	r4, r1, r0, lsl #6
   1380c:	andeq	r4, r1, r0, lsl #6
   13810:	andeq	r4, r1, r0, lsl #6
   13814:	andeq	r4, r1, r0, lsl #6
   13818:	andeq	r4, r1, r0, lsl #6
   1381c:	andeq	r3, r1, ip, ror r8
   13820:	andeq	r3, r1, ip, ror r8
   13824:	andeq	r3, r1, ip, ror r8
   13828:	andeq	r4, r1, r0, lsl #6
   1382c:	andeq	r4, r1, r0, lsl #6
   13830:	andeq	r4, r1, r0, lsl #6
   13834:	andeq	r3, r1, ip, ror r8
   13838:	andeq	r4, r1, r0, lsl #6
   1383c:	andeq	r3, r1, ip, ror r8
   13840:	andeq	r4, r1, r0, lsl #6
   13844:	andeq	r4, r1, r0, lsl #6
   13848:	andeq	r4, r1, r0, lsl #6
   1384c:	andeq	r4, r1, r0, lsl #6
   13850:	andeq	r4, r1, r0, lsl #6
   13854:	andeq	r4, r1, r0, lsl #6
   13858:	andeq	r4, r1, r0, lsl #6
   1385c:	andeq	r4, r1, r0, lsl #6
   13860:	andeq	r4, r1, r0, lsl #6
   13864:	andeq	r4, r1, r0, lsl #6
   13868:	andeq	r4, r1, r0, lsl #6
   1386c:	andeq	r4, r1, r0, lsl #6
   13870:	andeq	r3, r1, ip, ror r8
   13874:	andeq	r3, r1, ip, ror r8
   13878:	andeq	r3, r1, ip, ror r8
   1387c:	ldr	r3, [sp, #32]
   13880:	cmp	r3, #0
   13884:	bne	1456c <__assert_fail@plt+0x3468>
   13888:	cmp	r9, fp
   1388c:	movhi	r3, #63	; 0x3f
   13890:	strbhi	r3, [r8, fp]
   13894:	add	r3, fp, #1
   13898:	cmp	r9, r3
   1389c:	movhi	r0, #34	; 0x22
   138a0:	strbhi	r0, [r8, r3]
   138a4:	add	r3, fp, #2
   138a8:	cmp	r9, r3
   138ac:	movhi	r0, #34	; 0x22
   138b0:	strbhi	r0, [r8, r3]
   138b4:	add	r3, fp, #3
   138b8:	cmp	r9, r3
   138bc:	movhi	r0, #63	; 0x3f
   138c0:	strbhi	r0, [r8, r3]
   138c4:	add	fp, fp, #4
   138c8:	ldr	r3, [sp, #32]
   138cc:	mov	r5, r3
   138d0:	mov	r4, r1
   138d4:	mov	r6, r2
   138d8:	b	13940 <__assert_fail@plt+0x283c>
   138dc:	mov	r3, #0
   138e0:	str	r3, [sp, #44]	; 0x2c
   138e4:	mov	r4, #8
   138e8:	mov	r3, #98	; 0x62
   138ec:	b	1392c <__assert_fail@plt+0x2828>
   138f0:	mov	r3, #0
   138f4:	str	r3, [sp, #44]	; 0x2c
   138f8:	mov	r4, #12
   138fc:	mov	r3, #102	; 0x66
   13900:	b	1392c <__assert_fail@plt+0x2828>
   13904:	mov	r3, #0
   13908:	str	r3, [sp, #44]	; 0x2c
   1390c:	mov	r4, #13
   13910:	mov	r3, #114	; 0x72
   13914:	ldr	r2, [sp, #32]
   13918:	cmp	sl, #2
   1391c:	movne	r2, #0
   13920:	andeq	r2, r2, #1
   13924:	cmp	r2, #0
   13928:	bne	13d4c <__assert_fail@plt+0x2c48>
   1392c:	ldr	r2, [sp, #28]
   13930:	cmp	r2, #0
   13934:	bne	14334 <__assert_fail@plt+0x3230>
   13938:	mov	r5, r2
   1393c:	mov	r3, r2
   13940:	ldr	r2, [sp, #28]
   13944:	eor	r2, r2, #1
   13948:	cmp	sl, #2
   1394c:	orreq	r2, r2, #1
   13950:	eor	r2, r2, #1
   13954:	ldr	r1, [sp, #32]
   13958:	orr	r2, r1, r2
   1395c:	tst	r2, #255	; 0xff
   13960:	beq	1398c <__assert_fail@plt+0x2888>
   13964:	ldr	r2, [sp, #160]	; 0xa0
   13968:	cmp	r2, #0
   1396c:	beq	1398c <__assert_fail@plt+0x2888>
   13970:	ubfx	r1, r4, #5, #8
   13974:	and	r2, r4, #31
   13978:	ldr	r0, [sp, #160]	; 0xa0
   1397c:	ldr	r1, [r0, r1, lsl #2]
   13980:	lsr	r2, r1, r2
   13984:	tst	r2, #1
   13988:	bne	13998 <__assert_fail@plt+0x2894>
   1398c:	ldr	r2, [sp, #44]	; 0x2c
   13990:	cmp	r2, #0
   13994:	beq	13cec <__assert_fail@plt+0x2be8>
   13998:	ldr	r3, [sp, #32]
   1399c:	cmp	r3, #0
   139a0:	bne	144ec <__assert_fail@plt+0x33e8>
   139a4:	ldr	r3, [sp, #36]	; 0x24
   139a8:	eor	r3, r3, #1
   139ac:	cmp	sl, #2
   139b0:	movne	r3, #0
   139b4:	andeq	r3, r3, #1
   139b8:	cmp	r3, #0
   139bc:	beq	139f4 <__assert_fail@plt+0x28f0>
   139c0:	cmp	r9, fp
   139c4:	movhi	r2, #39	; 0x27
   139c8:	strbhi	r2, [r8, fp]
   139cc:	add	r2, fp, #1
   139d0:	cmp	r9, r2
   139d4:	movhi	r1, #36	; 0x24
   139d8:	strbhi	r1, [r8, r2]
   139dc:	add	r2, fp, #2
   139e0:	cmp	r9, r2
   139e4:	movhi	r1, #39	; 0x27
   139e8:	strbhi	r1, [r8, r2]
   139ec:	add	fp, fp, #3
   139f0:	str	r3, [sp, #36]	; 0x24
   139f4:	cmp	r9, fp
   139f8:	movhi	r3, #92	; 0x5c
   139fc:	strbhi	r3, [r8, fp]
   13a00:	add	fp, fp, #1
   13a04:	cmp	fp, r9
   13a08:	strbcc	r4, [r8, fp]
   13a0c:	add	fp, fp, #1
   13a10:	cmp	r5, #0
   13a14:	ldr	r3, [sp, #40]	; 0x28
   13a18:	moveq	r3, r5
   13a1c:	str	r3, [sp, #40]	; 0x28
   13a20:	add	r6, r6, #1
   13a24:	ldr	r3, [sp, #24]
   13a28:	cmn	r3, #1
   13a2c:	beq	1435c <__assert_fail@plt+0x3258>
   13a30:	ldr	r3, [sp, #24]
   13a34:	subs	r5, r3, r6
   13a38:	movne	r5, #1
   13a3c:	cmp	r5, #0
   13a40:	beq	14370 <__assert_fail@plt+0x326c>
   13a44:	ldr	r3, [sp, #28]
   13a48:	cmp	sl, #2
   13a4c:	moveq	r3, #0
   13a50:	andne	r3, r3, #1
   13a54:	str	r3, [sp, #56]	; 0x38
   13a58:	ldr	r2, [sp, #52]	; 0x34
   13a5c:	adds	r7, r2, #0
   13a60:	movne	r7, #1
   13a64:	ands	r3, r3, r7
   13a68:	str	r3, [sp, #44]	; 0x2c
   13a6c:	bne	1338c <__assert_fail@plt+0x2288>
   13a70:	ldr	r3, [sp, #48]	; 0x30
   13a74:	ldrb	r4, [r3, r6]
   13a78:	cmp	r4, #126	; 0x7e
   13a7c:	ldrls	pc, [pc, r4, lsl #2]
   13a80:	b	13eb8 <__assert_fail@plt+0x2db4>
   13a84:	andeq	r3, r1, r0, lsl r6
   13a88:			; <UNDEFINED> instruction: 0x00013eb8
   13a8c:			; <UNDEFINED> instruction: 0x00013eb8
   13a90:			; <UNDEFINED> instruction: 0x00013eb8
   13a94:			; <UNDEFINED> instruction: 0x00013eb8
   13a98:			; <UNDEFINED> instruction: 0x00013eb8
   13a9c:			; <UNDEFINED> instruction: 0x00013eb8
   13aa0:	andeq	r3, r1, r8, asr sp
   13aa4:	andeq	r3, r1, r4, ror #17
   13aa8:	andeq	r3, r1, r8, lsl #25
   13aac:	andeq	r3, r1, ip, lsr #26
   13ab0:	muleq	r1, ip, ip
   13ab4:	strdeq	r3, [r1], -r8
   13ab8:	andeq	r3, r1, ip, lsl #18
   13abc:			; <UNDEFINED> instruction: 0x00013eb8
   13ac0:			; <UNDEFINED> instruction: 0x00013eb8
   13ac4:			; <UNDEFINED> instruction: 0x00013eb8
   13ac8:			; <UNDEFINED> instruction: 0x00013eb8
   13acc:			; <UNDEFINED> instruction: 0x00013eb8
   13ad0:			; <UNDEFINED> instruction: 0x00013eb8
   13ad4:			; <UNDEFINED> instruction: 0x00013eb8
   13ad8:			; <UNDEFINED> instruction: 0x00013eb8
   13adc:			; <UNDEFINED> instruction: 0x00013eb8
   13ae0:			; <UNDEFINED> instruction: 0x00013eb8
   13ae4:			; <UNDEFINED> instruction: 0x00013eb8
   13ae8:			; <UNDEFINED> instruction: 0x00013eb8
   13aec:			; <UNDEFINED> instruction: 0x00013eb8
   13af0:			; <UNDEFINED> instruction: 0x00013eb8
   13af4:			; <UNDEFINED> instruction: 0x00013eb8
   13af8:			; <UNDEFINED> instruction: 0x00013eb8
   13afc:			; <UNDEFINED> instruction: 0x00013eb8
   13b00:			; <UNDEFINED> instruction: 0x00013eb8
   13b04:	ldrdeq	r3, [r1], -r4
   13b08:	ldrdeq	r3, [r1], -r0
   13b0c:	ldrdeq	r3, [r1], -r0
   13b10:	muleq	r1, r0, sp
   13b14:	ldrdeq	r3, [r1], -r0
   13b18:	ldrdeq	r4, [r1], -r8
   13b1c:	ldrdeq	r3, [r1], -r0
   13b20:	andeq	r3, r1, r8, lsl lr
   13b24:	ldrdeq	r3, [r1], -r0
   13b28:	ldrdeq	r3, [r1], -r0
   13b2c:	ldrdeq	r3, [r1], -r0
   13b30:	ldrdeq	r4, [r1], -r8
   13b34:	ldrdeq	r4, [r1], -r8
   13b38:	ldrdeq	r4, [r1], -r8
   13b3c:	ldrdeq	r4, [r1], -r8
   13b40:	ldrdeq	r4, [r1], -r8
   13b44:	ldrdeq	r4, [r1], -r8
   13b48:	ldrdeq	r4, [r1], -r8
   13b4c:	ldrdeq	r4, [r1], -r8
   13b50:	ldrdeq	r4, [r1], -r8
   13b54:	ldrdeq	r4, [r1], -r8
   13b58:	ldrdeq	r4, [r1], -r8
   13b5c:	ldrdeq	r4, [r1], -r8
   13b60:	ldrdeq	r4, [r1], -r8
   13b64:	ldrdeq	r4, [r1], -r8
   13b68:	ldrdeq	r4, [r1], -r8
   13b6c:	ldrdeq	r4, [r1], -r8
   13b70:	ldrdeq	r3, [r1], -r0
   13b74:	ldrdeq	r3, [r1], -r0
   13b78:	ldrdeq	r3, [r1], -r0
   13b7c:	ldrdeq	r3, [r1], -r0
   13b80:	andeq	r3, r1, r8, ror r7
   13b84:			; <UNDEFINED> instruction: 0x00013eb8
   13b88:	ldrdeq	r4, [r1], -r8
   13b8c:	ldrdeq	r4, [r1], -r8
   13b90:	ldrdeq	r4, [r1], -r8
   13b94:	ldrdeq	r4, [r1], -r8
   13b98:	ldrdeq	r4, [r1], -r8
   13b9c:	ldrdeq	r4, [r1], -r8
   13ba0:	ldrdeq	r4, [r1], -r8
   13ba4:	ldrdeq	r4, [r1], -r8
   13ba8:	ldrdeq	r4, [r1], -r8
   13bac:	ldrdeq	r4, [r1], -r8
   13bb0:	ldrdeq	r4, [r1], -r8
   13bb4:	ldrdeq	r4, [r1], -r8
   13bb8:	ldrdeq	r4, [r1], -r8
   13bbc:	ldrdeq	r4, [r1], -r8
   13bc0:	ldrdeq	r4, [r1], -r8
   13bc4:	ldrdeq	r4, [r1], -r8
   13bc8:	ldrdeq	r4, [r1], -r8
   13bcc:	ldrdeq	r4, [r1], -r8
   13bd0:	ldrdeq	r4, [r1], -r8
   13bd4:	ldrdeq	r4, [r1], -r8
   13bd8:	ldrdeq	r4, [r1], -r8
   13bdc:	ldrdeq	r4, [r1], -r8
   13be0:	ldrdeq	r4, [r1], -r8
   13be4:	ldrdeq	r4, [r1], -r8
   13be8:	ldrdeq	r4, [r1], -r8
   13bec:	ldrdeq	r4, [r1], -r8
   13bf0:	ldrdeq	r3, [r1], -r0
   13bf4:			; <UNDEFINED> instruction: 0x00013cb0
   13bf8:	ldrdeq	r4, [r1], -r8
   13bfc:	ldrdeq	r3, [r1], -r0
   13c00:	ldrdeq	r4, [r1], -r8
   13c04:	ldrdeq	r3, [r1], -r0
   13c08:	ldrdeq	r4, [r1], -r8
   13c0c:	ldrdeq	r4, [r1], -r8
   13c10:	ldrdeq	r4, [r1], -r8
   13c14:	ldrdeq	r4, [r1], -r8
   13c18:	ldrdeq	r4, [r1], -r8
   13c1c:	ldrdeq	r4, [r1], -r8
   13c20:	ldrdeq	r4, [r1], -r8
   13c24:	ldrdeq	r4, [r1], -r8
   13c28:	ldrdeq	r4, [r1], -r8
   13c2c:	ldrdeq	r4, [r1], -r8
   13c30:	ldrdeq	r4, [r1], -r8
   13c34:	ldrdeq	r4, [r1], -r8
   13c38:	ldrdeq	r4, [r1], -r8
   13c3c:	ldrdeq	r4, [r1], -r8
   13c40:	ldrdeq	r4, [r1], -r8
   13c44:	ldrdeq	r4, [r1], -r8
   13c48:	ldrdeq	r4, [r1], -r8
   13c4c:	ldrdeq	r4, [r1], -r8
   13c50:	ldrdeq	r4, [r1], -r8
   13c54:	ldrdeq	r4, [r1], -r8
   13c58:	ldrdeq	r4, [r1], -r8
   13c5c:	ldrdeq	r4, [r1], -r8
   13c60:	ldrdeq	r4, [r1], -r8
   13c64:	ldrdeq	r4, [r1], -r8
   13c68:	ldrdeq	r4, [r1], -r8
   13c6c:	ldrdeq	r4, [r1], -r8
   13c70:	andeq	r3, r1, r0, ror sp
   13c74:	ldrdeq	r3, [r1], -r0
   13c78:	andeq	r3, r1, r0, ror sp
   13c7c:	muleq	r1, r0, sp
   13c80:	mov	r3, #0
   13c84:	str	r3, [sp, #44]	; 0x2c
   13c88:	mov	r4, #9
   13c8c:	mov	r3, #116	; 0x74
   13c90:	b	13914 <__assert_fail@plt+0x2810>
   13c94:	mov	r3, #0
   13c98:	str	r3, [sp, #44]	; 0x2c
   13c9c:	mov	r4, #11
   13ca0:	mov	r3, #118	; 0x76
   13ca4:	b	1392c <__assert_fail@plt+0x2828>
   13ca8:	mov	r3, #0
   13cac:	str	r3, [sp, #44]	; 0x2c
   13cb0:	cmp	sl, #2
   13cb4:	beq	13cd8 <__assert_fail@plt+0x2bd4>
   13cb8:	ldr	r3, [sp, #28]
   13cbc:	ldr	r2, [sp, #32]
   13cc0:	and	r3, r3, r2
   13cc4:	tst	r7, r3
   13cc8:	bne	1434c <__assert_fail@plt+0x3248>
   13ccc:	mov	r4, #92	; 0x5c
   13cd0:	mov	r3, r4
   13cd4:	b	1392c <__assert_fail@plt+0x2828>
   13cd8:	ldr	r3, [sp, #32]
   13cdc:	cmp	r3, #0
   13ce0:	bne	144d4 <__assert_fail@plt+0x33d0>
   13ce4:	mov	r5, r3
   13ce8:	mov	r4, #92	; 0x5c
   13cec:	eor	r3, r3, #1
   13cf0:	ldr	r2, [sp, #36]	; 0x24
   13cf4:	and	r3, r3, r2
   13cf8:	tst	r3, #255	; 0xff
   13cfc:	beq	13a04 <__assert_fail@plt+0x2900>
   13d00:	cmp	r9, fp
   13d04:	movhi	r3, #39	; 0x27
   13d08:	strbhi	r3, [r8, fp]
   13d0c:	add	r3, fp, #1
   13d10:	cmp	r9, r3
   13d14:	movhi	r2, #39	; 0x27
   13d18:	strbhi	r2, [r8, r3]
   13d1c:	add	fp, fp, #2
   13d20:	mov	r3, #0
   13d24:	str	r3, [sp, #36]	; 0x24
   13d28:	b	13a04 <__assert_fail@plt+0x2900>
   13d2c:	mov	r3, #110	; 0x6e
   13d30:	b	13914 <__assert_fail@plt+0x2810>
   13d34:	mov	r3, #110	; 0x6e
   13d38:	b	13914 <__assert_fail@plt+0x2810>
   13d3c:	mov	r3, #0
   13d40:	str	r3, [sp, #44]	; 0x2c
   13d44:	mov	r3, #110	; 0x6e
   13d48:	b	13914 <__assert_fail@plt+0x2810>
   13d4c:	mov	r8, r9
   13d50:	mov	r7, #2
   13d54:	b	144f4 <__assert_fail@plt+0x33f0>
   13d58:	mov	r3, #97	; 0x61
   13d5c:	b	1392c <__assert_fail@plt+0x2828>
   13d60:	mov	r3, #97	; 0x61
   13d64:	b	1392c <__assert_fail@plt+0x2828>
   13d68:	mov	r3, #0
   13d6c:	str	r3, [sp, #44]	; 0x2c
   13d70:	ldr	r3, [sp, #24]
   13d74:	cmn	r3, #1
   13d78:	beq	13da4 <__assert_fail@plt+0x2ca0>
   13d7c:	ldr	r3, [sp, #24]
   13d80:	subs	r3, r3, #1
   13d84:	movne	r3, #1
   13d88:	cmp	r3, #0
   13d8c:	bne	1430c <__assert_fail@plt+0x3208>
   13d90:	cmp	r6, #0
   13d94:	beq	13dd4 <__assert_fail@plt+0x2cd0>
   13d98:	mov	r5, #0
   13d9c:	mov	r3, r5
   13da0:	b	13940 <__assert_fail@plt+0x283c>
   13da4:	ldr	r3, [sp, #48]	; 0x30
   13da8:	ldrb	r3, [r3, #1]
   13dac:	adds	r3, r3, #0
   13db0:	movne	r3, #1
   13db4:	b	13d88 <__assert_fail@plt+0x2c84>
   13db8:	mov	r3, #0
   13dbc:	str	r3, [sp, #44]	; 0x2c
   13dc0:	b	13d90 <__assert_fail@plt+0x2c8c>
   13dc4:	mov	r3, #0
   13dc8:	str	r3, [sp, #44]	; 0x2c
   13dcc:	b	13dd4 <__assert_fail@plt+0x2cd0>
   13dd0:	ldr	r5, [sp, #44]	; 0x2c
   13dd4:	ldr	r3, [sp, #32]
   13dd8:	cmp	sl, #2
   13ddc:	movne	r3, #0
   13de0:	andeq	r3, r3, #1
   13de4:	cmp	r3, #0
   13de8:	beq	13940 <__assert_fail@plt+0x283c>
   13dec:	mov	r8, r9
   13df0:	mov	r7, #2
   13df4:	b	144f4 <__assert_fail@plt+0x33f0>
   13df8:	ldr	r5, [sp, #32]
   13dfc:	b	13dd4 <__assert_fail@plt+0x2cd0>
   13e00:	mov	r3, #0
   13e04:	str	r3, [sp, #44]	; 0x2c
   13e08:	mov	r5, r3
   13e0c:	b	13dd4 <__assert_fail@plt+0x2cd0>
   13e10:	mov	r3, #0
   13e14:	str	r3, [sp, #44]	; 0x2c
   13e18:	cmp	sl, #2
   13e1c:	strne	r5, [sp, #68]	; 0x44
   13e20:	movne	r3, #0
   13e24:	movne	r4, #39	; 0x27
   13e28:	bne	13940 <__assert_fail@plt+0x283c>
   13e2c:	ldr	r3, [sp, #32]
   13e30:	cmp	r3, #0
   13e34:	bne	144e0 <__assert_fail@plt+0x33dc>
   13e38:	ldr	r3, [sp, #72]	; 0x48
   13e3c:	clz	r3, r3
   13e40:	lsr	r3, r3, #5
   13e44:	cmp	r9, #0
   13e48:	moveq	r3, #0
   13e4c:	cmp	r3, #0
   13e50:	movne	r3, #0
   13e54:	bne	13e7c <__assert_fail@plt+0x2d78>
   13e58:	cmp	r9, fp
   13e5c:	movhi	r3, #39	; 0x27
   13e60:	strbhi	r3, [r8, fp]
   13e64:	add	r3, fp, #1
   13e68:	cmp	r9, r3
   13e6c:	movhi	r2, #92	; 0x5c
   13e70:	strbhi	r2, [r8, r3]
   13e74:	mov	r3, r9
   13e78:	ldr	r9, [sp, #72]	; 0x48
   13e7c:	add	r2, fp, #2
   13e80:	cmp	r2, r3
   13e84:	movcc	r1, #39	; 0x27
   13e88:	strbcc	r1, [r8, r2]
   13e8c:	add	fp, fp, #3
   13e90:	str	r5, [sp, #68]	; 0x44
   13e94:	ldr	r2, [sp, #32]
   13e98:	str	r2, [sp, #36]	; 0x24
   13e9c:	str	r9, [sp, #72]	; 0x48
   13ea0:	mov	r9, r3
   13ea4:	mov	r4, #39	; 0x27
   13ea8:	mov	r3, #0
   13eac:	b	1398c <__assert_fail@plt+0x2888>
   13eb0:	mov	r3, #0
   13eb4:	str	r3, [sp, #44]	; 0x2c
   13eb8:	ldr	r7, [sp, #76]	; 0x4c
   13ebc:	cmp	r7, #1
   13ec0:	bne	13ef8 <__assert_fail@plt+0x2df4>
   13ec4:	bl	10fc0 <__ctype_b_loc@plt>
   13ec8:	ldr	r2, [r0]
   13ecc:	lsl	r3, r4, #1
   13ed0:	ldrh	r5, [r2, r3]
   13ed4:	ubfx	r5, r5, #14, #1
   13ed8:	mov	ip, r7
   13edc:	eor	r3, r5, #1
   13ee0:	ldr	r2, [sp, #28]
   13ee4:	and	r3, r3, r2
   13ee8:	ands	r3, r3, #255	; 0xff
   13eec:	beq	13940 <__assert_fail@plt+0x283c>
   13ef0:	mov	r5, #0
   13ef4:	b	14154 <__assert_fail@plt+0x3050>
   13ef8:	mov	r2, #0
   13efc:	mov	r3, #0
   13f00:	strd	r2, [sp, #104]	; 0x68
   13f04:	ldr	r3, [sp, #24]
   13f08:	cmn	r3, #1
   13f0c:	beq	13f30 <__assert_fail@plt+0x2e2c>
   13f10:	mov	r3, #0
   13f14:	str	r4, [sp, #88]	; 0x58
   13f18:	str	fp, [sp, #92]	; 0x5c
   13f1c:	str	r8, [sp, #56]	; 0x38
   13f20:	mov	r8, r3
   13f24:	str	r9, [sp, #84]	; 0x54
   13f28:	ldr	r9, [sp, #48]	; 0x30
   13f2c:	b	1407c <__assert_fail@plt+0x2f78>
   13f30:	ldr	r0, [sp, #48]	; 0x30
   13f34:	bl	10fd8 <strlen@plt>
   13f38:	str	r0, [sp, #24]
   13f3c:	b	13f10 <__assert_fail@plt+0x2e0c>
   13f40:	mov	r1, fp
   13f44:	ldr	r4, [sp, #88]	; 0x58
   13f48:	mov	r2, r8
   13f4c:	mov	ip, r8
   13f50:	ldr	fp, [sp, #92]	; 0x5c
   13f54:	ldr	r8, [sp, #56]	; 0x38
   13f58:	ldr	r9, [sp, #84]	; 0x54
   13f5c:	ldr	r0, [sp, #24]
   13f60:	cmp	r7, r0
   13f64:	bcs	1411c <__assert_fail@plt+0x3018>
   13f68:	ldrb	r3, [r1]
   13f6c:	cmp	r3, #0
   13f70:	beq	14124 <__assert_fail@plt+0x3020>
   13f74:	mov	r3, r1
   13f78:	add	r2, r2, #1
   13f7c:	add	r1, r6, r2
   13f80:	cmp	r0, r1
   13f84:	bls	1412c <__assert_fail@plt+0x3028>
   13f88:	ldrb	r1, [r3, #1]!
   13f8c:	cmp	r1, #0
   13f90:	bne	13f78 <__assert_fail@plt+0x2e74>
   13f94:	mov	ip, r2
   13f98:	mov	r5, #0
   13f9c:	b	1414c <__assert_fail@plt+0x3048>
   13fa0:	ldr	r3, [sp, #56]	; 0x38
   13fa4:	str	r3, [sp, #64]	; 0x40
   13fa8:	ldr	r8, [sp, #84]	; 0x54
   13fac:	mov	r7, #2
   13fb0:	b	144f4 <__assert_fail@plt+0x33f0>
   13fb4:	cmp	r2, r7
   13fb8:	beq	14058 <__assert_fail@plt+0x2f54>
   13fbc:	ldrb	r3, [r2], #1
   13fc0:	sub	r3, r3, #91	; 0x5b
   13fc4:	cmp	r3, #33	; 0x21
   13fc8:	ldrls	pc, [pc, r3, lsl #2]
   13fcc:	b	13fb4 <__assert_fail@plt+0x2eb0>
   13fd0:	andeq	r3, r1, r0, lsr #31
   13fd4:	andeq	r3, r1, r0, lsr #31
   13fd8:			; <UNDEFINED> instruction: 0x00013fb4
   13fdc:	andeq	r3, r1, r0, lsr #31
   13fe0:			; <UNDEFINED> instruction: 0x00013fb4
   13fe4:	andeq	r3, r1, r0, lsr #31
   13fe8:			; <UNDEFINED> instruction: 0x00013fb4
   13fec:			; <UNDEFINED> instruction: 0x00013fb4
   13ff0:			; <UNDEFINED> instruction: 0x00013fb4
   13ff4:			; <UNDEFINED> instruction: 0x00013fb4
   13ff8:			; <UNDEFINED> instruction: 0x00013fb4
   13ffc:			; <UNDEFINED> instruction: 0x00013fb4
   14000:			; <UNDEFINED> instruction: 0x00013fb4
   14004:			; <UNDEFINED> instruction: 0x00013fb4
   14008:			; <UNDEFINED> instruction: 0x00013fb4
   1400c:			; <UNDEFINED> instruction: 0x00013fb4
   14010:			; <UNDEFINED> instruction: 0x00013fb4
   14014:			; <UNDEFINED> instruction: 0x00013fb4
   14018:			; <UNDEFINED> instruction: 0x00013fb4
   1401c:			; <UNDEFINED> instruction: 0x00013fb4
   14020:			; <UNDEFINED> instruction: 0x00013fb4
   14024:			; <UNDEFINED> instruction: 0x00013fb4
   14028:			; <UNDEFINED> instruction: 0x00013fb4
   1402c:			; <UNDEFINED> instruction: 0x00013fb4
   14030:			; <UNDEFINED> instruction: 0x00013fb4
   14034:			; <UNDEFINED> instruction: 0x00013fb4
   14038:			; <UNDEFINED> instruction: 0x00013fb4
   1403c:			; <UNDEFINED> instruction: 0x00013fb4
   14040:			; <UNDEFINED> instruction: 0x00013fb4
   14044:			; <UNDEFINED> instruction: 0x00013fb4
   14048:			; <UNDEFINED> instruction: 0x00013fb4
   1404c:			; <UNDEFINED> instruction: 0x00013fb4
   14050:			; <UNDEFINED> instruction: 0x00013fb4
   14054:	andeq	r3, r1, r0, lsr #31
   14058:	ldr	r0, [sp, #100]	; 0x64
   1405c:	bl	10f18 <iswprint@plt>
   14060:	cmp	r0, #0
   14064:	moveq	r5, #0
   14068:	add	r8, r8, r4
   1406c:	add	r0, sp, #104	; 0x68
   14070:	bl	10ed0 <mbsinit@plt>
   14074:	cmp	r0, #0
   14078:	bne	140e8 <__assert_fail@plt+0x2fe4>
   1407c:	add	r7, r6, r8
   14080:	add	fp, r9, r7
   14084:	add	r3, sp, #104	; 0x68
   14088:	ldr	r2, [sp, #24]
   1408c:	sub	r2, r2, r7
   14090:	mov	r1, fp
   14094:	add	r0, sp, #100	; 0x64
   14098:	bl	16b4c <__assert_fail@plt+0x5a48>
   1409c:	subs	r4, r0, #0
   140a0:	beq	14138 <__assert_fail@plt+0x3034>
   140a4:	cmn	r4, #1
   140a8:	beq	14100 <__assert_fail@plt+0x2ffc>
   140ac:	cmn	r4, #2
   140b0:	beq	13f40 <__assert_fail@plt+0x2e3c>
   140b4:	ldr	r3, [sp, #32]
   140b8:	cmp	sl, #2
   140bc:	movne	r3, #0
   140c0:	andeq	r3, r3, #1
   140c4:	cmp	r3, #0
   140c8:	beq	14058 <__assert_fail@plt+0x2f54>
   140cc:	cmp	r4, #1
   140d0:	bls	14058 <__assert_fail@plt+0x2f54>
   140d4:	add	r2, r7, #1
   140d8:	add	r2, r9, r2
   140dc:	add	r3, r9, r4
   140e0:	add	r7, r3, r7
   140e4:	b	13fbc <__assert_fail@plt+0x2eb8>
   140e8:	ldr	r4, [sp, #88]	; 0x58
   140ec:	mov	ip, r8
   140f0:	ldr	fp, [sp, #92]	; 0x5c
   140f4:	ldr	r8, [sp, #56]	; 0x38
   140f8:	ldr	r9, [sp, #84]	; 0x54
   140fc:	b	1414c <__assert_fail@plt+0x3048>
   14100:	ldr	r4, [sp, #88]	; 0x58
   14104:	mov	ip, r8
   14108:	ldr	fp, [sp, #92]	; 0x5c
   1410c:	ldr	r8, [sp, #56]	; 0x38
   14110:	ldr	r9, [sp, #84]	; 0x54
   14114:	mov	r5, #0
   14118:	b	1414c <__assert_fail@plt+0x3048>
   1411c:	mov	r5, #0
   14120:	b	1414c <__assert_fail@plt+0x3048>
   14124:	mov	r5, #0
   14128:	b	1414c <__assert_fail@plt+0x3048>
   1412c:	mov	ip, r2
   14130:	mov	r5, #0
   14134:	b	1414c <__assert_fail@plt+0x3048>
   14138:	ldr	r4, [sp, #88]	; 0x58
   1413c:	mov	ip, r8
   14140:	ldr	fp, [sp, #92]	; 0x5c
   14144:	ldr	r8, [sp, #56]	; 0x38
   14148:	ldr	r9, [sp, #84]	; 0x54
   1414c:	cmp	ip, #1
   14150:	bls	13edc <__assert_fail@plt+0x2dd8>
   14154:	add	lr, r6, ip
   14158:	ldr	r3, [sp, #48]	; 0x30
   1415c:	add	r1, r3, r6
   14160:	mov	r3, #0
   14164:	eor	r0, r5, #1
   14168:	ldr	r2, [sp, #28]
   1416c:	and	r0, r0, r2
   14170:	uxtb	r0, r0
   14174:	str	r0, [sp, #56]	; 0x38
   14178:	mov	r7, #92	; 0x5c
   1417c:	ldr	ip, [sp, #36]	; 0x24
   14180:	str	r5, [sp, #84]	; 0x54
   14184:	ldr	r2, [sp, #44]	; 0x2c
   14188:	b	141f8 <__assert_fail@plt+0x30f4>
   1418c:	cmp	r2, #0
   14190:	beq	141a0 <__assert_fail@plt+0x309c>
   14194:	cmp	r9, fp
   14198:	strbhi	r7, [r8, fp]
   1419c:	add	fp, fp, #1
   141a0:	add	r5, r6, #1
   141a4:	cmp	r5, lr
   141a8:	bcs	142b4 <__assert_fail@plt+0x31b0>
   141ac:	eor	r2, r3, #1
   141b0:	and	r2, r2, ip
   141b4:	ands	r2, r2, #255	; 0xff
   141b8:	beq	142d0 <__assert_fail@plt+0x31cc>
   141bc:	cmp	r9, fp
   141c0:	movhi	r2, #39	; 0x27
   141c4:	strbhi	r2, [r8, fp]
   141c8:	add	r2, fp, #1
   141cc:	cmp	r9, r2
   141d0:	movhi	ip, #39	; 0x27
   141d4:	strbhi	ip, [r8, r2]
   141d8:	add	fp, fp, #2
   141dc:	ldr	ip, [sp, #56]	; 0x38
   141e0:	mov	r2, ip
   141e4:	mov	r6, r5
   141e8:	cmp	r9, fp
   141ec:	strbhi	r4, [r8, fp]
   141f0:	add	fp, fp, #1
   141f4:	ldrb	r4, [r1, #1]!
   141f8:	cmp	r0, #0
   141fc:	beq	1418c <__assert_fail@plt+0x3088>
   14200:	ldr	r3, [sp, #32]
   14204:	cmp	r3, #0
   14208:	bne	1449c <__assert_fail@plt+0x3398>
   1420c:	eor	r3, ip, #1
   14210:	cmp	sl, #2
   14214:	movne	r3, #0
   14218:	andeq	r3, r3, #1
   1421c:	cmp	r3, #0
   14220:	beq	14258 <__assert_fail@plt+0x3154>
   14224:	cmp	r9, fp
   14228:	movhi	ip, #39	; 0x27
   1422c:	strbhi	ip, [r8, fp]
   14230:	add	ip, fp, #1
   14234:	cmp	r9, ip
   14238:	movhi	r5, #36	; 0x24
   1423c:	strbhi	r5, [r8, ip]
   14240:	add	ip, fp, #2
   14244:	cmp	r9, ip
   14248:	movhi	r5, #39	; 0x27
   1424c:	strbhi	r5, [r8, ip]
   14250:	add	fp, fp, #3
   14254:	mov	ip, r3
   14258:	cmp	r9, fp
   1425c:	strbhi	r7, [r8, fp]
   14260:	add	r3, fp, #1
   14264:	cmp	r9, r3
   14268:	bls	14278 <__assert_fail@plt+0x3174>
   1426c:	lsr	r5, r4, #6
   14270:	add	r5, r5, #48	; 0x30
   14274:	strb	r5, [r8, r3]
   14278:	add	r3, fp, #2
   1427c:	cmp	r9, r3
   14280:	bls	14290 <__assert_fail@plt+0x318c>
   14284:	ubfx	r5, r4, #3, #3
   14288:	add	r5, r5, #48	; 0x30
   1428c:	strb	r5, [r8, r3]
   14290:	add	fp, fp, #3
   14294:	and	r4, r4, #7
   14298:	add	r4, r4, #48	; 0x30
   1429c:	add	r5, r6, #1
   142a0:	cmp	r5, lr
   142a4:	bcs	142c0 <__assert_fail@plt+0x31bc>
   142a8:	ldr	r3, [sp, #56]	; 0x38
   142ac:	mov	r6, r5
   142b0:	b	141e8 <__assert_fail@plt+0x30e4>
   142b4:	str	ip, [sp, #36]	; 0x24
   142b8:	ldr	r5, [sp, #84]	; 0x54
   142bc:	b	13cec <__assert_fail@plt+0x2be8>
   142c0:	str	ip, [sp, #36]	; 0x24
   142c4:	ldr	r5, [sp, #84]	; 0x54
   142c8:	mov	r3, r0
   142cc:	b	13cec <__assert_fail@plt+0x2be8>
   142d0:	mov	r6, r5
   142d4:	b	141e8 <__assert_fail@plt+0x30e4>
   142d8:	ldr	r3, [sp, #44]	; 0x2c
   142dc:	b	13940 <__assert_fail@plt+0x283c>
   142e0:	mov	r5, #0
   142e4:	mov	r3, r5
   142e8:	mov	r4, #63	; 0x3f
   142ec:	b	13940 <__assert_fail@plt+0x283c>
   142f0:	mov	r5, #0
   142f4:	mov	r3, r5
   142f8:	mov	r4, #63	; 0x3f
   142fc:	b	13940 <__assert_fail@plt+0x283c>
   14300:	mov	r5, #0
   14304:	mov	r3, r5
   14308:	b	13940 <__assert_fail@plt+0x283c>
   1430c:	mov	r5, #0
   14310:	mov	r3, r5
   14314:	b	13940 <__assert_fail@plt+0x283c>
   14318:	ldr	r5, [sp, #44]	; 0x2c
   1431c:	ldr	r3, [sp, #32]
   14320:	b	13940 <__assert_fail@plt+0x283c>
   14324:	ldr	r5, [sp, #44]	; 0x2c
   14328:	mov	r3, #0
   1432c:	str	r3, [sp, #44]	; 0x2c
   14330:	b	13940 <__assert_fail@plt+0x283c>
   14334:	mov	r4, r3
   14338:	mov	r5, #0
   1433c:	b	13998 <__assert_fail@plt+0x2894>
   14340:	mov	r5, #0
   14344:	mov	r4, #97	; 0x61
   14348:	b	13998 <__assert_fail@plt+0x2894>
   1434c:	mov	r5, #0
   14350:	mov	r3, r5
   14354:	mov	r4, #92	; 0x5c
   14358:	b	13cec <__assert_fail@plt+0x2be8>
   1435c:	ldr	r3, [sp, #48]	; 0x30
   14360:	ldrb	r5, [r3, r6]
   14364:	adds	r5, r5, #0
   14368:	movne	r5, #1
   1436c:	b	13a3c <__assert_fail@plt+0x2938>
   14370:	cmp	sl, #2
   14374:	movne	r3, #0
   14378:	moveq	r3, #1
   1437c:	ldr	r1, [sp, #32]
   14380:	cmp	fp, #0
   14384:	andeq	r2, r3, r1
   14388:	movne	r2, #0
   1438c:	cmp	r2, #0
   14390:	bne	144b0 <__assert_fail@plt+0x33ac>
   14394:	eor	r2, r1, #1
   14398:	uxtb	r2, r2
   1439c:	and	r3, r3, r2
   143a0:	ldr	r1, [sp, #68]	; 0x44
   143a4:	ands	r3, r1, r3
   143a8:	beq	1443c <__assert_fail@plt+0x3338>
   143ac:	ldr	r2, [sp, #40]	; 0x28
   143b0:	cmp	r2, #0
   143b4:	bne	143ec <__assert_fail@plt+0x32e8>
   143b8:	ldr	r2, [sp, #72]	; 0x48
   143bc:	adds	r2, r2, #0
   143c0:	movne	r2, #1
   143c4:	cmp	r9, #0
   143c8:	movne	r2, #0
   143cc:	str	r2, [sp, #68]	; 0x44
   143d0:	mov	sl, #2
   143d4:	ldr	r1, [sp, #40]	; 0x28
   143d8:	str	r1, [sp, #32]
   143dc:	cmp	r2, #0
   143e0:	beq	14430 <__assert_fail@plt+0x332c>
   143e4:	ldr	r9, [sp, #72]	; 0x48
   143e8:	b	13144 <__assert_fail@plt+0x2040>
   143ec:	ldr	r3, [sp, #168]	; 0xa8
   143f0:	str	r3, [sp, #16]
   143f4:	ldr	r3, [sp, #164]	; 0xa4
   143f8:	str	r3, [sp, #12]
   143fc:	ldr	r3, [sp, #160]	; 0xa0
   14400:	str	r3, [sp, #8]
   14404:	ldr	r3, [sp, #156]	; 0x9c
   14408:	str	r3, [sp, #4]
   1440c:	mov	r3, #5
   14410:	str	r3, [sp]
   14414:	ldr	r3, [sp, #24]
   14418:	ldr	r2, [sp, #48]	; 0x30
   1441c:	ldr	r1, [sp, #72]	; 0x48
   14420:	ldr	r0, [sp, #64]	; 0x40
   14424:	bl	130cc <__assert_fail@plt+0x1fc8>
   14428:	mov	fp, r0
   1442c:	b	1454c <__assert_fail@plt+0x3448>
   14430:	mov	r8, r9
   14434:	mov	r2, r3
   14438:	b	14440 <__assert_fail@plt+0x333c>
   1443c:	mov	r8, r9
   14440:	ldr	r3, [sp, #60]	; 0x3c
   14444:	cmp	r3, #0
   14448:	moveq	r2, #0
   1444c:	andne	r2, r2, #1
   14450:	cmp	r2, #0
   14454:	beq	14484 <__assert_fail@plt+0x3380>
   14458:	mov	r2, r3
   1445c:	ldrb	r3, [r3]
   14460:	cmp	r3, #0
   14464:	beq	14484 <__assert_fail@plt+0x3380>
   14468:	ldr	r1, [sp, #64]	; 0x40
   1446c:	cmp	r8, fp
   14470:	strbhi	r3, [r1, fp]
   14474:	add	fp, fp, #1
   14478:	ldrb	r3, [r2, #1]!
   1447c:	cmp	r3, #0
   14480:	bne	1446c <__assert_fail@plt+0x3368>
   14484:	cmp	r8, fp
   14488:	bls	1454c <__assert_fail@plt+0x3448>
   1448c:	mov	r3, #0
   14490:	ldr	r2, [sp, #64]	; 0x40
   14494:	strb	r3, [r2, fp]
   14498:	b	1454c <__assert_fail@plt+0x3448>
   1449c:	mov	r8, r9
   144a0:	mov	r7, sl
   144a4:	ldr	r3, [sp, #32]
   144a8:	str	r3, [sp, #28]
   144ac:	b	144f4 <__assert_fail@plt+0x33f0>
   144b0:	mov	r8, r9
   144b4:	mov	r7, #2
   144b8:	b	144f4 <__assert_fail@plt+0x33f0>
   144bc:	mov	r8, r9
   144c0:	mov	r7, sl
   144c4:	b	144f4 <__assert_fail@plt+0x33f0>
   144c8:	mov	r8, r9
   144cc:	mov	r7, sl
   144d0:	b	144f4 <__assert_fail@plt+0x33f0>
   144d4:	mov	r8, r9
   144d8:	mov	r7, sl
   144dc:	b	144f4 <__assert_fail@plt+0x33f0>
   144e0:	mov	r8, r9
   144e4:	mov	r7, sl
   144e8:	b	144f4 <__assert_fail@plt+0x33f0>
   144ec:	mov	r8, r9
   144f0:	mov	r7, sl
   144f4:	ldr	r3, [sp, #28]
   144f8:	cmp	r7, #2
   144fc:	movne	r3, #0
   14500:	andeq	r3, r3, #1
   14504:	cmp	r3, #0
   14508:	movne	r7, #4
   1450c:	ldr	r3, [sp, #168]	; 0xa8
   14510:	str	r3, [sp, #16]
   14514:	ldr	r3, [sp, #164]	; 0xa4
   14518:	str	r3, [sp, #12]
   1451c:	mov	r3, #0
   14520:	str	r3, [sp, #8]
   14524:	ldr	r3, [sp, #156]	; 0x9c
   14528:	bic	r3, r3, #2
   1452c:	str	r3, [sp, #4]
   14530:	str	r7, [sp]
   14534:	ldr	r3, [sp, #24]
   14538:	ldr	r2, [sp, #48]	; 0x30
   1453c:	mov	r1, r8
   14540:	ldr	r0, [sp, #64]	; 0x40
   14544:	bl	130cc <__assert_fail@plt+0x1fc8>
   14548:	mov	fp, r0
   1454c:	mov	r0, fp
   14550:	add	sp, sp, #116	; 0x74
   14554:	ldrd	r4, [sp]
   14558:	ldrd	r6, [sp, #8]
   1455c:	ldrd	r8, [sp, #16]
   14560:	ldrd	sl, [sp, #24]
   14564:	add	sp, sp, #32
   14568:	pop	{pc}		; (ldr pc, [sp], #4)
   1456c:	mov	r8, r9
   14570:	mov	r7, sl
   14574:	b	1450c <__assert_fail@plt+0x3408>
   14578:	add	fp, fp, #4
   1457c:	str	r3, [sp, #36]	; 0x24
   14580:	mov	r5, #0
   14584:	mov	r4, #48	; 0x30
   14588:	b	13940 <__assert_fail@plt+0x283c>
   1458c:	mov	r3, #1
   14590:	str	r3, [sp, #32]
   14594:	str	r3, [sp, #28]
   14598:	str	r3, [sp, #52]	; 0x34
   1459c:	movw	r3, #30808	; 0x7858
   145a0:	movt	r3, #1
   145a4:	str	r3, [sp, #60]	; 0x3c
   145a8:	mov	fp, #0
   145ac:	mov	sl, #5
   145b0:	b	131a4 <__assert_fail@plt+0x20a0>
   145b4:	ldr	r3, [sp, #48]	; 0x30
   145b8:	ldrb	r4, [r3, r6]
   145bc:	cmp	r4, #126	; 0x7e
   145c0:	ldrls	pc, [pc, r4, lsl #2]
   145c4:	b	13eb0 <__assert_fail@plt+0x2dac>
   145c8:	andeq	r3, r1, r8, lsr r6
   145cc:			; <UNDEFINED> instruction: 0x00013eb0
   145d0:			; <UNDEFINED> instruction: 0x00013eb0
   145d4:			; <UNDEFINED> instruction: 0x00013eb0
   145d8:			; <UNDEFINED> instruction: 0x00013eb0
   145dc:			; <UNDEFINED> instruction: 0x00013eb0
   145e0:			; <UNDEFINED> instruction: 0x00013eb0
   145e4:	andeq	r4, r1, r0, asr #6
   145e8:	ldrdeq	r3, [r1], -ip
   145ec:	andeq	r3, r1, r0, lsl #25
   145f0:	andeq	r3, r1, ip, lsr sp
   145f4:	muleq	r1, r4, ip
   145f8:	strdeq	r3, [r1], -r0
   145fc:	andeq	r3, r1, r4, lsl #18
   14600:			; <UNDEFINED> instruction: 0x00013eb0
   14604:			; <UNDEFINED> instruction: 0x00013eb0
   14608:			; <UNDEFINED> instruction: 0x00013eb0
   1460c:			; <UNDEFINED> instruction: 0x00013eb0
   14610:			; <UNDEFINED> instruction: 0x00013eb0
   14614:			; <UNDEFINED> instruction: 0x00013eb0
   14618:			; <UNDEFINED> instruction: 0x00013eb0
   1461c:			; <UNDEFINED> instruction: 0x00013eb0
   14620:			; <UNDEFINED> instruction: 0x00013eb0
   14624:			; <UNDEFINED> instruction: 0x00013eb0
   14628:			; <UNDEFINED> instruction: 0x00013eb0
   1462c:			; <UNDEFINED> instruction: 0x00013eb0
   14630:			; <UNDEFINED> instruction: 0x00013eb0
   14634:			; <UNDEFINED> instruction: 0x00013eb0
   14638:			; <UNDEFINED> instruction: 0x00013eb0
   1463c:			; <UNDEFINED> instruction: 0x00013eb0
   14640:			; <UNDEFINED> instruction: 0x00013eb0
   14644:			; <UNDEFINED> instruction: 0x00013eb0
   14648:	andeq	r3, r1, r4, asr #27
   1464c:	andeq	r3, r1, r0, lsl #28
   14650:	andeq	r3, r1, r0, lsl #28
   14654:			; <UNDEFINED> instruction: 0x00013db8
   14658:	andeq	r3, r1, r0, lsl #28
   1465c:	andeq	r4, r1, r4, lsr #6
   14660:	andeq	r3, r1, r0, lsl #28
   14664:	andeq	r3, r1, r0, lsl lr
   14668:	andeq	r3, r1, r0, lsl #28
   1466c:	andeq	r3, r1, r0, lsl #28
   14670:	andeq	r3, r1, r0, lsl #28
   14674:	andeq	r4, r1, r4, lsr #6
   14678:	andeq	r4, r1, r4, lsr #6
   1467c:	andeq	r4, r1, r4, lsr #6
   14680:	andeq	r4, r1, r4, lsr #6
   14684:	andeq	r4, r1, r4, lsr #6
   14688:	andeq	r4, r1, r4, lsr #6
   1468c:	andeq	r4, r1, r4, lsr #6
   14690:	andeq	r4, r1, r4, lsr #6
   14694:	andeq	r4, r1, r4, lsr #6
   14698:	andeq	r4, r1, r4, lsr #6
   1469c:	andeq	r4, r1, r4, lsr #6
   146a0:	andeq	r4, r1, r4, lsr #6
   146a4:	andeq	r4, r1, r4, lsr #6
   146a8:	andeq	r4, r1, r4, lsr #6
   146ac:	andeq	r4, r1, r4, lsr #6
   146b0:	andeq	r4, r1, r4, lsr #6
   146b4:	andeq	r3, r1, r0, lsl #28
   146b8:	andeq	r3, r1, r0, lsl #28
   146bc:	andeq	r3, r1, r0, lsl #28
   146c0:	andeq	r3, r1, r0, lsl #28
   146c4:	andeq	r3, r1, r0, ror r7
   146c8:			; <UNDEFINED> instruction: 0x00013eb0
   146cc:	andeq	r4, r1, r4, lsr #6
   146d0:	andeq	r4, r1, r4, lsr #6
   146d4:	andeq	r4, r1, r4, lsr #6
   146d8:	andeq	r4, r1, r4, lsr #6
   146dc:	andeq	r4, r1, r4, lsr #6
   146e0:	andeq	r4, r1, r4, lsr #6
   146e4:	andeq	r4, r1, r4, lsr #6
   146e8:	andeq	r4, r1, r4, lsr #6
   146ec:	andeq	r4, r1, r4, lsr #6
   146f0:	andeq	r4, r1, r4, lsr #6
   146f4:	andeq	r4, r1, r4, lsr #6
   146f8:	andeq	r4, r1, r4, lsr #6
   146fc:	andeq	r4, r1, r4, lsr #6
   14700:	andeq	r4, r1, r4, lsr #6
   14704:	andeq	r4, r1, r4, lsr #6
   14708:	andeq	r4, r1, r4, lsr #6
   1470c:	andeq	r4, r1, r4, lsr #6
   14710:	andeq	r4, r1, r4, lsr #6
   14714:	andeq	r4, r1, r4, lsr #6
   14718:	andeq	r4, r1, r4, lsr #6
   1471c:	andeq	r4, r1, r4, lsr #6
   14720:	andeq	r4, r1, r4, lsr #6
   14724:	andeq	r4, r1, r4, lsr #6
   14728:	andeq	r4, r1, r4, lsr #6
   1472c:	andeq	r4, r1, r4, lsr #6
   14730:	andeq	r4, r1, r4, lsr #6
   14734:	andeq	r3, r1, r0, lsl #28
   14738:	andeq	r3, r1, r8, lsr #25
   1473c:	andeq	r4, r1, r4, lsr #6
   14740:	andeq	r3, r1, r0, lsl #28
   14744:	andeq	r4, r1, r4, lsr #6
   14748:	andeq	r3, r1, r0, lsl #28
   1474c:	andeq	r4, r1, r4, lsr #6
   14750:	andeq	r4, r1, r4, lsr #6
   14754:	andeq	r4, r1, r4, lsr #6
   14758:	andeq	r4, r1, r4, lsr #6
   1475c:	andeq	r4, r1, r4, lsr #6
   14760:	andeq	r4, r1, r4, lsr #6
   14764:	andeq	r4, r1, r4, lsr #6
   14768:	andeq	r4, r1, r4, lsr #6
   1476c:	andeq	r4, r1, r4, lsr #6
   14770:	andeq	r4, r1, r4, lsr #6
   14774:	andeq	r4, r1, r4, lsr #6
   14778:	andeq	r4, r1, r4, lsr #6
   1477c:	andeq	r4, r1, r4, lsr #6
   14780:	andeq	r4, r1, r4, lsr #6
   14784:	andeq	r4, r1, r4, lsr #6
   14788:	andeq	r4, r1, r4, lsr #6
   1478c:	andeq	r4, r1, r4, lsr #6
   14790:	andeq	r4, r1, r4, lsr #6
   14794:	andeq	r4, r1, r4, lsr #6
   14798:	andeq	r4, r1, r4, lsr #6
   1479c:	andeq	r4, r1, r4, lsr #6
   147a0:	andeq	r4, r1, r4, lsr #6
   147a4:	andeq	r4, r1, r4, lsr #6
   147a8:	andeq	r4, r1, r4, lsr #6
   147ac:	andeq	r4, r1, r4, lsr #6
   147b0:	andeq	r4, r1, r4, lsr #6
   147b4:	andeq	r3, r1, r8, ror #26
   147b8:	andeq	r3, r1, r0, lsl #28
   147bc:	andeq	r3, r1, r8, ror #26
   147c0:			; <UNDEFINED> instruction: 0x00013db8
   147c4:	strd	r4, [sp, #-36]!	; 0xffffffdc
   147c8:	strd	r6, [sp, #8]
   147cc:	strd	r8, [sp, #16]
   147d0:	strd	sl, [sp, #24]
   147d4:	str	lr, [sp, #32]
   147d8:	sub	sp, sp, #52	; 0x34
   147dc:	mov	r5, r0
   147e0:	str	r1, [sp, #24]
   147e4:	str	r2, [sp, #28]
   147e8:	mov	r4, r3
   147ec:	bl	10ff0 <__errno_location@plt>
   147f0:	str	r0, [sp, #32]
   147f4:	ldr	r3, [r0]
   147f8:	str	r3, [sp, #36]	; 0x24
   147fc:	movw	r3, #33040	; 0x8110
   14800:	movt	r3, #2
   14804:	ldr	r6, [r3]
   14808:	cmn	r5, #-2147483647	; 0x80000001
   1480c:	movne	r3, #0
   14810:	moveq	r3, #1
   14814:	orrs	r3, r3, r5, lsr #31
   14818:	bne	1497c <__assert_fail@plt+0x3878>
   1481c:	movw	r3, #33040	; 0x8110
   14820:	movt	r3, #2
   14824:	ldr	r2, [r3, #4]
   14828:	cmp	r2, r5
   1482c:	bgt	1489c <__assert_fail@plt+0x3798>
   14830:	str	r2, [sp, #44]	; 0x2c
   14834:	add	r3, r3, #8
   14838:	cmp	r6, r3
   1483c:	beq	14980 <__assert_fail@plt+0x387c>
   14840:	sub	r2, r5, r2
   14844:	mov	r3, #8
   14848:	str	r3, [sp]
   1484c:	mvn	r3, #-2147483648	; 0x80000000
   14850:	add	r2, r2, #1
   14854:	add	r1, sp, #44	; 0x2c
   14858:	mov	r0, r6
   1485c:	bl	159a4 <__assert_fail@plt+0x48a0>
   14860:	mov	r6, r0
   14864:	movw	r3, #33040	; 0x8110
   14868:	movt	r3, #2
   1486c:	str	r0, [r3]
   14870:	movw	r7, #33040	; 0x8110
   14874:	movt	r7, #2
   14878:	ldr	r0, [r7, #4]
   1487c:	ldr	r2, [sp, #44]	; 0x2c
   14880:	sub	r2, r2, r0
   14884:	lsl	r2, r2, #3
   14888:	mov	r1, #0
   1488c:	add	r0, r6, r0, lsl #3
   14890:	bl	11020 <memset@plt>
   14894:	ldr	r3, [sp, #44]	; 0x2c
   14898:	str	r3, [r7, #4]
   1489c:	add	fp, r6, r5, lsl #3
   148a0:	ldr	r8, [r6, r5, lsl #3]
   148a4:	ldr	r7, [fp, #4]
   148a8:	ldr	r3, [r4, #4]
   148ac:	orr	r9, r3, #1
   148b0:	add	sl, r4, #8
   148b4:	ldr	r3, [r4, #44]	; 0x2c
   148b8:	str	r3, [sp, #16]
   148bc:	ldr	r3, [r4, #40]	; 0x28
   148c0:	str	r3, [sp, #12]
   148c4:	str	sl, [sp, #8]
   148c8:	str	r9, [sp, #4]
   148cc:	ldr	r3, [r4]
   148d0:	str	r3, [sp]
   148d4:	ldr	r3, [sp, #28]
   148d8:	ldr	r2, [sp, #24]
   148dc:	mov	r1, r8
   148e0:	mov	r0, r7
   148e4:	bl	130cc <__assert_fail@plt+0x1fc8>
   148e8:	cmp	r8, r0
   148ec:	bhi	14950 <__assert_fail@plt+0x384c>
   148f0:	add	r8, r0, #1
   148f4:	str	r8, [r6, r5, lsl #3]
   148f8:	movw	r3, #33168	; 0x8190
   148fc:	movt	r3, #2
   14900:	cmp	r7, r3
   14904:	beq	14910 <__assert_fail@plt+0x380c>
   14908:	mov	r0, r7
   1490c:	bl	12200 <__assert_fail@plt+0x10fc>
   14910:	mov	r0, r8
   14914:	bl	157a0 <__assert_fail@plt+0x469c>
   14918:	mov	r7, r0
   1491c:	str	r0, [fp, #4]
   14920:	ldr	r3, [r4, #44]	; 0x2c
   14924:	str	r3, [sp, #16]
   14928:	ldr	r3, [r4, #40]	; 0x28
   1492c:	str	r3, [sp, #12]
   14930:	str	sl, [sp, #8]
   14934:	str	r9, [sp, #4]
   14938:	ldr	r3, [r4]
   1493c:	str	r3, [sp]
   14940:	ldr	r3, [sp, #28]
   14944:	ldr	r2, [sp, #24]
   14948:	mov	r1, r8
   1494c:	bl	130cc <__assert_fail@plt+0x1fc8>
   14950:	ldr	r3, [sp, #32]
   14954:	ldr	r2, [sp, #36]	; 0x24
   14958:	str	r2, [r3]
   1495c:	mov	r0, r7
   14960:	add	sp, sp, #52	; 0x34
   14964:	ldrd	r4, [sp]
   14968:	ldrd	r6, [sp, #8]
   1496c:	ldrd	r8, [sp, #16]
   14970:	ldrd	sl, [sp, #24]
   14974:	add	sp, sp, #32
   14978:	pop	{pc}		; (ldr pc, [sp], #4)
   1497c:	bl	110ec <abort@plt>
   14980:	sub	r2, r5, r2
   14984:	mov	r3, #8
   14988:	str	r3, [sp]
   1498c:	mvn	r3, #-2147483648	; 0x80000000
   14990:	add	r2, r2, #1
   14994:	add	r1, sp, #44	; 0x2c
   14998:	mov	r0, #0
   1499c:	bl	159a4 <__assert_fail@plt+0x48a0>
   149a0:	mov	r6, r0
   149a4:	movw	r3, #33040	; 0x8110
   149a8:	movt	r3, #2
   149ac:	str	r0, [r3]
   149b0:	ldrd	r2, [r3, #8]
   149b4:	strd	r2, [r0]
   149b8:	b	14870 <__assert_fail@plt+0x376c>
   149bc:	strd	r4, [sp, #-16]!
   149c0:	str	r6, [sp, #8]
   149c4:	str	lr, [sp, #12]
   149c8:	mov	r4, r0
   149cc:	bl	10ff0 <__errno_location@plt>
   149d0:	mov	r5, r0
   149d4:	ldr	r6, [r0]
   149d8:	cmp	r4, #0
   149dc:	ldr	r3, [pc, #32]	; 14a04 <__assert_fail@plt+0x3900>
   149e0:	moveq	r4, r3
   149e4:	mov	r1, #48	; 0x30
   149e8:	mov	r0, r4
   149ec:	bl	15b14 <__assert_fail@plt+0x4a10>
   149f0:	str	r6, [r5]
   149f4:	ldrd	r4, [sp]
   149f8:	ldr	r6, [sp, #8]
   149fc:	add	sp, sp, #12
   14a00:	pop	{pc}		; (ldr pc, [sp], #4)
   14a04:	muleq	r2, r0, r2
   14a08:	subs	r3, r0, #0
   14a0c:	ldr	r2, [pc, #8]	; 14a1c <__assert_fail@plt+0x3918>
   14a10:	moveq	r3, r2
   14a14:	ldr	r0, [r3]
   14a18:	bx	lr
   14a1c:	muleq	r2, r0, r2
   14a20:	subs	r3, r0, #0
   14a24:	ldr	r2, [pc, #8]	; 14a34 <__assert_fail@plt+0x3930>
   14a28:	moveq	r3, r2
   14a2c:	str	r1, [r3]
   14a30:	bx	lr
   14a34:	muleq	r2, r0, r2
   14a38:	push	{lr}		; (str lr, [sp, #-4]!)
   14a3c:	subs	r3, r0, #0
   14a40:	ldr	r0, [pc, #44]	; 14a74 <__assert_fail@plt+0x3970>
   14a44:	moveq	r3, r0
   14a48:	add	r3, r3, #8
   14a4c:	lsr	lr, r1, #5
   14a50:	and	r1, r1, #31
   14a54:	ldr	ip, [r3, lr, lsl #2]
   14a58:	lsr	r0, ip, r1
   14a5c:	eor	r2, r2, r0
   14a60:	and	r2, r2, #1
   14a64:	eor	r1, ip, r2, lsl r1
   14a68:	str	r1, [r3, lr, lsl #2]
   14a6c:	and	r0, r0, #1
   14a70:	pop	{pc}		; (ldr pc, [sp], #4)
   14a74:	muleq	r2, r0, r2
   14a78:	subs	r3, r0, #0
   14a7c:	ldr	r2, [pc, #12]	; 14a90 <__assert_fail@plt+0x398c>
   14a80:	moveq	r3, r2
   14a84:	ldr	r0, [r3, #4]
   14a88:	str	r1, [r3, #4]
   14a8c:	bx	lr
   14a90:	muleq	r2, r0, r2
   14a94:	subs	r3, r0, #0
   14a98:	ldr	r0, [pc, #44]	; 14acc <__assert_fail@plt+0x39c8>
   14a9c:	moveq	r3, r0
   14aa0:	mov	r0, #10
   14aa4:	str	r0, [r3]
   14aa8:	cmp	r2, #0
   14aac:	cmpne	r1, #0
   14ab0:	beq	14ac0 <__assert_fail@plt+0x39bc>
   14ab4:	str	r1, [r3, #40]	; 0x28
   14ab8:	str	r2, [r3, #44]	; 0x2c
   14abc:	bx	lr
   14ac0:	str	r4, [sp, #-8]!
   14ac4:	str	lr, [sp, #4]
   14ac8:	bl	110ec <abort@plt>
   14acc:	muleq	r2, r0, r2
   14ad0:	strd	r4, [sp, #-32]!	; 0xffffffe0
   14ad4:	strd	r6, [sp, #8]
   14ad8:	strd	r8, [sp, #16]
   14adc:	str	sl, [sp, #24]
   14ae0:	str	lr, [sp, #28]
   14ae4:	sub	sp, sp, #24
   14ae8:	mov	r7, r0
   14aec:	mov	r8, r1
   14af0:	mov	r9, r2
   14af4:	mov	sl, r3
   14af8:	ldr	r4, [sp, #56]	; 0x38
   14afc:	cmp	r4, #0
   14b00:	ldr	r3, [pc, #104]	; 14b70 <__assert_fail@plt+0x3a6c>
   14b04:	moveq	r4, r3
   14b08:	bl	10ff0 <__errno_location@plt>
   14b0c:	mov	r5, r0
   14b10:	ldr	r6, [r0]
   14b14:	ldr	r3, [r4, #44]	; 0x2c
   14b18:	str	r3, [sp, #16]
   14b1c:	ldr	r3, [r4, #40]	; 0x28
   14b20:	str	r3, [sp, #12]
   14b24:	add	r3, r4, #8
   14b28:	str	r3, [sp, #8]
   14b2c:	ldr	r3, [r4, #4]
   14b30:	str	r3, [sp, #4]
   14b34:	ldr	r3, [r4]
   14b38:	str	r3, [sp]
   14b3c:	mov	r3, sl
   14b40:	mov	r2, r9
   14b44:	mov	r1, r8
   14b48:	mov	r0, r7
   14b4c:	bl	130cc <__assert_fail@plt+0x1fc8>
   14b50:	str	r6, [r5]
   14b54:	add	sp, sp, #24
   14b58:	ldrd	r4, [sp]
   14b5c:	ldrd	r6, [sp, #8]
   14b60:	ldrd	r8, [sp, #16]
   14b64:	ldr	sl, [sp, #24]
   14b68:	add	sp, sp, #28
   14b6c:	pop	{pc}		; (ldr pc, [sp], #4)
   14b70:	muleq	r2, r0, r2
   14b74:	strd	r4, [sp, #-36]!	; 0xffffffdc
   14b78:	strd	r6, [sp, #8]
   14b7c:	strd	r8, [sp, #16]
   14b80:	strd	sl, [sp, #24]
   14b84:	str	lr, [sp, #32]
   14b88:	sub	sp, sp, #44	; 0x2c
   14b8c:	mov	r8, r0
   14b90:	mov	sl, r1
   14b94:	mov	r6, r2
   14b98:	subs	r4, r3, #0
   14b9c:	ldr	r3, [pc, #200]	; 14c6c <__assert_fail@plt+0x3b68>
   14ba0:	moveq	r4, r3
   14ba4:	bl	10ff0 <__errno_location@plt>
   14ba8:	mov	r7, r0
   14bac:	ldr	fp, [r0]
   14bb0:	ldr	r5, [r4, #4]
   14bb4:	cmp	r6, #0
   14bb8:	orreq	r5, r5, #1
   14bbc:	add	r9, r4, #8
   14bc0:	ldr	r3, [r4, #44]	; 0x2c
   14bc4:	str	r3, [sp, #16]
   14bc8:	ldr	r3, [r4, #40]	; 0x28
   14bcc:	str	r3, [sp, #12]
   14bd0:	str	r9, [sp, #8]
   14bd4:	str	r5, [sp, #4]
   14bd8:	ldr	r3, [r4]
   14bdc:	str	r3, [sp]
   14be0:	str	sl, [sp, #36]	; 0x24
   14be4:	mov	r3, sl
   14be8:	str	r8, [sp, #32]
   14bec:	mov	r2, r8
   14bf0:	mov	r1, #0
   14bf4:	mov	r0, r1
   14bf8:	bl	130cc <__assert_fail@plt+0x1fc8>
   14bfc:	mov	sl, r0
   14c00:	add	r8, r0, #1
   14c04:	mov	r0, r8
   14c08:	bl	157a0 <__assert_fail@plt+0x469c>
   14c0c:	str	r0, [sp, #28]
   14c10:	ldr	r3, [r4, #44]	; 0x2c
   14c14:	str	r3, [sp, #16]
   14c18:	ldr	r3, [r4, #40]	; 0x28
   14c1c:	str	r3, [sp, #12]
   14c20:	str	r9, [sp, #8]
   14c24:	str	r5, [sp, #4]
   14c28:	ldr	r3, [r4]
   14c2c:	str	r3, [sp]
   14c30:	ldr	r3, [sp, #36]	; 0x24
   14c34:	ldr	r2, [sp, #32]
   14c38:	mov	r1, r8
   14c3c:	bl	130cc <__assert_fail@plt+0x1fc8>
   14c40:	str	fp, [r7]
   14c44:	cmp	r6, #0
   14c48:	strne	sl, [r6]
   14c4c:	ldr	r0, [sp, #28]
   14c50:	add	sp, sp, #44	; 0x2c
   14c54:	ldrd	r4, [sp]
   14c58:	ldrd	r6, [sp, #8]
   14c5c:	ldrd	r8, [sp, #16]
   14c60:	ldrd	sl, [sp, #24]
   14c64:	add	sp, sp, #32
   14c68:	pop	{pc}		; (ldr pc, [sp], #4)
   14c6c:	muleq	r2, r0, r2
   14c70:	str	r4, [sp, #-8]!
   14c74:	str	lr, [sp, #4]
   14c78:	mov	r3, r2
   14c7c:	mov	r2, #0
   14c80:	bl	14b74 <__assert_fail@plt+0x3a70>
   14c84:	ldr	r4, [sp]
   14c88:	add	sp, sp, #4
   14c8c:	pop	{pc}		; (ldr pc, [sp], #4)
   14c90:	strd	r4, [sp, #-24]!	; 0xffffffe8
   14c94:	strd	r6, [sp, #8]
   14c98:	str	r8, [sp, #16]
   14c9c:	str	lr, [sp, #20]
   14ca0:	movw	r3, #33040	; 0x8110
   14ca4:	movt	r3, #2
   14ca8:	ldr	r7, [r3]
   14cac:	ldr	r3, [r3, #4]
   14cb0:	cmp	r3, #1
   14cb4:	ble	14ce0 <__assert_fail@plt+0x3bdc>
   14cb8:	mov	r4, #1
   14cbc:	add	r6, r7, #4
   14cc0:	movw	r5, #33040	; 0x8110
   14cc4:	movt	r5, #2
   14cc8:	ldr	r0, [r6, r4, lsl #3]
   14ccc:	bl	12200 <__assert_fail@plt+0x10fc>
   14cd0:	add	r4, r4, #1
   14cd4:	ldr	r3, [r5, #4]
   14cd8:	cmp	r3, r4
   14cdc:	bgt	14cc8 <__assert_fail@plt+0x3bc4>
   14ce0:	ldr	r0, [r7, #4]
   14ce4:	movw	r3, #33168	; 0x8190
   14ce8:	movt	r3, #2
   14cec:	cmp	r0, r3
   14cf0:	beq	14d14 <__assert_fail@plt+0x3c10>
   14cf4:	bl	12200 <__assert_fail@plt+0x10fc>
   14cf8:	movw	r3, #33040	; 0x8110
   14cfc:	movt	r3, #2
   14d00:	mov	r2, #256	; 0x100
   14d04:	str	r2, [r3, #8]
   14d08:	movw	r2, #33168	; 0x8190
   14d0c:	movt	r2, #2
   14d10:	str	r2, [r3, #12]
   14d14:	ldr	r3, [pc, #64]	; 14d5c <__assert_fail@plt+0x3c58>
   14d18:	cmp	r7, r3
   14d1c:	beq	14d38 <__assert_fail@plt+0x3c34>
   14d20:	mov	r0, r7
   14d24:	bl	12200 <__assert_fail@plt+0x10fc>
   14d28:	movw	r3, #33040	; 0x8110
   14d2c:	movt	r3, #2
   14d30:	add	r2, r3, #8
   14d34:	str	r2, [r3]
   14d38:	movw	r3, #33040	; 0x8110
   14d3c:	movt	r3, #2
   14d40:	mov	r2, #1
   14d44:	str	r2, [r3, #4]
   14d48:	ldrd	r4, [sp]
   14d4c:	ldrd	r6, [sp, #8]
   14d50:	ldr	r8, [sp, #16]
   14d54:	add	sp, sp, #20
   14d58:	pop	{pc}		; (ldr pc, [sp], #4)
   14d5c:	andeq	r8, r2, r8, lsl r1
   14d60:	str	r4, [sp, #-8]!
   14d64:	str	lr, [sp, #4]
   14d68:	ldr	r3, [pc, #16]	; 14d80 <__assert_fail@plt+0x3c7c>
   14d6c:	mvn	r2, #0
   14d70:	bl	147c4 <__assert_fail@plt+0x36c0>
   14d74:	ldr	r4, [sp]
   14d78:	add	sp, sp, #4
   14d7c:	pop	{pc}		; (ldr pc, [sp], #4)
   14d80:	muleq	r2, r0, r2
   14d84:	str	r4, [sp, #-8]!
   14d88:	str	lr, [sp, #4]
   14d8c:	ldr	r3, [pc, #12]	; 14da0 <__assert_fail@plt+0x3c9c>
   14d90:	bl	147c4 <__assert_fail@plt+0x36c0>
   14d94:	ldr	r4, [sp]
   14d98:	add	sp, sp, #4
   14d9c:	pop	{pc}		; (ldr pc, [sp], #4)
   14da0:	muleq	r2, r0, r2
   14da4:	str	r4, [sp, #-8]!
   14da8:	str	lr, [sp, #4]
   14dac:	mov	r1, r0
   14db0:	mov	r0, #0
   14db4:	bl	14d60 <__assert_fail@plt+0x3c5c>
   14db8:	ldr	r4, [sp]
   14dbc:	add	sp, sp, #4
   14dc0:	pop	{pc}		; (ldr pc, [sp], #4)
   14dc4:	str	r4, [sp, #-8]!
   14dc8:	str	lr, [sp, #4]
   14dcc:	mov	r2, r1
   14dd0:	mov	r1, r0
   14dd4:	mov	r0, #0
   14dd8:	bl	14d84 <__assert_fail@plt+0x3c80>
   14ddc:	ldr	r4, [sp]
   14de0:	add	sp, sp, #4
   14de4:	pop	{pc}		; (ldr pc, [sp], #4)
   14de8:	strd	r4, [sp, #-12]!
   14dec:	str	lr, [sp, #8]
   14df0:	sub	sp, sp, #52	; 0x34
   14df4:	mov	r4, r0
   14df8:	mov	r5, r2
   14dfc:	mov	r0, sp
   14e00:	bl	12f38 <__assert_fail@plt+0x1e34>
   14e04:	mov	r3, sp
   14e08:	mvn	r2, #0
   14e0c:	mov	r1, r5
   14e10:	mov	r0, r4
   14e14:	bl	147c4 <__assert_fail@plt+0x36c0>
   14e18:	add	sp, sp, #52	; 0x34
   14e1c:	ldrd	r4, [sp]
   14e20:	add	sp, sp, #8
   14e24:	pop	{pc}		; (ldr pc, [sp], #4)
   14e28:	strd	r4, [sp, #-16]!
   14e2c:	str	r6, [sp, #8]
   14e30:	str	lr, [sp, #12]
   14e34:	sub	sp, sp, #48	; 0x30
   14e38:	mov	r4, r0
   14e3c:	mov	r5, r2
   14e40:	mov	r6, r3
   14e44:	mov	r0, sp
   14e48:	bl	12f38 <__assert_fail@plt+0x1e34>
   14e4c:	mov	r3, sp
   14e50:	mov	r2, r6
   14e54:	mov	r1, r5
   14e58:	mov	r0, r4
   14e5c:	bl	147c4 <__assert_fail@plt+0x36c0>
   14e60:	add	sp, sp, #48	; 0x30
   14e64:	ldrd	r4, [sp]
   14e68:	ldr	r6, [sp, #8]
   14e6c:	add	sp, sp, #12
   14e70:	pop	{pc}		; (ldr pc, [sp], #4)
   14e74:	str	r4, [sp, #-8]!
   14e78:	str	lr, [sp, #4]
   14e7c:	mov	r2, r1
   14e80:	mov	r1, r0
   14e84:	mov	r0, #0
   14e88:	bl	14de8 <__assert_fail@plt+0x3ce4>
   14e8c:	ldr	r4, [sp]
   14e90:	add	sp, sp, #4
   14e94:	pop	{pc}		; (ldr pc, [sp], #4)
   14e98:	str	r4, [sp, #-8]!
   14e9c:	str	lr, [sp, #4]
   14ea0:	mov	r3, r2
   14ea4:	mov	r2, r1
   14ea8:	mov	r1, r0
   14eac:	mov	r0, #0
   14eb0:	bl	14e28 <__assert_fail@plt+0x3d24>
   14eb4:	ldr	r4, [sp]
   14eb8:	add	sp, sp, #4
   14ebc:	pop	{pc}		; (ldr pc, [sp], #4)
   14ec0:	strd	r4, [sp, #-12]!
   14ec4:	str	lr, [sp, #8]
   14ec8:	sub	sp, sp, #52	; 0x34
   14ecc:	mov	r4, r0
   14ed0:	mov	r5, r1
   14ed4:	mov	r1, r2
   14ed8:	ldr	r0, [pc, #92]	; 14f3c <__assert_fail@plt+0x3e38>
   14edc:	ldrd	r2, [r0]
   14ee0:	strd	r2, [sp]
   14ee4:	ldrd	r2, [r0, #8]
   14ee8:	strd	r2, [sp, #8]
   14eec:	ldrd	r2, [r0, #16]
   14ef0:	strd	r2, [sp, #16]
   14ef4:	ldrd	r2, [r0, #24]
   14ef8:	strd	r2, [sp, #24]
   14efc:	ldrd	r2, [r0, #32]
   14f00:	strd	r2, [sp, #32]
   14f04:	ldrd	r2, [r0, #40]	; 0x28
   14f08:	strd	r2, [sp, #40]	; 0x28
   14f0c:	mov	r2, #1
   14f10:	mov	r0, sp
   14f14:	bl	14a38 <__assert_fail@plt+0x3934>
   14f18:	mov	r3, sp
   14f1c:	mov	r2, r5
   14f20:	mov	r1, r4
   14f24:	mov	r0, #0
   14f28:	bl	147c4 <__assert_fail@plt+0x36c0>
   14f2c:	add	sp, sp, #52	; 0x34
   14f30:	ldrd	r4, [sp]
   14f34:	add	sp, sp, #8
   14f38:	pop	{pc}		; (ldr pc, [sp], #4)
   14f3c:	muleq	r2, r0, r2
   14f40:	str	r4, [sp, #-8]!
   14f44:	str	lr, [sp, #4]
   14f48:	mov	r2, r1
   14f4c:	mvn	r1, #0
   14f50:	bl	14ec0 <__assert_fail@plt+0x3dbc>
   14f54:	ldr	r4, [sp]
   14f58:	add	sp, sp, #4
   14f5c:	pop	{pc}		; (ldr pc, [sp], #4)
   14f60:	str	r4, [sp, #-8]!
   14f64:	str	lr, [sp, #4]
   14f68:	mov	r1, #58	; 0x3a
   14f6c:	bl	14f40 <__assert_fail@plt+0x3e3c>
   14f70:	ldr	r4, [sp]
   14f74:	add	sp, sp, #4
   14f78:	pop	{pc}		; (ldr pc, [sp], #4)
   14f7c:	str	r4, [sp, #-8]!
   14f80:	str	lr, [sp, #4]
   14f84:	mov	r2, #58	; 0x3a
   14f88:	bl	14ec0 <__assert_fail@plt+0x3dbc>
   14f8c:	ldr	r4, [sp]
   14f90:	add	sp, sp, #4
   14f94:	pop	{pc}		; (ldr pc, [sp], #4)
   14f98:	strd	r4, [sp, #-12]!
   14f9c:	str	lr, [sp, #8]
   14fa0:	sub	sp, sp, #100	; 0x64
   14fa4:	mov	r4, r0
   14fa8:	mov	r5, r2
   14fac:	mov	r0, sp
   14fb0:	bl	12f38 <__assert_fail@plt+0x1e34>
   14fb4:	ldrd	r2, [sp]
   14fb8:	strd	r2, [sp, #48]	; 0x30
   14fbc:	ldrd	r2, [sp, #8]
   14fc0:	strd	r2, [sp, #56]	; 0x38
   14fc4:	ldrd	r2, [sp, #16]
   14fc8:	strd	r2, [sp, #64]	; 0x40
   14fcc:	ldrd	r2, [sp, #24]
   14fd0:	strd	r2, [sp, #72]	; 0x48
   14fd4:	ldrd	r2, [sp, #32]
   14fd8:	strd	r2, [sp, #80]	; 0x50
   14fdc:	ldrd	r2, [sp, #40]	; 0x28
   14fe0:	strd	r2, [sp, #88]	; 0x58
   14fe4:	mov	r2, #1
   14fe8:	mov	r1, #58	; 0x3a
   14fec:	add	r0, sp, #48	; 0x30
   14ff0:	bl	14a38 <__assert_fail@plt+0x3934>
   14ff4:	add	r3, sp, #48	; 0x30
   14ff8:	mvn	r2, #0
   14ffc:	mov	r1, r5
   15000:	mov	r0, r4
   15004:	bl	147c4 <__assert_fail@plt+0x36c0>
   15008:	add	sp, sp, #100	; 0x64
   1500c:	ldrd	r4, [sp]
   15010:	add	sp, sp, #8
   15014:	pop	{pc}		; (ldr pc, [sp], #4)
   15018:	strd	r4, [sp, #-20]!	; 0xffffffec
   1501c:	strd	r6, [sp, #8]
   15020:	str	lr, [sp, #16]
   15024:	sub	sp, sp, #52	; 0x34
   15028:	mov	r4, r0
   1502c:	mov	r5, r3
   15030:	ldr	r3, [pc, #92]	; 15094 <__assert_fail@plt+0x3f90>
   15034:	ldrd	r6, [r3]
   15038:	strd	r6, [sp]
   1503c:	ldrd	r6, [r3, #8]
   15040:	strd	r6, [sp, #8]
   15044:	ldrd	r6, [r3, #16]
   15048:	strd	r6, [sp, #16]
   1504c:	ldrd	r6, [r3, #24]
   15050:	strd	r6, [sp, #24]
   15054:	ldrd	r6, [r3, #32]
   15058:	strd	r6, [sp, #32]
   1505c:	ldrd	r6, [r3, #40]	; 0x28
   15060:	strd	r6, [sp, #40]	; 0x28
   15064:	mov	r0, sp
   15068:	bl	14a94 <__assert_fail@plt+0x3990>
   1506c:	mov	r3, sp
   15070:	ldr	r2, [sp, #72]	; 0x48
   15074:	mov	r1, r5
   15078:	mov	r0, r4
   1507c:	bl	147c4 <__assert_fail@plt+0x36c0>
   15080:	add	sp, sp, #52	; 0x34
   15084:	ldrd	r4, [sp]
   15088:	ldrd	r6, [sp, #8]
   1508c:	add	sp, sp, #16
   15090:	pop	{pc}		; (ldr pc, [sp], #4)
   15094:	muleq	r2, r0, r2
   15098:	push	{lr}		; (str lr, [sp, #-4]!)
   1509c:	sub	sp, sp, #12
   150a0:	mvn	ip, #0
   150a4:	str	ip, [sp]
   150a8:	bl	15018 <__assert_fail@plt+0x3f14>
   150ac:	add	sp, sp, #12
   150b0:	pop	{pc}		; (ldr pc, [sp], #4)
   150b4:	str	r4, [sp, #-8]!
   150b8:	str	lr, [sp, #4]
   150bc:	mov	r3, r2
   150c0:	mov	r2, r1
   150c4:	mov	r1, r0
   150c8:	mov	r0, #0
   150cc:	bl	15098 <__assert_fail@plt+0x3f94>
   150d0:	ldr	r4, [sp]
   150d4:	add	sp, sp, #4
   150d8:	pop	{pc}		; (ldr pc, [sp], #4)
   150dc:	push	{lr}		; (str lr, [sp, #-4]!)
   150e0:	sub	sp, sp, #12
   150e4:	str	r3, [sp]
   150e8:	mov	r3, r2
   150ec:	mov	r2, r1
   150f0:	mov	r1, r0
   150f4:	mov	r0, #0
   150f8:	bl	15018 <__assert_fail@plt+0x3f14>
   150fc:	add	sp, sp, #12
   15100:	pop	{pc}		; (ldr pc, [sp], #4)
   15104:	str	r4, [sp, #-8]!
   15108:	str	lr, [sp, #4]
   1510c:	ldr	r3, [pc, #12]	; 15120 <__assert_fail@plt+0x401c>
   15110:	bl	147c4 <__assert_fail@plt+0x36c0>
   15114:	ldr	r4, [sp]
   15118:	add	sp, sp, #4
   1511c:	pop	{pc}		; (ldr pc, [sp], #4)
   15120:	andeq	r8, r2, r0, lsr #2
   15124:	str	r4, [sp, #-8]!
   15128:	str	lr, [sp, #4]
   1512c:	mov	r2, r1
   15130:	mov	r1, r0
   15134:	mov	r0, #0
   15138:	bl	15104 <__assert_fail@plt+0x4000>
   1513c:	ldr	r4, [sp]
   15140:	add	sp, sp, #4
   15144:	pop	{pc}		; (ldr pc, [sp], #4)
   15148:	str	r4, [sp, #-8]!
   1514c:	str	lr, [sp, #4]
   15150:	mvn	r2, #0
   15154:	bl	15104 <__assert_fail@plt+0x4000>
   15158:	ldr	r4, [sp]
   1515c:	add	sp, sp, #4
   15160:	pop	{pc}		; (ldr pc, [sp], #4)
   15164:	str	r4, [sp, #-8]!
   15168:	str	lr, [sp, #4]
   1516c:	mov	r1, r0
   15170:	mov	r0, #0
   15174:	bl	15148 <__assert_fail@plt+0x4044>
   15178:	ldr	r4, [sp]
   1517c:	add	sp, sp, #4
   15180:	pop	{pc}		; (ldr pc, [sp], #4)
   15184:	str	r4, [sp, #-8]!
   15188:	str	lr, [sp, #4]
   1518c:	mov	r2, #3
   15190:	mov	r1, #0
   15194:	bl	1689c <__assert_fail@plt+0x5798>
   15198:	ldr	r4, [sp]
   1519c:	add	sp, sp, #4
   151a0:	pop	{pc}		; (ldr pc, [sp], #4)
   151a4:	strd	r4, [sp, #-16]!
   151a8:	str	r6, [sp, #8]
   151ac:	str	lr, [sp, #12]
   151b0:	sub	sp, sp, #32
   151b4:	mov	r4, r0
   151b8:	ldr	r5, [sp, #48]	; 0x30
   151bc:	ldr	r6, [sp, #52]	; 0x34
   151c0:	cmp	r1, #0
   151c4:	beq	15290 <__assert_fail@plt+0x418c>
   151c8:	str	r3, [sp, #4]
   151cc:	str	r2, [sp]
   151d0:	mov	r3, r1
   151d4:	movw	r2, #30936	; 0x78d8
   151d8:	movt	r2, #1
   151dc:	mov	r1, #1
   151e0:	bl	11044 <__fprintf_chk@plt>
   151e4:	mov	r2, #5
   151e8:	movw	r1, #30956	; 0x78ec
   151ec:	movt	r1, #1
   151f0:	mov	r0, #0
   151f4:	bl	10ef4 <dcgettext@plt>
   151f8:	movw	r3, #2022	; 0x7e6
   151fc:	str	r3, [sp]
   15200:	mov	r3, r0
   15204:	movw	r2, #31684	; 0x7bc4
   15208:	movt	r2, #1
   1520c:	mov	r1, #1
   15210:	mov	r0, r4
   15214:	bl	11044 <__fprintf_chk@plt>
   15218:	mov	r1, r4
   1521c:	mov	r0, #10
   15220:	bl	10ee8 <fputc_unlocked@plt>
   15224:	mov	r2, #5
   15228:	movw	r1, #30960	; 0x78f0
   1522c:	movt	r1, #1
   15230:	mov	r0, #0
   15234:	bl	10ef4 <dcgettext@plt>
   15238:	movw	r3, #31132	; 0x799c
   1523c:	movt	r3, #1
   15240:	mov	r2, r0
   15244:	mov	r1, #1
   15248:	mov	r0, r4
   1524c:	bl	11044 <__fprintf_chk@plt>
   15250:	mov	r1, r4
   15254:	mov	r0, #10
   15258:	bl	10ee8 <fputc_unlocked@plt>
   1525c:	cmp	r6, #9
   15260:	ldrls	pc, [pc, r6, lsl #2]
   15264:	b	15568 <__assert_fail@plt+0x4464>
   15268:	ldrdeq	r5, [r1], -r4
   1526c:	andeq	r5, r1, ip, lsr #5
   15270:	andeq	r5, r1, r8, ror #5
   15274:	andeq	r5, r1, ip, lsl r3
   15278:	andeq	r5, r1, r8, asr r3
   1527c:	muleq	r1, ip, r3
   15280:	andeq	r5, r1, r8, ror #7
   15284:	andeq	r5, r1, ip, lsr r4
   15288:	muleq	r1, r8, r4
   1528c:	strdeq	r5, [r1], -ip
   15290:	str	r3, [sp]
   15294:	mov	r3, r2
   15298:	movw	r2, #30948	; 0x78e4
   1529c:	movt	r2, #1
   152a0:	mov	r1, #1
   152a4:	bl	11044 <__fprintf_chk@plt>
   152a8:	b	151e4 <__assert_fail@plt+0x40e0>
   152ac:	mov	r2, #5
   152b0:	movw	r1, #31168	; 0x79c0
   152b4:	movt	r1, #1
   152b8:	mov	r0, #0
   152bc:	bl	10ef4 <dcgettext@plt>
   152c0:	ldr	r3, [r5]
   152c4:	mov	r2, r0
   152c8:	mov	r1, #1
   152cc:	mov	r0, r4
   152d0:	bl	11044 <__fprintf_chk@plt>
   152d4:	add	sp, sp, #32
   152d8:	ldrd	r4, [sp]
   152dc:	ldr	r6, [sp, #8]
   152e0:	add	sp, sp, #12
   152e4:	pop	{pc}		; (ldr pc, [sp], #4)
   152e8:	mov	r2, #5
   152ec:	movw	r1, #31184	; 0x79d0
   152f0:	movt	r1, #1
   152f4:	mov	r0, #0
   152f8:	bl	10ef4 <dcgettext@plt>
   152fc:	ldr	r3, [r5, #4]
   15300:	str	r3, [sp]
   15304:	ldr	r3, [r5]
   15308:	mov	r2, r0
   1530c:	mov	r1, #1
   15310:	mov	r0, r4
   15314:	bl	11044 <__fprintf_chk@plt>
   15318:	b	152d4 <__assert_fail@plt+0x41d0>
   1531c:	mov	r2, #5
   15320:	movw	r1, #31208	; 0x79e8
   15324:	movt	r1, #1
   15328:	mov	r0, #0
   1532c:	bl	10ef4 <dcgettext@plt>
   15330:	ldr	r3, [r5, #8]
   15334:	str	r3, [sp, #4]
   15338:	ldr	r3, [r5, #4]
   1533c:	str	r3, [sp]
   15340:	ldr	r3, [r5]
   15344:	mov	r2, r0
   15348:	mov	r1, #1
   1534c:	mov	r0, r4
   15350:	bl	11044 <__fprintf_chk@plt>
   15354:	b	152d4 <__assert_fail@plt+0x41d0>
   15358:	mov	r2, #5
   1535c:	movw	r1, #31236	; 0x7a04
   15360:	movt	r1, #1
   15364:	mov	r0, #0
   15368:	bl	10ef4 <dcgettext@plt>
   1536c:	ldr	r3, [r5, #12]
   15370:	str	r3, [sp, #8]
   15374:	ldr	r3, [r5, #8]
   15378:	str	r3, [sp, #4]
   1537c:	ldr	r3, [r5, #4]
   15380:	str	r3, [sp]
   15384:	ldr	r3, [r5]
   15388:	mov	r2, r0
   1538c:	mov	r1, #1
   15390:	mov	r0, r4
   15394:	bl	11044 <__fprintf_chk@plt>
   15398:	b	152d4 <__assert_fail@plt+0x41d0>
   1539c:	mov	r2, #5
   153a0:	movw	r1, #31268	; 0x7a24
   153a4:	movt	r1, #1
   153a8:	mov	r0, #0
   153ac:	bl	10ef4 <dcgettext@plt>
   153b0:	ldr	r3, [r5, #16]
   153b4:	str	r3, [sp, #12]
   153b8:	ldr	r3, [r5, #12]
   153bc:	str	r3, [sp, #8]
   153c0:	ldr	r3, [r5, #8]
   153c4:	str	r3, [sp, #4]
   153c8:	ldr	r3, [r5, #4]
   153cc:	str	r3, [sp]
   153d0:	ldr	r3, [r5]
   153d4:	mov	r2, r0
   153d8:	mov	r1, #1
   153dc:	mov	r0, r4
   153e0:	bl	11044 <__fprintf_chk@plt>
   153e4:	b	152d4 <__assert_fail@plt+0x41d0>
   153e8:	mov	r2, #5
   153ec:	movw	r1, #31304	; 0x7a48
   153f0:	movt	r1, #1
   153f4:	mov	r0, #0
   153f8:	bl	10ef4 <dcgettext@plt>
   153fc:	ldr	r3, [r5, #20]
   15400:	str	r3, [sp, #16]
   15404:	ldr	r3, [r5, #16]
   15408:	str	r3, [sp, #12]
   1540c:	ldr	r3, [r5, #12]
   15410:	str	r3, [sp, #8]
   15414:	ldr	r3, [r5, #8]
   15418:	str	r3, [sp, #4]
   1541c:	ldr	r3, [r5, #4]
   15420:	str	r3, [sp]
   15424:	ldr	r3, [r5]
   15428:	mov	r2, r0
   1542c:	mov	r1, #1
   15430:	mov	r0, r4
   15434:	bl	11044 <__fprintf_chk@plt>
   15438:	b	152d4 <__assert_fail@plt+0x41d0>
   1543c:	mov	r2, #5
   15440:	movw	r1, #31344	; 0x7a70
   15444:	movt	r1, #1
   15448:	mov	r0, #0
   1544c:	bl	10ef4 <dcgettext@plt>
   15450:	ldr	r3, [r5, #24]
   15454:	str	r3, [sp, #20]
   15458:	ldr	r3, [r5, #20]
   1545c:	str	r3, [sp, #16]
   15460:	ldr	r3, [r5, #16]
   15464:	str	r3, [sp, #12]
   15468:	ldr	r3, [r5, #12]
   1546c:	str	r3, [sp, #8]
   15470:	ldr	r3, [r5, #8]
   15474:	str	r3, [sp, #4]
   15478:	ldr	r3, [r5, #4]
   1547c:	str	r3, [sp]
   15480:	ldr	r3, [r5]
   15484:	mov	r2, r0
   15488:	mov	r1, #1
   1548c:	mov	r0, r4
   15490:	bl	11044 <__fprintf_chk@plt>
   15494:	b	152d4 <__assert_fail@plt+0x41d0>
   15498:	mov	r2, #5
   1549c:	movw	r1, #31388	; 0x7a9c
   154a0:	movt	r1, #1
   154a4:	mov	r0, #0
   154a8:	bl	10ef4 <dcgettext@plt>
   154ac:	ldr	r3, [r5, #28]
   154b0:	str	r3, [sp, #24]
   154b4:	ldr	r3, [r5, #24]
   154b8:	str	r3, [sp, #20]
   154bc:	ldr	r3, [r5, #20]
   154c0:	str	r3, [sp, #16]
   154c4:	ldr	r3, [r5, #16]
   154c8:	str	r3, [sp, #12]
   154cc:	ldr	r3, [r5, #12]
   154d0:	str	r3, [sp, #8]
   154d4:	ldr	r3, [r5, #8]
   154d8:	str	r3, [sp, #4]
   154dc:	ldr	r3, [r5, #4]
   154e0:	str	r3, [sp]
   154e4:	ldr	r3, [r5]
   154e8:	mov	r2, r0
   154ec:	mov	r1, #1
   154f0:	mov	r0, r4
   154f4:	bl	11044 <__fprintf_chk@plt>
   154f8:	b	152d4 <__assert_fail@plt+0x41d0>
   154fc:	mov	r2, #5
   15500:	movw	r1, #31436	; 0x7acc
   15504:	movt	r1, #1
   15508:	mov	r0, #0
   1550c:	bl	10ef4 <dcgettext@plt>
   15510:	ldr	r3, [r5, #32]
   15514:	str	r3, [sp, #28]
   15518:	ldr	r3, [r5, #28]
   1551c:	str	r3, [sp, #24]
   15520:	ldr	r3, [r5, #24]
   15524:	str	r3, [sp, #20]
   15528:	ldr	r3, [r5, #20]
   1552c:	str	r3, [sp, #16]
   15530:	ldr	r3, [r5, #16]
   15534:	str	r3, [sp, #12]
   15538:	ldr	r3, [r5, #12]
   1553c:	str	r3, [sp, #8]
   15540:	ldr	r3, [r5, #8]
   15544:	str	r3, [sp, #4]
   15548:	ldr	r3, [r5, #4]
   1554c:	str	r3, [sp]
   15550:	ldr	r3, [r5]
   15554:	mov	r2, r0
   15558:	mov	r1, #1
   1555c:	mov	r0, r4
   15560:	bl	11044 <__fprintf_chk@plt>
   15564:	b	152d4 <__assert_fail@plt+0x41d0>
   15568:	mov	r2, #5
   1556c:	movw	r1, #31488	; 0x7b00
   15570:	movt	r1, #1
   15574:	mov	r0, #0
   15578:	bl	10ef4 <dcgettext@plt>
   1557c:	ldr	r3, [r5, #32]
   15580:	str	r3, [sp, #28]
   15584:	ldr	r3, [r5, #28]
   15588:	str	r3, [sp, #24]
   1558c:	ldr	r3, [r5, #24]
   15590:	str	r3, [sp, #20]
   15594:	ldr	r3, [r5, #20]
   15598:	str	r3, [sp, #16]
   1559c:	ldr	r3, [r5, #16]
   155a0:	str	r3, [sp, #12]
   155a4:	ldr	r3, [r5, #12]
   155a8:	str	r3, [sp, #8]
   155ac:	ldr	r3, [r5, #8]
   155b0:	str	r3, [sp, #4]
   155b4:	ldr	r3, [r5, #4]
   155b8:	str	r3, [sp]
   155bc:	ldr	r3, [r5]
   155c0:	mov	r2, r0
   155c4:	mov	r1, #1
   155c8:	mov	r0, r4
   155cc:	bl	11044 <__fprintf_chk@plt>
   155d0:	b	152d4 <__assert_fail@plt+0x41d0>
   155d4:	strd	r4, [sp, #-12]!
   155d8:	str	lr, [sp, #8]
   155dc:	sub	sp, sp, #12
   155e0:	ldr	r5, [sp, #24]
   155e4:	ldr	ip, [r5]
   155e8:	cmp	ip, #0
   155ec:	beq	15624 <__assert_fail@plt+0x4520>
   155f0:	mov	lr, r5
   155f4:	mov	ip, #0
   155f8:	add	ip, ip, #1
   155fc:	ldr	r4, [lr, #4]!
   15600:	cmp	r4, #0
   15604:	bne	155f8 <__assert_fail@plt+0x44f4>
   15608:	str	ip, [sp, #4]
   1560c:	str	r5, [sp]
   15610:	bl	151a4 <__assert_fail@plt+0x40a0>
   15614:	add	sp, sp, #12
   15618:	ldrd	r4, [sp]
   1561c:	add	sp, sp, #8
   15620:	pop	{pc}		; (ldr pc, [sp], #4)
   15624:	mov	ip, #0
   15628:	b	15608 <__assert_fail@plt+0x4504>
   1562c:	strd	r4, [sp, #-12]!
   15630:	str	lr, [sp, #8]
   15634:	sub	sp, sp, #52	; 0x34
   15638:	ldr	r5, [sp, #64]	; 0x40
   1563c:	add	r4, sp, #8
   15640:	mov	ip, #0
   15644:	ldr	lr, [r5], #4
   15648:	str	lr, [r4], #4
   1564c:	cmp	lr, #0
   15650:	beq	15660 <__assert_fail@plt+0x455c>
   15654:	add	ip, ip, #1
   15658:	cmp	ip, #10
   1565c:	bne	15644 <__assert_fail@plt+0x4540>
   15660:	str	ip, [sp, #4]
   15664:	add	ip, sp, #8
   15668:	str	ip, [sp]
   1566c:	bl	151a4 <__assert_fail@plt+0x40a0>
   15670:	add	sp, sp, #52	; 0x34
   15674:	ldrd	r4, [sp]
   15678:	add	sp, sp, #8
   1567c:	pop	{pc}		; (ldr pc, [sp], #4)
   15680:	push	{r3}		; (str r3, [sp, #-4]!)
   15684:	push	{lr}		; (str lr, [sp, #-4]!)
   15688:	sub	sp, sp, #16
   1568c:	add	r3, sp, #24
   15690:	str	r3, [sp, #12]
   15694:	str	r3, [sp]
   15698:	ldr	r3, [sp, #20]
   1569c:	bl	1562c <__assert_fail@plt+0x4528>
   156a0:	add	sp, sp, #16
   156a4:	pop	{lr}		; (ldr lr, [sp], #4)
   156a8:	add	sp, sp, #4
   156ac:	bx	lr
   156b0:	str	r4, [sp, #-8]!
   156b4:	str	lr, [sp, #4]
   156b8:	movw	r3, #33140	; 0x8174
   156bc:	movt	r3, #2
   156c0:	ldr	r1, [r3]
   156c4:	mov	r0, #10
   156c8:	bl	10ee8 <fputc_unlocked@plt>
   156cc:	mov	r2, #5
   156d0:	movw	r1, #31548	; 0x7b3c
   156d4:	movt	r1, #1
   156d8:	mov	r0, #0
   156dc:	bl	10ef4 <dcgettext@plt>
   156e0:	movw	r2, #31568	; 0x7b50
   156e4:	movt	r2, #1
   156e8:	mov	r1, r0
   156ec:	mov	r0, #1
   156f0:	bl	1102c <__printf_chk@plt>
   156f4:	mov	r2, #5
   156f8:	movw	r1, #31592	; 0x7b68
   156fc:	movt	r1, #1
   15700:	mov	r0, #0
   15704:	bl	10ef4 <dcgettext@plt>
   15708:	movw	r3, #30060	; 0x756c
   1570c:	movt	r3, #1
   15710:	movw	r2, #30100	; 0x7594
   15714:	movt	r2, #1
   15718:	mov	r1, r0
   1571c:	mov	r0, #1
   15720:	bl	1102c <__printf_chk@plt>
   15724:	mov	r2, #5
   15728:	movw	r1, #31612	; 0x7b7c
   1572c:	movt	r1, #1
   15730:	mov	r0, #0
   15734:	bl	10ef4 <dcgettext@plt>
   15738:	movw	r2, #31652	; 0x7ba4
   1573c:	movt	r2, #1
   15740:	mov	r1, r0
   15744:	mov	r0, #1
   15748:	bl	1102c <__printf_chk@plt>
   1574c:	ldr	r4, [sp]
   15750:	add	sp, sp, #4
   15754:	pop	{pc}		; (ldr pc, [sp], #4)
   15758:	str	r4, [sp, #-8]!
   1575c:	str	lr, [sp, #4]
   15760:	bl	16318 <__assert_fail@plt+0x5214>
   15764:	cmp	r0, #0
   15768:	beq	15778 <__assert_fail@plt+0x4674>
   1576c:	ldr	r4, [sp]
   15770:	add	sp, sp, #4
   15774:	pop	{pc}		; (ldr pc, [sp], #4)
   15778:	bl	15bec <__assert_fail@plt+0x4ae8>
   1577c:	str	r4, [sp, #-8]!
   15780:	str	lr, [sp, #4]
   15784:	bl	16318 <__assert_fail@plt+0x5214>
   15788:	cmp	r0, #0
   1578c:	beq	1579c <__assert_fail@plt+0x4698>
   15790:	ldr	r4, [sp]
   15794:	add	sp, sp, #4
   15798:	pop	{pc}		; (ldr pc, [sp], #4)
   1579c:	bl	15bec <__assert_fail@plt+0x4ae8>
   157a0:	str	r4, [sp, #-8]!
   157a4:	str	lr, [sp, #4]
   157a8:	bl	15758 <__assert_fail@plt+0x4654>
   157ac:	ldr	r4, [sp]
   157b0:	add	sp, sp, #4
   157b4:	pop	{pc}		; (ldr pc, [sp], #4)
   157b8:	strd	r4, [sp, #-16]!
   157bc:	str	r6, [sp, #8]
   157c0:	str	lr, [sp, #12]
   157c4:	mov	r5, r0
   157c8:	mov	r4, r1
   157cc:	bl	16354 <__assert_fail@plt+0x5250>
   157d0:	cmp	r0, #0
   157d4:	beq	157e8 <__assert_fail@plt+0x46e4>
   157d8:	ldrd	r4, [sp]
   157dc:	ldr	r6, [sp, #8]
   157e0:	add	sp, sp, #12
   157e4:	pop	{pc}		; (ldr pc, [sp], #4)
   157e8:	adds	r4, r4, #0
   157ec:	movne	r4, #1
   157f0:	cmp	r5, #0
   157f4:	moveq	r4, #1
   157f8:	cmp	r4, #0
   157fc:	beq	157d8 <__assert_fail@plt+0x46d4>
   15800:	bl	15bec <__assert_fail@plt+0x4ae8>
   15804:	str	r4, [sp, #-8]!
   15808:	str	lr, [sp, #4]
   1580c:	cmp	r1, #0
   15810:	orreq	r1, r1, #1
   15814:	bl	16354 <__assert_fail@plt+0x5250>
   15818:	cmp	r0, #0
   1581c:	beq	1582c <__assert_fail@plt+0x4728>
   15820:	ldr	r4, [sp]
   15824:	add	sp, sp, #4
   15828:	pop	{pc}		; (ldr pc, [sp], #4)
   1582c:	bl	15bec <__assert_fail@plt+0x4ae8>
   15830:	strd	r4, [sp, #-16]!
   15834:	str	r6, [sp, #8]
   15838:	str	lr, [sp, #12]
   1583c:	mov	r4, r0
   15840:	mov	r6, r1
   15844:	mov	r5, r2
   15848:	bl	16bbc <__assert_fail@plt+0x5ab8>
   1584c:	cmp	r0, #0
   15850:	beq	15864 <__assert_fail@plt+0x4760>
   15854:	ldrd	r4, [sp]
   15858:	ldr	r6, [sp, #8]
   1585c:	add	sp, sp, #12
   15860:	pop	{pc}		; (ldr pc, [sp], #4)
   15864:	cmp	r4, #0
   15868:	beq	15878 <__assert_fail@plt+0x4774>
   1586c:	cmp	r6, #0
   15870:	cmpne	r5, #0
   15874:	beq	15854 <__assert_fail@plt+0x4750>
   15878:	bl	15bec <__assert_fail@plt+0x4ae8>
   1587c:	str	r4, [sp, #-8]!
   15880:	str	lr, [sp, #4]
   15884:	bl	15830 <__assert_fail@plt+0x472c>
   15888:	ldr	r4, [sp]
   1588c:	add	sp, sp, #4
   15890:	pop	{pc}		; (ldr pc, [sp], #4)
   15894:	str	r4, [sp, #-8]!
   15898:	str	lr, [sp, #4]
   1589c:	mov	ip, r1
   158a0:	mov	r3, r2
   158a4:	cmp	r2, #0
   158a8:	cmpne	r1, #0
   158ac:	moveq	r3, #1
   158b0:	moveq	ip, r3
   158b4:	mov	r2, r3
   158b8:	mov	r1, ip
   158bc:	bl	16bbc <__assert_fail@plt+0x5ab8>
   158c0:	cmp	r0, #0
   158c4:	beq	158d4 <__assert_fail@plt+0x47d0>
   158c8:	ldr	r4, [sp]
   158cc:	add	sp, sp, #4
   158d0:	pop	{pc}		; (ldr pc, [sp], #4)
   158d4:	bl	15bec <__assert_fail@plt+0x4ae8>
   158d8:	str	r4, [sp, #-8]!
   158dc:	str	lr, [sp, #4]
   158e0:	mov	r2, r1
   158e4:	mov	r1, r0
   158e8:	mov	r0, #0
   158ec:	bl	15830 <__assert_fail@plt+0x472c>
   158f0:	ldr	r4, [sp]
   158f4:	add	sp, sp, #4
   158f8:	pop	{pc}		; (ldr pc, [sp], #4)
   158fc:	str	r4, [sp, #-8]!
   15900:	str	lr, [sp, #4]
   15904:	mov	r2, r1
   15908:	mov	r1, r0
   1590c:	mov	r0, #0
   15910:	bl	15894 <__assert_fail@plt+0x4790>
   15914:	ldr	r4, [sp]
   15918:	add	sp, sp, #4
   1591c:	pop	{pc}		; (ldr pc, [sp], #4)
   15920:	strd	r4, [sp, #-16]!
   15924:	str	r6, [sp, #8]
   15928:	str	lr, [sp, #12]
   1592c:	mov	r5, r1
   15930:	ldr	r4, [r1]
   15934:	cmp	r0, #0
   15938:	beq	15968 <__assert_fail@plt+0x4864>
   1593c:	lsr	r3, r4, #1
   15940:	add	r3, r3, #1
   15944:	adds	r4, r4, r3
   15948:	bcs	15984 <__assert_fail@plt+0x4880>
   1594c:	mov	r1, r4
   15950:	bl	15830 <__assert_fail@plt+0x472c>
   15954:	str	r4, [r5]
   15958:	ldrd	r4, [sp]
   1595c:	ldr	r6, [sp, #8]
   15960:	add	sp, sp, #12
   15964:	pop	{pc}		; (ldr pc, [sp], #4)
   15968:	cmp	r4, #0
   1596c:	bne	1594c <__assert_fail@plt+0x4848>
   15970:	mov	r4, #64	; 0x40
   15974:	udiv	r4, r4, r2
   15978:	cmp	r2, #64	; 0x40
   1597c:	addhi	r4, r4, #1
   15980:	b	1594c <__assert_fail@plt+0x4848>
   15984:	bl	15bec <__assert_fail@plt+0x4ae8>
   15988:	str	r4, [sp, #-8]!
   1598c:	str	lr, [sp, #4]
   15990:	mov	r2, #1
   15994:	bl	15920 <__assert_fail@plt+0x481c>
   15998:	ldr	r4, [sp]
   1599c:	add	sp, sp, #4
   159a0:	pop	{pc}		; (ldr pc, [sp], #4)
   159a4:	strd	r4, [sp, #-24]!	; 0xffffffe8
   159a8:	strd	r6, [sp, #8]
   159ac:	str	r8, [sp, #16]
   159b0:	str	lr, [sp, #20]
   159b4:	mov	r5, r1
   159b8:	ldr	lr, [sp, #24]
   159bc:	ldr	ip, [r1]
   159c0:	asr	r4, ip, #1
   159c4:	adds	r4, ip, r4
   159c8:	movvs	r1, #1
   159cc:	movvc	r1, #0
   159d0:	cmp	r1, #0
   159d4:	mvnne	r4, #-2147483648	; 0x80000000
   159d8:	mvn	r8, r3
   159dc:	lsr	r8, r8, #31
   159e0:	cmp	r3, r4
   159e4:	movge	r1, #0
   159e8:	andlt	r1, r8, #1
   159ec:	cmp	r1, #0
   159f0:	movne	r4, r3
   159f4:	smull	r6, r7, r4, lr
   159f8:	asr	r1, r6, #31
   159fc:	cmp	r1, r7
   15a00:	bne	15a18 <__assert_fail@plt+0x4914>
   15a04:	mov	r1, r6
   15a08:	cmp	r6, #63	; 0x3f
   15a0c:	movle	r1, #64	; 0x40
   15a10:	ble	15a1c <__assert_fail@plt+0x4918>
   15a14:	b	15a28 <__assert_fail@plt+0x4924>
   15a18:	mvn	r1, #-2147483648	; 0x80000000
   15a1c:	sdiv	r4, r1, lr
   15a20:	mls	r6, lr, r4, r1
   15a24:	sub	r1, r1, r6
   15a28:	cmp	r0, #0
   15a2c:	moveq	r6, #0
   15a30:	streq	r6, [r5]
   15a34:	sub	r6, r4, ip
   15a38:	cmp	r6, r2
   15a3c:	bge	15a74 <__assert_fail@plt+0x4970>
   15a40:	adds	r2, ip, r2
   15a44:	mov	r4, r2
   15a48:	bvs	15a90 <__assert_fail@plt+0x498c>
   15a4c:	cmp	r2, r3
   15a50:	movle	r3, #0
   15a54:	andgt	r3, r8, #1
   15a58:	cmp	r3, #0
   15a5c:	bne	15a90 <__assert_fail@plt+0x498c>
   15a60:	smull	r2, r3, r2, lr
   15a64:	asr	ip, r2, #31
   15a68:	mov	r1, r2
   15a6c:	cmp	ip, r3
   15a70:	bne	15a90 <__assert_fail@plt+0x498c>
   15a74:	bl	157b8 <__assert_fail@plt+0x46b4>
   15a78:	str	r4, [r5]
   15a7c:	ldrd	r4, [sp]
   15a80:	ldrd	r6, [sp, #8]
   15a84:	ldr	r8, [sp, #16]
   15a88:	add	sp, sp, #20
   15a8c:	pop	{pc}		; (ldr pc, [sp], #4)
   15a90:	bl	15bec <__assert_fail@plt+0x4ae8>
   15a94:	str	r4, [sp, #-8]!
   15a98:	str	lr, [sp, #4]
   15a9c:	bl	162a4 <__assert_fail@plt+0x51a0>
   15aa0:	cmp	r0, #0
   15aa4:	beq	15ab4 <__assert_fail@plt+0x49b0>
   15aa8:	ldr	r4, [sp]
   15aac:	add	sp, sp, #4
   15ab0:	pop	{pc}		; (ldr pc, [sp], #4)
   15ab4:	bl	15bec <__assert_fail@plt+0x4ae8>
   15ab8:	str	r4, [sp, #-8]!
   15abc:	str	lr, [sp, #4]
   15ac0:	mov	r1, #1
   15ac4:	bl	15a94 <__assert_fail@plt+0x4990>
   15ac8:	ldr	r4, [sp]
   15acc:	add	sp, sp, #4
   15ad0:	pop	{pc}		; (ldr pc, [sp], #4)
   15ad4:	str	r4, [sp, #-8]!
   15ad8:	str	lr, [sp, #4]
   15adc:	bl	162a4 <__assert_fail@plt+0x51a0>
   15ae0:	cmp	r0, #0
   15ae4:	beq	15af4 <__assert_fail@plt+0x49f0>
   15ae8:	ldr	r4, [sp]
   15aec:	add	sp, sp, #4
   15af0:	pop	{pc}		; (ldr pc, [sp], #4)
   15af4:	bl	15bec <__assert_fail@plt+0x4ae8>
   15af8:	str	r4, [sp, #-8]!
   15afc:	str	lr, [sp, #4]
   15b00:	mov	r1, #1
   15b04:	bl	15ad4 <__assert_fail@plt+0x49d0>
   15b08:	ldr	r4, [sp]
   15b0c:	add	sp, sp, #4
   15b10:	pop	{pc}		; (ldr pc, [sp], #4)
   15b14:	strd	r4, [sp, #-16]!
   15b18:	str	r6, [sp, #8]
   15b1c:	str	lr, [sp, #12]
   15b20:	mov	r5, r0
   15b24:	mov	r4, r1
   15b28:	mov	r0, r1
   15b2c:	bl	15758 <__assert_fail@plt+0x4654>
   15b30:	mov	r2, r4
   15b34:	mov	r1, r5
   15b38:	bl	10eb8 <memcpy@plt>
   15b3c:	ldrd	r4, [sp]
   15b40:	ldr	r6, [sp, #8]
   15b44:	add	sp, sp, #12
   15b48:	pop	{pc}		; (ldr pc, [sp], #4)
   15b4c:	strd	r4, [sp, #-16]!
   15b50:	str	r6, [sp, #8]
   15b54:	str	lr, [sp, #12]
   15b58:	mov	r5, r0
   15b5c:	mov	r4, r1
   15b60:	mov	r0, r1
   15b64:	bl	1577c <__assert_fail@plt+0x4678>
   15b68:	mov	r2, r4
   15b6c:	mov	r1, r5
   15b70:	bl	10eb8 <memcpy@plt>
   15b74:	ldrd	r4, [sp]
   15b78:	ldr	r6, [sp, #8]
   15b7c:	add	sp, sp, #12
   15b80:	pop	{pc}		; (ldr pc, [sp], #4)
   15b84:	strd	r4, [sp, #-16]!
   15b88:	str	r6, [sp, #8]
   15b8c:	str	lr, [sp, #12]
   15b90:	mov	r5, r0
   15b94:	mov	r4, r1
   15b98:	add	r0, r1, #1
   15b9c:	bl	1577c <__assert_fail@plt+0x4678>
   15ba0:	mov	r2, #0
   15ba4:	strb	r2, [r0, r4]
   15ba8:	mov	r2, r4
   15bac:	mov	r1, r5
   15bb0:	bl	10eb8 <memcpy@plt>
   15bb4:	ldrd	r4, [sp]
   15bb8:	ldr	r6, [sp, #8]
   15bbc:	add	sp, sp, #12
   15bc0:	pop	{pc}		; (ldr pc, [sp], #4)
   15bc4:	str	r4, [sp, #-8]!
   15bc8:	str	lr, [sp, #4]
   15bcc:	mov	r4, r0
   15bd0:	bl	10fd8 <strlen@plt>
   15bd4:	add	r1, r0, #1
   15bd8:	mov	r0, r4
   15bdc:	bl	15b14 <__assert_fail@plt+0x4a10>
   15be0:	ldr	r4, [sp]
   15be4:	add	sp, sp, #4
   15be8:	pop	{pc}		; (ldr pc, [sp], #4)
   15bec:	str	r4, [sp, #-8]!
   15bf0:	str	lr, [sp, #4]
   15bf4:	movw	r3, #33036	; 0x810c
   15bf8:	movt	r3, #2
   15bfc:	ldr	r4, [r3]
   15c00:	mov	r2, #5
   15c04:	movw	r1, #31732	; 0x7bf4
   15c08:	movt	r1, #1
   15c0c:	mov	r0, #0
   15c10:	bl	10ef4 <dcgettext@plt>
   15c14:	mov	r3, r0
   15c18:	movw	r2, #30520	; 0x7738
   15c1c:	movt	r2, #1
   15c20:	mov	r1, #0
   15c24:	mov	r0, r4
   15c28:	bl	10f6c <error@plt>
   15c2c:	bl	110ec <abort@plt>
   15c30:	strd	r4, [sp, #-36]!	; 0xffffffdc
   15c34:	strd	r6, [sp, #8]
   15c38:	strd	r8, [sp, #16]
   15c3c:	strd	sl, [sp, #24]
   15c40:	str	lr, [sp, #32]
   15c44:	sub	sp, sp, #12
   15c48:	str	r0, [sp, #4]
   15c4c:	cmp	r2, #0
   15c50:	beq	15d4c <__assert_fail@plt+0x4c48>
   15c54:	sub	ip, r2, #1
   15c58:	ldrd	r2, [r0]
   15c5c:	mov	r0, #0
   15c60:	mov	r8, r1
   15c64:	asr	r9, r1, #31
   15c68:	str	r1, [sp]
   15c6c:	b	15cbc <__assert_fail@plt+0x4bb8>
   15c70:	orrs	r4, r2, r3
   15c74:	movne	lr, #1
   15c78:	b	15ccc <__assert_fail@plt+0x4bc8>
   15c7c:	mov	sl, r3
   15c80:	ldr	fp, [sp]
   15c84:	umull	r6, r7, r1, r2
   15c88:	mov	r4, r7
   15c8c:	mov	r5, #0
   15c90:	umlal	r4, r5, sl, fp
   15c94:	cmp	r5, #0
   15c98:	bne	15d00 <__assert_fail@plt+0x4bfc>
   15c9c:	cmp	lr, #0
   15ca0:	bne	15d18 <__assert_fail@plt+0x4c14>
   15ca4:	mov	r2, r6
   15ca8:	mov	r3, r4
   15cac:	orr	r0, r0, lr
   15cb0:	sub	ip, ip, #1
   15cb4:	cmn	ip, #1
   15cb8:	beq	15d28 <__assert_fail@plt+0x4c24>
   15cbc:	mov	lr, #0
   15cc0:	cmp	r8, #0
   15cc4:	sbcs	r4, r9, #0
   15cc8:	blt	15c70 <__assert_fail@plt+0x4b6c>
   15ccc:	cmp	r9, #0
   15cd0:	bne	15cec <__assert_fail@plt+0x4be8>
   15cd4:	cmp	r3, #0
   15cd8:	bne	15c7c <__assert_fail@plt+0x4b78>
   15cdc:	umull	r2, r3, r1, r2
   15ce0:	mov	r6, r2
   15ce4:	mov	r4, r3
   15ce8:	b	15c9c <__assert_fail@plt+0x4b98>
   15cec:	cmp	r3, #0
   15cf0:	bne	15d00 <__assert_fail@plt+0x4bfc>
   15cf4:	mov	sl, r9
   15cf8:	mov	fp, r2
   15cfc:	b	15c84 <__assert_fail@plt+0x4b80>
   15d00:	mul	r4, r1, r3
   15d04:	mla	r4, r2, r9, r4
   15d08:	umull	r6, r7, r1, r2
   15d0c:	add	r4, r4, r7
   15d10:	mov	lr, #1
   15d14:	b	15c9c <__assert_fail@plt+0x4b98>
   15d18:	mvn	r2, #0
   15d1c:	mvn	r3, #0
   15d20:	mov	lr, #1
   15d24:	b	15cac <__assert_fail@plt+0x4ba8>
   15d28:	ldr	r1, [sp, #4]
   15d2c:	strd	r2, [r1]
   15d30:	add	sp, sp, #12
   15d34:	ldrd	r4, [sp]
   15d38:	ldrd	r6, [sp, #8]
   15d3c:	ldrd	r8, [sp, #16]
   15d40:	ldrd	sl, [sp, #24]
   15d44:	add	sp, sp, #32
   15d48:	pop	{pc}		; (ldr pc, [sp], #4)
   15d4c:	mov	r0, #0
   15d50:	b	15d30 <__assert_fail@plt+0x4c2c>
   15d54:	strd	r4, [sp, #-28]!	; 0xffffffe4
   15d58:	strd	r6, [sp, #8]
   15d5c:	strd	r8, [sp, #16]
   15d60:	str	lr, [sp, #24]
   15d64:	sub	sp, sp, #20
   15d68:	cmp	r2, #36	; 0x24
   15d6c:	bhi	15dc0 <__assert_fail@plt+0x4cbc>
   15d70:	mov	r5, r0
   15d74:	mov	r6, r1
   15d78:	mov	r7, r2
   15d7c:	mov	r9, r3
   15d80:	cmp	r1, #0
   15d84:	addeq	r6, sp, #12
   15d88:	bl	10ff0 <__errno_location@plt>
   15d8c:	mov	r8, r0
   15d90:	mov	r3, #0
   15d94:	str	r3, [r0]
   15d98:	ldrb	r4, [r5]
   15d9c:	bl	10fc0 <__ctype_b_loc@plt>
   15da0:	ldr	r1, [r0]
   15da4:	mov	r2, r5
   15da8:	lsl	r3, r4, #1
   15dac:	ldrh	r3, [r1, r3]
   15db0:	tst	r3, #8192	; 0x2000
   15db4:	beq	15de0 <__assert_fail@plt+0x4cdc>
   15db8:	ldrb	r4, [r2, #1]!
   15dbc:	b	15da8 <__assert_fail@plt+0x4ca4>
   15dc0:	movw	r3, #31752	; 0x7c08
   15dc4:	movt	r3, #1
   15dc8:	mov	r2, #85	; 0x55
   15dcc:	movw	r1, #31764	; 0x7c14
   15dd0:	movt	r1, #1
   15dd4:	movw	r0, #31780	; 0x7c24
   15dd8:	movt	r0, #1
   15ddc:	bl	11104 <__assert_fail@plt>
   15de0:	cmp	r4, #45	; 0x2d
   15de4:	moveq	r4, #4
   15de8:	beq	15f7c <__assert_fail@plt+0x4e78>
   15dec:	mov	r3, #0
   15df0:	mov	r2, r7
   15df4:	mov	r1, r6
   15df8:	mov	r0, r5
   15dfc:	bl	10ec4 <__strtoull_internal@plt>
   15e00:	strd	r0, [sp]
   15e04:	ldr	r7, [r6]
   15e08:	cmp	r7, r5
   15e0c:	beq	15e30 <__assert_fail@plt+0x4d2c>
   15e10:	ldr	r3, [r8]
   15e14:	cmp	r3, #0
   15e18:	beq	15f54 <__assert_fail@plt+0x4e50>
   15e1c:	cmp	r3, #34	; 0x22
   15e20:	moveq	r4, #1
   15e24:	beq	15f58 <__assert_fail@plt+0x4e54>
   15e28:	mov	r4, #4
   15e2c:	b	15f7c <__assert_fail@plt+0x4e78>
   15e30:	ldr	r3, [sp, #48]	; 0x30
   15e34:	cmp	r3, #0
   15e38:	beq	16294 <__assert_fail@plt+0x5190>
   15e3c:	ldrb	r1, [r5]
   15e40:	cmp	r1, #0
   15e44:	moveq	r4, #4
   15e48:	beq	15f7c <__assert_fail@plt+0x4e78>
   15e4c:	mov	r0, r3
   15e50:	bl	10fe4 <strchr@plt>
   15e54:	cmp	r0, #0
   15e58:	beq	1629c <__assert_fail@plt+0x5198>
   15e5c:	mov	r2, #1
   15e60:	mov	r3, #0
   15e64:	strd	r2, [sp]
   15e68:	ldrb	r5, [r7]
   15e6c:	mov	r4, #0
   15e70:	mov	r1, r5
   15e74:	ldr	r0, [sp, #48]	; 0x30
   15e78:	bl	10fe4 <strchr@plt>
   15e7c:	cmp	r0, #0
   15e80:	beq	15f98 <__assert_fail@plt+0x4e94>
   15e84:	sub	r3, r5, #69	; 0x45
   15e88:	cmp	r3, #47	; 0x2f
   15e8c:	ldrls	pc, [pc, r3, lsl #2]
   15e90:	b	160e4 <__assert_fail@plt+0x4fe0>
   15e94:	andeq	r5, r1, r8, lsr #31
   15e98:	andeq	r6, r1, r4, ror #1
   15e9c:	andeq	r5, r1, r8, lsr #31
   15ea0:	andeq	r6, r1, r4, ror #1
   15ea4:	andeq	r6, r1, r4, ror #1
   15ea8:	andeq	r6, r1, r4, ror #1
   15eac:	andeq	r5, r1, r8, lsr #31
   15eb0:	andeq	r6, r1, r4, ror #1
   15eb4:	andeq	r5, r1, r8, lsr #31
   15eb8:	andeq	r6, r1, r4, ror #1
   15ebc:	andeq	r6, r1, r4, ror #1
   15ec0:	andeq	r5, r1, r8, lsr #31
   15ec4:	andeq	r6, r1, r4, ror #1
   15ec8:	andeq	r6, r1, r4, ror #1
   15ecc:	andeq	r6, r1, r4, ror #1
   15ed0:	andeq	r5, r1, r8, lsr #31
   15ed4:	andeq	r6, r1, r4, ror #1
   15ed8:	andeq	r6, r1, r4, ror #1
   15edc:	andeq	r6, r1, r4, ror #1
   15ee0:	andeq	r6, r1, r4, ror #1
   15ee4:	andeq	r5, r1, r8, lsr #31
   15ee8:	andeq	r5, r1, r8, lsr #31
   15eec:	andeq	r6, r1, r4, ror #1
   15ef0:	andeq	r6, r1, r4, ror #1
   15ef4:	andeq	r6, r1, r4, ror #1
   15ef8:	andeq	r6, r1, r4, ror #1
   15efc:	andeq	r6, r1, r4, ror #1
   15f00:	andeq	r6, r1, r4, ror #1
   15f04:	andeq	r6, r1, r4, ror #1
   15f08:	andeq	r6, r1, r4, ror #1
   15f0c:	andeq	r6, r1, r4, ror #1
   15f10:	andeq	r6, r1, r4, ror #1
   15f14:	andeq	r6, r1, r4, ror #1
   15f18:	andeq	r6, r1, r4, ror #1
   15f1c:	andeq	r5, r1, r8, lsr #31
   15f20:	andeq	r6, r1, r4, ror #1
   15f24:	andeq	r6, r1, r4, ror #1
   15f28:	andeq	r6, r1, r4, ror #1
   15f2c:	andeq	r5, r1, r8, lsr #31
   15f30:	andeq	r6, r1, r4, ror #1
   15f34:	andeq	r5, r1, r8, lsr #31
   15f38:	andeq	r6, r1, r4, ror #1
   15f3c:	andeq	r6, r1, r4, ror #1
   15f40:	andeq	r6, r1, r4, ror #1
   15f44:	andeq	r6, r1, r4, ror #1
   15f48:	andeq	r6, r1, r4, ror #1
   15f4c:	andeq	r6, r1, r4, ror #1
   15f50:	andeq	r5, r1, r8, lsr #31
   15f54:	mov	r4, #0
   15f58:	ldr	r3, [sp, #48]	; 0x30
   15f5c:	cmp	r3, #0
   15f60:	strdeq	r0, [r9]
   15f64:	beq	15f7c <__assert_fail@plt+0x4e78>
   15f68:	ldrb	r5, [r7]
   15f6c:	cmp	r5, #0
   15f70:	bne	15e70 <__assert_fail@plt+0x4d6c>
   15f74:	ldrd	r2, [sp]
   15f78:	strd	r2, [r9]
   15f7c:	mov	r0, r4
   15f80:	add	sp, sp, #20
   15f84:	ldrd	r4, [sp]
   15f88:	ldrd	r6, [sp, #8]
   15f8c:	ldrd	r8, [sp, #16]
   15f90:	add	sp, sp, #24
   15f94:	pop	{pc}		; (ldr pc, [sp], #4)
   15f98:	ldrd	r2, [sp]
   15f9c:	strd	r2, [r9]
   15fa0:	orr	r4, r4, #2
   15fa4:	b	15f7c <__assert_fail@plt+0x4e78>
   15fa8:	mov	r1, #48	; 0x30
   15fac:	ldr	r0, [sp, #48]	; 0x30
   15fb0:	bl	10fe4 <strchr@plt>
   15fb4:	cmp	r0, #0
   15fb8:	beq	160f0 <__assert_fail@plt+0x4fec>
   15fbc:	ldrb	r3, [r7, #1]
   15fc0:	cmp	r3, #68	; 0x44
   15fc4:	beq	160fc <__assert_fail@plt+0x4ff8>
   15fc8:	cmp	r3, #105	; 0x69
   15fcc:	beq	160cc <__assert_fail@plt+0x4fc8>
   15fd0:	cmp	r3, #66	; 0x42
   15fd4:	moveq	r7, #2
   15fd8:	movne	r7, #1
   15fdc:	moveq	r1, #1000	; 0x3e8
   15fe0:	movne	r1, #1024	; 0x400
   15fe4:	sub	r5, r5, #66	; 0x42
   15fe8:	cmp	r5, #53	; 0x35
   15fec:	ldrls	pc, [pc, r5, lsl #2]
   15ff0:	b	16260 <__assert_fail@plt+0x515c>
   15ff4:	andeq	r6, r1, r0, asr r1
   15ff8:	andeq	r6, r1, r0, ror #4
   15ffc:	andeq	r6, r1, r0, ror #4
   16000:	muleq	r1, r8, r1
   16004:	andeq	r6, r1, r0, ror #4
   16008:	andeq	r6, r1, r8, lsr #3
   1600c:	andeq	r6, r1, r0, ror #4
   16010:	andeq	r6, r1, r0, ror #4
   16014:	andeq	r6, r1, r0, ror #4
   16018:			; <UNDEFINED> instruction: 0x000161b8
   1601c:	andeq	r6, r1, r0, ror #4
   16020:	andeq	r6, r1, r8, asr #3
   16024:	andeq	r6, r1, r0, ror #4
   16028:	andeq	r6, r1, r0, ror #4
   1602c:	ldrdeq	r6, [r1], -r8
   16030:	andeq	r6, r1, r0, ror #4
   16034:	andeq	r6, r1, r0, ror #4
   16038:	andeq	r6, r1, r0, ror #4
   1603c:	andeq	r6, r1, r8, ror #3
   16040:	andeq	r6, r1, r0, ror #4
   16044:	andeq	r6, r1, r0, ror #4
   16048:	andeq	r6, r1, r0, ror #4
   1604c:	andeq	r6, r1, r0, ror #4
   16050:	andeq	r6, r1, r0, asr #4
   16054:	andeq	r6, r1, r0, asr r2
   16058:	andeq	r6, r1, r0, ror #4
   1605c:	andeq	r6, r1, r0, ror #4
   16060:	andeq	r6, r1, r0, ror #4
   16064:	andeq	r6, r1, r0, ror #4
   16068:	andeq	r6, r1, r0, ror #4
   1606c:	andeq	r6, r1, r0, ror #4
   16070:	andeq	r6, r1, r0, ror #4
   16074:	andeq	r6, r1, r8, lsl #2
   16078:	andeq	r6, r1, r0, ror r2
   1607c:	andeq	r6, r1, r0, ror #4
   16080:	andeq	r6, r1, r0, ror #4
   16084:	andeq	r6, r1, r0, ror #4
   16088:	andeq	r6, r1, r8, lsr #3
   1608c:	andeq	r6, r1, r0, ror #4
   16090:	andeq	r6, r1, r0, ror #4
   16094:	andeq	r6, r1, r0, ror #4
   16098:			; <UNDEFINED> instruction: 0x000161b8
   1609c:	andeq	r6, r1, r0, ror #4
   160a0:	andeq	r6, r1, r8, asr #3
   160a4:	andeq	r6, r1, r0, ror #4
   160a8:	andeq	r6, r1, r0, ror #4
   160ac:	andeq	r6, r1, r0, ror #4
   160b0:	andeq	r6, r1, r0, ror #4
   160b4:	andeq	r6, r1, r0, ror #4
   160b8:	andeq	r6, r1, r0, ror #4
   160bc:	andeq	r6, r1, r8, ror #3
   160c0:	andeq	r6, r1, r0, ror #4
   160c4:	andeq	r6, r1, r0, ror #4
   160c8:	strdeq	r6, [r1], -r8
   160cc:	ldrb	r3, [r7, #2]
   160d0:	cmp	r3, #66	; 0x42
   160d4:	movne	r7, #1
   160d8:	moveq	r7, #3
   160dc:	mov	r1, #1024	; 0x400
   160e0:	b	15fe4 <__assert_fail@plt+0x4ee0>
   160e4:	mov	r7, #1
   160e8:	mov	r1, #1024	; 0x400
   160ec:	b	15fe4 <__assert_fail@plt+0x4ee0>
   160f0:	mov	r7, #1
   160f4:	mov	r1, #1024	; 0x400
   160f8:	b	15fe4 <__assert_fail@plt+0x4ee0>
   160fc:	mov	r7, #2
   16100:	mov	r1, #1000	; 0x3e8
   16104:	b	15fe4 <__assert_fail@plt+0x4ee0>
   16108:	ldr	r3, [sp]
   1610c:	ldr	ip, [sp, #4]
   16110:	lsl	r2, ip, #9
   16114:	orr	r2, r2, r3, lsr #23
   16118:	lsl	r3, r3, #9
   1611c:	mov	r0, #0
   16120:	mov	r1, r0
   16124:	lsr	r0, ip, #23
   16128:	orrs	r1, r0, r1
   1612c:	streq	r3, [sp]
   16130:	streq	r2, [sp, #4]
   16134:	moveq	r0, #0
   16138:	beq	16274 <__assert_fail@plt+0x5170>
   1613c:	mvn	r2, #0
   16140:	mvn	r3, #0
   16144:	strd	r2, [sp]
   16148:	mov	r0, #1
   1614c:	b	16274 <__assert_fail@plt+0x5170>
   16150:	ldr	r3, [sp]
   16154:	ldr	ip, [sp, #4]
   16158:	lsl	r2, ip, #10
   1615c:	orr	r2, r2, r3, lsr #22
   16160:	lsl	r3, r3, #10
   16164:	mov	r0, #0
   16168:	mov	r1, r0
   1616c:	lsr	r0, ip, #22
   16170:	orrs	r1, r0, r1
   16174:	streq	r3, [sp]
   16178:	streq	r2, [sp, #4]
   1617c:	moveq	r0, #0
   16180:	beq	16274 <__assert_fail@plt+0x5170>
   16184:	mvn	r2, #0
   16188:	mvn	r3, #0
   1618c:	strd	r2, [sp]
   16190:	mov	r0, #1
   16194:	b	16274 <__assert_fail@plt+0x5170>
   16198:	mov	r2, #6
   1619c:	mov	r0, sp
   161a0:	bl	15c30 <__assert_fail@plt+0x4b2c>
   161a4:	b	16274 <__assert_fail@plt+0x5170>
   161a8:	mov	r2, #3
   161ac:	mov	r0, sp
   161b0:	bl	15c30 <__assert_fail@plt+0x4b2c>
   161b4:	b	16274 <__assert_fail@plt+0x5170>
   161b8:	mov	r2, #1
   161bc:	mov	r0, sp
   161c0:	bl	15c30 <__assert_fail@plt+0x4b2c>
   161c4:	b	16274 <__assert_fail@plt+0x5170>
   161c8:	mov	r2, #2
   161cc:	mov	r0, sp
   161d0:	bl	15c30 <__assert_fail@plt+0x4b2c>
   161d4:	b	16274 <__assert_fail@plt+0x5170>
   161d8:	mov	r2, #5
   161dc:	mov	r0, sp
   161e0:	bl	15c30 <__assert_fail@plt+0x4b2c>
   161e4:	b	16274 <__assert_fail@plt+0x5170>
   161e8:	mov	r2, #4
   161ec:	mov	r0, sp
   161f0:	bl	15c30 <__assert_fail@plt+0x4b2c>
   161f4:	b	16274 <__assert_fail@plt+0x5170>
   161f8:	ldr	r3, [sp]
   161fc:	ldr	r2, [sp, #4]
   16200:	adds	r3, r3, r3
   16204:	adc	r2, r2, r2
   16208:	mov	r1, #0
   1620c:	mov	r0, r1
   16210:	ldr	r1, [sp, #4]
   16214:	lsr	r1, r1, #31
   16218:	orrs	r1, r1, r0
   1621c:	streq	r3, [sp]
   16220:	streq	r2, [sp, #4]
   16224:	moveq	r0, #0
   16228:	beq	16274 <__assert_fail@plt+0x5170>
   1622c:	mvn	r2, #0
   16230:	mvn	r3, #0
   16234:	strd	r2, [sp]
   16238:	mov	r0, #1
   1623c:	b	16274 <__assert_fail@plt+0x5170>
   16240:	mov	r2, #8
   16244:	mov	r0, sp
   16248:	bl	15c30 <__assert_fail@plt+0x4b2c>
   1624c:	b	16274 <__assert_fail@plt+0x5170>
   16250:	mov	r2, #7
   16254:	mov	r0, sp
   16258:	bl	15c30 <__assert_fail@plt+0x4b2c>
   1625c:	b	16274 <__assert_fail@plt+0x5170>
   16260:	ldrd	r2, [sp]
   16264:	strd	r2, [r9]
   16268:	orr	r4, r4, #2
   1626c:	b	15f7c <__assert_fail@plt+0x4e78>
   16270:	mov	r0, #0
   16274:	orr	r4, r4, r0
   16278:	ldr	r3, [r6]
   1627c:	add	r2, r3, r7
   16280:	str	r2, [r6]
   16284:	ldrb	r3, [r3, r7]
   16288:	cmp	r3, #0
   1628c:	orrne	r4, r4, #2
   16290:	b	15f74 <__assert_fail@plt+0x4e70>
   16294:	mov	r4, #4
   16298:	b	15f7c <__assert_fail@plt+0x4e78>
   1629c:	mov	r4, #4
   162a0:	b	15f7c <__assert_fail@plt+0x4e78>
   162a4:	strd	r4, [sp, #-16]!
   162a8:	str	r6, [sp, #8]
   162ac:	str	lr, [sp, #12]
   162b0:	cmp	r1, #0
   162b4:	cmpne	r0, #0
   162b8:	beq	162f4 <__assert_fail@plt+0x51f0>
   162bc:	mov	r2, r0
   162c0:	mov	r3, r1
   162c4:	umull	r4, r5, r0, r1
   162c8:	adds	r1, r5, #0
   162cc:	movne	r1, #1
   162d0:	cmp	r4, #0
   162d4:	movlt	r1, #1
   162d8:	cmp	r1, #0
   162dc:	beq	162fc <__assert_fail@plt+0x51f8>
   162e0:	bl	10ff0 <__errno_location@plt>
   162e4:	mov	r3, #12
   162e8:	str	r3, [r0]
   162ec:	mov	r0, #0
   162f0:	b	16308 <__assert_fail@plt+0x5204>
   162f4:	mov	r3, #1
   162f8:	mov	r2, r3
   162fc:	mov	r1, r3
   16300:	mov	r0, r2
   16304:	bl	10e4c <calloc@plt>
   16308:	ldrd	r4, [sp]
   1630c:	ldr	r6, [sp, #8]
   16310:	add	sp, sp, #12
   16314:	pop	{pc}		; (ldr pc, [sp], #4)
   16318:	str	r4, [sp, #-8]!
   1631c:	str	lr, [sp, #4]
   16320:	cmp	r0, #0
   16324:	beq	16340 <__assert_fail@plt+0x523c>
   16328:	bge	16344 <__assert_fail@plt+0x5240>
   1632c:	bl	10ff0 <__errno_location@plt>
   16330:	mov	r3, #12
   16334:	str	r3, [r0]
   16338:	mov	r0, #0
   1633c:	b	16348 <__assert_fail@plt+0x5244>
   16340:	mov	r0, #1
   16344:	bl	10f84 <malloc@plt>
   16348:	ldr	r4, [sp]
   1634c:	add	sp, sp, #4
   16350:	pop	{pc}		; (ldr pc, [sp], #4)
   16354:	str	r4, [sp, #-8]!
   16358:	str	lr, [sp, #4]
   1635c:	cmp	r0, #0
   16360:	beq	16384 <__assert_fail@plt+0x5280>
   16364:	cmp	r1, #0
   16368:	beq	16390 <__assert_fail@plt+0x528c>
   1636c:	cmp	r1, #0
   16370:	blt	1639c <__assert_fail@plt+0x5298>
   16374:	bl	10f00 <realloc@plt>
   16378:	ldr	r4, [sp]
   1637c:	add	sp, sp, #4
   16380:	pop	{pc}		; (ldr pc, [sp], #4)
   16384:	mov	r0, r1
   16388:	bl	16318 <__assert_fail@plt+0x5214>
   1638c:	b	16378 <__assert_fail@plt+0x5274>
   16390:	bl	12200 <__assert_fail@plt+0x10fc>
   16394:	mov	r0, #0
   16398:	b	16378 <__assert_fail@plt+0x5274>
   1639c:	bl	10ff0 <__errno_location@plt>
   163a0:	mov	r3, #12
   163a4:	str	r3, [r0]
   163a8:	mov	r0, #0
   163ac:	b	16378 <__assert_fail@plt+0x5274>
   163b0:	str	r4, [sp, #-8]!
   163b4:	str	lr, [sp, #4]
   163b8:	mov	r0, #1
   163bc:	bl	116c0 <__assert_fail@plt+0x5bc>
   163c0:	ldr	r4, [sp]
   163c4:	add	sp, sp, #4
   163c8:	pop	{pc}		; (ldr pc, [sp], #4)
   163cc:	strd	r4, [sp, #-36]!	; 0xffffffdc
   163d0:	strd	r6, [sp, #8]
   163d4:	strd	r8, [sp, #16]
   163d8:	strd	sl, [sp, #24]
   163dc:	str	lr, [sp, #32]
   163e0:	sub	sp, sp, #12
   163e4:	str	r0, [sp]
   163e8:	mov	r5, r1
   163ec:	mov	r6, r2
   163f0:	str	r2, [sp, #4]
   163f4:	mov	r9, r3
   163f8:	bl	10fd8 <strlen@plt>
   163fc:	ldr	r4, [r5]
   16400:	cmp	r4, #0
   16404:	beq	164c0 <__assert_fail@plt+0x53bc>
   16408:	mov	r8, r0
   1640c:	mov	fp, #0
   16410:	mvn	sl, #0
   16414:	mov	r7, fp
   16418:	b	16438 <__assert_fail@plt+0x5334>
   1641c:	mov	sl, r7
   16420:	b	164a0 <__assert_fail@plt+0x539c>
   16424:	add	r7, r7, #1
   16428:	ldr	r4, [r5, #4]!
   1642c:	add	r6, r6, r9
   16430:	cmp	r4, #0
   16434:	beq	16498 <__assert_fail@plt+0x5394>
   16438:	mov	r2, r8
   1643c:	ldr	r1, [sp]
   16440:	mov	r0, r4
   16444:	bl	110e0 <strncmp@plt>
   16448:	cmp	r0, #0
   1644c:	bne	16424 <__assert_fail@plt+0x5320>
   16450:	mov	r0, r4
   16454:	bl	10fd8 <strlen@plt>
   16458:	cmp	r0, r8
   1645c:	beq	1641c <__assert_fail@plt+0x5318>
   16460:	cmn	sl, #1
   16464:	moveq	sl, r7
   16468:	beq	16424 <__assert_fail@plt+0x5320>
   1646c:	ldr	r3, [sp, #4]
   16470:	cmp	r3, #0
   16474:	moveq	fp, #1
   16478:	beq	16424 <__assert_fail@plt+0x5320>
   1647c:	mov	r2, r9
   16480:	mov	r1, r6
   16484:	mla	r0, r9, sl, r3
   16488:	bl	10edc <memcmp@plt>
   1648c:	cmp	r0, #0
   16490:	movne	fp, #1
   16494:	b	16424 <__assert_fail@plt+0x5320>
   16498:	cmp	fp, #0
   1649c:	mvnne	sl, #1
   164a0:	mov	r0, sl
   164a4:	add	sp, sp, #12
   164a8:	ldrd	r4, [sp]
   164ac:	ldrd	r6, [sp, #8]
   164b0:	ldrd	r8, [sp, #16]
   164b4:	ldrd	sl, [sp, #24]
   164b8:	add	sp, sp, #32
   164bc:	pop	{pc}		; (ldr pc, [sp], #4)
   164c0:	mvn	sl, #0
   164c4:	b	164a0 <__assert_fail@plt+0x539c>
   164c8:	strd	r4, [sp, #-16]!
   164cc:	str	r6, [sp, #8]
   164d0:	str	lr, [sp, #12]
   164d4:	mov	r6, r0
   164d8:	ldr	r0, [r1]
   164dc:	cmp	r0, #0
   164e0:	beq	16528 <__assert_fail@plt+0x5424>
   164e4:	mov	r4, r1
   164e8:	mov	r5, #0
   164ec:	mov	r1, r6
   164f0:	bl	10e70 <strcmp@plt>
   164f4:	cmp	r0, #0
   164f8:	beq	16514 <__assert_fail@plt+0x5410>
   164fc:	add	r5, r5, #1
   16500:	ldr	r0, [r4, #4]!
   16504:	cmp	r0, #0
   16508:	bne	164ec <__assert_fail@plt+0x53e8>
   1650c:	mvn	r0, #0
   16510:	b	16518 <__assert_fail@plt+0x5414>
   16514:	mov	r0, r5
   16518:	ldrd	r4, [sp]
   1651c:	ldr	r6, [sp, #8]
   16520:	add	sp, sp, #12
   16524:	pop	{pc}		; (ldr pc, [sp], #4)
   16528:	mvn	r0, #0
   1652c:	b	16518 <__assert_fail@plt+0x5414>
   16530:	strd	r4, [sp, #-16]!
   16534:	str	r6, [sp, #8]
   16538:	str	lr, [sp, #12]
   1653c:	sub	sp, sp, #8
   16540:	mov	r6, r0
   16544:	mov	r5, r1
   16548:	cmn	r2, #1
   1654c:	mov	r2, #5
   16550:	movweq	r1, #31820	; 0x7c4c
   16554:	movteq	r1, #1
   16558:	movwne	r1, #31848	; 0x7c68
   1655c:	movtne	r1, #1
   16560:	mov	r0, #0
   16564:	bl	10ef4 <dcgettext@plt>
   16568:	mov	r4, r0
   1656c:	mov	r2, r5
   16570:	mov	r1, #8
   16574:	mov	r0, #0
   16578:	bl	14de8 <__assert_fail@plt+0x3ce4>
   1657c:	mov	r5, r0
   16580:	mov	r1, r6
   16584:	mov	r0, #1
   16588:	bl	15148 <__assert_fail@plt+0x4044>
   1658c:	str	r0, [sp]
   16590:	mov	r3, r5
   16594:	mov	r2, r4
   16598:	mov	r1, #0
   1659c:	mov	r0, r1
   165a0:	bl	10f6c <error@plt>
   165a4:	add	sp, sp, #8
   165a8:	ldrd	r4, [sp]
   165ac:	ldr	r6, [sp, #8]
   165b0:	add	sp, sp, #12
   165b4:	pop	{pc}		; (ldr pc, [sp], #4)
   165b8:	strd	r4, [sp, #-36]!	; 0xffffffdc
   165bc:	strd	r6, [sp, #8]
   165c0:	strd	r8, [sp, #16]
   165c4:	strd	sl, [sp, #24]
   165c8:	str	lr, [sp, #32]
   165cc:	sub	sp, sp, #12
   165d0:	mov	r7, r0
   165d4:	mov	r4, r1
   165d8:	mov	r8, r2
   165dc:	mov	r2, #5
   165e0:	movw	r1, #31880	; 0x7c88
   165e4:	movt	r1, #1
   165e8:	mov	r0, #0
   165ec:	bl	10ef4 <dcgettext@plt>
   165f0:	movw	r3, #33128	; 0x8168
   165f4:	movt	r3, #2
   165f8:	ldr	r1, [r3]
   165fc:	bl	10e58 <fputs_unlocked@plt>
   16600:	ldr	r5, [r7]
   16604:	cmp	r5, #0
   16608:	beq	166b4 <__assert_fail@plt+0x55b0>
   1660c:	mov	r3, #0
   16610:	str	r3, [sp]
   16614:	mov	r6, r3
   16618:	movw	sl, #33128	; 0x8168
   1661c:	movt	sl, #2
   16620:	movw	fp, #31904	; 0x7ca0
   16624:	movt	fp, #1
   16628:	movw	r3, #31912	; 0x7ca8
   1662c:	movt	r3, #1
   16630:	str	r3, [sp, #4]
   16634:	b	16670 <__assert_fail@plt+0x556c>
   16638:	ldr	r9, [sl]
   1663c:	mov	r0, r5
   16640:	bl	15164 <__assert_fail@plt+0x4060>
   16644:	mov	r3, r0
   16648:	mov	r2, fp
   1664c:	mov	r1, #1
   16650:	mov	r0, r9
   16654:	bl	11044 <__fprintf_chk@plt>
   16658:	str	r4, [sp]
   1665c:	add	r6, r6, #1
   16660:	ldr	r5, [r7, #4]!
   16664:	add	r4, r4, r8
   16668:	cmp	r5, #0
   1666c:	beq	166b4 <__assert_fail@plt+0x55b0>
   16670:	cmp	r6, #0
   16674:	beq	16638 <__assert_fail@plt+0x5534>
   16678:	mov	r2, r8
   1667c:	mov	r1, r4
   16680:	ldr	r0, [sp]
   16684:	bl	10edc <memcmp@plt>
   16688:	cmp	r0, #0
   1668c:	bne	16638 <__assert_fail@plt+0x5534>
   16690:	ldr	r9, [sl]
   16694:	mov	r0, r5
   16698:	bl	15164 <__assert_fail@plt+0x4060>
   1669c:	mov	r3, r0
   166a0:	ldr	r2, [sp, #4]
   166a4:	mov	r1, #1
   166a8:	mov	r0, r9
   166ac:	bl	11044 <__fprintf_chk@plt>
   166b0:	b	1665c <__assert_fail@plt+0x5558>
   166b4:	movw	r3, #33128	; 0x8168
   166b8:	movt	r3, #2
   166bc:	ldr	r0, [r3]
   166c0:	ldr	r3, [r0, #20]
   166c4:	ldr	r2, [r0, #24]
   166c8:	cmp	r3, r2
   166cc:	addcc	r2, r3, #1
   166d0:	strcc	r2, [r0, #20]
   166d4:	movcc	r2, #10
   166d8:	strbcc	r2, [r3]
   166dc:	bcs	166fc <__assert_fail@plt+0x55f8>
   166e0:	add	sp, sp, #12
   166e4:	ldrd	r4, [sp]
   166e8:	ldrd	r6, [sp, #8]
   166ec:	ldrd	r8, [sp, #16]
   166f0:	ldrd	sl, [sp, #24]
   166f4:	add	sp, sp, #32
   166f8:	pop	{pc}		; (ldr pc, [sp], #4)
   166fc:	mov	r1, #10
   16700:	bl	11074 <__overflow@plt>
   16704:	b	166e0 <__assert_fail@plt+0x55dc>
   16708:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1670c:	strd	r6, [sp, #8]
   16710:	str	r8, [sp, #16]
   16714:	str	lr, [sp, #20]
   16718:	mov	r7, r0
   1671c:	mov	r5, r1
   16720:	mov	r4, r2
   16724:	mov	r6, r3
   16728:	ldrb	r3, [sp, #32]
   1672c:	cmp	r3, #0
   16730:	beq	16764 <__assert_fail@plt+0x5660>
   16734:	ldr	r3, [sp, #24]
   16738:	mov	r2, r6
   1673c:	mov	r1, r4
   16740:	mov	r0, r5
   16744:	bl	163cc <__assert_fail@plt+0x52c8>
   16748:	cmp	r0, #0
   1674c:	blt	16774 <__assert_fail@plt+0x5670>
   16750:	ldrd	r4, [sp]
   16754:	ldrd	r6, [sp, #8]
   16758:	ldr	r8, [sp, #16]
   1675c:	add	sp, sp, #20
   16760:	pop	{pc}		; (ldr pc, [sp], #4)
   16764:	mov	r1, r2
   16768:	mov	r0, r5
   1676c:	bl	164c8 <__assert_fail@plt+0x53c4>
   16770:	b	16748 <__assert_fail@plt+0x5644>
   16774:	mov	r2, r0
   16778:	mov	r1, r5
   1677c:	mov	r0, r7
   16780:	bl	16530 <__assert_fail@plt+0x542c>
   16784:	ldr	r2, [sp, #24]
   16788:	mov	r1, r6
   1678c:	mov	r0, r4
   16790:	bl	165b8 <__assert_fail@plt+0x54b4>
   16794:	ldr	r3, [sp, #28]
   16798:	blx	r3
   1679c:	mvn	r0, #0
   167a0:	b	16750 <__assert_fail@plt+0x564c>
   167a4:	strd	r4, [sp, #-24]!	; 0xffffffe8
   167a8:	strd	r6, [sp, #8]
   167ac:	str	r8, [sp, #16]
   167b0:	str	lr, [sp, #20]
   167b4:	ldr	r7, [r1]
   167b8:	cmp	r7, #0
   167bc:	beq	167f8 <__assert_fail@plt+0x56f4>
   167c0:	mov	r6, r3
   167c4:	mov	r8, r0
   167c8:	mov	r4, r2
   167cc:	mov	r5, r1
   167d0:	mov	r2, r6
   167d4:	mov	r1, r4
   167d8:	mov	r0, r8
   167dc:	bl	10edc <memcmp@plt>
   167e0:	cmp	r0, #0
   167e4:	beq	167f8 <__assert_fail@plt+0x56f4>
   167e8:	ldr	r7, [r5, #4]!
   167ec:	add	r4, r4, r6
   167f0:	cmp	r7, #0
   167f4:	bne	167d0 <__assert_fail@plt+0x56cc>
   167f8:	mov	r0, r7
   167fc:	ldrd	r4, [sp]
   16800:	ldrd	r6, [sp, #8]
   16804:	ldr	r8, [sp, #16]
   16808:	add	sp, sp, #20
   1680c:	pop	{pc}		; (ldr pc, [sp], #4)
   16810:	strd	r4, [sp, #-16]!
   16814:	str	r6, [sp, #8]
   16818:	str	lr, [sp, #12]
   1681c:	mov	r5, r0
   16820:	bl	10f54 <__fpending@plt>
   16824:	mov	r6, r0
   16828:	ldr	r4, [r5]
   1682c:	and	r4, r4, #32
   16830:	mov	r0, r5
   16834:	bl	12024 <__assert_fail@plt+0xf20>
   16838:	cmp	r4, #0
   1683c:	bne	16870 <__assert_fail@plt+0x576c>
   16840:	cmp	r0, #0
   16844:	beq	16860 <__assert_fail@plt+0x575c>
   16848:	cmp	r6, #0
   1684c:	bne	1688c <__assert_fail@plt+0x5788>
   16850:	bl	10ff0 <__errno_location@plt>
   16854:	ldr	r0, [r0]
   16858:	subs	r0, r0, #9
   1685c:	mvnne	r0, #0
   16860:	ldrd	r4, [sp]
   16864:	ldr	r6, [sp, #8]
   16868:	add	sp, sp, #12
   1686c:	pop	{pc}		; (ldr pc, [sp], #4)
   16870:	cmp	r0, #0
   16874:	bne	16894 <__assert_fail@plt+0x5790>
   16878:	bl	10ff0 <__errno_location@plt>
   1687c:	mov	r3, #0
   16880:	str	r3, [r0]
   16884:	mvn	r0, #0
   16888:	b	16860 <__assert_fail@plt+0x575c>
   1688c:	mvn	r0, #0
   16890:	b	16860 <__assert_fail@plt+0x575c>
   16894:	mvn	r0, #0
   16898:	b	16860 <__assert_fail@plt+0x575c>
   1689c:	push	{r1, r2, r3}
   168a0:	strd	r4, [sp, #-16]!
   168a4:	str	r6, [sp, #8]
   168a8:	str	lr, [sp, #12]
   168ac:	sub	sp, sp, #12
   168b0:	mov	r5, r0
   168b4:	ldr	r1, [sp, #28]
   168b8:	add	r3, sp, #32
   168bc:	str	r3, [sp, #4]
   168c0:	cmp	r1, #0
   168c4:	beq	1690c <__assert_fail@plt+0x5808>
   168c8:	movw	r3, #1030	; 0x406
   168cc:	cmp	r1, r3
   168d0:	beq	16948 <__assert_fail@plt+0x5844>
   168d4:	cmp	r1, #11
   168d8:	beq	16af8 <__assert_fail@plt+0x59f4>
   168dc:	bgt	16a84 <__assert_fail@plt+0x5980>
   168e0:	cmp	r1, #3
   168e4:	beq	16af8 <__assert_fail@plt+0x59f4>
   168e8:	ble	16a44 <__assert_fail@plt+0x5940>
   168ec:	cmp	r1, #8
   168f0:	beq	16a64 <__assert_fail@plt+0x5960>
   168f4:	ble	16a5c <__assert_fail@plt+0x5958>
   168f8:	cmp	r1, #9
   168fc:	beq	16af8 <__assert_fail@plt+0x59f4>
   16900:	cmp	r1, #10
   16904:	bne	16abc <__assert_fail@plt+0x59b8>
   16908:	b	16a64 <__assert_fail@plt+0x5960>
   1690c:	ldr	r3, [sp, #4]
   16910:	add	r2, r3, #4
   16914:	str	r2, [sp, #4]
   16918:	ldr	r2, [r3]
   1691c:	mov	r1, #0
   16920:	bl	11068 <fcntl64@plt>
   16924:	mov	r4, r0
   16928:	mov	r0, r4
   1692c:	add	sp, sp, #12
   16930:	ldrd	r4, [sp]
   16934:	ldr	r6, [sp, #8]
   16938:	ldr	lr, [sp, #12]
   1693c:	add	sp, sp, #16
   16940:	add	sp, sp, #12
   16944:	bx	lr
   16948:	ldr	r3, [sp, #4]
   1694c:	add	r2, r3, #4
   16950:	str	r2, [sp, #4]
   16954:	ldr	r6, [r3]
   16958:	movw	r3, #33472	; 0x82c0
   1695c:	movt	r3, #2
   16960:	ldr	r3, [r3]
   16964:	cmp	r3, #0
   16968:	blt	169d0 <__assert_fail@plt+0x58cc>
   1696c:	mov	r2, r6
   16970:	movw	r1, #1030	; 0x406
   16974:	bl	11068 <fcntl64@plt>
   16978:	subs	r4, r0, #0
   1697c:	blt	16994 <__assert_fail@plt+0x5890>
   16980:	movw	r3, #33472	; 0x82c0
   16984:	movt	r3, #2
   16988:	mov	r2, #1
   1698c:	str	r2, [r3]
   16990:	b	16928 <__assert_fail@plt+0x5824>
   16994:	bl	10ff0 <__errno_location@plt>
   16998:	ldr	r3, [r0]
   1699c:	cmp	r3, #22
   169a0:	bne	16980 <__assert_fail@plt+0x587c>
   169a4:	mov	r2, r6
   169a8:	mov	r1, #0
   169ac:	mov	r0, r5
   169b0:	bl	11068 <fcntl64@plt>
   169b4:	subs	r4, r0, #0
   169b8:	blt	16928 <__assert_fail@plt+0x5824>
   169bc:	movw	r3, #33472	; 0x82c0
   169c0:	movt	r3, #2
   169c4:	mvn	r2, #0
   169c8:	str	r2, [r3]
   169cc:	b	169f8 <__assert_fail@plt+0x58f4>
   169d0:	mov	r2, r6
   169d4:	mov	r1, #0
   169d8:	bl	11068 <fcntl64@plt>
   169dc:	subs	r4, r0, #0
   169e0:	blt	16928 <__assert_fail@plt+0x5824>
   169e4:	movw	r3, #33472	; 0x82c0
   169e8:	movt	r3, #2
   169ec:	ldr	r3, [r3]
   169f0:	cmn	r3, #1
   169f4:	bne	16928 <__assert_fail@plt+0x5824>
   169f8:	mov	r1, #1
   169fc:	mov	r0, r4
   16a00:	bl	11068 <fcntl64@plt>
   16a04:	subs	r2, r0, #0
   16a08:	blt	16a24 <__assert_fail@plt+0x5920>
   16a0c:	orr	r2, r2, #1
   16a10:	mov	r1, #2
   16a14:	mov	r0, r4
   16a18:	bl	11068 <fcntl64@plt>
   16a1c:	cmn	r0, #1
   16a20:	bne	16928 <__assert_fail@plt+0x5824>
   16a24:	bl	10ff0 <__errno_location@plt>
   16a28:	mov	r5, r0
   16a2c:	ldr	r6, [r0]
   16a30:	mov	r0, r4
   16a34:	bl	110f8 <close@plt>
   16a38:	str	r6, [r5]
   16a3c:	mvn	r4, #0
   16a40:	b	16928 <__assert_fail@plt+0x5824>
   16a44:	cmp	r1, #1
   16a48:	beq	16af8 <__assert_fail@plt+0x59f4>
   16a4c:	bgt	16a64 <__assert_fail@plt+0x5960>
   16a50:	cmp	r1, #0
   16a54:	bne	16abc <__assert_fail@plt+0x59b8>
   16a58:	b	16a64 <__assert_fail@plt+0x5960>
   16a5c:	cmp	r1, #4
   16a60:	bne	16abc <__assert_fail@plt+0x59b8>
   16a64:	ldr	r3, [sp, #4]
   16a68:	add	r2, r3, #4
   16a6c:	str	r2, [sp, #4]
   16a70:	ldr	r2, [r3]
   16a74:	mov	r0, r5
   16a78:	bl	11068 <fcntl64@plt>
   16a7c:	mov	r4, r0
   16a80:	b	16928 <__assert_fail@plt+0x5824>
   16a84:	movw	r3, #1031	; 0x407
   16a88:	cmp	r1, r3
   16a8c:	bgt	16adc <__assert_fail@plt+0x59d8>
   16a90:	movw	r3, #1030	; 0x406
   16a94:	cmp	r1, r3
   16a98:	bge	16a64 <__assert_fail@plt+0x5960>
   16a9c:	movw	r3, #1025	; 0x401
   16aa0:	cmp	r1, r3
   16aa4:	beq	16af8 <__assert_fail@plt+0x59f4>
   16aa8:	movw	r3, #1026	; 0x402
   16aac:	cmp	r1, r3
   16ab0:	beq	16a64 <__assert_fail@plt+0x5960>
   16ab4:	cmp	r1, #1024	; 0x400
   16ab8:	beq	16a64 <__assert_fail@plt+0x5960>
   16abc:	ldr	r3, [sp, #4]
   16ac0:	add	r2, r3, #4
   16ac4:	str	r2, [sp, #4]
   16ac8:	ldr	r2, [r3]
   16acc:	mov	r0, r5
   16ad0:	bl	11068 <fcntl64@plt>
   16ad4:	mov	r4, r0
   16ad8:	b	16928 <__assert_fail@plt+0x5824>
   16adc:	movw	r3, #1033	; 0x409
   16ae0:	cmp	r1, r3
   16ae4:	beq	16a64 <__assert_fail@plt+0x5960>
   16ae8:	blt	16af8 <__assert_fail@plt+0x59f4>
   16aec:	movw	r3, #1034	; 0x40a
   16af0:	cmp	r1, r3
   16af4:	bne	16abc <__assert_fail@plt+0x59b8>
   16af8:	mov	r0, r5
   16afc:	bl	11068 <fcntl64@plt>
   16b00:	mov	r4, r0
   16b04:	b	16928 <__assert_fail@plt+0x5824>
   16b08:	str	r4, [sp, #-8]!
   16b0c:	str	lr, [sp, #4]
   16b10:	mov	r0, #14
   16b14:	bl	11098 <nl_langinfo@plt>
   16b18:	cmp	r0, #0
   16b1c:	beq	16b40 <__assert_fail@plt+0x5a3c>
   16b20:	ldrb	r2, [r0]
   16b24:	movw	r3, #31920	; 0x7cb0
   16b28:	movt	r3, #1
   16b2c:	cmp	r2, #0
   16b30:	moveq	r0, r3
   16b34:	ldr	r4, [sp]
   16b38:	add	sp, sp, #4
   16b3c:	pop	{pc}		; (ldr pc, [sp], #4)
   16b40:	movw	r0, #31920	; 0x7cb0
   16b44:	movt	r0, #1
   16b48:	b	16b34 <__assert_fail@plt+0x5a30>
   16b4c:	strd	r4, [sp, #-20]!	; 0xffffffec
   16b50:	strd	r6, [sp, #8]
   16b54:	str	lr, [sp, #16]
   16b58:	sub	sp, sp, #12
   16b5c:	mov	r7, r1
   16b60:	mov	r5, r2
   16b64:	subs	r6, r0, #0
   16b68:	addeq	r6, sp, #4
   16b6c:	mov	r0, r6
   16b70:	bl	10f60 <mbrtowc@plt>
   16b74:	mov	r4, r0
   16b78:	cmp	r5, #0
   16b7c:	cmnne	r0, #3
   16b80:	bhi	16b9c <__assert_fail@plt+0x5a98>
   16b84:	mov	r0, r4
   16b88:	add	sp, sp, #12
   16b8c:	ldrd	r4, [sp]
   16b90:	ldrd	r6, [sp, #8]
   16b94:	add	sp, sp, #16
   16b98:	pop	{pc}		; (ldr pc, [sp], #4)
   16b9c:	mov	r0, #0
   16ba0:	bl	16bf8 <__assert_fail@plt+0x5af4>
   16ba4:	cmp	r0, #0
   16ba8:	bne	16b84 <__assert_fail@plt+0x5a80>
   16bac:	ldrb	r3, [r7]
   16bb0:	str	r3, [r6]
   16bb4:	mov	r4, #1
   16bb8:	b	16b84 <__assert_fail@plt+0x5a80>
   16bbc:	str	r4, [sp, #-8]!
   16bc0:	str	lr, [sp, #4]
   16bc4:	umull	r2, r3, r1, r2
   16bc8:	cmp	r3, #0
   16bcc:	bne	16be4 <__assert_fail@plt+0x5ae0>
   16bd0:	mov	r1, r2
   16bd4:	bl	16354 <__assert_fail@plt+0x5250>
   16bd8:	ldr	r4, [sp]
   16bdc:	add	sp, sp, #4
   16be0:	pop	{pc}		; (ldr pc, [sp], #4)
   16be4:	bl	10ff0 <__errno_location@plt>
   16be8:	mov	r3, #12
   16bec:	str	r3, [r0]
   16bf0:	mov	r0, #0
   16bf4:	b	16bd8 <__assert_fail@plt+0x5ad4>
   16bf8:	push	{lr}		; (str lr, [sp, #-4]!)
   16bfc:	sub	sp, sp, #268	; 0x10c
   16c00:	movw	r2, #257	; 0x101
   16c04:	add	r1, sp, #4
   16c08:	bl	16c54 <__assert_fail@plt+0x5b50>
   16c0c:	cmp	r0, #0
   16c10:	movne	r0, #0
   16c14:	bne	16c4c <__assert_fail@plt+0x5b48>
   16c18:	movw	r1, #31928	; 0x7cb8
   16c1c:	movt	r1, #1
   16c20:	add	r0, sp, #4
   16c24:	bl	10e70 <strcmp@plt>
   16c28:	cmp	r0, #0
   16c2c:	beq	16c48 <__assert_fail@plt+0x5b44>
   16c30:	movw	r1, #31932	; 0x7cbc
   16c34:	movt	r1, #1
   16c38:	add	r0, sp, #4
   16c3c:	bl	10e70 <strcmp@plt>
   16c40:	adds	r0, r0, #0
   16c44:	movne	r0, #1
   16c48:	and	r0, r0, #1
   16c4c:	add	sp, sp, #268	; 0x10c
   16c50:	pop	{pc}		; (ldr pc, [sp], #4)
   16c54:	strd	r4, [sp, #-16]!
   16c58:	str	r6, [sp, #8]
   16c5c:	str	lr, [sp, #12]
   16c60:	mov	r6, r1
   16c64:	mov	r4, r2
   16c68:	mov	r1, #0
   16c6c:	bl	11080 <setlocale@plt>
   16c70:	subs	r5, r0, #0
   16c74:	beq	16cb8 <__assert_fail@plt+0x5bb4>
   16c78:	mov	r0, r5
   16c7c:	bl	10fd8 <strlen@plt>
   16c80:	cmp	r4, r0
   16c84:	bhi	16cd4 <__assert_fail@plt+0x5bd0>
   16c88:	cmp	r4, #0
   16c8c:	moveq	r0, #34	; 0x22
   16c90:	beq	16ce8 <__assert_fail@plt+0x5be4>
   16c94:	sub	r4, r4, #1
   16c98:	mov	r2, r4
   16c9c:	mov	r1, r5
   16ca0:	mov	r0, r6
   16ca4:	bl	10eb8 <memcpy@plt>
   16ca8:	mov	r3, #0
   16cac:	strb	r3, [r6, r4]
   16cb0:	mov	r0, #34	; 0x22
   16cb4:	b	16ce8 <__assert_fail@plt+0x5be4>
   16cb8:	cmp	r4, #0
   16cbc:	moveq	r0, #22
   16cc0:	beq	16ce8 <__assert_fail@plt+0x5be4>
   16cc4:	mov	r3, #0
   16cc8:	strb	r3, [r6]
   16ccc:	mov	r0, #22
   16cd0:	b	16ce8 <__assert_fail@plt+0x5be4>
   16cd4:	add	r2, r0, #1
   16cd8:	mov	r1, r5
   16cdc:	mov	r0, r6
   16ce0:	bl	10eb8 <memcpy@plt>
   16ce4:	mov	r0, #0
   16ce8:	ldrd	r4, [sp]
   16cec:	ldr	r6, [sp, #8]
   16cf0:	add	sp, sp, #12
   16cf4:	pop	{pc}		; (ldr pc, [sp], #4)
   16cf8:	str	r4, [sp, #-8]!
   16cfc:	str	lr, [sp, #4]
   16d00:	mov	r1, #0
   16d04:	bl	11080 <setlocale@plt>
   16d08:	ldr	r4, [sp]
   16d0c:	add	sp, sp, #4
   16d10:	pop	{pc}		; (ldr pc, [sp], #4)
   16d14:	eor	r1, r1, #-2147483648	; 0x80000000
   16d18:	b	16d20 <__assert_fail@plt+0x5c1c>
   16d1c:	eor	r3, r3, #-2147483648	; 0x80000000
   16d20:	push	{r4, r5, lr}
   16d24:	lsl	r4, r1, #1
   16d28:	lsl	r5, r3, #1
   16d2c:	teq	r4, r5
   16d30:	teqeq	r0, r2
   16d34:	orrsne	ip, r4, r0
   16d38:	orrsne	ip, r5, r2
   16d3c:	mvnsne	ip, r4, asr #21
   16d40:	mvnsne	ip, r5, asr #21
   16d44:	beq	16f30 <__assert_fail@plt+0x5e2c>
   16d48:	lsr	r4, r4, #21
   16d4c:	rsbs	r5, r4, r5, lsr #21
   16d50:	rsblt	r5, r5, #0
   16d54:	ble	16d74 <__assert_fail@plt+0x5c70>
   16d58:	add	r4, r4, r5
   16d5c:	eor	r2, r0, r2
   16d60:	eor	r3, r1, r3
   16d64:	eor	r0, r2, r0
   16d68:	eor	r1, r3, r1
   16d6c:	eor	r2, r0, r2
   16d70:	eor	r3, r1, r3
   16d74:	cmp	r5, #54	; 0x36
   16d78:	pophi	{r4, r5, pc}
   16d7c:	tst	r1, #-2147483648	; 0x80000000
   16d80:	lsl	r1, r1, #12
   16d84:	mov	ip, #1048576	; 0x100000
   16d88:	orr	r1, ip, r1, lsr #12
   16d8c:	beq	16d98 <__assert_fail@plt+0x5c94>
   16d90:	rsbs	r0, r0, #0
   16d94:	rsc	r1, r1, #0
   16d98:	tst	r3, #-2147483648	; 0x80000000
   16d9c:	lsl	r3, r3, #12
   16da0:	orr	r3, ip, r3, lsr #12
   16da4:	beq	16db0 <__assert_fail@plt+0x5cac>
   16da8:	rsbs	r2, r2, #0
   16dac:	rsc	r3, r3, #0
   16db0:	teq	r4, r5
   16db4:	beq	16f18 <__assert_fail@plt+0x5e14>
   16db8:	sub	r4, r4, #1
   16dbc:	rsbs	lr, r5, #32
   16dc0:	blt	16ddc <__assert_fail@plt+0x5cd8>
   16dc4:	lsl	ip, r2, lr
   16dc8:	adds	r0, r0, r2, lsr r5
   16dcc:	adc	r1, r1, #0
   16dd0:	adds	r0, r0, r3, lsl lr
   16dd4:	adcs	r1, r1, r3, asr r5
   16dd8:	b	16df8 <__assert_fail@plt+0x5cf4>
   16ddc:	sub	r5, r5, #32
   16de0:	add	lr, lr, #32
   16de4:	cmp	r2, #1
   16de8:	lsl	ip, r3, lr
   16dec:	orrcs	ip, ip, #2
   16df0:	adds	r0, r0, r3, asr r5
   16df4:	adcs	r1, r1, r3, asr #31
   16df8:	and	r5, r1, #-2147483648	; 0x80000000
   16dfc:	bpl	16e0c <__assert_fail@plt+0x5d08>
   16e00:	rsbs	ip, ip, #0
   16e04:	rscs	r0, r0, #0
   16e08:	rsc	r1, r1, #0
   16e0c:	cmp	r1, #1048576	; 0x100000
   16e10:	bcc	16e50 <__assert_fail@plt+0x5d4c>
   16e14:	cmp	r1, #2097152	; 0x200000
   16e18:	bcc	16e38 <__assert_fail@plt+0x5d34>
   16e1c:	lsrs	r1, r1, #1
   16e20:	rrxs	r0, r0
   16e24:	rrx	ip, ip
   16e28:	add	r4, r4, #1
   16e2c:	lsl	r2, r4, #21
   16e30:	cmn	r2, #4194304	; 0x400000
   16e34:	bcs	16f90 <__assert_fail@plt+0x5e8c>
   16e38:	cmp	ip, #-2147483648	; 0x80000000
   16e3c:	lsrseq	ip, r0, #1
   16e40:	adcs	r0, r0, #0
   16e44:	adc	r1, r1, r4, lsl #20
   16e48:	orr	r1, r1, r5
   16e4c:	pop	{r4, r5, pc}
   16e50:	lsls	ip, ip, #1
   16e54:	adcs	r0, r0, r0
   16e58:	adc	r1, r1, r1
   16e5c:	tst	r1, #1048576	; 0x100000
   16e60:	sub	r4, r4, #1
   16e64:	bne	16e38 <__assert_fail@plt+0x5d34>
   16e68:	teq	r1, #0
   16e6c:	moveq	r1, r0
   16e70:	moveq	r0, #0
   16e74:	clz	r3, r1
   16e78:	addeq	r3, r3, #32
   16e7c:	sub	r3, r3, #11
   16e80:	subs	r2, r3, #32
   16e84:	bge	16ea8 <__assert_fail@plt+0x5da4>
   16e88:	adds	r2, r2, #12
   16e8c:	ble	16ea4 <__assert_fail@plt+0x5da0>
   16e90:	add	ip, r2, #20
   16e94:	rsb	r2, r2, #12
   16e98:	lsl	r0, r1, ip
   16e9c:	lsr	r1, r1, r2
   16ea0:	b	16eb8 <__assert_fail@plt+0x5db4>
   16ea4:	add	r2, r2, #20
   16ea8:	rsble	ip, r2, #32
   16eac:	lsl	r1, r1, r2
   16eb0:	orrle	r1, r1, r0, lsr ip
   16eb4:	lslle	r0, r0, r2
   16eb8:	subs	r4, r4, r3
   16ebc:	addge	r1, r1, r4, lsl #20
   16ec0:	orrge	r1, r1, r5
   16ec4:	popge	{r4, r5, pc}
   16ec8:	mvn	r4, r4
   16ecc:	subs	r4, r4, #31
   16ed0:	bge	16f0c <__assert_fail@plt+0x5e08>
   16ed4:	adds	r4, r4, #12
   16ed8:	bgt	16ef4 <__assert_fail@plt+0x5df0>
   16edc:	add	r4, r4, #20
   16ee0:	rsb	r2, r4, #32
   16ee4:	lsr	r0, r0, r4
   16ee8:	orr	r0, r0, r1, lsl r2
   16eec:	orr	r1, r5, r1, lsr r4
   16ef0:	pop	{r4, r5, pc}
   16ef4:	rsb	r4, r4, #12
   16ef8:	rsb	r2, r4, #32
   16efc:	lsr	r0, r0, r2
   16f00:	orr	r0, r0, r1, lsl r4
   16f04:	mov	r1, r5
   16f08:	pop	{r4, r5, pc}
   16f0c:	lsr	r0, r1, r4
   16f10:	mov	r1, r5
   16f14:	pop	{r4, r5, pc}
   16f18:	teq	r4, #0
   16f1c:	eor	r3, r3, #1048576	; 0x100000
   16f20:	eoreq	r1, r1, #1048576	; 0x100000
   16f24:	addeq	r4, r4, #1
   16f28:	subne	r5, r5, #1
   16f2c:	b	16db8 <__assert_fail@plt+0x5cb4>
   16f30:	mvns	ip, r4, asr #21
   16f34:	mvnsne	ip, r5, asr #21
   16f38:	beq	16fa0 <__assert_fail@plt+0x5e9c>
   16f3c:	teq	r4, r5
   16f40:	teqeq	r0, r2
   16f44:	beq	16f58 <__assert_fail@plt+0x5e54>
   16f48:	orrs	ip, r4, r0
   16f4c:	moveq	r1, r3
   16f50:	moveq	r0, r2
   16f54:	pop	{r4, r5, pc}
   16f58:	teq	r1, r3
   16f5c:	movne	r1, #0
   16f60:	movne	r0, #0
   16f64:	popne	{r4, r5, pc}
   16f68:	lsrs	ip, r4, #21
   16f6c:	bne	16f80 <__assert_fail@plt+0x5e7c>
   16f70:	lsls	r0, r0, #1
   16f74:	adcs	r1, r1, r1
   16f78:	orrcs	r1, r1, #-2147483648	; 0x80000000
   16f7c:	pop	{r4, r5, pc}
   16f80:	adds	r4, r4, #4194304	; 0x400000
   16f84:	addcc	r1, r1, #1048576	; 0x100000
   16f88:	popcc	{r4, r5, pc}
   16f8c:	and	r5, r1, #-2147483648	; 0x80000000
   16f90:	orr	r1, r5, #2130706432	; 0x7f000000
   16f94:	orr	r1, r1, #15728640	; 0xf00000
   16f98:	mov	r0, #0
   16f9c:	pop	{r4, r5, pc}
   16fa0:	mvns	ip, r4, asr #21
   16fa4:	movne	r1, r3
   16fa8:	movne	r0, r2
   16fac:	mvnseq	ip, r5, asr #21
   16fb0:	movne	r3, r1
   16fb4:	movne	r2, r0
   16fb8:	orrs	r4, r0, r1, lsl #12
   16fbc:	orrseq	r5, r2, r3, lsl #12
   16fc0:	teqeq	r1, r3
   16fc4:	orrne	r1, r1, #524288	; 0x80000
   16fc8:	pop	{r4, r5, pc}
   16fcc:	teq	r0, #0
   16fd0:	moveq	r1, #0
   16fd4:	bxeq	lr
   16fd8:	push	{r4, r5, lr}
   16fdc:	mov	r4, #1024	; 0x400
   16fe0:	add	r4, r4, #50	; 0x32
   16fe4:	mov	r5, #0
   16fe8:	mov	r1, #0
   16fec:	b	16e68 <__assert_fail@plt+0x5d64>
   16ff0:	teq	r0, #0
   16ff4:	moveq	r1, #0
   16ff8:	bxeq	lr
   16ffc:	push	{r4, r5, lr}
   17000:	mov	r4, #1024	; 0x400
   17004:	add	r4, r4, #50	; 0x32
   17008:	ands	r5, r0, #-2147483648	; 0x80000000
   1700c:	rsbmi	r0, r0, #0
   17010:	mov	r1, #0
   17014:	b	16e68 <__assert_fail@plt+0x5d64>
   17018:	lsls	r2, r0, #1
   1701c:	asr	r1, r2, #3
   17020:	rrx	r1, r1
   17024:	lsl	r0, r2, #28
   17028:	andsne	r3, r2, #-16777216	; 0xff000000
   1702c:	teqne	r3, #-16777216	; 0xff000000
   17030:	eorne	r1, r1, #939524096	; 0x38000000
   17034:	bxne	lr
   17038:	bics	r2, r2, #-16777216	; 0xff000000
   1703c:	bxeq	lr
   17040:	teq	r3, #-16777216	; 0xff000000
   17044:	orreq	r1, r1, #524288	; 0x80000
   17048:	bxeq	lr
   1704c:	push	{r4, r5, lr}
   17050:	mov	r4, #896	; 0x380
   17054:	and	r5, r1, #-2147483648	; 0x80000000
   17058:	bic	r1, r1, #-2147483648	; 0x80000000
   1705c:	b	16e68 <__assert_fail@plt+0x5d64>
   17060:	orrs	r2, r0, r1
   17064:	bxeq	lr
   17068:	push	{r4, r5, lr}
   1706c:	mov	r5, #0
   17070:	b	17090 <__assert_fail@plt+0x5f8c>
   17074:	orrs	r2, r0, r1
   17078:	bxeq	lr
   1707c:	push	{r4, r5, lr}
   17080:	ands	r5, r1, #-2147483648	; 0x80000000
   17084:	bpl	17090 <__assert_fail@plt+0x5f8c>
   17088:	rsbs	r0, r0, #0
   1708c:	rsc	r1, r1, #0
   17090:	mov	r4, #1024	; 0x400
   17094:	add	r4, r4, #50	; 0x32
   17098:	lsrs	ip, r1, #22
   1709c:	beq	16e0c <__assert_fail@plt+0x5d08>
   170a0:	mov	r2, #3
   170a4:	lsrs	ip, ip, #3
   170a8:	addne	r2, r2, #3
   170ac:	lsrs	ip, ip, #3
   170b0:	addne	r2, r2, #3
   170b4:	add	r2, r2, ip, lsr #3
   170b8:	rsb	r3, r2, #32
   170bc:	lsl	ip, r0, r3
   170c0:	lsr	r0, r0, r2
   170c4:	orr	r0, r0, r1, lsl r3
   170c8:	lsr	r1, r1, r2
   170cc:	add	r4, r4, r2
   170d0:	b	16e0c <__assert_fail@plt+0x5d08>
   170d4:	cmp	r3, #0
   170d8:	cmpeq	r2, #0
   170dc:	bne	170f4 <__assert_fail@plt+0x5ff0>
   170e0:	cmp	r1, #0
   170e4:	cmpeq	r0, #0
   170e8:	mvnne	r1, #0
   170ec:	mvnne	r0, #0
   170f0:	b	17110 <__assert_fail@plt+0x600c>
   170f4:	sub	sp, sp, #8
   170f8:	push	{sp, lr}
   170fc:	bl	17160 <__assert_fail@plt+0x605c>
   17100:	ldr	lr, [sp, #4]
   17104:	add	sp, sp, #8
   17108:	pop	{r2, r3}
   1710c:	bx	lr
   17110:	push	{r1, lr}
   17114:	mov	r0, #8
   17118:	bl	10e64 <raise@plt>
   1711c:	pop	{r1, pc}
   17120:	vmov	d6, r0, r1
   17124:	vldr	d7, [pc, #36]	; 17150 <__assert_fail@plt+0x604c>
   17128:	vldr	d5, [pc, #40]	; 17158 <__assert_fail@plt+0x6054>
   1712c:	vmul.f64	d7, d6, d7
   17130:	vcvt.u32.f64	s14, d7
   17134:	vcvt.f64.u32	d4, s14
   17138:	vmov	r1, s14
   1713c:	vmls.f64	d6, d4, d5
   17140:	vcvt.u32.f64	s15, d6
   17144:	vmov	r0, s15
   17148:	bx	lr
   1714c:	nop			; (mov r0, r0)
   17150:	andeq	r0, r0, r0
   17154:	ldclcc	0, cr0, [r0]
   17158:	andeq	r0, r0, r0
   1715c:	mvnsmi	r0, r0
   17160:	cmp	r1, r3
   17164:	cmpeq	r0, r2
   17168:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1716c:	mov	r4, r0
   17170:	movcc	r0, #0
   17174:	mov	r5, r1
   17178:	ldr	lr, [sp, #36]	; 0x24
   1717c:	movcc	r1, r0
   17180:	bcc	1727c <__assert_fail@plt+0x6178>
   17184:	cmp	r3, #0
   17188:	clzeq	ip, r2
   1718c:	clzne	ip, r3
   17190:	addeq	ip, ip, #32
   17194:	cmp	r5, #0
   17198:	clzeq	r1, r4
   1719c:	addeq	r1, r1, #32
   171a0:	clzne	r1, r5
   171a4:	sub	ip, ip, r1
   171a8:	sub	sl, ip, #32
   171ac:	lsl	r9, r3, ip
   171b0:	rsb	fp, ip, #32
   171b4:	orr	r9, r9, r2, lsl sl
   171b8:	orr	r9, r9, r2, lsr fp
   171bc:	lsl	r8, r2, ip
   171c0:	cmp	r5, r9
   171c4:	cmpeq	r4, r8
   171c8:	movcc	r0, #0
   171cc:	movcc	r1, r0
   171d0:	bcc	171ec <__assert_fail@plt+0x60e8>
   171d4:	mov	r0, #1
   171d8:	subs	r4, r4, r8
   171dc:	lsl	r1, r0, sl
   171e0:	orr	r1, r1, r0, lsr fp
   171e4:	lsl	r0, r0, ip
   171e8:	sbc	r5, r5, r9
   171ec:	cmp	ip, #0
   171f0:	beq	1727c <__assert_fail@plt+0x6178>
   171f4:	lsr	r6, r8, #1
   171f8:	orr	r6, r6, r9, lsl #31
   171fc:	lsr	r7, r9, #1
   17200:	mov	r2, ip
   17204:	b	17228 <__assert_fail@plt+0x6124>
   17208:	subs	r3, r4, r6
   1720c:	sbc	r8, r5, r7
   17210:	adds	r3, r3, r3
   17214:	adc	r8, r8, r8
   17218:	adds	r4, r3, #1
   1721c:	adc	r5, r8, #0
   17220:	subs	r2, r2, #1
   17224:	beq	17244 <__assert_fail@plt+0x6140>
   17228:	cmp	r5, r7
   1722c:	cmpeq	r4, r6
   17230:	bcs	17208 <__assert_fail@plt+0x6104>
   17234:	adds	r4, r4, r4
   17238:	adc	r5, r5, r5
   1723c:	subs	r2, r2, #1
   17240:	bne	17228 <__assert_fail@plt+0x6124>
   17244:	lsr	r3, r4, ip
   17248:	orr	r3, r3, r5, lsl fp
   1724c:	lsr	r2, r5, ip
   17250:	orr	r3, r3, r5, lsr sl
   17254:	adds	r0, r0, r4
   17258:	mov	r4, r3
   1725c:	lsl	r3, r2, ip
   17260:	orr	r3, r3, r4, lsl sl
   17264:	lsl	ip, r4, ip
   17268:	orr	r3, r3, r4, lsr fp
   1726c:	adc	r1, r1, r5
   17270:	subs	r0, r0, ip
   17274:	mov	r5, r2
   17278:	sbc	r1, r1, r3
   1727c:	cmp	lr, #0
   17280:	strdne	r4, [lr]
   17284:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17288:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1728c:	mov	r7, r0
   17290:	ldr	r6, [pc, #72]	; 172e0 <__assert_fail@plt+0x61dc>
   17294:	ldr	r5, [pc, #72]	; 172e4 <__assert_fail@plt+0x61e0>
   17298:	add	r6, pc, r6
   1729c:	add	r5, pc, r5
   172a0:	sub	r6, r6, r5
   172a4:	mov	r8, r1
   172a8:	mov	r9, r2
   172ac:	bl	10e20 <fdopen@plt-0x20>
   172b0:	asrs	r6, r6, #2
   172b4:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   172b8:	mov	r4, #0
   172bc:	add	r4, r4, #1
   172c0:	ldr	r3, [r5], #4
   172c4:	mov	r2, r9
   172c8:	mov	r1, r8
   172cc:	mov	r0, r7
   172d0:	blx	r3
   172d4:	cmp	r6, r4
   172d8:	bne	172bc <__assert_fail@plt+0x61b8>
   172dc:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   172e0:	andeq	r0, r1, r4, ror ip
   172e4:	andeq	r0, r1, ip, ror #24
   172e8:	bx	lr
   172ec:	ldr	r3, [pc, #12]	; 17300 <__assert_fail@plt+0x61fc>
   172f0:	mov	r1, #0
   172f4:	add	r3, pc, r3
   172f8:	ldr	r2, [r3]
   172fc:	b	11008 <__cxa_atexit@plt>
   17300:	andeq	r0, r1, r8, lsl #28

Disassembly of section .fini:

00017304 <.fini>:
   17304:	push	{r3, lr}
   17308:	pop	{r3, pc}
