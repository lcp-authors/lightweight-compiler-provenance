
../repos/charybdis/tools/.libs/charybdis-mkpasswd:     file format elf32-littlearm


Disassembly of section .init:

00010714 <.init>:
   10714:	push	{r3, lr}
   10718:	bl	10878 <sprintf@plt+0x48>
   1071c:	pop	{r3, pc}

Disassembly of section .plt:

00010720 <open@plt-0x14>:
   10720:	push	{lr}		; (str lr, [sp, #-4]!)
   10724:	ldr	lr, [pc, #4]	; 10730 <open@plt-0x4>
   10728:	add	lr, pc, lr
   1072c:	ldr	pc, [lr, #8]!
   10730:	ldrdeq	r1, [r1], -r0

00010734 <open@plt>:
   10734:	add	ip, pc, #0, 12
   10738:	add	ip, ip, #69632	; 0x11000
   1073c:	ldr	pc, [ip, #2256]!	; 0x8d0

00010740 <abort@plt>:
   10740:	add	ip, pc, #0, 12
   10744:	add	ip, ip, #69632	; 0x11000
   10748:	ldr	pc, [ip, #2248]!	; 0x8c8

0001074c <srand@plt>:
   1074c:	add	ip, pc, #0, 12
   10750:	add	ip, ip, #69632	; 0x11000
   10754:	ldr	pc, [ip, #2240]!	; 0x8c0

00010758 <__libc_start_main@plt>:
   10758:	add	ip, pc, #0, 12
   1075c:	add	ip, ip, #69632	; 0x11000
   10760:	ldr	pc, [ip, #2232]!	; 0x8b8

00010764 <__gmon_start__@plt>:
   10764:	add	ip, pc, #0, 12
   10768:	add	ip, ip, #69632	; 0x11000
   1076c:	ldr	pc, [ip, #2224]!	; 0x8b0

00010770 <getpass@plt>:
   10770:	add	ip, pc, #0, 12
   10774:	add	ip, ip, #69632	; 0x11000
   10778:	ldr	pc, [ip, #2216]!	; 0x8a8

0001077c <calloc@plt>:
   1077c:	add	ip, pc, #0, 12
   10780:	add	ip, ip, #69632	; 0x11000
   10784:	ldr	pc, [ip, #2208]!	; 0x8a0

00010788 <free@plt>:
   10788:	add	ip, pc, #0, 12
   1078c:	add	ip, ip, #69632	; 0x11000
   10790:	ldr	pc, [ip, #2200]!	; 0x898

00010794 <read@plt>:
   10794:	add	ip, pc, #0, 12
   10798:	add	ip, ip, #69632	; 0x11000
   1079c:	ldr	pc, [ip, #2192]!	; 0x890

000107a0 <strlen@plt>:
   107a0:	add	ip, pc, #0, 12
   107a4:	add	ip, ip, #69632	; 0x11000
   107a8:	ldr	pc, [ip, #2184]!	; 0x888

000107ac <getopt@plt>:
   107ac:	add	ip, pc, #0, 12
   107b0:	add	ip, ip, #69632	; 0x11000
   107b4:	ldr	pc, [ip, #2176]!	; 0x880

000107b8 <strtol@plt>:
   107b8:	add	ip, pc, #0, 12
   107bc:	add	ip, ip, #69632	; 0x11000
   107c0:	ldr	pc, [ip, #2168]!	; 0x878

000107c4 <printf@plt>:
   107c4:	add	ip, pc, #0, 12
   107c8:	add	ip, ip, #69632	; 0x11000
   107cc:	ldr	pc, [ip, #2160]!	; 0x870

000107d0 <fwrite@plt>:
   107d0:	add	ip, pc, #0, 12
   107d4:	add	ip, ip, #69632	; 0x11000
   107d8:	ldr	pc, [ip, #2152]!	; 0x868

000107dc <time@plt>:
   107dc:	add	ip, pc, #0, 12
   107e0:	add	ip, ip, #69632	; 0x11000
   107e4:	ldr	pc, [ip, #2144]!	; 0x860

000107e8 <strdup@plt>:
   107e8:	add	ip, pc, #0, 12
   107ec:	add	ip, ip, #69632	; 0x11000
   107f0:	ldr	pc, [ip, #2136]!	; 0x858

000107f4 <rb_crypt@plt>:
   107f4:	add	ip, pc, #0, 12
   107f8:	add	ip, ip, #69632	; 0x11000
   107fc:	ldr	pc, [ip, #2128]!	; 0x850

00010800 <puts@plt>:
   10800:	add	ip, pc, #0, 12
   10804:	add	ip, ip, #69632	; 0x11000
   10808:	ldr	pc, [ip, #2120]!	; 0x848

0001080c <rand@plt>:
   1080c:	add	ip, pc, #0, 12
   10810:	add	ip, ip, #69632	; 0x11000
   10814:	ldr	pc, [ip, #2112]!	; 0x840

00010818 <strcmp@plt>:
   10818:	add	ip, pc, #0, 12
   1081c:	add	ip, ip, #69632	; 0x11000
   10820:	ldr	pc, [ip, #2104]!	; 0x838

00010824 <exit@plt>:
   10824:	add	ip, pc, #0, 12
   10828:	add	ip, ip, #69632	; 0x11000
   1082c:	ldr	pc, [ip, #2096]!	; 0x830

00010830 <sprintf@plt>:
   10830:	add	ip, pc, #0, 12
   10834:	add	ip, ip, #69632	; 0x11000
   10838:	ldr	pc, [ip, #2088]!	; 0x828

Disassembly of section .text:

0001083c <.text>:
   1083c:	mov	fp, #0
   10840:	mov	lr, #0
   10844:	pop	{r1}		; (ldr r1, [sp], #4)
   10848:	mov	r2, sp
   1084c:	push	{r2}		; (str r2, [sp, #-4]!)
   10850:	push	{r0}		; (str r0, [sp, #-4]!)
   10854:	ldr	ip, [pc, #16]	; 1086c <sprintf@plt+0x3c>
   10858:	push	{ip}		; (str ip, [sp, #-4]!)
   1085c:	ldr	r0, [pc, #12]	; 10870 <sprintf@plt+0x40>
   10860:	ldr	r3, [pc, #12]	; 10874 <sprintf@plt+0x44>
   10864:	bl	10758 <__libc_start_main@plt>
   10868:	bl	10740 <abort@plt>
   1086c:	andeq	r1, r1, r8, lsl #3
   10870:	andeq	r0, r1, ip, lsr #18
   10874:	andeq	r1, r1, r8, lsr #2
   10878:	ldr	r3, [pc, #20]	; 10894 <sprintf@plt+0x64>
   1087c:	ldr	r2, [pc, #20]	; 10898 <sprintf@plt+0x68>
   10880:	add	r3, pc, r3
   10884:	ldr	r2, [r3, r2]
   10888:	cmp	r2, #0
   1088c:	bxeq	lr
   10890:	b	10764 <__gmon_start__@plt>
   10894:	andeq	r1, r1, r8, ror r7
   10898:	andeq	r0, r0, r4, rrx
   1089c:	ldr	r0, [pc, #24]	; 108bc <sprintf@plt+0x8c>
   108a0:	ldr	r3, [pc, #24]	; 108c0 <sprintf@plt+0x90>
   108a4:	cmp	r3, r0
   108a8:	bxeq	lr
   108ac:	ldr	r3, [pc, #16]	; 108c4 <sprintf@plt+0x94>
   108b0:	cmp	r3, #0
   108b4:	bxeq	lr
   108b8:	bx	r3
   108bc:	andeq	r2, r2, r0, ror r0
   108c0:	andeq	r2, r2, r0, ror r0
   108c4:	andeq	r0, r0, r0
   108c8:	ldr	r0, [pc, #36]	; 108f4 <sprintf@plt+0xc4>
   108cc:	ldr	r1, [pc, #36]	; 108f8 <sprintf@plt+0xc8>
   108d0:	sub	r1, r1, r0
   108d4:	asr	r1, r1, #2
   108d8:	add	r1, r1, r1, lsr #31
   108dc:	asrs	r1, r1, #1
   108e0:	bxeq	lr
   108e4:	ldr	r3, [pc, #16]	; 108fc <sprintf@plt+0xcc>
   108e8:	cmp	r3, #0
   108ec:	bxeq	lr
   108f0:	bx	r3
   108f4:	andeq	r2, r2, r0, ror r0
   108f8:	andeq	r2, r2, r0, ror r0
   108fc:	andeq	r0, r0, r0
   10900:	push	{r4, lr}
   10904:	ldr	r4, [pc, #24]	; 10924 <sprintf@plt+0xf4>
   10908:	ldrb	r3, [r4]
   1090c:	cmp	r3, #0
   10910:	popne	{r4, pc}
   10914:	bl	1089c <sprintf@plt+0x6c>
   10918:	mov	r3, #1
   1091c:	strb	r3, [r4]
   10920:	pop	{r4, pc}
   10924:	andeq	r2, r2, ip, ror r0
   10928:	b	108c8 <sprintf@plt+0x98>
   1092c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10930:	add	fp, sp, #28
   10934:	sub	sp, sp, #12
   10938:	movw	r7, #4504	; 0x1198
   1093c:	movw	r9, #8312	; 0x2078
   10940:	mov	r5, r0
   10944:	mov	r0, #0
   10948:	mov	r4, r1
   1094c:	mov	r8, #0
   10950:	mov	r6, #0
   10954:	mov	sl, #0
   10958:	movt	r7, #1
   1095c:	movt	r9, #2
   10960:	str	r0, [sp, #4]
   10964:	mov	r0, #0
   10968:	str	r0, [sp]
   1096c:	b	10978 <sprintf@plt+0x148>
   10970:	orr	r8, r8, #16
   10974:	mov	sl, #4
   10978:	mov	r0, r5
   1097c:	mov	r1, r4
   10980:	mov	r2, r7
   10984:	bl	107ac <getopt@plt>
   10988:	mov	r1, r0
   1098c:	sub	r0, r0, #63	; 0x3f
   10990:	cmp	r0, #58	; 0x3a
   10994:	bhi	10aa8 <sprintf@plt+0x278>
   10998:	add	r2, pc, #0
   1099c:	ldr	pc, [r2, r0, lsl #2]
   109a0:	andeq	r0, r1, ip, lsr lr
   109a4:			; <UNDEFINED> instruction: 0x00010ab0
   109a8:			; <UNDEFINED> instruction: 0x00010ab0
   109ac:			; <UNDEFINED> instruction: 0x00010ab0
   109b0:			; <UNDEFINED> instruction: 0x00010ab0
   109b4:			; <UNDEFINED> instruction: 0x00010ab0
   109b8:			; <UNDEFINED> instruction: 0x00010ab0
   109bc:			; <UNDEFINED> instruction: 0x00010ab0
   109c0:			; <UNDEFINED> instruction: 0x00010ab0
   109c4:			; <UNDEFINED> instruction: 0x00010ab0
   109c8:			; <UNDEFINED> instruction: 0x00010ab0
   109cc:			; <UNDEFINED> instruction: 0x00010ab0
   109d0:			; <UNDEFINED> instruction: 0x00010ab0
   109d4:			; <UNDEFINED> instruction: 0x00010ab0
   109d8:			; <UNDEFINED> instruction: 0x00010ab0
   109dc:			; <UNDEFINED> instruction: 0x00010ab0
   109e0:			; <UNDEFINED> instruction: 0x00010ab0
   109e4:			; <UNDEFINED> instruction: 0x00010ab0
   109e8:			; <UNDEFINED> instruction: 0x00010ab0
   109ec:			; <UNDEFINED> instruction: 0x00010ab0
   109f0:			; <UNDEFINED> instruction: 0x00010ab0
   109f4:			; <UNDEFINED> instruction: 0x00010ab0
   109f8:			; <UNDEFINED> instruction: 0x00010ab0
   109fc:			; <UNDEFINED> instruction: 0x00010ab0
   10a00:			; <UNDEFINED> instruction: 0x00010ab0
   10a04:			; <UNDEFINED> instruction: 0x00010ab0
   10a08:			; <UNDEFINED> instruction: 0x00010ab0
   10a0c:			; <UNDEFINED> instruction: 0x00010ab0
   10a10:			; <UNDEFINED> instruction: 0x00010ab0
   10a14:			; <UNDEFINED> instruction: 0x00010ab0
   10a18:			; <UNDEFINED> instruction: 0x00010ab0
   10a1c:			; <UNDEFINED> instruction: 0x00010ab0
   10a20:			; <UNDEFINED> instruction: 0x00010ab0
   10a24:			; <UNDEFINED> instruction: 0x00010ab0
   10a28:			; <UNDEFINED> instruction: 0x00010ab0
   10a2c:	andeq	r0, r1, r0, ror r9
   10a30:			; <UNDEFINED> instruction: 0x00010ab0
   10a34:			; <UNDEFINED> instruction: 0x00010ab0
   10a38:			; <UNDEFINED> instruction: 0x00010ab0
   10a3c:			; <UNDEFINED> instruction: 0x00010ab0
   10a40:			; <UNDEFINED> instruction: 0x00010ab0
   10a44:	andeq	r0, r1, r0, asr #28
   10a48:			; <UNDEFINED> instruction: 0x00010ab0
   10a4c:			; <UNDEFINED> instruction: 0x00010ab0
   10a50:			; <UNDEFINED> instruction: 0x00010ab0
   10a54:	andeq	r0, r1, ip, lsl #21
   10a58:	ldrdeq	r0, [r1], -r0	; <UNPREDICTABLE>
   10a5c:			; <UNDEFINED> instruction: 0x00010ab0
   10a60:			; <UNDEFINED> instruction: 0x00010ab0
   10a64:	ldrdeq	r0, [r1], -r8
   10a68:			; <UNDEFINED> instruction: 0x00010ab0
   10a6c:	andeq	r0, r1, r8, ror #21
   10a70:	andeq	r0, r1, r0, asr #21
   10a74:			; <UNDEFINED> instruction: 0x00010ab0
   10a78:			; <UNDEFINED> instruction: 0x00010ab0
   10a7c:			; <UNDEFINED> instruction: 0x00010ab0
   10a80:			; <UNDEFINED> instruction: 0x00010ab0
   10a84:	andeq	r0, r1, r4, lsl #22
   10a88:	andeq	r0, r1, ip, lsl #22
   10a8c:	ldr	r0, [r9]
   10a90:	mov	r1, #0
   10a94:	mov	r2, #10
   10a98:	bl	107b8 <strtol@plt>
   10a9c:	mov	r6, r0
   10aa0:	orr	r8, r8, #8
   10aa4:	b	10978 <sprintf@plt+0x148>
   10aa8:	cmn	r1, #1
   10aac:	beq	10b14 <sprintf@plt+0x2e4>
   10ab0:	movw	r0, #4519	; 0x11a7
   10ab4:	movt	r0, #1
   10ab8:	bl	107c4 <printf@plt>
   10abc:	b	10978 <sprintf@plt+0x148>
   10ac0:	ldr	r0, [r9]
   10ac4:	orr	r8, r8, #2
   10ac8:	str	r0, [sp]
   10acc:	b	10978 <sprintf@plt+0x148>
   10ad0:	orr	r8, r8, #1
   10ad4:	b	10978 <sprintf@plt+0x148>
   10ad8:	ldr	r0, [r9]
   10adc:	orr	r8, r8, #4
   10ae0:	str	r0, [sp, #4]
   10ae4:	b	10978 <sprintf@plt+0x148>
   10ae8:	ldr	r0, [r9]
   10aec:	mov	r1, #0
   10af0:	mov	r2, #10
   10af4:	bl	107b8 <strtol@plt>
   10af8:	mov	sl, r0
   10afc:	orr	r8, r8, #32
   10b00:	b	10978 <sprintf@plt+0x148>
   10b04:	orr	r8, r8, #64	; 0x40
   10b08:	b	10978 <sprintf@plt+0x148>
   10b0c:	orr	r8, r8, #128	; 0x80
   10b10:	b	10978 <sprintf@plt+0x148>
   10b14:	tst	r8, #1
   10b18:	bne	10b5c <sprintf@plt+0x32c>
   10b1c:	tst	r8, #16
   10b20:	bne	10c1c <sprintf@plt+0x3ec>
   10b24:	cmp	r6, #0
   10b28:	and	r0, r8, #2
   10b2c:	movweq	r6, #16
   10b30:	tst	r8, #64	; 0x40
   10b34:	bne	10d00 <sprintf@plt+0x4d0>
   10b38:	cmp	r0, #0
   10b3c:	bne	10d84 <sprintf@plt+0x554>
   10b40:	cmp	r6, #17
   10b44:	bge	10e94 <sprintf@plt+0x664>
   10b48:	movw	r7, #8317	; 0x207d
   10b4c:	movw	r0, #13860	; 0x3624
   10b50:	movt	r7, #2
   10b54:	strh	r0, [r7, #105]!	; 0x69
   10b58:	b	10b84 <sprintf@plt+0x354>
   10b5c:	cmp	r6, #0
   10b60:	movweq	r6, #8
   10b64:	tst	r8, #2
   10b68:	bne	10c90 <sprintf@plt+0x460>
   10b6c:	cmp	r6, #17
   10b70:	bge	10e58 <sprintf@plt+0x628>
   10b74:	movw	r7, #8317	; 0x207d
   10b78:	movw	r0, #12580	; 0x3124
   10b7c:	movt	r7, #2
   10b80:	strh	r0, [r7, #21]!
   10b84:	mov	r4, #36	; 0x24
   10b88:	add	r0, r7, #3
   10b8c:	mov	r1, r6
   10b90:	strb	r4, [r7, #2]
   10b94:	bl	10fc0 <sprintf@plt+0x790>
   10b98:	add	r0, r6, r7
   10b9c:	strh	r4, [r0, #3]
   10ba0:	tst	r8, #4
   10ba4:	bne	10cd0 <sprintf@plt+0x4a0>
   10ba8:	movw	r0, #4571	; 0x11db
   10bac:	movt	r0, #1
   10bb0:	bl	10770 <getpass@plt>
   10bb4:	mov	r1, r7
   10bb8:	bl	107f4 <rb_crypt@plt>
   10bbc:	cmp	r0, #0
   10bc0:	beq	10dec <sprintf@plt+0x5bc>
   10bc4:	bl	107e8 <strdup@plt>
   10bc8:	mov	r4, r0
   10bcc:	movw	r0, #4602	; 0x11fa
   10bd0:	movt	r0, #1
   10bd4:	bl	10770 <getpass@plt>
   10bd8:	mov	r1, r7
   10bdc:	bl	107f4 <rb_crypt@plt>
   10be0:	cmp	r0, #0
   10be4:	beq	10dec <sprintf@plt+0x5bc>
   10be8:	mov	r1, r0
   10bec:	mov	r0, r4
   10bf0:	bl	10818 <strcmp@plt>
   10bf4:	cmp	r0, #0
   10bf8:	beq	10ce8 <sprintf@plt+0x4b8>
   10bfc:	movw	r0, #8304	; 0x2070
   10c00:	mov	r4, #1
   10c04:	mov	r1, #23
   10c08:	movt	r0, #2
   10c0c:	ldr	r3, [r0]
   10c10:	movw	r0, #4610	; 0x1202
   10c14:	movt	r0, #1
   10c18:	b	10e28 <sprintf@plt+0x5f8>
   10c1c:	cmp	r6, #0
   10c20:	movweq	r6, #22
   10c24:	tst	r8, #2
   10c28:	bne	10d24 <sprintf@plt+0x4f4>
   10c2c:	cmp	r6, #23
   10c30:	bge	10e80 <sprintf@plt+0x650>
   10c34:	movw	r1, #4732	; 0x127c
   10c38:	add	r4, sp, #9
   10c3c:	mov	r2, sl
   10c40:	movt	r1, #1
   10c44:	mov	r0, r4
   10c48:	bl	10830 <sprintf@plt>
   10c4c:	movw	r5, #8443	; 0x20fb
   10c50:	movw	r1, #4748	; 0x128c
   10c54:	mov	r2, r4
   10c58:	movt	r5, #2
   10c5c:	movt	r1, #1
   10c60:	add	r7, r5, #31
   10c64:	mov	r0, r7
   10c68:	bl	10830 <sprintf@plt>
   10c6c:	add	r0, r5, #38	; 0x26
   10c70:	mov	r1, r6
   10c74:	bl	10fc0 <sprintf@plt+0x790>
   10c78:	add	r0, r6, r7
   10c7c:	mov	r1, #36	; 0x24
   10c80:	strh	r1, [r0, #7]
   10c84:	tst	r8, #4
   10c88:	beq	10ba8 <sprintf@plt+0x378>
   10c8c:	b	10cd0 <sprintf@plt+0x4a0>
   10c90:	ldr	r4, [sp]
   10c94:	cmp	r4, #0
   10c98:	beq	10e44 <sprintf@plt+0x614>
   10c9c:	mov	r0, r4
   10ca0:	bl	107a0 <strlen@plt>
   10ca4:	cmp	r0, #17
   10ca8:	bcs	10e44 <sprintf@plt+0x614>
   10cac:	movw	r7, #8317	; 0x207d
   10cb0:	movw	r1, #4634	; 0x121a
   10cb4:	movt	r7, #2
   10cb8:	movt	r1, #1
   10cbc:	mov	r0, r7
   10cc0:	mov	r2, r4
   10cc4:	bl	10830 <sprintf@plt>
   10cc8:	tst	r8, #4
   10ccc:	beq	10ba8 <sprintf@plt+0x378>
   10cd0:	ldr	r0, [sp, #4]
   10cd4:	cmp	r0, #0
   10cd8:	beq	10e0c <sprintf@plt+0x5dc>
   10cdc:	mov	r1, r7
   10ce0:	bl	107f4 <rb_crypt@plt>
   10ce4:	mov	r4, r0
   10ce8:	mov	r0, r4
   10cec:	bl	10800 <puts@plt>
   10cf0:	mov	r4, #0
   10cf4:	mov	r0, r4
   10cf8:	sub	sp, fp, #28
   10cfc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10d00:	cmp	r0, #0
   10d04:	bne	10db8 <sprintf@plt+0x588>
   10d08:	cmp	r6, #17
   10d0c:	bge	10ea8 <sprintf@plt+0x678>
   10d10:	movw	r7, #8317	; 0x207d
   10d14:	movw	r0, #13604	; 0x3524
   10d18:	movt	r7, #2
   10d1c:	strh	r0, [r7, #84]!	; 0x54
   10d20:	b	10b84 <sprintf@plt+0x354>
   10d24:	ldr	r5, [sp]
   10d28:	cmp	r5, #0
   10d2c:	beq	10e6c <sprintf@plt+0x63c>
   10d30:	mov	r0, r5
   10d34:	bl	107a0 <strlen@plt>
   10d38:	cmp	r0, #23
   10d3c:	bcs	10e6c <sprintf@plt+0x63c>
   10d40:	movw	r1, #4732	; 0x127c
   10d44:	add	r4, sp, #9
   10d48:	mov	r2, sl
   10d4c:	movt	r1, #1
   10d50:	mov	r0, r4
   10d54:	bl	10830 <sprintf@plt>
   10d58:	movw	r7, #8443	; 0x20fb
   10d5c:	movw	r1, #4737	; 0x1281
   10d60:	mov	r2, r4
   10d64:	mov	r3, r5
   10d68:	movt	r7, #2
   10d6c:	movt	r1, #1
   10d70:	mov	r0, r7
   10d74:	bl	10830 <sprintf@plt>
   10d78:	tst	r8, #4
   10d7c:	beq	10ba8 <sprintf@plt+0x378>
   10d80:	b	10cd0 <sprintf@plt+0x4a0>
   10d84:	ldr	r4, [sp]
   10d88:	cmp	r4, #0
   10d8c:	beq	10e44 <sprintf@plt+0x614>
   10d90:	mov	r0, r4
   10d94:	bl	107a0 <strlen@plt>
   10d98:	cmp	r0, #17
   10d9c:	bcs	10e44 <sprintf@plt+0x614>
   10da0:	movw	r0, #8317	; 0x207d
   10da4:	movw	r1, #4725	; 0x1275
   10da8:	movt	r0, #2
   10dac:	movt	r1, #1
   10db0:	add	r7, r0, #63	; 0x3f
   10db4:	b	10cbc <sprintf@plt+0x48c>
   10db8:	ldr	r4, [sp]
   10dbc:	cmp	r4, #0
   10dc0:	beq	10e44 <sprintf@plt+0x614>
   10dc4:	mov	r0, r4
   10dc8:	bl	107a0 <strlen@plt>
   10dcc:	cmp	r0, #17
   10dd0:	bcs	10e44 <sprintf@plt+0x614>
   10dd4:	movw	r0, #8317	; 0x207d
   10dd8:	movw	r1, #4718	; 0x126e
   10ddc:	movt	r0, #2
   10de0:	movt	r1, #1
   10de4:	add	r7, r0, #42	; 0x2a
   10de8:	b	10cbc <sprintf@plt+0x48c>
   10dec:	movw	r0, #8304	; 0x2070
   10df0:	mov	r4, #1
   10df4:	mov	r1, #18
   10df8:	movt	r0, #2
   10dfc:	ldr	r3, [r0]
   10e00:	movw	r0, #4583	; 0x11e7
   10e04:	movt	r0, #1
   10e08:	b	10e28 <sprintf@plt+0x5f8>
   10e0c:	movw	r0, #8304	; 0x2070
   10e10:	mov	r4, #1
   10e14:	mov	r1, #30
   10e18:	movt	r0, #2
   10e1c:	ldr	r3, [r0]
   10e20:	movw	r0, #4540	; 0x11bc
   10e24:	movt	r0, #1
   10e28:	mov	r2, #1
   10e2c:	bl	107d0 <fwrite@plt>
   10e30:	mov	r0, r4
   10e34:	sub	sp, fp, #28
   10e38:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10e3c:	bl	10f5c <sprintf@plt+0x72c>
   10e40:	bl	10ebc <sprintf@plt+0x68c>
   10e44:	movw	r0, #5755	; 0x167b
   10e48:	movt	r0, #1
   10e4c:	bl	10800 <puts@plt>
   10e50:	mov	r0, #1
   10e54:	bl	10824 <exit@plt>
   10e58:	movw	r0, #5607	; 0x15e7
   10e5c:	movt	r0, #1
   10e60:	bl	10800 <puts@plt>
   10e64:	mov	r0, #0
   10e68:	bl	10824 <exit@plt>
   10e6c:	movw	r0, #5632	; 0x1600
   10e70:	movt	r0, #1
   10e74:	bl	10800 <puts@plt>
   10e78:	mov	r0, #1
   10e7c:	bl	10824 <exit@plt>
   10e80:	movw	r0, #5697	; 0x1641
   10e84:	movt	r0, #1
   10e88:	bl	10800 <puts@plt>
   10e8c:	mov	r0, #0
   10e90:	bl	10824 <exit@plt>
   10e94:	movw	r0, #5820	; 0x16bc
   10e98:	movt	r0, #1
   10e9c:	bl	10800 <puts@plt>
   10ea0:	mov	r0, #0
   10ea4:	bl	10824 <exit@plt>
   10ea8:	movw	r0, #5727	; 0x165f
   10eac:	movt	r0, #1
   10eb0:	bl	10800 <puts@plt>
   10eb4:	mov	r0, #0
   10eb8:	bl	10824 <exit@plt>
   10ebc:	push	{fp, lr}
   10ec0:	mov	fp, sp
   10ec4:	movw	r0, #4756	; 0x1294
   10ec8:	movt	r0, #1
   10ecc:	bl	10800 <puts@plt>
   10ed0:	movw	r0, #4832	; 0x12e0
   10ed4:	movt	r0, #1
   10ed8:	bl	10800 <puts@plt>
   10edc:	movw	r0, #4862	; 0x12fe
   10ee0:	movt	r0, #1
   10ee4:	bl	10800 <puts@plt>
   10ee8:	movw	r0, #4892	; 0x131c
   10eec:	movt	r0, #1
   10ef0:	bl	10800 <puts@plt>
   10ef4:	movw	r0, #4920	; 0x1338
   10ef8:	movt	r0, #1
   10efc:	bl	10800 <puts@plt>
   10f00:	movw	r0, #4952	; 0x1358
   10f04:	movt	r0, #1
   10f08:	bl	10800 <puts@plt>
   10f0c:	movw	r0, #5006	; 0x138e
   10f10:	movt	r0, #1
   10f14:	bl	10800 <puts@plt>
   10f18:	movw	r0, #5060	; 0x13c4
   10f1c:	movt	r0, #1
   10f20:	bl	10800 <puts@plt>
   10f24:	movw	r0, #5101	; 0x13ed
   10f28:	movt	r0, #1
   10f2c:	bl	10800 <puts@plt>
   10f30:	movw	r0, #5157	; 0x1425
   10f34:	movt	r0, #1
   10f38:	bl	10800 <puts@plt>
   10f3c:	movw	r0, #5182	; 0x143e
   10f40:	movt	r0, #1
   10f44:	bl	10800 <puts@plt>
   10f48:	movw	r0, #5221	; 0x1465
   10f4c:	movt	r0, #1
   10f50:	bl	10800 <puts@plt>
   10f54:	mov	r0, #0
   10f58:	bl	10824 <exit@plt>
   10f5c:	push	{fp, lr}
   10f60:	mov	fp, sp
   10f64:	movw	r0, #5257	; 0x1489
   10f68:	movt	r0, #1
   10f6c:	bl	10800 <puts@plt>
   10f70:	movw	r0, #5292	; 0x14ac
   10f74:	movt	r0, #1
   10f78:	bl	10800 <puts@plt>
   10f7c:	movw	r0, #5358	; 0x14ee
   10f80:	movt	r0, #1
   10f84:	bl	10800 <puts@plt>
   10f88:	movw	r0, #5422	; 0x152e
   10f8c:	movt	r0, #1
   10f90:	bl	10800 <puts@plt>
   10f94:	movw	r0, #5486	; 0x156e
   10f98:	movt	r0, #1
   10f9c:	bl	10800 <puts@plt>
   10fa0:	movw	r0, #5547	; 0x15ab
   10fa4:	movt	r0, #1
   10fa8:	bl	10800 <puts@plt>
   10fac:	movw	r0, #5585	; 0x15d1
   10fb0:	movt	r0, #1
   10fb4:	bl	10800 <puts@plt>
   10fb8:	mov	r0, #0
   10fbc:	bl	10824 <exit@plt>
   10fc0:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   10fc4:	add	fp, sp, #24
   10fc8:	mov	r4, r0
   10fcc:	movw	r0, #4641	; 0x1221
   10fd0:	mov	r5, r1
   10fd4:	mov	r1, #0
   10fd8:	movt	r0, #1
   10fdc:	bl	10734 <open@plt>
   10fe0:	cmn	r0, #1
   10fe4:	ble	11098 <sprintf@plt+0x868>
   10fe8:	mov	r7, r0
   10fec:	mov	r0, #1
   10ff0:	mov	r1, r5
   10ff4:	bl	1077c <calloc@plt>
   10ff8:	mov	r8, r0
   10ffc:	mov	r0, r7
   11000:	mov	r2, r5
   11004:	mov	r1, r8
   11008:	bl	10794 <read@plt>
   1100c:	cmp	r0, r5
   11010:	bne	110dc <sprintf@plt+0x8ac>
   11014:	cmp	r5, #1
   11018:	blt	1108c <sprintf@plt+0x85c>
   1101c:	and	r1, r5, #1
   11020:	mov	r0, #0
   11024:	beq	1106c <sprintf@plt+0x83c>
   11028:	movw	r3, #4653	; 0x122d
   1102c:	sub	r2, r5, r1
   11030:	mov	r0, #0
   11034:	movt	r3, #1
   11038:	mov	r6, r8
   1103c:	mov	r5, r4
   11040:	ldrb	r7, [r6, r0]!
   11044:	and	r7, r7, #63	; 0x3f
   11048:	ldrb	r7, [r3, r7]
   1104c:	strb	r7, [r5, r0]!
   11050:	add	r0, r0, #2
   11054:	ldrb	r7, [r6, #1]
   11058:	cmp	r2, r0
   1105c:	and	r7, r7, #63	; 0x3f
   11060:	ldrb	r7, [r3, r7]
   11064:	strb	r7, [r5, #1]
   11068:	bne	11038 <sprintf@plt+0x808>
   1106c:	cmp	r1, #0
   11070:	beq	1108c <sprintf@plt+0x85c>
   11074:	ldrb	r1, [r8, r0]
   11078:	movw	r2, #4653	; 0x122d
   1107c:	movt	r2, #1
   11080:	and	r1, r1, #63	; 0x3f
   11084:	ldrb	r1, [r2, r1]
   11088:	strb	r1, [r4, r0]
   1108c:	mov	r0, r8
   11090:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   11094:	b	10788 <free@plt>
   11098:	mov	r0, #0
   1109c:	bl	107dc <time@plt>
   110a0:	bl	1074c <srand@plt>
   110a4:	cmp	r5, #1
   110a8:	blt	11124 <sprintf@plt+0x8f4>
   110ac:	movw	r6, #4653	; 0x122d
   110b0:	movt	r6, #1
   110b4:	bl	1080c <rand@plt>
   110b8:	asr	r1, r0, #31
   110bc:	subs	r5, r5, #1
   110c0:	add	r1, r0, r1, lsr #26
   110c4:	bic	r1, r1, #63	; 0x3f
   110c8:	sub	r0, r0, r1
   110cc:	ldrb	r0, [r6, r0]
   110d0:	strb	r0, [r4], #1
   110d4:	bne	110b4 <sprintf@plt+0x884>
   110d8:	b	11124 <sprintf@plt+0x8f4>
   110dc:	mov	r0, r8
   110e0:	bl	10788 <free@plt>
   110e4:	mov	r0, #0
   110e8:	bl	107dc <time@plt>
   110ec:	bl	1074c <srand@plt>
   110f0:	cmp	r5, #1
   110f4:	blt	11124 <sprintf@plt+0x8f4>
   110f8:	movw	r6, #4653	; 0x122d
   110fc:	movt	r6, #1
   11100:	bl	1080c <rand@plt>
   11104:	asr	r1, r0, #31
   11108:	subs	r5, r5, #1
   1110c:	add	r1, r0, r1, lsr #26
   11110:	bic	r1, r1, #63	; 0x3f
   11114:	sub	r0, r0, r1
   11118:	ldrb	r0, [r6, r0]
   1111c:	strb	r0, [r4], #1
   11120:	bne	11100 <sprintf@plt+0x8d0>
   11124:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   11128:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1112c:	mov	r7, r0
   11130:	ldr	r6, [pc, #72]	; 11180 <sprintf@plt+0x950>
   11134:	ldr	r5, [pc, #72]	; 11184 <sprintf@plt+0x954>
   11138:	add	r6, pc, r6
   1113c:	add	r5, pc, r5
   11140:	sub	r6, r6, r5
   11144:	mov	r8, r1
   11148:	mov	r9, r2
   1114c:	bl	10714 <open@plt-0x20>
   11150:	asrs	r6, r6, #2
   11154:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   11158:	mov	r4, #0
   1115c:	add	r4, r4, #1
   11160:	ldr	r3, [r5], #4
   11164:	mov	r2, r9
   11168:	mov	r1, r8
   1116c:	mov	r0, r7
   11170:	blx	r3
   11174:	cmp	r6, r4
   11178:	bne	1115c <sprintf@plt+0x92c>
   1117c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   11180:			; <UNDEFINED> instruction: 0x00010db4
   11184:	andeq	r0, r1, ip, lsr #27
   11188:	bx	lr

Disassembly of section .fini:

0001118c <.fini>:
   1118c:	push	{r3, lr}
   11190:	pop	{r3, pc}
