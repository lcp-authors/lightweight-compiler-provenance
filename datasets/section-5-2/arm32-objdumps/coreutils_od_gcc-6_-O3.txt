
../repos/coreutils/src/od:     file format elf32-littlearm


Disassembly of section .init:

00010ef0 <.init>:
   10ef0:	push	{r3, lr}
   10ef4:	bl	12974 <__assert_fail@plt+0x1770>
   10ef8:	pop	{r3, pc}

Disassembly of section .plt:

00010efc <calloc@plt-0x14>:
   10efc:	push	{lr}		; (str lr, [sp, #-4]!)
   10f00:	ldr	lr, [pc, #4]	; 10f0c <calloc@plt-0x4>
   10f04:	add	lr, pc, lr
   10f08:	ldr	pc, [lr, #8]!
   10f0c:	strdeq	lr, [r1], -r4

00010f10 <calloc@plt>:
   10f10:	add	ip, pc, #0, 12
   10f14:	add	ip, ip, #122880	; 0x1e000
   10f18:	ldr	pc, [ip, #244]!	; 0xf4

00010f1c <fputs_unlocked@plt>:
   10f1c:	add	ip, pc, #0, 12
   10f20:	add	ip, ip, #122880	; 0x1e000
   10f24:	ldr	pc, [ip, #236]!	; 0xec

00010f28 <raise@plt>:
   10f28:	add	ip, pc, #0, 12
   10f2c:	add	ip, ip, #122880	; 0x1e000
   10f30:	ldr	pc, [ip, #228]!	; 0xe4

00010f34 <strcmp@plt>:
   10f34:	add	ip, pc, #0, 12
   10f38:	add	ip, ip, #122880	; 0x1e000
   10f3c:	ldr	pc, [ip, #220]!	; 0xdc

00010f40 <fflush@plt>:
   10f40:	add	ip, pc, #0, 12
   10f44:	add	ip, ip, #122880	; 0x1e000
   10f48:	ldr	pc, [ip, #212]!	; 0xd4

00010f4c <free@plt>:
   10f4c:	add	ip, pc, #0, 12
   10f50:	add	ip, ip, #122880	; 0x1e000
   10f54:	ldr	pc, [ip, #204]!	; 0xcc

00010f58 <ferror@plt>:
   10f58:	add	ip, pc, #0, 12
   10f5c:	add	ip, ip, #122880	; 0x1e000
   10f60:	ldr	pc, [ip, #196]!	; 0xc4

00010f64 <_exit@plt>:
   10f64:	add	ip, pc, #0, 12
   10f68:	add	ip, ip, #122880	; 0x1e000
   10f6c:	ldr	pc, [ip, #188]!	; 0xbc

00010f70 <memcpy@plt>:
   10f70:	add	ip, pc, #0, 12
   10f74:	add	ip, ip, #122880	; 0x1e000
   10f78:	ldr	pc, [ip, #180]!	; 0xb4

00010f7c <__strtoull_internal@plt>:
   10f7c:	add	ip, pc, #0, 12
   10f80:	add	ip, ip, #122880	; 0x1e000
   10f84:	ldr	pc, [ip, #172]!	; 0xac

00010f88 <mbsinit@plt>:
   10f88:	add	ip, pc, #0, 12
   10f8c:	add	ip, ip, #122880	; 0x1e000
   10f90:	ldr	pc, [ip, #164]!	; 0xa4

00010f94 <strtold@plt>:
   10f94:	add	ip, pc, #0, 12
   10f98:	add	ip, ip, #122880	; 0x1e000
   10f9c:	ldr	pc, [ip, #156]!	; 0x9c

00010fa0 <fwrite_unlocked@plt>:
   10fa0:	add	ip, pc, #0, 12
   10fa4:	add	ip, ip, #122880	; 0x1e000
   10fa8:	ldr	pc, [ip, #148]!	; 0x94

00010fac <memcmp@plt>:
   10fac:	add	ip, pc, #0, 12
   10fb0:	add	ip, ip, #122880	; 0x1e000
   10fb4:	ldr	pc, [ip, #140]!	; 0x8c

00010fb8 <fputc_unlocked@plt>:
   10fb8:	add	ip, pc, #0, 12
   10fbc:	add	ip, ip, #122880	; 0x1e000
   10fc0:	ldr	pc, [ip, #132]!	; 0x84

00010fc4 <dcgettext@plt>:
   10fc4:	add	ip, pc, #0, 12
   10fc8:	add	ip, ip, #122880	; 0x1e000
   10fcc:	ldr	pc, [ip, #124]!	; 0x7c

00010fd0 <realloc@plt>:
   10fd0:	add	ip, pc, #0, 12
   10fd4:	add	ip, ip, #122880	; 0x1e000
   10fd8:	ldr	pc, [ip, #116]!	; 0x74

00010fdc <textdomain@plt>:
   10fdc:	add	ip, pc, #0, 12
   10fe0:	add	ip, ip, #122880	; 0x1e000
   10fe4:	ldr	pc, [ip, #108]!	; 0x6c

00010fe8 <iswprint@plt>:
   10fe8:	add	ip, pc, #0, 12
   10fec:	add	ip, ip, #122880	; 0x1e000
   10ff0:	ldr	pc, [ip, #100]!	; 0x64

00010ff4 <__fxstat64@plt>:
   10ff4:	add	ip, pc, #0, 12
   10ff8:	add	ip, ip, #122880	; 0x1e000
   10ffc:	ldr	pc, [ip, #92]!	; 0x5c

00011000 <fwrite@plt>:
   11000:	add	ip, pc, #0, 12
   11004:	add	ip, ip, #122880	; 0x1e000
   11008:	ldr	pc, [ip, #84]!	; 0x54

0001100c <lseek64@plt>:
   1100c:	add	ip, pc, #0, 12
   11010:	add	ip, ip, #122880	; 0x1e000
   11014:	ldr	pc, [ip, #76]!	; 0x4c

00011018 <__ctype_get_mb_cur_max@plt>:
   11018:	add	ip, pc, #0, 12
   1101c:	add	ip, ip, #122880	; 0x1e000
   11020:	ldr	pc, [ip, #68]!	; 0x44

00011024 <__fpending@plt>:
   11024:	add	ip, pc, #0, 12
   11028:	add	ip, ip, #122880	; 0x1e000
   1102c:	ldr	pc, [ip, #60]!	; 0x3c

00011030 <mbrtowc@plt>:
   11030:	add	ip, pc, #0, 12
   11034:	add	ip, ip, #122880	; 0x1e000
   11038:	ldr	pc, [ip, #52]!	; 0x34

0001103c <error@plt>:
   1103c:	add	ip, pc, #0, 12
   11040:	add	ip, ip, #122880	; 0x1e000
   11044:	ldr	pc, [ip, #44]!	; 0x2c

00011048 <strtof@plt>:
   11048:	add	ip, pc, #0, 12
   1104c:	add	ip, ip, #122880	; 0x1e000
   11050:	ldr	pc, [ip, #36]!	; 0x24

00011054 <puts@plt>:
   11054:	add	ip, pc, #0, 12
   11058:	add	ip, ip, #122880	; 0x1e000
   1105c:	ldr	pc, [ip, #28]!

00011060 <malloc@plt>:
   11060:	add	ip, pc, #0, 12
   11064:	add	ip, ip, #122880	; 0x1e000
   11068:	ldr	pc, [ip, #20]!

0001106c <__libc_start_main@plt>:
   1106c:	add	ip, pc, #0, 12
   11070:	add	ip, ip, #122880	; 0x1e000
   11074:	ldr	pc, [ip, #12]!

00011078 <__vfprintf_chk@plt>:
   11078:	add	ip, pc, #0, 12
   1107c:	add	ip, ip, #122880	; 0x1e000
   11080:	ldr	pc, [ip, #4]!

00011084 <__freading@plt>:
   11084:	add	ip, pc, #0, 12
   11088:	add	ip, ip, #118784	; 0x1d000
   1108c:	ldr	pc, [ip, #4092]!	; 0xffc

00011090 <__gmon_start__@plt>:
   11090:	add	ip, pc, #0, 12
   11094:	add	ip, ip, #118784	; 0x1d000
   11098:	ldr	pc, [ip, #4084]!	; 0xff4

0001109c <getopt_long@plt>:
   1109c:	add	ip, pc, #0, 12
   110a0:	add	ip, ip, #118784	; 0x1d000
   110a4:	ldr	pc, [ip, #4076]!	; 0xfec

000110a8 <__ctype_b_loc@plt>:
   110a8:	add	ip, pc, #0, 12
   110ac:	add	ip, ip, #118784	; 0x1d000
   110b0:	ldr	pc, [ip, #4068]!	; 0xfe4

000110b4 <exit@plt>:
   110b4:	add	ip, pc, #0, 12
   110b8:	add	ip, ip, #118784	; 0x1d000
   110bc:	ldr	pc, [ip, #4060]!	; 0xfdc

000110c0 <strlen@plt>:
   110c0:	add	ip, pc, #0, 12
   110c4:	add	ip, ip, #118784	; 0x1d000
   110c8:	ldr	pc, [ip, #4052]!	; 0xfd4

000110cc <strchr@plt>:
   110cc:	add	ip, pc, #0, 12
   110d0:	add	ip, ip, #118784	; 0x1d000
   110d4:	ldr	pc, [ip, #4044]!	; 0xfcc

000110d8 <__errno_location@plt>:
   110d8:	add	ip, pc, #0, 12
   110dc:	add	ip, ip, #118784	; 0x1d000
   110e0:	ldr	pc, [ip, #4036]!	; 0xfc4

000110e4 <__sprintf_chk@plt>:
   110e4:	add	ip, pc, #0, 12
   110e8:	add	ip, ip, #118784	; 0x1d000
   110ec:	ldr	pc, [ip, #4028]!	; 0xfbc

000110f0 <__cxa_atexit@plt>:
   110f0:	add	ip, pc, #0, 12
   110f4:	add	ip, ip, #118784	; 0x1d000
   110f8:	ldr	pc, [ip, #4020]!	; 0xfb4

000110fc <setvbuf@plt>:
   110fc:	add	ip, pc, #0, 12
   11100:	add	ip, ip, #118784	; 0x1d000
   11104:	ldr	pc, [ip, #4012]!	; 0xfac

00011108 <memset@plt>:
   11108:	add	ip, pc, #0, 12
   1110c:	add	ip, ip, #118784	; 0x1d000
   11110:	ldr	pc, [ip, #4004]!	; 0xfa4

00011114 <fgetc@plt>:
   11114:	add	ip, pc, #0, 12
   11118:	add	ip, ip, #118784	; 0x1d000
   1111c:	ldr	pc, [ip, #3996]!	; 0xf9c

00011120 <__printf_chk@plt>:
   11120:	add	ip, pc, #0, 12
   11124:	add	ip, ip, #118784	; 0x1d000
   11128:	ldr	pc, [ip, #3988]!	; 0xf94

0001112c <strtod@plt>:
   1112c:	add	ip, pc, #0, 12
   11130:	add	ip, ip, #118784	; 0x1d000
   11134:	ldr	pc, [ip, #3980]!	; 0xf8c

00011138 <fileno@plt>:
   11138:	add	ip, pc, #0, 12
   1113c:	add	ip, ip, #118784	; 0x1d000
   11140:	ldr	pc, [ip, #3972]!	; 0xf84

00011144 <__fprintf_chk@plt>:
   11144:	add	ip, pc, #0, 12
   11148:	add	ip, ip, #118784	; 0x1d000
   1114c:	ldr	pc, [ip, #3964]!	; 0xf7c

00011150 <fclose@plt>:
   11150:	add	ip, pc, #0, 12
   11154:	add	ip, ip, #118784	; 0x1d000
   11158:	ldr	pc, [ip, #3956]!	; 0xf74

0001115c <fseeko64@plt>:
   1115c:	add	ip, pc, #0, 12
   11160:	add	ip, ip, #118784	; 0x1d000
   11164:	ldr	pc, [ip, #3948]!	; 0xf6c

00011168 <__overflow@plt>:
   11168:	add	ip, pc, #0, 12
   1116c:	add	ip, ip, #118784	; 0x1d000
   11170:	ldr	pc, [ip, #3940]!	; 0xf64

00011174 <setlocale@plt>:
   11174:	add	ip, pc, #0, 12
   11178:	add	ip, ip, #118784	; 0x1d000
   1117c:	ldr	pc, [ip, #3932]!	; 0xf5c

00011180 <strrchr@plt>:
   11180:	add	ip, pc, #0, 12
   11184:	add	ip, ip, #118784	; 0x1d000
   11188:	ldr	pc, [ip, #3924]!	; 0xf54

0001118c <nl_langinfo@plt>:
   1118c:	add	ip, pc, #0, 12
   11190:	add	ip, ip, #118784	; 0x1d000
   11194:	ldr	pc, [ip, #3916]!	; 0xf4c

00011198 <__fread_unlocked_chk@plt>:
   11198:	add	ip, pc, #0, 12
   1119c:	add	ip, ip, #118784	; 0x1d000
   111a0:	ldr	pc, [ip, #3908]!	; 0xf44

000111a4 <localeconv@plt>:
   111a4:	add	ip, pc, #0, 12
   111a8:	add	ip, ip, #118784	; 0x1d000
   111ac:	ldr	pc, [ip, #3900]!	; 0xf3c

000111b0 <clearerr_unlocked@plt>:
   111b0:	add	ip, pc, #0, 12
   111b4:	add	ip, ip, #118784	; 0x1d000
   111b8:	ldr	pc, [ip, #3892]!	; 0xf34

000111bc <fopen64@plt>:
   111bc:	add	ip, pc, #0, 12
   111c0:	add	ip, ip, #118784	; 0x1d000
   111c4:	ldr	pc, [ip, #3884]!	; 0xf2c

000111c8 <bindtextdomain@plt>:
   111c8:	add	ip, pc, #0, 12
   111cc:	add	ip, ip, #118784	; 0x1d000
   111d0:	ldr	pc, [ip, #3876]!	; 0xf24

000111d4 <fread_unlocked@plt>:
   111d4:	add	ip, pc, #0, 12
   111d8:	add	ip, ip, #118784	; 0x1d000
   111dc:	ldr	pc, [ip, #3868]!	; 0xf1c

000111e0 <strncmp@plt>:
   111e0:	add	ip, pc, #0, 12
   111e4:	add	ip, ip, #118784	; 0x1d000
   111e8:	ldr	pc, [ip, #3860]!	; 0xf14

000111ec <abort@plt>:
   111ec:	add	ip, pc, #0, 12
   111f0:	add	ip, ip, #118784	; 0x1d000
   111f4:	ldr	pc, [ip, #3852]!	; 0xf0c

000111f8 <__snprintf_chk@plt>:
   111f8:	add	ip, pc, #0, 12
   111fc:	add	ip, ip, #118784	; 0x1d000
   11200:	ldr	pc, [ip, #3844]!	; 0xf04

00011204 <__assert_fail@plt>:
   11204:	add	ip, pc, #0, 12
   11208:	add	ip, ip, #118784	; 0x1d000
   1120c:	ldr	pc, [ip, #3836]!	; 0xefc

Disassembly of section .text:

00011210 <.text>:
   11210:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11214:	mov	fp, r0
   11218:	sub	sp, sp, #60	; 0x3c
   1121c:	ldr	r0, [r1]
   11220:	mov	r9, r1
   11224:	bl	161dc <__assert_fail@plt+0x4fd8>
   11228:	ldr	r1, [pc, #3964]	; 121ac <__assert_fail@plt+0xfa8>
   1122c:	mov	r0, #6
   11230:	bl	11174 <setlocale@plt>
   11234:	ldr	r1, [pc, #3956]	; 121b0 <__assert_fail@plt+0xfac>
   11238:	ldr	r0, [pc, #3956]	; 121b4 <__assert_fail@plt+0xfb0>
   1123c:	ldr	r4, [pc, #3956]	; 121b8 <__assert_fail@plt+0xfb4>
   11240:	bl	111c8 <bindtextdomain@plt>
   11244:	ldr	r0, [pc, #3944]	; 121b4 <__assert_fail@plt+0xfb0>
   11248:	bl	10fdc <textdomain@plt>
   1124c:	ldr	r0, [pc, #3944]	; 121bc <__assert_fail@plt+0xfb8>
   11250:	bl	1ccbc <__assert_fail@plt+0xbab8>
   11254:	ldr	r8, [pc, #3940]	; 121c0 <__assert_fail@plt+0xfbc>
   11258:	mov	r2, #36	; 0x24
   1125c:	mov	r1, #0
   11260:	add	r0, r4, #24
   11264:	bl	11108 <memset@plt>
   11268:	mov	r5, #1
   1126c:	mov	r3, #5
   11270:	mov	lr, #2
   11274:	mov	ip, #4
   11278:	mov	r2, #36	; 0x24
   1127c:	add	r0, r4, #60	; 0x3c
   11280:	mov	r1, #0
   11284:	str	r3, [r4, #56]	; 0x38
   11288:	str	lr, [r4, #32]
   1128c:	str	ip, [r4, #40]	; 0x28
   11290:	str	r5, [r4, #28]
   11294:	bl	11108 <memset@plt>
   11298:	mov	r3, #0
   1129c:	add	r2, r8, #244	; 0xf4
   112a0:	str	r3, [sp, #16]
   112a4:	mov	r6, r3
   112a8:	str	r3, [sp, #28]
   112ac:	str	r2, [sp, #32]
   112b0:	str	r3, [r4, #12]
   112b4:	mov	r2, #6
   112b8:	str	r3, [r4, #16]
   112bc:	str	r3, [r4, #20]
   112c0:	strb	r3, [r4, #110]	; 0x6e
   112c4:	mov	r3, #7
   112c8:	str	r2, [r4, #76]	; 0x4c
   112cc:	str	r3, [r4, #92]	; 0x5c
   112d0:	mov	r2, #8
   112d4:	str	r3, [r4]
   112d8:	mov	sl, r5
   112dc:	ldr	r3, [pc, #3808]	; 121c4 <__assert_fail@plt+0xfc0>
   112e0:	str	r2, [r4, #4]
   112e4:	add	r2, sp, #40	; 0x28
   112e8:	str	r2, [sp, #24]
   112ec:	str	r3, [r4, #120]	; 0x78
   112f0:	ldr	r3, [sp, #24]
   112f4:	mvn	ip, #0
   112f8:	str	r3, [sp]
   112fc:	ldr	r2, [pc, #3780]	; 121c8 <__assert_fail@plt+0xfc4>
   11300:	mov	r3, r8
   11304:	mov	r1, r9
   11308:	mov	r0, fp
   1130c:	str	ip, [sp, #40]	; 0x28
   11310:	bl	1109c <getopt_long@plt>
   11314:	cmn	r0, #1
   11318:	beq	11b64 <__assert_fail@plt+0x960>
   1131c:	add	r0, r0, #3
   11320:	cmp	r0, #260	; 0x104
   11324:	ldrls	pc, [pc, r0, lsl #2]
   11328:	b	11b30 <__assert_fail@plt+0x92c>
   1132c:	andeq	r1, r1, ip, ror #20
   11330:	andeq	r1, r1, r4, ror #20
   11334:	andeq	r1, r1, r0, lsr fp
   11338:	andeq	r1, r1, r0, lsr fp
   1133c:	andeq	r1, r1, r0, lsr fp
   11340:	andeq	r1, r1, r0, lsr fp
   11344:	andeq	r1, r1, r0, lsr fp
   11348:	andeq	r1, r1, r0, lsr fp
   1134c:	andeq	r1, r1, r0, lsr fp
   11350:	andeq	r1, r1, r0, lsr fp
   11354:	andeq	r1, r1, r0, lsr fp
   11358:	andeq	r1, r1, r0, lsr fp
   1135c:	andeq	r1, r1, r0, lsr fp
   11360:	andeq	r1, r1, r0, lsr fp
   11364:	andeq	r1, r1, r0, lsr fp
   11368:	andeq	r1, r1, r0, lsr fp
   1136c:	andeq	r1, r1, r0, lsr fp
   11370:	andeq	r1, r1, r0, lsr fp
   11374:	andeq	r1, r1, r0, lsr fp
   11378:	andeq	r1, r1, r0, lsr fp
   1137c:	andeq	r1, r1, r0, lsr fp
   11380:	andeq	r1, r1, r0, lsr fp
   11384:	andeq	r1, r1, r0, lsr fp
   11388:	andeq	r1, r1, r0, lsr fp
   1138c:	andeq	r1, r1, r0, lsr fp
   11390:	andeq	r1, r1, r0, lsr fp
   11394:	andeq	r1, r1, r0, lsr fp
   11398:	andeq	r1, r1, r0, lsr fp
   1139c:	andeq	r1, r1, r0, lsr fp
   113a0:	andeq	r1, r1, r0, lsr fp
   113a4:	andeq	r1, r1, r0, lsr fp
   113a8:	andeq	r1, r1, r0, lsr fp
   113ac:	andeq	r1, r1, r0, lsr fp
   113b0:	andeq	r1, r1, r0, lsr fp
   113b4:	andeq	r1, r1, r0, lsr fp
   113b8:	andeq	r1, r1, r0, lsr fp
   113bc:	andeq	r1, r1, r0, lsr fp
   113c0:	andeq	r1, r1, r0, lsr fp
   113c4:	andeq	r1, r1, r0, lsr fp
   113c8:	andeq	r1, r1, r0, lsr fp
   113cc:	andeq	r1, r1, r0, lsr fp
   113d0:	andeq	r1, r1, r0, lsr fp
   113d4:	andeq	r1, r1, r0, lsr fp
   113d8:	andeq	r1, r1, r0, lsr fp
   113dc:	andeq	r1, r1, r0, lsr fp
   113e0:	andeq	r1, r1, r0, lsr fp
   113e4:	andeq	r1, r1, r0, lsr fp
   113e8:	andeq	r1, r1, r0, lsr fp
   113ec:	andeq	r1, r1, r0, lsr fp
   113f0:	andeq	r1, r1, r0, lsr fp
   113f4:	andeq	r1, r1, r0, lsr fp
   113f8:	andeq	r1, r1, r0, lsr fp
   113fc:	andeq	r1, r1, r0, lsr fp
   11400:	andeq	r1, r1, r0, lsr fp
   11404:	andeq	r1, r1, r0, lsr fp
   11408:	andeq	r1, r1, r0, lsr fp
   1140c:	andeq	r1, r1, r0, lsr fp
   11410:	andeq	r1, r1, r0, lsr fp
   11414:	andeq	r1, r1, r0, lsr fp
   11418:	andeq	r1, r1, r0, lsr fp
   1141c:	andeq	r1, r1, r0, lsr fp
   11420:	andeq	r1, r1, r0, lsr fp
   11424:	andeq	r1, r1, r0, lsr fp
   11428:	andeq	r1, r1, r0, lsr fp
   1142c:	andeq	r1, r1, r0, lsr fp
   11430:	andeq	r1, r1, r0, lsr fp
   11434:	andeq	r1, r1, r0, lsr fp
   11438:	andeq	r1, r1, r0, lsr fp
   1143c:	andeq	r1, r1, r0, lsr #20
   11440:	andeq	r1, r1, ip, lsl #20
   11444:	andeq	r1, r1, r0, lsr fp
   11448:	strdeq	r1, [r1], -r8
   1144c:	andeq	r1, r1, r0, lsr fp
   11450:	andeq	r1, r1, r4, ror #19
   11454:	andeq	r1, r1, r0, lsr fp
   11458:	andeq	r1, r1, r4, lsl #19
   1145c:	andeq	r1, r1, r0, ror r9
   11460:	andeq	r1, r1, r0, lsr fp
   11464:	andeq	r1, r1, r0, lsr fp
   11468:	andeq	r1, r1, r0, ror r9
   1146c:	andeq	r1, r1, r0, lsr fp
   11470:	muleq	r1, r8, r9
   11474:	andeq	r1, r1, ip, asr r9
   11478:	andeq	r1, r1, r0, lsr fp
   1147c:	andeq	r1, r1, r0, lsr fp
   11480:	andeq	r1, r1, r0, lsr fp
   11484:	strdeq	r1, [r1], -r8
   11488:	andeq	r1, r1, r0, lsr fp
   1148c:	andeq	r1, r1, r0, lsr fp
   11490:	andeq	r1, r1, r0, lsr fp
   11494:	andeq	r1, r1, r0, lsr fp
   11498:	andeq	r1, r1, r4, lsl #19
   1149c:	andeq	r1, r1, r0, lsr fp
   114a0:	andeq	r1, r1, r0, lsr fp
   114a4:	andeq	r1, r1, r0, lsr fp
   114a8:	andeq	r1, r1, r0, lsr fp
   114ac:	andeq	r1, r1, r0, lsr fp
   114b0:	andeq	r1, r1, r0, lsr fp
   114b4:	andeq	r1, r1, r0, lsr fp
   114b8:	andeq	r1, r1, r0, lsr fp
   114bc:	andeq	r1, r1, r4, ror #17
   114c0:	ldrdeq	r1, [r1], -r0
   114c4:			; <UNDEFINED> instruction: 0x000118bc
   114c8:	andeq	r1, r1, r8, lsr #17
   114cc:	andeq	r1, r1, r4, ror #19
   114d0:	muleq	r1, r4, r8
   114d4:	andeq	r1, r1, r0, lsr fp
   114d8:	andeq	r1, r1, r0, lsl #17
   114dc:	andeq	r1, r1, ip, ror #16
   114e0:	andeq	r1, r1, ip, lsr r8
   114e4:	andeq	r1, r1, r0, lsr fp
   114e8:	andeq	r1, r1, r0, ror r9
   114ec:	andeq	r1, r1, r0, lsr fp
   114f0:	andeq	r1, r1, r0, lsr fp
   114f4:	andeq	r1, r1, ip, lsl #20
   114f8:	andeq	r1, r1, r0, lsr fp
   114fc:	andeq	r1, r1, r0, lsr fp
   11500:	andeq	r1, r1, r0, lsr fp
   11504:	andeq	r1, r1, r8, lsr #16
   11508:	andeq	r1, r1, ip, lsl #16
   1150c:	andeq	r1, r1, r0, lsr fp
   11510:	strdeq	r1, [r1], -r8
   11514:	muleq	r1, ip, r7
   11518:	andeq	r1, r1, r0, lsl #17
   1151c:	andeq	r1, r1, r0, lsr fp
   11520:	andeq	r1, r1, r0, lsr fp
   11524:	andeq	r1, r1, r0, lsr fp
   11528:	andeq	r1, r1, r0, lsr fp
   1152c:	andeq	r1, r1, r0, lsr fp
   11530:	andeq	r1, r1, r0, lsr fp
   11534:	andeq	r1, r1, r0, lsr fp
   11538:	andeq	r1, r1, r0, lsr fp
   1153c:	andeq	r1, r1, r0, lsr fp
   11540:	andeq	r1, r1, r0, lsr fp
   11544:	andeq	r1, r1, r0, lsr fp
   11548:	andeq	r1, r1, r0, lsr fp
   1154c:	andeq	r1, r1, r0, lsr fp
   11550:	andeq	r1, r1, r0, lsr fp
   11554:	andeq	r1, r1, r0, lsr fp
   11558:	andeq	r1, r1, r0, lsr fp
   1155c:	andeq	r1, r1, r0, lsr fp
   11560:	andeq	r1, r1, r0, lsr fp
   11564:	andeq	r1, r1, r0, lsr fp
   11568:	andeq	r1, r1, r0, lsr fp
   1156c:	andeq	r1, r1, r0, lsr fp
   11570:	andeq	r1, r1, r0, lsr fp
   11574:	andeq	r1, r1, r0, lsr fp
   11578:	andeq	r1, r1, r0, lsr fp
   1157c:	andeq	r1, r1, r0, lsr fp
   11580:	andeq	r1, r1, r0, lsr fp
   11584:	andeq	r1, r1, r0, lsr fp
   11588:	andeq	r1, r1, r0, lsr fp
   1158c:	andeq	r1, r1, r0, lsr fp
   11590:	andeq	r1, r1, r0, lsr fp
   11594:	andeq	r1, r1, r0, lsr fp
   11598:	andeq	r1, r1, r0, lsr fp
   1159c:	andeq	r1, r1, r0, lsr fp
   115a0:	andeq	r1, r1, r0, lsr fp
   115a4:	andeq	r1, r1, r0, lsr fp
   115a8:	andeq	r1, r1, r0, lsr fp
   115ac:	andeq	r1, r1, r0, lsr fp
   115b0:	andeq	r1, r1, r0, lsr fp
   115b4:	andeq	r1, r1, r0, lsr fp
   115b8:	andeq	r1, r1, r0, lsr fp
   115bc:	andeq	r1, r1, r0, lsr fp
   115c0:	andeq	r1, r1, r0, lsr fp
   115c4:	andeq	r1, r1, r0, lsr fp
   115c8:	andeq	r1, r1, r0, lsr fp
   115cc:	andeq	r1, r1, r0, lsr fp
   115d0:	andeq	r1, r1, r0, lsr fp
   115d4:	andeq	r1, r1, r0, lsr fp
   115d8:	andeq	r1, r1, r0, lsr fp
   115dc:	andeq	r1, r1, r0, lsr fp
   115e0:	andeq	r1, r1, r0, lsr fp
   115e4:	andeq	r1, r1, r0, lsr fp
   115e8:	andeq	r1, r1, r0, lsr fp
   115ec:	andeq	r1, r1, r0, lsr fp
   115f0:	andeq	r1, r1, r0, lsr fp
   115f4:	andeq	r1, r1, r0, lsr fp
   115f8:	andeq	r1, r1, r0, lsr fp
   115fc:	andeq	r1, r1, r0, lsr fp
   11600:	andeq	r1, r1, r0, lsr fp
   11604:	andeq	r1, r1, r0, lsr fp
   11608:	andeq	r1, r1, r0, lsr fp
   1160c:	andeq	r1, r1, r0, lsr fp
   11610:	andeq	r1, r1, r0, lsr fp
   11614:	andeq	r1, r1, r0, lsr fp
   11618:	andeq	r1, r1, r0, lsr fp
   1161c:	andeq	r1, r1, r0, lsr fp
   11620:	andeq	r1, r1, r0, lsr fp
   11624:	andeq	r1, r1, r0, lsr fp
   11628:	andeq	r1, r1, r0, lsr fp
   1162c:	andeq	r1, r1, r0, lsr fp
   11630:	andeq	r1, r1, r0, lsr fp
   11634:	andeq	r1, r1, r0, lsr fp
   11638:	andeq	r1, r1, r0, lsr fp
   1163c:	andeq	r1, r1, r0, lsr fp
   11640:	andeq	r1, r1, r0, lsr fp
   11644:	andeq	r1, r1, r0, lsr fp
   11648:	andeq	r1, r1, r0, lsr fp
   1164c:	andeq	r1, r1, r0, lsr fp
   11650:	andeq	r1, r1, r0, lsr fp
   11654:	andeq	r1, r1, r0, lsr fp
   11658:	andeq	r1, r1, r0, lsr fp
   1165c:	andeq	r1, r1, r0, lsr fp
   11660:	andeq	r1, r1, r0, lsr fp
   11664:	andeq	r1, r1, r0, lsr fp
   11668:	andeq	r1, r1, r0, lsr fp
   1166c:	andeq	r1, r1, r0, lsr fp
   11670:	andeq	r1, r1, r0, lsr fp
   11674:	andeq	r1, r1, r0, lsr fp
   11678:	andeq	r1, r1, r0, lsr fp
   1167c:	andeq	r1, r1, r0, lsr fp
   11680:	andeq	r1, r1, r0, lsr fp
   11684:	andeq	r1, r1, r0, lsr fp
   11688:	andeq	r1, r1, r0, lsr fp
   1168c:	andeq	r1, r1, r0, lsr fp
   11690:	andeq	r1, r1, r0, lsr fp
   11694:	andeq	r1, r1, r0, lsr fp
   11698:	andeq	r1, r1, r0, lsr fp
   1169c:	andeq	r1, r1, r0, lsr fp
   116a0:	andeq	r1, r1, r0, lsr fp
   116a4:	andeq	r1, r1, r0, lsr fp
   116a8:	andeq	r1, r1, r0, lsr fp
   116ac:	andeq	r1, r1, r0, lsr fp
   116b0:	andeq	r1, r1, r0, lsr fp
   116b4:	andeq	r1, r1, r0, lsr fp
   116b8:	andeq	r1, r1, r0, lsr fp
   116bc:	andeq	r1, r1, r0, lsr fp
   116c0:	andeq	r1, r1, r0, lsr fp
   116c4:	andeq	r1, r1, r0, lsr fp
   116c8:	andeq	r1, r1, r0, lsr fp
   116cc:	andeq	r1, r1, r0, lsr fp
   116d0:	andeq	r1, r1, r0, lsr fp
   116d4:	andeq	r1, r1, r0, lsr fp
   116d8:	andeq	r1, r1, r0, lsr fp
   116dc:	andeq	r1, r1, r0, lsr fp
   116e0:	andeq	r1, r1, r0, lsr fp
   116e4:	andeq	r1, r1, r0, lsr fp
   116e8:	andeq	r1, r1, r0, lsr fp
   116ec:	andeq	r1, r1, r0, lsr fp
   116f0:	andeq	r1, r1, r0, lsr fp
   116f4:	andeq	r1, r1, r0, lsr fp
   116f8:	andeq	r1, r1, r0, lsr fp
   116fc:	andeq	r1, r1, r0, lsr fp
   11700:	andeq	r1, r1, r0, lsr fp
   11704:	andeq	r1, r1, r0, lsr fp
   11708:	andeq	r1, r1, r0, lsr fp
   1170c:	andeq	r1, r1, r0, lsr fp
   11710:	andeq	r1, r1, r0, lsr fp
   11714:	andeq	r1, r1, r0, lsr fp
   11718:	andeq	r1, r1, r0, lsr fp
   1171c:	andeq	r1, r1, r0, lsr fp
   11720:	andeq	r1, r1, r0, lsr fp
   11724:	andeq	r1, r1, r0, lsr fp
   11728:	andeq	r1, r1, r0, lsr fp
   1172c:	andeq	r1, r1, r0, lsr fp
   11730:	andeq	r1, r1, r0, lsr fp
   11734:	andeq	r1, r1, r0, lsr fp
   11738:	muleq	r1, r0, r7
   1173c:	andeq	r1, r1, r0, asr #14
   11740:	ldr	r3, [pc, #2692]	; 121cc <__assert_fail@plt+0xfc8>
   11744:	str	r5, [sp, #8]
   11748:	ldr	r1, [pc, #2904]	; 122a8 <__assert_fail@plt+0x10a4>
   1174c:	ldr	r3, [r3]
   11750:	mov	r2, #4
   11754:	ldr	r0, [pc, #2676]	; 121d0 <__assert_fail@plt+0xfcc>
   11758:	stm	sp, {r2, r3}
   1175c:	ldr	r3, [sp, #32]
   11760:	ldr	r2, [pc, #2668]	; 121d4 <__assert_fail@plt+0xfd0>
   11764:	ldr	r1, [r1]
   11768:	bl	15860 <__assert_fail@plt+0x465c>
   1176c:	ldr	r3, [pc, #2792]	; 1225c <__assert_fail@plt+0x1058>
   11770:	add	r0, r3, r0, lsl #2
   11774:	ldr	r3, [r0, #804]	; 0x324
   11778:	cmp	r3, #0
   1177c:	beq	11788 <__assert_fail@plt+0x584>
   11780:	cmp	r3, #1
   11784:	bne	112f0 <__assert_fail@plt+0xec>
   11788:	strb	r3, [r4, #8]
   1178c:	b	112f0 <__assert_fail@plt+0xec>
   11790:	mov	r3, #1
   11794:	strb	r3, [r4, #156]	; 0x9c
   11798:	b	112f0 <__assert_fail@plt+0xec>
   1179c:	ldr	r3, [pc, #2820]	; 122a8 <__assert_fail@plt+0x10a4>
   117a0:	ldr	r0, [r3]
   117a4:	cmp	r0, #0
   117a8:	beq	11b38 <__assert_fail@plt+0x934>
   117ac:	ldr	r3, [pc, #2552]	; 121ac <__assert_fail@plt+0xfa8>
   117b0:	mov	r1, #0
   117b4:	str	r3, [sp]
   117b8:	mov	r2, #10
   117bc:	add	r3, sp, #48	; 0x30
   117c0:	bl	1b5b8 <__assert_fail@plt+0xa3b4>
   117c4:	subs	r1, r0, #0
   117c8:	bne	12894 <__assert_fail@plt+0x1690>
   117cc:	ldrd	r2, [sp, #48]	; 0x30
   117d0:	mov	r7, #0
   117d4:	mvn	r6, #0
   117d8:	cmp	r3, r7
   117dc:	cmpeq	r2, r6
   117e0:	bhi	128cc <__assert_fail@plt+0x16c8>
   117e4:	mov	r3, #1
   117e8:	str	r2, [sp, #28]
   117ec:	str	r3, [sp, #16]
   117f0:	mov	r6, r5
   117f4:	b	112f0 <__assert_fail@plt+0xec>
   117f8:	ldr	r3, [pc, #2520]	; 121d8 <__assert_fail@plt+0xfd4>
   117fc:	mov	r2, #0
   11800:	mov	r6, #1
   11804:	strb	r2, [r3]
   11808:	b	112f0 <__assert_fail@plt+0xec>
   1180c:	ldr	r3, [pc, #2708]	; 122a8 <__assert_fail@plt+0x10a4>
   11810:	mov	r6, #1
   11814:	ldr	r0, [r3]
   11818:	bl	13a6c <__assert_fail@plt+0x2868>
   1181c:	and	sl, sl, r0
   11820:	uxtb	sl, sl
   11824:	b	112f0 <__assert_fail@plt+0xec>
   11828:	ldr	r0, [pc, #2476]	; 121dc <__assert_fail@plt+0xfd8>
   1182c:	bl	13a6c <__assert_fail@plt+0x2868>
   11830:	and	sl, sl, r0
   11834:	uxtb	sl, sl
   11838:	b	112f0 <__assert_fail@plt+0xec>
   1183c:	ldr	r0, [pc, #2660]	; 122a8 <__assert_fail@plt+0x10a4>
   11840:	ldr	r3, [pc, #2456]	; 121e0 <__assert_fail@plt+0xfdc>
   11844:	mov	r2, #0
   11848:	str	r3, [sp]
   1184c:	mov	r1, r2
   11850:	ldr	r3, [pc, #2444]	; 121e4 <__assert_fail@plt+0xfe0>
   11854:	ldr	r0, [r0]
   11858:	bl	1b5b8 <__assert_fail@plt+0xa3b4>
   1185c:	cmp	r0, #0
   11860:	bne	1291c <__assert_fail@plt+0x1718>
   11864:	mov	r6, #1
   11868:	b	112f0 <__assert_fail@plt+0xec>
   1186c:	ldr	r0, [pc, #2420]	; 121e8 <__assert_fail@plt+0xfe4>
   11870:	bl	13a6c <__assert_fail@plt+0x2868>
   11874:	and	sl, sl, r0
   11878:	uxtb	sl, sl
   1187c:	b	112f0 <__assert_fail@plt+0xec>
   11880:	ldr	r0, [pc, #2404]	; 121ec <__assert_fail@plt+0xfe8>
   11884:	bl	13a6c <__assert_fail@plt+0x2868>
   11888:	and	sl, sl, r0
   1188c:	uxtb	sl, sl
   11890:	b	112f0 <__assert_fail@plt+0xec>
   11894:	ldr	r0, [pc, #2388]	; 121f0 <__assert_fail@plt+0xfec>
   11898:	bl	13a6c <__assert_fail@plt+0x2868>
   1189c:	and	sl, sl, r0
   118a0:	uxtb	sl, sl
   118a4:	b	112f0 <__assert_fail@plt+0xec>
   118a8:	ldr	r0, [pc, #2372]	; 121f4 <__assert_fail@plt+0xff0>
   118ac:	bl	13a6c <__assert_fail@plt+0x2868>
   118b0:	and	sl, sl, r0
   118b4:	uxtb	sl, sl
   118b8:	b	112f0 <__assert_fail@plt+0xec>
   118bc:	ldr	r0, [pc, #2356]	; 121f8 <__assert_fail@plt+0xff4>
   118c0:	bl	13a6c <__assert_fail@plt+0x2868>
   118c4:	and	sl, sl, r0
   118c8:	uxtb	sl, sl
   118cc:	b	112f0 <__assert_fail@plt+0xec>
   118d0:	ldr	r0, [pc, #2340]	; 121fc <__assert_fail@plt+0xff8>
   118d4:	bl	13a6c <__assert_fail@plt+0x2868>
   118d8:	and	sl, sl, r0
   118dc:	uxtb	sl, sl
   118e0:	b	112f0 <__assert_fail@plt+0xec>
   118e4:	ldr	r0, [pc, #2324]	; 12200 <__assert_fail@plt+0xffc>
   118e8:	bl	13a6c <__assert_fail@plt+0x2868>
   118ec:	and	sl, sl, r0
   118f0:	uxtb	sl, sl
   118f4:	b	112f0 <__assert_fail@plt+0xec>
   118f8:	ldr	r3, [pc, #2472]	; 122a8 <__assert_fail@plt+0x10a4>
   118fc:	ldr	r0, [r3]
   11900:	cmp	r0, #0
   11904:	moveq	r3, #3
   11908:	streq	r3, [r4, #152]	; 0x98
   1190c:	beq	1194c <__assert_fail@plt+0x748>
   11910:	ldr	r3, [pc, #2248]	; 121e0 <__assert_fail@plt+0xfdc>
   11914:	mov	r2, #0
   11918:	str	r3, [sp]
   1191c:	mov	r1, r2
   11920:	add	r3, sp, #48	; 0x30
   11924:	bl	1b5b8 <__assert_fail@plt+0xa3b4>
   11928:	subs	r1, r0, #0
   1192c:	bne	12900 <__assert_fail@plt+0x16fc>
   11930:	ldrd	r2, [sp, #48]	; 0x30
   11934:	mov	r7, #0
   11938:	mvn	r6, #0
   1193c:	cmp	r3, r7
   11940:	cmpeq	r2, r6
   11944:	bhi	128cc <__assert_fail@plt+0x16c8>
   11948:	str	r2, [r4, #152]	; 0x98
   1194c:	mov	r3, #1
   11950:	strb	r3, [r4, #110]	; 0x6e
   11954:	mov	r6, r5
   11958:	b	112f0 <__assert_fail@plt+0xec>
   1195c:	ldr	r0, [pc, #2208]	; 12204 <__assert_fail@plt+0x1000>
   11960:	bl	13a6c <__assert_fail@plt+0x2868>
   11964:	and	sl, sl, r0
   11968:	uxtb	sl, sl
   1196c:	b	112f0 <__assert_fail@plt+0xec>
   11970:	ldr	r0, [pc, #2192]	; 12208 <__assert_fail@plt+0x1004>
   11974:	bl	13a6c <__assert_fail@plt+0x2868>
   11978:	and	sl, sl, r0
   1197c:	uxtb	sl, sl
   11980:	b	112f0 <__assert_fail@plt+0xec>
   11984:	ldr	r0, [pc, #2176]	; 1220c <__assert_fail@plt+0x1008>
   11988:	bl	13a6c <__assert_fail@plt+0x2868>
   1198c:	and	sl, sl, r0
   11990:	uxtb	sl, sl
   11994:	b	112f0 <__assert_fail@plt+0xec>
   11998:	ldr	r0, [pc, #2312]	; 122a8 <__assert_fail@plt+0x10a4>
   1199c:	ldr	r3, [pc, #2108]	; 121e0 <__assert_fail@plt+0xfdc>
   119a0:	mov	r2, #0
   119a4:	mov	ip, #1
   119a8:	str	r3, [sp]
   119ac:	mov	r1, r2
   119b0:	ldr	r3, [pc, #2136]	; 12210 <__assert_fail@plt+0x100c>
   119b4:	ldr	r0, [r0]
   119b8:	strb	ip, [r4, #109]	; 0x6d
   119bc:	bl	1b5b8 <__assert_fail@plt+0xa3b4>
   119c0:	cmp	r0, #0
   119c4:	beq	11864 <__assert_fail@plt+0x660>
   119c8:	ldr	r3, [pc, #2264]	; 122a8 <__assert_fail@plt+0x10a4>
   119cc:	ldr	r1, [sp, #40]	; 0x28
   119d0:	ldr	r2, [r3]
   119d4:	ldr	r3, [pc, #2020]	; 121c0 <__assert_fail@plt+0xfbc>
   119d8:	str	r2, [sp]
   119dc:	mov	r2, #78	; 0x4e
   119e0:	bl	1b504 <__assert_fail@plt+0xa300>
   119e4:	ldr	r0, [pc, #2088]	; 12214 <__assert_fail@plt+0x1010>
   119e8:	bl	13a6c <__assert_fail@plt+0x2868>
   119ec:	and	sl, sl, r0
   119f0:	uxtb	sl, sl
   119f4:	b	112f0 <__assert_fail@plt+0xec>
   119f8:	ldr	r0, [pc, #2072]	; 12218 <__assert_fail@plt+0x1014>
   119fc:	bl	13a6c <__assert_fail@plt+0x2868>
   11a00:	and	sl, sl, r0
   11a04:	uxtb	sl, sl
   11a08:	b	112f0 <__assert_fail@plt+0xec>
   11a0c:	ldr	r0, [pc, #2056]	; 1221c <__assert_fail@plt+0x1018>
   11a10:	bl	13a6c <__assert_fail@plt+0x2868>
   11a14:	and	sl, sl, r0
   11a18:	uxtb	sl, sl
   11a1c:	b	112f0 <__assert_fail@plt+0xec>
   11a20:	ldr	r3, [pc, #2176]	; 122a8 <__assert_fail@plt+0x10a4>
   11a24:	ldr	r3, [r3]
   11a28:	ldrb	r3, [r3]
   11a2c:	cmp	r3, #110	; 0x6e
   11a30:	beq	11d98 <__assert_fail@plt+0xb94>
   11a34:	bls	11b50 <__assert_fail@plt+0x94c>
   11a38:	cmp	r3, #111	; 0x6f
   11a3c:	beq	11d90 <__assert_fail@plt+0xb8c>
   11a40:	cmp	r3, #120	; 0x78
   11a44:	bne	11d64 <__assert_fail@plt+0xb60>
   11a48:	mov	r2, #16
   11a4c:	mov	r3, #6
   11a50:	ldr	r1, [pc, #1900]	; 121c4 <__assert_fail@plt+0xfc0>
   11a54:	str	r2, [r4, #4]
   11a58:	str	r1, [r4, #120]	; 0x78
   11a5c:	str	r3, [r4]
   11a60:	b	11864 <__assert_fail@plt+0x660>
   11a64:	mov	r0, #0
   11a68:	bl	15128 <__assert_fail@plt+0x3f24>
   11a6c:	ldr	r1, [pc, #2068]	; 12288 <__assert_fail@plt+0x1084>
   11a70:	ldr	r2, [pc, #1960]	; 12220 <__assert_fail@plt+0x101c>
   11a74:	ldr	r3, [pc, #1960]	; 12224 <__assert_fail@plt+0x1020>
   11a78:	mov	r4, #0
   11a7c:	ldr	r0, [r1]
   11a80:	ldr	r3, [r3]
   11a84:	ldr	r1, [pc, #1948]	; 12228 <__assert_fail@plt+0x1024>
   11a88:	stm	sp, {r2, r4}
   11a8c:	ldr	r2, [pc, #1944]	; 1222c <__assert_fail@plt+0x1028>
   11a90:	bl	1aa7c <__assert_fail@plt+0x9878>
   11a94:	mov	r0, r4
   11a98:	bl	110b4 <exit@plt>
   11a9c:	ldrb	r2, [r4, #156]	; 0x9c
   11aa0:	cmp	r2, #0
   11aa4:	moveq	r8, #3
   11aa8:	beq	11bf4 <__assert_fail@plt+0x9f0>
   11aac:	add	r3, r3, #1
   11ab0:	ldr	r1, [sp, #24]
   11ab4:	ldr	r0, [r9, r3, lsl #2]
   11ab8:	bl	12ba4 <__assert_fail@plt+0x19a0>
   11abc:	cmp	r0, #0
   11ac0:	bne	12808 <__assert_fail@plt+0x1604>
   11ac4:	mov	r8, #3
   11ac8:	ldrb	r3, [r4, #156]	; 0x9c
   11acc:	cmp	r3, #0
   11ad0:	beq	11bf4 <__assert_fail@plt+0x9f0>
   11ad4:	mov	r2, #5
   11ad8:	ldr	r1, [pc, #1872]	; 12230 <__assert_fail@plt+0x102c>
   11adc:	mov	r0, #0
   11ae0:	bl	10fc4 <dcgettext@plt>
   11ae4:	ldr	r3, [r5]
   11ae8:	add	r3, r3, #1
   11aec:	mov	r4, r0
   11af0:	ldr	r0, [r9, r3, lsl #2]
   11af4:	bl	1a0a8 <__assert_fail@plt+0x8ea4>
   11af8:	mov	r1, #0
   11afc:	mov	r2, r4
   11b00:	mov	r3, r0
   11b04:	mov	r0, r1
   11b08:	bl	1103c <error@plt>
   11b0c:	mov	r2, #5
   11b10:	ldr	r1, [pc, #1820]	; 12234 <__assert_fail@plt+0x1030>
   11b14:	mov	r0, #0
   11b18:	bl	10fc4 <dcgettext@plt>
   11b1c:	mov	r1, #0
   11b20:	ldr	r2, [pc, #1808]	; 12238 <__assert_fail@plt+0x1034>
   11b24:	mov	r3, r0
   11b28:	mov	r0, r1
   11b2c:	bl	1103c <error@plt>
   11b30:	mov	r0, #1
   11b34:	bl	15128 <__assert_fail@plt+0x3f24>
   11b38:	mov	r3, #1
   11b3c:	str	r3, [sp, #16]
   11b40:	mov	r3, #32
   11b44:	mov	r6, r5
   11b48:	str	r3, [sp, #28]
   11b4c:	b	112f0 <__assert_fail@plt+0xec>
   11b50:	cmp	r3, #100	; 0x64
   11b54:	bne	11d64 <__assert_fail@plt+0xb60>
   11b58:	mov	r2, #10
   11b5c:	mov	r3, #7
   11b60:	b	11a50 <__assert_fail@plt+0x84c>
   11b64:	cmp	sl, #0
   11b68:	beq	11d58 <__assert_fail@plt+0xb54>
   11b6c:	ldrb	r3, [r4, #110]	; 0x6e
   11b70:	cmp	r3, #0
   11b74:	beq	11ba4 <__assert_fail@plt+0x9a0>
   11b78:	ldr	r3, [r4, #12]
   11b7c:	cmp	r3, #0
   11b80:	movne	r2, #5
   11b84:	ldrne	r1, [pc, #1712]	; 1223c <__assert_fail@plt+0x1038>
   11b88:	beq	11ba4 <__assert_fail@plt+0x9a0>
   11b8c:	mov	r0, #0
   11b90:	bl	10fc4 <dcgettext@plt>
   11b94:	mov	r1, #0
   11b98:	mov	r2, r0
   11b9c:	mov	r0, #1
   11ba0:	bl	1103c <error@plt>
   11ba4:	ldr	r5, [pc, #1684]	; 12240 <__assert_fail@plt+0x103c>
   11ba8:	cmp	r6, #0
   11bac:	ldr	r3, [r5]
   11bb0:	sub	r8, fp, r3
   11bb4:	beq	11db0 <__assert_fail@plt+0xbac>
   11bb8:	ldrb	r2, [r4, #156]	; 0x9c
   11bbc:	cmp	r2, #0
   11bc0:	beq	11bf4 <__assert_fail@plt+0x9f0>
   11bc4:	cmp	r8, #2
   11bc8:	beq	124b0 <__assert_fail@plt+0x12ac>
   11bcc:	cmp	r8, #3
   11bd0:	beq	11a9c <__assert_fail@plt+0x898>
   11bd4:	cmp	r8, #1
   11bd8:	beq	125ec <__assert_fail@plt+0x13e8>
   11bdc:	ldrb	r3, [r4, #156]	; 0x9c
   11be0:	cmp	r8, #1
   11be4:	movle	r3, #0
   11be8:	andgt	r3, r3, #1
   11bec:	cmp	r3, #0
   11bf0:	bne	11ad4 <__assert_fail@plt+0x8d0>
   11bf4:	mov	r2, #0
   11bf8:	mov	r3, #0
   11bfc:	mov	r6, r2
   11c00:	mov	r7, r3
   11c04:	ldrb	r3, [r4, #157]	; 0x9d
   11c08:	cmp	r3, #0
   11c0c:	beq	11c3c <__assert_fail@plt+0xa38>
   11c10:	ldr	r3, [pc, #1580]	; 12244 <__assert_fail@plt+0x1040>
   11c14:	ldr	r2, [r4, #120]	; 0x78
   11c18:	cmp	r2, r3
   11c1c:	moveq	r2, #8
   11c20:	ldreq	r3, [pc, #1568]	; 12248 <__assert_fail@plt+0x1044>
   11c24:	ldrne	r3, [pc, #1568]	; 1224c <__assert_fail@plt+0x1048>
   11c28:	streq	r3, [r4, #120]	; 0x78
   11c2c:	moveq	r3, #7
   11c30:	streq	r2, [r4, #4]
   11c34:	streq	r3, [r4]
   11c38:	strne	r3, [r4, #120]	; 0x78
   11c3c:	ldrb	r3, [r4, #109]	; 0x6d
   11c40:	cmp	r3, #0
   11c44:	beq	11c68 <__assert_fail@plt+0xa64>
   11c48:	ldrd	r0, [r4, #136]	; 0x88
   11c4c:	ldrd	r2, [r4, #144]	; 0x90
   11c50:	adds	r2, r2, r0
   11c54:	adc	r3, r3, r1
   11c58:	cmp	r1, r3
   11c5c:	cmpeq	r0, r2
   11c60:	strd	r2, [r4, #160]	; 0xa0
   11c64:	bhi	12888 <__assert_fail@plt+0x1684>
   11c68:	ldr	r3, [r4, #12]
   11c6c:	cmp	r3, #0
   11c70:	beq	12468 <__assert_fail@plt+0x1264>
   11c74:	cmp	r8, #0
   11c78:	ldrgt	r3, [r5]
   11c7c:	ldrle	r9, [pc, #1484]	; 12250 <__assert_fail@plt+0x104c>
   11c80:	addgt	r9, r9, r3, lsl #2
   11c84:	str	r9, [r4, #96]	; 0x60
   11c88:	bl	143b8 <__assert_fail@plt+0x31b4>
   11c8c:	ldr	r3, [r4, #104]	; 0x68
   11c90:	cmp	r3, #0
   11c94:	mov	r8, r0
   11c98:	mov	r5, r0
   11c9c:	beq	11e18 <__assert_fail@plt+0xc14>
   11ca0:	ldrd	r0, [r4, #136]	; 0x88
   11ca4:	bl	145e4 <__assert_fail@plt+0x33e0>
   11ca8:	ldr	r3, [r4, #104]	; 0x68
   11cac:	cmp	r3, #0
   11cb0:	and	r0, r0, r8
   11cb4:	uxtb	r5, r0
   11cb8:	str	r5, [sp, #32]
   11cbc:	beq	11e18 <__assert_fail@plt+0xc14>
   11cc0:	ldrb	r3, [r4, #157]	; 0x9d
   11cc4:	cmp	r3, #0
   11cc8:	moveq	r2, #0
   11ccc:	moveq	r3, #0
   11cd0:	beq	11ce8 <__assert_fail@plt+0xae4>
   11cd4:	ldrd	r2, [r4, #136]	; 0x88
   11cd8:	subs	r0, r6, r2
   11cdc:	sbc	r1, r7, r3
   11ce0:	mov	r2, r0
   11ce4:	mov	r3, r1
   11ce8:	ldr	r8, [r4, #12]
   11cec:	ldr	fp, [r4, #20]
   11cf0:	mov	r5, #0
   11cf4:	mov	r6, #1
   11cf8:	mov	r7, sl
   11cfc:	strd	r2, [r4, #128]	; 0x80
   11d00:	cmp	r5, r8
   11d04:	beq	11e30 <__assert_fail@plt+0xc2c>
   11d08:	add	r3, fp, r5, lsl #5
   11d0c:	ldr	r2, [pc, #1352]	; 1225c <__assert_fail@plt+0x1058>
   11d10:	ldr	r3, [r3, #4]
   11d14:	mov	r0, r6
   11d18:	add	r3, r2, r3, lsl #2
   11d1c:	ldr	r9, [r3, #448]	; 0x1c0
   11d20:	mov	sl, r9
   11d24:	b	11d2c <__assert_fail@plt+0xb28>
   11d28:	mov	sl, r1
   11d2c:	mov	r1, sl
   11d30:	bl	1c884 <__assert_fail@plt+0xb680>
   11d34:	mov	r0, sl
   11d38:	cmp	r1, #0
   11d3c:	bne	11d28 <__assert_fail@plt+0xb24>
   11d40:	mov	r1, sl
   11d44:	mov	r0, r9
   11d48:	bl	1c698 <__assert_fail@plt+0xb494>
   11d4c:	add	r5, r5, #1
   11d50:	mul	r6, r6, r0
   11d54:	b	11d00 <__assert_fail@plt+0xafc>
   11d58:	mov	r0, #1
   11d5c:	add	sp, sp, #60	; 0x3c
   11d60:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11d64:	mov	r2, #5
   11d68:	ldr	r1, [pc, #1252]	; 12254 <__assert_fail@plt+0x1050>
   11d6c:	mov	r0, #0
   11d70:	bl	10fc4 <dcgettext@plt>
   11d74:	ldr	r3, [pc, #1324]	; 122a8 <__assert_fail@plt+0x10a4>
   11d78:	mov	r1, #0
   11d7c:	ldr	r3, [r3]
   11d80:	ldrb	r3, [r3]
   11d84:	mov	r2, r0
   11d88:	mov	r0, #1
   11d8c:	bl	1103c <error@plt>
   11d90:	mov	r2, #8
   11d94:	b	11b5c <__assert_fail@plt+0x958>
   11d98:	ldr	r2, [pc, #1188]	; 12244 <__assert_fail@plt+0x1040>
   11d9c:	mov	r3, #0
   11da0:	str	r2, [r4, #120]	; 0x78
   11da4:	str	r3, [r4]
   11da8:	mov	r6, #1
   11dac:	b	112f0 <__assert_fail@plt+0xec>
   11db0:	cmp	r8, #2
   11db4:	beq	124b0 <__assert_fail@plt+0x12ac>
   11db8:	cmp	r8, #3
   11dbc:	beq	11a9c <__assert_fail@plt+0x898>
   11dc0:	cmp	r8, #1
   11dc4:	bne	11bdc <__assert_fail@plt+0x9d8>
   11dc8:	ldrb	r2, [r4, #156]	; 0x9c
   11dcc:	cmp	r2, #0
   11dd0:	bne	125ec <__assert_fail@plt+0x13e8>
   11dd4:	ldr	r2, [r9, r3, lsl #2]
   11dd8:	ldrb	r2, [r2]
   11ddc:	cmp	r2, #43	; 0x2b
   11de0:	beq	125ec <__assert_fail@plt+0x13e8>
   11de4:	mov	r2, #0
   11de8:	mov	r3, #0
   11dec:	mov	r6, r2
   11df0:	mov	r7, r3
   11df4:	mov	r8, #1
   11df8:	b	11c04 <__assert_fail@plt+0xa00>
   11dfc:	mov	sl, r6
   11e00:	and	sl, sl, r5
   11e04:	ldr	r0, [sp, #24]
   11e08:	bl	15e58 <__assert_fail@plt+0x4c54>
   11e0c:	ldr	r5, [sp, #32]
   11e10:	and	r5, r5, sl
   11e14:	and	r5, r5, #1
   11e18:	ldrb	r3, [r4, #108]	; 0x6c
   11e1c:	cmp	r3, #0
   11e20:	bne	12474 <__assert_fail@plt+0x1270>
   11e24:	eor	r0, r5, #1
   11e28:	uxtb	r0, r0
   11e2c:	b	11d5c <__assert_fail@plt+0xb58>
   11e30:	ldr	r3, [sp, #16]
   11e34:	mov	sl, r7
   11e38:	cmp	r3, #0
   11e3c:	beq	12148 <__assert_fail@plt+0xf44>
   11e40:	ldr	r5, [sp, #28]
   11e44:	cmp	r5, #0
   11e48:	beq	11e64 <__assert_fail@plt+0xc60>
   11e4c:	mov	r1, r6
   11e50:	mov	r0, r5
   11e54:	bl	1c884 <__assert_fail@plt+0xb680>
   11e58:	cmp	r1, #0
   11e5c:	streq	r5, [r4, #112]	; 0x70
   11e60:	beq	11e90 <__assert_fail@plt+0xc8c>
   11e64:	mov	r2, #5
   11e68:	ldr	r1, [pc, #1000]	; 12258 <__assert_fail@plt+0x1054>
   11e6c:	mov	r0, #0
   11e70:	bl	10fc4 <dcgettext@plt>
   11e74:	mov	r1, #0
   11e78:	str	r6, [sp]
   11e7c:	ldr	r3, [sp, #28]
   11e80:	mov	r2, r0
   11e84:	mov	r0, r1
   11e88:	bl	1103c <error@plt>
   11e8c:	str	r6, [r4, #112]	; 0x70
   11e90:	ldr	r5, [r4, #20]
   11e94:	ldr	r3, [r4, #112]	; 0x70
   11e98:	add	r5, r5, #4
   11e9c:	mov	r8, #0
   11ea0:	mov	fp, r5
   11ea4:	str	r5, [sp, #16]
   11ea8:	mov	r6, r8
   11eac:	ldr	r9, [r4, #12]
   11eb0:	mov	r7, r3
   11eb4:	mov	r5, r3
   11eb8:	b	11eec <__assert_fail@plt+0xce8>
   11ebc:	ldr	r2, [fp, #-32]	; 0xffffffe0
   11ec0:	ldr	r3, [pc, #916]	; 1225c <__assert_fail@plt+0x1058>
   11ec4:	mov	r0, r5
   11ec8:	add	r2, r3, r2, lsl #2
   11ecc:	add	r8, r8, #1
   11ed0:	ldr	r1, [r2, #448]	; 0x1c0
   11ed4:	bl	1c698 <__assert_fail@plt+0xb494>
   11ed8:	ldr	r2, [fp, #-12]
   11edc:	add	r2, r2, #1
   11ee0:	mul	r0, r2, r0
   11ee4:	cmp	r6, r0
   11ee8:	movcc	r6, r0
   11eec:	cmp	r8, r9
   11ef0:	add	fp, fp, #32
   11ef4:	bne	11ebc <__assert_fail@plt+0xcb8>
   11ef8:	ldr	r5, [sp, #16]
   11efc:	mov	r3, r6
   11f00:	mov	r9, #0
   11f04:	mov	r6, r8
   11f08:	str	sl, [sp, #16]
   11f0c:	mov	r8, r3
   11f10:	mov	sl, r9
   11f14:	ldr	fp, [pc, #832]	; 1225c <__assert_fail@plt+0x1058>
   11f18:	mov	r9, r5
   11f1c:	mov	r5, r7
   11f20:	b	11f4c <__assert_fail@plt+0xd48>
   11f24:	ldr	r3, [r9, #-32]	; 0xffffffe0
   11f28:	mov	r0, r5
   11f2c:	add	sl, sl, #1
   11f30:	add	r3, fp, r3, lsl #2
   11f34:	ldr	r1, [r3, #448]	; 0x1c0
   11f38:	bl	1c698 <__assert_fail@plt+0xb494>
   11f3c:	ldr	r3, [r9, #-12]
   11f40:	mul	r3, r3, r0
   11f44:	sub	r3, r8, r3
   11f48:	str	r3, [r9, #-8]
   11f4c:	cmp	r6, sl
   11f50:	add	r9, r9, #32
   11f54:	bne	11f24 <__assert_fail@plt+0xd20>
   11f58:	ldrb	r6, [r4, #110]	; 0x6e
   11f5c:	ldr	sl, [sp, #16]
   11f60:	cmp	r6, #0
   11f64:	beq	1216c <__assert_fail@plt+0xf68>
   11f68:	ldr	r3, [r4, #152]	; 0x98
   11f6c:	add	r2, sp, #56	; 0x38
   11f70:	cmp	r3, #100	; 0x64
   11f74:	movcc	r3, #100	; 0x64
   11f78:	mov	r0, r3
   11f7c:	str	r3, [r2, #-8]!
   11f80:	str	r2, [sp, #16]
   11f84:	bl	1ac64 <__assert_fail@plt+0x9a60>
   11f88:	ldrd	r8, [r4, #136]	; 0x88
   11f8c:	mov	sl, r6
   11f90:	str	r0, [sp, #24]
   11f94:	ldrb	fp, [r4, #109]	; 0x6d
   11f98:	cmp	fp, #0
   11f9c:	beq	11fd0 <__assert_fail@plt+0xdcc>
   11fa0:	ldrd	r2, [r4, #160]	; 0xa0
   11fa4:	ldr	r0, [r4, #152]	; 0x98
   11fa8:	mov	r1, #0
   11fac:	cmp	r1, r3
   11fb0:	cmpeq	r0, r2
   11fb4:	bhi	12858 <__assert_fail@plt+0x1654>
   11fb8:	subs	r2, r2, r0
   11fbc:	sbc	r3, r3, r1
   11fc0:	cmp	r3, r9
   11fc4:	cmpeq	r2, r8
   11fc8:	bls	12858 <__assert_fail@plt+0x1654>
   11fcc:	mov	fp, #0
   11fd0:	ldr	r3, [r4, #152]	; 0x98
   11fd4:	cmp	fp, r3
   11fd8:	bcs	120a8 <__assert_fail@plt+0xea4>
   11fdc:	ldr	r3, [r4, #104]	; 0x68
   11fe0:	cmp	r3, #0
   11fe4:	beq	12120 <__assert_fail@plt+0xf1c>
   11fe8:	mov	r5, sl
   11fec:	b	12018 <__assert_fail@plt+0xe14>
   11ff0:	bl	110d8 <__errno_location@plt>
   11ff4:	ldr	r0, [r0]
   11ff8:	bl	144e4 <__assert_fail@plt+0x32e0>
   11ffc:	mov	r7, r0
   12000:	bl	143b8 <__assert_fail@plt+0x31b4>
   12004:	ldr	r3, [r4, #104]	; 0x68
   12008:	cmp	r3, #0
   1200c:	and	r0, r0, r7
   12010:	and	r5, r5, r0
   12014:	beq	11dfc <__assert_fail@plt+0xbf8>
   12018:	mov	r0, r3
   1201c:	bl	11114 <fgetc@plt>
   12020:	cmn	r0, #1
   12024:	beq	11ff0 <__assert_fail@plt+0xdec>
   12028:	adds	r8, r8, #1
   1202c:	adc	r9, r9, #0
   12030:	cmp	r0, #0
   12034:	mov	r7, r0
   12038:	and	r6, r6, r5
   1203c:	blt	128b0 <__assert_fail@plt+0x16ac>
   12040:	bl	110a8 <__ctype_b_loc@plt>
   12044:	lsl	r3, r7, #1
   12048:	ldr	r2, [r0]
   1204c:	ldrh	r3, [r2, r3]
   12050:	tst	r3, #16384	; 0x4000
   12054:	beq	11f94 <__assert_fail@plt+0xd90>
   12058:	ldr	r3, [sp, #24]
   1205c:	strb	r7, [r3, fp]
   12060:	add	fp, fp, #1
   12064:	b	11fd0 <__assert_fail@plt+0xdcc>
   12068:	adds	r8, r8, #1
   1206c:	adc	r9, r9, #0
   12070:	cmp	r0, #0
   12074:	mov	r7, r0
   12078:	and	r6, r6, r5
   1207c:	blt	128b0 <__assert_fail@plt+0x16ac>
   12080:	beq	12624 <__assert_fail@plt+0x1420>
   12084:	bl	110a8 <__ctype_b_loc@plt>
   12088:	lsl	r2, r7, #1
   1208c:	ldr	r1, [r0]
   12090:	ldrh	r2, [r1, r2]
   12094:	tst	r2, #16384	; 0x4000
   12098:	beq	11f94 <__assert_fail@plt+0xd90>
   1209c:	ldr	r3, [sp, #24]
   120a0:	strb	r7, [r3, fp]
   120a4:	add	fp, fp, #1
   120a8:	ldrb	r3, [r4, #109]	; 0x6d
   120ac:	cmp	r3, #0
   120b0:	beq	120c4 <__assert_fail@plt+0xec0>
   120b4:	ldrd	r2, [r4, #160]	; 0xa0
   120b8:	cmp	r9, r3
   120bc:	cmpeq	r8, r2
   120c0:	bcs	12624 <__assert_fail@plt+0x1420>
   120c4:	ldr	r3, [sp, #48]	; 0x30
   120c8:	cmp	r3, fp
   120cc:	beq	12134 <__assert_fail@plt+0xf30>
   120d0:	ldr	r2, [r4, #104]	; 0x68
   120d4:	cmp	r2, #0
   120d8:	beq	12120 <__assert_fail@plt+0xf1c>
   120dc:	mov	r5, sl
   120e0:	b	1210c <__assert_fail@plt+0xf08>
   120e4:	bl	110d8 <__errno_location@plt>
   120e8:	ldr	r0, [r0]
   120ec:	bl	144e4 <__assert_fail@plt+0x32e0>
   120f0:	mov	r7, r0
   120f4:	bl	143b8 <__assert_fail@plt+0x31b4>
   120f8:	ldr	r2, [r4, #104]	; 0x68
   120fc:	cmp	r2, #0
   12100:	and	r0, r0, r7
   12104:	and	r5, r5, r0
   12108:	beq	11dfc <__assert_fail@plt+0xbf8>
   1210c:	mov	r0, r2
   12110:	bl	11114 <fgetc@plt>
   12114:	cmn	r0, #1
   12118:	beq	120e4 <__assert_fail@plt+0xee0>
   1211c:	b	12068 <__assert_fail@plt+0xe64>
   12120:	mov	r3, r6
   12124:	mov	r6, sl
   12128:	mov	r5, r6
   1212c:	mov	sl, r3
   12130:	b	11e00 <__assert_fail@plt+0xbfc>
   12134:	ldr	r0, [sp, #24]
   12138:	ldr	r1, [sp, #16]
   1213c:	bl	1ad98 <__assert_fail@plt+0x9b94>
   12140:	str	r0, [sp, #24]
   12144:	b	120d0 <__assert_fail@plt+0xecc>
   12148:	cmp	r6, #15
   1214c:	strgt	r6, [r4, #112]	; 0x70
   12150:	bgt	11e90 <__assert_fail@plt+0xc8c>
   12154:	mov	r1, r6
   12158:	mov	r0, #16
   1215c:	bl	1c8a4 <__assert_fail@plt+0xb6a0>
   12160:	mul	r0, r6, r0
   12164:	str	r0, [r4, #112]	; 0x70
   12168:	b	11e90 <__assert_fail@plt+0xc8c>
   1216c:	mov	r1, r7
   12170:	mov	r0, #2
   12174:	bl	1ad48 <__assert_fail@plt+0x9b44>
   12178:	ldr	r3, [r4, #112]	; 0x70
   1217c:	ldrb	r5, [r4, #109]	; 0x6d
   12180:	cmp	r5, #0
   12184:	str	r0, [sp, #48]	; 0x30
   12188:	add	r0, r0, r3
   1218c:	ldrd	r2, [r4, #136]	; 0x88
   12190:	str	r0, [sp, #52]	; 0x34
   12194:	strd	r2, [sp, #16]
   12198:	bne	124e4 <__assert_fail@plt+0x12e0>
   1219c:	mov	r6, r5
   121a0:	mov	r8, r2
   121a4:	mov	r9, r3
   121a8:	b	122e4 <__assert_fail@plt+0x10e0>
   121ac:	andeq	sp, r1, r4, lsr #27
   121b0:	ldrdeq	lr, [r1], -r0
   121b4:	andeq	lr, r1, r8, lsr #32
   121b8:	muleq	r2, r0, r1
   121bc:	andeq	r5, r1, r8, lsr #22
   121c0:	andeq	ip, r1, r0, lsl pc
   121c4:	andeq	r2, r1, r4, ror #20
   121c8:	ldrdeq	ip, [r1], -r0
   121cc:	andeq	pc, r2, r0, lsr #2
   121d0:	andeq	lr, r1, r0, asr #2
   121d4:	andeq	sp, r1, ip
   121d8:	andeq	pc, r2, r8, lsl r1	; <UNPREDICTABLE>
   121dc:	andeq	lr, r1, r8, ror r1
   121e0:	strdeq	ip, [r1], -r4
   121e4:	andeq	pc, r2, r8, lsl r2	; <UNPREDICTABLE>
   121e8:	andeq	lr, r1, r8, ror #2
   121ec:	andeq	lr, r1, ip, ror r1
   121f0:	andeq	lr, r1, r0, ror #2
   121f4:	andeq	lr, r1, r8, asr r1
   121f8:	ldrdeq	lr, [r1], -r4
   121fc:	andeq	lr, r1, r0, asr r1
   12200:	andeq	lr, r1, ip, asr #2
   12204:	andeq	lr, r1, r0, ror r1
   12208:	andeq	lr, r1, ip, ror #2
   1220c:	andeq	lr, r1, r4, ror #2
   12210:	andeq	pc, r2, r0, lsr #4
   12214:	andeq	lr, r1, ip, asr r1
   12218:	andeq	lr, r1, r4, asr r1
   1221c:	andeq	lr, r1, r4, ror r1
   12220:	andeq	lr, r1, r0, lsl #3
   12224:	andeq	pc, r2, ip, lsl r1	; <UNPREDICTABLE>
   12228:	andeq	sp, r1, r0, ror r2
   1222c:	andeq	lr, r1, r4, lsr #32
   12230:	andeq	lr, r1, r0, asr #3
   12234:	ldrdeq	lr, [r1], -r4
   12238:	andeq	lr, r1, r8, ror #7
   1223c:	muleq	r1, r0, r1
   12240:	andeq	pc, r2, r0, ror r1	; <UNPREDICTABLE>
   12244:	andeq	r2, r1, r0, ror #20
   12248:	andeq	r4, r1, r4, lsl #27
   1224c:	muleq	r1, r0, sl
   12250:	andeq	ip, r1, r8, lsl #30
   12254:	andeq	lr, r1, r8, ror #1
   12258:	andeq	lr, r1, r0, lsr r2
   1225c:	andeq	ip, r1, r0, ror #25
   12260:	andeq	lr, r1, ip, lsr #4
   12264:	andeq	pc, r2, r0, lsl #3
   12268:	andeq	sp, r1, r0, lsl #4
   1226c:	strdeq	sp, [r1], -r0
   12270:	andeq	sp, r1, r8, ror #3
   12274:	strdeq	sp, [r1], -r8
   12278:	andeq	sp, r1, ip, ror #3
   1227c:	strdeq	sp, [r1], -r4
   12280:	andeq	sp, r1, r4, ror #3
   12284:	andeq	sp, r1, r0, ror #3
   12288:	andeq	pc, r2, r4, lsl #3
   1228c:	andeq	r0, r0, ip, ror r5
   12290:	andeq	lr, r1, r4, lsl #4
   12294:	andeq	sp, r1, r8, lsl r0
   12298:	andeq	r0, r0, sl, lsl #11
   1229c:	andeq	lr, r1, r0, ror #4
   122a0:	andeq	sp, r1, ip, rrx
   122a4:	andeq	lr, r1, r0, lsr r1
   122a8:	andeq	pc, r2, r8, lsl #3
   122ac:	andeq	ip, r1, r0, lsl pc
   122b0:	bne	128b8 <__assert_fail@plt+0x16b4>
   122b4:	eor	r5, r5, #1
   122b8:	add	r3, sp, #56	; 0x38
   122bc:	lsl	r6, r5, #2
   122c0:	add	r3, r3, r6
   122c4:	str	fp, [sp]
   122c8:	mov	r0, r8
   122cc:	ldr	r3, [r3, #-8]
   122d0:	mov	r1, r9
   122d4:	bl	147e4 <__assert_fail@plt+0x35e0>
   122d8:	ldr	r3, [sp, #40]	; 0x28
   122dc:	adds	r8, r8, r3
   122e0:	adc	r9, r9, #0
   122e4:	add	r3, sp, #56	; 0x38
   122e8:	add	r3, r3, r6
   122ec:	ldr	r2, [sp, #24]
   122f0:	ldr	fp, [r3, #-8]
   122f4:	ldr	r0, [r4, #112]	; 0x70
   122f8:	mov	r1, fp
   122fc:	bl	14f30 <__assert_fail@plt+0x3d2c>
   12300:	ldr	r2, [sp, #40]	; 0x28
   12304:	ldr	r3, [r4, #112]	; 0x70
   12308:	cmp	r2, r3
   1230c:	and	sl, sl, r0
   12310:	uxtb	sl, sl
   12314:	bcs	122b0 <__assert_fail@plt+0x10ac>
   12318:	strd	r8, [sp, #16]
   1231c:	mov	r9, r2
   12320:	cmp	r9, #0
   12324:	beq	12418 <__assert_fail@plt+0x1214>
   12328:	ldr	r3, [r4, #12]
   1232c:	ldr	r2, [r4, #20]
   12330:	str	sl, [sp, #28]
   12334:	mov	r7, #0
   12338:	mov	fp, #1
   1233c:	mov	r8, r3
   12340:	mov	sl, r2
   12344:	str	r5, [sp, #24]
   12348:	str	r6, [sp, #36]	; 0x24
   1234c:	cmp	r7, r8
   12350:	beq	123a4 <__assert_fail@plt+0x11a0>
   12354:	add	r3, sl, r7, lsl #5
   12358:	ldr	r2, [pc, #-260]	; 1225c <__assert_fail@plt+0x1058>
   1235c:	ldr	r3, [r3, #4]
   12360:	mov	r0, fp
   12364:	add	r3, r2, r3, lsl #2
   12368:	ldr	r5, [r3, #448]	; 0x1c0
   1236c:	mov	r6, r5
   12370:	b	12378 <__assert_fail@plt+0x1174>
   12374:	mov	r6, r1
   12378:	mov	r1, r6
   1237c:	bl	1c884 <__assert_fail@plt+0xb680>
   12380:	mov	r0, r6
   12384:	cmp	r1, #0
   12388:	bne	12374 <__assert_fail@plt+0x1170>
   1238c:	mov	r1, r6
   12390:	mov	r0, r5
   12394:	bl	1c698 <__assert_fail@plt+0xb494>
   12398:	add	r7, r7, #1
   1239c:	mul	fp, fp, r0
   123a0:	b	1234c <__assert_fail@plt+0x1148>
   123a4:	ldr	r6, [sp, #36]	; 0x24
   123a8:	sub	r0, r9, #1
   123ac:	add	r3, sp, #56	; 0x38
   123b0:	mov	r1, fp
   123b4:	add	r0, r0, fp
   123b8:	add	r6, r3, r6
   123bc:	bl	1c698 <__assert_fail@plt+0xb494>
   123c0:	ldr	r6, [r6, #-8]
   123c4:	ldr	r5, [sp, #24]
   123c8:	mov	r1, #0
   123cc:	ldr	sl, [sp, #28]
   123d0:	mul	r2, fp, r0
   123d4:	add	r0, r6, r9
   123d8:	sub	r2, r2, r9
   123dc:	bl	11108 <memset@plt>
   123e0:	eor	r3, r5, #1
   123e4:	str	r6, [sp]
   123e8:	add	r2, sp, #56	; 0x38
   123ec:	ldrd	r6, [sp, #16]
   123f0:	add	r3, r2, r3, lsl #2
   123f4:	mov	r2, r9
   123f8:	ldr	r3, [r3, #-8]
   123fc:	mov	r0, r6
   12400:	mov	r1, r7
   12404:	bl	147e4 <__assert_fail@plt+0x35e0>
   12408:	ldr	r3, [sp, #40]	; 0x28
   1240c:	adds	r0, r6, r3
   12410:	adc	r1, r7, #0
   12414:	strd	r0, [sp, #16]
   12418:	ldrd	r6, [sp, #16]
   1241c:	ldr	r3, [r4, #120]	; 0x78
   12420:	mov	r2, #10
   12424:	mov	r0, r6
   12428:	mov	r1, r7
   1242c:	blx	r3
   12430:	ldrb	r3, [r4, #109]	; 0x6d
   12434:	cmp	r3, #0
   12438:	beq	1245c <__assert_fail@plt+0x1258>
   1243c:	ldrd	r2, [r4, #160]	; 0xa0
   12440:	cmp	r7, r3
   12444:	cmpeq	r6, r2
   12448:	bcc	1245c <__assert_fail@plt+0x1258>
   1244c:	mov	r0, #0
   12450:	bl	144e4 <__assert_fail@plt+0x32e0>
   12454:	and	sl, sl, r0
   12458:	uxtb	sl, sl
   1245c:	ldr	r0, [sp, #48]	; 0x30
   12460:	bl	15e58 <__assert_fail@plt+0x4c54>
   12464:	b	11e0c <__assert_fail@plt+0xc08>
   12468:	ldr	r0, [pc, #-528]	; 12260 <__assert_fail@plt+0x105c>
   1246c:	bl	13a6c <__assert_fail@plt+0x2868>
   12470:	b	11c74 <__assert_fail@plt+0xa70>
   12474:	ldr	r3, [pc, #-536]	; 12264 <__assert_fail@plt+0x1060>
   12478:	ldr	r0, [r3]
   1247c:	bl	15d58 <__assert_fail@plt+0x4b54>
   12480:	cmn	r0, #1
   12484:	bne	11e24 <__assert_fail@plt+0xc20>
   12488:	bl	110d8 <__errno_location@plt>
   1248c:	mov	r2, #5
   12490:	ldr	r1, [pc, #-560]	; 12268 <__assert_fail@plt+0x1064>
   12494:	ldr	r4, [r0]
   12498:	mov	r0, #0
   1249c:	bl	10fc4 <dcgettext@plt>
   124a0:	mov	r1, r4
   124a4:	mov	r2, r0
   124a8:	mov	r0, #1
   124ac:	bl	1103c <error@plt>
   124b0:	ldrb	r2, [r4, #156]	; 0x9c
   124b4:	add	r3, r3, #1
   124b8:	cmp	r2, #0
   124bc:	bne	12598 <__assert_fail@plt+0x1394>
   124c0:	ldr	r2, [r9, r3, lsl #2]
   124c4:	ldrb	r2, [r2]
   124c8:	cmp	r2, #43	; 0x2b
   124cc:	beq	12598 <__assert_fail@plt+0x1394>
   124d0:	sub	r2, r2, #48	; 0x30
   124d4:	cmp	r2, #9
   124d8:	bls	12598 <__assert_fail@plt+0x1394>
   124dc:	mov	r8, #2
   124e0:	b	11bf4 <__assert_fail@plt+0x9f0>
   124e4:	mov	sl, r5
   124e8:	mov	fp, r6
   124ec:	mov	r5, r6
   124f0:	ldrd	r8, [sp, #16]
   124f4:	b	12578 <__assert_fail@plt+0x1374>
   124f8:	lsl	ip, r5, #2
   124fc:	add	lr, sp, #56	; 0x38
   12500:	subs	r2, r2, r8
   12504:	mov	r7, ip
   12508:	add	ip, lr, ip
   1250c:	ldr	r0, [r4, #112]	; 0x70
   12510:	sbc	r3, r3, r9
   12514:	cmp	fp, r3
   12518:	ldr	r6, [ip, #-8]
   1251c:	cmpeq	r0, r2
   12520:	movhi	r0, r2
   12524:	mov	r1, r6
   12528:	ldr	r2, [sp, #24]
   1252c:	bl	14f30 <__assert_fail@plt+0x3d2c>
   12530:	ldr	r2, [sp, #40]	; 0x28
   12534:	ldr	r3, [r4, #112]	; 0x70
   12538:	cmp	r2, r3
   1253c:	and	sl, sl, r0
   12540:	uxtb	sl, sl
   12544:	bcc	127b0 <__assert_fail@plt+0x15ac>
   12548:	bne	12874 <__assert_fail@plt+0x1670>
   1254c:	eor	r5, r5, #1
   12550:	add	r3, sp, #56	; 0x38
   12554:	add	r3, r3, r5, lsl #2
   12558:	str	r6, [sp]
   1255c:	mov	r0, r8
   12560:	ldr	r3, [r3, #-8]
   12564:	mov	r1, r9
   12568:	bl	147e4 <__assert_fail@plt+0x35e0>
   1256c:	ldr	r3, [sp, #40]	; 0x28
   12570:	adds	r8, r8, r3
   12574:	adc	r9, r9, #0
   12578:	ldrd	r2, [r4, #160]	; 0xa0
   1257c:	cmp	r3, r9
   12580:	cmpeq	r2, r8
   12584:	bhi	124f8 <__assert_fail@plt+0x12f4>
   12588:	mov	r3, #0
   1258c:	strd	r8, [sp, #16]
   12590:	str	r3, [sp, #40]	; 0x28
   12594:	b	12418 <__assert_fail@plt+0x1214>
   12598:	ldr	r0, [r9, r3, lsl #2]
   1259c:	add	r1, sp, #48	; 0x30
   125a0:	bl	12ba4 <__assert_fail@plt+0x19a0>
   125a4:	cmp	r0, #0
   125a8:	beq	127c0 <__assert_fail@plt+0x15bc>
   125ac:	ldrb	r3, [r4, #156]	; 0x9c
   125b0:	cmp	r3, #0
   125b4:	bne	127c8 <__assert_fail@plt+0x15c4>
   125b8:	ldr	r1, [r5]
   125bc:	ldrd	r2, [sp, #48]	; 0x30
   125c0:	add	r0, r1, #1
   125c4:	ldr	r1, [r9, r1, lsl #2]
   125c8:	strd	r2, [r4, #136]	; 0x88
   125cc:	mov	r2, #0
   125d0:	mov	r3, #0
   125d4:	str	r1, [r9, r0, lsl #2]
   125d8:	mov	r6, r2
   125dc:	mov	r7, r3
   125e0:	mov	r8, #1
   125e4:	add	r9, r9, #4
   125e8:	b	11c04 <__assert_fail@plt+0xa00>
   125ec:	ldr	r0, [r9, r3, lsl #2]
   125f0:	ldr	r1, [sp, #24]
   125f4:	bl	12ba4 <__assert_fail@plt+0x19a0>
   125f8:	cmp	r0, #0
   125fc:	beq	11de4 <__assert_fail@plt+0xbe0>
   12600:	ldrd	r2, [sp, #40]	; 0x28
   12604:	add	r9, r9, #4
   12608:	mov	r8, #0
   1260c:	strd	r2, [r4, #136]	; 0x88
   12610:	mov	r2, #0
   12614:	mov	r3, #0
   12618:	mov	r6, r2
   1261c:	mov	r7, r3
   12620:	b	11c04 <__assert_fail@plt+0xa00>
   12624:	ldr	r5, [sp, #24]
   12628:	mov	r1, #0
   1262c:	mvn	r0, fp
   12630:	mov	r3, #0
   12634:	adds	r0, r0, r8
   12638:	mvn	r1, r1
   1263c:	strb	r3, [r5, fp]
   12640:	adc	r1, r1, r9
   12644:	ldr	r3, [r4, #120]	; 0x78
   12648:	mov	r2, #32
   1264c:	blx	r3
   12650:	sub	r5, r5, #1
   12654:	ldrb	r1, [r5, #1]!
   12658:	cmp	r1, #0
   1265c:	beq	1277c <__assert_fail@plt+0x1578>
   12660:	sub	r3, r1, #7
   12664:	cmp	r3, #6
   12668:	ldrls	pc, [pc, r3, lsl #2]
   1266c:	b	12750 <__assert_fail@plt+0x154c>
   12670:	andeq	r2, r1, r4, lsr r7
   12674:	andeq	r2, r1, r8, lsl r7
   12678:	strdeq	r2, [r1], -ip
   1267c:	andeq	r2, r1, r0, ror #13
   12680:	andeq	r2, r1, r4, asr #13
   12684:	andeq	r2, r1, r8, lsr #13
   12688:	andeq	r2, r1, ip, lsl #13
   1268c:	ldr	r3, [pc, #-1036]	; 12288 <__assert_fail@plt+0x1084>
   12690:	mov	r2, #2
   12694:	mov	r1, #1
   12698:	ldr	r3, [r3]
   1269c:	ldr	r0, [pc, #-1080]	; 1226c <__assert_fail@plt+0x1068>
   126a0:	bl	10fa0 <fwrite_unlocked@plt>
   126a4:	b	12654 <__assert_fail@plt+0x1450>
   126a8:	ldr	r3, [pc, #-1064]	; 12288 <__assert_fail@plt+0x1084>
   126ac:	mov	r2, #2
   126b0:	mov	r1, #1
   126b4:	ldr	r3, [r3]
   126b8:	ldr	r0, [pc, #-1104]	; 12270 <__assert_fail@plt+0x106c>
   126bc:	bl	10fa0 <fwrite_unlocked@plt>
   126c0:	b	12654 <__assert_fail@plt+0x1450>
   126c4:	ldr	r3, [pc, #-1092]	; 12288 <__assert_fail@plt+0x1084>
   126c8:	mov	r2, #2
   126cc:	mov	r1, #1
   126d0:	ldr	r3, [r3]
   126d4:	ldr	r0, [pc, #-1128]	; 12274 <__assert_fail@plt+0x1070>
   126d8:	bl	10fa0 <fwrite_unlocked@plt>
   126dc:	b	12654 <__assert_fail@plt+0x1450>
   126e0:	ldr	r3, [pc, #-1120]	; 12288 <__assert_fail@plt+0x1084>
   126e4:	mov	r2, #2
   126e8:	mov	r1, #1
   126ec:	ldr	r3, [r3]
   126f0:	ldr	r0, [pc, #-1152]	; 12278 <__assert_fail@plt+0x1074>
   126f4:	bl	10fa0 <fwrite_unlocked@plt>
   126f8:	b	12654 <__assert_fail@plt+0x1450>
   126fc:	ldr	r3, [pc, #-1148]	; 12288 <__assert_fail@plt+0x1084>
   12700:	mov	r2, #2
   12704:	mov	r1, #1
   12708:	ldr	r3, [r3]
   1270c:	ldr	r0, [pc, #-1176]	; 1227c <__assert_fail@plt+0x1078>
   12710:	bl	10fa0 <fwrite_unlocked@plt>
   12714:	b	12654 <__assert_fail@plt+0x1450>
   12718:	ldr	r3, [pc, #-1176]	; 12288 <__assert_fail@plt+0x1084>
   1271c:	mov	r2, #2
   12720:	mov	r1, #1
   12724:	ldr	r3, [r3]
   12728:	ldr	r0, [pc, #-1200]	; 12280 <__assert_fail@plt+0x107c>
   1272c:	bl	10fa0 <fwrite_unlocked@plt>
   12730:	b	12654 <__assert_fail@plt+0x1450>
   12734:	ldr	r3, [pc, #-1204]	; 12288 <__assert_fail@plt+0x1084>
   12738:	mov	r2, #2
   1273c:	mov	r1, #1
   12740:	ldr	r3, [r3]
   12744:	ldr	r0, [pc, #-1224]	; 12284 <__assert_fail@plt+0x1080>
   12748:	bl	10fa0 <fwrite_unlocked@plt>
   1274c:	b	12654 <__assert_fail@plt+0x1450>
   12750:	ldr	r3, [pc, #-1232]	; 12288 <__assert_fail@plt+0x1084>
   12754:	ldr	r0, [r3]
   12758:	ldr	r3, [r0, #20]
   1275c:	ldr	r2, [r0, #24]
   12760:	cmp	r3, r2
   12764:	addcc	r2, r3, #1
   12768:	strcc	r2, [r0, #20]
   1276c:	strbcc	r1, [r3]
   12770:	bcc	12654 <__assert_fail@plt+0x1450>
   12774:	bl	11168 <__overflow@plt>
   12778:	b	12654 <__assert_fail@plt+0x1450>
   1277c:	ldr	r3, [pc, #-1276]	; 12288 <__assert_fail@plt+0x1084>
   12780:	ldr	r0, [r3]
   12784:	ldr	r3, [r0, #20]
   12788:	ldr	r2, [r0, #24]
   1278c:	cmp	r3, r2
   12790:	addcc	r1, r3, #1
   12794:	movcc	r2, #10
   12798:	strcc	r1, [r0, #20]
   1279c:	strbcc	r2, [r3]
   127a0:	bcc	11f94 <__assert_fail@plt+0xd90>
   127a4:	mov	r1, #10
   127a8:	bl	11168 <__overflow@plt>
   127ac:	b	11f94 <__assert_fail@plt+0xd90>
   127b0:	strd	r8, [sp, #16]
   127b4:	mov	r6, r7
   127b8:	mov	r9, r2
   127bc:	b	12320 <__assert_fail@plt+0x111c>
   127c0:	mov	r8, #2
   127c4:	b	11ac8 <__assert_fail@plt+0x8c4>
   127c8:	ldr	r3, [r5]
   127cc:	ldr	r1, [sp, #24]
   127d0:	ldr	r0, [r9, r3, lsl #2]
   127d4:	bl	12ba4 <__assert_fail@plt+0x19a0>
   127d8:	cmp	r0, #0
   127dc:	beq	125b8 <__assert_fail@plt+0x13b4>
   127e0:	ldrd	r2, [sp, #40]	; 0x28
   127e4:	mov	r1, #1
   127e8:	add	r9, r9, #8
   127ec:	strd	r2, [r4, #136]	; 0x88
   127f0:	ldrd	r2, [sp, #48]	; 0x30
   127f4:	strb	r1, [r4, #157]	; 0x9d
   127f8:	mov	r8, #0
   127fc:	mov	r6, r2
   12800:	mov	r7, r3
   12804:	b	11c04 <__assert_fail@plt+0xa00>
   12808:	ldr	r3, [r5]
   1280c:	add	r1, sp, #48	; 0x30
   12810:	add	r3, r3, #2
   12814:	ldr	r0, [r9, r3, lsl #2]
   12818:	bl	12ba4 <__assert_fail@plt+0x19a0>
   1281c:	cmp	r0, #0
   12820:	beq	11ac4 <__assert_fail@plt+0x8c0>
   12824:	ldr	r1, [r5]
   12828:	ldrd	r2, [sp, #40]	; 0x28
   1282c:	add	r0, r1, #2
   12830:	ldr	r1, [r9, r1, lsl #2]
   12834:	strd	r2, [r4, #136]	; 0x88
   12838:	ldrd	r2, [sp, #48]	; 0x30
   1283c:	mov	r8, #1
   12840:	str	r1, [r9, r0, lsl #2]
   12844:	strb	r8, [r4, #157]	; 0x9d
   12848:	add	r9, r9, #8
   1284c:	mov	r6, r2
   12850:	mov	r7, r3
   12854:	b	11c04 <__assert_fail@plt+0xa00>
   12858:	ldr	r0, [sp, #24]
   1285c:	bl	15e58 <__assert_fail@plt+0x4c54>
   12860:	mov	r0, #0
   12864:	bl	144e4 <__assert_fail@plt+0x32e0>
   12868:	mov	sl, r6
   1286c:	and	sl, sl, r0
   12870:	b	11e0c <__assert_fail@plt+0xc08>
   12874:	ldr	r3, [pc, #-1512]	; 12294 <__assert_fail@plt+0x1090>
   12878:	ldr	r2, [pc, #-1524]	; 1228c <__assert_fail@plt+0x1088>
   1287c:	ldr	r1, [pc, #-1508]	; 122a0 <__assert_fail@plt+0x109c>
   12880:	ldr	r0, [pc, #-1516]	; 1229c <__assert_fail@plt+0x1098>
   12884:	bl	11204 <__assert_fail@plt>
   12888:	mov	r2, #5
   1288c:	ldr	r1, [pc, #-1540]	; 12290 <__assert_fail@plt+0x108c>
   12890:	b	11b8c <__assert_fail@plt+0x988>
   12894:	ldr	r3, [pc, #-1524]	; 122a8 <__assert_fail@plt+0x10a4>
   12898:	ldr	r1, [sp, #40]	; 0x28
   1289c:	ldr	r2, [r3]
   128a0:	ldr	r3, [pc, #-1532]	; 122ac <__assert_fail@plt+0x10a8>
   128a4:	str	r2, [sp]
   128a8:	mov	r2, #119	; 0x77
   128ac:	bl	1b504 <__assert_fail@plt+0xa300>
   128b0:	mov	sl, r6
   128b4:	b	11e04 <__assert_fail@plt+0xc00>
   128b8:	ldr	r3, [pc, #-1580]	; 12294 <__assert_fail@plt+0x1090>
   128bc:	ldr	r2, [pc, #-1580]	; 12298 <__assert_fail@plt+0x1094>
   128c0:	ldr	r1, [pc, #-1576]	; 122a0 <__assert_fail@plt+0x109c>
   128c4:	ldr	r0, [pc, #-1584]	; 1229c <__assert_fail@plt+0x1098>
   128c8:	bl	11204 <__assert_fail@plt>
   128cc:	mov	r2, #5
   128d0:	mov	r5, r1
   128d4:	ldr	r1, [pc, #-1592]	; 122a4 <__assert_fail@plt+0x10a0>
   128d8:	bl	10fc4 <dcgettext@plt>
   128dc:	ldr	r3, [pc, #-1596]	; 122a8 <__assert_fail@plt+0x10a4>
   128e0:	mov	r4, r0
   128e4:	ldr	r0, [r3]
   128e8:	bl	1a0a8 <__assert_fail@plt+0x8ea4>
   128ec:	mov	r2, r4
   128f0:	mov	r1, r5
   128f4:	mov	r3, r0
   128f8:	mov	r0, #1
   128fc:	bl	1103c <error@plt>
   12900:	ldr	r3, [pc, #-1632]	; 122a8 <__assert_fail@plt+0x10a4>
   12904:	ldr	r1, [sp, #40]	; 0x28
   12908:	ldr	r2, [r3]
   1290c:	ldr	r3, [pc, #-1640]	; 122ac <__assert_fail@plt+0x10a8>
   12910:	str	r2, [sp]
   12914:	mov	r2, #83	; 0x53
   12918:	bl	1b504 <__assert_fail@plt+0xa300>
   1291c:	ldr	r3, [pc, #-1660]	; 122a8 <__assert_fail@plt+0x10a4>
   12920:	ldr	r1, [sp, #40]	; 0x28
   12924:	ldr	r2, [r3]
   12928:	ldr	r3, [pc, #-1668]	; 122ac <__assert_fail@plt+0x10a8>
   1292c:	str	r2, [sp]
   12930:	mov	r2, #106	; 0x6a
   12934:	bl	1b504 <__assert_fail@plt+0xa300>
   12938:	mov	fp, #0
   1293c:	mov	lr, #0
   12940:	pop	{r1}		; (ldr r1, [sp], #4)
   12944:	mov	r2, sp
   12948:	push	{r2}		; (str r2, [sp, #-4]!)
   1294c:	push	{r0}		; (str r0, [sp, #-4]!)
   12950:	ldr	ip, [pc, #16]	; 12968 <__assert_fail@plt+0x1764>
   12954:	push	{ip}		; (str ip, [sp, #-4]!)
   12958:	ldr	r0, [pc, #12]	; 1296c <__assert_fail@plt+0x1768>
   1295c:	ldr	r3, [pc, #12]	; 12970 <__assert_fail@plt+0x176c>
   12960:	bl	1106c <__libc_start_main@plt>
   12964:	bl	111ec <abort@plt>
   12968:			; <UNDEFINED> instruction: 0x0001ccb8
   1296c:	andeq	r1, r1, r0, lsl r2
   12970:	andeq	ip, r1, r8, asr ip
   12974:	ldr	r3, [pc, #20]	; 12990 <__assert_fail@plt+0x178c>
   12978:	ldr	r2, [pc, #20]	; 12994 <__assert_fail@plt+0x1790>
   1297c:	add	r3, pc, r3
   12980:	ldr	r2, [r3, r2]
   12984:	cmp	r2, #0
   12988:	bxeq	lr
   1298c:	b	11090 <__gmon_start__@plt>
   12990:	andeq	ip, r1, ip, ror r6
   12994:	andeq	r0, r0, ip, lsl #2
   12998:	ldr	r3, [pc, #28]	; 129bc <__assert_fail@plt+0x17b8>
   1299c:	ldr	r0, [pc, #28]	; 129c0 <__assert_fail@plt+0x17bc>
   129a0:	sub	r3, r3, r0
   129a4:	cmp	r3, #6
   129a8:	bxls	lr
   129ac:	ldr	r3, [pc, #16]	; 129c4 <__assert_fail@plt+0x17c0>
   129b0:	cmp	r3, #0
   129b4:	bxeq	lr
   129b8:	bx	r3
   129bc:	andeq	pc, r2, fp, ror #2
   129c0:	andeq	pc, r2, r8, ror #2
   129c4:	andeq	r0, r0, r0
   129c8:	ldr	r1, [pc, #36]	; 129f4 <__assert_fail@plt+0x17f0>
   129cc:	ldr	r0, [pc, #36]	; 129f8 <__assert_fail@plt+0x17f4>
   129d0:	sub	r1, r1, r0
   129d4:	asr	r1, r1, #2
   129d8:	add	r1, r1, r1, lsr #31
   129dc:	asrs	r1, r1, #1
   129e0:	bxeq	lr
   129e4:	ldr	r3, [pc, #16]	; 129fc <__assert_fail@plt+0x17f8>
   129e8:	cmp	r3, #0
   129ec:	bxeq	lr
   129f0:	bx	r3
   129f4:	andeq	pc, r2, r8, ror #2
   129f8:	andeq	pc, r2, r8, ror #2
   129fc:	andeq	r0, r0, r0
   12a00:	push	{r4, lr}
   12a04:	ldr	r4, [pc, #24]	; 12a24 <__assert_fail@plt+0x1820>
   12a08:	ldrb	r3, [r4]
   12a0c:	cmp	r3, #0
   12a10:	popne	{r4, pc}
   12a14:	bl	12998 <__assert_fail@plt+0x1794>
   12a18:	mov	r3, #1
   12a1c:	strb	r3, [r4]
   12a20:	pop	{r4, pc}
   12a24:	andeq	pc, r2, ip, lsl #3
   12a28:	ldr	r0, [pc, #40]	; 12a58 <__assert_fail@plt+0x1854>
   12a2c:	ldr	r3, [r0]
   12a30:	cmp	r3, #0
   12a34:	bne	12a3c <__assert_fail@plt+0x1838>
   12a38:	b	129c8 <__assert_fail@plt+0x17c4>
   12a3c:	ldr	r3, [pc, #24]	; 12a5c <__assert_fail@plt+0x1858>
   12a40:	cmp	r3, #0
   12a44:	beq	12a38 <__assert_fail@plt+0x1834>
   12a48:	push	{r4, lr}
   12a4c:	blx	r3
   12a50:	pop	{r4, lr}
   12a54:	b	129c8 <__assert_fail@plt+0x17c4>
   12a58:	andeq	lr, r2, r4, lsl pc
   12a5c:	andeq	r0, r0, r0
   12a60:	bx	lr
   12a64:	ldr	ip, [pc, #300]	; 12b98 <__assert_fail@plt+0x1994>
   12a68:	push	{r4, r5, r6, r7, r8, r9, lr}
   12a6c:	sub	sp, sp, #36	; 0x24
   12a70:	ldr	r3, [ip, #4]
   12a74:	add	r6, sp, #32
   12a78:	ldr	r7, [ip]
   12a7c:	mov	lr, #0
   12a80:	cmp	r3, #10
   12a84:	strb	r2, [r6, #-5]!
   12a88:	mov	r4, r0
   12a8c:	mov	r5, r1
   12a90:	strb	lr, [sp, #28]
   12a94:	sub	r7, r6, r7
   12a98:	beq	12b18 <__assert_fail@plt+0x1914>
   12a9c:	cmp	r3, #16
   12aa0:	beq	12b64 <__assert_fail@plt+0x1960>
   12aa4:	cmp	r3, #8
   12aa8:	beq	12aec <__assert_fail@plt+0x18e8>
   12aac:	cmp	r6, r7
   12ab0:	bls	12ad4 <__assert_fail@plt+0x18d0>
   12ab4:	sub	r2, r6, r7
   12ab8:	sub	r0, r6, r2
   12abc:	mov	r1, #48	; 0x30
   12ac0:	bl	11108 <memset@plt>
   12ac4:	sub	r7, r7, #1
   12ac8:	sub	r3, r6, #1
   12acc:	sub	r7, r7, r3
   12ad0:	add	r6, r6, r7
   12ad4:	ldr	r3, [pc, #192]	; 12b9c <__assert_fail@plt+0x1998>
   12ad8:	mov	r0, r6
   12adc:	ldr	r1, [r3]
   12ae0:	bl	10f1c <fputs_unlocked@plt>
   12ae4:	add	sp, sp, #36	; 0x24
   12ae8:	pop	{r4, r5, r6, r7, r8, r9, pc}
   12aec:	lsr	r2, r4, #3
   12af0:	orr	r2, r2, r5, lsl #29
   12af4:	lsr	r1, r5, #3
   12af8:	and	r3, r4, #7
   12afc:	mov	r5, r1
   12b00:	mov	r4, r2
   12b04:	add	r3, r3, #48	; 0x30
   12b08:	orrs	r2, r4, r5
   12b0c:	strb	r3, [r6, #-1]!
   12b10:	bne	12aec <__assert_fail@plt+0x18e8>
   12b14:	b	12aac <__assert_fail@plt+0x18a8>
   12b18:	mov	r8, #10
   12b1c:	mov	r9, #0
   12b20:	mov	r0, r4
   12b24:	mov	r1, r5
   12b28:	mov	r2, r8
   12b2c:	mov	r3, r9
   12b30:	bl	1cae4 <__assert_fail@plt+0xb8e0>
   12b34:	mov	r0, r4
   12b38:	mov	r1, r5
   12b3c:	mov	r3, r9
   12b40:	add	r2, r2, #48	; 0x30
   12b44:	strb	r2, [r6, #-1]!
   12b48:	mov	r2, r8
   12b4c:	bl	1cae4 <__assert_fail@plt+0xb8e0>
   12b50:	mov	r4, r0
   12b54:	mov	r5, r1
   12b58:	orrs	r3, r4, r5
   12b5c:	bne	12b20 <__assert_fail@plt+0x191c>
   12b60:	b	12aac <__assert_fail@plt+0x18a8>
   12b64:	ldr	r0, [pc, #52]	; 12ba0 <__assert_fail@plt+0x199c>
   12b68:	and	r2, r4, #15
   12b6c:	add	r2, r0, r2
   12b70:	lsr	r3, r4, #4
   12b74:	orr	r3, r3, r5, lsl #28
   12b78:	lsr	r1, r5, #4
   12b7c:	ldrb	r2, [r2]
   12b80:	mov	r4, r3
   12b84:	mov	r5, r1
   12b88:	orrs	r3, r4, r5
   12b8c:	strb	r2, [r6, #-1]!
   12b90:	bne	12b68 <__assert_fail@plt+0x1964>
   12b94:	b	12aac <__assert_fail@plt+0x18a8>
   12b98:	muleq	r2, r0, r1
   12b9c:	andeq	pc, r2, r4, lsl #3
   12ba0:	andeq	sp, r1, r0, lsr #32
   12ba4:	push	{r4, r5, lr}
   12ba8:	mov	r4, r0
   12bac:	ldrb	r0, [r0]
   12bb0:	sub	sp, sp, #12
   12bb4:	cmp	r0, #0
   12bb8:	beq	12c00 <__assert_fail@plt+0x19fc>
   12bbc:	cmp	r0, #43	; 0x2b
   12bc0:	addeq	r4, r4, #1
   12bc4:	mov	r5, r1
   12bc8:	mov	r0, r4
   12bcc:	mov	r1, #46	; 0x2e
   12bd0:	bl	110cc <strchr@plt>
   12bd4:	cmp	r0, #0
   12bd8:	movne	r2, #10
   12bdc:	beq	12c08 <__assert_fail@plt+0x1a04>
   12be0:	ldr	r1, [pc, #72]	; 12c30 <__assert_fail@plt+0x1a2c>
   12be4:	mov	r3, r5
   12be8:	str	r1, [sp]
   12bec:	mov	r0, r4
   12bf0:	mov	r1, #0
   12bf4:	bl	1b5b8 <__assert_fail@plt+0xa3b4>
   12bf8:	clz	r0, r0
   12bfc:	lsr	r0, r0, #5
   12c00:	add	sp, sp, #12
   12c04:	pop	{r4, r5, pc}
   12c08:	ldrb	r3, [r4]
   12c0c:	cmp	r3, #48	; 0x30
   12c10:	movne	r2, #8
   12c14:	bne	12be0 <__assert_fail@plt+0x19dc>
   12c18:	ldrb	r2, [r4, #1]
   12c1c:	and	r2, r2, #223	; 0xdf
   12c20:	cmp	r2, #88	; 0x58
   12c24:	movne	r2, #8
   12c28:	moveq	r2, #16
   12c2c:	b	12be0 <__assert_fail@plt+0x19dc>
   12c30:	andeq	sp, r1, r4, lsr r0
   12c34:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12c38:	mov	r5, #0
   12c3c:	mov	r7, r5
   12c40:	mov	r5, #0
   12c44:	sub	sp, sp, #36	; 0x24
   12c48:	mov	r4, r1
   12c4c:	cmp	r7, r5
   12c50:	cmpeq	r0, r1
   12c54:	strd	r4, [sp, #8]
   12c58:	ldr	r4, [sp, #76]	; 0x4c
   12c5c:	bls	12d34 <__assert_fail@plt+0x1b30>
   12c60:	asr	r9, r4, #31
   12c64:	mov	fp, r9
   12c68:	subs	r8, r0, #1
   12c6c:	mov	sl, r4
   12c70:	mul	r3, r8, fp
   12c74:	sbc	r9, r7, #0
   12c78:	strd	sl, [sp, #16]
   12c7c:	umull	sl, fp, r8, r4
   12c80:	mla	r3, r4, r9, r3
   12c84:	mov	r6, r0
   12c88:	add	r5, r2, r0
   12c8c:	strd	r6, [sp]
   12c90:	mov	r8, r4
   12c94:	add	fp, r3, fp
   12c98:	ldrd	r6, [sp]
   12c9c:	mov	r4, r5
   12ca0:	b	12d04 <__assert_fail@plt+0x1b00>
   12ca4:	cmp	r2, #32
   12ca8:	strbhi	r2, [sp, #28]
   12cac:	ldrls	r3, [pc, #136]	; 12d3c <__assert_fail@plt+0x1b38>
   12cb0:	addhi	r2, sp, #28
   12cb4:	addls	r2, r3, r2, lsl #2
   12cb8:	movhi	r3, #0
   12cbc:	strbhi	r3, [sp, #29]
   12cc0:	sub	r1, r8, r5
   12cc4:	ldrd	r8, [sp, #16]
   12cc8:	ldr	r3, [sp, #72]	; 0x48
   12ccc:	subs	r6, r6, #1
   12cd0:	add	r1, r1, r3
   12cd4:	sbc	r7, r7, #0
   12cd8:	ldr	r0, [pc, #96]	; 12d40 <__assert_fail@plt+0x1b3c>
   12cdc:	subs	r8, sl, r8
   12ce0:	sbc	r9, fp, r9
   12ce4:	bl	1b2ec <__assert_fail@plt+0xa0e8>
   12ce8:	ldrd	r2, [sp, #8]
   12cec:	mov	sl, r8
   12cf0:	mov	fp, r9
   12cf4:	cmp	r3, r7
   12cf8:	cmpeq	r2, r6
   12cfc:	mov	r8, r5
   12d00:	bcs	12d34 <__assert_fail@plt+0x1b30>
   12d04:	ldrd	r2, [sp]
   12d08:	mov	r0, sl
   12d0c:	mov	r1, fp
   12d10:	bl	1cae4 <__assert_fail@plt+0xb8e0>
   12d14:	rsb	r2, r6, #0
   12d18:	ldrb	r2, [r4, r2]
   12d1c:	and	r2, r2, #127	; 0x7f
   12d20:	cmp	r2, #127	; 0x7f
   12d24:	mov	r5, r0
   12d28:	bne	12ca4 <__assert_fail@plt+0x1aa0>
   12d2c:	ldr	r2, [pc, #16]	; 12d44 <__assert_fail@plt+0x1b40>
   12d30:	b	12cc0 <__assert_fail@plt+0x1abc>
   12d34:	add	sp, sp, #36	; 0x24
   12d38:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12d3c:	andeq	ip, r1, r0, ror #25
   12d40:	andeq	sp, r1, ip, lsr r0
   12d44:	andeq	sp, r1, r8, lsr r0
   12d48:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12d4c:	mov	r9, #0
   12d50:	mov	r7, #0
   12d54:	mov	r6, r0
   12d58:	mov	r0, r1
   12d5c:	mov	r1, r9
   12d60:	sub	sp, sp, #44	; 0x2c
   12d64:	cmp	r7, r1
   12d68:	cmpeq	r6, r0
   12d6c:	strd	r6, [sp, #16]
   12d70:	mov	r9, r7
   12d74:	strd	r0, [sp, #24]
   12d78:	ldr	r7, [sp, #84]	; 0x54
   12d7c:	bls	12ea8 <__assert_fail@plt+0x1ca4>
   12d80:	asr	r1, r7, #31
   12d84:	mov	fp, r1
   12d88:	subs	r0, r6, #1
   12d8c:	mov	sl, r7
   12d90:	str	r3, [sp, #12]
   12d94:	mul	r3, r0, fp
   12d98:	sbc	r1, r9, #0
   12d9c:	strd	sl, [sp, #32]
   12da0:	umull	sl, fp, r0, r7
   12da4:	mla	r3, r7, r1, r3
   12da8:	mov	r8, r6
   12dac:	add	fp, r3, fp
   12db0:	mov	r6, r2
   12db4:	strd	r8, [sp]
   12db8:	b	12e48 <__assert_fail@plt+0x1c44>
   12dbc:	ldrb	r4, [r6, #7]
   12dc0:	ldrb	ip, [r6, #6]
   12dc4:	ldrb	r5, [r6, #3]
   12dc8:	orr	r4, r4, r2
   12dcc:	ldrb	lr, [r6, #2]
   12dd0:	ldrb	r2, [r6, #5]
   12dd4:	bic	r4, r4, #65280	; 0xff00
   12dd8:	orr	r5, r5, r3
   12ddc:	orr	r4, r4, ip, lsl #8
   12de0:	ldrb	ip, [r6, #1]
   12de4:	bic	r5, r5, #65280	; 0xff00
   12de8:	bic	r4, r4, #16711680	; 0xff0000
   12dec:	ldrb	r3, [r6, #4]
   12df0:	orr	r4, r4, r2, lsl #16
   12df4:	orr	r5, r5, lr, lsl #8
   12df8:	ldrb	r2, [r6], #8
   12dfc:	bic	r5, r5, #16711680	; 0xff0000
   12e00:	orr	r5, r5, ip, lsl #16
   12e04:	bic	r4, r4, #-16777216	; 0xff000000
   12e08:	bic	r5, r5, #-16777216	; 0xff000000
   12e0c:	orr	r4, r4, r3, lsl #24
   12e10:	orr	r5, r5, r2, lsl #24
   12e14:	mov	r3, r5
   12e18:	mov	r2, r4
   12e1c:	ldrd	r8, [sp, #32]
   12e20:	subs	r8, sl, r8
   12e24:	sbc	r9, fp, r9
   12e28:	bl	1b2ec <__assert_fail@plt+0xa0e8>
   12e2c:	ldrd	r2, [sp, #24]
   12e30:	ldrd	r0, [sp]
   12e34:	mov	sl, r8
   12e38:	mov	fp, r9
   12e3c:	cmp	r1, r3
   12e40:	cmpeq	r0, r2
   12e44:	bls	12ea8 <__assert_fail@plt+0x1ca4>
   12e48:	ldrd	r2, [sp, #16]
   12e4c:	mov	r0, sl
   12e50:	mov	r1, fp
   12e54:	bl	1cae4 <__assert_fail@plt+0xb8e0>
   12e58:	ldrd	r8, [sp]
   12e5c:	bic	r2, r4, #255	; 0xff
   12e60:	bic	r3, r5, #255	; 0xff
   12e64:	subs	r8, r8, #1
   12e68:	sbc	r9, r9, #0
   12e6c:	strd	r8, [sp]
   12e70:	mov	r1, r0
   12e74:	ldr	r0, [pc, #52]	; 12eb0 <__assert_fail@plt+0x1cac>
   12e78:	sub	ip, r7, r1
   12e7c:	mov	r7, r1
   12e80:	ldrb	lr, [r0, #8]
   12e84:	ldr	r1, [sp, #80]	; 0x50
   12e88:	ldr	r0, [sp, #12]
   12e8c:	add	ip, ip, r1
   12e90:	cmp	lr, #0
   12e94:	mov	r1, ip
   12e98:	bne	12dbc <__assert_fail@plt+0x1bb8>
   12e9c:	mov	r1, ip
   12ea0:	ldrd	r2, [r6], #8
   12ea4:	b	12e1c <__assert_fail@plt+0x1c18>
   12ea8:	add	sp, sp, #44	; 0x2c
   12eac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12eb0:	muleq	r2, r0, r1
   12eb4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12eb8:	mov	r7, #0
   12ebc:	mov	r9, #0
   12ec0:	sub	sp, sp, #36	; 0x24
   12ec4:	mov	r8, r1
   12ec8:	mov	r6, r0
   12ecc:	cmp	r7, r9
   12ed0:	cmpeq	r0, r1
   12ed4:	strd	r8, [sp, #16]
   12ed8:	strd	r6, [sp, #8]
   12edc:	ldr	r8, [sp, #76]	; 0x4c
   12ee0:	bls	12fec <__assert_fail@plt+0x1de8>
   12ee4:	asr	r1, r8, #31
   12ee8:	mov	fp, r1
   12eec:	subs	r0, r6, #1
   12ef0:	mov	sl, r8
   12ef4:	mov	r9, r3
   12ef8:	mul	r3, r0, fp
   12efc:	sbc	r1, r7, #0
   12f00:	strd	sl, [sp, #24]
   12f04:	umull	sl, fp, r0, r8
   12f08:	mla	r3, r8, r1, r3
   12f0c:	mov	r5, r2
   12f10:	add	fp, r3, fp
   12f14:	strd	r6, [sp]
   12f18:	b	12f78 <__assert_fail@plt+0x1d74>
   12f1c:	ldrb	r4, [r5, #3]
   12f20:	ldrb	r3, [r5, #2]
   12f24:	ldrb	r2, [r5, #1]
   12f28:	orr	r4, r4, ip
   12f2c:	bic	r4, r4, #65280	; 0xff00
   12f30:	ldrd	r6, [sp, #24]
   12f34:	orr	r4, r4, r3, lsl #8
   12f38:	ldrb	r3, [r5], #4
   12f3c:	bic	r4, r4, #16711680	; 0xff0000
   12f40:	orr	r4, r4, r2, lsl #16
   12f44:	subs	r6, sl, r6
   12f48:	bic	r4, r4, #-16777216	; 0xff000000
   12f4c:	sbc	r7, fp, r7
   12f50:	orr	r4, r4, r3, lsl #24
   12f54:	mov	sl, r6
   12f58:	mov	fp, r7
   12f5c:	mov	r2, r4
   12f60:	bl	1b2ec <__assert_fail@plt+0xa0e8>
   12f64:	ldrd	r2, [sp, #16]
   12f68:	ldrd	r0, [sp]
   12f6c:	cmp	r1, r3
   12f70:	cmpeq	r0, r2
   12f74:	bls	12fec <__assert_fail@plt+0x1de8>
   12f78:	ldrd	r2, [sp, #8]
   12f7c:	mov	r0, sl
   12f80:	mov	r1, fp
   12f84:	bl	1cae4 <__assert_fail@plt+0xb8e0>
   12f88:	ldr	r3, [pc, #100]	; 12ff4 <__assert_fail@plt+0x1df0>
   12f8c:	ldrd	r6, [sp]
   12f90:	bic	ip, r4, #255	; 0xff
   12f94:	ldrb	r1, [r3, #8]
   12f98:	subs	r6, r6, #1
   12f9c:	sbc	r7, r7, #0
   12fa0:	cmp	r1, #0
   12fa4:	strd	r6, [sp]
   12fa8:	mov	r2, r0
   12fac:	sub	r3, r8, r2
   12fb0:	mov	r8, r2
   12fb4:	ldr	r2, [sp, #72]	; 0x48
   12fb8:	mov	r0, r9
   12fbc:	add	r3, r3, r2
   12fc0:	mov	r1, r3
   12fc4:	bne	12f1c <__assert_fail@plt+0x1d18>
   12fc8:	ldrd	r6, [sp, #24]
   12fcc:	mov	r1, r3
   12fd0:	ldr	r2, [r5], #4
   12fd4:	subs	r6, sl, r6
   12fd8:	sbc	r7, fp, r7
   12fdc:	mov	r0, r9
   12fe0:	mov	sl, r6
   12fe4:	mov	fp, r7
   12fe8:	b	12f60 <__assert_fail@plt+0x1d5c>
   12fec:	add	sp, sp, #36	; 0x24
   12ff0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12ff4:	muleq	r2, r0, r1
   12ff8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12ffc:	mov	r7, #0
   13000:	mov	r9, #0
   13004:	sub	sp, sp, #36	; 0x24
   13008:	mov	r8, r1
   1300c:	mov	r6, r0
   13010:	cmp	r7, r9
   13014:	cmpeq	r0, r1
   13018:	strd	r8, [sp, #16]
   1301c:	strd	r6, [sp, #8]
   13020:	ldr	r8, [sp, #76]	; 0x4c
   13024:	bls	13130 <__assert_fail@plt+0x1f2c>
   13028:	asr	r1, r8, #31
   1302c:	mov	fp, r1
   13030:	subs	r0, r6, #1
   13034:	mov	sl, r8
   13038:	mov	r9, r3
   1303c:	mul	r3, r0, fp
   13040:	sbc	r1, r7, #0
   13044:	strd	sl, [sp, #24]
   13048:	umull	sl, fp, r0, r8
   1304c:	mla	r3, r8, r1, r3
   13050:	mov	r5, r2
   13054:	add	fp, r3, fp
   13058:	strd	r6, [sp]
   1305c:	b	130bc <__assert_fail@plt+0x1eb8>
   13060:	ldrb	r4, [r5, #3]
   13064:	ldrb	r3, [r5, #2]
   13068:	ldrb	r2, [r5, #1]
   1306c:	orr	r4, r4, ip
   13070:	bic	r4, r4, #65280	; 0xff00
   13074:	ldrd	r6, [sp, #24]
   13078:	orr	r4, r4, r3, lsl #8
   1307c:	ldrb	r3, [r5], #4
   13080:	bic	r4, r4, #16711680	; 0xff0000
   13084:	orr	r4, r4, r2, lsl #16
   13088:	subs	r6, sl, r6
   1308c:	bic	r4, r4, #-16777216	; 0xff000000
   13090:	sbc	r7, fp, r7
   13094:	orr	r4, r4, r3, lsl #24
   13098:	mov	sl, r6
   1309c:	mov	fp, r7
   130a0:	mov	r2, r4
   130a4:	bl	1b2ec <__assert_fail@plt+0xa0e8>
   130a8:	ldrd	r2, [sp, #16]
   130ac:	ldrd	r0, [sp]
   130b0:	cmp	r1, r3
   130b4:	cmpeq	r0, r2
   130b8:	bls	13130 <__assert_fail@plt+0x1f2c>
   130bc:	ldrd	r2, [sp, #8]
   130c0:	mov	r0, sl
   130c4:	mov	r1, fp
   130c8:	bl	1cae4 <__assert_fail@plt+0xb8e0>
   130cc:	ldr	r3, [pc, #100]	; 13138 <__assert_fail@plt+0x1f34>
   130d0:	ldrd	r6, [sp]
   130d4:	bic	ip, r4, #255	; 0xff
   130d8:	ldrb	r1, [r3, #8]
   130dc:	subs	r6, r6, #1
   130e0:	sbc	r7, r7, #0
   130e4:	cmp	r1, #0
   130e8:	strd	r6, [sp]
   130ec:	mov	r2, r0
   130f0:	sub	r3, r8, r2
   130f4:	mov	r8, r2
   130f8:	ldr	r2, [sp, #72]	; 0x48
   130fc:	mov	r0, r9
   13100:	add	r3, r3, r2
   13104:	mov	r1, r3
   13108:	bne	13060 <__assert_fail@plt+0x1e5c>
   1310c:	ldrd	r6, [sp, #24]
   13110:	mov	r1, r3
   13114:	ldr	r2, [r5], #4
   13118:	subs	r6, sl, r6
   1311c:	sbc	r7, fp, r7
   13120:	mov	r0, r9
   13124:	mov	sl, r6
   13128:	mov	fp, r7
   1312c:	b	130a4 <__assert_fail@plt+0x1ea0>
   13130:	add	sp, sp, #36	; 0x24
   13134:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13138:	muleq	r2, r0, r1
   1313c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13140:	mov	r7, #0
   13144:	mov	r5, #0
   13148:	sub	sp, sp, #36	; 0x24
   1314c:	cmp	r5, r7
   13150:	mov	r4, r0
   13154:	mov	r6, r1
   13158:	cmpeq	r0, r1
   1315c:	strd	r6, [sp, #16]
   13160:	strd	r4, [sp, #8]
   13164:	ldr	r7, [sp, #76]	; 0x4c
   13168:	bls	13260 <__assert_fail@plt+0x205c>
   1316c:	asr	r1, r7, #31
   13170:	mov	fp, r1
   13174:	subs	r0, r4, #1
   13178:	mov	sl, r7
   1317c:	mov	r8, r3
   13180:	mul	r3, r0, fp
   13184:	sbc	r1, r5, #0
   13188:	strd	sl, [sp, #24]
   1318c:	umull	sl, fp, r0, r7
   13190:	mla	r3, r7, r1, r3
   13194:	mov	r6, r2
   13198:	add	fp, r3, fp
   1319c:	strd	r4, [sp]
   131a0:	b	131ec <__assert_fail@plt+0x1fe8>
   131a4:	ldrb	r2, [r6, #1]
   131a8:	ldrb	r3, [r6], #2
   131ac:	ldrd	r4, [sp, #24]
   131b0:	orr	r2, r2, ip
   131b4:	bic	r2, r2, #65280	; 0xff00
   131b8:	subs	r4, sl, r4
   131bc:	orr	r2, r2, r3, lsl #8
   131c0:	sbc	r5, fp, r5
   131c4:	mov	r9, r2
   131c8:	mov	sl, r4
   131cc:	mov	fp, r5
   131d0:	uxth	r2, r2
   131d4:	bl	1b2ec <__assert_fail@plt+0xa0e8>
   131d8:	ldrd	r2, [sp, #16]
   131dc:	ldrd	r0, [sp]
   131e0:	cmp	r1, r3
   131e4:	cmpeq	r0, r2
   131e8:	bls	13260 <__assert_fail@plt+0x205c>
   131ec:	ldrd	r2, [sp, #8]
   131f0:	mov	r0, sl
   131f4:	mov	r1, fp
   131f8:	bl	1cae4 <__assert_fail@plt+0xb8e0>
   131fc:	ldr	r3, [pc, #100]	; 13268 <__assert_fail@plt+0x2064>
   13200:	ldrd	r4, [sp]
   13204:	bic	ip, r9, #255	; 0xff
   13208:	ldrb	r1, [r3, #8]
   1320c:	subs	r4, r4, #1
   13210:	sbc	r5, r5, #0
   13214:	cmp	r1, #0
   13218:	strd	r4, [sp]
   1321c:	mov	r2, r0
   13220:	sub	r3, r7, r2
   13224:	mov	r7, r2
   13228:	ldr	r2, [sp, #72]	; 0x48
   1322c:	mov	r0, r8
   13230:	add	r3, r3, r2
   13234:	mov	r1, r3
   13238:	bne	131a4 <__assert_fail@plt+0x1fa0>
   1323c:	ldrd	r4, [sp, #24]
   13240:	mov	r1, r3
   13244:	ldrh	r2, [r6], #2
   13248:	subs	r4, sl, r4
   1324c:	sbc	r5, fp, r5
   13250:	mov	r0, r8
   13254:	mov	sl, r4
   13258:	mov	fp, r5
   1325c:	b	131d4 <__assert_fail@plt+0x1fd0>
   13260:	add	sp, sp, #36	; 0x24
   13264:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13268:	muleq	r2, r0, r1
   1326c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13270:	mov	r7, #0
   13274:	mov	r5, #0
   13278:	sub	sp, sp, #36	; 0x24
   1327c:	cmp	r5, r7
   13280:	mov	r4, r0
   13284:	mov	r6, r1
   13288:	cmpeq	r0, r1
   1328c:	strd	r6, [sp, #16]
   13290:	strd	r4, [sp, #8]
   13294:	ldr	r7, [sp, #76]	; 0x4c
   13298:	bls	13390 <__assert_fail@plt+0x218c>
   1329c:	asr	r1, r7, #31
   132a0:	mov	fp, r1
   132a4:	subs	r0, r4, #1
   132a8:	mov	sl, r7
   132ac:	mov	r8, r3
   132b0:	mul	r3, r0, fp
   132b4:	sbc	r1, r5, #0
   132b8:	strd	sl, [sp, #24]
   132bc:	umull	sl, fp, r0, r7
   132c0:	mla	r3, r7, r1, r3
   132c4:	mov	r6, r2
   132c8:	add	fp, r3, fp
   132cc:	strd	r4, [sp]
   132d0:	b	1331c <__assert_fail@plt+0x2118>
   132d4:	ldrb	r2, [r6, #1]
   132d8:	ldrb	r3, [r6], #2
   132dc:	ldrd	r4, [sp, #24]
   132e0:	orr	r2, r2, ip
   132e4:	bic	r2, r2, #65280	; 0xff00
   132e8:	subs	r4, sl, r4
   132ec:	orr	r2, r2, r3, lsl #8
   132f0:	sbc	r5, fp, r5
   132f4:	mov	r9, r2
   132f8:	mov	sl, r4
   132fc:	mov	fp, r5
   13300:	sxth	r2, r2
   13304:	bl	1b2ec <__assert_fail@plt+0xa0e8>
   13308:	ldrd	r2, [sp, #16]
   1330c:	ldrd	r0, [sp]
   13310:	cmp	r1, r3
   13314:	cmpeq	r0, r2
   13318:	bls	13390 <__assert_fail@plt+0x218c>
   1331c:	ldrd	r2, [sp, #8]
   13320:	mov	r0, sl
   13324:	mov	r1, fp
   13328:	bl	1cae4 <__assert_fail@plt+0xb8e0>
   1332c:	ldr	r3, [pc, #100]	; 13398 <__assert_fail@plt+0x2194>
   13330:	ldrd	r4, [sp]
   13334:	bic	ip, r9, #255	; 0xff
   13338:	ldrb	r1, [r3, #8]
   1333c:	subs	r4, r4, #1
   13340:	sbc	r5, r5, #0
   13344:	cmp	r1, #0
   13348:	strd	r4, [sp]
   1334c:	mov	r2, r0
   13350:	sub	r3, r7, r2
   13354:	mov	r7, r2
   13358:	ldr	r2, [sp, #72]	; 0x48
   1335c:	mov	r0, r8
   13360:	add	r3, r3, r2
   13364:	mov	r1, r3
   13368:	bne	132d4 <__assert_fail@plt+0x20d0>
   1336c:	ldrd	r4, [sp, #24]
   13370:	mov	r1, r3
   13374:	ldrsh	r2, [r6], #2
   13378:	subs	r4, sl, r4
   1337c:	sbc	r5, fp, r5
   13380:	mov	r0, r8
   13384:	mov	sl, r4
   13388:	mov	fp, r5
   1338c:	b	13304 <__assert_fail@plt+0x2100>
   13390:	add	sp, sp, #36	; 0x24
   13394:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13398:	muleq	r2, r0, r1
   1339c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   133a0:	mov	r5, #0
   133a4:	mov	r7, #0
   133a8:	sub	sp, sp, #36	; 0x24
   133ac:	mov	r8, r0
   133b0:	mov	r9, r5
   133b4:	mov	r6, r1
   133b8:	cmp	r5, r7
   133bc:	cmpeq	r0, r1
   133c0:	strd	r8, [sp, #8]
   133c4:	strd	r6, [sp, #16]
   133c8:	ldr	r4, [sp, #76]	; 0x4c
   133cc:	bls	13460 <__assert_fail@plt+0x225c>
   133d0:	asr	r7, r4, #31
   133d4:	subs	r0, r0, #1
   133d8:	mov	r6, r4
   133dc:	mov	sl, r3
   133e0:	mul	r3, r0, r7
   133e4:	sbc	r1, r5, #0
   133e8:	strd	r6, [sp, #24]
   133ec:	umull	r6, r7, r0, r4
   133f0:	mla	r3, r4, r1, r3
   133f4:	str	r2, [sp, #4]
   133f8:	add	r7, r3, r7
   133fc:	ldrd	r2, [sp, #8]
   13400:	mov	r0, r6
   13404:	mov	r1, r7
   13408:	bl	1cae4 <__assert_fail@plt+0xb8e0>
   1340c:	ldr	r3, [sp, #72]	; 0x48
   13410:	subs	r8, r8, #1
   13414:	sbc	r9, r9, #0
   13418:	sub	r1, r4, r0
   1341c:	add	r1, r1, r3
   13420:	ldr	r3, [sp, #4]
   13424:	ldrd	r4, [sp, #24]
   13428:	mov	fp, r0
   1342c:	ldrb	r2, [r3], #1
   13430:	subs	r4, r6, r4
   13434:	mov	r0, sl
   13438:	sbc	r5, r7, r5
   1343c:	str	r3, [sp, #4]
   13440:	bl	1b2ec <__assert_fail@plt+0xa0e8>
   13444:	ldrd	r2, [sp, #16]
   13448:	mov	r6, r4
   1344c:	mov	r7, r5
   13450:	cmp	r9, r3
   13454:	cmpeq	r8, r2
   13458:	mov	r4, fp
   1345c:	bhi	133fc <__assert_fail@plt+0x21f8>
   13460:	add	sp, sp, #36	; 0x24
   13464:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13468:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1346c:	mov	r5, #0
   13470:	mov	r7, #0
   13474:	sub	sp, sp, #36	; 0x24
   13478:	mov	r8, r0
   1347c:	mov	r9, r5
   13480:	mov	r6, r1
   13484:	cmp	r5, r7
   13488:	cmpeq	r0, r1
   1348c:	strd	r8, [sp, #8]
   13490:	strd	r6, [sp, #16]
   13494:	ldr	r4, [sp, #76]	; 0x4c
   13498:	bls	1352c <__assert_fail@plt+0x2328>
   1349c:	asr	r7, r4, #31
   134a0:	subs	r0, r0, #1
   134a4:	mov	r6, r4
   134a8:	mov	sl, r3
   134ac:	mul	r3, r0, r7
   134b0:	sbc	r1, r5, #0
   134b4:	strd	r6, [sp, #24]
   134b8:	umull	r6, r7, r0, r4
   134bc:	mla	r3, r4, r1, r3
   134c0:	str	r2, [sp, #4]
   134c4:	add	r7, r3, r7
   134c8:	ldrd	r2, [sp, #8]
   134cc:	mov	r0, r6
   134d0:	mov	r1, r7
   134d4:	bl	1cae4 <__assert_fail@plt+0xb8e0>
   134d8:	ldr	r3, [sp, #72]	; 0x48
   134dc:	subs	r8, r8, #1
   134e0:	sbc	r9, r9, #0
   134e4:	sub	r1, r4, r0
   134e8:	add	r1, r1, r3
   134ec:	ldr	r3, [sp, #4]
   134f0:	ldrd	r4, [sp, #24]
   134f4:	mov	fp, r0
   134f8:	ldrsb	r2, [r3], #1
   134fc:	subs	r4, r6, r4
   13500:	mov	r0, sl
   13504:	sbc	r5, r7, r5
   13508:	str	r3, [sp, #4]
   1350c:	bl	1b2ec <__assert_fail@plt+0xa0e8>
   13510:	ldrd	r2, [sp, #16]
   13514:	mov	r6, r4
   13518:	mov	r7, r5
   1351c:	cmp	r9, r3
   13520:	cmpeq	r8, r2
   13524:	mov	r4, fp
   13528:	bhi	134c8 <__assert_fail@plt+0x22c4>
   1352c:	add	sp, sp, #36	; 0x24
   13530:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13534:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13538:	mov	r7, #0
   1353c:	mov	r5, #0
   13540:	sub	sp, sp, #92	; 0x5c
   13544:	mov	r6, r1
   13548:	cmp	r5, r7
   1354c:	cmpeq	r0, r1
   13550:	strd	r6, [sp, #24]
   13554:	ldr	r6, [sp, #132]	; 0x84
   13558:	bls	136e8 <__assert_fail@plt+0x24e4>
   1355c:	mov	r4, r0
   13560:	asr	fp, r6, #31
   13564:	subs	r0, r0, #1
   13568:	mov	sl, r6
   1356c:	mul	r3, r0, fp
   13570:	sbc	r1, r5, #0
   13574:	strd	sl, [sp, #32]
   13578:	umull	sl, fp, r0, r6
   1357c:	mla	r3, r6, r1, r3
   13580:	strd	r4, [sp, #16]
   13584:	ldrd	r0, [sp, #16]
   13588:	strd	sl, [sp, #8]
   1358c:	add	r3, r3, fp
   13590:	ldr	fp, [pc, #344]	; 136f0 <__assert_fail@plt+0x24ec>
   13594:	mov	r4, r2
   13598:	str	r3, [sp, #12]
   1359c:	str	fp, [sp, #44]	; 0x2c
   135a0:	strd	r0, [sp]
   135a4:	b	13648 <__assert_fail@plt+0x2444>
   135a8:	ldrd	r6, [sp, #32]
   135ac:	ldrb	lr, [r4, #7]
   135b0:	ldrb	ip, [r4, #6]
   135b4:	subs	r6, sl, r6
   135b8:	sbc	r7, fp, r7
   135bc:	strd	r6, [sp, #8]
   135c0:	ldr	r6, [sp, #40]	; 0x28
   135c4:	orr	r8, lr, r6
   135c8:	ldrb	r6, [r4, #5]
   135cc:	bic	lr, r8, #65280	; 0xff00
   135d0:	orr	r8, lr, ip, lsl #8
   135d4:	ldrb	lr, [r4, #4]
   135d8:	bic	ip, r8, #16711680	; 0xff0000
   135dc:	orr	r8, ip, r6, lsl #16
   135e0:	ldrb	r6, [r4, #3]
   135e4:	bic	ip, r8, #-16777216	; 0xff000000
   135e8:	orr	r8, ip, lr, lsl #24
   135ec:	bic	ip, r9, #255	; 0xff
   135f0:	ldrb	lr, [r4, #2]
   135f4:	orr	r9, r6, ip
   135f8:	ldrb	ip, [r4, #1]
   135fc:	mov	r6, ip
   13600:	bic	ip, r9, #65280	; 0xff00
   13604:	orr	r9, ip, lr, lsl #8
   13608:	ldrb	ip, [r4], #8
   1360c:	bic	lr, r9, #16711680	; 0xff0000
   13610:	orr	r9, lr, r6, lsl #16
   13614:	bic	lr, r9, #-16777216	; 0xff000000
   13618:	orr	r9, lr, ip, lsl #24
   1361c:	vmov	d0, r8, r9
   13620:	bl	16098 <__assert_fail@plt+0x4e94>
   13624:	ldr	r0, [pc, #200]	; 136f4 <__assert_fail@plt+0x24f0>
   13628:	add	r2, sp, #48	; 0x30
   1362c:	mov	r1, r5
   13630:	bl	1b2ec <__assert_fail@plt+0xa0e8>
   13634:	ldrd	r2, [sp, #24]
   13638:	ldrd	r0, [sp]
   1363c:	cmp	r1, r3
   13640:	cmpeq	r0, r2
   13644:	bls	136e8 <__assert_fail@plt+0x24e4>
   13648:	ldrd	sl, [sp, #8]
   1364c:	ldrd	r2, [sp, #16]
   13650:	mov	r0, sl
   13654:	mov	r1, fp
   13658:	bl	1cae4 <__assert_fail@plt+0xb8e0>
   1365c:	bic	r3, r8, #255	; 0xff
   13660:	str	r3, [sp, #40]	; 0x28
   13664:	ldr	r3, [sp, #44]	; 0x2c
   13668:	ldrd	r6, [sp]
   1366c:	ldr	r5, [sp, #132]	; 0x84
   13670:	ldrb	lr, [r3, #8]
   13674:	subs	r6, r6, #1
   13678:	mov	r3, #0
   1367c:	sbc	r7, r7, #0
   13680:	cmp	lr, r3
   13684:	mov	r2, r3
   13688:	mov	r1, #40	; 0x28
   1368c:	strd	r6, [sp]
   13690:	mov	ip, r0
   13694:	sub	r5, r5, ip
   13698:	str	ip, [sp, #132]	; 0x84
   1369c:	ldr	ip, [sp, #128]	; 0x80
   136a0:	add	r0, sp, #48	; 0x30
   136a4:	add	r5, r5, ip
   136a8:	bne	135a8 <__assert_fail@plt+0x23a4>
   136ac:	mov	r2, lr
   136b0:	mov	r1, #40	; 0x28
   136b4:	vldmia	r4!, {d0}
   136b8:	mov	r3, #0
   136bc:	add	r0, sp, #48	; 0x30
   136c0:	bl	16098 <__assert_fail@plt+0x4e94>
   136c4:	ldrd	sl, [sp, #8]
   136c8:	ldrd	r6, [sp, #32]
   136cc:	add	r2, sp, #48	; 0x30
   136d0:	mov	r1, r5
   136d4:	subs	r6, sl, r6
   136d8:	sbc	r7, fp, r7
   136dc:	ldr	r0, [pc, #16]	; 136f4 <__assert_fail@plt+0x24f0>
   136e0:	strd	r6, [sp, #8]
   136e4:	b	13630 <__assert_fail@plt+0x242c>
   136e8:	add	sp, sp, #92	; 0x5c
   136ec:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   136f0:	muleq	r2, r0, r1
   136f4:	andeq	sp, r1, ip, lsr r0
   136f8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   136fc:	mov	r7, #0
   13700:	mov	r5, #0
   13704:	sub	sp, sp, #92	; 0x5c
   13708:	mov	r6, r1
   1370c:	cmp	r5, r7
   13710:	cmpeq	r0, r1
   13714:	strd	r6, [sp, #24]
   13718:	ldr	r6, [sp, #132]	; 0x84
   1371c:	bls	138ac <__assert_fail@plt+0x26a8>
   13720:	mov	r4, r0
   13724:	asr	fp, r6, #31
   13728:	subs	r0, r0, #1
   1372c:	mov	sl, r6
   13730:	mul	r3, r0, fp
   13734:	sbc	r1, r5, #0
   13738:	strd	sl, [sp, #32]
   1373c:	umull	sl, fp, r0, r6
   13740:	mla	r3, r6, r1, r3
   13744:	strd	r4, [sp, #16]
   13748:	ldrd	r0, [sp, #16]
   1374c:	strd	sl, [sp, #8]
   13750:	add	r3, r3, fp
   13754:	ldr	fp, [pc, #344]	; 138b4 <__assert_fail@plt+0x26b0>
   13758:	mov	r4, r2
   1375c:	str	r3, [sp, #12]
   13760:	str	fp, [sp, #44]	; 0x2c
   13764:	strd	r0, [sp]
   13768:	b	1380c <__assert_fail@plt+0x2608>
   1376c:	ldrd	r6, [sp, #32]
   13770:	ldrb	lr, [r4, #7]
   13774:	ldrb	ip, [r4, #6]
   13778:	subs	r6, sl, r6
   1377c:	sbc	r7, fp, r7
   13780:	strd	r6, [sp, #8]
   13784:	ldr	r6, [sp, #40]	; 0x28
   13788:	orr	r8, lr, r6
   1378c:	ldrb	r6, [r4, #5]
   13790:	bic	lr, r8, #65280	; 0xff00
   13794:	orr	r8, lr, ip, lsl #8
   13798:	ldrb	lr, [r4, #4]
   1379c:	bic	ip, r8, #16711680	; 0xff0000
   137a0:	orr	r8, ip, r6, lsl #16
   137a4:	ldrb	r6, [r4, #3]
   137a8:	bic	ip, r8, #-16777216	; 0xff000000
   137ac:	orr	r8, ip, lr, lsl #24
   137b0:	bic	ip, r9, #255	; 0xff
   137b4:	ldrb	lr, [r4, #2]
   137b8:	orr	r9, r6, ip
   137bc:	ldrb	ip, [r4, #1]
   137c0:	mov	r6, ip
   137c4:	bic	ip, r9, #65280	; 0xff00
   137c8:	orr	r9, ip, lr, lsl #8
   137cc:	ldrb	ip, [r4], #8
   137d0:	bic	lr, r9, #16711680	; 0xff0000
   137d4:	orr	r9, lr, r6, lsl #16
   137d8:	bic	lr, r9, #-16777216	; 0xff000000
   137dc:	orr	r9, lr, ip, lsl #24
   137e0:	vmov	d0, r8, r9
   137e4:	bl	15c10 <__assert_fail@plt+0x4a0c>
   137e8:	ldr	r0, [pc, #200]	; 138b8 <__assert_fail@plt+0x26b4>
   137ec:	add	r2, sp, #48	; 0x30
   137f0:	mov	r1, r5
   137f4:	bl	1b2ec <__assert_fail@plt+0xa0e8>
   137f8:	ldrd	r2, [sp, #24]
   137fc:	ldrd	r0, [sp]
   13800:	cmp	r1, r3
   13804:	cmpeq	r0, r2
   13808:	bls	138ac <__assert_fail@plt+0x26a8>
   1380c:	ldrd	sl, [sp, #8]
   13810:	ldrd	r2, [sp, #16]
   13814:	mov	r0, sl
   13818:	mov	r1, fp
   1381c:	bl	1cae4 <__assert_fail@plt+0xb8e0>
   13820:	bic	r3, r8, #255	; 0xff
   13824:	str	r3, [sp, #40]	; 0x28
   13828:	ldr	r3, [sp, #44]	; 0x2c
   1382c:	ldrd	r6, [sp]
   13830:	ldr	r5, [sp, #132]	; 0x84
   13834:	ldrb	lr, [r3, #8]
   13838:	subs	r6, r6, #1
   1383c:	mov	r3, #0
   13840:	sbc	r7, r7, #0
   13844:	cmp	lr, r3
   13848:	mov	r2, r3
   1384c:	mov	r1, #40	; 0x28
   13850:	strd	r6, [sp]
   13854:	mov	ip, r0
   13858:	sub	r5, r5, ip
   1385c:	str	ip, [sp, #132]	; 0x84
   13860:	ldr	ip, [sp, #128]	; 0x80
   13864:	add	r0, sp, #48	; 0x30
   13868:	add	r5, r5, ip
   1386c:	bne	1376c <__assert_fail@plt+0x2568>
   13870:	mov	r2, lr
   13874:	mov	r1, #40	; 0x28
   13878:	vldmia	r4!, {d0}
   1387c:	mov	r3, #0
   13880:	add	r0, sp, #48	; 0x30
   13884:	bl	15c10 <__assert_fail@plt+0x4a0c>
   13888:	ldrd	sl, [sp, #8]
   1388c:	ldrd	r6, [sp, #32]
   13890:	add	r2, sp, #48	; 0x30
   13894:	mov	r1, r5
   13898:	subs	r6, sl, r6
   1389c:	sbc	r7, fp, r7
   138a0:	ldr	r0, [pc, #16]	; 138b8 <__assert_fail@plt+0x26b4>
   138a4:	strd	r6, [sp, #8]
   138a8:	b	137f4 <__assert_fail@plt+0x25f0>
   138ac:	add	sp, sp, #92	; 0x5c
   138b0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   138b4:	muleq	r2, r0, r1
   138b8:	andeq	sp, r1, ip, lsr r0
   138bc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   138c0:	mov	r7, #0
   138c4:	mov	r9, #0
   138c8:	sub	sp, sp, #84	; 0x54
   138cc:	mov	r8, r1
   138d0:	cmp	r7, r9
   138d4:	mov	r6, r0
   138d8:	cmpeq	r0, r8
   138dc:	strd	r6, [sp, #16]
   138e0:	mov	r1, r7
   138e4:	strd	r8, [sp, #24]
   138e8:	ldr	r7, [sp, #124]	; 0x7c
   138ec:	bls	13a04 <__assert_fail@plt+0x2800>
   138f0:	asr	r9, r7, #31
   138f4:	mov	fp, r9
   138f8:	mov	r8, r0
   138fc:	subs	r0, r0, #1
   13900:	mov	sl, r7
   13904:	mul	r3, r0, fp
   13908:	mov	r9, r1
   1390c:	sbc	r1, r1, #0
   13910:	strd	sl, [sp, #32]
   13914:	umull	sl, fp, r0, r7
   13918:	mla	r3, r7, r1, r3
   1391c:	mov	r0, r8
   13920:	mov	r1, r9
   13924:	mov	r6, r2
   13928:	add	fp, r3, fp
   1392c:	strd	r0, [sp]
   13930:	ldrd	r2, [sp, #16]
   13934:	mov	r0, sl
   13938:	mov	r1, fp
   1393c:	bl	1cae4 <__assert_fail@plt+0xb8e0>
   13940:	bic	r3, r4, #255	; 0xff
   13944:	str	r3, [sp, #40]	; 0x28
   13948:	ldr	r3, [pc, #276]	; 13a64 <__assert_fail@plt+0x2860>
   1394c:	ldrd	r8, [sp]
   13950:	mov	r1, #31
   13954:	ldrb	lr, [r3, #8]
   13958:	subs	r8, r8, #1
   1395c:	mov	r3, #0
   13960:	sbc	r9, r9, #0
   13964:	cmp	lr, r3
   13968:	mov	r2, r3
   1396c:	strd	r8, [sp]
   13970:	mov	ip, r0
   13974:	sub	r5, r7, ip
   13978:	mov	r7, ip
   1397c:	ldr	ip, [sp, #120]	; 0x78
   13980:	add	r0, sp, #48	; 0x30
   13984:	add	ip, r5, ip
   13988:	str	ip, [sp, #12]
   1398c:	beq	13a0c <__assert_fail@plt+0x2808>
   13990:	ldrb	r4, [r6, #3]
   13994:	ldrb	ip, [r6, #2]
   13998:	ldr	lr, [sp, #40]	; 0x28
   1399c:	str	r4, [sp, #44]	; 0x2c
   139a0:	ldrd	r4, [sp, #32]
   139a4:	subs	r4, sl, r4
   139a8:	mov	sl, r4
   139ac:	ldr	r4, [sp, #44]	; 0x2c
   139b0:	sbc	r5, fp, r5
   139b4:	orr	r4, r4, lr
   139b8:	ldrb	lr, [r6, #1]
   139bc:	bic	r4, r4, #65280	; 0xff00
   139c0:	orr	r4, r4, ip, lsl #8
   139c4:	ldrb	ip, [r6], #4
   139c8:	bic	r4, r4, #16711680	; 0xff0000
   139cc:	orr	r4, r4, lr, lsl #16
   139d0:	bic	r4, r4, #-16777216	; 0xff000000
   139d4:	orr	r4, r4, ip, lsl #24
   139d8:	mov	fp, r5
   139dc:	vmov	s0, r4
   139e0:	bl	15f50 <__assert_fail@plt+0x4d4c>
   139e4:	add	r2, sp, #48	; 0x30
   139e8:	ldr	r1, [sp, #12]
   139ec:	ldr	r0, [pc, #116]	; 13a68 <__assert_fail@plt+0x2864>
   139f0:	bl	1b2ec <__assert_fail@plt+0xa0e8>
   139f4:	ldrd	r2, [sp, #24]
   139f8:	cmp	r9, r3
   139fc:	cmpeq	r8, r2
   13a00:	bhi	13930 <__assert_fail@plt+0x272c>
   13a04:	add	sp, sp, #84	; 0x54
   13a08:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13a0c:	mov	r2, lr
   13a10:	mov	r3, #0
   13a14:	vldmia	r6!, {s0}
   13a18:	mov	r1, #31
   13a1c:	add	r0, sp, #48	; 0x30
   13a20:	bl	15f50 <__assert_fail@plt+0x4d4c>
   13a24:	ldrd	r8, [sp, #32]
   13a28:	add	r2, sp, #48	; 0x30
   13a2c:	ldr	r1, [sp, #12]
   13a30:	subs	r8, sl, r8
   13a34:	ldr	r0, [pc, #44]	; 13a68 <__assert_fail@plt+0x2864>
   13a38:	sbc	r9, fp, r9
   13a3c:	bl	1b2ec <__assert_fail@plt+0xa0e8>
   13a40:	ldrd	r2, [sp]
   13a44:	ldrd	r0, [sp, #24]
   13a48:	mov	sl, r8
   13a4c:	mov	fp, r9
   13a50:	cmp	r3, r1
   13a54:	cmpeq	r2, r0
   13a58:	bhi	13930 <__assert_fail@plt+0x272c>
   13a5c:	add	sp, sp, #84	; 0x54
   13a60:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13a64:	muleq	r2, r0, r1
   13a68:	andeq	sp, r1, ip, lsr r0
   13a6c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13a70:	subs	fp, r0, #0
   13a74:	sub	sp, sp, #20
   13a78:	beq	1412c <__assert_fail@plt+0x2f28>
   13a7c:	ldrb	r3, [fp]
   13a80:	cmp	r3, #0
   13a84:	beq	13cb0 <__assert_fail@plt+0x2aac>
   13a88:	ldr	r6, [pc, #1712]	; 14140 <__assert_fail@plt+0x2f3c>
   13a8c:	ldr	sl, [pc, #1712]	; 14144 <__assert_fail@plt+0x2f40>
   13a90:	mov	r7, fp
   13a94:	ldr	r3, [r6, #12]
   13a98:	str	fp, [sp, #8]
   13a9c:	ldr	r2, [r6, #16]
   13aa0:	cmp	r2, r3
   13aa4:	bls	13d5c <__assert_fail@plt+0x2b58>
   13aa8:	ldr	r4, [r6, #20]
   13aac:	adds	r4, r4, r3, lsl #5
   13ab0:	beq	140f0 <__assert_fail@plt+0x2eec>
   13ab4:	ldrb	r2, [r7]
   13ab8:	sub	r3, r2, #97	; 0x61
   13abc:	cmp	r3, #23
   13ac0:	ldrls	pc, [pc, r3, lsl #2]
   13ac4:	b	13cd4 <__assert_fail@plt+0x2ad0>
   13ac8:			; <UNDEFINED> instruction: 0x00013cbc
   13acc:	ldrdeq	r3, [r1], -r4
   13ad0:	andeq	r3, r1, r4, asr ip
   13ad4:	strdeq	r3, [r1], -ip
   13ad8:	ldrdeq	r3, [r1], -r4
   13adc:	andeq	r3, r1, r8, lsr #22
   13ae0:	ldrdeq	r3, [r1], -r4
   13ae4:	ldrdeq	r3, [r1], -r4
   13ae8:	ldrdeq	r3, [r1], -r4
   13aec:	ldrdeq	r3, [r1], -r4
   13af0:	ldrdeq	r3, [r1], -r4
   13af4:	ldrdeq	r3, [r1], -r4
   13af8:	ldrdeq	r3, [r1], -r4
   13afc:	ldrdeq	r3, [r1], -r4
   13b00:	strdeq	r3, [r1], -ip
   13b04:	ldrdeq	r3, [r1], -r4
   13b08:	ldrdeq	r3, [r1], -r4
   13b0c:	ldrdeq	r3, [r1], -r4
   13b10:	ldrdeq	r3, [r1], -r4
   13b14:	ldrdeq	r3, [r1], -r4
   13b18:	strdeq	r3, [r1], -ip
   13b1c:	ldrdeq	r3, [r1], -r4
   13b20:	ldrdeq	r3, [r1], -r4
   13b24:	strdeq	r3, [r1], -ip
   13b28:	ldrb	r2, [r7, #1]
   13b2c:	cmp	r2, #70	; 0x46
   13b30:	beq	13ffc <__assert_fail@plt+0x2df8>
   13b34:	cmp	r2, #76	; 0x4c
   13b38:	beq	13d1c <__assert_fail@plt+0x2b18>
   13b3c:	cmp	r2, #68	; 0x44
   13b40:	beq	13d1c <__assert_fail@plt+0x2b18>
   13b44:	sub	r2, r2, #48	; 0x30
   13b48:	cmp	r2, #9
   13b4c:	add	r1, r7, #1
   13b50:	bhi	140d4 <__assert_fail@plt+0x2ed0>
   13b54:	add	r0, r7, #2
   13b58:	mov	r9, #0
   13b5c:	b	13b74 <__assert_fail@plt+0x2970>
   13b60:	mov	r2, r3
   13b64:	mvn	r3, r3
   13b68:	umull	ip, r3, sl, r3
   13b6c:	cmp	r9, r3, lsr #3
   13b70:	bhi	14028 <__assert_fail@plt+0x2e24>
   13b74:	ldrb	r3, [r0]
   13b78:	add	r9, r9, r9, lsl #2
   13b7c:	mov	r5, r0
   13b80:	sub	r3, r3, #48	; 0x30
   13b84:	cmp	r3, #9
   13b88:	add	r9, r2, r9, lsl #1
   13b8c:	add	r0, r0, #1
   13b90:	bls	13b60 <__assert_fail@plt+0x295c>
   13b94:	cmp	r1, r5
   13b98:	ldreq	r8, [r6, #92]	; 0x5c
   13b9c:	beq	13d24 <__assert_fail@plt+0x2b20>
   13ba0:	cmp	r9, #8
   13ba4:	bhi	13bb8 <__assert_fail@plt+0x29b4>
   13ba8:	add	r3, r6, r9, lsl #2
   13bac:	ldr	r8, [r3, #60]	; 0x3c
   13bb0:	cmp	r8, #0
   13bb4:	bne	13d24 <__assert_fail@plt+0x2b20>
   13bb8:	ldr	fp, [sp, #8]
   13bbc:	ldr	r1, [pc, #1412]	; 14148 <__assert_fail@plt+0x2f44>
   13bc0:	mov	r2, #5
   13bc4:	mov	r0, #0
   13bc8:	bl	10fc4 <dcgettext@plt>
   13bcc:	mov	r4, r0
   13bd0:	mov	r0, fp
   13bd4:	bl	1a0a8 <__assert_fail@plt+0x8ea4>
   13bd8:	mov	r1, #0
   13bdc:	mov	r2, r4
   13be0:	str	r9, [sp]
   13be4:	mov	r3, r0
   13be8:	mov	r0, r1
   13bec:	bl	1103c <error@plt>
   13bf0:	mov	r0, #0
   13bf4:	add	sp, sp, #20
   13bf8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13bfc:	ldrb	r1, [r7, #1]
   13c00:	sub	r3, r1, #67	; 0x43
   13c04:	cmp	r3, #16
   13c08:	ldrls	pc, [pc, r3, lsl #2]
   13c0c:	b	13f7c <__assert_fail@plt+0x2d78>
   13c10:	strdeq	r3, [r1], -ip
   13c14:	andeq	r3, r1, ip, ror pc
   13c18:	andeq	r3, r1, ip, ror pc
   13c1c:	andeq	r3, r1, ip, ror pc
   13c20:	andeq	r3, r1, ip, ror pc
   13c24:	andeq	r3, r1, ip, ror pc
   13c28:	andeq	r3, r1, ip, ror sp
   13c2c:	andeq	r3, r1, ip, ror pc
   13c30:	andeq	r3, r1, ip, ror pc
   13c34:	andeq	r3, r1, ip, ror sp
   13c38:	andeq	r3, r1, ip, ror pc
   13c3c:	andeq	r3, r1, ip, ror pc
   13c40:	andeq	r3, r1, ip, ror pc
   13c44:	andeq	r3, r1, ip, ror pc
   13c48:	andeq	r3, r1, ip, ror pc
   13c4c:	andeq	r3, r1, ip, ror pc
   13c50:	andeq	r3, r1, ip, ror #27
   13c54:	ldr	r3, [pc, #1264]	; 1414c <__assert_fail@plt+0x2f48>
   13c58:	add	r5, r7, #1
   13c5c:	mov	r9, #3
   13c60:	mov	r2, #6
   13c64:	mov	r8, #1
   13c68:	stm	r4, {r2, r8}
   13c6c:	str	r3, [r4, #8]
   13c70:	str	r9, [r4, #24]
   13c74:	ldrb	r3, [r5]
   13c78:	cmp	r3, #122	; 0x7a
   13c7c:	addeq	r5, r5, #1
   13c80:	moveq	r3, #1
   13c84:	movne	r3, #0
   13c88:	cmp	r7, r5
   13c8c:	strb	r3, [r4, #21]
   13c90:	beq	14104 <__assert_fail@plt+0x2f00>
   13c94:	ldrb	r2, [r5]
   13c98:	ldr	r4, [r6, #12]
   13c9c:	mov	r7, r5
   13ca0:	add	r3, r4, #1
   13ca4:	cmp	r2, #0
   13ca8:	str	r3, [r6, #12]
   13cac:	bne	13a9c <__assert_fail@plt+0x2898>
   13cb0:	mov	r0, #1
   13cb4:	add	sp, sp, #20
   13cb8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13cbc:	add	r5, r7, #1
   13cc0:	mov	r9, #3
   13cc4:	ldr	r3, [pc, #1156]	; 14150 <__assert_fail@plt+0x2f4c>
   13cc8:	mov	r2, #5
   13ccc:	mov	r8, #1
   13cd0:	b	13c68 <__assert_fail@plt+0x2a64>
   13cd4:	mov	r2, #5
   13cd8:	ldr	r1, [pc, #1140]	; 14154 <__assert_fail@plt+0x2f50>
   13cdc:	mov	r0, #0
   13ce0:	ldr	fp, [sp, #8]
   13ce4:	bl	10fc4 <dcgettext@plt>
   13ce8:	ldrb	r5, [r7]
   13cec:	mov	r4, r0
   13cf0:	mov	r0, fp
   13cf4:	bl	1a0a8 <__assert_fail@plt+0x8ea4>
   13cf8:	mov	r1, #0
   13cfc:	mov	r3, r5
   13d00:	mov	r2, r4
   13d04:	str	r0, [sp]
   13d08:	mov	r0, r1
   13d0c:	bl	1103c <error@plt>
   13d10:	mov	r0, #0
   13d14:	add	sp, sp, #20
   13d18:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13d1c:	ldr	r8, [r6, #92]	; 0x5c
   13d20:	add	r5, r7, #2
   13d24:	bl	111a4 <localeconv@plt>
   13d28:	ldr	r0, [r0]
   13d2c:	ldrb	r3, [r0]
   13d30:	cmp	r3, #0
   13d34:	moveq	r0, #1
   13d38:	beq	13d40 <__assert_fail@plt+0x2b3c>
   13d3c:	bl	110c0 <strlen@plt>
   13d40:	cmp	r8, #7
   13d44:	beq	14008 <__assert_fail@plt+0x2e04>
   13d48:	cmp	r8, #8
   13d4c:	beq	14018 <__assert_fail@plt+0x2e14>
   13d50:	cmp	r8, #6
   13d54:	beq	13f6c <__assert_fail@plt+0x2d68>
   13d58:	bl	111ec <abort@plt>
   13d5c:	mov	r2, #32
   13d60:	ldr	r1, [pc, #1008]	; 14158 <__assert_fail@plt+0x2f54>
   13d64:	ldr	r0, [r6, #20]
   13d68:	bl	1ae14 <__assert_fail@plt+0x9c10>
   13d6c:	ldr	r3, [r6, #12]
   13d70:	mov	r4, r0
   13d74:	str	r0, [r6, #20]
   13d78:	b	13aac <__assert_fail@plt+0x28a8>
   13d7c:	ldr	r8, [r6, #40]	; 0x28
   13d80:	add	r5, r7, #2
   13d84:	mov	r9, #4
   13d88:	sub	r2, r2, #100	; 0x64
   13d8c:	cmp	r2, #20
   13d90:	ldrls	pc, [pc, r2, lsl #2]
   13d94:	b	13d58 <__assert_fail@plt+0x2b54>
   13d98:	andeq	r3, r1, ip, ror #29
   13d9c:	andeq	r3, r1, r8, asr sp
   13da0:	andeq	r3, r1, r8, asr sp
   13da4:	andeq	r3, r1, r8, asr sp
   13da8:	andeq	r3, r1, r8, asr sp
   13dac:	andeq	r3, r1, r8, asr sp
   13db0:	andeq	r3, r1, r8, asr sp
   13db4:	andeq	r3, r1, r8, asr sp
   13db8:	andeq	r3, r1, r8, asr sp
   13dbc:	andeq	r3, r1, r8, asr sp
   13dc0:	andeq	r3, r1, r8, asr sp
   13dc4:	andeq	r3, r1, r0, lsr #29
   13dc8:	andeq	r3, r1, r8, asr sp
   13dcc:	andeq	r3, r1, r8, asr sp
   13dd0:	andeq	r3, r1, r8, asr sp
   13dd4:	andeq	r3, r1, r8, asr sp
   13dd8:	andeq	r3, r1, r8, asr sp
   13ddc:	andeq	r3, r1, r8, asr lr
   13de0:	andeq	r3, r1, r8, asr sp
   13de4:	andeq	r3, r1, r8, asr sp
   13de8:	andeq	r3, r1, ip, lsl #28
   13dec:	add	r5, r7, #2
   13df0:	ldr	r8, [r6, #32]
   13df4:	mov	r9, #2
   13df8:	b	13d88 <__assert_fail@plt+0x2b84>
   13dfc:	add	r5, r7, #2
   13e00:	ldr	r8, [r6, #28]
   13e04:	mov	r9, #1
   13e08:	b	13d88 <__assert_fail@plt+0x2b84>
   13e0c:	ldr	r3, [pc, #840]	; 1415c <__assert_fail@plt+0x2f58>
   13e10:	cmp	r8, #5
   13e14:	add	r9, r3, r9, lsl #2
   13e18:	add	fp, r4, #12
   13e1c:	ldr	r9, [r9, #380]	; 0x17c
   13e20:	beq	140c0 <__assert_fail@plt+0x2ebc>
   13e24:	ldr	r2, [pc, #820]	; 14160 <__assert_fail@plt+0x2f5c>
   13e28:	cmp	r8, #4
   13e2c:	ldr	r3, [pc, #816]	; 14164 <__assert_fail@plt+0x2f60>
   13e30:	moveq	r3, r2
   13e34:	str	r3, [sp, #4]
   13e38:	mov	r2, #9
   13e3c:	str	r9, [sp]
   13e40:	ldr	r3, [pc, #800]	; 14168 <__assert_fail@plt+0x2f64>
   13e44:	mov	r1, #1
   13e48:	mov	r0, fp
   13e4c:	bl	110e4 <__sprintf_chk@plt>
   13e50:	mov	r2, #3
   13e54:	b	13f30 <__assert_fail@plt+0x2d2c>
   13e58:	ldr	r3, [pc, #764]	; 1415c <__assert_fail@plt+0x2f58>
   13e5c:	cmp	r8, #5
   13e60:	add	r9, r3, r9, lsl #2
   13e64:	add	fp, r4, #12
   13e68:	ldr	r9, [r9, #312]	; 0x138
   13e6c:	beq	140b8 <__assert_fail@plt+0x2eb4>
   13e70:	ldr	r2, [pc, #756]	; 1416c <__assert_fail@plt+0x2f68>
   13e74:	cmp	r8, #4
   13e78:	ldr	r3, [pc, #752]	; 14170 <__assert_fail@plt+0x2f6c>
   13e7c:	moveq	r3, r2
   13e80:	str	r3, [sp]
   13e84:	mov	r2, #9
   13e88:	ldr	r3, [pc, #740]	; 14174 <__assert_fail@plt+0x2f70>
   13e8c:	mov	r1, #1
   13e90:	mov	r0, fp
   13e94:	bl	110e4 <__sprintf_chk@plt>
   13e98:	mov	r2, #1
   13e9c:	b	13f30 <__assert_fail@plt+0x2d2c>
   13ea0:	ldr	r3, [pc, #692]	; 1415c <__assert_fail@plt+0x2f58>
   13ea4:	cmp	r8, #5
   13ea8:	add	r9, r3, r9, lsl #2
   13eac:	add	fp, r4, #12
   13eb0:	ldr	r9, [r9, #244]	; 0xf4
   13eb4:	beq	140b0 <__assert_fail@plt+0x2eac>
   13eb8:	ldr	r2, [pc, #696]	; 14178 <__assert_fail@plt+0x2f74>
   13ebc:	cmp	r8, #4
   13ec0:	ldr	r3, [pc, #692]	; 1417c <__assert_fail@plt+0x2f78>
   13ec4:	moveq	r3, r2
   13ec8:	str	r3, [sp, #4]
   13ecc:	mov	r2, #9
   13ed0:	str	r9, [sp]
   13ed4:	ldr	r3, [pc, #652]	; 14168 <__assert_fail@plt+0x2f64>
   13ed8:	mov	r1, #1
   13edc:	mov	r0, fp
   13ee0:	bl	110e4 <__sprintf_chk@plt>
   13ee4:	mov	r2, #2
   13ee8:	b	13f30 <__assert_fail@plt+0x2d2c>
   13eec:	ldr	r3, [pc, #616]	; 1415c <__assert_fail@plt+0x2f58>
   13ef0:	cmp	r8, #5
   13ef4:	add	r9, r3, r9, lsl #2
   13ef8:	add	fp, r4, #12
   13efc:	ldr	r9, [r9, #176]	; 0xb0
   13f00:	beq	140a8 <__assert_fail@plt+0x2ea4>
   13f04:	ldr	r2, [pc, #628]	; 14180 <__assert_fail@plt+0x2f7c>
   13f08:	cmp	r8, #4
   13f0c:	ldr	r3, [pc, #624]	; 14184 <__assert_fail@plt+0x2f80>
   13f10:	moveq	r3, r2
   13f14:	str	r3, [sp]
   13f18:	mov	r2, #9
   13f1c:	ldr	r3, [pc, #592]	; 14174 <__assert_fail@plt+0x2f70>
   13f20:	mov	r1, #1
   13f24:	mov	r0, fp
   13f28:	bl	110e4 <__sprintf_chk@plt>
   13f2c:	mov	r2, #0
   13f30:	mov	r0, fp
   13f34:	str	r2, [sp, #12]
   13f38:	bl	110c0 <strlen@plt>
   13f3c:	ldr	r2, [sp, #12]
   13f40:	cmp	r0, #8
   13f44:	bhi	14118 <__assert_fail@plt+0x2f14>
   13f48:	sub	r3, r8, #1
   13f4c:	cmp	r3, #4
   13f50:	ldrls	pc, [pc, r3, lsl #2]
   13f54:	b	13d58 <__assert_fail@plt+0x2b54>
   13f58:	muleq	r1, r4, r0
   13f5c:	andeq	r4, r1, r0, lsl #1
   13f60:	andeq	r4, r1, r8, ror r0
   13f64:	andeq	r4, r1, r0, ror r0
   13f68:	andeq	r4, r1, r8, rrx
   13f6c:	add	r9, r0, #14
   13f70:	ldr	r3, [pc, #528]	; 14188 <__assert_fail@plt+0x2f84>
   13f74:	mov	r2, #4
   13f78:	b	13c68 <__assert_fail@plt+0x2a64>
   13f7c:	sub	r1, r1, #48	; 0x30
   13f80:	cmp	r1, #9
   13f84:	add	r0, r7, #1
   13f88:	bhi	140e0 <__assert_fail@plt+0x2edc>
   13f8c:	add	ip, r7, #2
   13f90:	mov	r9, #0
   13f94:	b	13fac <__assert_fail@plt+0x2da8>
   13f98:	mov	r1, r3
   13f9c:	mvn	r3, r3
   13fa0:	umull	lr, r3, sl, r3
   13fa4:	cmp	r9, r3, lsr #3
   13fa8:	bhi	14028 <__assert_fail@plt+0x2e24>
   13fac:	ldrb	r3, [ip]
   13fb0:	add	r9, r9, r9, lsl #2
   13fb4:	mov	r5, ip
   13fb8:	sub	r3, r3, #48	; 0x30
   13fbc:	cmp	r3, #9
   13fc0:	add	r9, r1, r9, lsl #1
   13fc4:	add	ip, ip, #1
   13fc8:	bls	13f98 <__assert_fail@plt+0x2d94>
   13fcc:	cmp	r0, r5
   13fd0:	beq	140c8 <__assert_fail@plt+0x2ec4>
   13fd4:	cmp	r9, #8
   13fd8:	bhi	13fec <__assert_fail@plt+0x2de8>
   13fdc:	add	r3, r6, r9, lsl #2
   13fe0:	ldr	r8, [r3, #24]
   13fe4:	cmp	r8, #0
   13fe8:	bne	13d88 <__assert_fail@plt+0x2b84>
   13fec:	ldr	fp, [sp, #8]
   13ff0:	mov	r2, #5
   13ff4:	ldr	r1, [pc, #400]	; 1418c <__assert_fail@plt+0x2f88>
   13ff8:	b	13bc4 <__assert_fail@plt+0x29c0>
   13ffc:	add	r5, r7, #2
   14000:	ldr	r8, [r6, #76]	; 0x4c
   14004:	b	13d24 <__assert_fail@plt+0x2b20>
   14008:	add	r9, r0, #23
   1400c:	ldr	r3, [pc, #380]	; 14190 <__assert_fail@plt+0x2f8c>
   14010:	mov	r2, #4
   14014:	b	13c68 <__assert_fail@plt+0x2a64>
   14018:	add	r9, r0, #23
   1401c:	ldr	r3, [pc, #368]	; 14194 <__assert_fail@plt+0x2f90>
   14020:	mov	r2, #4
   14024:	b	13c68 <__assert_fail@plt+0x2a64>
   14028:	mov	r2, #5
   1402c:	ldr	r1, [pc, #356]	; 14198 <__assert_fail@plt+0x2f94>
   14030:	mov	r0, #0
   14034:	ldr	fp, [sp, #8]
   14038:	bl	10fc4 <dcgettext@plt>
   1403c:	mov	r4, r0
   14040:	mov	r0, fp
   14044:	bl	1a0a8 <__assert_fail@plt+0x8ea4>
   14048:	mov	r1, #0
   1404c:	mov	r2, r4
   14050:	mov	r3, r0
   14054:	mov	r0, r1
   14058:	bl	1103c <error@plt>
   1405c:	mov	r0, #0
   14060:	add	sp, sp, #20
   14064:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14068:	ldr	r3, [pc, #300]	; 1419c <__assert_fail@plt+0x2f98>
   1406c:	b	13c68 <__assert_fail@plt+0x2a64>
   14070:	ldr	r3, [pc, #296]	; 141a0 <__assert_fail@plt+0x2f9c>
   14074:	b	13c68 <__assert_fail@plt+0x2a64>
   14078:	ldr	r3, [pc, #292]	; 141a4 <__assert_fail@plt+0x2fa0>
   1407c:	b	13c68 <__assert_fail@plt+0x2a64>
   14080:	ldr	r1, [pc, #288]	; 141a8 <__assert_fail@plt+0x2fa4>
   14084:	cmp	r2, #0
   14088:	ldr	r3, [pc, #284]	; 141ac <__assert_fail@plt+0x2fa8>
   1408c:	moveq	r3, r1
   14090:	b	13c68 <__assert_fail@plt+0x2a64>
   14094:	ldr	r1, [pc, #276]	; 141b0 <__assert_fail@plt+0x2fac>
   14098:	cmp	r2, #0
   1409c:	ldr	r3, [pc, #272]	; 141b4 <__assert_fail@plt+0x2fb0>
   140a0:	moveq	r3, r1
   140a4:	b	13c68 <__assert_fail@plt+0x2a64>
   140a8:	ldr	r3, [pc, #264]	; 141b8 <__assert_fail@plt+0x2fb4>
   140ac:	b	13f14 <__assert_fail@plt+0x2d10>
   140b0:	ldr	r3, [pc, #260]	; 141bc <__assert_fail@plt+0x2fb8>
   140b4:	b	13ec8 <__assert_fail@plt+0x2cc4>
   140b8:	ldr	r3, [pc, #256]	; 141c0 <__assert_fail@plt+0x2fbc>
   140bc:	b	13e80 <__assert_fail@plt+0x2c7c>
   140c0:	ldr	r3, [pc, #252]	; 141c4 <__assert_fail@plt+0x2fc0>
   140c4:	b	13e34 <__assert_fail@plt+0x2c30>
   140c8:	ldr	r8, [r6, #40]	; 0x28
   140cc:	mov	r9, #4
   140d0:	b	13d88 <__assert_fail@plt+0x2b84>
   140d4:	ldr	r8, [r6, #92]	; 0x5c
   140d8:	mov	r5, r1
   140dc:	b	13d24 <__assert_fail@plt+0x2b20>
   140e0:	ldr	r8, [r6, #40]	; 0x28
   140e4:	mov	r5, r0
   140e8:	mov	r9, #4
   140ec:	b	13d88 <__assert_fail@plt+0x2b84>
   140f0:	ldr	r3, [pc, #208]	; 141c8 <__assert_fail@plt+0x2fc4>
   140f4:	mov	r2, #648	; 0x288
   140f8:	ldr	r1, [pc, #204]	; 141cc <__assert_fail@plt+0x2fc8>
   140fc:	ldr	r0, [pc, #204]	; 141d0 <__assert_fail@plt+0x2fcc>
   14100:	bl	11204 <__assert_fail@plt>
   14104:	ldr	r3, [pc, #200]	; 141d4 <__assert_fail@plt+0x2fd0>
   14108:	ldr	r2, [pc, #200]	; 141d8 <__assert_fail@plt+0x2fd4>
   1410c:	ldr	r1, [pc, #184]	; 141cc <__assert_fail@plt+0x2fc8>
   14110:	ldr	r0, [pc, #196]	; 141dc <__assert_fail@plt+0x2fd8>
   14114:	bl	11204 <__assert_fail@plt>
   14118:	ldr	r3, [pc, #168]	; 141c8 <__assert_fail@plt+0x2fc4>
   1411c:	ldr	r2, [pc, #188]	; 141e0 <__assert_fail@plt+0x2fdc>
   14120:	ldr	r1, [pc, #164]	; 141cc <__assert_fail@plt+0x2fc8>
   14124:	ldr	r0, [pc, #184]	; 141e4 <__assert_fail@plt+0x2fe0>
   14128:	bl	11204 <__assert_fail@plt>
   1412c:	ldr	r3, [pc, #160]	; 141d4 <__assert_fail@plt+0x2fd0>
   14130:	ldr	r2, [pc, #176]	; 141e8 <__assert_fail@plt+0x2fe4>
   14134:	ldr	r1, [pc, #144]	; 141cc <__assert_fail@plt+0x2fc8>
   14138:	ldr	r0, [pc, #172]	; 141ec <__assert_fail@plt+0x2fe8>
   1413c:	bl	11204 <__assert_fail@plt>
   14140:	muleq	r2, r0, r1
   14144:	stclgt	12, cr12, [ip], {205}	; 0xcd
   14148:	andeq	sp, r1, ip, lsr #2
   1414c:	strdeq	r4, [r1], -r0
   14150:	andeq	r2, r1, r4, lsr ip
   14154:	andeq	sp, r1, r0, lsl #3
   14158:	andeq	pc, r2, r0, lsr #3
   1415c:	andeq	ip, r1, r0, ror #25
   14160:	andeq	sp, r1, r8, rrx
   14164:	andeq	lr, r1, r4, lsl #6
   14168:	andeq	sp, r1, ip, ror #1
   1416c:	andeq	sp, r1, ip, asr r0
   14170:	andeq	sp, r1, r0, rrx
   14174:	andeq	sp, r1, r4, ror #1
   14178:	andeq	sp, r1, r0, asr r0
   1417c:	andeq	sp, r1, r4, asr r0
   14180:	andeq	sp, r1, r4, asr #32
   14184:	andeq	sp, r1, r8, asr #32
   14188:			; <UNDEFINED> instruction: 0x000138bc
   1418c:	muleq	r1, r4, r0
   14190:	strdeq	r3, [r1], -r8
   14194:	andeq	r3, r1, r4, lsr r5
   14198:			; <UNDEFINED> instruction: 0x0001d1b8
   1419c:	andeq	r2, r1, r8, asr #26
   141a0:			; <UNDEFINED> instruction: 0x00012eb4
   141a4:	strdeq	r2, [r1], -r8
   141a8:	andeq	r3, r1, ip, ror #4
   141ac:	andeq	r3, r1, ip, lsr r1
   141b0:	andeq	r3, r1, r8, ror #8
   141b4:	muleq	r1, ip, r3
   141b8:	andeq	sp, r1, r0, asr #32
   141bc:	andeq	sp, r1, ip, asr #32
   141c0:	andeq	sp, r1, r8, asr r0
   141c4:	andeq	sp, r1, r4, rrx
   141c8:	andeq	ip, r1, ip, ror sp
   141cc:	andeq	sp, r1, ip, rrx
   141d0:	andeq	sp, r1, r4, lsl #1
   141d4:	andeq	ip, r1, r4, ror #26
   141d8:	andeq	r0, r0, r5, ror #7
   141dc:	andeq	sp, r1, ip, lsr #3
   141e0:	andeq	r0, r0, fp, ror #5
   141e4:	strdeq	sp, [r1], -r8
   141e8:	ldrdeq	r0, [r0], -r9
   141ec:	andeq	sp, r1, r8, ror r0
   141f0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   141f4:	mov	r5, #0
   141f8:	mov	r7, r5
   141fc:	mov	r5, #0
   14200:	sub	sp, sp, #52	; 0x34
   14204:	mov	r4, r1
   14208:	cmp	r7, r5
   1420c:	cmpeq	r0, r1
   14210:	strd	r4, [sp, #24]
   14214:	ldr	r4, [sp, #92]	; 0x5c
   14218:	bls	14308 <__assert_fail@plt+0x3104>
   1421c:	mov	r8, r4
   14220:	asr	r9, r4, #31
   14224:	mov	r6, r0
   14228:	strd	r8, [sp, #16]
   1422c:	ldr	r3, [sp, #20]
   14230:	subs	r8, r0, #1
   14234:	sbc	r9, r7, #0
   14238:	mul	r3, r8, r3
   1423c:	strd	r6, [sp, #8]
   14240:	mov	r7, r9
   14244:	umull	r8, r9, r8, r4
   14248:	mla	r3, r4, r7, r3
   1424c:	ldrd	r6, [sp, #8]
   14250:	add	r9, r3, r9
   14254:	add	sl, r2, r0
   14258:	str	sl, [sp, #32]
   1425c:	ldrd	r2, [sp, #8]
   14260:	mov	r0, r8
   14264:	mov	r1, r9
   14268:	bl	1cae4 <__assert_fail@plt+0xb8e0>
   1426c:	ldr	r2, [sp, #32]
   14270:	rsb	r3, r6, #0
   14274:	ldrb	r3, [r2, r3]
   14278:	mov	r5, r0
   1427c:	cmp	r3, #13
   14280:	ldrls	pc, [pc, r3, lsl #2]
   14284:	b	14348 <__assert_fail@plt+0x3144>
   14288:	andeq	r4, r1, r0, lsl r3
   1428c:	andeq	r4, r1, r8, asr #6
   14290:	andeq	r4, r1, r8, asr #6
   14294:	andeq	r4, r1, r8, asr #6
   14298:	andeq	r4, r1, r8, asr #6
   1429c:	andeq	r4, r1, r8, asr #6
   142a0:	andeq	r4, r1, r8, asr #6
   142a4:	andeq	r4, r1, r0, asr #5
   142a8:	andeq	r4, r1, r0, asr #6
   142ac:	andeq	r4, r1, r8, lsr r3
   142b0:	andeq	r4, r1, r0, lsr r3
   142b4:	andeq	r4, r1, r8, lsr #6
   142b8:	andeq	r4, r1, r0, lsr #6
   142bc:	andeq	r4, r1, r8, lsl r3
   142c0:	ldr	r2, [pc, #196]	; 1438c <__assert_fail@plt+0x3188>
   142c4:	ldrd	sl, [sp, #16]
   142c8:	ldr	r3, [sp, #88]	; 0x58
   142cc:	subs	r6, r6, #1
   142d0:	sub	r1, r4, r5
   142d4:	add	r1, r1, r3
   142d8:	sbc	r7, r7, #0
   142dc:	ldr	r0, [pc, #172]	; 14390 <__assert_fail@plt+0x318c>
   142e0:	subs	sl, r8, sl
   142e4:	sbc	fp, r9, fp
   142e8:	bl	1b2ec <__assert_fail@plt+0xa0e8>
   142ec:	ldrd	r2, [sp, #24]
   142f0:	mov	r8, sl
   142f4:	mov	r9, fp
   142f8:	cmp	r3, r7
   142fc:	cmpeq	r2, r6
   14300:	mov	r4, r5
   14304:	bcc	1425c <__assert_fail@plt+0x3058>
   14308:	add	sp, sp, #52	; 0x34
   1430c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14310:	ldr	r2, [pc, #124]	; 14394 <__assert_fail@plt+0x3190>
   14314:	b	142c4 <__assert_fail@plt+0x30c0>
   14318:	ldr	r2, [pc, #120]	; 14398 <__assert_fail@plt+0x3194>
   1431c:	b	142c4 <__assert_fail@plt+0x30c0>
   14320:	ldr	r2, [pc, #116]	; 1439c <__assert_fail@plt+0x3198>
   14324:	b	142c4 <__assert_fail@plt+0x30c0>
   14328:	ldr	r2, [pc, #112]	; 143a0 <__assert_fail@plt+0x319c>
   1432c:	b	142c4 <__assert_fail@plt+0x30c0>
   14330:	ldr	r2, [pc, #108]	; 143a4 <__assert_fail@plt+0x31a0>
   14334:	b	142c4 <__assert_fail@plt+0x30c0>
   14338:	ldr	r2, [pc, #104]	; 143a8 <__assert_fail@plt+0x31a4>
   1433c:	b	142c4 <__assert_fail@plt+0x30c0>
   14340:	ldr	r2, [pc, #100]	; 143ac <__assert_fail@plt+0x31a8>
   14344:	b	142c4 <__assert_fail@plt+0x30c0>
   14348:	str	r3, [sp, #36]	; 0x24
   1434c:	bl	110a8 <__ctype_b_loc@plt>
   14350:	ldr	r3, [sp, #36]	; 0x24
   14354:	mov	r2, #4
   14358:	mov	r1, #1
   1435c:	lsl	ip, r3, #1
   14360:	ldr	lr, [r0]
   14364:	add	r0, sp, #44	; 0x2c
   14368:	ldrh	ip, [lr, ip]
   1436c:	str	r3, [sp]
   14370:	ldr	r3, [pc, #56]	; 143b0 <__assert_fail@plt+0x31ac>
   14374:	tst	ip, #16384	; 0x4000
   14378:	ldr	ip, [pc, #52]	; 143b4 <__assert_fail@plt+0x31b0>
   1437c:	movne	r3, ip
   14380:	bl	110e4 <__sprintf_chk@plt>
   14384:	add	r2, sp, #44	; 0x2c
   14388:	b	142c4 <__assert_fail@plt+0x30c0>
   1438c:	andeq	sp, r1, r0, ror #3
   14390:	andeq	sp, r1, ip, lsr r0
   14394:	ldrdeq	sp, [r1], -ip
   14398:	strdeq	sp, [r1], -r0
   1439c:	andeq	sp, r1, r8, ror #3
   143a0:	strdeq	sp, [r1], -r8
   143a4:	andeq	sp, r1, ip, ror #3
   143a8:	strdeq	sp, [r1], -r4
   143ac:	andeq	sp, r1, r4, ror #3
   143b0:	ldrdeq	sp, [r1], -r4
   143b4:	ldrdeq	sp, [r1], -r0
   143b8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   143bc:	mov	sl, #1
   143c0:	ldr	r4, [pc, #260]	; 144cc <__assert_fail@plt+0x32c8>
   143c4:	ldr	r6, [pc, #260]	; 144d0 <__assert_fail@plt+0x32cc>
   143c8:	ldr	r9, [pc, #260]	; 144d4 <__assert_fail@plt+0x32d0>
   143cc:	ldr	r7, [pc, #260]	; 144d8 <__assert_fail@plt+0x32d4>
   143d0:	ldr	r8, [pc, #260]	; 144dc <__assert_fail@plt+0x32d8>
   143d4:	sub	sp, sp, #12
   143d8:	mov	fp, #3
   143dc:	ldr	r3, [r4, #96]	; 0x60
   143e0:	mov	r1, r6
   143e4:	add	r2, r3, #4
   143e8:	ldr	r5, [r3]
   143ec:	subs	r0, r5, #0
   143f0:	str	r5, [r4, #100]	; 0x64
   143f4:	beq	14468 <__assert_fail@plt+0x3264>
   143f8:	str	r2, [r4, #96]	; 0x60
   143fc:	bl	10f34 <strcmp@plt>
   14400:	mov	r2, #5
   14404:	mov	r1, r7
   14408:	cmp	r0, #0
   1440c:	bne	14434 <__assert_fail@plt+0x3230>
   14410:	bl	10fc4 <dcgettext@plt>
   14414:	ldr	r5, [r8]
   14418:	mov	r3, #1
   1441c:	str	r5, [r4, #104]	; 0x68
   14420:	strb	r3, [r4, #108]	; 0x6c
   14424:	str	r0, [r4, #100]	; 0x64
   14428:	cmp	r5, #0
   1442c:	beq	143dc <__assert_fail@plt+0x31d8>
   14430:	b	14450 <__assert_fail@plt+0x324c>
   14434:	mov	r0, r5
   14438:	mov	r1, r9
   1443c:	bl	111bc <fopen64@plt>
   14440:	cmp	r0, #0
   14444:	mov	r5, r0
   14448:	str	r0, [r4, #104]	; 0x68
   1444c:	beq	14474 <__assert_fail@plt+0x3270>
   14450:	ldrb	r3, [r4, #109]	; 0x6d
   14454:	cmp	r3, #0
   14458:	beq	14468 <__assert_fail@plt+0x3264>
   1445c:	ldrb	r3, [r4, #110]	; 0x6e
   14460:	cmp	r3, #0
   14464:	beq	144b0 <__assert_fail@plt+0x32ac>
   14468:	mov	r0, sl
   1446c:	add	sp, sp, #12
   14470:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14474:	bl	110d8 <__errno_location@plt>
   14478:	ldr	r2, [r4, #100]	; 0x64
   1447c:	mov	r1, fp
   14480:	mov	sl, #0
   14484:	ldr	r3, [r0]
   14488:	mov	r0, r5
   1448c:	str	r3, [sp, #4]
   14490:	bl	191b4 <__assert_fail@plt+0x7fb0>
   14494:	ldr	r2, [pc, #68]	; 144e0 <__assert_fail@plt+0x32dc>
   14498:	ldr	r1, [sp, #4]
   1449c:	mov	r3, r0
   144a0:	mov	r0, r5
   144a4:	bl	1103c <error@plt>
   144a8:	ldr	r5, [r4, #104]	; 0x68
   144ac:	b	14428 <__assert_fail@plt+0x3224>
   144b0:	mov	r0, r5
   144b4:	mov	r1, r3
   144b8:	mov	r2, #2
   144bc:	bl	110fc <setvbuf@plt>
   144c0:	mov	r0, sl
   144c4:	add	sp, sp, #12
   144c8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   144cc:	muleq	r2, r0, r1
   144d0:	strdeq	sp, [r1], -ip
   144d4:	andeq	sp, r1, r0, lsl r2
   144d8:	andeq	sp, r1, r0, lsl #4
   144dc:	andeq	pc, r2, r0, lsl #3
   144e0:	andeq	lr, r1, r8, ror #7
   144e4:	push	{r4, r5, r6, lr}
   144e8:	ldr	r5, [pc, #224]	; 145d0 <__assert_fail@plt+0x33cc>
   144ec:	ldr	r6, [r5, #104]	; 0x68
   144f0:	cmp	r6, #0
   144f4:	moveq	r0, #1
   144f8:	beq	14540 <__assert_fail@plt+0x333c>
   144fc:	ldr	r3, [r5, #96]	; 0x60
   14500:	ldr	r2, [r6]
   14504:	mov	r4, r0
   14508:	tst	r2, #32
   1450c:	ldr	r1, [pc, #192]	; 145d4 <__assert_fail@plt+0x33d0>
   14510:	ldr	r0, [r3, #-4]
   14514:	moveq	r4, #0
   14518:	bl	10f34 <strcmp@plt>
   1451c:	cmp	r0, #0
   14520:	mov	r0, r6
   14524:	bne	1457c <__assert_fail@plt+0x3378>
   14528:	bl	111b0 <clearerr_unlocked@plt>
   1452c:	cmp	r4, #0
   14530:	moveq	r0, #1
   14534:	bne	145a4 <__assert_fail@plt+0x33a0>
   14538:	mov	r3, #0
   1453c:	str	r3, [r5, #104]	; 0x68
   14540:	ldr	r3, [pc, #144]	; 145d8 <__assert_fail@plt+0x33d4>
   14544:	ldr	r3, [r3]
   14548:	ldr	r3, [r3]
   1454c:	tst	r3, #32
   14550:	popeq	{r4, r5, r6, pc}
   14554:	mov	r2, #5
   14558:	ldr	r1, [pc, #124]	; 145dc <__assert_fail@plt+0x33d8>
   1455c:	mov	r0, #0
   14560:	bl	10fc4 <dcgettext@plt>
   14564:	mov	r1, #0
   14568:	mov	r2, r0
   1456c:	mov	r0, r1
   14570:	bl	1103c <error@plt>
   14574:	mov	r0, #0
   14578:	pop	{r4, r5, r6, pc}
   1457c:	bl	15d58 <__assert_fail@plt+0x4b54>
   14580:	cmp	r0, #0
   14584:	beq	1452c <__assert_fail@plt+0x3328>
   14588:	cmp	r4, #0
   1458c:	bne	145a4 <__assert_fail@plt+0x33a0>
   14590:	bl	110d8 <__errno_location@plt>
   14594:	ldr	r4, [r0]
   14598:	cmp	r4, #0
   1459c:	moveq	r0, #1
   145a0:	beq	14538 <__assert_fail@plt+0x3334>
   145a4:	ldr	r2, [r5, #100]	; 0x64
   145a8:	mov	r1, #3
   145ac:	mov	r0, #0
   145b0:	bl	191b4 <__assert_fail@plt+0x7fb0>
   145b4:	mov	r1, r4
   145b8:	ldr	r2, [pc, #32]	; 145e0 <__assert_fail@plt+0x33dc>
   145bc:	mov	r3, r0
   145c0:	mov	r0, #0
   145c4:	bl	1103c <error@plt>
   145c8:	mov	r0, #0
   145cc:	b	14538 <__assert_fail@plt+0x3334>
   145d0:	muleq	r2, r0, r1
   145d4:	strdeq	sp, [r1], -ip
   145d8:	andeq	pc, r2, r4, lsl #3
   145dc:	andeq	sp, r1, r4, lsl r2
   145e0:	andeq	lr, r1, r8, ror #7
   145e4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   145e8:	mov	r4, r0
   145ec:	mov	r5, r1
   145f0:	sub	sp, sp, #8256	; 0x2040
   145f4:	orrs	r3, r4, r5
   145f8:	sub	sp, sp, #52	; 0x34
   145fc:	beq	147ac <__assert_fail@plt+0x35a8>
   14600:	ldr	r8, [pc, #464]	; 147d8 <__assert_fail@plt+0x35d4>
   14604:	ldr	r7, [r8, #104]	; 0x68
   14608:	cmp	r7, #0
   1460c:	beq	14744 <__assert_fail@plt+0x3540>
   14610:	mov	fp, #1
   14614:	mov	r9, fp
   14618:	mov	sl, #8192	; 0x2000
   1461c:	mov	r0, r7
   14620:	bl	11138 <fileno@plt>
   14624:	add	r2, sp, #8
   14628:	mov	r1, r0
   1462c:	mov	r0, #3
   14630:	bl	10ff4 <__fxstat64@plt>
   14634:	cmp	r0, #0
   14638:	bne	14764 <__assert_fail@plt+0x3560>
   1463c:	ldr	r3, [sp, #24]
   14640:	and	r3, r3, #53248	; 0xd000
   14644:	cmp	r3, #32768	; 0x8000
   14648:	beq	146e0 <__assert_fail@plt+0x34dc>
   1464c:	str	r9, [sp]
   14650:	mov	r0, r7
   14654:	mov	r2, r4
   14658:	mov	r3, r5
   1465c:	bl	15eb0 <__assert_fail@plt+0x4cac>
   14660:	cmp	r0, #0
   14664:	beq	146d0 <__assert_fail@plt+0x34cc>
   14668:	ldr	r7, [r8, #104]	; 0x68
   1466c:	mov	r6, #8192	; 0x2000
   14670:	b	14678 <__assert_fail@plt+0x3474>
   14674:	ldr	r7, [r8, #104]	; 0x68
   14678:	mov	r3, #0
   1467c:	cmp	r3, r5
   14680:	cmpeq	r6, r4
   14684:	movhi	r6, r4
   14688:	str	r7, [sp]
   1468c:	mov	r3, r6
   14690:	mov	r2, r9
   14694:	mov	r1, sl
   14698:	add	r0, sp, #112	; 0x70
   1469c:	bl	11198 <__fread_unlocked_chk@plt>
   146a0:	subs	r4, r4, r0
   146a4:	sbc	r5, r5, #0
   146a8:	cmp	r6, r0
   146ac:	beq	146c8 <__assert_fail@plt+0x34c4>
   146b0:	ldr	r3, [r8, #104]	; 0x68
   146b4:	ldr	r3, [r3]
   146b8:	tst	r3, #32
   146bc:	bne	14798 <__assert_fail@plt+0x3594>
   146c0:	tst	r3, #16
   146c4:	bne	14718 <__assert_fail@plt+0x3514>
   146c8:	orrs	r3, r4, r5
   146cc:	bne	14674 <__assert_fail@plt+0x3470>
   146d0:	mov	r0, fp
   146d4:	add	sp, sp, #8256	; 0x2040
   146d8:	add	sp, sp, #52	; 0x34
   146dc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   146e0:	ldr	r2, [sp, #64]	; 0x40
   146e4:	ldrd	r0, [sp, #56]	; 0x38
   146e8:	sub	r3, r2, #1
   146ec:	cmn	r3, #-536870911	; 0xe0000001
   146f0:	movhi	r2, #512	; 0x200
   146f4:	cmp	r2, r0
   146f8:	asr	r3, r2, #31
   146fc:	sbcs	r3, r3, r1
   14700:	bge	1466c <__assert_fail@plt+0x3468>
   14704:	cmp	r5, r1
   14708:	cmpeq	r4, r0
   1470c:	bls	147b4 <__assert_fail@plt+0x35b0>
   14710:	subs	r4, r4, r0
   14714:	sbc	r5, r5, r1
   14718:	orrs	r3, r4, r5
   1471c:	beq	146d0 <__assert_fail@plt+0x34cc>
   14720:	mov	r0, #0
   14724:	bl	144e4 <__assert_fail@plt+0x32e0>
   14728:	and	fp, fp, r0
   1472c:	bl	143b8 <__assert_fail@plt+0x31b4>
   14730:	ldr	r7, [r8, #104]	; 0x68
   14734:	uxtb	fp, fp
   14738:	cmp	r7, #0
   1473c:	and	fp, fp, r0
   14740:	bne	1461c <__assert_fail@plt+0x3418>
   14744:	mov	r2, #5
   14748:	ldr	r1, [pc, #140]	; 147dc <__assert_fail@plt+0x35d8>
   1474c:	mov	r0, #0
   14750:	bl	10fc4 <dcgettext@plt>
   14754:	mov	r1, #0
   14758:	mov	r2, r0
   1475c:	mov	r0, #1
   14760:	bl	1103c <error@plt>
   14764:	bl	110d8 <__errno_location@plt>
   14768:	mov	fp, #0
   1476c:	ldr	r2, [r8, #100]	; 0x64
   14770:	mov	r1, #3
   14774:	ldr	r6, [r0]
   14778:	mov	r0, fp
   1477c:	bl	191b4 <__assert_fail@plt+0x7fb0>
   14780:	ldr	r2, [pc, #88]	; 147e0 <__assert_fail@plt+0x35dc>
   14784:	mov	r1, r6
   14788:	mov	r3, r0
   1478c:	mov	r0, fp
   14790:	bl	1103c <error@plt>
   14794:	b	14720 <__assert_fail@plt+0x351c>
   14798:	mov	fp, #0
   1479c:	mov	r0, fp
   147a0:	add	sp, sp, #8256	; 0x2040
   147a4:	add	sp, sp, #52	; 0x34
   147a8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   147ac:	mov	fp, #1
   147b0:	b	146d0 <__assert_fail@plt+0x34cc>
   147b4:	mov	r1, #1
   147b8:	mov	r2, r4
   147bc:	mov	r3, r5
   147c0:	mov	r0, r7
   147c4:	str	r1, [sp]
   147c8:	bl	15eb0 <__assert_fail@plt+0x4cac>
   147cc:	cmp	r0, #0
   147d0:	movne	fp, #0
   147d4:	b	146d0 <__assert_fail@plt+0x34cc>
   147d8:	muleq	r2, r0, r1
   147dc:	andeq	sp, r1, r0, lsr #4
   147e0:	andeq	lr, r1, r8, ror #7
   147e4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   147e8:	sub	sp, sp, #20
   147ec:	mov	r9, r2
   147f0:	strd	r0, [sp, #8]
   147f4:	ldr	r1, [pc, #628]	; 14a70 <__assert_fail@plt+0x386c>
   147f8:	ldrb	r1, [r1]
   147fc:	cmp	r1, #0
   14800:	bne	149f0 <__assert_fail@plt+0x37ec>
   14804:	ldr	r5, [pc, #616]	; 14a74 <__assert_fail@plt+0x3870>
   14808:	ldr	r3, [r5, #12]
   1480c:	mov	r6, #0
   14810:	cmp	r3, r6
   14814:	strb	r6, [r5, #116]	; 0x74
   14818:	beq	14a40 <__assert_fail@plt+0x383c>
   1481c:	ldr	r7, [pc, #596]	; 14a78 <__assert_fail@plt+0x3874>
   14820:	b	148ac <__assert_fail@plt+0x36a8>
   14824:	ldr	r3, [r5, #120]	; 0x78
   14828:	mov	r2, #0
   1482c:	ldrd	r0, [sp, #8]
   14830:	blx	r3
   14834:	ldr	ip, [r5, #20]
   14838:	ldr	r2, [sp, #56]	; 0x38
   1483c:	add	ip, ip, r4
   14840:	add	r3, ip, #12
   14844:	ldr	r0, [ip, #28]
   14848:	mov	r1, r8
   1484c:	str	r0, [sp, #4]
   14850:	ldr	lr, [ip, #24]
   14854:	mov	r0, sl
   14858:	str	lr, [sp]
   1485c:	ldr	fp, [ip, #8]
   14860:	blx	fp
   14864:	ldr	r3, [r5, #20]
   14868:	add	r4, r3, r4
   1486c:	ldrb	r3, [r4, #21]
   14870:	cmp	r3, #0
   14874:	bne	1490c <__assert_fail@plt+0x3708>
   14878:	ldr	r0, [r7]
   1487c:	ldr	r3, [r0, #20]
   14880:	ldr	r2, [r0, #24]
   14884:	cmp	r3, r2
   14888:	bcs	14a54 <__assert_fail@plt+0x3850>
   1488c:	ldr	r2, [r5, #12]
   14890:	add	r6, r6, #1
   14894:	cmp	r2, r6
   14898:	add	r1, r3, #1
   1489c:	mov	r2, #10
   148a0:	str	r1, [r0, #20]
   148a4:	strb	r2, [r3]
   148a8:	bls	14a40 <__assert_fail@plt+0x383c>
   148ac:	ldr	r3, [r5, #20]
   148b0:	lsl	r4, r6, #5
   148b4:	add	r3, r3, r4
   148b8:	ldr	r2, [pc, #444]	; 14a7c <__assert_fail@plt+0x3878>
   148bc:	ldr	r3, [r3, #4]
   148c0:	ldr	r8, [r5, #112]	; 0x70
   148c4:	add	r3, r2, r3, lsl #2
   148c8:	mov	r0, r8
   148cc:	ldr	fp, [r3, #448]	; 0x1c0
   148d0:	mov	r1, fp
   148d4:	bl	1c698 <__assert_fail@plt+0xb494>
   148d8:	mov	r1, fp
   148dc:	mov	sl, r0
   148e0:	sub	r0, r8, r9
   148e4:	bl	1c698 <__assert_fail@plt+0xb494>
   148e8:	cmp	r6, #0
   148ec:	mov	r8, r0
   148f0:	beq	14824 <__assert_fail@plt+0x3620>
   148f4:	ldr	r3, [pc, #388]	; 14a80 <__assert_fail@plt+0x387c>
   148f8:	ldr	r2, [r5]
   148fc:	ldr	r1, [pc, #384]	; 14a84 <__assert_fail@plt+0x3880>
   14900:	mov	r0, #1
   14904:	bl	11120 <__printf_chk@plt>
   14908:	b	14834 <__assert_fail@plt+0x3630>
   1490c:	ldr	r0, [r4, #28]
   14910:	mov	r1, sl
   14914:	mul	r0, r0, r8
   14918:	bl	1c8a4 <__assert_fail@plt+0xb6a0>
   1491c:	ldr	r2, [r4, #24]
   14920:	ldr	r3, [pc, #344]	; 14a80 <__assert_fail@plt+0x387c>
   14924:	ldr	r1, [pc, #344]	; 14a84 <__assert_fail@plt+0x3880>
   14928:	mla	r2, r2, r8, r0
   1492c:	mov	r0, #1
   14930:	bl	11120 <__printf_chk@plt>
   14934:	ldr	r3, [r7]
   14938:	mov	r2, #3
   1493c:	mov	r1, #1
   14940:	ldr	r0, [pc, #320]	; 14a88 <__assert_fail@plt+0x3884>
   14944:	bl	10fa0 <fwrite_unlocked@plt>
   14948:	cmp	r9, #0
   1494c:	beq	149c0 <__assert_fail@plt+0x37bc>
   14950:	bl	110a8 <__ctype_b_loc@plt>
   14954:	ldr	r3, [sp, #56]	; 0x38
   14958:	mov	r8, #46	; 0x2e
   1495c:	add	sl, r3, r9
   14960:	mov	r4, r3
   14964:	mov	fp, r0
   14968:	b	1497c <__assert_fail@plt+0x3778>
   1496c:	cmp	r4, sl
   14970:	str	lr, [r0, #20]
   14974:	strb	r2, [r3]
   14978:	beq	149c0 <__assert_fail@plt+0x37bc>
   1497c:	ldrb	r2, [r4], #1
   14980:	ldr	r0, [fp]
   14984:	mov	r1, r8
   14988:	lsl	r3, r2, #1
   1498c:	ldrh	r3, [r0, r3]
   14990:	ldr	r0, [r7]
   14994:	tst	r3, #16384	; 0x4000
   14998:	ldr	ip, [r0, #24]
   1499c:	ldr	r3, [r0, #20]
   149a0:	movne	r1, r2
   149a4:	moveq	r2, #46	; 0x2e
   149a8:	cmp	r3, ip
   149ac:	add	lr, r3, #1
   149b0:	bcc	1496c <__assert_fail@plt+0x3768>
   149b4:	bl	11168 <__overflow@plt>
   149b8:	cmp	r4, sl
   149bc:	bne	1497c <__assert_fail@plt+0x3778>
   149c0:	ldr	r0, [r7]
   149c4:	ldr	r3, [r0, #20]
   149c8:	ldr	r2, [r0, #24]
   149cc:	cmp	r3, r2
   149d0:	addcc	r1, r3, #1
   149d4:	movcc	r2, #60	; 0x3c
   149d8:	strcc	r1, [r0, #20]
   149dc:	strbcc	r2, [r3]
   149e0:	bcc	14878 <__assert_fail@plt+0x3674>
   149e4:	mov	r1, #60	; 0x3c
   149e8:	bl	11168 <__overflow@plt>
   149ec:	b	14878 <__assert_fail@plt+0x3674>
   149f0:	ldr	r1, [pc, #120]	; 14a70 <__assert_fail@plt+0x386c>
   149f4:	ldr	r5, [pc, #120]	; 14a74 <__assert_fail@plt+0x3870>
   149f8:	ldrb	r1, [r1, #1]
   149fc:	cmp	r1, #0
   14a00:	bne	14808 <__assert_fail@plt+0x3604>
   14a04:	ldr	r1, [r5, #112]	; 0x70
   14a08:	cmp	r1, r2
   14a0c:	bne	14808 <__assert_fail@plt+0x3604>
   14a10:	mov	r0, r3
   14a14:	ldr	r1, [sp, #56]	; 0x38
   14a18:	bl	10fac <memcmp@plt>
   14a1c:	cmp	r0, #0
   14a20:	bne	14808 <__assert_fail@plt+0x3604>
   14a24:	ldrb	r3, [r5, #116]	; 0x74
   14a28:	cmp	r3, #0
   14a2c:	bne	14a40 <__assert_fail@plt+0x383c>
   14a30:	ldr	r0, [pc, #84]	; 14a8c <__assert_fail@plt+0x3888>
   14a34:	bl	11054 <puts@plt>
   14a38:	mov	r3, #1
   14a3c:	strb	r3, [r5, #116]	; 0x74
   14a40:	ldr	r2, [pc, #40]	; 14a70 <__assert_fail@plt+0x386c>
   14a44:	mov	r3, #0
   14a48:	strb	r3, [r2, #1]
   14a4c:	add	sp, sp, #20
   14a50:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14a54:	mov	r1, #10
   14a58:	bl	11168 <__overflow@plt>
   14a5c:	ldr	r3, [r5, #12]
   14a60:	add	r6, r6, #1
   14a64:	cmp	r3, r6
   14a68:	bhi	148ac <__assert_fail@plt+0x36a8>
   14a6c:	b	14a40 <__assert_fail@plt+0x383c>
   14a70:	andeq	pc, r2, r8, lsl r1	; <UNPREDICTABLE>
   14a74:	muleq	r2, r0, r1
   14a78:	andeq	pc, r2, r4, lsl #3
   14a7c:	andeq	ip, r1, r0, ror #25
   14a80:	andeq	sp, r1, r4, lsr #27
   14a84:	andeq	sp, r1, ip, lsr r0
   14a88:	andeq	sp, r1, ip, asr #4
   14a8c:	andeq	sp, r1, r8, asr #4
   14a90:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14a94:	sub	sp, sp, #44	; 0x2c
   14a98:	ldr	r7, [pc, #728]	; 14d78 <__assert_fail@plt+0x3b74>
   14a9c:	add	r6, sp, #40	; 0x28
   14aa0:	mov	lr, #0
   14aa4:	ldr	r3, [r7, #4]
   14aa8:	ldr	r9, [r7]
   14aac:	mov	ip, #32
   14ab0:	cmp	r3, #10
   14ab4:	strb	lr, [sp, #36]	; 0x24
   14ab8:	strd	r0, [sp]
   14abc:	strb	ip, [r6, #-5]!
   14ac0:	mov	r8, r2
   14ac4:	sub	r9, r6, r9
   14ac8:	beq	14c90 <__assert_fail@plt+0x3a8c>
   14acc:	cmp	r3, #16
   14ad0:	beq	14c50 <__assert_fail@plt+0x3a4c>
   14ad4:	cmp	r3, #8
   14ad8:	movne	sl, r6
   14adc:	beq	14c18 <__assert_fail@plt+0x3a14>
   14ae0:	cmp	r9, sl
   14ae4:	bcs	14b08 <__assert_fail@plt+0x3904>
   14ae8:	sub	r2, sl, r9
   14aec:	sub	r0, sl, r2
   14af0:	mov	r1, #48	; 0x30
   14af4:	bl	11108 <memset@plt>
   14af8:	sub	r9, r9, #1
   14afc:	sub	r3, sl, #1
   14b00:	sub	r9, r9, r3
   14b04:	add	sl, sl, r9
   14b08:	ldr	r9, [pc, #620]	; 14d7c <__assert_fail@plt+0x3b78>
   14b0c:	mov	r0, sl
   14b10:	ldr	r1, [r9]
   14b14:	bl	10f1c <fputs_unlocked@plt>
   14b18:	ldr	r0, [r9]
   14b1c:	ldrd	r4, [r7, #128]	; 0x80
   14b20:	ldrd	sl, [sp]
   14b24:	ldr	r3, [r0, #20]
   14b28:	ldr	r2, [r0, #24]
   14b2c:	adds	sl, sl, r4
   14b30:	adc	fp, fp, r5
   14b34:	cmp	r3, r2
   14b38:	addcc	r1, r3, #1
   14b3c:	movcc	r2, #40	; 0x28
   14b40:	mov	r4, sl
   14b44:	mov	r5, fp
   14b48:	strcc	r1, [r0, #20]
   14b4c:	strbcc	r2, [r3]
   14b50:	bcs	14d60 <__assert_fail@plt+0x3b5c>
   14b54:	ldr	r3, [r7, #4]
   14b58:	ldr	r7, [r7]
   14b5c:	mov	r1, #0
   14b60:	mov	r2, #41	; 0x29
   14b64:	cmp	r3, #10
   14b68:	sub	r7, r6, r7
   14b6c:	strb	r1, [sp, #36]	; 0x24
   14b70:	strb	r2, [sp, #35]	; 0x23
   14b74:	beq	14d14 <__assert_fail@plt+0x3b10>
   14b78:	cmp	r3, #16
   14b7c:	beq	14ce0 <__assert_fail@plt+0x3adc>
   14b80:	cmp	r3, #8
   14b84:	beq	14bec <__assert_fail@plt+0x39e8>
   14b88:	cmp	r6, r7
   14b8c:	bls	14bb0 <__assert_fail@plt+0x39ac>
   14b90:	sub	r2, r6, r7
   14b94:	sub	r0, r6, r2
   14b98:	mov	r1, #48	; 0x30
   14b9c:	bl	11108 <memset@plt>
   14ba0:	sub	r7, r7, #1
   14ba4:	sub	r3, r6, #1
   14ba8:	sub	r7, r7, r3
   14bac:	add	r6, r6, r7
   14bb0:	mov	r0, r6
   14bb4:	ldr	r1, [r9]
   14bb8:	bl	10f1c <fputs_unlocked@plt>
   14bbc:	cmp	r8, #0
   14bc0:	beq	14be4 <__assert_fail@plt+0x39e0>
   14bc4:	ldr	r0, [r9]
   14bc8:	ldr	r3, [r0, #20]
   14bcc:	ldr	r2, [r0, #24]
   14bd0:	cmp	r3, r2
   14bd4:	addcc	r2, r3, #1
   14bd8:	strcc	r2, [r0, #20]
   14bdc:	strbcc	r8, [r3]
   14be0:	bcs	14d6c <__assert_fail@plt+0x3b68>
   14be4:	add	sp, sp, #44	; 0x2c
   14be8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14bec:	lsr	r2, r4, #3
   14bf0:	orr	r2, r2, r5, lsl #29
   14bf4:	lsr	r1, r5, #3
   14bf8:	and	r3, r4, #7
   14bfc:	mov	r5, r1
   14c00:	mov	r4, r2
   14c04:	add	r3, r3, #48	; 0x30
   14c08:	orrs	r2, r4, r5
   14c0c:	strb	r3, [r6, #-1]!
   14c10:	bne	14bec <__assert_fail@plt+0x39e8>
   14c14:	b	14b88 <__assert_fail@plt+0x3984>
   14c18:	mov	r2, r0
   14c1c:	mov	r3, r1
   14c20:	mov	sl, r6
   14c24:	lsr	r0, r2, #3
   14c28:	orr	r0, r0, r3, lsl #29
   14c2c:	lsr	ip, r3, #3
   14c30:	and	r1, r2, #7
   14c34:	mov	r3, ip
   14c38:	mov	r2, r0
   14c3c:	add	r1, r1, #48	; 0x30
   14c40:	orrs	r0, r2, r3
   14c44:	strb	r1, [sl, #-1]!
   14c48:	bne	14c24 <__assert_fail@plt+0x3a20>
   14c4c:	b	14ae0 <__assert_fail@plt+0x38dc>
   14c50:	ldr	ip, [pc, #296]	; 14d80 <__assert_fail@plt+0x3b7c>
   14c54:	mov	r2, r0
   14c58:	mov	r3, r1
   14c5c:	mov	sl, r6
   14c60:	and	r0, r2, #15
   14c64:	add	r0, ip, r0
   14c68:	lsr	r1, r2, #4
   14c6c:	orr	r1, r1, r3, lsl #28
   14c70:	lsr	lr, r3, #4
   14c74:	ldrb	r0, [r0]
   14c78:	mov	r2, r1
   14c7c:	mov	r3, lr
   14c80:	orrs	r1, r2, r3
   14c84:	strb	r0, [sl, #-1]!
   14c88:	bne	14c60 <__assert_fail@plt+0x3a5c>
   14c8c:	b	14ae0 <__assert_fail@plt+0x38dc>
   14c90:	mov	r4, r0
   14c94:	mov	r5, r1
   14c98:	mov	sl, r6
   14c9c:	mov	r0, r4
   14ca0:	mov	r1, r5
   14ca4:	mov	r2, #10
   14ca8:	mov	r3, #0
   14cac:	bl	1cae4 <__assert_fail@plt+0xb8e0>
   14cb0:	mov	r0, r4
   14cb4:	mov	r1, r5
   14cb8:	mov	r3, #0
   14cbc:	add	r2, r2, #48	; 0x30
   14cc0:	strb	r2, [sl, #-1]!
   14cc4:	mov	r2, #10
   14cc8:	bl	1cae4 <__assert_fail@plt+0xb8e0>
   14ccc:	mov	r4, r0
   14cd0:	mov	r5, r1
   14cd4:	orrs	r3, r4, r5
   14cd8:	bne	14c9c <__assert_fail@plt+0x3a98>
   14cdc:	b	14ae0 <__assert_fail@plt+0x38dc>
   14ce0:	ldr	ip, [pc, #152]	; 14d80 <__assert_fail@plt+0x3b7c>
   14ce4:	and	r2, r4, #15
   14ce8:	add	r2, ip, r2
   14cec:	lsr	r3, r4, #4
   14cf0:	orr	r3, r3, r5, lsl #28
   14cf4:	lsr	r1, r5, #4
   14cf8:	ldrb	r2, [r2]
   14cfc:	mov	r4, r3
   14d00:	mov	r5, r1
   14d04:	orrs	r3, r4, r5
   14d08:	strb	r2, [r6, #-1]!
   14d0c:	bne	14ce4 <__assert_fail@plt+0x3ae0>
   14d10:	b	14b88 <__assert_fail@plt+0x3984>
   14d14:	mov	sl, #10
   14d18:	mov	fp, #0
   14d1c:	mov	r0, r4
   14d20:	mov	r1, r5
   14d24:	mov	r2, sl
   14d28:	mov	r3, fp
   14d2c:	bl	1cae4 <__assert_fail@plt+0xb8e0>
   14d30:	mov	r0, r4
   14d34:	mov	r1, r5
   14d38:	mov	r3, fp
   14d3c:	add	r2, r2, #48	; 0x30
   14d40:	strb	r2, [r6, #-1]!
   14d44:	mov	r2, sl
   14d48:	bl	1cae4 <__assert_fail@plt+0xb8e0>
   14d4c:	mov	r4, r0
   14d50:	mov	r5, r1
   14d54:	orrs	r3, r4, r5
   14d58:	bne	14d1c <__assert_fail@plt+0x3b18>
   14d5c:	b	14b88 <__assert_fail@plt+0x3984>
   14d60:	mov	r1, #40	; 0x28
   14d64:	bl	11168 <__overflow@plt>
   14d68:	b	14b54 <__assert_fail@plt+0x3950>
   14d6c:	mov	r1, r8
   14d70:	bl	11168 <__overflow@plt>
   14d74:	b	14be4 <__assert_fail@plt+0x39e0>
   14d78:	muleq	r2, r0, r1
   14d7c:	andeq	pc, r2, r4, lsl #3
   14d80:	andeq	sp, r1, r0, lsr #32
   14d84:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14d88:	mov	r4, r0
   14d8c:	ldr	sl, [pc, #400]	; 14f24 <__assert_fail@plt+0x3d20>
   14d90:	mov	fp, r2
   14d94:	mov	r5, r1
   14d98:	ldr	r0, [sl]
   14d9c:	sub	sp, sp, #36	; 0x24
   14da0:	ldr	r3, [r0, #20]
   14da4:	ldr	r2, [r0, #24]
   14da8:	cmp	r3, r2
   14dac:	addcc	r1, r3, #1
   14db0:	movcc	r2, #40	; 0x28
   14db4:	strcc	r1, [r0, #20]
   14db8:	strbcc	r2, [r3]
   14dbc:	bcs	14f0c <__assert_fail@plt+0x3d08>
   14dc0:	ldr	r2, [pc, #352]	; 14f28 <__assert_fail@plt+0x3d24>
   14dc4:	add	r6, sp, #32
   14dc8:	mov	r1, #41	; 0x29
   14dcc:	ldr	r3, [r2, #4]
   14dd0:	ldr	r7, [r2]
   14dd4:	cmp	r3, #10
   14dd8:	mov	r2, #0
   14ddc:	strb	r1, [r6, #-5]!
   14de0:	strb	r2, [sp, #28]
   14de4:	sub	r7, r6, r7
   14de8:	beq	14e8c <__assert_fail@plt+0x3c88>
   14dec:	cmp	r3, #16
   14df0:	beq	14ed8 <__assert_fail@plt+0x3cd4>
   14df4:	cmp	r3, #8
   14df8:	beq	14e60 <__assert_fail@plt+0x3c5c>
   14dfc:	cmp	r7, r6
   14e00:	bcs	14e24 <__assert_fail@plt+0x3c20>
   14e04:	sub	r2, r6, r7
   14e08:	sub	r0, r6, r2
   14e0c:	mov	r1, #48	; 0x30
   14e10:	bl	11108 <memset@plt>
   14e14:	sub	r7, r7, #1
   14e18:	sub	r3, r6, #1
   14e1c:	sub	r7, r7, r3
   14e20:	add	r6, r6, r7
   14e24:	mov	r0, r6
   14e28:	ldr	r1, [sl]
   14e2c:	bl	10f1c <fputs_unlocked@plt>
   14e30:	cmp	fp, #0
   14e34:	beq	14e58 <__assert_fail@plt+0x3c54>
   14e38:	ldr	r0, [sl]
   14e3c:	ldr	r3, [r0, #20]
   14e40:	ldr	r2, [r0, #24]
   14e44:	cmp	r3, r2
   14e48:	addcc	r2, r3, #1
   14e4c:	strcc	r2, [r0, #20]
   14e50:	strbcc	fp, [r3]
   14e54:	bcs	14f18 <__assert_fail@plt+0x3d14>
   14e58:	add	sp, sp, #36	; 0x24
   14e5c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14e60:	lsr	r2, r4, #3
   14e64:	orr	r2, r2, r5, lsl #29
   14e68:	lsr	r1, r5, #3
   14e6c:	and	r3, r4, #7
   14e70:	mov	r5, r1
   14e74:	mov	r4, r2
   14e78:	add	r3, r3, #48	; 0x30
   14e7c:	orrs	r2, r4, r5
   14e80:	strb	r3, [r6, #-1]!
   14e84:	bne	14e60 <__assert_fail@plt+0x3c5c>
   14e88:	b	14dfc <__assert_fail@plt+0x3bf8>
   14e8c:	mov	r8, #10
   14e90:	mov	r9, #0
   14e94:	mov	r0, r4
   14e98:	mov	r1, r5
   14e9c:	mov	r2, r8
   14ea0:	mov	r3, r9
   14ea4:	bl	1cae4 <__assert_fail@plt+0xb8e0>
   14ea8:	mov	r0, r4
   14eac:	mov	r1, r5
   14eb0:	mov	r3, r9
   14eb4:	add	r2, r2, #48	; 0x30
   14eb8:	strb	r2, [r6, #-1]!
   14ebc:	mov	r2, r8
   14ec0:	bl	1cae4 <__assert_fail@plt+0xb8e0>
   14ec4:	mov	r4, r0
   14ec8:	mov	r5, r1
   14ecc:	orrs	r3, r4, r5
   14ed0:	bne	14e94 <__assert_fail@plt+0x3c90>
   14ed4:	b	14dfc <__assert_fail@plt+0x3bf8>
   14ed8:	ldr	r0, [pc, #76]	; 14f2c <__assert_fail@plt+0x3d28>
   14edc:	and	r2, r4, #15
   14ee0:	add	r2, r0, r2
   14ee4:	lsr	r3, r4, #4
   14ee8:	orr	r3, r3, r5, lsl #28
   14eec:	lsr	r1, r5, #4
   14ef0:	ldrb	r2, [r2]
   14ef4:	mov	r4, r3
   14ef8:	mov	r5, r1
   14efc:	orrs	r3, r4, r5
   14f00:	strb	r2, [r6, #-1]!
   14f04:	bne	14edc <__assert_fail@plt+0x3cd8>
   14f08:	b	14dfc <__assert_fail@plt+0x3bf8>
   14f0c:	mov	r1, #40	; 0x28
   14f10:	bl	11168 <__overflow@plt>
   14f14:	b	14dc0 <__assert_fail@plt+0x3bbc>
   14f18:	mov	r1, fp
   14f1c:	bl	11168 <__overflow@plt>
   14f20:	b	14e58 <__assert_fail@plt+0x3c54>
   14f24:	andeq	pc, r2, r4, lsl #3
   14f28:	muleq	r2, r0, r1
   14f2c:	andeq	sp, r1, r0, lsr #32
   14f30:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14f34:	sub	sp, sp, #20
   14f38:	subs	r3, r0, #0
   14f3c:	str	r3, [sp, #4]
   14f40:	str	r1, [sp, #8]
   14f44:	beq	150f0 <__assert_fail@plt+0x3eec>
   14f48:	ldr	r4, [pc, #436]	; 15104 <__assert_fail@plt+0x3f00>
   14f4c:	mov	r0, r3
   14f50:	mov	r5, r2
   14f54:	ldr	r3, [r4, #112]	; 0x70
   14f58:	cmp	r0, r3
   14f5c:	bhi	150f0 <__assert_fail@plt+0x3eec>
   14f60:	ldr	r3, [r4, #104]	; 0x68
   14f64:	mov	r0, #0
   14f68:	cmp	r3, r0
   14f6c:	mov	r7, #1
   14f70:	str	r0, [r5]
   14f74:	beq	150e4 <__assert_fail@plt+0x3ee0>
   14f78:	ldr	sl, [pc, #392]	; 15108 <__assert_fail@plt+0x3f04>
   14f7c:	mov	r6, r0
   14f80:	mov	r8, r7
   14f84:	b	15014 <__assert_fail@plt+0x3e10>
   14f88:	ldr	r0, [r2, #-4]
   14f8c:	bl	10f34 <strcmp@plt>
   14f90:	cmp	r0, #0
   14f94:	mov	r0, fp
   14f98:	beq	15094 <__assert_fail@plt+0x3e90>
   14f9c:	bl	15d58 <__assert_fail@plt+0x4b54>
   14fa0:	cmp	r0, #0
   14fa4:	beq	14fbc <__assert_fail@plt+0x3db8>
   14fa8:	ldr	r3, [r9]
   14fac:	str	r3, [sp, #12]
   14fb0:	ldr	r3, [sp, #12]
   14fb4:	cmp	r3, #0
   14fb8:	bne	150b8 <__assert_fail@plt+0x3eb4>
   14fbc:	mov	r9, r8
   14fc0:	str	r6, [r4, #104]	; 0x68
   14fc4:	ldr	r3, [sl]
   14fc8:	ldr	r3, [r3]
   14fcc:	tst	r3, #32
   14fd0:	beq	14ff8 <__assert_fail@plt+0x3df4>
   14fd4:	mov	r2, #5
   14fd8:	ldr	r1, [pc, #300]	; 1510c <__assert_fail@plt+0x3f08>
   14fdc:	mov	r0, r6
   14fe0:	bl	10fc4 <dcgettext@plt>
   14fe4:	mov	r1, r6
   14fe8:	mov	r9, r6
   14fec:	mov	r2, r0
   14ff0:	mov	r0, #0
   14ff4:	bl	1103c <error@plt>
   14ff8:	bl	143b8 <__assert_fail@plt+0x31b4>
   14ffc:	ldr	r3, [r4, #104]	; 0x68
   15000:	cmp	r3, #0
   15004:	and	r0, r0, r9
   15008:	and	r7, r7, r0
   1500c:	beq	150e4 <__assert_fail@plt+0x3ee0>
   15010:	ldr	r0, [r5]
   15014:	ldr	r2, [sp, #4]
   15018:	mov	r1, r8
   1501c:	sub	r9, r2, r0
   15020:	ldr	r2, [sp, #8]
   15024:	add	r0, r2, r0
   15028:	mov	r2, r9
   1502c:	bl	111d4 <fread_unlocked@plt>
   15030:	ldr	r3, [r5]
   15034:	cmp	r9, r0
   15038:	add	r0, r3, r0
   1503c:	str	r0, [r5]
   15040:	beq	150e4 <__assert_fail@plt+0x3ee0>
   15044:	bl	110d8 <__errno_location@plt>
   15048:	ldr	fp, [r4, #104]	; 0x68
   1504c:	cmp	fp, #0
   15050:	mov	r9, r0
   15054:	moveq	r9, r8
   15058:	beq	14fc4 <__assert_fail@plt+0x3dc0>
   1505c:	ldr	r2, [fp]
   15060:	ldr	r1, [pc, #168]	; 15110 <__assert_fail@plt+0x3f0c>
   15064:	tst	r2, #32
   15068:	ldr	r2, [r4, #96]	; 0x60
   1506c:	beq	14f88 <__assert_fail@plt+0x3d84>
   15070:	ldr	r3, [r9]
   15074:	ldr	r0, [r2, #-4]
   15078:	str	r3, [sp, #12]
   1507c:	bl	10f34 <strcmp@plt>
   15080:	cmp	r0, #0
   15084:	mov	r0, fp
   15088:	bne	150a0 <__assert_fail@plt+0x3e9c>
   1508c:	bl	111b0 <clearerr_unlocked@plt>
   15090:	b	14fb0 <__assert_fail@plt+0x3dac>
   15094:	bl	111b0 <clearerr_unlocked@plt>
   15098:	mov	r9, r8
   1509c:	b	14fc0 <__assert_fail@plt+0x3dbc>
   150a0:	bl	15d58 <__assert_fail@plt+0x4b54>
   150a4:	cmp	r0, #0
   150a8:	beq	14fb0 <__assert_fail@plt+0x3dac>
   150ac:	ldr	r3, [sp, #12]
   150b0:	cmp	r3, #0
   150b4:	beq	14fa8 <__assert_fail@plt+0x3da4>
   150b8:	ldr	r2, [r4, #100]	; 0x64
   150bc:	mov	r1, #3
   150c0:	mov	r0, r6
   150c4:	bl	191b4 <__assert_fail@plt+0x7fb0>
   150c8:	ldr	r2, [pc, #68]	; 15114 <__assert_fail@plt+0x3f10>
   150cc:	ldr	r1, [sp, #12]
   150d0:	mov	r9, r6
   150d4:	mov	r3, r0
   150d8:	mov	r0, r6
   150dc:	bl	1103c <error@plt>
   150e0:	b	14fc0 <__assert_fail@plt+0x3dbc>
   150e4:	mov	r0, r7
   150e8:	add	sp, sp, #20
   150ec:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   150f0:	ldr	r3, [pc, #32]	; 15118 <__assert_fail@plt+0x3f14>
   150f4:	ldr	r2, [pc, #32]	; 1511c <__assert_fail@plt+0x3f18>
   150f8:	ldr	r1, [pc, #32]	; 15120 <__assert_fail@plt+0x3f1c>
   150fc:	ldr	r0, [pc, #32]	; 15124 <__assert_fail@plt+0x3f20>
   15100:	bl	11204 <__assert_fail@plt>
   15104:	muleq	r2, r0, r1
   15108:	andeq	pc, r2, r4, lsl #3
   1510c:	andeq	sp, r1, r4, lsl r2
   15110:	strdeq	sp, [r1], -ip
   15114:	andeq	lr, r1, r8, ror #7
   15118:	andeq	ip, r1, r4, asr #29
   1511c:	andeq	r0, r0, sp, lsl #10
   15120:	andeq	sp, r1, ip, rrx
   15124:	andeq	sp, r1, r0, asr r2
   15128:	subs	r5, r0, #0
   1512c:	push	{r7, lr}
   15130:	sub	sp, sp, #64	; 0x40
   15134:	beq	15170 <__assert_fail@plt+0x3f6c>
   15138:	ldr	r3, [pc, #908]	; 154cc <__assert_fail@plt+0x42c8>
   1513c:	mov	r2, #5
   15140:	ldr	r1, [pc, #904]	; 154d0 <__assert_fail@plt+0x42cc>
   15144:	mov	r0, #0
   15148:	ldr	r4, [r3]
   1514c:	bl	10fc4 <dcgettext@plt>
   15150:	ldr	r3, [pc, #892]	; 154d4 <__assert_fail@plt+0x42d0>
   15154:	mov	r1, #1
   15158:	ldr	r3, [r3]
   1515c:	mov	r2, r0
   15160:	mov	r0, r4
   15164:	bl	11144 <__fprintf_chk@plt>
   15168:	mov	r0, r5
   1516c:	bl	110b4 <exit@plt>
   15170:	mov	r2, #5
   15174:	ldr	r1, [pc, #860]	; 154d8 <__assert_fail@plt+0x42d4>
   15178:	bl	10fc4 <dcgettext@plt>
   1517c:	ldr	r3, [pc, #848]	; 154d4 <__assert_fail@plt+0x42d0>
   15180:	ldr	r6, [pc, #852]	; 154dc <__assert_fail@plt+0x42d8>
   15184:	ldr	r4, [pc, #852]	; 154e0 <__assert_fail@plt+0x42dc>
   15188:	ldr	r3, [r3]
   1518c:	mov	r2, r3
   15190:	str	r3, [sp]
   15194:	mov	r1, r0
   15198:	mov	r0, #1
   1519c:	bl	11120 <__printf_chk@plt>
   151a0:	mov	r2, #5
   151a4:	ldr	r1, [pc, #824]	; 154e4 <__assert_fail@plt+0x42e0>
   151a8:	mov	r0, r5
   151ac:	bl	10fc4 <dcgettext@plt>
   151b0:	ldr	r1, [r6]
   151b4:	bl	10f1c <fputs_unlocked@plt>
   151b8:	mov	r2, #5
   151bc:	ldr	r1, [pc, #804]	; 154e8 <__assert_fail@plt+0x42e4>
   151c0:	mov	r0, r5
   151c4:	bl	10fc4 <dcgettext@plt>
   151c8:	ldr	r1, [r6]
   151cc:	bl	10f1c <fputs_unlocked@plt>
   151d0:	mov	r2, #5
   151d4:	ldr	r1, [pc, #784]	; 154ec <__assert_fail@plt+0x42e8>
   151d8:	mov	r0, r5
   151dc:	bl	10fc4 <dcgettext@plt>
   151e0:	ldr	r1, [r6]
   151e4:	bl	10f1c <fputs_unlocked@plt>
   151e8:	mov	r2, #5
   151ec:	ldr	r1, [pc, #764]	; 154f0 <__assert_fail@plt+0x42ec>
   151f0:	mov	r0, r5
   151f4:	bl	10fc4 <dcgettext@plt>
   151f8:	ldr	r1, [r6]
   151fc:	bl	10f1c <fputs_unlocked@plt>
   15200:	mov	r2, #5
   15204:	ldr	r1, [pc, #744]	; 154f4 <__assert_fail@plt+0x42f0>
   15208:	mov	r0, r5
   1520c:	bl	10fc4 <dcgettext@plt>
   15210:	ldr	r1, [r6]
   15214:	bl	10f1c <fputs_unlocked@plt>
   15218:	mov	r2, #5
   1521c:	ldr	r1, [pc, #724]	; 154f8 <__assert_fail@plt+0x42f4>
   15220:	mov	r0, r5
   15224:	bl	10fc4 <dcgettext@plt>
   15228:	ldr	r1, [r6]
   1522c:	bl	10f1c <fputs_unlocked@plt>
   15230:	mov	r2, #5
   15234:	ldr	r1, [pc, #704]	; 154fc <__assert_fail@plt+0x42f8>
   15238:	mov	r0, r5
   1523c:	bl	10fc4 <dcgettext@plt>
   15240:	ldr	r1, [r6]
   15244:	bl	10f1c <fputs_unlocked@plt>
   15248:	mov	r2, #5
   1524c:	ldr	r1, [pc, #684]	; 15500 <__assert_fail@plt+0x42fc>
   15250:	mov	r0, r5
   15254:	bl	10fc4 <dcgettext@plt>
   15258:	ldr	r1, [r6]
   1525c:	bl	10f1c <fputs_unlocked@plt>
   15260:	mov	r2, #5
   15264:	ldr	r1, [pc, #664]	; 15504 <__assert_fail@plt+0x4300>
   15268:	mov	r0, r5
   1526c:	bl	10fc4 <dcgettext@plt>
   15270:	ldr	r1, [r6]
   15274:	bl	10f1c <fputs_unlocked@plt>
   15278:	mov	r2, #5
   1527c:	ldr	r1, [pc, #644]	; 15508 <__assert_fail@plt+0x4304>
   15280:	mov	r0, r5
   15284:	bl	10fc4 <dcgettext@plt>
   15288:	ldr	r1, [r6]
   1528c:	bl	10f1c <fputs_unlocked@plt>
   15290:	mov	r2, #5
   15294:	ldr	r1, [pc, #624]	; 1550c <__assert_fail@plt+0x4308>
   15298:	mov	r0, r5
   1529c:	bl	10fc4 <dcgettext@plt>
   152a0:	ldr	r1, [r6]
   152a4:	bl	10f1c <fputs_unlocked@plt>
   152a8:	mov	r2, #5
   152ac:	ldr	r1, [pc, #604]	; 15510 <__assert_fail@plt+0x430c>
   152b0:	mov	r0, r5
   152b4:	bl	10fc4 <dcgettext@plt>
   152b8:	ldr	r1, [r6]
   152bc:	bl	10f1c <fputs_unlocked@plt>
   152c0:	mov	r2, #5
   152c4:	ldr	r1, [pc, #584]	; 15514 <__assert_fail@plt+0x4310>
   152c8:	mov	r0, r5
   152cc:	bl	10fc4 <dcgettext@plt>
   152d0:	ldr	r1, [r6]
   152d4:	bl	10f1c <fputs_unlocked@plt>
   152d8:	mov	r2, #5
   152dc:	ldr	r1, [pc, #564]	; 15518 <__assert_fail@plt+0x4314>
   152e0:	mov	r0, r5
   152e4:	bl	10fc4 <dcgettext@plt>
   152e8:	ldr	r1, [r6]
   152ec:	bl	10f1c <fputs_unlocked@plt>
   152f0:	mov	r2, #5
   152f4:	ldr	r1, [pc, #544]	; 1551c <__assert_fail@plt+0x4318>
   152f8:	mov	r0, r5
   152fc:	bl	10fc4 <dcgettext@plt>
   15300:	ldr	r1, [r6]
   15304:	bl	10f1c <fputs_unlocked@plt>
   15308:	ldm	r4!, {r0, r1, r2, r3}
   1530c:	add	lr, sp, #8
   15310:	stmia	lr!, {r0, r1, r2, r3}
   15314:	ldm	r4!, {r0, r1, r2, r3}
   15318:	ldr	ip, [sp, #8]
   1531c:	stmia	lr!, {r0, r1, r2, r3}
   15320:	cmp	ip, #0
   15324:	ldm	r4!, {r0, r1, r2, r3}
   15328:	stmia	lr!, {r0, r1, r2, r3}
   1532c:	ldm	r4, {r0, r1}
   15330:	addeq	r4, sp, #8
   15334:	stm	lr, {r0, r1}
   15338:	beq	15368 <__assert_fail@plt+0x4164>
   1533c:	ldr	r7, [pc, #476]	; 15520 <__assert_fail@plt+0x431c>
   15340:	add	r4, sp, #8
   15344:	b	15354 <__assert_fail@plt+0x4150>
   15348:	ldr	ip, [r4, #8]!
   1534c:	cmp	ip, #0
   15350:	beq	15368 <__assert_fail@plt+0x4164>
   15354:	mov	r1, ip
   15358:	mov	r0, r7
   1535c:	bl	10f34 <strcmp@plt>
   15360:	cmp	r0, #0
   15364:	bne	15348 <__assert_fail@plt+0x4144>
   15368:	ldr	r4, [r4, #4]
   1536c:	mov	r2, #5
   15370:	cmp	r4, #0
   15374:	ldr	r1, [pc, #424]	; 15524 <__assert_fail@plt+0x4320>
   15378:	beq	15420 <__assert_fail@plt+0x421c>
   1537c:	mov	r0, #0
   15380:	bl	10fc4 <dcgettext@plt>
   15384:	ldr	r3, [pc, #412]	; 15528 <__assert_fail@plt+0x4324>
   15388:	ldr	r2, [pc, #412]	; 1552c <__assert_fail@plt+0x4328>
   1538c:	mov	r1, r0
   15390:	mov	r0, #1
   15394:	bl	11120 <__printf_chk@plt>
   15398:	mov	r1, #0
   1539c:	mov	r0, #5
   153a0:	bl	11174 <setlocale@plt>
   153a4:	cmp	r0, #0
   153a8:	ldreq	r7, [pc, #368]	; 15520 <__assert_fail@plt+0x431c>
   153ac:	beq	153c8 <__assert_fail@plt+0x41c4>
   153b0:	mov	r2, #3
   153b4:	ldr	r1, [pc, #372]	; 15530 <__assert_fail@plt+0x432c>
   153b8:	bl	111e0 <strncmp@plt>
   153bc:	ldr	r7, [pc, #348]	; 15520 <__assert_fail@plt+0x431c>
   153c0:	cmp	r0, #0
   153c4:	bne	154b0 <__assert_fail@plt+0x42ac>
   153c8:	mov	r2, #5
   153cc:	ldr	r1, [pc, #352]	; 15534 <__assert_fail@plt+0x4330>
   153d0:	mov	r0, #0
   153d4:	bl	10fc4 <dcgettext@plt>
   153d8:	ldr	r3, [pc, #320]	; 15520 <__assert_fail@plt+0x431c>
   153dc:	ldr	r2, [pc, #324]	; 15528 <__assert_fail@plt+0x4324>
   153e0:	mov	r1, r0
   153e4:	mov	r0, #1
   153e8:	bl	11120 <__printf_chk@plt>
   153ec:	mov	r2, #5
   153f0:	ldr	r1, [pc, #320]	; 15538 <__assert_fail@plt+0x4334>
   153f4:	mov	r0, #0
   153f8:	bl	10fc4 <dcgettext@plt>
   153fc:	ldr	r2, [pc, #312]	; 1553c <__assert_fail@plt+0x4338>
   15400:	cmp	r4, r7
   15404:	ldr	r3, [pc, #308]	; 15540 <__assert_fail@plt+0x433c>
   15408:	movne	r3, r2
   1540c:	mov	r1, r0
   15410:	mov	r2, r4
   15414:	mov	r0, #1
   15418:	bl	11120 <__printf_chk@plt>
   1541c:	b	15168 <__assert_fail@plt+0x3f64>
   15420:	mov	r0, r4
   15424:	bl	10fc4 <dcgettext@plt>
   15428:	ldr	r3, [pc, #248]	; 15528 <__assert_fail@plt+0x4324>
   1542c:	ldr	r2, [pc, #248]	; 1552c <__assert_fail@plt+0x4328>
   15430:	mov	r1, r0
   15434:	mov	r0, #1
   15438:	bl	11120 <__printf_chk@plt>
   1543c:	mov	r1, r4
   15440:	mov	r0, #5
   15444:	bl	11174 <setlocale@plt>
   15448:	cmp	r0, #0
   1544c:	beq	15464 <__assert_fail@plt+0x4260>
   15450:	mov	r2, #3
   15454:	ldr	r1, [pc, #212]	; 15530 <__assert_fail@plt+0x432c>
   15458:	bl	111e0 <strncmp@plt>
   1545c:	cmp	r0, #0
   15460:	bne	154a8 <__assert_fail@plt+0x42a4>
   15464:	mov	r2, #5
   15468:	ldr	r1, [pc, #196]	; 15534 <__assert_fail@plt+0x4330>
   1546c:	mov	r0, #0
   15470:	bl	10fc4 <dcgettext@plt>
   15474:	ldr	r3, [pc, #164]	; 15520 <__assert_fail@plt+0x431c>
   15478:	ldr	r2, [pc, #168]	; 15528 <__assert_fail@plt+0x4324>
   1547c:	mov	r4, r3
   15480:	mov	r1, r0
   15484:	mov	r0, #1
   15488:	bl	11120 <__printf_chk@plt>
   1548c:	ldr	r1, [pc, #164]	; 15538 <__assert_fail@plt+0x4334>
   15490:	mov	r2, #5
   15494:	mov	r0, #0
   15498:	bl	10fc4 <dcgettext@plt>
   1549c:	ldr	r3, [pc, #156]	; 15540 <__assert_fail@plt+0x433c>
   154a0:	mov	r1, r0
   154a4:	b	15410 <__assert_fail@plt+0x420c>
   154a8:	ldr	r7, [pc, #112]	; 15520 <__assert_fail@plt+0x431c>
   154ac:	mov	r4, r7
   154b0:	mov	r2, #5
   154b4:	ldr	r1, [pc, #136]	; 15544 <__assert_fail@plt+0x4340>
   154b8:	mov	r0, #0
   154bc:	bl	10fc4 <dcgettext@plt>
   154c0:	ldr	r1, [r6]
   154c4:	bl	10f1c <fputs_unlocked@plt>
   154c8:	b	153c8 <__assert_fail@plt+0x41c4>
   154cc:	andeq	pc, r2, r8, ror r1	; <UNPREDICTABLE>
   154d0:	andeq	sp, r1, r4, ror r2
   154d4:	andeq	pc, r2, r0, asr #4
   154d8:	muleq	r1, ip, r2
   154dc:	andeq	pc, r2, r4, lsl #3
   154e0:	ldrdeq	ip, [r1], -r0
   154e4:	andeq	sp, r1, r0, asr #6
   154e8:	strdeq	sp, [r1], -r8
   154ec:	andeq	sp, r1, r0, lsr r4
   154f0:			; <UNDEFINED> instruction: 0x0001d5b8
   154f4:	andeq	sp, r1, r4, lsl #12
   154f8:	andeq	sp, r1, r4, lsr #14
   154fc:	andeq	sp, r1, ip, asr #18
   15500:	andeq	sp, r1, ip, ror r9
   15504:			; <UNDEFINED> instruction: 0x0001d9b4
   15508:	strdeq	sp, [r1], -r0
   1550c:	andeq	sp, r1, r4, lsl #24
   15510:	andeq	sp, r1, ip, lsr #25
   15514:	andeq	sp, r1, r8, lsr #27
   15518:	muleq	r1, ip, lr
   1551c:	strdeq	sp, [r1], -ip
   15520:	andeq	sp, r1, r0, ror r2
   15524:	andeq	sp, r1, r4, ror #31
   15528:	strdeq	sp, [r1], -ip
   1552c:	andeq	lr, r1, r4, lsr #32
   15530:	andeq	lr, r1, r4, lsr r0
   15534:	andeq	lr, r1, r0, lsl #1
   15538:	muleq	r1, ip, r0
   1553c:	andeq	sp, r1, r4, lsr #27
   15540:	andeq	lr, r1, r8, lsl #5
   15544:	andeq	lr, r1, r8, lsr r0
   15548:	mov	r0, #1
   1554c:	b	15128 <__assert_fail@plt+0x3f24>
   15550:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15554:	mov	r4, r1
   15558:	sub	sp, sp, #12
   1555c:	mov	r5, r2
   15560:	str	r2, [sp, #4]
   15564:	mov	r7, r3
   15568:	mov	sl, r0
   1556c:	bl	110c0 <strlen@plt>
   15570:	ldr	fp, [r4]
   15574:	cmp	fp, #0
   15578:	beq	1568c <__assert_fail@plt+0x4488>
   1557c:	cmp	r5, #0
   15580:	mov	r8, r0
   15584:	mov	r3, r5
   15588:	beq	15634 <__assert_fail@plt+0x4430>
   1558c:	mov	r2, #0
   15590:	mov	r5, r2
   15594:	mov	r6, r3
   15598:	mvn	r9, #0
   1559c:	str	r2, [sp]
   155a0:	mov	r2, r8
   155a4:	mov	r1, sl
   155a8:	mov	r0, fp
   155ac:	bl	111e0 <strncmp@plt>
   155b0:	cmp	r0, #0
   155b4:	mov	r0, fp
   155b8:	bne	155f8 <__assert_fail@plt+0x43f4>
   155bc:	bl	110c0 <strlen@plt>
   155c0:	ldr	r3, [sp, #4]
   155c4:	mov	r2, r7
   155c8:	mov	r1, r6
   155cc:	cmp	r8, r0
   155d0:	mla	r0, r7, r9, r3
   155d4:	beq	15624 <__assert_fail@plt+0x4420>
   155d8:	cmn	r9, #1
   155dc:	moveq	r9, r5
   155e0:	beq	155f8 <__assert_fail@plt+0x43f4>
   155e4:	bl	10fac <memcmp@plt>
   155e8:	ldr	r3, [sp]
   155ec:	cmp	r0, #0
   155f0:	movne	r3, #1
   155f4:	str	r3, [sp]
   155f8:	ldr	fp, [r4, #4]!
   155fc:	add	r5, r5, #1
   15600:	cmp	fp, #0
   15604:	add	r6, r6, r7
   15608:	bne	155a0 <__assert_fail@plt+0x439c>
   1560c:	ldr	r3, [sp]
   15610:	cmp	r3, #0
   15614:	mvnne	r9, #1
   15618:	mov	r0, r9
   1561c:	add	sp, sp, #12
   15620:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15624:	mov	r9, r5
   15628:	mov	r0, r9
   1562c:	add	sp, sp, #12
   15630:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15634:	mov	r6, r5
   15638:	mvn	r9, #0
   1563c:	mov	r2, r8
   15640:	mov	r1, sl
   15644:	mov	r0, fp
   15648:	bl	111e0 <strncmp@plt>
   1564c:	cmp	r0, #0
   15650:	mov	r0, fp
   15654:	bne	15670 <__assert_fail@plt+0x446c>
   15658:	bl	110c0 <strlen@plt>
   1565c:	cmp	r8, r0
   15660:	beq	15624 <__assert_fail@plt+0x4420>
   15664:	cmn	r9, #1
   15668:	moveq	r9, r5
   1566c:	movne	r6, #1
   15670:	ldr	fp, [r4, #4]!
   15674:	add	r5, r5, #1
   15678:	cmp	fp, #0
   1567c:	bne	1563c <__assert_fail@plt+0x4438>
   15680:	str	r6, [sp]
   15684:	mov	r3, r6
   15688:	b	15610 <__assert_fail@plt+0x440c>
   1568c:	mvn	r9, #0
   15690:	b	15618 <__assert_fail@plt+0x4414>
   15694:	push	{r4, r5, r6, lr}
   15698:	mov	r6, r0
   1569c:	ldr	r0, [r1]
   156a0:	cmp	r0, #0
   156a4:	beq	156dc <__assert_fail@plt+0x44d8>
   156a8:	mov	r4, r1
   156ac:	mov	r5, #0
   156b0:	b	156c4 <__assert_fail@plt+0x44c0>
   156b4:	ldr	r0, [r4, #4]!
   156b8:	add	r5, r5, #1
   156bc:	cmp	r0, #0
   156c0:	beq	156dc <__assert_fail@plt+0x44d8>
   156c4:	mov	r1, r6
   156c8:	bl	10f34 <strcmp@plt>
   156cc:	cmp	r0, #0
   156d0:	bne	156b4 <__assert_fail@plt+0x44b0>
   156d4:	mov	r0, r5
   156d8:	pop	{r4, r5, r6, pc}
   156dc:	mvn	r0, #0
   156e0:	pop	{r4, r5, r6, pc}
   156e4:	cmn	r2, #1
   156e8:	push	{r4, r5, r6, lr}
   156ec:	mov	r2, #5
   156f0:	sub	sp, sp, #8
   156f4:	mov	r4, r1
   156f8:	mov	r5, r0
   156fc:	ldreq	r1, [pc, #76]	; 15750 <__assert_fail@plt+0x454c>
   15700:	ldrne	r1, [pc, #76]	; 15754 <__assert_fail@plt+0x4550>
   15704:	mov	r0, #0
   15708:	bl	10fc4 <dcgettext@plt>
   1570c:	mov	r2, r4
   15710:	mov	r1, #8
   15714:	mov	r6, r0
   15718:	mov	r0, #0
   1571c:	bl	18358 <__assert_fail@plt+0x7154>
   15720:	mov	r1, r5
   15724:	mov	r4, r0
   15728:	mov	r0, #1
   1572c:	bl	19ef4 <__assert_fail@plt+0x8cf0>
   15730:	mov	r1, #0
   15734:	mov	r3, r4
   15738:	mov	r2, r6
   1573c:	str	r0, [sp]
   15740:	mov	r0, r1
   15744:	bl	1103c <error@plt>
   15748:	add	sp, sp, #8
   1574c:	pop	{r4, r5, r6, pc}
   15750:	andeq	lr, r1, r0, lsl #7
   15754:	muleq	r1, ip, r3
   15758:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1575c:	mov	r6, r0
   15760:	ldr	r9, [pc, #232]	; 15850 <__assert_fail@plt+0x464c>
   15764:	mov	r4, r1
   15768:	mov	r7, r2
   1576c:	ldr	r1, [pc, #224]	; 15854 <__assert_fail@plt+0x4650>
   15770:	mov	r2, #5
   15774:	mov	r0, #0
   15778:	bl	10fc4 <dcgettext@plt>
   1577c:	ldr	r1, [r9]
   15780:	bl	10f1c <fputs_unlocked@plt>
   15784:	ldr	fp, [r6]
   15788:	cmp	fp, #0
   1578c:	movne	r8, #0
   15790:	movne	r5, r8
   15794:	movne	sl, #1
   15798:	bne	157d8 <__assert_fail@plt+0x45d4>
   1579c:	b	1581c <__assert_fail@plt+0x4618>
   157a0:	mov	r0, fp
   157a4:	ldr	r8, [r9]
   157a8:	bl	1a0a8 <__assert_fail@plt+0x8ea4>
   157ac:	ldr	r2, [pc, #164]	; 15858 <__assert_fail@plt+0x4654>
   157b0:	mov	r1, sl
   157b4:	mov	r3, r0
   157b8:	mov	r0, r8
   157bc:	bl	11144 <__fprintf_chk@plt>
   157c0:	mov	r8, r4
   157c4:	ldr	fp, [r6, #4]!
   157c8:	add	r5, r5, #1
   157cc:	cmp	fp, #0
   157d0:	add	r4, r4, r7
   157d4:	beq	1581c <__assert_fail@plt+0x4618>
   157d8:	cmp	r5, #0
   157dc:	mov	r1, r4
   157e0:	mov	r2, r7
   157e4:	mov	r0, r8
   157e8:	beq	157a0 <__assert_fail@plt+0x459c>
   157ec:	bl	10fac <memcmp@plt>
   157f0:	cmp	r0, #0
   157f4:	bne	157a0 <__assert_fail@plt+0x459c>
   157f8:	mov	r0, fp
   157fc:	ldr	fp, [r9]
   15800:	bl	1a0a8 <__assert_fail@plt+0x8ea4>
   15804:	ldr	r2, [pc, #80]	; 1585c <__assert_fail@plt+0x4658>
   15808:	mov	r1, sl
   1580c:	mov	r3, r0
   15810:	mov	r0, fp
   15814:	bl	11144 <__fprintf_chk@plt>
   15818:	b	157c4 <__assert_fail@plt+0x45c0>
   1581c:	ldr	r0, [r9]
   15820:	ldr	r3, [r0, #20]
   15824:	ldr	r2, [r0, #24]
   15828:	cmp	r3, r2
   1582c:	bcs	15844 <__assert_fail@plt+0x4640>
   15830:	add	r1, r3, #1
   15834:	mov	r2, #10
   15838:	str	r1, [r0, #20]
   1583c:	strb	r2, [r3]
   15840:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15844:	mov	r1, #10
   15848:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1584c:	b	11168 <__overflow@plt>
   15850:	andeq	pc, r2, r8, ror r1	; <UNPREDICTABLE>
   15854:			; <UNDEFINED> instruction: 0x0001e3bc
   15858:	ldrdeq	lr, [r1], -r4
   1585c:	ldrdeq	lr, [r1], -ip
   15860:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15864:	sub	sp, sp, #36	; 0x24
   15868:	mov	r6, r1
   1586c:	ldrb	ip, [sp, #80]	; 0x50
   15870:	str	r0, [sp, #28]
   15874:	str	r2, [sp, #24]
   15878:	cmp	ip, #0
   1587c:	str	ip, [sp, #20]
   15880:	str	r3, [sp, #12]
   15884:	ldr	r7, [sp, #72]	; 0x48
   15888:	bne	15940 <__assert_fail@plt+0x473c>
   1588c:	ldr	r0, [r2]
   15890:	cmp	r0, #0
   15894:	movne	sl, ip
   15898:	movne	r4, r2
   1589c:	bne	15924 <__assert_fail@plt+0x4720>
   158a0:	mov	r2, #5
   158a4:	ldr	r1, [pc, #512]	; 15aac <__assert_fail@plt+0x48a8>
   158a8:	mov	r0, #0
   158ac:	bl	10fc4 <dcgettext@plt>
   158b0:	mov	r4, r0
   158b4:	mov	r2, r6
   158b8:	mov	r1, #8
   158bc:	mov	r0, #0
   158c0:	bl	18358 <__assert_fail@plt+0x7154>
   158c4:	ldr	r1, [sp, #28]
   158c8:	mvn	sl, #0
   158cc:	mov	r5, r0
   158d0:	mov	r0, #1
   158d4:	bl	19ef4 <__assert_fail@plt+0x8cf0>
   158d8:	mov	r1, #0
   158dc:	mov	r3, r5
   158e0:	mov	r2, r4
   158e4:	str	r0, [sp]
   158e8:	mov	r0, r1
   158ec:	bl	1103c <error@plt>
   158f0:	ldr	r0, [sp, #24]
   158f4:	mov	r2, r7
   158f8:	ldr	r1, [sp, #12]
   158fc:	bl	15758 <__assert_fail@plt+0x4554>
   15900:	ldr	r3, [sp, #76]	; 0x4c
   15904:	blx	r3
   15908:	mov	r0, sl
   1590c:	add	sp, sp, #36	; 0x24
   15910:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15914:	ldr	r0, [r4, #4]!
   15918:	add	sl, sl, #1
   1591c:	cmp	r0, #0
   15920:	beq	158a0 <__assert_fail@plt+0x469c>
   15924:	mov	r1, r6
   15928:	bl	10f34 <strcmp@plt>
   1592c:	cmp	r0, #0
   15930:	bne	15914 <__assert_fail@plt+0x4710>
   15934:	mov	r0, sl
   15938:	add	sp, sp, #36	; 0x24
   1593c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15940:	mov	r0, r1
   15944:	bl	110c0 <strlen@plt>
   15948:	ldr	r3, [sp, #24]
   1594c:	ldr	fp, [r3]
   15950:	cmp	fp, #0
   15954:	mov	r9, r0
   15958:	beq	158a0 <__assert_fail@plt+0x469c>
   1595c:	ldr	r2, [sp, #12]
   15960:	cmp	r2, #0
   15964:	beq	15a20 <__assert_fail@plt+0x481c>
   15968:	mov	r1, #0
   1596c:	mov	r4, r1
   15970:	mov	r8, r3
   15974:	mov	r5, r2
   15978:	mvn	sl, #0
   1597c:	str	r1, [sp, #16]
   15980:	mov	r2, r9
   15984:	mov	r1, r6
   15988:	mov	r0, fp
   1598c:	bl	111e0 <strncmp@plt>
   15990:	cmp	r0, #0
   15994:	mov	r0, fp
   15998:	bne	159dc <__assert_fail@plt+0x47d8>
   1599c:	bl	110c0 <strlen@plt>
   159a0:	ldr	r3, [sp, #12]
   159a4:	mov	r2, r7
   159a8:	mov	r1, r5
   159ac:	cmp	r9, r0
   159b0:	mla	r0, r7, sl, r3
   159b4:	beq	15a10 <__assert_fail@plt+0x480c>
   159b8:	cmn	sl, #1
   159bc:	moveq	sl, r4
   159c0:	beq	159dc <__assert_fail@plt+0x47d8>
   159c4:	bl	10fac <memcmp@plt>
   159c8:	ldr	r2, [sp, #20]
   159cc:	ldr	r3, [sp, #16]
   159d0:	cmp	r0, #0
   159d4:	movne	r3, r2
   159d8:	str	r3, [sp, #16]
   159dc:	ldr	fp, [r8, #4]!
   159e0:	add	r4, r4, #1
   159e4:	cmp	fp, #0
   159e8:	add	r5, r5, r7
   159ec:	bne	15980 <__assert_fail@plt+0x477c>
   159f0:	ldr	r3, [sp, #16]
   159f4:	cmp	r3, #0
   159f8:	bne	15a94 <__assert_fail@plt+0x4890>
   159fc:	cmn	sl, #1
   15a00:	beq	158a0 <__assert_fail@plt+0x469c>
   15a04:	mov	r0, sl
   15a08:	add	sp, sp, #36	; 0x24
   15a0c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15a10:	mov	sl, r4
   15a14:	mov	r0, sl
   15a18:	add	sp, sp, #36	; 0x24
   15a1c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15a20:	mov	r5, r3
   15a24:	ldr	r3, [sp, #12]
   15a28:	str	r7, [sp, #72]	; 0x48
   15a2c:	mov	r7, fp
   15a30:	ldr	fp, [sp, #20]
   15a34:	mov	r8, r3
   15a38:	mvn	sl, #0
   15a3c:	mov	r4, r3
   15a40:	mov	r2, r9
   15a44:	mov	r1, r6
   15a48:	mov	r0, r7
   15a4c:	bl	111e0 <strncmp@plt>
   15a50:	cmp	r0, #0
   15a54:	mov	r0, r7
   15a58:	bne	15a74 <__assert_fail@plt+0x4870>
   15a5c:	bl	110c0 <strlen@plt>
   15a60:	cmp	r9, r0
   15a64:	beq	15a10 <__assert_fail@plt+0x480c>
   15a68:	cmn	sl, #1
   15a6c:	moveq	sl, r4
   15a70:	movne	r8, fp
   15a74:	ldr	r7, [r5, #4]!
   15a78:	add	r4, r4, #1
   15a7c:	cmp	r7, #0
   15a80:	bne	15a40 <__assert_fail@plt+0x483c>
   15a84:	str	r8, [sp, #16]
   15a88:	ldr	r7, [sp, #72]	; 0x48
   15a8c:	mov	r3, r8
   15a90:	b	159f4 <__assert_fail@plt+0x47f0>
   15a94:	mov	r2, #5
   15a98:	ldr	r1, [pc, #16]	; 15ab0 <__assert_fail@plt+0x48ac>
   15a9c:	mov	r0, #0
   15aa0:	bl	10fc4 <dcgettext@plt>
   15aa4:	mov	r4, r0
   15aa8:	b	158b4 <__assert_fail@plt+0x46b0>
   15aac:	andeq	lr, r1, r0, lsl #7
   15ab0:	muleq	r1, ip, r3
   15ab4:	push	{r4, r5, r6, r7, r8, lr}
   15ab8:	ldr	r7, [r1]
   15abc:	cmp	r7, #0
   15ac0:	beq	15b00 <__assert_fail@plt+0x48fc>
   15ac4:	mov	r6, r3
   15ac8:	mov	r8, r0
   15acc:	mov	r4, r2
   15ad0:	mov	r5, r1
   15ad4:	b	15ae4 <__assert_fail@plt+0x48e0>
   15ad8:	ldr	r7, [r5, #4]!
   15adc:	cmp	r7, #0
   15ae0:	beq	15b00 <__assert_fail@plt+0x48fc>
   15ae4:	mov	r1, r4
   15ae8:	mov	r2, r6
   15aec:	mov	r0, r8
   15af0:	bl	10fac <memcmp@plt>
   15af4:	add	r4, r4, r6
   15af8:	cmp	r0, #0
   15afc:	bne	15ad8 <__assert_fail@plt+0x48d4>
   15b00:	mov	r0, r7
   15b04:	pop	{r4, r5, r6, r7, r8, pc}
   15b08:	ldr	r3, [pc, #4]	; 15b14 <__assert_fail@plt+0x4910>
   15b0c:	str	r0, [r3]
   15b10:	bx	lr
   15b14:	andeq	pc, r2, r8, lsr r2	; <UNPREDICTABLE>
   15b18:	ldr	r3, [pc, #4]	; 15b24 <__assert_fail@plt+0x4920>
   15b1c:	strb	r0, [r3, #4]
   15b20:	bx	lr
   15b24:	andeq	pc, r2, r8, lsr r2	; <UNPREDICTABLE>
   15b28:	ldr	r3, [pc, #192]	; 15bf0 <__assert_fail@plt+0x49ec>
   15b2c:	push	{r4, r5, r6, lr}
   15b30:	sub	sp, sp, #8
   15b34:	ldr	r0, [r3]
   15b38:	bl	1c454 <__assert_fail@plt+0xb250>
   15b3c:	cmp	r0, #0
   15b40:	beq	15b64 <__assert_fail@plt+0x4960>
   15b44:	ldr	r4, [pc, #168]	; 15bf4 <__assert_fail@plt+0x49f0>
   15b48:	ldrb	r3, [r4, #4]
   15b4c:	cmp	r3, #0
   15b50:	beq	15b80 <__assert_fail@plt+0x497c>
   15b54:	bl	110d8 <__errno_location@plt>
   15b58:	ldr	r3, [r0]
   15b5c:	cmp	r3, #32
   15b60:	bne	15b80 <__assert_fail@plt+0x497c>
   15b64:	ldr	r3, [pc, #140]	; 15bf8 <__assert_fail@plt+0x49f4>
   15b68:	ldr	r0, [r3]
   15b6c:	bl	1c454 <__assert_fail@plt+0xb250>
   15b70:	cmp	r0, #0
   15b74:	bne	15bc8 <__assert_fail@plt+0x49c4>
   15b78:	add	sp, sp, #8
   15b7c:	pop	{r4, r5, r6, pc}
   15b80:	mov	r2, #5
   15b84:	ldr	r1, [pc, #112]	; 15bfc <__assert_fail@plt+0x49f8>
   15b88:	mov	r0, #0
   15b8c:	bl	10fc4 <dcgettext@plt>
   15b90:	ldr	r4, [r4]
   15b94:	cmp	r4, #0
   15b98:	mov	r5, r0
   15b9c:	beq	15bd4 <__assert_fail@plt+0x49d0>
   15ba0:	bl	110d8 <__errno_location@plt>
   15ba4:	ldr	r6, [r0]
   15ba8:	mov	r0, r4
   15bac:	bl	18e48 <__assert_fail@plt+0x7c44>
   15bb0:	mov	r1, r6
   15bb4:	str	r5, [sp]
   15bb8:	ldr	r2, [pc, #64]	; 15c00 <__assert_fail@plt+0x49fc>
   15bbc:	mov	r3, r0
   15bc0:	mov	r0, #0
   15bc4:	bl	1103c <error@plt>
   15bc8:	ldr	r3, [pc, #52]	; 15c04 <__assert_fail@plt+0x4a00>
   15bcc:	ldr	r0, [r3]
   15bd0:	bl	10f64 <_exit@plt>
   15bd4:	bl	110d8 <__errno_location@plt>
   15bd8:	mov	r3, r5
   15bdc:	ldr	r2, [pc, #36]	; 15c08 <__assert_fail@plt+0x4a04>
   15be0:	ldr	r1, [r0]
   15be4:	mov	r0, r4
   15be8:	bl	1103c <error@plt>
   15bec:	b	15bc8 <__assert_fail@plt+0x49c4>
   15bf0:	andeq	pc, r2, r4, lsl #3
   15bf4:	andeq	pc, r2, r8, lsr r2	; <UNPREDICTABLE>
   15bf8:	andeq	pc, r2, r8, ror r1	; <UNPREDICTABLE>
   15bfc:	andeq	sp, r1, r4, lsl r2
   15c00:	andeq	lr, r1, r4, ror #7
   15c04:	andeq	pc, r2, r4, lsr #2
   15c08:	andeq	lr, r1, r8, ror #7
   15c0c:	andeq	r0, r0, r0
   15c10:	vcmpe.f64	d0, #0.0
   15c14:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15c18:	vldr	d7, [pc, #304]	; 15d50 <__assert_fail@plt+0x4b4c>
   15c1c:	vpush	{d8}
   15c20:	vmrs	APSR_nzcv, fpscr
   15c24:	mov	r6, r0
   15c28:	and	r4, r2, #1
   15c2c:	sub	sp, sp, #44	; 0x2c
   15c30:	vnegmi.f64	d6, d0
   15c34:	vmovpl.f64	d6, d0
   15c38:	add	r0, sp, #40	; 0x28
   15c3c:	mov	r7, #37	; 0x25
   15c40:	mov	r5, r1
   15c44:	vcmpe.f64	d6, d7
   15c48:	lsr	r1, r2, #1
   15c4c:	mov	sl, r3
   15c50:	mov	r3, #45	; 0x2d
   15c54:	strb	r3, [r0, #-11]!
   15c58:	strb	r7, [sp, #28]
   15c5c:	tst	r2, #16
   15c60:	add	lr, r0, r4
   15c64:	and	r1, r1, #1
   15c68:	lsr	r3, r2, #2
   15c6c:	mov	r7, #43	; 0x2b
   15c70:	strb	r7, [r0, r4]
   15c74:	and	r3, r3, #1
   15c78:	add	r0, lr, r1
   15c7c:	moveq	ip, #103	; 0x67
   15c80:	movne	ip, #71	; 0x47
   15c84:	mov	r4, #32
   15c88:	vmrs	APSR_nzcv, fpscr
   15c8c:	lsr	r2, r2, #3
   15c90:	strb	r4, [lr, r1]
   15c94:	and	r2, r2, #1
   15c98:	add	lr, r0, r3
   15c9c:	mov	r4, #48	; 0x30
   15ca0:	strb	r4, [r0, r3]
   15ca4:	add	r3, lr, r2
   15ca8:	mov	r0, #42	; 0x2a
   15cac:	strb	r0, [lr, r2]
   15cb0:	mov	r1, #0
   15cb4:	mov	r2, #46	; 0x2e
   15cb8:	vmov.f64	d8, d0
   15cbc:	movmi	r4, #1
   15cc0:	movpl	r4, #15
   15cc4:	strb	r0, [r3, #2]
   15cc8:	strb	r2, [r3, #1]
   15ccc:	add	r9, sp, #28
   15cd0:	strb	ip, [r3, #3]
   15cd4:	mvn	r8, #0
   15cd8:	strb	r1, [r3, #4]
   15cdc:	mov	r7, #1
   15ce0:	b	15ce8 <__assert_fail@plt+0x4ae4>
   15ce4:	add	r4, r4, #1
   15ce8:	mov	r2, r7
   15cec:	mov	r3, r8
   15cf0:	vstr	d8, [sp, #16]
   15cf4:	str	r4, [sp, #8]
   15cf8:	stm	sp, {r9, sl}
   15cfc:	mov	r1, r5
   15d00:	mov	r0, r6
   15d04:	bl	111f8 <__snprintf_chk@plt>
   15d08:	cmp	r4, #16
   15d0c:	movle	r2, #0
   15d10:	movgt	r2, #1
   15d14:	orrs	r3, r2, r0, lsr #31
   15d18:	mov	fp, r0
   15d1c:	bne	15d40 <__assert_fail@plt+0x4b3c>
   15d20:	cmp	r5, r0
   15d24:	bls	15ce4 <__assert_fail@plt+0x4ae0>
   15d28:	mov	r1, #0
   15d2c:	mov	r0, r6
   15d30:	bl	1112c <strtod@plt>
   15d34:	vcmp.f64	d8, d0
   15d38:	vmrs	APSR_nzcv, fpscr
   15d3c:	bne	15ce4 <__assert_fail@plt+0x4ae0>
   15d40:	mov	r0, fp
   15d44:	add	sp, sp, #44	; 0x2c
   15d48:	vpop	{d8}
   15d4c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15d50:	andeq	r0, r0, r0
   15d54:	andseq	r0, r0, r0
   15d58:	push	{r4, r5, lr}
   15d5c:	sub	sp, sp, #12
   15d60:	mov	r4, r0
   15d64:	bl	11138 <fileno@plt>
   15d68:	cmp	r0, #0
   15d6c:	mov	r0, r4
   15d70:	blt	15dec <__assert_fail@plt+0x4be8>
   15d74:	bl	11084 <__freading@plt>
   15d78:	cmp	r0, #0
   15d7c:	bne	15db8 <__assert_fail@plt+0x4bb4>
   15d80:	mov	r0, r4
   15d84:	bl	15df8 <__assert_fail@plt+0x4bf4>
   15d88:	cmp	r0, #0
   15d8c:	beq	15de8 <__assert_fail@plt+0x4be4>
   15d90:	bl	110d8 <__errno_location@plt>
   15d94:	mov	r5, r0
   15d98:	mov	r0, r4
   15d9c:	ldr	r4, [r5]
   15da0:	bl	11150 <fclose@plt>
   15da4:	cmp	r4, #0
   15da8:	mvnne	r0, #0
   15dac:	strne	r4, [r5]
   15db0:	add	sp, sp, #12
   15db4:	pop	{r4, r5, pc}
   15db8:	mov	r0, r4
   15dbc:	bl	11138 <fileno@plt>
   15dc0:	mov	r3, #1
   15dc4:	str	r3, [sp]
   15dc8:	mov	r2, #0
   15dcc:	mov	r3, #0
   15dd0:	bl	1100c <lseek64@plt>
   15dd4:	mvn	r3, #0
   15dd8:	mvn	r2, #0
   15ddc:	cmp	r1, r3
   15de0:	cmpeq	r0, r2
   15de4:	bne	15d80 <__assert_fail@plt+0x4b7c>
   15de8:	mov	r0, r4
   15dec:	add	sp, sp, #12
   15df0:	pop	{r4, r5, lr}
   15df4:	b	11150 <fclose@plt>
   15df8:	push	{r4, lr}
   15dfc:	subs	r4, r0, #0
   15e00:	sub	sp, sp, #8
   15e04:	beq	15e20 <__assert_fail@plt+0x4c1c>
   15e08:	bl	11084 <__freading@plt>
   15e0c:	cmp	r0, #0
   15e10:	beq	15e20 <__assert_fail@plt+0x4c1c>
   15e14:	ldr	r3, [r4]
   15e18:	tst	r3, #256	; 0x100
   15e1c:	bne	15e30 <__assert_fail@plt+0x4c2c>
   15e20:	mov	r0, r4
   15e24:	add	sp, sp, #8
   15e28:	pop	{r4, lr}
   15e2c:	b	10f40 <fflush@plt>
   15e30:	mov	r3, #1
   15e34:	str	r3, [sp]
   15e38:	mov	r2, #0
   15e3c:	mov	r3, #0
   15e40:	mov	r0, r4
   15e44:	bl	15eb0 <__assert_fail@plt+0x4cac>
   15e48:	mov	r0, r4
   15e4c:	add	sp, sp, #8
   15e50:	pop	{r4, lr}
   15e54:	b	10f40 <fflush@plt>
   15e58:	push	{r4, r5, lr}
   15e5c:	sub	sp, sp, #12
   15e60:	mov	r5, r0
   15e64:	bl	110d8 <__errno_location@plt>
   15e68:	mov	r2, #0
   15e6c:	mov	r4, r0
   15e70:	ldr	r3, [r0]
   15e74:	str	r2, [r4]
   15e78:	mov	r0, r5
   15e7c:	str	r3, [sp]
   15e80:	str	r3, [sp, #4]
   15e84:	bl	10f4c <free@plt>
   15e88:	ldr	r3, [r4]
   15e8c:	add	r2, sp, #8
   15e90:	cmp	r3, #0
   15e94:	moveq	r3, #4
   15e98:	movne	r3, #0
   15e9c:	add	r3, r2, r3
   15ea0:	ldr	r3, [r3, #-8]
   15ea4:	str	r3, [r4]
   15ea8:	add	sp, sp, #12
   15eac:	pop	{r4, r5, pc}
   15eb0:	push	{r4, r5, r6, r7, r8, lr}
   15eb4:	sub	sp, sp, #8
   15eb8:	ldmib	r0, {ip, lr}
   15ebc:	mov	r4, r0
   15ec0:	ldr	r5, [sp, #32]
   15ec4:	cmp	lr, ip
   15ec8:	beq	15ee0 <__assert_fail@plt+0x4cdc>
   15ecc:	str	r5, [sp, #32]
   15ed0:	mov	r0, r4
   15ed4:	add	sp, sp, #8
   15ed8:	pop	{r4, r5, r6, r7, r8, lr}
   15edc:	b	1115c <fseeko64@plt>
   15ee0:	ldr	lr, [r0, #20]
   15ee4:	ldr	ip, [r0, #16]
   15ee8:	cmp	lr, ip
   15eec:	bne	15ecc <__assert_fail@plt+0x4cc8>
   15ef0:	ldr	r8, [r0, #36]	; 0x24
   15ef4:	cmp	r8, #0
   15ef8:	bne	15ecc <__assert_fail@plt+0x4cc8>
   15efc:	mov	r6, r2
   15f00:	mov	r7, r3
   15f04:	bl	11138 <fileno@plt>
   15f08:	mov	r2, r6
   15f0c:	mov	r3, r7
   15f10:	str	r5, [sp]
   15f14:	bl	1100c <lseek64@plt>
   15f18:	mvn	r3, #0
   15f1c:	mvn	r2, #0
   15f20:	cmp	r1, r3
   15f24:	cmpeq	r0, r2
   15f28:	beq	15f48 <__assert_fail@plt+0x4d44>
   15f2c:	ldr	r3, [r4]
   15f30:	strd	r0, [r4, #80]	; 0x50
   15f34:	mov	r0, r8
   15f38:	bic	r3, r3, #16
   15f3c:	str	r3, [r4]
   15f40:	add	sp, sp, #8
   15f44:	pop	{r4, r5, r6, r7, r8, pc}
   15f48:	mvn	r0, #0
   15f4c:	b	15f40 <__assert_fail@plt+0x4d3c>
   15f50:	vcmpe.f32	s0, #0.0
   15f54:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15f58:	vldr	s15, [pc, #308]	; 16094 <__assert_fail@plt+0x4e90>
   15f5c:	vpush	{d8-d9}
   15f60:	vmrs	APSR_nzcv, fpscr
   15f64:	mov	r6, r0
   15f68:	and	r4, r2, #1
   15f6c:	sub	sp, sp, #44	; 0x2c
   15f70:	vnegmi.f32	s14, s0
   15f74:	vmovpl.f32	s14, s0
   15f78:	add	r0, sp, #40	; 0x28
   15f7c:	mov	r7, #37	; 0x25
   15f80:	mov	r5, r1
   15f84:	vcmpe.f32	s14, s15
   15f88:	lsr	r1, r2, #1
   15f8c:	mov	sl, r3
   15f90:	mov	r3, #45	; 0x2d
   15f94:	strb	r3, [r0, #-11]!
   15f98:	strb	r7, [sp, #28]
   15f9c:	tst	r2, #16
   15fa0:	add	lr, r0, r4
   15fa4:	and	r1, r1, #1
   15fa8:	lsr	r3, r2, #2
   15fac:	mov	r7, #43	; 0x2b
   15fb0:	strb	r7, [r0, r4]
   15fb4:	and	r3, r3, #1
   15fb8:	add	r0, lr, r1
   15fbc:	moveq	ip, #103	; 0x67
   15fc0:	movne	ip, #71	; 0x47
   15fc4:	mov	r4, #32
   15fc8:	vmrs	APSR_nzcv, fpscr
   15fcc:	lsr	r2, r2, #3
   15fd0:	strb	r4, [lr, r1]
   15fd4:	and	r2, r2, #1
   15fd8:	add	lr, r0, r3
   15fdc:	mov	r4, #48	; 0x30
   15fe0:	strb	r4, [r0, r3]
   15fe4:	add	r3, lr, r2
   15fe8:	mov	r0, #42	; 0x2a
   15fec:	strb	r0, [lr, r2]
   15ff0:	mov	r1, #0
   15ff4:	mov	r2, #46	; 0x2e
   15ff8:	vmov.f32	s18, s0
   15ffc:	vcvt.f64.f32	d8, s0
   16000:	movmi	r4, #1
   16004:	movpl	r4, #6
   16008:	strb	r0, [r3, #2]
   1600c:	strb	r2, [r3, #1]
   16010:	add	r9, sp, #28
   16014:	strb	ip, [r3, #3]
   16018:	mvn	r8, #0
   1601c:	strb	r1, [r3, #4]
   16020:	mov	r7, #1
   16024:	b	1602c <__assert_fail@plt+0x4e28>
   16028:	add	r4, r4, #1
   1602c:	mov	r2, r7
   16030:	mov	r3, r8
   16034:	vstr	d8, [sp, #16]
   16038:	str	r4, [sp, #8]
   1603c:	stm	sp, {r9, sl}
   16040:	mov	r1, r5
   16044:	mov	r0, r6
   16048:	bl	111f8 <__snprintf_chk@plt>
   1604c:	cmp	r4, #8
   16050:	movle	r2, #0
   16054:	movgt	r2, #1
   16058:	orrs	r3, r2, r0, lsr #31
   1605c:	mov	fp, r0
   16060:	bne	16084 <__assert_fail@plt+0x4e80>
   16064:	cmp	r5, r0
   16068:	bls	16028 <__assert_fail@plt+0x4e24>
   1606c:	mov	r1, #0
   16070:	mov	r0, r6
   16074:	bl	11048 <strtof@plt>
   16078:	vcmp.f32	s18, s0
   1607c:	vmrs	APSR_nzcv, fpscr
   16080:	bne	16028 <__assert_fail@plt+0x4e24>
   16084:	mov	r0, fp
   16088:	add	sp, sp, #44	; 0x2c
   1608c:	vpop	{d8-d9}
   16090:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16094:	addeq	r0, r0, r0
   16098:	vcmpe.f64	d0, #0.0
   1609c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   160a0:	vldr	d7, [pc, #296]	; 161d0 <__assert_fail@plt+0x4fcc>
   160a4:	vpush	{d8}
   160a8:	vmrs	APSR_nzcv, fpscr
   160ac:	mov	r6, r0
   160b0:	and	lr, r2, #1
   160b4:	sub	sp, sp, #44	; 0x2c
   160b8:	vnegmi.f64	d6, d0
   160bc:	vmovpl.f64	d6, d0
   160c0:	add	r0, sp, #40	; 0x28
   160c4:	mov	r7, #37	; 0x25
   160c8:	mov	r5, r1
   160cc:	vcmpe.f64	d6, d7
   160d0:	lsr	r1, r2, #1
   160d4:	mov	sl, r3
   160d8:	mov	r3, #45	; 0x2d
   160dc:	strb	r3, [r0, #-11]!
   160e0:	strb	r7, [sp, #28]
   160e4:	tst	r2, #16
   160e8:	add	r4, r0, lr
   160ec:	and	r1, r1, #1
   160f0:	lsr	r3, r2, #2
   160f4:	mov	r7, #43	; 0x2b
   160f8:	strb	r7, [r0, lr]
   160fc:	and	r3, r3, #1
   16100:	add	lr, r4, r1
   16104:	moveq	ip, #103	; 0x67
   16108:	movne	ip, #71	; 0x47
   1610c:	mov	r0, #32
   16110:	vmrs	APSR_nzcv, fpscr
   16114:	lsr	r2, r2, #3
   16118:	strb	r0, [r4, r1]
   1611c:	and	r2, r2, #1
   16120:	add	r0, lr, r3
   16124:	mov	r4, #48	; 0x30
   16128:	strb	r4, [lr, r3]
   1612c:	add	r3, r0, r2
   16130:	ldr	lr, [pc, #160]	; 161d8 <__assert_fail@plt+0x4fd4>
   16134:	mov	r1, #0
   16138:	str	lr, [r0, r2]
   1613c:	vmov.f64	d8, d0
   16140:	movmi	r4, #1
   16144:	movpl	r4, #15
   16148:	add	r9, sp, #28
   1614c:	strb	ip, [r3, #4]
   16150:	mvn	r8, #0
   16154:	strb	r1, [r3, #5]
   16158:	mov	r7, #1
   1615c:	b	16164 <__assert_fail@plt+0x4f60>
   16160:	add	r4, r4, #1
   16164:	mov	r2, r7
   16168:	mov	r3, r8
   1616c:	vstr	d8, [sp, #16]
   16170:	str	r4, [sp, #8]
   16174:	stm	sp, {r9, sl}
   16178:	mov	r1, r5
   1617c:	mov	r0, r6
   16180:	bl	111f8 <__snprintf_chk@plt>
   16184:	cmp	r4, #16
   16188:	movle	r2, #0
   1618c:	movgt	r2, #1
   16190:	orrs	r3, r2, r0, lsr #31
   16194:	mov	fp, r0
   16198:	bne	161bc <__assert_fail@plt+0x4fb8>
   1619c:	cmp	r5, r0
   161a0:	bls	16160 <__assert_fail@plt+0x4f5c>
   161a4:	mov	r1, #0
   161a8:	mov	r0, r6
   161ac:	bl	10f94 <strtold@plt>
   161b0:	vcmp.f64	d8, d0
   161b4:	vmrs	APSR_nzcv, fpscr
   161b8:	bne	16160 <__assert_fail@plt+0x4f5c>
   161bc:	mov	r0, fp
   161c0:	add	sp, sp, #44	; 0x2c
   161c4:	vpop	{d8}
   161c8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   161cc:	nop			; (mov r0, r0)
   161d0:	andeq	r0, r0, r0
   161d4:	andseq	r0, r0, r0
   161d8:	stcmi	14, cr2, [sl], #-168	; 0xffffff58
   161dc:	push	{r4, r5, r6, lr}
   161e0:	subs	r4, r0, #0
   161e4:	beq	16258 <__assert_fail@plt+0x5054>
   161e8:	mov	r1, #47	; 0x2f
   161ec:	bl	11180 <strrchr@plt>
   161f0:	subs	r5, r0, #0
   161f4:	beq	16244 <__assert_fail@plt+0x5040>
   161f8:	add	r6, r5, #1
   161fc:	sub	r3, r6, r4
   16200:	cmp	r3, #6
   16204:	ble	16244 <__assert_fail@plt+0x5040>
   16208:	mov	r2, #7
   1620c:	ldr	r1, [pc, #96]	; 16274 <__assert_fail@plt+0x5070>
   16210:	sub	r0, r5, #6
   16214:	bl	111e0 <strncmp@plt>
   16218:	cmp	r0, #0
   1621c:	bne	16244 <__assert_fail@plt+0x5040>
   16220:	mov	r2, #3
   16224:	ldr	r1, [pc, #76]	; 16278 <__assert_fail@plt+0x5074>
   16228:	mov	r0, r6
   1622c:	bl	111e0 <strncmp@plt>
   16230:	cmp	r0, #0
   16234:	movne	r4, r6
   16238:	ldreq	r3, [pc, #60]	; 1627c <__assert_fail@plt+0x5078>
   1623c:	addeq	r4, r5, #4
   16240:	streq	r4, [r3]
   16244:	ldr	r2, [pc, #52]	; 16280 <__assert_fail@plt+0x507c>
   16248:	ldr	r3, [pc, #52]	; 16284 <__assert_fail@plt+0x5080>
   1624c:	str	r4, [r2]
   16250:	str	r4, [r3]
   16254:	pop	{r4, r5, r6, pc}
   16258:	ldr	r3, [pc, #40]	; 16288 <__assert_fail@plt+0x5084>
   1625c:	mov	r2, #55	; 0x37
   16260:	mov	r1, #1
   16264:	ldr	r3, [r3]
   16268:	ldr	r0, [pc, #28]	; 1628c <__assert_fail@plt+0x5088>
   1626c:	bl	11000 <fwrite@plt>
   16270:	bl	111ec <abort@plt>
   16274:	andeq	lr, r1, r4, lsr #8
   16278:	andeq	lr, r1, ip, lsr #8
   1627c:	andeq	pc, r2, r8, ror #2
   16280:	andeq	pc, r2, r0, asr #4
   16284:	andeq	pc, r2, ip, ror #2
   16288:	andeq	pc, r2, r8, ror r1	; <UNPREDICTABLE>
   1628c:	andeq	lr, r1, ip, ror #7
   16290:	push	{r4, r5, r6, lr}
   16294:	mov	r4, r0
   16298:	mov	r5, r1
   1629c:	bl	1c4d0 <__assert_fail@plt+0xb2cc>
   162a0:	ldrb	r3, [r0]
   162a4:	bic	r3, r3, #32
   162a8:	cmp	r3, #85	; 0x55
   162ac:	bne	1630c <__assert_fail@plt+0x5108>
   162b0:	ldrb	r3, [r0, #1]
   162b4:	bic	r3, r3, #32
   162b8:	cmp	r3, #84	; 0x54
   162bc:	bne	16348 <__assert_fail@plt+0x5144>
   162c0:	ldrb	r3, [r0, #2]
   162c4:	bic	r3, r3, #32
   162c8:	cmp	r3, #70	; 0x46
   162cc:	bne	16348 <__assert_fail@plt+0x5144>
   162d0:	ldrb	r3, [r0, #3]
   162d4:	cmp	r3, #45	; 0x2d
   162d8:	bne	16348 <__assert_fail@plt+0x5144>
   162dc:	ldrb	r3, [r0, #4]
   162e0:	cmp	r3, #56	; 0x38
   162e4:	bne	16348 <__assert_fail@plt+0x5144>
   162e8:	ldrb	r3, [r0, #5]
   162ec:	cmp	r3, #0
   162f0:	bne	16348 <__assert_fail@plt+0x5144>
   162f4:	ldrb	r2, [r4]
   162f8:	ldr	r3, [pc, #152]	; 16398 <__assert_fail@plt+0x5194>
   162fc:	ldr	r0, [pc, #152]	; 1639c <__assert_fail@plt+0x5198>
   16300:	cmp	r2, #96	; 0x60
   16304:	movne	r0, r3
   16308:	pop	{r4, r5, r6, pc}
   1630c:	cmp	r3, #71	; 0x47
   16310:	bne	16348 <__assert_fail@plt+0x5144>
   16314:	ldrb	r3, [r0, #1]
   16318:	bic	r3, r3, #32
   1631c:	cmp	r3, #66	; 0x42
   16320:	bne	16348 <__assert_fail@plt+0x5144>
   16324:	ldrb	r3, [r0, #2]
   16328:	cmp	r3, #49	; 0x31
   1632c:	bne	16348 <__assert_fail@plt+0x5144>
   16330:	ldrb	r3, [r0, #3]
   16334:	cmp	r3, #56	; 0x38
   16338:	bne	16348 <__assert_fail@plt+0x5144>
   1633c:	ldrb	r3, [r0, #4]
   16340:	cmp	r3, #48	; 0x30
   16344:	beq	1635c <__assert_fail@plt+0x5158>
   16348:	ldr	r3, [pc, #80]	; 163a0 <__assert_fail@plt+0x519c>
   1634c:	cmp	r5, #9
   16350:	ldr	r0, [pc, #76]	; 163a4 <__assert_fail@plt+0x51a0>
   16354:	movne	r0, r3
   16358:	pop	{r4, r5, r6, pc}
   1635c:	ldrb	r3, [r0, #5]
   16360:	cmp	r3, #51	; 0x33
   16364:	bne	16348 <__assert_fail@plt+0x5144>
   16368:	ldrb	r3, [r0, #6]
   1636c:	cmp	r3, #48	; 0x30
   16370:	bne	16348 <__assert_fail@plt+0x5144>
   16374:	ldrb	r3, [r0, #7]
   16378:	cmp	r3, #0
   1637c:	bne	16348 <__assert_fail@plt+0x5144>
   16380:	ldrb	r2, [r4]
   16384:	ldr	r3, [pc, #28]	; 163a8 <__assert_fail@plt+0x51a4>
   16388:	ldr	r0, [pc, #28]	; 163ac <__assert_fail@plt+0x51a8>
   1638c:	cmp	r2, #96	; 0x60
   16390:	movne	r0, r3
   16394:	pop	{r4, r5, r6, pc}
   16398:	andeq	lr, r1, r8, lsl #9
   1639c:	andeq	lr, r1, r4, lsl #9
   163a0:	muleq	r1, r8, r4
   163a4:	muleq	r1, r4, r4
   163a8:	muleq	r1, r0, r4
   163ac:	andeq	lr, r1, ip, lsl #9
   163b0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   163b4:	sub	sp, sp, #140	; 0x8c
   163b8:	mov	r9, r1
   163bc:	str	r3, [sp, #24]
   163c0:	mov	r3, #1
   163c4:	mov	sl, r0
   163c8:	str	r2, [sp, #44]	; 0x2c
   163cc:	str	r3, [sp, #28]
   163d0:	bl	11018 <__ctype_get_mb_cur_max@plt>
   163d4:	ldr	r3, [sp, #180]	; 0xb4
   163d8:	mov	fp, r9
   163dc:	mov	r9, sl
   163e0:	lsr	r3, r3, #1
   163e4:	and	r3, r3, #1
   163e8:	str	r3, [sp, #40]	; 0x28
   163ec:	ldr	r3, [sp, #180]	; 0xb4
   163f0:	mov	r2, #0
   163f4:	and	r3, r3, #4
   163f8:	str	r3, [sp, #100]	; 0x64
   163fc:	ldr	r3, [sp, #180]	; 0xb4
   16400:	str	r2, [sp, #76]	; 0x4c
   16404:	and	r3, r3, #1
   16408:	str	r3, [sp, #96]	; 0x60
   1640c:	str	r2, [sp, #36]	; 0x24
   16410:	str	r2, [sp, #56]	; 0x38
   16414:	str	r2, [sp, #68]	; 0x44
   16418:	str	r2, [sp, #72]	; 0x48
   1641c:	str	r2, [sp, #84]	; 0x54
   16420:	str	r0, [sp, #80]	; 0x50
   16424:	ldr	r3, [sp, #176]	; 0xb0
   16428:	cmp	r3, #10
   1642c:	ldrls	pc, [pc, r3, lsl #2]
   16430:	b	17608 <__assert_fail@plt+0x6404>
   16434:	andeq	r6, r1, r0, ror #8
   16438:	andeq	r6, r1, r0, lsl #15
   1643c:	ldrdeq	r6, [r1], -r8
   16440:			; <UNDEFINED> instruction: 0x000167b4
   16444:	andeq	r6, r1, ip, lsr #18
   16448:	andeq	r6, r1, ip, lsl #18
   1644c:	ldrdeq	r6, [r1], -r4
   16450:	strdeq	r6, [r1], -r8
   16454:	andeq	r6, r1, r0, lsr #16
   16458:	andeq	r6, r1, r0, lsr #16
   1645c:	andeq	r6, r1, r0, lsr #16
   16460:	mov	r3, #0
   16464:	ldr	r1, [sp, #56]	; 0x38
   16468:	ldr	r2, [sp, #176]	; 0xb0
   1646c:	ldr	lr, [sp, #176]	; 0xb0
   16470:	mov	r8, r3
   16474:	mov	ip, r3
   16478:	str	r3, [sp, #40]	; 0x28
   1647c:	mov	r3, r1
   16480:	cmp	r2, #2
   16484:	moveq	r3, #0
   16488:	andne	r3, r3, #1
   1648c:	mov	r0, r3
   16490:	str	r3, [sp, #92]	; 0x5c
   16494:	ldr	r3, [sp, #68]	; 0x44
   16498:	sub	lr, lr, #2
   1649c:	adds	r2, r3, #0
   164a0:	movne	r2, #1
   164a4:	and	r3, r1, ip
   164a8:	and	r3, r2, r3
   164ac:	clz	lr, lr
   164b0:	str	r3, [sp, #88]	; 0x58
   164b4:	lsr	lr, lr, #5
   164b8:	mov	r3, ip
   164bc:	and	r3, r3, lr
   164c0:	mov	sl, #0
   164c4:	and	r0, r2, r0
   164c8:	str	r3, [sp, #64]	; 0x40
   164cc:	eor	r3, r1, #1
   164d0:	str	lr, [sp, #52]	; 0x34
   164d4:	str	r0, [sp, #48]	; 0x30
   164d8:	str	r3, [sp, #60]	; 0x3c
   164dc:	ldr	r3, [sp, #24]
   164e0:	cmn	r3, #1
   164e4:	beq	16a14 <__assert_fail@plt+0x5810>
   164e8:	subs	r7, r3, sl
   164ec:	movne	r7, #1
   164f0:	cmp	r7, #0
   164f4:	beq	16a2c <__assert_fail@plt+0x5828>
   164f8:	ldr	r3, [sp, #48]	; 0x30
   164fc:	cmp	r3, #0
   16500:	beq	16d98 <__assert_fail@plt+0x5b94>
   16504:	ldr	r2, [sp, #68]	; 0x44
   16508:	ldr	r1, [sp, #24]
   1650c:	cmp	r2, #1
   16510:	mov	r3, r2
   16514:	movls	r3, #0
   16518:	movhi	r3, #1
   1651c:	cmn	r1, #1
   16520:	movne	r3, #0
   16524:	cmp	r3, #0
   16528:	add	r4, sl, r2
   1652c:	beq	1653c <__assert_fail@plt+0x5338>
   16530:	ldr	r0, [sp, #44]	; 0x2c
   16534:	bl	110c0 <strlen@plt>
   16538:	str	r0, [sp, #24]
   1653c:	ldr	r3, [sp, #24]
   16540:	cmp	r3, r4
   16544:	ldr	r3, [sp, #44]	; 0x2c
   16548:	add	r5, r3, sl
   1654c:	bcc	16da0 <__assert_fail@plt+0x5b9c>
   16550:	mov	r0, r5
   16554:	ldr	r2, [sp, #68]	; 0x44
   16558:	ldr	r1, [sp, #72]	; 0x48
   1655c:	bl	10fac <memcmp@plt>
   16560:	cmp	r0, #0
   16564:	bne	16da0 <__assert_fail@plt+0x5b9c>
   16568:	ldr	r3, [sp, #40]	; 0x28
   1656c:	cmp	r3, #0
   16570:	bne	1775c <__assert_fail@plt+0x6558>
   16574:	ldrb	r4, [r5]
   16578:	cmp	r4, #126	; 0x7e
   1657c:	ldrls	pc, [pc, r4, lsl #2]
   16580:	b	17698 <__assert_fail@plt+0x6494>
   16584:	andeq	r6, r1, r8, asr ip
   16588:	muleq	r1, r8, r6
   1658c:	muleq	r1, r8, r6
   16590:	muleq	r1, r8, r6
   16594:	muleq	r1, r8, r6
   16598:	muleq	r1, r8, r6
   1659c:	muleq	r1, r8, r6
   165a0:	andeq	r6, r1, r4, asr #24
   165a4:	andeq	r6, r1, r0, lsr ip
   165a8:	andeq	r6, r1, ip, lsl #24
   165ac:	andeq	r6, r1, ip, ror #23
   165b0:	andeq	r6, r1, ip, lsl ip
   165b4:	andeq	r6, r1, r4, asr fp
   165b8:	andeq	r6, r1, r8, lsl #27
   165bc:	muleq	r1, r8, r6
   165c0:	muleq	r1, r8, r6
   165c4:	muleq	r1, r8, r6
   165c8:	muleq	r1, r8, r6
   165cc:	muleq	r1, r8, r6
   165d0:	muleq	r1, r8, r6
   165d4:	muleq	r1, r8, r6
   165d8:	muleq	r1, r8, r6
   165dc:	muleq	r1, r8, r6
   165e0:	muleq	r1, r8, r6
   165e4:	muleq	r1, r8, r6
   165e8:	muleq	r1, r8, r6
   165ec:	muleq	r1, r8, r6
   165f0:	muleq	r1, r8, r6
   165f4:	muleq	r1, r8, r6
   165f8:	muleq	r1, r8, r6
   165fc:	muleq	r1, r8, r6
   16600:	muleq	r1, r8, r6
   16604:	andeq	r6, r1, r8, ror sp
   16608:	andeq	r6, r1, r8, asr sp
   1660c:	andeq	r6, r1, r8, asr sp
   16610:	andeq	r6, r1, r8, lsr sp
   16614:	andeq	r6, r1, r8, asr sp
   16618:	andeq	r6, r1, r4, asr #22
   1661c:	andeq	r6, r1, r8, asr sp
   16620:	andeq	r6, r1, r0, lsr #22
   16624:	andeq	r6, r1, r8, asr sp
   16628:	andeq	r6, r1, r8, asr sp
   1662c:	andeq	r6, r1, r8, asr sp
   16630:	andeq	r6, r1, r4, asr #22
   16634:	andeq	r6, r1, r4, asr #22
   16638:	andeq	r6, r1, r4, asr #22
   1663c:	andeq	r6, r1, r4, asr #22
   16640:	andeq	r6, r1, r4, asr #22
   16644:	andeq	r6, r1, r4, asr #22
   16648:	andeq	r6, r1, r4, asr #22
   1664c:	andeq	r6, r1, r4, asr #22
   16650:	andeq	r6, r1, r4, asr #22
   16654:	andeq	r6, r1, r4, asr #22
   16658:	andeq	r6, r1, r4, asr #22
   1665c:	andeq	r6, r1, r4, asr #22
   16660:	andeq	r6, r1, r4, asr #22
   16664:	andeq	r6, r1, r4, asr #22
   16668:	andeq	r6, r1, r4, asr #22
   1666c:	andeq	r6, r1, r4, asr #22
   16670:	andeq	r6, r1, r8, asr sp
   16674:	andeq	r6, r1, r8, asr sp
   16678:	andeq	r6, r1, r8, asr sp
   1667c:	andeq	r6, r1, r8, asr sp
   16680:	ldrdeq	r6, [r1], -r0
   16684:	muleq	r1, r8, r6
   16688:	andeq	r6, r1, r4, asr #22
   1668c:	andeq	r6, r1, r4, asr #22
   16690:	andeq	r6, r1, r4, asr #22
   16694:	andeq	r6, r1, r4, asr #22
   16698:	andeq	r6, r1, r4, asr #22
   1669c:	andeq	r6, r1, r4, asr #22
   166a0:	andeq	r6, r1, r4, asr #22
   166a4:	andeq	r6, r1, r4, asr #22
   166a8:	andeq	r6, r1, r4, asr #22
   166ac:	andeq	r6, r1, r4, asr #22
   166b0:	andeq	r6, r1, r4, asr #22
   166b4:	andeq	r6, r1, r4, asr #22
   166b8:	andeq	r6, r1, r4, asr #22
   166bc:	andeq	r6, r1, r4, asr #22
   166c0:	andeq	r6, r1, r4, asr #22
   166c4:	andeq	r6, r1, r4, asr #22
   166c8:	andeq	r6, r1, r4, asr #22
   166cc:	andeq	r6, r1, r4, asr #22
   166d0:	andeq	r6, r1, r4, asr #22
   166d4:	andeq	r6, r1, r4, asr #22
   166d8:	andeq	r6, r1, r4, asr #22
   166dc:	andeq	r6, r1, r4, asr #22
   166e0:	andeq	r6, r1, r4, asr #22
   166e4:	andeq	r6, r1, r4, asr #22
   166e8:	andeq	r6, r1, r4, asr #22
   166ec:	andeq	r6, r1, r4, asr #22
   166f0:	andeq	r6, r1, r8, asr sp
   166f4:	muleq	r1, ip, sl
   166f8:	andeq	r6, r1, r4, asr #22
   166fc:	andeq	r6, r1, r8, asr sp
   16700:	andeq	r6, r1, r4, asr #22
   16704:	andeq	r6, r1, r8, asr sp
   16708:	andeq	r6, r1, r4, asr #22
   1670c:	andeq	r6, r1, r4, asr #22
   16710:	andeq	r6, r1, r4, asr #22
   16714:	andeq	r6, r1, r4, asr #22
   16718:	andeq	r6, r1, r4, asr #22
   1671c:	andeq	r6, r1, r4, asr #22
   16720:	andeq	r6, r1, r4, asr #22
   16724:	andeq	r6, r1, r4, asr #22
   16728:	andeq	r6, r1, r4, asr #22
   1672c:	andeq	r6, r1, r4, asr #22
   16730:	andeq	r6, r1, r4, asr #22
   16734:	andeq	r6, r1, r4, asr #22
   16738:	andeq	r6, r1, r4, asr #22
   1673c:	andeq	r6, r1, r4, asr #22
   16740:	andeq	r6, r1, r4, asr #22
   16744:	andeq	r6, r1, r4, asr #22
   16748:	andeq	r6, r1, r4, asr #22
   1674c:	andeq	r6, r1, r4, asr #22
   16750:	andeq	r6, r1, r4, asr #22
   16754:	andeq	r6, r1, r4, asr #22
   16758:	andeq	r6, r1, r4, asr #22
   1675c:	andeq	r6, r1, r4, asr #22
   16760:	andeq	r6, r1, r4, asr #22
   16764:	andeq	r6, r1, r4, asr #22
   16768:	andeq	r6, r1, r4, asr #22
   1676c:	andeq	r6, r1, r4, asr #22
   16770:	andeq	r6, r1, r4, asr r9
   16774:	andeq	r6, r1, r8, asr sp
   16778:	andeq	r6, r1, r4, asr r9
   1677c:	andeq	r6, r1, r8, lsr sp
   16780:	mov	r3, #1
   16784:	str	r3, [sp, #40]	; 0x28
   16788:	str	r3, [sp, #68]	; 0x44
   1678c:	mov	r8, #0
   16790:	ldr	r3, [pc, #4056]	; 17770 <__assert_fail@plt+0x656c>
   16794:	str	r3, [sp, #72]	; 0x48
   16798:	mov	r3, #2
   1679c:	str	r3, [sp, #176]	; 0xb0
   167a0:	ldr	r1, [sp, #56]	; 0x38
   167a4:	mov	r2, r3
   167a8:	ldr	ip, [sp, #40]	; 0x28
   167ac:	mov	lr, r3
   167b0:	b	1647c <__assert_fail@plt+0x5278>
   167b4:	mov	r3, #1
   167b8:	str	r3, [sp, #56]	; 0x38
   167bc:	str	r3, [sp, #68]	; 0x44
   167c0:	str	r3, [sp, #40]	; 0x28
   167c4:	ldr	r3, [pc, #4004]	; 17770 <__assert_fail@plt+0x656c>
   167c8:	mov	r8, #0
   167cc:	str	r3, [sp, #72]	; 0x48
   167d0:	b	16798 <__assert_fail@plt+0x5594>
   167d4:	mov	r3, #1
   167d8:	str	r3, [sp, #56]	; 0x38
   167dc:	str	r3, [sp, #68]	; 0x44
   167e0:	str	r3, [sp, #40]	; 0x28
   167e4:	ldr	r3, [pc, #3976]	; 17774 <__assert_fail@plt+0x6570>
   167e8:	mov	r8, #0
   167ec:	str	r3, [sp, #72]	; 0x48
   167f0:	mov	r3, #5
   167f4:	b	1679c <__assert_fail@plt+0x5598>
   167f8:	mov	r3, #0
   167fc:	str	r3, [sp, #40]	; 0x28
   16800:	mov	r3, #1
   16804:	str	r3, [sp, #56]	; 0x38
   16808:	mov	r8, #0
   1680c:	mov	r1, r3
   16810:	ldr	r2, [sp, #176]	; 0xb0
   16814:	ldr	ip, [sp, #40]	; 0x28
   16818:	ldr	lr, [sp, #176]	; 0xb0
   1681c:	b	1647c <__assert_fail@plt+0x5278>
   16820:	ldr	r3, [sp, #176]	; 0xb0
   16824:	cmp	r3, #10
   16828:	beq	1686c <__assert_fail@plt+0x5668>
   1682c:	mov	r2, #5
   16830:	ldr	r1, [pc, #3904]	; 17778 <__assert_fail@plt+0x6574>
   16834:	mov	r0, #0
   16838:	bl	10fc4 <dcgettext@plt>
   1683c:	ldr	r2, [pc, #3892]	; 17778 <__assert_fail@plt+0x6574>
   16840:	cmp	r0, r2
   16844:	str	r0, [sp, #188]	; 0xbc
   16848:	beq	17904 <__assert_fail@plt+0x6700>
   1684c:	mov	r2, #5
   16850:	ldr	r1, [pc, #3864]	; 17770 <__assert_fail@plt+0x656c>
   16854:	mov	r0, #0
   16858:	bl	10fc4 <dcgettext@plt>
   1685c:	ldr	r2, [pc, #3852]	; 17770 <__assert_fail@plt+0x656c>
   16860:	cmp	r0, r2
   16864:	str	r0, [sp, #192]	; 0xc0
   16868:	beq	178f4 <__assert_fail@plt+0x66f0>
   1686c:	ldr	r8, [sp, #40]	; 0x28
   16870:	cmp	r8, #0
   16874:	movne	r8, #0
   16878:	bne	168a8 <__assert_fail@plt+0x56a4>
   1687c:	ldr	r3, [sp, #188]	; 0xbc
   16880:	ldrb	r3, [r3]
   16884:	cmp	r3, #0
   16888:	beq	168a8 <__assert_fail@plt+0x56a4>
   1688c:	ldr	r2, [sp, #188]	; 0xbc
   16890:	cmp	fp, r8
   16894:	strbhi	r3, [r9, r8]
   16898:	ldrb	r3, [r2, #1]!
   1689c:	add	r8, r8, #1
   168a0:	cmp	r3, #0
   168a4:	bne	16890 <__assert_fail@plt+0x568c>
   168a8:	ldr	r0, [sp, #192]	; 0xc0
   168ac:	bl	110c0 <strlen@plt>
   168b0:	ldr	r3, [sp, #192]	; 0xc0
   168b4:	ldr	r2, [sp, #176]	; 0xb0
   168b8:	str	r3, [sp, #72]	; 0x48
   168bc:	mov	r3, #1
   168c0:	str	r3, [sp, #56]	; 0x38
   168c4:	mov	r1, r3
   168c8:	ldr	ip, [sp, #40]	; 0x28
   168cc:	ldr	lr, [sp, #176]	; 0xb0
   168d0:	str	r0, [sp, #68]	; 0x44
   168d4:	b	1647c <__assert_fail@plt+0x5278>
   168d8:	ldr	r3, [sp, #40]	; 0x28
   168dc:	cmp	r3, #0
   168e0:	beq	17588 <__assert_fail@plt+0x6384>
   168e4:	mov	r3, #1
   168e8:	str	r3, [sp, #68]	; 0x44
   168ec:	ldr	r3, [pc, #3708]	; 17770 <__assert_fail@plt+0x656c>
   168f0:	str	r3, [sp, #72]	; 0x48
   168f4:	mov	r8, #0
   168f8:	ldr	r1, [sp, #56]	; 0x38
   168fc:	ldr	r2, [sp, #176]	; 0xb0
   16900:	ldr	ip, [sp, #40]	; 0x28
   16904:	ldr	lr, [sp, #176]	; 0xb0
   16908:	b	1647c <__assert_fail@plt+0x5278>
   1690c:	ldr	r3, [sp, #40]	; 0x28
   16910:	cmp	r3, #0
   16914:	beq	1760c <__assert_fail@plt+0x6408>
   16918:	str	r3, [sp, #56]	; 0x38
   1691c:	mov	r3, #1
   16920:	str	r3, [sp, #68]	; 0x44
   16924:	ldr	r3, [pc, #3656]	; 17774 <__assert_fail@plt+0x6570>
   16928:	b	168f0 <__assert_fail@plt+0x56ec>
   1692c:	ldr	r3, [sp, #40]	; 0x28
   16930:	cmp	r3, #0
   16934:	mov	r3, #1
   16938:	streq	r3, [sp, #56]	; 0x38
   1693c:	beq	17588 <__assert_fail@plt+0x6384>
   16940:	str	r3, [sp, #68]	; 0x44
   16944:	ldr	r3, [pc, #3620]	; 17770 <__assert_fail@plt+0x656c>
   16948:	mov	r8, #0
   1694c:	str	r3, [sp, #72]	; 0x48
   16950:	b	16798 <__assert_fail@plt+0x5594>
   16954:	ldr	r3, [sp, #24]
   16958:	ldr	r6, [sp, #48]	; 0x30
   1695c:	cmn	r3, #1
   16960:	beq	16fbc <__assert_fail@plt+0x5db8>
   16964:	subs	r3, r3, #1
   16968:	movne	r3, #1
   1696c:	cmp	r3, #0
   16970:	beq	16d3c <__assert_fail@plt+0x5b38>
   16974:	ldr	r1, [sp, #52]	; 0x34
   16978:	mov	r7, r3
   1697c:	mov	r3, #0
   16980:	str	r3, [sp, #32]
   16984:	ldr	r3, [sp, #60]	; 0x3c
   16988:	orr	r2, r1, r3
   1698c:	ldr	r3, [sp, #40]	; 0x28
   16990:	eor	r2, r2, #1
   16994:	orr	r2, r3, r2
   16998:	tst	r2, #255	; 0xff
   1699c:	bne	172c0 <__assert_fail@plt+0x60bc>
   169a0:	cmp	r6, #0
   169a4:	bne	16b80 <__assert_fail@plt+0x597c>
   169a8:	ldr	r3, [sp, #36]	; 0x24
   169ac:	add	sl, sl, #1
   169b0:	and	r3, r3, r7
   169b4:	uxtb	r6, r3
   169b8:	cmp	r6, #0
   169bc:	beq	169e8 <__assert_fail@plt+0x57e4>
   169c0:	cmp	fp, r8
   169c4:	movhi	r3, #39	; 0x27
   169c8:	strbhi	r3, [r9, r8]
   169cc:	add	r3, r8, #1
   169d0:	cmp	fp, r3
   169d4:	movhi	r2, #39	; 0x27
   169d8:	add	r8, r8, #2
   169dc:	strbhi	r2, [r9, r3]
   169e0:	mov	r3, #0
   169e4:	str	r3, [sp, #36]	; 0x24
   169e8:	ldr	r2, [sp, #32]
   169ec:	cmp	r8, fp
   169f0:	ldr	r3, [sp, #28]
   169f4:	strbcc	r4, [r9, r8]
   169f8:	cmp	r2, #0
   169fc:	moveq	r3, #0
   16a00:	str	r3, [sp, #28]
   16a04:	ldr	r3, [sp, #24]
   16a08:	add	r8, r8, #1
   16a0c:	cmn	r3, #1
   16a10:	bne	164e8 <__assert_fail@plt+0x52e4>
   16a14:	ldr	r3, [sp, #44]	; 0x2c
   16a18:	ldrb	r3, [r3, sl]
   16a1c:	adds	r7, r3, #0
   16a20:	movne	r7, #1
   16a24:	cmp	r7, #0
   16a28:	bne	164f8 <__assert_fail@plt+0x52f4>
   16a2c:	ldr	r3, [sp, #64]	; 0x40
   16a30:	cmp	r8, #0
   16a34:	movne	r3, #0
   16a38:	andeq	r3, r3, #1
   16a3c:	cmp	r3, #0
   16a40:	str	r3, [sp, #64]	; 0x40
   16a44:	bne	174e8 <__assert_fail@plt+0x62e4>
   16a48:	ldr	r3, [sp, #40]	; 0x28
   16a4c:	ldr	r2, [sp, #52]	; 0x34
   16a50:	eor	r3, r3, #1
   16a54:	ands	r2, r2, r3
   16a58:	beq	17914 <__assert_fail@plt+0x6710>
   16a5c:	ldr	r3, [sp, #76]	; 0x4c
   16a60:	cmp	r3, #0
   16a64:	beq	178e4 <__assert_fail@plt+0x66e0>
   16a68:	ldr	r3, [sp, #28]
   16a6c:	cmp	r3, #0
   16a70:	bne	178a0 <__assert_fail@plt+0x669c>
   16a74:	ldr	r2, [sp, #84]	; 0x54
   16a78:	clz	r3, fp
   16a7c:	cmp	r2, #0
   16a80:	lsr	r3, r3, #5
   16a84:	moveq	r3, #0
   16a88:	cmp	r3, #0
   16a8c:	beq	17840 <__assert_fail@plt+0x663c>
   16a90:	mov	fp, r2
   16a94:	str	r3, [sp, #76]	; 0x4c
   16a98:	b	16424 <__assert_fail@plt+0x5220>
   16a9c:	ldr	r3, [sp, #176]	; 0xb0
   16aa0:	ldr	r6, [sp, #48]	; 0x30
   16aa4:	cmp	r3, #2
   16aa8:	beq	16fe0 <__assert_fail@plt+0x5ddc>
   16aac:	ldr	r3, [sp, #88]	; 0x58
   16ab0:	cmp	r3, #0
   16ab4:	beq	17564 <__assert_fail@plt+0x6360>
   16ab8:	mov	r3, #0
   16abc:	add	sl, sl, #1
   16ac0:	ldr	r6, [sp, #36]	; 0x24
   16ac4:	str	r3, [sp, #32]
   16ac8:	mov	r4, #92	; 0x5c
   16acc:	b	169b8 <__assert_fail@plt+0x57b4>
   16ad0:	ldr	r3, [sp, #176]	; 0xb0
   16ad4:	ldr	r6, [sp, #48]	; 0x30
   16ad8:	cmp	r3, #2
   16adc:	beq	17010 <__assert_fail@plt+0x5e0c>
   16ae0:	cmp	r3, #5
   16ae4:	bne	17574 <__assert_fail@plt+0x6370>
   16ae8:	ldr	r3, [sp, #100]	; 0x64
   16aec:	cmp	r3, #0
   16af0:	beq	175d8 <__assert_fail@plt+0x63d4>
   16af4:	ldr	r2, [sp, #24]
   16af8:	add	r3, sl, #2
   16afc:	cmp	r2, r3
   16b00:	bls	16b10 <__assert_fail@plt+0x590c>
   16b04:	ldrb	r4, [r5, #1]
   16b08:	cmp	r4, #63	; 0x3f
   16b0c:	beq	17780 <__assert_fail@plt+0x657c>
   16b10:	mov	r1, #0
   16b14:	str	r1, [sp, #32]
   16b18:	mov	r4, #63	; 0x3f
   16b1c:	b	16984 <__assert_fail@plt+0x5780>
   16b20:	ldr	r3, [sp, #176]	; 0xb0
   16b24:	ldr	r6, [sp, #48]	; 0x30
   16b28:	cmp	r3, #2
   16b2c:	beq	1703c <__assert_fail@plt+0x5e38>
   16b30:	str	r7, [sp, #32]
   16b34:	str	r7, [sp, #76]	; 0x4c
   16b38:	mov	r1, #0
   16b3c:	mov	r4, #39	; 0x27
   16b40:	b	16984 <__assert_fail@plt+0x5780>
   16b44:	ldr	r6, [sp, #48]	; 0x30
   16b48:	ldr	r1, [sp, #52]	; 0x34
   16b4c:	str	r7, [sp, #32]
   16b50:	b	16984 <__assert_fail@plt+0x5780>
   16b54:	ldr	r6, [sp, #48]	; 0x30
   16b58:	ldr	r1, [sp, #52]	; 0x34
   16b5c:	mov	r4, #12
   16b60:	mov	r3, #102	; 0x66
   16b64:	ldr	r2, [sp, #56]	; 0x38
   16b68:	cmp	r2, #0
   16b6c:	streq	r2, [sp, #32]
   16b70:	beq	16984 <__assert_fail@plt+0x5780>
   16b74:	mov	r4, r3
   16b78:	mov	r3, #0
   16b7c:	str	r3, [sp, #32]
   16b80:	ldr	r3, [sp, #40]	; 0x28
   16b84:	cmp	r3, #0
   16b88:	bne	172f8 <__assert_fail@plt+0x60f4>
   16b8c:	ldr	r3, [sp, #36]	; 0x24
   16b90:	eor	r3, r3, #1
   16b94:	and	r3, r3, r1
   16b98:	ands	r3, r3, #255	; 0xff
   16b9c:	beq	16bd4 <__assert_fail@plt+0x59d0>
   16ba0:	cmp	fp, r8
   16ba4:	movhi	r2, #39	; 0x27
   16ba8:	strbhi	r2, [r9, r8]
   16bac:	add	r2, r8, #1
   16bb0:	cmp	fp, r2
   16bb4:	movhi	r1, #36	; 0x24
   16bb8:	strbhi	r1, [r9, r2]
   16bbc:	add	r2, r8, #2
   16bc0:	cmp	fp, r2
   16bc4:	add	r8, r8, #3
   16bc8:	movhi	r1, #39	; 0x27
   16bcc:	strbhi	r1, [r9, r2]
   16bd0:	str	r3, [sp, #36]	; 0x24
   16bd4:	cmp	fp, r8
   16bd8:	movhi	r3, #92	; 0x5c
   16bdc:	strbhi	r3, [r9, r8]
   16be0:	add	sl, sl, #1
   16be4:	add	r8, r8, #1
   16be8:	b	169e8 <__assert_fail@plt+0x57e4>
   16bec:	ldr	r6, [sp, #48]	; 0x30
   16bf0:	mov	r4, #10
   16bf4:	mov	r3, #110	; 0x6e
   16bf8:	ldr	r2, [sp, #64]	; 0x40
   16bfc:	cmp	r2, #0
   16c00:	bne	17680 <__assert_fail@plt+0x647c>
   16c04:	ldr	r1, [sp, #52]	; 0x34
   16c08:	b	16b64 <__assert_fail@plt+0x5960>
   16c0c:	ldr	r6, [sp, #48]	; 0x30
   16c10:	ldr	r1, [sp, #52]	; 0x34
   16c14:	mov	r3, #116	; 0x74
   16c18:	b	16b64 <__assert_fail@plt+0x5960>
   16c1c:	ldr	r6, [sp, #48]	; 0x30
   16c20:	ldr	r1, [sp, #52]	; 0x34
   16c24:	mov	r4, #11
   16c28:	mov	r3, #118	; 0x76
   16c2c:	b	16b64 <__assert_fail@plt+0x5960>
   16c30:	ldr	r6, [sp, #48]	; 0x30
   16c34:	ldr	r1, [sp, #52]	; 0x34
   16c38:	mov	r4, #8
   16c3c:	mov	r3, #98	; 0x62
   16c40:	b	16b64 <__assert_fail@plt+0x5960>
   16c44:	ldr	r6, [sp, #48]	; 0x30
   16c48:	ldr	r1, [sp, #52]	; 0x34
   16c4c:	mov	r4, #7
   16c50:	mov	r3, #97	; 0x61
   16c54:	b	16b64 <__assert_fail@plt+0x5960>
   16c58:	ldr	r3, [sp, #56]	; 0x38
   16c5c:	ldr	r6, [sp, #48]	; 0x30
   16c60:	cmp	r3, #0
   16c64:	beq	17128 <__assert_fail@plt+0x5f24>
   16c68:	ldr	r3, [sp, #40]	; 0x28
   16c6c:	cmp	r3, #0
   16c70:	bne	1775c <__assert_fail@plt+0x6558>
   16c74:	ldr	r3, [sp, #36]	; 0x24
   16c78:	ldr	r2, [sp, #52]	; 0x34
   16c7c:	eor	r3, r3, #1
   16c80:	ands	r3, r2, r3
   16c84:	moveq	r2, r8
   16c88:	beq	16cc0 <__assert_fail@plt+0x5abc>
   16c8c:	cmp	fp, r8
   16c90:	movhi	r2, #39	; 0x27
   16c94:	strbhi	r2, [r9, r8]
   16c98:	add	r2, r8, #1
   16c9c:	cmp	fp, r2
   16ca0:	movhi	r1, #36	; 0x24
   16ca4:	strbhi	r1, [r9, r2]
   16ca8:	add	r2, r8, #2
   16cac:	cmp	fp, r2
   16cb0:	movhi	r1, #39	; 0x27
   16cb4:	strbhi	r1, [r9, r2]
   16cb8:	add	r2, r8, #3
   16cbc:	str	r3, [sp, #36]	; 0x24
   16cc0:	cmp	fp, r2
   16cc4:	movhi	r3, #92	; 0x5c
   16cc8:	strbhi	r3, [r9, r2]
   16ccc:	ldr	r3, [sp, #92]	; 0x5c
   16cd0:	add	r8, r2, #1
   16cd4:	cmp	r3, #0
   16cd8:	beq	1765c <__assert_fail@plt+0x6458>
   16cdc:	ldr	r1, [sp, #24]
   16ce0:	add	r3, sl, #1
   16ce4:	cmp	r1, r3
   16ce8:	bls	16d20 <__assert_fail@plt+0x5b1c>
   16cec:	ldr	r1, [sp, #44]	; 0x2c
   16cf0:	ldrb	r3, [r1, r3]
   16cf4:	sub	r3, r3, #48	; 0x30
   16cf8:	cmp	r3, #9
   16cfc:	bhi	16d20 <__assert_fail@plt+0x5b1c>
   16d00:	cmp	fp, r8
   16d04:	movhi	r3, #48	; 0x30
   16d08:	strbhi	r3, [r9, r8]
   16d0c:	add	r3, r2, #2
   16d10:	cmp	fp, r3
   16d14:	add	r8, r2, #3
   16d18:	movhi	r1, #48	; 0x30
   16d1c:	strbhi	r1, [r9, r3]
   16d20:	ldr	r3, [sp, #40]	; 0x28
   16d24:	ldr	r1, [sp, #52]	; 0x34
   16d28:	mov	r7, r3
   16d2c:	str	r3, [sp, #32]
   16d30:	mov	r4, #48	; 0x30
   16d34:	b	16984 <__assert_fail@plt+0x5780>
   16d38:	ldr	r6, [sp, #48]	; 0x30
   16d3c:	cmp	sl, #0
   16d40:	streq	r7, [sp, #32]
   16d44:	beq	16d64 <__assert_fail@plt+0x5b60>
   16d48:	mov	r3, #0
   16d4c:	ldr	r1, [sp, #52]	; 0x34
   16d50:	str	r3, [sp, #32]
   16d54:	b	16984 <__assert_fail@plt+0x5780>
   16d58:	ldr	r6, [sp, #48]	; 0x30
   16d5c:	mov	r3, #0
   16d60:	str	r3, [sp, #32]
   16d64:	ldr	r3, [sp, #64]	; 0x40
   16d68:	cmp	r3, #0
   16d6c:	bne	174e8 <__assert_fail@plt+0x62e4>
   16d70:	ldr	r1, [sp, #52]	; 0x34
   16d74:	b	16984 <__assert_fail@plt+0x5780>
   16d78:	ldr	r3, [sp, #48]	; 0x30
   16d7c:	mov	r6, r3
   16d80:	str	r3, [sp, #32]
   16d84:	b	16d64 <__assert_fail@plt+0x5b60>
   16d88:	ldr	r6, [sp, #48]	; 0x30
   16d8c:	mov	r4, #13
   16d90:	mov	r3, #114	; 0x72
   16d94:	b	16bf8 <__assert_fail@plt+0x59f4>
   16d98:	ldr	r3, [sp, #44]	; 0x2c
   16d9c:	add	r5, r3, sl
   16da0:	ldrb	r4, [r5]
   16da4:	cmp	r4, #126	; 0x7e
   16da8:	ldrls	pc, [pc, r4, lsl #2]
   16dac:	b	17148 <__assert_fail@plt+0x5f44>
   16db0:	andeq	r7, r1, r8, lsl r1
   16db4:	andeq	r7, r1, r8, asr #2
   16db8:	andeq	r7, r1, r8, asr #2
   16dbc:	andeq	r7, r1, r8, asr #2
   16dc0:	andeq	r7, r1, r8, asr #2
   16dc4:	andeq	r7, r1, r8, asr #2
   16dc8:	andeq	r7, r1, r8, asr #2
   16dcc:	andeq	r7, r1, r0, lsl r1
   16dd0:	andeq	r7, r1, r8, lsl #2
   16dd4:	strdeq	r7, [r1], -ip
   16dd8:	strdeq	r7, [r1], -r4
   16ddc:	andeq	r7, r1, ip, ror #1
   16de0:	andeq	r7, r1, r4, ror #1
   16de4:	ldrdeq	r7, [r1], -ip
   16de8:	andeq	r7, r1, r8, asr #2
   16dec:	andeq	r7, r1, r8, asr #2
   16df0:	andeq	r7, r1, r8, asr #2
   16df4:	andeq	r7, r1, r8, asr #2
   16df8:	andeq	r7, r1, r8, asr #2
   16dfc:	andeq	r7, r1, r8, asr #2
   16e00:	andeq	r7, r1, r8, asr #2
   16e04:	andeq	r7, r1, r8, asr #2
   16e08:	andeq	r7, r1, r8, asr #2
   16e0c:	andeq	r7, r1, r8, asr #2
   16e10:	andeq	r7, r1, r8, asr #2
   16e14:	andeq	r7, r1, r8, asr #2
   16e18:	andeq	r7, r1, r8, asr #2
   16e1c:	andeq	r7, r1, r8, asr #2
   16e20:	andeq	r7, r1, r8, asr #2
   16e24:	andeq	r7, r1, r8, asr #2
   16e28:	andeq	r7, r1, r8, asr #2
   16e2c:	andeq	r7, r1, r8, asr #2
   16e30:	ldrdeq	r7, [r1], -r0
   16e34:	andeq	r7, r1, r8, asr #1
   16e38:	andeq	r7, r1, r8, asr #1
   16e3c:	andeq	r7, r1, r0, asr #1
   16e40:	andeq	r7, r1, r8, asr #1
   16e44:	strheq	r7, [r1], -r8
   16e48:	andeq	r7, r1, r8, asr #1
   16e4c:	andeq	r7, r1, ip, lsr #32
   16e50:	andeq	r7, r1, r8, asr #1
   16e54:	andeq	r7, r1, r8, asr #1
   16e58:	andeq	r7, r1, r8, asr #1
   16e5c:	strheq	r7, [r1], -r8
   16e60:	strheq	r7, [r1], -r8
   16e64:	strheq	r7, [r1], -r8
   16e68:	strheq	r7, [r1], -r8
   16e6c:	strheq	r7, [r1], -r8
   16e70:	strheq	r7, [r1], -r8
   16e74:	strheq	r7, [r1], -r8
   16e78:	strheq	r7, [r1], -r8
   16e7c:	strheq	r7, [r1], -r8
   16e80:	strheq	r7, [r1], -r8
   16e84:	strheq	r7, [r1], -r8
   16e88:	strheq	r7, [r1], -r8
   16e8c:	strheq	r7, [r1], -r8
   16e90:	strheq	r7, [r1], -r8
   16e94:	strheq	r7, [r1], -r8
   16e98:	strheq	r7, [r1], -r8
   16e9c:	andeq	r7, r1, r8, asr #1
   16ea0:	andeq	r7, r1, r8, asr #1
   16ea4:	andeq	r7, r1, r8, asr #1
   16ea8:	andeq	r7, r1, r8, asr #1
   16eac:	andeq	r7, r1, r0
   16eb0:	andeq	r7, r1, r8, asr #2
   16eb4:	strheq	r7, [r1], -r8
   16eb8:	strheq	r7, [r1], -r8
   16ebc:	strheq	r7, [r1], -r8
   16ec0:	strheq	r7, [r1], -r8
   16ec4:	strheq	r7, [r1], -r8
   16ec8:	strheq	r7, [r1], -r8
   16ecc:	strheq	r7, [r1], -r8
   16ed0:	strheq	r7, [r1], -r8
   16ed4:	strheq	r7, [r1], -r8
   16ed8:	strheq	r7, [r1], -r8
   16edc:	strheq	r7, [r1], -r8
   16ee0:	strheq	r7, [r1], -r8
   16ee4:	strheq	r7, [r1], -r8
   16ee8:	strheq	r7, [r1], -r8
   16eec:	strheq	r7, [r1], -r8
   16ef0:	strheq	r7, [r1], -r8
   16ef4:	strheq	r7, [r1], -r8
   16ef8:	strheq	r7, [r1], -r8
   16efc:	strheq	r7, [r1], -r8
   16f00:	strheq	r7, [r1], -r8
   16f04:	strheq	r7, [r1], -r8
   16f08:	strheq	r7, [r1], -r8
   16f0c:	strheq	r7, [r1], -r8
   16f10:	strheq	r7, [r1], -r8
   16f14:	strheq	r7, [r1], -r8
   16f18:	strheq	r7, [r1], -r8
   16f1c:	andeq	r7, r1, r8, asr #1
   16f20:	ldrdeq	r6, [r1], -r0
   16f24:	strheq	r7, [r1], -r8
   16f28:	andeq	r7, r1, r8, asr #1
   16f2c:	strheq	r7, [r1], -r8
   16f30:	andeq	r7, r1, r8, asr #1
   16f34:	strheq	r7, [r1], -r8
   16f38:	strheq	r7, [r1], -r8
   16f3c:	strheq	r7, [r1], -r8
   16f40:	strheq	r7, [r1], -r8
   16f44:	strheq	r7, [r1], -r8
   16f48:	strheq	r7, [r1], -r8
   16f4c:	strheq	r7, [r1], -r8
   16f50:	strheq	r7, [r1], -r8
   16f54:	strheq	r7, [r1], -r8
   16f58:	strheq	r7, [r1], -r8
   16f5c:	strheq	r7, [r1], -r8
   16f60:	strheq	r7, [r1], -r8
   16f64:	strheq	r7, [r1], -r8
   16f68:	strheq	r7, [r1], -r8
   16f6c:	strheq	r7, [r1], -r8
   16f70:	strheq	r7, [r1], -r8
   16f74:	strheq	r7, [r1], -r8
   16f78:	strheq	r7, [r1], -r8
   16f7c:	strheq	r7, [r1], -r8
   16f80:	strheq	r7, [r1], -r8
   16f84:	strheq	r7, [r1], -r8
   16f88:	strheq	r7, [r1], -r8
   16f8c:	strheq	r7, [r1], -r8
   16f90:	strheq	r7, [r1], -r8
   16f94:	strheq	r7, [r1], -r8
   16f98:	strheq	r7, [r1], -r8
   16f9c:	andeq	r6, r1, ip, lsr #31
   16fa0:	andeq	r7, r1, r8, asr #1
   16fa4:	andeq	r6, r1, ip, lsr #31
   16fa8:	andeq	r7, r1, r0, asr #1
   16fac:	ldr	r3, [sp, #24]
   16fb0:	mov	r6, #0
   16fb4:	cmn	r3, #1
   16fb8:	bne	16964 <__assert_fail@plt+0x5760>
   16fbc:	ldr	r3, [sp, #44]	; 0x2c
   16fc0:	ldrb	r3, [r3, #1]
   16fc4:	adds	r3, r3, #0
   16fc8:	movne	r3, #1
   16fcc:	b	1696c <__assert_fail@plt+0x5768>
   16fd0:	ldr	r3, [sp, #176]	; 0xb0
   16fd4:	mov	r6, #0
   16fd8:	cmp	r3, #2
   16fdc:	bne	16aac <__assert_fail@plt+0x58a8>
   16fe0:	ldr	r3, [sp, #64]	; 0x40
   16fe4:	cmp	r3, #0
   16fe8:	bne	17820 <__assert_fail@plt+0x661c>
   16fec:	add	sl, sl, #1
   16ff0:	ldr	r6, [sp, #36]	; 0x24
   16ff4:	str	r3, [sp, #32]
   16ff8:	mov	r4, #92	; 0x5c
   16ffc:	b	169b8 <__assert_fail@plt+0x57b4>
   17000:	ldr	r3, [sp, #176]	; 0xb0
   17004:	mov	r6, #0
   17008:	cmp	r3, #2
   1700c:	bne	16ae0 <__assert_fail@plt+0x58dc>
   17010:	ldr	r3, [sp, #40]	; 0x28
   17014:	cmp	r3, #0
   17018:	bne	172fc <__assert_fail@plt+0x60f8>
   1701c:	mov	r1, r7
   17020:	str	r3, [sp, #32]
   17024:	mov	r4, #63	; 0x3f
   17028:	b	16984 <__assert_fail@plt+0x5780>
   1702c:	ldr	r3, [sp, #176]	; 0xb0
   17030:	mov	r6, #0
   17034:	cmp	r3, #2
   17038:	bne	16b30 <__assert_fail@plt+0x592c>
   1703c:	ldr	r3, [sp, #64]	; 0x40
   17040:	cmp	r3, #0
   17044:	bne	17820 <__assert_fail@plt+0x661c>
   17048:	ldr	r2, [sp, #84]	; 0x54
   1704c:	adds	r3, fp, #0
   17050:	movne	r3, #1
   17054:	cmp	r2, #0
   17058:	movne	r3, #0
   1705c:	cmp	r3, #0
   17060:	strne	fp, [sp, #84]	; 0x54
   17064:	movne	fp, #0
   17068:	bne	17098 <__assert_fail@plt+0x5e94>
   1706c:	cmp	fp, r8
   17070:	movhi	r3, #39	; 0x27
   17074:	strbhi	r3, [r9, r8]
   17078:	add	r3, r8, #1
   1707c:	cmp	fp, r3
   17080:	movhi	r2, #92	; 0x5c
   17084:	strbhi	r2, [r9, r3]
   17088:	add	r3, r8, #2
   1708c:	cmp	fp, r3
   17090:	movhi	r2, #39	; 0x27
   17094:	strbhi	r2, [r9, r3]
   17098:	ldr	r3, [sp, #64]	; 0x40
   1709c:	add	r8, r8, #3
   170a0:	mov	r1, r7
   170a4:	str	r7, [sp, #32]
   170a8:	str	r7, [sp, #76]	; 0x4c
   170ac:	str	r3, [sp, #36]	; 0x24
   170b0:	mov	r4, #39	; 0x27
   170b4:	b	16984 <__assert_fail@plt+0x5780>
   170b8:	mov	r6, #0
   170bc:	b	16b48 <__assert_fail@plt+0x5944>
   170c0:	mov	r6, #0
   170c4:	b	16d3c <__assert_fail@plt+0x5b38>
   170c8:	mov	r6, #0
   170cc:	b	16d5c <__assert_fail@plt+0x5b58>
   170d0:	str	r7, [sp, #32]
   170d4:	mov	r6, #0
   170d8:	b	16d64 <__assert_fail@plt+0x5b60>
   170dc:	mov	r6, #0
   170e0:	b	16d8c <__assert_fail@plt+0x5b88>
   170e4:	mov	r6, #0
   170e8:	b	16b58 <__assert_fail@plt+0x5954>
   170ec:	mov	r6, #0
   170f0:	b	16c20 <__assert_fail@plt+0x5a1c>
   170f4:	mov	r6, #0
   170f8:	b	16bf0 <__assert_fail@plt+0x59ec>
   170fc:	mov	r6, #0
   17100:	mov	r3, #116	; 0x74
   17104:	b	16bf8 <__assert_fail@plt+0x59f4>
   17108:	mov	r6, #0
   1710c:	b	16c34 <__assert_fail@plt+0x5a30>
   17110:	mov	r6, #0
   17114:	b	16c48 <__assert_fail@plt+0x5a44>
   17118:	ldr	r3, [sp, #56]	; 0x38
   1711c:	mov	r6, #0
   17120:	cmp	r3, #0
   17124:	bne	16c68 <__assert_fail@plt+0x5a64>
   17128:	ldr	r3, [sp, #96]	; 0x60
   1712c:	cmp	r3, #0
   17130:	addne	sl, sl, #1
   17134:	bne	164dc <__assert_fail@plt+0x52d8>
   17138:	ldr	r1, [sp, #52]	; 0x34
   1713c:	str	r3, [sp, #32]
   17140:	mov	r4, r3
   17144:	b	16984 <__assert_fail@plt+0x5780>
   17148:	mov	r6, #0
   1714c:	ldr	r3, [sp, #80]	; 0x50
   17150:	cmp	r3, #1
   17154:	bne	17344 <__assert_fail@plt+0x6140>
   17158:	bl	110a8 <__ctype_b_loc@plt>
   1715c:	ldr	r2, [sp, #80]	; 0x50
   17160:	sxth	r3, r4
   17164:	mov	r1, r2
   17168:	lsl	r3, r3, #1
   1716c:	ldr	r2, [r0]
   17170:	ldrh	r3, [r2, r3]
   17174:	and	r3, r3, #16384	; 0x4000
   17178:	cmp	r3, #0
   1717c:	movne	r3, #1
   17180:	moveq	r3, #0
   17184:	str	r3, [sp, #32]
   17188:	moveq	r3, #1
   1718c:	movne	r3, #0
   17190:	ldr	r2, [sp, #56]	; 0x38
   17194:	and	r3, r3, r2
   17198:	ands	r3, r3, #255	; 0xff
   1719c:	beq	16d70 <__assert_fail@plt+0x5b6c>
   171a0:	add	r1, sl, r1
   171a4:	mov	r0, #0
   171a8:	ldr	r7, [sp, #40]	; 0x28
   171ac:	ldr	r2, [sp, #36]	; 0x24
   171b0:	ldr	lr, [sp, #52]	; 0x34
   171b4:	b	17264 <__assert_fail@plt+0x6060>
   171b8:	cmp	r7, #0
   171bc:	bne	175b8 <__assert_fail@plt+0x63b4>
   171c0:	eor	r0, r2, #1
   171c4:	ands	r0, lr, r0
   171c8:	beq	17200 <__assert_fail@plt+0x5ffc>
   171cc:	cmp	fp, r8
   171d0:	movhi	r2, #39	; 0x27
   171d4:	strbhi	r2, [r9, r8]
   171d8:	add	r2, r8, #1
   171dc:	cmp	fp, r2
   171e0:	movhi	ip, #36	; 0x24
   171e4:	strbhi	ip, [r9, r2]
   171e8:	add	r2, r8, #2
   171ec:	cmp	fp, r2
   171f0:	movhi	ip, #39	; 0x27
   171f4:	strbhi	ip, [r9, r2]
   171f8:	add	r8, r8, #3
   171fc:	mov	r2, r0
   17200:	cmp	fp, r8
   17204:	movhi	r0, #92	; 0x5c
   17208:	strbhi	r0, [r9, r8]
   1720c:	add	r0, r8, #1
   17210:	cmp	fp, r0
   17214:	lsrhi	ip, r4, #6
   17218:	addhi	ip, ip, #48	; 0x30
   1721c:	strbhi	ip, [r9, r0]
   17220:	add	ip, r8, #2
   17224:	cmp	fp, ip
   17228:	lsrhi	r0, r4, #3
   1722c:	andhi	r0, r0, #7
   17230:	addhi	r0, r0, #48	; 0x30
   17234:	add	sl, sl, #1
   17238:	strbhi	r0, [r9, ip]
   1723c:	and	r4, r4, #7
   17240:	cmp	sl, r1
   17244:	add	r4, r4, #48	; 0x30
   17248:	add	r8, r8, #3
   1724c:	bcs	175d0 <__assert_fail@plt+0x63cc>
   17250:	mov	r0, r3
   17254:	cmp	fp, r8
   17258:	strbhi	r4, [r9, r8]
   1725c:	ldrb	r4, [r5, #1]!
   17260:	add	r8, r8, #1
   17264:	cmp	r3, #0
   17268:	bne	171b8 <__assert_fail@plt+0x5fb4>
   1726c:	cmp	r6, #0
   17270:	bne	17314 <__assert_fail@plt+0x6110>
   17274:	eor	r6, r0, #1
   17278:	and	r6, r6, r2
   1727c:	add	sl, sl, #1
   17280:	cmp	r1, sl
   17284:	uxtb	r6, r6
   17288:	bls	1733c <__assert_fail@plt+0x6138>
   1728c:	cmp	r6, #0
   17290:	beq	17254 <__assert_fail@plt+0x6050>
   17294:	cmp	fp, r8
   17298:	movhi	r2, #39	; 0x27
   1729c:	strbhi	r2, [r9, r8]
   172a0:	add	r2, r8, #1
   172a4:	cmp	fp, r2
   172a8:	movhi	ip, #39	; 0x27
   172ac:	strbhi	ip, [r9, r2]
   172b0:	add	r8, r8, #2
   172b4:	mov	r6, r3
   172b8:	mov	r2, r3
   172bc:	b	17254 <__assert_fail@plt+0x6050>
   172c0:	ldr	r3, [sp, #184]	; 0xb8
   172c4:	cmp	r3, #0
   172c8:	beq	169a0 <__assert_fail@plt+0x579c>
   172cc:	lsr	r2, r4, #5
   172d0:	mov	r0, r3
   172d4:	uxtb	r2, r2
   172d8:	and	r3, r4, #31
   172dc:	ldr	r2, [r0, r2, lsl #2]
   172e0:	lsr	r3, r2, r3
   172e4:	tst	r3, #1
   172e8:	beq	169a0 <__assert_fail@plt+0x579c>
   172ec:	ldr	r3, [sp, #40]	; 0x28
   172f0:	cmp	r3, #0
   172f4:	beq	16b8c <__assert_fail@plt+0x5988>
   172f8:	mov	r3, r1
   172fc:	str	r3, [sp, #64]	; 0x40
   17300:	mov	sl, r9
   17304:	ldr	r3, [sp, #56]	; 0x38
   17308:	mov	r9, fp
   1730c:	ldr	r2, [sp, #64]	; 0x40
   17310:	b	17500 <__assert_fail@plt+0x62fc>
   17314:	cmp	fp, r8
   17318:	eor	r6, r0, #1
   1731c:	movhi	ip, #92	; 0x5c
   17320:	and	r6, r6, r2
   17324:	add	sl, sl, #1
   17328:	strbhi	ip, [r9, r8]
   1732c:	cmp	r1, sl
   17330:	add	r8, r8, #1
   17334:	uxtb	r6, r6
   17338:	bhi	1728c <__assert_fail@plt+0x6088>
   1733c:	str	r2, [sp, #36]	; 0x24
   17340:	b	169b8 <__assert_fail@plt+0x57b4>
   17344:	ldr	r3, [sp, #24]
   17348:	cmn	r3, #1
   1734c:	mov	r3, #0
   17350:	str	r3, [sp, #128]	; 0x80
   17354:	str	r3, [sp, #132]	; 0x84
   17358:	beq	1764c <__assert_fail@plt+0x6448>
   1735c:	mov	r2, r7
   17360:	mov	r3, #0
   17364:	str	r7, [sp, #104]	; 0x68
   17368:	str	r5, [sp, #116]	; 0x74
   1736c:	mov	r7, r3
   17370:	mov	r5, r2
   17374:	str	r4, [sp, #32]
   17378:	str	r6, [sp, #108]	; 0x6c
   1737c:	str	r8, [sp, #112]	; 0x70
   17380:	ldr	r3, [sp, #44]	; 0x2c
   17384:	add	r6, sl, r7
   17388:	add	r4, r3, r6
   1738c:	ldr	r3, [sp, #24]
   17390:	mov	r1, r4
   17394:	sub	r2, r3, r6
   17398:	add	r0, sp, #124	; 0x7c
   1739c:	add	r3, sp, #128	; 0x80
   173a0:	bl	1c504 <__assert_fail@plt+0xb300>
   173a4:	subs	r8, r0, #0
   173a8:	beq	17730 <__assert_fail@plt+0x652c>
   173ac:	cmn	r8, #1
   173b0:	beq	17708 <__assert_fail@plt+0x6504>
   173b4:	cmn	r8, #2
   173b8:	beq	176a0 <__assert_fail@plt+0x649c>
   173bc:	ldr	r3, [sp, #64]	; 0x40
   173c0:	cmp	r3, #0
   173c4:	beq	17484 <__assert_fail@plt+0x6280>
   173c8:	cmp	r8, #1
   173cc:	beq	17484 <__assert_fail@plt+0x6280>
   173d0:	sub	r3, r8, #1
   173d4:	add	r6, r3, r6
   173d8:	ldr	r3, [sp, #44]	; 0x2c
   173dc:	add	r6, r3, r6
   173e0:	ldrb	r3, [r4, #1]!
   173e4:	sub	r3, r3, #91	; 0x5b
   173e8:	cmp	r3, #33	; 0x21
   173ec:	ldrls	pc, [pc, r3, lsl #2]
   173f0:	b	1747c <__assert_fail@plt+0x6278>
   173f4:	andeq	r7, r1, r8, ror #9
   173f8:	andeq	r7, r1, r8, ror #9
   173fc:	andeq	r7, r1, ip, ror r4
   17400:	andeq	r7, r1, r8, ror #9
   17404:	andeq	r7, r1, ip, ror r4
   17408:	andeq	r7, r1, r8, ror #9
   1740c:	andeq	r7, r1, ip, ror r4
   17410:	andeq	r7, r1, ip, ror r4
   17414:	andeq	r7, r1, ip, ror r4
   17418:	andeq	r7, r1, ip, ror r4
   1741c:	andeq	r7, r1, ip, ror r4
   17420:	andeq	r7, r1, ip, ror r4
   17424:	andeq	r7, r1, ip, ror r4
   17428:	andeq	r7, r1, ip, ror r4
   1742c:	andeq	r7, r1, ip, ror r4
   17430:	andeq	r7, r1, ip, ror r4
   17434:	andeq	r7, r1, ip, ror r4
   17438:	andeq	r7, r1, ip, ror r4
   1743c:	andeq	r7, r1, ip, ror r4
   17440:	andeq	r7, r1, ip, ror r4
   17444:	andeq	r7, r1, ip, ror r4
   17448:	andeq	r7, r1, ip, ror r4
   1744c:	andeq	r7, r1, ip, ror r4
   17450:	andeq	r7, r1, ip, ror r4
   17454:	andeq	r7, r1, ip, ror r4
   17458:	andeq	r7, r1, ip, ror r4
   1745c:	andeq	r7, r1, ip, ror r4
   17460:	andeq	r7, r1, ip, ror r4
   17464:	andeq	r7, r1, ip, ror r4
   17468:	andeq	r7, r1, ip, ror r4
   1746c:	andeq	r7, r1, ip, ror r4
   17470:	andeq	r7, r1, ip, ror r4
   17474:	andeq	r7, r1, ip, ror r4
   17478:	andeq	r7, r1, r8, ror #9
   1747c:	cmp	r6, r4
   17480:	bne	173e0 <__assert_fail@plt+0x61dc>
   17484:	ldr	r0, [sp, #124]	; 0x7c
   17488:	bl	10fe8 <iswprint@plt>
   1748c:	add	r7, r7, r8
   17490:	cmp	r0, #0
   17494:	add	r0, sp, #128	; 0x80
   17498:	moveq	r5, #0
   1749c:	bl	10f88 <mbsinit@plt>
   174a0:	cmp	r0, #0
   174a4:	beq	17380 <__assert_fail@plt+0x617c>
   174a8:	ldr	r4, [sp, #32]
   174ac:	str	r5, [sp, #32]
   174b0:	ldr	r3, [sp, #32]
   174b4:	mov	r1, r7
   174b8:	eor	r3, r3, #1
   174bc:	ldr	r7, [sp, #104]	; 0x68
   174c0:	ldr	r6, [sp, #108]	; 0x6c
   174c4:	ldr	r8, [sp, #112]	; 0x70
   174c8:	ldr	r5, [sp, #116]	; 0x74
   174cc:	uxtb	r3, r3
   174d0:	cmp	r1, #1
   174d4:	bls	17190 <__assert_fail@plt+0x5f8c>
   174d8:	ldr	r2, [sp, #56]	; 0x38
   174dc:	and	r3, r3, r2
   174e0:	uxtb	r3, r3
   174e4:	b	171a0 <__assert_fail@plt+0x5f9c>
   174e8:	mov	r3, #2
   174ec:	str	r3, [sp, #176]	; 0xb0
   174f0:	ldr	r2, [sp, #64]	; 0x40
   174f4:	ldr	r3, [sp, #56]	; 0x38
   174f8:	mov	sl, r9
   174fc:	mov	r9, fp
   17500:	and	r3, r3, r2
   17504:	tst	r3, #255	; 0xff
   17508:	ldr	r3, [sp, #176]	; 0xb0
   1750c:	movne	r3, #4
   17510:	str	r3, [sp, #176]	; 0xb0
   17514:	ldr	r3, [sp, #180]	; 0xb4
   17518:	mov	ip, #0
   1751c:	bic	r3, r3, #2
   17520:	str	r3, [sp, #4]
   17524:	ldr	r3, [sp, #192]	; 0xc0
   17528:	ldr	r2, [sp, #44]	; 0x2c
   1752c:	str	r3, [sp, #16]
   17530:	ldr	r3, [sp, #188]	; 0xbc
   17534:	mov	r1, r9
   17538:	str	r3, [sp, #12]
   1753c:	ldr	r3, [sp, #176]	; 0xb0
   17540:	mov	r0, sl
   17544:	str	r3, [sp]
   17548:	str	ip, [sp, #8]
   1754c:	ldr	r3, [sp, #24]
   17550:	bl	163b0 <__assert_fail@plt+0x51ac>
   17554:	mov	fp, r0
   17558:	mov	r0, fp
   1755c:	add	sp, sp, #140	; 0x8c
   17560:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17564:	mov	r4, #92	; 0x5c
   17568:	mov	r1, #0
   1756c:	mov	r3, r4
   17570:	b	16b64 <__assert_fail@plt+0x5960>
   17574:	mov	r3, #0
   17578:	ldr	r1, [sp, #52]	; 0x34
   1757c:	str	r3, [sp, #32]
   17580:	mov	r4, #63	; 0x3f
   17584:	b	16984 <__assert_fail@plt+0x5780>
   17588:	cmp	fp, #0
   1758c:	beq	175e8 <__assert_fail@plt+0x63e4>
   17590:	mov	r3, #39	; 0x27
   17594:	strb	r3, [r9]
   17598:	mov	r3, #0
   1759c:	str	r3, [sp, #40]	; 0x28
   175a0:	mov	r3, #1
   175a4:	str	r3, [sp, #68]	; 0x44
   175a8:	ldr	r3, [pc, #448]	; 17770 <__assert_fail@plt+0x656c>
   175ac:	mov	r8, #1
   175b0:	str	r3, [sp, #72]	; 0x48
   175b4:	b	16798 <__assert_fail@plt+0x5594>
   175b8:	ldr	r3, [sp, #40]	; 0x28
   175bc:	mov	sl, r9
   175c0:	str	r3, [sp, #56]	; 0x38
   175c4:	mov	r9, fp
   175c8:	ldr	r2, [sp, #64]	; 0x40
   175cc:	b	17500 <__assert_fail@plt+0x62fc>
   175d0:	str	r2, [sp, #36]	; 0x24
   175d4:	b	169e8 <__assert_fail@plt+0x57e4>
   175d8:	mov	r1, #0
   175dc:	str	r3, [sp, #32]
   175e0:	mov	r4, #63	; 0x3f
   175e4:	b	16984 <__assert_fail@plt+0x5780>
   175e8:	ldr	r3, [pc, #384]	; 17770 <__assert_fail@plt+0x656c>
   175ec:	str	r3, [sp, #72]	; 0x48
   175f0:	mov	r3, #0
   175f4:	str	r3, [sp, #40]	; 0x28
   175f8:	mov	r3, #1
   175fc:	str	r3, [sp, #68]	; 0x44
   17600:	mov	r8, r3
   17604:	b	16798 <__assert_fail@plt+0x5594>
   17608:	bl	111ec <abort@plt>
   1760c:	cmp	fp, #0
   17610:	beq	17670 <__assert_fail@plt+0x646c>
   17614:	mov	r2, #1
   17618:	mov	r3, #34	; 0x22
   1761c:	strb	r3, [r9]
   17620:	mov	r8, r2
   17624:	mov	r3, r2
   17628:	str	r2, [sp, #68]	; 0x44
   1762c:	str	r3, [sp, #56]	; 0x38
   17630:	ldr	r3, [pc, #316]	; 17774 <__assert_fail@plt+0x6570>
   17634:	ldr	r1, [sp, #56]	; 0x38
   17638:	str	r3, [sp, #72]	; 0x48
   1763c:	ldr	r2, [sp, #176]	; 0xb0
   17640:	ldr	ip, [sp, #40]	; 0x28
   17644:	ldr	lr, [sp, #176]	; 0xb0
   17648:	b	1647c <__assert_fail@plt+0x5278>
   1764c:	ldr	r0, [sp, #44]	; 0x2c
   17650:	bl	110c0 <strlen@plt>
   17654:	str	r0, [sp, #24]
   17658:	b	1735c <__assert_fail@plt+0x6158>
   1765c:	mov	r7, #0
   17660:	ldr	r1, [sp, #52]	; 0x34
   17664:	str	r3, [sp, #32]
   17668:	mov	r4, #48	; 0x30
   1766c:	b	16984 <__assert_fail@plt+0x5780>
   17670:	mov	r3, #1
   17674:	str	r3, [sp, #68]	; 0x44
   17678:	mov	r8, r3
   1767c:	b	1762c <__assert_fail@plt+0x6428>
   17680:	mov	r3, #2
   17684:	mov	sl, r9
   17688:	str	r3, [sp, #176]	; 0xb0
   1768c:	mov	r9, fp
   17690:	ldr	r3, [sp, #56]	; 0x38
   17694:	b	17500 <__assert_fail@plt+0x62fc>
   17698:	ldr	r6, [sp, #48]	; 0x30
   1769c:	b	1714c <__assert_fail@plt+0x5f48>
   176a0:	ldr	r0, [sp, #24]
   176a4:	mov	ip, r6
   176a8:	cmp	r0, ip
   176ac:	mov	r1, r7
   176b0:	mov	r2, r4
   176b4:	ldr	r7, [sp, #104]	; 0x68
   176b8:	ldr	r4, [sp, #32]
   176bc:	ldr	r6, [sp, #108]	; 0x6c
   176c0:	ldr	r8, [sp, #112]	; 0x70
   176c4:	ldr	r5, [sp, #116]	; 0x74
   176c8:	bls	176f8 <__assert_fail@plt+0x64f4>
   176cc:	ldrb	r3, [r2]
   176d0:	cmp	r3, #0
   176d4:	bne	176e8 <__assert_fail@plt+0x64e4>
   176d8:	b	17808 <__assert_fail@plt+0x6604>
   176dc:	ldrb	r3, [r2, #1]!
   176e0:	cmp	r3, #0
   176e4:	beq	17808 <__assert_fail@plt+0x6604>
   176e8:	add	r1, r1, #1
   176ec:	add	r3, sl, r1
   176f0:	cmp	r0, r3
   176f4:	bhi	176dc <__assert_fail@plt+0x64d8>
   176f8:	mov	r2, #0
   176fc:	mov	r3, r7
   17700:	str	r2, [sp, #32]
   17704:	b	174d0 <__assert_fail@plt+0x62cc>
   17708:	mov	r1, r7
   1770c:	ldr	r7, [sp, #104]	; 0x68
   17710:	mov	r2, #0
   17714:	ldr	r4, [sp, #32]
   17718:	ldr	r6, [sp, #108]	; 0x6c
   1771c:	ldr	r8, [sp, #112]	; 0x70
   17720:	ldr	r5, [sp, #116]	; 0x74
   17724:	mov	r3, r7
   17728:	str	r2, [sp, #32]
   1772c:	b	174d0 <__assert_fail@plt+0x62cc>
   17730:	mov	r3, r5
   17734:	eor	r3, r3, #1
   17738:	ldr	r4, [sp, #32]
   1773c:	mov	r1, r7
   17740:	str	r5, [sp, #32]
   17744:	ldr	r7, [sp, #104]	; 0x68
   17748:	ldr	r6, [sp, #108]	; 0x6c
   1774c:	ldr	r8, [sp, #112]	; 0x70
   17750:	ldr	r5, [sp, #116]	; 0x74
   17754:	uxtb	r3, r3
   17758:	b	174d0 <__assert_fail@plt+0x62cc>
   1775c:	mov	sl, r9
   17760:	str	r3, [sp, #56]	; 0x38
   17764:	mov	r9, fp
   17768:	ldr	r2, [sp, #64]	; 0x40
   1776c:	b	17500 <__assert_fail@plt+0x62fc>
   17770:	muleq	r1, r8, r4
   17774:	muleq	r1, r4, r4
   17778:	muleq	r1, ip, r4
   1777c:	stmdacc	r0, {r0, r6, r7, r8, ip, lr}
   17780:	ldr	r2, [sp, #44]	; 0x2c
   17784:	ldrb	r1, [r2, r3]
   17788:	sub	r2, r1, #33	; 0x21
   1778c:	uxtb	r2, r2
   17790:	cmp	r2, #29
   17794:	bhi	17814 <__assert_fail@plt+0x6610>
   17798:	ldr	r0, [pc, #-36]	; 1777c <__assert_fail@plt+0x6578>
   1779c:	mov	ip, #1
   177a0:	ands	r2, r0, ip, lsl r2
   177a4:	beq	17834 <__assert_fail@plt+0x6630>
   177a8:	ldr	r2, [sp, #40]	; 0x28
   177ac:	cmp	r2, #0
   177b0:	bne	17928 <__assert_fail@plt+0x6724>
   177b4:	add	r2, r8, #1
   177b8:	cmp	fp, r8
   177bc:	strbhi	r4, [r9, r8]
   177c0:	cmp	fp, r2
   177c4:	movhi	r0, #34	; 0x22
   177c8:	strbhi	r0, [r9, r2]
   177cc:	add	r2, r8, #2
   177d0:	cmp	fp, r2
   177d4:	movhi	r0, #34	; 0x22
   177d8:	strbhi	r0, [r9, r2]
   177dc:	add	r2, r8, #3
   177e0:	cmp	fp, r2
   177e4:	mov	sl, r3
   177e8:	ldr	r3, [sp, #40]	; 0x28
   177ec:	movhi	r0, #63	; 0x3f
   177f0:	mov	r4, r1
   177f4:	strbhi	r0, [r9, r2]
   177f8:	add	r8, r8, #4
   177fc:	mov	r1, r3
   17800:	str	r3, [sp, #32]
   17804:	b	16984 <__assert_fail@plt+0x5780>
   17808:	str	r3, [sp, #32]
   1780c:	mov	r3, r7
   17810:	b	174d0 <__assert_fail@plt+0x62cc>
   17814:	mov	r1, #0
   17818:	str	r1, [sp, #32]
   1781c:	b	16984 <__assert_fail@plt+0x5780>
   17820:	mov	sl, r9
   17824:	ldr	r3, [sp, #56]	; 0x38
   17828:	mov	r9, fp
   1782c:	ldr	r2, [sp, #64]	; 0x40
   17830:	b	17500 <__assert_fail@plt+0x62fc>
   17834:	str	r2, [sp, #32]
   17838:	mov	r1, #0
   1783c:	b	16984 <__assert_fail@plt+0x5780>
   17840:	ldr	r2, [sp, #76]	; 0x4c
   17844:	mov	sl, r9
   17848:	mov	r9, fp
   1784c:	mov	fp, r8
   17850:	ldr	r1, [sp, #72]	; 0x48
   17854:	cmp	r1, #0
   17858:	moveq	r3, #0
   1785c:	andne	r3, r2, #1
   17860:	cmp	r3, #0
   17864:	beq	17890 <__assert_fail@plt+0x668c>
   17868:	ldrb	r3, [r1]
   1786c:	cmp	r3, #0
   17870:	beq	17890 <__assert_fail@plt+0x668c>
   17874:	mov	r2, r1
   17878:	cmp	r9, fp
   1787c:	strbhi	r3, [sl, fp]
   17880:	ldrb	r3, [r2, #1]!
   17884:	add	fp, fp, #1
   17888:	cmp	r3, #0
   1788c:	bne	17878 <__assert_fail@plt+0x6674>
   17890:	cmp	r9, fp
   17894:	movhi	r3, #0
   17898:	strbhi	r3, [sl, fp]
   1789c:	b	17558 <__assert_fail@plt+0x6354>
   178a0:	ldr	r3, [sp, #192]	; 0xc0
   178a4:	mov	ip, #5
   178a8:	str	r3, [sp, #16]
   178ac:	ldr	r3, [sp, #188]	; 0xbc
   178b0:	ldr	r2, [sp, #44]	; 0x2c
   178b4:	str	r3, [sp, #12]
   178b8:	ldr	r3, [sp, #184]	; 0xb8
   178bc:	ldr	r1, [sp, #84]	; 0x54
   178c0:	str	r3, [sp, #8]
   178c4:	ldr	r3, [sp, #180]	; 0xb4
   178c8:	mov	r0, r9
   178cc:	str	r3, [sp, #4]
   178d0:	str	ip, [sp]
   178d4:	ldr	r3, [sp, #24]
   178d8:	bl	163b0 <__assert_fail@plt+0x51ac>
   178dc:	mov	fp, r0
   178e0:	b	17558 <__assert_fail@plt+0x6354>
   178e4:	mov	sl, r9
   178e8:	mov	r9, fp
   178ec:	mov	fp, r8
   178f0:	b	17850 <__assert_fail@plt+0x664c>
   178f4:	ldr	r1, [sp, #176]	; 0xb0
   178f8:	bl	16290 <__assert_fail@plt+0x508c>
   178fc:	str	r0, [sp, #192]	; 0xc0
   17900:	b	1686c <__assert_fail@plt+0x5668>
   17904:	ldr	r1, [sp, #176]	; 0xb0
   17908:	bl	16290 <__assert_fail@plt+0x508c>
   1790c:	str	r0, [sp, #188]	; 0xbc
   17910:	b	1684c <__assert_fail@plt+0x5648>
   17914:	mov	sl, r9
   17918:	mov	r2, r3
   1791c:	mov	r9, fp
   17920:	mov	fp, r8
   17924:	b	17850 <__assert_fail@plt+0x664c>
   17928:	mov	sl, r9
   1792c:	mov	r9, fp
   17930:	b	17514 <__assert_fail@plt+0x6310>
   17934:	push	{r4, r5, r6, lr}
   17938:	mov	r5, r0
   1793c:	bl	110d8 <__errno_location@plt>
   17940:	cmp	r5, #0
   17944:	mov	r1, #48	; 0x30
   17948:	mov	r4, r0
   1794c:	ldr	r0, [pc, #16]	; 17964 <__assert_fail@plt+0x6760>
   17950:	ldr	r6, [r4]
   17954:	movne	r0, r5
   17958:	bl	1b1d0 <__assert_fail@plt+0x9fcc>
   1795c:	str	r6, [r4]
   17960:	pop	{r4, r5, r6, pc}
   17964:	andeq	pc, r2, r4, asr #4
   17968:	ldr	r3, [pc, #12]	; 1797c <__assert_fail@plt+0x6778>
   1796c:	cmp	r0, #0
   17970:	moveq	r0, r3
   17974:	ldr	r0, [r0]
   17978:	bx	lr
   1797c:	andeq	pc, r2, r4, asr #4
   17980:	ldr	r3, [pc, #12]	; 17994 <__assert_fail@plt+0x6790>
   17984:	cmp	r0, #0
   17988:	moveq	r0, r3
   1798c:	str	r1, [r0]
   17990:	bx	lr
   17994:	andeq	pc, r2, r4, asr #4
   17998:	ldr	r3, [pc, #52]	; 179d4 <__assert_fail@plt+0x67d0>
   1799c:	cmp	r0, #0
   179a0:	moveq	r0, r3
   179a4:	add	r3, r0, #8
   179a8:	push	{lr}		; (str lr, [sp, #-4]!)
   179ac:	lsr	lr, r1, #5
   179b0:	and	r1, r1, #31
   179b4:	ldr	ip, [r3, lr, lsl #2]
   179b8:	lsr	r0, ip, r1
   179bc:	eor	r2, r2, r0
   179c0:	and	r2, r2, #1
   179c4:	and	r0, r0, #1
   179c8:	eor	r1, ip, r2, lsl r1
   179cc:	str	r1, [r3, lr, lsl #2]
   179d0:	pop	{pc}		; (ldr pc, [sp], #4)
   179d4:	andeq	pc, r2, r4, asr #4
   179d8:	ldr	r3, [pc, #16]	; 179f0 <__assert_fail@plt+0x67ec>
   179dc:	cmp	r0, #0
   179e0:	movne	r3, r0
   179e4:	ldr	r0, [r3, #4]
   179e8:	str	r1, [r3, #4]
   179ec:	bx	lr
   179f0:	andeq	pc, r2, r4, asr #4
   179f4:	ldr	r3, [pc, #44]	; 17a28 <__assert_fail@plt+0x6824>
   179f8:	cmp	r0, #0
   179fc:	moveq	r0, r3
   17a00:	mov	ip, #10
   17a04:	cmp	r2, #0
   17a08:	cmpne	r1, #0
   17a0c:	str	ip, [r0]
   17a10:	beq	17a20 <__assert_fail@plt+0x681c>
   17a14:	str	r1, [r0, #40]	; 0x28
   17a18:	str	r2, [r0, #44]	; 0x2c
   17a1c:	bx	lr
   17a20:	push	{r4, lr}
   17a24:	bl	111ec <abort@plt>
   17a28:	andeq	pc, r2, r4, asr #4
   17a2c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   17a30:	sub	sp, sp, #24
   17a34:	ldr	ip, [pc, #108]	; 17aa8 <__assert_fail@plt+0x68a4>
   17a38:	ldr	r4, [sp, #56]	; 0x38
   17a3c:	mov	r9, r2
   17a40:	cmp	r4, #0
   17a44:	moveq	r4, ip
   17a48:	mov	sl, r3
   17a4c:	mov	r7, r0
   17a50:	mov	r8, r1
   17a54:	bl	110d8 <__errno_location@plt>
   17a58:	ldr	r3, [r4, #44]	; 0x2c
   17a5c:	mov	r1, r8
   17a60:	ldr	r6, [r0]
   17a64:	str	r3, [sp, #16]
   17a68:	ldr	r2, [r4, #40]	; 0x28
   17a6c:	add	r3, r4, #8
   17a70:	str	r3, [sp, #8]
   17a74:	str	r2, [sp, #12]
   17a78:	ldr	r2, [r4, #4]
   17a7c:	mov	r5, r0
   17a80:	str	r2, [sp, #4]
   17a84:	ldr	ip, [r4]
   17a88:	mov	r3, sl
   17a8c:	mov	r2, r9
   17a90:	mov	r0, r7
   17a94:	str	ip, [sp]
   17a98:	bl	163b0 <__assert_fail@plt+0x51ac>
   17a9c:	str	r6, [r5]
   17aa0:	add	sp, sp, #24
   17aa4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   17aa8:	andeq	pc, r2, r4, asr #4
   17aac:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17ab0:	cmp	r2, #0
   17ab4:	sub	sp, sp, #36	; 0x24
   17ab8:	ldr	r4, [pc, #164]	; 17b64 <__assert_fail@plt+0x6960>
   17abc:	mov	r8, r1
   17ac0:	movne	r4, r2
   17ac4:	mov	r7, r0
   17ac8:	bl	110d8 <__errno_location@plt>
   17acc:	ldr	r3, [r4, #44]	; 0x2c
   17ad0:	ldr	r5, [r4, #4]
   17ad4:	add	r9, r4, #8
   17ad8:	orr	r5, r5, #1
   17adc:	mov	r1, #0
   17ae0:	mov	r2, r7
   17ae4:	ldr	fp, [r0]
   17ae8:	str	r3, [sp, #16]
   17aec:	ldr	r3, [r4, #40]	; 0x28
   17af0:	stmib	sp, {r5, r9}
   17af4:	str	r3, [sp, #12]
   17af8:	ldr	r3, [r4]
   17afc:	mov	r6, r0
   17b00:	str	r3, [sp]
   17b04:	mov	r0, r1
   17b08:	mov	r3, r8
   17b0c:	bl	163b0 <__assert_fail@plt+0x51ac>
   17b10:	add	r1, r0, #1
   17b14:	mov	r0, r1
   17b18:	str	r1, [sp, #28]
   17b1c:	bl	1ac8c <__assert_fail@plt+0x9a88>
   17b20:	ldr	r3, [r4, #44]	; 0x2c
   17b24:	ldr	r1, [sp, #28]
   17b28:	str	r3, [sp, #16]
   17b2c:	ldr	r3, [r4, #40]	; 0x28
   17b30:	str	r5, [sp, #4]
   17b34:	str	r3, [sp, #12]
   17b38:	str	r9, [sp, #8]
   17b3c:	ldr	ip, [r4]
   17b40:	mov	r3, r8
   17b44:	mov	r2, r7
   17b48:	str	ip, [sp]
   17b4c:	mov	sl, r0
   17b50:	bl	163b0 <__assert_fail@plt+0x51ac>
   17b54:	mov	r0, sl
   17b58:	str	fp, [r6]
   17b5c:	add	sp, sp, #36	; 0x24
   17b60:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17b64:	andeq	pc, r2, r4, asr #4
   17b68:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17b6c:	cmp	r3, #0
   17b70:	sub	sp, sp, #44	; 0x2c
   17b74:	ldr	r4, [pc, #192]	; 17c3c <__assert_fail@plt+0x6a38>
   17b78:	mov	r6, r2
   17b7c:	movne	r4, r3
   17b80:	mov	r9, r1
   17b84:	mov	r8, r0
   17b88:	bl	110d8 <__errno_location@plt>
   17b8c:	ldr	r3, [r4, #44]	; 0x2c
   17b90:	ldr	r5, [r4, #4]
   17b94:	add	sl, r4, #8
   17b98:	cmp	r6, #0
   17b9c:	orreq	r5, r5, #1
   17ba0:	mov	r1, #0
   17ba4:	ldr	r2, [r0]
   17ba8:	str	r3, [sp, #16]
   17bac:	ldr	r3, [r4, #40]	; 0x28
   17bb0:	stmib	sp, {r5, sl}
   17bb4:	str	r3, [sp, #12]
   17bb8:	ldr	r3, [r4]
   17bbc:	mov	r7, r0
   17bc0:	str	r2, [sp, #28]
   17bc4:	str	r3, [sp]
   17bc8:	mov	r2, r8
   17bcc:	mov	r3, r9
   17bd0:	mov	r0, r1
   17bd4:	bl	163b0 <__assert_fail@plt+0x51ac>
   17bd8:	add	r1, r0, #1
   17bdc:	mov	fp, r0
   17be0:	mov	r0, r1
   17be4:	str	r1, [sp, #36]	; 0x24
   17be8:	bl	1ac8c <__assert_fail@plt+0x9a88>
   17bec:	ldr	r3, [r4, #44]	; 0x2c
   17bf0:	mov	r2, r8
   17bf4:	str	r3, [sp, #16]
   17bf8:	ldr	r3, [r4, #40]	; 0x28
   17bfc:	str	r5, [sp, #4]
   17c00:	str	r3, [sp, #12]
   17c04:	str	sl, [sp, #8]
   17c08:	ldr	ip, [r4]
   17c0c:	ldr	r1, [sp, #36]	; 0x24
   17c10:	mov	r3, r9
   17c14:	str	ip, [sp]
   17c18:	str	r0, [sp, #32]
   17c1c:	bl	163b0 <__assert_fail@plt+0x51ac>
   17c20:	ldr	r2, [sp, #28]
   17c24:	cmp	r6, #0
   17c28:	str	r2, [r7]
   17c2c:	ldr	r0, [sp, #32]
   17c30:	strne	fp, [r6]
   17c34:	add	sp, sp, #44	; 0x2c
   17c38:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17c3c:	andeq	pc, r2, r4, asr #4
   17c40:	push	{r4, r5, r6, r7, r8, lr}
   17c44:	ldr	r6, [pc, #116]	; 17cc0 <__assert_fail@plt+0x6abc>
   17c48:	ldr	r3, [r6, #4]
   17c4c:	ldr	r7, [r6]
   17c50:	cmp	r3, #1
   17c54:	movgt	r5, r7
   17c58:	movgt	r4, #1
   17c5c:	ble	17c7c <__assert_fail@plt+0x6a78>
   17c60:	ldr	r0, [r5, #12]
   17c64:	bl	15e58 <__assert_fail@plt+0x4c54>
   17c68:	ldr	r3, [r6, #4]
   17c6c:	add	r4, r4, #1
   17c70:	cmp	r3, r4
   17c74:	add	r5, r5, #8
   17c78:	bgt	17c60 <__assert_fail@plt+0x6a5c>
   17c7c:	ldr	r0, [r7, #4]
   17c80:	ldr	r4, [pc, #60]	; 17cc4 <__assert_fail@plt+0x6ac0>
   17c84:	cmp	r0, r4
   17c88:	beq	17c9c <__assert_fail@plt+0x6a98>
   17c8c:	bl	15e58 <__assert_fail@plt+0x4c54>
   17c90:	mov	r3, #256	; 0x100
   17c94:	str	r4, [r6, #12]
   17c98:	str	r3, [r6, #8]
   17c9c:	ldr	r4, [pc, #36]	; 17cc8 <__assert_fail@plt+0x6ac4>
   17ca0:	cmp	r7, r4
   17ca4:	beq	17cb4 <__assert_fail@plt+0x6ab0>
   17ca8:	mov	r0, r7
   17cac:	bl	15e58 <__assert_fail@plt+0x4c54>
   17cb0:	str	r4, [r6]
   17cb4:	mov	r3, #1
   17cb8:	str	r3, [r6, #4]
   17cbc:	pop	{r4, r5, r6, r7, r8, pc}
   17cc0:	andeq	pc, r2, r8, lsr #2
   17cc4:	andeq	pc, r2, r4, ror r2	; <UNPREDICTABLE>
   17cc8:	andeq	pc, r2, r0, lsr r1	; <UNPREDICTABLE>
   17ccc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17cd0:	sub	sp, sp, #44	; 0x2c
   17cd4:	mov	r5, r0
   17cd8:	mov	sl, r1
   17cdc:	bl	110d8 <__errno_location@plt>
   17ce0:	ldr	r4, [pc, #400]	; 17e78 <__assert_fail@plt+0x6c74>
   17ce4:	cmn	r5, #-2147483647	; 0x80000001
   17ce8:	ldr	r6, [r4]
   17cec:	mov	r8, r0
   17cf0:	movne	r0, #0
   17cf4:	moveq	r0, #1
   17cf8:	ldr	r3, [r8]
   17cfc:	orrs	r0, r0, r5, lsr #31
   17d00:	str	r3, [sp, #24]
   17d04:	bne	17e74 <__assert_fail@plt+0x6c70>
   17d08:	ldr	r2, [r4, #4]
   17d0c:	cmp	r5, r2
   17d10:	blt	17d70 <__assert_fail@plt+0x6b6c>
   17d14:	add	r7, r4, #8
   17d18:	cmp	r6, r7
   17d1c:	str	r2, [sp, #36]	; 0x24
   17d20:	beq	17e44 <__assert_fail@plt+0x6c40>
   17d24:	mov	r3, #8
   17d28:	sub	r2, r5, r2
   17d2c:	mov	r0, r6
   17d30:	str	r3, [sp]
   17d34:	add	r2, r2, #1
   17d38:	mvn	r3, #-2147483648	; 0x80000000
   17d3c:	add	r1, sp, #36	; 0x24
   17d40:	bl	1aea8 <__assert_fail@plt+0x9ca4>
   17d44:	mov	r6, r0
   17d48:	str	r0, [r4]
   17d4c:	ldr	r0, [r4, #4]
   17d50:	ldr	r2, [sp, #36]	; 0x24
   17d54:	mov	r1, #0
   17d58:	sub	r2, r2, r0
   17d5c:	add	r0, r6, r0, lsl #3
   17d60:	lsl	r2, r2, #3
   17d64:	bl	11108 <memset@plt>
   17d68:	ldr	r3, [sp, #36]	; 0x24
   17d6c:	str	r3, [r4, #4]
   17d70:	ldr	r4, [pc, #260]	; 17e7c <__assert_fail@plt+0x6c78>
   17d74:	add	fp, r6, r5, lsl #3
   17d78:	ldr	r9, [r6, r5, lsl #3]
   17d7c:	ldr	r0, [r4, #4]
   17d80:	ldr	r3, [r4]
   17d84:	ldr	r7, [fp, #4]
   17d88:	ldr	r1, [r4, #44]	; 0x2c
   17d8c:	ldr	r2, [r4, #40]	; 0x28
   17d90:	orr	r0, r0, #1
   17d94:	str	r3, [sp]
   17d98:	add	r3, r4, #8
   17d9c:	str	r0, [sp, #28]
   17da0:	str	r0, [sp, #4]
   17da4:	str	r1, [sp, #16]
   17da8:	str	r2, [sp, #12]
   17dac:	str	r3, [sp, #8]
   17db0:	mov	r0, r7
   17db4:	mov	r1, r9
   17db8:	mvn	r3, #0
   17dbc:	mov	r2, sl
   17dc0:	bl	163b0 <__assert_fail@plt+0x51ac>
   17dc4:	cmp	r9, r0
   17dc8:	bhi	17e30 <__assert_fail@plt+0x6c2c>
   17dcc:	add	r3, r4, #48	; 0x30
   17dd0:	add	r9, r0, #1
   17dd4:	cmp	r7, r3
   17dd8:	str	r9, [r6, r5, lsl #3]
   17ddc:	beq	17de8 <__assert_fail@plt+0x6be4>
   17de0:	mov	r0, r7
   17de4:	bl	15e58 <__assert_fail@plt+0x4c54>
   17de8:	mov	r0, r9
   17dec:	bl	1ac8c <__assert_fail@plt+0x9a88>
   17df0:	ldr	ip, [r4, #44]	; 0x2c
   17df4:	ldr	r3, [r4]
   17df8:	ldr	lr, [r4, #40]	; 0x28
   17dfc:	ldr	r4, [pc, #124]	; 17e80 <__assert_fail@plt+0x6c7c>
   17e00:	mov	r2, sl
   17e04:	mov	r1, r9
   17e08:	str	r0, [fp, #4]
   17e0c:	str	r4, [sp, #8]
   17e10:	ldr	r4, [sp, #28]
   17e14:	str	r3, [sp]
   17e18:	str	r4, [sp, #4]
   17e1c:	str	ip, [sp, #16]
   17e20:	str	lr, [sp, #12]
   17e24:	mvn	r3, #0
   17e28:	mov	r7, r0
   17e2c:	bl	163b0 <__assert_fail@plt+0x51ac>
   17e30:	ldr	r3, [sp, #24]
   17e34:	mov	r0, r7
   17e38:	str	r3, [r8]
   17e3c:	add	sp, sp, #44	; 0x2c
   17e40:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17e44:	mov	r3, #8
   17e48:	sub	r2, r5, r2
   17e4c:	str	r3, [sp]
   17e50:	add	r1, sp, #36	; 0x24
   17e54:	add	r2, r2, #1
   17e58:	mvn	r3, #-2147483648	; 0x80000000
   17e5c:	bl	1aea8 <__assert_fail@plt+0x9ca4>
   17e60:	mov	r6, r0
   17e64:	ldm	r7, {r0, r1}
   17e68:	str	r6, [r4]
   17e6c:	stm	r6, {r0, r1}
   17e70:	b	17d4c <__assert_fail@plt+0x6b48>
   17e74:	bl	111ec <abort@plt>
   17e78:	andeq	pc, r2, r8, lsr #2
   17e7c:	andeq	pc, r2, r4, asr #4
   17e80:	andeq	pc, r2, ip, asr #4
   17e84:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17e88:	sub	sp, sp, #52	; 0x34
   17e8c:	mov	r5, r0
   17e90:	mov	sl, r1
   17e94:	mov	fp, r2
   17e98:	bl	110d8 <__errno_location@plt>
   17e9c:	ldr	r4, [pc, #408]	; 1803c <__assert_fail@plt+0x6e38>
   17ea0:	cmn	r5, #-2147483647	; 0x80000001
   17ea4:	ldr	r6, [r4]
   17ea8:	mov	r8, r0
   17eac:	movne	r0, #0
   17eb0:	moveq	r0, #1
   17eb4:	ldr	r3, [r8]
   17eb8:	orrs	r0, r0, r5, lsr #31
   17ebc:	str	r3, [sp, #28]
   17ec0:	bne	18038 <__assert_fail@plt+0x6e34>
   17ec4:	ldr	r2, [r4, #4]
   17ec8:	cmp	r5, r2
   17ecc:	blt	17f2c <__assert_fail@plt+0x6d28>
   17ed0:	add	r7, r4, #8
   17ed4:	cmp	r6, r7
   17ed8:	str	r2, [sp, #44]	; 0x2c
   17edc:	beq	18008 <__assert_fail@plt+0x6e04>
   17ee0:	mov	r3, #8
   17ee4:	sub	r2, r5, r2
   17ee8:	mov	r0, r6
   17eec:	str	r3, [sp]
   17ef0:	add	r2, r2, #1
   17ef4:	mvn	r3, #-2147483648	; 0x80000000
   17ef8:	add	r1, sp, #44	; 0x2c
   17efc:	bl	1aea8 <__assert_fail@plt+0x9ca4>
   17f00:	mov	r6, r0
   17f04:	str	r0, [r4]
   17f08:	ldr	r0, [r4, #4]
   17f0c:	ldr	r2, [sp, #44]	; 0x2c
   17f10:	mov	r1, #0
   17f14:	sub	r2, r2, r0
   17f18:	add	r0, r6, r0, lsl #3
   17f1c:	lsl	r2, r2, #3
   17f20:	bl	11108 <memset@plt>
   17f24:	ldr	r3, [sp, #44]	; 0x2c
   17f28:	str	r3, [r4, #4]
   17f2c:	ldr	r4, [pc, #268]	; 18040 <__assert_fail@plt+0x6e3c>
   17f30:	add	r3, r6, r5, lsl #3
   17f34:	str	r3, [sp, #32]
   17f38:	ldr	r7, [r3, #4]
   17f3c:	ldr	r0, [r4, #4]
   17f40:	ldr	r3, [r4]
   17f44:	ldr	r9, [r6, r5, lsl #3]
   17f48:	ldr	r1, [r4, #44]	; 0x2c
   17f4c:	ldr	r2, [r4, #40]	; 0x28
   17f50:	orr	r0, r0, #1
   17f54:	str	r3, [sp]
   17f58:	add	r3, r4, #8
   17f5c:	str	r0, [sp, #36]	; 0x24
   17f60:	str	r0, [sp, #4]
   17f64:	str	r1, [sp, #16]
   17f68:	str	r2, [sp, #12]
   17f6c:	str	r3, [sp, #8]
   17f70:	mov	r0, r7
   17f74:	mov	r1, r9
   17f78:	mov	r3, fp
   17f7c:	mov	r2, sl
   17f80:	bl	163b0 <__assert_fail@plt+0x51ac>
   17f84:	cmp	r9, r0
   17f88:	bhi	17ff4 <__assert_fail@plt+0x6df0>
   17f8c:	add	r3, r4, #48	; 0x30
   17f90:	add	r9, r0, #1
   17f94:	cmp	r7, r3
   17f98:	str	r9, [r6, r5, lsl #3]
   17f9c:	beq	17fa8 <__assert_fail@plt+0x6da4>
   17fa0:	mov	r0, r7
   17fa4:	bl	15e58 <__assert_fail@plt+0x4c54>
   17fa8:	mov	r0, r9
   17fac:	bl	1ac8c <__assert_fail@plt+0x9a88>
   17fb0:	ldr	ip, [sp, #32]
   17fb4:	ldr	lr, [r4, #44]	; 0x2c
   17fb8:	ldr	r5, [r4, #40]	; 0x28
   17fbc:	mov	r3, fp
   17fc0:	mov	r2, sl
   17fc4:	mov	r1, r9
   17fc8:	str	r0, [ip, #4]
   17fcc:	ldr	ip, [r4]
   17fd0:	ldr	r4, [pc, #108]	; 18044 <__assert_fail@plt+0x6e40>
   17fd4:	str	lr, [sp, #16]
   17fd8:	str	r4, [sp, #8]
   17fdc:	ldr	r4, [sp, #36]	; 0x24
   17fe0:	str	r5, [sp, #12]
   17fe4:	str	r4, [sp, #4]
   17fe8:	str	ip, [sp]
   17fec:	mov	r7, r0
   17ff0:	bl	163b0 <__assert_fail@plt+0x51ac>
   17ff4:	ldr	r3, [sp, #28]
   17ff8:	mov	r0, r7
   17ffc:	str	r3, [r8]
   18000:	add	sp, sp, #52	; 0x34
   18004:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18008:	mov	r3, #8
   1800c:	sub	r2, r5, r2
   18010:	str	r3, [sp]
   18014:	add	r1, sp, #44	; 0x2c
   18018:	add	r2, r2, #1
   1801c:	mvn	r3, #-2147483648	; 0x80000000
   18020:	bl	1aea8 <__assert_fail@plt+0x9ca4>
   18024:	mov	r6, r0
   18028:	ldm	r7, {r0, r1}
   1802c:	str	r6, [r4]
   18030:	stm	r6, {r0, r1}
   18034:	b	17f08 <__assert_fail@plt+0x6d04>
   18038:	bl	111ec <abort@plt>
   1803c:	andeq	pc, r2, r8, lsr #2
   18040:	andeq	pc, r2, r4, asr #4
   18044:	andeq	pc, r2, ip, asr #4
   18048:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1804c:	sub	sp, sp, #44	; 0x2c
   18050:	mov	sl, r0
   18054:	bl	110d8 <__errno_location@plt>
   18058:	ldr	r4, [pc, #352]	; 181c0 <__assert_fail@plt+0x6fbc>
   1805c:	ldr	r2, [r4, #4]
   18060:	ldr	r5, [r4]
   18064:	cmp	r2, #0
   18068:	ldr	r3, [r0]
   1806c:	mov	r8, r0
   18070:	str	r3, [sp, #28]
   18074:	bgt	180d0 <__assert_fail@plt+0x6ecc>
   18078:	add	r6, r4, #8
   1807c:	cmp	r5, r6
   18080:	str	r2, [sp, #36]	; 0x24
   18084:	beq	18190 <__assert_fail@plt+0x6f8c>
   18088:	mov	r3, #8
   1808c:	mov	r0, r5
   18090:	str	r3, [sp]
   18094:	rsb	r2, r2, #1
   18098:	mvn	r3, #-2147483648	; 0x80000000
   1809c:	add	r1, sp, #36	; 0x24
   180a0:	bl	1aea8 <__assert_fail@plt+0x9ca4>
   180a4:	mov	r5, r0
   180a8:	str	r0, [r4]
   180ac:	ldr	r0, [r4, #4]
   180b0:	ldr	r2, [sp, #36]	; 0x24
   180b4:	mov	r1, #0
   180b8:	sub	r2, r2, r0
   180bc:	add	r0, r5, r0, lsl #3
   180c0:	lsl	r2, r2, #3
   180c4:	bl	11108 <memset@plt>
   180c8:	ldr	r3, [sp, #36]	; 0x24
   180cc:	str	r3, [r4, #4]
   180d0:	ldr	r4, [pc, #236]	; 181c4 <__assert_fail@plt+0x6fc0>
   180d4:	ldr	r9, [r5]
   180d8:	ldr	r6, [r5, #4]
   180dc:	ldr	r7, [r4, #4]
   180e0:	ldr	r1, [r4, #44]	; 0x2c
   180e4:	ldr	r2, [r4, #40]	; 0x28
   180e8:	ldr	r3, [r4]
   180ec:	orr	r7, r7, #1
   180f0:	add	fp, r4, #8
   180f4:	str	r1, [sp, #16]
   180f8:	str	r2, [sp, #12]
   180fc:	str	r3, [sp]
   18100:	str	r7, [sp, #4]
   18104:	str	fp, [sp, #8]
   18108:	mov	r1, r9
   1810c:	mov	r0, r6
   18110:	mvn	r3, #0
   18114:	mov	r2, sl
   18118:	bl	163b0 <__assert_fail@plt+0x51ac>
   1811c:	cmp	r9, r0
   18120:	bhi	1817c <__assert_fail@plt+0x6f78>
   18124:	add	r3, r4, #48	; 0x30
   18128:	add	r9, r0, #1
   1812c:	cmp	r6, r3
   18130:	str	r9, [r5]
   18134:	beq	18140 <__assert_fail@plt+0x6f3c>
   18138:	mov	r0, r6
   1813c:	bl	15e58 <__assert_fail@plt+0x4c54>
   18140:	mov	r0, r9
   18144:	bl	1ac8c <__assert_fail@plt+0x9a88>
   18148:	ldr	ip, [r4, #44]	; 0x2c
   1814c:	ldr	r3, [r4]
   18150:	ldr	lr, [r4, #40]	; 0x28
   18154:	mov	r2, sl
   18158:	mov	r1, r9
   1815c:	str	r0, [r5, #4]
   18160:	str	r3, [sp]
   18164:	stmib	sp, {r7, fp}
   18168:	str	ip, [sp, #16]
   1816c:	str	lr, [sp, #12]
   18170:	mvn	r3, #0
   18174:	mov	r6, r0
   18178:	bl	163b0 <__assert_fail@plt+0x51ac>
   1817c:	ldr	r3, [sp, #28]
   18180:	mov	r0, r6
   18184:	str	r3, [r8]
   18188:	add	sp, sp, #44	; 0x2c
   1818c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18190:	mov	r3, #8
   18194:	str	r3, [sp]
   18198:	add	r1, sp, #36	; 0x24
   1819c:	rsb	r2, r2, #1
   181a0:	mvn	r3, #-2147483648	; 0x80000000
   181a4:	mov	r0, #0
   181a8:	bl	1aea8 <__assert_fail@plt+0x9ca4>
   181ac:	mov	r5, r0
   181b0:	ldm	r6, {r0, r1}
   181b4:	str	r5, [r4]
   181b8:	stm	r5, {r0, r1}
   181bc:	b	180ac <__assert_fail@plt+0x6ea8>
   181c0:	andeq	pc, r2, r8, lsr #2
   181c4:	andeq	pc, r2, r4, asr #4
   181c8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   181cc:	sub	sp, sp, #44	; 0x2c
   181d0:	mov	r9, r0
   181d4:	mov	sl, r1
   181d8:	bl	110d8 <__errno_location@plt>
   181dc:	ldr	r4, [pc, #364]	; 18350 <__assert_fail@plt+0x714c>
   181e0:	ldr	r2, [r4, #4]
   181e4:	ldr	r5, [r4]
   181e8:	cmp	r2, #0
   181ec:	ldr	r3, [r0]
   181f0:	mov	r7, r0
   181f4:	str	r3, [sp, #24]
   181f8:	bgt	18254 <__assert_fail@plt+0x7050>
   181fc:	add	r6, r4, #8
   18200:	cmp	r5, r6
   18204:	str	r2, [sp, #36]	; 0x24
   18208:	beq	18320 <__assert_fail@plt+0x711c>
   1820c:	mov	r3, #8
   18210:	mov	r0, r5
   18214:	str	r3, [sp]
   18218:	rsb	r2, r2, #1
   1821c:	mvn	r3, #-2147483648	; 0x80000000
   18220:	add	r1, sp, #36	; 0x24
   18224:	bl	1aea8 <__assert_fail@plt+0x9ca4>
   18228:	mov	r5, r0
   1822c:	str	r0, [r4]
   18230:	ldr	r0, [r4, #4]
   18234:	ldr	r2, [sp, #36]	; 0x24
   18238:	mov	r1, #0
   1823c:	sub	r2, r2, r0
   18240:	add	r0, r5, r0, lsl #3
   18244:	lsl	r2, r2, #3
   18248:	bl	11108 <memset@plt>
   1824c:	ldr	r3, [sp, #36]	; 0x24
   18250:	str	r3, [r4, #4]
   18254:	ldr	r4, [pc, #248]	; 18354 <__assert_fail@plt+0x7150>
   18258:	ldr	r8, [r5]
   1825c:	ldr	r6, [r5, #4]
   18260:	ldr	r0, [r4, #4]
   18264:	ldr	r1, [r4, #44]	; 0x2c
   18268:	ldr	r2, [r4, #40]	; 0x28
   1826c:	ldr	r3, [r4]
   18270:	orr	r0, r0, #1
   18274:	add	fp, r4, #8
   18278:	str	r0, [sp, #28]
   1827c:	str	r0, [sp, #4]
   18280:	str	r1, [sp, #16]
   18284:	str	r2, [sp, #12]
   18288:	str	r3, [sp]
   1828c:	str	fp, [sp, #8]
   18290:	mov	r1, r8
   18294:	mov	r0, r6
   18298:	mov	r3, sl
   1829c:	mov	r2, r9
   182a0:	bl	163b0 <__assert_fail@plt+0x51ac>
   182a4:	cmp	r8, r0
   182a8:	bhi	1830c <__assert_fail@plt+0x7108>
   182ac:	add	r3, r4, #48	; 0x30
   182b0:	add	r8, r0, #1
   182b4:	cmp	r6, r3
   182b8:	str	r8, [r5]
   182bc:	beq	182c8 <__assert_fail@plt+0x70c4>
   182c0:	mov	r0, r6
   182c4:	bl	15e58 <__assert_fail@plt+0x4c54>
   182c8:	mov	r0, r8
   182cc:	bl	1ac8c <__assert_fail@plt+0x9a88>
   182d0:	ldr	lr, [r4, #44]	; 0x2c
   182d4:	ldr	ip, [r4]
   182d8:	mov	r3, sl
   182dc:	mov	r2, r9
   182e0:	mov	r1, r8
   182e4:	str	r0, [r5, #4]
   182e8:	ldr	r5, [r4, #40]	; 0x28
   182ec:	ldr	r4, [sp, #28]
   182f0:	str	fp, [sp, #8]
   182f4:	str	r4, [sp, #4]
   182f8:	str	lr, [sp, #16]
   182fc:	str	r5, [sp, #12]
   18300:	str	ip, [sp]
   18304:	mov	r6, r0
   18308:	bl	163b0 <__assert_fail@plt+0x51ac>
   1830c:	ldr	r3, [sp, #24]
   18310:	mov	r0, r6
   18314:	str	r3, [r7]
   18318:	add	sp, sp, #44	; 0x2c
   1831c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18320:	mov	r3, #8
   18324:	str	r3, [sp]
   18328:	add	r1, sp, #36	; 0x24
   1832c:	rsb	r2, r2, #1
   18330:	mvn	r3, #-2147483648	; 0x80000000
   18334:	mov	r0, #0
   18338:	bl	1aea8 <__assert_fail@plt+0x9ca4>
   1833c:	mov	r5, r0
   18340:	ldm	r6, {r0, r1}
   18344:	str	r5, [r4]
   18348:	stm	r5, {r0, r1}
   1834c:	b	18230 <__assert_fail@plt+0x702c>
   18350:	andeq	pc, r2, r8, lsr #2
   18354:	andeq	pc, r2, r4, asr #4
   18358:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1835c:	sub	sp, sp, #132	; 0x84
   18360:	mov	r5, r1
   18364:	mov	r4, r0
   18368:	mov	r9, r2
   1836c:	add	r0, sp, #80	; 0x50
   18370:	mov	r2, #48	; 0x30
   18374:	mov	r1, #0
   18378:	bl	11108 <memset@plt>
   1837c:	cmp	r5, #10
   18380:	beq	18538 <__assert_fail@plt+0x7334>
   18384:	add	lr, sp, #80	; 0x50
   18388:	str	r5, [sp, #80]	; 0x50
   1838c:	ldm	lr!, {r0, r1, r2, r3}
   18390:	add	ip, sp, #32
   18394:	ldr	r6, [pc, #416]	; 1853c <__assert_fail@plt+0x7338>
   18398:	stmia	ip!, {r0, r1, r2, r3}
   1839c:	ldm	lr!, {r0, r1, r2, r3}
   183a0:	stmia	ip!, {r0, r1, r2, r3}
   183a4:	ldm	lr, {r0, r1, r2, r3}
   183a8:	stm	ip, {r0, r1, r2, r3}
   183ac:	bl	110d8 <__errno_location@plt>
   183b0:	cmn	r4, #-2147483647	; 0x80000001
   183b4:	ldr	r5, [r6]
   183b8:	mov	r7, r0
   183bc:	movne	r0, #0
   183c0:	moveq	r0, #1
   183c4:	ldr	r3, [r7]
   183c8:	orrs	r0, r0, r4, lsr #31
   183cc:	str	r3, [sp, #24]
   183d0:	bne	18538 <__assert_fail@plt+0x7334>
   183d4:	ldr	r2, [r6, #4]
   183d8:	cmp	r4, r2
   183dc:	blt	1843c <__assert_fail@plt+0x7238>
   183e0:	add	r8, r6, #8
   183e4:	cmp	r5, r8
   183e8:	str	r2, [sp, #80]	; 0x50
   183ec:	beq	18508 <__assert_fail@plt+0x7304>
   183f0:	mov	r3, #8
   183f4:	sub	r2, r4, r2
   183f8:	mov	r0, r5
   183fc:	str	r3, [sp]
   18400:	add	r2, r2, #1
   18404:	add	r1, sp, #80	; 0x50
   18408:	mvn	r3, #-2147483648	; 0x80000000
   1840c:	bl	1aea8 <__assert_fail@plt+0x9ca4>
   18410:	mov	r5, r0
   18414:	str	r0, [r6]
   18418:	ldr	r0, [r6, #4]
   1841c:	ldr	r2, [sp, #80]	; 0x50
   18420:	mov	r1, #0
   18424:	sub	r2, r2, r0
   18428:	add	r0, r5, r0, lsl #3
   1842c:	lsl	r2, r2, #3
   18430:	bl	11108 <memset@plt>
   18434:	ldr	r3, [sp, #80]	; 0x50
   18438:	str	r3, [r6, #4]
   1843c:	add	fp, r5, r4, lsl #3
   18440:	ldr	r1, [sp, #36]	; 0x24
   18444:	ldr	r8, [r5, r4, lsl #3]
   18448:	ldr	r6, [fp, #4]
   1844c:	ldr	r2, [sp, #72]	; 0x48
   18450:	ldr	r3, [sp, #32]
   18454:	ldr	ip, [sp, #76]	; 0x4c
   18458:	orr	r1, r1, #1
   1845c:	add	sl, sp, #40	; 0x28
   18460:	str	r1, [sp, #28]
   18464:	str	r1, [sp, #4]
   18468:	str	r2, [sp, #12]
   1846c:	str	r3, [sp]
   18470:	mov	r0, r6
   18474:	mov	r1, r8
   18478:	str	ip, [sp, #16]
   1847c:	str	sl, [sp, #8]
   18480:	mvn	r3, #0
   18484:	mov	r2, r9
   18488:	bl	163b0 <__assert_fail@plt+0x51ac>
   1848c:	cmp	r8, r0
   18490:	bhi	184f4 <__assert_fail@plt+0x72f0>
   18494:	ldr	r3, [pc, #164]	; 18540 <__assert_fail@plt+0x733c>
   18498:	add	r8, r0, #1
   1849c:	cmp	r6, r3
   184a0:	str	r8, [r5, r4, lsl #3]
   184a4:	beq	184b0 <__assert_fail@plt+0x72ac>
   184a8:	mov	r0, r6
   184ac:	bl	15e58 <__assert_fail@plt+0x4c54>
   184b0:	mov	r0, r8
   184b4:	bl	1ac8c <__assert_fail@plt+0x9a88>
   184b8:	ldr	lr, [sp, #76]	; 0x4c
   184bc:	ldr	r3, [sp, #32]
   184c0:	ldr	ip, [sp, #72]	; 0x48
   184c4:	ldr	r4, [sp, #28]
   184c8:	mov	r2, r9
   184cc:	mov	r1, r8
   184d0:	str	r0, [fp, #4]
   184d4:	str	r3, [sp]
   184d8:	str	sl, [sp, #8]
   184dc:	str	r4, [sp, #4]
   184e0:	str	lr, [sp, #16]
   184e4:	str	ip, [sp, #12]
   184e8:	mvn	r3, #0
   184ec:	mov	r6, r0
   184f0:	bl	163b0 <__assert_fail@plt+0x51ac>
   184f4:	ldr	r3, [sp, #24]
   184f8:	mov	r0, r6
   184fc:	str	r3, [r7]
   18500:	add	sp, sp, #132	; 0x84
   18504:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18508:	mov	r3, #8
   1850c:	sub	r2, r4, r2
   18510:	add	r1, sp, #80	; 0x50
   18514:	str	r3, [sp]
   18518:	add	r2, r2, #1
   1851c:	mvn	r3, #-2147483648	; 0x80000000
   18520:	bl	1aea8 <__assert_fail@plt+0x9ca4>
   18524:	mov	r5, r0
   18528:	ldm	r8, {r0, r1}
   1852c:	str	r5, [r6]
   18530:	stm	r5, {r0, r1}
   18534:	b	18418 <__assert_fail@plt+0x7214>
   18538:	bl	111ec <abort@plt>
   1853c:	andeq	pc, r2, r8, lsr #2
   18540:	andeq	pc, r2, r4, ror r2	; <UNPREDICTABLE>
   18544:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18548:	sub	sp, sp, #132	; 0x84
   1854c:	mov	r5, r1
   18550:	mov	r4, r0
   18554:	mov	r9, r2
   18558:	add	r0, sp, #80	; 0x50
   1855c:	mov	r2, #48	; 0x30
   18560:	mov	r1, #0
   18564:	mov	sl, r3
   18568:	bl	11108 <memset@plt>
   1856c:	cmp	r5, #10
   18570:	beq	1872c <__assert_fail@plt+0x7528>
   18574:	add	lr, sp, #80	; 0x50
   18578:	str	r5, [sp, #80]	; 0x50
   1857c:	ldm	lr!, {r0, r1, r2, r3}
   18580:	add	ip, sp, #32
   18584:	ldr	r6, [pc, #420]	; 18730 <__assert_fail@plt+0x752c>
   18588:	stmia	ip!, {r0, r1, r2, r3}
   1858c:	ldm	lr!, {r0, r1, r2, r3}
   18590:	stmia	ip!, {r0, r1, r2, r3}
   18594:	ldm	lr, {r0, r1, r2, r3}
   18598:	stm	ip, {r0, r1, r2, r3}
   1859c:	bl	110d8 <__errno_location@plt>
   185a0:	cmn	r4, #-2147483647	; 0x80000001
   185a4:	ldr	r5, [r6]
   185a8:	mov	r7, r0
   185ac:	movne	r0, #0
   185b0:	moveq	r0, #1
   185b4:	ldr	r3, [r7]
   185b8:	orrs	r0, r0, r4, lsr #31
   185bc:	str	r3, [sp, #24]
   185c0:	bne	1872c <__assert_fail@plt+0x7528>
   185c4:	ldr	r2, [r6, #4]
   185c8:	cmp	r4, r2
   185cc:	blt	1862c <__assert_fail@plt+0x7428>
   185d0:	add	r8, r6, #8
   185d4:	cmp	r5, r8
   185d8:	str	r2, [sp, #80]	; 0x50
   185dc:	beq	186fc <__assert_fail@plt+0x74f8>
   185e0:	mov	r3, #8
   185e4:	sub	r2, r4, r2
   185e8:	mov	r0, r5
   185ec:	str	r3, [sp]
   185f0:	add	r2, r2, #1
   185f4:	add	r1, sp, #80	; 0x50
   185f8:	mvn	r3, #-2147483648	; 0x80000000
   185fc:	bl	1aea8 <__assert_fail@plt+0x9ca4>
   18600:	mov	r5, r0
   18604:	str	r0, [r6]
   18608:	ldr	r0, [r6, #4]
   1860c:	ldr	r2, [sp, #80]	; 0x50
   18610:	mov	r1, #0
   18614:	sub	r2, r2, r0
   18618:	add	r0, r5, r0, lsl #3
   1861c:	lsl	r2, r2, #3
   18620:	bl	11108 <memset@plt>
   18624:	ldr	r3, [sp, #80]	; 0x50
   18628:	str	r3, [r6, #4]
   1862c:	add	fp, r5, r4, lsl #3
   18630:	ldr	r3, [sp, #32]
   18634:	ldr	r1, [sp, #36]	; 0x24
   18638:	ldr	r8, [r5, r4, lsl #3]
   1863c:	ldr	r6, [fp, #4]
   18640:	ldr	r2, [sp, #72]	; 0x48
   18644:	ldr	ip, [sp, #76]	; 0x4c
   18648:	orr	r1, r1, #1
   1864c:	str	r3, [sp]
   18650:	add	r3, sp, #40	; 0x28
   18654:	str	r1, [sp, #28]
   18658:	str	r1, [sp, #4]
   1865c:	str	r2, [sp, #12]
   18660:	str	r3, [sp, #8]
   18664:	mov	r0, r6
   18668:	mov	r1, r8
   1866c:	str	ip, [sp, #16]
   18670:	mov	r3, sl
   18674:	mov	r2, r9
   18678:	bl	163b0 <__assert_fail@plt+0x51ac>
   1867c:	cmp	r8, r0
   18680:	bhi	186e8 <__assert_fail@plt+0x74e4>
   18684:	ldr	r3, [pc, #168]	; 18734 <__assert_fail@plt+0x7530>
   18688:	add	r8, r0, #1
   1868c:	cmp	r6, r3
   18690:	str	r8, [r5, r4, lsl #3]
   18694:	beq	186a0 <__assert_fail@plt+0x749c>
   18698:	mov	r0, r6
   1869c:	bl	15e58 <__assert_fail@plt+0x4c54>
   186a0:	mov	r0, r8
   186a4:	bl	1ac8c <__assert_fail@plt+0x9a88>
   186a8:	add	lr, sp, #40	; 0x28
   186ac:	ldr	ip, [sp, #76]	; 0x4c
   186b0:	ldr	r4, [sp, #72]	; 0x48
   186b4:	ldr	r5, [sp, #28]
   186b8:	mov	r3, sl
   186bc:	mov	r2, r9
   186c0:	mov	r1, r8
   186c4:	str	r0, [fp, #4]
   186c8:	str	lr, [sp, #8]
   186cc:	ldr	lr, [sp, #32]
   186d0:	str	r5, [sp, #4]
   186d4:	str	ip, [sp, #16]
   186d8:	str	r4, [sp, #12]
   186dc:	str	lr, [sp]
   186e0:	mov	r6, r0
   186e4:	bl	163b0 <__assert_fail@plt+0x51ac>
   186e8:	ldr	r3, [sp, #24]
   186ec:	mov	r0, r6
   186f0:	str	r3, [r7]
   186f4:	add	sp, sp, #132	; 0x84
   186f8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   186fc:	mov	r3, #8
   18700:	sub	r2, r4, r2
   18704:	add	r1, sp, #80	; 0x50
   18708:	str	r3, [sp]
   1870c:	add	r2, r2, #1
   18710:	mvn	r3, #-2147483648	; 0x80000000
   18714:	bl	1aea8 <__assert_fail@plt+0x9ca4>
   18718:	mov	r5, r0
   1871c:	ldm	r8, {r0, r1}
   18720:	str	r5, [r6]
   18724:	stm	r5, {r0, r1}
   18728:	b	18608 <__assert_fail@plt+0x7404>
   1872c:	bl	111ec <abort@plt>
   18730:	andeq	pc, r2, r8, lsr #2
   18734:	andeq	pc, r2, r4, ror r2	; <UNPREDICTABLE>
   18738:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1873c:	sub	sp, sp, #124	; 0x7c
   18740:	mov	r4, r0
   18744:	mov	r9, r1
   18748:	add	r0, sp, #72	; 0x48
   1874c:	mov	r2, #48	; 0x30
   18750:	mov	r1, #0
   18754:	bl	11108 <memset@plt>
   18758:	cmp	r4, #10
   1875c:	beq	188e8 <__assert_fail@plt+0x76e4>
   18760:	add	lr, sp, #72	; 0x48
   18764:	str	r4, [sp, #72]	; 0x48
   18768:	ldm	lr!, {r0, r1, r2, r3}
   1876c:	add	ip, sp, #24
   18770:	ldr	r5, [pc, #372]	; 188ec <__assert_fail@plt+0x76e8>
   18774:	stmia	ip!, {r0, r1, r2, r3}
   18778:	ldm	lr!, {r0, r1, r2, r3}
   1877c:	stmia	ip!, {r0, r1, r2, r3}
   18780:	ldm	lr, {r0, r1, r2, r3}
   18784:	stm	ip, {r0, r1, r2, r3}
   18788:	bl	110d8 <__errno_location@plt>
   1878c:	ldr	r2, [r5, #4]
   18790:	ldr	r4, [r5]
   18794:	cmp	r2, #0
   18798:	mov	r7, r0
   1879c:	ldr	fp, [r0]
   187a0:	bgt	187fc <__assert_fail@plt+0x75f8>
   187a4:	add	r6, r5, #8
   187a8:	cmp	r4, r6
   187ac:	str	r2, [sp, #72]	; 0x48
   187b0:	beq	188b8 <__assert_fail@plt+0x76b4>
   187b4:	mov	r3, #8
   187b8:	mov	r0, r4
   187bc:	str	r3, [sp]
   187c0:	rsb	r2, r2, #1
   187c4:	add	r1, sp, #72	; 0x48
   187c8:	mvn	r3, #-2147483648	; 0x80000000
   187cc:	bl	1aea8 <__assert_fail@plt+0x9ca4>
   187d0:	mov	r4, r0
   187d4:	str	r0, [r5]
   187d8:	ldr	r0, [r5, #4]
   187dc:	ldr	r2, [sp, #72]	; 0x48
   187e0:	mov	r1, #0
   187e4:	sub	r2, r2, r0
   187e8:	add	r0, r4, r0, lsl #3
   187ec:	lsl	r2, r2, #3
   187f0:	bl	11108 <memset@plt>
   187f4:	ldr	r3, [sp, #72]	; 0x48
   187f8:	str	r3, [r5, #4]
   187fc:	ldr	r6, [sp, #28]
   18800:	ldr	r8, [r4]
   18804:	ldr	r5, [r4, #4]
   18808:	ldr	r2, [sp, #64]	; 0x40
   1880c:	ldr	r3, [sp, #24]
   18810:	ldr	ip, [sp, #68]	; 0x44
   18814:	orr	r6, r6, #1
   18818:	add	sl, sp, #32
   1881c:	str	r2, [sp, #12]
   18820:	str	r3, [sp]
   18824:	str	r6, [sp, #4]
   18828:	mov	r1, r8
   1882c:	mov	r0, r5
   18830:	str	ip, [sp, #16]
   18834:	str	sl, [sp, #8]
   18838:	mvn	r3, #0
   1883c:	mov	r2, r9
   18840:	bl	163b0 <__assert_fail@plt+0x51ac>
   18844:	cmp	r8, r0
   18848:	bhi	188a8 <__assert_fail@plt+0x76a4>
   1884c:	ldr	r3, [pc, #156]	; 188f0 <__assert_fail@plt+0x76ec>
   18850:	add	r8, r0, #1
   18854:	cmp	r5, r3
   18858:	str	r8, [r4]
   1885c:	beq	18868 <__assert_fail@plt+0x7664>
   18860:	mov	r0, r5
   18864:	bl	15e58 <__assert_fail@plt+0x4c54>
   18868:	mov	r0, r8
   1886c:	bl	1ac8c <__assert_fail@plt+0x9a88>
   18870:	ldr	lr, [sp, #68]	; 0x44
   18874:	ldr	r3, [sp, #24]
   18878:	ldr	ip, [sp, #64]	; 0x40
   1887c:	mov	r2, r9
   18880:	mov	r1, r8
   18884:	str	r0, [r4, #4]
   18888:	str	r3, [sp]
   1888c:	str	sl, [sp, #8]
   18890:	str	r6, [sp, #4]
   18894:	str	lr, [sp, #16]
   18898:	str	ip, [sp, #12]
   1889c:	mvn	r3, #0
   188a0:	mov	r5, r0
   188a4:	bl	163b0 <__assert_fail@plt+0x51ac>
   188a8:	mov	r0, r5
   188ac:	str	fp, [r7]
   188b0:	add	sp, sp, #124	; 0x7c
   188b4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   188b8:	mov	r3, #8
   188bc:	add	r1, sp, #72	; 0x48
   188c0:	str	r3, [sp]
   188c4:	rsb	r2, r2, #1
   188c8:	mvn	r3, #-2147483648	; 0x80000000
   188cc:	mov	r0, #0
   188d0:	bl	1aea8 <__assert_fail@plt+0x9ca4>
   188d4:	mov	r4, r0
   188d8:	ldm	r6, {r0, r1}
   188dc:	str	r4, [r5]
   188e0:	stm	r4, {r0, r1}
   188e4:	b	187d8 <__assert_fail@plt+0x75d4>
   188e8:	bl	111ec <abort@plt>
   188ec:	andeq	pc, r2, r8, lsr #2
   188f0:	andeq	pc, r2, r4, ror r2	; <UNPREDICTABLE>
   188f4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   188f8:	sub	sp, sp, #132	; 0x84
   188fc:	mov	r4, r0
   18900:	mov	r9, r1
   18904:	mov	sl, r2
   18908:	add	r0, sp, #80	; 0x50
   1890c:	mov	r2, #48	; 0x30
   18910:	mov	r1, #0
   18914:	bl	11108 <memset@plt>
   18918:	cmp	r4, #10
   1891c:	beq	18ab0 <__assert_fail@plt+0x78ac>
   18920:	add	lr, sp, #80	; 0x50
   18924:	str	r4, [sp, #80]	; 0x50
   18928:	ldm	lr!, {r0, r1, r2, r3}
   1892c:	add	ip, sp, #32
   18930:	ldr	r5, [pc, #380]	; 18ab4 <__assert_fail@plt+0x78b0>
   18934:	stmia	ip!, {r0, r1, r2, r3}
   18938:	ldm	lr!, {r0, r1, r2, r3}
   1893c:	stmia	ip!, {r0, r1, r2, r3}
   18940:	ldm	lr, {r0, r1, r2, r3}
   18944:	stm	ip, {r0, r1, r2, r3}
   18948:	bl	110d8 <__errno_location@plt>
   1894c:	ldr	r2, [r5, #4]
   18950:	ldr	r4, [r5]
   18954:	cmp	r2, #0
   18958:	ldr	r3, [r0]
   1895c:	mov	r7, r0
   18960:	str	r3, [sp, #28]
   18964:	bgt	189c0 <__assert_fail@plt+0x77bc>
   18968:	add	r6, r5, #8
   1896c:	cmp	r4, r6
   18970:	str	r2, [sp, #80]	; 0x50
   18974:	beq	18a80 <__assert_fail@plt+0x787c>
   18978:	mov	r3, #8
   1897c:	mov	r0, r4
   18980:	str	r3, [sp]
   18984:	rsb	r2, r2, #1
   18988:	add	r1, sp, #80	; 0x50
   1898c:	mvn	r3, #-2147483648	; 0x80000000
   18990:	bl	1aea8 <__assert_fail@plt+0x9ca4>
   18994:	mov	r4, r0
   18998:	str	r0, [r5]
   1899c:	ldr	r0, [r5, #4]
   189a0:	ldr	r2, [sp, #80]	; 0x50
   189a4:	mov	r1, #0
   189a8:	sub	r2, r2, r0
   189ac:	add	r0, r4, r0, lsl #3
   189b0:	lsl	r2, r2, #3
   189b4:	bl	11108 <memset@plt>
   189b8:	ldr	r3, [sp, #80]	; 0x50
   189bc:	str	r3, [r5, #4]
   189c0:	ldr	r6, [sp, #36]	; 0x24
   189c4:	ldr	r8, [r4]
   189c8:	ldr	r5, [r4, #4]
   189cc:	ldr	r2, [sp, #72]	; 0x48
   189d0:	ldr	r3, [sp, #32]
   189d4:	ldr	ip, [sp, #76]	; 0x4c
   189d8:	orr	r6, r6, #1
   189dc:	add	fp, sp, #40	; 0x28
   189e0:	str	r2, [sp, #12]
   189e4:	str	r3, [sp]
   189e8:	str	r6, [sp, #4]
   189ec:	mov	r1, r8
   189f0:	mov	r0, r5
   189f4:	str	ip, [sp, #16]
   189f8:	str	fp, [sp, #8]
   189fc:	mov	r3, sl
   18a00:	mov	r2, r9
   18a04:	bl	163b0 <__assert_fail@plt+0x51ac>
   18a08:	cmp	r8, r0
   18a0c:	bhi	18a6c <__assert_fail@plt+0x7868>
   18a10:	ldr	r3, [pc, #160]	; 18ab8 <__assert_fail@plt+0x78b4>
   18a14:	add	r8, r0, #1
   18a18:	cmp	r5, r3
   18a1c:	str	r8, [r4]
   18a20:	beq	18a2c <__assert_fail@plt+0x7828>
   18a24:	mov	r0, r5
   18a28:	bl	15e58 <__assert_fail@plt+0x4c54>
   18a2c:	mov	r0, r8
   18a30:	bl	1ac8c <__assert_fail@plt+0x9a88>
   18a34:	ldr	ip, [sp, #76]	; 0x4c
   18a38:	ldr	lr, [sp, #32]
   18a3c:	mov	r3, sl
   18a40:	mov	r2, r9
   18a44:	mov	r1, r8
   18a48:	str	r0, [r4, #4]
   18a4c:	ldr	r4, [sp, #72]	; 0x48
   18a50:	str	fp, [sp, #8]
   18a54:	str	r6, [sp, #4]
   18a58:	str	ip, [sp, #16]
   18a5c:	str	r4, [sp, #12]
   18a60:	str	lr, [sp]
   18a64:	mov	r5, r0
   18a68:	bl	163b0 <__assert_fail@plt+0x51ac>
   18a6c:	ldr	r3, [sp, #28]
   18a70:	mov	r0, r5
   18a74:	str	r3, [r7]
   18a78:	add	sp, sp, #132	; 0x84
   18a7c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18a80:	mov	r3, #8
   18a84:	add	r1, sp, #80	; 0x50
   18a88:	str	r3, [sp]
   18a8c:	rsb	r2, r2, #1
   18a90:	mvn	r3, #-2147483648	; 0x80000000
   18a94:	mov	r0, #0
   18a98:	bl	1aea8 <__assert_fail@plt+0x9ca4>
   18a9c:	mov	r4, r0
   18aa0:	ldm	r6, {r0, r1}
   18aa4:	str	r4, [r5]
   18aa8:	stm	r4, {r0, r1}
   18aac:	b	1899c <__assert_fail@plt+0x7798>
   18ab0:	bl	111ec <abort@plt>
   18ab4:	andeq	pc, r2, r8, lsr #2
   18ab8:	andeq	pc, r2, r4, ror r2	; <UNPREDICTABLE>
   18abc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18ac0:	mov	r4, r2
   18ac4:	ldr	lr, [pc, #432]	; 18c7c <__assert_fail@plt+0x7a78>
   18ac8:	mov	sl, r0
   18acc:	mov	fp, r1
   18ad0:	ldm	lr!, {r0, r1, r2, r3}
   18ad4:	sub	sp, sp, #92	; 0x5c
   18ad8:	add	ip, sp, #40	; 0x28
   18adc:	lsr	r7, r4, #5
   18ae0:	stmia	ip!, {r0, r1, r2, r3}
   18ae4:	add	r6, sp, #48	; 0x30
   18ae8:	ldm	lr!, {r0, r1, r2, r3}
   18aec:	and	r4, r4, #31
   18af0:	ldr	r5, [pc, #392]	; 18c80 <__assert_fail@plt+0x7a7c>
   18af4:	stmia	ip!, {r0, r1, r2, r3}
   18af8:	ldm	lr, {r0, r1, r2, r3}
   18afc:	stm	ip, {r0, r1, r2, r3}
   18b00:	ldr	r2, [r6, r7, lsl #2]
   18b04:	lsr	r3, r2, r4
   18b08:	eor	r3, r3, #1
   18b0c:	and	r3, r3, #1
   18b10:	eor	r4, r2, r3, lsl r4
   18b14:	str	r4, [r6, r7, lsl #2]
   18b18:	bl	110d8 <__errno_location@plt>
   18b1c:	ldr	r2, [r5, #4]
   18b20:	ldr	r4, [r5]
   18b24:	cmp	r2, #0
   18b28:	ldr	r3, [r0]
   18b2c:	mov	r8, r0
   18b30:	str	r3, [sp, #28]
   18b34:	bgt	18b90 <__assert_fail@plt+0x798c>
   18b38:	add	r7, r5, #8
   18b3c:	cmp	r4, r7
   18b40:	str	r2, [sp, #36]	; 0x24
   18b44:	beq	18c4c <__assert_fail@plt+0x7a48>
   18b48:	mov	r3, #8
   18b4c:	mov	r0, r4
   18b50:	str	r3, [sp]
   18b54:	rsb	r2, r2, #1
   18b58:	mvn	r3, #-2147483648	; 0x80000000
   18b5c:	add	r1, sp, #36	; 0x24
   18b60:	bl	1aea8 <__assert_fail@plt+0x9ca4>
   18b64:	mov	r4, r0
   18b68:	str	r0, [r5]
   18b6c:	ldr	r0, [r5, #4]
   18b70:	ldr	r2, [sp, #36]	; 0x24
   18b74:	mov	r1, #0
   18b78:	sub	r2, r2, r0
   18b7c:	add	r0, r4, r0, lsl #3
   18b80:	lsl	r2, r2, #3
   18b84:	bl	11108 <memset@plt>
   18b88:	ldr	r3, [sp, #36]	; 0x24
   18b8c:	str	r3, [r5, #4]
   18b90:	ldr	r7, [sp, #44]	; 0x2c
   18b94:	ldr	r9, [r4]
   18b98:	ldr	r5, [r4, #4]
   18b9c:	ldr	r2, [sp, #80]	; 0x50
   18ba0:	ldr	r3, [sp, #40]	; 0x28
   18ba4:	ldr	ip, [sp, #84]	; 0x54
   18ba8:	orr	r7, r7, #1
   18bac:	str	r2, [sp, #12]
   18bb0:	str	r3, [sp]
   18bb4:	str	r7, [sp, #4]
   18bb8:	str	r6, [sp, #8]
   18bbc:	mov	r1, r9
   18bc0:	mov	r0, r5
   18bc4:	str	ip, [sp, #16]
   18bc8:	mov	r3, fp
   18bcc:	mov	r2, sl
   18bd0:	bl	163b0 <__assert_fail@plt+0x51ac>
   18bd4:	cmp	r9, r0
   18bd8:	bhi	18c38 <__assert_fail@plt+0x7a34>
   18bdc:	ldr	r3, [pc, #160]	; 18c84 <__assert_fail@plt+0x7a80>
   18be0:	add	r9, r0, #1
   18be4:	cmp	r5, r3
   18be8:	str	r9, [r4]
   18bec:	beq	18bf8 <__assert_fail@plt+0x79f4>
   18bf0:	mov	r0, r5
   18bf4:	bl	15e58 <__assert_fail@plt+0x4c54>
   18bf8:	mov	r0, r9
   18bfc:	bl	1ac8c <__assert_fail@plt+0x9a88>
   18c00:	ldr	ip, [sp, #84]	; 0x54
   18c04:	ldr	lr, [sp, #40]	; 0x28
   18c08:	mov	r3, fp
   18c0c:	mov	r2, sl
   18c10:	mov	r1, r9
   18c14:	str	r0, [r4, #4]
   18c18:	ldr	r4, [sp, #80]	; 0x50
   18c1c:	str	r6, [sp, #8]
   18c20:	str	r7, [sp, #4]
   18c24:	str	ip, [sp, #16]
   18c28:	str	r4, [sp, #12]
   18c2c:	str	lr, [sp]
   18c30:	mov	r5, r0
   18c34:	bl	163b0 <__assert_fail@plt+0x51ac>
   18c38:	ldr	r3, [sp, #28]
   18c3c:	mov	r0, r5
   18c40:	str	r3, [r8]
   18c44:	add	sp, sp, #92	; 0x5c
   18c48:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18c4c:	mov	r3, #8
   18c50:	str	r3, [sp]
   18c54:	add	r1, sp, #36	; 0x24
   18c58:	rsb	r2, r2, #1
   18c5c:	mvn	r3, #-2147483648	; 0x80000000
   18c60:	mov	r0, #0
   18c64:	bl	1aea8 <__assert_fail@plt+0x9ca4>
   18c68:	mov	r4, r0
   18c6c:	ldm	r7, {r0, r1}
   18c70:	str	r4, [r5]
   18c74:	stm	r4, {r0, r1}
   18c78:	b	18b6c <__assert_fail@plt+0x7968>
   18c7c:	andeq	pc, r2, r4, asr #4
   18c80:	andeq	pc, r2, r8, lsr #2
   18c84:	andeq	pc, r2, r4, ror r2	; <UNPREDICTABLE>
   18c88:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18c8c:	mov	r4, r1
   18c90:	ldr	lr, [pc, #420]	; 18e3c <__assert_fail@plt+0x7c38>
   18c94:	mov	r6, r0
   18c98:	sub	sp, sp, #84	; 0x54
   18c9c:	ldm	lr!, {r0, r1, r2, r3}
   18ca0:	add	ip, sp, #32
   18ca4:	lsr	r8, r4, #5
   18ca8:	add	r5, sp, #40	; 0x28
   18cac:	stmia	ip!, {r0, r1, r2, r3}
   18cb0:	and	r4, r4, #31
   18cb4:	ldm	lr!, {r0, r1, r2, r3}
   18cb8:	ldr	r7, [pc, #384]	; 18e40 <__assert_fail@plt+0x7c3c>
   18cbc:	stmia	ip!, {r0, r1, r2, r3}
   18cc0:	ldm	lr, {r0, r1, r2, r3}
   18cc4:	stm	ip, {r0, r1, r2, r3}
   18cc8:	ldr	r2, [r5, r8, lsl #2]
   18ccc:	lsr	r3, r2, r4
   18cd0:	eor	r3, r3, #1
   18cd4:	and	r3, r3, #1
   18cd8:	eor	r4, r2, r3, lsl r4
   18cdc:	str	r4, [r5, r8, lsl #2]
   18ce0:	bl	110d8 <__errno_location@plt>
   18ce4:	ldr	r2, [r7, #4]
   18ce8:	ldr	r4, [r7]
   18cec:	cmp	r2, #0
   18cf0:	mov	r9, r0
   18cf4:	ldr	sl, [r0]
   18cf8:	bgt	18d54 <__assert_fail@plt+0x7b50>
   18cfc:	add	r8, r7, #8
   18d00:	cmp	r4, r8
   18d04:	str	r2, [sp, #28]
   18d08:	beq	18e0c <__assert_fail@plt+0x7c08>
   18d0c:	mov	r3, #8
   18d10:	mov	r0, r4
   18d14:	str	r3, [sp]
   18d18:	rsb	r2, r2, #1
   18d1c:	mvn	r3, #-2147483648	; 0x80000000
   18d20:	add	r1, sp, #28
   18d24:	bl	1aea8 <__assert_fail@plt+0x9ca4>
   18d28:	mov	r4, r0
   18d2c:	str	r0, [r7]
   18d30:	ldr	r0, [r7, #4]
   18d34:	ldr	r2, [sp, #28]
   18d38:	mov	r1, #0
   18d3c:	sub	r2, r2, r0
   18d40:	add	r0, r4, r0, lsl #3
   18d44:	lsl	r2, r2, #3
   18d48:	bl	11108 <memset@plt>
   18d4c:	ldr	r3, [sp, #28]
   18d50:	str	r3, [r7, #4]
   18d54:	ldr	r8, [sp, #36]	; 0x24
   18d58:	ldr	fp, [r4]
   18d5c:	ldr	r7, [r4, #4]
   18d60:	ldr	r2, [sp, #72]	; 0x48
   18d64:	ldr	r3, [sp, #32]
   18d68:	ldr	ip, [sp, #76]	; 0x4c
   18d6c:	orr	r8, r8, #1
   18d70:	str	r2, [sp, #12]
   18d74:	str	r3, [sp]
   18d78:	str	r8, [sp, #4]
   18d7c:	str	r5, [sp, #8]
   18d80:	mov	r1, fp
   18d84:	mov	r0, r7
   18d88:	str	ip, [sp, #16]
   18d8c:	mvn	r3, #0
   18d90:	mov	r2, r6
   18d94:	bl	163b0 <__assert_fail@plt+0x51ac>
   18d98:	cmp	fp, r0
   18d9c:	bhi	18dfc <__assert_fail@plt+0x7bf8>
   18da0:	ldr	r3, [pc, #156]	; 18e44 <__assert_fail@plt+0x7c40>
   18da4:	add	fp, r0, #1
   18da8:	cmp	r7, r3
   18dac:	str	fp, [r4]
   18db0:	beq	18dbc <__assert_fail@plt+0x7bb8>
   18db4:	mov	r0, r7
   18db8:	bl	15e58 <__assert_fail@plt+0x4c54>
   18dbc:	mov	r0, fp
   18dc0:	bl	1ac8c <__assert_fail@plt+0x9a88>
   18dc4:	ldr	lr, [sp, #76]	; 0x4c
   18dc8:	ldr	r3, [sp, #32]
   18dcc:	ldr	ip, [sp, #72]	; 0x48
   18dd0:	mov	r2, r6
   18dd4:	mov	r1, fp
   18dd8:	str	r0, [r4, #4]
   18ddc:	str	r3, [sp]
   18de0:	str	r5, [sp, #8]
   18de4:	str	r8, [sp, #4]
   18de8:	str	lr, [sp, #16]
   18dec:	str	ip, [sp, #12]
   18df0:	mvn	r3, #0
   18df4:	mov	r7, r0
   18df8:	bl	163b0 <__assert_fail@plt+0x51ac>
   18dfc:	mov	r0, r7
   18e00:	str	sl, [r9]
   18e04:	add	sp, sp, #84	; 0x54
   18e08:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18e0c:	mov	r3, #8
   18e10:	str	r3, [sp]
   18e14:	add	r1, sp, #28
   18e18:	rsb	r2, r2, #1
   18e1c:	mvn	r3, #-2147483648	; 0x80000000
   18e20:	mov	r0, #0
   18e24:	bl	1aea8 <__assert_fail@plt+0x9ca4>
   18e28:	mov	r4, r0
   18e2c:	ldm	r8, {r0, r1}
   18e30:	str	r4, [r7]
   18e34:	stm	r4, {r0, r1}
   18e38:	b	18d30 <__assert_fail@plt+0x7b2c>
   18e3c:	andeq	pc, r2, r4, asr #4
   18e40:	andeq	pc, r2, r8, lsr #2
   18e44:	andeq	pc, r2, r4, ror r2	; <UNPREDICTABLE>
   18e48:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18e4c:	mov	r6, r0
   18e50:	ldr	lr, [pc, #404]	; 18fec <__assert_fail@plt+0x7de8>
   18e54:	sub	sp, sp, #84	; 0x54
   18e58:	add	ip, sp, #32
   18e5c:	ldm	lr!, {r0, r1, r2, r3}
   18e60:	ldr	r5, [pc, #392]	; 18ff0 <__assert_fail@plt+0x7dec>
   18e64:	stmia	ip!, {r0, r1, r2, r3}
   18e68:	ldm	lr!, {r0, r1, r2, r3}
   18e6c:	ldr	r4, [sp, #44]	; 0x2c
   18e70:	stmia	ip!, {r0, r1, r2, r3}
   18e74:	ldm	lr, {r0, r1, r2, r3}
   18e78:	mvn	lr, r4
   18e7c:	and	lr, lr, #67108864	; 0x4000000
   18e80:	eor	lr, lr, r4
   18e84:	stm	ip, {r0, r1, r2, r3}
   18e88:	str	lr, [sp, #44]	; 0x2c
   18e8c:	bl	110d8 <__errno_location@plt>
   18e90:	ldr	r2, [r5, #4]
   18e94:	ldr	r4, [r5]
   18e98:	cmp	r2, #0
   18e9c:	mov	r8, r0
   18ea0:	ldr	sl, [r0]
   18ea4:	bgt	18f00 <__assert_fail@plt+0x7cfc>
   18ea8:	add	r7, r5, #8
   18eac:	cmp	r4, r7
   18eb0:	str	r2, [sp, #28]
   18eb4:	beq	18fbc <__assert_fail@plt+0x7db8>
   18eb8:	mov	r3, #8
   18ebc:	mov	r0, r4
   18ec0:	str	r3, [sp]
   18ec4:	rsb	r2, r2, #1
   18ec8:	mvn	r3, #-2147483648	; 0x80000000
   18ecc:	add	r1, sp, #28
   18ed0:	bl	1aea8 <__assert_fail@plt+0x9ca4>
   18ed4:	mov	r4, r0
   18ed8:	str	r0, [r5]
   18edc:	ldr	r0, [r5, #4]
   18ee0:	ldr	r2, [sp, #28]
   18ee4:	mov	r1, #0
   18ee8:	sub	r2, r2, r0
   18eec:	add	r0, r4, r0, lsl #3
   18ef0:	lsl	r2, r2, #3
   18ef4:	bl	11108 <memset@plt>
   18ef8:	ldr	r3, [sp, #28]
   18efc:	str	r3, [r5, #4]
   18f00:	ldr	r7, [sp, #36]	; 0x24
   18f04:	ldr	r9, [r4]
   18f08:	ldr	r5, [r4, #4]
   18f0c:	ldr	r2, [sp, #72]	; 0x48
   18f10:	ldr	r3, [sp, #32]
   18f14:	ldr	ip, [sp, #76]	; 0x4c
   18f18:	orr	r7, r7, #1
   18f1c:	add	fp, sp, #40	; 0x28
   18f20:	str	r2, [sp, #12]
   18f24:	str	r3, [sp]
   18f28:	str	r7, [sp, #4]
   18f2c:	mov	r1, r9
   18f30:	mov	r0, r5
   18f34:	str	ip, [sp, #16]
   18f38:	str	fp, [sp, #8]
   18f3c:	mvn	r3, #0
   18f40:	mov	r2, r6
   18f44:	bl	163b0 <__assert_fail@plt+0x51ac>
   18f48:	cmp	r9, r0
   18f4c:	bhi	18fac <__assert_fail@plt+0x7da8>
   18f50:	ldr	r3, [pc, #156]	; 18ff4 <__assert_fail@plt+0x7df0>
   18f54:	add	r9, r0, #1
   18f58:	cmp	r5, r3
   18f5c:	str	r9, [r4]
   18f60:	beq	18f6c <__assert_fail@plt+0x7d68>
   18f64:	mov	r0, r5
   18f68:	bl	15e58 <__assert_fail@plt+0x4c54>
   18f6c:	mov	r0, r9
   18f70:	bl	1ac8c <__assert_fail@plt+0x9a88>
   18f74:	ldr	lr, [sp, #76]	; 0x4c
   18f78:	ldr	r3, [sp, #32]
   18f7c:	ldr	ip, [sp, #72]	; 0x48
   18f80:	mov	r2, r6
   18f84:	mov	r1, r9
   18f88:	str	r0, [r4, #4]
   18f8c:	str	r3, [sp]
   18f90:	str	fp, [sp, #8]
   18f94:	str	r7, [sp, #4]
   18f98:	str	lr, [sp, #16]
   18f9c:	str	ip, [sp, #12]
   18fa0:	mvn	r3, #0
   18fa4:	mov	r5, r0
   18fa8:	bl	163b0 <__assert_fail@plt+0x51ac>
   18fac:	mov	r0, r5
   18fb0:	str	sl, [r8]
   18fb4:	add	sp, sp, #84	; 0x54
   18fb8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18fbc:	mov	r3, #8
   18fc0:	str	r3, [sp]
   18fc4:	add	r1, sp, #28
   18fc8:	rsb	r2, r2, #1
   18fcc:	mvn	r3, #-2147483648	; 0x80000000
   18fd0:	mov	r0, #0
   18fd4:	bl	1aea8 <__assert_fail@plt+0x9ca4>
   18fd8:	mov	r4, r0
   18fdc:	ldm	r7, {r0, r1}
   18fe0:	str	r4, [r5]
   18fe4:	stm	r4, {r0, r1}
   18fe8:	b	18edc <__assert_fail@plt+0x7cd8>
   18fec:	andeq	pc, r2, r4, asr #4
   18ff0:	andeq	pc, r2, r8, lsr #2
   18ff4:	andeq	pc, r2, r4, ror r2	; <UNPREDICTABLE>
   18ff8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18ffc:	mov	r9, r0
   19000:	ldr	lr, [pc, #416]	; 191a8 <__assert_fail@plt+0x7fa4>
   19004:	mov	sl, r1
   19008:	sub	sp, sp, #92	; 0x5c
   1900c:	ldm	lr!, {r0, r1, r2, r3}
   19010:	add	ip, sp, #40	; 0x28
   19014:	ldr	r5, [pc, #400]	; 191ac <__assert_fail@plt+0x7fa8>
   19018:	stmia	ip!, {r0, r1, r2, r3}
   1901c:	ldm	lr!, {r0, r1, r2, r3}
   19020:	ldr	r4, [sp, #52]	; 0x34
   19024:	stmia	ip!, {r0, r1, r2, r3}
   19028:	ldm	lr, {r0, r1, r2, r3}
   1902c:	mvn	lr, r4
   19030:	and	lr, lr, #67108864	; 0x4000000
   19034:	eor	lr, lr, r4
   19038:	stm	ip, {r0, r1, r2, r3}
   1903c:	str	lr, [sp, #52]	; 0x34
   19040:	bl	110d8 <__errno_location@plt>
   19044:	ldr	r2, [r5, #4]
   19048:	ldr	r4, [r5]
   1904c:	cmp	r2, #0
   19050:	ldr	r3, [r0]
   19054:	mov	r7, r0
   19058:	str	r3, [sp, #28]
   1905c:	bgt	190b8 <__assert_fail@plt+0x7eb4>
   19060:	add	r6, r5, #8
   19064:	cmp	r4, r6
   19068:	str	r2, [sp, #36]	; 0x24
   1906c:	beq	19178 <__assert_fail@plt+0x7f74>
   19070:	mov	r3, #8
   19074:	mov	r0, r4
   19078:	str	r3, [sp]
   1907c:	rsb	r2, r2, #1
   19080:	mvn	r3, #-2147483648	; 0x80000000
   19084:	add	r1, sp, #36	; 0x24
   19088:	bl	1aea8 <__assert_fail@plt+0x9ca4>
   1908c:	mov	r4, r0
   19090:	str	r0, [r5]
   19094:	ldr	r0, [r5, #4]
   19098:	ldr	r2, [sp, #36]	; 0x24
   1909c:	mov	r1, #0
   190a0:	sub	r2, r2, r0
   190a4:	add	r0, r4, r0, lsl #3
   190a8:	lsl	r2, r2, #3
   190ac:	bl	11108 <memset@plt>
   190b0:	ldr	r3, [sp, #36]	; 0x24
   190b4:	str	r3, [r5, #4]
   190b8:	ldr	r6, [sp, #44]	; 0x2c
   190bc:	ldr	r8, [r4]
   190c0:	ldr	r5, [r4, #4]
   190c4:	ldr	r2, [sp, #80]	; 0x50
   190c8:	ldr	r3, [sp, #40]	; 0x28
   190cc:	ldr	ip, [sp, #84]	; 0x54
   190d0:	orr	r6, r6, #1
   190d4:	add	fp, sp, #48	; 0x30
   190d8:	str	r2, [sp, #12]
   190dc:	str	r3, [sp]
   190e0:	str	r6, [sp, #4]
   190e4:	mov	r1, r8
   190e8:	mov	r0, r5
   190ec:	str	ip, [sp, #16]
   190f0:	str	fp, [sp, #8]
   190f4:	mov	r3, sl
   190f8:	mov	r2, r9
   190fc:	bl	163b0 <__assert_fail@plt+0x51ac>
   19100:	cmp	r8, r0
   19104:	bhi	19164 <__assert_fail@plt+0x7f60>
   19108:	ldr	r3, [pc, #160]	; 191b0 <__assert_fail@plt+0x7fac>
   1910c:	add	r8, r0, #1
   19110:	cmp	r5, r3
   19114:	str	r8, [r4]
   19118:	beq	19124 <__assert_fail@plt+0x7f20>
   1911c:	mov	r0, r5
   19120:	bl	15e58 <__assert_fail@plt+0x4c54>
   19124:	mov	r0, r8
   19128:	bl	1ac8c <__assert_fail@plt+0x9a88>
   1912c:	ldr	ip, [sp, #84]	; 0x54
   19130:	ldr	lr, [sp, #40]	; 0x28
   19134:	mov	r3, sl
   19138:	mov	r2, r9
   1913c:	mov	r1, r8
   19140:	str	r0, [r4, #4]
   19144:	ldr	r4, [sp, #80]	; 0x50
   19148:	str	fp, [sp, #8]
   1914c:	str	r6, [sp, #4]
   19150:	str	ip, [sp, #16]
   19154:	str	r4, [sp, #12]
   19158:	str	lr, [sp]
   1915c:	mov	r5, r0
   19160:	bl	163b0 <__assert_fail@plt+0x51ac>
   19164:	ldr	r3, [sp, #28]
   19168:	mov	r0, r5
   1916c:	str	r3, [r7]
   19170:	add	sp, sp, #92	; 0x5c
   19174:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19178:	mov	r3, #8
   1917c:	str	r3, [sp]
   19180:	add	r1, sp, #36	; 0x24
   19184:	rsb	r2, r2, #1
   19188:	mvn	r3, #-2147483648	; 0x80000000
   1918c:	mov	r0, #0
   19190:	bl	1aea8 <__assert_fail@plt+0x9ca4>
   19194:	mov	r4, r0
   19198:	ldm	r6, {r0, r1}
   1919c:	str	r4, [r5]
   191a0:	stm	r4, {r0, r1}
   191a4:	b	19094 <__assert_fail@plt+0x7e90>
   191a8:	andeq	pc, r2, r4, asr #4
   191ac:	andeq	pc, r2, r8, lsr #2
   191b0:	andeq	pc, r2, r4, ror r2	; <UNPREDICTABLE>
   191b4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   191b8:	sub	sp, sp, #180	; 0xb4
   191bc:	mov	r6, r1
   191c0:	mov	r4, r0
   191c4:	mov	r9, r2
   191c8:	add	r0, sp, #80	; 0x50
   191cc:	mov	r2, #48	; 0x30
   191d0:	mov	r1, #0
   191d4:	bl	11108 <memset@plt>
   191d8:	cmp	r6, #10
   191dc:	beq	193bc <__assert_fail@plt+0x81b8>
   191e0:	add	r5, sp, #80	; 0x50
   191e4:	str	r6, [sp, #80]	; 0x50
   191e8:	ldm	r5!, {r0, r1, r2, r3}
   191ec:	add	ip, sp, #128	; 0x80
   191f0:	mov	r7, ip
   191f4:	add	lr, sp, #32
   191f8:	stmia	ip!, {r0, r1, r2, r3}
   191fc:	mov	r8, #67108864	; 0x4000000
   19200:	ldm	r5!, {r0, r1, r2, r3}
   19204:	ldr	r6, [pc, #436]	; 193c0 <__assert_fail@plt+0x81bc>
   19208:	stmia	ip!, {r0, r1, r2, r3}
   1920c:	ldm	r5, {r0, r1, r2, r3}
   19210:	stm	ip, {r0, r1, r2, r3}
   19214:	ldm	r7!, {r0, r1, r2, r3}
   19218:	stmia	lr!, {r0, r1, r2, r3}
   1921c:	ldm	r7!, {r0, r1, r2, r3}
   19220:	str	r8, [sp, #44]	; 0x2c
   19224:	stmia	lr!, {r0, r1, r2, r3}
   19228:	ldm	ip, {r0, r1, r2, r3}
   1922c:	stm	lr, {r0, r1, r2, r3}
   19230:	bl	110d8 <__errno_location@plt>
   19234:	cmn	r4, #-2147483647	; 0x80000001
   19238:	ldr	r5, [r6]
   1923c:	mov	r7, r0
   19240:	movne	r0, #0
   19244:	moveq	r0, #1
   19248:	ldr	r3, [r7]
   1924c:	orrs	r0, r0, r4, lsr #31
   19250:	str	r3, [sp, #24]
   19254:	bne	193bc <__assert_fail@plt+0x81b8>
   19258:	ldr	r2, [r6, #4]
   1925c:	cmp	r4, r2
   19260:	blt	192c0 <__assert_fail@plt+0x80bc>
   19264:	add	r8, r6, #8
   19268:	cmp	r5, r8
   1926c:	str	r2, [sp, #80]	; 0x50
   19270:	beq	1938c <__assert_fail@plt+0x8188>
   19274:	mov	r3, #8
   19278:	sub	r2, r4, r2
   1927c:	mov	r0, r5
   19280:	str	r3, [sp]
   19284:	add	r2, r2, #1
   19288:	add	r1, sp, #80	; 0x50
   1928c:	mvn	r3, #-2147483648	; 0x80000000
   19290:	bl	1aea8 <__assert_fail@plt+0x9ca4>
   19294:	mov	r5, r0
   19298:	str	r0, [r6]
   1929c:	ldr	r0, [r6, #4]
   192a0:	ldr	r2, [sp, #80]	; 0x50
   192a4:	mov	r1, #0
   192a8:	sub	r2, r2, r0
   192ac:	add	r0, r5, r0, lsl #3
   192b0:	lsl	r2, r2, #3
   192b4:	bl	11108 <memset@plt>
   192b8:	ldr	r3, [sp, #80]	; 0x50
   192bc:	str	r3, [r6, #4]
   192c0:	add	fp, r5, r4, lsl #3
   192c4:	ldr	r1, [sp, #36]	; 0x24
   192c8:	ldr	r8, [r5, r4, lsl #3]
   192cc:	ldr	r6, [fp, #4]
   192d0:	ldr	r2, [sp, #72]	; 0x48
   192d4:	ldr	r3, [sp, #32]
   192d8:	ldr	ip, [sp, #76]	; 0x4c
   192dc:	orr	r1, r1, #1
   192e0:	add	sl, sp, #40	; 0x28
   192e4:	str	r1, [sp, #28]
   192e8:	str	r1, [sp, #4]
   192ec:	str	r2, [sp, #12]
   192f0:	str	r3, [sp]
   192f4:	mov	r0, r6
   192f8:	mov	r1, r8
   192fc:	str	ip, [sp, #16]
   19300:	str	sl, [sp, #8]
   19304:	mvn	r3, #0
   19308:	mov	r2, r9
   1930c:	bl	163b0 <__assert_fail@plt+0x51ac>
   19310:	cmp	r8, r0
   19314:	bhi	19378 <__assert_fail@plt+0x8174>
   19318:	ldr	r3, [pc, #164]	; 193c4 <__assert_fail@plt+0x81c0>
   1931c:	add	r8, r0, #1
   19320:	cmp	r6, r3
   19324:	str	r8, [r5, r4, lsl #3]
   19328:	beq	19334 <__assert_fail@plt+0x8130>
   1932c:	mov	r0, r6
   19330:	bl	15e58 <__assert_fail@plt+0x4c54>
   19334:	mov	r0, r8
   19338:	bl	1ac8c <__assert_fail@plt+0x9a88>
   1933c:	ldr	lr, [sp, #76]	; 0x4c
   19340:	ldr	r3, [sp, #32]
   19344:	ldr	ip, [sp, #72]	; 0x48
   19348:	ldr	r4, [sp, #28]
   1934c:	mov	r2, r9
   19350:	mov	r1, r8
   19354:	str	r0, [fp, #4]
   19358:	str	r3, [sp]
   1935c:	str	sl, [sp, #8]
   19360:	str	r4, [sp, #4]
   19364:	str	lr, [sp, #16]
   19368:	str	ip, [sp, #12]
   1936c:	mvn	r3, #0
   19370:	mov	r6, r0
   19374:	bl	163b0 <__assert_fail@plt+0x51ac>
   19378:	ldr	r3, [sp, #24]
   1937c:	mov	r0, r6
   19380:	str	r3, [r7]
   19384:	add	sp, sp, #180	; 0xb4
   19388:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1938c:	mov	r3, #8
   19390:	sub	r2, r4, r2
   19394:	add	r1, sp, #80	; 0x50
   19398:	str	r3, [sp]
   1939c:	add	r2, r2, #1
   193a0:	mvn	r3, #-2147483648	; 0x80000000
   193a4:	bl	1aea8 <__assert_fail@plt+0x9ca4>
   193a8:	mov	r5, r0
   193ac:	ldm	r8, {r0, r1}
   193b0:	str	r5, [r6]
   193b4:	stm	r5, {r0, r1}
   193b8:	b	1929c <__assert_fail@plt+0x8098>
   193bc:	bl	111ec <abort@plt>
   193c0:	andeq	pc, r2, r8, lsr #2
   193c4:	andeq	pc, r2, r4, ror r2	; <UNPREDICTABLE>
   193c8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   193cc:	mov	r7, r1
   193d0:	ldr	lr, [pc, #492]	; 195c4 <__assert_fail@plt+0x83c0>
   193d4:	mov	r8, r2
   193d8:	mov	r4, r0
   193dc:	mov	fp, r3
   193e0:	ldm	lr!, {r0, r1, r2, r3}
   193e4:	sub	sp, sp, #100	; 0x64
   193e8:	add	ip, sp, #48	; 0x30
   193ec:	mov	sl, #10
   193f0:	stmia	ip!, {r0, r1, r2, r3}
   193f4:	cmp	r8, #0
   193f8:	cmpne	r7, #0
   193fc:	ldm	lr!, {r0, r1, r2, r3}
   19400:	str	sl, [sp, #48]	; 0x30
   19404:	stmia	ip!, {r0, r1, r2, r3}
   19408:	ldm	lr, {r0, r1, r2, r3}
   1940c:	stm	ip, {r0, r1, r2, r3}
   19410:	beq	195c0 <__assert_fail@plt+0x83bc>
   19414:	str	r7, [sp, #88]	; 0x58
   19418:	str	r8, [sp, #92]	; 0x5c
   1941c:	bl	110d8 <__errno_location@plt>
   19420:	ldr	r6, [pc, #416]	; 195c8 <__assert_fail@plt+0x83c4>
   19424:	cmn	r4, #-2147483647	; 0x80000001
   19428:	ldr	r5, [r6]
   1942c:	mov	r9, r0
   19430:	movne	r0, #0
   19434:	moveq	r0, #1
   19438:	ldr	r3, [r9]
   1943c:	orrs	r0, r0, r4, lsr #31
   19440:	str	r3, [sp, #28]
   19444:	bne	195c0 <__assert_fail@plt+0x83bc>
   19448:	ldr	r2, [r6, #4]
   1944c:	cmp	r4, r2
   19450:	movlt	r3, sl
   19454:	blt	194c0 <__assert_fail@plt+0x82bc>
   19458:	add	r7, r6, #8
   1945c:	cmp	r5, r7
   19460:	str	r2, [sp, #44]	; 0x2c
   19464:	beq	19590 <__assert_fail@plt+0x838c>
   19468:	mov	r3, #8
   1946c:	sub	r2, r4, r2
   19470:	mov	r0, r5
   19474:	str	r3, [sp]
   19478:	add	r2, r2, #1
   1947c:	mvn	r3, #-2147483648	; 0x80000000
   19480:	add	r1, sp, #44	; 0x2c
   19484:	bl	1aea8 <__assert_fail@plt+0x9ca4>
   19488:	mov	r5, r0
   1948c:	str	r0, [r6]
   19490:	ldr	r0, [r6, #4]
   19494:	ldr	r2, [sp, #44]	; 0x2c
   19498:	mov	r1, #0
   1949c:	sub	r2, r2, r0
   194a0:	add	r0, r5, r0, lsl #3
   194a4:	lsl	r2, r2, #3
   194a8:	bl	11108 <memset@plt>
   194ac:	ldr	r3, [sp, #48]	; 0x30
   194b0:	ldr	r7, [sp, #88]	; 0x58
   194b4:	ldr	r8, [sp, #92]	; 0x5c
   194b8:	ldr	r2, [sp, #44]	; 0x2c
   194bc:	str	r2, [r6, #4]
   194c0:	add	r2, r5, r4, lsl #3
   194c4:	mov	r1, r2
   194c8:	str	r2, [sp, #32]
   194cc:	ldr	r2, [sp, #52]	; 0x34
   194d0:	ldr	r6, [r1, #4]
   194d4:	ldr	sl, [r5, r4, lsl #3]
   194d8:	orr	r2, r2, #1
   194dc:	str	r3, [sp]
   194e0:	add	r3, sp, #56	; 0x38
   194e4:	str	r2, [sp, #36]	; 0x24
   194e8:	str	r2, [sp, #4]
   194ec:	str	r3, [sp, #8]
   194f0:	mov	r0, r6
   194f4:	str	r8, [sp, #16]
   194f8:	str	r7, [sp, #12]
   194fc:	mov	r1, sl
   19500:	mvn	r3, #0
   19504:	mov	r2, fp
   19508:	bl	163b0 <__assert_fail@plt+0x51ac>
   1950c:	cmp	sl, r0
   19510:	bhi	1957c <__assert_fail@plt+0x8378>
   19514:	ldr	r3, [pc, #176]	; 195cc <__assert_fail@plt+0x83c8>
   19518:	add	r7, r0, #1
   1951c:	cmp	r6, r3
   19520:	str	r7, [r5, r4, lsl #3]
   19524:	beq	19530 <__assert_fail@plt+0x832c>
   19528:	mov	r0, r6
   1952c:	bl	15e58 <__assert_fail@plt+0x4c54>
   19530:	mov	r0, r7
   19534:	bl	1ac8c <__assert_fail@plt+0x9a88>
   19538:	ldr	r3, [sp, #32]
   1953c:	ldr	lr, [sp, #92]	; 0x5c
   19540:	ldr	ip, [sp, #88]	; 0x58
   19544:	ldr	r4, [sp, #36]	; 0x24
   19548:	mov	r2, fp
   1954c:	mov	r1, r7
   19550:	str	r0, [r3, #4]
   19554:	add	r3, sp, #56	; 0x38
   19558:	str	r3, [sp, #8]
   1955c:	ldr	r3, [sp, #48]	; 0x30
   19560:	str	r4, [sp, #4]
   19564:	str	r3, [sp]
   19568:	str	lr, [sp, #16]
   1956c:	str	ip, [sp, #12]
   19570:	mvn	r3, #0
   19574:	mov	r6, r0
   19578:	bl	163b0 <__assert_fail@plt+0x51ac>
   1957c:	ldr	r3, [sp, #28]
   19580:	mov	r0, r6
   19584:	str	r3, [r9]
   19588:	add	sp, sp, #100	; 0x64
   1958c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19590:	mov	r3, #8
   19594:	sub	r2, r4, r2
   19598:	str	r3, [sp]
   1959c:	add	r1, sp, #44	; 0x2c
   195a0:	add	r2, r2, #1
   195a4:	mvn	r3, #-2147483648	; 0x80000000
   195a8:	bl	1aea8 <__assert_fail@plt+0x9ca4>
   195ac:	mov	r5, r0
   195b0:	ldm	r7, {r0, r1}
   195b4:	str	r5, [r6]
   195b8:	stm	r5, {r0, r1}
   195bc:	b	19490 <__assert_fail@plt+0x828c>
   195c0:	bl	111ec <abort@plt>
   195c4:	andeq	pc, r2, r4, asr #4
   195c8:	andeq	pc, r2, r8, lsr #2
   195cc:	andeq	pc, r2, r4, ror r2	; <UNPREDICTABLE>
   195d0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   195d4:	mov	r7, r1
   195d8:	ldr	lr, [pc, #492]	; 197cc <__assert_fail@plt+0x85c8>
   195dc:	mov	r8, r2
   195e0:	mov	r4, r0
   195e4:	mov	fp, r3
   195e8:	ldm	lr!, {r0, r1, r2, r3}
   195ec:	sub	sp, sp, #100	; 0x64
   195f0:	add	ip, sp, #48	; 0x30
   195f4:	mov	sl, #10
   195f8:	stmia	ip!, {r0, r1, r2, r3}
   195fc:	cmp	r8, #0
   19600:	cmpne	r7, #0
   19604:	ldm	lr!, {r0, r1, r2, r3}
   19608:	str	sl, [sp, #48]	; 0x30
   1960c:	stmia	ip!, {r0, r1, r2, r3}
   19610:	ldm	lr, {r0, r1, r2, r3}
   19614:	stm	ip, {r0, r1, r2, r3}
   19618:	beq	197c8 <__assert_fail@plt+0x85c4>
   1961c:	str	r7, [sp, #88]	; 0x58
   19620:	str	r8, [sp, #92]	; 0x5c
   19624:	bl	110d8 <__errno_location@plt>
   19628:	ldr	r6, [pc, #416]	; 197d0 <__assert_fail@plt+0x85cc>
   1962c:	cmn	r4, #-2147483647	; 0x80000001
   19630:	ldr	r5, [r6]
   19634:	mov	r9, r0
   19638:	movne	r0, #0
   1963c:	moveq	r0, #1
   19640:	ldr	r3, [r9]
   19644:	orrs	r0, r0, r4, lsr #31
   19648:	str	r3, [sp, #28]
   1964c:	bne	197c8 <__assert_fail@plt+0x85c4>
   19650:	ldr	r2, [r6, #4]
   19654:	cmp	r4, r2
   19658:	movlt	r3, sl
   1965c:	blt	196c8 <__assert_fail@plt+0x84c4>
   19660:	add	r7, r6, #8
   19664:	cmp	r5, r7
   19668:	str	r2, [sp, #44]	; 0x2c
   1966c:	beq	19798 <__assert_fail@plt+0x8594>
   19670:	mov	r3, #8
   19674:	sub	r2, r4, r2
   19678:	mov	r0, r5
   1967c:	str	r3, [sp]
   19680:	add	r2, r2, #1
   19684:	mvn	r3, #-2147483648	; 0x80000000
   19688:	add	r1, sp, #44	; 0x2c
   1968c:	bl	1aea8 <__assert_fail@plt+0x9ca4>
   19690:	mov	r5, r0
   19694:	str	r0, [r6]
   19698:	ldr	r0, [r6, #4]
   1969c:	ldr	r2, [sp, #44]	; 0x2c
   196a0:	mov	r1, #0
   196a4:	sub	r2, r2, r0
   196a8:	add	r0, r5, r0, lsl #3
   196ac:	lsl	r2, r2, #3
   196b0:	bl	11108 <memset@plt>
   196b4:	ldr	r3, [sp, #48]	; 0x30
   196b8:	ldr	r7, [sp, #88]	; 0x58
   196bc:	ldr	r8, [sp, #92]	; 0x5c
   196c0:	ldr	r2, [sp, #44]	; 0x2c
   196c4:	str	r2, [r6, #4]
   196c8:	add	r2, r5, r4, lsl #3
   196cc:	mov	r1, r2
   196d0:	str	r2, [sp, #32]
   196d4:	ldr	r2, [sp, #52]	; 0x34
   196d8:	ldr	r6, [r1, #4]
   196dc:	ldr	sl, [r5, r4, lsl #3]
   196e0:	orr	r2, r2, #1
   196e4:	str	r3, [sp]
   196e8:	add	r3, sp, #56	; 0x38
   196ec:	str	r2, [sp, #36]	; 0x24
   196f0:	str	r2, [sp, #4]
   196f4:	str	r3, [sp, #8]
   196f8:	mov	r0, r6
   196fc:	str	r8, [sp, #16]
   19700:	str	r7, [sp, #12]
   19704:	mov	r1, sl
   19708:	ldr	r3, [sp, #136]	; 0x88
   1970c:	mov	r2, fp
   19710:	bl	163b0 <__assert_fail@plt+0x51ac>
   19714:	cmp	sl, r0
   19718:	bhi	19784 <__assert_fail@plt+0x8580>
   1971c:	ldr	r3, [pc, #176]	; 197d4 <__assert_fail@plt+0x85d0>
   19720:	add	r7, r0, #1
   19724:	cmp	r6, r3
   19728:	str	r7, [r5, r4, lsl #3]
   1972c:	beq	19738 <__assert_fail@plt+0x8534>
   19730:	mov	r0, r6
   19734:	bl	15e58 <__assert_fail@plt+0x4c54>
   19738:	mov	r0, r7
   1973c:	bl	1ac8c <__assert_fail@plt+0x9a88>
   19740:	ldr	r3, [sp, #32]
   19744:	ldr	lr, [sp, #92]	; 0x5c
   19748:	ldr	ip, [sp, #88]	; 0x58
   1974c:	ldr	r4, [sp, #36]	; 0x24
   19750:	mov	r2, fp
   19754:	mov	r1, r7
   19758:	str	r0, [r3, #4]
   1975c:	add	r3, sp, #56	; 0x38
   19760:	str	r3, [sp, #8]
   19764:	ldr	r3, [sp, #48]	; 0x30
   19768:	str	r4, [sp, #4]
   1976c:	str	r3, [sp]
   19770:	str	lr, [sp, #16]
   19774:	str	ip, [sp, #12]
   19778:	ldr	r3, [sp, #136]	; 0x88
   1977c:	mov	r6, r0
   19780:	bl	163b0 <__assert_fail@plt+0x51ac>
   19784:	ldr	r3, [sp, #28]
   19788:	mov	r0, r6
   1978c:	str	r3, [r9]
   19790:	add	sp, sp, #100	; 0x64
   19794:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19798:	mov	r3, #8
   1979c:	sub	r2, r4, r2
   197a0:	str	r3, [sp]
   197a4:	add	r1, sp, #44	; 0x2c
   197a8:	add	r2, r2, #1
   197ac:	mvn	r3, #-2147483648	; 0x80000000
   197b0:	bl	1aea8 <__assert_fail@plt+0x9ca4>
   197b4:	mov	r5, r0
   197b8:	ldm	r7, {r0, r1}
   197bc:	str	r5, [r6]
   197c0:	stm	r5, {r0, r1}
   197c4:	b	19698 <__assert_fail@plt+0x8494>
   197c8:	bl	111ec <abort@plt>
   197cc:	andeq	pc, r2, r4, asr #4
   197d0:	andeq	pc, r2, r8, lsr #2
   197d4:	andeq	pc, r2, r4, ror r2	; <UNPREDICTABLE>
   197d8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   197dc:	mov	r5, r0
   197e0:	ldr	lr, [pc, #452]	; 199ac <__assert_fail@plt+0x87a8>
   197e4:	mov	r6, r1
   197e8:	mov	sl, r2
   197ec:	ldm	lr!, {r0, r1, r2, r3}
   197f0:	sub	sp, sp, #92	; 0x5c
   197f4:	add	ip, sp, #40	; 0x28
   197f8:	cmp	r6, #0
   197fc:	cmpne	r5, #0
   19800:	stmia	ip!, {r0, r1, r2, r3}
   19804:	mov	r9, #10
   19808:	ldm	lr!, {r0, r1, r2, r3}
   1980c:	moveq	fp, #1
   19810:	movne	fp, #0
   19814:	str	r9, [sp, #40]	; 0x28
   19818:	stmia	ip!, {r0, r1, r2, r3}
   1981c:	ldm	lr, {r0, r1, r2, r3}
   19820:	stm	ip, {r0, r1, r2, r3}
   19824:	beq	199a8 <__assert_fail@plt+0x87a4>
   19828:	str	r5, [sp, #80]	; 0x50
   1982c:	str	r6, [sp, #84]	; 0x54
   19830:	bl	110d8 <__errno_location@plt>
   19834:	ldr	r7, [pc, #372]	; 199b0 <__assert_fail@plt+0x87ac>
   19838:	ldr	r2, [r7, #4]
   1983c:	ldr	r4, [r7]
   19840:	cmp	r2, #0
   19844:	ldr	r3, [r0]
   19848:	mov	r8, r0
   1984c:	str	r3, [sp, #24]
   19850:	movgt	r3, r9
   19854:	bgt	198bc <__assert_fail@plt+0x86b8>
   19858:	add	r5, r7, #8
   1985c:	cmp	r4, r5
   19860:	str	r2, [sp, #36]	; 0x24
   19864:	beq	19978 <__assert_fail@plt+0x8774>
   19868:	mov	r3, #8
   1986c:	mov	r0, r4
   19870:	str	r3, [sp]
   19874:	rsb	r2, r2, #1
   19878:	mvn	r3, #-2147483648	; 0x80000000
   1987c:	add	r1, sp, #36	; 0x24
   19880:	bl	1aea8 <__assert_fail@plt+0x9ca4>
   19884:	mov	r4, r0
   19888:	str	r0, [r7]
   1988c:	ldr	r0, [r7, #4]
   19890:	ldr	r2, [sp, #36]	; 0x24
   19894:	mov	r1, #0
   19898:	sub	r2, r2, r0
   1989c:	add	r0, r4, r0, lsl #3
   198a0:	lsl	r2, r2, #3
   198a4:	bl	11108 <memset@plt>
   198a8:	ldr	r3, [sp, #40]	; 0x28
   198ac:	ldr	r5, [sp, #80]	; 0x50
   198b0:	ldr	r6, [sp, #84]	; 0x54
   198b4:	ldr	r2, [sp, #36]	; 0x24
   198b8:	str	r2, [r7, #4]
   198bc:	ldr	r2, [sp, #44]	; 0x2c
   198c0:	ldr	r9, [r4]
   198c4:	ldr	r7, [r4, #4]
   198c8:	orr	r2, r2, #1
   198cc:	add	fp, sp, #48	; 0x30
   198d0:	str	r2, [sp, #28]
   198d4:	str	r2, [sp, #4]
   198d8:	str	r3, [sp]
   198dc:	str	r6, [sp, #16]
   198e0:	str	r5, [sp, #12]
   198e4:	mov	r1, r9
   198e8:	mov	r0, r7
   198ec:	str	fp, [sp, #8]
   198f0:	mvn	r3, #0
   198f4:	mov	r2, sl
   198f8:	bl	163b0 <__assert_fail@plt+0x51ac>
   198fc:	cmp	r9, r0
   19900:	bhi	19964 <__assert_fail@plt+0x8760>
   19904:	ldr	r3, [pc, #168]	; 199b4 <__assert_fail@plt+0x87b0>
   19908:	add	r5, r0, #1
   1990c:	cmp	r7, r3
   19910:	str	r5, [r4]
   19914:	beq	19920 <__assert_fail@plt+0x871c>
   19918:	mov	r0, r7
   1991c:	bl	15e58 <__assert_fail@plt+0x4c54>
   19920:	mov	r0, r5
   19924:	bl	1ac8c <__assert_fail@plt+0x9a88>
   19928:	ldr	lr, [sp, #84]	; 0x54
   1992c:	ldr	r3, [sp, #40]	; 0x28
   19930:	ldr	ip, [sp, #80]	; 0x50
   19934:	mov	r2, sl
   19938:	mov	r1, r5
   1993c:	str	r0, [r4, #4]
   19940:	ldr	r4, [sp, #28]
   19944:	str	r3, [sp]
   19948:	str	fp, [sp, #8]
   1994c:	str	r4, [sp, #4]
   19950:	str	lr, [sp, #16]
   19954:	str	ip, [sp, #12]
   19958:	mvn	r3, #0
   1995c:	mov	r7, r0
   19960:	bl	163b0 <__assert_fail@plt+0x51ac>
   19964:	ldr	r3, [sp, #24]
   19968:	mov	r0, r7
   1996c:	str	r3, [r8]
   19970:	add	sp, sp, #92	; 0x5c
   19974:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19978:	mov	r3, #8
   1997c:	str	r3, [sp]
   19980:	add	r1, sp, #36	; 0x24
   19984:	rsb	r2, r2, #1
   19988:	mov	r0, fp
   1998c:	mvn	r3, #-2147483648	; 0x80000000
   19990:	bl	1aea8 <__assert_fail@plt+0x9ca4>
   19994:	mov	r4, r0
   19998:	ldm	r5, {r0, r1}
   1999c:	str	r4, [r7]
   199a0:	stm	r4, {r0, r1}
   199a4:	b	1988c <__assert_fail@plt+0x8688>
   199a8:	bl	111ec <abort@plt>
   199ac:	andeq	pc, r2, r4, asr #4
   199b0:	andeq	pc, r2, r8, lsr #2
   199b4:	andeq	pc, r2, r4, ror r2	; <UNPREDICTABLE>
   199b8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   199bc:	mov	r5, r0
   199c0:	ldr	lr, [pc, #464]	; 19b98 <__assert_fail@plt+0x8994>
   199c4:	mov	r6, r1
   199c8:	mov	sl, r2
   199cc:	mov	fp, r3
   199d0:	ldm	lr!, {r0, r1, r2, r3}
   199d4:	sub	sp, sp, #92	; 0x5c
   199d8:	add	ip, sp, #40	; 0x28
   199dc:	cmp	r6, #0
   199e0:	cmpne	r5, #0
   199e4:	stmia	ip!, {r0, r1, r2, r3}
   199e8:	moveq	r4, #1
   199ec:	ldm	lr!, {r0, r1, r2, r3}
   199f0:	movne	r4, #0
   199f4:	mov	r9, #10
   199f8:	str	r4, [sp, #28]
   199fc:	stmia	ip!, {r0, r1, r2, r3}
   19a00:	ldm	lr, {r0, r1, r2, r3}
   19a04:	str	r9, [sp, #40]	; 0x28
   19a08:	stm	ip, {r0, r1, r2, r3}
   19a0c:	beq	19b94 <__assert_fail@plt+0x8990>
   19a10:	str	r5, [sp, #80]	; 0x50
   19a14:	str	r6, [sp, #84]	; 0x54
   19a18:	bl	110d8 <__errno_location@plt>
   19a1c:	ldr	r7, [pc, #376]	; 19b9c <__assert_fail@plt+0x8998>
   19a20:	ldr	r2, [r7, #4]
   19a24:	ldr	r4, [r7]
   19a28:	cmp	r2, #0
   19a2c:	ldr	r3, [r0]
   19a30:	mov	r8, r0
   19a34:	str	r3, [sp, #24]
   19a38:	movgt	r3, r9
   19a3c:	bgt	19aa4 <__assert_fail@plt+0x88a0>
   19a40:	add	r5, r7, #8
   19a44:	cmp	r4, r5
   19a48:	str	r2, [sp, #36]	; 0x24
   19a4c:	beq	19b64 <__assert_fail@plt+0x8960>
   19a50:	mov	r3, #8
   19a54:	mov	r0, r4
   19a58:	str	r3, [sp]
   19a5c:	rsb	r2, r2, #1
   19a60:	mvn	r3, #-2147483648	; 0x80000000
   19a64:	add	r1, sp, #36	; 0x24
   19a68:	bl	1aea8 <__assert_fail@plt+0x9ca4>
   19a6c:	mov	r4, r0
   19a70:	str	r0, [r7]
   19a74:	ldr	r0, [r7, #4]
   19a78:	ldr	r2, [sp, #36]	; 0x24
   19a7c:	mov	r1, #0
   19a80:	sub	r2, r2, r0
   19a84:	add	r0, r4, r0, lsl #3
   19a88:	lsl	r2, r2, #3
   19a8c:	bl	11108 <memset@plt>
   19a90:	ldr	r3, [sp, #40]	; 0x28
   19a94:	ldr	r5, [sp, #80]	; 0x50
   19a98:	ldr	r6, [sp, #84]	; 0x54
   19a9c:	ldr	r2, [sp, #36]	; 0x24
   19aa0:	str	r2, [r7, #4]
   19aa4:	ldr	r2, [sp, #44]	; 0x2c
   19aa8:	ldr	r9, [r4]
   19aac:	ldr	r7, [r4, #4]
   19ab0:	orr	r2, r2, #1
   19ab4:	str	r3, [sp]
   19ab8:	add	r3, sp, #48	; 0x30
   19abc:	str	r2, [sp, #28]
   19ac0:	str	r2, [sp, #4]
   19ac4:	str	r3, [sp, #8]
   19ac8:	str	r6, [sp, #16]
   19acc:	str	r5, [sp, #12]
   19ad0:	mov	r1, r9
   19ad4:	mov	r0, r7
   19ad8:	mov	r3, fp
   19adc:	mov	r2, sl
   19ae0:	bl	163b0 <__assert_fail@plt+0x51ac>
   19ae4:	cmp	r9, r0
   19ae8:	bhi	19b50 <__assert_fail@plt+0x894c>
   19aec:	ldr	r3, [pc, #172]	; 19ba0 <__assert_fail@plt+0x899c>
   19af0:	add	r5, r0, #1
   19af4:	cmp	r7, r3
   19af8:	str	r5, [r4]
   19afc:	beq	19b08 <__assert_fail@plt+0x8904>
   19b00:	mov	r0, r7
   19b04:	bl	15e58 <__assert_fail@plt+0x4c54>
   19b08:	mov	r0, r5
   19b0c:	bl	1ac8c <__assert_fail@plt+0x9a88>
   19b10:	add	lr, sp, #48	; 0x30
   19b14:	ldr	ip, [sp, #84]	; 0x54
   19b18:	mov	r1, r5
   19b1c:	ldr	r5, [sp, #28]
   19b20:	mov	r3, fp
   19b24:	mov	r2, sl
   19b28:	str	r0, [r4, #4]
   19b2c:	ldr	r4, [sp, #80]	; 0x50
   19b30:	str	lr, [sp, #8]
   19b34:	ldr	lr, [sp, #40]	; 0x28
   19b38:	str	r5, [sp, #4]
   19b3c:	str	ip, [sp, #16]
   19b40:	str	r4, [sp, #12]
   19b44:	str	lr, [sp]
   19b48:	mov	r7, r0
   19b4c:	bl	163b0 <__assert_fail@plt+0x51ac>
   19b50:	ldr	r3, [sp, #24]
   19b54:	mov	r0, r7
   19b58:	str	r3, [r8]
   19b5c:	add	sp, sp, #92	; 0x5c
   19b60:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19b64:	mov	r3, #8
   19b68:	str	r3, [sp]
   19b6c:	add	r1, sp, #36	; 0x24
   19b70:	rsb	r2, r2, #1
   19b74:	ldr	r0, [sp, #28]
   19b78:	mvn	r3, #-2147483648	; 0x80000000
   19b7c:	bl	1aea8 <__assert_fail@plt+0x9ca4>
   19b80:	mov	r4, r0
   19b84:	ldm	r5, {r0, r1}
   19b88:	str	r4, [r7]
   19b8c:	stm	r4, {r0, r1}
   19b90:	b	19a74 <__assert_fail@plt+0x8870>
   19b94:	bl	111ec <abort@plt>
   19b98:	andeq	pc, r2, r4, asr #4
   19b9c:	andeq	pc, r2, r8, lsr #2
   19ba0:	andeq	pc, r2, r4, ror r2	; <UNPREDICTABLE>
   19ba4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19ba8:	sub	sp, sp, #52	; 0x34
   19bac:	mov	r5, r0
   19bb0:	mov	sl, r1
   19bb4:	mov	fp, r2
   19bb8:	bl	110d8 <__errno_location@plt>
   19bbc:	ldr	r4, [pc, #404]	; 19d58 <__assert_fail@plt+0x8b54>
   19bc0:	cmn	r5, #-2147483647	; 0x80000001
   19bc4:	ldr	r6, [r4]
   19bc8:	mov	r8, r0
   19bcc:	movne	r0, #0
   19bd0:	moveq	r0, #1
   19bd4:	ldr	r3, [r8]
   19bd8:	orrs	r0, r0, r5, lsr #31
   19bdc:	str	r3, [sp, #28]
   19be0:	bne	19d54 <__assert_fail@plt+0x8b50>
   19be4:	ldr	r2, [r4, #4]
   19be8:	cmp	r5, r2
   19bec:	blt	19c4c <__assert_fail@plt+0x8a48>
   19bf0:	add	r7, r4, #8
   19bf4:	cmp	r6, r7
   19bf8:	str	r2, [sp, #44]	; 0x2c
   19bfc:	beq	19d24 <__assert_fail@plt+0x8b20>
   19c00:	mov	r3, #8
   19c04:	sub	r2, r5, r2
   19c08:	mov	r0, r6
   19c0c:	str	r3, [sp]
   19c10:	add	r2, r2, #1
   19c14:	mvn	r3, #-2147483648	; 0x80000000
   19c18:	add	r1, sp, #44	; 0x2c
   19c1c:	bl	1aea8 <__assert_fail@plt+0x9ca4>
   19c20:	mov	r6, r0
   19c24:	str	r0, [r4]
   19c28:	ldr	r0, [r4, #4]
   19c2c:	ldr	r2, [sp, #44]	; 0x2c
   19c30:	mov	r1, #0
   19c34:	sub	r2, r2, r0
   19c38:	add	r0, r6, r0, lsl #3
   19c3c:	lsl	r2, r2, #3
   19c40:	bl	11108 <memset@plt>
   19c44:	ldr	r3, [sp, #44]	; 0x2c
   19c48:	str	r3, [r4, #4]
   19c4c:	ldr	r2, [r4, #56]	; 0x38
   19c50:	add	r3, r6, r5, lsl #3
   19c54:	ldr	r1, [r4, #20]
   19c58:	ldr	r7, [r3, #4]
   19c5c:	ldr	r9, [r6, r5, lsl #3]
   19c60:	ldr	ip, [r4, #60]	; 0x3c
   19c64:	str	r3, [sp, #32]
   19c68:	ldr	r3, [r4, #16]
   19c6c:	str	r2, [sp, #12]
   19c70:	ldr	r2, [pc, #228]	; 19d5c <__assert_fail@plt+0x8b58>
   19c74:	orr	r1, r1, #1
   19c78:	str	r1, [sp, #36]	; 0x24
   19c7c:	str	r1, [sp, #4]
   19c80:	str	r2, [sp, #8]
   19c84:	str	r3, [sp]
   19c88:	mov	r0, r7
   19c8c:	mov	r1, r9
   19c90:	str	ip, [sp, #16]
   19c94:	mov	r3, fp
   19c98:	mov	r2, sl
   19c9c:	bl	163b0 <__assert_fail@plt+0x51ac>
   19ca0:	cmp	r9, r0
   19ca4:	bhi	19d10 <__assert_fail@plt+0x8b0c>
   19ca8:	ldr	r3, [pc, #176]	; 19d60 <__assert_fail@plt+0x8b5c>
   19cac:	add	r9, r0, #1
   19cb0:	cmp	r7, r3
   19cb4:	str	r9, [r6, r5, lsl #3]
   19cb8:	beq	19cc4 <__assert_fail@plt+0x8ac0>
   19cbc:	mov	r0, r7
   19cc0:	bl	15e58 <__assert_fail@plt+0x4c54>
   19cc4:	mov	r0, r9
   19cc8:	bl	1ac8c <__assert_fail@plt+0x9a88>
   19ccc:	ldr	ip, [sp, #32]
   19cd0:	ldr	lr, [r4, #60]	; 0x3c
   19cd4:	ldr	r5, [r4, #56]	; 0x38
   19cd8:	mov	r3, fp
   19cdc:	mov	r2, sl
   19ce0:	mov	r1, r9
   19ce4:	str	r0, [ip, #4]
   19ce8:	ldr	ip, [r4, #16]
   19cec:	ldr	r4, [pc, #104]	; 19d5c <__assert_fail@plt+0x8b58>
   19cf0:	str	lr, [sp, #16]
   19cf4:	str	r4, [sp, #8]
   19cf8:	ldr	r4, [sp, #36]	; 0x24
   19cfc:	str	r5, [sp, #12]
   19d00:	str	r4, [sp, #4]
   19d04:	str	ip, [sp]
   19d08:	mov	r7, r0
   19d0c:	bl	163b0 <__assert_fail@plt+0x51ac>
   19d10:	ldr	r3, [sp, #28]
   19d14:	mov	r0, r7
   19d18:	str	r3, [r8]
   19d1c:	add	sp, sp, #52	; 0x34
   19d20:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19d24:	mov	r3, #8
   19d28:	sub	r2, r5, r2
   19d2c:	str	r3, [sp]
   19d30:	add	r1, sp, #44	; 0x2c
   19d34:	add	r2, r2, #1
   19d38:	mvn	r3, #-2147483648	; 0x80000000
   19d3c:	bl	1aea8 <__assert_fail@plt+0x9ca4>
   19d40:	mov	r6, r0
   19d44:	ldm	r7, {r0, r1}
   19d48:	str	r6, [r4]
   19d4c:	stm	r6, {r0, r1}
   19d50:	b	19c28 <__assert_fail@plt+0x8a24>
   19d54:	bl	111ec <abort@plt>
   19d58:	andeq	pc, r2, r8, lsr #2
   19d5c:	andeq	pc, r2, r0, asr #2
   19d60:	andeq	pc, r2, r4, ror r2	; <UNPREDICTABLE>
   19d64:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19d68:	sub	sp, sp, #44	; 0x2c
   19d6c:	mov	r9, r0
   19d70:	mov	sl, r1
   19d74:	bl	110d8 <__errno_location@plt>
   19d78:	ldr	r4, [pc, #360]	; 19ee8 <__assert_fail@plt+0x8ce4>
   19d7c:	ldr	r2, [r4, #4]
   19d80:	ldr	r5, [r4]
   19d84:	cmp	r2, #0
   19d88:	ldr	r3, [r0]
   19d8c:	mov	r7, r0
   19d90:	str	r3, [sp, #24]
   19d94:	bgt	19df0 <__assert_fail@plt+0x8bec>
   19d98:	add	r6, r4, #8
   19d9c:	cmp	r5, r6
   19da0:	str	r2, [sp, #36]	; 0x24
   19da4:	beq	19eb8 <__assert_fail@plt+0x8cb4>
   19da8:	mov	r3, #8
   19dac:	mov	r0, r5
   19db0:	str	r3, [sp]
   19db4:	rsb	r2, r2, #1
   19db8:	mvn	r3, #-2147483648	; 0x80000000
   19dbc:	add	r1, sp, #36	; 0x24
   19dc0:	bl	1aea8 <__assert_fail@plt+0x9ca4>
   19dc4:	mov	r5, r0
   19dc8:	str	r0, [r4]
   19dcc:	ldr	r0, [r4, #4]
   19dd0:	ldr	r2, [sp, #36]	; 0x24
   19dd4:	mov	r1, #0
   19dd8:	sub	r2, r2, r0
   19ddc:	add	r0, r5, r0, lsl #3
   19de0:	lsl	r2, r2, #3
   19de4:	bl	11108 <memset@plt>
   19de8:	ldr	r3, [sp, #36]	; 0x24
   19dec:	str	r3, [r4, #4]
   19df0:	ldr	r1, [r4, #20]
   19df4:	ldr	r8, [r5]
   19df8:	ldr	r6, [r5, #4]
   19dfc:	ldr	r2, [r4, #56]	; 0x38
   19e00:	ldr	r3, [r4, #16]
   19e04:	ldr	ip, [r4, #60]	; 0x3c
   19e08:	ldr	fp, [pc, #220]	; 19eec <__assert_fail@plt+0x8ce8>
   19e0c:	orr	r1, r1, #1
   19e10:	str	r1, [sp, #28]
   19e14:	str	r1, [sp, #4]
   19e18:	str	r2, [sp, #12]
   19e1c:	str	r3, [sp]
   19e20:	mov	r1, r8
   19e24:	mov	r0, r6
   19e28:	str	ip, [sp, #16]
   19e2c:	str	fp, [sp, #8]
   19e30:	mov	r3, sl
   19e34:	mov	r2, r9
   19e38:	bl	163b0 <__assert_fail@plt+0x51ac>
   19e3c:	cmp	r8, r0
   19e40:	bhi	19ea4 <__assert_fail@plt+0x8ca0>
   19e44:	ldr	r3, [pc, #164]	; 19ef0 <__assert_fail@plt+0x8cec>
   19e48:	add	r8, r0, #1
   19e4c:	cmp	r6, r3
   19e50:	str	r8, [r5]
   19e54:	beq	19e60 <__assert_fail@plt+0x8c5c>
   19e58:	mov	r0, r6
   19e5c:	bl	15e58 <__assert_fail@plt+0x4c54>
   19e60:	mov	r0, r8
   19e64:	bl	1ac8c <__assert_fail@plt+0x9a88>
   19e68:	ldr	lr, [r4, #60]	; 0x3c
   19e6c:	ldr	ip, [r4, #16]
   19e70:	mov	r3, sl
   19e74:	mov	r2, r9
   19e78:	mov	r1, r8
   19e7c:	str	r0, [r5, #4]
   19e80:	ldr	r5, [r4, #56]	; 0x38
   19e84:	ldr	r4, [sp, #28]
   19e88:	str	fp, [sp, #8]
   19e8c:	str	r4, [sp, #4]
   19e90:	str	lr, [sp, #16]
   19e94:	str	r5, [sp, #12]
   19e98:	str	ip, [sp]
   19e9c:	mov	r6, r0
   19ea0:	bl	163b0 <__assert_fail@plt+0x51ac>
   19ea4:	ldr	r3, [sp, #24]
   19ea8:	mov	r0, r6
   19eac:	str	r3, [r7]
   19eb0:	add	sp, sp, #44	; 0x2c
   19eb4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19eb8:	mov	r3, #8
   19ebc:	str	r3, [sp]
   19ec0:	add	r1, sp, #36	; 0x24
   19ec4:	rsb	r2, r2, #1
   19ec8:	mvn	r3, #-2147483648	; 0x80000000
   19ecc:	mov	r0, #0
   19ed0:	bl	1aea8 <__assert_fail@plt+0x9ca4>
   19ed4:	mov	r5, r0
   19ed8:	ldm	r6, {r0, r1}
   19edc:	str	r5, [r4]
   19ee0:	stm	r5, {r0, r1}
   19ee4:	b	19dcc <__assert_fail@plt+0x8bc8>
   19ee8:	andeq	pc, r2, r8, lsr #2
   19eec:	andeq	pc, r2, r0, asr #2
   19ef0:	andeq	pc, r2, r4, ror r2	; <UNPREDICTABLE>
   19ef4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19ef8:	sub	sp, sp, #44	; 0x2c
   19efc:	mov	r5, r0
   19f00:	mov	sl, r1
   19f04:	bl	110d8 <__errno_location@plt>
   19f08:	ldr	r4, [pc, #396]	; 1a09c <__assert_fail@plt+0x8e98>
   19f0c:	cmn	r5, #-2147483647	; 0x80000001
   19f10:	ldr	r6, [r4]
   19f14:	mov	r8, r0
   19f18:	movne	r0, #0
   19f1c:	moveq	r0, #1
   19f20:	ldr	r3, [r8]
   19f24:	orrs	r0, r0, r5, lsr #31
   19f28:	str	r3, [sp, #24]
   19f2c:	bne	1a098 <__assert_fail@plt+0x8e94>
   19f30:	ldr	r2, [r4, #4]
   19f34:	cmp	r5, r2
   19f38:	blt	19f98 <__assert_fail@plt+0x8d94>
   19f3c:	add	r7, r4, #8
   19f40:	cmp	r6, r7
   19f44:	str	r2, [sp, #36]	; 0x24
   19f48:	beq	1a068 <__assert_fail@plt+0x8e64>
   19f4c:	mov	r3, #8
   19f50:	sub	r2, r5, r2
   19f54:	mov	r0, r6
   19f58:	str	r3, [sp]
   19f5c:	add	r2, r2, #1
   19f60:	mvn	r3, #-2147483648	; 0x80000000
   19f64:	add	r1, sp, #36	; 0x24
   19f68:	bl	1aea8 <__assert_fail@plt+0x9ca4>
   19f6c:	mov	r6, r0
   19f70:	str	r0, [r4]
   19f74:	ldr	r0, [r4, #4]
   19f78:	ldr	r2, [sp, #36]	; 0x24
   19f7c:	mov	r1, #0
   19f80:	sub	r2, r2, r0
   19f84:	add	r0, r6, r0, lsl #3
   19f88:	lsl	r2, r2, #3
   19f8c:	bl	11108 <memset@plt>
   19f90:	ldr	r3, [sp, #36]	; 0x24
   19f94:	str	r3, [r4, #4]
   19f98:	ldr	r2, [r4, #56]	; 0x38
   19f9c:	add	fp, r6, r5, lsl #3
   19fa0:	ldr	r1, [r4, #20]
   19fa4:	ldr	r9, [r6, r5, lsl #3]
   19fa8:	ldr	r7, [fp, #4]
   19fac:	ldr	r3, [r4, #16]
   19fb0:	ldr	ip, [r4, #60]	; 0x3c
   19fb4:	str	r2, [sp, #12]
   19fb8:	ldr	r2, [pc, #224]	; 1a0a0 <__assert_fail@plt+0x8e9c>
   19fbc:	orr	r1, r1, #1
   19fc0:	str	r1, [sp, #28]
   19fc4:	str	r1, [sp, #4]
   19fc8:	str	r2, [sp, #8]
   19fcc:	str	r3, [sp]
   19fd0:	mov	r0, r7
   19fd4:	mov	r1, r9
   19fd8:	str	ip, [sp, #16]
   19fdc:	mvn	r3, #0
   19fe0:	mov	r2, sl
   19fe4:	bl	163b0 <__assert_fail@plt+0x51ac>
   19fe8:	cmp	r9, r0
   19fec:	bhi	1a054 <__assert_fail@plt+0x8e50>
   19ff0:	ldr	r3, [pc, #172]	; 1a0a4 <__assert_fail@plt+0x8ea0>
   19ff4:	add	r9, r0, #1
   19ff8:	cmp	r7, r3
   19ffc:	str	r9, [r6, r5, lsl #3]
   1a000:	beq	1a00c <__assert_fail@plt+0x8e08>
   1a004:	mov	r0, r7
   1a008:	bl	15e58 <__assert_fail@plt+0x4c54>
   1a00c:	mov	r0, r9
   1a010:	bl	1ac8c <__assert_fail@plt+0x9a88>
   1a014:	ldr	ip, [r4, #60]	; 0x3c
   1a018:	ldr	r3, [r4, #16]
   1a01c:	ldr	lr, [r4, #56]	; 0x38
   1a020:	ldr	r4, [pc, #120]	; 1a0a0 <__assert_fail@plt+0x8e9c>
   1a024:	mov	r2, sl
   1a028:	mov	r1, r9
   1a02c:	str	r0, [fp, #4]
   1a030:	str	r4, [sp, #8]
   1a034:	ldr	r4, [sp, #28]
   1a038:	str	r3, [sp]
   1a03c:	str	r4, [sp, #4]
   1a040:	str	ip, [sp, #16]
   1a044:	str	lr, [sp, #12]
   1a048:	mvn	r3, #0
   1a04c:	mov	r7, r0
   1a050:	bl	163b0 <__assert_fail@plt+0x51ac>
   1a054:	ldr	r3, [sp, #24]
   1a058:	mov	r0, r7
   1a05c:	str	r3, [r8]
   1a060:	add	sp, sp, #44	; 0x2c
   1a064:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a068:	mov	r3, #8
   1a06c:	sub	r2, r5, r2
   1a070:	str	r3, [sp]
   1a074:	add	r1, sp, #36	; 0x24
   1a078:	add	r2, r2, #1
   1a07c:	mvn	r3, #-2147483648	; 0x80000000
   1a080:	bl	1aea8 <__assert_fail@plt+0x9ca4>
   1a084:	mov	r6, r0
   1a088:	ldm	r7, {r0, r1}
   1a08c:	str	r6, [r4]
   1a090:	stm	r6, {r0, r1}
   1a094:	b	19f74 <__assert_fail@plt+0x8d70>
   1a098:	bl	111ec <abort@plt>
   1a09c:	andeq	pc, r2, r8, lsr #2
   1a0a0:	andeq	pc, r2, r0, asr #2
   1a0a4:	andeq	pc, r2, r4, ror r2	; <UNPREDICTABLE>
   1a0a8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a0ac:	sub	sp, sp, #44	; 0x2c
   1a0b0:	mov	sl, r0
   1a0b4:	bl	110d8 <__errno_location@plt>
   1a0b8:	ldr	r4, [pc, #348]	; 1a21c <__assert_fail@plt+0x9018>
   1a0bc:	ldr	r2, [r4, #4]
   1a0c0:	ldr	r5, [r4]
   1a0c4:	cmp	r2, #0
   1a0c8:	ldr	r3, [r0]
   1a0cc:	mov	r8, r0
   1a0d0:	str	r3, [sp, #28]
   1a0d4:	bgt	1a130 <__assert_fail@plt+0x8f2c>
   1a0d8:	add	r6, r4, #8
   1a0dc:	cmp	r5, r6
   1a0e0:	str	r2, [sp, #36]	; 0x24
   1a0e4:	beq	1a1ec <__assert_fail@plt+0x8fe8>
   1a0e8:	mov	r3, #8
   1a0ec:	mov	r0, r5
   1a0f0:	str	r3, [sp]
   1a0f4:	rsb	r2, r2, #1
   1a0f8:	mvn	r3, #-2147483648	; 0x80000000
   1a0fc:	add	r1, sp, #36	; 0x24
   1a100:	bl	1aea8 <__assert_fail@plt+0x9ca4>
   1a104:	mov	r5, r0
   1a108:	str	r0, [r4]
   1a10c:	ldr	r0, [r4, #4]
   1a110:	ldr	r2, [sp, #36]	; 0x24
   1a114:	mov	r1, #0
   1a118:	sub	r2, r2, r0
   1a11c:	add	r0, r5, r0, lsl #3
   1a120:	lsl	r2, r2, #3
   1a124:	bl	11108 <memset@plt>
   1a128:	ldr	r3, [sp, #36]	; 0x24
   1a12c:	str	r3, [r4, #4]
   1a130:	ldr	r7, [r4, #20]
   1a134:	ldr	r9, [r5]
   1a138:	ldr	r6, [r5, #4]
   1a13c:	ldr	r2, [r4, #56]	; 0x38
   1a140:	ldr	r3, [r4, #16]
   1a144:	ldr	ip, [r4, #60]	; 0x3c
   1a148:	ldr	fp, [pc, #208]	; 1a220 <__assert_fail@plt+0x901c>
   1a14c:	orr	r7, r7, #1
   1a150:	str	r2, [sp, #12]
   1a154:	str	r3, [sp]
   1a158:	str	r7, [sp, #4]
   1a15c:	mov	r1, r9
   1a160:	mov	r0, r6
   1a164:	str	ip, [sp, #16]
   1a168:	str	fp, [sp, #8]
   1a16c:	mvn	r3, #0
   1a170:	mov	r2, sl
   1a174:	bl	163b0 <__assert_fail@plt+0x51ac>
   1a178:	cmp	r9, r0
   1a17c:	bhi	1a1d8 <__assert_fail@plt+0x8fd4>
   1a180:	ldr	r3, [pc, #156]	; 1a224 <__assert_fail@plt+0x9020>
   1a184:	add	r9, r0, #1
   1a188:	cmp	r6, r3
   1a18c:	str	r9, [r5]
   1a190:	beq	1a19c <__assert_fail@plt+0x8f98>
   1a194:	mov	r0, r6
   1a198:	bl	15e58 <__assert_fail@plt+0x4c54>
   1a19c:	mov	r0, r9
   1a1a0:	bl	1ac8c <__assert_fail@plt+0x9a88>
   1a1a4:	ldr	ip, [r4, #60]	; 0x3c
   1a1a8:	ldr	r3, [r4, #16]
   1a1ac:	ldr	lr, [r4, #56]	; 0x38
   1a1b0:	mov	r2, sl
   1a1b4:	mov	r1, r9
   1a1b8:	str	r0, [r5, #4]
   1a1bc:	str	r3, [sp]
   1a1c0:	stmib	sp, {r7, fp}
   1a1c4:	str	ip, [sp, #16]
   1a1c8:	str	lr, [sp, #12]
   1a1cc:	mvn	r3, #0
   1a1d0:	mov	r6, r0
   1a1d4:	bl	163b0 <__assert_fail@plt+0x51ac>
   1a1d8:	ldr	r3, [sp, #28]
   1a1dc:	mov	r0, r6
   1a1e0:	str	r3, [r8]
   1a1e4:	add	sp, sp, #44	; 0x2c
   1a1e8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a1ec:	mov	r3, #8
   1a1f0:	str	r3, [sp]
   1a1f4:	add	r1, sp, #36	; 0x24
   1a1f8:	rsb	r2, r2, #1
   1a1fc:	mvn	r3, #-2147483648	; 0x80000000
   1a200:	mov	r0, #0
   1a204:	bl	1aea8 <__assert_fail@plt+0x9ca4>
   1a208:	mov	r5, r0
   1a20c:	ldm	r6, {r0, r1}
   1a210:	str	r5, [r4]
   1a214:	stm	r5, {r0, r1}
   1a218:	b	1a10c <__assert_fail@plt+0x8f08>
   1a21c:	andeq	pc, r2, r8, lsr #2
   1a220:	andeq	pc, r2, r0, asr #2
   1a224:	andeq	pc, r2, r4, ror r2	; <UNPREDICTABLE>
   1a228:	push	{r4, r5, r6, lr}
   1a22c:	sub	sp, sp, #32
   1a230:	cmp	r1, #0
   1a234:	mov	r4, r0
   1a238:	ldr	r5, [sp, #48]	; 0x30
   1a23c:	ldr	r6, [sp, #52]	; 0x34
   1a240:	beq	1a558 <__assert_fail@plt+0x9354>
   1a244:	stm	sp, {r2, r3}
   1a248:	mov	r3, r1
   1a24c:	ldr	r2, [pc, #808]	; 1a57c <__assert_fail@plt+0x9378>
   1a250:	mov	r1, #1
   1a254:	bl	11144 <__fprintf_chk@plt>
   1a258:	mov	r2, #5
   1a25c:	ldr	r1, [pc, #796]	; 1a580 <__assert_fail@plt+0x937c>
   1a260:	mov	r0, #0
   1a264:	bl	10fc4 <dcgettext@plt>
   1a268:	ldr	r3, [pc, #788]	; 1a584 <__assert_fail@plt+0x9380>
   1a26c:	ldr	r2, [pc, #788]	; 1a588 <__assert_fail@plt+0x9384>
   1a270:	str	r3, [sp]
   1a274:	mov	r1, #1
   1a278:	mov	r3, r0
   1a27c:	mov	r0, r4
   1a280:	bl	11144 <__fprintf_chk@plt>
   1a284:	mov	r1, r4
   1a288:	mov	r0, #10
   1a28c:	bl	10fb8 <fputc_unlocked@plt>
   1a290:	mov	r2, #5
   1a294:	ldr	r1, [pc, #752]	; 1a58c <__assert_fail@plt+0x9388>
   1a298:	mov	r0, #0
   1a29c:	bl	10fc4 <dcgettext@plt>
   1a2a0:	mov	r1, #1
   1a2a4:	ldr	r3, [pc, #740]	; 1a590 <__assert_fail@plt+0x938c>
   1a2a8:	mov	r2, r0
   1a2ac:	mov	r0, r4
   1a2b0:	bl	11144 <__fprintf_chk@plt>
   1a2b4:	mov	r1, r4
   1a2b8:	mov	r0, #10
   1a2bc:	bl	10fb8 <fputc_unlocked@plt>
   1a2c0:	cmp	r6, #9
   1a2c4:	ldrls	pc, [pc, r6, lsl #2]
   1a2c8:	b	1a570 <__assert_fail@plt+0x936c>
   1a2cc:	andeq	sl, r1, r0, asr r3
   1a2d0:	andeq	sl, r1, r8, asr r3
   1a2d4:	andeq	sl, r1, r4, lsl #7
   1a2d8:			; <UNDEFINED> instruction: 0x0001a3b8
   1a2dc:	strdeq	sl, [r1], -r4
   1a2e0:	andeq	sl, r1, r0, lsr r4
   1a2e4:	andeq	sl, r1, ip, ror #8
   1a2e8:			; <UNDEFINED> instruction: 0x0001a4b0
   1a2ec:	andeq	sl, r1, r0, lsl #10
   1a2f0:	strdeq	sl, [r1], -r4
   1a2f4:	ldr	r1, [pc, #664]	; 1a594 <__assert_fail@plt+0x9390>
   1a2f8:	mov	r2, #5
   1a2fc:	mov	r0, #0
   1a300:	bl	10fc4 <dcgettext@plt>
   1a304:	ldr	ip, [r5, #32]
   1a308:	ldr	r1, [r5, #28]
   1a30c:	ldr	r2, [r5, #24]
   1a310:	ldr	r3, [r5]
   1a314:	ldr	r6, [r5, #20]
   1a318:	str	ip, [sp, #28]
   1a31c:	ldr	lr, [r5, #16]
   1a320:	str	r1, [sp, #24]
   1a324:	ldr	ip, [r5, #12]
   1a328:	str	r2, [sp, #20]
   1a32c:	ldr	r1, [r5, #8]
   1a330:	ldr	r2, [r5, #4]
   1a334:	str	r6, [sp, #16]
   1a338:	stmib	sp, {r1, ip, lr}
   1a33c:	mov	r1, #1
   1a340:	str	r2, [sp]
   1a344:	mov	r2, r0
   1a348:	mov	r0, r4
   1a34c:	bl	11144 <__fprintf_chk@plt>
   1a350:	add	sp, sp, #32
   1a354:	pop	{r4, r5, r6, pc}
   1a358:	mov	r2, #5
   1a35c:	ldr	r1, [pc, #564]	; 1a598 <__assert_fail@plt+0x9394>
   1a360:	mov	r0, #0
   1a364:	bl	10fc4 <dcgettext@plt>
   1a368:	ldr	r3, [r5]
   1a36c:	mov	r1, #1
   1a370:	mov	r2, r0
   1a374:	mov	r0, r4
   1a378:	add	sp, sp, #32
   1a37c:	pop	{r4, r5, r6, lr}
   1a380:	b	11144 <__fprintf_chk@plt>
   1a384:	mov	r2, #5
   1a388:	ldr	r1, [pc, #524]	; 1a59c <__assert_fail@plt+0x9398>
   1a38c:	mov	r0, #0
   1a390:	bl	10fc4 <dcgettext@plt>
   1a394:	ldr	r2, [r5, #4]
   1a398:	ldr	r3, [r5]
   1a39c:	mov	r1, #1
   1a3a0:	str	r2, [sp, #48]	; 0x30
   1a3a4:	mov	r2, r0
   1a3a8:	mov	r0, r4
   1a3ac:	add	sp, sp, #32
   1a3b0:	pop	{r4, r5, r6, lr}
   1a3b4:	b	11144 <__fprintf_chk@plt>
   1a3b8:	mov	r2, #5
   1a3bc:	ldr	r1, [pc, #476]	; 1a5a0 <__assert_fail@plt+0x939c>
   1a3c0:	mov	r0, #0
   1a3c4:	bl	10fc4 <dcgettext@plt>
   1a3c8:	ldr	r1, [r5, #8]
   1a3cc:	ldr	r2, [r5, #4]
   1a3d0:	ldr	r3, [r5]
   1a3d4:	str	r1, [sp, #52]	; 0x34
   1a3d8:	str	r2, [sp, #48]	; 0x30
   1a3dc:	mov	r1, #1
   1a3e0:	mov	r2, r0
   1a3e4:	mov	r0, r4
   1a3e8:	add	sp, sp, #32
   1a3ec:	pop	{r4, r5, r6, lr}
   1a3f0:	b	11144 <__fprintf_chk@plt>
   1a3f4:	mov	r2, #5
   1a3f8:	ldr	r1, [pc, #420]	; 1a5a4 <__assert_fail@plt+0x93a0>
   1a3fc:	mov	r0, #0
   1a400:	bl	10fc4 <dcgettext@plt>
   1a404:	ldr	r1, [r5, #8]
   1a408:	ldr	ip, [r5, #12]
   1a40c:	ldr	r2, [r5, #4]
   1a410:	ldr	r3, [r5]
   1a414:	stmib	sp, {r1, ip}
   1a418:	str	r2, [sp]
   1a41c:	mov	r1, #1
   1a420:	mov	r2, r0
   1a424:	mov	r0, r4
   1a428:	bl	11144 <__fprintf_chk@plt>
   1a42c:	b	1a350 <__assert_fail@plt+0x914c>
   1a430:	mov	r2, #5
   1a434:	ldr	r1, [pc, #364]	; 1a5a8 <__assert_fail@plt+0x93a4>
   1a438:	mov	r0, #0
   1a43c:	bl	10fc4 <dcgettext@plt>
   1a440:	add	r1, r5, #8
   1a444:	ldr	r2, [r5, #4]
   1a448:	ldm	r1, {r1, ip, lr}
   1a44c:	ldr	r3, [r5]
   1a450:	str	r2, [sp]
   1a454:	stmib	sp, {r1, ip, lr}
   1a458:	mov	r1, #1
   1a45c:	mov	r2, r0
   1a460:	mov	r0, r4
   1a464:	bl	11144 <__fprintf_chk@plt>
   1a468:	b	1a350 <__assert_fail@plt+0x914c>
   1a46c:	mov	r2, #5
   1a470:	ldr	r1, [pc, #308]	; 1a5ac <__assert_fail@plt+0x93a8>
   1a474:	mov	r0, #0
   1a478:	bl	10fc4 <dcgettext@plt>
   1a47c:	add	r1, r5, #8
   1a480:	ldr	r2, [r5, #4]
   1a484:	ldm	r1, {r1, ip, lr}
   1a488:	ldr	r6, [r5, #20]
   1a48c:	ldr	r3, [r5]
   1a490:	stmib	sp, {r1, ip, lr}
   1a494:	mov	r1, #1
   1a498:	str	r2, [sp]
   1a49c:	str	r6, [sp, #16]
   1a4a0:	mov	r2, r0
   1a4a4:	mov	r0, r4
   1a4a8:	bl	11144 <__fprintf_chk@plt>
   1a4ac:	b	1a350 <__assert_fail@plt+0x914c>
   1a4b0:	mov	r2, #5
   1a4b4:	ldr	r1, [pc, #244]	; 1a5b0 <__assert_fail@plt+0x93ac>
   1a4b8:	mov	r0, #0
   1a4bc:	bl	10fc4 <dcgettext@plt>
   1a4c0:	ldr	r2, [r5, #24]
   1a4c4:	ldr	r3, [r5]
   1a4c8:	ldr	r6, [r5, #20]
   1a4cc:	ldr	lr, [r5, #16]
   1a4d0:	ldr	ip, [r5, #12]
   1a4d4:	str	r2, [sp, #20]
   1a4d8:	ldr	r1, [r5, #8]
   1a4dc:	ldr	r2, [r5, #4]
   1a4e0:	str	r6, [sp, #16]
   1a4e4:	stmib	sp, {r1, ip, lr}
   1a4e8:	mov	r1, #1
   1a4ec:	str	r2, [sp]
   1a4f0:	mov	r2, r0
   1a4f4:	mov	r0, r4
   1a4f8:	bl	11144 <__fprintf_chk@plt>
   1a4fc:	b	1a350 <__assert_fail@plt+0x914c>
   1a500:	mov	r2, #5
   1a504:	ldr	r1, [pc, #168]	; 1a5b4 <__assert_fail@plt+0x93b0>
   1a508:	mov	r0, #0
   1a50c:	bl	10fc4 <dcgettext@plt>
   1a510:	ldr	r1, [r5, #28]
   1a514:	ldr	r2, [r5, #24]
   1a518:	ldr	r3, [r5]
   1a51c:	ldr	r6, [r5, #20]
   1a520:	ldr	lr, [r5, #16]
   1a524:	str	r1, [sp, #24]
   1a528:	ldr	ip, [r5, #12]
   1a52c:	str	r2, [sp, #20]
   1a530:	ldr	r1, [r5, #8]
   1a534:	ldr	r2, [r5, #4]
   1a538:	str	r6, [sp, #16]
   1a53c:	stmib	sp, {r1, ip, lr}
   1a540:	mov	r1, #1
   1a544:	str	r2, [sp]
   1a548:	mov	r2, r0
   1a54c:	mov	r0, r4
   1a550:	bl	11144 <__fprintf_chk@plt>
   1a554:	b	1a350 <__assert_fail@plt+0x914c>
   1a558:	str	r3, [sp]
   1a55c:	mov	r1, #1
   1a560:	mov	r3, r2
   1a564:	ldr	r2, [pc, #76]	; 1a5b8 <__assert_fail@plt+0x93b4>
   1a568:	bl	11144 <__fprintf_chk@plt>
   1a56c:	b	1a258 <__assert_fail@plt+0x9054>
   1a570:	mov	r2, #5
   1a574:	ldr	r1, [pc, #64]	; 1a5bc <__assert_fail@plt+0x93b8>
   1a578:	b	1a2fc <__assert_fail@plt+0x90f8>
   1a57c:	andeq	lr, r1, r4, lsl #10
   1a580:	andeq	lr, r1, r8, lsl r5
   1a584:	andeq	r0, r0, r6, ror #15
   1a588:	strdeq	lr, [r1], -r0
   1a58c:	andeq	lr, r1, ip, lsl r5
   1a590:	andeq	lr, r1, r8, asr #11
   1a594:	strdeq	lr, [r1], -r8
   1a598:	andeq	lr, r1, ip, ror #11
   1a59c:	strdeq	lr, [r1], -ip
   1a5a0:	andeq	lr, r1, r4, lsl r6
   1a5a4:	andeq	lr, r1, r0, lsr r6
   1a5a8:	andeq	lr, r1, r0, asr r6
   1a5ac:	andeq	lr, r1, r4, ror r6
   1a5b0:	muleq	r1, ip, r6
   1a5b4:	andeq	lr, r1, r8, asr #13
   1a5b8:	andeq	lr, r1, r0, lsl r5
   1a5bc:	andeq	lr, r1, ip, lsr #14
   1a5c0:	push	{r4, r5, lr}
   1a5c4:	sub	sp, sp, #12
   1a5c8:	ldr	r5, [sp, #24]
   1a5cc:	ldr	ip, [r5]
   1a5d0:	cmp	ip, #0
   1a5d4:	beq	1a5f0 <__assert_fail@plt+0x93ec>
   1a5d8:	mov	lr, r5
   1a5dc:	mov	ip, #0
   1a5e0:	ldr	r4, [lr, #4]!
   1a5e4:	add	ip, ip, #1
   1a5e8:	cmp	r4, #0
   1a5ec:	bne	1a5e0 <__assert_fail@plt+0x93dc>
   1a5f0:	stm	sp, {r5, ip}
   1a5f4:	bl	1a228 <__assert_fail@plt+0x9024>
   1a5f8:	add	sp, sp, #12
   1a5fc:	pop	{r4, r5, pc}
   1a600:	push	{r4, r5, lr}
   1a604:	sub	sp, sp, #76	; 0x4c
   1a608:	mov	r5, r0
   1a60c:	ldr	ip, [sp, #88]	; 0x58
   1a610:	ldr	r0, [ip]
   1a614:	cmp	r0, #0
   1a618:	str	r0, [sp, #32]
   1a61c:	beq	1a9f0 <__assert_fail@plt+0x97ec>
   1a620:	ldr	r0, [ip, #4]
   1a624:	cmp	r0, #0
   1a628:	str	r0, [sp, #36]	; 0x24
   1a62c:	beq	1a9f8 <__assert_fail@plt+0x97f4>
   1a630:	ldr	r0, [ip, #8]
   1a634:	cmp	r0, #0
   1a638:	str	r0, [sp, #40]	; 0x28
   1a63c:	beq	1aa00 <__assert_fail@plt+0x97fc>
   1a640:	ldr	r0, [ip, #12]
   1a644:	cmp	r0, #0
   1a648:	str	r0, [sp, #44]	; 0x2c
   1a64c:	beq	1aa08 <__assert_fail@plt+0x9804>
   1a650:	ldr	r0, [ip, #16]
   1a654:	cmp	r0, #0
   1a658:	str	r0, [sp, #48]	; 0x30
   1a65c:	beq	1aa10 <__assert_fail@plt+0x980c>
   1a660:	ldr	r0, [ip, #20]
   1a664:	cmp	r0, #0
   1a668:	str	r0, [sp, #52]	; 0x34
   1a66c:	beq	1aa18 <__assert_fail@plt+0x9814>
   1a670:	ldr	r0, [ip, #24]
   1a674:	cmp	r0, #0
   1a678:	str	r0, [sp, #56]	; 0x38
   1a67c:	beq	1aa20 <__assert_fail@plt+0x981c>
   1a680:	ldr	r0, [ip, #28]
   1a684:	cmp	r0, #0
   1a688:	str	r0, [sp, #60]	; 0x3c
   1a68c:	beq	1aa28 <__assert_fail@plt+0x9824>
   1a690:	ldr	r0, [ip, #32]
   1a694:	cmp	r0, #0
   1a698:	str	r0, [sp, #64]	; 0x40
   1a69c:	beq	1aa30 <__assert_fail@plt+0x982c>
   1a6a0:	ldr	r0, [ip, #36]	; 0x24
   1a6a4:	cmp	r0, #0
   1a6a8:	movne	r4, #10
   1a6ac:	moveq	r4, #9
   1a6b0:	cmp	r1, #0
   1a6b4:	beq	1a9c8 <__assert_fail@plt+0x97c4>
   1a6b8:	stm	sp, {r2, r3}
   1a6bc:	mov	r0, r5
   1a6c0:	mov	r3, r1
   1a6c4:	ldr	r2, [pc, #876]	; 1aa38 <__assert_fail@plt+0x9834>
   1a6c8:	mov	r1, #1
   1a6cc:	bl	11144 <__fprintf_chk@plt>
   1a6d0:	mov	r2, #5
   1a6d4:	ldr	r1, [pc, #864]	; 1aa3c <__assert_fail@plt+0x9838>
   1a6d8:	mov	r0, #0
   1a6dc:	bl	10fc4 <dcgettext@plt>
   1a6e0:	ldr	r3, [pc, #856]	; 1aa40 <__assert_fail@plt+0x983c>
   1a6e4:	ldr	r2, [pc, #856]	; 1aa44 <__assert_fail@plt+0x9840>
   1a6e8:	str	r3, [sp]
   1a6ec:	mov	r1, #1
   1a6f0:	mov	r3, r0
   1a6f4:	mov	r0, r5
   1a6f8:	bl	11144 <__fprintf_chk@plt>
   1a6fc:	mov	r1, r5
   1a700:	mov	r0, #10
   1a704:	bl	10fb8 <fputc_unlocked@plt>
   1a708:	mov	r2, #5
   1a70c:	ldr	r1, [pc, #820]	; 1aa48 <__assert_fail@plt+0x9844>
   1a710:	mov	r0, #0
   1a714:	bl	10fc4 <dcgettext@plt>
   1a718:	mov	r1, #1
   1a71c:	ldr	r3, [pc, #808]	; 1aa4c <__assert_fail@plt+0x9848>
   1a720:	mov	r2, r0
   1a724:	mov	r0, r5
   1a728:	bl	11144 <__fprintf_chk@plt>
   1a72c:	mov	r1, r5
   1a730:	mov	r0, #10
   1a734:	bl	10fb8 <fputc_unlocked@plt>
   1a738:	cmp	r4, #9
   1a73c:	ldrls	pc, [pc, r4, lsl #2]
   1a740:	b	1a9e4 <__assert_fail@plt+0x97e0>
   1a744:	andeq	sl, r1, r8, asr #15
   1a748:	ldrdeq	sl, [r1], -r0
   1a74c:	strdeq	sl, [r1], -ip
   1a750:	andeq	sl, r1, r0, lsr r8
   1a754:	andeq	sl, r1, r8, ror #16
   1a758:	andeq	sl, r1, r4, lsr #17
   1a75c:	andeq	sl, r1, r0, ror #17
   1a760:	andeq	sl, r1, r4, lsr #18
   1a764:	andeq	sl, r1, r0, ror r9
   1a768:	andeq	sl, r1, ip, ror #14
   1a76c:	ldr	r1, [pc, #732]	; 1aa50 <__assert_fail@plt+0x984c>
   1a770:	mov	r2, #5
   1a774:	mov	r0, #0
   1a778:	bl	10fc4 <dcgettext@plt>
   1a77c:	ldr	ip, [sp, #64]	; 0x40
   1a780:	ldr	r1, [sp, #60]	; 0x3c
   1a784:	ldr	r2, [sp, #56]	; 0x38
   1a788:	ldr	lr, [sp, #48]	; 0x30
   1a78c:	str	ip, [sp, #28]
   1a790:	str	r1, [sp, #24]
   1a794:	ldr	ip, [sp, #44]	; 0x2c
   1a798:	ldr	r1, [sp, #40]	; 0x28
   1a79c:	ldr	r4, [sp, #52]	; 0x34
   1a7a0:	str	r2, [sp, #20]
   1a7a4:	ldr	r2, [sp, #36]	; 0x24
   1a7a8:	stmib	sp, {r1, ip, lr}
   1a7ac:	mov	r1, #1
   1a7b0:	str	r2, [sp]
   1a7b4:	ldr	r3, [sp, #32]
   1a7b8:	str	r4, [sp, #16]
   1a7bc:	mov	r2, r0
   1a7c0:	mov	r0, r5
   1a7c4:	bl	11144 <__fprintf_chk@plt>
   1a7c8:	add	sp, sp, #76	; 0x4c
   1a7cc:	pop	{r4, r5, pc}
   1a7d0:	mov	r2, #5
   1a7d4:	ldr	r1, [pc, #632]	; 1aa54 <__assert_fail@plt+0x9850>
   1a7d8:	mov	r0, #0
   1a7dc:	bl	10fc4 <dcgettext@plt>
   1a7e0:	ldr	r3, [sp, #32]
   1a7e4:	mov	r1, #1
   1a7e8:	mov	r2, r0
   1a7ec:	mov	r0, r5
   1a7f0:	add	sp, sp, #76	; 0x4c
   1a7f4:	pop	{r4, r5, lr}
   1a7f8:	b	11144 <__fprintf_chk@plt>
   1a7fc:	mov	r2, #5
   1a800:	ldr	r1, [pc, #592]	; 1aa58 <__assert_fail@plt+0x9854>
   1a804:	mov	r0, #0
   1a808:	bl	10fc4 <dcgettext@plt>
   1a80c:	ldr	r2, [sp, #36]	; 0x24
   1a810:	ldr	r3, [sp, #32]
   1a814:	str	r2, [sp, #88]	; 0x58
   1a818:	mov	r1, #1
   1a81c:	mov	r2, r0
   1a820:	mov	r0, r5
   1a824:	add	sp, sp, #76	; 0x4c
   1a828:	pop	{r4, r5, lr}
   1a82c:	b	11144 <__fprintf_chk@plt>
   1a830:	mov	r2, #5
   1a834:	ldr	r1, [pc, #544]	; 1aa5c <__assert_fail@plt+0x9858>
   1a838:	mov	r0, #0
   1a83c:	bl	10fc4 <dcgettext@plt>
   1a840:	ldr	r1, [sp, #40]	; 0x28
   1a844:	ldr	r2, [sp, #36]	; 0x24
   1a848:	str	r1, [sp, #4]
   1a84c:	str	r2, [sp]
   1a850:	ldr	r3, [sp, #32]
   1a854:	mov	r1, #1
   1a858:	mov	r2, r0
   1a85c:	mov	r0, r5
   1a860:	bl	11144 <__fprintf_chk@plt>
   1a864:	b	1a7c8 <__assert_fail@plt+0x95c4>
   1a868:	mov	r2, #5
   1a86c:	ldr	r1, [pc, #492]	; 1aa60 <__assert_fail@plt+0x985c>
   1a870:	mov	r0, #0
   1a874:	bl	10fc4 <dcgettext@plt>
   1a878:	ldr	r1, [sp, #40]	; 0x28
   1a87c:	ldr	ip, [sp, #44]	; 0x2c
   1a880:	ldr	r2, [sp, #36]	; 0x24
   1a884:	ldr	r3, [sp, #32]
   1a888:	stmib	sp, {r1, ip}
   1a88c:	str	r2, [sp]
   1a890:	mov	r1, #1
   1a894:	mov	r2, r0
   1a898:	mov	r0, r5
   1a89c:	bl	11144 <__fprintf_chk@plt>
   1a8a0:	b	1a7c8 <__assert_fail@plt+0x95c4>
   1a8a4:	mov	r2, #5
   1a8a8:	ldr	r1, [pc, #436]	; 1aa64 <__assert_fail@plt+0x9860>
   1a8ac:	mov	r0, #0
   1a8b0:	bl	10fc4 <dcgettext@plt>
   1a8b4:	add	r1, sp, #40	; 0x28
   1a8b8:	ldr	r2, [sp, #36]	; 0x24
   1a8bc:	ldm	r1, {r1, ip, lr}
   1a8c0:	ldr	r3, [sp, #32]
   1a8c4:	str	r2, [sp]
   1a8c8:	stmib	sp, {r1, ip, lr}
   1a8cc:	mov	r1, #1
   1a8d0:	mov	r2, r0
   1a8d4:	mov	r0, r5
   1a8d8:	bl	11144 <__fprintf_chk@plt>
   1a8dc:	b	1a7c8 <__assert_fail@plt+0x95c4>
   1a8e0:	mov	r2, #5
   1a8e4:	ldr	r1, [pc, #380]	; 1aa68 <__assert_fail@plt+0x9864>
   1a8e8:	mov	r0, #0
   1a8ec:	bl	10fc4 <dcgettext@plt>
   1a8f0:	add	r1, sp, #40	; 0x28
   1a8f4:	ldr	r2, [sp, #36]	; 0x24
   1a8f8:	ldm	r1, {r1, ip, lr}
   1a8fc:	ldr	r4, [sp, #52]	; 0x34
   1a900:	str	r2, [sp]
   1a904:	stmib	sp, {r1, ip, lr}
   1a908:	mov	r1, #1
   1a90c:	ldr	r3, [sp, #32]
   1a910:	str	r4, [sp, #16]
   1a914:	mov	r2, r0
   1a918:	mov	r0, r5
   1a91c:	bl	11144 <__fprintf_chk@plt>
   1a920:	b	1a7c8 <__assert_fail@plt+0x95c4>
   1a924:	mov	r2, #5
   1a928:	ldr	r1, [pc, #316]	; 1aa6c <__assert_fail@plt+0x9868>
   1a92c:	mov	r0, #0
   1a930:	bl	10fc4 <dcgettext@plt>
   1a934:	add	r1, sp, #40	; 0x28
   1a938:	ldr	r2, [sp, #56]	; 0x38
   1a93c:	ldm	r1, {r1, ip, lr}
   1a940:	ldr	r4, [sp, #52]	; 0x34
   1a944:	str	r2, [sp, #20]
   1a948:	ldr	r2, [sp, #36]	; 0x24
   1a94c:	stmib	sp, {r1, ip, lr}
   1a950:	mov	r1, #1
   1a954:	str	r2, [sp]
   1a958:	ldr	r3, [sp, #32]
   1a95c:	str	r4, [sp, #16]
   1a960:	mov	r2, r0
   1a964:	mov	r0, r5
   1a968:	bl	11144 <__fprintf_chk@plt>
   1a96c:	b	1a7c8 <__assert_fail@plt+0x95c4>
   1a970:	mov	r2, #5
   1a974:	ldr	r1, [pc, #244]	; 1aa70 <__assert_fail@plt+0x986c>
   1a978:	mov	r0, #0
   1a97c:	bl	10fc4 <dcgettext@plt>
   1a980:	ldr	r1, [sp, #60]	; 0x3c
   1a984:	ldr	r2, [sp, #56]	; 0x38
   1a988:	ldr	lr, [sp, #48]	; 0x30
   1a98c:	ldr	ip, [sp, #44]	; 0x2c
   1a990:	str	r1, [sp, #24]
   1a994:	ldr	r1, [sp, #40]	; 0x28
   1a998:	ldr	r4, [sp, #52]	; 0x34
   1a99c:	str	r2, [sp, #20]
   1a9a0:	ldr	r2, [sp, #36]	; 0x24
   1a9a4:	stmib	sp, {r1, ip, lr}
   1a9a8:	mov	r1, #1
   1a9ac:	str	r2, [sp]
   1a9b0:	ldr	r3, [sp, #32]
   1a9b4:	str	r4, [sp, #16]
   1a9b8:	mov	r2, r0
   1a9bc:	mov	r0, r5
   1a9c0:	bl	11144 <__fprintf_chk@plt>
   1a9c4:	b	1a7c8 <__assert_fail@plt+0x95c4>
   1a9c8:	str	r3, [sp]
   1a9cc:	mov	r1, #1
   1a9d0:	mov	r3, r2
   1a9d4:	mov	r0, r5
   1a9d8:	ldr	r2, [pc, #148]	; 1aa74 <__assert_fail@plt+0x9870>
   1a9dc:	bl	11144 <__fprintf_chk@plt>
   1a9e0:	b	1a6d0 <__assert_fail@plt+0x94cc>
   1a9e4:	mov	r2, #5
   1a9e8:	ldr	r1, [pc, #136]	; 1aa78 <__assert_fail@plt+0x9874>
   1a9ec:	b	1a774 <__assert_fail@plt+0x9570>
   1a9f0:	mov	r4, r0
   1a9f4:	b	1a6b0 <__assert_fail@plt+0x94ac>
   1a9f8:	mov	r4, #1
   1a9fc:	b	1a6b0 <__assert_fail@plt+0x94ac>
   1aa00:	mov	r4, #2
   1aa04:	b	1a6b0 <__assert_fail@plt+0x94ac>
   1aa08:	mov	r4, #3
   1aa0c:	b	1a6b0 <__assert_fail@plt+0x94ac>
   1aa10:	mov	r4, #4
   1aa14:	b	1a6b0 <__assert_fail@plt+0x94ac>
   1aa18:	mov	r4, #5
   1aa1c:	b	1a6b0 <__assert_fail@plt+0x94ac>
   1aa20:	mov	r4, #6
   1aa24:	b	1a6b0 <__assert_fail@plt+0x94ac>
   1aa28:	mov	r4, #7
   1aa2c:	b	1a6b0 <__assert_fail@plt+0x94ac>
   1aa30:	mov	r4, #8
   1aa34:	b	1a6b0 <__assert_fail@plt+0x94ac>
   1aa38:	andeq	lr, r1, r4, lsl #10
   1aa3c:	andeq	lr, r1, r8, lsl r5
   1aa40:	andeq	r0, r0, r6, ror #15
   1aa44:	strdeq	lr, [r1], -r0
   1aa48:	andeq	lr, r1, ip, lsl r5
   1aa4c:	andeq	lr, r1, r8, asr #11
   1aa50:	strdeq	lr, [r1], -r8
   1aa54:	andeq	lr, r1, ip, ror #11
   1aa58:	strdeq	lr, [r1], -ip
   1aa5c:	andeq	lr, r1, r4, lsl r6
   1aa60:	andeq	lr, r1, r0, lsr r6
   1aa64:	andeq	lr, r1, r0, asr r6
   1aa68:	andeq	lr, r1, r4, ror r6
   1aa6c:	muleq	r1, ip, r6
   1aa70:	andeq	lr, r1, r8, asr #13
   1aa74:	andeq	lr, r1, r0, lsl r5
   1aa78:	andeq	lr, r1, ip, lsr #14
   1aa7c:	push	{r3}		; (str r3, [sp, #-4]!)
   1aa80:	push	{lr}		; (str lr, [sp, #-4]!)
   1aa84:	sub	sp, sp, #56	; 0x38
   1aa88:	add	r3, sp, #64	; 0x40
   1aa8c:	ldr	ip, [sp, #64]	; 0x40
   1aa90:	str	r3, [sp, #12]
   1aa94:	cmp	ip, #0
   1aa98:	str	ip, [sp, #16]
   1aa9c:	beq	1ab34 <__assert_fail@plt+0x9930>
   1aaa0:	ldr	ip, [sp, #68]	; 0x44
   1aaa4:	cmp	ip, #0
   1aaa8:	str	ip, [sp, #20]
   1aaac:	beq	1ab54 <__assert_fail@plt+0x9950>
   1aab0:	ldr	ip, [sp, #72]	; 0x48
   1aab4:	cmp	ip, #0
   1aab8:	str	ip, [sp, #24]
   1aabc:	beq	1ab5c <__assert_fail@plt+0x9958>
   1aac0:	ldr	ip, [sp, #76]	; 0x4c
   1aac4:	cmp	ip, #0
   1aac8:	str	ip, [sp, #28]
   1aacc:	beq	1ab64 <__assert_fail@plt+0x9960>
   1aad0:	ldr	ip, [sp, #80]	; 0x50
   1aad4:	cmp	ip, #0
   1aad8:	str	ip, [sp, #32]
   1aadc:	beq	1ab6c <__assert_fail@plt+0x9968>
   1aae0:	ldr	ip, [sp, #84]	; 0x54
   1aae4:	cmp	ip, #0
   1aae8:	str	ip, [sp, #36]	; 0x24
   1aaec:	beq	1ab74 <__assert_fail@plt+0x9970>
   1aaf0:	ldr	ip, [sp, #88]	; 0x58
   1aaf4:	cmp	ip, #0
   1aaf8:	str	ip, [sp, #40]	; 0x28
   1aafc:	beq	1ab7c <__assert_fail@plt+0x9978>
   1ab00:	ldr	ip, [sp, #92]	; 0x5c
   1ab04:	cmp	ip, #0
   1ab08:	str	ip, [sp, #44]	; 0x2c
   1ab0c:	beq	1ab84 <__assert_fail@plt+0x9980>
   1ab10:	ldr	ip, [sp, #96]	; 0x60
   1ab14:	cmp	ip, #0
   1ab18:	str	ip, [sp, #48]	; 0x30
   1ab1c:	beq	1ab8c <__assert_fail@plt+0x9988>
   1ab20:	ldr	ip, [sp, #100]	; 0x64
   1ab24:	cmp	ip, #0
   1ab28:	str	ip, [sp, #52]	; 0x34
   1ab2c:	movne	ip, #10
   1ab30:	moveq	ip, #9
   1ab34:	add	r3, sp, #16
   1ab38:	stm	sp, {r3, ip}
   1ab3c:	ldr	r3, [sp, #60]	; 0x3c
   1ab40:	bl	1a228 <__assert_fail@plt+0x9024>
   1ab44:	add	sp, sp, #56	; 0x38
   1ab48:	pop	{lr}		; (ldr lr, [sp], #4)
   1ab4c:	add	sp, sp, #4
   1ab50:	bx	lr
   1ab54:	mov	ip, #1
   1ab58:	b	1ab34 <__assert_fail@plt+0x9930>
   1ab5c:	mov	ip, #2
   1ab60:	b	1ab34 <__assert_fail@plt+0x9930>
   1ab64:	mov	ip, #3
   1ab68:	b	1ab34 <__assert_fail@plt+0x9930>
   1ab6c:	mov	ip, #4
   1ab70:	b	1ab34 <__assert_fail@plt+0x9930>
   1ab74:	mov	ip, #5
   1ab78:	b	1ab34 <__assert_fail@plt+0x9930>
   1ab7c:	mov	ip, #6
   1ab80:	b	1ab34 <__assert_fail@plt+0x9930>
   1ab84:	mov	ip, #7
   1ab88:	b	1ab34 <__assert_fail@plt+0x9930>
   1ab8c:	mov	ip, #8
   1ab90:	b	1ab34 <__assert_fail@plt+0x9930>
   1ab94:	ldr	r3, [pc, #116]	; 1ac10 <__assert_fail@plt+0x9a0c>
   1ab98:	push	{r4, lr}
   1ab9c:	mov	r0, #10
   1aba0:	ldr	r1, [r3]
   1aba4:	bl	10fb8 <fputc_unlocked@plt>
   1aba8:	mov	r2, #5
   1abac:	ldr	r1, [pc, #96]	; 1ac14 <__assert_fail@plt+0x9a10>
   1abb0:	mov	r0, #0
   1abb4:	bl	10fc4 <dcgettext@plt>
   1abb8:	ldr	r2, [pc, #88]	; 1ac18 <__assert_fail@plt+0x9a14>
   1abbc:	mov	r1, r0
   1abc0:	mov	r0, #1
   1abc4:	bl	11120 <__printf_chk@plt>
   1abc8:	mov	r2, #5
   1abcc:	ldr	r1, [pc, #72]	; 1ac1c <__assert_fail@plt+0x9a18>
   1abd0:	mov	r0, #0
   1abd4:	bl	10fc4 <dcgettext@plt>
   1abd8:	ldr	r3, [pc, #64]	; 1ac20 <__assert_fail@plt+0x9a1c>
   1abdc:	ldr	r2, [pc, #64]	; 1ac24 <__assert_fail@plt+0x9a20>
   1abe0:	mov	r1, r0
   1abe4:	mov	r0, #1
   1abe8:	bl	11120 <__printf_chk@plt>
   1abec:	mov	r2, #5
   1abf0:	ldr	r1, [pc, #48]	; 1ac28 <__assert_fail@plt+0x9a24>
   1abf4:	mov	r0, #0
   1abf8:	bl	10fc4 <dcgettext@plt>
   1abfc:	ldr	r2, [pc, #40]	; 1ac2c <__assert_fail@plt+0x9a28>
   1ac00:	pop	{r4, lr}
   1ac04:	mov	r1, r0
   1ac08:	mov	r0, #1
   1ac0c:	b	11120 <__printf_chk@plt>
   1ac10:	andeq	pc, r2, r4, lsl #3
   1ac14:	andeq	lr, r1, r8, ror #14
   1ac18:	andeq	lr, r1, ip, ror r7
   1ac1c:	muleq	r1, r4, r7
   1ac20:	strdeq	sp, [r1], -ip
   1ac24:	andeq	lr, r1, r4, lsr #32
   1ac28:	andeq	lr, r1, r8, lsr #15
   1ac2c:	ldrdeq	lr, [r1], -r0
   1ac30:	push	{r4, r5, r6, lr}
   1ac34:	mov	r6, r0
   1ac38:	mov	r5, r1
   1ac3c:	mov	r4, r2
   1ac40:	bl	1c558 <__assert_fail@plt+0xb354>
   1ac44:	cmp	r0, #0
   1ac48:	popne	{r4, r5, r6, pc}
   1ac4c:	cmp	r6, #0
   1ac50:	beq	1ac60 <__assert_fail@plt+0x9a5c>
   1ac54:	cmp	r5, #0
   1ac58:	cmpne	r4, #0
   1ac5c:	popeq	{r4, r5, r6, pc}
   1ac60:	bl	1b2ac <__assert_fail@plt+0xa0a8>
   1ac64:	push	{r4, lr}
   1ac68:	bl	1c3cc <__assert_fail@plt+0xb1c8>
   1ac6c:	cmp	r0, #0
   1ac70:	popne	{r4, pc}
   1ac74:	bl	1b2ac <__assert_fail@plt+0xa0a8>
   1ac78:	push	{r4, lr}
   1ac7c:	bl	1c3cc <__assert_fail@plt+0xb1c8>
   1ac80:	cmp	r0, #0
   1ac84:	popne	{r4, pc}
   1ac88:	bl	1b2ac <__assert_fail@plt+0xa0a8>
   1ac8c:	push	{r4, lr}
   1ac90:	bl	1c3cc <__assert_fail@plt+0xb1c8>
   1ac94:	cmp	r0, #0
   1ac98:	popne	{r4, pc}
   1ac9c:	bl	1b2ac <__assert_fail@plt+0xa0a8>
   1aca0:	push	{r4, r5, r6, lr}
   1aca4:	mov	r5, r0
   1aca8:	mov	r4, r1
   1acac:	bl	1c3f8 <__assert_fail@plt+0xb1f4>
   1acb0:	cmp	r0, #0
   1acb4:	popne	{r4, r5, r6, pc}
   1acb8:	adds	r4, r4, #0
   1acbc:	movne	r4, #1
   1acc0:	cmp	r5, #0
   1acc4:	orreq	r4, r4, #1
   1acc8:	cmp	r4, #0
   1accc:	popeq	{r4, r5, r6, pc}
   1acd0:	bl	1b2ac <__assert_fail@plt+0xa0a8>
   1acd4:	push	{r4, lr}
   1acd8:	cmp	r1, #0
   1acdc:	orreq	r1, r1, #1
   1ace0:	bl	1c3f8 <__assert_fail@plt+0xb1f4>
   1ace4:	cmp	r0, #0
   1ace8:	popne	{r4, pc}
   1acec:	bl	1b2ac <__assert_fail@plt+0xa0a8>
   1acf0:	push	{r4, r5, r6, lr}
   1acf4:	mov	r6, r0
   1acf8:	mov	r5, r1
   1acfc:	mov	r4, r2
   1ad00:	bl	1c558 <__assert_fail@plt+0xb354>
   1ad04:	cmp	r0, #0
   1ad08:	popne	{r4, r5, r6, pc}
   1ad0c:	cmp	r6, #0
   1ad10:	beq	1ad20 <__assert_fail@plt+0x9b1c>
   1ad14:	cmp	r5, #0
   1ad18:	cmpne	r4, #0
   1ad1c:	popeq	{r4, r5, r6, pc}
   1ad20:	bl	1b2ac <__assert_fail@plt+0xa0a8>
   1ad24:	cmp	r2, #0
   1ad28:	cmpne	r1, #0
   1ad2c:	moveq	r2, #1
   1ad30:	moveq	r1, r2
   1ad34:	push	{r4, lr}
   1ad38:	bl	1c558 <__assert_fail@plt+0xb354>
   1ad3c:	cmp	r0, #0
   1ad40:	popne	{r4, pc}
   1ad44:	bl	1b2ac <__assert_fail@plt+0xa0a8>
   1ad48:	push	{r4, lr}
   1ad4c:	mov	r2, r1
   1ad50:	mov	r1, r0
   1ad54:	mov	r0, #0
   1ad58:	bl	1c558 <__assert_fail@plt+0xb354>
   1ad5c:	cmp	r0, #0
   1ad60:	popne	{r4, pc}
   1ad64:	bl	1b2ac <__assert_fail@plt+0xa0a8>
   1ad68:	cmp	r1, #0
   1ad6c:	cmpne	r0, #0
   1ad70:	moveq	r2, #1
   1ad74:	movne	r2, r1
   1ad78:	moveq	r1, r2
   1ad7c:	movne	r1, r0
   1ad80:	push	{r4, lr}
   1ad84:	mov	r0, #0
   1ad88:	bl	1c558 <__assert_fail@plt+0xb354>
   1ad8c:	cmp	r0, #0
   1ad90:	popne	{r4, pc}
   1ad94:	bl	1b2ac <__assert_fail@plt+0xa0a8>
   1ad98:	cmp	r0, #0
   1ad9c:	push	{r4, r5, r6, lr}
   1ada0:	mov	r5, r1
   1ada4:	ldr	r4, [r1]
   1ada8:	beq	1ade4 <__assert_fail@plt+0x9be0>
   1adac:	lsr	r2, r4, #1
   1adb0:	add	r3, r2, #1
   1adb4:	mvn	r3, r3
   1adb8:	cmp	r4, r3
   1adbc:	bhi	1ae00 <__assert_fail@plt+0x9bfc>
   1adc0:	add	r4, r4, #1
   1adc4:	add	r4, r4, r2
   1adc8:	mov	r1, r4
   1adcc:	mov	r2, #1
   1add0:	bl	1c558 <__assert_fail@plt+0xb354>
   1add4:	cmp	r0, #0
   1add8:	beq	1ae04 <__assert_fail@plt+0x9c00>
   1addc:	str	r4, [r5]
   1ade0:	pop	{r4, r5, r6, pc}
   1ade4:	cmp	r4, #0
   1ade8:	moveq	r4, #64	; 0x40
   1adec:	mov	r1, r4
   1adf0:	mov	r2, #1
   1adf4:	bl	1c558 <__assert_fail@plt+0xb354>
   1adf8:	cmp	r0, #0
   1adfc:	bne	1addc <__assert_fail@plt+0x9bd8>
   1ae00:	bl	1b2ac <__assert_fail@plt+0xa0a8>
   1ae04:	cmp	r4, #0
   1ae08:	bne	1ae00 <__assert_fail@plt+0x9bfc>
   1ae0c:	str	r4, [r5]
   1ae10:	pop	{r4, r5, r6, pc}
   1ae14:	cmp	r0, #0
   1ae18:	push	{r4, r5, r6, lr}
   1ae1c:	mov	r5, r1
   1ae20:	ldr	r4, [r1]
   1ae24:	mov	r6, r2
   1ae28:	beq	1ae6c <__assert_fail@plt+0x9c68>
   1ae2c:	lsr	r1, r4, #1
   1ae30:	add	r3, r1, #1
   1ae34:	mvn	r3, r3
   1ae38:	cmp	r4, r3
   1ae3c:	bhi	1aea4 <__assert_fail@plt+0x9ca0>
   1ae40:	add	r4, r4, #1
   1ae44:	add	r4, r4, r1
   1ae48:	mov	r1, r4
   1ae4c:	bl	1c558 <__assert_fail@plt+0xb354>
   1ae50:	cmp	r0, #0
   1ae54:	bne	1ae64 <__assert_fail@plt+0x9c60>
   1ae58:	cmp	r4, #0
   1ae5c:	cmpne	r6, #0
   1ae60:	bne	1aea4 <__assert_fail@plt+0x9ca0>
   1ae64:	str	r4, [r5]
   1ae68:	pop	{r4, r5, r6, pc}
   1ae6c:	cmp	r4, #0
   1ae70:	bne	1ae8c <__assert_fail@plt+0x9c88>
   1ae74:	mov	r1, r2
   1ae78:	mov	r0, #64	; 0x40
   1ae7c:	bl	1c698 <__assert_fail@plt+0xb494>
   1ae80:	cmp	r0, #0
   1ae84:	movne	r4, r0
   1ae88:	addeq	r4, r0, #1
   1ae8c:	mov	r2, r6
   1ae90:	mov	r1, r4
   1ae94:	mov	r0, #0
   1ae98:	bl	1c558 <__assert_fail@plt+0xb354>
   1ae9c:	cmp	r0, #0
   1aea0:	bne	1ae64 <__assert_fail@plt+0x9c60>
   1aea4:	bl	1b2ac <__assert_fail@plt+0xa0a8>
   1aea8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1aeac:	sub	sp, sp, #12
   1aeb0:	ldr	r6, [r1]
   1aeb4:	mov	r8, r1
   1aeb8:	mov	r9, r0
   1aebc:	asrs	r4, r6, #1
   1aec0:	mov	sl, r2
   1aec4:	mov	fp, r3
   1aec8:	ldr	r7, [sp, #48]	; 0x30
   1aecc:	bmi	1b048 <__assert_fail@plt+0x9e44>
   1aed0:	mvn	r1, #-2147483648	; 0x80000000
   1aed4:	sub	r1, r1, r4
   1aed8:	cmp	r6, r1
   1aedc:	movle	r1, #0
   1aee0:	movgt	r1, #1
   1aee4:	mvn	r3, fp
   1aee8:	cmp	r1, #0
   1aeec:	addeq	r4, r4, r6
   1aef0:	mvnne	r4, #-2147483648	; 0x80000000
   1aef4:	lsr	r3, r3, #31
   1aef8:	cmp	fp, r4
   1aefc:	movge	r2, #0
   1af00:	andlt	r2, r3, #1
   1af04:	cmp	r2, #0
   1af08:	beq	1aff8 <__assert_fail@plt+0x9df4>
   1af0c:	cmp	r7, #0
   1af10:	blt	1b0e0 <__assert_fail@plt+0x9edc>
   1af14:	bne	1b0d8 <__assert_fail@plt+0x9ed4>
   1af18:	mov	r5, #64	; 0x40
   1af1c:	mov	r1, r7
   1af20:	mov	r0, r5
   1af24:	str	r3, [sp, #4]
   1af28:	bl	1c8a4 <__assert_fail@plt+0xb6a0>
   1af2c:	mov	r1, r7
   1af30:	mov	r4, r0
   1af34:	mov	r0, r5
   1af38:	bl	1cac4 <__assert_fail@plt+0xb8c0>
   1af3c:	ldr	r3, [sp, #4]
   1af40:	sub	r5, r5, r1
   1af44:	cmp	r9, #0
   1af48:	sub	r2, r4, r6
   1af4c:	streq	r9, [r8]
   1af50:	cmp	r2, sl
   1af54:	bge	1afd8 <__assert_fail@plt+0x9dd4>
   1af58:	cmp	sl, #0
   1af5c:	blt	1b078 <__assert_fail@plt+0x9e74>
   1af60:	cmp	r6, #0
   1af64:	blt	1af84 <__assert_fail@plt+0x9d80>
   1af68:	mvn	r2, #-2147483648	; 0x80000000
   1af6c:	sub	r2, r2, sl
   1af70:	cmp	r6, r2
   1af74:	movle	r2, #0
   1af78:	movgt	r2, #1
   1af7c:	cmp	r2, #0
   1af80:	bne	1b074 <__assert_fail@plt+0x9e70>
   1af84:	add	r6, r6, sl
   1af88:	cmp	fp, r6
   1af8c:	movge	r3, #0
   1af90:	andlt	r3, r3, #1
   1af94:	cmp	r3, #0
   1af98:	mov	r4, r6
   1af9c:	bne	1b074 <__assert_fail@plt+0x9e70>
   1afa0:	cmp	r7, #0
   1afa4:	blt	1b08c <__assert_fail@plt+0x9e88>
   1afa8:	beq	1afd4 <__assert_fail@plt+0x9dd0>
   1afac:	cmp	r6, #0
   1afb0:	blt	1b130 <__assert_fail@plt+0x9f2c>
   1afb4:	mov	r1, r7
   1afb8:	mvn	r0, #-2147483648	; 0x80000000
   1afbc:	bl	1c8a4 <__assert_fail@plt+0xb6a0>
   1afc0:	cmp	r6, r0
   1afc4:	movle	r0, #0
   1afc8:	movgt	r0, #1
   1afcc:	cmp	r0, #0
   1afd0:	bne	1b074 <__assert_fail@plt+0x9e70>
   1afd4:	mul	r5, r6, r7
   1afd8:	mov	r1, r5
   1afdc:	mov	r0, r9
   1afe0:	bl	1c3f8 <__assert_fail@plt+0xb1f4>
   1afe4:	cmp	r0, #0
   1afe8:	beq	1b05c <__assert_fail@plt+0x9e58>
   1afec:	str	r4, [r8]
   1aff0:	add	sp, sp, #12
   1aff4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1aff8:	cmp	r7, #0
   1affc:	blt	1b0b8 <__assert_fail@plt+0x9eb4>
   1b000:	beq	1af18 <__assert_fail@plt+0x9d14>
   1b004:	cmp	r4, #0
   1b008:	blt	1b0e8 <__assert_fail@plt+0x9ee4>
   1b00c:	mov	r1, r7
   1b010:	mvn	r0, #-2147483648	; 0x80000000
   1b014:	str	r3, [sp, #4]
   1b018:	bl	1c8a4 <__assert_fail@plt+0xb6a0>
   1b01c:	ldr	r3, [sp, #4]
   1b020:	cmp	r0, r4
   1b024:	movge	r0, #0
   1b028:	movlt	r0, #1
   1b02c:	cmp	r0, #0
   1b030:	mvnne	r5, #-2147483648	; 0x80000000
   1b034:	bne	1af1c <__assert_fail@plt+0x9d18>
   1b038:	mul	r5, r7, r4
   1b03c:	cmp	r5, #63	; 0x3f
   1b040:	bgt	1af44 <__assert_fail@plt+0x9d40>
   1b044:	b	1af18 <__assert_fail@plt+0x9d14>
   1b048:	rsb	r1, r4, #-2147483648	; 0x80000000
   1b04c:	cmp	r6, r1
   1b050:	movge	r1, #0
   1b054:	movlt	r1, #1
   1b058:	b	1aee4 <__assert_fail@plt+0x9ce0>
   1b05c:	adds	r5, r5, #0
   1b060:	movne	r5, #1
   1b064:	cmp	r9, #0
   1b068:	orreq	r5, r5, #1
   1b06c:	cmp	r5, #0
   1b070:	beq	1afec <__assert_fail@plt+0x9de8>
   1b074:	bl	1b2ac <__assert_fail@plt+0xa0a8>
   1b078:	rsb	r2, sl, #-2147483648	; 0x80000000
   1b07c:	cmp	r6, r2
   1b080:	movge	r2, #0
   1b084:	movlt	r2, #1
   1b088:	b	1af7c <__assert_fail@plt+0x9d78>
   1b08c:	cmp	r6, #0
   1b090:	blt	1b114 <__assert_fail@plt+0x9f10>
   1b094:	cmn	r7, #1
   1b098:	beq	1afd4 <__assert_fail@plt+0x9dd0>
   1b09c:	mov	r1, r7
   1b0a0:	mov	r0, #-2147483648	; 0x80000000
   1b0a4:	bl	1c8a4 <__assert_fail@plt+0xb6a0>
   1b0a8:	cmp	r6, r0
   1b0ac:	movle	r0, #0
   1b0b0:	movgt	r0, #1
   1b0b4:	b	1afcc <__assert_fail@plt+0x9dc8>
   1b0b8:	cmp	r4, #0
   1b0bc:	blt	1b154 <__assert_fail@plt+0x9f50>
   1b0c0:	cmn	r7, #1
   1b0c4:	beq	1b038 <__assert_fail@plt+0x9e34>
   1b0c8:	str	r3, [sp, #4]
   1b0cc:	mov	r1, r7
   1b0d0:	mov	r0, #-2147483648	; 0x80000000
   1b0d4:	b	1b018 <__assert_fail@plt+0x9e14>
   1b0d8:	mov	r4, fp
   1b0dc:	b	1b00c <__assert_fail@plt+0x9e08>
   1b0e0:	mov	r4, fp
   1b0e4:	b	1b0c0 <__assert_fail@plt+0x9ebc>
   1b0e8:	cmn	r4, #1
   1b0ec:	beq	1b038 <__assert_fail@plt+0x9e34>
   1b0f0:	mov	r1, r4
   1b0f4:	mov	r0, #-2147483648	; 0x80000000
   1b0f8:	str	r3, [sp, #4]
   1b0fc:	bl	1c8a4 <__assert_fail@plt+0xb6a0>
   1b100:	ldr	r3, [sp, #4]
   1b104:	cmp	r7, r0
   1b108:	movle	r0, #0
   1b10c:	movgt	r0, #1
   1b110:	b	1b02c <__assert_fail@plt+0x9e28>
   1b114:	mov	r1, r7
   1b118:	mvn	r0, #-2147483648	; 0x80000000
   1b11c:	bl	1c8a4 <__assert_fail@plt+0xb6a0>
   1b120:	cmp	r6, r0
   1b124:	movge	r0, #0
   1b128:	movlt	r0, #1
   1b12c:	b	1afcc <__assert_fail@plt+0x9dc8>
   1b130:	cmn	r6, #1
   1b134:	beq	1afd4 <__assert_fail@plt+0x9dd0>
   1b138:	mov	r1, r6
   1b13c:	mov	r0, #-2147483648	; 0x80000000
   1b140:	bl	1c8a4 <__assert_fail@plt+0xb6a0>
   1b144:	cmp	r7, r0
   1b148:	movle	r0, #0
   1b14c:	movgt	r0, #1
   1b150:	b	1afcc <__assert_fail@plt+0x9dc8>
   1b154:	mov	r1, r7
   1b158:	mvn	r0, #-2147483648	; 0x80000000
   1b15c:	str	r3, [sp, #4]
   1b160:	bl	1c8a4 <__assert_fail@plt+0xb6a0>
   1b164:	ldr	r3, [sp, #4]
   1b168:	cmp	r0, r4
   1b16c:	movle	r0, #0
   1b170:	movgt	r0, #1
   1b174:	b	1b02c <__assert_fail@plt+0x9e28>
   1b178:	push	{r4, lr}
   1b17c:	mov	r1, #1
   1b180:	bl	1c384 <__assert_fail@plt+0xb180>
   1b184:	cmp	r0, #0
   1b188:	popne	{r4, pc}
   1b18c:	bl	1b2ac <__assert_fail@plt+0xa0a8>
   1b190:	push	{r4, lr}
   1b194:	mov	r1, #1
   1b198:	bl	1c384 <__assert_fail@plt+0xb180>
   1b19c:	cmp	r0, #0
   1b1a0:	popne	{r4, pc}
   1b1a4:	bl	1b2ac <__assert_fail@plt+0xa0a8>
   1b1a8:	push	{r4, lr}
   1b1ac:	bl	1c384 <__assert_fail@plt+0xb180>
   1b1b0:	cmp	r0, #0
   1b1b4:	popne	{r4, pc}
   1b1b8:	bl	1b2ac <__assert_fail@plt+0xa0a8>
   1b1bc:	push	{r4, lr}
   1b1c0:	bl	1c384 <__assert_fail@plt+0xb180>
   1b1c4:	cmp	r0, #0
   1b1c8:	popne	{r4, pc}
   1b1cc:	bl	1b2ac <__assert_fail@plt+0xa0a8>
   1b1d0:	push	{r4, r5, r6, lr}
   1b1d4:	mov	r6, r0
   1b1d8:	mov	r0, r1
   1b1dc:	mov	r4, r1
   1b1e0:	bl	1c3cc <__assert_fail@plt+0xb1c8>
   1b1e4:	subs	r5, r0, #0
   1b1e8:	beq	1b200 <__assert_fail@plt+0x9ffc>
   1b1ec:	mov	r2, r4
   1b1f0:	mov	r1, r6
   1b1f4:	bl	10f70 <memcpy@plt>
   1b1f8:	mov	r0, r5
   1b1fc:	pop	{r4, r5, r6, pc}
   1b200:	bl	1b2ac <__assert_fail@plt+0xa0a8>
   1b204:	push	{r4, r5, r6, lr}
   1b208:	mov	r6, r0
   1b20c:	mov	r0, r1
   1b210:	mov	r4, r1
   1b214:	bl	1c3cc <__assert_fail@plt+0xb1c8>
   1b218:	subs	r5, r0, #0
   1b21c:	beq	1b234 <__assert_fail@plt+0xa030>
   1b220:	mov	r2, r4
   1b224:	mov	r1, r6
   1b228:	bl	10f70 <memcpy@plt>
   1b22c:	mov	r0, r5
   1b230:	pop	{r4, r5, r6, pc}
   1b234:	bl	1b2ac <__assert_fail@plt+0xa0a8>
   1b238:	push	{r4, r5, r6, lr}
   1b23c:	mov	r6, r0
   1b240:	add	r0, r1, #1
   1b244:	mov	r4, r1
   1b248:	bl	1c3cc <__assert_fail@plt+0xb1c8>
   1b24c:	subs	r5, r0, #0
   1b250:	beq	1b270 <__assert_fail@plt+0xa06c>
   1b254:	mov	r3, #0
   1b258:	mov	r1, r6
   1b25c:	strb	r3, [r5, r4]
   1b260:	mov	r2, r4
   1b264:	bl	10f70 <memcpy@plt>
   1b268:	mov	r0, r5
   1b26c:	pop	{r4, r5, r6, pc}
   1b270:	bl	1b2ac <__assert_fail@plt+0xa0a8>
   1b274:	push	{r4, r5, r6, lr}
   1b278:	mov	r6, r0
   1b27c:	bl	110c0 <strlen@plt>
   1b280:	add	r4, r0, #1
   1b284:	mov	r0, r4
   1b288:	bl	1c3cc <__assert_fail@plt+0xb1c8>
   1b28c:	subs	r5, r0, #0
   1b290:	beq	1b2a8 <__assert_fail@plt+0xa0a4>
   1b294:	mov	r2, r4
   1b298:	mov	r1, r6
   1b29c:	bl	10f70 <memcpy@plt>
   1b2a0:	mov	r0, r5
   1b2a4:	pop	{r4, r5, r6, pc}
   1b2a8:	bl	1b2ac <__assert_fail@plt+0xa0a8>
   1b2ac:	ldr	r3, [pc, #44]	; 1b2e0 <__assert_fail@plt+0xa0dc>
   1b2b0:	push	{r4, lr}
   1b2b4:	mov	r2, #5
   1b2b8:	ldr	r1, [pc, #36]	; 1b2e4 <__assert_fail@plt+0xa0e0>
   1b2bc:	mov	r0, #0
   1b2c0:	ldr	r4, [r3]
   1b2c4:	bl	10fc4 <dcgettext@plt>
   1b2c8:	ldr	r2, [pc, #24]	; 1b2e8 <__assert_fail@plt+0xa0e4>
   1b2cc:	mov	r1, #0
   1b2d0:	mov	r3, r0
   1b2d4:	mov	r0, r4
   1b2d8:	bl	1103c <error@plt>
   1b2dc:	bl	111ec <abort@plt>
   1b2e0:	andeq	pc, r2, r4, lsr #2
   1b2e4:	andeq	lr, r1, r0, lsr #16
   1b2e8:	andeq	lr, r1, r8, ror #7
   1b2ec:	push	{r0, r1, r2, r3}
   1b2f0:	mov	r1, #1
   1b2f4:	push	{r4, r5, r6, r7, lr}
   1b2f8:	sub	sp, sp, #12
   1b2fc:	ldr	r4, [pc, #116]	; 1b378 <__assert_fail@plt+0xa174>
   1b300:	add	ip, sp, #36	; 0x24
   1b304:	mov	r3, ip
   1b308:	ldr	r0, [r4]
   1b30c:	ldr	r2, [sp, #32]
   1b310:	str	ip, [sp, #4]
   1b314:	bl	11078 <__vfprintf_chk@plt>
   1b318:	subs	r5, r0, #0
   1b31c:	blt	1b334 <__assert_fail@plt+0xa130>
   1b320:	mov	r0, r5
   1b324:	add	sp, sp, #12
   1b328:	pop	{r4, r5, r6, r7, lr}
   1b32c:	add	sp, sp, #16
   1b330:	bx	lr
   1b334:	ldr	r0, [r4]
   1b338:	bl	10f58 <ferror@plt>
   1b33c:	subs	r4, r0, #0
   1b340:	bne	1b320 <__assert_fail@plt+0xa11c>
   1b344:	ldr	r3, [pc, #48]	; 1b37c <__assert_fail@plt+0xa178>
   1b348:	ldr	r6, [r3]
   1b34c:	bl	110d8 <__errno_location@plt>
   1b350:	mov	r2, #5
   1b354:	ldr	r1, [pc, #36]	; 1b380 <__assert_fail@plt+0xa17c>
   1b358:	ldr	r7, [r0]
   1b35c:	mov	r0, r4
   1b360:	bl	10fc4 <dcgettext@plt>
   1b364:	mov	r1, r7
   1b368:	mov	r2, r0
   1b36c:	mov	r0, r6
   1b370:	bl	1103c <error@plt>
   1b374:	b	1b320 <__assert_fail@plt+0xa11c>
   1b378:	andeq	pc, r2, r4, lsl #3
   1b37c:	andeq	pc, r2, r4, lsr #2
   1b380:	andeq	lr, r1, r4, lsr r8
   1b384:	push	{r4, r5, r6, r7, r8, lr}
   1b388:	mov	r3, r1
   1b38c:	ldr	r4, [pc, #96]	; 1b3f4 <__assert_fail@plt+0xa1f0>
   1b390:	mov	r2, r0
   1b394:	mov	r1, #1
   1b398:	ldr	r0, [r4]
   1b39c:	bl	11078 <__vfprintf_chk@plt>
   1b3a0:	subs	r5, r0, #0
   1b3a4:	blt	1b3b0 <__assert_fail@plt+0xa1ac>
   1b3a8:	mov	r0, r5
   1b3ac:	pop	{r4, r5, r6, r7, r8, pc}
   1b3b0:	ldr	r0, [r4]
   1b3b4:	bl	10f58 <ferror@plt>
   1b3b8:	subs	r4, r0, #0
   1b3bc:	bne	1b3a8 <__assert_fail@plt+0xa1a4>
   1b3c0:	ldr	r3, [pc, #48]	; 1b3f8 <__assert_fail@plt+0xa1f4>
   1b3c4:	ldr	r6, [r3]
   1b3c8:	bl	110d8 <__errno_location@plt>
   1b3cc:	mov	r2, #5
   1b3d0:	ldr	r1, [pc, #36]	; 1b3fc <__assert_fail@plt+0xa1f8>
   1b3d4:	ldr	r7, [r0]
   1b3d8:	mov	r0, r4
   1b3dc:	bl	10fc4 <dcgettext@plt>
   1b3e0:	mov	r1, r7
   1b3e4:	mov	r2, r0
   1b3e8:	mov	r0, r6
   1b3ec:	bl	1103c <error@plt>
   1b3f0:	b	1b3a8 <__assert_fail@plt+0xa1a4>
   1b3f4:	andeq	pc, r2, r4, lsl #3
   1b3f8:	andeq	pc, r2, r4, lsr #2
   1b3fc:	andeq	lr, r1, r4, lsr r8
   1b400:	push	{r1, r2, r3}
   1b404:	mov	r1, #1
   1b408:	push	{r4, r5, r6, r7, lr}
   1b40c:	sub	sp, sp, #8
   1b410:	add	ip, sp, #32
   1b414:	mov	r3, ip
   1b418:	ldr	r2, [sp, #28]
   1b41c:	str	ip, [sp, #4]
   1b420:	mov	r5, r0
   1b424:	bl	11078 <__vfprintf_chk@plt>
   1b428:	subs	r4, r0, #0
   1b42c:	blt	1b444 <__assert_fail@plt+0xa240>
   1b430:	mov	r0, r4
   1b434:	add	sp, sp, #8
   1b438:	pop	{r4, r5, r6, r7, lr}
   1b43c:	add	sp, sp, #12
   1b440:	bx	lr
   1b444:	mov	r0, r5
   1b448:	bl	10f58 <ferror@plt>
   1b44c:	subs	r5, r0, #0
   1b450:	bne	1b430 <__assert_fail@plt+0xa22c>
   1b454:	ldr	r3, [pc, #44]	; 1b488 <__assert_fail@plt+0xa284>
   1b458:	ldr	r6, [r3]
   1b45c:	bl	110d8 <__errno_location@plt>
   1b460:	mov	r2, #5
   1b464:	ldr	r1, [pc, #32]	; 1b48c <__assert_fail@plt+0xa288>
   1b468:	ldr	r7, [r0]
   1b46c:	mov	r0, r5
   1b470:	bl	10fc4 <dcgettext@plt>
   1b474:	mov	r1, r7
   1b478:	mov	r2, r0
   1b47c:	mov	r0, r6
   1b480:	bl	1103c <error@plt>
   1b484:	b	1b430 <__assert_fail@plt+0xa22c>
   1b488:	andeq	pc, r2, r4, lsr #2
   1b48c:	andeq	lr, r1, r4, lsr r8
   1b490:	push	{r4, r5, r6, r7, r8, lr}
   1b494:	mov	r3, r2
   1b498:	mov	r2, r1
   1b49c:	mov	r1, #1
   1b4a0:	mov	r5, r0
   1b4a4:	bl	11078 <__vfprintf_chk@plt>
   1b4a8:	subs	r4, r0, #0
   1b4ac:	blt	1b4b8 <__assert_fail@plt+0xa2b4>
   1b4b0:	mov	r0, r4
   1b4b4:	pop	{r4, r5, r6, r7, r8, pc}
   1b4b8:	mov	r0, r5
   1b4bc:	bl	10f58 <ferror@plt>
   1b4c0:	subs	r5, r0, #0
   1b4c4:	bne	1b4b0 <__assert_fail@plt+0xa2ac>
   1b4c8:	ldr	r3, [pc, #44]	; 1b4fc <__assert_fail@plt+0xa2f8>
   1b4cc:	ldr	r6, [r3]
   1b4d0:	bl	110d8 <__errno_location@plt>
   1b4d4:	mov	r2, #5
   1b4d8:	ldr	r1, [pc, #32]	; 1b500 <__assert_fail@plt+0xa2fc>
   1b4dc:	ldr	r7, [r0]
   1b4e0:	mov	r0, r5
   1b4e4:	bl	10fc4 <dcgettext@plt>
   1b4e8:	mov	r1, r7
   1b4ec:	mov	r2, r0
   1b4f0:	mov	r0, r6
   1b4f4:	bl	1103c <error@plt>
   1b4f8:	b	1b4b0 <__assert_fail@plt+0xa2ac>
   1b4fc:	andeq	pc, r2, r4, lsr #2
   1b500:	andeq	lr, r1, r4, lsr r8
   1b504:	ldr	ip, [pc, #148]	; 1b5a0 <__assert_fail@plt+0xa39c>
   1b508:	sub	r0, r0, #1
   1b50c:	push	{lr}		; (str lr, [sp, #-4]!)
   1b510:	sub	sp, sp, #20
   1b514:	ldr	r5, [ip]
   1b518:	cmp	r0, #3
   1b51c:	ldrls	pc, [pc, r0, lsl #2]
   1b520:	b	1b58c <__assert_fail@plt+0xa388>
   1b524:	muleq	r1, r8, r5
   1b528:	muleq	r1, r0, r5
   1b52c:	muleq	r1, r0, r5
   1b530:	andeq	fp, r1, r4, lsr r5
   1b534:	ldr	r0, [pc, #104]	; 1b5a4 <__assert_fail@plt+0xa3a0>
   1b538:	cmp	r1, #0
   1b53c:	movlt	r3, #0
   1b540:	ldrlt	r4, [pc, #96]	; 1b5a8 <__assert_fail@plt+0xa3a4>
   1b544:	ldrge	r6, [r3, r1, lsl #4]
   1b548:	sublt	r4, r4, r1
   1b54c:	strblt	r2, [sp, #12]
   1b550:	mov	r1, r0
   1b554:	mov	r2, #5
   1b558:	mov	r0, #0
   1b55c:	strblt	r3, [sp, #13]
   1b560:	addlt	r6, sp, #12
   1b564:	ldrge	r4, [pc, #60]	; 1b5a8 <__assert_fail@plt+0xa3a4>
   1b568:	bl	10fc4 <dcgettext@plt>
   1b56c:	ldr	r3, [sp, #24]
   1b570:	str	r6, [sp]
   1b574:	str	r3, [sp, #4]
   1b578:	mov	r1, #0
   1b57c:	mov	r3, r4
   1b580:	mov	r2, r0
   1b584:	mov	r0, r5
   1b588:	bl	1103c <error@plt>
   1b58c:	bl	111ec <abort@plt>
   1b590:	ldr	r0, [pc, #20]	; 1b5ac <__assert_fail@plt+0xa3a8>
   1b594:	b	1b538 <__assert_fail@plt+0xa334>
   1b598:	ldr	r0, [pc, #16]	; 1b5b0 <__assert_fail@plt+0xa3ac>
   1b59c:	b	1b538 <__assert_fail@plt+0xa334>
   1b5a0:	andeq	pc, r2, r4, lsr #2
   1b5a4:	andeq	lr, r1, r4, asr r8
   1b5a8:			; <UNDEFINED> instruction: 0x0001e8b8
   1b5ac:	andeq	lr, r1, r0, ror r8
   1b5b0:	muleq	r1, r8, r8
   1b5b4:	andeq	r0, r0, r0
   1b5b8:	cmp	r2, #36	; 0x24
   1b5bc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b5c0:	sub	sp, sp, #52	; 0x34
   1b5c4:	bhi	1c354 <__assert_fail@plt+0xb150>
   1b5c8:	cmp	r1, #0
   1b5cc:	mov	r6, r2
   1b5d0:	mov	sl, r0
   1b5d4:	mov	r5, r1
   1b5d8:	mov	r8, r3
   1b5dc:	addeq	r5, sp, #44	; 0x2c
   1b5e0:	bl	110d8 <__errno_location@plt>
   1b5e4:	mov	r3, #0
   1b5e8:	str	r3, [r0]
   1b5ec:	mov	fp, r0
   1b5f0:	bl	110a8 <__ctype_b_loc@plt>
   1b5f4:	ldrb	r3, [sl]
   1b5f8:	mov	r2, sl
   1b5fc:	ldr	r0, [r0]
   1b600:	b	1b608 <__assert_fail@plt+0xa404>
   1b604:	ldrb	r3, [r2, #1]!
   1b608:	lsl	r1, r3, #1
   1b60c:	ldrh	r4, [r0, r1]
   1b610:	ands	r4, r4, #8192	; 0x2000
   1b614:	bne	1b604 <__assert_fail@plt+0xa400>
   1b618:	cmp	r3, #45	; 0x2d
   1b61c:	bne	1b630 <__assert_fail@plt+0xa42c>
   1b620:	mov	r4, #4
   1b624:	mov	r0, r4
   1b628:	add	sp, sp, #52	; 0x34
   1b62c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b630:	mov	r2, r6
   1b634:	mov	r3, r4
   1b638:	mov	r1, r5
   1b63c:	mov	r0, sl
   1b640:	bl	10f7c <__strtoull_internal@plt>
   1b644:	ldr	r9, [r5]
   1b648:	cmp	sl, r9
   1b64c:	mov	r6, r0
   1b650:	mov	r7, r1
   1b654:	beq	1b69c <__assert_fail@plt+0xa498>
   1b658:	ldr	r4, [fp]
   1b65c:	cmp	r4, #0
   1b660:	bne	1b68c <__assert_fail@plt+0xa488>
   1b664:	ldr	r3, [sp, #88]	; 0x58
   1b668:	cmp	r3, #0
   1b66c:	beq	1b67c <__assert_fail@plt+0xa478>
   1b670:	ldrb	sl, [r9]
   1b674:	cmp	sl, #0
   1b678:	bne	1b6d0 <__assert_fail@plt+0xa4cc>
   1b67c:	mov	r0, r4
   1b680:	strd	r6, [r8]
   1b684:	add	sp, sp, #52	; 0x34
   1b688:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b68c:	cmp	r4, #34	; 0x22
   1b690:	bne	1b620 <__assert_fail@plt+0xa41c>
   1b694:	mov	r4, #1
   1b698:	b	1b664 <__assert_fail@plt+0xa460>
   1b69c:	ldr	r3, [sp, #88]	; 0x58
   1b6a0:	cmp	r3, #0
   1b6a4:	beq	1b620 <__assert_fail@plt+0xa41c>
   1b6a8:	ldrb	sl, [r9]
   1b6ac:	cmp	sl, #0
   1b6b0:	beq	1b620 <__assert_fail@plt+0xa41c>
   1b6b4:	mov	r1, sl
   1b6b8:	mov	r0, r3
   1b6bc:	bl	110cc <strchr@plt>
   1b6c0:	cmp	r0, #0
   1b6c4:	movne	r6, #1
   1b6c8:	movne	r7, #0
   1b6cc:	beq	1b620 <__assert_fail@plt+0xa41c>
   1b6d0:	mov	r1, sl
   1b6d4:	ldr	r0, [sp, #88]	; 0x58
   1b6d8:	bl	110cc <strchr@plt>
   1b6dc:	cmp	r0, #0
   1b6e0:	beq	1c240 <__assert_fail@plt+0xb03c>
   1b6e4:	sub	r3, sl, #69	; 0x45
   1b6e8:	cmp	r3, #47	; 0x2f
   1b6ec:	ldrls	pc, [pc, r3, lsl #2]
   1b6f0:	b	1b7e4 <__assert_fail@plt+0xa5e0>
   1b6f4:			; <UNDEFINED> instruction: 0x0001b7b4
   1b6f8:	andeq	fp, r1, r4, ror #15
   1b6fc:			; <UNDEFINED> instruction: 0x0001b7b4
   1b700:	andeq	fp, r1, r4, ror #15
   1b704:	andeq	fp, r1, r4, ror #15
   1b708:	andeq	fp, r1, r4, ror #15
   1b70c:			; <UNDEFINED> instruction: 0x0001b7b4
   1b710:	andeq	fp, r1, r4, ror #15
   1b714:			; <UNDEFINED> instruction: 0x0001b7b4
   1b718:	andeq	fp, r1, r4, ror #15
   1b71c:	andeq	fp, r1, r4, ror #15
   1b720:			; <UNDEFINED> instruction: 0x0001b7b4
   1b724:	andeq	fp, r1, r4, ror #15
   1b728:	andeq	fp, r1, r4, ror #15
   1b72c:	andeq	fp, r1, r4, ror #15
   1b730:			; <UNDEFINED> instruction: 0x0001b7b4
   1b734:	andeq	fp, r1, r4, ror #15
   1b738:	andeq	fp, r1, r4, ror #15
   1b73c:	andeq	fp, r1, r4, ror #15
   1b740:	andeq	fp, r1, r4, ror #15
   1b744:			; <UNDEFINED> instruction: 0x0001b7b4
   1b748:			; <UNDEFINED> instruction: 0x0001b7b4
   1b74c:	andeq	fp, r1, r4, ror #15
   1b750:	andeq	fp, r1, r4, ror #15
   1b754:	andeq	fp, r1, r4, ror #15
   1b758:	andeq	fp, r1, r4, ror #15
   1b75c:	andeq	fp, r1, r4, ror #15
   1b760:	andeq	fp, r1, r4, ror #15
   1b764:	andeq	fp, r1, r4, ror #15
   1b768:	andeq	fp, r1, r4, ror #15
   1b76c:	andeq	fp, r1, r4, ror #15
   1b770:	andeq	fp, r1, r4, ror #15
   1b774:	andeq	fp, r1, r4, ror #15
   1b778:	andeq	fp, r1, r4, ror #15
   1b77c:			; <UNDEFINED> instruction: 0x0001b7b4
   1b780:	andeq	fp, r1, r4, ror #15
   1b784:	andeq	fp, r1, r4, ror #15
   1b788:	andeq	fp, r1, r4, ror #15
   1b78c:			; <UNDEFINED> instruction: 0x0001b7b4
   1b790:	andeq	fp, r1, r4, ror #15
   1b794:			; <UNDEFINED> instruction: 0x0001b7b4
   1b798:	andeq	fp, r1, r4, ror #15
   1b79c:	andeq	fp, r1, r4, ror #15
   1b7a0:	andeq	fp, r1, r4, ror #15
   1b7a4:	andeq	fp, r1, r4, ror #15
   1b7a8:	andeq	fp, r1, r4, ror #15
   1b7ac:	andeq	fp, r1, r4, ror #15
   1b7b0:			; <UNDEFINED> instruction: 0x0001b7b4
   1b7b4:	mov	r1, #48	; 0x30
   1b7b8:	ldr	r0, [sp, #88]	; 0x58
   1b7bc:	bl	110cc <strchr@plt>
   1b7c0:	cmp	r0, #0
   1b7c4:	beq	1c2d4 <__assert_fail@plt+0xb0d0>
   1b7c8:	ldrb	r3, [r9, #1]
   1b7cc:	cmp	r3, #68	; 0x44
   1b7d0:	beq	1c2b4 <__assert_fail@plt+0xb0b0>
   1b7d4:	cmp	r3, #105	; 0x69
   1b7d8:	beq	1c284 <__assert_fail@plt+0xb080>
   1b7dc:	cmp	r3, #66	; 0x42
   1b7e0:	beq	1c2b4 <__assert_fail@plt+0xb0b0>
   1b7e4:	ldr	r3, [pc, #2948]	; 1c370 <__assert_fail@plt+0xb16c>
   1b7e8:	mvn	r2, #0
   1b7ec:	mov	r1, #1024	; 0x400
   1b7f0:	mov	lr, #0
   1b7f4:	strd	r2, [sp]
   1b7f8:	mov	r3, #1
   1b7fc:	str	r3, [sp, #12]
   1b800:	sub	sl, sl, #66	; 0x42
   1b804:	cmp	sl, #53	; 0x35
   1b808:	ldrls	pc, [pc, sl, lsl #2]
   1b80c:	b	1c240 <__assert_fail@plt+0xb03c>
   1b810:	andeq	ip, r1, r0, lsl r2
   1b814:	andeq	ip, r1, r0, asr #4
   1b818:	andeq	ip, r1, r0, asr #4
   1b81c:	andeq	ip, r1, ip, lsl #1
   1b820:	andeq	ip, r1, r0, asr #4
   1b824:	andeq	fp, r1, r8, asr #31
   1b828:	andeq	ip, r1, r0, asr #4
   1b82c:	andeq	ip, r1, r0, asr #4
   1b830:	andeq	ip, r1, r0, asr #4
   1b834:	andeq	ip, r1, ip, asr #4
   1b838:	andeq	ip, r1, r0, asr #4
   1b83c:	andeq	fp, r1, r8, ror #17
   1b840:	andeq	ip, r1, r0, asr #4
   1b844:	andeq	ip, r1, r0, asr #4
   1b848:	andeq	fp, r1, r4, ror r9
   1b84c:	andeq	ip, r1, r0, asr #4
   1b850:	andeq	ip, r1, r0, asr #4
   1b854:	andeq	ip, r1, r0, asr #4
   1b858:	strdeq	fp, [r1], -r4
   1b85c:	andeq	ip, r1, r0, asr #4
   1b860:	andeq	ip, r1, r0, asr #4
   1b864:	andeq	ip, r1, r0, asr #4
   1b868:	andeq	ip, r1, r0, asr #4
   1b86c:	andeq	fp, r1, ip, asr #21
   1b870:	andeq	fp, r1, r8, lsr #28
   1b874:	andeq	ip, r1, r0, asr #4
   1b878:	andeq	ip, r1, r0, asr #4
   1b87c:	andeq	ip, r1, r0, asr #4
   1b880:	andeq	ip, r1, r0, asr #4
   1b884:	andeq	ip, r1, r0, asr #4
   1b888:	andeq	ip, r1, r0, asr #4
   1b88c:	andeq	ip, r1, r0, asr #4
   1b890:	strdeq	fp, [r1], -r8
   1b894:	strdeq	fp, [r1], -r0
   1b898:	andeq	ip, r1, r0, asr #4
   1b89c:	andeq	ip, r1, r0, asr #4
   1b8a0:	andeq	ip, r1, r0, asr #4
   1b8a4:	andeq	fp, r1, r8, asr #31
   1b8a8:	andeq	ip, r1, r0, asr #4
   1b8ac:	andeq	ip, r1, r0, asr #4
   1b8b0:	andeq	ip, r1, r0, asr #4
   1b8b4:	andeq	ip, r1, ip, asr #4
   1b8b8:	andeq	ip, r1, r0, asr #4
   1b8bc:	andeq	fp, r1, r8, ror #17
   1b8c0:	andeq	ip, r1, r0, asr #4
   1b8c4:	andeq	ip, r1, r0, asr #4
   1b8c8:	andeq	ip, r1, r0, asr #4
   1b8cc:	andeq	ip, r1, r0, asr #4
   1b8d0:	andeq	ip, r1, r0, asr #4
   1b8d4:	andeq	ip, r1, r0, asr #4
   1b8d8:	strdeq	fp, [r1], -r4
   1b8dc:	andeq	ip, r1, r0, asr #4
   1b8e0:	andeq	ip, r1, r0, asr #4
   1b8e4:	ldrdeq	fp, [r1], -r4
   1b8e8:	mul	r0, r6, lr
   1b8ec:	ldrd	sl, [sp]
   1b8f0:	umull	r2, r3, r6, r1
   1b8f4:	mla	r0, r1, r7, r0
   1b8f8:	cmp	r7, fp
   1b8fc:	cmpeq	r6, sl
   1b900:	add	r3, r0, r3
   1b904:	mvnhi	r3, #0
   1b908:	mvnhi	r2, #0
   1b90c:	mul	r6, r1, r3
   1b910:	umull	r0, r1, r1, r2
   1b914:	mla	lr, lr, r2, r6
   1b918:	ldrd	r6, [sp]
   1b91c:	movhi	ip, #1
   1b920:	movls	ip, #0
   1b924:	cmp	r7, r3
   1b928:	cmpeq	r6, r2
   1b92c:	mvncc	r0, #0
   1b930:	add	r1, lr, r1
   1b934:	mov	sl, r6
   1b938:	movcc	r1, r0
   1b93c:	mov	fp, r7
   1b940:	cmp	fp, r3
   1b944:	cmpeq	sl, r2
   1b948:	mov	r6, r0
   1b94c:	mov	r7, r1
   1b950:	orrcc	ip, ip, #1
   1b954:	ldr	r2, [sp, #12]
   1b958:	orr	r4, r4, ip
   1b95c:	add	r3, r9, r2
   1b960:	str	r3, [r5]
   1b964:	ldrb	r3, [r9, r2]
   1b968:	cmp	r3, #0
   1b96c:	orrne	r4, r4, #2
   1b970:	b	1b67c <__assert_fail@plt+0xa478>
   1b974:	ldrd	sl, [sp]
   1b978:	umull	r2, r3, r6, r1
   1b97c:	mul	r0, r6, lr
   1b980:	cmp	r7, fp
   1b984:	cmpeq	r6, sl
   1b988:	mvnhi	r2, #0
   1b98c:	mla	r0, r1, r7, r0
   1b990:	umull	sl, fp, r2, r1
   1b994:	add	r3, r0, r3
   1b998:	mul	r0, lr, r2
   1b99c:	mvnhi	r3, #0
   1b9a0:	strd	sl, [sp, #16]
   1b9a4:	ldrd	sl, [sp]
   1b9a8:	mla	r0, r1, r3, r0
   1b9ac:	ldr	ip, [sp, #20]
   1b9b0:	cmp	r3, fp
   1b9b4:	add	r0, r0, ip
   1b9b8:	cmpeq	r2, sl
   1b9bc:	str	r0, [sp, #20]
   1b9c0:	bls	1b9d8 <__assert_fail@plt+0xa7d4>
   1b9c4:	mvn	sl, #0
   1b9c8:	mvn	fp, #0
   1b9cc:	strd	sl, [sp, #16]
   1b9d0:	ldr	r0, [sp, #20]
   1b9d4:	ldrd	sl, [sp]
   1b9d8:	cmp	r7, fp
   1b9dc:	cmpeq	r6, sl
   1b9e0:	mul	r0, r1, r0
   1b9e4:	ldrd	r6, [sp, #16]
   1b9e8:	mla	ip, lr, r6, r0
   1b9ec:	mov	r0, r6
   1b9f0:	movhi	r0, #1
   1b9f4:	movls	r0, #0
   1b9f8:	cmp	r3, fp
   1b9fc:	cmpeq	r2, sl
   1ba00:	ldrd	r2, [sp, #16]
   1ba04:	umull	r6, r7, r1, r6
   1ba08:	orrhi	r0, r0, #1
   1ba0c:	cmp	fp, r3
   1ba10:	cmpeq	sl, r2
   1ba14:	add	r7, ip, r7
   1ba18:	bcc	1c324 <__assert_fail@plt+0xb120>
   1ba1c:	mov	sl, r6
   1ba20:	mov	fp, r7
   1ba24:	strd	r6, [sp, #24]
   1ba28:	mul	r3, r1, fp
   1ba2c:	umull	r6, r7, r1, sl
   1ba30:	mla	ip, lr, sl, r3
   1ba34:	ldrd	sl, [sp]
   1ba38:	ldrd	r2, [sp, #16]
   1ba3c:	add	r7, ip, r7
   1ba40:	cmp	fp, r3
   1ba44:	cmpeq	sl, r2
   1ba48:	mov	r3, fp
   1ba4c:	mov	r2, sl
   1ba50:	ldrd	sl, [sp, #24]
   1ba54:	orrcc	r0, r0, #1
   1ba58:	str	r0, [sp, #16]
   1ba5c:	cmp	r3, fp
   1ba60:	cmpeq	r2, sl
   1ba64:	bcs	1bfbc <__assert_fail@plt+0xadb8>
   1ba68:	mvn	r2, #0
   1ba6c:	mvn	r3, #0
   1ba70:	mul	ip, lr, r2
   1ba74:	ldrd	sl, [sp]
   1ba78:	mla	ip, r1, r3, ip
   1ba7c:	umull	r6, r7, r2, r1
   1ba80:	ldrd	r0, [sp, #24]
   1ba84:	add	r7, ip, r7
   1ba88:	cmp	fp, r1
   1ba8c:	ldr	r1, [sp, #16]
   1ba90:	cmpeq	sl, r0
   1ba94:	orrcc	r1, r1, #1
   1ba98:	cmp	r3, fp
   1ba9c:	cmpeq	r2, sl
   1baa0:	mvnhi	r0, #0
   1baa4:	movls	ip, r7
   1baa8:	movhi	ip, r0
   1baac:	movls	r0, r6
   1bab0:	cmp	r3, fp
   1bab4:	cmpeq	r2, sl
   1bab8:	mov	r7, ip
   1babc:	mov	r6, r0
   1bac0:	movls	ip, r1
   1bac4:	orrhi	ip, r1, #1
   1bac8:	b	1b954 <__assert_fail@plt+0xa750>
   1bacc:	ldrd	sl, [sp]
   1bad0:	umull	r2, r3, r6, r1
   1bad4:	mul	r0, r6, lr
   1bad8:	cmp	r7, fp
   1badc:	cmpeq	r6, sl
   1bae0:	mvnhi	r2, #0
   1bae4:	mla	r0, r1, r7, r0
   1bae8:	umull	sl, fp, r2, r1
   1baec:	add	r3, r0, r3
   1baf0:	mul	r0, lr, r2
   1baf4:	mvnhi	r3, #0
   1baf8:	strd	sl, [sp, #16]
   1bafc:	ldrd	sl, [sp]
   1bb00:	mla	r0, r1, r3, r0
   1bb04:	ldr	ip, [sp, #20]
   1bb08:	cmp	r3, fp
   1bb0c:	add	r0, r0, ip
   1bb10:	cmpeq	r2, sl
   1bb14:	str	r0, [sp, #20]
   1bb18:	mvnhi	sl, #0
   1bb1c:	mvnhi	fp, #0
   1bb20:	strdhi	sl, [sp, #16]
   1bb24:	ldrdhi	sl, [sp]
   1bb28:	ldr	r0, [sp, #16]
   1bb2c:	cmp	r3, fp
   1bb30:	ldr	r3, [sp, #20]
   1bb34:	mul	r0, lr, r0
   1bb38:	cmpeq	r2, sl
   1bb3c:	mla	r0, r1, r3, r0
   1bb40:	ldr	r3, [sp, #16]
   1bb44:	umull	r2, r3, r3, r1
   1bb48:	strd	r2, [sp, #24]
   1bb4c:	movhi	r3, #1
   1bb50:	movls	r3, #0
   1bb54:	cmp	r7, fp
   1bb58:	cmpeq	r6, sl
   1bb5c:	ldrd	r6, [sp, #16]
   1bb60:	ldr	r2, [sp, #28]
   1bb64:	movls	ip, r3
   1bb68:	orrhi	ip, r3, #1
   1bb6c:	cmp	r7, fp
   1bb70:	add	r2, r0, r2
   1bb74:	cmpeq	r6, sl
   1bb78:	str	r2, [sp, #28]
   1bb7c:	mvnhi	r2, #0
   1bb80:	mvnhi	r3, #0
   1bb84:	strdhi	r2, [sp, #24]
   1bb88:	ldrd	r6, [sp, #24]
   1bb8c:	mul	r2, r1, r7
   1bb90:	umull	sl, fp, r1, r6
   1bb94:	mla	r3, lr, r6, r2
   1bb98:	ldrd	r6, [sp]
   1bb9c:	str	r3, [sp, #32]
   1bba0:	ldrd	r2, [sp, #16]
   1bba4:	cmp	r3, r7
   1bba8:	cmpeq	r2, r6
   1bbac:	ldrd	r2, [sp, #24]
   1bbb0:	orrhi	ip, ip, #1
   1bbb4:	cmp	r3, r7
   1bbb8:	ldr	r3, [sp, #32]
   1bbbc:	cmpeq	r2, r6
   1bbc0:	add	r2, r3, fp
   1bbc4:	mov	fp, r2
   1bbc8:	bhi	1c30c <__assert_fail@plt+0xb108>
   1bbcc:	strd	sl, [sp, #16]
   1bbd0:	mul	r2, r1, fp
   1bbd4:	umull	r6, r7, r1, sl
   1bbd8:	mla	r3, lr, sl, r2
   1bbdc:	ldrd	sl, [sp]
   1bbe0:	str	r3, [sp, #32]
   1bbe4:	ldrd	r2, [sp, #24]
   1bbe8:	cmp	r3, fp
   1bbec:	cmpeq	r2, sl
   1bbf0:	ldrd	r2, [sp, #16]
   1bbf4:	orrhi	ip, ip, #1
   1bbf8:	cmp	fp, r3
   1bbfc:	ldr	r3, [sp, #32]
   1bc00:	cmpeq	sl, r2
   1bc04:	add	r2, r3, r7
   1bc08:	mov	r7, r2
   1bc0c:	mvncc	r7, #0
   1bc10:	mvncc	r6, #0
   1bc14:	mul	r2, r1, r7
   1bc18:	mov	sl, r6
   1bc1c:	strd	r6, [sp, #24]
   1bc20:	mla	r0, lr, sl, r2
   1bc24:	ldrd	r2, [sp, #16]
   1bc28:	ldrd	sl, [sp]
   1bc2c:	umull	r6, r7, r1, r6
   1bc30:	cmp	fp, r3
   1bc34:	cmpeq	sl, r2
   1bc38:	mov	r3, fp
   1bc3c:	mov	r2, sl
   1bc40:	ldrd	sl, [sp, #24]
   1bc44:	orrcc	ip, ip, #1
   1bc48:	add	r7, r0, r7
   1bc4c:	cmp	r3, fp
   1bc50:	cmpeq	r2, sl
   1bc54:	mvncc	r6, #0
   1bc58:	mvncc	r7, #0
   1bc5c:	umull	sl, fp, r1, r6
   1bc60:	mul	r3, r1, r7
   1bc64:	strd	sl, [sp, #16]
   1bc68:	mla	r0, lr, r6, r3
   1bc6c:	ldrd	sl, [sp, #24]
   1bc70:	ldrd	r2, [sp]
   1bc74:	cmp	r3, fp
   1bc78:	cmpeq	r2, sl
   1bc7c:	orrcc	ip, ip, #1
   1bc80:	cmp	r3, r7
   1bc84:	ldr	r3, [sp, #20]
   1bc88:	cmpeq	r2, r6
   1bc8c:	add	r3, r0, r3
   1bc90:	str	r3, [sp, #20]
   1bc94:	mvncc	r2, #0
   1bc98:	mvncc	r3, #0
   1bc9c:	ldrdcs	r2, [sp, #16]
   1bca0:	ldrd	sl, [sp]
   1bca4:	mul	r0, r1, r3
   1bca8:	cmp	fp, r7
   1bcac:	str	r0, [sp, #16]
   1bcb0:	cmpeq	sl, r6
   1bcb4:	ldr	r6, [sp, #16]
   1bcb8:	umull	r0, r1, r1, r2
   1bcbc:	mla	lr, lr, r2, r6
   1bcc0:	orrcc	ip, ip, #1
   1bcc4:	cmp	r3, fp
   1bcc8:	cmpeq	r2, sl
   1bccc:	add	r1, lr, r1
   1bcd0:	bls	1bcdc <__assert_fail@plt+0xaad8>
   1bcd4:	mvn	r0, #0
   1bcd8:	mov	r1, r0
   1bcdc:	cmp	r3, fp
   1bce0:	cmpeq	r2, sl
   1bce4:	mov	r6, r0
   1bce8:	mov	r7, r1
   1bcec:	orrhi	ip, ip, #1
   1bcf0:	b	1b954 <__assert_fail@plt+0xa750>
   1bcf4:	ldrd	sl, [sp]
   1bcf8:	umull	r2, r3, r6, r1
   1bcfc:	mul	r0, r6, lr
   1bd00:	cmp	r7, fp
   1bd04:	cmpeq	r6, sl
   1bd08:	mvnhi	r2, #0
   1bd0c:	mla	r0, r1, r7, r0
   1bd10:	umull	sl, fp, r1, r2
   1bd14:	add	r3, r0, r3
   1bd18:	mvnhi	r3, #0
   1bd1c:	strd	sl, [sp, #16]
   1bd20:	mul	r0, r1, r3
   1bd24:	ldrd	sl, [sp]
   1bd28:	mla	r0, lr, r2, r0
   1bd2c:	ldr	ip, [sp, #20]
   1bd30:	cmp	fp, r3
   1bd34:	add	r0, r0, ip
   1bd38:	cmpeq	sl, r2
   1bd3c:	str	r0, [sp, #20]
   1bd40:	mvncc	sl, #0
   1bd44:	mvncc	fp, #0
   1bd48:	strdcc	sl, [sp, #16]
   1bd4c:	ldrdcc	sl, [sp]
   1bd50:	ldr	r0, [sp, #16]
   1bd54:	cmp	fp, r3
   1bd58:	cmpeq	sl, r2
   1bd5c:	mul	r0, lr, r0
   1bd60:	ldr	r2, [sp, #20]
   1bd64:	ldr	r3, [sp, #16]
   1bd68:	movcc	ip, #1
   1bd6c:	movcs	ip, #0
   1bd70:	cmp	r7, fp
   1bd74:	cmpeq	r6, sl
   1bd78:	ldrd	r6, [sp, #16]
   1bd7c:	mla	r0, r1, r2, r0
   1bd80:	umull	r2, r3, r3, r1
   1bd84:	orrhi	ip, ip, #1
   1bd88:	cmp	r7, fp
   1bd8c:	cmpeq	r6, sl
   1bd90:	add	r3, r0, r3
   1bd94:	mvnhi	r3, #0
   1bd98:	mvnhi	r2, #0
   1bd9c:	mul	r0, r1, r3
   1bda0:	cmp	r7, fp
   1bda4:	str	r0, [sp, #24]
   1bda8:	cmpeq	r6, sl
   1bdac:	ldr	r6, [sp, #24]
   1bdb0:	umull	r0, r1, r1, r2
   1bdb4:	mla	lr, lr, r2, r6
   1bdb8:	orrhi	ip, ip, #1
   1bdbc:	cmp	fp, r3
   1bdc0:	cmpeq	sl, r2
   1bdc4:	mvncc	r0, #0
   1bdc8:	add	r1, lr, r1
   1bdcc:	movcc	r1, r0
   1bdd0:	b	1b940 <__assert_fail@plt+0xa73c>
   1bdd4:	cmp	r6, #0
   1bdd8:	sbcs	r3, r7, #0
   1bddc:	blt	1c274 <__assert_fail@plt+0xb070>
   1bde0:	adds	r6, r6, r6
   1bde4:	adc	r7, r7, r7
   1bde8:	mov	ip, #0
   1bdec:	b	1b954 <__assert_fail@plt+0xa750>
   1bdf0:	mov	ip, #0
   1bdf4:	b	1b954 <__assert_fail@plt+0xa750>
   1bdf8:	ldr	r3, [pc, #1396]	; 1c374 <__assert_fail@plt+0xb170>
   1bdfc:	mvn	r2, #0
   1be00:	cmp	r7, r3
   1be04:	cmpeq	r6, r2
   1be08:	bhi	1c274 <__assert_fail@plt+0xb070>
   1be0c:	lsl	r3, r7, #9
   1be10:	orr	r3, r3, r6, lsr #23
   1be14:	lsl	r2, r6, #9
   1be18:	mov	r6, r2
   1be1c:	mov	r7, r3
   1be20:	mov	ip, #0
   1be24:	b	1b954 <__assert_fail@plt+0xa750>
   1be28:	ldrd	sl, [sp]
   1be2c:	umull	r2, r3, r6, r1
   1be30:	mul	r0, r6, lr
   1be34:	cmp	r7, fp
   1be38:	cmpeq	r6, sl
   1be3c:	mvnhi	r2, #0
   1be40:	mla	r0, r1, r7, r0
   1be44:	umull	sl, fp, r2, r1
   1be48:	add	r3, r0, r3
   1be4c:	mul	r0, lr, r2
   1be50:	mvnhi	r3, #0
   1be54:	strd	sl, [sp, #16]
   1be58:	ldrd	sl, [sp]
   1be5c:	mla	r0, r1, r3, r0
   1be60:	ldr	ip, [sp, #20]
   1be64:	cmp	r3, fp
   1be68:	add	r0, r0, ip
   1be6c:	cmpeq	r2, sl
   1be70:	str	r0, [sp, #20]
   1be74:	mvnhi	sl, #0
   1be78:	mvnhi	fp, #0
   1be7c:	strdhi	sl, [sp, #16]
   1be80:	ldrdhi	sl, [sp]
   1be84:	ldr	r0, [sp, #16]
   1be88:	cmp	r3, fp
   1be8c:	ldr	r3, [sp, #20]
   1be90:	mul	r0, lr, r0
   1be94:	cmpeq	r2, sl
   1be98:	mla	r0, r1, r3, r0
   1be9c:	ldr	r3, [sp, #16]
   1bea0:	umull	r2, r3, r3, r1
   1bea4:	strd	r2, [sp, #24]
   1bea8:	movhi	r3, #1
   1beac:	movls	r3, #0
   1beb0:	cmp	r7, fp
   1beb4:	cmpeq	r6, sl
   1beb8:	ldrd	r6, [sp, #16]
   1bebc:	ldr	r2, [sp, #28]
   1bec0:	movls	ip, r3
   1bec4:	orrhi	ip, r3, #1
   1bec8:	cmp	r7, fp
   1becc:	add	r2, r0, r2
   1bed0:	cmpeq	r6, sl
   1bed4:	str	r2, [sp, #28]
   1bed8:	mvnhi	r2, #0
   1bedc:	mvnhi	r3, #0
   1bee0:	strdhi	r2, [sp, #24]
   1bee4:	ldrd	r6, [sp, #24]
   1bee8:	mul	r2, lr, r6
   1beec:	umull	sl, fp, r6, r1
   1bef0:	mla	r3, r1, r7, r2
   1bef4:	ldrd	r6, [sp]
   1bef8:	str	r3, [sp, #32]
   1befc:	ldrd	r2, [sp, #16]
   1bf00:	cmp	r3, r7
   1bf04:	cmpeq	r2, r6
   1bf08:	ldrd	r2, [sp, #24]
   1bf0c:	orrhi	ip, ip, #1
   1bf10:	cmp	r3, r7
   1bf14:	ldr	r3, [sp, #32]
   1bf18:	cmpeq	r2, r6
   1bf1c:	add	r2, r3, fp
   1bf20:	mov	fp, r2
   1bf24:	bhi	1c33c <__assert_fail@plt+0xb138>
   1bf28:	strd	sl, [sp, #16]
   1bf2c:	mul	r2, lr, sl
   1bf30:	umull	r6, r7, sl, r1
   1bf34:	mla	r3, r1, fp, r2
   1bf38:	ldrd	sl, [sp]
   1bf3c:	str	r3, [sp, #32]
   1bf40:	ldrd	r2, [sp, #24]
   1bf44:	cmp	r3, fp
   1bf48:	cmpeq	r2, sl
   1bf4c:	ldrd	r2, [sp, #16]
   1bf50:	orrhi	ip, ip, #1
   1bf54:	cmp	r3, fp
   1bf58:	ldr	r3, [sp, #32]
   1bf5c:	cmpeq	r2, sl
   1bf60:	add	r2, r3, r7
   1bf64:	mov	r7, r2
   1bf68:	mvnhi	r7, #0
   1bf6c:	mvnhi	r6, #0
   1bf70:	mul	r2, r1, r7
   1bf74:	mov	sl, r6
   1bf78:	strd	r6, [sp, #24]
   1bf7c:	mla	r0, lr, sl, r2
   1bf80:	ldrd	sl, [sp]
   1bf84:	ldrd	r2, [sp, #16]
   1bf88:	umull	r6, r7, r1, r6
   1bf8c:	cmp	r3, fp
   1bf90:	cmpeq	r2, sl
   1bf94:	mov	r3, ip
   1bf98:	orrhi	r3, r3, #1
   1bf9c:	mov	r2, sl
   1bfa0:	str	r3, [sp, #16]
   1bfa4:	mov	r3, fp
   1bfa8:	ldrd	sl, [sp, #24]
   1bfac:	add	r7, r0, r7
   1bfb0:	cmp	r3, fp
   1bfb4:	cmpeq	r2, sl
   1bfb8:	bcc	1ba68 <__assert_fail@plt+0xa864>
   1bfbc:	mov	r2, r6
   1bfc0:	mov	r3, r7
   1bfc4:	b	1ba70 <__assert_fail@plt+0xa86c>
   1bfc8:	ldrd	sl, [sp]
   1bfcc:	umull	r2, r3, r6, r1
   1bfd0:	mul	r0, r6, lr
   1bfd4:	cmp	r7, fp
   1bfd8:	cmpeq	r6, sl
   1bfdc:	mvnhi	r2, #0
   1bfe0:	mla	r0, r1, r7, r0
   1bfe4:	umull	sl, fp, r2, r1
   1bfe8:	add	r3, r0, r3
   1bfec:	mul	r0, lr, r2
   1bff0:	mvnhi	r3, #0
   1bff4:	strd	sl, [sp, #16]
   1bff8:	ldrd	sl, [sp]
   1bffc:	mla	r0, r1, r3, r0
   1c000:	ldr	ip, [sp, #20]
   1c004:	cmp	r3, fp
   1c008:	add	r0, r0, ip
   1c00c:	cmpeq	r2, sl
   1c010:	str	r0, [sp, #20]
   1c014:	mvnhi	sl, #0
   1c018:	mvnhi	fp, #0
   1c01c:	strdhi	sl, [sp, #16]
   1c020:	ldrdhi	sl, [sp]
   1c024:	ldr	r0, [sp, #16]
   1c028:	cmp	r3, fp
   1c02c:	ldr	ip, [sp, #20]
   1c030:	mul	r0, lr, r0
   1c034:	ldr	r3, [sp, #16]
   1c038:	cmpeq	r2, sl
   1c03c:	mla	r0, r1, ip, r0
   1c040:	umull	r2, r3, r3, r1
   1c044:	movhi	r1, #1
   1c048:	movls	r1, #0
   1c04c:	cmp	r7, fp
   1c050:	cmpeq	r6, sl
   1c054:	ldrd	r6, [sp, #16]
   1c058:	movls	ip, r1
   1c05c:	orrhi	ip, r1, #1
   1c060:	cmp	r7, fp
   1c064:	cmpeq	r6, sl
   1c068:	mvnhi	r2, #0
   1c06c:	add	r3, r0, r3
   1c070:	movhi	r3, r2
   1c074:	cmp	r7, fp
   1c078:	cmpeq	r6, sl
   1c07c:	mov	r7, r3
   1c080:	mov	r6, r2
   1c084:	orrhi	ip, ip, #1
   1c088:	b	1b954 <__assert_fail@plt+0xa750>
   1c08c:	ldrd	sl, [sp]
   1c090:	umull	r2, r3, r6, r1
   1c094:	mul	r0, r6, lr
   1c098:	cmp	r7, fp
   1c09c:	cmpeq	r6, sl
   1c0a0:	mvnhi	r2, #0
   1c0a4:	mla	r0, r1, r7, r0
   1c0a8:	umull	sl, fp, r1, r2
   1c0ac:	add	r3, r0, r3
   1c0b0:	mvnhi	r3, #0
   1c0b4:	strd	sl, [sp, #16]
   1c0b8:	mul	r0, r1, r3
   1c0bc:	ldrd	sl, [sp]
   1c0c0:	mla	r0, lr, r2, r0
   1c0c4:	ldr	ip, [sp, #20]
   1c0c8:	cmp	fp, r3
   1c0cc:	add	r0, r0, ip
   1c0d0:	cmpeq	sl, r2
   1c0d4:	str	r0, [sp, #20]
   1c0d8:	mvncc	sl, #0
   1c0dc:	mvncc	fp, #0
   1c0e0:	strdcc	sl, [sp, #16]
   1c0e4:	ldrdcc	sl, [sp]
   1c0e8:	ldr	r0, [sp, #16]
   1c0ec:	cmp	fp, r3
   1c0f0:	ldr	r3, [sp, #20]
   1c0f4:	mul	r0, lr, r0
   1c0f8:	cmpeq	sl, r2
   1c0fc:	mla	r0, r1, r3, r0
   1c100:	ldr	r3, [sp, #16]
   1c104:	umull	r2, r3, r3, r1
   1c108:	strd	r2, [sp, #24]
   1c10c:	movcc	r3, #1
   1c110:	movcs	r3, #0
   1c114:	cmp	r7, fp
   1c118:	cmpeq	r6, sl
   1c11c:	movls	ip, r3
   1c120:	orrhi	ip, r3, #1
   1c124:	ldrd	r2, [sp, #16]
   1c128:	cmp	r3, fp
   1c12c:	ldr	r3, [sp, #28]
   1c130:	cmpeq	r2, sl
   1c134:	add	r3, r0, r3
   1c138:	str	r3, [sp, #28]
   1c13c:	bhi	1c2f4 <__assert_fail@plt+0xb0f0>
   1c140:	ldrd	r2, [sp, #24]
   1c144:	mov	sl, r2
   1c148:	mov	fp, r3
   1c14c:	mul	r2, lr, sl
   1c150:	umull	r6, r7, sl, r1
   1c154:	mla	r0, r1, fp, r2
   1c158:	ldrd	r2, [sp]
   1c15c:	add	r7, r0, r7
   1c160:	mov	sl, r2
   1c164:	mov	fp, r3
   1c168:	strd	r2, [sp, #32]
   1c16c:	ldrd	r2, [sp, #16]
   1c170:	cmp	r3, fp
   1c174:	cmpeq	r2, sl
   1c178:	ldrd	r2, [sp, #32]
   1c17c:	ldrd	sl, [sp, #24]
   1c180:	orrhi	ip, ip, #1
   1c184:	cmp	fp, r3
   1c188:	cmpeq	sl, r2
   1c18c:	mvnhi	r6, #0
   1c190:	mvnhi	r7, #0
   1c194:	umull	sl, fp, r6, r1
   1c198:	mul	r3, lr, r6
   1c19c:	strd	sl, [sp, #16]
   1c1a0:	mla	r0, r1, r7, r3
   1c1a4:	ldrd	sl, [sp, #24]
   1c1a8:	ldrd	r2, [sp]
   1c1ac:	cmp	fp, r3
   1c1b0:	cmpeq	sl, r2
   1c1b4:	orrhi	ip, ip, #1
   1c1b8:	cmp	r7, r3
   1c1bc:	ldr	r3, [sp, #20]
   1c1c0:	cmpeq	r6, r2
   1c1c4:	add	r3, r0, r3
   1c1c8:	str	r3, [sp, #20]
   1c1cc:	mvnhi	r2, #0
   1c1d0:	mvnhi	r3, #0
   1c1d4:	ldrdls	r2, [sp, #16]
   1c1d8:	ldrd	sl, [sp]
   1c1dc:	mul	r0, r1, r3
   1c1e0:	cmp	r7, fp
   1c1e4:	str	r0, [sp, #16]
   1c1e8:	cmpeq	r6, sl
   1c1ec:	ldr	r6, [sp, #16]
   1c1f0:	umull	r0, r1, r1, r2
   1c1f4:	mla	lr, lr, r2, r6
   1c1f8:	orrhi	ip, ip, #1
   1c1fc:	cmp	r3, fp
   1c200:	cmpeq	r2, sl
   1c204:	add	r1, lr, r1
   1c208:	bls	1bcdc <__assert_fail@plt+0xaad8>
   1c20c:	b	1bcd4 <__assert_fail@plt+0xaad0>
   1c210:	ldr	r3, [pc, #344]	; 1c370 <__assert_fail@plt+0xb16c>
   1c214:	mvn	r2, #0
   1c218:	cmp	r7, r3
   1c21c:	cmpeq	r6, r2
   1c220:	bhi	1c274 <__assert_fail@plt+0xb070>
   1c224:	lsl	r3, r7, #10
   1c228:	orr	r3, r3, r6, lsr #22
   1c22c:	lsl	r2, r6, #10
   1c230:	mov	r6, r2
   1c234:	mov	r7, r3
   1c238:	mov	ip, #0
   1c23c:	b	1b954 <__assert_fail@plt+0xa750>
   1c240:	strd	r6, [r8]
   1c244:	orr	r4, r4, #2
   1c248:	b	1b624 <__assert_fail@plt+0xa420>
   1c24c:	ldrd	r2, [sp]
   1c250:	cmp	r7, r3
   1c254:	cmpeq	r6, r2
   1c258:	bhi	1c274 <__assert_fail@plt+0xb070>
   1c25c:	mul	r3, r6, lr
   1c260:	mov	ip, #0
   1c264:	mla	r3, r1, r7, r3
   1c268:	umull	r6, r7, r6, r1
   1c26c:	add	r7, r3, r7
   1c270:	b	1b954 <__assert_fail@plt+0xa750>
   1c274:	mvn	r6, #0
   1c278:	mvn	r7, #0
   1c27c:	mov	ip, #1
   1c280:	b	1b954 <__assert_fail@plt+0xa750>
   1c284:	ldrb	r3, [r9, #2]
   1c288:	mvn	r2, #0
   1c28c:	mov	r1, #1024	; 0x400
   1c290:	cmp	r3, #66	; 0x42
   1c294:	ldr	r3, [pc, #212]	; 1c370 <__assert_fail@plt+0xb16c>
   1c298:	mov	lr, #0
   1c29c:	strd	r2, [sp]
   1c2a0:	moveq	r3, #3
   1c2a4:	streq	r3, [sp, #12]
   1c2a8:	movne	r3, #1
   1c2ac:	strne	r3, [sp, #12]
   1c2b0:	b	1b800 <__assert_fail@plt+0xa5fc>
   1c2b4:	add	r3, pc, #172	; 0xac
   1c2b8:	ldrd	r2, [r3]
   1c2bc:	mov	r1, #1000	; 0x3e8
   1c2c0:	mov	lr, #0
   1c2c4:	strd	r2, [sp]
   1c2c8:	mov	r3, #2
   1c2cc:	str	r3, [sp, #12]
   1c2d0:	b	1b800 <__assert_fail@plt+0xa5fc>
   1c2d4:	ldr	r3, [pc, #148]	; 1c370 <__assert_fail@plt+0xb16c>
   1c2d8:	mvn	r2, #0
   1c2dc:	mov	lr, r0
   1c2e0:	strd	r2, [sp]
   1c2e4:	mov	r3, #1
   1c2e8:	mov	r1, #1024	; 0x400
   1c2ec:	str	r3, [sp, #12]
   1c2f0:	b	1b800 <__assert_fail@plt+0xa5fc>
   1c2f4:	mvn	r2, #0
   1c2f8:	mvn	r3, #0
   1c2fc:	mov	sl, r2
   1c300:	strd	r2, [sp, #24]
   1c304:	mov	fp, r3
   1c308:	b	1c14c <__assert_fail@plt+0xaf48>
   1c30c:	mvn	r2, #0
   1c310:	mvn	r3, #0
   1c314:	mov	sl, r2
   1c318:	strd	r2, [sp, #16]
   1c31c:	mov	fp, r3
   1c320:	b	1bbd0 <__assert_fail@plt+0xa9cc>
   1c324:	mvn	r2, #0
   1c328:	mvn	r3, #0
   1c32c:	mov	sl, r2
   1c330:	strd	r2, [sp, #24]
   1c334:	mov	fp, r3
   1c338:	b	1ba28 <__assert_fail@plt+0xa824>
   1c33c:	mvn	r2, #0
   1c340:	mvn	r3, #0
   1c344:	mov	sl, r2
   1c348:	strd	r2, [sp, #16]
   1c34c:	mov	fp, r3
   1c350:	b	1bf2c <__assert_fail@plt+0xad28>
   1c354:	ldr	r3, [pc, #28]	; 1c378 <__assert_fail@plt+0xb174>
   1c358:	mov	r2, #85	; 0x55
   1c35c:	ldr	r1, [pc, #24]	; 1c37c <__assert_fail@plt+0xb178>
   1c360:	ldr	r0, [pc, #24]	; 1c380 <__assert_fail@plt+0xb17c>
   1c364:	bl	11204 <__assert_fail@plt>
   1c368:	blmi	ff1c632c <optarg@@GLIBC_2.4+0xff1971a4>
   1c36c:	subeq	r8, r1, r7, lsr r9
   1c370:	ldrshteq	pc, [pc], -pc	; <UNPREDICTABLE>
   1c374:	ldrshteq	pc, [pc], #-255	; <UNPREDICTABLE>
   1c378:			; <UNDEFINED> instruction: 0x0001e8bc
   1c37c:	andeq	lr, r1, r8, asr #17
   1c380:	ldrdeq	lr, [r1], -r8
   1c384:	cmp	r1, #0
   1c388:	cmpne	r0, #0
   1c38c:	moveq	r1, #1
   1c390:	moveq	r0, r1
   1c394:	umull	r2, r3, r0, r1
   1c398:	adds	r3, r3, #0
   1c39c:	movne	r3, #1
   1c3a0:	cmp	r2, #0
   1c3a4:	blt	1c3b4 <__assert_fail@plt+0xb1b0>
   1c3a8:	cmp	r3, #0
   1c3ac:	bne	1c3b4 <__assert_fail@plt+0xb1b0>
   1c3b0:	b	10f10 <calloc@plt>
   1c3b4:	push	{r4, lr}
   1c3b8:	bl	110d8 <__errno_location@plt>
   1c3bc:	mov	r3, #12
   1c3c0:	str	r3, [r0]
   1c3c4:	mov	r0, #0
   1c3c8:	pop	{r4, pc}
   1c3cc:	cmp	r0, #0
   1c3d0:	moveq	r0, #1
   1c3d4:	cmp	r0, #0
   1c3d8:	blt	1c3e0 <__assert_fail@plt+0xb1dc>
   1c3dc:	b	11060 <malloc@plt>
   1c3e0:	push	{r4, lr}
   1c3e4:	bl	110d8 <__errno_location@plt>
   1c3e8:	mov	r3, #12
   1c3ec:	str	r3, [r0]
   1c3f0:	mov	r0, #0
   1c3f4:	pop	{r4, pc}
   1c3f8:	cmp	r0, #0
   1c3fc:	beq	1c420 <__assert_fail@plt+0xb21c>
   1c400:	cmp	r1, #0
   1c404:	push	{lr}		; (str lr, [sp, #-4]!)
   1c408:	sub	sp, sp, #12
   1c40c:	beq	1c428 <__assert_fail@plt+0xb224>
   1c410:	blt	1c440 <__assert_fail@plt+0xb23c>
   1c414:	add	sp, sp, #12
   1c418:	pop	{lr}		; (ldr lr, [sp], #4)
   1c41c:	b	10fd0 <realloc@plt>
   1c420:	mov	r0, r1
   1c424:	b	1c3cc <__assert_fail@plt+0xb1c8>
   1c428:	str	r1, [sp, #4]
   1c42c:	bl	15e58 <__assert_fail@plt+0x4c54>
   1c430:	ldr	r3, [sp, #4]
   1c434:	mov	r0, r3
   1c438:	add	sp, sp, #12
   1c43c:	pop	{pc}		; (ldr pc, [sp], #4)
   1c440:	bl	110d8 <__errno_location@plt>
   1c444:	mov	r2, #12
   1c448:	mov	r3, #0
   1c44c:	str	r2, [r0]
   1c450:	b	1c434 <__assert_fail@plt+0xb230>
   1c454:	push	{r4, r5, r6, lr}
   1c458:	mov	r4, r0
   1c45c:	bl	11024 <__fpending@plt>
   1c460:	ldr	r5, [r4]
   1c464:	and	r5, r5, #32
   1c468:	mov	r6, r0
   1c46c:	mov	r0, r4
   1c470:	bl	15d58 <__assert_fail@plt+0x4b54>
   1c474:	cmp	r5, #0
   1c478:	mov	r4, r0
   1c47c:	bne	1c49c <__assert_fail@plt+0xb298>
   1c480:	cmp	r0, #0
   1c484:	beq	1c494 <__assert_fail@plt+0xb290>
   1c488:	cmp	r6, #0
   1c48c:	beq	1c4b8 <__assert_fail@plt+0xb2b4>
   1c490:	mvn	r4, #0
   1c494:	mov	r0, r4
   1c498:	pop	{r4, r5, r6, pc}
   1c49c:	cmp	r0, #0
   1c4a0:	bne	1c490 <__assert_fail@plt+0xb28c>
   1c4a4:	bl	110d8 <__errno_location@plt>
   1c4a8:	str	r4, [r0]
   1c4ac:	mvn	r4, #0
   1c4b0:	mov	r0, r4
   1c4b4:	pop	{r4, r5, r6, pc}
   1c4b8:	bl	110d8 <__errno_location@plt>
   1c4bc:	ldr	r4, [r0]
   1c4c0:	subs	r4, r4, #9
   1c4c4:	mvnne	r4, #0
   1c4c8:	mov	r0, r4
   1c4cc:	pop	{r4, r5, r6, pc}
   1c4d0:	push	{r4, lr}
   1c4d4:	mov	r0, #14
   1c4d8:	bl	1118c <nl_langinfo@plt>
   1c4dc:	cmp	r0, #0
   1c4e0:	beq	1c4f8 <__assert_fail@plt+0xb2f4>
   1c4e4:	ldrb	r2, [r0]
   1c4e8:	ldr	r3, [pc, #16]	; 1c500 <__assert_fail@plt+0xb2fc>
   1c4ec:	cmp	r2, #0
   1c4f0:	moveq	r0, r3
   1c4f4:	pop	{r4, pc}
   1c4f8:	ldr	r0, [pc]	; 1c500 <__assert_fail@plt+0xb2fc>
   1c4fc:	pop	{r4, pc}
   1c500:	andeq	lr, r1, r0, lsl #18
   1c504:	push	{r4, r5, r6, r7, lr}
   1c508:	subs	r6, r0, #0
   1c50c:	sub	sp, sp, #12
   1c510:	addeq	r6, sp, #4
   1c514:	mov	r0, r6
   1c518:	mov	r5, r2
   1c51c:	mov	r7, r1
   1c520:	bl	11030 <mbrtowc@plt>
   1c524:	cmp	r5, #0
   1c528:	cmnne	r0, #3
   1c52c:	mov	r4, r0
   1c530:	bls	1c54c <__assert_fail@plt+0xb348>
   1c534:	mov	r0, #0
   1c538:	bl	1c5a4 <__assert_fail@plt+0xb3a0>
   1c53c:	cmp	r0, #0
   1c540:	moveq	r4, #1
   1c544:	ldrbeq	r3, [r7]
   1c548:	streq	r3, [r6]
   1c54c:	mov	r0, r4
   1c550:	add	sp, sp, #12
   1c554:	pop	{r4, r5, r6, r7, pc}
   1c558:	push	{r4, r5, r6, lr}
   1c55c:	subs	r4, r2, #0
   1c560:	mov	r6, r0
   1c564:	mov	r5, r1
   1c568:	beq	1c594 <__assert_fail@plt+0xb390>
   1c56c:	mov	r1, r4
   1c570:	mvn	r0, #0
   1c574:	bl	1c698 <__assert_fail@plt+0xb494>
   1c578:	cmp	r0, r5
   1c57c:	bcs	1c594 <__assert_fail@plt+0xb390>
   1c580:	bl	110d8 <__errno_location@plt>
   1c584:	mov	r3, #12
   1c588:	str	r3, [r0]
   1c58c:	mov	r0, #0
   1c590:	pop	{r4, r5, r6, pc}
   1c594:	mul	r1, r5, r4
   1c598:	mov	r0, r6
   1c59c:	pop	{r4, r5, r6, lr}
   1c5a0:	b	1c3f8 <__assert_fail@plt+0xb1f4>
   1c5a4:	push	{lr}		; (str lr, [sp, #-4]!)
   1c5a8:	sub	sp, sp, #268	; 0x10c
   1c5ac:	add	r1, sp, #4
   1c5b0:	ldr	r2, [pc, #60]	; 1c5f4 <__assert_fail@plt+0xb3f0>
   1c5b4:	bl	1c600 <__assert_fail@plt+0xb3fc>
   1c5b8:	cmp	r0, #0
   1c5bc:	movne	r0, #0
   1c5c0:	bne	1c5ec <__assert_fail@plt+0xb3e8>
   1c5c4:	ldr	r1, [pc, #44]	; 1c5f8 <__assert_fail@plt+0xb3f4>
   1c5c8:	add	r0, sp, #4
   1c5cc:	bl	10f34 <strcmp@plt>
   1c5d0:	cmp	r0, #0
   1c5d4:	beq	1c5ec <__assert_fail@plt+0xb3e8>
   1c5d8:	add	r0, sp, #4
   1c5dc:	ldr	r1, [pc, #24]	; 1c5fc <__assert_fail@plt+0xb3f8>
   1c5e0:	bl	10f34 <strcmp@plt>
   1c5e4:	adds	r0, r0, #0
   1c5e8:	movne	r0, #1
   1c5ec:	add	sp, sp, #268	; 0x10c
   1c5f0:	pop	{pc}		; (ldr pc, [sp], #4)
   1c5f4:	andeq	r0, r0, r1, lsl #2
   1c5f8:	andeq	lr, r1, r8, lsl #18
   1c5fc:	andeq	lr, r1, ip, lsl #18
   1c600:	push	{r4, r5, r6, lr}
   1c604:	mov	r5, r1
   1c608:	mov	r1, #0
   1c60c:	mov	r4, r2
   1c610:	bl	11174 <setlocale@plt>
   1c614:	subs	r6, r0, #0
   1c618:	beq	1c674 <__assert_fail@plt+0xb470>
   1c61c:	bl	110c0 <strlen@plt>
   1c620:	cmp	r4, r0
   1c624:	bhi	1c65c <__assert_fail@plt+0xb458>
   1c628:	cmp	r4, #0
   1c62c:	bne	1c638 <__assert_fail@plt+0xb434>
   1c630:	mov	r0, #34	; 0x22
   1c634:	pop	{r4, r5, r6, pc}
   1c638:	sub	r4, r4, #1
   1c63c:	mov	r1, r6
   1c640:	mov	r2, r4
   1c644:	mov	r0, r5
   1c648:	bl	10f70 <memcpy@plt>
   1c64c:	mov	r3, #0
   1c650:	strb	r3, [r5, r4]
   1c654:	mov	r0, #34	; 0x22
   1c658:	pop	{r4, r5, r6, pc}
   1c65c:	add	r2, r0, #1
   1c660:	mov	r1, r6
   1c664:	mov	r0, r5
   1c668:	bl	10f70 <memcpy@plt>
   1c66c:	mov	r0, #0
   1c670:	pop	{r4, r5, r6, pc}
   1c674:	cmp	r4, #0
   1c678:	beq	1c688 <__assert_fail@plt+0xb484>
   1c67c:	strb	r6, [r5]
   1c680:	mov	r0, #22
   1c684:	pop	{r4, r5, r6, pc}
   1c688:	mov	r0, #22
   1c68c:	pop	{r4, r5, r6, pc}
   1c690:	mov	r1, #0
   1c694:	b	11174 <setlocale@plt>
   1c698:	subs	r2, r1, #1
   1c69c:	bxeq	lr
   1c6a0:	bcc	1c878 <__assert_fail@plt+0xb674>
   1c6a4:	cmp	r0, r1
   1c6a8:	bls	1c85c <__assert_fail@plt+0xb658>
   1c6ac:	tst	r1, r2
   1c6b0:	beq	1c868 <__assert_fail@plt+0xb664>
   1c6b4:	clz	r3, r0
   1c6b8:	clz	r2, r1
   1c6bc:	sub	r3, r2, r3
   1c6c0:	rsbs	r3, r3, #31
   1c6c4:	addne	r3, r3, r3, lsl #1
   1c6c8:	mov	r2, #0
   1c6cc:	addne	pc, pc, r3, lsl #2
   1c6d0:	nop			; (mov r0, r0)
   1c6d4:	cmp	r0, r1, lsl #31
   1c6d8:	adc	r2, r2, r2
   1c6dc:	subcs	r0, r0, r1, lsl #31
   1c6e0:	cmp	r0, r1, lsl #30
   1c6e4:	adc	r2, r2, r2
   1c6e8:	subcs	r0, r0, r1, lsl #30
   1c6ec:	cmp	r0, r1, lsl #29
   1c6f0:	adc	r2, r2, r2
   1c6f4:	subcs	r0, r0, r1, lsl #29
   1c6f8:	cmp	r0, r1, lsl #28
   1c6fc:	adc	r2, r2, r2
   1c700:	subcs	r0, r0, r1, lsl #28
   1c704:	cmp	r0, r1, lsl #27
   1c708:	adc	r2, r2, r2
   1c70c:	subcs	r0, r0, r1, lsl #27
   1c710:	cmp	r0, r1, lsl #26
   1c714:	adc	r2, r2, r2
   1c718:	subcs	r0, r0, r1, lsl #26
   1c71c:	cmp	r0, r1, lsl #25
   1c720:	adc	r2, r2, r2
   1c724:	subcs	r0, r0, r1, lsl #25
   1c728:	cmp	r0, r1, lsl #24
   1c72c:	adc	r2, r2, r2
   1c730:	subcs	r0, r0, r1, lsl #24
   1c734:	cmp	r0, r1, lsl #23
   1c738:	adc	r2, r2, r2
   1c73c:	subcs	r0, r0, r1, lsl #23
   1c740:	cmp	r0, r1, lsl #22
   1c744:	adc	r2, r2, r2
   1c748:	subcs	r0, r0, r1, lsl #22
   1c74c:	cmp	r0, r1, lsl #21
   1c750:	adc	r2, r2, r2
   1c754:	subcs	r0, r0, r1, lsl #21
   1c758:	cmp	r0, r1, lsl #20
   1c75c:	adc	r2, r2, r2
   1c760:	subcs	r0, r0, r1, lsl #20
   1c764:	cmp	r0, r1, lsl #19
   1c768:	adc	r2, r2, r2
   1c76c:	subcs	r0, r0, r1, lsl #19
   1c770:	cmp	r0, r1, lsl #18
   1c774:	adc	r2, r2, r2
   1c778:	subcs	r0, r0, r1, lsl #18
   1c77c:	cmp	r0, r1, lsl #17
   1c780:	adc	r2, r2, r2
   1c784:	subcs	r0, r0, r1, lsl #17
   1c788:	cmp	r0, r1, lsl #16
   1c78c:	adc	r2, r2, r2
   1c790:	subcs	r0, r0, r1, lsl #16
   1c794:	cmp	r0, r1, lsl #15
   1c798:	adc	r2, r2, r2
   1c79c:	subcs	r0, r0, r1, lsl #15
   1c7a0:	cmp	r0, r1, lsl #14
   1c7a4:	adc	r2, r2, r2
   1c7a8:	subcs	r0, r0, r1, lsl #14
   1c7ac:	cmp	r0, r1, lsl #13
   1c7b0:	adc	r2, r2, r2
   1c7b4:	subcs	r0, r0, r1, lsl #13
   1c7b8:	cmp	r0, r1, lsl #12
   1c7bc:	adc	r2, r2, r2
   1c7c0:	subcs	r0, r0, r1, lsl #12
   1c7c4:	cmp	r0, r1, lsl #11
   1c7c8:	adc	r2, r2, r2
   1c7cc:	subcs	r0, r0, r1, lsl #11
   1c7d0:	cmp	r0, r1, lsl #10
   1c7d4:	adc	r2, r2, r2
   1c7d8:	subcs	r0, r0, r1, lsl #10
   1c7dc:	cmp	r0, r1, lsl #9
   1c7e0:	adc	r2, r2, r2
   1c7e4:	subcs	r0, r0, r1, lsl #9
   1c7e8:	cmp	r0, r1, lsl #8
   1c7ec:	adc	r2, r2, r2
   1c7f0:	subcs	r0, r0, r1, lsl #8
   1c7f4:	cmp	r0, r1, lsl #7
   1c7f8:	adc	r2, r2, r2
   1c7fc:	subcs	r0, r0, r1, lsl #7
   1c800:	cmp	r0, r1, lsl #6
   1c804:	adc	r2, r2, r2
   1c808:	subcs	r0, r0, r1, lsl #6
   1c80c:	cmp	r0, r1, lsl #5
   1c810:	adc	r2, r2, r2
   1c814:	subcs	r0, r0, r1, lsl #5
   1c818:	cmp	r0, r1, lsl #4
   1c81c:	adc	r2, r2, r2
   1c820:	subcs	r0, r0, r1, lsl #4
   1c824:	cmp	r0, r1, lsl #3
   1c828:	adc	r2, r2, r2
   1c82c:	subcs	r0, r0, r1, lsl #3
   1c830:	cmp	r0, r1, lsl #2
   1c834:	adc	r2, r2, r2
   1c838:	subcs	r0, r0, r1, lsl #2
   1c83c:	cmp	r0, r1, lsl #1
   1c840:	adc	r2, r2, r2
   1c844:	subcs	r0, r0, r1, lsl #1
   1c848:	cmp	r0, r1
   1c84c:	adc	r2, r2, r2
   1c850:	subcs	r0, r0, r1
   1c854:	mov	r0, r2
   1c858:	bx	lr
   1c85c:	moveq	r0, #1
   1c860:	movne	r0, #0
   1c864:	bx	lr
   1c868:	clz	r2, r1
   1c86c:	rsb	r2, r2, #31
   1c870:	lsr	r0, r0, r2
   1c874:	bx	lr
   1c878:	cmp	r0, #0
   1c87c:	mvnne	r0, #0
   1c880:	b	1cb20 <__assert_fail@plt+0xb91c>
   1c884:	cmp	r1, #0
   1c888:	beq	1c878 <__assert_fail@plt+0xb674>
   1c88c:	push	{r0, r1, lr}
   1c890:	bl	1c698 <__assert_fail@plt+0xb494>
   1c894:	pop	{r1, r2, lr}
   1c898:	mul	r3, r2, r0
   1c89c:	sub	r1, r1, r3
   1c8a0:	bx	lr
   1c8a4:	cmp	r1, #0
   1c8a8:	beq	1cab4 <__assert_fail@plt+0xb8b0>
   1c8ac:	eor	ip, r0, r1
   1c8b0:	rsbmi	r1, r1, #0
   1c8b4:	subs	r2, r1, #1
   1c8b8:	beq	1ca80 <__assert_fail@plt+0xb87c>
   1c8bc:	movs	r3, r0
   1c8c0:	rsbmi	r3, r0, #0
   1c8c4:	cmp	r3, r1
   1c8c8:	bls	1ca8c <__assert_fail@plt+0xb888>
   1c8cc:	tst	r1, r2
   1c8d0:	beq	1ca9c <__assert_fail@plt+0xb898>
   1c8d4:	clz	r2, r3
   1c8d8:	clz	r0, r1
   1c8dc:	sub	r2, r0, r2
   1c8e0:	rsbs	r2, r2, #31
   1c8e4:	addne	r2, r2, r2, lsl #1
   1c8e8:	mov	r0, #0
   1c8ec:	addne	pc, pc, r2, lsl #2
   1c8f0:	nop			; (mov r0, r0)
   1c8f4:	cmp	r3, r1, lsl #31
   1c8f8:	adc	r0, r0, r0
   1c8fc:	subcs	r3, r3, r1, lsl #31
   1c900:	cmp	r3, r1, lsl #30
   1c904:	adc	r0, r0, r0
   1c908:	subcs	r3, r3, r1, lsl #30
   1c90c:	cmp	r3, r1, lsl #29
   1c910:	adc	r0, r0, r0
   1c914:	subcs	r3, r3, r1, lsl #29
   1c918:	cmp	r3, r1, lsl #28
   1c91c:	adc	r0, r0, r0
   1c920:	subcs	r3, r3, r1, lsl #28
   1c924:	cmp	r3, r1, lsl #27
   1c928:	adc	r0, r0, r0
   1c92c:	subcs	r3, r3, r1, lsl #27
   1c930:	cmp	r3, r1, lsl #26
   1c934:	adc	r0, r0, r0
   1c938:	subcs	r3, r3, r1, lsl #26
   1c93c:	cmp	r3, r1, lsl #25
   1c940:	adc	r0, r0, r0
   1c944:	subcs	r3, r3, r1, lsl #25
   1c948:	cmp	r3, r1, lsl #24
   1c94c:	adc	r0, r0, r0
   1c950:	subcs	r3, r3, r1, lsl #24
   1c954:	cmp	r3, r1, lsl #23
   1c958:	adc	r0, r0, r0
   1c95c:	subcs	r3, r3, r1, lsl #23
   1c960:	cmp	r3, r1, lsl #22
   1c964:	adc	r0, r0, r0
   1c968:	subcs	r3, r3, r1, lsl #22
   1c96c:	cmp	r3, r1, lsl #21
   1c970:	adc	r0, r0, r0
   1c974:	subcs	r3, r3, r1, lsl #21
   1c978:	cmp	r3, r1, lsl #20
   1c97c:	adc	r0, r0, r0
   1c980:	subcs	r3, r3, r1, lsl #20
   1c984:	cmp	r3, r1, lsl #19
   1c988:	adc	r0, r0, r0
   1c98c:	subcs	r3, r3, r1, lsl #19
   1c990:	cmp	r3, r1, lsl #18
   1c994:	adc	r0, r0, r0
   1c998:	subcs	r3, r3, r1, lsl #18
   1c99c:	cmp	r3, r1, lsl #17
   1c9a0:	adc	r0, r0, r0
   1c9a4:	subcs	r3, r3, r1, lsl #17
   1c9a8:	cmp	r3, r1, lsl #16
   1c9ac:	adc	r0, r0, r0
   1c9b0:	subcs	r3, r3, r1, lsl #16
   1c9b4:	cmp	r3, r1, lsl #15
   1c9b8:	adc	r0, r0, r0
   1c9bc:	subcs	r3, r3, r1, lsl #15
   1c9c0:	cmp	r3, r1, lsl #14
   1c9c4:	adc	r0, r0, r0
   1c9c8:	subcs	r3, r3, r1, lsl #14
   1c9cc:	cmp	r3, r1, lsl #13
   1c9d0:	adc	r0, r0, r0
   1c9d4:	subcs	r3, r3, r1, lsl #13
   1c9d8:	cmp	r3, r1, lsl #12
   1c9dc:	adc	r0, r0, r0
   1c9e0:	subcs	r3, r3, r1, lsl #12
   1c9e4:	cmp	r3, r1, lsl #11
   1c9e8:	adc	r0, r0, r0
   1c9ec:	subcs	r3, r3, r1, lsl #11
   1c9f0:	cmp	r3, r1, lsl #10
   1c9f4:	adc	r0, r0, r0
   1c9f8:	subcs	r3, r3, r1, lsl #10
   1c9fc:	cmp	r3, r1, lsl #9
   1ca00:	adc	r0, r0, r0
   1ca04:	subcs	r3, r3, r1, lsl #9
   1ca08:	cmp	r3, r1, lsl #8
   1ca0c:	adc	r0, r0, r0
   1ca10:	subcs	r3, r3, r1, lsl #8
   1ca14:	cmp	r3, r1, lsl #7
   1ca18:	adc	r0, r0, r0
   1ca1c:	subcs	r3, r3, r1, lsl #7
   1ca20:	cmp	r3, r1, lsl #6
   1ca24:	adc	r0, r0, r0
   1ca28:	subcs	r3, r3, r1, lsl #6
   1ca2c:	cmp	r3, r1, lsl #5
   1ca30:	adc	r0, r0, r0
   1ca34:	subcs	r3, r3, r1, lsl #5
   1ca38:	cmp	r3, r1, lsl #4
   1ca3c:	adc	r0, r0, r0
   1ca40:	subcs	r3, r3, r1, lsl #4
   1ca44:	cmp	r3, r1, lsl #3
   1ca48:	adc	r0, r0, r0
   1ca4c:	subcs	r3, r3, r1, lsl #3
   1ca50:	cmp	r3, r1, lsl #2
   1ca54:	adc	r0, r0, r0
   1ca58:	subcs	r3, r3, r1, lsl #2
   1ca5c:	cmp	r3, r1, lsl #1
   1ca60:	adc	r0, r0, r0
   1ca64:	subcs	r3, r3, r1, lsl #1
   1ca68:	cmp	r3, r1
   1ca6c:	adc	r0, r0, r0
   1ca70:	subcs	r3, r3, r1
   1ca74:	cmp	ip, #0
   1ca78:	rsbmi	r0, r0, #0
   1ca7c:	bx	lr
   1ca80:	teq	ip, r0
   1ca84:	rsbmi	r0, r0, #0
   1ca88:	bx	lr
   1ca8c:	movcc	r0, #0
   1ca90:	asreq	r0, ip, #31
   1ca94:	orreq	r0, r0, #1
   1ca98:	bx	lr
   1ca9c:	clz	r2, r1
   1caa0:	rsb	r2, r2, #31
   1caa4:	cmp	ip, #0
   1caa8:	lsr	r0, r3, r2
   1caac:	rsbmi	r0, r0, #0
   1cab0:	bx	lr
   1cab4:	cmp	r0, #0
   1cab8:	mvngt	r0, #-2147483648	; 0x80000000
   1cabc:	movlt	r0, #-2147483648	; 0x80000000
   1cac0:	b	1cb20 <__assert_fail@plt+0xb91c>
   1cac4:	cmp	r1, #0
   1cac8:	beq	1cab4 <__assert_fail@plt+0xb8b0>
   1cacc:	push	{r0, r1, lr}
   1cad0:	bl	1c8ac <__assert_fail@plt+0xb6a8>
   1cad4:	pop	{r1, r2, lr}
   1cad8:	mul	r3, r2, r0
   1cadc:	sub	r1, r1, r3
   1cae0:	bx	lr
   1cae4:	cmp	r3, #0
   1cae8:	cmpeq	r2, #0
   1caec:	bne	1cb04 <__assert_fail@plt+0xb900>
   1caf0:	cmp	r1, #0
   1caf4:	cmpeq	r0, #0
   1caf8:	mvnne	r1, #0
   1cafc:	mvnne	r0, #0
   1cb00:	b	1cb20 <__assert_fail@plt+0xb91c>
   1cb04:	sub	sp, sp, #8
   1cb08:	push	{sp, lr}
   1cb0c:	bl	1cb30 <__assert_fail@plt+0xb92c>
   1cb10:	ldr	lr, [sp, #4]
   1cb14:	add	sp, sp, #8
   1cb18:	pop	{r2, r3}
   1cb1c:	bx	lr
   1cb20:	push	{r1, lr}
   1cb24:	mov	r0, #8
   1cb28:	bl	10f28 <raise@plt>
   1cb2c:	pop	{r1, pc}
   1cb30:	cmp	r1, r3
   1cb34:	push	{r4, r5, r6, r7, r8, r9, lr}
   1cb38:	cmpeq	r0, r2
   1cb3c:	mov	r4, r0
   1cb40:	mov	r5, r1
   1cb44:	ldr	r9, [sp, #28]
   1cb48:	movcc	r0, #0
   1cb4c:	movcc	r1, #0
   1cb50:	bcc	1cc48 <__assert_fail@plt+0xba44>
   1cb54:	cmp	r3, #0
   1cb58:	clzeq	ip, r2
   1cb5c:	clzne	ip, r3
   1cb60:	addeq	ip, ip, #32
   1cb64:	cmp	r5, #0
   1cb68:	clzeq	r1, r4
   1cb6c:	addeq	r1, r1, #32
   1cb70:	clzne	r1, r5
   1cb74:	sub	ip, ip, r1
   1cb78:	sub	lr, ip, #32
   1cb7c:	lsl	r7, r3, ip
   1cb80:	rsb	r8, ip, #32
   1cb84:	orr	r7, r7, r2, lsl lr
   1cb88:	orr	r7, r7, r2, lsr r8
   1cb8c:	lsl	r6, r2, ip
   1cb90:	cmp	r5, r7
   1cb94:	cmpeq	r4, r6
   1cb98:	movcc	r0, #0
   1cb9c:	movcc	r1, #0
   1cba0:	bcc	1cbbc <__assert_fail@plt+0xb9b8>
   1cba4:	mov	r3, #1
   1cba8:	subs	r4, r4, r6
   1cbac:	lsl	r1, r3, lr
   1cbb0:	lsl	r0, r3, ip
   1cbb4:	orr	r1, r1, r3, lsr r8
   1cbb8:	sbc	r5, r5, r7
   1cbbc:	cmp	ip, #0
   1cbc0:	beq	1cc48 <__assert_fail@plt+0xba44>
   1cbc4:	lsrs	r3, r7, #1
   1cbc8:	rrx	r2, r6
   1cbcc:	mov	r6, ip
   1cbd0:	b	1cbf4 <__assert_fail@plt+0xb9f0>
   1cbd4:	subs	r4, r4, r2
   1cbd8:	sbc	r5, r5, r3
   1cbdc:	adds	r4, r4, r4
   1cbe0:	adc	r5, r5, r5
   1cbe4:	adds	r4, r4, #1
   1cbe8:	adc	r5, r5, #0
   1cbec:	subs	r6, r6, #1
   1cbf0:	beq	1cc10 <__assert_fail@plt+0xba0c>
   1cbf4:	cmp	r5, r3
   1cbf8:	cmpeq	r4, r2
   1cbfc:	bcs	1cbd4 <__assert_fail@plt+0xb9d0>
   1cc00:	adds	r4, r4, r4
   1cc04:	adc	r5, r5, r5
   1cc08:	subs	r6, r6, #1
   1cc0c:	bne	1cbf4 <__assert_fail@plt+0xb9f0>
   1cc10:	lsr	r6, r4, ip
   1cc14:	lsr	r7, r5, ip
   1cc18:	orr	r6, r6, r5, lsl r8
   1cc1c:	adds	r2, r0, r4
   1cc20:	orr	r6, r6, r5, lsr lr
   1cc24:	adc	r3, r1, r5
   1cc28:	lsl	r1, r7, ip
   1cc2c:	orr	r1, r1, r6, lsl lr
   1cc30:	lsl	r0, r6, ip
   1cc34:	orr	r1, r1, r6, lsr r8
   1cc38:	subs	r0, r2, r0
   1cc3c:	mov	r4, r6
   1cc40:	mov	r5, r7
   1cc44:	sbc	r1, r3, r1
   1cc48:	cmp	r9, #0
   1cc4c:	popeq	{r4, r5, r6, r7, r8, r9, pc}
   1cc50:	strd	r4, [r9]
   1cc54:	pop	{r4, r5, r6, r7, r8, r9, pc}
   1cc58:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1cc5c:	mov	r7, r0
   1cc60:	ldr	r6, [pc, #72]	; 1ccb0 <__assert_fail@plt+0xbaac>
   1cc64:	ldr	r5, [pc, #72]	; 1ccb4 <__assert_fail@plt+0xbab0>
   1cc68:	add	r6, pc, r6
   1cc6c:	add	r5, pc, r5
   1cc70:	sub	r6, r6, r5
   1cc74:	mov	r8, r1
   1cc78:	mov	r9, r2
   1cc7c:	bl	10ef0 <calloc@plt-0x20>
   1cc80:	asrs	r6, r6, #2
   1cc84:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   1cc88:	mov	r4, #0
   1cc8c:	add	r4, r4, #1
   1cc90:	ldr	r3, [r5], #4
   1cc94:	mov	r2, r9
   1cc98:	mov	r1, r8
   1cc9c:	mov	r0, r7
   1cca0:	blx	r3
   1cca4:	cmp	r6, r4
   1cca8:	bne	1cc8c <__assert_fail@plt+0xba88>
   1ccac:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1ccb0:	andeq	r2, r1, r0, lsr #5
   1ccb4:	muleq	r1, r8, r2
   1ccb8:	bx	lr
   1ccbc:	ldr	r3, [pc, #12]	; 1ccd0 <__assert_fail@plt+0xbacc>
   1ccc0:	mov	r1, #0
   1ccc4:	add	r3, pc, r3
   1ccc8:	ldr	r2, [r3]
   1cccc:	b	110f0 <__cxa_atexit@plt>
   1ccd0:	andeq	r2, r1, r8, asr #8

Disassembly of section .fini:

0001ccd4 <.fini>:
   1ccd4:	push	{r3, lr}
   1ccd8:	pop	{r3, pc}
