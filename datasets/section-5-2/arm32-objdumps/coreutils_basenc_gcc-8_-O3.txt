
../repos/coreutils/src/basenc:     file format elf32-littlearm


Disassembly of section .init:

00010ca0 <.init>:
   10ca0:	push	{r3, lr}
   10ca4:	bl	11968 <__assert_fail@plt+0xa38>
   10ca8:	pop	{r3, pc}

Disassembly of section .plt:

00010cac <calloc@plt-0x14>:
   10cac:	push	{lr}		; (str lr, [sp, #-4]!)
   10cb0:	ldr	lr, [pc, #4]	; 10cbc <calloc@plt-0x4>
   10cb4:	add	lr, pc, lr
   10cb8:	ldr	pc, [lr, #8]!
   10cbc:	andeq	fp, r1, r4, asr #6

00010cc0 <calloc@plt>:
   10cc0:	add	ip, pc, #0, 12
   10cc4:	add	ip, ip, #110592	; 0x1b000
   10cc8:	ldr	pc, [ip, #836]!	; 0x344

00010ccc <fputs_unlocked@plt>:
   10ccc:	add	ip, pc, #0, 12
   10cd0:	add	ip, ip, #110592	; 0x1b000
   10cd4:	ldr	pc, [ip, #828]!	; 0x33c

00010cd8 <raise@plt>:
   10cd8:	add	ip, pc, #0, 12
   10cdc:	add	ip, ip, #110592	; 0x1b000
   10ce0:	ldr	pc, [ip, #820]!	; 0x334

00010ce4 <strcmp@plt>:
   10ce4:	add	ip, pc, #0, 12
   10ce8:	add	ip, ip, #110592	; 0x1b000
   10cec:	ldr	pc, [ip, #812]!	; 0x32c

00010cf0 <posix_fadvise64@plt>:
   10cf0:	add	ip, pc, #0, 12
   10cf4:	add	ip, ip, #110592	; 0x1b000
   10cf8:	ldr	pc, [ip, #804]!	; 0x324

00010cfc <fflush@plt>:
   10cfc:	add	ip, pc, #0, 12
   10d00:	add	ip, ip, #110592	; 0x1b000
   10d04:	ldr	pc, [ip, #796]!	; 0x31c

00010d08 <memmove@plt>:
   10d08:	add	ip, pc, #0, 12
   10d0c:	add	ip, ip, #110592	; 0x1b000
   10d10:	ldr	pc, [ip, #788]!	; 0x314

00010d14 <free@plt>:
   10d14:	add	ip, pc, #0, 12
   10d18:	add	ip, ip, #110592	; 0x1b000
   10d1c:	ldr	pc, [ip, #780]!	; 0x30c

00010d20 <_exit@plt>:
   10d20:	add	ip, pc, #0, 12
   10d24:	add	ip, ip, #110592	; 0x1b000
   10d28:	ldr	pc, [ip, #772]!	; 0x304

00010d2c <memcpy@plt>:
   10d2c:	add	ip, pc, #0, 12
   10d30:	add	ip, ip, #110592	; 0x1b000
   10d34:	ldr	pc, [ip, #764]!	; 0x2fc

00010d38 <mbsinit@plt>:
   10d38:	add	ip, pc, #0, 12
   10d3c:	add	ip, ip, #110592	; 0x1b000
   10d40:	ldr	pc, [ip, #756]!	; 0x2f4

00010d44 <fwrite_unlocked@plt>:
   10d44:	add	ip, pc, #0, 12
   10d48:	add	ip, ip, #110592	; 0x1b000
   10d4c:	ldr	pc, [ip, #748]!	; 0x2ec

00010d50 <memcmp@plt>:
   10d50:	add	ip, pc, #0, 12
   10d54:	add	ip, ip, #110592	; 0x1b000
   10d58:	ldr	pc, [ip, #740]!	; 0x2e4

00010d5c <fputc_unlocked@plt>:
   10d5c:	add	ip, pc, #0, 12
   10d60:	add	ip, ip, #110592	; 0x1b000
   10d64:	ldr	pc, [ip, #732]!	; 0x2dc

00010d68 <dcgettext@plt>:
   10d68:	add	ip, pc, #0, 12
   10d6c:	add	ip, ip, #110592	; 0x1b000
   10d70:	ldr	pc, [ip, #724]!	; 0x2d4

00010d74 <realloc@plt>:
   10d74:	add	ip, pc, #0, 12
   10d78:	add	ip, ip, #110592	; 0x1b000
   10d7c:	ldr	pc, [ip, #716]!	; 0x2cc

00010d80 <textdomain@plt>:
   10d80:	add	ip, pc, #0, 12
   10d84:	add	ip, ip, #110592	; 0x1b000
   10d88:	ldr	pc, [ip, #708]!	; 0x2c4

00010d8c <iswprint@plt>:
   10d8c:	add	ip, pc, #0, 12
   10d90:	add	ip, ip, #110592	; 0x1b000
   10d94:	ldr	pc, [ip, #700]!	; 0x2bc

00010d98 <fwrite@plt>:
   10d98:	add	ip, pc, #0, 12
   10d9c:	add	ip, ip, #110592	; 0x1b000
   10da0:	ldr	pc, [ip, #692]!	; 0x2b4

00010da4 <lseek64@plt>:
   10da4:	add	ip, pc, #0, 12
   10da8:	add	ip, ip, #110592	; 0x1b000
   10dac:	ldr	pc, [ip, #684]!	; 0x2ac

00010db0 <__ctype_get_mb_cur_max@plt>:
   10db0:	add	ip, pc, #0, 12
   10db4:	add	ip, ip, #110592	; 0x1b000
   10db8:	ldr	pc, [ip, #676]!	; 0x2a4

00010dbc <__fpending@plt>:
   10dbc:	add	ip, pc, #0, 12
   10dc0:	add	ip, ip, #110592	; 0x1b000
   10dc4:	ldr	pc, [ip, #668]!	; 0x29c

00010dc8 <mbrtowc@plt>:
   10dc8:	add	ip, pc, #0, 12
   10dcc:	add	ip, ip, #110592	; 0x1b000
   10dd0:	ldr	pc, [ip, #660]!	; 0x294

00010dd4 <error@plt>:
   10dd4:	add	ip, pc, #0, 12
   10dd8:	add	ip, ip, #110592	; 0x1b000
   10ddc:	ldr	pc, [ip, #652]!	; 0x28c

00010de0 <malloc@plt>:
   10de0:	add	ip, pc, #0, 12
   10de4:	add	ip, ip, #110592	; 0x1b000
   10de8:	ldr	pc, [ip, #644]!	; 0x284

00010dec <__libc_start_main@plt>:
   10dec:	add	ip, pc, #0, 12
   10df0:	add	ip, ip, #110592	; 0x1b000
   10df4:	ldr	pc, [ip, #636]!	; 0x27c

00010df8 <__freading@plt>:
   10df8:	add	ip, pc, #0, 12
   10dfc:	add	ip, ip, #110592	; 0x1b000
   10e00:	ldr	pc, [ip, #628]!	; 0x274

00010e04 <__gmon_start__@plt>:
   10e04:	add	ip, pc, #0, 12
   10e08:	add	ip, ip, #110592	; 0x1b000
   10e0c:	ldr	pc, [ip, #620]!	; 0x26c

00010e10 <getopt_long@plt>:
   10e10:	add	ip, pc, #0, 12
   10e14:	add	ip, ip, #110592	; 0x1b000
   10e18:	ldr	pc, [ip, #612]!	; 0x264

00010e1c <__ctype_b_loc@plt>:
   10e1c:	add	ip, pc, #0, 12
   10e20:	add	ip, ip, #110592	; 0x1b000
   10e24:	ldr	pc, [ip, #604]!	; 0x25c

00010e28 <exit@plt>:
   10e28:	add	ip, pc, #0, 12
   10e2c:	add	ip, ip, #110592	; 0x1b000
   10e30:	ldr	pc, [ip, #596]!	; 0x254

00010e34 <strlen@plt>:
   10e34:	add	ip, pc, #0, 12
   10e38:	add	ip, ip, #110592	; 0x1b000
   10e3c:	ldr	pc, [ip, #588]!	; 0x24c

00010e40 <strchr@plt>:
   10e40:	add	ip, pc, #0, 12
   10e44:	add	ip, ip, #110592	; 0x1b000
   10e48:	ldr	pc, [ip, #580]!	; 0x244

00010e4c <__errno_location@plt>:
   10e4c:	add	ip, pc, #0, 12
   10e50:	add	ip, ip, #110592	; 0x1b000
   10e54:	ldr	pc, [ip, #572]!	; 0x23c

00010e58 <__cxa_atexit@plt>:
   10e58:	add	ip, pc, #0, 12
   10e5c:	add	ip, ip, #110592	; 0x1b000
   10e60:	ldr	pc, [ip, #564]!	; 0x234

00010e64 <memset@plt>:
   10e64:	add	ip, pc, #0, 12
   10e68:	add	ip, ip, #110592	; 0x1b000
   10e6c:	ldr	pc, [ip, #556]!	; 0x22c

00010e70 <__printf_chk@plt>:
   10e70:	add	ip, pc, #0, 12
   10e74:	add	ip, ip, #110592	; 0x1b000
   10e78:	ldr	pc, [ip, #548]!	; 0x224

00010e7c <fileno@plt>:
   10e7c:	add	ip, pc, #0, 12
   10e80:	add	ip, ip, #110592	; 0x1b000
   10e84:	ldr	pc, [ip, #540]!	; 0x21c

00010e88 <__fprintf_chk@plt>:
   10e88:	add	ip, pc, #0, 12
   10e8c:	add	ip, ip, #110592	; 0x1b000
   10e90:	ldr	pc, [ip, #532]!	; 0x214

00010e94 <memchr@plt>:
   10e94:	add	ip, pc, #0, 12
   10e98:	add	ip, ip, #110592	; 0x1b000
   10e9c:	ldr	pc, [ip, #524]!	; 0x20c

00010ea0 <fclose@plt>:
   10ea0:	add	ip, pc, #0, 12
   10ea4:	add	ip, ip, #110592	; 0x1b000
   10ea8:	ldr	pc, [ip, #516]!	; 0x204

00010eac <fseeko64@plt>:
   10eac:	add	ip, pc, #0, 12
   10eb0:	add	ip, ip, #110592	; 0x1b000
   10eb4:	ldr	pc, [ip, #508]!	; 0x1fc

00010eb8 <__overflow@plt>:
   10eb8:	add	ip, pc, #0, 12
   10ebc:	add	ip, ip, #110592	; 0x1b000
   10ec0:	ldr	pc, [ip, #500]!	; 0x1f4

00010ec4 <setlocale@plt>:
   10ec4:	add	ip, pc, #0, 12
   10ec8:	add	ip, ip, #110592	; 0x1b000
   10ecc:	ldr	pc, [ip, #492]!	; 0x1ec

00010ed0 <strrchr@plt>:
   10ed0:	add	ip, pc, #0, 12
   10ed4:	add	ip, ip, #110592	; 0x1b000
   10ed8:	ldr	pc, [ip, #484]!	; 0x1e4

00010edc <nl_langinfo@plt>:
   10edc:	add	ip, pc, #0, 12
   10ee0:	add	ip, ip, #110592	; 0x1b000
   10ee4:	ldr	pc, [ip, #476]!	; 0x1dc

00010ee8 <__strtoll_internal@plt>:
   10ee8:	add	ip, pc, #0, 12
   10eec:	add	ip, ip, #110592	; 0x1b000
   10ef0:	ldr	pc, [ip, #468]!	; 0x1d4

00010ef4 <fopen64@plt>:
   10ef4:	add	ip, pc, #0, 12
   10ef8:	add	ip, ip, #110592	; 0x1b000
   10efc:	ldr	pc, [ip, #460]!	; 0x1cc

00010f00 <bindtextdomain@plt>:
   10f00:	add	ip, pc, #0, 12
   10f04:	add	ip, ip, #110592	; 0x1b000
   10f08:	ldr	pc, [ip, #452]!	; 0x1c4

00010f0c <fread_unlocked@plt>:
   10f0c:	add	ip, pc, #0, 12
   10f10:	add	ip, ip, #110592	; 0x1b000
   10f14:	ldr	pc, [ip, #444]!	; 0x1bc

00010f18 <strncmp@plt>:
   10f18:	add	ip, pc, #0, 12
   10f1c:	add	ip, ip, #110592	; 0x1b000
   10f20:	ldr	pc, [ip, #436]!	; 0x1b4

00010f24 <abort@plt>:
   10f24:	add	ip, pc, #0, 12
   10f28:	add	ip, ip, #110592	; 0x1b000
   10f2c:	ldr	pc, [ip, #428]!	; 0x1ac

00010f30 <__assert_fail@plt>:
   10f30:	add	ip, pc, #0, 12
   10f34:	add	ip, ip, #110592	; 0x1b000
   10f38:	ldr	pc, [ip, #420]!	; 0x1a4

Disassembly of section .text:

00010f40 <.text>:
   10f40:	strd	r4, [sp, #-36]!	; 0xffffffdc
   10f44:	mov	r4, #0
   10f48:	strd	r6, [sp, #8]
   10f4c:	mov	r7, r1
   10f50:	movw	r6, #43920	; 0xab90
   10f54:	movt	r6, #1
   10f58:	strd	r8, [sp, #16]
   10f5c:	mov	r9, r0
   10f60:	strd	sl, [sp, #24]
   10f64:	mov	r8, r4
   10f68:	movw	sl, #49496	; 0xc158
   10f6c:	movt	sl, #2
   10f70:	str	lr, [sp, #32]
   10f74:	sub	sp, sp, #84	; 0x54
   10f78:	ldr	r0, [r1]
   10f7c:	str	r4, [sp, #16]
   10f80:	bl	14240 <__assert_fail@plt+0x3310>
   10f84:	movw	r1, #43340	; 0xa94c
   10f88:	movt	r1, #1
   10f8c:	ldr	fp, [pc, #2452]	; 11928 <__assert_fail@plt+0x9f8>
   10f90:	mov	r0, #6
   10f94:	bl	10ec4 <setlocale@plt>
   10f98:	movw	r1, #43836	; 0xab3c
   10f9c:	movt	r1, #1
   10fa0:	movw	r0, #43668	; 0xaa94
   10fa4:	movt	r0, #1
   10fa8:	bl	10f00 <bindtextdomain@plt>
   10fac:	movw	r0, #43668	; 0xaa94
   10fb0:	movt	r0, #1
   10fb4:	bl	10d80 <textdomain@plt>
   10fb8:	movw	r0, #16060	; 0x3ebc
   10fbc:	movt	r0, #1
   10fc0:	bl	1a130 <__assert_fail@plt+0x9200>
   10fc4:	mov	r3, #76	; 0x4c
   10fc8:	str	r3, [sp, #20]
   10fcc:	mov	r5, #0
   10fd0:	mov	r3, fp
   10fd4:	mov	r2, r6
   10fd8:	mov	r1, r7
   10fdc:	mov	r0, r9
   10fe0:	str	r5, [sp]
   10fe4:	bl	10e10 <getopt_long@plt>
   10fe8:	cmn	r0, #1
   10fec:	beq	11118 <__assert_fail@plt+0x1e8>
   10ff0:	cmp	r0, #105	; 0x69
   10ff4:	beq	11048 <__assert_fail@plt+0x118>
   10ff8:	bgt	1101c <__assert_fail@plt+0xec>
   10ffc:	cmn	r0, #2
   11000:	beq	11110 <__assert_fail@plt+0x1e0>
   11004:	cmp	r0, #100	; 0x64
   11008:	beq	1103c <__assert_fail@plt+0x10c>
   1100c:	cmn	r0, #3
   11010:	beq	110c4 <__assert_fail@plt+0x194>
   11014:	mov	r0, #1
   11018:	bl	128b0 <__assert_fail@plt+0x1980>
   1101c:	cmp	r0, #119	; 0x77
   11020:	beq	11058 <__assert_fail@plt+0x128>
   11024:	blt	11014 <__assert_fail@plt+0xe4>
   11028:	sub	r3, r0, #256	; 0x100
   1102c:	cmp	r3, #7
   11030:	bhi	11014 <__assert_fail@plt+0xe4>
   11034:	mov	r4, r0
   11038:	b	10fcc <__assert_fail@plt+0x9c>
   1103c:	mov	r0, r4
   11040:	mov	r8, #1
   11044:	b	11034 <__assert_fail@plt+0x104>
   11048:	mov	r3, #1
   1104c:	mov	r0, r4
   11050:	str	r3, [sp, #16]
   11054:	b	11034 <__assert_fail@plt+0x104>
   11058:	movw	r2, #43340	; 0xa94c
   1105c:	movt	r2, #1
   11060:	ldr	r0, [sl]
   11064:	mov	r1, r5
   11068:	add	r3, sp, #56	; 0x38
   1106c:	str	r2, [sp]
   11070:	mov	r2, #10
   11074:	bl	18a80 <__assert_fail@plt+0x7b50>
   11078:	cmp	r0, #1
   1107c:	mov	ip, r0
   11080:	bhi	11894 <__assert_fail@plt+0x964>
   11084:	ldrd	r2, [sp, #56]	; 0x38
   11088:	cmp	r2, #0
   1108c:	sbcs	r1, r3, #0
   11090:	blt	11894 <__assert_fail@plt+0x964>
   11094:	mvn	r0, #-2147483648	; 0x80000000
   11098:	mov	r1, #0
   1109c:	cmp	r0, r2
   110a0:	eor	ip, ip, #1
   110a4:	sbcs	r1, r1, r3
   110a8:	mov	r0, r4
   110ac:	movlt	ip, #0
   110b0:	andge	ip, ip, #1
   110b4:	cmp	ip, #0
   110b8:	moveq	r2, #0
   110bc:	str	r2, [sp, #20]
   110c0:	b	11034 <__assert_fail@plt+0x104>
   110c4:	movw	r1, #43888	; 0xab70
   110c8:	movt	r1, #1
   110cc:	movw	r2, #43904	; 0xab80
   110d0:	movt	r2, #1
   110d4:	movw	r3, #49388	; 0xc0ec
   110d8:	movt	r3, #2
   110dc:	movw	r0, #49492	; 0xc154
   110e0:	movt	r0, #2
   110e4:	str	r2, [sp]
   110e8:	movw	r2, #43664	; 0xaa90
   110ec:	movt	r2, #1
   110f0:	stmib	sp, {r1, r5}
   110f4:	movw	r1, #42040	; 0xa438
   110f8:	movt	r1, #1
   110fc:	ldr	r0, [r0]
   11100:	ldr	r3, [r3]
   11104:	bl	18274 <__assert_fail@plt+0x7344>
   11108:	mov	r0, r5
   1110c:	bl	10e28 <exit@plt>
   11110:	mov	r0, r5
   11114:	bl	128b0 <__assert_fail@plt+0x1980>
   11118:	sub	r4, r4, #256	; 0x100
   1111c:	cmp	r4, #7
   11120:	ldrls	pc, [pc, r4, lsl #2]
   11124:	b	11900 <__assert_fail@plt+0x9d0>
   11128:			; <UNDEFINED> instruction: 0x000114b8
   1112c:	andeq	r1, r1, r0, ror r4
   11130:	andeq	r1, r1, r8, lsr #8
   11134:	andeq	r1, r1, r0, ror #7
   11138:	muleq	r1, r8, r3
   1113c:	andeq	r1, r1, r0, asr r3
   11140:	andeq	r1, r1, r8, lsl #6
   11144:	andeq	r1, r1, r8, asr #2
   11148:	movw	r6, #49504	; 0xc160
   1114c:	movt	r6, #2
   11150:	movw	r3, #6900	; 0x1af4
   11154:	movt	r3, #1
   11158:	movw	r2, #7676	; 0x1dfc
   1115c:	movt	r2, #1
   11160:	str	r3, [r6]
   11164:	movw	r3, #9180	; 0x23dc
   11168:	movt	r3, #1
   1116c:	str	r2, [r6, #4]
   11170:	movw	r2, #7504	; 0x1d50
   11174:	movt	r2, #1
   11178:	str	r3, [r6, #8]
   1117c:	movw	r3, #8340	; 0x2094
   11180:	movt	r3, #1
   11184:	str	r2, [r6, #12]
   11188:	str	r3, [r6, #16]
   1118c:	movw	r4, #49472	; 0xc140
   11190:	movt	r4, #2
   11194:	ldr	r3, [r4]
   11198:	sub	r2, r9, r3
   1119c:	cmp	r2, #1
   111a0:	bgt	115dc <__assert_fail@plt+0x6ac>
   111a4:	cmp	r3, r9
   111a8:	bge	11620 <__assert_fail@plt+0x6f0>
   111ac:	ldr	r3, [r7, r3, lsl #2]
   111b0:	movw	r1, #41912	; 0xa3b8
   111b4:	movt	r1, #1
   111b8:	mov	r0, r3
   111bc:	str	r3, [sp, #44]	; 0x2c
   111c0:	bl	10ce4 <strcmp@plt>
   111c4:	cmp	r0, #0
   111c8:	beq	1162c <__assert_fail@plt+0x6fc>
   111cc:	movw	r1, #43972	; 0xabc4
   111d0:	movt	r1, #1
   111d4:	ldr	r0, [sp, #44]	; 0x2c
   111d8:	bl	10ef4 <fopen64@plt>
   111dc:	subs	r4, r0, #0
   111e0:	beq	118d0 <__assert_fail@plt+0x9a0>
   111e4:	mov	r1, #2
   111e8:	mov	r0, r4
   111ec:	bl	13fac <__assert_fail@plt+0x307c>
   111f0:	cmp	r8, #0
   111f4:	movw	r3, #49492	; 0xc154
   111f8:	movt	r3, #2
   111fc:	beq	1163c <__assert_fail@plt+0x70c>
   11200:	ldr	r3, [r3]
   11204:	movw	r0, #4200	; 0x1068
   11208:	ldr	r2, [r6]
   1120c:	str	r3, [sp, #20]
   11210:	blx	r2
   11214:	bl	18484 <__assert_fail@plt+0x7554>
   11218:	mov	r8, r0
   1121c:	movw	r0, #4200	; 0x1068
   11220:	bl	18484 <__assert_fail@plt+0x7554>
   11224:	mov	r2, #0
   11228:	str	r0, [sp, #24]
   1122c:	add	r0, sp, #56	; 0x38
   11230:	ldr	r3, [r6, #12]
   11234:	str	r2, [sp, #72]	; 0x48
   11238:	blx	r3
   1123c:	mov	r5, #0
   11240:	b	11274 <__assert_fail@plt+0x344>
   11244:	ldr	r3, [r4]
   11248:	add	r5, r5, r9
   1124c:	tst	r3, #32
   11250:	bne	116bc <__assert_fail@plt+0x78c>
   11254:	movw	r0, #4200	; 0x1068
   11258:	ldr	r3, [r6]
   1125c:	blx	r3
   11260:	cmp	r5, r0
   11264:	bge	11500 <__assert_fail@plt+0x5d0>
   11268:	ldr	r3, [r4]
   1126c:	tst	r3, #16
   11270:	bne	11500 <__assert_fail@plt+0x5d0>
   11274:	movw	r0, #4200	; 0x1068
   11278:	ldr	r3, [r6]
   1127c:	add	r7, r8, r5
   11280:	blx	r3
   11284:	sub	r2, r0, r5
   11288:	mov	r3, r4
   1128c:	mov	r1, #1
   11290:	mov	r0, r7
   11294:	bl	10f0c <fread_unlocked@plt>
   11298:	ldr	r3, [sp, #16]
   1129c:	mov	r9, r0
   112a0:	cmp	r3, #0
   112a4:	beq	11244 <__assert_fail@plt+0x314>
   112a8:	cmp	r0, #0
   112ac:	ble	11244 <__assert_fail@plt+0x314>
   112b0:	mov	fp, #0
   112b4:	b	112e4 <__assert_fail@plt+0x3b4>
   112b8:	ldrb	r3, [r8, r7]
   112bc:	cmp	r3, #61	; 0x3d
   112c0:	beq	11300 <__assert_fail@plt+0x3d0>
   112c4:	sub	r9, r9, #1
   112c8:	add	r1, r7, #1
   112cc:	add	r1, r8, r1
   112d0:	mov	r0, sl
   112d4:	sub	r2, r9, fp
   112d8:	bl	10d08 <memmove@plt>
   112dc:	cmp	r9, fp
   112e0:	ble	11244 <__assert_fail@plt+0x314>
   112e4:	add	r7, r5, fp
   112e8:	ldr	r3, [r6, #4]
   112ec:	add	sl, r8, r7
   112f0:	ldrb	r0, [r8, r7]
   112f4:	blx	r3
   112f8:	cmp	r0, #0
   112fc:	beq	112b8 <__assert_fail@plt+0x388>
   11300:	add	fp, fp, #1
   11304:	b	112dc <__assert_fail@plt+0x3ac>
   11308:	movw	r6, #49504	; 0xc160
   1130c:	movt	r6, #2
   11310:	movw	r3, #6944	; 0x1b20
   11314:	movt	r3, #1
   11318:	movw	r2, #6924	; 0x1b0c
   1131c:	movt	r2, #1
   11320:	str	r3, [r6]
   11324:	movw	r3, #7160	; 0x1bf8
   11328:	movt	r3, #1
   1132c:	str	r2, [r6, #4]
   11330:	movw	r2, #7560	; 0x1d88
   11334:	movt	r2, #1
   11338:	str	r3, [r6, #8]
   1133c:	movw	r3, #8736	; 0x2220
   11340:	movt	r3, #1
   11344:	str	r2, [r6, #12]
   11348:	str	r3, [r6, #16]
   1134c:	b	1118c <__assert_fail@plt+0x25c>
   11350:	movw	r6, #49504	; 0xc160
   11354:	movt	r6, #2
   11358:	movw	r3, #6944	; 0x1b20
   1135c:	movt	r3, #1
   11360:	movw	r2, #6924	; 0x1b0c
   11364:	movt	r2, #1
   11368:	str	r3, [r6]
   1136c:	movw	r3, #6952	; 0x1b28
   11370:	movt	r3, #1
   11374:	str	r2, [r6, #4]
   11378:	movw	r2, #7560	; 0x1d88
   1137c:	movt	r2, #1
   11380:	str	r3, [r6, #8]
   11384:	movw	r3, #8944	; 0x22f0
   11388:	movt	r3, #1
   1138c:	str	r2, [r6, #12]
   11390:	str	r3, [r6, #16]
   11394:	b	1118c <__assert_fail@plt+0x25c>
   11398:	movw	r6, #49504	; 0xc160
   1139c:	movt	r6, #2
   113a0:	movw	r3, #6804	; 0x1a94
   113a4:	movt	r3, #1
   113a8:	movw	r2, #6776	; 0x1a78
   113ac:	movt	r2, #1
   113b0:	str	r3, [r6]
   113b4:	movw	r3, #6812	; 0x1a9c
   113b8:	movt	r3, #1
   113bc:	str	r2, [r6, #4]
   113c0:	movw	r2, #7616	; 0x1dc0
   113c4:	movt	r2, #1
   113c8:	str	r3, [r6, #8]
   113cc:	movw	r3, #8140	; 0x1fcc
   113d0:	movt	r3, #1
   113d4:	str	r2, [r6, #12]
   113d8:	str	r3, [r6, #16]
   113dc:	b	1118c <__assert_fail@plt+0x25c>
   113e0:	movw	r6, #49504	; 0xc160
   113e4:	movt	r6, #2
   113e8:	movw	r3, #6716	; 0x1a3c
   113ec:	movt	r3, #1
   113f0:	movw	r2, #6748	; 0x1a5c
   113f4:	movt	r2, #1
   113f8:	str	r3, [r6]
   113fc:	movw	r3, #9768	; 0x2628
   11400:	movt	r3, #1
   11404:	str	r2, [r6, #4]
   11408:	movw	r2, #7824	; 0x1e90
   1140c:	movt	r2, #1
   11410:	str	r3, [r6, #8]
   11414:	movw	r3, #10184	; 0x27c8
   11418:	movt	r3, #1
   1141c:	str	r2, [r6, #12]
   11420:	str	r3, [r6, #16]
   11424:	b	1118c <__assert_fail@plt+0x25c>
   11428:	movw	r6, #49504	; 0xc160
   1142c:	movt	r6, #2
   11430:	movw	r3, #6716	; 0x1a3c
   11434:	movt	r3, #1
   11438:	movw	r2, #12236	; 0x2fcc
   1143c:	movt	r2, #1
   11440:	str	r3, [r6]
   11444:	movw	r3, #11544	; 0x2d18
   11448:	movt	r3, #1
   1144c:	str	r2, [r6, #4]
   11450:	movw	r2, #7876	; 0x1ec4
   11454:	movt	r2, #1
   11458:	str	r3, [r6, #8]
   1145c:	movw	r3, #7768	; 0x1e58
   11460:	movt	r3, #1
   11464:	str	r2, [r6, #12]
   11468:	str	r3, [r6, #16]
   1146c:	b	1118c <__assert_fail@plt+0x25c>
   11470:	movw	r6, #49504	; 0xc160
   11474:	movt	r6, #2
   11478:	movw	r3, #6688	; 0x1a20
   1147c:	movt	r3, #1
   11480:	movw	r2, #7360	; 0x1cc0
   11484:	movt	r2, #1
   11488:	str	r3, [r6]
   1148c:	movw	r3, #7404	; 0x1cec
   11490:	movt	r3, #1
   11494:	str	r2, [r6, #4]
   11498:	movw	r2, #7940	; 0x1f04
   1149c:	movt	r2, #1
   114a0:	str	r3, [r6, #8]
   114a4:	movw	r3, #9924	; 0x26c4
   114a8:	movt	r3, #1
   114ac:	str	r2, [r6, #12]
   114b0:	str	r3, [r6, #16]
   114b4:	b	1118c <__assert_fail@plt+0x25c>
   114b8:	movw	r6, #49504	; 0xc160
   114bc:	movt	r6, #2
   114c0:	movw	r3, #6688	; 0x1a20
   114c4:	movt	r3, #1
   114c8:	movw	r2, #14744	; 0x3998
   114cc:	movt	r2, #1
   114d0:	str	r3, [r6]
   114d4:	movw	r3, #14100	; 0x3714
   114d8:	movt	r3, #1
   114dc:	str	r2, [r6, #4]
   114e0:	movw	r2, #7992	; 0x1f38
   114e4:	movt	r2, #1
   114e8:	str	r3, [r6, #8]
   114ec:	movw	r3, #7884	; 0x1ecc
   114f0:	movt	r3, #1
   114f4:	str	r2, [r6, #12]
   114f8:	str	r3, [r6, #16]
   114fc:	b	1118c <__assert_fail@plt+0x25c>
   11500:	ldr	r7, [sp, #24]
   11504:	add	ip, sp, #52	; 0x34
   11508:	movw	r9, #4200	; 0x1068
   1150c:	mov	r2, r5
   11510:	mov	r1, r8
   11514:	add	r0, sp, #56	; 0x38
   11518:	str	ip, [sp]
   1151c:	str	r9, [sp, #52]	; 0x34
   11520:	ldr	r5, [r6, #16]
   11524:	mov	r3, r7
   11528:	blx	r5
   1152c:	ldr	sl, [sp, #20]
   11530:	mov	r5, r0
   11534:	mov	r1, #1
   11538:	mov	r0, r7
   1153c:	ldr	r2, [sp, #52]	; 0x34
   11540:	mov	r3, sl
   11544:	bl	10d44 <fwrite_unlocked@plt>
   11548:	ldr	r3, [sp, #52]	; 0x34
   1154c:	cmp	r3, r0
   11550:	bhi	11820 <__assert_fail@plt+0x8f0>
   11554:	cmp	r5, #0
   11558:	beq	11858 <__assert_fail@plt+0x928>
   1155c:	ldr	r3, [r4]
   11560:	tst	r3, #16
   11564:	beq	1123c <__assert_fail@plt+0x30c>
   11568:	ldr	r3, [sp, #56]	; 0x38
   1156c:	cmp	r3, #0
   11570:	beq	115d0 <__assert_fail@plt+0x6a0>
   11574:	add	ip, sp, #52	; 0x34
   11578:	mov	r3, r7
   1157c:	mov	r2, #0
   11580:	mov	r1, r8
   11584:	add	r0, sp, #56	; 0x38
   11588:	str	ip, [sp]
   1158c:	str	r9, [sp, #52]	; 0x34
   11590:	ldr	r5, [r6, #16]
   11594:	blx	r5
   11598:	mov	r5, r0
   1159c:	mov	r3, sl
   115a0:	ldr	r2, [sp, #52]	; 0x34
   115a4:	mov	r1, #1
   115a8:	mov	r0, r7
   115ac:	bl	10d44 <fwrite_unlocked@plt>
   115b0:	ldr	r3, [sp, #52]	; 0x34
   115b4:	cmp	r3, r0
   115b8:	bhi	11820 <__assert_fail@plt+0x8f0>
   115bc:	cmp	r5, #0
   115c0:	beq	11858 <__assert_fail@plt+0x928>
   115c4:	ldr	r3, [r4]
   115c8:	tst	r3, #16
   115cc:	beq	1123c <__assert_fail@plt+0x30c>
   115d0:	mov	r0, r4
   115d4:	ldr	r1, [sp, #44]	; 0x2c
   115d8:	bl	11f40 <__assert_fail@plt+0x1010>
   115dc:	mov	r2, #5
   115e0:	movw	r1, #43952	; 0xabb0
   115e4:	movt	r1, #1
   115e8:	mov	r0, #0
   115ec:	bl	10d68 <dcgettext@plt>
   115f0:	ldr	r3, [r4]
   115f4:	mov	r5, r0
   115f8:	add	r3, r3, #1
   115fc:	ldr	r0, [r7, r3, lsl #2]
   11600:	bl	17bb0 <__assert_fail@plt+0x6c80>
   11604:	mov	r1, #0
   11608:	mov	r3, r0
   1160c:	mov	r2, r5
   11610:	mov	r0, r1
   11614:	bl	10dd4 <error@plt>
   11618:	mov	r0, #1
   1161c:	bl	128b0 <__assert_fail@plt+0x1980>
   11620:	movw	r3, #41912	; 0xa3b8
   11624:	movt	r3, #1
   11628:	str	r3, [sp, #44]	; 0x2c
   1162c:	movw	r3, #49488	; 0xc150
   11630:	movt	r3, #2
   11634:	ldr	r4, [r3]
   11638:	b	111e4 <__assert_fail@plt+0x2b4>
   1163c:	mov	r0, #30720	; 0x7800
   11640:	str	r3, [sp, #28]
   11644:	ldr	fp, [r3]
   11648:	bl	18484 <__assert_fail@plt+0x7554>
   1164c:	mov	sl, r0
   11650:	mov	r0, #30720	; 0x7800
   11654:	ldr	r3, [r6]
   11658:	blx	r3
   1165c:	bl	18484 <__assert_fail@plt+0x7554>
   11660:	str	r0, [sp, #16]
   11664:	str	r6, [sp, #24]
   11668:	mov	r6, #0
   1166c:	b	11678 <__assert_fail@plt+0x748>
   11670:	cmp	r6, #30720	; 0x7800
   11674:	bge	116e8 <__assert_fail@plt+0x7b8>
   11678:	mov	r3, r4
   1167c:	rsb	r2, r6, #30720	; 0x7800
   11680:	add	r0, sl, r6
   11684:	mov	r1, #1
   11688:	bl	10f0c <fread_unlocked@plt>
   1168c:	ldr	r3, [r4]
   11690:	add	r6, r6, r0
   11694:	tst	r3, #48	; 0x30
   11698:	beq	11670 <__assert_fail@plt+0x740>
   1169c:	cmp	r6, #0
   116a0:	bgt	116e8 <__assert_fail@plt+0x7b8>
   116a4:	ldr	r2, [sp, #20]
   116a8:	cmp	r2, #0
   116ac:	cmpne	r8, #0
   116b0:	bgt	11830 <__assert_fail@plt+0x900>
   116b4:	tst	r3, #32
   116b8:	beq	115d0 <__assert_fail@plt+0x6a0>
   116bc:	bl	10e4c <__errno_location@plt>
   116c0:	movw	r1, #43976	; 0xabc8
   116c4:	movt	r1, #1
   116c8:	ldr	r4, [r0]
   116cc:	mov	r2, #5
   116d0:	mov	r0, #0
   116d4:	bl	10d68 <dcgettext@plt>
   116d8:	mov	r2, r0
   116dc:	mov	r0, #1
   116e0:	mov	r1, r4
   116e4:	bl	10dd4 <error@plt>
   116e8:	ldr	r7, [sp, #24]
   116ec:	mov	r0, r6
   116f0:	ldr	r3, [r7]
   116f4:	ldr	r5, [r7, #8]
   116f8:	blx	r3
   116fc:	mov	r3, r0
   11700:	mov	r1, r6
   11704:	ldr	r2, [sp, #16]
   11708:	mov	r0, sl
   1170c:	blx	r5
   11710:	mov	r0, r6
   11714:	ldr	r3, [r7]
   11718:	blx	r3
   1171c:	ldr	r3, [sp, #20]
   11720:	mov	r9, r0
   11724:	cmp	r3, #0
   11728:	beq	11800 <__assert_fail@plt+0x8d0>
   1172c:	cmp	r0, #0
   11730:	ble	117cc <__assert_fail@plt+0x89c>
   11734:	mov	r7, #0
   11738:	str	r4, [sp, #32]
   1173c:	str	sl, [sp, #36]	; 0x24
   11740:	str	r6, [sp, #40]	; 0x28
   11744:	ldr	r6, [sp, #16]
   11748:	ldr	r4, [sp, #20]
   1174c:	ldr	sl, [sp, #28]
   11750:	b	11780 <__assert_fail@plt+0x850>
   11754:	ldr	r3, [fp, #20]
   11758:	ldr	r2, [fp, #24]
   1175c:	cmp	r3, r2
   11760:	bcs	117e4 <__assert_fail@plt+0x8b4>
   11764:	add	r2, r3, #1
   11768:	mov	r8, r5
   1176c:	str	r2, [fp, #20]
   11770:	mov	r2, #10
   11774:	strb	r2, [r3]
   11778:	cmp	r7, r9
   1177c:	bge	117c0 <__assert_fail@plt+0x890>
   11780:	sub	r5, r9, r7
   11784:	sub	r3, r4, r8
   11788:	cmp	r5, r3
   1178c:	movge	r5, r3
   11790:	cmp	r5, #0
   11794:	beq	11754 <__assert_fail@plt+0x824>
   11798:	mov	r2, r5
   1179c:	mov	r1, #1
   117a0:	ldr	r3, [sl]
   117a4:	add	r0, r6, r7
   117a8:	bl	10d44 <fwrite_unlocked@plt>
   117ac:	cmp	r5, r0
   117b0:	bhi	11820 <__assert_fail@plt+0x8f0>
   117b4:	add	r8, r8, r5
   117b8:	add	r7, r7, r5
   117bc:	b	11778 <__assert_fail@plt+0x848>
   117c0:	ldr	r4, [sp, #32]
   117c4:	ldr	sl, [sp, #36]	; 0x24
   117c8:	ldr	r6, [sp, #40]	; 0x28
   117cc:	ldr	r3, [r4]
   117d0:	and	r2, r3, #48	; 0x30
   117d4:	cmp	r6, #30720	; 0x7800
   117d8:	cmpeq	r2, #0
   117dc:	beq	11668 <__assert_fail@plt+0x738>
   117e0:	b	116a4 <__assert_fail@plt+0x774>
   117e4:	mov	r1, #10
   117e8:	mov	r0, fp
   117ec:	bl	10eb8 <__overflow@plt>
   117f0:	cmn	r0, #1
   117f4:	beq	11820 <__assert_fail@plt+0x8f0>
   117f8:	mov	r8, r5
   117fc:	b	11778 <__assert_fail@plt+0x848>
   11800:	ldr	r3, [sp, #28]
   11804:	mov	r2, r0
   11808:	mov	r1, #1
   1180c:	ldr	r0, [sp, #16]
   11810:	ldr	r3, [r3]
   11814:	bl	10d44 <fwrite_unlocked@plt>
   11818:	cmp	r9, r0
   1181c:	bls	117cc <__assert_fail@plt+0x89c>
   11820:	bl	10e4c <__errno_location@plt>
   11824:	movw	r1, #43988	; 0xabd4
   11828:	movt	r1, #1
   1182c:	b	116c8 <__assert_fail@plt+0x798>
   11830:	ldr	r3, [fp, #20]
   11834:	ldr	r2, [fp, #24]
   11838:	cmp	r3, r2
   1183c:	addcc	r1, r3, #1
   11840:	movcc	r2, #10
   11844:	strcc	r1, [fp, #20]
   11848:	strbcc	r2, [r3]
   1184c:	bcs	1187c <__assert_fail@plt+0x94c>
   11850:	ldr	r3, [r4]
   11854:	b	116b4 <__assert_fail@plt+0x784>
   11858:	mov	r2, #5
   1185c:	movw	r1, #44000	; 0xabe0
   11860:	movt	r1, #1
   11864:	mov	r0, #0
   11868:	bl	10d68 <dcgettext@plt>
   1186c:	mov	r2, r0
   11870:	mov	r1, #0
   11874:	mov	r0, #1
   11878:	bl	10dd4 <error@plt>
   1187c:	mov	r0, fp
   11880:	mov	r1, #10
   11884:	bl	10eb8 <__overflow@plt>
   11888:	cmn	r0, #1
   1188c:	bne	11850 <__assert_fail@plt+0x920>
   11890:	b	11820 <__assert_fail@plt+0x8f0>
   11894:	mov	r2, #5
   11898:	movw	r1, #43860	; 0xab54
   1189c:	movt	r1, #1
   118a0:	mov	r0, #0
   118a4:	bl	10d68 <dcgettext@plt>
   118a8:	mov	r4, r0
   118ac:	ldr	r0, [sl]
   118b0:	bl	17bb0 <__assert_fail@plt+0x6c80>
   118b4:	movw	r2, #43880	; 0xab68
   118b8:	movt	r2, #1
   118bc:	str	r0, [sp]
   118c0:	mov	r3, r4
   118c4:	mov	r1, #0
   118c8:	mov	r0, #1
   118cc:	bl	10dd4 <error@plt>
   118d0:	bl	10e4c <__errno_location@plt>
   118d4:	ldr	r5, [r0]
   118d8:	mov	r1, #3
   118dc:	mov	r0, r4
   118e0:	ldr	r2, [sp, #44]	; 0x2c
   118e4:	bl	17404 <__assert_fail@plt+0x64d4>
   118e8:	mov	r3, r0
   118ec:	movw	r2, #43884	; 0xab6c
   118f0:	movt	r2, #1
   118f4:	mov	r0, #1
   118f8:	mov	r1, r5
   118fc:	bl	10dd4 <error@plt>
   11900:	mov	r2, #5
   11904:	movw	r1, #43928	; 0xab98
   11908:	movt	r1, #1
   1190c:	mov	r0, #0
   11910:	bl	10d68 <dcgettext@plt>
   11914:	mov	r1, #0
   11918:	mov	r2, r0
   1191c:	mov	r0, r1
   11920:	bl	10dd4 <error@plt>
   11924:	b	11014 <__assert_fail@plt+0xe4>
   11928:	andeq	sl, r1, r0, asr #5
   1192c:	mov	fp, #0
   11930:	mov	lr, #0
   11934:	pop	{r1}		; (ldr r1, [sp], #4)
   11938:	mov	r2, sp
   1193c:	push	{r2}		; (str r2, [sp, #-4]!)
   11940:	push	{r0}		; (str r0, [sp, #-4]!)
   11944:	ldr	ip, [pc, #16]	; 1195c <__assert_fail@plt+0xa2c>
   11948:	push	{ip}		; (str ip, [sp, #-4]!)
   1194c:	ldr	r0, [pc, #12]	; 11960 <__assert_fail@plt+0xa30>
   11950:	ldr	r3, [pc, #12]	; 11964 <__assert_fail@plt+0xa34>
   11954:	bl	10dec <__libc_start_main@plt>
   11958:	bl	10f24 <abort@plt>
   1195c:	andeq	sl, r1, ip, lsr #2
   11960:	andeq	r0, r1, r0, asr #30
   11964:	andeq	sl, r1, ip, asr #1
   11968:	ldr	r3, [pc, #20]	; 11984 <__assert_fail@plt+0xa54>
   1196c:	ldr	r2, [pc, #20]	; 11988 <__assert_fail@plt+0xa58>
   11970:	add	r3, pc, r3
   11974:	ldr	r2, [r3, r2]
   11978:	cmp	r2, #0
   1197c:	bxeq	lr
   11980:	b	10e04 <__gmon_start__@plt>
   11984:	andeq	sl, r1, r8, lsl #13
   11988:	andeq	r0, r0, r0, ror #1
   1198c:	ldr	r0, [pc, #24]	; 119ac <__assert_fail@plt+0xa7c>
   11990:	ldr	r3, [pc, #24]	; 119b0 <__assert_fail@plt+0xa80>
   11994:	cmp	r3, r0
   11998:	bxeq	lr
   1199c:	ldr	r3, [pc, #16]	; 119b4 <__assert_fail@plt+0xa84>
   119a0:	cmp	r3, #0
   119a4:	bxeq	lr
   119a8:	bx	r3
   119ac:	andeq	ip, r2, r4, lsr r1
   119b0:	andeq	ip, r2, r4, lsr r1
   119b4:	andeq	r0, r0, r0
   119b8:	ldr	r0, [pc, #36]	; 119e4 <__assert_fail@plt+0xab4>
   119bc:	ldr	r1, [pc, #36]	; 119e8 <__assert_fail@plt+0xab8>
   119c0:	sub	r1, r1, r0
   119c4:	asr	r1, r1, #2
   119c8:	add	r1, r1, r1, lsr #31
   119cc:	asrs	r1, r1, #1
   119d0:	bxeq	lr
   119d4:	ldr	r3, [pc, #16]	; 119ec <__assert_fail@plt+0xabc>
   119d8:	cmp	r3, #0
   119dc:	bxeq	lr
   119e0:	bx	r3
   119e4:	andeq	ip, r2, r4, lsr r1
   119e8:	andeq	ip, r2, r4, lsr r1
   119ec:	andeq	r0, r0, r0
   119f0:	push	{r4, lr}
   119f4:	ldr	r4, [pc, #24]	; 11a14 <__assert_fail@plt+0xae4>
   119f8:	ldrb	r3, [r4]
   119fc:	cmp	r3, #0
   11a00:	popne	{r4, pc}
   11a04:	bl	1198c <__assert_fail@plt+0xa5c>
   11a08:	mov	r3, #1
   11a0c:	strb	r3, [r4]
   11a10:	pop	{r4, pc}
   11a14:	andeq	ip, r2, ip, asr r1
   11a18:	b	119b8 <__assert_fail@plt+0xa88>
   11a1c:	andeq	r0, r0, r0
   11a20:	add	r0, r0, #2
   11a24:	movw	r3, #21846	; 0x5556
   11a28:	movt	r3, #21845	; 0x5555
   11a2c:	smull	r2, r3, r3, r0
   11a30:	sub	r0, r3, r0, asr #31
   11a34:	lsl	r0, r0, #2
   11a38:	bx	lr
   11a3c:	add	r0, r0, #4
   11a40:	movw	r2, #26215	; 0x6667
   11a44:	movt	r2, #26214	; 0x6666
   11a48:	asr	r3, r0, #31
   11a4c:	smull	r2, r0, r2, r0
   11a50:	rsb	r0, r3, r0, asr #1
   11a54:	lsl	r0, r0, #3
   11a58:	bx	lr
   11a5c:	sub	r3, r0, #48	; 0x30
   11a60:	sub	r0, r0, #65	; 0x41
   11a64:	cmp	r0, #21
   11a68:	cmphi	r3, #9
   11a6c:	movls	r0, #1
   11a70:	movhi	r0, #0
   11a74:	bx	lr
   11a78:	sub	r3, r0, #48	; 0x30
   11a7c:	sub	r0, r0, #65	; 0x41
   11a80:	cmp	r0, #5
   11a84:	cmphi	r3, #9
   11a88:	movls	r0, #1
   11a8c:	movhi	r0, #0
   11a90:	bx	lr
   11a94:	lsl	r0, r0, #1
   11a98:	bx	lr
   11a9c:	cmp	r1, #0
   11aa0:	bxeq	lr
   11aa4:	sub	r1, r1, #1
   11aa8:	add	r2, r2, #2
   11aac:	str	r4, [sp, #-8]!
   11ab0:	add	r4, r0, r1
   11ab4:	movw	r1, #41300	; 0xa154
   11ab8:	movt	r1, #1
   11abc:	sub	r0, r0, #1
   11ac0:	str	lr, [sp, #4]
   11ac4:	ldrb	r3, [r0, #1]!
   11ac8:	add	r2, r2, #2
   11acc:	and	lr, r3, #15
   11ad0:	ldrb	ip, [r1, r3, lsr #4]
   11ad4:	cmp	r0, r4
   11ad8:	ldrb	r3, [r1, lr]
   11adc:	strb	ip, [r2, #-4]
   11ae0:	strb	r3, [r2, #-3]
   11ae4:	bne	11ac4 <__assert_fail@plt+0xb94>
   11ae8:	ldr	r4, [sp]
   11aec:	add	sp, sp, #4
   11af0:	pop	{pc}		; (ldr pc, [sp], #4)
   11af4:	add	r0, r0, r0, lsl #2
   11af8:	add	r3, r0, #3
   11afc:	cmp	r0, #0
   11b00:	movlt	r0, r3
   11b04:	asr	r0, r0, #2
   11b08:	bx	lr
   11b0c:	sub	r0, r0, #48	; 0x30
   11b10:	cmp	r0, #1
   11b14:	movhi	r0, #0
   11b18:	movls	r0, #1
   11b1c:	bx	lr
   11b20:	lsl	r0, r0, #3
   11b24:	bx	lr
   11b28:	cmp	r1, #0
   11b2c:	bxeq	lr
   11b30:	sub	r1, r1, #1
   11b34:	sub	ip, r0, #1
   11b38:	strd	r4, [sp, #-20]!	; 0xffffffec
   11b3c:	strd	r6, [sp, #8]
   11b40:	add	r7, r0, r1
   11b44:	str	lr, [sp, #16]
   11b48:	ldrb	r3, [ip, #1]!
   11b4c:	mov	r0, #0
   11b50:	add	r2, r2, #8
   11b54:	mov	r1, r0
   11b58:	tst	r3, #128	; 0x80
   11b5c:	movne	r4, #49	; 0x31
   11b60:	moveq	r4, #48	; 0x30
   11b64:	tst	r3, #64	; 0x40
   11b68:	bfi	r0, r4, #0, #8
   11b6c:	movne	lr, #49	; 0x31
   11b70:	moveq	lr, #48	; 0x30
   11b74:	tst	r3, #32
   11b78:	bfi	r0, lr, #8, #8
   11b7c:	movne	r6, #49	; 0x31
   11b80:	moveq	r6, #48	; 0x30
   11b84:	tst	r3, #16
   11b88:	bfi	r0, r6, #16, #8
   11b8c:	movne	r4, #49	; 0x31
   11b90:	moveq	r4, #48	; 0x30
   11b94:	tst	r3, #8
   11b98:	bfi	r0, r4, #24, #8
   11b9c:	movne	lr, #49	; 0x31
   11ba0:	moveq	lr, #48	; 0x30
   11ba4:	bfi	r1, lr, #0, #8
   11ba8:	tst	r3, #4
   11bac:	movne	r5, #49	; 0x31
   11bb0:	moveq	r5, #48	; 0x30
   11bb4:	str	r0, [r2, #-8]
   11bb8:	tst	r3, #2
   11bbc:	bfi	r1, r5, #8, #8
   11bc0:	movne	lr, #49	; 0x31
   11bc4:	moveq	lr, #48	; 0x30
   11bc8:	bfi	r1, lr, #16, #8
   11bcc:	tst	r3, #1
   11bd0:	movne	r3, #49	; 0x31
   11bd4:	moveq	r3, #48	; 0x30
   11bd8:	bfi	r1, r3, #24, #8
   11bdc:	cmp	r7, ip
   11be0:	str	r1, [r2, #-4]
   11be4:	bne	11b48 <__assert_fail@plt+0xc18>
   11be8:	ldrd	r4, [sp]
   11bec:	ldrd	r6, [sp, #8]
   11bf0:	add	sp, sp, #16
   11bf4:	pop	{pc}		; (ldr pc, [sp], #4)
   11bf8:	cmp	r1, #0
   11bfc:	bxeq	lr
   11c00:	sub	r1, r1, #1
   11c04:	sub	ip, r0, #1
   11c08:	strd	r4, [sp, #-16]!
   11c0c:	str	r6, [sp, #8]
   11c10:	add	r6, r0, r1
   11c14:	str	lr, [sp, #12]
   11c18:	ldrb	r3, [ip, #1]!
   11c1c:	mov	r1, #0
   11c20:	add	r2, r2, #8
   11c24:	tst	r3, #1
   11c28:	movne	r0, #49	; 0x31
   11c2c:	moveq	r0, #48	; 0x30
   11c30:	bfi	r1, r0, #0, #8
   11c34:	tst	r3, #2
   11c38:	movne	lr, #49	; 0x31
   11c3c:	moveq	lr, #48	; 0x30
   11c40:	bfi	r1, lr, #8, #8
   11c44:	tst	r3, #4
   11c48:	movne	r0, #49	; 0x31
   11c4c:	moveq	r0, #48	; 0x30
   11c50:	tst	r3, #8
   11c54:	bfi	r1, r0, #16, #8
   11c58:	movne	r4, #49	; 0x31
   11c5c:	moveq	r4, #48	; 0x30
   11c60:	tst	r3, #16
   11c64:	bfi	r1, r4, #24, #8
   11c68:	movne	r5, #49	; 0x31
   11c6c:	moveq	r5, #48	; 0x30
   11c70:	tst	r3, #32
   11c74:	movne	lr, #49	; 0x31
   11c78:	moveq	lr, #48	; 0x30
   11c7c:	str	r1, [r2, #-8]
   11c80:	tst	r3, #64	; 0x40
   11c84:	strb	r5, [r2, #-4]
   11c88:	movne	r0, #49	; 0x31
   11c8c:	moveq	r0, #48	; 0x30
   11c90:	strb	lr, [r2, #-3]
   11c94:	lsrs	r3, r3, #7
   11c98:	movne	r3, #49	; 0x31
   11c9c:	moveq	r3, #48	; 0x30
   11ca0:	strb	r0, [r2, #-2]
   11ca4:	cmp	r6, ip
   11ca8:	strb	r3, [r2, #-1]
   11cac:	bne	11c18 <__assert_fail@plt+0xce8>
   11cb0:	ldrd	r4, [sp]
   11cb4:	ldr	r6, [sp, #8]
   11cb8:	add	sp, sp, #12
   11cbc:	pop	{pc}		; (ldr pc, [sp], #4)
   11cc0:	cmp	r0, #95	; 0x5f
   11cc4:	cmpne	r0, #45	; 0x2d
   11cc8:	moveq	r2, #1
   11ccc:	movne	r2, #0
   11cd0:	beq	11ce4 <__assert_fail@plt+0xdb4>
   11cd4:	and	r3, r0, #251	; 0xfb
   11cd8:	cmp	r3, #43	; 0x2b
   11cdc:	beq	11ce4 <__assert_fail@plt+0xdb4>
   11ce0:	b	13998 <__assert_fail@plt+0x2a68>
   11ce4:	mov	r0, r2
   11ce8:	bx	lr
   11cec:	strd	r4, [sp, #-16]!
   11cf0:	mov	r5, r3
   11cf4:	mov	r4, r2
   11cf8:	str	r6, [sp, #8]
   11cfc:	str	lr, [sp, #12]
   11d00:	bl	13714 <__assert_fail@plt+0x27e4>
   11d04:	cmp	r5, #0
   11d08:	beq	11d40 <__assert_fail@plt+0xe10>
   11d0c:	sub	r2, r5, #1
   11d10:	sub	r1, r4, #1
   11d14:	add	r2, r4, r2
   11d18:	mov	ip, #95	; 0x5f
   11d1c:	mov	r0, #45	; 0x2d
   11d20:	ldrb	r3, [r1, #1]!
   11d24:	cmp	r3, #43	; 0x2b
   11d28:	strbeq	r0, [r1]
   11d2c:	beq	11d38 <__assert_fail@plt+0xe08>
   11d30:	cmp	r3, #47	; 0x2f
   11d34:	strbeq	ip, [r1]
   11d38:	cmp	r1, r2
   11d3c:	bne	11d20 <__assert_fail@plt+0xdf0>
   11d40:	ldrd	r4, [sp]
   11d44:	ldr	r6, [sp, #8]
   11d48:	add	sp, sp, #12
   11d4c:	pop	{pc}		; (ldr pc, [sp], #4)
   11d50:	movw	r3, #4200	; 0x1068
   11d54:	str	r4, [sp, #-8]!
   11d58:	mov	r4, r0
   11d5c:	mov	r0, r3
   11d60:	str	lr, [sp, #4]
   11d64:	str	r3, [r4, #20]
   11d68:	bl	184cc <__assert_fail@plt+0x759c>
   11d6c:	mov	r3, #0
   11d70:	mov	r2, #1
   11d74:	strd	r2, [r4]
   11d78:	str	r0, [r4, #16]
   11d7c:	ldr	r4, [sp]
   11d80:	add	sp, sp, #4
   11d84:	pop	{pc}		; (ldr pc, [sp], #4)
   11d88:	movw	r3, #4200	; 0x1068
   11d8c:	str	r4, [sp, #-8]!
   11d90:	mov	r4, r0
   11d94:	mov	r0, r3
   11d98:	str	lr, [sp, #4]
   11d9c:	str	r3, [r4, #20]
   11da0:	bl	184cc <__assert_fail@plt+0x759c>
   11da4:	mov	r3, #0
   11da8:	str	r3, [r4]
   11dac:	strb	r3, [r4, #4]
   11db0:	str	r0, [r4, #16]
   11db4:	ldr	r4, [sp]
   11db8:	add	sp, sp, #4
   11dbc:	pop	{pc}		; (ldr pc, [sp], #4)
   11dc0:	movw	r3, #4200	; 0x1068
   11dc4:	str	r4, [sp, #-8]!
   11dc8:	mov	r4, r0
   11dcc:	mov	r0, r3
   11dd0:	str	lr, [sp, #4]
   11dd4:	str	r3, [r4, #20]
   11dd8:	bl	184cc <__assert_fail@plt+0x759c>
   11ddc:	mov	r3, #0
   11de0:	mov	r2, #1
   11de4:	str	r2, [r4]
   11de8:	strb	r3, [r4, #5]
   11dec:	str	r0, [r4, #16]
   11df0:	ldr	r4, [sp]
   11df4:	add	sp, sp, #4
   11df8:	pop	{pc}		; (ldr pc, [sp], #4)
   11dfc:	cmp	r0, #90	; 0x5a
   11e00:	bhi	11e44 <__assert_fail@plt+0xf14>
   11e04:	cmp	r0, #65	; 0x41
   11e08:	bcs	11e50 <__assert_fail@plt+0xf20>
   11e0c:	sub	r3, r0, #48	; 0x30
   11e10:	cmp	r3, #9
   11e14:	bls	11e50 <__assert_fail@plt+0xf20>
   11e18:	mov	r1, r0
   11e1c:	movw	r0, #41888	; 0xa3a0
   11e20:	movt	r0, #1
   11e24:	str	r4, [sp, #-8]!
   11e28:	str	lr, [sp, #4]
   11e2c:	bl	10e40 <strchr@plt>
   11e30:	adds	r0, r0, #0
   11e34:	ldr	r4, [sp]
   11e38:	add	sp, sp, #4
   11e3c:	movne	r0, #1
   11e40:	pop	{pc}		; (ldr pc, [sp], #4)
   11e44:	sub	r3, r0, #97	; 0x61
   11e48:	cmp	r3, #25
   11e4c:	bhi	11e18 <__assert_fail@plt+0xee8>
   11e50:	mov	r0, #1
   11e54:	bx	lr
   11e58:	str	r4, [sp, #-8]!
   11e5c:	mov	r4, r0
   11e60:	add	r0, r0, #4
   11e64:	str	lr, [sp, #4]
   11e68:	sub	sp, sp, #8
   11e6c:	ldr	ip, [sp, #16]
   11e70:	str	ip, [sp]
   11e74:	bl	12ff4 <__assert_fail@plt+0x20c4>
   11e78:	ldr	r3, [r4, #4]
   11e7c:	str	r3, [r4]
   11e80:	add	sp, sp, #8
   11e84:	ldr	r4, [sp]
   11e88:	add	sp, sp, #4
   11e8c:	pop	{pc}		; (ldr pc, [sp], #4)
   11e90:	str	r4, [sp, #-8]!
   11e94:	mov	r4, r0
   11e98:	add	r0, r0, #4
   11e9c:	str	lr, [sp, #4]
   11ea0:	bl	12fe8 <__assert_fail@plt+0x20b8>
   11ea4:	movw	r3, #4200	; 0x1068
   11ea8:	mov	r0, r3
   11eac:	str	r3, [r4, #20]
   11eb0:	bl	184cc <__assert_fail@plt+0x759c>
   11eb4:	str	r0, [r4, #16]
   11eb8:	ldr	r4, [sp]
   11ebc:	add	sp, sp, #4
   11ec0:	pop	{pc}		; (ldr pc, [sp], #4)
   11ec4:	add	r0, r0, #4
   11ec8:	b	12fe8 <__assert_fail@plt+0x20b8>
   11ecc:	str	r4, [sp, #-8]!
   11ed0:	mov	r4, r0
   11ed4:	add	r0, r0, #4
   11ed8:	str	lr, [sp, #4]
   11edc:	sub	sp, sp, #8
   11ee0:	ldr	ip, [sp, #16]
   11ee4:	str	ip, [sp]
   11ee8:	bl	139c0 <__assert_fail@plt+0x2a90>
   11eec:	ldr	r3, [r4, #4]
   11ef0:	str	r3, [r4]
   11ef4:	add	sp, sp, #8
   11ef8:	ldr	r4, [sp]
   11efc:	add	sp, sp, #4
   11f00:	pop	{pc}		; (ldr pc, [sp], #4)
   11f04:	str	r4, [sp, #-8]!
   11f08:	mov	r4, r0
   11f0c:	add	r0, r0, #4
   11f10:	str	lr, [sp, #4]
   11f14:	bl	139b4 <__assert_fail@plt+0x2a84>
   11f18:	movw	r3, #4200	; 0x1068
   11f1c:	mov	r0, r3
   11f20:	str	r3, [r4, #20]
   11f24:	bl	184cc <__assert_fail@plt+0x759c>
   11f28:	str	r0, [r4, #16]
   11f2c:	ldr	r4, [sp]
   11f30:	add	sp, sp, #4
   11f34:	pop	{pc}		; (ldr pc, [sp], #4)
   11f38:	add	r0, r0, #4
   11f3c:	b	139b4 <__assert_fail@plt+0x2a84>
   11f40:	str	r4, [sp, #-8]!
   11f44:	mov	r4, r1
   11f48:	str	lr, [sp, #4]
   11f4c:	bl	13ffc <__assert_fail@plt+0x30cc>
   11f50:	cmp	r0, #0
   11f54:	beq	11fc8 <__assert_fail@plt+0x1098>
   11f58:	movw	r1, #41912	; 0xa3b8
   11f5c:	movt	r1, #1
   11f60:	mov	r0, r4
   11f64:	bl	10ce4 <strcmp@plt>
   11f68:	mov	r5, r0
   11f6c:	bl	10e4c <__errno_location@plt>
   11f70:	cmp	r5, #0
   11f74:	ldr	r6, [r0]
   11f78:	bne	11fa0 <__assert_fail@plt+0x1070>
   11f7c:	mov	r2, #5
   11f80:	mov	r0, r5
   11f84:	movw	r1, #41916	; 0xa3bc
   11f88:	movt	r1, #1
   11f8c:	bl	10d68 <dcgettext@plt>
   11f90:	mov	r2, r0
   11f94:	mov	r1, r6
   11f98:	mov	r0, #1
   11f9c:	bl	10dd4 <error@plt>
   11fa0:	mov	r2, r4
   11fa4:	mov	r1, #3
   11fa8:	mov	r0, #0
   11fac:	bl	17404 <__assert_fail@plt+0x64d4>
   11fb0:	mov	r3, r0
   11fb4:	movw	r2, #43884	; 0xab6c
   11fb8:	movt	r2, #1
   11fbc:	mov	r1, r6
   11fc0:	mov	r0, #1
   11fc4:	bl	10dd4 <error@plt>
   11fc8:	bl	10e28 <exit@plt>
   11fcc:	strd	r4, [sp, #-12]!
   11fd0:	mov	ip, #0
   11fd4:	cmp	r2, #0
   11fd8:	ldr	r4, [sp, #12]
   11fdc:	addne	r2, r1, r2
   11fe0:	str	lr, [sp, #8]
   11fe4:	str	ip, [r4]
   11fe8:	beq	12070 <__assert_fail@plt+0x1140>
   11fec:	ldrb	ip, [r1], #1
   11ff0:	cmp	ip, #10
   11ff4:	sub	lr, ip, #48	; 0x30
   11ff8:	beq	12058 <__assert_fail@plt+0x1128>
   11ffc:	cmp	lr, #9
   12000:	sub	r5, ip, #65	; 0x41
   12004:	sub	ip, ip, #55	; 0x37
   12008:	movls	ip, lr
   1200c:	bls	12018 <__assert_fail@plt+0x10e8>
   12010:	cmp	r5, #5
   12014:	bhi	12084 <__assert_fail@plt+0x1154>
   12018:	ldrb	lr, [r0, #5]
   1201c:	uxtb	ip, ip
   12020:	mov	r5, r3
   12024:	cmp	lr, #0
   12028:	strbeq	ip, [r0, #4]
   1202c:	beq	12050 <__assert_fail@plt+0x1120>
   12030:	ldr	lr, [r4]
   12034:	ldrb	r3, [r0, #4]
   12038:	add	lr, lr, #1
   1203c:	add	ip, ip, r3, lsl #4
   12040:	str	lr, [r4]
   12044:	ldrb	lr, [r0, #5]
   12048:	strb	ip, [r5], #1
   1204c:	mov	r3, r5
   12050:	eor	lr, lr, #1
   12054:	strb	lr, [r0, #5]
   12058:	cmp	r1, r2
   1205c:	bne	11fec <__assert_fail@plt+0x10bc>
   12060:	ldrd	r4, [sp]
   12064:	add	sp, sp, #8
   12068:	mov	r0, #1
   1206c:	pop	{pc}		; (ldr pc, [sp], #4)
   12070:	ldrb	r0, [r0, #5]
   12074:	ldrd	r4, [sp]
   12078:	add	sp, sp, #8
   1207c:	eor	r0, r0, #1
   12080:	pop	{pc}		; (ldr pc, [sp], #4)
   12084:	ldrd	r4, [sp]
   12088:	add	sp, sp, #8
   1208c:	mov	r0, #0
   12090:	pop	{pc}		; (ldr pc, [sp], #4)
   12094:	strd	r4, [sp, #-36]!	; 0xffffffdc
   12098:	cmp	r2, #0
   1209c:	strd	r6, [sp, #8]
   120a0:	strd	r8, [sp, #16]
   120a4:	strd	sl, [sp, #24]
   120a8:	str	lr, [sp, #32]
   120ac:	sub	sp, sp, #28
   120b0:	mov	lr, #0
   120b4:	ldr	ip, [sp, #64]	; 0x40
   120b8:	str	lr, [ip]
   120bc:	bne	120f0 <__assert_fail@plt+0x11c0>
   120c0:	ldr	r3, [r0, #4]
   120c4:	cmp	r3, lr
   120c8:	movgt	r3, #0
   120cc:	movle	r3, #1
   120d0:	mov	r0, r3
   120d4:	add	sp, sp, #28
   120d8:	ldrd	r4, [sp]
   120dc:	ldrd	r6, [sp, #8]
   120e0:	ldrd	r8, [sp, #16]
   120e4:	ldrd	sl, [sp, #24]
   120e8:	add	sp, sp, #32
   120ec:	pop	{pc}		; (ldr pc, [sp], #4)
   120f0:	movw	r7, #24301	; 0x5eed
   120f4:	movt	r7, #9
   120f8:	str	lr, [sp, #20]
   120fc:	movw	r6, #33969	; 0x84b1
   12100:	movt	r6, #796	; 0x31c
   12104:	movw	lr, #41300	; 0xa154
   12108:	movt	lr, #1
   1210c:	add	r2, r1, r2
   12110:	b	1211c <__assert_fail@plt+0x11ec>
   12114:	cmp	r2, r1
   12118:	beq	12208 <__assert_fail@plt+0x12d8>
   1211c:	ldrb	r4, [r1], #1
   12120:	cmp	r4, #10
   12124:	add	r9, lr, r4
   12128:	sub	r5, r4, #33	; 0x21
   1212c:	beq	12114 <__assert_fail@plt+0x11e4>
   12130:	cmp	r5, #92	; 0x5c
   12134:	bhi	12218 <__assert_fail@plt+0x12e8>
   12138:	ldrsb	r5, [r9, #-17]	; 0xffffffef
   1213c:	cmp	r5, #0
   12140:	blt	12218 <__assert_fail@plt+0x12e8>
   12144:	ldr	r4, [r0, #4]
   12148:	add	r9, r4, #1
   1214c:	add	r4, r0, r4
   12150:	cmp	r9, #5
   12154:	str	r9, [r0, #4]
   12158:	strb	r5, [r4, #8]
   1215c:	bne	12114 <__assert_fail@plt+0x11e4>
   12160:	ldrb	sl, [r0, #10]
   12164:	movw	r8, #7225	; 0x1c39
   12168:	ldrb	fp, [r0, #9]
   1216c:	ldrb	r9, [r0, #11]
   12170:	mul	sl, r8, sl
   12174:	mov	r8, #85	; 0x55
   12178:	ldrb	r4, [r0, #8]
   1217c:	mla	sl, r7, fp, sl
   12180:	ldrb	fp, [r0, #12]
   12184:	smlabb	r9, r8, r9, sl
   12188:	umull	r4, r5, r4, r6
   1218c:	add	r9, r9, fp
   12190:	adds	sl, r4, r9
   12194:	adc	fp, r5, r9, asr #31
   12198:	mov	r4, sl
   1219c:	lsr	r9, sl, #24
   121a0:	mov	r5, fp
   121a4:	lsr	fp, sl, #16
   121a8:	orr	r9, r9, r5, lsl #8
   121ac:	strd	r4, [sp, #8]
   121b0:	lsr	sl, sl, #8
   121b4:	ldr	r5, [sp, #12]
   121b8:	bic	r4, r9, #255	; 0xff
   121bc:	str	r4, [sp]
   121c0:	asr	r4, r5, #24
   121c4:	str	r4, [sp, #4]
   121c8:	ldrd	r4, [sp]
   121cc:	orrs	r4, r4, r5
   121d0:	bne	12218 <__assert_fail@plt+0x12e8>
   121d4:	ldrb	r4, [sp, #8]
   121d8:	cmp	r2, r1
   121dc:	add	r3, r3, #4
   121e0:	strb	r9, [r3, #-4]
   121e4:	ldr	r5, [ip]
   121e8:	strb	fp, [r3, #-3]
   121ec:	strb	sl, [r3, #-2]
   121f0:	strb	r4, [r3, #-1]
   121f4:	ldr	r4, [sp, #20]
   121f8:	add	r5, r5, #4
   121fc:	str	r5, [ip]
   12200:	str	r4, [r0, #4]
   12204:	bne	1211c <__assert_fail@plt+0x11ec>
   12208:	ldr	r2, [r0, #4]
   1220c:	mov	r3, #1
   12210:	str	r2, [r0]
   12214:	b	120d0 <__assert_fail@plt+0x11a0>
   12218:	mov	r3, #0
   1221c:	b	120d0 <__assert_fail@plt+0x11a0>
   12220:	strd	r4, [sp, #-16]!
   12224:	cmp	r2, #0
   12228:	ldr	r5, [sp, #16]
   1222c:	addne	r2, r1, r2
   12230:	str	r6, [sp, #8]
   12234:	mov	r6, #0
   12238:	str	lr, [sp, #12]
   1223c:	str	r6, [r5]
   12240:	beq	122c0 <__assert_fail@plt+0x1390>
   12244:	ldrb	ip, [r1], #1
   12248:	cmp	ip, #10
   1224c:	sub	lr, ip, #48	; 0x30
   12250:	beq	122a4 <__assert_fail@plt+0x1374>
   12254:	cmp	lr, #1
   12258:	bhi	122dc <__assert_fail@plt+0x13ac>
   1225c:	ldrb	lr, [r0, #4]
   12260:	sub	ip, ip, #49	; 0x31
   12264:	clz	ip, ip
   12268:	ldr	r4, [r0]
   1226c:	lsr	ip, ip, #5
   12270:	orr	ip, lr, ip, lsl r4
   12274:	add	lr, r4, #1
   12278:	cmp	lr, #8
   1227c:	uxtb	ip, ip
   12280:	str	lr, [r0]
   12284:	strb	ip, [r0, #4]
   12288:	bne	122a4 <__assert_fail@plt+0x1374>
   1228c:	strb	r6, [r0, #4]
   12290:	ldr	lr, [r5]
   12294:	strb	ip, [r3], #1
   12298:	add	ip, lr, #1
   1229c:	str	ip, [r5]
   122a0:	str	r6, [r0]
   122a4:	cmp	r2, r1
   122a8:	bne	12244 <__assert_fail@plt+0x1314>
   122ac:	ldrd	r4, [sp]
   122b0:	mov	r0, #1
   122b4:	ldr	r6, [sp, #8]
   122b8:	add	sp, sp, #12
   122bc:	pop	{pc}		; (ldr pc, [sp], #4)
   122c0:	ldr	r0, [r0]
   122c4:	ldrd	r4, [sp]
   122c8:	ldr	r6, [sp, #8]
   122cc:	add	sp, sp, #12
   122d0:	clz	r0, r0
   122d4:	lsr	r0, r0, #5
   122d8:	pop	{pc}		; (ldr pc, [sp], #4)
   122dc:	ldrd	r4, [sp]
   122e0:	mov	r0, #0
   122e4:	ldr	r6, [sp, #8]
   122e8:	add	sp, sp, #12
   122ec:	pop	{pc}		; (ldr pc, [sp], #4)
   122f0:	strd	r4, [sp, #-24]!	; 0xffffffe8
   122f4:	mov	ip, #0
   122f8:	cmp	r2, #0
   122fc:	ldr	r5, [sp, #24]
   12300:	addne	r2, r1, r2
   12304:	strd	r6, [sp, #8]
   12308:	movne	r7, #7
   1230c:	str	r8, [sp, #16]
   12310:	str	lr, [sp, #20]
   12314:	str	ip, [r5]
   12318:	bne	12334 <__assert_fail@plt+0x1404>
   1231c:	b	123c4 <__assert_fail@plt+0x1494>
   12320:	orr	ip, lr, ip, lsl #7
   12324:	str	r7, [r0]
   12328:	strb	ip, [r0, #4]
   1232c:	cmp	r2, r1
   12330:	beq	123ac <__assert_fail@plt+0x147c>
   12334:	ldrb	ip, [r1], #1
   12338:	cmp	ip, #10
   1233c:	sub	lr, ip, #48	; 0x30
   12340:	beq	1232c <__assert_fail@plt+0x13fc>
   12344:	cmp	lr, #1
   12348:	mov	r8, r3
   1234c:	bhi	123d4 <__assert_fail@plt+0x14a4>
   12350:	ldr	r6, [r0]
   12354:	sub	ip, ip, #49	; 0x31
   12358:	clz	ip, ip
   1235c:	lsr	ip, ip, #5
   12360:	ldrsb	lr, [r0, #4]
   12364:	cmp	r6, #0
   12368:	sub	r4, r6, #1
   1236c:	beq	12320 <__assert_fail@plt+0x13f0>
   12370:	orr	ip, lr, ip, lsl r4
   12374:	cmp	r4, #0
   12378:	str	r4, [r0]
   1237c:	uxtb	ip, ip
   12380:	strb	ip, [r0, #4]
   12384:	bne	1232c <__assert_fail@plt+0x13fc>
   12388:	strb	r4, [r0, #4]
   1238c:	cmp	r2, r1
   12390:	ldr	lr, [r5]
   12394:	strb	ip, [r8], #1
   12398:	mov	r3, r8
   1239c:	add	ip, lr, #1
   123a0:	str	ip, [r5]
   123a4:	str	r4, [r0]
   123a8:	bne	12334 <__assert_fail@plt+0x1404>
   123ac:	mov	r0, #1
   123b0:	ldrd	r4, [sp]
   123b4:	ldrd	r6, [sp, #8]
   123b8:	ldr	r8, [sp, #16]
   123bc:	add	sp, sp, #20
   123c0:	pop	{pc}		; (ldr pc, [sp], #4)
   123c4:	ldr	r0, [r0]
   123c8:	clz	r0, r0
   123cc:	lsr	r0, r0, #5
   123d0:	b	123b0 <__assert_fail@plt+0x1480>
   123d4:	mov	r0, #0
   123d8:	b	123b0 <__assert_fail@plt+0x1480>
   123dc:	cmp	r1, #0
   123e0:	bxeq	lr
   123e4:	strd	r4, [sp, #-36]!	; 0xffffffdc
   123e8:	mov	r4, r0
   123ec:	cmp	r1, #1
   123f0:	strd	r6, [sp, #8]
   123f4:	mov	r7, r3
   123f8:	strd	r8, [sp, #16]
   123fc:	strd	sl, [sp, #24]
   12400:	str	lr, [sp, #32]
   12404:	sub	sp, sp, #28
   12408:	ldrb	r3, [r4], #1
   1240c:	strb	r3, [sp, #20]
   12410:	beq	125f4 <__assert_fail@plt+0x16c4>
   12414:	movw	fp, #41300	; 0xa154
   12418:	movt	fp, #1
   1241c:	str	r2, [sp, #4]
   12420:	add	r5, r0, r1
   12424:	mov	r6, #0
   12428:	mov	r3, #1
   1242c:	b	12438 <__assert_fail@plt+0x1508>
   12430:	cmp	r4, r5
   12434:	beq	125d0 <__assert_fail@plt+0x16a0>
   12438:	ldrb	r1, [r4], #1
   1243c:	add	r2, sp, #24
   12440:	add	r2, r2, r3
   12444:	add	r3, r3, #1
   12448:	cmp	r3, #4
   1244c:	strb	r1, [r2, #-4]
   12450:	bne	12430 <__assert_fail@plt+0x1500>
   12454:	ldrb	r0, [sp, #20]
   12458:	mov	r1, #0
   1245c:	ldrb	ip, [sp, #21]
   12460:	ldrb	lr, [sp, #22]
   12464:	lsr	r3, r0, #8
   12468:	lsl	r2, r0, #24
   1246c:	ldrb	r0, [sp, #23]
   12470:	lsl	ip, ip, #16
   12474:	mov	r9, r3
   12478:	add	r3, r6, #4
   1247c:	mov	r8, r2
   12480:	lsl	r2, lr, #8
   12484:	strd	r0, [sp, #8]
   12488:	adds	r0, r8, ip
   1248c:	adc	r1, r9, ip, asr #31
   12490:	adds	r8, r0, r2
   12494:	adc	r9, r1, r2, asr #31
   12498:	ldrd	r0, [sp, #8]
   1249c:	adds	sl, r0, r8
   124a0:	mov	r2, r1
   124a4:	adc	r8, r2, r9
   124a8:	cmp	r7, r3
   124ac:	ble	124d4 <__assert_fail@plt+0x15a4>
   124b0:	mov	r2, #85	; 0x55
   124b4:	mov	r3, #0
   124b8:	mov	r0, sl
   124bc:	mov	r1, r8
   124c0:	bl	19e84 <__assert_fail@plt+0x8f54>
   124c4:	add	r2, fp, r2
   124c8:	ldrb	r3, [r2, #112]	; 0x70
   124cc:	ldr	r2, [sp, #4]
   124d0:	strb	r3, [r2, #4]
   124d4:	add	r3, r6, #3
   124d8:	cmp	r7, r3
   124dc:	ble	12510 <__assert_fail@plt+0x15e0>
   124e0:	mov	r2, #85	; 0x55
   124e4:	mov	r3, #0
   124e8:	mov	r0, sl
   124ec:	mov	r1, r8
   124f0:	bl	19e84 <__assert_fail@plt+0x8f54>
   124f4:	mov	r2, #85	; 0x55
   124f8:	mov	r3, #0
   124fc:	bl	19e84 <__assert_fail@plt+0x8f54>
   12500:	add	r2, fp, r2
   12504:	ldrb	r3, [r2, #112]	; 0x70
   12508:	ldr	r2, [sp, #4]
   1250c:	strb	r3, [r2, #3]
   12510:	add	r3, r6, #2
   12514:	cmp	r7, r3
   12518:	ble	1254c <__assert_fail@plt+0x161c>
   1251c:	movw	r2, #7225	; 0x1c39
   12520:	mov	r3, #0
   12524:	mov	r0, sl
   12528:	mov	r1, r8
   1252c:	bl	19e84 <__assert_fail@plt+0x8f54>
   12530:	mov	r2, #85	; 0x55
   12534:	mov	r3, #0
   12538:	bl	19e84 <__assert_fail@plt+0x8f54>
   1253c:	add	r2, fp, r2
   12540:	ldrb	r3, [r2, #112]	; 0x70
   12544:	ldr	r2, [sp, #4]
   12548:	strb	r3, [r2, #2]
   1254c:	add	r3, r6, #1
   12550:	cmp	r7, r3
   12554:	ble	12588 <__assert_fail@plt+0x1658>
   12558:	add	r3, pc, #184	; 0xb8
   1255c:	ldrd	r2, [r3]
   12560:	mov	r0, sl
   12564:	mov	r1, r8
   12568:	bl	19e84 <__assert_fail@plt+0x8f54>
   1256c:	mov	r2, #85	; 0x55
   12570:	mov	r3, #0
   12574:	bl	19e84 <__assert_fail@plt+0x8f54>
   12578:	add	r2, fp, r2
   1257c:	ldrb	r3, [r2, #112]	; 0x70
   12580:	ldr	r2, [sp, #4]
   12584:	strb	r3, [r2, #1]
   12588:	cmp	r7, r6
   1258c:	ble	125b4 <__assert_fail@plt+0x1684>
   12590:	add	r3, pc, #136	; 0x88
   12594:	ldrd	r2, [r3]
   12598:	mov	r0, sl
   1259c:	mov	r1, r8
   125a0:	bl	19e84 <__assert_fail@plt+0x8f54>
   125a4:	add	r0, fp, r0
   125a8:	ldr	r2, [sp, #4]
   125ac:	ldrb	r3, [r0, #112]	; 0x70
   125b0:	strb	r3, [r2]
   125b4:	ldr	r3, [sp, #4]
   125b8:	cmp	r4, r5
   125bc:	add	r6, r6, #5
   125c0:	add	r3, r3, #5
   125c4:	str	r3, [sp, #4]
   125c8:	mov	r3, #0
   125cc:	bne	12438 <__assert_fail@plt+0x1508>
   125d0:	cmp	r3, #0
   125d4:	bne	125f4 <__assert_fail@plt+0x16c4>
   125d8:	add	sp, sp, #28
   125dc:	ldrd	r4, [sp]
   125e0:	ldrd	r6, [sp, #8]
   125e4:	ldrd	r8, [sp, #16]
   125e8:	ldrd	sl, [sp, #24]
   125ec:	add	sp, sp, #32
   125f0:	pop	{pc}		; (ldr pc, [sp], #4)
   125f4:	mov	r2, #5
   125f8:	movw	r1, #41940	; 0xa3d4
   125fc:	movt	r1, #1
   12600:	mov	r0, #0
   12604:	bl	10d68 <dcgettext@plt>
   12608:	mov	r2, r0
   1260c:	mov	r1, #0
   12610:	mov	r0, #1
   12614:	bl	10dd4 <error@plt>
   12618:	andeq	r5, r9, sp, ror #29
   1261c:	andeq	r0, r0, r0
   12620:	tsteq	ip, #-1325400064	; 0xb1000000
   12624:	andeq	r0, r0, r0
   12628:	strd	r4, [sp, #-16]!
   1262c:	mov	r5, r3
   12630:	mov	r4, r2
   12634:	str	r6, [sp, #8]
   12638:	str	lr, [sp, #12]
   1263c:	bl	12d18 <__assert_fail@plt+0x1de8>
   12640:	cmp	r5, #0
   12644:	beq	12694 <__assert_fail@plt+0x1764>
   12648:	ldrb	r1, [r4]
   1264c:	sub	r3, r1, #50	; 0x32
   12650:	cmp	r3, #40	; 0x28
   12654:	bhi	126a4 <__assert_fail@plt+0x1774>
   12658:	sub	r0, r5, #1
   1265c:	movw	ip, #41300	; 0xa154
   12660:	movt	ip, #1
   12664:	mov	r2, r4
   12668:	add	r0, r4, r0
   1266c:	b	12680 <__assert_fail@plt+0x1750>
   12670:	ldrb	r1, [r2, #1]!
   12674:	sub	r3, r1, #50	; 0x32
   12678:	cmp	r3, #40	; 0x28
   1267c:	bhi	126a4 <__assert_fail@plt+0x1774>
   12680:	add	r1, ip, r1
   12684:	cmp	r0, r2
   12688:	ldrb	r3, [r1, #170]	; 0xaa
   1268c:	strb	r3, [r2]
   12690:	bne	12670 <__assert_fail@plt+0x1740>
   12694:	ldrd	r4, [sp]
   12698:	ldr	r6, [sp, #8]
   1269c:	add	sp, sp, #12
   126a0:	pop	{pc}		; (ldr pc, [sp], #4)
   126a4:	movw	r1, #41996	; 0xa40c
   126a8:	movt	r1, #1
   126ac:	ldr	r3, [pc, #12]	; 126c0 <__assert_fail@plt+0x1790>
   126b0:	movw	r0, #42012	; 0xa41c
   126b4:	movt	r0, #1
   126b8:	mov	r2, #452	; 0x1c4
   126bc:	bl	10f30 <__assert_fail@plt>
   126c0:	andeq	sl, r1, ip, lsl r2
   126c4:	strd	r4, [sp, #-24]!	; 0xffffffe8
   126c8:	mov	r4, r0
   126cc:	mov	r5, r2
   126d0:	strd	r6, [sp, #8]
   126d4:	mov	r7, r3
   126d8:	ldr	r3, [r0, #20]
   126dc:	str	r8, [sp, #16]
   126e0:	mov	r8, r1
   126e4:	str	lr, [sp, #20]
   126e8:	sub	sp, sp, #8
   126ec:	ldr	r0, [r0, #16]
   126f0:	cmp	r2, r3
   126f4:	ldr	r6, [sp, #32]
   126f8:	bgt	127ac <__assert_fail@plt+0x187c>
   126fc:	mov	r1, r8
   12700:	mov	r2, r5
   12704:	bl	10d2c <memcpy@plt>
   12708:	cmp	r5, #0
   1270c:	ldr	r1, [r4, #16]
   12710:	beq	12768 <__assert_fail@plt+0x1838>
   12714:	ldrb	r3, [r1]
   12718:	and	r2, r3, #251	; 0xfb
   1271c:	cmp	r2, #43	; 0x2b
   12720:	beq	1279c <__assert_fail@plt+0x186c>
   12724:	sub	r0, r5, #1
   12728:	mov	lr, #47	; 0x2f
   1272c:	add	r0, r1, r0
   12730:	mov	ip, #43	; 0x2b
   12734:	b	12748 <__assert_fail@plt+0x1818>
   12738:	ldrb	r3, [r1, #1]!
   1273c:	and	r2, r3, #251	; 0xfb
   12740:	cmp	r2, #43	; 0x2b
   12744:	beq	1279c <__assert_fail@plt+0x186c>
   12748:	cmp	r3, #45	; 0x2d
   1274c:	strbeq	ip, [r1]
   12750:	beq	1275c <__assert_fail@plt+0x182c>
   12754:	cmp	r3, #95	; 0x5f
   12758:	strbeq	lr, [r1]
   1275c:	cmp	r0, r1
   12760:	bne	12738 <__assert_fail@plt+0x1808>
   12764:	ldr	r1, [r4, #16]
   12768:	mov	r3, r7
   1276c:	mov	r2, r5
   12770:	str	r6, [sp]
   12774:	add	r0, r4, #4
   12778:	bl	139c0 <__assert_fail@plt+0x2a90>
   1277c:	ldr	r3, [r4, #4]
   12780:	str	r3, [r4]
   12784:	add	sp, sp, #8
   12788:	ldrd	r4, [sp]
   1278c:	ldrd	r6, [sp, #8]
   12790:	ldr	r8, [sp, #16]
   12794:	add	sp, sp, #20
   12798:	pop	{pc}		; (ldr pc, [sp], #4)
   1279c:	mov	r3, #0
   127a0:	mov	r0, r3
   127a4:	str	r3, [r6]
   127a8:	b	12784 <__assert_fail@plt+0x1854>
   127ac:	lsl	r3, r2, #1
   127b0:	mov	r2, #1
   127b4:	mov	r1, r3
   127b8:	str	r3, [r4, #20]
   127bc:	bl	18568 <__assert_fail@plt+0x7638>
   127c0:	str	r0, [r4, #16]
   127c4:	b	126fc <__assert_fail@plt+0x17cc>
   127c8:	strd	r4, [sp, #-28]!	; 0xffffffe4
   127cc:	mov	r4, r1
   127d0:	mov	r5, r0
   127d4:	ldr	r1, [r0, #16]
   127d8:	strd	r6, [sp, #8]
   127dc:	mov	r6, r2
   127e0:	ldr	r2, [r0, #20]
   127e4:	strd	r8, [sp, #16]
   127e8:	str	lr, [sp, #24]
   127ec:	sub	sp, sp, #20
   127f0:	ldr	r7, [sp, #48]	; 0x30
   127f4:	cmp	r6, r2
   127f8:	bgt	12884 <__assert_fail@plt+0x1954>
   127fc:	cmp	r6, #0
   12800:	beq	12844 <__assert_fail@plt+0x1914>
   12804:	movw	r8, #41300	; 0xa154
   12808:	movt	r8, #1
   1280c:	sub	r0, r4, #1
   12810:	add	r9, r1, r6
   12814:	ldrb	r2, [r0, #1]!
   12818:	sub	lr, r2, #48	; 0x30
   1281c:	sub	ip, r2, #65	; 0x41
   12820:	cmp	ip, #21
   12824:	cmphi	lr, #9
   12828:	add	r4, r8, r2
   1282c:	bhi	12874 <__assert_fail@plt+0x1944>
   12830:	ldrb	r2, [r4, #216]	; 0xd8
   12834:	strb	r2, [r1], #1
   12838:	cmp	r1, r9
   1283c:	bne	12814 <__assert_fail@plt+0x18e4>
   12840:	ldr	r1, [r5, #16]
   12844:	mov	r2, r6
   12848:	add	r0, r5, #4
   1284c:	str	r7, [sp]
   12850:	bl	12ff4 <__assert_fail@plt+0x20c4>
   12854:	ldr	r3, [r5, #4]
   12858:	str	r3, [r5]
   1285c:	add	sp, sp, #20
   12860:	ldrd	r4, [sp]
   12864:	ldrd	r6, [sp, #8]
   12868:	ldrd	r8, [sp, #16]
   1286c:	add	sp, sp, #24
   12870:	pop	{pc}		; (ldr pc, [sp], #4)
   12874:	strb	r2, [r1], #1
   12878:	cmp	r1, r9
   1287c:	bne	12814 <__assert_fail@plt+0x18e4>
   12880:	b	12840 <__assert_fail@plt+0x1910>
   12884:	lsl	ip, r6, #1
   12888:	mov	r0, r1
   1288c:	mov	r2, #1
   12890:	str	r3, [sp, #12]
   12894:	mov	r1, ip
   12898:	str	ip, [r5, #20]
   1289c:	bl	18568 <__assert_fail@plt+0x7638>
   128a0:	mov	r1, r0
   128a4:	str	r0, [r5, #16]
   128a8:	ldr	r3, [sp, #12]
   128ac:	b	127fc <__assert_fail@plt+0x18cc>
   128b0:	subs	r6, r0, #0
   128b4:	str	r7, [sp, #-8]!
   128b8:	str	lr, [sp, #4]
   128bc:	sub	sp, sp, #56	; 0x38
   128c0:	beq	12908 <__assert_fail@plt+0x19d8>
   128c4:	movw	r3, #49480	; 0xc148
   128c8:	movt	r3, #2
   128cc:	ldr	r4, [r3]
   128d0:	mov	r2, #5
   128d4:	movw	r1, #42048	; 0xa440
   128d8:	movt	r1, #1
   128dc:	mov	r0, #0
   128e0:	bl	10d68 <dcgettext@plt>
   128e4:	movw	r3, #49532	; 0xc17c
   128e8:	movt	r3, #2
   128ec:	mov	r2, r0
   128f0:	mov	r1, #1
   128f4:	ldr	r3, [r3]
   128f8:	mov	r0, r4
   128fc:	bl	10e88 <__fprintf_chk@plt>
   12900:	mov	r0, r6
   12904:	bl	10e28 <exit@plt>
   12908:	mov	r2, #5
   1290c:	movw	r1, #42088	; 0xa468
   12910:	movt	r1, #1
   12914:	movw	r7, #49492	; 0xc154
   12918:	movt	r7, #2
   1291c:	bl	10d68 <dcgettext@plt>
   12920:	movw	r3, #49532	; 0xc17c
   12924:	movt	r3, #2
   12928:	mov	r1, r0
   1292c:	mov	r0, #1
   12930:	ldr	r2, [r3]
   12934:	bl	10e70 <__printf_chk@plt>
   12938:	mov	r2, #5
   1293c:	movw	r1, #42120	; 0xa488
   12940:	movt	r1, #1
   12944:	mov	r0, r6
   12948:	bl	10d68 <dcgettext@plt>
   1294c:	ldr	r1, [r7]
   12950:	bl	10ccc <fputs_unlocked@plt>
   12954:	mov	r2, #5
   12958:	movw	r1, #42192	; 0xa4d0
   1295c:	movt	r1, #1
   12960:	mov	r0, r6
   12964:	bl	10d68 <dcgettext@plt>
   12968:	ldr	r1, [r7]
   1296c:	bl	10ccc <fputs_unlocked@plt>
   12970:	mov	r2, #5
   12974:	movw	r1, #42248	; 0xa508
   12978:	movt	r1, #1
   1297c:	mov	r0, r6
   12980:	bl	10d68 <dcgettext@plt>
   12984:	ldr	r1, [r7]
   12988:	bl	10ccc <fputs_unlocked@plt>
   1298c:	mov	r2, #5
   12990:	movw	r1, #42324	; 0xa554
   12994:	movt	r1, #1
   12998:	mov	r0, r6
   1299c:	bl	10d68 <dcgettext@plt>
   129a0:	ldr	r1, [r7]
   129a4:	bl	10ccc <fputs_unlocked@plt>
   129a8:	mov	r2, #5
   129ac:	movw	r1, #42396	; 0xa59c
   129b0:	movt	r1, #1
   129b4:	mov	r0, r6
   129b8:	bl	10d68 <dcgettext@plt>
   129bc:	ldr	r1, [r7]
   129c0:	bl	10ccc <fputs_unlocked@plt>
   129c4:	mov	r2, #5
   129c8:	movw	r1, #42468	; 0xa5e4
   129cc:	movt	r1, #1
   129d0:	mov	r0, r6
   129d4:	bl	10d68 <dcgettext@plt>
   129d8:	ldr	r1, [r7]
   129dc:	bl	10ccc <fputs_unlocked@plt>
   129e0:	mov	r2, #5
   129e4:	movw	r1, #42540	; 0xa62c
   129e8:	movt	r1, #1
   129ec:	mov	r0, r6
   129f0:	bl	10d68 <dcgettext@plt>
   129f4:	ldr	r1, [r7]
   129f8:	bl	10ccc <fputs_unlocked@plt>
   129fc:	mov	r2, #5
   12a00:	movw	r1, #42616	; 0xa678
   12a04:	movt	r1, #1
   12a08:	mov	r0, r6
   12a0c:	bl	10d68 <dcgettext@plt>
   12a10:	ldr	r1, [r7]
   12a14:	bl	10ccc <fputs_unlocked@plt>
   12a18:	mov	r2, #5
   12a1c:	movw	r1, #42676	; 0xa6b4
   12a20:	movt	r1, #1
   12a24:	mov	r0, r6
   12a28:	bl	10d68 <dcgettext@plt>
   12a2c:	ldr	r1, [r7]
   12a30:	bl	10ccc <fputs_unlocked@plt>
   12a34:	mov	r2, #5
   12a38:	movw	r1, #42752	; 0xa700
   12a3c:	movt	r1, #1
   12a40:	mov	r0, r6
   12a44:	bl	10d68 <dcgettext@plt>
   12a48:	ldr	r1, [r7]
   12a4c:	bl	10ccc <fputs_unlocked@plt>
   12a50:	mov	r2, #5
   12a54:	movw	r1, #42828	; 0xa74c
   12a58:	movt	r1, #1
   12a5c:	mov	r0, r6
   12a60:	bl	10d68 <dcgettext@plt>
   12a64:	ldr	r1, [r7]
   12a68:	bl	10ccc <fputs_unlocked@plt>
   12a6c:	mov	r2, #5
   12a70:	movw	r1, #43072	; 0xa840
   12a74:	movt	r1, #1
   12a78:	mov	r0, r6
   12a7c:	bl	10d68 <dcgettext@plt>
   12a80:	ldr	r1, [r7]
   12a84:	bl	10ccc <fputs_unlocked@plt>
   12a88:	mov	r2, #5
   12a8c:	movw	r1, #43296	; 0xa920
   12a90:	movt	r1, #1
   12a94:	mov	r0, r6
   12a98:	bl	10d68 <dcgettext@plt>
   12a9c:	ldr	r1, [r7]
   12aa0:	bl	10ccc <fputs_unlocked@plt>
   12aa4:	mov	r2, #5
   12aa8:	movw	r1, #43344	; 0xa950
   12aac:	movt	r1, #1
   12ab0:	mov	r0, r6
   12ab4:	bl	10d68 <dcgettext@plt>
   12ab8:	ldr	r1, [r7]
   12abc:	bl	10ccc <fputs_unlocked@plt>
   12ac0:	mov	r2, #5
   12ac4:	movw	r1, #43400	; 0xa988
   12ac8:	movt	r1, #1
   12acc:	mov	r0, r6
   12ad0:	bl	10d68 <dcgettext@plt>
   12ad4:	ldr	r1, [r7]
   12ad8:	bl	10ccc <fputs_unlocked@plt>
   12adc:	ldr	lr, [pc, #560]	; 12d14 <__assert_fail@plt+0x1de4>
   12ae0:	ldr	ip, [lr]
   12ae4:	ldr	r4, [lr, #4]
   12ae8:	ldrd	r8, [lr, #8]
   12aec:	subs	r1, ip, #0
   12af0:	str	ip, [sp]
   12af4:	ldrd	r2, [lr, #16]
   12af8:	str	r4, [sp, #4]
   12afc:	ldrd	r4, [lr, #24]
   12b00:	strd	r8, [sp, #8]
   12b04:	ldrd	r8, [lr, #32]
   12b08:	strd	r2, [sp, #16]
   12b0c:	ldrd	r2, [lr, #40]	; 0x28
   12b10:	strd	r4, [sp, #24]
   12b14:	ldrd	r4, [lr, #48]	; 0x30
   12b18:	strd	r8, [sp, #32]
   12b1c:	strd	r2, [sp, #40]	; 0x28
   12b20:	strd	r4, [sp, #48]	; 0x30
   12b24:	movwne	r5, #42040	; 0xa438
   12b28:	mov	r4, sp
   12b2c:	movtne	r5, #1
   12b30:	bne	12c28 <__assert_fail@plt+0x1cf8>
   12b34:	ldr	r4, [r4, #4]
   12b38:	movw	r1, #43600	; 0xaa50
   12b3c:	movt	r1, #1
   12b40:	mov	r2, #5
   12b44:	cmp	r4, #0
   12b48:	beq	12c3c <__assert_fail@plt+0x1d0c>
   12b4c:	mov	r0, #0
   12b50:	bl	10d68 <dcgettext@plt>
   12b54:	mov	r1, r0
   12b58:	movw	r3, #43624	; 0xaa68
   12b5c:	movt	r3, #1
   12b60:	movw	r2, #43664	; 0xaa90
   12b64:	movt	r2, #1
   12b68:	mov	r0, #1
   12b6c:	bl	10e70 <__printf_chk@plt>
   12b70:	mov	r1, #0
   12b74:	mov	r0, #5
   12b78:	bl	10ec4 <setlocale@plt>
   12b7c:	cmp	r0, #0
   12b80:	movweq	r5, #42040	; 0xa438
   12b84:	movteq	r5, #1
   12b88:	beq	12bac <__assert_fail@plt+0x1c7c>
   12b8c:	movw	r1, #43680	; 0xaaa0
   12b90:	movt	r1, #1
   12b94:	mov	r2, #3
   12b98:	movw	r5, #42040	; 0xa438
   12b9c:	movt	r5, #1
   12ba0:	bl	10f18 <strncmp@plt>
   12ba4:	cmp	r0, #0
   12ba8:	bne	12cf4 <__assert_fail@plt+0x1dc4>
   12bac:	mov	r2, #5
   12bb0:	movw	r1, #43756	; 0xaaec
   12bb4:	movt	r1, #1
   12bb8:	mov	r0, #0
   12bbc:	bl	10d68 <dcgettext@plt>
   12bc0:	mov	r1, r0
   12bc4:	movw	r3, #42040	; 0xa438
   12bc8:	movt	r3, #1
   12bcc:	movw	r2, #43624	; 0xaa68
   12bd0:	movt	r2, #1
   12bd4:	mov	r0, #1
   12bd8:	bl	10e70 <__printf_chk@plt>
   12bdc:	mov	r2, #5
   12be0:	movw	r1, #43784	; 0xab08
   12be4:	movt	r1, #1
   12be8:	mov	r0, #0
   12bec:	bl	10d68 <dcgettext@plt>
   12bf0:	movw	r2, #44024	; 0xabf8
   12bf4:	movt	r2, #1
   12bf8:	cmp	r4, r5
   12bfc:	movw	r3, #43340	; 0xa94c
   12c00:	movt	r3, #1
   12c04:	mov	r1, r0
   12c08:	moveq	r3, r2
   12c0c:	mov	r2, r4
   12c10:	mov	r0, #1
   12c14:	bl	10e70 <__printf_chk@plt>
   12c18:	b	12900 <__assert_fail@plt+0x19d0>
   12c1c:	ldr	r1, [r4, #8]!
   12c20:	cmp	r1, #0
   12c24:	beq	12b34 <__assert_fail@plt+0x1c04>
   12c28:	mov	r0, r5
   12c2c:	bl	10ce4 <strcmp@plt>
   12c30:	cmp	r0, #0
   12c34:	bne	12c1c <__assert_fail@plt+0x1cec>
   12c38:	b	12b34 <__assert_fail@plt+0x1c04>
   12c3c:	mov	r0, r4
   12c40:	bl	10d68 <dcgettext@plt>
   12c44:	mov	r1, r0
   12c48:	movw	r3, #43624	; 0xaa68
   12c4c:	movt	r3, #1
   12c50:	movw	r2, #43664	; 0xaa90
   12c54:	movt	r2, #1
   12c58:	mov	r0, #1
   12c5c:	bl	10e70 <__printf_chk@plt>
   12c60:	mov	r1, r4
   12c64:	mov	r0, #5
   12c68:	bl	10ec4 <setlocale@plt>
   12c6c:	cmp	r0, #0
   12c70:	beq	12c8c <__assert_fail@plt+0x1d5c>
   12c74:	movw	r1, #43680	; 0xaaa0
   12c78:	movt	r1, #1
   12c7c:	mov	r2, #3
   12c80:	bl	10f18 <strncmp@plt>
   12c84:	cmp	r0, #0
   12c88:	bne	12ce8 <__assert_fail@plt+0x1db8>
   12c8c:	mov	r2, #5
   12c90:	movw	r1, #43756	; 0xaaec
   12c94:	movt	r1, #1
   12c98:	mov	r0, #0
   12c9c:	bl	10d68 <dcgettext@plt>
   12ca0:	mov	r1, r0
   12ca4:	movw	r3, #42040	; 0xa438
   12ca8:	movt	r3, #1
   12cac:	movw	r2, #43624	; 0xaa68
   12cb0:	movt	r2, #1
   12cb4:	mov	r0, #1
   12cb8:	bl	10e70 <__printf_chk@plt>
   12cbc:	movw	r1, #43784	; 0xab08
   12cc0:	movt	r1, #1
   12cc4:	mov	r2, #5
   12cc8:	mov	r0, #0
   12ccc:	bl	10d68 <dcgettext@plt>
   12cd0:	movw	r4, #42040	; 0xa438
   12cd4:	movt	r4, #1
   12cd8:	movw	r3, #44024	; 0xabf8
   12cdc:	movt	r3, #1
   12ce0:	mov	r1, r0
   12ce4:	b	12c0c <__assert_fail@plt+0x1cdc>
   12ce8:	movw	r5, #42040	; 0xa438
   12cec:	movt	r5, #1
   12cf0:	mov	r4, r5
   12cf4:	mov	r2, #5
   12cf8:	movw	r1, #43684	; 0xaaa4
   12cfc:	movt	r1, #1
   12d00:	mov	r0, #0
   12d04:	bl	10d68 <dcgettext@plt>
   12d08:	ldr	r1, [r7]
   12d0c:	bl	10ccc <fputs_unlocked@plt>
   12d10:	b	12bac <__assert_fail@plt+0x1c7c>
   12d14:	andeq	sl, r1, r8, lsl #5
   12d18:	add	r2, r2, #8
   12d1c:	strd	r4, [sp, #-12]!
   12d20:	mov	r5, #61	; 0x3d
   12d24:	str	lr, [sp, #8]
   12d28:	movw	lr, #44264	; 0xace8
   12d2c:	movt	lr, #1
   12d30:	b	12e14 <__assert_fail@plt+0x1ee4>
   12d34:	ldrb	r4, [r0, #1]
   12d38:	cmp	r3, #2
   12d3c:	add	ip, ip, r4, lsr #6
   12d40:	and	ip, ip, #31
   12d44:	ldrb	ip, [lr, ip]
   12d48:	strb	ip, [r2, #-7]
   12d4c:	beq	12ec4 <__assert_fail@plt+0x1f94>
   12d50:	ubfx	ip, r4, #1, #5
   12d54:	cmp	r3, #3
   12d58:	ldrb	ip, [lr, ip]
   12d5c:	strb	ip, [r2, #-6]
   12d60:	beq	12ec4 <__assert_fail@plt+0x1f94>
   12d64:	cmp	r1, #2
   12d68:	lsl	r4, r4, #4
   12d6c:	beq	12eb0 <__assert_fail@plt+0x1f80>
   12d70:	ldrb	ip, [r0, #2]
   12d74:	cmp	r3, #4
   12d78:	add	r4, r4, ip, lsr #4
   12d7c:	and	r4, r4, #31
   12d80:	ldrb	r4, [lr, r4]
   12d84:	strb	r4, [r2, #-5]
   12d88:	beq	12ec4 <__assert_fail@plt+0x1f94>
   12d8c:	cmp	r1, #3
   12d90:	lsl	r4, ip, #1
   12d94:	beq	12ed0 <__assert_fail@plt+0x1fa0>
   12d98:	ldrb	ip, [r0, #3]
   12d9c:	cmp	r3, #5
   12da0:	add	r4, r4, ip, lsr #7
   12da4:	and	r4, r4, #31
   12da8:	ldrb	r4, [lr, r4]
   12dac:	strb	r4, [r2, #-4]
   12db0:	beq	12ec4 <__assert_fail@plt+0x1f94>
   12db4:	ubfx	r4, ip, #2, #5
   12db8:	cmp	r3, #6
   12dbc:	ldrb	r4, [lr, r4]
   12dc0:	strb	r4, [r2, #-3]
   12dc4:	beq	12ec4 <__assert_fail@plt+0x1f94>
   12dc8:	cmp	r1, #4
   12dcc:	lsl	ip, ip, #3
   12dd0:	beq	12ef0 <__assert_fail@plt+0x1fc0>
   12dd4:	ldrb	r4, [r0, #4]
   12dd8:	cmp	r3, #7
   12ddc:	add	ip, ip, r4, lsr #5
   12de0:	and	ip, ip, #31
   12de4:	ldrb	ip, [lr, ip]
   12de8:	strb	ip, [r2, #-2]
   12dec:	beq	12ec4 <__assert_fail@plt+0x1f94>
   12df0:	and	r4, r4, #31
   12df4:	cmp	r3, #8
   12df8:	ldrb	ip, [lr, r4]
   12dfc:	strb	ip, [r2, #-1]
   12e00:	beq	12ec4 <__assert_fail@plt+0x1f94>
   12e04:	subs	r1, r1, #5
   12e08:	addne	r0, r0, #5
   12e0c:	sub	r3, r3, #8
   12e10:	add	r2, r2, #8
   12e14:	adds	ip, r3, #0
   12e18:	movne	ip, #1
   12e1c:	cmp	r1, #0
   12e20:	moveq	ip, #0
   12e24:	cmp	ip, #0
   12e28:	beq	12f08 <__assert_fail@plt+0x1fd8>
   12e2c:	ldrb	ip, [r0]
   12e30:	cmp	r3, #1
   12e34:	ldrb	r4, [lr, ip, lsr #3]
   12e38:	strb	r4, [r2, #-8]
   12e3c:	beq	12ec4 <__assert_fail@plt+0x1f94>
   12e40:	cmp	r1, #1
   12e44:	lsl	ip, ip, #2
   12e48:	bne	12d34 <__assert_fail@plt+0x1e04>
   12e4c:	and	ip, ip, #31
   12e50:	cmp	r3, #2
   12e54:	ldrb	r1, [lr, ip]
   12e58:	strb	r1, [r2, #-7]
   12e5c:	beq	12ec4 <__assert_fail@plt+0x1f94>
   12e60:	cmp	r3, #3
   12e64:	strb	r5, [r2, #-6]
   12e68:	beq	12ec4 <__assert_fail@plt+0x1f94>
   12e6c:	cmp	r3, #4
   12e70:	strb	r5, [r2, #-5]
   12e74:	beq	12ec4 <__assert_fail@plt+0x1f94>
   12e78:	cmp	r3, #5
   12e7c:	strb	r5, [r2, #-4]
   12e80:	beq	12ec4 <__assert_fail@plt+0x1f94>
   12e84:	cmp	r3, #6
   12e88:	strb	r5, [r2, #-3]
   12e8c:	beq	12ec4 <__assert_fail@plt+0x1f94>
   12e90:	cmp	r3, #7
   12e94:	strb	r5, [r2, #-2]
   12e98:	beq	12ec4 <__assert_fail@plt+0x1f94>
   12e9c:	cmp	r3, #8
   12ea0:	strb	r5, [r2, #-1]
   12ea4:	beq	12ec4 <__assert_fail@plt+0x1f94>
   12ea8:	mov	r1, #0
   12eac:	b	12e0c <__assert_fail@plt+0x1edc>
   12eb0:	and	r4, r4, #31
   12eb4:	cmp	r3, #4
   12eb8:	ldrb	r1, [lr, r4]
   12ebc:	strb	r1, [r2, #-5]
   12ec0:	bne	12e78 <__assert_fail@plt+0x1f48>
   12ec4:	ldrd	r4, [sp]
   12ec8:	add	sp, sp, #8
   12ecc:	pop	{pc}		; (ldr pc, [sp], #4)
   12ed0:	and	ip, r4, #31
   12ed4:	cmp	r3, #5
   12ed8:	ldrb	r1, [lr, ip]
   12edc:	strb	r1, [r2, #-4]
   12ee0:	bne	12e84 <__assert_fail@plt+0x1f54>
   12ee4:	ldrd	r4, [sp]
   12ee8:	add	sp, sp, #8
   12eec:	pop	{pc}		; (ldr pc, [sp], #4)
   12ef0:	and	ip, ip, #31
   12ef4:	cmp	r3, #7
   12ef8:	ldrb	r1, [lr, ip]
   12efc:	strb	r1, [r2, #-2]
   12f00:	beq	12ec4 <__assert_fail@plt+0x1f94>
   12f04:	b	12e9c <__assert_fail@plt+0x1f6c>
   12f08:	cmp	r3, #0
   12f0c:	strbne	ip, [r2, #-8]
   12f10:	b	12ec4 <__assert_fail@plt+0x1f94>
   12f14:	movw	ip, #26215	; 0x6667
   12f18:	movt	ip, #26214	; 0x6666
   12f1c:	strd	r4, [sp, #-24]!	; 0xffffffe8
   12f20:	asr	r3, r1, #31
   12f24:	strd	r6, [sp, #8]
   12f28:	str	lr, [sp, #20]
   12f2c:	smull	lr, ip, ip, r1
   12f30:	str	r8, [sp, #16]
   12f34:	rsb	r3, r3, ip, asr #1
   12f38:	add	ip, r3, r3, lsl #2
   12f3c:	cmp	r1, ip
   12f40:	addne	r3, r3, #1
   12f44:	asr	r7, r3, #31
   12f48:	lsl	r5, r3, #3
   12f4c:	lsl	ip, r7, #3
   12f50:	orr	ip, ip, r3, lsr #29
   12f54:	cmp	ip, r5, asr #31
   12f58:	movne	r3, #1
   12f5c:	moveq	r3, #0
   12f60:	orrs	r3, r3, r1, lsr #31
   12f64:	beq	12f8c <__assert_fail@plt+0x205c>
   12f68:	mov	r3, #0
   12f6c:	mov	r5, r3
   12f70:	str	r3, [r2]
   12f74:	mov	r0, r5
   12f78:	ldrd	r4, [sp]
   12f7c:	ldrd	r6, [sp, #8]
   12f80:	ldr	r8, [sp, #16]
   12f84:	add	sp, sp, #20
   12f88:	pop	{pc}		; (ldr pc, [sp], #4)
   12f8c:	add	r8, r5, #1
   12f90:	mov	r7, r0
   12f94:	mov	r0, r8
   12f98:	mov	r6, r2
   12f9c:	mov	r4, r1
   12fa0:	bl	19b58 <__assert_fail@plt+0x8c28>
   12fa4:	cmp	r0, #0
   12fa8:	str	r0, [r6]
   12fac:	moveq	r5, r8
   12fb0:	beq	12f74 <__assert_fail@plt+0x2044>
   12fb4:	mov	r2, r0
   12fb8:	mov	r3, r8
   12fbc:	mov	r1, r4
   12fc0:	mov	r0, r7
   12fc4:	bl	12d18 <__assert_fail@plt+0x1de8>
   12fc8:	b	12f74 <__assert_fail@plt+0x2044>
   12fcc:	movw	r3, #44264	; 0xace8
   12fd0:	movt	r3, #1
   12fd4:	add	r0, r3, r0
   12fd8:	ldrb	r0, [r0, #32]
   12fdc:	mvn	r0, r0
   12fe0:	ubfx	r0, r0, #7, #1
   12fe4:	bx	lr
   12fe8:	mov	r3, #0
   12fec:	str	r3, [r0]
   12ff0:	bx	lr
   12ff4:	strd	r4, [sp, #-36]!	; 0xffffffdc
   12ff8:	mov	r4, r1
   12ffc:	mov	r5, r2
   13000:	strd	r6, [sp, #8]
   13004:	mov	r7, r3
   13008:	strd	r8, [sp, #16]
   1300c:	subs	r8, r0, #0
   13010:	movne	r3, #1
   13014:	moveq	r3, #0
   13018:	strd	sl, [sp, #24]
   1301c:	str	lr, [sp, #32]
   13020:	sub	sp, sp, #20
   13024:	str	r3, [sp, #8]
   13028:	ldr	r3, [sp, #56]	; 0x38
   1302c:	ldr	r9, [r3]
   13030:	beq	1353c <__assert_fail@plt+0x260c>
   13034:	adds	sl, r2, #0
   13038:	ldr	r3, [r8]
   1303c:	movne	sl, #1
   13040:	cmp	r3, #0
   13044:	moveq	r3, sl
   13048:	movne	r3, #0
   1304c:	str	r3, [sp, #4]
   13050:	movw	r6, #44264	; 0xace8
   13054:	movt	r6, #1
   13058:	add	r3, r8, #4
   1305c:	str	r3, [sp, #12]
   13060:	ldr	r3, [sp, #4]
   13064:	cmp	r3, #0
   13068:	bne	13118 <__assert_fail@plt+0x21e8>
   1306c:	cmp	r5, #0
   13070:	moveq	r0, sl
   13074:	movne	r0, #0
   13078:	cmp	r0, #0
   1307c:	bne	130c4 <__assert_fail@plt+0x2194>
   13080:	cmp	r5, #0
   13084:	bne	13240 <__assert_fail@plt+0x2310>
   13088:	cmp	r8, #0
   1308c:	beq	13558 <__assert_fail@plt+0x2628>
   13090:	ldr	r5, [r8]
   13094:	cmp	r5, #8
   13098:	beq	13374 <__assert_fail@plt+0x2444>
   1309c:	mov	fp, r4
   130a0:	cmp	r5, #0
   130a4:	ldr	r2, [sp, #12]
   130a8:	beq	13558 <__assert_fail@plt+0x2628>
   130ac:	cmp	r5, #7
   130b0:	mov	r3, r4
   130b4:	mov	r4, r2
   130b8:	bgt	13270 <__assert_fail@plt+0x2340>
   130bc:	ldr	r0, [sp, #8]
   130c0:	and	r0, r0, sl
   130c4:	ldr	r3, [sp, #56]	; 0x38
   130c8:	ldr	r3, [r3]
   130cc:	sub	r9, r3, r9
   130d0:	ldr	r3, [sp, #56]	; 0x38
   130d4:	str	r9, [r3]
   130d8:	add	sp, sp, #20
   130dc:	ldrd	r4, [sp]
   130e0:	ldrd	r6, [sp, #8]
   130e4:	ldrd	r8, [sp, #16]
   130e8:	ldrd	sl, [sp, #24]
   130ec:	add	sp, sp, #32
   130f0:	pop	{pc}		; (ldr pc, [sp], #4)
   130f4:	cmp	r3, #61	; 0x3d
   130f8:	beq	1310c <__assert_fail@plt+0x21dc>
   130fc:	add	r3, r6, r3
   13100:	ldrsb	r3, [r3, #32]
   13104:	cmp	r3, #0
   13108:	blt	13244 <__assert_fail@plt+0x2314>
   1310c:	mov	r9, r0
   13110:	sub	r5, r5, #8
   13114:	add	r4, r4, #8
   13118:	cmp	r5, #7
   1311c:	ble	1306c <__assert_fail@plt+0x213c>
   13120:	ldrb	r3, [r4]
   13124:	add	r3, r6, r3
   13128:	ldrsb	r3, [r3, #32]
   1312c:	cmp	r3, #0
   13130:	blt	13240 <__assert_fail@plt+0x2310>
   13134:	ldrb	r2, [r4, #1]
   13138:	add	r2, r6, r2
   1313c:	ldrsb	r1, [r2, #32]
   13140:	cmp	r1, #0
   13144:	blt	13240 <__assert_fail@plt+0x2310>
   13148:	cmp	r9, #0
   1314c:	moveq	r0, r9
   13150:	beq	13164 <__assert_fail@plt+0x2234>
   13154:	asr	r2, r1, #2
   13158:	sub	r0, r9, #1
   1315c:	orr	r3, r2, r3, lsl #3
   13160:	strb	r3, [r7], #1
   13164:	ldrb	r3, [r4, #2]
   13168:	cmp	r3, #61	; 0x3d
   1316c:	beq	13314 <__assert_fail@plt+0x23e4>
   13170:	add	r3, r6, r3
   13174:	ldrsb	r2, [r3, #32]
   13178:	cmp	r2, #0
   1317c:	blt	13244 <__assert_fail@plt+0x2314>
   13180:	ldrb	r3, [r4, #3]
   13184:	add	r3, r6, r3
   13188:	ldrsb	ip, [r3, #32]
   1318c:	cmp	ip, #0
   13190:	blt	13244 <__assert_fail@plt+0x2314>
   13194:	cmp	r0, #0
   13198:	ldrb	r3, [r4, #4]
   1319c:	bne	13380 <__assert_fail@plt+0x2450>
   131a0:	cmp	r3, #61	; 0x3d
   131a4:	beq	1332c <__assert_fail@plt+0x23fc>
   131a8:	add	r3, r6, r3
   131ac:	ldrsb	r2, [r3, #32]
   131b0:	cmp	r2, #0
   131b4:	blt	13244 <__assert_fail@plt+0x2314>
   131b8:	ldrb	r3, [r4, #5]
   131bc:	cmp	r3, #61	; 0x3d
   131c0:	beq	13338 <__assert_fail@plt+0x2408>
   131c4:	add	r3, r6, r3
   131c8:	ldrsb	r1, [r3, #32]
   131cc:	cmp	r1, #0
   131d0:	blt	13244 <__assert_fail@plt+0x2314>
   131d4:	ldrb	r3, [r4, #6]
   131d8:	add	r3, r6, r3
   131dc:	ldrsb	ip, [r3, #32]
   131e0:	cmp	ip, #0
   131e4:	blt	13244 <__assert_fail@plt+0x2314>
   131e8:	cmp	r0, #0
   131ec:	ldrb	r3, [r4, #7]
   131f0:	beq	130f4 <__assert_fail@plt+0x21c4>
   131f4:	asr	fp, ip, #3
   131f8:	mov	lr, r7
   131fc:	cmp	r3, #61	; 0x3d
   13200:	orr	fp, fp, r1, lsl #2
   13204:	sub	r1, r0, #1
   13208:	orr	r2, fp, r2, lsl #7
   1320c:	strb	r2, [lr], #1
   13210:	beq	13560 <__assert_fail@plt+0x2630>
   13214:	add	r3, r6, r3
   13218:	ldrsb	r3, [r3, #32]
   1321c:	cmp	r3, #0
   13220:	blt	13638 <__assert_fail@plt+0x2708>
   13224:	cmp	r1, #0
   13228:	beq	13560 <__assert_fail@plt+0x2630>
   1322c:	orr	r3, r3, ip, lsl #5
   13230:	sub	r9, r0, #2
   13234:	add	r7, r7, #2
   13238:	strb	r3, [r7, #-1]
   1323c:	b	13110 <__assert_fail@plt+0x21e0>
   13240:	mov	r0, r9
   13244:	ldrb	r3, [r4]
   13248:	cmp	r3, #10
   1324c:	beq	1335c <__assert_fail@plt+0x242c>
   13250:	sub	r3, r9, r0
   13254:	cmp	r8, #0
   13258:	sub	r7, r7, r3
   1325c:	add	fp, r4, r5
   13260:	bne	13594 <__assert_fail@plt+0x2664>
   13264:	cmp	r5, #7
   13268:	mov	r3, r4
   1326c:	ble	130bc <__assert_fail@plt+0x218c>
   13270:	mov	r2, r4
   13274:	mov	r4, r3
   13278:	ldrb	r3, [r2]
   1327c:	add	r3, r6, r3
   13280:	ldrsb	r1, [r3, #32]
   13284:	cmp	r1, #0
   13288:	blt	1330c <__assert_fail@plt+0x23dc>
   1328c:	ldrb	r3, [r2, #1]
   13290:	add	r3, r6, r3
   13294:	ldrsb	r0, [r3, #32]
   13298:	cmp	r0, #0
   1329c:	blt	1330c <__assert_fail@plt+0x23dc>
   132a0:	cmp	r9, #0
   132a4:	beq	132b8 <__assert_fail@plt+0x2388>
   132a8:	asr	r3, r0, #2
   132ac:	sub	r9, r9, #1
   132b0:	orr	r1, r3, r1, lsl #3
   132b4:	strb	r1, [r7], #1
   132b8:	ldrb	r3, [r2, #2]
   132bc:	cmp	r3, #61	; 0x3d
   132c0:	beq	133d0 <__assert_fail@plt+0x24a0>
   132c4:	add	r3, r6, r3
   132c8:	ldrsb	r3, [r3, #32]
   132cc:	cmp	r3, #0
   132d0:	blt	1330c <__assert_fail@plt+0x23dc>
   132d4:	ldrb	r1, [r2, #3]
   132d8:	add	r1, r6, r1
   132dc:	ldrsb	ip, [r1, #32]
   132e0:	cmp	ip, #0
   132e4:	blt	1330c <__assert_fail@plt+0x23dc>
   132e8:	cmp	r9, #0
   132ec:	ldrb	r1, [r2, #4]
   132f0:	bne	13428 <__assert_fail@plt+0x24f8>
   132f4:	cmp	r1, #61	; 0x3d
   132f8:	beq	1350c <__assert_fail@plt+0x25dc>
   132fc:	add	r1, r6, r1
   13300:	ldrsb	r1, [r1, #32]
   13304:	cmp	r1, #0
   13308:	bge	13478 <__assert_fail@plt+0x2548>
   1330c:	mov	r0, #0
   13310:	b	130c4 <__assert_fail@plt+0x2194>
   13314:	ldrb	r3, [r4, #3]
   13318:	cmp	r3, #61	; 0x3d
   1331c:	bne	13244 <__assert_fail@plt+0x2314>
   13320:	ldrb	r3, [r4, #4]
   13324:	cmp	r3, #61	; 0x3d
   13328:	bne	13244 <__assert_fail@plt+0x2314>
   1332c:	ldrb	r3, [r4, #5]
   13330:	cmp	r3, #61	; 0x3d
   13334:	bne	13244 <__assert_fail@plt+0x2314>
   13338:	ldrb	r3, [r4, #6]
   1333c:	cmp	r3, #61	; 0x3d
   13340:	bne	13244 <__assert_fail@plt+0x2314>
   13344:	ldrb	r3, [r4, #7]
   13348:	cmp	r3, #61	; 0x3d
   1334c:	beq	1310c <__assert_fail@plt+0x21dc>
   13350:	ldrb	r3, [r4]
   13354:	cmp	r3, #10
   13358:	bne	13250 <__assert_fail@plt+0x2320>
   1335c:	cmp	r8, #0
   13360:	beq	13414 <__assert_fail@plt+0x24e4>
   13364:	add	r4, r4, #1
   13368:	sub	r5, r5, #1
   1336c:	mov	r9, r0
   13370:	b	13060 <__assert_fail@plt+0x2130>
   13374:	str	r0, [r8]
   13378:	mov	r0, #1
   1337c:	b	130c4 <__assert_fail@plt+0x2194>
   13380:	asr	fp, ip, #4
   13384:	mov	lr, r7
   13388:	cmp	r3, #61	; 0x3d
   1338c:	orr	r1, fp, r1, lsl #6
   13390:	sub	fp, r0, #1
   13394:	orr	r2, r1, r2, lsl #1
   13398:	strb	r2, [lr], #1
   1339c:	beq	13500 <__assert_fail@plt+0x25d0>
   133a0:	add	r3, r6, r3
   133a4:	ldrsb	r2, [r3, #32]
   133a8:	cmp	r2, #0
   133ac:	blt	1354c <__assert_fail@plt+0x261c>
   133b0:	cmp	fp, #0
   133b4:	beq	13588 <__assert_fail@plt+0x2658>
   133b8:	asr	r3, r2, #1
   133bc:	sub	r0, r0, #2
   133c0:	add	r7, r7, #2
   133c4:	orr	ip, r3, ip, lsl #4
   133c8:	strb	ip, [r7, #-1]
   133cc:	b	131b8 <__assert_fail@plt+0x2288>
   133d0:	ldrb	r3, [r2, #3]
   133d4:	cmp	r3, #61	; 0x3d
   133d8:	bne	1330c <__assert_fail@plt+0x23dc>
   133dc:	ldrb	r3, [r2, #4]
   133e0:	cmp	r3, #61	; 0x3d
   133e4:	bne	1330c <__assert_fail@plt+0x23dc>
   133e8:	ldrb	r3, [r2, #5]
   133ec:	cmp	r3, #61	; 0x3d
   133f0:	bne	1330c <__assert_fail@plt+0x23dc>
   133f4:	ldrb	r3, [r2, #6]
   133f8:	cmp	r3, #61	; 0x3d
   133fc:	bne	1330c <__assert_fail@plt+0x23dc>
   13400:	ldrb	r3, [r2, #7]
   13404:	cmp	r3, #61	; 0x3d
   13408:	bne	1330c <__assert_fail@plt+0x23dc>
   1340c:	sub	r5, fp, r4
   13410:	b	13060 <__assert_fail@plt+0x2130>
   13414:	sub	r3, r9, r0
   13418:	add	fp, r4, r5
   1341c:	sub	r7, r7, r3
   13420:	mov	r2, r4
   13424:	b	130ac <__assert_fail@plt+0x217c>
   13428:	lsl	r3, r3, #1
   1342c:	mov	r5, r7
   13430:	cmp	r1, #61	; 0x3d
   13434:	sub	lr, r9, #1
   13438:	orr	r0, r3, r0, lsl #6
   1343c:	moveq	r9, lr
   13440:	orr	r0, r0, ip, asr #4
   13444:	strb	r0, [r5], #1
   13448:	beq	13510 <__assert_fail@plt+0x25e0>
   1344c:	add	r1, r6, r1
   13450:	ldrsb	r1, [r1, #32]
   13454:	cmp	r1, #0
   13458:	blt	13620 <__assert_fail@plt+0x26f0>
   1345c:	cmp	lr, #0
   13460:	beq	1362c <__assert_fail@plt+0x26fc>
   13464:	asr	r3, r1, #1
   13468:	sub	r9, r9, #2
   1346c:	add	r7, r7, #2
   13470:	orr	ip, r3, ip, lsl #4
   13474:	strb	ip, [r7, #-1]
   13478:	ldrb	r3, [r2, #5]
   1347c:	cmp	r3, #61	; 0x3d
   13480:	beq	133f4 <__assert_fail@plt+0x24c4>
   13484:	add	r3, r6, r3
   13488:	ldrsb	r0, [r3, #32]
   1348c:	cmp	r0, #0
   13490:	blt	1330c <__assert_fail@plt+0x23dc>
   13494:	ldrb	r3, [r2, #6]
   13498:	add	r3, r6, r3
   1349c:	ldrsb	ip, [r3, #32]
   134a0:	cmp	ip, #0
   134a4:	blt	1330c <__assert_fail@plt+0x23dc>
   134a8:	cmp	r9, #0
   134ac:	ldrb	r3, [r2, #7]
   134b0:	beq	1356c <__assert_fail@plt+0x263c>
   134b4:	asr	lr, ip, #3
   134b8:	mov	r2, r7
   134bc:	cmp	r3, #61	; 0x3d
   134c0:	sub	r5, r9, #1
   134c4:	orr	r0, lr, r0, lsl #2
   134c8:	orr	r1, r0, r1, lsl #7
   134cc:	strb	r1, [r2], #1
   134d0:	beq	13644 <__assert_fail@plt+0x2714>
   134d4:	add	r3, r6, r3
   134d8:	ldrsb	r3, [r3, #32]
   134dc:	cmp	r3, #0
   134e0:	blt	1365c <__assert_fail@plt+0x272c>
   134e4:	cmp	r5, #0
   134e8:	beq	13644 <__assert_fail@plt+0x2714>
   134ec:	orr	r3, r3, ip, lsl #5
   134f0:	sub	r9, r9, #2
   134f4:	add	r7, r7, #2
   134f8:	strb	r3, [r7, #-1]
   134fc:	b	1340c <__assert_fail@plt+0x24dc>
   13500:	mov	r0, fp
   13504:	mov	r7, lr
   13508:	b	1332c <__assert_fail@plt+0x23fc>
   1350c:	mov	r5, r7
   13510:	ldrb	r3, [r2, #5]
   13514:	cmp	r3, #61	; 0x3d
   13518:	bne	1330c <__assert_fail@plt+0x23dc>
   1351c:	ldrb	r3, [r2, #6]
   13520:	cmp	r3, #61	; 0x3d
   13524:	bne	1330c <__assert_fail@plt+0x23dc>
   13528:	ldrb	r3, [r2, #7]
   1352c:	cmp	r3, #61	; 0x3d
   13530:	bne	1330c <__assert_fail@plt+0x23dc>
   13534:	mov	r7, r5
   13538:	b	1340c <__assert_fail@plt+0x24dc>
   1353c:	mov	r3, #1
   13540:	mov	sl, r3
   13544:	str	r3, [sp, #4]
   13548:	b	13050 <__assert_fail@plt+0x2120>
   1354c:	mov	r0, fp
   13550:	mov	r7, lr
   13554:	b	13244 <__assert_fail@plt+0x2314>
   13558:	mov	r0, #1
   1355c:	b	130c4 <__assert_fail@plt+0x2194>
   13560:	mov	r9, r1
   13564:	mov	r7, lr
   13568:	b	13110 <__assert_fail@plt+0x21e0>
   1356c:	cmp	r3, #61	; 0x3d
   13570:	beq	1340c <__assert_fail@plt+0x24dc>
   13574:	add	r3, r6, r3
   13578:	ldrsb	r3, [r3, #32]
   1357c:	cmp	r3, #0
   13580:	bge	1340c <__assert_fail@plt+0x24dc>
   13584:	b	1330c <__assert_fail@plt+0x23dc>
   13588:	mov	r0, fp
   1358c:	mov	r7, lr
   13590:	b	131b8 <__assert_fail@plt+0x2288>
   13594:	ldr	r2, [r8]
   13598:	cmp	r5, #7
   1359c:	movle	r3, #0
   135a0:	movgt	r3, #1
   135a4:	cmp	r2, #8
   135a8:	beq	13650 <__assert_fail@plt+0x2720>
   135ac:	cmp	r2, #0
   135b0:	mov	r5, r2
   135b4:	movne	r3, #0
   135b8:	cmp	r3, #0
   135bc:	beq	135d8 <__assert_fail@plt+0x26a8>
   135c0:	mov	r2, #8
   135c4:	mov	r1, #10
   135c8:	mov	r0, r4
   135cc:	bl	10e94 <memchr@plt>
   135d0:	cmp	r0, #0
   135d4:	beq	13614 <__assert_fail@plt+0x26e4>
   135d8:	cmp	fp, r4
   135dc:	bls	130a0 <__assert_fail@plt+0x2170>
   135e0:	ldrb	r1, [r4], #1
   135e4:	add	r3, r5, #1
   135e8:	mov	r2, r8
   135ec:	cmp	r1, #10
   135f0:	beq	13608 <__assert_fail@plt+0x26d8>
   135f4:	cmp	r3, #8
   135f8:	str	r3, [r2], r5
   135fc:	mov	r5, r3
   13600:	strb	r1, [r2, #4]
   13604:	beq	130a0 <__assert_fail@plt+0x2170>
   13608:	cmp	r4, fp
   1360c:	bne	135e0 <__assert_fail@plt+0x26b0>
   13610:	b	130a0 <__assert_fail@plt+0x2170>
   13614:	mov	r2, r4
   13618:	add	r4, r4, #8
   1361c:	b	13278 <__assert_fail@plt+0x2348>
   13620:	mov	r9, lr
   13624:	mov	r0, #0
   13628:	b	130c4 <__assert_fail@plt+0x2194>
   1362c:	mov	r9, lr
   13630:	mov	r7, r5
   13634:	b	13478 <__assert_fail@plt+0x2548>
   13638:	mov	r0, r1
   1363c:	mov	r7, lr
   13640:	b	13244 <__assert_fail@plt+0x2314>
   13644:	mov	r9, r5
   13648:	mov	r7, r2
   1364c:	b	1340c <__assert_fail@plt+0x24dc>
   13650:	mov	r5, #0
   13654:	str	r5, [r8]
   13658:	b	135b8 <__assert_fail@plt+0x2688>
   1365c:	mov	r9, r5
   13660:	b	1330c <__assert_fail@plt+0x23dc>
   13664:	strd	r4, [sp, #-20]!	; 0xffffffec
   13668:	mov	r5, r3
   1366c:	mov	r4, r2
   13670:	strd	r6, [sp, #8]
   13674:	mov	r6, r0
   13678:	asr	r0, r2, #3
   1367c:	str	lr, [sp, #16]
   13680:	sub	sp, sp, #20
   13684:	mov	r7, r1
   13688:	add	r3, r0, #1
   1368c:	add	r3, r3, r3, lsl #2
   13690:	mov	r0, r3
   13694:	str	r3, [sp, #12]
   13698:	bl	19b58 <__assert_fail@plt+0x8c28>
   1369c:	cmp	r0, #0
   136a0:	str	r0, [r5]
   136a4:	beq	136fc <__assert_fail@plt+0x27cc>
   136a8:	add	ip, sp, #12
   136ac:	mov	r3, r0
   136b0:	mov	r2, r4
   136b4:	mov	r1, r7
   136b8:	mov	r0, r6
   136bc:	str	ip, [sp]
   136c0:	bl	12ff4 <__assert_fail@plt+0x20c4>
   136c4:	subs	r4, r0, #0
   136c8:	beq	13704 <__assert_fail@plt+0x27d4>
   136cc:	ldr	r3, [sp, #40]	; 0x28
   136d0:	cmp	r3, #0
   136d4:	beq	136fc <__assert_fail@plt+0x27cc>
   136d8:	mov	r2, r3
   136dc:	ldr	r3, [sp, #12]
   136e0:	str	r3, [r2]
   136e4:	mov	r0, r4
   136e8:	add	sp, sp, #20
   136ec:	ldrd	r4, [sp]
   136f0:	ldrd	r6, [sp, #8]
   136f4:	add	sp, sp, #16
   136f8:	pop	{pc}		; (ldr pc, [sp], #4)
   136fc:	mov	r4, #1
   13700:	b	136e4 <__assert_fail@plt+0x27b4>
   13704:	ldr	r0, [r5]
   13708:	bl	14110 <__assert_fail@plt+0x31e0>
   1370c:	str	r4, [r5]
   13710:	b	136e4 <__assert_fail@plt+0x27b4>
   13714:	tst	r3, #3
   13718:	mov	ip, r3
   1371c:	strd	r4, [sp, #-20]!	; 0xffffffec
   13720:	strd	r6, [sp, #8]
   13724:	str	lr, [sp, #16]
   13728:	bne	1373c <__assert_fail@plt+0x280c>
   1372c:	asr	r3, r3, #2
   13730:	add	r3, r3, r3, lsl #1
   13734:	cmp	r3, r1
   13738:	beq	13868 <__assert_fail@plt+0x2938>
   1373c:	movw	r4, #44552	; 0xae08
   13740:	movt	r4, #1
   13744:	add	r2, r2, #4
   13748:	mov	r5, #61	; 0x3d
   1374c:	b	137b8 <__assert_fail@plt+0x2888>
   13750:	ldrb	lr, [r0, #1]
   13754:	cmp	ip, #2
   13758:	add	r3, r3, lr, lsr #4
   1375c:	and	r3, r3, #63	; 0x3f
   13760:	ldrb	r3, [r4, r3]
   13764:	strb	r3, [r2, #-3]
   13768:	beq	1383c <__assert_fail@plt+0x290c>
   1376c:	cmp	r1, #2
   13770:	lsl	lr, lr, #2
   13774:	beq	13828 <__assert_fail@plt+0x28f8>
   13778:	ldrb	r3, [r0, #2]
   1377c:	cmp	ip, #3
   13780:	add	lr, lr, r3, lsr #6
   13784:	and	lr, lr, #63	; 0x3f
   13788:	ldrb	lr, [r4, lr]
   1378c:	strb	lr, [r2, #-2]
   13790:	beq	1383c <__assert_fail@plt+0x290c>
   13794:	and	r3, r3, #63	; 0x3f
   13798:	cmp	ip, #4
   1379c:	ldrb	r3, [r4, r3]
   137a0:	strb	r3, [r2, #-1]
   137a4:	beq	1383c <__assert_fail@plt+0x290c>
   137a8:	subs	r1, r1, #3
   137ac:	addne	r0, r0, #3
   137b0:	sub	ip, ip, #4
   137b4:	add	r2, r2, #4
   137b8:	adds	r3, ip, #0
   137bc:	sub	lr, r2, #4
   137c0:	movne	r3, #1
   137c4:	cmp	r1, #0
   137c8:	moveq	r3, #0
   137cc:	cmp	r3, #0
   137d0:	beq	1384c <__assert_fail@plt+0x291c>
   137d4:	ldrb	r3, [r0]
   137d8:	cmp	ip, #1
   137dc:	ldrb	lr, [r4, r3, lsr #2]
   137e0:	strb	lr, [r2, #-4]
   137e4:	beq	1383c <__assert_fail@plt+0x290c>
   137e8:	cmp	r1, #1
   137ec:	lsl	r3, r3, #4
   137f0:	bne	13750 <__assert_fail@plt+0x2820>
   137f4:	and	r3, r3, #63	; 0x3f
   137f8:	cmp	ip, #2
   137fc:	ldrb	r3, [r4, r3]
   13800:	strb	r3, [r2, #-3]
   13804:	beq	1383c <__assert_fail@plt+0x290c>
   13808:	cmp	ip, #3
   1380c:	strb	r5, [r2, #-2]
   13810:	beq	1383c <__assert_fail@plt+0x290c>
   13814:	cmp	ip, #4
   13818:	strb	r5, [r2, #-1]
   1381c:	beq	1383c <__assert_fail@plt+0x290c>
   13820:	mov	r1, #0
   13824:	b	137b0 <__assert_fail@plt+0x2880>
   13828:	and	lr, lr, #63	; 0x3f
   1382c:	cmp	ip, #3
   13830:	ldrb	r3, [r4, lr]
   13834:	strb	r3, [r2, #-2]
   13838:	bne	13814 <__assert_fail@plt+0x28e4>
   1383c:	ldrd	r4, [sp]
   13840:	ldrd	r6, [sp, #8]
   13844:	add	sp, sp, #16
   13848:	pop	{pc}		; (ldr pc, [sp], #4)
   1384c:	cmp	ip, #0
   13850:	beq	1383c <__assert_fail@plt+0x290c>
   13854:	strb	r3, [r2, #-4]
   13858:	ldrd	r4, [sp]
   1385c:	ldrd	r6, [sp, #8]
   13860:	add	sp, sp, #16
   13864:	pop	{pc}		; (ldr pc, [sp], #4)
   13868:	cmp	r3, #0
   1386c:	beq	1383c <__assert_fail@plt+0x290c>
   13870:	add	r3, r3, #3
   13874:	movw	r5, #44552	; 0xae08
   13878:	movt	r5, #1
   1387c:	add	r3, r0, r3
   13880:	add	r0, r0, #3
   13884:	ldrb	r6, [r0, #-2]
   13888:	mov	r1, #0
   1388c:	add	r0, r0, #3
   13890:	ldrb	r4, [r0, #-4]
   13894:	ldrb	r7, [r0, #-6]
   13898:	cmp	r3, r0
   1389c:	lsr	lr, r6, #4
   138a0:	lsr	ip, r4, #6
   138a4:	and	r4, r4, #63	; 0x3f
   138a8:	ldrb	r4, [r5, r4]
   138ac:	add	lr, lr, r7, lsl #4
   138b0:	ldrb	r7, [r5, r7, lsr #2]
   138b4:	add	ip, ip, r6, lsl #2
   138b8:	and	lr, lr, #63	; 0x3f
   138bc:	ldrb	lr, [r5, lr]
   138c0:	and	ip, ip, #63	; 0x3f
   138c4:	ldrb	ip, [r5, ip]
   138c8:	bfi	r1, r7, #0, #8
   138cc:	bfi	r1, lr, #8, #8
   138d0:	bfi	r1, ip, #16, #8
   138d4:	bfi	r1, r4, #24, #8
   138d8:	str	r1, [r2], #4
   138dc:	bne	13884 <__assert_fail@plt+0x2954>
   138e0:	b	1383c <__assert_fail@plt+0x290c>
   138e4:	movw	r3, #21846	; 0x5556
   138e8:	movt	r3, #21845	; 0x5555
   138ec:	strd	r4, [sp, #-24]!	; 0xffffffe8
   138f0:	strd	r6, [sp, #8]
   138f4:	smull	ip, r3, r3, r1
   138f8:	str	r8, [sp, #16]
   138fc:	str	lr, [sp, #20]
   13900:	sub	r3, r3, r1, asr #31
   13904:	add	ip, r3, r3, lsl #1
   13908:	cmp	r1, ip
   1390c:	addne	r3, r3, #1
   13910:	asr	r7, r3, #31
   13914:	lsl	r5, r3, #2
   13918:	lsl	ip, r7, #2
   1391c:	orr	ip, ip, r3, lsr #30
   13920:	cmp	ip, r5, asr #31
   13924:	movne	r3, #1
   13928:	moveq	r3, #0
   1392c:	orrs	r3, r3, r1, lsr #31
   13930:	beq	13958 <__assert_fail@plt+0x2a28>
   13934:	mov	r3, #0
   13938:	mov	r5, r3
   1393c:	str	r3, [r2]
   13940:	mov	r0, r5
   13944:	ldrd	r4, [sp]
   13948:	ldrd	r6, [sp, #8]
   1394c:	ldr	r8, [sp, #16]
   13950:	add	sp, sp, #20
   13954:	pop	{pc}		; (ldr pc, [sp], #4)
   13958:	add	r8, r5, #1
   1395c:	mov	r7, r0
   13960:	mov	r0, r8
   13964:	mov	r6, r2
   13968:	mov	r4, r1
   1396c:	bl	19b58 <__assert_fail@plt+0x8c28>
   13970:	cmp	r0, #0
   13974:	str	r0, [r6]
   13978:	moveq	r5, r8
   1397c:	beq	13940 <__assert_fail@plt+0x2a10>
   13980:	mov	r2, r0
   13984:	mov	r3, r8
   13988:	mov	r1, r4
   1398c:	mov	r0, r7
   13990:	bl	13714 <__assert_fail@plt+0x27e4>
   13994:	b	13940 <__assert_fail@plt+0x2a10>
   13998:	movw	r3, #44552	; 0xae08
   1399c:	movt	r3, #1
   139a0:	add	r0, r3, r0
   139a4:	ldrb	r0, [r0, #64]	; 0x40
   139a8:	mvn	r0, r0
   139ac:	ubfx	r0, r0, #7, #1
   139b0:	bx	lr
   139b4:	mov	r3, #0
   139b8:	str	r3, [r0]
   139bc:	bx	lr
   139c0:	strd	r4, [sp, #-36]!	; 0xffffffdc
   139c4:	mov	r4, r1
   139c8:	mov	r5, r2
   139cc:	strd	r6, [sp, #8]
   139d0:	mov	r6, r3
   139d4:	strd	r8, [sp, #16]
   139d8:	strd	sl, [sp, #24]
   139dc:	subs	sl, r0, #0
   139e0:	str	lr, [sp, #32]
   139e4:	sub	sp, sp, #20
   139e8:	ldr	r3, [sp, #56]	; 0x38
   139ec:	ldr	r8, [r3]
   139f0:	beq	13d28 <__assert_fail@plt+0x2df8>
   139f4:	adds	r3, r2, #0
   139f8:	ldr	fp, [sl]
   139fc:	movne	r3, #1
   13a00:	str	r3, [sp, #8]
   13a04:	cmp	fp, #0
   13a08:	moveq	fp, r3
   13a0c:	movne	fp, #0
   13a10:	movw	r7, #44552	; 0xae08
   13a14:	movt	r7, #1
   13a18:	add	r2, sl, #4
   13a1c:	str	r2, [sp, #4]
   13a20:	cmp	fp, #0
   13a24:	bne	13b44 <__assert_fail@plt+0x2c14>
   13a28:	cmp	r5, #0
   13a2c:	moveq	r0, r3
   13a30:	movne	r0, #0
   13a34:	cmp	r0, #0
   13a38:	bne	13c60 <__assert_fail@plt+0x2d30>
   13a3c:	cmp	r5, #0
   13a40:	bne	13c18 <__assert_fail@plt+0x2ce8>
   13a44:	cmp	sl, #0
   13a48:	beq	13d38 <__assert_fail@plt+0x2e08>
   13a4c:	ldr	r5, [sl]
   13a50:	cmp	r5, #4
   13a54:	beq	13cd4 <__assert_fail@plt+0x2da4>
   13a58:	mov	r9, r4
   13a5c:	cmp	r5, #0
   13a60:	ldr	r1, [sp, #4]
   13a64:	beq	13d38 <__assert_fail@plt+0x2e08>
   13a68:	cmp	r5, #3
   13a6c:	bgt	13a7c <__assert_fail@plt+0x2b4c>
   13a70:	ldr	r2, [sp, #8]
   13a74:	cmp	r2, #0
   13a78:	bne	13d40 <__assert_fail@plt+0x2e10>
   13a7c:	cmp	r5, #1
   13a80:	ble	13c48 <__assert_fail@plt+0x2d18>
   13a84:	ldrb	r2, [r1]
   13a88:	add	r2, r7, r2
   13a8c:	ldrsb	r0, [r2, #64]	; 0x40
   13a90:	cmp	r0, #0
   13a94:	blt	13c5c <__assert_fail@plt+0x2d2c>
   13a98:	ldrb	r2, [r1, #1]
   13a9c:	add	r2, r7, r2
   13aa0:	ldrsb	r2, [r2, #64]	; 0x40
   13aa4:	cmp	r2, #0
   13aa8:	blt	13c5c <__assert_fail@plt+0x2d2c>
   13aac:	cmp	r8, #0
   13ab0:	beq	13ac4 <__assert_fail@plt+0x2b94>
   13ab4:	asr	ip, r2, #4
   13ab8:	sub	r8, r8, #1
   13abc:	orr	r0, ip, r0, lsl #2
   13ac0:	strb	r0, [r6], #1
   13ac4:	cmp	r5, #2
   13ac8:	beq	13c5c <__assert_fail@plt+0x2d2c>
   13acc:	ldrb	r0, [r1, #2]
   13ad0:	cmp	r0, #61	; 0x3d
   13ad4:	beq	13c54 <__assert_fail@plt+0x2d24>
   13ad8:	add	r0, r7, r0
   13adc:	ldrsb	r0, [r0, #64]	; 0x40
   13ae0:	cmp	r0, #0
   13ae4:	blt	13c5c <__assert_fail@plt+0x2d2c>
   13ae8:	cmp	r8, #0
   13aec:	beq	13b00 <__assert_fail@plt+0x2bd0>
   13af0:	asr	ip, r0, #2
   13af4:	sub	r8, r8, #1
   13af8:	orr	r2, ip, r2, lsl #4
   13afc:	strb	r2, [r6], #1
   13b00:	cmp	r5, #3
   13b04:	beq	13c5c <__assert_fail@plt+0x2d2c>
   13b08:	ldrb	r2, [r1, #3]
   13b0c:	cmp	r2, #61	; 0x3d
   13b10:	beq	13d18 <__assert_fail@plt+0x2de8>
   13b14:	add	r2, r7, r2
   13b18:	ldrsb	r2, [r2, #64]	; 0x40
   13b1c:	cmp	r2, #0
   13b20:	blt	13c5c <__assert_fail@plt+0x2d2c>
   13b24:	cmp	r8, #0
   13b28:	beq	13b38 <__assert_fail@plt+0x2c08>
   13b2c:	orr	r2, r2, r0, lsl #6
   13b30:	sub	r8, r8, #1
   13b34:	strb	r2, [r6], #1
   13b38:	sub	r5, r9, r4
   13b3c:	cmp	fp, #0
   13b40:	beq	13a28 <__assert_fail@plt+0x2af8>
   13b44:	cmp	r5, #1
   13b48:	ble	13a28 <__assert_fail@plt+0x2af8>
   13b4c:	ldrb	r2, [r4]
   13b50:	add	r2, r7, r2
   13b54:	ldrsb	r2, [r2, #64]	; 0x40
   13b58:	cmp	r2, #0
   13b5c:	blt	13c18 <__assert_fail@plt+0x2ce8>
   13b60:	ldrb	r1, [r4, #1]
   13b64:	add	r1, r7, r1
   13b68:	ldrsb	r0, [r1, #64]	; 0x40
   13b6c:	cmp	r0, #0
   13b70:	blt	13c18 <__assert_fail@plt+0x2ce8>
   13b74:	cmp	r8, #0
   13b78:	moveq	ip, r8
   13b7c:	beq	13b90 <__assert_fail@plt+0x2c60>
   13b80:	asr	r1, r0, #4
   13b84:	sub	ip, r8, #1
   13b88:	orr	r2, r1, r2, lsl #2
   13b8c:	strb	r2, [r6], #1
   13b90:	cmp	r5, #2
   13b94:	beq	13c1c <__assert_fail@plt+0x2cec>
   13b98:	ldrb	r2, [r4, #2]
   13b9c:	cmp	r2, #61	; 0x3d
   13ba0:	beq	13c90 <__assert_fail@plt+0x2d60>
   13ba4:	add	r2, r7, r2
   13ba8:	ldrsb	r2, [r2, #64]	; 0x40
   13bac:	cmp	r2, #0
   13bb0:	blt	13c1c <__assert_fail@plt+0x2cec>
   13bb4:	cmp	ip, #0
   13bb8:	beq	13bcc <__assert_fail@plt+0x2c9c>
   13bbc:	asr	r1, r2, #2
   13bc0:	sub	ip, ip, #1
   13bc4:	orr	r0, r1, r0, lsl #4
   13bc8:	strb	r0, [r6], #1
   13bcc:	cmp	r5, #3
   13bd0:	beq	13c1c <__assert_fail@plt+0x2cec>
   13bd4:	ldrb	r1, [r4, #3]
   13bd8:	cmp	r1, #61	; 0x3d
   13bdc:	beq	13ce4 <__assert_fail@plt+0x2db4>
   13be0:	add	r1, r7, r1
   13be4:	ldrsb	r1, [r1, #64]	; 0x40
   13be8:	cmp	r1, #0
   13bec:	blt	13c1c <__assert_fail@plt+0x2cec>
   13bf0:	cmp	ip, #0
   13bf4:	sub	r5, r5, #4
   13bf8:	orrne	r2, r1, r2, lsl #6
   13bfc:	subne	r8, ip, #1
   13c00:	moveq	r8, ip
   13c04:	add	r4, r4, #4
   13c08:	strbne	r2, [r6], #1
   13c0c:	cmp	r5, #1
   13c10:	bgt	13b4c <__assert_fail@plt+0x2c1c>
   13c14:	b	13a28 <__assert_fail@plt+0x2af8>
   13c18:	mov	ip, r8
   13c1c:	ldrb	r2, [r4]
   13c20:	cmp	r2, #10
   13c24:	beq	13cbc <__assert_fail@plt+0x2d8c>
   13c28:	sub	r2, r8, ip
   13c2c:	cmp	sl, #0
   13c30:	sub	r6, r6, r2
   13c34:	add	r9, r4, r5
   13c38:	bne	13d48 <__assert_fail@plt+0x2e18>
   13c3c:	cmp	r5, #1
   13c40:	mov	r1, r4
   13c44:	bgt	13a84 <__assert_fail@plt+0x2b54>
   13c48:	clz	r0, r5
   13c4c:	lsr	r0, r0, #5
   13c50:	b	13c60 <__assert_fail@plt+0x2d30>
   13c54:	cmp	r5, #4
   13c58:	beq	13d04 <__assert_fail@plt+0x2dd4>
   13c5c:	mov	r0, #0
   13c60:	ldr	r3, [sp, #56]	; 0x38
   13c64:	ldr	r3, [r3]
   13c68:	sub	r8, r3, r8
   13c6c:	ldr	r3, [sp, #56]	; 0x38
   13c70:	str	r8, [r3]
   13c74:	add	sp, sp, #20
   13c78:	ldrd	r4, [sp]
   13c7c:	ldrd	r6, [sp, #8]
   13c80:	ldrd	r8, [sp, #16]
   13c84:	ldrd	sl, [sp, #24]
   13c88:	add	sp, sp, #32
   13c8c:	pop	{pc}		; (ldr pc, [sp], #4)
   13c90:	cmp	r5, #4
   13c94:	bne	13c1c <__assert_fail@plt+0x2cec>
   13c98:	ldrb	r2, [r4, #3]
   13c9c:	cmp	r2, #61	; 0x3d
   13ca0:	bne	13c1c <__assert_fail@plt+0x2cec>
   13ca4:	cmp	r3, #0
   13ca8:	mov	r8, ip
   13cac:	add	r4, r4, #4
   13cb0:	beq	13a44 <__assert_fail@plt+0x2b14>
   13cb4:	mov	r0, r3
   13cb8:	b	13c60 <__assert_fail@plt+0x2d30>
   13cbc:	cmp	sl, #0
   13cc0:	beq	13cf0 <__assert_fail@plt+0x2dc0>
   13cc4:	add	r4, r4, #1
   13cc8:	sub	r5, r5, #1
   13ccc:	mov	r8, ip
   13cd0:	b	13a20 <__assert_fail@plt+0x2af0>
   13cd4:	mov	r3, #0
   13cd8:	mov	r0, #1
   13cdc:	str	r3, [sl]
   13ce0:	b	13c60 <__assert_fail@plt+0x2d30>
   13ce4:	cmp	r5, #4
   13ce8:	bne	13c1c <__assert_fail@plt+0x2cec>
   13cec:	b	13ca4 <__assert_fail@plt+0x2d74>
   13cf0:	sub	r2, r8, ip
   13cf4:	add	r9, r4, r5
   13cf8:	sub	r6, r6, r2
   13cfc:	mov	r1, r4
   13d00:	b	13a68 <__assert_fail@plt+0x2b38>
   13d04:	ldrb	r2, [r1, #3]
   13d08:	cmp	r2, #61	; 0x3d
   13d0c:	bne	13c5c <__assert_fail@plt+0x2d2c>
   13d10:	sub	r5, r9, r4
   13d14:	b	13b3c <__assert_fail@plt+0x2c0c>
   13d18:	cmp	r5, #4
   13d1c:	bne	13c5c <__assert_fail@plt+0x2d2c>
   13d20:	sub	r5, r9, r4
   13d24:	b	13b3c <__assert_fail@plt+0x2c0c>
   13d28:	mov	fp, #1
   13d2c:	str	sl, [sp, #8]
   13d30:	mov	r3, fp
   13d34:	b	13a10 <__assert_fail@plt+0x2ae0>
   13d38:	mov	r0, #1
   13d3c:	b	13c60 <__assert_fail@plt+0x2d30>
   13d40:	mov	r0, r2
   13d44:	b	13c60 <__assert_fail@plt+0x2d30>
   13d48:	ldr	r1, [sl]
   13d4c:	cmp	r5, #3
   13d50:	movle	r2, #0
   13d54:	movgt	r2, #1
   13d58:	cmp	r1, #4
   13d5c:	beq	13de0 <__assert_fail@plt+0x2eb0>
   13d60:	cmp	r1, #0
   13d64:	mov	r5, r1
   13d68:	movne	r2, #0
   13d6c:	cmp	r2, #0
   13d70:	beq	13d94 <__assert_fail@plt+0x2e64>
   13d74:	mov	r2, #4
   13d78:	mov	r1, #10
   13d7c:	str	r3, [sp, #12]
   13d80:	mov	r0, r4
   13d84:	bl	10e94 <memchr@plt>
   13d88:	cmp	r0, #0
   13d8c:	ldr	r3, [sp, #12]
   13d90:	beq	13dd0 <__assert_fail@plt+0x2ea0>
   13d94:	cmp	r9, r4
   13d98:	bls	13a5c <__assert_fail@plt+0x2b2c>
   13d9c:	ldrb	r0, [r4], #1
   13da0:	add	r2, r5, #1
   13da4:	mov	r1, sl
   13da8:	cmp	r0, #10
   13dac:	beq	13dc4 <__assert_fail@plt+0x2e94>
   13db0:	cmp	r2, #4
   13db4:	str	r2, [r1], r5
   13db8:	mov	r5, r2
   13dbc:	strb	r0, [r1, #4]
   13dc0:	beq	13a5c <__assert_fail@plt+0x2b2c>
   13dc4:	cmp	r4, r9
   13dc8:	bne	13d9c <__assert_fail@plt+0x2e6c>
   13dcc:	b	13a5c <__assert_fail@plt+0x2b2c>
   13dd0:	mov	r5, #4
   13dd4:	mov	r1, r4
   13dd8:	add	r4, r4, r5
   13ddc:	b	13a84 <__assert_fail@plt+0x2b54>
   13de0:	mov	r5, #0
   13de4:	str	r5, [sl]
   13de8:	b	13d6c <__assert_fail@plt+0x2e3c>
   13dec:	strd	r4, [sp, #-20]!	; 0xffffffec
   13df0:	mov	r5, r3
   13df4:	mov	r4, r2
   13df8:	strd	r6, [sp, #8]
   13dfc:	mov	r6, r0
   13e00:	asr	r0, r2, #2
   13e04:	str	lr, [sp, #16]
   13e08:	sub	sp, sp, #20
   13e0c:	mov	r7, r1
   13e10:	add	r3, r0, #1
   13e14:	add	r3, r3, r3, lsl #1
   13e18:	mov	r0, r3
   13e1c:	str	r3, [sp, #12]
   13e20:	bl	19b58 <__assert_fail@plt+0x8c28>
   13e24:	cmp	r0, #0
   13e28:	str	r0, [r5]
   13e2c:	beq	13e84 <__assert_fail@plt+0x2f54>
   13e30:	add	ip, sp, #12
   13e34:	mov	r3, r0
   13e38:	mov	r2, r4
   13e3c:	mov	r1, r7
   13e40:	mov	r0, r6
   13e44:	str	ip, [sp]
   13e48:	bl	139c0 <__assert_fail@plt+0x2a90>
   13e4c:	subs	r4, r0, #0
   13e50:	beq	13e8c <__assert_fail@plt+0x2f5c>
   13e54:	ldr	r3, [sp, #40]	; 0x28
   13e58:	cmp	r3, #0
   13e5c:	beq	13e84 <__assert_fail@plt+0x2f54>
   13e60:	mov	r2, r3
   13e64:	ldr	r3, [sp, #12]
   13e68:	str	r3, [r2]
   13e6c:	mov	r0, r4
   13e70:	add	sp, sp, #20
   13e74:	ldrd	r4, [sp]
   13e78:	ldrd	r6, [sp, #8]
   13e7c:	add	sp, sp, #16
   13e80:	pop	{pc}		; (ldr pc, [sp], #4)
   13e84:	mov	r4, #1
   13e88:	b	13e6c <__assert_fail@plt+0x2f3c>
   13e8c:	ldr	r0, [r5]
   13e90:	bl	14110 <__assert_fail@plt+0x31e0>
   13e94:	str	r4, [r5]
   13e98:	b	13e6c <__assert_fail@plt+0x2f3c>
   13e9c:	movw	r3, #49524	; 0xc174
   13ea0:	movt	r3, #2
   13ea4:	str	r0, [r3]
   13ea8:	bx	lr
   13eac:	movw	r3, #49524	; 0xc174
   13eb0:	movt	r3, #2
   13eb4:	strb	r0, [r3, #4]
   13eb8:	bx	lr
   13ebc:	movw	r3, #49492	; 0xc154
   13ec0:	movt	r3, #2
   13ec4:	strd	r4, [sp, #-16]!
   13ec8:	ldr	r0, [r3]
   13ecc:	str	r6, [sp, #8]
   13ed0:	str	lr, [sp, #12]
   13ed4:	sub	sp, sp, #8
   13ed8:	bl	19bec <__assert_fail@plt+0x8cbc>
   13edc:	cmp	r0, #0
   13ee0:	beq	13f0c <__assert_fail@plt+0x2fdc>
   13ee4:	movw	r4, #49524	; 0xc174
   13ee8:	movt	r4, #2
   13eec:	ldrb	r6, [r4, #4]
   13ef0:	bl	10e4c <__errno_location@plt>
   13ef4:	mov	r5, r0
   13ef8:	cmp	r6, #0
   13efc:	beq	13f38 <__assert_fail@plt+0x3008>
   13f00:	ldr	r3, [r0]
   13f04:	cmp	r3, #32
   13f08:	bne	13f38 <__assert_fail@plt+0x3008>
   13f0c:	movw	r3, #49480	; 0xc148
   13f10:	movt	r3, #2
   13f14:	ldr	r0, [r3]
   13f18:	bl	19bec <__assert_fail@plt+0x8cbc>
   13f1c:	cmp	r0, #0
   13f20:	bne	13f80 <__assert_fail@plt+0x3050>
   13f24:	add	sp, sp, #8
   13f28:	ldrd	r4, [sp]
   13f2c:	ldr	r6, [sp, #8]
   13f30:	add	sp, sp, #12
   13f34:	pop	{pc}		; (ldr pc, [sp], #4)
   13f38:	movw	r1, #43988	; 0xabd4
   13f3c:	movt	r1, #1
   13f40:	mov	r2, #5
   13f44:	mov	r0, #0
   13f48:	bl	10d68 <dcgettext@plt>
   13f4c:	mov	r6, r0
   13f50:	ldr	r0, [r4]
   13f54:	cmp	r0, #0
   13f58:	beq	13f90 <__assert_fail@plt+0x3060>
   13f5c:	ldr	r4, [r5]
   13f60:	bl	17034 <__assert_fail@plt+0x6104>
   13f64:	mov	r3, r0
   13f68:	movw	r2, #43880	; 0xab68
   13f6c:	movt	r2, #1
   13f70:	mov	r0, #0
   13f74:	str	r6, [sp]
   13f78:	mov	r1, r4
   13f7c:	bl	10dd4 <error@plt>
   13f80:	movw	r3, #49392	; 0xc0f0
   13f84:	movt	r3, #2
   13f88:	ldr	r0, [r3]
   13f8c:	bl	10d20 <_exit@plt>
   13f90:	mov	r3, r6
   13f94:	movw	r2, #43884	; 0xab6c
   13f98:	movt	r2, #1
   13f9c:	ldr	r1, [r5]
   13fa0:	bl	10dd4 <error@plt>
   13fa4:	b	13f80 <__assert_fail@plt+0x3050>
   13fa8:	b	10cf0 <posix_fadvise64@plt>
   13fac:	cmp	r0, #0
   13fb0:	bxeq	lr
   13fb4:	str	r4, [sp, #-16]!
   13fb8:	mov	r4, r1
   13fbc:	strd	r6, [sp, #4]
   13fc0:	mov	r6, #0
   13fc4:	mov	r7, #0
   13fc8:	str	lr, [sp, #12]
   13fcc:	sub	sp, sp, #16
   13fd0:	bl	10e7c <fileno@plt>
   13fd4:	mov	r2, r6
   13fd8:	mov	r3, r7
   13fdc:	strd	r6, [sp]
   13fe0:	str	r4, [sp, #8]
   13fe4:	bl	10cf0 <posix_fadvise64@plt>
   13fe8:	add	sp, sp, #16
   13fec:	ldr	r4, [sp]
   13ff0:	ldrd	r6, [sp, #4]
   13ff4:	add	sp, sp, #12
   13ff8:	pop	{pc}		; (ldr pc, [sp], #4)
   13ffc:	strd	r4, [sp, #-12]!
   14000:	mov	r4, r0
   14004:	str	lr, [sp, #8]
   14008:	sub	sp, sp, #12
   1400c:	bl	10e7c <fileno@plt>
   14010:	cmp	r0, #0
   14014:	mov	r0, r4
   14018:	blt	1409c <__assert_fail@plt+0x316c>
   1401c:	bl	10df8 <__freading@plt>
   14020:	cmp	r0, #0
   14024:	bne	14068 <__assert_fail@plt+0x3138>
   14028:	mov	r0, r4
   1402c:	bl	140b0 <__assert_fail@plt+0x3180>
   14030:	cmp	r0, #0
   14034:	beq	14098 <__assert_fail@plt+0x3168>
   14038:	bl	10e4c <__errno_location@plt>
   1403c:	mov	r5, r0
   14040:	mov	r0, r4
   14044:	ldr	r4, [r5]
   14048:	bl	10ea0 <fclose@plt>
   1404c:	cmp	r4, #0
   14050:	mvnne	r0, #0
   14054:	strne	r4, [r5]
   14058:	add	sp, sp, #12
   1405c:	ldrd	r4, [sp]
   14060:	add	sp, sp, #8
   14064:	pop	{pc}		; (ldr pc, [sp], #4)
   14068:	mov	r0, r4
   1406c:	bl	10e7c <fileno@plt>
   14070:	mov	r1, #1
   14074:	mov	r2, #0
   14078:	mov	r3, #0
   1407c:	str	r1, [sp]
   14080:	bl	10da4 <lseek64@plt>
   14084:	mvn	r3, #0
   14088:	mvn	r2, #0
   1408c:	cmp	r1, r3
   14090:	cmpeq	r0, r2
   14094:	bne	14028 <__assert_fail@plt+0x30f8>
   14098:	mov	r0, r4
   1409c:	add	sp, sp, #12
   140a0:	ldrd	r4, [sp]
   140a4:	ldr	lr, [sp, #8]
   140a8:	add	sp, sp, #12
   140ac:	b	10ea0 <fclose@plt>
   140b0:	str	r4, [sp, #-8]!
   140b4:	subs	r4, r0, #0
   140b8:	str	lr, [sp, #4]
   140bc:	sub	sp, sp, #8
   140c0:	beq	140dc <__assert_fail@plt+0x31ac>
   140c4:	bl	10df8 <__freading@plt>
   140c8:	cmp	r0, #0
   140cc:	beq	140dc <__assert_fail@plt+0x31ac>
   140d0:	ldr	r3, [r4]
   140d4:	tst	r3, #256	; 0x100
   140d8:	bne	140f4 <__assert_fail@plt+0x31c4>
   140dc:	mov	r0, r4
   140e0:	add	sp, sp, #8
   140e4:	ldr	r4, [sp]
   140e8:	ldr	lr, [sp, #4]
   140ec:	add	sp, sp, #8
   140f0:	b	10cfc <fflush@plt>
   140f4:	mov	r1, #1
   140f8:	mov	r2, #0
   140fc:	mov	r3, #0
   14100:	mov	r0, r4
   14104:	str	r1, [sp]
   14108:	bl	14170 <__assert_fail@plt+0x3240>
   1410c:	b	140dc <__assert_fail@plt+0x31ac>
   14110:	strd	r4, [sp, #-12]!
   14114:	mov	r5, r0
   14118:	str	lr, [sp, #8]
   1411c:	sub	sp, sp, #12
   14120:	bl	10e4c <__errno_location@plt>
   14124:	mov	r4, r0
   14128:	mov	r2, #0
   1412c:	ldr	r3, [r4]
   14130:	mov	r0, r5
   14134:	str	r2, [r4]
   14138:	str	r3, [sp]
   1413c:	str	r3, [sp, #4]
   14140:	bl	10d14 <free@plt>
   14144:	ldr	r3, [r4]
   14148:	add	r2, sp, #8
   1414c:	clz	r3, r3
   14150:	lsr	r3, r3, #5
   14154:	add	r3, r2, r3, lsl #2
   14158:	ldr	r3, [r3, #-8]
   1415c:	str	r3, [r4]
   14160:	add	sp, sp, #12
   14164:	ldrd	r4, [sp]
   14168:	add	sp, sp, #8
   1416c:	pop	{pc}		; (ldr pc, [sp], #4)
   14170:	strd	r4, [sp, #-24]!	; 0xffffffe8
   14174:	mov	r4, r0
   14178:	ldr	ip, [r0, #4]
   1417c:	strd	r6, [sp, #8]
   14180:	str	lr, [sp, #20]
   14184:	ldr	lr, [r0, #8]
   14188:	str	r8, [sp, #16]
   1418c:	sub	sp, sp, #8
   14190:	ldr	r5, [sp, #32]
   14194:	cmp	lr, ip
   14198:	beq	141c0 <__assert_fail@plt+0x3290>
   1419c:	mov	r0, r4
   141a0:	str	r5, [sp, #32]
   141a4:	add	sp, sp, #8
   141a8:	ldrd	r4, [sp]
   141ac:	ldrd	r6, [sp, #8]
   141b0:	ldr	r8, [sp, #16]
   141b4:	ldr	lr, [sp, #20]
   141b8:	add	sp, sp, #24
   141bc:	b	10eac <fseeko64@plt>
   141c0:	ldr	ip, [r0, #16]
   141c4:	ldr	lr, [r0, #20]
   141c8:	cmp	lr, ip
   141cc:	bne	1419c <__assert_fail@plt+0x326c>
   141d0:	ldr	r8, [r0, #36]	; 0x24
   141d4:	cmp	r8, #0
   141d8:	bne	1419c <__assert_fail@plt+0x326c>
   141dc:	mov	r6, r2
   141e0:	mov	r7, r3
   141e4:	bl	10e7c <fileno@plt>
   141e8:	mov	r2, r6
   141ec:	mov	r3, r7
   141f0:	str	r5, [sp]
   141f4:	bl	10da4 <lseek64@plt>
   141f8:	mvn	r3, #0
   141fc:	mvn	r2, #0
   14200:	cmp	r1, r3
   14204:	cmpeq	r0, r2
   14208:	beq	14238 <__assert_fail@plt+0x3308>
   1420c:	ldr	r3, [r4]
   14210:	strd	r0, [r4, #80]	; 0x50
   14214:	bic	r3, r3, #16
   14218:	str	r3, [r4]
   1421c:	mov	r0, r8
   14220:	add	sp, sp, #8
   14224:	ldrd	r4, [sp]
   14228:	ldrd	r6, [sp, #8]
   1422c:	ldr	r8, [sp, #16]
   14230:	add	sp, sp, #20
   14234:	pop	{pc}		; (ldr pc, [sp], #4)
   14238:	mvn	r8, #0
   1423c:	b	1421c <__assert_fail@plt+0x32ec>
   14240:	strd	r4, [sp, #-16]!
   14244:	subs	r4, r0, #0
   14248:	str	r6, [sp, #8]
   1424c:	str	lr, [sp, #12]
   14250:	beq	142e8 <__assert_fail@plt+0x33b8>
   14254:	mov	r1, #47	; 0x2f
   14258:	bl	10ed0 <strrchr@plt>
   1425c:	subs	r5, r0, #0
   14260:	beq	142c0 <__assert_fail@plt+0x3390>
   14264:	add	r6, r5, #1
   14268:	sub	r3, r6, r4
   1426c:	cmp	r3, #6
   14270:	ble	142c0 <__assert_fail@plt+0x3390>
   14274:	movw	r1, #44928	; 0xaf80
   14278:	movt	r1, #1
   1427c:	mov	r2, #7
   14280:	sub	r0, r5, #6
   14284:	bl	10f18 <strncmp@plt>
   14288:	cmp	r0, #0
   1428c:	bne	142c0 <__assert_fail@plt+0x3390>
   14290:	movw	r1, #44936	; 0xaf88
   14294:	movt	r1, #1
   14298:	mov	r2, #3
   1429c:	mov	r0, r6
   142a0:	bl	10f18 <strncmp@plt>
   142a4:	cmp	r0, #0
   142a8:	movne	r4, r6
   142ac:	bne	142c0 <__assert_fail@plt+0x3390>
   142b0:	add	r4, r5, #4
   142b4:	movw	r3, #49464	; 0xc138
   142b8:	movt	r3, #2
   142bc:	str	r4, [r3]
   142c0:	movw	r2, #49532	; 0xc17c
   142c4:	movt	r2, #2
   142c8:	ldr	r6, [sp, #8]
   142cc:	movw	r3, #49468	; 0xc13c
   142d0:	movt	r3, #2
   142d4:	str	r4, [r2]
   142d8:	str	r4, [r3]
   142dc:	ldrd	r4, [sp]
   142e0:	add	sp, sp, #12
   142e4:	pop	{pc}		; (ldr pc, [sp], #4)
   142e8:	movw	r3, #49480	; 0xc148
   142ec:	movt	r3, #2
   142f0:	movw	r0, #44872	; 0xaf48
   142f4:	movt	r0, #1
   142f8:	ldr	r3, [r3]
   142fc:	mov	r2, #55	; 0x37
   14300:	mov	r1, #1
   14304:	bl	10d98 <fwrite@plt>
   14308:	bl	10f24 <abort@plt>
   1430c:	mov	r2, #5
   14310:	strd	r4, [sp, #-16]!
   14314:	mov	r5, r0
   14318:	str	r6, [sp, #8]
   1431c:	mov	r6, r1
   14320:	mov	r1, r0
   14324:	mov	r0, #0
   14328:	str	lr, [sp, #12]
   1432c:	bl	10d68 <dcgettext@plt>
   14330:	cmp	r5, r0
   14334:	mov	r4, r0
   14338:	beq	14350 <__assert_fail@plt+0x3420>
   1433c:	mov	r0, r4
   14340:	ldrd	r4, [sp]
   14344:	ldr	r6, [sp, #8]
   14348:	add	sp, sp, #12
   1434c:	pop	{pc}		; (ldr pc, [sp], #4)
   14350:	bl	19c74 <__assert_fail@plt+0x8d44>
   14354:	ldrb	r3, [r0]
   14358:	bic	r3, r3, #32
   1435c:	cmp	r3, #85	; 0x55
   14360:	bne	143c8 <__assert_fail@plt+0x3498>
   14364:	ldrb	r3, [r0, #1]
   14368:	bic	r3, r3, #32
   1436c:	cmp	r3, #84	; 0x54
   14370:	bne	14448 <__assert_fail@plt+0x3518>
   14374:	ldrb	r3, [r0, #2]
   14378:	bic	r3, r3, #32
   1437c:	cmp	r3, #70	; 0x46
   14380:	bne	14448 <__assert_fail@plt+0x3518>
   14384:	ldrb	r3, [r0, #3]
   14388:	cmp	r3, #45	; 0x2d
   1438c:	bne	14448 <__assert_fail@plt+0x3518>
   14390:	ldrb	r3, [r0, #4]
   14394:	cmp	r3, #56	; 0x38
   14398:	bne	14448 <__assert_fail@plt+0x3518>
   1439c:	ldrb	r3, [r0, #5]
   143a0:	cmp	r3, #0
   143a4:	bne	14448 <__assert_fail@plt+0x3518>
   143a8:	ldrb	r2, [r4]
   143ac:	movw	r3, #45028	; 0xafe4
   143b0:	movt	r3, #1
   143b4:	movw	r4, #45040	; 0xaff0
   143b8:	movt	r4, #1
   143bc:	cmp	r2, #96	; 0x60
   143c0:	movne	r4, r3
   143c4:	b	1433c <__assert_fail@plt+0x340c>
   143c8:	cmp	r3, #71	; 0x47
   143cc:	bne	14448 <__assert_fail@plt+0x3518>
   143d0:	ldrb	r3, [r0, #1]
   143d4:	bic	r3, r3, #32
   143d8:	cmp	r3, #66	; 0x42
   143dc:	bne	14448 <__assert_fail@plt+0x3518>
   143e0:	ldrb	r3, [r0, #2]
   143e4:	cmp	r3, #49	; 0x31
   143e8:	bne	14448 <__assert_fail@plt+0x3518>
   143ec:	ldrb	r3, [r0, #3]
   143f0:	cmp	r3, #56	; 0x38
   143f4:	bne	14448 <__assert_fail@plt+0x3518>
   143f8:	ldrb	r3, [r0, #4]
   143fc:	cmp	r3, #48	; 0x30
   14400:	bne	14448 <__assert_fail@plt+0x3518>
   14404:	ldrb	r3, [r0, #5]
   14408:	cmp	r3, #51	; 0x33
   1440c:	bne	14448 <__assert_fail@plt+0x3518>
   14410:	ldrb	r3, [r0, #6]
   14414:	cmp	r3, #48	; 0x30
   14418:	bne	14448 <__assert_fail@plt+0x3518>
   1441c:	ldrb	r3, [r0, #7]
   14420:	cmp	r3, #0
   14424:	bne	14448 <__assert_fail@plt+0x3518>
   14428:	ldrb	r2, [r4]
   1442c:	movw	r3, #45032	; 0xafe8
   14430:	movt	r3, #1
   14434:	movw	r4, #45036	; 0xafec
   14438:	movt	r4, #1
   1443c:	cmp	r2, #96	; 0x60
   14440:	movne	r4, r3
   14444:	b	1433c <__assert_fail@plt+0x340c>
   14448:	movw	r3, #45044	; 0xaff4
   1444c:	movt	r3, #1
   14450:	cmp	r6, #9
   14454:	movw	r4, #45024	; 0xafe0
   14458:	movt	r4, #1
   1445c:	movne	r4, r3
   14460:	b	1433c <__assert_fail@plt+0x340c>
   14464:	strd	r4, [sp, #-36]!	; 0xffffffdc
   14468:	strd	r6, [sp, #8]
   1446c:	strd	r8, [sp, #16]
   14470:	mov	r8, r3
   14474:	strd	sl, [sp, #24]
   14478:	mov	fp, r0
   1447c:	mov	sl, r1
   14480:	str	lr, [sp, #32]
   14484:	sub	sp, sp, #140	; 0x8c
   14488:	ldr	r3, [sp, #180]	; 0xb4
   1448c:	str	r2, [sp, #28]
   14490:	and	r4, r3, #2
   14494:	ubfx	r3, r3, #1, #1
   14498:	str	r3, [sp, #44]	; 0x2c
   1449c:	bl	10db0 <__ctype_get_mb_cur_max@plt>
   144a0:	ldr	r3, [sp, #176]	; 0xb0
   144a4:	str	r0, [sp, #76]	; 0x4c
   144a8:	cmp	r3, #10
   144ac:	ldrls	pc, [pc, r3, lsl #2]
   144b0:	b	15e4c <__assert_fail@plt+0x4f1c>
   144b4:	andeq	r4, r1, r4, lsr r9
   144b8:	andeq	r4, r1, r0, asr sl
   144bc:	andeq	r4, r1, ip, asr #31
   144c0:			; <UNDEFINED> instruction: 0x00014abc
   144c4:	andeq	r4, r1, ip, lsr r8
   144c8:			; <UNDEFINED> instruction: 0x000148b8
   144cc:	muleq	r1, r0, r9
   144d0:	strdeq	r4, [r1], -r8
   144d4:	andeq	r4, r1, r0, ror #9
   144d8:	andeq	r4, r1, r0, ror #9
   144dc:	andeq	r4, r1, r0, ror #9
   144e0:	ldr	r3, [sp, #176]	; 0xb0
   144e4:	cmp	r3, #10
   144e8:	beq	14514 <__assert_fail@plt+0x35e4>
   144ec:	mov	r1, r3
   144f0:	movw	r0, #45048	; 0xaff8
   144f4:	movt	r0, #1
   144f8:	bl	1430c <__assert_fail@plt+0x33dc>
   144fc:	str	r0, [sp, #188]	; 0xbc
   14500:	movw	r0, #45044	; 0xaff4
   14504:	movt	r0, #1
   14508:	ldr	r1, [sp, #176]	; 0xb0
   1450c:	bl	1430c <__assert_fail@plt+0x33dc>
   14510:	str	r0, [sp, #192]	; 0xc0
   14514:	cmp	r4, #0
   14518:	movne	r4, #0
   1451c:	beq	15bd8 <__assert_fail@plt+0x4ca8>
   14520:	mov	r5, #0
   14524:	ldr	r0, [sp, #192]	; 0xc0
   14528:	mov	r9, r5
   1452c:	str	r5, [sp, #64]	; 0x40
   14530:	bl	10e34 <strlen@plt>
   14534:	mov	r3, #1
   14538:	ldr	r2, [sp, #44]	; 0x2c
   1453c:	cmp	r0, r5
   14540:	moveq	r2, r5
   14544:	str	r3, [sp, #32]
   14548:	str	r3, [sp, #48]	; 0x30
   1454c:	str	r5, [sp, #52]	; 0x34
   14550:	str	r3, [sp, #60]	; 0x3c
   14554:	ldr	r3, [sp, #180]	; 0xb4
   14558:	str	r0, [sp, #56]	; 0x38
   1455c:	str	r5, [sp, #68]	; 0x44
   14560:	str	r5, [sp, #80]	; 0x50
   14564:	str	r5, [sp, #84]	; 0x54
   14568:	and	r3, r3, #1
   1456c:	str	r2, [sp, #88]	; 0x58
   14570:	str	r3, [sp, #92]	; 0x5c
   14574:	ldr	r3, [sp, #180]	; 0xb4
   14578:	and	r3, r3, #4
   1457c:	str	r3, [sp, #96]	; 0x60
   14580:	ldr	r3, [sp, #192]	; 0xc0
   14584:	str	r3, [sp, #72]	; 0x48
   14588:	mov	r3, fp
   1458c:	mov	r7, #0
   14590:	mov	fp, r9
   14594:	mov	r9, r3
   14598:	cmn	r8, #1
   1459c:	beq	14ba0 <__assert_fail@plt+0x3c70>
   145a0:	subs	r6, r8, r7
   145a4:	movne	r6, #1
   145a8:	cmp	r6, #0
   145ac:	beq	14bb8 <__assert_fail@plt+0x3c88>
   145b0:	ldr	r0, [sp, #28]
   145b4:	ldr	r3, [sp, #48]	; 0x30
   145b8:	cmp	r3, #0
   145bc:	add	r3, r0, r7
   145c0:	str	r3, [sp, #36]	; 0x24
   145c4:	beq	15044 <__assert_fail@plt+0x4114>
   145c8:	ldr	r2, [sp, #56]	; 0x38
   145cc:	cmp	r2, #0
   145d0:	beq	15544 <__assert_fail@plt+0x4614>
   145d4:	cmp	r2, #1
   145d8:	mov	r3, r2
   145dc:	movls	r3, #0
   145e0:	movhi	r3, #1
   145e4:	cmn	r8, #1
   145e8:	add	r5, r7, r2
   145ec:	movne	r3, #0
   145f0:	cmp	r3, #0
   145f4:	beq	14600 <__assert_fail@plt+0x36d0>
   145f8:	bl	10e34 <strlen@plt>
   145fc:	mov	r8, r0
   14600:	cmp	r5, r8
   14604:	bhi	15544 <__assert_fail@plt+0x4614>
   14608:	ldr	r0, [sp, #36]	; 0x24
   1460c:	ldr	r2, [sp, #56]	; 0x38
   14610:	ldr	r1, [sp, #72]	; 0x48
   14614:	bl	10d50 <memcmp@plt>
   14618:	cmp	r0, #0
   1461c:	bne	15544 <__assert_fail@plt+0x4614>
   14620:	ldr	r3, [sp, #44]	; 0x2c
   14624:	cmp	r3, #0
   14628:	bne	15cf0 <__assert_fail@plt+0x4dc0>
   1462c:	ldr	r3, [sp, #36]	; 0x24
   14630:	ldrb	r5, [r3]
   14634:	cmp	r5, #126	; 0x7e
   14638:	ldrls	pc, [pc, r5, lsl #2]
   1463c:	b	15ad8 <__assert_fail@plt+0x4ba8>
   14640:	andeq	r4, r1, r4, lsl sp
   14644:	ldrdeq	r5, [r1], -r8
   14648:	ldrdeq	r5, [r1], -r8
   1464c:	ldrdeq	r5, [r1], -r8
   14650:	ldrdeq	r5, [r1], -r8
   14654:	ldrdeq	r5, [r1], -r8
   14658:	ldrdeq	r5, [r1], -r8
   1465c:	andeq	r4, r1, ip, ror #24
   14660:	andeq	r4, r1, r4, ror #24
   14664:	andeq	r4, r1, r4, ror ip
   14668:	strdeq	r4, [r1], -r8
   1466c:	andeq	r4, r1, r8, ror #27
   14670:	andeq	r4, r1, r0, lsl fp
   14674:	andeq	r4, r1, r4, asr #27
   14678:	ldrdeq	r5, [r1], -r8
   1467c:	ldrdeq	r5, [r1], -r8
   14680:	ldrdeq	r5, [r1], -r8
   14684:	ldrdeq	r5, [r1], -r8
   14688:	ldrdeq	r5, [r1], -r8
   1468c:	ldrdeq	r5, [r1], -r8
   14690:	ldrdeq	r5, [r1], -r8
   14694:	ldrdeq	r5, [r1], -r8
   14698:	ldrdeq	r5, [r1], -r8
   1469c:	ldrdeq	r5, [r1], -r8
   146a0:	ldrdeq	r5, [r1], -r8
   146a4:	ldrdeq	r5, [r1], -r8
   146a8:	ldrdeq	r5, [r1], -r8
   146ac:	ldrdeq	r5, [r1], -r8
   146b0:	ldrdeq	r5, [r1], -r8
   146b4:	ldrdeq	r5, [r1], -r8
   146b8:	ldrdeq	r5, [r1], -r8
   146bc:	ldrdeq	r5, [r1], -r8
   146c0:	andeq	r4, r1, r0, ror lr
   146c4:	andeq	r4, r1, r4, ror #28
   146c8:	andeq	r4, r1, r4, ror #28
   146cc:	andeq	r4, r1, r8, asr lr
   146d0:	andeq	r4, r1, r4, ror #28
   146d4:	andeq	r4, r1, ip, lsr pc
   146d8:	andeq	r4, r1, r4, ror #28
   146dc:	andeq	r4, r1, ip, lsr #31
   146e0:	andeq	r4, r1, r4, ror #28
   146e4:	andeq	r4, r1, r4, ror #28
   146e8:	andeq	r4, r1, r4, ror #28
   146ec:	andeq	r4, r1, ip, lsr pc
   146f0:	andeq	r4, r1, ip, lsr pc
   146f4:	andeq	r4, r1, ip, lsr pc
   146f8:	andeq	r4, r1, ip, lsr pc
   146fc:	andeq	r4, r1, ip, lsr pc
   14700:	andeq	r4, r1, ip, lsr pc
   14704:	andeq	r4, r1, ip, lsr pc
   14708:	andeq	r4, r1, ip, lsr pc
   1470c:	andeq	r4, r1, ip, lsr pc
   14710:	andeq	r4, r1, ip, lsr pc
   14714:	andeq	r4, r1, ip, lsr pc
   14718:	andeq	r4, r1, ip, lsr pc
   1471c:	andeq	r4, r1, ip, lsr pc
   14720:	andeq	r4, r1, ip, lsr pc
   14724:	andeq	r4, r1, ip, lsr pc
   14728:	andeq	r4, r1, ip, lsr pc
   1472c:	andeq	r4, r1, r4, ror #28
   14730:	andeq	r4, r1, r4, ror #28
   14734:	andeq	r4, r1, r4, ror #28
   14738:	andeq	r4, r1, r4, ror #28
   1473c:	andeq	r4, r1, ip, asr pc
   14740:	ldrdeq	r5, [r1], -r8
   14744:	andeq	r4, r1, ip, lsr pc
   14748:	andeq	r4, r1, ip, lsr pc
   1474c:	andeq	r4, r1, ip, lsr pc
   14750:	andeq	r4, r1, ip, lsr pc
   14754:	andeq	r4, r1, ip, lsr pc
   14758:	andeq	r4, r1, ip, lsr pc
   1475c:	andeq	r4, r1, ip, lsr pc
   14760:	andeq	r4, r1, ip, lsr pc
   14764:	andeq	r4, r1, ip, lsr pc
   14768:	andeq	r4, r1, ip, lsr pc
   1476c:	andeq	r4, r1, ip, lsr pc
   14770:	andeq	r4, r1, ip, lsr pc
   14774:	andeq	r4, r1, ip, lsr pc
   14778:	andeq	r4, r1, ip, lsr pc
   1477c:	andeq	r4, r1, ip, lsr pc
   14780:	andeq	r4, r1, ip, lsr pc
   14784:	andeq	r4, r1, ip, lsr pc
   14788:	andeq	r4, r1, ip, lsr pc
   1478c:	andeq	r4, r1, ip, lsr pc
   14790:	andeq	r4, r1, ip, lsr pc
   14794:	andeq	r4, r1, ip, lsr pc
   14798:	andeq	r4, r1, ip, lsr pc
   1479c:	andeq	r4, r1, ip, lsr pc
   147a0:	andeq	r4, r1, ip, lsr pc
   147a4:	andeq	r4, r1, ip, lsr pc
   147a8:	andeq	r4, r1, ip, lsr pc
   147ac:	andeq	r4, r1, r4, ror #28
   147b0:	andeq	r4, r1, r0, lsl #30
   147b4:	andeq	r4, r1, ip, lsr pc
   147b8:	andeq	r4, r1, r4, ror #28
   147bc:	andeq	r4, r1, ip, lsr pc
   147c0:	andeq	r4, r1, r4, ror #28
   147c4:	andeq	r4, r1, ip, lsr pc
   147c8:	andeq	r4, r1, ip, lsr pc
   147cc:	andeq	r4, r1, ip, lsr pc
   147d0:	andeq	r4, r1, ip, lsr pc
   147d4:	andeq	r4, r1, ip, lsr pc
   147d8:	andeq	r4, r1, ip, lsr pc
   147dc:	andeq	r4, r1, ip, lsr pc
   147e0:	andeq	r4, r1, ip, lsr pc
   147e4:	andeq	r4, r1, ip, lsr pc
   147e8:	andeq	r4, r1, ip, lsr pc
   147ec:	andeq	r4, r1, ip, lsr pc
   147f0:	andeq	r4, r1, ip, lsr pc
   147f4:	andeq	r4, r1, ip, lsr pc
   147f8:	andeq	r4, r1, ip, lsr pc
   147fc:	andeq	r4, r1, ip, lsr pc
   14800:	andeq	r4, r1, ip, lsr pc
   14804:	andeq	r4, r1, ip, lsr pc
   14808:	andeq	r4, r1, ip, lsr pc
   1480c:	andeq	r4, r1, ip, lsr pc
   14810:	andeq	r4, r1, ip, lsr pc
   14814:	andeq	r4, r1, ip, lsr pc
   14818:	andeq	r4, r1, ip, lsr pc
   1481c:	andeq	r4, r1, ip, lsr pc
   14820:	andeq	r4, r1, ip, lsr pc
   14824:	andeq	r4, r1, ip, lsr pc
   14828:	andeq	r4, r1, ip, lsr pc
   1482c:	andeq	r4, r1, ip, lsl #28
   14830:	andeq	r4, r1, r4, ror #28
   14834:	andeq	r4, r1, ip, lsl #28
   14838:	andeq	r4, r1, r8, asr lr
   1483c:	ldr	r3, [sp, #180]	; 0xb4
   14840:	cmp	r4, #0
   14844:	and	r3, r3, #1
   14848:	str	r3, [sp, #92]	; 0x5c
   1484c:	ldr	r3, [sp, #180]	; 0xb4
   14850:	and	r3, r3, #4
   14854:	str	r3, [sp, #96]	; 0x60
   14858:	moveq	r3, #1
   1485c:	streq	r3, [sp, #60]	; 0x3c
   14860:	beq	14ff0 <__assert_fail@plt+0x40c0>
   14864:	mov	r3, #0
   14868:	mov	r2, #1
   1486c:	mov	r4, r3
   14870:	mov	r9, r3
   14874:	str	r2, [sp, #32]
   14878:	str	r2, [sp, #44]	; 0x2c
   1487c:	str	r3, [sp, #48]	; 0x30
   14880:	str	r2, [sp, #52]	; 0x34
   14884:	str	r2, [sp, #56]	; 0x38
   14888:	str	r3, [sp, #60]	; 0x3c
   1488c:	str	r2, [sp, #64]	; 0x40
   14890:	str	r2, [sp, #68]	; 0x44
   14894:	str	r3, [sp, #80]	; 0x50
   14898:	str	r3, [sp, #84]	; 0x54
   1489c:	str	r3, [sp, #88]	; 0x58
   148a0:	movw	r3, #45044	; 0xaff4
   148a4:	movt	r3, #1
   148a8:	str	r3, [sp, #72]	; 0x48
   148ac:	mov	r3, #2
   148b0:	str	r3, [sp, #176]	; 0xb0
   148b4:	b	14588 <__assert_fail@plt+0x3658>
   148b8:	ldr	r3, [sp, #180]	; 0xb4
   148bc:	cmp	r4, #0
   148c0:	and	r3, r3, #1
   148c4:	str	r3, [sp, #92]	; 0x5c
   148c8:	ldr	r3, [sp, #180]	; 0xb4
   148cc:	and	r3, r3, #4
   148d0:	str	r3, [sp, #96]	; 0x60
   148d4:	bne	15ca8 <__assert_fail@plt+0x4d78>
   148d8:	cmp	sl, #0
   148dc:	beq	15a54 <__assert_fail@plt+0x4b24>
   148e0:	mov	r3, #34	; 0x22
   148e4:	mov	r2, r4
   148e8:	mov	r1, #1
   148ec:	mov	r9, r2
   148f0:	strb	r3, [fp]
   148f4:	movw	r3, #45024	; 0xafe0
   148f8:	movt	r3, #1
   148fc:	mov	r4, r1
   14900:	str	r1, [sp, #32]
   14904:	str	r2, [sp, #44]	; 0x2c
   14908:	str	r1, [sp, #48]	; 0x30
   1490c:	str	r2, [sp, #52]	; 0x34
   14910:	str	r1, [sp, #56]	; 0x38
   14914:	str	r1, [sp, #60]	; 0x3c
   14918:	str	r2, [sp, #64]	; 0x40
   1491c:	str	r2, [sp, #68]	; 0x44
   14920:	str	r3, [sp, #72]	; 0x48
   14924:	str	r2, [sp, #80]	; 0x50
   14928:	str	r2, [sp, #84]	; 0x54
   1492c:	str	r2, [sp, #88]	; 0x58
   14930:	b	14588 <__assert_fail@plt+0x3658>
   14934:	mov	r3, #0
   14938:	mov	r2, #1
   1493c:	mov	r9, r3
   14940:	str	r2, [sp, #32]
   14944:	str	r3, [sp, #44]	; 0x2c
   14948:	str	r3, [sp, #48]	; 0x30
   1494c:	str	r3, [sp, #52]	; 0x34
   14950:	str	r3, [sp, #60]	; 0x3c
   14954:	strd	r2, [sp, #64]	; 0x40
   14958:	str	r3, [sp, #72]	; 0x48
   1495c:	str	r3, [sp, #80]	; 0x50
   14960:	str	r3, [sp, #88]	; 0x58
   14964:	ldr	r3, [sp, #180]	; 0xb4
   14968:	and	r3, r3, r2
   1496c:	str	r3, [sp, #92]	; 0x5c
   14970:	ldr	r3, [sp, #180]	; 0xb4
   14974:	and	r3, r3, #4
   14978:	str	r3, [sp, #96]	; 0x60
   1497c:	ldr	r3, [sp, #176]	; 0xb0
   14980:	mov	r4, r3
   14984:	str	r3, [sp, #56]	; 0x38
   14988:	str	r3, [sp, #84]	; 0x54
   1498c:	b	14588 <__assert_fail@plt+0x3658>
   14990:	mov	r3, #1
   14994:	mov	r4, #0
   14998:	mov	r9, r4
   1499c:	str	r3, [sp, #32]
   149a0:	str	r3, [sp, #44]	; 0x2c
   149a4:	str	r3, [sp, #48]	; 0x30
   149a8:	str	r4, [sp, #52]	; 0x34
   149ac:	str	r3, [sp, #56]	; 0x38
   149b0:	str	r3, [sp, #60]	; 0x3c
   149b4:	str	r3, [sp, #88]	; 0x58
   149b8:	movw	r3, #45024	; 0xafe0
   149bc:	movt	r3, #1
   149c0:	str	r4, [sp, #64]	; 0x40
   149c4:	str	r4, [sp, #68]	; 0x44
   149c8:	str	r3, [sp, #72]	; 0x48
   149cc:	ldr	r3, [sp, #180]	; 0xb4
   149d0:	str	r4, [sp, #80]	; 0x50
   149d4:	str	r4, [sp, #84]	; 0x54
   149d8:	and	r3, r3, #1
   149dc:	str	r3, [sp, #92]	; 0x5c
   149e0:	ldr	r3, [sp, #180]	; 0xb4
   149e4:	and	r3, r3, #4
   149e8:	str	r3, [sp, #96]	; 0x60
   149ec:	mov	r3, #5
   149f0:	str	r3, [sp, #176]	; 0xb0
   149f4:	b	14588 <__assert_fail@plt+0x3658>
   149f8:	mov	r3, #1
   149fc:	mov	r4, #0
   14a00:	mov	r9, r4
   14a04:	str	r3, [sp, #32]
   14a08:	str	r4, [sp, #44]	; 0x2c
   14a0c:	str	r3, [sp, #48]	; 0x30
   14a10:	str	r3, [sp, #60]	; 0x3c
   14a14:	ldr	r3, [sp, #180]	; 0xb4
   14a18:	str	r4, [sp, #52]	; 0x34
   14a1c:	str	r4, [sp, #56]	; 0x38
   14a20:	str	r4, [sp, #64]	; 0x40
   14a24:	str	r4, [sp, #68]	; 0x44
   14a28:	and	r3, r3, #1
   14a2c:	str	r4, [sp, #72]	; 0x48
   14a30:	str	r4, [sp, #80]	; 0x50
   14a34:	str	r4, [sp, #84]	; 0x54
   14a38:	str	r3, [sp, #92]	; 0x5c
   14a3c:	ldr	r3, [sp, #180]	; 0xb4
   14a40:	str	r4, [sp, #88]	; 0x58
   14a44:	and	r3, r3, #4
   14a48:	str	r3, [sp, #96]	; 0x60
   14a4c:	b	14588 <__assert_fail@plt+0x3658>
   14a50:	mov	r3, #0
   14a54:	mov	r2, #1
   14a58:	ldr	r1, [sp, #176]	; 0xb0
   14a5c:	mov	r4, r3
   14a60:	mov	r9, r3
   14a64:	movw	r3, #45044	; 0xaff4
   14a68:	movt	r3, #1
   14a6c:	str	r2, [sp, #32]
   14a70:	str	r2, [sp, #44]	; 0x2c
   14a74:	str	r4, [sp, #48]	; 0x30
   14a78:	strd	r2, [sp, #68]	; 0x44
   14a7c:	ldr	r3, [sp, #180]	; 0xb4
   14a80:	str	r2, [sp, #52]	; 0x34
   14a84:	str	r1, [sp, #56]	; 0x38
   14a88:	str	r4, [sp, #60]	; 0x3c
   14a8c:	str	r2, [sp, #64]	; 0x40
   14a90:	and	r3, r3, r2
   14a94:	str	r4, [sp, #80]	; 0x50
   14a98:	str	r4, [sp, #84]	; 0x54
   14a9c:	str	r4, [sp, #88]	; 0x58
   14aa0:	str	r3, [sp, #92]	; 0x5c
   14aa4:	ldr	r3, [sp, #180]	; 0xb4
   14aa8:	and	r3, r3, #4
   14aac:	str	r3, [sp, #96]	; 0x60
   14ab0:	mov	r3, #2
   14ab4:	str	r3, [sp, #176]	; 0xb0
   14ab8:	b	14588 <__assert_fail@plt+0x3658>
   14abc:	mov	r3, #1
   14ac0:	mov	r2, #0
   14ac4:	mov	r4, r2
   14ac8:	mov	r9, r2
   14acc:	str	r3, [sp, #32]
   14ad0:	str	r3, [sp, #44]	; 0x2c
   14ad4:	str	r2, [sp, #48]	; 0x30
   14ad8:	str	r3, [sp, #52]	; 0x34
   14adc:	str	r3, [sp, #56]	; 0x38
   14ae0:	str	r3, [sp, #60]	; 0x3c
   14ae4:	str	r3, [sp, #64]	; 0x40
   14ae8:	str	r3, [sp, #68]	; 0x44
   14aec:	str	r3, [sp, #88]	; 0x58
   14af0:	movw	r3, #45044	; 0xaff4
   14af4:	movt	r3, #1
   14af8:	str	r3, [sp, #72]	; 0x48
   14afc:	ldr	r3, [sp, #180]	; 0xb4
   14b00:	str	r2, [sp, #80]	; 0x50
   14b04:	str	r2, [sp, #84]	; 0x54
   14b08:	and	r3, r3, #1
   14b0c:	b	14aa0 <__assert_fail@plt+0x3b70>
   14b10:	mov	r5, #102	; 0x66
   14b14:	mov	r6, #0
   14b18:	ldr	r3, [sp, #44]	; 0x2c
   14b1c:	cmp	r3, #0
   14b20:	bne	159d0 <__assert_fail@plt+0x4aa0>
   14b24:	ldr	r2, [sp, #52]	; 0x34
   14b28:	eor	r3, fp, #1
   14b2c:	ands	r3, r2, r3
   14b30:	beq	14b68 <__assert_fail@plt+0x3c38>
   14b34:	cmp	sl, r4
   14b38:	mov	fp, r3
   14b3c:	movhi	r2, #39	; 0x27
   14b40:	strbhi	r2, [r9, r4]
   14b44:	add	r2, r4, #1
   14b48:	cmp	sl, r2
   14b4c:	movhi	r1, #36	; 0x24
   14b50:	strbhi	r1, [r9, r2]
   14b54:	add	r2, r4, #2
   14b58:	add	r4, r4, #3
   14b5c:	cmp	sl, r2
   14b60:	movhi	r1, #39	; 0x27
   14b64:	strbhi	r1, [r9, r2]
   14b68:	cmp	sl, r4
   14b6c:	add	r7, r7, #1
   14b70:	movhi	r3, #92	; 0x5c
   14b74:	strbhi	r3, [r9, r4]
   14b78:	add	r4, r4, #1
   14b7c:	cmp	r4, sl
   14b80:	ldr	r3, [sp, #32]
   14b84:	strbcc	r5, [r9, r4]
   14b88:	cmp	r6, #0
   14b8c:	add	r4, r4, #1
   14b90:	moveq	r3, #0
   14b94:	cmn	r8, #1
   14b98:	str	r3, [sp, #32]
   14b9c:	bne	145a0 <__assert_fail@plt+0x3670>
   14ba0:	ldr	r3, [sp, #28]
   14ba4:	ldrb	r6, [r3, r7]
   14ba8:	adds	r6, r6, #0
   14bac:	movne	r6, #1
   14bb0:	cmp	r6, #0
   14bb4:	bne	145b0 <__assert_fail@plt+0x3680>
   14bb8:	mov	r3, r9
   14bbc:	mov	r9, fp
   14bc0:	mov	fp, r3
   14bc4:	ldr	r3, [sp, #68]	; 0x44
   14bc8:	cmp	r4, #0
   14bcc:	movne	r3, #0
   14bd0:	cmp	r3, #0
   14bd4:	bne	15dc8 <__assert_fail@plt+0x4e98>
   14bd8:	ldr	r3, [sp, #44]	; 0x2c
   14bdc:	ldr	r2, [sp, #52]	; 0x34
   14be0:	eor	r3, r3, #1
   14be4:	ands	r2, r3, r2
   14be8:	beq	15d00 <__assert_fail@plt+0x4dd0>
   14bec:	ldr	r3, [sp, #80]	; 0x50
   14bf0:	cmp	r3, #0
   14bf4:	beq	15d04 <__assert_fail@plt+0x4dd4>
   14bf8:	ldr	r3, [sp, #32]
   14bfc:	cmp	r3, #0
   14c00:	bne	15d78 <__assert_fail@plt+0x4e48>
   14c04:	ldr	r3, [sp, #84]	; 0x54
   14c08:	adds	r3, r3, #0
   14c0c:	movne	r3, #1
   14c10:	cmp	sl, #0
   14c14:	movne	r3, #0
   14c18:	cmp	r3, #0
   14c1c:	ldreq	r2, [sp, #80]	; 0x50
   14c20:	beq	15d04 <__assert_fail@plt+0x4dd4>
   14c24:	ldr	r2, [sp, #84]	; 0x54
   14c28:	mov	sl, r2
   14c2c:	mov	r0, #0
   14c30:	mov	r4, #1
   14c34:	mov	r1, #39	; 0x27
   14c38:	str	r0, [sp, #44]	; 0x2c
   14c3c:	strb	r1, [fp]
   14c40:	str	r0, [sp, #48]	; 0x30
   14c44:	str	r4, [sp, #52]	; 0x34
   14c48:	str	r4, [sp, #56]	; 0x38
   14c4c:	str	r4, [sp, #64]	; 0x40
   14c50:	str	r0, [sp, #68]	; 0x44
   14c54:	str	r3, [sp, #80]	; 0x50
   14c58:	str	r2, [sp, #84]	; 0x54
   14c5c:	str	r0, [sp, #88]	; 0x58
   14c60:	b	148a0 <__assert_fail@plt+0x3970>
   14c64:	mov	r5, #98	; 0x62
   14c68:	b	14b14 <__assert_fail@plt+0x3be4>
   14c6c:	mov	r5, #97	; 0x61
   14c70:	b	14b14 <__assert_fail@plt+0x3be4>
   14c74:	ldr	r3, [sp, #48]	; 0x30
   14c78:	str	r3, [sp, #40]	; 0x28
   14c7c:	mov	r3, #116	; 0x74
   14c80:	ldr	r2, [sp, #68]	; 0x44
   14c84:	cmp	r2, #0
   14c88:	bne	14e84 <__assert_fail@plt+0x3f54>
   14c8c:	ldr	r2, [sp, #60]	; 0x3c
   14c90:	cmp	r2, #0
   14c94:	bne	14de0 <__assert_fail@plt+0x3eb0>
   14c98:	ldr	r3, [sp, #44]	; 0x2c
   14c9c:	mov	r6, #0
   14ca0:	cmp	r3, #0
   14ca4:	beq	14e50 <__assert_fail@plt+0x3f20>
   14ca8:	mov	r3, fp
   14cac:	ldr	r2, [sp, #184]	; 0xb8
   14cb0:	cmp	r2, #0
   14cb4:	beq	14cd4 <__assert_fail@plt+0x3da4>
   14cb8:	ubfx	r1, r5, #5, #8
   14cbc:	mov	r0, r2
   14cc0:	and	r2, r5, #31
   14cc4:	ldr	r1, [r0, r1, lsl #2]
   14cc8:	lsr	r2, r1, r2
   14ccc:	tst	r2, #1
   14cd0:	bne	14b18 <__assert_fail@plt+0x3be8>
   14cd4:	ldr	r2, [sp, #40]	; 0x28
   14cd8:	cmp	r2, #0
   14cdc:	addeq	r7, r7, #1
   14ce0:	bne	14b18 <__assert_fail@plt+0x3be8>
   14ce4:	cmp	r3, #0
   14ce8:	beq	14b7c <__assert_fail@plt+0x3c4c>
   14cec:	cmp	sl, r4
   14cf0:	mov	fp, #0
   14cf4:	movhi	r3, #39	; 0x27
   14cf8:	strbhi	r3, [r9, r4]
   14cfc:	add	r3, r4, #1
   14d00:	add	r4, r4, #2
   14d04:	cmp	sl, r3
   14d08:	movhi	r2, #39	; 0x27
   14d0c:	strbhi	r2, [r9, r3]
   14d10:	b	14b7c <__assert_fail@plt+0x3c4c>
   14d14:	ldr	r3, [sp, #48]	; 0x30
   14d18:	str	r3, [sp, #40]	; 0x28
   14d1c:	eor	r3, fp, #1
   14d20:	ldr	r2, [sp, #52]	; 0x34
   14d24:	ands	r2, r2, r3
   14d28:	beq	159e8 <__assert_fail@plt+0x4ab8>
   14d2c:	cmp	sl, r4
   14d30:	movhi	r3, #39	; 0x27
   14d34:	strbhi	r3, [r9, r4]
   14d38:	add	r3, r4, #1
   14d3c:	cmp	sl, r3
   14d40:	movhi	r1, #36	; 0x24
   14d44:	strbhi	r1, [r9, r3]
   14d48:	add	r3, r4, #2
   14d4c:	cmp	sl, r3
   14d50:	movhi	r1, #39	; 0x27
   14d54:	strbhi	r1, [r9, r3]
   14d58:	add	r3, r4, #3
   14d5c:	cmp	sl, r3
   14d60:	bls	15a34 <__assert_fail@plt+0x4b04>
   14d64:	mov	r4, r3
   14d68:	mov	r3, #92	; 0x5c
   14d6c:	mov	fp, r2
   14d70:	mov	r2, r4
   14d74:	strb	r3, [r9, r4]
   14d78:	ldr	r3, [sp, #176]	; 0xb0
   14d7c:	add	r4, r4, #1
   14d80:	cmp	r3, #2
   14d84:	beq	15a9c <__assert_fail@plt+0x4b6c>
   14d88:	add	r3, r7, #1
   14d8c:	cmp	r3, r8
   14d90:	bcs	14da8 <__assert_fail@plt+0x3e78>
   14d94:	ldr	r1, [sp, #28]
   14d98:	ldrb	r3, [r1, r3]
   14d9c:	sub	r3, r3, #48	; 0x30
   14da0:	cmp	r3, #9
   14da4:	bls	15aac <__assert_fail@plt+0x4b7c>
   14da8:	mov	r3, #0
   14dac:	mov	r5, #48	; 0x30
   14db0:	ldr	r6, [sp, #64]	; 0x40
   14db4:	cmp	r6, #0
   14db8:	beq	14cac <__assert_fail@plt+0x3d7c>
   14dbc:	mov	r6, #0
   14dc0:	b	14cd4 <__assert_fail@plt+0x3da4>
   14dc4:	ldr	r3, [sp, #48]	; 0x30
   14dc8:	str	r3, [sp, #40]	; 0x28
   14dcc:	ldr	r2, [sp, #60]	; 0x3c
   14dd0:	mov	r5, #13
   14dd4:	mov	r3, #114	; 0x72
   14dd8:	cmp	r2, #0
   14ddc:	beq	14c98 <__assert_fail@plt+0x3d68>
   14de0:	mov	r5, r3
   14de4:	b	14b14 <__assert_fail@plt+0x3be4>
   14de8:	ldr	r3, [sp, #48]	; 0x30
   14dec:	str	r3, [sp, #40]	; 0x28
   14df0:	mov	r3, #118	; 0x76
   14df4:	b	14c8c <__assert_fail@plt+0x3d5c>
   14df8:	ldr	r3, [sp, #48]	; 0x30
   14dfc:	str	r3, [sp, #40]	; 0x28
   14e00:	mov	r5, #10
   14e04:	mov	r3, #110	; 0x6e
   14e08:	b	14c8c <__assert_fail@plt+0x3d5c>
   14e0c:	ldr	r3, [sp, #48]	; 0x30
   14e10:	cmn	r8, #1
   14e14:	str	r3, [sp, #40]	; 0x28
   14e18:	beq	15260 <__assert_fail@plt+0x4330>
   14e1c:	subs	r3, r8, #1
   14e20:	movne	r3, #1
   14e24:	cmp	r3, #0
   14e28:	bne	14e34 <__assert_fail@plt+0x3f04>
   14e2c:	cmp	r7, #0
   14e30:	beq	14e78 <__assert_fail@plt+0x3f48>
   14e34:	mov	r6, #0
   14e38:	ldr	r3, [sp, #64]	; 0x40
   14e3c:	cmp	r3, #0
   14e40:	beq	14ca8 <__assert_fail@plt+0x3d78>
   14e44:	ldr	r3, [sp, #44]	; 0x2c
   14e48:	cmp	r3, #0
   14e4c:	bne	14ca8 <__assert_fail@plt+0x3d78>
   14e50:	mov	r3, fp
   14e54:	b	14cd4 <__assert_fail@plt+0x3da4>
   14e58:	ldr	r3, [sp, #48]	; 0x30
   14e5c:	str	r3, [sp, #40]	; 0x28
   14e60:	b	14e2c <__assert_fail@plt+0x3efc>
   14e64:	ldr	r3, [sp, #48]	; 0x30
   14e68:	str	r3, [sp, #40]	; 0x28
   14e6c:	b	14e34 <__assert_fail@plt+0x3f04>
   14e70:	ldr	r6, [sp, #48]	; 0x30
   14e74:	str	r6, [sp, #40]	; 0x28
   14e78:	ldr	r3, [sp, #68]	; 0x44
   14e7c:	cmp	r3, #0
   14e80:	beq	14e38 <__assert_fail@plt+0x3f08>
   14e84:	mov	r3, #2
   14e88:	mov	fp, r9
   14e8c:	str	r3, [sp, #176]	; 0xb0
   14e90:	ldr	r3, [sp, #60]	; 0x3c
   14e94:	cmp	r3, #0
   14e98:	ldr	r3, [sp, #176]	; 0xb0
   14e9c:	movne	r3, #4
   14ea0:	str	r3, [sp, #176]	; 0xb0
   14ea4:	mov	lr, #0
   14ea8:	mov	r0, fp
   14eac:	ldr	r2, [sp, #28]
   14eb0:	ldr	r3, [sp, #180]	; 0xb4
   14eb4:	ldr	r1, [sp, #188]	; 0xbc
   14eb8:	bic	ip, r3, #2
   14ebc:	ldr	r3, [sp, #176]	; 0xb0
   14ec0:	stm	sp, {r3, ip, lr}
   14ec4:	mov	r3, r8
   14ec8:	ldr	ip, [sp, #192]	; 0xc0
   14ecc:	str	r1, [sp, #12]
   14ed0:	mov	r1, sl
   14ed4:	str	ip, [sp, #16]
   14ed8:	bl	14464 <__assert_fail@plt+0x3534>
   14edc:	mov	r4, r0
   14ee0:	mov	r0, r4
   14ee4:	add	sp, sp, #140	; 0x8c
   14ee8:	ldrd	r4, [sp]
   14eec:	ldrd	r6, [sp, #8]
   14ef0:	ldrd	r8, [sp, #16]
   14ef4:	ldrd	sl, [sp, #24]
   14ef8:	add	sp, sp, #32
   14efc:	pop	{pc}		; (ldr pc, [sp], #4)
   14f00:	ldr	r3, [sp, #48]	; 0x30
   14f04:	str	r3, [sp, #40]	; 0x28
   14f08:	ldr	r3, [sp, #176]	; 0xb0
   14f0c:	cmp	r3, #2
   14f10:	beq	15288 <__assert_fail@plt+0x4358>
   14f14:	ldr	r3, [sp, #88]	; 0x58
   14f18:	cmp	r3, #0
   14f1c:	moveq	r5, #92	; 0x5c
   14f20:	moveq	r3, r5
   14f24:	beq	14c8c <__assert_fail@plt+0x3d5c>
   14f28:	add	r7, r7, #1
   14f2c:	mov	r3, fp
   14f30:	mov	r6, #0
   14f34:	mov	r5, #92	; 0x5c
   14f38:	b	14ce4 <__assert_fail@plt+0x3db4>
   14f3c:	ldr	r3, [sp, #64]	; 0x40
   14f40:	cmp	r3, #0
   14f44:	bne	15dbc <__assert_fail@plt+0x4e8c>
   14f48:	ldr	r2, [sp, #48]	; 0x30
   14f4c:	mov	r3, fp
   14f50:	mov	r6, r2
   14f54:	str	r2, [sp, #40]	; 0x28
   14f58:	b	14cac <__assert_fail@plt+0x3d7c>
   14f5c:	ldr	r3, [sp, #176]	; 0xb0
   14f60:	cmp	r3, #2
   14f64:	beq	15cf8 <__assert_fail@plt+0x4dc8>
   14f68:	cmp	r3, #5
   14f6c:	ldr	r3, [sp, #48]	; 0x30
   14f70:	str	r3, [sp, #40]	; 0x28
   14f74:	bne	14fa0 <__assert_fail@plt+0x4070>
   14f78:	ldr	r3, [sp, #96]	; 0x60
   14f7c:	cmp	r3, #0
   14f80:	beq	159fc <__assert_fail@plt+0x4acc>
   14f84:	add	r3, r7, #2
   14f88:	cmp	r3, r8
   14f8c:	bcs	14fa0 <__assert_fail@plt+0x4070>
   14f90:	ldr	r2, [sp, #36]	; 0x24
   14f94:	ldrb	r5, [r2, #1]
   14f98:	cmp	r5, #63	; 0x3f
   14f9c:	beq	15ae4 <__assert_fail@plt+0x4bb4>
   14fa0:	mov	r6, #0
   14fa4:	mov	r5, #63	; 0x3f
   14fa8:	b	14e38 <__assert_fail@plt+0x3f08>
   14fac:	ldr	r3, [sp, #176]	; 0xb0
   14fb0:	cmp	r3, #2
   14fb4:	ldr	r3, [sp, #48]	; 0x30
   14fb8:	beq	157a0 <__assert_fail@plt+0x4870>
   14fbc:	mov	r5, #39	; 0x27
   14fc0:	str	r3, [sp, #40]	; 0x28
   14fc4:	str	r6, [sp, #80]	; 0x50
   14fc8:	b	14e38 <__assert_fail@plt+0x3f08>
   14fcc:	ldr	r3, [sp, #180]	; 0xb4
   14fd0:	cmp	r4, #0
   14fd4:	and	r3, r3, #1
   14fd8:	str	r3, [sp, #92]	; 0x5c
   14fdc:	ldr	r3, [sp, #180]	; 0xb4
   14fe0:	and	r3, r3, #4
   14fe4:	str	r3, [sp, #96]	; 0x60
   14fe8:	bne	15e08 <__assert_fail@plt+0x4ed8>
   14fec:	str	r4, [sp, #60]	; 0x3c
   14ff0:	cmp	sl, #0
   14ff4:	bne	15dec <__assert_fail@plt+0x4ebc>
   14ff8:	mov	r3, #1
   14ffc:	movw	r2, #45044	; 0xaff4
   15000:	movt	r2, #1
   15004:	mov	r4, r3
   15008:	mov	r3, #2
   1500c:	mov	r9, sl
   15010:	str	r4, [sp, #32]
   15014:	str	sl, [sp, #44]	; 0x2c
   15018:	str	sl, [sp, #48]	; 0x30
   1501c:	str	r4, [sp, #52]	; 0x34
   15020:	str	r4, [sp, #56]	; 0x38
   15024:	str	r4, [sp, #64]	; 0x40
   15028:	str	sl, [sp, #68]	; 0x44
   1502c:	str	r2, [sp, #72]	; 0x48
   15030:	str	sl, [sp, #80]	; 0x50
   15034:	str	sl, [sp, #84]	; 0x54
   15038:	str	sl, [sp, #88]	; 0x58
   1503c:	str	r3, [sp, #176]	; 0xb0
   15040:	b	14588 <__assert_fail@plt+0x3658>
   15044:	ldrb	r5, [r0, r7]
   15048:	cmp	r5, #126	; 0x7e
   1504c:	ldrls	pc, [pc, r5, lsl #2]
   15050:	b	153b4 <__assert_fail@plt+0x4484>
   15054:	andeq	r5, r1, r0, lsl #7
   15058:			; <UNDEFINED> instruction: 0x000153b4
   1505c:			; <UNDEFINED> instruction: 0x000153b4
   15060:			; <UNDEFINED> instruction: 0x000153b4
   15064:			; <UNDEFINED> instruction: 0x000153b4
   15068:			; <UNDEFINED> instruction: 0x000153b4
   1506c:			; <UNDEFINED> instruction: 0x000153b4
   15070:	andeq	r5, r1, r0, ror r3
   15074:	andeq	r5, r1, r0, ror #6
   15078:	andeq	r5, r1, r4, ror #5
   1507c:	andeq	r5, r1, r0, asr r3
   15080:	andeq	r5, r1, r4, asr #5
   15084:	andeq	r5, r1, r4, lsr #7
   15088:	andeq	r5, r1, r0, lsr r3
   1508c:			; <UNDEFINED> instruction: 0x000153b4
   15090:			; <UNDEFINED> instruction: 0x000153b4
   15094:			; <UNDEFINED> instruction: 0x000153b4
   15098:			; <UNDEFINED> instruction: 0x000153b4
   1509c:			; <UNDEFINED> instruction: 0x000153b4
   150a0:			; <UNDEFINED> instruction: 0x000153b4
   150a4:			; <UNDEFINED> instruction: 0x000153b4
   150a8:			; <UNDEFINED> instruction: 0x000153b4
   150ac:			; <UNDEFINED> instruction: 0x000153b4
   150b0:			; <UNDEFINED> instruction: 0x000153b4
   150b4:			; <UNDEFINED> instruction: 0x000153b4
   150b8:			; <UNDEFINED> instruction: 0x000153b4
   150bc:			; <UNDEFINED> instruction: 0x000153b4
   150c0:			; <UNDEFINED> instruction: 0x000153b4
   150c4:			; <UNDEFINED> instruction: 0x000153b4
   150c8:			; <UNDEFINED> instruction: 0x000153b4
   150cc:			; <UNDEFINED> instruction: 0x000153b4
   150d0:			; <UNDEFINED> instruction: 0x000153b4
   150d4:	ldrdeq	r5, [r1], -r8
   150d8:	andeq	r5, r1, r0, asr #6
   150dc:	andeq	r5, r1, r0, asr #6
   150e0:			; <UNDEFINED> instruction: 0x000152b8
   150e4:	andeq	r5, r1, r0, asr #6
   150e8:	andeq	r5, r1, ip, lsr #5
   150ec:	andeq	r5, r1, r0, asr #6
   150f0:	andeq	r5, r1, ip, lsl r3
   150f4:	andeq	r5, r1, r0, asr #6
   150f8:	andeq	r5, r1, r0, asr #6
   150fc:	andeq	r5, r1, r0, asr #6
   15100:	andeq	r5, r1, ip, lsr #5
   15104:	andeq	r5, r1, ip, lsr #5
   15108:	andeq	r5, r1, ip, lsr #5
   1510c:	andeq	r5, r1, ip, lsr #5
   15110:	andeq	r5, r1, ip, lsr #5
   15114:	andeq	r5, r1, ip, lsr #5
   15118:	andeq	r5, r1, ip, lsr #5
   1511c:	andeq	r5, r1, ip, lsr #5
   15120:	andeq	r5, r1, ip, lsr #5
   15124:	andeq	r5, r1, ip, lsr #5
   15128:	andeq	r5, r1, ip, lsr #5
   1512c:	andeq	r5, r1, ip, lsr #5
   15130:	andeq	r5, r1, ip, lsr #5
   15134:	andeq	r5, r1, ip, lsr #5
   15138:	andeq	r5, r1, ip, lsr #5
   1513c:	andeq	r5, r1, ip, lsr #5
   15140:	andeq	r5, r1, r0, asr #6
   15144:	andeq	r5, r1, r0, asr #6
   15148:	andeq	r5, r1, r0, asr #6
   1514c:	andeq	r5, r1, r0, asr #6
   15150:	strdeq	r5, [r1], -r4
   15154:			; <UNDEFINED> instruction: 0x000153b4
   15158:	andeq	r5, r1, ip, lsr #5
   1515c:	andeq	r5, r1, ip, lsr #5
   15160:	andeq	r5, r1, ip, lsr #5
   15164:	andeq	r5, r1, ip, lsr #5
   15168:	andeq	r5, r1, ip, lsr #5
   1516c:	andeq	r5, r1, ip, lsr #5
   15170:	andeq	r5, r1, ip, lsr #5
   15174:	andeq	r5, r1, ip, lsr #5
   15178:	andeq	r5, r1, ip, lsr #5
   1517c:	andeq	r5, r1, ip, lsr #5
   15180:	andeq	r5, r1, ip, lsr #5
   15184:	andeq	r5, r1, ip, lsr #5
   15188:	andeq	r5, r1, ip, lsr #5
   1518c:	andeq	r5, r1, ip, lsr #5
   15190:	andeq	r5, r1, ip, lsr #5
   15194:	andeq	r5, r1, ip, lsr #5
   15198:	andeq	r5, r1, ip, lsr #5
   1519c:	andeq	r5, r1, ip, lsr #5
   151a0:	andeq	r5, r1, ip, lsr #5
   151a4:	andeq	r5, r1, ip, lsr #5
   151a8:	andeq	r5, r1, ip, lsr #5
   151ac:	andeq	r5, r1, ip, lsr #5
   151b0:	andeq	r5, r1, ip, lsr #5
   151b4:	andeq	r5, r1, ip, lsr #5
   151b8:	andeq	r5, r1, ip, lsr #5
   151bc:	andeq	r5, r1, ip, lsr #5
   151c0:	andeq	r5, r1, r0, asr #6
   151c4:	andeq	r5, r1, r4, ror r2
   151c8:	andeq	r5, r1, ip, lsr #5
   151cc:	andeq	r5, r1, r0, asr #6
   151d0:	andeq	r5, r1, ip, lsr #5
   151d4:	andeq	r5, r1, r0, asr #6
   151d8:	andeq	r5, r1, ip, lsr #5
   151dc:	andeq	r5, r1, ip, lsr #5
   151e0:	andeq	r5, r1, ip, lsr #5
   151e4:	andeq	r5, r1, ip, lsr #5
   151e8:	andeq	r5, r1, ip, lsr #5
   151ec:	andeq	r5, r1, ip, lsr #5
   151f0:	andeq	r5, r1, ip, lsr #5
   151f4:	andeq	r5, r1, ip, lsr #5
   151f8:	andeq	r5, r1, ip, lsr #5
   151fc:	andeq	r5, r1, ip, lsr #5
   15200:	andeq	r5, r1, ip, lsr #5
   15204:	andeq	r5, r1, ip, lsr #5
   15208:	andeq	r5, r1, ip, lsr #5
   1520c:	andeq	r5, r1, ip, lsr #5
   15210:	andeq	r5, r1, ip, lsr #5
   15214:	andeq	r5, r1, ip, lsr #5
   15218:	andeq	r5, r1, ip, lsr #5
   1521c:	andeq	r5, r1, ip, lsr #5
   15220:	andeq	r5, r1, ip, lsr #5
   15224:	andeq	r5, r1, ip, lsr #5
   15228:	andeq	r5, r1, ip, lsr #5
   1522c:	andeq	r5, r1, ip, lsr #5
   15230:	andeq	r5, r1, ip, lsr #5
   15234:	andeq	r5, r1, ip, lsr #5
   15238:	andeq	r5, r1, ip, lsr #5
   1523c:	andeq	r5, r1, ip, lsr #5
   15240:	andeq	r5, r1, r0, asr r2
   15244:	andeq	r5, r1, r0, asr #6
   15248:	andeq	r5, r1, r0, asr r2
   1524c:			; <UNDEFINED> instruction: 0x000152b8
   15250:	mov	r3, #0
   15254:	cmn	r8, #1
   15258:	str	r3, [sp, #40]	; 0x28
   1525c:	bne	14e1c <__assert_fail@plt+0x3eec>
   15260:	ldr	r3, [sp, #28]
   15264:	ldrb	r3, [r3, #1]
   15268:	adds	r3, r3, #0
   1526c:	movne	r3, #1
   15270:	b	14e24 <__assert_fail@plt+0x3ef4>
   15274:	mov	r3, #0
   15278:	str	r3, [sp, #40]	; 0x28
   1527c:	ldr	r3, [sp, #176]	; 0xb0
   15280:	cmp	r3, #2
   15284:	bne	14f14 <__assert_fail@plt+0x3fe4>
   15288:	ldr	r3, [sp, #44]	; 0x2c
   1528c:	cmp	r3, #0
   15290:	bne	15bd0 <__assert_fail@plt+0x4ca0>
   15294:	mov	r6, r3
   15298:	add	r7, r7, #1
   1529c:	mov	r3, fp
   152a0:	mov	r5, #92	; 0x5c
   152a4:	b	14ce4 <__assert_fail@plt+0x3db4>
   152a8:	ldr	r6, [sp, #48]	; 0x30
   152ac:	mov	r3, #0
   152b0:	str	r3, [sp, #40]	; 0x28
   152b4:	b	14e38 <__assert_fail@plt+0x3f08>
   152b8:	mov	r3, #0
   152bc:	str	r3, [sp, #40]	; 0x28
   152c0:	b	14e2c <__assert_fail@plt+0x3efc>
   152c4:	mov	r3, #0
   152c8:	str	r3, [sp, #40]	; 0x28
   152cc:	mov	r3, #118	; 0x76
   152d0:	b	14c8c <__assert_fail@plt+0x3d5c>
   152d4:	ldr	r6, [sp, #48]	; 0x30
   152d8:	mov	r3, #0
   152dc:	str	r3, [sp, #40]	; 0x28
   152e0:	b	14e78 <__assert_fail@plt+0x3f48>
   152e4:	mov	r3, #0
   152e8:	str	r3, [sp, #40]	; 0x28
   152ec:	mov	r3, #116	; 0x74
   152f0:	b	14c80 <__assert_fail@plt+0x3d50>
   152f4:	ldr	r3, [sp, #176]	; 0xb0
   152f8:	cmp	r3, #2
   152fc:	beq	1580c <__assert_fail@plt+0x48dc>
   15300:	cmp	r3, #5
   15304:	mov	r3, #0
   15308:	str	r3, [sp, #40]	; 0x28
   1530c:	beq	14f78 <__assert_fail@plt+0x4048>
   15310:	mov	r6, #0
   15314:	mov	r5, #63	; 0x3f
   15318:	b	14e38 <__assert_fail@plt+0x3f08>
   1531c:	ldr	r3, [sp, #176]	; 0xb0
   15320:	cmp	r3, #2
   15324:	beq	15794 <__assert_fail@plt+0x4864>
   15328:	mov	r3, #0
   1532c:	b	14fbc <__assert_fail@plt+0x408c>
   15330:	mov	r3, #0
   15334:	str	r3, [sp, #40]	; 0x28
   15338:	mov	r3, #114	; 0x72
   1533c:	b	14c80 <__assert_fail@plt+0x3d50>
   15340:	mov	r3, #0
   15344:	mov	r6, r3
   15348:	str	r3, [sp, #40]	; 0x28
   1534c:	b	14e78 <__assert_fail@plt+0x3f48>
   15350:	mov	r3, #0
   15354:	str	r3, [sp, #40]	; 0x28
   15358:	mov	r3, #110	; 0x6e
   1535c:	b	14c80 <__assert_fail@plt+0x3d50>
   15360:	mov	r3, #0
   15364:	str	r3, [sp, #40]	; 0x28
   15368:	mov	r3, #98	; 0x62
   1536c:	b	14c8c <__assert_fail@plt+0x3d5c>
   15370:	mov	r3, #0
   15374:	str	r3, [sp, #40]	; 0x28
   15378:	mov	r3, #97	; 0x61
   1537c:	b	14c8c <__assert_fail@plt+0x3d5c>
   15380:	ldr	r3, [sp, #60]	; 0x3c
   15384:	cmp	r3, #0
   15388:	bne	15778 <__assert_fail@plt+0x4848>
   1538c:	ldr	r3, [sp, #92]	; 0x5c
   15390:	cmp	r3, #0
   15394:	addne	r7, r7, #1
   15398:	bne	14598 <__assert_fail@plt+0x3668>
   1539c:	str	r3, [sp, #40]	; 0x28
   153a0:	b	14c98 <__assert_fail@plt+0x3d68>
   153a4:	mov	r3, #0
   153a8:	str	r3, [sp, #40]	; 0x28
   153ac:	mov	r3, #102	; 0x66
   153b0:	b	14c8c <__assert_fail@plt+0x3d5c>
   153b4:	mov	r3, #0
   153b8:	str	r3, [sp, #40]	; 0x28
   153bc:	ldr	r3, [sp, #76]	; 0x4c
   153c0:	cmp	r3, #1
   153c4:	bne	1582c <__assert_fail@plt+0x48fc>
   153c8:	bl	10e1c <__ctype_b_loc@plt>
   153cc:	ldr	r2, [r0]
   153d0:	sxth	r3, r5
   153d4:	lsl	r3, r3, #1
   153d8:	ldr	r1, [sp, #76]	; 0x4c
   153dc:	ldrh	r3, [r2, r3]
   153e0:	mov	r0, r1
   153e4:	and	r3, r3, #16384	; 0x4000
   153e8:	cmp	r3, #0
   153ec:	ldr	r3, [sp, #60]	; 0x3c
   153f0:	movne	r6, #1
   153f4:	moveq	r6, #0
   153f8:	movne	r2, #0
   153fc:	andeq	r2, r3, #1
   15400:	cmp	r2, #0
   15404:	beq	14e38 <__assert_fail@plt+0x3f08>
   15408:	ldr	r2, [sp, #60]	; 0x3c
   1540c:	mov	r6, #0
   15410:	add	r1, r0, r7
   15414:	mov	ip, #39	; 0x27
   15418:	str	r6, [sp, #100]	; 0x64
   1541c:	mov	r0, #0
   15420:	ldr	lr, [sp, #36]	; 0x24
   15424:	str	r8, [sp, #36]	; 0x24
   15428:	ldr	r6, [sp, #40]	; 0x28
   1542c:	ldr	r8, [sp, #44]	; 0x2c
   15430:	b	154e0 <__assert_fail@plt+0x45b0>
   15434:	cmp	r8, #0
   15438:	bne	15a14 <__assert_fail@plt+0x4ae4>
   1543c:	ldr	r0, [sp, #52]	; 0x34
   15440:	eor	r3, fp, #1
   15444:	ands	r3, r0, r3
   15448:	beq	15478 <__assert_fail@plt+0x4548>
   1544c:	cmp	sl, r4
   15450:	add	r0, r4, #1
   15454:	strbhi	ip, [r9, r4]
   15458:	cmp	sl, r0
   1545c:	movhi	fp, #36	; 0x24
   15460:	strbhi	fp, [r9, r0]
   15464:	add	r0, r4, #2
   15468:	mov	fp, r3
   1546c:	cmp	sl, r0
   15470:	add	r4, r4, #3
   15474:	strbhi	ip, [r9, r0]
   15478:	cmp	sl, r4
   1547c:	movhi	r3, #92	; 0x5c
   15480:	strbhi	r3, [r9, r4]
   15484:	add	r3, r4, #1
   15488:	cmp	sl, r3
   1548c:	bls	1549c <__assert_fail@plt+0x456c>
   15490:	lsr	r0, r5, #6
   15494:	add	r0, r0, #48	; 0x30
   15498:	strb	r0, [r9, r3]
   1549c:	add	r3, r4, #2
   154a0:	cmp	sl, r3
   154a4:	bls	154b4 <__assert_fail@plt+0x4584>
   154a8:	ubfx	r0, r5, #3, #3
   154ac:	add	r0, r0, #48	; 0x30
   154b0:	strb	r0, [r9, r3]
   154b4:	add	r7, r7, #1
   154b8:	and	r5, r5, #7
   154bc:	cmp	r1, r7
   154c0:	add	r5, r5, #48	; 0x30
   154c4:	add	r4, r4, #3
   154c8:	bls	15a28 <__assert_fail@plt+0x4af8>
   154cc:	mov	r0, r2
   154d0:	cmp	sl, r4
   154d4:	strbhi	r5, [r9, r4]
   154d8:	add	r4, r4, #1
   154dc:	ldrb	r5, [lr, #1]!
   154e0:	cmp	r2, #0
   154e4:	bne	15434 <__assert_fail@plt+0x4504>
   154e8:	eor	r3, r0, #1
   154ec:	cmp	r6, #0
   154f0:	and	r3, r3, fp
   154f4:	uxtb	r3, r3
   154f8:	beq	1550c <__assert_fail@plt+0x45dc>
   154fc:	cmp	sl, r4
   15500:	movhi	r6, #92	; 0x5c
   15504:	strbhi	r6, [r9, r4]
   15508:	add	r4, r4, #1
   1550c:	add	r7, r7, #1
   15510:	cmp	r7, r1
   15514:	bcs	15a08 <__assert_fail@plt+0x4ad8>
   15518:	cmp	r3, #0
   1551c:	beq	15a4c <__assert_fail@plt+0x4b1c>
   15520:	cmp	sl, r4
   15524:	add	r3, r4, #1
   15528:	mov	r6, #0
   1552c:	strbhi	ip, [r9, r4]
   15530:	cmp	sl, r3
   15534:	add	r4, r4, #2
   15538:	mov	fp, r6
   1553c:	strbhi	ip, [r9, r3]
   15540:	b	154d0 <__assert_fail@plt+0x45a0>
   15544:	ldr	r3, [sp, #36]	; 0x24
   15548:	ldrb	r5, [r3]
   1554c:	cmp	r5, #126	; 0x7e
   15550:	ldrls	pc, [pc, r5, lsl #2]
   15554:	b	153b4 <__assert_fail@plt+0x4484>
   15558:	andeq	r5, r1, r8, ror r7
   1555c:			; <UNDEFINED> instruction: 0x000153b4
   15560:			; <UNDEFINED> instruction: 0x000153b4
   15564:			; <UNDEFINED> instruction: 0x000153b4
   15568:			; <UNDEFINED> instruction: 0x000153b4
   1556c:			; <UNDEFINED> instruction: 0x000153b4
   15570:			; <UNDEFINED> instruction: 0x000153b4
   15574:	andeq	r4, r1, ip, ror #24
   15578:	andeq	r4, r1, r4, ror #24
   1557c:	andeq	r5, r1, r4, ror #5
   15580:	andeq	r5, r1, ip, ror #14
   15584:	andeq	r5, r1, r4, asr #5
   15588:	andeq	r4, r1, r0, lsl fp
   1558c:	andeq	r5, r1, r0, ror #14
   15590:			; <UNDEFINED> instruction: 0x000153b4
   15594:			; <UNDEFINED> instruction: 0x000153b4
   15598:			; <UNDEFINED> instruction: 0x000153b4
   1559c:			; <UNDEFINED> instruction: 0x000153b4
   155a0:			; <UNDEFINED> instruction: 0x000153b4
   155a4:			; <UNDEFINED> instruction: 0x000153b4
   155a8:			; <UNDEFINED> instruction: 0x000153b4
   155ac:			; <UNDEFINED> instruction: 0x000153b4
   155b0:			; <UNDEFINED> instruction: 0x000153b4
   155b4:			; <UNDEFINED> instruction: 0x000153b4
   155b8:			; <UNDEFINED> instruction: 0x000153b4
   155bc:			; <UNDEFINED> instruction: 0x000153b4
   155c0:			; <UNDEFINED> instruction: 0x000153b4
   155c4:			; <UNDEFINED> instruction: 0x000153b4
   155c8:			; <UNDEFINED> instruction: 0x000153b4
   155cc:			; <UNDEFINED> instruction: 0x000153b4
   155d0:			; <UNDEFINED> instruction: 0x000153b4
   155d4:			; <UNDEFINED> instruction: 0x000153b4
   155d8:	ldrdeq	r5, [r1], -r4
   155dc:	andeq	r5, r1, r4, asr r7
   155e0:	andeq	r5, r1, r4, asr r7
   155e4:			; <UNDEFINED> instruction: 0x000152b8
   155e8:	andeq	r5, r1, r4, asr r7
   155ec:	andeq	r5, r1, r8, lsr #5
   155f0:	andeq	r5, r1, r4, asr r7
   155f4:	andeq	r5, r1, ip, lsl r3
   155f8:	andeq	r5, r1, r4, asr r7
   155fc:	andeq	r5, r1, r4, asr r7
   15600:	andeq	r5, r1, r4, asr r7
   15604:	andeq	r5, r1, r8, lsr #5
   15608:	andeq	r5, r1, r8, lsr #5
   1560c:	andeq	r5, r1, r8, lsr #5
   15610:	andeq	r5, r1, r8, lsr #5
   15614:	andeq	r5, r1, r8, lsr #5
   15618:	andeq	r5, r1, r8, lsr #5
   1561c:	andeq	r5, r1, r8, lsr #5
   15620:	andeq	r5, r1, r8, lsr #5
   15624:	andeq	r5, r1, r8, lsr #5
   15628:	andeq	r5, r1, r8, lsr #5
   1562c:	andeq	r5, r1, r8, lsr #5
   15630:	andeq	r5, r1, r8, lsr #5
   15634:	andeq	r5, r1, r8, lsr #5
   15638:	andeq	r5, r1, r8, lsr #5
   1563c:	andeq	r5, r1, r8, lsr #5
   15640:	andeq	r5, r1, r8, lsr #5
   15644:	andeq	r5, r1, r4, asr r7
   15648:	andeq	r5, r1, r4, asr r7
   1564c:	andeq	r5, r1, r4, asr r7
   15650:	andeq	r5, r1, r4, asr r7
   15654:	strdeq	r5, [r1], -r4
   15658:			; <UNDEFINED> instruction: 0x000153b4
   1565c:	andeq	r5, r1, r8, lsr #5
   15660:	andeq	r5, r1, r8, lsr #5
   15664:	andeq	r5, r1, r8, lsr #5
   15668:	andeq	r5, r1, r8, lsr #5
   1566c:	andeq	r5, r1, r8, lsr #5
   15670:	andeq	r5, r1, r8, lsr #5
   15674:	andeq	r5, r1, r8, lsr #5
   15678:	andeq	r5, r1, r8, lsr #5
   1567c:	andeq	r5, r1, r8, lsr #5
   15680:	andeq	r5, r1, r8, lsr #5
   15684:	andeq	r5, r1, r8, lsr #5
   15688:	andeq	r5, r1, r8, lsr #5
   1568c:	andeq	r5, r1, r8, lsr #5
   15690:	andeq	r5, r1, r8, lsr #5
   15694:	andeq	r5, r1, r8, lsr #5
   15698:	andeq	r5, r1, r8, lsr #5
   1569c:	andeq	r5, r1, r8, lsr #5
   156a0:	andeq	r5, r1, r8, lsr #5
   156a4:	andeq	r5, r1, r8, lsr #5
   156a8:	andeq	r5, r1, r8, lsr #5
   156ac:	andeq	r5, r1, r8, lsr #5
   156b0:	andeq	r5, r1, r8, lsr #5
   156b4:	andeq	r5, r1, r8, lsr #5
   156b8:	andeq	r5, r1, r8, lsr #5
   156bc:	andeq	r5, r1, r8, lsr #5
   156c0:	andeq	r5, r1, r8, lsr #5
   156c4:	andeq	r5, r1, r4, asr r7
   156c8:	andeq	r5, r1, r4, ror r2
   156cc:	andeq	r5, r1, r8, lsr #5
   156d0:	andeq	r5, r1, r4, asr r7
   156d4:	andeq	r5, r1, r8, lsr #5
   156d8:	andeq	r5, r1, r4, asr r7
   156dc:	andeq	r5, r1, r8, lsr #5
   156e0:	andeq	r5, r1, r8, lsr #5
   156e4:	andeq	r5, r1, r8, lsr #5
   156e8:	andeq	r5, r1, r8, lsr #5
   156ec:	andeq	r5, r1, r8, lsr #5
   156f0:	andeq	r5, r1, r8, lsr #5
   156f4:	andeq	r5, r1, r8, lsr #5
   156f8:	andeq	r5, r1, r8, lsr #5
   156fc:	andeq	r5, r1, r8, lsr #5
   15700:	andeq	r5, r1, r8, lsr #5
   15704:	andeq	r5, r1, r8, lsr #5
   15708:	andeq	r5, r1, r8, lsr #5
   1570c:	andeq	r5, r1, r8, lsr #5
   15710:	andeq	r5, r1, r8, lsr #5
   15714:	andeq	r5, r1, r8, lsr #5
   15718:	andeq	r5, r1, r8, lsr #5
   1571c:	andeq	r5, r1, r8, lsr #5
   15720:	andeq	r5, r1, r8, lsr #5
   15724:	andeq	r5, r1, r8, lsr #5
   15728:	andeq	r5, r1, r8, lsr #5
   1572c:	andeq	r5, r1, r8, lsr #5
   15730:	andeq	r5, r1, r8, lsr #5
   15734:	andeq	r5, r1, r8, lsr #5
   15738:	andeq	r5, r1, r8, lsr #5
   1573c:	andeq	r5, r1, r8, lsr #5
   15740:	andeq	r5, r1, r8, lsr #5
   15744:	andeq	r5, r1, r0, asr r2
   15748:	andeq	r5, r1, r4, asr r7
   1574c:	andeq	r5, r1, r0, asr r2
   15750:			; <UNDEFINED> instruction: 0x000152b8
   15754:	mov	r3, #0
   15758:	str	r3, [sp, #40]	; 0x28
   1575c:	b	14e34 <__assert_fail@plt+0x3f04>
   15760:	mov	r3, #0
   15764:	str	r3, [sp, #40]	; 0x28
   15768:	b	14dcc <__assert_fail@plt+0x3e9c>
   1576c:	mov	r3, #0
   15770:	str	r3, [sp, #40]	; 0x28
   15774:	b	14e00 <__assert_fail@plt+0x3ed0>
   15778:	ldr	r3, [sp, #44]	; 0x2c
   1577c:	cmp	r3, #0
   15780:	beq	14d18 <__assert_fail@plt+0x3de8>
   15784:	ldr	r3, [sp, #52]	; 0x34
   15788:	mov	fp, r9
   1578c:	str	r3, [sp, #60]	; 0x3c
   15790:	b	14e90 <__assert_fail@plt+0x3f60>
   15794:	ldr	r3, [sp, #44]	; 0x2c
   15798:	cmp	r3, #0
   1579c:	bne	15bd0 <__assert_fail@plt+0x4ca0>
   157a0:	str	r3, [sp, #40]	; 0x28
   157a4:	cmp	sl, #0
   157a8:	ldr	r3, [sp, #84]	; 0x54
   157ac:	clz	r3, r3
   157b0:	lsr	r3, r3, #5
   157b4:	moveq	r3, #0
   157b8:	cmp	r3, #0
   157bc:	strne	sl, [sp, #84]	; 0x54
   157c0:	movne	sl, #0
   157c4:	bne	157f4 <__assert_fail@plt+0x48c4>
   157c8:	cmp	sl, r4
   157cc:	movhi	r3, #39	; 0x27
   157d0:	strbhi	r3, [r9, r4]
   157d4:	add	r3, r4, #1
   157d8:	cmp	sl, r3
   157dc:	movhi	r2, #92	; 0x5c
   157e0:	strbhi	r2, [r9, r3]
   157e4:	add	r3, r4, #2
   157e8:	cmp	sl, r3
   157ec:	movhi	r2, #39	; 0x27
   157f0:	strbhi	r2, [r9, r3]
   157f4:	mov	r3, #0
   157f8:	add	r4, r4, #3
   157fc:	str	r6, [sp, #80]	; 0x50
   15800:	mov	fp, r3
   15804:	mov	r5, #39	; 0x27
   15808:	b	14cd4 <__assert_fail@plt+0x3da4>
   1580c:	ldr	r3, [sp, #44]	; 0x2c
   15810:	cmp	r3, #0
   15814:	bne	15bd0 <__assert_fail@plt+0x4ca0>
   15818:	mov	r6, #0
   1581c:	mov	r5, #63	; 0x3f
   15820:	str	r3, [sp, #40]	; 0x28
   15824:	mov	r3, fp
   15828:	b	14cd4 <__assert_fail@plt+0x3da4>
   1582c:	mov	r2, #0
   15830:	mov	r3, #0
   15834:	cmn	r8, #1
   15838:	strd	r2, [sp, #128]	; 0x80
   1583c:	bne	1584c <__assert_fail@plt+0x491c>
   15840:	ldr	r0, [sp, #28]
   15844:	bl	10e34 <strlen@plt>
   15848:	mov	r8, r0
   1584c:	str	r9, [sp, #100]	; 0x64
   15850:	mov	r3, #0
   15854:	strd	sl, [sp, #104]	; 0x68
   15858:	ldr	sl, [sp, #28]
   1585c:	str	r5, [sp, #112]	; 0x70
   15860:	mov	r5, r3
   15864:	ldr	r9, [sp, #68]	; 0x44
   15868:	str	r4, [sp, #116]	; 0x74
   1586c:	add	r4, r7, r5
   15870:	add	r3, sp, #128	; 0x80
   15874:	add	fp, sl, r4
   15878:	sub	r2, r8, r4
   1587c:	mov	r1, fp
   15880:	add	r0, sp, #124	; 0x7c
   15884:	bl	19cc0 <__assert_fail@plt+0x8d90>
   15888:	subs	r1, r0, #0
   1588c:	beq	158cc <__assert_fail@plt+0x499c>
   15890:	cmn	r1, #1
   15894:	beq	15c24 <__assert_fail@plt+0x4cf4>
   15898:	cmn	r1, #2
   1589c:	beq	15c44 <__assert_fail@plt+0x4d14>
   158a0:	cmp	r9, #0
   158a4:	bne	158fc <__assert_fail@plt+0x49cc>
   158a8:	ldr	r0, [sp, #124]	; 0x7c
   158ac:	add	r5, r5, r1
   158b0:	bl	10d8c <iswprint@plt>
   158b4:	cmp	r0, #0
   158b8:	add	r0, sp, #128	; 0x80
   158bc:	moveq	r6, #0
   158c0:	bl	10d38 <mbsinit@plt>
   158c4:	cmp	r0, #0
   158c8:	beq	1586c <__assert_fail@plt+0x493c>
   158cc:	ldr	r3, [sp, #60]	; 0x3c
   158d0:	add	r9, sp, #100	; 0x64
   158d4:	mov	r0, r5
   158d8:	ldm	r9, {r9, sl, fp}
   158dc:	eor	r2, r6, #1
   158e0:	ldr	r5, [sp, #112]	; 0x70
   158e4:	and	r2, r2, r3
   158e8:	uxtb	r2, r2
   158ec:	ldr	r4, [sp, #116]	; 0x74
   158f0:	cmp	r0, #1
   158f4:	bhi	15410 <__assert_fail@plt+0x44e0>
   158f8:	b	15400 <__assert_fail@plt+0x44d0>
   158fc:	cmp	r1, #1
   15900:	beq	158a8 <__assert_fail@plt+0x4978>
   15904:	add	r2, r4, #1
   15908:	add	r3, sl, r1
   1590c:	add	r2, sl, r2
   15910:	add	r4, r3, r4
   15914:	ldrb	r3, [r2], #1
   15918:	sub	r3, r3, #91	; 0x5b
   1591c:	cmp	r3, #33	; 0x21
   15920:	ldrls	pc, [pc, r3, lsl #2]
   15924:	b	159b0 <__assert_fail@plt+0x4a80>
   15928:			; <UNDEFINED> instruction: 0x000159bc
   1592c:			; <UNDEFINED> instruction: 0x000159bc
   15930:			; <UNDEFINED> instruction: 0x000159b0
   15934:			; <UNDEFINED> instruction: 0x000159bc
   15938:			; <UNDEFINED> instruction: 0x000159b0
   1593c:			; <UNDEFINED> instruction: 0x000159bc
   15940:			; <UNDEFINED> instruction: 0x000159b0
   15944:			; <UNDEFINED> instruction: 0x000159b0
   15948:			; <UNDEFINED> instruction: 0x000159b0
   1594c:			; <UNDEFINED> instruction: 0x000159b0
   15950:			; <UNDEFINED> instruction: 0x000159b0
   15954:			; <UNDEFINED> instruction: 0x000159b0
   15958:			; <UNDEFINED> instruction: 0x000159b0
   1595c:			; <UNDEFINED> instruction: 0x000159b0
   15960:			; <UNDEFINED> instruction: 0x000159b0
   15964:			; <UNDEFINED> instruction: 0x000159b0
   15968:			; <UNDEFINED> instruction: 0x000159b0
   1596c:			; <UNDEFINED> instruction: 0x000159b0
   15970:			; <UNDEFINED> instruction: 0x000159b0
   15974:			; <UNDEFINED> instruction: 0x000159b0
   15978:			; <UNDEFINED> instruction: 0x000159b0
   1597c:			; <UNDEFINED> instruction: 0x000159b0
   15980:			; <UNDEFINED> instruction: 0x000159b0
   15984:			; <UNDEFINED> instruction: 0x000159b0
   15988:			; <UNDEFINED> instruction: 0x000159b0
   1598c:			; <UNDEFINED> instruction: 0x000159b0
   15990:			; <UNDEFINED> instruction: 0x000159b0
   15994:			; <UNDEFINED> instruction: 0x000159b0
   15998:			; <UNDEFINED> instruction: 0x000159b0
   1599c:			; <UNDEFINED> instruction: 0x000159b0
   159a0:			; <UNDEFINED> instruction: 0x000159b0
   159a4:			; <UNDEFINED> instruction: 0x000159b0
   159a8:			; <UNDEFINED> instruction: 0x000159b0
   159ac:			; <UNDEFINED> instruction: 0x000159bc
   159b0:	cmp	r4, r2
   159b4:	bne	15914 <__assert_fail@plt+0x49e4>
   159b8:	b	158a8 <__assert_fail@plt+0x4978>
   159bc:	mov	r3, #2
   159c0:	ldr	fp, [sp, #100]	; 0x64
   159c4:	str	r3, [sp, #176]	; 0xb0
   159c8:	ldr	sl, [sp, #104]	; 0x68
   159cc:	b	14e90 <__assert_fail@plt+0x3f60>
   159d0:	ldr	r2, [sp, #52]	; 0x34
   159d4:	mov	fp, r9
   159d8:	ldr	r3, [sp, #60]	; 0x3c
   159dc:	and	r3, r3, r2
   159e0:	str	r3, [sp, #60]	; 0x3c
   159e4:	b	14e90 <__assert_fail@plt+0x3f60>
   159e8:	cmp	sl, r4
   159ec:	movhi	r2, fp
   159f0:	bhi	14d68 <__assert_fail@plt+0x3e38>
   159f4:	mov	r2, r4
   159f8:	b	14d78 <__assert_fail@plt+0x3e48>
   159fc:	mov	r6, r3
   15a00:	mov	r5, #63	; 0x3f
   15a04:	b	14e38 <__assert_fail@plt+0x3f08>
   15a08:	ldr	r8, [sp, #36]	; 0x24
   15a0c:	ldr	r6, [sp, #100]	; 0x64
   15a10:	b	14ce4 <__assert_fail@plt+0x3db4>
   15a14:	mov	fp, r9
   15a18:	ldr	r8, [sp, #36]	; 0x24
   15a1c:	ldr	r3, [sp, #52]	; 0x34
   15a20:	str	r3, [sp, #60]	; 0x3c
   15a24:	b	14e90 <__assert_fail@plt+0x3f60>
   15a28:	ldr	r8, [sp, #36]	; 0x24
   15a2c:	ldr	r6, [sp, #100]	; 0x64
   15a30:	b	14b7c <__assert_fail@plt+0x3c4c>
   15a34:	mov	r3, #0
   15a38:	add	r4, r4, #4
   15a3c:	mov	fp, r2
   15a40:	mov	r6, r3
   15a44:	mov	r5, #48	; 0x30
   15a48:	b	14cd4 <__assert_fail@plt+0x3da4>
   15a4c:	mov	r6, r3
   15a50:	b	154d0 <__assert_fail@plt+0x45a0>
   15a54:	mov	r3, #1
   15a58:	movw	r2, #45024	; 0xafe0
   15a5c:	movt	r2, #1
   15a60:	mov	r4, r3
   15a64:	mov	r9, sl
   15a68:	str	r3, [sp, #32]
   15a6c:	str	sl, [sp, #44]	; 0x2c
   15a70:	str	r3, [sp, #48]	; 0x30
   15a74:	str	sl, [sp, #52]	; 0x34
   15a78:	str	r3, [sp, #56]	; 0x38
   15a7c:	str	r3, [sp, #60]	; 0x3c
   15a80:	str	sl, [sp, #64]	; 0x40
   15a84:	str	sl, [sp, #68]	; 0x44
   15a88:	str	r2, [sp, #72]	; 0x48
   15a8c:	str	sl, [sp, #80]	; 0x50
   15a90:	str	sl, [sp, #84]	; 0x54
   15a94:	str	sl, [sp, #88]	; 0x58
   15a98:	b	14588 <__assert_fail@plt+0x3658>
   15a9c:	mov	r3, #0
   15aa0:	mov	r5, #48	; 0x30
   15aa4:	mov	r6, r3
   15aa8:	b	14cd4 <__assert_fail@plt+0x3da4>
   15aac:	cmp	sl, r4
   15ab0:	mov	r5, #48	; 0x30
   15ab4:	movhi	r3, #48	; 0x30
   15ab8:	strbhi	r3, [r9, r4]
   15abc:	add	r3, r2, #2
   15ac0:	add	r4, r2, #3
   15ac4:	cmp	sl, r3
   15ac8:	movhi	r1, #48	; 0x30
   15acc:	strbhi	r1, [r9, r3]
   15ad0:	mov	r3, #0
   15ad4:	b	14db0 <__assert_fail@plt+0x3e80>
   15ad8:	ldr	r3, [sp, #48]	; 0x30
   15adc:	str	r3, [sp, #40]	; 0x28
   15ae0:	b	153bc <__assert_fail@plt+0x448c>
   15ae4:	ldr	r2, [sp, #28]
   15ae8:	ldrb	r2, [r2, r3]
   15aec:	sub	r1, r2, #33	; 0x21
   15af0:	cmp	r1, #29
   15af4:	ldrls	pc, [pc, r1, lsl #2]
   15af8:	b	14e34 <__assert_fail@plt+0x3f04>
   15afc:	andeq	r5, r1, r4, ror fp
   15b00:	andeq	r4, r1, r4, lsr lr
   15b04:	andeq	r4, r1, r4, lsr lr
   15b08:	andeq	r4, r1, r4, lsr lr
   15b0c:	andeq	r4, r1, r4, lsr lr
   15b10:	andeq	r4, r1, r4, lsr lr
   15b14:	andeq	r5, r1, r4, ror fp
   15b18:	andeq	r5, r1, r4, ror fp
   15b1c:	andeq	r5, r1, r4, ror fp
   15b20:	andeq	r4, r1, r4, lsr lr
   15b24:	andeq	r4, r1, r4, lsr lr
   15b28:	andeq	r4, r1, r4, lsr lr
   15b2c:	andeq	r5, r1, r4, ror fp
   15b30:	andeq	r4, r1, r4, lsr lr
   15b34:	andeq	r5, r1, r4, ror fp
   15b38:	andeq	r4, r1, r4, lsr lr
   15b3c:	andeq	r4, r1, r4, lsr lr
   15b40:	andeq	r4, r1, r4, lsr lr
   15b44:	andeq	r4, r1, r4, lsr lr
   15b48:	andeq	r4, r1, r4, lsr lr
   15b4c:	andeq	r4, r1, r4, lsr lr
   15b50:	andeq	r4, r1, r4, lsr lr
   15b54:	andeq	r4, r1, r4, lsr lr
   15b58:	andeq	r4, r1, r4, lsr lr
   15b5c:	andeq	r4, r1, r4, lsr lr
   15b60:	andeq	r4, r1, r4, lsr lr
   15b64:	andeq	r4, r1, r4, lsr lr
   15b68:	andeq	r5, r1, r4, ror fp
   15b6c:	andeq	r5, r1, r4, ror fp
   15b70:	andeq	r5, r1, r4, ror fp
   15b74:	ldr	r1, [sp, #44]	; 0x2c
   15b78:	cmp	r1, #0
   15b7c:	bne	15ddc <__assert_fail@plt+0x4eac>
   15b80:	cmp	sl, r4
   15b84:	mov	r7, r3
   15b88:	movhi	r1, #63	; 0x3f
   15b8c:	mov	r5, r2
   15b90:	mov	r3, fp
   15b94:	strbhi	r1, [r9, r4]
   15b98:	add	r1, r4, #1
   15b9c:	cmp	sl, r1
   15ba0:	movhi	r0, #34	; 0x22
   15ba4:	strbhi	r0, [r9, r1]
   15ba8:	add	r1, r4, #2
   15bac:	cmp	sl, r1
   15bb0:	movhi	r0, #34	; 0x22
   15bb4:	strbhi	r0, [r9, r1]
   15bb8:	add	r1, r4, #3
   15bbc:	add	r4, r4, #4
   15bc0:	cmp	sl, r1
   15bc4:	movhi	r0, #63	; 0x3f
   15bc8:	strbhi	r0, [r9, r1]
   15bcc:	b	14db0 <__assert_fail@plt+0x3e80>
   15bd0:	mov	fp, r9
   15bd4:	b	14e90 <__assert_fail@plt+0x3f60>
   15bd8:	ldr	r3, [sp, #188]	; 0xbc
   15bdc:	ldrb	r3, [r3]
   15be0:	cmp	r3, #0
   15be4:	beq	14520 <__assert_fail@plt+0x35f0>
   15be8:	ldr	r2, [sp, #188]	; 0xbc
   15bec:	cmp	sl, r4
   15bf0:	bls	15c10 <__assert_fail@plt+0x4ce0>
   15bf4:	strb	r3, [fp, r4]
   15bf8:	add	r4, r4, #1
   15bfc:	ldrb	r3, [r2, #1]!
   15c00:	cmp	r3, #0
   15c04:	beq	14520 <__assert_fail@plt+0x35f0>
   15c08:	cmp	sl, r4
   15c0c:	bhi	15bf4 <__assert_fail@plt+0x4cc4>
   15c10:	ldrb	r3, [r2, #1]!
   15c14:	add	r4, r4, #1
   15c18:	cmp	r3, #0
   15c1c:	bne	15bec <__assert_fail@plt+0x4cbc>
   15c20:	b	14520 <__assert_fail@plt+0x35f0>
   15c24:	add	r9, sp, #100	; 0x64
   15c28:	mov	r0, r5
   15c2c:	ldr	r2, [sp, #60]	; 0x3c
   15c30:	mov	r6, #0
   15c34:	ldm	r9, {r9, sl, fp}
   15c38:	ldr	r5, [sp, #112]	; 0x70
   15c3c:	ldr	r4, [sp, #116]	; 0x74
   15c40:	b	158f0 <__assert_fail@plt+0x49c0>
   15c44:	cmp	r4, r8
   15c48:	add	r9, sp, #100	; 0x64
   15c4c:	mov	r1, r4
   15c50:	mov	r2, fp
   15c54:	ldm	r9, {r9, sl, fp}
   15c58:	mov	r3, r5
   15c5c:	mov	r0, r5
   15c60:	ldr	r5, [sp, #112]	; 0x70
   15c64:	ldr	r4, [sp, #116]	; 0x74
   15c68:	bcs	15c9c <__assert_fail@plt+0x4d6c>
   15c6c:	ldrb	r6, [r2]
   15c70:	cmp	r6, #0
   15c74:	bne	15c88 <__assert_fail@plt+0x4d58>
   15c78:	b	15dd4 <__assert_fail@plt+0x4ea4>
   15c7c:	ldrb	r6, [r2, #1]!
   15c80:	cmp	r6, #0
   15c84:	beq	15d6c <__assert_fail@plt+0x4e3c>
   15c88:	add	r3, r3, #1
   15c8c:	add	r1, r7, r3
   15c90:	cmp	r8, r1
   15c94:	bhi	15c7c <__assert_fail@plt+0x4d4c>
   15c98:	mov	r0, r3
   15c9c:	mov	r6, #0
   15ca0:	ldr	r2, [sp, #60]	; 0x3c
   15ca4:	b	158f0 <__assert_fail@plt+0x49c0>
   15ca8:	mov	r3, #1
   15cac:	mov	r4, #0
   15cb0:	mov	r9, r4
   15cb4:	str	r3, [sp, #32]
   15cb8:	str	r3, [sp, #44]	; 0x2c
   15cbc:	str	r3, [sp, #48]	; 0x30
   15cc0:	str	r4, [sp, #52]	; 0x34
   15cc4:	str	r3, [sp, #56]	; 0x38
   15cc8:	str	r3, [sp, #60]	; 0x3c
   15ccc:	str	r3, [sp, #88]	; 0x58
   15cd0:	movw	r3, #45024	; 0xafe0
   15cd4:	movt	r3, #1
   15cd8:	str	r4, [sp, #64]	; 0x40
   15cdc:	str	r4, [sp, #68]	; 0x44
   15ce0:	str	r3, [sp, #72]	; 0x48
   15ce4:	str	r4, [sp, #80]	; 0x50
   15ce8:	str	r4, [sp, #84]	; 0x54
   15cec:	b	14588 <__assert_fail@plt+0x3658>
   15cf0:	mov	fp, r9
   15cf4:	b	14ea4 <__assert_fail@plt+0x3f74>
   15cf8:	ldr	r3, [sp, #48]	; 0x30
   15cfc:	b	15818 <__assert_fail@plt+0x48e8>
   15d00:	mov	r2, r3
   15d04:	ldr	r3, [sp, #72]	; 0x48
   15d08:	cmp	r3, #0
   15d0c:	moveq	r2, #0
   15d10:	andne	r2, r2, #1
   15d14:	cmp	r2, #0
   15d18:	beq	15d48 <__assert_fail@plt+0x4e18>
   15d1c:	mov	r2, r3
   15d20:	ldrb	r3, [r3]
   15d24:	cmp	r3, #0
   15d28:	beq	15d48 <__assert_fail@plt+0x4e18>
   15d2c:	cmp	sl, r4
   15d30:	bls	15d58 <__assert_fail@plt+0x4e28>
   15d34:	strb	r3, [fp, r4]
   15d38:	add	r4, r4, #1
   15d3c:	ldrb	r3, [r2, #1]!
   15d40:	cmp	r3, #0
   15d44:	bne	15d2c <__assert_fail@plt+0x4dfc>
   15d48:	cmp	sl, r4
   15d4c:	movhi	r3, #0
   15d50:	strbhi	r3, [fp, r4]
   15d54:	b	14ee0 <__assert_fail@plt+0x3fb0>
   15d58:	ldrb	r3, [r2, #1]!
   15d5c:	add	r4, r4, #1
   15d60:	cmp	r3, #0
   15d64:	bne	15d2c <__assert_fail@plt+0x4dfc>
   15d68:	b	15d48 <__assert_fail@plt+0x4e18>
   15d6c:	mov	r0, r3
   15d70:	ldr	r2, [sp, #60]	; 0x3c
   15d74:	b	158f0 <__assert_fail@plt+0x49c0>
   15d78:	mov	ip, #5
   15d7c:	mov	r3, r8
   15d80:	ldr	r1, [sp, #84]	; 0x54
   15d84:	str	ip, [sp]
   15d88:	ldr	r2, [sp, #180]	; 0xb4
   15d8c:	ldr	ip, [sp, #188]	; 0xbc
   15d90:	ldr	r0, [sp, #184]	; 0xb8
   15d94:	str	r2, [sp, #4]
   15d98:	ldr	r2, [sp, #28]
   15d9c:	str	ip, [sp, #12]
   15da0:	ldr	ip, [sp, #192]	; 0xc0
   15da4:	str	r0, [sp, #8]
   15da8:	mov	r0, fp
   15dac:	str	ip, [sp, #16]
   15db0:	bl	14464 <__assert_fail@plt+0x3534>
   15db4:	mov	r4, r0
   15db8:	b	14ee0 <__assert_fail@plt+0x3fb0>
   15dbc:	mov	r6, r3
   15dc0:	str	r3, [sp, #40]	; 0x28
   15dc4:	b	14e50 <__assert_fail@plt+0x3f20>
   15dc8:	mov	r3, #2
   15dcc:	str	r3, [sp, #176]	; 0xb0
   15dd0:	b	14e90 <__assert_fail@plt+0x3f60>
   15dd4:	ldr	r2, [sp, #60]	; 0x3c
   15dd8:	b	158f0 <__assert_fail@plt+0x49c0>
   15ddc:	mov	r3, #5
   15de0:	mov	fp, r9
   15de4:	str	r3, [sp, #176]	; 0xb0
   15de8:	b	14ea4 <__assert_fail@plt+0x3f74>
   15dec:	mov	r1, #1
   15df0:	mov	r9, #0
   15df4:	mov	r3, r9
   15df8:	mov	r2, r9
   15dfc:	str	r1, [sp, #32]
   15e00:	str	sl, [sp, #84]	; 0x54
   15e04:	b	14c2c <__assert_fail@plt+0x3cfc>
   15e08:	mov	r3, #0
   15e0c:	mov	r2, #1
   15e10:	mov	r9, r3
   15e14:	mov	r4, r3
   15e18:	str	r2, [sp, #32]
   15e1c:	strd	r2, [sp, #44]	; 0x2c
   15e20:	strd	r2, [sp, #56]	; 0x38
   15e24:	str	r3, [sp, #80]	; 0x50
   15e28:	str	r3, [sp, #84]	; 0x54
   15e2c:	str	r3, [sp, #88]	; 0x58
   15e30:	movw	r3, #45044	; 0xaff4
   15e34:	movt	r3, #1
   15e38:	str	r2, [sp, #52]	; 0x34
   15e3c:	str	r2, [sp, #64]	; 0x40
   15e40:	str	r2, [sp, #68]	; 0x44
   15e44:	str	r3, [sp, #72]	; 0x48
   15e48:	b	14588 <__assert_fail@plt+0x3658>
   15e4c:	bl	10f24 <abort@plt>
   15e50:	strd	r4, [sp, #-36]!	; 0xffffffdc
   15e54:	mov	r4, r0
   15e58:	mov	r5, r3
   15e5c:	strd	r6, [sp, #8]
   15e60:	movw	r7, #49396	; 0xc0f4
   15e64:	movt	r7, #2
   15e68:	strd	r8, [sp, #16]
   15e6c:	strd	sl, [sp, #24]
   15e70:	mov	sl, r1
   15e74:	mov	fp, r2
   15e78:	str	lr, [sp, #32]
   15e7c:	sub	sp, sp, #60	; 0x3c
   15e80:	bl	10e4c <__errno_location@plt>
   15e84:	mov	r8, r0
   15e88:	cmn	r4, #-2147483647	; 0x80000001
   15e8c:	ldr	r6, [r7]
   15e90:	movne	r0, #0
   15e94:	moveq	r0, #1
   15e98:	ldr	r3, [r8]
   15e9c:	orrs	r0, r0, r4, lsr #31
   15ea0:	str	r3, [sp, #28]
   15ea4:	bne	16034 <__assert_fail@plt+0x5104>
   15ea8:	ldr	r3, [r7, #4]
   15eac:	cmp	r3, r4
   15eb0:	bgt	15f10 <__assert_fail@plt+0x4fe0>
   15eb4:	add	r1, r7, #8
   15eb8:	sub	r2, r4, r3
   15ebc:	str	r3, [sp, #52]	; 0x34
   15ec0:	cmp	r6, r1
   15ec4:	add	r2, r2, #1
   15ec8:	beq	1600c <__assert_fail@plt+0x50dc>
   15ecc:	mov	r1, #8
   15ed0:	mov	r0, r6
   15ed4:	mvn	r3, #-2147483648	; 0x80000000
   15ed8:	str	r1, [sp]
   15edc:	add	r1, sp, #52	; 0x34
   15ee0:	bl	18770 <__assert_fail@plt+0x7840>
   15ee4:	mov	r6, r0
   15ee8:	str	r0, [r7]
   15eec:	ldr	r0, [r7, #4]
   15ef0:	mov	r1, #0
   15ef4:	ldr	r2, [sp, #52]	; 0x34
   15ef8:	sub	r2, r2, r0
   15efc:	add	r0, r6, r0, lsl #3
   15f00:	lsl	r2, r2, #3
   15f04:	bl	10e64 <memset@plt>
   15f08:	ldr	r3, [sp, #52]	; 0x34
   15f0c:	str	r3, [r7, #4]
   15f10:	ldr	r1, [r5, #4]
   15f14:	add	r0, r6, r4, lsl #3
   15f18:	add	ip, r5, #8
   15f1c:	mov	r3, fp
   15f20:	mov	r2, sl
   15f24:	ldr	r7, [r0, #4]
   15f28:	str	r0, [sp, #36]	; 0x24
   15f2c:	str	ip, [sp, #40]	; 0x28
   15f30:	orr	r0, r1, #1
   15f34:	ldr	r9, [r6, r4, lsl #3]
   15f38:	str	ip, [sp, #8]
   15f3c:	ldr	lr, [r5, #44]	; 0x2c
   15f40:	str	r0, [sp, #4]
   15f44:	ldr	ip, [r5]
   15f48:	mov	r1, r9
   15f4c:	str	ip, [sp, #32]
   15f50:	ldr	ip, [r5, #40]	; 0x28
   15f54:	str	ip, [sp, #12]
   15f58:	ldr	ip, [sp, #32]
   15f5c:	str	lr, [sp, #16]
   15f60:	str	r0, [sp, #44]	; 0x2c
   15f64:	mov	r0, r7
   15f68:	str	ip, [sp]
   15f6c:	bl	14464 <__assert_fail@plt+0x3534>
   15f70:	cmp	r9, r0
   15f74:	bhi	15fe4 <__assert_fail@plt+0x50b4>
   15f78:	add	r9, r0, #1
   15f7c:	movw	r3, #49536	; 0xc180
   15f80:	movt	r3, #2
   15f84:	cmp	r7, r3
   15f88:	str	r9, [r6, r4, lsl #3]
   15f8c:	beq	15f98 <__assert_fail@plt+0x5068>
   15f90:	mov	r0, r7
   15f94:	bl	14110 <__assert_fail@plt+0x31e0>
   15f98:	mov	r0, r9
   15f9c:	bl	184cc <__assert_fail@plt+0x759c>
   15fa0:	ldr	ip, [r5]
   15fa4:	mov	r3, fp
   15fa8:	mov	r2, sl
   15fac:	mov	r1, r9
   15fb0:	mov	r7, r0
   15fb4:	ldr	lr, [sp, #36]	; 0x24
   15fb8:	ldr	r4, [r5, #40]	; 0x28
   15fbc:	str	r0, [lr, #4]
   15fc0:	ldr	lr, [r5, #44]	; 0x2c
   15fc4:	str	ip, [sp]
   15fc8:	ldr	ip, [sp, #44]	; 0x2c
   15fcc:	str	ip, [sp, #4]
   15fd0:	ldr	ip, [sp, #40]	; 0x28
   15fd4:	str	r4, [sp, #12]
   15fd8:	str	lr, [sp, #16]
   15fdc:	str	ip, [sp, #8]
   15fe0:	bl	14464 <__assert_fail@plt+0x3534>
   15fe4:	ldr	r3, [sp, #28]
   15fe8:	mov	r0, r7
   15fec:	str	r3, [r8]
   15ff0:	add	sp, sp, #60	; 0x3c
   15ff4:	ldrd	r4, [sp]
   15ff8:	ldrd	r6, [sp, #8]
   15ffc:	ldrd	r8, [sp, #16]
   16000:	ldrd	sl, [sp, #24]
   16004:	add	sp, sp, #32
   16008:	pop	{pc}		; (ldr pc, [sp], #4)
   1600c:	mov	r1, #8
   16010:	mvn	r3, #-2147483648	; 0x80000000
   16014:	str	r1, [sp]
   16018:	add	r1, sp, #52	; 0x34
   1601c:	bl	18770 <__assert_fail@plt+0x7840>
   16020:	ldrd	r2, [r7, #8]
   16024:	mov	r6, r0
   16028:	str	r0, [r7]
   1602c:	strd	r2, [r0]
   16030:	b	15eec <__assert_fail@plt+0x4fbc>
   16034:	bl	10f24 <abort@plt>
   16038:	strd	r4, [sp, #-16]!
   1603c:	mov	r5, r0
   16040:	str	r6, [sp, #8]
   16044:	str	lr, [sp, #12]
   16048:	bl	10e4c <__errno_location@plt>
   1604c:	mov	r4, r0
   16050:	cmp	r5, #0
   16054:	ldr	r0, [pc, #32]	; 1607c <__assert_fail@plt+0x514c>
   16058:	mov	r1, #48	; 0x30
   1605c:	movne	r0, r5
   16060:	ldr	r6, [r4]
   16064:	bl	18910 <__assert_fail@plt+0x79e0>
   16068:	str	r6, [r4]
   1606c:	ldrd	r4, [sp]
   16070:	ldr	r6, [sp, #8]
   16074:	add	sp, sp, #12
   16078:	pop	{pc}		; (ldr pc, [sp], #4)
   1607c:	andeq	ip, r2, r0, lsl #5
   16080:	ldr	r3, [pc, #12]	; 16094 <__assert_fail@plt+0x5164>
   16084:	cmp	r0, #0
   16088:	moveq	r0, r3
   1608c:	ldr	r0, [r0]
   16090:	bx	lr
   16094:	andeq	ip, r2, r0, lsl #5
   16098:	ldr	r3, [pc, #12]	; 160ac <__assert_fail@plt+0x517c>
   1609c:	cmp	r0, #0
   160a0:	moveq	r0, r3
   160a4:	str	r1, [r0]
   160a8:	bx	lr
   160ac:	andeq	ip, r2, r0, lsl #5
   160b0:	ldr	r3, [pc, #52]	; 160ec <__assert_fail@plt+0x51bc>
   160b4:	cmp	r0, #0
   160b8:	push	{lr}		; (str lr, [sp, #-4]!)
   160bc:	lsr	lr, r1, #5
   160c0:	and	r1, r1, #31
   160c4:	moveq	r0, r3
   160c8:	add	r3, r0, #8
   160cc:	ldr	ip, [r3, lr, lsl #2]
   160d0:	lsr	r0, ip, r1
   160d4:	eor	r2, r2, r0
   160d8:	and	r0, r0, #1
   160dc:	and	r2, r2, #1
   160e0:	eor	r1, ip, r2, lsl r1
   160e4:	str	r1, [r3, lr, lsl #2]
   160e8:	pop	{pc}		; (ldr pc, [sp], #4)
   160ec:	andeq	ip, r2, r0, lsl #5
   160f0:	ldr	r3, [pc, #16]	; 16108 <__assert_fail@plt+0x51d8>
   160f4:	cmp	r0, #0
   160f8:	movne	r3, r0
   160fc:	ldr	r0, [r3, #4]
   16100:	str	r1, [r3, #4]
   16104:	bx	lr
   16108:	andeq	ip, r2, r0, lsl #5
   1610c:	ldr	r3, [pc, #48]	; 16144 <__assert_fail@plt+0x5214>
   16110:	cmp	r0, #0
   16114:	mov	ip, #10
   16118:	moveq	r0, r3
   1611c:	cmp	r2, #0
   16120:	cmpne	r1, #0
   16124:	str	ip, [r0]
   16128:	beq	16138 <__assert_fail@plt+0x5208>
   1612c:	str	r1, [r0, #40]	; 0x28
   16130:	str	r2, [r0, #44]	; 0x2c
   16134:	bx	lr
   16138:	str	r4, [sp, #-8]!
   1613c:	str	lr, [sp, #4]
   16140:	bl	10f24 <abort@plt>
   16144:	andeq	ip, r2, r0, lsl #5
   16148:	strd	r4, [sp, #-28]!	; 0xffffffe4
   1614c:	strd	r6, [sp, #8]
   16150:	mov	r7, r0
   16154:	mov	r6, r1
   16158:	strd	r8, [sp, #16]
   1615c:	mov	r8, r2
   16160:	mov	r9, r3
   16164:	str	lr, [sp, #24]
   16168:	sub	sp, sp, #28
   1616c:	ldr	r4, [sp, #56]	; 0x38
   16170:	ldr	ip, [pc, #104]	; 161e0 <__assert_fail@plt+0x52b0>
   16174:	cmp	r4, #0
   16178:	moveq	r4, ip
   1617c:	bl	10e4c <__errno_location@plt>
   16180:	ldr	ip, [r4, #44]	; 0x2c
   16184:	mov	r5, r0
   16188:	mov	r1, r6
   1618c:	add	lr, r4, #8
   16190:	mov	r3, r9
   16194:	ldr	r6, [r5]
   16198:	mov	r2, r8
   1619c:	mov	r0, r7
   161a0:	str	ip, [sp, #16]
   161a4:	ldr	ip, [r4, #40]	; 0x28
   161a8:	str	lr, [sp, #8]
   161ac:	str	ip, [sp, #12]
   161b0:	ldr	ip, [r4, #4]
   161b4:	str	ip, [sp, #4]
   161b8:	ldr	ip, [r4]
   161bc:	str	ip, [sp]
   161c0:	bl	14464 <__assert_fail@plt+0x3534>
   161c4:	str	r6, [r5]
   161c8:	add	sp, sp, #28
   161cc:	ldrd	r4, [sp]
   161d0:	ldrd	r6, [sp, #8]
   161d4:	ldrd	r8, [sp, #16]
   161d8:	add	sp, sp, #24
   161dc:	pop	{pc}		; (ldr pc, [sp], #4)
   161e0:	andeq	ip, r2, r0, lsl #5
   161e4:	strd	r4, [sp, #-36]!	; 0xffffffdc
   161e8:	cmp	r2, #0
   161ec:	ldr	r4, [pc, #192]	; 162b4 <__assert_fail@plt+0x5384>
   161f0:	movne	r4, r2
   161f4:	strd	r6, [sp, #8]
   161f8:	strd	r8, [sp, #16]
   161fc:	mov	r9, r1
   16200:	mov	r8, r0
   16204:	strd	sl, [sp, #24]
   16208:	str	lr, [sp, #32]
   1620c:	sub	sp, sp, #36	; 0x24
   16210:	bl	10e4c <__errno_location@plt>
   16214:	ldr	r5, [r4, #4]
   16218:	mov	r6, r0
   1621c:	add	r7, r4, #8
   16220:	mov	r1, #0
   16224:	mov	r3, r9
   16228:	ldr	ip, [r4, #44]	; 0x2c
   1622c:	mov	r2, r8
   16230:	mov	r0, r1
   16234:	ldr	sl, [r6]
   16238:	orr	r5, r5, #1
   1623c:	str	ip, [sp, #16]
   16240:	ldr	ip, [r4, #40]	; 0x28
   16244:	stmib	sp, {r5, r7, ip}
   16248:	ldr	ip, [r4]
   1624c:	str	ip, [sp]
   16250:	bl	14464 <__assert_fail@plt+0x3534>
   16254:	add	r1, r0, #1
   16258:	mov	r0, r1
   1625c:	str	r1, [sp, #28]
   16260:	bl	184cc <__assert_fail@plt+0x759c>
   16264:	ldr	ip, [r4, #44]	; 0x2c
   16268:	mov	fp, r0
   1626c:	mov	r3, r9
   16270:	mov	r2, r8
   16274:	ldr	r1, [sp, #28]
   16278:	str	ip, [sp, #16]
   1627c:	ldr	ip, [r4, #40]	; 0x28
   16280:	stmib	sp, {r5, r7, ip}
   16284:	ldr	ip, [r4]
   16288:	str	ip, [sp]
   1628c:	bl	14464 <__assert_fail@plt+0x3534>
   16290:	mov	r0, fp
   16294:	str	sl, [r6]
   16298:	add	sp, sp, #36	; 0x24
   1629c:	ldrd	r4, [sp]
   162a0:	ldrd	r6, [sp, #8]
   162a4:	ldrd	r8, [sp, #16]
   162a8:	ldrd	sl, [sp, #24]
   162ac:	add	sp, sp, #32
   162b0:	pop	{pc}		; (ldr pc, [sp], #4)
   162b4:	andeq	ip, r2, r0, lsl #5
   162b8:	strd	r4, [sp, #-36]!	; 0xffffffdc
   162bc:	cmp	r3, #0
   162c0:	ldr	r4, [pc, #220]	; 163a4 <__assert_fail@plt+0x5474>
   162c4:	movne	r4, r3
   162c8:	strd	r6, [sp, #8]
   162cc:	mov	r6, r2
   162d0:	strd	r8, [sp, #16]
   162d4:	mov	r9, r0
   162d8:	strd	sl, [sp, #24]
   162dc:	mov	sl, r1
   162e0:	str	lr, [sp, #32]
   162e4:	sub	sp, sp, #44	; 0x2c
   162e8:	bl	10e4c <__errno_location@plt>
   162ec:	ldr	r5, [r4, #4]
   162f0:	mov	r7, r0
   162f4:	mov	r1, #0
   162f8:	add	r8, r4, #8
   162fc:	mov	r3, sl
   16300:	ldr	ip, [r4, #44]	; 0x2c
   16304:	mov	r2, r9
   16308:	mov	r0, r1
   1630c:	ldr	lr, [r7]
   16310:	cmp	r6, r1
   16314:	orreq	r5, r5, #1
   16318:	str	ip, [sp, #16]
   1631c:	ldr	ip, [r4, #40]	; 0x28
   16320:	stmib	sp, {r5, r8, ip}
   16324:	ldr	ip, [r4]
   16328:	str	lr, [sp, #28]
   1632c:	str	ip, [sp]
   16330:	bl	14464 <__assert_fail@plt+0x3534>
   16334:	add	r1, r0, #1
   16338:	mov	fp, r0
   1633c:	mov	r0, r1
   16340:	str	r1, [sp, #36]	; 0x24
   16344:	bl	184cc <__assert_fail@plt+0x759c>
   16348:	ldr	ip, [r4, #44]	; 0x2c
   1634c:	mov	r3, sl
   16350:	mov	r2, r9
   16354:	ldr	r1, [sp, #36]	; 0x24
   16358:	str	ip, [sp, #16]
   1635c:	ldr	ip, [r4, #40]	; 0x28
   16360:	str	r0, [sp, #32]
   16364:	stmib	sp, {r5, r8, ip}
   16368:	ldr	ip, [r4]
   1636c:	str	ip, [sp]
   16370:	bl	14464 <__assert_fail@plt+0x3534>
   16374:	ldr	lr, [sp, #28]
   16378:	cmp	r6, #0
   1637c:	ldr	r0, [sp, #32]
   16380:	str	lr, [r7]
   16384:	strne	fp, [r6]
   16388:	add	sp, sp, #44	; 0x2c
   1638c:	ldrd	r4, [sp]
   16390:	ldrd	r6, [sp, #8]
   16394:	ldrd	r8, [sp, #16]
   16398:	ldrd	sl, [sp, #24]
   1639c:	add	sp, sp, #32
   163a0:	pop	{pc}		; (ldr pc, [sp], #4)
   163a4:	andeq	ip, r2, r0, lsl #5
   163a8:	strd	r4, [sp, #-24]!	; 0xffffffe8
   163ac:	movw	r5, #49396	; 0xc0f4
   163b0:	movt	r5, #2
   163b4:	ldr	r3, [r5, #4]
   163b8:	strd	r6, [sp, #8]
   163bc:	str	r8, [sp, #16]
   163c0:	str	lr, [sp, #20]
   163c4:	ldr	r7, [r5]
   163c8:	cmp	r3, #1
   163cc:	ble	163f0 <__assert_fail@plt+0x54c0>
   163d0:	mov	r4, #1
   163d4:	add	r6, r7, #4
   163d8:	ldr	r0, [r6, r4, lsl #3]
   163dc:	add	r4, r4, #1
   163e0:	bl	14110 <__assert_fail@plt+0x31e0>
   163e4:	ldr	r3, [r5, #4]
   163e8:	cmp	r3, r4
   163ec:	bgt	163d8 <__assert_fail@plt+0x54a8>
   163f0:	ldr	r0, [r7, #4]
   163f4:	movw	r4, #49536	; 0xc180
   163f8:	movt	r4, #2
   163fc:	cmp	r0, r4
   16400:	beq	16414 <__assert_fail@plt+0x54e4>
   16404:	bl	14110 <__assert_fail@plt+0x31e0>
   16408:	mov	r3, #256	; 0x100
   1640c:	str	r3, [r5, #8]
   16410:	str	r4, [r5, #12]
   16414:	ldr	r4, [pc, #44]	; 16448 <__assert_fail@plt+0x5518>
   16418:	cmp	r7, r4
   1641c:	beq	1642c <__assert_fail@plt+0x54fc>
   16420:	mov	r0, r7
   16424:	bl	14110 <__assert_fail@plt+0x31e0>
   16428:	str	r4, [r5]
   1642c:	mov	r3, #1
   16430:	ldrd	r6, [sp, #8]
   16434:	str	r3, [r5, #4]
   16438:	ldrd	r4, [sp]
   1643c:	ldr	r8, [sp, #16]
   16440:	add	sp, sp, #20
   16444:	pop	{pc}		; (ldr pc, [sp], #4)
   16448:	strdeq	ip, [r2], -ip	; <UNPREDICTABLE>
   1644c:	ldr	r3, [pc, #4]	; 16458 <__assert_fail@plt+0x5528>
   16450:	mvn	r2, #0
   16454:	b	15e50 <__assert_fail@plt+0x4f20>
   16458:	andeq	ip, r2, r0, lsl #5
   1645c:	ldr	r3, [pc]	; 16464 <__assert_fail@plt+0x5534>
   16460:	b	15e50 <__assert_fail@plt+0x4f20>
   16464:	andeq	ip, r2, r0, lsl #5
   16468:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1646c:	movw	r4, #49396	; 0xc0f4
   16470:	movt	r4, #2
   16474:	strd	r6, [sp, #8]
   16478:	strd	r8, [sp, #16]
   1647c:	strd	sl, [sp, #24]
   16480:	mov	sl, r0
   16484:	str	lr, [sp, #32]
   16488:	sub	sp, sp, #44	; 0x2c
   1648c:	bl	10e4c <__errno_location@plt>
   16490:	ldr	r3, [r0]
   16494:	mov	r8, r0
   16498:	ldr	r2, [r4, #4]
   1649c:	ldr	r5, [r4]
   164a0:	str	r3, [sp, #28]
   164a4:	cmp	r2, #0
   164a8:	bgt	16504 <__assert_fail@plt+0x55d4>
   164ac:	add	r3, r4, #8
   164b0:	str	r2, [sp, #36]	; 0x24
   164b4:	rsb	r2, r2, #1
   164b8:	cmp	r5, r3
   164bc:	beq	165d0 <__assert_fail@plt+0x56a0>
   164c0:	mov	r1, #8
   164c4:	mov	r0, r5
   164c8:	mvn	r3, #-2147483648	; 0x80000000
   164cc:	str	r1, [sp]
   164d0:	add	r1, sp, #36	; 0x24
   164d4:	bl	18770 <__assert_fail@plt+0x7840>
   164d8:	mov	r5, r0
   164dc:	str	r0, [r4]
   164e0:	ldr	r0, [r4, #4]
   164e4:	mov	r1, #0
   164e8:	ldr	r2, [sp, #36]	; 0x24
   164ec:	sub	r2, r2, r0
   164f0:	add	r0, r5, r0, lsl #3
   164f4:	lsl	r2, r2, #3
   164f8:	bl	10e64 <memset@plt>
   164fc:	ldr	r3, [sp, #36]	; 0x24
   16500:	str	r3, [r4, #4]
   16504:	movw	r4, #49536	; 0xc180
   16508:	movt	r4, #2
   1650c:	ldr	r9, [r5]
   16510:	add	fp, r4, #264	; 0x108
   16514:	mvn	r3, #0
   16518:	ldr	r7, [r4, #260]	; 0x104
   1651c:	mov	r2, sl
   16520:	ldr	r6, [r5, #4]
   16524:	str	fp, [sp, #8]
   16528:	mov	r1, r9
   1652c:	ldr	ip, [r4, #256]	; 0x100
   16530:	orr	r7, r7, #1
   16534:	ldr	lr, [r4, #300]	; 0x12c
   16538:	mov	r0, r6
   1653c:	str	ip, [sp]
   16540:	str	r7, [sp, #4]
   16544:	str	lr, [sp, #16]
   16548:	ldr	ip, [r4, #296]	; 0x128
   1654c:	str	ip, [sp, #12]
   16550:	bl	14464 <__assert_fail@plt+0x3534>
   16554:	cmp	r9, r0
   16558:	bhi	165a8 <__assert_fail@plt+0x5678>
   1655c:	add	r9, r0, #1
   16560:	cmp	r6, r4
   16564:	str	r9, [r5]
   16568:	beq	16574 <__assert_fail@plt+0x5644>
   1656c:	mov	r0, r6
   16570:	bl	14110 <__assert_fail@plt+0x31e0>
   16574:	mov	r0, r9
   16578:	bl	184cc <__assert_fail@plt+0x759c>
   1657c:	ldr	r3, [r4, #256]	; 0x100
   16580:	mov	r2, sl
   16584:	mov	r1, r9
   16588:	mov	r6, r0
   1658c:	ldr	lr, [r4, #296]	; 0x128
   16590:	ldr	ip, [r4, #300]	; 0x12c
   16594:	str	r0, [r5, #4]
   16598:	stm	sp, {r3, r7, fp, lr}
   1659c:	mvn	r3, #0
   165a0:	str	ip, [sp, #16]
   165a4:	bl	14464 <__assert_fail@plt+0x3534>
   165a8:	ldr	r3, [sp, #28]
   165ac:	mov	r0, r6
   165b0:	str	r3, [r8]
   165b4:	add	sp, sp, #44	; 0x2c
   165b8:	ldrd	r4, [sp]
   165bc:	ldrd	r6, [sp, #8]
   165c0:	ldrd	r8, [sp, #16]
   165c4:	ldrd	sl, [sp, #24]
   165c8:	add	sp, sp, #32
   165cc:	pop	{pc}		; (ldr pc, [sp], #4)
   165d0:	mov	r0, #8
   165d4:	mvn	r3, #-2147483648	; 0x80000000
   165d8:	add	r1, sp, #36	; 0x24
   165dc:	str	r0, [sp]
   165e0:	mov	r0, #0
   165e4:	bl	18770 <__assert_fail@plt+0x7840>
   165e8:	ldrd	r2, [r4, #8]
   165ec:	mov	r5, r0
   165f0:	str	r0, [r4]
   165f4:	strd	r2, [r0]
   165f8:	b	164e0 <__assert_fail@plt+0x55b0>
   165fc:	strd	r4, [sp, #-36]!	; 0xffffffdc
   16600:	movw	r4, #49396	; 0xc0f4
   16604:	movt	r4, #2
   16608:	strd	r6, [sp, #8]
   1660c:	strd	r8, [sp, #16]
   16610:	strd	sl, [sp, #24]
   16614:	mov	sl, r0
   16618:	mov	fp, r1
   1661c:	str	lr, [sp, #32]
   16620:	sub	sp, sp, #44	; 0x2c
   16624:	bl	10e4c <__errno_location@plt>
   16628:	ldr	r3, [r0]
   1662c:	mov	r8, r0
   16630:	ldr	r2, [r4, #4]
   16634:	ldr	r5, [r4]
   16638:	str	r3, [sp, #28]
   1663c:	cmp	r2, #0
   16640:	bgt	1669c <__assert_fail@plt+0x576c>
   16644:	add	r3, r4, #8
   16648:	str	r2, [sp, #36]	; 0x24
   1664c:	rsb	r2, r2, #1
   16650:	cmp	r5, r3
   16654:	beq	16778 <__assert_fail@plt+0x5848>
   16658:	mov	r1, #8
   1665c:	mov	r0, r5
   16660:	mvn	r3, #-2147483648	; 0x80000000
   16664:	str	r1, [sp]
   16668:	add	r1, sp, #36	; 0x24
   1666c:	bl	18770 <__assert_fail@plt+0x7840>
   16670:	mov	r5, r0
   16674:	str	r0, [r4]
   16678:	ldr	r0, [r4, #4]
   1667c:	mov	r1, #0
   16680:	ldr	r2, [sp, #36]	; 0x24
   16684:	sub	r2, r2, r0
   16688:	add	r0, r5, r0, lsl #3
   1668c:	lsl	r2, r2, #3
   16690:	bl	10e64 <memset@plt>
   16694:	ldr	r3, [sp, #36]	; 0x24
   16698:	str	r3, [r4, #4]
   1669c:	movw	r4, #49536	; 0xc180
   166a0:	movt	r4, #2
   166a4:	ldr	r9, [r5]
   166a8:	add	r0, r4, #264	; 0x108
   166ac:	mov	r3, fp
   166b0:	ldr	r7, [r4, #260]	; 0x104
   166b4:	mov	r2, sl
   166b8:	ldr	r6, [r5, #4]
   166bc:	str	r0, [sp, #8]
   166c0:	mov	r1, r9
   166c4:	ldr	ip, [r4, #256]	; 0x100
   166c8:	orr	r7, r7, #1
   166cc:	ldr	lr, [r4, #300]	; 0x12c
   166d0:	mov	r0, r6
   166d4:	str	ip, [sp]
   166d8:	str	r7, [sp, #4]
   166dc:	str	lr, [sp, #16]
   166e0:	ldr	ip, [r4, #296]	; 0x128
   166e4:	str	ip, [sp, #12]
   166e8:	bl	14464 <__assert_fail@plt+0x3534>
   166ec:	cmp	r9, r0
   166f0:	bhi	16750 <__assert_fail@plt+0x5820>
   166f4:	add	r9, r0, #1
   166f8:	cmp	r6, r4
   166fc:	str	r9, [r5]
   16700:	beq	1670c <__assert_fail@plt+0x57dc>
   16704:	mov	r0, r6
   16708:	bl	14110 <__assert_fail@plt+0x31e0>
   1670c:	mov	r0, r9
   16710:	bl	184cc <__assert_fail@plt+0x759c>
   16714:	ldr	ip, [r4, #256]	; 0x100
   16718:	mov	r1, r9
   1671c:	mov	r3, fp
   16720:	mov	r2, sl
   16724:	mov	r6, r0
   16728:	ldr	r9, [r4, #296]	; 0x128
   1672c:	ldr	lr, [r4, #300]	; 0x12c
   16730:	str	r0, [r5, #4]
   16734:	str	ip, [sp]
   16738:	ldr	ip, [pc, #100]	; 167a4 <__assert_fail@plt+0x5874>
   1673c:	str	r7, [sp, #4]
   16740:	str	ip, [sp, #8]
   16744:	str	r9, [sp, #12]
   16748:	str	lr, [sp, #16]
   1674c:	bl	14464 <__assert_fail@plt+0x3534>
   16750:	ldr	r3, [sp, #28]
   16754:	mov	r0, r6
   16758:	str	r3, [r8]
   1675c:	add	sp, sp, #44	; 0x2c
   16760:	ldrd	r4, [sp]
   16764:	ldrd	r6, [sp, #8]
   16768:	ldrd	r8, [sp, #16]
   1676c:	ldrd	sl, [sp, #24]
   16770:	add	sp, sp, #32
   16774:	pop	{pc}		; (ldr pc, [sp], #4)
   16778:	mov	r0, #8
   1677c:	mvn	r3, #-2147483648	; 0x80000000
   16780:	add	r1, sp, #36	; 0x24
   16784:	str	r0, [sp]
   16788:	mov	r0, #0
   1678c:	bl	18770 <__assert_fail@plt+0x7840>
   16790:	ldrd	r2, [r4, #8]
   16794:	mov	r5, r0
   16798:	str	r0, [r4]
   1679c:	strd	r2, [r0]
   167a0:	b	16678 <__assert_fail@plt+0x5748>
   167a4:	andeq	ip, r2, r8, lsl #5
   167a8:	strd	r4, [sp, #-20]!	; 0xffffffec
   167ac:	mov	r4, #0
   167b0:	mov	r5, #0
   167b4:	strd	r6, [sp, #8]
   167b8:	cmp	r1, #10
   167bc:	str	lr, [sp, #16]
   167c0:	sub	sp, sp, #100	; 0x64
   167c4:	strd	r4, [sp, #48]	; 0x30
   167c8:	beq	16810 <__assert_fail@plt+0x58e0>
   167cc:	mov	r3, sp
   167d0:	strd	r4, [sp, #8]
   167d4:	str	r1, [sp, #48]	; 0x30
   167d8:	mov	r1, r2
   167dc:	mvn	r2, #0
   167e0:	ldrd	r6, [sp, #48]	; 0x30
   167e4:	strd	r6, [sp]
   167e8:	strd	r4, [sp, #16]
   167ec:	strd	r4, [sp, #24]
   167f0:	strd	r4, [sp, #32]
   167f4:	strd	r4, [sp, #40]	; 0x28
   167f8:	bl	15e50 <__assert_fail@plt+0x4f20>
   167fc:	add	sp, sp, #100	; 0x64
   16800:	ldrd	r4, [sp]
   16804:	ldrd	r6, [sp, #8]
   16808:	add	sp, sp, #16
   1680c:	pop	{pc}		; (ldr pc, [sp], #4)
   16810:	bl	10f24 <abort@plt>
   16814:	strd	r4, [sp, #-20]!	; 0xffffffec
   16818:	mov	r4, #0
   1681c:	mov	r5, #0
   16820:	strd	r6, [sp, #8]
   16824:	cmp	r1, #10
   16828:	str	lr, [sp, #16]
   1682c:	sub	sp, sp, #100	; 0x64
   16830:	strd	r4, [sp, #48]	; 0x30
   16834:	beq	16880 <__assert_fail@plt+0x5950>
   16838:	mov	ip, r2
   1683c:	mov	r2, r3
   16840:	strd	r4, [sp, #8]
   16844:	str	r1, [sp, #48]	; 0x30
   16848:	mov	r3, sp
   1684c:	mov	r1, ip
   16850:	ldrd	r6, [sp, #48]	; 0x30
   16854:	strd	r6, [sp]
   16858:	strd	r4, [sp, #16]
   1685c:	strd	r4, [sp, #24]
   16860:	strd	r4, [sp, #32]
   16864:	strd	r4, [sp, #40]	; 0x28
   16868:	bl	15e50 <__assert_fail@plt+0x4f20>
   1686c:	add	sp, sp, #100	; 0x64
   16870:	ldrd	r4, [sp]
   16874:	ldrd	r6, [sp, #8]
   16878:	add	sp, sp, #16
   1687c:	pop	{pc}		; (ldr pc, [sp], #4)
   16880:	bl	10f24 <abort@plt>
   16884:	mov	r2, #0
   16888:	mov	r3, #0
   1688c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   16890:	strd	r6, [sp, #8]
   16894:	cmp	r0, #10
   16898:	strd	r8, [sp, #16]
   1689c:	strd	sl, [sp, #24]
   168a0:	str	lr, [sp, #32]
   168a4:	sub	sp, sp, #124	; 0x7c
   168a8:	strd	r2, [sp, #72]	; 0x48
   168ac:	strd	r2, [sp, #80]	; 0x50
   168b0:	strd	r2, [sp, #88]	; 0x58
   168b4:	strd	r2, [sp, #96]	; 0x60
   168b8:	strd	r2, [sp, #104]	; 0x68
   168bc:	strd	r2, [sp, #112]	; 0x70
   168c0:	beq	16a64 <__assert_fail@plt+0x5b34>
   168c4:	mov	r6, r1
   168c8:	movw	r4, #49396	; 0xc0f4
   168cc:	movt	r4, #2
   168d0:	str	r0, [sp, #72]	; 0x48
   168d4:	ldrd	r0, [sp, #72]	; 0x48
   168d8:	strd	r0, [sp, #24]
   168dc:	strd	r2, [sp, #32]
   168e0:	strd	r2, [sp, #40]	; 0x28
   168e4:	strd	r2, [sp, #48]	; 0x30
   168e8:	strd	r2, [sp, #56]	; 0x38
   168ec:	strd	r2, [sp, #64]	; 0x40
   168f0:	bl	10e4c <__errno_location@plt>
   168f4:	mov	r8, r0
   168f8:	ldr	r5, [r4]
   168fc:	ldr	r2, [r4, #4]
   16900:	ldr	r9, [r0]
   16904:	cmp	r2, #0
   16908:	bgt	16964 <__assert_fail@plt+0x5a34>
   1690c:	add	r3, r4, #8
   16910:	str	r2, [sp, #72]	; 0x48
   16914:	rsb	r2, r2, #1
   16918:	cmp	r5, r3
   1691c:	beq	16a38 <__assert_fail@plt+0x5b08>
   16920:	mov	r3, #8
   16924:	mov	r0, r5
   16928:	add	r1, sp, #72	; 0x48
   1692c:	str	r3, [sp]
   16930:	mvn	r3, #-2147483648	; 0x80000000
   16934:	bl	18770 <__assert_fail@plt+0x7840>
   16938:	mov	r5, r0
   1693c:	str	r0, [r4]
   16940:	ldr	r0, [r4, #4]
   16944:	mov	r1, #0
   16948:	ldr	r2, [sp, #72]	; 0x48
   1694c:	sub	r2, r2, r0
   16950:	add	r0, r5, r0, lsl #3
   16954:	lsl	r2, r2, #3
   16958:	bl	10e64 <memset@plt>
   1695c:	ldr	r3, [sp, #72]	; 0x48
   16960:	str	r3, [r4, #4]
   16964:	ldr	sl, [r5]
   16968:	add	r0, sp, #32
   1696c:	mvn	r3, #0
   16970:	mov	r2, r6
   16974:	ldr	r7, [sp, #28]
   16978:	ldr	r4, [r5, #4]
   1697c:	mov	r1, sl
   16980:	str	r0, [sp, #8]
   16984:	ldr	lr, [sp, #24]
   16988:	orr	r7, r7, #1
   1698c:	ldr	ip, [sp, #64]	; 0x40
   16990:	mov	r0, r4
   16994:	ldr	fp, [sp, #68]	; 0x44
   16998:	str	lr, [sp]
   1699c:	str	r7, [sp, #4]
   169a0:	str	ip, [sp, #12]
   169a4:	str	fp, [sp, #16]
   169a8:	bl	14464 <__assert_fail@plt+0x3534>
   169ac:	cmp	sl, r0
   169b0:	bhi	16a14 <__assert_fail@plt+0x5ae4>
   169b4:	add	sl, r0, #1
   169b8:	movw	r3, #49536	; 0xc180
   169bc:	movt	r3, #2
   169c0:	cmp	r4, r3
   169c4:	str	sl, [r5]
   169c8:	beq	169d4 <__assert_fail@plt+0x5aa4>
   169cc:	mov	r0, r4
   169d0:	bl	14110 <__assert_fail@plt+0x31e0>
   169d4:	mov	r0, sl
   169d8:	bl	184cc <__assert_fail@plt+0x759c>
   169dc:	ldr	r3, [sp, #24]
   169e0:	mov	r2, r6
   169e4:	mov	r1, sl
   169e8:	mov	r4, r0
   169ec:	ldr	lr, [sp, #64]	; 0x40
   169f0:	ldr	ip, [sp, #68]	; 0x44
   169f4:	str	r0, [r5, #4]
   169f8:	add	r5, sp, #32
   169fc:	stm	sp, {r3, r7}
   16a00:	mvn	r3, #0
   16a04:	str	r5, [sp, #8]
   16a08:	str	lr, [sp, #12]
   16a0c:	str	ip, [sp, #16]
   16a10:	bl	14464 <__assert_fail@plt+0x3534>
   16a14:	mov	r0, r4
   16a18:	str	r9, [r8]
   16a1c:	add	sp, sp, #124	; 0x7c
   16a20:	ldrd	r4, [sp]
   16a24:	ldrd	r6, [sp, #8]
   16a28:	ldrd	r8, [sp, #16]
   16a2c:	ldrd	sl, [sp, #24]
   16a30:	add	sp, sp, #32
   16a34:	pop	{pc}		; (ldr pc, [sp], #4)
   16a38:	mov	r0, #8
   16a3c:	mvn	r3, #-2147483648	; 0x80000000
   16a40:	add	r1, sp, #72	; 0x48
   16a44:	str	r0, [sp]
   16a48:	mov	r0, #0
   16a4c:	bl	18770 <__assert_fail@plt+0x7840>
   16a50:	ldrd	r2, [r4, #8]
   16a54:	mov	r5, r0
   16a58:	str	r0, [r4]
   16a5c:	strd	r2, [r0]
   16a60:	b	16940 <__assert_fail@plt+0x5a10>
   16a64:	bl	10f24 <abort@plt>
   16a68:	strd	r4, [sp, #-36]!	; 0xffffffdc
   16a6c:	cmp	r0, #10
   16a70:	strd	r6, [sp, #8]
   16a74:	mov	r6, #0
   16a78:	mov	r7, #0
   16a7c:	strd	r8, [sp, #16]
   16a80:	strd	sl, [sp, #24]
   16a84:	str	lr, [sp, #32]
   16a88:	sub	sp, sp, #124	; 0x7c
   16a8c:	strd	r6, [sp, #72]	; 0x48
   16a90:	strd	r6, [sp, #80]	; 0x50
   16a94:	strd	r6, [sp, #88]	; 0x58
   16a98:	strd	r6, [sp, #96]	; 0x60
   16a9c:	strd	r6, [sp, #104]	; 0x68
   16aa0:	strd	r6, [sp, #112]	; 0x70
   16aa4:	beq	16c50 <__assert_fail@plt+0x5d20>
   16aa8:	mov	sl, r2
   16aac:	movw	r5, #49396	; 0xc0f4
   16ab0:	movt	r5, #2
   16ab4:	str	r0, [sp, #72]	; 0x48
   16ab8:	mov	r9, r1
   16abc:	ldrd	r2, [sp, #72]	; 0x48
   16ac0:	strd	r2, [sp, #24]
   16ac4:	strd	r6, [sp, #32]
   16ac8:	strd	r6, [sp, #40]	; 0x28
   16acc:	strd	r6, [sp, #48]	; 0x30
   16ad0:	strd	r6, [sp, #56]	; 0x38
   16ad4:	strd	r6, [sp, #64]	; 0x40
   16ad8:	bl	10e4c <__errno_location@plt>
   16adc:	mov	r7, r0
   16ae0:	ldr	r4, [r5]
   16ae4:	ldr	r2, [r5, #4]
   16ae8:	ldr	fp, [r0]
   16aec:	cmp	r2, #0
   16af0:	bgt	16b4c <__assert_fail@plt+0x5c1c>
   16af4:	add	r3, r5, #8
   16af8:	str	r2, [sp, #72]	; 0x48
   16afc:	rsb	r2, r2, #1
   16b00:	cmp	r4, r3
   16b04:	beq	16c24 <__assert_fail@plt+0x5cf4>
   16b08:	mov	r3, #8
   16b0c:	mov	r0, r4
   16b10:	add	r1, sp, #72	; 0x48
   16b14:	str	r3, [sp]
   16b18:	mvn	r3, #-2147483648	; 0x80000000
   16b1c:	bl	18770 <__assert_fail@plt+0x7840>
   16b20:	mov	r4, r0
   16b24:	str	r0, [r5]
   16b28:	ldr	r0, [r5, #4]
   16b2c:	mov	r1, #0
   16b30:	ldr	r2, [sp, #72]	; 0x48
   16b34:	sub	r2, r2, r0
   16b38:	add	r0, r4, r0, lsl #3
   16b3c:	lsl	r2, r2, #3
   16b40:	bl	10e64 <memset@plt>
   16b44:	ldr	r3, [sp, #72]	; 0x48
   16b48:	str	r3, [r5, #4]
   16b4c:	ldr	ip, [sp, #24]
   16b50:	add	r0, sp, #32
   16b54:	mov	r3, sl
   16b58:	mov	r2, r9
   16b5c:	ldr	r6, [sp, #28]
   16b60:	ldr	r8, [r4]
   16b64:	ldr	r5, [r4, #4]
   16b68:	str	ip, [sp]
   16b6c:	orr	r6, r6, #1
   16b70:	ldr	ip, [sp, #64]	; 0x40
   16b74:	mov	r1, r8
   16b78:	str	r6, [sp, #4]
   16b7c:	ldr	lr, [sp, #68]	; 0x44
   16b80:	str	r0, [sp, #8]
   16b84:	mov	r0, r5
   16b88:	str	ip, [sp, #12]
   16b8c:	str	lr, [sp, #16]
   16b90:	bl	14464 <__assert_fail@plt+0x3534>
   16b94:	cmp	r8, r0
   16b98:	bhi	16c00 <__assert_fail@plt+0x5cd0>
   16b9c:	add	r8, r0, #1
   16ba0:	movw	r3, #49536	; 0xc180
   16ba4:	movt	r3, #2
   16ba8:	cmp	r5, r3
   16bac:	str	r8, [r4]
   16bb0:	beq	16bbc <__assert_fail@plt+0x5c8c>
   16bb4:	mov	r0, r5
   16bb8:	bl	14110 <__assert_fail@plt+0x31e0>
   16bbc:	mov	r0, r8
   16bc0:	bl	184cc <__assert_fail@plt+0x759c>
   16bc4:	ldr	lr, [sp, #24]
   16bc8:	mov	r1, r8
   16bcc:	mov	r3, sl
   16bd0:	mov	r2, r9
   16bd4:	mov	r5, r0
   16bd8:	ldr	r8, [sp, #64]	; 0x40
   16bdc:	ldr	ip, [sp, #68]	; 0x44
   16be0:	str	r0, [r4, #4]
   16be4:	str	lr, [sp]
   16be8:	add	lr, sp, #32
   16bec:	str	r6, [sp, #4]
   16bf0:	str	lr, [sp, #8]
   16bf4:	str	r8, [sp, #12]
   16bf8:	str	ip, [sp, #16]
   16bfc:	bl	14464 <__assert_fail@plt+0x3534>
   16c00:	mov	r0, r5
   16c04:	str	fp, [r7]
   16c08:	add	sp, sp, #124	; 0x7c
   16c0c:	ldrd	r4, [sp]
   16c10:	ldrd	r6, [sp, #8]
   16c14:	ldrd	r8, [sp, #16]
   16c18:	ldrd	sl, [sp, #24]
   16c1c:	add	sp, sp, #32
   16c20:	pop	{pc}		; (ldr pc, [sp], #4)
   16c24:	mov	r0, #8
   16c28:	mvn	r3, #-2147483648	; 0x80000000
   16c2c:	add	r1, sp, #72	; 0x48
   16c30:	str	r0, [sp]
   16c34:	mov	r0, #0
   16c38:	bl	18770 <__assert_fail@plt+0x7840>
   16c3c:	ldrd	r2, [r5, #8]
   16c40:	mov	r4, r0
   16c44:	str	r0, [r5]
   16c48:	strd	r2, [r0]
   16c4c:	b	16b28 <__assert_fail@plt+0x5bf8>
   16c50:	bl	10f24 <abort@plt>
   16c54:	ldr	r3, [pc, #492]	; 16e48 <__assert_fail@plt+0x5f18>
   16c58:	lsr	ip, r2, #5
   16c5c:	and	r2, r2, #31
   16c60:	strd	r4, [sp, #-36]!	; 0xffffffdc
   16c64:	movw	r5, #49396	; 0xc0f4
   16c68:	movt	r5, #2
   16c6c:	strd	r6, [sp, #8]
   16c70:	strd	r8, [sp, #16]
   16c74:	strd	sl, [sp, #24]
   16c78:	mov	sl, r0
   16c7c:	mov	fp, r1
   16c80:	ldrd	r0, [r3]
   16c84:	str	lr, [sp, #32]
   16c88:	sub	sp, sp, #92	; 0x5c
   16c8c:	ldrd	r8, [r3, #8]
   16c90:	add	r6, sp, #48	; 0x30
   16c94:	strd	r0, [sp, #40]	; 0x28
   16c98:	ldrd	r0, [r3, #16]
   16c9c:	strd	r8, [sp, #48]	; 0x30
   16ca0:	ldrd	r8, [r3, #24]
   16ca4:	strd	r0, [sp, #56]	; 0x38
   16ca8:	ldrd	r0, [r3, #32]
   16cac:	strd	r8, [sp, #64]	; 0x40
   16cb0:	ldrd	r8, [r3, #40]	; 0x28
   16cb4:	strd	r0, [sp, #72]	; 0x48
   16cb8:	strd	r8, [sp, #80]	; 0x50
   16cbc:	ldr	r3, [r6, ip, lsl #2]
   16cc0:	mvn	r1, r3, lsr r2
   16cc4:	and	r1, r1, #1
   16cc8:	eor	r2, r3, r1, lsl r2
   16ccc:	str	r2, [r6, ip, lsl #2]
   16cd0:	bl	10e4c <__errno_location@plt>
   16cd4:	ldr	r3, [r0]
   16cd8:	mov	r8, r0
   16cdc:	ldr	r2, [r5, #4]
   16ce0:	ldr	r4, [r5]
   16ce4:	str	r3, [sp, #28]
   16ce8:	cmp	r2, #0
   16cec:	bgt	16d48 <__assert_fail@plt+0x5e18>
   16cf0:	add	r3, r5, #8
   16cf4:	str	r2, [sp, #36]	; 0x24
   16cf8:	rsb	r2, r2, #1
   16cfc:	cmp	r4, r3
   16d00:	beq	16e1c <__assert_fail@plt+0x5eec>
   16d04:	mov	r1, #8
   16d08:	mov	r0, r4
   16d0c:	mvn	r3, #-2147483648	; 0x80000000
   16d10:	str	r1, [sp]
   16d14:	add	r1, sp, #36	; 0x24
   16d18:	bl	18770 <__assert_fail@plt+0x7840>
   16d1c:	mov	r4, r0
   16d20:	str	r0, [r5]
   16d24:	ldr	r0, [r5, #4]
   16d28:	mov	r1, #0
   16d2c:	ldr	r2, [sp, #36]	; 0x24
   16d30:	sub	r2, r2, r0
   16d34:	add	r0, r4, r0, lsl #3
   16d38:	lsl	r2, r2, #3
   16d3c:	bl	10e64 <memset@plt>
   16d40:	ldr	r3, [sp, #36]	; 0x24
   16d44:	str	r3, [r5, #4]
   16d48:	ldr	ip, [sp, #40]	; 0x28
   16d4c:	mov	r3, fp
   16d50:	mov	r2, sl
   16d54:	ldr	r7, [sp, #44]	; 0x2c
   16d58:	ldr	r9, [r4]
   16d5c:	ldr	r5, [r4, #4]
   16d60:	str	ip, [sp]
   16d64:	orr	r7, r7, #1
   16d68:	ldr	ip, [sp, #80]	; 0x50
   16d6c:	mov	r1, r9
   16d70:	str	r7, [sp, #4]
   16d74:	ldr	lr, [sp, #84]	; 0x54
   16d78:	mov	r0, r5
   16d7c:	str	r6, [sp, #8]
   16d80:	str	ip, [sp, #12]
   16d84:	str	lr, [sp, #16]
   16d88:	bl	14464 <__assert_fail@plt+0x3534>
   16d8c:	cmp	r9, r0
   16d90:	bhi	16df4 <__assert_fail@plt+0x5ec4>
   16d94:	add	r9, r0, #1
   16d98:	movw	r3, #49536	; 0xc180
   16d9c:	movt	r3, #2
   16da0:	cmp	r5, r3
   16da4:	str	r9, [r4]
   16da8:	beq	16db4 <__assert_fail@plt+0x5e84>
   16dac:	mov	r0, r5
   16db0:	bl	14110 <__assert_fail@plt+0x31e0>
   16db4:	mov	r0, r9
   16db8:	bl	184cc <__assert_fail@plt+0x759c>
   16dbc:	mov	r1, r9
   16dc0:	ldr	ip, [sp, #40]	; 0x28
   16dc4:	mov	r3, fp
   16dc8:	mov	r2, sl
   16dcc:	mov	r5, r0
   16dd0:	ldr	r9, [sp, #80]	; 0x50
   16dd4:	ldr	lr, [sp, #84]	; 0x54
   16dd8:	str	r0, [r4, #4]
   16ddc:	str	ip, [sp]
   16de0:	str	r7, [sp, #4]
   16de4:	str	r6, [sp, #8]
   16de8:	str	r9, [sp, #12]
   16dec:	str	lr, [sp, #16]
   16df0:	bl	14464 <__assert_fail@plt+0x3534>
   16df4:	ldr	r3, [sp, #28]
   16df8:	mov	r0, r5
   16dfc:	str	r3, [r8]
   16e00:	add	sp, sp, #92	; 0x5c
   16e04:	ldrd	r4, [sp]
   16e08:	ldrd	r6, [sp, #8]
   16e0c:	ldrd	r8, [sp, #16]
   16e10:	ldrd	sl, [sp, #24]
   16e14:	add	sp, sp, #32
   16e18:	pop	{pc}		; (ldr pc, [sp], #4)
   16e1c:	mov	r0, #8
   16e20:	mvn	r3, #-2147483648	; 0x80000000
   16e24:	add	r1, sp, #36	; 0x24
   16e28:	str	r0, [sp]
   16e2c:	mov	r0, #0
   16e30:	bl	18770 <__assert_fail@plt+0x7840>
   16e34:	ldrd	r2, [r5, #8]
   16e38:	mov	r4, r0
   16e3c:	str	r0, [r5]
   16e40:	strd	r2, [r0]
   16e44:	b	16d24 <__assert_fail@plt+0x5df4>
   16e48:	andeq	ip, r2, r0, lsl #5
   16e4c:	ldr	ip, [pc, #476]	; 17030 <__assert_fail@plt+0x6100>
   16e50:	strd	r4, [sp, #-36]!	; 0xffffffdc
   16e54:	movw	r4, #49396	; 0xc0f4
   16e58:	movt	r4, #2
   16e5c:	ldrd	r2, [ip, #8]
   16e60:	strd	r6, [sp, #8]
   16e64:	lsr	r7, r1, #5
   16e68:	mov	r6, r0
   16e6c:	strd	r8, [sp, #16]
   16e70:	str	lr, [sp, #32]
   16e74:	and	lr, r1, #31
   16e78:	ldrd	r0, [ip]
   16e7c:	strd	sl, [sp, #24]
   16e80:	sub	sp, sp, #84	; 0x54
   16e84:	add	r5, sp, #40	; 0x28
   16e88:	strd	r0, [sp, #32]
   16e8c:	strd	r2, [sp, #40]	; 0x28
   16e90:	ldrd	r0, [ip, #16]
   16e94:	ldrd	r2, [ip, #24]
   16e98:	strd	r0, [sp, #48]	; 0x30
   16e9c:	ldrd	r0, [ip, #32]
   16ea0:	strd	r2, [sp, #56]	; 0x38
   16ea4:	ldrd	r2, [ip, #40]	; 0x28
   16ea8:	strd	r0, [sp, #64]	; 0x40
   16eac:	strd	r2, [sp, #72]	; 0x48
   16eb0:	ldr	r1, [r5, r7, lsl #2]
   16eb4:	mvn	r3, r1, lsr lr
   16eb8:	and	r3, r3, #1
   16ebc:	eor	r1, r1, r3, lsl lr
   16ec0:	str	r1, [r5, r7, lsl #2]
   16ec4:	bl	10e4c <__errno_location@plt>
   16ec8:	mov	r9, r0
   16ecc:	ldr	sl, [r0]
   16ed0:	ldr	r2, [r4, #4]
   16ed4:	ldr	r7, [r4]
   16ed8:	cmp	r2, #0
   16edc:	bgt	16f38 <__assert_fail@plt+0x6008>
   16ee0:	add	r3, r4, #8
   16ee4:	str	r2, [sp, #28]
   16ee8:	rsb	r2, r2, #1
   16eec:	cmp	r7, r3
   16ef0:	beq	17004 <__assert_fail@plt+0x60d4>
   16ef4:	mov	r1, #8
   16ef8:	mov	r0, r7
   16efc:	mvn	r3, #-2147483648	; 0x80000000
   16f00:	str	r1, [sp]
   16f04:	add	r1, sp, #28
   16f08:	bl	18770 <__assert_fail@plt+0x7840>
   16f0c:	mov	r7, r0
   16f10:	str	r0, [r4]
   16f14:	ldr	r0, [r4, #4]
   16f18:	mov	r1, #0
   16f1c:	ldr	r2, [sp, #28]
   16f20:	sub	r2, r2, r0
   16f24:	add	r0, r7, r0, lsl #3
   16f28:	lsl	r2, r2, #3
   16f2c:	bl	10e64 <memset@plt>
   16f30:	ldr	r3, [sp, #28]
   16f34:	str	r3, [r4, #4]
   16f38:	ldr	ip, [sp, #32]
   16f3c:	mvn	r3, #0
   16f40:	mov	r2, r6
   16f44:	ldr	r8, [sp, #36]	; 0x24
   16f48:	ldr	fp, [r7]
   16f4c:	ldr	r4, [r7, #4]
   16f50:	str	ip, [sp]
   16f54:	orr	r8, r8, #1
   16f58:	ldr	ip, [sp, #72]	; 0x48
   16f5c:	mov	r1, fp
   16f60:	str	r8, [sp, #4]
   16f64:	ldr	lr, [sp, #76]	; 0x4c
   16f68:	mov	r0, r4
   16f6c:	str	r5, [sp, #8]
   16f70:	str	ip, [sp, #12]
   16f74:	str	lr, [sp, #16]
   16f78:	bl	14464 <__assert_fail@plt+0x3534>
   16f7c:	cmp	fp, r0
   16f80:	bhi	16fe0 <__assert_fail@plt+0x60b0>
   16f84:	add	fp, r0, #1
   16f88:	movw	r3, #49536	; 0xc180
   16f8c:	movt	r3, #2
   16f90:	cmp	r4, r3
   16f94:	str	fp, [r7]
   16f98:	beq	16fa4 <__assert_fail@plt+0x6074>
   16f9c:	mov	r0, r4
   16fa0:	bl	14110 <__assert_fail@plt+0x31e0>
   16fa4:	mov	r0, fp
   16fa8:	bl	184cc <__assert_fail@plt+0x759c>
   16fac:	ldr	r3, [sp, #32]
   16fb0:	mov	r2, r6
   16fb4:	mov	r1, fp
   16fb8:	mov	r4, r0
   16fbc:	ldr	lr, [sp, #72]	; 0x48
   16fc0:	ldr	ip, [sp, #76]	; 0x4c
   16fc4:	str	r0, [r7, #4]
   16fc8:	stm	sp, {r3, r8}
   16fcc:	mvn	r3, #0
   16fd0:	str	r5, [sp, #8]
   16fd4:	str	lr, [sp, #12]
   16fd8:	str	ip, [sp, #16]
   16fdc:	bl	14464 <__assert_fail@plt+0x3534>
   16fe0:	mov	r0, r4
   16fe4:	str	sl, [r9]
   16fe8:	add	sp, sp, #84	; 0x54
   16fec:	ldrd	r4, [sp]
   16ff0:	ldrd	r6, [sp, #8]
   16ff4:	ldrd	r8, [sp, #16]
   16ff8:	ldrd	sl, [sp, #24]
   16ffc:	add	sp, sp, #32
   17000:	pop	{pc}		; (ldr pc, [sp], #4)
   17004:	mov	r0, #8
   17008:	mvn	r3, #-2147483648	; 0x80000000
   1700c:	add	r1, sp, #28
   17010:	str	r0, [sp]
   17014:	mov	r0, #0
   17018:	bl	18770 <__assert_fail@plt+0x7840>
   1701c:	ldrd	r2, [r4, #8]
   17020:	mov	r7, r0
   17024:	str	r0, [r4]
   17028:	strd	r2, [r0]
   1702c:	b	16f14 <__assert_fail@plt+0x5fe4>
   17030:	andeq	ip, r2, r0, lsl #5
   17034:	ldr	ip, [pc, #472]	; 17214 <__assert_fail@plt+0x62e4>
   17038:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1703c:	mov	r5, r0
   17040:	movw	r4, #49396	; 0xc0f4
   17044:	movt	r4, #2
   17048:	ldrd	r2, [ip]
   1704c:	ldrd	r0, [ip, #8]
   17050:	strd	r6, [sp, #8]
   17054:	strd	r8, [sp, #16]
   17058:	strd	sl, [sp, #24]
   1705c:	str	lr, [sp, #32]
   17060:	sub	sp, sp, #84	; 0x54
   17064:	strd	r2, [sp, #32]
   17068:	strd	r0, [sp, #40]	; 0x28
   1706c:	ldr	r6, [sp, #44]	; 0x2c
   17070:	ldrd	r2, [ip, #16]
   17074:	ldrd	r0, [ip, #24]
   17078:	mvn	lr, r6
   1707c:	and	lr, lr, #67108864	; 0x4000000
   17080:	eor	lr, lr, r6
   17084:	ldrd	r6, [ip, #40]	; 0x28
   17088:	strd	r2, [sp, #48]	; 0x30
   1708c:	ldrd	r2, [ip, #32]
   17090:	str	lr, [sp, #44]	; 0x2c
   17094:	strd	r0, [sp, #56]	; 0x38
   17098:	strd	r2, [sp, #64]	; 0x40
   1709c:	strd	r6, [sp, #72]	; 0x48
   170a0:	bl	10e4c <__errno_location@plt>
   170a4:	mov	r8, r0
   170a8:	ldr	r9, [r0]
   170ac:	ldr	r2, [r4, #4]
   170b0:	ldr	r6, [r4]
   170b4:	cmp	r2, #0
   170b8:	bgt	17114 <__assert_fail@plt+0x61e4>
   170bc:	add	r3, r4, #8
   170c0:	str	r2, [sp, #28]
   170c4:	rsb	r2, r2, #1
   170c8:	cmp	r6, r3
   170cc:	beq	171e8 <__assert_fail@plt+0x62b8>
   170d0:	mov	r1, #8
   170d4:	mov	r0, r6
   170d8:	mvn	r3, #-2147483648	; 0x80000000
   170dc:	str	r1, [sp]
   170e0:	add	r1, sp, #28
   170e4:	bl	18770 <__assert_fail@plt+0x7840>
   170e8:	mov	r6, r0
   170ec:	str	r0, [r4]
   170f0:	ldr	r0, [r4, #4]
   170f4:	mov	r1, #0
   170f8:	ldr	r2, [sp, #28]
   170fc:	sub	r2, r2, r0
   17100:	add	r0, r6, r0, lsl #3
   17104:	lsl	r2, r2, #3
   17108:	bl	10e64 <memset@plt>
   1710c:	ldr	r3, [sp, #28]
   17110:	str	r3, [r4, #4]
   17114:	ldr	sl, [r6]
   17118:	add	r0, sp, #40	; 0x28
   1711c:	mvn	r3, #0
   17120:	mov	r2, r5
   17124:	ldr	r7, [sp, #36]	; 0x24
   17128:	ldr	r4, [r6, #4]
   1712c:	mov	r1, sl
   17130:	str	r0, [sp, #8]
   17134:	ldr	lr, [sp, #32]
   17138:	orr	r7, r7, #1
   1713c:	ldr	ip, [sp, #72]	; 0x48
   17140:	mov	r0, r4
   17144:	ldr	fp, [sp, #76]	; 0x4c
   17148:	str	lr, [sp]
   1714c:	str	r7, [sp, #4]
   17150:	str	ip, [sp, #12]
   17154:	str	fp, [sp, #16]
   17158:	bl	14464 <__assert_fail@plt+0x3534>
   1715c:	cmp	sl, r0
   17160:	bhi	171c4 <__assert_fail@plt+0x6294>
   17164:	add	sl, r0, #1
   17168:	movw	r3, #49536	; 0xc180
   1716c:	movt	r3, #2
   17170:	cmp	r4, r3
   17174:	str	sl, [r6]
   17178:	beq	17184 <__assert_fail@plt+0x6254>
   1717c:	mov	r0, r4
   17180:	bl	14110 <__assert_fail@plt+0x31e0>
   17184:	mov	r0, sl
   17188:	bl	184cc <__assert_fail@plt+0x759c>
   1718c:	ldr	r3, [sp, #32]
   17190:	mov	r2, r5
   17194:	add	r5, sp, #40	; 0x28
   17198:	mov	r1, sl
   1719c:	mov	r4, r0
   171a0:	ldr	lr, [sp, #72]	; 0x48
   171a4:	ldr	ip, [sp, #76]	; 0x4c
   171a8:	str	r0, [r6, #4]
   171ac:	stm	sp, {r3, r7}
   171b0:	mvn	r3, #0
   171b4:	str	r5, [sp, #8]
   171b8:	str	lr, [sp, #12]
   171bc:	str	ip, [sp, #16]
   171c0:	bl	14464 <__assert_fail@plt+0x3534>
   171c4:	mov	r0, r4
   171c8:	str	r9, [r8]
   171cc:	add	sp, sp, #84	; 0x54
   171d0:	ldrd	r4, [sp]
   171d4:	ldrd	r6, [sp, #8]
   171d8:	ldrd	r8, [sp, #16]
   171dc:	ldrd	sl, [sp, #24]
   171e0:	add	sp, sp, #32
   171e4:	pop	{pc}		; (ldr pc, [sp], #4)
   171e8:	mov	r0, #8
   171ec:	mvn	r3, #-2147483648	; 0x80000000
   171f0:	add	r1, sp, #28
   171f4:	str	r0, [sp]
   171f8:	mov	r0, #0
   171fc:	bl	18770 <__assert_fail@plt+0x7840>
   17200:	ldrd	r2, [r4, #8]
   17204:	mov	r6, r0
   17208:	str	r0, [r4]
   1720c:	strd	r2, [r0]
   17210:	b	170f0 <__assert_fail@plt+0x61c0>
   17214:	andeq	ip, r2, r0, lsl #5
   17218:	ldr	ip, [pc, #480]	; 17400 <__assert_fail@plt+0x64d0>
   1721c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   17220:	mov	r5, r0
   17224:	movw	r4, #49396	; 0xc0f4
   17228:	movt	r4, #2
   1722c:	ldrd	r2, [ip]
   17230:	strd	r6, [sp, #8]
   17234:	mov	r6, r1
   17238:	ldrd	r0, [ip, #8]
   1723c:	strd	r8, [sp, #16]
   17240:	strd	sl, [sp, #24]
   17244:	str	lr, [sp, #32]
   17248:	sub	sp, sp, #84	; 0x54
   1724c:	ldrd	r8, [ip, #40]	; 0x28
   17250:	strd	r2, [sp, #32]
   17254:	strd	r0, [sp, #40]	; 0x28
   17258:	ldrd	r2, [ip, #16]
   1725c:	ldr	r7, [sp, #44]	; 0x2c
   17260:	ldrd	r0, [ip, #24]
   17264:	strd	r2, [sp, #48]	; 0x30
   17268:	ldrd	r2, [ip, #32]
   1726c:	mvn	lr, r7
   17270:	and	lr, lr, #67108864	; 0x4000000
   17274:	eor	lr, lr, r7
   17278:	str	lr, [sp, #44]	; 0x2c
   1727c:	strd	r0, [sp, #56]	; 0x38
   17280:	strd	r2, [sp, #64]	; 0x40
   17284:	strd	r8, [sp, #72]	; 0x48
   17288:	bl	10e4c <__errno_location@plt>
   1728c:	mov	r9, r0
   17290:	ldr	sl, [r0]
   17294:	ldr	r2, [r4, #4]
   17298:	ldr	r7, [r4]
   1729c:	cmp	r2, #0
   172a0:	bgt	172fc <__assert_fail@plt+0x63cc>
   172a4:	add	r3, r4, #8
   172a8:	str	r2, [sp, #28]
   172ac:	rsb	r2, r2, #1
   172b0:	cmp	r7, r3
   172b4:	beq	173d4 <__assert_fail@plt+0x64a4>
   172b8:	mov	r1, #8
   172bc:	mov	r0, r7
   172c0:	mvn	r3, #-2147483648	; 0x80000000
   172c4:	str	r1, [sp]
   172c8:	add	r1, sp, #28
   172cc:	bl	18770 <__assert_fail@plt+0x7840>
   172d0:	mov	r7, r0
   172d4:	str	r0, [r4]
   172d8:	ldr	r0, [r4, #4]
   172dc:	mov	r1, #0
   172e0:	ldr	r2, [sp, #28]
   172e4:	sub	r2, r2, r0
   172e8:	add	r0, r7, r0, lsl #3
   172ec:	lsl	r2, r2, #3
   172f0:	bl	10e64 <memset@plt>
   172f4:	ldr	r3, [sp, #28]
   172f8:	str	r3, [r4, #4]
   172fc:	ldr	ip, [sp, #32]
   17300:	add	r0, sp, #40	; 0x28
   17304:	mov	r3, r6
   17308:	mov	r2, r5
   1730c:	ldr	r8, [sp, #36]	; 0x24
   17310:	ldr	fp, [r7]
   17314:	ldr	r4, [r7, #4]
   17318:	str	ip, [sp]
   1731c:	orr	r8, r8, #1
   17320:	ldr	ip, [sp, #72]	; 0x48
   17324:	mov	r1, fp
   17328:	str	r8, [sp, #4]
   1732c:	ldr	lr, [sp, #76]	; 0x4c
   17330:	str	r0, [sp, #8]
   17334:	mov	r0, r4
   17338:	str	ip, [sp, #12]
   1733c:	str	lr, [sp, #16]
   17340:	bl	14464 <__assert_fail@plt+0x3534>
   17344:	cmp	fp, r0
   17348:	bhi	173b0 <__assert_fail@plt+0x6480>
   1734c:	add	fp, r0, #1
   17350:	movw	r3, #49536	; 0xc180
   17354:	movt	r3, #2
   17358:	cmp	r4, r3
   1735c:	str	fp, [r7]
   17360:	beq	1736c <__assert_fail@plt+0x643c>
   17364:	mov	r0, r4
   17368:	bl	14110 <__assert_fail@plt+0x31e0>
   1736c:	mov	r0, fp
   17370:	bl	184cc <__assert_fail@plt+0x759c>
   17374:	ldr	lr, [sp, #32]
   17378:	mov	r2, r5
   1737c:	mov	r3, r6
   17380:	mov	r1, fp
   17384:	mov	r4, r0
   17388:	ldr	r5, [sp, #72]	; 0x48
   1738c:	ldr	ip, [sp, #76]	; 0x4c
   17390:	str	r0, [r7, #4]
   17394:	str	lr, [sp]
   17398:	add	lr, sp, #40	; 0x28
   1739c:	str	r8, [sp, #4]
   173a0:	str	lr, [sp, #8]
   173a4:	str	r5, [sp, #12]
   173a8:	str	ip, [sp, #16]
   173ac:	bl	14464 <__assert_fail@plt+0x3534>
   173b0:	mov	r0, r4
   173b4:	str	sl, [r9]
   173b8:	add	sp, sp, #84	; 0x54
   173bc:	ldrd	r4, [sp]
   173c0:	ldrd	r6, [sp, #8]
   173c4:	ldrd	r8, [sp, #16]
   173c8:	ldrd	sl, [sp, #24]
   173cc:	add	sp, sp, #32
   173d0:	pop	{pc}		; (ldr pc, [sp], #4)
   173d4:	mov	r0, #8
   173d8:	mvn	r3, #-2147483648	; 0x80000000
   173dc:	add	r1, sp, #28
   173e0:	str	r0, [sp]
   173e4:	mov	r0, #0
   173e8:	bl	18770 <__assert_fail@plt+0x7840>
   173ec:	ldrd	r2, [r4, #8]
   173f0:	mov	r7, r0
   173f4:	str	r0, [r4]
   173f8:	strd	r2, [r0]
   173fc:	b	172d8 <__assert_fail@plt+0x63a8>
   17400:	andeq	ip, r2, r0, lsl #5
   17404:	strd	r4, [sp, #-12]!
   17408:	mov	r4, #0
   1740c:	mov	r5, #0
   17410:	str	lr, [sp, #8]
   17414:	sub	sp, sp, #100	; 0x64
   17418:	cmp	r1, #10
   1741c:	strd	r4, [sp]
   17420:	strd	r4, [sp, #8]
   17424:	strd	r4, [sp, #16]
   17428:	strd	r4, [sp, #24]
   1742c:	strd	r4, [sp, #32]
   17430:	strd	r4, [sp, #40]	; 0x28
   17434:	beq	17464 <__assert_fail@plt+0x6534>
   17438:	mov	ip, #67108864	; 0x4000000
   1743c:	mov	r3, sp
   17440:	str	r1, [sp]
   17444:	mov	r1, r2
   17448:	mvn	r2, #0
   1744c:	str	ip, [sp, #12]
   17450:	bl	15e50 <__assert_fail@plt+0x4f20>
   17454:	add	sp, sp, #100	; 0x64
   17458:	ldrd	r4, [sp]
   1745c:	add	sp, sp, #8
   17460:	pop	{pc}		; (ldr pc, [sp], #4)
   17464:	bl	10f24 <abort@plt>
   17468:	ldr	ip, [pc, #156]	; 1750c <__assert_fail@plt+0x65dc>
   1746c:	cmp	r2, #0
   17470:	cmpne	r1, #0
   17474:	strd	r4, [sp, #-32]!	; 0xffffffe0
   17478:	strd	r6, [sp, #8]
   1747c:	mov	r6, r2
   17480:	str	r8, [sp, #16]
   17484:	mov	r8, r3
   17488:	strd	sl, [sp, #20]
   1748c:	ldrd	r4, [ip]
   17490:	str	lr, [sp, #28]
   17494:	sub	sp, sp, #48	; 0x30
   17498:	mov	lr, #10
   1749c:	ldrd	r2, [ip, #8]
   174a0:	ldrd	sl, [ip, #16]
   174a4:	strd	r4, [sp]
   174a8:	ldrd	r4, [ip, #32]
   174ac:	str	lr, [sp]
   174b0:	strd	r2, [sp, #8]
   174b4:	strd	sl, [sp, #16]
   174b8:	ldrd	r2, [ip, #24]
   174bc:	ldrd	sl, [ip, #40]	; 0x28
   174c0:	strd	r2, [sp, #24]
   174c4:	strd	r4, [sp, #32]
   174c8:	strd	sl, [sp, #40]	; 0x28
   174cc:	beq	17508 <__assert_fail@plt+0x65d8>
   174d0:	mov	r7, r1
   174d4:	mov	r3, sp
   174d8:	mov	r1, r8
   174dc:	mvn	r2, #0
   174e0:	str	r7, [sp, #40]	; 0x28
   174e4:	str	r6, [sp, #44]	; 0x2c
   174e8:	bl	15e50 <__assert_fail@plt+0x4f20>
   174ec:	add	sp, sp, #48	; 0x30
   174f0:	ldrd	r4, [sp]
   174f4:	ldrd	r6, [sp, #8]
   174f8:	ldr	r8, [sp, #16]
   174fc:	ldrd	sl, [sp, #20]
   17500:	add	sp, sp, #28
   17504:	pop	{pc}		; (ldr pc, [sp], #4)
   17508:	bl	10f24 <abort@plt>
   1750c:	andeq	ip, r2, r0, lsl #5
   17510:	ldr	ip, [pc, #156]	; 175b4 <__assert_fail@plt+0x6684>
   17514:	cmp	r2, #0
   17518:	cmpne	r1, #0
   1751c:	strd	r4, [sp, #-32]!	; 0xffffffe0
   17520:	strd	r6, [sp, #8]
   17524:	mov	r6, r2
   17528:	str	r8, [sp, #16]
   1752c:	mov	r8, r3
   17530:	strd	sl, [sp, #20]
   17534:	ldrd	r4, [ip]
   17538:	str	lr, [sp, #28]
   1753c:	sub	sp, sp, #48	; 0x30
   17540:	mov	lr, #10
   17544:	ldrd	r2, [ip, #8]
   17548:	ldrd	sl, [ip, #16]
   1754c:	strd	r4, [sp]
   17550:	ldrd	r4, [ip, #32]
   17554:	str	lr, [sp]
   17558:	strd	r2, [sp, #8]
   1755c:	strd	sl, [sp, #16]
   17560:	ldrd	r2, [ip, #24]
   17564:	ldrd	sl, [ip, #40]	; 0x28
   17568:	strd	r2, [sp, #24]
   1756c:	strd	r4, [sp, #32]
   17570:	strd	sl, [sp, #40]	; 0x28
   17574:	beq	175b0 <__assert_fail@plt+0x6680>
   17578:	ldr	r2, [sp, #80]	; 0x50
   1757c:	mov	r7, r1
   17580:	mov	r3, sp
   17584:	mov	r1, r8
   17588:	str	r7, [sp, #40]	; 0x28
   1758c:	str	r6, [sp, #44]	; 0x2c
   17590:	bl	15e50 <__assert_fail@plt+0x4f20>
   17594:	add	sp, sp, #48	; 0x30
   17598:	ldrd	r4, [sp]
   1759c:	ldrd	r6, [sp, #8]
   175a0:	ldr	r8, [sp, #16]
   175a4:	ldrd	sl, [sp, #20]
   175a8:	add	sp, sp, #28
   175ac:	pop	{pc}		; (ldr pc, [sp], #4)
   175b0:	bl	10f24 <abort@plt>
   175b4:	andeq	ip, r2, r0, lsl #5
   175b8:	ldr	ip, [pc, #512]	; 177c0 <__assert_fail@plt+0x6890>
   175bc:	cmp	r0, #0
   175c0:	strd	r4, [sp, #-36]!	; 0xffffffdc
   175c4:	ldrd	r4, [ip, #16]
   175c8:	strd	r6, [sp, #8]
   175cc:	clz	r6, r1
   175d0:	mov	r7, r1
   175d4:	strd	r8, [sp, #16]
   175d8:	mov	r8, r0
   175dc:	lsr	r6, r6, #5
   175e0:	strd	sl, [sp, #24]
   175e4:	mov	fp, r2
   175e8:	mov	sl, #10
   175ec:	ldrd	r2, [ip]
   175f0:	moveq	r6, #1
   175f4:	str	lr, [sp, #32]
   175f8:	sub	sp, sp, #92	; 0x5c
   175fc:	cmp	r6, #0
   17600:	ldrd	r0, [ip, #8]
   17604:	strd	r2, [sp, #40]	; 0x28
   17608:	strd	r4, [sp, #56]	; 0x38
   1760c:	ldrd	r2, [ip, #24]
   17610:	strd	r0, [sp, #48]	; 0x30
   17614:	ldrd	r0, [ip, #32]
   17618:	str	sl, [sp, #40]	; 0x28
   1761c:	ldrd	r4, [ip, #40]	; 0x28
   17620:	strd	r2, [sp, #64]	; 0x40
   17624:	strd	r0, [sp, #72]	; 0x48
   17628:	strd	r4, [sp, #80]	; 0x50
   1762c:	bne	177bc <__assert_fail@plt+0x688c>
   17630:	movw	r5, #49396	; 0xc0f4
   17634:	movt	r5, #2
   17638:	str	r8, [sp, #80]	; 0x50
   1763c:	str	r7, [sp, #84]	; 0x54
   17640:	bl	10e4c <__errno_location@plt>
   17644:	ldr	r3, [r0]
   17648:	mov	r9, r0
   1764c:	ldr	r2, [r5, #4]
   17650:	ldr	r4, [r5]
   17654:	str	r3, [sp, #28]
   17658:	cmp	r2, #0
   1765c:	movgt	r1, sl
   17660:	bgt	176c8 <__assert_fail@plt+0x6798>
   17664:	add	r3, r5, #8
   17668:	str	r2, [sp, #36]	; 0x24
   1766c:	rsb	r2, r2, #1
   17670:	cmp	r4, r3
   17674:	beq	17790 <__assert_fail@plt+0x6860>
   17678:	mov	r1, #8
   1767c:	mov	r0, r4
   17680:	mvn	r3, #-2147483648	; 0x80000000
   17684:	str	r1, [sp]
   17688:	add	r1, sp, #36	; 0x24
   1768c:	bl	18770 <__assert_fail@plt+0x7840>
   17690:	mov	r4, r0
   17694:	str	r0, [r5]
   17698:	ldr	r0, [r5, #4]
   1769c:	mov	r1, #0
   176a0:	ldr	r2, [sp, #36]	; 0x24
   176a4:	sub	r2, r2, r0
   176a8:	add	r0, r4, r0, lsl #3
   176ac:	lsl	r2, r2, #3
   176b0:	bl	10e64 <memset@plt>
   176b4:	ldr	r3, [sp, #36]	; 0x24
   176b8:	ldr	r1, [sp, #40]	; 0x28
   176bc:	ldr	r8, [sp, #80]	; 0x50
   176c0:	str	r3, [r5, #4]
   176c4:	ldr	r7, [sp, #84]	; 0x54
   176c8:	mvn	r3, #0
   176cc:	mov	r2, fp
   176d0:	ldr	r6, [sp, #44]	; 0x2c
   176d4:	ldr	sl, [r4]
   176d8:	ldr	r5, [r4, #4]
   176dc:	orr	r6, r6, #1
   176e0:	stm	sp, {r1, r6}
   176e4:	add	r1, sp, #48	; 0x30
   176e8:	str	r8, [sp, #12]
   176ec:	mov	r0, r5
   176f0:	str	r1, [sp, #8]
   176f4:	mov	r1, sl
   176f8:	str	r7, [sp, #16]
   176fc:	bl	14464 <__assert_fail@plt+0x3534>
   17700:	cmp	sl, r0
   17704:	bhi	17768 <__assert_fail@plt+0x6838>
   17708:	add	r7, r0, #1
   1770c:	movw	r3, #49536	; 0xc180
   17710:	movt	r3, #2
   17714:	cmp	r5, r3
   17718:	str	r7, [r4]
   1771c:	beq	17728 <__assert_fail@plt+0x67f8>
   17720:	mov	r0, r5
   17724:	bl	14110 <__assert_fail@plt+0x31e0>
   17728:	mov	r0, r7
   1772c:	bl	184cc <__assert_fail@plt+0x759c>
   17730:	ldr	r3, [sp, #40]	; 0x28
   17734:	mov	r2, fp
   17738:	mov	r1, r7
   1773c:	mov	r5, r0
   17740:	ldr	lr, [sp, #80]	; 0x50
   17744:	ldr	ip, [sp, #84]	; 0x54
   17748:	str	r0, [r4, #4]
   1774c:	add	r4, sp, #48	; 0x30
   17750:	stm	sp, {r3, r6}
   17754:	mvn	r3, #0
   17758:	str	r4, [sp, #8]
   1775c:	str	lr, [sp, #12]
   17760:	str	ip, [sp, #16]
   17764:	bl	14464 <__assert_fail@plt+0x3534>
   17768:	ldr	r3, [sp, #28]
   1776c:	mov	r0, r5
   17770:	str	r3, [r9]
   17774:	add	sp, sp, #92	; 0x5c
   17778:	ldrd	r4, [sp]
   1777c:	ldrd	r6, [sp, #8]
   17780:	ldrd	r8, [sp, #16]
   17784:	ldrd	sl, [sp, #24]
   17788:	add	sp, sp, #32
   1778c:	pop	{pc}		; (ldr pc, [sp], #4)
   17790:	mov	r1, #8
   17794:	mvn	r3, #-2147483648	; 0x80000000
   17798:	mov	r0, r6
   1779c:	str	r1, [sp]
   177a0:	add	r1, sp, #36	; 0x24
   177a4:	bl	18770 <__assert_fail@plt+0x7840>
   177a8:	ldrd	r2, [r5, #8]
   177ac:	mov	r4, r0
   177b0:	str	r0, [r5]
   177b4:	strd	r2, [r0]
   177b8:	b	17698 <__assert_fail@plt+0x6768>
   177bc:	bl	10f24 <abort@plt>
   177c0:	andeq	ip, r2, r0, lsl #5
   177c4:	ldr	ip, [pc, #536]	; 179e4 <__assert_fail@plt+0x6ab4>
   177c8:	cmp	r0, #0
   177cc:	strd	r4, [sp, #-36]!	; 0xffffffdc
   177d0:	ldrd	r4, [ip, #16]
   177d4:	strd	r6, [sp, #8]
   177d8:	mov	r6, r1
   177dc:	mov	r7, r0
   177e0:	strd	r8, [sp, #16]
   177e4:	mov	r9, #10
   177e8:	strd	sl, [sp, #24]
   177ec:	mov	sl, r2
   177f0:	mov	fp, r3
   177f4:	str	lr, [sp, #32]
   177f8:	clz	lr, r1
   177fc:	sub	sp, sp, #92	; 0x5c
   17800:	ldrd	r2, [ip]
   17804:	lsr	lr, lr, #5
   17808:	moveq	lr, #1
   1780c:	ldrd	r0, [ip, #8]
   17810:	cmp	lr, #0
   17814:	strd	r4, [sp, #56]	; 0x38
   17818:	ldrd	r4, [ip, #40]	; 0x28
   1781c:	str	lr, [sp, #28]
   17820:	strd	r2, [sp, #40]	; 0x28
   17824:	ldrd	r2, [ip, #24]
   17828:	strd	r0, [sp, #48]	; 0x30
   1782c:	ldrd	r0, [ip, #32]
   17830:	str	r9, [sp, #40]	; 0x28
   17834:	strd	r2, [sp, #64]	; 0x40
   17838:	strd	r4, [sp, #80]	; 0x50
   1783c:	strd	r0, [sp, #72]	; 0x48
   17840:	bne	179e0 <__assert_fail@plt+0x6ab0>
   17844:	movw	r5, #49396	; 0xc0f4
   17848:	movt	r5, #2
   1784c:	str	r7, [sp, #80]	; 0x50
   17850:	str	r6, [sp, #84]	; 0x54
   17854:	bl	10e4c <__errno_location@plt>
   17858:	ldr	r3, [r0]
   1785c:	mov	r8, r0
   17860:	ldr	r2, [r5, #4]
   17864:	ldr	r4, [r5]
   17868:	str	r3, [sp, #24]
   1786c:	cmp	r2, #0
   17870:	movgt	r1, r9
   17874:	bgt	178dc <__assert_fail@plt+0x69ac>
   17878:	add	r3, r5, #8
   1787c:	str	r2, [sp, #36]	; 0x24
   17880:	rsb	r2, r2, #1
   17884:	cmp	r4, r3
   17888:	beq	179b4 <__assert_fail@plt+0x6a84>
   1788c:	mov	r1, #8
   17890:	mov	r0, r4
   17894:	mvn	r3, #-2147483648	; 0x80000000
   17898:	str	r1, [sp]
   1789c:	add	r1, sp, #36	; 0x24
   178a0:	bl	18770 <__assert_fail@plt+0x7840>
   178a4:	mov	r4, r0
   178a8:	str	r0, [r5]
   178ac:	ldr	r0, [r5, #4]
   178b0:	mov	r1, #0
   178b4:	ldr	r2, [sp, #36]	; 0x24
   178b8:	sub	r2, r2, r0
   178bc:	add	r0, r4, r0, lsl #3
   178c0:	lsl	r2, r2, #3
   178c4:	bl	10e64 <memset@plt>
   178c8:	ldr	r3, [sp, #36]	; 0x24
   178cc:	ldr	r1, [sp, #40]	; 0x28
   178d0:	ldr	r7, [sp, #80]	; 0x50
   178d4:	str	r3, [r5, #4]
   178d8:	ldr	r6, [sp, #84]	; 0x54
   178dc:	mov	r3, fp
   178e0:	mov	r2, sl
   178e4:	ldr	r0, [sp, #44]	; 0x2c
   178e8:	ldr	r9, [r4]
   178ec:	ldr	r5, [r4, #4]
   178f0:	orr	r0, r0, #1
   178f4:	str	r1, [sp]
   178f8:	add	r1, sp, #48	; 0x30
   178fc:	str	r0, [sp, #4]
   17900:	str	r1, [sp, #8]
   17904:	mov	r1, r9
   17908:	str	r7, [sp, #12]
   1790c:	str	r6, [sp, #16]
   17910:	str	r0, [sp, #28]
   17914:	mov	r0, r5
   17918:	bl	14464 <__assert_fail@plt+0x3534>
   1791c:	cmp	r9, r0
   17920:	bhi	1798c <__assert_fail@plt+0x6a5c>
   17924:	add	r6, r0, #1
   17928:	movw	r3, #49536	; 0xc180
   1792c:	movt	r3, #2
   17930:	cmp	r5, r3
   17934:	str	r6, [r4]
   17938:	beq	17944 <__assert_fail@plt+0x6a14>
   1793c:	mov	r0, r5
   17940:	bl	14110 <__assert_fail@plt+0x31e0>
   17944:	mov	r0, r6
   17948:	bl	184cc <__assert_fail@plt+0x759c>
   1794c:	ldr	lr, [sp, #40]	; 0x28
   17950:	mov	r1, r6
   17954:	mov	r3, fp
   17958:	mov	r2, sl
   1795c:	mov	r5, r0
   17960:	ldr	r6, [sp, #80]	; 0x50
   17964:	ldr	ip, [sp, #84]	; 0x54
   17968:	str	r0, [r4, #4]
   1796c:	str	lr, [sp]
   17970:	ldr	lr, [sp, #28]
   17974:	str	lr, [sp, #4]
   17978:	add	lr, sp, #48	; 0x30
   1797c:	str	r6, [sp, #12]
   17980:	str	lr, [sp, #8]
   17984:	str	ip, [sp, #16]
   17988:	bl	14464 <__assert_fail@plt+0x3534>
   1798c:	ldr	r3, [sp, #24]
   17990:	mov	r0, r5
   17994:	str	r3, [r8]
   17998:	add	sp, sp, #92	; 0x5c
   1799c:	ldrd	r4, [sp]
   179a0:	ldrd	r6, [sp, #8]
   179a4:	ldrd	r8, [sp, #16]
   179a8:	ldrd	sl, [sp, #24]
   179ac:	add	sp, sp, #32
   179b0:	pop	{pc}		; (ldr pc, [sp], #4)
   179b4:	mov	r1, #8
   179b8:	mvn	r3, #-2147483648	; 0x80000000
   179bc:	ldr	r0, [sp, #28]
   179c0:	str	r1, [sp]
   179c4:	add	r1, sp, #36	; 0x24
   179c8:	bl	18770 <__assert_fail@plt+0x7840>
   179cc:	ldrd	r2, [r5, #8]
   179d0:	mov	r4, r0
   179d4:	str	r0, [r5]
   179d8:	strd	r2, [r0]
   179dc:	b	178ac <__assert_fail@plt+0x697c>
   179e0:	bl	10f24 <abort@plt>
   179e4:	andeq	ip, r2, r0, lsl #5
   179e8:	ldr	r3, [pc]	; 179f0 <__assert_fail@plt+0x6ac0>
   179ec:	b	15e50 <__assert_fail@plt+0x4f20>
   179f0:	andeq	ip, r2, r4, lsl #2
   179f4:	strd	r4, [sp, #-36]!	; 0xffffffdc
   179f8:	movw	r4, #49396	; 0xc0f4
   179fc:	movt	r4, #2
   17a00:	strd	r6, [sp, #8]
   17a04:	strd	r8, [sp, #16]
   17a08:	strd	sl, [sp, #24]
   17a0c:	mov	sl, r0
   17a10:	mov	fp, r1
   17a14:	str	lr, [sp, #32]
   17a18:	sub	sp, sp, #44	; 0x2c
   17a1c:	bl	10e4c <__errno_location@plt>
   17a20:	ldr	r3, [r0]
   17a24:	mov	r8, r0
   17a28:	ldr	r2, [r4, #4]
   17a2c:	ldr	r5, [r4]
   17a30:	str	r3, [sp, #28]
   17a34:	cmp	r2, #0
   17a38:	bgt	17a94 <__assert_fail@plt+0x6b64>
   17a3c:	add	r3, r4, #8
   17a40:	str	r2, [sp, #36]	; 0x24
   17a44:	rsb	r2, r2, #1
   17a48:	cmp	r5, r3
   17a4c:	beq	17b70 <__assert_fail@plt+0x6c40>
   17a50:	mov	r1, #8
   17a54:	mov	r0, r5
   17a58:	mvn	r3, #-2147483648	; 0x80000000
   17a5c:	str	r1, [sp]
   17a60:	add	r1, sp, #36	; 0x24
   17a64:	bl	18770 <__assert_fail@plt+0x7840>
   17a68:	mov	r5, r0
   17a6c:	str	r0, [r4]
   17a70:	ldr	r0, [r4, #4]
   17a74:	mov	r1, #0
   17a78:	ldr	r2, [sp, #36]	; 0x24
   17a7c:	sub	r2, r2, r0
   17a80:	add	r0, r5, r0, lsl #3
   17a84:	lsl	r2, r2, #3
   17a88:	bl	10e64 <memset@plt>
   17a8c:	ldr	r3, [sp, #36]	; 0x24
   17a90:	str	r3, [r4, #4]
   17a94:	ldr	ip, [r4, #16]
   17a98:	mov	r3, fp
   17a9c:	mov	r2, sl
   17aa0:	ldr	r7, [r4, #20]
   17aa4:	ldr	r0, [pc, #240]	; 17b9c <__assert_fail@plt+0x6c6c>
   17aa8:	ldr	r9, [r5]
   17aac:	orr	r7, r7, #1
   17ab0:	ldr	r6, [r5, #4]
   17ab4:	str	ip, [sp]
   17ab8:	ldr	ip, [r4, #56]	; 0x38
   17abc:	mov	r1, r9
   17ac0:	str	r7, [sp, #4]
   17ac4:	ldr	lr, [r4, #60]	; 0x3c
   17ac8:	str	r0, [sp, #8]
   17acc:	mov	r0, r6
   17ad0:	str	ip, [sp, #12]
   17ad4:	str	lr, [sp, #16]
   17ad8:	bl	14464 <__assert_fail@plt+0x3534>
   17adc:	cmp	r9, r0
   17ae0:	bhi	17b48 <__assert_fail@plt+0x6c18>
   17ae4:	add	r9, r0, #1
   17ae8:	movw	r3, #49536	; 0xc180
   17aec:	movt	r3, #2
   17af0:	cmp	r6, r3
   17af4:	str	r9, [r5]
   17af8:	beq	17b04 <__assert_fail@plt+0x6bd4>
   17afc:	mov	r0, r6
   17b00:	bl	14110 <__assert_fail@plt+0x31e0>
   17b04:	mov	r0, r9
   17b08:	bl	184cc <__assert_fail@plt+0x759c>
   17b0c:	ldr	ip, [r4, #16]
   17b10:	mov	r1, r9
   17b14:	mov	r3, fp
   17b18:	mov	r2, sl
   17b1c:	mov	r6, r0
   17b20:	ldr	r9, [r4, #56]	; 0x38
   17b24:	ldr	lr, [r4, #60]	; 0x3c
   17b28:	str	r0, [r5, #4]
   17b2c:	str	ip, [sp]
   17b30:	ldr	ip, [pc, #100]	; 17b9c <__assert_fail@plt+0x6c6c>
   17b34:	str	r7, [sp, #4]
   17b38:	str	ip, [sp, #8]
   17b3c:	str	r9, [sp, #12]
   17b40:	str	lr, [sp, #16]
   17b44:	bl	14464 <__assert_fail@plt+0x3534>
   17b48:	ldr	r3, [sp, #28]
   17b4c:	mov	r0, r6
   17b50:	str	r3, [r8]
   17b54:	add	sp, sp, #44	; 0x2c
   17b58:	ldrd	r4, [sp]
   17b5c:	ldrd	r6, [sp, #8]
   17b60:	ldrd	r8, [sp, #16]
   17b64:	ldrd	sl, [sp, #24]
   17b68:	add	sp, sp, #32
   17b6c:	pop	{pc}		; (ldr pc, [sp], #4)
   17b70:	mov	r0, #8
   17b74:	mvn	r3, #-2147483648	; 0x80000000
   17b78:	add	r1, sp, #36	; 0x24
   17b7c:	str	r0, [sp]
   17b80:	mov	r0, #0
   17b84:	bl	18770 <__assert_fail@plt+0x7840>
   17b88:	ldrd	r2, [r4, #8]
   17b8c:	mov	r5, r0
   17b90:	str	r0, [r4]
   17b94:	strd	r2, [r0]
   17b98:	b	17a70 <__assert_fail@plt+0x6b40>
   17b9c:	andeq	ip, r2, ip, lsl #2
   17ba0:	ldr	r3, [pc, #4]	; 17bac <__assert_fail@plt+0x6c7c>
   17ba4:	mvn	r2, #0
   17ba8:	b	15e50 <__assert_fail@plt+0x4f20>
   17bac:	andeq	ip, r2, r4, lsl #2
   17bb0:	strd	r4, [sp, #-36]!	; 0xffffffdc
   17bb4:	movw	r4, #49396	; 0xc0f4
   17bb8:	movt	r4, #2
   17bbc:	strd	r6, [sp, #8]
   17bc0:	strd	r8, [sp, #16]
   17bc4:	strd	sl, [sp, #24]
   17bc8:	mov	sl, r0
   17bcc:	str	lr, [sp, #32]
   17bd0:	sub	sp, sp, #44	; 0x2c
   17bd4:	bl	10e4c <__errno_location@plt>
   17bd8:	ldr	r3, [r0]
   17bdc:	mov	r8, r0
   17be0:	ldr	r2, [r4, #4]
   17be4:	ldr	r5, [r4]
   17be8:	str	r3, [sp, #28]
   17bec:	cmp	r2, #0
   17bf0:	bgt	17c4c <__assert_fail@plt+0x6d1c>
   17bf4:	add	r3, r4, #8
   17bf8:	str	r2, [sp, #36]	; 0x24
   17bfc:	rsb	r2, r2, #1
   17c00:	cmp	r5, r3
   17c04:	beq	17d14 <__assert_fail@plt+0x6de4>
   17c08:	mov	r1, #8
   17c0c:	mov	r0, r5
   17c10:	mvn	r3, #-2147483648	; 0x80000000
   17c14:	str	r1, [sp]
   17c18:	add	r1, sp, #36	; 0x24
   17c1c:	bl	18770 <__assert_fail@plt+0x7840>
   17c20:	mov	r5, r0
   17c24:	str	r0, [r4]
   17c28:	ldr	r0, [r4, #4]
   17c2c:	mov	r1, #0
   17c30:	ldr	r2, [sp, #36]	; 0x24
   17c34:	sub	r2, r2, r0
   17c38:	add	r0, r5, r0, lsl #3
   17c3c:	lsl	r2, r2, #3
   17c40:	bl	10e64 <memset@plt>
   17c44:	ldr	r3, [sp, #36]	; 0x24
   17c48:	str	r3, [r4, #4]
   17c4c:	ldr	ip, [r4, #16]
   17c50:	mvn	r3, #0
   17c54:	mov	r2, sl
   17c58:	ldr	r7, [r4, #20]
   17c5c:	ldr	fp, [pc, #220]	; 17d40 <__assert_fail@plt+0x6e10>
   17c60:	ldr	r9, [r5]
   17c64:	orr	r7, r7, #1
   17c68:	ldr	r6, [r5, #4]
   17c6c:	str	ip, [sp]
   17c70:	ldr	ip, [r4, #56]	; 0x38
   17c74:	mov	r1, r9
   17c78:	stmib	sp, {r7, fp}
   17c7c:	ldr	lr, [r4, #60]	; 0x3c
   17c80:	mov	r0, r6
   17c84:	str	ip, [sp, #12]
   17c88:	str	lr, [sp, #16]
   17c8c:	bl	14464 <__assert_fail@plt+0x3534>
   17c90:	cmp	r9, r0
   17c94:	bhi	17cec <__assert_fail@plt+0x6dbc>
   17c98:	add	r9, r0, #1
   17c9c:	movw	r3, #49536	; 0xc180
   17ca0:	movt	r3, #2
   17ca4:	cmp	r6, r3
   17ca8:	str	r9, [r5]
   17cac:	beq	17cb8 <__assert_fail@plt+0x6d88>
   17cb0:	mov	r0, r6
   17cb4:	bl	14110 <__assert_fail@plt+0x31e0>
   17cb8:	mov	r0, r9
   17cbc:	bl	184cc <__assert_fail@plt+0x759c>
   17cc0:	ldr	r3, [r4, #16]
   17cc4:	mov	r2, sl
   17cc8:	mov	r1, r9
   17ccc:	mov	r6, r0
   17cd0:	ldr	lr, [r4, #56]	; 0x38
   17cd4:	ldr	ip, [r4, #60]	; 0x3c
   17cd8:	str	r0, [r5, #4]
   17cdc:	stm	sp, {r3, r7, fp, lr}
   17ce0:	mvn	r3, #0
   17ce4:	str	ip, [sp, #16]
   17ce8:	bl	14464 <__assert_fail@plt+0x3534>
   17cec:	ldr	r3, [sp, #28]
   17cf0:	mov	r0, r6
   17cf4:	str	r3, [r8]
   17cf8:	add	sp, sp, #44	; 0x2c
   17cfc:	ldrd	r4, [sp]
   17d00:	ldrd	r6, [sp, #8]
   17d04:	ldrd	r8, [sp, #16]
   17d08:	ldrd	sl, [sp, #24]
   17d0c:	add	sp, sp, #32
   17d10:	pop	{pc}		; (ldr pc, [sp], #4)
   17d14:	mov	r0, #8
   17d18:	mvn	r3, #-2147483648	; 0x80000000
   17d1c:	add	r1, sp, #36	; 0x24
   17d20:	str	r0, [sp]
   17d24:	mov	r0, #0
   17d28:	bl	18770 <__assert_fail@plt+0x7840>
   17d2c:	ldrd	r2, [r4, #8]
   17d30:	mov	r5, r0
   17d34:	str	r0, [r4]
   17d38:	strd	r2, [r0]
   17d3c:	b	17c28 <__assert_fail@plt+0x6cf8>
   17d40:	andeq	ip, r2, ip, lsl #2
   17d44:	cmp	r1, #0
   17d48:	strd	r4, [sp, #-16]!
   17d4c:	mov	ip, r3
   17d50:	str	r6, [sp, #8]
   17d54:	mov	r4, r0
   17d58:	str	lr, [sp, #12]
   17d5c:	sub	sp, sp, #32
   17d60:	ldr	r5, [sp, #48]	; 0x30
   17d64:	ldr	r6, [sp, #52]	; 0x34
   17d68:	beq	17eac <__assert_fail@plt+0x6f7c>
   17d6c:	mov	r3, r1
   17d70:	mov	r1, #1
   17d74:	stm	sp, {r2, ip}
   17d78:	movw	r2, #45152	; 0xb060
   17d7c:	movt	r2, #1
   17d80:	bl	10e88 <__fprintf_chk@plt>
   17d84:	mov	r2, #5
   17d88:	movw	r1, #45172	; 0xb074
   17d8c:	movt	r1, #1
   17d90:	mov	r0, #0
   17d94:	bl	10d68 <dcgettext@plt>
   17d98:	movw	ip, #2022	; 0x7e6
   17d9c:	mov	r3, r0
   17da0:	mov	r1, #1
   17da4:	movw	r2, #45900	; 0xb34c
   17da8:	movt	r2, #1
   17dac:	mov	r0, r4
   17db0:	str	ip, [sp]
   17db4:	bl	10e88 <__fprintf_chk@plt>
   17db8:	mov	r1, r4
   17dbc:	mov	r0, #10
   17dc0:	bl	10d5c <fputc_unlocked@plt>
   17dc4:	mov	r2, #5
   17dc8:	movw	r1, #45176	; 0xb078
   17dcc:	movt	r1, #1
   17dd0:	mov	r0, #0
   17dd4:	bl	10d68 <dcgettext@plt>
   17dd8:	mov	r2, r0
   17ddc:	mov	r1, #1
   17de0:	movw	r3, #45348	; 0xb124
   17de4:	movt	r3, #1
   17de8:	mov	r0, r4
   17dec:	bl	10e88 <__fprintf_chk@plt>
   17df0:	mov	r1, r4
   17df4:	mov	r0, #10
   17df8:	bl	10d5c <fputc_unlocked@plt>
   17dfc:	cmp	r6, #9
   17e00:	ldrls	pc, [pc, r6, lsl #2]
   17e04:	b	18118 <__assert_fail@plt+0x71e8>
   17e08:	muleq	r1, r8, lr
   17e0c:	andeq	r7, r1, r8, asr #29
   17e10:	andeq	r7, r1, r4, lsl #30
   17e14:	andeq	r7, r1, r4, asr #30
   17e18:	andeq	r7, r1, ip, lsl #31
   17e1c:	andeq	r7, r1, r4, asr #31
   17e20:	andeq	r8, r1, ip
   17e24:	andeq	r8, r1, r0, rrx
   17e28:	strheq	r8, [r1], -r8	; <UNPREDICTABLE>
   17e2c:	andeq	r7, r1, r0, lsr lr
   17e30:	movw	r1, #45652	; 0xb254
   17e34:	movt	r1, #1
   17e38:	mov	r2, #5
   17e3c:	mov	r0, #0
   17e40:	bl	10d68 <dcgettext@plt>
   17e44:	ldr	lr, [r5, #4]
   17e48:	mov	r2, r0
   17e4c:	mov	r1, #1
   17e50:	mov	r0, r4
   17e54:	ldr	r3, [r5, #8]
   17e58:	ldr	ip, [r5, #32]
   17e5c:	str	lr, [sp]
   17e60:	ldr	lr, [r5, #12]
   17e64:	str	ip, [sp, #28]
   17e68:	ldr	ip, [r5, #28]
   17e6c:	str	r3, [sp, #4]
   17e70:	ldr	r3, [r5, #16]
   17e74:	str	lr, [sp, #8]
   17e78:	ldr	lr, [r5, #20]
   17e7c:	str	ip, [sp, #24]
   17e80:	ldr	ip, [r5, #24]
   17e84:	str	r3, [sp, #12]
   17e88:	ldr	r3, [r5]
   17e8c:	str	lr, [sp, #16]
   17e90:	str	ip, [sp, #20]
   17e94:	bl	10e88 <__fprintf_chk@plt>
   17e98:	add	sp, sp, #32
   17e9c:	ldrd	r4, [sp]
   17ea0:	ldr	r6, [sp, #8]
   17ea4:	add	sp, sp, #12
   17ea8:	pop	{pc}		; (ldr pc, [sp], #4)
   17eac:	mov	r3, r2
   17eb0:	mov	r1, #1
   17eb4:	str	ip, [sp]
   17eb8:	movw	r2, #45164	; 0xb06c
   17ebc:	movt	r2, #1
   17ec0:	bl	10e88 <__fprintf_chk@plt>
   17ec4:	b	17d84 <__assert_fail@plt+0x6e54>
   17ec8:	mov	r2, #5
   17ecc:	movw	r1, #45384	; 0xb148
   17ed0:	movt	r1, #1
   17ed4:	mov	r0, #0
   17ed8:	bl	10d68 <dcgettext@plt>
   17edc:	ldr	r3, [r5]
   17ee0:	mov	r2, r0
   17ee4:	mov	r1, #1
   17ee8:	mov	r0, r4
   17eec:	add	sp, sp, #32
   17ef0:	ldrd	r4, [sp]
   17ef4:	ldr	r6, [sp, #8]
   17ef8:	ldr	lr, [sp, #12]
   17efc:	add	sp, sp, #16
   17f00:	b	10e88 <__fprintf_chk@plt>
   17f04:	mov	r2, #5
   17f08:	movw	r1, #45400	; 0xb158
   17f0c:	movt	r1, #1
   17f10:	mov	r0, #0
   17f14:	bl	10d68 <dcgettext@plt>
   17f18:	ldm	r5, {r3, ip}
   17f1c:	mov	r2, r0
   17f20:	mov	r1, #1
   17f24:	mov	r0, r4
   17f28:	str	ip, [sp, #48]	; 0x30
   17f2c:	add	sp, sp, #32
   17f30:	ldrd	r4, [sp]
   17f34:	ldr	r6, [sp, #8]
   17f38:	ldr	lr, [sp, #12]
   17f3c:	add	sp, sp, #16
   17f40:	b	10e88 <__fprintf_chk@plt>
   17f44:	mov	r2, #5
   17f48:	movw	r1, #45424	; 0xb170
   17f4c:	movt	r1, #1
   17f50:	mov	r0, #0
   17f54:	bl	10d68 <dcgettext@plt>
   17f58:	ldm	r5, {r3, lr}
   17f5c:	mov	r2, r0
   17f60:	mov	r1, #1
   17f64:	mov	r0, r4
   17f68:	ldr	ip, [r5, #8]
   17f6c:	str	lr, [sp, #48]	; 0x30
   17f70:	str	ip, [sp, #52]	; 0x34
   17f74:	add	sp, sp, #32
   17f78:	ldrd	r4, [sp]
   17f7c:	ldr	r6, [sp, #8]
   17f80:	ldr	lr, [sp, #12]
   17f84:	add	sp, sp, #16
   17f88:	b	10e88 <__fprintf_chk@plt>
   17f8c:	mov	r2, #5
   17f90:	movw	r1, #45452	; 0xb18c
   17f94:	movt	r1, #1
   17f98:	mov	r0, #0
   17f9c:	bl	10d68 <dcgettext@plt>
   17fa0:	ldmib	r5, {r3, ip, lr}
   17fa4:	mov	r2, r0
   17fa8:	mov	r1, #1
   17fac:	mov	r0, r4
   17fb0:	str	r3, [sp]
   17fb4:	ldr	r3, [r5]
   17fb8:	stmib	sp, {ip, lr}
   17fbc:	bl	10e88 <__fprintf_chk@plt>
   17fc0:	b	17e98 <__assert_fail@plt+0x6f68>
   17fc4:	mov	r2, #5
   17fc8:	movw	r1, #45484	; 0xb1ac
   17fcc:	movt	r1, #1
   17fd0:	mov	r0, #0
   17fd4:	bl	10d68 <dcgettext@plt>
   17fd8:	ldmib	r5, {ip, lr}
   17fdc:	mov	r2, r0
   17fe0:	mov	r1, #1
   17fe4:	mov	r0, r4
   17fe8:	ldr	r3, [r5, #16]
   17fec:	str	ip, [sp]
   17ff0:	ldr	ip, [r5, #12]
   17ff4:	str	r3, [sp, #12]
   17ff8:	ldr	r3, [r5]
   17ffc:	str	lr, [sp, #4]
   18000:	str	ip, [sp, #8]
   18004:	bl	10e88 <__fprintf_chk@plt>
   18008:	b	17e98 <__assert_fail@plt+0x6f68>
   1800c:	mov	r2, #5
   18010:	movw	r1, #45520	; 0xb1d0
   18014:	movt	r1, #1
   18018:	mov	r0, #0
   1801c:	bl	10d68 <dcgettext@plt>
   18020:	ldr	lr, [r5, #4]
   18024:	mov	r2, r0
   18028:	mov	r1, #1
   1802c:	mov	r0, r4
   18030:	ldr	r3, [r5, #8]
   18034:	ldr	ip, [r5, #20]
   18038:	str	lr, [sp]
   1803c:	ldr	lr, [r5, #12]
   18040:	str	ip, [sp, #16]
   18044:	ldr	ip, [r5, #16]
   18048:	str	r3, [sp, #4]
   1804c:	ldr	r3, [r5]
   18050:	str	lr, [sp, #8]
   18054:	str	ip, [sp, #12]
   18058:	bl	10e88 <__fprintf_chk@plt>
   1805c:	b	17e98 <__assert_fail@plt+0x6f68>
   18060:	mov	r2, #5
   18064:	movw	r1, #45560	; 0xb1f8
   18068:	movt	r1, #1
   1806c:	mov	r0, #0
   18070:	bl	10d68 <dcgettext@plt>
   18074:	ldmib	r5, {r3, ip}
   18078:	mov	r2, r0
   1807c:	mov	r1, #1
   18080:	mov	r0, r4
   18084:	ldr	lr, [r5, #24]
   18088:	str	r3, [sp]
   1808c:	ldr	r3, [r5, #12]
   18090:	str	lr, [sp, #20]
   18094:	ldr	lr, [r5, #20]
   18098:	str	ip, [sp, #4]
   1809c:	ldr	ip, [r5, #16]
   180a0:	str	r3, [sp, #8]
   180a4:	ldr	r3, [r5]
   180a8:	str	ip, [sp, #12]
   180ac:	str	lr, [sp, #16]
   180b0:	bl	10e88 <__fprintf_chk@plt>
   180b4:	b	17e98 <__assert_fail@plt+0x6f68>
   180b8:	mov	r2, #5
   180bc:	movw	r1, #45604	; 0xb224
   180c0:	movt	r1, #1
   180c4:	mov	r0, #0
   180c8:	bl	10d68 <dcgettext@plt>
   180cc:	ldmib	r5, {ip, lr}
   180d0:	mov	r2, r0
   180d4:	mov	r1, #1
   180d8:	mov	r0, r4
   180dc:	ldr	r3, [r5, #28]
   180e0:	str	ip, [sp]
   180e4:	ldr	ip, [r5, #12]
   180e8:	str	r3, [sp, #24]
   180ec:	ldr	r3, [r5, #24]
   180f0:	str	lr, [sp, #4]
   180f4:	ldr	lr, [r5, #16]
   180f8:	str	ip, [sp, #8]
   180fc:	ldr	ip, [r5, #20]
   18100:	str	r3, [sp, #20]
   18104:	ldr	r3, [r5]
   18108:	str	lr, [sp, #12]
   1810c:	str	ip, [sp, #16]
   18110:	bl	10e88 <__fprintf_chk@plt>
   18114:	b	17e98 <__assert_fail@plt+0x6f68>
   18118:	movw	r1, #45704	; 0xb288
   1811c:	movt	r1, #1
   18120:	b	17e38 <__assert_fail@plt+0x6f08>
   18124:	strd	r4, [sp, #-12]!
   18128:	str	lr, [sp, #8]
   1812c:	sub	sp, sp, #12
   18130:	ldr	r5, [sp, #24]
   18134:	ldr	ip, [r5]
   18138:	cmp	ip, #0
   1813c:	beq	18158 <__assert_fail@plt+0x7228>
   18140:	mov	lr, r5
   18144:	mov	ip, #0
   18148:	ldr	r4, [lr, #4]!
   1814c:	add	ip, ip, #1
   18150:	cmp	r4, #0
   18154:	bne	18148 <__assert_fail@plt+0x7218>
   18158:	stm	sp, {r5, ip}
   1815c:	bl	17d44 <__assert_fail@plt+0x6e14>
   18160:	add	sp, sp, #12
   18164:	ldrd	r4, [sp]
   18168:	add	sp, sp, #8
   1816c:	pop	{pc}		; (ldr pc, [sp], #4)
   18170:	push	{lr}		; (str lr, [sp, #-4]!)
   18174:	sub	sp, sp, #52	; 0x34
   18178:	ldr	ip, [sp, #56]	; 0x38
   1817c:	ldr	lr, [ip]
   18180:	cmp	lr, #0
   18184:	str	lr, [sp, #8]
   18188:	beq	18220 <__assert_fail@plt+0x72f0>
   1818c:	ldr	lr, [ip, #4]
   18190:	cmp	lr, #0
   18194:	str	lr, [sp, #12]
   18198:	beq	18234 <__assert_fail@plt+0x7304>
   1819c:	ldr	lr, [ip, #8]
   181a0:	cmp	lr, #0
   181a4:	str	lr, [sp, #16]
   181a8:	beq	1823c <__assert_fail@plt+0x730c>
   181ac:	ldr	lr, [ip, #12]
   181b0:	cmp	lr, #0
   181b4:	str	lr, [sp, #20]
   181b8:	beq	18244 <__assert_fail@plt+0x7314>
   181bc:	ldr	lr, [ip, #16]
   181c0:	cmp	lr, #0
   181c4:	str	lr, [sp, #24]
   181c8:	beq	1824c <__assert_fail@plt+0x731c>
   181cc:	ldr	lr, [ip, #20]
   181d0:	cmp	lr, #0
   181d4:	str	lr, [sp, #28]
   181d8:	beq	18254 <__assert_fail@plt+0x7324>
   181dc:	ldr	lr, [ip, #24]
   181e0:	cmp	lr, #0
   181e4:	str	lr, [sp, #32]
   181e8:	beq	1825c <__assert_fail@plt+0x732c>
   181ec:	ldr	lr, [ip, #28]
   181f0:	cmp	lr, #0
   181f4:	str	lr, [sp, #36]	; 0x24
   181f8:	beq	18264 <__assert_fail@plt+0x7334>
   181fc:	ldr	lr, [ip, #32]
   18200:	cmp	lr, #0
   18204:	str	lr, [sp, #40]	; 0x28
   18208:	beq	1826c <__assert_fail@plt+0x733c>
   1820c:	ldr	ip, [ip, #36]	; 0x24
   18210:	cmp	ip, #0
   18214:	str	ip, [sp, #44]	; 0x2c
   18218:	movne	lr, #10
   1821c:	moveq	lr, #9
   18220:	add	ip, sp, #8
   18224:	stm	sp, {ip, lr}
   18228:	bl	17d44 <__assert_fail@plt+0x6e14>
   1822c:	add	sp, sp, #52	; 0x34
   18230:	pop	{pc}		; (ldr pc, [sp], #4)
   18234:	mov	lr, #1
   18238:	b	18220 <__assert_fail@plt+0x72f0>
   1823c:	mov	lr, #2
   18240:	b	18220 <__assert_fail@plt+0x72f0>
   18244:	mov	lr, #3
   18248:	b	18220 <__assert_fail@plt+0x72f0>
   1824c:	mov	lr, #4
   18250:	b	18220 <__assert_fail@plt+0x72f0>
   18254:	mov	lr, #5
   18258:	b	18220 <__assert_fail@plt+0x72f0>
   1825c:	mov	lr, #6
   18260:	b	18220 <__assert_fail@plt+0x72f0>
   18264:	mov	lr, #7
   18268:	b	18220 <__assert_fail@plt+0x72f0>
   1826c:	mov	lr, #8
   18270:	b	18220 <__assert_fail@plt+0x72f0>
   18274:	push	{r3}		; (str r3, [sp, #-4]!)
   18278:	push	{lr}		; (str lr, [sp, #-4]!)
   1827c:	sub	sp, sp, #56	; 0x38
   18280:	ldr	ip, [sp, #64]	; 0x40
   18284:	add	r3, sp, #64	; 0x40
   18288:	str	r3, [sp, #12]
   1828c:	cmp	ip, #0
   18290:	str	ip, [sp, #16]
   18294:	beq	1832c <__assert_fail@plt+0x73fc>
   18298:	ldr	ip, [sp, #68]	; 0x44
   1829c:	cmp	ip, #0
   182a0:	str	ip, [sp, #20]
   182a4:	beq	18350 <__assert_fail@plt+0x7420>
   182a8:	ldr	ip, [sp, #72]	; 0x48
   182ac:	cmp	ip, #0
   182b0:	str	ip, [sp, #24]
   182b4:	beq	18358 <__assert_fail@plt+0x7428>
   182b8:	ldr	ip, [sp, #76]	; 0x4c
   182bc:	cmp	ip, #0
   182c0:	str	ip, [sp, #28]
   182c4:	beq	18360 <__assert_fail@plt+0x7430>
   182c8:	ldr	ip, [sp, #80]	; 0x50
   182cc:	cmp	ip, #0
   182d0:	str	ip, [sp, #32]
   182d4:	beq	18368 <__assert_fail@plt+0x7438>
   182d8:	ldr	ip, [sp, #84]	; 0x54
   182dc:	cmp	ip, #0
   182e0:	str	ip, [sp, #36]	; 0x24
   182e4:	beq	18370 <__assert_fail@plt+0x7440>
   182e8:	ldr	ip, [sp, #88]	; 0x58
   182ec:	cmp	ip, #0
   182f0:	str	ip, [sp, #40]	; 0x28
   182f4:	beq	18378 <__assert_fail@plt+0x7448>
   182f8:	ldr	ip, [sp, #92]	; 0x5c
   182fc:	cmp	ip, #0
   18300:	str	ip, [sp, #44]	; 0x2c
   18304:	beq	18380 <__assert_fail@plt+0x7450>
   18308:	ldr	ip, [sp, #96]	; 0x60
   1830c:	cmp	ip, #0
   18310:	str	ip, [sp, #48]	; 0x30
   18314:	beq	18388 <__assert_fail@plt+0x7458>
   18318:	ldr	r3, [sp, #100]	; 0x64
   1831c:	cmp	r3, #0
   18320:	str	r3, [sp, #52]	; 0x34
   18324:	movne	ip, #10
   18328:	moveq	ip, #9
   1832c:	ldr	r3, [sp, #60]	; 0x3c
   18330:	add	lr, sp, #16
   18334:	str	lr, [sp]
   18338:	str	ip, [sp, #4]
   1833c:	bl	17d44 <__assert_fail@plt+0x6e14>
   18340:	add	sp, sp, #56	; 0x38
   18344:	pop	{lr}		; (ldr lr, [sp], #4)
   18348:	add	sp, sp, #4
   1834c:	bx	lr
   18350:	mov	ip, #1
   18354:	b	1832c <__assert_fail@plt+0x73fc>
   18358:	mov	ip, #2
   1835c:	b	1832c <__assert_fail@plt+0x73fc>
   18360:	mov	ip, #3
   18364:	b	1832c <__assert_fail@plt+0x73fc>
   18368:	mov	ip, #4
   1836c:	b	1832c <__assert_fail@plt+0x73fc>
   18370:	mov	ip, #5
   18374:	b	1832c <__assert_fail@plt+0x73fc>
   18378:	mov	ip, #6
   1837c:	b	1832c <__assert_fail@plt+0x73fc>
   18380:	mov	ip, #7
   18384:	b	1832c <__assert_fail@plt+0x73fc>
   18388:	mov	ip, #8
   1838c:	b	1832c <__assert_fail@plt+0x73fc>
   18390:	movw	r3, #49492	; 0xc154
   18394:	movt	r3, #2
   18398:	str	r4, [sp, #-8]!
   1839c:	mov	r0, #10
   183a0:	ldr	r1, [r3]
   183a4:	str	lr, [sp, #4]
   183a8:	bl	10d5c <fputc_unlocked@plt>
   183ac:	mov	r2, #5
   183b0:	movw	r1, #45764	; 0xb2c4
   183b4:	movt	r1, #1
   183b8:	mov	r0, #0
   183bc:	bl	10d68 <dcgettext@plt>
   183c0:	mov	r1, r0
   183c4:	movw	r2, #45784	; 0xb2d8
   183c8:	movt	r2, #1
   183cc:	mov	r0, #1
   183d0:	bl	10e70 <__printf_chk@plt>
   183d4:	mov	r2, #5
   183d8:	movw	r1, #45808	; 0xb2f0
   183dc:	movt	r1, #1
   183e0:	mov	r0, #0
   183e4:	bl	10d68 <dcgettext@plt>
   183e8:	mov	r1, r0
   183ec:	movw	r3, #43624	; 0xaa68
   183f0:	movt	r3, #1
   183f4:	movw	r2, #43664	; 0xaa90
   183f8:	movt	r2, #1
   183fc:	mov	r0, #1
   18400:	bl	10e70 <__printf_chk@plt>
   18404:	mov	r2, #5
   18408:	movw	r1, #45828	; 0xb304
   1840c:	movt	r1, #1
   18410:	mov	r0, #0
   18414:	bl	10d68 <dcgettext@plt>
   18418:	mov	r1, r0
   1841c:	movw	r2, #45868	; 0xb32c
   18420:	movt	r2, #1
   18424:	mov	r0, #1
   18428:	ldr	r4, [sp]
   1842c:	ldr	lr, [sp, #4]
   18430:	add	sp, sp, #8
   18434:	b	10e70 <__printf_chk@plt>
   18438:	strd	r4, [sp, #-16]!
   1843c:	mov	r4, r0
   18440:	mov	r5, r2
   18444:	str	r6, [sp, #8]
   18448:	mov	r6, r1
   1844c:	str	lr, [sp, #12]
   18450:	bl	19d30 <__assert_fail@plt+0x8e00>
   18454:	cmp	r0, #0
   18458:	beq	1846c <__assert_fail@plt+0x753c>
   1845c:	ldrd	r4, [sp]
   18460:	ldr	r6, [sp, #8]
   18464:	add	sp, sp, #12
   18468:	pop	{pc}		; (ldr pc, [sp], #4)
   1846c:	cmp	r4, #0
   18470:	beq	18480 <__assert_fail@plt+0x7550>
   18474:	cmp	r6, #0
   18478:	cmpne	r5, #0
   1847c:	beq	1845c <__assert_fail@plt+0x752c>
   18480:	bl	18a3c <__assert_fail@plt+0x7b0c>
   18484:	str	r4, [sp, #-8]!
   18488:	str	lr, [sp, #4]
   1848c:	bl	19b58 <__assert_fail@plt+0x8c28>
   18490:	cmp	r0, #0
   18494:	beq	184a4 <__assert_fail@plt+0x7574>
   18498:	ldr	r4, [sp]
   1849c:	add	sp, sp, #4
   184a0:	pop	{pc}		; (ldr pc, [sp], #4)
   184a4:	bl	18a3c <__assert_fail@plt+0x7b0c>
   184a8:	str	r4, [sp, #-8]!
   184ac:	str	lr, [sp, #4]
   184b0:	bl	19b58 <__assert_fail@plt+0x8c28>
   184b4:	cmp	r0, #0
   184b8:	beq	184c8 <__assert_fail@plt+0x7598>
   184bc:	ldr	r4, [sp]
   184c0:	add	sp, sp, #4
   184c4:	pop	{pc}		; (ldr pc, [sp], #4)
   184c8:	bl	18a3c <__assert_fail@plt+0x7b0c>
   184cc:	str	r4, [sp, #-8]!
   184d0:	str	lr, [sp, #4]
   184d4:	bl	19b58 <__assert_fail@plt+0x8c28>
   184d8:	cmp	r0, #0
   184dc:	beq	184ec <__assert_fail@plt+0x75bc>
   184e0:	ldr	r4, [sp]
   184e4:	add	sp, sp, #4
   184e8:	pop	{pc}		; (ldr pc, [sp], #4)
   184ec:	bl	18a3c <__assert_fail@plt+0x7b0c>
   184f0:	strd	r4, [sp, #-16]!
   184f4:	mov	r5, r0
   184f8:	mov	r4, r1
   184fc:	str	r6, [sp, #8]
   18500:	str	lr, [sp, #12]
   18504:	bl	19b94 <__assert_fail@plt+0x8c64>
   18508:	cmp	r0, #0
   1850c:	beq	18520 <__assert_fail@plt+0x75f0>
   18510:	ldrd	r4, [sp]
   18514:	ldr	r6, [sp, #8]
   18518:	add	sp, sp, #12
   1851c:	pop	{pc}		; (ldr pc, [sp], #4)
   18520:	adds	r4, r4, #0
   18524:	movne	r4, #1
   18528:	cmp	r5, #0
   1852c:	moveq	r4, #1
   18530:	cmp	r4, #0
   18534:	beq	18510 <__assert_fail@plt+0x75e0>
   18538:	bl	18a3c <__assert_fail@plt+0x7b0c>
   1853c:	cmp	r1, #0
   18540:	orreq	r1, r1, #1
   18544:	str	r4, [sp, #-8]!
   18548:	str	lr, [sp, #4]
   1854c:	bl	19b94 <__assert_fail@plt+0x8c64>
   18550:	cmp	r0, #0
   18554:	beq	18564 <__assert_fail@plt+0x7634>
   18558:	ldr	r4, [sp]
   1855c:	add	sp, sp, #4
   18560:	pop	{pc}		; (ldr pc, [sp], #4)
   18564:	bl	18a3c <__assert_fail@plt+0x7b0c>
   18568:	strd	r4, [sp, #-16]!
   1856c:	mov	r4, r0
   18570:	mov	r5, r2
   18574:	str	r6, [sp, #8]
   18578:	mov	r6, r1
   1857c:	str	lr, [sp, #12]
   18580:	bl	19d30 <__assert_fail@plt+0x8e00>
   18584:	cmp	r0, #0
   18588:	beq	1859c <__assert_fail@plt+0x766c>
   1858c:	ldrd	r4, [sp]
   18590:	ldr	r6, [sp, #8]
   18594:	add	sp, sp, #12
   18598:	pop	{pc}		; (ldr pc, [sp], #4)
   1859c:	cmp	r4, #0
   185a0:	beq	185b0 <__assert_fail@plt+0x7680>
   185a4:	cmp	r6, #0
   185a8:	cmpne	r5, #0
   185ac:	beq	1858c <__assert_fail@plt+0x765c>
   185b0:	bl	18a3c <__assert_fail@plt+0x7b0c>
   185b4:	cmp	r2, #0
   185b8:	cmpne	r1, #0
   185bc:	str	r4, [sp, #-8]!
   185c0:	moveq	r2, #1
   185c4:	str	lr, [sp, #4]
   185c8:	moveq	r1, r2
   185cc:	bl	19d30 <__assert_fail@plt+0x8e00>
   185d0:	cmp	r0, #0
   185d4:	beq	185e4 <__assert_fail@plt+0x76b4>
   185d8:	ldr	r4, [sp]
   185dc:	add	sp, sp, #4
   185e0:	pop	{pc}		; (ldr pc, [sp], #4)
   185e4:	bl	18a3c <__assert_fail@plt+0x7b0c>
   185e8:	mov	r2, r1
   185ec:	mov	r1, r0
   185f0:	str	r4, [sp, #-8]!
   185f4:	mov	r0, #0
   185f8:	str	lr, [sp, #4]
   185fc:	bl	19d30 <__assert_fail@plt+0x8e00>
   18600:	cmp	r0, #0
   18604:	beq	18614 <__assert_fail@plt+0x76e4>
   18608:	ldr	r4, [sp]
   1860c:	add	sp, sp, #4
   18610:	pop	{pc}		; (ldr pc, [sp], #4)
   18614:	bl	18a3c <__assert_fail@plt+0x7b0c>
   18618:	cmp	r1, #0
   1861c:	cmpne	r0, #0
   18620:	str	r4, [sp, #-8]!
   18624:	moveq	r2, #1
   18628:	movne	r2, r1
   1862c:	str	lr, [sp, #4]
   18630:	movne	r1, r0
   18634:	moveq	r1, r2
   18638:	mov	r0, #0
   1863c:	bl	19d30 <__assert_fail@plt+0x8e00>
   18640:	cmp	r0, #0
   18644:	beq	18654 <__assert_fail@plt+0x7724>
   18648:	ldr	r4, [sp]
   1864c:	add	sp, sp, #4
   18650:	pop	{pc}		; (ldr pc, [sp], #4)
   18654:	bl	18a3c <__assert_fail@plt+0x7b0c>
   18658:	cmp	r0, #0
   1865c:	strd	r4, [sp, #-16]!
   18660:	mov	r5, r1
   18664:	ldr	r4, [r1]
   18668:	str	r6, [sp, #8]
   1866c:	str	lr, [sp, #12]
   18670:	beq	186b8 <__assert_fail@plt+0x7788>
   18674:	lsr	r3, r4, #1
   18678:	add	r3, r3, #1
   1867c:	adds	r4, r4, r3
   18680:	bcs	186b4 <__assert_fail@plt+0x7784>
   18684:	mov	r2, #1
   18688:	mov	r1, r4
   1868c:	bl	19d30 <__assert_fail@plt+0x8e00>
   18690:	cmp	r0, #0
   18694:	beq	186ac <__assert_fail@plt+0x777c>
   18698:	ldr	r6, [sp, #8]
   1869c:	str	r4, [r5]
   186a0:	ldrd	r4, [sp]
   186a4:	add	sp, sp, #12
   186a8:	pop	{pc}		; (ldr pc, [sp], #4)
   186ac:	cmp	r4, #0
   186b0:	beq	18698 <__assert_fail@plt+0x7768>
   186b4:	bl	18a3c <__assert_fail@plt+0x7b0c>
   186b8:	cmp	r4, #0
   186bc:	mov	r2, #1
   186c0:	moveq	r4, #64	; 0x40
   186c4:	mov	r1, r4
   186c8:	bl	19d30 <__assert_fail@plt+0x8e00>
   186cc:	cmp	r0, #0
   186d0:	bne	18698 <__assert_fail@plt+0x7768>
   186d4:	b	186b4 <__assert_fail@plt+0x7784>
   186d8:	cmp	r0, #0
   186dc:	strd	r4, [sp, #-16]!
   186e0:	mov	r5, r1
   186e4:	ldr	r4, [r1]
   186e8:	str	r6, [sp, #8]
   186ec:	mov	r6, r2
   186f0:	str	lr, [sp, #12]
   186f4:	beq	1873c <__assert_fail@plt+0x780c>
   186f8:	lsr	r3, r4, #1
   186fc:	add	r3, r3, #1
   18700:	adds	r4, r4, r3
   18704:	bcs	18738 <__assert_fail@plt+0x7808>
   18708:	mov	r1, r4
   1870c:	bl	19d30 <__assert_fail@plt+0x8e00>
   18710:	cmp	r0, #0
   18714:	beq	1872c <__assert_fail@plt+0x77fc>
   18718:	ldr	r6, [sp, #8]
   1871c:	str	r4, [r5]
   18720:	ldrd	r4, [sp]
   18724:	add	sp, sp, #12
   18728:	pop	{pc}		; (ldr pc, [sp], #4)
   1872c:	cmp	r4, #0
   18730:	cmpne	r6, #0
   18734:	beq	18718 <__assert_fail@plt+0x77e8>
   18738:	bl	18a3c <__assert_fail@plt+0x7b0c>
   1873c:	cmp	r4, #0
   18740:	bne	18754 <__assert_fail@plt+0x7824>
   18744:	mov	r4, #64	; 0x40
   18748:	udiv	r4, r4, r2
   1874c:	cmp	r2, #64	; 0x40
   18750:	addhi	r4, r4, #1
   18754:	mov	r2, r6
   18758:	mov	r1, r4
   1875c:	mov	r0, #0
   18760:	bl	19d30 <__assert_fail@plt+0x8e00>
   18764:	cmp	r0, #0
   18768:	bne	18718 <__assert_fail@plt+0x77e8>
   1876c:	b	18738 <__assert_fail@plt+0x7808>
   18770:	ldr	ip, [r1]
   18774:	strd	r4, [sp, #-24]!	; 0xffffffe8
   18778:	strd	r6, [sp, #8]
   1877c:	mov	r7, r1
   18780:	mov	r6, r0
   18784:	str	r8, [sp, #16]
   18788:	mvn	r8, r3
   1878c:	lsr	r8, r8, #31
   18790:	str	lr, [sp, #20]
   18794:	asr	r1, ip, #1
   18798:	ldr	lr, [sp, #24]
   1879c:	adds	r4, ip, r1
   187a0:	mvnvs	r4, #-2147483648	; 0x80000000
   187a4:	cmp	r3, r4
   187a8:	movge	r1, #0
   187ac:	andlt	r1, r8, #1
   187b0:	cmp	r1, #0
   187b4:	movne	r4, r3
   187b8:	smull	r0, r1, r4, lr
   187bc:	cmp	r1, r0, asr #31
   187c0:	bne	18870 <__assert_fail@plt+0x7940>
   187c4:	cmp	r0, #63	; 0x3f
   187c8:	mov	r5, r0
   187cc:	ble	1883c <__assert_fail@plt+0x790c>
   187d0:	cmp	r6, #0
   187d4:	sub	r1, r4, ip
   187d8:	streq	r6, [r7]
   187dc:	cmp	r1, r2
   187e0:	bge	18810 <__assert_fail@plt+0x78e0>
   187e4:	adds	r4, ip, r2
   187e8:	bvs	1886c <__assert_fail@plt+0x793c>
   187ec:	cmp	r4, r3
   187f0:	movle	r3, #0
   187f4:	andgt	r3, r8, #1
   187f8:	cmp	r3, #0
   187fc:	bne	1886c <__assert_fail@plt+0x793c>
   18800:	smull	r0, r1, r4, lr
   18804:	cmp	r1, r0, asr #31
   18808:	mov	r5, r0
   1880c:	bne	1886c <__assert_fail@plt+0x793c>
   18810:	mov	r1, r5
   18814:	mov	r0, r6
   18818:	bl	19b94 <__assert_fail@plt+0x8c64>
   1881c:	cmp	r0, #0
   18820:	beq	18850 <__assert_fail@plt+0x7920>
   18824:	ldr	r8, [sp, #16]
   18828:	str	r4, [r7]
   1882c:	ldrd	r4, [sp]
   18830:	ldrd	r6, [sp, #8]
   18834:	add	sp, sp, #20
   18838:	pop	{pc}		; (ldr pc, [sp], #4)
   1883c:	mov	r0, #64	; 0x40
   18840:	sdiv	r4, r0, lr
   18844:	mls	r5, lr, r4, r0
   18848:	sub	r5, r0, r5
   1884c:	b	187d0 <__assert_fail@plt+0x78a0>
   18850:	adds	r5, r5, #0
   18854:	movne	r5, #1
   18858:	cmp	r6, #0
   1885c:	movne	r6, r5
   18860:	moveq	r6, #1
   18864:	cmp	r6, #0
   18868:	beq	18824 <__assert_fail@plt+0x78f4>
   1886c:	bl	18a3c <__assert_fail@plt+0x7b0c>
   18870:	mvn	r0, #-2147483648	; 0x80000000
   18874:	b	18840 <__assert_fail@plt+0x7910>
   18878:	mov	r1, #1
   1887c:	str	r4, [sp, #-8]!
   18880:	str	lr, [sp, #4]
   18884:	bl	19ae4 <__assert_fail@plt+0x8bb4>
   18888:	cmp	r0, #0
   1888c:	beq	1889c <__assert_fail@plt+0x796c>
   18890:	ldr	r4, [sp]
   18894:	add	sp, sp, #4
   18898:	pop	{pc}		; (ldr pc, [sp], #4)
   1889c:	bl	18a3c <__assert_fail@plt+0x7b0c>
   188a0:	mov	r1, #1
   188a4:	str	r4, [sp, #-8]!
   188a8:	str	lr, [sp, #4]
   188ac:	bl	19ae4 <__assert_fail@plt+0x8bb4>
   188b0:	cmp	r0, #0
   188b4:	beq	188c4 <__assert_fail@plt+0x7994>
   188b8:	ldr	r4, [sp]
   188bc:	add	sp, sp, #4
   188c0:	pop	{pc}		; (ldr pc, [sp], #4)
   188c4:	bl	18a3c <__assert_fail@plt+0x7b0c>
   188c8:	str	r4, [sp, #-8]!
   188cc:	str	lr, [sp, #4]
   188d0:	bl	19ae4 <__assert_fail@plt+0x8bb4>
   188d4:	cmp	r0, #0
   188d8:	beq	188e8 <__assert_fail@plt+0x79b8>
   188dc:	ldr	r4, [sp]
   188e0:	add	sp, sp, #4
   188e4:	pop	{pc}		; (ldr pc, [sp], #4)
   188e8:	bl	18a3c <__assert_fail@plt+0x7b0c>
   188ec:	str	r4, [sp, #-8]!
   188f0:	str	lr, [sp, #4]
   188f4:	bl	19ae4 <__assert_fail@plt+0x8bb4>
   188f8:	cmp	r0, #0
   188fc:	beq	1890c <__assert_fail@plt+0x79dc>
   18900:	ldr	r4, [sp]
   18904:	add	sp, sp, #4
   18908:	pop	{pc}		; (ldr pc, [sp], #4)
   1890c:	bl	18a3c <__assert_fail@plt+0x7b0c>
   18910:	strd	r4, [sp, #-16]!
   18914:	mov	r4, r1
   18918:	str	r6, [sp, #8]
   1891c:	mov	r6, r0
   18920:	mov	r0, r1
   18924:	str	lr, [sp, #12]
   18928:	bl	19b58 <__assert_fail@plt+0x8c28>
   1892c:	subs	r5, r0, #0
   18930:	beq	18954 <__assert_fail@plt+0x7a24>
   18934:	mov	r2, r4
   18938:	mov	r1, r6
   1893c:	bl	10d2c <memcpy@plt>
   18940:	mov	r0, r5
   18944:	ldrd	r4, [sp]
   18948:	ldr	r6, [sp, #8]
   1894c:	add	sp, sp, #12
   18950:	pop	{pc}		; (ldr pc, [sp], #4)
   18954:	bl	18a3c <__assert_fail@plt+0x7b0c>
   18958:	strd	r4, [sp, #-16]!
   1895c:	mov	r4, r1
   18960:	str	r6, [sp, #8]
   18964:	mov	r6, r0
   18968:	mov	r0, r1
   1896c:	str	lr, [sp, #12]
   18970:	bl	19b58 <__assert_fail@plt+0x8c28>
   18974:	subs	r5, r0, #0
   18978:	beq	1899c <__assert_fail@plt+0x7a6c>
   1897c:	mov	r2, r4
   18980:	mov	r1, r6
   18984:	bl	10d2c <memcpy@plt>
   18988:	mov	r0, r5
   1898c:	ldrd	r4, [sp]
   18990:	ldr	r6, [sp, #8]
   18994:	add	sp, sp, #12
   18998:	pop	{pc}		; (ldr pc, [sp], #4)
   1899c:	bl	18a3c <__assert_fail@plt+0x7b0c>
   189a0:	strd	r4, [sp, #-16]!
   189a4:	mov	r4, r1
   189a8:	str	r6, [sp, #8]
   189ac:	mov	r6, r0
   189b0:	add	r0, r1, #1
   189b4:	str	lr, [sp, #12]
   189b8:	bl	19b58 <__assert_fail@plt+0x8c28>
   189bc:	subs	r5, r0, #0
   189c0:	beq	189ec <__assert_fail@plt+0x7abc>
   189c4:	mov	r3, #0
   189c8:	mov	r1, r6
   189cc:	mov	r2, r4
   189d0:	strb	r3, [r5, r4]
   189d4:	bl	10d2c <memcpy@plt>
   189d8:	mov	r0, r5
   189dc:	ldrd	r4, [sp]
   189e0:	ldr	r6, [sp, #8]
   189e4:	add	sp, sp, #12
   189e8:	pop	{pc}		; (ldr pc, [sp], #4)
   189ec:	bl	18a3c <__assert_fail@plt+0x7b0c>
   189f0:	strd	r4, [sp, #-16]!
   189f4:	str	r6, [sp, #8]
   189f8:	mov	r6, r0
   189fc:	str	lr, [sp, #12]
   18a00:	bl	10e34 <strlen@plt>
   18a04:	add	r4, r0, #1
   18a08:	mov	r0, r4
   18a0c:	bl	19b58 <__assert_fail@plt+0x8c28>
   18a10:	subs	r5, r0, #0
   18a14:	beq	18a38 <__assert_fail@plt+0x7b08>
   18a18:	mov	r2, r4
   18a1c:	mov	r1, r6
   18a20:	bl	10d2c <memcpy@plt>
   18a24:	mov	r0, r5
   18a28:	ldrd	r4, [sp]
   18a2c:	ldr	r6, [sp, #8]
   18a30:	add	sp, sp, #12
   18a34:	pop	{pc}		; (ldr pc, [sp], #4)
   18a38:	bl	18a3c <__assert_fail@plt+0x7b0c>
   18a3c:	movw	r3, #49392	; 0xc0f0
   18a40:	movt	r3, #2
   18a44:	str	r4, [sp, #-8]!
   18a48:	ldr	r4, [r3]
   18a4c:	mov	r2, #5
   18a50:	movw	r1, #45948	; 0xb37c
   18a54:	movt	r1, #1
   18a58:	mov	r0, #0
   18a5c:	str	lr, [sp, #4]
   18a60:	bl	10d68 <dcgettext@plt>
   18a64:	mov	r3, r0
   18a68:	movw	r2, #43884	; 0xab6c
   18a6c:	movt	r2, #1
   18a70:	mov	r1, #0
   18a74:	mov	r0, r4
   18a78:	bl	10dd4 <error@plt>
   18a7c:	bl	10f24 <abort@plt>
   18a80:	cmp	r2, #36	; 0x24
   18a84:	strd	r4, [sp, #-36]!	; 0xffffffdc
   18a88:	strd	r6, [sp, #8]
   18a8c:	strd	r8, [sp, #16]
   18a90:	strd	sl, [sp, #24]
   18a94:	str	lr, [sp, #32]
   18a98:	sub	sp, sp, #36	; 0x24
   18a9c:	bhi	19878 <__assert_fail@plt+0x8948>
   18aa0:	cmp	r1, #0
   18aa4:	mov	r5, r1
   18aa8:	mov	r6, r2
   18aac:	addeq	r5, sp, #28
   18ab0:	mov	sl, r0
   18ab4:	mov	r9, r3
   18ab8:	bl	10e4c <__errno_location@plt>
   18abc:	mov	fp, r0
   18ac0:	mov	r4, #0
   18ac4:	mov	r2, r6
   18ac8:	mov	r3, r4
   18acc:	mov	r1, r5
   18ad0:	mov	r0, sl
   18ad4:	str	r4, [fp]
   18ad8:	bl	10ee8 <__strtoll_internal@plt>
   18adc:	ldr	r8, [r5]
   18ae0:	mov	r6, r0
   18ae4:	mov	r7, r1
   18ae8:	cmp	r8, sl
   18aec:	beq	18b44 <__assert_fail@plt+0x7c14>
   18af0:	ldr	r4, [fp]
   18af4:	cmp	r4, #0
   18af8:	beq	18b08 <__assert_fail@plt+0x7bd8>
   18afc:	cmp	r4, #34	; 0x22
   18b00:	bne	18c48 <__assert_fail@plt+0x7d18>
   18b04:	mov	r4, #1
   18b08:	ldr	r3, [sp, #72]	; 0x48
   18b0c:	cmp	r3, #0
   18b10:	beq	18b20 <__assert_fail@plt+0x7bf0>
   18b14:	ldrb	sl, [r8]
   18b18:	cmp	sl, #0
   18b1c:	bne	18d4c <__assert_fail@plt+0x7e1c>
   18b20:	strd	r6, [r9]
   18b24:	mov	r0, r4
   18b28:	add	sp, sp, #36	; 0x24
   18b2c:	ldrd	r4, [sp]
   18b30:	ldrd	r6, [sp, #8]
   18b34:	ldrd	r8, [sp, #16]
   18b38:	ldrd	sl, [sp, #24]
   18b3c:	add	sp, sp, #32
   18b40:	pop	{pc}		; (ldr pc, [sp], #4)
   18b44:	ldr	r3, [sp, #72]	; 0x48
   18b48:	cmp	r3, r4
   18b4c:	beq	18c48 <__assert_fail@plt+0x7d18>
   18b50:	ldrb	sl, [sl]
   18b54:	cmp	sl, r4
   18b58:	beq	18c48 <__assert_fail@plt+0x7d18>
   18b5c:	mov	r1, sl
   18b60:	mov	r0, r3
   18b64:	bl	10e40 <strchr@plt>
   18b68:	cmp	r0, r4
   18b6c:	movne	r6, #1
   18b70:	movne	r7, #0
   18b74:	beq	18c48 <__assert_fail@plt+0x7d18>
   18b78:	sub	fp, sl, #69	; 0x45
   18b7c:	cmp	fp, #47	; 0x2f
   18b80:	ldrls	pc, [pc, fp, lsl #2]
   18b84:	b	18d68 <__assert_fail@plt+0x7e38>
   18b88:	andeq	r8, r1, r0, asr ip
   18b8c:	andeq	r8, r1, r8, ror #26
   18b90:	andeq	r8, r1, r0, asr ip
   18b94:	andeq	r8, r1, r8, ror #26
   18b98:	andeq	r8, r1, r8, ror #26
   18b9c:	andeq	r8, r1, r8, ror #26
   18ba0:	andeq	r8, r1, r0, asr ip
   18ba4:	andeq	r8, r1, r8, ror #26
   18ba8:	andeq	r8, r1, r0, asr ip
   18bac:	andeq	r8, r1, r8, ror #26
   18bb0:	andeq	r8, r1, r8, ror #26
   18bb4:	andeq	r8, r1, r0, asr ip
   18bb8:	andeq	r8, r1, r8, ror #26
   18bbc:	andeq	r8, r1, r8, ror #26
   18bc0:	andeq	r8, r1, r8, ror #26
   18bc4:	andeq	r8, r1, r0, asr ip
   18bc8:	andeq	r8, r1, r8, ror #26
   18bcc:	andeq	r8, r1, r8, ror #26
   18bd0:	andeq	r8, r1, r8, ror #26
   18bd4:	andeq	r8, r1, r8, ror #26
   18bd8:	andeq	r8, r1, r0, asr ip
   18bdc:	andeq	r8, r1, r0, asr ip
   18be0:	andeq	r8, r1, r8, ror #26
   18be4:	andeq	r8, r1, r8, ror #26
   18be8:	andeq	r8, r1, r8, ror #26
   18bec:	andeq	r8, r1, r8, ror #26
   18bf0:	andeq	r8, r1, r8, ror #26
   18bf4:	andeq	r8, r1, r8, ror #26
   18bf8:	andeq	r8, r1, r8, ror #26
   18bfc:	andeq	r8, r1, r8, ror #26
   18c00:	andeq	r8, r1, r8, ror #26
   18c04:	andeq	r8, r1, r8, ror #26
   18c08:	andeq	r8, r1, r8, ror #26
   18c0c:	andeq	r8, r1, r8, ror #26
   18c10:	andeq	r8, r1, r0, asr ip
   18c14:	andeq	r8, r1, r8, ror #26
   18c18:	andeq	r8, r1, r8, ror #26
   18c1c:	andeq	r8, r1, r8, ror #26
   18c20:	andeq	r8, r1, r0, asr ip
   18c24:	andeq	r8, r1, r8, ror #26
   18c28:	andeq	r8, r1, r0, asr ip
   18c2c:	andeq	r8, r1, r8, ror #26
   18c30:	andeq	r8, r1, r8, ror #26
   18c34:	andeq	r8, r1, r8, ror #26
   18c38:	andeq	r8, r1, r8, ror #26
   18c3c:	andeq	r8, r1, r8, ror #26
   18c40:	andeq	r8, r1, r8, ror #26
   18c44:	andeq	r8, r1, r0, asr ip
   18c48:	mov	r4, #4
   18c4c:	b	18b24 <__assert_fail@plt+0x7bf4>
   18c50:	mov	r1, #48	; 0x30
   18c54:	ldr	r0, [sp, #72]	; 0x48
   18c58:	bl	10e40 <strchr@plt>
   18c5c:	cmp	r0, #0
   18c60:	beq	18d68 <__assert_fail@plt+0x7e38>
   18c64:	ldrb	r3, [r8, #1]
   18c68:	cmp	r3, #68	; 0x44
   18c6c:	beq	19450 <__assert_fail@plt+0x8520>
   18c70:	cmp	r3, #105	; 0x69
   18c74:	beq	19498 <__assert_fail@plt+0x8568>
   18c78:	cmp	r3, #66	; 0x42
   18c7c:	beq	19450 <__assert_fail@plt+0x8520>
   18c80:	cmp	fp, #47	; 0x2f
   18c84:	ldrls	pc, [pc, fp, lsl #2]
   18c88:	b	18d60 <__assert_fail@plt+0x7e30>
   18c8c:	andeq	r9, r1, r0, ror r3
   18c90:	andeq	r8, r1, r0, ror #26
   18c94:			; <UNDEFINED> instruction: 0x000191b4
   18c98:	andeq	r8, r1, r0, ror #26
   18c9c:	andeq	r8, r1, r0, ror #26
   18ca0:	andeq	r8, r1, r0, ror #26
   18ca4:	andeq	r8, r1, r4, lsl #31
   18ca8:	andeq	r8, r1, r0, ror #26
   18cac:	andeq	r9, r1, r0, lsl r3
   18cb0:	andeq	r8, r1, r0, ror #26
   18cb4:	andeq	r8, r1, r0, ror #26
   18cb8:	andeq	r9, r1, r4, lsl r1
   18cbc:	andeq	r8, r1, r0, ror #26
   18cc0:	andeq	r8, r1, r0, ror #26
   18cc4:	andeq	r8, r1, r0, ror #26
   18cc8:	andeq	r9, r1, r4, asr r2
   18ccc:	andeq	r8, r1, r0, ror #26
   18cd0:	andeq	r8, r1, r0, ror #26
   18cd4:	andeq	r8, r1, r0, ror #26
   18cd8:	andeq	r8, r1, r0, ror #26
   18cdc:	andeq	r9, r1, r0, asr r0
   18ce0:	andeq	r8, r1, r8, asr lr
   18ce4:	andeq	r8, r1, r0, ror #26
   18ce8:	andeq	r8, r1, r0, ror #26
   18cec:	andeq	r8, r1, r0, ror #26
   18cf0:	andeq	r8, r1, r0, ror #26
   18cf4:	andeq	r8, r1, r0, ror #26
   18cf8:	andeq	r8, r1, r0, ror #26
   18cfc:	andeq	r8, r1, r0, ror #26
   18d00:	andeq	r9, r1, r0, lsr #32
   18d04:	andeq	r9, r1, r0, lsl r4
   18d08:	andeq	r8, r1, r0, ror #26
   18d0c:	andeq	r8, r1, r0, ror #26
   18d10:	andeq	r8, r1, r0, ror #26
   18d14:			; <UNDEFINED> instruction: 0x000191b4
   18d18:	andeq	r8, r1, r0, ror #26
   18d1c:	andeq	r8, r1, r0, ror #26
   18d20:	andeq	r8, r1, r0, ror #26
   18d24:	andeq	r8, r1, r4, lsl #31
   18d28:	andeq	r8, r1, r0, ror #26
   18d2c:	andeq	r9, r1, r0, lsl r3
   18d30:	andeq	r8, r1, r0, ror #26
   18d34:	andeq	r8, r1, r0, ror #26
   18d38:	andeq	r8, r1, r0, ror #26
   18d3c:	andeq	r8, r1, r0, ror #26
   18d40:	andeq	r8, r1, r0, ror #26
   18d44:	andeq	r8, r1, r0, ror #26
   18d48:	andeq	r9, r1, r4, asr r2
   18d4c:	mov	r0, r3
   18d50:	mov	r1, sl
   18d54:	bl	10e40 <strchr@plt>
   18d58:	cmp	r0, #0
   18d5c:	bne	18b78 <__assert_fail@plt+0x7c48>
   18d60:	orr	r4, r4, #2
   18d64:	b	18b20 <__assert_fail@plt+0x7bf0>
   18d68:	mov	fp, #1
   18d6c:	mov	lr, #1024	; 0x400
   18d70:	sub	sl, sl, #66	; 0x42
   18d74:	cmp	sl, #53	; 0x35
   18d78:	ldrls	pc, [pc, sl, lsl #2]
   18d7c:	b	18d60 <__assert_fail@plt+0x7e30>
   18d80:	strdeq	r9, [r1], -r4
   18d84:	andeq	r8, r1, r0, ror #26
   18d88:	andeq	r8, r1, r0, ror #26
   18d8c:	andeq	r9, r1, r8, ror r3
   18d90:	andeq	r8, r1, r0, ror #26
   18d94:			; <UNDEFINED> instruction: 0x000191bc
   18d98:	andeq	r8, r1, r0, ror #26
   18d9c:	andeq	r8, r1, r0, ror #26
   18da0:	andeq	r8, r1, r0, ror #26
   18da4:	andeq	r8, r1, ip, lsl #31
   18da8:	andeq	r8, r1, r0, ror #26
   18dac:	andeq	r9, r1, r8, lsl r3
   18db0:	andeq	r8, r1, r0, ror #26
   18db4:	andeq	r8, r1, r0, ror #26
   18db8:	andeq	r9, r1, ip, lsl r1
   18dbc:	andeq	r8, r1, r0, ror #26
   18dc0:	andeq	r8, r1, r0, ror #26
   18dc4:	andeq	r8, r1, r0, ror #26
   18dc8:	andeq	r9, r1, ip, asr r2
   18dcc:	andeq	r8, r1, r0, ror #26
   18dd0:	andeq	r8, r1, r0, ror #26
   18dd4:	andeq	r8, r1, r0, ror #26
   18dd8:	andeq	r8, r1, r0, ror #26
   18ddc:	andeq	r9, r1, r8, asr r0
   18de0:	andeq	r8, r1, r0, ror #28
   18de4:	andeq	r8, r1, r0, ror #26
   18de8:	andeq	r8, r1, r0, ror #26
   18dec:	andeq	r8, r1, r0, ror #26
   18df0:	andeq	r8, r1, r0, ror #26
   18df4:	andeq	r8, r1, r0, ror #26
   18df8:	andeq	r8, r1, r0, ror #26
   18dfc:	andeq	r8, r1, r0, ror #26
   18e00:	andeq	r9, r1, r4, lsr #32
   18e04:	andeq	r8, r1, ip, ror #30
   18e08:	andeq	r8, r1, r0, ror #26
   18e0c:	andeq	r8, r1, r0, ror #26
   18e10:	andeq	r8, r1, r0, ror #26
   18e14:			; <UNDEFINED> instruction: 0x000191bc
   18e18:	andeq	r8, r1, r0, ror #26
   18e1c:	andeq	r8, r1, r0, ror #26
   18e20:	andeq	r8, r1, r0, ror #26
   18e24:	andeq	r8, r1, ip, lsl #31
   18e28:	andeq	r8, r1, r0, ror #26
   18e2c:	andeq	r9, r1, r8, lsl r3
   18e30:	andeq	r8, r1, r0, ror #26
   18e34:	andeq	r8, r1, r0, ror #26
   18e38:	andeq	r8, r1, r0, ror #26
   18e3c:	andeq	r8, r1, r0, ror #26
   18e40:	andeq	r8, r1, r0, ror #26
   18e44:	andeq	r8, r1, r0, ror #26
   18e48:	andeq	r9, r1, ip, asr r2
   18e4c:	andeq	r8, r1, r0, ror #26
   18e50:	andeq	r8, r1, r0, ror #26
   18e54:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18e58:	mov	fp, #1
   18e5c:	mov	lr, #1024	; 0x400
   18e60:	asr	r3, lr, #31
   18e64:	mov	r2, lr
   18e68:	mov	r1, #0
   18e6c:	cmp	r7, r6, asr #31
   18e70:	strd	r2, [sp]
   18e74:	bne	19584 <__assert_fail@plt+0x8654>
   18e78:	smull	r2, r3, r6, lr
   18e7c:	mov	ip, r2
   18e80:	cmp	r1, #0
   18e84:	bne	19418 <__assert_fail@plt+0x84e8>
   18e88:	mov	r6, ip
   18e8c:	mov	r7, r3
   18e90:	cmp	r3, r6, asr #31
   18e94:	mov	ip, r1
   18e98:	bne	190b8 <__assert_fail@plt+0x8188>
   18e9c:	smull	r2, r3, r6, lr
   18ea0:	mov	sl, r2
   18ea4:	subs	r1, ip, #0
   18ea8:	bne	19418 <__assert_fail@plt+0x84e8>
   18eac:	cmp	r3, sl, asr #31
   18eb0:	mov	r6, sl
   18eb4:	mov	ip, r1
   18eb8:	mov	r7, r3
   18ebc:	bne	193b4 <__assert_fail@plt+0x8484>
   18ec0:	smull	r2, r3, r6, lr
   18ec4:	mov	sl, r2
   18ec8:	subs	r1, ip, #0
   18ecc:	bne	19418 <__assert_fail@plt+0x84e8>
   18ed0:	cmp	r3, sl, asr #31
   18ed4:	mov	r6, sl
   18ed8:	mov	ip, r1
   18edc:	mov	r7, r3
   18ee0:	bne	19158 <__assert_fail@plt+0x8228>
   18ee4:	smull	r2, r3, r6, lr
   18ee8:	mov	sl, r2
   18eec:	subs	r1, ip, #0
   18ef0:	bne	19418 <__assert_fail@plt+0x84e8>
   18ef4:	cmp	r3, sl, asr #31
   18ef8:	mov	r6, sl
   18efc:	mov	ip, r1
   18f00:	mov	r7, r3
   18f04:	bne	19298 <__assert_fail@plt+0x8368>
   18f08:	smull	r2, r3, r6, lr
   18f0c:	mov	sl, r2
   18f10:	subs	r1, ip, #0
   18f14:	bne	19418 <__assert_fail@plt+0x84e8>
   18f18:	cmp	r3, sl, asr #31
   18f1c:	mov	r6, sl
   18f20:	mov	ip, r1
   18f24:	mov	r7, r3
   18f28:	bne	191f8 <__assert_fail@plt+0x82c8>
   18f2c:	smull	r2, r3, r6, lr
   18f30:	mov	sl, r2
   18f34:	cmp	ip, #0
   18f38:	bne	19418 <__assert_fail@plt+0x84e8>
   18f3c:	cmp	r3, sl, asr #31
   18f40:	mov	r0, sl
   18f44:	mov	r1, r3
   18f48:	bne	194b0 <__assert_fail@plt+0x8580>
   18f4c:	smull	r2, r3, sl, lr
   18f50:	mov	lr, r2
   18f54:	mov	r2, r3
   18f58:	cmp	ip, #0
   18f5c:	moveq	r6, lr
   18f60:	moveq	r7, r2
   18f64:	bne	19434 <__assert_fail@plt+0x8504>
   18f68:	orr	r4, r4, ip
   18f6c:	add	r3, r8, fp
   18f70:	str	r3, [r5]
   18f74:	ldrb	r3, [r8, fp]
   18f78:	cmp	r3, #0
   18f7c:	beq	18b20 <__assert_fail@plt+0x7bf0>
   18f80:	b	18d60 <__assert_fail@plt+0x7e30>
   18f84:	mov	fp, #1
   18f88:	mov	lr, #1024	; 0x400
   18f8c:	cmp	r7, r6, asr #31
   18f90:	mov	r0, lr
   18f94:	mov	ip, #0
   18f98:	asr	r1, lr, #31
   18f9c:	bne	1945c <__assert_fail@plt+0x852c>
   18fa0:	smull	r2, r3, r6, lr
   18fa4:	mov	r1, r2
   18fa8:	mov	lr, r3
   18fac:	cmp	ip, #0
   18fb0:	bne	18fc0 <__assert_fail@plt+0x8090>
   18fb4:	mov	r6, r1
   18fb8:	mov	r7, lr
   18fbc:	b	18f6c <__assert_fail@plt+0x803c>
   18fc0:	cmp	r6, #0
   18fc4:	mov	r4, #1
   18fc8:	sbcs	r3, r7, #0
   18fcc:	blt	18fec <__assert_fail@plt+0x80bc>
   18fd0:	mvn	r6, #0
   18fd4:	mvn	r7, #-2147483648	; 0x80000000
   18fd8:	b	18f6c <__assert_fail@plt+0x803c>
   18fdc:	cmp	r0, #0
   18fe0:	mov	r4, #1
   18fe4:	sbcs	r3, r1, #0
   18fe8:	bge	18fd0 <__assert_fail@plt+0x80a0>
   18fec:	mov	r6, #0
   18ff0:	mov	r7, #-2147483648	; 0x80000000
   18ff4:	b	18f6c <__assert_fail@plt+0x803c>
   18ff8:	cmp	r7, r6, asr #31
   18ffc:	mov	r1, #0
   19000:	bne	1971c <__assert_fail@plt+0x87ec>
   19004:	adds	ip, r6, r6
   19008:	adc	r3, r7, r7
   1900c:	cmp	r1, #0
   19010:	bne	18fc0 <__assert_fail@plt+0x8090>
   19014:	mov	r6, ip
   19018:	mov	r7, r3
   1901c:	b	18f6c <__assert_fail@plt+0x803c>
   19020:	mov	fp, #1
   19024:	cmp	r7, r6, asr #31
   19028:	mov	ip, #0
   1902c:	bne	19774 <__assert_fail@plt+0x8844>
   19030:	lsl	r3, r7, #9
   19034:	lsl	r2, r6, #9
   19038:	orr	r3, r3, r6, lsr #23
   1903c:	cmp	ip, #0
   19040:	bne	18fc0 <__assert_fail@plt+0x8090>
   19044:	mov	r6, r2
   19048:	mov	r7, r3
   1904c:	b	18f6c <__assert_fail@plt+0x803c>
   19050:	mov	fp, #1
   19054:	mov	lr, #1024	; 0x400
   19058:	asr	r3, lr, #31
   1905c:	mov	r2, lr
   19060:	mov	r1, #0
   19064:	cmp	r7, r6, asr #31
   19068:	strd	r2, [sp]
   1906c:	bne	19604 <__assert_fail@plt+0x86d4>
   19070:	smull	r2, r3, r6, lr
   19074:	mov	ip, r2
   19078:	cmp	r1, #0
   1907c:	bne	19418 <__assert_fail@plt+0x84e8>
   19080:	mov	r6, ip
   19084:	mov	r7, r3
   19088:	cmp	r3, r6, asr #31
   1908c:	mov	ip, r1
   19090:	bne	197c8 <__assert_fail@plt+0x8898>
   19094:	smull	r2, r3, r6, lr
   19098:	mov	sl, r2
   1909c:	subs	r1, ip, #0
   190a0:	bne	19418 <__assert_fail@plt+0x84e8>
   190a4:	cmp	r3, sl, asr #31
   190a8:	mov	r6, sl
   190ac:	mov	ip, r1
   190b0:	mov	r7, r3
   190b4:	beq	18e9c <__assert_fail@plt+0x7f6c>
   190b8:	umull	r0, r1, r6, lr
   190bc:	cmp	r3, #0
   190c0:	umull	r2, r3, lr, r3
   190c4:	strd	r0, [sp, #16]
   190c8:	mov	r0, r2
   190cc:	mov	r1, r3
   190d0:	strd	r0, [sp, #8]
   190d4:	bge	190ec <__assert_fail@plt+0x81bc>
   190d8:	subs	r3, r0, ip
   190dc:	str	r3, [sp, #8]
   190e0:	ldr	r3, [sp, #12]
   190e4:	sbc	r3, r3, lr
   190e8:	str	r3, [sp, #12]
   190ec:	ldr	r1, [sp, #8]
   190f0:	mov	r2, #0
   190f4:	ldr	r3, [sp, #20]
   190f8:	adds	r3, r1, r3
   190fc:	ldr	r1, [sp, #12]
   19100:	adc	r2, r1, r2
   19104:	cmp	r2, r3, asr #31
   19108:	bne	19a1c <__assert_fail@plt+0x8aec>
   1910c:	ldr	sl, [sp, #16]
   19110:	b	18ea4 <__assert_fail@plt+0x7f74>
   19114:	mov	fp, #1
   19118:	mov	lr, #1024	; 0x400
   1911c:	asr	r3, lr, #31
   19120:	mov	r2, lr
   19124:	mov	r1, #0
   19128:	cmp	r7, r6, asr #31
   1912c:	strd	r2, [sp]
   19130:	bne	19544 <__assert_fail@plt+0x8614>
   19134:	smull	r2, r3, r6, lr
   19138:	mov	ip, r2
   1913c:	cmp	r1, #0
   19140:	bne	19418 <__assert_fail@plt+0x84e8>
   19144:	mov	r6, ip
   19148:	mov	r7, r3
   1914c:	cmp	r3, r6, asr #31
   19150:	mov	ip, r1
   19154:	beq	18ee4 <__assert_fail@plt+0x7fb4>
   19158:	umull	r0, r1, r6, lr
   1915c:	cmp	r3, #0
   19160:	umull	r2, r3, lr, r3
   19164:	strd	r0, [sp, #16]
   19168:	mov	r0, r2
   1916c:	mov	r1, r3
   19170:	strd	r0, [sp, #8]
   19174:	bge	1918c <__assert_fail@plt+0x825c>
   19178:	subs	r3, r0, ip
   1917c:	str	r3, [sp, #8]
   19180:	ldr	r3, [sp, #12]
   19184:	sbc	r3, r3, lr
   19188:	str	r3, [sp, #12]
   1918c:	ldr	r1, [sp, #8]
   19190:	mov	r2, #0
   19194:	ldr	r3, [sp, #20]
   19198:	adds	r3, r1, r3
   1919c:	ldr	r1, [sp, #12]
   191a0:	adc	r2, r1, r2
   191a4:	cmp	r2, r3, asr #31
   191a8:	bne	1994c <__assert_fail@plt+0x8a1c>
   191ac:	ldr	sl, [sp, #16]
   191b0:	b	18eec <__assert_fail@plt+0x7fbc>
   191b4:	mov	fp, #1
   191b8:	mov	lr, #1024	; 0x400
   191bc:	asr	r3, lr, #31
   191c0:	mov	r2, lr
   191c4:	mov	r1, #0
   191c8:	cmp	r7, r6, asr #31
   191cc:	strd	r2, [sp]
   191d0:	bne	19504 <__assert_fail@plt+0x85d4>
   191d4:	smull	r2, r3, r6, lr
   191d8:	mov	ip, r2
   191dc:	cmp	r1, #0
   191e0:	bne	19418 <__assert_fail@plt+0x84e8>
   191e4:	mov	r6, ip
   191e8:	mov	r7, r3
   191ec:	cmp	r3, r6, asr #31
   191f0:	mov	ip, r1
   191f4:	beq	18f2c <__assert_fail@plt+0x7ffc>
   191f8:	umull	r0, r1, r6, lr
   191fc:	cmp	r3, #0
   19200:	umull	r2, r3, lr, r3
   19204:	strd	r0, [sp, #16]
   19208:	mov	r0, r2
   1920c:	mov	r1, r3
   19210:	strd	r0, [sp, #8]
   19214:	bge	1922c <__assert_fail@plt+0x82fc>
   19218:	subs	r3, r0, ip
   1921c:	str	r3, [sp, #8]
   19220:	ldr	r3, [sp, #12]
   19224:	sbc	r3, r3, lr
   19228:	str	r3, [sp, #12]
   1922c:	ldr	r1, [sp, #8]
   19230:	mov	r2, #0
   19234:	ldr	r3, [sp, #20]
   19238:	adds	r3, r1, r3
   1923c:	ldr	r1, [sp, #12]
   19240:	adc	r2, r1, r2
   19244:	cmp	r2, r3, asr #31
   19248:	bne	198bc <__assert_fail@plt+0x898c>
   1924c:	ldr	sl, [sp, #16]
   19250:	b	18f34 <__assert_fail@plt+0x8004>
   19254:	mov	fp, #1
   19258:	mov	lr, #1024	; 0x400
   1925c:	asr	r3, lr, #31
   19260:	mov	r2, lr
   19264:	mov	r1, #0
   19268:	cmp	r7, r6, asr #31
   1926c:	strd	r2, [sp]
   19270:	bne	196dc <__assert_fail@plt+0x87ac>
   19274:	smull	r2, r3, r6, lr
   19278:	mov	ip, r2
   1927c:	cmp	r1, #0
   19280:	bne	19418 <__assert_fail@plt+0x84e8>
   19284:	mov	r6, ip
   19288:	mov	r7, r3
   1928c:	cmp	r3, r6, asr #31
   19290:	mov	ip, r1
   19294:	beq	18f08 <__assert_fail@plt+0x7fd8>
   19298:	umull	r0, r1, r6, lr
   1929c:	cmp	r3, #0
   192a0:	umull	r2, r3, lr, r3
   192a4:	strd	r0, [sp, #16]
   192a8:	mov	r0, r2
   192ac:	mov	r1, r3
   192b0:	strd	r0, [sp, #8]
   192b4:	bge	192cc <__assert_fail@plt+0x839c>
   192b8:	subs	r3, r0, ip
   192bc:	str	r3, [sp, #8]
   192c0:	ldr	r3, [sp, #12]
   192c4:	sbc	r3, r3, lr
   192c8:	str	r3, [sp, #12]
   192cc:	ldr	r1, [sp, #8]
   192d0:	mov	r2, #0
   192d4:	ldr	r3, [sp, #20]
   192d8:	adds	r3, r1, r3
   192dc:	ldr	r1, [sp, #12]
   192e0:	adc	r2, r1, r2
   192e4:	cmp	r2, r3, asr #31
   192e8:	bne	19904 <__assert_fail@plt+0x89d4>
   192ec:	ldr	sl, [sp, #16]
   192f0:	b	18f10 <__assert_fail@plt+0x7fe0>
   192f4:	cmp	r7, r6, asr #31
   192f8:	mov	ip, #0
   192fc:	bne	19684 <__assert_fail@plt+0x8754>
   19300:	lsl	r3, r7, #10
   19304:	lsl	r2, r6, #10
   19308:	orr	r3, r3, r6, lsr #22
   1930c:	b	1903c <__assert_fail@plt+0x810c>
   19310:	mov	fp, #1
   19314:	mov	lr, #1024	; 0x400
   19318:	asr	r3, lr, #31
   1931c:	mov	r2, lr
   19320:	mov	r1, #0
   19324:	cmp	r7, r6, asr #31
   19328:	strd	r2, [sp]
   1932c:	bne	19644 <__assert_fail@plt+0x8714>
   19330:	smull	r2, r3, r6, lr
   19334:	mov	sl, r2
   19338:	subs	ip, r1, #0
   1933c:	bne	18fc0 <__assert_fail@plt+0x8090>
   19340:	cmp	r3, sl, asr #31
   19344:	mov	r0, sl
   19348:	mov	r1, r3
   1934c:	bne	19824 <__assert_fail@plt+0x88f4>
   19350:	smull	r2, r3, sl, lr
   19354:	mov	lr, r2
   19358:	mov	r2, r3
   1935c:	cmp	ip, #0
   19360:	bne	18fdc <__assert_fail@plt+0x80ac>
   19364:	mov	r6, lr
   19368:	mov	r7, r2
   1936c:	b	18f6c <__assert_fail@plt+0x803c>
   19370:	mov	fp, #1
   19374:	mov	lr, #1024	; 0x400
   19378:	asr	r3, lr, #31
   1937c:	mov	r2, lr
   19380:	mov	r1, #0
   19384:	cmp	r7, r6, asr #31
   19388:	strd	r2, [sp]
   1938c:	bne	195c4 <__assert_fail@plt+0x8694>
   19390:	smull	r2, r3, r6, lr
   19394:	mov	ip, r2
   19398:	cmp	r1, #0
   1939c:	bne	19418 <__assert_fail@plt+0x84e8>
   193a0:	mov	r6, ip
   193a4:	mov	r7, r3
   193a8:	cmp	r3, r6, asr #31
   193ac:	mov	ip, r1
   193b0:	beq	18ec0 <__assert_fail@plt+0x7f90>
   193b4:	umull	r0, r1, r6, lr
   193b8:	cmp	r3, #0
   193bc:	umull	r2, r3, lr, r3
   193c0:	strd	r0, [sp, #16]
   193c4:	mov	r0, r2
   193c8:	mov	r1, r3
   193cc:	strd	r0, [sp, #8]
   193d0:	bge	193e8 <__assert_fail@plt+0x84b8>
   193d4:	subs	r3, r0, ip
   193d8:	str	r3, [sp, #8]
   193dc:	ldr	r3, [sp, #12]
   193e0:	sbc	r3, r3, lr
   193e4:	str	r3, [sp, #12]
   193e8:	ldr	r1, [sp, #8]
   193ec:	mov	r2, #0
   193f0:	ldr	r3, [sp, #20]
   193f4:	adds	r3, r1, r3
   193f8:	ldr	r1, [sp, #12]
   193fc:	adc	r2, r1, r2
   19400:	cmp	r2, r3, asr #31
   19404:	bne	19928 <__assert_fail@plt+0x89f8>
   19408:	ldr	sl, [sp, #16]
   1940c:	b	18ec8 <__assert_fail@plt+0x7f98>
   19410:	mov	fp, #1
   19414:	b	18f6c <__assert_fail@plt+0x803c>
   19418:	cmp	r6, #0
   1941c:	mov	ip, #1
   19420:	sbcs	r3, r7, #0
   19424:	blt	19444 <__assert_fail@plt+0x8514>
   19428:	mvn	r6, #0
   1942c:	mvn	r7, #-2147483648	; 0x80000000
   19430:	b	18f68 <__assert_fail@plt+0x8038>
   19434:	cmp	r0, #0
   19438:	mov	ip, #1
   1943c:	sbcs	r3, r1, #0
   19440:	bge	19428 <__assert_fail@plt+0x84f8>
   19444:	mov	r6, #0
   19448:	mov	r7, #-2147483648	; 0x80000000
   1944c:	b	18f68 <__assert_fail@plt+0x8038>
   19450:	mov	fp, #2
   19454:	mov	lr, #1000	; 0x3e8
   19458:	b	18d70 <__assert_fail@plt+0x7e40>
   1945c:	umull	r2, r3, r6, lr
   19460:	cmp	r7, #0
   19464:	strd	r2, [sp]
   19468:	umull	r2, r3, lr, r7
   1946c:	bge	19478 <__assert_fail@plt+0x8548>
   19470:	subs	r2, r2, ip
   19474:	sbc	r3, r3, lr
   19478:	ldr	lr, [sp, #4]
   1947c:	mov	sl, #0
   19480:	adds	lr, r2, lr
   19484:	adc	sl, r3, sl
   19488:	cmp	sl, lr, asr #31
   1948c:	bne	199dc <__assert_fail@plt+0x8aac>
   19490:	ldr	r1, [sp]
   19494:	b	18fac <__assert_fail@plt+0x807c>
   19498:	ldrb	r3, [r8, #2]
   1949c:	mov	lr, #1024	; 0x400
   194a0:	cmp	r3, #66	; 0x42
   194a4:	movne	fp, #1
   194a8:	moveq	fp, #3
   194ac:	b	18d70 <__assert_fail@plt+0x7e40>
   194b0:	cmp	r3, #0
   194b4:	umull	r6, r7, sl, lr
   194b8:	umull	r2, r3, lr, r3
   194bc:	strd	r2, [sp, #8]
   194c0:	strd	r6, [sp, #16]
   194c4:	bge	194dc <__assert_fail@plt+0x85ac>
   194c8:	subs	r3, r2, ip
   194cc:	str	r3, [sp, #8]
   194d0:	ldr	r3, [sp, #12]
   194d4:	sbc	r3, r3, lr
   194d8:	str	r3, [sp, #12]
   194dc:	ldr	r3, [sp, #8]
   194e0:	mov	lr, #0
   194e4:	ldr	r6, [sp, #20]
   194e8:	adds	r2, r3, r6
   194ec:	ldr	r3, [sp, #12]
   194f0:	adc	lr, r3, lr
   194f4:	cmp	lr, r2, asr #31
   194f8:	bne	19970 <__assert_fail@plt+0x8a40>
   194fc:	ldr	lr, [sp, #16]
   19500:	b	18f58 <__assert_fail@plt+0x8028>
   19504:	umull	r2, r3, r6, lr
   19508:	cmp	r7, #0
   1950c:	strd	r2, [sp, #8]
   19510:	umull	r2, r3, lr, r7
   19514:	bge	19520 <__assert_fail@plt+0x85f0>
   19518:	subs	r2, r2, r1
   1951c:	sbc	r3, r3, lr
   19520:	ldr	r0, [sp, #12]
   19524:	mov	ip, #0
   19528:	adds	r0, r2, r0
   1952c:	adc	ip, r3, ip
   19530:	cmp	ip, r0, asr #31
   19534:	bne	19898 <__assert_fail@plt+0x8968>
   19538:	mov	r3, r0
   1953c:	ldr	ip, [sp, #8]
   19540:	b	191dc <__assert_fail@plt+0x82ac>
   19544:	umull	r2, r3, r6, lr
   19548:	cmp	r7, #0
   1954c:	strd	r2, [sp, #8]
   19550:	umull	r2, r3, lr, r7
   19554:	bge	19560 <__assert_fail@plt+0x8630>
   19558:	subs	r2, r2, r1
   1955c:	sbc	r3, r3, lr
   19560:	ldr	r0, [sp, #12]
   19564:	mov	ip, #0
   19568:	adds	r0, r2, r0
   1956c:	adc	ip, r3, ip
   19570:	cmp	ip, r0, asr #31
   19574:	bne	199f8 <__assert_fail@plt+0x8ac8>
   19578:	mov	r3, r0
   1957c:	ldr	ip, [sp, #8]
   19580:	b	1913c <__assert_fail@plt+0x820c>
   19584:	umull	r2, r3, r6, lr
   19588:	cmp	r7, #0
   1958c:	strd	r2, [sp, #8]
   19590:	umull	r2, r3, lr, r7
   19594:	bge	195a0 <__assert_fail@plt+0x8670>
   19598:	subs	r2, r2, r1
   1959c:	sbc	r3, r3, lr
   195a0:	ldr	r0, [sp, #12]
   195a4:	mov	ip, #0
   195a8:	adds	r0, r2, r0
   195ac:	adc	ip, r3, ip
   195b0:	cmp	ip, r0, asr #31
   195b4:	bne	198e0 <__assert_fail@plt+0x89b0>
   195b8:	mov	r3, r0
   195bc:	ldr	ip, [sp, #8]
   195c0:	b	18e80 <__assert_fail@plt+0x7f50>
   195c4:	umull	r2, r3, r6, lr
   195c8:	cmp	r7, #0
   195cc:	strd	r2, [sp, #8]
   195d0:	umull	r2, r3, lr, r7
   195d4:	bge	195e0 <__assert_fail@plt+0x86b0>
   195d8:	subs	r2, r2, r1
   195dc:	sbc	r3, r3, lr
   195e0:	ldr	r0, [sp, #12]
   195e4:	mov	ip, #0
   195e8:	adds	r0, r2, r0
   195ec:	adc	ip, r3, ip
   195f0:	cmp	ip, r0, asr #31
   195f4:	bne	19a98 <__assert_fail@plt+0x8b68>
   195f8:	mov	r3, r0
   195fc:	ldr	ip, [sp, #8]
   19600:	b	19398 <__assert_fail@plt+0x8468>
   19604:	umull	r2, r3, r6, lr
   19608:	cmp	r7, #0
   1960c:	strd	r2, [sp, #8]
   19610:	umull	r2, r3, lr, r7
   19614:	bge	19620 <__assert_fail@plt+0x86f0>
   19618:	subs	r2, r2, r1
   1961c:	sbc	r3, r3, lr
   19620:	ldr	r0, [sp, #12]
   19624:	mov	ip, #0
   19628:	adds	r0, r2, r0
   1962c:	adc	ip, r3, ip
   19630:	cmp	ip, r0, asr #31
   19634:	bne	19994 <__assert_fail@plt+0x8a64>
   19638:	mov	r3, r0
   1963c:	ldr	ip, [sp, #8]
   19640:	b	19078 <__assert_fail@plt+0x8148>
   19644:	umull	r2, r3, r6, lr
   19648:	cmp	r7, #0
   1964c:	strd	r2, [sp, #8]
   19650:	umull	r2, r3, lr, r7
   19654:	bge	19660 <__assert_fail@plt+0x8730>
   19658:	subs	r2, r2, r1
   1965c:	sbc	r3, r3, lr
   19660:	ldr	r0, [sp, #12]
   19664:	mov	ip, #0
   19668:	adds	r0, r2, r0
   1966c:	adc	ip, r3, ip
   19670:	cmp	ip, r0, asr #31
   19674:	bne	19a40 <__assert_fail@plt+0x8b10>
   19678:	mov	r3, r0
   1967c:	ldr	sl, [sp, #8]
   19680:	b	19338 <__assert_fail@plt+0x8408>
   19684:	mov	r2, r6
   19688:	mov	r3, #0
   1968c:	mov	lr, #1024	; 0x400
   19690:	cmp	r7, #0
   19694:	strd	r2, [sp]
   19698:	lsr	r3, r6, #22
   1969c:	ldr	r2, [sp]
   196a0:	umull	r0, r1, lr, r7
   196a4:	lsl	r2, r2, #10
   196a8:	bge	196b4 <__assert_fail@plt+0x8784>
   196ac:	subs	r0, r0, ip
   196b0:	sbc	r1, r1, lr
   196b4:	adds	r3, r0, r3
   196b8:	mov	lr, #0
   196bc:	adc	r1, r1, lr
   196c0:	cmp	r1, r3, asr #31
   196c4:	beq	1903c <__assert_fail@plt+0x810c>
   196c8:	lsl	r3, r7, #10
   196cc:	mov	ip, #1
   196d0:	lsl	r2, r6, #10
   196d4:	orr	r3, r3, r6, lsr #22
   196d8:	b	1903c <__assert_fail@plt+0x810c>
   196dc:	umull	r2, r3, r6, lr
   196e0:	cmp	r7, #0
   196e4:	strd	r2, [sp, #8]
   196e8:	umull	r2, r3, lr, r7
   196ec:	bge	196f8 <__assert_fail@plt+0x87c8>
   196f0:	subs	r2, r2, r1
   196f4:	sbc	r3, r3, lr
   196f8:	ldr	r0, [sp, #12]
   196fc:	mov	ip, #0
   19700:	adds	r0, r2, r0
   19704:	adc	ip, r3, ip
   19708:	cmp	ip, r0, asr #31
   1970c:	bne	19a64 <__assert_fail@plt+0x8b34>
   19710:	mov	r3, r0
   19714:	ldr	ip, [sp, #8]
   19718:	b	1927c <__assert_fail@plt+0x834c>
   1971c:	mov	lr, #2
   19720:	mov	r3, #0
   19724:	adds	ip, r6, r6
   19728:	adc	r0, r3, r3
   1972c:	umull	r2, r3, lr, r7
   19730:	cmp	r7, #0
   19734:	strd	r2, [sp]
   19738:	bge	19750 <__assert_fail@plt+0x8820>
   1973c:	subs	r3, r2, r1
   19740:	str	r3, [sp]
   19744:	ldr	r3, [sp, #4]
   19748:	sbc	r3, r3, lr
   1974c:	str	r3, [sp, #4]
   19750:	ldr	r3, [sp]
   19754:	mov	lr, #0
   19758:	adds	r2, r3, r0
   1975c:	ldr	r3, [sp, #4]
   19760:	adc	r3, r3, lr
   19764:	cmp	r3, r2, asr #31
   19768:	bne	19a88 <__assert_fail@plt+0x8b58>
   1976c:	mov	r3, r2
   19770:	b	1900c <__assert_fail@plt+0x80dc>
   19774:	mov	r2, r6
   19778:	mov	r3, #0
   1977c:	mov	lr, #512	; 0x200
   19780:	cmp	r7, #0
   19784:	strd	r2, [sp]
   19788:	lsr	r3, r6, #23
   1978c:	ldr	r2, [sp]
   19790:	umull	r0, r1, lr, r7
   19794:	lsl	r2, r2, #9
   19798:	bge	197a4 <__assert_fail@plt+0x8874>
   1979c:	subs	r0, r0, ip
   197a0:	sbc	r1, r1, lr
   197a4:	adds	r3, r0, r3
   197a8:	mov	lr, #0
   197ac:	adc	r1, r1, lr
   197b0:	cmp	r1, r3, asr #31
   197b4:	lslne	r3, r7, #9
   197b8:	movne	ip, #1
   197bc:	lslne	r2, r6, #9
   197c0:	orrne	r3, r3, r6, lsr #23
   197c4:	b	1903c <__assert_fail@plt+0x810c>
   197c8:	umull	r0, r1, r6, lr
   197cc:	cmp	r3, #0
   197d0:	umull	r2, r3, lr, r3
   197d4:	strd	r0, [sp, #16]
   197d8:	mov	r0, r2
   197dc:	mov	r1, r3
   197e0:	strd	r0, [sp, #8]
   197e4:	bge	197fc <__assert_fail@plt+0x88cc>
   197e8:	subs	r3, r0, ip
   197ec:	str	r3, [sp, #8]
   197f0:	ldr	r3, [sp, #12]
   197f4:	sbc	r3, r3, lr
   197f8:	str	r3, [sp, #12]
   197fc:	ldr	r1, [sp, #8]
   19800:	mov	r2, #0
   19804:	ldr	r3, [sp, #20]
   19808:	adds	r3, r1, r3
   1980c:	ldr	r1, [sp, #12]
   19810:	adc	r2, r1, r2
   19814:	cmp	r2, r3, asr #31
   19818:	bne	199b8 <__assert_fail@plt+0x8a88>
   1981c:	ldr	sl, [sp, #16]
   19820:	b	1909c <__assert_fail@plt+0x816c>
   19824:	cmp	r3, #0
   19828:	umull	r6, r7, sl, lr
   1982c:	umull	r2, r3, lr, r3
   19830:	strd	r2, [sp, #8]
   19834:	strd	r6, [sp, #16]
   19838:	bge	19850 <__assert_fail@plt+0x8920>
   1983c:	subs	r3, r2, ip
   19840:	str	r3, [sp, #8]
   19844:	ldr	r3, [sp, #12]
   19848:	sbc	r3, r3, lr
   1984c:	str	r3, [sp, #12]
   19850:	ldr	r3, [sp, #8]
   19854:	mov	lr, #0
   19858:	ldr	r6, [sp, #20]
   1985c:	adds	r2, r3, r6
   19860:	ldr	r3, [sp, #12]
   19864:	adc	lr, r3, lr
   19868:	cmp	lr, r2, asr #31
   1986c:	bne	19abc <__assert_fail@plt+0x8b8c>
   19870:	ldr	lr, [sp, #16]
   19874:	b	1935c <__assert_fail@plt+0x842c>
   19878:	movw	r3, #45968	; 0xb390
   1987c:	movt	r3, #1
   19880:	movw	r1, #45980	; 0xb39c
   19884:	movt	r1, #1
   19888:	movw	r0, #45996	; 0xb3ac
   1988c:	movt	r0, #1
   19890:	mov	r2, #85	; 0x55
   19894:	bl	10f30 <__assert_fail@plt>
   19898:	ldrd	r2, [sp]
   1989c:	mov	r1, #1
   198a0:	ldr	ip, [sp]
   198a4:	mul	r0, r6, r3
   198a8:	umull	r2, r3, r6, r2
   198ac:	mla	r0, ip, r7, r0
   198b0:	mov	ip, r2
   198b4:	add	r3, r0, r3
   198b8:	b	191dc <__assert_fail@plt+0x82ac>
   198bc:	ldrd	r2, [sp]
   198c0:	mov	ip, #1
   198c4:	ldr	r1, [sp]
   198c8:	mul	r0, r6, r3
   198cc:	umull	r2, r3, r6, r2
   198d0:	mla	r0, r1, r7, r0
   198d4:	mov	sl, r2
   198d8:	add	r3, r0, r3
   198dc:	b	18f34 <__assert_fail@plt+0x8004>
   198e0:	ldrd	r2, [sp]
   198e4:	mov	r1, #1
   198e8:	ldr	ip, [sp]
   198ec:	mul	r0, r6, r3
   198f0:	umull	r2, r3, r6, r2
   198f4:	mla	r0, ip, r7, r0
   198f8:	mov	ip, r2
   198fc:	add	r3, r0, r3
   19900:	b	18e80 <__assert_fail@plt+0x7f50>
   19904:	ldrd	r2, [sp]
   19908:	mov	ip, #1
   1990c:	ldr	r1, [sp]
   19910:	mul	r0, r6, r3
   19914:	umull	r2, r3, r6, r2
   19918:	mla	r0, r1, r7, r0
   1991c:	mov	sl, r2
   19920:	add	r3, r0, r3
   19924:	b	18f10 <__assert_fail@plt+0x7fe0>
   19928:	ldrd	r2, [sp]
   1992c:	mov	ip, #1
   19930:	ldr	r1, [sp]
   19934:	mul	r0, r6, r3
   19938:	umull	r2, r3, r6, r2
   1993c:	mla	r0, r1, r7, r0
   19940:	mov	sl, r2
   19944:	add	r3, r0, r3
   19948:	b	18ec8 <__assert_fail@plt+0x7f98>
   1994c:	ldrd	r2, [sp]
   19950:	mov	ip, #1
   19954:	ldr	r1, [sp]
   19958:	mul	r0, r6, r3
   1995c:	umull	r2, r3, r6, r2
   19960:	mla	r0, r1, r7, r0
   19964:	mov	sl, r2
   19968:	add	r3, r0, r3
   1996c:	b	18eec <__assert_fail@plt+0x7fbc>
   19970:	ldrd	r2, [sp]
   19974:	mov	ip, #1
   19978:	ldr	lr, [sp]
   1997c:	mul	r6, r0, r3
   19980:	umull	r2, r3, r0, r2
   19984:	mla	r6, lr, r1, r6
   19988:	mov	lr, r2
   1998c:	add	r2, r6, r3
   19990:	b	18f58 <__assert_fail@plt+0x8028>
   19994:	ldrd	r2, [sp]
   19998:	mov	r1, #1
   1999c:	ldr	ip, [sp]
   199a0:	mul	r0, r6, r3
   199a4:	umull	r2, r3, r6, r2
   199a8:	mla	r0, ip, r7, r0
   199ac:	mov	ip, r2
   199b0:	add	r3, r0, r3
   199b4:	b	19078 <__assert_fail@plt+0x8148>
   199b8:	ldrd	r2, [sp]
   199bc:	mov	ip, #1
   199c0:	ldr	r1, [sp]
   199c4:	mul	r0, r6, r3
   199c8:	umull	r2, r3, r6, r2
   199cc:	mla	r0, r1, r7, r0
   199d0:	mov	sl, r2
   199d4:	add	r3, r0, r3
   199d8:	b	1909c <__assert_fail@plt+0x816c>
   199dc:	mul	lr, r6, r1
   199e0:	mov	ip, #1
   199e4:	umull	r2, r3, r6, r0
   199e8:	mla	lr, r0, r7, lr
   199ec:	mov	r1, r2
   199f0:	add	lr, lr, r3
   199f4:	b	18fac <__assert_fail@plt+0x807c>
   199f8:	ldrd	r2, [sp]
   199fc:	mov	r1, #1
   19a00:	ldr	ip, [sp]
   19a04:	mul	r0, r6, r3
   19a08:	umull	r2, r3, r6, r2
   19a0c:	mla	r0, ip, r7, r0
   19a10:	mov	ip, r2
   19a14:	add	r3, r0, r3
   19a18:	b	1913c <__assert_fail@plt+0x820c>
   19a1c:	ldrd	r2, [sp]
   19a20:	mov	ip, #1
   19a24:	ldr	r1, [sp]
   19a28:	mul	r0, r6, r3
   19a2c:	umull	r2, r3, r6, r2
   19a30:	mla	r0, r1, r7, r0
   19a34:	mov	sl, r2
   19a38:	add	r3, r0, r3
   19a3c:	b	18ea4 <__assert_fail@plt+0x7f74>
   19a40:	ldrd	r2, [sp]
   19a44:	mov	r1, #1
   19a48:	ldr	ip, [sp]
   19a4c:	mul	r0, r6, r3
   19a50:	umull	r2, r3, r6, r2
   19a54:	mla	r0, ip, r7, r0
   19a58:	mov	sl, r2
   19a5c:	add	r3, r0, r3
   19a60:	b	19338 <__assert_fail@plt+0x8408>
   19a64:	ldrd	r2, [sp]
   19a68:	mov	r1, #1
   19a6c:	ldr	ip, [sp]
   19a70:	mul	r0, r6, r3
   19a74:	umull	r2, r3, r6, r2
   19a78:	mla	r0, ip, r7, r0
   19a7c:	mov	ip, r2
   19a80:	add	r3, r0, r3
   19a84:	b	1927c <__assert_fail@plt+0x834c>
   19a88:	adds	ip, r6, r6
   19a8c:	mov	r1, #1
   19a90:	adc	r3, r7, r7
   19a94:	b	1900c <__assert_fail@plt+0x80dc>
   19a98:	ldrd	r2, [sp]
   19a9c:	mov	r1, #1
   19aa0:	ldr	ip, [sp]
   19aa4:	mul	r0, r6, r3
   19aa8:	umull	r2, r3, r6, r2
   19aac:	mla	r0, ip, r7, r0
   19ab0:	mov	ip, r2
   19ab4:	add	r3, r0, r3
   19ab8:	b	19398 <__assert_fail@plt+0x8468>
   19abc:	ldrd	r2, [sp]
   19ac0:	mov	ip, #1
   19ac4:	ldr	lr, [sp]
   19ac8:	mul	r6, r0, r3
   19acc:	umull	r2, r3, r0, r2
   19ad0:	mla	r6, lr, r1, r6
   19ad4:	mov	lr, r2
   19ad8:	add	r3, r6, r3
   19adc:	mov	r2, r3
   19ae0:	b	1935c <__assert_fail@plt+0x842c>
   19ae4:	cmp	r1, #0
   19ae8:	cmpne	r0, #0
   19aec:	beq	19b38 <__assert_fail@plt+0x8c08>
   19af0:	strd	r4, [sp, #-16]!
   19af4:	umull	r4, r5, r0, r1
   19af8:	str	r6, [sp, #8]
   19afc:	str	lr, [sp, #12]
   19b00:	adds	r3, r5, #0
   19b04:	movne	r3, #1
   19b08:	cmp	r4, #0
   19b0c:	blt	19b18 <__assert_fail@plt+0x8be8>
   19b10:	cmp	r3, #0
   19b14:	beq	19b44 <__assert_fail@plt+0x8c14>
   19b18:	bl	10e4c <__errno_location@plt>
   19b1c:	mov	r3, #12
   19b20:	ldrd	r4, [sp]
   19b24:	ldr	r6, [sp, #8]
   19b28:	add	sp, sp, #12
   19b2c:	str	r3, [r0]
   19b30:	mov	r0, #0
   19b34:	pop	{pc}		; (ldr pc, [sp], #4)
   19b38:	mov	r1, #1
   19b3c:	mov	r0, r1
   19b40:	b	10cc0 <calloc@plt>
   19b44:	ldrd	r4, [sp]
   19b48:	ldr	r6, [sp, #8]
   19b4c:	ldr	lr, [sp, #12]
   19b50:	add	sp, sp, #16
   19b54:	b	10cc0 <calloc@plt>
   19b58:	cmp	r0, #0
   19b5c:	beq	19b68 <__assert_fail@plt+0x8c38>
   19b60:	blt	19b70 <__assert_fail@plt+0x8c40>
   19b64:	b	10de0 <malloc@plt>
   19b68:	mov	r0, #1
   19b6c:	b	10de0 <malloc@plt>
   19b70:	str	r4, [sp, #-8]!
   19b74:	str	lr, [sp, #4]
   19b78:	bl	10e4c <__errno_location@plt>
   19b7c:	mov	r3, #12
   19b80:	ldr	r4, [sp]
   19b84:	add	sp, sp, #4
   19b88:	str	r3, [r0]
   19b8c:	mov	r0, #0
   19b90:	pop	{pc}		; (ldr pc, [sp], #4)
   19b94:	cmp	r0, #0
   19b98:	beq	19bc0 <__assert_fail@plt+0x8c90>
   19b9c:	cmp	r1, #0
   19ba0:	str	r4, [sp, #-8]!
   19ba4:	str	lr, [sp, #4]
   19ba8:	beq	19bc8 <__assert_fail@plt+0x8c98>
   19bac:	blt	19bdc <__assert_fail@plt+0x8cac>
   19bb0:	ldr	r4, [sp]
   19bb4:	ldr	lr, [sp, #4]
   19bb8:	add	sp, sp, #8
   19bbc:	b	10d74 <realloc@plt>
   19bc0:	mov	r0, r1
   19bc4:	b	19b58 <__assert_fail@plt+0x8c28>
   19bc8:	bl	14110 <__assert_fail@plt+0x31e0>
   19bcc:	ldr	r4, [sp]
   19bd0:	add	sp, sp, #4
   19bd4:	mov	r0, #0
   19bd8:	pop	{pc}		; (ldr pc, [sp], #4)
   19bdc:	bl	10e4c <__errno_location@plt>
   19be0:	mov	r3, #12
   19be4:	str	r3, [r0]
   19be8:	b	19bcc <__assert_fail@plt+0x8c9c>
   19bec:	strd	r4, [sp, #-16]!
   19bf0:	mov	r4, r0
   19bf4:	str	r6, [sp, #8]
   19bf8:	str	lr, [sp, #12]
   19bfc:	bl	10dbc <__fpending@plt>
   19c00:	ldr	r5, [r4]
   19c04:	mov	r6, r0
   19c08:	mov	r0, r4
   19c0c:	bl	13ffc <__assert_fail@plt+0x30cc>
   19c10:	mov	r4, r0
   19c14:	and	r5, r5, #32
   19c18:	cmp	r5, #0
   19c1c:	bne	19c54 <__assert_fail@plt+0x8d24>
   19c20:	cmp	r0, #0
   19c24:	beq	19c40 <__assert_fail@plt+0x8d10>
   19c28:	cmp	r6, #0
   19c2c:	bne	19c6c <__assert_fail@plt+0x8d3c>
   19c30:	bl	10e4c <__errno_location@plt>
   19c34:	ldr	r4, [r0]
   19c38:	subs	r4, r4, #9
   19c3c:	mvnne	r4, #0
   19c40:	mov	r0, r4
   19c44:	ldrd	r4, [sp]
   19c48:	ldr	r6, [sp, #8]
   19c4c:	add	sp, sp, #12
   19c50:	pop	{pc}		; (ldr pc, [sp], #4)
   19c54:	cmp	r0, #0
   19c58:	bne	19c6c <__assert_fail@plt+0x8d3c>
   19c5c:	bl	10e4c <__errno_location@plt>
   19c60:	str	r4, [r0]
   19c64:	mvn	r4, #0
   19c68:	b	19c40 <__assert_fail@plt+0x8d10>
   19c6c:	mvn	r4, #0
   19c70:	b	19c40 <__assert_fail@plt+0x8d10>
   19c74:	mov	r0, #14
   19c78:	str	r4, [sp, #-8]!
   19c7c:	str	lr, [sp, #4]
   19c80:	bl	10edc <nl_langinfo@plt>
   19c84:	cmp	r0, #0
   19c88:	beq	19cac <__assert_fail@plt+0x8d7c>
   19c8c:	ldrb	r2, [r0]
   19c90:	movw	r3, #46036	; 0xb3d4
   19c94:	movt	r3, #1
   19c98:	ldr	r4, [sp]
   19c9c:	add	sp, sp, #4
   19ca0:	cmp	r2, #0
   19ca4:	moveq	r0, r3
   19ca8:	pop	{pc}		; (ldr pc, [sp], #4)
   19cac:	ldr	r4, [sp]
   19cb0:	add	sp, sp, #4
   19cb4:	movw	r0, #46036	; 0xb3d4
   19cb8:	movt	r0, #1
   19cbc:	pop	{pc}		; (ldr pc, [sp], #4)
   19cc0:	strd	r4, [sp, #-20]!	; 0xffffffec
   19cc4:	mov	r5, r2
   19cc8:	strd	r6, [sp, #8]
   19ccc:	subs	r6, r0, #0
   19cd0:	mov	r7, r1
   19cd4:	str	lr, [sp, #16]
   19cd8:	sub	sp, sp, #12
   19cdc:	addeq	r6, sp, #4
   19ce0:	mov	r0, r6
   19ce4:	bl	10dc8 <mbrtowc@plt>
   19ce8:	cmp	r5, #0
   19cec:	cmnne	r0, #3
   19cf0:	mov	r4, r0
   19cf4:	bhi	19d10 <__assert_fail@plt+0x8de0>
   19cf8:	mov	r0, r4
   19cfc:	add	sp, sp, #12
   19d00:	ldrd	r4, [sp]
   19d04:	ldrd	r6, [sp, #8]
   19d08:	add	sp, sp, #16
   19d0c:	pop	{pc}		; (ldr pc, [sp], #4)
   19d10:	mov	r0, #0
   19d14:	bl	19d68 <__assert_fail@plt+0x8e38>
   19d18:	cmp	r0, #0
   19d1c:	bne	19cf8 <__assert_fail@plt+0x8dc8>
   19d20:	ldrb	r3, [r7]
   19d24:	mov	r4, #1
   19d28:	str	r3, [r6]
   19d2c:	b	19cf8 <__assert_fail@plt+0x8dc8>
   19d30:	umull	r2, r3, r1, r2
   19d34:	cmp	r3, #0
   19d38:	bne	19d44 <__assert_fail@plt+0x8e14>
   19d3c:	mov	r1, r2
   19d40:	b	19b94 <__assert_fail@plt+0x8c64>
   19d44:	str	r4, [sp, #-8]!
   19d48:	str	lr, [sp, #4]
   19d4c:	bl	10e4c <__errno_location@plt>
   19d50:	mov	r3, #12
   19d54:	ldr	r4, [sp]
   19d58:	add	sp, sp, #4
   19d5c:	str	r3, [r0]
   19d60:	mov	r0, #0
   19d64:	pop	{pc}		; (ldr pc, [sp], #4)
   19d68:	push	{lr}		; (str lr, [sp, #-4]!)
   19d6c:	sub	sp, sp, #268	; 0x10c
   19d70:	movw	r2, #257	; 0x101
   19d74:	add	r1, sp, #4
   19d78:	bl	19dc0 <__assert_fail@plt+0x8e90>
   19d7c:	cmp	r0, #0
   19d80:	movne	r0, #0
   19d84:	bne	19db8 <__assert_fail@plt+0x8e88>
   19d88:	movw	r1, #46044	; 0xb3dc
   19d8c:	movt	r1, #1
   19d90:	add	r0, sp, #4
   19d94:	bl	10ce4 <strcmp@plt>
   19d98:	cmp	r0, #0
   19d9c:	beq	19db8 <__assert_fail@plt+0x8e88>
   19da0:	add	r0, sp, #4
   19da4:	movw	r1, #46048	; 0xb3e0
   19da8:	movt	r1, #1
   19dac:	bl	10ce4 <strcmp@plt>
   19db0:	adds	r0, r0, #0
   19db4:	movne	r0, #1
   19db8:	add	sp, sp, #268	; 0x10c
   19dbc:	pop	{pc}		; (ldr pc, [sp], #4)
   19dc0:	strd	r4, [sp, #-16]!
   19dc4:	mov	r5, r1
   19dc8:	mov	r1, #0
   19dcc:	mov	r4, r2
   19dd0:	str	r6, [sp, #8]
   19dd4:	str	lr, [sp, #12]
   19dd8:	bl	10ec4 <setlocale@plt>
   19ddc:	subs	r6, r0, #0
   19de0:	beq	19e60 <__assert_fail@plt+0x8f30>
   19de4:	bl	10e34 <strlen@plt>
   19de8:	cmp	r4, r0
   19dec:	bhi	19e0c <__assert_fail@plt+0x8edc>
   19df0:	cmp	r4, #0
   19df4:	moveq	r0, #34	; 0x22
   19df8:	bne	19e30 <__assert_fail@plt+0x8f00>
   19dfc:	ldrd	r4, [sp]
   19e00:	ldr	r6, [sp, #8]
   19e04:	add	sp, sp, #12
   19e08:	pop	{pc}		; (ldr pc, [sp], #4)
   19e0c:	add	r2, r0, #1
   19e10:	mov	r1, r6
   19e14:	mov	r0, r5
   19e18:	bl	10d2c <memcpy@plt>
   19e1c:	ldrd	r4, [sp]
   19e20:	mov	r0, #0
   19e24:	ldr	r6, [sp, #8]
   19e28:	add	sp, sp, #12
   19e2c:	pop	{pc}		; (ldr pc, [sp], #4)
   19e30:	sub	r4, r4, #1
   19e34:	mov	r1, r6
   19e38:	mov	r2, r4
   19e3c:	mov	r0, r5
   19e40:	bl	10d2c <memcpy@plt>
   19e44:	mov	r3, #0
   19e48:	mov	r0, #34	; 0x22
   19e4c:	strb	r3, [r5, r4]
   19e50:	ldrd	r4, [sp]
   19e54:	ldr	r6, [sp, #8]
   19e58:	add	sp, sp, #12
   19e5c:	pop	{pc}		; (ldr pc, [sp], #4)
   19e60:	cmp	r4, #0
   19e64:	mov	r0, #22
   19e68:	strbne	r6, [r5]
   19e6c:	ldrd	r4, [sp]
   19e70:	ldr	r6, [sp, #8]
   19e74:	add	sp, sp, #12
   19e78:	pop	{pc}		; (ldr pc, [sp], #4)
   19e7c:	mov	r1, #0
   19e80:	b	10ec4 <setlocale@plt>
   19e84:	cmp	r3, #0
   19e88:	cmpeq	r2, #0
   19e8c:	bne	19eb0 <__assert_fail@plt+0x8f80>
   19e90:	cmp	r1, #0
   19e94:	movlt	r1, #-2147483648	; 0x80000000
   19e98:	movlt	r0, #0
   19e9c:	blt	19eac <__assert_fail@plt+0x8f7c>
   19ea0:	cmpeq	r0, #0
   19ea4:	mvnne	r1, #-2147483648	; 0x80000000
   19ea8:	mvnne	r0, #0
   19eac:	b	19f94 <__assert_fail@plt+0x9064>
   19eb0:	sub	sp, sp, #8
   19eb4:	push	{sp, lr}
   19eb8:	cmp	r1, #0
   19ebc:	blt	19edc <__assert_fail@plt+0x8fac>
   19ec0:	cmp	r3, #0
   19ec4:	blt	19f10 <__assert_fail@plt+0x8fe0>
   19ec8:	bl	19fa4 <__assert_fail@plt+0x9074>
   19ecc:	ldr	lr, [sp, #4]
   19ed0:	add	sp, sp, #8
   19ed4:	pop	{r2, r3}
   19ed8:	bx	lr
   19edc:	rsbs	r0, r0, #0
   19ee0:	sbc	r1, r1, r1, lsl #1
   19ee4:	cmp	r3, #0
   19ee8:	blt	19f34 <__assert_fail@plt+0x9004>
   19eec:	bl	19fa4 <__assert_fail@plt+0x9074>
   19ef0:	ldr	lr, [sp, #4]
   19ef4:	add	sp, sp, #8
   19ef8:	pop	{r2, r3}
   19efc:	rsbs	r0, r0, #0
   19f00:	sbc	r1, r1, r1, lsl #1
   19f04:	rsbs	r2, r2, #0
   19f08:	sbc	r3, r3, r3, lsl #1
   19f0c:	bx	lr
   19f10:	rsbs	r2, r2, #0
   19f14:	sbc	r3, r3, r3, lsl #1
   19f18:	bl	19fa4 <__assert_fail@plt+0x9074>
   19f1c:	ldr	lr, [sp, #4]
   19f20:	add	sp, sp, #8
   19f24:	pop	{r2, r3}
   19f28:	rsbs	r0, r0, #0
   19f2c:	sbc	r1, r1, r1, lsl #1
   19f30:	bx	lr
   19f34:	rsbs	r2, r2, #0
   19f38:	sbc	r3, r3, r3, lsl #1
   19f3c:	bl	19fa4 <__assert_fail@plt+0x9074>
   19f40:	ldr	lr, [sp, #4]
   19f44:	add	sp, sp, #8
   19f48:	pop	{r2, r3}
   19f4c:	rsbs	r2, r2, #0
   19f50:	sbc	r3, r3, r3, lsl #1
   19f54:	bx	lr
   19f58:	cmp	r3, #0
   19f5c:	cmpeq	r2, #0
   19f60:	bne	19f78 <__assert_fail@plt+0x9048>
   19f64:	cmp	r1, #0
   19f68:	cmpeq	r0, #0
   19f6c:	mvnne	r1, #0
   19f70:	mvnne	r0, #0
   19f74:	b	19f94 <__assert_fail@plt+0x9064>
   19f78:	sub	sp, sp, #8
   19f7c:	push	{sp, lr}
   19f80:	bl	19fa4 <__assert_fail@plt+0x9074>
   19f84:	ldr	lr, [sp, #4]
   19f88:	add	sp, sp, #8
   19f8c:	pop	{r2, r3}
   19f90:	bx	lr
   19f94:	push	{r1, lr}
   19f98:	mov	r0, #8
   19f9c:	bl	10cd8 <raise@plt>
   19fa0:	pop	{r1, pc}
   19fa4:	cmp	r1, r3
   19fa8:	cmpeq	r0, r2
   19fac:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19fb0:	mov	r4, r0
   19fb4:	movcc	r0, #0
   19fb8:	mov	r5, r1
   19fbc:	ldr	lr, [sp, #36]	; 0x24
   19fc0:	movcc	r1, r0
   19fc4:	bcc	1a0c0 <__assert_fail@plt+0x9190>
   19fc8:	cmp	r3, #0
   19fcc:	clzeq	ip, r2
   19fd0:	clzne	ip, r3
   19fd4:	addeq	ip, ip, #32
   19fd8:	cmp	r5, #0
   19fdc:	clzeq	r1, r4
   19fe0:	addeq	r1, r1, #32
   19fe4:	clzne	r1, r5
   19fe8:	sub	ip, ip, r1
   19fec:	sub	sl, ip, #32
   19ff0:	lsl	r9, r3, ip
   19ff4:	rsb	fp, ip, #32
   19ff8:	orr	r9, r9, r2, lsl sl
   19ffc:	orr	r9, r9, r2, lsr fp
   1a000:	lsl	r8, r2, ip
   1a004:	cmp	r5, r9
   1a008:	cmpeq	r4, r8
   1a00c:	movcc	r0, #0
   1a010:	movcc	r1, r0
   1a014:	bcc	1a030 <__assert_fail@plt+0x9100>
   1a018:	mov	r0, #1
   1a01c:	subs	r4, r4, r8
   1a020:	lsl	r1, r0, sl
   1a024:	orr	r1, r1, r0, lsr fp
   1a028:	lsl	r0, r0, ip
   1a02c:	sbc	r5, r5, r9
   1a030:	cmp	ip, #0
   1a034:	beq	1a0c0 <__assert_fail@plt+0x9190>
   1a038:	lsr	r6, r8, #1
   1a03c:	orr	r6, r6, r9, lsl #31
   1a040:	lsr	r7, r9, #1
   1a044:	mov	r2, ip
   1a048:	b	1a06c <__assert_fail@plt+0x913c>
   1a04c:	subs	r3, r4, r6
   1a050:	sbc	r8, r5, r7
   1a054:	adds	r3, r3, r3
   1a058:	adc	r8, r8, r8
   1a05c:	adds	r4, r3, #1
   1a060:	adc	r5, r8, #0
   1a064:	subs	r2, r2, #1
   1a068:	beq	1a088 <__assert_fail@plt+0x9158>
   1a06c:	cmp	r5, r7
   1a070:	cmpeq	r4, r6
   1a074:	bcs	1a04c <__assert_fail@plt+0x911c>
   1a078:	adds	r4, r4, r4
   1a07c:	adc	r5, r5, r5
   1a080:	subs	r2, r2, #1
   1a084:	bne	1a06c <__assert_fail@plt+0x913c>
   1a088:	lsr	r3, r4, ip
   1a08c:	orr	r3, r3, r5, lsl fp
   1a090:	lsr	r2, r5, ip
   1a094:	orr	r3, r3, r5, lsr sl
   1a098:	adds	r0, r0, r4
   1a09c:	mov	r4, r3
   1a0a0:	lsl	r3, r2, ip
   1a0a4:	orr	r3, r3, r4, lsl sl
   1a0a8:	lsl	ip, r4, ip
   1a0ac:	orr	r3, r3, r4, lsr fp
   1a0b0:	adc	r1, r1, r5
   1a0b4:	subs	r0, r0, ip
   1a0b8:	mov	r5, r2
   1a0bc:	sbc	r1, r1, r3
   1a0c0:	cmp	lr, #0
   1a0c4:	strdne	r4, [lr]
   1a0c8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a0cc:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1a0d0:	mov	r7, r0
   1a0d4:	ldr	r6, [pc, #72]	; 1a124 <__assert_fail@plt+0x91f4>
   1a0d8:	ldr	r5, [pc, #72]	; 1a128 <__assert_fail@plt+0x91f8>
   1a0dc:	add	r6, pc, r6
   1a0e0:	add	r5, pc, r5
   1a0e4:	sub	r6, r6, r5
   1a0e8:	mov	r8, r1
   1a0ec:	mov	r9, r2
   1a0f0:	bl	10ca0 <calloc@plt-0x20>
   1a0f4:	asrs	r6, r6, #2
   1a0f8:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   1a0fc:	mov	r4, #0
   1a100:	add	r4, r4, #1
   1a104:	ldr	r3, [r5], #4
   1a108:	mov	r2, r9
   1a10c:	mov	r1, r8
   1a110:	mov	r0, r7
   1a114:	blx	r3
   1a118:	cmp	r6, r4
   1a11c:	bne	1a100 <__assert_fail@plt+0x91d0>
   1a120:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1a124:	andeq	r1, r1, r0, lsr lr
   1a128:	andeq	r1, r1, r8, lsr #28
   1a12c:	bx	lr
   1a130:	ldr	r3, [pc, #12]	; 1a144 <__assert_fail@plt+0x9214>
   1a134:	mov	r1, #0
   1a138:	add	r3, pc, r3
   1a13c:	ldr	r2, [r3]
   1a140:	b	10e58 <__cxa_atexit@plt>
   1a144:	andeq	r1, r1, r8, lsr #31

Disassembly of section .fini:

0001a148 <.fini>:
   1a148:	push	{r3, lr}
   1a14c:	pop	{r3, pc}
