
../repos/coreutils/src/tail:     file format elf32-littlearm


Disassembly of section .init:

0001107c <.init>:
   1107c:	push	{r3, lr}
   11080:	bl	14218 <__assert_fail@plt+0x2e04>
   11084:	pop	{r3, pc}

Disassembly of section .plt:

00011088 <fstatfs64@plt-0x14>:
   11088:	push	{lr}		; (str lr, [sp, #-4]!)
   1108c:	ldr	lr, [pc, #4]	; 11098 <fstatfs64@plt-0x4>
   11090:	add	lr, pc, lr
   11094:	ldr	pc, [lr, #8]!
   11098:	andeq	pc, r1, r8, ror #30

0001109c <fstatfs64@plt>:
   1109c:	add	ip, pc, #0, 12
   110a0:	add	ip, ip, #126976	; 0x1f000
   110a4:	ldr	pc, [ip, #3944]!	; 0xf68

000110a8 <calloc@plt>:
   110a8:	add	ip, pc, #0, 12
   110ac:	add	ip, ip, #126976	; 0x1f000
   110b0:	ldr	pc, [ip, #3936]!	; 0xf60

000110b4 <fputs_unlocked@plt>:
   110b4:	add	ip, pc, #0, 12
   110b8:	add	ip, ip, #126976	; 0x1f000
   110bc:	ldr	pc, [ip, #3928]!	; 0xf58

000110c0 <raise@plt>:
   110c0:	add	ip, pc, #0, 12
   110c4:	add	ip, ip, #126976	; 0x1f000
   110c8:	ldr	pc, [ip, #3920]!	; 0xf50

000110cc <strcmp@plt>:
   110cc:	add	ip, pc, #0, 12
   110d0:	add	ip, ip, #126976	; 0x1f000
   110d4:	ldr	pc, [ip, #3912]!	; 0xf48

000110d8 <strtol@plt>:
   110d8:	add	ip, pc, #0, 12
   110dc:	add	ip, ip, #126976	; 0x1f000
   110e0:	ldr	pc, [ip, #3904]!	; 0xf40

000110e4 <pause@plt>:
   110e4:	add	ip, pc, #0, 12
   110e8:	add	ip, ip, #126976	; 0x1f000
   110ec:	ldr	pc, [ip, #3896]!	; 0xf38

000110f0 <read@plt>:
   110f0:	add	ip, pc, #0, 12
   110f4:	add	ip, ip, #126976	; 0x1f000
   110f8:	ldr	pc, [ip, #3888]!	; 0xf30

000110fc <fflush@plt>:
   110fc:	add	ip, pc, #0, 12
   11100:	add	ip, ip, #126976	; 0x1f000
   11104:	ldr	pc, [ip, #3880]!	; 0xf28

00011108 <free@plt>:
   11108:	add	ip, pc, #0, 12
   1110c:	add	ip, ip, #126976	; 0x1f000
   11110:	ldr	pc, [ip, #3872]!	; 0xf20

00011114 <nanosleep@plt>:
   11114:	add	ip, pc, #0, 12
   11118:	add	ip, ip, #126976	; 0x1f000
   1111c:	ldr	pc, [ip, #3864]!	; 0xf18

00011120 <_exit@plt>:
   11120:	add	ip, pc, #0, 12
   11124:	add	ip, ip, #126976	; 0x1f000
   11128:	ldr	pc, [ip, #3856]!	; 0xf10

0001112c <memcpy@plt>:
   1112c:	add	ip, pc, #0, 12
   11130:	add	ip, ip, #126976	; 0x1f000
   11134:	ldr	pc, [ip, #3848]!	; 0xf08

00011138 <__strtoull_internal@plt>:
   11138:	add	ip, pc, #0, 12
   1113c:	add	ip, ip, #126976	; 0x1f000
   11140:	ldr	pc, [ip, #3840]!	; 0xf00

00011144 <mbsinit@plt>:
   11144:	add	ip, pc, #0, 12
   11148:	add	ip, ip, #126976	; 0x1f000
   1114c:	ldr	pc, [ip, #3832]!	; 0xef8

00011150 <fwrite_unlocked@plt>:
   11150:	add	ip, pc, #0, 12
   11154:	add	ip, ip, #126976	; 0x1f000
   11158:	ldr	pc, [ip, #3824]!	; 0xef0

0001115c <memcmp@plt>:
   1115c:	add	ip, pc, #0, 12
   11160:	add	ip, ip, #126976	; 0x1f000
   11164:	ldr	pc, [ip, #3816]!	; 0xee8

00011168 <fputc_unlocked@plt>:
   11168:	add	ip, pc, #0, 12
   1116c:	add	ip, ip, #126976	; 0x1f000
   11170:	ldr	pc, [ip, #3808]!	; 0xee0

00011174 <dcgettext@plt>:
   11174:	add	ip, pc, #0, 12
   11178:	add	ip, ip, #126976	; 0x1f000
   1117c:	ldr	pc, [ip, #3800]!	; 0xed8

00011180 <realloc@plt>:
   11180:	add	ip, pc, #0, 12
   11184:	add	ip, ip, #126976	; 0x1f000
   11188:	ldr	pc, [ip, #3792]!	; 0xed0

0001118c <textdomain@plt>:
   1118c:	add	ip, pc, #0, 12
   11190:	add	ip, ip, #126976	; 0x1f000
   11194:	ldr	pc, [ip, #3784]!	; 0xec8

00011198 <rawmemchr@plt>:
   11198:	add	ip, pc, #0, 12
   1119c:	add	ip, ip, #126976	; 0x1f000
   111a0:	ldr	pc, [ip, #3776]!	; 0xec0

000111a4 <fflush_unlocked@plt>:
   111a4:	add	ip, pc, #0, 12
   111a8:	add	ip, ip, #126976	; 0x1f000
   111ac:	ldr	pc, [ip, #3768]!	; 0xeb8

000111b0 <iswprint@plt>:
   111b0:	add	ip, pc, #0, 12
   111b4:	add	ip, ip, #126976	; 0x1f000
   111b8:	ldr	pc, [ip, #3760]!	; 0xeb0

000111bc <poll@plt>:
   111bc:	add	ip, pc, #0, 12
   111c0:	add	ip, ip, #126976	; 0x1f000
   111c4:	ldr	pc, [ip, #3752]!	; 0xea8

000111c8 <__fxstat64@plt>:
   111c8:	add	ip, pc, #0, 12
   111cc:	add	ip, ip, #126976	; 0x1f000
   111d0:	ldr	pc, [ip, #3744]!	; 0xea0

000111d4 <__poll_chk@plt>:
   111d4:	add	ip, pc, #0, 12
   111d8:	add	ip, ip, #126976	; 0x1f000
   111dc:	ldr	pc, [ip, #3736]!	; 0xe98

000111e0 <fwrite@plt>:
   111e0:	add	ip, pc, #0, 12
   111e4:	add	ip, ip, #126976	; 0x1f000
   111e8:	ldr	pc, [ip, #3728]!	; 0xe90

000111ec <lseek64@plt>:
   111ec:	add	ip, pc, #0, 12
   111f0:	add	ip, ip, #126976	; 0x1f000
   111f4:	ldr	pc, [ip, #3720]!	; 0xe88

000111f8 <__ctype_get_mb_cur_max@plt>:
   111f8:	add	ip, pc, #0, 12
   111fc:	add	ip, ip, #126976	; 0x1f000
   11200:	ldr	pc, [ip, #3712]!	; 0xe80

00011204 <__fpending@plt>:
   11204:	add	ip, pc, #0, 12
   11208:	add	ip, ip, #126976	; 0x1f000
   1120c:	ldr	pc, [ip, #3704]!	; 0xe78

00011210 <mbrtowc@plt>:
   11210:	add	ip, pc, #0, 12
   11214:	add	ip, ip, #126976	; 0x1f000
   11218:	ldr	pc, [ip, #3696]!	; 0xe70

0001121c <error@plt>:
   1121c:	add	ip, pc, #0, 12
   11220:	add	ip, ip, #126976	; 0x1f000
   11224:	ldr	pc, [ip, #3688]!	; 0xe68

00011228 <open64@plt>:
   11228:	add	ip, pc, #0, 12
   1122c:	add	ip, ip, #126976	; 0x1f000
   11230:	ldr	pc, [ip, #3680]!	; 0xe60

00011234 <getenv@plt>:
   11234:	add	ip, pc, #0, 12
   11238:	add	ip, ip, #126976	; 0x1f000
   1123c:	ldr	pc, [ip, #3672]!	; 0xe58

00011240 <malloc@plt>:
   11240:	add	ip, pc, #0, 12
   11244:	add	ip, ip, #126976	; 0x1f000
   11248:	ldr	pc, [ip, #3664]!	; 0xe50

0001124c <__libc_start_main@plt>:
   1124c:	add	ip, pc, #0, 12
   11250:	add	ip, ip, #126976	; 0x1f000
   11254:	ldr	pc, [ip, #3656]!	; 0xe48

00011258 <__freading@plt>:
   11258:	add	ip, pc, #0, 12
   1125c:	add	ip, ip, #126976	; 0x1f000
   11260:	ldr	pc, [ip, #3648]!	; 0xe40

00011264 <__gmon_start__@plt>:
   11264:	add	ip, pc, #0, 12
   11268:	add	ip, ip, #126976	; 0x1f000
   1126c:	ldr	pc, [ip, #3640]!	; 0xe38

00011270 <getopt_long@plt>:
   11270:	add	ip, pc, #0, 12
   11274:	add	ip, ip, #126976	; 0x1f000
   11278:	ldr	pc, [ip, #3632]!	; 0xe30

0001127c <kill@plt>:
   1127c:	add	ip, pc, #0, 12
   11280:	add	ip, ip, #126976	; 0x1f000
   11284:	ldr	pc, [ip, #3624]!	; 0xe28

00011288 <__ctype_b_loc@plt>:
   11288:	add	ip, pc, #0, 12
   1128c:	add	ip, ip, #126976	; 0x1f000
   11290:	ldr	pc, [ip, #3616]!	; 0xe20

00011294 <exit@plt>:
   11294:	add	ip, pc, #0, 12
   11298:	add	ip, ip, #126976	; 0x1f000
   1129c:	ldr	pc, [ip, #3608]!	; 0xe18

000112a0 <strlen@plt>:
   112a0:	add	ip, pc, #0, 12
   112a4:	add	ip, ip, #126976	; 0x1f000
   112a8:	ldr	pc, [ip, #3600]!	; 0xe10

000112ac <inotify_init@plt>:
   112ac:	add	ip, pc, #0, 12
   112b0:	add	ip, ip, #126976	; 0x1f000
   112b4:	ldr	pc, [ip, #3592]!	; 0xe08

000112b8 <strchr@plt>:
   112b8:	add	ip, pc, #0, 12
   112bc:	add	ip, ip, #126976	; 0x1f000
   112c0:	ldr	pc, [ip, #3584]!	; 0xe00

000112c4 <memrchr@plt>:
   112c4:	add	ip, pc, #0, 12
   112c8:	add	ip, ip, #126976	; 0x1f000
   112cc:	ldr	pc, [ip, #3576]!	; 0xdf8

000112d0 <inotify_add_watch@plt>:
   112d0:	add	ip, pc, #0, 12
   112d4:	add	ip, ip, #126976	; 0x1f000
   112d8:	ldr	pc, [ip, #3568]!	; 0xdf0

000112dc <__errno_location@plt>:
   112dc:	add	ip, pc, #0, 12
   112e0:	add	ip, ip, #126976	; 0x1f000
   112e4:	ldr	pc, [ip, #3560]!	; 0xde8

000112e8 <__cxa_atexit@plt>:
   112e8:	add	ip, pc, #0, 12
   112ec:	add	ip, ip, #126976	; 0x1f000
   112f0:	ldr	pc, [ip, #3552]!	; 0xde0

000112f4 <memset@plt>:
   112f4:	add	ip, pc, #0, 12
   112f8:	add	ip, ip, #126976	; 0x1f000
   112fc:	ldr	pc, [ip, #3544]!	; 0xdd8

00011300 <__printf_chk@plt>:
   11300:	add	ip, pc, #0, 12
   11304:	add	ip, ip, #126976	; 0x1f000
   11308:	ldr	pc, [ip, #3536]!	; 0xdd0

0001130c <strtod@plt>:
   1130c:	add	ip, pc, #0, 12
   11310:	add	ip, ip, #126976	; 0x1f000
   11314:	ldr	pc, [ip, #3528]!	; 0xdc8

00011318 <fileno@plt>:
   11318:	add	ip, pc, #0, 12
   1131c:	add	ip, ip, #126976	; 0x1f000
   11320:	ldr	pc, [ip, #3520]!	; 0xdc0

00011324 <__fprintf_chk@plt>:
   11324:	add	ip, pc, #0, 12
   11328:	add	ip, ip, #126976	; 0x1f000
   1132c:	ldr	pc, [ip, #3512]!	; 0xdb8

00011330 <memchr@plt>:
   11330:	add	ip, pc, #0, 12
   11334:	add	ip, ip, #126976	; 0x1f000
   11338:	ldr	pc, [ip, #3504]!	; 0xdb0

0001133c <fclose@plt>:
   1133c:	add	ip, pc, #0, 12
   11340:	add	ip, ip, #126976	; 0x1f000
   11344:	ldr	pc, [ip, #3496]!	; 0xda8

00011348 <fseeko64@plt>:
   11348:	add	ip, pc, #0, 12
   1134c:	add	ip, ip, #126976	; 0x1f000
   11350:	ldr	pc, [ip, #3488]!	; 0xda0

00011354 <strtod_l@plt>:
   11354:	add	ip, pc, #0, 12
   11358:	add	ip, ip, #126976	; 0x1f000
   1135c:	ldr	pc, [ip, #3480]!	; 0xd98

00011360 <fcntl64@plt>:
   11360:	add	ip, pc, #0, 12
   11364:	add	ip, ip, #126976	; 0x1f000
   11368:	ldr	pc, [ip, #3472]!	; 0xd90

0001136c <__overflow@plt>:
   1136c:	add	ip, pc, #0, 12
   11370:	add	ip, ip, #126976	; 0x1f000
   11374:	ldr	pc, [ip, #3464]!	; 0xd88

00011378 <setlocale@plt>:
   11378:	add	ip, pc, #0, 12
   1137c:	add	ip, ip, #126976	; 0x1f000
   11380:	ldr	pc, [ip, #3456]!	; 0xd80

00011384 <strrchr@plt>:
   11384:	add	ip, pc, #0, 12
   11388:	add	ip, ip, #126976	; 0x1f000
   1138c:	ldr	pc, [ip, #3448]!	; 0xd78

00011390 <nl_langinfo@plt>:
   11390:	add	ip, pc, #0, 12
   11394:	add	ip, ip, #126976	; 0x1f000
   11398:	ldr	pc, [ip, #3440]!	; 0xd70

0001139c <newlocale@plt>:
   1139c:	add	ip, pc, #0, 12
   113a0:	add	ip, ip, #126976	; 0x1f000
   113a4:	ldr	pc, [ip, #3432]!	; 0xd68

000113a8 <clearerr_unlocked@plt>:
   113a8:	add	ip, pc, #0, 12
   113ac:	add	ip, ip, #126976	; 0x1f000
   113b0:	ldr	pc, [ip, #3424]!	; 0xd60

000113b4 <bindtextdomain@plt>:
   113b4:	add	ip, pc, #0, 12
   113b8:	add	ip, ip, #126976	; 0x1f000
   113bc:	ldr	pc, [ip, #3416]!	; 0xd58

000113c0 <__xstat64@plt>:
   113c0:	add	ip, pc, #0, 12
   113c4:	add	ip, ip, #126976	; 0x1f000
   113c8:	ldr	pc, [ip, #3408]!	; 0xd50

000113cc <isatty@plt>:
   113cc:	add	ip, pc, #0, 12
   113d0:	add	ip, ip, #126976	; 0x1f000
   113d4:	ldr	pc, [ip, #3400]!	; 0xd48

000113d8 <inotify_rm_watch@plt>:
   113d8:	add	ip, pc, #0, 12
   113dc:	add	ip, ip, #126976	; 0x1f000
   113e0:	ldr	pc, [ip, #3392]!	; 0xd40

000113e4 <strncmp@plt>:
   113e4:	add	ip, pc, #0, 12
   113e8:	add	ip, ip, #126976	; 0x1f000
   113ec:	ldr	pc, [ip, #3384]!	; 0xd38

000113f0 <abort@plt>:
   113f0:	add	ip, pc, #0, 12
   113f4:	add	ip, ip, #126976	; 0x1f000
   113f8:	ldr	pc, [ip, #3376]!	; 0xd30

000113fc <close@plt>:
   113fc:	add	ip, pc, #0, 12
   11400:	add	ip, ip, #126976	; 0x1f000
   11404:	ldr	pc, [ip, #3368]!	; 0xd28

00011408 <__lxstat64@plt>:
   11408:	add	ip, pc, #0, 12
   1140c:	add	ip, ip, #126976	; 0x1f000
   11410:	ldr	pc, [ip, #3360]!	; 0xd20

00011414 <__assert_fail@plt>:
   11414:	add	ip, pc, #0, 12
   11418:	add	ip, ip, #126976	; 0x1f000
   1141c:	ldr	pc, [ip, #3352]!	; 0xd18

Disassembly of section .text:

00011420 <.text>:
   11420:	mov	r2, #10
   11424:	mov	r3, #0
   11428:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1142c:	mov	r5, r0
   11430:	ldr	r0, [r1]
   11434:	strd	r6, [sp, #8]
   11438:	mov	r6, r1
   1143c:	strd	r8, [sp, #16]
   11440:	strd	sl, [sp, #24]
   11444:	movw	fp, #4560	; 0x11d0
   11448:	movt	fp, #3
   1144c:	str	lr, [sp, #32]
   11450:	vpush	{d8-d10}
   11454:	sub	sp, sp, #364	; 0x16c
   11458:	strd	r2, [sp, #120]	; 0x78
   1145c:	bl	18ebc <__assert_fail@plt+0x7aa8>
   11460:	movw	r1, #65356	; 0xff4c
   11464:	movt	r1, #1
   11468:	mov	r0, #6
   1146c:	bl	11378 <setlocale@plt>
   11470:	movw	r1, #504	; 0x1f8
   11474:	movt	r1, #2
   11478:	movw	r0, #332	; 0x14c
   1147c:	movt	r0, #2
   11480:	bl	113b4 <bindtextdomain@plt>
   11484:	movw	r0, #332	; 0x14c
   11488:	movt	r0, #2
   1148c:	bl	1118c <textdomain@plt>
   11490:	movw	r0, #28992	; 0x7140
   11494:	movt	r0, #1
   11498:	bl	1f2d4 <__assert_fail@plt+0xdec0>
   1149c:	mov	r3, #0
   114a0:	mov	r2, #1
   114a4:	mov	r1, #10
   114a8:	cmp	r5, #2
   114ac:	strb	r1, [fp]
   114b0:	strb	r3, [fp, #1]
   114b4:	strb	r3, [fp, #4]
   114b8:	strb	r2, [fp, #5]
   114bc:	strb	r3, [fp, #6]
   114c0:	strb	r3, [fp, #7]
   114c4:	beq	114f0 <__assert_fail@plt+0xdc>
   114c8:	cmp	r5, #3
   114cc:	beq	11a20 <__assert_fail@plt+0x60c>
   114d0:	cmp	r5, #4
   114d4:	bne	11510 <__assert_fail@plt+0xfc>
   114d8:	movw	r1, #528	; 0x210
   114dc:	movt	r1, #2
   114e0:	ldr	r0, [r6, #8]
   114e4:	bl	110cc <strcmp@plt>
   114e8:	cmp	r0, #0
   114ec:	bne	11510 <__assert_fail@plt+0xfc>
   114f0:	bl	18e58 <__assert_fail@plt+0x7a44>
   114f4:	ldr	r2, [r6, #4]
   114f8:	mov	ip, r2
   114fc:	ldrb	r3, [ip], #1
   11500:	cmp	r3, #43	; 0x2b
   11504:	beq	11a04 <__assert_fail@plt+0x5f0>
   11508:	cmp	r3, #45	; 0x2d
   1150c:	beq	11924 <__assert_fail@plt+0x510>
   11510:	mov	r3, #0
   11514:	ldr	r7, [pc, #1020]	; 11918 <__assert_fail@plt+0x504>
   11518:	add	r6, r6, r3, lsl #2
   1151c:	mov	r9, #0
   11520:	sub	r5, r5, r3
   11524:	vldr	d8, [pc, #996]	; 11910 <__assert_fail@plt+0x4fc>
   11528:	str	r9, [sp, #28]
   1152c:	sub	sl, r7, #20
   11530:	mov	r4, #0
   11534:	movw	r2, #840	; 0x348
   11538:	movt	r2, #2
   1153c:	mov	r3, r7
   11540:	mov	r1, r6
   11544:	mov	r0, r5
   11548:	str	r4, [sp]
   1154c:	bl	11270 <getopt_long@plt>
   11550:	cmn	r0, #1
   11554:	beq	11a50 <__assert_fail@plt+0x63c>
   11558:	cmp	r0, #113	; 0x71
   1155c:	beq	11888 <__assert_fail@plt+0x474>
   11560:	ble	11590 <__assert_fail@plt+0x17c>
   11564:	movw	r3, #257	; 0x101
   11568:	cmp	r0, r3
   1156c:	beq	11828 <__assert_fail@plt+0x414>
   11570:	bgt	117dc <__assert_fail@plt+0x3c8>
   11574:	cmp	r0, #118	; 0x76
   11578:	beq	1181c <__assert_fail@plt+0x408>
   1157c:	ble	116c4 <__assert_fail@plt+0x2b0>
   11580:	cmp	r0, #122	; 0x7a
   11584:	bne	115c8 <__assert_fail@plt+0x1b4>
   11588:	strb	r4, [fp]
   1158c:	b	11530 <__assert_fail@plt+0x11c>
   11590:	cmp	r0, #57	; 0x39
   11594:	ble	1164c <__assert_fail@plt+0x238>
   11598:	cmp	r0, #99	; 0x63
   1159c:	beq	11740 <__assert_fail@plt+0x32c>
   115a0:	bgt	115dc <__assert_fail@plt+0x1c8>
   115a4:	cmp	r0, #70	; 0x46
   115a8:	bne	136bc <__assert_fail@plt+0x22a8>
   115ac:	mov	r3, #1
   115b0:	movw	r2, #4424	; 0x1148
   115b4:	movt	r2, #3
   115b8:	strb	r3, [fp, #2]
   115bc:	str	r3, [r2, #4]
   115c0:	strb	r3, [fp, #7]
   115c4:	b	11530 <__assert_fail@plt+0x11c>
   115c8:	cmp	r0, #256	; 0x100
   115cc:	bne	136bc <__assert_fail@plt+0x22a8>
   115d0:	mov	r3, #1
   115d4:	strb	r3, [fp, #2]
   115d8:	b	11530 <__assert_fail@plt+0x11c>
   115dc:	cmp	r0, #102	; 0x66
   115e0:	bne	11738 <__assert_fail@plt+0x324>
   115e4:	movw	r3, #4552	; 0x11c8
   115e8:	movt	r3, #3
   115ec:	ldr	r1, [r3]
   115f0:	mov	r3, #1
   115f4:	strb	r3, [fp, #7]
   115f8:	cmp	r1, #0
   115fc:	beq	118f8 <__assert_fail@plt+0x4e4>
   11600:	movw	r0, #4452	; 0x1164
   11604:	movt	r0, #3
   11608:	str	r3, [sp, #8]
   1160c:	ldr	ip, [r0]
   11610:	mov	r3, #4
   11614:	movw	r0, #624	; 0x270
   11618:	movt	r0, #2
   1161c:	ldr	r2, [pc, #760]	; 1191c <__assert_fail@plt+0x508>
   11620:	stm	sp, {r3, ip}
   11624:	mov	r3, sl
   11628:	bl	16e1c <__assert_fail@plt+0x5a08>
   1162c:	movw	r3, #62200	; 0xf2f8
   11630:	movt	r3, #1
   11634:	add	r0, r3, r0, lsl #2
   11638:	movw	r3, #4424	; 0x1148
   1163c:	movt	r3, #3
   11640:	ldr	r2, [r0, #64]	; 0x40
   11644:	str	r2, [r3, #4]
   11648:	b	11530 <__assert_fail@plt+0x11c>
   1164c:	cmp	r0, #48	; 0x30
   11650:	mov	r3, r0
   11654:	bge	13690 <__assert_fail@plt+0x227c>
   11658:	cmn	r0, #3
   1165c:	bne	1180c <__assert_fail@plt+0x3f8>
   11660:	movw	r2, #736	; 0x2e0
   11664:	movt	r2, #2
   11668:	movw	r3, #752	; 0x2f0
   1166c:	movt	r3, #2
   11670:	movw	r1, #772	; 0x304
   11674:	movt	r1, #2
   11678:	str	r4, [sp, #16]
   1167c:	movw	r0, #4548	; 0x11c4
   11680:	movt	r0, #3
   11684:	str	r2, [sp, #12]
   11688:	movw	r2, #788	; 0x314
   1168c:	movt	r2, #2
   11690:	stmib	sp, {r1, r3}
   11694:	movw	r3, #4448	; 0x1160
   11698:	movt	r3, #3
   1169c:	movw	r1, #63140	; 0xf6a4
   116a0:	movt	r1, #1
   116a4:	str	r2, [sp]
   116a8:	movw	r2, #328	; 0x148
   116ac:	movt	r2, #2
   116b0:	ldr	r0, [r0]
   116b4:	ldr	r3, [r3]
   116b8:	bl	1cfd0 <__assert_fail@plt+0xbbbc>
   116bc:	mov	r0, r4
   116c0:	bl	11294 <exit@plt>
   116c4:	cmp	r0, #115	; 0x73
   116c8:	bne	136bc <__assert_fail@plt+0x22a8>
   116cc:	movw	r8, #4552	; 0x11c8
   116d0:	movt	r8, #3
   116d4:	mov	r1, r4
   116d8:	movw	r3, #28816	; 0x7090
   116dc:	movt	r3, #1
   116e0:	add	r2, sp, #256	; 0x100
   116e4:	ldr	r0, [r8]
   116e8:	bl	1db18 <__assert_fail@plt+0xc704>
   116ec:	cmp	r0, #0
   116f0:	beq	11704 <__assert_fail@plt+0x2f0>
   116f4:	vldr	d8, [sp, #256]	; 0x100
   116f8:	vcmpe.f64	d8, #0.0
   116fc:	vmrs	APSR_nzcv, fpscr
   11700:	bge	11530 <__assert_fail@plt+0x11c>
   11704:	mov	r2, #5
   11708:	movw	r1, #704	; 0x2c0
   1170c:	movt	r1, #2
   11710:	mov	r0, #0
   11714:	bl	11174 <dcgettext@plt>
   11718:	mov	r4, r0
   1171c:	ldr	r0, [r8]
   11720:	bl	1c82c <__assert_fail@plt+0xb418>
   11724:	mov	r3, r0
   11728:	mov	r2, r4
   1172c:	mov	r1, #0
   11730:	mov	r0, #1
   11734:	bl	1121c <error@plt>
   11738:	cmp	r0, #110	; 0x6e
   1173c:	bne	136bc <__assert_fail@plt+0x22a8>
   11740:	movw	r8, #4552	; 0x11c8
   11744:	movt	r8, #3
   11748:	sub	r2, r0, #110	; 0x6e
   1174c:	ldr	r3, [r8]
   11750:	clz	r2, r2
   11754:	lsr	r2, r2, #5
   11758:	strb	r2, [fp, #5]
   1175c:	ldrb	r2, [r3]
   11760:	cmp	r2, #43	; 0x2b
   11764:	moveq	r3, #1
   11768:	strbeq	r3, [fp, #6]
   1176c:	beq	1177c <__assert_fail@plt+0x368>
   11770:	cmp	r2, #45	; 0x2d
   11774:	addeq	r3, r3, #1
   11778:	streq	r3, [r8]
   1177c:	cmp	r0, #110	; 0x6e
   11780:	ldr	r4, [r8]
   11784:	mov	r2, #5
   11788:	movweq	r1, #560	; 0x230
   1178c:	movwne	r1, #584	; 0x248
   11790:	movteq	r1, #2
   11794:	movtne	r1, #2
   11798:	mov	r0, #0
   1179c:	bl	11174 <dcgettext@plt>
   117a0:	mov	ip, #0
   117a4:	mvn	r2, #0
   117a8:	str	r0, [sp, #12]
   117ac:	mvn	r3, #0
   117b0:	movw	r1, #608	; 0x260
   117b4:	movt	r1, #2
   117b8:	mov	r0, r4
   117bc:	strd	r2, [sp]
   117c0:	mov	r2, #0
   117c4:	mov	r3, #0
   117c8:	str	r1, [sp, #8]
   117cc:	str	ip, [sp, #16]
   117d0:	bl	1d920 <__assert_fail@plt+0xc50c>
   117d4:	strd	r0, [sp, #120]	; 0x78
   117d8:	b	11530 <__assert_fail@plt+0x11c>
   117dc:	movw	r3, #259	; 0x103
   117e0:	cmp	r0, r3
   117e4:	beq	118ec <__assert_fail@plt+0x4d8>
   117e8:	blt	11894 <__assert_fail@plt+0x480>
   117ec:	cmp	r0, #260	; 0x104
   117f0:	beq	115e4 <__assert_fail@plt+0x1d0>
   117f4:	movw	r3, #261	; 0x105
   117f8:	cmp	r0, r3
   117fc:	bne	136bc <__assert_fail@plt+0x22a8>
   11800:	mov	r3, #1
   11804:	strb	r3, [fp, #3]
   11808:	b	11530 <__assert_fail@plt+0x11c>
   1180c:	cmn	r0, #2
   11810:	bne	136bc <__assert_fail@plt+0x22a8>
   11814:	mov	r0, r4
   11818:	bl	16634 <__assert_fail@plt+0x5220>
   1181c:	mov	r3, #1
   11820:	str	r3, [sp, #28]
   11824:	b	11530 <__assert_fail@plt+0x11c>
   11828:	movw	r3, #4552	; 0x11c8
   1182c:	movt	r3, #3
   11830:	ldr	r8, [r3]
   11834:	mov	r2, #5
   11838:	movw	r1, #636	; 0x27c
   1183c:	movt	r1, #2
   11840:	mov	r0, r4
   11844:	bl	11174 <dcgettext@plt>
   11848:	mvn	r9, #0
   1184c:	movw	r1, #65356	; 0xff4c
   11850:	movt	r1, #1
   11854:	mov	r3, #0
   11858:	mov	r2, #0
   1185c:	str	r0, [sp, #12]
   11860:	mov	r0, r8
   11864:	mvn	r8, #0
   11868:	strd	r8, [sp]
   1186c:	str	r1, [sp, #8]
   11870:	str	r4, [sp, #16]
   11874:	bl	1d920 <__assert_fail@plt+0xc50c>
   11878:	movw	r3, #4424	; 0x1148
   1187c:	movt	r3, #3
   11880:	strd	r0, [r3, #16]
   11884:	b	11530 <__assert_fail@plt+0x11c>
   11888:	mov	r3, #2
   1188c:	str	r3, [sp, #28]
   11890:	b	11530 <__assert_fail@plt+0x11c>
   11894:	movw	r3, #4552	; 0x11c8
   11898:	movt	r3, #3
   1189c:	ldr	r8, [r3]
   118a0:	mov	r2, #5
   118a4:	movw	r1, #692	; 0x2b4
   118a8:	movt	r1, #2
   118ac:	mov	r0, r4
   118b0:	bl	11174 <dcgettext@plt>
   118b4:	mov	r9, #0
   118b8:	movw	r1, #65356	; 0xff4c
   118bc:	movt	r1, #1
   118c0:	mov	r2, #0
   118c4:	mov	r3, #0
   118c8:	str	r0, [sp, #12]
   118cc:	mov	r0, r8
   118d0:	mvn	r8, #-2147483648	; 0x80000000
   118d4:	strd	r8, [sp]
   118d8:	str	r1, [sp, #8]
   118dc:	str	r4, [sp, #16]
   118e0:	bl	1d920 <__assert_fail@plt+0xc50c>
   118e4:	str	r0, [fp, #8]
   118e8:	b	11530 <__assert_fail@plt+0x11c>
   118ec:	mov	r3, #1
   118f0:	strb	r3, [fp, #12]
   118f4:	b	11530 <__assert_fail@plt+0x11c>
   118f8:	movw	r3, #4424	; 0x1148
   118fc:	movt	r3, #3
   11900:	mov	r2, #2
   11904:	str	r2, [r3, #4]
   11908:	b	11530 <__assert_fail@plt+0x11c>
   1190c:	nop	{0}
   11910:	andeq	r0, r0, r0
   11914:	svccc	0x00f00000	; IMB
   11918:	andeq	pc, r1, ip, asr #6
   1191c:	andeq	pc, r1, r0, asr #6
   11920:	andeq	r1, r3, r0, asr r1
   11924:	movw	r3, #3503	; 0xdaf
   11928:	movt	r3, #3
   1192c:	cmp	r0, r3
   11930:	ldrb	r3, [r2, #1]
   11934:	ble	11950 <__assert_fail@plt+0x53c>
   11938:	sub	r2, r3, #99	; 0x63
   1193c:	clz	r2, r2
   11940:	lsr	r2, r2, #5
   11944:	ldrb	r2, [ip, r2]
   11948:	cmp	r2, #0
   1194c:	beq	11510 <__assert_fail@plt+0xfc>
   11950:	mov	r9, #0
   11954:	sub	r2, r3, #48	; 0x30
   11958:	cmp	r2, #9
   1195c:	mov	r2, ip
   11960:	bhi	11974 <__assert_fail@plt+0x560>
   11964:	ldrb	r3, [r2, #1]!
   11968:	sub	r1, r3, #48	; 0x30
   1196c:	cmp	r1, #9
   11970:	bls	11964 <__assert_fail@plt+0x550>
   11974:	cmp	r3, #99	; 0x63
   11978:	beq	126cc <__assert_fail@plt+0x12b8>
   1197c:	cmp	r3, #108	; 0x6c
   11980:	beq	11a40 <__assert_fail@plt+0x62c>
   11984:	cmp	r3, #98	; 0x62
   11988:	moveq	r7, #0
   1198c:	moveq	r1, #5120	; 0x1400
   11990:	beq	11a48 <__assert_fail@plt+0x634>
   11994:	mov	r3, r2
   11998:	mov	r7, #1
   1199c:	mov	r1, #10
   119a0:	ldrb	r0, [r3]
   119a4:	cmp	r0, #102	; 0x66
   119a8:	addeq	r3, r3, #1
   119ac:	moveq	r8, #1
   119b0:	ldrb	r4, [r3]
   119b4:	movne	r8, #0
   119b8:	cmp	r4, #0
   119bc:	bne	11510 <__assert_fail@plt+0xfc>
   119c0:	cmp	ip, r2
   119c4:	beq	11ed8 <__assert_fail@plt+0xac4>
   119c8:	movw	r1, #532	; 0x214
   119cc:	movt	r1, #2
   119d0:	add	r3, sp, #120	; 0x78
   119d4:	mov	r0, ip
   119d8:	mov	r2, #10
   119dc:	str	r1, [sp]
   119e0:	mov	r1, r4
   119e4:	bl	1dbdc <__assert_fail@plt+0xc7c8>
   119e8:	bics	r3, r0, #2
   119ec:	bne	139c0 <__assert_fail@plt+0x25ac>
   119f0:	mov	r3, #1
   119f4:	strb	r7, [fp, #5]
   119f8:	strb	r9, [fp, #6]
   119fc:	strb	r8, [fp, #7]
   11a00:	b	11514 <__assert_fail@plt+0x100>
   11a04:	sub	r0, r0, #199680	; 0x30c00
   11a08:	sub	r0, r0, #432	; 0x1b0
   11a0c:	cmp	r0, #696	; 0x2b8
   11a10:	ldrbhi	r3, [r2, #1]
   11a14:	movhi	r9, #1
   11a18:	bhi	11954 <__assert_fail@plt+0x540>
   11a1c:	b	11510 <__assert_fail@plt+0xfc>
   11a20:	ldr	r3, [r6, #8]
   11a24:	ldrb	r2, [r3]
   11a28:	cmp	r2, #45	; 0x2d
   11a2c:	bne	114f0 <__assert_fail@plt+0xdc>
   11a30:	ldrb	r3, [r3, #1]
   11a34:	cmp	r3, #0
   11a38:	bne	114d8 <__assert_fail@plt+0xc4>
   11a3c:	b	114f0 <__assert_fail@plt+0xdc>
   11a40:	mov	r7, #1
   11a44:	mov	r1, #10
   11a48:	add	r3, r2, #1
   11a4c:	b	119a0 <__assert_fail@plt+0x58c>
   11a50:	ldrb	r3, [fp, #2]
   11a54:	ldr	r9, [sp, #28]
   11a58:	cmp	r3, r4
   11a5c:	beq	11e98 <__assert_fail@plt+0xa84>
   11a60:	ldrb	r7, [fp, #7]
   11a64:	cmp	r7, r4
   11a68:	beq	13210 <__assert_fail@plt+0x1dfc>
   11a6c:	movw	r3, #4424	; 0x1148
   11a70:	movt	r3, #3
   11a74:	ldr	r3, [r3, #4]
   11a78:	cmp	r3, #2
   11a7c:	beq	11e74 <__assert_fail@plt+0xa60>
   11a80:	ldr	r0, [fp, #8]
   11a84:	cmp	r0, #0
   11a88:	beq	11a9c <__assert_fail@plt+0x688>
   11a8c:	mov	r1, #0
   11a90:	bl	1127c <kill@plt>
   11a94:	cmp	r0, #0
   11a98:	bne	12958 <__assert_fail@plt+0x1544>
   11a9c:	ldrb	r3, [fp, #6]
   11aa0:	cmp	r3, #0
   11aa4:	beq	11ac0 <__assert_fail@plt+0x6ac>
   11aa8:	ldrd	r0, [sp, #120]	; 0x78
   11aac:	orrs	r3, r0, r1
   11ab0:	beq	11ac0 <__assert_fail@plt+0x6ac>
   11ab4:	subs	r2, r0, #1
   11ab8:	sbc	r3, r1, #0
   11abc:	strd	r2, [sp, #120]	; 0x78
   11ac0:	movw	r3, #4536	; 0x11b8
   11ac4:	movt	r3, #3
   11ac8:	ldr	r3, [r3]
   11acc:	cmp	r3, r5
   11ad0:	bge	1261c <__assert_fail@plt+0x1208>
   11ad4:	add	r6, r6, r3, lsl #2
   11ad8:	sub	r2, r5, r3
   11adc:	str	r2, [sp, #64]	; 0x40
   11ae0:	ldr	r3, [sp, #64]	; 0x40
   11ae4:	movw	r4, #62540	; 0xf44c
   11ae8:	movt	r4, #1
   11aec:	mov	r7, r6
   11af0:	mov	r8, #0
   11af4:	add	r5, r6, r3, lsl #2
   11af8:	ldr	r0, [r7], #4
   11afc:	mov	r1, r4
   11b00:	bl	110cc <strcmp@plt>
   11b04:	cmp	r0, #0
   11b08:	moveq	r8, #1
   11b0c:	cmp	r5, r7
   11b10:	bne	11af8 <__assert_fail@plt+0x6e4>
   11b14:	cmp	r8, #0
   11b18:	beq	11b7c <__assert_fail@plt+0x768>
   11b1c:	movw	r3, #4424	; 0x1148
   11b20:	movt	r3, #3
   11b24:	ldr	r4, [r3, #4]
   11b28:	cmp	r4, #1
   11b2c:	beq	14188 <__assert_fail@plt+0x2d74>
   11b30:	ldrb	r3, [fp, #7]
   11b34:	cmp	r3, #0
   11b38:	beq	12808 <__assert_fail@plt+0x13f4>
   11b3c:	ldr	r1, [fp, #8]
   11b40:	cmp	r1, #0
   11b44:	bne	11ee8 <__assert_fail@plt+0xad4>
   11b48:	ldr	r3, [sp, #64]	; 0x40
   11b4c:	cmp	r3, #1
   11b50:	cmpeq	r4, #2
   11b54:	bne	11ee8 <__assert_fail@plt+0xad4>
   11b58:	add	r2, sp, #256	; 0x100
   11b5c:	mov	r0, #3
   11b60:	bl	111c8 <__fxstat64@plt>
   11b64:	cmp	r0, #0
   11b68:	bne	11ee8 <__assert_fail@plt+0xad4>
   11b6c:	ldr	r3, [sp, #272]	; 0x110
   11b70:	and	r3, r3, #61440	; 0xf000
   11b74:	cmp	r3, #32768	; 0x8000
   11b78:	beq	11ee8 <__assert_fail@plt+0xad4>
   11b7c:	ldrd	r2, [sp, #120]	; 0x78
   11b80:	orrs	r3, r2, r3
   11b84:	bne	11b94 <__assert_fail@plt+0x780>
   11b88:	ldrb	r3, [fp, #7]
   11b8c:	cmp	r3, #0
   11b90:	beq	12814 <__assert_fail@plt+0x1400>
   11b94:	ldr	r4, [sp, #64]	; 0x40
   11b98:	mov	r1, #80	; 0x50
   11b9c:	mov	r0, r4
   11ba0:	bl	1d344 <__assert_fail@plt+0xbf30>
   11ba4:	sub	r3, r4, #1
   11ba8:	ubfx	ip, r6, #2, #1
   11bac:	str	r0, [sp, #88]	; 0x58
   11bb0:	cmp	r3, #1
   11bb4:	bls	134f8 <__assert_fail@plt+0x20e4>
   11bb8:	cmp	ip, #0
   11bbc:	ldr	r1, [sp, #88]	; 0x58
   11bc0:	mov	r2, #80	; 0x50
   11bc4:	ldrne	r3, [r6]
   11bc8:	mla	r2, r2, ip, r1
   11bcc:	strne	r3, [r0]
   11bd0:	ldr	r3, [sp, #64]	; 0x40
   11bd4:	add	r2, r2, #160	; 0xa0
   11bd8:	sub	lr, r3, ip
   11bdc:	add	r3, r6, ip, lsl #2
   11be0:	lsr	r0, lr, #1
   11be4:	add	r0, r3, r0, lsl #3
   11be8:	ldr	r4, [r3]
   11bec:	add	r3, r3, #8
   11bf0:	add	r2, r2, #160	; 0xa0
   11bf4:	ldr	r1, [r3, #-4]
   11bf8:	cmp	r0, r3
   11bfc:	str	r4, [r2, #-320]	; 0xfffffec0
   11c00:	str	r1, [r2, #-240]	; 0xffffff10
   11c04:	bne	11be8 <__assert_fail@plt+0x7d4>
   11c08:	bic	r3, lr, #1
   11c0c:	cmp	r3, lr
   11c10:	add	ip, r3, ip
   11c14:	beq	11c48 <__assert_fail@plt+0x834>
   11c18:	ldr	r0, [sp, #64]	; 0x40
   11c1c:	add	r2, ip, #1
   11c20:	mov	r3, #80	; 0x50
   11c24:	ldr	r1, [r6, ip, lsl #2]
   11c28:	mul	ip, r3, ip
   11c2c:	cmp	r0, r2
   11c30:	ldr	r0, [sp, #88]	; 0x58
   11c34:	str	r1, [r0, ip]
   11c38:	bls	11c48 <__assert_fail@plt+0x834>
   11c3c:	ldr	r1, [r6, r2, lsl #2]
   11c40:	mul	r3, r3, r2
   11c44:	str	r1, [r0, r3]
   11c48:	cmp	r9, #1
   11c4c:	beq	1262c <__assert_fail@plt+0x1218>
   11c50:	ldr	r3, [sp, #64]	; 0x40
   11c54:	subs	r3, r3, #1
   11c58:	movne	r3, #1
   11c5c:	cmp	r9, #0
   11c60:	moveq	r9, r3
   11c64:	movne	r9, #0
   11c68:	cmp	r9, #0
   11c6c:	bne	1262c <__assert_fail@plt+0x1218>
   11c70:	ldr	sl, [sp, #88]	; 0x58
   11c74:	movw	r3, #62540	; 0xf44c
   11c78:	movt	r3, #1
   11c7c:	str	fp, [sp, #28]
   11c80:	str	r3, [sp, #52]	; 0x34
   11c84:	mov	r3, #0
   11c88:	str	r3, [sp, #60]	; 0x3c
   11c8c:	mov	r3, #1
   11c90:	mov	fp, sl
   11c94:	str	r3, [sp, #56]	; 0x38
   11c98:	ldr	r4, [fp]
   11c9c:	ldr	r1, [sp, #52]	; 0x34
   11ca0:	ldrd	r2, [sp, #120]	; 0x78
   11ca4:	mov	r0, r4
   11ca8:	strd	r2, [sp, #40]	; 0x28
   11cac:	bl	110cc <strcmp@plt>
   11cb0:	subs	r2, r0, #0
   11cb4:	str	r2, [sp, #68]	; 0x44
   11cb8:	bne	11ff0 <__assert_fail@plt+0xbdc>
   11cbc:	str	r2, [sp, #32]
   11cc0:	mov	r3, #1
   11cc4:	ldr	r2, [sp, #28]
   11cc8:	strb	r3, [r2, #4]
   11ccc:	mov	r3, #1
   11cd0:	strb	r3, [fp, #46]	; 0x2e
   11cd4:	ldr	r3, [sp, #28]
   11cd8:	ldrb	r3, [r3, #1]
   11cdc:	cmp	r3, #0
   11ce0:	bne	12110 <__assert_fail@plt+0xcfc>
   11ce4:	ldr	r3, [fp]
   11ce8:	ldr	r1, [sp, #52]	; 0x34
   11cec:	mov	r0, r3
   11cf0:	str	r3, [sp, #72]	; 0x48
   11cf4:	bl	110cc <strcmp@plt>
   11cf8:	cmp	r0, #0
   11cfc:	beq	120f8 <__assert_fail@plt+0xce4>
   11d00:	ldr	r3, [sp, #28]
   11d04:	mov	r4, #0
   11d08:	mov	r5, #0
   11d0c:	mov	r0, #3
   11d10:	strd	r4, [sp, #128]	; 0x80
   11d14:	ldr	r1, [sp, #32]
   11d18:	ldrb	r3, [r3, #5]
   11d1c:	cmp	r3, #0
   11d20:	str	r3, [sp, #36]	; 0x24
   11d24:	add	r3, sp, #256	; 0x100
   11d28:	mov	r2, r3
   11d2c:	str	r3, [sp, #76]	; 0x4c
   11d30:	beq	11f50 <__assert_fail@plt+0xb3c>
   11d34:	bl	111c8 <__fxstat64@plt>
   11d38:	cmp	r0, #0
   11d3c:	bne	12698 <__assert_fail@plt+0x1284>
   11d40:	ldr	r3, [sp, #28]
   11d44:	ldrb	r6, [r3, #6]
   11d48:	cmp	r6, #0
   11d4c:	bne	125c8 <__assert_fail@plt+0x11b4>
   11d50:	ldr	r3, [sp, #28]
   11d54:	ldrb	r6, [r3, #12]
   11d58:	cmp	r6, #0
   11d5c:	bne	11d70 <__assert_fail@plt+0x95c>
   11d60:	ldr	r3, [sp, #272]	; 0x110
   11d64:	and	r3, r3, #61440	; 0xf000
   11d68:	cmp	r3, #32768	; 0x8000
   11d6c:	beq	128c0 <__assert_fail@plt+0x14ac>
   11d70:	movw	r0, #8204	; 0x200c
   11d74:	mov	r4, #0
   11d78:	bl	1d1e0 <__assert_fail@plt+0xbdcc>
   11d7c:	add	r3, r0, #8192	; 0x2000
   11d80:	mov	r5, r0
   11d84:	movw	r0, #8204	; 0x200c
   11d88:	mov	sl, r4
   11d8c:	str	r4, [r3]
   11d90:	str	r4, [r3, #4]
   11d94:	str	r4, [r3, #8]
   11d98:	str	r5, [sp, #48]	; 0x30
   11d9c:	bl	1d1e0 <__assert_fail@plt+0xbdcc>
   11da0:	mov	r8, r0
   11da4:	str	fp, [sp, #92]	; 0x5c
   11da8:	mov	r2, #8192	; 0x2000
   11dac:	mov	r1, r8
   11db0:	ldr	r0, [sp, #32]
   11db4:	bl	1c9c0 <__assert_fail@plt+0xb5ac>
   11db8:	sub	r3, r0, #1
   11dbc:	mov	r9, r0
   11dc0:	cmn	r3, #3
   11dc4:	bhi	12184 <__assert_fail@plt+0xd70>
   11dc8:	ldr	r1, [sp, #28]
   11dcc:	add	r7, r8, r0
   11dd0:	add	r4, r8, #8192	; 0x2000
   11dd4:	mov	fp, #0
   11dd8:	ldrd	r2, [sp, #128]	; 0x80
   11ddc:	str	r9, [r4]
   11de0:	ldrb	r6, [r1]
   11de4:	adds	r0, r2, r0
   11de8:	adc	r1, r3, #0
   11dec:	strd	r0, [sp, #128]	; 0x80
   11df0:	mov	r0, r8
   11df4:	str	fp, [r4, #4]
   11df8:	str	fp, [r4, #8]
   11dfc:	b	11e0c <__assert_fail@plt+0x9f8>
   11e00:	add	r0, r0, #1
   11e04:	mov	fp, r3
   11e08:	str	r3, [r4, #4]
   11e0c:	sub	r2, r7, r0
   11e10:	mov	r1, r6
   11e14:	bl	11330 <memchr@plt>
   11e18:	cmp	r0, #0
   11e1c:	add	r3, fp, #1
   11e20:	bne	11e00 <__assert_fail@plt+0x9ec>
   11e24:	ldr	r3, [sp, #48]	; 0x30
   11e28:	add	r7, sl, fp
   11e2c:	add	r6, r3, #8192	; 0x2000
   11e30:	ldr	r0, [r6]
   11e34:	add	r3, r9, r0
   11e38:	cmp	r3, #8192	; 0x2000
   11e3c:	bcc	11f20 <__assert_fail@plt+0xb0c>
   11e40:	add	ip, r5, #8192	; 0x2000
   11e44:	ldrd	r2, [sp, #40]	; 0x28
   11e48:	mov	r1, #0
   11e4c:	ldr	sl, [ip, #4]
   11e50:	str	r8, [r6, #8]
   11e54:	cmp	r3, r1
   11e58:	sub	sl, r7, sl
   11e5c:	cmpeq	r2, sl
   11e60:	bcs	120e0 <__assert_fail@plt+0xccc>
   11e64:	str	r8, [sp, #48]	; 0x30
   11e68:	mov	r8, r5
   11e6c:	ldr	r5, [ip, #8]
   11e70:	b	11da8 <__assert_fail@plt+0x994>
   11e74:	mov	r2, #5
   11e78:	movw	r1, #928	; 0x3a0
   11e7c:	movt	r1, #2
   11e80:	mov	r0, r4
   11e84:	bl	11174 <dcgettext@plt>
   11e88:	mov	r2, r0
   11e8c:	mov	r1, r4
   11e90:	mov	r0, r4
   11e94:	bl	1121c <error@plt>
   11e98:	ldr	r0, [fp, #8]
   11e9c:	cmp	r0, #0
   11ea0:	beq	11a9c <__assert_fail@plt+0x688>
   11ea4:	ldrb	r4, [fp, #7]
   11ea8:	cmp	r4, #0
   11eac:	bne	11a8c <__assert_fail@plt+0x678>
   11eb0:	mov	r2, #5
   11eb4:	mov	r0, r4
   11eb8:	movw	r1, #984	; 0x3d8
   11ebc:	movt	r1, #2
   11ec0:	bl	11174 <dcgettext@plt>
   11ec4:	mov	r2, r0
   11ec8:	mov	r1, r4
   11ecc:	mov	r0, r4
   11ed0:	bl	1121c <error@plt>
   11ed4:	b	11a9c <__assert_fail@plt+0x688>
   11ed8:	asr	r3, r1, #31
   11edc:	mov	r2, r1
   11ee0:	strd	r2, [sp, #120]	; 0x78
   11ee4:	b	119f0 <__assert_fail@plt+0x5dc>
   11ee8:	mov	r0, #0
   11eec:	bl	113cc <isatty@plt>
   11ef0:	cmp	r0, #0
   11ef4:	beq	11b7c <__assert_fail@plt+0x768>
   11ef8:	mov	r2, #5
   11efc:	movw	r1, #1128	; 0x468
   11f00:	movt	r1, #2
   11f04:	mov	r0, #0
   11f08:	bl	11174 <dcgettext@plt>
   11f0c:	mov	r1, #0
   11f10:	mov	r2, r0
   11f14:	mov	r0, r1
   11f18:	bl	1121c <error@plt>
   11f1c:	b	11b7c <__assert_fail@plt+0x768>
   11f20:	ldr	r3, [sp, #48]	; 0x30
   11f24:	mov	r2, r9
   11f28:	mov	r1, r8
   11f2c:	mov	sl, r7
   11f30:	add	r0, r3, r0
   11f34:	bl	1112c <memcpy@plt>
   11f38:	ldrd	r0, [r4]
   11f3c:	ldrd	r2, [r6]
   11f40:	add	r2, r2, r0
   11f44:	add	r3, r3, r1
   11f48:	strd	r2, [r6]
   11f4c:	b	11da8 <__assert_fail@plt+0x994>
   11f50:	bl	111c8 <__fxstat64@plt>
   11f54:	cmp	r0, #0
   11f58:	bne	12650 <__assert_fail@plt+0x123c>
   11f5c:	ldr	r3, [sp, #28]
   11f60:	ldrb	r2, [r3, #6]
   11f64:	ldrb	r4, [r3, #12]
   11f68:	cmp	r2, #0
   11f6c:	str	r2, [sp, #36]	; 0x24
   11f70:	beq	12438 <__assert_fail@plt+0x1024>
   11f74:	cmp	r4, #0
   11f78:	bne	12590 <__assert_fail@plt+0x117c>
   11f7c:	ldrd	r2, [sp, #40]	; 0x28
   11f80:	cmp	r2, #0
   11f84:	sbcs	r3, r3, #0
   11f88:	blt	12590 <__assert_fail@plt+0x117c>
   11f8c:	ldr	r3, [sp, #272]	; 0x110
   11f90:	and	r3, r3, #61440	; 0xf000
   11f94:	cmp	r3, #32768	; 0x8000
   11f98:	beq	12998 <__assert_fail@plt+0x1584>
   11f9c:	mov	r1, #1
   11fa0:	ldr	r0, [sp, #32]
   11fa4:	str	r1, [sp]
   11fa8:	ldrd	r2, [sp, #40]	; 0x28
   11fac:	bl	111ec <lseek64@plt>
   11fb0:	mvn	r3, #0
   11fb4:	mvn	r2, #0
   11fb8:	cmp	r1, r3
   11fbc:	cmpeq	r0, r2
   11fc0:	beq	12590 <__assert_fail@plt+0x117c>
   11fc4:	ldrd	r0, [sp, #40]	; 0x28
   11fc8:	ldr	r3, [sp, #128]	; 0x80
   11fcc:	ldr	r2, [sp, #132]	; 0x84
   11fd0:	adds	r3, r3, r0
   11fd4:	mvn	r0, #0
   11fd8:	adc	r2, r2, r1
   11fdc:	mvn	r1, #0
   11fe0:	strd	r0, [sp, #40]	; 0x28
   11fe4:	str	r3, [sp, #128]	; 0x80
   11fe8:	str	r2, [sp, #132]	; 0x84
   11fec:	b	1250c <__assert_fail@plt+0x10f8>
   11ff0:	mov	r0, r4
   11ff4:	mov	r1, #0
   11ff8:	bl	175cc <__assert_fail@plt+0x61b8>
   11ffc:	ldr	r3, [sp, #28]
   12000:	str	r0, [sp, #32]
   12004:	ldrb	r4, [r3, #2]
   12008:	cmp	r4, #0
   1200c:	beq	12168 <__assert_fail@plt+0xd54>
   12010:	cmn	r0, #1
   12014:	moveq	r3, #0
   12018:	strbeq	r3, [fp, #46]	; 0x2e
   1201c:	bne	12840 <__assert_fail@plt+0x142c>
   12020:	ldr	r3, [sp, #28]
   12024:	ldrb	r6, [r3, #7]
   12028:	bl	112dc <__errno_location@plt>
   1202c:	ldr	r5, [r0]
   12030:	cmp	r6, #0
   12034:	beq	1205c <__assert_fail@plt+0xc48>
   12038:	mov	r2, #0
   1203c:	mov	r3, #0
   12040:	eor	r4, r4, #1
   12044:	mvn	r1, #0
   12048:	strd	r2, [fp, #24]
   1204c:	strd	r2, [fp, #32]
   12050:	strb	r4, [fp, #44]	; 0x2c
   12054:	str	r1, [fp, #48]	; 0x30
   12058:	str	r5, [fp, #52]	; 0x34
   1205c:	mov	r2, #5
   12060:	movw	r1, #1192	; 0x4a8
   12064:	movt	r1, #2
   12068:	mov	r0, #0
   1206c:	bl	11174 <dcgettext@plt>
   12070:	ldr	r4, [fp]
   12074:	mov	r6, r0
   12078:	ldr	r1, [sp, #52]	; 0x34
   1207c:	mov	r0, r4
   12080:	bl	110cc <strcmp@plt>
   12084:	cmp	r0, #0
   12088:	beq	12578 <__assert_fail@plt+0x1164>
   1208c:	mov	r1, r4
   12090:	mov	r0, #4
   12094:	bl	1b500 <__assert_fail@plt+0xa0ec>
   12098:	mov	r3, r0
   1209c:	mov	r2, r6
   120a0:	mov	r1, r5
   120a4:	mov	r0, #0
   120a8:	bl	1121c <error@plt>
   120ac:	mov	r3, #0
   120b0:	str	r3, [sp, #36]	; 0x24
   120b4:	ldrd	r2, [sp, #56]	; 0x38
   120b8:	add	fp, fp, #80	; 0x50
   120bc:	add	r5, r3, #1
   120c0:	ldr	r3, [sp, #36]	; 0x24
   120c4:	and	r3, r3, r2
   120c8:	str	r3, [sp, #56]	; 0x38
   120cc:	ldr	r3, [sp, #64]	; 0x40
   120d0:	cmp	r3, r5
   120d4:	beq	1253c <__assert_fail@plt+0x1128>
   120d8:	str	r5, [sp, #60]	; 0x3c
   120dc:	b	11c98 <__assert_fail@plt+0x884>
   120e0:	movw	r0, #8204	; 0x200c
   120e4:	str	r8, [sp, #48]	; 0x30
   120e8:	mov	sl, r7
   120ec:	bl	1d1e0 <__assert_fail@plt+0xbdcc>
   120f0:	mov	r8, r0
   120f4:	b	11da8 <__assert_fail@plt+0x994>
   120f8:	movw	r1, #62544	; 0xf450
   120fc:	movt	r1, #1
   12100:	mov	r2, #5
   12104:	bl	11174 <dcgettext@plt>
   12108:	str	r0, [sp, #72]	; 0x48
   1210c:	b	11d00 <__assert_fail@plt+0x8ec>
   12110:	mov	r0, r4
   12114:	ldr	r1, [sp, #52]	; 0x34
   12118:	bl	110cc <strcmp@plt>
   1211c:	cmp	r0, #0
   12120:	beq	12638 <__assert_fail@plt+0x1224>
   12124:	movw	r5, #4424	; 0x1148
   12128:	movt	r5, #3
   1212c:	ldrb	lr, [r5]
   12130:	movw	ip, #62684	; 0xf4dc
   12134:	movt	ip, #1
   12138:	mov	r3, r4
   1213c:	movw	r2, #65356	; 0xff4c
   12140:	movt	r2, #1
   12144:	movw	r1, #62672	; 0xf4d0
   12148:	movt	r1, #1
   1214c:	mov	r0, #1
   12150:	cmp	lr, #0
   12154:	moveq	r2, ip
   12158:	bl	11300 <__printf_chk@plt>
   1215c:	mov	r3, #0
   12160:	strb	r3, [r5]
   12164:	b	11ce4 <__assert_fail@plt+0x8d0>
   12168:	ldr	r2, [sp, #32]
   1216c:	mov	r3, #1
   12170:	strb	r3, [fp, #46]	; 0x2e
   12174:	cmn	r2, #1
   12178:	beq	12020 <__assert_fail@plt+0xc0c>
   1217c:	ldr	r4, [fp]
   12180:	b	11cd4 <__assert_fail@plt+0x8c0>
   12184:	mov	r0, r8
   12188:	ldr	fp, [sp, #92]	; 0x5c
   1218c:	mov	r6, sl
   12190:	bl	1760c <__assert_fail@plt+0x61f8>
   12194:	cmn	r9, #1
   12198:	beq	134ac <__assert_fail@plt+0x2098>
   1219c:	ldrd	r0, [sp, #40]	; 0x28
   121a0:	ldr	ip, [sp, #48]	; 0x30
   121a4:	mov	r3, r0
   121a8:	orrs	r3, r3, r1
   121ac:	add	r2, ip, #8192	; 0x2000
   121b0:	moveq	r3, #1
   121b4:	ldr	r1, [r2]
   121b8:	movne	r3, #0
   121bc:	cmp	r1, #0
   121c0:	moveq	r3, #1
   121c4:	cmp	r3, #0
   121c8:	beq	12734 <__assert_fail@plt+0x1320>
   121cc:	cmp	r5, #0
   121d0:	movne	r0, r5
   121d4:	beq	121ec <__assert_fail@plt+0xdd8>
   121d8:	add	r3, r0, #8192	; 0x2000
   121dc:	ldr	r4, [r3, #8]
   121e0:	bl	1760c <__assert_fail@plt+0x61f8>
   121e4:	subs	r0, r4, #0
   121e8:	bne	121d8 <__assert_fail@plt+0xdc4>
   121ec:	ldr	r3, [sp, #28]
   121f0:	ldrb	r4, [r3, #7]
   121f4:	cmp	r4, #0
   121f8:	bne	12278 <__assert_fail@plt+0xe64>
   121fc:	ldr	r3, [sp, #68]	; 0x44
   12200:	cmp	r3, #0
   12204:	beq	120b4 <__assert_fail@plt+0xca0>
   12208:	ldr	r0, [sp, #32]
   1220c:	bl	113fc <close@plt>
   12210:	cmp	r0, #0
   12214:	beq	120b4 <__assert_fail@plt+0xca0>
   12218:	bl	112dc <__errno_location@plt>
   1221c:	mov	r2, #5
   12220:	movw	r1, #62596	; 0xf484
   12224:	movt	r1, #1
   12228:	ldr	r5, [r0]
   1222c:	mov	r0, r4
   12230:	bl	11174 <dcgettext@plt>
   12234:	ldr	r4, [fp]
   12238:	mov	r6, r0
   1223c:	ldr	r1, [sp, #52]	; 0x34
   12240:	mov	r0, r4
   12244:	bl	110cc <strcmp@plt>
   12248:	cmp	r0, #0
   1224c:	beq	12ac4 <__assert_fail@plt+0x16b0>
   12250:	mov	r1, r4
   12254:	mov	r0, #4
   12258:	bl	1b500 <__assert_fail@plt+0xa0ec>
   1225c:	mov	r3, r0
   12260:	mov	r0, #0
   12264:	mov	r2, r6
   12268:	mov	r1, r5
   1226c:	str	r0, [sp, #36]	; 0x24
   12270:	bl	1121c <error@plt>
   12274:	b	120b4 <__assert_fail@plt+0xca0>
   12278:	mov	r0, #3
   1227c:	ldr	r1, [sp, #32]
   12280:	ldr	r3, [sp, #36]	; 0x24
   12284:	ldr	r2, [sp, #76]	; 0x4c
   12288:	sub	r3, r3, #1
   1228c:	str	r3, [fp, #52]	; 0x34
   12290:	bl	111c8 <__fxstat64@plt>
   12294:	cmp	r0, #0
   12298:	blt	12848 <__assert_fail@plt+0x1434>
   1229c:	ldr	r2, [sp, #272]	; 0x110
   122a0:	and	r3, r2, #61440	; 0xf000
   122a4:	and	r1, r2, #45056	; 0xb000
   122a8:	sub	r3, r3, #4096	; 0x1000
   122ac:	subs	r1, r1, #32768	; 0x8000
   122b0:	bic	r3, r3, #4096	; 0x1000
   122b4:	movne	r1, #1
   122b8:	cmp	r3, #0
   122bc:	moveq	r1, #0
   122c0:	cmp	r1, #0
   122c4:	bne	12360 <__assert_fail@plt+0xf4c>
   122c8:	ldr	r3, [sp, #36]	; 0x24
   122cc:	cmp	r3, #0
   122d0:	beq	123f0 <__assert_fail@plt+0xfdc>
   122d4:	str	r2, [fp, #40]	; 0x28
   122d8:	mov	r6, #0
   122dc:	mov	r7, #0
   122e0:	ldr	r3, [sp, #68]	; 0x44
   122e4:	add	lr, sp, #352	; 0x160
   122e8:	strb	r1, [fp, #44]	; 0x2c
   122ec:	ldr	ip, [sp, #32]
   122f0:	ldr	r4, [fp]
   122f4:	cmp	r3, #0
   122f8:	ldrd	r2, [sp, #128]	; 0x80
   122fc:	mvneq	r0, #0
   12300:	movne	r0, #1
   12304:	strd	r6, [fp, #72]	; 0x48
   12308:	ldrd	r6, [lr]
   1230c:	ldr	r1, [sp, #336]	; 0x150
   12310:	strd	r2, [fp, #8]
   12314:	add	r3, sp, #256	; 0x100
   12318:	str	ip, [fp, #48]	; 0x30
   1231c:	ldrd	r2, [r3]
   12320:	ldr	ip, [sp, #340]	; 0x154
   12324:	str	r1, [fp, #16]
   12328:	ldr	r1, [sp, #52]	; 0x34
   1232c:	strd	r6, [fp, #32]
   12330:	str	r0, [fp, #56]	; 0x38
   12334:	mov	r0, r4
   12338:	str	ip, [fp, #20]
   1233c:	strd	r2, [fp, #24]
   12340:	bl	110cc <strcmp@plt>
   12344:	cmp	r0, #0
   12348:	beq	13404 <__assert_fail@plt+0x1ff0>
   1234c:	mov	r1, r4
   12350:	ldr	r0, [sp, #32]
   12354:	bl	14614 <__assert_fail@plt+0x3200>
   12358:	strb	r0, [fp, #45]	; 0x2d
   1235c:	b	120b4 <__assert_fail@plt+0xca0>
   12360:	ldr	r3, [sp, #28]
   12364:	mvn	ip, #0
   12368:	mov	r2, #0
   1236c:	mov	r0, r2
   12370:	movw	r1, #1276	; 0x4fc
   12374:	movt	r1, #2
   12378:	strb	r2, [fp, #46]	; 0x2e
   1237c:	mov	r2, #5
   12380:	str	ip, [fp, #52]	; 0x34
   12384:	ldrb	r3, [r3, #2]
   12388:	eor	r3, r3, #1
   1238c:	strb	r3, [fp, #44]	; 0x2c
   12390:	bl	11174 <dcgettext@plt>
   12394:	ldr	r4, [fp]
   12398:	mov	r5, r0
   1239c:	ldr	r1, [sp, #52]	; 0x34
   123a0:	mov	r0, r4
   123a4:	bl	110cc <strcmp@plt>
   123a8:	cmp	r0, #0
   123ac:	beq	13678 <__assert_fail@plt+0x2264>
   123b0:	mov	r2, r4
   123b4:	mov	r1, #3
   123b8:	mov	r0, #0
   123bc:	bl	1c080 <__assert_fail@plt+0xac6c>
   123c0:	ldrb	r3, [fp, #44]	; 0x2c
   123c4:	mov	r4, r0
   123c8:	cmp	r3, #0
   123cc:	movweq	r0, #65356	; 0xff4c
   123d0:	movteq	r0, #1
   123d4:	bne	13660 <__assert_fail@plt+0x224c>
   123d8:	mov	r1, #0
   123dc:	mov	r3, r4
   123e0:	str	r0, [sp]
   123e4:	mov	r2, r5
   123e8:	mov	r0, r1
   123ec:	bl	1121c <error@plt>
   123f0:	ldr	r3, [sp, #28]
   123f4:	ldr	r4, [fp]
   123f8:	ldr	r1, [sp, #52]	; 0x34
   123fc:	ldrb	r3, [r3, #2]
   12400:	mov	r0, r4
   12404:	eor	r3, r3, #1
   12408:	strb	r3, [fp, #44]	; 0x2c
   1240c:	bl	110cc <strcmp@plt>
   12410:	cmp	r0, #0
   12414:	beq	128a8 <__assert_fail@plt+0x1494>
   12418:	ldr	r3, [sp, #32]
   1241c:	cmp	r3, #0
   12420:	bne	126d8 <__assert_fail@plt+0x12c4>
   12424:	mvn	r3, #0
   12428:	mov	r2, #0
   1242c:	str	r2, [sp, #36]	; 0x24
   12430:	str	r3, [fp, #48]	; 0x30
   12434:	b	120b4 <__assert_fail@plt+0xca0>
   12438:	cmp	r4, #0
   1243c:	bne	12490 <__assert_fail@plt+0x107c>
   12440:	ldrd	r2, [sp, #40]	; 0x28
   12444:	cmp	r2, #0
   12448:	sbcs	r3, r3, #0
   1244c:	blt	12490 <__assert_fail@plt+0x107c>
   12450:	ldr	r3, [sp, #272]	; 0x110
   12454:	and	r3, r3, #53248	; 0xd000
   12458:	cmp	r3, #32768	; 0x8000
   1245c:	bne	13500 <__assert_fail@plt+0x20ec>
   12460:	add	r3, sp, #304	; 0x130
   12464:	mvn	r6, #0
   12468:	ldrd	r2, [r3]
   1246c:	mvn	r7, #0
   12470:	strd	r2, [sp, #80]	; 0x50
   12474:	ldr	r2, [sp, #312]	; 0x138
   12478:	sub	r3, r2, #1
   1247c:	cmn	r3, #-536870911	; 0xe0000001
   12480:	movhi	r2, #512	; 0x200
   12484:	movhi	r3, #0
   12488:	bhi	124b0 <__assert_fail@plt+0x109c>
   1248c:	b	124ac <__assert_fail@plt+0x1098>
   12490:	ldr	r2, [sp, #312]	; 0x138
   12494:	sub	r3, r2, #1
   12498:	cmn	r3, #-536870911	; 0xe0000001
   1249c:	mvnls	r6, #0
   124a0:	mvnls	r7, #0
   124a4:	strdls	r6, [sp, #80]	; 0x50
   124a8:	bhi	1323c <__assert_fail@plt+0x1e28>
   124ac:	asr	r3, r2, #31
   124b0:	ldrd	r0, [sp, #80]	; 0x50
   124b4:	cmp	r2, r0
   124b8:	sbcs	r3, r3, r1
   124bc:	bge	1323c <__assert_fail@plt+0x1e28>
   124c0:	mvn	r3, #0
   124c4:	mvn	r2, #0
   124c8:	cmp	r7, r3
   124cc:	cmpeq	r6, r2
   124d0:	beq	1341c <__assert_fail@plt+0x2008>
   124d4:	ldrd	r2, [sp, #80]	; 0x50
   124d8:	cmp	r6, r2
   124dc:	sbcs	r1, r7, r3
   124e0:	bge	12508 <__assert_fail@plt+0x10f4>
   124e4:	subs	r1, r2, r6
   124e8:	sbc	r3, r3, r7
   124ec:	str	r1, [sp, #96]	; 0x60
   124f0:	str	r3, [sp, #100]	; 0x64
   124f4:	ldrd	r2, [sp, #40]	; 0x28
   124f8:	ldrd	r0, [sp, #96]	; 0x60
   124fc:	cmp	r3, r1
   12500:	cmpeq	r2, r0
   12504:	bcc	12a30 <__assert_fail@plt+0x161c>
   12508:	strd	r6, [sp, #128]	; 0x80
   1250c:	mov	ip, #1
   12510:	ldr	r1, [sp, #32]
   12514:	ldrd	r2, [sp, #40]	; 0x28
   12518:	str	ip, [sp, #36]	; 0x24
   1251c:	ldr	r0, [sp, #72]	; 0x48
   12520:	bl	14fd4 <__assert_fail@plt+0x3bc0>
   12524:	ldr	r3, [sp, #128]	; 0x80
   12528:	ldr	r2, [sp, #132]	; 0x84
   1252c:	adds	r0, r3, r0
   12530:	adc	r1, r2, r1
   12534:	strd	r0, [sp, #128]	; 0x80
   12538:	b	121ec <__assert_fail@plt+0xdd8>
   1253c:	ldr	fp, [sp, #28]
   12540:	ldrb	r3, [fp, #7]
   12544:	cmp	r3, #0
   12548:	str	r3, [sp, #52]	; 0x34
   1254c:	bne	12adc <__assert_fail@plt+0x16c8>
   12550:	ldrb	r3, [fp, #4]
   12554:	cmp	r3, #0
   12558:	beq	1256c <__assert_fail@plt+0x1158>
   1255c:	mov	r0, #0
   12560:	bl	113fc <close@plt>
   12564:	cmp	r0, #0
   12568:	blt	141c4 <__assert_fail@plt+0x2db0>
   1256c:	ldr	r3, [sp, #56]	; 0x38
   12570:	eor	r0, r3, #1
   12574:	bl	11294 <exit@plt>
   12578:	movw	r1, #62544	; 0xf450
   1257c:	movt	r1, #1
   12580:	mov	r2, #5
   12584:	bl	11174 <dcgettext@plt>
   12588:	mov	r4, r0
   1258c:	b	1208c <__assert_fail@plt+0xc78>
   12590:	add	ip, sp, #128	; 0x80
   12594:	ldr	r1, [sp, #32]
   12598:	str	ip, [sp]
   1259c:	ldrd	r2, [sp, #40]	; 0x28
   125a0:	ldr	r0, [sp, #72]	; 0x48
   125a4:	bl	14510 <__assert_fail@plt+0x30fc>
   125a8:	cmp	r0, #0
   125ac:	mvneq	r2, #0
   125b0:	mvneq	r3, #0
   125b4:	strdeq	r2, [sp, #40]	; 0x28
   125b8:	beq	1250c <__assert_fail@plt+0x10f8>
   125bc:	lsr	r3, r0, #31
   125c0:	str	r3, [sp, #36]	; 0x24
   125c4:	b	121ec <__assert_fail@plt+0xdd8>
   125c8:	add	ip, sp, #128	; 0x80
   125cc:	ldr	r1, [sp, #32]
   125d0:	str	ip, [sp]
   125d4:	ldrd	r2, [sp, #40]	; 0x28
   125d8:	ldr	r0, [sp, #72]	; 0x48
   125dc:	bl	143d0 <__assert_fail@plt+0x2fbc>
   125e0:	cmp	r0, #0
   125e4:	bne	125bc <__assert_fail@plt+0x11a8>
   125e8:	mvn	r2, #0
   125ec:	mvn	r3, #0
   125f0:	ldr	r1, [sp, #32]
   125f4:	str	r6, [sp, #36]	; 0x24
   125f8:	ldr	r0, [sp, #72]	; 0x48
   125fc:	bl	14fd4 <__assert_fail@plt+0x3bc0>
   12600:	ldr	r3, [sp, #128]	; 0x80
   12604:	ldr	r2, [sp, #132]	; 0x84
   12608:	adds	r3, r3, r0
   1260c:	adc	r2, r2, r1
   12610:	str	r3, [sp, #128]	; 0x80
   12614:	str	r2, [sp, #132]	; 0x84
   12618:	b	121ec <__assert_fail@plt+0xdd8>
   1261c:	mov	r3, #1
   12620:	ldr	r6, [pc, #-3336]	; 11920 <__assert_fail@plt+0x50c>
   12624:	str	r3, [sp, #64]	; 0x40
   12628:	b	11ae0 <__assert_fail@plt+0x6cc>
   1262c:	mov	r3, #1
   12630:	strb	r3, [fp, #1]
   12634:	b	11c70 <__assert_fail@plt+0x85c>
   12638:	movw	r1, #62544	; 0xf450
   1263c:	movt	r1, #1
   12640:	mov	r2, #5
   12644:	bl	11174 <dcgettext@plt>
   12648:	mov	r4, r0
   1264c:	b	12124 <__assert_fail@plt+0xd10>
   12650:	bl	112dc <__errno_location@plt>
   12654:	ldr	r6, [sp, #36]	; 0x24
   12658:	movw	r1, #1220	; 0x4c4
   1265c:	movt	r1, #2
   12660:	mov	r2, #5
   12664:	ldr	r4, [r0]
   12668:	mov	r0, r6
   1266c:	bl	11174 <dcgettext@plt>
   12670:	ldr	r1, [sp, #72]	; 0x48
   12674:	mov	r5, r0
   12678:	mov	r0, #4
   1267c:	bl	1b500 <__assert_fail@plt+0xa0ec>
   12680:	mov	r3, r0
   12684:	mov	r2, r5
   12688:	mov	r1, r4
   1268c:	mov	r0, #0
   12690:	bl	1121c <error@plt>
   12694:	b	121ec <__assert_fail@plt+0xdd8>
   12698:	bl	112dc <__errno_location@plt>
   1269c:	movw	r1, #1220	; 0x4c4
   126a0:	movt	r1, #2
   126a4:	ldr	r4, [r0]
   126a8:	mov	r2, #5
   126ac:	mov	r0, #0
   126b0:	bl	11174 <dcgettext@plt>
   126b4:	mov	r3, #0
   126b8:	mov	r5, r0
   126bc:	ldr	r1, [sp, #72]	; 0x48
   126c0:	mov	r0, #4
   126c4:	str	r3, [sp, #36]	; 0x24
   126c8:	b	1267c <__assert_fail@plt+0x1268>
   126cc:	mov	r7, #0
   126d0:	mov	r1, #10
   126d4:	b	11a48 <__assert_fail@plt+0x634>
   126d8:	mov	r0, r3
   126dc:	bl	113fc <close@plt>
   126e0:	cmp	r0, #0
   126e4:	beq	12424 <__assert_fail@plt+0x1010>
   126e8:	bl	112dc <__errno_location@plt>
   126ec:	mov	r2, #5
   126f0:	movw	r1, #62688	; 0xf4e0
   126f4:	movt	r1, #1
   126f8:	ldr	r6, [r0]
   126fc:	mov	r0, #0
   12700:	bl	11174 <dcgettext@plt>
   12704:	mov	r5, r0
   12708:	mov	r1, r4
   1270c:	mov	r0, #4
   12710:	bl	1b500 <__assert_fail@plt+0xa0ec>
   12714:	ldr	r2, [sp, #32]
   12718:	mov	r3, r0
   1271c:	mov	r1, r6
   12720:	mov	r0, #0
   12724:	str	r2, [sp]
   12728:	mov	r2, r5
   1272c:	bl	1121c <error@plt>
   12730:	b	12424 <__assert_fail@plt+0x1010>
   12734:	add	r3, ip, r1
   12738:	ldr	r1, [sp, #28]
   1273c:	ldrb	r3, [r3, #-1]
   12740:	ldrb	r4, [r1]
   12744:	cmp	r3, r4
   12748:	beq	12760 <__assert_fail@plt+0x134c>
   1274c:	ldr	r3, [r2, #4]
   12750:	add	r1, sl, #1
   12754:	mov	r6, r1
   12758:	add	r3, r3, #1
   1275c:	str	r3, [r2, #4]
   12760:	mov	r1, fp
   12764:	mov	r0, r5
   12768:	ldrd	sl, [sp, #40]	; 0x28
   1276c:	mov	r2, r6
   12770:	b	1277c <__assert_fail@plt+0x1368>
   12774:	ldr	r0, [r7, #8]
   12778:	mov	r2, r3
   1277c:	add	r7, r0, #8192	; 0x2000
   12780:	mov	r9, #0
   12784:	ldr	r3, [r7, #4]
   12788:	cmp	fp, r9
   1278c:	sub	r3, r2, r3
   12790:	cmpeq	sl, r3
   12794:	bcc	12774 <__assert_fail@plt+0x1360>
   12798:	ldrd	r8, [sp, #40]	; 0x28
   1279c:	mov	r3, #0
   127a0:	mov	fp, r1
   127a4:	ldr	r6, [r7]
   127a8:	cmp	r9, r3
   127ac:	cmpeq	r8, r2
   127b0:	movcc	r3, r8
   127b4:	add	r6, r0, r6
   127b8:	subcc	sl, r2, r3
   127bc:	bcc	127fc <__assert_fail@plt+0x13e8>
   127c0:	sub	r1, r6, r0
   127c4:	bl	14340 <__assert_fail@plt+0x2f2c>
   127c8:	ldr	r0, [r7, #8]
   127cc:	b	127e0 <__assert_fail@plt+0x13cc>
   127d0:	add	r4, r0, #8192	; 0x2000
   127d4:	ldr	r1, [r4]
   127d8:	bl	14340 <__assert_fail@plt+0x2f2c>
   127dc:	ldr	r0, [r4, #8]
   127e0:	cmp	r0, #0
   127e4:	bne	127d0 <__assert_fail@plt+0x13bc>
   127e8:	b	121cc <__assert_fail@plt+0xdb8>
   127ec:	mov	r1, r4
   127f0:	sub	sl, sl, #1
   127f4:	bl	11198 <rawmemchr@plt>
   127f8:	add	r0, r0, #1
   127fc:	cmp	sl, #0
   12800:	bne	127ec <__assert_fail@plt+0x13d8>
   12804:	b	127c0 <__assert_fail@plt+0x13ac>
   12808:	ldrd	r2, [sp, #120]	; 0x78
   1280c:	orrs	r3, r2, r3
   12810:	bne	11b94 <__assert_fail@plt+0x780>
   12814:	ldrb	r0, [fp, #6]
   12818:	cmp	r0, #0
   1281c:	bne	11b94 <__assert_fail@plt+0x780>
   12820:	add	sp, sp, #364	; 0x16c
   12824:	vpop	{d8-d10}
   12828:	ldrd	r4, [sp]
   1282c:	ldrd	r6, [sp, #8]
   12830:	ldrd	r8, [sp, #16]
   12834:	ldrd	sl, [sp, #24]
   12838:	add	sp, sp, #32
   1283c:	pop	{pc}		; (ldr pc, [sp], #4)
   12840:	ldr	r4, [fp]
   12844:	b	11ccc <__assert_fail@plt+0x8b8>
   12848:	bl	112dc <__errno_location@plt>
   1284c:	ldr	r5, [r0]
   12850:	mov	r2, #5
   12854:	movw	r1, #62596	; 0xf484
   12858:	movt	r1, #1
   1285c:	mov	r0, #0
   12860:	str	r5, [fp, #52]	; 0x34
   12864:	bl	11174 <dcgettext@plt>
   12868:	ldr	r4, [fp]
   1286c:	mov	r6, r0
   12870:	ldr	r1, [sp, #52]	; 0x34
   12874:	mov	r0, r4
   12878:	bl	110cc <strcmp@plt>
   1287c:	cmp	r0, #0
   12880:	beq	12a18 <__assert_fail@plt+0x1604>
   12884:	mov	r1, r4
   12888:	mov	r0, #4
   1288c:	bl	1b500 <__assert_fail@plt+0xa0ec>
   12890:	mov	r3, r0
   12894:	mov	r2, r6
   12898:	mov	r1, r5
   1289c:	mov	r0, #0
   128a0:	bl	1121c <error@plt>
   128a4:	b	123f0 <__assert_fail@plt+0xfdc>
   128a8:	movw	r1, #62544	; 0xf450
   128ac:	movt	r1, #1
   128b0:	mov	r2, #5
   128b4:	bl	11174 <dcgettext@plt>
   128b8:	mov	r4, r0
   128bc:	b	12418 <__assert_fail@plt+0x1004>
   128c0:	ldr	sl, [sp, #32]
   128c4:	mov	r7, #1
   128c8:	mov	r2, r4
   128cc:	mov	r3, r5
   128d0:	str	r7, [sp]
   128d4:	mov	r0, sl
   128d8:	bl	111ec <lseek64@plt>
   128dc:	mvn	r3, #0
   128e0:	mvn	r2, #0
   128e4:	cmp	r1, r3
   128e8:	mov	r8, r0
   128ec:	cmpeq	r0, r2
   128f0:	mov	r9, r1
   128f4:	beq	11d70 <__assert_fail@plt+0x95c>
   128f8:	mov	r1, #2
   128fc:	mov	r3, r5
   12900:	mov	r2, r4
   12904:	mov	r0, sl
   12908:	str	r1, [sp]
   1290c:	bl	111ec <lseek64@plt>
   12910:	cmp	r8, r0
   12914:	mov	r4, r0
   12918:	sbcs	r3, r9, r1
   1291c:	mov	r5, r1
   12920:	bge	1354c <__assert_fail@plt+0x2138>
   12924:	orrs	r3, r4, r5
   12928:	strd	r4, [sp, #128]	; 0x80
   1292c:	beq	121ec <__assert_fail@plt+0xdd8>
   12930:	add	ip, sp, #128	; 0x80
   12934:	strd	r8, [sp]
   12938:	strd	r4, [sp, #8]
   1293c:	str	ip, [sp, #16]
   12940:	ldr	r1, [sp, #32]
   12944:	ldrd	r2, [sp, #40]	; 0x28
   12948:	ldr	r0, [sp, #72]	; 0x48
   1294c:	bl	157a4 <__assert_fail@plt+0x4390>
   12950:	str	r0, [sp, #36]	; 0x24
   12954:	b	121ec <__assert_fail@plt+0xdd8>
   12958:	bl	112dc <__errno_location@plt>
   1295c:	ldr	r3, [r0]
   12960:	cmp	r3, #38	; 0x26
   12964:	bne	11a9c <__assert_fail@plt+0x688>
   12968:	mov	r2, #5
   1296c:	movw	r1, #1048	; 0x418
   12970:	movt	r1, #2
   12974:	mov	r0, #0
   12978:	bl	11174 <dcgettext@plt>
   1297c:	mov	r1, #0
   12980:	mov	r2, r0
   12984:	mov	r0, r1
   12988:	bl	1121c <error@plt>
   1298c:	mov	r3, #0
   12990:	str	r3, [fp, #8]
   12994:	b	11a9c <__assert_fail@plt+0x688>
   12998:	mov	r5, #1
   1299c:	ldr	r0, [sp, #32]
   129a0:	str	r5, [sp]
   129a4:	ldrd	r2, [sp, #40]	; 0x28
   129a8:	bl	111ec <lseek64@plt>
   129ac:	cmp	r0, #0
   129b0:	sbcs	r3, r1, #0
   129b4:	bge	11fc4 <__assert_fail@plt+0xbb0>
   129b8:	add	r2, sp, #152	; 0x98
   129bc:	ldrd	r0, [sp, #40]	; 0x28
   129c0:	bl	18d78 <__assert_fail@plt+0x7964>
   129c4:	mov	r7, r0
   129c8:	bl	112dc <__errno_location@plt>
   129cc:	ldr	r8, [r0]
   129d0:	mov	r2, #5
   129d4:	movw	r1, #1236	; 0x4d4
   129d8:	movt	r1, #2
   129dc:	mov	r0, r4
   129e0:	bl	11174 <dcgettext@plt>
   129e4:	mov	r6, r0
   129e8:	mov	r1, #3
   129ec:	ldr	r2, [sp, #72]	; 0x48
   129f0:	mov	r0, r4
   129f4:	bl	1c080 <__assert_fail@plt+0xac6c>
   129f8:	mov	r3, r0
   129fc:	mov	r1, r8
   12a00:	str	r7, [sp]
   12a04:	mov	r0, r4
   12a08:	mov	r2, r6
   12a0c:	bl	1121c <error@plt>
   12a10:	mov	r0, r5
   12a14:	bl	11294 <exit@plt>
   12a18:	movw	r1, #62544	; 0xf450
   12a1c:	movt	r1, #1
   12a20:	mov	r2, #5
   12a24:	bl	11174 <dcgettext@plt>
   12a28:	mov	r4, r0
   12a2c:	b	12884 <__assert_fail@plt+0x1470>
   12a30:	ldrd	r0, [sp, #80]	; 0x50
   12a34:	mov	r4, #0
   12a38:	str	r4, [sp]
   12a3c:	subs	r6, r0, r2
   12a40:	ldr	r0, [sp, #32]
   12a44:	sbc	r7, r1, r3
   12a48:	mov	r2, r6
   12a4c:	mov	r3, r7
   12a50:	bl	111ec <lseek64@plt>
   12a54:	cmp	r0, #0
   12a58:	sbcs	r3, r1, #0
   12a5c:	bge	12508 <__assert_fail@plt+0x10f4>
   12a60:	mov	r1, r7
   12a64:	add	r2, sp, #152	; 0x98
   12a68:	mov	r0, r6
   12a6c:	bl	18d78 <__assert_fail@plt+0x7964>
   12a70:	mov	r6, r0
   12a74:	bl	112dc <__errno_location@plt>
   12a78:	ldr	r7, [r0]
   12a7c:	mov	r2, #5
   12a80:	movw	r1, #62728	; 0xf508
   12a84:	movt	r1, #1
   12a88:	mov	r0, r4
   12a8c:	bl	11174 <dcgettext@plt>
   12a90:	mov	r5, r0
   12a94:	mov	r1, #3
   12a98:	ldr	r2, [sp, #72]	; 0x48
   12a9c:	mov	r0, r4
   12aa0:	bl	1c080 <__assert_fail@plt+0xac6c>
   12aa4:	mov	r3, r0
   12aa8:	mov	r1, r7
   12aac:	str	r6, [sp]
   12ab0:	mov	r0, r4
   12ab4:	mov	r2, r5
   12ab8:	bl	1121c <error@plt>
   12abc:	mov	r0, #1
   12ac0:	bl	11294 <exit@plt>
   12ac4:	movw	r1, #62544	; 0xf450
   12ac8:	movt	r1, #1
   12acc:	mov	r2, #5
   12ad0:	bl	11174 <dcgettext@plt>
   12ad4:	mov	r4, r0
   12ad8:	b	12250 <__assert_fail@plt+0xe3c>
   12adc:	mov	r9, #80	; 0x50
   12ae0:	ldr	r2, [sp, #88]	; 0x58
   12ae4:	movw	r4, #62540	; 0xf44c
   12ae8:	movt	r4, #1
   12aec:	mov	r6, #0
   12af0:	mul	r3, r9, r5
   12af4:	mvn	r8, #0
   12af8:	mov	r7, #1
   12afc:	add	r9, r2, r3
   12b00:	mov	sl, r2
   12b04:	str	r3, [sp, #32]
   12b08:	str	r9, [sp, #64]	; 0x40
   12b0c:	mov	r1, r4
   12b10:	ldr	r0, [sl]
   12b14:	bl	110cc <strcmp@plt>
   12b18:	cmp	r0, #0
   12b1c:	bne	12b48 <__assert_fail@plt+0x1734>
   12b20:	ldrb	r3, [sl, #44]	; 0x2c
   12b24:	cmp	r3, #0
   12b28:	bne	12b48 <__assert_fail@plt+0x1734>
   12b2c:	ldr	r3, [sl, #48]	; 0x30
   12b30:	cmp	r3, #0
   12b34:	blt	12b48 <__assert_fail@plt+0x1734>
   12b38:	ldr	r3, [sl, #40]	; 0x28
   12b3c:	and	r3, r3, #61440	; 0xf000
   12b40:	cmp	r3, #4096	; 0x1000
   12b44:	beq	12eb8 <__assert_fail@plt+0x1aa4>
   12b48:	add	r6, r6, #1
   12b4c:	add	sl, sl, #80	; 0x50
   12b50:	cmp	r9, sl
   12b54:	bne	12b0c <__assert_fail@plt+0x16f8>
   12b58:	cmp	r6, #0
   12b5c:	beq	12550 <__assert_fail@plt+0x113c>
   12b60:	add	r2, sp, #152	; 0x98
   12b64:	mov	r1, #1
   12b68:	mov	r0, #3
   12b6c:	bl	111c8 <__fxstat64@plt>
   12b70:	cmp	r0, #0
   12b74:	blt	13a40 <__assert_fail@plt+0x262c>
   12b78:	ldr	r3, [sp, #168]	; 0xa8
   12b7c:	ldrb	r2, [fp, #3]
   12b80:	and	r3, r3, #61440	; 0xf000
   12b84:	sub	r3, r3, #4096	; 0x1000
   12b88:	clz	r3, r3
   12b8c:	cmp	r2, #0
   12b90:	lsr	r3, r3, #5
   12b94:	strb	r3, [fp, #13]
   12b98:	bne	12c30 <__assert_fail@plt+0x181c>
   12b9c:	ldr	r7, [sp, #64]	; 0x40
   12ba0:	movw	r4, #62540	; 0xf44c
   12ba4:	movt	r4, #1
   12ba8:	ldr	r6, [sp, #88]	; 0x58
   12bac:	ldrb	r3, [r6, #44]	; 0x2c
   12bb0:	cmp	r3, #0
   12bb4:	bne	12bcc <__assert_fail@plt+0x17b8>
   12bb8:	mov	r1, r4
   12bbc:	ldr	r0, [r6]
   12bc0:	bl	110cc <strcmp@plt>
   12bc4:	cmp	r0, #0
   12bc8:	beq	12c30 <__assert_fail@plt+0x181c>
   12bcc:	add	r6, r6, #80	; 0x50
   12bd0:	cmp	r7, r6
   12bd4:	bne	12bac <__assert_fail@plt+0x1798>
   12bd8:	ldr	r1, [sp, #64]	; 0x40
   12bdc:	ldr	r3, [sp, #88]	; 0x58
   12be0:	ldr	r2, [r3, #48]	; 0x30
   12be4:	cmp	r2, #0
   12be8:	blt	12bf8 <__assert_fail@plt+0x17e4>
   12bec:	ldrb	r2, [r3, #45]	; 0x2d
   12bf0:	cmp	r2, #0
   12bf4:	bne	12c30 <__assert_fail@plt+0x181c>
   12bf8:	add	r3, r3, #80	; 0x50
   12bfc:	cmp	r1, r3
   12c00:	bne	12be0 <__assert_fail@plt+0x17cc>
   12c04:	ldr	r1, [sp, #64]	; 0x40
   12c08:	ldr	r3, [sp, #88]	; 0x58
   12c0c:	ldr	r2, [r3, #48]	; 0x30
   12c10:	cmp	r2, #0
   12c14:	blt	12c24 <__assert_fail@plt+0x1810>
   12c18:	ldrb	r2, [r3, #45]	; 0x2d
   12c1c:	cmp	r2, #0
   12c20:	beq	13714 <__assert_fail@plt+0x2300>
   12c24:	add	r3, r3, #80	; 0x50
   12c28:	cmp	r1, r3
   12c2c:	bne	12c0c <__assert_fail@plt+0x17f8>
   12c30:	ldr	r3, [fp, #8]
   12c34:	mov	r2, r3
   12c38:	mov	r3, #1
   12c3c:	cmp	r2, #0
   12c40:	strb	r3, [fp, #3]
   12c44:	mov	r3, r2
   12c48:	movne	r3, #0
   12c4c:	str	r2, [sp, #28]
   12c50:	strne	r3, [sp, #28]
   12c54:	bne	12c70 <__assert_fail@plt+0x185c>
   12c58:	movw	r3, #4424	; 0x1148
   12c5c:	movt	r3, #3
   12c60:	ldr	r3, [r3, #4]
   12c64:	cmp	r3, #2
   12c68:	cmpeq	r5, #1
   12c6c:	beq	13998 <__assert_fail@plt+0x2584>
   12c70:	mov	r3, #0
   12c74:	str	fp, [sp, #48]	; 0x30
   12c78:	str	r3, [sp, #68]	; 0x44
   12c7c:	movw	r3, #62540	; 0xf44c
   12c80:	movt	r3, #1
   12c84:	str	r3, [sp, #32]
   12c88:	ldr	r3, [sp, #28]
   12c8c:	and	r3, r3, #1
   12c90:	str	r3, [sp, #36]	; 0x24
   12c94:	ldr	r3, [sp, #60]	; 0x3c
   12c98:	mov	fp, r3
   12c9c:	str	r3, [sp, #40]	; 0x28
   12ca0:	mov	r8, #0
   12ca4:	ldr	r5, [sp, #88]	; 0x58
   12ca8:	mov	r6, r8
   12cac:	b	12d74 <__assert_fail@plt+0x1960>
   12cb0:	ldr	r9, [r5]
   12cb4:	ldr	r1, [sp, #32]
   12cb8:	mov	r0, r9
   12cbc:	bl	110cc <strcmp@plt>
   12cc0:	cmp	r0, #0
   12cc4:	beq	12e70 <__assert_fail@plt+0x1a5c>
   12cc8:	ldr	r3, [sp, #28]
   12ccc:	ldr	r7, [r5, #40]	; 0x28
   12cd0:	ldr	sl, [r5, #56]	; 0x38
   12cd4:	cmp	r3, sl
   12cd8:	beq	12d28 <__assert_fail@plt+0x1914>
   12cdc:	mov	r1, #3
   12ce0:	mov	r0, r4
   12ce4:	bl	173e4 <__assert_fail@plt+0x5fd0>
   12ce8:	ldr	r3, [sp, #28]
   12cec:	cmp	r3, #0
   12cf0:	bne	12e88 <__assert_fail@plt+0x1a74>
   12cf4:	cmp	r0, #0
   12cf8:	blt	12e90 <__assert_fail@plt+0x1a7c>
   12cfc:	orr	r2, r0, #2048	; 0x800
   12d00:	cmp	r0, r2
   12d04:	beq	12d1c <__assert_fail@plt+0x1908>
   12d08:	mov	r1, #4
   12d0c:	mov	r0, r4
   12d10:	bl	173e4 <__assert_fail@plt+0x5fd0>
   12d14:	cmn	r0, #1
   12d18:	beq	12e90 <__assert_fail@plt+0x1a7c>
   12d1c:	ldr	r3, [sp, #28]
   12d20:	mov	sl, r3
   12d24:	str	r3, [r5, #56]	; 0x38
   12d28:	cmp	sl, #0
   12d2c:	beq	12d9c <__assert_fail@plt+0x1988>
   12d30:	mvn	r2, #1
   12d34:	mvn	r3, #0
   12d38:	mov	r1, r4
   12d3c:	mov	r0, r9
   12d40:	bl	14fd4 <__assert_fail@plt+0x3bc0>
   12d44:	ldr	r3, [r5, #8]
   12d48:	orrs	r2, r0, r1
   12d4c:	orrne	r8, r8, #1
   12d50:	ldr	r2, [r5, #12]
   12d54:	adds	r3, r3, r0
   12d58:	adc	r2, r2, r1
   12d5c:	str	r3, [r5, #8]
   12d60:	str	r2, [r5, #12]
   12d64:	cmp	fp, r6
   12d68:	add	r5, r5, #80	; 0x50
   12d6c:	add	r6, r6, #1
   12d70:	beq	13028 <__assert_fail@plt+0x1c14>
   12d74:	ldrb	r3, [r5, #44]	; 0x2c
   12d78:	cmp	r3, #0
   12d7c:	bne	12d64 <__assert_fail@plt+0x1950>
   12d80:	ldr	r4, [r5, #48]	; 0x30
   12d84:	cmp	r4, #0
   12d88:	bge	12cb0 <__assert_fail@plt+0x189c>
   12d8c:	mov	r0, r5
   12d90:	ldr	r1, [sp, #36]	; 0x24
   12d94:	bl	15c04 <__assert_fail@plt+0x47f0>
   12d98:	b	12d64 <__assert_fail@plt+0x1950>
   12d9c:	add	r2, sp, #256	; 0x100
   12da0:	mov	r1, r4
   12da4:	mov	r0, #3
   12da8:	bl	111c8 <__fxstat64@plt>
   12dac:	cmp	r0, #0
   12db0:	bne	13174 <__assert_fail@plt+0x1d60>
   12db4:	ldr	r3, [r5, #40]	; 0x28
   12db8:	ldr	ip, [sp, #272]	; 0x110
   12dbc:	cmp	r3, ip
   12dc0:	beq	12eec <__assert_fail@plt+0x1ad8>
   12dc4:	ldr	r2, [sp, #336]	; 0x150
   12dc8:	and	r7, r7, #61440	; 0xf000
   12dcc:	mov	r0, #0
   12dd0:	mov	r1, #0
   12dd4:	cmp	r7, #32768	; 0x8000
   12dd8:	str	ip, [r5, #40]	; 0x28
   12ddc:	ldr	r3, [sp, #340]	; 0x154
   12de0:	strd	r2, [r5, #16]
   12de4:	strd	r0, [r5, #72]	; 0x48
   12de8:	beq	12fa0 <__assert_fail@plt+0x1b8c>
   12dec:	ldr	r3, [sp, #40]	; 0x28
   12df0:	cmp	r6, r3
   12df4:	beq	12e50 <__assert_fail@plt+0x1a3c>
   12df8:	ldr	r3, [sp, #48]	; 0x30
   12dfc:	ldrb	r3, [r3, #1]
   12e00:	cmp	r3, #0
   12e04:	streq	r6, [sp, #40]	; 0x28
   12e08:	beq	12e50 <__assert_fail@plt+0x1a3c>
   12e0c:	movw	sl, #4424	; 0x1148
   12e10:	movt	sl, #3
   12e14:	str	r6, [sp, #40]	; 0x28
   12e18:	ldrb	lr, [sl]
   12e1c:	movw	ip, #62684	; 0xf4dc
   12e20:	movt	ip, #1
   12e24:	mov	r3, r9
   12e28:	movw	r2, #65356	; 0xff4c
   12e2c:	movt	r2, #1
   12e30:	movw	r1, #62672	; 0xf4d0
   12e34:	movt	r1, #1
   12e38:	mov	r0, #1
   12e3c:	cmp	lr, #0
   12e40:	moveq	r2, ip
   12e44:	bl	11300 <__printf_chk@plt>
   12e48:	mov	r3, #0
   12e4c:	strb	r3, [sl]
   12e50:	ldr	r3, [r5, #56]	; 0x38
   12e54:	cmp	r3, #0
   12e58:	bne	12d30 <__assert_fail@plt+0x191c>
   12e5c:	cmp	r7, #32768	; 0x8000
   12e60:	beq	12ec4 <__assert_fail@plt+0x1ab0>
   12e64:	mvn	r2, #0
   12e68:	mov	r3, r2
   12e6c:	b	12d38 <__assert_fail@plt+0x1924>
   12e70:	movw	r1, #62544	; 0xf450
   12e74:	movt	r1, #1
   12e78:	mov	r2, #5
   12e7c:	bl	11174 <dcgettext@plt>
   12e80:	mov	r9, r0
   12e84:	b	12cc8 <__assert_fail@plt+0x18b4>
   12e88:	cmp	r0, #0
   12e8c:	bge	12d1c <__assert_fail@plt+0x1908>
   12e90:	bl	112dc <__errno_location@plt>
   12e94:	ldr	r3, [r5, #40]	; 0x28
   12e98:	ldr	sl, [r0]
   12e9c:	and	r3, r3, #61440	; 0xf000
   12ea0:	cmp	r3, #32768	; 0x8000
   12ea4:	bne	13a04 <__assert_fail@plt+0x25f0>
   12ea8:	cmp	sl, #1
   12eac:	bne	13a04 <__assert_fail@plt+0x25f0>
   12eb0:	ldr	sl, [r5, #56]	; 0x38
   12eb4:	b	12d28 <__assert_fail@plt+0x1914>
   12eb8:	strb	r7, [sl, #44]	; 0x2c
   12ebc:	str	r8, [sl, #48]	; 0x30
   12ec0:	b	12b4c <__assert_fail@plt+0x1738>
   12ec4:	ldrb	r3, [r5, #45]	; 0x2d
   12ec8:	cmp	r3, #0
   12ecc:	beq	12e64 <__assert_fail@plt+0x1a50>
   12ed0:	ldr	r1, [r5, #8]
   12ed4:	ldr	r2, [sp, #304]	; 0x130
   12ed8:	ldr	r0, [r5, #12]
   12edc:	ldr	r3, [sp, #308]	; 0x134
   12ee0:	subs	r2, r2, r1
   12ee4:	sbc	r3, r3, r0
   12ee8:	b	12d38 <__assert_fail@plt+0x1924>
   12eec:	and	r3, ip, #61440	; 0xf000
   12ef0:	cmp	r3, #32768	; 0x8000
   12ef4:	beq	131f4 <__assert_fail@plt+0x1de0>
   12ef8:	ldr	r2, [r5, #16]
   12efc:	ldr	lr, [sp, #336]	; 0x150
   12f00:	ldr	r1, [r5, #20]
   12f04:	ldr	r0, [sp, #340]	; 0x154
   12f08:	cmp	lr, r2
   12f0c:	movle	r3, #0
   12f10:	movgt	r3, #1
   12f14:	cmp	lr, r2
   12f18:	rsbge	r2, r3, #0
   12f1c:	rsblt	r2, r3, #1
   12f20:	cmp	r0, r1
   12f24:	movle	r3, #0
   12f28:	movgt	r3, #1
   12f2c:	cmp	r0, r1
   12f30:	rsbge	r3, r3, #0
   12f34:	rsblt	r3, r3, #1
   12f38:	add	r3, r3, r2, lsl #1
   12f3c:	cmp	r3, #0
   12f40:	bne	12dc4 <__assert_fail@plt+0x19b0>
   12f44:	movw	ip, #4424	; 0x1148
   12f48:	movt	ip, #3
   12f4c:	ldrd	r0, [r5, #72]	; 0x48
   12f50:	ldrd	r2, [ip, #16]
   12f54:	adds	r4, r0, #1
   12f58:	adc	lr, r1, #0
   12f5c:	cmp	r1, r3
   12f60:	str	r4, [r5, #72]	; 0x48
   12f64:	cmpeq	r0, r2
   12f68:	str	lr, [r5, #76]	; 0x4c
   12f6c:	bcc	12d64 <__assert_fail@plt+0x1950>
   12f70:	ldr	r3, [ip, #4]
   12f74:	cmp	r3, #1
   12f78:	bne	12d64 <__assert_fail@plt+0x1950>
   12f7c:	ldr	r1, [r5, #56]	; 0x38
   12f80:	mov	r0, r5
   12f84:	adds	r1, r1, #0
   12f88:	movne	r1, #1
   12f8c:	bl	15c04 <__assert_fail@plt+0x47f0>
   12f90:	mov	r2, #0
   12f94:	mov	r3, #0
   12f98:	strd	r2, [r5, #72]	; 0x48
   12f9c:	b	12d64 <__assert_fail@plt+0x1950>
   12fa0:	add	r3, sp, #304	; 0x130
   12fa4:	ldrd	r0, [r3]
   12fa8:	ldrd	r2, [r5, #8]
   12fac:	cmp	r0, r2
   12fb0:	sbcs	r3, r1, r3
   12fb4:	bge	12dec <__assert_fail@plt+0x19d8>
   12fb8:	mov	r2, #5
   12fbc:	movw	r1, #62708	; 0xf4f4
   12fc0:	movt	r1, #1
   12fc4:	mov	r0, #0
   12fc8:	bl	11174 <dcgettext@plt>
   12fcc:	mov	sl, r0
   12fd0:	mov	r2, r9
   12fd4:	mov	r1, #3
   12fd8:	mov	r0, #0
   12fdc:	bl	1c080 <__assert_fail@plt+0xac6c>
   12fe0:	mov	r1, #0
   12fe4:	mov	r3, r0
   12fe8:	mov	r2, sl
   12fec:	mov	r0, r1
   12ff0:	bl	1121c <error@plt>
   12ff4:	mov	r1, #0
   12ff8:	mov	r3, #0
   12ffc:	mov	r2, #0
   13000:	mov	r0, r4
   13004:	str	r1, [sp]
   13008:	bl	111ec <lseek64@plt>
   1300c:	cmp	r0, #0
   13010:	sbcs	r3, r1, #0
   13014:	blt	135fc <__assert_fail@plt+0x21e8>
   13018:	mov	r2, #0
   1301c:	mov	r3, #0
   13020:	strd	r2, [r5, #8]
   13024:	b	12dec <__assert_fail@plt+0x19d8>
   13028:	ldr	r3, [sp, #48]	; 0x30
   1302c:	ldrb	r1, [r3, #2]
   13030:	cmp	r1, #0
   13034:	beq	1304c <__assert_fail@plt+0x1c38>
   13038:	movw	r3, #4424	; 0x1148
   1303c:	movt	r3, #3
   13040:	ldr	r3, [r3, #4]
   13044:	cmp	r3, #1
   13048:	beq	130ac <__assert_fail@plt+0x1c98>
   1304c:	ldr	r0, [sp, #64]	; 0x40
   13050:	ldr	r2, [sp, #88]	; 0x58
   13054:	ldr	r3, [r2, #48]	; 0x30
   13058:	cmp	r3, #0
   1305c:	bge	130ac <__assert_fail@plt+0x1c98>
   13060:	ldrb	r3, [r2, #44]	; 0x2c
   13064:	eor	r3, r3, #1
   13068:	ands	r3, r1, r3
   1306c:	bne	130ac <__assert_fail@plt+0x1c98>
   13070:	add	r2, r2, #80	; 0x50
   13074:	cmp	r0, r2
   13078:	bne	13054 <__assert_fail@plt+0x1c40>
   1307c:	mov	r2, #5
   13080:	mov	r0, r3
   13084:	ldr	fp, [sp, #48]	; 0x30
   13088:	movw	r1, #1420	; 0x58c
   1308c:	movt	r1, #2
   13090:	mov	r4, r3
   13094:	bl	11174 <dcgettext@plt>
   13098:	mov	r2, r0
   1309c:	mov	r1, r4
   130a0:	mov	r0, r4
   130a4:	bl	1121c <error@plt>
   130a8:	b	12550 <__assert_fail@plt+0x113c>
   130ac:	ldr	r2, [sp, #36]	; 0x24
   130b0:	eor	r3, r8, #1
   130b4:	orrs	r2, r3, r2
   130b8:	beq	131bc <__assert_fail@plt+0x1da8>
   130bc:	movw	r3, #4548	; 0x11c4
   130c0:	movt	r3, #3
   130c4:	ldr	r0, [r3]
   130c8:	bl	111a4 <fflush_unlocked@plt>
   130cc:	subs	r2, r0, #0
   130d0:	bne	13a50 <__assert_fail@plt+0x263c>
   130d4:	ldr	r3, [sp, #48]	; 0x30
   130d8:	ldrb	r3, [r3, #13]
   130dc:	cmp	r3, #0
   130e0:	beq	13114 <__assert_fail@plt+0x1d00>
   130e4:	mov	r3, #1
   130e8:	mov	ip, #8
   130ec:	mov	r1, r3
   130f0:	add	r0, sp, #128	; 0x80
   130f4:	str	r3, [sp, #128]	; 0x80
   130f8:	strh	ip, [sp, #132]	; 0x84
   130fc:	bl	111bc <poll@plt>
   13100:	cmp	r0, #0
   13104:	blt	13114 <__assert_fail@plt+0x1d00>
   13108:	ldrh	r3, [sp, #134]	; 0x86
   1310c:	tst	r3, #8
   13110:	bne	1417c <__assert_fail@plt+0x2d68>
   13114:	cmp	r8, #0
   13118:	bne	12ca0 <__assert_fail@plt+0x188c>
   1311c:	ldr	r3, [sp, #68]	; 0x44
   13120:	cmp	r3, #0
   13124:	bne	1370c <__assert_fail@plt+0x22f8>
   13128:	ldr	r3, [sp, #48]	; 0x30
   1312c:	ldr	r0, [r3, #8]
   13130:	cmp	r0, #0
   13134:	bne	135d0 <__assert_fail@plt+0x21bc>
   13138:	vmov.f64	d0, d8
   1313c:	bl	1da68 <__assert_fail@plt+0xc654>
   13140:	cmp	r0, #0
   13144:	beq	12ca0 <__assert_fail@plt+0x188c>
   13148:	bl	112dc <__errno_location@plt>
   1314c:	movw	r1, #1644	; 0x66c
   13150:	movt	r1, #2
   13154:	ldr	r4, [r0]
   13158:	mov	r2, #5
   1315c:	mov	r0, #0
   13160:	bl	11174 <dcgettext@plt>
   13164:	mov	r2, r0
   13168:	mov	r0, #1
   1316c:	mov	r1, r4
   13170:	bl	1121c <error@plt>
   13174:	mvn	r3, #0
   13178:	str	r3, [r5, #48]	; 0x30
   1317c:	bl	112dc <__errno_location@plt>
   13180:	ldr	r7, [r0]
   13184:	mov	r2, r9
   13188:	mov	r1, #3
   1318c:	mov	r0, sl
   13190:	str	r7, [r5, #52]	; 0x34
   13194:	bl	1c080 <__assert_fail@plt+0xac6c>
   13198:	mov	r3, r0
   1319c:	mov	r1, r7
   131a0:	mov	r0, sl
   131a4:	movw	r2, #556	; 0x22c
   131a8:	movt	r2, #2
   131ac:	bl	1121c <error@plt>
   131b0:	mov	r0, r4
   131b4:	bl	113fc <close@plt>
   131b8:	b	12d64 <__assert_fail@plt+0x1950>
   131bc:	ldr	r3, [sp, #48]	; 0x30
   131c0:	ldrb	r3, [r3, #13]
   131c4:	cmp	r3, #0
   131c8:	beq	12ca0 <__assert_fail@plt+0x188c>
   131cc:	mov	r3, #1
   131d0:	mov	ip, #8
   131d4:	mov	r1, r3
   131d8:	add	r0, sp, #128	; 0x80
   131dc:	str	r3, [sp, #128]	; 0x80
   131e0:	strh	ip, [sp, #132]	; 0x84
   131e4:	bl	111bc <poll@plt>
   131e8:	cmp	r0, #0
   131ec:	bge	13108 <__assert_fail@plt+0x1cf4>
   131f0:	b	12ca0 <__assert_fail@plt+0x188c>
   131f4:	add	r3, sp, #304	; 0x130
   131f8:	ldrd	r0, [r5, #8]
   131fc:	ldrd	r2, [r3]
   13200:	cmp	r1, r3
   13204:	cmpeq	r0, r2
   13208:	bne	12dc4 <__assert_fail@plt+0x19b0>
   1320c:	b	12ef8 <__assert_fail@plt+0x1ae4>
   13210:	mov	r2, #5
   13214:	mov	r0, r7
   13218:	strb	r7, [fp, #2]
   1321c:	movw	r1, #864	; 0x360
   13220:	movt	r1, #2
   13224:	bl	11174 <dcgettext@plt>
   13228:	mov	r2, r0
   1322c:	mov	r1, r7
   13230:	mov	r0, r7
   13234:	bl	1121c <error@plt>
   13238:	b	11e98 <__assert_fail@plt+0xa84>
   1323c:	movw	r0, #8200	; 0x2008
   13240:	mov	r5, #0
   13244:	bl	1d1e0 <__assert_fail@plt+0xbdcc>
   13248:	add	r3, r0, #8192	; 0x2000
   1324c:	mov	r4, r0
   13250:	movw	r0, #8200	; 0x2008
   13254:	mov	r6, r5
   13258:	str	r5, [r3]
   1325c:	mov	r9, r4
   13260:	str	r5, [r3, #4]
   13264:	bl	1d1e0 <__assert_fail@plt+0xbdcc>
   13268:	ldr	r3, [sp, #32]
   1326c:	mov	r5, r0
   13270:	str	r3, [sp, #48]	; 0x30
   13274:	str	fp, [sp, #92]	; 0x5c
   13278:	b	132b4 <__assert_fail@plt+0x1ea0>
   1327c:	add	r2, r4, #8192	; 0x2000
   13280:	ldrd	r8, [sp, #40]	; 0x28
   13284:	mov	r1, #0
   13288:	ldr	r3, [r2]
   1328c:	str	r5, [r7, #4]
   13290:	cmp	r9, r1
   13294:	sub	r3, r6, r3
   13298:	cmpeq	r8, r3
   1329c:	bcs	13334 <__assert_fail@plt+0x1f20>
   132a0:	mov	r0, r4
   132a4:	ldr	r4, [r2, #4]
   132a8:	mov	r6, r3
   132ac:	mov	r9, r5
   132b0:	mov	r5, r0
   132b4:	mov	r2, #8192	; 0x2000
   132b8:	mov	r1, r5
   132bc:	ldr	r0, [sp, #48]	; 0x30
   132c0:	bl	1c9c0 <__assert_fail@plt+0xb5ac>
   132c4:	sub	r3, r0, #1
   132c8:	cmn	r3, #3
   132cc:	bhi	13340 <__assert_fail@plt+0x1f2c>
   132d0:	ldrd	r2, [sp, #128]	; 0x80
   132d4:	add	r8, r5, #8192	; 0x2000
   132d8:	add	r7, r9, #8192	; 0x2000
   132dc:	add	r6, r6, r0
   132e0:	adds	sl, r2, r0
   132e4:	mov	r2, #0
   132e8:	adc	fp, r3, #0
   132ec:	strd	sl, [sp, #128]	; 0x80
   132f0:	str	r0, [r8]
   132f4:	ldr	r3, [r7]
   132f8:	str	r2, [r8, #4]
   132fc:	add	r2, r0, r3
   13300:	cmp	r2, #8192	; 0x2000
   13304:	bcs	1327c <__assert_fail@plt+0x1e68>
   13308:	mov	r2, r0
   1330c:	mov	r1, r5
   13310:	add	r0, r9, r3
   13314:	bl	1112c <memcpy@plt>
   13318:	ldr	r3, [r7]
   1331c:	mov	r0, r5
   13320:	mov	r5, r9
   13324:	ldr	r2, [r8]
   13328:	add	r3, r3, r2
   1332c:	str	r3, [r7]
   13330:	b	132ac <__assert_fail@plt+0x1e98>
   13334:	movw	r0, #8200	; 0x2008
   13338:	bl	1d1e0 <__assert_fail@plt+0xbdcc>
   1333c:	b	132ac <__assert_fail@plt+0x1e98>
   13340:	ldr	fp, [sp, #92]	; 0x5c
   13344:	mov	sl, r0
   13348:	mov	r0, r5
   1334c:	bl	1760c <__assert_fail@plt+0x61f8>
   13350:	cmn	sl, #1
   13354:	movne	r0, r4
   13358:	movne	r2, fp
   1335c:	ldrdne	sl, [sp, #40]	; 0x28
   13360:	bne	13370 <__assert_fail@plt+0x1f5c>
   13364:	b	136c4 <__assert_fail@plt+0x22b0>
   13368:	ldr	r0, [r5, #4]
   1336c:	mov	r6, r3
   13370:	add	r5, r0, #8192	; 0x2000
   13374:	mov	r9, #0
   13378:	ldr	r1, [r5]
   1337c:	cmp	fp, r9
   13380:	sub	r3, r6, r1
   13384:	cmpeq	sl, r3
   13388:	bcc	13368 <__assert_fail@plt+0x1f54>
   1338c:	ldrd	r8, [sp, #40]	; 0x28
   13390:	mov	r3, #0
   13394:	mov	fp, r2
   13398:	cmp	r9, r3
   1339c:	cmpeq	r8, r6
   133a0:	movcc	r3, r8
   133a4:	movcs	r6, #0
   133a8:	subcc	r6, r6, r3
   133ac:	add	r0, r0, r6
   133b0:	sub	r1, r1, r6
   133b4:	bl	14340 <__assert_fail@plt+0x2f2c>
   133b8:	ldr	r0, [r5, #4]
   133bc:	b	133d0 <__assert_fail@plt+0x1fbc>
   133c0:	add	r5, r0, #8192	; 0x2000
   133c4:	ldr	r1, [r5]
   133c8:	bl	14340 <__assert_fail@plt+0x2f2c>
   133cc:	ldr	r0, [r5, #4]
   133d0:	cmp	r0, #0
   133d4:	bne	133c0 <__assert_fail@plt+0x1fac>
   133d8:	mov	r3, #1
   133dc:	mov	r0, r4
   133e0:	str	r3, [sp, #36]	; 0x24
   133e4:	b	133f8 <__assert_fail@plt+0x1fe4>
   133e8:	add	r3, r0, #8192	; 0x2000
   133ec:	ldr	r4, [r3, #4]
   133f0:	bl	1760c <__assert_fail@plt+0x61f8>
   133f4:	mov	r0, r4
   133f8:	cmp	r0, #0
   133fc:	bne	133e8 <__assert_fail@plt+0x1fd4>
   13400:	b	121ec <__assert_fail@plt+0xdd8>
   13404:	movw	r1, #62544	; 0xf450
   13408:	movt	r1, #1
   1340c:	mov	r2, #5
   13410:	bl	11174 <dcgettext@plt>
   13414:	mov	r4, r0
   13418:	b	1234c <__assert_fail@plt+0xf38>
   1341c:	mov	r4, #1
   13420:	mov	r3, #0
   13424:	ldr	r0, [sp, #32]
   13428:	mov	r2, #0
   1342c:	str	r4, [sp]
   13430:	bl	111ec <lseek64@plt>
   13434:	cmp	r0, #0
   13438:	mov	r6, r0
   1343c:	sbcs	r3, r1, #0
   13440:	mov	r7, r1
   13444:	bge	124d4 <__assert_fail@plt+0x10c0>
   13448:	add	r2, sp, #152	; 0x98
   1344c:	mov	r1, #0
   13450:	mov	r0, #0
   13454:	bl	18d78 <__assert_fail@plt+0x7964>
   13458:	mov	r6, r0
   1345c:	bl	112dc <__errno_location@plt>
   13460:	ldr	r7, [r0]
   13464:	mov	r2, #5
   13468:	movw	r1, #1236	; 0x4d4
   1346c:	movt	r1, #2
   13470:	mov	r0, #0
   13474:	bl	11174 <dcgettext@plt>
   13478:	mov	r5, r0
   1347c:	mov	r1, #3
   13480:	ldr	r2, [sp, #72]	; 0x48
   13484:	mov	r0, #0
   13488:	bl	1c080 <__assert_fail@plt+0xac6c>
   1348c:	mov	r3, r0
   13490:	mov	r1, r7
   13494:	str	r6, [sp]
   13498:	mov	r0, #0
   1349c:	mov	r2, r5
   134a0:	bl	1121c <error@plt>
   134a4:	mov	r0, r4
   134a8:	bl	11294 <exit@plt>
   134ac:	bl	112dc <__errno_location@plt>
   134b0:	ldr	r4, [r0]
   134b4:	mov	r2, #5
   134b8:	movw	r1, #62596	; 0xf484
   134bc:	movt	r1, #1
   134c0:	mov	r0, #0
   134c4:	bl	11174 <dcgettext@plt>
   134c8:	mov	r3, #0
   134cc:	mov	r6, r0
   134d0:	ldr	r1, [sp, #72]	; 0x48
   134d4:	mov	r0, #4
   134d8:	str	r3, [sp, #36]	; 0x24
   134dc:	bl	1b500 <__assert_fail@plt+0xa0ec>
   134e0:	mov	r3, r0
   134e4:	mov	r2, r6
   134e8:	mov	r1, r4
   134ec:	mov	r0, #0
   134f0:	bl	1121c <error@plt>
   134f4:	b	121cc <__assert_fail@plt+0xdb8>
   134f8:	mov	ip, #0
   134fc:	b	11c18 <__assert_fail@plt+0x804>
   13500:	mov	r1, #2
   13504:	ldr	r0, [sp, #32]
   13508:	ldrd	r4, [sp, #40]	; 0x28
   1350c:	str	r1, [sp]
   13510:	rsbs	r2, r4, #0
   13514:	rsc	r3, r5, #0
   13518:	bl	111ec <lseek64@plt>
   1351c:	mvn	r3, #0
   13520:	mvn	r2, #0
   13524:	cmp	r1, r3
   13528:	mov	r6, r0
   1352c:	cmpeq	r0, r2
   13530:	mov	r7, r1
   13534:	beq	12490 <__assert_fail@plt+0x107c>
   13538:	adds	r1, r6, r4
   1353c:	adc	r3, r7, r5
   13540:	str	r1, [sp, #80]	; 0x50
   13544:	str	r3, [sp, #84]	; 0x54
   13548:	b	12474 <__assert_fail@plt+0x1060>
   1354c:	mov	r3, r9
   13550:	mov	r2, r8
   13554:	str	r6, [sp]
   13558:	ldr	r0, [sp, #32]
   1355c:	bl	111ec <lseek64@plt>
   13560:	cmp	r0, #0
   13564:	sbcs	r3, r1, #0
   13568:	bge	11d70 <__assert_fail@plt+0x95c>
   1356c:	mov	r1, r9
   13570:	add	r2, sp, #152	; 0x98
   13574:	mov	r0, r8
   13578:	bl	18d78 <__assert_fail@plt+0x7964>
   1357c:	mov	r5, r0
   13580:	bl	112dc <__errno_location@plt>
   13584:	ldr	r8, [r0]
   13588:	mov	r2, #5
   1358c:	movw	r1, #62728	; 0xf508
   13590:	movt	r1, #1
   13594:	mov	r0, r6
   13598:	bl	11174 <dcgettext@plt>
   1359c:	mov	r4, r0
   135a0:	mov	r1, #3
   135a4:	ldr	r2, [sp, #72]	; 0x48
   135a8:	mov	r0, r6
   135ac:	bl	1c080 <__assert_fail@plt+0xac6c>
   135b0:	mov	r3, r0
   135b4:	mov	r1, r8
   135b8:	str	r5, [sp]
   135bc:	mov	r0, r6
   135c0:	mov	r2, r4
   135c4:	bl	1121c <error@plt>
   135c8:	mov	r0, r7
   135cc:	bl	11294 <exit@plt>
   135d0:	ldr	r1, [sp, #68]	; 0x44
   135d4:	bl	1127c <kill@plt>
   135d8:	cmp	r0, #0
   135dc:	beq	13138 <__assert_fail@plt+0x1d24>
   135e0:	bl	112dc <__errno_location@plt>
   135e4:	ldr	r3, [r0]
   135e8:	cmp	r3, #1
   135ec:	ldrne	r3, [sp, #52]	; 0x34
   135f0:	strne	r3, [sp, #68]	; 0x44
   135f4:	bne	12ca0 <__assert_fail@plt+0x188c>
   135f8:	b	13138 <__assert_fail@plt+0x1d24>
   135fc:	add	r2, sp, #128	; 0x80
   13600:	mov	r1, #0
   13604:	mov	r0, #0
   13608:	bl	18d78 <__assert_fail@plt+0x7964>
   1360c:	mov	r5, r0
   13610:	bl	112dc <__errno_location@plt>
   13614:	ldr	r6, [r0]
   13618:	mov	r2, #5
   1361c:	movw	r1, #62728	; 0xf508
   13620:	movt	r1, #1
   13624:	mov	r0, #0
   13628:	bl	11174 <dcgettext@plt>
   1362c:	mov	r4, r0
   13630:	mov	r2, r9
   13634:	mov	r1, #3
   13638:	mov	r0, #0
   1363c:	bl	1c080 <__assert_fail@plt+0xac6c>
   13640:	mov	r3, r0
   13644:	mov	r1, r6
   13648:	str	r5, [sp]
   1364c:	mov	r0, #0
   13650:	mov	r2, r4
   13654:	bl	1121c <error@plt>
   13658:	mov	r0, #1
   1365c:	bl	11294 <exit@plt>
   13660:	movw	r1, #62936	; 0xf5d8
   13664:	movt	r1, #1
   13668:	mov	r2, #5
   1366c:	mov	r0, #0
   13670:	bl	11174 <dcgettext@plt>
   13674:	b	123d8 <__assert_fail@plt+0xfc4>
   13678:	movw	r1, #62544	; 0xf450
   1367c:	movt	r1, #1
   13680:	mov	r2, #5
   13684:	bl	11174 <dcgettext@plt>
   13688:	mov	r4, r0
   1368c:	b	123b0 <__assert_fail@plt+0xf9c>
   13690:	mov	r2, #5
   13694:	movw	r1, #800	; 0x320
   13698:	movt	r1, #2
   1369c:	mov	r0, r4
   136a0:	str	r3, [sp, #28]
   136a4:	bl	11174 <dcgettext@plt>
   136a8:	mov	r2, r0
   136ac:	mov	r1, r4
   136b0:	ldr	r3, [sp, #28]
   136b4:	mov	r0, #1
   136b8:	bl	1121c <error@plt>
   136bc:	mov	r0, #1
   136c0:	bl	16634 <__assert_fail@plt+0x5220>
   136c4:	bl	112dc <__errno_location@plt>
   136c8:	ldr	r5, [r0]
   136cc:	mov	r2, #5
   136d0:	movw	r1, #62596	; 0xf484
   136d4:	movt	r1, #1
   136d8:	mov	r0, #0
   136dc:	bl	11174 <dcgettext@plt>
   136e0:	mov	r6, r0
   136e4:	mov	r0, #4
   136e8:	ldr	r1, [sp, #72]	; 0x48
   136ec:	bl	1b500 <__assert_fail@plt+0xa0ec>
   136f0:	mov	r3, r0
   136f4:	mov	r2, r6
   136f8:	mov	r0, #0
   136fc:	mov	r1, r5
   13700:	bl	1121c <error@plt>
   13704:	mov	r0, r4
   13708:	b	133f8 <__assert_fail@plt+0x1fe4>
   1370c:	ldr	fp, [sp, #48]	; 0x30
   13710:	b	12550 <__assert_fail@plt+0x113c>
   13714:	add	r3, sp, #256	; 0x100
   13718:	mov	r4, r2
   1371c:	mov	r6, #80	; 0x50
   13720:	str	r3, [sp, #48]	; 0x30
   13724:	str	r2, [sp, #92]	; 0x5c
   13728:	mul	r3, r6, r4
   1372c:	mov	r0, #3
   13730:	ldr	r2, [sp, #48]	; 0x30
   13734:	ldr	r1, [sp, #88]	; 0x58
   13738:	ldr	r1, [r1, r3]
   1373c:	bl	11408 <__lxstat64@plt>
   13740:	cmp	r0, #0
   13744:	bne	13758 <__assert_fail@plt+0x2344>
   13748:	ldr	r3, [sp, #272]	; 0x110
   1374c:	and	r3, r3, #61440	; 0xf000
   13750:	cmp	r3, #40960	; 0xa000
   13754:	beq	12c30 <__assert_fail@plt+0x181c>
   13758:	ldr	r3, [sp, #60]	; 0x3c
   1375c:	cmp	r4, r3
   13760:	add	r4, r4, #1
   13764:	bne	13728 <__assert_fail@plt+0x2314>
   13768:	ldr	r3, [sp, #88]	; 0x58
   1376c:	ldr	r2, [r3, #48]	; 0x30
   13770:	cmp	r2, #0
   13774:	blt	1378c <__assert_fail@plt+0x2378>
   13778:	ldr	r2, [r3, #40]	; 0x28
   1377c:	and	r2, r2, #61440	; 0xf000
   13780:	cmp	r2, #32768	; 0x8000
   13784:	cmpne	r2, #4096	; 0x1000
   13788:	bne	12c30 <__assert_fail@plt+0x181c>
   1378c:	ldr	r2, [sp, #64]	; 0x40
   13790:	add	r3, r3, #80	; 0x50
   13794:	cmp	r2, r3
   13798:	bne	1376c <__assert_fail@plt+0x2358>
   1379c:	ldr	r3, [sp, #56]	; 0x38
   137a0:	cmp	r3, #0
   137a4:	bne	137bc <__assert_fail@plt+0x23a8>
   137a8:	movw	r3, #4424	; 0x1148
   137ac:	movt	r3, #3
   137b0:	ldr	r3, [r3, #4]
   137b4:	cmp	r3, #2
   137b8:	beq	12c30 <__assert_fail@plt+0x181c>
   137bc:	bl	112ac <inotify_init@plt>
   137c0:	subs	r3, r0, #0
   137c4:	str	r3, [sp, #36]	; 0x24
   137c8:	blt	13968 <__assert_fail@plt+0x2554>
   137cc:	movw	r3, #4548	; 0x11c4
   137d0:	movt	r3, #3
   137d4:	ldr	r0, [r3]
   137d8:	bl	111a4 <fflush_unlocked@plt>
   137dc:	subs	r8, r0, #0
   137e0:	bne	13a50 <__assert_fail@plt+0x263c>
   137e4:	movw	r3, #17116	; 0x42dc
   137e8:	movt	r3, #1
   137ec:	str	r8, [sp]
   137f0:	movw	r2, #17100	; 0x42cc
   137f4:	movt	r2, #1
   137f8:	mov	r1, r8
   137fc:	mov	r0, r5
   13800:	bl	17fac <__assert_fail@plt+0x6b98>
   13804:	subs	r3, r0, #0
   13808:	str	r3, [sp, #28]
   1380c:	beq	140a4 <__assert_fail@plt+0x2c90>
   13810:	movw	r9, #4424	; 0x1148
   13814:	movt	r9, #3
   13818:	ldr	r4, [sp, #88]	; 0x58
   1381c:	movw	r1, #1388	; 0x56c
   13820:	movt	r1, #2
   13824:	str	r5, [sp, #40]	; 0x28
   13828:	ldr	r2, [r9, #4]
   1382c:	movw	r3, #3078	; 0xc06
   13830:	mov	sl, r8
   13834:	str	r8, [sp, #68]	; 0x44
   13838:	str	r1, [sp, #72]	; 0x48
   1383c:	movw	r1, #500	; 0x1f4
   13840:	movt	r1, #2
   13844:	str	r1, [sp, #76]	; 0x4c
   13848:	cmp	r2, #1
   1384c:	movne	r3, #2
   13850:	str	r3, [sp, #80]	; 0x50
   13854:	ldrb	r7, [r4, #44]	; 0x2c
   13858:	cmp	r7, #0
   1385c:	bne	13a7c <__assert_fail@plt+0x2668>
   13860:	ldr	r5, [r4]
   13864:	ldr	r6, [r9, #4]
   13868:	mov	r0, r5
   1386c:	bl	112a0 <strlen@plt>
   13870:	cmp	sl, r0
   13874:	mvn	r3, #0
   13878:	movcc	sl, r0
   1387c:	cmp	r6, #1
   13880:	str	r3, [r4, #60]	; 0x3c
   13884:	bne	138e4 <__assert_fail@plt+0x24d0>
   13888:	mov	r0, r5
   1388c:	bl	1722c <__assert_fail@plt+0x5e18>
   13890:	mov	r6, r0
   13894:	mov	r0, r5
   13898:	bl	16fbc <__assert_fail@plt+0x5ba8>
   1389c:	ldrb	r3, [r5, r6]
   138a0:	sub	r0, r0, r5
   138a4:	cmp	r6, #0
   138a8:	movw	r2, #1924	; 0x784
   138ac:	ldreq	r1, [sp, #76]	; 0x4c
   138b0:	str	r0, [r4, #68]	; 0x44
   138b4:	strb	r7, [r5, r6]
   138b8:	ldrne	r1, [r4]
   138bc:	str	r3, [sp, #96]	; 0x60
   138c0:	ldr	r0, [sp, #36]	; 0x24
   138c4:	bl	112d0 <inotify_add_watch@plt>
   138c8:	ldr	r2, [r4]
   138cc:	str	r0, [r4, #64]	; 0x40
   138d0:	ldr	r3, [sp, #96]	; 0x60
   138d4:	strb	r3, [r2, r6]
   138d8:	ldr	r3, [r4, #64]	; 0x40
   138dc:	cmp	r3, #0
   138e0:	blt	140a8 <__assert_fail@plt+0x2c94>
   138e4:	ldr	r1, [r4]
   138e8:	ldr	r0, [sp, #36]	; 0x24
   138ec:	ldr	r2, [sp, #80]	; 0x50
   138f0:	bl	112d0 <inotify_add_watch@plt>
   138f4:	cmp	r0, #0
   138f8:	str	r0, [r4, #60]	; 0x3c
   138fc:	bge	13a60 <__assert_fail@plt+0x264c>
   13900:	ldr	r3, [r4, #48]	; 0x30
   13904:	ldr	r2, [sp, #52]	; 0x34
   13908:	cmn	r3, #1
   1390c:	movne	r8, r2
   13910:	bl	112dc <__errno_location@plt>
   13914:	ldr	r6, [r0]
   13918:	bic	r3, r6, #16
   1391c:	cmp	r3, #12
   13920:	bne	13b4c <__assert_fail@plt+0x2738>
   13924:	ldr	r5, [sp, #40]	; 0x28
   13928:	movw	r1, #1360	; 0x550
   1392c:	movt	r1, #2
   13930:	mov	r2, #5
   13934:	mov	r0, #0
   13938:	bl	11174 <dcgettext@plt>
   1393c:	mov	r1, #0
   13940:	mov	r2, r0
   13944:	mov	r0, r1
   13948:	bl	1121c <error@plt>
   1394c:	ldr	r0, [sp, #28]
   13950:	bl	182ec <__assert_fail@plt+0x6ed8>
   13954:	ldr	r0, [sp, #36]	; 0x24
   13958:	bl	113fc <close@plt>
   1395c:	bl	112dc <__errno_location@plt>
   13960:	mov	r3, #0
   13964:	str	r3, [r0]
   13968:	bl	112dc <__errno_location@plt>
   1396c:	ldr	r4, [r0]
   13970:	mov	r2, #5
   13974:	movw	r1, #1560	; 0x618
   13978:	movt	r1, #2
   1397c:	mov	r0, #0
   13980:	bl	11174 <dcgettext@plt>
   13984:	mov	r2, r0
   13988:	mov	r0, #0
   1398c:	mov	r1, r4
   13990:	bl	1121c <error@plt>
   13994:	b	12c30 <__assert_fail@plt+0x181c>
   13998:	ldr	r2, [sp, #88]	; 0x58
   1399c:	ldr	r3, [r2, #48]	; 0x30
   139a0:	cmn	r3, #1
   139a4:	beq	12c70 <__assert_fail@plt+0x185c>
   139a8:	ldr	r3, [r2, #40]	; 0x28
   139ac:	and	r3, r3, #61440	; 0xf000
   139b0:	subs	r3, r3, #32768	; 0x8000
   139b4:	movne	r3, #1
   139b8:	str	r3, [sp, #28]
   139bc:	b	12c70 <__assert_fail@plt+0x185c>
   139c0:	bl	112dc <__errno_location@plt>
   139c4:	ldr	r5, [r0]
   139c8:	mov	r2, #5
   139cc:	mov	r0, r4
   139d0:	movw	r1, #536	; 0x218
   139d4:	movt	r1, #2
   139d8:	bl	11174 <dcgettext@plt>
   139dc:	mov	r4, r0
   139e0:	ldr	r0, [r6, #4]
   139e4:	bl	1c82c <__assert_fail@plt+0xb418>
   139e8:	movw	r2, #552	; 0x228
   139ec:	movt	r2, #2
   139f0:	str	r0, [sp]
   139f4:	mov	r1, r5
   139f8:	mov	r3, r4
   139fc:	mov	r0, #1
   13a00:	bl	1121c <error@plt>
   13a04:	mov	r2, #5
   13a08:	movw	r1, #1608	; 0x648
   13a0c:	movt	r1, #2
   13a10:	mov	r0, #0
   13a14:	bl	11174 <dcgettext@plt>
   13a18:	mov	r4, r0
   13a1c:	mov	r2, r9
   13a20:	mov	r1, #3
   13a24:	mov	r0, #0
   13a28:	bl	1c080 <__assert_fail@plt+0xac6c>
   13a2c:	mov	r3, r0
   13a30:	mov	r2, r4
   13a34:	mov	r1, sl
   13a38:	mov	r0, #1
   13a3c:	bl	1121c <error@plt>
   13a40:	bl	112dc <__errno_location@plt>
   13a44:	movw	r1, #62580	; 0xf474
   13a48:	movt	r1, #1
   13a4c:	b	13154 <__assert_fail@plt+0x1d40>
   13a50:	bl	112dc <__errno_location@plt>
   13a54:	movw	r1, #62760	; 0xf528
   13a58:	movt	r1, #1
   13a5c:	b	13154 <__assert_fail@plt+0x1d40>
   13a60:	mov	r1, r4
   13a64:	ldr	r0, [sp, #28]
   13a68:	bl	18814 <__assert_fail@plt+0x7400>
   13a6c:	cmp	r0, #0
   13a70:	beq	140a4 <__assert_fail@plt+0x2c90>
   13a74:	ldr	r3, [sp, #52]	; 0x34
   13a78:	str	r3, [sp, #68]	; 0x44
   13a7c:	ldr	r3, [sp, #64]	; 0x40
   13a80:	add	r4, r4, #80	; 0x50
   13a84:	cmp	r3, r4
   13a88:	bne	13854 <__assert_fail@plt+0x2440>
   13a8c:	ldr	r3, [r9, #4]
   13a90:	ldr	r5, [sp, #40]	; 0x28
   13a94:	cmp	r3, #2
   13a98:	beq	1403c <__assert_fail@plt+0x2c28>
   13a9c:	ldr	r3, [sp, #32]
   13aa0:	ldr	r6, [sp, #64]	; 0x40
   13aa4:	ldr	r2, [sp, #88]	; 0x58
   13aa8:	sub	r3, r3, #80	; 0x50
   13aac:	add	r3, r2, r3
   13ab0:	mov	r4, r2
   13ab4:	str	r3, [sp, #116]	; 0x74
   13ab8:	b	13b28 <__assert_fail@plt+0x2714>
   13abc:	ldr	r3, [r4, #48]	; 0x30
   13ac0:	cmn	r3, #1
   13ac4:	beq	13b10 <__assert_fail@plt+0x26fc>
   13ac8:	mov	r0, #3
   13acc:	ldr	r1, [r4]
   13ad0:	ldr	r2, [sp, #48]	; 0x30
   13ad4:	bl	113c0 <__xstat64@plt>
   13ad8:	cmp	r0, #0
   13adc:	bne	13b10 <__assert_fail@plt+0x26fc>
   13ae0:	add	r3, sp, #256	; 0x100
   13ae4:	ldrd	r0, [r4, #24]
   13ae8:	ldrd	r2, [r3]
   13aec:	cmp	r1, r3
   13af0:	cmpeq	r0, r2
   13af4:	bne	14058 <__assert_fail@plt+0x2c44>
   13af8:	add	r3, sp, #352	; 0x160
   13afc:	ldrd	r0, [r4, #32]
   13b00:	ldrd	r2, [r3]
   13b04:	cmp	r1, r3
   13b08:	cmpeq	r0, r2
   13b0c:	bne	14058 <__assert_fail@plt+0x2c44>
   13b10:	add	r1, sp, #116	; 0x74
   13b14:	mov	r0, r4
   13b18:	bl	154a8 <__assert_fail@plt+0x4094>
   13b1c:	add	r4, r4, #80	; 0x50
   13b20:	cmp	r6, r4
   13b24:	beq	13b90 <__assert_fail@plt+0x277c>
   13b28:	ldrb	r1, [r4, #44]	; 0x2c
   13b2c:	cmp	r1, #0
   13b30:	bne	13b1c <__assert_fail@plt+0x2708>
   13b34:	ldr	r3, [r9, #4]
   13b38:	cmp	r3, #1
   13b3c:	bne	13abc <__assert_fail@plt+0x26a8>
   13b40:	mov	r0, r4
   13b44:	bl	15c04 <__assert_fail@plt+0x47f0>
   13b48:	b	13b10 <__assert_fail@plt+0x26fc>
   13b4c:	ldr	r3, [r4, #52]	; 0x34
   13b50:	cmp	r6, r3
   13b54:	beq	13a7c <__assert_fail@plt+0x2668>
   13b58:	mov	r2, #5
   13b5c:	mov	r0, #0
   13b60:	ldr	r1, [sp, #72]	; 0x48
   13b64:	bl	11174 <dcgettext@plt>
   13b68:	mov	r7, r0
   13b6c:	mov	r0, #4
   13b70:	ldr	r1, [r4]
   13b74:	bl	1b500 <__assert_fail@plt+0xa0ec>
   13b78:	mov	r3, r0
   13b7c:	mov	r2, r7
   13b80:	mov	r1, r6
   13b84:	mov	r0, #0
   13b88:	bl	1121c <error@plt>
   13b8c:	b	13a7c <__assert_fail@plt+0x2668>
   13b90:	mov	r3, #0
   13b94:	add	r0, sl, #17
   13b98:	vldr	d10, [pc, #864]	; 13f00 <__assert_fail@plt+0x2aec>
   13b9c:	str	r3, [sp, #32]
   13ba0:	vldr	d9, [pc, #864]	; 13f08 <__assert_fail@plt+0x2af4>
   13ba4:	str	r3, [sp, #76]	; 0x4c
   13ba8:	mov	r3, #3
   13bac:	str	r3, [sp, #68]	; 0x44
   13bb0:	str	r0, [sp, #72]	; 0x48
   13bb4:	bl	1d1e0 <__assert_fail@plt+0xbdcc>
   13bb8:	str	r0, [sp, #40]	; 0x28
   13bbc:	str	r5, [sp, #104]	; 0x68
   13bc0:	ldr	r5, [sp, #36]	; 0x24
   13bc4:	ldr	r4, [r9, #4]
   13bc8:	cmp	r4, #1
   13bcc:	beq	13ce0 <__assert_fail@plt+0x28cc>
   13bd0:	ldr	r3, [sp, #32]
   13bd4:	ldr	r2, [sp, #76]	; 0x4c
   13bd8:	cmp	r3, r2
   13bdc:	bcs	13d24 <__assert_fail@plt+0x2910>
   13be0:	ldr	r3, [sp, #32]
   13be4:	ldr	r2, [sp, #40]	; 0x28
   13be8:	add	r1, r3, #16
   13bec:	add	r6, r2, r3
   13bf0:	ldm	r6, {r7, sl}
   13bf4:	ldr	r2, [r6, #12]
   13bf8:	ands	r4, sl, #1024	; 0x400
   13bfc:	add	r3, r2, r1
   13c00:	str	r3, [sp, #32]
   13c04:	beq	13cbc <__assert_fail@plt+0x28a8>
   13c08:	cmp	r2, #0
   13c0c:	movne	r4, #0
   13c10:	ldrne	r8, [sp, #88]	; 0x58
   13c14:	beq	13e68 <__assert_fail@plt+0x2a54>
   13c18:	add	r3, r6, #16
   13c1c:	str	r3, [sp, #96]	; 0x60
   13c20:	str	r5, [sp, #108]	; 0x6c
   13c24:	ldr	r5, [sp, #60]	; 0x3c
   13c28:	b	13c3c <__assert_fail@plt+0x2828>
   13c2c:	cmp	r4, r5
   13c30:	add	r8, r8, #80	; 0x50
   13c34:	add	r4, r4, #1
   13c38:	beq	13d1c <__assert_fail@plt+0x2908>
   13c3c:	ldr	r2, [r8, #64]	; 0x40
   13c40:	cmp	r2, r7
   13c44:	bne	13c2c <__assert_fail@plt+0x2818>
   13c48:	ldr	r1, [r8]
   13c4c:	ldr	r2, [r8, #68]	; 0x44
   13c50:	ldr	r0, [sp, #96]	; 0x60
   13c54:	add	r1, r1, r2
   13c58:	bl	110cc <strcmp@plt>
   13c5c:	cmp	r0, #0
   13c60:	bne	13c2c <__assert_fail@plt+0x2818>
   13c64:	mov	r3, #80	; 0x50
   13c68:	ands	sl, sl, #512	; 0x200
   13c6c:	ldr	r5, [sp, #108]	; 0x6c
   13c70:	mul	r8, r3, r4
   13c74:	ldr	r3, [sp, #88]	; 0x58
   13c78:	add	r4, r3, r8
   13c7c:	beq	13f10 <__assert_fail@plt+0x2afc>
   13c80:	ldr	r3, [r9, #4]
   13c84:	cmp	r3, #1
   13c88:	beq	1402c <__assert_fail@plt+0x2c18>
   13c8c:	cmp	r4, #0
   13c90:	beq	13bc4 <__assert_fail@plt+0x27b0>
   13c94:	ldr	r3, [r6, #4]
   13c98:	movw	r2, #3588	; 0xe04
   13c9c:	tst	r3, r2
   13ca0:	beq	13dec <__assert_fail@plt+0x29d8>
   13ca4:	tst	r3, #1024	; 0x400
   13ca8:	bne	13ee0 <__assert_fail@plt+0x2acc>
   13cac:	mov	r0, r4
   13cb0:	mov	r1, #0
   13cb4:	bl	15c04 <__assert_fail@plt+0x47f0>
   13cb8:	b	13bc4 <__assert_fail@plt+0x27b0>
   13cbc:	cmp	r2, #0
   13cc0:	ldrne	r8, [sp, #88]	; 0x58
   13cc4:	bne	13c18 <__assert_fail@plt+0x2804>
   13cc8:	str	r7, [sp, #316]	; 0x13c
   13ccc:	ldr	r0, [sp, #28]
   13cd0:	ldr	r1, [sp, #48]	; 0x30
   13cd4:	bl	17c28 <__assert_fail@plt+0x6814>
   13cd8:	mov	r4, r0
   13cdc:	b	13c8c <__assert_fail@plt+0x2878>
   13ce0:	ldrb	r3, [fp, #2]
   13ce4:	cmp	r3, #0
   13ce8:	bne	13bd0 <__assert_fail@plt+0x27bc>
   13cec:	ldr	r0, [sp, #28]
   13cf0:	bl	179b8 <__assert_fail@plt+0x65a4>
   13cf4:	subs	r6, r0, #0
   13cf8:	bne	13bd0 <__assert_fail@plt+0x27bc>
   13cfc:	mov	r2, #5
   13d00:	movw	r1, #1420	; 0x58c
   13d04:	movt	r1, #2
   13d08:	bl	11174 <dcgettext@plt>
   13d0c:	mov	r2, r0
   13d10:	mov	r1, r6
   13d14:	mov	r0, r4
   13d18:	bl	1121c <error@plt>
   13d1c:	ldr	r5, [sp, #108]	; 0x6c
   13d20:	b	13bc4 <__assert_fail@plt+0x27b0>
   13d24:	ldr	r8, [sp, #48]	; 0x30
   13d28:	ldr	r7, [sp, #92]	; 0x5c
   13d2c:	b	13d98 <__assert_fail@plt+0x2984>
   13d30:	cmp	r7, #0
   13d34:	bne	13ed8 <__assert_fail@plt+0x2ac4>
   13d38:	mov	r1, r7
   13d3c:	bl	1127c <kill@plt>
   13d40:	cmp	r0, #0
   13d44:	beq	13dac <__assert_fail@plt+0x2998>
   13d48:	bl	112dc <__errno_location@plt>
   13d4c:	ldr	r3, [r0]
   13d50:	cmp	r3, #1
   13d54:	movne	r2, r7
   13d58:	ldrne	r7, [sp, #52]	; 0x34
   13d5c:	beq	13dac <__assert_fail@plt+0x2998>
   13d60:	mov	r4, #1
   13d64:	add	ip, sp, #260	; 0x104
   13d68:	str	r5, [sp, #256]	; 0x100
   13d6c:	ldrb	r1, [fp, #13]
   13d70:	mov	r6, #0
   13d74:	mov	r3, #16
   13d78:	mov	r0, r8
   13d7c:	strh	r4, [ip]
   13d80:	str	r4, [sp, #264]	; 0x108
   13d84:	str	r6, [sp, #268]	; 0x10c
   13d88:	add	r1, r1, r4
   13d8c:	bl	111d4 <__poll_chk@plt>
   13d90:	cmp	r0, r6
   13d94:	bne	13e04 <__assert_fail@plt+0x29f0>
   13d98:	ldr	r0, [fp, #8]
   13d9c:	cmp	r0, #0
   13da0:	bne	13d30 <__assert_fail@plt+0x291c>
   13da4:	mvn	r2, #0
   13da8:	b	13d60 <__assert_fail@plt+0x294c>
   13dac:	vcmpe.f64	d8, #0.0
   13db0:	vmrs	APSR_nzcv, fpscr
   13db4:	bls	13dfc <__assert_fail@plt+0x29e8>
   13db8:	vcmpe.f64	d8, d10
   13dbc:	vmrs	APSR_nzcv, fpscr
   13dc0:	bpl	13da4 <__assert_fail@plt+0x2990>
   13dc4:	vmul.f64	d6, d8, d9
   13dc8:	vcvt.s32.f64	s15, d6
   13dcc:	vcvt.f64.s32	d5, s15
   13dd0:	vmov	r3, s15
   13dd4:	vcmpe.f64	d6, d5
   13dd8:	vmrs	APSR_nzcv, fpscr
   13ddc:	movgt	r2, #1
   13de0:	movle	r2, #0
   13de4:	add	r2, r3, r2
   13de8:	b	13d60 <__assert_fail@plt+0x294c>
   13dec:	mov	r0, r4
   13df0:	add	r1, sp, #116	; 0x74
   13df4:	bl	154a8 <__assert_fail@plt+0x4094>
   13df8:	b	13bc4 <__assert_fail@plt+0x27b0>
   13dfc:	mov	r2, #0
   13e00:	b	13d60 <__assert_fail@plt+0x294c>
   13e04:	str	r7, [sp, #92]	; 0x5c
   13e08:	blt	140e8 <__assert_fail@plt+0x2cd4>
   13e0c:	add	r3, sp, #268	; 0x10c
   13e10:	add	r3, r3, #2
   13e14:	ldrsh	r4, [r3]
   13e18:	cmp	r4, #0
   13e1c:	bne	1417c <__assert_fail@plt+0x2d68>
   13e20:	mov	r0, r5
   13e24:	ldr	r1, [sp, #40]	; 0x28
   13e28:	ldr	r2, [sp, #72]	; 0x48
   13e2c:	bl	1c9c0 <__assert_fail@plt+0xb5ac>
   13e30:	subs	r3, r0, #0
   13e34:	str	r3, [sp, #76]	; 0x4c
   13e38:	beq	13e9c <__assert_fail@plt+0x2a88>
   13e3c:	cmn	r3, #1
   13e40:	strne	r4, [sp, #32]
   13e44:	bne	13be0 <__assert_fail@plt+0x27cc>
   13e48:	bl	112dc <__errno_location@plt>
   13e4c:	ldr	r3, [r0]
   13e50:	cmp	r3, #22
   13e54:	beq	13e9c <__assert_fail@plt+0x2a88>
   13e58:	bl	112dc <__errno_location@plt>
   13e5c:	movw	r1, #1484	; 0x5cc
   13e60:	movt	r1, #2
   13e64:	b	13154 <__assert_fail@plt+0x1d40>
   13e68:	ldr	r2, [sp, #88]	; 0x58
   13e6c:	b	13e80 <__assert_fail@plt+0x2a6c>
   13e70:	ldr	r3, [sp, #64]	; 0x40
   13e74:	add	r2, r2, #80	; 0x50
   13e78:	cmp	r3, r2
   13e7c:	beq	13cc8 <__assert_fail@plt+0x28b4>
   13e80:	ldr	r3, [r2, #64]	; 0x40
   13e84:	cmp	r3, r7
   13e88:	bne	13e70 <__assert_fail@plt+0x2a5c>
   13e8c:	movw	r1, #1512	; 0x5e8
   13e90:	movt	r1, #2
   13e94:	ldr	r5, [sp, #104]	; 0x68
   13e98:	b	13930 <__assert_fail@plt+0x251c>
   13e9c:	ldr	r3, [sp, #68]	; 0x44
   13ea0:	cmp	r3, #0
   13ea4:	beq	13e58 <__assert_fail@plt+0x2a44>
   13ea8:	ldr	r0, [sp, #40]	; 0x28
   13eac:	ldrd	r2, [sp, #68]	; 0x44
   13eb0:	lsl	r1, r3, #1
   13eb4:	sub	r2, r2, #1
   13eb8:	mov	r3, #0
   13ebc:	str	r3, [sp, #32]
   13ec0:	str	r2, [sp, #68]	; 0x44
   13ec4:	str	r1, [sp, #72]	; 0x48
   13ec8:	str	r3, [sp, #76]	; 0x4c
   13ecc:	bl	1d24c <__assert_fail@plt+0xbe38>
   13ed0:	str	r0, [sp, #40]	; 0x28
   13ed4:	b	13bc4 <__assert_fail@plt+0x27b0>
   13ed8:	mov	r0, #0
   13edc:	bl	11294 <exit@plt>
   13ee0:	mov	r0, r5
   13ee4:	ldr	r1, [r4, #60]	; 0x3c
   13ee8:	bl	113d8 <inotify_rm_watch@plt>
   13eec:	mov	r1, r4
   13ef0:	ldr	r0, [sp, #28]
   13ef4:	bl	18a38 <__assert_fail@plt+0x7624>
   13ef8:	b	13cac <__assert_fail@plt+0x2898>
   13efc:	nop	{0}
   13f00:	andeq	r0, r0, r0
   13f04:	cmpmi	r0, sp, asr #4
   13f08:	andeq	r0, r0, r0
   13f0c:	addmi	r4, pc, r0
   13f10:	mov	r0, r5
   13f14:	ldr	r2, [sp, #80]	; 0x50
   13f18:	ldr	r3, [sp, #88]	; 0x58
   13f1c:	ldr	r1, [r3, r8]
   13f20:	bl	112d0 <inotify_add_watch@plt>
   13f24:	subs	r7, r0, #0
   13f28:	bge	13f84 <__assert_fail@plt+0x2b70>
   13f2c:	bl	112dc <__errno_location@plt>
   13f30:	ldr	r3, [r0]
   13f34:	str	r3, [sp, #96]	; 0x60
   13f38:	bic	r3, r3, #16
   13f3c:	cmp	r3, #12
   13f40:	beq	140e0 <__assert_fail@plt+0x2ccc>
   13f44:	mov	r2, #5
   13f48:	movw	r1, #1388	; 0x56c
   13f4c:	movt	r1, #2
   13f50:	mov	r0, sl
   13f54:	bl	11174 <dcgettext@plt>
   13f58:	ldr	r3, [sp, #88]	; 0x58
   13f5c:	mov	r2, r0
   13f60:	mov	r0, #4
   13f64:	str	r2, [sp, #108]	; 0x6c
   13f68:	ldr	r1, [r3, r8]
   13f6c:	bl	1b500 <__assert_fail@plt+0xa0ec>
   13f70:	mov	r3, r0
   13f74:	mov	r0, sl
   13f78:	ldr	r1, [sp, #96]	; 0x60
   13f7c:	ldr	r2, [sp, #108]	; 0x6c
   13f80:	bl	1121c <error@plt>
   13f84:	ldr	r1, [r4, #60]	; 0x3c
   13f88:	subs	r3, r7, r1
   13f8c:	movne	r3, #1
   13f90:	orrs	r3, r3, r1, lsr #31
   13f94:	beq	14020 <__assert_fail@plt+0x2c0c>
   13f98:	cmp	r1, #0
   13f9c:	blt	13fb4 <__assert_fail@plt+0x2ba0>
   13fa0:	mov	r0, r5
   13fa4:	bl	113d8 <inotify_rm_watch@plt>
   13fa8:	mov	r1, r4
   13fac:	ldr	r0, [sp, #28]
   13fb0:	bl	18a38 <__assert_fail@plt+0x7624>
   13fb4:	cmn	r7, #1
   13fb8:	str	r7, [r4, #60]	; 0x3c
   13fbc:	beq	13bc4 <__assert_fail@plt+0x27b0>
   13fc0:	mov	r1, r4
   13fc4:	ldr	r0, [sp, #28]
   13fc8:	bl	18a38 <__assert_fail@plt+0x7624>
   13fcc:	cmp	r0, #0
   13fd0:	cmpne	r4, r0
   13fd4:	mov	r8, r0
   13fd8:	beq	1400c <__assert_fail@plt+0x2bf8>
   13fdc:	ldr	r3, [r9, #4]
   13fe0:	cmp	r3, #1
   13fe4:	beq	14170 <__assert_fail@plt+0x2d5c>
   13fe8:	mvn	r3, #0
   13fec:	ldr	r0, [r8]
   13ff0:	ldr	r7, [r8, #48]	; 0x30
   13ff4:	str	r3, [r8, #60]	; 0x3c
   13ff8:	bl	142f4 <__assert_fail@plt+0x2ee0>
   13ffc:	mov	sl, r0
   14000:	add	r3, r7, #1
   14004:	cmp	r3, #1
   14008:	bhi	14114 <__assert_fail@plt+0x2d00>
   1400c:	mov	r1, r4
   14010:	ldr	r0, [sp, #28]
   14014:	bl	18814 <__assert_fail@plt+0x7400>
   14018:	cmp	r0, #0
   1401c:	beq	140a4 <__assert_fail@plt+0x2c90>
   14020:	ldr	r3, [r9, #4]
   14024:	cmp	r3, #1
   14028:	bne	13c94 <__assert_fail@plt+0x2880>
   1402c:	mov	r1, #0
   14030:	mov	r0, r4
   14034:	bl	15c04 <__assert_fail@plt+0x47f0>
   14038:	b	13c8c <__assert_fail@plt+0x2878>
   1403c:	cmp	r8, #0
   14040:	bne	1394c <__assert_fail@plt+0x2538>
   14044:	ldr	r3, [sp, #68]	; 0x44
   14048:	cmp	r3, #0
   1404c:	bne	13a9c <__assert_fail@plt+0x2688>
   14050:	mov	r0, #1
   14054:	bl	11294 <exit@plt>
   14058:	bl	112dc <__errno_location@plt>
   1405c:	mov	r2, #5
   14060:	movw	r1, #1404	; 0x57c
   14064:	movt	r1, #2
   14068:	ldr	r6, [r0]
   1406c:	mov	r0, #0
   14070:	bl	11174 <dcgettext@plt>
   14074:	mov	r7, r0
   14078:	ldr	r0, [r4]
   1407c:	bl	142f4 <__assert_fail@plt+0x2ee0>
   14080:	mov	r1, r0
   14084:	mov	r0, #4
   14088:	bl	1b500 <__assert_fail@plt+0xa0ec>
   1408c:	mov	r3, r0
   14090:	mov	r2, r7
   14094:	mov	r1, r6
   14098:	mov	r0, #0
   1409c:	bl	1121c <error@plt>
   140a0:	b	1394c <__assert_fail@plt+0x2538>
   140a4:	bl	1d798 <__assert_fail@plt+0xc384>
   140a8:	bl	112dc <__errno_location@plt>
   140ac:	ldr	r6, [r0]
   140b0:	ldr	r5, [sp, #40]	; 0x28
   140b4:	cmp	r6, #28
   140b8:	beq	13928 <__assert_fail@plt+0x2514>
   140bc:	movw	r1, #1324	; 0x52c
   140c0:	movt	r1, #2
   140c4:	mov	r2, #5
   140c8:	mov	r0, #0
   140cc:	bl	11174 <dcgettext@plt>
   140d0:	mov	r7, r0
   140d4:	mov	r0, #4
   140d8:	ldr	r1, [r4]
   140dc:	b	14088 <__assert_fail@plt+0x2c74>
   140e0:	ldr	r5, [sp, #104]	; 0x68
   140e4:	b	13928 <__assert_fail@plt+0x2514>
   140e8:	bl	112dc <__errno_location@plt>
   140ec:	ldr	r5, [r0]
   140f0:	mov	r2, #5
   140f4:	movw	r1, #1440	; 0x5a0
   140f8:	movt	r1, #2
   140fc:	mov	r0, r6
   14100:	bl	11174 <dcgettext@plt>
   14104:	mov	r2, r0
   14108:	mov	r0, r4
   1410c:	mov	r1, r5
   14110:	bl	1121c <error@plt>
   14114:	mov	r0, r7
   14118:	bl	113fc <close@plt>
   1411c:	cmp	r0, #0
   14120:	beq	1400c <__assert_fail@plt+0x2bf8>
   14124:	bl	112dc <__errno_location@plt>
   14128:	mov	r2, #5
   1412c:	movw	r1, #62688	; 0xf4e0
   14130:	movt	r1, #1
   14134:	ldr	r8, [r0]
   14138:	mov	r0, #0
   1413c:	bl	11174 <dcgettext@plt>
   14140:	mov	r2, r0
   14144:	mov	r1, sl
   14148:	mov	r0, #4
   1414c:	str	r2, [sp, #96]	; 0x60
   14150:	bl	1b500 <__assert_fail@plt+0xa0ec>
   14154:	mov	r3, r0
   14158:	mov	r1, r8
   1415c:	str	r7, [sp]
   14160:	mov	r0, #0
   14164:	ldr	r2, [sp, #96]	; 0x60
   14168:	bl	1121c <error@plt>
   1416c:	b	1400c <__assert_fail@plt+0x2bf8>
   14170:	mov	r1, #0
   14174:	bl	15c04 <__assert_fail@plt+0x47f0>
   14178:	b	13fe8 <__assert_fail@plt+0x2bd4>
   1417c:	mov	r0, #13
   14180:	bl	110c0 <raise@plt>
   14184:	b	14050 <__assert_fail@plt+0x2c3c>
   14188:	mov	r2, #5
   1418c:	movw	r1, #1100	; 0x44c
   14190:	movt	r1, #2
   14194:	mov	r0, #0
   14198:	bl	11174 <dcgettext@plt>
   1419c:	mov	r5, r0
   141a0:	movw	r1, #62540	; 0xf44c
   141a4:	movt	r1, #1
   141a8:	mov	r0, #4
   141ac:	bl	1b500 <__assert_fail@plt+0xa0ec>
   141b0:	mov	r3, r0
   141b4:	mov	r2, r5
   141b8:	mov	r0, r4
   141bc:	mov	r1, #0
   141c0:	bl	1121c <error@plt>
   141c4:	bl	112dc <__errno_location@plt>
   141c8:	movw	r2, #62540	; 0xf44c
   141cc:	movt	r2, #1
   141d0:	ldr	r1, [r0]
   141d4:	mov	r0, #1
   141d8:	bl	1121c <error@plt>
   141dc:	mov	fp, #0
   141e0:	mov	lr, #0
   141e4:	pop	{r1}		; (ldr r1, [sp], #4)
   141e8:	mov	r2, sp
   141ec:	push	{r2}		; (str r2, [sp, #-4]!)
   141f0:	push	{r0}		; (str r0, [sp, #-4]!)
   141f4:	ldr	ip, [pc, #16]	; 1420c <__assert_fail@plt+0x2df8>
   141f8:	push	{ip}		; (str ip, [sp, #-4]!)
   141fc:	ldr	r0, [pc, #12]	; 14210 <__assert_fail@plt+0x2dfc>
   14200:	ldr	r3, [pc, #12]	; 14214 <__assert_fail@plt+0x2e00>
   14204:	bl	1124c <__libc_start_main@plt>
   14208:	bl	113f0 <abort@plt>
   1420c:	ldrdeq	pc, [r1], -r0
   14210:	andeq	r1, r1, r0, lsr #8
   14214:	andeq	pc, r1, r0, ror r2	; <UNPREDICTABLE>
   14218:	ldr	r3, [pc, #20]	; 14234 <__assert_fail@plt+0x2e20>
   1421c:	ldr	r2, [pc, #20]	; 14238 <__assert_fail@plt+0x2e24>
   14220:	add	r3, pc, r3
   14224:	ldr	r2, [r3, r2]
   14228:	cmp	r2, #0
   1422c:	bxeq	lr
   14230:	b	11264 <__gmon_start__@plt>
   14234:	ldrdeq	ip, [r1], -r8
   14238:	andeq	r0, r0, r8, lsr r1
   1423c:	ldr	r0, [pc, #24]	; 1425c <__assert_fail@plt+0x2e48>
   14240:	ldr	r3, [pc, #24]	; 14260 <__assert_fail@plt+0x2e4c>
   14244:	cmp	r3, r0
   14248:	bxeq	lr
   1424c:	ldr	r3, [pc, #16]	; 14264 <__assert_fail@plt+0x2e50>
   14250:	cmp	r3, #0
   14254:	bxeq	lr
   14258:	bx	r3
   1425c:	andeq	r1, r3, ip, lsr #3
   14260:	andeq	r1, r3, ip, lsr #3
   14264:	andeq	r0, r0, r0
   14268:	ldr	r0, [pc, #36]	; 14294 <__assert_fail@plt+0x2e80>
   1426c:	ldr	r1, [pc, #36]	; 14298 <__assert_fail@plt+0x2e84>
   14270:	sub	r1, r1, r0
   14274:	asr	r1, r1, #2
   14278:	add	r1, r1, r1, lsr #31
   1427c:	asrs	r1, r1, #1
   14280:	bxeq	lr
   14284:	ldr	r3, [pc, #16]	; 1429c <__assert_fail@plt+0x2e88>
   14288:	cmp	r3, #0
   1428c:	bxeq	lr
   14290:	bx	r3
   14294:	andeq	r1, r3, ip, lsr #3
   14298:	andeq	r1, r3, ip, lsr #3
   1429c:	andeq	r0, r0, r0
   142a0:	push	{r4, lr}
   142a4:	ldr	r4, [pc, #24]	; 142c4 <__assert_fail@plt+0x2eb0>
   142a8:	ldrb	r3, [r4]
   142ac:	cmp	r3, #0
   142b0:	popne	{r4, pc}
   142b4:	bl	1423c <__assert_fail@plt+0x2e28>
   142b8:	mov	r3, #1
   142bc:	strb	r3, [r4]
   142c0:	pop	{r4, pc}
   142c4:	andeq	r1, r3, ip, asr #3
   142c8:	b	14268 <__assert_fail@plt+0x2e54>
   142cc:	ldr	r3, [r0, #60]	; 0x3c
   142d0:	udiv	r0, r3, r1
   142d4:	mls	r0, r0, r1, r3
   142d8:	bx	lr
   142dc:	ldr	r0, [r0, #60]	; 0x3c
   142e0:	ldr	r3, [r1, #60]	; 0x3c
   142e4:	sub	r0, r0, r3
   142e8:	clz	r0, r0
   142ec:	lsr	r0, r0, #5
   142f0:	bx	lr
   142f4:	movw	r1, #62540	; 0xf44c
   142f8:	movt	r1, #1
   142fc:	str	r4, [sp, #-8]!
   14300:	mov	r4, r0
   14304:	str	lr, [sp, #4]
   14308:	bl	110cc <strcmp@plt>
   1430c:	cmp	r0, #0
   14310:	beq	14324 <__assert_fail@plt+0x2f10>
   14314:	mov	r0, r4
   14318:	ldr	r4, [sp]
   1431c:	add	sp, sp, #4
   14320:	pop	{pc}		; (ldr pc, [sp], #4)
   14324:	movw	r1, #62544	; 0xf450
   14328:	movt	r1, #1
   1432c:	ldr	r4, [sp]
   14330:	mov	r2, #5
   14334:	ldr	lr, [sp, #4]
   14338:	add	sp, sp, #8
   1433c:	b	11174 <dcgettext@plt>
   14340:	strd	r4, [sp, #-16]!
   14344:	subs	r4, r1, #0
   14348:	str	r6, [sp, #8]
   1434c:	str	lr, [sp, #12]
   14350:	beq	14374 <__assert_fail@plt+0x2f60>
   14354:	movw	r5, #4548	; 0x11c4
   14358:	movt	r5, #3
   1435c:	mov	r2, r4
   14360:	mov	r1, #1
   14364:	ldr	r3, [r5]
   14368:	bl	11150 <fwrite_unlocked@plt>
   1436c:	cmp	r4, r0
   14370:	bhi	14384 <__assert_fail@plt+0x2f70>
   14374:	ldrd	r4, [sp]
   14378:	ldr	r6, [sp, #8]
   1437c:	add	sp, sp, #12
   14380:	pop	{pc}		; (ldr pc, [sp], #4)
   14384:	ldr	r0, [r5]
   14388:	bl	113a8 <clearerr_unlocked@plt>
   1438c:	bl	112dc <__errno_location@plt>
   14390:	ldr	r4, [r0]
   14394:	mov	r2, #5
   14398:	movw	r1, #62560	; 0xf460
   1439c:	movt	r1, #1
   143a0:	mov	r0, #0
   143a4:	bl	11174 <dcgettext@plt>
   143a8:	mov	r5, r0
   143ac:	movw	r1, #62580	; 0xf474
   143b0:	movt	r1, #1
   143b4:	mov	r0, #4
   143b8:	bl	1b500 <__assert_fail@plt+0xa0ec>
   143bc:	mov	r3, r0
   143c0:	mov	r2, r5
   143c4:	mov	r1, r4
   143c8:	mov	r0, #1
   143cc:	bl	1121c <error@plt>
   143d0:	strd	r4, [sp, #-36]!	; 0xffffffdc
   143d4:	mov	r5, r3
   143d8:	mov	r4, r2
   143dc:	strd	r6, [sp, #8]
   143e0:	strd	r8, [sp, #16]
   143e4:	strd	sl, [sp, #24]
   143e8:	str	lr, [sp, #32]
   143ec:	sub	sp, sp, #8192	; 0x2000
   143f0:	sub	sp, sp, #12
   143f4:	add	r3, sp, #8192	; 0x2000
   143f8:	add	r3, r3, #48	; 0x30
   143fc:	ldr	r8, [r3]
   14400:	orrs	r3, r4, r5
   14404:	str	r1, [sp]
   14408:	str	r0, [sp, #4]
   1440c:	beq	1448c <__assert_fail@plt+0x3078>
   14410:	movw	r9, #4560	; 0x11d0
   14414:	movt	r9, #3
   14418:	add	r1, sp, #8
   1441c:	mov	r2, #8192	; 0x2000
   14420:	ldr	r0, [sp]
   14424:	bl	1c9c0 <__assert_fail@plt+0xb5ac>
   14428:	subs	r1, r0, #0
   1442c:	beq	144c0 <__assert_fail@plt+0x30ac>
   14430:	cmn	r1, #1
   14434:	beq	144c8 <__assert_fail@plt+0x30b4>
   14438:	ldrd	r2, [r8]
   1443c:	add	r0, sp, #8
   14440:	add	r6, r0, r1
   14444:	ldrb	r7, [r9]
   14448:	adds	sl, r2, r1
   1444c:	adc	fp, r3, #0
   14450:	mov	r2, sl
   14454:	mov	r3, fp
   14458:	strd	r2, [r8]
   1445c:	sub	r2, r6, r0
   14460:	mov	r1, r7
   14464:	bl	11330 <memchr@plt>
   14468:	cmp	r0, #0
   1446c:	beq	14418 <__assert_fail@plt+0x3004>
   14470:	subs	r4, r4, #1
   14474:	add	r0, r0, #1
   14478:	sbc	r5, r5, #0
   1447c:	orrs	r3, r4, r5
   14480:	bne	1445c <__assert_fail@plt+0x3048>
   14484:	cmp	r6, r0
   14488:	bhi	144b0 <__assert_fail@plt+0x309c>
   1448c:	mov	r0, #0
   14490:	add	sp, sp, #8192	; 0x2000
   14494:	add	sp, sp, #12
   14498:	ldrd	r4, [sp]
   1449c:	ldrd	r6, [sp, #8]
   144a0:	ldrd	r8, [sp, #16]
   144a4:	ldrd	sl, [sp, #24]
   144a8:	add	sp, sp, #32
   144ac:	pop	{pc}		; (ldr pc, [sp], #4)
   144b0:	sub	r1, r6, r0
   144b4:	bl	14340 <__assert_fail@plt+0x2f2c>
   144b8:	mov	r0, #0
   144bc:	b	14490 <__assert_fail@plt+0x307c>
   144c0:	mvn	r0, #0
   144c4:	b	14490 <__assert_fail@plt+0x307c>
   144c8:	bl	112dc <__errno_location@plt>
   144cc:	ldr	r4, [r0]
   144d0:	mov	r2, #5
   144d4:	movw	r1, #62596	; 0xf484
   144d8:	movt	r1, #1
   144dc:	mov	r0, #0
   144e0:	bl	11174 <dcgettext@plt>
   144e4:	mov	r5, r0
   144e8:	mov	r0, #4
   144ec:	ldr	r1, [sp, #4]
   144f0:	bl	1b500 <__assert_fail@plt+0xa0ec>
   144f4:	mov	r3, r0
   144f8:	mov	r2, r5
   144fc:	mov	r0, #0
   14500:	mov	r1, r4
   14504:	bl	1121c <error@plt>
   14508:	mov	r0, #1
   1450c:	b	14490 <__assert_fail@plt+0x307c>
   14510:	strd	r4, [sp, #-24]!	; 0xffffffe8
   14514:	mov	r5, r3
   14518:	mov	r4, r2
   1451c:	strd	r6, [sp, #8]
   14520:	str	r8, [sp, #16]
   14524:	str	lr, [sp, #20]
   14528:	sub	sp, sp, #8192	; 0x2000
   1452c:	add	r3, sp, #8192	; 0x2000
   14530:	add	r3, r3, #24
   14534:	ldr	r8, [r3]
   14538:	orrs	r3, r4, r5
   1453c:	movne	r7, r0
   14540:	movne	r6, r1
   14544:	bne	14580 <__assert_fail@plt+0x316c>
   14548:	b	145b0 <__assert_fail@plt+0x319c>
   1454c:	cmn	r0, #1
   14550:	beq	145cc <__assert_fail@plt+0x31b8>
   14554:	ldm	r8, {ip, lr}
   14558:	adds	ip, ip, r0
   1455c:	adc	lr, lr, r3
   14560:	cmp	r3, r5
   14564:	cmpeq	r0, r4
   14568:	stm	r8, {ip, lr}
   1456c:	bhi	145a4 <__assert_fail@plt+0x3190>
   14570:	subs	r4, r4, r0
   14574:	sbc	r5, r5, r3
   14578:	orrs	r3, r4, r5
   1457c:	beq	145b0 <__assert_fail@plt+0x319c>
   14580:	mov	r2, #8192	; 0x2000
   14584:	mov	r1, sp
   14588:	mov	r0, r6
   1458c:	bl	1c9c0 <__assert_fail@plt+0xb5ac>
   14590:	cmp	r0, #0
   14594:	mov	r3, #0
   14598:	bne	1454c <__assert_fail@plt+0x3138>
   1459c:	mvn	r0, #0
   145a0:	b	145b4 <__assert_fail@plt+0x31a0>
   145a4:	sub	r1, r0, r4
   145a8:	add	r0, sp, r4
   145ac:	bl	14340 <__assert_fail@plt+0x2f2c>
   145b0:	mov	r0, #0
   145b4:	add	sp, sp, #8192	; 0x2000
   145b8:	ldrd	r4, [sp]
   145bc:	ldrd	r6, [sp, #8]
   145c0:	ldr	r8, [sp, #16]
   145c4:	add	sp, sp, #20
   145c8:	pop	{pc}		; (ldr pc, [sp], #4)
   145cc:	bl	112dc <__errno_location@plt>
   145d0:	ldr	r4, [r0]
   145d4:	mov	r2, #5
   145d8:	movw	r1, #62596	; 0xf484
   145dc:	movt	r1, #1
   145e0:	mov	r0, #0
   145e4:	bl	11174 <dcgettext@plt>
   145e8:	mov	r5, r0
   145ec:	mov	r1, r7
   145f0:	mov	r0, #4
   145f4:	bl	1b500 <__assert_fail@plt+0xa0ec>
   145f8:	mov	r3, r0
   145fc:	mov	r2, r5
   14600:	mov	r0, #0
   14604:	mov	r1, r4
   14608:	bl	1121c <error@plt>
   1460c:	mov	r0, #1
   14610:	b	145b4 <__assert_fail@plt+0x31a0>
   14614:	strd	r4, [sp, #-16]!
   14618:	mov	r5, r1
   1461c:	str	r6, [sp, #8]
   14620:	str	lr, [sp, #12]
   14624:	sub	sp, sp, #88	; 0x58
   14628:	mov	r1, sp
   1462c:	bl	1109c <fstatfs64@plt>
   14630:	subs	r2, r0, #0
   14634:	beq	146a0 <__assert_fail@plt+0x328c>
   14638:	bl	112dc <__errno_location@plt>
   1463c:	ldr	r4, [r0]
   14640:	cmp	r4, #38	; 0x26
   14644:	moveq	r0, #1
   14648:	bne	14660 <__assert_fail@plt+0x324c>
   1464c:	add	sp, sp, #88	; 0x58
   14650:	ldrd	r4, [sp]
   14654:	ldr	r6, [sp, #8]
   14658:	add	sp, sp, #12
   1465c:	pop	{pc}		; (ldr pc, [sp], #4)
   14660:	mov	r2, #5
   14664:	movw	r1, #62616	; 0xf498
   14668:	movt	r1, #1
   1466c:	mov	r0, #0
   14670:	bl	11174 <dcgettext@plt>
   14674:	mov	r6, r0
   14678:	mov	r1, r5
   1467c:	mov	r0, #4
   14680:	bl	1b500 <__assert_fail@plt+0xa0ec>
   14684:	mov	r3, r0
   14688:	mov	r2, r6
   1468c:	mov	r0, #0
   14690:	mov	r1, r4
   14694:	bl	1121c <error@plt>
   14698:	mov	r0, #1
   1469c:	b	1464c <__assert_fail@plt+0x3238>
   146a0:	ldr	r0, [sp]
   146a4:	movw	r3, #15685	; 0x3d45
   146a8:	movt	r3, #10445	; 0x28cd
   146ac:	cmp	r0, r3
   146b0:	beq	14fcc <__assert_fail@plt+0x3bb8>
   146b4:	bhi	14718 <__assert_fail@plt+0x3304>
   146b8:	movw	r3, #40866	; 0x9fa2
   146bc:	cmp	r0, r3
   146c0:	bhi	14814 <__assert_fail@plt+0x3400>
   146c4:	movw	r3, #40864	; 0x9fa0
   146c8:	cmp	r0, r3
   146cc:	bcs	14fb4 <__assert_fail@plt+0x3ba0>
   146d0:	movw	r3, #13364	; 0x3434
   146d4:	cmp	r0, r3
   146d8:	beq	14fbc <__assert_fail@plt+0x3ba8>
   146dc:	bhi	147dc <__assert_fail@plt+0x33c8>
   146e0:	movw	r3, #4989	; 0x137d
   146e4:	cmp	r0, r3
   146e8:	beq	14f64 <__assert_fail@plt+0x3b50>
   146ec:	bhi	147b0 <__assert_fail@plt+0x339c>
   146f0:	movw	r3, #391	; 0x187
   146f4:	cmp	r0, r3
   146f8:	beq	14ef4 <__assert_fail@plt+0x3ae0>
   146fc:	cmp	r0, #392	; 0x188
   14700:	bcs	14798 <__assert_fail@plt+0x3384>
   14704:	cmp	r0, #47	; 0x2f
   14708:	beq	14dbc <__assert_fail@plt+0x39a8>
   1470c:	subs	r0, r0, #51	; 0x33
   14710:	movne	r0, #1
   14714:	b	1464c <__assert_fail@plt+0x3238>
   14718:	movw	r3, #25974	; 0x6576
   1471c:	movt	r3, #25188	; 0x6264
   14720:	cmp	r0, r3
   14724:	beq	14fc4 <__assert_fail@plt+0x3bb0>
   14728:	bhi	14b00 <__assert_fail@plt+0x36ec>
   1472c:	movw	r3, #17229	; 0x434d
   14730:	movt	r3, #21317	; 0x5345
   14734:	cmp	r0, r3
   14738:	beq	14fa4 <__assert_fail@plt+0x3b90>
   1473c:	bhi	14aa8 <__assert_fail@plt+0x3694>
   14740:	movw	r3, #23891	; 0x5d53
   14744:	movt	r3, #17217	; 0x4341
   14748:	cmp	r0, r3
   1474c:	beq	14f5c <__assert_fail@plt+0x3b48>
   14750:	bhi	14a64 <__assert_fail@plt+0x3650>
   14754:	movw	r3, #17994	; 0x464a
   14758:	movt	r3, #12627	; 0x3153
   1475c:	cmp	r0, r3
   14760:	beq	14f44 <__assert_fail@plt+0x3b30>
   14764:	movw	r3, #17994	; 0x464a
   14768:	movt	r3, #12627	; 0x3153
   1476c:	cmp	r0, r3
   14770:	bhi	14a40 <__assert_fail@plt+0x362c>
   14774:	movw	r3, #7658	; 0x1dea
   14778:	movt	r3, #11181	; 0x2bad
   1477c:	cmp	r0, r3
   14780:	beq	14dc4 <__assert_fail@plt+0x39b0>
   14784:	movw	r3, #12225	; 0x2fc1
   14788:	movt	r3, #12225	; 0x2fc1
   1478c:	subs	r0, r0, r3
   14790:	movne	r0, #1
   14794:	b	1464c <__assert_fail@plt+0x3238>
   14798:	cmp	r0, #1984	; 0x7c0
   1479c:	beq	14dcc <__assert_fail@plt+0x39b8>
   147a0:	movw	r3, #4979	; 0x1373
   147a4:	subs	r0, r0, r3
   147a8:	movne	r0, #1
   147ac:	b	1464c <__assert_fail@plt+0x3238>
   147b0:	movw	r3, #7377	; 0x1cd1
   147b4:	cmp	r0, r3
   147b8:	beq	14f4c <__assert_fail@plt+0x3b38>
   147bc:	bhi	14868 <__assert_fail@plt+0x3454>
   147c0:	movw	r3, #4991	; 0x137f
   147c4:	cmp	r0, r3
   147c8:	beq	14dd4 <__assert_fail@plt+0x39c0>
   147cc:	movw	r3, #5007	; 0x138f
   147d0:	subs	r0, r0, r3
   147d4:	movne	r0, #1
   147d8:	b	1464c <__assert_fail@plt+0x3238>
   147dc:	movw	r3, #18520	; 0x4858
   147e0:	cmp	r0, r3
   147e4:	beq	14f7c <__assert_fail@plt+0x3b68>
   147e8:	bhi	149b8 <__assert_fail@plt+0x35a4>
   147ec:	movw	r3, #16390	; 0x4006
   147f0:	cmp	r0, r3
   147f4:	beq	14f54 <__assert_fail@plt+0x3b40>
   147f8:	bhi	1499c <__assert_fail@plt+0x3588>
   147fc:	cmp	r0, #16384	; 0x4000
   14800:	beq	14ddc <__assert_fail@plt+0x39c8>
   14804:	movw	r3, #16388	; 0x4004
   14808:	subs	r0, r0, r3
   1480c:	movne	r0, #1
   14810:	b	1464c <__assert_fail@plt+0x3238>
   14814:	movw	r3, #53613	; 0xd16d
   14818:	movt	r3, #303	; 0x12f
   1481c:	cmp	r0, r3
   14820:	beq	14fac <__assert_fail@plt+0x3b98>
   14824:	bhi	148d8 <__assert_fail@plt+0x34c4>
   14828:	movw	r3, #6484	; 0x1954
   1482c:	movt	r3, #1
   14830:	cmp	r0, r3
   14834:	beq	14f6c <__assert_fail@plt+0x3b58>
   14838:	bhi	148a0 <__assert_fail@plt+0x348c>
   1483c:	movw	r3, #61265	; 0xef51
   14840:	cmp	r0, r3
   14844:	beq	14f04 <__assert_fail@plt+0x3af0>
   14848:	bhi	14884 <__assert_fail@plt+0x3470>
   1484c:	movw	r3, #44533	; 0xadf5
   14850:	cmp	r0, r3
   14854:	beq	14de4 <__assert_fail@plt+0x39d0>
   14858:	movw	r3, #44543	; 0xadff
   1485c:	subs	r0, r0, r3
   14860:	movne	r0, #1
   14864:	b	1464c <__assert_fail@plt+0x3238>
   14868:	movw	r3, #9320	; 0x2468
   1486c:	cmp	r0, r3
   14870:	beq	14dec <__assert_fail@plt+0x39d8>
   14874:	movw	r3, #9336	; 0x2478
   14878:	subs	r0, r0, r3
   1487c:	movne	r0, #1
   14880:	b	1464c <__assert_fail@plt+0x3238>
   14884:	movw	r3, #61267	; 0xef53
   14888:	cmp	r0, r3
   1488c:	beq	14df4 <__assert_fail@plt+0x39e0>
   14890:	movw	r3, #61791	; 0xf15f
   14894:	subs	r0, r0, r3
   14898:	movne	r0, #1
   1489c:	b	1464c <__assert_fail@plt+0x3238>
   148a0:	movw	r3, #65518	; 0xffee
   148a4:	movt	r3, #192	; 0xc0
   148a8:	cmp	r0, r3
   148ac:	beq	14f0c <__assert_fail@plt+0x3af8>
   148b0:	bhi	1491c <__assert_fail@plt+0x3508>
   148b4:	movw	r3, #57579	; 0xe0eb
   148b8:	movt	r3, #39	; 0x27
   148bc:	cmp	r0, r3
   148c0:	beq	14dfc <__assert_fail@plt+0x39e8>
   148c4:	movw	r3, #19027	; 0x4a53
   148c8:	movt	r3, #65	; 0x41
   148cc:	subs	r0, r0, r3
   148d0:	movne	r0, #1
   148d4:	b	1464c <__assert_fail@plt+0x3238>
   148d8:	movw	r3, #30804	; 0x7854
   148dc:	movt	r3, #4400	; 0x1130
   148e0:	cmp	r0, r3
   148e4:	beq	14f74 <__assert_fail@plt+0x3b60>
   148e8:	bhi	14964 <__assert_fail@plt+0x3550>
   148ec:	movw	r3, #22561	; 0x5821
   148f0:	movt	r3, #1893	; 0x765
   148f4:	cmp	r0, r3
   148f8:	beq	14f14 <__assert_fail@plt+0x3b00>
   148fc:	bhi	14940 <__assert_fail@plt+0x352c>
   14900:	movw	r3, #2124	; 0x84c
   14904:	movt	r3, #65232	; 0xfed0
   14908:	add	r3, r0, r3
   1490c:	cmp	r3, #3
   14910:	movls	r0, #0
   14914:	movhi	r0, #1
   14918:	b	1464c <__assert_fail@plt+0x3238>
   1491c:	movw	r3, #6548	; 0x1994
   14920:	movt	r3, #258	; 0x102
   14924:	cmp	r0, r3
   14928:	beq	14e04 <__assert_fail@plt+0x39f0>
   1492c:	movw	r3, #6551	; 0x1997
   14930:	movt	r3, #258	; 0x102
   14934:	subs	r0, r0, r3
   14938:	movne	r0, #1
   1493c:	b	1464c <__assert_fail@plt+0x3238>
   14940:	movw	r3, #6452	; 0x1934
   14944:	movt	r3, #2308	; 0x904
   14948:	cmp	r0, r3
   1494c:	beq	14e0c <__assert_fail@plt+0x39f8>
   14950:	movw	r3, #7658	; 0x1dea
   14954:	movt	r3, #2989	; 0xbad
   14958:	subs	r0, r0, r3
   1495c:	movne	r0, #1
   14960:	b	1464c <__assert_fail@plt+0x3238>
   14964:	movw	r3, #514	; 0x202
   14968:	movt	r3, #6528	; 0x1980
   1496c:	cmp	r0, r3
   14970:	beq	14f1c <__assert_fail@plt+0x3b08>
   14974:	bhi	149e4 <__assert_fail@plt+0x35d0>
   14978:	movw	r3, #4966	; 0x1366
   1497c:	movt	r3, #4966	; 0x1366
   14980:	cmp	r0, r3
   14984:	beq	14e14 <__assert_fail@plt+0x3a00>
   14988:	movw	r3, #13126	; 0x3346
   1498c:	movt	r3, #5377	; 0x1501
   14990:	subs	r0, r0, r3
   14994:	movne	r0, #1
   14998:	b	1464c <__assert_fail@plt+0x3238>
   1499c:	movw	r3, #16964	; 0x4244
   149a0:	cmp	r0, r3
   149a4:	beq	14e1c <__assert_fail@plt+0x3a08>
   149a8:	movw	r3, #18475	; 0x482b
   149ac:	subs	r0, r0, r3
   149b0:	movne	r0, #1
   149b4:	b	1464c <__assert_fail@plt+0x3238>
   149b8:	movw	r3, #24053	; 0x5df5
   149bc:	cmp	r0, r3
   149c0:	beq	14f24 <__assert_fail@plt+0x3b10>
   149c4:	bhi	14a18 <__assert_fail@plt+0x3604>
   149c8:	movw	r3, #19780	; 0x4d44
   149cc:	cmp	r0, r3
   149d0:	beq	14e24 <__assert_fail@plt+0x3a10>
   149d4:	movw	r3, #19802	; 0x4d5a
   149d8:	subs	r0, r0, r3
   149dc:	movne	r0, #1
   149e0:	b	1464c <__assert_fail@plt+0x3238>
   149e4:	movw	r3, #47792	; 0xbab0
   149e8:	movt	r3, #8209	; 0x2011
   149ec:	cmp	r0, r3
   149f0:	beq	14eb4 <__assert_fail@plt+0x3aa0>
   149f4:	movw	r3, #6405	; 0x1905
   149f8:	movt	r3, #9221	; 0x2405
   149fc:	cmp	r0, r3
   14a00:	beq	14e2c <__assert_fail@plt+0x3a18>
   14a04:	movw	r3, #64206	; 0xface
   14a08:	movt	r3, #7085	; 0x1bad
   14a0c:	subs	r0, r0, r3
   14a10:	movne	r0, #1
   14a14:	b	1464c <__assert_fail@plt+0x3238>
   14a18:	movw	r3, #29366	; 0x72b6
   14a1c:	cmp	r0, r3
   14a20:	beq	14ebc <__assert_fail@plt+0x3aa8>
   14a24:	movw	r3, #38496	; 0x9660
   14a28:	cmp	r0, r3
   14a2c:	beq	14e34 <__assert_fail@plt+0x3a20>
   14a30:	movw	r3, #29301	; 0x7275
   14a34:	subs	r0, r0, r3
   14a38:	movne	r0, #1
   14a3c:	b	1464c <__assert_fail@plt+0x3238>
   14a40:	movw	r3, #21297	; 0x5331
   14a44:	movt	r3, #16966	; 0x4246
   14a48:	cmp	r0, r3
   14a4c:	beq	14e3c <__assert_fail@plt+0x3a28>
   14a50:	movw	r3, #20045	; 0x4e4d
   14a54:	movt	r3, #16969	; 0x4249
   14a58:	subs	r0, r0, r3
   14a5c:	movne	r0, #1
   14a60:	b	1464c <__assert_fail@plt+0x3238>
   14a64:	movw	r3, #17485	; 0x444d
   14a68:	movt	r3, #17741	; 0x454d
   14a6c:	cmp	r0, r3
   14a70:	beq	14f2c <__assert_fail@plt+0x3b18>
   14a74:	movw	r3, #17485	; 0x444d
   14a78:	movt	r3, #17741	; 0x454d
   14a7c:	cmp	r0, r3
   14a80:	bhi	14b6c <__assert_fail@plt+0x3758>
   14a84:	movw	r3, #16706	; 0x4142
   14a88:	movt	r3, #17485	; 0x444d
   14a8c:	cmp	r0, r3
   14a90:	beq	14e44 <__assert_fail@plt+0x3a30>
   14a94:	movw	r3, #52520	; 0xcd28
   14a98:	movt	r3, #17725	; 0x453d
   14a9c:	subs	r0, r0, r3
   14aa0:	movne	r0, #1
   14aa4:	b	1464c <__assert_fail@plt+0x3238>
   14aa8:	movw	r3, #18003	; 0x4653
   14aac:	movt	r3, #22106	; 0x565a
   14ab0:	cmp	r0, r3
   14ab4:	beq	14f94 <__assert_fail@plt+0x3b80>
   14ab8:	bhi	14d10 <__assert_fail@plt+0x38fc>
   14abc:	movw	r3, #21582	; 0x544e
   14ac0:	movt	r3, #21318	; 0x5346
   14ac4:	cmp	r0, r3
   14ac8:	beq	14eec <__assert_fail@plt+0x3ad8>
   14acc:	movw	r3, #21582	; 0x544e
   14ad0:	movt	r3, #21318	; 0x5346
   14ad4:	cmp	r0, r3
   14ad8:	bhi	14cec <__assert_fail@plt+0x38d8>
   14adc:	movw	r3, #12621	; 0x314d
   14ae0:	movt	r3, #21318	; 0x5346
   14ae4:	cmp	r0, r3
   14ae8:	beq	14e4c <__assert_fail@plt+0x3a38>
   14aec:	movw	r3, #18502	; 0x4846
   14af0:	movt	r3, #21318	; 0x5346
   14af4:	subs	r0, r0, r3
   14af8:	movne	r0, #1
   14afc:	b	1464c <__assert_fail@plt+0x3238>
   14b00:	movw	r3, #24931	; 0x6163
   14b04:	movt	r3, #29810	; 0x7472
   14b08:	cmp	r0, r3
   14b0c:	beq	14f9c <__assert_fail@plt+0x3b88>
   14b10:	bhi	14bf8 <__assert_fail@plt+0x37e4>
   14b14:	movw	r3, #26985	; 0x6969
   14b18:	movt	r3, #26457	; 0x6759
   14b1c:	cmp	r0, r3
   14b20:	beq	14f84 <__assert_fail@plt+0x3b70>
   14b24:	bhi	14bb4 <__assert_fail@plt+0x37a0>
   14b28:	movw	r3, #29296	; 0x7270
   14b2c:	movt	r3, #25447	; 0x6367
   14b30:	cmp	r0, r3
   14b34:	beq	14f34 <__assert_fail@plt+0x3b20>
   14b38:	movw	r3, #29296	; 0x7270
   14b3c:	movt	r3, #25447	; 0x6367
   14b40:	cmp	r0, r3
   14b44:	bhi	14b90 <__assert_fail@plt+0x377c>
   14b48:	movw	r3, #25968	; 0x6570
   14b4c:	movt	r3, #25189	; 0x6265
   14b50:	cmp	r0, r3
   14b54:	beq	14e54 <__assert_fail@plt+0x3a40>
   14b58:	movw	r3, #25970	; 0x6572
   14b5c:	movt	r3, #25189	; 0x6265
   14b60:	subs	r0, r0, r3
   14b64:	movne	r0, #1
   14b68:	b	1464c <__assert_fail@plt+0x3238>
   14b6c:	movw	r3, #18003	; 0x4653
   14b70:	movt	r3, #17752	; 0x4558
   14b74:	cmp	r0, r3
   14b78:	beq	14e5c <__assert_fail@plt+0x3a48>
   14b7c:	movw	r3, #18803	; 0x4973
   14b80:	movt	r3, #21093	; 0x5265
   14b84:	subs	r0, r0, r3
   14b88:	movne	r0, #1
   14b8c:	b	1464c <__assert_fail@plt+0x3238>
   14b90:	movw	r3, #26400	; 0x6720
   14b94:	movt	r3, #25698	; 0x6462
   14b98:	cmp	r0, r3
   14b9c:	beq	14e64 <__assert_fail@plt+0x3a50>
   14ba0:	movw	r3, #24952	; 0x6178
   14ba4:	movt	r3, #25700	; 0x6464
   14ba8:	subs	r0, r0, r3
   14bac:	movne	r0, #1
   14bb0:	b	1464c <__assert_fail@plt+0x3238>
   14bb4:	movw	r3, #26227	; 0x6673
   14bb8:	movt	r3, #28275	; 0x6e73
   14bbc:	cmp	r0, r3
   14bc0:	beq	14f3c <__assert_fail@plt+0x3b28>
   14bc4:	movw	r3, #26227	; 0x6673
   14bc8:	movt	r3, #28275	; 0x6e73
   14bcc:	cmp	r0, r3
   14bd0:	bhi	14c50 <__assert_fail@plt+0x383c>
   14bd4:	movw	r3, #4386	; 0x1122
   14bd8:	movt	r3, #26649	; 0x6819
   14bdc:	cmp	r0, r3
   14be0:	beq	14e6c <__assert_fail@plt+0x3a58>
   14be4:	movw	r3, #28528	; 0x6f70
   14be8:	movt	r3, #27759	; 0x6c6f
   14bec:	subs	r0, r0, r3
   14bf0:	movne	r0, #1
   14bf4:	b	1464c <__assert_fail@plt+0x3238>
   14bf8:	movw	r3, #33128	; 0x8168
   14bfc:	movt	r3, #51582	; 0xc97e
   14c00:	cmp	r0, r3
   14c04:	beq	14f8c <__assert_fail@plt+0x3b78>
   14c08:	bhi	14ca8 <__assert_fail@plt+0x3894>
   14c0c:	movw	r3, #22774	; 0x58f6
   14c10:	movt	r3, #38276	; 0x9584
   14c14:	cmp	r0, r3
   14c18:	beq	14ee4 <__assert_fail@plt+0x3ad0>
   14c1c:	movw	r3, #22774	; 0x58f6
   14c20:	movt	r3, #38276	; 0x9584
   14c24:	cmp	r0, r3
   14c28:	bhi	14c84 <__assert_fail@plt+0x3870>
   14c2c:	movw	r3, #22774	; 0x58f6
   14c30:	movt	r3, #34180	; 0x8584
   14c34:	cmp	r0, r3
   14c38:	beq	14e74 <__assert_fail@plt+0x3a60>
   14c3c:	movw	r3, #26686	; 0x683e
   14c40:	movt	r3, #37155	; 0x9123
   14c44:	subs	r0, r0, r3
   14c48:	movne	r0, #1
   14c4c:	b	1464c <__assert_fail@plt+0x3238>
   14c50:	movw	r3, #29544	; 0x7368
   14c54:	movt	r3, #29553	; 0x7371
   14c58:	cmp	r0, r3
   14c5c:	beq	14ed4 <__assert_fail@plt+0x3ac0>
   14c60:	movw	r3, #29305	; 0x7279
   14c64:	movt	r3, #29554	; 0x7372
   14c68:	cmp	r0, r3
   14c6c:	beq	14e7c <__assert_fail@plt+0x3a68>
   14c70:	movw	r3, #26227	; 0x6673
   14c74:	movt	r3, #29539	; 0x7363
   14c78:	subs	r0, r0, r3
   14c7c:	movne	r0, #1
   14c80:	b	1464c <__assert_fail@plt+0x3238>
   14c84:	movw	r3, #6516	; 0x1974
   14c88:	movt	r3, #43962	; 0xabba
   14c8c:	cmp	r0, r3
   14c90:	beq	14e84 <__assert_fail@plt+0x3a70>
   14c94:	movw	r3, #5520	; 0x1590
   14c98:	movt	r3, #51031	; 0xc757
   14c9c:	subs	r0, r0, r3
   14ca0:	movne	r0, #1
   14ca4:	b	1464c <__assert_fail@plt+0x3238>
   14ca8:	movw	r3, #57826	; 0xe1e2
   14cac:	movt	r3, #57589	; 0xe0f5
   14cb0:	cmp	r0, r3
   14cb4:	beq	14efc <__assert_fail@plt+0x3ae8>
   14cb8:	movw	r3, #57826	; 0xe1e2
   14cbc:	movt	r3, #57589	; 0xe0f5
   14cc0:	cmp	r0, r3
   14cc4:	bhi	14d54 <__assert_fail@plt+0x3940>
   14cc8:	movw	r3, #18961	; 0x4a11
   14ccc:	movt	r3, #51966	; 0xcafe
   14cd0:	cmp	r0, r3
   14cd4:	beq	14e8c <__assert_fail@plt+0x3a78>
   14cd8:	movw	r3, #33252	; 0x81e4
   14cdc:	movt	r3, #56926	; 0xde5e
   14ce0:	subs	r0, r0, r3
   14ce4:	movne	r0, #1
   14ce8:	b	1464c <__assert_fail@plt+0x3238>
   14cec:	movw	r3, #17227	; 0x434b
   14cf0:	movt	r3, #21327	; 0x534f
   14cf4:	cmp	r0, r3
   14cf8:	beq	14e94 <__assert_fail@plt+0x3a80>
   14cfc:	mov	r3, #256	; 0x100
   14d00:	movt	r3, #21529	; 0x5419
   14d04:	subs	r0, r0, r3
   14d08:	movne	r0, #1
   14d0c:	b	1464c <__assert_fail@plt+0x3238>
   14d10:	movw	r3, #27120	; 0x69f0
   14d14:	movt	r3, #23100	; 0x5a3c
   14d18:	cmp	r0, r3
   14d1c:	beq	14edc <__assert_fail@plt+0x3ac8>
   14d20:	movw	r3, #27120	; 0x69f0
   14d24:	movt	r3, #23100	; 0x5a3c
   14d28:	cmp	r0, r3
   14d2c:	bhi	14d88 <__assert_fail@plt+0x3974>
   14d30:	movw	r3, #22569	; 0x5829
   14d34:	movt	r3, #22569	; 0x5829
   14d38:	cmp	r0, r3
   14d3c:	beq	14e9c <__assert_fail@plt+0x3a88>
   14d40:	movw	r3, #21314	; 0x5342
   14d44:	movt	r3, #22598	; 0x5846
   14d48:	subs	r0, r0, r3
   14d4c:	movne	r0, #1
   14d50:	b	1464c <__assert_fail@plt+0x3238>
   14d54:	movw	r3, #65420	; 0xff8c
   14d58:	movt	r3, #63868	; 0xf97c
   14d5c:	cmp	r0, r3
   14d60:	beq	14ec4 <__assert_fail@plt+0x3ab0>
   14d64:	movw	r3, #59465	; 0xe849
   14d68:	movt	r3, #63893	; 0xf995
   14d6c:	cmp	r0, r3
   14d70:	beq	14ea4 <__assert_fail@plt+0x3a90>
   14d74:	movw	r3, #8208	; 0x2010
   14d78:	movt	r3, #62197	; 0xf2f5
   14d7c:	subs	r0, r0, r3
   14d80:	movne	r0, #1
   14d84:	b	1464c <__assert_fail@plt+0x3238>
   14d88:	movw	r3, #11765	; 0x2df5
   14d8c:	movt	r3, #24010	; 0x5dca
   14d90:	cmp	r0, r3
   14d94:	beq	14ecc <__assert_fail@plt+0x3ab8>
   14d98:	movw	r3, #26476	; 0x676c
   14d9c:	movt	r3, #24933	; 0x6165
   14da0:	cmp	r0, r3
   14da4:	beq	14eac <__assert_fail@plt+0x3a98>
   14da8:	movw	r3, #18003	; 0x4653
   14dac:	movt	r3, #23119	; 0x5a4f
   14db0:	subs	r0, r0, r3
   14db4:	movne	r0, #1
   14db8:	b	1464c <__assert_fail@plt+0x3238>
   14dbc:	mov	r0, #0
   14dc0:	b	1464c <__assert_fail@plt+0x3238>
   14dc4:	mov	r0, #0
   14dc8:	b	1464c <__assert_fail@plt+0x3238>
   14dcc:	mov	r0, #0
   14dd0:	b	1464c <__assert_fail@plt+0x3238>
   14dd4:	mov	r0, #0
   14dd8:	b	1464c <__assert_fail@plt+0x3238>
   14ddc:	mov	r0, #0
   14de0:	b	1464c <__assert_fail@plt+0x3238>
   14de4:	mov	r0, #0
   14de8:	b	1464c <__assert_fail@plt+0x3238>
   14dec:	mov	r0, #0
   14df0:	b	1464c <__assert_fail@plt+0x3238>
   14df4:	mov	r0, #0
   14df8:	b	1464c <__assert_fail@plt+0x3238>
   14dfc:	mov	r0, #0
   14e00:	b	1464c <__assert_fail@plt+0x3238>
   14e04:	mov	r0, #0
   14e08:	b	1464c <__assert_fail@plt+0x3238>
   14e0c:	mov	r0, #0
   14e10:	b	1464c <__assert_fail@plt+0x3238>
   14e14:	mov	r0, #0
   14e18:	b	1464c <__assert_fail@plt+0x3238>
   14e1c:	mov	r0, #0
   14e20:	b	1464c <__assert_fail@plt+0x3238>
   14e24:	mov	r0, #0
   14e28:	b	1464c <__assert_fail@plt+0x3238>
   14e2c:	mov	r0, #0
   14e30:	b	1464c <__assert_fail@plt+0x3238>
   14e34:	mov	r0, #0
   14e38:	b	1464c <__assert_fail@plt+0x3238>
   14e3c:	mov	r0, #0
   14e40:	b	1464c <__assert_fail@plt+0x3238>
   14e44:	mov	r0, #0
   14e48:	b	1464c <__assert_fail@plt+0x3238>
   14e4c:	mov	r0, #0
   14e50:	b	1464c <__assert_fail@plt+0x3238>
   14e54:	mov	r0, #0
   14e58:	b	1464c <__assert_fail@plt+0x3238>
   14e5c:	mov	r0, #0
   14e60:	b	1464c <__assert_fail@plt+0x3238>
   14e64:	mov	r0, #0
   14e68:	b	1464c <__assert_fail@plt+0x3238>
   14e6c:	mov	r0, #0
   14e70:	b	1464c <__assert_fail@plt+0x3238>
   14e74:	mov	r0, #0
   14e78:	b	1464c <__assert_fail@plt+0x3238>
   14e7c:	mov	r0, #0
   14e80:	b	1464c <__assert_fail@plt+0x3238>
   14e84:	mov	r0, #0
   14e88:	b	1464c <__assert_fail@plt+0x3238>
   14e8c:	mov	r0, #0
   14e90:	b	1464c <__assert_fail@plt+0x3238>
   14e94:	mov	r0, #0
   14e98:	b	1464c <__assert_fail@plt+0x3238>
   14e9c:	mov	r0, #0
   14ea0:	b	1464c <__assert_fail@plt+0x3238>
   14ea4:	mov	r0, #0
   14ea8:	b	1464c <__assert_fail@plt+0x3238>
   14eac:	mov	r0, #0
   14eb0:	b	1464c <__assert_fail@plt+0x3238>
   14eb4:	mov	r0, #0
   14eb8:	b	1464c <__assert_fail@plt+0x3238>
   14ebc:	mov	r0, #0
   14ec0:	b	1464c <__assert_fail@plt+0x3238>
   14ec4:	mov	r0, #0
   14ec8:	b	1464c <__assert_fail@plt+0x3238>
   14ecc:	mov	r0, #0
   14ed0:	b	1464c <__assert_fail@plt+0x3238>
   14ed4:	mov	r0, #0
   14ed8:	b	1464c <__assert_fail@plt+0x3238>
   14edc:	mov	r0, #0
   14ee0:	b	1464c <__assert_fail@plt+0x3238>
   14ee4:	mov	r0, #0
   14ee8:	b	1464c <__assert_fail@plt+0x3238>
   14eec:	mov	r0, #0
   14ef0:	b	1464c <__assert_fail@plt+0x3238>
   14ef4:	mov	r0, #0
   14ef8:	b	1464c <__assert_fail@plt+0x3238>
   14efc:	mov	r0, #0
   14f00:	b	1464c <__assert_fail@plt+0x3238>
   14f04:	mov	r0, r2
   14f08:	b	1464c <__assert_fail@plt+0x3238>
   14f0c:	mov	r0, r2
   14f10:	b	1464c <__assert_fail@plt+0x3238>
   14f14:	mov	r0, r2
   14f18:	b	1464c <__assert_fail@plt+0x3238>
   14f1c:	mov	r0, r2
   14f20:	b	1464c <__assert_fail@plt+0x3238>
   14f24:	mov	r0, #0
   14f28:	b	1464c <__assert_fail@plt+0x3238>
   14f2c:	mov	r0, #0
   14f30:	b	1464c <__assert_fail@plt+0x3238>
   14f34:	mov	r0, #0
   14f38:	b	1464c <__assert_fail@plt+0x3238>
   14f3c:	mov	r0, #0
   14f40:	b	1464c <__assert_fail@plt+0x3238>
   14f44:	mov	r0, #0
   14f48:	b	1464c <__assert_fail@plt+0x3238>
   14f4c:	mov	r0, #0
   14f50:	b	1464c <__assert_fail@plt+0x3238>
   14f54:	mov	r0, #0
   14f58:	b	1464c <__assert_fail@plt+0x3238>
   14f5c:	mov	r0, r2
   14f60:	b	1464c <__assert_fail@plt+0x3238>
   14f64:	mov	r0, r2
   14f68:	b	1464c <__assert_fail@plt+0x3238>
   14f6c:	mov	r0, r2
   14f70:	b	1464c <__assert_fail@plt+0x3238>
   14f74:	mov	r0, r2
   14f78:	b	1464c <__assert_fail@plt+0x3238>
   14f7c:	mov	r0, r2
   14f80:	b	1464c <__assert_fail@plt+0x3238>
   14f84:	mov	r0, r2
   14f88:	b	1464c <__assert_fail@plt+0x3238>
   14f8c:	mov	r0, r2
   14f90:	b	1464c <__assert_fail@plt+0x3238>
   14f94:	mov	r0, r2
   14f98:	b	1464c <__assert_fail@plt+0x3238>
   14f9c:	mov	r0, r2
   14fa0:	b	1464c <__assert_fail@plt+0x3238>
   14fa4:	mov	r0, r2
   14fa8:	b	1464c <__assert_fail@plt+0x3238>
   14fac:	mov	r0, r2
   14fb0:	b	1464c <__assert_fail@plt+0x3238>
   14fb4:	mov	r0, r2
   14fb8:	b	1464c <__assert_fail@plt+0x3238>
   14fbc:	mov	r0, r2
   14fc0:	b	1464c <__assert_fail@plt+0x3238>
   14fc4:	mov	r0, r2
   14fc8:	b	1464c <__assert_fail@plt+0x3238>
   14fcc:	mov	r0, r2
   14fd0:	b	1464c <__assert_fail@plt+0x3238>
   14fd4:	strd	r4, [sp, #-36]!	; 0xffffffdc
   14fd8:	mov	r5, r3
   14fdc:	mvn	r3, #0
   14fe0:	strd	r6, [sp, #8]
   14fe4:	mov	r4, r2
   14fe8:	cmp	r5, r3
   14fec:	strd	r8, [sp, #16]
   14ff0:	mvn	r2, #0
   14ff4:	mov	r9, r1
   14ff8:	strd	sl, [sp, #24]
   14ffc:	cmpeq	r4, r2
   15000:	str	lr, [sp, #32]
   15004:	sub	sp, sp, #8192	; 0x2000
   15008:	sub	sp, sp, #20
   1500c:	strd	r4, [sp]
   15010:	str	r0, [sp, #12]
   15014:	beq	15104 <__assert_fail@plt+0x3cf0>
   15018:	mov	r7, r5
   1501c:	movw	r8, #4548	; 0x11c4
   15020:	movt	r8, #3
   15024:	mov	r6, r4
   15028:	mov	sl, #0
   1502c:	mov	fp, #0
   15030:	add	r5, sp, #16
   15034:	b	150a4 <__assert_fail@plt+0x3c90>
   15038:	cmp	r0, #0
   1503c:	beq	150dc <__assert_fail@plt+0x3cc8>
   15040:	mov	r2, r0
   15044:	mov	r1, #1
   15048:	ldr	r3, [r8]
   1504c:	mov	r0, r5
   15050:	str	r8, [sp, #8]
   15054:	bl	11150 <fwrite_unlocked@plt>
   15058:	cmp	r4, r0
   1505c:	bhi	1517c <__assert_fail@plt+0x3d68>
   15060:	ldrd	r0, [sp]
   15064:	mov	r3, #0
   15068:	adds	sl, sl, r4
   1506c:	adc	fp, fp, r3
   15070:	subs	r6, r6, r4
   15074:	sbc	r7, r7, r3
   15078:	mvn	r2, #1
   1507c:	orrs	r3, r6, r7
   15080:	mvn	r3, #0
   15084:	moveq	ip, #1
   15088:	movne	ip, #0
   1508c:	cmp	r1, r3
   15090:	cmpeq	r0, r2
   15094:	movne	r3, ip
   15098:	moveq	r3, #1
   1509c:	cmp	r3, #0
   150a0:	bne	150dc <__assert_fail@plt+0x3cc8>
   150a4:	cmp	r7, #0
   150a8:	mov	r2, r6
   150ac:	cmpeq	r6, #8192	; 0x2000
   150b0:	mov	r1, r5
   150b4:	movhi	r2, #8192	; 0x2000
   150b8:	mov	r0, r9
   150bc:	bl	1c9c0 <__assert_fail@plt+0xb5ac>
   150c0:	cmn	r0, #1
   150c4:	mov	r4, r0
   150c8:	bne	15038 <__assert_fail@plt+0x3c24>
   150cc:	bl	112dc <__errno_location@plt>
   150d0:	ldr	r4, [r0]
   150d4:	cmp	r4, #11
   150d8:	bne	151cc <__assert_fail@plt+0x3db8>
   150dc:	mov	r0, sl
   150e0:	mov	r1, fp
   150e4:	add	sp, sp, #8192	; 0x2000
   150e8:	add	sp, sp, #20
   150ec:	ldrd	r4, [sp]
   150f0:	ldrd	r6, [sp, #8]
   150f4:	ldrd	r8, [sp, #16]
   150f8:	ldrd	sl, [sp, #24]
   150fc:	add	sp, sp, #32
   15100:	pop	{pc}		; (ldr pc, [sp], #4)
   15104:	movw	r6, #4548	; 0x11c4
   15108:	movt	r6, #3
   1510c:	mov	sl, #0
   15110:	mov	fp, #0
   15114:	add	r5, sp, #16
   15118:	b	15148 <__assert_fail@plt+0x3d34>
   1511c:	cmp	r0, #0
   15120:	beq	150dc <__assert_fail@plt+0x3cc8>
   15124:	mov	r2, r0
   15128:	mov	r1, #1
   1512c:	ldr	r3, [r6]
   15130:	mov	r0, r5
   15134:	bl	11150 <fwrite_unlocked@plt>
   15138:	cmp	r0, r4
   1513c:	bcc	15178 <__assert_fail@plt+0x3d64>
   15140:	adds	sl, sl, r4
   15144:	adc	fp, fp, #0
   15148:	mov	r2, #8192	; 0x2000
   1514c:	mov	r1, r5
   15150:	mov	r0, r9
   15154:	bl	1c9c0 <__assert_fail@plt+0xb5ac>
   15158:	cmn	r0, #1
   1515c:	mov	r4, r0
   15160:	bne	1511c <__assert_fail@plt+0x3d08>
   15164:	bl	112dc <__errno_location@plt>
   15168:	ldr	r4, [r0]
   1516c:	cmp	r4, #11
   15170:	beq	150dc <__assert_fail@plt+0x3cc8>
   15174:	b	151cc <__assert_fail@plt+0x3db8>
   15178:	str	r6, [sp, #8]
   1517c:	ldr	r3, [sp, #8]
   15180:	ldr	r0, [r3]
   15184:	bl	113a8 <clearerr_unlocked@plt>
   15188:	bl	112dc <__errno_location@plt>
   1518c:	movw	r1, #62560	; 0xf460
   15190:	movt	r1, #1
   15194:	ldr	r4, [r0]
   15198:	mov	r2, #5
   1519c:	mov	r0, #0
   151a0:	bl	11174 <dcgettext@plt>
   151a4:	mov	r5, r0
   151a8:	movw	r1, #62580	; 0xf474
   151ac:	movt	r1, #1
   151b0:	mov	r0, #4
   151b4:	bl	1b500 <__assert_fail@plt+0xa0ec>
   151b8:	mov	r3, r0
   151bc:	mov	r2, r5
   151c0:	mov	r1, r4
   151c4:	mov	r0, #1
   151c8:	bl	1121c <error@plt>
   151cc:	movw	r1, #62596	; 0xf484
   151d0:	movt	r1, #1
   151d4:	mov	r2, #5
   151d8:	mov	r0, #0
   151dc:	bl	11174 <dcgettext@plt>
   151e0:	mov	r5, r0
   151e4:	ldr	r1, [sp, #12]
   151e8:	b	151b0 <__assert_fail@plt+0x3d9c>
   151ec:	strd	r4, [sp, #-36]!	; 0xffffffdc
   151f0:	mov	r5, r0
   151f4:	strd	r6, [sp, #8]
   151f8:	mvn	r7, #0
   151fc:	mvn	r6, #0
   15200:	strd	r8, [sp, #16]
   15204:	mov	r9, r2
   15208:	strd	sl, [sp, #24]
   1520c:	str	lr, [sp, #32]
   15210:	sub	sp, sp, #8192	; 0x2000
   15214:	sub	sp, sp, #20
   15218:	add	r3, sp, #8192	; 0x2000
   1521c:	add	r3, r3, #56	; 0x38
   15220:	str	r1, [sp, #4]
   15224:	ldrd	r2, [r3]
   15228:	cmp	r3, r7
   1522c:	cmpeq	r2, r6
   15230:	beq	15374 <__assert_fail@plt+0x3f60>
   15234:	movw	r3, #4424	; 0x1148
   15238:	movt	r3, #3
   1523c:	mov	sl, #0
   15240:	mov	fp, #0
   15244:	str	r3, [sp, #8]
   15248:	movw	r3, #65356	; 0xff4c
   1524c:	movt	r3, #1
   15250:	add	r8, sp, #16
   15254:	str	r3, [sp, #12]
   15258:	add	r3, sp, #8192	; 0x2000
   1525c:	add	r3, r3, #56	; 0x38
   15260:	ldrd	r6, [r3]
   15264:	b	15314 <__assert_fail@plt+0x3f00>
   15268:	cmp	r0, #0
   1526c:	beq	1534c <__assert_fail@plt+0x3f38>
   15270:	cmp	r5, #0
   15274:	beq	152a8 <__assert_fail@plt+0x3e94>
   15278:	ldmib	sp, {r3, r5, lr}
   1527c:	movw	r2, #62684	; 0xf4dc
   15280:	movt	r2, #1
   15284:	movw	r1, #62672	; 0xf4d0
   15288:	movt	r1, #1
   1528c:	mov	r0, #1
   15290:	ldrb	ip, [r5]
   15294:	cmp	ip, #0
   15298:	movne	r2, lr
   1529c:	bl	11300 <__printf_chk@plt>
   152a0:	mov	r3, #0
   152a4:	strb	r3, [r5]
   152a8:	movw	r5, #4548	; 0x11c4
   152ac:	movt	r5, #3
   152b0:	mov	r2, r4
   152b4:	mov	r1, #1
   152b8:	ldr	r3, [r5]
   152bc:	mov	r0, r8
   152c0:	bl	11150 <fwrite_unlocked@plt>
   152c4:	cmp	r4, r0
   152c8:	bhi	1543c <__assert_fail@plt+0x4028>
   152cc:	mov	r1, #0
   152d0:	adds	sl, sl, r4
   152d4:	adc	fp, fp, r1
   152d8:	subs	r6, r6, r4
   152dc:	sbc	r7, r7, r1
   152e0:	mvn	r3, #0
   152e4:	orrs	r1, r6, r7
   152e8:	add	r1, sp, #8192	; 0x2000
   152ec:	add	r1, r1, #56	; 0x38
   152f0:	moveq	r5, #1
   152f4:	ldrd	r0, [r1]
   152f8:	movne	r5, #0
   152fc:	mvn	r2, #1
   15300:	cmp	r1, r3
   15304:	cmpeq	r0, r2
   15308:	moveq	r5, #1
   1530c:	cmp	r5, #0
   15310:	bne	1534c <__assert_fail@plt+0x3f38>
   15314:	cmp	r7, #0
   15318:	mov	r2, r6
   1531c:	cmpeq	r6, #8192	; 0x2000
   15320:	mov	r1, r8
   15324:	movhi	r2, #8192	; 0x2000
   15328:	mov	r0, r9
   1532c:	bl	1c9c0 <__assert_fail@plt+0xb5ac>
   15330:	cmn	r0, #1
   15334:	mov	r4, r0
   15338:	bne	15268 <__assert_fail@plt+0x3e54>
   1533c:	bl	112dc <__errno_location@plt>
   15340:	ldr	r4, [r0]
   15344:	cmp	r4, #11
   15348:	bne	15488 <__assert_fail@plt+0x4074>
   1534c:	mov	r0, sl
   15350:	mov	r1, fp
   15354:	add	sp, sp, #8192	; 0x2000
   15358:	add	sp, sp, #20
   1535c:	ldrd	r4, [sp]
   15360:	ldrd	r6, [sp, #8]
   15364:	ldrd	r8, [sp, #16]
   15368:	ldrd	sl, [sp, #24]
   1536c:	add	sp, sp, #32
   15370:	pop	{pc}		; (ldr pc, [sp], #4)
   15374:	movw	r3, #62684	; 0xf4dc
   15378:	movt	r3, #1
   1537c:	movw	r6, #4424	; 0x1148
   15380:	movt	r6, #3
   15384:	movw	r7, #65356	; 0xff4c
   15388:	movt	r7, #1
   1538c:	str	r3, [sp, #8]
   15390:	mov	sl, #0
   15394:	mov	fp, #0
   15398:	add	r8, sp, #16
   1539c:	b	1540c <__assert_fail@plt+0x3ff8>
   153a0:	cmp	r0, #0
   153a4:	beq	1534c <__assert_fail@plt+0x3f38>
   153a8:	cmp	r5, #0
   153ac:	beq	153dc <__assert_fail@plt+0x3fc8>
   153b0:	ldrb	r2, [r6]
   153b4:	movw	r1, #62672	; 0xf4d0
   153b8:	movt	r1, #1
   153bc:	mov	r0, #1
   153c0:	ldmib	sp, {r3, ip}
   153c4:	cmp	r2, #0
   153c8:	movne	ip, r7
   153cc:	mov	r2, ip
   153d0:	bl	11300 <__printf_chk@plt>
   153d4:	mov	r3, #0
   153d8:	strb	r3, [r6]
   153dc:	movw	r5, #4548	; 0x11c4
   153e0:	movt	r5, #3
   153e4:	mov	r2, r4
   153e8:	mov	r1, #1
   153ec:	ldr	r3, [r5]
   153f0:	mov	r0, r8
   153f4:	bl	11150 <fwrite_unlocked@plt>
   153f8:	cmp	r4, r0
   153fc:	bhi	1543c <__assert_fail@plt+0x4028>
   15400:	adds	sl, sl, r4
   15404:	mov	r5, #0
   15408:	adc	fp, fp, #0
   1540c:	mov	r2, #8192	; 0x2000
   15410:	mov	r1, r8
   15414:	mov	r0, r9
   15418:	bl	1c9c0 <__assert_fail@plt+0xb5ac>
   1541c:	cmn	r0, #1
   15420:	mov	r4, r0
   15424:	bne	153a0 <__assert_fail@plt+0x3f8c>
   15428:	bl	112dc <__errno_location@plt>
   1542c:	ldr	r4, [r0]
   15430:	cmp	r4, #11
   15434:	beq	1534c <__assert_fail@plt+0x3f38>
   15438:	b	15488 <__assert_fail@plt+0x4074>
   1543c:	ldr	r0, [r5]
   15440:	bl	113a8 <clearerr_unlocked@plt>
   15444:	bl	112dc <__errno_location@plt>
   15448:	movw	r1, #62560	; 0xf460
   1544c:	movt	r1, #1
   15450:	ldr	r4, [r0]
   15454:	mov	r2, #5
   15458:	mov	r0, #0
   1545c:	bl	11174 <dcgettext@plt>
   15460:	mov	r5, r0
   15464:	movw	r1, #62580	; 0xf474
   15468:	movt	r1, #1
   1546c:	mov	r0, #4
   15470:	bl	1b500 <__assert_fail@plt+0xa0ec>
   15474:	mov	r3, r0
   15478:	mov	r2, r5
   1547c:	mov	r1, r4
   15480:	mov	r0, #1
   15484:	bl	1121c <error@plt>
   15488:	movw	r1, #62596	; 0xf484
   1548c:	movt	r1, #1
   15490:	mov	r2, #5
   15494:	mov	r0, #0
   15498:	bl	11174 <dcgettext@plt>
   1549c:	mov	r5, r0
   154a0:	ldr	r1, [sp, #4]
   154a4:	b	1546c <__assert_fail@plt+0x4058>
   154a8:	strd	r4, [sp, #-28]!	; 0xffffffe4
   154ac:	ldr	r5, [r0, #48]	; 0x30
   154b0:	strd	r6, [sp, #8]
   154b4:	strd	r8, [sp, #16]
   154b8:	str	lr, [sp, #24]
   154bc:	sub	sp, sp, #140	; 0x8c
   154c0:	cmn	r5, #1
   154c4:	beq	1556c <__assert_fail@plt+0x4158>
   154c8:	ldr	r7, [r0]
   154cc:	mov	r6, r1
   154d0:	mov	r4, r0
   154d4:	movw	r1, #62540	; 0xf44c
   154d8:	movt	r1, #1
   154dc:	mov	r0, r7
   154e0:	bl	110cc <strcmp@plt>
   154e4:	cmp	r0, #0
   154e8:	beq	15584 <__assert_fail@plt+0x4170>
   154ec:	mov	r1, r5
   154f0:	add	r2, sp, #32
   154f4:	mov	r0, #3
   154f8:	bl	111c8 <__fxstat64@plt>
   154fc:	subs	r5, r0, #0
   15500:	bne	15658 <__assert_fail@plt+0x4244>
   15504:	ldr	r3, [r4, #40]	; 0x28
   15508:	and	r3, r3, #61440	; 0xf000
   1550c:	cmp	r3, #32768	; 0x8000
   15510:	beq	155a0 <__assert_fail@plt+0x418c>
   15514:	movw	r3, #4560	; 0x11d0
   15518:	movt	r3, #3
   1551c:	ldrb	r0, [r3, #1]
   15520:	cmp	r0, #0
   15524:	beq	15534 <__assert_fail@plt+0x4120>
   15528:	ldr	r0, [r6]
   1552c:	subs	r0, r0, r4
   15530:	movne	r0, #1
   15534:	mvn	r8, #0
   15538:	mvn	r9, #0
   1553c:	ldr	r2, [r4, #48]	; 0x30
   15540:	mov	r1, r7
   15544:	strd	r8, [sp]
   15548:	bl	151ec <__assert_fail@plt+0x3dd8>
   1554c:	ldr	r3, [r4, #8]
   15550:	ldr	r2, [r4, #12]
   15554:	adds	r3, r3, r0
   15558:	adc	r2, r2, r1
   1555c:	orrs	r1, r0, r1
   15560:	str	r3, [r4, #8]
   15564:	str	r2, [r4, #12]
   15568:	bne	15610 <__assert_fail@plt+0x41fc>
   1556c:	add	sp, sp, #140	; 0x8c
   15570:	ldrd	r4, [sp]
   15574:	ldrd	r6, [sp, #8]
   15578:	ldrd	r8, [sp, #16]
   1557c:	add	sp, sp, #24
   15580:	pop	{pc}		; (ldr pc, [sp], #4)
   15584:	movw	r1, #62544	; 0xf450
   15588:	movt	r1, #1
   1558c:	mov	r2, #5
   15590:	bl	11174 <dcgettext@plt>
   15594:	mov	r7, r0
   15598:	ldr	r5, [r4, #48]	; 0x30
   1559c:	b	154ec <__assert_fail@plt+0x40d8>
   155a0:	ldrd	r2, [r4, #8]
   155a4:	ldrd	r8, [sp, #80]	; 0x50
   155a8:	cmp	r8, r2
   155ac:	sbcs	r1, r9, r3
   155b0:	blt	15684 <__assert_fail@plt+0x4270>
   155b4:	cmp	r9, r3
   155b8:	cmpeq	r8, r2
   155bc:	bne	15514 <__assert_fail@plt+0x4100>
   155c0:	ldr	r3, [r4, #16]
   155c4:	ldr	ip, [sp, #112]	; 0x70
   155c8:	ldr	r1, [r4, #20]
   155cc:	ldr	r0, [sp, #116]	; 0x74
   155d0:	cmp	ip, r3
   155d4:	movle	r2, #0
   155d8:	movgt	r2, #1
   155dc:	cmp	ip, r3
   155e0:	rsbge	r2, r2, #0
   155e4:	rsblt	r2, r2, #1
   155e8:	cmp	r0, r1
   155ec:	movle	r3, #0
   155f0:	movgt	r3, #1
   155f4:	cmp	r0, r1
   155f8:	rsbge	r3, r3, #0
   155fc:	rsblt	r3, r3, #1
   15600:	add	r3, r3, r2, lsl #1
   15604:	cmp	r3, #0
   15608:	bne	15514 <__assert_fail@plt+0x4100>
   1560c:	b	1556c <__assert_fail@plt+0x4158>
   15610:	movw	r3, #4548	; 0x11c4
   15614:	movt	r3, #3
   15618:	ldr	r0, [r3]
   1561c:	str	r4, [r6]
   15620:	bl	111a4 <fflush_unlocked@plt>
   15624:	cmp	r0, #0
   15628:	beq	1556c <__assert_fail@plt+0x4158>
   1562c:	bl	112dc <__errno_location@plt>
   15630:	ldr	r4, [r0]
   15634:	mov	r2, #5
   15638:	movw	r1, #62760	; 0xf528
   1563c:	movt	r1, #1
   15640:	mov	r0, #0
   15644:	bl	11174 <dcgettext@plt>
   15648:	mov	r2, r0
   1564c:	mov	r0, #1
   15650:	mov	r1, r4
   15654:	bl	1121c <error@plt>
   15658:	bl	112dc <__errno_location@plt>
   1565c:	ldr	r5, [r4, #48]	; 0x30
   15660:	mov	r6, r0
   15664:	ldr	r3, [r0]
   15668:	add	r2, r5, #1
   1566c:	cmp	r2, #1
   15670:	str	r3, [r4, #52]	; 0x34
   15674:	bhi	156ec <__assert_fail@plt+0x42d8>
   15678:	mvn	r3, #0
   1567c:	str	r3, [r4, #48]	; 0x30
   15680:	b	1556c <__assert_fail@plt+0x4158>
   15684:	mov	r2, #5
   15688:	movw	r1, #62708	; 0xf4f4
   1568c:	movt	r1, #1
   15690:	bl	11174 <dcgettext@plt>
   15694:	mov	r8, r0
   15698:	mov	r2, r7
   1569c:	mov	r1, #3
   156a0:	mov	r0, r5
   156a4:	bl	1c080 <__assert_fail@plt+0xac6c>
   156a8:	mov	r3, r0
   156ac:	mov	r2, r8
   156b0:	mov	r1, r5
   156b4:	mov	r0, r5
   156b8:	bl	1121c <error@plt>
   156bc:	mov	r3, #0
   156c0:	mov	r2, #0
   156c4:	str	r5, [sp]
   156c8:	ldr	r0, [r4, #48]	; 0x30
   156cc:	bl	111ec <lseek64@plt>
   156d0:	cmp	r0, #0
   156d4:	sbcs	r3, r1, #0
   156d8:	blt	15740 <__assert_fail@plt+0x432c>
   156dc:	mov	r2, #0
   156e0:	mov	r3, #0
   156e4:	strd	r2, [r4, #8]
   156e8:	b	15514 <__assert_fail@plt+0x4100>
   156ec:	mov	r0, r5
   156f0:	bl	113fc <close@plt>
   156f4:	cmp	r0, #0
   156f8:	beq	15678 <__assert_fail@plt+0x4264>
   156fc:	ldr	r6, [r6]
   15700:	mov	r2, #5
   15704:	movw	r1, #62688	; 0xf4e0
   15708:	movt	r1, #1
   1570c:	mov	r0, #0
   15710:	bl	11174 <dcgettext@plt>
   15714:	mov	r8, r0
   15718:	mov	r1, r7
   1571c:	mov	r0, #4
   15720:	bl	1b500 <__assert_fail@plt+0xa0ec>
   15724:	mov	r3, r0
   15728:	mov	r2, r8
   1572c:	str	r5, [sp]
   15730:	mov	r1, r6
   15734:	mov	r0, #0
   15738:	bl	1121c <error@plt>
   1573c:	b	15678 <__assert_fail@plt+0x4264>
   15740:	add	r2, sp, #8
   15744:	mov	r1, #0
   15748:	mov	r0, #0
   1574c:	bl	18d78 <__assert_fail@plt+0x7964>
   15750:	mov	r6, r0
   15754:	bl	112dc <__errno_location@plt>
   15758:	ldr	r8, [r0]
   1575c:	mov	r2, #5
   15760:	movw	r1, #62728	; 0xf508
   15764:	movt	r1, #1
   15768:	mov	r0, r5
   1576c:	bl	11174 <dcgettext@plt>
   15770:	mov	r4, r0
   15774:	mov	r2, r7
   15778:	mov	r1, #3
   1577c:	mov	r0, r5
   15780:	bl	1c080 <__assert_fail@plt+0xac6c>
   15784:	mov	r3, r0
   15788:	mov	r1, r8
   1578c:	str	r6, [sp]
   15790:	mov	r0, r5
   15794:	mov	r2, r4
   15798:	bl	1121c <error@plt>
   1579c:	mov	r0, #1
   157a0:	bl	11294 <exit@plt>
   157a4:	strd	r4, [sp, #-36]!	; 0xffffffdc
   157a8:	mov	r5, r3
   157ac:	mov	r4, r2
   157b0:	strd	r6, [sp, #8]
   157b4:	orrs	r3, r4, r5
   157b8:	strd	r8, [sp, #16]
   157bc:	strd	sl, [sp, #24]
   157c0:	str	lr, [sp, #32]
   157c4:	sub	sp, sp, #8192	; 0x2000
   157c8:	sub	sp, sp, #60	; 0x3c
   157cc:	add	r3, sp, #8256	; 0x2040
   157d0:	add	r3, r3, #40	; 0x28
   157d4:	str	r0, [sp, #20]
   157d8:	ldr	r3, [r3]
   157dc:	str	r3, [sp, #12]
   157e0:	add	r3, sp, #8256	; 0x2040
   157e4:	add	r3, r3, #44	; 0x2c
   157e8:	ldr	r3, [r3]
   157ec:	str	r3, [sp, #16]
   157f0:	beq	15a90 <__assert_fail@plt+0x467c>
   157f4:	add	r3, sp, #8256	; 0x2040
   157f8:	ldr	r2, [sp, #12]
   157fc:	mov	r8, r1
   15800:	add	r3, r3, #32
   15804:	mov	r1, #0
   15808:	ldr	r3, [r3]
   1580c:	mov	r7, #0
   15810:	subs	r0, r2, r3
   15814:	add	r3, sp, #8256	; 0x2040
   15818:	ldr	r2, [sp, #16]
   1581c:	add	r3, r3, #36	; 0x24
   15820:	ldr	r3, [r3]
   15824:	str	r7, [sp]
   15828:	sbc	r3, r2, r3
   1582c:	ldr	r2, [sp, #12]
   15830:	asr	ip, r3, #31
   15834:	eor	r0, r0, ip
   15838:	subs	r3, r0, ip
   1583c:	mov	r0, r8
   15840:	ubfx	r3, r3, #0, #13
   15844:	eor	r3, r3, ip
   15848:	subs	r3, r3, ip
   1584c:	cmp	r3, r1
   15850:	mov	r9, r3
   15854:	moveq	r3, #8192	; 0x2000
   15858:	moveq	r9, r3
   1585c:	subs	sl, r2, r3
   15860:	ldr	r3, [sp, #16]
   15864:	mov	r2, sl
   15868:	sbc	fp, r3, r1
   1586c:	mov	r3, fp
   15870:	bl	111ec <lseek64@plt>
   15874:	cmp	r0, #0
   15878:	sbcs	r3, r1, #0
   1587c:	blt	15a2c <__assert_fail@plt+0x4618>
   15880:	add	r6, sp, #56	; 0x38
   15884:	mov	r2, r9
   15888:	mov	r1, r6
   1588c:	mov	r0, r8
   15890:	bl	1c9c0 <__assert_fail@plt+0xb5ac>
   15894:	cmn	r0, #1
   15898:	mov	r9, r0
   1589c:	beq	15af8 <__assert_fail@plt+0x46e4>
   158a0:	add	r1, sp, #8256	; 0x2040
   158a4:	mov	r2, r0
   158a8:	add	r1, r1, #48	; 0x30
   158ac:	mov	r3, #0
   158b0:	ldr	r1, [r1]
   158b4:	strd	r2, [sp, #24]
   158b8:	adds	r2, r0, sl
   158bc:	adc	r3, r3, fp
   158c0:	cmp	r0, #0
   158c4:	str	r2, [r1]
   158c8:	str	r3, [r1, #4]
   158cc:	bne	15ab8 <__assert_fail@plt+0x46a4>
   158d0:	add	r3, sp, #8256	; 0x2040
   158d4:	add	r3, r3, #32
   158d8:	ldrd	r2, [r3]
   158dc:	cmp	fp, r3
   158e0:	cmpeq	sl, r2
   158e4:	beq	15b3c <__assert_fail@plt+0x4728>
   158e8:	subs	sl, sl, #8192	; 0x2000
   158ec:	mov	r7, #0
   158f0:	sbc	fp, fp, #0
   158f4:	mov	r0, r8
   158f8:	mov	r3, fp
   158fc:	mov	r2, sl
   15900:	str	r7, [sp]
   15904:	bl	111ec <lseek64@plt>
   15908:	cmp	r0, #0
   1590c:	sbcs	r3, r1, #0
   15910:	blt	15ae8 <__assert_fail@plt+0x46d4>
   15914:	mov	r2, #8192	; 0x2000
   15918:	mov	r1, r6
   1591c:	mov	r0, r8
   15920:	bl	1c9c0 <__assert_fail@plt+0xb5ac>
   15924:	cmn	r0, #1
   15928:	mov	r9, r0
   1592c:	beq	15af8 <__assert_fail@plt+0x46e4>
   15930:	add	r1, sp, #8256	; 0x2040
   15934:	mov	r2, r0
   15938:	add	r1, r1, #48	; 0x30
   1593c:	mov	r3, #0
   15940:	ldr	r1, [r1]
   15944:	strd	r2, [sp, #24]
   15948:	adds	r2, r0, sl
   1594c:	adc	r3, r3, fp
   15950:	cmp	r0, #0
   15954:	str	r2, [r1]
   15958:	str	r3, [r1, #4]
   1595c:	beq	15a90 <__assert_fail@plt+0x467c>
   15960:	movw	r3, #4560	; 0x11d0
   15964:	movt	r3, #3
   15968:	ldrb	r7, [r3]
   1596c:	mov	r2, r9
   15970:	b	15984 <__assert_fail@plt+0x4570>
   15974:	cmp	r2, #0
   15978:	mov	r4, r1
   1597c:	mov	r5, r3
   15980:	beq	158d0 <__assert_fail@plt+0x44bc>
   15984:	mov	r1, r7
   15988:	mov	r0, r6
   1598c:	bl	112c4 <memrchr@plt>
   15990:	cmp	r0, #0
   15994:	beq	158d0 <__assert_fail@plt+0x44bc>
   15998:	subs	r1, r4, #1
   1599c:	sub	r2, r0, r6
   159a0:	sbc	r3, r5, #0
   159a4:	orrs	ip, r4, r5
   159a8:	bne	15974 <__assert_fail@plt+0x4560>
   159ac:	sub	r1, r9, #1
   159b0:	add	r0, r0, #1
   159b4:	sub	r1, r1, r2
   159b8:	mov	r7, #1
   159bc:	bl	14340 <__assert_fail@plt+0x2f2c>
   159c0:	ldr	r0, [sp, #12]
   159c4:	mov	r1, r8
   159c8:	ldr	r3, [sp, #24]
   159cc:	adds	r2, r3, sl
   159d0:	ldr	r3, [sp, #28]
   159d4:	adc	r3, r3, fp
   159d8:	subs	r2, r0, r2
   159dc:	ldr	r0, [sp, #16]
   159e0:	sbc	r3, r0, r3
   159e4:	ldr	r0, [sp, #20]
   159e8:	bl	14fd4 <__assert_fail@plt+0x3bc0>
   159ec:	add	r3, sp, #8256	; 0x2040
   159f0:	add	r2, sp, #8256	; 0x2040
   159f4:	add	r3, r3, #48	; 0x30
   159f8:	add	r2, r2, #48	; 0x30
   159fc:	ldr	r3, [r3]
   15a00:	ldr	r2, [r2]
   15a04:	ldr	r3, [r3]
   15a08:	ldr	r2, [r2, #4]
   15a0c:	adds	r3, r3, r0
   15a10:	adc	r2, r2, r1
   15a14:	add	r1, sp, #8256	; 0x2040
   15a18:	add	r1, r1, #48	; 0x30
   15a1c:	ldr	r1, [r1]
   15a20:	str	r3, [r1]
   15a24:	str	r2, [r1, #4]
   15a28:	b	15a94 <__assert_fail@plt+0x4680>
   15a2c:	mov	r0, sl
   15a30:	mov	r1, fp
   15a34:	add	r2, sp, #56	; 0x38
   15a38:	bl	18d78 <__assert_fail@plt+0x7964>
   15a3c:	mov	r5, r0
   15a40:	bl	112dc <__errno_location@plt>
   15a44:	ldr	r6, [r0]
   15a48:	mov	r2, #5
   15a4c:	movw	r1, #62728	; 0xf508
   15a50:	movt	r1, #1
   15a54:	mov	r0, r7
   15a58:	bl	11174 <dcgettext@plt>
   15a5c:	mov	r4, r0
   15a60:	mov	r1, #3
   15a64:	ldr	r2, [sp, #20]
   15a68:	mov	r0, r7
   15a6c:	bl	1c080 <__assert_fail@plt+0xac6c>
   15a70:	mov	r3, r0
   15a74:	mov	r1, r6
   15a78:	str	r5, [sp]
   15a7c:	mov	r0, r7
   15a80:	mov	r2, r4
   15a84:	bl	1121c <error@plt>
   15a88:	mov	r0, #1
   15a8c:	bl	11294 <exit@plt>
   15a90:	mov	r7, #1
   15a94:	mov	r0, r7
   15a98:	add	sp, sp, #8192	; 0x2000
   15a9c:	add	sp, sp, #60	; 0x3c
   15aa0:	ldrd	r4, [sp]
   15aa4:	ldrd	r6, [sp, #8]
   15aa8:	ldrd	r8, [sp, #16]
   15aac:	ldrd	sl, [sp, #24]
   15ab0:	add	sp, sp, #32
   15ab4:	pop	{pc}		; (ldr pc, [sp], #4)
   15ab8:	movw	r3, #4560	; 0x11d0
   15abc:	movt	r3, #3
   15ac0:	add	r2, r6, r0
   15ac4:	ldrb	r1, [r3]
   15ac8:	ldrb	r2, [r2, #-1]
   15acc:	cmp	r2, r1
   15ad0:	beq	15adc <__assert_fail@plt+0x46c8>
   15ad4:	subs	r4, r4, #1
   15ad8:	sbc	r5, r5, #0
   15adc:	cmp	r9, #0
   15ae0:	bne	15968 <__assert_fail@plt+0x4554>
   15ae4:	b	158d0 <__assert_fail@plt+0x44bc>
   15ae8:	sub	r2, r6, #24
   15aec:	mov	r0, sl
   15af0:	mov	r1, fp
   15af4:	b	15a38 <__assert_fail@plt+0x4624>
   15af8:	bl	112dc <__errno_location@plt>
   15afc:	ldr	r4, [r0]
   15b00:	mov	r2, #5
   15b04:	mov	r0, r7
   15b08:	movw	r1, #62596	; 0xf484
   15b0c:	movt	r1, #1
   15b10:	bl	11174 <dcgettext@plt>
   15b14:	mov	r5, r0
   15b18:	mov	r0, #4
   15b1c:	ldr	r1, [sp, #20]
   15b20:	bl	1b500 <__assert_fail@plt+0xa0ec>
   15b24:	mov	r3, r0
   15b28:	mov	r2, r5
   15b2c:	mov	r1, r4
   15b30:	mov	r0, r7
   15b34:	bl	1121c <error@plt>
   15b38:	b	15a94 <__assert_fail@plt+0x4680>
   15b3c:	mov	r4, #0
   15b40:	mov	r3, fp
   15b44:	mov	r2, sl
   15b48:	mov	r0, r8
   15b4c:	str	r4, [sp]
   15b50:	bl	111ec <lseek64@plt>
   15b54:	cmp	r0, #0
   15b58:	sbcs	r3, r1, #0
   15b5c:	blt	15ba0 <__assert_fail@plt+0x478c>
   15b60:	mov	r1, r8
   15b64:	ldrd	r2, [sp, #12]
   15b68:	mov	r7, #1
   15b6c:	ldr	r0, [sp, #20]
   15b70:	bl	14fd4 <__assert_fail@plt+0x3bc0>
   15b74:	add	r3, sp, #8256	; 0x2040
   15b78:	adds	r0, sl, r0
   15b7c:	add	r3, r3, #48	; 0x30
   15b80:	adc	r1, fp, r1
   15b84:	ldr	r3, [r3]
   15b88:	str	r0, [r3]
   15b8c:	add	r3, sp, #8256	; 0x2040
   15b90:	add	r3, r3, #48	; 0x30
   15b94:	ldr	r3, [r3]
   15b98:	str	r1, [r3, #4]
   15b9c:	b	15a94 <__assert_fail@plt+0x4680>
   15ba0:	sub	r2, r6, #24
   15ba4:	mov	r1, fp
   15ba8:	mov	r0, sl
   15bac:	bl	18d78 <__assert_fail@plt+0x7964>
   15bb0:	mov	r6, r0
   15bb4:	bl	112dc <__errno_location@plt>
   15bb8:	ldr	r7, [r0]
   15bbc:	mov	r2, #5
   15bc0:	movw	r1, #62728	; 0xf508
   15bc4:	movt	r1, #1
   15bc8:	mov	r0, r4
   15bcc:	bl	11174 <dcgettext@plt>
   15bd0:	mov	r5, r0
   15bd4:	mov	r1, #3
   15bd8:	ldr	r2, [sp, #20]
   15bdc:	mov	r0, r4
   15be0:	bl	1c080 <__assert_fail@plt+0xac6c>
   15be4:	mov	r3, r0
   15be8:	mov	r1, r7
   15bec:	str	r6, [sp]
   15bf0:	mov	r0, r4
   15bf4:	mov	r2, r5
   15bf8:	bl	1121c <error@plt>
   15bfc:	mov	r0, #1
   15c00:	bl	11294 <exit@plt>
   15c04:	strd	r4, [sp, #-36]!	; 0xffffffdc
   15c08:	mov	r4, r0
   15c0c:	ldr	r5, [r0]
   15c10:	strd	r6, [sp, #8]
   15c14:	mov	r6, r1
   15c18:	movw	r1, #62540	; 0xf44c
   15c1c:	movt	r1, #1
   15c20:	strd	r8, [sp, #16]
   15c24:	strd	sl, [sp, #24]
   15c28:	str	lr, [sp, #32]
   15c2c:	sub	sp, sp, #148	; 0x94
   15c30:	mov	r0, r5
   15c34:	bl	110cc <strcmp@plt>
   15c38:	ldr	r8, [r4, #52]	; 0x34
   15c3c:	subs	r7, r0, #0
   15c40:	moveq	r5, r7
   15c44:	ldrb	r9, [r4, #46]	; 0x2e
   15c48:	moveq	r3, r8
   15c4c:	beq	15c6c <__assert_fail@plt+0x4858>
   15c50:	cmp	r6, #0
   15c54:	mov	r0, r5
   15c58:	moveq	r1, #2048	; 0x800
   15c5c:	movne	r1, #0
   15c60:	bl	175cc <__assert_fail@plt+0x61b8>
   15c64:	ldr	r3, [r4, #52]	; 0x34
   15c68:	mov	r5, r0
   15c6c:	clz	r3, r3
   15c70:	ldr	r2, [r4, #48]	; 0x30
   15c74:	lsr	r3, r3, #5
   15c78:	cmn	r2, #1
   15c7c:	movne	r2, #0
   15c80:	moveq	r2, #1
   15c84:	cmp	r2, r3
   15c88:	beq	165f4 <__assert_fail@plt+0x51e0>
   15c8c:	movw	sl, #4560	; 0x11d0
   15c90:	movt	sl, #3
   15c94:	ldrb	fp, [sl, #2]
   15c98:	ldrb	r3, [sl, #3]
   15c9c:	cmp	fp, #0
   15ca0:	beq	15ea4 <__assert_fail@plt+0x4a90>
   15ca4:	cmn	r5, #1
   15ca8:	beq	16004 <__assert_fail@plt+0x4bf0>
   15cac:	mov	r2, #1
   15cb0:	cmp	r3, #0
   15cb4:	strb	r2, [r4, #46]	; 0x2e
   15cb8:	beq	161e4 <__assert_fail@plt+0x4dd0>
   15cbc:	add	r3, sp, #40	; 0x28
   15cc0:	mov	r2, r3
   15cc4:	mov	r1, r5
   15cc8:	mov	r0, #3
   15ccc:	bl	111c8 <__fxstat64@plt>
   15cd0:	cmp	r0, #0
   15cd4:	blt	15ebc <__assert_fail@plt+0x4aa8>
   15cd8:	ldr	r3, [sp, #56]	; 0x38
   15cdc:	and	r2, r3, #61440	; 0xf000
   15ce0:	and	r3, r3, #45056	; 0xb000
   15ce4:	sub	r2, r2, #4096	; 0x1000
   15ce8:	subs	r3, r3, #32768	; 0x8000
   15cec:	bic	r2, r2, #4096	; 0x1000
   15cf0:	movne	r3, #1
   15cf4:	cmp	r2, #0
   15cf8:	moveq	r3, #0
   15cfc:	cmp	r3, #0
   15d00:	bne	16078 <__assert_fail@plt+0x4c64>
   15d04:	ldr	r9, [r4]
   15d08:	movw	r1, #62540	; 0xf44c
   15d0c:	movt	r1, #1
   15d10:	mov	r0, r9
   15d14:	bl	110cc <strcmp@plt>
   15d18:	cmp	r0, #0
   15d1c:	beq	163a0 <__assert_fail@plt+0x4f8c>
   15d20:	mov	r1, r9
   15d24:	mov	r0, r5
   15d28:	bl	14614 <__assert_fail@plt+0x3200>
   15d2c:	cmp	r0, #0
   15d30:	strb	r0, [r4, #45]	; 0x2d
   15d34:	beq	15d44 <__assert_fail@plt+0x4930>
   15d38:	ldrb	r0, [sl, #3]
   15d3c:	cmp	r0, #0
   15d40:	beq	16520 <__assert_fail@plt+0x510c>
   15d44:	mov	r0, #0
   15d48:	bics	r8, r8, #2
   15d4c:	ldr	r3, [r4, #48]	; 0x30
   15d50:	str	r0, [r4, #52]	; 0x34
   15d54:	beq	1621c <__assert_fail@plt+0x4e08>
   15d58:	cmn	r3, #1
   15d5c:	movweq	r1, #63028	; 0xf634
   15d60:	movteq	r1, #1
   15d64:	bne	16614 <__assert_fail@plt+0x5200>
   15d68:	mov	r2, #5
   15d6c:	bl	11174 <dcgettext@plt>
   15d70:	ldr	r8, [r4]
   15d74:	mov	r9, r0
   15d78:	movw	r1, #62540	; 0xf44c
   15d7c:	movt	r1, #1
   15d80:	mov	r0, r8
   15d84:	bl	110cc <strcmp@plt>
   15d88:	cmp	r0, #0
   15d8c:	beq	16508 <__assert_fail@plt+0x50f4>
   15d90:	mov	r1, r8
   15d94:	mov	r0, #4
   15d98:	bl	1b500 <__assert_fail@plt+0xa0ec>
   15d9c:	mov	r1, #0
   15da0:	mov	r3, r0
   15da4:	mov	r2, r9
   15da8:	mov	r0, r1
   15dac:	bl	1121c <error@plt>
   15db0:	ldrd	r2, [sp, #40]	; 0x28
   15db4:	mov	r1, #0
   15db8:	cmp	r7, #0
   15dbc:	mvneq	r6, #0
   15dc0:	mov	r8, #0
   15dc4:	ldr	r7, [r4]
   15dc8:	mov	r9, #0
   15dcc:	ldr	ip, [sp, #56]	; 0x38
   15dd0:	strb	r1, [r4, #44]	; 0x2c
   15dd4:	strd	r2, [r4, #24]
   15dd8:	ldr	r0, [sp, #120]	; 0x78
   15ddc:	strd	r8, [r4, #8]
   15de0:	ldr	r1, [sp, #124]	; 0x7c
   15de4:	ldrd	r2, [sp, #136]	; 0x88
   15de8:	str	r0, [r4, #16]
   15dec:	mov	r0, r7
   15df0:	str	r6, [r4, #56]	; 0x38
   15df4:	str	r1, [r4, #20]
   15df8:	movw	r1, #62540	; 0xf44c
   15dfc:	movt	r1, #1
   15e00:	str	ip, [r4, #40]	; 0x28
   15e04:	strd	r2, [r4, #32]
   15e08:	str	r5, [r4, #48]	; 0x30
   15e0c:	strd	r8, [r4, #72]	; 0x48
   15e10:	bl	110cc <strcmp@plt>
   15e14:	cmp	r0, #0
   15e18:	beq	16460 <__assert_fail@plt+0x504c>
   15e1c:	mov	r4, #0
   15e20:	mov	r3, #0
   15e24:	mov	r0, r5
   15e28:	mov	r2, #0
   15e2c:	str	r4, [sp]
   15e30:	bl	111ec <lseek64@plt>
   15e34:	cmp	r0, #0
   15e38:	sbcs	r3, r1, #0
   15e3c:	bge	15f20 <__assert_fail@plt+0x4b0c>
   15e40:	add	r2, sp, #16
   15e44:	mov	r1, #0
   15e48:	mov	r0, #0
   15e4c:	bl	18d78 <__assert_fail@plt+0x7964>
   15e50:	mov	r6, r0
   15e54:	bl	112dc <__errno_location@plt>
   15e58:	ldr	r8, [r0]
   15e5c:	mov	r2, #5
   15e60:	movw	r1, #62728	; 0xf508
   15e64:	movt	r1, #1
   15e68:	mov	r0, r4
   15e6c:	bl	11174 <dcgettext@plt>
   15e70:	mov	r5, r0
   15e74:	mov	r2, r7
   15e78:	mov	r1, #3
   15e7c:	mov	r0, r4
   15e80:	bl	1c080 <__assert_fail@plt+0xac6c>
   15e84:	mov	r3, r0
   15e88:	mov	r1, r8
   15e8c:	str	r6, [sp]
   15e90:	mov	r0, r4
   15e94:	mov	r2, r5
   15e98:	bl	1121c <error@plt>
   15e9c:	mov	r0, #1
   15ea0:	bl	11294 <exit@plt>
   15ea4:	mov	r2, #1
   15ea8:	cmp	r3, #0
   15eac:	strb	r2, [r4, #46]	; 0x2e
   15eb0:	beq	16118 <__assert_fail@plt+0x4d04>
   15eb4:	cmn	r5, #1
   15eb8:	bne	15cbc <__assert_fail@plt+0x48a8>
   15ebc:	bl	112dc <__errno_location@plt>
   15ec0:	ldrb	r6, [r4, #46]	; 0x2e
   15ec4:	ldr	r7, [r0]
   15ec8:	cmp	r6, #0
   15ecc:	str	r7, [r4, #52]	; 0x34
   15ed0:	beq	16020 <__assert_fail@plt+0x4c0c>
   15ed4:	ldr	r6, [r4]
   15ed8:	movw	r1, #62540	; 0xf44c
   15edc:	movt	r1, #1
   15ee0:	mov	r0, r6
   15ee4:	bl	110cc <strcmp@plt>
   15ee8:	cmp	r7, r8
   15eec:	mov	r3, r0
   15ef0:	bne	16044 <__assert_fail@plt+0x4c30>
   15ef4:	cmp	r3, #0
   15ef8:	add	r7, r5, #1
   15efc:	beq	15f3c <__assert_fail@plt+0x4b28>
   15f00:	cmp	r7, #1
   15f04:	bhi	15f5c <__assert_fail@plt+0x4b48>
   15f08:	ldr	r5, [r4, #48]	; 0x30
   15f0c:	add	r3, r5, #1
   15f10:	cmp	r3, #1
   15f14:	bhi	15fac <__assert_fail@plt+0x4b98>
   15f18:	mvn	r3, #0
   15f1c:	str	r3, [r4, #48]	; 0x30
   15f20:	add	sp, sp, #148	; 0x94
   15f24:	ldrd	r4, [sp]
   15f28:	ldrd	r6, [sp, #8]
   15f2c:	ldrd	r8, [sp, #16]
   15f30:	ldrd	sl, [sp, #24]
   15f34:	add	sp, sp, #32
   15f38:	pop	{pc}		; (ldr pc, [sp], #4)
   15f3c:	mov	r0, r3
   15f40:	movw	r1, #62544	; 0xf450
   15f44:	movt	r1, #1
   15f48:	mov	r2, #5
   15f4c:	bl	11174 <dcgettext@plt>
   15f50:	cmp	r7, #1
   15f54:	mov	r6, r0
   15f58:	bls	15f6c <__assert_fail@plt+0x4b58>
   15f5c:	mov	r0, r5
   15f60:	bl	113fc <close@plt>
   15f64:	cmp	r0, #0
   15f68:	bne	16144 <__assert_fail@plt+0x4d30>
   15f6c:	ldr	r6, [r4]
   15f70:	movw	r1, #62540	; 0xf44c
   15f74:	movt	r1, #1
   15f78:	ldr	r5, [r4, #48]	; 0x30
   15f7c:	mov	r0, r6
   15f80:	bl	110cc <strcmp@plt>
   15f84:	cmp	r0, #0
   15f88:	bne	15f0c <__assert_fail@plt+0x4af8>
   15f8c:	movw	r1, #62544	; 0xf450
   15f90:	movt	r1, #1
   15f94:	mov	r2, #5
   15f98:	bl	11174 <dcgettext@plt>
   15f9c:	add	r3, r5, #1
   15fa0:	mov	r6, r0
   15fa4:	cmp	r3, #1
   15fa8:	bls	15f18 <__assert_fail@plt+0x4b04>
   15fac:	mov	r0, r5
   15fb0:	bl	113fc <close@plt>
   15fb4:	cmp	r0, #0
   15fb8:	beq	15f18 <__assert_fail@plt+0x4b04>
   15fbc:	bl	112dc <__errno_location@plt>
   15fc0:	ldr	r8, [r0]
   15fc4:	mov	r2, #5
   15fc8:	movw	r1, #62688	; 0xf4e0
   15fcc:	movt	r1, #1
   15fd0:	mov	r0, #0
   15fd4:	bl	11174 <dcgettext@plt>
   15fd8:	mov	r7, r0
   15fdc:	mov	r1, r6
   15fe0:	mov	r0, #4
   15fe4:	bl	1b500 <__assert_fail@plt+0xa0ec>
   15fe8:	mov	r3, r0
   15fec:	mov	r1, r8
   15ff0:	str	r5, [sp]
   15ff4:	mov	r2, r7
   15ff8:	mov	r0, #0
   15ffc:	bl	1121c <error@plt>
   16000:	b	15f18 <__assert_fail@plt+0x4b04>
   16004:	mov	r2, #0
   16008:	cmp	r3, r2
   1600c:	strb	r2, [r4, #46]	; 0x2e
   16010:	beq	163b8 <__assert_fail@plt+0x4fa4>
   16014:	bl	112dc <__errno_location@plt>
   16018:	ldr	r7, [r0]
   1601c:	str	r7, [r4, #52]	; 0x34
   16020:	cmp	r9, #0
   16024:	bne	1618c <__assert_fail@plt+0x4d78>
   16028:	ldr	r6, [r4]
   1602c:	movw	r1, #62540	; 0xf44c
   16030:	movt	r1, #1
   16034:	mov	r0, r6
   16038:	bl	110cc <strcmp@plt>
   1603c:	mov	r3, r0
   16040:	b	15ef4 <__assert_fail@plt+0x4ae0>
   16044:	cmp	r0, #0
   16048:	beq	16448 <__assert_fail@plt+0x5034>
   1604c:	mov	r2, r6
   16050:	mov	r1, #3
   16054:	mov	r0, #0
   16058:	bl	1c080 <__assert_fail@plt+0xac6c>
   1605c:	mov	r3, r0
   16060:	mov	r1, r7
   16064:	movw	r2, #556	; 0x22c
   16068:	movt	r2, #2
   1606c:	mov	r0, #0
   16070:	bl	1121c <error@plt>
   16074:	b	16028 <__assert_fail@plt+0x4c14>
   16078:	mvn	r1, #0
   1607c:	mov	r2, #0
   16080:	cmp	fp, #0
   16084:	strb	r2, [r4, #46]	; 0x2e
   16088:	str	r1, [r4, #52]	; 0x34
   1608c:	bne	16478 <__assert_fail@plt+0x5064>
   16090:	adds	r8, r8, #1
   16094:	strb	r3, [r4, #44]	; 0x2c
   16098:	movne	r8, #1
   1609c:	orrs	r3, r9, r8
   160a0:	beq	16028 <__assert_fail@plt+0x4c14>
   160a4:	mov	r2, #5
   160a8:	movw	r1, #62888	; 0xf5a8
   160ac:	movt	r1, #1
   160b0:	mov	r0, #0
   160b4:	bl	11174 <dcgettext@plt>
   160b8:	ldr	r6, [r4]
   160bc:	mov	r7, r0
   160c0:	movw	r1, #62540	; 0xf44c
   160c4:	movt	r1, #1
   160c8:	mov	r0, r6
   160cc:	bl	110cc <strcmp@plt>
   160d0:	cmp	r0, #0
   160d4:	beq	164a8 <__assert_fail@plt+0x5094>
   160d8:	mov	r1, r6
   160dc:	mov	r0, #4
   160e0:	bl	1b500 <__assert_fail@plt+0xa0ec>
   160e4:	ldrb	r3, [r4, #44]	; 0x2c
   160e8:	mov	r6, r0
   160ec:	cmp	r3, #0
   160f0:	movweq	r0, #65356	; 0xff4c
   160f4:	movteq	r0, #1
   160f8:	bne	16490 <__assert_fail@plt+0x507c>
   160fc:	mov	r1, #0
   16100:	mov	r3, r6
   16104:	str	r0, [sp]
   16108:	mov	r2, r7
   1610c:	mov	r0, r1
   16110:	bl	1121c <error@plt>
   16114:	b	16028 <__assert_fail@plt+0x4c14>
   16118:	add	r2, sp, #40	; 0x28
   1611c:	mov	r0, #3
   16120:	ldr	r1, [r4]
   16124:	bl	11408 <__lxstat64@plt>
   16128:	cmp	r0, #0
   1612c:	bne	15eb4 <__assert_fail@plt+0x4aa0>
   16130:	ldr	r3, [sp, #56]	; 0x38
   16134:	and	r3, r3, #61440	; 0xf000
   16138:	cmp	r3, #40960	; 0xa000
   1613c:	bne	15eb4 <__assert_fail@plt+0x4aa0>
   16140:	b	163e0 <__assert_fail@plt+0x4fcc>
   16144:	bl	112dc <__errno_location@plt>
   16148:	ldr	r8, [r0]
   1614c:	mov	r2, #5
   16150:	movw	r1, #62688	; 0xf4e0
   16154:	movt	r1, #1
   16158:	mov	r0, #0
   1615c:	bl	11174 <dcgettext@plt>
   16160:	mov	r7, r0
   16164:	mov	r1, r6
   16168:	mov	r0, #4
   1616c:	bl	1b500 <__assert_fail@plt+0xa0ec>
   16170:	mov	r3, r0
   16174:	mov	r1, r8
   16178:	str	r5, [sp]
   1617c:	mov	r2, r7
   16180:	mov	r0, #0
   16184:	bl	1121c <error@plt>
   16188:	b	15f6c <__assert_fail@plt+0x4b58>
   1618c:	mov	r2, #5
   16190:	movw	r1, #62860	; 0xf58c
   16194:	movt	r1, #1
   16198:	mov	r0, #0
   1619c:	bl	11174 <dcgettext@plt>
   161a0:	ldr	r6, [r4]
   161a4:	mov	r8, r0
   161a8:	movw	r1, #62540	; 0xf44c
   161ac:	movt	r1, #1
   161b0:	mov	r0, r6
   161b4:	bl	110cc <strcmp@plt>
   161b8:	cmp	r0, #0
   161bc:	beq	164f0 <__assert_fail@plt+0x50dc>
   161c0:	mov	r1, r6
   161c4:	mov	r0, #4
   161c8:	bl	1b500 <__assert_fail@plt+0xa0ec>
   161cc:	mov	r3, r0
   161d0:	mov	r2, r8
   161d4:	mov	r1, r7
   161d8:	mov	r0, #0
   161dc:	bl	1121c <error@plt>
   161e0:	b	16028 <__assert_fail@plt+0x4c14>
   161e4:	add	r3, sp, #40	; 0x28
   161e8:	mov	r0, #3
   161ec:	ldr	r1, [r4]
   161f0:	mov	r2, r3
   161f4:	str	r3, [sp, #12]
   161f8:	bl	11408 <__lxstat64@plt>
   161fc:	cmp	r0, #0
   16200:	ldr	r3, [sp, #12]
   16204:	bne	15cc0 <__assert_fail@plt+0x48ac>
   16208:	ldr	r2, [sp, #56]	; 0x38
   1620c:	and	r2, r2, #61440	; 0xf000
   16210:	cmp	r2, #40960	; 0xa000
   16214:	bne	15cc0 <__assert_fail@plt+0x48ac>
   16218:	b	163e0 <__assert_fail@plt+0x4fcc>
   1621c:	cmn	r3, #1
   16220:	beq	1659c <__assert_fail@plt+0x5188>
   16224:	ldrd	r0, [r4, #32]
   16228:	ldrd	r2, [sp, #136]	; 0x88
   1622c:	cmp	r1, r3
   16230:	cmpeq	r0, r2
   16234:	bne	162c8 <__assert_fail@plt+0x4eb4>
   16238:	ldrd	r0, [r4, #24]
   1623c:	ldrd	r2, [sp, #40]	; 0x28
   16240:	cmp	r1, r3
   16244:	cmpeq	r0, r2
   16248:	bne	162c8 <__assert_fail@plt+0x4eb4>
   1624c:	ldr	r4, [r4]
   16250:	movw	r1, #62540	; 0xf44c
   16254:	movt	r1, #1
   16258:	mov	r0, r4
   1625c:	bl	110cc <strcmp@plt>
   16260:	cmp	r0, #0
   16264:	beq	165dc <__assert_fail@plt+0x51c8>
   16268:	cmp	r5, #0
   1626c:	beq	15f20 <__assert_fail@plt+0x4b0c>
   16270:	mov	r0, r5
   16274:	bl	113fc <close@plt>
   16278:	cmp	r0, #0
   1627c:	beq	15f20 <__assert_fail@plt+0x4b0c>
   16280:	bl	112dc <__errno_location@plt>
   16284:	ldr	r7, [r0]
   16288:	mov	r2, #5
   1628c:	movw	r1, #62688	; 0xf4e0
   16290:	movt	r1, #1
   16294:	mov	r0, #0
   16298:	bl	11174 <dcgettext@plt>
   1629c:	mov	r6, r0
   162a0:	mov	r1, r4
   162a4:	mov	r0, #4
   162a8:	bl	1b500 <__assert_fail@plt+0xa0ec>
   162ac:	mov	r3, r0
   162b0:	mov	r1, r7
   162b4:	str	r5, [sp]
   162b8:	mov	r2, r6
   162bc:	mov	r0, #0
   162c0:	bl	1121c <error@plt>
   162c4:	b	15f20 <__assert_fail@plt+0x4b0c>
   162c8:	mov	r2, #5
   162cc:	movw	r1, #63096	; 0xf678
   162d0:	movt	r1, #1
   162d4:	mov	r0, #0
   162d8:	bl	11174 <dcgettext@plt>
   162dc:	ldr	r8, [r4]
   162e0:	mov	r9, r0
   162e4:	movw	r1, #62540	; 0xf44c
   162e8:	movt	r1, #1
   162ec:	mov	r0, r8
   162f0:	bl	110cc <strcmp@plt>
   162f4:	cmp	r0, #0
   162f8:	beq	164d8 <__assert_fail@plt+0x50c4>
   162fc:	mov	r1, r8
   16300:	mov	r0, #4
   16304:	bl	1b500 <__assert_fail@plt+0xa0ec>
   16308:	mov	r1, #0
   1630c:	mov	r3, r0
   16310:	mov	r2, r9
   16314:	mov	r0, r1
   16318:	bl	1121c <error@plt>
   1631c:	ldr	r9, [r4]
   16320:	movw	r1, #62540	; 0xf44c
   16324:	movt	r1, #1
   16328:	ldr	r8, [r4, #48]	; 0x30
   1632c:	mov	r0, r9
   16330:	bl	110cc <strcmp@plt>
   16334:	cmp	r0, #0
   16338:	beq	164c0 <__assert_fail@plt+0x50ac>
   1633c:	add	r3, r8, #1
   16340:	cmp	r3, #1
   16344:	bls	15db0 <__assert_fail@plt+0x499c>
   16348:	mov	r0, r8
   1634c:	bl	113fc <close@plt>
   16350:	cmp	r0, #0
   16354:	beq	15db0 <__assert_fail@plt+0x499c>
   16358:	bl	112dc <__errno_location@plt>
   1635c:	ldr	fp, [r0]
   16360:	mov	r2, #5
   16364:	movw	r1, #62688	; 0xf4e0
   16368:	movt	r1, #1
   1636c:	mov	r0, #0
   16370:	bl	11174 <dcgettext@plt>
   16374:	mov	sl, r0
   16378:	mov	r1, r9
   1637c:	mov	r0, #4
   16380:	bl	1b500 <__assert_fail@plt+0xa0ec>
   16384:	mov	r3, r0
   16388:	mov	r1, fp
   1638c:	str	r8, [sp]
   16390:	mov	r2, sl
   16394:	mov	r0, #0
   16398:	bl	1121c <error@plt>
   1639c:	b	15db0 <__assert_fail@plt+0x499c>
   163a0:	movw	r1, #62544	; 0xf450
   163a4:	movt	r1, #1
   163a8:	mov	r2, #5
   163ac:	bl	11174 <dcgettext@plt>
   163b0:	mov	r9, r0
   163b4:	b	15d20 <__assert_fail@plt+0x490c>
   163b8:	add	r2, sp, #40	; 0x28
   163bc:	mov	r0, #3
   163c0:	ldr	r1, [r4]
   163c4:	bl	11408 <__lxstat64@plt>
   163c8:	cmp	r0, #0
   163cc:	bne	15ebc <__assert_fail@plt+0x4aa8>
   163d0:	ldr	r3, [sp, #56]	; 0x38
   163d4:	and	r3, r3, #61440	; 0xf000
   163d8:	cmp	r3, #40960	; 0xa000
   163dc:	bne	15ebc <__assert_fail@plt+0x4aa8>
   163e0:	mvn	r3, #0
   163e4:	mov	r0, #1
   163e8:	mov	r2, #5
   163ec:	movw	r1, #62804	; 0xf554
   163f0:	movt	r1, #1
   163f4:	strb	r0, [r4, #44]	; 0x2c
   163f8:	mov	r0, #0
   163fc:	str	r3, [r4, #52]	; 0x34
   16400:	bl	11174 <dcgettext@plt>
   16404:	ldr	r6, [r4]
   16408:	mov	r7, r0
   1640c:	movw	r1, #62540	; 0xf44c
   16410:	movt	r1, #1
   16414:	mov	r0, r6
   16418:	bl	110cc <strcmp@plt>
   1641c:	cmp	r0, #0
   16420:	beq	165ac <__assert_fail@plt+0x5198>
   16424:	mov	r1, r6
   16428:	mov	r0, #4
   1642c:	bl	1b500 <__assert_fail@plt+0xa0ec>
   16430:	mov	r1, #0
   16434:	mov	r3, r0
   16438:	mov	r2, r7
   1643c:	mov	r0, r1
   16440:	bl	1121c <error@plt>
   16444:	b	16028 <__assert_fail@plt+0x4c14>
   16448:	movw	r1, #62544	; 0xf450
   1644c:	movt	r1, #1
   16450:	mov	r2, #5
   16454:	bl	11174 <dcgettext@plt>
   16458:	mov	r6, r0
   1645c:	b	1604c <__assert_fail@plt+0x4c38>
   16460:	movw	r1, #62544	; 0xf450
   16464:	movt	r1, #1
   16468:	mov	r2, #5
   1646c:	bl	11174 <dcgettext@plt>
   16470:	mov	r7, r0
   16474:	b	15e1c <__assert_fail@plt+0x4a08>
   16478:	movw	r3, #4424	; 0x1148
   1647c:	movt	r3, #3
   16480:	ldr	r3, [r3, #4]
   16484:	subs	r3, r3, #1
   16488:	movne	r3, #1
   1648c:	b	16090 <__assert_fail@plt+0x4c7c>
   16490:	movw	r1, #62936	; 0xf5d8
   16494:	movt	r1, #1
   16498:	mov	r2, #5
   1649c:	mov	r0, #0
   164a0:	bl	11174 <dcgettext@plt>
   164a4:	b	160fc <__assert_fail@plt+0x4ce8>
   164a8:	movw	r1, #62544	; 0xf450
   164ac:	movt	r1, #1
   164b0:	mov	r2, #5
   164b4:	bl	11174 <dcgettext@plt>
   164b8:	mov	r6, r0
   164bc:	b	160d8 <__assert_fail@plt+0x4cc4>
   164c0:	movw	r1, #62544	; 0xf450
   164c4:	movt	r1, #1
   164c8:	mov	r2, #5
   164cc:	bl	11174 <dcgettext@plt>
   164d0:	mov	r9, r0
   164d4:	b	1633c <__assert_fail@plt+0x4f28>
   164d8:	movw	r1, #62544	; 0xf450
   164dc:	movt	r1, #1
   164e0:	mov	r2, #5
   164e4:	bl	11174 <dcgettext@plt>
   164e8:	mov	r8, r0
   164ec:	b	162fc <__assert_fail@plt+0x4ee8>
   164f0:	movw	r1, #62544	; 0xf450
   164f4:	movt	r1, #1
   164f8:	mov	r2, #5
   164fc:	bl	11174 <dcgettext@plt>
   16500:	mov	r6, r0
   16504:	b	161c0 <__assert_fail@plt+0x4dac>
   16508:	movw	r1, #62544	; 0xf450
   1650c:	movt	r1, #1
   16510:	mov	r2, #5
   16514:	bl	11174 <dcgettext@plt>
   16518:	mov	r8, r0
   1651c:	b	15d90 <__assert_fail@plt+0x497c>
   16520:	mvn	r3, #0
   16524:	mov	r2, #5
   16528:	movw	r1, #62964	; 0xf5f4
   1652c:	movt	r1, #1
   16530:	str	r3, [r4, #52]	; 0x34
   16534:	bl	11174 <dcgettext@plt>
   16538:	ldr	r6, [r4]
   1653c:	mov	r7, r0
   16540:	movw	r1, #62540	; 0xf44c
   16544:	movt	r1, #1
   16548:	mov	r0, r6
   1654c:	bl	110cc <strcmp@plt>
   16550:	cmp	r0, #0
   16554:	beq	165c4 <__assert_fail@plt+0x51b0>
   16558:	mov	r1, r6
   1655c:	mov	r0, #4
   16560:	bl	1b500 <__assert_fail@plt+0xa0ec>
   16564:	mov	r1, #0
   16568:	mov	r3, r0
   1656c:	mov	r2, r7
   16570:	mov	r0, r1
   16574:	bl	1121c <error@plt>
   16578:	ldr	r6, [r4]
   1657c:	movw	r3, #257	; 0x101
   16580:	movw	r1, #62540	; 0xf44c
   16584:	movt	r1, #1
   16588:	strh	r3, [r4, #44]	; 0x2c
   1658c:	mov	r0, r6
   16590:	bl	110cc <strcmp@plt>
   16594:	mov	r3, r0
   16598:	b	15ef4 <__assert_fail@plt+0x4ae0>
   1659c:	movw	r1, #63056	; 0xf650
   165a0:	movt	r1, #1
   165a4:	mov	r0, r8
   165a8:	b	15d68 <__assert_fail@plt+0x4954>
   165ac:	movw	r1, #62544	; 0xf450
   165b0:	movt	r1, #1
   165b4:	mov	r2, #5
   165b8:	bl	11174 <dcgettext@plt>
   165bc:	mov	r6, r0
   165c0:	b	16424 <__assert_fail@plt+0x5010>
   165c4:	movw	r1, #62544	; 0xf450
   165c8:	movt	r1, #1
   165cc:	mov	r2, #5
   165d0:	bl	11174 <dcgettext@plt>
   165d4:	mov	r6, r0
   165d8:	b	16558 <__assert_fail@plt+0x5144>
   165dc:	movw	r1, #62544	; 0xf450
   165e0:	movt	r1, #1
   165e4:	mov	r2, #5
   165e8:	bl	11174 <dcgettext@plt>
   165ec:	mov	r4, r0
   165f0:	b	16268 <__assert_fail@plt+0x4e54>
   165f4:	movw	r3, #62200	; 0xf2f8
   165f8:	movt	r3, #1
   165fc:	movw	r1, #62772	; 0xf534
   16600:	movt	r1, #1
   16604:	movw	r0, #62784	; 0xf540
   16608:	movt	r0, #1
   1660c:	movw	r2, #994	; 0x3e2
   16610:	bl	11414 <__assert_fail@plt>
   16614:	movw	r3, #62200	; 0xf2f8
   16618:	movt	r3, #1
   1661c:	movw	r1, #62772	; 0xf534
   16620:	movt	r1, #1
   16624:	movw	r0, #63016	; 0xf628
   16628:	movt	r0, #1
   1662c:	movw	r2, #1071	; 0x42f
   16630:	bl	11414 <__assert_fail@plt>
   16634:	subs	r4, r0, #0
   16638:	str	r7, [sp, #-8]!
   1663c:	str	lr, [sp, #4]
   16640:	sub	sp, sp, #56	; 0x38
   16644:	beq	1668c <__assert_fail@plt+0x5278>
   16648:	movw	r3, #4544	; 0x11c0
   1664c:	movt	r3, #3
   16650:	ldr	r5, [r3]
   16654:	mov	r2, #5
   16658:	movw	r1, #63148	; 0xf6ac
   1665c:	movt	r1, #1
   16660:	mov	r0, #0
   16664:	bl	11174 <dcgettext@plt>
   16668:	movw	r3, #4588	; 0x11ec
   1666c:	movt	r3, #3
   16670:	mov	r2, r0
   16674:	mov	r1, #1
   16678:	ldr	r3, [r3]
   1667c:	mov	r0, r5
   16680:	bl	11324 <__fprintf_chk@plt>
   16684:	mov	r0, r4
   16688:	bl	11294 <exit@plt>
   1668c:	mov	r2, #5
   16690:	movw	r1, #63188	; 0xf6d4
   16694:	movt	r1, #1
   16698:	movw	r5, #4548	; 0x11c4
   1669c:	movt	r5, #3
   166a0:	bl	11174 <dcgettext@plt>
   166a4:	movw	r3, #4588	; 0x11ec
   166a8:	movt	r3, #3
   166ac:	mov	r1, r0
   166b0:	mov	r0, #1
   166b4:	ldr	r2, [r3]
   166b8:	bl	11300 <__printf_chk@plt>
   166bc:	mov	r2, #5
   166c0:	movw	r1, #63224	; 0xf6f8
   166c4:	movt	r1, #1
   166c8:	mov	r0, r4
   166cc:	bl	11174 <dcgettext@plt>
   166d0:	mov	r1, r0
   166d4:	mov	r2, #10
   166d8:	mov	r0, #1
   166dc:	bl	11300 <__printf_chk@plt>
   166e0:	mov	r2, #5
   166e4:	movw	r1, #63356	; 0xf77c
   166e8:	movt	r1, #1
   166ec:	mov	r0, r4
   166f0:	bl	11174 <dcgettext@plt>
   166f4:	ldr	r1, [r5]
   166f8:	bl	110b4 <fputs_unlocked@plt>
   166fc:	mov	r2, #5
   16700:	movw	r1, #63412	; 0xf7b4
   16704:	movt	r1, #1
   16708:	mov	r0, r4
   1670c:	bl	11174 <dcgettext@plt>
   16710:	ldr	r1, [r5]
   16714:	bl	110b4 <fputs_unlocked@plt>
   16718:	mov	r2, #5
   1671c:	movw	r1, #63488	; 0xf800
   16720:	movt	r1, #1
   16724:	mov	r0, r4
   16728:	bl	11174 <dcgettext@plt>
   1672c:	ldr	r1, [r5]
   16730:	bl	110b4 <fputs_unlocked@plt>
   16734:	mov	r2, #5
   16738:	movw	r1, #63636	; 0xf894
   1673c:	movt	r1, #1
   16740:	mov	r0, r4
   16744:	bl	11174 <dcgettext@plt>
   16748:	ldr	r1, [r5]
   1674c:	bl	110b4 <fputs_unlocked@plt>
   16750:	mov	r2, #5
   16754:	movw	r1, #63872	; 0xf980
   16758:	movt	r1, #1
   1675c:	mov	r0, r4
   16760:	bl	11174 <dcgettext@plt>
   16764:	mov	r1, r0
   16768:	mov	r3, #5
   1676c:	mov	r2, #10
   16770:	mov	r0, #1
   16774:	bl	11300 <__printf_chk@plt>
   16778:	mov	r2, #5
   1677c:	movw	r1, #64428	; 0xfbac
   16780:	movt	r1, #1
   16784:	mov	r0, r4
   16788:	bl	11174 <dcgettext@plt>
   1678c:	ldr	r1, [r5]
   16790:	bl	110b4 <fputs_unlocked@plt>
   16794:	mov	r2, #5
   16798:	movw	r1, #64644	; 0xfc84
   1679c:	movt	r1, #1
   167a0:	mov	r0, r4
   167a4:	bl	11174 <dcgettext@plt>
   167a8:	ldr	r1, [r5]
   167ac:	bl	110b4 <fputs_unlocked@plt>
   167b0:	mov	r2, #5
   167b4:	movw	r1, #64976	; 0xfdd0
   167b8:	movt	r1, #1
   167bc:	mov	r0, r4
   167c0:	bl	11174 <dcgettext@plt>
   167c4:	ldr	r1, [r5]
   167c8:	bl	110b4 <fputs_unlocked@plt>
   167cc:	mov	r2, #5
   167d0:	movw	r1, #65040	; 0xfe10
   167d4:	movt	r1, #1
   167d8:	mov	r0, r4
   167dc:	bl	11174 <dcgettext@plt>
   167e0:	ldr	r1, [r5]
   167e4:	bl	110b4 <fputs_unlocked@plt>
   167e8:	mov	r2, #5
   167ec:	movw	r1, #65088	; 0xfe40
   167f0:	movt	r1, #1
   167f4:	mov	r0, r4
   167f8:	bl	11174 <dcgettext@plt>
   167fc:	ldr	r1, [r5]
   16800:	bl	110b4 <fputs_unlocked@plt>
   16804:	mov	r2, #5
   16808:	movw	r1, #65144	; 0xfe78
   1680c:	movt	r1, #1
   16810:	mov	r0, r4
   16814:	bl	11174 <dcgettext@plt>
   16818:	ldr	r1, [r5]
   1681c:	bl	110b4 <fputs_unlocked@plt>
   16820:	mov	r2, #5
   16824:	movw	r1, #65360	; 0xff50
   16828:	movt	r1, #1
   1682c:	mov	r0, r4
   16830:	bl	11174 <dcgettext@plt>
   16834:	ldr	r1, [r5]
   16838:	bl	110b4 <fputs_unlocked@plt>
   1683c:	movw	r0, #62200	; 0xf2f8
   16840:	movt	r0, #1
   16844:	ldr	ip, [r0, #8]
   16848:	ldrd	r2, [r0, #16]
   1684c:	ldr	r6, [r0, #12]
   16850:	subs	r1, ip, #0
   16854:	str	ip, [sp]
   16858:	ldrd	r8, [r0, #24]
   1685c:	strd	r2, [sp, #8]
   16860:	ldrd	r2, [r0, #32]
   16864:	str	r6, [sp, #4]
   16868:	ldrd	r6, [r0, #40]	; 0x28
   1686c:	strd	r8, [sp, #16]
   16870:	ldrd	r8, [r0, #48]	; 0x30
   16874:	strd	r2, [sp, #24]
   16878:	ldrd	r2, [r0, #56]	; 0x38
   1687c:	strd	r6, [sp, #32]
   16880:	movwne	r7, #63140	; 0xf6a4
   16884:	mov	r6, sp
   16888:	movtne	r7, #1
   1688c:	strd	r8, [sp, #40]	; 0x28
   16890:	strd	r2, [sp, #48]	; 0x30
   16894:	bne	1698c <__assert_fail@plt+0x5578>
   16898:	ldr	r6, [r6, #4]
   1689c:	movw	r1, #264	; 0x108
   168a0:	movt	r1, #2
   168a4:	mov	r2, #5
   168a8:	cmp	r6, #0
   168ac:	beq	169a0 <__assert_fail@plt+0x558c>
   168b0:	mov	r0, #0
   168b4:	bl	11174 <dcgettext@plt>
   168b8:	mov	r1, r0
   168bc:	movw	r3, #288	; 0x120
   168c0:	movt	r3, #2
   168c4:	movw	r2, #328	; 0x148
   168c8:	movt	r2, #2
   168cc:	mov	r0, #1
   168d0:	bl	11300 <__printf_chk@plt>
   168d4:	mov	r1, #0
   168d8:	mov	r0, #5
   168dc:	bl	11378 <setlocale@plt>
   168e0:	cmp	r0, #0
   168e4:	movweq	r7, #63140	; 0xf6a4
   168e8:	movteq	r7, #1
   168ec:	beq	16910 <__assert_fail@plt+0x54fc>
   168f0:	movw	r1, #344	; 0x158
   168f4:	movt	r1, #2
   168f8:	mov	r2, #3
   168fc:	movw	r7, #63140	; 0xf6a4
   16900:	movt	r7, #1
   16904:	bl	113e4 <strncmp@plt>
   16908:	cmp	r0, #0
   1690c:	bne	16a58 <__assert_fail@plt+0x5644>
   16910:	mov	r2, #5
   16914:	movw	r1, #420	; 0x1a4
   16918:	movt	r1, #2
   1691c:	mov	r0, #0
   16920:	bl	11174 <dcgettext@plt>
   16924:	mov	r1, r0
   16928:	movw	r3, #63140	; 0xf6a4
   1692c:	movt	r3, #1
   16930:	movw	r2, #288	; 0x120
   16934:	movt	r2, #2
   16938:	mov	r0, #1
   1693c:	bl	11300 <__printf_chk@plt>
   16940:	mov	r2, #5
   16944:	movw	r1, #448	; 0x1c0
   16948:	movt	r1, #2
   1694c:	mov	r0, #0
   16950:	bl	11174 <dcgettext@plt>
   16954:	movw	r2, #1680	; 0x690
   16958:	movt	r2, #2
   1695c:	cmp	r6, r7
   16960:	movw	r3, #65356	; 0xff4c
   16964:	movt	r3, #1
   16968:	mov	r1, r0
   1696c:	moveq	r3, r2
   16970:	mov	r2, r6
   16974:	mov	r0, #1
   16978:	bl	11300 <__printf_chk@plt>
   1697c:	b	16684 <__assert_fail@plt+0x5270>
   16980:	ldr	r1, [r6, #8]!
   16984:	cmp	r1, #0
   16988:	beq	16898 <__assert_fail@plt+0x5484>
   1698c:	mov	r0, r7
   16990:	bl	110cc <strcmp@plt>
   16994:	cmp	r0, #0
   16998:	bne	16980 <__assert_fail@plt+0x556c>
   1699c:	b	16898 <__assert_fail@plt+0x5484>
   169a0:	mov	r0, r6
   169a4:	bl	11174 <dcgettext@plt>
   169a8:	mov	r1, r0
   169ac:	movw	r3, #288	; 0x120
   169b0:	movt	r3, #2
   169b4:	movw	r2, #328	; 0x148
   169b8:	movt	r2, #2
   169bc:	mov	r0, #1
   169c0:	bl	11300 <__printf_chk@plt>
   169c4:	mov	r1, r6
   169c8:	mov	r0, #5
   169cc:	bl	11378 <setlocale@plt>
   169d0:	cmp	r0, #0
   169d4:	beq	169f0 <__assert_fail@plt+0x55dc>
   169d8:	movw	r1, #344	; 0x158
   169dc:	movt	r1, #2
   169e0:	mov	r2, #3
   169e4:	bl	113e4 <strncmp@plt>
   169e8:	cmp	r0, #0
   169ec:	bne	16a4c <__assert_fail@plt+0x5638>
   169f0:	mov	r2, #5
   169f4:	movw	r1, #420	; 0x1a4
   169f8:	movt	r1, #2
   169fc:	mov	r0, #0
   16a00:	bl	11174 <dcgettext@plt>
   16a04:	mov	r1, r0
   16a08:	movw	r3, #63140	; 0xf6a4
   16a0c:	movt	r3, #1
   16a10:	movw	r2, #288	; 0x120
   16a14:	movt	r2, #2
   16a18:	mov	r0, #1
   16a1c:	bl	11300 <__printf_chk@plt>
   16a20:	movw	r1, #448	; 0x1c0
   16a24:	movt	r1, #2
   16a28:	mov	r2, #5
   16a2c:	mov	r0, #0
   16a30:	bl	11174 <dcgettext@plt>
   16a34:	movw	r6, #63140	; 0xf6a4
   16a38:	movt	r6, #1
   16a3c:	movw	r3, #1680	; 0x690
   16a40:	movt	r3, #2
   16a44:	mov	r1, r0
   16a48:	b	16970 <__assert_fail@plt+0x555c>
   16a4c:	movw	r7, #63140	; 0xf6a4
   16a50:	movt	r7, #1
   16a54:	mov	r6, r7
   16a58:	mov	r2, #5
   16a5c:	movw	r1, #348	; 0x15c
   16a60:	movt	r1, #2
   16a64:	mov	r0, #0
   16a68:	bl	11174 <dcgettext@plt>
   16a6c:	ldr	r1, [r5]
   16a70:	bl	110b4 <fputs_unlocked@plt>
   16a74:	b	16910 <__assert_fail@plt+0x54fc>
   16a78:	mov	r0, #1
   16a7c:	b	16634 <__assert_fail@plt+0x5220>
   16a80:	strd	r4, [sp, #-36]!	; 0xffffffdc
   16a84:	mov	r4, r1
   16a88:	strd	r6, [sp, #8]
   16a8c:	mov	r6, r2
   16a90:	strd	r8, [sp, #16]
   16a94:	mov	r8, r3
   16a98:	strd	sl, [sp, #24]
   16a9c:	mov	sl, r0
   16aa0:	str	lr, [sp, #32]
   16aa4:	sub	sp, sp, #12
   16aa8:	str	r2, [sp]
   16aac:	bl	112a0 <strlen@plt>
   16ab0:	ldr	fp, [r4]
   16ab4:	cmp	fp, #0
   16ab8:	beq	16bc8 <__assert_fail@plt+0x57b4>
   16abc:	cmp	r6, #0
   16ac0:	mov	r7, r0
   16ac4:	beq	16b74 <__assert_fail@plt+0x5760>
   16ac8:	mov	r5, #0
   16acc:	mvn	r9, #0
   16ad0:	str	r5, [sp, #4]
   16ad4:	mov	r2, r7
   16ad8:	mov	r1, sl
   16adc:	mov	r0, fp
   16ae0:	bl	113e4 <strncmp@plt>
   16ae4:	cmp	r0, #0
   16ae8:	mov	r0, fp
   16aec:	bne	16b2c <__assert_fail@plt+0x5718>
   16af0:	bl	112a0 <strlen@plt>
   16af4:	ldr	r3, [sp]
   16af8:	cmp	r0, r7
   16afc:	mov	r2, r8
   16b00:	mov	r1, r6
   16b04:	mla	r0, r8, r9, r3
   16b08:	beq	16b6c <__assert_fail@plt+0x5758>
   16b0c:	cmn	r9, #1
   16b10:	moveq	r9, r5
   16b14:	beq	16b2c <__assert_fail@plt+0x5718>
   16b18:	bl	1115c <memcmp@plt>
   16b1c:	ldr	r3, [sp, #4]
   16b20:	cmp	r0, #0
   16b24:	movne	r3, #1
   16b28:	str	r3, [sp, #4]
   16b2c:	ldr	fp, [r4, #4]!
   16b30:	add	r5, r5, #1
   16b34:	add	r6, r6, r8
   16b38:	cmp	fp, #0
   16b3c:	bne	16ad4 <__assert_fail@plt+0x56c0>
   16b40:	ldr	r3, [sp, #4]
   16b44:	cmp	r3, #0
   16b48:	mvnne	r9, #1
   16b4c:	mov	r0, r9
   16b50:	add	sp, sp, #12
   16b54:	ldrd	r4, [sp]
   16b58:	ldrd	r6, [sp, #8]
   16b5c:	ldrd	r8, [sp, #16]
   16b60:	ldrd	sl, [sp, #24]
   16b64:	add	sp, sp, #32
   16b68:	pop	{pc}		; (ldr pc, [sp], #4)
   16b6c:	mov	r9, r5
   16b70:	b	16b4c <__assert_fail@plt+0x5738>
   16b74:	mov	r5, r6
   16b78:	mvn	r9, #0
   16b7c:	mov	r2, r7
   16b80:	mov	r1, sl
   16b84:	mov	r0, fp
   16b88:	bl	113e4 <strncmp@plt>
   16b8c:	cmp	r0, #0
   16b90:	mov	r0, fp
   16b94:	bne	16bb0 <__assert_fail@plt+0x579c>
   16b98:	bl	112a0 <strlen@plt>
   16b9c:	cmp	r0, r7
   16ba0:	beq	16b6c <__assert_fail@plt+0x5758>
   16ba4:	cmn	r9, #1
   16ba8:	moveq	r9, r5
   16bac:	movne	r6, #1
   16bb0:	ldr	fp, [r4, #4]!
   16bb4:	add	r5, r5, #1
   16bb8:	cmp	fp, #0
   16bbc:	bne	16b7c <__assert_fail@plt+0x5768>
   16bc0:	str	r6, [sp, #4]
   16bc4:	b	16b40 <__assert_fail@plt+0x572c>
   16bc8:	mvn	r9, #0
   16bcc:	b	16b4c <__assert_fail@plt+0x5738>
   16bd0:	strd	r4, [sp, #-16]!
   16bd4:	str	r6, [sp, #8]
   16bd8:	mov	r6, r0
   16bdc:	ldr	r0, [r1]
   16be0:	str	lr, [sp, #12]
   16be4:	cmp	r0, #0
   16be8:	beq	16c2c <__assert_fail@plt+0x5818>
   16bec:	mov	r4, r1
   16bf0:	mov	r5, #0
   16bf4:	b	16c08 <__assert_fail@plt+0x57f4>
   16bf8:	ldr	r0, [r4, #4]!
   16bfc:	add	r5, r5, #1
   16c00:	cmp	r0, #0
   16c04:	beq	16c2c <__assert_fail@plt+0x5818>
   16c08:	mov	r1, r6
   16c0c:	bl	110cc <strcmp@plt>
   16c10:	cmp	r0, #0
   16c14:	bne	16bf8 <__assert_fail@plt+0x57e4>
   16c18:	mov	r0, r5
   16c1c:	ldrd	r4, [sp]
   16c20:	ldr	r6, [sp, #8]
   16c24:	add	sp, sp, #12
   16c28:	pop	{pc}		; (ldr pc, [sp], #4)
   16c2c:	ldrd	r4, [sp]
   16c30:	mvn	r0, #0
   16c34:	ldr	r6, [sp, #8]
   16c38:	add	sp, sp, #12
   16c3c:	pop	{pc}		; (ldr pc, [sp], #4)
   16c40:	cmn	r2, #1
   16c44:	strd	r4, [sp, #-16]!
   16c48:	mov	r5, r1
   16c4c:	movweq	r1, #1976	; 0x7b8
   16c50:	movwne	r1, #2004	; 0x7d4
   16c54:	str	r6, [sp, #8]
   16c58:	movteq	r1, #2
   16c5c:	movtne	r1, #2
   16c60:	str	lr, [sp, #12]
   16c64:	mov	r6, r0
   16c68:	sub	sp, sp, #8
   16c6c:	mov	r2, #5
   16c70:	mov	r0, #0
   16c74:	bl	11174 <dcgettext@plt>
   16c78:	mov	r4, r0
   16c7c:	mov	r2, r5
   16c80:	mov	r1, #8
   16c84:	mov	r0, #0
   16c88:	bl	1b424 <__assert_fail@plt+0xa010>
   16c8c:	mov	r5, r0
   16c90:	mov	r1, r6
   16c94:	mov	r0, #1
   16c98:	bl	1c81c <__assert_fail@plt+0xb408>
   16c9c:	mov	r1, #0
   16ca0:	mov	r3, r5
   16ca4:	str	r0, [sp]
   16ca8:	mov	r2, r4
   16cac:	mov	r0, r1
   16cb0:	bl	1121c <error@plt>
   16cb4:	add	sp, sp, #8
   16cb8:	ldrd	r4, [sp]
   16cbc:	ldr	r6, [sp, #8]
   16cc0:	add	sp, sp, #12
   16cc4:	pop	{pc}		; (ldr pc, [sp], #4)
   16cc8:	strd	r4, [sp, #-36]!	; 0xffffffdc
   16ccc:	mov	r4, r1
   16cd0:	movw	r1, #2036	; 0x7f4
   16cd4:	movt	r1, #2
   16cd8:	strd	r6, [sp, #8]
   16cdc:	mov	r6, r0
   16ce0:	mov	r7, r2
   16ce4:	mov	r0, #0
   16ce8:	strd	r8, [sp, #16]
   16cec:	mov	r2, #5
   16cf0:	strd	sl, [sp, #24]
   16cf4:	movw	sl, #4544	; 0x11c0
   16cf8:	movt	sl, #3
   16cfc:	str	lr, [sp, #32]
   16d00:	sub	sp, sp, #12
   16d04:	bl	11174 <dcgettext@plt>
   16d08:	ldr	r1, [sl]
   16d0c:	bl	110b4 <fputs_unlocked@plt>
   16d10:	ldr	fp, [r6]
   16d14:	cmp	fp, #0
   16d18:	beq	16db8 <__assert_fail@plt+0x59a4>
   16d1c:	movw	r3, #2060	; 0x80c
   16d20:	movt	r3, #2
   16d24:	mov	r9, #0
   16d28:	str	r3, [sp]
   16d2c:	movw	r3, #2068	; 0x814
   16d30:	movt	r3, #2
   16d34:	mov	r5, r9
   16d38:	str	r3, [sp, #4]
   16d3c:	b	16d74 <__assert_fail@plt+0x5960>
   16d40:	mov	r0, fp
   16d44:	mov	r9, r4
   16d48:	bl	1c82c <__assert_fail@plt+0xb418>
   16d4c:	mov	r3, r0
   16d50:	mov	r1, #1
   16d54:	ldr	r2, [sp]
   16d58:	mov	r0, r8
   16d5c:	bl	11324 <__fprintf_chk@plt>
   16d60:	ldr	fp, [r6, #4]!
   16d64:	add	r5, r5, #1
   16d68:	add	r4, r4, r7
   16d6c:	cmp	fp, #0
   16d70:	beq	16db8 <__assert_fail@plt+0x59a4>
   16d74:	cmp	r5, #0
   16d78:	mov	r1, r4
   16d7c:	ldr	r8, [sl]
   16d80:	mov	r2, r7
   16d84:	mov	r0, r9
   16d88:	beq	16d40 <__assert_fail@plt+0x592c>
   16d8c:	bl	1115c <memcmp@plt>
   16d90:	cmp	r0, #0
   16d94:	bne	16d40 <__assert_fail@plt+0x592c>
   16d98:	mov	r0, fp
   16d9c:	bl	1c82c <__assert_fail@plt+0xb418>
   16da0:	mov	r3, r0
   16da4:	mov	r1, #1
   16da8:	ldr	r2, [sp, #4]
   16dac:	mov	r0, r8
   16db0:	bl	11324 <__fprintf_chk@plt>
   16db4:	b	16d60 <__assert_fail@plt+0x594c>
   16db8:	ldr	r0, [sl]
   16dbc:	ldr	r3, [r0, #20]
   16dc0:	ldr	r2, [r0, #24]
   16dc4:	cmp	r3, r2
   16dc8:	bcs	16df8 <__assert_fail@plt+0x59e4>
   16dcc:	add	r1, r3, #1
   16dd0:	mov	r2, #10
   16dd4:	str	r1, [r0, #20]
   16dd8:	strb	r2, [r3]
   16ddc:	add	sp, sp, #12
   16de0:	ldrd	r4, [sp]
   16de4:	ldrd	r6, [sp, #8]
   16de8:	ldrd	r8, [sp, #16]
   16dec:	ldrd	sl, [sp, #24]
   16df0:	add	sp, sp, #32
   16df4:	pop	{pc}		; (ldr pc, [sp], #4)
   16df8:	mov	r1, #10
   16dfc:	add	sp, sp, #12
   16e00:	ldrd	r4, [sp]
   16e04:	ldrd	r6, [sp, #8]
   16e08:	ldrd	r8, [sp, #16]
   16e0c:	ldrd	sl, [sp, #24]
   16e10:	ldr	lr, [sp, #32]
   16e14:	add	sp, sp, #36	; 0x24
   16e18:	b	1136c <__overflow@plt>
   16e1c:	strd	r4, [sp, #-28]!	; 0xffffffe4
   16e20:	mov	r5, r1
   16e24:	strd	r6, [sp, #8]
   16e28:	mov	r6, r2
   16e2c:	mov	r7, r3
   16e30:	strd	r8, [sp, #16]
   16e34:	mov	r8, r0
   16e38:	str	lr, [sp, #24]
   16e3c:	sub	sp, sp, #12
   16e40:	ldrb	r4, [sp, #48]	; 0x30
   16e44:	cmp	r4, #0
   16e48:	bne	16ef4 <__assert_fail@plt+0x5ae0>
   16e4c:	ldr	r0, [r2]
   16e50:	cmp	r0, #0
   16e54:	movne	r9, r2
   16e58:	bne	16edc <__assert_fail@plt+0x5ac8>
   16e5c:	movw	r1, #1976	; 0x7b8
   16e60:	movt	r1, #2
   16e64:	mov	r2, #5
   16e68:	mov	r0, #0
   16e6c:	bl	11174 <dcgettext@plt>
   16e70:	mov	r9, r0
   16e74:	mov	r2, r5
   16e78:	mov	r1, #8
   16e7c:	mov	r0, #0
   16e80:	bl	1b424 <__assert_fail@plt+0xa010>
   16e84:	mov	r4, r0
   16e88:	mov	r1, r8
   16e8c:	mov	r0, #1
   16e90:	bl	1c81c <__assert_fail@plt+0xb408>
   16e94:	mov	r1, #0
   16e98:	mov	r3, r4
   16e9c:	str	r0, [sp]
   16ea0:	mov	r2, r9
   16ea4:	mov	r0, r1
   16ea8:	bl	1121c <error@plt>
   16eac:	mov	r0, r6
   16eb0:	mov	r1, r7
   16eb4:	ldr	r2, [sp, #40]	; 0x28
   16eb8:	bl	16cc8 <__assert_fail@plt+0x58b4>
   16ebc:	ldr	r3, [sp, #44]	; 0x2c
   16ec0:	blx	r3
   16ec4:	mvn	r0, #0
   16ec8:	b	16f10 <__assert_fail@plt+0x5afc>
   16ecc:	ldr	r0, [r9, #4]!
   16ed0:	add	r4, r4, #1
   16ed4:	cmp	r0, #0
   16ed8:	beq	16e5c <__assert_fail@plt+0x5a48>
   16edc:	mov	r1, r5
   16ee0:	bl	110cc <strcmp@plt>
   16ee4:	cmp	r0, #0
   16ee8:	bne	16ecc <__assert_fail@plt+0x5ab8>
   16eec:	mov	r0, r4
   16ef0:	b	16f10 <__assert_fail@plt+0x5afc>
   16ef4:	mov	r2, r3
   16ef8:	mov	r1, r6
   16efc:	ldr	r3, [sp, #40]	; 0x28
   16f00:	mov	r0, r5
   16f04:	bl	16a80 <__assert_fail@plt+0x566c>
   16f08:	cmp	r0, #0
   16f0c:	blt	16f28 <__assert_fail@plt+0x5b14>
   16f10:	add	sp, sp, #12
   16f14:	ldrd	r4, [sp]
   16f18:	ldrd	r6, [sp, #8]
   16f1c:	ldrd	r8, [sp, #16]
   16f20:	add	sp, sp, #24
   16f24:	pop	{pc}		; (ldr pc, [sp], #4)
   16f28:	cmn	r0, #1
   16f2c:	beq	16e5c <__assert_fail@plt+0x5a48>
   16f30:	movw	r1, #2004	; 0x7d4
   16f34:	movt	r1, #2
   16f38:	mov	r2, #5
   16f3c:	mov	r0, #0
   16f40:	bl	11174 <dcgettext@plt>
   16f44:	mov	r9, r0
   16f48:	b	16e74 <__assert_fail@plt+0x5a60>
   16f4c:	strd	r4, [sp, #-24]!	; 0xffffffe8
   16f50:	strd	r6, [sp, #8]
   16f54:	ldr	r7, [r1]
   16f58:	str	r8, [sp, #16]
   16f5c:	str	lr, [sp, #20]
   16f60:	cmp	r7, #0
   16f64:	beq	16fa4 <__assert_fail@plt+0x5b90>
   16f68:	mov	r6, r3
   16f6c:	mov	r8, r0
   16f70:	mov	r4, r2
   16f74:	mov	r5, r1
   16f78:	b	16f88 <__assert_fail@plt+0x5b74>
   16f7c:	ldr	r7, [r5, #4]!
   16f80:	cmp	r7, #0
   16f84:	beq	16fa4 <__assert_fail@plt+0x5b90>
   16f88:	mov	r1, r4
   16f8c:	mov	r2, r6
   16f90:	mov	r0, r8
   16f94:	add	r4, r4, r6
   16f98:	bl	1115c <memcmp@plt>
   16f9c:	cmp	r0, #0
   16fa0:	bne	16f7c <__assert_fail@plt+0x5b68>
   16fa4:	mov	r0, r7
   16fa8:	ldrd	r4, [sp]
   16fac:	ldrd	r6, [sp, #8]
   16fb0:	ldr	r8, [sp, #16]
   16fb4:	add	sp, sp, #20
   16fb8:	pop	{pc}		; (ldr pc, [sp], #4)
   16fbc:	ldrb	r3, [r0]
   16fc0:	cmp	r3, #47	; 0x2f
   16fc4:	bne	16fd4 <__assert_fail@plt+0x5bc0>
   16fc8:	ldrb	r3, [r0, #1]!
   16fcc:	cmp	r3, #47	; 0x2f
   16fd0:	beq	16fc8 <__assert_fail@plt+0x5bb4>
   16fd4:	cmp	r3, #0
   16fd8:	beq	17008 <__assert_fail@plt+0x5bf4>
   16fdc:	mov	r2, r0
   16fe0:	mov	r1, #0
   16fe4:	cmp	r3, #47	; 0x2f
   16fe8:	moveq	r1, #1
   16fec:	beq	16ffc <__assert_fail@plt+0x5be8>
   16ff0:	cmp	r1, #0
   16ff4:	movne	r0, r2
   16ff8:	movne	r1, #0
   16ffc:	ldrb	r3, [r2, #1]!
   17000:	cmp	r3, #0
   17004:	bne	16fe4 <__assert_fail@plt+0x5bd0>
   17008:	bx	lr
   1700c:	str	r4, [sp, #-8]!
   17010:	mov	r4, r0
   17014:	str	lr, [sp, #4]
   17018:	bl	112a0 <strlen@plt>
   1701c:	cmp	r0, #1
   17020:	bls	17034 <__assert_fail@plt+0x5c20>
   17024:	sub	r2, r0, #1
   17028:	ldrb	r1, [r4, r2]
   1702c:	cmp	r1, #47	; 0x2f
   17030:	beq	17040 <__assert_fail@plt+0x5c2c>
   17034:	ldr	r4, [sp]
   17038:	add	sp, sp, #4
   1703c:	pop	{pc}		; (ldr pc, [sp], #4)
   17040:	cmp	r2, #1
   17044:	beq	17058 <__assert_fail@plt+0x5c44>
   17048:	add	r1, r4, r0
   1704c:	ldrb	r1, [r1, #-2]
   17050:	cmp	r1, #47	; 0x2f
   17054:	beq	17068 <__assert_fail@plt+0x5c54>
   17058:	ldr	r4, [sp]
   1705c:	add	sp, sp, #4
   17060:	mov	r0, r2
   17064:	pop	{pc}		; (ldr pc, [sp], #4)
   17068:	sub	r3, r0, #3
   1706c:	rsb	r0, r4, #1
   17070:	add	r3, r4, r3
   17074:	cmp	r3, r4
   17078:	add	r2, r0, r3
   1707c:	beq	17058 <__assert_fail@plt+0x5c44>
   17080:	ldrb	r1, [r3], #-1
   17084:	cmp	r1, #47	; 0x2f
   17088:	bne	17058 <__assert_fail@plt+0x5c44>
   1708c:	b	17074 <__assert_fail@plt+0x5c60>
   17090:	strd	r4, [sp, #-16]!
   17094:	mov	r4, r1
   17098:	mov	r5, r0
   1709c:	str	r6, [sp, #8]
   170a0:	str	lr, [sp, #12]
   170a4:	vpush	{d8}
   170a8:	sub	sp, sp, #8
   170ac:	mov	r1, sp
   170b0:	bl	1130c <strtod@plt>
   170b4:	ldr	r3, [sp]
   170b8:	vmov.f64	d8, d0
   170bc:	ldrb	r3, [r3]
   170c0:	cmp	r3, #0
   170c4:	bne	170f0 <__assert_fail@plt+0x5cdc>
   170c8:	cmp	r4, #0
   170cc:	vmov.f64	d0, d8
   170d0:	ldrne	r3, [sp]
   170d4:	strne	r3, [r4]
   170d8:	add	sp, sp, #8
   170dc:	vpop	{d8}
   170e0:	ldrd	r4, [sp]
   170e4:	ldr	r6, [sp, #8]
   170e8:	add	sp, sp, #12
   170ec:	pop	{pc}		; (ldr pc, [sp], #4)
   170f0:	bl	112dc <__errno_location@plt>
   170f4:	mov	r6, r0
   170f8:	add	r1, sp, #4
   170fc:	mov	r0, r5
   17100:	ldr	r5, [r6]
   17104:	bl	1ea40 <__assert_fail@plt+0xd62c>
   17108:	ldrd	r2, [sp]
   1710c:	cmp	r2, r3
   17110:	vmovcc.f64	d8, d0
   17114:	strcc	r3, [sp]
   17118:	strcs	r5, [r6]
   1711c:	b	170c8 <__assert_fail@plt+0x5cb4>
   17120:	movw	r3, #4576	; 0x11e0
   17124:	movt	r3, #3
   17128:	str	r0, [r3]
   1712c:	bx	lr
   17130:	movw	r3, #4576	; 0x11e0
   17134:	movt	r3, #3
   17138:	strb	r0, [r3, #4]
   1713c:	bx	lr
   17140:	movw	r3, #4548	; 0x11c4
   17144:	movt	r3, #3
   17148:	strd	r4, [sp, #-16]!
   1714c:	ldr	r0, [r3]
   17150:	str	r6, [sp, #8]
   17154:	str	lr, [sp, #12]
   17158:	sub	sp, sp, #8
   1715c:	bl	1ead0 <__assert_fail@plt+0xd6bc>
   17160:	cmp	r0, #0
   17164:	beq	17190 <__assert_fail@plt+0x5d7c>
   17168:	movw	r4, #4576	; 0x11e0
   1716c:	movt	r4, #3
   17170:	ldrb	r6, [r4, #4]
   17174:	bl	112dc <__errno_location@plt>
   17178:	mov	r5, r0
   1717c:	cmp	r6, #0
   17180:	beq	171bc <__assert_fail@plt+0x5da8>
   17184:	ldr	r3, [r0]
   17188:	cmp	r3, #32
   1718c:	bne	171bc <__assert_fail@plt+0x5da8>
   17190:	movw	r3, #4544	; 0x11c0
   17194:	movt	r3, #3
   17198:	ldr	r0, [r3]
   1719c:	bl	1ead0 <__assert_fail@plt+0xd6bc>
   171a0:	cmp	r0, #0
   171a4:	bne	17204 <__assert_fail@plt+0x5df0>
   171a8:	add	sp, sp, #8
   171ac:	ldrd	r4, [sp]
   171b0:	ldr	r6, [sp, #8]
   171b4:	add	sp, sp, #12
   171b8:	pop	{pc}		; (ldr pc, [sp], #4)
   171bc:	movw	r1, #62760	; 0xf528
   171c0:	movt	r1, #1
   171c4:	mov	r2, #5
   171c8:	mov	r0, #0
   171cc:	bl	11174 <dcgettext@plt>
   171d0:	mov	r6, r0
   171d4:	ldr	r0, [r4]
   171d8:	cmp	r0, #0
   171dc:	beq	17214 <__assert_fail@plt+0x5e00>
   171e0:	ldr	r4, [r5]
   171e4:	bl	1bcb0 <__assert_fail@plt+0xa89c>
   171e8:	mov	r3, r0
   171ec:	movw	r2, #552	; 0x228
   171f0:	movt	r2, #2
   171f4:	mov	r0, #0
   171f8:	str	r6, [sp]
   171fc:	mov	r1, r4
   17200:	bl	1121c <error@plt>
   17204:	movw	r3, #4456	; 0x1168
   17208:	movt	r3, #3
   1720c:	ldr	r0, [r3]
   17210:	bl	11120 <_exit@plt>
   17214:	mov	r3, r6
   17218:	movw	r2, #556	; 0x22c
   1721c:	movt	r2, #2
   17220:	ldr	r1, [r5]
   17224:	bl	1121c <error@plt>
   17228:	b	17204 <__assert_fail@plt+0x5df0>
   1722c:	strd	r4, [sp, #-16]!
   17230:	mov	r4, r0
   17234:	str	r6, [sp, #8]
   17238:	str	lr, [sp, #12]
   1723c:	ldrb	ip, [r0]
   17240:	sub	r5, ip, #47	; 0x2f
   17244:	clz	r5, r5
   17248:	bl	16fbc <__assert_fail@plt+0x5ba8>
   1724c:	lsr	r5, r5, #5
   17250:	sub	r0, r0, r4
   17254:	cmp	r0, r5
   17258:	bls	172b4 <__assert_fail@plt+0x5ea0>
   1725c:	sub	r3, r0, #1
   17260:	ldrb	r2, [r4, r3]
   17264:	cmp	r2, #47	; 0x2f
   17268:	bne	172b4 <__assert_fail@plt+0x5ea0>
   1726c:	cmp	r3, r5
   17270:	bls	172c4 <__assert_fail@plt+0x5eb0>
   17274:	add	r2, r4, r0
   17278:	ldrb	r2, [r2, #-2]
   1727c:	cmp	r2, #47	; 0x2f
   17280:	bne	172c4 <__assert_fail@plt+0x5eb0>
   17284:	sub	r0, r0, #3
   17288:	sub	ip, r4, #1
   1728c:	add	r3, r4, r0
   17290:	add	ip, ip, r5
   17294:	rsb	r2, r4, #1
   17298:	b	172a8 <__assert_fail@plt+0x5e94>
   1729c:	ldrb	r1, [r3], #-1
   172a0:	cmp	r1, #47	; 0x2f
   172a4:	bne	172b4 <__assert_fail@plt+0x5ea0>
   172a8:	cmp	r3, ip
   172ac:	add	r0, r2, r3
   172b0:	bne	1729c <__assert_fail@plt+0x5e88>
   172b4:	ldrd	r4, [sp]
   172b8:	ldr	r6, [sp, #8]
   172bc:	add	sp, sp, #12
   172c0:	pop	{pc}		; (ldr pc, [sp], #4)
   172c4:	mov	r0, r3
   172c8:	b	172b4 <__assert_fail@plt+0x5ea0>
   172cc:	strd	r4, [sp, #-16]!
   172d0:	mov	r5, r0
   172d4:	str	r6, [sp, #8]
   172d8:	str	lr, [sp, #12]
   172dc:	ldrb	r6, [r0]
   172e0:	bl	16fbc <__assert_fail@plt+0x5ba8>
   172e4:	sub	r4, r0, r5
   172e8:	sub	r6, r6, #47	; 0x2f
   172ec:	clz	r6, r6
   172f0:	lsr	r6, r6, #5
   172f4:	cmp	r6, r4
   172f8:	bcs	17354 <__assert_fail@plt+0x5f40>
   172fc:	sub	r3, r4, #1
   17300:	ldrb	r2, [r5, r3]
   17304:	cmp	r2, #47	; 0x2f
   17308:	bne	173ac <__assert_fail@plt+0x5f98>
   1730c:	cmp	r6, r3
   17310:	bcs	173dc <__assert_fail@plt+0x5fc8>
   17314:	add	r2, r5, r4
   17318:	ldrb	r2, [r2, #-2]
   1731c:	cmp	r2, #47	; 0x2f
   17320:	bne	173a8 <__assert_fail@plt+0x5f94>
   17324:	sub	r4, r4, #3
   17328:	sub	r2, r5, #1
   1732c:	add	r3, r5, r4
   17330:	add	r6, r2, r6
   17334:	rsb	r1, r5, #1
   17338:	b	17348 <__assert_fail@plt+0x5f34>
   1733c:	ldrb	r2, [r3], #-1
   17340:	cmp	r2, #47	; 0x2f
   17344:	bne	173ac <__assert_fail@plt+0x5f98>
   17348:	cmp	r3, r6
   1734c:	add	r4, r1, r3
   17350:	bne	1733c <__assert_fail@plt+0x5f28>
   17354:	add	r0, r4, #1
   17358:	cmp	r4, #0
   1735c:	addeq	r0, r0, #1
   17360:	bl	1e9ac <__assert_fail@plt+0xd598>
   17364:	subs	r6, r0, #0
   17368:	beq	173d4 <__assert_fail@plt+0x5fc0>
   1736c:	mov	r1, r5
   17370:	mov	r2, r4
   17374:	bl	1112c <memcpy@plt>
   17378:	cmp	r4, #0
   1737c:	bne	1738c <__assert_fail@plt+0x5f78>
   17380:	mov	r3, #46	; 0x2e
   17384:	mov	r4, #1
   17388:	strb	r3, [r6]
   1738c:	mov	r3, #0
   17390:	strb	r3, [r6, r4]
   17394:	mov	r0, r6
   17398:	ldrd	r4, [sp]
   1739c:	ldr	r6, [sp, #8]
   173a0:	add	sp, sp, #12
   173a4:	pop	{pc}		; (ldr pc, [sp], #4)
   173a8:	mov	r4, r3
   173ac:	add	r0, r4, #1
   173b0:	cmp	r4, #0
   173b4:	addeq	r0, r0, #1
   173b8:	bl	1e9ac <__assert_fail@plt+0xd598>
   173bc:	subs	r6, r0, #0
   173c0:	beq	173d4 <__assert_fail@plt+0x5fc0>
   173c4:	mov	r1, r5
   173c8:	mov	r2, r4
   173cc:	bl	1112c <memcpy@plt>
   173d0:	b	1738c <__assert_fail@plt+0x5f78>
   173d4:	mov	r6, #0
   173d8:	b	17394 <__assert_fail@plt+0x5f80>
   173dc:	mov	r4, r3
   173e0:	b	17354 <__assert_fail@plt+0x5f40>
   173e4:	push	{r1, r2, r3}
   173e8:	strd	r4, [sp, #-20]!	; 0xffffffec
   173ec:	strd	r6, [sp, #8]
   173f0:	str	lr, [sp, #16]
   173f4:	sub	sp, sp, #8
   173f8:	ldr	r1, [sp, #28]
   173fc:	add	r2, sp, #32
   17400:	str	r2, [sp, #4]
   17404:	cmp	r1, #0
   17408:	beq	174e4 <__assert_fail@plt+0x60d0>
   1740c:	movw	r3, #1030	; 0x406
   17410:	mov	r6, r0
   17414:	cmp	r1, r3
   17418:	beq	174f4 <__assert_fail@plt+0x60e0>
   1741c:	cmp	r1, #11
   17420:	beq	1749c <__assert_fail@plt+0x6088>
   17424:	ble	1747c <__assert_fail@plt+0x6068>
   17428:	movw	r2, #1031	; 0x407
   1742c:	cmp	r1, r2
   17430:	bgt	174b8 <__assert_fail@plt+0x60a4>
   17434:	cmp	r1, r3
   17438:	bge	17448 <__assert_fail@plt+0x6034>
   1743c:	movw	r3, #1025	; 0x401
   17440:	cmp	r1, r3
   17444:	beq	1749c <__assert_fail@plt+0x6088>
   17448:	ldr	r3, [sp, #4]
   1744c:	mov	r0, r6
   17450:	ldr	r2, [r3]
   17454:	bl	11360 <fcntl64@plt>
   17458:	mov	r4, r0
   1745c:	mov	r0, r4
   17460:	add	sp, sp, #8
   17464:	ldrd	r4, [sp]
   17468:	ldrd	r6, [sp, #8]
   1746c:	ldr	lr, [sp, #16]
   17470:	add	sp, sp, #20
   17474:	add	sp, sp, #12
   17478:	bx	lr
   1747c:	cmp	r1, #4
   17480:	beq	17448 <__assert_fail@plt+0x6034>
   17484:	bgt	174ac <__assert_fail@plt+0x6098>
   17488:	cmp	r1, #2
   1748c:	beq	17448 <__assert_fail@plt+0x6034>
   17490:	bgt	1749c <__assert_fail@plt+0x6088>
   17494:	cmp	r1, #1
   17498:	bne	17448 <__assert_fail@plt+0x6034>
   1749c:	mov	r0, r6
   174a0:	bl	11360 <fcntl64@plt>
   174a4:	mov	r4, r0
   174a8:	b	1745c <__assert_fail@plt+0x6048>
   174ac:	cmp	r1, #9
   174b0:	bne	17448 <__assert_fail@plt+0x6034>
   174b4:	b	1749c <__assert_fail@plt+0x6088>
   174b8:	movw	r3, #1033	; 0x409
   174bc:	cmp	r1, r3
   174c0:	beq	17448 <__assert_fail@plt+0x6034>
   174c4:	blt	1749c <__assert_fail@plt+0x6088>
   174c8:	movw	r3, #1034	; 0x40a
   174cc:	cmp	r1, r3
   174d0:	bne	17448 <__assert_fail@plt+0x6034>
   174d4:	mov	r0, r6
   174d8:	bl	11360 <fcntl64@plt>
   174dc:	mov	r4, r0
   174e0:	b	1745c <__assert_fail@plt+0x6048>
   174e4:	ldr	r2, [sp, #32]
   174e8:	bl	11360 <fcntl64@plt>
   174ec:	mov	r4, r0
   174f0:	b	1745c <__assert_fail@plt+0x6048>
   174f4:	movw	r5, #4584	; 0x11e8
   174f8:	movt	r5, #3
   174fc:	ldr	r7, [r2]
   17500:	add	r2, sp, #36	; 0x24
   17504:	ldr	r3, [r5]
   17508:	str	r2, [sp, #4]
   1750c:	mov	r2, r7
   17510:	cmp	r3, #0
   17514:	blt	17530 <__assert_fail@plt+0x611c>
   17518:	bl	11360 <fcntl64@plt>
   1751c:	subs	r4, r0, #0
   17520:	blt	17598 <__assert_fail@plt+0x6184>
   17524:	mov	r3, #1
   17528:	str	r3, [r5]
   1752c:	b	1745c <__assert_fail@plt+0x6048>
   17530:	mov	r1, #0
   17534:	bl	11360 <fcntl64@plt>
   17538:	subs	r4, r0, #0
   1753c:	blt	1745c <__assert_fail@plt+0x6048>
   17540:	ldr	r3, [r5]
   17544:	cmn	r3, #1
   17548:	bne	1745c <__assert_fail@plt+0x6048>
   1754c:	mov	r1, #1
   17550:	mov	r0, r4
   17554:	bl	11360 <fcntl64@plt>
   17558:	subs	r2, r0, #0
   1755c:	blt	17578 <__assert_fail@plt+0x6164>
   17560:	orr	r2, r2, #1
   17564:	mov	r1, #2
   17568:	mov	r0, r4
   1756c:	bl	11360 <fcntl64@plt>
   17570:	cmn	r0, #1
   17574:	bne	1745c <__assert_fail@plt+0x6048>
   17578:	bl	112dc <__errno_location@plt>
   1757c:	mov	r5, r0
   17580:	mov	r0, r4
   17584:	ldr	r6, [r5]
   17588:	mvn	r4, #0
   1758c:	bl	113fc <close@plt>
   17590:	str	r6, [r5]
   17594:	b	1745c <__assert_fail@plt+0x6048>
   17598:	bl	112dc <__errno_location@plt>
   1759c:	ldr	r3, [r0]
   175a0:	cmp	r3, #22
   175a4:	bne	17524 <__assert_fail@plt+0x6110>
   175a8:	mov	r2, r7
   175ac:	mov	r0, r6
   175b0:	mov	r1, #0
   175b4:	bl	11360 <fcntl64@plt>
   175b8:	subs	r4, r0, #0
   175bc:	mvnge	r3, #0
   175c0:	strge	r3, [r5]
   175c4:	bge	1754c <__assert_fail@plt+0x6138>
   175c8:	b	1745c <__assert_fail@plt+0x6048>
   175cc:	push	{r1, r2, r3}
   175d0:	push	{lr}		; (str lr, [sp, #-4]!)
   175d4:	sub	sp, sp, #8
   175d8:	ldr	r1, [sp, #12]
   175dc:	ands	r2, r1, #64	; 0x40
   175e0:	bne	175fc <__assert_fail@plt+0x61e8>
   175e4:	bl	11228 <open64@plt>
   175e8:	bl	1ca44 <__assert_fail@plt+0xb630>
   175ec:	add	sp, sp, #8
   175f0:	pop	{lr}		; (ldr lr, [sp], #4)
   175f4:	add	sp, sp, #12
   175f8:	bx	lr
   175fc:	add	r3, sp, #16
   17600:	ldr	r2, [sp, #16]
   17604:	str	r3, [sp, #4]
   17608:	b	175e4 <__assert_fail@plt+0x61d0>
   1760c:	strd	r4, [sp, #-12]!
   17610:	mov	r5, r0
   17614:	str	lr, [sp, #8]
   17618:	sub	sp, sp, #12
   1761c:	bl	112dc <__errno_location@plt>
   17620:	mov	r4, r0
   17624:	mov	r2, #0
   17628:	ldr	r3, [r4]
   1762c:	mov	r0, r5
   17630:	str	r2, [r4]
   17634:	str	r3, [sp]
   17638:	str	r3, [sp, #4]
   1763c:	bl	11108 <free@plt>
   17640:	ldr	r3, [r4]
   17644:	add	r2, sp, #8
   17648:	clz	r3, r3
   1764c:	lsr	r3, r3, #5
   17650:	add	r3, r2, r3, lsl #2
   17654:	ldr	r3, [r3, #-8]
   17658:	str	r3, [r4]
   1765c:	add	sp, sp, #12
   17660:	ldrd	r4, [sp]
   17664:	add	sp, sp, #8
   17668:	pop	{pc}		; (ldr pc, [sp], #4)
   1766c:	andeq	r0, r0, r0
   17670:	ror	r0, r0, #3
   17674:	udiv	r3, r0, r1
   17678:	mls	r0, r3, r1, r0
   1767c:	bx	lr
   17680:	sub	r0, r1, r0
   17684:	clz	r0, r0
   17688:	lsr	r0, r0, #5
   1768c:	bx	lr
   17690:	strd	r4, [sp, #-36]!	; 0xffffffdc
   17694:	mov	r5, r1
   17698:	strd	r6, [sp, #8]
   1769c:	mov	r6, r0
   176a0:	mov	r7, r3
   176a4:	mov	r0, r1
   176a8:	strd	r8, [sp, #16]
   176ac:	strd	sl, [sp, #24]
   176b0:	mov	fp, r2
   176b4:	str	lr, [sp, #32]
   176b8:	sub	sp, sp, #4
   176bc:	ldr	r1, [r6, #8]
   176c0:	ldr	r3, [r6, #24]
   176c4:	blx	r3
   176c8:	ldr	r3, [r6, #8]
   176cc:	cmp	r0, r3
   176d0:	bcs	177ec <__assert_fail@plt+0x63d8>
   176d4:	ldr	r8, [r6]
   176d8:	lsl	r9, r0, #3
   176dc:	mov	sl, r0
   176e0:	add	r4, r8, r9
   176e4:	str	r4, [fp]
   176e8:	ldr	r1, [r8, r0, lsl #3]
   176ec:	cmp	r1, #0
   176f0:	beq	177e4 <__assert_fail@plt+0x63d0>
   176f4:	cmp	r1, r5
   176f8:	beq	177ac <__assert_fail@plt+0x6398>
   176fc:	mov	r0, r5
   17700:	ldr	r3, [r6, #28]
   17704:	blx	r3
   17708:	cmp	r0, #0
   1770c:	bne	177a8 <__assert_fail@plt+0x6394>
   17710:	ldr	r3, [r4, #4]
   17714:	cmp	r3, #0
   17718:	beq	177e4 <__assert_fail@plt+0x63d0>
   1771c:	ldr	r1, [r3]
   17720:	cmp	r5, r1
   17724:	bne	17748 <__assert_fail@plt+0x6334>
   17728:	b	17764 <__assert_fail@plt+0x6350>
   1772c:	ldr	r4, [r4, #4]
   17730:	ldr	r3, [r4, #4]
   17734:	cmp	r3, #0
   17738:	beq	177e4 <__assert_fail@plt+0x63d0>
   1773c:	ldr	r1, [r3]
   17740:	cmp	r1, r5
   17744:	beq	17764 <__assert_fail@plt+0x6350>
   17748:	mov	r0, r5
   1774c:	ldr	r3, [r6, #28]
   17750:	blx	r3
   17754:	cmp	r0, #0
   17758:	beq	1772c <__assert_fail@plt+0x6318>
   1775c:	ldr	r3, [r4, #4]
   17760:	ldr	r1, [r3]
   17764:	cmp	r7, #0
   17768:	beq	17788 <__assert_fail@plt+0x6374>
   1776c:	ldr	r0, [r3, #4]
   17770:	mov	r2, #0
   17774:	str	r0, [r4, #4]
   17778:	str	r2, [r3]
   1777c:	ldr	r2, [r6, #36]	; 0x24
   17780:	str	r2, [r3, #4]
   17784:	str	r3, [r6, #36]	; 0x24
   17788:	mov	r0, r1
   1778c:	add	sp, sp, #4
   17790:	ldrd	r4, [sp]
   17794:	ldrd	r6, [sp, #8]
   17798:	ldrd	r8, [sp, #16]
   1779c:	ldrd	sl, [sp, #24]
   177a0:	add	sp, sp, #32
   177a4:	pop	{pc}		; (ldr pc, [sp], #4)
   177a8:	ldr	r1, [r8, sl, lsl #3]
   177ac:	cmp	r7, #0
   177b0:	beq	17788 <__assert_fail@plt+0x6374>
   177b4:	ldr	r0, [r4, #4]
   177b8:	cmp	r0, #0
   177bc:	streq	r0, [r8, sl, lsl #3]
   177c0:	beq	17788 <__assert_fail@plt+0x6374>
   177c4:	ldrd	r2, [r0]
   177c8:	mov	ip, #0
   177cc:	strd	r2, [r8, r9]
   177d0:	str	ip, [r0]
   177d4:	ldr	r3, [r6, #36]	; 0x24
   177d8:	str	r3, [r0, #4]
   177dc:	str	r0, [r6, #36]	; 0x24
   177e0:	b	17788 <__assert_fail@plt+0x6374>
   177e4:	mov	r1, #0
   177e8:	b	17788 <__assert_fail@plt+0x6374>
   177ec:	bl	113f0 <abort@plt>
   177f0:	strd	r4, [sp, #-32]!	; 0xffffffe0
   177f4:	ldr	r3, [r1, #4]
   177f8:	strd	r6, [sp, #8]
   177fc:	ldr	r6, [r1]
   17800:	strd	r8, [sp, #16]
   17804:	str	sl, [sp, #24]
   17808:	str	lr, [sp, #28]
   1780c:	cmp	r6, r3
   17810:	bcs	178f0 <__assert_fail@plt+0x64dc>
   17814:	mov	r8, r2
   17818:	mov	r5, r0
   1781c:	mov	r7, r1
   17820:	add	r6, r6, #8
   17824:	mov	r9, #0
   17828:	b	17838 <__assert_fail@plt+0x6424>
   1782c:	cmp	r3, r6
   17830:	add	r6, r6, #8
   17834:	bls	178f0 <__assert_fail@plt+0x64dc>
   17838:	ldr	sl, [r6, #-8]
   1783c:	cmp	sl, #0
   17840:	beq	1782c <__assert_fail@plt+0x6418>
   17844:	ldr	r4, [r6, #-4]
   17848:	cmp	r4, #0
   1784c:	beq	178d4 <__assert_fail@plt+0x64c0>
   17850:	ldr	r1, [r5, #8]
   17854:	b	17870 <__assert_fail@plt+0x645c>
   17858:	ldr	r3, [ip, #4]
   1785c:	cmp	r2, #0
   17860:	str	r3, [r4, #4]
   17864:	str	r4, [ip, #4]
   17868:	mov	r4, r2
   1786c:	beq	178d0 <__assert_fail@plt+0x64bc>
   17870:	ldr	sl, [r4]
   17874:	ldr	r3, [r5, #24]
   17878:	mov	r0, sl
   1787c:	blx	r3
   17880:	ldr	r1, [r5, #8]
   17884:	cmp	r0, r1
   17888:	bcs	179a4 <__assert_fail@plt+0x6590>
   1788c:	ldr	r3, [r5]
   17890:	ldr	r2, [r4, #4]
   17894:	ldr	lr, [r3, r0, lsl #3]
   17898:	add	ip, r3, r0, lsl #3
   1789c:	cmp	lr, #0
   178a0:	bne	17858 <__assert_fail@plt+0x6444>
   178a4:	ldr	ip, [r5, #12]
   178a8:	cmp	r2, #0
   178ac:	str	sl, [r3, r0, lsl #3]
   178b0:	add	ip, ip, #1
   178b4:	str	ip, [r5, #12]
   178b8:	str	lr, [r4]
   178bc:	ldr	r3, [r5, #36]	; 0x24
   178c0:	str	r3, [r4, #4]
   178c4:	str	r4, [r5, #36]	; 0x24
   178c8:	mov	r4, r2
   178cc:	bne	17870 <__assert_fail@plt+0x645c>
   178d0:	ldr	sl, [r6, #-8]
   178d4:	cmp	r8, #0
   178d8:	str	r9, [r6, #-4]
   178dc:	beq	1790c <__assert_fail@plt+0x64f8>
   178e0:	ldr	r3, [r7, #4]
   178e4:	cmp	r3, r6
   178e8:	add	r6, r6, #8
   178ec:	bhi	17838 <__assert_fail@plt+0x6424>
   178f0:	mov	r0, #1
   178f4:	ldrd	r4, [sp]
   178f8:	ldrd	r6, [sp, #8]
   178fc:	ldrd	r8, [sp, #16]
   17900:	ldr	sl, [sp, #24]
   17904:	add	sp, sp, #28
   17908:	pop	{pc}		; (ldr pc, [sp], #4)
   1790c:	mov	r0, sl
   17910:	ldr	r1, [r5, #8]
   17914:	ldr	r3, [r5, #24]
   17918:	blx	r3
   1791c:	ldr	r3, [r5, #8]
   17920:	cmp	r0, r3
   17924:	bcs	179a4 <__assert_fail@plt+0x6590>
   17928:	ldr	r3, [r5]
   1792c:	ldr	r2, [r3, r0, lsl #3]
   17930:	add	r4, r3, r0, lsl #3
   17934:	cmp	r2, #0
   17938:	beq	17978 <__assert_fail@plt+0x6564>
   1793c:	ldr	r0, [r5, #36]	; 0x24
   17940:	cmp	r0, #0
   17944:	beq	1798c <__assert_fail@plt+0x6578>
   17948:	ldr	r3, [r0, #4]
   1794c:	str	r3, [r5, #36]	; 0x24
   17950:	ldr	r3, [r4, #4]
   17954:	str	sl, [r0]
   17958:	str	r3, [r0, #4]
   1795c:	str	r0, [r4, #4]
   17960:	ldr	r2, [r7, #12]
   17964:	str	r9, [r6, #-8]
   17968:	ldr	r3, [r7, #4]
   1796c:	sub	r2, r2, #1
   17970:	str	r2, [r7, #12]
   17974:	b	1782c <__assert_fail@plt+0x6418>
   17978:	ldr	r2, [r5, #12]
   1797c:	str	sl, [r3, r0, lsl #3]
   17980:	add	r2, r2, #1
   17984:	str	r2, [r5, #12]
   17988:	b	17960 <__assert_fail@plt+0x654c>
   1798c:	mov	r0, #8
   17990:	bl	1e9ac <__assert_fail@plt+0xd598>
   17994:	cmp	r0, #0
   17998:	bne	17950 <__assert_fail@plt+0x653c>
   1799c:	mov	r0, r8
   179a0:	b	178f4 <__assert_fail@plt+0x64e0>
   179a4:	bl	113f0 <abort@plt>
   179a8:	ldr	r0, [r0, #8]
   179ac:	bx	lr
   179b0:	ldr	r0, [r0, #12]
   179b4:	bx	lr
   179b8:	ldr	r0, [r0, #16]
   179bc:	bx	lr
   179c0:	ldm	r0, {r1, r3}
   179c4:	cmp	r1, r3
   179c8:	bcs	17a3c <__assert_fail@plt+0x6628>
   179cc:	sub	ip, r3, #1
   179d0:	add	r3, r1, #16
   179d4:	sub	ip, ip, r1
   179d8:	mov	r0, #0
   179dc:	bic	ip, ip, #7
   179e0:	add	r1, r1, #8
   179e4:	add	ip, ip, r3
   179e8:	b	179f8 <__assert_fail@plt+0x65e4>
   179ec:	add	r1, r1, #8
   179f0:	cmp	r1, ip
   179f4:	beq	17a38 <__assert_fail@plt+0x6624>
   179f8:	ldr	r3, [r1, #-8]
   179fc:	cmp	r3, #0
   17a00:	beq	179ec <__assert_fail@plt+0x65d8>
   17a04:	ldr	r3, [r1, #-4]
   17a08:	mov	r2, #1
   17a0c:	cmp	r3, #0
   17a10:	beq	17a24 <__assert_fail@plt+0x6610>
   17a14:	ldr	r3, [r3, #4]
   17a18:	add	r2, r2, #1
   17a1c:	cmp	r3, #0
   17a20:	bne	17a14 <__assert_fail@plt+0x6600>
   17a24:	cmp	r0, r2
   17a28:	add	r1, r1, #8
   17a2c:	movcc	r0, r2
   17a30:	cmp	r1, ip
   17a34:	bne	179f8 <__assert_fail@plt+0x65e4>
   17a38:	bx	lr
   17a3c:	mov	r0, #0
   17a40:	bx	lr
   17a44:	ldm	r0, {r1, r3}
   17a48:	push	{lr}		; (str lr, [sp, #-4]!)
   17a4c:	cmp	r1, r3
   17a50:	bcs	17ae4 <__assert_fail@plt+0x66d0>
   17a54:	sub	ip, r3, #1
   17a58:	mov	r2, #0
   17a5c:	sub	ip, ip, r1
   17a60:	add	r3, r1, #16
   17a64:	bic	ip, ip, #7
   17a68:	add	r1, r1, #8
   17a6c:	add	ip, ip, r3
   17a70:	mov	lr, r2
   17a74:	b	17a84 <__assert_fail@plt+0x6670>
   17a78:	add	r1, r1, #8
   17a7c:	cmp	r1, ip
   17a80:	beq	17ac0 <__assert_fail@plt+0x66ac>
   17a84:	ldr	r3, [r1, #-8]
   17a88:	cmp	r3, #0
   17a8c:	beq	17a78 <__assert_fail@plt+0x6664>
   17a90:	ldr	r3, [r1, #-4]
   17a94:	add	lr, lr, #1
   17a98:	add	r2, r2, #1
   17a9c:	cmp	r3, #0
   17aa0:	beq	17a78 <__assert_fail@plt+0x6664>
   17aa4:	ldr	r3, [r3, #4]
   17aa8:	add	r2, r2, #1
   17aac:	cmp	r3, #0
   17ab0:	bne	17aa4 <__assert_fail@plt+0x6690>
   17ab4:	add	r1, r1, #8
   17ab8:	cmp	r1, ip
   17abc:	bne	17a84 <__assert_fail@plt+0x6670>
   17ac0:	ldr	r3, [r0, #12]
   17ac4:	cmp	r3, lr
   17ac8:	movne	r0, #0
   17acc:	bne	17ae0 <__assert_fail@plt+0x66cc>
   17ad0:	ldr	r0, [r0, #16]
   17ad4:	sub	r0, r0, r2
   17ad8:	clz	r0, r0
   17adc:	lsr	r0, r0, #5
   17ae0:	pop	{pc}		; (ldr pc, [sp], #4)
   17ae4:	mov	r2, #0
   17ae8:	mov	lr, r2
   17aec:	b	17ac0 <__assert_fail@plt+0x66ac>
   17af0:	strd	r4, [sp, #-20]!	; 0xffffffec
   17af4:	mov	r4, r1
   17af8:	ldr	r2, [r0]
   17afc:	ldr	r1, [r0, #4]
   17b00:	ldr	r3, [r0, #16]
   17b04:	strd	r6, [sp, #8]
   17b08:	str	lr, [sp, #16]
   17b0c:	sub	sp, sp, #12
   17b10:	cmp	r2, r1
   17b14:	ldrd	r6, [r0, #8]
   17b18:	bcs	17c18 <__assert_fail@plt+0x6804>
   17b1c:	sub	ip, r1, #1
   17b20:	add	r1, r2, #16
   17b24:	sub	ip, ip, r2
   17b28:	add	r0, r2, #8
   17b2c:	bic	ip, ip, #7
   17b30:	mov	r5, #0
   17b34:	add	ip, ip, r1
   17b38:	b	17b48 <__assert_fail@plt+0x6734>
   17b3c:	add	r0, r0, #8
   17b40:	cmp	r0, ip
   17b44:	beq	17b88 <__assert_fail@plt+0x6774>
   17b48:	ldr	r2, [r0, #-8]
   17b4c:	cmp	r2, #0
   17b50:	beq	17b3c <__assert_fail@plt+0x6728>
   17b54:	ldr	r2, [r0, #-4]
   17b58:	mov	r1, #1
   17b5c:	cmp	r2, #0
   17b60:	beq	17b74 <__assert_fail@plt+0x6760>
   17b64:	ldr	r2, [r2, #4]
   17b68:	add	r1, r1, #1
   17b6c:	cmp	r2, #0
   17b70:	bne	17b64 <__assert_fail@plt+0x6750>
   17b74:	cmp	r5, r1
   17b78:	add	r0, r0, #8
   17b7c:	movcc	r5, r1
   17b80:	cmp	r0, ip
   17b84:	bne	17b48 <__assert_fail@plt+0x6734>
   17b88:	mov	r1, #1
   17b8c:	mov	r0, r4
   17b90:	movw	r2, #2096	; 0x830
   17b94:	movt	r2, #2
   17b98:	bl	11324 <__fprintf_chk@plt>
   17b9c:	mov	r3, r6
   17ba0:	mov	r1, #1
   17ba4:	mov	r0, r4
   17ba8:	movw	r2, #2120	; 0x848
   17bac:	movt	r2, #2
   17bb0:	bl	11324 <__fprintf_chk@plt>
   17bb4:	vmov	s15, r7
   17bb8:	mov	r3, r7
   17bbc:	mov	r1, #1
   17bc0:	vldr	d5, [pc, #88]	; 17c20 <__assert_fail@plt+0x680c>
   17bc4:	mov	r0, r4
   17bc8:	movw	r2, #2144	; 0x860
   17bcc:	movt	r2, #2
   17bd0:	vcvt.f64.u32	d6, s15
   17bd4:	vmov	s15, r6
   17bd8:	vmul.f64	d6, d6, d5
   17bdc:	vcvt.f64.u32	d7, s15
   17be0:	vdiv.f64	d5, d6, d7
   17be4:	vstr	d5, [sp]
   17be8:	bl	11324 <__fprintf_chk@plt>
   17bec:	mov	r3, r5
   17bf0:	mov	r0, r4
   17bf4:	movw	r2, #2180	; 0x884
   17bf8:	movt	r2, #2
   17bfc:	mov	r1, #1
   17c00:	add	sp, sp, #12
   17c04:	ldrd	r4, [sp]
   17c08:	ldrd	r6, [sp, #8]
   17c0c:	ldr	lr, [sp, #16]
   17c10:	add	sp, sp, #20
   17c14:	b	11324 <__fprintf_chk@plt>
   17c18:	mov	r5, #0
   17c1c:	b	17b88 <__assert_fail@plt+0x6774>
   17c20:	andeq	r0, r0, r0
   17c24:	subsmi	r0, r9, r0
   17c28:	strd	r4, [sp, #-16]!
   17c2c:	mov	r5, r1
   17c30:	str	r6, [sp, #8]
   17c34:	mov	r6, r0
   17c38:	mov	r0, r1
   17c3c:	str	lr, [sp, #12]
   17c40:	ldr	r1, [r6, #8]
   17c44:	ldr	r3, [r6, #24]
   17c48:	blx	r3
   17c4c:	ldr	r3, [r6, #8]
   17c50:	cmp	r0, r3
   17c54:	bcs	17cc4 <__assert_fail@plt+0x68b0>
   17c58:	ldr	r4, [r6]
   17c5c:	ldr	r1, [r4, r0, lsl #3]
   17c60:	add	r4, r4, r0, lsl #3
   17c64:	cmp	r1, #0
   17c68:	beq	17ca4 <__assert_fail@plt+0x6890>
   17c6c:	cmp	r1, r5
   17c70:	bne	17c84 <__assert_fail@plt+0x6870>
   17c74:	b	17ca8 <__assert_fail@plt+0x6894>
   17c78:	ldr	r1, [r4]
   17c7c:	cmp	r5, r1
   17c80:	beq	17ca8 <__assert_fail@plt+0x6894>
   17c84:	mov	r0, r5
   17c88:	ldr	r3, [r6, #28]
   17c8c:	blx	r3
   17c90:	cmp	r0, #0
   17c94:	bne	17cbc <__assert_fail@plt+0x68a8>
   17c98:	ldr	r4, [r4, #4]
   17c9c:	cmp	r4, #0
   17ca0:	bne	17c78 <__assert_fail@plt+0x6864>
   17ca4:	mov	r1, #0
   17ca8:	ldrd	r4, [sp]
   17cac:	mov	r0, r1
   17cb0:	ldr	r6, [sp, #8]
   17cb4:	add	sp, sp, #12
   17cb8:	pop	{pc}		; (ldr pc, [sp], #4)
   17cbc:	ldr	r1, [r4]
   17cc0:	b	17ca8 <__assert_fail@plt+0x6894>
   17cc4:	bl	113f0 <abort@plt>
   17cc8:	ldr	r3, [r0, #16]
   17ccc:	cmp	r3, #0
   17cd0:	beq	17d24 <__assert_fail@plt+0x6910>
   17cd4:	ldr	r3, [r0]
   17cd8:	ldr	r2, [r0, #4]
   17cdc:	cmp	r3, r2
   17ce0:	bcs	17d18 <__assert_fail@plt+0x6904>
   17ce4:	ldr	r0, [r3]
   17ce8:	cmp	r0, #0
   17cec:	bxne	lr
   17cf0:	sub	r2, r2, #1
   17cf4:	sub	r2, r2, r3
   17cf8:	bic	r2, r2, #7
   17cfc:	add	r2, r3, r2
   17d00:	b	17d10 <__assert_fail@plt+0x68fc>
   17d04:	ldr	r0, [r3, #8]!
   17d08:	cmp	r0, #0
   17d0c:	bxne	lr
   17d10:	cmp	r3, r2
   17d14:	bne	17d04 <__assert_fail@plt+0x68f0>
   17d18:	str	r4, [sp, #-8]!
   17d1c:	str	lr, [sp, #4]
   17d20:	bl	113f0 <abort@plt>
   17d24:	mov	r0, r3
   17d28:	bx	lr
   17d2c:	strd	r4, [sp, #-16]!
   17d30:	mov	r5, r0
   17d34:	mov	r4, r1
   17d38:	mov	r0, r1
   17d3c:	ldr	r1, [r5, #8]
   17d40:	ldr	r3, [r5, #24]
   17d44:	str	r6, [sp, #8]
   17d48:	str	lr, [sp, #12]
   17d4c:	blx	r3
   17d50:	ldr	r3, [r5, #8]
   17d54:	cmp	r0, r3
   17d58:	bcs	17dc0 <__assert_fail@plt+0x69ac>
   17d5c:	ldr	r2, [r5]
   17d60:	add	r2, r2, r0, lsl #3
   17d64:	mov	r3, r2
   17d68:	b	17d74 <__assert_fail@plt+0x6960>
   17d6c:	cmp	r3, #0
   17d70:	beq	17d8c <__assert_fail@plt+0x6978>
   17d74:	ldm	r3, {r1, r3}
   17d78:	cmp	r1, r4
   17d7c:	bne	17d6c <__assert_fail@plt+0x6958>
   17d80:	cmp	r3, #0
   17d84:	ldrne	r0, [r3]
   17d88:	bne	17db0 <__assert_fail@plt+0x699c>
   17d8c:	ldr	r3, [r5, #4]
   17d90:	b	17da0 <__assert_fail@plt+0x698c>
   17d94:	ldr	r0, [r2]
   17d98:	cmp	r0, #0
   17d9c:	bne	17db0 <__assert_fail@plt+0x699c>
   17da0:	add	r2, r2, #8
   17da4:	cmp	r3, r2
   17da8:	bhi	17d94 <__assert_fail@plt+0x6980>
   17dac:	mov	r0, #0
   17db0:	ldrd	r4, [sp]
   17db4:	ldr	r6, [sp, #8]
   17db8:	add	sp, sp, #12
   17dbc:	pop	{pc}		; (ldr pc, [sp], #4)
   17dc0:	bl	113f0 <abort@plt>
   17dc4:	strd	r4, [sp, #-16]!
   17dc8:	mov	r3, #0
   17dcc:	ldr	r5, [r0]
   17dd0:	str	r6, [sp, #8]
   17dd4:	str	lr, [sp, #12]
   17dd8:	ldr	lr, [r0, #4]
   17ddc:	cmp	lr, r5
   17de0:	bls	17dfc <__assert_fail@plt+0x69e8>
   17de4:	ldr	ip, [r5]
   17de8:	cmp	ip, #0
   17dec:	bne	17e10 <__assert_fail@plt+0x69fc>
   17df0:	add	r5, r5, #8
   17df4:	cmp	r5, lr
   17df8:	bcc	17de4 <__assert_fail@plt+0x69d0>
   17dfc:	ldrd	r4, [sp]
   17e00:	mov	r0, r3
   17e04:	ldr	r6, [sp, #8]
   17e08:	add	sp, sp, #12
   17e0c:	pop	{pc}		; (ldr pc, [sp], #4)
   17e10:	cmp	r2, r3
   17e14:	bls	17dfc <__assert_fail@plt+0x69e8>
   17e18:	str	ip, [r1, r3, lsl #2]
   17e1c:	add	r4, r3, #1
   17e20:	lsl	lr, r3, #2
   17e24:	ldr	ip, [r5, #4]
   17e28:	cmp	ip, #0
   17e2c:	beq	17e8c <__assert_fail@plt+0x6a78>
   17e30:	cmp	r2, r4
   17e34:	bls	17e80 <__assert_fail@plt+0x6a6c>
   17e38:	ldr	r6, [ip]
   17e3c:	add	r3, r3, #2
   17e40:	str	r6, [r1, r4, lsl #2]
   17e44:	ldr	ip, [ip, #4]
   17e48:	cmp	ip, #0
   17e4c:	beq	17e78 <__assert_fail@plt+0x6a64>
   17e50:	add	lr, lr, #4
   17e54:	add	lr, r1, lr
   17e58:	cmp	r2, r3
   17e5c:	add	r3, r3, #1
   17e60:	beq	17e84 <__assert_fail@plt+0x6a70>
   17e64:	ldr	r4, [ip]
   17e68:	str	r4, [lr, #4]!
   17e6c:	ldr	ip, [ip, #4]
   17e70:	cmp	ip, #0
   17e74:	bne	17e58 <__assert_fail@plt+0x6a44>
   17e78:	ldr	lr, [r0, #4]
   17e7c:	b	17df0 <__assert_fail@plt+0x69dc>
   17e80:	mov	r2, r4
   17e84:	mov	r3, r2
   17e88:	b	17dfc <__assert_fail@plt+0x69e8>
   17e8c:	mov	r3, r4
   17e90:	ldr	lr, [r0, #4]
   17e94:	b	17df0 <__assert_fail@plt+0x69dc>
   17e98:	strd	r4, [sp, #-32]!	; 0xffffffe0
   17e9c:	ldr	r3, [r0, #4]
   17ea0:	strd	r6, [sp, #8]
   17ea4:	strd	r8, [sp, #16]
   17ea8:	ldr	r8, [r0]
   17eac:	str	sl, [sp, #24]
   17eb0:	str	lr, [sp, #28]
   17eb4:	cmp	r3, r8
   17eb8:	bls	17f34 <__assert_fail@plt+0x6b20>
   17ebc:	mov	r7, r2
   17ec0:	mov	r6, r1
   17ec4:	mov	r9, r0
   17ec8:	mov	r5, #0
   17ecc:	ldr	r0, [r8]
   17ed0:	cmp	r0, #0
   17ed4:	bne	17f00 <__assert_fail@plt+0x6aec>
   17ed8:	add	r8, r8, #8
   17edc:	cmp	r8, r3
   17ee0:	bcc	17ecc <__assert_fail@plt+0x6ab8>
   17ee4:	mov	r0, r5
   17ee8:	ldrd	r4, [sp]
   17eec:	ldrd	r6, [sp, #8]
   17ef0:	ldrd	r8, [sp, #16]
   17ef4:	ldr	sl, [sp, #24]
   17ef8:	add	sp, sp, #28
   17efc:	pop	{pc}		; (ldr pc, [sp], #4)
   17f00:	mov	r4, r8
   17f04:	b	17f0c <__assert_fail@plt+0x6af8>
   17f08:	ldr	r0, [r4]
   17f0c:	mov	r1, r7
   17f10:	blx	r6
   17f14:	cmp	r0, #0
   17f18:	beq	17ee4 <__assert_fail@plt+0x6ad0>
   17f1c:	ldr	r4, [r4, #4]
   17f20:	add	r5, r5, #1
   17f24:	cmp	r4, #0
   17f28:	bne	17f08 <__assert_fail@plt+0x6af4>
   17f2c:	ldr	r3, [r9, #4]
   17f30:	b	17ed8 <__assert_fail@plt+0x6ac4>
   17f34:	mov	r5, #0
   17f38:	b	17ee4 <__assert_fail@plt+0x6ad0>
   17f3c:	ldrb	r2, [r0]
   17f40:	cmp	r2, #0
   17f44:	beq	17f70 <__assert_fail@plt+0x6b5c>
   17f48:	mov	r3, #0
   17f4c:	rsb	r3, r3, r3, lsl #5
   17f50:	add	r3, r3, r2
   17f54:	ldrb	r2, [r0, #1]!
   17f58:	udiv	ip, r3, r1
   17f5c:	cmp	r2, #0
   17f60:	mls	r3, r1, ip, r3
   17f64:	bne	17f4c <__assert_fail@plt+0x6b38>
   17f68:	mov	r0, r3
   17f6c:	bx	lr
   17f70:	mov	r3, r2
   17f74:	mov	r0, r3
   17f78:	bx	lr
   17f7c:	movw	r3, #2076	; 0x81c
   17f80:	movt	r3, #2
   17f84:	strd	r4, [sp, #-8]!
   17f88:	ldrd	r4, [r3]
   17f8c:	ldr	r1, [r3, #16]
   17f90:	ldrd	r2, [r3, #8]
   17f94:	strd	r4, [r0]
   17f98:	ldrd	r4, [sp]
   17f9c:	add	sp, sp, #8
   17fa0:	strd	r2, [r0, #8]
   17fa4:	str	r1, [r0, #16]
   17fa8:	bx	lr
   17fac:	cmp	r2, #0
   17fb0:	strd	r4, [sp, #-24]!	; 0xffffffe8
   17fb4:	movw	r4, #30320	; 0x7670
   17fb8:	movt	r4, #1
   17fbc:	movne	r4, r2
   17fc0:	strd	r6, [sp, #8]
   17fc4:	cmp	r3, #0
   17fc8:	str	r8, [sp, #16]
   17fcc:	mov	r8, r0
   17fd0:	mov	r0, #40	; 0x28
   17fd4:	movw	r5, #30336	; 0x7680
   17fd8:	movt	r5, #1
   17fdc:	mov	r7, r1
   17fe0:	str	lr, [sp, #20]
   17fe4:	movne	r5, r3
   17fe8:	bl	1e9ac <__assert_fail@plt+0xd598>
   17fec:	subs	r6, r0, #0
   17ff0:	beq	18034 <__assert_fail@plt+0x6c20>
   17ff4:	cmp	r7, #0
   17ff8:	movw	r3, #2076	; 0x81c
   17ffc:	movt	r3, #2
   18000:	beq	180c0 <__assert_fail@plt+0x6cac>
   18004:	cmp	r7, r3
   18008:	str	r7, [r6, #20]
   1800c:	beq	180c4 <__assert_fail@plt+0x6cb0>
   18010:	vldr	s14, [pc, #456]	; 181e0 <__assert_fail@plt+0x6dcc>
   18014:	vldr	s15, [r7, #8]
   18018:	vcmpe.f32	s15, s14
   1801c:	vmrs	APSR_nzcv, fpscr
   18020:	bgt	1804c <__assert_fail@plt+0x6c38>
   18024:	str	r3, [r6, #20]
   18028:	mov	r0, r6
   1802c:	mov	r6, #0
   18030:	bl	1760c <__assert_fail@plt+0x61f8>
   18034:	mov	r0, r6
   18038:	ldrd	r4, [sp]
   1803c:	ldrd	r6, [sp, #8]
   18040:	ldr	r8, [sp, #16]
   18044:	add	sp, sp, #20
   18048:	pop	{pc}		; (ldr pc, [sp], #4)
   1804c:	vldr	s13, [pc, #400]	; 181e4 <__assert_fail@plt+0x6dd0>
   18050:	vcmpe.f32	s15, s13
   18054:	vmrs	APSR_nzcv, fpscr
   18058:	bpl	18024 <__assert_fail@plt+0x6c10>
   1805c:	vldr	s13, [pc, #388]	; 181e8 <__assert_fail@plt+0x6dd4>
   18060:	vldr	s12, [r7, #12]
   18064:	vcmpe.f32	s12, s13
   18068:	vmrs	APSR_nzcv, fpscr
   1806c:	ble	18024 <__assert_fail@plt+0x6c10>
   18070:	vldr	s13, [r7]
   18074:	vcmpe.f32	s13, #0.0
   18078:	vmrs	APSR_nzcv, fpscr
   1807c:	blt	18024 <__assert_fail@plt+0x6c10>
   18080:	vadd.f32	s14, s13, s14
   18084:	vldr	s13, [r7, #4]
   18088:	vcmpe.f32	s14, s13
   1808c:	vmrs	APSR_nzcv, fpscr
   18090:	bpl	18024 <__assert_fail@plt+0x6c10>
   18094:	vldr	s12, [pc, #336]	; 181ec <__assert_fail@plt+0x6dd8>
   18098:	vcmpe.f32	s13, s12
   1809c:	vmrs	APSR_nzcv, fpscr
   180a0:	bhi	18024 <__assert_fail@plt+0x6c10>
   180a4:	vcmpe.f32	s15, s14
   180a8:	vmrs	APSR_nzcv, fpscr
   180ac:	ble	18024 <__assert_fail@plt+0x6c10>
   180b0:	ldrb	r3, [r7, #16]
   180b4:	cmp	r3, #0
   180b8:	bne	180ec <__assert_fail@plt+0x6cd8>
   180bc:	b	180c8 <__assert_fail@plt+0x6cb4>
   180c0:	str	r3, [r6, #20]
   180c4:	vldr	s15, [pc, #292]	; 181f0 <__assert_fail@plt+0x6ddc>
   180c8:	vmov	s14, r8
   180cc:	vldr	s13, [pc, #288]	; 181f4 <__assert_fail@plt+0x6de0>
   180d0:	vcvt.f32.u32	s12, s14
   180d4:	vdiv.f32	s14, s12, s15
   180d8:	vcmpe.f32	s14, s13
   180dc:	vmrs	APSR_nzcv, fpscr
   180e0:	bge	18174 <__assert_fail@plt+0x6d60>
   180e4:	vcvt.u32.f32	s15, s14
   180e8:	vmov	r8, s15
   180ec:	cmp	r8, #10
   180f0:	movcs	r3, r8
   180f4:	movcc	r3, #10
   180f8:	orr	r3, r3, #1
   180fc:	cmn	r3, #1
   18100:	beq	18174 <__assert_fail@plt+0x6d60>
   18104:	movw	lr, #43691	; 0xaaab
   18108:	movt	lr, #43690	; 0xaaaa
   1810c:	umull	r1, r2, lr, r3
   18110:	cmp	r3, #9
   18114:	lsr	r2, r2, #1
   18118:	add	r2, r2, r2, lsl #1
   1811c:	sub	r2, r3, r2
   18120:	bls	18160 <__assert_fail@plt+0x6d4c>
   18124:	cmp	r2, #0
   18128:	beq	18168 <__assert_fail@plt+0x6d54>
   1812c:	mov	ip, #16
   18130:	mov	r0, #9
   18134:	mov	r1, #3
   18138:	b	18144 <__assert_fail@plt+0x6d30>
   1813c:	cmp	r2, #0
   18140:	beq	18168 <__assert_fail@plt+0x6d54>
   18144:	add	r1, r1, #2
   18148:	add	r0, r0, ip
   1814c:	cmp	r0, r3
   18150:	add	ip, ip, #8
   18154:	udiv	r2, r3, r1
   18158:	mls	r2, r1, r2, r3
   1815c:	bcc	1813c <__assert_fail@plt+0x6d28>
   18160:	cmp	r2, #0
   18164:	bne	18180 <__assert_fail@plt+0x6d6c>
   18168:	add	r3, r3, #2
   1816c:	cmn	r3, #1
   18170:	bne	1810c <__assert_fail@plt+0x6cf8>
   18174:	mov	r3, #0
   18178:	str	r3, [r6, #8]
   1817c:	b	18028 <__assert_fail@plt+0x6c14>
   18180:	lsrs	r2, r3, #30
   18184:	movne	r7, #1
   18188:	moveq	r7, #0
   1818c:	tst	r3, #536870912	; 0x20000000
   18190:	bne	18174 <__assert_fail@plt+0x6d60>
   18194:	cmp	r7, #0
   18198:	bne	18174 <__assert_fail@plt+0x6d60>
   1819c:	mov	r0, r3
   181a0:	mov	r1, #8
   181a4:	str	r3, [r6, #8]
   181a8:	bl	1e938 <__assert_fail@plt+0xd524>
   181ac:	cmp	r0, #0
   181b0:	str	r0, [r6]
   181b4:	beq	18028 <__assert_fail@plt+0x6c14>
   181b8:	ldr	r3, [r6, #8]
   181bc:	str	r7, [r6, #12]
   181c0:	str	r7, [r6, #16]
   181c4:	strd	r4, [r6, #24]
   181c8:	str	r7, [r6, #36]	; 0x24
   181cc:	add	r0, r0, r3, lsl #3
   181d0:	ldr	r3, [sp, #24]
   181d4:	str	r0, [r6, #4]
   181d8:	str	r3, [r6, #32]
   181dc:	b	18034 <__assert_fail@plt+0x6c20>
   181e0:	stclcc	12, cr12, [ip, #820]	; 0x334
   181e4:	svccc	0x00666666
   181e8:	svccc	0x008ccccd
   181ec:	svccc	0x00800000
   181f0:	svccc	0x004ccccd
   181f4:	svcmi	0x00800000
   181f8:	strd	r4, [sp, #-24]!	; 0xffffffe8
   181fc:	mov	r5, r0
   18200:	ldr	r2, [r0, #4]
   18204:	strd	r6, [sp, #8]
   18208:	ldr	r6, [r0]
   1820c:	str	r8, [sp, #16]
   18210:	str	lr, [sp, #20]
   18214:	cmp	r6, r2
   18218:	addcc	r6, r6, #8
   1821c:	movcc	r7, #0
   18220:	bcc	18234 <__assert_fail@plt+0x6e20>
   18224:	b	182a8 <__assert_fail@plt+0x6e94>
   18228:	cmp	r2, r6
   1822c:	add	r6, r6, #8
   18230:	bls	182a8 <__assert_fail@plt+0x6e94>
   18234:	ldr	r3, [r6, #-8]
   18238:	cmp	r3, #0
   1823c:	beq	18228 <__assert_fail@plt+0x6e14>
   18240:	ldr	r4, [r6, #-4]
   18244:	ldr	r3, [r5, #32]
   18248:	cmp	r4, #0
   1824c:	beq	18280 <__assert_fail@plt+0x6e6c>
   18250:	cmp	r3, #0
   18254:	beq	182c8 <__assert_fail@plt+0x6eb4>
   18258:	ldr	r0, [r4]
   1825c:	blx	r3
   18260:	ldr	r1, [r4, #4]
   18264:	ldr	r3, [r5, #32]
   18268:	ldr	r2, [r5, #36]	; 0x24
   1826c:	str	r7, [r4]
   18270:	str	r2, [r4, #4]
   18274:	str	r4, [r5, #36]	; 0x24
   18278:	subs	r4, r1, #0
   1827c:	bne	18250 <__assert_fail@plt+0x6e3c>
   18280:	cmp	r3, #0
   18284:	beq	18290 <__assert_fail@plt+0x6e7c>
   18288:	ldr	r0, [r6, #-8]
   1828c:	blx	r3
   18290:	str	r7, [r6, #-8]
   18294:	str	r7, [r6, #-4]
   18298:	ldr	r2, [r5, #4]
   1829c:	cmp	r2, r6
   182a0:	add	r6, r6, #8
   182a4:	bhi	18234 <__assert_fail@plt+0x6e20>
   182a8:	mov	r3, #0
   182ac:	ldrd	r6, [sp, #8]
   182b0:	ldr	r8, [sp, #16]
   182b4:	str	r3, [r5, #12]
   182b8:	str	r3, [r5, #16]
   182bc:	ldrd	r4, [sp]
   182c0:	add	sp, sp, #20
   182c4:	pop	{pc}		; (ldr pc, [sp], #4)
   182c8:	ldr	r2, [r5, #36]	; 0x24
   182cc:	str	r7, [r4]
   182d0:	ldr	r3, [r4, #4]
   182d4:	str	r2, [r4, #4]
   182d8:	mov	r2, r4
   182dc:	str	r2, [r5, #36]	; 0x24
   182e0:	subs	r4, r3, #0
   182e4:	bne	182cc <__assert_fail@plt+0x6eb8>
   182e8:	b	18290 <__assert_fail@plt+0x6e7c>
   182ec:	strd	r4, [sp, #-16]!
   182f0:	ldr	r2, [r0, #32]
   182f4:	ldr	r5, [r0]
   182f8:	ldr	r3, [r0, #4]
   182fc:	cmp	r2, #0
   18300:	str	r6, [sp, #8]
   18304:	mov	r6, r0
   18308:	str	lr, [sp, #12]
   1830c:	beq	18374 <__assert_fail@plt+0x6f60>
   18310:	ldr	r2, [r0, #16]
   18314:	cmp	r2, #0
   18318:	beq	18374 <__assert_fail@plt+0x6f60>
   1831c:	cmp	r5, r3
   18320:	bcc	18334 <__assert_fail@plt+0x6f20>
   18324:	b	183a8 <__assert_fail@plt+0x6f94>
   18328:	add	r5, r5, #8
   1832c:	cmp	r5, r3
   18330:	bcs	18370 <__assert_fail@plt+0x6f5c>
   18334:	ldr	r0, [r5]
   18338:	cmp	r0, #0
   1833c:	beq	18328 <__assert_fail@plt+0x6f14>
   18340:	mov	r4, r5
   18344:	b	1834c <__assert_fail@plt+0x6f38>
   18348:	ldr	r0, [r4]
   1834c:	ldr	r3, [r6, #32]
   18350:	blx	r3
   18354:	ldr	r4, [r4, #4]
   18358:	cmp	r4, #0
   1835c:	bne	18348 <__assert_fail@plt+0x6f34>
   18360:	ldr	r3, [r6, #4]
   18364:	add	r5, r5, #8
   18368:	cmp	r5, r3
   1836c:	bcc	18334 <__assert_fail@plt+0x6f20>
   18370:	ldr	r5, [r6]
   18374:	cmp	r3, r5
   18378:	bls	183a8 <__assert_fail@plt+0x6f94>
   1837c:	ldr	r0, [r5, #4]
   18380:	cmp	r0, #0
   18384:	beq	1839c <__assert_fail@plt+0x6f88>
   18388:	ldr	r4, [r0, #4]
   1838c:	bl	1760c <__assert_fail@plt+0x61f8>
   18390:	subs	r0, r4, #0
   18394:	bne	18388 <__assert_fail@plt+0x6f74>
   18398:	ldr	r3, [r6, #4]
   1839c:	add	r5, r5, #8
   183a0:	cmp	r5, r3
   183a4:	bcc	1837c <__assert_fail@plt+0x6f68>
   183a8:	ldr	r0, [r6, #36]	; 0x24
   183ac:	cmp	r0, #0
   183b0:	beq	183c4 <__assert_fail@plt+0x6fb0>
   183b4:	ldr	r4, [r0, #4]
   183b8:	bl	1760c <__assert_fail@plt+0x61f8>
   183bc:	subs	r0, r4, #0
   183c0:	bne	183b4 <__assert_fail@plt+0x6fa0>
   183c4:	ldr	r0, [r6]
   183c8:	bl	1760c <__assert_fail@plt+0x61f8>
   183cc:	mov	r0, r6
   183d0:	ldrd	r4, [sp]
   183d4:	ldr	r6, [sp, #8]
   183d8:	ldr	lr, [sp, #12]
   183dc:	add	sp, sp, #16
   183e0:	b	1760c <__assert_fail@plt+0x61f8>
   183e4:	ldr	r3, [r0, #20]
   183e8:	strd	r4, [sp, #-20]!	; 0xffffffec
   183ec:	mov	r5, r0
   183f0:	ldrb	r2, [r3, #16]
   183f4:	strd	r6, [sp, #8]
   183f8:	str	lr, [sp, #16]
   183fc:	sub	sp, sp, #44	; 0x2c
   18400:	cmp	r2, #0
   18404:	bne	18430 <__assert_fail@plt+0x701c>
   18408:	vmov	s15, r1
   1840c:	vldr	s12, [r3, #8]
   18410:	vldr	s13, [pc, #444]	; 185d4 <__assert_fail@plt+0x71c0>
   18414:	vcvt.f32.u32	s15, s15
   18418:	vdiv.f32	s14, s15, s12
   1841c:	vcmpe.f32	s14, s13
   18420:	vmrs	APSR_nzcv, fpscr
   18424:	vcvtlt.u32.f32	s15, s14
   18428:	vmovlt	r1, s15
   1842c:	bge	184b4 <__assert_fail@plt+0x70a0>
   18430:	cmp	r1, #10
   18434:	movcc	r1, #10
   18438:	orr	r4, r1, #1
   1843c:	cmn	r4, #1
   18440:	beq	184b4 <__assert_fail@plt+0x70a0>
   18444:	movw	ip, #43691	; 0xaaab
   18448:	movt	ip, #43690	; 0xaaaa
   1844c:	umull	r2, r3, ip, r4
   18450:	cmp	r4, #9
   18454:	lsr	r3, r3, #1
   18458:	add	r3, r3, r3, lsl #1
   1845c:	sub	r3, r4, r3
   18460:	bls	184a0 <__assert_fail@plt+0x708c>
   18464:	cmp	r3, #0
   18468:	beq	184a8 <__assert_fail@plt+0x7094>
   1846c:	mov	r0, #16
   18470:	mov	r1, #9
   18474:	mov	r2, #3
   18478:	b	18488 <__assert_fail@plt+0x7074>
   1847c:	cmp	r3, #0
   18480:	add	r0, r0, #8
   18484:	beq	184a8 <__assert_fail@plt+0x7094>
   18488:	add	r2, r2, #2
   1848c:	add	r1, r1, r0
   18490:	cmp	r1, r4
   18494:	udiv	r3, r4, r2
   18498:	mls	r3, r2, r3, r4
   1849c:	bcc	1847c <__assert_fail@plt+0x7068>
   184a0:	cmp	r3, #0
   184a4:	bne	184d0 <__assert_fail@plt+0x70bc>
   184a8:	add	r4, r4, #2
   184ac:	cmn	r4, #1
   184b0:	bne	1844c <__assert_fail@plt+0x7038>
   184b4:	mov	r4, #0
   184b8:	mov	r0, r4
   184bc:	add	sp, sp, #44	; 0x2c
   184c0:	ldrd	r4, [sp]
   184c4:	ldrd	r6, [sp, #8]
   184c8:	add	sp, sp, #16
   184cc:	pop	{pc}		; (ldr pc, [sp], #4)
   184d0:	lsrs	r3, r4, #30
   184d4:	movne	r6, #1
   184d8:	moveq	r6, #0
   184dc:	tst	r4, #536870912	; 0x20000000
   184e0:	bne	184b4 <__assert_fail@plt+0x70a0>
   184e4:	cmp	r6, #0
   184e8:	bne	184b4 <__assert_fail@plt+0x70a0>
   184ec:	ldr	r3, [r5, #8]
   184f0:	cmp	r3, r4
   184f4:	beq	1859c <__assert_fail@plt+0x7188>
   184f8:	mov	r1, #8
   184fc:	mov	r0, r4
   18500:	bl	1e938 <__assert_fail@plt+0xd524>
   18504:	cmp	r0, #0
   18508:	str	r0, [sp]
   1850c:	beq	184b4 <__assert_fail@plt+0x70a0>
   18510:	add	r3, r0, r4, lsl #3
   18514:	ldr	r7, [r5, #20]
   18518:	mov	r2, r6
   1851c:	mov	r0, sp
   18520:	mov	r1, r5
   18524:	ldr	lr, [r5, #28]
   18528:	stmib	sp, {r3, r4, r6}
   1852c:	ldr	r4, [r5, #24]
   18530:	strd	r6, [sp, #16]
   18534:	ldr	ip, [r5, #32]
   18538:	ldr	r3, [r5, #36]	; 0x24
   1853c:	str	r4, [sp, #24]
   18540:	str	lr, [sp, #28]
   18544:	str	ip, [sp, #32]
   18548:	str	r3, [sp, #36]	; 0x24
   1854c:	bl	177f0 <__assert_fail@plt+0x63dc>
   18550:	subs	r4, r0, #0
   18554:	bne	185a4 <__assert_fail@plt+0x7190>
   18558:	ldr	r3, [sp, #36]	; 0x24
   1855c:	mov	r2, #1
   18560:	mov	r1, sp
   18564:	mov	r0, r5
   18568:	str	r3, [r5, #36]	; 0x24
   1856c:	bl	177f0 <__assert_fail@plt+0x63dc>
   18570:	cmp	r0, #0
   18574:	beq	185d0 <__assert_fail@plt+0x71bc>
   18578:	mov	r1, sp
   1857c:	mov	r0, r5
   18580:	mov	r2, r4
   18584:	bl	177f0 <__assert_fail@plt+0x63dc>
   18588:	cmp	r0, #0
   1858c:	beq	185d0 <__assert_fail@plt+0x71bc>
   18590:	ldr	r0, [sp]
   18594:	bl	1760c <__assert_fail@plt+0x61f8>
   18598:	b	184b8 <__assert_fail@plt+0x70a4>
   1859c:	mov	r4, #1
   185a0:	b	184b8 <__assert_fail@plt+0x70a4>
   185a4:	ldr	r0, [r5]
   185a8:	bl	1760c <__assert_fail@plt+0x61f8>
   185ac:	ldrd	r2, [sp]
   185b0:	ldr	r1, [sp, #8]
   185b4:	strd	r2, [r5]
   185b8:	ldr	r2, [sp, #12]
   185bc:	str	r1, [r5, #8]
   185c0:	ldr	r3, [sp, #36]	; 0x24
   185c4:	str	r2, [r5, #12]
   185c8:	str	r3, [r5, #36]	; 0x24
   185cc:	b	184b8 <__assert_fail@plt+0x70a4>
   185d0:	bl	113f0 <abort@plt>
   185d4:	svcmi	0x00800000
   185d8:	strd	r4, [sp, #-16]!
   185dc:	str	r6, [sp, #8]
   185e0:	subs	r6, r1, #0
   185e4:	str	lr, [sp, #12]
   185e8:	sub	sp, sp, #8
   185ec:	beq	18778 <__assert_fail@plt+0x7364>
   185f0:	mov	r3, #0
   185f4:	mov	r5, r2
   185f8:	add	r2, sp, #4
   185fc:	mov	r4, r0
   18600:	bl	17690 <__assert_fail@plt+0x627c>
   18604:	subs	r3, r0, #0
   18608:	beq	18634 <__assert_fail@plt+0x7220>
   1860c:	cmp	r5, #0
   18610:	moveq	r0, r5
   18614:	beq	18620 <__assert_fail@plt+0x720c>
   18618:	mov	r0, #0
   1861c:	str	r3, [r5]
   18620:	add	sp, sp, #8
   18624:	ldrd	r4, [sp]
   18628:	ldr	r6, [sp, #8]
   1862c:	add	sp, sp, #12
   18630:	pop	{pc}		; (ldr pc, [sp], #4)
   18634:	vldr	s15, [r4, #8]
   18638:	vldr	s14, [r4, #12]
   1863c:	ldr	r3, [r4, #20]
   18640:	vcvt.f32.u32	s15, s15
   18644:	vcvt.f32.u32	s14, s14
   18648:	vldr	s13, [r3, #8]
   1864c:	vmul.f32	s12, s13, s15
   18650:	vcmpe.f32	s14, s12
   18654:	vmrs	APSR_nzcv, fpscr
   18658:	bgt	186a0 <__assert_fail@plt+0x728c>
   1865c:	ldr	r2, [sp, #4]
   18660:	ldr	r3, [r2]
   18664:	cmp	r3, #0
   18668:	beq	187a4 <__assert_fail@plt+0x7390>
   1866c:	ldr	r3, [r4, #36]	; 0x24
   18670:	cmp	r3, #0
   18674:	beq	187c8 <__assert_fail@plt+0x73b4>
   18678:	ldr	r1, [r3, #4]
   1867c:	str	r1, [r4, #36]	; 0x24
   18680:	ldr	r1, [r4, #16]
   18684:	mov	r0, #1
   18688:	ldr	ip, [r2, #4]
   1868c:	add	r1, r1, r0
   18690:	stm	r3, {r6, ip}
   18694:	str	r3, [r2, #4]
   18698:	str	r1, [r4, #16]
   1869c:	b	18620 <__assert_fail@plt+0x720c>
   186a0:	movw	r2, #2076	; 0x81c
   186a4:	movt	r2, #2
   186a8:	cmp	r3, r2
   186ac:	beq	187e0 <__assert_fail@plt+0x73cc>
   186b0:	vldr	s12, [pc, #320]	; 187f8 <__assert_fail@plt+0x73e4>
   186b4:	vcmpe.f32	s13, s12
   186b8:	vmrs	APSR_nzcv, fpscr
   186bc:	ble	1877c <__assert_fail@plt+0x7368>
   186c0:	vldr	s11, [pc, #308]	; 187fc <__assert_fail@plt+0x73e8>
   186c4:	vcmpe.f32	s13, s11
   186c8:	vmrs	APSR_nzcv, fpscr
   186cc:	bpl	1877c <__assert_fail@plt+0x7368>
   186d0:	vldr	s10, [pc, #296]	; 18800 <__assert_fail@plt+0x73ec>
   186d4:	vldr	s11, [r3, #12]
   186d8:	vcmpe.f32	s11, s10
   186dc:	vmrs	APSR_nzcv, fpscr
   186e0:	ble	1877c <__assert_fail@plt+0x7368>
   186e4:	vldr	s10, [r3]
   186e8:	vcmpe.f32	s10, #0.0
   186ec:	vmrs	APSR_nzcv, fpscr
   186f0:	blt	1877c <__assert_fail@plt+0x7368>
   186f4:	vadd.f32	s12, s10, s12
   186f8:	vldr	s10, [r3, #4]
   186fc:	vcmpe.f32	s12, s10
   18700:	vmrs	APSR_nzcv, fpscr
   18704:	bpl	1877c <__assert_fail@plt+0x7368>
   18708:	vldr	s9, [pc, #244]	; 18804 <__assert_fail@plt+0x73f0>
   1870c:	vcmpe.f32	s10, s9
   18710:	vmrs	APSR_nzcv, fpscr
   18714:	bhi	1877c <__assert_fail@plt+0x7368>
   18718:	vcmpe.f32	s13, s12
   1871c:	vmrs	APSR_nzcv, fpscr
   18720:	ble	1877c <__assert_fail@plt+0x7368>
   18724:	ldrb	r3, [r3, #16]
   18728:	vmul.f32	s15, s15, s11
   1872c:	cmp	r3, #0
   18730:	beq	1879c <__assert_fail@plt+0x7388>
   18734:	vldr	s14, [pc, #204]	; 18808 <__assert_fail@plt+0x73f4>
   18738:	vcmpe.f32	s15, s14
   1873c:	vmrs	APSR_nzcv, fpscr
   18740:	bge	187d8 <__assert_fail@plt+0x73c4>
   18744:	vcvt.u32.f32	s15, s15
   18748:	mov	r0, r4
   1874c:	vmov	r1, s15
   18750:	bl	183e4 <__assert_fail@plt+0x6fd0>
   18754:	cmp	r0, #0
   18758:	beq	187d8 <__assert_fail@plt+0x73c4>
   1875c:	add	r2, sp, #4
   18760:	mov	r3, #0
   18764:	mov	r1, r6
   18768:	mov	r0, r4
   1876c:	bl	17690 <__assert_fail@plt+0x627c>
   18770:	cmp	r0, #0
   18774:	beq	1865c <__assert_fail@plt+0x7248>
   18778:	bl	113f0 <abort@plt>
   1877c:	vldr	s13, [pc, #136]	; 1880c <__assert_fail@plt+0x73f8>
   18780:	str	r2, [r4, #20]
   18784:	vmul.f32	s12, s15, s13
   18788:	vcmpe.f32	s14, s12
   1878c:	vmrs	APSR_nzcv, fpscr
   18790:	ble	1865c <__assert_fail@plt+0x7248>
   18794:	vldr	s14, [pc, #116]	; 18810 <__assert_fail@plt+0x73fc>
   18798:	vmul.f32	s15, s15, s14
   1879c:	vmul.f32	s15, s15, s13
   187a0:	b	18734 <__assert_fail@plt+0x7320>
   187a4:	ldr	r1, [r4, #12]
   187a8:	mov	r0, #1
   187ac:	ldr	r3, [r4, #16]
   187b0:	str	r6, [r2]
   187b4:	add	r2, r1, r0
   187b8:	add	r3, r3, r0
   187bc:	str	r2, [r4, #12]
   187c0:	str	r3, [r4, #16]
   187c4:	b	18620 <__assert_fail@plt+0x720c>
   187c8:	mov	r0, #8
   187cc:	bl	1e9ac <__assert_fail@plt+0xd598>
   187d0:	subs	r3, r0, #0
   187d4:	bne	187f0 <__assert_fail@plt+0x73dc>
   187d8:	mvn	r0, #0
   187dc:	b	18620 <__assert_fail@plt+0x720c>
   187e0:	vldr	s14, [pc, #40]	; 18810 <__assert_fail@plt+0x73fc>
   187e4:	vldr	s13, [pc, #32]	; 1880c <__assert_fail@plt+0x73f8>
   187e8:	vmul.f32	s15, s15, s14
   187ec:	b	1879c <__assert_fail@plt+0x7388>
   187f0:	ldr	r2, [sp, #4]
   187f4:	b	18680 <__assert_fail@plt+0x726c>
   187f8:	stclcc	12, cr12, [ip, #820]	; 0x334
   187fc:	svccc	0x00666666
   18800:	svccc	0x008ccccd
   18804:	svccc	0x00800000
   18808:	svcmi	0x00800000
   1880c:	svccc	0x004ccccd
   18810:	svccc	0x00b4fdf4
   18814:	strd	r4, [sp, #-16]!
   18818:	str	r6, [sp, #8]
   1881c:	subs	r6, r1, #0
   18820:	str	lr, [sp, #12]
   18824:	sub	sp, sp, #8
   18828:	beq	189a4 <__assert_fail@plt+0x7590>
   1882c:	mov	r3, #0
   18830:	add	r2, sp, #4
   18834:	mov	r4, r0
   18838:	bl	17690 <__assert_fail@plt+0x627c>
   1883c:	subs	r5, r0, #0
   18840:	beq	1885c <__assert_fail@plt+0x7448>
   18844:	mov	r0, r5
   18848:	add	sp, sp, #8
   1884c:	ldrd	r4, [sp]
   18850:	ldr	r6, [sp, #8]
   18854:	add	sp, sp, #12
   18858:	pop	{pc}		; (ldr pc, [sp], #4)
   1885c:	vldr	s15, [r4, #8]
   18860:	vldr	s14, [r4, #12]
   18864:	ldr	r3, [r4, #20]
   18868:	vcvt.f32.u32	s15, s15
   1886c:	vcvt.f32.u32	s14, s14
   18870:	vldr	s13, [r3, #8]
   18874:	vmul.f32	s12, s13, s15
   18878:	vcmpe.f32	s14, s12
   1887c:	vmrs	APSR_nzcv, fpscr
   18880:	bgt	188cc <__assert_fail@plt+0x74b8>
   18884:	ldr	r3, [sp, #4]
   18888:	ldr	r2, [r3]
   1888c:	cmp	r2, #0
   18890:	beq	189d0 <__assert_fail@plt+0x75bc>
   18894:	ldr	r0, [r4, #36]	; 0x24
   18898:	cmp	r0, #0
   1889c:	beq	189f4 <__assert_fail@plt+0x75e0>
   188a0:	ldr	r2, [r0, #4]
   188a4:	str	r2, [r4, #36]	; 0x24
   188a8:	ldr	r2, [r4, #16]
   188ac:	mov	r5, r6
   188b0:	ldr	r1, [r3, #4]
   188b4:	str	r6, [r0]
   188b8:	add	r2, r2, #1
   188bc:	str	r1, [r0, #4]
   188c0:	str	r0, [r3, #4]
   188c4:	str	r2, [r4, #16]
   188c8:	b	18844 <__assert_fail@plt+0x7430>
   188cc:	movw	r2, #2076	; 0x81c
   188d0:	movt	r2, #2
   188d4:	cmp	r3, r2
   188d8:	beq	18a0c <__assert_fail@plt+0x75f8>
   188dc:	vldr	s12, [pc, #312]	; 18a1c <__assert_fail@plt+0x7608>
   188e0:	vcmpe.f32	s13, s12
   188e4:	vmrs	APSR_nzcv, fpscr
   188e8:	ble	189a8 <__assert_fail@plt+0x7594>
   188ec:	vldr	s11, [pc, #300]	; 18a20 <__assert_fail@plt+0x760c>
   188f0:	vcmpe.f32	s13, s11
   188f4:	vmrs	APSR_nzcv, fpscr
   188f8:	bpl	189a8 <__assert_fail@plt+0x7594>
   188fc:	vldr	s10, [pc, #288]	; 18a24 <__assert_fail@plt+0x7610>
   18900:	vldr	s11, [r3, #12]
   18904:	vcmpe.f32	s11, s10
   18908:	vmrs	APSR_nzcv, fpscr
   1890c:	ble	189a8 <__assert_fail@plt+0x7594>
   18910:	vldr	s10, [r3]
   18914:	vcmpe.f32	s10, #0.0
   18918:	vmrs	APSR_nzcv, fpscr
   1891c:	blt	189a8 <__assert_fail@plt+0x7594>
   18920:	vadd.f32	s12, s10, s12
   18924:	vldr	s10, [r3, #4]
   18928:	vcmpe.f32	s12, s10
   1892c:	vmrs	APSR_nzcv, fpscr
   18930:	bpl	189a8 <__assert_fail@plt+0x7594>
   18934:	vldr	s9, [pc, #236]	; 18a28 <__assert_fail@plt+0x7614>
   18938:	vcmpe.f32	s10, s9
   1893c:	vmrs	APSR_nzcv, fpscr
   18940:	bhi	189a8 <__assert_fail@plt+0x7594>
   18944:	vcmpe.f32	s13, s12
   18948:	vmrs	APSR_nzcv, fpscr
   1894c:	ble	189a8 <__assert_fail@plt+0x7594>
   18950:	ldrb	r3, [r3, #16]
   18954:	vmul.f32	s15, s15, s11
   18958:	cmp	r3, #0
   1895c:	beq	189c8 <__assert_fail@plt+0x75b4>
   18960:	vldr	s14, [pc, #196]	; 18a2c <__assert_fail@plt+0x7618>
   18964:	vcmpe.f32	s15, s14
   18968:	vmrs	APSR_nzcv, fpscr
   1896c:	bge	18844 <__assert_fail@plt+0x7430>
   18970:	vcvt.u32.f32	s15, s15
   18974:	mov	r0, r4
   18978:	vmov	r1, s15
   1897c:	bl	183e4 <__assert_fail@plt+0x6fd0>
   18980:	cmp	r0, #0
   18984:	beq	18844 <__assert_fail@plt+0x7430>
   18988:	add	r2, sp, #4
   1898c:	mov	r3, #0
   18990:	mov	r1, r6
   18994:	mov	r0, r4
   18998:	bl	17690 <__assert_fail@plt+0x627c>
   1899c:	cmp	r0, #0
   189a0:	beq	18884 <__assert_fail@plt+0x7470>
   189a4:	bl	113f0 <abort@plt>
   189a8:	vldr	s13, [pc, #128]	; 18a30 <__assert_fail@plt+0x761c>
   189ac:	str	r2, [r4, #20]
   189b0:	vmul.f32	s12, s15, s13
   189b4:	vcmpe.f32	s14, s12
   189b8:	vmrs	APSR_nzcv, fpscr
   189bc:	ble	18884 <__assert_fail@plt+0x7470>
   189c0:	vldr	s14, [pc, #108]	; 18a34 <__assert_fail@plt+0x7620>
   189c4:	vmul.f32	s15, s15, s14
   189c8:	vmul.f32	s15, s15, s13
   189cc:	b	18960 <__assert_fail@plt+0x754c>
   189d0:	ldr	r2, [r4, #12]
   189d4:	mov	r5, r6
   189d8:	str	r6, [r3]
   189dc:	ldr	r3, [r4, #16]
   189e0:	add	r2, r2, #1
   189e4:	add	r3, r3, #1
   189e8:	str	r2, [r4, #12]
   189ec:	str	r3, [r4, #16]
   189f0:	b	18844 <__assert_fail@plt+0x7430>
   189f4:	mov	r0, #8
   189f8:	bl	1e9ac <__assert_fail@plt+0xd598>
   189fc:	cmp	r0, #0
   18a00:	beq	18844 <__assert_fail@plt+0x7430>
   18a04:	ldr	r3, [sp, #4]
   18a08:	b	188a8 <__assert_fail@plt+0x7494>
   18a0c:	vldr	s14, [pc, #32]	; 18a34 <__assert_fail@plt+0x7620>
   18a10:	vldr	s13, [pc, #24]	; 18a30 <__assert_fail@plt+0x761c>
   18a14:	vmul.f32	s15, s15, s14
   18a18:	b	189c8 <__assert_fail@plt+0x75b4>
   18a1c:	stclcc	12, cr12, [ip, #820]	; 0x334
   18a20:	svccc	0x00666666
   18a24:	svccc	0x008ccccd
   18a28:	svccc	0x00800000
   18a2c:	svcmi	0x00800000
   18a30:	svccc	0x004ccccd
   18a34:	svccc	0x00b4fdf4
   18a38:	strd	r4, [sp, #-16]!
   18a3c:	mov	r3, #1
   18a40:	mov	r4, r0
   18a44:	str	r6, [sp, #8]
   18a48:	str	lr, [sp, #12]
   18a4c:	sub	sp, sp, #8
   18a50:	add	r2, sp, #4
   18a54:	bl	17690 <__assert_fail@plt+0x627c>
   18a58:	subs	r5, r0, #0
   18a5c:	beq	18a7c <__assert_fail@plt+0x7668>
   18a60:	ldr	r2, [sp, #4]
   18a64:	ldr	r3, [r4, #16]
   18a68:	ldr	r2, [r2]
   18a6c:	sub	r3, r3, #1
   18a70:	str	r3, [r4, #16]
   18a74:	cmp	r2, #0
   18a78:	beq	18a94 <__assert_fail@plt+0x7680>
   18a7c:	mov	r0, r5
   18a80:	add	sp, sp, #8
   18a84:	ldrd	r4, [sp]
   18a88:	ldr	r6, [sp, #8]
   18a8c:	add	sp, sp, #12
   18a90:	pop	{pc}		; (ldr pc, [sp], #4)
   18a94:	vldr	s15, [r4, #8]
   18a98:	ldr	r3, [r4, #12]
   18a9c:	ldr	r2, [r4, #20]
   18aa0:	vcvt.f32.u32	s15, s15
   18aa4:	sub	r3, r3, #1
   18aa8:	vmov	s14, r3
   18aac:	vldr	s13, [r2]
   18ab0:	str	r3, [r4, #12]
   18ab4:	vmul.f32	s12, s13, s15
   18ab8:	vcvt.f32.u32	s14, s14
   18abc:	vcmpe.f32	s14, s12
   18ac0:	vmrs	APSR_nzcv, fpscr
   18ac4:	bpl	18a7c <__assert_fail@plt+0x7668>
   18ac8:	movw	r3, #2076	; 0x81c
   18acc:	movt	r3, #2
   18ad0:	cmp	r2, r3
   18ad4:	beq	18bb4 <__assert_fail@plt+0x77a0>
   18ad8:	vldr	s11, [pc, #224]	; 18bc0 <__assert_fail@plt+0x77ac>
   18adc:	vldr	s12, [r2, #8]
   18ae0:	vcmpe.f32	s12, s11
   18ae4:	vmrs	APSR_nzcv, fpscr
   18ae8:	ble	18b9c <__assert_fail@plt+0x7788>
   18aec:	vldr	s10, [pc, #208]	; 18bc4 <__assert_fail@plt+0x77b0>
   18af0:	vcmpe.f32	s12, s10
   18af4:	vmrs	APSR_nzcv, fpscr
   18af8:	bpl	18b9c <__assert_fail@plt+0x7788>
   18afc:	vldr	s10, [pc, #196]	; 18bc8 <__assert_fail@plt+0x77b4>
   18b00:	vldr	s9, [r2, #12]
   18b04:	vcmpe.f32	s9, s10
   18b08:	vmrs	APSR_nzcv, fpscr
   18b0c:	ble	18b9c <__assert_fail@plt+0x7788>
   18b10:	vcmpe.f32	s13, #0.0
   18b14:	vmrs	APSR_nzcv, fpscr
   18b18:	blt	18b9c <__assert_fail@plt+0x7788>
   18b1c:	vadd.f32	s13, s13, s11
   18b20:	vldr	s11, [r2, #4]
   18b24:	vcmpe.f32	s13, s11
   18b28:	vmrs	APSR_nzcv, fpscr
   18b2c:	bpl	18b9c <__assert_fail@plt+0x7788>
   18b30:	vldr	s10, [pc, #148]	; 18bcc <__assert_fail@plt+0x77b8>
   18b34:	vcmpe.f32	s11, s10
   18b38:	vmrs	APSR_nzcv, fpscr
   18b3c:	bhi	18b9c <__assert_fail@plt+0x7788>
   18b40:	vcmpe.f32	s12, s13
   18b44:	vmrs	APSR_nzcv, fpscr
   18b48:	ble	18b9c <__assert_fail@plt+0x7788>
   18b4c:	ldrb	r3, [r2, #16]
   18b50:	vmul.f32	s15, s15, s11
   18b54:	cmp	r3, #0
   18b58:	beq	18bb8 <__assert_fail@plt+0x77a4>
   18b5c:	vcvt.u32.f32	s15, s15
   18b60:	mov	r0, r4
   18b64:	vmov	r1, s15
   18b68:	bl	183e4 <__assert_fail@plt+0x6fd0>
   18b6c:	cmp	r0, #0
   18b70:	bne	18a7c <__assert_fail@plt+0x7668>
   18b74:	ldr	r0, [r4, #36]	; 0x24
   18b78:	cmp	r0, #0
   18b7c:	beq	18b90 <__assert_fail@plt+0x777c>
   18b80:	ldr	r6, [r0, #4]
   18b84:	bl	1760c <__assert_fail@plt+0x61f8>
   18b88:	subs	r0, r6, #0
   18b8c:	bne	18b80 <__assert_fail@plt+0x776c>
   18b90:	mov	r3, #0
   18b94:	str	r3, [r4, #36]	; 0x24
   18b98:	b	18a7c <__assert_fail@plt+0x7668>
   18b9c:	vldr	s13, [pc, #44]	; 18bd0 <__assert_fail@plt+0x77bc>
   18ba0:	str	r3, [r4, #20]
   18ba4:	vmul.f32	s13, s15, s13
   18ba8:	vcmpe.f32	s14, s13
   18bac:	vmrs	APSR_nzcv, fpscr
   18bb0:	bpl	18a7c <__assert_fail@plt+0x7668>
   18bb4:	vldr	s12, [pc, #24]	; 18bd4 <__assert_fail@plt+0x77c0>
   18bb8:	vmul.f32	s15, s15, s12
   18bbc:	b	18b5c <__assert_fail@plt+0x7748>
   18bc0:	stclcc	12, cr12, [ip, #820]	; 0x334
   18bc4:	svccc	0x00666666
   18bc8:	svccc	0x008ccccd
   18bcc:	svccc	0x00800000
   18bd0:	andeq	r0, r0, r0
   18bd4:	svccc	0x004ccccd
   18bd8:	strd	r4, [sp, #-16]!
   18bdc:	mov	r3, #1
   18be0:	mov	r4, r0
   18be4:	str	r6, [sp, #8]
   18be8:	str	lr, [sp, #12]
   18bec:	sub	sp, sp, #8
   18bf0:	add	r2, sp, #4
   18bf4:	bl	17690 <__assert_fail@plt+0x627c>
   18bf8:	subs	r5, r0, #0
   18bfc:	beq	18c1c <__assert_fail@plt+0x7808>
   18c00:	ldr	r2, [sp, #4]
   18c04:	ldr	r3, [r4, #16]
   18c08:	ldr	r2, [r2]
   18c0c:	sub	r3, r3, #1
   18c10:	str	r3, [r4, #16]
   18c14:	cmp	r2, #0
   18c18:	beq	18c34 <__assert_fail@plt+0x7820>
   18c1c:	mov	r0, r5
   18c20:	add	sp, sp, #8
   18c24:	ldrd	r4, [sp]
   18c28:	ldr	r6, [sp, #8]
   18c2c:	add	sp, sp, #12
   18c30:	pop	{pc}		; (ldr pc, [sp], #4)
   18c34:	vldr	s15, [r4, #8]
   18c38:	ldr	r3, [r4, #12]
   18c3c:	ldr	r2, [r4, #20]
   18c40:	vcvt.f32.u32	s15, s15
   18c44:	sub	r3, r3, #1
   18c48:	vmov	s14, r3
   18c4c:	vldr	s13, [r2]
   18c50:	str	r3, [r4, #12]
   18c54:	vmul.f32	s12, s13, s15
   18c58:	vcvt.f32.u32	s14, s14
   18c5c:	vcmpe.f32	s14, s12
   18c60:	vmrs	APSR_nzcv, fpscr
   18c64:	bpl	18c1c <__assert_fail@plt+0x7808>
   18c68:	movw	r3, #2076	; 0x81c
   18c6c:	movt	r3, #2
   18c70:	cmp	r2, r3
   18c74:	beq	18d54 <__assert_fail@plt+0x7940>
   18c78:	vldr	s11, [pc, #224]	; 18d60 <__assert_fail@plt+0x794c>
   18c7c:	vldr	s12, [r2, #8]
   18c80:	vcmpe.f32	s12, s11
   18c84:	vmrs	APSR_nzcv, fpscr
   18c88:	ble	18d3c <__assert_fail@plt+0x7928>
   18c8c:	vldr	s10, [pc, #208]	; 18d64 <__assert_fail@plt+0x7950>
   18c90:	vcmpe.f32	s12, s10
   18c94:	vmrs	APSR_nzcv, fpscr
   18c98:	bpl	18d3c <__assert_fail@plt+0x7928>
   18c9c:	vldr	s10, [pc, #196]	; 18d68 <__assert_fail@plt+0x7954>
   18ca0:	vldr	s9, [r2, #12]
   18ca4:	vcmpe.f32	s9, s10
   18ca8:	vmrs	APSR_nzcv, fpscr
   18cac:	ble	18d3c <__assert_fail@plt+0x7928>
   18cb0:	vcmpe.f32	s13, #0.0
   18cb4:	vmrs	APSR_nzcv, fpscr
   18cb8:	blt	18d3c <__assert_fail@plt+0x7928>
   18cbc:	vadd.f32	s13, s13, s11
   18cc0:	vldr	s11, [r2, #4]
   18cc4:	vcmpe.f32	s13, s11
   18cc8:	vmrs	APSR_nzcv, fpscr
   18ccc:	bpl	18d3c <__assert_fail@plt+0x7928>
   18cd0:	vldr	s10, [pc, #148]	; 18d6c <__assert_fail@plt+0x7958>
   18cd4:	vcmpe.f32	s11, s10
   18cd8:	vmrs	APSR_nzcv, fpscr
   18cdc:	bhi	18d3c <__assert_fail@plt+0x7928>
   18ce0:	vcmpe.f32	s12, s13
   18ce4:	vmrs	APSR_nzcv, fpscr
   18ce8:	ble	18d3c <__assert_fail@plt+0x7928>
   18cec:	ldrb	r3, [r2, #16]
   18cf0:	vmul.f32	s15, s15, s11
   18cf4:	cmp	r3, #0
   18cf8:	beq	18d58 <__assert_fail@plt+0x7944>
   18cfc:	vcvt.u32.f32	s15, s15
   18d00:	mov	r0, r4
   18d04:	vmov	r1, s15
   18d08:	bl	183e4 <__assert_fail@plt+0x6fd0>
   18d0c:	cmp	r0, #0
   18d10:	bne	18c1c <__assert_fail@plt+0x7808>
   18d14:	ldr	r0, [r4, #36]	; 0x24
   18d18:	cmp	r0, #0
   18d1c:	beq	18d30 <__assert_fail@plt+0x791c>
   18d20:	ldr	r6, [r0, #4]
   18d24:	bl	1760c <__assert_fail@plt+0x61f8>
   18d28:	subs	r0, r6, #0
   18d2c:	bne	18d20 <__assert_fail@plt+0x790c>
   18d30:	mov	r3, #0
   18d34:	str	r3, [r4, #36]	; 0x24
   18d38:	b	18c1c <__assert_fail@plt+0x7808>
   18d3c:	vldr	s13, [pc, #44]	; 18d70 <__assert_fail@plt+0x795c>
   18d40:	str	r3, [r4, #20]
   18d44:	vmul.f32	s13, s15, s13
   18d48:	vcmpe.f32	s14, s13
   18d4c:	vmrs	APSR_nzcv, fpscr
   18d50:	bpl	18c1c <__assert_fail@plt+0x7808>
   18d54:	vldr	s12, [pc, #24]	; 18d74 <__assert_fail@plt+0x7960>
   18d58:	vmul.f32	s15, s15, s12
   18d5c:	b	18cfc <__assert_fail@plt+0x78e8>
   18d60:	stclcc	12, cr12, [ip, #820]	; 0x334
   18d64:	svccc	0x00666666
   18d68:	svccc	0x008ccccd
   18d6c:	svccc	0x00800000
   18d70:	andeq	r0, r0, r0
   18d74:	svccc	0x004ccccd
   18d78:	mov	r3, #0
   18d7c:	cmp	r0, #0
   18d80:	strd	r4, [sp, #-24]!	; 0xffffffe8
   18d84:	mov	r5, r1
   18d88:	sbcs	r1, r1, #0
   18d8c:	strd	r6, [sp, #8]
   18d90:	mov	r4, r0
   18d94:	add	r6, r2, #20
   18d98:	str	r8, [sp, #16]
   18d9c:	str	lr, [sp, #20]
   18da0:	strb	r3, [r2, #20]
   18da4:	blt	18e04 <__assert_fail@plt+0x79f0>
   18da8:	mov	r0, r4
   18dac:	mov	r1, r5
   18db0:	mov	r2, #10
   18db4:	mov	r3, #0
   18db8:	bl	1f028 <__assert_fail@plt+0xdc14>
   18dbc:	add	ip, r2, #48	; 0x30
   18dc0:	mov	r0, r4
   18dc4:	mov	r1, r5
   18dc8:	mov	r3, #0
   18dcc:	mov	r2, #10
   18dd0:	strb	ip, [r6, #-1]!
   18dd4:	bl	1f028 <__assert_fail@plt+0xdc14>
   18dd8:	mov	r4, r0
   18ddc:	mov	r5, r1
   18de0:	orrs	r3, r4, r5
   18de4:	bne	18da8 <__assert_fail@plt+0x7994>
   18de8:	mov	r0, r6
   18dec:	ldrd	r4, [sp]
   18df0:	ldrd	r6, [sp, #8]
   18df4:	ldr	r8, [sp, #16]
   18df8:	add	sp, sp, #20
   18dfc:	pop	{pc}		; (ldr pc, [sp], #4)
   18e00:	mov	r6, r7
   18e04:	mov	r0, r4
   18e08:	mov	r1, r5
   18e0c:	mov	r2, #10
   18e10:	mov	r3, #0
   18e14:	bl	1f028 <__assert_fail@plt+0xdc14>
   18e18:	rsb	ip, r2, #48	; 0x30
   18e1c:	mov	r0, r4
   18e20:	mov	r1, r5
   18e24:	mov	r3, #0
   18e28:	mov	r2, #10
   18e2c:	strb	ip, [r6, #-1]
   18e30:	sub	r7, r6, #1
   18e34:	bl	1f028 <__assert_fail@plt+0xdc14>
   18e38:	mov	r4, r0
   18e3c:	mov	r5, r1
   18e40:	orrs	r3, r4, r5
   18e44:	bne	18e00 <__assert_fail@plt+0x79ec>
   18e48:	mov	r3, #45	; 0x2d
   18e4c:	sub	r6, r6, #2
   18e50:	strb	r3, [r7, #-1]
   18e54:	b	18de8 <__assert_fail@plt+0x79d4>
   18e58:	movw	r0, #2204	; 0x89c
   18e5c:	movt	r0, #2
   18e60:	push	{lr}		; (str lr, [sp, #-4]!)
   18e64:	sub	sp, sp, #12
   18e68:	bl	11234 <getenv@plt>
   18e6c:	subs	r3, r0, #0
   18e70:	beq	18e80 <__assert_fail@plt+0x7a6c>
   18e74:	ldrb	r3, [r3]
   18e78:	cmp	r3, #0
   18e7c:	bne	18e90 <__assert_fail@plt+0x7a7c>
   18e80:	movw	r0, #4201	; 0x1069
   18e84:	movt	r0, #3
   18e88:	add	sp, sp, #12
   18e8c:	pop	{pc}		; (ldr pc, [sp], #4)
   18e90:	mov	r2, #10
   18e94:	add	r1, sp, #4
   18e98:	bl	110d8 <strtol@plt>
   18e9c:	ldr	r2, [sp, #4]
   18ea0:	movw	r3, #4201	; 0x1069
   18ea4:	movt	r3, #3
   18ea8:	ldrb	r2, [r2]
   18eac:	cmp	r2, #0
   18eb0:	movne	r0, r3
   18eb4:	add	sp, sp, #12
   18eb8:	pop	{pc}		; (ldr pc, [sp], #4)
   18ebc:	strd	r4, [sp, #-16]!
   18ec0:	subs	r4, r0, #0
   18ec4:	str	r6, [sp, #8]
   18ec8:	str	lr, [sp, #12]
   18ecc:	beq	18f64 <__assert_fail@plt+0x7b50>
   18ed0:	mov	r1, #47	; 0x2f
   18ed4:	bl	11384 <strrchr@plt>
   18ed8:	subs	r5, r0, #0
   18edc:	beq	18f3c <__assert_fail@plt+0x7b28>
   18ee0:	add	r6, r5, #1
   18ee4:	sub	r3, r6, r4
   18ee8:	cmp	r3, #6
   18eec:	ble	18f3c <__assert_fail@plt+0x7b28>
   18ef0:	movw	r1, #2276	; 0x8e4
   18ef4:	movt	r1, #2
   18ef8:	mov	r2, #7
   18efc:	sub	r0, r5, #6
   18f00:	bl	113e4 <strncmp@plt>
   18f04:	cmp	r0, #0
   18f08:	bne	18f3c <__assert_fail@plt+0x7b28>
   18f0c:	movw	r1, #2284	; 0x8ec
   18f10:	movt	r1, #2
   18f14:	mov	r2, #3
   18f18:	mov	r0, r6
   18f1c:	bl	113e4 <strncmp@plt>
   18f20:	cmp	r0, #0
   18f24:	movne	r4, r6
   18f28:	bne	18f3c <__assert_fail@plt+0x7b28>
   18f2c:	add	r4, r5, #4
   18f30:	movw	r3, #4528	; 0x11b0
   18f34:	movt	r3, #3
   18f38:	str	r4, [r3]
   18f3c:	movw	r2, #4588	; 0x11ec
   18f40:	movt	r2, #3
   18f44:	ldr	r6, [sp, #8]
   18f48:	movw	r3, #4532	; 0x11b4
   18f4c:	movt	r3, #3
   18f50:	str	r4, [r2]
   18f54:	str	r4, [r3]
   18f58:	ldrd	r4, [sp]
   18f5c:	add	sp, sp, #12
   18f60:	pop	{pc}		; (ldr pc, [sp], #4)
   18f64:	movw	r3, #4544	; 0x11c0
   18f68:	movt	r3, #3
   18f6c:	movw	r0, #2220	; 0x8ac
   18f70:	movt	r0, #2
   18f74:	ldr	r3, [r3]
   18f78:	mov	r2, #55	; 0x37
   18f7c:	mov	r1, #1
   18f80:	bl	111e0 <fwrite@plt>
   18f84:	bl	113f0 <abort@plt>
   18f88:	mov	r2, #5
   18f8c:	strd	r4, [sp, #-16]!
   18f90:	mov	r5, r0
   18f94:	str	r6, [sp, #8]
   18f98:	mov	r6, r1
   18f9c:	mov	r1, r0
   18fa0:	mov	r0, #0
   18fa4:	str	lr, [sp, #12]
   18fa8:	bl	11174 <dcgettext@plt>
   18fac:	cmp	r5, r0
   18fb0:	mov	r4, r0
   18fb4:	beq	18fcc <__assert_fail@plt+0x7bb8>
   18fb8:	mov	r0, r4
   18fbc:	ldrd	r4, [sp]
   18fc0:	ldr	r6, [sp, #8]
   18fc4:	add	sp, sp, #12
   18fc8:	pop	{pc}		; (ldr pc, [sp], #4)
   18fcc:	bl	1ee0c <__assert_fail@plt+0xd9f8>
   18fd0:	ldrb	r3, [r0]
   18fd4:	bic	r3, r3, #32
   18fd8:	cmp	r3, #85	; 0x55
   18fdc:	bne	19044 <__assert_fail@plt+0x7c30>
   18fe0:	ldrb	r3, [r0, #1]
   18fe4:	bic	r3, r3, #32
   18fe8:	cmp	r3, #84	; 0x54
   18fec:	bne	190c4 <__assert_fail@plt+0x7cb0>
   18ff0:	ldrb	r3, [r0, #2]
   18ff4:	bic	r3, r3, #32
   18ff8:	cmp	r3, #70	; 0x46
   18ffc:	bne	190c4 <__assert_fail@plt+0x7cb0>
   19000:	ldrb	r3, [r0, #3]
   19004:	cmp	r3, #45	; 0x2d
   19008:	bne	190c4 <__assert_fail@plt+0x7cb0>
   1900c:	ldrb	r3, [r0, #4]
   19010:	cmp	r3, #56	; 0x38
   19014:	bne	190c4 <__assert_fail@plt+0x7cb0>
   19018:	ldrb	r3, [r0, #5]
   1901c:	cmp	r3, #0
   19020:	bne	190c4 <__assert_fail@plt+0x7cb0>
   19024:	ldrb	r2, [r4]
   19028:	movw	r3, #2376	; 0x948
   1902c:	movt	r3, #2
   19030:	movw	r4, #2388	; 0x954
   19034:	movt	r4, #2
   19038:	cmp	r2, #96	; 0x60
   1903c:	movne	r4, r3
   19040:	b	18fb8 <__assert_fail@plt+0x7ba4>
   19044:	cmp	r3, #71	; 0x47
   19048:	bne	190c4 <__assert_fail@plt+0x7cb0>
   1904c:	ldrb	r3, [r0, #1]
   19050:	bic	r3, r3, #32
   19054:	cmp	r3, #66	; 0x42
   19058:	bne	190c4 <__assert_fail@plt+0x7cb0>
   1905c:	ldrb	r3, [r0, #2]
   19060:	cmp	r3, #49	; 0x31
   19064:	bne	190c4 <__assert_fail@plt+0x7cb0>
   19068:	ldrb	r3, [r0, #3]
   1906c:	cmp	r3, #56	; 0x38
   19070:	bne	190c4 <__assert_fail@plt+0x7cb0>
   19074:	ldrb	r3, [r0, #4]
   19078:	cmp	r3, #48	; 0x30
   1907c:	bne	190c4 <__assert_fail@plt+0x7cb0>
   19080:	ldrb	r3, [r0, #5]
   19084:	cmp	r3, #51	; 0x33
   19088:	bne	190c4 <__assert_fail@plt+0x7cb0>
   1908c:	ldrb	r3, [r0, #6]
   19090:	cmp	r3, #48	; 0x30
   19094:	bne	190c4 <__assert_fail@plt+0x7cb0>
   19098:	ldrb	r3, [r0, #7]
   1909c:	cmp	r3, #0
   190a0:	bne	190c4 <__assert_fail@plt+0x7cb0>
   190a4:	ldrb	r2, [r4]
   190a8:	movw	r3, #2380	; 0x94c
   190ac:	movt	r3, #2
   190b0:	movw	r4, #2384	; 0x950
   190b4:	movt	r4, #2
   190b8:	cmp	r2, #96	; 0x60
   190bc:	movne	r4, r3
   190c0:	b	18fb8 <__assert_fail@plt+0x7ba4>
   190c4:	movw	r3, #2392	; 0x958
   190c8:	movt	r3, #2
   190cc:	cmp	r6, #9
   190d0:	movw	r4, #2372	; 0x944
   190d4:	movt	r4, #2
   190d8:	movne	r4, r3
   190dc:	b	18fb8 <__assert_fail@plt+0x7ba4>
   190e0:	strd	r4, [sp, #-36]!	; 0xffffffdc
   190e4:	strd	r6, [sp, #8]
   190e8:	strd	r8, [sp, #16]
   190ec:	mov	r8, r3
   190f0:	strd	sl, [sp, #24]
   190f4:	mov	fp, r0
   190f8:	mov	sl, r1
   190fc:	str	lr, [sp, #32]
   19100:	sub	sp, sp, #140	; 0x8c
   19104:	ldr	r3, [sp, #180]	; 0xb4
   19108:	str	r2, [sp, #28]
   1910c:	and	r4, r3, #2
   19110:	ubfx	r3, r3, #1, #1
   19114:	str	r3, [sp, #44]	; 0x2c
   19118:	bl	111f8 <__ctype_get_mb_cur_max@plt>
   1911c:	ldr	r3, [sp, #176]	; 0xb0
   19120:	str	r0, [sp, #76]	; 0x4c
   19124:	cmp	r3, #10
   19128:	ldrls	pc, [pc, r3, lsl #2]
   1912c:	b	1aac8 <__assert_fail@plt+0x96b4>
   19130:			; <UNDEFINED> instruction: 0x000195b0
   19134:	andeq	r9, r1, ip, asr #13
   19138:	andeq	r9, r1, r8, asr #24
   1913c:	andeq	r9, r1, r8, lsr r7
   19140:			; <UNDEFINED> instruction: 0x000194b8
   19144:	andeq	r9, r1, r4, lsr r5
   19148:	andeq	r9, r1, ip, lsl #12
   1914c:	andeq	r9, r1, r4, ror r6
   19150:	andeq	r9, r1, ip, asr r1
   19154:	andeq	r9, r1, ip, asr r1
   19158:	andeq	r9, r1, ip, asr r1
   1915c:	ldr	r3, [sp, #176]	; 0xb0
   19160:	cmp	r3, #10
   19164:	beq	19190 <__assert_fail@plt+0x7d7c>
   19168:	mov	r1, r3
   1916c:	movw	r0, #2396	; 0x95c
   19170:	movt	r0, #2
   19174:	bl	18f88 <__assert_fail@plt+0x7b74>
   19178:	str	r0, [sp, #188]	; 0xbc
   1917c:	movw	r0, #2392	; 0x958
   19180:	movt	r0, #2
   19184:	ldr	r1, [sp, #176]	; 0xb0
   19188:	bl	18f88 <__assert_fail@plt+0x7b74>
   1918c:	str	r0, [sp, #192]	; 0xc0
   19190:	cmp	r4, #0
   19194:	movne	r4, #0
   19198:	beq	1a854 <__assert_fail@plt+0x9440>
   1919c:	mov	r5, #0
   191a0:	ldr	r0, [sp, #192]	; 0xc0
   191a4:	mov	r9, r5
   191a8:	str	r5, [sp, #64]	; 0x40
   191ac:	bl	112a0 <strlen@plt>
   191b0:	mov	r3, #1
   191b4:	ldr	r2, [sp, #44]	; 0x2c
   191b8:	cmp	r0, r5
   191bc:	moveq	r2, r5
   191c0:	str	r3, [sp, #32]
   191c4:	str	r3, [sp, #48]	; 0x30
   191c8:	str	r5, [sp, #52]	; 0x34
   191cc:	str	r3, [sp, #60]	; 0x3c
   191d0:	ldr	r3, [sp, #180]	; 0xb4
   191d4:	str	r0, [sp, #56]	; 0x38
   191d8:	str	r5, [sp, #68]	; 0x44
   191dc:	str	r5, [sp, #80]	; 0x50
   191e0:	str	r5, [sp, #84]	; 0x54
   191e4:	and	r3, r3, #1
   191e8:	str	r2, [sp, #88]	; 0x58
   191ec:	str	r3, [sp, #92]	; 0x5c
   191f0:	ldr	r3, [sp, #180]	; 0xb4
   191f4:	and	r3, r3, #4
   191f8:	str	r3, [sp, #96]	; 0x60
   191fc:	ldr	r3, [sp, #192]	; 0xc0
   19200:	str	r3, [sp, #72]	; 0x48
   19204:	mov	r3, fp
   19208:	mov	r7, #0
   1920c:	mov	fp, r9
   19210:	mov	r9, r3
   19214:	cmn	r8, #1
   19218:	beq	1981c <__assert_fail@plt+0x8408>
   1921c:	subs	r6, r8, r7
   19220:	movne	r6, #1
   19224:	cmp	r6, #0
   19228:	beq	19834 <__assert_fail@plt+0x8420>
   1922c:	ldr	r0, [sp, #28]
   19230:	ldr	r3, [sp, #48]	; 0x30
   19234:	cmp	r3, #0
   19238:	add	r3, r0, r7
   1923c:	str	r3, [sp, #36]	; 0x24
   19240:	beq	19cc0 <__assert_fail@plt+0x88ac>
   19244:	ldr	r2, [sp, #56]	; 0x38
   19248:	cmp	r2, #0
   1924c:	beq	1a1c0 <__assert_fail@plt+0x8dac>
   19250:	cmp	r2, #1
   19254:	mov	r3, r2
   19258:	movls	r3, #0
   1925c:	movhi	r3, #1
   19260:	cmn	r8, #1
   19264:	add	r5, r7, r2
   19268:	movne	r3, #0
   1926c:	cmp	r3, #0
   19270:	beq	1927c <__assert_fail@plt+0x7e68>
   19274:	bl	112a0 <strlen@plt>
   19278:	mov	r8, r0
   1927c:	cmp	r5, r8
   19280:	bhi	1a1c0 <__assert_fail@plt+0x8dac>
   19284:	ldr	r0, [sp, #36]	; 0x24
   19288:	ldr	r2, [sp, #56]	; 0x38
   1928c:	ldr	r1, [sp, #72]	; 0x48
   19290:	bl	1115c <memcmp@plt>
   19294:	cmp	r0, #0
   19298:	bne	1a1c0 <__assert_fail@plt+0x8dac>
   1929c:	ldr	r3, [sp, #44]	; 0x2c
   192a0:	cmp	r3, #0
   192a4:	bne	1a96c <__assert_fail@plt+0x9558>
   192a8:	ldr	r3, [sp, #36]	; 0x24
   192ac:	ldrb	r5, [r3]
   192b0:	cmp	r5, #126	; 0x7e
   192b4:	ldrls	pc, [pc, r5, lsl #2]
   192b8:	b	1a754 <__assert_fail@plt+0x9340>
   192bc:	muleq	r1, r0, r9
   192c0:	andeq	sl, r1, r4, asr r7
   192c4:	andeq	sl, r1, r4, asr r7
   192c8:	andeq	sl, r1, r4, asr r7
   192cc:	andeq	sl, r1, r4, asr r7
   192d0:	andeq	sl, r1, r4, asr r7
   192d4:	andeq	sl, r1, r4, asr r7
   192d8:	andeq	r9, r1, r8, ror #17
   192dc:	andeq	r9, r1, r0, ror #17
   192e0:	strdeq	r9, [r1], -r0
   192e4:	andeq	r9, r1, r4, ror sl
   192e8:	andeq	r9, r1, r4, ror #20
   192ec:	andeq	r9, r1, ip, lsl #15
   192f0:	andeq	r9, r1, r0, asr #20
   192f4:	andeq	sl, r1, r4, asr r7
   192f8:	andeq	sl, r1, r4, asr r7
   192fc:	andeq	sl, r1, r4, asr r7
   19300:	andeq	sl, r1, r4, asr r7
   19304:	andeq	sl, r1, r4, asr r7
   19308:	andeq	sl, r1, r4, asr r7
   1930c:	andeq	sl, r1, r4, asr r7
   19310:	andeq	sl, r1, r4, asr r7
   19314:	andeq	sl, r1, r4, asr r7
   19318:	andeq	sl, r1, r4, asr r7
   1931c:	andeq	sl, r1, r4, asr r7
   19320:	andeq	sl, r1, r4, asr r7
   19324:	andeq	sl, r1, r4, asr r7
   19328:	andeq	sl, r1, r4, asr r7
   1932c:	andeq	sl, r1, r4, asr r7
   19330:	andeq	sl, r1, r4, asr r7
   19334:	andeq	sl, r1, r4, asr r7
   19338:	andeq	sl, r1, r4, asr r7
   1933c:	andeq	r9, r1, ip, ror #21
   19340:	andeq	r9, r1, r0, ror #21
   19344:	andeq	r9, r1, r0, ror #21
   19348:	ldrdeq	r9, [r1], -r4
   1934c:	andeq	r9, r1, r0, ror #21
   19350:			; <UNDEFINED> instruction: 0x00019bb8
   19354:	andeq	r9, r1, r0, ror #21
   19358:	andeq	r9, r1, r8, lsr #24
   1935c:	andeq	r9, r1, r0, ror #21
   19360:	andeq	r9, r1, r0, ror #21
   19364:	andeq	r9, r1, r0, ror #21
   19368:			; <UNDEFINED> instruction: 0x00019bb8
   1936c:			; <UNDEFINED> instruction: 0x00019bb8
   19370:			; <UNDEFINED> instruction: 0x00019bb8
   19374:			; <UNDEFINED> instruction: 0x00019bb8
   19378:			; <UNDEFINED> instruction: 0x00019bb8
   1937c:			; <UNDEFINED> instruction: 0x00019bb8
   19380:			; <UNDEFINED> instruction: 0x00019bb8
   19384:			; <UNDEFINED> instruction: 0x00019bb8
   19388:			; <UNDEFINED> instruction: 0x00019bb8
   1938c:			; <UNDEFINED> instruction: 0x00019bb8
   19390:			; <UNDEFINED> instruction: 0x00019bb8
   19394:			; <UNDEFINED> instruction: 0x00019bb8
   19398:			; <UNDEFINED> instruction: 0x00019bb8
   1939c:			; <UNDEFINED> instruction: 0x00019bb8
   193a0:			; <UNDEFINED> instruction: 0x00019bb8
   193a4:			; <UNDEFINED> instruction: 0x00019bb8
   193a8:	andeq	r9, r1, r0, ror #21
   193ac:	andeq	r9, r1, r0, ror #21
   193b0:	andeq	r9, r1, r0, ror #21
   193b4:	andeq	r9, r1, r0, ror #21
   193b8:	ldrdeq	r9, [r1], -r8
   193bc:	andeq	sl, r1, r4, asr r7
   193c0:			; <UNDEFINED> instruction: 0x00019bb8
   193c4:			; <UNDEFINED> instruction: 0x00019bb8
   193c8:			; <UNDEFINED> instruction: 0x00019bb8
   193cc:			; <UNDEFINED> instruction: 0x00019bb8
   193d0:			; <UNDEFINED> instruction: 0x00019bb8
   193d4:			; <UNDEFINED> instruction: 0x00019bb8
   193d8:			; <UNDEFINED> instruction: 0x00019bb8
   193dc:			; <UNDEFINED> instruction: 0x00019bb8
   193e0:			; <UNDEFINED> instruction: 0x00019bb8
   193e4:			; <UNDEFINED> instruction: 0x00019bb8
   193e8:			; <UNDEFINED> instruction: 0x00019bb8
   193ec:			; <UNDEFINED> instruction: 0x00019bb8
   193f0:			; <UNDEFINED> instruction: 0x00019bb8
   193f4:			; <UNDEFINED> instruction: 0x00019bb8
   193f8:			; <UNDEFINED> instruction: 0x00019bb8
   193fc:			; <UNDEFINED> instruction: 0x00019bb8
   19400:			; <UNDEFINED> instruction: 0x00019bb8
   19404:			; <UNDEFINED> instruction: 0x00019bb8
   19408:			; <UNDEFINED> instruction: 0x00019bb8
   1940c:			; <UNDEFINED> instruction: 0x00019bb8
   19410:			; <UNDEFINED> instruction: 0x00019bb8
   19414:			; <UNDEFINED> instruction: 0x00019bb8
   19418:			; <UNDEFINED> instruction: 0x00019bb8
   1941c:			; <UNDEFINED> instruction: 0x00019bb8
   19420:			; <UNDEFINED> instruction: 0x00019bb8
   19424:			; <UNDEFINED> instruction: 0x00019bb8
   19428:	andeq	r9, r1, r0, ror #21
   1942c:	andeq	r9, r1, ip, ror fp
   19430:			; <UNDEFINED> instruction: 0x00019bb8
   19434:	andeq	r9, r1, r0, ror #21
   19438:			; <UNDEFINED> instruction: 0x00019bb8
   1943c:	andeq	r9, r1, r0, ror #21
   19440:			; <UNDEFINED> instruction: 0x00019bb8
   19444:			; <UNDEFINED> instruction: 0x00019bb8
   19448:			; <UNDEFINED> instruction: 0x00019bb8
   1944c:			; <UNDEFINED> instruction: 0x00019bb8
   19450:			; <UNDEFINED> instruction: 0x00019bb8
   19454:			; <UNDEFINED> instruction: 0x00019bb8
   19458:			; <UNDEFINED> instruction: 0x00019bb8
   1945c:			; <UNDEFINED> instruction: 0x00019bb8
   19460:			; <UNDEFINED> instruction: 0x00019bb8
   19464:			; <UNDEFINED> instruction: 0x00019bb8
   19468:			; <UNDEFINED> instruction: 0x00019bb8
   1946c:			; <UNDEFINED> instruction: 0x00019bb8
   19470:			; <UNDEFINED> instruction: 0x00019bb8
   19474:			; <UNDEFINED> instruction: 0x00019bb8
   19478:			; <UNDEFINED> instruction: 0x00019bb8
   1947c:			; <UNDEFINED> instruction: 0x00019bb8
   19480:			; <UNDEFINED> instruction: 0x00019bb8
   19484:			; <UNDEFINED> instruction: 0x00019bb8
   19488:			; <UNDEFINED> instruction: 0x00019bb8
   1948c:			; <UNDEFINED> instruction: 0x00019bb8
   19490:			; <UNDEFINED> instruction: 0x00019bb8
   19494:			; <UNDEFINED> instruction: 0x00019bb8
   19498:			; <UNDEFINED> instruction: 0x00019bb8
   1949c:			; <UNDEFINED> instruction: 0x00019bb8
   194a0:			; <UNDEFINED> instruction: 0x00019bb8
   194a4:			; <UNDEFINED> instruction: 0x00019bb8
   194a8:	andeq	r9, r1, r8, lsl #21
   194ac:	andeq	r9, r1, r0, ror #21
   194b0:	andeq	r9, r1, r8, lsl #21
   194b4:	ldrdeq	r9, [r1], -r4
   194b8:	ldr	r3, [sp, #180]	; 0xb4
   194bc:	cmp	r4, #0
   194c0:	and	r3, r3, #1
   194c4:	str	r3, [sp, #92]	; 0x5c
   194c8:	ldr	r3, [sp, #180]	; 0xb4
   194cc:	and	r3, r3, #4
   194d0:	str	r3, [sp, #96]	; 0x60
   194d4:	moveq	r3, #1
   194d8:	streq	r3, [sp, #60]	; 0x3c
   194dc:	beq	19c6c <__assert_fail@plt+0x8858>
   194e0:	mov	r3, #0
   194e4:	mov	r2, #1
   194e8:	mov	r4, r3
   194ec:	mov	r9, r3
   194f0:	str	r2, [sp, #32]
   194f4:	str	r2, [sp, #44]	; 0x2c
   194f8:	str	r3, [sp, #48]	; 0x30
   194fc:	str	r2, [sp, #52]	; 0x34
   19500:	str	r2, [sp, #56]	; 0x38
   19504:	str	r3, [sp, #60]	; 0x3c
   19508:	str	r2, [sp, #64]	; 0x40
   1950c:	str	r2, [sp, #68]	; 0x44
   19510:	str	r3, [sp, #80]	; 0x50
   19514:	str	r3, [sp, #84]	; 0x54
   19518:	str	r3, [sp, #88]	; 0x58
   1951c:	movw	r3, #2392	; 0x958
   19520:	movt	r3, #2
   19524:	str	r3, [sp, #72]	; 0x48
   19528:	mov	r3, #2
   1952c:	str	r3, [sp, #176]	; 0xb0
   19530:	b	19204 <__assert_fail@plt+0x7df0>
   19534:	ldr	r3, [sp, #180]	; 0xb4
   19538:	cmp	r4, #0
   1953c:	and	r3, r3, #1
   19540:	str	r3, [sp, #92]	; 0x5c
   19544:	ldr	r3, [sp, #180]	; 0xb4
   19548:	and	r3, r3, #4
   1954c:	str	r3, [sp, #96]	; 0x60
   19550:	bne	1a924 <__assert_fail@plt+0x9510>
   19554:	cmp	sl, #0
   19558:	beq	1a6d0 <__assert_fail@plt+0x92bc>
   1955c:	mov	r3, #34	; 0x22
   19560:	mov	r2, r4
   19564:	mov	r1, #1
   19568:	mov	r9, r2
   1956c:	strb	r3, [fp]
   19570:	movw	r3, #2372	; 0x944
   19574:	movt	r3, #2
   19578:	mov	r4, r1
   1957c:	str	r1, [sp, #32]
   19580:	str	r2, [sp, #44]	; 0x2c
   19584:	str	r1, [sp, #48]	; 0x30
   19588:	str	r2, [sp, #52]	; 0x34
   1958c:	str	r1, [sp, #56]	; 0x38
   19590:	str	r1, [sp, #60]	; 0x3c
   19594:	str	r2, [sp, #64]	; 0x40
   19598:	str	r2, [sp, #68]	; 0x44
   1959c:	str	r3, [sp, #72]	; 0x48
   195a0:	str	r2, [sp, #80]	; 0x50
   195a4:	str	r2, [sp, #84]	; 0x54
   195a8:	str	r2, [sp, #88]	; 0x58
   195ac:	b	19204 <__assert_fail@plt+0x7df0>
   195b0:	mov	r3, #0
   195b4:	mov	r2, #1
   195b8:	mov	r9, r3
   195bc:	str	r2, [sp, #32]
   195c0:	str	r3, [sp, #44]	; 0x2c
   195c4:	str	r3, [sp, #48]	; 0x30
   195c8:	str	r3, [sp, #52]	; 0x34
   195cc:	str	r3, [sp, #60]	; 0x3c
   195d0:	strd	r2, [sp, #64]	; 0x40
   195d4:	str	r3, [sp, #72]	; 0x48
   195d8:	str	r3, [sp, #80]	; 0x50
   195dc:	str	r3, [sp, #88]	; 0x58
   195e0:	ldr	r3, [sp, #180]	; 0xb4
   195e4:	and	r3, r3, r2
   195e8:	str	r3, [sp, #92]	; 0x5c
   195ec:	ldr	r3, [sp, #180]	; 0xb4
   195f0:	and	r3, r3, #4
   195f4:	str	r3, [sp, #96]	; 0x60
   195f8:	ldr	r3, [sp, #176]	; 0xb0
   195fc:	mov	r4, r3
   19600:	str	r3, [sp, #56]	; 0x38
   19604:	str	r3, [sp, #84]	; 0x54
   19608:	b	19204 <__assert_fail@plt+0x7df0>
   1960c:	mov	r3, #1
   19610:	mov	r4, #0
   19614:	mov	r9, r4
   19618:	str	r3, [sp, #32]
   1961c:	str	r3, [sp, #44]	; 0x2c
   19620:	str	r3, [sp, #48]	; 0x30
   19624:	str	r4, [sp, #52]	; 0x34
   19628:	str	r3, [sp, #56]	; 0x38
   1962c:	str	r3, [sp, #60]	; 0x3c
   19630:	str	r3, [sp, #88]	; 0x58
   19634:	movw	r3, #2372	; 0x944
   19638:	movt	r3, #2
   1963c:	str	r4, [sp, #64]	; 0x40
   19640:	str	r4, [sp, #68]	; 0x44
   19644:	str	r3, [sp, #72]	; 0x48
   19648:	ldr	r3, [sp, #180]	; 0xb4
   1964c:	str	r4, [sp, #80]	; 0x50
   19650:	str	r4, [sp, #84]	; 0x54
   19654:	and	r3, r3, #1
   19658:	str	r3, [sp, #92]	; 0x5c
   1965c:	ldr	r3, [sp, #180]	; 0xb4
   19660:	and	r3, r3, #4
   19664:	str	r3, [sp, #96]	; 0x60
   19668:	mov	r3, #5
   1966c:	str	r3, [sp, #176]	; 0xb0
   19670:	b	19204 <__assert_fail@plt+0x7df0>
   19674:	mov	r3, #1
   19678:	mov	r4, #0
   1967c:	mov	r9, r4
   19680:	str	r3, [sp, #32]
   19684:	str	r4, [sp, #44]	; 0x2c
   19688:	str	r3, [sp, #48]	; 0x30
   1968c:	str	r3, [sp, #60]	; 0x3c
   19690:	ldr	r3, [sp, #180]	; 0xb4
   19694:	str	r4, [sp, #52]	; 0x34
   19698:	str	r4, [sp, #56]	; 0x38
   1969c:	str	r4, [sp, #64]	; 0x40
   196a0:	str	r4, [sp, #68]	; 0x44
   196a4:	and	r3, r3, #1
   196a8:	str	r4, [sp, #72]	; 0x48
   196ac:	str	r4, [sp, #80]	; 0x50
   196b0:	str	r4, [sp, #84]	; 0x54
   196b4:	str	r3, [sp, #92]	; 0x5c
   196b8:	ldr	r3, [sp, #180]	; 0xb4
   196bc:	str	r4, [sp, #88]	; 0x58
   196c0:	and	r3, r3, #4
   196c4:	str	r3, [sp, #96]	; 0x60
   196c8:	b	19204 <__assert_fail@plt+0x7df0>
   196cc:	mov	r3, #0
   196d0:	mov	r2, #1
   196d4:	ldr	r1, [sp, #176]	; 0xb0
   196d8:	mov	r4, r3
   196dc:	mov	r9, r3
   196e0:	movw	r3, #2392	; 0x958
   196e4:	movt	r3, #2
   196e8:	str	r2, [sp, #32]
   196ec:	str	r2, [sp, #44]	; 0x2c
   196f0:	str	r4, [sp, #48]	; 0x30
   196f4:	strd	r2, [sp, #68]	; 0x44
   196f8:	ldr	r3, [sp, #180]	; 0xb4
   196fc:	str	r2, [sp, #52]	; 0x34
   19700:	str	r1, [sp, #56]	; 0x38
   19704:	str	r4, [sp, #60]	; 0x3c
   19708:	str	r2, [sp, #64]	; 0x40
   1970c:	and	r3, r3, r2
   19710:	str	r4, [sp, #80]	; 0x50
   19714:	str	r4, [sp, #84]	; 0x54
   19718:	str	r4, [sp, #88]	; 0x58
   1971c:	str	r3, [sp, #92]	; 0x5c
   19720:	ldr	r3, [sp, #180]	; 0xb4
   19724:	and	r3, r3, #4
   19728:	str	r3, [sp, #96]	; 0x60
   1972c:	mov	r3, #2
   19730:	str	r3, [sp, #176]	; 0xb0
   19734:	b	19204 <__assert_fail@plt+0x7df0>
   19738:	mov	r3, #1
   1973c:	mov	r2, #0
   19740:	mov	r4, r2
   19744:	mov	r9, r2
   19748:	str	r3, [sp, #32]
   1974c:	str	r3, [sp, #44]	; 0x2c
   19750:	str	r2, [sp, #48]	; 0x30
   19754:	str	r3, [sp, #52]	; 0x34
   19758:	str	r3, [sp, #56]	; 0x38
   1975c:	str	r3, [sp, #60]	; 0x3c
   19760:	str	r3, [sp, #64]	; 0x40
   19764:	str	r3, [sp, #68]	; 0x44
   19768:	str	r3, [sp, #88]	; 0x58
   1976c:	movw	r3, #2392	; 0x958
   19770:	movt	r3, #2
   19774:	str	r3, [sp, #72]	; 0x48
   19778:	ldr	r3, [sp, #180]	; 0xb4
   1977c:	str	r2, [sp, #80]	; 0x50
   19780:	str	r2, [sp, #84]	; 0x54
   19784:	and	r3, r3, #1
   19788:	b	1971c <__assert_fail@plt+0x8308>
   1978c:	mov	r5, #102	; 0x66
   19790:	mov	r6, #0
   19794:	ldr	r3, [sp, #44]	; 0x2c
   19798:	cmp	r3, #0
   1979c:	bne	1a64c <__assert_fail@plt+0x9238>
   197a0:	ldr	r2, [sp, #52]	; 0x34
   197a4:	eor	r3, fp, #1
   197a8:	ands	r3, r2, r3
   197ac:	beq	197e4 <__assert_fail@plt+0x83d0>
   197b0:	cmp	sl, r4
   197b4:	mov	fp, r3
   197b8:	movhi	r2, #39	; 0x27
   197bc:	strbhi	r2, [r9, r4]
   197c0:	add	r2, r4, #1
   197c4:	cmp	sl, r2
   197c8:	movhi	r1, #36	; 0x24
   197cc:	strbhi	r1, [r9, r2]
   197d0:	add	r2, r4, #2
   197d4:	add	r4, r4, #3
   197d8:	cmp	sl, r2
   197dc:	movhi	r1, #39	; 0x27
   197e0:	strbhi	r1, [r9, r2]
   197e4:	cmp	sl, r4
   197e8:	add	r7, r7, #1
   197ec:	movhi	r3, #92	; 0x5c
   197f0:	strbhi	r3, [r9, r4]
   197f4:	add	r4, r4, #1
   197f8:	cmp	r4, sl
   197fc:	ldr	r3, [sp, #32]
   19800:	strbcc	r5, [r9, r4]
   19804:	cmp	r6, #0
   19808:	add	r4, r4, #1
   1980c:	moveq	r3, #0
   19810:	cmn	r8, #1
   19814:	str	r3, [sp, #32]
   19818:	bne	1921c <__assert_fail@plt+0x7e08>
   1981c:	ldr	r3, [sp, #28]
   19820:	ldrb	r6, [r3, r7]
   19824:	adds	r6, r6, #0
   19828:	movne	r6, #1
   1982c:	cmp	r6, #0
   19830:	bne	1922c <__assert_fail@plt+0x7e18>
   19834:	mov	r3, r9
   19838:	mov	r9, fp
   1983c:	mov	fp, r3
   19840:	ldr	r3, [sp, #68]	; 0x44
   19844:	cmp	r4, #0
   19848:	movne	r3, #0
   1984c:	cmp	r3, #0
   19850:	bne	1aa44 <__assert_fail@plt+0x9630>
   19854:	ldr	r3, [sp, #44]	; 0x2c
   19858:	ldr	r2, [sp, #52]	; 0x34
   1985c:	eor	r3, r3, #1
   19860:	ands	r2, r3, r2
   19864:	beq	1a97c <__assert_fail@plt+0x9568>
   19868:	ldr	r3, [sp, #80]	; 0x50
   1986c:	cmp	r3, #0
   19870:	beq	1a980 <__assert_fail@plt+0x956c>
   19874:	ldr	r3, [sp, #32]
   19878:	cmp	r3, #0
   1987c:	bne	1a9f4 <__assert_fail@plt+0x95e0>
   19880:	ldr	r3, [sp, #84]	; 0x54
   19884:	adds	r3, r3, #0
   19888:	movne	r3, #1
   1988c:	cmp	sl, #0
   19890:	movne	r3, #0
   19894:	cmp	r3, #0
   19898:	ldreq	r2, [sp, #80]	; 0x50
   1989c:	beq	1a980 <__assert_fail@plt+0x956c>
   198a0:	ldr	r2, [sp, #84]	; 0x54
   198a4:	mov	sl, r2
   198a8:	mov	r0, #0
   198ac:	mov	r4, #1
   198b0:	mov	r1, #39	; 0x27
   198b4:	str	r0, [sp, #44]	; 0x2c
   198b8:	strb	r1, [fp]
   198bc:	str	r0, [sp, #48]	; 0x30
   198c0:	str	r4, [sp, #52]	; 0x34
   198c4:	str	r4, [sp, #56]	; 0x38
   198c8:	str	r4, [sp, #64]	; 0x40
   198cc:	str	r0, [sp, #68]	; 0x44
   198d0:	str	r3, [sp, #80]	; 0x50
   198d4:	str	r2, [sp, #84]	; 0x54
   198d8:	str	r0, [sp, #88]	; 0x58
   198dc:	b	1951c <__assert_fail@plt+0x8108>
   198e0:	mov	r5, #98	; 0x62
   198e4:	b	19790 <__assert_fail@plt+0x837c>
   198e8:	mov	r5, #97	; 0x61
   198ec:	b	19790 <__assert_fail@plt+0x837c>
   198f0:	ldr	r3, [sp, #48]	; 0x30
   198f4:	str	r3, [sp, #40]	; 0x28
   198f8:	mov	r3, #116	; 0x74
   198fc:	ldr	r2, [sp, #68]	; 0x44
   19900:	cmp	r2, #0
   19904:	bne	19b00 <__assert_fail@plt+0x86ec>
   19908:	ldr	r2, [sp, #60]	; 0x3c
   1990c:	cmp	r2, #0
   19910:	bne	19a5c <__assert_fail@plt+0x8648>
   19914:	ldr	r3, [sp, #44]	; 0x2c
   19918:	mov	r6, #0
   1991c:	cmp	r3, #0
   19920:	beq	19acc <__assert_fail@plt+0x86b8>
   19924:	mov	r3, fp
   19928:	ldr	r2, [sp, #184]	; 0xb8
   1992c:	cmp	r2, #0
   19930:	beq	19950 <__assert_fail@plt+0x853c>
   19934:	ubfx	r1, r5, #5, #8
   19938:	mov	r0, r2
   1993c:	and	r2, r5, #31
   19940:	ldr	r1, [r0, r1, lsl #2]
   19944:	lsr	r2, r1, r2
   19948:	tst	r2, #1
   1994c:	bne	19794 <__assert_fail@plt+0x8380>
   19950:	ldr	r2, [sp, #40]	; 0x28
   19954:	cmp	r2, #0
   19958:	addeq	r7, r7, #1
   1995c:	bne	19794 <__assert_fail@plt+0x8380>
   19960:	cmp	r3, #0
   19964:	beq	197f8 <__assert_fail@plt+0x83e4>
   19968:	cmp	sl, r4
   1996c:	mov	fp, #0
   19970:	movhi	r3, #39	; 0x27
   19974:	strbhi	r3, [r9, r4]
   19978:	add	r3, r4, #1
   1997c:	add	r4, r4, #2
   19980:	cmp	sl, r3
   19984:	movhi	r2, #39	; 0x27
   19988:	strbhi	r2, [r9, r3]
   1998c:	b	197f8 <__assert_fail@plt+0x83e4>
   19990:	ldr	r3, [sp, #48]	; 0x30
   19994:	str	r3, [sp, #40]	; 0x28
   19998:	eor	r3, fp, #1
   1999c:	ldr	r2, [sp, #52]	; 0x34
   199a0:	ands	r2, r2, r3
   199a4:	beq	1a664 <__assert_fail@plt+0x9250>
   199a8:	cmp	sl, r4
   199ac:	movhi	r3, #39	; 0x27
   199b0:	strbhi	r3, [r9, r4]
   199b4:	add	r3, r4, #1
   199b8:	cmp	sl, r3
   199bc:	movhi	r1, #36	; 0x24
   199c0:	strbhi	r1, [r9, r3]
   199c4:	add	r3, r4, #2
   199c8:	cmp	sl, r3
   199cc:	movhi	r1, #39	; 0x27
   199d0:	strbhi	r1, [r9, r3]
   199d4:	add	r3, r4, #3
   199d8:	cmp	sl, r3
   199dc:	bls	1a6b0 <__assert_fail@plt+0x929c>
   199e0:	mov	r4, r3
   199e4:	mov	r3, #92	; 0x5c
   199e8:	mov	fp, r2
   199ec:	mov	r2, r4
   199f0:	strb	r3, [r9, r4]
   199f4:	ldr	r3, [sp, #176]	; 0xb0
   199f8:	add	r4, r4, #1
   199fc:	cmp	r3, #2
   19a00:	beq	1a718 <__assert_fail@plt+0x9304>
   19a04:	add	r3, r7, #1
   19a08:	cmp	r3, r8
   19a0c:	bcs	19a24 <__assert_fail@plt+0x8610>
   19a10:	ldr	r1, [sp, #28]
   19a14:	ldrb	r3, [r1, r3]
   19a18:	sub	r3, r3, #48	; 0x30
   19a1c:	cmp	r3, #9
   19a20:	bls	1a728 <__assert_fail@plt+0x9314>
   19a24:	mov	r3, #0
   19a28:	mov	r5, #48	; 0x30
   19a2c:	ldr	r6, [sp, #64]	; 0x40
   19a30:	cmp	r6, #0
   19a34:	beq	19928 <__assert_fail@plt+0x8514>
   19a38:	mov	r6, #0
   19a3c:	b	19950 <__assert_fail@plt+0x853c>
   19a40:	ldr	r3, [sp, #48]	; 0x30
   19a44:	str	r3, [sp, #40]	; 0x28
   19a48:	ldr	r2, [sp, #60]	; 0x3c
   19a4c:	mov	r5, #13
   19a50:	mov	r3, #114	; 0x72
   19a54:	cmp	r2, #0
   19a58:	beq	19914 <__assert_fail@plt+0x8500>
   19a5c:	mov	r5, r3
   19a60:	b	19790 <__assert_fail@plt+0x837c>
   19a64:	ldr	r3, [sp, #48]	; 0x30
   19a68:	str	r3, [sp, #40]	; 0x28
   19a6c:	mov	r3, #118	; 0x76
   19a70:	b	19908 <__assert_fail@plt+0x84f4>
   19a74:	ldr	r3, [sp, #48]	; 0x30
   19a78:	str	r3, [sp, #40]	; 0x28
   19a7c:	mov	r5, #10
   19a80:	mov	r3, #110	; 0x6e
   19a84:	b	19908 <__assert_fail@plt+0x84f4>
   19a88:	ldr	r3, [sp, #48]	; 0x30
   19a8c:	cmn	r8, #1
   19a90:	str	r3, [sp, #40]	; 0x28
   19a94:	beq	19edc <__assert_fail@plt+0x8ac8>
   19a98:	subs	r3, r8, #1
   19a9c:	movne	r3, #1
   19aa0:	cmp	r3, #0
   19aa4:	bne	19ab0 <__assert_fail@plt+0x869c>
   19aa8:	cmp	r7, #0
   19aac:	beq	19af4 <__assert_fail@plt+0x86e0>
   19ab0:	mov	r6, #0
   19ab4:	ldr	r3, [sp, #64]	; 0x40
   19ab8:	cmp	r3, #0
   19abc:	beq	19924 <__assert_fail@plt+0x8510>
   19ac0:	ldr	r3, [sp, #44]	; 0x2c
   19ac4:	cmp	r3, #0
   19ac8:	bne	19924 <__assert_fail@plt+0x8510>
   19acc:	mov	r3, fp
   19ad0:	b	19950 <__assert_fail@plt+0x853c>
   19ad4:	ldr	r3, [sp, #48]	; 0x30
   19ad8:	str	r3, [sp, #40]	; 0x28
   19adc:	b	19aa8 <__assert_fail@plt+0x8694>
   19ae0:	ldr	r3, [sp, #48]	; 0x30
   19ae4:	str	r3, [sp, #40]	; 0x28
   19ae8:	b	19ab0 <__assert_fail@plt+0x869c>
   19aec:	ldr	r6, [sp, #48]	; 0x30
   19af0:	str	r6, [sp, #40]	; 0x28
   19af4:	ldr	r3, [sp, #68]	; 0x44
   19af8:	cmp	r3, #0
   19afc:	beq	19ab4 <__assert_fail@plt+0x86a0>
   19b00:	mov	r3, #2
   19b04:	mov	fp, r9
   19b08:	str	r3, [sp, #176]	; 0xb0
   19b0c:	ldr	r3, [sp, #60]	; 0x3c
   19b10:	cmp	r3, #0
   19b14:	ldr	r3, [sp, #176]	; 0xb0
   19b18:	movne	r3, #4
   19b1c:	str	r3, [sp, #176]	; 0xb0
   19b20:	mov	lr, #0
   19b24:	mov	r0, fp
   19b28:	ldr	r2, [sp, #28]
   19b2c:	ldr	r3, [sp, #180]	; 0xb4
   19b30:	ldr	r1, [sp, #188]	; 0xbc
   19b34:	bic	ip, r3, #2
   19b38:	ldr	r3, [sp, #176]	; 0xb0
   19b3c:	stm	sp, {r3, ip, lr}
   19b40:	mov	r3, r8
   19b44:	ldr	ip, [sp, #192]	; 0xc0
   19b48:	str	r1, [sp, #12]
   19b4c:	mov	r1, sl
   19b50:	str	ip, [sp, #16]
   19b54:	bl	190e0 <__assert_fail@plt+0x7ccc>
   19b58:	mov	r4, r0
   19b5c:	mov	r0, r4
   19b60:	add	sp, sp, #140	; 0x8c
   19b64:	ldrd	r4, [sp]
   19b68:	ldrd	r6, [sp, #8]
   19b6c:	ldrd	r8, [sp, #16]
   19b70:	ldrd	sl, [sp, #24]
   19b74:	add	sp, sp, #32
   19b78:	pop	{pc}		; (ldr pc, [sp], #4)
   19b7c:	ldr	r3, [sp, #48]	; 0x30
   19b80:	str	r3, [sp, #40]	; 0x28
   19b84:	ldr	r3, [sp, #176]	; 0xb0
   19b88:	cmp	r3, #2
   19b8c:	beq	19f04 <__assert_fail@plt+0x8af0>
   19b90:	ldr	r3, [sp, #88]	; 0x58
   19b94:	cmp	r3, #0
   19b98:	moveq	r5, #92	; 0x5c
   19b9c:	moveq	r3, r5
   19ba0:	beq	19908 <__assert_fail@plt+0x84f4>
   19ba4:	add	r7, r7, #1
   19ba8:	mov	r3, fp
   19bac:	mov	r6, #0
   19bb0:	mov	r5, #92	; 0x5c
   19bb4:	b	19960 <__assert_fail@plt+0x854c>
   19bb8:	ldr	r3, [sp, #64]	; 0x40
   19bbc:	cmp	r3, #0
   19bc0:	bne	1aa38 <__assert_fail@plt+0x9624>
   19bc4:	ldr	r2, [sp, #48]	; 0x30
   19bc8:	mov	r3, fp
   19bcc:	mov	r6, r2
   19bd0:	str	r2, [sp, #40]	; 0x28
   19bd4:	b	19928 <__assert_fail@plt+0x8514>
   19bd8:	ldr	r3, [sp, #176]	; 0xb0
   19bdc:	cmp	r3, #2
   19be0:	beq	1a974 <__assert_fail@plt+0x9560>
   19be4:	cmp	r3, #5
   19be8:	ldr	r3, [sp, #48]	; 0x30
   19bec:	str	r3, [sp, #40]	; 0x28
   19bf0:	bne	19c1c <__assert_fail@plt+0x8808>
   19bf4:	ldr	r3, [sp, #96]	; 0x60
   19bf8:	cmp	r3, #0
   19bfc:	beq	1a678 <__assert_fail@plt+0x9264>
   19c00:	add	r3, r7, #2
   19c04:	cmp	r3, r8
   19c08:	bcs	19c1c <__assert_fail@plt+0x8808>
   19c0c:	ldr	r2, [sp, #36]	; 0x24
   19c10:	ldrb	r5, [r2, #1]
   19c14:	cmp	r5, #63	; 0x3f
   19c18:	beq	1a760 <__assert_fail@plt+0x934c>
   19c1c:	mov	r6, #0
   19c20:	mov	r5, #63	; 0x3f
   19c24:	b	19ab4 <__assert_fail@plt+0x86a0>
   19c28:	ldr	r3, [sp, #176]	; 0xb0
   19c2c:	cmp	r3, #2
   19c30:	ldr	r3, [sp, #48]	; 0x30
   19c34:	beq	1a41c <__assert_fail@plt+0x9008>
   19c38:	mov	r5, #39	; 0x27
   19c3c:	str	r3, [sp, #40]	; 0x28
   19c40:	str	r6, [sp, #80]	; 0x50
   19c44:	b	19ab4 <__assert_fail@plt+0x86a0>
   19c48:	ldr	r3, [sp, #180]	; 0xb4
   19c4c:	cmp	r4, #0
   19c50:	and	r3, r3, #1
   19c54:	str	r3, [sp, #92]	; 0x5c
   19c58:	ldr	r3, [sp, #180]	; 0xb4
   19c5c:	and	r3, r3, #4
   19c60:	str	r3, [sp, #96]	; 0x60
   19c64:	bne	1aa84 <__assert_fail@plt+0x9670>
   19c68:	str	r4, [sp, #60]	; 0x3c
   19c6c:	cmp	sl, #0
   19c70:	bne	1aa68 <__assert_fail@plt+0x9654>
   19c74:	mov	r3, #1
   19c78:	movw	r2, #2392	; 0x958
   19c7c:	movt	r2, #2
   19c80:	mov	r4, r3
   19c84:	mov	r3, #2
   19c88:	mov	r9, sl
   19c8c:	str	r4, [sp, #32]
   19c90:	str	sl, [sp, #44]	; 0x2c
   19c94:	str	sl, [sp, #48]	; 0x30
   19c98:	str	r4, [sp, #52]	; 0x34
   19c9c:	str	r4, [sp, #56]	; 0x38
   19ca0:	str	r4, [sp, #64]	; 0x40
   19ca4:	str	sl, [sp, #68]	; 0x44
   19ca8:	str	r2, [sp, #72]	; 0x48
   19cac:	str	sl, [sp, #80]	; 0x50
   19cb0:	str	sl, [sp, #84]	; 0x54
   19cb4:	str	sl, [sp, #88]	; 0x58
   19cb8:	str	r3, [sp, #176]	; 0xb0
   19cbc:	b	19204 <__assert_fail@plt+0x7df0>
   19cc0:	ldrb	r5, [r0, r7]
   19cc4:	cmp	r5, #126	; 0x7e
   19cc8:	ldrls	pc, [pc, r5, lsl #2]
   19ccc:	b	1a030 <__assert_fail@plt+0x8c1c>
   19cd0:	strdeq	r9, [r1], -ip
   19cd4:	andeq	sl, r1, r0, lsr r0
   19cd8:	andeq	sl, r1, r0, lsr r0
   19cdc:	andeq	sl, r1, r0, lsr r0
   19ce0:	andeq	sl, r1, r0, lsr r0
   19ce4:	andeq	sl, r1, r0, lsr r0
   19ce8:	andeq	sl, r1, r0, lsr r0
   19cec:	andeq	r9, r1, ip, ror #31
   19cf0:	ldrdeq	r9, [r1], -ip
   19cf4:	andeq	r9, r1, r0, ror #30
   19cf8:	andeq	r9, r1, ip, asr #31
   19cfc:	andeq	r9, r1, r0, asr #30
   19d00:	andeq	sl, r1, r0, lsr #32
   19d04:	andeq	r9, r1, ip, lsr #31
   19d08:	andeq	sl, r1, r0, lsr r0
   19d0c:	andeq	sl, r1, r0, lsr r0
   19d10:	andeq	sl, r1, r0, lsr r0
   19d14:	andeq	sl, r1, r0, lsr r0
   19d18:	andeq	sl, r1, r0, lsr r0
   19d1c:	andeq	sl, r1, r0, lsr r0
   19d20:	andeq	sl, r1, r0, lsr r0
   19d24:	andeq	sl, r1, r0, lsr r0
   19d28:	andeq	sl, r1, r0, lsr r0
   19d2c:	andeq	sl, r1, r0, lsr r0
   19d30:	andeq	sl, r1, r0, lsr r0
   19d34:	andeq	sl, r1, r0, lsr r0
   19d38:	andeq	sl, r1, r0, lsr r0
   19d3c:	andeq	sl, r1, r0, lsr r0
   19d40:	andeq	sl, r1, r0, lsr r0
   19d44:	andeq	sl, r1, r0, lsr r0
   19d48:	andeq	sl, r1, r0, lsr r0
   19d4c:	andeq	sl, r1, r0, lsr r0
   19d50:	andeq	r9, r1, r4, asr pc
   19d54:			; <UNDEFINED> instruction: 0x00019fbc
   19d58:			; <UNDEFINED> instruction: 0x00019fbc
   19d5c:	andeq	r9, r1, r4, lsr pc
   19d60:			; <UNDEFINED> instruction: 0x00019fbc
   19d64:	andeq	r9, r1, r8, lsr #30
   19d68:			; <UNDEFINED> instruction: 0x00019fbc
   19d6c:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   19d70:			; <UNDEFINED> instruction: 0x00019fbc
   19d74:			; <UNDEFINED> instruction: 0x00019fbc
   19d78:			; <UNDEFINED> instruction: 0x00019fbc
   19d7c:	andeq	r9, r1, r8, lsr #30
   19d80:	andeq	r9, r1, r8, lsr #30
   19d84:	andeq	r9, r1, r8, lsr #30
   19d88:	andeq	r9, r1, r8, lsr #30
   19d8c:	andeq	r9, r1, r8, lsr #30
   19d90:	andeq	r9, r1, r8, lsr #30
   19d94:	andeq	r9, r1, r8, lsr #30
   19d98:	andeq	r9, r1, r8, lsr #30
   19d9c:	andeq	r9, r1, r8, lsr #30
   19da0:	andeq	r9, r1, r8, lsr #30
   19da4:	andeq	r9, r1, r8, lsr #30
   19da8:	andeq	r9, r1, r8, lsr #30
   19dac:	andeq	r9, r1, r8, lsr #30
   19db0:	andeq	r9, r1, r8, lsr #30
   19db4:	andeq	r9, r1, r8, lsr #30
   19db8:	andeq	r9, r1, r8, lsr #30
   19dbc:			; <UNDEFINED> instruction: 0x00019fbc
   19dc0:			; <UNDEFINED> instruction: 0x00019fbc
   19dc4:			; <UNDEFINED> instruction: 0x00019fbc
   19dc8:			; <UNDEFINED> instruction: 0x00019fbc
   19dcc:	andeq	r9, r1, r0, ror pc
   19dd0:	andeq	sl, r1, r0, lsr r0
   19dd4:	andeq	r9, r1, r8, lsr #30
   19dd8:	andeq	r9, r1, r8, lsr #30
   19ddc:	andeq	r9, r1, r8, lsr #30
   19de0:	andeq	r9, r1, r8, lsr #30
   19de4:	andeq	r9, r1, r8, lsr #30
   19de8:	andeq	r9, r1, r8, lsr #30
   19dec:	andeq	r9, r1, r8, lsr #30
   19df0:	andeq	r9, r1, r8, lsr #30
   19df4:	andeq	r9, r1, r8, lsr #30
   19df8:	andeq	r9, r1, r8, lsr #30
   19dfc:	andeq	r9, r1, r8, lsr #30
   19e00:	andeq	r9, r1, r8, lsr #30
   19e04:	andeq	r9, r1, r8, lsr #30
   19e08:	andeq	r9, r1, r8, lsr #30
   19e0c:	andeq	r9, r1, r8, lsr #30
   19e10:	andeq	r9, r1, r8, lsr #30
   19e14:	andeq	r9, r1, r8, lsr #30
   19e18:	andeq	r9, r1, r8, lsr #30
   19e1c:	andeq	r9, r1, r8, lsr #30
   19e20:	andeq	r9, r1, r8, lsr #30
   19e24:	andeq	r9, r1, r8, lsr #30
   19e28:	andeq	r9, r1, r8, lsr #30
   19e2c:	andeq	r9, r1, r8, lsr #30
   19e30:	andeq	r9, r1, r8, lsr #30
   19e34:	andeq	r9, r1, r8, lsr #30
   19e38:	andeq	r9, r1, r8, lsr #30
   19e3c:			; <UNDEFINED> instruction: 0x00019fbc
   19e40:	strdeq	r9, [r1], -r0
   19e44:	andeq	r9, r1, r8, lsr #30
   19e48:			; <UNDEFINED> instruction: 0x00019fbc
   19e4c:	andeq	r9, r1, r8, lsr #30
   19e50:			; <UNDEFINED> instruction: 0x00019fbc
   19e54:	andeq	r9, r1, r8, lsr #30
   19e58:	andeq	r9, r1, r8, lsr #30
   19e5c:	andeq	r9, r1, r8, lsr #30
   19e60:	andeq	r9, r1, r8, lsr #30
   19e64:	andeq	r9, r1, r8, lsr #30
   19e68:	andeq	r9, r1, r8, lsr #30
   19e6c:	andeq	r9, r1, r8, lsr #30
   19e70:	andeq	r9, r1, r8, lsr #30
   19e74:	andeq	r9, r1, r8, lsr #30
   19e78:	andeq	r9, r1, r8, lsr #30
   19e7c:	andeq	r9, r1, r8, lsr #30
   19e80:	andeq	r9, r1, r8, lsr #30
   19e84:	andeq	r9, r1, r8, lsr #30
   19e88:	andeq	r9, r1, r8, lsr #30
   19e8c:	andeq	r9, r1, r8, lsr #30
   19e90:	andeq	r9, r1, r8, lsr #30
   19e94:	andeq	r9, r1, r8, lsr #30
   19e98:	andeq	r9, r1, r8, lsr #30
   19e9c:	andeq	r9, r1, r8, lsr #30
   19ea0:	andeq	r9, r1, r8, lsr #30
   19ea4:	andeq	r9, r1, r8, lsr #30
   19ea8:	andeq	r9, r1, r8, lsr #30
   19eac:	andeq	r9, r1, r8, lsr #30
   19eb0:	andeq	r9, r1, r8, lsr #30
   19eb4:	andeq	r9, r1, r8, lsr #30
   19eb8:	andeq	r9, r1, r8, lsr #30
   19ebc:	andeq	r9, r1, ip, asr #29
   19ec0:			; <UNDEFINED> instruction: 0x00019fbc
   19ec4:	andeq	r9, r1, ip, asr #29
   19ec8:	andeq	r9, r1, r4, lsr pc
   19ecc:	mov	r3, #0
   19ed0:	cmn	r8, #1
   19ed4:	str	r3, [sp, #40]	; 0x28
   19ed8:	bne	19a98 <__assert_fail@plt+0x8684>
   19edc:	ldr	r3, [sp, #28]
   19ee0:	ldrb	r3, [r3, #1]
   19ee4:	adds	r3, r3, #0
   19ee8:	movne	r3, #1
   19eec:	b	19aa0 <__assert_fail@plt+0x868c>
   19ef0:	mov	r3, #0
   19ef4:	str	r3, [sp, #40]	; 0x28
   19ef8:	ldr	r3, [sp, #176]	; 0xb0
   19efc:	cmp	r3, #2
   19f00:	bne	19b90 <__assert_fail@plt+0x877c>
   19f04:	ldr	r3, [sp, #44]	; 0x2c
   19f08:	cmp	r3, #0
   19f0c:	bne	1a84c <__assert_fail@plt+0x9438>
   19f10:	mov	r6, r3
   19f14:	add	r7, r7, #1
   19f18:	mov	r3, fp
   19f1c:	mov	r5, #92	; 0x5c
   19f20:	b	19960 <__assert_fail@plt+0x854c>
   19f24:	ldr	r6, [sp, #48]	; 0x30
   19f28:	mov	r3, #0
   19f2c:	str	r3, [sp, #40]	; 0x28
   19f30:	b	19ab4 <__assert_fail@plt+0x86a0>
   19f34:	mov	r3, #0
   19f38:	str	r3, [sp, #40]	; 0x28
   19f3c:	b	19aa8 <__assert_fail@plt+0x8694>
   19f40:	mov	r3, #0
   19f44:	str	r3, [sp, #40]	; 0x28
   19f48:	mov	r3, #118	; 0x76
   19f4c:	b	19908 <__assert_fail@plt+0x84f4>
   19f50:	ldr	r6, [sp, #48]	; 0x30
   19f54:	mov	r3, #0
   19f58:	str	r3, [sp, #40]	; 0x28
   19f5c:	b	19af4 <__assert_fail@plt+0x86e0>
   19f60:	mov	r3, #0
   19f64:	str	r3, [sp, #40]	; 0x28
   19f68:	mov	r3, #116	; 0x74
   19f6c:	b	198fc <__assert_fail@plt+0x84e8>
   19f70:	ldr	r3, [sp, #176]	; 0xb0
   19f74:	cmp	r3, #2
   19f78:	beq	1a488 <__assert_fail@plt+0x9074>
   19f7c:	cmp	r3, #5
   19f80:	mov	r3, #0
   19f84:	str	r3, [sp, #40]	; 0x28
   19f88:	beq	19bf4 <__assert_fail@plt+0x87e0>
   19f8c:	mov	r6, #0
   19f90:	mov	r5, #63	; 0x3f
   19f94:	b	19ab4 <__assert_fail@plt+0x86a0>
   19f98:	ldr	r3, [sp, #176]	; 0xb0
   19f9c:	cmp	r3, #2
   19fa0:	beq	1a410 <__assert_fail@plt+0x8ffc>
   19fa4:	mov	r3, #0
   19fa8:	b	19c38 <__assert_fail@plt+0x8824>
   19fac:	mov	r3, #0
   19fb0:	str	r3, [sp, #40]	; 0x28
   19fb4:	mov	r3, #114	; 0x72
   19fb8:	b	198fc <__assert_fail@plt+0x84e8>
   19fbc:	mov	r3, #0
   19fc0:	mov	r6, r3
   19fc4:	str	r3, [sp, #40]	; 0x28
   19fc8:	b	19af4 <__assert_fail@plt+0x86e0>
   19fcc:	mov	r3, #0
   19fd0:	str	r3, [sp, #40]	; 0x28
   19fd4:	mov	r3, #110	; 0x6e
   19fd8:	b	198fc <__assert_fail@plt+0x84e8>
   19fdc:	mov	r3, #0
   19fe0:	str	r3, [sp, #40]	; 0x28
   19fe4:	mov	r3, #98	; 0x62
   19fe8:	b	19908 <__assert_fail@plt+0x84f4>
   19fec:	mov	r3, #0
   19ff0:	str	r3, [sp, #40]	; 0x28
   19ff4:	mov	r3, #97	; 0x61
   19ff8:	b	19908 <__assert_fail@plt+0x84f4>
   19ffc:	ldr	r3, [sp, #60]	; 0x3c
   1a000:	cmp	r3, #0
   1a004:	bne	1a3f4 <__assert_fail@plt+0x8fe0>
   1a008:	ldr	r3, [sp, #92]	; 0x5c
   1a00c:	cmp	r3, #0
   1a010:	addne	r7, r7, #1
   1a014:	bne	19214 <__assert_fail@plt+0x7e00>
   1a018:	str	r3, [sp, #40]	; 0x28
   1a01c:	b	19914 <__assert_fail@plt+0x8500>
   1a020:	mov	r3, #0
   1a024:	str	r3, [sp, #40]	; 0x28
   1a028:	mov	r3, #102	; 0x66
   1a02c:	b	19908 <__assert_fail@plt+0x84f4>
   1a030:	mov	r3, #0
   1a034:	str	r3, [sp, #40]	; 0x28
   1a038:	ldr	r3, [sp, #76]	; 0x4c
   1a03c:	cmp	r3, #1
   1a040:	bne	1a4a8 <__assert_fail@plt+0x9094>
   1a044:	bl	11288 <__ctype_b_loc@plt>
   1a048:	ldr	r2, [r0]
   1a04c:	sxth	r3, r5
   1a050:	lsl	r3, r3, #1
   1a054:	ldr	r1, [sp, #76]	; 0x4c
   1a058:	ldrh	r3, [r2, r3]
   1a05c:	mov	r0, r1
   1a060:	and	r3, r3, #16384	; 0x4000
   1a064:	cmp	r3, #0
   1a068:	ldr	r3, [sp, #60]	; 0x3c
   1a06c:	movne	r6, #1
   1a070:	moveq	r6, #0
   1a074:	movne	r2, #0
   1a078:	andeq	r2, r3, #1
   1a07c:	cmp	r2, #0
   1a080:	beq	19ab4 <__assert_fail@plt+0x86a0>
   1a084:	ldr	r2, [sp, #60]	; 0x3c
   1a088:	mov	r6, #0
   1a08c:	add	r1, r0, r7
   1a090:	mov	ip, #39	; 0x27
   1a094:	str	r6, [sp, #100]	; 0x64
   1a098:	mov	r0, #0
   1a09c:	ldr	lr, [sp, #36]	; 0x24
   1a0a0:	str	r8, [sp, #36]	; 0x24
   1a0a4:	ldr	r6, [sp, #40]	; 0x28
   1a0a8:	ldr	r8, [sp, #44]	; 0x2c
   1a0ac:	b	1a15c <__assert_fail@plt+0x8d48>
   1a0b0:	cmp	r8, #0
   1a0b4:	bne	1a690 <__assert_fail@plt+0x927c>
   1a0b8:	ldr	r0, [sp, #52]	; 0x34
   1a0bc:	eor	r3, fp, #1
   1a0c0:	ands	r3, r0, r3
   1a0c4:	beq	1a0f4 <__assert_fail@plt+0x8ce0>
   1a0c8:	cmp	sl, r4
   1a0cc:	add	r0, r4, #1
   1a0d0:	strbhi	ip, [r9, r4]
   1a0d4:	cmp	sl, r0
   1a0d8:	movhi	fp, #36	; 0x24
   1a0dc:	strbhi	fp, [r9, r0]
   1a0e0:	add	r0, r4, #2
   1a0e4:	mov	fp, r3
   1a0e8:	cmp	sl, r0
   1a0ec:	add	r4, r4, #3
   1a0f0:	strbhi	ip, [r9, r0]
   1a0f4:	cmp	sl, r4
   1a0f8:	movhi	r3, #92	; 0x5c
   1a0fc:	strbhi	r3, [r9, r4]
   1a100:	add	r3, r4, #1
   1a104:	cmp	sl, r3
   1a108:	bls	1a118 <__assert_fail@plt+0x8d04>
   1a10c:	lsr	r0, r5, #6
   1a110:	add	r0, r0, #48	; 0x30
   1a114:	strb	r0, [r9, r3]
   1a118:	add	r3, r4, #2
   1a11c:	cmp	sl, r3
   1a120:	bls	1a130 <__assert_fail@plt+0x8d1c>
   1a124:	ubfx	r0, r5, #3, #3
   1a128:	add	r0, r0, #48	; 0x30
   1a12c:	strb	r0, [r9, r3]
   1a130:	add	r7, r7, #1
   1a134:	and	r5, r5, #7
   1a138:	cmp	r1, r7
   1a13c:	add	r5, r5, #48	; 0x30
   1a140:	add	r4, r4, #3
   1a144:	bls	1a6a4 <__assert_fail@plt+0x9290>
   1a148:	mov	r0, r2
   1a14c:	cmp	sl, r4
   1a150:	strbhi	r5, [r9, r4]
   1a154:	add	r4, r4, #1
   1a158:	ldrb	r5, [lr, #1]!
   1a15c:	cmp	r2, #0
   1a160:	bne	1a0b0 <__assert_fail@plt+0x8c9c>
   1a164:	eor	r3, r0, #1
   1a168:	cmp	r6, #0
   1a16c:	and	r3, r3, fp
   1a170:	uxtb	r3, r3
   1a174:	beq	1a188 <__assert_fail@plt+0x8d74>
   1a178:	cmp	sl, r4
   1a17c:	movhi	r6, #92	; 0x5c
   1a180:	strbhi	r6, [r9, r4]
   1a184:	add	r4, r4, #1
   1a188:	add	r7, r7, #1
   1a18c:	cmp	r7, r1
   1a190:	bcs	1a684 <__assert_fail@plt+0x9270>
   1a194:	cmp	r3, #0
   1a198:	beq	1a6c8 <__assert_fail@plt+0x92b4>
   1a19c:	cmp	sl, r4
   1a1a0:	add	r3, r4, #1
   1a1a4:	mov	r6, #0
   1a1a8:	strbhi	ip, [r9, r4]
   1a1ac:	cmp	sl, r3
   1a1b0:	add	r4, r4, #2
   1a1b4:	mov	fp, r6
   1a1b8:	strbhi	ip, [r9, r3]
   1a1bc:	b	1a14c <__assert_fail@plt+0x8d38>
   1a1c0:	ldr	r3, [sp, #36]	; 0x24
   1a1c4:	ldrb	r5, [r3]
   1a1c8:	cmp	r5, #126	; 0x7e
   1a1cc:	ldrls	pc, [pc, r5, lsl #2]
   1a1d0:	b	1a030 <__assert_fail@plt+0x8c1c>
   1a1d4:	strdeq	sl, [r1], -r4
   1a1d8:	andeq	sl, r1, r0, lsr r0
   1a1dc:	andeq	sl, r1, r0, lsr r0
   1a1e0:	andeq	sl, r1, r0, lsr r0
   1a1e4:	andeq	sl, r1, r0, lsr r0
   1a1e8:	andeq	sl, r1, r0, lsr r0
   1a1ec:	andeq	sl, r1, r0, lsr r0
   1a1f0:	andeq	r9, r1, r8, ror #17
   1a1f4:	andeq	r9, r1, r0, ror #17
   1a1f8:	andeq	r9, r1, r0, ror #30
   1a1fc:	andeq	sl, r1, r8, ror #7
   1a200:	andeq	r9, r1, r0, asr #30
   1a204:	andeq	r9, r1, ip, lsl #15
   1a208:	ldrdeq	sl, [r1], -ip
   1a20c:	andeq	sl, r1, r0, lsr r0
   1a210:	andeq	sl, r1, r0, lsr r0
   1a214:	andeq	sl, r1, r0, lsr r0
   1a218:	andeq	sl, r1, r0, lsr r0
   1a21c:	andeq	sl, r1, r0, lsr r0
   1a220:	andeq	sl, r1, r0, lsr r0
   1a224:	andeq	sl, r1, r0, lsr r0
   1a228:	andeq	sl, r1, r0, lsr r0
   1a22c:	andeq	sl, r1, r0, lsr r0
   1a230:	andeq	sl, r1, r0, lsr r0
   1a234:	andeq	sl, r1, r0, lsr r0
   1a238:	andeq	sl, r1, r0, lsr r0
   1a23c:	andeq	sl, r1, r0, lsr r0
   1a240:	andeq	sl, r1, r0, lsr r0
   1a244:	andeq	sl, r1, r0, lsr r0
   1a248:	andeq	sl, r1, r0, lsr r0
   1a24c:	andeq	sl, r1, r0, lsr r0
   1a250:	andeq	sl, r1, r0, lsr r0
   1a254:	andeq	r9, r1, r0, asr pc
   1a258:	ldrdeq	sl, [r1], -r0
   1a25c:	ldrdeq	sl, [r1], -r0
   1a260:	andeq	r9, r1, r4, lsr pc
   1a264:	ldrdeq	sl, [r1], -r0
   1a268:	andeq	r9, r1, r4, lsr #30
   1a26c:	ldrdeq	sl, [r1], -r0
   1a270:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   1a274:	ldrdeq	sl, [r1], -r0
   1a278:	ldrdeq	sl, [r1], -r0
   1a27c:	ldrdeq	sl, [r1], -r0
   1a280:	andeq	r9, r1, r4, lsr #30
   1a284:	andeq	r9, r1, r4, lsr #30
   1a288:	andeq	r9, r1, r4, lsr #30
   1a28c:	andeq	r9, r1, r4, lsr #30
   1a290:	andeq	r9, r1, r4, lsr #30
   1a294:	andeq	r9, r1, r4, lsr #30
   1a298:	andeq	r9, r1, r4, lsr #30
   1a29c:	andeq	r9, r1, r4, lsr #30
   1a2a0:	andeq	r9, r1, r4, lsr #30
   1a2a4:	andeq	r9, r1, r4, lsr #30
   1a2a8:	andeq	r9, r1, r4, lsr #30
   1a2ac:	andeq	r9, r1, r4, lsr #30
   1a2b0:	andeq	r9, r1, r4, lsr #30
   1a2b4:	andeq	r9, r1, r4, lsr #30
   1a2b8:	andeq	r9, r1, r4, lsr #30
   1a2bc:	andeq	r9, r1, r4, lsr #30
   1a2c0:	ldrdeq	sl, [r1], -r0
   1a2c4:	ldrdeq	sl, [r1], -r0
   1a2c8:	ldrdeq	sl, [r1], -r0
   1a2cc:	ldrdeq	sl, [r1], -r0
   1a2d0:	andeq	r9, r1, r0, ror pc
   1a2d4:	andeq	sl, r1, r0, lsr r0
   1a2d8:	andeq	r9, r1, r4, lsr #30
   1a2dc:	andeq	r9, r1, r4, lsr #30
   1a2e0:	andeq	r9, r1, r4, lsr #30
   1a2e4:	andeq	r9, r1, r4, lsr #30
   1a2e8:	andeq	r9, r1, r4, lsr #30
   1a2ec:	andeq	r9, r1, r4, lsr #30
   1a2f0:	andeq	r9, r1, r4, lsr #30
   1a2f4:	andeq	r9, r1, r4, lsr #30
   1a2f8:	andeq	r9, r1, r4, lsr #30
   1a2fc:	andeq	r9, r1, r4, lsr #30
   1a300:	andeq	r9, r1, r4, lsr #30
   1a304:	andeq	r9, r1, r4, lsr #30
   1a308:	andeq	r9, r1, r4, lsr #30
   1a30c:	andeq	r9, r1, r4, lsr #30
   1a310:	andeq	r9, r1, r4, lsr #30
   1a314:	andeq	r9, r1, r4, lsr #30
   1a318:	andeq	r9, r1, r4, lsr #30
   1a31c:	andeq	r9, r1, r4, lsr #30
   1a320:	andeq	r9, r1, r4, lsr #30
   1a324:	andeq	r9, r1, r4, lsr #30
   1a328:	andeq	r9, r1, r4, lsr #30
   1a32c:	andeq	r9, r1, r4, lsr #30
   1a330:	andeq	r9, r1, r4, lsr #30
   1a334:	andeq	r9, r1, r4, lsr #30
   1a338:	andeq	r9, r1, r4, lsr #30
   1a33c:	andeq	r9, r1, r4, lsr #30
   1a340:	ldrdeq	sl, [r1], -r0
   1a344:	strdeq	r9, [r1], -r0
   1a348:	andeq	r9, r1, r4, lsr #30
   1a34c:	ldrdeq	sl, [r1], -r0
   1a350:	andeq	r9, r1, r4, lsr #30
   1a354:	ldrdeq	sl, [r1], -r0
   1a358:	andeq	r9, r1, r4, lsr #30
   1a35c:	andeq	r9, r1, r4, lsr #30
   1a360:	andeq	r9, r1, r4, lsr #30
   1a364:	andeq	r9, r1, r4, lsr #30
   1a368:	andeq	r9, r1, r4, lsr #30
   1a36c:	andeq	r9, r1, r4, lsr #30
   1a370:	andeq	r9, r1, r4, lsr #30
   1a374:	andeq	r9, r1, r4, lsr #30
   1a378:	andeq	r9, r1, r4, lsr #30
   1a37c:	andeq	r9, r1, r4, lsr #30
   1a380:	andeq	r9, r1, r4, lsr #30
   1a384:	andeq	r9, r1, r4, lsr #30
   1a388:	andeq	r9, r1, r4, lsr #30
   1a38c:	andeq	r9, r1, r4, lsr #30
   1a390:	andeq	r9, r1, r4, lsr #30
   1a394:	andeq	r9, r1, r4, lsr #30
   1a398:	andeq	r9, r1, r4, lsr #30
   1a39c:	andeq	r9, r1, r4, lsr #30
   1a3a0:	andeq	r9, r1, r4, lsr #30
   1a3a4:	andeq	r9, r1, r4, lsr #30
   1a3a8:	andeq	r9, r1, r4, lsr #30
   1a3ac:	andeq	r9, r1, r4, lsr #30
   1a3b0:	andeq	r9, r1, r4, lsr #30
   1a3b4:	andeq	r9, r1, r4, lsr #30
   1a3b8:	andeq	r9, r1, r4, lsr #30
   1a3bc:	andeq	r9, r1, r4, lsr #30
   1a3c0:	andeq	r9, r1, ip, asr #29
   1a3c4:	ldrdeq	sl, [r1], -r0
   1a3c8:	andeq	r9, r1, ip, asr #29
   1a3cc:	andeq	r9, r1, r4, lsr pc
   1a3d0:	mov	r3, #0
   1a3d4:	str	r3, [sp, #40]	; 0x28
   1a3d8:	b	19ab0 <__assert_fail@plt+0x869c>
   1a3dc:	mov	r3, #0
   1a3e0:	str	r3, [sp, #40]	; 0x28
   1a3e4:	b	19a48 <__assert_fail@plt+0x8634>
   1a3e8:	mov	r3, #0
   1a3ec:	str	r3, [sp, #40]	; 0x28
   1a3f0:	b	19a7c <__assert_fail@plt+0x8668>
   1a3f4:	ldr	r3, [sp, #44]	; 0x2c
   1a3f8:	cmp	r3, #0
   1a3fc:	beq	19994 <__assert_fail@plt+0x8580>
   1a400:	ldr	r3, [sp, #52]	; 0x34
   1a404:	mov	fp, r9
   1a408:	str	r3, [sp, #60]	; 0x3c
   1a40c:	b	19b0c <__assert_fail@plt+0x86f8>
   1a410:	ldr	r3, [sp, #44]	; 0x2c
   1a414:	cmp	r3, #0
   1a418:	bne	1a84c <__assert_fail@plt+0x9438>
   1a41c:	str	r3, [sp, #40]	; 0x28
   1a420:	cmp	sl, #0
   1a424:	ldr	r3, [sp, #84]	; 0x54
   1a428:	clz	r3, r3
   1a42c:	lsr	r3, r3, #5
   1a430:	moveq	r3, #0
   1a434:	cmp	r3, #0
   1a438:	strne	sl, [sp, #84]	; 0x54
   1a43c:	movne	sl, #0
   1a440:	bne	1a470 <__assert_fail@plt+0x905c>
   1a444:	cmp	sl, r4
   1a448:	movhi	r3, #39	; 0x27
   1a44c:	strbhi	r3, [r9, r4]
   1a450:	add	r3, r4, #1
   1a454:	cmp	sl, r3
   1a458:	movhi	r2, #92	; 0x5c
   1a45c:	strbhi	r2, [r9, r3]
   1a460:	add	r3, r4, #2
   1a464:	cmp	sl, r3
   1a468:	movhi	r2, #39	; 0x27
   1a46c:	strbhi	r2, [r9, r3]
   1a470:	mov	r3, #0
   1a474:	add	r4, r4, #3
   1a478:	str	r6, [sp, #80]	; 0x50
   1a47c:	mov	fp, r3
   1a480:	mov	r5, #39	; 0x27
   1a484:	b	19950 <__assert_fail@plt+0x853c>
   1a488:	ldr	r3, [sp, #44]	; 0x2c
   1a48c:	cmp	r3, #0
   1a490:	bne	1a84c <__assert_fail@plt+0x9438>
   1a494:	mov	r6, #0
   1a498:	mov	r5, #63	; 0x3f
   1a49c:	str	r3, [sp, #40]	; 0x28
   1a4a0:	mov	r3, fp
   1a4a4:	b	19950 <__assert_fail@plt+0x853c>
   1a4a8:	mov	r2, #0
   1a4ac:	mov	r3, #0
   1a4b0:	cmn	r8, #1
   1a4b4:	strd	r2, [sp, #128]	; 0x80
   1a4b8:	bne	1a4c8 <__assert_fail@plt+0x90b4>
   1a4bc:	ldr	r0, [sp, #28]
   1a4c0:	bl	112a0 <strlen@plt>
   1a4c4:	mov	r8, r0
   1a4c8:	str	r9, [sp, #100]	; 0x64
   1a4cc:	mov	r3, #0
   1a4d0:	strd	sl, [sp, #104]	; 0x68
   1a4d4:	ldr	sl, [sp, #28]
   1a4d8:	str	r5, [sp, #112]	; 0x70
   1a4dc:	mov	r5, r3
   1a4e0:	ldr	r9, [sp, #68]	; 0x44
   1a4e4:	str	r4, [sp, #116]	; 0x74
   1a4e8:	add	r4, r7, r5
   1a4ec:	add	r3, sp, #128	; 0x80
   1a4f0:	add	fp, sl, r4
   1a4f4:	sub	r2, r8, r4
   1a4f8:	mov	r1, fp
   1a4fc:	add	r0, sp, #124	; 0x7c
   1a500:	bl	1ee58 <__assert_fail@plt+0xda44>
   1a504:	subs	r1, r0, #0
   1a508:	beq	1a548 <__assert_fail@plt+0x9134>
   1a50c:	cmn	r1, #1
   1a510:	beq	1a8a0 <__assert_fail@plt+0x948c>
   1a514:	cmn	r1, #2
   1a518:	beq	1a8c0 <__assert_fail@plt+0x94ac>
   1a51c:	cmp	r9, #0
   1a520:	bne	1a578 <__assert_fail@plt+0x9164>
   1a524:	ldr	r0, [sp, #124]	; 0x7c
   1a528:	add	r5, r5, r1
   1a52c:	bl	111b0 <iswprint@plt>
   1a530:	cmp	r0, #0
   1a534:	add	r0, sp, #128	; 0x80
   1a538:	moveq	r6, #0
   1a53c:	bl	11144 <mbsinit@plt>
   1a540:	cmp	r0, #0
   1a544:	beq	1a4e8 <__assert_fail@plt+0x90d4>
   1a548:	ldr	r3, [sp, #60]	; 0x3c
   1a54c:	add	r9, sp, #100	; 0x64
   1a550:	mov	r0, r5
   1a554:	ldm	r9, {r9, sl, fp}
   1a558:	eor	r2, r6, #1
   1a55c:	ldr	r5, [sp, #112]	; 0x70
   1a560:	and	r2, r2, r3
   1a564:	uxtb	r2, r2
   1a568:	ldr	r4, [sp, #116]	; 0x74
   1a56c:	cmp	r0, #1
   1a570:	bhi	1a08c <__assert_fail@plt+0x8c78>
   1a574:	b	1a07c <__assert_fail@plt+0x8c68>
   1a578:	cmp	r1, #1
   1a57c:	beq	1a524 <__assert_fail@plt+0x9110>
   1a580:	add	r2, r4, #1
   1a584:	add	r3, sl, r1
   1a588:	add	r2, sl, r2
   1a58c:	add	r4, r3, r4
   1a590:	ldrb	r3, [r2], #1
   1a594:	sub	r3, r3, #91	; 0x5b
   1a598:	cmp	r3, #33	; 0x21
   1a59c:	ldrls	pc, [pc, r3, lsl #2]
   1a5a0:	b	1a62c <__assert_fail@plt+0x9218>
   1a5a4:	andeq	sl, r1, r8, lsr r6
   1a5a8:	andeq	sl, r1, r8, lsr r6
   1a5ac:	andeq	sl, r1, ip, lsr #12
   1a5b0:	andeq	sl, r1, r8, lsr r6
   1a5b4:	andeq	sl, r1, ip, lsr #12
   1a5b8:	andeq	sl, r1, r8, lsr r6
   1a5bc:	andeq	sl, r1, ip, lsr #12
   1a5c0:	andeq	sl, r1, ip, lsr #12
   1a5c4:	andeq	sl, r1, ip, lsr #12
   1a5c8:	andeq	sl, r1, ip, lsr #12
   1a5cc:	andeq	sl, r1, ip, lsr #12
   1a5d0:	andeq	sl, r1, ip, lsr #12
   1a5d4:	andeq	sl, r1, ip, lsr #12
   1a5d8:	andeq	sl, r1, ip, lsr #12
   1a5dc:	andeq	sl, r1, ip, lsr #12
   1a5e0:	andeq	sl, r1, ip, lsr #12
   1a5e4:	andeq	sl, r1, ip, lsr #12
   1a5e8:	andeq	sl, r1, ip, lsr #12
   1a5ec:	andeq	sl, r1, ip, lsr #12
   1a5f0:	andeq	sl, r1, ip, lsr #12
   1a5f4:	andeq	sl, r1, ip, lsr #12
   1a5f8:	andeq	sl, r1, ip, lsr #12
   1a5fc:	andeq	sl, r1, ip, lsr #12
   1a600:	andeq	sl, r1, ip, lsr #12
   1a604:	andeq	sl, r1, ip, lsr #12
   1a608:	andeq	sl, r1, ip, lsr #12
   1a60c:	andeq	sl, r1, ip, lsr #12
   1a610:	andeq	sl, r1, ip, lsr #12
   1a614:	andeq	sl, r1, ip, lsr #12
   1a618:	andeq	sl, r1, ip, lsr #12
   1a61c:	andeq	sl, r1, ip, lsr #12
   1a620:	andeq	sl, r1, ip, lsr #12
   1a624:	andeq	sl, r1, ip, lsr #12
   1a628:	andeq	sl, r1, r8, lsr r6
   1a62c:	cmp	r4, r2
   1a630:	bne	1a590 <__assert_fail@plt+0x917c>
   1a634:	b	1a524 <__assert_fail@plt+0x9110>
   1a638:	mov	r3, #2
   1a63c:	ldr	fp, [sp, #100]	; 0x64
   1a640:	str	r3, [sp, #176]	; 0xb0
   1a644:	ldr	sl, [sp, #104]	; 0x68
   1a648:	b	19b0c <__assert_fail@plt+0x86f8>
   1a64c:	ldr	r2, [sp, #52]	; 0x34
   1a650:	mov	fp, r9
   1a654:	ldr	r3, [sp, #60]	; 0x3c
   1a658:	and	r3, r3, r2
   1a65c:	str	r3, [sp, #60]	; 0x3c
   1a660:	b	19b0c <__assert_fail@plt+0x86f8>
   1a664:	cmp	sl, r4
   1a668:	movhi	r2, fp
   1a66c:	bhi	199e4 <__assert_fail@plt+0x85d0>
   1a670:	mov	r2, r4
   1a674:	b	199f4 <__assert_fail@plt+0x85e0>
   1a678:	mov	r6, r3
   1a67c:	mov	r5, #63	; 0x3f
   1a680:	b	19ab4 <__assert_fail@plt+0x86a0>
   1a684:	ldr	r8, [sp, #36]	; 0x24
   1a688:	ldr	r6, [sp, #100]	; 0x64
   1a68c:	b	19960 <__assert_fail@plt+0x854c>
   1a690:	mov	fp, r9
   1a694:	ldr	r8, [sp, #36]	; 0x24
   1a698:	ldr	r3, [sp, #52]	; 0x34
   1a69c:	str	r3, [sp, #60]	; 0x3c
   1a6a0:	b	19b0c <__assert_fail@plt+0x86f8>
   1a6a4:	ldr	r8, [sp, #36]	; 0x24
   1a6a8:	ldr	r6, [sp, #100]	; 0x64
   1a6ac:	b	197f8 <__assert_fail@plt+0x83e4>
   1a6b0:	mov	r3, #0
   1a6b4:	add	r4, r4, #4
   1a6b8:	mov	fp, r2
   1a6bc:	mov	r6, r3
   1a6c0:	mov	r5, #48	; 0x30
   1a6c4:	b	19950 <__assert_fail@plt+0x853c>
   1a6c8:	mov	r6, r3
   1a6cc:	b	1a14c <__assert_fail@plt+0x8d38>
   1a6d0:	mov	r3, #1
   1a6d4:	movw	r2, #2372	; 0x944
   1a6d8:	movt	r2, #2
   1a6dc:	mov	r4, r3
   1a6e0:	mov	r9, sl
   1a6e4:	str	r3, [sp, #32]
   1a6e8:	str	sl, [sp, #44]	; 0x2c
   1a6ec:	str	r3, [sp, #48]	; 0x30
   1a6f0:	str	sl, [sp, #52]	; 0x34
   1a6f4:	str	r3, [sp, #56]	; 0x38
   1a6f8:	str	r3, [sp, #60]	; 0x3c
   1a6fc:	str	sl, [sp, #64]	; 0x40
   1a700:	str	sl, [sp, #68]	; 0x44
   1a704:	str	r2, [sp, #72]	; 0x48
   1a708:	str	sl, [sp, #80]	; 0x50
   1a70c:	str	sl, [sp, #84]	; 0x54
   1a710:	str	sl, [sp, #88]	; 0x58
   1a714:	b	19204 <__assert_fail@plt+0x7df0>
   1a718:	mov	r3, #0
   1a71c:	mov	r5, #48	; 0x30
   1a720:	mov	r6, r3
   1a724:	b	19950 <__assert_fail@plt+0x853c>
   1a728:	cmp	sl, r4
   1a72c:	mov	r5, #48	; 0x30
   1a730:	movhi	r3, #48	; 0x30
   1a734:	strbhi	r3, [r9, r4]
   1a738:	add	r3, r2, #2
   1a73c:	add	r4, r2, #3
   1a740:	cmp	sl, r3
   1a744:	movhi	r1, #48	; 0x30
   1a748:	strbhi	r1, [r9, r3]
   1a74c:	mov	r3, #0
   1a750:	b	19a2c <__assert_fail@plt+0x8618>
   1a754:	ldr	r3, [sp, #48]	; 0x30
   1a758:	str	r3, [sp, #40]	; 0x28
   1a75c:	b	1a038 <__assert_fail@plt+0x8c24>
   1a760:	ldr	r2, [sp, #28]
   1a764:	ldrb	r2, [r2, r3]
   1a768:	sub	r1, r2, #33	; 0x21
   1a76c:	cmp	r1, #29
   1a770:	ldrls	pc, [pc, r1, lsl #2]
   1a774:	b	19ab0 <__assert_fail@plt+0x869c>
   1a778:	strdeq	sl, [r1], -r0
   1a77c:			; <UNDEFINED> instruction: 0x00019ab0
   1a780:			; <UNDEFINED> instruction: 0x00019ab0
   1a784:			; <UNDEFINED> instruction: 0x00019ab0
   1a788:			; <UNDEFINED> instruction: 0x00019ab0
   1a78c:			; <UNDEFINED> instruction: 0x00019ab0
   1a790:	strdeq	sl, [r1], -r0
   1a794:	strdeq	sl, [r1], -r0
   1a798:	strdeq	sl, [r1], -r0
   1a79c:			; <UNDEFINED> instruction: 0x00019ab0
   1a7a0:			; <UNDEFINED> instruction: 0x00019ab0
   1a7a4:			; <UNDEFINED> instruction: 0x00019ab0
   1a7a8:	strdeq	sl, [r1], -r0
   1a7ac:			; <UNDEFINED> instruction: 0x00019ab0
   1a7b0:	strdeq	sl, [r1], -r0
   1a7b4:			; <UNDEFINED> instruction: 0x00019ab0
   1a7b8:			; <UNDEFINED> instruction: 0x00019ab0
   1a7bc:			; <UNDEFINED> instruction: 0x00019ab0
   1a7c0:			; <UNDEFINED> instruction: 0x00019ab0
   1a7c4:			; <UNDEFINED> instruction: 0x00019ab0
   1a7c8:			; <UNDEFINED> instruction: 0x00019ab0
   1a7cc:			; <UNDEFINED> instruction: 0x00019ab0
   1a7d0:			; <UNDEFINED> instruction: 0x00019ab0
   1a7d4:			; <UNDEFINED> instruction: 0x00019ab0
   1a7d8:			; <UNDEFINED> instruction: 0x00019ab0
   1a7dc:			; <UNDEFINED> instruction: 0x00019ab0
   1a7e0:			; <UNDEFINED> instruction: 0x00019ab0
   1a7e4:	strdeq	sl, [r1], -r0
   1a7e8:	strdeq	sl, [r1], -r0
   1a7ec:	strdeq	sl, [r1], -r0
   1a7f0:	ldr	r1, [sp, #44]	; 0x2c
   1a7f4:	cmp	r1, #0
   1a7f8:	bne	1aa58 <__assert_fail@plt+0x9644>
   1a7fc:	cmp	sl, r4
   1a800:	mov	r7, r3
   1a804:	movhi	r1, #63	; 0x3f
   1a808:	mov	r5, r2
   1a80c:	mov	r3, fp
   1a810:	strbhi	r1, [r9, r4]
   1a814:	add	r1, r4, #1
   1a818:	cmp	sl, r1
   1a81c:	movhi	r0, #34	; 0x22
   1a820:	strbhi	r0, [r9, r1]
   1a824:	add	r1, r4, #2
   1a828:	cmp	sl, r1
   1a82c:	movhi	r0, #34	; 0x22
   1a830:	strbhi	r0, [r9, r1]
   1a834:	add	r1, r4, #3
   1a838:	add	r4, r4, #4
   1a83c:	cmp	sl, r1
   1a840:	movhi	r0, #63	; 0x3f
   1a844:	strbhi	r0, [r9, r1]
   1a848:	b	19a2c <__assert_fail@plt+0x8618>
   1a84c:	mov	fp, r9
   1a850:	b	19b0c <__assert_fail@plt+0x86f8>
   1a854:	ldr	r3, [sp, #188]	; 0xbc
   1a858:	ldrb	r3, [r3]
   1a85c:	cmp	r3, #0
   1a860:	beq	1919c <__assert_fail@plt+0x7d88>
   1a864:	ldr	r2, [sp, #188]	; 0xbc
   1a868:	cmp	sl, r4
   1a86c:	bls	1a88c <__assert_fail@plt+0x9478>
   1a870:	strb	r3, [fp, r4]
   1a874:	add	r4, r4, #1
   1a878:	ldrb	r3, [r2, #1]!
   1a87c:	cmp	r3, #0
   1a880:	beq	1919c <__assert_fail@plt+0x7d88>
   1a884:	cmp	sl, r4
   1a888:	bhi	1a870 <__assert_fail@plt+0x945c>
   1a88c:	ldrb	r3, [r2, #1]!
   1a890:	add	r4, r4, #1
   1a894:	cmp	r3, #0
   1a898:	bne	1a868 <__assert_fail@plt+0x9454>
   1a89c:	b	1919c <__assert_fail@plt+0x7d88>
   1a8a0:	add	r9, sp, #100	; 0x64
   1a8a4:	mov	r0, r5
   1a8a8:	ldr	r2, [sp, #60]	; 0x3c
   1a8ac:	mov	r6, #0
   1a8b0:	ldm	r9, {r9, sl, fp}
   1a8b4:	ldr	r5, [sp, #112]	; 0x70
   1a8b8:	ldr	r4, [sp, #116]	; 0x74
   1a8bc:	b	1a56c <__assert_fail@plt+0x9158>
   1a8c0:	cmp	r4, r8
   1a8c4:	add	r9, sp, #100	; 0x64
   1a8c8:	mov	r1, r4
   1a8cc:	mov	r2, fp
   1a8d0:	ldm	r9, {r9, sl, fp}
   1a8d4:	mov	r3, r5
   1a8d8:	mov	r0, r5
   1a8dc:	ldr	r5, [sp, #112]	; 0x70
   1a8e0:	ldr	r4, [sp, #116]	; 0x74
   1a8e4:	bcs	1a918 <__assert_fail@plt+0x9504>
   1a8e8:	ldrb	r6, [r2]
   1a8ec:	cmp	r6, #0
   1a8f0:	bne	1a904 <__assert_fail@plt+0x94f0>
   1a8f4:	b	1aa50 <__assert_fail@plt+0x963c>
   1a8f8:	ldrb	r6, [r2, #1]!
   1a8fc:	cmp	r6, #0
   1a900:	beq	1a9e8 <__assert_fail@plt+0x95d4>
   1a904:	add	r3, r3, #1
   1a908:	add	r1, r7, r3
   1a90c:	cmp	r8, r1
   1a910:	bhi	1a8f8 <__assert_fail@plt+0x94e4>
   1a914:	mov	r0, r3
   1a918:	mov	r6, #0
   1a91c:	ldr	r2, [sp, #60]	; 0x3c
   1a920:	b	1a56c <__assert_fail@plt+0x9158>
   1a924:	mov	r3, #1
   1a928:	mov	r4, #0
   1a92c:	mov	r9, r4
   1a930:	str	r3, [sp, #32]
   1a934:	str	r3, [sp, #44]	; 0x2c
   1a938:	str	r3, [sp, #48]	; 0x30
   1a93c:	str	r4, [sp, #52]	; 0x34
   1a940:	str	r3, [sp, #56]	; 0x38
   1a944:	str	r3, [sp, #60]	; 0x3c
   1a948:	str	r3, [sp, #88]	; 0x58
   1a94c:	movw	r3, #2372	; 0x944
   1a950:	movt	r3, #2
   1a954:	str	r4, [sp, #64]	; 0x40
   1a958:	str	r4, [sp, #68]	; 0x44
   1a95c:	str	r3, [sp, #72]	; 0x48
   1a960:	str	r4, [sp, #80]	; 0x50
   1a964:	str	r4, [sp, #84]	; 0x54
   1a968:	b	19204 <__assert_fail@plt+0x7df0>
   1a96c:	mov	fp, r9
   1a970:	b	19b20 <__assert_fail@plt+0x870c>
   1a974:	ldr	r3, [sp, #48]	; 0x30
   1a978:	b	1a494 <__assert_fail@plt+0x9080>
   1a97c:	mov	r2, r3
   1a980:	ldr	r3, [sp, #72]	; 0x48
   1a984:	cmp	r3, #0
   1a988:	moveq	r2, #0
   1a98c:	andne	r2, r2, #1
   1a990:	cmp	r2, #0
   1a994:	beq	1a9c4 <__assert_fail@plt+0x95b0>
   1a998:	mov	r2, r3
   1a99c:	ldrb	r3, [r3]
   1a9a0:	cmp	r3, #0
   1a9a4:	beq	1a9c4 <__assert_fail@plt+0x95b0>
   1a9a8:	cmp	sl, r4
   1a9ac:	bls	1a9d4 <__assert_fail@plt+0x95c0>
   1a9b0:	strb	r3, [fp, r4]
   1a9b4:	add	r4, r4, #1
   1a9b8:	ldrb	r3, [r2, #1]!
   1a9bc:	cmp	r3, #0
   1a9c0:	bne	1a9a8 <__assert_fail@plt+0x9594>
   1a9c4:	cmp	sl, r4
   1a9c8:	movhi	r3, #0
   1a9cc:	strbhi	r3, [fp, r4]
   1a9d0:	b	19b5c <__assert_fail@plt+0x8748>
   1a9d4:	ldrb	r3, [r2, #1]!
   1a9d8:	add	r4, r4, #1
   1a9dc:	cmp	r3, #0
   1a9e0:	bne	1a9a8 <__assert_fail@plt+0x9594>
   1a9e4:	b	1a9c4 <__assert_fail@plt+0x95b0>
   1a9e8:	mov	r0, r3
   1a9ec:	ldr	r2, [sp, #60]	; 0x3c
   1a9f0:	b	1a56c <__assert_fail@plt+0x9158>
   1a9f4:	mov	ip, #5
   1a9f8:	mov	r3, r8
   1a9fc:	ldr	r1, [sp, #84]	; 0x54
   1aa00:	str	ip, [sp]
   1aa04:	ldr	r2, [sp, #180]	; 0xb4
   1aa08:	ldr	ip, [sp, #188]	; 0xbc
   1aa0c:	ldr	r0, [sp, #184]	; 0xb8
   1aa10:	str	r2, [sp, #4]
   1aa14:	ldr	r2, [sp, #28]
   1aa18:	str	ip, [sp, #12]
   1aa1c:	ldr	ip, [sp, #192]	; 0xc0
   1aa20:	str	r0, [sp, #8]
   1aa24:	mov	r0, fp
   1aa28:	str	ip, [sp, #16]
   1aa2c:	bl	190e0 <__assert_fail@plt+0x7ccc>
   1aa30:	mov	r4, r0
   1aa34:	b	19b5c <__assert_fail@plt+0x8748>
   1aa38:	mov	r6, r3
   1aa3c:	str	r3, [sp, #40]	; 0x28
   1aa40:	b	19acc <__assert_fail@plt+0x86b8>
   1aa44:	mov	r3, #2
   1aa48:	str	r3, [sp, #176]	; 0xb0
   1aa4c:	b	19b0c <__assert_fail@plt+0x86f8>
   1aa50:	ldr	r2, [sp, #60]	; 0x3c
   1aa54:	b	1a56c <__assert_fail@plt+0x9158>
   1aa58:	mov	r3, #5
   1aa5c:	mov	fp, r9
   1aa60:	str	r3, [sp, #176]	; 0xb0
   1aa64:	b	19b20 <__assert_fail@plt+0x870c>
   1aa68:	mov	r1, #1
   1aa6c:	mov	r9, #0
   1aa70:	mov	r3, r9
   1aa74:	mov	r2, r9
   1aa78:	str	r1, [sp, #32]
   1aa7c:	str	sl, [sp, #84]	; 0x54
   1aa80:	b	198a8 <__assert_fail@plt+0x8494>
   1aa84:	mov	r3, #0
   1aa88:	mov	r2, #1
   1aa8c:	mov	r9, r3
   1aa90:	mov	r4, r3
   1aa94:	str	r2, [sp, #32]
   1aa98:	strd	r2, [sp, #44]	; 0x2c
   1aa9c:	strd	r2, [sp, #56]	; 0x38
   1aaa0:	str	r3, [sp, #80]	; 0x50
   1aaa4:	str	r3, [sp, #84]	; 0x54
   1aaa8:	str	r3, [sp, #88]	; 0x58
   1aaac:	movw	r3, #2392	; 0x958
   1aab0:	movt	r3, #2
   1aab4:	str	r2, [sp, #52]	; 0x34
   1aab8:	str	r2, [sp, #64]	; 0x40
   1aabc:	str	r2, [sp, #68]	; 0x44
   1aac0:	str	r3, [sp, #72]	; 0x48
   1aac4:	b	19204 <__assert_fail@plt+0x7df0>
   1aac8:	bl	113f0 <abort@plt>
   1aacc:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1aad0:	mov	r4, r0
   1aad4:	mov	r5, r3
   1aad8:	strd	r6, [sp, #8]
   1aadc:	movw	r7, #4460	; 0x116c
   1aae0:	movt	r7, #3
   1aae4:	strd	r8, [sp, #16]
   1aae8:	strd	sl, [sp, #24]
   1aaec:	mov	sl, r1
   1aaf0:	mov	fp, r2
   1aaf4:	str	lr, [sp, #32]
   1aaf8:	sub	sp, sp, #60	; 0x3c
   1aafc:	bl	112dc <__errno_location@plt>
   1ab00:	mov	r8, r0
   1ab04:	cmn	r4, #-2147483647	; 0x80000001
   1ab08:	ldr	r6, [r7]
   1ab0c:	movne	r0, #0
   1ab10:	moveq	r0, #1
   1ab14:	ldr	r3, [r8]
   1ab18:	orrs	r0, r0, r4, lsr #31
   1ab1c:	str	r3, [sp, #28]
   1ab20:	bne	1acb0 <__assert_fail@plt+0x989c>
   1ab24:	ldr	r3, [r7, #4]
   1ab28:	cmp	r3, r4
   1ab2c:	bgt	1ab8c <__assert_fail@plt+0x9778>
   1ab30:	add	r1, r7, #8
   1ab34:	sub	r2, r4, r3
   1ab38:	str	r3, [sp, #52]	; 0x34
   1ab3c:	cmp	r6, r1
   1ab40:	add	r2, r2, #1
   1ab44:	beq	1ac88 <__assert_fail@plt+0x9874>
   1ab48:	mov	r1, #8
   1ab4c:	mov	r0, r6
   1ab50:	mvn	r3, #-2147483648	; 0x80000000
   1ab54:	str	r1, [sp]
   1ab58:	add	r1, sp, #52	; 0x34
   1ab5c:	bl	1d4cc <__assert_fail@plt+0xc0b8>
   1ab60:	mov	r6, r0
   1ab64:	str	r0, [r7]
   1ab68:	ldr	r0, [r7, #4]
   1ab6c:	mov	r1, #0
   1ab70:	ldr	r2, [sp, #52]	; 0x34
   1ab74:	sub	r2, r2, r0
   1ab78:	add	r0, r6, r0, lsl #3
   1ab7c:	lsl	r2, r2, #3
   1ab80:	bl	112f4 <memset@plt>
   1ab84:	ldr	r3, [sp, #52]	; 0x34
   1ab88:	str	r3, [r7, #4]
   1ab8c:	ldr	r1, [r5, #4]
   1ab90:	add	r0, r6, r4, lsl #3
   1ab94:	add	ip, r5, #8
   1ab98:	mov	r3, fp
   1ab9c:	mov	r2, sl
   1aba0:	ldr	r7, [r0, #4]
   1aba4:	str	r0, [sp, #36]	; 0x24
   1aba8:	str	ip, [sp, #40]	; 0x28
   1abac:	orr	r0, r1, #1
   1abb0:	ldr	r9, [r6, r4, lsl #3]
   1abb4:	str	ip, [sp, #8]
   1abb8:	ldr	lr, [r5, #44]	; 0x2c
   1abbc:	str	r0, [sp, #4]
   1abc0:	ldr	ip, [r5]
   1abc4:	mov	r1, r9
   1abc8:	str	ip, [sp, #32]
   1abcc:	ldr	ip, [r5, #40]	; 0x28
   1abd0:	str	ip, [sp, #12]
   1abd4:	ldr	ip, [sp, #32]
   1abd8:	str	lr, [sp, #16]
   1abdc:	str	r0, [sp, #44]	; 0x2c
   1abe0:	mov	r0, r7
   1abe4:	str	ip, [sp]
   1abe8:	bl	190e0 <__assert_fail@plt+0x7ccc>
   1abec:	cmp	r9, r0
   1abf0:	bhi	1ac60 <__assert_fail@plt+0x984c>
   1abf4:	add	r9, r0, #1
   1abf8:	movw	r3, #4592	; 0x11f0
   1abfc:	movt	r3, #3
   1ac00:	cmp	r7, r3
   1ac04:	str	r9, [r6, r4, lsl #3]
   1ac08:	beq	1ac14 <__assert_fail@plt+0x9800>
   1ac0c:	mov	r0, r7
   1ac10:	bl	1760c <__assert_fail@plt+0x61f8>
   1ac14:	mov	r0, r9
   1ac18:	bl	1d228 <__assert_fail@plt+0xbe14>
   1ac1c:	ldr	ip, [r5]
   1ac20:	mov	r3, fp
   1ac24:	mov	r2, sl
   1ac28:	mov	r1, r9
   1ac2c:	mov	r7, r0
   1ac30:	ldr	lr, [sp, #36]	; 0x24
   1ac34:	ldr	r4, [r5, #40]	; 0x28
   1ac38:	str	r0, [lr, #4]
   1ac3c:	ldr	lr, [r5, #44]	; 0x2c
   1ac40:	str	ip, [sp]
   1ac44:	ldr	ip, [sp, #44]	; 0x2c
   1ac48:	str	ip, [sp, #4]
   1ac4c:	ldr	ip, [sp, #40]	; 0x28
   1ac50:	str	r4, [sp, #12]
   1ac54:	str	lr, [sp, #16]
   1ac58:	str	ip, [sp, #8]
   1ac5c:	bl	190e0 <__assert_fail@plt+0x7ccc>
   1ac60:	ldr	r3, [sp, #28]
   1ac64:	mov	r0, r7
   1ac68:	str	r3, [r8]
   1ac6c:	add	sp, sp, #60	; 0x3c
   1ac70:	ldrd	r4, [sp]
   1ac74:	ldrd	r6, [sp, #8]
   1ac78:	ldrd	r8, [sp, #16]
   1ac7c:	ldrd	sl, [sp, #24]
   1ac80:	add	sp, sp, #32
   1ac84:	pop	{pc}		; (ldr pc, [sp], #4)
   1ac88:	mov	r1, #8
   1ac8c:	mvn	r3, #-2147483648	; 0x80000000
   1ac90:	str	r1, [sp]
   1ac94:	add	r1, sp, #52	; 0x34
   1ac98:	bl	1d4cc <__assert_fail@plt+0xc0b8>
   1ac9c:	ldrd	r2, [r7, #8]
   1aca0:	mov	r6, r0
   1aca4:	str	r0, [r7]
   1aca8:	strd	r2, [r0]
   1acac:	b	1ab68 <__assert_fail@plt+0x9754>
   1acb0:	bl	113f0 <abort@plt>
   1acb4:	strd	r4, [sp, #-16]!
   1acb8:	mov	r5, r0
   1acbc:	str	r6, [sp, #8]
   1acc0:	str	lr, [sp, #12]
   1acc4:	bl	112dc <__errno_location@plt>
   1acc8:	mov	r4, r0
   1accc:	cmp	r5, #0
   1acd0:	ldr	r0, [pc, #32]	; 1acf8 <__assert_fail@plt+0x98e4>
   1acd4:	mov	r1, #48	; 0x30
   1acd8:	movne	r0, r5
   1acdc:	ldr	r6, [r4]
   1ace0:	bl	1d66c <__assert_fail@plt+0xc258>
   1ace4:	str	r6, [r4]
   1ace8:	ldrd	r4, [sp]
   1acec:	ldr	r6, [sp, #8]
   1acf0:	add	sp, sp, #12
   1acf4:	pop	{pc}		; (ldr pc, [sp], #4)
   1acf8:	strdeq	r1, [r3], -r0
   1acfc:	ldr	r3, [pc, #12]	; 1ad10 <__assert_fail@plt+0x98fc>
   1ad00:	cmp	r0, #0
   1ad04:	moveq	r0, r3
   1ad08:	ldr	r0, [r0]
   1ad0c:	bx	lr
   1ad10:	strdeq	r1, [r3], -r0
   1ad14:	ldr	r3, [pc, #12]	; 1ad28 <__assert_fail@plt+0x9914>
   1ad18:	cmp	r0, #0
   1ad1c:	moveq	r0, r3
   1ad20:	str	r1, [r0]
   1ad24:	bx	lr
   1ad28:	strdeq	r1, [r3], -r0
   1ad2c:	ldr	r3, [pc, #52]	; 1ad68 <__assert_fail@plt+0x9954>
   1ad30:	cmp	r0, #0
   1ad34:	push	{lr}		; (str lr, [sp, #-4]!)
   1ad38:	lsr	lr, r1, #5
   1ad3c:	and	r1, r1, #31
   1ad40:	moveq	r0, r3
   1ad44:	add	r3, r0, #8
   1ad48:	ldr	ip, [r3, lr, lsl #2]
   1ad4c:	lsr	r0, ip, r1
   1ad50:	eor	r2, r2, r0
   1ad54:	and	r0, r0, #1
   1ad58:	and	r2, r2, #1
   1ad5c:	eor	r1, ip, r2, lsl r1
   1ad60:	str	r1, [r3, lr, lsl #2]
   1ad64:	pop	{pc}		; (ldr pc, [sp], #4)
   1ad68:	strdeq	r1, [r3], -r0
   1ad6c:	ldr	r3, [pc, #16]	; 1ad84 <__assert_fail@plt+0x9970>
   1ad70:	cmp	r0, #0
   1ad74:	movne	r3, r0
   1ad78:	ldr	r0, [r3, #4]
   1ad7c:	str	r1, [r3, #4]
   1ad80:	bx	lr
   1ad84:	strdeq	r1, [r3], -r0
   1ad88:	ldr	r3, [pc, #48]	; 1adc0 <__assert_fail@plt+0x99ac>
   1ad8c:	cmp	r0, #0
   1ad90:	mov	ip, #10
   1ad94:	moveq	r0, r3
   1ad98:	cmp	r2, #0
   1ad9c:	cmpne	r1, #0
   1ada0:	str	ip, [r0]
   1ada4:	beq	1adb4 <__assert_fail@plt+0x99a0>
   1ada8:	str	r1, [r0, #40]	; 0x28
   1adac:	str	r2, [r0, #44]	; 0x2c
   1adb0:	bx	lr
   1adb4:	str	r4, [sp, #-8]!
   1adb8:	str	lr, [sp, #4]
   1adbc:	bl	113f0 <abort@plt>
   1adc0:	strdeq	r1, [r3], -r0
   1adc4:	strd	r4, [sp, #-28]!	; 0xffffffe4
   1adc8:	strd	r6, [sp, #8]
   1adcc:	mov	r7, r0
   1add0:	mov	r6, r1
   1add4:	strd	r8, [sp, #16]
   1add8:	mov	r8, r2
   1addc:	mov	r9, r3
   1ade0:	str	lr, [sp, #24]
   1ade4:	sub	sp, sp, #28
   1ade8:	ldr	r4, [sp, #56]	; 0x38
   1adec:	ldr	ip, [pc, #104]	; 1ae5c <__assert_fail@plt+0x9a48>
   1adf0:	cmp	r4, #0
   1adf4:	moveq	r4, ip
   1adf8:	bl	112dc <__errno_location@plt>
   1adfc:	ldr	ip, [r4, #44]	; 0x2c
   1ae00:	mov	r5, r0
   1ae04:	mov	r1, r6
   1ae08:	add	lr, r4, #8
   1ae0c:	mov	r3, r9
   1ae10:	ldr	r6, [r5]
   1ae14:	mov	r2, r8
   1ae18:	mov	r0, r7
   1ae1c:	str	ip, [sp, #16]
   1ae20:	ldr	ip, [r4, #40]	; 0x28
   1ae24:	str	lr, [sp, #8]
   1ae28:	str	ip, [sp, #12]
   1ae2c:	ldr	ip, [r4, #4]
   1ae30:	str	ip, [sp, #4]
   1ae34:	ldr	ip, [r4]
   1ae38:	str	ip, [sp]
   1ae3c:	bl	190e0 <__assert_fail@plt+0x7ccc>
   1ae40:	str	r6, [r5]
   1ae44:	add	sp, sp, #28
   1ae48:	ldrd	r4, [sp]
   1ae4c:	ldrd	r6, [sp, #8]
   1ae50:	ldrd	r8, [sp, #16]
   1ae54:	add	sp, sp, #24
   1ae58:	pop	{pc}		; (ldr pc, [sp], #4)
   1ae5c:	strdeq	r1, [r3], -r0
   1ae60:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1ae64:	cmp	r2, #0
   1ae68:	ldr	r4, [pc, #192]	; 1af30 <__assert_fail@plt+0x9b1c>
   1ae6c:	movne	r4, r2
   1ae70:	strd	r6, [sp, #8]
   1ae74:	strd	r8, [sp, #16]
   1ae78:	mov	r9, r1
   1ae7c:	mov	r8, r0
   1ae80:	strd	sl, [sp, #24]
   1ae84:	str	lr, [sp, #32]
   1ae88:	sub	sp, sp, #36	; 0x24
   1ae8c:	bl	112dc <__errno_location@plt>
   1ae90:	ldr	r5, [r4, #4]
   1ae94:	mov	r6, r0
   1ae98:	add	r7, r4, #8
   1ae9c:	mov	r1, #0
   1aea0:	mov	r3, r9
   1aea4:	ldr	ip, [r4, #44]	; 0x2c
   1aea8:	mov	r2, r8
   1aeac:	mov	r0, r1
   1aeb0:	ldr	sl, [r6]
   1aeb4:	orr	r5, r5, #1
   1aeb8:	str	ip, [sp, #16]
   1aebc:	ldr	ip, [r4, #40]	; 0x28
   1aec0:	stmib	sp, {r5, r7, ip}
   1aec4:	ldr	ip, [r4]
   1aec8:	str	ip, [sp]
   1aecc:	bl	190e0 <__assert_fail@plt+0x7ccc>
   1aed0:	add	r1, r0, #1
   1aed4:	mov	r0, r1
   1aed8:	str	r1, [sp, #28]
   1aedc:	bl	1d228 <__assert_fail@plt+0xbe14>
   1aee0:	ldr	ip, [r4, #44]	; 0x2c
   1aee4:	mov	fp, r0
   1aee8:	mov	r3, r9
   1aeec:	mov	r2, r8
   1aef0:	ldr	r1, [sp, #28]
   1aef4:	str	ip, [sp, #16]
   1aef8:	ldr	ip, [r4, #40]	; 0x28
   1aefc:	stmib	sp, {r5, r7, ip}
   1af00:	ldr	ip, [r4]
   1af04:	str	ip, [sp]
   1af08:	bl	190e0 <__assert_fail@plt+0x7ccc>
   1af0c:	mov	r0, fp
   1af10:	str	sl, [r6]
   1af14:	add	sp, sp, #36	; 0x24
   1af18:	ldrd	r4, [sp]
   1af1c:	ldrd	r6, [sp, #8]
   1af20:	ldrd	r8, [sp, #16]
   1af24:	ldrd	sl, [sp, #24]
   1af28:	add	sp, sp, #32
   1af2c:	pop	{pc}		; (ldr pc, [sp], #4)
   1af30:	strdeq	r1, [r3], -r0
   1af34:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1af38:	cmp	r3, #0
   1af3c:	ldr	r4, [pc, #220]	; 1b020 <__assert_fail@plt+0x9c0c>
   1af40:	movne	r4, r3
   1af44:	strd	r6, [sp, #8]
   1af48:	mov	r6, r2
   1af4c:	strd	r8, [sp, #16]
   1af50:	mov	r9, r0
   1af54:	strd	sl, [sp, #24]
   1af58:	mov	sl, r1
   1af5c:	str	lr, [sp, #32]
   1af60:	sub	sp, sp, #44	; 0x2c
   1af64:	bl	112dc <__errno_location@plt>
   1af68:	ldr	r5, [r4, #4]
   1af6c:	mov	r7, r0
   1af70:	mov	r1, #0
   1af74:	add	r8, r4, #8
   1af78:	mov	r3, sl
   1af7c:	ldr	ip, [r4, #44]	; 0x2c
   1af80:	mov	r2, r9
   1af84:	mov	r0, r1
   1af88:	ldr	lr, [r7]
   1af8c:	cmp	r6, r1
   1af90:	orreq	r5, r5, #1
   1af94:	str	ip, [sp, #16]
   1af98:	ldr	ip, [r4, #40]	; 0x28
   1af9c:	stmib	sp, {r5, r8, ip}
   1afa0:	ldr	ip, [r4]
   1afa4:	str	lr, [sp, #28]
   1afa8:	str	ip, [sp]
   1afac:	bl	190e0 <__assert_fail@plt+0x7ccc>
   1afb0:	add	r1, r0, #1
   1afb4:	mov	fp, r0
   1afb8:	mov	r0, r1
   1afbc:	str	r1, [sp, #36]	; 0x24
   1afc0:	bl	1d228 <__assert_fail@plt+0xbe14>
   1afc4:	ldr	ip, [r4, #44]	; 0x2c
   1afc8:	mov	r3, sl
   1afcc:	mov	r2, r9
   1afd0:	ldr	r1, [sp, #36]	; 0x24
   1afd4:	str	ip, [sp, #16]
   1afd8:	ldr	ip, [r4, #40]	; 0x28
   1afdc:	str	r0, [sp, #32]
   1afe0:	stmib	sp, {r5, r8, ip}
   1afe4:	ldr	ip, [r4]
   1afe8:	str	ip, [sp]
   1afec:	bl	190e0 <__assert_fail@plt+0x7ccc>
   1aff0:	ldr	lr, [sp, #28]
   1aff4:	cmp	r6, #0
   1aff8:	ldr	r0, [sp, #32]
   1affc:	str	lr, [r7]
   1b000:	strne	fp, [r6]
   1b004:	add	sp, sp, #44	; 0x2c
   1b008:	ldrd	r4, [sp]
   1b00c:	ldrd	r6, [sp, #8]
   1b010:	ldrd	r8, [sp, #16]
   1b014:	ldrd	sl, [sp, #24]
   1b018:	add	sp, sp, #32
   1b01c:	pop	{pc}		; (ldr pc, [sp], #4)
   1b020:	strdeq	r1, [r3], -r0
   1b024:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1b028:	movw	r5, #4460	; 0x116c
   1b02c:	movt	r5, #3
   1b030:	ldr	r3, [r5, #4]
   1b034:	strd	r6, [sp, #8]
   1b038:	str	r8, [sp, #16]
   1b03c:	str	lr, [sp, #20]
   1b040:	ldr	r7, [r5]
   1b044:	cmp	r3, #1
   1b048:	ble	1b06c <__assert_fail@plt+0x9c58>
   1b04c:	mov	r4, #1
   1b050:	add	r6, r7, #4
   1b054:	ldr	r0, [r6, r4, lsl #3]
   1b058:	add	r4, r4, #1
   1b05c:	bl	1760c <__assert_fail@plt+0x61f8>
   1b060:	ldr	r3, [r5, #4]
   1b064:	cmp	r3, r4
   1b068:	bgt	1b054 <__assert_fail@plt+0x9c40>
   1b06c:	ldr	r0, [r7, #4]
   1b070:	movw	r4, #4592	; 0x11f0
   1b074:	movt	r4, #3
   1b078:	cmp	r0, r4
   1b07c:	beq	1b090 <__assert_fail@plt+0x9c7c>
   1b080:	bl	1760c <__assert_fail@plt+0x61f8>
   1b084:	mov	r3, #256	; 0x100
   1b088:	str	r3, [r5, #8]
   1b08c:	str	r4, [r5, #12]
   1b090:	ldr	r4, [pc, #44]	; 1b0c4 <__assert_fail@plt+0x9cb0>
   1b094:	cmp	r7, r4
   1b098:	beq	1b0a8 <__assert_fail@plt+0x9c94>
   1b09c:	mov	r0, r7
   1b0a0:	bl	1760c <__assert_fail@plt+0x61f8>
   1b0a4:	str	r4, [r5]
   1b0a8:	mov	r3, #1
   1b0ac:	ldrd	r6, [sp, #8]
   1b0b0:	str	r3, [r5, #4]
   1b0b4:	ldrd	r4, [sp]
   1b0b8:	ldr	r8, [sp, #16]
   1b0bc:	add	sp, sp, #20
   1b0c0:	pop	{pc}		; (ldr pc, [sp], #4)
   1b0c4:	andeq	r1, r3, r4, ror r1
   1b0c8:	ldr	r3, [pc, #4]	; 1b0d4 <__assert_fail@plt+0x9cc0>
   1b0cc:	mvn	r2, #0
   1b0d0:	b	1aacc <__assert_fail@plt+0x96b8>
   1b0d4:	strdeq	r1, [r3], -r0
   1b0d8:	ldr	r3, [pc]	; 1b0e0 <__assert_fail@plt+0x9ccc>
   1b0dc:	b	1aacc <__assert_fail@plt+0x96b8>
   1b0e0:	strdeq	r1, [r3], -r0
   1b0e4:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1b0e8:	movw	r4, #4460	; 0x116c
   1b0ec:	movt	r4, #3
   1b0f0:	strd	r6, [sp, #8]
   1b0f4:	strd	r8, [sp, #16]
   1b0f8:	strd	sl, [sp, #24]
   1b0fc:	mov	sl, r0
   1b100:	str	lr, [sp, #32]
   1b104:	sub	sp, sp, #44	; 0x2c
   1b108:	bl	112dc <__errno_location@plt>
   1b10c:	ldr	r3, [r0]
   1b110:	mov	r8, r0
   1b114:	ldr	r2, [r4, #4]
   1b118:	ldr	r5, [r4]
   1b11c:	str	r3, [sp, #28]
   1b120:	cmp	r2, #0
   1b124:	bgt	1b180 <__assert_fail@plt+0x9d6c>
   1b128:	add	r3, r4, #8
   1b12c:	str	r2, [sp, #36]	; 0x24
   1b130:	rsb	r2, r2, #1
   1b134:	cmp	r5, r3
   1b138:	beq	1b24c <__assert_fail@plt+0x9e38>
   1b13c:	mov	r1, #8
   1b140:	mov	r0, r5
   1b144:	mvn	r3, #-2147483648	; 0x80000000
   1b148:	str	r1, [sp]
   1b14c:	add	r1, sp, #36	; 0x24
   1b150:	bl	1d4cc <__assert_fail@plt+0xc0b8>
   1b154:	mov	r5, r0
   1b158:	str	r0, [r4]
   1b15c:	ldr	r0, [r4, #4]
   1b160:	mov	r1, #0
   1b164:	ldr	r2, [sp, #36]	; 0x24
   1b168:	sub	r2, r2, r0
   1b16c:	add	r0, r5, r0, lsl #3
   1b170:	lsl	r2, r2, #3
   1b174:	bl	112f4 <memset@plt>
   1b178:	ldr	r3, [sp, #36]	; 0x24
   1b17c:	str	r3, [r4, #4]
   1b180:	movw	r4, #4592	; 0x11f0
   1b184:	movt	r4, #3
   1b188:	ldr	r9, [r5]
   1b18c:	add	fp, r4, #264	; 0x108
   1b190:	mvn	r3, #0
   1b194:	ldr	r7, [r4, #260]	; 0x104
   1b198:	mov	r2, sl
   1b19c:	ldr	r6, [r5, #4]
   1b1a0:	str	fp, [sp, #8]
   1b1a4:	mov	r1, r9
   1b1a8:	ldr	ip, [r4, #256]	; 0x100
   1b1ac:	orr	r7, r7, #1
   1b1b0:	ldr	lr, [r4, #300]	; 0x12c
   1b1b4:	mov	r0, r6
   1b1b8:	str	ip, [sp]
   1b1bc:	str	r7, [sp, #4]
   1b1c0:	str	lr, [sp, #16]
   1b1c4:	ldr	ip, [r4, #296]	; 0x128
   1b1c8:	str	ip, [sp, #12]
   1b1cc:	bl	190e0 <__assert_fail@plt+0x7ccc>
   1b1d0:	cmp	r9, r0
   1b1d4:	bhi	1b224 <__assert_fail@plt+0x9e10>
   1b1d8:	add	r9, r0, #1
   1b1dc:	cmp	r6, r4
   1b1e0:	str	r9, [r5]
   1b1e4:	beq	1b1f0 <__assert_fail@plt+0x9ddc>
   1b1e8:	mov	r0, r6
   1b1ec:	bl	1760c <__assert_fail@plt+0x61f8>
   1b1f0:	mov	r0, r9
   1b1f4:	bl	1d228 <__assert_fail@plt+0xbe14>
   1b1f8:	ldr	r3, [r4, #256]	; 0x100
   1b1fc:	mov	r2, sl
   1b200:	mov	r1, r9
   1b204:	mov	r6, r0
   1b208:	ldr	lr, [r4, #296]	; 0x128
   1b20c:	ldr	ip, [r4, #300]	; 0x12c
   1b210:	str	r0, [r5, #4]
   1b214:	stm	sp, {r3, r7, fp, lr}
   1b218:	mvn	r3, #0
   1b21c:	str	ip, [sp, #16]
   1b220:	bl	190e0 <__assert_fail@plt+0x7ccc>
   1b224:	ldr	r3, [sp, #28]
   1b228:	mov	r0, r6
   1b22c:	str	r3, [r8]
   1b230:	add	sp, sp, #44	; 0x2c
   1b234:	ldrd	r4, [sp]
   1b238:	ldrd	r6, [sp, #8]
   1b23c:	ldrd	r8, [sp, #16]
   1b240:	ldrd	sl, [sp, #24]
   1b244:	add	sp, sp, #32
   1b248:	pop	{pc}		; (ldr pc, [sp], #4)
   1b24c:	mov	r0, #8
   1b250:	mvn	r3, #-2147483648	; 0x80000000
   1b254:	add	r1, sp, #36	; 0x24
   1b258:	str	r0, [sp]
   1b25c:	mov	r0, #0
   1b260:	bl	1d4cc <__assert_fail@plt+0xc0b8>
   1b264:	ldrd	r2, [r4, #8]
   1b268:	mov	r5, r0
   1b26c:	str	r0, [r4]
   1b270:	strd	r2, [r0]
   1b274:	b	1b15c <__assert_fail@plt+0x9d48>
   1b278:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1b27c:	movw	r4, #4460	; 0x116c
   1b280:	movt	r4, #3
   1b284:	strd	r6, [sp, #8]
   1b288:	strd	r8, [sp, #16]
   1b28c:	strd	sl, [sp, #24]
   1b290:	mov	sl, r0
   1b294:	mov	fp, r1
   1b298:	str	lr, [sp, #32]
   1b29c:	sub	sp, sp, #44	; 0x2c
   1b2a0:	bl	112dc <__errno_location@plt>
   1b2a4:	ldr	r3, [r0]
   1b2a8:	mov	r8, r0
   1b2ac:	ldr	r2, [r4, #4]
   1b2b0:	ldr	r5, [r4]
   1b2b4:	str	r3, [sp, #28]
   1b2b8:	cmp	r2, #0
   1b2bc:	bgt	1b318 <__assert_fail@plt+0x9f04>
   1b2c0:	add	r3, r4, #8
   1b2c4:	str	r2, [sp, #36]	; 0x24
   1b2c8:	rsb	r2, r2, #1
   1b2cc:	cmp	r5, r3
   1b2d0:	beq	1b3f4 <__assert_fail@plt+0x9fe0>
   1b2d4:	mov	r1, #8
   1b2d8:	mov	r0, r5
   1b2dc:	mvn	r3, #-2147483648	; 0x80000000
   1b2e0:	str	r1, [sp]
   1b2e4:	add	r1, sp, #36	; 0x24
   1b2e8:	bl	1d4cc <__assert_fail@plt+0xc0b8>
   1b2ec:	mov	r5, r0
   1b2f0:	str	r0, [r4]
   1b2f4:	ldr	r0, [r4, #4]
   1b2f8:	mov	r1, #0
   1b2fc:	ldr	r2, [sp, #36]	; 0x24
   1b300:	sub	r2, r2, r0
   1b304:	add	r0, r5, r0, lsl #3
   1b308:	lsl	r2, r2, #3
   1b30c:	bl	112f4 <memset@plt>
   1b310:	ldr	r3, [sp, #36]	; 0x24
   1b314:	str	r3, [r4, #4]
   1b318:	movw	r4, #4592	; 0x11f0
   1b31c:	movt	r4, #3
   1b320:	ldr	r9, [r5]
   1b324:	add	r0, r4, #264	; 0x108
   1b328:	mov	r3, fp
   1b32c:	ldr	r7, [r4, #260]	; 0x104
   1b330:	mov	r2, sl
   1b334:	ldr	r6, [r5, #4]
   1b338:	str	r0, [sp, #8]
   1b33c:	mov	r1, r9
   1b340:	ldr	ip, [r4, #256]	; 0x100
   1b344:	orr	r7, r7, #1
   1b348:	ldr	lr, [r4, #300]	; 0x12c
   1b34c:	mov	r0, r6
   1b350:	str	ip, [sp]
   1b354:	str	r7, [sp, #4]
   1b358:	str	lr, [sp, #16]
   1b35c:	ldr	ip, [r4, #296]	; 0x128
   1b360:	str	ip, [sp, #12]
   1b364:	bl	190e0 <__assert_fail@plt+0x7ccc>
   1b368:	cmp	r9, r0
   1b36c:	bhi	1b3cc <__assert_fail@plt+0x9fb8>
   1b370:	add	r9, r0, #1
   1b374:	cmp	r6, r4
   1b378:	str	r9, [r5]
   1b37c:	beq	1b388 <__assert_fail@plt+0x9f74>
   1b380:	mov	r0, r6
   1b384:	bl	1760c <__assert_fail@plt+0x61f8>
   1b388:	mov	r0, r9
   1b38c:	bl	1d228 <__assert_fail@plt+0xbe14>
   1b390:	ldr	ip, [r4, #256]	; 0x100
   1b394:	mov	r1, r9
   1b398:	mov	r3, fp
   1b39c:	mov	r2, sl
   1b3a0:	mov	r6, r0
   1b3a4:	ldr	r9, [r4, #296]	; 0x128
   1b3a8:	ldr	lr, [r4, #300]	; 0x12c
   1b3ac:	str	r0, [r5, #4]
   1b3b0:	str	ip, [sp]
   1b3b4:	ldr	ip, [pc, #100]	; 1b420 <__assert_fail@plt+0xa00c>
   1b3b8:	str	r7, [sp, #4]
   1b3bc:	str	ip, [sp, #8]
   1b3c0:	str	r9, [sp, #12]
   1b3c4:	str	lr, [sp, #16]
   1b3c8:	bl	190e0 <__assert_fail@plt+0x7ccc>
   1b3cc:	ldr	r3, [sp, #28]
   1b3d0:	mov	r0, r6
   1b3d4:	str	r3, [r8]
   1b3d8:	add	sp, sp, #44	; 0x2c
   1b3dc:	ldrd	r4, [sp]
   1b3e0:	ldrd	r6, [sp, #8]
   1b3e4:	ldrd	r8, [sp, #16]
   1b3e8:	ldrd	sl, [sp, #24]
   1b3ec:	add	sp, sp, #32
   1b3f0:	pop	{pc}		; (ldr pc, [sp], #4)
   1b3f4:	mov	r0, #8
   1b3f8:	mvn	r3, #-2147483648	; 0x80000000
   1b3fc:	add	r1, sp, #36	; 0x24
   1b400:	str	r0, [sp]
   1b404:	mov	r0, #0
   1b408:	bl	1d4cc <__assert_fail@plt+0xc0b8>
   1b40c:	ldrd	r2, [r4, #8]
   1b410:	mov	r5, r0
   1b414:	str	r0, [r4]
   1b418:	strd	r2, [r0]
   1b41c:	b	1b2f4 <__assert_fail@plt+0x9ee0>
   1b420:	strdeq	r1, [r3], -r8
   1b424:	strd	r4, [sp, #-20]!	; 0xffffffec
   1b428:	mov	r4, #0
   1b42c:	mov	r5, #0
   1b430:	strd	r6, [sp, #8]
   1b434:	cmp	r1, #10
   1b438:	str	lr, [sp, #16]
   1b43c:	sub	sp, sp, #100	; 0x64
   1b440:	strd	r4, [sp, #48]	; 0x30
   1b444:	beq	1b48c <__assert_fail@plt+0xa078>
   1b448:	mov	r3, sp
   1b44c:	strd	r4, [sp, #8]
   1b450:	str	r1, [sp, #48]	; 0x30
   1b454:	mov	r1, r2
   1b458:	mvn	r2, #0
   1b45c:	ldrd	r6, [sp, #48]	; 0x30
   1b460:	strd	r6, [sp]
   1b464:	strd	r4, [sp, #16]
   1b468:	strd	r4, [sp, #24]
   1b46c:	strd	r4, [sp, #32]
   1b470:	strd	r4, [sp, #40]	; 0x28
   1b474:	bl	1aacc <__assert_fail@plt+0x96b8>
   1b478:	add	sp, sp, #100	; 0x64
   1b47c:	ldrd	r4, [sp]
   1b480:	ldrd	r6, [sp, #8]
   1b484:	add	sp, sp, #16
   1b488:	pop	{pc}		; (ldr pc, [sp], #4)
   1b48c:	bl	113f0 <abort@plt>
   1b490:	strd	r4, [sp, #-20]!	; 0xffffffec
   1b494:	mov	r4, #0
   1b498:	mov	r5, #0
   1b49c:	strd	r6, [sp, #8]
   1b4a0:	cmp	r1, #10
   1b4a4:	str	lr, [sp, #16]
   1b4a8:	sub	sp, sp, #100	; 0x64
   1b4ac:	strd	r4, [sp, #48]	; 0x30
   1b4b0:	beq	1b4fc <__assert_fail@plt+0xa0e8>
   1b4b4:	mov	ip, r2
   1b4b8:	mov	r2, r3
   1b4bc:	strd	r4, [sp, #8]
   1b4c0:	str	r1, [sp, #48]	; 0x30
   1b4c4:	mov	r3, sp
   1b4c8:	mov	r1, ip
   1b4cc:	ldrd	r6, [sp, #48]	; 0x30
   1b4d0:	strd	r6, [sp]
   1b4d4:	strd	r4, [sp, #16]
   1b4d8:	strd	r4, [sp, #24]
   1b4dc:	strd	r4, [sp, #32]
   1b4e0:	strd	r4, [sp, #40]	; 0x28
   1b4e4:	bl	1aacc <__assert_fail@plt+0x96b8>
   1b4e8:	add	sp, sp, #100	; 0x64
   1b4ec:	ldrd	r4, [sp]
   1b4f0:	ldrd	r6, [sp, #8]
   1b4f4:	add	sp, sp, #16
   1b4f8:	pop	{pc}		; (ldr pc, [sp], #4)
   1b4fc:	bl	113f0 <abort@plt>
   1b500:	mov	r2, #0
   1b504:	mov	r3, #0
   1b508:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1b50c:	strd	r6, [sp, #8]
   1b510:	cmp	r0, #10
   1b514:	strd	r8, [sp, #16]
   1b518:	strd	sl, [sp, #24]
   1b51c:	str	lr, [sp, #32]
   1b520:	sub	sp, sp, #124	; 0x7c
   1b524:	strd	r2, [sp, #72]	; 0x48
   1b528:	strd	r2, [sp, #80]	; 0x50
   1b52c:	strd	r2, [sp, #88]	; 0x58
   1b530:	strd	r2, [sp, #96]	; 0x60
   1b534:	strd	r2, [sp, #104]	; 0x68
   1b538:	strd	r2, [sp, #112]	; 0x70
   1b53c:	beq	1b6e0 <__assert_fail@plt+0xa2cc>
   1b540:	mov	r6, r1
   1b544:	movw	r4, #4460	; 0x116c
   1b548:	movt	r4, #3
   1b54c:	str	r0, [sp, #72]	; 0x48
   1b550:	ldrd	r0, [sp, #72]	; 0x48
   1b554:	strd	r0, [sp, #24]
   1b558:	strd	r2, [sp, #32]
   1b55c:	strd	r2, [sp, #40]	; 0x28
   1b560:	strd	r2, [sp, #48]	; 0x30
   1b564:	strd	r2, [sp, #56]	; 0x38
   1b568:	strd	r2, [sp, #64]	; 0x40
   1b56c:	bl	112dc <__errno_location@plt>
   1b570:	mov	r8, r0
   1b574:	ldr	r5, [r4]
   1b578:	ldr	r2, [r4, #4]
   1b57c:	ldr	r9, [r0]
   1b580:	cmp	r2, #0
   1b584:	bgt	1b5e0 <__assert_fail@plt+0xa1cc>
   1b588:	add	r3, r4, #8
   1b58c:	str	r2, [sp, #72]	; 0x48
   1b590:	rsb	r2, r2, #1
   1b594:	cmp	r5, r3
   1b598:	beq	1b6b4 <__assert_fail@plt+0xa2a0>
   1b59c:	mov	r3, #8
   1b5a0:	mov	r0, r5
   1b5a4:	add	r1, sp, #72	; 0x48
   1b5a8:	str	r3, [sp]
   1b5ac:	mvn	r3, #-2147483648	; 0x80000000
   1b5b0:	bl	1d4cc <__assert_fail@plt+0xc0b8>
   1b5b4:	mov	r5, r0
   1b5b8:	str	r0, [r4]
   1b5bc:	ldr	r0, [r4, #4]
   1b5c0:	mov	r1, #0
   1b5c4:	ldr	r2, [sp, #72]	; 0x48
   1b5c8:	sub	r2, r2, r0
   1b5cc:	add	r0, r5, r0, lsl #3
   1b5d0:	lsl	r2, r2, #3
   1b5d4:	bl	112f4 <memset@plt>
   1b5d8:	ldr	r3, [sp, #72]	; 0x48
   1b5dc:	str	r3, [r4, #4]
   1b5e0:	ldr	sl, [r5]
   1b5e4:	add	r0, sp, #32
   1b5e8:	mvn	r3, #0
   1b5ec:	mov	r2, r6
   1b5f0:	ldr	r7, [sp, #28]
   1b5f4:	ldr	r4, [r5, #4]
   1b5f8:	mov	r1, sl
   1b5fc:	str	r0, [sp, #8]
   1b600:	ldr	lr, [sp, #24]
   1b604:	orr	r7, r7, #1
   1b608:	ldr	ip, [sp, #64]	; 0x40
   1b60c:	mov	r0, r4
   1b610:	ldr	fp, [sp, #68]	; 0x44
   1b614:	str	lr, [sp]
   1b618:	str	r7, [sp, #4]
   1b61c:	str	ip, [sp, #12]
   1b620:	str	fp, [sp, #16]
   1b624:	bl	190e0 <__assert_fail@plt+0x7ccc>
   1b628:	cmp	sl, r0
   1b62c:	bhi	1b690 <__assert_fail@plt+0xa27c>
   1b630:	add	sl, r0, #1
   1b634:	movw	r3, #4592	; 0x11f0
   1b638:	movt	r3, #3
   1b63c:	cmp	r4, r3
   1b640:	str	sl, [r5]
   1b644:	beq	1b650 <__assert_fail@plt+0xa23c>
   1b648:	mov	r0, r4
   1b64c:	bl	1760c <__assert_fail@plt+0x61f8>
   1b650:	mov	r0, sl
   1b654:	bl	1d228 <__assert_fail@plt+0xbe14>
   1b658:	ldr	r3, [sp, #24]
   1b65c:	mov	r2, r6
   1b660:	mov	r1, sl
   1b664:	mov	r4, r0
   1b668:	ldr	lr, [sp, #64]	; 0x40
   1b66c:	ldr	ip, [sp, #68]	; 0x44
   1b670:	str	r0, [r5, #4]
   1b674:	add	r5, sp, #32
   1b678:	stm	sp, {r3, r7}
   1b67c:	mvn	r3, #0
   1b680:	str	r5, [sp, #8]
   1b684:	str	lr, [sp, #12]
   1b688:	str	ip, [sp, #16]
   1b68c:	bl	190e0 <__assert_fail@plt+0x7ccc>
   1b690:	mov	r0, r4
   1b694:	str	r9, [r8]
   1b698:	add	sp, sp, #124	; 0x7c
   1b69c:	ldrd	r4, [sp]
   1b6a0:	ldrd	r6, [sp, #8]
   1b6a4:	ldrd	r8, [sp, #16]
   1b6a8:	ldrd	sl, [sp, #24]
   1b6ac:	add	sp, sp, #32
   1b6b0:	pop	{pc}		; (ldr pc, [sp], #4)
   1b6b4:	mov	r0, #8
   1b6b8:	mvn	r3, #-2147483648	; 0x80000000
   1b6bc:	add	r1, sp, #72	; 0x48
   1b6c0:	str	r0, [sp]
   1b6c4:	mov	r0, #0
   1b6c8:	bl	1d4cc <__assert_fail@plt+0xc0b8>
   1b6cc:	ldrd	r2, [r4, #8]
   1b6d0:	mov	r5, r0
   1b6d4:	str	r0, [r4]
   1b6d8:	strd	r2, [r0]
   1b6dc:	b	1b5bc <__assert_fail@plt+0xa1a8>
   1b6e0:	bl	113f0 <abort@plt>
   1b6e4:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1b6e8:	cmp	r0, #10
   1b6ec:	strd	r6, [sp, #8]
   1b6f0:	mov	r6, #0
   1b6f4:	mov	r7, #0
   1b6f8:	strd	r8, [sp, #16]
   1b6fc:	strd	sl, [sp, #24]
   1b700:	str	lr, [sp, #32]
   1b704:	sub	sp, sp, #124	; 0x7c
   1b708:	strd	r6, [sp, #72]	; 0x48
   1b70c:	strd	r6, [sp, #80]	; 0x50
   1b710:	strd	r6, [sp, #88]	; 0x58
   1b714:	strd	r6, [sp, #96]	; 0x60
   1b718:	strd	r6, [sp, #104]	; 0x68
   1b71c:	strd	r6, [sp, #112]	; 0x70
   1b720:	beq	1b8cc <__assert_fail@plt+0xa4b8>
   1b724:	mov	sl, r2
   1b728:	movw	r5, #4460	; 0x116c
   1b72c:	movt	r5, #3
   1b730:	str	r0, [sp, #72]	; 0x48
   1b734:	mov	r9, r1
   1b738:	ldrd	r2, [sp, #72]	; 0x48
   1b73c:	strd	r2, [sp, #24]
   1b740:	strd	r6, [sp, #32]
   1b744:	strd	r6, [sp, #40]	; 0x28
   1b748:	strd	r6, [sp, #48]	; 0x30
   1b74c:	strd	r6, [sp, #56]	; 0x38
   1b750:	strd	r6, [sp, #64]	; 0x40
   1b754:	bl	112dc <__errno_location@plt>
   1b758:	mov	r7, r0
   1b75c:	ldr	r4, [r5]
   1b760:	ldr	r2, [r5, #4]
   1b764:	ldr	fp, [r0]
   1b768:	cmp	r2, #0
   1b76c:	bgt	1b7c8 <__assert_fail@plt+0xa3b4>
   1b770:	add	r3, r5, #8
   1b774:	str	r2, [sp, #72]	; 0x48
   1b778:	rsb	r2, r2, #1
   1b77c:	cmp	r4, r3
   1b780:	beq	1b8a0 <__assert_fail@plt+0xa48c>
   1b784:	mov	r3, #8
   1b788:	mov	r0, r4
   1b78c:	add	r1, sp, #72	; 0x48
   1b790:	str	r3, [sp]
   1b794:	mvn	r3, #-2147483648	; 0x80000000
   1b798:	bl	1d4cc <__assert_fail@plt+0xc0b8>
   1b79c:	mov	r4, r0
   1b7a0:	str	r0, [r5]
   1b7a4:	ldr	r0, [r5, #4]
   1b7a8:	mov	r1, #0
   1b7ac:	ldr	r2, [sp, #72]	; 0x48
   1b7b0:	sub	r2, r2, r0
   1b7b4:	add	r0, r4, r0, lsl #3
   1b7b8:	lsl	r2, r2, #3
   1b7bc:	bl	112f4 <memset@plt>
   1b7c0:	ldr	r3, [sp, #72]	; 0x48
   1b7c4:	str	r3, [r5, #4]
   1b7c8:	ldr	ip, [sp, #24]
   1b7cc:	add	r0, sp, #32
   1b7d0:	mov	r3, sl
   1b7d4:	mov	r2, r9
   1b7d8:	ldr	r6, [sp, #28]
   1b7dc:	ldr	r8, [r4]
   1b7e0:	ldr	r5, [r4, #4]
   1b7e4:	str	ip, [sp]
   1b7e8:	orr	r6, r6, #1
   1b7ec:	ldr	ip, [sp, #64]	; 0x40
   1b7f0:	mov	r1, r8
   1b7f4:	str	r6, [sp, #4]
   1b7f8:	ldr	lr, [sp, #68]	; 0x44
   1b7fc:	str	r0, [sp, #8]
   1b800:	mov	r0, r5
   1b804:	str	ip, [sp, #12]
   1b808:	str	lr, [sp, #16]
   1b80c:	bl	190e0 <__assert_fail@plt+0x7ccc>
   1b810:	cmp	r8, r0
   1b814:	bhi	1b87c <__assert_fail@plt+0xa468>
   1b818:	add	r8, r0, #1
   1b81c:	movw	r3, #4592	; 0x11f0
   1b820:	movt	r3, #3
   1b824:	cmp	r5, r3
   1b828:	str	r8, [r4]
   1b82c:	beq	1b838 <__assert_fail@plt+0xa424>
   1b830:	mov	r0, r5
   1b834:	bl	1760c <__assert_fail@plt+0x61f8>
   1b838:	mov	r0, r8
   1b83c:	bl	1d228 <__assert_fail@plt+0xbe14>
   1b840:	ldr	lr, [sp, #24]
   1b844:	mov	r1, r8
   1b848:	mov	r3, sl
   1b84c:	mov	r2, r9
   1b850:	mov	r5, r0
   1b854:	ldr	r8, [sp, #64]	; 0x40
   1b858:	ldr	ip, [sp, #68]	; 0x44
   1b85c:	str	r0, [r4, #4]
   1b860:	str	lr, [sp]
   1b864:	add	lr, sp, #32
   1b868:	str	r6, [sp, #4]
   1b86c:	str	lr, [sp, #8]
   1b870:	str	r8, [sp, #12]
   1b874:	str	ip, [sp, #16]
   1b878:	bl	190e0 <__assert_fail@plt+0x7ccc>
   1b87c:	mov	r0, r5
   1b880:	str	fp, [r7]
   1b884:	add	sp, sp, #124	; 0x7c
   1b888:	ldrd	r4, [sp]
   1b88c:	ldrd	r6, [sp, #8]
   1b890:	ldrd	r8, [sp, #16]
   1b894:	ldrd	sl, [sp, #24]
   1b898:	add	sp, sp, #32
   1b89c:	pop	{pc}		; (ldr pc, [sp], #4)
   1b8a0:	mov	r0, #8
   1b8a4:	mvn	r3, #-2147483648	; 0x80000000
   1b8a8:	add	r1, sp, #72	; 0x48
   1b8ac:	str	r0, [sp]
   1b8b0:	mov	r0, #0
   1b8b4:	bl	1d4cc <__assert_fail@plt+0xc0b8>
   1b8b8:	ldrd	r2, [r5, #8]
   1b8bc:	mov	r4, r0
   1b8c0:	str	r0, [r5]
   1b8c4:	strd	r2, [r0]
   1b8c8:	b	1b7a4 <__assert_fail@plt+0xa390>
   1b8cc:	bl	113f0 <abort@plt>
   1b8d0:	ldr	r3, [pc, #492]	; 1bac4 <__assert_fail@plt+0xa6b0>
   1b8d4:	lsr	ip, r2, #5
   1b8d8:	and	r2, r2, #31
   1b8dc:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1b8e0:	movw	r5, #4460	; 0x116c
   1b8e4:	movt	r5, #3
   1b8e8:	strd	r6, [sp, #8]
   1b8ec:	strd	r8, [sp, #16]
   1b8f0:	strd	sl, [sp, #24]
   1b8f4:	mov	sl, r0
   1b8f8:	mov	fp, r1
   1b8fc:	ldrd	r0, [r3]
   1b900:	str	lr, [sp, #32]
   1b904:	sub	sp, sp, #92	; 0x5c
   1b908:	ldrd	r8, [r3, #8]
   1b90c:	add	r6, sp, #48	; 0x30
   1b910:	strd	r0, [sp, #40]	; 0x28
   1b914:	ldrd	r0, [r3, #16]
   1b918:	strd	r8, [sp, #48]	; 0x30
   1b91c:	ldrd	r8, [r3, #24]
   1b920:	strd	r0, [sp, #56]	; 0x38
   1b924:	ldrd	r0, [r3, #32]
   1b928:	strd	r8, [sp, #64]	; 0x40
   1b92c:	ldrd	r8, [r3, #40]	; 0x28
   1b930:	strd	r0, [sp, #72]	; 0x48
   1b934:	strd	r8, [sp, #80]	; 0x50
   1b938:	ldr	r3, [r6, ip, lsl #2]
   1b93c:	mvn	r1, r3, lsr r2
   1b940:	and	r1, r1, #1
   1b944:	eor	r2, r3, r1, lsl r2
   1b948:	str	r2, [r6, ip, lsl #2]
   1b94c:	bl	112dc <__errno_location@plt>
   1b950:	ldr	r3, [r0]
   1b954:	mov	r8, r0
   1b958:	ldr	r2, [r5, #4]
   1b95c:	ldr	r4, [r5]
   1b960:	str	r3, [sp, #28]
   1b964:	cmp	r2, #0
   1b968:	bgt	1b9c4 <__assert_fail@plt+0xa5b0>
   1b96c:	add	r3, r5, #8
   1b970:	str	r2, [sp, #36]	; 0x24
   1b974:	rsb	r2, r2, #1
   1b978:	cmp	r4, r3
   1b97c:	beq	1ba98 <__assert_fail@plt+0xa684>
   1b980:	mov	r1, #8
   1b984:	mov	r0, r4
   1b988:	mvn	r3, #-2147483648	; 0x80000000
   1b98c:	str	r1, [sp]
   1b990:	add	r1, sp, #36	; 0x24
   1b994:	bl	1d4cc <__assert_fail@plt+0xc0b8>
   1b998:	mov	r4, r0
   1b99c:	str	r0, [r5]
   1b9a0:	ldr	r0, [r5, #4]
   1b9a4:	mov	r1, #0
   1b9a8:	ldr	r2, [sp, #36]	; 0x24
   1b9ac:	sub	r2, r2, r0
   1b9b0:	add	r0, r4, r0, lsl #3
   1b9b4:	lsl	r2, r2, #3
   1b9b8:	bl	112f4 <memset@plt>
   1b9bc:	ldr	r3, [sp, #36]	; 0x24
   1b9c0:	str	r3, [r5, #4]
   1b9c4:	ldr	ip, [sp, #40]	; 0x28
   1b9c8:	mov	r3, fp
   1b9cc:	mov	r2, sl
   1b9d0:	ldr	r7, [sp, #44]	; 0x2c
   1b9d4:	ldr	r9, [r4]
   1b9d8:	ldr	r5, [r4, #4]
   1b9dc:	str	ip, [sp]
   1b9e0:	orr	r7, r7, #1
   1b9e4:	ldr	ip, [sp, #80]	; 0x50
   1b9e8:	mov	r1, r9
   1b9ec:	str	r7, [sp, #4]
   1b9f0:	ldr	lr, [sp, #84]	; 0x54
   1b9f4:	mov	r0, r5
   1b9f8:	str	r6, [sp, #8]
   1b9fc:	str	ip, [sp, #12]
   1ba00:	str	lr, [sp, #16]
   1ba04:	bl	190e0 <__assert_fail@plt+0x7ccc>
   1ba08:	cmp	r9, r0
   1ba0c:	bhi	1ba70 <__assert_fail@plt+0xa65c>
   1ba10:	add	r9, r0, #1
   1ba14:	movw	r3, #4592	; 0x11f0
   1ba18:	movt	r3, #3
   1ba1c:	cmp	r5, r3
   1ba20:	str	r9, [r4]
   1ba24:	beq	1ba30 <__assert_fail@plt+0xa61c>
   1ba28:	mov	r0, r5
   1ba2c:	bl	1760c <__assert_fail@plt+0x61f8>
   1ba30:	mov	r0, r9
   1ba34:	bl	1d228 <__assert_fail@plt+0xbe14>
   1ba38:	mov	r1, r9
   1ba3c:	ldr	ip, [sp, #40]	; 0x28
   1ba40:	mov	r3, fp
   1ba44:	mov	r2, sl
   1ba48:	mov	r5, r0
   1ba4c:	ldr	r9, [sp, #80]	; 0x50
   1ba50:	ldr	lr, [sp, #84]	; 0x54
   1ba54:	str	r0, [r4, #4]
   1ba58:	str	ip, [sp]
   1ba5c:	str	r7, [sp, #4]
   1ba60:	str	r6, [sp, #8]
   1ba64:	str	r9, [sp, #12]
   1ba68:	str	lr, [sp, #16]
   1ba6c:	bl	190e0 <__assert_fail@plt+0x7ccc>
   1ba70:	ldr	r3, [sp, #28]
   1ba74:	mov	r0, r5
   1ba78:	str	r3, [r8]
   1ba7c:	add	sp, sp, #92	; 0x5c
   1ba80:	ldrd	r4, [sp]
   1ba84:	ldrd	r6, [sp, #8]
   1ba88:	ldrd	r8, [sp, #16]
   1ba8c:	ldrd	sl, [sp, #24]
   1ba90:	add	sp, sp, #32
   1ba94:	pop	{pc}		; (ldr pc, [sp], #4)
   1ba98:	mov	r0, #8
   1ba9c:	mvn	r3, #-2147483648	; 0x80000000
   1baa0:	add	r1, sp, #36	; 0x24
   1baa4:	str	r0, [sp]
   1baa8:	mov	r0, #0
   1baac:	bl	1d4cc <__assert_fail@plt+0xc0b8>
   1bab0:	ldrd	r2, [r5, #8]
   1bab4:	mov	r4, r0
   1bab8:	str	r0, [r5]
   1babc:	strd	r2, [r0]
   1bac0:	b	1b9a0 <__assert_fail@plt+0xa58c>
   1bac4:	strdeq	r1, [r3], -r0
   1bac8:	ldr	ip, [pc, #476]	; 1bcac <__assert_fail@plt+0xa898>
   1bacc:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1bad0:	movw	r4, #4460	; 0x116c
   1bad4:	movt	r4, #3
   1bad8:	ldrd	r2, [ip, #8]
   1badc:	strd	r6, [sp, #8]
   1bae0:	lsr	r7, r1, #5
   1bae4:	mov	r6, r0
   1bae8:	strd	r8, [sp, #16]
   1baec:	str	lr, [sp, #32]
   1baf0:	and	lr, r1, #31
   1baf4:	ldrd	r0, [ip]
   1baf8:	strd	sl, [sp, #24]
   1bafc:	sub	sp, sp, #84	; 0x54
   1bb00:	add	r5, sp, #40	; 0x28
   1bb04:	strd	r0, [sp, #32]
   1bb08:	strd	r2, [sp, #40]	; 0x28
   1bb0c:	ldrd	r0, [ip, #16]
   1bb10:	ldrd	r2, [ip, #24]
   1bb14:	strd	r0, [sp, #48]	; 0x30
   1bb18:	ldrd	r0, [ip, #32]
   1bb1c:	strd	r2, [sp, #56]	; 0x38
   1bb20:	ldrd	r2, [ip, #40]	; 0x28
   1bb24:	strd	r0, [sp, #64]	; 0x40
   1bb28:	strd	r2, [sp, #72]	; 0x48
   1bb2c:	ldr	r1, [r5, r7, lsl #2]
   1bb30:	mvn	r3, r1, lsr lr
   1bb34:	and	r3, r3, #1
   1bb38:	eor	r1, r1, r3, lsl lr
   1bb3c:	str	r1, [r5, r7, lsl #2]
   1bb40:	bl	112dc <__errno_location@plt>
   1bb44:	mov	r9, r0
   1bb48:	ldr	sl, [r0]
   1bb4c:	ldr	r2, [r4, #4]
   1bb50:	ldr	r7, [r4]
   1bb54:	cmp	r2, #0
   1bb58:	bgt	1bbb4 <__assert_fail@plt+0xa7a0>
   1bb5c:	add	r3, r4, #8
   1bb60:	str	r2, [sp, #28]
   1bb64:	rsb	r2, r2, #1
   1bb68:	cmp	r7, r3
   1bb6c:	beq	1bc80 <__assert_fail@plt+0xa86c>
   1bb70:	mov	r1, #8
   1bb74:	mov	r0, r7
   1bb78:	mvn	r3, #-2147483648	; 0x80000000
   1bb7c:	str	r1, [sp]
   1bb80:	add	r1, sp, #28
   1bb84:	bl	1d4cc <__assert_fail@plt+0xc0b8>
   1bb88:	mov	r7, r0
   1bb8c:	str	r0, [r4]
   1bb90:	ldr	r0, [r4, #4]
   1bb94:	mov	r1, #0
   1bb98:	ldr	r2, [sp, #28]
   1bb9c:	sub	r2, r2, r0
   1bba0:	add	r0, r7, r0, lsl #3
   1bba4:	lsl	r2, r2, #3
   1bba8:	bl	112f4 <memset@plt>
   1bbac:	ldr	r3, [sp, #28]
   1bbb0:	str	r3, [r4, #4]
   1bbb4:	ldr	ip, [sp, #32]
   1bbb8:	mvn	r3, #0
   1bbbc:	mov	r2, r6
   1bbc0:	ldr	r8, [sp, #36]	; 0x24
   1bbc4:	ldr	fp, [r7]
   1bbc8:	ldr	r4, [r7, #4]
   1bbcc:	str	ip, [sp]
   1bbd0:	orr	r8, r8, #1
   1bbd4:	ldr	ip, [sp, #72]	; 0x48
   1bbd8:	mov	r1, fp
   1bbdc:	str	r8, [sp, #4]
   1bbe0:	ldr	lr, [sp, #76]	; 0x4c
   1bbe4:	mov	r0, r4
   1bbe8:	str	r5, [sp, #8]
   1bbec:	str	ip, [sp, #12]
   1bbf0:	str	lr, [sp, #16]
   1bbf4:	bl	190e0 <__assert_fail@plt+0x7ccc>
   1bbf8:	cmp	fp, r0
   1bbfc:	bhi	1bc5c <__assert_fail@plt+0xa848>
   1bc00:	add	fp, r0, #1
   1bc04:	movw	r3, #4592	; 0x11f0
   1bc08:	movt	r3, #3
   1bc0c:	cmp	r4, r3
   1bc10:	str	fp, [r7]
   1bc14:	beq	1bc20 <__assert_fail@plt+0xa80c>
   1bc18:	mov	r0, r4
   1bc1c:	bl	1760c <__assert_fail@plt+0x61f8>
   1bc20:	mov	r0, fp
   1bc24:	bl	1d228 <__assert_fail@plt+0xbe14>
   1bc28:	ldr	r3, [sp, #32]
   1bc2c:	mov	r2, r6
   1bc30:	mov	r1, fp
   1bc34:	mov	r4, r0
   1bc38:	ldr	lr, [sp, #72]	; 0x48
   1bc3c:	ldr	ip, [sp, #76]	; 0x4c
   1bc40:	str	r0, [r7, #4]
   1bc44:	stm	sp, {r3, r8}
   1bc48:	mvn	r3, #0
   1bc4c:	str	r5, [sp, #8]
   1bc50:	str	lr, [sp, #12]
   1bc54:	str	ip, [sp, #16]
   1bc58:	bl	190e0 <__assert_fail@plt+0x7ccc>
   1bc5c:	mov	r0, r4
   1bc60:	str	sl, [r9]
   1bc64:	add	sp, sp, #84	; 0x54
   1bc68:	ldrd	r4, [sp]
   1bc6c:	ldrd	r6, [sp, #8]
   1bc70:	ldrd	r8, [sp, #16]
   1bc74:	ldrd	sl, [sp, #24]
   1bc78:	add	sp, sp, #32
   1bc7c:	pop	{pc}		; (ldr pc, [sp], #4)
   1bc80:	mov	r0, #8
   1bc84:	mvn	r3, #-2147483648	; 0x80000000
   1bc88:	add	r1, sp, #28
   1bc8c:	str	r0, [sp]
   1bc90:	mov	r0, #0
   1bc94:	bl	1d4cc <__assert_fail@plt+0xc0b8>
   1bc98:	ldrd	r2, [r4, #8]
   1bc9c:	mov	r7, r0
   1bca0:	str	r0, [r4]
   1bca4:	strd	r2, [r0]
   1bca8:	b	1bb90 <__assert_fail@plt+0xa77c>
   1bcac:	strdeq	r1, [r3], -r0
   1bcb0:	ldr	ip, [pc, #472]	; 1be90 <__assert_fail@plt+0xaa7c>
   1bcb4:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1bcb8:	mov	r5, r0
   1bcbc:	movw	r4, #4460	; 0x116c
   1bcc0:	movt	r4, #3
   1bcc4:	ldrd	r2, [ip]
   1bcc8:	ldrd	r0, [ip, #8]
   1bccc:	strd	r6, [sp, #8]
   1bcd0:	strd	r8, [sp, #16]
   1bcd4:	strd	sl, [sp, #24]
   1bcd8:	str	lr, [sp, #32]
   1bcdc:	sub	sp, sp, #84	; 0x54
   1bce0:	strd	r2, [sp, #32]
   1bce4:	strd	r0, [sp, #40]	; 0x28
   1bce8:	ldr	r6, [sp, #44]	; 0x2c
   1bcec:	ldrd	r2, [ip, #16]
   1bcf0:	ldrd	r0, [ip, #24]
   1bcf4:	mvn	lr, r6
   1bcf8:	and	lr, lr, #67108864	; 0x4000000
   1bcfc:	eor	lr, lr, r6
   1bd00:	ldrd	r6, [ip, #40]	; 0x28
   1bd04:	strd	r2, [sp, #48]	; 0x30
   1bd08:	ldrd	r2, [ip, #32]
   1bd0c:	str	lr, [sp, #44]	; 0x2c
   1bd10:	strd	r0, [sp, #56]	; 0x38
   1bd14:	strd	r2, [sp, #64]	; 0x40
   1bd18:	strd	r6, [sp, #72]	; 0x48
   1bd1c:	bl	112dc <__errno_location@plt>
   1bd20:	mov	r8, r0
   1bd24:	ldr	r9, [r0]
   1bd28:	ldr	r2, [r4, #4]
   1bd2c:	ldr	r6, [r4]
   1bd30:	cmp	r2, #0
   1bd34:	bgt	1bd90 <__assert_fail@plt+0xa97c>
   1bd38:	add	r3, r4, #8
   1bd3c:	str	r2, [sp, #28]
   1bd40:	rsb	r2, r2, #1
   1bd44:	cmp	r6, r3
   1bd48:	beq	1be64 <__assert_fail@plt+0xaa50>
   1bd4c:	mov	r1, #8
   1bd50:	mov	r0, r6
   1bd54:	mvn	r3, #-2147483648	; 0x80000000
   1bd58:	str	r1, [sp]
   1bd5c:	add	r1, sp, #28
   1bd60:	bl	1d4cc <__assert_fail@plt+0xc0b8>
   1bd64:	mov	r6, r0
   1bd68:	str	r0, [r4]
   1bd6c:	ldr	r0, [r4, #4]
   1bd70:	mov	r1, #0
   1bd74:	ldr	r2, [sp, #28]
   1bd78:	sub	r2, r2, r0
   1bd7c:	add	r0, r6, r0, lsl #3
   1bd80:	lsl	r2, r2, #3
   1bd84:	bl	112f4 <memset@plt>
   1bd88:	ldr	r3, [sp, #28]
   1bd8c:	str	r3, [r4, #4]
   1bd90:	ldr	sl, [r6]
   1bd94:	add	r0, sp, #40	; 0x28
   1bd98:	mvn	r3, #0
   1bd9c:	mov	r2, r5
   1bda0:	ldr	r7, [sp, #36]	; 0x24
   1bda4:	ldr	r4, [r6, #4]
   1bda8:	mov	r1, sl
   1bdac:	str	r0, [sp, #8]
   1bdb0:	ldr	lr, [sp, #32]
   1bdb4:	orr	r7, r7, #1
   1bdb8:	ldr	ip, [sp, #72]	; 0x48
   1bdbc:	mov	r0, r4
   1bdc0:	ldr	fp, [sp, #76]	; 0x4c
   1bdc4:	str	lr, [sp]
   1bdc8:	str	r7, [sp, #4]
   1bdcc:	str	ip, [sp, #12]
   1bdd0:	str	fp, [sp, #16]
   1bdd4:	bl	190e0 <__assert_fail@plt+0x7ccc>
   1bdd8:	cmp	sl, r0
   1bddc:	bhi	1be40 <__assert_fail@plt+0xaa2c>
   1bde0:	add	sl, r0, #1
   1bde4:	movw	r3, #4592	; 0x11f0
   1bde8:	movt	r3, #3
   1bdec:	cmp	r4, r3
   1bdf0:	str	sl, [r6]
   1bdf4:	beq	1be00 <__assert_fail@plt+0xa9ec>
   1bdf8:	mov	r0, r4
   1bdfc:	bl	1760c <__assert_fail@plt+0x61f8>
   1be00:	mov	r0, sl
   1be04:	bl	1d228 <__assert_fail@plt+0xbe14>
   1be08:	ldr	r3, [sp, #32]
   1be0c:	mov	r2, r5
   1be10:	add	r5, sp, #40	; 0x28
   1be14:	mov	r1, sl
   1be18:	mov	r4, r0
   1be1c:	ldr	lr, [sp, #72]	; 0x48
   1be20:	ldr	ip, [sp, #76]	; 0x4c
   1be24:	str	r0, [r6, #4]
   1be28:	stm	sp, {r3, r7}
   1be2c:	mvn	r3, #0
   1be30:	str	r5, [sp, #8]
   1be34:	str	lr, [sp, #12]
   1be38:	str	ip, [sp, #16]
   1be3c:	bl	190e0 <__assert_fail@plt+0x7ccc>
   1be40:	mov	r0, r4
   1be44:	str	r9, [r8]
   1be48:	add	sp, sp, #84	; 0x54
   1be4c:	ldrd	r4, [sp]
   1be50:	ldrd	r6, [sp, #8]
   1be54:	ldrd	r8, [sp, #16]
   1be58:	ldrd	sl, [sp, #24]
   1be5c:	add	sp, sp, #32
   1be60:	pop	{pc}		; (ldr pc, [sp], #4)
   1be64:	mov	r0, #8
   1be68:	mvn	r3, #-2147483648	; 0x80000000
   1be6c:	add	r1, sp, #28
   1be70:	str	r0, [sp]
   1be74:	mov	r0, #0
   1be78:	bl	1d4cc <__assert_fail@plt+0xc0b8>
   1be7c:	ldrd	r2, [r4, #8]
   1be80:	mov	r6, r0
   1be84:	str	r0, [r4]
   1be88:	strd	r2, [r0]
   1be8c:	b	1bd6c <__assert_fail@plt+0xa958>
   1be90:	strdeq	r1, [r3], -r0
   1be94:	ldr	ip, [pc, #480]	; 1c07c <__assert_fail@plt+0xac68>
   1be98:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1be9c:	mov	r5, r0
   1bea0:	movw	r4, #4460	; 0x116c
   1bea4:	movt	r4, #3
   1bea8:	ldrd	r2, [ip]
   1beac:	strd	r6, [sp, #8]
   1beb0:	mov	r6, r1
   1beb4:	ldrd	r0, [ip, #8]
   1beb8:	strd	r8, [sp, #16]
   1bebc:	strd	sl, [sp, #24]
   1bec0:	str	lr, [sp, #32]
   1bec4:	sub	sp, sp, #84	; 0x54
   1bec8:	ldrd	r8, [ip, #40]	; 0x28
   1becc:	strd	r2, [sp, #32]
   1bed0:	strd	r0, [sp, #40]	; 0x28
   1bed4:	ldrd	r2, [ip, #16]
   1bed8:	ldr	r7, [sp, #44]	; 0x2c
   1bedc:	ldrd	r0, [ip, #24]
   1bee0:	strd	r2, [sp, #48]	; 0x30
   1bee4:	ldrd	r2, [ip, #32]
   1bee8:	mvn	lr, r7
   1beec:	and	lr, lr, #67108864	; 0x4000000
   1bef0:	eor	lr, lr, r7
   1bef4:	str	lr, [sp, #44]	; 0x2c
   1bef8:	strd	r0, [sp, #56]	; 0x38
   1befc:	strd	r2, [sp, #64]	; 0x40
   1bf00:	strd	r8, [sp, #72]	; 0x48
   1bf04:	bl	112dc <__errno_location@plt>
   1bf08:	mov	r9, r0
   1bf0c:	ldr	sl, [r0]
   1bf10:	ldr	r2, [r4, #4]
   1bf14:	ldr	r7, [r4]
   1bf18:	cmp	r2, #0
   1bf1c:	bgt	1bf78 <__assert_fail@plt+0xab64>
   1bf20:	add	r3, r4, #8
   1bf24:	str	r2, [sp, #28]
   1bf28:	rsb	r2, r2, #1
   1bf2c:	cmp	r7, r3
   1bf30:	beq	1c050 <__assert_fail@plt+0xac3c>
   1bf34:	mov	r1, #8
   1bf38:	mov	r0, r7
   1bf3c:	mvn	r3, #-2147483648	; 0x80000000
   1bf40:	str	r1, [sp]
   1bf44:	add	r1, sp, #28
   1bf48:	bl	1d4cc <__assert_fail@plt+0xc0b8>
   1bf4c:	mov	r7, r0
   1bf50:	str	r0, [r4]
   1bf54:	ldr	r0, [r4, #4]
   1bf58:	mov	r1, #0
   1bf5c:	ldr	r2, [sp, #28]
   1bf60:	sub	r2, r2, r0
   1bf64:	add	r0, r7, r0, lsl #3
   1bf68:	lsl	r2, r2, #3
   1bf6c:	bl	112f4 <memset@plt>
   1bf70:	ldr	r3, [sp, #28]
   1bf74:	str	r3, [r4, #4]
   1bf78:	ldr	ip, [sp, #32]
   1bf7c:	add	r0, sp, #40	; 0x28
   1bf80:	mov	r3, r6
   1bf84:	mov	r2, r5
   1bf88:	ldr	r8, [sp, #36]	; 0x24
   1bf8c:	ldr	fp, [r7]
   1bf90:	ldr	r4, [r7, #4]
   1bf94:	str	ip, [sp]
   1bf98:	orr	r8, r8, #1
   1bf9c:	ldr	ip, [sp, #72]	; 0x48
   1bfa0:	mov	r1, fp
   1bfa4:	str	r8, [sp, #4]
   1bfa8:	ldr	lr, [sp, #76]	; 0x4c
   1bfac:	str	r0, [sp, #8]
   1bfb0:	mov	r0, r4
   1bfb4:	str	ip, [sp, #12]
   1bfb8:	str	lr, [sp, #16]
   1bfbc:	bl	190e0 <__assert_fail@plt+0x7ccc>
   1bfc0:	cmp	fp, r0
   1bfc4:	bhi	1c02c <__assert_fail@plt+0xac18>
   1bfc8:	add	fp, r0, #1
   1bfcc:	movw	r3, #4592	; 0x11f0
   1bfd0:	movt	r3, #3
   1bfd4:	cmp	r4, r3
   1bfd8:	str	fp, [r7]
   1bfdc:	beq	1bfe8 <__assert_fail@plt+0xabd4>
   1bfe0:	mov	r0, r4
   1bfe4:	bl	1760c <__assert_fail@plt+0x61f8>
   1bfe8:	mov	r0, fp
   1bfec:	bl	1d228 <__assert_fail@plt+0xbe14>
   1bff0:	ldr	lr, [sp, #32]
   1bff4:	mov	r2, r5
   1bff8:	mov	r3, r6
   1bffc:	mov	r1, fp
   1c000:	mov	r4, r0
   1c004:	ldr	r5, [sp, #72]	; 0x48
   1c008:	ldr	ip, [sp, #76]	; 0x4c
   1c00c:	str	r0, [r7, #4]
   1c010:	str	lr, [sp]
   1c014:	add	lr, sp, #40	; 0x28
   1c018:	str	r8, [sp, #4]
   1c01c:	str	lr, [sp, #8]
   1c020:	str	r5, [sp, #12]
   1c024:	str	ip, [sp, #16]
   1c028:	bl	190e0 <__assert_fail@plt+0x7ccc>
   1c02c:	mov	r0, r4
   1c030:	str	sl, [r9]
   1c034:	add	sp, sp, #84	; 0x54
   1c038:	ldrd	r4, [sp]
   1c03c:	ldrd	r6, [sp, #8]
   1c040:	ldrd	r8, [sp, #16]
   1c044:	ldrd	sl, [sp, #24]
   1c048:	add	sp, sp, #32
   1c04c:	pop	{pc}		; (ldr pc, [sp], #4)
   1c050:	mov	r0, #8
   1c054:	mvn	r3, #-2147483648	; 0x80000000
   1c058:	add	r1, sp, #28
   1c05c:	str	r0, [sp]
   1c060:	mov	r0, #0
   1c064:	bl	1d4cc <__assert_fail@plt+0xc0b8>
   1c068:	ldrd	r2, [r4, #8]
   1c06c:	mov	r7, r0
   1c070:	str	r0, [r4]
   1c074:	strd	r2, [r0]
   1c078:	b	1bf54 <__assert_fail@plt+0xab40>
   1c07c:	strdeq	r1, [r3], -r0
   1c080:	strd	r4, [sp, #-12]!
   1c084:	mov	r4, #0
   1c088:	mov	r5, #0
   1c08c:	str	lr, [sp, #8]
   1c090:	sub	sp, sp, #100	; 0x64
   1c094:	cmp	r1, #10
   1c098:	strd	r4, [sp]
   1c09c:	strd	r4, [sp, #8]
   1c0a0:	strd	r4, [sp, #16]
   1c0a4:	strd	r4, [sp, #24]
   1c0a8:	strd	r4, [sp, #32]
   1c0ac:	strd	r4, [sp, #40]	; 0x28
   1c0b0:	beq	1c0e0 <__assert_fail@plt+0xaccc>
   1c0b4:	mov	ip, #67108864	; 0x4000000
   1c0b8:	mov	r3, sp
   1c0bc:	str	r1, [sp]
   1c0c0:	mov	r1, r2
   1c0c4:	mvn	r2, #0
   1c0c8:	str	ip, [sp, #12]
   1c0cc:	bl	1aacc <__assert_fail@plt+0x96b8>
   1c0d0:	add	sp, sp, #100	; 0x64
   1c0d4:	ldrd	r4, [sp]
   1c0d8:	add	sp, sp, #8
   1c0dc:	pop	{pc}		; (ldr pc, [sp], #4)
   1c0e0:	bl	113f0 <abort@plt>
   1c0e4:	ldr	ip, [pc, #156]	; 1c188 <__assert_fail@plt+0xad74>
   1c0e8:	cmp	r2, #0
   1c0ec:	cmpne	r1, #0
   1c0f0:	strd	r4, [sp, #-32]!	; 0xffffffe0
   1c0f4:	strd	r6, [sp, #8]
   1c0f8:	mov	r6, r2
   1c0fc:	str	r8, [sp, #16]
   1c100:	mov	r8, r3
   1c104:	strd	sl, [sp, #20]
   1c108:	ldrd	r4, [ip]
   1c10c:	str	lr, [sp, #28]
   1c110:	sub	sp, sp, #48	; 0x30
   1c114:	mov	lr, #10
   1c118:	ldrd	r2, [ip, #8]
   1c11c:	ldrd	sl, [ip, #16]
   1c120:	strd	r4, [sp]
   1c124:	ldrd	r4, [ip, #32]
   1c128:	str	lr, [sp]
   1c12c:	strd	r2, [sp, #8]
   1c130:	strd	sl, [sp, #16]
   1c134:	ldrd	r2, [ip, #24]
   1c138:	ldrd	sl, [ip, #40]	; 0x28
   1c13c:	strd	r2, [sp, #24]
   1c140:	strd	r4, [sp, #32]
   1c144:	strd	sl, [sp, #40]	; 0x28
   1c148:	beq	1c184 <__assert_fail@plt+0xad70>
   1c14c:	mov	r7, r1
   1c150:	mov	r3, sp
   1c154:	mov	r1, r8
   1c158:	mvn	r2, #0
   1c15c:	str	r7, [sp, #40]	; 0x28
   1c160:	str	r6, [sp, #44]	; 0x2c
   1c164:	bl	1aacc <__assert_fail@plt+0x96b8>
   1c168:	add	sp, sp, #48	; 0x30
   1c16c:	ldrd	r4, [sp]
   1c170:	ldrd	r6, [sp, #8]
   1c174:	ldr	r8, [sp, #16]
   1c178:	ldrd	sl, [sp, #20]
   1c17c:	add	sp, sp, #28
   1c180:	pop	{pc}		; (ldr pc, [sp], #4)
   1c184:	bl	113f0 <abort@plt>
   1c188:	strdeq	r1, [r3], -r0
   1c18c:	ldr	ip, [pc, #156]	; 1c230 <__assert_fail@plt+0xae1c>
   1c190:	cmp	r2, #0
   1c194:	cmpne	r1, #0
   1c198:	strd	r4, [sp, #-32]!	; 0xffffffe0
   1c19c:	strd	r6, [sp, #8]
   1c1a0:	mov	r6, r2
   1c1a4:	str	r8, [sp, #16]
   1c1a8:	mov	r8, r3
   1c1ac:	strd	sl, [sp, #20]
   1c1b0:	ldrd	r4, [ip]
   1c1b4:	str	lr, [sp, #28]
   1c1b8:	sub	sp, sp, #48	; 0x30
   1c1bc:	mov	lr, #10
   1c1c0:	ldrd	r2, [ip, #8]
   1c1c4:	ldrd	sl, [ip, #16]
   1c1c8:	strd	r4, [sp]
   1c1cc:	ldrd	r4, [ip, #32]
   1c1d0:	str	lr, [sp]
   1c1d4:	strd	r2, [sp, #8]
   1c1d8:	strd	sl, [sp, #16]
   1c1dc:	ldrd	r2, [ip, #24]
   1c1e0:	ldrd	sl, [ip, #40]	; 0x28
   1c1e4:	strd	r2, [sp, #24]
   1c1e8:	strd	r4, [sp, #32]
   1c1ec:	strd	sl, [sp, #40]	; 0x28
   1c1f0:	beq	1c22c <__assert_fail@plt+0xae18>
   1c1f4:	ldr	r2, [sp, #80]	; 0x50
   1c1f8:	mov	r7, r1
   1c1fc:	mov	r3, sp
   1c200:	mov	r1, r8
   1c204:	str	r7, [sp, #40]	; 0x28
   1c208:	str	r6, [sp, #44]	; 0x2c
   1c20c:	bl	1aacc <__assert_fail@plt+0x96b8>
   1c210:	add	sp, sp, #48	; 0x30
   1c214:	ldrd	r4, [sp]
   1c218:	ldrd	r6, [sp, #8]
   1c21c:	ldr	r8, [sp, #16]
   1c220:	ldrd	sl, [sp, #20]
   1c224:	add	sp, sp, #28
   1c228:	pop	{pc}		; (ldr pc, [sp], #4)
   1c22c:	bl	113f0 <abort@plt>
   1c230:	strdeq	r1, [r3], -r0
   1c234:	ldr	ip, [pc, #512]	; 1c43c <__assert_fail@plt+0xb028>
   1c238:	cmp	r0, #0
   1c23c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1c240:	ldrd	r4, [ip, #16]
   1c244:	strd	r6, [sp, #8]
   1c248:	clz	r6, r1
   1c24c:	mov	r7, r1
   1c250:	strd	r8, [sp, #16]
   1c254:	mov	r8, r0
   1c258:	lsr	r6, r6, #5
   1c25c:	strd	sl, [sp, #24]
   1c260:	mov	fp, r2
   1c264:	mov	sl, #10
   1c268:	ldrd	r2, [ip]
   1c26c:	moveq	r6, #1
   1c270:	str	lr, [sp, #32]
   1c274:	sub	sp, sp, #92	; 0x5c
   1c278:	cmp	r6, #0
   1c27c:	ldrd	r0, [ip, #8]
   1c280:	strd	r2, [sp, #40]	; 0x28
   1c284:	strd	r4, [sp, #56]	; 0x38
   1c288:	ldrd	r2, [ip, #24]
   1c28c:	strd	r0, [sp, #48]	; 0x30
   1c290:	ldrd	r0, [ip, #32]
   1c294:	str	sl, [sp, #40]	; 0x28
   1c298:	ldrd	r4, [ip, #40]	; 0x28
   1c29c:	strd	r2, [sp, #64]	; 0x40
   1c2a0:	strd	r0, [sp, #72]	; 0x48
   1c2a4:	strd	r4, [sp, #80]	; 0x50
   1c2a8:	bne	1c438 <__assert_fail@plt+0xb024>
   1c2ac:	movw	r5, #4460	; 0x116c
   1c2b0:	movt	r5, #3
   1c2b4:	str	r8, [sp, #80]	; 0x50
   1c2b8:	str	r7, [sp, #84]	; 0x54
   1c2bc:	bl	112dc <__errno_location@plt>
   1c2c0:	ldr	r3, [r0]
   1c2c4:	mov	r9, r0
   1c2c8:	ldr	r2, [r5, #4]
   1c2cc:	ldr	r4, [r5]
   1c2d0:	str	r3, [sp, #28]
   1c2d4:	cmp	r2, #0
   1c2d8:	movgt	r1, sl
   1c2dc:	bgt	1c344 <__assert_fail@plt+0xaf30>
   1c2e0:	add	r3, r5, #8
   1c2e4:	str	r2, [sp, #36]	; 0x24
   1c2e8:	rsb	r2, r2, #1
   1c2ec:	cmp	r4, r3
   1c2f0:	beq	1c40c <__assert_fail@plt+0xaff8>
   1c2f4:	mov	r1, #8
   1c2f8:	mov	r0, r4
   1c2fc:	mvn	r3, #-2147483648	; 0x80000000
   1c300:	str	r1, [sp]
   1c304:	add	r1, sp, #36	; 0x24
   1c308:	bl	1d4cc <__assert_fail@plt+0xc0b8>
   1c30c:	mov	r4, r0
   1c310:	str	r0, [r5]
   1c314:	ldr	r0, [r5, #4]
   1c318:	mov	r1, #0
   1c31c:	ldr	r2, [sp, #36]	; 0x24
   1c320:	sub	r2, r2, r0
   1c324:	add	r0, r4, r0, lsl #3
   1c328:	lsl	r2, r2, #3
   1c32c:	bl	112f4 <memset@plt>
   1c330:	ldr	r3, [sp, #36]	; 0x24
   1c334:	ldr	r1, [sp, #40]	; 0x28
   1c338:	ldr	r8, [sp, #80]	; 0x50
   1c33c:	str	r3, [r5, #4]
   1c340:	ldr	r7, [sp, #84]	; 0x54
   1c344:	mvn	r3, #0
   1c348:	mov	r2, fp
   1c34c:	ldr	r6, [sp, #44]	; 0x2c
   1c350:	ldr	sl, [r4]
   1c354:	ldr	r5, [r4, #4]
   1c358:	orr	r6, r6, #1
   1c35c:	stm	sp, {r1, r6}
   1c360:	add	r1, sp, #48	; 0x30
   1c364:	str	r8, [sp, #12]
   1c368:	mov	r0, r5
   1c36c:	str	r1, [sp, #8]
   1c370:	mov	r1, sl
   1c374:	str	r7, [sp, #16]
   1c378:	bl	190e0 <__assert_fail@plt+0x7ccc>
   1c37c:	cmp	sl, r0
   1c380:	bhi	1c3e4 <__assert_fail@plt+0xafd0>
   1c384:	add	r7, r0, #1
   1c388:	movw	r3, #4592	; 0x11f0
   1c38c:	movt	r3, #3
   1c390:	cmp	r5, r3
   1c394:	str	r7, [r4]
   1c398:	beq	1c3a4 <__assert_fail@plt+0xaf90>
   1c39c:	mov	r0, r5
   1c3a0:	bl	1760c <__assert_fail@plt+0x61f8>
   1c3a4:	mov	r0, r7
   1c3a8:	bl	1d228 <__assert_fail@plt+0xbe14>
   1c3ac:	ldr	r3, [sp, #40]	; 0x28
   1c3b0:	mov	r2, fp
   1c3b4:	mov	r1, r7
   1c3b8:	mov	r5, r0
   1c3bc:	ldr	lr, [sp, #80]	; 0x50
   1c3c0:	ldr	ip, [sp, #84]	; 0x54
   1c3c4:	str	r0, [r4, #4]
   1c3c8:	add	r4, sp, #48	; 0x30
   1c3cc:	stm	sp, {r3, r6}
   1c3d0:	mvn	r3, #0
   1c3d4:	str	r4, [sp, #8]
   1c3d8:	str	lr, [sp, #12]
   1c3dc:	str	ip, [sp, #16]
   1c3e0:	bl	190e0 <__assert_fail@plt+0x7ccc>
   1c3e4:	ldr	r3, [sp, #28]
   1c3e8:	mov	r0, r5
   1c3ec:	str	r3, [r9]
   1c3f0:	add	sp, sp, #92	; 0x5c
   1c3f4:	ldrd	r4, [sp]
   1c3f8:	ldrd	r6, [sp, #8]
   1c3fc:	ldrd	r8, [sp, #16]
   1c400:	ldrd	sl, [sp, #24]
   1c404:	add	sp, sp, #32
   1c408:	pop	{pc}		; (ldr pc, [sp], #4)
   1c40c:	mov	r1, #8
   1c410:	mvn	r3, #-2147483648	; 0x80000000
   1c414:	mov	r0, r6
   1c418:	str	r1, [sp]
   1c41c:	add	r1, sp, #36	; 0x24
   1c420:	bl	1d4cc <__assert_fail@plt+0xc0b8>
   1c424:	ldrd	r2, [r5, #8]
   1c428:	mov	r4, r0
   1c42c:	str	r0, [r5]
   1c430:	strd	r2, [r0]
   1c434:	b	1c314 <__assert_fail@plt+0xaf00>
   1c438:	bl	113f0 <abort@plt>
   1c43c:	strdeq	r1, [r3], -r0
   1c440:	ldr	ip, [pc, #536]	; 1c660 <__assert_fail@plt+0xb24c>
   1c444:	cmp	r0, #0
   1c448:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1c44c:	ldrd	r4, [ip, #16]
   1c450:	strd	r6, [sp, #8]
   1c454:	mov	r6, r1
   1c458:	mov	r7, r0
   1c45c:	strd	r8, [sp, #16]
   1c460:	mov	r9, #10
   1c464:	strd	sl, [sp, #24]
   1c468:	mov	sl, r2
   1c46c:	mov	fp, r3
   1c470:	str	lr, [sp, #32]
   1c474:	clz	lr, r1
   1c478:	sub	sp, sp, #92	; 0x5c
   1c47c:	ldrd	r2, [ip]
   1c480:	lsr	lr, lr, #5
   1c484:	moveq	lr, #1
   1c488:	ldrd	r0, [ip, #8]
   1c48c:	cmp	lr, #0
   1c490:	strd	r4, [sp, #56]	; 0x38
   1c494:	ldrd	r4, [ip, #40]	; 0x28
   1c498:	str	lr, [sp, #28]
   1c49c:	strd	r2, [sp, #40]	; 0x28
   1c4a0:	ldrd	r2, [ip, #24]
   1c4a4:	strd	r0, [sp, #48]	; 0x30
   1c4a8:	ldrd	r0, [ip, #32]
   1c4ac:	str	r9, [sp, #40]	; 0x28
   1c4b0:	strd	r2, [sp, #64]	; 0x40
   1c4b4:	strd	r4, [sp, #80]	; 0x50
   1c4b8:	strd	r0, [sp, #72]	; 0x48
   1c4bc:	bne	1c65c <__assert_fail@plt+0xb248>
   1c4c0:	movw	r5, #4460	; 0x116c
   1c4c4:	movt	r5, #3
   1c4c8:	str	r7, [sp, #80]	; 0x50
   1c4cc:	str	r6, [sp, #84]	; 0x54
   1c4d0:	bl	112dc <__errno_location@plt>
   1c4d4:	ldr	r3, [r0]
   1c4d8:	mov	r8, r0
   1c4dc:	ldr	r2, [r5, #4]
   1c4e0:	ldr	r4, [r5]
   1c4e4:	str	r3, [sp, #24]
   1c4e8:	cmp	r2, #0
   1c4ec:	movgt	r1, r9
   1c4f0:	bgt	1c558 <__assert_fail@plt+0xb144>
   1c4f4:	add	r3, r5, #8
   1c4f8:	str	r2, [sp, #36]	; 0x24
   1c4fc:	rsb	r2, r2, #1
   1c500:	cmp	r4, r3
   1c504:	beq	1c630 <__assert_fail@plt+0xb21c>
   1c508:	mov	r1, #8
   1c50c:	mov	r0, r4
   1c510:	mvn	r3, #-2147483648	; 0x80000000
   1c514:	str	r1, [sp]
   1c518:	add	r1, sp, #36	; 0x24
   1c51c:	bl	1d4cc <__assert_fail@plt+0xc0b8>
   1c520:	mov	r4, r0
   1c524:	str	r0, [r5]
   1c528:	ldr	r0, [r5, #4]
   1c52c:	mov	r1, #0
   1c530:	ldr	r2, [sp, #36]	; 0x24
   1c534:	sub	r2, r2, r0
   1c538:	add	r0, r4, r0, lsl #3
   1c53c:	lsl	r2, r2, #3
   1c540:	bl	112f4 <memset@plt>
   1c544:	ldr	r3, [sp, #36]	; 0x24
   1c548:	ldr	r1, [sp, #40]	; 0x28
   1c54c:	ldr	r7, [sp, #80]	; 0x50
   1c550:	str	r3, [r5, #4]
   1c554:	ldr	r6, [sp, #84]	; 0x54
   1c558:	mov	r3, fp
   1c55c:	mov	r2, sl
   1c560:	ldr	r0, [sp, #44]	; 0x2c
   1c564:	ldr	r9, [r4]
   1c568:	ldr	r5, [r4, #4]
   1c56c:	orr	r0, r0, #1
   1c570:	str	r1, [sp]
   1c574:	add	r1, sp, #48	; 0x30
   1c578:	str	r0, [sp, #4]
   1c57c:	str	r1, [sp, #8]
   1c580:	mov	r1, r9
   1c584:	str	r7, [sp, #12]
   1c588:	str	r6, [sp, #16]
   1c58c:	str	r0, [sp, #28]
   1c590:	mov	r0, r5
   1c594:	bl	190e0 <__assert_fail@plt+0x7ccc>
   1c598:	cmp	r9, r0
   1c59c:	bhi	1c608 <__assert_fail@plt+0xb1f4>
   1c5a0:	add	r6, r0, #1
   1c5a4:	movw	r3, #4592	; 0x11f0
   1c5a8:	movt	r3, #3
   1c5ac:	cmp	r5, r3
   1c5b0:	str	r6, [r4]
   1c5b4:	beq	1c5c0 <__assert_fail@plt+0xb1ac>
   1c5b8:	mov	r0, r5
   1c5bc:	bl	1760c <__assert_fail@plt+0x61f8>
   1c5c0:	mov	r0, r6
   1c5c4:	bl	1d228 <__assert_fail@plt+0xbe14>
   1c5c8:	ldr	lr, [sp, #40]	; 0x28
   1c5cc:	mov	r1, r6
   1c5d0:	mov	r3, fp
   1c5d4:	mov	r2, sl
   1c5d8:	mov	r5, r0
   1c5dc:	ldr	r6, [sp, #80]	; 0x50
   1c5e0:	ldr	ip, [sp, #84]	; 0x54
   1c5e4:	str	r0, [r4, #4]
   1c5e8:	str	lr, [sp]
   1c5ec:	ldr	lr, [sp, #28]
   1c5f0:	str	lr, [sp, #4]
   1c5f4:	add	lr, sp, #48	; 0x30
   1c5f8:	str	r6, [sp, #12]
   1c5fc:	str	lr, [sp, #8]
   1c600:	str	ip, [sp, #16]
   1c604:	bl	190e0 <__assert_fail@plt+0x7ccc>
   1c608:	ldr	r3, [sp, #24]
   1c60c:	mov	r0, r5
   1c610:	str	r3, [r8]
   1c614:	add	sp, sp, #92	; 0x5c
   1c618:	ldrd	r4, [sp]
   1c61c:	ldrd	r6, [sp, #8]
   1c620:	ldrd	r8, [sp, #16]
   1c624:	ldrd	sl, [sp, #24]
   1c628:	add	sp, sp, #32
   1c62c:	pop	{pc}		; (ldr pc, [sp], #4)
   1c630:	mov	r1, #8
   1c634:	mvn	r3, #-2147483648	; 0x80000000
   1c638:	ldr	r0, [sp, #28]
   1c63c:	str	r1, [sp]
   1c640:	add	r1, sp, #36	; 0x24
   1c644:	bl	1d4cc <__assert_fail@plt+0xc0b8>
   1c648:	ldrd	r2, [r5, #8]
   1c64c:	mov	r4, r0
   1c650:	str	r0, [r5]
   1c654:	strd	r2, [r0]
   1c658:	b	1c528 <__assert_fail@plt+0xb114>
   1c65c:	bl	113f0 <abort@plt>
   1c660:	strdeq	r1, [r3], -r0
   1c664:	ldr	r3, [pc]	; 1c66c <__assert_fail@plt+0xb258>
   1c668:	b	1aacc <__assert_fail@plt+0x96b8>
   1c66c:	andeq	r1, r3, ip, ror r1
   1c670:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1c674:	movw	r4, #4460	; 0x116c
   1c678:	movt	r4, #3
   1c67c:	strd	r6, [sp, #8]
   1c680:	strd	r8, [sp, #16]
   1c684:	strd	sl, [sp, #24]
   1c688:	mov	sl, r0
   1c68c:	mov	fp, r1
   1c690:	str	lr, [sp, #32]
   1c694:	sub	sp, sp, #44	; 0x2c
   1c698:	bl	112dc <__errno_location@plt>
   1c69c:	ldr	r3, [r0]
   1c6a0:	mov	r8, r0
   1c6a4:	ldr	r2, [r4, #4]
   1c6a8:	ldr	r5, [r4]
   1c6ac:	str	r3, [sp, #28]
   1c6b0:	cmp	r2, #0
   1c6b4:	bgt	1c710 <__assert_fail@plt+0xb2fc>
   1c6b8:	add	r3, r4, #8
   1c6bc:	str	r2, [sp, #36]	; 0x24
   1c6c0:	rsb	r2, r2, #1
   1c6c4:	cmp	r5, r3
   1c6c8:	beq	1c7ec <__assert_fail@plt+0xb3d8>
   1c6cc:	mov	r1, #8
   1c6d0:	mov	r0, r5
   1c6d4:	mvn	r3, #-2147483648	; 0x80000000
   1c6d8:	str	r1, [sp]
   1c6dc:	add	r1, sp, #36	; 0x24
   1c6e0:	bl	1d4cc <__assert_fail@plt+0xc0b8>
   1c6e4:	mov	r5, r0
   1c6e8:	str	r0, [r4]
   1c6ec:	ldr	r0, [r4, #4]
   1c6f0:	mov	r1, #0
   1c6f4:	ldr	r2, [sp, #36]	; 0x24
   1c6f8:	sub	r2, r2, r0
   1c6fc:	add	r0, r5, r0, lsl #3
   1c700:	lsl	r2, r2, #3
   1c704:	bl	112f4 <memset@plt>
   1c708:	ldr	r3, [sp, #36]	; 0x24
   1c70c:	str	r3, [r4, #4]
   1c710:	ldr	ip, [r4, #16]
   1c714:	mov	r3, fp
   1c718:	mov	r2, sl
   1c71c:	ldr	r7, [r4, #20]
   1c720:	ldr	r0, [pc, #240]	; 1c818 <__assert_fail@plt+0xb404>
   1c724:	ldr	r9, [r5]
   1c728:	orr	r7, r7, #1
   1c72c:	ldr	r6, [r5, #4]
   1c730:	str	ip, [sp]
   1c734:	ldr	ip, [r4, #56]	; 0x38
   1c738:	mov	r1, r9
   1c73c:	str	r7, [sp, #4]
   1c740:	ldr	lr, [r4, #60]	; 0x3c
   1c744:	str	r0, [sp, #8]
   1c748:	mov	r0, r6
   1c74c:	str	ip, [sp, #12]
   1c750:	str	lr, [sp, #16]
   1c754:	bl	190e0 <__assert_fail@plt+0x7ccc>
   1c758:	cmp	r9, r0
   1c75c:	bhi	1c7c4 <__assert_fail@plt+0xb3b0>
   1c760:	add	r9, r0, #1
   1c764:	movw	r3, #4592	; 0x11f0
   1c768:	movt	r3, #3
   1c76c:	cmp	r6, r3
   1c770:	str	r9, [r5]
   1c774:	beq	1c780 <__assert_fail@plt+0xb36c>
   1c778:	mov	r0, r6
   1c77c:	bl	1760c <__assert_fail@plt+0x61f8>
   1c780:	mov	r0, r9
   1c784:	bl	1d228 <__assert_fail@plt+0xbe14>
   1c788:	ldr	ip, [r4, #16]
   1c78c:	mov	r1, r9
   1c790:	mov	r3, fp
   1c794:	mov	r2, sl
   1c798:	mov	r6, r0
   1c79c:	ldr	r9, [r4, #56]	; 0x38
   1c7a0:	ldr	lr, [r4, #60]	; 0x3c
   1c7a4:	str	r0, [r5, #4]
   1c7a8:	str	ip, [sp]
   1c7ac:	ldr	ip, [pc, #100]	; 1c818 <__assert_fail@plt+0xb404>
   1c7b0:	str	r7, [sp, #4]
   1c7b4:	str	ip, [sp, #8]
   1c7b8:	str	r9, [sp, #12]
   1c7bc:	str	lr, [sp, #16]
   1c7c0:	bl	190e0 <__assert_fail@plt+0x7ccc>
   1c7c4:	ldr	r3, [sp, #28]
   1c7c8:	mov	r0, r6
   1c7cc:	str	r3, [r8]
   1c7d0:	add	sp, sp, #44	; 0x2c
   1c7d4:	ldrd	r4, [sp]
   1c7d8:	ldrd	r6, [sp, #8]
   1c7dc:	ldrd	r8, [sp, #16]
   1c7e0:	ldrd	sl, [sp, #24]
   1c7e4:	add	sp, sp, #32
   1c7e8:	pop	{pc}		; (ldr pc, [sp], #4)
   1c7ec:	mov	r0, #8
   1c7f0:	mvn	r3, #-2147483648	; 0x80000000
   1c7f4:	add	r1, sp, #36	; 0x24
   1c7f8:	str	r0, [sp]
   1c7fc:	mov	r0, #0
   1c800:	bl	1d4cc <__assert_fail@plt+0xc0b8>
   1c804:	ldrd	r2, [r4, #8]
   1c808:	mov	r5, r0
   1c80c:	str	r0, [r4]
   1c810:	strd	r2, [r0]
   1c814:	b	1c6ec <__assert_fail@plt+0xb2d8>
   1c818:	andeq	r1, r3, r4, lsl #3
   1c81c:	ldr	r3, [pc, #4]	; 1c828 <__assert_fail@plt+0xb414>
   1c820:	mvn	r2, #0
   1c824:	b	1aacc <__assert_fail@plt+0x96b8>
   1c828:	andeq	r1, r3, ip, ror r1
   1c82c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1c830:	movw	r4, #4460	; 0x116c
   1c834:	movt	r4, #3
   1c838:	strd	r6, [sp, #8]
   1c83c:	strd	r8, [sp, #16]
   1c840:	strd	sl, [sp, #24]
   1c844:	mov	sl, r0
   1c848:	str	lr, [sp, #32]
   1c84c:	sub	sp, sp, #44	; 0x2c
   1c850:	bl	112dc <__errno_location@plt>
   1c854:	ldr	r3, [r0]
   1c858:	mov	r8, r0
   1c85c:	ldr	r2, [r4, #4]
   1c860:	ldr	r5, [r4]
   1c864:	str	r3, [sp, #28]
   1c868:	cmp	r2, #0
   1c86c:	bgt	1c8c8 <__assert_fail@plt+0xb4b4>
   1c870:	add	r3, r4, #8
   1c874:	str	r2, [sp, #36]	; 0x24
   1c878:	rsb	r2, r2, #1
   1c87c:	cmp	r5, r3
   1c880:	beq	1c990 <__assert_fail@plt+0xb57c>
   1c884:	mov	r1, #8
   1c888:	mov	r0, r5
   1c88c:	mvn	r3, #-2147483648	; 0x80000000
   1c890:	str	r1, [sp]
   1c894:	add	r1, sp, #36	; 0x24
   1c898:	bl	1d4cc <__assert_fail@plt+0xc0b8>
   1c89c:	mov	r5, r0
   1c8a0:	str	r0, [r4]
   1c8a4:	ldr	r0, [r4, #4]
   1c8a8:	mov	r1, #0
   1c8ac:	ldr	r2, [sp, #36]	; 0x24
   1c8b0:	sub	r2, r2, r0
   1c8b4:	add	r0, r5, r0, lsl #3
   1c8b8:	lsl	r2, r2, #3
   1c8bc:	bl	112f4 <memset@plt>
   1c8c0:	ldr	r3, [sp, #36]	; 0x24
   1c8c4:	str	r3, [r4, #4]
   1c8c8:	ldr	ip, [r4, #16]
   1c8cc:	mvn	r3, #0
   1c8d0:	mov	r2, sl
   1c8d4:	ldr	r7, [r4, #20]
   1c8d8:	ldr	fp, [pc, #220]	; 1c9bc <__assert_fail@plt+0xb5a8>
   1c8dc:	ldr	r9, [r5]
   1c8e0:	orr	r7, r7, #1
   1c8e4:	ldr	r6, [r5, #4]
   1c8e8:	str	ip, [sp]
   1c8ec:	ldr	ip, [r4, #56]	; 0x38
   1c8f0:	mov	r1, r9
   1c8f4:	stmib	sp, {r7, fp}
   1c8f8:	ldr	lr, [r4, #60]	; 0x3c
   1c8fc:	mov	r0, r6
   1c900:	str	ip, [sp, #12]
   1c904:	str	lr, [sp, #16]
   1c908:	bl	190e0 <__assert_fail@plt+0x7ccc>
   1c90c:	cmp	r9, r0
   1c910:	bhi	1c968 <__assert_fail@plt+0xb554>
   1c914:	add	r9, r0, #1
   1c918:	movw	r3, #4592	; 0x11f0
   1c91c:	movt	r3, #3
   1c920:	cmp	r6, r3
   1c924:	str	r9, [r5]
   1c928:	beq	1c934 <__assert_fail@plt+0xb520>
   1c92c:	mov	r0, r6
   1c930:	bl	1760c <__assert_fail@plt+0x61f8>
   1c934:	mov	r0, r9
   1c938:	bl	1d228 <__assert_fail@plt+0xbe14>
   1c93c:	ldr	r3, [r4, #16]
   1c940:	mov	r2, sl
   1c944:	mov	r1, r9
   1c948:	mov	r6, r0
   1c94c:	ldr	lr, [r4, #56]	; 0x38
   1c950:	ldr	ip, [r4, #60]	; 0x3c
   1c954:	str	r0, [r5, #4]
   1c958:	stm	sp, {r3, r7, fp, lr}
   1c95c:	mvn	r3, #0
   1c960:	str	ip, [sp, #16]
   1c964:	bl	190e0 <__assert_fail@plt+0x7ccc>
   1c968:	ldr	r3, [sp, #28]
   1c96c:	mov	r0, r6
   1c970:	str	r3, [r8]
   1c974:	add	sp, sp, #44	; 0x2c
   1c978:	ldrd	r4, [sp]
   1c97c:	ldrd	r6, [sp, #8]
   1c980:	ldrd	r8, [sp, #16]
   1c984:	ldrd	sl, [sp, #24]
   1c988:	add	sp, sp, #32
   1c98c:	pop	{pc}		; (ldr pc, [sp], #4)
   1c990:	mov	r0, #8
   1c994:	mvn	r3, #-2147483648	; 0x80000000
   1c998:	add	r1, sp, #36	; 0x24
   1c99c:	str	r0, [sp]
   1c9a0:	mov	r0, #0
   1c9a4:	bl	1d4cc <__assert_fail@plt+0xc0b8>
   1c9a8:	ldrd	r2, [r4, #8]
   1c9ac:	mov	r5, r0
   1c9b0:	str	r0, [r4]
   1c9b4:	strd	r2, [r0]
   1c9b8:	b	1c8a4 <__assert_fail@plt+0xb490>
   1c9bc:	andeq	r1, r3, r4, lsl #3
   1c9c0:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1c9c4:	mov	r5, #0
   1c9c8:	movt	r5, #32752	; 0x7ff0
   1c9cc:	mov	r4, r2
   1c9d0:	strd	r6, [sp, #8]
   1c9d4:	mov	r7, r1
   1c9d8:	str	r8, [sp, #16]
   1c9dc:	mov	r8, r0
   1c9e0:	str	lr, [sp, #20]
   1c9e4:	mov	r2, r4
   1c9e8:	mov	r1, r7
   1c9ec:	mov	r0, r8
   1c9f0:	bl	110f0 <read@plt>
   1c9f4:	subs	r6, r0, #0
   1c9f8:	bge	1ca2c <__assert_fail@plt+0xb618>
   1c9fc:	bl	112dc <__errno_location@plt>
   1ca00:	ldr	r3, [r0]
   1ca04:	cmp	r3, #4
   1ca08:	beq	1c9e4 <__assert_fail@plt+0xb5d0>
   1ca0c:	cmp	r4, r5
   1ca10:	mov	r4, r5
   1ca14:	movls	r2, #0
   1ca18:	movhi	r2, #1
   1ca1c:	cmp	r3, #22
   1ca20:	movne	r2, #0
   1ca24:	cmp	r2, #0
   1ca28:	bne	1c9e4 <__assert_fail@plt+0xb5d0>
   1ca2c:	mov	r0, r6
   1ca30:	ldrd	r4, [sp]
   1ca34:	ldrd	r6, [sp, #8]
   1ca38:	ldr	r8, [sp, #16]
   1ca3c:	add	sp, sp, #20
   1ca40:	pop	{pc}		; (ldr pc, [sp], #4)
   1ca44:	cmp	r0, #2
   1ca48:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1ca4c:	mov	r4, r0
   1ca50:	strd	r6, [sp, #8]
   1ca54:	str	r8, [sp, #16]
   1ca58:	str	lr, [sp, #20]
   1ca5c:	bls	1ca78 <__assert_fail@plt+0xb664>
   1ca60:	mov	r0, r4
   1ca64:	ldrd	r4, [sp]
   1ca68:	ldrd	r6, [sp, #8]
   1ca6c:	ldr	r8, [sp, #16]
   1ca70:	add	sp, sp, #20
   1ca74:	pop	{pc}		; (ldr pc, [sp], #4)
   1ca78:	bl	1ef00 <__assert_fail@plt+0xdaec>
   1ca7c:	mov	r7, r0
   1ca80:	bl	112dc <__errno_location@plt>
   1ca84:	mov	r5, r0
   1ca88:	mov	r0, r4
   1ca8c:	ldr	r6, [r5]
   1ca90:	mov	r4, r7
   1ca94:	bl	113fc <close@plt>
   1ca98:	str	r6, [r5]
   1ca9c:	b	1ca60 <__assert_fail@plt+0xb64c>
   1caa0:	cmp	r1, #0
   1caa4:	strd	r4, [sp, #-16]!
   1caa8:	mov	ip, r3
   1caac:	str	r6, [sp, #8]
   1cab0:	mov	r4, r0
   1cab4:	str	lr, [sp, #12]
   1cab8:	sub	sp, sp, #32
   1cabc:	ldr	r5, [sp, #48]	; 0x30
   1cac0:	ldr	r6, [sp, #52]	; 0x34
   1cac4:	beq	1cc08 <__assert_fail@plt+0xb7f4>
   1cac8:	mov	r3, r1
   1cacc:	mov	r1, #1
   1cad0:	stm	sp, {r2, ip}
   1cad4:	movw	r2, #2500	; 0x9c4
   1cad8:	movt	r2, #2
   1cadc:	bl	11324 <__fprintf_chk@plt>
   1cae0:	mov	r2, #5
   1cae4:	movw	r1, #2520	; 0x9d8
   1cae8:	movt	r1, #2
   1caec:	mov	r0, #0
   1caf0:	bl	11174 <dcgettext@plt>
   1caf4:	movw	ip, #2022	; 0x7e6
   1caf8:	mov	r3, r0
   1cafc:	mov	r1, #1
   1cb00:	movw	r2, #3248	; 0xcb0
   1cb04:	movt	r2, #2
   1cb08:	mov	r0, r4
   1cb0c:	str	ip, [sp]
   1cb10:	bl	11324 <__fprintf_chk@plt>
   1cb14:	mov	r1, r4
   1cb18:	mov	r0, #10
   1cb1c:	bl	11168 <fputc_unlocked@plt>
   1cb20:	mov	r2, #5
   1cb24:	movw	r1, #2524	; 0x9dc
   1cb28:	movt	r1, #2
   1cb2c:	mov	r0, #0
   1cb30:	bl	11174 <dcgettext@plt>
   1cb34:	mov	r2, r0
   1cb38:	mov	r1, #1
   1cb3c:	movw	r3, #2696	; 0xa88
   1cb40:	movt	r3, #2
   1cb44:	mov	r0, r4
   1cb48:	bl	11324 <__fprintf_chk@plt>
   1cb4c:	mov	r1, r4
   1cb50:	mov	r0, #10
   1cb54:	bl	11168 <fputc_unlocked@plt>
   1cb58:	cmp	r6, #9
   1cb5c:	ldrls	pc, [pc, r6, lsl #2]
   1cb60:	b	1ce74 <__assert_fail@plt+0xba60>
   1cb64:	strdeq	ip, [r1], -r4
   1cb68:	andeq	ip, r1, r4, lsr #24
   1cb6c:	andeq	ip, r1, r0, ror #24
   1cb70:	andeq	ip, r1, r0, lsr #25
   1cb74:	andeq	ip, r1, r8, ror #25
   1cb78:	andeq	ip, r1, r0, lsr #26
   1cb7c:	andeq	ip, r1, r8, ror #26
   1cb80:			; <UNDEFINED> instruction: 0x0001cdbc
   1cb84:	andeq	ip, r1, r4, lsl lr
   1cb88:	andeq	ip, r1, ip, lsl #23
   1cb8c:	movw	r1, #3000	; 0xbb8
   1cb90:	movt	r1, #2
   1cb94:	mov	r2, #5
   1cb98:	mov	r0, #0
   1cb9c:	bl	11174 <dcgettext@plt>
   1cba0:	ldr	lr, [r5, #4]
   1cba4:	mov	r2, r0
   1cba8:	mov	r1, #1
   1cbac:	mov	r0, r4
   1cbb0:	ldr	r3, [r5, #8]
   1cbb4:	ldr	ip, [r5, #32]
   1cbb8:	str	lr, [sp]
   1cbbc:	ldr	lr, [r5, #12]
   1cbc0:	str	ip, [sp, #28]
   1cbc4:	ldr	ip, [r5, #28]
   1cbc8:	str	r3, [sp, #4]
   1cbcc:	ldr	r3, [r5, #16]
   1cbd0:	str	lr, [sp, #8]
   1cbd4:	ldr	lr, [r5, #20]
   1cbd8:	str	ip, [sp, #24]
   1cbdc:	ldr	ip, [r5, #24]
   1cbe0:	str	r3, [sp, #12]
   1cbe4:	ldr	r3, [r5]
   1cbe8:	str	lr, [sp, #16]
   1cbec:	str	ip, [sp, #20]
   1cbf0:	bl	11324 <__fprintf_chk@plt>
   1cbf4:	add	sp, sp, #32
   1cbf8:	ldrd	r4, [sp]
   1cbfc:	ldr	r6, [sp, #8]
   1cc00:	add	sp, sp, #12
   1cc04:	pop	{pc}		; (ldr pc, [sp], #4)
   1cc08:	mov	r3, r2
   1cc0c:	mov	r1, #1
   1cc10:	str	ip, [sp]
   1cc14:	movw	r2, #2512	; 0x9d0
   1cc18:	movt	r2, #2
   1cc1c:	bl	11324 <__fprintf_chk@plt>
   1cc20:	b	1cae0 <__assert_fail@plt+0xb6cc>
   1cc24:	mov	r2, #5
   1cc28:	movw	r1, #2732	; 0xaac
   1cc2c:	movt	r1, #2
   1cc30:	mov	r0, #0
   1cc34:	bl	11174 <dcgettext@plt>
   1cc38:	ldr	r3, [r5]
   1cc3c:	mov	r2, r0
   1cc40:	mov	r1, #1
   1cc44:	mov	r0, r4
   1cc48:	add	sp, sp, #32
   1cc4c:	ldrd	r4, [sp]
   1cc50:	ldr	r6, [sp, #8]
   1cc54:	ldr	lr, [sp, #12]
   1cc58:	add	sp, sp, #16
   1cc5c:	b	11324 <__fprintf_chk@plt>
   1cc60:	mov	r2, #5
   1cc64:	movw	r1, #2748	; 0xabc
   1cc68:	movt	r1, #2
   1cc6c:	mov	r0, #0
   1cc70:	bl	11174 <dcgettext@plt>
   1cc74:	ldm	r5, {r3, ip}
   1cc78:	mov	r2, r0
   1cc7c:	mov	r1, #1
   1cc80:	mov	r0, r4
   1cc84:	str	ip, [sp, #48]	; 0x30
   1cc88:	add	sp, sp, #32
   1cc8c:	ldrd	r4, [sp]
   1cc90:	ldr	r6, [sp, #8]
   1cc94:	ldr	lr, [sp, #12]
   1cc98:	add	sp, sp, #16
   1cc9c:	b	11324 <__fprintf_chk@plt>
   1cca0:	mov	r2, #5
   1cca4:	movw	r1, #2772	; 0xad4
   1cca8:	movt	r1, #2
   1ccac:	mov	r0, #0
   1ccb0:	bl	11174 <dcgettext@plt>
   1ccb4:	ldm	r5, {r3, lr}
   1ccb8:	mov	r2, r0
   1ccbc:	mov	r1, #1
   1ccc0:	mov	r0, r4
   1ccc4:	ldr	ip, [r5, #8]
   1ccc8:	str	lr, [sp, #48]	; 0x30
   1cccc:	str	ip, [sp, #52]	; 0x34
   1ccd0:	add	sp, sp, #32
   1ccd4:	ldrd	r4, [sp]
   1ccd8:	ldr	r6, [sp, #8]
   1ccdc:	ldr	lr, [sp, #12]
   1cce0:	add	sp, sp, #16
   1cce4:	b	11324 <__fprintf_chk@plt>
   1cce8:	mov	r2, #5
   1ccec:	movw	r1, #2800	; 0xaf0
   1ccf0:	movt	r1, #2
   1ccf4:	mov	r0, #0
   1ccf8:	bl	11174 <dcgettext@plt>
   1ccfc:	ldmib	r5, {r3, ip, lr}
   1cd00:	mov	r2, r0
   1cd04:	mov	r1, #1
   1cd08:	mov	r0, r4
   1cd0c:	str	r3, [sp]
   1cd10:	ldr	r3, [r5]
   1cd14:	stmib	sp, {ip, lr}
   1cd18:	bl	11324 <__fprintf_chk@plt>
   1cd1c:	b	1cbf4 <__assert_fail@plt+0xb7e0>
   1cd20:	mov	r2, #5
   1cd24:	movw	r1, #2832	; 0xb10
   1cd28:	movt	r1, #2
   1cd2c:	mov	r0, #0
   1cd30:	bl	11174 <dcgettext@plt>
   1cd34:	ldmib	r5, {ip, lr}
   1cd38:	mov	r2, r0
   1cd3c:	mov	r1, #1
   1cd40:	mov	r0, r4
   1cd44:	ldr	r3, [r5, #16]
   1cd48:	str	ip, [sp]
   1cd4c:	ldr	ip, [r5, #12]
   1cd50:	str	r3, [sp, #12]
   1cd54:	ldr	r3, [r5]
   1cd58:	str	lr, [sp, #4]
   1cd5c:	str	ip, [sp, #8]
   1cd60:	bl	11324 <__fprintf_chk@plt>
   1cd64:	b	1cbf4 <__assert_fail@plt+0xb7e0>
   1cd68:	mov	r2, #5
   1cd6c:	movw	r1, #2868	; 0xb34
   1cd70:	movt	r1, #2
   1cd74:	mov	r0, #0
   1cd78:	bl	11174 <dcgettext@plt>
   1cd7c:	ldr	lr, [r5, #4]
   1cd80:	mov	r2, r0
   1cd84:	mov	r1, #1
   1cd88:	mov	r0, r4
   1cd8c:	ldr	r3, [r5, #8]
   1cd90:	ldr	ip, [r5, #20]
   1cd94:	str	lr, [sp]
   1cd98:	ldr	lr, [r5, #12]
   1cd9c:	str	ip, [sp, #16]
   1cda0:	ldr	ip, [r5, #16]
   1cda4:	str	r3, [sp, #4]
   1cda8:	ldr	r3, [r5]
   1cdac:	str	lr, [sp, #8]
   1cdb0:	str	ip, [sp, #12]
   1cdb4:	bl	11324 <__fprintf_chk@plt>
   1cdb8:	b	1cbf4 <__assert_fail@plt+0xb7e0>
   1cdbc:	mov	r2, #5
   1cdc0:	movw	r1, #2908	; 0xb5c
   1cdc4:	movt	r1, #2
   1cdc8:	mov	r0, #0
   1cdcc:	bl	11174 <dcgettext@plt>
   1cdd0:	ldmib	r5, {r3, ip}
   1cdd4:	mov	r2, r0
   1cdd8:	mov	r1, #1
   1cddc:	mov	r0, r4
   1cde0:	ldr	lr, [r5, #24]
   1cde4:	str	r3, [sp]
   1cde8:	ldr	r3, [r5, #12]
   1cdec:	str	lr, [sp, #20]
   1cdf0:	ldr	lr, [r5, #20]
   1cdf4:	str	ip, [sp, #4]
   1cdf8:	ldr	ip, [r5, #16]
   1cdfc:	str	r3, [sp, #8]
   1ce00:	ldr	r3, [r5]
   1ce04:	str	ip, [sp, #12]
   1ce08:	str	lr, [sp, #16]
   1ce0c:	bl	11324 <__fprintf_chk@plt>
   1ce10:	b	1cbf4 <__assert_fail@plt+0xb7e0>
   1ce14:	mov	r2, #5
   1ce18:	movw	r1, #2952	; 0xb88
   1ce1c:	movt	r1, #2
   1ce20:	mov	r0, #0
   1ce24:	bl	11174 <dcgettext@plt>
   1ce28:	ldmib	r5, {ip, lr}
   1ce2c:	mov	r2, r0
   1ce30:	mov	r1, #1
   1ce34:	mov	r0, r4
   1ce38:	ldr	r3, [r5, #28]
   1ce3c:	str	ip, [sp]
   1ce40:	ldr	ip, [r5, #12]
   1ce44:	str	r3, [sp, #24]
   1ce48:	ldr	r3, [r5, #24]
   1ce4c:	str	lr, [sp, #4]
   1ce50:	ldr	lr, [r5, #16]
   1ce54:	str	ip, [sp, #8]
   1ce58:	ldr	ip, [r5, #20]
   1ce5c:	str	r3, [sp, #20]
   1ce60:	ldr	r3, [r5]
   1ce64:	str	lr, [sp, #12]
   1ce68:	str	ip, [sp, #16]
   1ce6c:	bl	11324 <__fprintf_chk@plt>
   1ce70:	b	1cbf4 <__assert_fail@plt+0xb7e0>
   1ce74:	movw	r1, #3052	; 0xbec
   1ce78:	movt	r1, #2
   1ce7c:	b	1cb94 <__assert_fail@plt+0xb780>
   1ce80:	strd	r4, [sp, #-12]!
   1ce84:	str	lr, [sp, #8]
   1ce88:	sub	sp, sp, #12
   1ce8c:	ldr	r5, [sp, #24]
   1ce90:	ldr	ip, [r5]
   1ce94:	cmp	ip, #0
   1ce98:	beq	1ceb4 <__assert_fail@plt+0xbaa0>
   1ce9c:	mov	lr, r5
   1cea0:	mov	ip, #0
   1cea4:	ldr	r4, [lr, #4]!
   1cea8:	add	ip, ip, #1
   1ceac:	cmp	r4, #0
   1ceb0:	bne	1cea4 <__assert_fail@plt+0xba90>
   1ceb4:	stm	sp, {r5, ip}
   1ceb8:	bl	1caa0 <__assert_fail@plt+0xb68c>
   1cebc:	add	sp, sp, #12
   1cec0:	ldrd	r4, [sp]
   1cec4:	add	sp, sp, #8
   1cec8:	pop	{pc}		; (ldr pc, [sp], #4)
   1cecc:	push	{lr}		; (str lr, [sp, #-4]!)
   1ced0:	sub	sp, sp, #52	; 0x34
   1ced4:	ldr	ip, [sp, #56]	; 0x38
   1ced8:	ldr	lr, [ip]
   1cedc:	cmp	lr, #0
   1cee0:	str	lr, [sp, #8]
   1cee4:	beq	1cf7c <__assert_fail@plt+0xbb68>
   1cee8:	ldr	lr, [ip, #4]
   1ceec:	cmp	lr, #0
   1cef0:	str	lr, [sp, #12]
   1cef4:	beq	1cf90 <__assert_fail@plt+0xbb7c>
   1cef8:	ldr	lr, [ip, #8]
   1cefc:	cmp	lr, #0
   1cf00:	str	lr, [sp, #16]
   1cf04:	beq	1cf98 <__assert_fail@plt+0xbb84>
   1cf08:	ldr	lr, [ip, #12]
   1cf0c:	cmp	lr, #0
   1cf10:	str	lr, [sp, #20]
   1cf14:	beq	1cfa0 <__assert_fail@plt+0xbb8c>
   1cf18:	ldr	lr, [ip, #16]
   1cf1c:	cmp	lr, #0
   1cf20:	str	lr, [sp, #24]
   1cf24:	beq	1cfa8 <__assert_fail@plt+0xbb94>
   1cf28:	ldr	lr, [ip, #20]
   1cf2c:	cmp	lr, #0
   1cf30:	str	lr, [sp, #28]
   1cf34:	beq	1cfb0 <__assert_fail@plt+0xbb9c>
   1cf38:	ldr	lr, [ip, #24]
   1cf3c:	cmp	lr, #0
   1cf40:	str	lr, [sp, #32]
   1cf44:	beq	1cfb8 <__assert_fail@plt+0xbba4>
   1cf48:	ldr	lr, [ip, #28]
   1cf4c:	cmp	lr, #0
   1cf50:	str	lr, [sp, #36]	; 0x24
   1cf54:	beq	1cfc0 <__assert_fail@plt+0xbbac>
   1cf58:	ldr	lr, [ip, #32]
   1cf5c:	cmp	lr, #0
   1cf60:	str	lr, [sp, #40]	; 0x28
   1cf64:	beq	1cfc8 <__assert_fail@plt+0xbbb4>
   1cf68:	ldr	ip, [ip, #36]	; 0x24
   1cf6c:	cmp	ip, #0
   1cf70:	str	ip, [sp, #44]	; 0x2c
   1cf74:	movne	lr, #10
   1cf78:	moveq	lr, #9
   1cf7c:	add	ip, sp, #8
   1cf80:	stm	sp, {ip, lr}
   1cf84:	bl	1caa0 <__assert_fail@plt+0xb68c>
   1cf88:	add	sp, sp, #52	; 0x34
   1cf8c:	pop	{pc}		; (ldr pc, [sp], #4)
   1cf90:	mov	lr, #1
   1cf94:	b	1cf7c <__assert_fail@plt+0xbb68>
   1cf98:	mov	lr, #2
   1cf9c:	b	1cf7c <__assert_fail@plt+0xbb68>
   1cfa0:	mov	lr, #3
   1cfa4:	b	1cf7c <__assert_fail@plt+0xbb68>
   1cfa8:	mov	lr, #4
   1cfac:	b	1cf7c <__assert_fail@plt+0xbb68>
   1cfb0:	mov	lr, #5
   1cfb4:	b	1cf7c <__assert_fail@plt+0xbb68>
   1cfb8:	mov	lr, #6
   1cfbc:	b	1cf7c <__assert_fail@plt+0xbb68>
   1cfc0:	mov	lr, #7
   1cfc4:	b	1cf7c <__assert_fail@plt+0xbb68>
   1cfc8:	mov	lr, #8
   1cfcc:	b	1cf7c <__assert_fail@plt+0xbb68>
   1cfd0:	push	{r3}		; (str r3, [sp, #-4]!)
   1cfd4:	push	{lr}		; (str lr, [sp, #-4]!)
   1cfd8:	sub	sp, sp, #56	; 0x38
   1cfdc:	ldr	ip, [sp, #64]	; 0x40
   1cfe0:	add	r3, sp, #64	; 0x40
   1cfe4:	str	r3, [sp, #12]
   1cfe8:	cmp	ip, #0
   1cfec:	str	ip, [sp, #16]
   1cff0:	beq	1d088 <__assert_fail@plt+0xbc74>
   1cff4:	ldr	ip, [sp, #68]	; 0x44
   1cff8:	cmp	ip, #0
   1cffc:	str	ip, [sp, #20]
   1d000:	beq	1d0ac <__assert_fail@plt+0xbc98>
   1d004:	ldr	ip, [sp, #72]	; 0x48
   1d008:	cmp	ip, #0
   1d00c:	str	ip, [sp, #24]
   1d010:	beq	1d0b4 <__assert_fail@plt+0xbca0>
   1d014:	ldr	ip, [sp, #76]	; 0x4c
   1d018:	cmp	ip, #0
   1d01c:	str	ip, [sp, #28]
   1d020:	beq	1d0bc <__assert_fail@plt+0xbca8>
   1d024:	ldr	ip, [sp, #80]	; 0x50
   1d028:	cmp	ip, #0
   1d02c:	str	ip, [sp, #32]
   1d030:	beq	1d0c4 <__assert_fail@plt+0xbcb0>
   1d034:	ldr	ip, [sp, #84]	; 0x54
   1d038:	cmp	ip, #0
   1d03c:	str	ip, [sp, #36]	; 0x24
   1d040:	beq	1d0cc <__assert_fail@plt+0xbcb8>
   1d044:	ldr	ip, [sp, #88]	; 0x58
   1d048:	cmp	ip, #0
   1d04c:	str	ip, [sp, #40]	; 0x28
   1d050:	beq	1d0d4 <__assert_fail@plt+0xbcc0>
   1d054:	ldr	ip, [sp, #92]	; 0x5c
   1d058:	cmp	ip, #0
   1d05c:	str	ip, [sp, #44]	; 0x2c
   1d060:	beq	1d0dc <__assert_fail@plt+0xbcc8>
   1d064:	ldr	ip, [sp, #96]	; 0x60
   1d068:	cmp	ip, #0
   1d06c:	str	ip, [sp, #48]	; 0x30
   1d070:	beq	1d0e4 <__assert_fail@plt+0xbcd0>
   1d074:	ldr	r3, [sp, #100]	; 0x64
   1d078:	cmp	r3, #0
   1d07c:	str	r3, [sp, #52]	; 0x34
   1d080:	movne	ip, #10
   1d084:	moveq	ip, #9
   1d088:	ldr	r3, [sp, #60]	; 0x3c
   1d08c:	add	lr, sp, #16
   1d090:	str	lr, [sp]
   1d094:	str	ip, [sp, #4]
   1d098:	bl	1caa0 <__assert_fail@plt+0xb68c>
   1d09c:	add	sp, sp, #56	; 0x38
   1d0a0:	pop	{lr}		; (ldr lr, [sp], #4)
   1d0a4:	add	sp, sp, #4
   1d0a8:	bx	lr
   1d0ac:	mov	ip, #1
   1d0b0:	b	1d088 <__assert_fail@plt+0xbc74>
   1d0b4:	mov	ip, #2
   1d0b8:	b	1d088 <__assert_fail@plt+0xbc74>
   1d0bc:	mov	ip, #3
   1d0c0:	b	1d088 <__assert_fail@plt+0xbc74>
   1d0c4:	mov	ip, #4
   1d0c8:	b	1d088 <__assert_fail@plt+0xbc74>
   1d0cc:	mov	ip, #5
   1d0d0:	b	1d088 <__assert_fail@plt+0xbc74>
   1d0d4:	mov	ip, #6
   1d0d8:	b	1d088 <__assert_fail@plt+0xbc74>
   1d0dc:	mov	ip, #7
   1d0e0:	b	1d088 <__assert_fail@plt+0xbc74>
   1d0e4:	mov	ip, #8
   1d0e8:	b	1d088 <__assert_fail@plt+0xbc74>
   1d0ec:	movw	r3, #4548	; 0x11c4
   1d0f0:	movt	r3, #3
   1d0f4:	str	r4, [sp, #-8]!
   1d0f8:	mov	r0, #10
   1d0fc:	ldr	r1, [r3]
   1d100:	str	lr, [sp, #4]
   1d104:	bl	11168 <fputc_unlocked@plt>
   1d108:	mov	r2, #5
   1d10c:	movw	r1, #3112	; 0xc28
   1d110:	movt	r1, #2
   1d114:	mov	r0, #0
   1d118:	bl	11174 <dcgettext@plt>
   1d11c:	mov	r1, r0
   1d120:	movw	r2, #3132	; 0xc3c
   1d124:	movt	r2, #2
   1d128:	mov	r0, #1
   1d12c:	bl	11300 <__printf_chk@plt>
   1d130:	mov	r2, #5
   1d134:	movw	r1, #3156	; 0xc54
   1d138:	movt	r1, #2
   1d13c:	mov	r0, #0
   1d140:	bl	11174 <dcgettext@plt>
   1d144:	mov	r1, r0
   1d148:	movw	r3, #288	; 0x120
   1d14c:	movt	r3, #2
   1d150:	movw	r2, #328	; 0x148
   1d154:	movt	r2, #2
   1d158:	mov	r0, #1
   1d15c:	bl	11300 <__printf_chk@plt>
   1d160:	mov	r2, #5
   1d164:	movw	r1, #3176	; 0xc68
   1d168:	movt	r1, #2
   1d16c:	mov	r0, #0
   1d170:	bl	11174 <dcgettext@plt>
   1d174:	mov	r1, r0
   1d178:	movw	r2, #3216	; 0xc90
   1d17c:	movt	r2, #2
   1d180:	mov	r0, #1
   1d184:	ldr	r4, [sp]
   1d188:	ldr	lr, [sp, #4]
   1d18c:	add	sp, sp, #8
   1d190:	b	11300 <__printf_chk@plt>
   1d194:	strd	r4, [sp, #-16]!
   1d198:	mov	r4, r0
   1d19c:	mov	r5, r2
   1d1a0:	str	r6, [sp, #8]
   1d1a4:	mov	r6, r1
   1d1a8:	str	lr, [sp, #12]
   1d1ac:	bl	1eec8 <__assert_fail@plt+0xdab4>
   1d1b0:	cmp	r0, #0
   1d1b4:	beq	1d1c8 <__assert_fail@plt+0xbdb4>
   1d1b8:	ldrd	r4, [sp]
   1d1bc:	ldr	r6, [sp, #8]
   1d1c0:	add	sp, sp, #12
   1d1c4:	pop	{pc}		; (ldr pc, [sp], #4)
   1d1c8:	cmp	r4, #0
   1d1cc:	beq	1d1dc <__assert_fail@plt+0xbdc8>
   1d1d0:	cmp	r6, #0
   1d1d4:	cmpne	r5, #0
   1d1d8:	beq	1d1b8 <__assert_fail@plt+0xbda4>
   1d1dc:	bl	1d798 <__assert_fail@plt+0xc384>
   1d1e0:	str	r4, [sp, #-8]!
   1d1e4:	str	lr, [sp, #4]
   1d1e8:	bl	1e9ac <__assert_fail@plt+0xd598>
   1d1ec:	cmp	r0, #0
   1d1f0:	beq	1d200 <__assert_fail@plt+0xbdec>
   1d1f4:	ldr	r4, [sp]
   1d1f8:	add	sp, sp, #4
   1d1fc:	pop	{pc}		; (ldr pc, [sp], #4)
   1d200:	bl	1d798 <__assert_fail@plt+0xc384>
   1d204:	str	r4, [sp, #-8]!
   1d208:	str	lr, [sp, #4]
   1d20c:	bl	1e9ac <__assert_fail@plt+0xd598>
   1d210:	cmp	r0, #0
   1d214:	beq	1d224 <__assert_fail@plt+0xbe10>
   1d218:	ldr	r4, [sp]
   1d21c:	add	sp, sp, #4
   1d220:	pop	{pc}		; (ldr pc, [sp], #4)
   1d224:	bl	1d798 <__assert_fail@plt+0xc384>
   1d228:	str	r4, [sp, #-8]!
   1d22c:	str	lr, [sp, #4]
   1d230:	bl	1e9ac <__assert_fail@plt+0xd598>
   1d234:	cmp	r0, #0
   1d238:	beq	1d248 <__assert_fail@plt+0xbe34>
   1d23c:	ldr	r4, [sp]
   1d240:	add	sp, sp, #4
   1d244:	pop	{pc}		; (ldr pc, [sp], #4)
   1d248:	bl	1d798 <__assert_fail@plt+0xc384>
   1d24c:	strd	r4, [sp, #-16]!
   1d250:	mov	r5, r0
   1d254:	mov	r4, r1
   1d258:	str	r6, [sp, #8]
   1d25c:	str	lr, [sp, #12]
   1d260:	bl	1e9e8 <__assert_fail@plt+0xd5d4>
   1d264:	cmp	r0, #0
   1d268:	beq	1d27c <__assert_fail@plt+0xbe68>
   1d26c:	ldrd	r4, [sp]
   1d270:	ldr	r6, [sp, #8]
   1d274:	add	sp, sp, #12
   1d278:	pop	{pc}		; (ldr pc, [sp], #4)
   1d27c:	adds	r4, r4, #0
   1d280:	movne	r4, #1
   1d284:	cmp	r5, #0
   1d288:	moveq	r4, #1
   1d28c:	cmp	r4, #0
   1d290:	beq	1d26c <__assert_fail@plt+0xbe58>
   1d294:	bl	1d798 <__assert_fail@plt+0xc384>
   1d298:	cmp	r1, #0
   1d29c:	orreq	r1, r1, #1
   1d2a0:	str	r4, [sp, #-8]!
   1d2a4:	str	lr, [sp, #4]
   1d2a8:	bl	1e9e8 <__assert_fail@plt+0xd5d4>
   1d2ac:	cmp	r0, #0
   1d2b0:	beq	1d2c0 <__assert_fail@plt+0xbeac>
   1d2b4:	ldr	r4, [sp]
   1d2b8:	add	sp, sp, #4
   1d2bc:	pop	{pc}		; (ldr pc, [sp], #4)
   1d2c0:	bl	1d798 <__assert_fail@plt+0xc384>
   1d2c4:	strd	r4, [sp, #-16]!
   1d2c8:	mov	r4, r0
   1d2cc:	mov	r5, r2
   1d2d0:	str	r6, [sp, #8]
   1d2d4:	mov	r6, r1
   1d2d8:	str	lr, [sp, #12]
   1d2dc:	bl	1eec8 <__assert_fail@plt+0xdab4>
   1d2e0:	cmp	r0, #0
   1d2e4:	beq	1d2f8 <__assert_fail@plt+0xbee4>
   1d2e8:	ldrd	r4, [sp]
   1d2ec:	ldr	r6, [sp, #8]
   1d2f0:	add	sp, sp, #12
   1d2f4:	pop	{pc}		; (ldr pc, [sp], #4)
   1d2f8:	cmp	r4, #0
   1d2fc:	beq	1d30c <__assert_fail@plt+0xbef8>
   1d300:	cmp	r6, #0
   1d304:	cmpne	r5, #0
   1d308:	beq	1d2e8 <__assert_fail@plt+0xbed4>
   1d30c:	bl	1d798 <__assert_fail@plt+0xc384>
   1d310:	cmp	r2, #0
   1d314:	cmpne	r1, #0
   1d318:	str	r4, [sp, #-8]!
   1d31c:	moveq	r2, #1
   1d320:	str	lr, [sp, #4]
   1d324:	moveq	r1, r2
   1d328:	bl	1eec8 <__assert_fail@plt+0xdab4>
   1d32c:	cmp	r0, #0
   1d330:	beq	1d340 <__assert_fail@plt+0xbf2c>
   1d334:	ldr	r4, [sp]
   1d338:	add	sp, sp, #4
   1d33c:	pop	{pc}		; (ldr pc, [sp], #4)
   1d340:	bl	1d798 <__assert_fail@plt+0xc384>
   1d344:	mov	r2, r1
   1d348:	mov	r1, r0
   1d34c:	str	r4, [sp, #-8]!
   1d350:	mov	r0, #0
   1d354:	str	lr, [sp, #4]
   1d358:	bl	1eec8 <__assert_fail@plt+0xdab4>
   1d35c:	cmp	r0, #0
   1d360:	beq	1d370 <__assert_fail@plt+0xbf5c>
   1d364:	ldr	r4, [sp]
   1d368:	add	sp, sp, #4
   1d36c:	pop	{pc}		; (ldr pc, [sp], #4)
   1d370:	bl	1d798 <__assert_fail@plt+0xc384>
   1d374:	cmp	r1, #0
   1d378:	cmpne	r0, #0
   1d37c:	str	r4, [sp, #-8]!
   1d380:	moveq	r2, #1
   1d384:	movne	r2, r1
   1d388:	str	lr, [sp, #4]
   1d38c:	movne	r1, r0
   1d390:	moveq	r1, r2
   1d394:	mov	r0, #0
   1d398:	bl	1eec8 <__assert_fail@plt+0xdab4>
   1d39c:	cmp	r0, #0
   1d3a0:	beq	1d3b0 <__assert_fail@plt+0xbf9c>
   1d3a4:	ldr	r4, [sp]
   1d3a8:	add	sp, sp, #4
   1d3ac:	pop	{pc}		; (ldr pc, [sp], #4)
   1d3b0:	bl	1d798 <__assert_fail@plt+0xc384>
   1d3b4:	cmp	r0, #0
   1d3b8:	strd	r4, [sp, #-16]!
   1d3bc:	mov	r5, r1
   1d3c0:	ldr	r4, [r1]
   1d3c4:	str	r6, [sp, #8]
   1d3c8:	str	lr, [sp, #12]
   1d3cc:	beq	1d414 <__assert_fail@plt+0xc000>
   1d3d0:	lsr	r3, r4, #1
   1d3d4:	add	r3, r3, #1
   1d3d8:	adds	r4, r4, r3
   1d3dc:	bcs	1d410 <__assert_fail@plt+0xbffc>
   1d3e0:	mov	r2, #1
   1d3e4:	mov	r1, r4
   1d3e8:	bl	1eec8 <__assert_fail@plt+0xdab4>
   1d3ec:	cmp	r0, #0
   1d3f0:	beq	1d408 <__assert_fail@plt+0xbff4>
   1d3f4:	ldr	r6, [sp, #8]
   1d3f8:	str	r4, [r5]
   1d3fc:	ldrd	r4, [sp]
   1d400:	add	sp, sp, #12
   1d404:	pop	{pc}		; (ldr pc, [sp], #4)
   1d408:	cmp	r4, #0
   1d40c:	beq	1d3f4 <__assert_fail@plt+0xbfe0>
   1d410:	bl	1d798 <__assert_fail@plt+0xc384>
   1d414:	cmp	r4, #0
   1d418:	mov	r2, #1
   1d41c:	moveq	r4, #64	; 0x40
   1d420:	mov	r1, r4
   1d424:	bl	1eec8 <__assert_fail@plt+0xdab4>
   1d428:	cmp	r0, #0
   1d42c:	bne	1d3f4 <__assert_fail@plt+0xbfe0>
   1d430:	b	1d410 <__assert_fail@plt+0xbffc>
   1d434:	cmp	r0, #0
   1d438:	strd	r4, [sp, #-16]!
   1d43c:	mov	r5, r1
   1d440:	ldr	r4, [r1]
   1d444:	str	r6, [sp, #8]
   1d448:	mov	r6, r2
   1d44c:	str	lr, [sp, #12]
   1d450:	beq	1d498 <__assert_fail@plt+0xc084>
   1d454:	lsr	r3, r4, #1
   1d458:	add	r3, r3, #1
   1d45c:	adds	r4, r4, r3
   1d460:	bcs	1d494 <__assert_fail@plt+0xc080>
   1d464:	mov	r1, r4
   1d468:	bl	1eec8 <__assert_fail@plt+0xdab4>
   1d46c:	cmp	r0, #0
   1d470:	beq	1d488 <__assert_fail@plt+0xc074>
   1d474:	ldr	r6, [sp, #8]
   1d478:	str	r4, [r5]
   1d47c:	ldrd	r4, [sp]
   1d480:	add	sp, sp, #12
   1d484:	pop	{pc}		; (ldr pc, [sp], #4)
   1d488:	cmp	r4, #0
   1d48c:	cmpne	r6, #0
   1d490:	beq	1d474 <__assert_fail@plt+0xc060>
   1d494:	bl	1d798 <__assert_fail@plt+0xc384>
   1d498:	cmp	r4, #0
   1d49c:	bne	1d4b0 <__assert_fail@plt+0xc09c>
   1d4a0:	mov	r4, #64	; 0x40
   1d4a4:	udiv	r4, r4, r2
   1d4a8:	cmp	r2, #64	; 0x40
   1d4ac:	addhi	r4, r4, #1
   1d4b0:	mov	r2, r6
   1d4b4:	mov	r1, r4
   1d4b8:	mov	r0, #0
   1d4bc:	bl	1eec8 <__assert_fail@plt+0xdab4>
   1d4c0:	cmp	r0, #0
   1d4c4:	bne	1d474 <__assert_fail@plt+0xc060>
   1d4c8:	b	1d494 <__assert_fail@plt+0xc080>
   1d4cc:	ldr	ip, [r1]
   1d4d0:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1d4d4:	strd	r6, [sp, #8]
   1d4d8:	mov	r7, r1
   1d4dc:	mov	r6, r0
   1d4e0:	str	r8, [sp, #16]
   1d4e4:	mvn	r8, r3
   1d4e8:	lsr	r8, r8, #31
   1d4ec:	str	lr, [sp, #20]
   1d4f0:	asr	r1, ip, #1
   1d4f4:	ldr	lr, [sp, #24]
   1d4f8:	adds	r4, ip, r1
   1d4fc:	mvnvs	r4, #-2147483648	; 0x80000000
   1d500:	cmp	r3, r4
   1d504:	movge	r1, #0
   1d508:	andlt	r1, r8, #1
   1d50c:	cmp	r1, #0
   1d510:	movne	r4, r3
   1d514:	smull	r0, r1, r4, lr
   1d518:	cmp	r1, r0, asr #31
   1d51c:	bne	1d5cc <__assert_fail@plt+0xc1b8>
   1d520:	cmp	r0, #63	; 0x3f
   1d524:	mov	r5, r0
   1d528:	ble	1d598 <__assert_fail@plt+0xc184>
   1d52c:	cmp	r6, #0
   1d530:	sub	r1, r4, ip
   1d534:	streq	r6, [r7]
   1d538:	cmp	r1, r2
   1d53c:	bge	1d56c <__assert_fail@plt+0xc158>
   1d540:	adds	r4, ip, r2
   1d544:	bvs	1d5c8 <__assert_fail@plt+0xc1b4>
   1d548:	cmp	r4, r3
   1d54c:	movle	r3, #0
   1d550:	andgt	r3, r8, #1
   1d554:	cmp	r3, #0
   1d558:	bne	1d5c8 <__assert_fail@plt+0xc1b4>
   1d55c:	smull	r0, r1, r4, lr
   1d560:	cmp	r1, r0, asr #31
   1d564:	mov	r5, r0
   1d568:	bne	1d5c8 <__assert_fail@plt+0xc1b4>
   1d56c:	mov	r1, r5
   1d570:	mov	r0, r6
   1d574:	bl	1e9e8 <__assert_fail@plt+0xd5d4>
   1d578:	cmp	r0, #0
   1d57c:	beq	1d5ac <__assert_fail@plt+0xc198>
   1d580:	ldr	r8, [sp, #16]
   1d584:	str	r4, [r7]
   1d588:	ldrd	r4, [sp]
   1d58c:	ldrd	r6, [sp, #8]
   1d590:	add	sp, sp, #20
   1d594:	pop	{pc}		; (ldr pc, [sp], #4)
   1d598:	mov	r0, #64	; 0x40
   1d59c:	sdiv	r4, r0, lr
   1d5a0:	mls	r5, lr, r4, r0
   1d5a4:	sub	r5, r0, r5
   1d5a8:	b	1d52c <__assert_fail@plt+0xc118>
   1d5ac:	adds	r5, r5, #0
   1d5b0:	movne	r5, #1
   1d5b4:	cmp	r6, #0
   1d5b8:	movne	r6, r5
   1d5bc:	moveq	r6, #1
   1d5c0:	cmp	r6, #0
   1d5c4:	beq	1d580 <__assert_fail@plt+0xc16c>
   1d5c8:	bl	1d798 <__assert_fail@plt+0xc384>
   1d5cc:	mvn	r0, #-2147483648	; 0x80000000
   1d5d0:	b	1d59c <__assert_fail@plt+0xc188>
   1d5d4:	mov	r1, #1
   1d5d8:	str	r4, [sp, #-8]!
   1d5dc:	str	lr, [sp, #4]
   1d5e0:	bl	1e938 <__assert_fail@plt+0xd524>
   1d5e4:	cmp	r0, #0
   1d5e8:	beq	1d5f8 <__assert_fail@plt+0xc1e4>
   1d5ec:	ldr	r4, [sp]
   1d5f0:	add	sp, sp, #4
   1d5f4:	pop	{pc}		; (ldr pc, [sp], #4)
   1d5f8:	bl	1d798 <__assert_fail@plt+0xc384>
   1d5fc:	mov	r1, #1
   1d600:	str	r4, [sp, #-8]!
   1d604:	str	lr, [sp, #4]
   1d608:	bl	1e938 <__assert_fail@plt+0xd524>
   1d60c:	cmp	r0, #0
   1d610:	beq	1d620 <__assert_fail@plt+0xc20c>
   1d614:	ldr	r4, [sp]
   1d618:	add	sp, sp, #4
   1d61c:	pop	{pc}		; (ldr pc, [sp], #4)
   1d620:	bl	1d798 <__assert_fail@plt+0xc384>
   1d624:	str	r4, [sp, #-8]!
   1d628:	str	lr, [sp, #4]
   1d62c:	bl	1e938 <__assert_fail@plt+0xd524>
   1d630:	cmp	r0, #0
   1d634:	beq	1d644 <__assert_fail@plt+0xc230>
   1d638:	ldr	r4, [sp]
   1d63c:	add	sp, sp, #4
   1d640:	pop	{pc}		; (ldr pc, [sp], #4)
   1d644:	bl	1d798 <__assert_fail@plt+0xc384>
   1d648:	str	r4, [sp, #-8]!
   1d64c:	str	lr, [sp, #4]
   1d650:	bl	1e938 <__assert_fail@plt+0xd524>
   1d654:	cmp	r0, #0
   1d658:	beq	1d668 <__assert_fail@plt+0xc254>
   1d65c:	ldr	r4, [sp]
   1d660:	add	sp, sp, #4
   1d664:	pop	{pc}		; (ldr pc, [sp], #4)
   1d668:	bl	1d798 <__assert_fail@plt+0xc384>
   1d66c:	strd	r4, [sp, #-16]!
   1d670:	mov	r4, r1
   1d674:	str	r6, [sp, #8]
   1d678:	mov	r6, r0
   1d67c:	mov	r0, r1
   1d680:	str	lr, [sp, #12]
   1d684:	bl	1e9ac <__assert_fail@plt+0xd598>
   1d688:	subs	r5, r0, #0
   1d68c:	beq	1d6b0 <__assert_fail@plt+0xc29c>
   1d690:	mov	r2, r4
   1d694:	mov	r1, r6
   1d698:	bl	1112c <memcpy@plt>
   1d69c:	mov	r0, r5
   1d6a0:	ldrd	r4, [sp]
   1d6a4:	ldr	r6, [sp, #8]
   1d6a8:	add	sp, sp, #12
   1d6ac:	pop	{pc}		; (ldr pc, [sp], #4)
   1d6b0:	bl	1d798 <__assert_fail@plt+0xc384>
   1d6b4:	strd	r4, [sp, #-16]!
   1d6b8:	mov	r4, r1
   1d6bc:	str	r6, [sp, #8]
   1d6c0:	mov	r6, r0
   1d6c4:	mov	r0, r1
   1d6c8:	str	lr, [sp, #12]
   1d6cc:	bl	1e9ac <__assert_fail@plt+0xd598>
   1d6d0:	subs	r5, r0, #0
   1d6d4:	beq	1d6f8 <__assert_fail@plt+0xc2e4>
   1d6d8:	mov	r2, r4
   1d6dc:	mov	r1, r6
   1d6e0:	bl	1112c <memcpy@plt>
   1d6e4:	mov	r0, r5
   1d6e8:	ldrd	r4, [sp]
   1d6ec:	ldr	r6, [sp, #8]
   1d6f0:	add	sp, sp, #12
   1d6f4:	pop	{pc}		; (ldr pc, [sp], #4)
   1d6f8:	bl	1d798 <__assert_fail@plt+0xc384>
   1d6fc:	strd	r4, [sp, #-16]!
   1d700:	mov	r4, r1
   1d704:	str	r6, [sp, #8]
   1d708:	mov	r6, r0
   1d70c:	add	r0, r1, #1
   1d710:	str	lr, [sp, #12]
   1d714:	bl	1e9ac <__assert_fail@plt+0xd598>
   1d718:	subs	r5, r0, #0
   1d71c:	beq	1d748 <__assert_fail@plt+0xc334>
   1d720:	mov	r3, #0
   1d724:	mov	r1, r6
   1d728:	mov	r2, r4
   1d72c:	strb	r3, [r5, r4]
   1d730:	bl	1112c <memcpy@plt>
   1d734:	mov	r0, r5
   1d738:	ldrd	r4, [sp]
   1d73c:	ldr	r6, [sp, #8]
   1d740:	add	sp, sp, #12
   1d744:	pop	{pc}		; (ldr pc, [sp], #4)
   1d748:	bl	1d798 <__assert_fail@plt+0xc384>
   1d74c:	strd	r4, [sp, #-16]!
   1d750:	str	r6, [sp, #8]
   1d754:	mov	r6, r0
   1d758:	str	lr, [sp, #12]
   1d75c:	bl	112a0 <strlen@plt>
   1d760:	add	r4, r0, #1
   1d764:	mov	r0, r4
   1d768:	bl	1e9ac <__assert_fail@plt+0xd598>
   1d76c:	subs	r5, r0, #0
   1d770:	beq	1d794 <__assert_fail@plt+0xc380>
   1d774:	mov	r2, r4
   1d778:	mov	r1, r6
   1d77c:	bl	1112c <memcpy@plt>
   1d780:	mov	r0, r5
   1d784:	ldrd	r4, [sp]
   1d788:	ldr	r6, [sp, #8]
   1d78c:	add	sp, sp, #12
   1d790:	pop	{pc}		; (ldr pc, [sp], #4)
   1d794:	bl	1d798 <__assert_fail@plt+0xc384>
   1d798:	movw	r3, #4456	; 0x1168
   1d79c:	movt	r3, #3
   1d7a0:	str	r4, [sp, #-8]!
   1d7a4:	ldr	r4, [r3]
   1d7a8:	mov	r2, #5
   1d7ac:	movw	r1, #3296	; 0xce0
   1d7b0:	movt	r1, #2
   1d7b4:	mov	r0, #0
   1d7b8:	str	lr, [sp, #4]
   1d7bc:	bl	11174 <dcgettext@plt>
   1d7c0:	mov	r3, r0
   1d7c4:	movw	r2, #556	; 0x22c
   1d7c8:	movt	r2, #2
   1d7cc:	mov	r1, #0
   1d7d0:	mov	r0, r4
   1d7d4:	bl	1121c <error@plt>
   1d7d8:	bl	113f0 <abort@plt>
   1d7dc:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1d7e0:	strd	r6, [sp, #8]
   1d7e4:	mov	r6, r2
   1d7e8:	mov	r7, r3
   1d7ec:	str	r8, [sp, #16]
   1d7f0:	mov	r2, r1
   1d7f4:	mov	r1, #0
   1d7f8:	str	lr, [sp, #20]
   1d7fc:	sub	sp, sp, #16
   1d800:	mov	r8, r0
   1d804:	ldr	ip, [sp, #48]	; 0x30
   1d808:	add	r3, sp, #8
   1d80c:	str	ip, [sp]
   1d810:	bl	1dbdc <__assert_fail@plt+0xc7c8>
   1d814:	subs	r4, r0, #0
   1d818:	bne	1d868 <__assert_fail@plt+0xc454>
   1d81c:	ldrd	r4, [sp, #8]
   1d820:	ldrd	r0, [sp, #40]	; 0x28
   1d824:	cmp	r5, r7
   1d828:	cmpeq	r4, r6
   1d82c:	movcc	r3, #1
   1d830:	movcs	r3, #0
   1d834:	cmp	r5, r1
   1d838:	cmpeq	r4, r0
   1d83c:	orrhi	r3, r3, #1
   1d840:	cmp	r3, #0
   1d844:	bne	1d8e8 <__assert_fail@plt+0xc4d4>
   1d848:	mov	r0, r4
   1d84c:	mov	r1, r5
   1d850:	add	sp, sp, #16
   1d854:	ldrd	r4, [sp]
   1d858:	ldrd	r6, [sp, #8]
   1d85c:	ldr	r8, [sp, #16]
   1d860:	add	sp, sp, #20
   1d864:	pop	{pc}		; (ldr pc, [sp], #4)
   1d868:	bl	112dc <__errno_location@plt>
   1d86c:	cmp	r4, #1
   1d870:	moveq	r3, #75	; 0x4b
   1d874:	moveq	r4, r3
   1d878:	streq	r3, [r0]
   1d87c:	beq	1d8d0 <__assert_fail@plt+0xc4bc>
   1d880:	cmp	r4, #3
   1d884:	beq	1d8c4 <__assert_fail@plt+0xc4b0>
   1d888:	ldr	r3, [sp, #56]	; 0x38
   1d88c:	ldr	r4, [r0]
   1d890:	cmp	r3, #0
   1d894:	beq	1d8dc <__assert_fail@plt+0xc4c8>
   1d898:	cmp	r4, #22
   1d89c:	moveq	r4, #0
   1d8a0:	mov	r0, r8
   1d8a4:	bl	1c82c <__assert_fail@plt+0xb418>
   1d8a8:	movw	r2, #552	; 0x228
   1d8ac:	movt	r2, #2
   1d8b0:	str	r0, [sp]
   1d8b4:	mov	r1, r4
   1d8b8:	ldr	r3, [sp, #52]	; 0x34
   1d8bc:	ldr	r0, [sp, #56]	; 0x38
   1d8c0:	bl	1121c <error@plt>
   1d8c4:	mov	r3, #0
   1d8c8:	mov	r4, r3
   1d8cc:	str	r3, [r0]
   1d8d0:	ldr	r3, [sp, #56]	; 0x38
   1d8d4:	cmp	r3, #0
   1d8d8:	bne	1d8a0 <__assert_fail@plt+0xc48c>
   1d8dc:	mov	r3, #1
   1d8e0:	str	r3, [sp, #56]	; 0x38
   1d8e4:	b	1d898 <__assert_fail@plt+0xc484>
   1d8e8:	bl	112dc <__errno_location@plt>
   1d8ec:	mov	r3, #0
   1d8f0:	mvn	r2, #-1073741824	; 0xc0000000
   1d8f4:	cmp	r5, r3
   1d8f8:	cmpeq	r4, r2
   1d8fc:	movhi	r3, #75	; 0x4b
   1d900:	movls	r3, #34	; 0x22
   1d904:	mov	r4, r3
   1d908:	str	r3, [r0]
   1d90c:	ldr	r3, [sp, #56]	; 0x38
   1d910:	cmp	r3, #0
   1d914:	moveq	r3, #1
   1d918:	str	r3, [sp, #56]	; 0x38
   1d91c:	b	1d8a0 <__assert_fail@plt+0xc48c>
   1d920:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1d924:	mov	r1, #0
   1d928:	strd	r6, [sp, #8]
   1d92c:	mov	r6, r2
   1d930:	mov	r7, r3
   1d934:	str	r8, [sp, #16]
   1d938:	mov	r2, #10
   1d93c:	mov	r8, r0
   1d940:	str	lr, [sp, #20]
   1d944:	sub	sp, sp, #16
   1d948:	ldr	ip, [sp, #48]	; 0x30
   1d94c:	add	r3, sp, #8
   1d950:	str	ip, [sp]
   1d954:	bl	1dbdc <__assert_fail@plt+0xc7c8>
   1d958:	subs	r4, r0, #0
   1d95c:	bne	1d9ac <__assert_fail@plt+0xc598>
   1d960:	ldrd	r4, [sp, #8]
   1d964:	ldrd	r0, [sp, #40]	; 0x28
   1d968:	cmp	r7, r5
   1d96c:	cmpeq	r6, r4
   1d970:	movhi	r3, #1
   1d974:	movls	r3, #0
   1d978:	cmp	r1, r5
   1d97c:	cmpeq	r0, r4
   1d980:	orrcc	r3, r3, #1
   1d984:	cmp	r3, #0
   1d988:	bne	1da2c <__assert_fail@plt+0xc618>
   1d98c:	mov	r0, r4
   1d990:	mov	r1, r5
   1d994:	add	sp, sp, #16
   1d998:	ldrd	r4, [sp]
   1d99c:	ldrd	r6, [sp, #8]
   1d9a0:	ldr	r8, [sp, #16]
   1d9a4:	add	sp, sp, #20
   1d9a8:	pop	{pc}		; (ldr pc, [sp], #4)
   1d9ac:	bl	112dc <__errno_location@plt>
   1d9b0:	cmp	r4, #1
   1d9b4:	moveq	r3, #75	; 0x4b
   1d9b8:	moveq	r4, r3
   1d9bc:	streq	r3, [r0]
   1d9c0:	beq	1da1c <__assert_fail@plt+0xc608>
   1d9c4:	cmp	r4, #3
   1d9c8:	beq	1da10 <__assert_fail@plt+0xc5fc>
   1d9cc:	ldr	r3, [sp, #56]	; 0x38
   1d9d0:	ldr	r4, [r0]
   1d9d4:	cmp	r3, #0
   1d9d8:	bne	1d9e4 <__assert_fail@plt+0xc5d0>
   1d9dc:	mov	r3, #1
   1d9e0:	str	r3, [sp, #56]	; 0x38
   1d9e4:	cmp	r4, #22
   1d9e8:	moveq	r4, #0
   1d9ec:	mov	r0, r8
   1d9f0:	bl	1c82c <__assert_fail@plt+0xb418>
   1d9f4:	movw	r2, #552	; 0x228
   1d9f8:	movt	r2, #2
   1d9fc:	str	r0, [sp]
   1da00:	mov	r1, r4
   1da04:	ldr	r3, [sp, #52]	; 0x34
   1da08:	ldr	r0, [sp, #56]	; 0x38
   1da0c:	bl	1121c <error@plt>
   1da10:	mov	r3, #0
   1da14:	mov	r4, r3
   1da18:	str	r3, [r0]
   1da1c:	ldr	r3, [sp, #56]	; 0x38
   1da20:	cmp	r3, #0
   1da24:	bne	1d9ec <__assert_fail@plt+0xc5d8>
   1da28:	b	1d9dc <__assert_fail@plt+0xc5c8>
   1da2c:	bl	112dc <__errno_location@plt>
   1da30:	mov	r3, #0
   1da34:	mvn	r2, #-1073741824	; 0xc0000000
   1da38:	cmp	r5, r3
   1da3c:	cmpeq	r4, r2
   1da40:	movhi	r3, #75	; 0x4b
   1da44:	movls	r3, #34	; 0x22
   1da48:	mov	r4, r3
   1da4c:	str	r3, [r0]
   1da50:	ldr	r3, [sp, #56]	; 0x38
   1da54:	cmp	r3, #0
   1da58:	moveq	r3, #1
   1da5c:	str	r3, [sp, #56]	; 0x38
   1da60:	b	1d9ec <__assert_fail@plt+0xc5d8>
   1da64:	andeq	r0, r0, r0
   1da68:	strd	r4, [sp, #-12]!
   1da6c:	str	lr, [sp, #8]
   1da70:	vpush	{d8}
   1da74:	sub	sp, sp, #12
   1da78:	vmov.f64	d8, d0
   1da7c:	bl	112dc <__errno_location@plt>
   1da80:	vldr	d7, [pc, #136]	; 1db10 <__assert_fail@plt+0xc6fc>
   1da84:	mov	r4, r0
   1da88:	vcmpe.f64	d8, d7
   1da8c:	vmrs	APSR_nzcv, fpscr
   1da90:	bge	1dae0 <__assert_fail@plt+0xc6cc>
   1da94:	vmov.f64	d0, d8
   1da98:	mov	r0, sp
   1da9c:	mov	r5, #0
   1daa0:	bl	1eb58 <__assert_fail@plt+0xd744>
   1daa4:	b	1dab4 <__assert_fail@plt+0xc6a0>
   1daa8:	ldr	r3, [r4]
   1daac:	bics	r3, r3, #4
   1dab0:	bne	1db04 <__assert_fail@plt+0xc6f0>
   1dab4:	mov	r1, sp
   1dab8:	mov	r0, sp
   1dabc:	str	r5, [r4]
   1dac0:	bl	11114 <nanosleep@plt>
   1dac4:	cmp	r0, #0
   1dac8:	bne	1daa8 <__assert_fail@plt+0xc694>
   1dacc:	add	sp, sp, #12
   1dad0:	vpop	{d8}
   1dad4:	ldrd	r4, [sp]
   1dad8:	add	sp, sp, #8
   1dadc:	pop	{pc}		; (ldr pc, [sp], #4)
   1dae0:	bl	110e4 <pause@plt>
   1dae4:	ldr	r3, [r4]
   1dae8:	cmp	r3, #4
   1daec:	bne	1da94 <__assert_fail@plt+0xc680>
   1daf0:	bl	110e4 <pause@plt>
   1daf4:	ldr	r3, [r4]
   1daf8:	cmp	r3, #4
   1dafc:	beq	1dae0 <__assert_fail@plt+0xc6cc>
   1db00:	b	1da94 <__assert_fail@plt+0xc680>
   1db04:	mvn	r0, #0
   1db08:	b	1dacc <__assert_fail@plt+0xc6b8>
   1db0c:	nop	{0}
   1db10:	andeq	r0, r0, r0
   1db14:	mvnmi	r0, r0
   1db18:	strd	r4, [sp, #-28]!	; 0xffffffe4
   1db1c:	mov	r5, r1
   1db20:	mov	r4, #0
   1db24:	strd	r6, [sp, #8]
   1db28:	mov	r6, r0
   1db2c:	strd	r8, [sp, #16]
   1db30:	mov	r9, r3
   1db34:	mov	r8, r2
   1db38:	str	lr, [sp, #24]
   1db3c:	sub	sp, sp, #12
   1db40:	bl	112dc <__errno_location@plt>
   1db44:	mov	r7, r0
   1db48:	add	r1, sp, #4
   1db4c:	mov	r0, r6
   1db50:	str	r4, [r7]
   1db54:	blx	r9
   1db58:	ldr	r3, [sp, #4]
   1db5c:	cmp	r3, r6
   1db60:	beq	1dbd4 <__assert_fail@plt+0xc7c0>
   1db64:	cmp	r5, r4
   1db68:	beq	1dbb0 <__assert_fail@plt+0xc79c>
   1db6c:	vcmp.f64	d0, #0.0
   1db70:	vmrs	APSR_nzcv, fpscr
   1db74:	moveq	r0, #1
   1db78:	beq	1db90 <__assert_fail@plt+0xc77c>
   1db7c:	ldr	r0, [r7]
   1db80:	subs	r0, r0, #34	; 0x22
   1db84:	movne	r0, #1
   1db88:	cmp	r5, #0
   1db8c:	beq	1db94 <__assert_fail@plt+0xc780>
   1db90:	str	r3, [r5]
   1db94:	vstr	d0, [r8]
   1db98:	add	sp, sp, #12
   1db9c:	ldrd	r4, [sp]
   1dba0:	ldrd	r6, [sp, #8]
   1dba4:	ldrd	r8, [sp, #16]
   1dba8:	add	sp, sp, #24
   1dbac:	pop	{pc}		; (ldr pc, [sp], #4)
   1dbb0:	ldrb	r2, [r3]
   1dbb4:	cmp	r2, r4
   1dbb8:	movne	r0, r5
   1dbbc:	bne	1db94 <__assert_fail@plt+0xc780>
   1dbc0:	vcmp.f64	d0, #0.0
   1dbc4:	vmrs	APSR_nzcv, fpscr
   1dbc8:	bne	1db7c <__assert_fail@plt+0xc768>
   1dbcc:	mov	r0, #1
   1dbd0:	b	1db94 <__assert_fail@plt+0xc780>
   1dbd4:	mov	r0, r4
   1dbd8:	b	1db88 <__assert_fail@plt+0xc774>
   1dbdc:	cmp	r2, #36	; 0x24
   1dbe0:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1dbe4:	strd	r6, [sp, #8]
   1dbe8:	strd	r8, [sp, #16]
   1dbec:	strd	sl, [sp, #24]
   1dbf0:	str	lr, [sp, #32]
   1dbf4:	sub	sp, sp, #36	; 0x24
   1dbf8:	bhi	1e870 <__assert_fail@plt+0xd45c>
   1dbfc:	cmp	r1, #0
   1dc00:	mov	r6, r2
   1dc04:	mov	r5, r1
   1dc08:	mov	sl, r0
   1dc0c:	addeq	r5, sp, #28
   1dc10:	mov	r9, r3
   1dc14:	bl	112dc <__errno_location@plt>
   1dc18:	mov	r3, #0
   1dc1c:	mov	fp, r0
   1dc20:	str	r3, [r0]
   1dc24:	ldrb	r4, [sl]
   1dc28:	bl	11288 <__ctype_b_loc@plt>
   1dc2c:	ldr	r2, [r0]
   1dc30:	lsl	r3, r4, #1
   1dc34:	ldrh	r3, [r2, r3]
   1dc38:	tst	r3, #8192	; 0x2000
   1dc3c:	beq	1dc58 <__assert_fail@plt+0xc844>
   1dc40:	mov	r3, sl
   1dc44:	ldrb	r4, [r3, #1]!
   1dc48:	lsl	r1, r4, #1
   1dc4c:	ldrh	r1, [r2, r1]
   1dc50:	tst	r1, #8192	; 0x2000
   1dc54:	bne	1dc44 <__assert_fail@plt+0xc830>
   1dc58:	cmp	r4, #45	; 0x2d
   1dc5c:	beq	1dcf8 <__assert_fail@plt+0xc8e4>
   1dc60:	mov	r2, r6
   1dc64:	mov	r3, #0
   1dc68:	mov	r1, r5
   1dc6c:	mov	r0, sl
   1dc70:	bl	11138 <__strtoull_internal@plt>
   1dc74:	ldr	r8, [r5]
   1dc78:	mov	r6, r0
   1dc7c:	mov	r7, r1
   1dc80:	cmp	r8, sl
   1dc84:	beq	1dce0 <__assert_fail@plt+0xc8cc>
   1dc88:	ldr	r4, [fp]
   1dc8c:	cmp	r4, #0
   1dc90:	bne	1dcd0 <__assert_fail@plt+0xc8bc>
   1dc94:	ldr	r3, [sp, #72]	; 0x48
   1dc98:	cmp	r3, #0
   1dc9c:	beq	1dcac <__assert_fail@plt+0xc898>
   1dca0:	ldrb	sl, [r8]
   1dca4:	cmp	sl, #0
   1dca8:	bne	1e064 <__assert_fail@plt+0xcc50>
   1dcac:	strd	r6, [r9]
   1dcb0:	mov	r0, r4
   1dcb4:	add	sp, sp, #36	; 0x24
   1dcb8:	ldrd	r4, [sp]
   1dcbc:	ldrd	r6, [sp, #8]
   1dcc0:	ldrd	r8, [sp, #16]
   1dcc4:	ldrd	sl, [sp, #24]
   1dcc8:	add	sp, sp, #32
   1dccc:	pop	{pc}		; (ldr pc, [sp], #4)
   1dcd0:	cmp	r4, #34	; 0x22
   1dcd4:	bne	1dcf8 <__assert_fail@plt+0xc8e4>
   1dcd8:	mov	r4, #1
   1dcdc:	b	1dc94 <__assert_fail@plt+0xc880>
   1dce0:	ldr	r3, [sp, #72]	; 0x48
   1dce4:	cmp	r3, #0
   1dce8:	beq	1dcf8 <__assert_fail@plt+0xc8e4>
   1dcec:	ldrb	sl, [sl]
   1dcf0:	cmp	sl, #0
   1dcf4:	bne	1dd00 <__assert_fail@plt+0xc8ec>
   1dcf8:	mov	r4, #4
   1dcfc:	b	1dcb0 <__assert_fail@plt+0xc89c>
   1dd00:	mov	r1, sl
   1dd04:	mov	r0, r3
   1dd08:	bl	112b8 <strchr@plt>
   1dd0c:	cmp	r0, #0
   1dd10:	movne	r4, #0
   1dd14:	movne	r6, #1
   1dd18:	movne	r7, r4
   1dd1c:	beq	1dcf8 <__assert_fail@plt+0xc8e4>
   1dd20:	sub	r3, sl, #69	; 0x45
   1dd24:	cmp	r3, #47	; 0x2f
   1dd28:	ldrls	pc, [pc, r3, lsl #2]
   1dd2c:	b	1de34 <__assert_fail@plt+0xca20>
   1dd30:	strdeq	sp, [r1], -r0
   1dd34:	andeq	sp, r1, r4, lsr lr
   1dd38:	strdeq	sp, [r1], -r0
   1dd3c:	andeq	sp, r1, r4, lsr lr
   1dd40:	andeq	sp, r1, r4, lsr lr
   1dd44:	andeq	sp, r1, r4, lsr lr
   1dd48:	strdeq	sp, [r1], -r0
   1dd4c:	andeq	sp, r1, r4, lsr lr
   1dd50:	strdeq	sp, [r1], -r0
   1dd54:	andeq	sp, r1, r4, lsr lr
   1dd58:	andeq	sp, r1, r4, lsr lr
   1dd5c:	strdeq	sp, [r1], -r0
   1dd60:	andeq	sp, r1, r4, lsr lr
   1dd64:	andeq	sp, r1, r4, lsr lr
   1dd68:	andeq	sp, r1, r4, lsr lr
   1dd6c:	strdeq	sp, [r1], -r0
   1dd70:	andeq	sp, r1, r4, lsr lr
   1dd74:	andeq	sp, r1, r4, lsr lr
   1dd78:	andeq	sp, r1, r4, lsr lr
   1dd7c:	andeq	sp, r1, r4, lsr lr
   1dd80:	strdeq	sp, [r1], -r0
   1dd84:	strdeq	sp, [r1], -r0
   1dd88:	andeq	sp, r1, r4, lsr lr
   1dd8c:	andeq	sp, r1, r4, lsr lr
   1dd90:	andeq	sp, r1, r4, lsr lr
   1dd94:	andeq	sp, r1, r4, lsr lr
   1dd98:	andeq	sp, r1, r4, lsr lr
   1dd9c:	andeq	sp, r1, r4, lsr lr
   1dda0:	andeq	sp, r1, r4, lsr lr
   1dda4:	andeq	sp, r1, r4, lsr lr
   1dda8:	andeq	sp, r1, r4, lsr lr
   1ddac:	andeq	sp, r1, r4, lsr lr
   1ddb0:	andeq	sp, r1, r4, lsr lr
   1ddb4:	andeq	sp, r1, r4, lsr lr
   1ddb8:	strdeq	sp, [r1], -r0
   1ddbc:	andeq	sp, r1, r4, lsr lr
   1ddc0:	andeq	sp, r1, r4, lsr lr
   1ddc4:	andeq	sp, r1, r4, lsr lr
   1ddc8:	strdeq	sp, [r1], -r0
   1ddcc:	andeq	sp, r1, r4, lsr lr
   1ddd0:	strdeq	sp, [r1], -r0
   1ddd4:	andeq	sp, r1, r4, lsr lr
   1ddd8:	andeq	sp, r1, r4, lsr lr
   1dddc:	andeq	sp, r1, r4, lsr lr
   1dde0:	andeq	sp, r1, r4, lsr lr
   1dde4:	andeq	sp, r1, r4, lsr lr
   1dde8:	andeq	sp, r1, r4, lsr lr
   1ddec:	strdeq	sp, [r1], -r0
   1ddf0:	mov	r1, #48	; 0x30
   1ddf4:	ldr	r0, [sp, #72]	; 0x48
   1ddf8:	bl	112b8 <strchr@plt>
   1ddfc:	cmp	r0, #0
   1de00:	beq	1de34 <__assert_fail@plt+0xca20>
   1de04:	ldrb	r3, [r8, #1]
   1de08:	cmp	r3, #68	; 0x44
   1de0c:	beq	1e3c4 <__assert_fail@plt+0xcfb0>
   1de10:	cmp	r3, #105	; 0x69
   1de14:	beq	1e07c <__assert_fail@plt+0xcc68>
   1de18:	cmp	r3, #66	; 0x42
   1de1c:	moveq	r3, #2
   1de20:	movne	r3, #1
   1de24:	moveq	ip, #1000	; 0x3e8
   1de28:	movne	ip, #1024	; 0x400
   1de2c:	str	r3, [sp, #12]
   1de30:	b	1de40 <__assert_fail@plt+0xca2c>
   1de34:	mov	r3, #1
   1de38:	mov	ip, #1024	; 0x400
   1de3c:	str	r3, [sp, #12]
   1de40:	sub	sl, sl, #66	; 0x42
   1de44:	cmp	sl, #53	; 0x35
   1de48:	ldrls	pc, [pc, sl, lsl #2]
   1de4c:	b	1e028 <__assert_fail@plt+0xcc14>
   1de50:	andeq	lr, r1, r0, lsl r3
   1de54:	andeq	lr, r1, r8, lsr #32
   1de58:	andeq	lr, r1, r8, lsr #32
   1de5c:			; <UNDEFINED> instruction: 0x0001e2b0
   1de60:	andeq	lr, r1, r8, lsr #32
   1de64:	andeq	lr, r1, ip, lsr #6
   1de68:	andeq	lr, r1, r8, lsr #32
   1de6c:	andeq	lr, r1, r8, lsr #32
   1de70:	andeq	lr, r1, r8, lsr #32
   1de74:	andeq	lr, r1, r0, lsr r0
   1de78:	andeq	lr, r1, r8, lsr #32
   1de7c:	andeq	lr, r1, r8, asr r2
   1de80:	andeq	lr, r1, r8, lsr #32
   1de84:	andeq	lr, r1, r8, lsr #32
   1de88:	strdeq	lr, [r1], -ip
   1de8c:	andeq	lr, r1, r8, lsr #32
   1de90:	andeq	lr, r1, r8, lsr #32
   1de94:	andeq	lr, r1, r8, lsr #32
   1de98:	muleq	r1, ip, r1
   1de9c:	andeq	lr, r1, r8, lsr #32
   1dea0:	andeq	lr, r1, r8, lsr #32
   1dea4:	andeq	lr, r1, r8, lsr #32
   1dea8:	andeq	lr, r1, r8, lsr #32
   1deac:	ldrdeq	lr, [r1], -r0
   1deb0:	andeq	sp, r1, r8, lsr #30
   1deb4:	andeq	lr, r1, r8, lsr #32
   1deb8:	andeq	lr, r1, r8, lsr #32
   1debc:	andeq	lr, r1, r8, lsr #32
   1dec0:	andeq	lr, r1, r8, lsr #32
   1dec4:	andeq	lr, r1, r8, lsr #32
   1dec8:	andeq	lr, r1, r8, lsr #32
   1decc:	andeq	lr, r1, r8, lsr #32
   1ded0:	strheq	lr, [r1], -r0
   1ded4:	andeq	lr, r1, r0, lsl r0
   1ded8:	andeq	lr, r1, r8, lsr #32
   1dedc:	andeq	lr, r1, r8, lsr #32
   1dee0:	andeq	lr, r1, r8, lsr #32
   1dee4:	andeq	lr, r1, ip, lsr #6
   1dee8:	andeq	lr, r1, r8, lsr #32
   1deec:	andeq	lr, r1, r8, lsr #32
   1def0:	andeq	lr, r1, r8, lsr #32
   1def4:	andeq	lr, r1, r0, lsr r0
   1def8:	andeq	lr, r1, r8, lsr #32
   1defc:	andeq	lr, r1, r8, asr r2
   1df00:	andeq	lr, r1, r8, lsr #32
   1df04:	andeq	lr, r1, r8, lsr #32
   1df08:	andeq	lr, r1, r8, lsr #32
   1df0c:	andeq	lr, r1, r8, lsr #32
   1df10:	andeq	lr, r1, r8, lsr #32
   1df14:	andeq	lr, r1, r8, lsr #32
   1df18:	muleq	r1, ip, r1
   1df1c:	andeq	lr, r1, r8, lsr #32
   1df20:	andeq	lr, r1, r8, lsr #32
   1df24:	muleq	r1, r8, r0
   1df28:	asr	r3, ip, #31
   1df2c:	mov	r2, ip
   1df30:	cmp	r7, #0
   1df34:	mov	r1, #0
   1df38:	strd	r2, [sp]
   1df3c:	bne	1e47c <__assert_fail@plt+0xd068>
   1df40:	umull	r6, r7, r6, ip
   1df44:	mov	r2, r6
   1df48:	mov	r3, r7
   1df4c:	cmp	r1, #0
   1df50:	bne	1e390 <__assert_fail@plt+0xcf7c>
   1df54:	cmp	r3, #0
   1df58:	mov	lr, r1
   1df5c:	bne	1e5a8 <__assert_fail@plt+0xd194>
   1df60:	umull	r2, r3, r2, ip
   1df64:	mov	r0, r2
   1df68:	mov	r1, r3
   1df6c:	cmp	lr, #0
   1df70:	bne	1e390 <__assert_fail@plt+0xcf7c>
   1df74:	cmp	r1, #0
   1df78:	bne	1e584 <__assert_fail@plt+0xd170>
   1df7c:	umull	r0, r1, r0, ip
   1df80:	mov	r2, r0
   1df84:	mov	r3, r1
   1df88:	cmp	lr, #0
   1df8c:	bne	1e390 <__assert_fail@plt+0xcf7c>
   1df90:	cmp	r3, #0
   1df94:	bne	1e234 <__assert_fail@plt+0xce20>
   1df98:	umull	r2, r3, r2, ip
   1df9c:	mov	r0, r2
   1dfa0:	mov	r1, r3
   1dfa4:	cmp	lr, #0
   1dfa8:	bne	1e390 <__assert_fail@plt+0xcf7c>
   1dfac:	cmp	r1, #0
   1dfb0:	bne	1e434 <__assert_fail@plt+0xd020>
   1dfb4:	umull	r0, r1, r0, ip
   1dfb8:	mov	r2, r0
   1dfbc:	mov	r3, r1
   1dfc0:	cmp	lr, #0
   1dfc4:	bne	1e390 <__assert_fail@plt+0xcf7c>
   1dfc8:	cmp	r3, #0
   1dfcc:	mov	r7, lr
   1dfd0:	bne	1e410 <__assert_fail@plt+0xcffc>
   1dfd4:	umull	r2, r3, r2, ip
   1dfd8:	mov	r6, r2
   1dfdc:	mov	lr, r3
   1dfe0:	cmp	r7, #0
   1dfe4:	bne	1e390 <__assert_fail@plt+0xcf7c>
   1dfe8:	cmp	lr, #0
   1dfec:	bne	1e3d4 <__assert_fail@plt+0xcfc0>
   1dff0:	umull	r2, r3, r6, ip
   1dff4:	mov	r0, r2
   1dff8:	mov	r2, r3
   1dffc:	subs	r3, r7, #0
   1e000:	bne	1e390 <__assert_fail@plt+0xcf7c>
   1e004:	mov	r6, r0
   1e008:	mov	r7, r2
   1e00c:	orr	r4, r4, r3
   1e010:	ldr	r2, [sp, #12]
   1e014:	add	r3, r8, r2
   1e018:	str	r3, [r5]
   1e01c:	ldrb	r3, [r8, r2]
   1e020:	cmp	r3, #0
   1e024:	beq	1dcac <__assert_fail@plt+0xc898>
   1e028:	orr	r4, r4, #2
   1e02c:	b	1dcac <__assert_fail@plt+0xc898>
   1e030:	cmp	r7, #0
   1e034:	asr	r1, ip, #31
   1e038:	mov	lr, #0
   1e03c:	bne	1e3a0 <__assert_fail@plt+0xcf8c>
   1e040:	umull	r2, r3, r6, ip
   1e044:	mov	r6, r2
   1e048:	mov	r7, r3
   1e04c:	cmp	lr, #0
   1e050:	beq	1e010 <__assert_fail@plt+0xcbfc>
   1e054:	mvn	r6, #0
   1e058:	mov	r4, #1
   1e05c:	mov	r7, r6
   1e060:	b	1e010 <__assert_fail@plt+0xcbfc>
   1e064:	mov	r0, r3
   1e068:	mov	r1, sl
   1e06c:	bl	112b8 <strchr@plt>
   1e070:	cmp	r0, #0
   1e074:	bne	1dd20 <__assert_fail@plt+0xc90c>
   1e078:	b	1e028 <__assert_fail@plt+0xcc14>
   1e07c:	ldrb	r3, [r8, #2]
   1e080:	mov	ip, #1024	; 0x400
   1e084:	cmp	r3, #66	; 0x42
   1e088:	movne	r3, #1
   1e08c:	moveq	r3, #3
   1e090:	str	r3, [sp, #12]
   1e094:	b	1de40 <__assert_fail@plt+0xca2c>
   1e098:	lsr	r3, r7, #31
   1e09c:	adds	r6, r6, r6
   1e0a0:	adc	r7, r7, r7
   1e0a4:	cmp	r3, #0
   1e0a8:	beq	1e010 <__assert_fail@plt+0xcbfc>
   1e0ac:	b	1e054 <__assert_fail@plt+0xcc40>
   1e0b0:	lsr	r3, r7, #23
   1e0b4:	lsl	r7, r7, #9
   1e0b8:	cmp	r3, #0
   1e0bc:	lsl	r3, r6, #9
   1e0c0:	orr	r7, r7, r6, lsr #23
   1e0c4:	bne	1e054 <__assert_fail@plt+0xcc40>
   1e0c8:	mov	r6, r3
   1e0cc:	b	1e010 <__assert_fail@plt+0xcbfc>
   1e0d0:	asr	r3, ip, #31
   1e0d4:	mov	r2, ip
   1e0d8:	cmp	r7, #0
   1e0dc:	mov	r1, #0
   1e0e0:	strd	r2, [sp]
   1e0e4:	bne	1e4f0 <__assert_fail@plt+0xd0dc>
   1e0e8:	umull	r6, r7, r6, ip
   1e0ec:	mov	r0, r6
   1e0f0:	mov	fp, r7
   1e0f4:	cmp	r1, #0
   1e0f8:	bne	1e390 <__assert_fail@plt+0xcf7c>
   1e0fc:	cmp	fp, #0
   1e100:	mov	lr, r1
   1e104:	bne	1e680 <__assert_fail@plt+0xd26c>
   1e108:	umull	r0, r1, r0, ip
   1e10c:	mov	r2, r0
   1e110:	mov	r3, r1
   1e114:	cmp	lr, #0
   1e118:	bne	1e390 <__assert_fail@plt+0xcf7c>
   1e11c:	cmp	r3, #0
   1e120:	bne	1e6a8 <__assert_fail@plt+0xd294>
   1e124:	umull	r2, r3, r2, ip
   1e128:	mov	r0, r2
   1e12c:	mov	r1, r3
   1e130:	cmp	lr, #0
   1e134:	bne	1e390 <__assert_fail@plt+0xcf7c>
   1e138:	cmp	r1, #0
   1e13c:	bne	1e628 <__assert_fail@plt+0xd214>
   1e140:	umull	r0, r1, r0, ip
   1e144:	mov	r2, r0
   1e148:	mov	r3, r1
   1e14c:	cmp	lr, #0
   1e150:	bne	1e390 <__assert_fail@plt+0xcf7c>
   1e154:	cmp	r3, #0
   1e158:	bne	1e458 <__assert_fail@plt+0xd044>
   1e15c:	umull	r2, r3, r2, ip
   1e160:	mov	r0, r2
   1e164:	mov	r1, r3
   1e168:	cmp	lr, #0
   1e16c:	bne	1e390 <__assert_fail@plt+0xcf7c>
   1e170:	cmp	r1, #0
   1e174:	beq	1dfb4 <__assert_fail@plt+0xcba0>
   1e178:	umull	r6, r7, r0, ip
   1e17c:	mov	fp, lr
   1e180:	mov	sl, r7
   1e184:	umlal	sl, fp, r1, ip
   1e188:	cmp	fp, #0
   1e18c:	bne	1e890 <__assert_fail@plt+0xd47c>
   1e190:	mov	r2, r6
   1e194:	mov	r3, sl
   1e198:	b	1dfc0 <__assert_fail@plt+0xcbac>
   1e19c:	asr	r3, ip, #31
   1e1a0:	mov	r2, ip
   1e1a4:	cmp	r7, #0
   1e1a8:	mov	r1, #0
   1e1ac:	strd	r2, [sp]
   1e1b0:	bne	1e514 <__assert_fail@plt+0xd100>
   1e1b4:	umull	r6, r7, r6, ip
   1e1b8:	mov	r0, r6
   1e1bc:	mov	fp, r7
   1e1c0:	cmp	r1, #0
   1e1c4:	bne	1e390 <__assert_fail@plt+0xcf7c>
   1e1c8:	cmp	fp, #0
   1e1cc:	mov	lr, r1
   1e1d0:	beq	1dfb4 <__assert_fail@plt+0xcba0>
   1e1d4:	umull	r6, r7, r0, ip
   1e1d8:	mov	r3, r1
   1e1dc:	mov	r2, r7
   1e1e0:	umlal	r2, r3, fp, ip
   1e1e4:	cmp	r3, #0
   1e1e8:	strd	r2, [sp, #16]
   1e1ec:	bne	1e774 <__assert_fail@plt+0xd360>
   1e1f0:	mov	r2, r6
   1e1f4:	ldr	r3, [sp, #16]
   1e1f8:	b	1dfc0 <__assert_fail@plt+0xcbac>
   1e1fc:	asr	r3, ip, #31
   1e200:	mov	r2, ip
   1e204:	cmp	r7, #0
   1e208:	mov	r1, #0
   1e20c:	strd	r2, [sp]
   1e210:	bne	1e55c <__assert_fail@plt+0xd148>
   1e214:	umull	r6, r7, r6, ip
   1e218:	mov	r2, r6
   1e21c:	mov	r3, r7
   1e220:	cmp	r1, #0
   1e224:	bne	1e390 <__assert_fail@plt+0xcf7c>
   1e228:	cmp	r3, #0
   1e22c:	mov	lr, r1
   1e230:	beq	1df98 <__assert_fail@plt+0xcb84>
   1e234:	umull	r6, r7, r2, ip
   1e238:	mov	fp, lr
   1e23c:	mov	sl, r7
   1e240:	umlal	sl, fp, r3, ip
   1e244:	cmp	fp, #0
   1e248:	bne	1e854 <__assert_fail@plt+0xd440>
   1e24c:	mov	r0, r6
   1e250:	mov	r1, sl
   1e254:	b	1dfa4 <__assert_fail@plt+0xcb90>
   1e258:	asr	r3, ip, #31
   1e25c:	mov	r2, ip
   1e260:	cmp	r7, #0
   1e264:	mov	r1, #0
   1e268:	strd	r2, [sp]
   1e26c:	bne	1e538 <__assert_fail@plt+0xd124>
   1e270:	umull	r6, r7, r6, ip
   1e274:	mov	sl, r6
   1e278:	mov	lr, r7
   1e27c:	cmp	r1, #0
   1e280:	bne	1e054 <__assert_fail@plt+0xcc40>
   1e284:	cmp	lr, #0
   1e288:	mov	r7, r1
   1e28c:	bne	1e64c <__assert_fail@plt+0xd238>
   1e290:	umull	sl, fp, sl, ip
   1e294:	mov	r0, sl
   1e298:	mov	r2, fp
   1e29c:	cmp	r7, #0
   1e2a0:	mov	r6, r0
   1e2a4:	mov	r7, r2
   1e2a8:	beq	1e010 <__assert_fail@plt+0xcbfc>
   1e2ac:	b	1e054 <__assert_fail@plt+0xcc40>
   1e2b0:	asr	r3, ip, #31
   1e2b4:	mov	r2, ip
   1e2b8:	cmp	r7, #0
   1e2bc:	mov	r1, #0
   1e2c0:	strd	r2, [sp]
   1e2c4:	bne	1e4cc <__assert_fail@plt+0xd0b8>
   1e2c8:	umull	r6, r7, r6, ip
   1e2cc:	mov	r0, r6
   1e2d0:	mov	fp, r7
   1e2d4:	cmp	r1, #0
   1e2d8:	bne	1e390 <__assert_fail@plt+0xcf7c>
   1e2dc:	cmp	fp, #0
   1e2e0:	mov	lr, r1
   1e2e4:	beq	1e140 <__assert_fail@plt+0xcd2c>
   1e2e8:	umull	r6, r7, r0, ip
   1e2ec:	mov	r3, r1
   1e2f0:	mov	r2, r7
   1e2f4:	umlal	r2, r3, fp, ip
   1e2f8:	cmp	r3, #0
   1e2fc:	strd	r2, [sp, #16]
   1e300:	bne	1e7e4 <__assert_fail@plt+0xd3d0>
   1e304:	mov	r2, r6
   1e308:	ldr	r3, [sp, #16]
   1e30c:	b	1e14c <__assert_fail@plt+0xcd38>
   1e310:	lsr	r3, r7, #22
   1e314:	lsl	r7, r7, #10
   1e318:	cmp	r3, #0
   1e31c:	lsl	r3, r6, #10
   1e320:	orr	r7, r7, r6, lsr #22
   1e324:	beq	1e0c8 <__assert_fail@plt+0xccb4>
   1e328:	b	1e054 <__assert_fail@plt+0xcc40>
   1e32c:	asr	r3, ip, #31
   1e330:	mov	r2, ip
   1e334:	cmp	r7, #0
   1e338:	mov	r1, #0
   1e33c:	strd	r2, [sp]
   1e340:	bne	1e4a4 <__assert_fail@plt+0xd090>
   1e344:	umull	r6, r7, r6, ip
   1e348:	mov	r2, r6
   1e34c:	mov	r3, r7
   1e350:	cmp	r1, #0
   1e354:	bne	1e054 <__assert_fail@plt+0xcc40>
   1e358:	cmp	r3, #0
   1e35c:	mov	r7, r1
   1e360:	bne	1e608 <__assert_fail@plt+0xd1f4>
   1e364:	umull	r2, r3, r2, ip
   1e368:	mov	r6, r2
   1e36c:	mov	lr, r3
   1e370:	cmp	r7, #0
   1e374:	bne	1e054 <__assert_fail@plt+0xcc40>
   1e378:	cmp	lr, #0
   1e37c:	bne	1e5cc <__assert_fail@plt+0xd1b8>
   1e380:	umull	r2, r3, r6, ip
   1e384:	mov	r0, r2
   1e388:	mov	r2, r3
   1e38c:	b	1e29c <__assert_fail@plt+0xce88>
   1e390:	mvn	r6, #0
   1e394:	mov	r3, #1
   1e398:	mov	r7, r6
   1e39c:	b	1e00c <__assert_fail@plt+0xcbf8>
   1e3a0:	umull	sl, fp, r6, ip
   1e3a4:	mov	r3, lr
   1e3a8:	mov	r2, fp
   1e3ac:	umlal	r2, r3, r7, ip
   1e3b0:	cmp	r3, #0
   1e3b4:	bne	1e7ac <__assert_fail@plt+0xd398>
   1e3b8:	mov	r6, sl
   1e3bc:	mov	r7, r2
   1e3c0:	b	1e04c <__assert_fail@plt+0xcc38>
   1e3c4:	mov	r3, #2
   1e3c8:	mov	ip, #1000	; 0x3e8
   1e3cc:	str	r3, [sp, #12]
   1e3d0:	b	1de40 <__assert_fail@plt+0xca2c>
   1e3d4:	umull	r0, r1, r6, ip
   1e3d8:	mov	r3, r7
   1e3dc:	mov	r2, r1
   1e3e0:	strd	r0, [sp, #16]
   1e3e4:	umlal	r2, r3, lr, ip
   1e3e8:	cmp	r3, #0
   1e3ec:	beq	1dffc <__assert_fail@plt+0xcbe8>
   1e3f0:	ldrd	sl, [sp]
   1e3f4:	mov	r7, #1
   1e3f8:	ldr	r0, [sp, #16]
   1e3fc:	ldr	r3, [sp, #20]
   1e400:	mul	r2, r6, fp
   1e404:	mla	r2, lr, sl, r2
   1e408:	add	r2, r2, r3
   1e40c:	b	1dffc <__assert_fail@plt+0xcbe8>
   1e410:	umull	sl, fp, r2, ip
   1e414:	mov	r1, lr
   1e418:	mov	r0, fp
   1e41c:	umlal	r0, r1, r3, ip
   1e420:	cmp	r1, #0
   1e424:	bne	1e704 <__assert_fail@plt+0xd2f0>
   1e428:	mov	r6, sl
   1e42c:	mov	lr, r0
   1e430:	b	1dfe0 <__assert_fail@plt+0xcbcc>
   1e434:	umull	sl, fp, r0, ip
   1e438:	mov	r7, lr
   1e43c:	mov	r6, fp
   1e440:	umlal	r6, r7, r1, ip
   1e444:	cmp	r7, #0
   1e448:	bne	1e8ac <__assert_fail@plt+0xd498>
   1e44c:	mov	r2, sl
   1e450:	mov	r3, r6
   1e454:	b	1dfc0 <__assert_fail@plt+0xcbac>
   1e458:	umull	sl, fp, r2, ip
   1e45c:	mov	r7, lr
   1e460:	mov	r6, fp
   1e464:	umlal	r6, r7, r3, ip
   1e468:	cmp	r7, #0
   1e46c:	bne	1e73c <__assert_fail@plt+0xd328>
   1e470:	mov	r0, sl
   1e474:	mov	r1, r6
   1e478:	b	1e168 <__assert_fail@plt+0xcd54>
   1e47c:	umull	sl, fp, r6, ip
   1e480:	mov	r3, r1
   1e484:	mov	r2, fp
   1e488:	umlal	r2, r3, r7, ip
   1e48c:	cmp	r3, #0
   1e490:	strd	r2, [sp, #16]
   1e494:	bne	1e720 <__assert_fail@plt+0xd30c>
   1e498:	mov	r2, sl
   1e49c:	ldr	r3, [sp, #16]
   1e4a0:	b	1df4c <__assert_fail@plt+0xcb38>
   1e4a4:	umull	sl, fp, r6, ip
   1e4a8:	mov	r3, r1
   1e4ac:	mov	r2, fp
   1e4b0:	umlal	r2, r3, r7, ip
   1e4b4:	cmp	r3, #0
   1e4b8:	strd	r2, [sp, #16]
   1e4bc:	bne	1e800 <__assert_fail@plt+0xd3ec>
   1e4c0:	mov	r2, sl
   1e4c4:	ldr	r3, [sp, #16]
   1e4c8:	b	1e350 <__assert_fail@plt+0xcf3c>
   1e4cc:	umull	sl, fp, r6, ip
   1e4d0:	mov	r3, r1
   1e4d4:	mov	r2, fp
   1e4d8:	umlal	r2, r3, r7, ip
   1e4dc:	cmp	r3, #0
   1e4e0:	bne	1e6cc <__assert_fail@plt+0xd2b8>
   1e4e4:	mov	r0, sl
   1e4e8:	mov	fp, r2
   1e4ec:	b	1e2d4 <__assert_fail@plt+0xcec0>
   1e4f0:	umull	sl, fp, r6, ip
   1e4f4:	mov	r3, r1
   1e4f8:	mov	r2, fp
   1e4fc:	umlal	r2, r3, r7, ip
   1e500:	cmp	r3, #0
   1e504:	bne	1e790 <__assert_fail@plt+0xd37c>
   1e508:	mov	r0, sl
   1e50c:	mov	fp, r2
   1e510:	b	1e0f4 <__assert_fail@plt+0xcce0>
   1e514:	umull	sl, fp, r6, ip
   1e518:	mov	r3, r1
   1e51c:	mov	r2, fp
   1e520:	umlal	r2, r3, r7, ip
   1e524:	cmp	r3, #0
   1e528:	bne	1e81c <__assert_fail@plt+0xd408>
   1e52c:	mov	r0, sl
   1e530:	mov	fp, r2
   1e534:	b	1e1c0 <__assert_fail@plt+0xcdac>
   1e538:	umull	sl, fp, r6, ip
   1e53c:	mov	r3, r1
   1e540:	mov	r2, fp
   1e544:	strd	sl, [sp, #16]
   1e548:	umlal	r2, r3, r7, ip
   1e54c:	cmp	r3, #0
   1e550:	bne	1e7c4 <__assert_fail@plt+0xd3b0>
   1e554:	mov	lr, r2
   1e558:	b	1e27c <__assert_fail@plt+0xce68>
   1e55c:	umull	sl, fp, r6, ip
   1e560:	mov	r3, r1
   1e564:	mov	r2, fp
   1e568:	umlal	r2, r3, r7, ip
   1e56c:	cmp	r3, #0
   1e570:	strd	r2, [sp, #16]
   1e574:	bne	1e8c8 <__assert_fail@plt+0xd4b4>
   1e578:	mov	r2, sl
   1e57c:	ldr	r3, [sp, #16]
   1e580:	b	1e220 <__assert_fail@plt+0xce0c>
   1e584:	umull	sl, fp, r0, ip
   1e588:	mov	r7, lr
   1e58c:	mov	r6, fp
   1e590:	umlal	r6, r7, r1, ip
   1e594:	cmp	r7, #0
   1e598:	bne	1e8e4 <__assert_fail@plt+0xd4d0>
   1e59c:	mov	r2, sl
   1e5a0:	mov	r3, r6
   1e5a4:	b	1df88 <__assert_fail@plt+0xcb74>
   1e5a8:	umull	r6, r7, r2, ip
   1e5ac:	mov	fp, r1
   1e5b0:	mov	sl, r7
   1e5b4:	umlal	sl, fp, r3, ip
   1e5b8:	cmp	fp, #0
   1e5bc:	bne	1e758 <__assert_fail@plt+0xd344>
   1e5c0:	mov	r0, r6
   1e5c4:	mov	r1, sl
   1e5c8:	b	1df6c <__assert_fail@plt+0xcb58>
   1e5cc:	umull	r0, r1, r6, ip
   1e5d0:	mov	r3, r7
   1e5d4:	mov	r2, r1
   1e5d8:	strd	r0, [sp, #16]
   1e5dc:	umlal	r2, r3, lr, ip
   1e5e0:	cmp	r3, #0
   1e5e4:	beq	1e29c <__assert_fail@plt+0xce88>
   1e5e8:	ldrd	sl, [sp]
   1e5ec:	mov	r7, #1
   1e5f0:	ldr	r0, [sp, #16]
   1e5f4:	ldr	r3, [sp, #20]
   1e5f8:	mul	r2, r6, fp
   1e5fc:	mla	r2, lr, sl, r2
   1e600:	add	r2, r2, r3
   1e604:	b	1e29c <__assert_fail@plt+0xce88>
   1e608:	umull	sl, fp, r2, ip
   1e60c:	mov	r0, fp
   1e610:	umlal	r0, r1, r3, ip
   1e614:	cmp	r1, #0
   1e618:	bne	1e900 <__assert_fail@plt+0xd4ec>
   1e61c:	mov	r6, sl
   1e620:	mov	lr, r0
   1e624:	b	1e370 <__assert_fail@plt+0xcf5c>
   1e628:	umull	r6, r7, r0, ip
   1e62c:	mov	fp, lr
   1e630:	mov	sl, r7
   1e634:	umlal	sl, fp, r1, ip
   1e638:	cmp	fp, #0
   1e63c:	bne	1e838 <__assert_fail@plt+0xd424>
   1e640:	mov	r2, r6
   1e644:	mov	r3, sl
   1e648:	b	1e14c <__assert_fail@plt+0xcd38>
   1e64c:	umull	r0, r1, sl, ip
   1e650:	mov	r3, r7
   1e654:	mov	r2, r1
   1e658:	umlal	r2, r3, lr, ip
   1e65c:	cmp	r3, #0
   1e660:	beq	1e29c <__assert_fail@plt+0xce88>
   1e664:	ldr	r3, [sp, #4]
   1e668:	mov	r7, #1
   1e66c:	mul	r2, sl, r3
   1e670:	ldr	r3, [sp]
   1e674:	mla	r2, lr, r3, r2
   1e678:	add	r2, r2, r1
   1e67c:	b	1e29c <__assert_fail@plt+0xce88>
   1e680:	umull	r6, r7, r0, ip
   1e684:	mov	r3, r1
   1e688:	mov	r2, r7
   1e68c:	umlal	r2, r3, fp, ip
   1e690:	cmp	r3, #0
   1e694:	strd	r2, [sp, #16]
   1e698:	bne	1e91c <__assert_fail@plt+0xd508>
   1e69c:	mov	r2, r6
   1e6a0:	ldr	r3, [sp, #16]
   1e6a4:	b	1e114 <__assert_fail@plt+0xcd00>
   1e6a8:	umull	sl, fp, r2, ip
   1e6ac:	mov	r7, lr
   1e6b0:	mov	r6, fp
   1e6b4:	umlal	r6, r7, r3, ip
   1e6b8:	cmp	r7, #0
   1e6bc:	bne	1e6e8 <__assert_fail@plt+0xd2d4>
   1e6c0:	mov	r0, sl
   1e6c4:	mov	r1, r6
   1e6c8:	b	1e130 <__assert_fail@plt+0xcd1c>
   1e6cc:	ldrd	r2, [sp]
   1e6d0:	mov	r0, sl
   1e6d4:	mov	r1, #1
   1e6d8:	mul	r6, r6, r3
   1e6dc:	mla	r7, r2, r7, r6
   1e6e0:	add	fp, r7, fp
   1e6e4:	b	1e2d4 <__assert_fail@plt+0xcec0>
   1e6e8:	ldrd	r6, [sp]
   1e6ec:	mov	r0, sl
   1e6f0:	mov	lr, #1
   1e6f4:	mul	r2, r2, r7
   1e6f8:	mla	r1, r3, r6, r2
   1e6fc:	add	r1, r1, fp
   1e700:	b	1e130 <__assert_fail@plt+0xcd1c>
   1e704:	ldrd	r0, [sp]
   1e708:	mov	r6, sl
   1e70c:	mov	r7, #1
   1e710:	mul	r2, r2, r1
   1e714:	mla	lr, r3, r0, r2
   1e718:	add	lr, lr, fp
   1e71c:	b	1dfe0 <__assert_fail@plt+0xcbcc>
   1e720:	ldm	sp, {r0, r3}
   1e724:	mov	r2, sl
   1e728:	mov	r1, #1
   1e72c:	mul	r3, r6, r3
   1e730:	mla	r3, r0, r7, r3
   1e734:	add	r3, r3, fp
   1e738:	b	1df4c <__assert_fail@plt+0xcb38>
   1e73c:	ldrd	r6, [sp]
   1e740:	mov	r0, sl
   1e744:	mov	lr, #1
   1e748:	mul	r2, r2, r7
   1e74c:	mla	r1, r3, r6, r2
   1e750:	add	r1, r1, fp
   1e754:	b	1e168 <__assert_fail@plt+0xcd54>
   1e758:	ldrd	sl, [sp]
   1e75c:	mov	r0, r6
   1e760:	mov	lr, #1
   1e764:	mul	r2, r2, fp
   1e768:	mla	r1, r3, sl, r2
   1e76c:	add	r1, r1, r7
   1e770:	b	1df6c <__assert_fail@plt+0xcb58>
   1e774:	ldm	sp, {r1, r3}
   1e778:	mov	r2, r6
   1e77c:	mov	lr, #1
   1e780:	mul	r3, r0, r3
   1e784:	mla	r3, fp, r1, r3
   1e788:	add	r3, r3, r7
   1e78c:	b	1dfc0 <__assert_fail@plt+0xcbac>
   1e790:	ldrd	r2, [sp]
   1e794:	mov	r0, sl
   1e798:	mov	r1, #1
   1e79c:	mul	r6, r6, r3
   1e7a0:	mla	r7, r2, r7, r6
   1e7a4:	add	fp, r7, fp
   1e7a8:	b	1e0f4 <__assert_fail@plt+0xcce0>
   1e7ac:	mul	r3, r6, r1
   1e7b0:	mov	lr, #1
   1e7b4:	mov	r6, sl
   1e7b8:	mla	r7, ip, r7, r3
   1e7bc:	add	r7, r7, fp
   1e7c0:	b	1e04c <__assert_fail@plt+0xcc38>
   1e7c4:	ldrd	r2, [sp]
   1e7c8:	mov	r1, #1
   1e7cc:	ldr	sl, [sp, #16]
   1e7d0:	mul	lr, r6, r3
   1e7d4:	ldr	r3, [sp, #20]
   1e7d8:	mla	lr, r2, r7, lr
   1e7dc:	add	lr, lr, r3
   1e7e0:	b	1e27c <__assert_fail@plt+0xce68>
   1e7e4:	ldm	sp, {r1, r3}
   1e7e8:	mov	r2, r6
   1e7ec:	mov	lr, #1
   1e7f0:	mul	r3, r0, r3
   1e7f4:	mla	r3, fp, r1, r3
   1e7f8:	add	r3, r3, r7
   1e7fc:	b	1e14c <__assert_fail@plt+0xcd38>
   1e800:	ldm	sp, {r0, r3}
   1e804:	mov	r2, sl
   1e808:	mov	r1, #1
   1e80c:	mul	r3, r6, r3
   1e810:	mla	r3, r0, r7, r3
   1e814:	add	r3, r3, fp
   1e818:	b	1e350 <__assert_fail@plt+0xcf3c>
   1e81c:	ldrd	r2, [sp]
   1e820:	mov	r0, sl
   1e824:	mov	r1, #1
   1e828:	mul	r6, r6, r3
   1e82c:	mla	r7, r2, r7, r6
   1e830:	add	fp, r7, fp
   1e834:	b	1e1c0 <__assert_fail@plt+0xcdac>
   1e838:	ldrd	sl, [sp]
   1e83c:	mov	r2, r6
   1e840:	mov	lr, #1
   1e844:	mul	r3, r0, fp
   1e848:	mla	r3, r1, sl, r3
   1e84c:	add	r3, r3, r7
   1e850:	b	1e14c <__assert_fail@plt+0xcd38>
   1e854:	ldrd	sl, [sp]
   1e858:	mov	r0, r6
   1e85c:	mov	lr, #1
   1e860:	mul	r2, r2, fp
   1e864:	mla	r1, r3, sl, r2
   1e868:	add	r1, r1, r7
   1e86c:	b	1dfa4 <__assert_fail@plt+0xcb90>
   1e870:	movw	r3, #3316	; 0xcf4
   1e874:	movt	r3, #2
   1e878:	movw	r1, #3328	; 0xd00
   1e87c:	movt	r1, #2
   1e880:	movw	r0, #3344	; 0xd10
   1e884:	movt	r0, #2
   1e888:	mov	r2, #85	; 0x55
   1e88c:	bl	11414 <__assert_fail@plt>
   1e890:	ldrd	sl, [sp]
   1e894:	mov	r2, r6
   1e898:	mov	lr, #1
   1e89c:	mul	r3, r0, fp
   1e8a0:	mla	r3, r1, sl, r3
   1e8a4:	add	r3, r3, r7
   1e8a8:	b	1dfc0 <__assert_fail@plt+0xcbac>
   1e8ac:	ldrd	r6, [sp]
   1e8b0:	mov	r2, sl
   1e8b4:	mov	lr, #1
   1e8b8:	mul	r3, r0, r7
   1e8bc:	mla	r3, r1, r6, r3
   1e8c0:	add	r3, r3, fp
   1e8c4:	b	1dfc0 <__assert_fail@plt+0xcbac>
   1e8c8:	ldm	sp, {r0, r3}
   1e8cc:	mov	r2, sl
   1e8d0:	mov	r1, #1
   1e8d4:	mul	r3, r6, r3
   1e8d8:	mla	r3, r0, r7, r3
   1e8dc:	add	r3, r3, fp
   1e8e0:	b	1e220 <__assert_fail@plt+0xce0c>
   1e8e4:	ldrd	r6, [sp]
   1e8e8:	mov	r2, sl
   1e8ec:	mov	lr, #1
   1e8f0:	mul	r3, r0, r7
   1e8f4:	mla	r3, r1, r6, r3
   1e8f8:	add	r3, r3, fp
   1e8fc:	b	1df88 <__assert_fail@plt+0xcb74>
   1e900:	ldrd	r0, [sp]
   1e904:	mov	r6, sl
   1e908:	mov	r7, #1
   1e90c:	mul	r2, r2, r1
   1e910:	mla	lr, r3, r0, r2
   1e914:	add	lr, lr, fp
   1e918:	b	1e370 <__assert_fail@plt+0xcf5c>
   1e91c:	ldm	sp, {r1, r3}
   1e920:	mov	r2, r6
   1e924:	mov	lr, #1
   1e928:	mul	r3, r0, r3
   1e92c:	mla	r3, fp, r1, r3
   1e930:	add	r3, r3, r7
   1e934:	b	1e114 <__assert_fail@plt+0xcd00>
   1e938:	cmp	r1, #0
   1e93c:	cmpne	r0, #0
   1e940:	beq	1e98c <__assert_fail@plt+0xd578>
   1e944:	strd	r4, [sp, #-16]!
   1e948:	umull	r4, r5, r0, r1
   1e94c:	str	r6, [sp, #8]
   1e950:	str	lr, [sp, #12]
   1e954:	adds	r3, r5, #0
   1e958:	movne	r3, #1
   1e95c:	cmp	r4, #0
   1e960:	blt	1e96c <__assert_fail@plt+0xd558>
   1e964:	cmp	r3, #0
   1e968:	beq	1e998 <__assert_fail@plt+0xd584>
   1e96c:	bl	112dc <__errno_location@plt>
   1e970:	mov	r3, #12
   1e974:	ldrd	r4, [sp]
   1e978:	ldr	r6, [sp, #8]
   1e97c:	add	sp, sp, #12
   1e980:	str	r3, [r0]
   1e984:	mov	r0, #0
   1e988:	pop	{pc}		; (ldr pc, [sp], #4)
   1e98c:	mov	r1, #1
   1e990:	mov	r0, r1
   1e994:	b	110a8 <calloc@plt>
   1e998:	ldrd	r4, [sp]
   1e99c:	ldr	r6, [sp, #8]
   1e9a0:	ldr	lr, [sp, #12]
   1e9a4:	add	sp, sp, #16
   1e9a8:	b	110a8 <calloc@plt>
   1e9ac:	cmp	r0, #0
   1e9b0:	beq	1e9bc <__assert_fail@plt+0xd5a8>
   1e9b4:	blt	1e9c4 <__assert_fail@plt+0xd5b0>
   1e9b8:	b	11240 <malloc@plt>
   1e9bc:	mov	r0, #1
   1e9c0:	b	11240 <malloc@plt>
   1e9c4:	str	r4, [sp, #-8]!
   1e9c8:	str	lr, [sp, #4]
   1e9cc:	bl	112dc <__errno_location@plt>
   1e9d0:	mov	r3, #12
   1e9d4:	ldr	r4, [sp]
   1e9d8:	add	sp, sp, #4
   1e9dc:	str	r3, [r0]
   1e9e0:	mov	r0, #0
   1e9e4:	pop	{pc}		; (ldr pc, [sp], #4)
   1e9e8:	cmp	r0, #0
   1e9ec:	beq	1ea14 <__assert_fail@plt+0xd600>
   1e9f0:	cmp	r1, #0
   1e9f4:	str	r4, [sp, #-8]!
   1e9f8:	str	lr, [sp, #4]
   1e9fc:	beq	1ea1c <__assert_fail@plt+0xd608>
   1ea00:	blt	1ea30 <__assert_fail@plt+0xd61c>
   1ea04:	ldr	r4, [sp]
   1ea08:	ldr	lr, [sp, #4]
   1ea0c:	add	sp, sp, #8
   1ea10:	b	11180 <realloc@plt>
   1ea14:	mov	r0, r1
   1ea18:	b	1e9ac <__assert_fail@plt+0xd598>
   1ea1c:	bl	1760c <__assert_fail@plt+0x61f8>
   1ea20:	ldr	r4, [sp]
   1ea24:	add	sp, sp, #4
   1ea28:	mov	r0, #0
   1ea2c:	pop	{pc}		; (ldr pc, [sp], #4)
   1ea30:	bl	112dc <__errno_location@plt>
   1ea34:	mov	r3, #12
   1ea38:	str	r3, [r0]
   1ea3c:	b	1ea20 <__assert_fail@plt+0xd60c>
   1ea40:	strd	r4, [sp, #-16]!
   1ea44:	movw	r4, #4896	; 0x1320
   1ea48:	movt	r4, #3
   1ea4c:	ldr	r2, [r4]
   1ea50:	mov	r5, r1
   1ea54:	str	r6, [sp, #8]
   1ea58:	mov	r6, r0
   1ea5c:	str	lr, [sp, #12]
   1ea60:	cmp	r2, #0
   1ea64:	beq	1eaac <__assert_fail@plt+0xd698>
   1ea68:	ldr	r2, [r4]
   1ea6c:	cmp	r2, #0
   1ea70:	beq	1ea90 <__assert_fail@plt+0xd67c>
   1ea74:	mov	r1, r5
   1ea78:	mov	r0, r6
   1ea7c:	ldrd	r4, [sp]
   1ea80:	ldr	r6, [sp, #8]
   1ea84:	ldr	lr, [sp, #12]
   1ea88:	add	sp, sp, #16
   1ea8c:	b	11354 <strtod_l@plt>
   1ea90:	cmp	r5, #0
   1ea94:	vldr	d0, [pc, #44]	; 1eac8 <__assert_fail@plt+0xd6b4>
   1ea98:	strne	r6, [r5]
   1ea9c:	ldrd	r4, [sp]
   1eaa0:	ldr	r6, [sp, #8]
   1eaa4:	add	sp, sp, #12
   1eaa8:	pop	{pc}		; (ldr pc, [sp], #4)
   1eaac:	movw	r1, #3384	; 0xd38
   1eab0:	movt	r1, #2
   1eab4:	movw	r0, #8127	; 0x1fbf
   1eab8:	bl	1139c <newlocale@plt>
   1eabc:	str	r0, [r4]
   1eac0:	b	1ea68 <__assert_fail@plt+0xd654>
   1eac4:	nop	{0}
	...
   1ead0:	strd	r4, [sp, #-16]!
   1ead4:	mov	r4, r0
   1ead8:	str	r6, [sp, #8]
   1eadc:	str	lr, [sp, #12]
   1eae0:	bl	11204 <__fpending@plt>
   1eae4:	ldr	r5, [r4]
   1eae8:	mov	r6, r0
   1eaec:	mov	r0, r4
   1eaf0:	bl	1ec28 <__assert_fail@plt+0xd814>
   1eaf4:	mov	r4, r0
   1eaf8:	and	r5, r5, #32
   1eafc:	cmp	r5, #0
   1eb00:	bne	1eb38 <__assert_fail@plt+0xd724>
   1eb04:	cmp	r0, #0
   1eb08:	beq	1eb24 <__assert_fail@plt+0xd710>
   1eb0c:	cmp	r6, #0
   1eb10:	bne	1eb50 <__assert_fail@plt+0xd73c>
   1eb14:	bl	112dc <__errno_location@plt>
   1eb18:	ldr	r4, [r0]
   1eb1c:	subs	r4, r4, #9
   1eb20:	mvnne	r4, #0
   1eb24:	mov	r0, r4
   1eb28:	ldrd	r4, [sp]
   1eb2c:	ldr	r6, [sp, #8]
   1eb30:	add	sp, sp, #12
   1eb34:	pop	{pc}		; (ldr pc, [sp], #4)
   1eb38:	cmp	r0, #0
   1eb3c:	bne	1eb50 <__assert_fail@plt+0xd73c>
   1eb40:	bl	112dc <__errno_location@plt>
   1eb44:	str	r4, [r0]
   1eb48:	mvn	r4, #0
   1eb4c:	b	1eb24 <__assert_fail@plt+0xd710>
   1eb50:	mvn	r4, #0
   1eb54:	b	1eb24 <__assert_fail@plt+0xd710>
   1eb58:	vldr	d7, [pc, #176]	; 1ec10 <__assert_fail@plt+0xd7fc>
   1eb5c:	vcmpe.f64	d0, d7
   1eb60:	vmrs	APSR_nzcv, fpscr
   1eb64:	ble	1ec00 <__assert_fail@plt+0xd7ec>
   1eb68:	vldr	d7, [pc, #168]	; 1ec18 <__assert_fail@plt+0xd804>
   1eb6c:	vcmpe.f64	d0, d7
   1eb70:	vmrs	APSR_nzcv, fpscr
   1eb74:	bmi	1eb8c <__assert_fail@plt+0xd778>
   1eb78:	mvn	r2, #-2147483648	; 0x80000000
   1eb7c:	movw	r3, #51711	; 0xc9ff
   1eb80:	movt	r3, #15258	; 0x3b9a
   1eb84:	strd	r2, [r0]
   1eb88:	bx	lr
   1eb8c:	vcvt.s32.f64	s15, d0
   1eb90:	vldr	d6, [pc, #136]	; 1ec20 <__assert_fail@plt+0xd80c>
   1eb94:	movw	r1, #12193	; 0x2fa1
   1eb98:	movt	r1, #17592	; 0x44b8
   1eb9c:	push	{lr}		; (str lr, [sp, #-4]!)
   1eba0:	mov	ip, #51712	; 0xca00
   1eba4:	movt	ip, #15258	; 0x3b9a
   1eba8:	vcvt.f64.s32	d5, s15
   1ebac:	vsub.f64	d0, d0, d5
   1ebb0:	vmul.f64	d0, d0, d6
   1ebb4:	vcvt.s32.f64	s14, d0
   1ebb8:	vcvt.f64.s32	d6, s14
   1ebbc:	vmov	r3, s14
   1ebc0:	vcmpe.f64	d6, d0
   1ebc4:	vmrs	APSR_nzcv, fpscr
   1ebc8:	movmi	r2, #1
   1ebcc:	movpl	r2, #0
   1ebd0:	add	r2, r2, r3
   1ebd4:	asr	r3, r2, #31
   1ebd8:	smull	lr, r1, r1, r2
   1ebdc:	rsb	r3, r3, r1, asr #28
   1ebe0:	vmov	r1, s15
   1ebe4:	add	r1, r3, r1
   1ebe8:	mls	r3, ip, r3, r2
   1ebec:	cmp	r3, #0
   1ebf0:	sublt	r1, r1, #1
   1ebf4:	addlt	r3, r3, ip
   1ebf8:	stm	r0, {r1, r3}
   1ebfc:	pop	{pc}		; (ldr pc, [sp], #4)
   1ec00:	mov	r2, #-2147483648	; 0x80000000
   1ec04:	mov	r3, #0
   1ec08:	strd	r2, [r0]
   1ec0c:	bx	lr
   1ec10:	andeq	r0, r0, r0
   1ec14:	mvngt	r0, r0
   1ec18:	andeq	r0, r0, r0
   1ec1c:	mvnmi	r0, r0
   1ec20:	andeq	r0, r0, r0
   1ec24:	bicmi	ip, sp, r5, ror #26
   1ec28:	strd	r4, [sp, #-12]!
   1ec2c:	mov	r4, r0
   1ec30:	str	lr, [sp, #8]
   1ec34:	sub	sp, sp, #12
   1ec38:	bl	11318 <fileno@plt>
   1ec3c:	cmp	r0, #0
   1ec40:	mov	r0, r4
   1ec44:	blt	1ecc8 <__assert_fail@plt+0xd8b4>
   1ec48:	bl	11258 <__freading@plt>
   1ec4c:	cmp	r0, #0
   1ec50:	bne	1ec94 <__assert_fail@plt+0xd880>
   1ec54:	mov	r0, r4
   1ec58:	bl	1ecdc <__assert_fail@plt+0xd8c8>
   1ec5c:	cmp	r0, #0
   1ec60:	beq	1ecc4 <__assert_fail@plt+0xd8b0>
   1ec64:	bl	112dc <__errno_location@plt>
   1ec68:	mov	r5, r0
   1ec6c:	mov	r0, r4
   1ec70:	ldr	r4, [r5]
   1ec74:	bl	1133c <fclose@plt>
   1ec78:	cmp	r4, #0
   1ec7c:	mvnne	r0, #0
   1ec80:	strne	r4, [r5]
   1ec84:	add	sp, sp, #12
   1ec88:	ldrd	r4, [sp]
   1ec8c:	add	sp, sp, #8
   1ec90:	pop	{pc}		; (ldr pc, [sp], #4)
   1ec94:	mov	r0, r4
   1ec98:	bl	11318 <fileno@plt>
   1ec9c:	mov	r1, #1
   1eca0:	mov	r2, #0
   1eca4:	mov	r3, #0
   1eca8:	str	r1, [sp]
   1ecac:	bl	111ec <lseek64@plt>
   1ecb0:	mvn	r3, #0
   1ecb4:	mvn	r2, #0
   1ecb8:	cmp	r1, r3
   1ecbc:	cmpeq	r0, r2
   1ecc0:	bne	1ec54 <__assert_fail@plt+0xd840>
   1ecc4:	mov	r0, r4
   1ecc8:	add	sp, sp, #12
   1eccc:	ldrd	r4, [sp]
   1ecd0:	ldr	lr, [sp, #8]
   1ecd4:	add	sp, sp, #12
   1ecd8:	b	1133c <fclose@plt>
   1ecdc:	str	r4, [sp, #-8]!
   1ece0:	subs	r4, r0, #0
   1ece4:	str	lr, [sp, #4]
   1ece8:	sub	sp, sp, #8
   1ecec:	beq	1ed08 <__assert_fail@plt+0xd8f4>
   1ecf0:	bl	11258 <__freading@plt>
   1ecf4:	cmp	r0, #0
   1ecf8:	beq	1ed08 <__assert_fail@plt+0xd8f4>
   1ecfc:	ldr	r3, [r4]
   1ed00:	tst	r3, #256	; 0x100
   1ed04:	bne	1ed20 <__assert_fail@plt+0xd90c>
   1ed08:	mov	r0, r4
   1ed0c:	add	sp, sp, #8
   1ed10:	ldr	r4, [sp]
   1ed14:	ldr	lr, [sp, #4]
   1ed18:	add	sp, sp, #8
   1ed1c:	b	110fc <fflush@plt>
   1ed20:	mov	r1, #1
   1ed24:	mov	r2, #0
   1ed28:	mov	r3, #0
   1ed2c:	mov	r0, r4
   1ed30:	str	r1, [sp]
   1ed34:	bl	1ed3c <__assert_fail@plt+0xd928>
   1ed38:	b	1ed08 <__assert_fail@plt+0xd8f4>
   1ed3c:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1ed40:	mov	r4, r0
   1ed44:	ldr	ip, [r0, #4]
   1ed48:	strd	r6, [sp, #8]
   1ed4c:	str	lr, [sp, #20]
   1ed50:	ldr	lr, [r0, #8]
   1ed54:	str	r8, [sp, #16]
   1ed58:	sub	sp, sp, #8
   1ed5c:	ldr	r5, [sp, #32]
   1ed60:	cmp	lr, ip
   1ed64:	beq	1ed8c <__assert_fail@plt+0xd978>
   1ed68:	mov	r0, r4
   1ed6c:	str	r5, [sp, #32]
   1ed70:	add	sp, sp, #8
   1ed74:	ldrd	r4, [sp]
   1ed78:	ldrd	r6, [sp, #8]
   1ed7c:	ldr	r8, [sp, #16]
   1ed80:	ldr	lr, [sp, #20]
   1ed84:	add	sp, sp, #24
   1ed88:	b	11348 <fseeko64@plt>
   1ed8c:	ldr	ip, [r0, #16]
   1ed90:	ldr	lr, [r0, #20]
   1ed94:	cmp	lr, ip
   1ed98:	bne	1ed68 <__assert_fail@plt+0xd954>
   1ed9c:	ldr	r8, [r0, #36]	; 0x24
   1eda0:	cmp	r8, #0
   1eda4:	bne	1ed68 <__assert_fail@plt+0xd954>
   1eda8:	mov	r6, r2
   1edac:	mov	r7, r3
   1edb0:	bl	11318 <fileno@plt>
   1edb4:	mov	r2, r6
   1edb8:	mov	r3, r7
   1edbc:	str	r5, [sp]
   1edc0:	bl	111ec <lseek64@plt>
   1edc4:	mvn	r3, #0
   1edc8:	mvn	r2, #0
   1edcc:	cmp	r1, r3
   1edd0:	cmpeq	r0, r2
   1edd4:	beq	1ee04 <__assert_fail@plt+0xd9f0>
   1edd8:	ldr	r3, [r4]
   1eddc:	strd	r0, [r4, #80]	; 0x50
   1ede0:	bic	r3, r3, #16
   1ede4:	str	r3, [r4]
   1ede8:	mov	r0, r8
   1edec:	add	sp, sp, #8
   1edf0:	ldrd	r4, [sp]
   1edf4:	ldrd	r6, [sp, #8]
   1edf8:	ldr	r8, [sp, #16]
   1edfc:	add	sp, sp, #20
   1ee00:	pop	{pc}		; (ldr pc, [sp], #4)
   1ee04:	mvn	r8, #0
   1ee08:	b	1ede8 <__assert_fail@plt+0xd9d4>
   1ee0c:	mov	r0, #14
   1ee10:	str	r4, [sp, #-8]!
   1ee14:	str	lr, [sp, #4]
   1ee18:	bl	11390 <nl_langinfo@plt>
   1ee1c:	cmp	r0, #0
   1ee20:	beq	1ee44 <__assert_fail@plt+0xda30>
   1ee24:	ldrb	r2, [r0]
   1ee28:	movw	r3, #3388	; 0xd3c
   1ee2c:	movt	r3, #2
   1ee30:	ldr	r4, [sp]
   1ee34:	add	sp, sp, #4
   1ee38:	cmp	r2, #0
   1ee3c:	moveq	r0, r3
   1ee40:	pop	{pc}		; (ldr pc, [sp], #4)
   1ee44:	ldr	r4, [sp]
   1ee48:	add	sp, sp, #4
   1ee4c:	movw	r0, #3388	; 0xd3c
   1ee50:	movt	r0, #2
   1ee54:	pop	{pc}		; (ldr pc, [sp], #4)
   1ee58:	strd	r4, [sp, #-20]!	; 0xffffffec
   1ee5c:	mov	r5, r2
   1ee60:	strd	r6, [sp, #8]
   1ee64:	subs	r6, r0, #0
   1ee68:	mov	r7, r1
   1ee6c:	str	lr, [sp, #16]
   1ee70:	sub	sp, sp, #12
   1ee74:	addeq	r6, sp, #4
   1ee78:	mov	r0, r6
   1ee7c:	bl	11210 <mbrtowc@plt>
   1ee80:	cmp	r5, #0
   1ee84:	cmnne	r0, #3
   1ee88:	mov	r4, r0
   1ee8c:	bhi	1eea8 <__assert_fail@plt+0xda94>
   1ee90:	mov	r0, r4
   1ee94:	add	sp, sp, #12
   1ee98:	ldrd	r4, [sp]
   1ee9c:	ldrd	r6, [sp, #8]
   1eea0:	add	sp, sp, #16
   1eea4:	pop	{pc}		; (ldr pc, [sp], #4)
   1eea8:	mov	r0, #0
   1eeac:	bl	1ef0c <__assert_fail@plt+0xdaf8>
   1eeb0:	cmp	r0, #0
   1eeb4:	bne	1ee90 <__assert_fail@plt+0xda7c>
   1eeb8:	ldrb	r3, [r7]
   1eebc:	mov	r4, #1
   1eec0:	str	r3, [r6]
   1eec4:	b	1ee90 <__assert_fail@plt+0xda7c>
   1eec8:	umull	r2, r3, r1, r2
   1eecc:	cmp	r3, #0
   1eed0:	bne	1eedc <__assert_fail@plt+0xdac8>
   1eed4:	mov	r1, r2
   1eed8:	b	1e9e8 <__assert_fail@plt+0xd5d4>
   1eedc:	str	r4, [sp, #-8]!
   1eee0:	str	lr, [sp, #4]
   1eee4:	bl	112dc <__errno_location@plt>
   1eee8:	mov	r3, #12
   1eeec:	ldr	r4, [sp]
   1eef0:	add	sp, sp, #4
   1eef4:	str	r3, [r0]
   1eef8:	mov	r0, #0
   1eefc:	pop	{pc}		; (ldr pc, [sp], #4)
   1ef00:	mov	r2, #3
   1ef04:	mov	r1, #0
   1ef08:	b	173e4 <__assert_fail@plt+0x5fd0>
   1ef0c:	push	{lr}		; (str lr, [sp, #-4]!)
   1ef10:	sub	sp, sp, #268	; 0x10c
   1ef14:	movw	r2, #257	; 0x101
   1ef18:	add	r1, sp, #4
   1ef1c:	bl	1ef64 <__assert_fail@plt+0xdb50>
   1ef20:	cmp	r0, #0
   1ef24:	movne	r0, #0
   1ef28:	bne	1ef5c <__assert_fail@plt+0xdb48>
   1ef2c:	movw	r1, #3384	; 0xd38
   1ef30:	movt	r1, #2
   1ef34:	add	r0, sp, #4
   1ef38:	bl	110cc <strcmp@plt>
   1ef3c:	cmp	r0, #0
   1ef40:	beq	1ef5c <__assert_fail@plt+0xdb48>
   1ef44:	add	r0, sp, #4
   1ef48:	movw	r1, #3396	; 0xd44
   1ef4c:	movt	r1, #2
   1ef50:	bl	110cc <strcmp@plt>
   1ef54:	adds	r0, r0, #0
   1ef58:	movne	r0, #1
   1ef5c:	add	sp, sp, #268	; 0x10c
   1ef60:	pop	{pc}		; (ldr pc, [sp], #4)
   1ef64:	strd	r4, [sp, #-16]!
   1ef68:	mov	r5, r1
   1ef6c:	mov	r1, #0
   1ef70:	mov	r4, r2
   1ef74:	str	r6, [sp, #8]
   1ef78:	str	lr, [sp, #12]
   1ef7c:	bl	11378 <setlocale@plt>
   1ef80:	subs	r6, r0, #0
   1ef84:	beq	1f004 <__assert_fail@plt+0xdbf0>
   1ef88:	bl	112a0 <strlen@plt>
   1ef8c:	cmp	r4, r0
   1ef90:	bhi	1efb0 <__assert_fail@plt+0xdb9c>
   1ef94:	cmp	r4, #0
   1ef98:	moveq	r0, #34	; 0x22
   1ef9c:	bne	1efd4 <__assert_fail@plt+0xdbc0>
   1efa0:	ldrd	r4, [sp]
   1efa4:	ldr	r6, [sp, #8]
   1efa8:	add	sp, sp, #12
   1efac:	pop	{pc}		; (ldr pc, [sp], #4)
   1efb0:	add	r2, r0, #1
   1efb4:	mov	r1, r6
   1efb8:	mov	r0, r5
   1efbc:	bl	1112c <memcpy@plt>
   1efc0:	ldrd	r4, [sp]
   1efc4:	mov	r0, #0
   1efc8:	ldr	r6, [sp, #8]
   1efcc:	add	sp, sp, #12
   1efd0:	pop	{pc}		; (ldr pc, [sp], #4)
   1efd4:	sub	r4, r4, #1
   1efd8:	mov	r1, r6
   1efdc:	mov	r2, r4
   1efe0:	mov	r0, r5
   1efe4:	bl	1112c <memcpy@plt>
   1efe8:	mov	r3, #0
   1efec:	mov	r0, #34	; 0x22
   1eff0:	strb	r3, [r5, r4]
   1eff4:	ldrd	r4, [sp]
   1eff8:	ldr	r6, [sp, #8]
   1effc:	add	sp, sp, #12
   1f000:	pop	{pc}		; (ldr pc, [sp], #4)
   1f004:	cmp	r4, #0
   1f008:	mov	r0, #22
   1f00c:	strbne	r6, [r5]
   1f010:	ldrd	r4, [sp]
   1f014:	ldr	r6, [sp, #8]
   1f018:	add	sp, sp, #12
   1f01c:	pop	{pc}		; (ldr pc, [sp], #4)
   1f020:	mov	r1, #0
   1f024:	b	11378 <setlocale@plt>
   1f028:	cmp	r3, #0
   1f02c:	cmpeq	r2, #0
   1f030:	bne	1f054 <__assert_fail@plt+0xdc40>
   1f034:	cmp	r1, #0
   1f038:	movlt	r1, #-2147483648	; 0x80000000
   1f03c:	movlt	r0, #0
   1f040:	blt	1f050 <__assert_fail@plt+0xdc3c>
   1f044:	cmpeq	r0, #0
   1f048:	mvnne	r1, #-2147483648	; 0x80000000
   1f04c:	mvnne	r0, #0
   1f050:	b	1f138 <__assert_fail@plt+0xdd24>
   1f054:	sub	sp, sp, #8
   1f058:	push	{sp, lr}
   1f05c:	cmp	r1, #0
   1f060:	blt	1f080 <__assert_fail@plt+0xdc6c>
   1f064:	cmp	r3, #0
   1f068:	blt	1f0b4 <__assert_fail@plt+0xdca0>
   1f06c:	bl	1f148 <__assert_fail@plt+0xdd34>
   1f070:	ldr	lr, [sp, #4]
   1f074:	add	sp, sp, #8
   1f078:	pop	{r2, r3}
   1f07c:	bx	lr
   1f080:	rsbs	r0, r0, #0
   1f084:	sbc	r1, r1, r1, lsl #1
   1f088:	cmp	r3, #0
   1f08c:	blt	1f0d8 <__assert_fail@plt+0xdcc4>
   1f090:	bl	1f148 <__assert_fail@plt+0xdd34>
   1f094:	ldr	lr, [sp, #4]
   1f098:	add	sp, sp, #8
   1f09c:	pop	{r2, r3}
   1f0a0:	rsbs	r0, r0, #0
   1f0a4:	sbc	r1, r1, r1, lsl #1
   1f0a8:	rsbs	r2, r2, #0
   1f0ac:	sbc	r3, r3, r3, lsl #1
   1f0b0:	bx	lr
   1f0b4:	rsbs	r2, r2, #0
   1f0b8:	sbc	r3, r3, r3, lsl #1
   1f0bc:	bl	1f148 <__assert_fail@plt+0xdd34>
   1f0c0:	ldr	lr, [sp, #4]
   1f0c4:	add	sp, sp, #8
   1f0c8:	pop	{r2, r3}
   1f0cc:	rsbs	r0, r0, #0
   1f0d0:	sbc	r1, r1, r1, lsl #1
   1f0d4:	bx	lr
   1f0d8:	rsbs	r2, r2, #0
   1f0dc:	sbc	r3, r3, r3, lsl #1
   1f0e0:	bl	1f148 <__assert_fail@plt+0xdd34>
   1f0e4:	ldr	lr, [sp, #4]
   1f0e8:	add	sp, sp, #8
   1f0ec:	pop	{r2, r3}
   1f0f0:	rsbs	r2, r2, #0
   1f0f4:	sbc	r3, r3, r3, lsl #1
   1f0f8:	bx	lr
   1f0fc:	cmp	r3, #0
   1f100:	cmpeq	r2, #0
   1f104:	bne	1f11c <__assert_fail@plt+0xdd08>
   1f108:	cmp	r1, #0
   1f10c:	cmpeq	r0, #0
   1f110:	mvnne	r1, #0
   1f114:	mvnne	r0, #0
   1f118:	b	1f138 <__assert_fail@plt+0xdd24>
   1f11c:	sub	sp, sp, #8
   1f120:	push	{sp, lr}
   1f124:	bl	1f148 <__assert_fail@plt+0xdd34>
   1f128:	ldr	lr, [sp, #4]
   1f12c:	add	sp, sp, #8
   1f130:	pop	{r2, r3}
   1f134:	bx	lr
   1f138:	push	{r1, lr}
   1f13c:	mov	r0, #8
   1f140:	bl	110c0 <raise@plt>
   1f144:	pop	{r1, pc}
   1f148:	cmp	r1, r3
   1f14c:	cmpeq	r0, r2
   1f150:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f154:	mov	r4, r0
   1f158:	movcc	r0, #0
   1f15c:	mov	r5, r1
   1f160:	ldr	lr, [sp, #36]	; 0x24
   1f164:	movcc	r1, r0
   1f168:	bcc	1f264 <__assert_fail@plt+0xde50>
   1f16c:	cmp	r3, #0
   1f170:	clzeq	ip, r2
   1f174:	clzne	ip, r3
   1f178:	addeq	ip, ip, #32
   1f17c:	cmp	r5, #0
   1f180:	clzeq	r1, r4
   1f184:	addeq	r1, r1, #32
   1f188:	clzne	r1, r5
   1f18c:	sub	ip, ip, r1
   1f190:	sub	sl, ip, #32
   1f194:	lsl	r9, r3, ip
   1f198:	rsb	fp, ip, #32
   1f19c:	orr	r9, r9, r2, lsl sl
   1f1a0:	orr	r9, r9, r2, lsr fp
   1f1a4:	lsl	r8, r2, ip
   1f1a8:	cmp	r5, r9
   1f1ac:	cmpeq	r4, r8
   1f1b0:	movcc	r0, #0
   1f1b4:	movcc	r1, r0
   1f1b8:	bcc	1f1d4 <__assert_fail@plt+0xddc0>
   1f1bc:	mov	r0, #1
   1f1c0:	subs	r4, r4, r8
   1f1c4:	lsl	r1, r0, sl
   1f1c8:	orr	r1, r1, r0, lsr fp
   1f1cc:	lsl	r0, r0, ip
   1f1d0:	sbc	r5, r5, r9
   1f1d4:	cmp	ip, #0
   1f1d8:	beq	1f264 <__assert_fail@plt+0xde50>
   1f1dc:	lsr	r6, r8, #1
   1f1e0:	orr	r6, r6, r9, lsl #31
   1f1e4:	lsr	r7, r9, #1
   1f1e8:	mov	r2, ip
   1f1ec:	b	1f210 <__assert_fail@plt+0xddfc>
   1f1f0:	subs	r3, r4, r6
   1f1f4:	sbc	r8, r5, r7
   1f1f8:	adds	r3, r3, r3
   1f1fc:	adc	r8, r8, r8
   1f200:	adds	r4, r3, #1
   1f204:	adc	r5, r8, #0
   1f208:	subs	r2, r2, #1
   1f20c:	beq	1f22c <__assert_fail@plt+0xde18>
   1f210:	cmp	r5, r7
   1f214:	cmpeq	r4, r6
   1f218:	bcs	1f1f0 <__assert_fail@plt+0xdddc>
   1f21c:	adds	r4, r4, r4
   1f220:	adc	r5, r5, r5
   1f224:	subs	r2, r2, #1
   1f228:	bne	1f210 <__assert_fail@plt+0xddfc>
   1f22c:	lsr	r3, r4, ip
   1f230:	orr	r3, r3, r5, lsl fp
   1f234:	lsr	r2, r5, ip
   1f238:	orr	r3, r3, r5, lsr sl
   1f23c:	adds	r0, r0, r4
   1f240:	mov	r4, r3
   1f244:	lsl	r3, r2, ip
   1f248:	orr	r3, r3, r4, lsl sl
   1f24c:	lsl	ip, r4, ip
   1f250:	orr	r3, r3, r4, lsr fp
   1f254:	adc	r1, r1, r5
   1f258:	subs	r0, r0, ip
   1f25c:	mov	r5, r2
   1f260:	sbc	r1, r1, r3
   1f264:	cmp	lr, #0
   1f268:	strdne	r4, [lr]
   1f26c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f270:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1f274:	mov	r7, r0
   1f278:	ldr	r6, [pc, #72]	; 1f2c8 <__assert_fail@plt+0xdeb4>
   1f27c:	ldr	r5, [pc, #72]	; 1f2cc <__assert_fail@plt+0xdeb8>
   1f280:	add	r6, pc, r6
   1f284:	add	r5, pc, r5
   1f288:	sub	r6, r6, r5
   1f28c:	mov	r8, r1
   1f290:	mov	r9, r2
   1f294:	bl	1107c <fstatfs64@plt-0x20>
   1f298:	asrs	r6, r6, #2
   1f29c:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   1f2a0:	mov	r4, #0
   1f2a4:	add	r4, r4, #1
   1f2a8:	ldr	r3, [r5], #4
   1f2ac:	mov	r2, r9
   1f2b0:	mov	r1, r8
   1f2b4:	mov	r0, r7
   1f2b8:	blx	r3
   1f2bc:	cmp	r6, r4
   1f2c0:	bne	1f2a4 <__assert_fail@plt+0xde90>
   1f2c4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1f2c8:	andeq	r1, r1, ip, lsl #25
   1f2cc:	andeq	r1, r1, r4, lsl #25
   1f2d0:	bx	lr
   1f2d4:	ldr	r3, [pc, #12]	; 1f2e8 <__assert_fail@plt+0xded4>
   1f2d8:	mov	r1, #0
   1f2dc:	add	r3, pc, r3
   1f2e0:	ldr	r2, [r3]
   1f2e4:	b	112e8 <__cxa_atexit@plt>
   1f2e8:	andeq	r1, r1, r0, ror #28

Disassembly of section .fini:

0001f2ec <.fini>:
   1f2ec:	push	{r3, lr}
   1f2f0:	pop	{r3, pc}
