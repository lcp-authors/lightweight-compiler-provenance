
../repos/coreutils/src/df:     file format elf32-littlearm


Disassembly of section .init:

000114c4 <.init>:
   114c4:	push	{r3, lr}
   114c8:	bl	1193c <__assert_fail@plt+0x50>
   114cc:	pop	{r3, pc}

Disassembly of section .plt:

000114d0 <calloc@plt-0x14>:
   114d0:	push	{lr}		; (str lr, [sp, #-4]!)
   114d4:	ldr	lr, [pc, #4]	; 114e0 <calloc@plt-0x4>
   114d8:	add	lr, pc, lr
   114dc:	ldr	pc, [lr, #8]!
   114e0:	andeq	r0, r2, r0, lsr #22

000114e4 <calloc@plt>:
   114e4:	add	ip, pc, #0, 12
   114e8:	add	ip, ip, #32, 20	; 0x20000
   114ec:	ldr	pc, [ip, #2848]!	; 0xb20

000114f0 <fputs_unlocked@plt>:
   114f0:	add	ip, pc, #0, 12
   114f4:	add	ip, ip, #32, 20	; 0x20000
   114f8:	ldr	pc, [ip, #2840]!	; 0xb18

000114fc <raise@plt>:
   114fc:	add	ip, pc, #0, 12
   11500:	add	ip, ip, #32, 20	; 0x20000
   11504:	ldr	pc, [ip, #2832]!	; 0xb10

00011508 <strverscmp@plt>:
   11508:	add	ip, pc, #0, 12
   1150c:	add	ip, ip, #32, 20	; 0x20000
   11510:	ldr	pc, [ip, #2824]!	; 0xb08

00011514 <__getdelim@plt>:
   11514:	add	ip, pc, #0, 12
   11518:	add	ip, ip, #32, 20	; 0x20000
   1151c:	ldr	pc, [ip, #2816]!	; 0xb00

00011520 <strcmp@plt>:
   11520:	add	ip, pc, #0, 12
   11524:	add	ip, ip, #32, 20	; 0x20000
   11528:	ldr	pc, [ip, #2808]!	; 0xaf8

0001152c <fflush@plt>:
   1152c:	add	ip, pc, #0, 12
   11530:	add	ip, ip, #32, 20	; 0x20000
   11534:	ldr	pc, [ip, #2800]!	; 0xaf0

00011538 <wcwidth@plt>:
   11538:	add	ip, pc, #0, 12
   1153c:	add	ip, ip, #32, 20	; 0x20000
   11540:	ldr	pc, [ip, #2792]!	; 0xae8

00011544 <memmove@plt>:
   11544:	add	ip, pc, #0, 12
   11548:	add	ip, ip, #32, 20	; 0x20000
   1154c:	ldr	pc, [ip, #2784]!	; 0xae0

00011550 <free@plt>:
   11550:	add	ip, pc, #0, 12
   11554:	add	ip, ip, #32, 20	; 0x20000
   11558:	ldr	pc, [ip, #2776]!	; 0xad8

0001155c <faccessat@plt>:
   1155c:	add	ip, pc, #0, 12
   11560:	add	ip, ip, #32, 20	; 0x20000
   11564:	ldr	pc, [ip, #2768]!	; 0xad0

00011568 <_exit@plt>:
   11568:	add	ip, pc, #0, 12
   1156c:	add	ip, ip, #32, 20	; 0x20000
   11570:	ldr	pc, [ip, #2760]!	; 0xac8

00011574 <memcpy@plt>:
   11574:	add	ip, pc, #0, 12
   11578:	add	ip, ip, #32, 20	; 0x20000
   1157c:	ldr	pc, [ip, #2752]!	; 0xac0

00011580 <__strtoull_internal@plt>:
   11580:	add	ip, pc, #0, 12
   11584:	add	ip, ip, #32, 20	; 0x20000
   11588:	ldr	pc, [ip, #2744]!	; 0xab8

0001158c <mbsinit@plt>:
   1158c:	add	ip, pc, #0, 12
   11590:	add	ip, ip, #32, 20	; 0x20000
   11594:	ldr	pc, [ip, #2736]!	; 0xab0

00011598 <uname@plt>:
   11598:	add	ip, pc, #0, 12
   1159c:	add	ip, ip, #32, 20	; 0x20000
   115a0:	ldr	pc, [ip, #2728]!	; 0xaa8

000115a4 <dcgettext@plt>:
   115a4:	add	ip, pc, #0, 12
   115a8:	add	ip, ip, #32, 20	; 0x20000
   115ac:	ldr	pc, [ip, #2720]!	; 0xaa0

000115b0 <strdup@plt>:
   115b0:	add	ip, pc, #0, 12
   115b4:	add	ip, ip, #32, 20	; 0x20000
   115b8:	ldr	pc, [ip, #2712]!	; 0xa98

000115bc <realloc@plt>:
   115bc:	add	ip, pc, #0, 12
   115c0:	add	ip, ip, #32, 20	; 0x20000
   115c4:	ldr	pc, [ip, #2704]!	; 0xa90

000115c8 <textdomain@plt>:
   115c8:	add	ip, pc, #0, 12
   115cc:	add	ip, ip, #32, 20	; 0x20000
   115d0:	ldr	pc, [ip, #2696]!	; 0xa88

000115d4 <iswcntrl@plt>:
   115d4:	add	ip, pc, #0, 12
   115d8:	add	ip, ip, #32, 20	; 0x20000
   115dc:	ldr	pc, [ip, #2688]!	; 0xa80

000115e0 <rawmemchr@plt>:
   115e0:	add	ip, pc, #0, 12
   115e4:	add	ip, ip, #32, 20	; 0x20000
   115e8:	ldr	pc, [ip, #2680]!	; 0xa78

000115ec <chdir@plt>:
   115ec:	add	ip, pc, #0, 12
   115f0:	add	ip, ip, #32, 20	; 0x20000
   115f4:	ldr	pc, [ip, #2672]!	; 0xa70

000115f8 <iswprint@plt>:
   115f8:	add	ip, pc, #0, 12
   115fc:	add	ip, ip, #32, 20	; 0x20000
   11600:	ldr	pc, [ip, #2664]!	; 0xa68

00011604 <__fxstat64@plt>:
   11604:	add	ip, pc, #0, 12
   11608:	add	ip, ip, #32, 20	; 0x20000
   1160c:	ldr	pc, [ip, #2656]!	; 0xa60

00011610 <readlink@plt>:
   11610:	add	ip, pc, #0, 12
   11614:	add	ip, ip, #32, 20	; 0x20000
   11618:	ldr	pc, [ip, #2648]!	; 0xa58

0001161c <fwrite@plt>:
   1161c:	add	ip, pc, #0, 12
   11620:	add	ip, ip, #32, 20	; 0x20000
   11624:	ldr	pc, [ip, #2640]!	; 0xa50

00011628 <lseek64@plt>:
   11628:	add	ip, pc, #0, 12
   1162c:	add	ip, ip, #32, 20	; 0x20000
   11630:	ldr	pc, [ip, #2632]!	; 0xa48

00011634 <__ctype_get_mb_cur_max@plt>:
   11634:	add	ip, pc, #0, 12
   11638:	add	ip, ip, #32, 20	; 0x20000
   1163c:	ldr	pc, [ip, #2624]!	; 0xa40

00011640 <hasmntopt@plt>:
   11640:	add	ip, pc, #0, 12
   11644:	add	ip, ip, #32, 20	; 0x20000
   11648:	ldr	pc, [ip, #2616]!	; 0xa38

0001164c <__fpending@plt>:
   1164c:	add	ip, pc, #0, 12
   11650:	add	ip, ip, #32, 20	; 0x20000
   11654:	ldr	pc, [ip, #2608]!	; 0xa30

00011658 <mbrtowc@plt>:
   11658:	add	ip, pc, #0, 12
   1165c:	add	ip, ip, #32, 20	; 0x20000
   11660:	ldr	pc, [ip, #2600]!	; 0xa28

00011664 <wcstombs@plt>:
   11664:	add	ip, pc, #0, 12
   11668:	add	ip, ip, #32, 20	; 0x20000
   1166c:	ldr	pc, [ip, #2592]!	; 0xa20

00011670 <error@plt>:
   11670:	add	ip, pc, #0, 12
   11674:	add	ip, ip, #32, 20	; 0x20000
   11678:	ldr	pc, [ip, #2584]!	; 0xa18

0001167c <getmntent@plt>:
   1167c:	add	ip, pc, #0, 12
   11680:	add	ip, ip, #32, 20	; 0x20000
   11684:	ldr	pc, [ip, #2576]!	; 0xa10

00011688 <open64@plt>:
   11688:	add	ip, pc, #0, 12
   1168c:	add	ip, ip, #32, 20	; 0x20000
   11690:	ldr	pc, [ip, #2568]!	; 0xa08

00011694 <__asprintf_chk@plt>:
   11694:	add	ip, pc, #0, 12
   11698:	add	ip, ip, #32, 20	; 0x20000
   1169c:	ldr	pc, [ip, #2560]!	; 0xa00

000116a0 <getenv@plt>:
   116a0:	add	ip, pc, #0, 12
   116a4:	add	ip, ip, #32, 20	; 0x20000
   116a8:	ldr	pc, [ip, #2552]!	; 0x9f8

000116ac <malloc@plt>:
   116ac:	add	ip, pc, #0, 12
   116b0:	add	ip, ip, #32, 20	; 0x20000
   116b4:	ldr	pc, [ip, #2544]!	; 0x9f0

000116b8 <__libc_start_main@plt>:
   116b8:	add	ip, pc, #0, 12
   116bc:	add	ip, ip, #32, 20	; 0x20000
   116c0:	ldr	pc, [ip, #2536]!	; 0x9e8

000116c4 <__freading@plt>:
   116c4:	add	ip, pc, #0, 12
   116c8:	add	ip, ip, #32, 20	; 0x20000
   116cc:	ldr	pc, [ip, #2528]!	; 0x9e0

000116d0 <__gmon_start__@plt>:
   116d0:	add	ip, pc, #0, 12
   116d4:	add	ip, ip, #32, 20	; 0x20000
   116d8:	ldr	pc, [ip, #2520]!	; 0x9d8

000116dc <getopt_long@plt>:
   116dc:	add	ip, pc, #0, 12
   116e0:	add	ip, ip, #32, 20	; 0x20000
   116e4:	ldr	pc, [ip, #2512]!	; 0x9d0

000116e8 <__ctype_b_loc@plt>:
   116e8:	add	ip, pc, #0, 12
   116ec:	add	ip, ip, #32, 20	; 0x20000
   116f0:	ldr	pc, [ip, #2504]!	; 0x9c8

000116f4 <getcwd@plt>:
   116f4:	add	ip, pc, #0, 12
   116f8:	add	ip, ip, #32, 20	; 0x20000
   116fc:	ldr	pc, [ip, #2496]!	; 0x9c0

00011700 <exit@plt>:
   11700:	add	ip, pc, #0, 12
   11704:	add	ip, ip, #32, 20	; 0x20000
   11708:	ldr	pc, [ip, #2488]!	; 0x9b8

0001170c <bcmp@plt>:
   1170c:	add	ip, pc, #0, 12
   11710:	add	ip, ip, #32, 20	; 0x20000
   11714:	ldr	pc, [ip, #2480]!	; 0x9b0

00011718 <strlen@plt>:
   11718:	add	ip, pc, #0, 12
   1171c:	add	ip, ip, #32, 20	; 0x20000
   11720:	ldr	pc, [ip, #2472]!	; 0x9a8

00011724 <strchr@plt>:
   11724:	add	ip, pc, #0, 12
   11728:	add	ip, ip, #32, 20	; 0x20000
   1172c:	ldr	pc, [ip, #2464]!	; 0x9a0

00011730 <openat64@plt>:
   11730:	add	ip, pc, #0, 12
   11734:	add	ip, ip, #32, 20	; 0x20000
   11738:	ldr	pc, [ip, #2456]!	; 0x998

0001173c <memrchr@plt>:
   1173c:	add	ip, pc, #0, 12
   11740:	add	ip, ip, #32, 20	; 0x20000
   11744:	ldr	pc, [ip, #2448]!	; 0x990

00011748 <__errno_location@plt>:
   11748:	add	ip, pc, #0, 12
   1174c:	add	ip, ip, #32, 20	; 0x20000
   11750:	ldr	pc, [ip, #2440]!	; 0x988

00011754 <__sprintf_chk@plt>:
   11754:	add	ip, pc, #0, 12
   11758:	add	ip, ip, #32, 20	; 0x20000
   1175c:	ldr	pc, [ip, #2432]!	; 0x980

00011760 <__cxa_atexit@plt>:
   11760:	add	ip, pc, #0, 12
   11764:	add	ip, ip, #32, 20	; 0x20000
   11768:	ldr	pc, [ip, #2424]!	; 0x978

0001176c <memset@plt>:
   1176c:	add	ip, pc, #0, 12
   11770:	add	ip, ip, #32, 20	; 0x20000
   11774:	ldr	pc, [ip, #2416]!	; 0x970

00011778 <__printf_chk@plt>:
   11778:	add	ip, pc, #0, 12
   1177c:	add	ip, ip, #32, 20	; 0x20000
   11780:	ldr	pc, [ip, #2408]!	; 0x968

00011784 <statvfs64@plt>:
   11784:	add	ip, pc, #0, 12
   11788:	add	ip, ip, #32, 20	; 0x20000
   1178c:	ldr	pc, [ip, #2400]!	; 0x960

00011790 <fileno@plt>:
   11790:	add	ip, pc, #0, 12
   11794:	add	ip, ip, #32, 20	; 0x20000
   11798:	ldr	pc, [ip, #2392]!	; 0x958

0001179c <__fprintf_chk@plt>:
   1179c:	add	ip, pc, #0, 12
   117a0:	add	ip, ip, #32, 20	; 0x20000
   117a4:	ldr	pc, [ip, #2384]!	; 0x950

000117a8 <memchr@plt>:
   117a8:	add	ip, pc, #0, 12
   117ac:	add	ip, ip, #32, 20	; 0x20000
   117b0:	ldr	pc, [ip, #2376]!	; 0x948

000117b4 <fclose@plt>:
   117b4:	add	ip, pc, #0, 12
   117b8:	add	ip, ip, #32, 20	; 0x20000
   117bc:	ldr	pc, [ip, #2368]!	; 0x940

000117c0 <fseeko64@plt>:
   117c0:	add	ip, pc, #0, 12
   117c4:	add	ip, ip, #32, 20	; 0x20000
   117c8:	ldr	pc, [ip, #2360]!	; 0x938

000117cc <endmntent@plt>:
   117cc:	add	ip, pc, #0, 12
   117d0:	add	ip, ip, #32, 20	; 0x20000
   117d4:	ldr	pc, [ip, #2352]!	; 0x930

000117d8 <fcntl64@plt>:
   117d8:	add	ip, pc, #0, 12
   117dc:	add	ip, ip, #32, 20	; 0x20000
   117e0:	ldr	pc, [ip, #2344]!	; 0x928

000117e4 <__overflow@plt>:
   117e4:	add	ip, pc, #0, 12
   117e8:	add	ip, ip, #32, 20	; 0x20000
   117ec:	ldr	pc, [ip, #2336]!	; 0x920

000117f0 <setlocale@plt>:
   117f0:	add	ip, pc, #0, 12
   117f4:	add	ip, ip, #32, 20	; 0x20000
   117f8:	ldr	pc, [ip, #2328]!	; 0x918

000117fc <wcswidth@plt>:
   117fc:	add	ip, pc, #0, 12
   11800:	add	ip, ip, #32, 20	; 0x20000
   11804:	ldr	pc, [ip, #2320]!	; 0x910

00011808 <strrchr@plt>:
   11808:	add	ip, pc, #0, 12
   1180c:	add	ip, ip, #32, 20	; 0x20000
   11810:	ldr	pc, [ip, #2312]!	; 0x908

00011814 <statfs64@plt>:
   11814:	add	ip, pc, #0, 12
   11818:	add	ip, ip, #32, 20	; 0x20000
   1181c:	ldr	pc, [ip, #2304]!	; 0x900

00011820 <nl_langinfo@plt>:
   11820:	add	ip, pc, #0, 12
   11824:	add	ip, ip, #32, 20	; 0x20000
   11828:	ldr	pc, [ip, #2296]!	; 0x8f8

0001182c <sscanf@plt>:
   1182c:	add	ip, pc, #0, 12
   11830:	add	ip, ip, #32, 20	; 0x20000
   11834:	ldr	pc, [ip, #2288]!	; 0x8f0

00011838 <localeconv@plt>:
   11838:	add	ip, pc, #0, 12
   1183c:	add	ip, ip, #32, 20	; 0x20000
   11840:	ldr	pc, [ip, #2280]!	; 0x8e8

00011844 <mbstowcs@plt>:
   11844:	add	ip, pc, #0, 12
   11848:	add	ip, ip, #32, 20	; 0x20000
   1184c:	ldr	pc, [ip, #2272]!	; 0x8e0

00011850 <fchdir@plt>:
   11850:	add	ip, pc, #0, 12
   11854:	add	ip, ip, #32, 20	; 0x20000
   11858:	ldr	pc, [ip, #2264]!	; 0x8d8

0001185c <canonicalize_file_name@plt>:
   1185c:	add	ip, pc, #0, 12
   11860:	add	ip, ip, #32, 20	; 0x20000
   11864:	ldr	pc, [ip, #2256]!	; 0x8d0

00011868 <fopen64@plt>:
   11868:	add	ip, pc, #0, 12
   1186c:	add	ip, ip, #32, 20	; 0x20000
   11870:	ldr	pc, [ip, #2248]!	; 0x8c8

00011874 <setmntent@plt>:
   11874:	add	ip, pc, #0, 12
   11878:	add	ip, ip, #32, 20	; 0x20000
   1187c:	ldr	pc, [ip, #2240]!	; 0x8c0

00011880 <bindtextdomain@plt>:
   11880:	add	ip, pc, #0, 12
   11884:	add	ip, ip, #32, 20	; 0x20000
   11888:	ldr	pc, [ip, #2232]!	; 0x8b8

0001188c <sync@plt>:
   1188c:	add	ip, pc, #0, 12
   11890:	add	ip, ip, #32, 20	; 0x20000
   11894:	ldr	pc, [ip, #2224]!	; 0x8b0

00011898 <__xstat64@plt>:
   11898:	add	ip, pc, #0, 12
   1189c:	add	ip, ip, #32, 20	; 0x20000
   118a0:	ldr	pc, [ip, #2216]!	; 0x8a8

000118a4 <isatty@plt>:
   118a4:	add	ip, pc, #0, 12
   118a8:	add	ip, ip, #32, 20	; 0x20000
   118ac:	ldr	pc, [ip, #2208]!	; 0x8a0

000118b0 <strncmp@plt>:
   118b0:	add	ip, pc, #0, 12
   118b4:	add	ip, ip, #32, 20	; 0x20000
   118b8:	ldr	pc, [ip, #2200]!	; 0x898

000118bc <abort@plt>:
   118bc:	add	ip, pc, #0, 12
   118c0:	add	ip, ip, #32, 20	; 0x20000
   118c4:	ldr	pc, [ip, #2192]!	; 0x890

000118c8 <close@plt>:
   118c8:	add	ip, pc, #0, 12
   118cc:	add	ip, ip, #32, 20	; 0x20000
   118d0:	ldr	pc, [ip, #2184]!	; 0x888

000118d4 <strspn@plt>:
   118d4:	add	ip, pc, #0, 12
   118d8:	add	ip, ip, #32, 20	; 0x20000
   118dc:	ldr	pc, [ip, #2176]!	; 0x880

000118e0 <__mempcpy_chk@plt>:
   118e0:	add	ip, pc, #0, 12
   118e4:	add	ip, ip, #32, 20	; 0x20000
   118e8:	ldr	pc, [ip, #2168]!	; 0x878

000118ec <__assert_fail@plt>:
   118ec:	add	ip, pc, #0, 12
   118f0:	add	ip, ip, #32, 20	; 0x20000
   118f4:	ldr	pc, [ip, #2160]!	; 0x870

Disassembly of section .text:

00011900 <.text>:
   11900:	mov	fp, #0
   11904:	mov	lr, #0
   11908:	pop	{r1}		; (ldr r1, [sp], #4)
   1190c:	mov	r2, sp
   11910:	push	{r2}		; (str r2, [sp, #-4]!)
   11914:	push	{r0}		; (str r0, [sp, #-4]!)
   11918:	ldr	ip, [pc, #16]	; 11930 <__assert_fail@plt+0x44>
   1191c:	push	{ip}		; (str ip, [sp, #-4]!)
   11920:	ldr	r0, [pc, #12]	; 11934 <__assert_fail@plt+0x48>
   11924:	ldr	r3, [pc, #12]	; 11938 <__assert_fail@plt+0x4c>
   11928:	bl	116b8 <__libc_start_main@plt>
   1192c:	bl	118bc <abort@plt>
   11930:	andeq	pc, r1, r0, ror pc	; <UNPREDICTABLE>
   11934:	andeq	r1, r1, ip, lsr sp
   11938:	andeq	pc, r1, r0, lsl pc	; <UNPREDICTABLE>
   1193c:	ldr	r3, [pc, #20]	; 11958 <__assert_fail@plt+0x6c>
   11940:	ldr	r2, [pc, #20]	; 1195c <__assert_fail@plt+0x70>
   11944:	add	r3, pc, r3
   11948:	ldr	r2, [r3, r2]
   1194c:	cmp	r2, #0
   11950:	bxeq	lr
   11954:	b	116d0 <__gmon_start__@plt>
   11958:			; <UNDEFINED> instruction: 0x000206b4
   1195c:	andeq	r0, r0, r8, ror #2
   11960:	ldr	r0, [pc, #24]	; 11980 <__assert_fail@plt+0x94>
   11964:	ldr	r3, [pc, #24]	; 11984 <__assert_fail@plt+0x98>
   11968:	cmp	r3, r0
   1196c:	bxeq	lr
   11970:	ldr	r3, [pc, #16]	; 11988 <__assert_fail@plt+0x9c>
   11974:	cmp	r3, #0
   11978:	bxeq	lr
   1197c:	bx	r3
   11980:	andeq	r2, r3, ip, lsl r3
   11984:	andeq	r2, r3, ip, lsl r3
   11988:	andeq	r0, r0, r0
   1198c:	ldr	r0, [pc, #36]	; 119b8 <__assert_fail@plt+0xcc>
   11990:	ldr	r1, [pc, #36]	; 119bc <__assert_fail@plt+0xd0>
   11994:	sub	r1, r1, r0
   11998:	asr	r1, r1, #2
   1199c:	add	r1, r1, r1, lsr #31
   119a0:	asrs	r1, r1, #1
   119a4:	bxeq	lr
   119a8:	ldr	r3, [pc, #16]	; 119c0 <__assert_fail@plt+0xd4>
   119ac:	cmp	r3, #0
   119b0:	bxeq	lr
   119b4:	bx	r3
   119b8:	andeq	r2, r3, ip, lsl r3
   119bc:	andeq	r2, r3, ip, lsl r3
   119c0:	andeq	r0, r0, r0
   119c4:	push	{r4, lr}
   119c8:	ldr	r4, [pc, #24]	; 119e8 <__assert_fail@plt+0xfc>
   119cc:	ldrb	r3, [r4]
   119d0:	cmp	r3, #0
   119d4:	popne	{r4, pc}
   119d8:	bl	11960 <__assert_fail@plt+0x74>
   119dc:	mov	r3, #1
   119e0:	strb	r3, [r4]
   119e4:	pop	{r4, pc}
   119e8:	andeq	r2, r3, ip, lsr r3
   119ec:	b	1198c <__assert_fail@plt+0xa0>
   119f0:	push	{fp, lr}
   119f4:	mov	fp, sp
   119f8:	sub	sp, sp, #56	; 0x38
   119fc:	mov	r4, r0
   11a00:	cmp	r0, #0
   11a04:	bne	11cf8 <__assert_fail@plt+0x40c>
   11a08:	movw	r1, #65475	; 0xffc3
   11a0c:	mov	r0, #0
   11a10:	mov	r2, #5
   11a14:	movt	r1, #1
   11a18:	bl	115a4 <dcgettext@plt>
   11a1c:	mov	r1, r0
   11a20:	movw	r0, #9144	; 0x23b8
   11a24:	movt	r0, #3
   11a28:	ldr	r2, [r0]
   11a2c:	mov	r0, #1
   11a30:	bl	11778 <__printf_chk@plt>
   11a34:	movw	r1, #65508	; 0xffe4
   11a38:	mov	r0, #0
   11a3c:	mov	r2, #5
   11a40:	movt	r1, #1
   11a44:	bl	115a4 <dcgettext@plt>
   11a48:	movw	r7, #9012	; 0x2334
   11a4c:	movt	r7, #3
   11a50:	ldr	r1, [r7]
   11a54:	bl	114f0 <fputs_unlocked@plt>
   11a58:	movw	r1, #2003	; 0x7d3
   11a5c:	mov	r0, #0
   11a60:	mov	r2, #5
   11a64:	movt	r1, #2
   11a68:	bl	115a4 <dcgettext@plt>
   11a6c:	ldr	r1, [r7]
   11a70:	bl	114f0 <fputs_unlocked@plt>
   11a74:	movw	r1, #72	; 0x48
   11a78:	mov	r0, #0
   11a7c:	mov	r2, #5
   11a80:	movt	r1, #2
   11a84:	bl	115a4 <dcgettext@plt>
   11a88:	ldr	r1, [r7]
   11a8c:	bl	114f0 <fputs_unlocked@plt>
   11a90:	movw	r1, #482	; 0x1e2
   11a94:	mov	r0, #0
   11a98:	mov	r2, #5
   11a9c:	movt	r1, #2
   11aa0:	bl	115a4 <dcgettext@plt>
   11aa4:	ldr	r1, [r7]
   11aa8:	bl	114f0 <fputs_unlocked@plt>
   11aac:	movw	r1, #737	; 0x2e1
   11ab0:	mov	r0, #0
   11ab4:	mov	r2, #5
   11ab8:	movt	r1, #2
   11abc:	bl	115a4 <dcgettext@plt>
   11ac0:	ldr	r1, [r7]
   11ac4:	bl	114f0 <fputs_unlocked@plt>
   11ac8:	movw	r1, #1003	; 0x3eb
   11acc:	mov	r0, #0
   11ad0:	mov	r2, #5
   11ad4:	movt	r1, #2
   11ad8:	bl	115a4 <dcgettext@plt>
   11adc:	ldr	r1, [r7]
   11ae0:	bl	114f0 <fputs_unlocked@plt>
   11ae4:	movw	r1, #1132	; 0x46c
   11ae8:	mov	r0, #0
   11aec:	mov	r2, #5
   11af0:	movt	r1, #2
   11af4:	bl	115a4 <dcgettext@plt>
   11af8:	ldr	r1, [r7]
   11afc:	bl	114f0 <fputs_unlocked@plt>
   11b00:	movw	r1, #1356	; 0x54c
   11b04:	mov	r0, #0
   11b08:	mov	r2, #5
   11b0c:	movt	r1, #2
   11b10:	bl	115a4 <dcgettext@plt>
   11b14:	ldr	r1, [r7]
   11b18:	bl	114f0 <fputs_unlocked@plt>
   11b1c:	movw	r1, #1401	; 0x579
   11b20:	mov	r0, #0
   11b24:	mov	r2, #5
   11b28:	movt	r1, #2
   11b2c:	bl	115a4 <dcgettext@plt>
   11b30:	ldr	r1, [r7]
   11b34:	bl	114f0 <fputs_unlocked@plt>
   11b38:	movw	r1, #2078	; 0x81e
   11b3c:	mov	r0, #0
   11b40:	mov	r2, #5
   11b44:	movt	r1, #2
   11b48:	bl	115a4 <dcgettext@plt>
   11b4c:	movw	r2, #1455	; 0x5af
   11b50:	mov	r1, r0
   11b54:	mov	r0, #1
   11b58:	movt	r2, #2
   11b5c:	bl	11778 <__printf_chk@plt>
   11b60:	movw	r1, #2301	; 0x8fd
   11b64:	mov	r0, #0
   11b68:	mov	r2, #5
   11b6c:	movt	r1, #2
   11b70:	bl	115a4 <dcgettext@plt>
   11b74:	ldr	r1, [r7]
   11b78:	bl	114f0 <fputs_unlocked@plt>
   11b7c:	movw	r1, #1458	; 0x5b2
   11b80:	mov	r0, #0
   11b84:	mov	r2, #5
   11b88:	movt	r1, #2
   11b8c:	bl	115a4 <dcgettext@plt>
   11b90:	ldr	r1, [r7]
   11b94:	bl	114f0 <fputs_unlocked@plt>
   11b98:	movw	r0, #3920	; 0xf50
   11b9c:	mov	r2, #48	; 0x30
   11ba0:	mov	r6, sp
   11ba4:	movw	r5, #1678	; 0x68e
   11ba8:	movt	r0, #2
   11bac:	movt	r5, #2
   11bb0:	add	r1, r0, #32
   11bb4:	add	r3, r0, #16
   11bb8:	vld1.64	{d18-d19}, [r0], r2
   11bbc:	vld1.64	{d16-d17}, [r1]
   11bc0:	vld1.64	{d20-d21}, [r3]
   11bc4:	vldr	d22, [r0]
   11bc8:	add	r1, r6, #32
   11bcc:	add	r0, r6, #16
   11bd0:	vst1.64	{d16-d17}, [r1]
   11bd4:	movw	r1, #2513	; 0x9d1
   11bd8:	vst1.64	{d20-d21}, [r0]
   11bdc:	mov	r0, r6
   11be0:	movt	r1, #2
   11be4:	vst1.64	{d18-d19}, [r0], r2
   11be8:	vstr	d22, [r0]
   11bec:	mov	r0, r5
   11bf0:	bl	11520 <strcmp@plt>
   11bf4:	cmp	r0, #0
   11bf8:	ldrne	r1, [r6, #8]!
   11bfc:	cmpne	r1, #0
   11c00:	bne	11bec <__assert_fail@plt+0x300>
   11c04:	movw	r1, #2608	; 0xa30
   11c08:	ldr	r6, [r6, #4]
   11c0c:	mov	r0, #0
   11c10:	mov	r2, #5
   11c14:	movt	r1, #2
   11c18:	bl	115a4 <dcgettext@plt>
   11c1c:	movw	r2, #1783	; 0x6f7
   11c20:	movw	r3, #2631	; 0xa47
   11c24:	mov	r1, r0
   11c28:	mov	r0, #1
   11c2c:	movt	r2, #2
   11c30:	movt	r3, #2
   11c34:	bl	11778 <__printf_chk@plt>
   11c38:	cmp	r6, #0
   11c3c:	mov	r0, #5
   11c40:	mov	r1, #0
   11c44:	moveq	r6, r5
   11c48:	bl	117f0 <setlocale@plt>
   11c4c:	cmp	r0, #0
   11c50:	beq	11c88 <__assert_fail@plt+0x39c>
   11c54:	movw	r1, #2671	; 0xa6f
   11c58:	mov	r2, #3
   11c5c:	movt	r1, #2
   11c60:	bl	118b0 <strncmp@plt>
   11c64:	cmp	r0, #0
   11c68:	beq	11c88 <__assert_fail@plt+0x39c>
   11c6c:	movw	r1, #2675	; 0xa73
   11c70:	mov	r0, #0
   11c74:	mov	r2, #5
   11c78:	movt	r1, #2
   11c7c:	bl	115a4 <dcgettext@plt>
   11c80:	ldr	r1, [r7]
   11c84:	bl	114f0 <fputs_unlocked@plt>
   11c88:	movw	r1, #2746	; 0xaba
   11c8c:	mov	r0, #0
   11c90:	mov	r2, #5
   11c94:	movt	r1, #2
   11c98:	bl	115a4 <dcgettext@plt>
   11c9c:	movw	r2, #2631	; 0xa47
   11ca0:	mov	r1, r0
   11ca4:	mov	r0, #1
   11ca8:	mov	r3, r5
   11cac:	movt	r2, #2
   11cb0:	bl	11778 <__printf_chk@plt>
   11cb4:	movw	r1, #2773	; 0xad5
   11cb8:	mov	r0, #0
   11cbc:	mov	r2, #5
   11cc0:	movt	r1, #2
   11cc4:	bl	115a4 <dcgettext@plt>
   11cc8:	mov	r1, r0
   11ccc:	movw	r0, #2541	; 0x9ed
   11cd0:	movw	r3, #2823	; 0xb07
   11cd4:	cmp	r6, r5
   11cd8:	mov	r2, r6
   11cdc:	movt	r0, #2
   11ce0:	movt	r3, #2
   11ce4:	moveq	r3, r0
   11ce8:	mov	r0, #1
   11cec:	bl	11778 <__printf_chk@plt>
   11cf0:	mov	r0, r4
   11cf4:	bl	11700 <exit@plt>
   11cf8:	movw	r0, #9008	; 0x2330
   11cfc:	movw	r1, #65436	; 0xff9c
   11d00:	mov	r2, #5
   11d04:	movt	r0, #3
   11d08:	movt	r1, #1
   11d0c:	ldr	r5, [r0]
   11d10:	mov	r0, #0
   11d14:	bl	115a4 <dcgettext@plt>
   11d18:	mov	r2, r0
   11d1c:	movw	r0, #9144	; 0x23b8
   11d20:	mov	r1, #1
   11d24:	movt	r0, #3
   11d28:	ldr	r3, [r0]
   11d2c:	mov	r0, r5
   11d30:	bl	1179c <__fprintf_chk@plt>
   11d34:	mov	r0, r4
   11d38:	bl	11700 <exit@plt>
   11d3c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11d40:	add	fp, sp, #28
   11d44:	sub	sp, sp, #748	; 0x2ec
   11d48:	str	r0, [sp, #52]	; 0x34
   11d4c:	ldr	r0, [r1]
   11d50:	str	r1, [sp, #44]	; 0x2c
   11d54:	bl	1a074 <__assert_fail@plt+0x8788>
   11d58:	movw	r1, #2823	; 0xb07
   11d5c:	mov	r0, #6
   11d60:	movt	r1, #2
   11d64:	str	r1, [sp, #48]	; 0x30
   11d68:	bl	117f0 <setlocale@plt>
   11d6c:	movw	r4, #1787	; 0x6fb
   11d70:	movw	r1, #1681	; 0x691
   11d74:	movt	r4, #2
   11d78:	movt	r1, #2
   11d7c:	mov	r0, r4
   11d80:	bl	11880 <bindtextdomain@plt>
   11d84:	mov	r0, r4
   11d88:	bl	115c8 <textdomain@plt>
   11d8c:	movw	r0, #24088	; 0x5e18
   11d90:	movt	r0, #1
   11d94:	bl	1ff74 <__assert_fail@plt+0xe688>
   11d98:	movw	r5, #9024	; 0x2340
   11d9c:	movw	r1, #1705	; 0x6a9
   11da0:	mov	r7, #0
   11da4:	mov	sl, #1
   11da8:	mvn	r4, #0
   11dac:	mov	r0, #0
   11db0:	mov	r2, #5
   11db4:	movt	r5, #3
   11db8:	movt	r1, #2
   11dbc:	str	sl, [r5, #56]	; 0x38
   11dc0:	str	r7, [r5, #60]	; 0x3c
   11dc4:	str	r7, [r5, #8]
   11dc8:	str	r7, [r5, #12]
   11dcc:	str	r4, [r5, #16]
   11dd0:	strh	r7, [r5, #4]
   11dd4:	str	r7, [r5]
   11dd8:	bl	115a4 <dcgettext@plt>
   11ddc:	movw	r8, #1746	; 0x6d2
   11de0:	movw	r9, #3648	; 0xe40
   11de4:	str	r0, [sp, #40]	; 0x28
   11de8:	add	r0, r5, #16
   11dec:	add	r6, sp, #64	; 0x40
   11df0:	movt	r8, #2
   11df4:	movt	r9, #2
   11df8:	str	r0, [sp, #60]	; 0x3c
   11dfc:	add	r0, r5, #48	; 0x30
   11e00:	mov	r5, #0
   11e04:	str	r0, [sp, #56]	; 0x38
   11e08:	ldr	r0, [sp, #52]	; 0x34
   11e0c:	ldr	r1, [sp, #44]	; 0x2c
   11e10:	mov	r2, r8
   11e14:	mov	r3, r9
   11e18:	str	r4, [sp, #64]	; 0x40
   11e1c:	str	r6, [sp]
   11e20:	bl	116dc <getopt_long@plt>
   11e24:	add	r1, r0, #3
   11e28:	cmp	r1, #123	; 0x7b
   11e2c:	bhi	1206c <__assert_fail@plt+0x780>
   11e30:	movw	r2, #9024	; 0x2340
   11e34:	add	r0, pc, #4
   11e38:	movt	r2, #3
   11e3c:	ldr	pc, [r0, r1, lsl #2]
   11e40:	andeq	r3, r1, r4, ror #25
   11e44:	andeq	r3, r1, r0, asr #26
   11e48:	strdeq	r2, [r1], -r8
   11e4c:	ldrdeq	r3, [r1], -r8
   11e50:	ldrdeq	r3, [r1], -r8
   11e54:	ldrdeq	r3, [r1], -r8
   11e58:	ldrdeq	r3, [r1], -r8
   11e5c:	ldrdeq	r3, [r1], -r8
   11e60:	ldrdeq	r3, [r1], -r8
   11e64:	ldrdeq	r3, [r1], -r8
   11e68:	ldrdeq	r3, [r1], -r8
   11e6c:	ldrdeq	r3, [r1], -r8
   11e70:	ldrdeq	r3, [r1], -r8
   11e74:	ldrdeq	r3, [r1], -r8
   11e78:	ldrdeq	r3, [r1], -r8
   11e7c:	ldrdeq	r3, [r1], -r8
   11e80:	ldrdeq	r3, [r1], -r8
   11e84:	ldrdeq	r3, [r1], -r8
   11e88:	ldrdeq	r3, [r1], -r8
   11e8c:	ldrdeq	r3, [r1], -r8
   11e90:	ldrdeq	r3, [r1], -r8
   11e94:	ldrdeq	r3, [r1], -r8
   11e98:	ldrdeq	r3, [r1], -r8
   11e9c:	ldrdeq	r3, [r1], -r8
   11ea0:	ldrdeq	r3, [r1], -r8
   11ea4:	ldrdeq	r3, [r1], -r8
   11ea8:	ldrdeq	r3, [r1], -r8
   11eac:	ldrdeq	r3, [r1], -r8
   11eb0:	ldrdeq	r3, [r1], -r8
   11eb4:	ldrdeq	r3, [r1], -r8
   11eb8:	ldrdeq	r3, [r1], -r8
   11ebc:	ldrdeq	r3, [r1], -r8
   11ec0:	ldrdeq	r3, [r1], -r8
   11ec4:	ldrdeq	r3, [r1], -r8
   11ec8:	ldrdeq	r3, [r1], -r8
   11ecc:	ldrdeq	r3, [r1], -r8
   11ed0:	ldrdeq	r3, [r1], -r8
   11ed4:	ldrdeq	r3, [r1], -r8
   11ed8:	ldrdeq	r3, [r1], -r8
   11edc:	ldrdeq	r3, [r1], -r8
   11ee0:	ldrdeq	r3, [r1], -r8
   11ee4:	ldrdeq	r3, [r1], -r8
   11ee8:	ldrdeq	r3, [r1], -r8
   11eec:	ldrdeq	r3, [r1], -r8
   11ef0:	ldrdeq	r3, [r1], -r8
   11ef4:	ldrdeq	r3, [r1], -r8
   11ef8:	ldrdeq	r3, [r1], -r8
   11efc:	ldrdeq	r3, [r1], -r8
   11f00:	ldrdeq	r3, [r1], -r8
   11f04:	ldrdeq	r3, [r1], -r8
   11f08:	ldrdeq	r3, [r1], -r8
   11f0c:	ldrdeq	r3, [r1], -r8
   11f10:	ldrdeq	r3, [r1], -r8
   11f14:	ldrdeq	r3, [r1], -r8
   11f18:	ldrdeq	r3, [r1], -r8
   11f1c:	ldrdeq	r3, [r1], -r8
   11f20:	ldrdeq	r3, [r1], -r8
   11f24:	ldrdeq	r3, [r1], -r8
   11f28:	ldrdeq	r3, [r1], -r8
   11f2c:	ldrdeq	r3, [r1], -r8
   11f30:	ldrdeq	r3, [r1], -r8
   11f34:	ldrdeq	r3, [r1], -r8
   11f38:	ldrdeq	r3, [r1], -r8
   11f3c:	ldrdeq	r3, [r1], -r8
   11f40:	ldrdeq	r3, [r1], -r8
   11f44:	ldrdeq	r3, [r1], -r8
   11f48:	ldrdeq	r3, [r1], -r8
   11f4c:	ldrdeq	r3, [r1], -r8
   11f50:	ldrdeq	r3, [r1], -r8
   11f54:	andeq	r2, r1, ip, ror r1
   11f58:	ldrdeq	r3, [r1], -r8
   11f5c:	ldrdeq	r3, [r1], -r8
   11f60:	ldrdeq	r3, [r1], -r8
   11f64:	andeq	r2, r1, r0, lsr r0
   11f68:	ldrdeq	r3, [r1], -r8
   11f6c:	strdeq	r2, [r1], -r0
   11f70:	ldrdeq	r3, [r1], -r8
   11f74:	ldrdeq	r3, [r1], -r8
   11f78:	ldrdeq	r3, [r1], -r8
   11f7c:	ldrdeq	r3, [r1], -r8
   11f80:	ldrdeq	r3, [r1], -r8
   11f84:	ldrdeq	r3, [r1], -r8
   11f88:	ldrdeq	r3, [r1], -r8
   11f8c:			; <UNDEFINED> instruction: 0x000121bc
   11f90:	ldrdeq	r3, [r1], -r8
   11f94:	ldrdeq	r3, [r1], -r8
   11f98:	ldrdeq	r3, [r1], -r8
   11f9c:	andeq	r2, r1, r8, asr r1
   11fa0:	ldrdeq	r3, [r1], -r8
   11fa4:	ldrdeq	r3, [r1], -r8
   11fa8:	ldrdeq	r3, [r1], -r8
   11fac:	ldrdeq	r3, [r1], -r8
   11fb0:	ldrdeq	r3, [r1], -r8
   11fb4:	ldrdeq	r3, [r1], -r8
   11fb8:	ldrdeq	r3, [r1], -r8
   11fbc:	ldrdeq	r3, [r1], -r8
   11fc0:	ldrdeq	r3, [r1], -r8
   11fc4:	ldrdeq	r3, [r1], -r8
   11fc8:	ldrdeq	r3, [r1], -r8
   11fcc:	ldrdeq	r3, [r1], -r8
   11fd0:	andeq	r2, r1, ip, ror #2
   11fd4:	ldrdeq	r3, [r1], -r8
   11fd8:	ldrdeq	r3, [r1], -r8
   11fdc:	ldrdeq	r3, [r1], -r8
   11fe0:	ldrdeq	r3, [r1], -r8
   11fe4:	ldrdeq	r3, [r1], -r8
   11fe8:	ldrdeq	r3, [r1], -r8
   11fec:	ldrdeq	r2, [r1], -r0
   11ff0:	andeq	r2, r1, r0, lsr #3
   11ff4:	ldrdeq	r3, [r1], -r8
   11ff8:	andeq	r2, r1, r0, lsr #1
   11ffc:			; <UNDEFINED> instruction: 0x000121b4
   12000:	andeq	r2, r1, r4, ror #3
   12004:	ldrdeq	r3, [r1], -r8
   12008:	ldrdeq	r3, [r1], -r8
   1200c:	ldrdeq	r3, [r1], -r8
   12010:	ldrdeq	r3, [r1], -r8
   12014:	ldrdeq	r3, [r1], -r8
   12018:	ldrdeq	r3, [r1], -r8
   1201c:	andeq	r2, r1, r0, lsr r0
   12020:	ldrdeq	r3, [r1], -r8
   12024:	andeq	r1, r1, r8, lsl #28
   12028:	ldrdeq	r3, [r1], -r8
   1202c:	andeq	r2, r1, r8, lsr #1
   12030:	movw	r0, #9016	; 0x2338
   12034:	movt	r0, #3
   12038:	ldr	sl, [r0]
   1203c:	mov	r0, #8
   12040:	bl	1c944 <__assert_fail@plt+0xb058>
   12044:	movw	r1, #9024	; 0x2340
   12048:	str	sl, [r0]
   1204c:	mvn	r4, #0
   12050:	mov	sl, #1
   12054:	movt	r1, #3
   12058:	mov	r2, r1
   1205c:	ldr	r1, [r1, #8]
   12060:	str	r0, [r2, #8]
   12064:	str	r1, [r0, #4]
   12068:	b	11e08 <__assert_fail@plt+0x51c>
   1206c:	movw	r2, #9024	; 0x2340
   12070:	sub	r0, r0, #256	; 0x100
   12074:	movt	r2, #3
   12078:	cmp	r0, #3
   1207c:	bhi	13cd8 <__assert_fail@plt+0x23ec>
   12080:	add	r1, pc, #0
   12084:	ldr	pc, [r1, r0, lsl #2]
   12088:	muleq	r1, r8, r0
   1208c:	andeq	r2, r1, r4, ror r1
   12090:	andeq	r2, r1, r8, ror #1
   12094:	andeq	r2, r1, r4, lsl #2
   12098:	strb	r7, [r2, #7]
   1209c:	b	11e08 <__assert_fail@plt+0x51c>
   120a0:	mov	r0, #1024	; 0x400
   120a4:	b	121e8 <__assert_fail@plt+0x8fc>
   120a8:	movw	r0, #9016	; 0x2338
   120ac:	mov	r7, r5
   120b0:	movt	r0, #3
   120b4:	ldr	r5, [r0]
   120b8:	mov	r0, #8
   120bc:	bl	1c944 <__assert_fail@plt+0xb058>
   120c0:	movw	r1, #9024	; 0x2340
   120c4:	str	r5, [r0]
   120c8:	mov	r5, r7
   120cc:	mov	r7, #0
   120d0:	movt	r1, #3
   120d4:	mov	r2, r1
   120d8:	ldr	r1, [r1, #12]
   120dc:	str	r0, [r2, #12]
   120e0:	str	r1, [r0, #4]
   120e4:	b	11e08 <__assert_fail@plt+0x51c>
   120e8:	strb	sl, [r2, #5]
   120ec:	b	11e08 <__assert_fail@plt+0x51c>
   120f0:	mov	r0, #144	; 0x90
   120f4:	str	sl, [r2, #48]	; 0x30
   120f8:	str	r7, [r2, #52]	; 0x34
   120fc:	str	r0, [r2, #16]
   12100:	b	11e08 <__assert_fail@plt+0x51c>
   12104:	ldr	r0, [r2, #20]
   12108:	cmp	r0, #1
   1210c:	beq	13d7c <__assert_fail@plt+0x2490>
   12110:	cmp	r0, #0
   12114:	mvn	r1, r5
   12118:	movwne	r0, #1
   1211c:	orr	r0, r1, r0
   12120:	tst	r0, #1
   12124:	beq	13d90 <__assert_fail@plt+0x24a4>
   12128:	ldrb	r0, [r2, #2]
   1212c:	cmp	r0, #1
   12130:	beq	13d68 <__assert_fail@plt+0x247c>
   12134:	mov	r0, #4
   12138:	str	r0, [r2, #20]
   1213c:	movw	r0, #9016	; 0x2338
   12140:	movt	r0, #3
   12144:	ldr	r0, [r0]
   12148:	cmp	r0, #0
   1214c:	beq	11e08 <__assert_fail@plt+0x51c>
   12150:	bl	13e04 <__assert_fail@plt+0x2518>
   12154:	b	11e08 <__assert_fail@plt+0x51c>
   12158:	ldr	r0, [r2, #20]
   1215c:	cmp	r0, #4
   12160:	beq	13d68 <__assert_fail@plt+0x247c>
   12164:	strb	sl, [r2, #2]
   12168:	b	11e08 <__assert_fail@plt+0x51c>
   1216c:	strb	sl, [r2]
   12170:	b	11e08 <__assert_fail@plt+0x51c>
   12174:	strb	sl, [r2, #7]
   12178:	b	11e08 <__assert_fail@plt+0x51c>
   1217c:	movw	r0, #9016	; 0x2338
   12180:	ldr	r1, [sp, #60]	; 0x3c
   12184:	ldr	r2, [sp, #56]	; 0x38
   12188:	movt	r0, #3
   1218c:	ldr	r0, [r0]
   12190:	bl	18608 <__assert_fail@plt+0x6d1c>
   12194:	cmp	r0, #0
   12198:	beq	11e08 <__assert_fail@plt+0x51c>
   1219c:	b	13dbc <__assert_fail@plt+0x24d0>
   121a0:	ldr	r0, [r2, #20]
   121a4:	cmp	r0, #4
   121a8:	beq	13d7c <__assert_fail@plt+0x2490>
   121ac:	str	sl, [r2, #20]
   121b0:	b	11e08 <__assert_fail@plt+0x51c>
   121b4:	strb	sl, [r2, #6]
   121b8:	b	11e08 <__assert_fail@plt+0x51c>
   121bc:	ldr	r0, [r2, #20]
   121c0:	mov	r5, #1
   121c4:	cmp	r0, #4
   121c8:	bne	11e08 <__assert_fail@plt+0x51c>
   121cc:	b	13d90 <__assert_fail@plt+0x24a4>
   121d0:	mov	r0, #176	; 0xb0
   121d4:	str	sl, [r2, #48]	; 0x30
   121d8:	str	r7, [r2, #52]	; 0x34
   121dc:	str	r0, [r2, #16]
   121e0:	b	11e08 <__assert_fail@plt+0x51c>
   121e4:	mov	r0, #1048576	; 0x100000
   121e8:	str	r0, [r2, #48]	; 0x30
   121ec:	str	r7, [r2, #52]	; 0x34
   121f0:	str	r7, [r2, #16]
   121f4:	b	11e08 <__assert_fail@plt+0x51c>
   121f8:	ldr	r0, [r2, #16]
   121fc:	cmn	r0, #1
   12200:	beq	124d8 <__assert_fail@plt+0xbec>
   12204:	ldr	r0, [r2, #20]
   12208:	cmp	r0, #1
   1220c:	cmpne	r0, #4
   12210:	bne	12524 <__assert_fail@plt+0xc38>
   12214:	ldr	r6, [r2, #8]
   12218:	cmp	r6, #0
   1221c:	beq	122c4 <__assert_fail@plt+0x9d8>
   12220:	movw	r8, #1873	; 0x751
   12224:	mov	r7, #0
   12228:	movt	r8, #2
   1222c:	ldr	r4, [r2, #12]
   12230:	cmp	r4, #0
   12234:	bne	12290 <__assert_fail@plt+0x9a4>
   12238:	b	12278 <__assert_fail@plt+0x98c>
   1223c:	mov	r0, #0
   12240:	mov	r1, r8
   12244:	mov	r2, #5
   12248:	bl	115a4 <dcgettext@plt>
   1224c:	mov	r5, r0
   12250:	ldr	r0, [r6]
   12254:	bl	1c038 <__assert_fail@plt+0xa74c>
   12258:	mov	r3, r0
   1225c:	mov	r0, #0
   12260:	mov	r1, #0
   12264:	mov	r2, r5
   12268:	bl	11670 <error@plt>
   1226c:	mov	r7, #1
   12270:	movw	r2, #9024	; 0x2340
   12274:	movt	r2, #3
   12278:	ldr	r6, [r6, #4]
   1227c:	cmp	r6, #0
   12280:	beq	122b8 <__assert_fail@plt+0x9cc>
   12284:	ldr	r4, [r2, #12]
   12288:	cmp	r4, #0
   1228c:	beq	12278 <__assert_fail@plt+0x98c>
   12290:	ldr	r5, [r6]
   12294:	ldr	r1, [r4]
   12298:	mov	r0, r5
   1229c:	bl	11520 <strcmp@plt>
   122a0:	cmp	r0, #0
   122a4:	beq	1223c <__assert_fail@plt+0x950>
   122a8:	ldr	r4, [r4, #4]
   122ac:	cmp	r4, #0
   122b0:	bne	12294 <__assert_fail@plt+0x9a8>
   122b4:	b	12270 <__assert_fail@plt+0x984>
   122b8:	mov	r0, #1
   122bc:	tst	r7, #1
   122c0:	bne	13cb8 <__assert_fail@plt+0x23cc>
   122c4:	movw	r0, #9000	; 0x2328
   122c8:	mov	r1, #0
   122cc:	movt	r0, #3
   122d0:	str	r1, [sp, #24]
   122d4:	ldr	r1, [sp, #52]	; 0x34
   122d8:	ldr	r0, [r0]
   122dc:	cmp	r0, r1
   122e0:	bge	12444 <__assert_fail@plt+0xb58>
   122e4:	ldr	r5, [sp, #52]	; 0x34
   122e8:	mov	r1, #104	; 0x68
   122ec:	mov	r4, #104	; 0x68
   122f0:	sub	r0, r5, r0
   122f4:	bl	1ca14 <__assert_fail@plt+0xb128>
   122f8:	str	r0, [sp, #24]
   122fc:	movw	r0, #9000	; 0x2328
   12300:	movw	r2, #9024	; 0x2340
   12304:	movt	r0, #3
   12308:	movt	r2, #3
   1230c:	ldr	r8, [r0]
   12310:	cmp	r8, r5
   12314:	bge	12444 <__assert_fail@plt+0xb58>
   12318:	ldr	r0, [sp, #24]
   1231c:	ldr	r1, [sp, #52]	; 0x34
   12320:	mla	r9, r8, r4, r0
   12324:	ldr	r0, [sp, #44]	; 0x2c
   12328:	add	r4, r0, r8, lsl #2
   1232c:	mvn	r0, r8
   12330:	add	sl, r0, r1
   12334:	ldr	r7, [r4]
   12338:	mov	r1, #2304	; 0x900
   1233c:	mov	r0, r7
   12340:	bl	11688 <open64@plt>
   12344:	cmn	r0, #1
   12348:	ble	12378 <__assert_fail@plt+0xa8c>
   1234c:	mov	r6, r0
   12350:	mvn	r0, #103	; 0x67
   12354:	mla	r2, r8, r0, r9
   12358:	mov	r0, #3
   1235c:	mov	r1, r6
   12360:	bl	11604 <__fxstat64@plt>
   12364:	cmp	r0, #0
   12368:	beq	123c4 <__assert_fail@plt+0xad8>
   1236c:	bl	11748 <__errno_location@plt>
   12370:	ldr	r5, [r0]
   12374:	b	123c8 <__assert_fail@plt+0xadc>
   12378:	bl	11748 <__errno_location@plt>
   1237c:	ldr	r5, [r0]
   12380:	cmp	r5, #2
   12384:	cmpne	r5, #20
   12388:	beq	123e0 <__assert_fail@plt+0xaf4>
   1238c:	mov	r6, r0
   12390:	mvn	r0, #103	; 0x67
   12394:	mov	r1, r7
   12398:	mla	r2, r8, r0, r9
   1239c:	mov	r0, #3
   123a0:	bl	11898 <__xstat64@plt>
   123a4:	movw	r2, #9024	; 0x2340
   123a8:	cmp	r0, #0
   123ac:	movt	r2, #3
   123b0:	beq	12420 <__assert_fail@plt+0xb34>
   123b4:	ldr	r5, [r6]
   123b8:	cmp	r5, #0
   123bc:	bne	123e0 <__assert_fail@plt+0xaf4>
   123c0:	b	12420 <__assert_fail@plt+0xb34>
   123c4:	mov	r5, #0
   123c8:	mov	r0, r6
   123cc:	bl	118c8 <close@plt>
   123d0:	movw	r2, #9024	; 0x2340
   123d4:	movt	r2, #3
   123d8:	cmp	r5, #0
   123dc:	beq	12420 <__assert_fail@plt+0xb34>
   123e0:	ldr	r2, [r4]
   123e4:	mov	r0, #0
   123e8:	mov	r1, #3
   123ec:	bl	1bd8c <__assert_fail@plt+0xa4a0>
   123f0:	movw	r2, #5996	; 0x176c
   123f4:	mov	r3, r0
   123f8:	mov	r0, #0
   123fc:	mov	r1, r5
   12400:	movt	r2, #2
   12404:	bl	11670 <error@plt>
   12408:	movw	r2, #9024	; 0x2340
   1240c:	mov	r0, #1
   12410:	movt	r2, #3
   12414:	strb	r0, [r2, #4]
   12418:	mov	r0, #0
   1241c:	str	r0, [r4]
   12420:	cmp	sl, #0
   12424:	beq	12444 <__assert_fail@plt+0xb58>
   12428:	movw	r0, #9000	; 0x2328
   1242c:	add	r4, r4, #4
   12430:	add	r9, r9, #104	; 0x68
   12434:	sub	sl, sl, #1
   12438:	movt	r0, #3
   1243c:	ldr	r8, [r0]
   12440:	b	12334 <__assert_fail@plt+0xa48>
   12444:	ldrd	r0, [r2, #8]
   12448:	orrs	r0, r0, r1
   1244c:	mov	r0, #1
   12450:	bne	12478 <__assert_fail@plt+0xb8c>
   12454:	ldrb	r0, [r2, #2]
   12458:	ldrb	r1, [r2, #6]
   1245c:	movw	r2, #8568	; 0x2178
   12460:	movt	r2, #3
   12464:	ldrb	r2, [r2, #52]	; 0x34
   12468:	cmp	r2, #0
   1246c:	movwne	r2, #1
   12470:	orr	r0, r0, r2
   12474:	orr	r0, r1, r0
   12478:	and	r0, r0, #1
   1247c:	bl	19348 <__assert_fail@plt+0x7a5c>
   12480:	movw	r2, #9024	; 0x2340
   12484:	cmp	r0, #0
   12488:	movt	r2, #3
   1248c:	str	r0, [r2, #24]
   12490:	beq	12550 <__assert_fail@plt+0xc64>
   12494:	ldrb	r0, [r2, #7]
   12498:	cmp	r0, #1
   1249c:	bne	12600 <__assert_fail@plt+0xd14>
   124a0:	bl	1188c <sync@plt>
   124a4:	movw	r2, #9024	; 0x2340
   124a8:	movt	r2, #3
   124ac:	ldr	r0, [r2, #20]
   124b0:	cmp	r0, #4
   124b4:	bls	1260c <__assert_fail@plt+0xd20>
   124b8:	movw	r0, #3260	; 0xcbc
   124bc:	movw	r1, #3035	; 0xbdb
   124c0:	movw	r3, #3283	; 0xcd3
   124c4:	movw	r2, #565	; 0x235
   124c8:	movt	r0, #2
   124cc:	movt	r1, #2
   124d0:	movt	r3, #2
   124d4:	bl	118ec <__assert_fail@plt>
   124d8:	tst	r5, #1
   124dc:	beq	12778 <__assert_fail@plt+0xe8c>
   124e0:	movw	r0, #1843	; 0x733
   124e4:	mov	r6, r5
   124e8:	mov	r5, #0
   124ec:	movt	r0, #2
   124f0:	str	r5, [r2, #16]
   124f4:	bl	116a0 <getenv@plt>
   124f8:	movw	r2, #9024	; 0x2340
   124fc:	cmp	r0, #0
   12500:	mov	r4, #512	; 0x200
   12504:	movt	r2, #3
   12508:	movweq	r4, #1024	; 0x400
   1250c:	strd	r4, [r2, #48]	; 0x30
   12510:	mov	r5, r6
   12514:	ldr	r0, [r2, #20]
   12518:	cmp	r0, #1
   1251c:	cmpne	r0, #4
   12520:	beq	12214 <__assert_fail@plt+0x928>
   12524:	ldrb	r0, [r2, #16]
   12528:	tst	r0, #16
   1252c:	bne	13cc0 <__assert_fail@plt+0x23d4>
   12530:	tst	r5, #1
   12534:	beq	12214 <__assert_fail@plt+0x928>
   12538:	mov	r0, #3
   1253c:	str	r0, [r2, #20]
   12540:	ldr	r6, [r2, #8]
   12544:	cmp	r6, #0
   12548:	bne	12220 <__assert_fail@plt+0x934>
   1254c:	b	122c4 <__assert_fail@plt+0x9d8>
   12550:	movw	r0, #9000	; 0x2328
   12554:	ldr	r1, [sp, #52]	; 0x34
   12558:	mov	r4, #1
   1255c:	movt	r0, #3
   12560:	ldr	r0, [r0]
   12564:	cmp	r0, r1
   12568:	bge	125b4 <__assert_fail@plt+0xcc8>
   1256c:	ldrb	r0, [r2]
   12570:	cmp	r0, #0
   12574:	bne	125b4 <__assert_fail@plt+0xcc8>
   12578:	ldrb	r0, [r2, #6]
   1257c:	cmp	r0, #0
   12580:	bne	125b4 <__assert_fail@plt+0xcc8>
   12584:	ldr	r0, [r2, #8]
   12588:	cmp	r0, #0
   1258c:	ldreq	r0, [r2, #12]
   12590:	cmpeq	r0, #0
   12594:	bne	125b4 <__assert_fail@plt+0xcc8>
   12598:	movw	r1, #1920	; 0x780
   1259c:	mov	r0, #0
   125a0:	mov	r2, #5
   125a4:	mov	r4, #0
   125a8:	movt	r1, #2
   125ac:	bl	115a4 <dcgettext@plt>
   125b0:	str	r0, [sp, #48]	; 0x30
   125b4:	bl	11748 <__errno_location@plt>
   125b8:	movw	r1, #1935	; 0x78f
   125bc:	ldr	r5, [r0]
   125c0:	mov	r0, #0
   125c4:	mov	r2, #5
   125c8:	movt	r1, #2
   125cc:	bl	115a4 <dcgettext@plt>
   125d0:	ldr	r3, [sp, #48]	; 0x30
   125d4:	movw	r2, #1930	; 0x78a
   125d8:	str	r0, [sp]
   125dc:	mov	r0, r4
   125e0:	mov	r1, r5
   125e4:	movt	r2, #2
   125e8:	bl	11670 <error@plt>
   125ec:	movw	r2, #9024	; 0x2340
   125f0:	movt	r2, #3
   125f4:	ldrb	r0, [r2, #7]
   125f8:	cmp	r0, #1
   125fc:	beq	124a0 <__assert_fail@plt+0xbb4>
   12600:	ldr	r0, [r2, #20]
   12604:	cmp	r0, #4
   12608:	bhi	124b8 <__assert_fail@plt+0xbcc>
   1260c:	add	r1, pc, #0
   12610:	ldr	pc, [r1, r0, lsl #2]
   12614:	andeq	r2, r1, r8, lsr #12
   12618:	andeq	r2, r1, r8, lsl fp
   1261c:	ldrdeq	r2, [r1], -r0
   12620:	andeq	r2, r1, r8, ror r9
   12624:	andeq	r2, r1, ip, lsr #15
   12628:	ldr	r1, [r2, #28]
   1262c:	ldr	r0, [r2, #32]
   12630:	add	r1, r1, #1
   12634:	str	r1, [r2, #28]
   12638:	mov	r2, #4
   1263c:	bl	1c908 <__assert_fail@plt+0xb01c>
   12640:	movw	r7, #9024	; 0x2340
   12644:	movw	r4, #8568	; 0x2178
   12648:	movt	r7, #3
   1264c:	movt	r4, #3
   12650:	str	r0, [r7, #32]
   12654:	ldr	r1, [r7, #28]
   12658:	add	r2, r0, r1, lsl #2
   1265c:	str	r4, [r2, #-4]
   12660:	ldrb	r2, [r4, #24]
   12664:	cmp	r2, #0
   12668:	bne	13d48 <__assert_fail@plt+0x245c>
   1266c:	mov	r2, #1
   12670:	strb	r2, [r4, #24]
   12674:	ldrb	r2, [r7, #2]
   12678:	cmp	r2, #1
   1267c:	bne	126c0 <__assert_fail@plt+0xdd4>
   12680:	add	r1, r1, #1
   12684:	mov	r2, #4
   12688:	str	r1, [r7, #28]
   1268c:	bl	1c908 <__assert_fail@plt+0xb01c>
   12690:	movw	r7, #9024	; 0x2340
   12694:	add	r3, r4, #28
   12698:	movt	r7, #3
   1269c:	str	r0, [r7, #32]
   126a0:	ldr	r1, [r7, #28]
   126a4:	add	r2, r0, r1, lsl #2
   126a8:	str	r3, [r2, #-4]
   126ac:	ldrb	r2, [r4, #52]	; 0x34
   126b0:	cmp	r2, #0
   126b4:	bne	13d48 <__assert_fail@plt+0x245c>
   126b8:	mov	r2, #1
   126bc:	strb	r2, [r4, #52]	; 0x34
   126c0:	add	r1, r1, #1
   126c4:	mov	r2, #4
   126c8:	str	r1, [r7, #28]
   126cc:	bl	1c908 <__assert_fail@plt+0xb01c>
   126d0:	movw	r7, #9024	; 0x2340
   126d4:	add	r3, r4, #56	; 0x38
   126d8:	movt	r7, #3
   126dc:	str	r0, [r7, #32]
   126e0:	ldr	r1, [r7, #28]
   126e4:	add	r2, r0, r1, lsl #2
   126e8:	str	r3, [r2, #-4]
   126ec:	ldrb	r2, [r4, #80]	; 0x50
   126f0:	cmp	r2, #0
   126f4:	bne	13d48 <__assert_fail@plt+0x245c>
   126f8:	mov	r5, #1
   126fc:	add	r1, r1, #1
   12700:	mov	r2, #4
   12704:	strb	r5, [r4, #80]	; 0x50
   12708:	str	r1, [r7, #28]
   1270c:	bl	1c908 <__assert_fail@plt+0xb01c>
   12710:	movw	r7, #9024	; 0x2340
   12714:	add	r3, r4, #84	; 0x54
   12718:	movt	r7, #3
   1271c:	str	r0, [r7, #32]
   12720:	ldr	r1, [r7, #28]
   12724:	add	r2, r0, r1, lsl #2
   12728:	str	r3, [r2, #-4]
   1272c:	ldrb	r2, [r4, #108]	; 0x6c
   12730:	cmp	r2, #0
   12734:	bne	13d48 <__assert_fail@plt+0x245c>
   12738:	add	r1, r1, #1
   1273c:	mov	r2, #4
   12740:	strb	r5, [r4, #108]	; 0x6c
   12744:	str	r1, [r7, #28]
   12748:	bl	1c908 <__assert_fail@plt+0xb01c>
   1274c:	movw	r7, #9024	; 0x2340
   12750:	add	r3, r4, #112	; 0x70
   12754:	movt	r7, #3
   12758:	str	r0, [r7, #32]
   1275c:	ldr	r1, [r7, #28]
   12760:	add	r2, r0, r1, lsl #2
   12764:	str	r3, [r2, #-4]
   12768:	ldrb	r2, [r4, #136]	; 0x88
   1276c:	cmp	r2, #0
   12770:	beq	12934 <__assert_fail@plt+0x1048>
   12774:	b	13d48 <__assert_fail@plt+0x245c>
   12778:	movw	r0, #1859	; 0x743
   1277c:	movt	r0, #2
   12780:	bl	116a0 <getenv@plt>
   12784:	ldr	r1, [sp, #60]	; 0x3c
   12788:	ldr	r2, [sp, #56]	; 0x38
   1278c:	bl	18608 <__assert_fail@plt+0x6d1c>
   12790:	movw	r2, #9024	; 0x2340
   12794:	movt	r2, #3
   12798:	ldr	r0, [r2, #20]
   1279c:	cmp	r0, #1
   127a0:	cmpne	r0, #4
   127a4:	beq	12214 <__assert_fail@plt+0x928>
   127a8:	b	12524 <__assert_fail@plt+0xc38>
   127ac:	ldr	r0, [r2, #28]
   127b0:	cmp	r0, #0
   127b4:	bne	12ce8 <__assert_fail@plt+0x13fc>
   127b8:	movw	r0, #3309	; 0xced
   127bc:	movt	r0, #2
   127c0:	bl	13e04 <__assert_fail@plt+0x2518>
   127c4:	movw	r2, #9024	; 0x2340
   127c8:	movt	r2, #3
   127cc:	b	12ce8 <__assert_fail@plt+0x13fc>
   127d0:	ldr	r1, [r2, #28]
   127d4:	ldr	r0, [r2, #32]
   127d8:	add	r1, r1, #1
   127dc:	str	r1, [r2, #28]
   127e0:	mov	r2, #4
   127e4:	bl	1c908 <__assert_fail@plt+0xb01c>
   127e8:	movw	r7, #9024	; 0x2340
   127ec:	movw	r4, #8568	; 0x2178
   127f0:	movt	r7, #3
   127f4:	movt	r4, #3
   127f8:	str	r0, [r7, #32]
   127fc:	ldr	r1, [r7, #28]
   12800:	add	r2, r0, r1, lsl #2
   12804:	str	r4, [r2, #-4]
   12808:	ldrb	r2, [r4, #24]
   1280c:	cmp	r2, #0
   12810:	bne	13d48 <__assert_fail@plt+0x245c>
   12814:	mov	r2, #1
   12818:	strb	r2, [r4, #24]
   1281c:	ldrb	r2, [r7, #2]
   12820:	cmp	r2, #1
   12824:	bne	12868 <__assert_fail@plt+0xf7c>
   12828:	add	r1, r1, #1
   1282c:	mov	r2, #4
   12830:	str	r1, [r7, #28]
   12834:	bl	1c908 <__assert_fail@plt+0xb01c>
   12838:	movw	r7, #9024	; 0x2340
   1283c:	add	r3, r4, #28
   12840:	movt	r7, #3
   12844:	str	r0, [r7, #32]
   12848:	ldr	r1, [r7, #28]
   1284c:	add	r2, r0, r1, lsl #2
   12850:	str	r3, [r2, #-4]
   12854:	ldrb	r2, [r4, #52]	; 0x34
   12858:	cmp	r2, #0
   1285c:	bne	13d48 <__assert_fail@plt+0x245c>
   12860:	mov	r2, #1
   12864:	strb	r2, [r4, #52]	; 0x34
   12868:	add	r1, r1, #1
   1286c:	mov	r2, #4
   12870:	str	r1, [r7, #28]
   12874:	bl	1c908 <__assert_fail@plt+0xb01c>
   12878:	movw	r7, #9024	; 0x2340
   1287c:	add	r3, r4, #56	; 0x38
   12880:	movt	r7, #3
   12884:	str	r0, [r7, #32]
   12888:	ldr	r1, [r7, #28]
   1288c:	add	r2, r0, r1, lsl #2
   12890:	str	r3, [r2, #-4]
   12894:	movw	r2, #3007	; 0xbbf
   12898:	movt	r2, #2
   1289c:	str	r2, [r4, #68]	; 0x44
   128a0:	ldrb	r2, [r4, #80]	; 0x50
   128a4:	cmp	r2, #0
   128a8:	bne	13d48 <__assert_fail@plt+0x245c>
   128ac:	mov	r5, #1
   128b0:	add	r1, r1, #1
   128b4:	mov	r2, #4
   128b8:	strb	r5, [r4, #80]	; 0x50
   128bc:	str	r1, [r7, #28]
   128c0:	bl	1c908 <__assert_fail@plt+0xb01c>
   128c4:	movw	r7, #9024	; 0x2340
   128c8:	add	r3, r4, #84	; 0x54
   128cc:	movt	r7, #3
   128d0:	str	r0, [r7, #32]
   128d4:	ldr	r1, [r7, #28]
   128d8:	add	r2, r0, r1, lsl #2
   128dc:	str	r3, [r2, #-4]
   128e0:	ldrb	r2, [r4, #108]	; 0x6c
   128e4:	cmp	r2, #0
   128e8:	bne	13d48 <__assert_fail@plt+0x245c>
   128ec:	add	r1, r1, #1
   128f0:	mov	r2, #4
   128f4:	strb	r5, [r4, #108]	; 0x6c
   128f8:	str	r1, [r7, #28]
   128fc:	bl	1c908 <__assert_fail@plt+0xb01c>
   12900:	movw	r7, #9024	; 0x2340
   12904:	add	r3, r4, #112	; 0x70
   12908:	movt	r7, #3
   1290c:	str	r0, [r7, #32]
   12910:	ldr	r1, [r7, #28]
   12914:	add	r2, r0, r1, lsl #2
   12918:	str	r3, [r2, #-4]
   1291c:	movw	r2, #3012	; 0xbc4
   12920:	movt	r2, #2
   12924:	str	r2, [r4, #124]	; 0x7c
   12928:	ldrb	r2, [r4, #136]	; 0x88
   1292c:	cmp	r2, #0
   12930:	bne	13d48 <__assert_fail@plt+0x245c>
   12934:	mov	r5, #1
   12938:	add	r1, r1, #1
   1293c:	mov	r2, #4
   12940:	strb	r5, [r4, #136]	; 0x88
   12944:	str	r1, [r7, #28]
   12948:	bl	1c908 <__assert_fail@plt+0xb01c>
   1294c:	movw	r7, #9024	; 0x2340
   12950:	add	r3, r4, #140	; 0x8c
   12954:	movt	r7, #3
   12958:	str	r0, [r7, #32]
   1295c:	ldr	r1, [r7, #28]
   12960:	add	r2, r0, r1, lsl #2
   12964:	str	r3, [r2, #-4]
   12968:	ldrb	r2, [r4, #164]	; 0xa4
   1296c:	cmp	r2, #0
   12970:	beq	12b10 <__assert_fail@plt+0x1224>
   12974:	b	13d48 <__assert_fail@plt+0x245c>
   12978:	ldr	r1, [r2, #28]
   1297c:	ldr	r0, [r2, #32]
   12980:	add	r1, r1, #1
   12984:	str	r1, [r2, #28]
   12988:	mov	r2, #4
   1298c:	bl	1c908 <__assert_fail@plt+0xb01c>
   12990:	movw	r7, #9024	; 0x2340
   12994:	movw	r4, #8568	; 0x2178
   12998:	movt	r7, #3
   1299c:	movt	r4, #3
   129a0:	str	r0, [r7, #32]
   129a4:	ldr	r1, [r7, #28]
   129a8:	add	r2, r0, r1, lsl #2
   129ac:	str	r4, [r2, #-4]
   129b0:	ldrb	r2, [r4, #24]
   129b4:	cmp	r2, #0
   129b8:	bne	13d48 <__assert_fail@plt+0x245c>
   129bc:	mov	r2, #1
   129c0:	strb	r2, [r4, #24]
   129c4:	ldrb	r2, [r7, #2]
   129c8:	cmp	r2, #1
   129cc:	bne	12a10 <__assert_fail@plt+0x1124>
   129d0:	add	r1, r1, #1
   129d4:	mov	r2, #4
   129d8:	str	r1, [r7, #28]
   129dc:	bl	1c908 <__assert_fail@plt+0xb01c>
   129e0:	movw	r7, #9024	; 0x2340
   129e4:	add	r3, r4, #28
   129e8:	movt	r7, #3
   129ec:	str	r0, [r7, #32]
   129f0:	ldr	r1, [r7, #28]
   129f4:	add	r2, r0, r1, lsl #2
   129f8:	str	r3, [r2, #-4]
   129fc:	ldrb	r2, [r4, #52]	; 0x34
   12a00:	cmp	r2, #0
   12a04:	bne	13d48 <__assert_fail@plt+0x245c>
   12a08:	mov	r2, #1
   12a0c:	strb	r2, [r4, #52]	; 0x34
   12a10:	add	r1, r1, #1
   12a14:	mov	r2, #4
   12a18:	str	r1, [r7, #28]
   12a1c:	bl	1c908 <__assert_fail@plt+0xb01c>
   12a20:	movw	r7, #9024	; 0x2340
   12a24:	add	r3, r4, #56	; 0x38
   12a28:	movt	r7, #3
   12a2c:	str	r0, [r7, #32]
   12a30:	ldr	r1, [r7, #28]
   12a34:	add	r2, r0, r1, lsl #2
   12a38:	str	r3, [r2, #-4]
   12a3c:	ldrb	r2, [r4, #80]	; 0x50
   12a40:	cmp	r2, #0
   12a44:	bne	13d48 <__assert_fail@plt+0x245c>
   12a48:	mov	r5, #1
   12a4c:	add	r1, r1, #1
   12a50:	mov	r2, #4
   12a54:	strb	r5, [r4, #80]	; 0x50
   12a58:	str	r1, [r7, #28]
   12a5c:	bl	1c908 <__assert_fail@plt+0xb01c>
   12a60:	movw	r7, #9024	; 0x2340
   12a64:	add	r3, r4, #84	; 0x54
   12a68:	movt	r7, #3
   12a6c:	str	r0, [r7, #32]
   12a70:	ldr	r1, [r7, #28]
   12a74:	add	r2, r0, r1, lsl #2
   12a78:	str	r3, [r2, #-4]
   12a7c:	ldrb	r2, [r4, #108]	; 0x6c
   12a80:	cmp	r2, #0
   12a84:	bne	13d48 <__assert_fail@plt+0x245c>
   12a88:	add	r1, r1, #1
   12a8c:	mov	r2, #4
   12a90:	strb	r5, [r4, #108]	; 0x6c
   12a94:	str	r1, [r7, #28]
   12a98:	bl	1c908 <__assert_fail@plt+0xb01c>
   12a9c:	movw	r7, #9024	; 0x2340
   12aa0:	add	r3, r4, #112	; 0x70
   12aa4:	movt	r7, #3
   12aa8:	str	r0, [r7, #32]
   12aac:	ldr	r1, [r7, #28]
   12ab0:	add	r2, r0, r1, lsl #2
   12ab4:	str	r3, [r2, #-4]
   12ab8:	ldrb	r2, [r4, #136]	; 0x88
   12abc:	cmp	r2, #0
   12ac0:	bne	13d48 <__assert_fail@plt+0x245c>
   12ac4:	mov	r5, #1
   12ac8:	add	r1, r1, #1
   12acc:	mov	r2, #4
   12ad0:	strb	r5, [r4, #136]	; 0x88
   12ad4:	str	r1, [r7, #28]
   12ad8:	bl	1c908 <__assert_fail@plt+0xb01c>
   12adc:	movw	r7, #9024	; 0x2340
   12ae0:	add	r3, r4, #140	; 0x8c
   12ae4:	movt	r7, #3
   12ae8:	str	r0, [r7, #32]
   12aec:	ldr	r1, [r7, #28]
   12af0:	add	r2, r0, r1, lsl #2
   12af4:	str	r3, [r2, #-4]
   12af8:	movw	r2, #3251	; 0xcb3
   12afc:	movt	r2, #2
   12b00:	str	r2, [r4, #152]	; 0x98
   12b04:	ldrb	r2, [r4, #164]	; 0xa4
   12b08:	cmp	r2, #0
   12b0c:	bne	13d48 <__assert_fail@plt+0x245c>
   12b10:	strb	r5, [r4, #164]	; 0xa4
   12b14:	b	12ca8 <__assert_fail@plt+0x13bc>
   12b18:	ldr	r1, [r2, #28]
   12b1c:	ldr	r0, [r2, #32]
   12b20:	add	r1, r1, #1
   12b24:	str	r1, [r2, #28]
   12b28:	mov	r2, #4
   12b2c:	bl	1c908 <__assert_fail@plt+0xb01c>
   12b30:	movw	r7, #9024	; 0x2340
   12b34:	movw	r4, #8568	; 0x2178
   12b38:	movt	r7, #3
   12b3c:	movt	r4, #3
   12b40:	str	r0, [r7, #32]
   12b44:	ldr	r1, [r7, #28]
   12b48:	add	r2, r0, r1, lsl #2
   12b4c:	str	r4, [r2, #-4]
   12b50:	ldrb	r2, [r4, #24]
   12b54:	cmp	r2, #0
   12b58:	bne	13d48 <__assert_fail@plt+0x245c>
   12b5c:	mov	r2, #1
   12b60:	strb	r2, [r4, #24]
   12b64:	ldrb	r2, [r7, #2]
   12b68:	cmp	r2, #1
   12b6c:	bne	12bb0 <__assert_fail@plt+0x12c4>
   12b70:	add	r1, r1, #1
   12b74:	mov	r2, #4
   12b78:	str	r1, [r7, #28]
   12b7c:	bl	1c908 <__assert_fail@plt+0xb01c>
   12b80:	movw	r7, #9024	; 0x2340
   12b84:	add	r3, r4, #28
   12b88:	movt	r7, #3
   12b8c:	str	r0, [r7, #32]
   12b90:	ldr	r1, [r7, #28]
   12b94:	add	r2, r0, r1, lsl #2
   12b98:	str	r3, [r2, #-4]
   12b9c:	ldrb	r2, [r4, #52]	; 0x34
   12ba0:	cmp	r2, #0
   12ba4:	bne	13d48 <__assert_fail@plt+0x245c>
   12ba8:	mov	r2, #1
   12bac:	strb	r2, [r4, #52]	; 0x34
   12bb0:	add	r1, r1, #1
   12bb4:	mov	r2, #4
   12bb8:	str	r1, [r7, #28]
   12bbc:	bl	1c908 <__assert_fail@plt+0xb01c>
   12bc0:	movw	r7, #9024	; 0x2340
   12bc4:	add	r3, r4, #168	; 0xa8
   12bc8:	movt	r7, #3
   12bcc:	str	r0, [r7, #32]
   12bd0:	ldr	r1, [r7, #28]
   12bd4:	add	r2, r0, r1, lsl #2
   12bd8:	str	r3, [r2, #-4]
   12bdc:	ldrb	r2, [r4, #192]	; 0xc0
   12be0:	cmp	r2, #0
   12be4:	bne	13d48 <__assert_fail@plt+0x245c>
   12be8:	mov	r5, #1
   12bec:	add	r1, r1, #1
   12bf0:	mov	r2, #4
   12bf4:	strb	r5, [r4, #192]	; 0xc0
   12bf8:	str	r1, [r7, #28]
   12bfc:	bl	1c908 <__assert_fail@plt+0xb01c>
   12c00:	movw	r7, #9024	; 0x2340
   12c04:	add	r3, r4, #196	; 0xc4
   12c08:	movt	r7, #3
   12c0c:	str	r0, [r7, #32]
   12c10:	ldr	r1, [r7, #28]
   12c14:	add	r2, r0, r1, lsl #2
   12c18:	str	r3, [r2, #-4]
   12c1c:	ldrb	r2, [r4, #220]	; 0xdc
   12c20:	cmp	r2, #0
   12c24:	bne	13d48 <__assert_fail@plt+0x245c>
   12c28:	add	r1, r1, #1
   12c2c:	mov	r2, #4
   12c30:	strb	r5, [r4, #220]	; 0xdc
   12c34:	str	r1, [r7, #28]
   12c38:	bl	1c908 <__assert_fail@plt+0xb01c>
   12c3c:	movw	r7, #9024	; 0x2340
   12c40:	add	r3, r4, #224	; 0xe0
   12c44:	movt	r7, #3
   12c48:	str	r0, [r7, #32]
   12c4c:	ldr	r1, [r7, #28]
   12c50:	add	r2, r0, r1, lsl #2
   12c54:	str	r3, [r2, #-4]
   12c58:	ldrb	r2, [r4, #248]	; 0xf8
   12c5c:	cmp	r2, #0
   12c60:	bne	13d48 <__assert_fail@plt+0x245c>
   12c64:	mov	r5, #1
   12c68:	add	r1, r1, #1
   12c6c:	mov	r2, #4
   12c70:	strb	r5, [r4, #248]	; 0xf8
   12c74:	str	r1, [r7, #28]
   12c78:	bl	1c908 <__assert_fail@plt+0xb01c>
   12c7c:	movw	r7, #9024	; 0x2340
   12c80:	add	r3, r4, #252	; 0xfc
   12c84:	movt	r7, #3
   12c88:	str	r0, [r7, #32]
   12c8c:	ldr	r1, [r7, #28]
   12c90:	add	r2, r0, r1, lsl #2
   12c94:	str	r3, [r2, #-4]
   12c98:	ldrb	r2, [r4, #276]	; 0x114
   12c9c:	cmp	r2, #0
   12ca0:	bne	13d48 <__assert_fail@plt+0x245c>
   12ca4:	strb	r5, [r4, #276]	; 0x114
   12ca8:	add	r1, r1, #1
   12cac:	mov	r2, #4
   12cb0:	str	r1, [r7, #28]
   12cb4:	bl	1c908 <__assert_fail@plt+0xb01c>
   12cb8:	movw	r2, #9024	; 0x2340
   12cbc:	movt	r2, #3
   12cc0:	str	r0, [r2, #32]
   12cc4:	ldr	r1, [r2, #28]
   12cc8:	add	r0, r0, r1, lsl #2
   12ccc:	add	r1, r4, #280	; 0x118
   12cd0:	str	r1, [r0, #-4]
   12cd4:	ldrb	r0, [r4, #304]	; 0x130
   12cd8:	cmp	r0, #0
   12cdc:	bne	13d48 <__assert_fail@plt+0x245c>
   12ce0:	mov	r0, #1
   12ce4:	strb	r0, [r4, #304]	; 0x130
   12ce8:	ldr	r1, [r2, #40]	; 0x28
   12cec:	ldr	r0, [r2, #36]	; 0x24
   12cf0:	add	r1, r1, #1
   12cf4:	str	r1, [r2, #40]	; 0x28
   12cf8:	mov	r2, #4
   12cfc:	bl	1c908 <__assert_fail@plt+0xb01c>
   12d00:	movw	r1, #9024	; 0x2340
   12d04:	movt	r1, #3
   12d08:	str	r0, [r1, #36]	; 0x24
   12d0c:	movw	r0, #9024	; 0x2340
   12d10:	mov	r1, #4
   12d14:	movt	r0, #3
   12d18:	ldr	r0, [r0, #28]
   12d1c:	bl	1ca14 <__assert_fail@plt+0xb128>
   12d20:	movw	r7, #9024	; 0x2340
   12d24:	movt	r7, #3
   12d28:	ldr	r1, [r7, #36]	; 0x24
   12d2c:	ldr	r2, [r7, #40]	; 0x28
   12d30:	add	r1, r1, r2, lsl #2
   12d34:	str	r0, [r1, #-4]
   12d38:	ldr	r0, [r7, #28]
   12d3c:	cmp	r0, #0
   12d40:	beq	12ff8 <__assert_fail@plt+0x170c>
   12d44:	ldr	r1, [r7, #32]
   12d48:	movw	r6, #8904	; 0x22c8
   12d4c:	movw	r4, #20372	; 0x4f94
   12d50:	mov	sl, #0
   12d54:	mov	r8, #1000	; 0x3e8
   12d58:	mov	r9, #0
   12d5c:	movt	r6, #3
   12d60:	movt	r4, #1
   12d64:	b	12dd8 <__assert_fail@plt+0x14ec>
   12d68:	movw	r1, #20180	; 0x4ed4
   12d6c:	cmp	r0, #0
   12d70:	mov	r0, r5
   12d74:	movt	r1, #1
   12d78:	moveq	r1, r4
   12d7c:	blx	r1
   12d80:	movw	r0, #9024	; 0x2340
   12d84:	movt	r0, #3
   12d88:	mov	r7, r0
   12d8c:	ldr	r0, [r0, #36]	; 0x24
   12d90:	ldr	r1, [r7, #40]	; 0x28
   12d94:	add	r0, r0, r1, lsl #2
   12d98:	ldr	r1, [fp, #-56]	; 0xffffffc8
   12d9c:	ldr	r0, [r0, #-4]
   12da0:	str	r1, [r0, r9, lsl #2]
   12da4:	mov	r1, #0
   12da8:	ldr	r0, [fp, #-56]	; 0xffffffc8
   12dac:	bl	18d18 <__assert_fail@plt+0x742c>
   12db0:	ldr	r1, [r7, #32]
   12db4:	ldr	r2, [r1, r9, lsl #2]
   12db8:	add	r9, r9, #1
   12dbc:	ldr	r3, [r2, #16]
   12dc0:	cmp	r3, r0
   12dc4:	movhi	r0, r3
   12dc8:	str	r0, [r2, #16]
   12dcc:	ldr	r0, [r7, #28]
   12dd0:	cmp	r9, r0
   12dd4:	bcs	12ff8 <__assert_fail@plt+0x170c>
   12dd8:	str	sl, [fp, #-56]	; 0xffffffc8
   12ddc:	mov	r2, #5
   12de0:	ldr	r0, [r1, r9, lsl #2]
   12de4:	ldr	r1, [r0, #12]
   12de8:	mov	r0, #0
   12dec:	bl	115a4 <dcgettext@plt>
   12df0:	movw	r1, #9024	; 0x2340
   12df4:	mov	r5, r0
   12df8:	movt	r1, #3
   12dfc:	ldr	r0, [r1, #32]
   12e00:	ldr	r0, [r0, r9, lsl #2]
   12e04:	ldr	r0, [r0]
   12e08:	cmp	r0, #2
   12e0c:	bne	12fdc <__assert_fail@plt+0x16f0>
   12e10:	ldr	r0, [r1, #20]
   12e14:	cmp	r0, #4
   12e18:	beq	12e7c <__assert_fail@plt+0x1590>
   12e1c:	cmp	r0, #3
   12e20:	beq	12e34 <__assert_fail@plt+0x1548>
   12e24:	cmp	r0, #0
   12e28:	bne	12fdc <__assert_fail@plt+0x16f0>
   12e2c:	ldr	r0, [r1, #16]
   12e30:	b	12e88 <__assert_fail@plt+0x159c>
   12e34:	ldrd	r0, [r1, #48]	; 0x30
   12e38:	add	r2, sp, #64	; 0x40
   12e3c:	bl	187d0 <__assert_fail@plt+0x6ee4>
   12e40:	movw	r1, #3384	; 0xd38
   12e44:	mov	r4, r0
   12e48:	mov	r0, #0
   12e4c:	mov	r2, #5
   12e50:	movt	r1, #2
   12e54:	bl	115a4 <dcgettext@plt>
   12e58:	mov	r2, r0
   12e5c:	sub	r0, fp, #56	; 0x38
   12e60:	mov	r1, #1
   12e64:	mov	r3, r4
   12e68:	str	r5, [sp]
   12e6c:	bl	11694 <__asprintf_chk@plt>
   12e70:	cmn	r0, #1
   12e74:	streq	sl, [fp, #-56]	; 0xffffffc8
   12e78:	b	12fac <__assert_fail@plt+0x16c0>
   12e7c:	ldr	r0, [r1, #16]
   12e80:	tst	r0, #16
   12e84:	bne	12fdc <__assert_fail@plt+0x16f0>
   12e88:	ldr	r5, [r1, #48]	; 0x30
   12e8c:	ldr	r4, [r1, #52]	; 0x34
   12e90:	str	r0, [sp, #56]	; 0x38
   12e94:	mov	sl, r5
   12e98:	mov	r7, r4
   12e9c:	str	r5, [sp, #48]	; 0x30
   12ea0:	str	r4, [sp, #60]	; 0x3c
   12ea4:	mov	r0, r5
   12ea8:	mov	r1, r4
   12eac:	mov	r2, #1000	; 0x3e8
   12eb0:	mov	r3, #0
   12eb4:	bl	1fd5c <__assert_fail@plt+0xe470>
   12eb8:	umull	r2, r3, r0, r8
   12ebc:	mla	r3, r1, r8, r3
   12ec0:	subs	r2, r5, r2
   12ec4:	lsr	r5, sl, #10
   12ec8:	sbc	r6, r4, r3
   12ecc:	mov	r3, sl
   12ed0:	orr	sl, r5, r7, lsl #22
   12ed4:	lsr	r7, r7, #10
   12ed8:	mov	r5, r0
   12edc:	bfc	r3, #10, #22
   12ee0:	orr	r4, r2, r3
   12ee4:	orrs	r4, r4, r6
   12ee8:	mov	r4, r1
   12eec:	beq	12ea4 <__assert_fail@plt+0x15b8>
   12ef0:	mov	r0, #1
   12ef4:	mov	r1, #184	; 0xb8
   12ef8:	mov	sl, #0
   12efc:	str	r0, [sp]
   12f00:	str	r0, [sp, #8]
   12f04:	orrs	r0, r2, r6
   12f08:	ldr	r2, [sp, #56]	; 0x38
   12f0c:	str	sl, [sp, #4]
   12f10:	str	sl, [sp, #12]
   12f14:	movweq	r1, #152	; 0x98
   12f18:	cmp	r3, #0
   12f1c:	movne	r1, #152	; 0x98
   12f20:	and	r2, r2, #292	; 0x124
   12f24:	orr	r1, r1, r2
   12f28:	mov	r2, r1
   12f2c:	bicne	r2, r2, #32
   12f30:	cmp	r0, #0
   12f34:	mov	r0, #256	; 0x100
   12f38:	movne	r2, r1
   12f3c:	ldr	r1, [sp, #60]	; 0x3c
   12f40:	bic	r0, r0, r2, lsl #3
   12f44:	orr	r3, r0, r2
   12f48:	ldr	r0, [sp, #48]	; 0x30
   12f4c:	add	r2, sp, #64	; 0x40
   12f50:	bl	17718 <__assert_fail@plt+0x5e2c>
   12f54:	movw	r1, #3161	; 0xc59
   12f58:	mov	r4, r0
   12f5c:	mov	r0, #0
   12f60:	mov	r2, #5
   12f64:	movt	r1, #2
   12f68:	bl	115a4 <dcgettext@plt>
   12f6c:	movw	r1, #3384	; 0xd38
   12f70:	mov	r5, r0
   12f74:	mov	r0, #0
   12f78:	mov	r2, #5
   12f7c:	movt	r1, #2
   12f80:	bl	115a4 <dcgettext@plt>
   12f84:	mov	r2, r0
   12f88:	sub	r0, fp, #56	; 0x38
   12f8c:	mov	r1, #1
   12f90:	mov	r3, r4
   12f94:	str	r5, [sp]
   12f98:	bl	11694 <__asprintf_chk@plt>
   12f9c:	movw	r6, #8904	; 0x22c8
   12fa0:	cmn	r0, #1
   12fa4:	streq	sl, [fp, #-56]	; 0xffffffc8
   12fa8:	movt	r6, #3
   12fac:	ldr	r5, [fp, #-56]	; 0xffffffc8
   12fb0:	movw	r4, #20372	; 0x4f94
   12fb4:	movt	r4, #1
   12fb8:	cmp	r5, #0
   12fbc:	beq	13ce0 <__assert_fail@plt+0x23f4>
   12fc0:	ldr	r0, [r6]
   12fc4:	cmn	r0, #1
   12fc8:	bgt	12d68 <__assert_fail@plt+0x147c>
   12fcc:	mov	r0, #1
   12fd0:	bl	118a4 <isatty@plt>
   12fd4:	str	r0, [r6]
   12fd8:	b	12d68 <__assert_fail@plt+0x147c>
   12fdc:	mov	r0, r5
   12fe0:	bl	115b0 <strdup@plt>
   12fe4:	mov	r5, r0
   12fe8:	str	r0, [fp, #-56]	; 0xffffffc8
   12fec:	cmp	r5, #0
   12ff0:	bne	12fc0 <__assert_fail@plt+0x16d4>
   12ff4:	b	13ce0 <__assert_fail@plt+0x23f4>
   12ff8:	ldr	r0, [sp, #24]
   12ffc:	cmp	r0, #0
   13000:	beq	136f8 <__assert_fail@plt+0x1e0c>
   13004:	mov	r0, #1
   13008:	strb	r0, [r7, #1]
   1300c:	movw	r0, #9000	; 0x2328
   13010:	movt	r0, #3
   13014:	ldr	r8, [r0]
   13018:	ldr	r0, [sp, #52]	; 0x34
   1301c:	cmp	r8, r0
   13020:	blt	13098 <__assert_fail@plt+0x17ac>
   13024:	b	13b00 <__assert_fail@plt+0x2214>
   13028:	ldr	r0, [sp, #20]
   1302c:	bl	160c4 <__assert_fail@plt+0x47d8>
   13030:	ldr	r9, [sp, #28]
   13034:	cmp	r9, #0
   13038:	beq	13304 <__assert_fail@plt+0x1a18>
   1303c:	ldrb	r0, [r9, #24]
   13040:	ldr	r1, [r9, #12]
   13044:	ldrd	r2, [r9]
   13048:	mov	r7, #0
   1304c:	str	r7, [sp, #16]
   13050:	str	r7, [sp, #12]
   13054:	str	r1, [sp]
   13058:	ubfx	r1, r0, #1, #1
   1305c:	and	r0, r0, #1
   13060:	str	r0, [sp, #4]
   13064:	mov	r0, r2
   13068:	ldr	r2, [sp, #36]	; 0x24
   1306c:	str	r1, [sp, #8]
   13070:	mov	r1, r3
   13074:	mov	r3, #0
   13078:	bl	14160 <__assert_fail@plt+0x2874>
   1307c:	ldr	r8, [sp, #32]
   13080:	movw	r7, #9024	; 0x2340
   13084:	movt	r7, #3
   13088:	ldr	r0, [sp, #52]	; 0x34
   1308c:	add	r8, r8, #1
   13090:	cmp	r8, r0
   13094:	beq	13b00 <__assert_fail@plt+0x2214>
   13098:	ldr	r0, [sp, #44]	; 0x2c
   1309c:	ldr	r5, [r0, r8, lsl #2]
   130a0:	cmp	r5, #0
   130a4:	beq	13088 <__assert_fail@plt+0x179c>
   130a8:	movw	r0, #9000	; 0x2328
   130ac:	ldr	r1, [sp, #24]
   130b0:	mov	r2, #104	; 0x68
   130b4:	str	r5, [sp, #36]	; 0x24
   130b8:	movt	r0, #3
   130bc:	ldr	r0, [r0]
   130c0:	sub	r0, r8, r0
   130c4:	mla	r0, r0, r2, r1
   130c8:	str	r0, [sp, #60]	; 0x3c
   130cc:	ldr	r0, [r0, #16]
   130d0:	and	r0, r0, #45056	; 0xb000
   130d4:	orr	r0, r0, #16384	; 0x4000
   130d8:	cmp	r0, #24576	; 0x6000
   130dc:	bne	13374 <__assert_fail@plt+0x1a88>
   130e0:	mov	r0, r5
   130e4:	str	r8, [sp, #32]
   130e8:	bl	1185c <canonicalize_file_name@plt>
   130ec:	mov	r1, r0
   130f0:	cmp	r0, #0
   130f4:	mov	r8, r5
   130f8:	beq	1310c <__assert_fail@plt+0x1820>
   130fc:	ldrb	r0, [r1]
   13100:	mov	r8, r1
   13104:	cmp	r0, #47	; 0x2f
   13108:	movne	r8, r5
   1310c:	movw	r0, #9024	; 0x2340
   13110:	movt	r0, #3
   13114:	ldr	r9, [r0, #24]
   13118:	cmp	r9, #0
   1311c:	beq	132f4 <__assert_fail@plt+0x1a08>
   13120:	mov	r0, #0
   13124:	str	r1, [sp, #20]
   13128:	str	r0, [sp, #28]
   1312c:	mvn	r0, #0
   13130:	str	r0, [sp, #48]	; 0x30
   13134:	mov	r0, #0
   13138:	str	r0, [sp, #56]	; 0x38
   1313c:	mov	r0, #0
   13140:	str	r0, [sp, #40]	; 0x28
   13144:	b	1316c <__assert_fail@plt+0x1880>
   13148:	mov	r0, #1
   1314c:	str	r0, [sp, #40]	; 0x28
   13150:	mov	r0, r6
   13154:	bl	160c4 <__assert_fail@plt+0x47d8>
   13158:	mov	r0, r5
   1315c:	bl	160c4 <__assert_fail@plt+0x47d8>
   13160:	ldr	r9, [r9, #28]
   13164:	cmp	r9, #0
   13168:	beq	13028 <__assert_fail@plt+0x173c>
   1316c:	ldr	r7, [r9]
   13170:	mov	r0, r7
   13174:	bl	1185c <canonicalize_file_name@plt>
   13178:	mov	r5, r0
   1317c:	cmp	r0, #0
   13180:	beq	13190 <__assert_fail@plt+0x18a4>
   13184:	ldrb	r0, [r5]
   13188:	cmp	r0, #47	; 0x2f
   1318c:	moveq	r7, r5
   13190:	mov	r0, r8
   13194:	mov	r1, r7
   13198:	bl	11520 <strcmp@plt>
   1319c:	cmp	r0, #0
   131a0:	bne	13158 <__assert_fail@plt+0x186c>
   131a4:	movw	r0, #9024	; 0x2340
   131a8:	ldr	sl, [r9, #4]
   131ac:	movt	r0, #3
   131b0:	ldr	r6, [r0, #24]
   131b4:	cmp	r6, #0
   131b8:	beq	13248 <__assert_fail@plt+0x195c>
   131bc:	mov	r4, #0
   131c0:	ldr	r0, [r6, #4]
   131c4:	mov	r1, sl
   131c8:	bl	11520 <strcmp@plt>
   131cc:	cmp	r0, #0
   131d0:	moveq	r4, r6
   131d4:	ldr	r6, [r6, #28]
   131d8:	cmp	r6, #0
   131dc:	bne	131c0 <__assert_fail@plt+0x18d4>
   131e0:	cmp	r4, #0
   131e4:	beq	13248 <__assert_fail@plt+0x195c>
   131e8:	ldr	r0, [r4]
   131ec:	bl	1185c <canonicalize_file_name@plt>
   131f0:	mov	r6, r0
   131f4:	cmp	r0, #0
   131f8:	beq	13208 <__assert_fail@plt+0x191c>
   131fc:	ldrb	r0, [r6]
   13200:	cmp	r0, #47	; 0x2f
   13204:	beq	1321c <__assert_fail@plt+0x1930>
   13208:	mov	r0, r6
   1320c:	bl	160c4 <__assert_fail@plt+0x47d8>
   13210:	ldr	r0, [r4]
   13214:	bl	1ce48 <__assert_fail@plt+0xb55c>
   13218:	mov	r6, r0
   1321c:	mov	r0, r6
   13220:	mov	r1, r7
   13224:	bl	11520 <strcmp@plt>
   13228:	ldr	sl, [r9, #4]
   1322c:	mov	r4, r0
   13230:	mov	r0, sl
   13234:	bl	11718 <strlen@plt>
   13238:	cmp	r4, #0
   1323c:	bne	13148 <__assert_fail@plt+0x185c>
   13240:	mov	r7, r0
   13244:	b	13258 <__assert_fail@plt+0x196c>
   13248:	mov	r0, sl
   1324c:	bl	11718 <strlen@plt>
   13250:	mov	r7, r0
   13254:	mov	r6, #0
   13258:	mov	r0, #0
   1325c:	str	r0, [sp, #40]	; 0x28
   13260:	ldr	r0, [sp, #48]	; 0x30
   13264:	cmp	r7, r0
   13268:	bcc	1327c <__assert_fail@plt+0x1990>
   1326c:	ldr	r0, [sp, #56]	; 0x38
   13270:	eor	r0, r0, #1
   13274:	tst	r0, #1
   13278:	beq	13150 <__assert_fail@plt+0x1864>
   1327c:	ldr	r0, [sp, #48]	; 0x30
   13280:	mov	r1, sl
   13284:	add	r2, sp, #64	; 0x40
   13288:	mov	r4, #0
   1328c:	cmp	r7, r0
   13290:	mov	r0, #3
   13294:	movwcc	r4, #1
   13298:	bl	11898 <__xstat64@plt>
   1329c:	ldr	r2, [sp, #56]	; 0x38
   132a0:	clz	r1, r0
   132a4:	cmp	r0, #0
   132a8:	lsr	r1, r1, #5
   132ac:	orr	r2, r2, r1
   132b0:	str	r2, [sp, #56]	; 0x38
   132b4:	beq	132c8 <__assert_fail@plt+0x19dc>
   132b8:	ldr	r0, [sp, #56]	; 0x38
   132bc:	eor	r0, r0, #1
   132c0:	ands	r0, r4, r0
   132c4:	beq	13150 <__assert_fail@plt+0x1864>
   132c8:	cmp	r7, #1
   132cc:	str	r9, [sp, #28]
   132d0:	str	r7, [sp, #48]	; 0x30
   132d4:	bne	13150 <__assert_fail@plt+0x1864>
   132d8:	mov	r0, r6
   132dc:	bl	160c4 <__assert_fail@plt+0x47d8>
   132e0:	mov	r0, r5
   132e4:	bl	160c4 <__assert_fail@plt+0x47d8>
   132e8:	ldr	r0, [sp, #20]
   132ec:	bl	160c4 <__assert_fail@plt+0x47d8>
   132f0:	b	1303c <__assert_fail@plt+0x1750>
   132f4:	mov	r0, r1
   132f8:	bl	160c4 <__assert_fail@plt+0x47d8>
   132fc:	ldr	r8, [sp, #32]
   13300:	b	13374 <__assert_fail@plt+0x1a88>
   13304:	ldr	r0, [sp, #40]	; 0x28
   13308:	ldr	r8, [sp, #32]
   1330c:	ldr	r5, [sp, #36]	; 0x24
   13310:	tst	r0, #1
   13314:	beq	13374 <__assert_fail@plt+0x1a88>
   13318:	movw	r1, #3390	; 0xd3e
   1331c:	mov	r0, #0
   13320:	mov	r2, #5
   13324:	movt	r1, #2
   13328:	bl	115a4 <dcgettext@plt>
   1332c:	mov	r4, r0
   13330:	mov	r0, #4
   13334:	mov	r1, r5
   13338:	bl	1bb10 <__assert_fail@plt+0xa224>
   1333c:	mov	r3, r0
   13340:	mov	r0, #0
   13344:	mov	r1, #0
   13348:	mov	r2, r4
   1334c:	bl	11670 <error@plt>
   13350:	movw	r7, #9024	; 0x2340
   13354:	mov	r0, #1
   13358:	movt	r7, #3
   1335c:	strb	r0, [r7, #4]
   13360:	ldr	r0, [sp, #52]	; 0x34
   13364:	add	r8, r8, #1
   13368:	cmp	r8, r0
   1336c:	bne	13098 <__assert_fail@plt+0x17ac>
   13370:	b	13b00 <__assert_fail@plt+0x2214>
   13374:	mov	r0, r5
   13378:	bl	1185c <canonicalize_file_name@plt>
   1337c:	mov	sl, r0
   13380:	cmp	r0, #0
   13384:	beq	134dc <__assert_fail@plt+0x1bf0>
   13388:	ldrb	r0, [sl]
   1338c:	cmp	r0, #47	; 0x2f
   13390:	bne	134dc <__assert_fail@plt+0x1bf0>
   13394:	mov	r0, sl
   13398:	str	r8, [sp, #32]
   1339c:	bl	11718 <strlen@plt>
   133a0:	mov	r8, r0
   133a4:	movw	r0, #9024	; 0x2340
   133a8:	movt	r0, #3
   133ac:	ldr	r6, [r0, #24]
   133b0:	cmp	r6, #0
   133b4:	beq	136e8 <__assert_fail@plt+0x1dfc>
   133b8:	mov	r9, #0
   133bc:	mov	r5, #0
   133c0:	b	133ec <__assert_fail@plt+0x1b00>
   133c4:	ldr	r4, [r6, #4]
   133c8:	mov	r0, r4
   133cc:	bl	11718 <strlen@plt>
   133d0:	cmp	r5, r0
   133d4:	movls	r7, r0
   133d8:	cmpls	r0, r8
   133dc:	bls	13428 <__assert_fail@plt+0x1b3c>
   133e0:	ldr	r6, [r6, #28]
   133e4:	cmp	r6, #0
   133e8:	beq	13470 <__assert_fail@plt+0x1b84>
   133ec:	ldr	r0, [r6, #12]
   133f0:	movw	r1, #3439	; 0xd6f
   133f4:	movt	r1, #2
   133f8:	bl	11520 <strcmp@plt>
   133fc:	cmp	r0, #0
   13400:	beq	133e0 <__assert_fail@plt+0x1af4>
   13404:	cmp	r9, #0
   13408:	beq	133c4 <__assert_fail@plt+0x1ad8>
   1340c:	ldrb	r0, [r9, #24]
   13410:	tst	r0, #1
   13414:	bne	133c4 <__assert_fail@plt+0x1ad8>
   13418:	ldrb	r0, [r6, #24]
   1341c:	tst	r0, #1
   13420:	beq	133c4 <__assert_fail@plt+0x1ad8>
   13424:	b	133e0 <__assert_fail@plt+0x1af4>
   13428:	cmp	r7, #1
   1342c:	beq	1345c <__assert_fail@plt+0x1b70>
   13430:	cmp	r7, r8
   13434:	beq	13444 <__assert_fail@plt+0x1b58>
   13438:	ldrb	r0, [sl, r7]
   1343c:	cmp	r0, #47	; 0x2f
   13440:	bne	133e0 <__assert_fail@plt+0x1af4>
   13444:	mov	r0, r4
   13448:	mov	r1, sl
   1344c:	mov	r2, r7
   13450:	bl	118b0 <strncmp@plt>
   13454:	cmp	r0, #0
   13458:	bne	133e0 <__assert_fail@plt+0x1af4>
   1345c:	mov	r5, r7
   13460:	mov	r9, r6
   13464:	ldr	r6, [r6, #28]
   13468:	cmp	r6, #0
   1346c:	bne	133ec <__assert_fail@plt+0x1b00>
   13470:	mov	r0, sl
   13474:	bl	160c4 <__assert_fail@plt+0x47d8>
   13478:	ldr	r8, [sp, #32]
   1347c:	ldr	r5, [sp, #36]	; 0x24
   13480:	movw	r7, #9024	; 0x2340
   13484:	cmp	r9, #0
   13488:	mvn	sl, #0
   1348c:	mvn	r6, #1
   13490:	movt	r7, #3
   13494:	beq	134f4 <__assert_fail@plt+0x1c08>
   13498:	ldr	r1, [r9, #4]
   1349c:	mov	r0, #3
   134a0:	add	r2, sp, #64	; 0x40
   134a4:	bl	11898 <__xstat64@plt>
   134a8:	movw	r7, #9024	; 0x2340
   134ac:	cmp	r0, #0
   134b0:	movt	r7, #3
   134b4:	bne	134f4 <__assert_fail@plt+0x1c08>
   134b8:	ldr	r0, [sp, #60]	; 0x3c
   134bc:	ldr	r2, [sp, #64]	; 0x40
   134c0:	ldr	r3, [sp, #68]	; 0x44
   134c4:	ldrd	r0, [r0]
   134c8:	eor	r1, r3, r1
   134cc:	eor	r0, r2, r0
   134d0:	orrs	r0, r0, r1
   134d4:	beq	13654 <__assert_fail@plt+0x1d68>
   134d8:	b	134f4 <__assert_fail@plt+0x1c08>
   134dc:	mov	r0, sl
   134e0:	bl	160c4 <__assert_fail@plt+0x47d8>
   134e4:	movw	r7, #9024	; 0x2340
   134e8:	movt	r7, #3
   134ec:	mvn	sl, #0
   134f0:	mvn	r6, #1
   134f4:	ldr	r4, [r7, #24]
   134f8:	cmp	r4, #0
   134fc:	beq	13698 <__assert_fail@plt+0x1dac>
   13500:	mov	r9, #0
   13504:	mov	r7, r4
   13508:	adds	r1, r6, #1
   1350c:	mov	r5, r9
   13510:	ldr	r0, [r7, #16]!
   13514:	adc	r3, sl, #0
   13518:	eor	r2, r0, r1
   1351c:	ldr	r1, [r7, #4]
   13520:	eor	r3, r1, r3
   13524:	orrs	r2, r2, r3
   13528:	bne	135ac <__assert_fail@plt+0x1cc0>
   1352c:	ldr	r1, [r4, #4]
   13530:	mov	r0, #3
   13534:	add	r2, sp, #64	; 0x40
   13538:	bl	11898 <__xstat64@plt>
   1353c:	cmp	r0, #0
   13540:	beq	135a0 <__assert_fail@plt+0x1cb4>
   13544:	bl	11748 <__errno_location@plt>
   13548:	ldr	r0, [r0]
   1354c:	mvn	r1, #0
   13550:	cmp	r0, #5
   13554:	mvn	r0, #1
   13558:	bne	135a8 <__assert_fail@plt+0x1cbc>
   1355c:	ldr	r2, [r4, #4]
   13560:	mov	r0, #0
   13564:	mov	r1, #3
   13568:	bl	1bd8c <__assert_fail@plt+0xa4a0>
   1356c:	movw	r2, #5996	; 0x176c
   13570:	mov	r3, r0
   13574:	mov	r0, #0
   13578:	mov	r1, #5
   1357c:	movt	r2, #2
   13580:	bl	11670 <error@plt>
   13584:	movw	r0, #9024	; 0x2340
   13588:	mov	r1, #1
   1358c:	movt	r0, #3
   13590:	strb	r1, [r0, #4]
   13594:	mvn	r0, #1
   13598:	mvn	r1, #0
   1359c:	b	135a8 <__assert_fail@plt+0x1cbc>
   135a0:	ldr	r0, [sp, #64]	; 0x40
   135a4:	ldr	r1, [sp, #68]	; 0x44
   135a8:	strd	r0, [r7]
   135ac:	ldr	r2, [sp, #60]	; 0x3c
   135b0:	ldrd	r2, [r2]
   135b4:	eor	r1, r3, r1
   135b8:	eor	r0, r2, r0
   135bc:	orrs	r0, r0, r1
   135c0:	bne	13638 <__assert_fail@plt+0x1d4c>
   135c4:	ldr	r0, [r4, #12]
   135c8:	movw	r1, #3439	; 0xd6f
   135cc:	movt	r1, #2
   135d0:	bl	11520 <strcmp@plt>
   135d4:	cmp	r0, #0
   135d8:	beq	13638 <__assert_fail@plt+0x1d4c>
   135dc:	cmp	r5, #0
   135e0:	beq	135fc <__assert_fail@plt+0x1d10>
   135e4:	ldrb	r0, [r5, #24]
   135e8:	tst	r0, #1
   135ec:	bne	135fc <__assert_fail@plt+0x1d10>
   135f0:	ldrb	r0, [r4, #24]
   135f4:	tst	r0, #1
   135f8:	bne	13638 <__assert_fail@plt+0x1d4c>
   135fc:	ldr	r1, [r4, #4]
   13600:	mov	r0, #3
   13604:	add	r2, sp, #64	; 0x40
   13608:	bl	11898 <__xstat64@plt>
   1360c:	cmp	r0, #0
   13610:	bne	13634 <__assert_fail@plt+0x1d48>
   13614:	ldrd	r0, [r7]
   13618:	ldr	r2, [sp, #64]	; 0x40
   1361c:	ldr	r3, [sp, #68]	; 0x44
   13620:	mov	r9, r4
   13624:	eor	r1, r3, r1
   13628:	eor	r0, r2, r0
   1362c:	orrs	r0, r0, r1
   13630:	beq	1363c <__assert_fail@plt+0x1d50>
   13634:	stm	r7, {r6, sl}
   13638:	mov	r9, r5
   1363c:	ldr	r4, [r4, #28]
   13640:	cmp	r4, #0
   13644:	bne	13504 <__assert_fail@plt+0x1c18>
   13648:	ldr	r5, [sp, #36]	; 0x24
   1364c:	cmp	r9, #0
   13650:	beq	13698 <__assert_fail@plt+0x1dac>
   13654:	ldrb	r0, [r9, #24]
   13658:	ldr	r1, [r9, #12]
   1365c:	ldrd	r2, [r9]
   13660:	mov	r7, #0
   13664:	str	r7, [sp, #16]
   13668:	str	r7, [sp, #12]
   1366c:	str	r1, [sp]
   13670:	ubfx	r1, r0, #1, #1
   13674:	and	r0, r0, #1
   13678:	str	r1, [sp, #8]
   1367c:	str	r0, [sp, #4]
   13680:	mov	r0, r2
   13684:	mov	r1, r3
   13688:	mov	r2, r5
   1368c:	mov	r3, r5
   13690:	bl	14160 <__assert_fail@plt+0x2874>
   13694:	b	13080 <__assert_fail@plt+0x1794>
   13698:	ldr	r1, [sp, #60]	; 0x3c
   1369c:	mov	r0, r5
   136a0:	bl	15014 <__assert_fail@plt+0x3728>
   136a4:	cmp	r0, #0
   136a8:	beq	13080 <__assert_fail@plt+0x1794>
   136ac:	mov	r4, r0
   136b0:	mov	r0, #0
   136b4:	mov	r2, r5
   136b8:	mov	r3, #0
   136bc:	str	r0, [sp]
   136c0:	str	r0, [sp, #4]
   136c4:	str	r0, [sp, #8]
   136c8:	str	r0, [sp, #12]
   136cc:	str	r0, [sp, #16]
   136d0:	mov	r0, #0
   136d4:	mov	r1, r4
   136d8:	bl	14160 <__assert_fail@plt+0x2874>
   136dc:	mov	r0, r4
   136e0:	bl	160c4 <__assert_fail@plt+0x47d8>
   136e4:	b	13080 <__assert_fail@plt+0x1794>
   136e8:	mov	r0, sl
   136ec:	bl	160c4 <__assert_fail@plt+0x47d8>
   136f0:	ldr	r8, [sp, #32]
   136f4:	b	134e4 <__assert_fail@plt+0x1bf8>
   136f8:	ldr	r1, [r7, #24]
   136fc:	ldrb	r8, [r7]
   13700:	mov	r0, #0
   13704:	cmp	r1, #0
   13708:	beq	1371c <__assert_fail@plt+0x1e30>
   1370c:	ldr	r1, [r1, #28]
   13710:	add	r0, r0, #1
   13714:	cmp	r1, #0
   13718:	bne	1370c <__assert_fail@plt+0x1e20>
   1371c:	movw	r1, #20496	; 0x5010
   13720:	movw	r2, #20432	; 0x4fd0
   13724:	movw	r3, #20464	; 0x4ff0
   13728:	mov	sl, #0
   1372c:	movt	r1, #1
   13730:	movt	r2, #1
   13734:	movt	r3, #1
   13738:	str	r1, [sp]
   1373c:	mov	r1, #0
   13740:	bl	166fc <__assert_fail@plt+0x4e10>
   13744:	movw	r7, #9024	; 0x2340
   13748:	cmp	r0, #0
   1374c:	movt	r7, #3
   13750:	str	r0, [r7, #44]	; 0x2c
   13754:	beq	13ce0 <__assert_fail@plt+0x23f4>
   13758:	ldr	r6, [r7, #24]
   1375c:	cmp	r6, #0
   13760:	beq	13a50 <__assert_fail@plt+0x2164>
   13764:	mov	sl, #0
   13768:	ldrb	r0, [r6, #24]
   1376c:	tst	r0, #2
   13770:	beq	13780 <__assert_fail@plt+0x1e94>
   13774:	ldrb	r1, [r7, #6]
   13778:	cmp	r1, #0
   1377c:	bne	13918 <__assert_fail@plt+0x202c>
   13780:	tst	r0, #1
   13784:	beq	137a0 <__assert_fail@plt+0x1eb4>
   13788:	ldrb	r0, [r7]
   1378c:	cmp	r0, #0
   13790:	bne	137a0 <__assert_fail@plt+0x1eb4>
   13794:	ldrb	r0, [r7, #1]
   13798:	cmp	r0, #1
   1379c:	bne	13918 <__assert_fail@plt+0x202c>
   137a0:	ldr	r4, [r6, #12]
   137a4:	cmp	r4, #0
   137a8:	ldrne	r5, [r7, #8]
   137ac:	cmpne	r5, #0
   137b0:	bne	138f0 <__assert_fail@plt+0x2004>
   137b4:	cmp	r4, #0
   137b8:	beq	137e8 <__assert_fail@plt+0x1efc>
   137bc:	ldr	r5, [r7, #12]
   137c0:	cmp	r5, #0
   137c4:	beq	137e8 <__assert_fail@plt+0x1efc>
   137c8:	ldr	r1, [r5]
   137cc:	mov	r0, r4
   137d0:	bl	11520 <strcmp@plt>
   137d4:	cmp	r0, #0
   137d8:	beq	13918 <__assert_fail@plt+0x202c>
   137dc:	ldr	r5, [r5, #4]
   137e0:	cmp	r5, #0
   137e4:	bne	137c8 <__assert_fail@plt+0x1edc>
   137e8:	ldr	r1, [r6, #4]
   137ec:	mov	r0, #3
   137f0:	add	r2, sp, #64	; 0x40
   137f4:	bl	11898 <__xstat64@plt>
   137f8:	movw	r1, #9024	; 0x2340
   137fc:	cmn	r0, #1
   13800:	movt	r1, #3
   13804:	beq	13918 <__assert_fail@plt+0x202c>
   13808:	ldr	r0, [r1, #44]	; 0x2c
   1380c:	cmp	r0, #0
   13810:	beq	13924 <__assert_fail@plt+0x2038>
   13814:	ldr	r1, [sp, #64]	; 0x40
   13818:	ldr	r2, [sp, #68]	; 0x44
   1381c:	str	r1, [fp, #-56]	; 0xffffffc8
   13820:	sub	r1, fp, #56	; 0x38
   13824:	str	r2, [fp, #-52]	; 0xffffffcc
   13828:	bl	16428 <__assert_fail@plt+0x4b3c>
   1382c:	cmp	r0, #0
   13830:	beq	13924 <__assert_fail@plt+0x2038>
   13834:	ldr	r4, [r0, #16]
   13838:	cmp	r4, #0
   1383c:	beq	13924 <__assert_fail@plt+0x2038>
   13840:	ldr	r9, [r4, #8]
   13844:	ldr	r0, [r9, #4]
   13848:	str	r0, [sp, #52]	; 0x34
   1384c:	bl	11718 <strlen@plt>
   13850:	str	r0, [sp, #60]	; 0x3c
   13854:	ldr	r0, [r6, #4]
   13858:	str	r0, [sp, #48]	; 0x30
   1385c:	bl	11718 <strlen@plt>
   13860:	str	r0, [sp, #56]	; 0x38
   13864:	ldr	r0, [r9, #8]
   13868:	mov	r7, #0
   1386c:	cmp	r0, #0
   13870:	beq	13978 <__assert_fail@plt+0x208c>
   13874:	ldr	r5, [r6, #8]
   13878:	movw	r1, #9024	; 0x2340
   1387c:	movt	r1, #3
   13880:	cmp	r5, #0
   13884:	beq	138b4 <__assert_fail@plt+0x1fc8>
   13888:	bl	11718 <strlen@plt>
   1388c:	mov	r7, r8
   13890:	mov	r8, r0
   13894:	mov	r0, r5
   13898:	bl	11718 <strlen@plt>
   1389c:	movw	r1, #9024	; 0x2340
   138a0:	cmp	r8, r0
   138a4:	mov	r8, r7
   138a8:	mov	r7, #0
   138ac:	movt	r1, #3
   138b0:	movwcc	r7, #1
   138b4:	ldrb	r0, [r1, #5]
   138b8:	cmp	r0, #0
   138bc:	bne	1398c <__assert_fail@plt+0x20a0>
   138c0:	ldrb	r0, [r6, #24]
   138c4:	tst	r0, #2
   138c8:	beq	1398c <__assert_fail@plt+0x20a0>
   138cc:	ldrb	r0, [r9, #24]
   138d0:	tst	r0, #2
   138d4:	beq	1398c <__assert_fail@plt+0x20a0>
   138d8:	ldr	r1, [r6]
   138dc:	ldr	r0, [r9]
   138e0:	bl	11520 <strcmp@plt>
   138e4:	cmp	r0, #0
   138e8:	bne	13924 <__assert_fail@plt+0x2038>
   138ec:	b	1398c <__assert_fail@plt+0x20a0>
   138f0:	ldr	r1, [r5]
   138f4:	mov	r0, r4
   138f8:	bl	11520 <strcmp@plt>
   138fc:	movw	r7, #9024	; 0x2340
   13900:	cmp	r0, #0
   13904:	movt	r7, #3
   13908:	beq	137b4 <__assert_fail@plt+0x1ec8>
   1390c:	ldr	r5, [r5, #4]
   13910:	cmp	r5, #0
   13914:	bne	138f0 <__assert_fail@plt+0x2004>
   13918:	ldrd	r0, [r6, #16]
   1391c:	str	r1, [sp, #68]	; 0x44
   13920:	str	r0, [sp, #64]	; 0x40
   13924:	mov	r0, #24
   13928:	bl	1c944 <__assert_fail@plt+0xb058>
   1392c:	mov	r4, r0
   13930:	ldr	r0, [sp, #64]	; 0x40
   13934:	ldr	r1, [sp, #68]	; 0x44
   13938:	stm	r4, {r0, r1, r6, sl}
   1393c:	movw	r0, #9024	; 0x2340
   13940:	mov	r1, r4
   13944:	movt	r0, #3
   13948:	ldr	r0, [r0, #44]	; 0x2c
   1394c:	bl	17358 <__assert_fail@plt+0x5a6c>
   13950:	cmp	r0, #0
   13954:	beq	13ce0 <__assert_fail@plt+0x23f4>
   13958:	str	r4, [r0, #16]
   1395c:	mov	sl, r4
   13960:	ldr	r6, [r6, #28]
   13964:	movw	r7, #9024	; 0x2340
   13968:	cmp	r6, #0
   1396c:	movt	r7, #3
   13970:	bne	13768 <__assert_fail@plt+0x1e7c>
   13974:	b	13a50 <__assert_fail@plt+0x2164>
   13978:	movw	r1, #9024	; 0x2340
   1397c:	movt	r1, #3
   13980:	ldrb	r0, [r1, #5]
   13984:	cmp	r0, #0
   13988:	beq	138c0 <__assert_fail@plt+0x1fd4>
   1398c:	ldr	r5, [r6]
   13990:	mov	r1, #47	; 0x2f
   13994:	mov	r0, r5
   13998:	bl	11724 <strchr@plt>
   1399c:	cmp	r0, #0
   139a0:	beq	139b8 <__assert_fail@plt+0x20cc>
   139a4:	ldr	r0, [r9]
   139a8:	mov	r1, #47	; 0x2f
   139ac:	bl	11724 <strchr@plt>
   139b0:	cmp	r0, #0
   139b4:	beq	13a08 <__assert_fail@plt+0x211c>
   139b8:	ldr	r0, [sp, #60]	; 0x3c
   139bc:	ldr	r1, [sp, #56]	; 0x38
   139c0:	cmp	r0, r1
   139c4:	mov	r0, #0
   139c8:	eor	r1, r7, #1
   139cc:	movwhi	r0, #1
   139d0:	tst	r0, r1
   139d4:	bne	13a20 <__assert_fail@plt+0x2134>
   139d8:	ldr	r0, [r9]
   139dc:	mov	r1, r5
   139e0:	bl	11520 <strcmp@plt>
   139e4:	cmp	r0, #0
   139e8:	mov	r0, r6
   139ec:	beq	13a30 <__assert_fail@plt+0x2144>
   139f0:	ldr	r0, [sp, #48]	; 0x30
   139f4:	ldr	r1, [sp, #52]	; 0x34
   139f8:	bl	11520 <strcmp@plt>
   139fc:	cmp	r0, #0
   13a00:	mov	r0, r6
   13a04:	bne	13a30 <__assert_fail@plt+0x2144>
   13a08:	str	r6, [r4, #8]
   13a0c:	mov	r0, r9
   13a10:	ldr	r6, [r6, #28]
   13a14:	cmp	r8, #0
   13a18:	bne	13964 <__assert_fail@plt+0x2078>
   13a1c:	b	13a3c <__assert_fail@plt+0x2150>
   13a20:	cmp	r9, #0
   13a24:	mov	r0, r9
   13a28:	str	r6, [r4, #8]
   13a2c:	beq	13924 <__assert_fail@plt+0x2038>
   13a30:	ldr	r6, [r6, #28]
   13a34:	cmp	r8, #0
   13a38:	bne	13964 <__assert_fail@plt+0x2078>
   13a3c:	bl	1a030 <__assert_fail@plt+0x8744>
   13a40:	movw	r7, #9024	; 0x2340
   13a44:	cmp	r6, #0
   13a48:	movt	r7, #3
   13a4c:	bne	13768 <__assert_fail@plt+0x1e7c>
   13a50:	cmp	r8, #0
   13a54:	bne	13a9c <__assert_fail@plt+0x21b0>
   13a58:	mov	r0, #0
   13a5c:	cmp	sl, #0
   13a60:	str	r0, [r7, #24]
   13a64:	beq	13a84 <__assert_fail@plt+0x2198>
   13a68:	ldr	r1, [sl, #8]
   13a6c:	str	r0, [r1, #28]
   13a70:	mov	r0, r1
   13a74:	ldr	sl, [sl, #12]
   13a78:	cmp	sl, #0
   13a7c:	bne	13a68 <__assert_fail@plt+0x217c>
   13a80:	str	r1, [r7, #24]
   13a84:	ldr	r0, [r7, #44]	; 0x2c
   13a88:	bl	16a18 <__assert_fail@plt+0x512c>
   13a8c:	movw	r7, #9024	; 0x2340
   13a90:	mov	r0, #0
   13a94:	movt	r7, #3
   13a98:	str	r0, [r7, #44]	; 0x2c
   13a9c:	ldr	r4, [r7, #24]
   13aa0:	cmp	r4, #0
   13aa4:	beq	13b00 <__assert_fail@plt+0x2214>
   13aa8:	movw	r7, #9024	; 0x2340
   13aac:	mov	r5, #1
   13ab0:	mov	r6, #0
   13ab4:	movt	r7, #3
   13ab8:	ldrb	r0, [r4, #24]
   13abc:	ldr	r1, [r4, #12]
   13ac0:	ldrd	r2, [r4]
   13ac4:	str	r5, [sp, #16]
   13ac8:	str	r6, [sp, #12]
   13acc:	str	r1, [sp]
   13ad0:	ubfx	r1, r0, #1, #1
   13ad4:	and	r0, r0, #1
   13ad8:	str	r1, [sp, #8]
   13adc:	str	r0, [sp, #4]
   13ae0:	mov	r0, r2
   13ae4:	mov	r1, r3
   13ae8:	mov	r2, #0
   13aec:	mov	r3, #0
   13af0:	bl	14160 <__assert_fail@plt+0x2874>
   13af4:	ldr	r4, [r4, #28]
   13af8:	cmp	r4, #0
   13afc:	bne	13ab8 <__assert_fail@plt+0x21cc>
   13b00:	ldrb	r0, [r7, #3]
   13b04:	cmp	r0, #1
   13b08:	bne	13ca8 <__assert_fail@plt+0x23bc>
   13b0c:	ldrb	r0, [r7, #5]
   13b10:	cmp	r0, #1
   13b14:	bne	13b6c <__assert_fail@plt+0x2280>
   13b18:	movw	r0, #8568	; 0x2178
   13b1c:	add	r1, r7, #56	; 0x38
   13b20:	mov	r3, #0
   13b24:	movt	r0, #3
   13b28:	str	r1, [sp, #12]
   13b2c:	movw	r1, #5662	; 0x161e
   13b30:	movt	r1, #2
   13b34:	ldrb	r2, [r0, #24]
   13b38:	mov	r0, #0
   13b3c:	str	r0, [sp]
   13b40:	str	r0, [sp, #4]
   13b44:	str	r0, [sp, #8]
   13b48:	str	r0, [sp, #16]
   13b4c:	movw	r0, #3179	; 0xc6b
   13b50:	movt	r0, #2
   13b54:	cmp	r2, #0
   13b58:	mov	r2, #0
   13b5c:	moveq	r1, r0
   13b60:	bl	14160 <__assert_fail@plt+0x2874>
   13b64:	movw	r7, #9024	; 0x2340
   13b68:	movt	r7, #3
   13b6c:	ldr	r0, [r7, #40]	; 0x28
   13b70:	cmp	r0, #0
   13b74:	beq	13cb4 <__assert_fail@plt+0x23c8>
   13b78:	movw	r8, #9012	; 0x2334
   13b7c:	mov	r6, #0
   13b80:	add	sl, sp, #64	; 0x40
   13b84:	mov	r9, #32
   13b88:	movt	r8, #3
   13b8c:	ldr	r1, [r7, #28]
   13b90:	cmp	r1, #0
   13b94:	beq	13c5c <__assert_fail@plt+0x2370>
   13b98:	mov	r4, #0
   13b9c:	b	13bc0 <__assert_fail@plt+0x22d4>
   13ba0:	ldr	r1, [r8]
   13ba4:	bl	114f0 <fputs_unlocked@plt>
   13ba8:	mov	r0, r5
   13bac:	bl	160c4 <__assert_fail@plt+0x47d8>
   13bb0:	ldr	r1, [r7, #28]
   13bb4:	add	r4, r4, #1
   13bb8:	cmp	r4, r1
   13bbc:	bcs	13c5c <__assert_fail@plt+0x2370>
   13bc0:	ldr	r0, [r7, #36]	; 0x24
   13bc4:	cmp	r4, #0
   13bc8:	ldr	r0, [r0, r6, lsl #2]
   13bcc:	ldr	r5, [r0, r4, lsl #2]
   13bd0:	beq	13bf4 <__assert_fail@plt+0x2308>
   13bd4:	ldr	r0, [r8]
   13bd8:	ldr	r2, [r0, #20]
   13bdc:	ldr	r3, [r0, #24]
   13be0:	cmp	r2, r3
   13be4:	bcs	13c44 <__assert_fail@plt+0x2358>
   13be8:	add	r3, r2, #1
   13bec:	str	r3, [r0, #20]
   13bf0:	strb	r9, [r2]
   13bf4:	ldr	r0, [r7, #32]
   13bf8:	ldr	r0, [r0, r4, lsl #2]
   13bfc:	ldr	r3, [r0, #16]
   13c00:	ldr	r2, [r0, #20]
   13c04:	sub	r0, r4, r1
   13c08:	mov	r1, sl
   13c0c:	add	r0, r0, #1
   13c10:	clz	r0, r0
   13c14:	lsr	r0, r0, #5
   13c18:	str	r3, [sp, #64]	; 0x40
   13c1c:	lsl	r3, r0, #3
   13c20:	mov	r0, r5
   13c24:	bl	18c78 <__assert_fail@plt+0x738c>
   13c28:	mov	r5, r0
   13c2c:	cmp	r0, #0
   13c30:	bne	13ba0 <__assert_fail@plt+0x22b4>
   13c34:	ldr	r0, [r7, #36]	; 0x24
   13c38:	ldr	r0, [r0, r6, lsl #2]
   13c3c:	ldr	r0, [r0, r4, lsl #2]
   13c40:	b	13ba0 <__assert_fail@plt+0x22b4>
   13c44:	mov	r1, #32
   13c48:	bl	117e4 <__overflow@plt>
   13c4c:	movw	r7, #9024	; 0x2340
   13c50:	movt	r7, #3
   13c54:	ldr	r1, [r7, #28]
   13c58:	b	13bf4 <__assert_fail@plt+0x2308>
   13c5c:	ldr	r0, [r8]
   13c60:	ldr	r1, [r0, #20]
   13c64:	ldr	r2, [r0, #24]
   13c68:	cmp	r1, r2
   13c6c:	bcs	13c94 <__assert_fail@plt+0x23a8>
   13c70:	add	r2, r1, #1
   13c74:	str	r2, [r0, #20]
   13c78:	mov	r0, #10
   13c7c:	strb	r0, [r1]
   13c80:	ldr	r0, [r7, #40]	; 0x28
   13c84:	add	r6, r6, #1
   13c88:	cmp	r6, r0
   13c8c:	bcc	13b8c <__assert_fail@plt+0x22a0>
   13c90:	b	13cb4 <__assert_fail@plt+0x23c8>
   13c94:	mov	r1, #10
   13c98:	bl	117e4 <__overflow@plt>
   13c9c:	movw	r7, #9024	; 0x2340
   13ca0:	movt	r7, #3
   13ca4:	b	13c80 <__assert_fail@plt+0x2394>
   13ca8:	ldrb	r0, [r7, #4]
   13cac:	cmp	r0, #0
   13cb0:	beq	13de0 <__assert_fail@plt+0x24f4>
   13cb4:	ldrb	r0, [r7, #4]
   13cb8:	sub	sp, fp, #28
   13cbc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13cc0:	mov	r0, #2
   13cc4:	str	r0, [r2, #20]
   13cc8:	ldr	r6, [r2, #8]
   13ccc:	cmp	r6, #0
   13cd0:	bne	12220 <__assert_fail@plt+0x934>
   13cd4:	b	122c4 <__assert_fail@plt+0x9d8>
   13cd8:	mov	r0, #1
   13cdc:	bl	119f0 <__assert_fail@plt+0x104>
   13ce0:	bl	1ce80 <__assert_fail@plt+0xb594>
   13ce4:	movw	r0, #8908	; 0x22cc
   13ce8:	movw	r2, #1831	; 0x727
   13cec:	movw	r6, #1797	; 0x705
   13cf0:	movw	r7, #1815	; 0x717
   13cf4:	mov	r1, #0
   13cf8:	movt	r0, #3
   13cfc:	movt	r2, #2
   13d00:	movt	r6, #2
   13d04:	movt	r7, #2
   13d08:	ldr	r3, [r0]
   13d0c:	movw	r0, #9012	; 0x2334
   13d10:	stm	sp, {r6, r7}
   13d14:	str	r2, [sp, #8]
   13d18:	movw	r2, #1783	; 0x6f7
   13d1c:	str	r1, [sp, #12]
   13d20:	movw	r1, #1678	; 0x68e
   13d24:	movt	r0, #3
   13d28:	movt	r1, #2
   13d2c:	movt	r2, #2
   13d30:	ldr	r0, [r0]
   13d34:	bl	1c710 <__assert_fail@plt+0xae24>
   13d38:	mov	r0, #0
   13d3c:	bl	11700 <exit@plt>
   13d40:	mov	r0, #0
   13d44:	bl	119f0 <__assert_fail@plt+0x104>
   13d48:	movw	r0, #3081	; 0xc09
   13d4c:	movw	r1, #3035	; 0xbdb
   13d50:	movw	r3, #3095	; 0xc17
   13d54:	movw	r2, #425	; 0x1a9
   13d58:	movt	r0, #2
   13d5c:	movt	r1, #2
   13d60:	movt	r3, #2
   13d64:	bl	118ec <__assert_fail@plt>
   13d68:	movw	r0, #1768	; 0x6e8
   13d6c:	movw	r3, #1777	; 0x6f1
   13d70:	movt	r0, #2
   13d74:	movt	r3, #2
   13d78:	b	13da0 <__assert_fail@plt+0x24b4>
   13d7c:	movw	r0, #1768	; 0x6e8
   13d80:	movw	r3, #1765	; 0x6e5
   13d84:	movt	r0, #2
   13d88:	movt	r3, #2
   13d8c:	b	13da0 <__assert_fail@plt+0x24b4>
   13d90:	movw	r0, #1768	; 0x6e8
   13d94:	movw	r3, #1780	; 0x6f4
   13d98:	movt	r0, #2
   13d9c:	movt	r3, #2
   13da0:	str	r0, [sp]
   13da4:	ldr	r2, [sp, #40]	; 0x28
   13da8:	mov	r0, #0
   13dac:	mov	r1, #0
   13db0:	bl	11670 <error@plt>
   13db4:	mov	r0, #1
   13db8:	bl	119f0 <__assert_fail@plt+0x104>
   13dbc:	movw	r1, #9016	; 0x2338
   13dc0:	movw	r3, #3648	; 0xe40
   13dc4:	movt	r1, #3
   13dc8:	movt	r3, #2
   13dcc:	ldr	r2, [r1]
   13dd0:	ldr	r1, [sp, #64]	; 0x40
   13dd4:	str	r2, [sp]
   13dd8:	mov	r2, #66	; 0x42
   13ddc:	bl	1cf00 <__assert_fail@plt+0xb614>
   13de0:	movw	r1, #1977	; 0x7b9
   13de4:	mov	r0, #0
   13de8:	mov	r2, #5
   13dec:	movt	r1, #2
   13df0:	bl	115a4 <dcgettext@plt>
   13df4:	mov	r2, r0
   13df8:	mov	r0, #1
   13dfc:	mov	r1, #0
   13e00:	bl	11670 <error@plt>
   13e04:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13e08:	add	fp, sp, #28
   13e0c:	sub	sp, sp, #12
   13e10:	bl	1ce48 <__assert_fail@plt+0xb55c>
   13e14:	movw	r6, #8568	; 0x2178
   13e18:	movw	r4, #9024	; 0x2340
   13e1c:	mov	r8, r0
   13e20:	mov	r7, #1
   13e24:	movw	r9, #4075	; 0xfeb
   13e28:	movt	r6, #3
   13e2c:	movt	r4, #3
   13e30:	add	r1, r6, #56	; 0x38
   13e34:	stmib	sp, {r0, r1}
   13e38:	mov	r0, r8
   13e3c:	mov	r1, #44	; 0x2c
   13e40:	mov	r5, r8
   13e44:	bl	11724 <strchr@plt>
   13e48:	cmp	r0, #0
   13e4c:	mov	r8, #0
   13e50:	movne	r1, #0
   13e54:	strbne	r1, [r0], #1
   13e58:	mov	r1, r5
   13e5c:	movne	r8, r0
   13e60:	ldr	r0, [r6, #4]
   13e64:	bl	11520 <strcmp@plt>
   13e68:	cmp	r0, #0
   13e6c:	beq	13f54 <__assert_fail@plt+0x2668>
   13e70:	ldr	r0, [r6, #32]
   13e74:	mov	r1, r5
   13e78:	bl	11520 <strcmp@plt>
   13e7c:	cmp	r0, #0
   13e80:	beq	13f5c <__assert_fail@plt+0x2670>
   13e84:	ldr	r0, [r6, #60]	; 0x3c
   13e88:	mov	r1, r5
   13e8c:	bl	11520 <strcmp@plt>
   13e90:	cmp	r0, #0
   13e94:	beq	13f64 <__assert_fail@plt+0x2678>
   13e98:	ldr	r0, [r6, #88]	; 0x58
   13e9c:	mov	r1, r5
   13ea0:	bl	11520 <strcmp@plt>
   13ea4:	cmp	r0, #0
   13ea8:	beq	13f6c <__assert_fail@plt+0x2680>
   13eac:	ldr	r0, [r6, #116]	; 0x74
   13eb0:	mov	r1, r5
   13eb4:	bl	11520 <strcmp@plt>
   13eb8:	cmp	r0, #0
   13ebc:	beq	13f74 <__assert_fail@plt+0x2688>
   13ec0:	ldr	r0, [r6, #144]	; 0x90
   13ec4:	mov	r1, r5
   13ec8:	bl	11520 <strcmp@plt>
   13ecc:	cmp	r0, #0
   13ed0:	beq	13f7c <__assert_fail@plt+0x2690>
   13ed4:	ldr	r0, [r6, #172]	; 0xac
   13ed8:	mov	r1, r5
   13edc:	bl	11520 <strcmp@plt>
   13ee0:	cmp	r0, #0
   13ee4:	beq	13f84 <__assert_fail@plt+0x2698>
   13ee8:	ldr	r0, [r6, #200]	; 0xc8
   13eec:	mov	r1, r5
   13ef0:	bl	11520 <strcmp@plt>
   13ef4:	cmp	r0, #0
   13ef8:	beq	13f8c <__assert_fail@plt+0x26a0>
   13efc:	ldr	r0, [r6, #228]	; 0xe4
   13f00:	mov	r1, r5
   13f04:	bl	11520 <strcmp@plt>
   13f08:	cmp	r0, #0
   13f0c:	beq	13f94 <__assert_fail@plt+0x26a8>
   13f10:	ldr	r0, [r6, #256]	; 0x100
   13f14:	mov	r1, r5
   13f18:	bl	11520 <strcmp@plt>
   13f1c:	cmp	r0, #0
   13f20:	beq	13f9c <__assert_fail@plt+0x26b0>
   13f24:	ldr	r0, [r6, #284]	; 0x11c
   13f28:	mov	r1, r5
   13f2c:	bl	11520 <strcmp@plt>
   13f30:	cmp	r0, #0
   13f34:	beq	13fa4 <__assert_fail@plt+0x26b8>
   13f38:	ldr	r0, [r6, #312]	; 0x138
   13f3c:	mov	r1, r5
   13f40:	bl	11520 <strcmp@plt>
   13f44:	mov	r1, #11
   13f48:	cmp	r0, #0
   13f4c:	beq	13fa8 <__assert_fail@plt+0x26bc>
   13f50:	b	14134 <__assert_fail@plt+0x2848>
   13f54:	mov	r1, #0
   13f58:	b	13fa8 <__assert_fail@plt+0x26bc>
   13f5c:	mov	r1, #1
   13f60:	b	13fa8 <__assert_fail@plt+0x26bc>
   13f64:	mov	r1, #2
   13f68:	b	13fa8 <__assert_fail@plt+0x26bc>
   13f6c:	mov	r1, #3
   13f70:	b	13fa8 <__assert_fail@plt+0x26bc>
   13f74:	mov	r1, #4
   13f78:	b	13fa8 <__assert_fail@plt+0x26bc>
   13f7c:	mov	r1, #5
   13f80:	b	13fa8 <__assert_fail@plt+0x26bc>
   13f84:	mov	r1, #6
   13f88:	b	13fa8 <__assert_fail@plt+0x26bc>
   13f8c:	mov	r1, #7
   13f90:	b	13fa8 <__assert_fail@plt+0x26bc>
   13f94:	mov	r1, #8
   13f98:	b	13fa8 <__assert_fail@plt+0x26bc>
   13f9c:	mov	r1, #9
   13fa0:	b	13fa8 <__assert_fail@plt+0x26bc>
   13fa4:	mov	r1, #10
   13fa8:	rsb	r0, r1, r1, lsl #3
   13fac:	add	sl, r6, r0, lsl #2
   13fb0:	mov	r5, sl
   13fb4:	ldrb	r0, [r5, #24]!
   13fb8:	cmp	r0, #0
   13fbc:	bne	140d8 <__assert_fail@plt+0x27ec>
   13fc0:	cmp	r1, #11
   13fc4:	bhi	14114 <__assert_fail@plt+0x2828>
   13fc8:	tst	r9, r7, lsl r1
   13fcc:	beq	14014 <__assert_fail@plt+0x2728>
   13fd0:	ldr	r1, [r4, #28]
   13fd4:	ldr	r0, [r4, #32]
   13fd8:	mov	r2, #4
   13fdc:	add	r1, r1, #1
   13fe0:	str	r1, [r4, #28]
   13fe4:	bl	1c908 <__assert_fail@plt+0xb01c>
   13fe8:	str	r0, [r4, #32]
   13fec:	ldr	r1, [r4, #28]
   13ff0:	add	r0, r0, r1, lsl #2
   13ff4:	str	sl, [r0, #-4]
   13ff8:	ldrb	r0, [r5]
   13ffc:	cmp	r0, #0
   14000:	bne	140a8 <__assert_fail@plt+0x27bc>
   14004:	cmp	r8, #0
   14008:	strb	r7, [r5]
   1400c:	bne	13e38 <__assert_fail@plt+0x254c>
   14010:	b	140c8 <__assert_fail@plt+0x27dc>
   14014:	cmp	r1, #2
   14018:	bne	14064 <__assert_fail@plt+0x2778>
   1401c:	ldr	r1, [r4, #28]
   14020:	ldr	r0, [r4, #32]
   14024:	mov	r2, #4
   14028:	add	r1, r1, #1
   1402c:	str	r1, [r4, #28]
   14030:	bl	1c908 <__assert_fail@plt+0xb01c>
   14034:	str	r0, [r4, #32]
   14038:	ldr	r1, [r4, #28]
   1403c:	add	r0, r0, r1, lsl #2
   14040:	ldr	r1, [sp, #8]
   14044:	str	r1, [r0, #-4]
   14048:	movw	r0, #3007	; 0xbbf
   1404c:	movt	r0, #2
   14050:	str	r0, [r6, #68]	; 0x44
   14054:	ldrb	r0, [r5]
   14058:	cmp	r0, #0
   1405c:	beq	14004 <__assert_fail@plt+0x2718>
   14060:	b	140a8 <__assert_fail@plt+0x27bc>
   14064:	ldr	r1, [r4, #28]
   14068:	ldr	r0, [r4, #32]
   1406c:	mov	r2, #4
   14070:	add	r1, r1, #1
   14074:	str	r1, [r4, #28]
   14078:	bl	1c908 <__assert_fail@plt+0xb01c>
   1407c:	str	r0, [r4, #32]
   14080:	ldr	r1, [r4, #28]
   14084:	add	r0, r0, r1, lsl #2
   14088:	add	r1, r6, #112	; 0x70
   1408c:	str	r1, [r0, #-4]
   14090:	movw	r0, #3012	; 0xbc4
   14094:	movt	r0, #2
   14098:	str	r0, [r6, #124]	; 0x7c
   1409c:	ldrb	r0, [r5]
   140a0:	cmp	r0, #0
   140a4:	beq	14004 <__assert_fail@plt+0x2718>
   140a8:	movw	r0, #3081	; 0xc09
   140ac:	movw	r1, #3035	; 0xbdb
   140b0:	movw	r3, #3095	; 0xc17
   140b4:	movw	r2, #425	; 0x1a9
   140b8:	movt	r0, #2
   140bc:	movt	r1, #2
   140c0:	movt	r3, #2
   140c4:	bl	118ec <__assert_fail@plt>
   140c8:	ldr	r0, [sp, #4]
   140cc:	sub	sp, fp, #28
   140d0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   140d4:	b	160c4 <__assert_fail@plt+0x47d8>
   140d8:	movw	r1, #2961	; 0xb91
   140dc:	mov	r0, #0
   140e0:	mov	r2, #5
   140e4:	movt	r1, #2
   140e8:	bl	115a4 <dcgettext@plt>
   140ec:	mov	r4, r0
   140f0:	ldr	r0, [sl, #4]
   140f4:	bl	1c038 <__assert_fail@plt+0xa74c>
   140f8:	mov	r3, r0
   140fc:	mov	r0, #0
   14100:	mov	r1, #0
   14104:	mov	r2, r4
   14108:	bl	11670 <error@plt>
   1410c:	mov	r0, #1
   14110:	bl	119f0 <__assert_fail@plt+0x104>
   14114:	movw	r0, #3018	; 0xbca
   14118:	movw	r1, #3035	; 0xbdb
   1411c:	movw	r3, #3044	; 0xbe4
   14120:	mov	r2, #496	; 0x1f0
   14124:	movt	r0, #2
   14128:	movt	r1, #2
   1412c:	movt	r3, #2
   14130:	bl	118ec <__assert_fail@plt>
   14134:	movw	r1, #2927	; 0xb6f
   14138:	mov	r0, #0
   1413c:	mov	r2, #5
   14140:	movt	r1, #2
   14144:	bl	115a4 <dcgettext@plt>
   14148:	mov	r4, r0
   1414c:	mov	r0, r5
   14150:	b	140f4 <__assert_fail@plt+0x2808>
   14154:	nop	{0}
   14158:	nop	{0}
   1415c:	nop	{0}
   14160:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14164:	add	fp, sp, #28
   14168:	sub	sp, sp, #4
   1416c:	vpush	{d8-d12}
   14170:	sub	sp, sp, #944	; 0x3b0
   14174:	ldr	sl, [fp, #16]
   14178:	movw	r6, #9024	; 0x2340
   1417c:	mov	r7, r3
   14180:	mov	r8, r0
   14184:	str	r2, [sp, #84]	; 0x54
   14188:	str	r1, [sp, #88]	; 0x58
   1418c:	movt	r6, #3
   14190:	cmp	sl, #0
   14194:	beq	141a4 <__assert_fail@plt+0x28b8>
   14198:	ldrb	r0, [r6, #6]
   1419c:	cmp	r0, #0
   141a0:	bne	14de0 <__assert_fail@plt+0x34f4>
   141a4:	ldr	r0, [fp, #12]
   141a8:	cmp	r0, #0
   141ac:	beq	141c8 <__assert_fail@plt+0x28dc>
   141b0:	ldrb	r0, [r6]
   141b4:	cmp	r0, #0
   141b8:	bne	141c8 <__assert_fail@plt+0x28dc>
   141bc:	ldrb	r0, [r6, #1]
   141c0:	cmp	r0, #1
   141c4:	bne	14de0 <__assert_fail@plt+0x34f4>
   141c8:	ldr	r9, [fp, #8]
   141cc:	cmp	r9, #0
   141d0:	ldrne	r4, [r6, #8]
   141d4:	cmpne	r4, #0
   141d8:	bne	14260 <__assert_fail@plt+0x2974>
   141dc:	cmp	r9, #0
   141e0:	beq	14210 <__assert_fail@plt+0x2924>
   141e4:	ldr	r4, [r6, #12]
   141e8:	cmp	r4, #0
   141ec:	beq	14210 <__assert_fail@plt+0x2924>
   141f0:	ldr	r1, [r4]
   141f4:	mov	r0, r9
   141f8:	bl	11520 <strcmp@plt>
   141fc:	cmp	r0, #0
   14200:	beq	14de0 <__assert_fail@plt+0x34f4>
   14204:	ldr	r4, [r4, #4]
   14208:	cmp	r4, #0
   1420c:	bne	141f0 <__assert_fail@plt+0x2904>
   14210:	ldr	r1, [sp, #88]	; 0x58
   14214:	ldr	r0, [fp, #20]
   14218:	sub	r5, fp, #136	; 0x88
   1421c:	add	ip, r5, #16
   14220:	cmp	r1, #0
   14224:	beq	14278 <__assert_fail@plt+0x298c>
   14228:	cmp	r0, #0
   1422c:	bne	14278 <__assert_fail@plt+0x298c>
   14230:	ldr	r0, [sp, #88]	; 0x58
   14234:	ldrb	r0, [r0]
   14238:	cmp	r0, #47	; 0x2f
   1423c:	bne	14de0 <__assert_fail@plt+0x34f4>
   14240:	ldr	r0, [sp, #88]	; 0x58
   14244:	cmp	r7, #0
   14248:	moveq	r7, r0
   1424c:	mov	r4, r7
   14250:	b	142e4 <__assert_fail@plt+0x29f8>
   14254:	ldr	r4, [r4, #4]
   14258:	cmp	r4, #0
   1425c:	beq	14de0 <__assert_fail@plt+0x34f4>
   14260:	ldr	r1, [r4]
   14264:	mov	r0, r9
   14268:	bl	11520 <strcmp@plt>
   1426c:	cmp	r0, #0
   14270:	bne	14254 <__assert_fail@plt+0x2968>
   14274:	b	141dc <__assert_fail@plt+0x28f0>
   14278:	ldr	r1, [sp, #88]	; 0x58
   1427c:	mov	r4, r8
   14280:	cmp	r1, #0
   14284:	movne	r4, r1
   14288:	cmp	r7, #0
   1428c:	movne	r4, r7
   14290:	cmp	r0, #0
   14294:	beq	142e4 <__assert_fail@plt+0x29f8>
   14298:	mov	r7, #48	; 0x30
   1429c:	add	r1, r0, #32
   142a0:	add	r3, r0, #16
   142a4:	vld1.64	{d16-d17}, [r0], r7
   142a8:	vld1.64	{d18-d19}, [r1]
   142ac:	vld1.64	{d20-d21}, [r3]
   142b0:	add	r1, r5, #32
   142b4:	mov	r3, #1
   142b8:	vldr	d22, [r0]
   142bc:	mov	r0, r5
   142c0:	vst1.64	{d16-d17}, [r0], r7
   142c4:	vst1.64	{d18-d19}, [r1]
   142c8:	vst1.64	{d20-d21}, [ip]
   142cc:	vstr	d22, [r0]
   142d0:	add	r7, r5, #8
   142d4:	ldrd	r0, [r7]
   142d8:	orrs	r0, r0, r1
   142dc:	bne	14454 <__assert_fail@plt+0x2b68>
   142e0:	b	1443c <__assert_fail@plt+0x2b50>
   142e4:	sub	r2, fp, #136	; 0x88
   142e8:	mov	r0, r4
   142ec:	mov	r1, r8
   142f0:	mov	r7, ip
   142f4:	bl	160ec <__assert_fail@plt+0x4800>
   142f8:	cmp	r0, #0
   142fc:	beq	143d0 <__assert_fail@plt+0x2ae4>
   14300:	bl	11748 <__errno_location@plt>
   14304:	ldr	r2, [fp, #24]
   14308:	cmp	r2, #0
   1430c:	beq	1438c <__assert_fail@plt+0x2aa0>
   14310:	ldr	r1, [r0]
   14314:	cmp	r1, #13
   14318:	cmpne	r1, #2
   1431c:	bne	1438c <__assert_fail@plt+0x2aa0>
   14320:	ldrb	r0, [r6]
   14324:	sub	r5, fp, #136	; 0x88
   14328:	cmp	r0, #1
   1432c:	bne	14de0 <__assert_fail@plt+0x34f4>
   14330:	mvn	r0, #0
   14334:	mov	r3, #0
   14338:	mov	ip, r7
   1433c:	str	r0, [fp, #-136]	; 0xffffff78
   14340:	strb	r3, [fp, #-104]	; 0xffffff98
   14344:	movw	r9, #5662	; 0x161e
   14348:	str	r0, [fp, #-132]	; 0xffffff7c
   1434c:	str	r0, [fp, #-128]	; 0xffffff80
   14350:	str	r0, [fp, #-124]	; 0xffffff84
   14354:	str	r0, [fp, #-120]	; 0xffffff88
   14358:	str	r0, [fp, #-116]	; 0xffffff8c
   1435c:	str	r0, [fp, #-112]	; 0xffffff90
   14360:	str	r0, [fp, #-108]	; 0xffffff94
   14364:	str	r0, [fp, #-96]	; 0xffffffa0
   14368:	str	r0, [fp, #-92]	; 0xffffffa4
   1436c:	str	r0, [fp, #-88]	; 0xffffffa8
   14370:	str	r0, [fp, #-84]	; 0xffffffac
   14374:	movt	r9, #2
   14378:	add	r7, r5, #8
   1437c:	ldrd	r0, [r7]
   14380:	orrs	r0, r0, r1
   14384:	bne	14454 <__assert_fail@plt+0x2b68>
   14388:	b	1443c <__assert_fail@plt+0x2b50>
   1438c:	ldr	r5, [r0]
   14390:	mov	r0, #0
   14394:	mov	r1, #3
   14398:	mov	r2, r4
   1439c:	bl	1bd8c <__assert_fail@plt+0xa4a0>
   143a0:	movw	r2, #5996	; 0x176c
   143a4:	mov	r3, r0
   143a8:	mov	r0, #0
   143ac:	mov	r1, r5
   143b0:	movt	r2, #2
   143b4:	bl	11670 <error@plt>
   143b8:	mov	r0, #1
   143bc:	strb	r0, [r6, #4]
   143c0:	sub	sp, fp, #72	; 0x48
   143c4:	vpop	{d8-d12}
   143c8:	add	sp, sp, #4
   143cc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   143d0:	ldr	r2, [fp, #24]
   143d4:	mov	r3, #0
   143d8:	cmp	r2, #0
   143dc:	beq	14424 <__assert_fail@plt+0x2b38>
   143e0:	ldrb	r0, [r6]
   143e4:	cmp	r0, #1
   143e8:	bne	14424 <__assert_fail@plt+0x2b38>
   143ec:	add	r2, sp, #96	; 0x60
   143f0:	mov	r0, #3
   143f4:	mov	r1, r4
   143f8:	bl	11898 <__xstat64@plt>
   143fc:	cmp	r0, #0
   14400:	beq	14df0 <__assert_fail@plt+0x3504>
   14404:	mov	ip, r7
   14408:	sub	r5, fp, #136	; 0x88
   1440c:	mov	r3, #0
   14410:	add	r7, r5, #8
   14414:	ldrd	r0, [r7]
   14418:	orrs	r0, r0, r1
   1441c:	bne	14454 <__assert_fail@plt+0x2b68>
   14420:	b	1443c <__assert_fail@plt+0x2b50>
   14424:	mov	ip, r7
   14428:	sub	r5, fp, #136	; 0x88
   1442c:	add	r7, r5, #8
   14430:	ldrd	r0, [r7]
   14434:	orrs	r0, r0, r1
   14438:	bne	14454 <__assert_fail@plt+0x2b68>
   1443c:	ldrb	r0, [r6]
   14440:	cmp	r0, #0
   14444:	bne	14454 <__assert_fail@plt+0x2b68>
   14448:	ldrb	r0, [r6, #1]
   1444c:	cmp	r0, #1
   14450:	bne	14de0 <__assert_fail@plt+0x34f4>
   14454:	cmp	r3, #0
   14458:	str	r7, [sp, #68]	; 0x44
   1445c:	mov	r2, #4
   14460:	str	ip, [sp, #76]	; 0x4c
   14464:	str	r3, [sp, #72]	; 0x48
   14468:	moveq	r0, #1
   1446c:	strbeq	r0, [r6, #3]
   14470:	sub	r0, fp, #264	; 0x108
   14474:	add	r1, r0, #16
   14478:	add	r7, r0, #48	; 0x30
   1447c:	str	r1, [sp, #56]	; 0x38
   14480:	add	r1, r0, #24
   14484:	str	r1, [sp, #64]	; 0x40
   14488:	add	r1, r0, #40	; 0x28
   1448c:	add	r0, r5, #40	; 0x28
   14490:	str	r1, [sp, #60]	; 0x3c
   14494:	ldr	r1, [r6, #40]	; 0x28
   14498:	str	r0, [sp, #48]	; 0x30
   1449c:	add	r0, r5, #48	; 0x30
   144a0:	str	r0, [sp, #52]	; 0x34
   144a4:	ldr	r0, [r6, #36]	; 0x24
   144a8:	add	r1, r1, #1
   144ac:	str	r1, [r6, #40]	; 0x28
   144b0:	bl	1c908 <__assert_fail@plt+0xb01c>
   144b4:	str	r0, [r6, #36]	; 0x24
   144b8:	mov	r1, #4
   144bc:	ldr	r0, [r6, #28]
   144c0:	bl	1ca14 <__assert_fail@plt+0xb128>
   144c4:	ldr	r1, [r6, #36]	; 0x24
   144c8:	ldr	r2, [r6, #40]	; 0x28
   144cc:	ldr	sl, [sp, #84]	; 0x54
   144d0:	add	r1, r1, r2, lsl #2
   144d4:	cmp	sl, #0
   144d8:	str	r0, [r1, #-4]
   144dc:	movw	r0, #5662	; 0x161e
   144e0:	movt	r0, #2
   144e4:	moveq	sl, r0
   144e8:	cmp	r8, #0
   144ec:	moveq	r8, r0
   144f0:	str	sl, [sp, #84]	; 0x54
   144f4:	mov	r0, r8
   144f8:	bl	1ce48 <__assert_fail@plt+0xb55c>
   144fc:	mov	r4, r0
   14500:	ldr	r0, [fp, #24]
   14504:	cmp	r0, #0
   14508:	beq	14560 <__assert_fail@plt+0x2c74>
   1450c:	mov	r0, r4
   14510:	bl	11718 <strlen@plt>
   14514:	cmp	r0, #37	; 0x25
   14518:	sub	r5, fp, #200	; 0xc8
   1451c:	bcc	1456c <__assert_fail@plt+0x2c80>
   14520:	movw	r1, #3617	; 0xe21
   14524:	add	r0, r4, r0
   14528:	movt	r1, #2
   1452c:	sub	r0, r0, #36	; 0x24
   14530:	bl	118d4 <strspn@plt>
   14534:	cmp	r0, #36	; 0x24
   14538:	bne	1456c <__assert_fail@plt+0x2c80>
   1453c:	mov	r0, r4
   14540:	mov	r1, #0
   14544:	bl	1562c <__assert_fail@plt+0x3d40>
   14548:	cmp	r0, #0
   1454c:	str	r0, [sp, #80]	; 0x50
   14550:	beq	1456c <__assert_fail@plt+0x2c80>
   14554:	mov	r0, r4
   14558:	bl	160c4 <__assert_fail@plt+0x47d8>
   1455c:	b	14570 <__assert_fail@plt+0x2c84>
   14560:	str	r4, [sp, #80]	; 0x50
   14564:	sub	r5, fp, #200	; 0xc8
   14568:	b	14570 <__assert_fail@plt+0x2c84>
   1456c:	str	r4, [sp, #80]	; 0x50
   14570:	add	r0, r5, #8
   14574:	mov	lr, r7
   14578:	mov	sl, #0
   1457c:	mvn	r2, #0
   14580:	cmp	r9, #0
   14584:	str	r0, [sp, #28]
   14588:	add	r0, r5, #16
   1458c:	str	r0, [sp, #32]
   14590:	add	r0, r5, #24
   14594:	str	r0, [sp, #36]	; 0x24
   14598:	add	r0, r5, #40	; 0x28
   1459c:	str	r0, [sp, #40]	; 0x28
   145a0:	add	r0, r5, #48	; 0x30
   145a4:	sub	r5, fp, #264	; 0x108
   145a8:	str	r0, [sp, #44]	; 0x2c
   145ac:	sub	r0, fp, #136	; 0x88
   145b0:	add	r0, r0, #24
   145b4:	str	r0, [sp, #24]
   145b8:	add	r1, pc, #960	; 0x3c0
   145bc:	ldr	r0, [sp, #48]	; 0x30
   145c0:	vld1.64	{d16-d17}, [r1 :128]
   145c4:	mov	r1, #56	; 0x38
   145c8:	ldr	r8, [r0]
   145cc:	ldr	r7, [r0, #4]
   145d0:	ldr	r0, [sp, #56]	; 0x38
   145d4:	vst1.64	{d16-d17}, [r5], r1
   145d8:	str	r8, [r0]
   145dc:	str	r7, [r0, #4]
   145e0:	ldr	r0, [sp, #52]	; 0x34
   145e4:	ldr	r4, [r0]
   145e8:	ldr	r3, [r0, #4]
   145ec:	ldr	r0, [sp, #60]	; 0x3c
   145f0:	str	r4, [r0]
   145f4:	str	r3, [r0, #4]
   145f8:	ldr	r0, [sp, #64]	; 0x40
   145fc:	str	r8, [sp, #64]	; 0x40
   14600:	str	r4, [r0]
   14604:	str	r3, [r0, #4]
   14608:	mvn	r0, #1
   1460c:	strb	sl, [fp, #-232]	; 0xffffff18
   14610:	orr	r1, r0, #1
   14614:	stm	lr, {r1, r2}
   14618:	movw	r1, #5662	; 0x161e
   1461c:	strb	sl, [r5]
   14620:	movt	r1, #2
   14624:	moveq	r9, r1
   14628:	mvn	r1, #2
   1462c:	subs	r1, r1, r8
   14630:	sbcs	r1, r2, r7
   14634:	bcc	14664 <__assert_fail@plt+0x2d78>
   14638:	subs	r1, r4, r0
   1463c:	sbcs	r1, r3, r2
   14640:	bcs	14664 <__assert_fail@plt+0x2d78>
   14644:	ldr	r0, [sp, #64]	; 0x40
   14648:	mov	ip, lr
   1464c:	subs	r1, r0, r4
   14650:	sbcs	r5, r7, r3
   14654:	stm	ip, {r1, r5}
   14658:	mov	r1, #0
   1465c:	movwcc	r1, #1
   14660:	strb	r1, [fp, #-208]	; 0xffffff30
   14664:	ldr	r2, [fp, #-132]	; 0xffffff7c
   14668:	ldr	r0, [fp, #-136]	; 0xffffff78
   1466c:	ldr	r5, [r6, #52]	; 0x34
   14670:	str	r7, [sp, #52]	; 0x34
   14674:	ldrb	sl, [fp, #-104]	; 0xffffff98
   14678:	str	r4, [sp, #20]
   1467c:	str	r3, [sp, #48]	; 0x30
   14680:	mvn	r3, #0
   14684:	ldr	r4, [sp, #44]	; 0x2c
   14688:	mov	r1, r2
   1468c:	str	r0, [sp, #60]	; 0x3c
   14690:	str	r0, [fp, #-200]	; 0xffffff38
   14694:	ldr	r1, [r6, #48]	; 0x30
   14698:	ldr	r0, [sp, #28]
   1469c:	str	r2, [fp, #-196]	; 0xffffff3c
   146a0:	str	r2, [sp, #56]	; 0x38
   146a4:	cmp	sl, #0
   146a8:	movwne	sl, #1
   146ac:	stm	r0, {r1, r5}
   146b0:	ldr	r0, [sp, #68]	; 0x44
   146b4:	ldr	r2, [r0]
   146b8:	ldr	r1, [r0, #4]
   146bc:	ldr	r0, [sp, #32]
   146c0:	str	r2, [r0]
   146c4:	str	r1, [r0, #4]
   146c8:	ldr	r0, [sp, #24]
   146cc:	ldr	r7, [r0]
   146d0:	ldr	r5, [r0, #4]
   146d4:	ldr	r0, [sp, #36]	; 0x24
   146d8:	str	r7, [r0]
   146dc:	str	r5, [r0, #4]
   146e0:	ldr	r0, [sp, #76]	; 0x4c
   146e4:	str	r7, [sp, #68]	; 0x44
   146e8:	str	r5, [sp, #76]	; 0x4c
   146ec:	ldm	r0, {r8, ip}
   146f0:	ldr	r0, [sp, #40]	; 0x28
   146f4:	stm	r0, {r8, ip}
   146f8:	mvn	r0, #1
   146fc:	subs	lr, r7, r0
   14700:	mov	r0, r5
   14704:	sbcs	r7, r5, r3
   14708:	mov	r7, #0
   1470c:	mvn	r5, #1
   14710:	movwcc	r7, #1
   14714:	adds	r0, r5, #1
   14718:	and	lr, r7, sl
   1471c:	adc	r7, r3, #0
   14720:	strb	lr, [fp, #-168]	; 0xffffff58
   14724:	stm	r4, {r0, r7}
   14728:	mov	r0, #0
   1472c:	strb	r0, [fp, #-144]	; 0xffffff70
   14730:	subs	r0, r2, r5
   14734:	sbcs	r0, r1, r3
   14738:	bcs	14764 <__assert_fail@plt+0x2e78>
   1473c:	subs	r0, r8, r5
   14740:	mvn	r0, #0
   14744:	sbcs	r0, ip, r0
   14748:	bcs	14764 <__assert_fail@plt+0x2e78>
   1474c:	subs	r0, r2, r8
   14750:	sbcs	r7, r1, ip
   14754:	stm	r4, {r0, r7}
   14758:	mov	r0, #0
   1475c:	movwcc	r0, #1
   14760:	strb	r0, [fp, #-144]	; 0xffffff70
   14764:	ldrb	r0, [r6, #5]
   14768:	ldr	r7, [sp, #72]	; 0x48
   1476c:	sub	sl, fp, #200	; 0xc8
   14770:	mvn	r0, r0
   14774:	orr	r0, r7, r0
   14778:	tst	r0, #1
   1477c:	bne	14948 <__assert_fail@plt+0x305c>
   14780:	ldr	r7, [sp, #64]	; 0x40
   14784:	ldr	r5, [sp, #52]	; 0x34
   14788:	mvn	r0, #1
   1478c:	subs	r0, r7, r0
   14790:	mvn	r0, #0
   14794:	sbcs	r0, r5, r0
   14798:	bcs	147cc <__assert_fail@plt+0x2ee0>
   1479c:	ldr	r0, [r6, #96]	; 0x60
   147a0:	str	r8, [sp, #72]	; 0x48
   147a4:	mov	r8, lr
   147a8:	mov	lr, ip
   147ac:	ldr	ip, [r6, #100]	; 0x64
   147b0:	adds	r0, r0, r7
   147b4:	adc	r7, ip, r5
   147b8:	mov	ip, lr
   147bc:	mov	lr, r8
   147c0:	ldr	r8, [sp, #72]	; 0x48
   147c4:	str	r0, [r6, #96]	; 0x60
   147c8:	str	r7, [r6, #100]	; 0x64
   147cc:	ldr	r4, [sp, #20]
   147d0:	ldr	r3, [sp, #48]	; 0x30
   147d4:	mvn	r0, #1
   147d8:	subs	r0, r4, r0
   147dc:	mvn	r0, #0
   147e0:	sbcs	r0, r3, r0
   147e4:	bcs	14800 <__assert_fail@plt+0x2f14>
   147e8:	ldr	r0, [r6, #104]	; 0x68
   147ec:	ldr	r7, [r6, #108]	; 0x6c
   147f0:	adds	r0, r0, r4
   147f4:	adc	r3, r7, r3
   147f8:	str	r0, [r6, #104]	; 0x68
   147fc:	str	r3, [r6, #108]	; 0x6c
   14800:	mvn	r0, #1
   14804:	subs	r0, r2, r0
   14808:	mvn	r0, #0
   1480c:	sbcs	r0, r1, r0
   14810:	bcs	1483c <__assert_fail@plt+0x2f50>
   14814:	ldr	r5, [sp, #60]	; 0x3c
   14818:	ldr	r4, [r6, #64]	; 0x40
   1481c:	ldr	r7, [r6, #68]	; 0x44
   14820:	umull	r0, r3, r2, r5
   14824:	adds	r0, r4, r0
   14828:	ldr	r4, [sp, #56]	; 0x38
   1482c:	mla	r2, r2, r4, r3
   14830:	mla	r1, r1, r5, r2
   14834:	adc	r1, r7, r1
   14838:	strd	r0, [r6, #64]	; 0x40
   1483c:	mvn	r0, #1
   14840:	mvn	r2, #0
   14844:	subs	r0, r8, r0
   14848:	sbcs	r0, ip, r2
   1484c:	bcs	14878 <__assert_fail@plt+0x2f8c>
   14850:	ldr	r7, [sp, #60]	; 0x3c
   14854:	ldr	r5, [sp, #56]	; 0x38
   14858:	ldrd	r2, [r6, #72]	; 0x48
   1485c:	umull	r0, r1, r8, r7
   14860:	mla	r1, r8, r5, r1
   14864:	mla	r1, ip, r7, r1
   14868:	adds	r0, r2, r0
   1486c:	mvn	r2, #0
   14870:	adc	r1, r3, r1
   14874:	strd	r0, [r6, #72]	; 0x48
   14878:	ldr	r1, [sp, #68]	; 0x44
   1487c:	mvn	r0, #1
   14880:	subs	r0, r1, r0
   14884:	ldr	r0, [sp, #76]	; 0x4c
   14888:	sbcs	r0, r0, r2
   1488c:	bcs	14948 <__assert_fail@plt+0x305c>
   14890:	ldr	r1, [sp, #60]	; 0x3c
   14894:	ldr	r7, [sp, #68]	; 0x44
   14898:	ldr	r2, [sp, #56]	; 0x38
   1489c:	umull	r3, r0, r7, r1
   148a0:	mla	r0, r7, r2, r0
   148a4:	ldr	r2, [sp, #76]	; 0x4c
   148a8:	mla	r2, r2, r1, r0
   148ac:	ldrb	r0, [r6, #88]	; 0x58
   148b0:	cmp	r0, lr
   148b4:	bne	148c8 <__assert_fail@plt+0x2fdc>
   148b8:	ldrd	r0, [r6, #80]	; 0x50
   148bc:	adds	r0, r0, r3
   148c0:	adc	r1, r1, r2
   148c4:	b	14944 <__assert_fail@plt+0x3058>
   148c8:	ldr	r4, [r6, #80]	; 0x50
   148cc:	ldr	r1, [r6, #84]	; 0x54
   148d0:	cmp	r0, #0
   148d4:	beq	148e8 <__assert_fail@plt+0x2ffc>
   148d8:	rsbs	r4, r4, #0
   148dc:	rsc	r1, r1, #0
   148e0:	str	r4, [r6, #80]	; 0x50
   148e4:	str	r1, [r6, #84]	; 0x54
   148e8:	rsbs	r5, r3, #0
   148ec:	rsc	r7, r2, #0
   148f0:	cmp	lr, #0
   148f4:	moveq	r5, r3
   148f8:	moveq	r7, r2
   148fc:	subs	r2, r5, r4
   14900:	sbcs	r2, r7, r1
   14904:	bcs	14920 <__assert_fail@plt+0x3034>
   14908:	subs	r2, r4, r5
   1490c:	sbc	r3, r1, r7
   14910:	strd	r2, [r6, #80]	; 0x50
   14914:	cmp	r0, #0
   14918:	bne	1493c <__assert_fail@plt+0x3050>
   1491c:	b	14948 <__assert_fail@plt+0x305c>
   14920:	subs	r2, r5, r4
   14924:	mov	r0, lr
   14928:	strb	lr, [r6, #88]	; 0x58
   1492c:	sbc	r3, r7, r1
   14930:	strd	r2, [r6, #80]	; 0x50
   14934:	cmp	r0, #0
   14938:	beq	14948 <__assert_fail@plt+0x305c>
   1493c:	rsbs	r0, r2, #0
   14940:	rsc	r1, r3, #0
   14944:	strd	r0, [r6, #80]	; 0x50
   14948:	ldr	r0, [r6, #28]
   1494c:	cmp	r0, #0
   14950:	beq	14dd8 <__assert_fail@plt+0x34ec>
   14954:	vldr	d8, [pc, #52]	; 14990 <__assert_fail@plt+0x30a4>
   14958:	ldr	r1, [r6, #32]
   1495c:	movw	r5, #8904	; 0x22c8
   14960:	vmov.f64	d9, #112	; 0x3f800000  1.0
   14964:	vmov.f64	d10, #240	; 0xbf800000 -1.0
   14968:	vmov.i32	d11, #0	; 0x00000000
   1496c:	mov	r8, #0
   14970:	movt	r5, #3
   14974:	b	14a04 <__assert_fail@plt+0x3118>
   14978:	nop	{0}
   1497c:	nop	{0}
   14980:	andeq	r0, r0, r1
   14984:	andeq	r0, r0, r0
   14988:	andeq	r0, r0, r1
	...
   14994:	subsmi	r0, r9, r0
   14998:	cmp	r0, #0
   1499c:	movw	r0, #20372	; 0x4f94
   149a0:	movw	r1, #20180	; 0x4ed4
   149a4:	movt	r0, #1
   149a8:	movt	r1, #1
   149ac:	moveq	r1, r0
   149b0:	mov	r0, r4
   149b4:	blx	r1
   149b8:	ldr	r0, [sp, #92]	; 0x5c
   149bc:	mov	r1, #0
   149c0:	bl	18d18 <__assert_fail@plt+0x742c>
   149c4:	ldr	r1, [r6, #32]
   149c8:	ldr	r2, [r1, r8, lsl #2]
   149cc:	ldr	r3, [r2, #16]
   149d0:	cmp	r3, r0
   149d4:	movhi	r0, r3
   149d8:	str	r0, [r2, #16]
   149dc:	ldr	r0, [r6, #36]	; 0x24
   149e0:	ldr	r2, [r6, #40]	; 0x28
   149e4:	add	r0, r0, r2, lsl #2
   149e8:	ldr	r2, [sp, #92]	; 0x5c
   149ec:	ldr	r0, [r0, #-4]
   149f0:	str	r2, [r0, r8, lsl #2]
   149f4:	add	r8, r8, #1
   149f8:	ldr	r0, [r6, #28]
   149fc:	cmp	r8, r0
   14a00:	bcs	14dd8 <__assert_fail@plt+0x34ec>
   14a04:	ldr	r0, [r1, r8, lsl #2]
   14a08:	mov	r4, sl
   14a0c:	ldr	r1, [r0, #8]
   14a10:	cmp	r1, #0
   14a14:	beq	14a40 <__assert_fail@plt+0x3154>
   14a18:	cmp	r1, #2
   14a1c:	beq	14a3c <__assert_fail@plt+0x3150>
   14a20:	cmp	r1, #1
   14a24:	bne	14e84 <__assert_fail@plt+0x3598>
   14a28:	sub	r4, fp, #264	; 0x108
   14a2c:	ldr	r0, [r0]
   14a30:	cmp	r0, #11
   14a34:	bls	14a4c <__assert_fail@plt+0x3160>
   14a38:	b	14ea4 <__assert_fail@plt+0x35b8>
   14a3c:	mov	r4, #0
   14a40:	ldr	r0, [r0]
   14a44:	cmp	r0, #11
   14a48:	bhi	14ea4 <__assert_fail@plt+0x35b8>
   14a4c:	add	r7, pc, #12
   14a50:	add	r1, r4, #8
   14a54:	add	r2, r4, #24
   14a58:	add	r3, r4, #48	; 0x30
   14a5c:	ldr	pc, [r7, r0, lsl #2]
   14a60:	andeq	r4, r1, r0, lsr #24
   14a64:	andeq	r4, r1, r8, lsr #24
   14a68:	muleq	r1, r0, sl
   14a6c:	strdeq	r4, [r1], -r8
   14a70:	andeq	r4, r1, r4, ror #21
   14a74:	muleq	r1, ip, fp
   14a78:	muleq	r1, r0, sl
   14a7c:	strdeq	r4, [r1], -r8
   14a80:	andeq	r4, r1, r4, ror #21
   14a84:	muleq	r1, ip, fp
   14a88:	andeq	r4, r1, r0, lsl ip
   14a8c:	andeq	r4, r1, r8, lsl ip
   14a90:	add	r0, r4, #16
   14a94:	ldm	r0, {r2, r5}
   14a98:	mvn	r0, #1
   14a9c:	subs	r0, r2, r0
   14aa0:	mvn	r0, #0
   14aa4:	sbcs	r0, r5, r0
   14aa8:	movw	r0, #5662	; 0x161e
   14aac:	movt	r0, #2
   14ab0:	bcs	14b78 <__assert_fail@plt+0x328c>
   14ab4:	ldm	r4, {r0, r7}
   14ab8:	ldr	r4, [r1]
   14abc:	ldr	r1, [r1, #4]
   14ac0:	ldr	r3, [r6, #16]
   14ac4:	stm	sp, {r0, r7}
   14ac8:	mov	r0, r2
   14acc:	add	r2, sp, #96	; 0x60
   14ad0:	str	r1, [sp, #12]
   14ad4:	mov	r1, r5
   14ad8:	str	r4, [sp, #8]
   14adc:	bl	17718 <__assert_fail@plt+0x5e2c>
   14ae0:	b	14b78 <__assert_fail@plt+0x328c>
   14ae4:	ldm	r2, {r2, r7}
   14ae8:	ldrb	r5, [r4, #32]
   14aec:	cmp	r5, #0
   14af0:	beq	14b08 <__assert_fail@plt+0x321c>
   14af4:	b	14b24 <__assert_fail@plt+0x3238>
   14af8:	ldrb	r5, [r4, #56]	; 0x38
   14afc:	ldm	r3, {r2, r7}
   14b00:	cmp	r5, #0
   14b04:	bne	14b24 <__assert_fail@plt+0x3238>
   14b08:	mvn	r0, #1
   14b0c:	subs	r0, r2, r0
   14b10:	mvn	r0, #0
   14b14:	sbcs	r0, r7, r0
   14b18:	movw	r0, #5662	; 0x161e
   14b1c:	movt	r0, #2
   14b20:	bcs	14b78 <__assert_fail@plt+0x328c>
   14b24:	ldr	r3, [r6, #16]
   14b28:	ldm	r1, {r0, r6}
   14b2c:	ldr	r1, [r4, #4]
   14b30:	ldr	r4, [r4]
   14b34:	str	r6, [sp, #12]
   14b38:	str	r0, [sp, #8]
   14b3c:	rsbs	r0, r2, #0
   14b40:	str	r1, [sp, #4]
   14b44:	rsc	r1, r7, #0
   14b48:	cmp	r5, #0
   14b4c:	str	r4, [sp]
   14b50:	moveq	r0, r2
   14b54:	add	r2, sp, #96	; 0x60
   14b58:	moveq	r1, r7
   14b5c:	add	r2, r2, r5
   14b60:	bl	17718 <__assert_fail@plt+0x5e2c>
   14b64:	cmp	r5, #0
   14b68:	movw	r6, #9024	; 0x2340
   14b6c:	movne	r1, #45	; 0x2d
   14b70:	movt	r6, #3
   14b74:	strbne	r1, [r0, #-1]!
   14b78:	bl	1ce48 <__assert_fail@plt+0xb55c>
   14b7c:	movw	r5, #8904	; 0x22c8
   14b80:	mov	r4, r0
   14b84:	str	r0, [sp, #92]	; 0x5c
   14b88:	movt	r5, #3
   14b8c:	ldr	r0, [r5]
   14b90:	cmn	r0, #1
   14b94:	bgt	14998 <__assert_fail@plt+0x30ac>
   14b98:	b	14da0 <__assert_fail@plt+0x34b4>
   14b9c:	ldrd	r0, [r3]
   14ba0:	mvn	r3, #1
   14ba4:	subs	r3, r0, r3
   14ba8:	mvn	r3, #0
   14bac:	sbcs	r3, r1, r3
   14bb0:	bcs	14d6c <__assert_fail@plt+0x3480>
   14bb4:	ldr	sl, [r2]
   14bb8:	ldr	r5, [r2, #4]
   14bbc:	mvn	r2, #1
   14bc0:	subs	r2, sl, r2
   14bc4:	mvn	r2, #0
   14bc8:	sbcs	r2, r5, r2
   14bcc:	bcs	14d6c <__assert_fail@plt+0x3480>
   14bd0:	ldrb	r2, [r4, #56]	; 0x38
   14bd4:	cmp	r2, #0
   14bd8:	beq	14c48 <__assert_fail@plt+0x335c>
   14bdc:	rsbs	r0, r0, #0
   14be0:	rsc	r1, r1, #0
   14be4:	bl	1fce8 <__assert_fail@plt+0xe3fc>
   14be8:	eor	r1, r1, #-2147483648	; 0x80000000
   14bec:	vmov	d12, r0, r1
   14bf0:	ldrb	r0, [r4, #32]
   14bf4:	cmp	r0, #0
   14bf8:	beq	14d00 <__assert_fail@plt+0x3414>
   14bfc:	rsbs	r0, sl, #0
   14c00:	rsc	r1, r5, #0
   14c04:	bl	1fce8 <__assert_fail@plt+0xe3fc>
   14c08:	eor	r1, r1, #-2147483648	; 0x80000000
   14c0c:	b	14d0c <__assert_fail@plt+0x3420>
   14c10:	ldr	r0, [sp, #88]	; 0x58
   14c14:	b	14c2c <__assert_fail@plt+0x3340>
   14c18:	ldr	r0, [sp, #84]	; 0x54
   14c1c:	b	14c2c <__assert_fail@plt+0x3340>
   14c20:	ldr	r0, [sp, #80]	; 0x50
   14c24:	b	14c2c <__assert_fail@plt+0x3340>
   14c28:	mov	r0, r9
   14c2c:	bl	1ce48 <__assert_fail@plt+0xb55c>
   14c30:	mov	r4, r0
   14c34:	str	r0, [sp, #92]	; 0x5c
   14c38:	ldr	r0, [r5]
   14c3c:	cmn	r0, #1
   14c40:	bgt	14998 <__assert_fail@plt+0x30ac>
   14c44:	b	14da0 <__assert_fail@plt+0x34b4>
   14c48:	movw	r2, #36700	; 0x8f5c
   14c4c:	movt	r2, #62914	; 0xf5c2
   14c50:	subs	r2, r2, r0
   14c54:	movw	r2, #23592	; 0x5c28
   14c58:	movt	r2, #655	; 0x28f
   14c5c:	sbcs	r2, r2, r1
   14c60:	bcc	14cec <__assert_fail@plt+0x3400>
   14c64:	adds	r2, sl, r0
   14c68:	adc	r3, r5, r1
   14c6c:	orrs	r7, r2, r3
   14c70:	beq	14cec <__assert_fail@plt+0x3400>
   14c74:	subs	r7, r2, r0
   14c78:	mov	ip, #0
   14c7c:	sbcs	r7, r3, r1
   14c80:	ldrb	r7, [r4, #32]
   14c84:	movwcc	ip, #1
   14c88:	cmp	ip, r7
   14c8c:	bne	14cec <__assert_fail@plt+0x3400>
   14c90:	mov	r6, #100	; 0x64
   14c94:	mov	r4, r2
   14c98:	mov	r5, r3
   14c9c:	umull	r7, r0, r0, r6
   14ca0:	mla	r6, r1, r6, r0
   14ca4:	mov	r0, r7
   14ca8:	mov	r1, r6
   14cac:	bl	1fd5c <__assert_fail@plt+0xe470>
   14cb0:	umull	r2, r3, r0, r4
   14cb4:	adds	ip, r0, #1
   14cb8:	mla	r3, r0, r5, r3
   14cbc:	adc	r5, r1, #0
   14cc0:	mla	r3, r1, r4, r3
   14cc4:	subs	r2, r7, r2
   14cc8:	sbc	r3, r6, r3
   14ccc:	movw	r6, #9024	; 0x2340
   14cd0:	orrs	r2, r2, r3
   14cd4:	movt	r6, #3
   14cd8:	movne	r1, r5
   14cdc:	movne	r0, ip
   14ce0:	bl	1fce8 <__assert_fail@plt+0xe3fc>
   14ce4:	vmov	d16, r0, r1
   14ce8:	b	14db0 <__assert_fail@plt+0x34c4>
   14cec:	bl	1fce8 <__assert_fail@plt+0xe3fc>
   14cf0:	vmov	d12, r0, r1
   14cf4:	ldrb	r0, [r4, #32]
   14cf8:	cmp	r0, #0
   14cfc:	bne	14bfc <__assert_fail@plt+0x3310>
   14d00:	mov	r0, sl
   14d04:	mov	r1, r5
   14d08:	bl	1fce8 <__assert_fail@plt+0xe3fc>
   14d0c:	vmov	d16, r0, r1
   14d10:	vadd.f64	d16, d12, d16
   14d14:	vcmp.f64	d16, #0.0
   14d18:	vmrs	APSR_nzcv, fpscr
   14d1c:	beq	14d6c <__assert_fail@plt+0x3480>
   14d20:	vmul.f64	d17, d12, d8
   14d24:	vdiv.f64	d16, d17, d16
   14d28:	vcvt.s32.f64	s0, d16
   14d2c:	vcvt.f64.s32	d17, s0
   14d30:	vadd.f64	d18, d17, d10
   14d34:	vcmpe.f64	d18, d16
   14d38:	vmrs	APSR_nzcv, fpscr
   14d3c:	bpl	14d60 <__assert_fail@plt+0x3474>
   14d40:	vadd.f64	d18, d17, d9
   14d44:	vcmpe.f64	d16, d18
   14d48:	vmrs	APSR_nzcv, fpscr
   14d4c:	bhi	14d60 <__assert_fail@plt+0x3474>
   14d50:	vcmpe.f64	d16, d17
   14d54:	vmrs	APSR_nzcv, fpscr
   14d58:	vselgt.f64	d16, d9, d11
   14d5c:	vadd.f64	d16, d17, d16
   14d60:	vcmpe.f64	d16, #0.0
   14d64:	vmrs	APSR_nzcv, fpscr
   14d68:	bge	14db0 <__assert_fail@plt+0x34c4>
   14d6c:	movw	r0, #5662	; 0x161e
   14d70:	movt	r0, #2
   14d74:	bl	115b0 <strdup@plt>
   14d78:	mov	r4, r0
   14d7c:	str	r0, [sp, #92]	; 0x5c
   14d80:	movw	r5, #8904	; 0x22c8
   14d84:	sub	sl, fp, #200	; 0xc8
   14d88:	cmp	r4, #0
   14d8c:	movt	r5, #3
   14d90:	beq	14ec4 <__assert_fail@plt+0x35d8>
   14d94:	ldr	r0, [r5]
   14d98:	cmn	r0, #1
   14d9c:	bgt	14998 <__assert_fail@plt+0x30ac>
   14da0:	mov	r0, #1
   14da4:	bl	118a4 <isatty@plt>
   14da8:	str	r0, [r5]
   14dac:	b	14998 <__assert_fail@plt+0x30ac>
   14db0:	movw	r2, #3591	; 0xe07
   14db4:	add	r0, sp, #92	; 0x5c
   14db8:	mov	r1, #1
   14dbc:	vstr	d16, [sp]
   14dc0:	movt	r2, #2
   14dc4:	bl	11694 <__asprintf_chk@plt>
   14dc8:	cmn	r0, #1
   14dcc:	beq	14ec8 <__assert_fail@plt+0x35dc>
   14dd0:	ldr	r4, [sp, #92]	; 0x5c
   14dd4:	b	14d80 <__assert_fail@plt+0x3494>
   14dd8:	ldr	r0, [sp, #80]	; 0x50
   14ddc:	bl	160c4 <__assert_fail@plt+0x47d8>
   14de0:	sub	sp, fp, #72	; 0x48
   14de4:	vpop	{d8-d12}
   14de8:	add	sp, sp, #4
   14dec:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14df0:	ldr	r0, [r6, #44]	; 0x2c
   14df4:	cmp	r0, #0
   14df8:	beq	14404 <__assert_fail@plt+0x2b18>
   14dfc:	ldr	r1, [sp, #96]	; 0x60
   14e00:	ldr	r2, [sp, #100]	; 0x64
   14e04:	str	r1, [fp, #-200]	; 0xffffff38
   14e08:	sub	r1, fp, #200	; 0xc8
   14e0c:	str	r2, [fp, #-196]	; 0xffffff3c
   14e10:	bl	16428 <__assert_fail@plt+0x4b3c>
   14e14:	cmp	r0, #0
   14e18:	beq	14404 <__assert_fail@plt+0x2b18>
   14e1c:	ldr	r0, [r0, #16]
   14e20:	mov	ip, r7
   14e24:	sub	r5, fp, #136	; 0x88
   14e28:	mov	r3, #0
   14e2c:	cmp	r0, #0
   14e30:	beq	1442c <__assert_fail@plt+0x2b40>
   14e34:	ldr	r4, [r0, #8]
   14e38:	cmp	r4, #0
   14e3c:	beq	1442c <__assert_fail@plt+0x2b40>
   14e40:	ldr	r0, [r4]
   14e44:	mov	r1, r8
   14e48:	bl	11520 <strcmp@plt>
   14e4c:	cmp	r0, #0
   14e50:	beq	14404 <__assert_fail@plt+0x2b18>
   14e54:	ldrb	r0, [r4, #24]
   14e58:	mov	ip, r7
   14e5c:	sub	r5, fp, #136	; 0x88
   14e60:	mov	r3, #0
   14e64:	tst	r0, #2
   14e68:	cmpne	sl, #0
   14e6c:	bne	1442c <__assert_fail@plt+0x2b40>
   14e70:	mvn	r0, #0
   14e74:	mov	r1, #0
   14e78:	str	r0, [fp, #-136]	; 0xffffff78
   14e7c:	strb	r1, [fp, #-104]	; 0xffffff98
   14e80:	b	14344 <__assert_fail@plt+0x2a58>
   14e84:	movw	r0, #3444	; 0xd74
   14e88:	movw	r1, #3035	; 0xbdb
   14e8c:	movw	r3, #3462	; 0xd86
   14e90:	movw	r2, #1158	; 0x486
   14e94:	movt	r0, #2
   14e98:	movt	r1, #2
   14e9c:	movt	r3, #2
   14ea0:	bl	118ec <__assert_fail@plt>
   14ea4:	movw	r0, #3598	; 0xe0e
   14ea8:	movw	r1, #3035	; 0xbdb
   14eac:	movw	r3, #3462	; 0xd86
   14eb0:	movw	r2, #1260	; 0x4ec
   14eb4:	movt	r0, #2
   14eb8:	movt	r1, #2
   14ebc:	movt	r3, #2
   14ec0:	bl	118ec <__assert_fail@plt>
   14ec4:	bl	1ce80 <__assert_fail@plt+0xb594>
   14ec8:	mov	r0, #0
   14ecc:	str	r0, [sp, #92]	; 0x5c
   14ed0:	bl	1ce80 <__assert_fail@plt+0xb594>
   14ed4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14ed8:	add	fp, sp, #28
   14edc:	sub	sp, sp, #20
   14ee0:	mov	r4, r0
   14ee4:	bl	11718 <strlen@plt>
   14ee8:	mov	sl, #0
   14eec:	cmp	r0, #0
   14ef0:	str	sl, [sp, #12]
   14ef4:	str	sl, [sp, #8]
   14ef8:	beq	14f88 <__assert_fail@plt+0x369c>
   14efc:	add	r8, r4, r0
   14f00:	add	r9, sp, #8
   14f04:	mov	r7, r4
   14f08:	b	14f2c <__assert_fail@plt+0x3640>
   14f0c:	mov	r0, r5
   14f10:	mov	r1, #63	; 0x3f
   14f14:	strb	r1, [r4], #1
   14f18:	str	sl, [sp, #12]
   14f1c:	str	sl, [sp, #8]
   14f20:	add	r7, r7, r0
   14f24:	cmp	r7, r8
   14f28:	beq	14f88 <__assert_fail@plt+0x369c>
   14f2c:	sub	r6, r8, r7
   14f30:	add	r0, sp, #4
   14f34:	mov	r1, r7
   14f38:	mov	r3, r9
   14f3c:	mov	r2, r6
   14f40:	bl	1882c <__assert_fail@plt+0x6f40>
   14f44:	mov	r5, r0
   14f48:	mov	r0, #1
   14f4c:	cmp	r5, r6
   14f50:	bhi	14f10 <__assert_fail@plt+0x3624>
   14f54:	ldr	r0, [sp, #4]
   14f58:	bl	115d4 <iswcntrl@plt>
   14f5c:	cmp	r0, #0
   14f60:	bne	14f0c <__assert_fail@plt+0x3620>
   14f64:	mov	r0, r4
   14f68:	mov	r1, r7
   14f6c:	mov	r2, r5
   14f70:	bl	11544 <memmove@plt>
   14f74:	add	r4, r4, r5
   14f78:	mov	r0, r5
   14f7c:	add	r7, r7, r0
   14f80:	cmp	r7, r8
   14f84:	bne	14f2c <__assert_fail@plt+0x3640>
   14f88:	strb	sl, [r4]
   14f8c:	sub	sp, fp, #28
   14f90:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14f94:	push	{r4, r5, fp, lr}
   14f98:	add	fp, sp, #8
   14f9c:	ldrb	r1, [r0]
   14fa0:	cmp	r1, #0
   14fa4:	popeq	{r4, r5, fp, pc}
   14fa8:	add	r4, r0, #1
   14fac:	mov	r5, #63	; 0x3f
   14fb0:	uxtb	r0, r1
   14fb4:	bl	1538c <__assert_fail@plt+0x3aa0>
   14fb8:	cmp	r0, #0
   14fbc:	strbne	r5, [r4, #-1]
   14fc0:	ldrb	r1, [r4], #1
   14fc4:	cmp	r1, #0
   14fc8:	bne	14fb0 <__assert_fail@plt+0x36c4>
   14fcc:	pop	{r4, r5, fp, pc}
   14fd0:	push	{fp, lr}
   14fd4:	mov	fp, sp
   14fd8:	mov	r2, r1
   14fdc:	ldrd	r0, [r0]
   14fe0:	mov	r3, #0
   14fe4:	bl	1fd5c <__assert_fail@plt+0xe470>
   14fe8:	mov	r0, r2
   14fec:	pop	{fp, pc}
   14ff0:	ldrd	r2, [r1]
   14ff4:	ldrd	r0, [r0]
   14ff8:	eor	r1, r1, r3
   14ffc:	eor	r0, r0, r2
   15000:	orr	r0, r0, r1
   15004:	clz	r0, r0
   15008:	lsr	r0, r0, #5
   1500c:	bx	lr
   15010:	b	160c4 <__assert_fail@plt+0x47d8>
   15014:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15018:	add	fp, sp, #28
   1501c:	sub	sp, sp, #220	; 0xdc
   15020:	mov	r5, r0
   15024:	sub	r0, fp, #40	; 0x28
   15028:	mov	r4, r1
   1502c:	bl	1c050 <__assert_fail@plt+0xa764>
   15030:	cmp	r0, #0
   15034:	beq	15074 <__assert_fail@plt+0x3788>
   15038:	bl	11748 <__errno_location@plt>
   1503c:	movw	r1, #3976	; 0xf88
   15040:	ldr	r5, [r0]
   15044:	mov	r0, #0
   15048:	mov	r2, #5
   1504c:	mov	r4, #0
   15050:	movt	r1, #2
   15054:	bl	115a4 <dcgettext@plt>
   15058:	mov	r2, r0
   1505c:	mov	r0, #0
   15060:	mov	r1, r5
   15064:	bl	11670 <error@plt>
   15068:	mov	r0, r4
   1506c:	sub	sp, fp, #28
   15070:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15074:	ldr	r0, [r4, #16]
   15078:	and	r0, r0, #61440	; 0xf000
   1507c:	cmp	r0, #16384	; 0x4000
   15080:	bne	150a8 <__assert_fail@plt+0x37bc>
   15084:	sub	r0, fp, #144	; 0x90
   15088:	mov	r1, r4
   1508c:	mov	r2, #104	; 0x68
   15090:	bl	11574 <memcpy@plt>
   15094:	mov	r0, r5
   15098:	bl	115ec <chdir@plt>
   1509c:	cmn	r0, #1
   150a0:	bgt	1510c <__assert_fail@plt+0x3820>
   150a4:	b	151c4 <__assert_fail@plt+0x38d8>
   150a8:	mov	r0, r5
   150ac:	bl	15f04 <__assert_fail@plt+0x4618>
   150b0:	mov	r4, r0
   150b4:	bl	11718 <strlen@plt>
   150b8:	add	r1, r0, #8
   150bc:	bic	r1, r1, #7
   150c0:	sub	r5, sp, r1
   150c4:	mov	sp, r5
   150c8:	add	r2, r0, #1
   150cc:	mov	r0, r5
   150d0:	mov	r1, r4
   150d4:	bl	11574 <memcpy@plt>
   150d8:	mov	r0, r4
   150dc:	bl	160c4 <__assert_fail@plt+0x47d8>
   150e0:	mov	r0, r5
   150e4:	bl	115ec <chdir@plt>
   150e8:	cmn	r0, #1
   150ec:	ble	151c4 <__assert_fail@plt+0x38d8>
   150f0:	movw	r1, #4075	; 0xfeb
   150f4:	sub	r2, fp, #144	; 0x90
   150f8:	mov	r0, #3
   150fc:	movt	r1, #2
   15100:	bl	11898 <__xstat64@plt>
   15104:	cmn	r0, #1
   15108:	ble	15220 <__assert_fail@plt+0x3934>
   1510c:	movw	r1, #4074	; 0xfea
   15110:	sub	r4, fp, #248	; 0xf8
   15114:	mov	r0, #3
   15118:	movt	r1, #2
   1511c:	mov	r2, r4
   15120:	bl	11898 <__xstat64@plt>
   15124:	movw	r8, #4077	; 0xfed
   15128:	cmp	r0, #0
   1512c:	movt	r8, #2
   15130:	bmi	15268 <__assert_fail@plt+0x397c>
   15134:	movw	r7, #4074	; 0xfea
   15138:	movw	sl, #4005	; 0xfa5
   1513c:	sub	r9, fp, #144	; 0x90
   15140:	add	r6, r4, #96	; 0x60
   15144:	movt	r7, #2
   15148:	movt	sl, #2
   1514c:	add	r5, r9, #96	; 0x60
   15150:	ldr	r0, [fp, #-144]	; 0xffffff70
   15154:	ldr	r2, [fp, #-248]	; 0xffffff08
   15158:	ldr	r1, [fp, #-140]	; 0xffffff74
   1515c:	ldr	r3, [fp, #-244]	; 0xffffff0c
   15160:	eor	r1, r3, r1
   15164:	eor	r0, r2, r0
   15168:	orrs	r0, r0, r1
   1516c:	bne	15214 <__assert_fail@plt+0x3928>
   15170:	ldrd	r0, [r5]
   15174:	ldrd	r2, [r6]
   15178:	eor	r1, r3, r1
   1517c:	eor	r0, r2, r0
   15180:	orrs	r0, r0, r1
   15184:	beq	15214 <__assert_fail@plt+0x3928>
   15188:	mov	r0, r7
   1518c:	bl	115ec <chdir@plt>
   15190:	cmn	r0, #1
   15194:	ble	15264 <__assert_fail@plt+0x3978>
   15198:	mov	r0, r9
   1519c:	mov	r1, r4
   151a0:	mov	r2, #104	; 0x68
   151a4:	bl	11574 <memcpy@plt>
   151a8:	mov	r0, #3
   151ac:	mov	r1, r7
   151b0:	mov	r2, r4
   151b4:	bl	11898 <__xstat64@plt>
   151b8:	cmp	r0, #0
   151bc:	bpl	15150 <__assert_fail@plt+0x3864>
   151c0:	b	15268 <__assert_fail@plt+0x397c>
   151c4:	bl	11748 <__errno_location@plt>
   151c8:	movw	r1, #4005	; 0xfa5
   151cc:	ldr	r6, [r0]
   151d0:	mov	r0, #0
   151d4:	mov	r2, #5
   151d8:	mov	r4, #0
   151dc:	movt	r1, #2
   151e0:	bl	115a4 <dcgettext@plt>
   151e4:	mov	r7, r0
   151e8:	mov	r0, #4
   151ec:	mov	r1, r5
   151f0:	bl	1bb10 <__assert_fail@plt+0xa224>
   151f4:	mov	r3, r0
   151f8:	mov	r0, #0
   151fc:	mov	r1, r6
   15200:	mov	r2, r7
   15204:	bl	11670 <error@plt>
   15208:	mov	r0, r4
   1520c:	sub	sp, fp, #28
   15210:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15214:	bl	1cec4 <__assert_fail@plt+0xb5d8>
   15218:	mov	r4, r0
   1521c:	b	152ac <__assert_fail@plt+0x39c0>
   15220:	bl	11748 <__errno_location@plt>
   15224:	movw	r1, #4035	; 0xfc3
   15228:	ldr	r6, [r0]
   1522c:	mov	r0, #0
   15230:	mov	r2, #5
   15234:	mov	r4, #0
   15238:	movt	r1, #2
   1523c:	bl	115a4 <dcgettext@plt>
   15240:	mov	r7, r0
   15244:	mov	r0, #4
   15248:	mov	r1, r5
   1524c:	bl	1bb10 <__assert_fail@plt+0xa224>
   15250:	mov	r3, r0
   15254:	mov	r0, #0
   15258:	mov	r1, r6
   1525c:	mov	r2, r7
   15260:	b	152a8 <__assert_fail@plt+0x39bc>
   15264:	mov	r8, sl
   15268:	bl	11748 <__errno_location@plt>
   1526c:	ldr	r6, [r0]
   15270:	mov	r0, #0
   15274:	mov	r1, r8
   15278:	mov	r2, #5
   1527c:	mov	r4, #0
   15280:	bl	115a4 <dcgettext@plt>
   15284:	movw	r1, #4074	; 0xfea
   15288:	mov	r5, r0
   1528c:	mov	r0, #4
   15290:	movt	r1, #2
   15294:	bl	1bb10 <__assert_fail@plt+0xa224>
   15298:	mov	r3, r0
   1529c:	mov	r0, #0
   152a0:	mov	r1, r6
   152a4:	mov	r2, r5
   152a8:	bl	11670 <error@plt>
   152ac:	bl	11748 <__errno_location@plt>
   152b0:	ldr	r6, [r0]
   152b4:	mov	r5, r0
   152b8:	sub	r0, fp, #40	; 0x28
   152bc:	bl	1c0ac <__assert_fail@plt+0xa7c0>
   152c0:	cmp	r0, #0
   152c4:	bne	152e0 <__assert_fail@plt+0x39f4>
   152c8:	sub	r0, fp, #40	; 0x28
   152cc:	bl	1c0c8 <__assert_fail@plt+0xa7dc>
   152d0:	str	r6, [r5]
   152d4:	mov	r0, r4
   152d8:	sub	sp, fp, #28
   152dc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   152e0:	movw	r1, #4092	; 0xffc
   152e4:	ldr	r4, [r5]
   152e8:	mov	r0, #0
   152ec:	mov	r2, #5
   152f0:	movt	r1, #2
   152f4:	bl	115a4 <dcgettext@plt>
   152f8:	mov	r2, r0
   152fc:	mov	r0, #1
   15300:	mov	r1, r4
   15304:	bl	11670 <error@plt>
   15308:	sub	r2, r0, #65	; 0x41
   1530c:	mov	r1, r0
   15310:	mov	r0, #1
   15314:	cmp	r2, #26
   15318:	subcs	r2, r1, #97	; 0x61
   1531c:	cmpcs	r2, #26
   15320:	bcs	15328 <__assert_fail@plt+0x3a3c>
   15324:	bx	lr
   15328:	sub	r1, r1, #48	; 0x30
   1532c:	cmp	r1, #10
   15330:	movcs	r0, #0
   15334:	bx	lr
   15338:	sub	r2, r0, #65	; 0x41
   1533c:	mov	r1, r0
   15340:	mov	r0, #1
   15344:	cmp	r2, #26
   15348:	subcs	r1, r1, #97	; 0x61
   1534c:	cmpcs	r1, #26
   15350:	movcs	r0, #0
   15354:	bx	lr
   15358:	cmp	r0, #128	; 0x80
   1535c:	mov	r1, #0
   15360:	movwcc	r1, #1
   15364:	mov	r0, r1
   15368:	bx	lr
   1536c:	sub	r1, r0, #9
   15370:	sub	r0, r0, #32
   15374:	clz	r1, r1
   15378:	clz	r0, r0
   1537c:	lsr	r1, r1, #5
   15380:	lsr	r0, r0, #5
   15384:	orr	r0, r0, r1
   15388:	bx	lr
   1538c:	mov	r1, r0
   15390:	mov	r0, #1
   15394:	cmp	r1, #32
   15398:	bxcc	lr
   1539c:	cmp	r1, #127	; 0x7f
   153a0:	movne	r0, #0
   153a4:	bx	lr
   153a8:	sub	r1, r0, #48	; 0x30
   153ac:	mov	r0, #0
   153b0:	cmp	r1, #10
   153b4:	movwcc	r0, #1
   153b8:	bx	lr
   153bc:	sub	r1, r0, #33	; 0x21
   153c0:	mov	r0, #0
   153c4:	cmp	r1, #94	; 0x5e
   153c8:	movwcc	r0, #1
   153cc:	bx	lr
   153d0:	sub	r1, r0, #97	; 0x61
   153d4:	mov	r0, #0
   153d8:	cmp	r1, #26
   153dc:	movwcc	r0, #1
   153e0:	bx	lr
   153e4:	sub	r1, r0, #32
   153e8:	mov	r0, #0
   153ec:	cmp	r1, #95	; 0x5f
   153f0:	movwcc	r0, #1
   153f4:	bx	lr
   153f8:	sub	r1, r0, #33	; 0x21
   153fc:	cmp	r1, #93	; 0x5d
   15400:	bhi	1558c <__assert_fail@plt+0x3ca0>
   15404:	add	r2, pc, #4
   15408:	mov	r0, #1
   1540c:	ldr	pc, [r2, r1, lsl #2]
   15410:	andeq	r5, r1, r8, lsl #11
   15414:	andeq	r5, r1, r8, lsl #11
   15418:	andeq	r5, r1, r8, lsl #11
   1541c:	andeq	r5, r1, r8, lsl #11
   15420:	andeq	r5, r1, r8, lsl #11
   15424:	andeq	r5, r1, r8, lsl #11
   15428:	andeq	r5, r1, r8, lsl #11
   1542c:	andeq	r5, r1, r8, lsl #11
   15430:	andeq	r5, r1, r8, lsl #11
   15434:	andeq	r5, r1, r8, lsl #11
   15438:	andeq	r5, r1, r8, lsl #11
   1543c:	andeq	r5, r1, r8, lsl #11
   15440:	andeq	r5, r1, r8, lsl #11
   15444:	andeq	r5, r1, r8, lsl #11
   15448:	andeq	r5, r1, r8, lsl #11
   1544c:	andeq	r5, r1, ip, lsl #11
   15450:	andeq	r5, r1, ip, lsl #11
   15454:	andeq	r5, r1, ip, lsl #11
   15458:	andeq	r5, r1, ip, lsl #11
   1545c:	andeq	r5, r1, ip, lsl #11
   15460:	andeq	r5, r1, ip, lsl #11
   15464:	andeq	r5, r1, ip, lsl #11
   15468:	andeq	r5, r1, ip, lsl #11
   1546c:	andeq	r5, r1, ip, lsl #11
   15470:	andeq	r5, r1, ip, lsl #11
   15474:	andeq	r5, r1, r8, lsl #11
   15478:	andeq	r5, r1, r8, lsl #11
   1547c:	andeq	r5, r1, r8, lsl #11
   15480:	andeq	r5, r1, r8, lsl #11
   15484:	andeq	r5, r1, r8, lsl #11
   15488:	andeq	r5, r1, r8, lsl #11
   1548c:	andeq	r5, r1, r8, lsl #11
   15490:	andeq	r5, r1, ip, lsl #11
   15494:	andeq	r5, r1, ip, lsl #11
   15498:	andeq	r5, r1, ip, lsl #11
   1549c:	andeq	r5, r1, ip, lsl #11
   154a0:	andeq	r5, r1, ip, lsl #11
   154a4:	andeq	r5, r1, ip, lsl #11
   154a8:	andeq	r5, r1, ip, lsl #11
   154ac:	andeq	r5, r1, ip, lsl #11
   154b0:	andeq	r5, r1, ip, lsl #11
   154b4:	andeq	r5, r1, ip, lsl #11
   154b8:	andeq	r5, r1, ip, lsl #11
   154bc:	andeq	r5, r1, ip, lsl #11
   154c0:	andeq	r5, r1, ip, lsl #11
   154c4:	andeq	r5, r1, ip, lsl #11
   154c8:	andeq	r5, r1, ip, lsl #11
   154cc:	andeq	r5, r1, ip, lsl #11
   154d0:	andeq	r5, r1, ip, lsl #11
   154d4:	andeq	r5, r1, ip, lsl #11
   154d8:	andeq	r5, r1, ip, lsl #11
   154dc:	andeq	r5, r1, ip, lsl #11
   154e0:	andeq	r5, r1, ip, lsl #11
   154e4:	andeq	r5, r1, ip, lsl #11
   154e8:	andeq	r5, r1, ip, lsl #11
   154ec:	andeq	r5, r1, ip, lsl #11
   154f0:	andeq	r5, r1, ip, lsl #11
   154f4:	andeq	r5, r1, ip, lsl #11
   154f8:	andeq	r5, r1, r8, lsl #11
   154fc:	andeq	r5, r1, r8, lsl #11
   15500:	andeq	r5, r1, r8, lsl #11
   15504:	andeq	r5, r1, r8, lsl #11
   15508:	andeq	r5, r1, r8, lsl #11
   1550c:	andeq	r5, r1, r8, lsl #11
   15510:	andeq	r5, r1, ip, lsl #11
   15514:	andeq	r5, r1, ip, lsl #11
   15518:	andeq	r5, r1, ip, lsl #11
   1551c:	andeq	r5, r1, ip, lsl #11
   15520:	andeq	r5, r1, ip, lsl #11
   15524:	andeq	r5, r1, ip, lsl #11
   15528:	andeq	r5, r1, ip, lsl #11
   1552c:	andeq	r5, r1, ip, lsl #11
   15530:	andeq	r5, r1, ip, lsl #11
   15534:	andeq	r5, r1, ip, lsl #11
   15538:	andeq	r5, r1, ip, lsl #11
   1553c:	andeq	r5, r1, ip, lsl #11
   15540:	andeq	r5, r1, ip, lsl #11
   15544:	andeq	r5, r1, ip, lsl #11
   15548:	andeq	r5, r1, ip, lsl #11
   1554c:	andeq	r5, r1, ip, lsl #11
   15550:	andeq	r5, r1, ip, lsl #11
   15554:	andeq	r5, r1, ip, lsl #11
   15558:	andeq	r5, r1, ip, lsl #11
   1555c:	andeq	r5, r1, ip, lsl #11
   15560:	andeq	r5, r1, ip, lsl #11
   15564:	andeq	r5, r1, ip, lsl #11
   15568:	andeq	r5, r1, ip, lsl #11
   1556c:	andeq	r5, r1, ip, lsl #11
   15570:	andeq	r5, r1, ip, lsl #11
   15574:	andeq	r5, r1, ip, lsl #11
   15578:	andeq	r5, r1, r8, lsl #11
   1557c:	andeq	r5, r1, r8, lsl #11
   15580:	andeq	r5, r1, r8, lsl #11
   15584:	andeq	r5, r1, r8, lsl #11
   15588:	bx	lr
   1558c:	mov	r0, #0
   15590:	bx	lr
   15594:	sub	r0, r0, #9
   15598:	cmp	r0, #23
   1559c:	movhi	r0, #0
   155a0:	bxhi	lr
   155a4:	movw	r1, #31
   155a8:	bic	r0, r0, #-16777216	; 0xff000000
   155ac:	mov	r2, #1
   155b0:	movt	r1, #128	; 0x80
   155b4:	and	r0, r2, r1, lsr r0
   155b8:	bx	lr
   155bc:	sub	r1, r0, #65	; 0x41
   155c0:	mov	r0, #0
   155c4:	cmp	r1, #26
   155c8:	movwcc	r0, #1
   155cc:	bx	lr
   155d0:	sub	r2, r0, #48	; 0x30
   155d4:	mov	r1, r0
   155d8:	mov	r0, #1
   155dc:	cmp	r2, #22
   155e0:	bhi	155f8 <__assert_fail@plt+0x3d0c>
   155e4:	movw	r3, #1023	; 0x3ff
   155e8:	mov	ip, #1
   155ec:	movt	r3, #126	; 0x7e
   155f0:	tst	r3, ip, lsl r2
   155f4:	bxne	lr
   155f8:	sub	r1, r1, #97	; 0x61
   155fc:	cmp	r1, #6
   15600:	movcs	r0, #0
   15604:	bxcs	lr
   15608:	bx	lr
   1560c:	sub	r1, r0, #65	; 0x41
   15610:	cmp	r1, #26
   15614:	addcc	r0, r0, #32
   15618:	bx	lr
   1561c:	sub	r1, r0, #97	; 0x61
   15620:	cmp	r1, #26
   15624:	subcc	r0, r0, #32
   15628:	bx	lr
   1562c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15630:	add	fp, sp, #28
   15634:	sub	sp, sp, #180	; 0xb4
   15638:	sub	sp, sp, #3072	; 0xc00
   1563c:	and	r7, r1, #3
   15640:	mov	r8, r0
   15644:	sub	r0, r7, #1
   15648:	tst	r7, r0
   1564c:	bne	15718 <__assert_fail@plt+0x3e2c>
   15650:	cmp	r8, #0
   15654:	beq	15718 <__assert_fail@plt+0x3e2c>
   15658:	ldrb	r0, [r8]
   1565c:	cmp	r0, #0
   15660:	beq	15c94 <__assert_fail@plt+0x43a8>
   15664:	mov	r4, r1
   15668:	mov	r1, #1024	; 0x400
   1566c:	sub	lr, fp, #1024	; 0x400
   15670:	cmp	r0, #47	; 0x2f
   15674:	str	r1, [fp, #-1060]	; 0xfffffbdc
   15678:	str	r1, [sp, #52]	; 0x34
   1567c:	str	r1, [sp, #1188]	; 0x4a4
   15680:	add	r1, sp, #1184	; 0x4a0
   15684:	sub	r2, lr, #40	; 0x28
   15688:	add	r1, r1, #8
   1568c:	add	r2, r2, #8
   15690:	str	r1, [sp, #16]
   15694:	str	r1, [sp, #1184]	; 0x4a0
   15698:	add	r1, sp, #48	; 0x30
   1569c:	str	r2, [sp, #12]
   156a0:	str	r2, [fp, #-1064]	; 0xfffffbd8
   156a4:	add	r5, r1, #8
   156a8:	mov	r0, r5
   156ac:	str	r5, [sp, #48]	; 0x30
   156b0:	str	r5, [sp, #8]
   156b4:	bne	15ca0 <__assert_fail@plt+0x43b4>
   156b8:	mov	r1, r8
   156bc:	mov	r2, #0
   156c0:	mov	r3, #1024	; 0x400
   156c4:	bl	118e0 <__mempcpy_chk@plt>
   156c8:	mov	r6, r0
   156cc:	mov	r0, #47	; 0x2f
   156d0:	strb	r0, [r6], #1
   156d4:	ldrb	r0, [r8]
   156d8:	cmp	r0, #0
   156dc:	beq	15ccc <__assert_fail@plt+0x43e0>
   156e0:	and	r1, r4, #4
   156e4:	add	r9, sp, #48	; 0x30
   156e8:	str	r7, [sp, #32]
   156ec:	str	r1, [sp, #40]	; 0x28
   156f0:	mov	r1, #0
   156f4:	str	r1, [sp, #24]
   156f8:	mov	r1, #0
   156fc:	str	r1, [sp, #36]	; 0x24
   15700:	mov	r1, #0
   15704:	str	r1, [sp, #20]
   15708:	uxtb	r1, r0
   1570c:	cmp	r1, #47	; 0x2f
   15710:	beq	15750 <__assert_fail@plt+0x3e64>
   15714:	b	1575c <__assert_fail@plt+0x3e70>
   15718:	bl	11748 <__errno_location@plt>
   1571c:	mov	r1, #22
   15720:	mov	r4, #0
   15724:	str	r1, [r0]
   15728:	mov	r0, r4
   1572c:	sub	sp, fp, #28
   15730:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15734:	mov	r8, sl
   15738:	ldrb	r0, [r8]
   1573c:	cmp	r0, #0
   15740:	beq	15cd4 <__assert_fail@plt+0x43e8>
   15744:	uxtb	r1, r0
   15748:	cmp	r1, #47	; 0x2f
   1574c:	bne	1575c <__assert_fail@plt+0x3e70>
   15750:	ldrb	r0, [r8, #1]!
   15754:	cmp	r0, #47	; 0x2f
   15758:	beq	15750 <__assert_fail@plt+0x3e64>
   1575c:	mov	r1, r0
   15760:	mov	sl, r8
   15764:	b	1576c <__assert_fail@plt+0x3e80>
   15768:	ldrb	r1, [sl, #1]!
   1576c:	uxtb	r1, r1
   15770:	cmp	r1, #0
   15774:	cmpne	r1, #47	; 0x2f
   15778:	bne	15768 <__assert_fail@plt+0x3e7c>
   1577c:	sub	r2, sl, r8
   15780:	cmp	r2, #1
   15784:	beq	1579c <__assert_fail@plt+0x3eb0>
   15788:	cmp	r2, #2
   1578c:	beq	157bc <__assert_fail@plt+0x3ed0>
   15790:	cmp	r2, #0
   15794:	bne	15814 <__assert_fail@plt+0x3f28>
   15798:	b	15cd4 <__assert_fail@plt+0x43e8>
   1579c:	uxtb	r0, r0
   157a0:	cmp	r0, #46	; 0x2e
   157a4:	bne	15814 <__assert_fail@plt+0x3f28>
   157a8:	mov	r8, sl
   157ac:	ldrb	r0, [r8]
   157b0:	cmp	r0, #0
   157b4:	bne	15744 <__assert_fail@plt+0x3e58>
   157b8:	b	15cd4 <__assert_fail@plt+0x43e8>
   157bc:	uxtb	r0, r0
   157c0:	cmp	r0, #46	; 0x2e
   157c4:	bne	15814 <__assert_fail@plt+0x3f28>
   157c8:	ldrb	r0, [r8, #1]
   157cc:	cmp	r0, #46	; 0x2e
   157d0:	bne	15814 <__assert_fail@plt+0x3f28>
   157d4:	add	r0, r5, #1
   157d8:	cmp	r6, r0
   157dc:	bls	15ac4 <__assert_fail@plt+0x41d8>
   157e0:	sub	r0, r6, #1
   157e4:	mov	r6, r0
   157e8:	cmp	r0, r5
   157ec:	bls	15c6c <__assert_fail@plt+0x4380>
   157f0:	mov	r0, r6
   157f4:	ldrb	r1, [r0, #-1]!
   157f8:	cmp	r1, #47	; 0x2f
   157fc:	bne	157e4 <__assert_fail@plt+0x3ef8>
   15800:	mov	r8, sl
   15804:	ldrb	r0, [r8]
   15808:	cmp	r0, #0
   1580c:	bne	15744 <__assert_fail@plt+0x3e58>
   15810:	b	15cd4 <__assert_fail@plt+0x43e8>
   15814:	ldrb	r0, [r6, #-1]
   15818:	add	r4, r2, #2
   1581c:	str	r2, [sp, #44]	; 0x2c
   15820:	cmp	r0, #47	; 0x2f
   15824:	movne	r0, #47	; 0x2f
   15828:	strbne	r0, [r6], #1
   1582c:	ldr	r0, [sp, #52]	; 0x34
   15830:	add	r0, r5, r0
   15834:	sub	r0, r0, r6
   15838:	cmp	r0, r4
   1583c:	bcs	15874 <__assert_fail@plt+0x3f88>
   15840:	mov	r0, r9
   15844:	bl	1c1cc <__assert_fail@plt+0xa8e0>
   15848:	cmp	r0, #0
   1584c:	beq	15dd4 <__assert_fail@plt+0x44e8>
   15850:	sub	r0, r6, r5
   15854:	ldr	r5, [sp, #48]	; 0x30
   15858:	ldr	r1, [sp, #52]	; 0x34
   1585c:	add	r6, r5, r0
   15860:	add	r0, r5, r1
   15864:	sub	r0, r0, r6
   15868:	cmp	r0, r4
   1586c:	bcc	15840 <__assert_fail@plt+0x3f54>
   15870:	ldr	r2, [sp, #44]	; 0x2c
   15874:	mov	r0, r6
   15878:	mov	r1, r8
   1587c:	mvn	r3, #0
   15880:	bl	118e0 <__mempcpy_chk@plt>
   15884:	mov	r6, r0
   15888:	mov	r0, #0
   1588c:	strb	r0, [r6]
   15890:	ldr	r0, [sp, #40]	; 0x28
   15894:	cmp	r0, #0
   15898:	bne	158fc <__assert_fail@plt+0x4010>
   1589c:	ldr	r0, [sp, #1188]	; 0x4a4
   158a0:	ldr	r7, [sp, #1184]	; 0x4a0
   158a4:	sub	r9, r0, #1
   158a8:	mov	r0, r5
   158ac:	mov	r1, r7
   158b0:	mov	r2, r9
   158b4:	bl	11610 <readlink@plt>
   158b8:	cmp	r0, r9
   158bc:	blt	158d4 <__assert_fail@plt+0x3fe8>
   158c0:	add	r0, sp, #1184	; 0x4a0
   158c4:	bl	1c15c <__assert_fail@plt+0xa870>
   158c8:	cmp	r0, #0
   158cc:	bne	1589c <__assert_fail@plt+0x3fb0>
   158d0:	b	15dd4 <__assert_fail@plt+0x44e8>
   158d4:	mov	r4, r0
   158d8:	cmp	r0, #0
   158dc:	add	r9, sp, #48	; 0x30
   158e0:	bmi	158fc <__assert_fail@plt+0x4010>
   158e4:	ldr	r0, [sp, #24]
   158e8:	cmp	r0, #19
   158ec:	bgt	15998 <__assert_fail@plt+0x40ac>
   158f0:	add	r0, r0, #1
   158f4:	str	r0, [sp, #24]
   158f8:	b	15b48 <__assert_fail@plt+0x425c>
   158fc:	ldr	r7, [sp, #32]
   15900:	cmp	r7, #2
   15904:	beq	15734 <__assert_fail@plt+0x3e48>
   15908:	ldrb	r0, [sl]
   1590c:	cmp	r0, #47	; 0x2f
   15910:	bne	15a78 <__assert_fail@plt+0x418c>
   15914:	mov	r2, sl
   15918:	mov	r1, r2
   1591c:	ldrb	r3, [r2, #1]!
   15920:	cmp	r3, #47	; 0x2f
   15924:	beq	15918 <__assert_fail@plt+0x402c>
   15928:	cmp	r3, #46	; 0x2e
   1592c:	bne	15a70 <__assert_fail@plt+0x4184>
   15930:	add	r2, r1, #2
   15934:	ldrb	r3, [r2]
   15938:	cmp	r3, #47	; 0x2f
   1593c:	beq	15918 <__assert_fail@plt+0x402c>
   15940:	cmp	r3, #0
   15944:	beq	15960 <__assert_fail@plt+0x4074>
   15948:	cmp	r3, #46	; 0x2e
   1594c:	bne	15a78 <__assert_fail@plt+0x418c>
   15950:	ldrb	r1, [r1, #3]
   15954:	cmp	r1, #47	; 0x2f
   15958:	cmpne	r1, #0
   1595c:	bne	15a78 <__assert_fail@plt+0x418c>
   15960:	mov	r0, #47	; 0x2f
   15964:	mov	r1, r5
   15968:	mov	r2, #0
   1596c:	mov	r3, #512	; 0x200
   15970:	strh	r0, [r6]
   15974:	mvn	r0, #99	; 0x63
   15978:	bl	1155c <faccessat@plt>
   1597c:	cmp	r0, #0
   15980:	bne	15af4 <__assert_fail@plt+0x4208>
   15984:	mov	r8, sl
   15988:	ldrb	r0, [r8]
   1598c:	cmp	r0, #0
   15990:	bne	15744 <__assert_fail@plt+0x3e58>
   15994:	b	15cd4 <__assert_fail@plt+0x43e8>
   15998:	ldrb	r0, [r8]
   1599c:	add	lr, sp, #1024	; 0x400
   159a0:	add	r2, lr, #56	; 0x38
   159a4:	cmp	r0, #0
   159a8:	beq	15b48 <__assert_fail@plt+0x425c>
   159ac:	ldr	r9, [sp, #44]	; 0x2c
   159b0:	mov	r0, #0
   159b4:	mov	r1, r5
   159b8:	strb	r0, [r6, -r9]
   159bc:	ldrb	r0, [r5]
   159c0:	cmp	r0, #0
   159c4:	movw	r0, #4075	; 0xfeb
   159c8:	movt	r0, #2
   159cc:	moveq	r1, r0
   159d0:	mov	r0, #3
   159d4:	bl	11898 <__xstat64@plt>
   159d8:	cmp	r0, #0
   159dc:	bne	15de4 <__assert_fail@plt+0x44f8>
   159e0:	rsb	r0, r9, #0
   159e4:	ldr	r9, [sp, #20]
   159e8:	ldrb	r1, [r8]
   159ec:	cmp	r9, #0
   159f0:	strb	r1, [r6, r0]
   159f4:	bne	15a2c <__assert_fail@plt+0x4140>
   159f8:	movw	r0, #30456	; 0x76f8
   159fc:	movw	r2, #30296	; 0x7658
   15a00:	movw	r3, #30352	; 0x7690
   15a04:	mov	r1, #0
   15a08:	movt	r0, #1
   15a0c:	movt	r2, #1
   15a10:	movt	r3, #1
   15a14:	str	r0, [sp]
   15a18:	mov	r0, #7
   15a1c:	bl	166fc <__assert_fail@plt+0x4e10>
   15a20:	mov	r9, r0
   15a24:	cmp	r0, #0
   15a28:	beq	15dd4 <__assert_fail@plt+0x44e8>
   15a2c:	add	lr, sp, #1024	; 0x400
   15a30:	mov	r0, r9
   15a34:	mov	r1, r8
   15a38:	add	r2, lr, #56	; 0x38
   15a3c:	bl	16074 <__assert_fail@plt+0x4788>
   15a40:	cmp	r0, #0
   15a44:	str	r9, [sp, #20]
   15a48:	beq	15b34 <__assert_fail@plt+0x4248>
   15a4c:	ldr	r7, [sp, #32]
   15a50:	cmp	r7, #2
   15a54:	bne	15dd8 <__assert_fail@plt+0x44ec>
   15a58:	mov	r8, sl
   15a5c:	add	r9, sp, #48	; 0x30
   15a60:	ldrb	r0, [r8]
   15a64:	cmp	r0, #0
   15a68:	bne	15744 <__assert_fail@plt+0x3e58>
   15a6c:	b	15cd4 <__assert_fail@plt+0x43e8>
   15a70:	cmp	r3, #0
   15a74:	beq	15960 <__assert_fail@plt+0x4074>
   15a78:	ldr	r1, [sp, #40]	; 0x28
   15a7c:	cmp	r1, #0
   15a80:	beq	15aa0 <__assert_fail@plt+0x41b4>
   15a84:	cmp	r0, #0
   15a88:	beq	15ad8 <__assert_fail@plt+0x41ec>
   15a8c:	mov	r8, sl
   15a90:	ldrb	r0, [r8]
   15a94:	cmp	r0, #0
   15a98:	bne	15744 <__assert_fail@plt+0x3e58>
   15a9c:	b	15cd4 <__assert_fail@plt+0x43e8>
   15aa0:	bl	11748 <__errno_location@plt>
   15aa4:	ldr	r0, [r0]
   15aa8:	cmp	r0, #22
   15aac:	bne	15af4 <__assert_fail@plt+0x4208>
   15ab0:	mov	r8, sl
   15ab4:	ldrb	r0, [r8]
   15ab8:	cmp	r0, #0
   15abc:	bne	15744 <__assert_fail@plt+0x3e58>
   15ac0:	b	15cd4 <__assert_fail@plt+0x43e8>
   15ac4:	mov	r8, sl
   15ac8:	ldrb	r0, [r8]
   15acc:	cmp	r0, #0
   15ad0:	bne	15744 <__assert_fail@plt+0x3e58>
   15ad4:	b	15cd4 <__assert_fail@plt+0x43e8>
   15ad8:	mvn	r0, #99	; 0x63
   15adc:	mov	r1, r5
   15ae0:	mov	r2, #0
   15ae4:	mov	r3, #512	; 0x200
   15ae8:	bl	1155c <faccessat@plt>
   15aec:	cmp	r0, #0
   15af0:	beq	15c80 <__assert_fail@plt+0x4394>
   15af4:	mov	r4, #1
   15af8:	cmp	r7, #1
   15afc:	bne	15cf4 <__assert_fail@plt+0x4408>
   15b00:	bl	11748 <__errno_location@plt>
   15b04:	ldr	r0, [r0]
   15b08:	cmp	r0, #2
   15b0c:	bne	15cf4 <__assert_fail@plt+0x4408>
   15b10:	movw	r1, #5595	; 0x15db
   15b14:	mov	r0, sl
   15b18:	movt	r1, #2
   15b1c:	bl	118d4 <strspn@plt>
   15b20:	ldrb	r0, [sl, r0]
   15b24:	mov	r8, sl
   15b28:	cmp	r0, #0
   15b2c:	beq	15738 <__assert_fail@plt+0x3e4c>
   15b30:	b	15cf4 <__assert_fail@plt+0x4408>
   15b34:	add	lr, sp, #1024	; 0x400
   15b38:	mov	r0, r9
   15b3c:	mov	r1, r8
   15b40:	add	r2, lr, #56	; 0x38
   15b44:	bl	15ff8 <__assert_fail@plt+0x470c>
   15b48:	mov	r0, #0
   15b4c:	strb	r0, [r7, r4]
   15b50:	ldr	r0, [sp, #36]	; 0x24
   15b54:	ldr	r8, [fp, #-1064]	; 0xfffffbd8
   15b58:	tst	r0, #1
   15b5c:	ldr	r0, [sp, #28]
   15b60:	subne	r0, sl, r8
   15b64:	str	r0, [sp, #28]
   15b68:	mov	r0, sl
   15b6c:	bl	11718 <strlen@plt>
   15b70:	mvn	r1, r4
   15b74:	cmp	r0, r1
   15b78:	bhi	15dd4 <__assert_fail@plt+0x44e8>
   15b7c:	str	r0, [sp, #44]	; 0x2c
   15b80:	add	r9, r0, r4
   15b84:	ldr	r0, [fp, #-1060]	; 0xfffffbdc
   15b88:	cmp	r0, r9
   15b8c:	bhi	15bb4 <__assert_fail@plt+0x42c8>
   15b90:	sub	lr, fp, #1024	; 0x400
   15b94:	sub	r0, lr, #40	; 0x28
   15b98:	bl	1c1cc <__assert_fail@plt+0xa8e0>
   15b9c:	cmp	r0, #0
   15ba0:	beq	15dd4 <__assert_fail@plt+0x44e8>
   15ba4:	ldr	r0, [fp, #-1060]	; 0xfffffbdc
   15ba8:	cmp	r0, r9
   15bac:	bls	15b90 <__assert_fail@plt+0x42a4>
   15bb0:	ldr	r8, [fp, #-1064]	; 0xfffffbd8
   15bb4:	ldr	r0, [sp, #36]	; 0x24
   15bb8:	ldr	r1, [sp, #44]	; 0x2c
   15bbc:	tst	r0, #1
   15bc0:	ldr	r0, [sp, #28]
   15bc4:	add	r2, r1, #1
   15bc8:	addne	sl, r8, r0
   15bcc:	add	r0, r8, r4
   15bd0:	mov	r1, sl
   15bd4:	bl	11544 <memmove@plt>
   15bd8:	mov	r0, r8
   15bdc:	mov	r1, r7
   15be0:	mov	r2, r4
   15be4:	bl	11574 <memcpy@plt>
   15be8:	ldrb	r0, [r7]
   15bec:	cmp	r0, #47	; 0x2f
   15bf0:	bne	15c30 <__assert_fail@plt+0x4344>
   15bf4:	mov	r0, r5
   15bf8:	mov	r1, r7
   15bfc:	mov	r2, #0
   15c00:	mvn	r3, #0
   15c04:	bl	118e0 <__mempcpy_chk@plt>
   15c08:	mov	r6, r0
   15c0c:	mov	r0, #47	; 0x2f
   15c10:	strb	r0, [r6], #1
   15c14:	mov	r0, #1
   15c18:	str	r0, [sp, #36]	; 0x24
   15c1c:	add	r9, sp, #48	; 0x30
   15c20:	ldrb	r0, [r8]
   15c24:	cmp	r0, #0
   15c28:	bne	15744 <__assert_fail@plt+0x3e58>
   15c2c:	b	15cd4 <__assert_fail@plt+0x43e8>
   15c30:	add	r0, r5, #1
   15c34:	mov	r1, #1
   15c38:	add	r9, sp, #48	; 0x30
   15c3c:	cmp	r6, r0
   15c40:	str	r1, [sp, #36]	; 0x24
   15c44:	bls	15738 <__assert_fail@plt+0x3e4c>
   15c48:	sub	r0, r6, #1
   15c4c:	mov	r6, r0
   15c50:	cmp	r0, r5
   15c54:	bls	15738 <__assert_fail@plt+0x3e4c>
   15c58:	mov	r0, r6
   15c5c:	ldrb	r1, [r0, #-1]!
   15c60:	cmp	r1, #47	; 0x2f
   15c64:	bne	15c4c <__assert_fail@plt+0x4360>
   15c68:	b	15738 <__assert_fail@plt+0x3e4c>
   15c6c:	mov	r8, sl
   15c70:	ldrb	r0, [r8]
   15c74:	cmp	r0, #0
   15c78:	bne	15744 <__assert_fail@plt+0x3e58>
   15c7c:	b	15cd4 <__assert_fail@plt+0x43e8>
   15c80:	mov	r8, sl
   15c84:	ldrb	r0, [r8]
   15c88:	cmp	r0, #0
   15c8c:	bne	15744 <__assert_fail@plt+0x3e58>
   15c90:	b	15cd4 <__assert_fail@plt+0x43e8>
   15c94:	bl	11748 <__errno_location@plt>
   15c98:	mov	r1, #2
   15c9c:	b	15720 <__assert_fail@plt+0x3e34>
   15ca0:	mov	r1, #1024	; 0x400
   15ca4:	bl	116f4 <getcwd@plt>
   15ca8:	cmp	r0, #0
   15cac:	beq	15d08 <__assert_fail@plt+0x441c>
   15cb0:	mov	r0, r5
   15cb4:	mov	r1, #0
   15cb8:	bl	115e0 <rawmemchr@plt>
   15cbc:	mov	r6, r0
   15cc0:	ldrb	r0, [r8]
   15cc4:	cmp	r0, #0
   15cc8:	bne	156e0 <__assert_fail@plt+0x3df4>
   15ccc:	mov	r0, #0
   15cd0:	str	r0, [sp, #20]
   15cd4:	add	r0, r5, #1
   15cd8:	cmp	r6, r0
   15cdc:	bls	15cf0 <__assert_fail@plt+0x4404>
   15ce0:	mov	r0, r6
   15ce4:	ldrb	r1, [r0, #-1]!
   15ce8:	cmp	r1, #47	; 0x2f
   15cec:	moveq	r6, r0
   15cf0:	mov	r4, #0
   15cf4:	ldr	r0, [sp, #20]
   15cf8:	cmp	r0, #0
   15cfc:	beq	15d60 <__assert_fail@plt+0x4474>
   15d00:	bl	16a18 <__assert_fail@plt+0x512c>
   15d04:	b	15d60 <__assert_fail@plt+0x4474>
   15d08:	bl	11748 <__errno_location@plt>
   15d0c:	ldr	r5, [sp, #8]
   15d10:	mov	r6, r0
   15d14:	add	r9, sp, #48	; 0x30
   15d18:	ldr	r0, [r6]
   15d1c:	cmp	r0, #34	; 0x22
   15d20:	bne	15d50 <__assert_fail@plt+0x4464>
   15d24:	mov	r0, r9
   15d28:	bl	1c15c <__assert_fail@plt+0xa870>
   15d2c:	cmp	r0, #0
   15d30:	beq	15dd4 <__assert_fail@plt+0x44e8>
   15d34:	ldr	r5, [sp, #48]	; 0x30
   15d38:	ldr	r1, [sp, #52]	; 0x34
   15d3c:	mov	r0, r5
   15d40:	bl	116f4 <getcwd@plt>
   15d44:	cmp	r0, #0
   15d48:	beq	15d18 <__assert_fail@plt+0x442c>
   15d4c:	b	15cb0 <__assert_fail@plt+0x43c4>
   15d50:	cmp	r0, #12
   15d54:	beq	15dd4 <__assert_fail@plt+0x44e8>
   15d58:	mov	r4, #1
   15d5c:	mov	r6, r5
   15d60:	ldr	r1, [sp, #12]
   15d64:	ldr	r0, [fp, #-1064]	; 0xfffffbd8
   15d68:	ldr	r7, [sp, #16]
   15d6c:	cmp	r0, r1
   15d70:	beq	15d78 <__assert_fail@plt+0x448c>
   15d74:	bl	160c4 <__assert_fail@plt+0x47d8>
   15d78:	ldr	r0, [sp, #1184]	; 0x4a0
   15d7c:	cmp	r0, r7
   15d80:	beq	15d88 <__assert_fail@plt+0x449c>
   15d84:	bl	160c4 <__assert_fail@plt+0x47d8>
   15d88:	cmp	r4, #0
   15d8c:	beq	15db4 <__assert_fail@plt+0x44c8>
   15d90:	ldr	r0, [sp, #48]	; 0x30
   15d94:	ldr	r1, [sp, #8]
   15d98:	mov	r4, #0
   15d9c:	cmp	r0, r1
   15da0:	beq	15728 <__assert_fail@plt+0x3e3c>
   15da4:	bl	160c4 <__assert_fail@plt+0x47d8>
   15da8:	mov	r0, r4
   15dac:	sub	sp, fp, #28
   15db0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15db4:	mov	r0, #0
   15db8:	strb	r0, [r6], -r5
   15dbc:	add	r0, sp, #48	; 0x30
   15dc0:	add	r1, r6, #1
   15dc4:	bl	1c0f0 <__assert_fail@plt+0xa804>
   15dc8:	mov	r4, r0
   15dcc:	cmp	r0, #0
   15dd0:	bne	15728 <__assert_fail@plt+0x3e3c>
   15dd4:	bl	1ce80 <__assert_fail@plt+0xb594>
   15dd8:	bl	11748 <__errno_location@plt>
   15ddc:	mov	r1, #40	; 0x28
   15de0:	str	r1, [r0]
   15de4:	mov	r4, #1
   15de8:	ldr	r0, [sp, #20]
   15dec:	cmp	r0, #0
   15df0:	bne	15d00 <__assert_fail@plt+0x4414>
   15df4:	b	15d60 <__assert_fail@plt+0x4474>
   15df8:	movw	r1, #9136	; 0x23b0
   15dfc:	movt	r1, #3
   15e00:	str	r0, [r1, #4]
   15e04:	bx	lr
   15e08:	movw	r1, #9136	; 0x23b0
   15e0c:	movt	r1, #3
   15e10:	strb	r0, [r1]
   15e14:	bx	lr
   15e18:	push	{r4, r5, r6, sl, fp, lr}
   15e1c:	add	fp, sp, #16
   15e20:	sub	sp, sp, #8
   15e24:	movw	r0, #9012	; 0x2334
   15e28:	movt	r0, #3
   15e2c:	ldr	r0, [r0]
   15e30:	bl	1f344 <__assert_fail@plt+0xda58>
   15e34:	cmp	r0, #0
   15e38:	beq	15e60 <__assert_fail@plt+0x4574>
   15e3c:	movw	r5, #9136	; 0x23b0
   15e40:	movt	r5, #3
   15e44:	ldrb	r0, [r5]
   15e48:	cmp	r0, #0
   15e4c:	beq	15e8c <__assert_fail@plt+0x45a0>
   15e50:	bl	11748 <__errno_location@plt>
   15e54:	ldr	r0, [r0]
   15e58:	cmp	r0, #32
   15e5c:	bne	15e8c <__assert_fail@plt+0x45a0>
   15e60:	movw	r0, #9008	; 0x2330
   15e64:	movt	r0, #3
   15e68:	ldr	r0, [r0]
   15e6c:	bl	1f344 <__assert_fail@plt+0xda58>
   15e70:	cmp	r0, #0
   15e74:	subeq	sp, fp, #16
   15e78:	popeq	{r4, r5, r6, sl, fp, pc}
   15e7c:	movw	r0, #8912	; 0x22d0
   15e80:	movt	r0, #3
   15e84:	ldr	r0, [r0]
   15e88:	bl	11568 <_exit@plt>
   15e8c:	movw	r1, #4153	; 0x1039
   15e90:	mov	r0, #0
   15e94:	mov	r2, #5
   15e98:	movt	r1, #2
   15e9c:	bl	115a4 <dcgettext@plt>
   15ea0:	ldr	r6, [r5, #4]
   15ea4:	mov	r4, r0
   15ea8:	bl	11748 <__errno_location@plt>
   15eac:	ldr	r5, [r0]
   15eb0:	cmp	r6, #0
   15eb4:	bne	15ed0 <__assert_fail@plt+0x45e4>
   15eb8:	movw	r2, #5996	; 0x176c
   15ebc:	mov	r0, #0
   15ec0:	mov	r1, r5
   15ec4:	mov	r3, r4
   15ec8:	movt	r2, #2
   15ecc:	b	15ef0 <__assert_fail@plt+0x4604>
   15ed0:	mov	r0, r6
   15ed4:	bl	1bcb0 <__assert_fail@plt+0xa3c4>
   15ed8:	movw	r2, #4165	; 0x1045
   15edc:	mov	r3, r0
   15ee0:	str	r4, [sp]
   15ee4:	mov	r0, #0
   15ee8:	mov	r1, r5
   15eec:	movt	r2, #2
   15ef0:	bl	11670 <error@plt>
   15ef4:	movw	r0, #8912	; 0x22d0
   15ef8:	movt	r0, #3
   15efc:	ldr	r0, [r0]
   15f00:	bl	11568 <_exit@plt>
   15f04:	push	{fp, lr}
   15f08:	mov	fp, sp
   15f0c:	bl	15f64 <__assert_fail@plt+0x4678>
   15f10:	cmp	r0, #0
   15f14:	popne	{fp, pc}
   15f18:	bl	1ce80 <__assert_fail@plt+0xb594>
   15f1c:	push	{r4, r5, r6, sl, fp, lr}
   15f20:	add	fp, sp, #16
   15f24:	mov	r5, r0
   15f28:	mov	r4, r0
   15f2c:	ldrb	r6, [r5], #-1
   15f30:	bl	1eeec <__assert_fail@plt+0xd600>
   15f34:	sub	r2, r0, r4
   15f38:	sub	r0, r6, #47	; 0x2f
   15f3c:	clz	r0, r0
   15f40:	lsr	r1, r0, #5
   15f44:	mov	r0, r2
   15f48:	cmp	r2, r1
   15f4c:	bls	15f60 <__assert_fail@plt+0x4674>
   15f50:	ldrb	r3, [r5, r0]
   15f54:	sub	r2, r0, #1
   15f58:	cmp	r3, #47	; 0x2f
   15f5c:	beq	15f44 <__assert_fail@plt+0x4658>
   15f60:	pop	{r4, r5, r6, sl, fp, pc}
   15f64:	push	{r4, r5, r6, sl, fp, lr}
   15f68:	add	fp, sp, #16
   15f6c:	mov	r6, r0
   15f70:	mov	r4, r0
   15f74:	ldrb	r5, [r6], #-1
   15f78:	bl	1eeec <__assert_fail@plt+0xd600>
   15f7c:	sub	r1, r0, r4
   15f80:	sub	r0, r5, #47	; 0x2f
   15f84:	clz	r0, r0
   15f88:	lsr	r0, r0, #5
   15f8c:	mov	r5, r1
   15f90:	cmp	r1, r0
   15f94:	bls	15fa8 <__assert_fail@plt+0x46bc>
   15f98:	ldrb	r2, [r6, r5]
   15f9c:	sub	r1, r5, #1
   15fa0:	cmp	r2, #47	; 0x2f
   15fa4:	beq	15f8c <__assert_fail@plt+0x46a0>
   15fa8:	cmp	r5, #0
   15fac:	mov	r0, r5
   15fb0:	addeq	r0, r0, #1
   15fb4:	add	r0, r0, #1
   15fb8:	bl	1dccc <__assert_fail@plt+0xc3e0>
   15fbc:	mov	r6, r0
   15fc0:	cmp	r0, #0
   15fc4:	beq	15ff0 <__assert_fail@plt+0x4704>
   15fc8:	mov	r0, r6
   15fcc:	mov	r1, r4
   15fd0:	mov	r2, r5
   15fd4:	bl	11574 <memcpy@plt>
   15fd8:	cmp	r5, #0
   15fdc:	moveq	r0, #46	; 0x2e
   15fe0:	moveq	r5, #1
   15fe4:	strbeq	r0, [r6]
   15fe8:	mov	r0, #0
   15fec:	strb	r0, [r6, r5]
   15ff0:	mov	r0, r6
   15ff4:	pop	{r4, r5, r6, sl, fp, pc}
   15ff8:	push	{r4, r5, r6, r7, fp, lr}
   15ffc:	add	fp, sp, #16
   16000:	cmp	r0, #0
   16004:	beq	1606c <__assert_fail@plt+0x4780>
   16008:	mov	r5, r0
   1600c:	mov	r0, #24
   16010:	mov	r6, r2
   16014:	mov	r7, r1
   16018:	bl	1c944 <__assert_fail@plt+0xb058>
   1601c:	mov	r4, r0
   16020:	mov	r0, r7
   16024:	bl	1ce48 <__assert_fail@plt+0xb55c>
   16028:	str	r0, [r4]
   1602c:	ldrd	r0, [r6, #96]	; 0x60
   16030:	str	r0, [r4, #8]
   16034:	str	r1, [r4, #12]
   16038:	ldrd	r0, [r6]
   1603c:	str	r1, [r4, #20]
   16040:	str	r0, [r4, #16]
   16044:	mov	r0, r5
   16048:	mov	r1, r4
   1604c:	bl	17358 <__assert_fail@plt+0x5a6c>
   16050:	cmp	r0, #0
   16054:	beq	16070 <__assert_fail@plt+0x4784>
   16058:	cmp	r0, r4
   1605c:	beq	1606c <__assert_fail@plt+0x4780>
   16060:	mov	r0, r4
   16064:	pop	{r4, r5, r6, r7, fp, lr}
   16068:	b	176f8 <__assert_fail@plt+0x5e0c>
   1606c:	pop	{r4, r5, r6, r7, fp, pc}
   16070:	bl	1ce80 <__assert_fail@plt+0xb594>
   16074:	cmp	r0, #0
   16078:	moveq	r0, #0
   1607c:	bxeq	lr
   16080:	push	{r4, r5, fp, lr}
   16084:	add	fp, sp, #8
   16088:	sub	sp, sp, #24
   1608c:	str	r1, [sp]
   16090:	mov	ip, sp
   16094:	mov	r1, sp
   16098:	ldrd	r4, [r2, #96]	; 0x60
   1609c:	add	r3, ip, #8
   160a0:	add	ip, ip, #16
   160a4:	strd	r4, [r3]
   160a8:	ldrd	r2, [r2]
   160ac:	strd	r2, [ip]
   160b0:	bl	16428 <__assert_fail@plt+0x4b3c>
   160b4:	cmp	r0, #0
   160b8:	movwne	r0, #1
   160bc:	sub	sp, fp, #8
   160c0:	pop	{r4, r5, fp, pc}
   160c4:	push	{r4, r5, r6, sl, fp, lr}
   160c8:	add	fp, sp, #16
   160cc:	mov	r4, r0
   160d0:	bl	11748 <__errno_location@plt>
   160d4:	ldr	r6, [r0]
   160d8:	mov	r5, r0
   160dc:	mov	r0, r4
   160e0:	bl	11550 <free@plt>
   160e4:	str	r6, [r5]
   160e8:	pop	{r4, r5, r6, sl, fp, pc}
   160ec:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   160f0:	add	fp, sp, #28
   160f4:	sub	sp, sp, #404	; 0x194
   160f8:	movw	r6, #8916	; 0x22d4
   160fc:	mov	r4, r2
   16100:	mov	r5, r0
   16104:	add	r7, sp, #8
   16108:	movt	r6, #3
   1610c:	ldr	r1, [r6]
   16110:	cmn	r1, #1
   16114:	bgt	1614c <__assert_fail@plt+0x4860>
   16118:	add	r8, sp, #8
   1611c:	mov	r0, r8
   16120:	bl	11598 <uname@plt>
   16124:	mov	r1, #0
   16128:	cmp	r0, #0
   1612c:	bne	16148 <__assert_fail@plt+0x485c>
   16130:	movw	r1, #4172	; 0x104c
   16134:	add	r0, r8, #130	; 0x82
   16138:	movt	r1, #2
   1613c:	bl	11508 <strverscmp@plt>
   16140:	mvn	r0, r0
   16144:	lsr	r1, r0, #31
   16148:	str	r1, [r6]
   1614c:	add	r0, r7, #32
   16150:	add	r6, r7, #8
   16154:	add	sl, r7, #24
   16158:	add	r8, r4, #8
   1615c:	add	r7, r4, #24
   16160:	add	r9, r4, #40	; 0x28
   16164:	cmp	r1, #0
   16168:	str	r0, [sp, #4]
   1616c:	beq	161a8 <__assert_fail@plt+0x48bc>
   16170:	add	r1, sp, #8
   16174:	mov	r0, r5
   16178:	bl	11784 <statvfs64@plt>
   1617c:	cmp	r0, #0
   16180:	bmi	161f8 <__assert_fail@plt+0x490c>
   16184:	ldr	r1, [sp, #12]
   16188:	ldr	r0, [sp, #8]
   1618c:	cmp	r1, #0
   16190:	movne	r0, r1
   16194:	cmn	r0, #1
   16198:	mov	r1, r0
   1619c:	movwne	r1, #0
   161a0:	movne	r0, r0
   161a4:	b	161c4 <__assert_fail@plt+0x48d8>
   161a8:	add	r1, sp, #8
   161ac:	mov	r0, r5
   161b0:	bl	11814 <statfs64@plt>
   161b4:	cmp	r0, #0
   161b8:	bmi	161f8 <__assert_fail@plt+0x490c>
   161bc:	ldr	r0, [sp, #68]	; 0x44
   161c0:	asr	r1, r0, #31
   161c4:	strd	r0, [r4]
   161c8:	vld1.64	{d16-d17}, [r6]
   161cc:	vst1.64	{d16-d17}, [r8]
   161d0:	ldrd	r0, [sl]
   161d4:	strd	r0, [r7]
   161d8:	lsr	r0, r1, #31
   161dc:	strb	r0, [r4, #32]
   161e0:	ldr	r0, [sp, #4]
   161e4:	vld1.64	{d16-d17}, [r0]
   161e8:	mov	r0, #0
   161ec:	vst1.64	{d16-d17}, [r9]
   161f0:	sub	sp, fp, #28
   161f4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   161f8:	mvn	r0, #0
   161fc:	sub	sp, fp, #28
   16200:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16204:	andeq	r0, r0, r0
   16208:	ldr	r0, [r0, #8]
   1620c:	bx	lr
   16210:	ldr	r0, [r0, #12]
   16214:	bx	lr
   16218:	ldr	r0, [r0, #16]
   1621c:	bx	lr
   16220:	ldm	r0, {r2, ip}
   16224:	mov	r0, #0
   16228:	cmp	r2, ip
   1622c:	bxcs	lr
   16230:	mov	r0, #0
   16234:	ldr	r1, [r2]
   16238:	cmp	r1, #0
   1623c:	bne	16258 <__assert_fail@plt+0x496c>
   16240:	add	r2, r2, #8
   16244:	cmp	r2, ip
   16248:	bcs	16284 <__assert_fail@plt+0x4998>
   1624c:	ldr	r1, [r2]
   16250:	cmp	r1, #0
   16254:	beq	16240 <__assert_fail@plt+0x4954>
   16258:	mov	r3, #0
   1625c:	mov	r1, r2
   16260:	ldr	r1, [r1, #4]
   16264:	add	r3, r3, #1
   16268:	cmp	r1, #0
   1626c:	bne	16260 <__assert_fail@plt+0x4974>
   16270:	cmp	r3, r0
   16274:	movhi	r0, r3
   16278:	add	r2, r2, #8
   1627c:	cmp	r2, ip
   16280:	bcc	1624c <__assert_fail@plt+0x4960>
   16284:	bx	lr
   16288:	push	{fp, lr}
   1628c:	mov	fp, sp
   16290:	ldm	r0, {r3, ip}
   16294:	mov	lr, #0
   16298:	mov	r1, #0
   1629c:	cmp	r3, ip
   162a0:	bcs	162f4 <__assert_fail@plt+0x4a08>
   162a4:	mov	r1, #0
   162a8:	mov	lr, #0
   162ac:	ldr	r2, [r3]
   162b0:	cmp	r2, #0
   162b4:	bne	162d0 <__assert_fail@plt+0x49e4>
   162b8:	add	r3, r3, #8
   162bc:	cmp	r3, ip
   162c0:	bcs	162f4 <__assert_fail@plt+0x4a08>
   162c4:	ldr	r2, [r3]
   162c8:	cmp	r2, #0
   162cc:	beq	162b8 <__assert_fail@plt+0x49cc>
   162d0:	mov	r2, r3
   162d4:	ldr	r2, [r2, #4]
   162d8:	add	r1, r1, #1
   162dc:	cmp	r2, #0
   162e0:	bne	162d4 <__assert_fail@plt+0x49e8>
   162e4:	add	lr, lr, #1
   162e8:	add	r3, r3, #8
   162ec:	cmp	r3, ip
   162f0:	bcc	162c4 <__assert_fail@plt+0x49d8>
   162f4:	ldr	r2, [r0, #12]
   162f8:	cmp	lr, r2
   162fc:	bne	16314 <__assert_fail@plt+0x4a28>
   16300:	ldr	r2, [r0, #16]
   16304:	mov	r0, #1
   16308:	cmp	r1, r2
   1630c:	movne	r0, #0
   16310:	pop	{fp, pc}
   16314:	mov	r0, #0
   16318:	pop	{fp, pc}
   1631c:	nop	{0}
   16320:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   16324:	add	fp, sp, #24
   16328:	sub	sp, sp, #8
   1632c:	ldr	r6, [r0]
   16330:	ldmib	r0, {r2, r7, r8}
   16334:	ldr	r3, [r0, #16]
   16338:	mov	r4, r1
   1633c:	mov	r5, #0
   16340:	cmp	r6, r2
   16344:	bcs	1639c <__assert_fail@plt+0x4ab0>
   16348:	mov	r5, #0
   1634c:	ldr	r0, [r6]
   16350:	cmp	r0, #0
   16354:	bne	16370 <__assert_fail@plt+0x4a84>
   16358:	add	r6, r6, #8
   1635c:	cmp	r6, r2
   16360:	bcs	1639c <__assert_fail@plt+0x4ab0>
   16364:	ldr	r0, [r6]
   16368:	cmp	r0, #0
   1636c:	beq	16358 <__assert_fail@plt+0x4a6c>
   16370:	mov	r0, #0
   16374:	mov	r1, r6
   16378:	ldr	r1, [r1, #4]
   1637c:	add	r0, r0, #1
   16380:	cmp	r1, #0
   16384:	bne	16378 <__assert_fail@plt+0x4a8c>
   16388:	cmp	r0, r5
   1638c:	movhi	r5, r0
   16390:	add	r6, r6, #8
   16394:	cmp	r6, r2
   16398:	bcc	16364 <__assert_fail@plt+0x4a78>
   1639c:	movw	r2, #4179	; 0x1053
   163a0:	mov	r0, r4
   163a4:	mov	r1, #1
   163a8:	movt	r2, #2
   163ac:	bl	1179c <__fprintf_chk@plt>
   163b0:	movw	r2, #4203	; 0x106b
   163b4:	mov	r0, r4
   163b8:	mov	r1, #1
   163bc:	mov	r3, r7
   163c0:	movt	r2, #2
   163c4:	bl	1179c <__fprintf_chk@plt>
   163c8:	vmov	s0, r8
   163cc:	vldr	d16, [pc, #76]	; 16420 <__assert_fail@plt+0x4b34>
   163d0:	movw	r2, #4227	; 0x1083
   163d4:	mov	r0, r4
   163d8:	mov	r1, #1
   163dc:	mov	r3, r8
   163e0:	movt	r2, #2
   163e4:	vcvt.f64.u32	d17, s0
   163e8:	vmov	s0, r7
   163ec:	vcvt.f64.u32	d18, s0
   163f0:	vmul.f64	d16, d17, d16
   163f4:	vdiv.f64	d16, d16, d18
   163f8:	vstr	d16, [sp]
   163fc:	bl	1179c <__fprintf_chk@plt>
   16400:	movw	r2, #4260	; 0x10a4
   16404:	mov	r0, r4
   16408:	mov	r1, #1
   1640c:	mov	r3, r5
   16410:	movt	r2, #2
   16414:	sub	sp, fp, #24
   16418:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   1641c:	b	1179c <__fprintf_chk@plt>
   16420:	andeq	r0, r0, r0
   16424:	subsmi	r0, r9, r0
   16428:	push	{r4, r5, r6, r7, fp, lr}
   1642c:	add	fp, sp, #16
   16430:	mov	r4, r1
   16434:	ldr	r1, [r0, #8]
   16438:	ldr	r2, [r0, #24]
   1643c:	mov	r5, r0
   16440:	mov	r0, r4
   16444:	blx	r2
   16448:	ldr	r1, [r5, #8]
   1644c:	cmp	r0, r1
   16450:	bcs	164b8 <__assert_fail@plt+0x4bcc>
   16454:	ldr	r7, [r5]
   16458:	mov	r6, #0
   1645c:	ldr	r1, [r7, r0, lsl #3]!
   16460:	cmp	r1, #0
   16464:	cmpne	r7, #0
   16468:	bne	16498 <__assert_fail@plt+0x4bac>
   1646c:	mov	r0, r6
   16470:	pop	{r4, r5, r6, r7, fp, pc}
   16474:	ldr	r2, [r5, #28]
   16478:	mov	r0, r4
   1647c:	blx	r2
   16480:	cmp	r0, #0
   16484:	bne	164ac <__assert_fail@plt+0x4bc0>
   16488:	ldr	r7, [r7, #4]
   1648c:	cmp	r7, #0
   16490:	beq	1646c <__assert_fail@plt+0x4b80>
   16494:	ldr	r1, [r7]
   16498:	cmp	r1, r4
   1649c:	bne	16474 <__assert_fail@plt+0x4b88>
   164a0:	mov	r6, r4
   164a4:	mov	r0, r6
   164a8:	pop	{r4, r5, r6, r7, fp, pc}
   164ac:	ldr	r6, [r7]
   164b0:	mov	r0, r6
   164b4:	pop	{r4, r5, r6, r7, fp, pc}
   164b8:	bl	118bc <abort@plt>
   164bc:	push	{fp, lr}
   164c0:	mov	fp, sp
   164c4:	ldr	r1, [r0, #16]
   164c8:	cmp	r1, #0
   164cc:	beq	164ec <__assert_fail@plt+0x4c00>
   164d0:	ldm	r0, {r1, r2}
   164d4:	cmp	r1, r2
   164d8:	bcs	164f4 <__assert_fail@plt+0x4c08>
   164dc:	ldr	r0, [r1], #8
   164e0:	cmp	r0, #0
   164e4:	beq	164d4 <__assert_fail@plt+0x4be8>
   164e8:	pop	{fp, pc}
   164ec:	mov	r0, #0
   164f0:	pop	{fp, pc}
   164f4:	bl	118bc <abort@plt>
   164f8:	push	{r4, r5, fp, lr}
   164fc:	add	fp, sp, #8
   16500:	mov	r5, r1
   16504:	ldr	r1, [r0, #8]
   16508:	ldr	r2, [r0, #24]
   1650c:	mov	r4, r0
   16510:	mov	r0, r5
   16514:	blx	r2
   16518:	ldr	r1, [r4, #8]
   1651c:	cmp	r0, r1
   16520:	bcs	16584 <__assert_fail@plt+0x4c98>
   16524:	ldr	r1, [r4]
   16528:	add	r2, r1, r0, lsl #3
   1652c:	ldr	r3, [r2]
   16530:	ldr	r2, [r2, #4]
   16534:	cmp	r3, r5
   16538:	beq	16548 <__assert_fail@plt+0x4c5c>
   1653c:	cmp	r2, #0
   16540:	bne	1652c <__assert_fail@plt+0x4c40>
   16544:	b	16558 <__assert_fail@plt+0x4c6c>
   16548:	cmp	r2, #0
   1654c:	beq	16558 <__assert_fail@plt+0x4c6c>
   16550:	ldr	r0, [r2]
   16554:	pop	{r4, r5, fp, pc}
   16558:	ldr	r2, [r4, #4]
   1655c:	add	r0, r1, r0, lsl #3
   16560:	add	r1, r0, #8
   16564:	cmp	r1, r2
   16568:	bcs	1657c <__assert_fail@plt+0x4c90>
   1656c:	ldr	r0, [r1], #8
   16570:	cmp	r0, #0
   16574:	beq	16564 <__assert_fail@plt+0x4c78>
   16578:	pop	{r4, r5, fp, pc}
   1657c:	mov	r0, #0
   16580:	pop	{r4, r5, fp, pc}
   16584:	bl	118bc <abort@plt>
   16588:	push	{r4, r5, fp, lr}
   1658c:	add	fp, sp, #8
   16590:	ldm	r0, {r5, lr}
   16594:	mov	ip, r0
   16598:	mov	r0, #0
   1659c:	cmp	r5, lr
   165a0:	popcs	{r4, r5, fp, pc}
   165a4:	mov	r0, #0
   165a8:	ldr	r3, [r5]
   165ac:	cmp	r3, #0
   165b0:	cmpne	r5, #0
   165b4:	beq	165c0 <__assert_fail@plt+0x4cd4>
   165b8:	b	165dc <__assert_fail@plt+0x4cf0>
   165bc:	ldr	lr, [ip, #4]
   165c0:	add	r5, r5, #8
   165c4:	cmp	r5, lr
   165c8:	bcs	16604 <__assert_fail@plt+0x4d18>
   165cc:	ldr	r3, [r5]
   165d0:	cmp	r3, #0
   165d4:	cmpne	r5, #0
   165d8:	beq	165c0 <__assert_fail@plt+0x4cd4>
   165dc:	mov	r3, r5
   165e0:	cmp	r0, r2
   165e4:	bcs	16604 <__assert_fail@plt+0x4d18>
   165e8:	ldr	r4, [r3]
   165ec:	str	r4, [r1, r0, lsl #2]
   165f0:	add	r0, r0, #1
   165f4:	ldr	r3, [r3, #4]
   165f8:	cmp	r3, #0
   165fc:	bne	165e0 <__assert_fail@plt+0x4cf4>
   16600:	b	165bc <__assert_fail@plt+0x4cd0>
   16604:	pop	{r4, r5, fp, pc}
   16608:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1660c:	add	fp, sp, #24
   16610:	mov	r5, r1
   16614:	ldr	r4, [r0]
   16618:	ldr	r1, [r0, #4]
   1661c:	mov	r6, #0
   16620:	cmp	r4, r1
   16624:	bcs	166a0 <__assert_fail@plt+0x4db4>
   16628:	mov	r9, r2
   1662c:	mov	r8, r0
   16630:	mov	r6, #0
   16634:	ldr	r0, [r4]
   16638:	cmp	r0, #0
   1663c:	cmpne	r4, #0
   16640:	beq	1664c <__assert_fail@plt+0x4d60>
   16644:	b	16668 <__assert_fail@plt+0x4d7c>
   16648:	ldr	r1, [r8, #4]
   1664c:	add	r4, r4, #8
   16650:	cmp	r4, r1
   16654:	bcs	166a0 <__assert_fail@plt+0x4db4>
   16658:	ldr	r0, [r4]
   1665c:	cmp	r0, #0
   16660:	cmpne	r4, #0
   16664:	beq	1664c <__assert_fail@plt+0x4d60>
   16668:	mov	r1, r9
   1666c:	blx	r5
   16670:	cmp	r0, #0
   16674:	beq	166a0 <__assert_fail@plt+0x4db4>
   16678:	mov	r7, r4
   1667c:	ldr	r7, [r7, #4]
   16680:	add	r6, r6, #1
   16684:	cmp	r7, #0
   16688:	beq	16648 <__assert_fail@plt+0x4d5c>
   1668c:	ldr	r0, [r7]
   16690:	mov	r1, r9
   16694:	blx	r5
   16698:	cmp	r0, #0
   1669c:	bne	1667c <__assert_fail@plt+0x4d90>
   166a0:	mov	r0, r6
   166a4:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   166a8:	ldrb	r2, [r0]
   166ac:	cmp	r2, #0
   166b0:	moveq	r0, #0
   166b4:	bxeq	lr
   166b8:	add	r3, r0, #1
   166bc:	mov	r0, #0
   166c0:	rsb	r0, r0, r0, lsl #5
   166c4:	uxtab	r0, r0, r2
   166c8:	udiv	r2, r0, r1
   166cc:	mls	r0, r2, r1, r0
   166d0:	ldrb	r2, [r3], #1
   166d4:	cmp	r2, #0
   166d8:	bne	166c0 <__assert_fail@plt+0x4dd4>
   166dc:	bx	lr
   166e0:	movw	r1, #4288	; 0x10c0
   166e4:	movt	r1, #2
   166e8:	vld1.32	{d16-d17}, [r1]!
   166ec:	ldr	r1, [r1]
   166f0:	vst1.32	{d16-d17}, [r0]!
   166f4:	str	r1, [r0]
   166f8:	bx	lr
   166fc:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   16700:	add	fp, sp, #24
   16704:	movw	r9, #26928	; 0x6930
   16708:	cmp	r3, #0
   1670c:	movw	r5, #26908	; 0x691c
   16710:	mov	r6, r0
   16714:	mov	r0, #40	; 0x28
   16718:	mov	r7, r1
   1671c:	movt	r9, #1
   16720:	movne	r9, r3
   16724:	cmp	r2, #0
   16728:	movt	r5, #1
   1672c:	movne	r5, r2
   16730:	bl	1dccc <__assert_fail@plt+0xc3e0>
   16734:	mov	r8, #0
   16738:	cmp	r0, #0
   1673c:	beq	16904 <__assert_fail@plt+0x5018>
   16740:	mov	r4, r0
   16744:	movw	r0, #4288	; 0x10c0
   16748:	cmp	r7, #0
   1674c:	movt	r0, #2
   16750:	moveq	r7, r0
   16754:	cmp	r7, r0
   16758:	str	r7, [r4, #20]
   1675c:	beq	167d8 <__assert_fail@plt+0x4eec>
   16760:	vldr	s2, [pc, #420]	; 1690c <__assert_fail@plt+0x5020>
   16764:	vldr	s0, [r7, #8]
   16768:	vcmpe.f32	s0, s2
   1676c:	vmrs	APSR_nzcv, fpscr
   16770:	ble	16884 <__assert_fail@plt+0x4f98>
   16774:	vldr	s4, [pc, #404]	; 16910 <__assert_fail@plt+0x5024>
   16778:	vcmpe.f32	s0, s4
   1677c:	vmrs	APSR_nzcv, fpscr
   16780:	bpl	16884 <__assert_fail@plt+0x4f98>
   16784:	vldr	s4, [pc, #392]	; 16914 <__assert_fail@plt+0x5028>
   16788:	vldr	s6, [r7, #12]
   1678c:	vcmpe.f32	s6, s4
   16790:	vmrs	APSR_nzcv, fpscr
   16794:	ble	16884 <__assert_fail@plt+0x4f98>
   16798:	vldr	s4, [r7]
   1679c:	vcmpe.f32	s4, #0.0
   167a0:	vmrs	APSR_nzcv, fpscr
   167a4:	blt	16884 <__assert_fail@plt+0x4f98>
   167a8:	vadd.f32	s2, s4, s2
   167ac:	vcmpe.f32	s2, s0
   167b0:	vmrs	APSR_nzcv, fpscr
   167b4:	bpl	16884 <__assert_fail@plt+0x4f98>
   167b8:	vldr	s0, [r7, #4]
   167bc:	vmov.f32	s4, #112	; 0x3f800000  1.0
   167c0:	vcmpe.f32	s0, s4
   167c4:	vmrs	APSR_nzcv, fpscr
   167c8:	bhi	16884 <__assert_fail@plt+0x4f98>
   167cc:	vcmpe.f32	s2, s0
   167d0:	vmrs	APSR_nzcv, fpscr
   167d4:	bpl	16884 <__assert_fail@plt+0x4f98>
   167d8:	ldrb	r0, [r7, #16]
   167dc:	cmp	r0, #0
   167e0:	bne	1680c <__assert_fail@plt+0x4f20>
   167e4:	vmov	s2, r6
   167e8:	vldr	s0, [r7, #8]
   167ec:	vldr	s4, [pc, #292]	; 16918 <__assert_fail@plt+0x502c>
   167f0:	vcvt.f32.u32	s2, s2
   167f4:	vdiv.f32	s2, s2, s0
   167f8:	vcvt.u32.f32	s0, s2
   167fc:	vcmpe.f32	s2, s4
   16800:	vmrs	APSR_nzcv, fpscr
   16804:	bge	168a0 <__assert_fail@plt+0x4fb4>
   16808:	vmov	r6, s0
   1680c:	cmp	r6, #10
   16810:	movls	r6, #10
   16814:	orr	r0, r6, #1
   16818:	cmn	r0, #1
   1681c:	beq	168a0 <__assert_fail@plt+0x4fb4>
   16820:	ldr	r6, [fp, #8]
   16824:	mov	r1, #3
   16828:	cmp	r0, #10
   1682c:	bcc	16864 <__assert_fail@plt+0x4f78>
   16830:	mov	r1, #3
   16834:	mov	r3, #9
   16838:	mov	r2, #12
   1683c:	udiv	r7, r0, r1
   16840:	mls	r7, r7, r1, r0
   16844:	cmp	r7, #0
   16848:	beq	16864 <__assert_fail@plt+0x4f78>
   1684c:	add	r3, r3, r2
   16850:	add	r2, r2, #8
   16854:	add	r1, r1, #2
   16858:	add	r3, r3, #4
   1685c:	cmp	r3, r0
   16860:	bcc	1683c <__assert_fail@plt+0x4f50>
   16864:	udiv	r2, r0, r1
   16868:	mls	r1, r2, r1, r0
   1686c:	cmp	r1, #0
   16870:	bne	16898 <__assert_fail@plt+0x4fac>
   16874:	add	r0, r0, #2
   16878:	cmn	r0, #1
   1687c:	bne	16824 <__assert_fail@plt+0x4f38>
   16880:	b	168a0 <__assert_fail@plt+0x4fb4>
   16884:	str	r0, [r4, #20]
   16888:	mov	r0, r4
   1688c:	bl	160c4 <__assert_fail@plt+0x47d8>
   16890:	mov	r0, r8
   16894:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   16898:	cmp	r0, #536870912	; 0x20000000
   1689c:	bcc	168b8 <__assert_fail@plt+0x4fcc>
   168a0:	mov	r0, #0
   168a4:	str	r0, [r4, #8]
   168a8:	mov	r0, r4
   168ac:	bl	160c4 <__assert_fail@plt+0x47d8>
   168b0:	mov	r0, r8
   168b4:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   168b8:	cmp	r0, #0
   168bc:	str	r0, [r4, #8]
   168c0:	beq	168a8 <__assert_fail@plt+0x4fbc>
   168c4:	mov	r1, #8
   168c8:	bl	1dc78 <__assert_fail@plt+0xc38c>
   168cc:	cmp	r0, #0
   168d0:	str	r0, [r4]
   168d4:	beq	168a8 <__assert_fail@plt+0x4fbc>
   168d8:	mov	r1, #0
   168dc:	str	r5, [r4, #24]
   168e0:	str	r9, [r4, #28]
   168e4:	str	r6, [r4, #32]
   168e8:	mov	r8, r4
   168ec:	str	r1, [r4, #36]	; 0x24
   168f0:	str	r1, [r4, #12]
   168f4:	str	r1, [r4, #16]
   168f8:	ldr	r1, [r4, #8]
   168fc:	add	r0, r0, r1, lsl #3
   16900:	str	r0, [r4, #4]
   16904:	mov	r0, r8
   16908:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1690c:	stclcc	12, cr12, [ip, #820]	; 0x334
   16910:	svccc	0x00666666
   16914:	svccc	0x008ccccd
   16918:	svcmi	0x00800000
   1691c:	ror	r2, r0, #3
   16920:	udiv	r2, r2, r1
   16924:	mul	r1, r2, r1
   16928:	rsb	r0, r1, r0, ror #3
   1692c:	bx	lr
   16930:	sub	r0, r0, r1
   16934:	clz	r0, r0
   16938:	lsr	r0, r0, #5
   1693c:	bx	lr
   16940:	push	{r4, r5, r6, r7, fp, lr}
   16944:	add	fp, sp, #16
   16948:	mov	r4, r0
   1694c:	ldr	r5, [r0]
   16950:	ldr	r0, [r0, #4]
   16954:	cmp	r5, r0
   16958:	bcs	16a08 <__assert_fail@plt+0x511c>
   1695c:	mov	r6, #0
   16960:	ldr	r1, [r5]
   16964:	cmp	r1, #0
   16968:	bne	16994 <__assert_fail@plt+0x50a8>
   1696c:	b	1697c <__assert_fail@plt+0x5090>
   16970:	str	r6, [r5]
   16974:	str	r6, [r5, #4]
   16978:	ldr	r0, [r4, #4]
   1697c:	add	r5, r5, #8
   16980:	cmp	r5, r0
   16984:	bcs	16a08 <__assert_fail@plt+0x511c>
   16988:	ldr	r1, [r5]
   1698c:	cmp	r1, #0
   16990:	beq	1697c <__assert_fail@plt+0x5090>
   16994:	ldr	r1, [r4, #32]
   16998:	ldr	r7, [r5, #4]
   1699c:	cmp	r1, #0
   169a0:	mov	r0, r1
   169a4:	movwne	r0, #1
   169a8:	cmp	r7, #0
   169ac:	bne	169f0 <__assert_fail@plt+0x5104>
   169b0:	cmp	r0, #0
   169b4:	beq	16970 <__assert_fail@plt+0x5084>
   169b8:	ldr	r0, [r5]
   169bc:	blx	r1
   169c0:	b	16970 <__assert_fail@plt+0x5084>
   169c4:	str	r6, [r7]
   169c8:	cmp	r1, #0
   169cc:	ldr	r2, [r7, #4]
   169d0:	ldr	r0, [r4, #36]	; 0x24
   169d4:	str	r0, [r7, #4]
   169d8:	mov	r0, r1
   169dc:	str	r7, [r4, #36]	; 0x24
   169e0:	movwne	r0, #1
   169e4:	cmp	r2, #0
   169e8:	mov	r7, r2
   169ec:	beq	169b0 <__assert_fail@plt+0x50c4>
   169f0:	tst	r0, #1
   169f4:	beq	169c4 <__assert_fail@plt+0x50d8>
   169f8:	ldr	r0, [r7]
   169fc:	blx	r1
   16a00:	ldr	r1, [r4, #32]
   16a04:	b	169c4 <__assert_fail@plt+0x50d8>
   16a08:	mov	r0, #0
   16a0c:	str	r0, [r4, #12]
   16a10:	str	r0, [r4, #16]
   16a14:	pop	{r4, r5, r6, r7, fp, pc}
   16a18:	push	{r4, r5, r6, sl, fp, lr}
   16a1c:	add	fp, sp, #16
   16a20:	mov	r4, r0
   16a24:	ldr	r0, [r0, #32]
   16a28:	cmp	r0, #0
   16a2c:	beq	16aa0 <__assert_fail@plt+0x51b4>
   16a30:	ldr	r0, [r4, #16]
   16a34:	cmp	r0, #0
   16a38:	beq	16aa0 <__assert_fail@plt+0x51b4>
   16a3c:	ldr	r5, [r4]
   16a40:	ldr	r1, [r4, #4]
   16a44:	cmp	r5, r1
   16a48:	bcc	16a60 <__assert_fail@plt+0x5174>
   16a4c:	b	16aa0 <__assert_fail@plt+0x51b4>
   16a50:	ldr	r1, [r4, #4]
   16a54:	add	r5, r5, #8
   16a58:	cmp	r5, r1
   16a5c:	bcs	16aa0 <__assert_fail@plt+0x51b4>
   16a60:	ldr	r0, [r5]
   16a64:	cmp	r0, #0
   16a68:	cmpne	r5, #0
   16a6c:	beq	16a54 <__assert_fail@plt+0x5168>
   16a70:	ldr	r1, [r4, #32]
   16a74:	blx	r1
   16a78:	ldr	r6, [r5, #4]
   16a7c:	cmp	r6, #0
   16a80:	beq	16a50 <__assert_fail@plt+0x5164>
   16a84:	ldr	r1, [r4, #32]
   16a88:	ldr	r0, [r6]
   16a8c:	blx	r1
   16a90:	ldr	r6, [r6, #4]
   16a94:	cmp	r6, #0
   16a98:	bne	16a84 <__assert_fail@plt+0x5198>
   16a9c:	b	16a50 <__assert_fail@plt+0x5164>
   16aa0:	ldr	r5, [r4]
   16aa4:	ldr	r1, [r4, #4]
   16aa8:	cmp	r5, r1
   16aac:	bcc	16ac0 <__assert_fail@plt+0x51d4>
   16ab0:	b	16ae8 <__assert_fail@plt+0x51fc>
   16ab4:	add	r5, r5, #8
   16ab8:	cmp	r5, r1
   16abc:	bcs	16ae8 <__assert_fail@plt+0x51fc>
   16ac0:	ldr	r0, [r5, #4]
   16ac4:	cmp	r0, #0
   16ac8:	beq	16ab4 <__assert_fail@plt+0x51c8>
   16acc:	ldr	r6, [r0, #4]
   16ad0:	bl	160c4 <__assert_fail@plt+0x47d8>
   16ad4:	cmp	r6, #0
   16ad8:	mov	r0, r6
   16adc:	bne	16acc <__assert_fail@plt+0x51e0>
   16ae0:	ldr	r1, [r4, #4]
   16ae4:	b	16ab4 <__assert_fail@plt+0x51c8>
   16ae8:	ldr	r0, [r4, #36]	; 0x24
   16aec:	cmp	r0, #0
   16af0:	beq	16b08 <__assert_fail@plt+0x521c>
   16af4:	ldr	r5, [r0, #4]
   16af8:	bl	160c4 <__assert_fail@plt+0x47d8>
   16afc:	cmp	r5, #0
   16b00:	mov	r0, r5
   16b04:	bne	16af4 <__assert_fail@plt+0x5208>
   16b08:	ldr	r0, [r4]
   16b0c:	bl	160c4 <__assert_fail@plt+0x47d8>
   16b10:	mov	r0, r4
   16b14:	pop	{r4, r5, r6, sl, fp, lr}
   16b18:	b	160c4 <__assert_fail@plt+0x47d8>
   16b1c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16b20:	add	fp, sp, #28
   16b24:	sub	sp, sp, #44	; 0x2c
   16b28:	mov	r7, r0
   16b2c:	mov	r4, r0
   16b30:	ldr	r0, [r7, #20]!
   16b34:	ldrb	r2, [r0, #16]
   16b38:	cmp	r2, #0
   16b3c:	bne	16b6c <__assert_fail@plt+0x5280>
   16b40:	vmov	s2, r1
   16b44:	vldr	s0, [r0, #8]
   16b48:	vldr	s4, [pc, #592]	; 16da0 <__assert_fail@plt+0x54b4>
   16b4c:	mov	r5, #0
   16b50:	vcvt.f32.u32	s2, s2
   16b54:	vdiv.f32	s2, s2, s0
   16b58:	vcvt.u32.f32	s0, s2
   16b5c:	vcmpe.f32	s2, s4
   16b60:	vmrs	APSR_nzcv, fpscr
   16b64:	bge	16c90 <__assert_fail@plt+0x53a4>
   16b68:	vmov	r1, s0
   16b6c:	cmp	r1, #10
   16b70:	mov	r5, #0
   16b74:	movls	r1, #10
   16b78:	orr	r6, r1, #1
   16b7c:	cmn	r6, #1
   16b80:	beq	16c90 <__assert_fail@plt+0x53a4>
   16b84:	mov	r0, #3
   16b88:	cmp	r6, #10
   16b8c:	bcc	16bc4 <__assert_fail@plt+0x52d8>
   16b90:	mov	r0, #3
   16b94:	mov	r2, #9
   16b98:	mov	r1, #12
   16b9c:	udiv	r3, r6, r0
   16ba0:	mls	r3, r3, r0, r6
   16ba4:	cmp	r3, #0
   16ba8:	beq	16bc4 <__assert_fail@plt+0x52d8>
   16bac:	add	r2, r2, r1
   16bb0:	add	r1, r1, #8
   16bb4:	add	r0, r0, #2
   16bb8:	add	r2, r2, #4
   16bbc:	cmp	r2, r6
   16bc0:	bcc	16b9c <__assert_fail@plt+0x52b0>
   16bc4:	udiv	r1, r6, r0
   16bc8:	mls	r0, r1, r0, r6
   16bcc:	cmp	r0, #0
   16bd0:	bne	16be4 <__assert_fail@plt+0x52f8>
   16bd4:	add	r6, r6, #2
   16bd8:	cmn	r6, #1
   16bdc:	bne	16b84 <__assert_fail@plt+0x5298>
   16be0:	b	16c90 <__assert_fail@plt+0x53a4>
   16be4:	sub	r0, r6, #1
   16be8:	cmn	r0, #-536870910	; 0xe0000002
   16bec:	bhi	16c90 <__assert_fail@plt+0x53a4>
   16bf0:	ldr	r0, [r4, #8]
   16bf4:	cmp	r6, r0
   16bf8:	bne	16c0c <__assert_fail@plt+0x5320>
   16bfc:	mov	r5, #1
   16c00:	mov	r0, r5
   16c04:	sub	sp, fp, #28
   16c08:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16c0c:	mov	r0, r6
   16c10:	mov	r1, #8
   16c14:	bl	1dc78 <__assert_fail@plt+0xc38c>
   16c18:	cmp	r0, #0
   16c1c:	str	r0, [sp, #4]
   16c20:	beq	16c90 <__assert_fail@plt+0x53a4>
   16c24:	add	r0, r0, r6, lsl #3
   16c28:	mov	r1, #0
   16c2c:	add	r5, sp, #4
   16c30:	mov	sl, r4
   16c34:	mov	r2, #0
   16c38:	str	r1, [sp, #20]
   16c3c:	str	r1, [sp, #16]
   16c40:	str	r6, [sp, #12]
   16c44:	mov	r1, r4
   16c48:	str	r0, [sp, #8]
   16c4c:	add	r0, r5, #20
   16c50:	vld1.32	{d16-d17}, [r7]
   16c54:	vst1.32	{d16-d17}, [r0]
   16c58:	ldr	r0, [sl, #36]!	; 0x24
   16c5c:	str	r0, [sp, #40]	; 0x28
   16c60:	mov	r0, r5
   16c64:	bl	16da4 <__assert_fail@plt+0x54b8>
   16c68:	cmp	r0, #0
   16c6c:	beq	16c9c <__assert_fail@plt+0x53b0>
   16c70:	ldr	r0, [r4]
   16c74:	bl	160c4 <__assert_fail@plt+0x47d8>
   16c78:	mov	r0, #36	; 0x24
   16c7c:	vld1.32	{d16-d17}, [r5], r0
   16c80:	vst1.32	{d16-d17}, [r4], r0
   16c84:	ldr	r0, [r5]
   16c88:	mov	r5, #1
   16c8c:	str	r0, [r4]
   16c90:	mov	r0, r5
   16c94:	sub	sp, fp, #28
   16c98:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16c9c:	ldr	r0, [sp, #40]	; 0x28
   16ca0:	str	r0, [sl]
   16ca4:	ldr	r0, [sp, #8]
   16ca8:	ldr	r8, [sp, #4]
   16cac:	cmp	r8, r0
   16cb0:	str	r0, [sp]
   16cb4:	bcs	16d6c <__assert_fail@plt+0x5480>
   16cb8:	mov	r9, #0
   16cbc:	ldr	r0, [r8]
   16cc0:	cmp	r0, #0
   16cc4:	bne	16cec <__assert_fail@plt+0x5400>
   16cc8:	b	16cd0 <__assert_fail@plt+0x53e4>
   16ccc:	str	r9, [r8, #4]
   16cd0:	ldr	r0, [sp]
   16cd4:	add	r8, r8, #8
   16cd8:	cmp	r8, r0
   16cdc:	bcs	16d6c <__assert_fail@plt+0x5480>
   16ce0:	ldr	r0, [r8]
   16ce4:	cmp	r0, #0
   16ce8:	beq	16cd0 <__assert_fail@plt+0x53e4>
   16cec:	ldr	r6, [r8, #4]
   16cf0:	cmp	r6, #0
   16cf4:	beq	16ccc <__assert_fail@plt+0x53e0>
   16cf8:	ldr	r1, [r4, #8]
   16cfc:	b	16d20 <__assert_fail@plt+0x5434>
   16d00:	add	r0, r3, r0, lsl #3
   16d04:	add	r0, r0, #4
   16d08:	ldr	r3, [r0]
   16d0c:	cmp	r2, #0
   16d10:	str	r3, [r6, #4]
   16d14:	str	r6, [r0]
   16d18:	mov	r6, r2
   16d1c:	beq	16ccc <__assert_fail@plt+0x53e0>
   16d20:	ldr	r5, [r6]
   16d24:	ldr	r2, [r4, #24]
   16d28:	mov	r0, r5
   16d2c:	blx	r2
   16d30:	ldr	r1, [r4, #8]
   16d34:	cmp	r0, r1
   16d38:	bcs	16d9c <__assert_fail@plt+0x54b0>
   16d3c:	ldr	r3, [r4]
   16d40:	ldr	r2, [r6, #4]
   16d44:	ldr	r7, [r3, r0, lsl #3]
   16d48:	cmp	r7, #0
   16d4c:	bne	16d00 <__assert_fail@plt+0x5414>
   16d50:	str	r5, [r3, r0, lsl #3]
   16d54:	ldr	r0, [r4, #12]
   16d58:	add	r0, r0, #1
   16d5c:	str	r0, [r4, #12]
   16d60:	mov	r0, sl
   16d64:	str	r9, [r6]
   16d68:	b	16d08 <__assert_fail@plt+0x541c>
   16d6c:	add	r1, sp, #4
   16d70:	mov	r0, r4
   16d74:	mov	r2, #0
   16d78:	mov	r5, #0
   16d7c:	bl	16da4 <__assert_fail@plt+0x54b8>
   16d80:	cmp	r0, #0
   16d84:	beq	16d9c <__assert_fail@plt+0x54b0>
   16d88:	ldr	r0, [sp, #4]
   16d8c:	bl	160c4 <__assert_fail@plt+0x47d8>
   16d90:	mov	r0, r5
   16d94:	sub	sp, fp, #28
   16d98:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16d9c:	bl	118bc <abort@plt>
   16da0:	svcmi	0x00800000
   16da4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16da8:	add	fp, sp, #28
   16dac:	sub	sp, sp, #4
   16db0:	ldr	r8, [r1]
   16db4:	ldr	r3, [r1, #4]
   16db8:	mov	r6, r0
   16dbc:	mov	r0, #1
   16dc0:	str	r1, [sp]
   16dc4:	cmp	r8, r3
   16dc8:	bcs	16fdc <__assert_fail@plt+0x56f0>
   16dcc:	add	sl, r6, #36	; 0x24
   16dd0:	cmp	r2, #0
   16dd4:	beq	16e90 <__assert_fail@plt+0x55a4>
   16dd8:	mov	r9, #0
   16ddc:	ldr	r1, [r8]
   16de0:	cmp	r1, #0
   16de4:	bne	16e10 <__assert_fail@plt+0x5524>
   16de8:	b	16df8 <__assert_fail@plt+0x550c>
   16dec:	ldr	r0, [sp]
   16df0:	ldr	r3, [r0, #4]
   16df4:	str	r9, [r8, #4]
   16df8:	add	r8, r8, #8
   16dfc:	cmp	r8, r3
   16e00:	bcs	16fd8 <__assert_fail@plt+0x56ec>
   16e04:	ldr	r1, [r8]
   16e08:	cmp	r1, #0
   16e0c:	beq	16df8 <__assert_fail@plt+0x550c>
   16e10:	ldr	r7, [r8, #4]
   16e14:	cmp	r7, #0
   16e18:	beq	16df4 <__assert_fail@plt+0x5508>
   16e1c:	ldr	r1, [r6, #8]
   16e20:	b	16e54 <__assert_fail@plt+0x5568>
   16e24:	str	r4, [r3, r0, lsl #3]
   16e28:	ldr	r0, [r6, #12]
   16e2c:	add	r0, r0, #1
   16e30:	str	r0, [r6, #12]
   16e34:	mov	r0, sl
   16e38:	str	r9, [r7]
   16e3c:	ldr	r3, [r0]
   16e40:	cmp	r2, #0
   16e44:	str	r3, [r7, #4]
   16e48:	str	r7, [r0]
   16e4c:	mov	r7, r2
   16e50:	beq	16dec <__assert_fail@plt+0x5500>
   16e54:	ldr	r4, [r7]
   16e58:	ldr	r2, [r6, #24]
   16e5c:	mov	r0, r4
   16e60:	blx	r2
   16e64:	ldr	r1, [r6, #8]
   16e68:	cmp	r0, r1
   16e6c:	bcs	16ff0 <__assert_fail@plt+0x5704>
   16e70:	ldr	r3, [r6]
   16e74:	ldr	r2, [r7, #4]
   16e78:	ldr	r5, [r3, r0, lsl #3]
   16e7c:	cmp	r5, #0
   16e80:	beq	16e24 <__assert_fail@plt+0x5538>
   16e84:	add	r0, r3, r0, lsl #3
   16e88:	add	r0, r0, #4
   16e8c:	b	16e3c <__assert_fail@plt+0x5550>
   16e90:	mov	r5, #0
   16e94:	ldr	r7, [r8]
   16e98:	cmp	r7, #0
   16e9c:	bne	16ee4 <__assert_fail@plt+0x55f8>
   16ea0:	b	16ecc <__assert_fail@plt+0x55e0>
   16ea4:	str	r7, [r9, r4, lsl #3]
   16ea8:	ldr	r0, [r6, #12]
   16eac:	add	r0, r0, #1
   16eb0:	str	r0, [r6, #12]
   16eb4:	ldr	r0, [sp]
   16eb8:	str	r5, [r8]
   16ebc:	ldr	r1, [r0, #12]
   16ec0:	ldr	r3, [r0, #4]
   16ec4:	sub	r1, r1, #1
   16ec8:	str	r1, [r0, #12]
   16ecc:	add	r8, r8, #8
   16ed0:	cmp	r8, r3
   16ed4:	bcs	16fd8 <__assert_fail@plt+0x56ec>
   16ed8:	ldr	r7, [r8]
   16edc:	cmp	r7, #0
   16ee0:	beq	16ecc <__assert_fail@plt+0x55e0>
   16ee4:	ldr	r9, [r8, #4]
   16ee8:	ldr	r1, [r6, #8]
   16eec:	cmp	r9, #0
   16ef0:	bne	16f18 <__assert_fail@plt+0x562c>
   16ef4:	b	16f68 <__assert_fail@plt+0x567c>
   16ef8:	add	r0, r3, r0, lsl #3
   16efc:	add	r0, r0, #4
   16f00:	ldr	r3, [r0]
   16f04:	cmp	r2, #0
   16f08:	str	r3, [r9, #4]
   16f0c:	str	r9, [r0]
   16f10:	mov	r9, r2
   16f14:	beq	16f64 <__assert_fail@plt+0x5678>
   16f18:	ldr	r4, [r9]
   16f1c:	ldr	r2, [r6, #24]
   16f20:	mov	r0, r4
   16f24:	blx	r2
   16f28:	ldr	r1, [r6, #8]
   16f2c:	cmp	r0, r1
   16f30:	bcs	16ff0 <__assert_fail@plt+0x5704>
   16f34:	ldr	r3, [r6]
   16f38:	ldr	r2, [r9, #4]
   16f3c:	ldr	r7, [r3, r0, lsl #3]
   16f40:	cmp	r7, #0
   16f44:	bne	16ef8 <__assert_fail@plt+0x560c>
   16f48:	str	r4, [r3, r0, lsl #3]
   16f4c:	ldr	r0, [r6, #12]
   16f50:	add	r0, r0, #1
   16f54:	str	r0, [r6, #12]
   16f58:	mov	r0, sl
   16f5c:	str	r5, [r9]
   16f60:	b	16f00 <__assert_fail@plt+0x5614>
   16f64:	ldr	r7, [r8]
   16f68:	str	r5, [r8, #4]
   16f6c:	mov	r0, r7
   16f70:	ldr	r2, [r6, #24]
   16f74:	blx	r2
   16f78:	mov	r4, r0
   16f7c:	ldr	r0, [r6, #8]
   16f80:	cmp	r4, r0
   16f84:	bcs	16ff0 <__assert_fail@plt+0x5704>
   16f88:	ldr	r9, [r6]
   16f8c:	ldr	r0, [r9, r4, lsl #3]
   16f90:	cmp	r0, #0
   16f94:	beq	16ea4 <__assert_fail@plt+0x55b8>
   16f98:	ldr	r0, [sl]
   16f9c:	cmp	r0, #0
   16fa0:	beq	16fb0 <__assert_fail@plt+0x56c4>
   16fa4:	ldr	r1, [r0, #4]
   16fa8:	str	r1, [sl]
   16fac:	b	16fc0 <__assert_fail@plt+0x56d4>
   16fb0:	mov	r0, #8
   16fb4:	bl	1dccc <__assert_fail@plt+0xc3e0>
   16fb8:	cmp	r0, #0
   16fbc:	beq	16fe4 <__assert_fail@plt+0x56f8>
   16fc0:	add	r1, r9, r4, lsl #3
   16fc4:	str	r7, [r0]
   16fc8:	ldr	r2, [r1, #4]
   16fcc:	str	r2, [r0, #4]
   16fd0:	str	r0, [r1, #4]
   16fd4:	b	16eb4 <__assert_fail@plt+0x55c8>
   16fd8:	mov	r0, #1
   16fdc:	sub	sp, fp, #28
   16fe0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16fe4:	mov	r0, #0
   16fe8:	sub	sp, fp, #28
   16fec:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16ff0:	bl	118bc <abort@plt>
   16ff4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16ff8:	add	fp, sp, #28
   16ffc:	sub	sp, sp, #4
   17000:	cmp	r1, #0
   17004:	beq	17340 <__assert_fail@plt+0x5a54>
   17008:	mov	r8, r2
   1700c:	mov	sl, r1
   17010:	ldr	r1, [r0, #8]
   17014:	ldr	r2, [r0, #24]
   17018:	mov	r4, r0
   1701c:	mov	r0, sl
   17020:	blx	r2
   17024:	mov	r7, r0
   17028:	ldr	r0, [r4, #8]
   1702c:	cmp	r7, r0
   17030:	bcs	17340 <__assert_fail@plt+0x5a54>
   17034:	ldr	r5, [r4]
   17038:	mov	r9, r5
   1703c:	ldr	r1, [r9, r7, lsl #3]!
   17040:	cmp	r1, #0
   17044:	beq	170d8 <__assert_fail@plt+0x57ec>
   17048:	cmp	r1, sl
   1704c:	beq	17078 <__assert_fail@plt+0x578c>
   17050:	ldr	r2, [r4, #28]
   17054:	mov	r0, sl
   17058:	blx	r2
   1705c:	cmp	r0, #0
   17060:	mov	r6, r9
   17064:	beq	17094 <__assert_fail@plt+0x57a8>
   17068:	ldr	r0, [r6]
   1706c:	cmp	r0, #0
   17070:	bne	1707c <__assert_fail@plt+0x5790>
   17074:	b	170d8 <__assert_fail@plt+0x57ec>
   17078:	mov	r0, sl
   1707c:	cmp	r8, #0
   17080:	mov	r7, #0
   17084:	strne	r0, [r8]
   17088:	mov	r0, r7
   1708c:	sub	sp, fp, #28
   17090:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17094:	add	r6, r5, r7, lsl #3
   17098:	ldr	r0, [r6, #4]!
   1709c:	cmp	r0, #0
   170a0:	beq	170d8 <__assert_fail@plt+0x57ec>
   170a4:	ldr	r1, [r0]
   170a8:	cmp	r1, sl
   170ac:	beq	170cc <__assert_fail@plt+0x57e0>
   170b0:	ldr	r2, [r4, #28]
   170b4:	mov	r0, sl
   170b8:	blx	r2
   170bc:	ldr	r6, [r6]
   170c0:	cmp	r0, #0
   170c4:	beq	17098 <__assert_fail@plt+0x57ac>
   170c8:	b	17068 <__assert_fail@plt+0x577c>
   170cc:	mov	r0, sl
   170d0:	cmp	r0, #0
   170d4:	bne	1707c <__assert_fail@plt+0x5790>
   170d8:	vldr	s0, [r4, #8]
   170dc:	vldr	s2, [r4, #12]
   170e0:	ldr	r0, [r4, #20]
   170e4:	vcvt.f32.u32	s0, s0
   170e8:	vcvt.f32.u32	s4, s2
   170ec:	vldr	s2, [r0, #8]
   170f0:	vmul.f32	s6, s2, s0
   170f4:	vcmpe.f32	s6, s4
   170f8:	vmrs	APSR_nzcv, fpscr
   170fc:	bpl	17260 <__assert_fail@plt+0x5974>
   17100:	movw	r1, #4288	; 0x10c0
   17104:	movt	r1, #2
   17108:	cmp	r0, r1
   1710c:	beq	171a8 <__assert_fail@plt+0x58bc>
   17110:	vldr	s6, [pc, #556]	; 17344 <__assert_fail@plt+0x5a58>
   17114:	vcmpe.f32	s2, s6
   17118:	vmrs	APSR_nzcv, fpscr
   1711c:	ble	17184 <__assert_fail@plt+0x5898>
   17120:	vldr	s8, [pc, #544]	; 17348 <__assert_fail@plt+0x5a5c>
   17124:	vcmpe.f32	s2, s8
   17128:	vmrs	APSR_nzcv, fpscr
   1712c:	bpl	17184 <__assert_fail@plt+0x5898>
   17130:	vldr	s8, [pc, #532]	; 1734c <__assert_fail@plt+0x5a60>
   17134:	vldr	s10, [r0, #12]
   17138:	vcmpe.f32	s10, s8
   1713c:	vmrs	APSR_nzcv, fpscr
   17140:	ble	17184 <__assert_fail@plt+0x5898>
   17144:	vldr	s8, [r0]
   17148:	vcmpe.f32	s8, #0.0
   1714c:	vmrs	APSR_nzcv, fpscr
   17150:	blt	17184 <__assert_fail@plt+0x5898>
   17154:	vadd.f32	s6, s8, s6
   17158:	vcmpe.f32	s6, s2
   1715c:	vmrs	APSR_nzcv, fpscr
   17160:	bpl	17184 <__assert_fail@plt+0x5898>
   17164:	vldr	s8, [r0, #4]
   17168:	vmov.f32	s10, #112	; 0x3f800000  1.0
   1716c:	vcmpe.f32	s8, s10
   17170:	vmrs	APSR_nzcv, fpscr
   17174:	bhi	17184 <__assert_fail@plt+0x5898>
   17178:	vcmpe.f32	s6, s8
   1717c:	vmrs	APSR_nzcv, fpscr
   17180:	bmi	17194 <__assert_fail@plt+0x58a8>
   17184:	vldr	s2, [pc, #452]	; 17350 <__assert_fail@plt+0x5a64>
   17188:	movw	r0, #4288	; 0x10c0
   1718c:	movt	r0, #2
   17190:	str	r0, [r4, #20]
   17194:	vmul.f32	s6, s2, s0
   17198:	vcmpe.f32	s6, s4
   1719c:	vmrs	APSR_nzcv, fpscr
   171a0:	bmi	171bc <__assert_fail@plt+0x58d0>
   171a4:	b	17260 <__assert_fail@plt+0x5974>
   171a8:	mov	r0, r1
   171ac:	vmul.f32	s6, s2, s0
   171b0:	vcmpe.f32	s6, s4
   171b4:	vmrs	APSR_nzcv, fpscr
   171b8:	bpl	17260 <__assert_fail@plt+0x5974>
   171bc:	vldr	s4, [r0, #12]
   171c0:	ldrb	r0, [r0, #16]
   171c4:	mvn	r7, #0
   171c8:	cmp	r0, #0
   171cc:	vmul.f32	s0, s4, s0
   171d0:	vldr	s4, [pc, #380]	; 17354 <__assert_fail@plt+0x5a68>
   171d4:	vmul.f32	s2, s2, s0
   171d8:	vseleq.f32	s0, s2, s0
   171dc:	vcmpe.f32	s0, s4
   171e0:	vmrs	APSR_nzcv, fpscr
   171e4:	bge	172d4 <__assert_fail@plt+0x59e8>
   171e8:	vcvt.u32.f32	s0, s0
   171ec:	mov	r0, r4
   171f0:	vmov	r1, s0
   171f4:	bl	16b1c <__assert_fail@plt+0x5230>
   171f8:	cmp	r0, #0
   171fc:	beq	172d4 <__assert_fail@plt+0x59e8>
   17200:	ldr	r1, [r4, #8]
   17204:	ldr	r2, [r4, #24]
   17208:	mov	r0, sl
   1720c:	blx	r2
   17210:	mov	r7, r0
   17214:	ldr	r0, [r4, #8]
   17218:	cmp	r7, r0
   1721c:	bcs	17340 <__assert_fail@plt+0x5a54>
   17220:	ldr	r5, [r4]
   17224:	mov	r9, r5
   17228:	ldr	r1, [r9, r7, lsl #3]!
   1722c:	cmp	r1, #0
   17230:	beq	17260 <__assert_fail@plt+0x5974>
   17234:	cmp	r1, sl
   17238:	mov	r0, sl
   1723c:	beq	17258 <__assert_fail@plt+0x596c>
   17240:	ldr	r2, [r4, #28]
   17244:	mov	r0, sl
   17248:	blx	r2
   1724c:	cmp	r0, #0
   17250:	beq	172f0 <__assert_fail@plt+0x5a04>
   17254:	ldr	r0, [r9]
   17258:	cmp	r0, #0
   1725c:	bne	17340 <__assert_fail@plt+0x5a54>
   17260:	ldr	r0, [r9]
   17264:	cmp	r0, #0
   17268:	beq	17284 <__assert_fail@plt+0x5998>
   1726c:	ldr	r0, [r4, #36]	; 0x24
   17270:	cmp	r0, #0
   17274:	beq	172a4 <__assert_fail@plt+0x59b8>
   17278:	ldr	r1, [r0, #4]
   1727c:	str	r1, [r4, #36]	; 0x24
   17280:	b	172b4 <__assert_fail@plt+0x59c8>
   17284:	str	sl, [r9]
   17288:	ldr	r0, [r4, #12]
   1728c:	ldr	r1, [r4, #16]
   17290:	add	r0, r0, #1
   17294:	add	r1, r1, #1
   17298:	str	r0, [r4, #12]
   1729c:	str	r1, [r4, #16]
   172a0:	b	172d0 <__assert_fail@plt+0x59e4>
   172a4:	mov	r0, #8
   172a8:	bl	1dccc <__assert_fail@plt+0xc3e0>
   172ac:	cmp	r0, #0
   172b0:	beq	172e0 <__assert_fail@plt+0x59f4>
   172b4:	str	sl, [r0]
   172b8:	ldr	r1, [r9, #4]
   172bc:	str	r1, [r0, #4]
   172c0:	str	r0, [r9, #4]
   172c4:	ldr	r0, [r4, #16]
   172c8:	add	r0, r0, #1
   172cc:	str	r0, [r4, #16]
   172d0:	mov	r7, #1
   172d4:	mov	r0, r7
   172d8:	sub	sp, fp, #28
   172dc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   172e0:	mvn	r7, #0
   172e4:	mov	r0, r7
   172e8:	sub	sp, fp, #28
   172ec:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   172f0:	add	r6, r5, r7, lsl #3
   172f4:	ldr	r0, [r6, #4]!
   172f8:	cmp	r0, #0
   172fc:	beq	17260 <__assert_fail@plt+0x5974>
   17300:	ldr	r1, [r0]
   17304:	cmp	r1, sl
   17308:	beq	17334 <__assert_fail@plt+0x5a48>
   1730c:	ldr	r2, [r4, #28]
   17310:	mov	r0, sl
   17314:	blx	r2
   17318:	ldr	r6, [r6]
   1731c:	cmp	r0, #0
   17320:	beq	172f4 <__assert_fail@plt+0x5a08>
   17324:	ldr	r0, [r6]
   17328:	cmp	r0, #0
   1732c:	beq	17260 <__assert_fail@plt+0x5974>
   17330:	b	17340 <__assert_fail@plt+0x5a54>
   17334:	mov	r0, sl
   17338:	cmp	r0, #0
   1733c:	beq	17260 <__assert_fail@plt+0x5974>
   17340:	bl	118bc <abort@plt>
   17344:	stclcc	12, cr12, [ip, #820]	; 0x334
   17348:	svccc	0x00666666
   1734c:	svccc	0x008ccccd
   17350:	svccc	0x004ccccd
   17354:	svcmi	0x00800000
   17358:	push	{r4, sl, fp, lr}
   1735c:	add	fp, sp, #8
   17360:	sub	sp, sp, #8
   17364:	add	r2, sp, #4
   17368:	mov	r4, r1
   1736c:	bl	16ff4 <__assert_fail@plt+0x5708>
   17370:	cmn	r0, #1
   17374:	beq	17390 <__assert_fail@plt+0x5aa4>
   17378:	ldr	r1, [sp, #4]
   1737c:	cmp	r0, #0
   17380:	moveq	r4, r1
   17384:	mov	r0, r4
   17388:	sub	sp, fp, #8
   1738c:	pop	{r4, sl, fp, pc}
   17390:	mov	r4, #0
   17394:	mov	r0, r4
   17398:	sub	sp, fp, #8
   1739c:	pop	{r4, sl, fp, pc}
   173a0:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   173a4:	add	fp, sp, #24
   173a8:	mov	r9, r1
   173ac:	ldr	r1, [r0, #8]
   173b0:	ldr	r2, [r0, #24]
   173b4:	mov	r5, r0
   173b8:	mov	r0, r9
   173bc:	blx	r2
   173c0:	mov	r7, r0
   173c4:	ldr	r0, [r5, #8]
   173c8:	cmp	r7, r0
   173cc:	bcs	17640 <__assert_fail@plt+0x5d54>
   173d0:	ldr	r6, [r5]
   173d4:	mov	r8, #0
   173d8:	mov	r4, r6
   173dc:	ldr	r1, [r4, r7, lsl #3]!
   173e0:	cmp	r1, #0
   173e4:	beq	17498 <__assert_fail@plt+0x5bac>
   173e8:	cmp	r1, r9
   173ec:	beq	17408 <__assert_fail@plt+0x5b1c>
   173f0:	ldr	r2, [r5, #28]
   173f4:	mov	r0, r9
   173f8:	blx	r2
   173fc:	cmp	r0, #0
   17400:	beq	17440 <__assert_fail@plt+0x5b54>
   17404:	ldr	r9, [r4]
   17408:	add	r0, r6, r7, lsl #3
   1740c:	ldr	r0, [r0, #4]
   17410:	cmp	r0, #0
   17414:	beq	17488 <__assert_fail@plt+0x5b9c>
   17418:	ldm	r0, {r1, r2}
   1741c:	stm	r4, {r1, r2}
   17420:	mov	r1, #0
   17424:	str	r1, [r0]
   17428:	ldr	r1, [r5, #36]	; 0x24
   1742c:	str	r1, [r0, #4]
   17430:	str	r0, [r5, #36]	; 0x24
   17434:	cmp	r9, #0
   17438:	bne	174d0 <__assert_fail@plt+0x5be4>
   1743c:	b	17498 <__assert_fail@plt+0x5bac>
   17440:	add	r7, r6, r7, lsl #3
   17444:	ldr	r0, [r7, #4]!
   17448:	cmp	r0, #0
   1744c:	beq	17498 <__assert_fail@plt+0x5bac>
   17450:	ldr	r1, [r0]
   17454:	cmp	r1, r9
   17458:	beq	174a0 <__assert_fail@plt+0x5bb4>
   1745c:	ldr	r2, [r5, #28]
   17460:	mov	r0, r9
   17464:	blx	r2
   17468:	ldr	r1, [r7]
   1746c:	cmp	r0, #0
   17470:	bne	174a8 <__assert_fail@plt+0x5bbc>
   17474:	ldr	r0, [r1, #4]!
   17478:	mov	r7, r1
   1747c:	cmp	r0, #0
   17480:	bne	17450 <__assert_fail@plt+0x5b64>
   17484:	b	17498 <__assert_fail@plt+0x5bac>
   17488:	mov	r0, #0
   1748c:	str	r0, [r4]
   17490:	cmp	r9, #0
   17494:	bne	174d0 <__assert_fail@plt+0x5be4>
   17498:	mov	r0, r8
   1749c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   174a0:	mov	r1, r0
   174a4:	b	174ac <__assert_fail@plt+0x5bc0>
   174a8:	ldr	r9, [r1]
   174ac:	ldr	r0, [r1, #4]
   174b0:	str	r0, [r7]
   174b4:	mov	r0, #0
   174b8:	str	r0, [r1]
   174bc:	ldr	r0, [r5, #36]	; 0x24
   174c0:	str	r0, [r1, #4]
   174c4:	str	r1, [r5, #36]	; 0x24
   174c8:	cmp	r9, #0
   174cc:	beq	17498 <__assert_fail@plt+0x5bac>
   174d0:	ldr	r0, [r5, #16]
   174d4:	sub	r0, r0, #1
   174d8:	str	r0, [r5, #16]
   174dc:	ldr	r0, [r4]
   174e0:	cmp	r0, #0
   174e4:	bne	17634 <__assert_fail@plt+0x5d48>
   174e8:	ldr	r0, [r5, #12]
   174ec:	vldr	s0, [r5, #8]
   174f0:	sub	r1, r0, #1
   174f4:	str	r1, [r5, #12]
   174f8:	vmov	s2, r1
   174fc:	ldr	r0, [r5, #20]
   17500:	vcvt.f32.u32	s0, s0
   17504:	vcvt.f32.u32	s2, s2
   17508:	vldr	s4, [r0]
   1750c:	vmul.f32	s6, s4, s0
   17510:	vcmpe.f32	s6, s2
   17514:	vmrs	APSR_nzcv, fpscr
   17518:	ble	17634 <__assert_fail@plt+0x5d48>
   1751c:	movw	r1, #4288	; 0x10c0
   17520:	movt	r1, #2
   17524:	cmp	r0, r1
   17528:	beq	175c4 <__assert_fail@plt+0x5cd8>
   1752c:	vldr	s8, [pc, #272]	; 17644 <__assert_fail@plt+0x5d58>
   17530:	vldr	s6, [r0, #8]
   17534:	vcmpe.f32	s6, s8
   17538:	vmrs	APSR_nzcv, fpscr
   1753c:	ble	175a0 <__assert_fail@plt+0x5cb4>
   17540:	vldr	s10, [pc, #256]	; 17648 <__assert_fail@plt+0x5d5c>
   17544:	vcmpe.f32	s6, s10
   17548:	vmrs	APSR_nzcv, fpscr
   1754c:	bpl	175a0 <__assert_fail@plt+0x5cb4>
   17550:	vcmpe.f32	s4, #0.0
   17554:	vmrs	APSR_nzcv, fpscr
   17558:	blt	175a0 <__assert_fail@plt+0x5cb4>
   1755c:	vldr	s10, [r0, #12]
   17560:	vldr	s12, [pc, #228]	; 1764c <__assert_fail@plt+0x5d60>
   17564:	vcmpe.f32	s10, s12
   17568:	vmrs	APSR_nzcv, fpscr
   1756c:	ble	175a0 <__assert_fail@plt+0x5cb4>
   17570:	vadd.f32	s8, s4, s8
   17574:	vcmpe.f32	s8, s6
   17578:	vmrs	APSR_nzcv, fpscr
   1757c:	bpl	175a0 <__assert_fail@plt+0x5cb4>
   17580:	vldr	s6, [r0, #4]
   17584:	vmov.f32	s10, #112	; 0x3f800000  1.0
   17588:	vcmpe.f32	s6, s10
   1758c:	vmrs	APSR_nzcv, fpscr
   17590:	bhi	175a0 <__assert_fail@plt+0x5cb4>
   17594:	vcmpe.f32	s8, s6
   17598:	vmrs	APSR_nzcv, fpscr
   1759c:	bmi	175b0 <__assert_fail@plt+0x5cc4>
   175a0:	vldr	s4, [pc, #168]	; 17650 <__assert_fail@plt+0x5d64>
   175a4:	movw	r0, #4288	; 0x10c0
   175a8:	movt	r0, #2
   175ac:	str	r0, [r5, #20]
   175b0:	vmul.f32	s4, s4, s0
   175b4:	vcmpe.f32	s4, s2
   175b8:	vmrs	APSR_nzcv, fpscr
   175bc:	bgt	175d8 <__assert_fail@plt+0x5cec>
   175c0:	b	17634 <__assert_fail@plt+0x5d48>
   175c4:	mov	r0, r1
   175c8:	vmul.f32	s4, s4, s0
   175cc:	vcmpe.f32	s4, s2
   175d0:	vmrs	APSR_nzcv, fpscr
   175d4:	ble	17634 <__assert_fail@plt+0x5d48>
   175d8:	vldr	s2, [r0, #4]
   175dc:	ldrb	r1, [r0, #16]
   175e0:	cmp	r1, #0
   175e4:	vmul.f32	s0, s2, s0
   175e8:	bne	175f4 <__assert_fail@plt+0x5d08>
   175ec:	vldr	s2, [r0, #8]
   175f0:	vmul.f32	s0, s0, s2
   175f4:	vcvt.u32.f32	s0, s0
   175f8:	mov	r0, r5
   175fc:	vmov	r1, s0
   17600:	bl	16b1c <__assert_fail@plt+0x5230>
   17604:	cmp	r0, #0
   17608:	bne	17634 <__assert_fail@plt+0x5d48>
   1760c:	ldr	r0, [r5, #36]	; 0x24
   17610:	cmp	r0, #0
   17614:	beq	1762c <__assert_fail@plt+0x5d40>
   17618:	ldr	r4, [r0, #4]
   1761c:	bl	160c4 <__assert_fail@plt+0x47d8>
   17620:	cmp	r4, #0
   17624:	mov	r0, r4
   17628:	bne	17618 <__assert_fail@plt+0x5d2c>
   1762c:	mov	r0, #0
   17630:	str	r0, [r5, #36]	; 0x24
   17634:	mov	r8, r9
   17638:	mov	r0, r8
   1763c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   17640:	bl	118bc <abort@plt>
   17644:	stclcc	12, cr12, [ip, #820]	; 0x334
   17648:	svccc	0x00666666
   1764c:	svccc	0x008ccccd
   17650:	andeq	r0, r0, r0
   17654:	b	173a0 <__assert_fail@plt+0x5ab4>
   17658:	push	{r4, r5, fp, lr}
   1765c:	add	fp, sp, #8
   17660:	mov	r5, r0
   17664:	ldr	r0, [r0]
   17668:	mov	r4, r1
   1766c:	bl	1f610 <__assert_fail@plt+0xdd24>
   17670:	ldrd	r2, [r5, #8]
   17674:	eor	r0, r2, r0
   17678:	mov	r1, r3
   1767c:	mov	r2, r4
   17680:	mov	r3, #0
   17684:	bl	1fd5c <__assert_fail@plt+0xe470>
   17688:	mov	r0, r2
   1768c:	pop	{r4, r5, fp, pc}
   17690:	push	{r4, r5, fp, lr}
   17694:	add	fp, sp, #8
   17698:	mov	lr, r1
   1769c:	mov	r2, r0
   176a0:	ldr	r3, [r2, #8]!
   176a4:	ldr	ip, [lr, #8]!
   176a8:	ldr	r4, [r2, #4]
   176ac:	eor	ip, r3, ip
   176b0:	ldr	r3, [lr, #4]
   176b4:	eor	r3, r4, r3
   176b8:	orrs	r3, ip, r3
   176bc:	mov	ip, #0
   176c0:	bne	176f0 <__assert_fail@plt+0x5e04>
   176c4:	ldrd	r4, [lr, #8]
   176c8:	ldrd	r2, [r2, #8]
   176cc:	eor	r3, r3, r5
   176d0:	eor	r2, r2, r4
   176d4:	orrs	r2, r2, r3
   176d8:	bne	176f0 <__assert_fail@plt+0x5e04>
   176dc:	ldr	r1, [r1]
   176e0:	ldr	r0, [r0]
   176e4:	bl	11520 <strcmp@plt>
   176e8:	clz	r0, r0
   176ec:	lsr	ip, r0, #5
   176f0:	mov	r0, ip
   176f4:	pop	{r4, r5, fp, pc}
   176f8:	push	{r4, sl, fp, lr}
   176fc:	add	fp, sp, #8
   17700:	mov	r4, r0
   17704:	ldr	r0, [r0]
   17708:	bl	160c4 <__assert_fail@plt+0x47d8>
   1770c:	mov	r0, r4
   17710:	pop	{r4, sl, fp, lr}
   17714:	b	160c4 <__assert_fail@plt+0x47d8>
   17718:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1771c:	add	fp, sp, #28
   17720:	sub	sp, sp, #4
   17724:	vpush	{d8-d9}
   17728:	sub	sp, sp, #104	; 0x68
   1772c:	mov	r6, r3
   17730:	mov	r7, r2
   17734:	str	r1, [sp, #44]	; 0x2c
   17738:	mov	sl, r0
   1773c:	bl	11838 <localeconv@plt>
   17740:	ldr	r5, [r0]
   17744:	mov	r4, r0
   17748:	mov	r0, r5
   1774c:	bl	11718 <strlen@plt>
   17750:	sub	r1, r0, #1
   17754:	movw	r2, #4075	; 0xfeb
   17758:	cmp	r1, #16
   1775c:	movt	r2, #2
   17760:	movcs	r0, #1
   17764:	movcc	r2, r5
   17768:	ldr	r5, [r4, #4]
   1776c:	str	r0, [sp, #12]
   17770:	ldr	r0, [r4, #8]
   17774:	str	r2, [sp, #8]
   17778:	str	r0, [sp, #16]
   1777c:	mov	r0, r5
   17780:	bl	11718 <strlen@plt>
   17784:	cmp	r0, #17
   17788:	movw	r0, #647	; 0x287
   1778c:	movw	r1, #2823	; 0xb07
   17790:	str	r7, [sp, #32]
   17794:	ldr	r4, [fp, #16]
   17798:	str	r6, [sp, #40]	; 0x28
   1779c:	add	r0, r7, r0
   177a0:	movt	r1, #2
   177a4:	movcc	r1, r5
   177a8:	ldr	r7, [fp, #8]
   177ac:	ldr	r5, [fp, #12]
   177b0:	str	r0, [sp, #36]	; 0x24
   177b4:	ands	r0, r6, #32
   177b8:	str	r1, [sp, #52]	; 0x34
   177bc:	str	r0, [sp, #24]
   177c0:	mov	r0, #1000	; 0x3e8
   177c4:	movwne	r0, #1024	; 0x400
   177c8:	str	r0, [sp, #20]
   177cc:	and	r0, r6, #3
   177d0:	ldr	r6, [fp, #20]
   177d4:	str	r0, [sp, #48]	; 0x30
   177d8:	subs	r0, r7, r4
   177dc:	sbcs	r0, r5, r6
   177e0:	bcs	178cc <__assert_fail@plt+0x5fe0>
   177e4:	orrs	r0, r7, r5
   177e8:	beq	179d4 <__assert_fail@plt+0x60e8>
   177ec:	ldr	r9, [fp, #16]
   177f0:	mov	r1, r6
   177f4:	mov	r2, r7
   177f8:	mov	r3, r5
   177fc:	mov	r0, r9
   17800:	bl	1fd5c <__assert_fail@plt+0xe470>
   17804:	mov	r4, r0
   17808:	mov	r8, r1
   1780c:	umull	r0, r1, r0, r7
   17810:	mla	r1, r4, r5, r1
   17814:	mla	r1, r8, r7, r1
   17818:	subs	r0, r9, r0
   1781c:	sbc	r1, r6, r1
   17820:	orrs	r0, r0, r1
   17824:	bne	179d4 <__assert_fail@plt+0x60e8>
   17828:	ldr	r5, [sp, #44]	; 0x2c
   1782c:	mov	r0, sl
   17830:	mov	r2, r4
   17834:	mov	r3, r8
   17838:	mov	r1, r5
   1783c:	bl	1fd5c <__assert_fail@plt+0xe470>
   17840:	mov	r9, r1
   17844:	umull	r2, r1, r0, r4
   17848:	str	r0, [sp, #28]
   1784c:	mov	r3, r8
   17850:	mla	r1, r0, r8, r1
   17854:	mla	r1, r9, r4, r1
   17858:	subs	r0, sl, r2
   1785c:	mov	r2, #10
   17860:	sbc	r1, r5, r1
   17864:	umull	r5, r0, r0, r2
   17868:	mov	r2, r4
   1786c:	add	r1, r1, r1, lsl #2
   17870:	add	r6, r0, r1, lsl #1
   17874:	mov	r0, r5
   17878:	mov	r1, r6
   1787c:	bl	1fd5c <__assert_fail@plt+0xe470>
   17880:	mov	r7, r0
   17884:	umull	r0, r2, r0, r4
   17888:	mla	r2, r7, r8, r2
   1788c:	mla	r1, r1, r4, r2
   17890:	mov	r2, #2
   17894:	subs	r0, r5, r0
   17898:	sbc	r1, r6, r1
   1789c:	subs	r3, r4, r0, lsl #1
   178a0:	lsl	r1, r1, #1
   178a4:	orr	r1, r1, r0, lsr #31
   178a8:	orr	ip, r1, r0, lsl #1
   178ac:	sbcs	r3, r8, r1
   178b0:	movwcc	r2, #3
   178b4:	cmp	ip, #0
   178b8:	movwne	ip, #1
   178bc:	rsbs	r0, r4, r0, lsl #1
   178c0:	sbcs	r0, r1, r8
   178c4:	movcs	ip, r2
   178c8:	b	17938 <__assert_fail@plt+0x604c>
   178cc:	mov	r0, r7
   178d0:	mov	r1, r5
   178d4:	mov	r2, r4
   178d8:	mov	r3, r6
   178dc:	bl	1fd5c <__assert_fail@plt+0xe470>
   178e0:	mov	r2, r0
   178e4:	mov	r3, r1
   178e8:	umull	r0, r1, r0, r4
   178ec:	mla	r1, r2, r6, r1
   178f0:	mla	r1, r3, r4, r1
   178f4:	subs	r0, r7, r0
   178f8:	sbc	r1, r5, r1
   178fc:	orrs	r0, r0, r1
   17900:	bne	179d4 <__assert_fail@plt+0x60e8>
   17904:	ldr	r4, [sp, #44]	; 0x2c
   17908:	umull	r0, r1, r2, sl
   1790c:	mla	r1, r2, r4, r1
   17910:	str	r0, [sp, #28]
   17914:	mla	r9, r3, sl, r1
   17918:	mov	r1, r9
   1791c:	bl	1fd5c <__assert_fail@plt+0xe470>
   17920:	eor	r1, r1, r4
   17924:	eor	r0, r0, sl
   17928:	orrs	r0, r0, r1
   1792c:	bne	179d4 <__assert_fail@plt+0x60e8>
   17930:	mov	ip, #0
   17934:	mov	r7, #0
   17938:	ldr	r0, [sp, #40]	; 0x28
   1793c:	ldr	r8, [sp, #20]
   17940:	ldr	r5, [sp, #48]	; 0x30
   17944:	mvn	r3, #0
   17948:	ands	r4, r0, #16
   1794c:	beq	17ce8 <__assert_fail@plt+0x63fc>
   17950:	ldr	sl, [sp, #28]
   17954:	mov	r3, #0
   17958:	subs	r0, sl, r8
   1795c:	sbcs	r0, r9, #0
   17960:	bcc	182ac <__assert_fail@plt+0x69c0>
   17964:	mov	r0, sl
   17968:	mov	r1, r9
   1796c:	mov	r2, r8
   17970:	mov	r3, #0
   17974:	mov	r6, r5
   17978:	mov	r5, ip
   1797c:	bl	1fd5c <__assert_fail@plt+0xe470>
   17980:	mov	r3, sl
   17984:	mov	sl, r0
   17988:	mov	r2, r5
   1798c:	mov	r9, r1
   17990:	mls	r0, r0, r8, r3
   17994:	add	r0, r0, r0, lsl #2
   17998:	add	r0, r7, r0, lsl #1
   1799c:	udiv	r7, r0, r8
   179a0:	mls	r0, r7, r8, r0
   179a4:	lsl	r0, r0, #1
   179a8:	orr	r0, r0, r5, lsr #1
   179ac:	cmp	r0, r8
   179b0:	bcs	17ef0 <__assert_fail@plt+0x6604>
   179b4:	rsb	r1, r2, #0
   179b8:	subs	ip, r0, r1
   179bc:	movwne	ip, #1
   179c0:	subs	r0, sl, r8
   179c4:	mov	r3, #1
   179c8:	sbcs	r0, r9, #0
   179cc:	bcs	17f10 <__assert_fail@plt+0x6624>
   179d0:	b	18034 <__assert_fail@plt+0x6748>
   179d4:	ldr	r9, [fp, #16]
   179d8:	mov	r1, r6
   179dc:	mov	r0, r9
   179e0:	bl	1fce8 <__assert_fail@plt+0xe3fc>
   179e4:	vmov	d8, r0, r1
   179e8:	ldr	r1, [sp, #44]	; 0x2c
   179ec:	mov	r0, sl
   179f0:	bl	1fce8 <__assert_fail@plt+0xe3fc>
   179f4:	mov	r4, r0
   179f8:	mov	r6, r1
   179fc:	mov	r0, r7
   17a00:	mov	r1, r5
   17a04:	bl	1fce8 <__assert_fail@plt+0xe3fc>
   17a08:	vmov	d16, r0, r1
   17a0c:	vmov	d17, r4, r6
   17a10:	ldr	r5, [sp, #40]	; 0x28
   17a14:	tst	r5, #16
   17a18:	vdiv.f64	d16, d16, d8
   17a1c:	vmul.f64	d8, d16, d17
   17a20:	bne	17aa0 <__assert_fail@plt+0x61b4>
   17a24:	ldr	r6, [sp, #48]	; 0x30
   17a28:	cmp	r6, #1
   17a2c:	beq	17d30 <__assert_fail@plt+0x6444>
   17a30:	vldr	d16, [pc, #752]	; 17d28 <__assert_fail@plt+0x643c>
   17a34:	ldr	r7, [sp, #36]	; 0x24
   17a38:	ldr	sl, [sp, #32]
   17a3c:	vcmpe.f64	d8, d16
   17a40:	vmrs	APSR_nzcv, fpscr
   17a44:	bpl	17d38 <__assert_fail@plt+0x644c>
   17a48:	vmov	r0, r1, d8
   17a4c:	bl	1fda8 <__assert_fail@plt+0xe4bc>
   17a50:	mov	r4, r0
   17a54:	mov	r8, r1
   17a58:	mov	r0, #0
   17a5c:	cmp	r6, #0
   17a60:	mov	r2, #0
   17a64:	bne	17a8c <__assert_fail@plt+0x61a0>
   17a68:	mov	r0, r4
   17a6c:	mov	r1, r8
   17a70:	bl	1fce8 <__assert_fail@plt+0xe3fc>
   17a74:	vmov	d16, r0, r1
   17a78:	mov	r2, #0
   17a7c:	mov	r0, #0
   17a80:	vcmp.f64	d8, d16
   17a84:	vmrs	APSR_nzcv, fpscr
   17a88:	movwne	r0, #1
   17a8c:	adds	r0, r0, r4
   17a90:	adc	r1, r2, r8
   17a94:	bl	1fce8 <__assert_fail@plt+0xe3fc>
   17a98:	vmov	d8, r0, r1
   17a9c:	b	17d38 <__assert_fail@plt+0x644c>
   17aa0:	ldr	r0, [sp, #20]
   17aa4:	mov	r1, #1
   17aa8:	vmov	s0, r0
   17aac:	vcvt.f64.u32	d16, s0
   17ab0:	ldr	r6, [sp, #48]	; 0x30
   17ab4:	vmul.f64	d17, d16, d16
   17ab8:	vcmpe.f64	d17, d8
   17abc:	vmrs	APSR_nzcv, fpscr
   17ac0:	bls	17ad8 <__assert_fail@plt+0x61ec>
   17ac4:	ldr	r7, [sp, #36]	; 0x24
   17ac8:	ldr	sl, [sp, #32]
   17acc:	ldr	r9, [sp, #12]
   17ad0:	vmov.f64	d17, d16
   17ad4:	b	17b74 <__assert_fail@plt+0x6288>
   17ad8:	vmul.f64	d18, d17, d16
   17adc:	ldr	r7, [sp, #36]	; 0x24
   17ae0:	ldr	sl, [sp, #32]
   17ae4:	ldr	r9, [sp, #12]
   17ae8:	mov	r1, #2
   17aec:	vcmpe.f64	d18, d8
   17af0:	vmrs	APSR_nzcv, fpscr
   17af4:	bhi	17b74 <__assert_fail@plt+0x6288>
   17af8:	vmul.f64	d19, d18, d16
   17afc:	vmov.f64	d17, d18
   17b00:	mov	r1, #3
   17b04:	vcmpe.f64	d19, d8
   17b08:	vmrs	APSR_nzcv, fpscr
   17b0c:	bhi	17b74 <__assert_fail@plt+0x6288>
   17b10:	vmul.f64	d18, d19, d16
   17b14:	vmov.f64	d17, d19
   17b18:	mov	r1, #4
   17b1c:	vcmpe.f64	d18, d8
   17b20:	vmrs	APSR_nzcv, fpscr
   17b24:	bhi	17b74 <__assert_fail@plt+0x6288>
   17b28:	vmul.f64	d19, d18, d16
   17b2c:	vmov.f64	d17, d18
   17b30:	mov	r1, #5
   17b34:	vcmpe.f64	d19, d8
   17b38:	vmrs	APSR_nzcv, fpscr
   17b3c:	bhi	17b74 <__assert_fail@plt+0x6288>
   17b40:	vmul.f64	d18, d19, d16
   17b44:	vmov.f64	d17, d19
   17b48:	mov	r1, #6
   17b4c:	vcmpe.f64	d18, d8
   17b50:	vmrs	APSR_nzcv, fpscr
   17b54:	bhi	17b74 <__assert_fail@plt+0x6288>
   17b58:	vmul.f64	d16, d18, d16
   17b5c:	mov	r1, #7
   17b60:	vmov.f64	d17, d18
   17b64:	vcmpe.f64	d16, d8
   17b68:	vmrs	APSR_nzcv, fpscr
   17b6c:	movls	r1, #8
   17b70:	vmovls.f64	d17, d16
   17b74:	vdiv.f64	d8, d8, d17
   17b78:	cmp	r6, #1
   17b7c:	str	r1, [sp, #28]
   17b80:	vmov.f64	d16, d8
   17b84:	beq	17bf4 <__assert_fail@plt+0x6308>
   17b88:	vldr	d16, [pc, #408]	; 17d28 <__assert_fail@plt+0x643c>
   17b8c:	vcmpe.f64	d8, d16
   17b90:	vmov.f64	d16, d8
   17b94:	vmrs	APSR_nzcv, fpscr
   17b98:	bpl	17bf4 <__assert_fail@plt+0x6308>
   17b9c:	vmov	r0, r1, d8
   17ba0:	bl	1fda8 <__assert_fail@plt+0xe4bc>
   17ba4:	mov	r4, r0
   17ba8:	mov	r8, r1
   17bac:	mov	r0, #0
   17bb0:	cmp	r6, #0
   17bb4:	mov	r2, #0
   17bb8:	bne	17be0 <__assert_fail@plt+0x62f4>
   17bbc:	mov	r0, r4
   17bc0:	mov	r1, r8
   17bc4:	bl	1fce8 <__assert_fail@plt+0xe3fc>
   17bc8:	vmov	d16, r0, r1
   17bcc:	mov	r2, #0
   17bd0:	mov	r0, #0
   17bd4:	vcmp.f64	d8, d16
   17bd8:	vmrs	APSR_nzcv, fpscr
   17bdc:	movwne	r0, #1
   17be0:	adds	r0, r0, r4
   17be4:	adc	r1, r2, r8
   17be8:	bl	1fce8 <__assert_fail@plt+0xe3fc>
   17bec:	vmov	d16, r0, r1
   17bf0:	ldr	r6, [sp, #48]	; 0x30
   17bf4:	movw	r3, #4314	; 0x10da
   17bf8:	mov	r0, sl
   17bfc:	mov	r1, #1
   17c00:	mvn	r2, #0
   17c04:	vstr	d16, [sp]
   17c08:	movt	r3, #2
   17c0c:	bl	11754 <__sprintf_chk@plt>
   17c10:	ldr	r1, [sp, #24]
   17c14:	mov	r0, #3
   17c18:	cmp	r1, #0
   17c1c:	movwne	r0, #2
   17c20:	add	r4, r0, r9
   17c24:	mov	r0, sl
   17c28:	bl	11718 <strlen@plt>
   17c2c:	cmp	r4, r0
   17c30:	bcs	17cb0 <__assert_fail@plt+0x63c4>
   17c34:	vmov.f64	d9, #36	; 0x41200000  10.0
   17c38:	cmp	r6, #1
   17c3c:	vmul.f64	d8, d8, d9
   17c40:	beq	17cd8 <__assert_fail@plt+0x63ec>
   17c44:	vldr	d16, [pc, #220]	; 17d28 <__assert_fail@plt+0x643c>
   17c48:	vcmpe.f64	d8, d16
   17c4c:	vmrs	APSR_nzcv, fpscr
   17c50:	bpl	17cd8 <__assert_fail@plt+0x63ec>
   17c54:	vmov	r0, r1, d8
   17c58:	bl	1fda8 <__assert_fail@plt+0xe4bc>
   17c5c:	ldr	r9, [fp, #16]
   17c60:	mov	r4, r0
   17c64:	mov	r8, r1
   17c68:	mov	r0, #0
   17c6c:	cmp	r6, #0
   17c70:	mov	r2, #0
   17c74:	bne	17c9c <__assert_fail@plt+0x63b0>
   17c78:	mov	r0, r4
   17c7c:	mov	r1, r8
   17c80:	bl	1fce8 <__assert_fail@plt+0xe3fc>
   17c84:	vmov	d16, r0, r1
   17c88:	mov	r2, #0
   17c8c:	mov	r0, #0
   17c90:	vcmp.f64	d8, d16
   17c94:	vmrs	APSR_nzcv, fpscr
   17c98:	movwne	r0, #1
   17c9c:	adds	r0, r0, r4
   17ca0:	adc	r1, r2, r8
   17ca4:	bl	1fce8 <__assert_fail@plt+0xe3fc>
   17ca8:	vmov	d8, r0, r1
   17cac:	b	17cdc <__assert_fail@plt+0x63f0>
   17cb0:	mov	r2, r0
   17cb4:	add	r4, r9, #1
   17cb8:	tst	r5, #8
   17cbc:	beq	17cd0 <__assert_fail@plt+0x63e4>
   17cc0:	add	r0, r2, sl
   17cc4:	ldrb	r0, [r0, #-1]
   17cc8:	cmp	r0, #48	; 0x30
   17ccc:	beq	17c34 <__assert_fail@plt+0x6348>
   17cd0:	ldr	r9, [fp, #16]
   17cd4:	b	17d6c <__assert_fail@plt+0x6480>
   17cd8:	ldr	r9, [fp, #16]
   17cdc:	vdiv.f64	d16, d8, d9
   17ce0:	vstr	d16, [sp]
   17ce4:	b	17d44 <__assert_fail@plt+0x6458>
   17ce8:	ldr	r6, [sp, #36]	; 0x24
   17cec:	ldr	sl, [sp, #28]
   17cf0:	cmp	r5, #0
   17cf4:	beq	182b8 <__assert_fail@plt+0x69cc>
   17cf8:	cmp	r5, #1
   17cfc:	bne	18328 <__assert_fail@plt+0x6a3c>
   17d00:	mov	r0, #0
   17d04:	rsbs	r1, ip, #0
   17d08:	and	r2, sl, #1
   17d0c:	sbc	r0, r0, #0
   17d10:	eor	r1, r2, r1
   17d14:	orrs	r0, r1, r0
   17d18:	addne	r7, r7, #1
   17d1c:	cmp	r7, #5
   17d20:	bgt	182c4 <__assert_fail@plt+0x69d8>
   17d24:	b	18328 <__assert_fail@plt+0x6a3c>
   17d28:	andeq	r0, r0, r0
   17d2c:	mvnsmi	r0, #0
   17d30:	ldr	r7, [sp, #36]	; 0x24
   17d34:	ldr	sl, [sp, #32]
   17d38:	mvn	r0, #0
   17d3c:	vstr	d8, [sp]
   17d40:	str	r0, [sp, #28]
   17d44:	movw	r3, #4308	; 0x10d4
   17d48:	mov	r0, sl
   17d4c:	mov	r1, #1
   17d50:	mvn	r2, #0
   17d54:	movt	r3, #2
   17d58:	bl	11754 <__sprintf_chk@plt>
   17d5c:	mov	r0, sl
   17d60:	bl	11718 <strlen@plt>
   17d64:	mov	r2, r0
   17d68:	mov	r4, #0
   17d6c:	sub	r0, r7, r2
   17d70:	mov	r1, sl
   17d74:	mov	r8, r0
   17d78:	bl	11544 <memmove@plt>
   17d7c:	sub	r6, r7, r4
   17d80:	tst	r5, #4
   17d84:	bne	18380 <__assert_fail@plt+0x6a94>
   17d88:	ldr	r3, [sp, #28]
   17d8c:	tst	r5, #128	; 0x80
   17d90:	beq	18498 <__assert_fail@plt+0x6bac>
   17d94:	cmn	r3, #1
   17d98:	bgt	17e84 <__assert_fail@plt+0x6598>
   17d9c:	subs	r0, r9, #2
   17da0:	ldr	r0, [fp, #20]
   17da4:	mov	r3, #0
   17da8:	sbcs	r0, r0, #0
   17dac:	bcc	17e84 <__assert_fail@plt+0x6598>
   17db0:	ldr	r0, [sp, #20]
   17db4:	mov	r3, #1
   17db8:	subs	r0, r0, r9
   17dbc:	ldr	r0, [fp, #20]
   17dc0:	rscs	r0, r0, #0
   17dc4:	bcs	17e84 <__assert_fail@plt+0x6598>
   17dc8:	ldr	r0, [sp, #20]
   17dcc:	mov	r3, #2
   17dd0:	umull	r1, r0, r0, r0
   17dd4:	subs	r2, r1, r9
   17dd8:	ldr	r2, [fp, #20]
   17ddc:	sbcs	r2, r0, r2
   17de0:	bcs	17e84 <__assert_fail@plt+0x6598>
   17de4:	ldr	r3, [sp, #20]
   17de8:	umull	r1, r2, r1, r3
   17dec:	mla	r2, r0, r3, r2
   17df0:	mov	r3, #3
   17df4:	subs	r0, r1, r9
   17df8:	ldr	r0, [fp, #20]
   17dfc:	sbcs	r0, r2, r0
   17e00:	bcs	17e84 <__assert_fail@plt+0x6598>
   17e04:	ldr	r3, [sp, #20]
   17e08:	umull	r0, r1, r1, r3
   17e0c:	mla	r1, r2, r3, r1
   17e10:	mov	r3, #4
   17e14:	subs	r2, r0, r9
   17e18:	ldr	r2, [fp, #20]
   17e1c:	sbcs	r2, r1, r2
   17e20:	bcs	17e84 <__assert_fail@plt+0x6598>
   17e24:	ldr	r3, [sp, #20]
   17e28:	umull	r0, r2, r0, r3
   17e2c:	mla	r1, r1, r3, r2
   17e30:	mov	r3, #5
   17e34:	subs	r2, r0, r9
   17e38:	ldr	r2, [fp, #20]
   17e3c:	sbcs	r2, r1, r2
   17e40:	bcs	17e84 <__assert_fail@plt+0x6598>
   17e44:	ldr	r3, [sp, #20]
   17e48:	umull	r0, r2, r0, r3
   17e4c:	mla	r1, r1, r3, r2
   17e50:	mov	r3, #6
   17e54:	subs	r2, r0, r9
   17e58:	ldr	r2, [fp, #20]
   17e5c:	sbcs	r2, r1, r2
   17e60:	bcs	17e84 <__assert_fail@plt+0x6598>
   17e64:	ldr	r3, [sp, #20]
   17e68:	umull	r0, r2, r0, r3
   17e6c:	mla	r1, r1, r3, r2
   17e70:	mov	r3, #7
   17e74:	subs	r0, r0, r9
   17e78:	ldr	r0, [fp, #20]
   17e7c:	sbcs	r0, r1, r0
   17e80:	movwcc	r3, #8
   17e84:	and	r0, r5, #256	; 0x100
   17e88:	tst	r5, #64	; 0x40
   17e8c:	orrsne	r1, r3, r0
   17e90:	movne	r1, #32
   17e94:	addne	r7, sl, #648	; 0x288
   17e98:	strbne	r1, [sl, #647]	; 0x287
   17e9c:	cmp	r3, #0
   17ea0:	beq	17ec8 <__assert_fail@plt+0x65dc>
   17ea4:	ldr	r1, [sp, #24]
   17ea8:	cmp	r1, #0
   17eac:	moveq	r1, #107	; 0x6b
   17eb0:	cmpeq	r3, #1
   17eb4:	beq	17ec4 <__assert_fail@plt+0x65d8>
   17eb8:	movw	r1, #4348	; 0x10fc
   17ebc:	movt	r1, #2
   17ec0:	ldrb	r1, [r1, r3]
   17ec4:	strb	r1, [r7], #1
   17ec8:	cmp	r0, #0
   17ecc:	beq	18498 <__assert_fail@plt+0x6bac>
   17ed0:	ldr	r0, [sp, #24]
   17ed4:	cmp	r0, #0
   17ed8:	cmpne	r3, #0
   17edc:	movne	r0, #105	; 0x69
   17ee0:	strbne	r0, [r7], #1
   17ee4:	mov	r0, #66	; 0x42
   17ee8:	strb	r0, [r7], #1
   17eec:	b	18498 <__assert_fail@plt+0x6bac>
   17ef0:	add	r0, r0, r2
   17ef4:	mov	ip, #2
   17ef8:	cmp	r8, r0
   17efc:	movwcc	ip, #3
   17f00:	subs	r0, sl, r8
   17f04:	mov	r3, #1
   17f08:	sbcs	r0, r9, #0
   17f0c:	bcc	18034 <__assert_fail@plt+0x6748>
   17f10:	mov	r0, sl
   17f14:	mov	r1, r9
   17f18:	mov	r2, r8
   17f1c:	mov	r3, #0
   17f20:	str	r4, [sp, #44]	; 0x2c
   17f24:	mov	r4, ip
   17f28:	bl	1fd5c <__assert_fail@plt+0xe470>
   17f2c:	mov	r2, r4
   17f30:	mov	r4, r0
   17f34:	mls	r0, r0, r8, sl
   17f38:	mov	r9, r1
   17f3c:	add	r0, r0, r0, lsl #2
   17f40:	add	r0, r7, r0, lsl #1
   17f44:	udiv	r7, r0, r8
   17f48:	mls	r0, r7, r8, r0
   17f4c:	lsl	r0, r0, #1
   17f50:	orr	r0, r0, r2, lsr #1
   17f54:	cmp	r0, r8
   17f58:	bcs	17f7c <__assert_fail@plt+0x6690>
   17f5c:	rsb	r1, r2, #0
   17f60:	subs	ip, r0, r1
   17f64:	movwne	ip, #1
   17f68:	subs	r0, r4, r8
   17f6c:	mov	r3, #2
   17f70:	sbcs	r0, r9, #0
   17f74:	bcs	17fb8 <__assert_fail@plt+0x66cc>
   17f78:	b	17f9c <__assert_fail@plt+0x66b0>
   17f7c:	add	r0, r0, r2
   17f80:	mov	ip, #2
   17f84:	cmp	r8, r0
   17f88:	movwcc	ip, #3
   17f8c:	subs	r0, r4, r8
   17f90:	mov	r3, #2
   17f94:	sbcs	r0, r9, #0
   17f98:	bcs	17fb8 <__assert_fail@plt+0x66cc>
   17f9c:	mov	sl, r4
   17fa0:	ldr	r4, [sp, #44]	; 0x2c
   17fa4:	mov	r5, r6
   17fa8:	rsbs	r0, sl, #9
   17fac:	rscs	r0, r9, #0
   17fb0:	bcc	182ac <__assert_fail@plt+0x69c0>
   17fb4:	b	18044 <__assert_fail@plt+0x6758>
   17fb8:	mov	r0, r4
   17fbc:	mov	r1, r9
   17fc0:	mov	r2, r8
   17fc4:	mov	r3, #0
   17fc8:	mov	r5, ip
   17fcc:	bl	1fd5c <__assert_fail@plt+0xe470>
   17fd0:	mov	sl, r0
   17fd4:	mls	r0, r0, r8, r4
   17fd8:	mov	r2, r5
   17fdc:	mov	r9, r1
   17fe0:	add	r0, r0, r0, lsl #2
   17fe4:	add	r0, r7, r0, lsl #1
   17fe8:	udiv	r7, r0, r8
   17fec:	mls	r0, r7, r8, r0
   17ff0:	lsl	r0, r0, #1
   17ff4:	orr	r0, r0, r5, lsr #1
   17ff8:	cmp	r0, r8
   17ffc:	bcs	18010 <__assert_fail@plt+0x6724>
   18000:	rsb	r1, r2, #0
   18004:	subs	ip, r0, r1
   18008:	movwne	ip, #1
   1800c:	b	18020 <__assert_fail@plt+0x6734>
   18010:	add	r0, r0, r2
   18014:	mov	ip, #2
   18018:	cmp	r8, r0
   1801c:	movwcc	ip, #3
   18020:	ldr	r4, [sp, #44]	; 0x2c
   18024:	subs	r0, sl, r8
   18028:	mov	r3, #3
   1802c:	sbcs	r0, r9, #0
   18030:	bcs	18110 <__assert_fail@plt+0x6824>
   18034:	mov	r5, r6
   18038:	rsbs	r0, sl, #9
   1803c:	rscs	r0, r9, #0
   18040:	bcc	182ac <__assert_fail@plt+0x69c0>
   18044:	cmp	r5, #1
   18048:	bne	18060 <__assert_fail@plt+0x6774>
   1804c:	and	r0, r7, #1
   18050:	add	r0, ip, r0
   18054:	cmp	r0, #2
   18058:	bhi	18070 <__assert_fail@plt+0x6784>
   1805c:	b	180a4 <__assert_fail@plt+0x67b8>
   18060:	cmp	r5, #0
   18064:	bne	180a4 <__assert_fail@plt+0x67b8>
   18068:	cmp	ip, #0
   1806c:	beq	180a4 <__assert_fail@plt+0x67b8>
   18070:	adds	r0, sl, #1
   18074:	add	r7, r7, #1
   18078:	mov	ip, #0
   1807c:	adc	r1, r9, #0
   18080:	cmp	r7, #10
   18084:	bne	180a4 <__assert_fail@plt+0x67b8>
   18088:	rsbs	r2, r0, #9
   1808c:	mov	r7, #0
   18090:	mov	sl, r0
   18094:	mov	r9, r1
   18098:	mov	ip, #0
   1809c:	rscs	r2, r1, #0
   180a0:	bcc	18178 <__assert_fail@plt+0x688c>
   180a4:	ldr	r0, [sp, #40]	; 0x28
   180a8:	tst	r0, #8
   180ac:	beq	180cc <__assert_fail@plt+0x67e0>
   180b0:	cmp	r7, #0
   180b4:	bne	180cc <__assert_fail@plt+0x67e0>
   180b8:	ldr	r6, [sp, #36]	; 0x24
   180bc:	mov	r7, #0
   180c0:	cmp	r5, #0
   180c4:	bne	17cf8 <__assert_fail@plt+0x640c>
   180c8:	b	182b8 <__assert_fail@plt+0x69cc>
   180cc:	ldr	r1, [sp, #32]
   180d0:	ldr	r2, [sp, #12]
   180d4:	add	r0, r7, #48	; 0x30
   180d8:	mov	r7, r4
   180dc:	mov	r4, r3
   180e0:	strb	r0, [r1, #646]!	; 0x286
   180e4:	sub	r0, r1, r2
   180e8:	ldr	r1, [sp, #8]
   180ec:	mov	r6, r0
   180f0:	bl	11574 <memcpy@plt>
   180f4:	mov	r3, r4
   180f8:	mov	r4, r7
   180fc:	mov	ip, #0
   18100:	mov	r7, #0
   18104:	cmp	r5, #0
   18108:	bne	17cf8 <__assert_fail@plt+0x640c>
   1810c:	b	182b8 <__assert_fail@plt+0x69cc>
   18110:	mov	r0, sl
   18114:	mov	r1, r9
   18118:	mov	r2, r8
   1811c:	mov	r3, #0
   18120:	mov	r4, ip
   18124:	bl	1fd5c <__assert_fail@plt+0xe470>
   18128:	mov	r2, r4
   1812c:	mov	r4, r0
   18130:	mls	r0, r0, r8, sl
   18134:	mov	r9, r1
   18138:	add	r0, r0, r0, lsl #2
   1813c:	add	r0, r7, r0, lsl #1
   18140:	udiv	r7, r0, r8
   18144:	mls	r0, r7, r8, r0
   18148:	lsl	r0, r0, #1
   1814c:	orr	r0, r0, r2, lsr #1
   18150:	cmp	r0, r8
   18154:	bcs	18194 <__assert_fail@plt+0x68a8>
   18158:	rsb	r1, r2, #0
   1815c:	subs	ip, r0, r1
   18160:	movwne	ip, #1
   18164:	subs	r0, r4, r8
   18168:	mov	r3, #4
   1816c:	sbcs	r0, r9, #0
   18170:	bcc	17f9c <__assert_fail@plt+0x66b0>
   18174:	b	181b4 <__assert_fail@plt+0x68c8>
   18178:	ldr	r6, [sp, #36]	; 0x24
   1817c:	mov	ip, #0
   18180:	mov	sl, #10
   18184:	mov	r9, #0
   18188:	cmp	r5, #0
   1818c:	bne	17cf8 <__assert_fail@plt+0x640c>
   18190:	b	182b8 <__assert_fail@plt+0x69cc>
   18194:	add	r0, r0, r2
   18198:	mov	ip, #2
   1819c:	cmp	r8, r0
   181a0:	movwcc	ip, #3
   181a4:	subs	r0, r4, r8
   181a8:	mov	r3, #4
   181ac:	sbcs	r0, r9, #0
   181b0:	bcc	17f9c <__assert_fail@plt+0x66b0>
   181b4:	mov	r0, r4
   181b8:	mov	r1, r9
   181bc:	mov	r2, r8
   181c0:	mov	r3, #0
   181c4:	mov	r5, ip
   181c8:	bl	1fd5c <__assert_fail@plt+0xe470>
   181cc:	mov	sl, r0
   181d0:	mls	r0, r0, r8, r4
   181d4:	mov	r2, r5
   181d8:	mov	r9, r1
   181dc:	add	r0, r0, r0, lsl #2
   181e0:	add	r0, r7, r0, lsl #1
   181e4:	udiv	r7, r0, r8
   181e8:	mls	r0, r7, r8, r0
   181ec:	lsl	r0, r0, #1
   181f0:	orr	r0, r0, r5, lsr #1
   181f4:	cmp	r0, r8
   181f8:	bcs	1820c <__assert_fail@plt+0x6920>
   181fc:	rsb	r1, r2, #0
   18200:	subs	ip, r0, r1
   18204:	movwne	ip, #1
   18208:	b	1821c <__assert_fail@plt+0x6930>
   1820c:	add	r0, r0, r2
   18210:	mov	ip, #2
   18214:	cmp	r8, r0
   18218:	movwcc	ip, #3
   1821c:	ldr	r4, [sp, #44]	; 0x2c
   18220:	subs	r0, sl, r8
   18224:	mov	r3, #5
   18228:	sbcs	r0, r9, #0
   1822c:	bcc	18034 <__assert_fail@plt+0x6748>
   18230:	mov	r0, sl
   18234:	mov	r1, r9
   18238:	mov	r2, r8
   1823c:	mov	r3, #0
   18240:	mov	r4, ip
   18244:	bl	1fd5c <__assert_fail@plt+0xe470>
   18248:	mov	r2, r4
   1824c:	mov	r4, r0
   18250:	mls	r0, r0, r8, sl
   18254:	mov	r9, r1
   18258:	add	r0, r0, r0, lsl #2
   1825c:	add	r0, r7, r0, lsl #1
   18260:	udiv	r7, r0, r8
   18264:	mls	r0, r7, r8, r0
   18268:	lsl	r0, r0, #1
   1826c:	orr	r0, r0, r2, lsr #1
   18270:	cmp	r0, r8
   18274:	bcs	184b4 <__assert_fail@plt+0x6bc8>
   18278:	rsb	r1, r2, #0
   1827c:	subs	ip, r0, r1
   18280:	movwne	ip, #1
   18284:	subs	r0, r4, r8
   18288:	mov	r3, #6
   1828c:	sbcs	r0, r9, #0
   18290:	bcs	184d4 <__assert_fail@plt+0x6be8>
   18294:	mov	sl, r4
   18298:	ldr	r4, [sp, #44]	; 0x2c
   1829c:	mov	r5, r6
   182a0:	rsbs	r0, sl, #9
   182a4:	rscs	r0, r9, #0
   182a8:	bcs	18044 <__assert_fail@plt+0x6758>
   182ac:	ldr	r6, [sp, #36]	; 0x24
   182b0:	cmp	r5, #0
   182b4:	bne	17cf8 <__assert_fail@plt+0x640c>
   182b8:	add	r0, r7, ip
   182bc:	cmp	r0, #1
   182c0:	blt	18328 <__assert_fail@plt+0x6a3c>
   182c4:	adds	sl, sl, #1
   182c8:	adc	r9, r9, #0
   182cc:	cmp	r3, #7
   182d0:	bgt	18328 <__assert_fail@plt+0x6a3c>
   182d4:	cmp	r4, #0
   182d8:	beq	18328 <__assert_fail@plt+0x6a3c>
   182dc:	ldr	r7, [sp, #36]	; 0x24
   182e0:	eor	r0, sl, r8
   182e4:	orrs	r0, r0, r9
   182e8:	bne	1832c <__assert_fail@plt+0x6a40>
   182ec:	ldr	r0, [sp, #40]	; 0x28
   182f0:	add	r3, r3, #1
   182f4:	mov	r9, #0
   182f8:	mov	sl, #1
   182fc:	str	r3, [sp, #28]
   18300:	tst	r0, #8
   18304:	bne	18330 <__assert_fail@plt+0x6a44>
   18308:	ldr	r2, [sp, #12]
   1830c:	mov	r0, #48	; 0x30
   18310:	ldr	r1, [sp, #8]
   18314:	strb	r0, [r6, #-1]!
   18318:	sub	r6, r6, r2
   1831c:	mov	r0, r6
   18320:	bl	11574 <memcpy@plt>
   18324:	b	18330 <__assert_fail@plt+0x6a44>
   18328:	ldr	r7, [sp, #36]	; 0x24
   1832c:	str	r3, [sp, #28]
   18330:	mov	r8, r6
   18334:	mov	r0, sl
   18338:	mov	r1, r9
   1833c:	mov	r2, #10
   18340:	mov	r3, #0
   18344:	bl	1fd5c <__assert_fail@plt+0xe470>
   18348:	add	r2, r0, r0, lsl #2
   1834c:	sub	r2, sl, r2, lsl #1
   18350:	orr	r2, r2, #48	; 0x30
   18354:	strb	r2, [r8, #-1]!
   18358:	rsbs	r2, sl, #9
   1835c:	mov	sl, r0
   18360:	rscs	r2, r9, #0
   18364:	mov	r9, r1
   18368:	bcc	18334 <__assert_fail@plt+0x6a48>
   1836c:	ldr	sl, [sp, #32]
   18370:	ldr	r5, [sp, #40]	; 0x28
   18374:	ldr	r9, [fp, #16]
   18378:	tst	r5, #4
   1837c:	beq	17d88 <__assert_fail@plt+0x649c>
   18380:	ldr	r9, [sp, #52]	; 0x34
   18384:	mov	r5, r8
   18388:	sub	r4, r6, r8
   1838c:	mov	r0, r9
   18390:	bl	11718 <strlen@plt>
   18394:	add	r8, sp, #56	; 0x38
   18398:	str	r0, [sp, #48]	; 0x30
   1839c:	mov	r1, r5
   183a0:	mov	r2, r4
   183a4:	mov	r0, r8
   183a8:	bl	11574 <memcpy@plt>
   183ac:	ldr	r5, [sp, #16]
   183b0:	ldrb	r7, [r5]
   183b4:	cmp	r7, #255	; 0xff
   183b8:	mov	sl, r7
   183bc:	moveq	sl, r4
   183c0:	cmp	r7, #0
   183c4:	mvneq	sl, #0
   183c8:	cmp	sl, r4
   183cc:	movhi	sl, r4
   183d0:	sub	r0, r6, sl
   183d4:	sub	r6, r4, sl
   183d8:	mov	r2, sl
   183dc:	add	r1, r8, r6
   183e0:	mov	r8, r0
   183e4:	bl	11574 <memcpy@plt>
   183e8:	cmp	r6, #0
   183ec:	beq	1847c <__assert_fail@plt+0x6b90>
   183f0:	clz	r0, r7
   183f4:	lsr	r9, r0, #5
   183f8:	ldr	r0, [sp, #48]	; 0x30
   183fc:	rsb	r0, r0, #0
   18400:	str	r0, [sp, #44]	; 0x2c
   18404:	ldr	r0, [sp, #44]	; 0x2c
   18408:	ldr	r1, [sp, #52]	; 0x34
   1840c:	ldr	r2, [sp, #48]	; 0x30
   18410:	add	r4, r8, r0
   18414:	mov	r0, r4
   18418:	bl	11574 <memcpy@plt>
   1841c:	tst	r9, #1
   18420:	add	r0, sp, #56	; 0x38
   18424:	addeq	r5, r5, #1
   18428:	mov	r9, r5
   1842c:	ldrb	r5, [r5]
   18430:	cmp	r5, #255	; 0xff
   18434:	mov	r7, r5
   18438:	moveq	r7, r6
   1843c:	cmp	r5, #0
   18440:	moveq	r7, sl
   18444:	cmp	r6, r7
   18448:	movcc	r7, r6
   1844c:	sub	r6, r6, r7
   18450:	sub	r8, r4, r7
   18454:	mov	r2, r7
   18458:	add	r1, r0, r6
   1845c:	mov	r0, r8
   18460:	bl	11574 <memcpy@plt>
   18464:	clz	r0, r5
   18468:	mov	r5, r9
   1846c:	cmp	r6, #0
   18470:	mov	sl, r7
   18474:	lsr	r9, r0, #5
   18478:	bne	18404 <__assert_fail@plt+0x6b18>
   1847c:	ldr	r7, [sp, #36]	; 0x24
   18480:	ldr	sl, [sp, #32]
   18484:	ldr	r5, [sp, #40]	; 0x28
   18488:	ldr	r9, [fp, #16]
   1848c:	ldr	r3, [sp, #28]
   18490:	tst	r5, #128	; 0x80
   18494:	bne	17d94 <__assert_fail@plt+0x64a8>
   18498:	mov	r0, #0
   1849c:	strb	r0, [r7]
   184a0:	mov	r0, r8
   184a4:	sub	sp, fp, #48	; 0x30
   184a8:	vpop	{d8-d9}
   184ac:	add	sp, sp, #4
   184b0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   184b4:	add	r0, r0, r2
   184b8:	mov	ip, #2
   184bc:	cmp	r8, r0
   184c0:	movwcc	ip, #3
   184c4:	subs	r0, r4, r8
   184c8:	mov	r3, #6
   184cc:	sbcs	r0, r9, #0
   184d0:	bcc	18294 <__assert_fail@plt+0x69a8>
   184d4:	mov	r0, r4
   184d8:	mov	r1, r9
   184dc:	mov	r2, r8
   184e0:	mov	r3, #0
   184e4:	mov	r5, ip
   184e8:	bl	1fd5c <__assert_fail@plt+0xe470>
   184ec:	mov	r6, r8
   184f0:	mov	r8, r0
   184f4:	mov	r2, r5
   184f8:	mov	r9, r1
   184fc:	mls	r0, r0, r6, r4
   18500:	add	r0, r0, r0, lsl #2
   18504:	add	r0, r7, r0, lsl #1
   18508:	udiv	r4, r0, r6
   1850c:	mls	r0, r4, r6, r0
   18510:	lsl	r0, r0, #1
   18514:	orr	r0, r0, r2, lsr #1
   18518:	cmp	r0, r6
   1851c:	bcs	18560 <__assert_fail@plt+0x6c74>
   18520:	rsb	r1, r2, #0
   18524:	subs	ip, r0, r1
   18528:	movwne	ip, #1
   1852c:	subs	r0, r8, r6
   18530:	mov	r3, #7
   18534:	sbcs	r0, r9, #0
   18538:	bcs	18580 <__assert_fail@plt+0x6c94>
   1853c:	mov	r7, r4
   18540:	ldr	r5, [sp, #48]	; 0x30
   18544:	ldr	r4, [sp, #44]	; 0x2c
   18548:	mov	sl, r8
   1854c:	mov	r8, r6
   18550:	rsbs	r0, sl, #9
   18554:	rscs	r0, r9, #0
   18558:	bcc	182ac <__assert_fail@plt+0x69c0>
   1855c:	b	18044 <__assert_fail@plt+0x6758>
   18560:	add	r0, r0, r2
   18564:	mov	ip, #2
   18568:	cmp	r6, r0
   1856c:	movwcc	ip, #3
   18570:	subs	r0, r8, r6
   18574:	mov	r3, #7
   18578:	sbcs	r0, r9, #0
   1857c:	bcc	1853c <__assert_fail@plt+0x6c50>
   18580:	mov	r0, r8
   18584:	mov	r1, r9
   18588:	mov	r2, r6
   1858c:	mov	r3, #0
   18590:	mov	r5, ip
   18594:	bl	1fd5c <__assert_fail@plt+0xe470>
   18598:	mov	sl, r0
   1859c:	mls	r0, r0, r6, r8
   185a0:	mov	r2, r5
   185a4:	mov	r9, r1
   185a8:	mov	r8, r6
   185ac:	add	r0, r0, r0, lsl #2
   185b0:	add	r0, r4, r0, lsl #1
   185b4:	udiv	r7, r0, r6
   185b8:	mls	r0, r7, r6, r0
   185bc:	lsl	r0, r0, #1
   185c0:	orr	r0, r0, r5, lsr #1
   185c4:	cmp	r0, r6
   185c8:	bcs	185dc <__assert_fail@plt+0x6cf0>
   185cc:	rsb	r1, r2, #0
   185d0:	subs	ip, r0, r1
   185d4:	movwne	ip, #1
   185d8:	b	185ec <__assert_fail@plt+0x6d00>
   185dc:	add	r0, r0, r2
   185e0:	mov	ip, #2
   185e4:	cmp	r8, r0
   185e8:	movwcc	ip, #3
   185ec:	ldr	r5, [sp, #48]	; 0x30
   185f0:	ldr	r4, [sp, #44]	; 0x2c
   185f4:	mov	r3, #8
   185f8:	rsbs	r0, sl, #9
   185fc:	rscs	r0, r9, #0
   18600:	bcc	182ac <__assert_fail@plt+0x69c0>
   18604:	b	18044 <__assert_fail@plt+0x6758>
   18608:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1860c:	add	fp, sp, #24
   18610:	sub	sp, sp, #8
   18614:	mov	r4, r2
   18618:	mov	r8, r1
   1861c:	cmp	r0, #0
   18620:	bne	1864c <__assert_fail@plt+0x6d60>
   18624:	movw	r0, #1862	; 0x746
   18628:	movt	r0, #2
   1862c:	bl	116a0 <getenv@plt>
   18630:	cmp	r0, #0
   18634:	bne	1864c <__assert_fail@plt+0x6d60>
   18638:	movw	r0, #4320	; 0x10e0
   1863c:	movt	r0, #2
   18640:	bl	116a0 <getenv@plt>
   18644:	cmp	r0, #0
   18648:	beq	18778 <__assert_fail@plt+0x6e8c>
   1864c:	mov	r6, r0
   18650:	movw	r7, #4372	; 0x1114
   18654:	movw	r1, #4360	; 0x1108
   18658:	mov	r3, #4
   1865c:	ldrb	r5, [r6], #1
   18660:	movt	r7, #2
   18664:	movt	r1, #2
   18668:	mov	r2, r7
   1866c:	cmp	r5, #39	; 0x27
   18670:	movne	r6, r0
   18674:	mov	r0, r6
   18678:	bl	1e9b4 <__assert_fail@plt+0xd0c8>
   1867c:	sub	r1, r5, #39	; 0x27
   18680:	cmp	r0, #0
   18684:	clz	r1, r1
   18688:	lsr	r1, r1, #5
   1868c:	lsl	r5, r1, #2
   18690:	bmi	186c8 <__assert_fail@plt+0x6ddc>
   18694:	ldr	r0, [r7, r0, lsl #2]
   18698:	mov	r2, #1
   1869c:	mov	r1, #0
   186a0:	str	r2, [r4]
   186a4:	str	r1, [r4, #4]
   186a8:	orr	r1, r0, r5
   186ac:	mov	r0, #0
   186b0:	str	r1, [r8]
   186b4:	ldrd	r2, [r4]
   186b8:	orrs	r1, r2, r3
   186bc:	beq	18704 <__assert_fail@plt+0x6e18>
   186c0:	sub	sp, fp, #24
   186c4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   186c8:	movw	r0, #4330	; 0x10ea
   186cc:	add	r1, sp, #4
   186d0:	mov	r2, #0
   186d4:	mov	r3, r4
   186d8:	mov	r7, #0
   186dc:	movt	r0, #2
   186e0:	str	r0, [sp]
   186e4:	mov	r0, r6
   186e8:	bl	1cfc4 <__assert_fail@plt+0xb6d8>
   186ec:	cmp	r0, #0
   186f0:	beq	18734 <__assert_fail@plt+0x6e48>
   186f4:	str	r7, [r8]
   186f8:	ldrd	r2, [r4]
   186fc:	orrs	r1, r2, r3
   18700:	bne	186c0 <__assert_fail@plt+0x6dd4>
   18704:	movw	r0, #1843	; 0x733
   18708:	movt	r0, #2
   1870c:	bl	116a0 <getenv@plt>
   18710:	cmp	r0, #0
   18714:	mov	r2, #512	; 0x200
   18718:	mov	r0, #4
   1871c:	mov	r1, #0
   18720:	movweq	r2, #1024	; 0x400
   18724:	str	r2, [r4]
   18728:	str	r1, [r4, #4]
   1872c:	sub	sp, fp, #24
   18730:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   18734:	ldrb	r0, [r6]
   18738:	sub	r0, r0, #48	; 0x30
   1873c:	uxtb	r0, r0
   18740:	cmp	r0, #10
   18744:	bcc	18770 <__assert_fail@plt+0x6e84>
   18748:	ldr	r0, [sp, #4]
   1874c:	cmp	r0, r6
   18750:	beq	187a0 <__assert_fail@plt+0x6eb4>
   18754:	ldrb	r2, [r6, #1]
   18758:	add	r1, r6, #1
   1875c:	mov	r6, r1
   18760:	sub	r2, r2, #48	; 0x30
   18764:	uxtb	r2, r2
   18768:	cmp	r2, #10
   1876c:	bcs	1874c <__assert_fail@plt+0x6e60>
   18770:	mov	r1, r5
   18774:	b	186ac <__assert_fail@plt+0x6dc0>
   18778:	movw	r0, #1843	; 0x733
   1877c:	movt	r0, #2
   18780:	bl	116a0 <getenv@plt>
   18784:	cmp	r0, #0
   18788:	mov	r2, #512	; 0x200
   1878c:	mov	r1, #0
   18790:	movweq	r2, #1024	; 0x400
   18794:	str	r2, [r4]
   18798:	str	r1, [r4, #4]
   1879c:	b	186ac <__assert_fail@plt+0x6dc0>
   187a0:	ldrb	r2, [r0, #-1]
   187a4:	orr	r1, r5, #384	; 0x180
   187a8:	cmp	r2, #66	; 0x42
   187ac:	mov	r2, r1
   187b0:	orrne	r2, r5, #128	; 0x80
   187b4:	bne	187c8 <__assert_fail@plt+0x6edc>
   187b8:	ldrb	r0, [r0, #-2]
   187bc:	cmp	r0, #105	; 0x69
   187c0:	orreq	r1, r2, #32
   187c4:	b	186ac <__assert_fail@plt+0x6dc0>
   187c8:	orr	r1, r2, #32
   187cc:	b	186ac <__assert_fail@plt+0x6dc0>
   187d0:	push	{r4, r5, r6, sl, fp, lr}
   187d4:	add	fp, sp, #16
   187d8:	mov	r5, r0
   187dc:	mov	r0, #0
   187e0:	mov	r4, r1
   187e4:	add	r6, r2, #19
   187e8:	strb	r0, [r2, #20]
   187ec:	mov	r0, r5
   187f0:	mov	r1, r4
   187f4:	mov	r2, #10
   187f8:	mov	r3, #0
   187fc:	bl	1fd5c <__assert_fail@plt+0xe470>
   18800:	add	r2, r0, r0, lsl #2
   18804:	sub	r2, r5, r2, lsl #1
   18808:	orr	r2, r2, #48	; 0x30
   1880c:	strb	r2, [r6], #-1
   18810:	rsbs	r2, r5, #9
   18814:	mov	r5, r0
   18818:	rscs	r2, r4, #0
   1881c:	mov	r4, r1
   18820:	bcc	187ec <__assert_fail@plt+0x6f00>
   18824:	add	r0, r6, #1
   18828:	pop	{r4, r5, r6, sl, fp, pc}
   1882c:	push	{r4, r5, r6, r7, fp, lr}
   18830:	add	fp, sp, #16
   18834:	sub	sp, sp, #8
   18838:	cmp	r0, #0
   1883c:	add	r5, sp, #4
   18840:	mov	r7, r2
   18844:	mov	r4, r1
   18848:	movne	r5, r0
   1884c:	mov	r0, r5
   18850:	bl	11658 <mbrtowc@plt>
   18854:	mov	r6, r0
   18858:	cmp	r7, #0
   1885c:	beq	18884 <__assert_fail@plt+0x6f98>
   18860:	cmn	r6, #2
   18864:	bcc	18884 <__assert_fail@plt+0x6f98>
   18868:	mov	r0, #0
   1886c:	bl	1f5a4 <__assert_fail@plt+0xdcb8>
   18870:	cmp	r0, #0
   18874:	bne	18884 <__assert_fail@plt+0x6f98>
   18878:	ldrb	r0, [r4]
   1887c:	mov	r6, #1
   18880:	str	r0, [r5]
   18884:	mov	r0, r6
   18888:	sub	sp, fp, #16
   1888c:	pop	{r4, r5, r6, r7, fp, pc}
   18890:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18894:	add	fp, sp, #28
   18898:	sub	sp, sp, #20
   1889c:	mov	r4, r3
   188a0:	str	r2, [sp, #16]
   188a4:	str	r1, [sp, #12]
   188a8:	mov	r5, r0
   188ac:	bl	11718 <strlen@plt>
   188b0:	ldr	r3, [fp, #12]
   188b4:	mov	r8, r0
   188b8:	mov	sl, #0
   188bc:	tst	r3, #2
   188c0:	bne	18994 <__assert_fail@plt+0x70a8>
   188c4:	bl	11634 <__ctype_get_mb_cur_max@plt>
   188c8:	mov	r6, #0
   188cc:	cmp	r0, #2
   188d0:	bcc	189a4 <__assert_fail@plt+0x70b8>
   188d4:	mov	r0, #0
   188d8:	mov	r1, r5
   188dc:	mov	r2, #0
   188e0:	bl	11844 <mbstowcs@plt>
   188e4:	cmn	r0, #1
   188e8:	beq	18b4c <__assert_fail@plt+0x7260>
   188ec:	add	r9, r0, #1
   188f0:	mov	r7, r0
   188f4:	lsl	r0, r9, #2
   188f8:	bl	1dccc <__assert_fail@plt+0xc3e0>
   188fc:	cmp	r0, #0
   18900:	beq	18b48 <__assert_fail@plt+0x725c>
   18904:	mov	r1, r5
   18908:	mov	r2, r9
   1890c:	mov	r6, r0
   18910:	bl	11844 <mbstowcs@plt>
   18914:	cmp	r0, #0
   18918:	beq	18b6c <__assert_fail@plt+0x7280>
   1891c:	str	r5, [sp, #4]
   18920:	mov	r5, #0
   18924:	mov	r1, r6
   18928:	str	r6, [sp]
   1892c:	str	r5, [r6, r7, lsl #2]
   18930:	ldr	r0, [r6]
   18934:	cmp	r0, #0
   18938:	beq	18b7c <__assert_fail@plt+0x7290>
   1893c:	add	r6, r1, #4
   18940:	movw	r7, #65533	; 0xfffd
   18944:	bl	115f8 <iswprint@plt>
   18948:	cmp	r0, #0
   1894c:	streq	r7, [r6, #-4]
   18950:	moveq	r5, #1
   18954:	ldr	r0, [r6], #4
   18958:	cmp	r0, #0
   1895c:	bne	18944 <__assert_fail@plt+0x7058>
   18960:	ldr	r6, [sp]
   18964:	mov	r1, r9
   18968:	mov	r0, r6
   1896c:	bl	117fc <wcswidth@plt>
   18970:	mov	r7, r0
   18974:	tst	r5, #1
   18978:	beq	18b8c <__assert_fail@plt+0x72a0>
   1897c:	mov	r0, #0
   18980:	mov	r1, r6
   18984:	mov	r2, #0
   18988:	bl	11664 <wcstombs@plt>
   1898c:	ldr	r5, [sp, #4]
   18990:	b	18ba4 <__assert_fail@plt+0x72b8>
   18994:	mov	r6, #0
   18998:	mov	r2, #0
   1899c:	mov	r7, r8
   189a0:	b	189b0 <__assert_fail@plt+0x70c4>
   189a4:	mov	r2, #0
   189a8:	mov	r7, r8
   189ac:	ldr	r3, [fp, #12]
   189b0:	ldr	r0, [r4]
   189b4:	str	r5, [sp, #4]
   189b8:	ldr	r5, [fp, #8]
   189bc:	mov	r1, r7
   189c0:	str	r6, [sp, #8]
   189c4:	cmp	r7, r0
   189c8:	movhi	r1, r0
   189cc:	movhi	r8, r0
   189d0:	cmp	r0, r7
   189d4:	subhi	sl, r0, r1
   189d8:	cmp	r5, #0
   189dc:	str	r1, [r4]
   189e0:	beq	189f8 <__assert_fail@plt+0x710c>
   189e4:	cmp	r5, #1
   189e8:	bne	18a00 <__assert_fail@plt+0x7114>
   189ec:	mov	r9, #0
   189f0:	mov	r5, sl
   189f4:	b	18a0c <__assert_fail@plt+0x7120>
   189f8:	mov	r9, sl
   189fc:	b	18a0c <__assert_fail@plt+0x7120>
   18a00:	and	r0, sl, #1
   18a04:	lsr	r9, sl, #1
   18a08:	add	r5, r0, sl, lsr #1
   18a0c:	ldr	r0, [sp, #16]
   18a10:	ldr	r4, [sp, #12]
   18a14:	tst	r3, #8
   18a18:	mov	r6, #0
   18a1c:	mov	r7, #0
   18a20:	moveq	r6, r9
   18a24:	tst	r3, #4
   18a28:	moveq	r7, r5
   18a2c:	cmp	r0, #0
   18a30:	beq	18b20 <__assert_fail@plt+0x7234>
   18a34:	add	r0, r4, r0
   18a38:	str	r2, [sp]
   18a3c:	sub	sl, r0, #1
   18a40:	mov	r0, r4
   18a44:	cmp	sl, r4
   18a48:	bls	18a98 <__assert_fail@plt+0x71ac>
   18a4c:	cmp	r7, #0
   18a50:	mov	r0, r4
   18a54:	beq	18a98 <__assert_fail@plt+0x71ac>
   18a58:	mvn	r0, r4
   18a5c:	sub	r1, r7, #1
   18a60:	add	r0, sl, r0
   18a64:	cmp	r1, r0
   18a68:	movhi	r1, r0
   18a6c:	mov	r0, r4
   18a70:	add	r2, r1, #1
   18a74:	mov	r1, #32
   18a78:	bl	1176c <memset@plt>
   18a7c:	ldr	r1, [sp, #16]
   18a80:	sub	r0, r5, #1
   18a84:	sub	r1, r1, #2
   18a88:	cmp	r0, r1
   18a8c:	movcc	r1, r0
   18a90:	add	r0, r1, r4
   18a94:	add	r0, r0, #1
   18a98:	ldr	r1, [sp, #4]
   18a9c:	sub	r2, sl, r0
   18aa0:	mov	r4, #0
   18aa4:	mvn	r3, #0
   18aa8:	cmp	r8, r2
   18aac:	strb	r4, [r0]
   18ab0:	movcc	r2, r8
   18ab4:	bl	118e0 <__mempcpy_chk@plt>
   18ab8:	mov	r5, r0
   18abc:	cmp	r6, #0
   18ac0:	beq	18b18 <__assert_fail@plt+0x722c>
   18ac4:	cmp	r5, sl
   18ac8:	bcs	18b18 <__assert_fail@plt+0x722c>
   18acc:	mvn	r0, r5
   18ad0:	sub	r1, r6, #1
   18ad4:	add	r0, sl, r0
   18ad8:	cmp	r1, r0
   18adc:	movhi	r1, r0
   18ae0:	mov	r0, r5
   18ae4:	add	r2, r1, #1
   18ae8:	mov	r1, #32
   18aec:	bl	1176c <memset@plt>
   18af0:	ldr	r0, [sp, #16]
   18af4:	ldr	r1, [sp, #12]
   18af8:	sub	r0, r0, r5
   18afc:	add	r0, r0, r1
   18b00:	sub	r1, r9, #1
   18b04:	sub	r0, r0, #2
   18b08:	cmp	r1, r0
   18b0c:	movhi	r1, r0
   18b10:	add	r0, r1, r5
   18b14:	add	r5, r0, #1
   18b18:	ldr	r2, [sp]
   18b1c:	strb	r4, [r5]
   18b20:	add	r0, r7, r8
   18b24:	add	r9, r0, r6
   18b28:	ldr	r6, [sp, #8]
   18b2c:	mov	r0, r2
   18b30:	bl	160c4 <__assert_fail@plt+0x47d8>
   18b34:	mov	r0, r6
   18b38:	bl	160c4 <__assert_fail@plt+0x47d8>
   18b3c:	mov	r0, r9
   18b40:	sub	sp, fp, #28
   18b44:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18b48:	mov	r6, #0
   18b4c:	ldr	r3, [fp, #12]
   18b50:	mvn	r9, #0
   18b54:	mov	r2, #0
   18b58:	mov	r7, r8
   18b5c:	mov	r0, #0
   18b60:	tst	r3, #1
   18b64:	bne	189b0 <__assert_fail@plt+0x70c4>
   18b68:	b	18b30 <__assert_fail@plt+0x7244>
   18b6c:	mov	r2, r6
   18b70:	mov	r7, r8
   18b74:	mov	r6, #0
   18b78:	b	189ac <__assert_fail@plt+0x70c0>
   18b7c:	mov	r0, r1
   18b80:	mov	r1, r9
   18b84:	bl	117fc <wcswidth@plt>
   18b88:	mov	r7, r0
   18b8c:	ldr	r0, [r4]
   18b90:	ldr	r5, [sp, #4]
   18b94:	mov	r6, #0
   18b98:	cmp	r7, r0
   18b9c:	mov	r0, r8
   18ba0:	bls	18c10 <__assert_fail@plt+0x7324>
   18ba4:	add	r6, r0, #1
   18ba8:	mov	r0, r6
   18bac:	bl	1dccc <__assert_fail@plt+0xc3e0>
   18bb0:	cmp	r0, #0
   18bb4:	beq	18c18 <__assert_fail@plt+0x732c>
   18bb8:	ldr	r1, [sp]
   18bbc:	str	r0, [sp, #8]
   18bc0:	str	r6, [sp, #4]
   18bc4:	ldr	r0, [r1]
   18bc8:	cmp	r0, #0
   18bcc:	beq	18c38 <__assert_fail@plt+0x734c>
   18bd0:	ldr	r5, [r4]
   18bd4:	mov	r8, #0
   18bd8:	movw	r9, #65533	; 0xfffd
   18bdc:	mov	r6, r1
   18be0:	bl	11538 <wcwidth@plt>
   18be4:	cmn	r0, #1
   18be8:	moveq	r0, #1
   18bec:	streq	r9, [r6]
   18bf0:	add	r7, r0, r8
   18bf4:	cmp	r7, r5
   18bf8:	bhi	18c44 <__assert_fail@plt+0x7358>
   18bfc:	ldr	r0, [r6, #4]!
   18c00:	mov	r8, r7
   18c04:	cmp	r0, #0
   18c08:	bne	18be0 <__assert_fail@plt+0x72f4>
   18c0c:	b	18c48 <__assert_fail@plt+0x735c>
   18c10:	ldr	r2, [sp]
   18c14:	b	189ac <__assert_fail@plt+0x70c0>
   18c18:	ldr	r3, [fp, #12]
   18c1c:	ldr	r2, [sp]
   18c20:	mov	r6, #0
   18c24:	mvn	r9, #0
   18c28:	tst	r3, #1
   18c2c:	mov	r0, r2
   18c30:	bne	189b0 <__assert_fail@plt+0x70c4>
   18c34:	b	18b30 <__assert_fail@plt+0x7244>
   18c38:	mov	r6, r1
   18c3c:	mov	r7, #0
   18c40:	b	18c48 <__assert_fail@plt+0x735c>
   18c44:	mov	r7, r8
   18c48:	mov	r0, #0
   18c4c:	ldr	r5, [sp]
   18c50:	ldr	r2, [sp, #4]
   18c54:	str	r0, [r6]
   18c58:	ldr	r6, [sp, #8]
   18c5c:	mov	r1, r5
   18c60:	mov	r0, r6
   18c64:	bl	11664 <wcstombs@plt>
   18c68:	mov	r2, r5
   18c6c:	mov	r8, r0
   18c70:	mov	r5, r6
   18c74:	b	189ac <__assert_fail@plt+0x70c0>
   18c78:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18c7c:	add	fp, sp, #28
   18c80:	sub	sp, sp, #12
   18c84:	ldr	r8, [r1]
   18c88:	mov	sl, r0
   18c8c:	mov	r9, r2
   18c90:	mov	r6, r1
   18c94:	mov	r7, #0
   18c98:	str	r3, [sp, #8]
   18c9c:	mov	r0, r8
   18ca0:	mov	r5, r8
   18ca4:	cmp	r0, r5
   18ca8:	bcc	18d0c <__assert_fail@plt+0x7420>
   18cac:	add	r5, r0, #1
   18cb0:	mov	r0, r7
   18cb4:	mov	r1, r5
   18cb8:	bl	1dcfc <__assert_fail@plt+0xc410>
   18cbc:	cmp	r0, #0
   18cc0:	beq	18d00 <__assert_fail@plt+0x7414>
   18cc4:	mov	r4, r0
   18cc8:	ldr	r0, [sp, #8]
   18ccc:	str	r8, [r6]
   18cd0:	mov	r2, r5
   18cd4:	mov	r3, r6
   18cd8:	str	r9, [sp]
   18cdc:	mov	r1, r4
   18ce0:	str	r0, [sp, #4]
   18ce4:	mov	r0, sl
   18ce8:	bl	18890 <__assert_fail@plt+0x6fa4>
   18cec:	cmn	r0, #1
   18cf0:	mov	r7, r4
   18cf4:	bne	18ca4 <__assert_fail@plt+0x73b8>
   18cf8:	mov	r0, r4
   18cfc:	b	18d04 <__assert_fail@plt+0x7418>
   18d00:	mov	r0, r7
   18d04:	bl	160c4 <__assert_fail@plt+0x47d8>
   18d08:	mov	r7, #0
   18d0c:	mov	r0, r7
   18d10:	sub	sp, fp, #28
   18d14:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18d18:	push	{r4, r5, fp, lr}
   18d1c:	add	fp, sp, #8
   18d20:	mov	r4, r1
   18d24:	mov	r5, r0
   18d28:	bl	11718 <strlen@plt>
   18d2c:	mov	r1, r0
   18d30:	mov	r0, r5
   18d34:	mov	r2, r4
   18d38:	pop	{r4, r5, fp, lr}
   18d3c:	b	18d40 <__assert_fail@plt+0x7454>
   18d40:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18d44:	add	fp, sp, #28
   18d48:	sub	sp, sp, #20
   18d4c:	mov	r5, r2
   18d50:	mov	r6, r1
   18d54:	mov	r4, r0
   18d58:	add	r7, r0, r1
   18d5c:	bl	11634 <__ctype_get_mb_cur_max@plt>
   18d60:	cmp	r0, #1
   18d64:	bls	19024 <__assert_fail@plt+0x7738>
   18d68:	cmp	r6, #1
   18d6c:	blt	19078 <__assert_fail@plt+0x778c>
   18d70:	and	r2, r5, #1
   18d74:	mov	r3, #0
   18d78:	add	r8, sp, #4
   18d7c:	add	r9, sp, #8
   18d80:	mvn	sl, #-2147483648	; 0x80000000
   18d84:	tst	r5, #2
   18d88:	bne	19088 <__assert_fail@plt+0x779c>
   18d8c:	mov	r5, #0
   18d90:	ldrb	r0, [r4]
   18d94:	sub	r0, r0, #32
   18d98:	cmp	r0, #94	; 0x5e
   18d9c:	bhi	18f38 <__assert_fail@plt+0x764c>
   18da0:	add	r1, pc, #0
   18da4:	ldr	pc, [r1, r0, lsl #2]
   18da8:	andeq	r8, r1, r4, lsr #30
   18dac:	andeq	r8, r1, r4, lsr #30
   18db0:	andeq	r8, r1, r4, lsr #30
   18db4:	andeq	r8, r1, r4, lsr #30
   18db8:	andeq	r8, r1, r8, lsr pc
   18dbc:	andeq	r8, r1, r4, lsr #30
   18dc0:	andeq	r8, r1, r4, lsr #30
   18dc4:	andeq	r8, r1, r4, lsr #30
   18dc8:	andeq	r8, r1, r4, lsr #30
   18dcc:	andeq	r8, r1, r4, lsr #30
   18dd0:	andeq	r8, r1, r4, lsr #30
   18dd4:	andeq	r8, r1, r4, lsr #30
   18dd8:	andeq	r8, r1, r4, lsr #30
   18ddc:	andeq	r8, r1, r4, lsr #30
   18de0:	andeq	r8, r1, r4, lsr #30
   18de4:	andeq	r8, r1, r4, lsr #30
   18de8:	andeq	r8, r1, r4, lsr #30
   18dec:	andeq	r8, r1, r4, lsr #30
   18df0:	andeq	r8, r1, r4, lsr #30
   18df4:	andeq	r8, r1, r4, lsr #30
   18df8:	andeq	r8, r1, r4, lsr #30
   18dfc:	andeq	r8, r1, r4, lsr #30
   18e00:	andeq	r8, r1, r4, lsr #30
   18e04:	andeq	r8, r1, r4, lsr #30
   18e08:	andeq	r8, r1, r4, lsr #30
   18e0c:	andeq	r8, r1, r4, lsr #30
   18e10:	andeq	r8, r1, r4, lsr #30
   18e14:	andeq	r8, r1, r4, lsr #30
   18e18:	andeq	r8, r1, r4, lsr #30
   18e1c:	andeq	r8, r1, r4, lsr #30
   18e20:	andeq	r8, r1, r4, lsr #30
   18e24:	andeq	r8, r1, r4, lsr #30
   18e28:	andeq	r8, r1, r8, lsr pc
   18e2c:	andeq	r8, r1, r4, lsr #30
   18e30:	andeq	r8, r1, r4, lsr #30
   18e34:	andeq	r8, r1, r4, lsr #30
   18e38:	andeq	r8, r1, r4, lsr #30
   18e3c:	andeq	r8, r1, r4, lsr #30
   18e40:	andeq	r8, r1, r4, lsr #30
   18e44:	andeq	r8, r1, r4, lsr #30
   18e48:	andeq	r8, r1, r4, lsr #30
   18e4c:	andeq	r8, r1, r4, lsr #30
   18e50:	andeq	r8, r1, r4, lsr #30
   18e54:	andeq	r8, r1, r4, lsr #30
   18e58:	andeq	r8, r1, r4, lsr #30
   18e5c:	andeq	r8, r1, r4, lsr #30
   18e60:	andeq	r8, r1, r4, lsr #30
   18e64:	andeq	r8, r1, r4, lsr #30
   18e68:	andeq	r8, r1, r4, lsr #30
   18e6c:	andeq	r8, r1, r4, lsr #30
   18e70:	andeq	r8, r1, r4, lsr #30
   18e74:	andeq	r8, r1, r4, lsr #30
   18e78:	andeq	r8, r1, r4, lsr #30
   18e7c:	andeq	r8, r1, r4, lsr #30
   18e80:	andeq	r8, r1, r4, lsr #30
   18e84:	andeq	r8, r1, r4, lsr #30
   18e88:	andeq	r8, r1, r4, lsr #30
   18e8c:	andeq	r8, r1, r4, lsr #30
   18e90:	andeq	r8, r1, r4, lsr #30
   18e94:	andeq	r8, r1, r4, lsr #30
   18e98:	andeq	r8, r1, r4, lsr #30
   18e9c:	andeq	r8, r1, r4, lsr #30
   18ea0:	andeq	r8, r1, r4, lsr #30
   18ea4:	andeq	r8, r1, r4, lsr #30
   18ea8:	andeq	r8, r1, r8, lsr pc
   18eac:	andeq	r8, r1, r4, lsr #30
   18eb0:	andeq	r8, r1, r4, lsr #30
   18eb4:	andeq	r8, r1, r4, lsr #30
   18eb8:	andeq	r8, r1, r4, lsr #30
   18ebc:	andeq	r8, r1, r4, lsr #30
   18ec0:	andeq	r8, r1, r4, lsr #30
   18ec4:	andeq	r8, r1, r4, lsr #30
   18ec8:	andeq	r8, r1, r4, lsr #30
   18ecc:	andeq	r8, r1, r4, lsr #30
   18ed0:	andeq	r8, r1, r4, lsr #30
   18ed4:	andeq	r8, r1, r4, lsr #30
   18ed8:	andeq	r8, r1, r4, lsr #30
   18edc:	andeq	r8, r1, r4, lsr #30
   18ee0:	andeq	r8, r1, r4, lsr #30
   18ee4:	andeq	r8, r1, r4, lsr #30
   18ee8:	andeq	r8, r1, r4, lsr #30
   18eec:	andeq	r8, r1, r4, lsr #30
   18ef0:	andeq	r8, r1, r4, lsr #30
   18ef4:	andeq	r8, r1, r4, lsr #30
   18ef8:	andeq	r8, r1, r4, lsr #30
   18efc:	andeq	r8, r1, r4, lsr #30
   18f00:	andeq	r8, r1, r4, lsr #30
   18f04:	andeq	r8, r1, r4, lsr #30
   18f08:	andeq	r8, r1, r4, lsr #30
   18f0c:	andeq	r8, r1, r4, lsr #30
   18f10:	andeq	r8, r1, r4, lsr #30
   18f14:	andeq	r8, r1, r4, lsr #30
   18f18:	andeq	r8, r1, r4, lsr #30
   18f1c:	andeq	r8, r1, r4, lsr #30
   18f20:	andeq	r8, r1, r4, lsr #30
   18f24:	add	r5, r5, #1
   18f28:	add	r4, r4, #1
   18f2c:	cmp	r4, r7
   18f30:	bcc	18d90 <__assert_fail@plt+0x74a4>
   18f34:	b	1931c <__assert_fail@plt+0x7a30>
   18f38:	str	r2, [sp]
   18f3c:	str	r3, [sp, #12]
   18f40:	str	r3, [sp, #8]
   18f44:	b	18f6c <__assert_fail@plt+0x7680>
   18f48:	ldr	r0, [sp, #4]
   18f4c:	bl	115d4 <iswcntrl@plt>
   18f50:	cmp	r0, #0
   18f54:	beq	18fd8 <__assert_fail@plt+0x76ec>
   18f58:	mov	r0, r9
   18f5c:	add	r4, r4, r6
   18f60:	bl	1158c <mbsinit@plt>
   18f64:	cmp	r0, #0
   18f68:	bne	19010 <__assert_fail@plt+0x7724>
   18f6c:	sub	r2, r7, r4
   18f70:	mov	r0, r8
   18f74:	mov	r1, r4
   18f78:	mov	r3, r9
   18f7c:	bl	1882c <__assert_fail@plt+0x6f40>
   18f80:	cmp	r0, #0
   18f84:	beq	18fc0 <__assert_fail@plt+0x76d4>
   18f88:	mov	r6, r0
   18f8c:	cmn	r0, #2
   18f90:	beq	18fe8 <__assert_fail@plt+0x76fc>
   18f94:	cmn	r6, #1
   18f98:	beq	18ffc <__assert_fail@plt+0x7710>
   18f9c:	ldr	r0, [sp, #4]
   18fa0:	bl	11538 <wcwidth@plt>
   18fa4:	cmn	r0, #1
   18fa8:	ble	18f48 <__assert_fail@plt+0x765c>
   18fac:	sub	r1, sl, r5
   18fb0:	cmp	r0, r1
   18fb4:	bgt	19328 <__assert_fail@plt+0x7a3c>
   18fb8:	add	r5, r0, r5
   18fbc:	b	18f58 <__assert_fail@plt+0x766c>
   18fc0:	mov	r6, #1
   18fc4:	ldr	r0, [sp, #4]
   18fc8:	bl	11538 <wcwidth@plt>
   18fcc:	cmn	r0, #1
   18fd0:	bgt	18fac <__assert_fail@plt+0x76c0>
   18fd4:	b	18f48 <__assert_fail@plt+0x765c>
   18fd8:	cmn	r5, #-2147483647	; 0x80000001
   18fdc:	beq	19328 <__assert_fail@plt+0x7a3c>
   18fe0:	add	r5, r5, #1
   18fe4:	b	18f58 <__assert_fail@plt+0x766c>
   18fe8:	ldr	r0, [sp]
   18fec:	mov	r4, r7
   18ff0:	cmp	r0, #0
   18ff4:	beq	1900c <__assert_fail@plt+0x7720>
   18ff8:	b	19338 <__assert_fail@plt+0x7a4c>
   18ffc:	ldr	r0, [sp]
   19000:	cmp	r0, #0
   19004:	bne	19338 <__assert_fail@plt+0x7a4c>
   19008:	add	r4, r4, #1
   1900c:	add	r5, r5, #1
   19010:	ldr	r2, [sp]
   19014:	mov	r3, #0
   19018:	cmp	r4, r7
   1901c:	bcc	18d90 <__assert_fail@plt+0x74a4>
   19020:	b	1931c <__assert_fail@plt+0x7a30>
   19024:	cmp	r6, #1
   19028:	blt	19078 <__assert_fail@plt+0x778c>
   1902c:	bl	116e8 <__ctype_b_loc@plt>
   19030:	ldr	r0, [r0]
   19034:	tst	r5, #2
   19038:	bne	192ec <__assert_fail@plt+0x7a00>
   1903c:	mov	r5, #0
   19040:	b	19058 <__assert_fail@plt+0x776c>
   19044:	cmn	r5, #-2147483647	; 0x80000001
   19048:	beq	19328 <__assert_fail@plt+0x7a3c>
   1904c:	add	r5, r5, #1
   19050:	cmp	r4, r7
   19054:	bcs	1931c <__assert_fail@plt+0x7a30>
   19058:	ldrb	r1, [r4], #1
   1905c:	add	r1, r0, r1, lsl #1
   19060:	ldrh	r1, [r1]
   19064:	tst	r1, #16384	; 0x4000
   19068:	bne	19044 <__assert_fail@plt+0x7758>
   1906c:	tst	r1, #2
   19070:	beq	19044 <__assert_fail@plt+0x7758>
   19074:	b	19050 <__assert_fail@plt+0x7764>
   19078:	mov	r5, #0
   1907c:	mov	r0, r5
   19080:	sub	sp, fp, #28
   19084:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19088:	mov	r5, #0
   1908c:	ldrb	r0, [r4]
   19090:	sub	r0, r0, #32
   19094:	cmp	r0, #94	; 0x5e
   19098:	bhi	19234 <__assert_fail@plt+0x7948>
   1909c:	add	r1, pc, #0
   190a0:	ldr	pc, [r1, r0, lsl #2]
   190a4:	andeq	r9, r1, r0, lsr #4
   190a8:	andeq	r9, r1, r0, lsr #4
   190ac:	andeq	r9, r1, r0, lsr #4
   190b0:	andeq	r9, r1, r0, lsr #4
   190b4:	andeq	r9, r1, r4, lsr r2
   190b8:	andeq	r9, r1, r0, lsr #4
   190bc:	andeq	r9, r1, r0, lsr #4
   190c0:	andeq	r9, r1, r0, lsr #4
   190c4:	andeq	r9, r1, r0, lsr #4
   190c8:	andeq	r9, r1, r0, lsr #4
   190cc:	andeq	r9, r1, r0, lsr #4
   190d0:	andeq	r9, r1, r0, lsr #4
   190d4:	andeq	r9, r1, r0, lsr #4
   190d8:	andeq	r9, r1, r0, lsr #4
   190dc:	andeq	r9, r1, r0, lsr #4
   190e0:	andeq	r9, r1, r0, lsr #4
   190e4:	andeq	r9, r1, r0, lsr #4
   190e8:	andeq	r9, r1, r0, lsr #4
   190ec:	andeq	r9, r1, r0, lsr #4
   190f0:	andeq	r9, r1, r0, lsr #4
   190f4:	andeq	r9, r1, r0, lsr #4
   190f8:	andeq	r9, r1, r0, lsr #4
   190fc:	andeq	r9, r1, r0, lsr #4
   19100:	andeq	r9, r1, r0, lsr #4
   19104:	andeq	r9, r1, r0, lsr #4
   19108:	andeq	r9, r1, r0, lsr #4
   1910c:	andeq	r9, r1, r0, lsr #4
   19110:	andeq	r9, r1, r0, lsr #4
   19114:	andeq	r9, r1, r0, lsr #4
   19118:	andeq	r9, r1, r0, lsr #4
   1911c:	andeq	r9, r1, r0, lsr #4
   19120:	andeq	r9, r1, r0, lsr #4
   19124:	andeq	r9, r1, r4, lsr r2
   19128:	andeq	r9, r1, r0, lsr #4
   1912c:	andeq	r9, r1, r0, lsr #4
   19130:	andeq	r9, r1, r0, lsr #4
   19134:	andeq	r9, r1, r0, lsr #4
   19138:	andeq	r9, r1, r0, lsr #4
   1913c:	andeq	r9, r1, r0, lsr #4
   19140:	andeq	r9, r1, r0, lsr #4
   19144:	andeq	r9, r1, r0, lsr #4
   19148:	andeq	r9, r1, r0, lsr #4
   1914c:	andeq	r9, r1, r0, lsr #4
   19150:	andeq	r9, r1, r0, lsr #4
   19154:	andeq	r9, r1, r0, lsr #4
   19158:	andeq	r9, r1, r0, lsr #4
   1915c:	andeq	r9, r1, r0, lsr #4
   19160:	andeq	r9, r1, r0, lsr #4
   19164:	andeq	r9, r1, r0, lsr #4
   19168:	andeq	r9, r1, r0, lsr #4
   1916c:	andeq	r9, r1, r0, lsr #4
   19170:	andeq	r9, r1, r0, lsr #4
   19174:	andeq	r9, r1, r0, lsr #4
   19178:	andeq	r9, r1, r0, lsr #4
   1917c:	andeq	r9, r1, r0, lsr #4
   19180:	andeq	r9, r1, r0, lsr #4
   19184:	andeq	r9, r1, r0, lsr #4
   19188:	andeq	r9, r1, r0, lsr #4
   1918c:	andeq	r9, r1, r0, lsr #4
   19190:	andeq	r9, r1, r0, lsr #4
   19194:	andeq	r9, r1, r0, lsr #4
   19198:	andeq	r9, r1, r0, lsr #4
   1919c:	andeq	r9, r1, r0, lsr #4
   191a0:	andeq	r9, r1, r0, lsr #4
   191a4:	andeq	r9, r1, r4, lsr r2
   191a8:	andeq	r9, r1, r0, lsr #4
   191ac:	andeq	r9, r1, r0, lsr #4
   191b0:	andeq	r9, r1, r0, lsr #4
   191b4:	andeq	r9, r1, r0, lsr #4
   191b8:	andeq	r9, r1, r0, lsr #4
   191bc:	andeq	r9, r1, r0, lsr #4
   191c0:	andeq	r9, r1, r0, lsr #4
   191c4:	andeq	r9, r1, r0, lsr #4
   191c8:	andeq	r9, r1, r0, lsr #4
   191cc:	andeq	r9, r1, r0, lsr #4
   191d0:	andeq	r9, r1, r0, lsr #4
   191d4:	andeq	r9, r1, r0, lsr #4
   191d8:	andeq	r9, r1, r0, lsr #4
   191dc:	andeq	r9, r1, r0, lsr #4
   191e0:	andeq	r9, r1, r0, lsr #4
   191e4:	andeq	r9, r1, r0, lsr #4
   191e8:	andeq	r9, r1, r0, lsr #4
   191ec:	andeq	r9, r1, r0, lsr #4
   191f0:	andeq	r9, r1, r0, lsr #4
   191f4:	andeq	r9, r1, r0, lsr #4
   191f8:	andeq	r9, r1, r0, lsr #4
   191fc:	andeq	r9, r1, r0, lsr #4
   19200:	andeq	r9, r1, r0, lsr #4
   19204:	andeq	r9, r1, r0, lsr #4
   19208:	andeq	r9, r1, r0, lsr #4
   1920c:	andeq	r9, r1, r0, lsr #4
   19210:	andeq	r9, r1, r0, lsr #4
   19214:	andeq	r9, r1, r0, lsr #4
   19218:	andeq	r9, r1, r0, lsr #4
   1921c:	andeq	r9, r1, r0, lsr #4
   19220:	add	r5, r5, #1
   19224:	add	r4, r4, #1
   19228:	cmp	r4, r7
   1922c:	bcc	1908c <__assert_fail@plt+0x77a0>
   19230:	b	1931c <__assert_fail@plt+0x7a30>
   19234:	str	r2, [sp]
   19238:	str	r3, [sp, #12]
   1923c:	str	r3, [sp, #8]
   19240:	sub	r2, r7, r4
   19244:	mov	r0, r8
   19248:	mov	r1, r4
   1924c:	mov	r3, r9
   19250:	bl	1882c <__assert_fail@plt+0x6f40>
   19254:	cmp	r0, #0
   19258:	beq	19274 <__assert_fail@plt+0x7988>
   1925c:	mov	r6, r0
   19260:	cmn	r0, #2
   19264:	beq	192b0 <__assert_fail@plt+0x79c4>
   19268:	cmn	r6, #1
   1926c:	bne	19278 <__assert_fail@plt+0x798c>
   19270:	b	192c4 <__assert_fail@plt+0x79d8>
   19274:	mov	r6, #1
   19278:	ldr	r0, [sp, #4]
   1927c:	bl	11538 <wcwidth@plt>
   19280:	cmp	r0, #0
   19284:	bmi	19338 <__assert_fail@plt+0x7a4c>
   19288:	sub	r1, sl, r5
   1928c:	cmp	r0, r1
   19290:	bgt	19328 <__assert_fail@plt+0x7a3c>
   19294:	add	r5, r0, r5
   19298:	mov	r0, r9
   1929c:	add	r4, r4, r6
   192a0:	bl	1158c <mbsinit@plt>
   192a4:	cmp	r0, #0
   192a8:	beq	19240 <__assert_fail@plt+0x7954>
   192ac:	b	192d8 <__assert_fail@plt+0x79ec>
   192b0:	ldr	r0, [sp]
   192b4:	mov	r4, r7
   192b8:	cmp	r0, #0
   192bc:	beq	192d4 <__assert_fail@plt+0x79e8>
   192c0:	b	19338 <__assert_fail@plt+0x7a4c>
   192c4:	ldr	r0, [sp]
   192c8:	cmp	r0, #0
   192cc:	bne	19338 <__assert_fail@plt+0x7a4c>
   192d0:	add	r4, r4, #1
   192d4:	add	r5, r5, #1
   192d8:	ldr	r2, [sp]
   192dc:	mov	r3, #0
   192e0:	cmp	r4, r7
   192e4:	bcc	1908c <__assert_fail@plt+0x77a0>
   192e8:	b	1931c <__assert_fail@plt+0x7a30>
   192ec:	mov	r5, #0
   192f0:	ldrb	r1, [r4, r5]
   192f4:	add	r1, r0, r1, lsl #1
   192f8:	ldrb	r1, [r1, #1]
   192fc:	tst	r1, #64	; 0x40
   19300:	beq	19338 <__assert_fail@plt+0x7a4c>
   19304:	cmn	r5, #-2147483647	; 0x80000001
   19308:	beq	19328 <__assert_fail@plt+0x7a3c>
   1930c:	add	r5, r5, #1
   19310:	add	r1, r4, r5
   19314:	cmp	r1, r7
   19318:	bcc	192f0 <__assert_fail@plt+0x7a04>
   1931c:	mov	r0, r5
   19320:	sub	sp, fp, #28
   19324:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19328:	mvn	r5, #-2147483648	; 0x80000000
   1932c:	mov	r0, r5
   19330:	sub	sp, fp, #28
   19334:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19338:	mvn	r5, #0
   1933c:	mov	r0, r5
   19340:	sub	sp, fp, #28
   19344:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19348:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1934c:	add	fp, sp, #28
   19350:	sub	sp, sp, #36	; 0x24
   19354:	movw	r0, #4380	; 0x111c
   19358:	movw	r1, #4516	; 0x11a4
   1935c:	movt	r0, #2
   19360:	movt	r1, #2
   19364:	bl	11868 <fopen64@plt>
   19368:	cmp	r0, #0
   1936c:	beq	19b50 <__assert_fail@plt+0x8264>
   19370:	mov	r3, r0
   19374:	mov	r0, #0
   19378:	add	r1, sp, #24
   1937c:	mov	r2, #10
   19380:	str	r0, [sp, #28]
   19384:	str	r0, [sp, #24]
   19388:	add	r0, sp, #28
   1938c:	mov	r9, r3
   19390:	bl	11514 <__getdelim@plt>
   19394:	cmn	r0, #1
   19398:	beq	19f24 <__assert_fail@plt+0x8638>
   1939c:	movw	r8, #4401	; 0x1131
   193a0:	add	r0, sp, #32
   193a4:	add	sl, sp, #12
   193a8:	add	r6, sp, #20
   193ac:	add	r7, sp, #16
   193b0:	add	r5, sp, #28
   193b4:	add	r4, sp, #24
   193b8:	str	r9, [sp, #4]
   193bc:	movt	r8, #2
   193c0:	str	r0, [sp, #8]
   193c4:	b	193f8 <__assert_fail@plt+0x7b0c>
   193c8:	add	r6, sp, #20
   193cc:	add	r7, sp, #16
   193d0:	add	r5, sp, #28
   193d4:	add	r4, sp, #24
   193d8:	mov	r3, r9
   193dc:	mov	r0, r5
   193e0:	mov	r1, r4
   193e4:	mov	r2, #10
   193e8:	mov	r9, r3
   193ec:	bl	11514 <__getdelim@plt>
   193f0:	cmn	r0, #1
   193f4:	beq	19f2c <__assert_fail@plt+0x8640>
   193f8:	ldr	r0, [sp, #28]
   193fc:	mov	r1, r8
   19400:	mov	r2, r6
   19404:	mov	r3, r7
   19408:	str	sl, [sp]
   1940c:	bl	1182c <sscanf@plt>
   19410:	orr	r0, r0, #1
   19414:	cmp	r0, #3
   19418:	bne	193d8 <__assert_fail@plt+0x7aec>
   1941c:	ldr	r0, [sp, #12]
   19420:	ldr	r1, [sp, #28]
   19424:	add	r0, r1, r0
   19428:	mov	r1, #32
   1942c:	mov	r5, r0
   19430:	bl	11724 <strchr@plt>
   19434:	cmp	r0, #0
   19438:	beq	193c8 <__assert_fail@plt+0x7adc>
   1943c:	mov	r6, r0
   19440:	mov	r4, #0
   19444:	mov	r1, #32
   19448:	strb	r4, [r6], #1
   1944c:	mov	r0, r6
   19450:	bl	11724 <strchr@plt>
   19454:	cmp	r0, #0
   19458:	beq	193c8 <__assert_fail@plt+0x7adc>
   1945c:	movw	r1, #4418	; 0x1142
   19460:	strb	r4, [r0], #1
   19464:	movt	r1, #2
   19468:	bl	1dd50 <__assert_fail@plt+0xc464>
   1946c:	cmp	r0, #0
   19470:	beq	193c8 <__assert_fail@plt+0x7adc>
   19474:	add	sl, r0, #3
   19478:	mov	r1, #32
   1947c:	mov	r0, sl
   19480:	bl	11724 <strchr@plt>
   19484:	cmp	r0, #0
   19488:	beq	19994 <__assert_fail@plt+0x80a8>
   1948c:	mov	r9, r0
   19490:	mov	r4, #0
   19494:	mov	r1, #32
   19498:	strb	r4, [r9], #1
   1949c:	mov	r0, r9
   194a0:	bl	11724 <strchr@plt>
   194a4:	cmp	r0, #0
   194a8:	beq	19994 <__assert_fail@plt+0x80a8>
   194ac:	strb	r4, [r0]
   194b0:	mov	r0, r9
   194b4:	bl	11718 <strlen@plt>
   194b8:	adds	r0, r0, #1
   194bc:	mov	r8, r5
   194c0:	bcs	19560 <__assert_fail@plt+0x7c74>
   194c4:	mov	r2, #0
   194c8:	mov	r1, r9
   194cc:	ldrb	r3, [r9, r2]
   194d0:	add	r7, r2, #4
   194d4:	cmp	r7, r0
   194d8:	bcc	194fc <__assert_fail@plt+0x7c10>
   194dc:	add	r2, r2, #1
   194e0:	strb	r3, [r1], #1
   194e4:	cmp	r2, r0
   194e8:	bcs	19560 <__assert_fail@plt+0x7c74>
   194ec:	ldrb	r3, [r9, r2]
   194f0:	add	r7, r2, #4
   194f4:	cmp	r7, r0
   194f8:	bcs	194dc <__assert_fail@plt+0x7bf0>
   194fc:	cmp	r3, #92	; 0x5c
   19500:	bne	194dc <__assert_fail@plt+0x7bf0>
   19504:	add	r7, r2, r9
   19508:	ldrb	r5, [r7, #1]
   1950c:	and	r4, r5, #252	; 0xfc
   19510:	cmp	r4, #48	; 0x30
   19514:	bne	194dc <__assert_fail@plt+0x7bf0>
   19518:	ldrb	r4, [r7, #2]
   1951c:	and	r7, r4, #248	; 0xf8
   19520:	cmp	r7, #48	; 0x30
   19524:	bne	194dc <__assert_fail@plt+0x7bf0>
   19528:	add	ip, r2, #3
   1952c:	ldrb	lr, [r9, ip]
   19530:	and	r7, lr, #248	; 0xf8
   19534:	cmp	r7, #48	; 0x30
   19538:	bne	194dc <__assert_fail@plt+0x7bf0>
   1953c:	lsl	r2, r5, #6
   19540:	add	r2, r2, r4, lsl #3
   19544:	add	r2, r2, lr
   19548:	add	r3, r2, #80	; 0x50
   1954c:	mov	r2, ip
   19550:	add	r2, r2, #1
   19554:	strb	r3, [r1], #1
   19558:	cmp	r2, r0
   1955c:	bcc	194ec <__assert_fail@plt+0x7c00>
   19560:	mov	r0, r6
   19564:	bl	11718 <strlen@plt>
   19568:	adds	r0, r0, #1
   1956c:	bcs	1960c <__assert_fail@plt+0x7d20>
   19570:	mov	r2, #0
   19574:	mov	r1, r6
   19578:	ldrb	r3, [r6, r2]
   1957c:	add	r7, r2, #4
   19580:	cmp	r7, r0
   19584:	bcc	195a8 <__assert_fail@plt+0x7cbc>
   19588:	add	r2, r2, #1
   1958c:	strb	r3, [r1], #1
   19590:	cmp	r2, r0
   19594:	bcs	1960c <__assert_fail@plt+0x7d20>
   19598:	ldrb	r3, [r6, r2]
   1959c:	add	r7, r2, #4
   195a0:	cmp	r7, r0
   195a4:	bcs	19588 <__assert_fail@plt+0x7c9c>
   195a8:	cmp	r3, #92	; 0x5c
   195ac:	bne	19588 <__assert_fail@plt+0x7c9c>
   195b0:	add	r7, r2, r6
   195b4:	ldrb	r5, [r7, #1]
   195b8:	and	r4, r5, #252	; 0xfc
   195bc:	cmp	r4, #48	; 0x30
   195c0:	bne	19588 <__assert_fail@plt+0x7c9c>
   195c4:	ldrb	r4, [r7, #2]
   195c8:	and	r7, r4, #248	; 0xf8
   195cc:	cmp	r7, #48	; 0x30
   195d0:	bne	19588 <__assert_fail@plt+0x7c9c>
   195d4:	add	ip, r2, #3
   195d8:	ldrb	lr, [r6, ip]
   195dc:	and	r7, lr, #248	; 0xf8
   195e0:	cmp	r7, #48	; 0x30
   195e4:	bne	19588 <__assert_fail@plt+0x7c9c>
   195e8:	lsl	r2, r5, #6
   195ec:	add	r2, r2, r4, lsl #3
   195f0:	add	r2, r2, lr
   195f4:	add	r3, r2, #80	; 0x50
   195f8:	mov	r2, ip
   195fc:	add	r2, r2, #1
   19600:	strb	r3, [r1], #1
   19604:	cmp	r2, r0
   19608:	bcc	19598 <__assert_fail@plt+0x7cac>
   1960c:	mov	r0, r8
   19610:	bl	11718 <strlen@plt>
   19614:	adds	r0, r0, #1
   19618:	bcs	196b8 <__assert_fail@plt+0x7dcc>
   1961c:	mov	r2, #0
   19620:	mov	r1, r8
   19624:	ldrb	r3, [r8, r2]
   19628:	add	r7, r2, #4
   1962c:	cmp	r7, r0
   19630:	bcc	19654 <__assert_fail@plt+0x7d68>
   19634:	add	r2, r2, #1
   19638:	strb	r3, [r1], #1
   1963c:	cmp	r2, r0
   19640:	bcs	196b8 <__assert_fail@plt+0x7dcc>
   19644:	ldrb	r3, [r8, r2]
   19648:	add	r7, r2, #4
   1964c:	cmp	r7, r0
   19650:	bcs	19634 <__assert_fail@plt+0x7d48>
   19654:	cmp	r3, #92	; 0x5c
   19658:	bne	19634 <__assert_fail@plt+0x7d48>
   1965c:	add	r7, r2, r8
   19660:	ldrb	r5, [r7, #1]
   19664:	and	r4, r5, #252	; 0xfc
   19668:	cmp	r4, #48	; 0x30
   1966c:	bne	19634 <__assert_fail@plt+0x7d48>
   19670:	ldrb	r4, [r7, #2]
   19674:	and	r7, r4, #248	; 0xf8
   19678:	cmp	r7, #48	; 0x30
   1967c:	bne	19634 <__assert_fail@plt+0x7d48>
   19680:	add	ip, r2, #3
   19684:	ldrb	lr, [r8, ip]
   19688:	and	r7, lr, #248	; 0xf8
   1968c:	cmp	r7, #48	; 0x30
   19690:	bne	19634 <__assert_fail@plt+0x7d48>
   19694:	lsl	r2, r5, #6
   19698:	add	r2, r2, r4, lsl #3
   1969c:	add	r2, r2, lr
   196a0:	add	r3, r2, #80	; 0x50
   196a4:	mov	r2, ip
   196a8:	add	r2, r2, #1
   196ac:	strb	r3, [r1], #1
   196b0:	cmp	r2, r0
   196b4:	bcc	19644 <__assert_fail@plt+0x7d58>
   196b8:	mov	r0, sl
   196bc:	bl	11718 <strlen@plt>
   196c0:	adds	r0, r0, #1
   196c4:	bcs	19764 <__assert_fail@plt+0x7e78>
   196c8:	mov	r2, #0
   196cc:	mov	r1, sl
   196d0:	ldrb	r3, [sl, r2]
   196d4:	add	r7, r2, #4
   196d8:	cmp	r7, r0
   196dc:	bcc	19700 <__assert_fail@plt+0x7e14>
   196e0:	add	r2, r2, #1
   196e4:	strb	r3, [r1], #1
   196e8:	cmp	r2, r0
   196ec:	bcs	19764 <__assert_fail@plt+0x7e78>
   196f0:	ldrb	r3, [sl, r2]
   196f4:	add	r7, r2, #4
   196f8:	cmp	r7, r0
   196fc:	bcs	196e0 <__assert_fail@plt+0x7df4>
   19700:	cmp	r3, #92	; 0x5c
   19704:	bne	196e0 <__assert_fail@plt+0x7df4>
   19708:	add	r7, r2, sl
   1970c:	ldrb	r5, [r7, #1]
   19710:	and	r4, r5, #252	; 0xfc
   19714:	cmp	r4, #48	; 0x30
   19718:	bne	196e0 <__assert_fail@plt+0x7df4>
   1971c:	ldrb	r4, [r7, #2]
   19720:	and	r7, r4, #248	; 0xf8
   19724:	cmp	r7, #48	; 0x30
   19728:	bne	196e0 <__assert_fail@plt+0x7df4>
   1972c:	add	ip, r2, #3
   19730:	ldrb	lr, [sl, ip]
   19734:	and	r7, lr, #248	; 0xf8
   19738:	cmp	r7, #48	; 0x30
   1973c:	bne	196e0 <__assert_fail@plt+0x7df4>
   19740:	lsl	r2, r5, #6
   19744:	add	r2, r2, r4, lsl #3
   19748:	add	r2, r2, lr
   1974c:	add	r3, r2, #80	; 0x50
   19750:	mov	r2, ip
   19754:	add	r2, r2, #1
   19758:	strb	r3, [r1], #1
   1975c:	cmp	r2, r0
   19760:	bcc	196f0 <__assert_fail@plt+0x7e04>
   19764:	mov	r0, #32
   19768:	bl	1c944 <__assert_fail@plt+0xb058>
   1976c:	mov	r7, r0
   19770:	mov	r0, r9
   19774:	bl	1ce48 <__assert_fail@plt+0xb55c>
   19778:	str	r0, [r7]
   1977c:	mov	r0, r6
   19780:	bl	1ce48 <__assert_fail@plt+0xb55c>
   19784:	str	r0, [r7, #4]
   19788:	mov	r0, r8
   1978c:	bl	1ce48 <__assert_fail@plt+0xb55c>
   19790:	str	r0, [r7, #8]
   19794:	mov	r0, sl
   19798:	bl	1ce48 <__assert_fail@plt+0xb55c>
   1979c:	str	r0, [r7, #12]
   197a0:	mov	r6, r0
   197a4:	ldr	r2, [sp, #20]
   197a8:	ldrb	r0, [r7, #24]
   197ac:	mov	r3, r2
   197b0:	orr	r4, r0, #4
   197b4:	ldr	r0, [sp, #16]
   197b8:	bfc	r3, #0, #12
   197bc:	strb	r4, [r7, #24]
   197c0:	bic	r1, r0, #255	; 0xff
   197c4:	uxtb	r0, r0
   197c8:	orr	r3, r3, r1, lsr #20
   197cc:	bfi	r0, r2, #8, #12
   197d0:	str	r3, [r7, #20]
   197d4:	orr	r0, r0, r1, lsl #12
   197d8:	movw	r1, #4422	; 0x1146
   197dc:	movt	r1, #2
   197e0:	str	r0, [r7, #16]
   197e4:	mov	r0, r6
   197e8:	bl	11520 <strcmp@plt>
   197ec:	cmp	r0, #0
   197f0:	mov	r8, #1
   197f4:	mov	r0, #1
   197f8:	beq	19964 <__assert_fail@plt+0x8078>
   197fc:	movw	r1, #4429	; 0x114d
   19800:	mov	r0, r6
   19804:	movt	r1, #2
   19808:	bl	11520 <strcmp@plt>
   1980c:	cmp	r0, #0
   19810:	mov	r0, #1
   19814:	beq	19964 <__assert_fail@plt+0x8078>
   19818:	movw	r1, #4434	; 0x1152
   1981c:	mov	r0, r6
   19820:	movt	r1, #2
   19824:	bl	11520 <strcmp@plt>
   19828:	cmp	r0, #0
   1982c:	mov	r0, #1
   19830:	beq	19964 <__assert_fail@plt+0x8078>
   19834:	movw	r1, #4440	; 0x1158
   19838:	mov	r0, r6
   1983c:	movt	r1, #2
   19840:	bl	11520 <strcmp@plt>
   19844:	cmp	r0, #0
   19848:	mov	r0, #1
   1984c:	beq	19964 <__assert_fail@plt+0x8078>
   19850:	movw	r1, #4448	; 0x1160
   19854:	mov	r0, r6
   19858:	movt	r1, #2
   1985c:	bl	11520 <strcmp@plt>
   19860:	cmp	r0, #0
   19864:	mov	r0, #1
   19868:	beq	19964 <__assert_fail@plt+0x8078>
   1986c:	movw	r1, #4455	; 0x1167
   19870:	mov	r0, r6
   19874:	movt	r1, #2
   19878:	bl	11520 <strcmp@plt>
   1987c:	cmp	r0, #0
   19880:	mov	r0, #1
   19884:	beq	19964 <__assert_fail@plt+0x8078>
   19888:	movw	r1, #4463	; 0x116f
   1988c:	mov	r0, r6
   19890:	movt	r1, #2
   19894:	bl	11520 <strcmp@plt>
   19898:	cmp	r0, #0
   1989c:	mov	r0, #1
   198a0:	beq	19964 <__assert_fail@plt+0x8078>
   198a4:	movw	r1, #4475	; 0x117b
   198a8:	mov	r0, r6
   198ac:	movt	r1, #2
   198b0:	bl	11520 <strcmp@plt>
   198b4:	cmp	r0, #0
   198b8:	mov	r0, #1
   198bc:	beq	19964 <__assert_fail@plt+0x8078>
   198c0:	movw	r1, #4482	; 0x1182
   198c4:	mov	r0, r6
   198c8:	movt	r1, #2
   198cc:	bl	11520 <strcmp@plt>
   198d0:	cmp	r0, #0
   198d4:	mov	r0, #1
   198d8:	beq	19964 <__assert_fail@plt+0x8078>
   198dc:	movw	r1, #4493	; 0x118d
   198e0:	mov	r0, r6
   198e4:	movt	r1, #2
   198e8:	bl	11520 <strcmp@plt>
   198ec:	cmp	r0, #0
   198f0:	mov	r0, #1
   198f4:	beq	19964 <__assert_fail@plt+0x8078>
   198f8:	movw	r1, #4499	; 0x1193
   198fc:	mov	r0, r6
   19900:	movt	r1, #2
   19904:	bl	11520 <strcmp@plt>
   19908:	cmp	r0, #0
   1990c:	mov	r0, #1
   19910:	beq	19964 <__assert_fail@plt+0x8078>
   19914:	movw	r1, #4505	; 0x1199
   19918:	mov	r0, r6
   1991c:	movt	r1, #2
   19920:	bl	11520 <strcmp@plt>
   19924:	cmp	r0, #0
   19928:	mov	r0, #1
   1992c:	beq	19964 <__assert_fail@plt+0x8078>
   19930:	movw	r1, #4512	; 0x11a0
   19934:	mov	r0, r6
   19938:	movt	r1, #2
   1993c:	bl	11520 <strcmp@plt>
   19940:	cmp	r0, #0
   19944:	mov	r0, #1
   19948:	beq	19964 <__assert_fail@plt+0x8078>
   1994c:	movw	r1, #4519	; 0x11a7
   19950:	mov	r0, r6
   19954:	movt	r1, #2
   19958:	bl	11520 <strcmp@plt>
   1995c:	clz	r0, r0
   19960:	lsr	r0, r0, #5
   19964:	bic	r1, r4, #1
   19968:	orr	r5, r1, r0
   1996c:	mov	r1, #58	; 0x3a
   19970:	strb	r5, [r7, #24]
   19974:	ldr	r4, [r7]
   19978:	mov	r0, r4
   1997c:	bl	11724 <strchr@plt>
   19980:	ldr	r3, [sp, #4]
   19984:	cmp	r0, #0
   19988:	beq	199ac <__assert_fail@plt+0x80c0>
   1998c:	add	r6, sp, #20
   19990:	b	19b18 <__assert_fail@plt+0x822c>
   19994:	ldr	r3, [sp, #4]
   19998:	movw	r8, #4401	; 0x1131
   1999c:	add	sl, sp, #12
   199a0:	add	r6, sp, #20
   199a4:	movt	r8, #2
   199a8:	b	19b40 <__assert_fail@plt+0x8254>
   199ac:	ldrb	r0, [r4]
   199b0:	mov	r9, r3
   199b4:	cmp	r0, #47	; 0x2f
   199b8:	bne	19a10 <__assert_fail@plt+0x8124>
   199bc:	ldrb	r0, [r4, #1]
   199c0:	cmp	r0, #47	; 0x2f
   199c4:	bne	19a10 <__assert_fail@plt+0x8124>
   199c8:	movw	r1, #4524	; 0x11ac
   199cc:	mov	r0, r6
   199d0:	movt	r1, #2
   199d4:	bl	11520 <strcmp@plt>
   199d8:	cmp	r0, #0
   199dc:	beq	19b10 <__assert_fail@plt+0x8224>
   199e0:	movw	r1, #4530	; 0x11b2
   199e4:	mov	r0, r6
   199e8:	movt	r1, #2
   199ec:	bl	11520 <strcmp@plt>
   199f0:	cmp	r0, #0
   199f4:	beq	19b10 <__assert_fail@plt+0x8224>
   199f8:	movw	r1, #4535	; 0x11b7
   199fc:	mov	r0, r6
   19a00:	movt	r1, #2
   19a04:	bl	11520 <strcmp@plt>
   19a08:	cmp	r0, #0
   19a0c:	beq	19b10 <__assert_fail@plt+0x8224>
   19a10:	movw	r1, #4540	; 0x11bc
   19a14:	mov	r0, r6
   19a18:	movt	r1, #2
   19a1c:	bl	11520 <strcmp@plt>
   19a20:	cmp	r0, #0
   19a24:	beq	19b10 <__assert_fail@plt+0x8224>
   19a28:	movw	r1, #4545	; 0x11c1
   19a2c:	mov	r0, r6
   19a30:	movt	r1, #2
   19a34:	bl	11520 <strcmp@plt>
   19a38:	cmp	r0, #0
   19a3c:	beq	19b10 <__assert_fail@plt+0x8224>
   19a40:	movw	r1, #4549	; 0x11c5
   19a44:	mov	r0, r6
   19a48:	movt	r1, #2
   19a4c:	bl	11520 <strcmp@plt>
   19a50:	cmp	r0, #0
   19a54:	beq	19b10 <__assert_fail@plt+0x8224>
   19a58:	movw	r1, #4554	; 0x11ca
   19a5c:	mov	r0, r6
   19a60:	movt	r1, #2
   19a64:	bl	11520 <strcmp@plt>
   19a68:	cmp	r0, #0
   19a6c:	beq	19b10 <__assert_fail@plt+0x8224>
   19a70:	movw	r1, #4565	; 0x11d5
   19a74:	mov	r0, r6
   19a78:	movt	r1, #2
   19a7c:	bl	11520 <strcmp@plt>
   19a80:	cmp	r0, #0
   19a84:	beq	19b10 <__assert_fail@plt+0x8224>
   19a88:	movw	r1, #4571	; 0x11db
   19a8c:	mov	r0, r6
   19a90:	movt	r1, #2
   19a94:	bl	11520 <strcmp@plt>
   19a98:	cmp	r0, #0
   19a9c:	beq	19b10 <__assert_fail@plt+0x8224>
   19aa0:	movw	r1, #4576	; 0x11e0
   19aa4:	mov	r0, r6
   19aa8:	movt	r1, #2
   19aac:	bl	11520 <strcmp@plt>
   19ab0:	cmp	r0, #0
   19ab4:	beq	19b10 <__assert_fail@plt+0x8224>
   19ab8:	movw	r1, #4582	; 0x11e6
   19abc:	mov	r0, r6
   19ac0:	movt	r1, #2
   19ac4:	bl	11520 <strcmp@plt>
   19ac8:	cmp	r0, #0
   19acc:	beq	19b10 <__assert_fail@plt+0x8224>
   19ad0:	movw	r1, #4588	; 0x11ec
   19ad4:	mov	r0, r6
   19ad8:	movt	r1, #2
   19adc:	bl	11520 <strcmp@plt>
   19ae0:	cmp	r0, #0
   19ae4:	add	r6, sp, #20
   19ae8:	mov	r3, r9
   19aec:	beq	19b18 <__assert_fail@plt+0x822c>
   19af0:	movw	r0, #4593	; 0x11f1
   19af4:	mov	r1, r4
   19af8:	movt	r0, #2
   19afc:	bl	11520 <strcmp@plt>
   19b00:	clz	r0, r0
   19b04:	mov	r3, r9
   19b08:	lsr	r8, r0, #5
   19b0c:	b	19b18 <__assert_fail@plt+0x822c>
   19b10:	add	r6, sp, #20
   19b14:	mov	r3, r9
   19b18:	and	r0, r5, #253	; 0xfd
   19b1c:	add	sl, sp, #12
   19b20:	orr	r0, r0, r8, lsl #1
   19b24:	movw	r8, #4401	; 0x1131
   19b28:	movt	r8, #2
   19b2c:	strb	r0, [r7, #24]
   19b30:	ldr	r0, [sp, #8]
   19b34:	str	r7, [r0]
   19b38:	add	r0, r7, #28
   19b3c:	str	r0, [sp, #8]
   19b40:	add	r7, sp, #16
   19b44:	add	r5, sp, #28
   19b48:	add	r4, sp, #24
   19b4c:	b	193dc <__assert_fail@plt+0x7af0>
   19b50:	movw	r0, #4600	; 0x11f8
   19b54:	movw	r1, #4163	; 0x1043
   19b58:	movt	r0, #2
   19b5c:	movt	r1, #2
   19b60:	bl	11874 <setmntent@plt>
   19b64:	cmp	r0, #0
   19b68:	beq	19f78 <__assert_fail@plt+0x868c>
   19b6c:	mov	r8, r0
   19b70:	bl	1167c <getmntent@plt>
   19b74:	cmp	r0, #0
   19b78:	beq	19f88 <__assert_fail@plt+0x869c>
   19b7c:	mov	r5, r0
   19b80:	add	sl, sp, #32
   19b84:	b	19be0 <__assert_fail@plt+0x82f4>
   19b88:	bic	r1, r4, #1
   19b8c:	orr	r4, r1, r0
   19b90:	mov	r1, #58	; 0x3a
   19b94:	strb	r4, [r9, #24]
   19b98:	ldr	r5, [r9]
   19b9c:	mov	r0, r5
   19ba0:	bl	11724 <strchr@plt>
   19ba4:	cmp	r0, #0
   19ba8:	beq	19dd0 <__assert_fail@plt+0x84e4>
   19bac:	mvn	r0, #0
   19bb0:	str	r0, [r9, #16]
   19bb4:	str	r0, [r9, #20]
   19bb8:	and	r0, r4, #253	; 0xfd
   19bbc:	orr	r0, r0, r6, lsl #1
   19bc0:	strb	r0, [r9, #24]
   19bc4:	mov	r0, r8
   19bc8:	str	r9, [sl]
   19bcc:	add	sl, r9, #28
   19bd0:	bl	1167c <getmntent@plt>
   19bd4:	mov	r5, r0
   19bd8:	cmp	r0, #0
   19bdc:	beq	19f8c <__assert_fail@plt+0x86a0>
   19be0:	movw	r1, #4610	; 0x1202
   19be4:	mov	r0, r5
   19be8:	movt	r1, #2
   19bec:	bl	11640 <hasmntopt@plt>
   19bf0:	str	r0, [sp, #8]
   19bf4:	mov	r0, #32
   19bf8:	bl	1c944 <__assert_fail@plt+0xb058>
   19bfc:	mov	r9, r0
   19c00:	ldr	r0, [r5]
   19c04:	bl	1ce48 <__assert_fail@plt+0xb55c>
   19c08:	str	r0, [r9]
   19c0c:	ldr	r0, [r5, #4]
   19c10:	bl	1ce48 <__assert_fail@plt+0xb55c>
   19c14:	str	r0, [r9, #4]
   19c18:	mov	r0, #0
   19c1c:	str	r0, [r9, #8]
   19c20:	ldr	r0, [r5, #8]
   19c24:	bl	1ce48 <__assert_fail@plt+0xb55c>
   19c28:	str	r0, [r9, #12]
   19c2c:	mov	r7, r0
   19c30:	movw	r1, #4422	; 0x1146
   19c34:	ldrb	r0, [r9, #24]
   19c38:	movt	r1, #2
   19c3c:	orr	r4, r0, #4
   19c40:	mov	r0, r7
   19c44:	strb	r4, [r9, #24]
   19c48:	bl	11520 <strcmp@plt>
   19c4c:	cmp	r0, #0
   19c50:	mov	r6, #1
   19c54:	mov	r0, #1
   19c58:	beq	19b88 <__assert_fail@plt+0x829c>
   19c5c:	movw	r1, #4429	; 0x114d
   19c60:	mov	r0, r7
   19c64:	movt	r1, #2
   19c68:	bl	11520 <strcmp@plt>
   19c6c:	cmp	r0, #0
   19c70:	mov	r0, #1
   19c74:	beq	19b88 <__assert_fail@plt+0x829c>
   19c78:	movw	r1, #4434	; 0x1152
   19c7c:	mov	r0, r7
   19c80:	movt	r1, #2
   19c84:	bl	11520 <strcmp@plt>
   19c88:	cmp	r0, #0
   19c8c:	mov	r0, #1
   19c90:	beq	19b88 <__assert_fail@plt+0x829c>
   19c94:	movw	r1, #4440	; 0x1158
   19c98:	mov	r0, r7
   19c9c:	movt	r1, #2
   19ca0:	bl	11520 <strcmp@plt>
   19ca4:	cmp	r0, #0
   19ca8:	mov	r0, #1
   19cac:	beq	19b88 <__assert_fail@plt+0x829c>
   19cb0:	movw	r1, #4448	; 0x1160
   19cb4:	mov	r0, r7
   19cb8:	movt	r1, #2
   19cbc:	bl	11520 <strcmp@plt>
   19cc0:	cmp	r0, #0
   19cc4:	mov	r0, #1
   19cc8:	beq	19b88 <__assert_fail@plt+0x829c>
   19ccc:	movw	r1, #4455	; 0x1167
   19cd0:	mov	r0, r7
   19cd4:	movt	r1, #2
   19cd8:	bl	11520 <strcmp@plt>
   19cdc:	cmp	r0, #0
   19ce0:	mov	r0, #1
   19ce4:	beq	19b88 <__assert_fail@plt+0x829c>
   19ce8:	movw	r1, #4463	; 0x116f
   19cec:	mov	r0, r7
   19cf0:	movt	r1, #2
   19cf4:	bl	11520 <strcmp@plt>
   19cf8:	cmp	r0, #0
   19cfc:	mov	r0, #1
   19d00:	beq	19b88 <__assert_fail@plt+0x829c>
   19d04:	movw	r1, #4475	; 0x117b
   19d08:	mov	r0, r7
   19d0c:	movt	r1, #2
   19d10:	bl	11520 <strcmp@plt>
   19d14:	cmp	r0, #0
   19d18:	mov	r0, #1
   19d1c:	beq	19b88 <__assert_fail@plt+0x829c>
   19d20:	movw	r1, #4482	; 0x1182
   19d24:	mov	r0, r7
   19d28:	movt	r1, #2
   19d2c:	bl	11520 <strcmp@plt>
   19d30:	cmp	r0, #0
   19d34:	mov	r0, #1
   19d38:	beq	19b88 <__assert_fail@plt+0x829c>
   19d3c:	movw	r1, #4493	; 0x118d
   19d40:	mov	r0, r7
   19d44:	movt	r1, #2
   19d48:	bl	11520 <strcmp@plt>
   19d4c:	cmp	r0, #0
   19d50:	mov	r0, #1
   19d54:	beq	19b88 <__assert_fail@plt+0x829c>
   19d58:	movw	r1, #4499	; 0x1193
   19d5c:	mov	r0, r7
   19d60:	movt	r1, #2
   19d64:	bl	11520 <strcmp@plt>
   19d68:	cmp	r0, #0
   19d6c:	mov	r0, #1
   19d70:	beq	19b88 <__assert_fail@plt+0x829c>
   19d74:	movw	r1, #4505	; 0x1199
   19d78:	mov	r0, r7
   19d7c:	movt	r1, #2
   19d80:	bl	11520 <strcmp@plt>
   19d84:	cmp	r0, #0
   19d88:	mov	r0, #1
   19d8c:	beq	19b88 <__assert_fail@plt+0x829c>
   19d90:	movw	r1, #4512	; 0x11a0
   19d94:	mov	r0, r7
   19d98:	movt	r1, #2
   19d9c:	bl	11520 <strcmp@plt>
   19da0:	cmp	r0, #0
   19da4:	mov	r0, #1
   19da8:	beq	19b88 <__assert_fail@plt+0x829c>
   19dac:	movw	r1, #4519	; 0x11a7
   19db0:	mov	r0, r7
   19db4:	movt	r1, #2
   19db8:	bl	11520 <strcmp@plt>
   19dbc:	ldr	r1, [sp, #8]
   19dc0:	orr	r0, r1, r0
   19dc4:	clz	r0, r0
   19dc8:	lsr	r0, r0, #5
   19dcc:	b	19b88 <__assert_fail@plt+0x829c>
   19dd0:	ldrb	r0, [r5]
   19dd4:	cmp	r0, #47	; 0x2f
   19dd8:	bne	19e30 <__assert_fail@plt+0x8544>
   19ddc:	ldrb	r0, [r5, #1]
   19de0:	cmp	r0, #47	; 0x2f
   19de4:	bne	19e30 <__assert_fail@plt+0x8544>
   19de8:	movw	r1, #4524	; 0x11ac
   19dec:	mov	r0, r7
   19df0:	movt	r1, #2
   19df4:	bl	11520 <strcmp@plt>
   19df8:	cmp	r0, #0
   19dfc:	beq	19bac <__assert_fail@plt+0x82c0>
   19e00:	movw	r1, #4530	; 0x11b2
   19e04:	mov	r0, r7
   19e08:	movt	r1, #2
   19e0c:	bl	11520 <strcmp@plt>
   19e10:	cmp	r0, #0
   19e14:	beq	19bac <__assert_fail@plt+0x82c0>
   19e18:	movw	r1, #4535	; 0x11b7
   19e1c:	mov	r0, r7
   19e20:	movt	r1, #2
   19e24:	bl	11520 <strcmp@plt>
   19e28:	cmp	r0, #0
   19e2c:	beq	19bac <__assert_fail@plt+0x82c0>
   19e30:	movw	r1, #4540	; 0x11bc
   19e34:	mov	r0, r7
   19e38:	movt	r1, #2
   19e3c:	bl	11520 <strcmp@plt>
   19e40:	cmp	r0, #0
   19e44:	beq	19bac <__assert_fail@plt+0x82c0>
   19e48:	movw	r1, #4545	; 0x11c1
   19e4c:	mov	r0, r7
   19e50:	movt	r1, #2
   19e54:	bl	11520 <strcmp@plt>
   19e58:	cmp	r0, #0
   19e5c:	beq	19bac <__assert_fail@plt+0x82c0>
   19e60:	movw	r1, #4549	; 0x11c5
   19e64:	mov	r0, r7
   19e68:	movt	r1, #2
   19e6c:	bl	11520 <strcmp@plt>
   19e70:	cmp	r0, #0
   19e74:	beq	19bac <__assert_fail@plt+0x82c0>
   19e78:	movw	r1, #4554	; 0x11ca
   19e7c:	mov	r0, r7
   19e80:	movt	r1, #2
   19e84:	bl	11520 <strcmp@plt>
   19e88:	cmp	r0, #0
   19e8c:	beq	19bac <__assert_fail@plt+0x82c0>
   19e90:	movw	r1, #4565	; 0x11d5
   19e94:	mov	r0, r7
   19e98:	movt	r1, #2
   19e9c:	bl	11520 <strcmp@plt>
   19ea0:	cmp	r0, #0
   19ea4:	beq	19bac <__assert_fail@plt+0x82c0>
   19ea8:	movw	r1, #4571	; 0x11db
   19eac:	mov	r0, r7
   19eb0:	movt	r1, #2
   19eb4:	bl	11520 <strcmp@plt>
   19eb8:	cmp	r0, #0
   19ebc:	beq	19bac <__assert_fail@plt+0x82c0>
   19ec0:	movw	r1, #4576	; 0x11e0
   19ec4:	mov	r0, r7
   19ec8:	movt	r1, #2
   19ecc:	bl	11520 <strcmp@plt>
   19ed0:	cmp	r0, #0
   19ed4:	beq	19bac <__assert_fail@plt+0x82c0>
   19ed8:	movw	r1, #4582	; 0x11e6
   19edc:	mov	r0, r7
   19ee0:	movt	r1, #2
   19ee4:	bl	11520 <strcmp@plt>
   19ee8:	cmp	r0, #0
   19eec:	beq	19bac <__assert_fail@plt+0x82c0>
   19ef0:	movw	r1, #4588	; 0x11ec
   19ef4:	mov	r0, r7
   19ef8:	movt	r1, #2
   19efc:	bl	11520 <strcmp@plt>
   19f00:	cmp	r0, #0
   19f04:	beq	19bac <__assert_fail@plt+0x82c0>
   19f08:	movw	r0, #4593	; 0x11f1
   19f0c:	mov	r1, r5
   19f10:	movt	r0, #2
   19f14:	bl	11520 <strcmp@plt>
   19f18:	clz	r0, r0
   19f1c:	lsr	r6, r0, #5
   19f20:	b	19bac <__assert_fail@plt+0x82c0>
   19f24:	add	r0, sp, #32
   19f28:	str	r0, [sp, #8]
   19f2c:	ldr	r0, [sp, #28]
   19f30:	bl	160c4 <__assert_fail@plt+0x47d8>
   19f34:	ldrb	r1, [r9]
   19f38:	tst	r1, #32
   19f3c:	bne	19f58 <__assert_fail@plt+0x866c>
   19f40:	mov	r0, r9
   19f44:	bl	1f3c8 <__assert_fail@plt+0xdadc>
   19f48:	ldr	sl, [sp, #8]
   19f4c:	cmn	r0, #1
   19f50:	bne	19f9c <__assert_fail@plt+0x86b0>
   19f54:	b	19fb4 <__assert_fail@plt+0x86c8>
   19f58:	bl	11748 <__errno_location@plt>
   19f5c:	ldr	r6, [r0]
   19f60:	mov	r5, r0
   19f64:	mov	r0, r9
   19f68:	bl	1f3c8 <__assert_fail@plt+0xdadc>
   19f6c:	ldr	sl, [sp, #8]
   19f70:	str	r6, [r5]
   19f74:	b	19fb4 <__assert_fail@plt+0x86c8>
   19f78:	mov	r4, #0
   19f7c:	mov	r0, r4
   19f80:	sub	sp, fp, #28
   19f84:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19f88:	add	sl, sp, #32
   19f8c:	mov	r0, r8
   19f90:	bl	117cc <endmntent@plt>
   19f94:	cmp	r0, #0
   19f98:	beq	19fb4 <__assert_fail@plt+0x86c8>
   19f9c:	mov	r0, #0
   19fa0:	str	r0, [sl]
   19fa4:	ldr	r4, [sp, #32]
   19fa8:	mov	r0, r4
   19fac:	sub	sp, fp, #28
   19fb0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19fb4:	bl	11748 <__errno_location@plt>
   19fb8:	mov	r4, #0
   19fbc:	ldr	r8, [r0]
   19fc0:	mov	r5, r0
   19fc4:	str	r4, [sl]
   19fc8:	ldr	r6, [sp, #32]
   19fcc:	cmp	r6, #0
   19fd0:	bne	19ffc <__assert_fail@plt+0x8710>
   19fd4:	str	r8, [r5]
   19fd8:	mov	r0, r4
   19fdc:	sub	sp, fp, #28
   19fe0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19fe4:	mov	r0, r6
   19fe8:	bl	160c4 <__assert_fail@plt+0x47d8>
   19fec:	cmp	r7, #0
   19ff0:	mov	r6, r7
   19ff4:	str	r7, [sp, #32]
   19ff8:	beq	19fd4 <__assert_fail@plt+0x86e8>
   19ffc:	ldr	r0, [r6]
   1a000:	ldr	r7, [r6, #28]
   1a004:	bl	160c4 <__assert_fail@plt+0x47d8>
   1a008:	ldr	r0, [r6, #4]
   1a00c:	bl	160c4 <__assert_fail@plt+0x47d8>
   1a010:	ldr	r0, [r6, #8]
   1a014:	bl	160c4 <__assert_fail@plt+0x47d8>
   1a018:	ldrb	r0, [r6, #24]
   1a01c:	tst	r0, #4
   1a020:	beq	19fe4 <__assert_fail@plt+0x86f8>
   1a024:	ldr	r0, [r6, #12]
   1a028:	bl	160c4 <__assert_fail@plt+0x47d8>
   1a02c:	b	19fe4 <__assert_fail@plt+0x86f8>
   1a030:	push	{r4, sl, fp, lr}
   1a034:	add	fp, sp, #8
   1a038:	mov	r4, r0
   1a03c:	ldr	r0, [r0]
   1a040:	bl	160c4 <__assert_fail@plt+0x47d8>
   1a044:	ldr	r0, [r4, #4]
   1a048:	bl	160c4 <__assert_fail@plt+0x47d8>
   1a04c:	ldr	r0, [r4, #8]
   1a050:	bl	160c4 <__assert_fail@plt+0x47d8>
   1a054:	ldrb	r0, [r4, #24]
   1a058:	tst	r0, #4
   1a05c:	beq	1a068 <__assert_fail@plt+0x877c>
   1a060:	ldr	r0, [r4, #12]
   1a064:	bl	160c4 <__assert_fail@plt+0x47d8>
   1a068:	mov	r0, r4
   1a06c:	pop	{r4, sl, fp, lr}
   1a070:	b	160c4 <__assert_fail@plt+0x47d8>
   1a074:	push	{r4, r5, fp, lr}
   1a078:	add	fp, sp, #8
   1a07c:	cmp	r0, #0
   1a080:	beq	1a114 <__assert_fail@plt+0x8828>
   1a084:	mov	r1, #47	; 0x2f
   1a088:	mov	r4, r0
   1a08c:	bl	11808 <strrchr@plt>
   1a090:	cmp	r0, #0
   1a094:	mov	r5, r4
   1a098:	addne	r5, r0, #1
   1a09c:	sub	r0, r5, r4
   1a0a0:	cmp	r0, #7
   1a0a4:	blt	1a0f8 <__assert_fail@plt+0x880c>
   1a0a8:	movw	r1, #4671	; 0x123f
   1a0ac:	sub	r0, r5, #7
   1a0b0:	mov	r2, #7
   1a0b4:	movt	r1, #2
   1a0b8:	bl	118b0 <strncmp@plt>
   1a0bc:	cmp	r0, #0
   1a0c0:	bne	1a0f8 <__assert_fail@plt+0x880c>
   1a0c4:	movw	r1, #4679	; 0x1247
   1a0c8:	mov	r0, r5
   1a0cc:	mov	r2, #3
   1a0d0:	movt	r1, #2
   1a0d4:	bl	118b0 <strncmp@plt>
   1a0d8:	cmp	r0, #0
   1a0dc:	beq	1a0e8 <__assert_fail@plt+0x87fc>
   1a0e0:	mov	r4, r5
   1a0e4:	b	1a0f8 <__assert_fail@plt+0x880c>
   1a0e8:	movw	r0, #8992	; 0x2320
   1a0ec:	add	r4, r5, #3
   1a0f0:	movt	r0, #3
   1a0f4:	str	r4, [r0]
   1a0f8:	movw	r0, #8996	; 0x2324
   1a0fc:	movt	r0, #3
   1a100:	str	r4, [r0]
   1a104:	movw	r0, #9144	; 0x23b8
   1a108:	movt	r0, #3
   1a10c:	str	r4, [r0]
   1a110:	pop	{r4, r5, fp, pc}
   1a114:	movw	r0, #9008	; 0x2330
   1a118:	mov	r1, #55	; 0x37
   1a11c:	mov	r2, #1
   1a120:	movt	r0, #3
   1a124:	ldr	r3, [r0]
   1a128:	movw	r0, #4615	; 0x1207
   1a12c:	movt	r0, #2
   1a130:	bl	1161c <fwrite@plt>
   1a134:	bl	118bc <abort@plt>
   1a138:	push	{r4, r5, r6, sl, fp, lr}
   1a13c:	add	fp, sp, #16
   1a140:	mov	r4, r0
   1a144:	movw	r0, #9152	; 0x23c0
   1a148:	movt	r0, #3
   1a14c:	cmp	r4, #0
   1a150:	moveq	r4, r0
   1a154:	bl	11748 <__errno_location@plt>
   1a158:	ldr	r6, [r0]
   1a15c:	mov	r5, r0
   1a160:	mov	r0, r4
   1a164:	mov	r1, #48	; 0x30
   1a168:	bl	1cda4 <__assert_fail@plt+0xb4b8>
   1a16c:	str	r6, [r5]
   1a170:	pop	{r4, r5, r6, sl, fp, pc}
   1a174:	movw	r1, #9152	; 0x23c0
   1a178:	cmp	r0, #0
   1a17c:	movt	r1, #3
   1a180:	movne	r1, r0
   1a184:	ldr	r0, [r1]
   1a188:	bx	lr
   1a18c:	movw	r2, #9152	; 0x23c0
   1a190:	cmp	r0, #0
   1a194:	movt	r2, #3
   1a198:	movne	r2, r0
   1a19c:	str	r1, [r2]
   1a1a0:	bx	lr
   1a1a4:	movw	r3, #9152	; 0x23c0
   1a1a8:	cmp	r0, #0
   1a1ac:	and	r2, r2, #1
   1a1b0:	movt	r3, #3
   1a1b4:	movne	r3, r0
   1a1b8:	ubfx	r0, r1, #5, #3
   1a1bc:	and	r1, r1, #31
   1a1c0:	add	ip, r3, r0, lsl #2
   1a1c4:	mov	r0, #1
   1a1c8:	ldr	r3, [ip, #8]
   1a1cc:	and	r0, r0, r3, lsr r1
   1a1d0:	eor	r2, r0, r2
   1a1d4:	eor	r1, r3, r2, lsl r1
   1a1d8:	str	r1, [ip, #8]
   1a1dc:	bx	lr
   1a1e0:	movw	r2, #9152	; 0x23c0
   1a1e4:	cmp	r0, #0
   1a1e8:	movt	r2, #3
   1a1ec:	movne	r2, r0
   1a1f0:	ldr	r0, [r2, #4]
   1a1f4:	str	r1, [r2, #4]
   1a1f8:	bx	lr
   1a1fc:	push	{fp, lr}
   1a200:	mov	fp, sp
   1a204:	movw	r3, #9152	; 0x23c0
   1a208:	cmp	r0, #0
   1a20c:	movt	r3, #3
   1a210:	movne	r3, r0
   1a214:	cmp	r1, #0
   1a218:	mov	r0, #10
   1a21c:	cmpne	r2, #0
   1a220:	str	r0, [r3]
   1a224:	bne	1a22c <__assert_fail@plt+0x8940>
   1a228:	bl	118bc <abort@plt>
   1a22c:	str	r1, [r3, #40]	; 0x28
   1a230:	str	r2, [r3, #44]	; 0x2c
   1a234:	pop	{fp, pc}
   1a238:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a23c:	add	fp, sp, #28
   1a240:	sub	sp, sp, #20
   1a244:	mov	r7, r0
   1a248:	ldr	r0, [fp, #8]
   1a24c:	movw	r5, #9152	; 0x23c0
   1a250:	mov	r8, r3
   1a254:	mov	r9, r2
   1a258:	mov	sl, r1
   1a25c:	movt	r5, #3
   1a260:	cmp	r0, #0
   1a264:	movne	r5, r0
   1a268:	bl	11748 <__errno_location@plt>
   1a26c:	ldr	r2, [r5, #40]	; 0x28
   1a270:	ldr	r3, [r5, #44]	; 0x2c
   1a274:	mov	r4, r0
   1a278:	ldm	r5, {r0, r1}
   1a27c:	add	r5, r5, #8
   1a280:	ldr	r6, [r4]
   1a284:	stm	sp, {r0, r1, r5}
   1a288:	mov	r0, r7
   1a28c:	mov	r1, sl
   1a290:	str	r2, [sp, #12]
   1a294:	str	r3, [sp, #16]
   1a298:	mov	r2, r9
   1a29c:	mov	r3, r8
   1a2a0:	bl	1a2b0 <__assert_fail@plt+0x89c4>
   1a2a4:	str	r6, [r4]
   1a2a8:	sub	sp, fp, #28
   1a2ac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a2b0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a2b4:	add	fp, sp, #28
   1a2b8:	sub	sp, sp, #156	; 0x9c
   1a2bc:	str	r0, [fp, #-84]	; 0xffffffac
   1a2c0:	add	r0, r2, #1
   1a2c4:	mov	r6, r1
   1a2c8:	mov	r7, r3
   1a2cc:	str	r2, [fp, #-80]	; 0xffffffb0
   1a2d0:	str	r0, [sp, #80]	; 0x50
   1a2d4:	ldr	r0, [fp, #12]
   1a2d8:	and	r1, r0, #1
   1a2dc:	str	r1, [sp, #36]	; 0x24
   1a2e0:	and	r1, r0, #4
   1a2e4:	str	r1, [sp, #32]
   1a2e8:	ubfx	r8, r0, #1, #1
   1a2ec:	bl	11634 <__ctype_get_mb_cur_max@plt>
   1a2f0:	str	r0, [sp, #40]	; 0x28
   1a2f4:	ldr	r0, [fp, #24]
   1a2f8:	ldr	r4, [fp, #8]
   1a2fc:	mov	r1, #0
   1a300:	str	r1, [fp, #-52]	; 0xffffffcc
   1a304:	mov	r1, #0
   1a308:	str	r1, [sp, #60]	; 0x3c
   1a30c:	mov	r1, #1
   1a310:	str	r1, [sp, #84]	; 0x54
   1a314:	str	r0, [sp, #76]	; 0x4c
   1a318:	ldr	r0, [fp, #20]
   1a31c:	str	r0, [sp, #72]	; 0x48
   1a320:	mov	r0, #0
   1a324:	str	r0, [sp, #56]	; 0x38
   1a328:	mov	r0, #0
   1a32c:	str	r0, [fp, #-88]	; 0xffffffa8
   1a330:	mov	r0, #0
   1a334:	str	r0, [fp, #-72]	; 0xffffffb8
   1a338:	mov	r0, #0
   1a33c:	cmp	r4, #10
   1a340:	bhi	1b65c <__assert_fail@plt+0x9d70>
   1a344:	add	r1, pc, #24
   1a348:	ldr	ip, [fp, #-84]	; 0xffffffac
   1a34c:	ldr	lr, [fp, #-80]	; 0xffffffb0
   1a350:	mov	r5, r6
   1a354:	mov	r9, #0
   1a358:	mov	r2, #1
   1a35c:	mov	r3, #0
   1a360:	ldr	pc, [r1, r4, lsl #2]
   1a364:	andeq	sl, r1, ip, lsr #8
   1a368:	andeq	sl, r1, r8, ror #8
   1a36c:	andeq	sl, r1, ip, lsr r4
   1a370:	andeq	sl, r1, r4, lsr #8
   1a374:	andeq	sl, r1, ip, asr r4
   1a378:	andeq	sl, r1, r0, asr #9
   1a37c:	andeq	sl, r1, ip, asr #8
   1a380:	andeq	sl, r1, r8, lsr r7
   1a384:	muleq	r1, r0, r3
   1a388:	muleq	r1, r0, r3
   1a38c:	andeq	sl, r1, r8, asr #11
   1a390:	movw	r6, #4759	; 0x1297
   1a394:	mov	r0, #0
   1a398:	mov	r2, #5
   1a39c:	movt	r6, #2
   1a3a0:	mov	r1, r6
   1a3a4:	bl	115a4 <dcgettext@plt>
   1a3a8:	cmp	r0, r6
   1a3ac:	str	r0, [sp, #72]	; 0x48
   1a3b0:	bne	1a5a0 <__assert_fail@plt+0x8cb4>
   1a3b4:	bl	1f654 <__assert_fail@plt+0xdd68>
   1a3b8:	ldrb	r1, [r0]
   1a3bc:	and	r1, r1, #223	; 0xdf
   1a3c0:	cmp	r1, #71	; 0x47
   1a3c4:	beq	1a520 <__assert_fail@plt+0x8c34>
   1a3c8:	cmp	r1, #85	; 0x55
   1a3cc:	bne	1a584 <__assert_fail@plt+0x8c98>
   1a3d0:	ldrb	r1, [r0, #1]
   1a3d4:	and	r1, r1, #223	; 0xdf
   1a3d8:	cmp	r1, #84	; 0x54
   1a3dc:	bne	1a584 <__assert_fail@plt+0x8c98>
   1a3e0:	ldrb	r1, [r0, #2]
   1a3e4:	and	r1, r1, #223	; 0xdf
   1a3e8:	cmp	r1, #70	; 0x46
   1a3ec:	bne	1a584 <__assert_fail@plt+0x8c98>
   1a3f0:	ldrb	r1, [r0, #3]
   1a3f4:	cmp	r1, #45	; 0x2d
   1a3f8:	bne	1a584 <__assert_fail@plt+0x8c98>
   1a3fc:	ldrb	r1, [r0, #4]
   1a400:	cmp	r1, #56	; 0x38
   1a404:	bne	1a584 <__assert_fail@plt+0x8c98>
   1a408:	ldrb	r0, [r0, #5]
   1a40c:	cmp	r0, #0
   1a410:	movw	r0, #4761	; 0x1299
   1a414:	movt	r0, #2
   1a418:	str	r0, [sp, #72]	; 0x48
   1a41c:	bne	1a584 <__assert_fail@plt+0x8c98>
   1a420:	b	1a5a0 <__assert_fail@plt+0x8cb4>
   1a424:	mov	r0, #1
   1a428:	b	1a468 <__assert_fail@plt+0x8b7c>
   1a42c:	mov	r4, #0
   1a430:	mov	r9, #0
   1a434:	mov	r2, r0
   1a438:	b	1a4b8 <__assert_fail@plt+0x8bcc>
   1a43c:	tst	r8, #1
   1a440:	bne	1a468 <__assert_fail@plt+0x8b7c>
   1a444:	mov	r2, r0
   1a448:	b	1a490 <__assert_fail@plt+0x8ba4>
   1a44c:	mov	r0, #1
   1a450:	mov	r9, #0
   1a454:	mov	r4, #5
   1a458:	b	1a4d4 <__assert_fail@plt+0x8be8>
   1a45c:	mov	r2, #1
   1a460:	tst	r8, #1
   1a464:	beq	1a490 <__assert_fail@plt+0x8ba4>
   1a468:	mov	r1, #1
   1a46c:	mov	r9, #0
   1a470:	mov	r4, #2
   1a474:	mov	r2, r0
   1a478:	mov	r3, #1
   1a47c:	str	r1, [fp, #-72]	; 0xffffffb8
   1a480:	movw	r1, #6069	; 0x17b5
   1a484:	movt	r1, #2
   1a488:	str	r1, [fp, #-88]	; 0xffffffa8
   1a48c:	b	1a738 <__assert_fail@plt+0x8e4c>
   1a490:	cmp	r5, #0
   1a494:	mov	r9, #1
   1a498:	mov	r4, #2
   1a49c:	movne	r0, #39	; 0x27
   1a4a0:	strbne	r0, [ip]
   1a4a4:	movw	r0, #6069	; 0x17b5
   1a4a8:	movt	r0, #2
   1a4ac:	str	r0, [fp, #-88]	; 0xffffffa8
   1a4b0:	mov	r0, #1
   1a4b4:	str	r0, [fp, #-72]	; 0xffffffb8
   1a4b8:	mov	r3, #0
   1a4bc:	b	1a738 <__assert_fail@plt+0x8e4c>
   1a4c0:	mov	r4, #5
   1a4c4:	tst	r8, #1
   1a4c8:	beq	1a4f0 <__assert_fail@plt+0x8c04>
   1a4cc:	mov	r0, #1
   1a4d0:	mov	r9, #0
   1a4d4:	str	r0, [fp, #-72]	; 0xffffffb8
   1a4d8:	movw	r0, #3093	; 0xc15
   1a4dc:	mov	r2, #1
   1a4e0:	mov	r3, #1
   1a4e4:	movt	r0, #2
   1a4e8:	str	r0, [fp, #-88]	; 0xffffffa8
   1a4ec:	b	1a738 <__assert_fail@plt+0x8e4c>
   1a4f0:	cmp	r5, #0
   1a4f4:	mov	r3, #0
   1a4f8:	mov	r9, #1
   1a4fc:	mov	r2, #1
   1a500:	movne	r0, #34	; 0x22
   1a504:	strbne	r0, [ip]
   1a508:	movw	r0, #3093	; 0xc15
   1a50c:	movt	r0, #2
   1a510:	str	r0, [fp, #-88]	; 0xffffffa8
   1a514:	mov	r0, #1
   1a518:	str	r0, [fp, #-72]	; 0xffffffb8
   1a51c:	b	1a738 <__assert_fail@plt+0x8e4c>
   1a520:	ldrb	r1, [r0, #1]
   1a524:	and	r1, r1, #223	; 0xdf
   1a528:	cmp	r1, #66	; 0x42
   1a52c:	bne	1a584 <__assert_fail@plt+0x8c98>
   1a530:	ldrb	r1, [r0, #2]
   1a534:	cmp	r1, #49	; 0x31
   1a538:	bne	1a584 <__assert_fail@plt+0x8c98>
   1a53c:	ldrb	r1, [r0, #3]
   1a540:	cmp	r1, #56	; 0x38
   1a544:	bne	1a584 <__assert_fail@plt+0x8c98>
   1a548:	ldrb	r1, [r0, #4]
   1a54c:	cmp	r1, #48	; 0x30
   1a550:	bne	1a584 <__assert_fail@plt+0x8c98>
   1a554:	ldrb	r1, [r0, #5]
   1a558:	cmp	r1, #51	; 0x33
   1a55c:	bne	1a584 <__assert_fail@plt+0x8c98>
   1a560:	ldrb	r1, [r0, #6]
   1a564:	cmp	r1, #48	; 0x30
   1a568:	bne	1a584 <__assert_fail@plt+0x8c98>
   1a56c:	ldrb	r0, [r0, #7]
   1a570:	cmp	r0, #0
   1a574:	movw	r0, #4769	; 0x12a1
   1a578:	movt	r0, #2
   1a57c:	str	r0, [sp, #72]	; 0x48
   1a580:	beq	1a5a0 <__assert_fail@plt+0x8cb4>
   1a584:	movw	r1, #3093	; 0xc15
   1a588:	movw	r0, #6069	; 0x17b5
   1a58c:	cmp	r4, #9
   1a590:	movt	r1, #2
   1a594:	movt	r0, #2
   1a598:	moveq	r0, r1
   1a59c:	str	r0, [sp, #72]	; 0x48
   1a5a0:	movw	r6, #6069	; 0x17b5
   1a5a4:	mov	r0, #0
   1a5a8:	mov	r2, #5
   1a5ac:	movt	r6, #2
   1a5b0:	mov	r1, r6
   1a5b4:	bl	115a4 <dcgettext@plt>
   1a5b8:	cmp	r0, r6
   1a5bc:	str	r0, [sp, #76]	; 0x4c
   1a5c0:	beq	1a60c <__assert_fail@plt+0x8d20>
   1a5c4:	ldr	ip, [fp, #-84]	; 0xffffffac
   1a5c8:	mov	r9, #0
   1a5cc:	tst	r8, #1
   1a5d0:	bne	1a714 <__assert_fail@plt+0x8e28>
   1a5d4:	ldr	r0, [sp, #72]	; 0x48
   1a5d8:	ldrb	r0, [r0]
   1a5dc:	cmp	r0, #0
   1a5e0:	beq	1a714 <__assert_fail@plt+0x8e28>
   1a5e4:	ldr	r1, [sp, #72]	; 0x48
   1a5e8:	mov	r9, #0
   1a5ec:	add	r1, r1, #1
   1a5f0:	cmp	r9, r5
   1a5f4:	strbcc	r0, [ip, r9]
   1a5f8:	ldrb	r0, [r1, r9]
   1a5fc:	add	r9, r9, #1
   1a600:	cmp	r0, #0
   1a604:	bne	1a5f0 <__assert_fail@plt+0x8d04>
   1a608:	b	1a714 <__assert_fail@plt+0x8e28>
   1a60c:	bl	1f654 <__assert_fail@plt+0xdd68>
   1a610:	ldrb	r1, [r0]
   1a614:	and	r1, r1, #223	; 0xdf
   1a618:	cmp	r1, #71	; 0x47
   1a61c:	beq	1a68c <__assert_fail@plt+0x8da0>
   1a620:	ldr	ip, [fp, #-84]	; 0xffffffac
   1a624:	cmp	r1, #85	; 0x55
   1a628:	bne	1a6e8 <__assert_fail@plt+0x8dfc>
   1a62c:	ldrb	r1, [r0, #1]
   1a630:	and	r1, r1, #223	; 0xdf
   1a634:	cmp	r1, #84	; 0x54
   1a638:	bne	1a6e8 <__assert_fail@plt+0x8dfc>
   1a63c:	ldrb	r1, [r0, #2]
   1a640:	and	r1, r1, #223	; 0xdf
   1a644:	cmp	r1, #70	; 0x46
   1a648:	bne	1a6e8 <__assert_fail@plt+0x8dfc>
   1a64c:	ldrb	r1, [r0, #3]
   1a650:	cmp	r1, #45	; 0x2d
   1a654:	bne	1a6e8 <__assert_fail@plt+0x8dfc>
   1a658:	ldrb	r1, [r0, #4]
   1a65c:	cmp	r1, #56	; 0x38
   1a660:	bne	1a6e8 <__assert_fail@plt+0x8dfc>
   1a664:	ldrb	r0, [r0, #5]
   1a668:	cmp	r0, #0
   1a66c:	bne	1a6e8 <__assert_fail@plt+0x8dfc>
   1a670:	movw	r0, #4765	; 0x129d
   1a674:	movt	r0, #2
   1a678:	str	r0, [sp, #76]	; 0x4c
   1a67c:	mov	r9, #0
   1a680:	tst	r8, #1
   1a684:	beq	1a5d4 <__assert_fail@plt+0x8ce8>
   1a688:	b	1a714 <__assert_fail@plt+0x8e28>
   1a68c:	ldrb	r1, [r0, #1]
   1a690:	ldr	ip, [fp, #-84]	; 0xffffffac
   1a694:	and	r1, r1, #223	; 0xdf
   1a698:	cmp	r1, #66	; 0x42
   1a69c:	bne	1a6e8 <__assert_fail@plt+0x8dfc>
   1a6a0:	ldrb	r1, [r0, #2]
   1a6a4:	cmp	r1, #49	; 0x31
   1a6a8:	bne	1a6e8 <__assert_fail@plt+0x8dfc>
   1a6ac:	ldrb	r1, [r0, #3]
   1a6b0:	cmp	r1, #56	; 0x38
   1a6b4:	bne	1a6e8 <__assert_fail@plt+0x8dfc>
   1a6b8:	ldrb	r1, [r0, #4]
   1a6bc:	cmp	r1, #48	; 0x30
   1a6c0:	bne	1a6e8 <__assert_fail@plt+0x8dfc>
   1a6c4:	ldrb	r1, [r0, #5]
   1a6c8:	cmp	r1, #51	; 0x33
   1a6cc:	bne	1a6e8 <__assert_fail@plt+0x8dfc>
   1a6d0:	ldrb	r1, [r0, #6]
   1a6d4:	cmp	r1, #48	; 0x30
   1a6d8:	bne	1a6e8 <__assert_fail@plt+0x8dfc>
   1a6dc:	ldrb	r0, [r0, #7]
   1a6e0:	cmp	r0, #0
   1a6e4:	beq	1b4fc <__assert_fail@plt+0x9c10>
   1a6e8:	movw	r0, #6069	; 0x17b5
   1a6ec:	cmp	r4, #9
   1a6f0:	movt	r0, #2
   1a6f4:	mov	r1, r0
   1a6f8:	movw	r0, #3093	; 0xc15
   1a6fc:	movt	r0, #2
   1a700:	moveq	r1, r0
   1a704:	str	r1, [sp, #76]	; 0x4c
   1a708:	mov	r9, #0
   1a70c:	tst	r8, #1
   1a710:	beq	1a5d4 <__assert_fail@plt+0x8ce8>
   1a714:	ldr	r6, [sp, #76]	; 0x4c
   1a718:	mov	r0, r6
   1a71c:	bl	11718 <strlen@plt>
   1a720:	ldr	ip, [fp, #-84]	; 0xffffffac
   1a724:	ldr	lr, [fp, #-80]	; 0xffffffb0
   1a728:	str	r0, [fp, #-72]	; 0xffffffb8
   1a72c:	str	r6, [fp, #-88]	; 0xffffffa8
   1a730:	mov	r2, #1
   1a734:	mov	r3, r8
   1a738:	ldr	r0, [fp, #-72]	; 0xffffffb8
   1a73c:	str	r4, [fp, #-64]	; 0xffffffc0
   1a740:	mov	sl, #0
   1a744:	str	r3, [fp, #-76]	; 0xffffffb4
   1a748:	str	r2, [sp, #88]	; 0x58
   1a74c:	cmp	r0, #0
   1a750:	movwne	r0, #1
   1a754:	and	r1, r0, r3
   1a758:	and	r1, r2, r1
   1a75c:	str	r1, [sp, #48]	; 0x30
   1a760:	sub	r1, r4, #2
   1a764:	clz	r1, r1
   1a768:	lsr	r1, r1, #5
   1a76c:	and	r1, r1, r3
   1a770:	str	r1, [sp, #44]	; 0x2c
   1a774:	subs	r1, r4, #2
   1a778:	eor	r4, r3, #1
   1a77c:	movwne	r1, #1
   1a780:	str	r4, [sp, #92]	; 0x5c
   1a784:	orr	r4, r1, r4
   1a788:	and	r1, r1, r2
   1a78c:	and	r0, r0, r1
   1a790:	str	r4, [sp, #64]	; 0x40
   1a794:	ldr	r4, [sp, #84]	; 0x54
   1a798:	str	r0, [fp, #-60]	; 0xffffffc4
   1a79c:	orr	r0, r1, r3
   1a7a0:	ldr	r1, [fp, #16]
   1a7a4:	eor	r0, r0, #1
   1a7a8:	clz	r1, r1
   1a7ac:	lsr	r1, r1, #5
   1a7b0:	orr	r0, r1, r0
   1a7b4:	str	r0, [fp, #-68]	; 0xffffffbc
   1a7b8:	eor	r0, r2, #1
   1a7bc:	str	r0, [sp, #52]	; 0x34
   1a7c0:	cmn	r7, #1
   1a7c4:	beq	1a7d4 <__assert_fail@plt+0x8ee8>
   1a7c8:	cmp	sl, r7
   1a7cc:	bne	1a7e0 <__assert_fail@plt+0x8ef4>
   1a7d0:	b	1b474 <__assert_fail@plt+0x9b88>
   1a7d4:	ldrb	r0, [lr, sl]
   1a7d8:	cmp	r0, #0
   1a7dc:	beq	1b47c <__assert_fail@plt+0x9b90>
   1a7e0:	ldr	r0, [fp, #-60]	; 0xffffffc4
   1a7e4:	cmp	r0, #0
   1a7e8:	beq	1a848 <__assert_fail@plt+0x8f5c>
   1a7ec:	ldr	r0, [fp, #-72]	; 0xffffffb8
   1a7f0:	mov	r6, r5
   1a7f4:	add	r5, sl, r0
   1a7f8:	cmp	r0, #2
   1a7fc:	bcc	1a868 <__assert_fail@plt+0x8f7c>
   1a800:	mov	r0, #0
   1a804:	cmn	r7, #1
   1a808:	str	r0, [fp, #-56]	; 0xffffffc8
   1a80c:	bne	1a824 <__assert_fail@plt+0x8f38>
   1a810:	mov	r0, lr
   1a814:	bl	11718 <strlen@plt>
   1a818:	ldr	lr, [fp, #-80]	; 0xffffffb0
   1a81c:	ldr	ip, [fp, #-84]	; 0xffffffac
   1a820:	mov	r7, r0
   1a824:	cmp	r5, r7
   1a828:	bls	1a878 <__assert_fail@plt+0x8f8c>
   1a82c:	mov	r0, #0
   1a830:	mov	r5, r6
   1a834:	str	r0, [fp, #-48]	; 0xffffffd0
   1a838:	ldrb	r6, [lr, sl]
   1a83c:	cmp	r6, #126	; 0x7e
   1a840:	bls	1a8c8 <__assert_fail@plt+0x8fdc>
   1a844:	b	1ae24 <__assert_fail@plt+0x9538>
   1a848:	mov	r0, #0
   1a84c:	str	r0, [fp, #-56]	; 0xffffffc8
   1a850:	mov	r0, #0
   1a854:	str	r0, [fp, #-48]	; 0xffffffd0
   1a858:	ldrb	r6, [lr, sl]
   1a85c:	cmp	r6, #126	; 0x7e
   1a860:	bls	1a8c8 <__assert_fail@plt+0x8fdc>
   1a864:	b	1ae24 <__assert_fail@plt+0x9538>
   1a868:	mov	r0, #0
   1a86c:	str	r0, [fp, #-56]	; 0xffffffc8
   1a870:	cmp	r5, r7
   1a874:	bhi	1a82c <__assert_fail@plt+0x8f40>
   1a878:	ldr	r1, [fp, #-88]	; 0xffffffa8
   1a87c:	ldr	r2, [fp, #-72]	; 0xffffffb8
   1a880:	add	r0, lr, sl
   1a884:	bl	1170c <bcmp@plt>
   1a888:	ldr	r2, [sp, #92]	; 0x5c
   1a88c:	cmp	r0, #0
   1a890:	mov	r1, r0
   1a894:	mov	r5, r6
   1a898:	movwne	r1, #1
   1a89c:	orr	r1, r1, r2
   1a8a0:	tst	r1, #1
   1a8a4:	beq	1b53c <__assert_fail@plt+0x9c50>
   1a8a8:	ldr	ip, [fp, #-84]	; 0xffffffac
   1a8ac:	ldr	lr, [fp, #-80]	; 0xffffffb0
   1a8b0:	clz	r0, r0
   1a8b4:	lsr	r0, r0, #5
   1a8b8:	str	r0, [fp, #-48]	; 0xffffffd0
   1a8bc:	ldrb	r6, [lr, sl]
   1a8c0:	cmp	r6, #126	; 0x7e
   1a8c4:	bhi	1ae24 <__assert_fail@plt+0x9538>
   1a8c8:	add	r3, pc, #16
   1a8cc:	mov	r8, #1
   1a8d0:	mov	r2, #110	; 0x6e
   1a8d4:	mov	r0, #97	; 0x61
   1a8d8:	mov	r1, #0
   1a8dc:	ldr	pc, [r3, r6, lsl #2]
   1a8e0:	ldrdeq	sl, [r1], -ip
   1a8e4:	andeq	sl, r1, r4, lsr #28
   1a8e8:	andeq	sl, r1, r4, lsr #28
   1a8ec:	andeq	sl, r1, r4, lsr #28
   1a8f0:	andeq	sl, r1, r4, lsr #28
   1a8f4:	andeq	sl, r1, r4, lsr #28
   1a8f8:	andeq	sl, r1, r4, lsr #28
   1a8fc:	ldrdeq	sl, [r1], -r8
   1a900:			; <UNDEFINED> instruction: 0x0001abbc
   1a904:			; <UNDEFINED> instruction: 0x0001abb4
   1a908:	andeq	sl, r1, r8, asr #23
   1a90c:	strdeq	sl, [r1], -r8
   1a910:	andeq	sl, r1, ip, lsr #23
   1a914:	andeq	sl, r1, r4, asr #23
   1a918:	andeq	sl, r1, r4, lsr #28
   1a91c:	andeq	sl, r1, r4, lsr #28
   1a920:	andeq	sl, r1, r4, lsr #28
   1a924:	andeq	sl, r1, r4, lsr #28
   1a928:	andeq	sl, r1, r4, lsr #28
   1a92c:	andeq	sl, r1, r4, lsr #28
   1a930:	andeq	sl, r1, r4, lsr #28
   1a934:	andeq	sl, r1, r4, lsr #28
   1a938:	andeq	sl, r1, r4, lsr #28
   1a93c:	andeq	sl, r1, r4, lsr #28
   1a940:	andeq	sl, r1, r4, lsr #28
   1a944:	andeq	sl, r1, r4, lsr #28
   1a948:	andeq	sl, r1, r4, lsr #28
   1a94c:	andeq	sl, r1, r4, lsr #28
   1a950:	andeq	sl, r1, r4, lsr #28
   1a954:	andeq	sl, r1, r4, lsr #28
   1a958:	andeq	sl, r1, r4, lsr #28
   1a95c:	andeq	sl, r1, r4, lsr #28
   1a960:	andeq	sl, r1, r0, asr fp
   1a964:	andeq	sl, r1, r4, asr fp
   1a968:	andeq	sl, r1, r4, asr fp
   1a96c:	andeq	sl, r1, r4, asr #22
   1a970:	andeq	sl, r1, r4, asr fp
   1a974:	ldrdeq	sl, [r1], -ip
   1a978:	andeq	sl, r1, r4, asr fp
   1a97c:	andeq	sl, r1, r0, lsl #26
   1a980:	andeq	sl, r1, r4, asr fp
   1a984:	andeq	sl, r1, r4, asr fp
   1a988:	andeq	sl, r1, r4, asr fp
   1a98c:	ldrdeq	sl, [r1], -ip
   1a990:	ldrdeq	sl, [r1], -ip
   1a994:	ldrdeq	sl, [r1], -ip
   1a998:	ldrdeq	sl, [r1], -ip
   1a99c:	ldrdeq	sl, [r1], -ip
   1a9a0:	ldrdeq	sl, [r1], -ip
   1a9a4:	ldrdeq	sl, [r1], -ip
   1a9a8:	ldrdeq	sl, [r1], -ip
   1a9ac:	ldrdeq	sl, [r1], -ip
   1a9b0:	ldrdeq	sl, [r1], -ip
   1a9b4:	ldrdeq	sl, [r1], -ip
   1a9b8:	ldrdeq	sl, [r1], -ip
   1a9bc:	ldrdeq	sl, [r1], -ip
   1a9c0:	ldrdeq	sl, [r1], -ip
   1a9c4:	ldrdeq	sl, [r1], -ip
   1a9c8:	ldrdeq	sl, [r1], -ip
   1a9cc:	andeq	sl, r1, r4, asr fp
   1a9d0:	andeq	sl, r1, r4, asr fp
   1a9d4:	andeq	sl, r1, r4, asr fp
   1a9d8:	andeq	sl, r1, r4, asr fp
   1a9dc:	andeq	sl, r1, r4, asr #25
   1a9e0:	andeq	sl, r1, r4, lsr #28
   1a9e4:	ldrdeq	sl, [r1], -ip
   1a9e8:	ldrdeq	sl, [r1], -ip
   1a9ec:	ldrdeq	sl, [r1], -ip
   1a9f0:	ldrdeq	sl, [r1], -ip
   1a9f4:	ldrdeq	sl, [r1], -ip
   1a9f8:	ldrdeq	sl, [r1], -ip
   1a9fc:	ldrdeq	sl, [r1], -ip
   1aa00:	ldrdeq	sl, [r1], -ip
   1aa04:	ldrdeq	sl, [r1], -ip
   1aa08:	ldrdeq	sl, [r1], -ip
   1aa0c:	ldrdeq	sl, [r1], -ip
   1aa10:	ldrdeq	sl, [r1], -ip
   1aa14:	ldrdeq	sl, [r1], -ip
   1aa18:	ldrdeq	sl, [r1], -ip
   1aa1c:	ldrdeq	sl, [r1], -ip
   1aa20:	ldrdeq	sl, [r1], -ip
   1aa24:	ldrdeq	sl, [r1], -ip
   1aa28:	ldrdeq	sl, [r1], -ip
   1aa2c:	ldrdeq	sl, [r1], -ip
   1aa30:	ldrdeq	sl, [r1], -ip
   1aa34:	ldrdeq	sl, [r1], -ip
   1aa38:	ldrdeq	sl, [r1], -ip
   1aa3c:	ldrdeq	sl, [r1], -ip
   1aa40:	ldrdeq	sl, [r1], -ip
   1aa44:	ldrdeq	sl, [r1], -ip
   1aa48:	ldrdeq	sl, [r1], -ip
   1aa4c:	andeq	sl, r1, r4, asr fp
   1aa50:	andeq	sl, r1, r8, lsl #23
   1aa54:	ldrdeq	sl, [r1], -ip
   1aa58:	andeq	sl, r1, r4, asr fp
   1aa5c:	ldrdeq	sl, [r1], -ip
   1aa60:	andeq	sl, r1, r4, asr fp
   1aa64:	ldrdeq	sl, [r1], -ip
   1aa68:	ldrdeq	sl, [r1], -ip
   1aa6c:	ldrdeq	sl, [r1], -ip
   1aa70:	ldrdeq	sl, [r1], -ip
   1aa74:	ldrdeq	sl, [r1], -ip
   1aa78:	ldrdeq	sl, [r1], -ip
   1aa7c:	ldrdeq	sl, [r1], -ip
   1aa80:	ldrdeq	sl, [r1], -ip
   1aa84:	ldrdeq	sl, [r1], -ip
   1aa88:	ldrdeq	sl, [r1], -ip
   1aa8c:	ldrdeq	sl, [r1], -ip
   1aa90:	ldrdeq	sl, [r1], -ip
   1aa94:	ldrdeq	sl, [r1], -ip
   1aa98:	ldrdeq	sl, [r1], -ip
   1aa9c:	ldrdeq	sl, [r1], -ip
   1aaa0:	ldrdeq	sl, [r1], -ip
   1aaa4:	ldrdeq	sl, [r1], -ip
   1aaa8:	ldrdeq	sl, [r1], -ip
   1aaac:	ldrdeq	sl, [r1], -ip
   1aab0:	ldrdeq	sl, [r1], -ip
   1aab4:	ldrdeq	sl, [r1], -ip
   1aab8:	ldrdeq	sl, [r1], -ip
   1aabc:	ldrdeq	sl, [r1], -ip
   1aac0:	ldrdeq	sl, [r1], -ip
   1aac4:	ldrdeq	sl, [r1], -ip
   1aac8:	ldrdeq	sl, [r1], -ip
   1aacc:	andeq	sl, r1, ip, lsl fp
   1aad0:	andeq	sl, r1, r4, asr fp
   1aad4:	andeq	sl, r1, ip, lsl fp
   1aad8:	andeq	sl, r1, r4, asr #22
   1aadc:	ldr	r0, [fp, #-68]	; 0xffffffbc
   1aae0:	tst	r0, #1
   1aae4:	bne	1ad9c <__assert_fail@plt+0x94b0>
   1aae8:	ldr	r1, [fp, #16]
   1aaec:	ubfx	r0, r6, #5, #3
   1aaf0:	mov	r2, #1
   1aaf4:	ldr	r0, [r1, r0, lsl #2]
   1aaf8:	and	r1, r6, #31
   1aafc:	tst	r0, r2, lsl r1
   1ab00:	beq	1ad9c <__assert_fail@plt+0x94b0>
   1ab04:	mov	r0, r6
   1ab08:	mov	r1, r8
   1ab0c:	ldr	r2, [fp, #-76]	; 0xffffffb4
   1ab10:	tst	r2, #1
   1ab14:	beq	1adbc <__assert_fail@plt+0x94d0>
   1ab18:	b	1b518 <__assert_fail@plt+0x9c2c>
   1ab1c:	cmp	r7, #1
   1ab20:	beq	1ab44 <__assert_fail@plt+0x9258>
   1ab24:	mov	r8, #0
   1ab28:	cmn	r7, #1
   1ab2c:	bne	1ad88 <__assert_fail@plt+0x949c>
   1ab30:	ldrb	r0, [lr, #1]
   1ab34:	cmp	r0, #0
   1ab38:	beq	1ab44 <__assert_fail@plt+0x9258>
   1ab3c:	mvn	r7, #0
   1ab40:	b	1ad88 <__assert_fail@plt+0x949c>
   1ab44:	mov	r8, #0
   1ab48:	cmp	sl, #0
   1ab4c:	bne	1ad88 <__assert_fail@plt+0x949c>
   1ab50:	mov	r1, #1
   1ab54:	ldr	r0, [fp, #-64]	; 0xffffffc0
   1ab58:	cmp	r0, #2
   1ab5c:	bne	1ab74 <__assert_fail@plt+0x9288>
   1ab60:	ldr	r0, [fp, #-76]	; 0xffffffb4
   1ab64:	mov	r8, r1
   1ab68:	tst	r0, #1
   1ab6c:	beq	1aadc <__assert_fail@plt+0x91f0>
   1ab70:	b	1b518 <__assert_fail@plt+0x9c2c>
   1ab74:	mov	r8, r1
   1ab78:	ldr	r0, [fp, #-68]	; 0xffffffbc
   1ab7c:	tst	r0, #1
   1ab80:	beq	1aae8 <__assert_fail@plt+0x91fc>
   1ab84:	b	1ad9c <__assert_fail@plt+0x94b0>
   1ab88:	ldr	r0, [fp, #-64]	; 0xffffffc0
   1ab8c:	cmp	r0, #2
   1ab90:	bne	1ae50 <__assert_fail@plt+0x9564>
   1ab94:	ldr	r0, [fp, #-76]	; 0xffffffb4
   1ab98:	tst	r0, #1
   1ab9c:	bne	1b518 <__assert_fail@plt+0x9c2c>
   1aba0:	mov	r0, #0
   1aba4:	str	r0, [fp, #-56]	; 0xffffffc8
   1aba8:	b	1ae68 <__assert_fail@plt+0x957c>
   1abac:	mov	r0, #102	; 0x66
   1abb0:	b	1aed8 <__assert_fail@plt+0x95ec>
   1abb4:	mov	r2, #116	; 0x74
   1abb8:	b	1abc8 <__assert_fail@plt+0x92dc>
   1abbc:	mov	r0, #98	; 0x62
   1abc0:	b	1aed8 <__assert_fail@plt+0x95ec>
   1abc4:	mov	r2, #114	; 0x72
   1abc8:	ldr	r0, [sp, #64]	; 0x40
   1abcc:	tst	r0, #1
   1abd0:	mov	r0, r2
   1abd4:	bne	1aed8 <__assert_fail@plt+0x95ec>
   1abd8:	b	1b518 <__assert_fail@plt+0x9c2c>
   1abdc:	ldr	r0, [sp, #88]	; 0x58
   1abe0:	tst	r0, #1
   1abe4:	beq	1aef8 <__assert_fail@plt+0x960c>
   1abe8:	ldr	r0, [fp, #-76]	; 0xffffffb4
   1abec:	tst	r0, #1
   1abf0:	bne	1b654 <__assert_fail@plt+0x9d68>
   1abf4:	ldr	r0, [fp, #-64]	; 0xffffffc0
   1abf8:	ldr	r1, [fp, #-52]	; 0xffffffcc
   1abfc:	subs	r0, r0, #2
   1ac00:	movwne	r0, #1
   1ac04:	orr	r0, r0, r1
   1ac08:	tst	r0, #1
   1ac0c:	bne	1ac48 <__assert_fail@plt+0x935c>
   1ac10:	cmp	r9, r5
   1ac14:	movcc	r0, #39	; 0x27
   1ac18:	strbcc	r0, [ip, r9]
   1ac1c:	add	r0, r9, #1
   1ac20:	cmp	r0, r5
   1ac24:	movcc	r1, #36	; 0x24
   1ac28:	strbcc	r1, [ip, r0]
   1ac2c:	add	r0, r9, #2
   1ac30:	add	r9, r9, #3
   1ac34:	cmp	r0, r5
   1ac38:	movcc	r1, #39	; 0x27
   1ac3c:	strbcc	r1, [ip, r0]
   1ac40:	mov	r0, #1
   1ac44:	str	r0, [fp, #-52]	; 0xffffffcc
   1ac48:	mov	r1, #1
   1ac4c:	cmp	r9, r5
   1ac50:	mov	r8, #0
   1ac54:	mov	r6, #48	; 0x30
   1ac58:	str	r1, [fp, #-56]	; 0xffffffc8
   1ac5c:	ldr	r1, [fp, #-64]	; 0xffffffc0
   1ac60:	movcc	r0, #92	; 0x5c
   1ac64:	strbcc	r0, [ip, r9]
   1ac68:	add	r0, r9, #1
   1ac6c:	cmp	r1, #2
   1ac70:	beq	1b0c4 <__assert_fail@plt+0x97d8>
   1ac74:	add	r1, sl, #1
   1ac78:	cmp	r1, r7
   1ac7c:	bcs	1b0c4 <__assert_fail@plt+0x97d8>
   1ac80:	ldrb	r1, [lr, r1]
   1ac84:	sub	r1, r1, #48	; 0x30
   1ac88:	uxtb	r1, r1
   1ac8c:	cmp	r1, #9
   1ac90:	bhi	1b0c4 <__assert_fail@plt+0x97d8>
   1ac94:	cmp	r0, r5
   1ac98:	movcc	r1, #48	; 0x30
   1ac9c:	strbcc	r1, [ip, r0]
   1aca0:	add	r0, r9, #2
   1aca4:	add	r9, r9, #3
   1aca8:	cmp	r0, r5
   1acac:	movcc	r1, #48	; 0x30
   1acb0:	strbcc	r1, [ip, r0]
   1acb4:	ldr	r0, [fp, #-68]	; 0xffffffbc
   1acb8:	tst	r0, #1
   1acbc:	beq	1aae8 <__assert_fail@plt+0x91fc>
   1acc0:	b	1ad9c <__assert_fail@plt+0x94b0>
   1acc4:	ldr	r0, [fp, #-64]	; 0xffffffc0
   1acc8:	mov	r6, #63	; 0x3f
   1accc:	cmp	r0, #5
   1acd0:	beq	1b0d8 <__assert_fail@plt+0x97ec>
   1acd4:	mov	r1, #0
   1acd8:	cmp	r0, #2
   1acdc:	str	r1, [fp, #-56]	; 0xffffffc8
   1ace0:	bne	1b1a0 <__assert_fail@plt+0x98b4>
   1ace4:	ldr	r0, [fp, #-76]	; 0xffffffb4
   1ace8:	mov	r8, #0
   1acec:	tst	r0, #1
   1acf0:	beq	1aadc <__assert_fail@plt+0x91f0>
   1acf4:	b	1b518 <__assert_fail@plt+0x9c2c>
   1acf8:	mov	r0, #118	; 0x76
   1acfc:	b	1aed8 <__assert_fail@plt+0x95ec>
   1ad00:	mov	r0, #1
   1ad04:	mov	r6, #39	; 0x27
   1ad08:	str	r0, [sp, #60]	; 0x3c
   1ad0c:	ldr	r0, [fp, #-64]	; 0xffffffc0
   1ad10:	cmp	r0, #2
   1ad14:	bne	1af18 <__assert_fail@plt+0x962c>
   1ad18:	ldr	r0, [fp, #-76]	; 0xffffffb4
   1ad1c:	tst	r0, #1
   1ad20:	bne	1b518 <__assert_fail@plt+0x9c2c>
   1ad24:	ldr	r2, [sp, #56]	; 0x38
   1ad28:	clz	r1, r5
   1ad2c:	mov	r8, #1
   1ad30:	lsr	r1, r1, #5
   1ad34:	cmp	r2, #0
   1ad38:	mov	r0, r2
   1ad3c:	movwne	r0, #1
   1ad40:	orrs	r0, r0, r1
   1ad44:	moveq	r2, r5
   1ad48:	moveq	r5, r0
   1ad4c:	cmp	r9, r5
   1ad50:	str	r2, [sp, #56]	; 0x38
   1ad54:	movcc	r0, #39	; 0x27
   1ad58:	strbcc	r0, [ip, r9]
   1ad5c:	add	r0, r9, #1
   1ad60:	cmp	r0, r5
   1ad64:	movcc	r1, #92	; 0x5c
   1ad68:	strbcc	r1, [ip, r0]
   1ad6c:	add	r0, r9, #2
   1ad70:	add	r9, r9, #3
   1ad74:	cmp	r0, r5
   1ad78:	movcc	r1, #39	; 0x27
   1ad7c:	strbcc	r1, [ip, r0]
   1ad80:	mov	r0, #0
   1ad84:	str	r0, [fp, #-52]	; 0xffffffcc
   1ad88:	mov	r0, #0
   1ad8c:	str	r0, [fp, #-56]	; 0xffffffc8
   1ad90:	ldr	r0, [fp, #-68]	; 0xffffffbc
   1ad94:	tst	r0, #1
   1ad98:	beq	1aae8 <__assert_fail@plt+0x91fc>
   1ad9c:	ldr	r0, [fp, #-48]	; 0xffffffd0
   1ada0:	mov	r1, r8
   1ada4:	cmp	r0, #0
   1ada8:	mov	r0, r6
   1adac:	beq	1ae70 <__assert_fail@plt+0x9584>
   1adb0:	ldr	r2, [fp, #-76]	; 0xffffffb4
   1adb4:	tst	r2, #1
   1adb8:	bne	1b518 <__assert_fail@plt+0x9c2c>
   1adbc:	ldr	r2, [fp, #-64]	; 0xffffffc0
   1adc0:	ldr	r3, [fp, #-52]	; 0xffffffcc
   1adc4:	subs	r2, r2, #2
   1adc8:	movwne	r2, #1
   1adcc:	orr	r2, r2, r3
   1add0:	tst	r2, #1
   1add4:	bne	1ae10 <__assert_fail@plt+0x9524>
   1add8:	cmp	r9, r5
   1addc:	movcc	r2, #39	; 0x27
   1ade0:	strbcc	r2, [ip, r9]
   1ade4:	add	r2, r9, #1
   1ade8:	cmp	r2, r5
   1adec:	movcc	r3, #36	; 0x24
   1adf0:	strbcc	r3, [ip, r2]
   1adf4:	add	r2, r9, #2
   1adf8:	add	r9, r9, #3
   1adfc:	cmp	r2, r5
   1ae00:	movcc	r3, #39	; 0x27
   1ae04:	strbcc	r3, [ip, r2]
   1ae08:	mov	r2, #1
   1ae0c:	str	r2, [fp, #-52]	; 0xffffffcc
   1ae10:	cmp	r9, r5
   1ae14:	movcc	r2, #92	; 0x5c
   1ae18:	strbcc	r2, [ip, r9]
   1ae1c:	add	r9, r9, #1
   1ae20:	b	1aeb8 <__assert_fail@plt+0x95cc>
   1ae24:	ldr	r0, [sp, #40]	; 0x28
   1ae28:	cmp	r0, #1
   1ae2c:	bne	1af2c <__assert_fail@plt+0x9640>
   1ae30:	bl	116e8 <__ctype_b_loc@plt>
   1ae34:	ldr	r0, [r0]
   1ae38:	ldr	lr, [fp, #-80]	; 0xffffffb0
   1ae3c:	mov	r1, #1
   1ae40:	add	r0, r0, r6, lsl #1
   1ae44:	ldrb	r0, [r0, #1]
   1ae48:	ubfx	r8, r0, #6, #1
   1ae4c:	b	1b284 <__assert_fail@plt+0x9998>
   1ae50:	ldr	r1, [sp, #48]	; 0x30
   1ae54:	mov	r0, #0
   1ae58:	str	r0, [fp, #-56]	; 0xffffffc8
   1ae5c:	mov	r0, #92	; 0x5c
   1ae60:	cmp	r1, #0
   1ae64:	beq	1aed8 <__assert_fail@plt+0x95ec>
   1ae68:	mov	r6, #92	; 0x5c
   1ae6c:	mov	r8, #0
   1ae70:	ldr	r0, [fp, #-56]	; 0xffffffc8
   1ae74:	cmp	r0, #0
   1ae78:	bne	1aeb0 <__assert_fail@plt+0x95c4>
   1ae7c:	ldr	r0, [fp, #-52]	; 0xffffffcc
   1ae80:	tst	r0, #1
   1ae84:	beq	1aeb0 <__assert_fail@plt+0x95c4>
   1ae88:	cmp	r9, r5
   1ae8c:	movcc	r0, #39	; 0x27
   1ae90:	strbcc	r0, [ip, r9]
   1ae94:	add	r0, r9, #1
   1ae98:	add	r9, r9, #2
   1ae9c:	cmp	r0, r5
   1aea0:	movcc	r1, #39	; 0x27
   1aea4:	strbcc	r1, [ip, r0]
   1aea8:	mov	r0, #0
   1aeac:	str	r0, [fp, #-52]	; 0xffffffcc
   1aeb0:	mov	r1, r8
   1aeb4:	mov	r0, r6
   1aeb8:	cmp	r9, r5
   1aebc:	and	r4, r4, r1
   1aec0:	strbcc	r0, [ip, r9]
   1aec4:	add	r9, r9, #1
   1aec8:	add	sl, sl, #1
   1aecc:	cmn	r7, #1
   1aed0:	bne	1a7c8 <__assert_fail@plt+0x8edc>
   1aed4:	b	1a7d4 <__assert_fail@plt+0x8ee8>
   1aed8:	mov	r1, #0
   1aedc:	mov	r8, #0
   1aee0:	str	r1, [fp, #-56]	; 0xffffffc8
   1aee4:	ldr	r1, [sp, #88]	; 0x58
   1aee8:	tst	r1, #1
   1aeec:	mov	r1, #0
   1aef0:	beq	1aadc <__assert_fail@plt+0x91f0>
   1aef4:	b	1adb0 <__assert_fail@plt+0x94c4>
   1aef8:	ldr	r0, [sp, #36]	; 0x24
   1aefc:	mov	r6, #0
   1af00:	mov	r8, #0
   1af04:	cmp	r0, #0
   1af08:	mov	r0, #0
   1af0c:	str	r0, [fp, #-56]	; 0xffffffc8
   1af10:	bne	1aec8 <__assert_fail@plt+0x95dc>
   1af14:	b	1aadc <__assert_fail@plt+0x91f0>
   1af18:	mov	r8, #1
   1af1c:	ldr	r0, [fp, #-68]	; 0xffffffbc
   1af20:	tst	r0, #1
   1af24:	beq	1aae8 <__assert_fail@plt+0x91fc>
   1af28:	b	1ad9c <__assert_fail@plt+0x94b0>
   1af2c:	mov	r0, #0
   1af30:	cmn	r7, #1
   1af34:	str	r0, [fp, #-36]	; 0xffffffdc
   1af38:	str	r0, [fp, #-40]	; 0xffffffd8
   1af3c:	bne	1af50 <__assert_fail@plt+0x9664>
   1af40:	mov	r0, lr
   1af44:	bl	11718 <strlen@plt>
   1af48:	ldr	lr, [fp, #-80]	; 0xffffffb0
   1af4c:	mov	r7, r0
   1af50:	ldr	r0, [sp, #44]	; 0x2c
   1af54:	str	r4, [sp, #84]	; 0x54
   1af58:	str	r5, [sp, #28]
   1af5c:	cmp	r0, #0
   1af60:	beq	1b1b4 <__assert_fail@plt+0x98c8>
   1af64:	ldr	r0, [sp, #80]	; 0x50
   1af68:	mov	r8, #1
   1af6c:	mov	r5, #0
   1af70:	add	r0, r0, sl
   1af74:	str	r0, [sp, #24]
   1af78:	sub	r0, fp, #40	; 0x28
   1af7c:	mov	r3, r0
   1af80:	b	1afbc <__assert_fail@plt+0x96d0>
   1af84:	ldr	r5, [sp, #68]	; 0x44
   1af88:	add	r5, r0, r5
   1af8c:	ldr	r0, [fp, #-44]	; 0xffffffd4
   1af90:	bl	115f8 <iswprint@plt>
   1af94:	cmp	r0, #0
   1af98:	sub	r4, fp, #40	; 0x28
   1af9c:	movwne	r0, #1
   1afa0:	and	r8, r8, r0
   1afa4:	mov	r0, r4
   1afa8:	bl	1158c <mbsinit@plt>
   1afac:	ldr	lr, [fp, #-80]	; 0xffffffb0
   1afb0:	mov	r3, r4
   1afb4:	cmp	r0, #0
   1afb8:	bne	1b278 <__assert_fail@plt+0x998c>
   1afbc:	str	r5, [sp, #68]	; 0x44
   1afc0:	add	r5, r5, sl
   1afc4:	sub	r0, fp, #44	; 0x2c
   1afc8:	add	r1, lr, r5
   1afcc:	sub	r2, r7, r5
   1afd0:	bl	1882c <__assert_fail@plt+0x6f40>
   1afd4:	cmn	r0, #2
   1afd8:	beq	1b238 <__assert_fail@plt+0x994c>
   1afdc:	ldr	ip, [fp, #-84]	; 0xffffffac
   1afe0:	cmn	r0, #1
   1afe4:	beq	1b22c <__assert_fail@plt+0x9940>
   1afe8:	cmp	r0, #0
   1afec:	beq	1b230 <__assert_fail@plt+0x9944>
   1aff0:	cmp	r0, #2
   1aff4:	bcc	1af84 <__assert_fail@plt+0x9698>
   1aff8:	ldr	r1, [sp, #68]	; 0x44
   1affc:	ldr	r2, [sp, #24]
   1b000:	add	r1, r2, r1
   1b004:	sub	r2, r0, #1
   1b008:	ldrb	r3, [r1]
   1b00c:	sub	r3, r3, #91	; 0x5b
   1b010:	cmp	r3, #33	; 0x21
   1b014:	bls	1b034 <__assert_fail@plt+0x9748>
   1b018:	add	r1, r1, #1
   1b01c:	subs	r2, r2, #1
   1b020:	beq	1af84 <__assert_fail@plt+0x9698>
   1b024:	ldrb	r3, [r1]
   1b028:	sub	r3, r3, #91	; 0x5b
   1b02c:	cmp	r3, #33	; 0x21
   1b030:	bhi	1b018 <__assert_fail@plt+0x972c>
   1b034:	add	r5, pc, #0
   1b038:	ldr	pc, [r5, r3, lsl #2]
   1b03c:	andeq	fp, r1, r0, asr r5
   1b040:	andeq	fp, r1, r0, asr r5
   1b044:	andeq	fp, r1, r8, lsl r0
   1b048:	andeq	fp, r1, r0, asr r5
   1b04c:	andeq	fp, r1, r8, lsl r0
   1b050:	andeq	fp, r1, r0, asr r5
   1b054:	andeq	fp, r1, r8, lsl r0
   1b058:	andeq	fp, r1, r8, lsl r0
   1b05c:	andeq	fp, r1, r8, lsl r0
   1b060:	andeq	fp, r1, r8, lsl r0
   1b064:	andeq	fp, r1, r8, lsl r0
   1b068:	andeq	fp, r1, r8, lsl r0
   1b06c:	andeq	fp, r1, r8, lsl r0
   1b070:	andeq	fp, r1, r8, lsl r0
   1b074:	andeq	fp, r1, r8, lsl r0
   1b078:	andeq	fp, r1, r8, lsl r0
   1b07c:	andeq	fp, r1, r8, lsl r0
   1b080:	andeq	fp, r1, r8, lsl r0
   1b084:	andeq	fp, r1, r8, lsl r0
   1b088:	andeq	fp, r1, r8, lsl r0
   1b08c:	andeq	fp, r1, r8, lsl r0
   1b090:	andeq	fp, r1, r8, lsl r0
   1b094:	andeq	fp, r1, r8, lsl r0
   1b098:	andeq	fp, r1, r8, lsl r0
   1b09c:	andeq	fp, r1, r8, lsl r0
   1b0a0:	andeq	fp, r1, r8, lsl r0
   1b0a4:	andeq	fp, r1, r8, lsl r0
   1b0a8:	andeq	fp, r1, r8, lsl r0
   1b0ac:	andeq	fp, r1, r8, lsl r0
   1b0b0:	andeq	fp, r1, r8, lsl r0
   1b0b4:	andeq	fp, r1, r8, lsl r0
   1b0b8:	andeq	fp, r1, r8, lsl r0
   1b0bc:	andeq	fp, r1, r8, lsl r0
   1b0c0:	andeq	fp, r1, r0, asr r5
   1b0c4:	mov	r9, r0
   1b0c8:	ldr	r0, [fp, #-68]	; 0xffffffbc
   1b0cc:	tst	r0, #1
   1b0d0:	beq	1aae8 <__assert_fail@plt+0x91fc>
   1b0d4:	b	1ad9c <__assert_fail@plt+0x94b0>
   1b0d8:	mov	r0, #0
   1b0dc:	str	r0, [fp, #-56]	; 0xffffffc8
   1b0e0:	ldr	r0, [sp, #32]
   1b0e4:	cmp	r0, #0
   1b0e8:	beq	1b1a0 <__assert_fail@plt+0x98b4>
   1b0ec:	add	r0, sl, #2
   1b0f0:	mov	r1, r7
   1b0f4:	cmp	r0, r7
   1b0f8:	bcs	1b1a0 <__assert_fail@plt+0x98b4>
   1b0fc:	add	r1, sl, lr
   1b100:	ldrb	r1, [r1, #1]
   1b104:	cmp	r1, #63	; 0x3f
   1b108:	bne	1b1a0 <__assert_fail@plt+0x98b4>
   1b10c:	ldrb	r8, [lr, r0]
   1b110:	sub	r2, r8, #33	; 0x21
   1b114:	cmp	r2, #29
   1b118:	bhi	1b1a0 <__assert_fail@plt+0x98b4>
   1b11c:	mov	r1, r4
   1b120:	movw	r4, #20929	; 0x51c1
   1b124:	mov	r3, #1
   1b128:	movt	r4, #14336	; 0x3800
   1b12c:	tst	r4, r3, lsl r2
   1b130:	beq	1b45c <__assert_fail@plt+0x9b70>
   1b134:	ldr	r2, [fp, #-76]	; 0xffffffb4
   1b138:	tst	r2, #1
   1b13c:	bne	1b518 <__assert_fail@plt+0x9c2c>
   1b140:	cmp	r9, r5
   1b144:	mov	r6, r8
   1b148:	mov	r4, r1
   1b14c:	mov	sl, r0
   1b150:	mov	r8, #0
   1b154:	movcc	r2, #63	; 0x3f
   1b158:	strbcc	r2, [ip, r9]
   1b15c:	add	r2, r9, #1
   1b160:	cmp	r2, r5
   1b164:	movcc	r3, #34	; 0x22
   1b168:	strbcc	r3, [ip, r2]
   1b16c:	add	r2, r9, #2
   1b170:	cmp	r2, r5
   1b174:	movcc	r3, #34	; 0x22
   1b178:	strbcc	r3, [ip, r2]
   1b17c:	add	r2, r9, #3
   1b180:	add	r9, r9, #4
   1b184:	cmp	r2, r5
   1b188:	movcc	r3, #63	; 0x3f
   1b18c:	strbcc	r3, [ip, r2]
   1b190:	ldr	r0, [fp, #-68]	; 0xffffffbc
   1b194:	tst	r0, #1
   1b198:	beq	1aae8 <__assert_fail@plt+0x91fc>
   1b19c:	b	1ad9c <__assert_fail@plt+0x94b0>
   1b1a0:	mov	r8, #0
   1b1a4:	ldr	r0, [fp, #-68]	; 0xffffffbc
   1b1a8:	tst	r0, #1
   1b1ac:	beq	1aae8 <__assert_fail@plt+0x91fc>
   1b1b0:	b	1ad9c <__assert_fail@plt+0x94b0>
   1b1b4:	mov	r8, #1
   1b1b8:	mov	r5, #0
   1b1bc:	sub	r4, fp, #40	; 0x28
   1b1c0:	str	r5, [sp, #68]	; 0x44
   1b1c4:	add	r5, r5, sl
   1b1c8:	sub	r0, fp, #44	; 0x2c
   1b1cc:	mov	r3, r4
   1b1d0:	add	r1, lr, r5
   1b1d4:	sub	r2, r7, r5
   1b1d8:	bl	1882c <__assert_fail@plt+0x6f40>
   1b1dc:	cmn	r0, #2
   1b1e0:	beq	1b238 <__assert_fail@plt+0x994c>
   1b1e4:	cmn	r0, #1
   1b1e8:	beq	1b22c <__assert_fail@plt+0x9940>
   1b1ec:	ldr	r5, [sp, #68]	; 0x44
   1b1f0:	cmp	r0, #0
   1b1f4:	beq	1b274 <__assert_fail@plt+0x9988>
   1b1f8:	add	r5, r0, r5
   1b1fc:	ldr	r0, [fp, #-44]	; 0xffffffd4
   1b200:	bl	115f8 <iswprint@plt>
   1b204:	cmp	r0, #0
   1b208:	sub	r4, fp, #40	; 0x28
   1b20c:	movwne	r0, #1
   1b210:	and	r8, r8, r0
   1b214:	mov	r0, r4
   1b218:	bl	1158c <mbsinit@plt>
   1b21c:	ldr	lr, [fp, #-80]	; 0xffffffb0
   1b220:	cmp	r0, #0
   1b224:	beq	1b1c0 <__assert_fail@plt+0x98d4>
   1b228:	b	1b278 <__assert_fail@plt+0x998c>
   1b22c:	mov	r8, #0
   1b230:	ldr	lr, [fp, #-80]	; 0xffffffb0
   1b234:	b	1b26c <__assert_fail@plt+0x9980>
   1b238:	ldr	lr, [fp, #-80]	; 0xffffffb0
   1b23c:	mov	r8, #0
   1b240:	cmp	r5, r7
   1b244:	bcs	1b26c <__assert_fail@plt+0x9980>
   1b248:	ldrb	r0, [lr, r5]
   1b24c:	cmp	r0, #0
   1b250:	beq	1b26c <__assert_fail@plt+0x9980>
   1b254:	ldr	r0, [sp, #68]	; 0x44
   1b258:	add	r0, r0, #1
   1b25c:	add	r5, r0, sl
   1b260:	str	r0, [sp, #68]	; 0x44
   1b264:	cmp	r5, r7
   1b268:	bcc	1b248 <__assert_fail@plt+0x995c>
   1b26c:	ldr	r5, [sp, #68]	; 0x44
   1b270:	b	1b278 <__assert_fail@plt+0x998c>
   1b274:	ldr	lr, [fp, #-80]	; 0xffffffb0
   1b278:	mov	r1, r5
   1b27c:	ldr	r5, [sp, #28]
   1b280:	ldr	r4, [sp, #84]	; 0x54
   1b284:	ldr	r0, [sp, #52]	; 0x34
   1b288:	ldr	ip, [fp, #-84]	; 0xffffffac
   1b28c:	cmp	r1, #1
   1b290:	orr	r2, r8, r0
   1b294:	mov	r0, r1
   1b298:	bhi	1b2a4 <__assert_fail@plt+0x99b8>
   1b29c:	tst	r2, #1
   1b2a0:	bne	1aadc <__assert_fail@plt+0x91f0>
   1b2a4:	add	r0, r0, sl
   1b2a8:	str	r2, [sp, #84]	; 0x54
   1b2ac:	str	r0, [fp, #-56]	; 0xffffffc8
   1b2b0:	mov	r0, #0
   1b2b4:	tst	r2, #1
   1b2b8:	bne	1b398 <__assert_fail@plt+0x9aac>
   1b2bc:	ldr	r1, [fp, #-76]	; 0xffffffb4
   1b2c0:	tst	r1, #1
   1b2c4:	bne	1b518 <__assert_fail@plt+0x9c2c>
   1b2c8:	ldr	r1, [fp, #-64]	; 0xffffffc0
   1b2cc:	ldr	r0, [fp, #-52]	; 0xffffffcc
   1b2d0:	subs	r2, r1, #2
   1b2d4:	movwne	r2, #1
   1b2d8:	orr	r2, r2, r0
   1b2dc:	tst	r2, #1
   1b2e0:	bne	1b31c <__assert_fail@plt+0x9a30>
   1b2e4:	cmp	r9, r5
   1b2e8:	add	r2, r9, #1
   1b2ec:	mov	r0, #1
   1b2f0:	movcc	r1, #39	; 0x27
   1b2f4:	str	r0, [fp, #-52]	; 0xffffffcc
   1b2f8:	strbcc	r1, [ip, r9]
   1b2fc:	cmp	r2, r5
   1b300:	movcc	r1, #36	; 0x24
   1b304:	strbcc	r1, [ip, r2]
   1b308:	add	r2, r9, #2
   1b30c:	add	r9, r9, #3
   1b310:	cmp	r2, r5
   1b314:	movcc	r1, #39	; 0x27
   1b318:	strbcc	r1, [ip, r2]
   1b31c:	cmp	r9, r5
   1b320:	add	r2, r9, #1
   1b324:	movcc	r1, #92	; 0x5c
   1b328:	strbcc	r1, [ip, r9]
   1b32c:	cmp	r2, r5
   1b330:	bcs	1b344 <__assert_fail@plt+0x9a58>
   1b334:	uxtb	r3, r6
   1b338:	mov	r1, #48	; 0x30
   1b33c:	orr	r3, r1, r3, lsr #6
   1b340:	strb	r3, [ip, r2]
   1b344:	add	r2, r9, #2
   1b348:	add	r9, r9, #3
   1b34c:	cmp	r2, r5
   1b350:	lsrcc	r3, r6, #3
   1b354:	movcc	r1, #6
   1b358:	bficc	r3, r1, #3, #29
   1b35c:	mov	r1, #6
   1b360:	bfi	r6, r1, #3, #29
   1b364:	strbcc	r3, [ip, r2]
   1b368:	mov	r2, #1
   1b36c:	b	1b3cc <__assert_fail@plt+0x9ae0>
   1b370:	ldr	r1, [sp, #80]	; 0x50
   1b374:	cmp	r9, r2
   1b378:	mov	r5, r2
   1b37c:	ldr	r2, [sp, #84]	; 0x54
   1b380:	strbcc	r6, [ip, r9]
   1b384:	add	r9, r9, #1
   1b388:	ldrb	r6, [r1, sl]
   1b38c:	mov	sl, r3
   1b390:	tst	r2, #1
   1b394:	beq	1b2bc <__assert_fail@plt+0x99d0>
   1b398:	ldr	r1, [fp, #-48]	; 0xffffffd0
   1b39c:	tst	r1, #1
   1b3a0:	beq	1b3c0 <__assert_fail@plt+0x9ad4>
   1b3a4:	cmp	r9, r5
   1b3a8:	mov	r2, r0
   1b3ac:	movcc	r1, #92	; 0x5c
   1b3b0:	strbcc	r1, [ip, r9]
   1b3b4:	add	r9, r9, #1
   1b3b8:	mov	r1, #0
   1b3bc:	b	1b3c8 <__assert_fail@plt+0x9adc>
   1b3c0:	mov	r1, #0
   1b3c4:	mov	r2, r0
   1b3c8:	str	r1, [fp, #-48]	; 0xffffffd0
   1b3cc:	mov	r0, r2
   1b3d0:	and	r1, r2, #1
   1b3d4:	ldr	r2, [fp, #-56]	; 0xffffffc8
   1b3d8:	add	r3, sl, #1
   1b3dc:	cmp	r2, r3
   1b3e0:	bls	1b440 <__assert_fail@plt+0x9b54>
   1b3e4:	mov	r2, r5
   1b3e8:	ldr	r5, [fp, #-52]	; 0xffffffcc
   1b3ec:	cmp	r1, #0
   1b3f0:	movwne	r1, #1
   1b3f4:	mvn	r5, r5
   1b3f8:	orr	r5, r5, r1
   1b3fc:	tst	r5, #1
   1b400:	bne	1b370 <__assert_fail@plt+0x9a84>
   1b404:	cmp	r9, r2
   1b408:	movcc	r5, r4
   1b40c:	movcc	r4, #39	; 0x27
   1b410:	strbcc	r4, [ip, r9]
   1b414:	movcc	r4, r5
   1b418:	add	r5, r9, #1
   1b41c:	add	r9, r9, #2
   1b420:	cmp	r5, r2
   1b424:	movcc	r1, r4
   1b428:	movcc	r4, #39	; 0x27
   1b42c:	strbcc	r4, [ip, r5]
   1b430:	movcc	r4, r1
   1b434:	mov	r1, #0
   1b438:	str	r1, [fp, #-52]	; 0xffffffcc
   1b43c:	b	1b370 <__assert_fail@plt+0x9a84>
   1b440:	cmp	r1, #0
   1b444:	movwne	r1, #1
   1b448:	str	r1, [fp, #-56]	; 0xffffffc8
   1b44c:	ldr	r0, [fp, #-56]	; 0xffffffc8
   1b450:	cmp	r0, #0
   1b454:	beq	1ae7c <__assert_fail@plt+0x9590>
   1b458:	b	1aeb0 <__assert_fail@plt+0x95c4>
   1b45c:	mov	r8, #0
   1b460:	mov	r4, r1
   1b464:	ldr	r0, [fp, #-68]	; 0xffffffbc
   1b468:	tst	r0, #1
   1b46c:	beq	1aae8 <__assert_fail@plt+0x91fc>
   1b470:	b	1ad9c <__assert_fail@plt+0x94b0>
   1b474:	mov	r7, sl
   1b478:	b	1b480 <__assert_fail@plt+0x9b94>
   1b47c:	mvn	r7, #0
   1b480:	ldr	r1, [fp, #-64]	; 0xffffffc0
   1b484:	ldr	r3, [fp, #-76]	; 0xffffffb4
   1b488:	ldr	r2, [sp, #88]	; 0x58
   1b48c:	eor	r0, r1, #2
   1b490:	orr	r0, r0, r9
   1b494:	clz	r0, r0
   1b498:	lsr	r0, r0, #5
   1b49c:	tst	r3, r0
   1b4a0:	bne	1b518 <__assert_fail@plt+0x9c2c>
   1b4a4:	subs	r0, r1, #2
   1b4a8:	movwne	r0, #1
   1b4ac:	orr	r0, r3, r0
   1b4b0:	tst	r0, #1
   1b4b4:	ldreq	r0, [sp, #60]	; 0x3c
   1b4b8:	eoreq	r0, r0, #1
   1b4bc:	tsteq	r0, #1
   1b4c0:	bne	1b5f4 <__assert_fail@plt+0x9d08>
   1b4c4:	tst	r4, #1
   1b4c8:	bne	1b5b8 <__assert_fail@plt+0x9ccc>
   1b4cc:	ldr	r6, [sp, #56]	; 0x38
   1b4d0:	mov	r8, #0
   1b4d4:	cmp	r6, #0
   1b4d8:	beq	1b5f0 <__assert_fail@plt+0x9d04>
   1b4dc:	mov	r1, #0
   1b4e0:	mov	r4, #2
   1b4e4:	cmp	r5, #0
   1b4e8:	mov	r0, r2
   1b4ec:	mov	r3, #0
   1b4f0:	str	r1, [sp, #84]	; 0x54
   1b4f4:	beq	1a33c <__assert_fail@plt+0x8a50>
   1b4f8:	b	1b5f4 <__assert_fail@plt+0x9d08>
   1b4fc:	movw	r0, #4773	; 0x12a5
   1b500:	movt	r0, #2
   1b504:	str	r0, [sp, #76]	; 0x4c
   1b508:	mov	r9, #0
   1b50c:	tst	r8, #1
   1b510:	beq	1a5d4 <__assert_fail@plt+0x8ce8>
   1b514:	b	1a714 <__assert_fail@plt+0x8e28>
   1b518:	ldr	r1, [sp, #88]	; 0x58
   1b51c:	mov	r0, #2
   1b520:	tst	r1, #1
   1b524:	movwne	r0, #4
   1b528:	ldr	r2, [fp, #-64]	; 0xffffffc0
   1b52c:	ldr	r1, [fp, #12]
   1b530:	cmp	r2, #2
   1b534:	moveq	r2, r0
   1b538:	b	1b570 <__assert_fail@plt+0x9c84>
   1b53c:	ldr	ip, [fp, #-84]	; 0xffffffac
   1b540:	ldr	lr, [fp, #-80]	; 0xffffffb0
   1b544:	ldr	r1, [fp, #12]
   1b548:	ldr	r2, [fp, #-64]	; 0xffffffc0
   1b54c:	b	1b570 <__assert_fail@plt+0x9c84>
   1b550:	ldr	r1, [sp, #88]	; 0x58
   1b554:	ldr	lr, [fp, #-80]	; 0xffffffb0
   1b558:	ldr	r5, [sp, #28]
   1b55c:	mov	r0, #2
   1b560:	tst	r1, #1
   1b564:	ldr	r1, [fp, #12]
   1b568:	movwne	r0, #4
   1b56c:	mov	r2, r0
   1b570:	mov	r0, #0
   1b574:	bic	r1, r1, #2
   1b578:	str	r2, [sp]
   1b57c:	mov	r2, lr
   1b580:	str	r0, [sp, #8]
   1b584:	ldr	r0, [sp, #72]	; 0x48
   1b588:	str	r1, [sp, #4]
   1b58c:	mov	r1, r5
   1b590:	str	r0, [sp, #12]
   1b594:	ldr	r0, [sp, #76]	; 0x4c
   1b598:	str	r0, [sp, #16]
   1b59c:	mov	r0, ip
   1b5a0:	mov	r3, r7
   1b5a4:	bl	1a2b0 <__assert_fail@plt+0x89c4>
   1b5a8:	mov	r9, r0
   1b5ac:	mov	r0, r9
   1b5b0:	sub	sp, fp, #28
   1b5b4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b5b8:	mov	r0, #5
   1b5bc:	ldr	r1, [sp, #56]	; 0x38
   1b5c0:	ldr	r2, [fp, #-80]	; 0xffffffb0
   1b5c4:	str	r0, [sp]
   1b5c8:	ldr	r0, [fp, #12]
   1b5cc:	str	r0, [sp, #4]
   1b5d0:	ldr	r0, [fp, #16]
   1b5d4:	str	r0, [sp, #8]
   1b5d8:	ldr	r0, [sp, #72]	; 0x48
   1b5dc:	str	r0, [sp, #12]
   1b5e0:	ldr	r0, [sp, #76]	; 0x4c
   1b5e4:	str	r0, [sp, #16]
   1b5e8:	ldr	r0, [fp, #-84]	; 0xffffffac
   1b5ec:	b	1b5a0 <__assert_fail@plt+0x9cb4>
   1b5f0:	mov	r3, #0
   1b5f4:	ldr	r1, [fp, #-88]	; 0xffffffa8
   1b5f8:	cmp	r1, #0
   1b5fc:	beq	1b638 <__assert_fail@plt+0x9d4c>
   1b600:	ldr	r2, [fp, #-84]	; 0xffffffac
   1b604:	tst	r3, #1
   1b608:	bne	1b63c <__assert_fail@plt+0x9d50>
   1b60c:	ldrb	r0, [r1]
   1b610:	cmp	r0, #0
   1b614:	beq	1b63c <__assert_fail@plt+0x9d50>
   1b618:	add	r1, r1, #1
   1b61c:	cmp	r9, r5
   1b620:	strbcc	r0, [r2, r9]
   1b624:	add	r9, r9, #1
   1b628:	ldrb	r0, [r1], #1
   1b62c:	cmp	r0, #0
   1b630:	bne	1b61c <__assert_fail@plt+0x9d30>
   1b634:	b	1b63c <__assert_fail@plt+0x9d50>
   1b638:	ldr	r2, [fp, #-84]	; 0xffffffac
   1b63c:	cmp	r9, r5
   1b640:	movcc	r0, #0
   1b644:	strbcc	r0, [r2, r9]
   1b648:	mov	r0, r9
   1b64c:	sub	sp, fp, #28
   1b650:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b654:	mov	r0, #4
   1b658:	b	1b528 <__assert_fail@plt+0x9c3c>
   1b65c:	bl	118bc <abort@plt>
   1b660:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b664:	add	fp, sp, #28
   1b668:	sub	sp, sp, #28
   1b66c:	movw	r5, #9152	; 0x23c0
   1b670:	cmp	r2, #0
   1b674:	mov	r4, r1
   1b678:	mov	r7, r0
   1b67c:	str	r0, [sp, #20]
   1b680:	movt	r5, #3
   1b684:	movne	r5, r2
   1b688:	bl	11748 <__errno_location@plt>
   1b68c:	mov	sl, r0
   1b690:	ldr	r2, [r5, #40]	; 0x28
   1b694:	ldr	r3, [r5, #44]	; 0x2c
   1b698:	ldm	r5, {r0, r1}
   1b69c:	orr	r8, r1, #1
   1b6a0:	add	r9, r5, #8
   1b6a4:	mov	r1, #0
   1b6a8:	ldr	r6, [sl]
   1b6ac:	stm	sp, {r0, r8, r9}
   1b6b0:	mov	r0, #0
   1b6b4:	str	r2, [sp, #12]
   1b6b8:	str	r3, [sp, #16]
   1b6bc:	mov	r2, r7
   1b6c0:	mov	r3, r4
   1b6c4:	str	r6, [sp, #24]
   1b6c8:	mov	r6, r4
   1b6cc:	bl	1a2b0 <__assert_fail@plt+0x89c4>
   1b6d0:	add	r7, r0, #1
   1b6d4:	mov	r0, r7
   1b6d8:	bl	1c974 <__assert_fail@plt+0xb088>
   1b6dc:	mov	r4, r0
   1b6e0:	ldr	r0, [r5]
   1b6e4:	ldr	r2, [r5, #44]	; 0x2c
   1b6e8:	ldr	r1, [r5, #40]	; 0x28
   1b6ec:	mov	r3, r6
   1b6f0:	stm	sp, {r0, r8, r9}
   1b6f4:	str	r2, [sp, #16]
   1b6f8:	ldr	r2, [sp, #20]
   1b6fc:	str	r1, [sp, #12]
   1b700:	mov	r0, r4
   1b704:	mov	r1, r7
   1b708:	bl	1a2b0 <__assert_fail@plt+0x89c4>
   1b70c:	ldr	r0, [sp, #24]
   1b710:	str	r0, [sl]
   1b714:	mov	r0, r4
   1b718:	sub	sp, fp, #28
   1b71c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b720:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b724:	add	fp, sp, #28
   1b728:	sub	sp, sp, #36	; 0x24
   1b72c:	movw	r8, #9152	; 0x23c0
   1b730:	cmp	r3, #0
   1b734:	mov	r4, r2
   1b738:	str	r2, [sp, #24]
   1b73c:	mov	r5, r1
   1b740:	mov	r6, r0
   1b744:	str	r0, [sp, #20]
   1b748:	movt	r8, #3
   1b74c:	movne	r8, r3
   1b750:	bl	11748 <__errno_location@plt>
   1b754:	str	r0, [sp, #28]
   1b758:	ldr	r1, [r8, #40]	; 0x28
   1b75c:	ldr	r2, [r8, #44]	; 0x2c
   1b760:	ldr	r7, [r0]
   1b764:	cmp	r4, #0
   1b768:	add	sl, r8, #8
   1b76c:	mov	r0, #0
   1b770:	ldm	r8, {r3, r9}
   1b774:	orreq	r9, r9, #1
   1b778:	stm	sp, {r3, r9, sl}
   1b77c:	str	r1, [sp, #12]
   1b780:	str	r2, [sp, #16]
   1b784:	mov	r1, #0
   1b788:	mov	r2, r6
   1b78c:	mov	r3, r5
   1b790:	str	r7, [sp, #32]
   1b794:	mov	r7, r5
   1b798:	bl	1a2b0 <__assert_fail@plt+0x89c4>
   1b79c:	add	r4, r0, #1
   1b7a0:	mov	r5, r0
   1b7a4:	mov	r0, r4
   1b7a8:	bl	1c974 <__assert_fail@plt+0xb088>
   1b7ac:	mov	r6, r0
   1b7b0:	ldr	r0, [r8]
   1b7b4:	ldr	r2, [r8, #44]	; 0x2c
   1b7b8:	ldr	r1, [r8, #40]	; 0x28
   1b7bc:	mov	r3, r7
   1b7c0:	stm	sp, {r0, r9, sl}
   1b7c4:	str	r2, [sp, #16]
   1b7c8:	ldr	r2, [sp, #20]
   1b7cc:	str	r1, [sp, #12]
   1b7d0:	mov	r0, r6
   1b7d4:	mov	r1, r4
   1b7d8:	bl	1a2b0 <__assert_fail@plt+0x89c4>
   1b7dc:	ldr	r0, [sp, #24]
   1b7e0:	ldr	r1, [sp, #32]
   1b7e4:	ldr	r2, [sp, #28]
   1b7e8:	cmp	r0, #0
   1b7ec:	str	r1, [r2]
   1b7f0:	strne	r5, [r0]
   1b7f4:	mov	r0, r6
   1b7f8:	sub	sp, fp, #28
   1b7fc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b800:	push	{r4, r5, r6, r7, fp, lr}
   1b804:	add	fp, sp, #16
   1b808:	movw	r4, #8968	; 0x2308
   1b80c:	movt	r4, #3
   1b810:	ldrd	r6, [r4]
   1b814:	cmp	r7, #2
   1b818:	blt	1b844 <__assert_fail@plt+0x9f58>
   1b81c:	add	r5, r6, #12
   1b820:	mov	r7, #0
   1b824:	ldr	r0, [r5, r7, lsl #3]
   1b828:	bl	160c4 <__assert_fail@plt+0x47d8>
   1b82c:	ldr	r1, [r4, #4]
   1b830:	add	r2, r7, #2
   1b834:	add	r0, r7, #1
   1b838:	mov	r7, r0
   1b83c:	cmp	r2, r1
   1b840:	blt	1b824 <__assert_fail@plt+0x9f38>
   1b844:	ldr	r0, [r6, #4]
   1b848:	movw	r5, #9200	; 0x23f0
   1b84c:	movt	r5, #3
   1b850:	cmp	r0, r5
   1b854:	beq	1b868 <__assert_fail@plt+0x9f7c>
   1b858:	bl	160c4 <__assert_fail@plt+0x47d8>
   1b85c:	mov	r0, #256	; 0x100
   1b860:	str	r0, [r4, #8]
   1b864:	str	r5, [r4, #12]
   1b868:	add	r5, r4, #8
   1b86c:	cmp	r6, r5
   1b870:	beq	1b880 <__assert_fail@plt+0x9f94>
   1b874:	mov	r0, r6
   1b878:	bl	160c4 <__assert_fail@plt+0x47d8>
   1b87c:	str	r5, [r4]
   1b880:	mov	r0, #1
   1b884:	str	r0, [r4, #4]
   1b888:	pop	{r4, r5, r6, r7, fp, pc}
   1b88c:	movw	r3, #9152	; 0x23c0
   1b890:	mvn	r2, #0
   1b894:	movt	r3, #3
   1b898:	b	1b89c <__assert_fail@plt+0x9fb0>
   1b89c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b8a0:	add	fp, sp, #28
   1b8a4:	sub	sp, sp, #44	; 0x2c
   1b8a8:	mov	r7, r3
   1b8ac:	str	r2, [sp, #36]	; 0x24
   1b8b0:	str	r1, [sp, #32]
   1b8b4:	mov	r5, r0
   1b8b8:	bl	11748 <__errno_location@plt>
   1b8bc:	cmp	r5, #0
   1b8c0:	bmi	1ba28 <__assert_fail@plt+0xa13c>
   1b8c4:	cmn	r5, #-2147483647	; 0x80000001
   1b8c8:	beq	1ba28 <__assert_fail@plt+0xa13c>
   1b8cc:	movw	r8, #8968	; 0x2308
   1b8d0:	mov	r4, r0
   1b8d4:	ldr	r0, [r0]
   1b8d8:	movt	r8, #3
   1b8dc:	str	r4, [sp, #28]
   1b8e0:	ldr	r1, [r8, #4]
   1b8e4:	ldr	r6, [r8]
   1b8e8:	str	r0, [sp, #24]
   1b8ec:	cmp	r1, r5
   1b8f0:	ble	1b8fc <__assert_fail@plt+0xa010>
   1b8f4:	mov	sl, r6
   1b8f8:	b	1b964 <__assert_fail@plt+0xa078>
   1b8fc:	mov	r0, #8
   1b900:	add	r9, r8, #8
   1b904:	str	r1, [fp, #-32]	; 0xffffffe0
   1b908:	sub	r1, r5, r1
   1b90c:	mvn	r3, #-2147483648	; 0x80000000
   1b910:	str	r0, [sp]
   1b914:	subs	r0, r6, r9
   1b918:	add	r2, r1, #1
   1b91c:	sub	r1, fp, #32
   1b920:	movne	r0, r6
   1b924:	bl	1cb74 <__assert_fail@plt+0xb288>
   1b928:	mov	sl, r0
   1b92c:	cmp	r6, r9
   1b930:	str	r0, [r8]
   1b934:	bne	1b940 <__assert_fail@plt+0xa054>
   1b938:	ldrd	r0, [r8, #8]
   1b93c:	stm	sl, {r0, r1}
   1b940:	ldr	r1, [r8, #4]
   1b944:	ldr	r2, [fp, #-32]	; 0xffffffe0
   1b948:	add	r0, sl, r1, lsl #3
   1b94c:	sub	r1, r2, r1
   1b950:	lsl	r2, r1, #3
   1b954:	mov	r1, #0
   1b958:	bl	1176c <memset@plt>
   1b95c:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1b960:	str	r0, [r8, #4]
   1b964:	mov	r9, sl
   1b968:	ldm	r7, {r0, r1}
   1b96c:	orr	r8, r1, #1
   1b970:	add	r1, r7, #8
   1b974:	ldr	r2, [r7, #40]	; 0x28
   1b978:	ldr	r3, [r7, #44]	; 0x2c
   1b97c:	ldr	r6, [r9, r5, lsl #3]!
   1b980:	str	r1, [sp, #20]
   1b984:	ldr	r4, [r9, #4]!
   1b988:	stm	sp, {r0, r8}
   1b98c:	add	r0, sp, #8
   1b990:	stm	r0, {r1, r2, r3}
   1b994:	ldr	r2, [sp, #32]
   1b998:	ldr	r3, [sp, #36]	; 0x24
   1b99c:	mov	r1, r6
   1b9a0:	mov	r0, r4
   1b9a4:	bl	1a2b0 <__assert_fail@plt+0x89c4>
   1b9a8:	cmp	r6, r0
   1b9ac:	bhi	1ba10 <__assert_fail@plt+0xa124>
   1b9b0:	add	r6, r0, #1
   1b9b4:	movw	r0, #9200	; 0x23f0
   1b9b8:	movt	r0, #3
   1b9bc:	str	r6, [sl, r5, lsl #3]
   1b9c0:	cmp	r4, r0
   1b9c4:	beq	1b9d0 <__assert_fail@plt+0xa0e4>
   1b9c8:	mov	r0, r4
   1b9cc:	bl	160c4 <__assert_fail@plt+0x47d8>
   1b9d0:	mov	r0, r6
   1b9d4:	bl	1c974 <__assert_fail@plt+0xb088>
   1b9d8:	str	r0, [r9]
   1b9dc:	mov	r4, r0
   1b9e0:	add	r3, sp, #8
   1b9e4:	ldr	r0, [r7]
   1b9e8:	ldr	r1, [r7, #40]	; 0x28
   1b9ec:	ldr	r2, [r7, #44]	; 0x2c
   1b9f0:	stm	sp, {r0, r8}
   1b9f4:	ldr	r0, [sp, #20]
   1b9f8:	stm	r3, {r0, r1, r2}
   1b9fc:	ldr	r2, [sp, #32]
   1ba00:	ldr	r3, [sp, #36]	; 0x24
   1ba04:	mov	r0, r4
   1ba08:	mov	r1, r6
   1ba0c:	bl	1a2b0 <__assert_fail@plt+0x89c4>
   1ba10:	ldr	r1, [sp, #24]
   1ba14:	ldr	r0, [sp, #28]
   1ba18:	str	r1, [r0]
   1ba1c:	mov	r0, r4
   1ba20:	sub	sp, fp, #28
   1ba24:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ba28:	bl	118bc <abort@plt>
   1ba2c:	movw	r3, #9152	; 0x23c0
   1ba30:	movt	r3, #3
   1ba34:	b	1b89c <__assert_fail@plt+0x9fb0>
   1ba38:	movw	r3, #9152	; 0x23c0
   1ba3c:	mov	r1, r0
   1ba40:	mov	r0, #0
   1ba44:	mvn	r2, #0
   1ba48:	movt	r3, #3
   1ba4c:	b	1b89c <__assert_fail@plt+0x9fb0>
   1ba50:	movw	r3, #9152	; 0x23c0
   1ba54:	mov	r2, r1
   1ba58:	mov	r1, r0
   1ba5c:	mov	r0, #0
   1ba60:	movt	r3, #3
   1ba64:	b	1b89c <__assert_fail@plt+0x9fb0>
   1ba68:	push	{fp, lr}
   1ba6c:	mov	fp, sp
   1ba70:	sub	sp, sp, #48	; 0x30
   1ba74:	vmov.i32	q8, #0	; 0x00000000
   1ba78:	mov	ip, #32
   1ba7c:	mov	r3, sp
   1ba80:	mov	lr, r2
   1ba84:	cmp	r1, #10
   1ba88:	add	r2, r3, #16
   1ba8c:	vst1.64	{d16-d17}, [r3], ip
   1ba90:	vst1.64	{d16-d17}, [r2]
   1ba94:	vst1.64	{d16-d17}, [r3]
   1ba98:	beq	1bab8 <__assert_fail@plt+0xa1cc>
   1ba9c:	str	r1, [sp]
   1baa0:	mov	r3, sp
   1baa4:	mov	r1, lr
   1baa8:	mvn	r2, #0
   1baac:	bl	1b89c <__assert_fail@plt+0x9fb0>
   1bab0:	mov	sp, fp
   1bab4:	pop	{fp, pc}
   1bab8:	bl	118bc <abort@plt>
   1babc:	push	{r4, sl, fp, lr}
   1bac0:	add	fp, sp, #8
   1bac4:	sub	sp, sp, #48	; 0x30
   1bac8:	vmov.i32	q8, #0	; 0x00000000
   1bacc:	mov	ip, r3
   1bad0:	mov	r3, sp
   1bad4:	mov	lr, #32
   1bad8:	cmp	r1, #10
   1badc:	add	r4, r3, #16
   1bae0:	vst1.64	{d16-d17}, [r3], lr
   1bae4:	vst1.64	{d16-d17}, [r4]
   1bae8:	vst1.64	{d16-d17}, [r3]
   1baec:	beq	1bb0c <__assert_fail@plt+0xa220>
   1baf0:	str	r1, [sp]
   1baf4:	mov	r1, r2
   1baf8:	mov	r3, sp
   1bafc:	mov	r2, ip
   1bb00:	bl	1b89c <__assert_fail@plt+0x9fb0>
   1bb04:	sub	sp, fp, #8
   1bb08:	pop	{r4, sl, fp, pc}
   1bb0c:	bl	118bc <abort@plt>
   1bb10:	push	{fp, lr}
   1bb14:	mov	fp, sp
   1bb18:	sub	sp, sp, #48	; 0x30
   1bb1c:	vmov.i32	q8, #0	; 0x00000000
   1bb20:	mov	r3, sp
   1bb24:	mov	ip, #32
   1bb28:	cmp	r0, #10
   1bb2c:	add	r2, r3, #16
   1bb30:	vst1.64	{d16-d17}, [r3], ip
   1bb34:	vst1.64	{d16-d17}, [r2]
   1bb38:	vst1.64	{d16-d17}, [r3]
   1bb3c:	beq	1bb5c <__assert_fail@plt+0xa270>
   1bb40:	str	r0, [sp]
   1bb44:	mov	r3, sp
   1bb48:	mov	r0, #0
   1bb4c:	mvn	r2, #0
   1bb50:	bl	1b89c <__assert_fail@plt+0x9fb0>
   1bb54:	mov	sp, fp
   1bb58:	pop	{fp, pc}
   1bb5c:	bl	118bc <abort@plt>
   1bb60:	push	{fp, lr}
   1bb64:	mov	fp, sp
   1bb68:	sub	sp, sp, #48	; 0x30
   1bb6c:	vmov.i32	q8, #0	; 0x00000000
   1bb70:	mov	r3, sp
   1bb74:	mov	ip, #32
   1bb78:	cmp	r0, #10
   1bb7c:	add	lr, r3, #16
   1bb80:	vst1.64	{d16-d17}, [r3], ip
   1bb84:	vst1.64	{d16-d17}, [lr]
   1bb88:	vst1.64	{d16-d17}, [r3]
   1bb8c:	beq	1bba8 <__assert_fail@plt+0xa2bc>
   1bb90:	str	r0, [sp]
   1bb94:	mov	r3, sp
   1bb98:	mov	r0, #0
   1bb9c:	bl	1b89c <__assert_fail@plt+0x9fb0>
   1bba0:	mov	sp, fp
   1bba4:	pop	{fp, pc}
   1bba8:	bl	118bc <abort@plt>
   1bbac:	push	{r4, sl, fp, lr}
   1bbb0:	add	fp, sp, #8
   1bbb4:	sub	sp, sp, #48	; 0x30
   1bbb8:	mov	lr, r0
   1bbbc:	movw	r0, #9152	; 0x23c0
   1bbc0:	mov	ip, r1
   1bbc4:	mov	r1, #32
   1bbc8:	mov	r4, #1
   1bbcc:	movt	r0, #3
   1bbd0:	add	r3, r0, #16
   1bbd4:	vld1.64	{d16-d17}, [r0], r1
   1bbd8:	vld1.64	{d20-d21}, [r0]
   1bbdc:	vld1.64	{d18-d19}, [r3]
   1bbe0:	mov	r3, sp
   1bbe4:	add	r0, r3, #32
   1bbe8:	add	r1, r3, #16
   1bbec:	vst1.64	{d20-d21}, [r0]
   1bbf0:	mov	r0, #28
   1bbf4:	vst1.64	{d18-d19}, [r1]
   1bbf8:	mov	r1, r3
   1bbfc:	and	r0, r0, r2, lsr #3
   1bc00:	and	r2, r2, #31
   1bc04:	vst1.64	{d16-d17}, [r1], r0
   1bc08:	ldr	r0, [r1, #8]
   1bc0c:	bic	r4, r4, r0, lsr r2
   1bc10:	eor	r0, r0, r4, lsl r2
   1bc14:	mov	r2, ip
   1bc18:	str	r0, [r1, #8]
   1bc1c:	mov	r0, #0
   1bc20:	mov	r1, lr
   1bc24:	bl	1b89c <__assert_fail@plt+0x9fb0>
   1bc28:	sub	sp, fp, #8
   1bc2c:	pop	{r4, sl, fp, pc}
   1bc30:	push	{fp, lr}
   1bc34:	mov	fp, sp
   1bc38:	sub	sp, sp, #48	; 0x30
   1bc3c:	mov	ip, r0
   1bc40:	movw	r0, #9152	; 0x23c0
   1bc44:	mov	r2, #32
   1bc48:	movt	r0, #3
   1bc4c:	add	r3, r0, #16
   1bc50:	vld1.64	{d16-d17}, [r0], r2
   1bc54:	vld1.64	{d20-d21}, [r0]
   1bc58:	vld1.64	{d18-d19}, [r3]
   1bc5c:	mov	r3, sp
   1bc60:	add	r0, r3, #32
   1bc64:	add	r2, r3, #16
   1bc68:	vst1.64	{d20-d21}, [r0]
   1bc6c:	mov	r0, #28
   1bc70:	vst1.64	{d18-d19}, [r2]
   1bc74:	mov	r2, r3
   1bc78:	and	r0, r0, r1, lsr #3
   1bc7c:	and	r1, r1, #31
   1bc80:	vst1.64	{d16-d17}, [r2], r0
   1bc84:	mov	r0, #1
   1bc88:	ldr	lr, [r2, #8]
   1bc8c:	bic	r0, r0, lr, lsr r1
   1bc90:	eor	r0, lr, r0, lsl r1
   1bc94:	mov	r1, ip
   1bc98:	str	r0, [r2, #8]
   1bc9c:	mov	r0, #0
   1bca0:	mvn	r2, #0
   1bca4:	bl	1b89c <__assert_fail@plt+0x9fb0>
   1bca8:	mov	sp, fp
   1bcac:	pop	{fp, pc}
   1bcb0:	push	{fp, lr}
   1bcb4:	mov	fp, sp
   1bcb8:	sub	sp, sp, #48	; 0x30
   1bcbc:	mov	r1, r0
   1bcc0:	movw	r0, #9152	; 0x23c0
   1bcc4:	mov	r3, #32
   1bcc8:	movt	r0, #3
   1bccc:	add	r2, r0, #16
   1bcd0:	vld1.64	{d16-d17}, [r0], r3
   1bcd4:	mov	r3, sp
   1bcd8:	vld1.64	{d18-d19}, [r2]
   1bcdc:	vld1.64	{d20-d21}, [r0]
   1bce0:	add	r2, r3, #16
   1bce4:	add	r0, r3, #32
   1bce8:	vst1.64	{d18-d19}, [r2]
   1bcec:	vst1.64	{d20-d21}, [r0]
   1bcf0:	mov	r0, #12
   1bcf4:	mov	r2, r3
   1bcf8:	vst1.64	{d16-d17}, [r2], r0
   1bcfc:	ldr	r0, [r2]
   1bd00:	orr	r0, r0, #67108864	; 0x4000000
   1bd04:	str	r0, [r2]
   1bd08:	mov	r0, #0
   1bd0c:	mvn	r2, #0
   1bd10:	bl	1b89c <__assert_fail@plt+0x9fb0>
   1bd14:	mov	sp, fp
   1bd18:	pop	{fp, pc}
   1bd1c:	push	{fp, lr}
   1bd20:	mov	fp, sp
   1bd24:	sub	sp, sp, #48	; 0x30
   1bd28:	mov	ip, r1
   1bd2c:	mov	r1, r0
   1bd30:	movw	r0, #9152	; 0x23c0
   1bd34:	mov	r2, #32
   1bd38:	movt	r0, #3
   1bd3c:	add	r3, r0, #16
   1bd40:	vld1.64	{d16-d17}, [r0], r2
   1bd44:	vld1.64	{d18-d19}, [r3]
   1bd48:	vld1.64	{d20-d21}, [r0]
   1bd4c:	mov	r3, sp
   1bd50:	add	r2, r3, #16
   1bd54:	add	r0, r3, #32
   1bd58:	vst1.64	{d18-d19}, [r2]
   1bd5c:	vst1.64	{d20-d21}, [r0]
   1bd60:	mov	r0, #12
   1bd64:	mov	r2, r3
   1bd68:	vst1.64	{d16-d17}, [r2], r0
   1bd6c:	ldr	r0, [r2]
   1bd70:	orr	r0, r0, #67108864	; 0x4000000
   1bd74:	str	r0, [r2]
   1bd78:	mov	r0, #0
   1bd7c:	mov	r2, ip
   1bd80:	bl	1b89c <__assert_fail@plt+0x9fb0>
   1bd84:	mov	sp, fp
   1bd88:	pop	{fp, pc}
   1bd8c:	push	{r4, sl, fp, lr}
   1bd90:	add	fp, sp, #8
   1bd94:	sub	sp, sp, #96	; 0x60
   1bd98:	vmov.i32	q8, #0	; 0x00000000
   1bd9c:	mov	ip, r2
   1bda0:	mov	r2, sp
   1bda4:	mov	r4, #28
   1bda8:	cmp	r1, #10
   1bdac:	mov	r3, r2
   1bdb0:	add	lr, r2, #16
   1bdb4:	vst1.64	{d16-d17}, [r3], r4
   1bdb8:	vst1.64	{d16-d17}, [lr]
   1bdbc:	vst1.32	{d16-d17}, [r3]
   1bdc0:	beq	1be10 <__assert_fail@plt+0xa524>
   1bdc4:	vld1.64	{d16-d17}, [r2], r4
   1bdc8:	vld1.64	{d18-d19}, [lr]
   1bdcc:	add	r3, sp, #48	; 0x30
   1bdd0:	vld1.32	{d20-d21}, [r2]
   1bdd4:	add	r2, r3, #20
   1bdd8:	add	r4, r3, #4
   1bddc:	vst1.32	{d18-d19}, [r2]
   1bde0:	add	r2, r3, #32
   1bde4:	vst1.32	{d16-d17}, [r4]
   1bde8:	vst1.32	{d20-d21}, [r2]
   1bdec:	str	r1, [sp, #48]	; 0x30
   1bdf0:	mvn	r2, #0
   1bdf4:	ldr	r1, [sp, #60]	; 0x3c
   1bdf8:	orr	r1, r1, #67108864	; 0x4000000
   1bdfc:	str	r1, [sp, #60]	; 0x3c
   1be00:	mov	r1, ip
   1be04:	bl	1b89c <__assert_fail@plt+0x9fb0>
   1be08:	sub	sp, fp, #8
   1be0c:	pop	{r4, sl, fp, pc}
   1be10:	bl	118bc <abort@plt>
   1be14:	push	{r4, r5, r6, sl, fp, lr}
   1be18:	add	fp, sp, #16
   1be1c:	sub	sp, sp, #48	; 0x30
   1be20:	mov	ip, r3
   1be24:	movw	r3, #9152	; 0x23c0
   1be28:	mov	r6, #32
   1be2c:	cmp	r1, #0
   1be30:	mov	r4, sp
   1be34:	movt	r3, #3
   1be38:	cmpne	r2, #0
   1be3c:	add	r5, r4, #16
   1be40:	add	lr, r3, #16
   1be44:	vld1.64	{d16-d17}, [r3], r6
   1be48:	vld1.64	{d18-d19}, [lr]
   1be4c:	vld1.64	{d20-d21}, [r3]
   1be50:	mov	r3, #10
   1be54:	vst1.64	{d16-d17}, [r4], r6
   1be58:	vst1.64	{d18-d19}, [r5]
   1be5c:	vst1.64	{d20-d21}, [r4]
   1be60:	str	r3, [sp]
   1be64:	bne	1be6c <__assert_fail@plt+0xa580>
   1be68:	bl	118bc <abort@plt>
   1be6c:	str	r2, [sp, #44]	; 0x2c
   1be70:	str	r1, [sp, #40]	; 0x28
   1be74:	mov	r3, sp
   1be78:	mov	r1, ip
   1be7c:	mvn	r2, #0
   1be80:	bl	1b89c <__assert_fail@plt+0x9fb0>
   1be84:	sub	sp, fp, #16
   1be88:	pop	{r4, r5, r6, sl, fp, pc}
   1be8c:	push	{r4, r5, r6, sl, fp, lr}
   1be90:	add	fp, sp, #16
   1be94:	sub	sp, sp, #48	; 0x30
   1be98:	mov	lr, r3
   1be9c:	movw	r3, #9152	; 0x23c0
   1bea0:	mov	r6, #32
   1bea4:	cmp	r1, #0
   1bea8:	mov	r4, sp
   1beac:	movt	r3, #3
   1beb0:	cmpne	r2, #0
   1beb4:	add	r5, r4, #16
   1beb8:	add	ip, r3, #16
   1bebc:	vld1.64	{d16-d17}, [r3], r6
   1bec0:	vld1.64	{d18-d19}, [ip]
   1bec4:	vld1.64	{d20-d21}, [r3]
   1bec8:	mov	r3, #10
   1becc:	vst1.64	{d16-d17}, [r4], r6
   1bed0:	vst1.64	{d18-d19}, [r5]
   1bed4:	vst1.64	{d20-d21}, [r4]
   1bed8:	str	r3, [sp]
   1bedc:	bne	1bee4 <__assert_fail@plt+0xa5f8>
   1bee0:	bl	118bc <abort@plt>
   1bee4:	ldr	ip, [fp, #8]
   1bee8:	str	r2, [sp, #44]	; 0x2c
   1beec:	str	r1, [sp, #40]	; 0x28
   1bef0:	mov	r3, sp
   1bef4:	mov	r1, lr
   1bef8:	mov	r2, ip
   1befc:	bl	1b89c <__assert_fail@plt+0x9fb0>
   1bf00:	sub	sp, fp, #16
   1bf04:	pop	{r4, r5, r6, sl, fp, pc}
   1bf08:	push	{r4, sl, fp, lr}
   1bf0c:	add	fp, sp, #8
   1bf10:	sub	sp, sp, #48	; 0x30
   1bf14:	movw	r3, #9152	; 0x23c0
   1bf18:	mov	lr, #32
   1bf1c:	mov	ip, r2
   1bf20:	cmp	r0, #0
   1bf24:	movt	r3, #3
   1bf28:	cmpne	r1, #0
   1bf2c:	add	r2, r3, #16
   1bf30:	vld1.64	{d16-d17}, [r3], lr
   1bf34:	vld1.64	{d20-d21}, [r3]
   1bf38:	vld1.64	{d18-d19}, [r2]
   1bf3c:	mov	r2, sp
   1bf40:	add	r4, r2, #16
   1bf44:	vst1.64	{d16-d17}, [r2], lr
   1bf48:	vst1.64	{d20-d21}, [r2]
   1bf4c:	mov	r2, #10
   1bf50:	vst1.64	{d18-d19}, [r4]
   1bf54:	str	r2, [sp]
   1bf58:	bne	1bf60 <__assert_fail@plt+0xa674>
   1bf5c:	bl	118bc <abort@plt>
   1bf60:	str	r1, [sp, #44]	; 0x2c
   1bf64:	str	r0, [sp, #40]	; 0x28
   1bf68:	mov	r3, sp
   1bf6c:	mov	r0, #0
   1bf70:	mov	r1, ip
   1bf74:	mvn	r2, #0
   1bf78:	bl	1b89c <__assert_fail@plt+0x9fb0>
   1bf7c:	sub	sp, fp, #8
   1bf80:	pop	{r4, sl, fp, pc}
   1bf84:	push	{r4, r5, fp, lr}
   1bf88:	add	fp, sp, #8
   1bf8c:	sub	sp, sp, #48	; 0x30
   1bf90:	mov	ip, r3
   1bf94:	movw	r3, #9152	; 0x23c0
   1bf98:	mov	r4, #32
   1bf9c:	mov	lr, r2
   1bfa0:	cmp	r0, #0
   1bfa4:	movt	r3, #3
   1bfa8:	cmpne	r1, #0
   1bfac:	add	r2, r3, #16
   1bfb0:	vld1.64	{d16-d17}, [r3], r4
   1bfb4:	vld1.64	{d20-d21}, [r3]
   1bfb8:	vld1.64	{d18-d19}, [r2]
   1bfbc:	mov	r2, sp
   1bfc0:	add	r5, r2, #16
   1bfc4:	vst1.64	{d16-d17}, [r2], r4
   1bfc8:	vst1.64	{d20-d21}, [r2]
   1bfcc:	mov	r2, #10
   1bfd0:	vst1.64	{d18-d19}, [r5]
   1bfd4:	str	r2, [sp]
   1bfd8:	bne	1bfe0 <__assert_fail@plt+0xa6f4>
   1bfdc:	bl	118bc <abort@plt>
   1bfe0:	str	r1, [sp, #44]	; 0x2c
   1bfe4:	str	r0, [sp, #40]	; 0x28
   1bfe8:	mov	r3, sp
   1bfec:	mov	r0, #0
   1bff0:	mov	r1, lr
   1bff4:	mov	r2, ip
   1bff8:	bl	1b89c <__assert_fail@plt+0x9fb0>
   1bffc:	sub	sp, fp, #8
   1c000:	pop	{r4, r5, fp, pc}
   1c004:	movw	r3, #8920	; 0x22d8
   1c008:	movt	r3, #3
   1c00c:	b	1b89c <__assert_fail@plt+0x9fb0>
   1c010:	movw	r3, #8920	; 0x22d8
   1c014:	mov	r2, r1
   1c018:	mov	r1, r0
   1c01c:	mov	r0, #0
   1c020:	movt	r3, #3
   1c024:	b	1b89c <__assert_fail@plt+0x9fb0>
   1c028:	movw	r3, #8920	; 0x22d8
   1c02c:	mvn	r2, #0
   1c030:	movt	r3, #3
   1c034:	b	1b89c <__assert_fail@plt+0x9fb0>
   1c038:	movw	r3, #8920	; 0x22d8
   1c03c:	mov	r1, r0
   1c040:	mov	r0, #0
   1c044:	mvn	r2, #0
   1c048:	movt	r3, #3
   1c04c:	b	1b89c <__assert_fail@plt+0x9fb0>
   1c050:	push	{r4, r5, fp, lr}
   1c054:	add	fp, sp, #8
   1c058:	mov	r4, #0
   1c05c:	mov	r5, r0
   1c060:	mov	r1, #524288	; 0x80000
   1c064:	str	r4, [r0, #4]
   1c068:	movw	r0, #4075	; 0xfeb
   1c06c:	movt	r0, #2
   1c070:	bl	1f464 <__assert_fail@plt+0xdb78>
   1c074:	cmn	r0, #1
   1c078:	str	r0, [r5]
   1c07c:	ble	1c088 <__assert_fail@plt+0xa79c>
   1c080:	mov	r0, r4
   1c084:	pop	{r4, r5, fp, pc}
   1c088:	mov	r0, #0
   1c08c:	mov	r1, #0
   1c090:	mov	r4, #0
   1c094:	bl	116f4 <getcwd@plt>
   1c098:	cmp	r0, #0
   1c09c:	str	r0, [r5, #4]
   1c0a0:	mvneq	r4, #0
   1c0a4:	mov	r0, r4
   1c0a8:	pop	{r4, r5, fp, pc}
   1c0ac:	ldr	r1, [r0]
   1c0b0:	cmp	r1, #0
   1c0b4:	bmi	1c0c0 <__assert_fail@plt+0xa7d4>
   1c0b8:	mov	r0, r1
   1c0bc:	b	11850 <fchdir@plt>
   1c0c0:	ldr	r0, [r0, #4]
   1c0c4:	b	1ef84 <__assert_fail@plt+0xd698>
   1c0c8:	push	{r4, sl, fp, lr}
   1c0cc:	add	fp, sp, #8
   1c0d0:	mov	r4, r0
   1c0d4:	ldr	r0, [r0]
   1c0d8:	cmp	r0, #0
   1c0dc:	bmi	1c0e4 <__assert_fail@plt+0xa7f8>
   1c0e0:	bl	118c8 <close@plt>
   1c0e4:	ldr	r0, [r4, #4]
   1c0e8:	pop	{r4, sl, fp, lr}
   1c0ec:	b	160c4 <__assert_fail@plt+0x47d8>
   1c0f0:	push	{r4, r5, r6, sl, fp, lr}
   1c0f4:	add	fp, sp, #16
   1c0f8:	ldr	r4, [r0], #8
   1c0fc:	mov	r5, r1
   1c100:	cmp	r4, r0
   1c104:	beq	1c128 <__assert_fail@plt+0xa83c>
   1c108:	mov	r0, r4
   1c10c:	mov	r1, r5
   1c110:	bl	1dcfc <__assert_fail@plt+0xc410>
   1c114:	cmp	r0, #0
   1c118:	mov	r6, r0
   1c11c:	moveq	r6, r4
   1c120:	mov	r0, r6
   1c124:	pop	{r4, r5, r6, sl, fp, pc}
   1c128:	mov	r0, r5
   1c12c:	bl	1dccc <__assert_fail@plt+0xc3e0>
   1c130:	cmp	r0, #0
   1c134:	beq	1c150 <__assert_fail@plt+0xa864>
   1c138:	mov	r1, r4
   1c13c:	mov	r2, r5
   1c140:	mov	r6, r0
   1c144:	bl	11574 <memcpy@plt>
   1c148:	mov	r0, r6
   1c14c:	pop	{r4, r5, r6, sl, fp, pc}
   1c150:	mov	r6, #0
   1c154:	mov	r0, r6
   1c158:	pop	{r4, r5, r6, sl, fp, pc}
   1c15c:	push	{r4, r5, r6, sl, fp, lr}
   1c160:	add	fp, sp, #16
   1c164:	mov	r4, r0
   1c168:	add	r6, r0, #8
   1c16c:	ldrd	r0, [r0]
   1c170:	lsl	r5, r1, #1
   1c174:	cmp	r0, r6
   1c178:	beq	1c184 <__assert_fail@plt+0xa898>
   1c17c:	bl	160c4 <__assert_fail@plt+0x47d8>
   1c180:	ldr	r1, [r4, #4]
   1c184:	cmp	r5, r1
   1c188:	bcc	1c1ac <__assert_fail@plt+0xa8c0>
   1c18c:	mov	r0, r5
   1c190:	bl	1dccc <__assert_fail@plt+0xc3e0>
   1c194:	cmp	r0, #0
   1c198:	strne	r0, [r4]
   1c19c:	movne	r0, #1
   1c1a0:	strne	r5, [r4, #4]
   1c1a4:	popne	{r4, r5, r6, sl, fp, pc}
   1c1a8:	b	1c1b8 <__assert_fail@plt+0xa8cc>
   1c1ac:	bl	11748 <__errno_location@plt>
   1c1b0:	mov	r1, #12
   1c1b4:	str	r1, [r0]
   1c1b8:	mov	r0, #0
   1c1bc:	mov	r5, #1024	; 0x400
   1c1c0:	str	r6, [r4]
   1c1c4:	str	r5, [r4, #4]
   1c1c8:	pop	{r4, r5, r6, sl, fp, pc}
   1c1cc:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1c1d0:	add	fp, sp, #24
   1c1d4:	ldrd	r8, [r0]
   1c1d8:	add	r7, r0, #8
   1c1dc:	mov	r4, r0
   1c1e0:	lsl	r5, r9, #1
   1c1e4:	cmp	r8, r7
   1c1e8:	beq	1c21c <__assert_fail@plt+0xa930>
   1c1ec:	cmp	r5, r9
   1c1f0:	bcc	1c254 <__assert_fail@plt+0xa968>
   1c1f4:	mov	r0, r8
   1c1f8:	mov	r1, r5
   1c1fc:	bl	1dcfc <__assert_fail@plt+0xc410>
   1c200:	mov	r6, r0
   1c204:	cmp	r0, #0
   1c208:	beq	1c264 <__assert_fail@plt+0xa978>
   1c20c:	mov	r0, #1
   1c210:	str	r6, [r4]
   1c214:	str	r5, [r4, #4]
   1c218:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1c21c:	mov	r0, r5
   1c220:	bl	1dccc <__assert_fail@plt+0xc3e0>
   1c224:	cmp	r0, #0
   1c228:	beq	1c24c <__assert_fail@plt+0xa960>
   1c22c:	ldr	r2, [r4, #4]
   1c230:	mov	r1, r8
   1c234:	mov	r6, r0
   1c238:	bl	11574 <memcpy@plt>
   1c23c:	mov	r0, #1
   1c240:	str	r6, [r4]
   1c244:	str	r5, [r4, #4]
   1c248:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1c24c:	mov	r0, #0
   1c250:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1c254:	bl	11748 <__errno_location@plt>
   1c258:	mov	r1, #12
   1c25c:	str	r1, [r0]
   1c260:	b	1c268 <__assert_fail@plt+0xa97c>
   1c264:	ldr	r8, [r4]
   1c268:	mov	r0, r8
   1c26c:	bl	160c4 <__assert_fail@plt+0x47d8>
   1c270:	mov	r0, #0
   1c274:	mov	r5, #1024	; 0x400
   1c278:	str	r7, [r4]
   1c27c:	str	r5, [r4, #4]
   1c280:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1c284:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1c288:	add	fp, sp, #24
   1c28c:	sub	sp, sp, #32
   1c290:	ldr	r6, [fp, #12]
   1c294:	ldr	r7, [fp, #8]
   1c298:	mov	r4, r2
   1c29c:	mov	r8, r0
   1c2a0:	cmp	r1, #0
   1c2a4:	beq	1c2cc <__assert_fail@plt+0xa9e0>
   1c2a8:	movw	r2, #4860	; 0x12fc
   1c2ac:	mov	r5, r1
   1c2b0:	str	r3, [sp, #4]
   1c2b4:	str	r4, [sp]
   1c2b8:	mov	r0, r8
   1c2bc:	mov	r1, #1
   1c2c0:	movt	r2, #2
   1c2c4:	mov	r3, r5
   1c2c8:	b	1c2e4 <__assert_fail@plt+0xa9f8>
   1c2cc:	movw	r2, #4872	; 0x1308
   1c2d0:	str	r3, [sp]
   1c2d4:	mov	r0, r8
   1c2d8:	mov	r1, #1
   1c2dc:	mov	r3, r4
   1c2e0:	movt	r2, #2
   1c2e4:	bl	1179c <__fprintf_chk@plt>
   1c2e8:	movw	r1, #4879	; 0x130f
   1c2ec:	mov	r0, #0
   1c2f0:	mov	r2, #5
   1c2f4:	movt	r1, #2
   1c2f8:	bl	115a4 <dcgettext@plt>
   1c2fc:	movw	r2, #5597	; 0x15dd
   1c300:	mov	r3, r0
   1c304:	movw	r0, #2022	; 0x7e6
   1c308:	mov	r1, #1
   1c30c:	movt	r2, #2
   1c310:	str	r0, [sp]
   1c314:	mov	r0, r8
   1c318:	bl	1179c <__fprintf_chk@plt>
   1c31c:	movw	r4, #2822	; 0xb06
   1c320:	mov	r1, r8
   1c324:	movt	r4, #2
   1c328:	mov	r0, r4
   1c32c:	bl	114f0 <fputs_unlocked@plt>
   1c330:	movw	r1, #4883	; 0x1313
   1c334:	mov	r0, #0
   1c338:	mov	r2, #5
   1c33c:	movt	r1, #2
   1c340:	bl	115a4 <dcgettext@plt>
   1c344:	movw	r3, #5054	; 0x13be
   1c348:	mov	r2, r0
   1c34c:	mov	r0, r8
   1c350:	mov	r1, #1
   1c354:	movt	r3, #2
   1c358:	bl	1179c <__fprintf_chk@plt>
   1c35c:	mov	r0, r4
   1c360:	mov	r1, r8
   1c364:	bl	114f0 <fputs_unlocked@plt>
   1c368:	cmp	r6, #9
   1c36c:	bhi	1c3a8 <__assert_fail@plt+0xaabc>
   1c370:	add	r0, pc, #0
   1c374:	ldr	pc, [r0, r6, lsl #2]
   1c378:	andeq	ip, r1, r0, lsr #7
   1c37c:			; <UNDEFINED> instruction: 0x0001c3b4
   1c380:	andeq	ip, r1, r4, ror #7
   1c384:	andeq	ip, r1, ip, lsl #8
   1c388:	andeq	ip, r1, r4, lsr r4
   1c38c:	andeq	ip, r1, ip, asr r4
   1c390:	andeq	ip, r1, r4, lsl #9
   1c394:			; <UNDEFINED> instruction: 0x0001c4bc
   1c398:	andeq	ip, r1, r4, ror #10
   1c39c:	andeq	ip, r1, ip, lsl #10
   1c3a0:	sub	sp, fp, #24
   1c3a4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1c3a8:	movw	r1, #5407	; 0x151f
   1c3ac:	movt	r1, #2
   1c3b0:	b	1c514 <__assert_fail@plt+0xac28>
   1c3b4:	movw	r1, #5088	; 0x13e0
   1c3b8:	mov	r0, #0
   1c3bc:	mov	r2, #5
   1c3c0:	movt	r1, #2
   1c3c4:	bl	115a4 <dcgettext@plt>
   1c3c8:	ldr	r3, [r7]
   1c3cc:	mov	r2, r0
   1c3d0:	mov	r0, r8
   1c3d4:	mov	r1, #1
   1c3d8:	sub	sp, fp, #24
   1c3dc:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   1c3e0:	b	1179c <__fprintf_chk@plt>
   1c3e4:	movw	r1, #5104	; 0x13f0
   1c3e8:	mov	r0, #0
   1c3ec:	mov	r2, #5
   1c3f0:	movt	r1, #2
   1c3f4:	bl	115a4 <dcgettext@plt>
   1c3f8:	mov	r2, r0
   1c3fc:	ldr	r3, [r7]
   1c400:	ldr	r0, [r7, #4]
   1c404:	str	r0, [sp]
   1c408:	b	1c4f8 <__assert_fail@plt+0xac0c>
   1c40c:	movw	r1, #5127	; 0x1407
   1c410:	mov	r0, #0
   1c414:	mov	r2, #5
   1c418:	movt	r1, #2
   1c41c:	bl	115a4 <dcgettext@plt>
   1c420:	mov	r2, r0
   1c424:	ldr	r3, [r7]
   1c428:	ldmib	r7, {r0, r1}
   1c42c:	stm	sp, {r0, r1}
   1c430:	b	1c4f8 <__assert_fail@plt+0xac0c>
   1c434:	movw	r1, #5155	; 0x1423
   1c438:	mov	r0, #0
   1c43c:	mov	r2, #5
   1c440:	movt	r1, #2
   1c444:	bl	115a4 <dcgettext@plt>
   1c448:	ldr	r3, [r7]
   1c44c:	mov	r2, r0
   1c450:	ldmib	r7, {r0, r1, r7}
   1c454:	stm	sp, {r0, r1, r7}
   1c458:	b	1c4f8 <__assert_fail@plt+0xac0c>
   1c45c:	movw	r1, #5187	; 0x1443
   1c460:	mov	r0, #0
   1c464:	mov	r2, #5
   1c468:	movt	r1, #2
   1c46c:	bl	115a4 <dcgettext@plt>
   1c470:	ldr	r3, [r7]
   1c474:	mov	r2, r0
   1c478:	ldmib	r7, {r0, r1, r6, r7}
   1c47c:	stm	sp, {r0, r1, r6, r7}
   1c480:	b	1c4f8 <__assert_fail@plt+0xac0c>
   1c484:	movw	r1, #5223	; 0x1467
   1c488:	mov	r0, #0
   1c48c:	mov	r2, #5
   1c490:	movt	r1, #2
   1c494:	bl	115a4 <dcgettext@plt>
   1c498:	mov	r2, r0
   1c49c:	ldr	r3, [r7]
   1c4a0:	ldmib	r7, {r0, r1, r6}
   1c4a4:	ldr	r5, [r7, #16]
   1c4a8:	ldr	r7, [r7, #20]
   1c4ac:	stm	sp, {r0, r1, r6}
   1c4b0:	str	r5, [sp, #12]
   1c4b4:	str	r7, [sp, #16]
   1c4b8:	b	1c4f8 <__assert_fail@plt+0xac0c>
   1c4bc:	movw	r1, #5263	; 0x148f
   1c4c0:	mov	r0, #0
   1c4c4:	mov	r2, #5
   1c4c8:	movt	r1, #2
   1c4cc:	bl	115a4 <dcgettext@plt>
   1c4d0:	mov	r2, r0
   1c4d4:	ldr	r3, [r7]
   1c4d8:	ldmib	r7, {r0, r1, r6}
   1c4dc:	ldr	r5, [r7, #16]
   1c4e0:	ldr	r4, [r7, #20]
   1c4e4:	ldr	r7, [r7, #24]
   1c4e8:	stm	sp, {r0, r1, r6}
   1c4ec:	str	r5, [sp, #12]
   1c4f0:	str	r4, [sp, #16]
   1c4f4:	str	r7, [sp, #20]
   1c4f8:	mov	r0, r8
   1c4fc:	mov	r1, #1
   1c500:	bl	1179c <__fprintf_chk@plt>
   1c504:	sub	sp, fp, #24
   1c508:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1c50c:	movw	r1, #5355	; 0x14eb
   1c510:	movt	r1, #2
   1c514:	mov	r0, #0
   1c518:	mov	r2, #5
   1c51c:	bl	115a4 <dcgettext@plt>
   1c520:	mov	ip, r0
   1c524:	ldr	r3, [r7]
   1c528:	ldr	r0, [r7, #4]
   1c52c:	ldr	r1, [r7, #8]
   1c530:	ldr	r6, [r7, #12]
   1c534:	ldr	r5, [r7, #16]
   1c538:	ldr	r4, [r7, #20]
   1c53c:	ldr	r2, [r7, #24]
   1c540:	ldr	lr, [r7, #28]
   1c544:	ldr	r7, [r7, #32]
   1c548:	stm	sp, {r0, r1, r6}
   1c54c:	str	r5, [sp, #12]
   1c550:	str	r4, [sp, #16]
   1c554:	str	r2, [sp, #20]
   1c558:	str	lr, [sp, #24]
   1c55c:	str	r7, [sp, #28]
   1c560:	b	1c5a8 <__assert_fail@plt+0xacbc>
   1c564:	movw	r1, #5307	; 0x14bb
   1c568:	mov	r0, #0
   1c56c:	mov	r2, #5
   1c570:	movt	r1, #2
   1c574:	bl	115a4 <dcgettext@plt>
   1c578:	mov	ip, r0
   1c57c:	ldr	r3, [r7]
   1c580:	ldmib	r7, {r0, r1, r6}
   1c584:	ldr	r5, [r7, #16]
   1c588:	ldr	r4, [r7, #20]
   1c58c:	ldr	r2, [r7, #24]
   1c590:	ldr	r7, [r7, #28]
   1c594:	stm	sp, {r0, r1, r6}
   1c598:	str	r5, [sp, #12]
   1c59c:	str	r4, [sp, #16]
   1c5a0:	str	r2, [sp, #20]
   1c5a4:	str	r7, [sp, #24]
   1c5a8:	mov	r0, r8
   1c5ac:	mov	r1, #1
   1c5b0:	mov	r2, ip
   1c5b4:	bl	1179c <__fprintf_chk@plt>
   1c5b8:	sub	sp, fp, #24
   1c5bc:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1c5c0:	push	{r4, sl, fp, lr}
   1c5c4:	add	fp, sp, #8
   1c5c8:	sub	sp, sp, #8
   1c5cc:	ldr	ip, [fp, #8]
   1c5d0:	mov	lr, #0
   1c5d4:	ldr	r4, [ip, lr, lsl #2]
   1c5d8:	add	lr, lr, #1
   1c5dc:	cmp	r4, #0
   1c5e0:	bne	1c5d4 <__assert_fail@plt+0xace8>
   1c5e4:	sub	r4, lr, #1
   1c5e8:	str	ip, [sp]
   1c5ec:	str	r4, [sp, #4]
   1c5f0:	bl	1c284 <__assert_fail@plt+0xa998>
   1c5f4:	sub	sp, fp, #8
   1c5f8:	pop	{r4, sl, fp, pc}
   1c5fc:	push	{fp, lr}
   1c600:	mov	fp, sp
   1c604:	sub	sp, sp, #48	; 0x30
   1c608:	ldr	ip, [fp, #8]
   1c60c:	ldr	lr, [ip]
   1c610:	cmp	lr, #0
   1c614:	str	lr, [sp, #8]
   1c618:	beq	1c6b4 <__assert_fail@plt+0xadc8>
   1c61c:	ldr	lr, [ip, #4]
   1c620:	cmp	lr, #0
   1c624:	str	lr, [sp, #12]
   1c628:	beq	1c6bc <__assert_fail@plt+0xadd0>
   1c62c:	ldr	lr, [ip, #8]
   1c630:	cmp	lr, #0
   1c634:	str	lr, [sp, #16]
   1c638:	beq	1c6c4 <__assert_fail@plt+0xadd8>
   1c63c:	ldr	lr, [ip, #12]
   1c640:	cmp	lr, #0
   1c644:	str	lr, [sp, #20]
   1c648:	beq	1c6cc <__assert_fail@plt+0xade0>
   1c64c:	ldr	lr, [ip, #16]
   1c650:	cmp	lr, #0
   1c654:	str	lr, [sp, #24]
   1c658:	beq	1c6d4 <__assert_fail@plt+0xade8>
   1c65c:	ldr	lr, [ip, #20]
   1c660:	cmp	lr, #0
   1c664:	str	lr, [sp, #28]
   1c668:	beq	1c6dc <__assert_fail@plt+0xadf0>
   1c66c:	ldr	lr, [ip, #24]
   1c670:	cmp	lr, #0
   1c674:	str	lr, [sp, #32]
   1c678:	beq	1c6e4 <__assert_fail@plt+0xadf8>
   1c67c:	ldr	lr, [ip, #28]
   1c680:	cmp	lr, #0
   1c684:	str	lr, [sp, #36]	; 0x24
   1c688:	beq	1c6ec <__assert_fail@plt+0xae00>
   1c68c:	ldr	lr, [ip, #32]
   1c690:	cmp	lr, #0
   1c694:	str	lr, [sp, #40]	; 0x28
   1c698:	beq	1c6f4 <__assert_fail@plt+0xae08>
   1c69c:	ldr	lr, [ip, #36]	; 0x24
   1c6a0:	mov	ip, #10
   1c6a4:	cmp	lr, #0
   1c6a8:	str	lr, [sp, #44]	; 0x2c
   1c6ac:	movweq	ip, #9
   1c6b0:	b	1c6f8 <__assert_fail@plt+0xae0c>
   1c6b4:	mov	ip, #0
   1c6b8:	b	1c6f8 <__assert_fail@plt+0xae0c>
   1c6bc:	mov	ip, #1
   1c6c0:	b	1c6f8 <__assert_fail@plt+0xae0c>
   1c6c4:	mov	ip, #2
   1c6c8:	b	1c6f8 <__assert_fail@plt+0xae0c>
   1c6cc:	mov	ip, #3
   1c6d0:	b	1c6f8 <__assert_fail@plt+0xae0c>
   1c6d4:	mov	ip, #4
   1c6d8:	b	1c6f8 <__assert_fail@plt+0xae0c>
   1c6dc:	mov	ip, #5
   1c6e0:	b	1c6f8 <__assert_fail@plt+0xae0c>
   1c6e4:	mov	ip, #6
   1c6e8:	b	1c6f8 <__assert_fail@plt+0xae0c>
   1c6ec:	mov	ip, #7
   1c6f0:	b	1c6f8 <__assert_fail@plt+0xae0c>
   1c6f4:	mov	ip, #8
   1c6f8:	add	lr, sp, #8
   1c6fc:	str	ip, [sp, #4]
   1c700:	str	lr, [sp]
   1c704:	bl	1c284 <__assert_fail@plt+0xa998>
   1c708:	mov	sp, fp
   1c70c:	pop	{fp, pc}
   1c710:	push	{fp, lr}
   1c714:	mov	fp, sp
   1c718:	sub	sp, sp, #56	; 0x38
   1c71c:	add	ip, fp, #8
   1c720:	str	ip, [sp, #12]
   1c724:	ldr	lr, [fp, #8]
   1c728:	cmp	lr, #0
   1c72c:	str	lr, [sp, #16]
   1c730:	beq	1c7cc <__assert_fail@plt+0xaee0>
   1c734:	ldr	lr, [ip, #4]
   1c738:	cmp	lr, #0
   1c73c:	str	lr, [sp, #20]
   1c740:	beq	1c7d4 <__assert_fail@plt+0xaee8>
   1c744:	ldr	lr, [ip, #8]
   1c748:	cmp	lr, #0
   1c74c:	str	lr, [sp, #24]
   1c750:	beq	1c7dc <__assert_fail@plt+0xaef0>
   1c754:	ldr	lr, [ip, #12]
   1c758:	cmp	lr, #0
   1c75c:	str	lr, [sp, #28]
   1c760:	beq	1c7e4 <__assert_fail@plt+0xaef8>
   1c764:	ldr	lr, [ip, #16]
   1c768:	cmp	lr, #0
   1c76c:	str	lr, [sp, #32]
   1c770:	beq	1c7ec <__assert_fail@plt+0xaf00>
   1c774:	ldr	lr, [ip, #20]
   1c778:	cmp	lr, #0
   1c77c:	str	lr, [sp, #36]	; 0x24
   1c780:	beq	1c7f4 <__assert_fail@plt+0xaf08>
   1c784:	ldr	lr, [ip, #24]
   1c788:	cmp	lr, #0
   1c78c:	str	lr, [sp, #40]	; 0x28
   1c790:	beq	1c7fc <__assert_fail@plt+0xaf10>
   1c794:	ldr	lr, [ip, #28]
   1c798:	cmp	lr, #0
   1c79c:	str	lr, [sp, #44]	; 0x2c
   1c7a0:	beq	1c804 <__assert_fail@plt+0xaf18>
   1c7a4:	ldr	lr, [ip, #32]
   1c7a8:	cmp	lr, #0
   1c7ac:	str	lr, [sp, #48]	; 0x30
   1c7b0:	beq	1c80c <__assert_fail@plt+0xaf20>
   1c7b4:	ldr	lr, [ip, #36]	; 0x24
   1c7b8:	mov	ip, #10
   1c7bc:	cmp	lr, #0
   1c7c0:	str	lr, [sp, #52]	; 0x34
   1c7c4:	movweq	ip, #9
   1c7c8:	b	1c810 <__assert_fail@plt+0xaf24>
   1c7cc:	mov	ip, #0
   1c7d0:	b	1c810 <__assert_fail@plt+0xaf24>
   1c7d4:	mov	ip, #1
   1c7d8:	b	1c810 <__assert_fail@plt+0xaf24>
   1c7dc:	mov	ip, #2
   1c7e0:	b	1c810 <__assert_fail@plt+0xaf24>
   1c7e4:	mov	ip, #3
   1c7e8:	b	1c810 <__assert_fail@plt+0xaf24>
   1c7ec:	mov	ip, #4
   1c7f0:	b	1c810 <__assert_fail@plt+0xaf24>
   1c7f4:	mov	ip, #5
   1c7f8:	b	1c810 <__assert_fail@plt+0xaf24>
   1c7fc:	mov	ip, #6
   1c800:	b	1c810 <__assert_fail@plt+0xaf24>
   1c804:	mov	ip, #7
   1c808:	b	1c810 <__assert_fail@plt+0xaf24>
   1c80c:	mov	ip, #8
   1c810:	add	lr, sp, #16
   1c814:	str	ip, [sp, #4]
   1c818:	str	lr, [sp]
   1c81c:	bl	1c284 <__assert_fail@plt+0xa998>
   1c820:	mov	sp, fp
   1c824:	pop	{fp, pc}
   1c828:	push	{fp, lr}
   1c82c:	mov	fp, sp
   1c830:	movw	r0, #9012	; 0x2334
   1c834:	movt	r0, #3
   1c838:	ldr	r1, [r0]
   1c83c:	movw	r0, #2822	; 0xb06
   1c840:	movt	r0, #2
   1c844:	bl	114f0 <fputs_unlocked@plt>
   1c848:	movw	r1, #5467	; 0x155b
   1c84c:	mov	r0, #0
   1c850:	mov	r2, #5
   1c854:	movt	r1, #2
   1c858:	bl	115a4 <dcgettext@plt>
   1c85c:	movw	r2, #5487	; 0x156f
   1c860:	mov	r1, r0
   1c864:	mov	r0, #1
   1c868:	movt	r2, #2
   1c86c:	bl	11778 <__printf_chk@plt>
   1c870:	movw	r1, #5509	; 0x1585
   1c874:	mov	r0, #0
   1c878:	mov	r2, #5
   1c87c:	movt	r1, #2
   1c880:	bl	115a4 <dcgettext@plt>
   1c884:	movw	r2, #1783	; 0x6f7
   1c888:	movw	r3, #2631	; 0xa47
   1c88c:	mov	r1, r0
   1c890:	mov	r0, #1
   1c894:	movt	r2, #2
   1c898:	movt	r3, #2
   1c89c:	bl	11778 <__printf_chk@plt>
   1c8a0:	movw	r1, #5529	; 0x1599
   1c8a4:	mov	r0, #0
   1c8a8:	mov	r2, #5
   1c8ac:	movt	r1, #2
   1c8b0:	bl	115a4 <dcgettext@plt>
   1c8b4:	movw	r2, #5568	; 0x15c0
   1c8b8:	mov	r1, r0
   1c8bc:	mov	r0, #1
   1c8c0:	movt	r2, #2
   1c8c4:	pop	{fp, lr}
   1c8c8:	b	11778 <__printf_chk@plt>
   1c8cc:	push	{r4, r5, r6, sl, fp, lr}
   1c8d0:	add	fp, sp, #16
   1c8d4:	mov	r4, r2
   1c8d8:	mov	r5, r1
   1c8dc:	mov	r6, r0
   1c8e0:	bl	1f68c <__assert_fail@plt+0xdda0>
   1c8e4:	cmp	r0, #0
   1c8e8:	popne	{r4, r5, r6, sl, fp, pc}
   1c8ec:	cmp	r6, #0
   1c8f0:	beq	1c904 <__assert_fail@plt+0xb018>
   1c8f4:	cmp	r5, #0
   1c8f8:	cmpne	r4, #0
   1c8fc:	bne	1c904 <__assert_fail@plt+0xb018>
   1c900:	pop	{r4, r5, r6, sl, fp, pc}
   1c904:	bl	1ce80 <__assert_fail@plt+0xb594>
   1c908:	push	{r4, r5, r6, sl, fp, lr}
   1c90c:	add	fp, sp, #16
   1c910:	mov	r4, r2
   1c914:	mov	r5, r1
   1c918:	mov	r6, r0
   1c91c:	bl	1f68c <__assert_fail@plt+0xdda0>
   1c920:	cmp	r0, #0
   1c924:	popne	{r4, r5, r6, sl, fp, pc}
   1c928:	cmp	r6, #0
   1c92c:	beq	1c940 <__assert_fail@plt+0xb054>
   1c930:	cmp	r5, #0
   1c934:	cmpne	r4, #0
   1c938:	bne	1c940 <__assert_fail@plt+0xb054>
   1c93c:	pop	{r4, r5, r6, sl, fp, pc}
   1c940:	bl	1ce80 <__assert_fail@plt+0xb594>
   1c944:	push	{fp, lr}
   1c948:	mov	fp, sp
   1c94c:	bl	1dccc <__assert_fail@plt+0xc3e0>
   1c950:	cmp	r0, #0
   1c954:	popne	{fp, pc}
   1c958:	bl	1ce80 <__assert_fail@plt+0xb594>
   1c95c:	push	{fp, lr}
   1c960:	mov	fp, sp
   1c964:	bl	1dccc <__assert_fail@plt+0xc3e0>
   1c968:	cmp	r0, #0
   1c96c:	popne	{fp, pc}
   1c970:	bl	1ce80 <__assert_fail@plt+0xb594>
   1c974:	push	{fp, lr}
   1c978:	mov	fp, sp
   1c97c:	bl	1dccc <__assert_fail@plt+0xc3e0>
   1c980:	cmp	r0, #0
   1c984:	popne	{fp, pc}
   1c988:	bl	1ce80 <__assert_fail@plt+0xb594>
   1c98c:	push	{r4, r5, fp, lr}
   1c990:	add	fp, sp, #8
   1c994:	mov	r4, r1
   1c998:	mov	r5, r0
   1c99c:	bl	1dcfc <__assert_fail@plt+0xc410>
   1c9a0:	cmp	r0, #0
   1c9a4:	popne	{r4, r5, fp, pc}
   1c9a8:	cmp	r5, #0
   1c9ac:	beq	1c9bc <__assert_fail@plt+0xb0d0>
   1c9b0:	cmp	r4, #0
   1c9b4:	bne	1c9bc <__assert_fail@plt+0xb0d0>
   1c9b8:	pop	{r4, r5, fp, pc}
   1c9bc:	bl	1ce80 <__assert_fail@plt+0xb594>
   1c9c0:	push	{fp, lr}
   1c9c4:	mov	fp, sp
   1c9c8:	cmp	r1, #0
   1c9cc:	orreq	r1, r1, #1
   1c9d0:	bl	1dcfc <__assert_fail@plt+0xc410>
   1c9d4:	cmp	r0, #0
   1c9d8:	popne	{fp, pc}
   1c9dc:	bl	1ce80 <__assert_fail@plt+0xb594>
   1c9e0:	push	{fp, lr}
   1c9e4:	mov	fp, sp
   1c9e8:	clz	r3, r2
   1c9ec:	lsr	ip, r3, #5
   1c9f0:	clz	r3, r1
   1c9f4:	lsr	r3, r3, #5
   1c9f8:	orrs	r3, r3, ip
   1c9fc:	movwne	r1, #1
   1ca00:	movwne	r2, #1
   1ca04:	bl	1f68c <__assert_fail@plt+0xdda0>
   1ca08:	cmp	r0, #0
   1ca0c:	popne	{fp, pc}
   1ca10:	bl	1ce80 <__assert_fail@plt+0xb594>
   1ca14:	push	{fp, lr}
   1ca18:	mov	fp, sp
   1ca1c:	mov	r2, r1
   1ca20:	mov	r1, r0
   1ca24:	mov	r0, #0
   1ca28:	bl	1f68c <__assert_fail@plt+0xdda0>
   1ca2c:	cmp	r0, #0
   1ca30:	popne	{fp, pc}
   1ca34:	bl	1ce80 <__assert_fail@plt+0xb594>
   1ca38:	push	{fp, lr}
   1ca3c:	mov	fp, sp
   1ca40:	mov	r2, r1
   1ca44:	mov	r1, r0
   1ca48:	clz	r0, r2
   1ca4c:	clz	r3, r1
   1ca50:	lsr	r0, r0, #5
   1ca54:	lsr	r3, r3, #5
   1ca58:	orrs	r0, r3, r0
   1ca5c:	mov	r0, #0
   1ca60:	movwne	r1, #1
   1ca64:	movwne	r2, #1
   1ca68:	bl	1f68c <__assert_fail@plt+0xdda0>
   1ca6c:	cmp	r0, #0
   1ca70:	popne	{fp, pc}
   1ca74:	bl	1ce80 <__assert_fail@plt+0xb594>
   1ca78:	push	{r4, r5, r6, sl, fp, lr}
   1ca7c:	add	fp, sp, #16
   1ca80:	ldr	r5, [r1]
   1ca84:	mov	r4, r1
   1ca88:	mov	r6, r0
   1ca8c:	cmp	r0, #0
   1ca90:	beq	1caa8 <__assert_fail@plt+0xb1bc>
   1ca94:	mov	r0, #1
   1ca98:	add	r0, r0, r5, lsr #1
   1ca9c:	adds	r5, r5, r0
   1caa0:	bcc	1cab0 <__assert_fail@plt+0xb1c4>
   1caa4:	b	1caec <__assert_fail@plt+0xb200>
   1caa8:	cmp	r5, #0
   1caac:	movweq	r5, #64	; 0x40
   1cab0:	mov	r0, r6
   1cab4:	mov	r1, r5
   1cab8:	mov	r2, #1
   1cabc:	bl	1f68c <__assert_fail@plt+0xdda0>
   1cac0:	cmp	r5, #0
   1cac4:	mov	r1, r5
   1cac8:	movwne	r1, #1
   1cacc:	cmp	r0, #0
   1cad0:	bne	1cae4 <__assert_fail@plt+0xb1f8>
   1cad4:	clz	r2, r6
   1cad8:	lsr	r2, r2, #5
   1cadc:	orrs	r1, r2, r1
   1cae0:	bne	1caec <__assert_fail@plt+0xb200>
   1cae4:	str	r5, [r4]
   1cae8:	pop	{r4, r5, r6, sl, fp, pc}
   1caec:	bl	1ce80 <__assert_fail@plt+0xb594>
   1caf0:	push	{r4, r5, r6, r7, fp, lr}
   1caf4:	add	fp, sp, #16
   1caf8:	ldr	r5, [r1]
   1cafc:	mov	r6, r2
   1cb00:	mov	r4, r1
   1cb04:	mov	r7, r0
   1cb08:	cmp	r0, #0
   1cb0c:	beq	1cb24 <__assert_fail@plt+0xb238>
   1cb10:	mov	r0, #1
   1cb14:	add	r0, r0, r5, lsr #1
   1cb18:	adds	r5, r5, r0
   1cb1c:	bcc	1cb3c <__assert_fail@plt+0xb250>
   1cb20:	b	1cb70 <__assert_fail@plt+0xb284>
   1cb24:	cmp	r5, #0
   1cb28:	bne	1cb3c <__assert_fail@plt+0xb250>
   1cb2c:	mov	r0, #64	; 0x40
   1cb30:	cmp	r6, #64	; 0x40
   1cb34:	udiv	r5, r0, r6
   1cb38:	addhi	r5, r5, #1
   1cb3c:	mov	r0, r7
   1cb40:	mov	r1, r5
   1cb44:	mov	r2, r6
   1cb48:	bl	1f68c <__assert_fail@plt+0xdda0>
   1cb4c:	cmp	r0, #0
   1cb50:	bne	1cb68 <__assert_fail@plt+0xb27c>
   1cb54:	cmp	r7, #0
   1cb58:	beq	1cb70 <__assert_fail@plt+0xb284>
   1cb5c:	cmp	r6, #0
   1cb60:	cmpne	r5, #0
   1cb64:	bne	1cb70 <__assert_fail@plt+0xb284>
   1cb68:	str	r5, [r4]
   1cb6c:	pop	{r4, r5, r6, r7, fp, pc}
   1cb70:	bl	1ce80 <__assert_fail@plt+0xb594>
   1cb74:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1cb78:	add	fp, sp, #24
   1cb7c:	mov	r8, r1
   1cb80:	ldr	r1, [r1]
   1cb84:	mov	r5, r0
   1cb88:	add	r0, r1, r1, asr #1
   1cb8c:	cmp	r0, r1
   1cb90:	mvnvs	r0, #-2147483648	; 0x80000000
   1cb94:	cmp	r0, r3
   1cb98:	mov	r7, r0
   1cb9c:	movgt	r7, r3
   1cba0:	cmn	r3, #1
   1cba4:	movle	r7, r0
   1cba8:	ldr	r0, [fp, #8]
   1cbac:	cmn	r0, #1
   1cbb0:	ble	1cbd8 <__assert_fail@plt+0xb2ec>
   1cbb4:	cmp	r0, #0
   1cbb8:	beq	1cc2c <__assert_fail@plt+0xb340>
   1cbbc:	cmn	r7, #1
   1cbc0:	ble	1cc00 <__assert_fail@plt+0xb314>
   1cbc4:	mvn	r4, #-2147483648	; 0x80000000
   1cbc8:	udiv	r6, r4, r0
   1cbcc:	cmp	r6, r7
   1cbd0:	bge	1cc2c <__assert_fail@plt+0xb340>
   1cbd4:	b	1cc3c <__assert_fail@plt+0xb350>
   1cbd8:	cmn	r7, #1
   1cbdc:	ble	1cc1c <__assert_fail@plt+0xb330>
   1cbe0:	cmn	r0, #1
   1cbe4:	beq	1cc2c <__assert_fail@plt+0xb340>
   1cbe8:	mov	r6, #-2147483648	; 0x80000000
   1cbec:	mvn	r4, #-2147483648	; 0x80000000
   1cbf0:	sdiv	r6, r6, r0
   1cbf4:	cmp	r6, r7
   1cbf8:	bge	1cc2c <__assert_fail@plt+0xb340>
   1cbfc:	b	1cc3c <__assert_fail@plt+0xb350>
   1cc00:	beq	1cc2c <__assert_fail@plt+0xb340>
   1cc04:	mov	r6, #-2147483648	; 0x80000000
   1cc08:	mvn	r4, #-2147483648	; 0x80000000
   1cc0c:	sdiv	r6, r6, r7
   1cc10:	cmp	r6, r0
   1cc14:	bge	1cc2c <__assert_fail@plt+0xb340>
   1cc18:	b	1cc3c <__assert_fail@plt+0xb350>
   1cc1c:	mvn	r4, #-2147483648	; 0x80000000
   1cc20:	sdiv	r6, r4, r0
   1cc24:	cmp	r7, r6
   1cc28:	blt	1cc3c <__assert_fail@plt+0xb350>
   1cc2c:	mul	r6, r7, r0
   1cc30:	mov	r4, #64	; 0x40
   1cc34:	cmp	r6, #63	; 0x3f
   1cc38:	bgt	1cc44 <__assert_fail@plt+0xb358>
   1cc3c:	sdiv	r7, r4, r0
   1cc40:	mul	r6, r7, r0
   1cc44:	cmp	r5, #0
   1cc48:	moveq	r4, #0
   1cc4c:	streq	r4, [r8]
   1cc50:	sub	r4, r7, r1
   1cc54:	cmp	r4, r2
   1cc58:	bge	1cd04 <__assert_fail@plt+0xb418>
   1cc5c:	add	r7, r1, r2
   1cc60:	mov	r6, #0
   1cc64:	mov	r2, #0
   1cc68:	cmp	r7, r3
   1cc6c:	movwgt	r6, #1
   1cc70:	cmn	r3, #1
   1cc74:	movwgt	r2, #1
   1cc78:	cmp	r7, r1
   1cc7c:	bvs	1cd38 <__assert_fail@plt+0xb44c>
   1cc80:	ands	r1, r2, r6
   1cc84:	bne	1cd38 <__assert_fail@plt+0xb44c>
   1cc88:	cmn	r0, #1
   1cc8c:	ble	1ccb4 <__assert_fail@plt+0xb3c8>
   1cc90:	cmp	r0, #0
   1cc94:	beq	1cd00 <__assert_fail@plt+0xb414>
   1cc98:	cmn	r7, #1
   1cc9c:	ble	1ccd8 <__assert_fail@plt+0xb3ec>
   1cca0:	mvn	r1, #-2147483648	; 0x80000000
   1cca4:	udiv	r1, r1, r0
   1cca8:	cmp	r1, r7
   1ccac:	bge	1cd00 <__assert_fail@plt+0xb414>
   1ccb0:	b	1cd38 <__assert_fail@plt+0xb44c>
   1ccb4:	cmn	r7, #1
   1ccb8:	ble	1ccf0 <__assert_fail@plt+0xb404>
   1ccbc:	cmn	r0, #1
   1ccc0:	beq	1cd00 <__assert_fail@plt+0xb414>
   1ccc4:	mov	r1, #-2147483648	; 0x80000000
   1ccc8:	sdiv	r1, r1, r0
   1cccc:	cmp	r1, r7
   1ccd0:	bge	1cd00 <__assert_fail@plt+0xb414>
   1ccd4:	b	1cd38 <__assert_fail@plt+0xb44c>
   1ccd8:	beq	1cd00 <__assert_fail@plt+0xb414>
   1ccdc:	mov	r1, #-2147483648	; 0x80000000
   1cce0:	sdiv	r1, r1, r7
   1cce4:	cmp	r1, r0
   1cce8:	bge	1cd00 <__assert_fail@plt+0xb414>
   1ccec:	b	1cd38 <__assert_fail@plt+0xb44c>
   1ccf0:	mvn	r1, #-2147483648	; 0x80000000
   1ccf4:	sdiv	r1, r1, r0
   1ccf8:	cmp	r7, r1
   1ccfc:	blt	1cd38 <__assert_fail@plt+0xb44c>
   1cd00:	mul	r6, r7, r0
   1cd04:	mov	r0, r5
   1cd08:	mov	r1, r6
   1cd0c:	bl	1dcfc <__assert_fail@plt+0xc410>
   1cd10:	cmp	r6, #0
   1cd14:	movwne	r6, #1
   1cd18:	cmp	r0, #0
   1cd1c:	bne	1cd30 <__assert_fail@plt+0xb444>
   1cd20:	clz	r1, r5
   1cd24:	lsr	r1, r1, #5
   1cd28:	orrs	r1, r1, r6
   1cd2c:	bne	1cd38 <__assert_fail@plt+0xb44c>
   1cd30:	str	r7, [r8]
   1cd34:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1cd38:	bl	1ce80 <__assert_fail@plt+0xb594>
   1cd3c:	push	{fp, lr}
   1cd40:	mov	fp, sp
   1cd44:	mov	r1, #1
   1cd48:	bl	1dc78 <__assert_fail@plt+0xc38c>
   1cd4c:	cmp	r0, #0
   1cd50:	popne	{fp, pc}
   1cd54:	bl	1ce80 <__assert_fail@plt+0xb594>
   1cd58:	push	{fp, lr}
   1cd5c:	mov	fp, sp
   1cd60:	bl	1dc78 <__assert_fail@plt+0xc38c>
   1cd64:	cmp	r0, #0
   1cd68:	popne	{fp, pc}
   1cd6c:	bl	1ce80 <__assert_fail@plt+0xb594>
   1cd70:	push	{fp, lr}
   1cd74:	mov	fp, sp
   1cd78:	mov	r1, #1
   1cd7c:	bl	1dc78 <__assert_fail@plt+0xc38c>
   1cd80:	cmp	r0, #0
   1cd84:	popne	{fp, pc}
   1cd88:	bl	1ce80 <__assert_fail@plt+0xb594>
   1cd8c:	push	{fp, lr}
   1cd90:	mov	fp, sp
   1cd94:	bl	1dc78 <__assert_fail@plt+0xc38c>
   1cd98:	cmp	r0, #0
   1cd9c:	popne	{fp, pc}
   1cda0:	bl	1ce80 <__assert_fail@plt+0xb594>
   1cda4:	push	{r4, r5, fp, lr}
   1cda8:	add	fp, sp, #8
   1cdac:	mov	r5, r0
   1cdb0:	mov	r0, r1
   1cdb4:	mov	r4, r1
   1cdb8:	bl	1dccc <__assert_fail@plt+0xc3e0>
   1cdbc:	cmp	r0, #0
   1cdc0:	beq	1cdd4 <__assert_fail@plt+0xb4e8>
   1cdc4:	mov	r1, r5
   1cdc8:	mov	r2, r4
   1cdcc:	pop	{r4, r5, fp, lr}
   1cdd0:	b	11574 <memcpy@plt>
   1cdd4:	bl	1ce80 <__assert_fail@plt+0xb594>
   1cdd8:	push	{r4, r5, fp, lr}
   1cddc:	add	fp, sp, #8
   1cde0:	mov	r5, r0
   1cde4:	mov	r0, r1
   1cde8:	mov	r4, r1
   1cdec:	bl	1dccc <__assert_fail@plt+0xc3e0>
   1cdf0:	cmp	r0, #0
   1cdf4:	beq	1ce08 <__assert_fail@plt+0xb51c>
   1cdf8:	mov	r1, r5
   1cdfc:	mov	r2, r4
   1ce00:	pop	{r4, r5, fp, lr}
   1ce04:	b	11574 <memcpy@plt>
   1ce08:	bl	1ce80 <__assert_fail@plt+0xb594>
   1ce0c:	push	{r4, r5, fp, lr}
   1ce10:	add	fp, sp, #8
   1ce14:	mov	r5, r0
   1ce18:	add	r0, r1, #1
   1ce1c:	mov	r4, r1
   1ce20:	bl	1dccc <__assert_fail@plt+0xc3e0>
   1ce24:	cmp	r0, #0
   1ce28:	beq	1ce44 <__assert_fail@plt+0xb558>
   1ce2c:	mov	r1, #0
   1ce30:	mov	r2, r4
   1ce34:	strb	r1, [r0, r4]
   1ce38:	mov	r1, r5
   1ce3c:	pop	{r4, r5, fp, lr}
   1ce40:	b	11574 <memcpy@plt>
   1ce44:	bl	1ce80 <__assert_fail@plt+0xb594>
   1ce48:	push	{r4, r5, fp, lr}
   1ce4c:	add	fp, sp, #8
   1ce50:	mov	r4, r0
   1ce54:	bl	11718 <strlen@plt>
   1ce58:	add	r5, r0, #1
   1ce5c:	mov	r0, r5
   1ce60:	bl	1dccc <__assert_fail@plt+0xc3e0>
   1ce64:	cmp	r0, #0
   1ce68:	beq	1ce7c <__assert_fail@plt+0xb590>
   1ce6c:	mov	r1, r4
   1ce70:	mov	r2, r5
   1ce74:	pop	{r4, r5, fp, lr}
   1ce78:	b	11574 <memcpy@plt>
   1ce7c:	bl	1ce80 <__assert_fail@plt+0xb594>
   1ce80:	push	{fp, lr}
   1ce84:	mov	fp, sp
   1ce88:	movw	r0, #8912	; 0x22d0
   1ce8c:	movw	r1, #5644	; 0x160c
   1ce90:	mov	r2, #5
   1ce94:	movt	r0, #3
   1ce98:	movt	r1, #2
   1ce9c:	ldr	r4, [r0]
   1cea0:	mov	r0, #0
   1cea4:	bl	115a4 <dcgettext@plt>
   1cea8:	movw	r2, #5996	; 0x176c
   1ceac:	mov	r3, r0
   1ceb0:	mov	r0, r4
   1ceb4:	mov	r1, #0
   1ceb8:	movt	r2, #2
   1cebc:	bl	11670 <error@plt>
   1cec0:	bl	118bc <abort@plt>
   1cec4:	push	{r4, sl, fp, lr}
   1cec8:	add	fp, sp, #8
   1cecc:	mov	r0, #0
   1ced0:	mov	r1, #0
   1ced4:	bl	116f4 <getcwd@plt>
   1ced8:	mov	r4, r0
   1cedc:	cmp	r0, #0
   1cee0:	bne	1cef4 <__assert_fail@plt+0xb608>
   1cee4:	bl	11748 <__errno_location@plt>
   1cee8:	ldr	r0, [r0]
   1ceec:	cmp	r0, #12
   1cef0:	beq	1cefc <__assert_fail@plt+0xb610>
   1cef4:	mov	r0, r4
   1cef8:	pop	{r4, sl, fp, pc}
   1cefc:	bl	1ce80 <__assert_fail@plt+0xb594>
   1cf00:	push	{fp, lr}
   1cf04:	mov	fp, sp
   1cf08:	sub	sp, sp, #8
   1cf0c:	movw	ip, #8912	; 0x22d0
   1cf10:	movt	ip, #3
   1cf14:	ldr	ip, [ip]
   1cf18:	str	ip, [sp, #4]
   1cf1c:	ldr	ip, [fp, #8]
   1cf20:	str	ip, [sp]
   1cf24:	bl	1cf2c <__assert_fail@plt+0xb640>
   1cf28:	bl	118bc <abort@plt>
   1cf2c:	push	{r4, r5, r6, r7, fp, lr}
   1cf30:	add	fp, sp, #16
   1cf34:	sub	sp, sp, #16
   1cf38:	sub	r0, r0, #1
   1cf3c:	cmp	r0, #4
   1cf40:	bcs	1cfc0 <__assert_fail@plt+0xb6d4>
   1cf44:	mov	r5, r1
   1cf48:	movw	r1, #5760	; 0x1680
   1cf4c:	ldr	r4, [fp, #12]
   1cf50:	ldr	r6, [fp, #8]
   1cf54:	movt	r1, #2
   1cf58:	cmn	r5, #1
   1cf5c:	ldr	r1, [r1, r0, lsl #2]
   1cf60:	ble	1cf74 <__assert_fail@plt+0xb688>
   1cf64:	ldr	r7, [r3, r5, lsl #4]
   1cf68:	movw	r5, #5661	; 0x161d
   1cf6c:	movt	r5, #2
   1cf70:	b	1cf90 <__assert_fail@plt+0xb6a4>
   1cf74:	mov	r0, #0
   1cf78:	add	r7, sp, #14
   1cf7c:	strb	r0, [sp, #15]
   1cf80:	movw	r0, #5661	; 0x161d
   1cf84:	strb	r2, [sp, #14]
   1cf88:	movt	r0, #2
   1cf8c:	sub	r5, r0, r5
   1cf90:	mov	r0, #0
   1cf94:	mov	r2, #5
   1cf98:	bl	115a4 <dcgettext@plt>
   1cf9c:	mov	r2, r0
   1cfa0:	mov	r0, r4
   1cfa4:	mov	r1, #0
   1cfa8:	mov	r3, r5
   1cfac:	str	r7, [sp]
   1cfb0:	str	r6, [sp, #4]
   1cfb4:	bl	11670 <error@plt>
   1cfb8:	sub	sp, fp, #16
   1cfbc:	pop	{r4, r5, r6, r7, fp, pc}
   1cfc0:	bl	118bc <abort@plt>
   1cfc4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1cfc8:	add	fp, sp, #28
   1cfcc:	sub	sp, sp, #44	; 0x2c
   1cfd0:	cmp	r2, #37	; 0x25
   1cfd4:	bcs	1dc58 <__assert_fail@plt+0xc36c>
   1cfd8:	ldr	sl, [fp, #8]
   1cfdc:	mov	r6, r2
   1cfe0:	mov	r7, r1
   1cfe4:	mov	r4, r0
   1cfe8:	str	r3, [sp, #36]	; 0x24
   1cfec:	bl	11748 <__errno_location@plt>
   1cff0:	mov	r5, r0
   1cff4:	mov	r0, #0
   1cff8:	str	r0, [r5]
   1cffc:	bl	116e8 <__ctype_b_loc@plt>
   1d000:	ldr	r1, [r0]
   1d004:	mov	r2, r4
   1d008:	ldrb	r0, [r2], #1
   1d00c:	add	r3, r1, r0, lsl #1
   1d010:	ldrb	r3, [r3, #1]
   1d014:	tst	r3, #32
   1d018:	bne	1d008 <__assert_fail@plt+0xb71c>
   1d01c:	cmp	r7, #0
   1d020:	sub	r9, fp, #32
   1d024:	mov	r8, #4
   1d028:	movne	r9, r7
   1d02c:	cmp	r0, #45	; 0x2d
   1d030:	beq	1d3f0 <__assert_fail@plt+0xbb04>
   1d034:	mov	r0, r4
   1d038:	mov	r1, r9
   1d03c:	mov	r2, r6
   1d040:	mov	r3, #0
   1d044:	bl	11580 <__strtoull_internal@plt>
   1d048:	mov	r7, r1
   1d04c:	ldr	r1, [r9]
   1d050:	cmp	r1, r4
   1d054:	beq	1d08c <__assert_fail@plt+0xb7a0>
   1d058:	mov	r6, r0
   1d05c:	ldr	r0, [r5]
   1d060:	cmp	r0, #0
   1d064:	beq	1d3a8 <__assert_fail@plt+0xbabc>
   1d068:	cmp	r0, #34	; 0x22
   1d06c:	bne	1d3f0 <__assert_fail@plt+0xbb04>
   1d070:	mov	r8, #1
   1d074:	cmp	sl, #0
   1d078:	beq	1dc44 <__assert_fail@plt+0xc358>
   1d07c:	ldrb	r4, [r1]
   1d080:	cmp	r4, #0
   1d084:	bne	1d0d0 <__assert_fail@plt+0xb7e4>
   1d088:	b	1dc44 <__assert_fail@plt+0xc358>
   1d08c:	cmp	sl, #0
   1d090:	beq	1d3f0 <__assert_fail@plt+0xbb04>
   1d094:	mov	r5, r1
   1d098:	ldrb	r1, [r4]
   1d09c:	cmp	r1, #0
   1d0a0:	beq	1d3f0 <__assert_fail@plt+0xbb04>
   1d0a4:	mov	r0, sl
   1d0a8:	bl	11724 <strchr@plt>
   1d0ac:	cmp	r0, #0
   1d0b0:	beq	1d3f0 <__assert_fail@plt+0xbb04>
   1d0b4:	mov	r1, r5
   1d0b8:	mov	r8, #0
   1d0bc:	mov	r6, #1
   1d0c0:	mov	r7, #0
   1d0c4:	ldrb	r4, [r1]
   1d0c8:	cmp	r4, #0
   1d0cc:	beq	1dc44 <__assert_fail@plt+0xc358>
   1d0d0:	str	r1, [sp, #32]
   1d0d4:	mov	r0, sl
   1d0d8:	mov	r1, r4
   1d0dc:	bl	11724 <strchr@plt>
   1d0e0:	cmp	r0, #0
   1d0e4:	beq	1d3e4 <__assert_fail@plt+0xbaf8>
   1d0e8:	sub	r0, r4, #69	; 0x45
   1d0ec:	mov	r1, #1
   1d0f0:	mov	r3, #0
   1d0f4:	mov	r5, #1024	; 0x400
   1d0f8:	cmp	r0, #47	; 0x2f
   1d0fc:	str	r1, [sp, #28]
   1d100:	bhi	1d204 <__assert_fail@plt+0xb918>
   1d104:	add	r1, pc, #0
   1d108:	ldr	pc, [r1, r0, lsl #2]
   1d10c:	andeq	sp, r1, ip, asr #3
   1d110:	andeq	sp, r1, r4, lsl #4
   1d114:	andeq	sp, r1, ip, asr #3
   1d118:	andeq	sp, r1, r4, lsl #4
   1d11c:	andeq	sp, r1, r4, lsl #4
   1d120:	andeq	sp, r1, r4, lsl #4
   1d124:	andeq	sp, r1, ip, asr #3
   1d128:	andeq	sp, r1, r4, lsl #4
   1d12c:	andeq	sp, r1, ip, asr #3
   1d130:	andeq	sp, r1, r4, lsl #4
   1d134:	andeq	sp, r1, r4, lsl #4
   1d138:	andeq	sp, r1, ip, asr #3
   1d13c:	andeq	sp, r1, r4, lsl #4
   1d140:	andeq	sp, r1, r4, lsl #4
   1d144:	andeq	sp, r1, r4, lsl #4
   1d148:	andeq	sp, r1, ip, asr #3
   1d14c:	andeq	sp, r1, r4, lsl #4
   1d150:	andeq	sp, r1, r4, lsl #4
   1d154:	andeq	sp, r1, r4, lsl #4
   1d158:	andeq	sp, r1, r4, lsl #4
   1d15c:	andeq	sp, r1, ip, asr #3
   1d160:	andeq	sp, r1, ip, asr #3
   1d164:	andeq	sp, r1, r4, lsl #4
   1d168:	andeq	sp, r1, r4, lsl #4
   1d16c:	andeq	sp, r1, r4, lsl #4
   1d170:	andeq	sp, r1, r4, lsl #4
   1d174:	andeq	sp, r1, r4, lsl #4
   1d178:	andeq	sp, r1, r4, lsl #4
   1d17c:	andeq	sp, r1, r4, lsl #4
   1d180:	andeq	sp, r1, r4, lsl #4
   1d184:	andeq	sp, r1, r4, lsl #4
   1d188:	andeq	sp, r1, r4, lsl #4
   1d18c:	andeq	sp, r1, r4, lsl #4
   1d190:	andeq	sp, r1, r4, lsl #4
   1d194:	andeq	sp, r1, ip, asr #3
   1d198:	andeq	sp, r1, r4, lsl #4
   1d19c:	andeq	sp, r1, r4, lsl #4
   1d1a0:	andeq	sp, r1, r4, lsl #4
   1d1a4:	andeq	sp, r1, ip, asr #3
   1d1a8:	andeq	sp, r1, r4, lsl #4
   1d1ac:	andeq	sp, r1, ip, asr #3
   1d1b0:	andeq	sp, r1, r4, lsl #4
   1d1b4:	andeq	sp, r1, r4, lsl #4
   1d1b8:	andeq	sp, r1, r4, lsl #4
   1d1bc:	andeq	sp, r1, r4, lsl #4
   1d1c0:	andeq	sp, r1, r4, lsl #4
   1d1c4:	andeq	sp, r1, r4, lsl #4
   1d1c8:	andeq	sp, r1, ip, asr #3
   1d1cc:	mov	r0, sl
   1d1d0:	mov	r1, #48	; 0x30
   1d1d4:	bl	11724 <strchr@plt>
   1d1d8:	cmp	r0, #0
   1d1dc:	beq	1d200 <__assert_fail@plt+0xb914>
   1d1e0:	ldr	r1, [sp, #32]
   1d1e4:	ldrb	r0, [r1, #1]
   1d1e8:	cmp	r0, #66	; 0x42
   1d1ec:	cmpne	r0, #68	; 0x44
   1d1f0:	bne	1d3b8 <__assert_fail@plt+0xbacc>
   1d1f4:	mov	r5, #1000	; 0x3e8
   1d1f8:	mov	r0, #2
   1d1fc:	str	r0, [sp, #28]
   1d200:	mov	r3, #0
   1d204:	sub	r0, r4, #66	; 0x42
   1d208:	cmp	r0, #53	; 0x35
   1d20c:	bhi	1d3e4 <__assert_fail@plt+0xbaf8>
   1d210:	add	r1, pc, #0
   1d214:	ldr	pc, [r1, r0, lsl #2]
   1d218:	andeq	sp, r1, r4, asr r7
   1d21c:	andeq	sp, r1, r4, ror #7
   1d220:	andeq	sp, r1, r4, ror #7
   1d224:	andeq	sp, r1, ip, ror r7
   1d228:	andeq	sp, r1, r4, ror #7
   1d22c:	strdeq	sp, [r1], -r0
   1d230:	andeq	sp, r1, r4, ror #7
   1d234:	andeq	sp, r1, r4, ror #7
   1d238:	andeq	sp, r1, r4, ror #7
   1d23c:	strdeq	sp, [r1], -ip
   1d240:	andeq	sp, r1, r4, ror #7
   1d244:	andeq	sp, r1, r4, asr #8
   1d248:	andeq	sp, r1, r4, ror #7
   1d24c:	andeq	sp, r1, r4, ror #7
   1d250:	ldrdeq	sp, [r1], -r0
   1d254:	andeq	sp, r1, r4, ror #7
   1d258:	andeq	sp, r1, r4, ror #7
   1d25c:	andeq	sp, r1, r4, ror #7
   1d260:	ldrdeq	sp, [r1], -r0
   1d264:	andeq	sp, r1, r4, ror #7
   1d268:	andeq	sp, r1, r4, ror #7
   1d26c:	andeq	sp, r1, r4, ror #7
   1d270:	andeq	sp, r1, r4, ror #7
   1d274:	strdeq	sp, [r1], -r8
   1d278:			; <UNDEFINED> instruction: 0x0001d5b8
   1d27c:	andeq	sp, r1, r4, ror #7
   1d280:	andeq	sp, r1, r4, ror #7
   1d284:	andeq	sp, r1, r4, ror #7
   1d288:	andeq	sp, r1, r4, ror #7
   1d28c:	andeq	sp, r1, r4, ror #7
   1d290:	andeq	sp, r1, r4, ror #7
   1d294:	andeq	sp, r1, r4, ror #7
   1d298:	andeq	sp, r1, ip, asr #23
   1d29c:	andeq	sp, r1, r4, lsr #24
   1d2a0:	andeq	sp, r1, r4, ror #7
   1d2a4:	andeq	sp, r1, r4, ror #7
   1d2a8:	andeq	sp, r1, r4, ror #7
   1d2ac:	strdeq	sp, [r1], -r0
   1d2b0:	andeq	sp, r1, r4, ror #7
   1d2b4:	andeq	sp, r1, r4, ror #7
   1d2b8:	andeq	sp, r1, r4, ror #7
   1d2bc:	strdeq	sp, [r1], -ip
   1d2c0:	andeq	sp, r1, r4, ror #7
   1d2c4:	andeq	sp, r1, r4, asr #8
   1d2c8:	andeq	sp, r1, r4, ror #7
   1d2cc:	andeq	sp, r1, r4, ror #7
   1d2d0:	andeq	sp, r1, r4, ror #7
   1d2d4:	andeq	sp, r1, r4, ror #7
   1d2d8:	andeq	sp, r1, r4, ror #7
   1d2dc:	andeq	sp, r1, r4, ror #7
   1d2e0:	ldrdeq	sp, [r1], -r0
   1d2e4:	andeq	sp, r1, r4, ror #7
   1d2e8:	andeq	sp, r1, r4, ror #7
   1d2ec:	andeq	sp, r1, r0, lsl #24
   1d2f0:	mvn	r0, #0
   1d2f4:	mvn	r1, #0
   1d2f8:	mov	r2, r5
   1d2fc:	mov	sl, r3
   1d300:	bl	1fd5c <__assert_fail@plt+0xe470>
   1d304:	subs	r3, r0, r6
   1d308:	umull	r4, r2, r6, r5
   1d30c:	mov	lr, #0
   1d310:	str	r1, [sp, #20]
   1d314:	sbcs	r3, r1, r7
   1d318:	movwcc	lr, #1
   1d31c:	mla	ip, r6, sl, r2
   1d320:	mov	r2, r1
   1d324:	mov	r2, #0
   1d328:	cmp	lr, #0
   1d32c:	mla	r7, r7, r5, ip
   1d330:	mvnne	r4, #0
   1d334:	mvnne	r7, #0
   1d338:	subs	r6, r0, r4
   1d33c:	sbcs	r6, r1, r7
   1d340:	umull	r3, r6, r4, r5
   1d344:	movwcc	r2, #1
   1d348:	cmp	r2, #0
   1d34c:	mvnne	r3, #0
   1d350:	cmp	r2, #0
   1d354:	str	r6, [sp, #16]
   1d358:	umull	r6, ip, r3, r5
   1d35c:	mla	r1, r3, sl, ip
   1d360:	ldr	ip, [sp, #16]
   1d364:	str	r1, [sp, #12]
   1d368:	mla	r4, r4, sl, ip
   1d36c:	mla	r4, r7, r5, r4
   1d370:	mvnne	r4, #0
   1d374:	subs	r0, r0, r3
   1d378:	ldr	r0, [sp, #20]
   1d37c:	ldr	r7, [sp, #12]
   1d380:	sbcs	r0, r0, r4
   1d384:	mov	r0, #0
   1d388:	mla	r7, r4, r5, r7
   1d38c:	movwcc	r0, #1
   1d390:	cmp	r0, #0
   1d394:	mov	r1, r0
   1d398:	orr	r0, lr, r2
   1d39c:	mvnne	r7, #0
   1d3a0:	mvnne	r6, #0
   1d3a4:	b	1d9f0 <__assert_fail@plt+0xc104>
   1d3a8:	mov	r8, r0
   1d3ac:	cmp	sl, #0
   1d3b0:	bne	1d07c <__assert_fail@plt+0xb790>
   1d3b4:	b	1dc44 <__assert_fail@plt+0xc358>
   1d3b8:	cmp	r0, #105	; 0x69
   1d3bc:	mov	r3, #0
   1d3c0:	bne	1d204 <__assert_fail@plt+0xb918>
   1d3c4:	ldrb	r0, [r1, #2]
   1d3c8:	mov	r1, #1
   1d3cc:	cmp	r0, #66	; 0x42
   1d3d0:	movweq	r1, #3
   1d3d4:	str	r1, [sp, #28]
   1d3d8:	sub	r0, r4, #66	; 0x42
   1d3dc:	cmp	r0, #53	; 0x35
   1d3e0:	bls	1d210 <__assert_fail@plt+0xb924>
   1d3e4:	ldr	r0, [sp, #36]	; 0x24
   1d3e8:	orr	r8, r8, #2
   1d3ec:	strd	r6, [r0]
   1d3f0:	mov	r0, r8
   1d3f4:	sub	sp, fp, #28
   1d3f8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d3fc:	mvn	r0, #0
   1d400:	mvn	r1, #0
   1d404:	mov	r2, r5
   1d408:	mov	r4, r3
   1d40c:	bl	1fd5c <__assert_fail@plt+0xe470>
   1d410:	subs	r0, r0, r6
   1d414:	mov	r2, #0
   1d418:	sbcs	r0, r1, r7
   1d41c:	umull	r0, r1, r6, r5
   1d420:	movwcc	r2, #1
   1d424:	cmp	r2, #0
   1d428:	mla	r1, r6, r4, r1
   1d42c:	mov	r3, r2
   1d430:	mvnne	r0, #0
   1d434:	mla	r7, r7, r5, r1
   1d438:	mvnne	r7, #0
   1d43c:	mov	r6, r0
   1d440:	b	1dc24 <__assert_fail@plt+0xc338>
   1d444:	mvn	r0, #0
   1d448:	mvn	r1, #0
   1d44c:	mov	r2, r5
   1d450:	str	r3, [sp, #24]
   1d454:	bl	1fd5c <__assert_fail@plt+0xe470>
   1d458:	subs	r3, r0, r6
   1d45c:	mov	ip, r0
   1d460:	umull	r4, r0, r6, r5
   1d464:	mov	sl, #0
   1d468:	sbcs	r3, r1, r7
   1d46c:	mov	r3, #0
   1d470:	movwcc	r3, #1
   1d474:	cmp	r3, #0
   1d478:	str	r0, [sp, #20]
   1d47c:	ldr	r0, [sp, #24]
   1d480:	mvnne	r4, #0
   1d484:	cmp	r3, #0
   1d488:	umull	lr, r2, r4, r5
   1d48c:	mla	r2, r4, r0, r2
   1d490:	str	r2, [sp, #16]
   1d494:	ldr	r2, [sp, #20]
   1d498:	mla	r6, r6, r0, r2
   1d49c:	ldr	r0, [sp, #16]
   1d4a0:	mla	r6, r7, r5, r6
   1d4a4:	mvnne	r6, #0
   1d4a8:	mla	r7, r6, r5, r0
   1d4ac:	subs	r0, ip, r4
   1d4b0:	sbcs	r0, r1, r6
   1d4b4:	movwcc	sl, #1
   1d4b8:	cmp	sl, #0
   1d4bc:	orr	r3, r3, sl
   1d4c0:	mvnne	lr, #0
   1d4c4:	mvnne	r7, #0
   1d4c8:	mov	r6, lr
   1d4cc:	b	1dc24 <__assert_fail@plt+0xc338>
   1d4d0:	mvn	r0, #0
   1d4d4:	mvn	r1, #0
   1d4d8:	mov	r2, r5
   1d4dc:	mov	sl, r3
   1d4e0:	bl	1fd5c <__assert_fail@plt+0xe470>
   1d4e4:	subs	r3, r0, r6
   1d4e8:	mov	ip, r1
   1d4ec:	umull	r2, lr, r6, r5
   1d4f0:	str	r0, [sp, #20]
   1d4f4:	sbcs	r3, r1, r7
   1d4f8:	mov	r1, #0
   1d4fc:	str	ip, [sp, #16]
   1d500:	movwcc	r1, #1
   1d504:	mla	r6, r6, sl, lr
   1d508:	mov	lr, #0
   1d50c:	cmp	r1, #0
   1d510:	mla	r7, r7, r5, r6
   1d514:	mvnne	r2, #0
   1d518:	cmp	r1, #0
   1d51c:	umull	r3, r4, r2, r5
   1d520:	mvnne	r7, #0
   1d524:	mla	r4, r2, sl, r4
   1d528:	subs	r2, r0, r2
   1d52c:	sbcs	r2, ip, r7
   1d530:	mla	r4, r7, r5, r4
   1d534:	mov	r2, #0
   1d538:	movwcc	lr, #1
   1d53c:	cmp	lr, #0
   1d540:	mvnne	r3, #0
   1d544:	mvnne	r4, #0
   1d548:	subs	r7, r0, r3
   1d54c:	mov	r0, r5
   1d550:	sbcs	r7, ip, r4
   1d554:	umull	r5, r7, r3, r5
   1d558:	movwcc	r2, #1
   1d55c:	cmp	r2, #0
   1d560:	mla	r3, r3, sl, r7
   1d564:	mvnne	r5, #0
   1d568:	cmp	r2, #0
   1d56c:	mla	r3, r4, r0, r3
   1d570:	umull	r6, ip, r5, r0
   1d574:	mvnne	r3, #0
   1d578:	mla	ip, r5, sl, ip
   1d57c:	mla	r7, r3, r0, ip
   1d580:	ldr	r0, [sp, #20]
   1d584:	subs	r0, r0, r5
   1d588:	ldr	r0, [sp, #16]
   1d58c:	sbcs	r0, r0, r3
   1d590:	mov	r0, #0
   1d594:	movwcc	r0, #1
   1d598:	cmp	r0, #0
   1d59c:	mov	r3, r0
   1d5a0:	orr	r0, r1, lr
   1d5a4:	orr	r0, r0, r2
   1d5a8:	mvnne	r7, #0
   1d5ac:	mvnne	r6, #0
   1d5b0:	orr	r3, r0, r3
   1d5b4:	b	1dc24 <__assert_fail@plt+0xc338>
   1d5b8:	mvn	r0, #0
   1d5bc:	mvn	r1, #0
   1d5c0:	mov	r2, r5
   1d5c4:	mov	r4, r3
   1d5c8:	str	r3, [sp, #24]
   1d5cc:	bl	1fd5c <__assert_fail@plt+0xe470>
   1d5d0:	umull	r3, r2, r6, r5
   1d5d4:	mla	r2, r6, r4, r2
   1d5d8:	subs	r6, r0, r6
   1d5dc:	sbcs	r6, r1, r7
   1d5e0:	mov	r6, #0
   1d5e4:	mla	r2, r7, r5, r2
   1d5e8:	mov	r7, #0
   1d5ec:	movwcc	r6, #1
   1d5f0:	cmp	r6, #0
   1d5f4:	str	r6, [sp, #20]
   1d5f8:	mvnne	r3, #0
   1d5fc:	mvnne	r2, #0
   1d600:	subs	r4, r0, r3
   1d604:	umull	r6, ip, r3, r5
   1d608:	sbcs	r4, r1, r2
   1d60c:	ldr	r4, [sp, #24]
   1d610:	movwcc	r7, #1
   1d614:	cmp	r7, #0
   1d618:	mov	lr, r7
   1d61c:	str	r7, [sp, #16]
   1d620:	mvnne	r6, #0
   1d624:	cmp	lr, #0
   1d628:	mov	lr, #0
   1d62c:	umull	sl, r7, r6, r5
   1d630:	mla	r3, r3, r4, ip
   1d634:	mla	r2, r2, r5, r3
   1d638:	mvnne	r2, #0
   1d63c:	subs	r3, r0, r6
   1d640:	mla	r7, r6, r4, r7
   1d644:	mov	r4, r0
   1d648:	mov	r0, #0
   1d64c:	mla	r7, r2, r5, r7
   1d650:	sbcs	r2, r1, r2
   1d654:	mov	r3, r4
   1d658:	movwcc	r0, #1
   1d65c:	str	r3, [sp, #4]
   1d660:	cmp	r0, #0
   1d664:	str	r0, [sp, #12]
   1d668:	mov	r0, r1
   1d66c:	mvnne	sl, #0
   1d670:	mvnne	r7, #0
   1d674:	str	r0, [sp, #8]
   1d678:	subs	r2, r4, sl
   1d67c:	ldr	r4, [sp, #24]
   1d680:	sbcs	r2, r1, r7
   1d684:	umull	r6, r2, sl, r5
   1d688:	movwcc	lr, #1
   1d68c:	cmp	lr, #0
   1d690:	mvnne	r6, #0
   1d694:	mla	r2, sl, r4, r2
   1d698:	cmp	lr, #0
   1d69c:	umull	r1, ip, r6, r5
   1d6a0:	mla	r2, r7, r5, r2
   1d6a4:	mvnne	r2, #0
   1d6a8:	mla	ip, r6, r4, ip
   1d6ac:	subs	r6, r3, r6
   1d6b0:	mla	r7, r2, r5, ip
   1d6b4:	sbcs	r2, r0, r2
   1d6b8:	mov	ip, #0
   1d6bc:	mov	r2, #0
   1d6c0:	movwcc	ip, #1
   1d6c4:	cmp	ip, #0
   1d6c8:	mvnne	r1, #0
   1d6cc:	mvnne	r7, #0
   1d6d0:	subs	r6, r3, r1
   1d6d4:	ldr	r3, [sp, #24]
   1d6d8:	sbcs	r6, r0, r7
   1d6dc:	umull	r0, sl, r1, r5
   1d6e0:	movwcc	r2, #1
   1d6e4:	cmp	r2, #0
   1d6e8:	mvnne	r0, #0
   1d6ec:	mla	r1, r1, r3, sl
   1d6f0:	cmp	r2, #0
   1d6f4:	umull	r6, r4, r0, r5
   1d6f8:	mla	r1, r7, r5, r1
   1d6fc:	mvnne	r1, #0
   1d700:	mla	r4, r0, r3, r4
   1d704:	ldr	r3, [sp, #4]
   1d708:	mla	r7, r1, r5, r4
   1d70c:	ldr	r5, [sp, #16]
   1d710:	subs	r0, r3, r0
   1d714:	ldr	r0, [sp, #8]
   1d718:	sbcs	r0, r0, r1
   1d71c:	mov	r0, #0
   1d720:	movwcc	r0, #1
   1d724:	cmp	r0, #0
   1d728:	mov	r1, r0
   1d72c:	ldr	r0, [sp, #20]
   1d730:	mvnne	r7, #0
   1d734:	mvnne	r6, #0
   1d738:	orr	r0, r0, r5
   1d73c:	ldr	r5, [sp, #12]
   1d740:	orr	r0, r0, r5
   1d744:	orr	r0, r0, lr
   1d748:	orr	r0, r0, ip
   1d74c:	orr	r0, r0, r2
   1d750:	b	1dbc0 <__assert_fail@plt+0xc2d4>
   1d754:	mov	r1, #0
   1d758:	lsl	r2, r7, #10
   1d75c:	lsl	r0, r6, #10
   1d760:	lsr	r3, r7, #22
   1d764:	cmp	r1, r7, lsr #22
   1d768:	orr	r2, r2, r6, lsr #22
   1d76c:	mvnne	r0, #0
   1d770:	movwne	r3, #1
   1d774:	cmp	r1, r7, lsr #22
   1d778:	b	1dbf0 <__assert_fail@plt+0xc304>
   1d77c:	mvn	r0, #0
   1d780:	mvn	r1, #0
   1d784:	mov	r2, r5
   1d788:	mov	sl, r3
   1d78c:	bl	1fd5c <__assert_fail@plt+0xe470>
   1d790:	subs	r2, r0, r6
   1d794:	mov	ip, r0
   1d798:	mov	r0, #0
   1d79c:	sbcs	r2, r1, r7
   1d7a0:	umull	r4, r2, r6, r5
   1d7a4:	movwcc	r0, #1
   1d7a8:	cmp	r0, #0
   1d7ac:	mla	r2, r6, sl, r2
   1d7b0:	str	r0, [sp, #20]
   1d7b4:	mvnne	r4, #0
   1d7b8:	cmp	r0, #0
   1d7bc:	mla	r2, r7, r5, r2
   1d7c0:	mov	r0, #0
   1d7c4:	umull	lr, r3, r4, r5
   1d7c8:	mvnne	r2, #0
   1d7cc:	mla	r3, r4, sl, r3
   1d7d0:	mla	r6, r2, r5, r3
   1d7d4:	subs	r3, ip, r4
   1d7d8:	mov	r3, r1
   1d7dc:	sbcs	r2, r1, r2
   1d7e0:	str	r3, [sp, #8]
   1d7e4:	movwcc	r0, #1
   1d7e8:	cmp	r0, #0
   1d7ec:	str	r0, [sp, #16]
   1d7f0:	mov	r0, ip
   1d7f4:	mvnne	lr, #0
   1d7f8:	mvnne	r6, #0
   1d7fc:	str	r0, [sp, #12]
   1d800:	subs	r2, ip, lr
   1d804:	umull	r7, r4, lr, r5
   1d808:	sbcs	r2, r1, r6
   1d80c:	mov	r2, #0
   1d810:	movwcc	r2, #1
   1d814:	mla	r4, lr, sl, r4
   1d818:	cmp	r2, #0
   1d81c:	mla	r6, r6, r5, r4
   1d820:	mov	r4, #0
   1d824:	mvnne	r7, #0
   1d828:	cmp	r2, #0
   1d82c:	umull	r1, ip, r7, r5
   1d830:	mvnne	r6, #0
   1d834:	mla	ip, r7, sl, ip
   1d838:	subs	r7, r0, r7
   1d83c:	sbcs	r7, r3, r6
   1d840:	mla	lr, r6, r5, ip
   1d844:	mov	ip, #0
   1d848:	movwcc	ip, #1
   1d84c:	cmp	ip, #0
   1d850:	mvnne	r1, #0
   1d854:	mvnne	lr, #0
   1d858:	subs	r7, r0, r1
   1d85c:	sbcs	r7, r3, lr
   1d860:	umull	r0, r7, r1, r5
   1d864:	movwcc	r4, #1
   1d868:	cmp	r4, #0
   1d86c:	mla	r1, r1, sl, r7
   1d870:	mvnne	r0, #0
   1d874:	cmp	r4, #0
   1d878:	mla	r1, lr, r5, r1
   1d87c:	umull	r6, r3, r0, r5
   1d880:	mvnne	r1, #0
   1d884:	mla	r3, r0, sl, r3
   1d888:	mla	r7, r1, r5, r3
   1d88c:	ldr	r3, [sp, #12]
   1d890:	subs	r0, r3, r0
   1d894:	ldr	r0, [sp, #8]
   1d898:	ldr	r3, [sp, #16]
   1d89c:	sbcs	r0, r0, r1
   1d8a0:	mov	r0, #0
   1d8a4:	movwcc	r0, #1
   1d8a8:	cmp	r0, #0
   1d8ac:	mov	r1, r0
   1d8b0:	ldr	r0, [sp, #20]
   1d8b4:	mvnne	r7, #0
   1d8b8:	mvnne	r6, #0
   1d8bc:	orr	r0, r0, r3
   1d8c0:	orr	r0, r0, r2
   1d8c4:	orr	r0, r0, ip
   1d8c8:	orr	r0, r0, r4
   1d8cc:	b	1d9f0 <__assert_fail@plt+0xc104>
   1d8d0:	mvn	r0, #0
   1d8d4:	mvn	r1, #0
   1d8d8:	mov	r2, r5
   1d8dc:	mov	sl, r3
   1d8e0:	bl	1fd5c <__assert_fail@plt+0xe470>
   1d8e4:	umull	r3, r2, r6, r5
   1d8e8:	mov	lr, r1
   1d8ec:	mov	r1, r0
   1d8f0:	mla	r2, r6, sl, r2
   1d8f4:	subs	r6, r0, r6
   1d8f8:	mov	r0, #0
   1d8fc:	sbcs	r6, lr, r7
   1d900:	mla	r2, r7, r5, r2
   1d904:	movwcc	r0, #1
   1d908:	cmp	r0, #0
   1d90c:	str	r0, [sp, #20]
   1d910:	mov	r0, r1
   1d914:	mvnne	r3, #0
   1d918:	mvnne	r2, #0
   1d91c:	str	r0, [sp, #16]
   1d920:	subs	r4, r1, r3
   1d924:	umull	r7, ip, r3, r5
   1d928:	sbcs	r4, lr, r2
   1d92c:	mov	r4, #0
   1d930:	movwcc	r4, #1
   1d934:	mla	r3, r3, sl, ip
   1d938:	mov	ip, #0
   1d93c:	cmp	r4, #0
   1d940:	mla	r2, r2, r5, r3
   1d944:	mvnne	r7, #0
   1d948:	cmp	r4, #0
   1d94c:	umull	r1, r6, r7, r5
   1d950:	mvnne	r2, #0
   1d954:	mla	r6, r7, sl, r6
   1d958:	mla	r3, r2, r5, r6
   1d95c:	subs	r6, r0, r7
   1d960:	sbcs	r2, lr, r2
   1d964:	mov	r2, #0
   1d968:	movwcc	ip, #1
   1d96c:	cmp	ip, #0
   1d970:	mvnne	r1, #0
   1d974:	mvnne	r3, #0
   1d978:	subs	r6, r0, r1
   1d97c:	sbcs	r6, lr, r3
   1d980:	umull	r0, r6, r1, r5
   1d984:	movwcc	r2, #1
   1d988:	cmp	r2, #0
   1d98c:	mvnne	r0, #0
   1d990:	cmp	r2, #0
   1d994:	str	r6, [sp, #12]
   1d998:	umull	r6, r7, r0, r5
   1d99c:	mla	r7, r0, sl, r7
   1d9a0:	str	r7, [sp, #8]
   1d9a4:	ldr	r7, [sp, #12]
   1d9a8:	mla	r1, r1, sl, r7
   1d9ac:	mla	r1, r3, r5, r1
   1d9b0:	ldr	r3, [sp, #8]
   1d9b4:	mvnne	r1, #0
   1d9b8:	mla	r7, r1, r5, r3
   1d9bc:	ldr	r3, [sp, #16]
   1d9c0:	subs	r0, r3, r0
   1d9c4:	sbcs	r0, lr, r1
   1d9c8:	mov	r0, #0
   1d9cc:	movwcc	r0, #1
   1d9d0:	cmp	r0, #0
   1d9d4:	mov	r1, r0
   1d9d8:	ldr	r0, [sp, #20]
   1d9dc:	mvnne	r7, #0
   1d9e0:	mvnne	r6, #0
   1d9e4:	orr	r0, r0, r4
   1d9e8:	orr	r0, r0, ip
   1d9ec:	orr	r0, r0, r2
   1d9f0:	orr	r3, r0, r1
   1d9f4:	b	1dc24 <__assert_fail@plt+0xc338>
   1d9f8:	mvn	r0, #0
   1d9fc:	mvn	r1, #0
   1da00:	mov	r2, r5
   1da04:	mov	sl, r3
   1da08:	bl	1fd5c <__assert_fail@plt+0xe470>
   1da0c:	mov	ip, r1
   1da10:	subs	r1, r0, r6
   1da14:	umull	r3, lr, r6, r5
   1da18:	mov	r2, r5
   1da1c:	sbcs	r1, ip, r7
   1da20:	mov	r1, #0
   1da24:	str	ip, [sp, #4]
   1da28:	movwcc	r1, #1
   1da2c:	mla	r6, r6, sl, lr
   1da30:	cmp	r1, #0
   1da34:	mla	r7, r7, r2, r6
   1da38:	str	r1, [sp, #20]
   1da3c:	mvnne	r3, #0
   1da40:	cmp	r1, #0
   1da44:	mov	r1, r0
   1da48:	umull	r4, r5, r3, r5
   1da4c:	mvnne	r7, #0
   1da50:	mov	lr, r1
   1da54:	mla	r5, r3, sl, r5
   1da58:	subs	r3, r0, r3
   1da5c:	sbcs	r0, ip, r7
   1da60:	mov	r0, #0
   1da64:	mla	r5, r7, r2, r5
   1da68:	movwcc	r0, #1
   1da6c:	cmp	r0, #0
   1da70:	str	r0, [sp, #16]
   1da74:	mvnne	r4, #0
   1da78:	mvnne	r5, #0
   1da7c:	subs	r0, r1, r4
   1da80:	mov	r1, #0
   1da84:	sbcs	r0, ip, r5
   1da88:	umull	r3, r0, r4, r2
   1da8c:	movwcc	r1, #1
   1da90:	cmp	r1, #0
   1da94:	mla	r0, r4, sl, r0
   1da98:	mov	r4, lr
   1da9c:	str	r1, [sp, #12]
   1daa0:	mvnne	r3, #0
   1daa4:	cmp	r1, #0
   1daa8:	mla	r0, r5, r2, r0
   1daac:	str	r4, [sp]
   1dab0:	umull	r7, r6, r3, r2
   1dab4:	mvnne	r0, #0
   1dab8:	mla	r6, r3, sl, r6
   1dabc:	subs	r3, lr, r3
   1dac0:	mov	r3, #0
   1dac4:	mla	r5, r0, r2, r6
   1dac8:	sbcs	r0, ip, r0
   1dacc:	mov	r0, #0
   1dad0:	movwcc	r0, #1
   1dad4:	cmp	r0, #0
   1dad8:	str	r0, [sp, #8]
   1dadc:	mvnne	r7, #0
   1dae0:	mvnne	r5, #0
   1dae4:	subs	r0, lr, r7
   1dae8:	sbcs	r0, ip, r5
   1daec:	umull	r6, r0, r7, r2
   1daf0:	movwcc	r3, #1
   1daf4:	cmp	r3, #0
   1daf8:	mla	r7, r7, sl, r0
   1dafc:	mov	r0, ip
   1db00:	mvnne	r6, #0
   1db04:	cmp	r3, #0
   1db08:	mla	r7, r5, r2, r7
   1db0c:	mov	r5, #0
   1db10:	umull	r1, lr, r6, r2
   1db14:	mvnne	r7, #0
   1db18:	mla	lr, r6, sl, lr
   1db1c:	subs	r6, r4, r6
   1db20:	mla	lr, r7, r2, lr
   1db24:	sbcs	r7, ip, r7
   1db28:	mov	ip, #0
   1db2c:	movwcc	ip, #1
   1db30:	cmp	ip, #0
   1db34:	mvnne	r1, #0
   1db38:	mvnne	lr, #0
   1db3c:	subs	r7, r4, r1
   1db40:	sbcs	r7, r0, lr
   1db44:	umull	r0, r7, r1, r2
   1db48:	movwcc	r5, #1
   1db4c:	cmp	r5, #0
   1db50:	mla	r1, r1, sl, r7
   1db54:	mvnne	r0, #0
   1db58:	cmp	r5, #0
   1db5c:	mla	r1, lr, r2, r1
   1db60:	umull	r6, r4, r0, r2
   1db64:	mvnne	r1, #0
   1db68:	mla	r4, r0, sl, r4
   1db6c:	mla	r7, r1, r2, r4
   1db70:	ldr	r2, [sp]
   1db74:	subs	r0, r2, r0
   1db78:	ldr	r0, [sp, #4]
   1db7c:	ldr	r2, [sp, #16]
   1db80:	sbcs	r0, r0, r1
   1db84:	mov	r0, #0
   1db88:	movwcc	r0, #1
   1db8c:	cmp	r0, #0
   1db90:	mov	r1, r0
   1db94:	ldr	r0, [sp, #20]
   1db98:	mvnne	r7, #0
   1db9c:	mvnne	r6, #0
   1dba0:	orr	r0, r0, r2
   1dba4:	ldr	r2, [sp, #12]
   1dba8:	orr	r0, r0, r2
   1dbac:	ldr	r2, [sp, #8]
   1dbb0:	orr	r0, r0, r2
   1dbb4:	orr	r0, r0, r3
   1dbb8:	orr	r0, r0, ip
   1dbbc:	orr	r0, r0, r5
   1dbc0:	orr	r0, r0, r1
   1dbc4:	and	r3, r0, #1
   1dbc8:	b	1dc24 <__assert_fail@plt+0xc338>
   1dbcc:	mov	r1, #0
   1dbd0:	lsl	r2, r7, #9
   1dbd4:	lsl	r0, r6, #9
   1dbd8:	lsr	r3, r7, #23
   1dbdc:	cmp	r1, r7, lsr #23
   1dbe0:	orr	r2, r2, r6, lsr #23
   1dbe4:	mvnne	r0, #0
   1dbe8:	movwne	r3, #1
   1dbec:	cmp	r1, r7, lsr #23
   1dbf0:	mvnne	r2, #0
   1dbf4:	mov	r6, r0
   1dbf8:	mov	r7, r2
   1dbfc:	b	1dc24 <__assert_fail@plt+0xc338>
   1dc00:	lsl	r1, r7, #1
   1dc04:	cmp	r7, #0
   1dc08:	lsl	r0, r6, #1
   1dc0c:	lsr	r3, r7, #31
   1dc10:	orr	r1, r1, r6, lsr #31
   1dc14:	mvnmi	r0, #0
   1dc18:	mvnmi	r1, #0
   1dc1c:	mov	r6, r0
   1dc20:	mov	r7, r1
   1dc24:	ldr	r1, [sp, #32]
   1dc28:	ldr	r2, [sp, #28]
   1dc2c:	orr	r8, r3, r8
   1dc30:	add	r0, r1, r2
   1dc34:	str	r0, [r9]
   1dc38:	ldrb	r0, [r1, r2]
   1dc3c:	cmp	r0, #0
   1dc40:	orrne	r8, r8, #2
   1dc44:	ldr	r0, [sp, #36]	; 0x24
   1dc48:	strd	r6, [r0]
   1dc4c:	mov	r0, r8
   1dc50:	sub	sp, fp, #28
   1dc54:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1dc58:	movw	r0, #5776	; 0x1690
   1dc5c:	movw	r1, #5814	; 0x16b6
   1dc60:	movw	r3, #5830	; 0x16c6
   1dc64:	mov	r2, #85	; 0x55
   1dc68:	movt	r0, #2
   1dc6c:	movt	r1, #2
   1dc70:	movt	r3, #2
   1dc74:	bl	118ec <__assert_fail@plt>
   1dc78:	clz	r2, r1
   1dc7c:	clz	r3, r0
   1dc80:	lsr	r2, r2, #5
   1dc84:	lsr	r3, r3, #5
   1dc88:	orrs	r2, r3, r2
   1dc8c:	movwne	r1, #1
   1dc90:	movwne	r0, #1
   1dc94:	cmp	r1, #0
   1dc98:	beq	1dcc8 <__assert_fail@plt+0xc3dc>
   1dc9c:	mvn	r2, #-2147483648	; 0x80000000
   1dca0:	udiv	r2, r2, r1
   1dca4:	cmp	r2, r0
   1dca8:	bcs	1dcc8 <__assert_fail@plt+0xc3dc>
   1dcac:	push	{fp, lr}
   1dcb0:	mov	fp, sp
   1dcb4:	bl	11748 <__errno_location@plt>
   1dcb8:	mov	r1, #12
   1dcbc:	str	r1, [r0]
   1dcc0:	mov	r0, #0
   1dcc4:	pop	{fp, pc}
   1dcc8:	b	114e4 <calloc@plt>
   1dccc:	cmp	r0, #0
   1dcd0:	movweq	r0, #1
   1dcd4:	cmn	r0, #1
   1dcd8:	ble	1dce0 <__assert_fail@plt+0xc3f4>
   1dcdc:	b	116ac <malloc@plt>
   1dce0:	push	{fp, lr}
   1dce4:	mov	fp, sp
   1dce8:	bl	11748 <__errno_location@plt>
   1dcec:	mov	r1, #12
   1dcf0:	str	r1, [r0]
   1dcf4:	mov	r0, #0
   1dcf8:	pop	{fp, pc}
   1dcfc:	push	{fp, lr}
   1dd00:	mov	fp, sp
   1dd04:	cmp	r0, #0
   1dd08:	beq	1dd24 <__assert_fail@plt+0xc438>
   1dd0c:	cmp	r1, #0
   1dd10:	beq	1dd30 <__assert_fail@plt+0xc444>
   1dd14:	cmn	r1, #1
   1dd18:	ble	1dd3c <__assert_fail@plt+0xc450>
   1dd1c:	pop	{fp, lr}
   1dd20:	b	115bc <realloc@plt>
   1dd24:	mov	r0, r1
   1dd28:	pop	{fp, lr}
   1dd2c:	b	1dccc <__assert_fail@plt+0xc3e0>
   1dd30:	bl	160c4 <__assert_fail@plt+0x47d8>
   1dd34:	mov	r0, #0
   1dd38:	pop	{fp, pc}
   1dd3c:	bl	11748 <__errno_location@plt>
   1dd40:	mov	r1, #12
   1dd44:	str	r1, [r0]
   1dd48:	mov	r0, #0
   1dd4c:	pop	{fp, pc}
   1dd50:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1dd54:	add	fp, sp, #28
   1dd58:	sub	sp, sp, #36	; 0x24
   1dd5c:	sub	sp, sp, #1024	; 0x400
   1dd60:	mov	r8, r1
   1dd64:	ldrb	r1, [r0]
   1dd68:	mov	r4, r0
   1dd6c:	cmp	r1, #0
   1dd70:	beq	1de30 <__assert_fail@plt+0xc544>
   1dd74:	add	r0, sp, #32
   1dd78:	mov	r2, #0
   1dd7c:	add	sl, r0, #16
   1dd80:	mov	r0, #1
   1dd84:	ldrb	r3, [r8, r2]
   1dd88:	cmp	r3, #0
   1dd8c:	uxtbne	r1, r1
   1dd90:	subne	r1, r1, r3
   1dd94:	clzne	r1, r1
   1dd98:	lsrne	r1, r1, #5
   1dd9c:	andne	r0, r0, r1
   1dda0:	addne	r1, r4, r2
   1dda4:	addne	r2, r2, #1
   1dda8:	ldrbne	r1, [r1, #1]
   1ddac:	cmpne	r1, #0
   1ddb0:	bne	1dd84 <__assert_fail@plt+0xc498>
   1ddb4:	add	r6, r8, r2
   1ddb8:	mov	r7, r4
   1ddbc:	ldrb	r1, [r6]
   1ddc0:	cmp	r1, #0
   1ddc4:	movwne	r7, #0
   1ddc8:	tst	r0, #1
   1ddcc:	cmpeq	r1, #0
   1ddd0:	bne	1de40 <__assert_fail@plt+0xc554>
   1ddd4:	ldrb	r1, [r8]
   1ddd8:	add	r0, r4, #1
   1dddc:	sub	r5, r6, r8
   1dde0:	bl	11724 <strchr@plt>
   1dde4:	mov	r7, r0
   1dde8:	cmp	r5, #1
   1ddec:	cmpne	r7, #0
   1ddf0:	beq	1de40 <__assert_fail@plt+0xc554>
   1ddf4:	add	r0, r4, r5
   1ddf8:	sub	r9, r6, r5
   1ddfc:	str	r6, [sp, #20]
   1de00:	str	r5, [sp, #28]
   1de04:	str	r7, [sp, #24]
   1de08:	subs	r0, r0, r7
   1de0c:	movwcc	r0, #1
   1de10:	cmp	r5, #31
   1de14:	bhi	1de4c <__assert_fail@plt+0xc560>
   1de18:	mov	sl, r0
   1de1c:	cmp	r5, #3
   1de20:	bcs	1df84 <__assert_fail@plt+0xc698>
   1de24:	sub	r6, r5, #1
   1de28:	mov	r5, #1
   1de2c:	b	1e630 <__assert_fail@plt+0xcd44>
   1de30:	ldrb	r0, [r8]
   1de34:	cmp	r0, #0
   1de38:	movne	r4, #0
   1de3c:	mov	r7, r4
   1de40:	mov	r0, r7
   1de44:	sub	sp, fp, #28
   1de48:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1de4c:	str	r0, [sp, #8]
   1de50:	rsb	r0, r5, #0
   1de54:	mvn	r1, #0
   1de58:	mov	r2, #1
   1de5c:	mov	ip, #1
   1de60:	mov	r3, #1
   1de64:	str	r0, [sp, #4]
   1de68:	mov	r0, #0
   1de6c:	b	1de88 <__assert_fail@plt+0xc59c>
   1de70:	sub	ip, r2, r1
   1de74:	mov	r3, #1
   1de78:	mov	r0, r2
   1de7c:	add	r2, r3, r0
   1de80:	cmp	r2, r5
   1de84:	bcs	1dee0 <__assert_fail@plt+0xc5f4>
   1de88:	add	r4, r1, r3
   1de8c:	ldrb	r7, [r9, r2]
   1de90:	ldrb	r4, [r9, r4]
   1de94:	cmp	r7, r4
   1de98:	bcc	1de70 <__assert_fail@plt+0xc584>
   1de9c:	bne	1dec0 <__assert_fail@plt+0xc5d4>
   1dea0:	cmp	r3, ip
   1dea4:	addne	r3, r3, #1
   1dea8:	addeq	r0, r0, ip
   1deac:	moveq	r3, #1
   1deb0:	add	r2, r3, r0
   1deb4:	cmp	r2, r5
   1deb8:	bcc	1de88 <__assert_fail@plt+0xc59c>
   1debc:	b	1dee0 <__assert_fail@plt+0xc5f4>
   1dec0:	add	r2, r0, #1
   1dec4:	mov	r1, r0
   1dec8:	mov	r3, #1
   1decc:	mov	ip, #1
   1ded0:	mov	r0, r2
   1ded4:	add	r2, r3, r0
   1ded8:	cmp	r2, r5
   1dedc:	bcc	1de88 <__assert_fail@plt+0xc59c>
   1dee0:	cmp	r5, #2
   1dee4:	bcc	1e0b0 <__assert_fail@plt+0xc7c4>
   1dee8:	mvn	lr, #0
   1deec:	mov	r2, #0
   1def0:	mov	r3, #1
   1def4:	mov	r5, #1
   1def8:	mov	r7, #1
   1defc:	b	1df1c <__assert_fail@plt+0xc630>
   1df00:	sub	r5, r3, lr
   1df04:	mov	r7, #1
   1df08:	mov	r2, r3
   1df0c:	ldr	r0, [sp, #28]
   1df10:	add	r3, r7, r2
   1df14:	cmp	r3, r0
   1df18:	bcs	1e0b8 <__assert_fail@plt+0xc7cc>
   1df1c:	add	r4, lr, r7
   1df20:	ldrb	r0, [r9, r3]
   1df24:	ldrb	r4, [r9, r4]
   1df28:	cmp	r4, r0
   1df2c:	bcc	1df00 <__assert_fail@plt+0xc614>
   1df30:	cmp	r0, r4
   1df34:	bne	1df5c <__assert_fail@plt+0xc670>
   1df38:	cmp	r7, r5
   1df3c:	addne	r7, r7, #1
   1df40:	addeq	r2, r2, r5
   1df44:	moveq	r7, #1
   1df48:	ldr	r0, [sp, #28]
   1df4c:	add	r3, r7, r2
   1df50:	cmp	r3, r0
   1df54:	bcc	1df1c <__assert_fail@plt+0xc630>
   1df58:	b	1e0b8 <__assert_fail@plt+0xc7cc>
   1df5c:	add	r0, r2, #1
   1df60:	mov	lr, r2
   1df64:	mov	r7, #1
   1df68:	mov	r5, #1
   1df6c:	mov	r2, r0
   1df70:	ldr	r0, [sp, #28]
   1df74:	add	r3, r7, r2
   1df78:	cmp	r3, r0
   1df7c:	bcc	1df1c <__assert_fail@plt+0xc630>
   1df80:	b	1e0b8 <__assert_fail@plt+0xc7cc>
   1df84:	mvn	r1, #0
   1df88:	mov	r0, #0
   1df8c:	mov	r2, #1
   1df90:	mov	ip, #1
   1df94:	mov	r3, #1
   1df98:	b	1dfb4 <__assert_fail@plt+0xc6c8>
   1df9c:	sub	ip, r2, r1
   1dfa0:	mov	r3, #1
   1dfa4:	mov	r0, r2
   1dfa8:	add	r2, r3, r0
   1dfac:	cmp	r2, r5
   1dfb0:	bcs	1e00c <__assert_fail@plt+0xc720>
   1dfb4:	add	r4, r1, r3
   1dfb8:	ldrb	r7, [r9, r2]
   1dfbc:	ldrb	r4, [r9, r4]
   1dfc0:	cmp	r7, r4
   1dfc4:	bcc	1df9c <__assert_fail@plt+0xc6b0>
   1dfc8:	bne	1dfec <__assert_fail@plt+0xc700>
   1dfcc:	cmp	r3, ip
   1dfd0:	addne	r3, r3, #1
   1dfd4:	addeq	r0, r0, ip
   1dfd8:	moveq	r3, #1
   1dfdc:	add	r2, r3, r0
   1dfe0:	cmp	r2, r5
   1dfe4:	bcc	1dfb4 <__assert_fail@plt+0xc6c8>
   1dfe8:	b	1e00c <__assert_fail@plt+0xc720>
   1dfec:	add	r2, r0, #1
   1dff0:	mov	r1, r0
   1dff4:	mov	r3, #1
   1dff8:	mov	ip, #1
   1dffc:	mov	r0, r2
   1e000:	add	r2, r3, r0
   1e004:	cmp	r2, r5
   1e008:	bcc	1dfb4 <__assert_fail@plt+0xc6c8>
   1e00c:	cmp	r5, #2
   1e010:	bcc	1e614 <__assert_fail@plt+0xcd28>
   1e014:	mvn	lr, #0
   1e018:	mov	r2, #0
   1e01c:	mov	r3, #1
   1e020:	mov	r5, #1
   1e024:	mov	r7, #1
   1e028:	b	1e048 <__assert_fail@plt+0xc75c>
   1e02c:	sub	r5, r3, lr
   1e030:	mov	r7, #1
   1e034:	mov	r2, r3
   1e038:	ldr	r0, [sp, #28]
   1e03c:	add	r3, r7, r2
   1e040:	cmp	r3, r0
   1e044:	bcs	1e61c <__assert_fail@plt+0xcd30>
   1e048:	add	r4, lr, r7
   1e04c:	ldrb	r0, [r9, r3]
   1e050:	ldrb	r4, [r9, r4]
   1e054:	cmp	r4, r0
   1e058:	bcc	1e02c <__assert_fail@plt+0xc740>
   1e05c:	cmp	r0, r4
   1e060:	bne	1e088 <__assert_fail@plt+0xc79c>
   1e064:	cmp	r7, r5
   1e068:	addne	r7, r7, #1
   1e06c:	addeq	r2, r2, r5
   1e070:	moveq	r7, #1
   1e074:	ldr	r0, [sp, #28]
   1e078:	add	r3, r7, r2
   1e07c:	cmp	r3, r0
   1e080:	bcc	1e048 <__assert_fail@plt+0xc75c>
   1e084:	b	1e61c <__assert_fail@plt+0xcd30>
   1e088:	add	r0, r2, #1
   1e08c:	mov	lr, r2
   1e090:	mov	r7, #1
   1e094:	mov	r5, #1
   1e098:	mov	r2, r0
   1e09c:	ldr	r0, [sp, #28]
   1e0a0:	add	r3, r7, r2
   1e0a4:	cmp	r3, r0
   1e0a8:	bcc	1e048 <__assert_fail@plt+0xc75c>
   1e0ac:	b	1e61c <__assert_fail@plt+0xcd30>
   1e0b0:	mov	r5, #1
   1e0b4:	mvn	lr, #0
   1e0b8:	ldr	r2, [sp, #28]
   1e0bc:	add	r3, sp, #32
   1e0c0:	add	r0, sl, #976	; 0x3d0
   1e0c4:	vdup.32	q8, r2
   1e0c8:	vst1.32	{d16-d17}, [r3]
   1e0cc:	vst1.32	{d16-d17}, [r0]
   1e0d0:	add	r0, sl, #960	; 0x3c0
   1e0d4:	vst1.32	{d16-d17}, [r0]
   1e0d8:	add	r0, sl, #944	; 0x3b0
   1e0dc:	vst1.32	{d16-d17}, [r0]
   1e0e0:	add	r0, sl, #928	; 0x3a0
   1e0e4:	vst1.32	{d16-d17}, [r0]
   1e0e8:	add	r0, sl, #912	; 0x390
   1e0ec:	vst1.32	{d16-d17}, [r0]
   1e0f0:	add	r0, sl, #896	; 0x380
   1e0f4:	vst1.32	{d16-d17}, [r0]
   1e0f8:	add	r0, sl, #880	; 0x370
   1e0fc:	vst1.32	{d16-d17}, [r0]
   1e100:	add	r0, sl, #864	; 0x360
   1e104:	vst1.32	{d16-d17}, [r0]
   1e108:	add	r0, sl, #848	; 0x350
   1e10c:	vst1.32	{d16-d17}, [r0]
   1e110:	add	r0, sl, #832	; 0x340
   1e114:	vst1.32	{d16-d17}, [r0]
   1e118:	add	r0, sl, #816	; 0x330
   1e11c:	vst1.32	{d16-d17}, [r0]
   1e120:	add	r0, sl, #800	; 0x320
   1e124:	vst1.32	{d16-d17}, [r0]
   1e128:	add	r0, sl, #784	; 0x310
   1e12c:	vst1.32	{d16-d17}, [r0]
   1e130:	add	r0, sl, #768	; 0x300
   1e134:	vst1.32	{d16-d17}, [r0]
   1e138:	add	r0, sl, #752	; 0x2f0
   1e13c:	vst1.32	{d16-d17}, [r0]
   1e140:	add	r0, sl, #736	; 0x2e0
   1e144:	vst1.32	{d16-d17}, [r0]
   1e148:	add	r0, sl, #720	; 0x2d0
   1e14c:	vst1.32	{d16-d17}, [r0]
   1e150:	add	r0, sl, #704	; 0x2c0
   1e154:	vst1.32	{d16-d17}, [r0]
   1e158:	add	r0, sl, #688	; 0x2b0
   1e15c:	vst1.32	{d16-d17}, [r0]
   1e160:	add	r0, sl, #672	; 0x2a0
   1e164:	vst1.32	{d16-d17}, [r0]
   1e168:	add	r0, sl, #656	; 0x290
   1e16c:	vst1.32	{d16-d17}, [r0]
   1e170:	add	r0, sl, #640	; 0x280
   1e174:	vst1.32	{d16-d17}, [r0]
   1e178:	add	r0, sl, #624	; 0x270
   1e17c:	vst1.32	{d16-d17}, [r0]
   1e180:	add	r0, sl, #608	; 0x260
   1e184:	vst1.32	{d16-d17}, [r0]
   1e188:	add	r0, sl, #592	; 0x250
   1e18c:	vst1.32	{d16-d17}, [r0]
   1e190:	add	r0, sl, #576	; 0x240
   1e194:	vst1.32	{d16-d17}, [r0]
   1e198:	add	r0, sl, #560	; 0x230
   1e19c:	vst1.32	{d16-d17}, [r0]
   1e1a0:	add	r0, sl, #544	; 0x220
   1e1a4:	vst1.32	{d16-d17}, [r0]
   1e1a8:	add	r0, sl, #528	; 0x210
   1e1ac:	vst1.32	{d16-d17}, [r0]
   1e1b0:	add	r0, sl, #512	; 0x200
   1e1b4:	vst1.32	{d16-d17}, [r0]
   1e1b8:	add	r0, sl, #496	; 0x1f0
   1e1bc:	vst1.32	{d16-d17}, [r0]
   1e1c0:	add	r0, sl, #480	; 0x1e0
   1e1c4:	vst1.32	{d16-d17}, [r0]
   1e1c8:	add	r0, sl, #464	; 0x1d0
   1e1cc:	vst1.32	{d16-d17}, [r0]
   1e1d0:	add	r0, sl, #448	; 0x1c0
   1e1d4:	vst1.32	{d16-d17}, [r0]
   1e1d8:	add	r0, sl, #432	; 0x1b0
   1e1dc:	vst1.32	{d16-d17}, [r0]
   1e1e0:	add	r0, sl, #416	; 0x1a0
   1e1e4:	vst1.32	{d16-d17}, [r0]
   1e1e8:	add	r0, sl, #400	; 0x190
   1e1ec:	vst1.32	{d16-d17}, [r0]
   1e1f0:	add	r0, sl, #384	; 0x180
   1e1f4:	vst1.32	{d16-d17}, [r0]
   1e1f8:	add	r0, sl, #368	; 0x170
   1e1fc:	vst1.32	{d16-d17}, [r0]
   1e200:	add	r0, sl, #352	; 0x160
   1e204:	vst1.32	{d16-d17}, [r0]
   1e208:	add	r0, sl, #336	; 0x150
   1e20c:	vst1.32	{d16-d17}, [r0]
   1e210:	add	r0, sl, #320	; 0x140
   1e214:	vst1.32	{d16-d17}, [r0]
   1e218:	add	r0, sl, #304	; 0x130
   1e21c:	vst1.32	{d16-d17}, [r0]
   1e220:	add	r0, sl, #288	; 0x120
   1e224:	vst1.32	{d16-d17}, [r0]
   1e228:	add	r0, sl, #272	; 0x110
   1e22c:	vst1.32	{d16-d17}, [r0]
   1e230:	add	r0, sl, #256	; 0x100
   1e234:	vst1.32	{d16-d17}, [r0]
   1e238:	add	r0, sl, #240	; 0xf0
   1e23c:	vst1.32	{d16-d17}, [r0]
   1e240:	add	r0, sl, #224	; 0xe0
   1e244:	vst1.32	{d16-d17}, [r0]
   1e248:	add	r0, sl, #208	; 0xd0
   1e24c:	vst1.32	{d16-d17}, [r0]
   1e250:	add	r0, sl, #192	; 0xc0
   1e254:	vst1.32	{d16-d17}, [r0]
   1e258:	add	r0, sl, #176	; 0xb0
   1e25c:	vst1.32	{d16-d17}, [r0]
   1e260:	add	r0, sl, #160	; 0xa0
   1e264:	vst1.32	{d16-d17}, [r0]
   1e268:	add	r0, sl, #144	; 0x90
   1e26c:	vst1.32	{d16-d17}, [r0]
   1e270:	add	r0, sl, #128	; 0x80
   1e274:	vst1.32	{d16-d17}, [r0]
   1e278:	add	r0, sl, #112	; 0x70
   1e27c:	vst1.32	{d16-d17}, [r0]
   1e280:	add	r0, sl, #96	; 0x60
   1e284:	vst1.32	{d16-d17}, [r0]
   1e288:	add	r0, sl, #80	; 0x50
   1e28c:	vst1.32	{d16-d17}, [r0]
   1e290:	add	r0, sl, #64	; 0x40
   1e294:	vst1.32	{d16-d17}, [r0]
   1e298:	add	r0, sl, #48	; 0x30
   1e29c:	vst1.32	{d16-d17}, [r0]
   1e2a0:	add	r0, sl, #32
   1e2a4:	vst1.32	{d16-d17}, [r0]
   1e2a8:	add	r0, sl, #16
   1e2ac:	vst1.32	{d16-d17}, [r0]
   1e2b0:	mov	r0, #992	; 0x3e0
   1e2b4:	vst1.32	{d16-d17}, [sl], r0
   1e2b8:	add	r0, r1, #1
   1e2bc:	add	r1, lr, #1
   1e2c0:	cmp	r1, r0
   1e2c4:	vst1.32	{d16-d17}, [sl]
   1e2c8:	movcc	r5, ip
   1e2cc:	movcc	r1, r0
   1e2d0:	cmp	r2, #0
   1e2d4:	str	r1, [sp, #16]
   1e2d8:	str	r5, [sp, #12]
   1e2dc:	beq	1e350 <__assert_fail@plt+0xca64>
   1e2e0:	mov	r6, r3
   1e2e4:	ldr	r3, [sp, #20]
   1e2e8:	mov	lr, r2
   1e2ec:	and	r0, r2, #1
   1e2f0:	mvn	r2, r8
   1e2f4:	mov	r1, #0
   1e2f8:	cmn	r2, r3
   1e2fc:	beq	1e334 <__assert_fail@plt+0xca48>
   1e300:	sub	r2, lr, r0
   1e304:	sub	r3, lr, #2
   1e308:	mov	r1, #0
   1e30c:	mov	r5, r9
   1e310:	add	r4, r3, #1
   1e314:	ldrb	r7, [r5, r1]!
   1e318:	add	r1, r1, #2
   1e31c:	cmp	r2, r1
   1e320:	str	r4, [r6, r7, lsl #2]
   1e324:	ldrb	r7, [r5, #1]
   1e328:	str	r3, [r6, r7, lsl #2]
   1e32c:	sub	r3, r3, #2
   1e330:	bne	1e30c <__assert_fail@plt+0xca20>
   1e334:	ldr	r5, [sp, #12]
   1e338:	cmp	r0, #0
   1e33c:	beq	1e350 <__assert_fail@plt+0xca64>
   1e340:	ldrb	r0, [r9, r1]
   1e344:	mvn	r1, r1
   1e348:	add	r1, lr, r1
   1e34c:	str	r1, [r6, r0, lsl #2]
   1e350:	ldr	r6, [sp, #16]
   1e354:	add	r1, r9, r5
   1e358:	mov	r0, r9
   1e35c:	mov	r2, r6
   1e360:	bl	1170c <bcmp@plt>
   1e364:	cmp	r0, #0
   1e368:	beq	1e4b4 <__assert_fail@plt+0xcbc8>
   1e36c:	ldr	r0, [sp, #24]
   1e370:	ldr	r1, [sp, #8]
   1e374:	ldr	r4, [sp, #28]
   1e378:	mov	r7, #0
   1e37c:	add	r0, r0, r1
   1e380:	sub	r2, r4, r1
   1e384:	mov	r1, #0
   1e388:	bl	117a8 <memchr@plt>
   1e38c:	sub	r1, r4, r6
   1e390:	cmp	r6, r1
   1e394:	movcs	r1, r6
   1e398:	cmp	r4, #0
   1e39c:	beq	1de40 <__assert_fail@plt+0xc554>
   1e3a0:	cmp	r0, #0
   1e3a4:	str	r1, [sp, #12]
   1e3a8:	bne	1de40 <__assert_fail@plt+0xc554>
   1e3ac:	ldr	r2, [sp, #16]
   1e3b0:	sub	r0, r4, #1
   1e3b4:	cmp	r2, r0
   1e3b8:	bcs	1e868 <__assert_fail@plt+0xcf7c>
   1e3bc:	ldr	r0, [sp, #24]
   1e3c0:	ldr	r1, [sp, #20]
   1e3c4:	mov	r5, #0
   1e3c8:	add	r0, r0, r2
   1e3cc:	str	r0, [sp, #8]
   1e3d0:	ldr	r0, [sp, #4]
   1e3d4:	add	r0, r1, r0
   1e3d8:	add	sl, r0, r2
   1e3dc:	sub	r0, r8, r1
   1e3e0:	mov	r1, r4
   1e3e4:	add	r0, r0, r2
   1e3e8:	add	r6, r0, #1
   1e3ec:	rsb	r0, r2, #1
   1e3f0:	str	r0, [sp, #20]
   1e3f4:	ldr	r0, [sp, #24]
   1e3f8:	add	r3, sp, #32
   1e3fc:	add	r0, r1, r0
   1e400:	ldrb	r2, [r0, #-1]
   1e404:	ldr	r2, [r3, r2, lsl #2]
   1e408:	cmp	r2, #0
   1e40c:	beq	1e418 <__assert_fail@plt+0xcb2c>
   1e410:	add	r5, r2, r5
   1e414:	b	1e484 <__assert_fail@plt+0xcb98>
   1e418:	ldr	r2, [sp, #8]
   1e41c:	mov	ip, r5
   1e420:	add	r3, r2, r5
   1e424:	mov	r2, #0
   1e428:	ldrb	r7, [r3, -r2]
   1e42c:	ldrb	r5, [sl, -r2]
   1e430:	cmp	r5, r7
   1e434:	bne	1e478 <__assert_fail@plt+0xcb8c>
   1e438:	sub	r2, r2, #1
   1e43c:	cmp	r6, r2
   1e440:	bne	1e428 <__assert_fail@plt+0xcb3c>
   1e444:	ldr	r5, [sp, #24]
   1e448:	ldr	r3, [sp, #20]
   1e44c:	add	r2, r5, ip
   1e450:	cmp	r3, #1
   1e454:	beq	1e8fc <__assert_fail@plt+0xd010>
   1e458:	ldrb	r7, [r2, -r3]
   1e45c:	ldrb	r5, [r9, -r3]
   1e460:	add	r3, r3, #1
   1e464:	cmp	r5, r7
   1e468:	ldr	r5, [sp, #24]
   1e46c:	beq	1e450 <__assert_fail@plt+0xcb64>
   1e470:	ldr	r2, [sp, #12]
   1e474:	b	1e47c <__assert_fail@plt+0xcb90>
   1e478:	rsb	r2, r2, #0
   1e47c:	add	r2, ip, r2
   1e480:	add	r5, r2, #1
   1e484:	add	r8, r5, r4
   1e488:	mov	r7, #0
   1e48c:	sub	r2, r8, r1
   1e490:	mov	r1, #0
   1e494:	bl	117a8 <memchr@plt>
   1e498:	cmp	r8, #0
   1e49c:	beq	1de40 <__assert_fail@plt+0xc554>
   1e4a0:	ldr	r4, [sp, #28]
   1e4a4:	cmp	r0, #0
   1e4a8:	mov	r1, r8
   1e4ac:	beq	1e3f4 <__assert_fail@plt+0xcb08>
   1e4b0:	b	1de40 <__assert_fail@plt+0xc554>
   1e4b4:	ldr	r0, [sp, #24]
   1e4b8:	ldr	r1, [sp, #8]
   1e4bc:	ldr	r4, [sp, #28]
   1e4c0:	mov	r7, #0
   1e4c4:	add	r0, r0, r1
   1e4c8:	sub	r2, r4, r1
   1e4cc:	mov	r1, #0
   1e4d0:	bl	117a8 <memchr@plt>
   1e4d4:	cmp	r4, #0
   1e4d8:	beq	1de40 <__assert_fail@plt+0xc554>
   1e4dc:	cmp	r0, #0
   1e4e0:	bne	1de40 <__assert_fail@plt+0xc554>
   1e4e4:	sub	r0, r4, r5
   1e4e8:	mov	lr, r4
   1e4ec:	sub	r8, r4, #1
   1e4f0:	mov	r4, #0
   1e4f4:	mov	r6, #0
   1e4f8:	str	r0, [sp, #20]
   1e4fc:	ldr	r0, [sp, #16]
   1e500:	mov	ip, lr
   1e504:	sub	r1, r0, #1
   1e508:	rsb	r0, r0, #1
   1e50c:	str	r1, [sp, #8]
   1e510:	str	r0, [sp, #4]
   1e514:	ldr	r0, [sp, #24]
   1e518:	add	r1, sp, #32
   1e51c:	add	r0, ip, r0
   1e520:	ldrb	r2, [r0, #-1]
   1e524:	ldr	r3, [r1, r2, lsl #2]
   1e528:	cmp	r3, #0
   1e52c:	beq	1e550 <__assert_fail@plt+0xcc64>
   1e530:	ldr	r1, [sp, #20]
   1e534:	cmp	r3, r5
   1e538:	mov	r2, r3
   1e53c:	movcc	r2, r1
   1e540:	cmp	r4, #0
   1e544:	mov	r4, #0
   1e548:	moveq	r2, r3
   1e54c:	b	1e5e0 <__assert_fail@plt+0xccf4>
   1e550:	ldr	r2, [sp, #16]
   1e554:	cmp	r2, r4
   1e558:	movcc	r2, r4
   1e55c:	cmp	r2, r8
   1e560:	bcs	1e588 <__assert_fail@plt+0xcc9c>
   1e564:	ldr	r1, [sp, #24]
   1e568:	add	r3, r1, r6
   1e56c:	ldrb	r7, [r3, r2]
   1e570:	ldrb	r5, [r9, r2]
   1e574:	cmp	r5, r7
   1e578:	bne	1e5d0 <__assert_fail@plt+0xcce4>
   1e57c:	add	r2, r2, #1
   1e580:	cmp	r2, r8
   1e584:	bcc	1e56c <__assert_fail@plt+0xcc80>
   1e588:	ldr	r1, [sp, #24]
   1e58c:	ldr	r2, [sp, #8]
   1e590:	add	r7, r1, r6
   1e594:	add	r3, r2, #1
   1e598:	cmp	r4, r3
   1e59c:	bcs	1e5b4 <__assert_fail@plt+0xccc8>
   1e5a0:	ldrb	r5, [r7, r2]
   1e5a4:	ldrb	r1, [r9, r2]
   1e5a8:	sub	r2, r2, #1
   1e5ac:	cmp	r1, r5
   1e5b0:	beq	1e594 <__assert_fail@plt+0xcca8>
   1e5b4:	ldr	r5, [sp, #12]
   1e5b8:	add	r1, r4, #1
   1e5bc:	ldr	r4, [sp, #20]
   1e5c0:	cmp	r3, r1
   1e5c4:	mov	r2, r5
   1e5c8:	bcs	1e5e0 <__assert_fail@plt+0xccf4>
   1e5cc:	b	1de40 <__assert_fail@plt+0xc554>
   1e5d0:	ldr	r1, [sp, #4]
   1e5d4:	ldr	r5, [sp, #12]
   1e5d8:	mov	r4, #0
   1e5dc:	add	r2, r1, r2
   1e5e0:	add	r6, r2, r6
   1e5e4:	mov	r1, #0
   1e5e8:	mov	r7, #0
   1e5ec:	add	sl, r6, lr
   1e5f0:	sub	r2, sl, ip
   1e5f4:	bl	117a8 <memchr@plt>
   1e5f8:	cmp	sl, #0
   1e5fc:	beq	1de40 <__assert_fail@plt+0xc554>
   1e600:	ldr	lr, [sp, #28]
   1e604:	cmp	r0, #0
   1e608:	mov	ip, sl
   1e60c:	beq	1e514 <__assert_fail@plt+0xcc28>
   1e610:	b	1de40 <__assert_fail@plt+0xc554>
   1e614:	mov	r5, #1
   1e618:	mvn	lr, #0
   1e61c:	add	r0, r1, #1
   1e620:	add	r6, lr, #1
   1e624:	cmp	r6, r0
   1e628:	movcc	r5, ip
   1e62c:	movcc	r6, r0
   1e630:	add	r1, r9, r5
   1e634:	mov	r0, r9
   1e638:	mov	r2, r6
   1e63c:	bl	1170c <bcmp@plt>
   1e640:	cmp	r0, #0
   1e644:	str	r6, [sp, #20]
   1e648:	beq	1e74c <__assert_fail@plt+0xce60>
   1e64c:	ldr	r0, [sp, #24]
   1e650:	ldr	r5, [sp, #28]
   1e654:	mov	r1, #0
   1e658:	mov	r7, #0
   1e65c:	add	r0, r0, sl
   1e660:	sub	r2, r5, sl
   1e664:	bl	117a8 <memchr@plt>
   1e668:	sub	r4, r5, r6
   1e66c:	cmp	r6, r4
   1e670:	movcc	r6, r4
   1e674:	cmp	r5, #0
   1e678:	beq	1de40 <__assert_fail@plt+0xc554>
   1e67c:	ldr	ip, [sp, #24]
   1e680:	cmp	r0, #0
   1e684:	bne	1de40 <__assert_fail@plt+0xc554>
   1e688:	ldr	r0, [sp, #20]
   1e68c:	mov	lr, r5
   1e690:	cmp	r5, r0
   1e694:	bls	1e90c <__assert_fail@plt+0xd020>
   1e698:	add	r1, ip, r0
   1e69c:	add	sl, r0, r8
   1e6a0:	rsb	r0, r0, #1
   1e6a4:	mov	r5, #0
   1e6a8:	str	r6, [sp, #20]
   1e6ac:	str	r1, [sp, #16]
   1e6b0:	mov	r1, lr
   1e6b4:	str	r0, [sp, #12]
   1e6b8:	ldr	r0, [sp, #16]
   1e6bc:	mov	r2, #0
   1e6c0:	add	r0, r0, r5
   1e6c4:	ldrb	r3, [r0, r2]
   1e6c8:	ldrb	r7, [sl, r2]
   1e6cc:	cmp	r7, r3
   1e6d0:	bne	1e708 <__assert_fail@plt+0xce1c>
   1e6d4:	add	r2, r2, #1
   1e6d8:	cmp	r4, r2
   1e6dc:	bne	1e6c4 <__assert_fail@plt+0xcdd8>
   1e6e0:	ldr	r2, [sp, #12]
   1e6e4:	add	r0, ip, r5
   1e6e8:	cmp	r2, #1
   1e6ec:	beq	1e99c <__assert_fail@plt+0xd0b0>
   1e6f0:	ldrb	r3, [r0, -r2]
   1e6f4:	ldrb	r7, [r9, -r2]
   1e6f8:	add	r2, r2, #1
   1e6fc:	cmp	r7, r3
   1e700:	beq	1e6e8 <__assert_fail@plt+0xcdfc>
   1e704:	mov	r2, r6
   1e708:	add	r2, r5, r2
   1e70c:	add	r0, ip, r1
   1e710:	mov	r7, #0
   1e714:	add	r2, r2, #1
   1e718:	add	r8, r2, lr
   1e71c:	mov	r5, r2
   1e720:	sub	r2, r8, r1
   1e724:	mov	r1, #0
   1e728:	bl	117a8 <memchr@plt>
   1e72c:	cmp	r0, #0
   1e730:	bne	1de40 <__assert_fail@plt+0xc554>
   1e734:	add	lr, sp, #20
   1e738:	cmp	r8, #0
   1e73c:	mov	r1, r8
   1e740:	ldm	lr, {r6, ip, lr}
   1e744:	bne	1e6b8 <__assert_fail@plt+0xcdcc>
   1e748:	b	1de40 <__assert_fail@plt+0xc554>
   1e74c:	ldr	r0, [sp, #24]
   1e750:	ldr	r4, [sp, #28]
   1e754:	mov	r1, #0
   1e758:	mov	r7, #0
   1e75c:	add	r0, r0, sl
   1e760:	sub	r2, r4, sl
   1e764:	bl	117a8 <memchr@plt>
   1e768:	cmp	r4, #0
   1e76c:	beq	1de40 <__assert_fail@plt+0xc554>
   1e770:	mov	r8, r5
   1e774:	ldr	r5, [sp, #24]
   1e778:	cmp	r0, #0
   1e77c:	bne	1de40 <__assert_fail@plt+0xc554>
   1e780:	sub	r0, r4, r8
   1e784:	mov	r1, r4
   1e788:	mov	r6, #0
   1e78c:	mov	ip, r4
   1e790:	mov	sl, #0
   1e794:	str	r0, [sp, #16]
   1e798:	ldr	r0, [sp, #20]
   1e79c:	sub	r2, r0, #1
   1e7a0:	rsb	r0, r0, #1
   1e7a4:	str	r2, [sp, #12]
   1e7a8:	str	r0, [sp, #8]
   1e7ac:	ldr	r0, [sp, #20]
   1e7b0:	cmp	r0, r6
   1e7b4:	movcc	r0, r6
   1e7b8:	cmp	r0, r1
   1e7bc:	bcs	1e7e0 <__assert_fail@plt+0xcef4>
   1e7c0:	add	r2, r5, sl
   1e7c4:	ldrb	r3, [r2, r0]
   1e7c8:	ldrb	r7, [r9, r0]
   1e7cc:	cmp	r7, r3
   1e7d0:	bne	1e820 <__assert_fail@plt+0xcf34>
   1e7d4:	add	r0, r0, #1
   1e7d8:	cmp	r0, r1
   1e7dc:	bcc	1e7c4 <__assert_fail@plt+0xced8>
   1e7e0:	ldr	r0, [sp, #12]
   1e7e4:	add	r7, r5, sl
   1e7e8:	add	r2, r0, #1
   1e7ec:	cmp	r6, r2
   1e7f0:	bcs	1e808 <__assert_fail@plt+0xcf1c>
   1e7f4:	ldrb	r3, [r7, r0]
   1e7f8:	ldrb	r4, [r9, r0]
   1e7fc:	sub	r0, r0, #1
   1e800:	cmp	r4, r3
   1e804:	beq	1e7e8 <__assert_fail@plt+0xcefc>
   1e808:	add	r0, r6, #1
   1e80c:	ldr	r6, [sp, #16]
   1e810:	cmp	r2, r0
   1e814:	mov	r2, r8
   1e818:	bcs	1e82c <__assert_fail@plt+0xcf40>
   1e81c:	b	1de40 <__assert_fail@plt+0xc554>
   1e820:	ldr	r2, [sp, #8]
   1e824:	mov	r6, #0
   1e828:	add	r2, r2, r0
   1e82c:	add	sl, r2, sl
   1e830:	add	r0, r5, ip
   1e834:	mov	r7, #0
   1e838:	add	r4, sl, r1
   1e83c:	mov	r1, #0
   1e840:	sub	r2, r4, ip
   1e844:	bl	117a8 <memchr@plt>
   1e848:	cmp	r4, #0
   1e84c:	beq	1de40 <__assert_fail@plt+0xc554>
   1e850:	ldr	r1, [sp, #28]
   1e854:	ldr	r5, [sp, #24]
   1e858:	cmp	r0, #0
   1e85c:	mov	ip, r4
   1e860:	beq	1e7ac <__assert_fail@plt+0xcec0>
   1e864:	b	1de40 <__assert_fail@plt+0xc554>
   1e868:	ldr	r0, [sp, #12]
   1e86c:	rsb	sl, r2, #1
   1e870:	mov	r5, #0
   1e874:	mov	r1, r4
   1e878:	add	r8, r0, #1
   1e87c:	mov	ip, r5
   1e880:	ldr	r5, [sp, #24]
   1e884:	add	r3, sp, #32
   1e888:	add	r0, r1, r5
   1e88c:	ldrb	r2, [r0, #-1]
   1e890:	ldr	r2, [r3, r2, lsl #2]
   1e894:	cmp	r2, #0
   1e898:	bne	1e8c4 <__assert_fail@plt+0xcfd8>
   1e89c:	add	r2, r5, ip
   1e8a0:	mov	r3, sl
   1e8a4:	cmp	r3, #1
   1e8a8:	beq	1e8fc <__assert_fail@plt+0xd010>
   1e8ac:	ldrb	r7, [r2, -r3]
   1e8b0:	ldrb	r6, [r9, -r3]
   1e8b4:	add	r3, r3, #1
   1e8b8:	cmp	r6, r7
   1e8bc:	beq	1e8a4 <__assert_fail@plt+0xcfb8>
   1e8c0:	mov	r2, r8
   1e8c4:	mov	r5, ip
   1e8c8:	add	r5, r2, ip
   1e8cc:	mov	r7, #0
   1e8d0:	add	r6, r5, r4
   1e8d4:	sub	r2, r6, r1
   1e8d8:	mov	r1, #0
   1e8dc:	bl	117a8 <memchr@plt>
   1e8e0:	cmp	r6, #0
   1e8e4:	beq	1de40 <__assert_fail@plt+0xc554>
   1e8e8:	ldr	r4, [sp, #28]
   1e8ec:	cmp	r0, #0
   1e8f0:	mov	r1, r6
   1e8f4:	beq	1e87c <__assert_fail@plt+0xcf90>
   1e8f8:	b	1de40 <__assert_fail@plt+0xc554>
   1e8fc:	add	r7, r5, ip
   1e900:	mov	r0, r7
   1e904:	sub	sp, fp, #28
   1e908:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e90c:	add	r1, r6, #1
   1e910:	rsb	r0, r0, #1
   1e914:	mov	r5, #0
   1e918:	mov	r4, ip
   1e91c:	mov	sl, lr
   1e920:	mov	r7, #0
   1e924:	str	r1, [sp, #20]
   1e928:	mov	r1, r0
   1e92c:	cmp	r1, #1
   1e930:	beq	1e99c <__assert_fail@plt+0xd0b0>
   1e934:	ldrb	r2, [r4, -r1]
   1e938:	ldrb	r3, [r9, -r1]
   1e93c:	add	r1, r1, #1
   1e940:	cmp	r3, r2
   1e944:	beq	1e92c <__assert_fail@plt+0xd040>
   1e948:	str	r0, [sp, #16]
   1e94c:	ldr	r0, [sp, #20]
   1e950:	mov	r1, #0
   1e954:	add	r5, r0, r5
   1e958:	mov	r6, r5
   1e95c:	add	r8, r5, lr
   1e960:	mov	r5, r0
   1e964:	add	r0, ip, sl
   1e968:	mov	r2, r5
   1e96c:	bl	117a8 <memchr@plt>
   1e970:	cmp	r8, #0
   1e974:	beq	1de40 <__assert_fail@plt+0xc554>
   1e978:	cmp	r0, #0
   1e97c:	ldr	lr, [sp, #28]
   1e980:	ldr	ip, [sp, #24]
   1e984:	ldr	r0, [sp, #16]
   1e988:	add	r4, r4, r5
   1e98c:	mov	sl, r8
   1e990:	mov	r5, r6
   1e994:	beq	1e928 <__assert_fail@plt+0xd03c>
   1e998:	b	1de40 <__assert_fail@plt+0xc554>
   1e99c:	add	r7, ip, r5
   1e9a0:	mov	r0, r7
   1e9a4:	sub	sp, fp, #28
   1e9a8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e9ac:	mov	r0, #1
   1e9b0:	b	119f0 <__assert_fail@plt+0x104>
   1e9b4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e9b8:	add	fp, sp, #28
   1e9bc:	sub	sp, sp, #12
   1e9c0:	mov	r4, r3
   1e9c4:	mov	r9, r2
   1e9c8:	mov	r7, r1
   1e9cc:	mov	r8, r0
   1e9d0:	bl	11718 <strlen@plt>
   1e9d4:	ldr	r6, [r7]
   1e9d8:	cmp	r6, #0
   1e9dc:	beq	1ea88 <__assert_fail@plt+0xd19c>
   1e9e0:	mov	r5, r0
   1e9e4:	cmp	r9, #0
   1e9e8:	beq	1ea98 <__assert_fail@plt+0xd1ac>
   1e9ec:	add	r0, r7, #4
   1e9f0:	mvn	sl, #0
   1e9f4:	mov	r7, #0
   1e9f8:	str	r9, [sp]
   1e9fc:	str	r0, [sp, #8]
   1ea00:	mov	r0, #0
   1ea04:	str	r0, [sp, #4]
   1ea08:	mov	r0, r9
   1ea0c:	b	1ea50 <__assert_fail@plt+0xd164>
   1ea10:	ldr	r0, [sp]
   1ea14:	mov	r1, r9
   1ea18:	mov	r2, r4
   1ea1c:	mla	r0, sl, r4, r0
   1ea20:	bl	1170c <bcmp@plt>
   1ea24:	ldr	r1, [sp, #4]
   1ea28:	cmp	r0, #0
   1ea2c:	movwne	r0, #1
   1ea30:	orr	r1, r1, r0
   1ea34:	str	r1, [sp, #4]
   1ea38:	ldr	r0, [sp, #8]
   1ea3c:	add	r9, r9, r4
   1ea40:	ldr	r6, [r0, r7, lsl #2]
   1ea44:	add	r7, r7, #1
   1ea48:	cmp	r6, #0
   1ea4c:	beq	1eb0c <__assert_fail@plt+0xd220>
   1ea50:	mov	r0, r6
   1ea54:	mov	r1, r8
   1ea58:	mov	r2, r5
   1ea5c:	bl	118b0 <strncmp@plt>
   1ea60:	cmp	r0, #0
   1ea64:	bne	1ea38 <__assert_fail@plt+0xd14c>
   1ea68:	mov	r0, r6
   1ea6c:	bl	11718 <strlen@plt>
   1ea70:	cmp	r0, r5
   1ea74:	beq	1ea8c <__assert_fail@plt+0xd1a0>
   1ea78:	cmn	sl, #1
   1ea7c:	bne	1ea10 <__assert_fail@plt+0xd124>
   1ea80:	mov	sl, r7
   1ea84:	b	1ea38 <__assert_fail@plt+0xd14c>
   1ea88:	mvn	r7, #0
   1ea8c:	mov	r0, r7
   1ea90:	sub	sp, fp, #28
   1ea94:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ea98:	add	r4, r7, #4
   1ea9c:	mov	r0, #0
   1eaa0:	mvn	r9, #0
   1eaa4:	mvn	sl, #0
   1eaa8:	mov	r7, #0
   1eaac:	str	r0, [sp, #4]
   1eab0:	b	1eae0 <__assert_fail@plt+0xd1f4>
   1eab4:	ldr	r1, [sp, #4]
   1eab8:	subs	r0, sl, r9
   1eabc:	movwne	r0, #1
   1eac0:	cmn	sl, #1
   1eac4:	moveq	sl, r7
   1eac8:	orr	r1, r1, r0
   1eacc:	str	r1, [sp, #4]
   1ead0:	ldr	r6, [r4, r7, lsl #2]
   1ead4:	add	r7, r7, #1
   1ead8:	cmp	r6, #0
   1eadc:	beq	1eb0c <__assert_fail@plt+0xd220>
   1eae0:	mov	r0, r6
   1eae4:	mov	r1, r8
   1eae8:	mov	r2, r5
   1eaec:	bl	118b0 <strncmp@plt>
   1eaf0:	cmp	r0, #0
   1eaf4:	bne	1ead0 <__assert_fail@plt+0xd1e4>
   1eaf8:	mov	r0, r6
   1eafc:	bl	11718 <strlen@plt>
   1eb00:	cmp	r0, r5
   1eb04:	bne	1eab4 <__assert_fail@plt+0xd1c8>
   1eb08:	b	1ea8c <__assert_fail@plt+0xd1a0>
   1eb0c:	ldr	r0, [sp, #4]
   1eb10:	tst	r0, #1
   1eb14:	mvnne	sl, #1
   1eb18:	mov	r0, sl
   1eb1c:	sub	sp, fp, #28
   1eb20:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1eb24:	push	{r4, r5, r6, r7, fp, lr}
   1eb28:	add	fp, sp, #16
   1eb2c:	mov	r5, r0
   1eb30:	ldr	r0, [r1]
   1eb34:	mvn	r4, #0
   1eb38:	cmp	r0, #0
   1eb3c:	beq	1eb68 <__assert_fail@plt+0xd27c>
   1eb40:	add	r7, r1, #4
   1eb44:	mov	r6, #0
   1eb48:	mov	r1, r5
   1eb4c:	bl	11520 <strcmp@plt>
   1eb50:	cmp	r0, #0
   1eb54:	beq	1eb70 <__assert_fail@plt+0xd284>
   1eb58:	ldr	r0, [r7, r6, lsl #2]
   1eb5c:	add	r6, r6, #1
   1eb60:	cmp	r0, #0
   1eb64:	bne	1eb48 <__assert_fail@plt+0xd25c>
   1eb68:	mov	r0, r4
   1eb6c:	pop	{r4, r5, r6, r7, fp, pc}
   1eb70:	mov	r0, r6
   1eb74:	pop	{r4, r5, r6, r7, fp, pc}
   1eb78:	push	{r4, r5, r6, sl, fp, lr}
   1eb7c:	add	fp, sp, #16
   1eb80:	sub	sp, sp, #8
   1eb84:	mov	r5, r0
   1eb88:	movw	r0, #5909	; 0x1715
   1eb8c:	mov	r4, r1
   1eb90:	movw	r1, #5936	; 0x1730
   1eb94:	cmn	r2, #1
   1eb98:	mov	r2, #5
   1eb9c:	movt	r0, #2
   1eba0:	movt	r1, #2
   1eba4:	moveq	r1, r0
   1eba8:	mov	r0, #0
   1ebac:	bl	115a4 <dcgettext@plt>
   1ebb0:	mov	r6, r0
   1ebb4:	mov	r0, #0
   1ebb8:	mov	r1, #8
   1ebbc:	mov	r2, r4
   1ebc0:	bl	1ba68 <__assert_fail@plt+0xa17c>
   1ebc4:	mov	r4, r0
   1ebc8:	mov	r0, #1
   1ebcc:	mov	r1, r5
   1ebd0:	bl	1c028 <__assert_fail@plt+0xa73c>
   1ebd4:	str	r0, [sp]
   1ebd8:	mov	r0, #0
   1ebdc:	mov	r1, #0
   1ebe0:	mov	r2, r6
   1ebe4:	mov	r3, r4
   1ebe8:	bl	11670 <error@plt>
   1ebec:	sub	sp, fp, #16
   1ebf0:	pop	{r4, r5, r6, sl, fp, pc}
   1ebf4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ebf8:	add	fp, sp, #28
   1ebfc:	sub	sp, sp, #4
   1ec00:	mov	sl, r1
   1ec04:	movw	r1, #5965	; 0x174d
   1ec08:	mov	r4, r2
   1ec0c:	mov	r6, r0
   1ec10:	mov	r0, #0
   1ec14:	mov	r2, #5
   1ec18:	mov	r8, #0
   1ec1c:	movt	r1, #2
   1ec20:	bl	115a4 <dcgettext@plt>
   1ec24:	movw	r1, #9008	; 0x2330
   1ec28:	movt	r1, #3
   1ec2c:	ldr	r1, [r1]
   1ec30:	bl	114f0 <fputs_unlocked@plt>
   1ec34:	ldr	r7, [r6]
   1ec38:	cmp	r7, #0
   1ec3c:	beq	1ecf8 <__assert_fail@plt+0xd40c>
   1ec40:	add	r0, r6, #4
   1ec44:	mov	r9, #0
   1ec48:	mov	r6, #0
   1ec4c:	str	r0, [sp]
   1ec50:	cmp	r9, #0
   1ec54:	bne	1ecac <__assert_fail@plt+0xd3c0>
   1ec58:	mov	r5, #0
   1ec5c:	movw	r0, #9008	; 0x2330
   1ec60:	movt	r0, #3
   1ec64:	ldr	r6, [r0]
   1ec68:	mov	r0, r7
   1ec6c:	bl	1c038 <__assert_fail@plt+0xa74c>
   1ec70:	movw	r2, #5986	; 0x1762
   1ec74:	mov	r3, r0
   1ec78:	mov	r0, r6
   1ec7c:	mov	r1, #1
   1ec80:	movt	r2, #2
   1ec84:	bl	1179c <__fprintf_chk@plt>
   1ec88:	add	r6, sl, r5
   1ec8c:	ldr	r0, [sp]
   1ec90:	add	r8, r8, r4
   1ec94:	ldr	r7, [r0, -r9, lsl #2]
   1ec98:	sub	r9, r9, #1
   1ec9c:	cmp	r7, #0
   1eca0:	beq	1ecf8 <__assert_fail@plt+0xd40c>
   1eca4:	cmp	r9, #0
   1eca8:	beq	1ec58 <__assert_fail@plt+0xd36c>
   1ecac:	add	r1, sl, r8
   1ecb0:	mov	r0, r6
   1ecb4:	mov	r2, r4
   1ecb8:	bl	1170c <bcmp@plt>
   1ecbc:	cmp	r0, #0
   1ecc0:	mov	r5, r8
   1ecc4:	bne	1ec5c <__assert_fail@plt+0xd370>
   1ecc8:	movw	r0, #9008	; 0x2330
   1eccc:	movt	r0, #3
   1ecd0:	ldr	r5, [r0]
   1ecd4:	mov	r0, r7
   1ecd8:	bl	1c038 <__assert_fail@plt+0xa74c>
   1ecdc:	movw	r2, #5994	; 0x176a
   1ece0:	mov	r3, r0
   1ece4:	mov	r0, r5
   1ece8:	mov	r1, #1
   1ecec:	movt	r2, #2
   1ecf0:	bl	1179c <__fprintf_chk@plt>
   1ecf4:	b	1ec8c <__assert_fail@plt+0xd3a0>
   1ecf8:	movw	r0, #9008	; 0x2330
   1ecfc:	movt	r0, #3
   1ed00:	ldr	r0, [r0]
   1ed04:	ldr	r1, [r0, #20]
   1ed08:	ldr	r2, [r0, #24]
   1ed0c:	cmp	r1, r2
   1ed10:	addcc	r2, r1, #1
   1ed14:	strcc	r2, [r0, #20]
   1ed18:	movcc	r0, #10
   1ed1c:	strbcc	r0, [r1]
   1ed20:	subcc	sp, fp, #28
   1ed24:	popcc	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ed28:	mov	r1, #10
   1ed2c:	sub	sp, fp, #28
   1ed30:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ed34:	b	117e4 <__overflow@plt>
   1ed38:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ed3c:	add	fp, sp, #28
   1ed40:	sub	sp, sp, #12
   1ed44:	mov	sl, r0
   1ed48:	ldr	r0, [fp, #16]
   1ed4c:	ldr	r9, [fp, #8]
   1ed50:	mov	r5, r3
   1ed54:	mov	r8, r2
   1ed58:	mov	r6, r1
   1ed5c:	cmp	r0, #0
   1ed60:	beq	1ed90 <__assert_fail@plt+0xd4a4>
   1ed64:	mov	r0, r6
   1ed68:	mov	r1, r8
   1ed6c:	mov	r2, r5
   1ed70:	mov	r3, r9
   1ed74:	bl	1e9b4 <__assert_fail@plt+0xd0c8>
   1ed78:	mov	r4, r0
   1ed7c:	cmn	r4, #1
   1ed80:	ble	1ede0 <__assert_fail@plt+0xd4f4>
   1ed84:	mov	r0, r4
   1ed88:	sub	sp, fp, #28
   1ed8c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ed90:	ldr	r0, [r8]
   1ed94:	movw	r7, #5909	; 0x1715
   1ed98:	str	r5, [sp, #8]
   1ed9c:	movt	r7, #2
   1eda0:	cmp	r0, #0
   1eda4:	beq	1edf8 <__assert_fail@plt+0xd50c>
   1eda8:	add	r5, r8, #4
   1edac:	mov	r4, #0
   1edb0:	mov	r1, r6
   1edb4:	bl	11520 <strcmp@plt>
   1edb8:	cmp	r0, #0
   1edbc:	beq	1edd4 <__assert_fail@plt+0xd4e8>
   1edc0:	ldr	r0, [r5, r4, lsl #2]
   1edc4:	add	r4, r4, #1
   1edc8:	cmp	r0, #0
   1edcc:	bne	1edb0 <__assert_fail@plt+0xd4c4>
   1edd0:	b	1edf8 <__assert_fail@plt+0xd50c>
   1edd4:	ldr	r5, [sp, #8]
   1edd8:	cmn	r4, #1
   1eddc:	bgt	1ed84 <__assert_fail@plt+0xd498>
   1ede0:	movw	r0, #5909	; 0x1715
   1ede4:	movw	r7, #5936	; 0x1730
   1ede8:	str	r5, [sp, #8]
   1edec:	movt	r0, #2
   1edf0:	movt	r7, #2
   1edf4:	moveq	r7, r0
   1edf8:	ldr	r5, [fp, #12]
   1edfc:	mov	r0, #0
   1ee00:	mov	r1, r7
   1ee04:	mov	r2, #5
   1ee08:	bl	115a4 <dcgettext@plt>
   1ee0c:	mov	r4, r0
   1ee10:	mov	r0, #0
   1ee14:	mov	r1, #8
   1ee18:	mov	r2, r6
   1ee1c:	bl	1ba68 <__assert_fail@plt+0xa17c>
   1ee20:	mov	r6, r0
   1ee24:	mov	r0, #1
   1ee28:	mov	r1, sl
   1ee2c:	bl	1c028 <__assert_fail@plt+0xa73c>
   1ee30:	str	r0, [sp]
   1ee34:	mov	r0, #0
   1ee38:	mov	r1, #0
   1ee3c:	mov	r2, r4
   1ee40:	mov	r3, r6
   1ee44:	bl	11670 <error@plt>
   1ee48:	ldr	r1, [sp, #8]
   1ee4c:	mov	r0, r8
   1ee50:	mov	r2, r9
   1ee54:	bl	1ebf4 <__assert_fail@plt+0xd308>
   1ee58:	blx	r5
   1ee5c:	mvn	r4, #0
   1ee60:	mov	r0, r4
   1ee64:	sub	sp, fp, #28
   1ee68:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ee6c:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1ee70:	add	fp, sp, #24
   1ee74:	ldr	r6, [r1]
   1ee78:	cmp	r6, #0
   1ee7c:	beq	1eee0 <__assert_fail@plt+0xd5f4>
   1ee80:	mov	r8, r1
   1ee84:	mov	r7, r2
   1ee88:	mov	r1, r2
   1ee8c:	mov	r2, r3
   1ee90:	mov	r4, r3
   1ee94:	mov	r9, r0
   1ee98:	bl	1170c <bcmp@plt>
   1ee9c:	cmp	r0, #0
   1eea0:	beq	1eed8 <__assert_fail@plt+0xd5ec>
   1eea4:	add	r7, r7, r4
   1eea8:	add	r5, r8, #4
   1eeac:	ldr	r6, [r5]
   1eeb0:	cmp	r6, #0
   1eeb4:	beq	1eee0 <__assert_fail@plt+0xd5f4>
   1eeb8:	mov	r0, r9
   1eebc:	mov	r1, r7
   1eec0:	mov	r2, r4
   1eec4:	bl	1170c <bcmp@plt>
   1eec8:	add	r7, r7, r4
   1eecc:	add	r5, r5, #4
   1eed0:	cmp	r0, #0
   1eed4:	bne	1eeac <__assert_fail@plt+0xd5c0>
   1eed8:	mov	r0, r6
   1eedc:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1eee0:	mov	r6, #0
   1eee4:	mov	r0, r6
   1eee8:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1eeec:	sub	r0, r0, #1
   1eef0:	ldrb	r3, [r0, #1]!
   1eef4:	cmp	r3, #47	; 0x2f
   1eef8:	beq	1eef0 <__assert_fail@plt+0xd604>
   1eefc:	mov	r2, #0
   1ef00:	mov	r1, r0
   1ef04:	uxtb	r3, r3
   1ef08:	cmp	r3, #47	; 0x2f
   1ef0c:	bne	1ef24 <__assert_fail@plt+0xd638>
   1ef10:	ldrb	r3, [r1, #1]!
   1ef14:	mov	r2, #1
   1ef18:	uxtb	r3, r3
   1ef1c:	cmp	r3, #47	; 0x2f
   1ef20:	beq	1ef10 <__assert_fail@plt+0xd624>
   1ef24:	cmp	r3, #0
   1ef28:	bxeq	lr
   1ef2c:	tst	r2, #1
   1ef30:	mov	r2, #0
   1ef34:	movne	r0, r1
   1ef38:	ldrb	r3, [r1, #1]!
   1ef3c:	uxtb	r3, r3
   1ef40:	cmp	r3, #47	; 0x2f
   1ef44:	bne	1ef24 <__assert_fail@plt+0xd638>
   1ef48:	b	1ef10 <__assert_fail@plt+0xd624>
   1ef4c:	push	{r4, sl, fp, lr}
   1ef50:	add	fp, sp, #8
   1ef54:	mov	r4, r0
   1ef58:	bl	11718 <strlen@plt>
   1ef5c:	mov	r1, r0
   1ef60:	sub	r2, r4, #1
   1ef64:	mov	r0, r1
   1ef68:	cmp	r1, #2
   1ef6c:	bcc	1ef80 <__assert_fail@plt+0xd694>
   1ef70:	ldrb	r3, [r2, r0]
   1ef74:	sub	r1, r0, #1
   1ef78:	cmp	r3, #47	; 0x2f
   1ef7c:	beq	1ef64 <__assert_fail@plt+0xd678>
   1ef80:	pop	{r4, sl, fp, pc}
   1ef84:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ef88:	add	fp, sp, #28
   1ef8c:	sub	sp, sp, #4
   1ef90:	mov	r4, r0
   1ef94:	bl	115ec <chdir@plt>
   1ef98:	cmp	r0, #0
   1ef9c:	beq	1f06c <__assert_fail@plt+0xd780>
   1efa0:	mov	r6, r0
   1efa4:	bl	11748 <__errno_location@plt>
   1efa8:	mov	r9, r0
   1efac:	ldr	r0, [r0]
   1efb0:	cmp	r0, #36	; 0x24
   1efb4:	bne	1f22c <__assert_fail@plt+0xd940>
   1efb8:	mov	r0, r4
   1efbc:	bl	11718 <strlen@plt>
   1efc0:	cmp	r0, #0
   1efc4:	beq	1f2e4 <__assert_fail@plt+0xd9f8>
   1efc8:	mov	r7, r0
   1efcc:	mov	r0, #0
   1efd0:	cmp	r0, r7, lsr #12
   1efd4:	beq	1f304 <__assert_fail@plt+0xda18>
   1efd8:	movw	r1, #5595	; 0x15db
   1efdc:	mov	r0, r4
   1efe0:	movt	r1, #2
   1efe4:	bl	118d4 <strspn@plt>
   1efe8:	cmp	r0, #0
   1efec:	beq	1f07c <__assert_fail@plt+0xd790>
   1eff0:	mov	r6, r0
   1eff4:	cmp	r0, #2
   1eff8:	bne	1f1a8 <__assert_fail@plt+0xd8bc>
   1effc:	add	r0, r4, #3
   1f000:	sub	r2, r7, #3
   1f004:	mov	r1, #47	; 0x2f
   1f008:	mov	r8, #47	; 0x2f
   1f00c:	bl	117a8 <memchr@plt>
   1f010:	cmp	r0, #0
   1f014:	beq	1f240 <__assert_fail@plt+0xd954>
   1f018:	mov	r6, r0
   1f01c:	mov	r0, #0
   1f020:	mov	r1, r4
   1f024:	mov	r2, #18688	; 0x4900
   1f028:	strb	r0, [r6]
   1f02c:	mvn	r0, #99	; 0x63
   1f030:	bl	11730 <openat64@plt>
   1f034:	cmp	r0, #0
   1f038:	strb	r8, [r6]
   1f03c:	bmi	1f238 <__assert_fail@plt+0xd94c>
   1f040:	movw	r1, #5595	; 0x15db
   1f044:	add	r6, r6, #1
   1f048:	mov	r5, r0
   1f04c:	movt	r1, #2
   1f050:	mov	r0, r6
   1f054:	bl	118d4 <strspn@plt>
   1f058:	add	r6, r6, r0
   1f05c:	ldrb	r0, [r6]
   1f060:	cmp	r0, #47	; 0x2f
   1f064:	bne	1f090 <__assert_fail@plt+0xd7a4>
   1f068:	b	1f1d8 <__assert_fail@plt+0xd8ec>
   1f06c:	mov	r6, #0
   1f070:	mov	r0, r6
   1f074:	sub	sp, fp, #28
   1f078:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f07c:	mvn	r5, #99	; 0x63
   1f080:	mov	r6, r4
   1f084:	ldrb	r0, [r6]
   1f088:	cmp	r0, #47	; 0x2f
   1f08c:	beq	1f1d8 <__assert_fail@plt+0xd8ec>
   1f090:	add	sl, r4, r7
   1f094:	cmp	r6, sl
   1f098:	bhi	1f324 <__assert_fail@plt+0xda38>
   1f09c:	sub	r0, sl, r6
   1f0a0:	str	r9, [sp]
   1f0a4:	cmp	r0, #4096	; 0x1000
   1f0a8:	blt	1f160 <__assert_fail@plt+0xd874>
   1f0ac:	movw	r9, #5595	; 0x15db
   1f0b0:	mov	r8, #0
   1f0b4:	movt	r9, #2
   1f0b8:	b	1f0e4 <__assert_fail@plt+0xd7f8>
   1f0bc:	mov	r0, #47	; 0x2f
   1f0c0:	mov	r1, r9
   1f0c4:	strb	r0, [r4], #1
   1f0c8:	mov	r0, r4
   1f0cc:	bl	118d4 <strspn@plt>
   1f0d0:	add	r6, r4, r0
   1f0d4:	mov	r5, r7
   1f0d8:	sub	r0, sl, r6
   1f0dc:	cmp	r0, #4096	; 0x1000
   1f0e0:	blt	1f164 <__assert_fail@plt+0xd878>
   1f0e4:	mov	r0, r6
   1f0e8:	mov	r1, #47	; 0x2f
   1f0ec:	mov	r2, #4096	; 0x1000
   1f0f0:	bl	1173c <memrchr@plt>
   1f0f4:	cmp	r0, #0
   1f0f8:	beq	1f258 <__assert_fail@plt+0xd96c>
   1f0fc:	mov	r4, r0
   1f100:	strb	r8, [r0], -r6
   1f104:	cmp	r0, #4096	; 0x1000
   1f108:	bge	1f2c4 <__assert_fail@plt+0xd9d8>
   1f10c:	mov	r0, r5
   1f110:	mov	r1, r6
   1f114:	mov	r2, #18688	; 0x4900
   1f118:	bl	11730 <openat64@plt>
   1f11c:	cmp	r0, #0
   1f120:	bmi	1f274 <__assert_fail@plt+0xd988>
   1f124:	mov	r7, r0
   1f128:	cmp	r5, #0
   1f12c:	bmi	1f0bc <__assert_fail@plt+0xd7d0>
   1f130:	mov	r0, r5
   1f134:	bl	118c8 <close@plt>
   1f138:	cmp	r0, #0
   1f13c:	beq	1f0bc <__assert_fail@plt+0xd7d0>
   1f140:	movw	r0, #6105	; 0x17d9
   1f144:	movw	r1, #6007	; 0x1777
   1f148:	movw	r3, #6118	; 0x17e6
   1f14c:	mov	r2, #64	; 0x40
   1f150:	movt	r0, #2
   1f154:	movt	r1, #2
   1f158:	movt	r3, #2
   1f15c:	bl	118ec <__assert_fail@plt>
   1f160:	mov	r7, r5
   1f164:	cmp	r6, sl
   1f168:	bcs	1f1f8 <__assert_fail@plt+0xd90c>
   1f16c:	mov	r0, r7
   1f170:	mov	r1, r6
   1f174:	mov	r2, #18688	; 0x4900
   1f178:	bl	11730 <openat64@plt>
   1f17c:	ldr	r9, [sp]
   1f180:	cmp	r0, #0
   1f184:	bmi	1f2b0 <__assert_fail@plt+0xd9c4>
   1f188:	mov	r5, r0
   1f18c:	cmp	r7, #0
   1f190:	bmi	1f200 <__assert_fail@plt+0xd914>
   1f194:	mov	r0, r7
   1f198:	bl	118c8 <close@plt>
   1f19c:	cmp	r0, #0
   1f1a0:	beq	1f200 <__assert_fail@plt+0xd914>
   1f1a4:	b	1f140 <__assert_fail@plt+0xd854>
   1f1a8:	movw	r1, #5595	; 0x15db
   1f1ac:	mvn	r0, #99	; 0x63
   1f1b0:	mov	r2, #18688	; 0x4900
   1f1b4:	movt	r1, #2
   1f1b8:	bl	11730 <openat64@plt>
   1f1bc:	cmp	r0, #0
   1f1c0:	bmi	1f238 <__assert_fail@plt+0xd94c>
   1f1c4:	mov	r5, r0
   1f1c8:	add	r6, r4, r6
   1f1cc:	ldrb	r0, [r6]
   1f1d0:	cmp	r0, #47	; 0x2f
   1f1d4:	bne	1f090 <__assert_fail@plt+0xd7a4>
   1f1d8:	movw	r0, #6059	; 0x17ab
   1f1dc:	movw	r1, #6007	; 0x1777
   1f1e0:	movw	r3, #6024	; 0x1788
   1f1e4:	mov	r2, #162	; 0xa2
   1f1e8:	movt	r0, #2
   1f1ec:	movt	r1, #2
   1f1f0:	movt	r3, #2
   1f1f4:	bl	118ec <__assert_fail@plt>
   1f1f8:	ldr	r9, [sp]
   1f1fc:	mov	r5, r7
   1f200:	mov	r0, r5
   1f204:	bl	11850 <fchdir@plt>
   1f208:	cmp	r0, #0
   1f20c:	bne	1f280 <__assert_fail@plt+0xd994>
   1f210:	mov	r6, #0
   1f214:	cmp	r5, #0
   1f218:	bmi	1f22c <__assert_fail@plt+0xd940>
   1f21c:	mov	r0, r5
   1f220:	bl	118c8 <close@plt>
   1f224:	cmp	r0, #0
   1f228:	bne	1f140 <__assert_fail@plt+0xd854>
   1f22c:	mov	r0, r6
   1f230:	sub	sp, fp, #28
   1f234:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f238:	ldr	r4, [r9]
   1f23c:	b	1f29c <__assert_fail@plt+0xd9b0>
   1f240:	mov	r0, #36	; 0x24
   1f244:	str	r0, [r9]
   1f248:	mvn	r6, #0
   1f24c:	mov	r0, r6
   1f250:	sub	sp, fp, #28
   1f254:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f258:	ldr	r1, [sp]
   1f25c:	mov	r0, #36	; 0x24
   1f260:	str	r0, [r1]
   1f264:	mvn	r6, #0
   1f268:	mov	r0, r6
   1f26c:	sub	sp, fp, #28
   1f270:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f274:	ldr	r9, [sp]
   1f278:	mov	r0, #47	; 0x2f
   1f27c:	strb	r0, [r4]
   1f280:	ldr	r4, [r9]
   1f284:	cmp	r5, #0
   1f288:	bmi	1f29c <__assert_fail@plt+0xd9b0>
   1f28c:	mov	r0, r5
   1f290:	bl	118c8 <close@plt>
   1f294:	cmp	r0, #0
   1f298:	bne	1f140 <__assert_fail@plt+0xd854>
   1f29c:	str	r4, [r9]
   1f2a0:	mvn	r6, #0
   1f2a4:	mov	r0, r6
   1f2a8:	sub	sp, fp, #28
   1f2ac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f2b0:	mov	r5, r7
   1f2b4:	ldr	r4, [r9]
   1f2b8:	cmp	r5, #0
   1f2bc:	bpl	1f28c <__assert_fail@plt+0xd9a0>
   1f2c0:	b	1f29c <__assert_fail@plt+0xd9b0>
   1f2c4:	movw	r0, #6086	; 0x17c6
   1f2c8:	movw	r1, #6007	; 0x1777
   1f2cc:	movw	r3, #6024	; 0x1788
   1f2d0:	mov	r2, #179	; 0xb3
   1f2d4:	movt	r0, #2
   1f2d8:	movt	r1, #2
   1f2dc:	movt	r3, #2
   1f2e0:	bl	118ec <__assert_fail@plt>
   1f2e4:	movw	r0, #5999	; 0x176f
   1f2e8:	movw	r1, #6007	; 0x1777
   1f2ec:	movw	r3, #6024	; 0x1788
   1f2f0:	mov	r2, #126	; 0x7e
   1f2f4:	movt	r0, #2
   1f2f8:	movt	r1, #2
   1f2fc:	movt	r3, #2
   1f300:	bl	118ec <__assert_fail@plt>
   1f304:	movw	r0, #6047	; 0x179f
   1f308:	movw	r1, #6007	; 0x1777
   1f30c:	movw	r3, #6024	; 0x1788
   1f310:	mov	r2, #127	; 0x7f
   1f314:	movt	r0, #2
   1f318:	movt	r1, #2
   1f31c:	movt	r3, #2
   1f320:	bl	118ec <__assert_fail@plt>
   1f324:	movw	r0, #6071	; 0x17b7
   1f328:	movw	r1, #6007	; 0x1777
   1f32c:	movw	r3, #6024	; 0x1788
   1f330:	mov	r2, #163	; 0xa3
   1f334:	movt	r0, #2
   1f338:	movt	r1, #2
   1f33c:	movt	r3, #2
   1f340:	bl	118ec <__assert_fail@plt>
   1f344:	push	{r4, r5, r6, sl, fp, lr}
   1f348:	add	fp, sp, #16
   1f34c:	mov	r4, r0
   1f350:	bl	1164c <__fpending@plt>
   1f354:	ldr	r6, [r4]
   1f358:	mov	r5, r0
   1f35c:	mov	r0, r4
   1f360:	bl	1f3c8 <__assert_fail@plt+0xdadc>
   1f364:	tst	r6, #32
   1f368:	bne	1f3a0 <__assert_fail@plt+0xdab4>
   1f36c:	cmp	r0, #0
   1f370:	mov	r4, r0
   1f374:	mvnne	r4, #0
   1f378:	cmp	r5, #0
   1f37c:	bne	1f3ac <__assert_fail@plt+0xdac0>
   1f380:	cmp	r0, #0
   1f384:	beq	1f3ac <__assert_fail@plt+0xdac0>
   1f388:	bl	11748 <__errno_location@plt>
   1f38c:	ldr	r0, [r0]
   1f390:	subs	r4, r0, #9
   1f394:	mvnne	r4, #0
   1f398:	mov	r0, r4
   1f39c:	pop	{r4, r5, r6, sl, fp, pc}
   1f3a0:	mvn	r4, #0
   1f3a4:	cmp	r0, #0
   1f3a8:	beq	1f3b4 <__assert_fail@plt+0xdac8>
   1f3ac:	mov	r0, r4
   1f3b0:	pop	{r4, r5, r6, sl, fp, pc}
   1f3b4:	bl	11748 <__errno_location@plt>
   1f3b8:	mov	r1, #0
   1f3bc:	str	r1, [r0]
   1f3c0:	mov	r0, r4
   1f3c4:	pop	{r4, r5, r6, sl, fp, pc}
   1f3c8:	push	{r4, r5, r6, sl, fp, lr}
   1f3cc:	add	fp, sp, #16
   1f3d0:	sub	sp, sp, #8
   1f3d4:	mov	r4, r0
   1f3d8:	bl	11790 <fileno@plt>
   1f3dc:	cmn	r0, #1
   1f3e0:	ble	1f454 <__assert_fail@plt+0xdb68>
   1f3e4:	mov	r0, r4
   1f3e8:	bl	116c4 <__freading@plt>
   1f3ec:	cmp	r0, #0
   1f3f0:	beq	1f41c <__assert_fail@plt+0xdb30>
   1f3f4:	mov	r0, r4
   1f3f8:	bl	11790 <fileno@plt>
   1f3fc:	mov	r1, #1
   1f400:	mov	r2, #0
   1f404:	mov	r3, #0
   1f408:	str	r1, [sp]
   1f40c:	bl	11628 <lseek64@plt>
   1f410:	and	r0, r0, r1
   1f414:	cmn	r0, #1
   1f418:	beq	1f454 <__assert_fail@plt+0xdb68>
   1f41c:	mov	r0, r4
   1f420:	bl	1f4a0 <__assert_fail@plt+0xdbb4>
   1f424:	cmp	r0, #0
   1f428:	beq	1f454 <__assert_fail@plt+0xdb68>
   1f42c:	bl	11748 <__errno_location@plt>
   1f430:	ldr	r6, [r0]
   1f434:	mov	r5, r0
   1f438:	mov	r0, r4
   1f43c:	bl	117b4 <fclose@plt>
   1f440:	cmp	r6, #0
   1f444:	strne	r6, [r5]
   1f448:	mvnne	r0, #0
   1f44c:	sub	sp, fp, #16
   1f450:	pop	{r4, r5, r6, sl, fp, pc}
   1f454:	mov	r0, r4
   1f458:	sub	sp, fp, #16
   1f45c:	pop	{r4, r5, r6, sl, fp, lr}
   1f460:	b	117b4 <fclose@plt>
   1f464:	sub	sp, sp, #8
   1f468:	push	{fp, lr}
   1f46c:	mov	fp, sp
   1f470:	sub	sp, sp, #8
   1f474:	str	r2, [fp, #8]
   1f478:	str	r3, [fp, #12]
   1f47c:	tst	r1, #64	; 0x40
   1f480:	mov	r2, #0
   1f484:	ldrne	r2, [fp, #8]
   1f488:	bl	11688 <open64@plt>
   1f48c:	bl	1f768 <__assert_fail@plt+0xde7c>
   1f490:	mov	sp, fp
   1f494:	pop	{fp, lr}
   1f498:	add	sp, sp, #8
   1f49c:	bx	lr
   1f4a0:	push	{r4, sl, fp, lr}
   1f4a4:	add	fp, sp, #8
   1f4a8:	sub	sp, sp, #8
   1f4ac:	mov	r4, r0
   1f4b0:	cmp	r0, #0
   1f4b4:	beq	1f4ec <__assert_fail@plt+0xdc00>
   1f4b8:	mov	r0, r4
   1f4bc:	bl	116c4 <__freading@plt>
   1f4c0:	cmp	r0, #0
   1f4c4:	beq	1f4ec <__assert_fail@plt+0xdc00>
   1f4c8:	ldrb	r0, [r4, #1]
   1f4cc:	tst	r0, #1
   1f4d0:	beq	1f4ec <__assert_fail@plt+0xdc00>
   1f4d4:	mov	r0, #1
   1f4d8:	mov	r2, #0
   1f4dc:	mov	r3, #0
   1f4e0:	str	r0, [sp]
   1f4e4:	mov	r0, r4
   1f4e8:	bl	1f4fc <__assert_fail@plt+0xdc10>
   1f4ec:	mov	r0, r4
   1f4f0:	sub	sp, fp, #8
   1f4f4:	pop	{r4, sl, fp, lr}
   1f4f8:	b	1152c <fflush@plt>
   1f4fc:	push	{r4, r5, r6, r7, fp, lr}
   1f500:	add	fp, sp, #16
   1f504:	sub	sp, sp, #8
   1f508:	mov	r4, r0
   1f50c:	ldr	r0, [r0, #4]
   1f510:	mov	r5, r3
   1f514:	mov	r6, r2
   1f518:	ldr	r1, [r4, #8]
   1f51c:	cmp	r1, r0
   1f520:	bne	1f53c <__assert_fail@plt+0xdc50>
   1f524:	ldrd	r0, [r4, #16]
   1f528:	cmp	r1, r0
   1f52c:	bne	1f53c <__assert_fail@plt+0xdc50>
   1f530:	ldr	r0, [r4, #36]	; 0x24
   1f534:	cmp	r0, #0
   1f538:	beq	1f554 <__assert_fail@plt+0xdc68>
   1f53c:	mov	r0, r4
   1f540:	mov	r2, r6
   1f544:	mov	r3, r5
   1f548:	sub	sp, fp, #16
   1f54c:	pop	{r4, r5, r6, r7, fp, lr}
   1f550:	b	117c0 <fseeko64@plt>
   1f554:	ldr	r7, [fp, #8]
   1f558:	mov	r0, r4
   1f55c:	bl	11790 <fileno@plt>
   1f560:	mov	r2, r6
   1f564:	mov	r3, r5
   1f568:	str	r7, [sp]
   1f56c:	bl	11628 <lseek64@plt>
   1f570:	and	r2, r0, r1
   1f574:	cmn	r2, #1
   1f578:	beq	1f598 <__assert_fail@plt+0xdcac>
   1f57c:	strd	r0, [r4, #80]	; 0x50
   1f580:	ldr	r0, [r4]
   1f584:	bic	r0, r0, #16
   1f588:	str	r0, [r4]
   1f58c:	mov	r0, #0
   1f590:	sub	sp, fp, #16
   1f594:	pop	{r4, r5, r6, r7, fp, pc}
   1f598:	mvn	r0, #0
   1f59c:	sub	sp, fp, #16
   1f5a0:	pop	{r4, r5, r6, r7, fp, pc}
   1f5a4:	push	{r4, sl, fp, lr}
   1f5a8:	add	fp, sp, #8
   1f5ac:	sub	sp, sp, #264	; 0x108
   1f5b0:	add	r1, sp, #7
   1f5b4:	movw	r2, #257	; 0x101
   1f5b8:	bl	1f6c8 <__assert_fail@plt+0xdddc>
   1f5bc:	mov	r4, #0
   1f5c0:	cmp	r0, #0
   1f5c4:	bne	1f604 <__assert_fail@plt+0xdd18>
   1f5c8:	movw	r1, #6155	; 0x180b
   1f5cc:	add	r0, sp, #7
   1f5d0:	mov	r2, #2
   1f5d4:	movt	r1, #2
   1f5d8:	bl	1170c <bcmp@plt>
   1f5dc:	cmp	r0, #0
   1f5e0:	beq	1f604 <__assert_fail@plt+0xdd18>
   1f5e4:	movw	r1, #6157	; 0x180d
   1f5e8:	add	r0, sp, #7
   1f5ec:	mov	r2, #6
   1f5f0:	movt	r1, #2
   1f5f4:	bl	1170c <bcmp@plt>
   1f5f8:	cmp	r0, #0
   1f5fc:	mov	r4, r0
   1f600:	movwne	r4, #1
   1f604:	mov	r0, r4
   1f608:	sub	sp, fp, #8
   1f60c:	pop	{r4, sl, fp, pc}
   1f610:	ldrb	r2, [r0]
   1f614:	cmp	r2, #0
   1f618:	beq	1f644 <__assert_fail@plt+0xdd58>
   1f61c:	add	r3, r0, #1
   1f620:	mov	r0, #0
   1f624:	ror	r0, r0, #23
   1f628:	uxtab	r0, r0, r2
   1f62c:	ldrb	r2, [r3], #1
   1f630:	cmp	r2, #0
   1f634:	bne	1f624 <__assert_fail@plt+0xdd38>
   1f638:	udiv	r2, r0, r1
   1f63c:	mls	r0, r2, r1, r0
   1f640:	bx	lr
   1f644:	mov	r0, #0
   1f648:	udiv	r2, r0, r1
   1f64c:	mls	r0, r2, r1, r0
   1f650:	bx	lr
   1f654:	push	{fp, lr}
   1f658:	mov	fp, sp
   1f65c:	mov	r0, #14
   1f660:	bl	11820 <nl_langinfo@plt>
   1f664:	movw	r1, #2823	; 0xb07
   1f668:	cmp	r0, #0
   1f66c:	movt	r1, #2
   1f670:	movne	r1, r0
   1f674:	movw	r0, #6163	; 0x1813
   1f678:	ldrb	r2, [r1]
   1f67c:	movt	r0, #2
   1f680:	cmp	r2, #0
   1f684:	movne	r0, r1
   1f688:	pop	{fp, pc}
   1f68c:	cmp	r2, #0
   1f690:	beq	1f6c0 <__assert_fail@plt+0xddd4>
   1f694:	mvn	r3, #0
   1f698:	udiv	r3, r3, r2
   1f69c:	cmp	r3, r1
   1f6a0:	bcs	1f6c0 <__assert_fail@plt+0xddd4>
   1f6a4:	push	{fp, lr}
   1f6a8:	mov	fp, sp
   1f6ac:	bl	11748 <__errno_location@plt>
   1f6b0:	mov	r1, #12
   1f6b4:	str	r1, [r0]
   1f6b8:	mov	r0, #0
   1f6bc:	pop	{fp, pc}
   1f6c0:	mul	r1, r2, r1
   1f6c4:	b	1dcfc <__assert_fail@plt+0xc410>
   1f6c8:	push	{r4, r5, r6, r7, fp, lr}
   1f6cc:	add	fp, sp, #16
   1f6d0:	mov	r4, r1
   1f6d4:	mov	r1, #0
   1f6d8:	mov	r6, r2
   1f6dc:	bl	117f0 <setlocale@plt>
   1f6e0:	cmp	r0, #0
   1f6e4:	beq	1f714 <__assert_fail@plt+0xde28>
   1f6e8:	mov	r7, r0
   1f6ec:	bl	11718 <strlen@plt>
   1f6f0:	cmp	r0, r6
   1f6f4:	bcs	1f730 <__assert_fail@plt+0xde44>
   1f6f8:	add	r2, r0, #1
   1f6fc:	mov	r0, r4
   1f700:	mov	r1, r7
   1f704:	bl	11574 <memcpy@plt>
   1f708:	mov	r5, #0
   1f70c:	mov	r0, r5
   1f710:	pop	{r4, r5, r6, r7, fp, pc}
   1f714:	mov	r5, #22
   1f718:	cmp	r6, #0
   1f71c:	beq	1f758 <__assert_fail@plt+0xde6c>
   1f720:	mov	r0, #0
   1f724:	strb	r0, [r4]
   1f728:	mov	r0, r5
   1f72c:	pop	{r4, r5, r6, r7, fp, pc}
   1f730:	mov	r5, #34	; 0x22
   1f734:	cmp	r6, #0
   1f738:	beq	1f758 <__assert_fail@plt+0xde6c>
   1f73c:	sub	r6, r6, #1
   1f740:	mov	r0, r4
   1f744:	mov	r1, r7
   1f748:	mov	r2, r6
   1f74c:	bl	11574 <memcpy@plt>
   1f750:	mov	r0, #0
   1f754:	strb	r0, [r4, r6]
   1f758:	mov	r0, r5
   1f75c:	pop	{r4, r5, r6, r7, fp, pc}
   1f760:	mov	r1, #0
   1f764:	b	117f0 <setlocale@plt>
   1f768:	push	{r4, r5, r6, r7, fp, lr}
   1f76c:	add	fp, sp, #16
   1f770:	mov	r4, r0
   1f774:	cmp	r0, #2
   1f778:	bhi	1f7a8 <__assert_fail@plt+0xdebc>
   1f77c:	mov	r0, r4
   1f780:	bl	1f7b0 <__assert_fail@plt+0xdec4>
   1f784:	mov	r5, r0
   1f788:	bl	11748 <__errno_location@plt>
   1f78c:	ldr	r7, [r0]
   1f790:	mov	r6, r0
   1f794:	mov	r0, r4
   1f798:	bl	118c8 <close@plt>
   1f79c:	mov	r0, r5
   1f7a0:	str	r7, [r6]
   1f7a4:	pop	{r4, r5, r6, r7, fp, pc}
   1f7a8:	mov	r0, r4
   1f7ac:	pop	{r4, r5, r6, r7, fp, pc}
   1f7b0:	mov	r1, #0
   1f7b4:	mov	r2, #3
   1f7b8:	b	1f7bc <__assert_fail@plt+0xded0>
   1f7bc:	sub	sp, sp, #8
   1f7c0:	push	{r4, r5, r6, r7, fp, lr}
   1f7c4:	add	fp, sp, #16
   1f7c8:	sub	sp, sp, #8
   1f7cc:	mov	r5, r0
   1f7d0:	add	r0, fp, #8
   1f7d4:	cmp	r1, #11
   1f7d8:	str	r2, [fp, #8]
   1f7dc:	str	r3, [fp, #12]
   1f7e0:	str	r0, [sp, #4]
   1f7e4:	bhi	1f820 <__assert_fail@plt+0xdf34>
   1f7e8:	mov	r0, #1
   1f7ec:	movw	r2, #1300	; 0x514
   1f7f0:	tst	r2, r0, lsl r1
   1f7f4:	bne	1f8e0 <__assert_fail@plt+0xdff4>
   1f7f8:	movw	r2, #2570	; 0xa0a
   1f7fc:	tst	r2, r0, lsl r1
   1f800:	bne	1f848 <__assert_fail@plt+0xdf5c>
   1f804:	cmp	r1, #0
   1f808:	bne	1f820 <__assert_fail@plt+0xdf34>
   1f80c:	ldr	r0, [sp, #4]
   1f810:	add	r1, r0, #4
   1f814:	str	r1, [sp, #4]
   1f818:	mov	r1, #0
   1f81c:	b	1f8ec <__assert_fail@plt+0xe000>
   1f820:	sub	r0, r1, #1024	; 0x400
   1f824:	cmp	r0, #10
   1f828:	bhi	1f8e0 <__assert_fail@plt+0xdff4>
   1f82c:	mov	r2, #1
   1f830:	movw	r3, #645	; 0x285
   1f834:	tst	r3, r2, lsl r0
   1f838:	bne	1f8e0 <__assert_fail@plt+0xdff4>
   1f83c:	movw	r3, #1282	; 0x502
   1f840:	tst	r3, r2, lsl r0
   1f844:	beq	1f854 <__assert_fail@plt+0xdf68>
   1f848:	mov	r0, r5
   1f84c:	bl	117d8 <fcntl64@plt>
   1f850:	b	1f8f8 <__assert_fail@plt+0xe00c>
   1f854:	cmp	r0, #6
   1f858:	bne	1f8e0 <__assert_fail@plt+0xdff4>
   1f85c:	ldr	r0, [sp, #4]
   1f860:	movw	r7, #9456	; 0x24f0
   1f864:	movt	r7, #3
   1f868:	add	r1, r0, #4
   1f86c:	str	r1, [sp, #4]
   1f870:	ldr	r6, [r0]
   1f874:	ldr	r0, [r7]
   1f878:	cmp	r0, #0
   1f87c:	bmi	1f91c <__assert_fail@plt+0xe030>
   1f880:	mov	r0, r5
   1f884:	movw	r1, #1030	; 0x406
   1f888:	mov	r2, r6
   1f88c:	bl	117d8 <fcntl64@plt>
   1f890:	mov	r4, r0
   1f894:	cmn	r0, #1
   1f898:	bgt	1f910 <__assert_fail@plt+0xe024>
   1f89c:	bl	11748 <__errno_location@plt>
   1f8a0:	ldr	r0, [r0]
   1f8a4:	cmp	r0, #22
   1f8a8:	bne	1f910 <__assert_fail@plt+0xe024>
   1f8ac:	mov	r0, r5
   1f8b0:	mov	r1, #0
   1f8b4:	mov	r2, r6
   1f8b8:	bl	117d8 <fcntl64@plt>
   1f8bc:	mov	r4, r0
   1f8c0:	cmp	r0, #0
   1f8c4:	bmi	1f8fc <__assert_fail@plt+0xe010>
   1f8c8:	mvn	r0, #0
   1f8cc:	str	r0, [r7]
   1f8d0:	mov	r0, #1
   1f8d4:	cmp	r0, #0
   1f8d8:	bne	1f948 <__assert_fail@plt+0xe05c>
   1f8dc:	b	1f8fc <__assert_fail@plt+0xe010>
   1f8e0:	ldr	r0, [sp, #4]
   1f8e4:	add	r2, r0, #4
   1f8e8:	str	r2, [sp, #4]
   1f8ec:	ldr	r2, [r0]
   1f8f0:	mov	r0, r5
   1f8f4:	bl	117d8 <fcntl64@plt>
   1f8f8:	mov	r4, r0
   1f8fc:	mov	r0, r4
   1f900:	sub	sp, fp, #16
   1f904:	pop	{r4, r5, r6, r7, fp, lr}
   1f908:	add	sp, sp, #8
   1f90c:	bx	lr
   1f910:	mov	r0, #1
   1f914:	str	r0, [r7]
   1f918:	b	1f8fc <__assert_fail@plt+0xe010>
   1f91c:	mov	r0, r5
   1f920:	mov	r1, #0
   1f924:	mov	r2, r6
   1f928:	bl	117d8 <fcntl64@plt>
   1f92c:	mov	r4, r0
   1f930:	ldr	r0, [r7]
   1f934:	add	r0, r0, #1
   1f938:	clz	r0, r0
   1f93c:	lsr	r0, r0, #5
   1f940:	cmp	r0, #0
   1f944:	beq	1f8fc <__assert_fail@plt+0xe010>
   1f948:	cmp	r4, #0
   1f94c:	bmi	1f8fc <__assert_fail@plt+0xe010>
   1f950:	mov	r0, r4
   1f954:	mov	r1, #1
   1f958:	bl	117d8 <fcntl64@plt>
   1f95c:	cmp	r0, #0
   1f960:	bmi	1f97c <__assert_fail@plt+0xe090>
   1f964:	orr	r2, r0, #1
   1f968:	mov	r0, r4
   1f96c:	mov	r1, #2
   1f970:	bl	117d8 <fcntl64@plt>
   1f974:	cmn	r0, #1
   1f978:	bne	1f8fc <__assert_fail@plt+0xe010>
   1f97c:	bl	11748 <__errno_location@plt>
   1f980:	ldr	r6, [r0]
   1f984:	mov	r5, r0
   1f988:	mov	r0, r4
   1f98c:	bl	118c8 <close@plt>
   1f990:	str	r6, [r5]
   1f994:	mvn	r4, #0
   1f998:	b	1f8fc <__assert_fail@plt+0xe010>
   1f99c:	eor	r1, r1, #-2147483648	; 0x80000000
   1f9a0:	b	1f9a8 <__assert_fail@plt+0xe0bc>
   1f9a4:	eor	r3, r3, #-2147483648	; 0x80000000
   1f9a8:	push	{r4, r5, lr}
   1f9ac:	lsl	r4, r1, #1
   1f9b0:	lsl	r5, r3, #1
   1f9b4:	teq	r4, r5
   1f9b8:	teqeq	r0, r2
   1f9bc:	orrsne	ip, r4, r0
   1f9c0:	orrsne	ip, r5, r2
   1f9c4:	mvnsne	ip, r4, asr #21
   1f9c8:	mvnsne	ip, r5, asr #21
   1f9cc:	beq	1fbb8 <__assert_fail@plt+0xe2cc>
   1f9d0:	lsr	r4, r4, #21
   1f9d4:	rsbs	r5, r4, r5, lsr #21
   1f9d8:	rsblt	r5, r5, #0
   1f9dc:	ble	1f9fc <__assert_fail@plt+0xe110>
   1f9e0:	add	r4, r4, r5
   1f9e4:	eor	r2, r0, r2
   1f9e8:	eor	r3, r1, r3
   1f9ec:	eor	r0, r2, r0
   1f9f0:	eor	r1, r3, r1
   1f9f4:	eor	r2, r0, r2
   1f9f8:	eor	r3, r1, r3
   1f9fc:	cmp	r5, #54	; 0x36
   1fa00:	pophi	{r4, r5, pc}
   1fa04:	tst	r1, #-2147483648	; 0x80000000
   1fa08:	lsl	r1, r1, #12
   1fa0c:	mov	ip, #1048576	; 0x100000
   1fa10:	orr	r1, ip, r1, lsr #12
   1fa14:	beq	1fa20 <__assert_fail@plt+0xe134>
   1fa18:	rsbs	r0, r0, #0
   1fa1c:	rsc	r1, r1, #0
   1fa20:	tst	r3, #-2147483648	; 0x80000000
   1fa24:	lsl	r3, r3, #12
   1fa28:	orr	r3, ip, r3, lsr #12
   1fa2c:	beq	1fa38 <__assert_fail@plt+0xe14c>
   1fa30:	rsbs	r2, r2, #0
   1fa34:	rsc	r3, r3, #0
   1fa38:	teq	r4, r5
   1fa3c:	beq	1fba0 <__assert_fail@plt+0xe2b4>
   1fa40:	sub	r4, r4, #1
   1fa44:	rsbs	lr, r5, #32
   1fa48:	blt	1fa64 <__assert_fail@plt+0xe178>
   1fa4c:	lsl	ip, r2, lr
   1fa50:	adds	r0, r0, r2, lsr r5
   1fa54:	adc	r1, r1, #0
   1fa58:	adds	r0, r0, r3, lsl lr
   1fa5c:	adcs	r1, r1, r3, asr r5
   1fa60:	b	1fa80 <__assert_fail@plt+0xe194>
   1fa64:	sub	r5, r5, #32
   1fa68:	add	lr, lr, #32
   1fa6c:	cmp	r2, #1
   1fa70:	lsl	ip, r3, lr
   1fa74:	orrcs	ip, ip, #2
   1fa78:	adds	r0, r0, r3, asr r5
   1fa7c:	adcs	r1, r1, r3, asr #31
   1fa80:	and	r5, r1, #-2147483648	; 0x80000000
   1fa84:	bpl	1fa94 <__assert_fail@plt+0xe1a8>
   1fa88:	rsbs	ip, ip, #0
   1fa8c:	rscs	r0, r0, #0
   1fa90:	rsc	r1, r1, #0
   1fa94:	cmp	r1, #1048576	; 0x100000
   1fa98:	bcc	1fad8 <__assert_fail@plt+0xe1ec>
   1fa9c:	cmp	r1, #2097152	; 0x200000
   1faa0:	bcc	1fac0 <__assert_fail@plt+0xe1d4>
   1faa4:	lsrs	r1, r1, #1
   1faa8:	rrxs	r0, r0
   1faac:	rrx	ip, ip
   1fab0:	add	r4, r4, #1
   1fab4:	lsl	r2, r4, #21
   1fab8:	cmn	r2, #4194304	; 0x400000
   1fabc:	bcs	1fc18 <__assert_fail@plt+0xe32c>
   1fac0:	cmp	ip, #-2147483648	; 0x80000000
   1fac4:	lsrseq	ip, r0, #1
   1fac8:	adcs	r0, r0, #0
   1facc:	adc	r1, r1, r4, lsl #20
   1fad0:	orr	r1, r1, r5
   1fad4:	pop	{r4, r5, pc}
   1fad8:	lsls	ip, ip, #1
   1fadc:	adcs	r0, r0, r0
   1fae0:	adc	r1, r1, r1
   1fae4:	tst	r1, #1048576	; 0x100000
   1fae8:	sub	r4, r4, #1
   1faec:	bne	1fac0 <__assert_fail@plt+0xe1d4>
   1faf0:	teq	r1, #0
   1faf4:	moveq	r1, r0
   1faf8:	moveq	r0, #0
   1fafc:	clz	r3, r1
   1fb00:	addeq	r3, r3, #32
   1fb04:	sub	r3, r3, #11
   1fb08:	subs	r2, r3, #32
   1fb0c:	bge	1fb30 <__assert_fail@plt+0xe244>
   1fb10:	adds	r2, r2, #12
   1fb14:	ble	1fb2c <__assert_fail@plt+0xe240>
   1fb18:	add	ip, r2, #20
   1fb1c:	rsb	r2, r2, #12
   1fb20:	lsl	r0, r1, ip
   1fb24:	lsr	r1, r1, r2
   1fb28:	b	1fb40 <__assert_fail@plt+0xe254>
   1fb2c:	add	r2, r2, #20
   1fb30:	rsble	ip, r2, #32
   1fb34:	lsl	r1, r1, r2
   1fb38:	orrle	r1, r1, r0, lsr ip
   1fb3c:	lslle	r0, r0, r2
   1fb40:	subs	r4, r4, r3
   1fb44:	addge	r1, r1, r4, lsl #20
   1fb48:	orrge	r1, r1, r5
   1fb4c:	popge	{r4, r5, pc}
   1fb50:	mvn	r4, r4
   1fb54:	subs	r4, r4, #31
   1fb58:	bge	1fb94 <__assert_fail@plt+0xe2a8>
   1fb5c:	adds	r4, r4, #12
   1fb60:	bgt	1fb7c <__assert_fail@plt+0xe290>
   1fb64:	add	r4, r4, #20
   1fb68:	rsb	r2, r4, #32
   1fb6c:	lsr	r0, r0, r4
   1fb70:	orr	r0, r0, r1, lsl r2
   1fb74:	orr	r1, r5, r1, lsr r4
   1fb78:	pop	{r4, r5, pc}
   1fb7c:	rsb	r4, r4, #12
   1fb80:	rsb	r2, r4, #32
   1fb84:	lsr	r0, r0, r2
   1fb88:	orr	r0, r0, r1, lsl r4
   1fb8c:	mov	r1, r5
   1fb90:	pop	{r4, r5, pc}
   1fb94:	lsr	r0, r1, r4
   1fb98:	mov	r1, r5
   1fb9c:	pop	{r4, r5, pc}
   1fba0:	teq	r4, #0
   1fba4:	eor	r3, r3, #1048576	; 0x100000
   1fba8:	eoreq	r1, r1, #1048576	; 0x100000
   1fbac:	addeq	r4, r4, #1
   1fbb0:	subne	r5, r5, #1
   1fbb4:	b	1fa40 <__assert_fail@plt+0xe154>
   1fbb8:	mvns	ip, r4, asr #21
   1fbbc:	mvnsne	ip, r5, asr #21
   1fbc0:	beq	1fc28 <__assert_fail@plt+0xe33c>
   1fbc4:	teq	r4, r5
   1fbc8:	teqeq	r0, r2
   1fbcc:	beq	1fbe0 <__assert_fail@plt+0xe2f4>
   1fbd0:	orrs	ip, r4, r0
   1fbd4:	moveq	r1, r3
   1fbd8:	moveq	r0, r2
   1fbdc:	pop	{r4, r5, pc}
   1fbe0:	teq	r1, r3
   1fbe4:	movne	r1, #0
   1fbe8:	movne	r0, #0
   1fbec:	popne	{r4, r5, pc}
   1fbf0:	lsrs	ip, r4, #21
   1fbf4:	bne	1fc08 <__assert_fail@plt+0xe31c>
   1fbf8:	lsls	r0, r0, #1
   1fbfc:	adcs	r1, r1, r1
   1fc00:	orrcs	r1, r1, #-2147483648	; 0x80000000
   1fc04:	pop	{r4, r5, pc}
   1fc08:	adds	r4, r4, #4194304	; 0x400000
   1fc0c:	addcc	r1, r1, #1048576	; 0x100000
   1fc10:	popcc	{r4, r5, pc}
   1fc14:	and	r5, r1, #-2147483648	; 0x80000000
   1fc18:	orr	r1, r5, #2130706432	; 0x7f000000
   1fc1c:	orr	r1, r1, #15728640	; 0xf00000
   1fc20:	mov	r0, #0
   1fc24:	pop	{r4, r5, pc}
   1fc28:	mvns	ip, r4, asr #21
   1fc2c:	movne	r1, r3
   1fc30:	movne	r0, r2
   1fc34:	mvnseq	ip, r5, asr #21
   1fc38:	movne	r3, r1
   1fc3c:	movne	r2, r0
   1fc40:	orrs	r4, r0, r1, lsl #12
   1fc44:	orrseq	r5, r2, r3, lsl #12
   1fc48:	teqeq	r1, r3
   1fc4c:	orrne	r1, r1, #524288	; 0x80000
   1fc50:	pop	{r4, r5, pc}
   1fc54:	teq	r0, #0
   1fc58:	moveq	r1, #0
   1fc5c:	bxeq	lr
   1fc60:	push	{r4, r5, lr}
   1fc64:	mov	r4, #1024	; 0x400
   1fc68:	add	r4, r4, #50	; 0x32
   1fc6c:	mov	r5, #0
   1fc70:	mov	r1, #0
   1fc74:	b	1faf0 <__assert_fail@plt+0xe204>
   1fc78:	teq	r0, #0
   1fc7c:	moveq	r1, #0
   1fc80:	bxeq	lr
   1fc84:	push	{r4, r5, lr}
   1fc88:	mov	r4, #1024	; 0x400
   1fc8c:	add	r4, r4, #50	; 0x32
   1fc90:	ands	r5, r0, #-2147483648	; 0x80000000
   1fc94:	rsbmi	r0, r0, #0
   1fc98:	mov	r1, #0
   1fc9c:	b	1faf0 <__assert_fail@plt+0xe204>
   1fca0:	lsls	r2, r0, #1
   1fca4:	asr	r1, r2, #3
   1fca8:	rrx	r1, r1
   1fcac:	lsl	r0, r2, #28
   1fcb0:	andsne	r3, r2, #-16777216	; 0xff000000
   1fcb4:	teqne	r3, #-16777216	; 0xff000000
   1fcb8:	eorne	r1, r1, #939524096	; 0x38000000
   1fcbc:	bxne	lr
   1fcc0:	bics	r2, r2, #-16777216	; 0xff000000
   1fcc4:	bxeq	lr
   1fcc8:	teq	r3, #-16777216	; 0xff000000
   1fccc:	orreq	r1, r1, #524288	; 0x80000
   1fcd0:	bxeq	lr
   1fcd4:	push	{r4, r5, lr}
   1fcd8:	mov	r4, #896	; 0x380
   1fcdc:	and	r5, r1, #-2147483648	; 0x80000000
   1fce0:	bic	r1, r1, #-2147483648	; 0x80000000
   1fce4:	b	1faf0 <__assert_fail@plt+0xe204>
   1fce8:	orrs	r2, r0, r1
   1fcec:	bxeq	lr
   1fcf0:	push	{r4, r5, lr}
   1fcf4:	mov	r5, #0
   1fcf8:	b	1fd18 <__assert_fail@plt+0xe42c>
   1fcfc:	orrs	r2, r0, r1
   1fd00:	bxeq	lr
   1fd04:	push	{r4, r5, lr}
   1fd08:	ands	r5, r1, #-2147483648	; 0x80000000
   1fd0c:	bpl	1fd18 <__assert_fail@plt+0xe42c>
   1fd10:	rsbs	r0, r0, #0
   1fd14:	rsc	r1, r1, #0
   1fd18:	mov	r4, #1024	; 0x400
   1fd1c:	add	r4, r4, #50	; 0x32
   1fd20:	lsrs	ip, r1, #22
   1fd24:	beq	1fa94 <__assert_fail@plt+0xe1a8>
   1fd28:	mov	r2, #3
   1fd2c:	lsrs	ip, ip, #3
   1fd30:	addne	r2, r2, #3
   1fd34:	lsrs	ip, ip, #3
   1fd38:	addne	r2, r2, #3
   1fd3c:	add	r2, r2, ip, lsr #3
   1fd40:	rsb	r3, r2, #32
   1fd44:	lsl	ip, r0, r3
   1fd48:	lsr	r0, r0, r2
   1fd4c:	orr	r0, r0, r1, lsl r3
   1fd50:	lsr	r1, r1, r2
   1fd54:	add	r4, r4, r2
   1fd58:	b	1fa94 <__assert_fail@plt+0xe1a8>
   1fd5c:	cmp	r3, #0
   1fd60:	cmpeq	r2, #0
   1fd64:	bne	1fd7c <__assert_fail@plt+0xe490>
   1fd68:	cmp	r1, #0
   1fd6c:	cmpeq	r0, #0
   1fd70:	mvnne	r1, #0
   1fd74:	mvnne	r0, #0
   1fd78:	b	1fd98 <__assert_fail@plt+0xe4ac>
   1fd7c:	sub	sp, sp, #8
   1fd80:	push	{sp, lr}
   1fd84:	bl	1fde8 <__assert_fail@plt+0xe4fc>
   1fd88:	ldr	lr, [sp, #4]
   1fd8c:	add	sp, sp, #8
   1fd90:	pop	{r2, r3}
   1fd94:	bx	lr
   1fd98:	push	{r1, lr}
   1fd9c:	mov	r0, #8
   1fda0:	bl	114fc <raise@plt>
   1fda4:	pop	{r1, pc}
   1fda8:	vmov	d6, r0, r1
   1fdac:	vldr	d7, [pc, #36]	; 1fdd8 <__assert_fail@plt+0xe4ec>
   1fdb0:	vldr	d5, [pc, #40]	; 1fde0 <__assert_fail@plt+0xe4f4>
   1fdb4:	vmul.f64	d7, d6, d7
   1fdb8:	vcvt.u32.f64	s14, d7
   1fdbc:	vcvt.f64.u32	d4, s14
   1fdc0:	vmov	r1, s14
   1fdc4:	vmls.f64	d6, d4, d5
   1fdc8:	vcvt.u32.f64	s15, d6
   1fdcc:	vmov	r0, s15
   1fdd0:	bx	lr
   1fdd4:	nop			; (mov r0, r0)
   1fdd8:	andeq	r0, r0, r0
   1fddc:	ldclcc	0, cr0, [r0]
   1fde0:	andeq	r0, r0, r0
   1fde4:	mvnsmi	r0, r0
   1fde8:	cmp	r1, r3
   1fdec:	cmpeq	r0, r2
   1fdf0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1fdf4:	mov	r4, r0
   1fdf8:	movcc	r0, #0
   1fdfc:	mov	r5, r1
   1fe00:	ldr	lr, [sp, #36]	; 0x24
   1fe04:	movcc	r1, r0
   1fe08:	bcc	1ff04 <__assert_fail@plt+0xe618>
   1fe0c:	cmp	r3, #0
   1fe10:	clzeq	ip, r2
   1fe14:	clzne	ip, r3
   1fe18:	addeq	ip, ip, #32
   1fe1c:	cmp	r5, #0
   1fe20:	clzeq	r1, r4
   1fe24:	addeq	r1, r1, #32
   1fe28:	clzne	r1, r5
   1fe2c:	sub	ip, ip, r1
   1fe30:	sub	sl, ip, #32
   1fe34:	lsl	r9, r3, ip
   1fe38:	rsb	fp, ip, #32
   1fe3c:	orr	r9, r9, r2, lsl sl
   1fe40:	orr	r9, r9, r2, lsr fp
   1fe44:	lsl	r8, r2, ip
   1fe48:	cmp	r5, r9
   1fe4c:	cmpeq	r4, r8
   1fe50:	movcc	r0, #0
   1fe54:	movcc	r1, r0
   1fe58:	bcc	1fe74 <__assert_fail@plt+0xe588>
   1fe5c:	mov	r0, #1
   1fe60:	subs	r4, r4, r8
   1fe64:	lsl	r1, r0, sl
   1fe68:	orr	r1, r1, r0, lsr fp
   1fe6c:	lsl	r0, r0, ip
   1fe70:	sbc	r5, r5, r9
   1fe74:	cmp	ip, #0
   1fe78:	beq	1ff04 <__assert_fail@plt+0xe618>
   1fe7c:	lsr	r6, r8, #1
   1fe80:	orr	r6, r6, r9, lsl #31
   1fe84:	lsr	r7, r9, #1
   1fe88:	mov	r2, ip
   1fe8c:	b	1feb0 <__assert_fail@plt+0xe5c4>
   1fe90:	subs	r3, r4, r6
   1fe94:	sbc	r8, r5, r7
   1fe98:	adds	r3, r3, r3
   1fe9c:	adc	r8, r8, r8
   1fea0:	adds	r4, r3, #1
   1fea4:	adc	r5, r8, #0
   1fea8:	subs	r2, r2, #1
   1feac:	beq	1fecc <__assert_fail@plt+0xe5e0>
   1feb0:	cmp	r5, r7
   1feb4:	cmpeq	r4, r6
   1feb8:	bcs	1fe90 <__assert_fail@plt+0xe5a4>
   1febc:	adds	r4, r4, r4
   1fec0:	adc	r5, r5, r5
   1fec4:	subs	r2, r2, #1
   1fec8:	bne	1feb0 <__assert_fail@plt+0xe5c4>
   1fecc:	lsr	r3, r4, ip
   1fed0:	orr	r3, r3, r5, lsl fp
   1fed4:	lsr	r2, r5, ip
   1fed8:	orr	r3, r3, r5, lsr sl
   1fedc:	adds	r0, r0, r4
   1fee0:	mov	r4, r3
   1fee4:	lsl	r3, r2, ip
   1fee8:	orr	r3, r3, r4, lsl sl
   1feec:	lsl	ip, r4, ip
   1fef0:	orr	r3, r3, r4, lsr fp
   1fef4:	adc	r1, r1, r5
   1fef8:	subs	r0, r0, ip
   1fefc:	mov	r5, r2
   1ff00:	sbc	r1, r1, r3
   1ff04:	cmp	lr, #0
   1ff08:	strdne	r4, [lr]
   1ff0c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ff10:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1ff14:	mov	r7, r0
   1ff18:	ldr	r6, [pc, #72]	; 1ff68 <__assert_fail@plt+0xe67c>
   1ff1c:	ldr	r5, [pc, #72]	; 1ff6c <__assert_fail@plt+0xe680>
   1ff20:	add	r6, pc, r6
   1ff24:	add	r5, pc, r5
   1ff28:	sub	r6, r6, r5
   1ff2c:	mov	r8, r1
   1ff30:	mov	r9, r2
   1ff34:	bl	114c4 <calloc@plt-0x20>
   1ff38:	asrs	r6, r6, #2
   1ff3c:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   1ff40:	mov	r4, #0
   1ff44:	add	r4, r4, #1
   1ff48:	ldr	r3, [r5], #4
   1ff4c:	mov	r2, r9
   1ff50:	mov	r1, r8
   1ff54:	mov	r0, r7
   1ff58:	blx	r3
   1ff5c:	cmp	r6, r4
   1ff60:	bne	1ff44 <__assert_fail@plt+0xe658>
   1ff64:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1ff68:	andeq	r1, r1, r4, ror #31
   1ff6c:	ldrdeq	r1, [r1], -ip
   1ff70:	bx	lr
   1ff74:	ldr	r3, [pc, #12]	; 1ff88 <__assert_fail@plt+0xe69c>
   1ff78:	mov	r1, #0
   1ff7c:	add	r3, pc, r3
   1ff80:	ldr	r2, [r3]
   1ff84:	b	11760 <__cxa_atexit@plt>
   1ff88:	strdeq	r2, [r1], -r0

Disassembly of section .fini:

0001ff8c <.fini>:
   1ff8c:	push	{r3, lr}
   1ff90:	pop	{r3, pc}
