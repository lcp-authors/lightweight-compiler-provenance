
../repos/coreutils/src/nice:     file format elf32-littlearm


Disassembly of section .init:

00010ba0 <.init>:
   10ba0:	push	{r3, lr}
   10ba4:	bl	1122c <__assert_fail@plt+0x438>
   10ba8:	pop	{r3, pc}

Disassembly of section .plt:

00010bac <calloc@plt-0x14>:
   10bac:	push	{lr}		; (str lr, [sp, #-4]!)
   10bb0:	ldr	lr, [pc, #4]	; 10bbc <calloc@plt-0x4>
   10bb4:	add	lr, pc, lr
   10bb8:	ldr	pc, [lr, #8]!
   10bbc:	andeq	r5, r1, r4, asr #8

00010bc0 <calloc@plt>:
   10bc0:	add	ip, pc, #0, 12
   10bc4:	add	ip, ip, #86016	; 0x15000
   10bc8:	ldr	pc, [ip, #1092]!	; 0x444

00010bcc <fputs_unlocked@plt>:
   10bcc:	add	ip, pc, #0, 12
   10bd0:	add	ip, ip, #86016	; 0x15000
   10bd4:	ldr	pc, [ip, #1084]!	; 0x43c

00010bd8 <strcmp@plt>:
   10bd8:	add	ip, pc, #0, 12
   10bdc:	add	ip, ip, #86016	; 0x15000
   10be0:	ldr	pc, [ip, #1076]!	; 0x434

00010be4 <strtol@plt>:
   10be4:	add	ip, pc, #0, 12
   10be8:	add	ip, ip, #86016	; 0x15000
   10bec:	ldr	pc, [ip, #1068]!	; 0x42c

00010bf0 <fflush@plt>:
   10bf0:	add	ip, pc, #0, 12
   10bf4:	add	ip, ip, #86016	; 0x15000
   10bf8:	ldr	pc, [ip, #1060]!	; 0x424

00010bfc <free@plt>:
   10bfc:	add	ip, pc, #0, 12
   10c00:	add	ip, ip, #86016	; 0x15000
   10c04:	ldr	pc, [ip, #1052]!	; 0x41c

00010c08 <_exit@plt>:
   10c08:	add	ip, pc, #0, 12
   10c0c:	add	ip, ip, #86016	; 0x15000
   10c10:	ldr	pc, [ip, #1044]!	; 0x414

00010c14 <memcpy@plt>:
   10c14:	add	ip, pc, #0, 12
   10c18:	add	ip, ip, #86016	; 0x15000
   10c1c:	ldr	pc, [ip, #1036]!	; 0x40c

00010c20 <execvp@plt>:
   10c20:	add	ip, pc, #0, 12
   10c24:	add	ip, ip, #86016	; 0x15000
   10c28:	ldr	pc, [ip, #1028]!	; 0x404

00010c2c <mbsinit@plt>:
   10c2c:	add	ip, pc, #0, 12
   10c30:	add	ip, ip, #86016	; 0x15000
   10c34:	ldr	pc, [ip, #1020]!	; 0x3fc

00010c38 <memcmp@plt>:
   10c38:	add	ip, pc, #0, 12
   10c3c:	add	ip, ip, #86016	; 0x15000
   10c40:	ldr	pc, [ip, #1012]!	; 0x3f4

00010c44 <fputc_unlocked@plt>:
   10c44:	add	ip, pc, #0, 12
   10c48:	add	ip, ip, #86016	; 0x15000
   10c4c:	ldr	pc, [ip, #1004]!	; 0x3ec

00010c50 <dcgettext@plt>:
   10c50:	add	ip, pc, #0, 12
   10c54:	add	ip, ip, #86016	; 0x15000
   10c58:	ldr	pc, [ip, #996]!	; 0x3e4

00010c5c <realloc@plt>:
   10c5c:	add	ip, pc, #0, 12
   10c60:	add	ip, ip, #86016	; 0x15000
   10c64:	ldr	pc, [ip, #988]!	; 0x3dc

00010c68 <getpriority@plt>:
   10c68:	add	ip, pc, #0, 12
   10c6c:	add	ip, ip, #86016	; 0x15000
   10c70:	ldr	pc, [ip, #980]!	; 0x3d4

00010c74 <textdomain@plt>:
   10c74:	add	ip, pc, #0, 12
   10c78:	add	ip, ip, #86016	; 0x15000
   10c7c:	ldr	pc, [ip, #972]!	; 0x3cc

00010c80 <iswprint@plt>:
   10c80:	add	ip, pc, #0, 12
   10c84:	add	ip, ip, #86016	; 0x15000
   10c88:	ldr	pc, [ip, #964]!	; 0x3c4

00010c8c <fwrite@plt>:
   10c8c:	add	ip, pc, #0, 12
   10c90:	add	ip, ip, #86016	; 0x15000
   10c94:	ldr	pc, [ip, #956]!	; 0x3bc

00010c98 <lseek64@plt>:
   10c98:	add	ip, pc, #0, 12
   10c9c:	add	ip, ip, #86016	; 0x15000
   10ca0:	ldr	pc, [ip, #948]!	; 0x3b4

00010ca4 <__ctype_get_mb_cur_max@plt>:
   10ca4:	add	ip, pc, #0, 12
   10ca8:	add	ip, ip, #86016	; 0x15000
   10cac:	ldr	pc, [ip, #940]!	; 0x3ac

00010cb0 <__fpending@plt>:
   10cb0:	add	ip, pc, #0, 12
   10cb4:	add	ip, ip, #86016	; 0x15000
   10cb8:	ldr	pc, [ip, #932]!	; 0x3a4

00010cbc <mbrtowc@plt>:
   10cbc:	add	ip, pc, #0, 12
   10cc0:	add	ip, ip, #86016	; 0x15000
   10cc4:	ldr	pc, [ip, #924]!	; 0x39c

00010cc8 <error@plt>:
   10cc8:	add	ip, pc, #0, 12
   10ccc:	add	ip, ip, #86016	; 0x15000
   10cd0:	ldr	pc, [ip, #916]!	; 0x394

00010cd4 <setpriority@plt>:
   10cd4:	add	ip, pc, #0, 12
   10cd8:	add	ip, ip, #86016	; 0x15000
   10cdc:	ldr	pc, [ip, #908]!	; 0x38c

00010ce0 <malloc@plt>:
   10ce0:	add	ip, pc, #0, 12
   10ce4:	add	ip, ip, #86016	; 0x15000
   10ce8:	ldr	pc, [ip, #900]!	; 0x384

00010cec <__libc_start_main@plt>:
   10cec:	add	ip, pc, #0, 12
   10cf0:	add	ip, ip, #86016	; 0x15000
   10cf4:	ldr	pc, [ip, #892]!	; 0x37c

00010cf8 <__freading@plt>:
   10cf8:	add	ip, pc, #0, 12
   10cfc:	add	ip, ip, #86016	; 0x15000
   10d00:	ldr	pc, [ip, #884]!	; 0x374

00010d04 <__gmon_start__@plt>:
   10d04:	add	ip, pc, #0, 12
   10d08:	add	ip, ip, #86016	; 0x15000
   10d0c:	ldr	pc, [ip, #876]!	; 0x36c

00010d10 <getopt_long@plt>:
   10d10:	add	ip, pc, #0, 12
   10d14:	add	ip, ip, #86016	; 0x15000
   10d18:	ldr	pc, [ip, #868]!	; 0x364

00010d1c <__ctype_b_loc@plt>:
   10d1c:	add	ip, pc, #0, 12
   10d20:	add	ip, ip, #86016	; 0x15000
   10d24:	ldr	pc, [ip, #860]!	; 0x35c

00010d28 <exit@plt>:
   10d28:	add	ip, pc, #0, 12
   10d2c:	add	ip, ip, #86016	; 0x15000
   10d30:	ldr	pc, [ip, #852]!	; 0x354

00010d34 <strlen@plt>:
   10d34:	add	ip, pc, #0, 12
   10d38:	add	ip, ip, #86016	; 0x15000
   10d3c:	ldr	pc, [ip, #844]!	; 0x34c

00010d40 <strchr@plt>:
   10d40:	add	ip, pc, #0, 12
   10d44:	add	ip, ip, #86016	; 0x15000
   10d48:	ldr	pc, [ip, #836]!	; 0x344

00010d4c <__errno_location@plt>:
   10d4c:	add	ip, pc, #0, 12
   10d50:	add	ip, ip, #86016	; 0x15000
   10d54:	ldr	pc, [ip, #828]!	; 0x33c

00010d58 <__cxa_atexit@plt>:
   10d58:	add	ip, pc, #0, 12
   10d5c:	add	ip, ip, #86016	; 0x15000
   10d60:	ldr	pc, [ip, #820]!	; 0x334

00010d64 <memset@plt>:
   10d64:	add	ip, pc, #0, 12
   10d68:	add	ip, ip, #86016	; 0x15000
   10d6c:	ldr	pc, [ip, #812]!	; 0x32c

00010d70 <__printf_chk@plt>:
   10d70:	add	ip, pc, #0, 12
   10d74:	add	ip, ip, #86016	; 0x15000
   10d78:	ldr	pc, [ip, #804]!	; 0x324

00010d7c <fileno@plt>:
   10d7c:	add	ip, pc, #0, 12
   10d80:	add	ip, ip, #86016	; 0x15000
   10d84:	ldr	pc, [ip, #796]!	; 0x31c

00010d88 <__fprintf_chk@plt>:
   10d88:	add	ip, pc, #0, 12
   10d8c:	add	ip, ip, #86016	; 0x15000
   10d90:	ldr	pc, [ip, #788]!	; 0x314

00010d94 <fclose@plt>:
   10d94:	add	ip, pc, #0, 12
   10d98:	add	ip, ip, #86016	; 0x15000
   10d9c:	ldr	pc, [ip, #780]!	; 0x30c

00010da0 <fseeko64@plt>:
   10da0:	add	ip, pc, #0, 12
   10da4:	add	ip, ip, #86016	; 0x15000
   10da8:	ldr	pc, [ip, #772]!	; 0x304

00010dac <setlocale@plt>:
   10dac:	add	ip, pc, #0, 12
   10db0:	add	ip, ip, #86016	; 0x15000
   10db4:	ldr	pc, [ip, #764]!	; 0x2fc

00010db8 <strrchr@plt>:
   10db8:	add	ip, pc, #0, 12
   10dbc:	add	ip, ip, #86016	; 0x15000
   10dc0:	ldr	pc, [ip, #756]!	; 0x2f4

00010dc4 <nl_langinfo@plt>:
   10dc4:	add	ip, pc, #0, 12
   10dc8:	add	ip, ip, #86016	; 0x15000
   10dcc:	ldr	pc, [ip, #748]!	; 0x2ec

00010dd0 <bindtextdomain@plt>:
   10dd0:	add	ip, pc, #0, 12
   10dd4:	add	ip, ip, #86016	; 0x15000
   10dd8:	ldr	pc, [ip, #740]!	; 0x2e4

00010ddc <strncmp@plt>:
   10ddc:	add	ip, pc, #0, 12
   10de0:	add	ip, ip, #86016	; 0x15000
   10de4:	ldr	pc, [ip, #732]!	; 0x2dc

00010de8 <abort@plt>:
   10de8:	add	ip, pc, #0, 12
   10dec:	add	ip, ip, #86016	; 0x15000
   10df0:	ldr	pc, [ip, #724]!	; 0x2d4

00010df4 <__assert_fail@plt>:
   10df4:	add	ip, pc, #0, 12
   10df8:	add	ip, ip, #86016	; 0x15000
   10dfc:	ldr	pc, [ip, #716]!	; 0x2cc

Disassembly of section .text:

00010e00 <.text>:
   10e00:	strd	r4, [sp, #-36]!	; 0xffffffdc
   10e04:	mov	r5, r1
   10e08:	strd	r6, [sp, #8]
   10e0c:	mov	r7, r0
   10e10:	strd	r8, [sp, #16]
   10e14:	strd	sl, [sp, #24]
   10e18:	str	lr, [sp, #32]
   10e1c:	sub	sp, sp, #20
   10e20:	ldr	r0, [r1]
   10e24:	bl	11770 <__assert_fail@plt+0x97c>
   10e28:	movw	r1, #21540	; 0x5424
   10e2c:	movt	r1, #1
   10e30:	mov	r0, #6
   10e34:	bl	10dac <setlocale@plt>
   10e38:	movw	r1, #22028	; 0x560c
   10e3c:	movt	r1, #1
   10e40:	movw	r0, #21860	; 0x5564
   10e44:	movt	r0, #1
   10e48:	bl	10dd0 <bindtextdomain@plt>
   10e4c:	movw	r0, #21860	; 0x5564
   10e50:	movt	r0, #1
   10e54:	bl	10c74 <textdomain@plt>
   10e58:	mov	r2, #125	; 0x7d
   10e5c:	movw	r3, #24796	; 0x60dc
   10e60:	movt	r3, #2
   10e64:	movw	r0, #5764	; 0x1684
   10e68:	movt	r0, #1
   10e6c:	str	r2, [r3]
   10e70:	bl	15194 <__assert_fail@plt+0x43a0>
   10e74:	cmp	r7, #1
   10e78:	ble	11038 <__assert_fail@plt+0x244>
   10e7c:	ldr	r9, [pc, #872]	; 111ec <__assert_fail@plt+0x3f8>
   10e80:	movw	r6, #24872	; 0x6128
   10e84:	movt	r6, #2
   10e88:	movw	r8, #22052	; 0x5624
   10e8c:	movt	r8, #1
   10e90:	mov	r4, #1
   10e94:	mov	sl, #0
   10e98:	ldr	r2, [r5, r4, lsl #2]
   10e9c:	lsl	ip, r4, #2
   10ea0:	ldrb	r3, [r2]
   10ea4:	cmp	r3, #45	; 0x2d
   10ea8:	bne	10edc <__assert_fail@plt+0xe8>
   10eac:	ldrb	r3, [r2, #1]
   10eb0:	sub	r3, r3, #43	; 0x2b
   10eb4:	and	r3, r3, #253	; 0xfd
   10eb8:	cmp	r3, #0
   10ebc:	movne	r3, r2
   10ec0:	addeq	r3, r2, #1
   10ec4:	ldrb	r3, [r3, #1]
   10ec8:	sub	r3, r3, #48	; 0x30
   10ecc:	cmp	r3, #9
   10ed0:	addls	sl, r2, #1
   10ed4:	addls	r4, r4, #1
   10ed8:	bls	1102c <__assert_fail@plt+0x238>
   10edc:	ldr	lr, [r5]
   10ee0:	sub	ip, ip, #4
   10ee4:	mov	fp, #0
   10ee8:	sub	r0, r4, #1
   10eec:	mov	r3, r9
   10ef0:	add	r1, r5, ip
   10ef4:	sub	r0, r7, r0
   10ef8:	str	fp, [sp]
   10efc:	mov	r2, r8
   10f00:	str	lr, [r5, ip]
   10f04:	str	fp, [r6]
   10f08:	bl	10d10 <getopt_long@plt>
   10f0c:	ldr	r3, [r6]
   10f10:	cmn	r0, #2
   10f14:	sub	r3, r3, #1
   10f18:	add	r4, r4, r3
   10f1c:	beq	11184 <__assert_fail@plt+0x390>
   10f20:	ble	10fd0 <__assert_fail@plt+0x1dc>
   10f24:	cmn	r0, #1
   10f28:	bne	11018 <__assert_fail@plt+0x224>
   10f2c:	cmp	sl, #0
   10f30:	beq	1103c <__assert_fail@plt+0x248>
   10f34:	movw	r0, #21540	; 0x5424
   10f38:	movt	r0, #1
   10f3c:	add	r3, sp, #12
   10f40:	mov	r2, #10
   10f44:	mov	r1, #0
   10f48:	str	r0, [sp]
   10f4c:	mov	r0, sl
   10f50:	bl	144c8 <__assert_fail@plt+0x36d4>
   10f54:	cmp	r0, #1
   10f58:	bhi	111b8 <__assert_fail@plt+0x3c4>
   10f5c:	ldr	r6, [sp, #12]
   10f60:	mvn	r3, #38	; 0x26
   10f64:	cmp	r6, #39	; 0x27
   10f68:	movge	r6, #39	; 0x27
   10f6c:	cmp	r6, r3
   10f70:	movlt	r6, r3
   10f74:	cmp	r4, r7
   10f78:	beq	1118c <__assert_fail@plt+0x398>
   10f7c:	bl	10d4c <__errno_location@plt>
   10f80:	mov	r7, #0
   10f84:	mov	r8, r0
   10f88:	mov	r1, r7
   10f8c:	mov	r0, r7
   10f90:	str	r7, [r8]
   10f94:	bl	10c68 <getpriority@plt>
   10f98:	cmn	r0, #1
   10f9c:	bne	110a0 <__assert_fail@plt+0x2ac>
   10fa0:	ldr	r9, [r8]
   10fa4:	cmp	r9, r7
   10fa8:	beq	110a0 <__assert_fail@plt+0x2ac>
   10fac:	mov	r2, #5
   10fb0:	mov	r0, r7
   10fb4:	movw	r1, #22140	; 0x567c
   10fb8:	movt	r1, #1
   10fbc:	bl	10c50 <dcgettext@plt>
   10fc0:	mov	r2, r0
   10fc4:	mov	r1, r9
   10fc8:	mov	r0, #125	; 0x7d
   10fcc:	bl	10cc8 <error@plt>
   10fd0:	cmn	r0, #3
   10fd4:	bne	111b0 <__assert_fail@plt+0x3bc>
   10fd8:	movw	r2, #22056	; 0x5628
   10fdc:	movt	r2, #1
   10fe0:	movw	r3, #24792	; 0x60d8
   10fe4:	movt	r3, #2
   10fe8:	movw	r0, #24884	; 0x6134
   10fec:	movt	r0, #2
   10ff0:	stm	sp, {r2, fp}
   10ff4:	movw	r1, #21040	; 0x5230
   10ff8:	movt	r1, #1
   10ffc:	ldr	r0, [r0]
   11000:	movw	r2, #21856	; 0x5560
   11004:	movt	r2, #1
   11008:	ldr	r3, [r3]
   1100c:	bl	13efc <__assert_fail@plt+0x3108>
   11010:	mov	r0, fp
   11014:	bl	10d28 <exit@plt>
   11018:	cmp	r0, #110	; 0x6e
   1101c:	bne	111b0 <__assert_fail@plt+0x3bc>
   11020:	movw	r3, #24888	; 0x6138
   11024:	movt	r3, #2
   11028:	ldr	sl, [r3]
   1102c:	cmp	r4, r7
   11030:	blt	10e98 <__assert_fail@plt+0xa4>
   11034:	b	10f2c <__assert_fail@plt+0x138>
   11038:	mov	r4, #1
   1103c:	bl	10d4c <__errno_location@plt>
   11040:	cmp	r4, r7
   11044:	mov	r6, r0
   11048:	movne	r6, #10
   1104c:	bne	10f7c <__assert_fail@plt+0x188>
   11050:	mov	r4, #0
   11054:	mov	r1, r4
   11058:	mov	r0, r4
   1105c:	str	r4, [r6]
   11060:	bl	10c68 <getpriority@plt>
   11064:	cmn	r0, #1
   11068:	mov	r2, r0
   1106c:	bne	11150 <__assert_fail@plt+0x35c>
   11070:	ldr	r5, [r6]
   11074:	cmp	r5, r4
   11078:	beq	11150 <__assert_fail@plt+0x35c>
   1107c:	mov	r2, #5
   11080:	mov	r0, r4
   11084:	movw	r1, #22140	; 0x567c
   11088:	movt	r1, #1
   1108c:	bl	10c50 <dcgettext@plt>
   11090:	mov	r2, r0
   11094:	mov	r1, r5
   11098:	mov	r0, #125	; 0x7d
   1109c:	bl	10cc8 <error@plt>
   110a0:	mov	r1, #0
   110a4:	add	r2, r0, r6
   110a8:	mov	r0, r1
   110ac:	bl	10cd4 <setpriority@plt>
   110b0:	cmp	r0, #0
   110b4:	beq	1110c <__assert_fail@plt+0x318>
   110b8:	ldr	r6, [r8]
   110bc:	mov	r2, #5
   110c0:	mov	r0, #0
   110c4:	movw	r1, #22164	; 0x5694
   110c8:	movt	r1, #1
   110cc:	cmp	r6, #1
   110d0:	cmpne	r6, #13
   110d4:	movne	r7, #125	; 0x7d
   110d8:	moveq	r7, r0
   110dc:	bl	10c50 <dcgettext@plt>
   110e0:	mov	r2, r0
   110e4:	mov	r1, r6
   110e8:	mov	r0, r7
   110ec:	bl	10cc8 <error@plt>
   110f0:	movw	r3, #24880	; 0x6130
   110f4:	movt	r3, #2
   110f8:	ldr	r3, [r3]
   110fc:	ldr	r3, [r3]
   11100:	tst	r3, #32
   11104:	movne	r4, #125	; 0x7d
   11108:	bne	11164 <__assert_fail@plt+0x370>
   1110c:	lsl	r7, r4, #2
   11110:	ldr	r0, [r5, r4, lsl #2]
   11114:	add	r1, r5, r7
   11118:	bl	10c20 <execvp@plt>
   1111c:	ldr	r6, [r8]
   11120:	ldr	r0, [r5, r7]
   11124:	cmp	r6, #2
   11128:	moveq	r4, #127	; 0x7f
   1112c:	movne	r4, #126	; 0x7e
   11130:	bl	13a60 <__assert_fail@plt+0x2c6c>
   11134:	mov	r3, r0
   11138:	mov	r1, r6
   1113c:	movw	r2, #22340	; 0x5744
   11140:	movt	r2, #1
   11144:	mov	r0, #0
   11148:	bl	10cc8 <error@plt>
   1114c:	b	11164 <__assert_fail@plt+0x370>
   11150:	movw	r1, #22160	; 0x5690
   11154:	movt	r1, #1
   11158:	mov	r0, #1
   1115c:	mov	r4, #0
   11160:	bl	10d70 <__printf_chk@plt>
   11164:	mov	r0, r4
   11168:	add	sp, sp, #20
   1116c:	ldrd	r4, [sp]
   11170:	ldrd	r6, [sp, #8]
   11174:	ldrd	r8, [sp, #16]
   11178:	ldrd	sl, [sp, #24]
   1117c:	add	sp, sp, #32
   11180:	pop	{pc}		; (ldr pc, [sp], #4)
   11184:	mov	r0, fp
   11188:	bl	112e0 <__assert_fail@plt+0x4ec>
   1118c:	mov	r2, #5
   11190:	movw	r1, #22096	; 0x5650
   11194:	movt	r1, #1
   11198:	mov	r0, #0
   1119c:	bl	10c50 <dcgettext@plt>
   111a0:	mov	r1, #0
   111a4:	mov	r2, r0
   111a8:	mov	r0, r1
   111ac:	bl	10cc8 <error@plt>
   111b0:	mov	r0, #125	; 0x7d
   111b4:	bl	112e0 <__assert_fail@plt+0x4ec>
   111b8:	mov	r2, #5
   111bc:	movw	r1, #22072	; 0x5638
   111c0:	movt	r1, #1
   111c4:	mov	r0, #0
   111c8:	bl	10c50 <dcgettext@plt>
   111cc:	mov	r4, r0
   111d0:	mov	r0, sl
   111d4:	bl	13a60 <__assert_fail@plt+0x2c6c>
   111d8:	mov	r3, r0
   111dc:	mov	r2, r4
   111e0:	mov	r1, #0
   111e4:	mov	r0, #125	; 0x7d
   111e8:	bl	10cc8 <error@plt>
   111ec:	strdeq	r5, [r1], -r0
   111f0:	mov	fp, #0
   111f4:	mov	lr, #0
   111f8:	pop	{r1}		; (ldr r1, [sp], #4)
   111fc:	mov	r2, sp
   11200:	push	{r2}		; (str r2, [sp, #-4]!)
   11204:	push	{r0}		; (str r0, [sp, #-4]!)
   11208:	ldr	ip, [pc, #16]	; 11220 <__assert_fail@plt+0x42c>
   1120c:	push	{ip}		; (str ip, [sp, #-4]!)
   11210:	ldr	r0, [pc, #12]	; 11224 <__assert_fail@plt+0x430>
   11214:	ldr	r3, [pc, #12]	; 11228 <__assert_fail@plt+0x434>
   11218:	bl	10cec <__libc_start_main@plt>
   1121c:	bl	10de8 <abort@plt>
   11220:	muleq	r1, r0, r1
   11224:	andeq	r0, r1, r0, lsl #28
   11228:	andeq	r5, r1, r0, lsr r1
   1122c:	ldr	r3, [pc, #20]	; 11248 <__assert_fail@plt+0x454>
   11230:	ldr	r2, [pc, #20]	; 1124c <__assert_fail@plt+0x458>
   11234:	add	r3, pc, r3
   11238:	ldr	r2, [r3, r2]
   1123c:	cmp	r2, #0
   11240:	bxeq	lr
   11244:	b	10d04 <__gmon_start__@plt>
   11248:	andeq	r4, r1, r4, asr #27
   1124c:	andeq	r0, r0, ip, asr #1
   11250:	ldr	r0, [pc, #24]	; 11270 <__assert_fail@plt+0x47c>
   11254:	ldr	r3, [pc, #24]	; 11274 <__assert_fail@plt+0x480>
   11258:	cmp	r3, r0
   1125c:	bxeq	lr
   11260:	ldr	r3, [pc, #16]	; 11278 <__assert_fail@plt+0x484>
   11264:	cmp	r3, #0
   11268:	bxeq	lr
   1126c:	bx	r3
   11270:	andeq	r6, r2, r0, lsr #2
   11274:	andeq	r6, r2, r0, lsr #2
   11278:	andeq	r0, r0, r0
   1127c:	ldr	r0, [pc, #36]	; 112a8 <__assert_fail@plt+0x4b4>
   11280:	ldr	r1, [pc, #36]	; 112ac <__assert_fail@plt+0x4b8>
   11284:	sub	r1, r1, r0
   11288:	asr	r1, r1, #2
   1128c:	add	r1, r1, r1, lsr #31
   11290:	asrs	r1, r1, #1
   11294:	bxeq	lr
   11298:	ldr	r3, [pc, #16]	; 112b0 <__assert_fail@plt+0x4bc>
   1129c:	cmp	r3, #0
   112a0:	bxeq	lr
   112a4:	bx	r3
   112a8:	andeq	r6, r2, r0, lsr #2
   112ac:	andeq	r6, r2, r0, lsr #2
   112b0:	andeq	r0, r0, r0
   112b4:	push	{r4, lr}
   112b8:	ldr	r4, [pc, #24]	; 112d8 <__assert_fail@plt+0x4e4>
   112bc:	ldrb	r3, [r4]
   112c0:	cmp	r3, #0
   112c4:	popne	{r4, pc}
   112c8:	bl	11250 <__assert_fail@plt+0x45c>
   112cc:	mov	r3, #1
   112d0:	strb	r3, [r4]
   112d4:	pop	{r4, pc}
   112d8:	andeq	r6, r2, ip, lsr r1
   112dc:	b	1127c <__assert_fail@plt+0x488>
   112e0:	subs	r6, r0, #0
   112e4:	str	r7, [sp, #-8]!
   112e8:	str	lr, [sp, #4]
   112ec:	sub	sp, sp, #56	; 0x38
   112f0:	beq	11338 <__assert_fail@plt+0x544>
   112f4:	movw	r3, #24880	; 0x6130
   112f8:	movt	r3, #2
   112fc:	ldr	r4, [r3]
   11300:	mov	r2, #5
   11304:	movw	r1, #21048	; 0x5238
   11308:	movt	r1, #1
   1130c:	mov	r0, #0
   11310:	bl	10c50 <dcgettext@plt>
   11314:	movw	r3, #24904	; 0x6148
   11318:	movt	r3, #2
   1131c:	mov	r2, r0
   11320:	mov	r1, #1
   11324:	ldr	r3, [r3]
   11328:	mov	r0, r4
   1132c:	bl	10d88 <__fprintf_chk@plt>
   11330:	mov	r0, r6
   11334:	bl	10d28 <exit@plt>
   11338:	mov	r2, #5
   1133c:	movw	r1, #21088	; 0x5260
   11340:	movt	r1, #1
   11344:	movw	r7, #24884	; 0x6134
   11348:	movt	r7, #2
   1134c:	bl	10c50 <dcgettext@plt>
   11350:	movw	r3, #24904	; 0x6148
   11354:	movt	r3, #2
   11358:	mov	r1, r0
   1135c:	mov	r0, #1
   11360:	ldr	r2, [r3]
   11364:	bl	10d70 <__printf_chk@plt>
   11368:	mov	r2, #5
   1136c:	movw	r1, #21128	; 0x5288
   11370:	movt	r1, #1
   11374:	mov	r0, r6
   11378:	bl	10c50 <dcgettext@plt>
   1137c:	mov	r1, r0
   11380:	mov	r3, #19
   11384:	mvn	r2, #19
   11388:	mov	r0, #1
   1138c:	bl	10d70 <__printf_chk@plt>
   11390:	mov	r2, #5
   11394:	movw	r1, #21352	; 0x5368
   11398:	movt	r1, #1
   1139c:	mov	r0, r6
   113a0:	bl	10c50 <dcgettext@plt>
   113a4:	ldr	r1, [r7]
   113a8:	bl	10bcc <fputs_unlocked@plt>
   113ac:	mov	r2, #5
   113b0:	movw	r1, #21428	; 0x53b4
   113b4:	movt	r1, #1
   113b8:	mov	r0, r6
   113bc:	bl	10c50 <dcgettext@plt>
   113c0:	ldr	r1, [r7]
   113c4:	bl	10bcc <fputs_unlocked@plt>
   113c8:	mov	r2, #5
   113cc:	movw	r1, #21496	; 0x53f8
   113d0:	movt	r1, #1
   113d4:	mov	r0, r6
   113d8:	bl	10c50 <dcgettext@plt>
   113dc:	ldr	r1, [r7]
   113e0:	bl	10bcc <fputs_unlocked@plt>
   113e4:	mov	r2, #5
   113e8:	movw	r1, #21544	; 0x5428
   113ec:	movt	r1, #1
   113f0:	mov	r0, r6
   113f4:	bl	10c50 <dcgettext@plt>
   113f8:	ldr	r1, [r7]
   113fc:	bl	10bcc <fputs_unlocked@plt>
   11400:	mov	r2, #5
   11404:	movw	r1, #21600	; 0x5460
   11408:	movt	r1, #1
   1140c:	mov	r0, r6
   11410:	bl	10c50 <dcgettext@plt>
   11414:	mov	r1, r0
   11418:	movw	r2, #21040	; 0x5230
   1141c:	movt	r2, #1
   11420:	mov	r0, #1
   11424:	bl	10d70 <__printf_chk@plt>
   11428:	movw	lr, #20920	; 0x51b8
   1142c:	movt	lr, #1
   11430:	ldr	ip, [lr]
   11434:	ldr	r4, [lr, #4]
   11438:	ldrd	r8, [lr, #8]
   1143c:	subs	r1, ip, #0
   11440:	str	ip, [sp]
   11444:	ldrd	r2, [lr, #16]
   11448:	str	r4, [sp, #4]
   1144c:	ldrd	r4, [lr, #24]
   11450:	strd	r8, [sp, #8]
   11454:	ldrd	r8, [lr, #32]
   11458:	strd	r2, [sp, #16]
   1145c:	ldrd	r2, [lr, #40]	; 0x28
   11460:	strd	r4, [sp, #24]
   11464:	ldrd	r4, [lr, #48]	; 0x30
   11468:	strd	r8, [sp, #32]
   1146c:	strd	r2, [sp, #40]	; 0x28
   11470:	strd	r4, [sp, #48]	; 0x30
   11474:	movwne	r5, #21040	; 0x5230
   11478:	mov	r4, sp
   1147c:	movtne	r5, #1
   11480:	bne	11578 <__assert_fail@plt+0x784>
   11484:	ldr	r4, [r4, #4]
   11488:	movw	r1, #21792	; 0x5520
   1148c:	movt	r1, #1
   11490:	mov	r2, #5
   11494:	cmp	r4, #0
   11498:	beq	1158c <__assert_fail@plt+0x798>
   1149c:	mov	r0, #0
   114a0:	bl	10c50 <dcgettext@plt>
   114a4:	mov	r1, r0
   114a8:	movw	r3, #21816	; 0x5538
   114ac:	movt	r3, #1
   114b0:	movw	r2, #21856	; 0x5560
   114b4:	movt	r2, #1
   114b8:	mov	r0, #1
   114bc:	bl	10d70 <__printf_chk@plt>
   114c0:	mov	r1, #0
   114c4:	mov	r0, #5
   114c8:	bl	10dac <setlocale@plt>
   114cc:	cmp	r0, #0
   114d0:	movweq	r5, #21040	; 0x5230
   114d4:	movteq	r5, #1
   114d8:	beq	114fc <__assert_fail@plt+0x708>
   114dc:	movw	r1, #21872	; 0x5570
   114e0:	movt	r1, #1
   114e4:	mov	r2, #3
   114e8:	movw	r5, #21040	; 0x5230
   114ec:	movt	r5, #1
   114f0:	bl	10ddc <strncmp@plt>
   114f4:	cmp	r0, #0
   114f8:	bne	11644 <__assert_fail@plt+0x850>
   114fc:	mov	r2, #5
   11500:	movw	r1, #21948	; 0x55bc
   11504:	movt	r1, #1
   11508:	mov	r0, #0
   1150c:	bl	10c50 <dcgettext@plt>
   11510:	mov	r1, r0
   11514:	movw	r3, #21040	; 0x5230
   11518:	movt	r3, #1
   1151c:	movw	r2, #21816	; 0x5538
   11520:	movt	r2, #1
   11524:	mov	r0, #1
   11528:	bl	10d70 <__printf_chk@plt>
   1152c:	mov	r2, #5
   11530:	movw	r1, #21976	; 0x55d8
   11534:	movt	r1, #1
   11538:	mov	r0, #0
   1153c:	bl	10c50 <dcgettext@plt>
   11540:	movw	r2, #22192	; 0x56b0
   11544:	movt	r2, #1
   11548:	cmp	r4, r5
   1154c:	movw	r3, #21540	; 0x5424
   11550:	movt	r3, #1
   11554:	mov	r1, r0
   11558:	moveq	r3, r2
   1155c:	mov	r2, r4
   11560:	mov	r0, #1
   11564:	bl	10d70 <__printf_chk@plt>
   11568:	b	11330 <__assert_fail@plt+0x53c>
   1156c:	ldr	r1, [r4, #8]!
   11570:	cmp	r1, #0
   11574:	beq	11484 <__assert_fail@plt+0x690>
   11578:	mov	r0, r5
   1157c:	bl	10bd8 <strcmp@plt>
   11580:	cmp	r0, #0
   11584:	bne	1156c <__assert_fail@plt+0x778>
   11588:	b	11484 <__assert_fail@plt+0x690>
   1158c:	mov	r0, r4
   11590:	bl	10c50 <dcgettext@plt>
   11594:	mov	r1, r0
   11598:	movw	r3, #21816	; 0x5538
   1159c:	movt	r3, #1
   115a0:	movw	r2, #21856	; 0x5560
   115a4:	movt	r2, #1
   115a8:	mov	r0, #1
   115ac:	bl	10d70 <__printf_chk@plt>
   115b0:	mov	r1, r4
   115b4:	mov	r0, #5
   115b8:	bl	10dac <setlocale@plt>
   115bc:	cmp	r0, #0
   115c0:	beq	115dc <__assert_fail@plt+0x7e8>
   115c4:	movw	r1, #21872	; 0x5570
   115c8:	movt	r1, #1
   115cc:	mov	r2, #3
   115d0:	bl	10ddc <strncmp@plt>
   115d4:	cmp	r0, #0
   115d8:	bne	11638 <__assert_fail@plt+0x844>
   115dc:	mov	r2, #5
   115e0:	movw	r1, #21948	; 0x55bc
   115e4:	movt	r1, #1
   115e8:	mov	r0, #0
   115ec:	bl	10c50 <dcgettext@plt>
   115f0:	mov	r1, r0
   115f4:	movw	r3, #21040	; 0x5230
   115f8:	movt	r3, #1
   115fc:	movw	r2, #21816	; 0x5538
   11600:	movt	r2, #1
   11604:	mov	r0, #1
   11608:	bl	10d70 <__printf_chk@plt>
   1160c:	movw	r1, #21976	; 0x55d8
   11610:	movt	r1, #1
   11614:	mov	r2, #5
   11618:	mov	r0, #0
   1161c:	bl	10c50 <dcgettext@plt>
   11620:	movw	r4, #21040	; 0x5230
   11624:	movt	r4, #1
   11628:	movw	r3, #22192	; 0x56b0
   1162c:	movt	r3, #1
   11630:	mov	r1, r0
   11634:	b	1155c <__assert_fail@plt+0x768>
   11638:	movw	r5, #21040	; 0x5230
   1163c:	movt	r5, #1
   11640:	mov	r4, r5
   11644:	mov	r2, #5
   11648:	movw	r1, #21876	; 0x5574
   1164c:	movt	r1, #1
   11650:	mov	r0, #0
   11654:	bl	10c50 <dcgettext@plt>
   11658:	ldr	r1, [r7]
   1165c:	bl	10bcc <fputs_unlocked@plt>
   11660:	b	114fc <__assert_fail@plt+0x708>
   11664:	movw	r3, #24896	; 0x6140
   11668:	movt	r3, #2
   1166c:	str	r0, [r3]
   11670:	bx	lr
   11674:	movw	r3, #24896	; 0x6140
   11678:	movt	r3, #2
   1167c:	strb	r0, [r3, #4]
   11680:	bx	lr
   11684:	movw	r3, #24884	; 0x6134
   11688:	movt	r3, #2
   1168c:	strd	r4, [sp, #-16]!
   11690:	ldr	r0, [r3]
   11694:	str	r6, [sp, #8]
   11698:	str	lr, [sp, #12]
   1169c:	sub	sp, sp, #8
   116a0:	bl	14c54 <__assert_fail@plt+0x3e60>
   116a4:	cmp	r0, #0
   116a8:	beq	116d4 <__assert_fail@plt+0x8e0>
   116ac:	movw	r4, #24896	; 0x6140
   116b0:	movt	r4, #2
   116b4:	ldrb	r6, [r4, #4]
   116b8:	bl	10d4c <__errno_location@plt>
   116bc:	mov	r5, r0
   116c0:	cmp	r6, #0
   116c4:	beq	11700 <__assert_fail@plt+0x90c>
   116c8:	ldr	r3, [r0]
   116cc:	cmp	r3, #32
   116d0:	bne	11700 <__assert_fail@plt+0x90c>
   116d4:	movw	r3, #24880	; 0x6130
   116d8:	movt	r3, #2
   116dc:	ldr	r0, [r3]
   116e0:	bl	14c54 <__assert_fail@plt+0x3e60>
   116e4:	cmp	r0, #0
   116e8:	bne	11748 <__assert_fail@plt+0x954>
   116ec:	add	sp, sp, #8
   116f0:	ldrd	r4, [sp]
   116f4:	ldr	r6, [sp, #8]
   116f8:	add	sp, sp, #12
   116fc:	pop	{pc}		; (ldr pc, [sp], #4)
   11700:	movw	r1, #22324	; 0x5734
   11704:	movt	r1, #1
   11708:	mov	r2, #5
   1170c:	mov	r0, #0
   11710:	bl	10c50 <dcgettext@plt>
   11714:	mov	r6, r0
   11718:	ldr	r0, [r4]
   1171c:	cmp	r0, #0
   11720:	beq	11758 <__assert_fail@plt+0x964>
   11724:	ldr	r4, [r5]
   11728:	bl	13874 <__assert_fail@plt+0x2a80>
   1172c:	mov	r3, r0
   11730:	movw	r2, #22336	; 0x5740
   11734:	movt	r2, #1
   11738:	mov	r0, #0
   1173c:	str	r6, [sp]
   11740:	mov	r1, r4
   11744:	bl	10cc8 <error@plt>
   11748:	movw	r3, #24796	; 0x60dc
   1174c:	movt	r3, #2
   11750:	ldr	r0, [r3]
   11754:	bl	10c08 <_exit@plt>
   11758:	mov	r3, r6
   1175c:	movw	r2, #22340	; 0x5744
   11760:	movt	r2, #1
   11764:	ldr	r1, [r5]
   11768:	bl	10cc8 <error@plt>
   1176c:	b	11748 <__assert_fail@plt+0x954>
   11770:	strd	r4, [sp, #-16]!
   11774:	subs	r4, r0, #0
   11778:	str	r6, [sp, #8]
   1177c:	str	lr, [sp, #12]
   11780:	beq	11818 <__assert_fail@plt+0xa24>
   11784:	mov	r1, #47	; 0x2f
   11788:	bl	10db8 <strrchr@plt>
   1178c:	subs	r5, r0, #0
   11790:	beq	117f0 <__assert_fail@plt+0x9fc>
   11794:	add	r6, r5, #1
   11798:	sub	r3, r6, r4
   1179c:	cmp	r3, #6
   117a0:	ble	117f0 <__assert_fail@plt+0x9fc>
   117a4:	movw	r1, #22400	; 0x5780
   117a8:	movt	r1, #1
   117ac:	mov	r2, #7
   117b0:	sub	r0, r5, #6
   117b4:	bl	10ddc <strncmp@plt>
   117b8:	cmp	r0, #0
   117bc:	bne	117f0 <__assert_fail@plt+0x9fc>
   117c0:	movw	r1, #22408	; 0x5788
   117c4:	movt	r1, #1
   117c8:	mov	r2, #3
   117cc:	mov	r0, r6
   117d0:	bl	10ddc <strncmp@plt>
   117d4:	cmp	r0, #0
   117d8:	movne	r4, r6
   117dc:	bne	117f0 <__assert_fail@plt+0x9fc>
   117e0:	add	r4, r5, #4
   117e4:	movw	r3, #24864	; 0x6120
   117e8:	movt	r3, #2
   117ec:	str	r4, [r3]
   117f0:	movw	r2, #24904	; 0x6148
   117f4:	movt	r2, #2
   117f8:	ldr	r6, [sp, #8]
   117fc:	movw	r3, #24868	; 0x6124
   11800:	movt	r3, #2
   11804:	str	r4, [r2]
   11808:	str	r4, [r3]
   1180c:	ldrd	r4, [sp]
   11810:	add	sp, sp, #12
   11814:	pop	{pc}		; (ldr pc, [sp], #4)
   11818:	movw	r3, #24880	; 0x6130
   1181c:	movt	r3, #2
   11820:	movw	r0, #22344	; 0x5748
   11824:	movt	r0, #1
   11828:	ldr	r3, [r3]
   1182c:	mov	r2, #55	; 0x37
   11830:	mov	r1, #1
   11834:	bl	10c8c <fwrite@plt>
   11838:	bl	10de8 <abort@plt>
   1183c:	strd	r4, [sp, #-16]!
   11840:	mov	r4, #0
   11844:	mov	r5, #0
   11848:	cmp	r1, #10
   1184c:	str	r6, [sp, #8]
   11850:	strd	r4, [r0]
   11854:	strd	r4, [r0, #8]
   11858:	str	lr, [sp, #12]
   1185c:	strd	r4, [r0, #16]
   11860:	strd	r4, [r0, #24]
   11864:	strd	r4, [r0, #32]
   11868:	strd	r4, [r0, #40]	; 0x28
   1186c:	beq	11884 <__assert_fail@plt+0xa90>
   11870:	ldrd	r4, [sp]
   11874:	str	r1, [r0]
   11878:	ldr	r6, [sp, #8]
   1187c:	add	sp, sp, #12
   11880:	pop	{pc}		; (ldr pc, [sp], #4)
   11884:	bl	10de8 <abort@plt>
   11888:	mov	r2, #5
   1188c:	strd	r4, [sp, #-16]!
   11890:	mov	r5, r0
   11894:	str	r6, [sp, #8]
   11898:	mov	r6, r1
   1189c:	mov	r1, r0
   118a0:	mov	r0, #0
   118a4:	str	lr, [sp, #12]
   118a8:	bl	10c50 <dcgettext@plt>
   118ac:	cmp	r5, r0
   118b0:	mov	r4, r0
   118b4:	beq	118cc <__assert_fail@plt+0xad8>
   118b8:	mov	r0, r4
   118bc:	ldrd	r4, [sp]
   118c0:	ldr	r6, [sp, #8]
   118c4:	add	sp, sp, #12
   118c8:	pop	{pc}		; (ldr pc, [sp], #4)
   118cc:	bl	14f20 <__assert_fail@plt+0x412c>
   118d0:	ldrb	r3, [r0]
   118d4:	bic	r3, r3, #32
   118d8:	cmp	r3, #85	; 0x55
   118dc:	bne	11944 <__assert_fail@plt+0xb50>
   118e0:	ldrb	r3, [r0, #1]
   118e4:	bic	r3, r3, #32
   118e8:	cmp	r3, #84	; 0x54
   118ec:	bne	119c4 <__assert_fail@plt+0xbd0>
   118f0:	ldrb	r3, [r0, #2]
   118f4:	bic	r3, r3, #32
   118f8:	cmp	r3, #70	; 0x46
   118fc:	bne	119c4 <__assert_fail@plt+0xbd0>
   11900:	ldrb	r3, [r0, #3]
   11904:	cmp	r3, #45	; 0x2d
   11908:	bne	119c4 <__assert_fail@plt+0xbd0>
   1190c:	ldrb	r3, [r0, #4]
   11910:	cmp	r3, #56	; 0x38
   11914:	bne	119c4 <__assert_fail@plt+0xbd0>
   11918:	ldrb	r3, [r0, #5]
   1191c:	cmp	r3, #0
   11920:	bne	119c4 <__assert_fail@plt+0xbd0>
   11924:	ldrb	r2, [r4]
   11928:	movw	r3, #22500	; 0x57e4
   1192c:	movt	r3, #1
   11930:	movw	r4, #22512	; 0x57f0
   11934:	movt	r4, #1
   11938:	cmp	r2, #96	; 0x60
   1193c:	movne	r4, r3
   11940:	b	118b8 <__assert_fail@plt+0xac4>
   11944:	cmp	r3, #71	; 0x47
   11948:	bne	119c4 <__assert_fail@plt+0xbd0>
   1194c:	ldrb	r3, [r0, #1]
   11950:	bic	r3, r3, #32
   11954:	cmp	r3, #66	; 0x42
   11958:	bne	119c4 <__assert_fail@plt+0xbd0>
   1195c:	ldrb	r3, [r0, #2]
   11960:	cmp	r3, #49	; 0x31
   11964:	bne	119c4 <__assert_fail@plt+0xbd0>
   11968:	ldrb	r3, [r0, #3]
   1196c:	cmp	r3, #56	; 0x38
   11970:	bne	119c4 <__assert_fail@plt+0xbd0>
   11974:	ldrb	r3, [r0, #4]
   11978:	cmp	r3, #48	; 0x30
   1197c:	bne	119c4 <__assert_fail@plt+0xbd0>
   11980:	ldrb	r3, [r0, #5]
   11984:	cmp	r3, #51	; 0x33
   11988:	bne	119c4 <__assert_fail@plt+0xbd0>
   1198c:	ldrb	r3, [r0, #6]
   11990:	cmp	r3, #48	; 0x30
   11994:	bne	119c4 <__assert_fail@plt+0xbd0>
   11998:	ldrb	r3, [r0, #7]
   1199c:	cmp	r3, #0
   119a0:	bne	119c4 <__assert_fail@plt+0xbd0>
   119a4:	ldrb	r2, [r4]
   119a8:	movw	r3, #22504	; 0x57e8
   119ac:	movt	r3, #1
   119b0:	movw	r4, #22508	; 0x57ec
   119b4:	movt	r4, #1
   119b8:	cmp	r2, #96	; 0x60
   119bc:	movne	r4, r3
   119c0:	b	118b8 <__assert_fail@plt+0xac4>
   119c4:	movw	r3, #22516	; 0x57f4
   119c8:	movt	r3, #1
   119cc:	cmp	r6, #9
   119d0:	movw	r4, #22496	; 0x57e0
   119d4:	movt	r4, #1
   119d8:	movne	r4, r3
   119dc:	b	118b8 <__assert_fail@plt+0xac4>
   119e0:	strd	r4, [sp, #-36]!	; 0xffffffdc
   119e4:	strd	r6, [sp, #8]
   119e8:	strd	r8, [sp, #16]
   119ec:	strd	sl, [sp, #24]
   119f0:	mov	fp, r0
   119f4:	mov	sl, r1
   119f8:	str	lr, [sp, #32]
   119fc:	sub	sp, sp, #116	; 0x74
   11a00:	ldr	r8, [sp, #152]	; 0x98
   11a04:	str	r3, [sp, #28]
   11a08:	ldr	r3, [sp, #156]	; 0x9c
   11a0c:	str	r2, [sp, #32]
   11a10:	and	r4, r3, #2
   11a14:	ubfx	r3, r3, #1, #1
   11a18:	str	r3, [sp, #44]	; 0x2c
   11a1c:	bl	10ca4 <__ctype_get_mb_cur_max@plt>
   11a20:	str	r0, [sp, #64]	; 0x40
   11a24:	cmp	r8, #10
   11a28:	ldrls	pc, [pc, r8, lsl #2]
   11a2c:	b	1319c <__assert_fail@plt+0x23a8>
   11a30:	andeq	r1, r1, r4, lsr lr
   11a34:	ldrdeq	r1, [r1], -r0
   11a38:	andeq	r2, r1, ip, lsr #9
   11a3c:	strdeq	r1, [r1], -r0
   11a40:	muleq	r1, r8, sp
   11a44:	andeq	r1, r1, r4, ror #27
   11a48:	andeq	r1, r1, r4, ror #28
   11a4c:	andeq	r1, r1, r0, lsr #29
   11a50:	andeq	r1, r1, ip, asr sl
   11a54:	andeq	r1, r1, ip, asr sl
   11a58:	andeq	r1, r1, ip, asr sl
   11a5c:	cmp	r8, #10
   11a60:	beq	11a8c <__assert_fail@plt+0xc98>
   11a64:	mov	r1, r8
   11a68:	movw	r0, #22520	; 0x57f8
   11a6c:	movt	r0, #1
   11a70:	bl	11888 <__assert_fail@plt+0xa94>
   11a74:	mov	r1, r8
   11a78:	str	r0, [sp, #164]	; 0xa4
   11a7c:	movw	r0, #22516	; 0x57f4
   11a80:	movt	r0, #1
   11a84:	bl	11888 <__assert_fail@plt+0xa94>
   11a88:	str	r0, [sp, #168]	; 0xa8
   11a8c:	cmp	r4, #0
   11a90:	movne	r4, #0
   11a94:	beq	12e78 <__assert_fail@plt+0x2084>
   11a98:	mov	r3, #1
   11a9c:	mov	r5, #0
   11aa0:	ldr	r0, [sp, #168]	; 0xa8
   11aa4:	str	r3, [sp, #36]	; 0x24
   11aa8:	str	r3, [sp, #40]	; 0x28
   11aac:	str	r5, [sp, #68]	; 0x44
   11ab0:	bl	10d34 <strlen@plt>
   11ab4:	ldr	r3, [sp, #168]	; 0xa8
   11ab8:	str	r5, [sp, #48]	; 0x30
   11abc:	str	r0, [sp, #56]	; 0x38
   11ac0:	str	r3, [sp, #60]	; 0x3c
   11ac4:	str	r5, [sp, #72]	; 0x48
   11ac8:	str	r8, [sp, #152]	; 0x98
   11acc:	mov	r8, fp
   11ad0:	mov	r9, #0
   11ad4:	ldr	fp, [sp, #152]	; 0x98
   11ad8:	ldr	r3, [sp, #28]
   11adc:	cmn	r3, #1
   11ae0:	beq	12040 <__assert_fail@plt+0x124c>
   11ae4:	ldr	r3, [sp, #28]
   11ae8:	subs	r6, r3, r9
   11aec:	movne	r6, #1
   11af0:	cmp	r6, #0
   11af4:	beq	12058 <__assert_fail@plt+0x1264>
   11af8:	ldr	r0, [sp, #32]
   11afc:	ldr	r7, [sp, #40]	; 0x28
   11b00:	add	r3, r0, r9
   11b04:	cmp	fp, #2
   11b08:	moveq	r7, #0
   11b0c:	andne	r7, r7, #1
   11b10:	str	r3, [sp, #52]	; 0x34
   11b14:	cmp	r7, #0
   11b18:	beq	124f4 <__assert_fail@plt+0x1700>
   11b1c:	ldr	r2, [sp, #56]	; 0x38
   11b20:	cmp	r2, #0
   11b24:	beq	12790 <__assert_fail@plt+0x199c>
   11b28:	ldr	r1, [sp, #28]
   11b2c:	cmp	r2, #1
   11b30:	mov	r3, r2
   11b34:	movls	r3, #0
   11b38:	movhi	r3, #1
   11b3c:	add	r5, r9, r2
   11b40:	cmn	r1, #1
   11b44:	movne	r3, #0
   11b48:	cmp	r3, #0
   11b4c:	beq	11b58 <__assert_fail@plt+0xd64>
   11b50:	bl	10d34 <strlen@plt>
   11b54:	str	r0, [sp, #28]
   11b58:	ldr	r3, [sp, #28]
   11b5c:	cmp	r5, r3
   11b60:	bhi	12790 <__assert_fail@plt+0x199c>
   11b64:	ldr	r0, [sp, #52]	; 0x34
   11b68:	ldr	r2, [sp, #56]	; 0x38
   11b6c:	ldr	r1, [sp, #60]	; 0x3c
   11b70:	bl	10c38 <memcmp@plt>
   11b74:	cmp	r0, #0
   11b78:	bne	12790 <__assert_fail@plt+0x199c>
   11b7c:	ldr	r3, [sp, #44]	; 0x2c
   11b80:	cmp	r3, #0
   11b84:	bne	130c0 <__assert_fail@plt+0x22cc>
   11b88:	ldr	r3, [sp, #52]	; 0x34
   11b8c:	ldrb	r5, [r3]
   11b90:	cmp	r5, #126	; 0x7e
   11b94:	ldrls	pc, [pc, r5, lsl #2]
   11b98:	b	12450 <__assert_fail@plt+0x165c>
   11b9c:	andeq	r2, r1, r4, asr r3
   11ba0:	andeq	r2, r1, r0, asr r4
   11ba4:	andeq	r2, r1, r0, asr r4
   11ba8:	andeq	r2, r1, r0, asr r4
   11bac:	andeq	r2, r1, r0, asr r4
   11bb0:	andeq	r2, r1, r0, asr r4
   11bb4:	andeq	r2, r1, r0, asr r4
   11bb8:	andeq	r2, r1, r8, lsr #6
   11bbc:	andeq	r2, r1, r0, lsr #6
   11bc0:	andeq	r2, r1, r8, ror #4
   11bc4:	andeq	r2, r1, r4, lsl r3
   11bc8:	andeq	r2, r1, r0, ror #4
   11bcc:	strdeq	r2, [r1], -r0
   11bd0:	andeq	r2, r1, ip, lsr r3
   11bd4:	andeq	r2, r1, r0, asr r4
   11bd8:	andeq	r2, r1, r0, asr r4
   11bdc:	andeq	r2, r1, r0, asr r4
   11be0:	andeq	r2, r1, r0, asr r4
   11be4:	andeq	r2, r1, r0, asr r4
   11be8:	andeq	r2, r1, r0, asr r4
   11bec:	andeq	r2, r1, r0, asr r4
   11bf0:	andeq	r2, r1, r0, asr r4
   11bf4:	andeq	r2, r1, r0, asr r4
   11bf8:	andeq	r2, r1, r0, asr r4
   11bfc:	andeq	r2, r1, r0, asr r4
   11c00:	andeq	r2, r1, r0, asr r4
   11c04:	andeq	r2, r1, r0, asr r4
   11c08:	andeq	r2, r1, r0, asr r4
   11c0c:	andeq	r2, r1, r0, asr r4
   11c10:	andeq	r2, r1, r0, asr r4
   11c14:	andeq	r2, r1, r0, asr r4
   11c18:	andeq	r2, r1, r0, asr r4
   11c1c:	andeq	r2, r1, ip, lsr #8
   11c20:	andeq	r2, r1, r4, lsr r3
   11c24:	andeq	r2, r1, r4, lsr r3
   11c28:	andeq	r2, r1, r0, lsl r4
   11c2c:	andeq	r2, r1, r4, lsr r3
   11c30:	andeq	r2, r1, r4, asr #8
   11c34:	andeq	r2, r1, r4, lsr r3
   11c38:	muleq	r1, r0, r1
   11c3c:	andeq	r2, r1, r4, lsr r3
   11c40:	andeq	r2, r1, r4, lsr r3
   11c44:	andeq	r2, r1, r4, lsr r3
   11c48:	andeq	r2, r1, r4, asr #8
   11c4c:	andeq	r2, r1, r4, asr #8
   11c50:	andeq	r2, r1, r4, asr #8
   11c54:	andeq	r2, r1, r4, asr #8
   11c58:	andeq	r2, r1, r4, asr #8
   11c5c:	andeq	r2, r1, r4, asr #8
   11c60:	andeq	r2, r1, r4, asr #8
   11c64:	andeq	r2, r1, r4, asr #8
   11c68:	andeq	r2, r1, r4, asr #8
   11c6c:	andeq	r2, r1, r4, asr #8
   11c70:	andeq	r2, r1, r4, asr #8
   11c74:	andeq	r2, r1, r4, asr #8
   11c78:	andeq	r2, r1, r4, asr #8
   11c7c:	andeq	r2, r1, r4, asr #8
   11c80:	andeq	r2, r1, r4, asr #8
   11c84:	andeq	r2, r1, r4, asr #8
   11c88:	andeq	r2, r1, r4, lsr r3
   11c8c:	andeq	r2, r1, r4, lsr r3
   11c90:	andeq	r2, r1, r4, lsr r3
   11c94:	andeq	r2, r1, r4, lsr r3
   11c98:	andeq	r2, r1, r4, ror #2
   11c9c:	andeq	r2, r1, r0, asr r4
   11ca0:	andeq	r2, r1, r4, asr #8
   11ca4:	andeq	r2, r1, r4, asr #8
   11ca8:	andeq	r2, r1, r4, asr #8
   11cac:	andeq	r2, r1, r4, asr #8
   11cb0:	andeq	r2, r1, r4, asr #8
   11cb4:	andeq	r2, r1, r4, asr #8
   11cb8:	andeq	r2, r1, r4, asr #8
   11cbc:	andeq	r2, r1, r4, asr #8
   11cc0:	andeq	r2, r1, r4, asr #8
   11cc4:	andeq	r2, r1, r4, asr #8
   11cc8:	andeq	r2, r1, r4, asr #8
   11ccc:	andeq	r2, r1, r4, asr #8
   11cd0:	andeq	r2, r1, r4, asr #8
   11cd4:	andeq	r2, r1, r4, asr #8
   11cd8:	andeq	r2, r1, r4, asr #8
   11cdc:	andeq	r2, r1, r4, asr #8
   11ce0:	andeq	r2, r1, r4, asr #8
   11ce4:	andeq	r2, r1, r4, asr #8
   11ce8:	andeq	r2, r1, r4, asr #8
   11cec:	andeq	r2, r1, r4, asr #8
   11cf0:	andeq	r2, r1, r4, asr #8
   11cf4:	andeq	r2, r1, r4, asr #8
   11cf8:	andeq	r2, r1, r4, asr #8
   11cfc:	andeq	r2, r1, r4, asr #8
   11d00:	andeq	r2, r1, r4, asr #8
   11d04:	andeq	r2, r1, r4, asr #8
   11d08:	andeq	r2, r1, r4, lsr r3
   11d0c:	andeq	r2, r1, ip, lsl #2
   11d10:	andeq	r2, r1, r4, asr #8
   11d14:	andeq	r2, r1, r4, lsr r3
   11d18:	andeq	r2, r1, r4, asr #8
   11d1c:	andeq	r2, r1, r4, lsr r3
   11d20:	andeq	r2, r1, r4, asr #8
   11d24:	andeq	r2, r1, r4, asr #8
   11d28:	andeq	r2, r1, r4, asr #8
   11d2c:	andeq	r2, r1, r4, asr #8
   11d30:	andeq	r2, r1, r4, asr #8
   11d34:	andeq	r2, r1, r4, asr #8
   11d38:	andeq	r2, r1, r4, asr #8
   11d3c:	andeq	r2, r1, r4, asr #8
   11d40:	andeq	r2, r1, r4, asr #8
   11d44:	andeq	r2, r1, r4, asr #8
   11d48:	andeq	r2, r1, r4, asr #8
   11d4c:	andeq	r2, r1, r4, asr #8
   11d50:	andeq	r2, r1, r4, asr #8
   11d54:	andeq	r2, r1, r4, asr #8
   11d58:	andeq	r2, r1, r4, asr #8
   11d5c:	andeq	r2, r1, r4, asr #8
   11d60:	andeq	r2, r1, r4, asr #8
   11d64:	andeq	r2, r1, r4, asr #8
   11d68:	andeq	r2, r1, r4, asr #8
   11d6c:	andeq	r2, r1, r4, asr #8
   11d70:	andeq	r2, r1, r4, asr #8
   11d74:	andeq	r2, r1, r4, asr #8
   11d78:	andeq	r2, r1, r4, asr #8
   11d7c:	andeq	r2, r1, r4, asr #8
   11d80:	andeq	r2, r1, r4, asr #8
   11d84:	andeq	r2, r1, r4, asr #8
   11d88:	andeq	r1, r1, r0, lsr pc
   11d8c:	andeq	r2, r1, r4, lsr r3
   11d90:	andeq	r1, r1, r0, lsr pc
   11d94:	andeq	r2, r1, r0, lsl r4
   11d98:	cmp	r4, #0
   11d9c:	moveq	r3, #1
   11da0:	streq	r3, [sp, #40]	; 0x28
   11da4:	beq	124b8 <__assert_fail@plt+0x16c4>
   11da8:	mov	r3, #0
   11dac:	mov	r2, #1
   11db0:	mov	r4, r3
   11db4:	str	r2, [sp, #36]	; 0x24
   11db8:	str	r2, [sp, #44]	; 0x2c
   11dbc:	str	r2, [sp, #56]	; 0x38
   11dc0:	str	r3, [sp, #68]	; 0x44
   11dc4:	movw	r3, #22516	; 0x57f4
   11dc8:	movt	r3, #1
   11dcc:	str	r4, [sp, #40]	; 0x28
   11dd0:	mov	r8, #2
   11dd4:	str	r4, [sp, #48]	; 0x30
   11dd8:	str	r3, [sp, #60]	; 0x3c
   11ddc:	str	r4, [sp, #72]	; 0x48
   11de0:	b	11ac8 <__assert_fail@plt+0xcd4>
   11de4:	cmp	r4, #0
   11de8:	bne	13034 <__assert_fail@plt+0x2240>
   11dec:	cmp	sl, #0
   11df0:	beq	12df4 <__assert_fail@plt+0x2000>
   11df4:	mov	r3, #34	; 0x22
   11df8:	mov	r1, r4
   11dfc:	mov	r2, #1
   11e00:	strb	r3, [fp]
   11e04:	movw	r3, #22496	; 0x57e0
   11e08:	movt	r3, #1
   11e0c:	mov	r4, r2
   11e10:	str	r2, [sp, #36]	; 0x24
   11e14:	str	r2, [sp, #40]	; 0x28
   11e18:	str	r1, [sp, #44]	; 0x2c
   11e1c:	str	r1, [sp, #48]	; 0x30
   11e20:	str	r2, [sp, #56]	; 0x38
   11e24:	str	r3, [sp, #60]	; 0x3c
   11e28:	str	r1, [sp, #68]	; 0x44
   11e2c:	str	r1, [sp, #72]	; 0x48
   11e30:	b	11ac8 <__assert_fail@plt+0xcd4>
   11e34:	mov	r3, #0
   11e38:	mov	r4, r8
   11e3c:	str	r3, [sp, #40]	; 0x28
   11e40:	str	r3, [sp, #44]	; 0x2c
   11e44:	str	r3, [sp, #48]	; 0x30
   11e48:	str	r8, [sp, #56]	; 0x38
   11e4c:	str	r3, [sp, #60]	; 0x3c
   11e50:	str	r3, [sp, #68]	; 0x44
   11e54:	mov	r3, #1
   11e58:	str	r3, [sp, #36]	; 0x24
   11e5c:	str	r8, [sp, #72]	; 0x48
   11e60:	b	11ac8 <__assert_fail@plt+0xcd4>
   11e64:	mov	r3, #1
   11e68:	mov	r2, #0
   11e6c:	mov	r4, r2
   11e70:	mov	r8, #5
   11e74:	str	r3, [sp, #36]	; 0x24
   11e78:	str	r3, [sp, #40]	; 0x28
   11e7c:	str	r3, [sp, #44]	; 0x2c
   11e80:	str	r2, [sp, #48]	; 0x30
   11e84:	str	r3, [sp, #56]	; 0x38
   11e88:	movw	r3, #22496	; 0x57e0
   11e8c:	movt	r3, #1
   11e90:	str	r3, [sp, #60]	; 0x3c
   11e94:	str	r2, [sp, #68]	; 0x44
   11e98:	str	r2, [sp, #72]	; 0x48
   11e9c:	b	11ac8 <__assert_fail@plt+0xcd4>
   11ea0:	mov	r3, #0
   11ea4:	mov	r2, #1
   11ea8:	mov	r4, r3
   11eac:	str	r2, [sp, #36]	; 0x24
   11eb0:	str	r2, [sp, #40]	; 0x28
   11eb4:	str	r3, [sp, #44]	; 0x2c
   11eb8:	str	r3, [sp, #48]	; 0x30
   11ebc:	str	r3, [sp, #56]	; 0x38
   11ec0:	str	r3, [sp, #60]	; 0x3c
   11ec4:	str	r3, [sp, #68]	; 0x44
   11ec8:	str	r3, [sp, #72]	; 0x48
   11ecc:	b	11ac8 <__assert_fail@plt+0xcd4>
   11ed0:	mov	r2, #1
   11ed4:	mov	r3, #0
   11ed8:	mov	r4, r3
   11edc:	str	r2, [sp, #36]	; 0x24
   11ee0:	str	r2, [sp, #44]	; 0x2c
   11ee4:	str	r8, [sp, #56]	; 0x38
   11ee8:	str	r3, [sp, #68]	; 0x44
   11eec:	b	11dc4 <__assert_fail@plt+0xfd0>
   11ef0:	mov	r3, #1
   11ef4:	mov	r2, #0
   11ef8:	mov	r4, r2
   11efc:	mov	r8, #2
   11f00:	str	r3, [sp, #36]	; 0x24
   11f04:	str	r3, [sp, #40]	; 0x28
   11f08:	str	r3, [sp, #44]	; 0x2c
   11f0c:	str	r2, [sp, #48]	; 0x30
   11f10:	str	r3, [sp, #56]	; 0x38
   11f14:	movw	r3, #22516	; 0x57f4
   11f18:	movt	r3, #1
   11f1c:	str	r3, [sp, #60]	; 0x3c
   11f20:	str	r2, [sp, #68]	; 0x44
   11f24:	str	r2, [sp, #72]	; 0x48
   11f28:	b	11ac8 <__assert_fail@plt+0xcd4>
   11f2c:	mov	r7, #0
   11f30:	ldr	r3, [sp, #28]
   11f34:	cmn	r3, #1
   11f38:	beq	12a10 <__assert_fail@plt+0x1c1c>
   11f3c:	ldr	r3, [sp, #28]
   11f40:	subs	r2, r3, #1
   11f44:	movne	r2, #1
   11f48:	sub	r3, fp, #2
   11f4c:	cmp	r2, #0
   11f50:	clz	r3, r3
   11f54:	lsr	r3, r3, #5
   11f58:	bne	11f64 <__assert_fail@plt+0x1170>
   11f5c:	cmp	r9, #0
   11f60:	beq	12770 <__assert_fail@plt+0x197c>
   11f64:	mov	r6, #0
   11f68:	ldr	r2, [sp, #40]	; 0x28
   11f6c:	eor	r2, r2, #1
   11f70:	orrs	r3, r3, r2
   11f74:	bne	1214c <__assert_fail@plt+0x1358>
   11f78:	ldr	r2, [sp, #160]	; 0xa0
   11f7c:	cmp	r2, #0
   11f80:	beq	11fa0 <__assert_fail@plt+0x11ac>
   11f84:	ldr	r0, [sp, #160]	; 0xa0
   11f88:	ubfx	r1, r5, #5, #8
   11f8c:	and	r2, r5, #31
   11f90:	ldr	r1, [r0, r1, lsl #2]
   11f94:	lsr	r2, r1, r2
   11f98:	tst	r2, #1
   11f9c:	bne	11fa8 <__assert_fail@plt+0x11b4>
   11fa0:	cmp	r7, #0
   11fa4:	beq	12218 <__assert_fail@plt+0x1424>
   11fa8:	ldr	r2, [sp, #44]	; 0x2c
   11fac:	sub	r3, fp, #2
   11fb0:	clz	r3, r3
   11fb4:	lsr	r3, r3, #5
   11fb8:	cmp	r2, #0
   11fbc:	bne	12d64 <__assert_fail@plt+0x1f70>
   11fc0:	ldr	r2, [sp, #48]	; 0x30
   11fc4:	eor	r2, r2, #1
   11fc8:	ands	r3, r3, r2
   11fcc:	beq	12004 <__assert_fail@plt+0x1210>
   11fd0:	cmp	sl, r4
   11fd4:	str	r3, [sp, #48]	; 0x30
   11fd8:	movhi	r2, #39	; 0x27
   11fdc:	strbhi	r2, [r8, r4]
   11fe0:	add	r2, r4, #1
   11fe4:	cmp	sl, r2
   11fe8:	movhi	r1, #36	; 0x24
   11fec:	strbhi	r1, [r8, r2]
   11ff0:	add	r2, r4, #2
   11ff4:	add	r4, r4, #3
   11ff8:	cmp	sl, r2
   11ffc:	movhi	r1, #39	; 0x27
   12000:	strbhi	r1, [r8, r2]
   12004:	cmp	r4, sl
   12008:	add	r9, r9, #1
   1200c:	movcc	r3, #92	; 0x5c
   12010:	strbcc	r3, [r8, r4]
   12014:	add	r4, r4, #1
   12018:	cmp	r4, sl
   1201c:	ldr	r3, [sp, #36]	; 0x24
   12020:	strbcc	r5, [r8, r4]
   12024:	cmp	r6, #0
   12028:	add	r4, r4, #1
   1202c:	moveq	r3, #0
   12030:	str	r3, [sp, #36]	; 0x24
   12034:	ldr	r3, [sp, #28]
   12038:	cmn	r3, #1
   1203c:	bne	11ae4 <__assert_fail@plt+0xcf0>
   12040:	ldr	r3, [sp, #32]
   12044:	ldrb	r6, [r3, r9]
   12048:	adds	r6, r6, #0
   1204c:	movne	r6, #1
   12050:	cmp	r6, #0
   12054:	bne	11af8 <__assert_fail@plt+0xd04>
   12058:	str	fp, [sp, #152]	; 0x98
   1205c:	mov	fp, r8
   12060:	cmp	r4, #0
   12064:	ldr	r1, [sp, #44]	; 0x2c
   12068:	movne	r3, #0
   1206c:	ldr	r8, [sp, #152]	; 0x98
   12070:	sub	r2, r8, #2
   12074:	clz	r2, r2
   12078:	lsr	r2, r2, #5
   1207c:	andeq	r3, r2, r1
   12080:	cmp	r3, #0
   12084:	bne	13140 <__assert_fail@plt+0x234c>
   12088:	eor	r3, r1, #1
   1208c:	ands	r2, r2, r3
   12090:	beq	1306c <__assert_fail@plt+0x2278>
   12094:	ldr	r3, [sp, #68]	; 0x44
   12098:	cmp	r3, #0
   1209c:	beq	13070 <__assert_fail@plt+0x227c>
   120a0:	ldr	r3, [sp, #36]	; 0x24
   120a4:	cmp	r3, #0
   120a8:	bne	130fc <__assert_fail@plt+0x2308>
   120ac:	ldr	r3, [sp, #72]	; 0x48
   120b0:	adds	r3, r3, #0
   120b4:	movne	r3, #1
   120b8:	cmp	sl, #0
   120bc:	movne	r3, #0
   120c0:	cmp	r3, #0
   120c4:	ldreq	r2, [sp, #68]	; 0x44
   120c8:	beq	13070 <__assert_fail@plt+0x227c>
   120cc:	ldr	r2, [sp, #72]	; 0x48
   120d0:	str	r3, [sp, #68]	; 0x44
   120d4:	movw	r3, #22516	; 0x57f4
   120d8:	movt	r3, #1
   120dc:	mov	r1, #39	; 0x27
   120e0:	mov	r4, #1
   120e4:	ldr	sl, [sp, #72]	; 0x48
   120e8:	mov	r8, #2
   120ec:	str	r3, [sp, #60]	; 0x3c
   120f0:	mov	r3, #0
   120f4:	strb	r1, [fp]
   120f8:	str	r3, [sp, #44]	; 0x2c
   120fc:	str	r4, [sp, #56]	; 0x38
   12100:	str	r2, [sp, #72]	; 0x48
   12104:	b	11ac8 <__assert_fail@plt+0xcd4>
   12108:	mov	r7, #0
   1210c:	cmp	fp, #2
   12110:	beq	129f0 <__assert_fail@plt+0x1bfc>
   12114:	ldr	r2, [sp, #40]	; 0x28
   12118:	ldr	r3, [sp, #56]	; 0x38
   1211c:	ldr	r1, [sp, #44]	; 0x2c
   12120:	cmp	r3, #0
   12124:	moveq	r3, #0
   12128:	andne	r3, r2, r1
   1212c:	cmp	r3, #0
   12130:	moveq	r5, #92	; 0x5c
   12134:	moveq	r3, r5
   12138:	bne	129fc <__assert_fail@plt+0x1c08>
   1213c:	ldr	r2, [sp, #40]	; 0x28
   12140:	cmp	r2, #0
   12144:	bne	12e38 <__assert_fail@plt+0x2044>
   12148:	mov	r6, #0
   1214c:	ldr	r3, [sp, #44]	; 0x2c
   12150:	cmp	r3, #0
   12154:	beq	129e8 <__assert_fail@plt+0x1bf4>
   12158:	mov	r3, #0
   1215c:	b	11f78 <__assert_fail@plt+0x1184>
   12160:	mov	r7, #0
   12164:	cmp	fp, #2
   12168:	beq	12a60 <__assert_fail@plt+0x1c6c>
   1216c:	cmp	fp, #5
   12170:	beq	12a24 <__assert_fail@plt+0x1c30>
   12174:	sub	r3, fp, #2
   12178:	mov	r6, #0
   1217c:	clz	r3, r3
   12180:	mov	r5, #63	; 0x3f
   12184:	lsr	r3, r3, #5
   12188:	b	11f68 <__assert_fail@plt+0x1174>
   1218c:	mov	r7, #0
   12190:	cmp	fp, #2
   12194:	movne	r3, #0
   12198:	movne	r5, #39	; 0x27
   1219c:	strne	r6, [sp, #68]	; 0x44
   121a0:	bne	11f68 <__assert_fail@plt+0x1174>
   121a4:	ldr	r3, [sp, #44]	; 0x2c
   121a8:	cmp	r3, #0
   121ac:	bne	12e68 <__assert_fail@plt+0x2074>
   121b0:	ldr	r3, [sp, #72]	; 0x48
   121b4:	cmp	sl, #0
   121b8:	clz	r3, r3
   121bc:	lsr	r3, r3, #5
   121c0:	moveq	r3, #0
   121c4:	cmp	r3, #0
   121c8:	bne	12d94 <__assert_fail@plt+0x1fa0>
   121cc:	cmp	sl, r4
   121d0:	movhi	r3, #39	; 0x27
   121d4:	strbhi	r3, [r8, r4]
   121d8:	add	r3, r4, #1
   121dc:	cmp	sl, r3
   121e0:	movhi	r2, #92	; 0x5c
   121e4:	strbhi	r2, [r8, r3]
   121e8:	add	r3, r4, #2
   121ec:	cmp	sl, r3
   121f0:	bls	121fc <__assert_fail@plt+0x1408>
   121f4:	mov	r2, #39	; 0x27
   121f8:	strb	r2, [r8, r3]
   121fc:	mov	r3, #0
   12200:	cmp	r7, #0
   12204:	add	r4, r4, #3
   12208:	mov	r5, #39	; 0x27
   1220c:	str	r3, [sp, #48]	; 0x30
   12210:	str	r6, [sp, #68]	; 0x44
   12214:	bne	11fa8 <__assert_fail@plt+0x11b4>
   12218:	ldr	r2, [sp, #48]	; 0x30
   1221c:	eor	r3, r3, #1
   12220:	add	r9, r9, #1
   12224:	and	r3, r3, r2
   12228:	uxtb	r3, r3
   1222c:	cmp	r3, #0
   12230:	beq	12018 <__assert_fail@plt+0x1224>
   12234:	cmp	sl, r4
   12238:	movhi	r3, #39	; 0x27
   1223c:	strbhi	r3, [r8, r4]
   12240:	add	r3, r4, #1
   12244:	add	r4, r4, #2
   12248:	cmp	sl, r3
   1224c:	movhi	r2, #39	; 0x27
   12250:	strbhi	r2, [r8, r3]
   12254:	mov	r3, #0
   12258:	str	r3, [sp, #48]	; 0x30
   1225c:	b	12018 <__assert_fail@plt+0x1224>
   12260:	mov	r3, #118	; 0x76
   12264:	b	1213c <__assert_fail@plt+0x1348>
   12268:	mov	r3, #116	; 0x74
   1226c:	ldr	r2, [sp, #44]	; 0x2c
   12270:	cmp	fp, #2
   12274:	movne	r2, #0
   12278:	andeq	r2, r2, #1
   1227c:	cmp	r2, #0
   12280:	beq	1213c <__assert_fail@plt+0x1348>
   12284:	mov	fp, r8
   12288:	mov	r8, #2
   1228c:	ldr	r3, [sp, #40]	; 0x28
   12290:	cmp	r3, #0
   12294:	movne	r8, #4
   12298:	mov	lr, #0
   1229c:	mov	r0, fp
   122a0:	ldr	r2, [sp, #32]
   122a4:	ldr	r3, [sp, #156]	; 0x9c
   122a8:	ldr	r1, [sp, #164]	; 0xa4
   122ac:	bic	ip, r3, #2
   122b0:	ldr	r3, [sp, #28]
   122b4:	stm	sp, {r8, ip, lr}
   122b8:	ldr	ip, [sp, #168]	; 0xa8
   122bc:	str	r1, [sp, #12]
   122c0:	mov	r1, sl
   122c4:	str	ip, [sp, #16]
   122c8:	bl	119e0 <__assert_fail@plt+0xbec>
   122cc:	mov	r4, r0
   122d0:	mov	r0, r4
   122d4:	add	sp, sp, #116	; 0x74
   122d8:	ldrd	r4, [sp]
   122dc:	ldrd	r6, [sp, #8]
   122e0:	ldrd	r8, [sp, #16]
   122e4:	ldrd	sl, [sp, #24]
   122e8:	add	sp, sp, #32
   122ec:	pop	{pc}		; (ldr pc, [sp], #4)
   122f0:	mov	r5, #102	; 0x66
   122f4:	ldr	r2, [sp, #44]	; 0x2c
   122f8:	sub	r3, fp, #2
   122fc:	clz	r3, r3
   12300:	lsr	r3, r3, #5
   12304:	cmp	r2, #0
   12308:	bne	12d64 <__assert_fail@plt+0x1f70>
   1230c:	mov	r6, r2
   12310:	b	12004 <__assert_fail@plt+0x1210>
   12314:	mov	r5, #110	; 0x6e
   12318:	mov	r6, #0
   1231c:	b	11fa8 <__assert_fail@plt+0x11b4>
   12320:	mov	r5, #98	; 0x62
   12324:	b	122f4 <__assert_fail@plt+0x1500>
   12328:	mov	r5, #97	; 0x61
   1232c:	b	122f4 <__assert_fail@plt+0x1500>
   12330:	mov	r7, #0
   12334:	mov	r6, #0
   12338:	b	12158 <__assert_fail@plt+0x1364>
   1233c:	mov	r5, #114	; 0x72
   12340:	b	12318 <__assert_fail@plt+0x1524>
   12344:	ldr	r3, [sp, #44]	; 0x2c
   12348:	cmp	r3, #0
   1234c:	bne	130dc <__assert_fail@plt+0x22e8>
   12350:	mov	r7, r3
   12354:	ldr	r3, [sp, #48]	; 0x30
   12358:	sub	r2, fp, #2
   1235c:	clz	r2, r2
   12360:	lsr	r2, r2, #5
   12364:	eor	r3, r3, #1
   12368:	ands	r3, r2, r3
   1236c:	beq	12d80 <__assert_fail@plt+0x1f8c>
   12370:	cmp	sl, r4
   12374:	movhi	r1, #39	; 0x27
   12378:	strbhi	r1, [r8, r4]
   1237c:	add	r1, r4, #1
   12380:	cmp	sl, r1
   12384:	movhi	r0, #36	; 0x24
   12388:	strbhi	r0, [r8, r1]
   1238c:	add	r1, r4, #2
   12390:	cmp	sl, r1
   12394:	movhi	r0, #39	; 0x27
   12398:	strbhi	r0, [r8, r1]
   1239c:	add	r1, r4, #3
   123a0:	cmp	sl, r1
   123a4:	bls	12dd8 <__assert_fail@plt+0x1fe4>
   123a8:	mov	r4, r1
   123ac:	mov	r1, #92	; 0x5c
   123b0:	mov	r0, r4
   123b4:	str	r3, [sp, #48]	; 0x30
   123b8:	strb	r1, [r8, r4]
   123bc:	cmp	fp, #2
   123c0:	add	r4, r4, #1
   123c4:	beq	12e28 <__assert_fail@plt+0x2034>
   123c8:	ldr	r1, [sp, #28]
   123cc:	add	r3, r9, #1
   123d0:	cmp	r3, r1
   123d4:	bcs	123ec <__assert_fail@plt+0x15f8>
   123d8:	ldr	r1, [sp, #32]
   123dc:	ldrb	r3, [r1, r3]
   123e0:	sub	r3, r3, #48	; 0x30
   123e4:	cmp	r3, #9
   123e8:	bls	12e40 <__assert_fail@plt+0x204c>
   123ec:	mov	r5, #48	; 0x30
   123f0:	ldr	r3, [sp, #40]	; 0x28
   123f4:	eor	r3, r3, #1
   123f8:	orrs	r2, r2, r3
   123fc:	mov	r3, r6
   12400:	moveq	r6, r2
   12404:	beq	11f78 <__assert_fail@plt+0x1184>
   12408:	mov	r6, #0
   1240c:	b	11fa0 <__assert_fail@plt+0x11ac>
   12410:	cmp	r9, #0
   12414:	mov	r2, r7
   12418:	bne	129b8 <__assert_fail@plt+0x1bc4>
   1241c:	mov	r6, r7
   12420:	mov	r3, r9
   12424:	mov	r7, r2
   12428:	b	11f68 <__assert_fail@plt+0x1174>
   1242c:	mov	r2, r7
   12430:	mov	r6, r7
   12434:	mov	r3, #0
   12438:	mov	r7, r2
   1243c:	mov	r5, #32
   12440:	b	11f68 <__assert_fail@plt+0x1174>
   12444:	mov	r6, r7
   12448:	b	12158 <__assert_fail@plt+0x1364>
   1244c:	mov	r7, #0
   12450:	ldr	r3, [sp, #64]	; 0x40
   12454:	cmp	r3, #1
   12458:	bne	12a78 <__assert_fail@plt+0x1c84>
   1245c:	bl	10d1c <__ctype_b_loc@plt>
   12460:	ldr	r2, [r0]
   12464:	sxth	r3, r5
   12468:	lsl	r3, r3, #1
   1246c:	ldr	r1, [sp, #64]	; 0x40
   12470:	ldrh	r3, [r2, r3]
   12474:	mov	ip, r1
   12478:	and	r3, r3, #16384	; 0x4000
   1247c:	cmp	r3, #0
   12480:	ldr	r3, [sp, #40]	; 0x28
   12484:	movne	r6, #1
   12488:	moveq	r6, #0
   1248c:	movne	r2, #0
   12490:	andeq	r2, r3, #1
   12494:	cmp	r2, #0
   12498:	bne	12dc0 <__assert_fail@plt+0x1fcc>
   1249c:	sub	r3, fp, #2
   124a0:	clz	r3, r3
   124a4:	lsr	r3, r3, #5
   124a8:	b	11f68 <__assert_fail@plt+0x1174>
   124ac:	cmp	r4, #0
   124b0:	bne	13150 <__assert_fail@plt+0x235c>
   124b4:	str	r4, [sp, #40]	; 0x28
   124b8:	cmp	sl, #0
   124bc:	bne	13180 <__assert_fail@plt+0x238c>
   124c0:	mov	r3, #1
   124c4:	movw	r2, #22516	; 0x57f4
   124c8:	movt	r2, #1
   124cc:	mov	r4, r3
   124d0:	mov	r8, #2
   124d4:	str	r3, [sp, #36]	; 0x24
   124d8:	str	sl, [sp, #44]	; 0x2c
   124dc:	str	sl, [sp, #48]	; 0x30
   124e0:	str	r3, [sp, #56]	; 0x38
   124e4:	str	r2, [sp, #60]	; 0x3c
   124e8:	str	sl, [sp, #68]	; 0x44
   124ec:	str	sl, [sp, #72]	; 0x48
   124f0:	b	11ac8 <__assert_fail@plt+0xcd4>
   124f4:	ldr	r3, [sp, #32]
   124f8:	ldrb	r5, [r3, r9]
   124fc:	cmp	r5, #126	; 0x7e
   12500:	ldrls	pc, [pc, r5, lsl #2]
   12504:	b	12450 <__assert_fail@plt+0x165c>
   12508:	andeq	r2, r1, ip, lsr #14
   1250c:	andeq	r2, r1, r0, asr r4
   12510:	andeq	r2, r1, r0, asr r4
   12514:	andeq	r2, r1, r0, asr r4
   12518:	andeq	r2, r1, r0, asr r4
   1251c:	andeq	r2, r1, r0, asr r4
   12520:	andeq	r2, r1, r0, asr r4
   12524:	andeq	r2, r1, r4, lsr #14
   12528:	andeq	r2, r1, ip, lsl r7
   1252c:	andeq	r2, r1, r8, ror #4
   12530:	andeq	r2, r1, r4, lsl r7
   12534:	andeq	r2, r1, r0, ror #4
   12538:	andeq	r2, r1, ip, lsl #14
   1253c:	andeq	r2, r1, r4, lsl #14
   12540:	andeq	r2, r1, r0, asr r4
   12544:	andeq	r2, r1, r0, asr r4
   12548:	andeq	r2, r1, r0, asr r4
   1254c:	andeq	r2, r1, r0, asr r4
   12550:	andeq	r2, r1, r0, asr r4
   12554:	andeq	r2, r1, r0, asr r4
   12558:	andeq	r2, r1, r0, asr r4
   1255c:	andeq	r2, r1, r0, asr r4
   12560:	andeq	r2, r1, r0, asr r4
   12564:	andeq	r2, r1, r0, asr r4
   12568:	andeq	r2, r1, r0, asr r4
   1256c:	andeq	r2, r1, r0, asr r4
   12570:	andeq	r2, r1, r0, asr r4
   12574:	andeq	r2, r1, r0, asr r4
   12578:	andeq	r2, r1, r0, asr r4
   1257c:	andeq	r2, r1, r0, asr r4
   12580:	andeq	r2, r1, r0, asr r4
   12584:	andeq	r2, r1, r0, asr r4
   12588:	andeq	r2, r1, r0, lsl #15
   1258c:	andeq	r2, r1, r0, ror #14
   12590:	andeq	r2, r1, r0, ror #14
   12594:	andeq	r2, r1, r0, asr r7
   12598:	andeq	r2, r1, r0, ror #14
   1259c:	muleq	r1, ip, r4
   125a0:	andeq	r2, r1, r0, ror #14
   125a4:	muleq	r1, r0, r1
   125a8:	andeq	r2, r1, r0, ror #14
   125ac:	andeq	r2, r1, r0, ror #14
   125b0:	andeq	r2, r1, r0, ror #14
   125b4:	muleq	r1, ip, r4
   125b8:	muleq	r1, ip, r4
   125bc:	muleq	r1, ip, r4
   125c0:	muleq	r1, ip, r4
   125c4:	muleq	r1, ip, r4
   125c8:	muleq	r1, ip, r4
   125cc:	muleq	r1, ip, r4
   125d0:	muleq	r1, ip, r4
   125d4:	muleq	r1, ip, r4
   125d8:	muleq	r1, ip, r4
   125dc:	muleq	r1, ip, r4
   125e0:	muleq	r1, ip, r4
   125e4:	muleq	r1, ip, r4
   125e8:	muleq	r1, ip, r4
   125ec:	muleq	r1, ip, r4
   125f0:	muleq	r1, ip, r4
   125f4:	andeq	r2, r1, r0, ror #14
   125f8:	andeq	r2, r1, r0, ror #14
   125fc:	andeq	r2, r1, r0, ror #14
   12600:	andeq	r2, r1, r0, ror #14
   12604:	andeq	r2, r1, r4, ror #2
   12608:	andeq	r2, r1, r0, asr r4
   1260c:	muleq	r1, ip, r4
   12610:	muleq	r1, ip, r4
   12614:	muleq	r1, ip, r4
   12618:	muleq	r1, ip, r4
   1261c:	muleq	r1, ip, r4
   12620:	muleq	r1, ip, r4
   12624:	muleq	r1, ip, r4
   12628:	muleq	r1, ip, r4
   1262c:	muleq	r1, ip, r4
   12630:	muleq	r1, ip, r4
   12634:	muleq	r1, ip, r4
   12638:	muleq	r1, ip, r4
   1263c:	muleq	r1, ip, r4
   12640:	muleq	r1, ip, r4
   12644:	muleq	r1, ip, r4
   12648:	muleq	r1, ip, r4
   1264c:	muleq	r1, ip, r4
   12650:	muleq	r1, ip, r4
   12654:	muleq	r1, ip, r4
   12658:	muleq	r1, ip, r4
   1265c:	muleq	r1, ip, r4
   12660:	muleq	r1, ip, r4
   12664:	muleq	r1, ip, r4
   12668:	muleq	r1, ip, r4
   1266c:	muleq	r1, ip, r4
   12670:	muleq	r1, ip, r4
   12674:	andeq	r2, r1, r0, ror #14
   12678:	andeq	r2, r1, ip, lsl #2
   1267c:	muleq	r1, ip, r4
   12680:	andeq	r2, r1, r0, ror #14
   12684:	muleq	r1, ip, r4
   12688:	andeq	r2, r1, r0, ror #14
   1268c:	muleq	r1, ip, r4
   12690:	muleq	r1, ip, r4
   12694:	muleq	r1, ip, r4
   12698:	muleq	r1, ip, r4
   1269c:	muleq	r1, ip, r4
   126a0:	muleq	r1, ip, r4
   126a4:	muleq	r1, ip, r4
   126a8:	muleq	r1, ip, r4
   126ac:	muleq	r1, ip, r4
   126b0:	muleq	r1, ip, r4
   126b4:	muleq	r1, ip, r4
   126b8:	muleq	r1, ip, r4
   126bc:	muleq	r1, ip, r4
   126c0:	muleq	r1, ip, r4
   126c4:	muleq	r1, ip, r4
   126c8:	muleq	r1, ip, r4
   126cc:	muleq	r1, ip, r4
   126d0:	muleq	r1, ip, r4
   126d4:	muleq	r1, ip, r4
   126d8:	muleq	r1, ip, r4
   126dc:	muleq	r1, ip, r4
   126e0:	muleq	r1, ip, r4
   126e4:	muleq	r1, ip, r4
   126e8:	muleq	r1, ip, r4
   126ec:	muleq	r1, ip, r4
   126f0:	muleq	r1, ip, r4
   126f4:	andeq	r1, r1, r0, lsr pc
   126f8:	andeq	r2, r1, r0, ror #14
   126fc:	andeq	r1, r1, r0, lsr pc
   12700:	andeq	r2, r1, r0, asr r7
   12704:	mov	r3, #114	; 0x72
   12708:	b	1226c <__assert_fail@plt+0x1478>
   1270c:	mov	r3, #102	; 0x66
   12710:	b	1213c <__assert_fail@plt+0x1348>
   12714:	mov	r3, #110	; 0x6e
   12718:	b	1226c <__assert_fail@plt+0x1478>
   1271c:	mov	r3, #98	; 0x62
   12720:	b	1213c <__assert_fail@plt+0x1348>
   12724:	mov	r3, #97	; 0x61
   12728:	b	1213c <__assert_fail@plt+0x1348>
   1272c:	ldr	r3, [sp, #40]	; 0x28
   12730:	cmp	r3, #0
   12734:	bne	12344 <__assert_fail@plt+0x1550>
   12738:	ldr	r3, [sp, #156]	; 0x9c
   1273c:	tst	r3, #1
   12740:	addne	r9, r9, #1
   12744:	bne	11ad8 <__assert_fail@plt+0xce4>
   12748:	ldr	r7, [sp, #40]	; 0x28
   1274c:	b	12148 <__assert_fail@plt+0x1354>
   12750:	sub	r3, fp, #2
   12754:	clz	r3, r3
   12758:	lsr	r3, r3, #5
   1275c:	b	11f5c <__assert_fail@plt+0x1168>
   12760:	sub	r3, fp, #2
   12764:	mov	r6, #0
   12768:	clz	r3, r3
   1276c:	lsr	r3, r3, #5
   12770:	ldr	r2, [sp, #44]	; 0x2c
   12774:	tst	r2, r3
   12778:	beq	11f68 <__assert_fail@plt+0x1174>
   1277c:	b	12284 <__assert_fail@plt+0x1490>
   12780:	sub	r3, fp, #2
   12784:	clz	r3, r3
   12788:	lsr	r3, r3, #5
   1278c:	b	12770 <__assert_fail@plt+0x197c>
   12790:	ldr	r3, [sp, #52]	; 0x34
   12794:	ldrb	r5, [r3]
   12798:	cmp	r5, #126	; 0x7e
   1279c:	ldrls	pc, [pc, r5, lsl #2]
   127a0:	b	1244c <__assert_fail@plt+0x1658>
   127a4:	andeq	r2, r1, r4, asr #6
   127a8:	andeq	r2, r1, ip, asr #8
   127ac:	andeq	r2, r1, ip, asr #8
   127b0:	andeq	r2, r1, ip, asr #8
   127b4:	andeq	r2, r1, ip, asr #8
   127b8:	andeq	r2, r1, ip, asr #8
   127bc:	andeq	r2, r1, ip, asr #8
   127c0:	andeq	r2, r1, r8, lsr #6
   127c4:	andeq	r2, r1, r0, lsr #6
   127c8:	ldrdeq	r2, [r1], -ip
   127cc:	andeq	r2, r1, r4, lsl r3
   127d0:	ldrdeq	r2, [r1], -r0
   127d4:	strdeq	r2, [r1], -r0
   127d8:	andeq	r2, r1, ip, lsr r3
   127dc:	andeq	r2, r1, ip, asr #8
   127e0:	andeq	r2, r1, ip, asr #8
   127e4:	andeq	r2, r1, ip, asr #8
   127e8:	andeq	r2, r1, ip, asr #8
   127ec:	andeq	r2, r1, ip, asr #8
   127f0:	andeq	r2, r1, ip, asr #8
   127f4:	andeq	r2, r1, ip, asr #8
   127f8:	andeq	r2, r1, ip, asr #8
   127fc:	andeq	r2, r1, ip, asr #8
   12800:	andeq	r2, r1, ip, asr #8
   12804:	andeq	r2, r1, ip, asr #8
   12808:	andeq	r2, r1, ip, asr #8
   1280c:	andeq	r2, r1, ip, asr #8
   12810:	andeq	r2, r1, ip, asr #8
   12814:	andeq	r2, r1, ip, asr #8
   12818:	andeq	r2, r1, ip, asr #8
   1281c:	andeq	r2, r1, ip, asr #8
   12820:	andeq	r2, r1, ip, asr #8
   12824:	andeq	r2, r1, r8, asr #19
   12828:	andeq	r2, r1, r0, lsr r3
   1282c:	andeq	r2, r1, r0, lsr r3
   12830:	andeq	r2, r1, ip, lsr #19
   12834:	andeq	r2, r1, r0, lsr r3
   12838:	andeq	r2, r1, r0, lsr #19
   1283c:	andeq	r2, r1, r0, lsr r3
   12840:	andeq	r2, r1, ip, lsl #3
   12844:	andeq	r2, r1, r0, lsr r3
   12848:	andeq	r2, r1, r0, lsr r3
   1284c:	andeq	r2, r1, r0, lsr r3
   12850:	andeq	r2, r1, r0, lsr #19
   12854:	andeq	r2, r1, r0, lsr #19
   12858:	andeq	r2, r1, r0, lsr #19
   1285c:	andeq	r2, r1, r0, lsr #19
   12860:	andeq	r2, r1, r0, lsr #19
   12864:	andeq	r2, r1, r0, lsr #19
   12868:	andeq	r2, r1, r0, lsr #19
   1286c:	andeq	r2, r1, r0, lsr #19
   12870:	andeq	r2, r1, r0, lsr #19
   12874:	andeq	r2, r1, r0, lsr #19
   12878:	andeq	r2, r1, r0, lsr #19
   1287c:	andeq	r2, r1, r0, lsr #19
   12880:	andeq	r2, r1, r0, lsr #19
   12884:	andeq	r2, r1, r0, lsr #19
   12888:	andeq	r2, r1, r0, lsr #19
   1288c:	andeq	r2, r1, r0, lsr #19
   12890:	andeq	r2, r1, r0, lsr r3
   12894:	andeq	r2, r1, r0, lsr r3
   12898:	andeq	r2, r1, r0, lsr r3
   1289c:	andeq	r2, r1, r0, lsr r3
   128a0:	andeq	r2, r1, r0, ror #2
   128a4:	andeq	r2, r1, ip, asr #8
   128a8:	andeq	r2, r1, r0, lsr #19
   128ac:	andeq	r2, r1, r0, lsr #19
   128b0:	andeq	r2, r1, r0, lsr #19
   128b4:	andeq	r2, r1, r0, lsr #19
   128b8:	andeq	r2, r1, r0, lsr #19
   128bc:	andeq	r2, r1, r0, lsr #19
   128c0:	andeq	r2, r1, r0, lsr #19
   128c4:	andeq	r2, r1, r0, lsr #19
   128c8:	andeq	r2, r1, r0, lsr #19
   128cc:	andeq	r2, r1, r0, lsr #19
   128d0:	andeq	r2, r1, r0, lsr #19
   128d4:	andeq	r2, r1, r0, lsr #19
   128d8:	andeq	r2, r1, r0, lsr #19
   128dc:	andeq	r2, r1, r0, lsr #19
   128e0:	andeq	r2, r1, r0, lsr #19
   128e4:	andeq	r2, r1, r0, lsr #19
   128e8:	andeq	r2, r1, r0, lsr #19
   128ec:	andeq	r2, r1, r0, lsr #19
   128f0:	andeq	r2, r1, r0, lsr #19
   128f4:	andeq	r2, r1, r0, lsr #19
   128f8:	andeq	r2, r1, r0, lsr #19
   128fc:	andeq	r2, r1, r0, lsr #19
   12900:	andeq	r2, r1, r0, lsr #19
   12904:	andeq	r2, r1, r0, lsr #19
   12908:	andeq	r2, r1, r0, lsr #19
   1290c:	andeq	r2, r1, r0, lsr #19
   12910:	andeq	r2, r1, r0, lsr r3
   12914:	andeq	r2, r1, r8, lsl #2
   12918:	andeq	r2, r1, r0, lsr #19
   1291c:	andeq	r2, r1, r0, lsr r3
   12920:	andeq	r2, r1, r0, lsr #19
   12924:	andeq	r2, r1, r0, lsr r3
   12928:	andeq	r2, r1, r0, lsr #19
   1292c:	andeq	r2, r1, r0, lsr #19
   12930:	andeq	r2, r1, r0, lsr #19
   12934:	andeq	r2, r1, r0, lsr #19
   12938:	andeq	r2, r1, r0, lsr #19
   1293c:	andeq	r2, r1, r0, lsr #19
   12940:	andeq	r2, r1, r0, lsr #19
   12944:	andeq	r2, r1, r0, lsr #19
   12948:	andeq	r2, r1, r0, lsr #19
   1294c:	andeq	r2, r1, r0, lsr #19
   12950:	andeq	r2, r1, r0, lsr #19
   12954:	andeq	r2, r1, r0, lsr #19
   12958:	andeq	r2, r1, r0, lsr #19
   1295c:	andeq	r2, r1, r0, lsr #19
   12960:	andeq	r2, r1, r0, lsr #19
   12964:	andeq	r2, r1, r0, lsr #19
   12968:	andeq	r2, r1, r0, lsr #19
   1296c:	andeq	r2, r1, r0, lsr #19
   12970:	andeq	r2, r1, r0, lsr #19
   12974:	andeq	r2, r1, r0, lsr #19
   12978:	andeq	r2, r1, r0, lsr #19
   1297c:	andeq	r2, r1, r0, lsr #19
   12980:	andeq	r2, r1, r0, lsr #19
   12984:	andeq	r2, r1, r0, lsr #19
   12988:	andeq	r2, r1, r0, lsr #19
   1298c:	andeq	r2, r1, r0, lsr #19
   12990:	andeq	r1, r1, ip, lsr #30
   12994:	andeq	r2, r1, r0, lsr r3
   12998:	andeq	r1, r1, ip, lsr #30
   1299c:	andeq	r2, r1, ip, lsr #19
   129a0:	mov	r6, r7
   129a4:	mov	r7, #0
   129a8:	b	12158 <__assert_fail@plt+0x1364>
   129ac:	cmp	r9, #0
   129b0:	mov	r2, #0
   129b4:	beq	1241c <__assert_fail@plt+0x1628>
   129b8:	mov	r6, #0
   129bc:	mov	r7, r2
   129c0:	mov	r3, r6
   129c4:	b	11f78 <__assert_fail@plt+0x1184>
   129c8:	mov	r2, #0
   129cc:	b	12430 <__assert_fail@plt+0x163c>
   129d0:	mov	r7, #0
   129d4:	mov	r3, #118	; 0x76
   129d8:	b	1213c <__assert_fail@plt+0x1348>
   129dc:	mov	r7, #0
   129e0:	mov	r3, #116	; 0x74
   129e4:	b	1226c <__assert_fail@plt+0x1478>
   129e8:	ldr	r3, [sp, #44]	; 0x2c
   129ec:	b	11fa0 <__assert_fail@plt+0x11ac>
   129f0:	ldr	r3, [sp, #44]	; 0x2c
   129f4:	cmp	r3, #0
   129f8:	bne	12e68 <__assert_fail@plt+0x2074>
   129fc:	add	r9, r9, #1
   12a00:	mov	r6, #0
   12a04:	ldr	r3, [sp, #48]	; 0x30
   12a08:	mov	r5, #92	; 0x5c
   12a0c:	b	1222c <__assert_fail@plt+0x1438>
   12a10:	ldr	r3, [sp, #32]
   12a14:	ldrb	r2, [r3, #1]
   12a18:	adds	r2, r2, #0
   12a1c:	movne	r2, #1
   12a20:	b	11f48 <__assert_fail@plt+0x1154>
   12a24:	ldr	r3, [sp, #156]	; 0x9c
   12a28:	ands	r3, r3, #4
   12a2c:	beq	12a54 <__assert_fail@plt+0x1c60>
   12a30:	ldr	r2, [sp, #28]
   12a34:	add	r3, r9, #2
   12a38:	cmp	r3, r2
   12a3c:	bcs	12a50 <__assert_fail@plt+0x1c5c>
   12a40:	ldr	r2, [sp, #52]	; 0x34
   12a44:	ldrb	r5, [r2, #1]
   12a48:	cmp	r5, #63	; 0x3f
   12a4c:	beq	12ecc <__assert_fail@plt+0x20d8>
   12a50:	mov	r3, #0
   12a54:	mov	r5, #63	; 0x3f
   12a58:	mov	r6, r3
   12a5c:	b	11f68 <__assert_fail@plt+0x1174>
   12a60:	ldr	r3, [sp, #44]	; 0x2c
   12a64:	cmp	r3, #0
   12a68:	bne	12e68 <__assert_fail@plt+0x2074>
   12a6c:	mov	r6, r3
   12a70:	mov	r5, #63	; 0x3f
   12a74:	b	11fa0 <__assert_fail@plt+0x11ac>
   12a78:	ldr	r1, [sp, #28]
   12a7c:	mov	r2, #0
   12a80:	mov	r3, #0
   12a84:	strd	r2, [sp, #104]	; 0x68
   12a88:	cmn	r1, #1
   12a8c:	bne	12a9c <__assert_fail@plt+0x1ca8>
   12a90:	ldr	r0, [sp, #32]
   12a94:	bl	10d34 <strlen@plt>
   12a98:	str	r0, [sp, #28]
   12a9c:	str	r8, [sp, #76]	; 0x4c
   12aa0:	mov	r3, #0
   12aa4:	str	sl, [sp, #80]	; 0x50
   12aa8:	ldr	sl, [sp, #32]
   12aac:	str	r5, [sp, #84]	; 0x54
   12ab0:	mov	r5, r3
   12ab4:	ldr	r8, [sp, #44]	; 0x2c
   12ab8:	str	r7, [sp, #88]	; 0x58
   12abc:	str	r4, [sp, #92]	; 0x5c
   12ac0:	ldr	r2, [sp, #28]
   12ac4:	add	r4, r9, r5
   12ac8:	add	r3, sp, #104	; 0x68
   12acc:	add	r7, sl, r4
   12ad0:	add	r0, sp, #100	; 0x64
   12ad4:	mov	r1, r7
   12ad8:	sub	r2, r2, r4
   12adc:	bl	14f6c <__assert_fail@plt+0x4178>
   12ae0:	subs	r1, r0, #0
   12ae4:	beq	12b30 <__assert_fail@plt+0x1d3c>
   12ae8:	cmn	r1, #1
   12aec:	beq	12ea8 <__assert_fail@plt+0x20b4>
   12af0:	cmn	r1, #2
   12af4:	beq	12fc8 <__assert_fail@plt+0x21d4>
   12af8:	cmp	fp, #2
   12afc:	movne	r3, #0
   12b00:	andeq	r3, r8, #1
   12b04:	cmp	r3, #0
   12b08:	bne	12c94 <__assert_fail@plt+0x1ea0>
   12b0c:	ldr	r0, [sp, #100]	; 0x64
   12b10:	add	r5, r5, r1
   12b14:	bl	10c80 <iswprint@plt>
   12b18:	cmp	r0, #0
   12b1c:	add	r0, sp, #104	; 0x68
   12b20:	moveq	r6, #0
   12b24:	bl	10c2c <mbsinit@plt>
   12b28:	cmp	r0, #0
   12b2c:	beq	12ac0 <__assert_fail@plt+0x1ccc>
   12b30:	ldr	r3, [sp, #40]	; 0x28
   12b34:	mov	ip, r5
   12b38:	eor	r2, r6, #1
   12b3c:	ldr	r8, [sp, #76]	; 0x4c
   12b40:	ldr	sl, [sp, #80]	; 0x50
   12b44:	and	r2, r2, r3
   12b48:	ldr	r5, [sp, #84]	; 0x54
   12b4c:	ldr	r7, [sp, #88]	; 0x58
   12b50:	ldr	r4, [sp, #92]	; 0x5c
   12b54:	cmp	ip, #1
   12b58:	bls	12494 <__assert_fail@plt+0x16a0>
   12b5c:	add	r1, ip, r9
   12b60:	mov	r0, #39	; 0x27
   12b64:	ldr	lr, [sp, #52]	; 0x34
   12b68:	mov	ip, #0
   12b6c:	str	r6, [sp, #52]	; 0x34
   12b70:	ldr	r6, [sp, #48]	; 0x30
   12b74:	b	12c30 <__assert_fail@plt+0x1e3c>
   12b78:	ldr	ip, [sp, #44]	; 0x2c
   12b7c:	sub	r3, fp, #2
   12b80:	clz	r3, r3
   12b84:	lsr	r3, r3, #5
   12b88:	cmp	ip, #0
   12b8c:	bne	12da0 <__assert_fail@plt+0x1fac>
   12b90:	eor	ip, r6, #1
   12b94:	ands	r3, r3, ip
   12b98:	beq	12bc8 <__assert_fail@plt+0x1dd4>
   12b9c:	cmp	sl, r4
   12ba0:	add	ip, r4, #1
   12ba4:	strbhi	r0, [r8, r4]
   12ba8:	cmp	sl, ip
   12bac:	movhi	r6, #36	; 0x24
   12bb0:	strbhi	r6, [r8, ip]
   12bb4:	add	ip, r4, #2
   12bb8:	mov	r6, r3
   12bbc:	cmp	sl, ip
   12bc0:	add	r4, r4, #3
   12bc4:	strbhi	r0, [r8, ip]
   12bc8:	cmp	sl, r4
   12bcc:	movhi	r3, #92	; 0x5c
   12bd0:	strbhi	r3, [r8, r4]
   12bd4:	add	r3, r4, #1
   12bd8:	cmp	sl, r3
   12bdc:	bls	12bec <__assert_fail@plt+0x1df8>
   12be0:	lsr	ip, r5, #6
   12be4:	add	ip, ip, #48	; 0x30
   12be8:	strb	ip, [r8, r3]
   12bec:	add	r3, r4, #2
   12bf0:	cmp	sl, r3
   12bf4:	bls	12c04 <__assert_fail@plt+0x1e10>
   12bf8:	ubfx	ip, r5, #3, #3
   12bfc:	add	ip, ip, #48	; 0x30
   12c00:	strb	ip, [r8, r3]
   12c04:	add	r9, r9, #1
   12c08:	and	r5, r5, #7
   12c0c:	cmp	r9, r1
   12c10:	add	r5, r5, #48	; 0x30
   12c14:	add	r4, r4, #3
   12c18:	bcs	12dcc <__assert_fail@plt+0x1fd8>
   12c1c:	mov	ip, r2
   12c20:	cmp	sl, r4
   12c24:	strbhi	r5, [r8, r4]
   12c28:	add	r4, r4, #1
   12c2c:	ldrb	r5, [lr, #1]!
   12c30:	cmp	r2, #0
   12c34:	bne	12b78 <__assert_fail@plt+0x1d84>
   12c38:	eor	r3, ip, #1
   12c3c:	cmp	r7, #0
   12c40:	and	r3, r3, r6
   12c44:	uxtb	r3, r3
   12c48:	beq	12c5c <__assert_fail@plt+0x1e68>
   12c4c:	cmp	sl, r4
   12c50:	movhi	r7, #92	; 0x5c
   12c54:	strbhi	r7, [r8, r4]
   12c58:	add	r4, r4, #1
   12c5c:	add	r9, r9, #1
   12c60:	cmp	r9, r1
   12c64:	bcs	12db4 <__assert_fail@plt+0x1fc0>
   12c68:	cmp	r3, #0
   12c6c:	beq	12dec <__assert_fail@plt+0x1ff8>
   12c70:	cmp	sl, r4
   12c74:	add	r3, r4, #1
   12c78:	mov	r7, #0
   12c7c:	strbhi	r0, [r8, r4]
   12c80:	cmp	sl, r3
   12c84:	add	r4, r4, #2
   12c88:	mov	r6, r7
   12c8c:	strbhi	r0, [r8, r3]
   12c90:	b	12c20 <__assert_fail@plt+0x1e2c>
   12c94:	cmp	r1, #1
   12c98:	beq	12b0c <__assert_fail@plt+0x1d18>
   12c9c:	add	r2, r4, #1
   12ca0:	add	r3, sl, r1
   12ca4:	add	r2, sl, r2
   12ca8:	add	r4, r3, r4
   12cac:	ldrb	r3, [r2], #1
   12cb0:	sub	r3, r3, #91	; 0x5b
   12cb4:	cmp	r3, #33	; 0x21
   12cb8:	ldrls	pc, [pc, r3, lsl #2]
   12cbc:	b	12d48 <__assert_fail@plt+0x1f54>
   12cc0:	andeq	r2, r1, r4, asr sp
   12cc4:	andeq	r2, r1, r4, asr sp
   12cc8:	andeq	r2, r1, r8, asr #26
   12ccc:	andeq	r2, r1, r4, asr sp
   12cd0:	andeq	r2, r1, r8, asr #26
   12cd4:	andeq	r2, r1, r4, asr sp
   12cd8:	andeq	r2, r1, r8, asr #26
   12cdc:	andeq	r2, r1, r8, asr #26
   12ce0:	andeq	r2, r1, r8, asr #26
   12ce4:	andeq	r2, r1, r8, asr #26
   12ce8:	andeq	r2, r1, r8, asr #26
   12cec:	andeq	r2, r1, r8, asr #26
   12cf0:	andeq	r2, r1, r8, asr #26
   12cf4:	andeq	r2, r1, r8, asr #26
   12cf8:	andeq	r2, r1, r8, asr #26
   12cfc:	andeq	r2, r1, r8, asr #26
   12d00:	andeq	r2, r1, r8, asr #26
   12d04:	andeq	r2, r1, r8, asr #26
   12d08:	andeq	r2, r1, r8, asr #26
   12d0c:	andeq	r2, r1, r8, asr #26
   12d10:	andeq	r2, r1, r8, asr #26
   12d14:	andeq	r2, r1, r8, asr #26
   12d18:	andeq	r2, r1, r8, asr #26
   12d1c:	andeq	r2, r1, r8, asr #26
   12d20:	andeq	r2, r1, r8, asr #26
   12d24:	andeq	r2, r1, r8, asr #26
   12d28:	andeq	r2, r1, r8, asr #26
   12d2c:	andeq	r2, r1, r8, asr #26
   12d30:	andeq	r2, r1, r8, asr #26
   12d34:	andeq	r2, r1, r8, asr #26
   12d38:	andeq	r2, r1, r8, asr #26
   12d3c:	andeq	r2, r1, r8, asr #26
   12d40:	andeq	r2, r1, r8, asr #26
   12d44:	andeq	r2, r1, r4, asr sp
   12d48:	cmp	r4, r2
   12d4c:	bne	12cac <__assert_fail@plt+0x1eb8>
   12d50:	b	12b0c <__assert_fail@plt+0x1d18>
   12d54:	mov	r8, #2
   12d58:	ldr	fp, [sp, #76]	; 0x4c
   12d5c:	ldr	sl, [sp, #80]	; 0x50
   12d60:	b	1228c <__assert_fail@plt+0x1498>
   12d64:	ldr	r2, [sp, #40]	; 0x28
   12d68:	str	fp, [sp, #152]	; 0x98
   12d6c:	mov	fp, r8
   12d70:	ldr	r8, [sp, #152]	; 0x98
   12d74:	and	r2, r2, r3
   12d78:	str	r2, [sp, #40]	; 0x28
   12d7c:	b	1228c <__assert_fail@plt+0x1498>
   12d80:	cmp	sl, r4
   12d84:	movls	r0, r4
   12d88:	bls	123bc <__assert_fail@plt+0x15c8>
   12d8c:	ldr	r3, [sp, #48]	; 0x30
   12d90:	b	123ac <__assert_fail@plt+0x15b8>
   12d94:	str	sl, [sp, #72]	; 0x48
   12d98:	ldr	sl, [sp, #44]	; 0x2c
   12d9c:	b	121fc <__assert_fail@plt+0x1408>
   12da0:	str	r3, [sp, #40]	; 0x28
   12da4:	str	fp, [sp, #152]	; 0x98
   12da8:	mov	fp, r8
   12dac:	ldr	r8, [sp, #152]	; 0x98
   12db0:	b	1228c <__assert_fail@plt+0x1498>
   12db4:	str	r6, [sp, #48]	; 0x30
   12db8:	ldr	r6, [sp, #52]	; 0x34
   12dbc:	b	1222c <__assert_fail@plt+0x1438>
   12dc0:	mov	r6, #0
   12dc4:	ldr	r2, [sp, #40]	; 0x28
   12dc8:	b	12b5c <__assert_fail@plt+0x1d68>
   12dcc:	str	r6, [sp, #48]	; 0x30
   12dd0:	ldr	r6, [sp, #52]	; 0x34
   12dd4:	b	12018 <__assert_fail@plt+0x1224>
   12dd8:	add	r4, r4, #4
   12ddc:	mov	r6, #0
   12de0:	str	r3, [sp, #48]	; 0x30
   12de4:	mov	r5, #48	; 0x30
   12de8:	b	11fa0 <__assert_fail@plt+0x11ac>
   12dec:	mov	r7, r3
   12df0:	b	12c20 <__assert_fail@plt+0x1e2c>
   12df4:	mov	r3, #1
   12df8:	movw	r2, #22496	; 0x57e0
   12dfc:	movt	r2, #1
   12e00:	mov	r4, r3
   12e04:	str	r3, [sp, #36]	; 0x24
   12e08:	str	r3, [sp, #40]	; 0x28
   12e0c:	str	sl, [sp, #44]	; 0x2c
   12e10:	str	sl, [sp, #48]	; 0x30
   12e14:	str	r3, [sp, #56]	; 0x38
   12e18:	str	r2, [sp, #60]	; 0x3c
   12e1c:	str	sl, [sp, #68]	; 0x44
   12e20:	str	sl, [sp, #72]	; 0x48
   12e24:	b	11ac8 <__assert_fail@plt+0xcd4>
   12e28:	mov	r3, r6
   12e2c:	mov	r5, #48	; 0x30
   12e30:	mov	r6, #0
   12e34:	b	11fa0 <__assert_fail@plt+0x11ac>
   12e38:	mov	r5, r3
   12e3c:	b	12318 <__assert_fail@plt+0x1524>
   12e40:	cmp	sl, r4
   12e44:	mov	r5, #48	; 0x30
   12e48:	movhi	r3, #48	; 0x30
   12e4c:	strbhi	r3, [r8, r4]
   12e50:	add	r3, r0, #2
   12e54:	add	r4, r0, #3
   12e58:	cmp	sl, r3
   12e5c:	movhi	r1, #48	; 0x30
   12e60:	strbhi	r1, [r8, r3]
   12e64:	b	123f0 <__assert_fail@plt+0x15fc>
   12e68:	str	fp, [sp, #152]	; 0x98
   12e6c:	mov	fp, r8
   12e70:	ldr	r8, [sp, #152]	; 0x98
   12e74:	b	1228c <__assert_fail@plt+0x1498>
   12e78:	ldr	r3, [sp, #164]	; 0xa4
   12e7c:	ldrb	r3, [r3]
   12e80:	cmp	r3, #0
   12e84:	beq	11a98 <__assert_fail@plt+0xca4>
   12e88:	ldr	r2, [sp, #164]	; 0xa4
   12e8c:	cmp	sl, r4
   12e90:	strbhi	r3, [fp, r4]
   12e94:	add	r4, r4, #1
   12e98:	ldrb	r3, [r2, #1]!
   12e9c:	cmp	r3, #0
   12ea0:	bne	12e8c <__assert_fail@plt+0x2098>
   12ea4:	b	11a98 <__assert_fail@plt+0xca4>
   12ea8:	mov	ip, r5
   12eac:	mov	r6, #0
   12eb0:	ldr	r2, [sp, #40]	; 0x28
   12eb4:	ldr	r8, [sp, #76]	; 0x4c
   12eb8:	ldr	sl, [sp, #80]	; 0x50
   12ebc:	ldr	r5, [sp, #84]	; 0x54
   12ec0:	ldr	r7, [sp, #88]	; 0x58
   12ec4:	ldr	r4, [sp, #92]	; 0x5c
   12ec8:	b	12b54 <__assert_fail@plt+0x1d60>
   12ecc:	ldr	r2, [sp, #32]
   12ed0:	ldrb	r1, [r2, r3]
   12ed4:	sub	r2, r1, #33	; 0x21
   12ed8:	cmp	r2, #29
   12edc:	ldrls	pc, [pc, r2, lsl #2]
   12ee0:	b	12fbc <__assert_fail@plt+0x21c8>
   12ee4:	andeq	r2, r1, ip, asr pc
   12ee8:			; <UNDEFINED> instruction: 0x00012fbc
   12eec:			; <UNDEFINED> instruction: 0x00012fbc
   12ef0:			; <UNDEFINED> instruction: 0x00012fbc
   12ef4:			; <UNDEFINED> instruction: 0x00012fbc
   12ef8:			; <UNDEFINED> instruction: 0x00012fbc
   12efc:	andeq	r2, r1, ip, asr pc
   12f00:	andeq	r2, r1, ip, asr pc
   12f04:	andeq	r2, r1, ip, asr pc
   12f08:			; <UNDEFINED> instruction: 0x00012fbc
   12f0c:			; <UNDEFINED> instruction: 0x00012fbc
   12f10:			; <UNDEFINED> instruction: 0x00012fbc
   12f14:	andeq	r2, r1, ip, asr pc
   12f18:			; <UNDEFINED> instruction: 0x00012fbc
   12f1c:	andeq	r2, r1, ip, asr pc
   12f20:			; <UNDEFINED> instruction: 0x00012fbc
   12f24:			; <UNDEFINED> instruction: 0x00012fbc
   12f28:			; <UNDEFINED> instruction: 0x00012fbc
   12f2c:			; <UNDEFINED> instruction: 0x00012fbc
   12f30:			; <UNDEFINED> instruction: 0x00012fbc
   12f34:			; <UNDEFINED> instruction: 0x00012fbc
   12f38:			; <UNDEFINED> instruction: 0x00012fbc
   12f3c:			; <UNDEFINED> instruction: 0x00012fbc
   12f40:			; <UNDEFINED> instruction: 0x00012fbc
   12f44:			; <UNDEFINED> instruction: 0x00012fbc
   12f48:			; <UNDEFINED> instruction: 0x00012fbc
   12f4c:			; <UNDEFINED> instruction: 0x00012fbc
   12f50:	andeq	r2, r1, ip, asr pc
   12f54:	andeq	r2, r1, ip, asr pc
   12f58:	andeq	r2, r1, ip, asr pc
   12f5c:	ldr	r2, [sp, #44]	; 0x2c
   12f60:	cmp	r2, #0
   12f64:	bne	130c0 <__assert_fail@plt+0x22cc>
   12f68:	cmp	sl, r4
   12f6c:	mov	r5, r1
   12f70:	movhi	r2, #63	; 0x3f
   12f74:	mov	r9, r3
   12f78:	strbhi	r2, [r8, r4]
   12f7c:	add	r2, r4, #1
   12f80:	cmp	sl, r2
   12f84:	movhi	r0, #34	; 0x22
   12f88:	strbhi	r0, [r8, r2]
   12f8c:	add	r2, r4, #2
   12f90:	cmp	sl, r2
   12f94:	movhi	r0, #34	; 0x22
   12f98:	strbhi	r0, [r8, r2]
   12f9c:	add	r2, r4, #3
   12fa0:	add	r4, r4, #4
   12fa4:	cmp	sl, r2
   12fa8:	movhi	r0, #63	; 0x3f
   12fac:	strbhi	r0, [r8, r2]
   12fb0:	mov	r2, #0
   12fb4:	mov	r6, r2
   12fb8:	b	123f0 <__assert_fail@plt+0x15fc>
   12fbc:	mov	r3, #0
   12fc0:	mov	r6, r3
   12fc4:	b	11f68 <__assert_fail@plt+0x1174>
   12fc8:	ldr	r0, [sp, #28]
   12fcc:	mov	r1, r4
   12fd0:	mov	r2, r7
   12fd4:	mov	r3, r5
   12fd8:	mov	ip, r5
   12fdc:	ldr	r8, [sp, #76]	; 0x4c
   12fe0:	ldr	sl, [sp, #80]	; 0x50
   12fe4:	cmp	r1, r0
   12fe8:	ldr	r5, [sp, #84]	; 0x54
   12fec:	ldr	r7, [sp, #88]	; 0x58
   12ff0:	ldr	r4, [sp, #92]	; 0x5c
   12ff4:	bcs	13028 <__assert_fail@plt+0x2234>
   12ff8:	ldrb	r6, [r2]
   12ffc:	cmp	r6, #0
   13000:	bne	13014 <__assert_fail@plt+0x2220>
   13004:	b	13148 <__assert_fail@plt+0x2354>
   13008:	ldrb	r6, [r2, #1]!
   1300c:	cmp	r6, #0
   13010:	beq	130d0 <__assert_fail@plt+0x22dc>
   13014:	add	r3, r3, #1
   13018:	add	r1, r9, r3
   1301c:	cmp	r1, r0
   13020:	bcc	13008 <__assert_fail@plt+0x2214>
   13024:	mov	ip, r3
   13028:	mov	r6, #0
   1302c:	ldr	r2, [sp, #40]	; 0x28
   13030:	b	12b54 <__assert_fail@plt+0x1d60>
   13034:	mov	r3, #1
   13038:	mov	r2, #0
   1303c:	mov	r4, r2
   13040:	str	r3, [sp, #36]	; 0x24
   13044:	str	r3, [sp, #40]	; 0x28
   13048:	str	r3, [sp, #44]	; 0x2c
   1304c:	str	r2, [sp, #48]	; 0x30
   13050:	str	r3, [sp, #56]	; 0x38
   13054:	movw	r3, #22496	; 0x57e0
   13058:	movt	r3, #1
   1305c:	str	r3, [sp, #60]	; 0x3c
   13060:	str	r2, [sp, #68]	; 0x44
   13064:	str	r2, [sp, #72]	; 0x48
   13068:	b	11ac8 <__assert_fail@plt+0xcd4>
   1306c:	mov	r2, r3
   13070:	ldr	r3, [sp, #60]	; 0x3c
   13074:	cmp	r3, #0
   13078:	moveq	r2, #0
   1307c:	andne	r2, r2, #1
   13080:	cmp	r2, #0
   13084:	beq	130b0 <__assert_fail@plt+0x22bc>
   13088:	mov	r2, r3
   1308c:	ldrb	r3, [r3]
   13090:	cmp	r3, #0
   13094:	beq	130b0 <__assert_fail@plt+0x22bc>
   13098:	cmp	sl, r4
   1309c:	strbhi	r3, [fp, r4]
   130a0:	add	r4, r4, #1
   130a4:	ldrb	r3, [r2, #1]!
   130a8:	cmp	r3, #0
   130ac:	bne	13098 <__assert_fail@plt+0x22a4>
   130b0:	cmp	sl, r4
   130b4:	movhi	r3, #0
   130b8:	strbhi	r3, [fp, r4]
   130bc:	b	122d0 <__assert_fail@plt+0x14dc>
   130c0:	str	fp, [sp, #152]	; 0x98
   130c4:	mov	fp, r8
   130c8:	ldr	r8, [sp, #152]	; 0x98
   130cc:	b	12298 <__assert_fail@plt+0x14a4>
   130d0:	mov	ip, r3
   130d4:	ldr	r2, [sp, #40]	; 0x28
   130d8:	b	12b54 <__assert_fail@plt+0x1d60>
   130dc:	str	fp, [sp, #152]	; 0x98
   130e0:	mov	fp, r8
   130e4:	ldr	r8, [sp, #152]	; 0x98
   130e8:	sub	r3, r8, #2
   130ec:	clz	r3, r3
   130f0:	lsr	r3, r3, #5
   130f4:	str	r3, [sp, #40]	; 0x28
   130f8:	b	1228c <__assert_fail@plt+0x1498>
   130fc:	mov	ip, #5
   13100:	ldr	r3, [sp, #28]
   13104:	str	ip, [sp]
   13108:	ldr	r2, [sp, #156]	; 0x9c
   1310c:	ldr	ip, [sp, #164]	; 0xa4
   13110:	ldr	r0, [sp, #160]	; 0xa0
   13114:	str	r2, [sp, #4]
   13118:	ldr	r2, [sp, #32]
   1311c:	ldr	r1, [sp, #72]	; 0x48
   13120:	str	ip, [sp, #12]
   13124:	ldr	ip, [sp, #168]	; 0xa8
   13128:	str	r0, [sp, #8]
   1312c:	mov	r0, fp
   13130:	str	ip, [sp, #16]
   13134:	bl	119e0 <__assert_fail@plt+0xbec>
   13138:	mov	r4, r0
   1313c:	b	122d0 <__assert_fail@plt+0x14dc>
   13140:	mov	r8, #2
   13144:	b	1228c <__assert_fail@plt+0x1498>
   13148:	ldr	r2, [sp, #40]	; 0x28
   1314c:	b	12b54 <__assert_fail@plt+0x1d60>
   13150:	mov	r3, #0
   13154:	mov	r2, #1
   13158:	mov	r4, r3
   1315c:	strd	r2, [sp, #36]	; 0x24
   13160:	strd	r2, [sp, #44]	; 0x2c
   13164:	str	r2, [sp, #56]	; 0x38
   13168:	str	r3, [sp, #68]	; 0x44
   1316c:	str	r3, [sp, #72]	; 0x48
   13170:	movw	r3, #22516	; 0x57f4
   13174:	movt	r3, #1
   13178:	str	r3, [sp, #60]	; 0x3c
   1317c:	b	11ac8 <__assert_fail@plt+0xcd4>
   13180:	mov	r3, #0
   13184:	mov	r1, #1
   13188:	mov	r2, r3
   1318c:	str	r1, [sp, #36]	; 0x24
   13190:	str	r3, [sp, #48]	; 0x30
   13194:	str	sl, [sp, #72]	; 0x48
   13198:	b	120d0 <__assert_fail@plt+0x12dc>
   1319c:	bl	10de8 <abort@plt>
   131a0:	strd	r4, [sp, #-36]!	; 0xffffffdc
   131a4:	mov	r4, r0
   131a8:	mov	r5, r3
   131ac:	strd	r6, [sp, #8]
   131b0:	movw	r7, #24800	; 0x60e0
   131b4:	movt	r7, #2
   131b8:	strd	r8, [sp, #16]
   131bc:	strd	sl, [sp, #24]
   131c0:	mov	sl, r1
   131c4:	mov	fp, r2
   131c8:	str	lr, [sp, #32]
   131cc:	sub	sp, sp, #60	; 0x3c
   131d0:	bl	10d4c <__errno_location@plt>
   131d4:	mov	r8, r0
   131d8:	cmn	r4, #-2147483647	; 0x80000001
   131dc:	ldr	r6, [r7]
   131e0:	movne	r0, #0
   131e4:	moveq	r0, #1
   131e8:	ldr	r3, [r8]
   131ec:	orrs	r0, r0, r4, lsr #31
   131f0:	str	r3, [sp, #28]
   131f4:	bne	13384 <__assert_fail@plt+0x2590>
   131f8:	ldr	r3, [r7, #4]
   131fc:	cmp	r3, r4
   13200:	bgt	13260 <__assert_fail@plt+0x246c>
   13204:	add	r1, r7, #8
   13208:	sub	r2, r4, r3
   1320c:	str	r3, [sp, #52]	; 0x34
   13210:	cmp	r6, r1
   13214:	add	r2, r2, #1
   13218:	beq	1335c <__assert_fail@plt+0x2568>
   1321c:	mov	r1, #8
   13220:	mov	r0, r6
   13224:	mvn	r3, #-2147483648	; 0x80000000
   13228:	str	r1, [sp]
   1322c:	add	r1, sp, #52	; 0x34
   13230:	bl	14204 <__assert_fail@plt+0x3410>
   13234:	mov	r6, r0
   13238:	str	r0, [r7]
   1323c:	ldr	r0, [r7, #4]
   13240:	mov	r1, #0
   13244:	ldr	r2, [sp, #52]	; 0x34
   13248:	sub	r2, r2, r0
   1324c:	add	r0, r6, r0, lsl #3
   13250:	lsl	r2, r2, #3
   13254:	bl	10d64 <memset@plt>
   13258:	ldr	r3, [sp, #52]	; 0x34
   1325c:	str	r3, [r7, #4]
   13260:	ldr	r1, [r5, #4]
   13264:	add	r0, r6, r4, lsl #3
   13268:	add	ip, r5, #8
   1326c:	mov	r3, fp
   13270:	mov	r2, sl
   13274:	ldr	r7, [r0, #4]
   13278:	str	r0, [sp, #36]	; 0x24
   1327c:	str	ip, [sp, #40]	; 0x28
   13280:	orr	r0, r1, #1
   13284:	ldr	r9, [r6, r4, lsl #3]
   13288:	str	ip, [sp, #8]
   1328c:	ldr	lr, [r5, #44]	; 0x2c
   13290:	str	r0, [sp, #4]
   13294:	ldr	ip, [r5]
   13298:	mov	r1, r9
   1329c:	str	ip, [sp, #32]
   132a0:	ldr	ip, [r5, #40]	; 0x28
   132a4:	str	ip, [sp, #12]
   132a8:	ldr	ip, [sp, #32]
   132ac:	str	lr, [sp, #16]
   132b0:	str	r0, [sp, #44]	; 0x2c
   132b4:	mov	r0, r7
   132b8:	str	ip, [sp]
   132bc:	bl	119e0 <__assert_fail@plt+0xbec>
   132c0:	cmp	r9, r0
   132c4:	bhi	13334 <__assert_fail@plt+0x2540>
   132c8:	add	r9, r0, #1
   132cc:	movw	r3, #24908	; 0x614c
   132d0:	movt	r3, #2
   132d4:	cmp	r7, r3
   132d8:	str	r9, [r6, r4, lsl #3]
   132dc:	beq	132e8 <__assert_fail@plt+0x24f4>
   132e0:	mov	r0, r7
   132e4:	bl	14df0 <__assert_fail@plt+0x3ffc>
   132e8:	mov	r0, r9
   132ec:	bl	14054 <__assert_fail@plt+0x3260>
   132f0:	ldr	ip, [r5]
   132f4:	mov	r3, fp
   132f8:	mov	r2, sl
   132fc:	mov	r1, r9
   13300:	mov	r7, r0
   13304:	ldr	lr, [sp, #36]	; 0x24
   13308:	ldr	r4, [r5, #40]	; 0x28
   1330c:	str	r0, [lr, #4]
   13310:	ldr	lr, [r5, #44]	; 0x2c
   13314:	str	ip, [sp]
   13318:	ldr	ip, [sp, #44]	; 0x2c
   1331c:	str	ip, [sp, #4]
   13320:	ldr	ip, [sp, #40]	; 0x28
   13324:	str	r4, [sp, #12]
   13328:	str	lr, [sp, #16]
   1332c:	str	ip, [sp, #8]
   13330:	bl	119e0 <__assert_fail@plt+0xbec>
   13334:	ldr	r3, [sp, #28]
   13338:	mov	r0, r7
   1333c:	str	r3, [r8]
   13340:	add	sp, sp, #60	; 0x3c
   13344:	ldrd	r4, [sp]
   13348:	ldrd	r6, [sp, #8]
   1334c:	ldrd	r8, [sp, #16]
   13350:	ldrd	sl, [sp, #24]
   13354:	add	sp, sp, #32
   13358:	pop	{pc}		; (ldr pc, [sp], #4)
   1335c:	mov	r1, #8
   13360:	mvn	r3, #-2147483648	; 0x80000000
   13364:	str	r1, [sp]
   13368:	add	r1, sp, #52	; 0x34
   1336c:	bl	14204 <__assert_fail@plt+0x3410>
   13370:	ldrd	r2, [r7, #8]
   13374:	mov	r6, r0
   13378:	str	r0, [r7]
   1337c:	strd	r2, [r0]
   13380:	b	1323c <__assert_fail@plt+0x2448>
   13384:	bl	10de8 <abort@plt>
   13388:	strd	r4, [sp, #-16]!
   1338c:	mov	r5, r0
   13390:	str	r6, [sp, #8]
   13394:	str	lr, [sp, #12]
   13398:	bl	10d4c <__errno_location@plt>
   1339c:	mov	r4, r0
   133a0:	cmp	r5, #0
   133a4:	ldr	r0, [pc, #32]	; 133cc <__assert_fail@plt+0x25d8>
   133a8:	mov	r1, #48	; 0x30
   133ac:	movne	r0, r5
   133b0:	ldr	r6, [r4]
   133b4:	bl	1437c <__assert_fail@plt+0x3588>
   133b8:	str	r6, [r4]
   133bc:	ldrd	r4, [sp]
   133c0:	ldr	r6, [sp, #8]
   133c4:	add	sp, sp, #12
   133c8:	pop	{pc}		; (ldr pc, [sp], #4)
   133cc:	andeq	r6, r2, ip, asr #4
   133d0:	ldr	r3, [pc, #12]	; 133e4 <__assert_fail@plt+0x25f0>
   133d4:	cmp	r0, #0
   133d8:	moveq	r0, r3
   133dc:	ldr	r0, [r0]
   133e0:	bx	lr
   133e4:	andeq	r6, r2, ip, asr #4
   133e8:	ldr	r3, [pc, #12]	; 133fc <__assert_fail@plt+0x2608>
   133ec:	cmp	r0, #0
   133f0:	moveq	r0, r3
   133f4:	str	r1, [r0]
   133f8:	bx	lr
   133fc:	andeq	r6, r2, ip, asr #4
   13400:	ldr	r3, [pc, #52]	; 1343c <__assert_fail@plt+0x2648>
   13404:	cmp	r0, #0
   13408:	push	{lr}		; (str lr, [sp, #-4]!)
   1340c:	lsr	lr, r1, #5
   13410:	and	r1, r1, #31
   13414:	moveq	r0, r3
   13418:	add	r3, r0, #8
   1341c:	ldr	ip, [r3, lr, lsl #2]
   13420:	lsr	r0, ip, r1
   13424:	eor	r2, r2, r0
   13428:	and	r0, r0, #1
   1342c:	and	r2, r2, #1
   13430:	eor	r1, ip, r2, lsl r1
   13434:	str	r1, [r3, lr, lsl #2]
   13438:	pop	{pc}		; (ldr pc, [sp], #4)
   1343c:	andeq	r6, r2, ip, asr #4
   13440:	ldr	r3, [pc, #16]	; 13458 <__assert_fail@plt+0x2664>
   13444:	cmp	r0, #0
   13448:	movne	r3, r0
   1344c:	ldr	r0, [r3, #4]
   13450:	str	r1, [r3, #4]
   13454:	bx	lr
   13458:	andeq	r6, r2, ip, asr #4
   1345c:	ldr	r3, [pc, #48]	; 13494 <__assert_fail@plt+0x26a0>
   13460:	cmp	r0, #0
   13464:	mov	ip, #10
   13468:	moveq	r0, r3
   1346c:	cmp	r2, #0
   13470:	cmpne	r1, #0
   13474:	str	ip, [r0]
   13478:	beq	13488 <__assert_fail@plt+0x2694>
   1347c:	str	r1, [r0, #40]	; 0x28
   13480:	str	r2, [r0, #44]	; 0x2c
   13484:	bx	lr
   13488:	str	r4, [sp, #-8]!
   1348c:	str	lr, [sp, #4]
   13490:	bl	10de8 <abort@plt>
   13494:	andeq	r6, r2, ip, asr #4
   13498:	strd	r4, [sp, #-28]!	; 0xffffffe4
   1349c:	strd	r6, [sp, #8]
   134a0:	mov	r7, r0
   134a4:	mov	r6, r1
   134a8:	strd	r8, [sp, #16]
   134ac:	mov	r8, r2
   134b0:	mov	r9, r3
   134b4:	str	lr, [sp, #24]
   134b8:	sub	sp, sp, #28
   134bc:	ldr	r4, [sp, #56]	; 0x38
   134c0:	ldr	ip, [pc, #104]	; 13530 <__assert_fail@plt+0x273c>
   134c4:	cmp	r4, #0
   134c8:	moveq	r4, ip
   134cc:	bl	10d4c <__errno_location@plt>
   134d0:	ldr	ip, [r4, #44]	; 0x2c
   134d4:	mov	r5, r0
   134d8:	mov	r1, r6
   134dc:	add	lr, r4, #8
   134e0:	mov	r3, r9
   134e4:	ldr	r6, [r5]
   134e8:	mov	r2, r8
   134ec:	mov	r0, r7
   134f0:	str	ip, [sp, #16]
   134f4:	ldr	ip, [r4, #40]	; 0x28
   134f8:	str	lr, [sp, #8]
   134fc:	str	ip, [sp, #12]
   13500:	ldr	ip, [r4, #4]
   13504:	str	ip, [sp, #4]
   13508:	ldr	ip, [r4]
   1350c:	str	ip, [sp]
   13510:	bl	119e0 <__assert_fail@plt+0xbec>
   13514:	str	r6, [r5]
   13518:	add	sp, sp, #28
   1351c:	ldrd	r4, [sp]
   13520:	ldrd	r6, [sp, #8]
   13524:	ldrd	r8, [sp, #16]
   13528:	add	sp, sp, #24
   1352c:	pop	{pc}		; (ldr pc, [sp], #4)
   13530:	andeq	r6, r2, ip, asr #4
   13534:	strd	r4, [sp, #-36]!	; 0xffffffdc
   13538:	cmp	r3, #0
   1353c:	ldr	r4, [pc, #220]	; 13620 <__assert_fail@plt+0x282c>
   13540:	movne	r4, r3
   13544:	strd	r6, [sp, #8]
   13548:	mov	r6, r2
   1354c:	strd	r8, [sp, #16]
   13550:	mov	r9, r0
   13554:	strd	sl, [sp, #24]
   13558:	mov	sl, r1
   1355c:	str	lr, [sp, #32]
   13560:	sub	sp, sp, #44	; 0x2c
   13564:	bl	10d4c <__errno_location@plt>
   13568:	ldr	r5, [r4, #4]
   1356c:	mov	r7, r0
   13570:	mov	r1, #0
   13574:	add	r8, r4, #8
   13578:	mov	r3, sl
   1357c:	ldr	ip, [r4, #44]	; 0x2c
   13580:	mov	r2, r9
   13584:	mov	r0, r1
   13588:	ldr	lr, [r7]
   1358c:	cmp	r6, r1
   13590:	orreq	r5, r5, #1
   13594:	str	ip, [sp, #16]
   13598:	ldr	ip, [r4, #40]	; 0x28
   1359c:	stmib	sp, {r5, r8, ip}
   135a0:	ldr	ip, [r4]
   135a4:	str	lr, [sp, #28]
   135a8:	str	ip, [sp]
   135ac:	bl	119e0 <__assert_fail@plt+0xbec>
   135b0:	add	r1, r0, #1
   135b4:	mov	fp, r0
   135b8:	mov	r0, r1
   135bc:	str	r1, [sp, #36]	; 0x24
   135c0:	bl	14054 <__assert_fail@plt+0x3260>
   135c4:	ldr	ip, [r4, #44]	; 0x2c
   135c8:	mov	r3, sl
   135cc:	mov	r2, r9
   135d0:	ldr	r1, [sp, #36]	; 0x24
   135d4:	str	ip, [sp, #16]
   135d8:	ldr	ip, [r4, #40]	; 0x28
   135dc:	str	r0, [sp, #32]
   135e0:	stmib	sp, {r5, r8, ip}
   135e4:	ldr	ip, [r4]
   135e8:	str	ip, [sp]
   135ec:	bl	119e0 <__assert_fail@plt+0xbec>
   135f0:	ldr	lr, [sp, #28]
   135f4:	cmp	r6, #0
   135f8:	ldr	r0, [sp, #32]
   135fc:	str	lr, [r7]
   13600:	strne	fp, [r6]
   13604:	add	sp, sp, #44	; 0x2c
   13608:	ldrd	r4, [sp]
   1360c:	ldrd	r6, [sp, #8]
   13610:	ldrd	r8, [sp, #16]
   13614:	ldrd	sl, [sp, #24]
   13618:	add	sp, sp, #32
   1361c:	pop	{pc}		; (ldr pc, [sp], #4)
   13620:	andeq	r6, r2, ip, asr #4
   13624:	mov	r3, r2
   13628:	mov	r2, #0
   1362c:	b	13534 <__assert_fail@plt+0x2740>
   13630:	strd	r4, [sp, #-24]!	; 0xffffffe8
   13634:	movw	r5, #24800	; 0x60e0
   13638:	movt	r5, #2
   1363c:	ldr	r3, [r5, #4]
   13640:	strd	r6, [sp, #8]
   13644:	str	r8, [sp, #16]
   13648:	str	lr, [sp, #20]
   1364c:	ldr	r7, [r5]
   13650:	cmp	r3, #1
   13654:	ble	13678 <__assert_fail@plt+0x2884>
   13658:	mov	r4, #1
   1365c:	add	r6, r7, #4
   13660:	ldr	r0, [r6, r4, lsl #3]
   13664:	add	r4, r4, #1
   13668:	bl	14df0 <__assert_fail@plt+0x3ffc>
   1366c:	ldr	r3, [r5, #4]
   13670:	cmp	r3, r4
   13674:	bgt	13660 <__assert_fail@plt+0x286c>
   13678:	ldr	r0, [r7, #4]
   1367c:	movw	r4, #24908	; 0x614c
   13680:	movt	r4, #2
   13684:	cmp	r0, r4
   13688:	beq	1369c <__assert_fail@plt+0x28a8>
   1368c:	bl	14df0 <__assert_fail@plt+0x3ffc>
   13690:	mov	r3, #256	; 0x100
   13694:	str	r3, [r5, #8]
   13698:	str	r4, [r5, #12]
   1369c:	ldr	r4, [pc, #44]	; 136d0 <__assert_fail@plt+0x28dc>
   136a0:	cmp	r7, r4
   136a4:	beq	136b4 <__assert_fail@plt+0x28c0>
   136a8:	mov	r0, r7
   136ac:	bl	14df0 <__assert_fail@plt+0x3ffc>
   136b0:	str	r4, [r5]
   136b4:	mov	r3, #1
   136b8:	ldrd	r6, [sp, #8]
   136bc:	str	r3, [r5, #4]
   136c0:	ldrd	r4, [sp]
   136c4:	ldr	r8, [sp, #16]
   136c8:	add	sp, sp, #20
   136cc:	pop	{pc}		; (ldr pc, [sp], #4)
   136d0:	andeq	r6, r2, r8, ror #1
   136d4:	ldr	r3, [pc, #4]	; 136e0 <__assert_fail@plt+0x28ec>
   136d8:	mvn	r2, #0
   136dc:	b	131a0 <__assert_fail@plt+0x23ac>
   136e0:	andeq	r6, r2, ip, asr #4
   136e4:	ldr	r3, [pc]	; 136ec <__assert_fail@plt+0x28f8>
   136e8:	b	131a0 <__assert_fail@plt+0x23ac>
   136ec:	andeq	r6, r2, ip, asr #4
   136f0:	mov	r1, r0
   136f4:	ldr	r3, [pc, #8]	; 13704 <__assert_fail@plt+0x2910>
   136f8:	mvn	r2, #0
   136fc:	mov	r0, #0
   13700:	b	131a0 <__assert_fail@plt+0x23ac>
   13704:	andeq	r6, r2, ip, asr #4
   13708:	mov	r2, r1
   1370c:	ldr	r3, [pc, #8]	; 1371c <__assert_fail@plt+0x2928>
   13710:	mov	r1, r0
   13714:	mov	r0, #0
   13718:	b	131a0 <__assert_fail@plt+0x23ac>
   1371c:	andeq	r6, r2, ip, asr #4
   13720:	strd	r4, [sp, #-12]!
   13724:	mov	r5, r2
   13728:	mov	r4, r0
   1372c:	str	lr, [sp, #8]
   13730:	sub	sp, sp, #52	; 0x34
   13734:	mov	r0, sp
   13738:	bl	1183c <__assert_fail@plt+0xa48>
   1373c:	mov	r3, sp
   13740:	mov	r1, r5
   13744:	mov	r0, r4
   13748:	mvn	r2, #0
   1374c:	bl	131a0 <__assert_fail@plt+0x23ac>
   13750:	add	sp, sp, #52	; 0x34
   13754:	ldrd	r4, [sp]
   13758:	add	sp, sp, #8
   1375c:	pop	{pc}		; (ldr pc, [sp], #4)
   13760:	strd	r4, [sp, #-16]!
   13764:	mov	r5, r2
   13768:	mov	r4, r0
   1376c:	str	r6, [sp, #8]
   13770:	mov	r6, r3
   13774:	str	lr, [sp, #12]
   13778:	sub	sp, sp, #48	; 0x30
   1377c:	mov	r0, sp
   13780:	bl	1183c <__assert_fail@plt+0xa48>
   13784:	mov	r3, sp
   13788:	mov	r2, r6
   1378c:	mov	r1, r5
   13790:	mov	r0, r4
   13794:	bl	131a0 <__assert_fail@plt+0x23ac>
   13798:	add	sp, sp, #48	; 0x30
   1379c:	ldrd	r4, [sp]
   137a0:	ldr	r6, [sp, #8]
   137a4:	add	sp, sp, #12
   137a8:	pop	{pc}		; (ldr pc, [sp], #4)
   137ac:	mov	r2, r1
   137b0:	mov	r1, r0
   137b4:	mov	r0, #0
   137b8:	b	13720 <__assert_fail@plt+0x292c>
   137bc:	mov	r3, r2
   137c0:	mov	r2, r1
   137c4:	mov	r1, r0
   137c8:	mov	r0, #0
   137cc:	b	13760 <__assert_fail@plt+0x296c>
   137d0:	ldr	ip, [pc, #140]	; 13864 <__assert_fail@plt+0x2a70>
   137d4:	strd	r4, [sp, #-28]!	; 0xffffffe4
   137d8:	ldrd	r4, [ip]
   137dc:	strd	r6, [sp, #8]
   137e0:	ldrd	r6, [ip, #8]
   137e4:	strd	r8, [sp, #16]
   137e8:	lsr	r9, r2, #5
   137ec:	str	lr, [sp, #24]
   137f0:	sub	sp, sp, #52	; 0x34
   137f4:	and	lr, r2, #31
   137f8:	add	r8, sp, #8
   137fc:	mov	r2, r1
   13800:	strd	r4, [sp]
   13804:	mov	r1, r0
   13808:	mov	r3, sp
   1380c:	strd	r6, [sp, #8]
   13810:	mov	r0, #0
   13814:	ldrd	r4, [ip, #16]
   13818:	ldrd	r6, [ip, #24]
   1381c:	strd	r4, [sp, #16]
   13820:	ldrd	r4, [ip, #32]
   13824:	strd	r6, [sp, #24]
   13828:	ldrd	r6, [ip, #40]	; 0x28
   1382c:	strd	r4, [sp, #32]
   13830:	strd	r6, [sp, #40]	; 0x28
   13834:	ldr	ip, [r8, r9, lsl #2]
   13838:	mvn	r4, ip, lsr lr
   1383c:	and	r4, r4, #1
   13840:	eor	lr, ip, r4, lsl lr
   13844:	str	lr, [r8, r9, lsl #2]
   13848:	bl	131a0 <__assert_fail@plt+0x23ac>
   1384c:	add	sp, sp, #52	; 0x34
   13850:	ldrd	r4, [sp]
   13854:	ldrd	r6, [sp, #8]
   13858:	ldrd	r8, [sp, #16]
   1385c:	add	sp, sp, #24
   13860:	pop	{pc}		; (ldr pc, [sp], #4)
   13864:	andeq	r6, r2, ip, asr #4
   13868:	mov	r2, r1
   1386c:	mvn	r1, #0
   13870:	b	137d0 <__assert_fail@plt+0x29dc>
   13874:	mov	r2, #58	; 0x3a
   13878:	mvn	r1, #0
   1387c:	b	137d0 <__assert_fail@plt+0x29dc>
   13880:	mov	r2, #58	; 0x3a
   13884:	b	137d0 <__assert_fail@plt+0x29dc>
   13888:	strd	r4, [sp, #-20]!	; 0xffffffec
   1388c:	strd	r6, [sp, #8]
   13890:	mov	r6, r0
   13894:	mov	r7, r2
   13898:	str	lr, [sp, #16]
   1389c:	sub	sp, sp, #100	; 0x64
   138a0:	mov	r0, sp
   138a4:	bl	1183c <__assert_fail@plt+0xa48>
   138a8:	ldrd	r4, [sp, #8]
   138ac:	mov	r1, r7
   138b0:	mov	r0, r6
   138b4:	add	r3, sp, #48	; 0x30
   138b8:	mvn	r2, #0
   138bc:	ldrd	r6, [sp]
   138c0:	strd	r4, [sp, #56]	; 0x38
   138c4:	ldrd	r4, [sp, #16]
   138c8:	strd	r6, [sp, #48]	; 0x30
   138cc:	ldrd	r6, [sp, #32]
   138d0:	ldr	lr, [sp, #60]	; 0x3c
   138d4:	strd	r4, [sp, #64]	; 0x40
   138d8:	ldrd	r4, [sp, #24]
   138dc:	mvn	ip, lr
   138e0:	and	ip, ip, #67108864	; 0x4000000
   138e4:	strd	r4, [sp, #72]	; 0x48
   138e8:	eor	ip, ip, lr
   138ec:	ldrd	r4, [sp, #40]	; 0x28
   138f0:	str	ip, [sp, #60]	; 0x3c
   138f4:	strd	r6, [sp, #80]	; 0x50
   138f8:	strd	r4, [sp, #88]	; 0x58
   138fc:	bl	131a0 <__assert_fail@plt+0x23ac>
   13900:	add	sp, sp, #100	; 0x64
   13904:	ldrd	r4, [sp]
   13908:	ldrd	r6, [sp, #8]
   1390c:	add	sp, sp, #16
   13910:	pop	{pc}		; (ldr pc, [sp], #4)
   13914:	ldr	ip, [pc, #156]	; 139b8 <__assert_fail@plt+0x2bc4>
   13918:	cmp	r2, #0
   1391c:	cmpne	r1, #0
   13920:	strd	r4, [sp, #-32]!	; 0xffffffe0
   13924:	strd	r6, [sp, #8]
   13928:	mov	r6, r2
   1392c:	str	r8, [sp, #16]
   13930:	mov	r8, r3
   13934:	strd	sl, [sp, #20]
   13938:	ldrd	r4, [ip]
   1393c:	str	lr, [sp, #28]
   13940:	sub	sp, sp, #48	; 0x30
   13944:	mov	lr, #10
   13948:	ldrd	r2, [ip, #8]
   1394c:	ldrd	sl, [ip, #16]
   13950:	strd	r4, [sp]
   13954:	ldrd	r4, [ip, #32]
   13958:	str	lr, [sp]
   1395c:	strd	r2, [sp, #8]
   13960:	strd	sl, [sp, #16]
   13964:	ldrd	r2, [ip, #24]
   13968:	ldrd	sl, [ip, #40]	; 0x28
   1396c:	strd	r2, [sp, #24]
   13970:	strd	r4, [sp, #32]
   13974:	strd	sl, [sp, #40]	; 0x28
   13978:	beq	139b4 <__assert_fail@plt+0x2bc0>
   1397c:	ldr	r2, [sp, #80]	; 0x50
   13980:	mov	r7, r1
   13984:	mov	r3, sp
   13988:	mov	r1, r8
   1398c:	str	r7, [sp, #40]	; 0x28
   13990:	str	r6, [sp, #44]	; 0x2c
   13994:	bl	131a0 <__assert_fail@plt+0x23ac>
   13998:	add	sp, sp, #48	; 0x30
   1399c:	ldrd	r4, [sp]
   139a0:	ldrd	r6, [sp, #8]
   139a4:	ldr	r8, [sp, #16]
   139a8:	ldrd	sl, [sp, #20]
   139ac:	add	sp, sp, #28
   139b0:	pop	{pc}		; (ldr pc, [sp], #4)
   139b4:	bl	10de8 <abort@plt>
   139b8:	andeq	r6, r2, ip, asr #4
   139bc:	mvn	ip, #0
   139c0:	push	{lr}		; (str lr, [sp, #-4]!)
   139c4:	sub	sp, sp, #12
   139c8:	str	ip, [sp]
   139cc:	bl	13914 <__assert_fail@plt+0x2b20>
   139d0:	add	sp, sp, #12
   139d4:	pop	{pc}		; (ldr pc, [sp], #4)
   139d8:	mvn	ip, #0
   139dc:	push	{lr}		; (str lr, [sp, #-4]!)
   139e0:	sub	sp, sp, #12
   139e4:	mov	r3, r2
   139e8:	mov	r2, r1
   139ec:	mov	r1, r0
   139f0:	mov	r0, #0
   139f4:	str	ip, [sp]
   139f8:	bl	13914 <__assert_fail@plt+0x2b20>
   139fc:	add	sp, sp, #12
   13a00:	pop	{pc}		; (ldr pc, [sp], #4)
   13a04:	push	{lr}		; (str lr, [sp, #-4]!)
   13a08:	sub	sp, sp, #12
   13a0c:	str	r3, [sp]
   13a10:	mov	r3, r2
   13a14:	mov	r2, r1
   13a18:	mov	r1, r0
   13a1c:	mov	r0, #0
   13a20:	bl	13914 <__assert_fail@plt+0x2b20>
   13a24:	add	sp, sp, #12
   13a28:	pop	{pc}		; (ldr pc, [sp], #4)
   13a2c:	ldr	r3, [pc]	; 13a34 <__assert_fail@plt+0x2c40>
   13a30:	b	131a0 <__assert_fail@plt+0x23ac>
   13a34:	strdeq	r6, [r2], -r0
   13a38:	mov	r2, r1
   13a3c:	ldr	r3, [pc, #8]	; 13a4c <__assert_fail@plt+0x2c58>
   13a40:	mov	r1, r0
   13a44:	mov	r0, #0
   13a48:	b	131a0 <__assert_fail@plt+0x23ac>
   13a4c:	strdeq	r6, [r2], -r0
   13a50:	ldr	r3, [pc, #4]	; 13a5c <__assert_fail@plt+0x2c68>
   13a54:	mvn	r2, #0
   13a58:	b	131a0 <__assert_fail@plt+0x23ac>
   13a5c:	strdeq	r6, [r2], -r0
   13a60:	mov	r1, r0
   13a64:	ldr	r3, [pc, #8]	; 13a74 <__assert_fail@plt+0x2c80>
   13a68:	mvn	r2, #0
   13a6c:	mov	r0, #0
   13a70:	b	131a0 <__assert_fail@plt+0x23ac>
   13a74:	strdeq	r6, [r2], -r0
   13a78:	cmp	r1, #0
   13a7c:	strd	r4, [sp, #-16]!
   13a80:	mov	ip, r3
   13a84:	str	r6, [sp, #8]
   13a88:	mov	r4, r0
   13a8c:	str	lr, [sp, #12]
   13a90:	sub	sp, sp, #32
   13a94:	ldr	r5, [sp, #48]	; 0x30
   13a98:	ldr	r6, [sp, #52]	; 0x34
   13a9c:	beq	13be0 <__assert_fail@plt+0x2dec>
   13aa0:	mov	r3, r1
   13aa4:	mov	r1, #1
   13aa8:	stm	sp, {r2, ip}
   13aac:	movw	r2, #22624	; 0x5860
   13ab0:	movt	r2, #1
   13ab4:	bl	10d88 <__fprintf_chk@plt>
   13ab8:	mov	r2, #5
   13abc:	movw	r1, #22644	; 0x5874
   13ac0:	movt	r1, #1
   13ac4:	mov	r0, #0
   13ac8:	bl	10c50 <dcgettext@plt>
   13acc:	movw	ip, #2022	; 0x7e6
   13ad0:	mov	r3, r0
   13ad4:	mov	r1, #1
   13ad8:	movw	r2, #23372	; 0x5b4c
   13adc:	movt	r2, #1
   13ae0:	mov	r0, r4
   13ae4:	str	ip, [sp]
   13ae8:	bl	10d88 <__fprintf_chk@plt>
   13aec:	mov	r1, r4
   13af0:	mov	r0, #10
   13af4:	bl	10c44 <fputc_unlocked@plt>
   13af8:	mov	r2, #5
   13afc:	movw	r1, #22648	; 0x5878
   13b00:	movt	r1, #1
   13b04:	mov	r0, #0
   13b08:	bl	10c50 <dcgettext@plt>
   13b0c:	mov	r2, r0
   13b10:	mov	r1, #1
   13b14:	movw	r3, #22820	; 0x5924
   13b18:	movt	r3, #1
   13b1c:	mov	r0, r4
   13b20:	bl	10d88 <__fprintf_chk@plt>
   13b24:	mov	r1, r4
   13b28:	mov	r0, #10
   13b2c:	bl	10c44 <fputc_unlocked@plt>
   13b30:	cmp	r6, #9
   13b34:	ldrls	pc, [pc, r6, lsl #2]
   13b38:	b	13e4c <__assert_fail@plt+0x3058>
   13b3c:	andeq	r3, r1, ip, asr #23
   13b40:	strdeq	r3, [r1], -ip
   13b44:	andeq	r3, r1, r8, lsr ip
   13b48:	andeq	r3, r1, r8, ror ip
   13b4c:	andeq	r3, r1, r0, asr #25
   13b50:	strdeq	r3, [r1], -r8
   13b54:	andeq	r3, r1, r0, asr #26
   13b58:	muleq	r1, r4, sp
   13b5c:	andeq	r3, r1, ip, ror #27
   13b60:	andeq	r3, r1, r4, ror #22
   13b64:	movw	r1, #23124	; 0x5a54
   13b68:	movt	r1, #1
   13b6c:	mov	r2, #5
   13b70:	mov	r0, #0
   13b74:	bl	10c50 <dcgettext@plt>
   13b78:	ldr	lr, [r5, #4]
   13b7c:	mov	r2, r0
   13b80:	mov	r1, #1
   13b84:	mov	r0, r4
   13b88:	ldr	r3, [r5, #8]
   13b8c:	ldr	ip, [r5, #32]
   13b90:	str	lr, [sp]
   13b94:	ldr	lr, [r5, #12]
   13b98:	str	ip, [sp, #28]
   13b9c:	ldr	ip, [r5, #28]
   13ba0:	str	r3, [sp, #4]
   13ba4:	ldr	r3, [r5, #16]
   13ba8:	str	lr, [sp, #8]
   13bac:	ldr	lr, [r5, #20]
   13bb0:	str	ip, [sp, #24]
   13bb4:	ldr	ip, [r5, #24]
   13bb8:	str	r3, [sp, #12]
   13bbc:	ldr	r3, [r5]
   13bc0:	str	lr, [sp, #16]
   13bc4:	str	ip, [sp, #20]
   13bc8:	bl	10d88 <__fprintf_chk@plt>
   13bcc:	add	sp, sp, #32
   13bd0:	ldrd	r4, [sp]
   13bd4:	ldr	r6, [sp, #8]
   13bd8:	add	sp, sp, #12
   13bdc:	pop	{pc}		; (ldr pc, [sp], #4)
   13be0:	mov	r3, r2
   13be4:	mov	r1, #1
   13be8:	str	ip, [sp]
   13bec:	movw	r2, #22636	; 0x586c
   13bf0:	movt	r2, #1
   13bf4:	bl	10d88 <__fprintf_chk@plt>
   13bf8:	b	13ab8 <__assert_fail@plt+0x2cc4>
   13bfc:	mov	r2, #5
   13c00:	movw	r1, #22856	; 0x5948
   13c04:	movt	r1, #1
   13c08:	mov	r0, #0
   13c0c:	bl	10c50 <dcgettext@plt>
   13c10:	ldr	r3, [r5]
   13c14:	mov	r2, r0
   13c18:	mov	r1, #1
   13c1c:	mov	r0, r4
   13c20:	add	sp, sp, #32
   13c24:	ldrd	r4, [sp]
   13c28:	ldr	r6, [sp, #8]
   13c2c:	ldr	lr, [sp, #12]
   13c30:	add	sp, sp, #16
   13c34:	b	10d88 <__fprintf_chk@plt>
   13c38:	mov	r2, #5
   13c3c:	movw	r1, #22872	; 0x5958
   13c40:	movt	r1, #1
   13c44:	mov	r0, #0
   13c48:	bl	10c50 <dcgettext@plt>
   13c4c:	ldm	r5, {r3, ip}
   13c50:	mov	r2, r0
   13c54:	mov	r1, #1
   13c58:	mov	r0, r4
   13c5c:	str	ip, [sp, #48]	; 0x30
   13c60:	add	sp, sp, #32
   13c64:	ldrd	r4, [sp]
   13c68:	ldr	r6, [sp, #8]
   13c6c:	ldr	lr, [sp, #12]
   13c70:	add	sp, sp, #16
   13c74:	b	10d88 <__fprintf_chk@plt>
   13c78:	mov	r2, #5
   13c7c:	movw	r1, #22896	; 0x5970
   13c80:	movt	r1, #1
   13c84:	mov	r0, #0
   13c88:	bl	10c50 <dcgettext@plt>
   13c8c:	ldm	r5, {r3, lr}
   13c90:	mov	r2, r0
   13c94:	mov	r1, #1
   13c98:	mov	r0, r4
   13c9c:	ldr	ip, [r5, #8]
   13ca0:	str	lr, [sp, #48]	; 0x30
   13ca4:	str	ip, [sp, #52]	; 0x34
   13ca8:	add	sp, sp, #32
   13cac:	ldrd	r4, [sp]
   13cb0:	ldr	r6, [sp, #8]
   13cb4:	ldr	lr, [sp, #12]
   13cb8:	add	sp, sp, #16
   13cbc:	b	10d88 <__fprintf_chk@plt>
   13cc0:	mov	r2, #5
   13cc4:	movw	r1, #22924	; 0x598c
   13cc8:	movt	r1, #1
   13ccc:	mov	r0, #0
   13cd0:	bl	10c50 <dcgettext@plt>
   13cd4:	ldmib	r5, {r3, ip, lr}
   13cd8:	mov	r2, r0
   13cdc:	mov	r1, #1
   13ce0:	mov	r0, r4
   13ce4:	str	r3, [sp]
   13ce8:	ldr	r3, [r5]
   13cec:	stmib	sp, {ip, lr}
   13cf0:	bl	10d88 <__fprintf_chk@plt>
   13cf4:	b	13bcc <__assert_fail@plt+0x2dd8>
   13cf8:	mov	r2, #5
   13cfc:	movw	r1, #22956	; 0x59ac
   13d00:	movt	r1, #1
   13d04:	mov	r0, #0
   13d08:	bl	10c50 <dcgettext@plt>
   13d0c:	ldmib	r5, {ip, lr}
   13d10:	mov	r2, r0
   13d14:	mov	r1, #1
   13d18:	mov	r0, r4
   13d1c:	ldr	r3, [r5, #16]
   13d20:	str	ip, [sp]
   13d24:	ldr	ip, [r5, #12]
   13d28:	str	r3, [sp, #12]
   13d2c:	ldr	r3, [r5]
   13d30:	str	lr, [sp, #4]
   13d34:	str	ip, [sp, #8]
   13d38:	bl	10d88 <__fprintf_chk@plt>
   13d3c:	b	13bcc <__assert_fail@plt+0x2dd8>
   13d40:	mov	r2, #5
   13d44:	movw	r1, #22992	; 0x59d0
   13d48:	movt	r1, #1
   13d4c:	mov	r0, #0
   13d50:	bl	10c50 <dcgettext@plt>
   13d54:	ldr	lr, [r5, #4]
   13d58:	mov	r2, r0
   13d5c:	mov	r1, #1
   13d60:	mov	r0, r4
   13d64:	ldr	r3, [r5, #8]
   13d68:	ldr	ip, [r5, #20]
   13d6c:	str	lr, [sp]
   13d70:	ldr	lr, [r5, #12]
   13d74:	str	ip, [sp, #16]
   13d78:	ldr	ip, [r5, #16]
   13d7c:	str	r3, [sp, #4]
   13d80:	ldr	r3, [r5]
   13d84:	str	lr, [sp, #8]
   13d88:	str	ip, [sp, #12]
   13d8c:	bl	10d88 <__fprintf_chk@plt>
   13d90:	b	13bcc <__assert_fail@plt+0x2dd8>
   13d94:	mov	r2, #5
   13d98:	movw	r1, #23032	; 0x59f8
   13d9c:	movt	r1, #1
   13da0:	mov	r0, #0
   13da4:	bl	10c50 <dcgettext@plt>
   13da8:	ldmib	r5, {r3, ip}
   13dac:	mov	r2, r0
   13db0:	mov	r1, #1
   13db4:	mov	r0, r4
   13db8:	ldr	lr, [r5, #24]
   13dbc:	str	r3, [sp]
   13dc0:	ldr	r3, [r5, #12]
   13dc4:	str	lr, [sp, #20]
   13dc8:	ldr	lr, [r5, #20]
   13dcc:	str	ip, [sp, #4]
   13dd0:	ldr	ip, [r5, #16]
   13dd4:	str	r3, [sp, #8]
   13dd8:	ldr	r3, [r5]
   13ddc:	str	ip, [sp, #12]
   13de0:	str	lr, [sp, #16]
   13de4:	bl	10d88 <__fprintf_chk@plt>
   13de8:	b	13bcc <__assert_fail@plt+0x2dd8>
   13dec:	mov	r2, #5
   13df0:	movw	r1, #23076	; 0x5a24
   13df4:	movt	r1, #1
   13df8:	mov	r0, #0
   13dfc:	bl	10c50 <dcgettext@plt>
   13e00:	ldmib	r5, {ip, lr}
   13e04:	mov	r2, r0
   13e08:	mov	r1, #1
   13e0c:	mov	r0, r4
   13e10:	ldr	r3, [r5, #28]
   13e14:	str	ip, [sp]
   13e18:	ldr	ip, [r5, #12]
   13e1c:	str	r3, [sp, #24]
   13e20:	ldr	r3, [r5, #24]
   13e24:	str	lr, [sp, #4]
   13e28:	ldr	lr, [r5, #16]
   13e2c:	str	ip, [sp, #8]
   13e30:	ldr	ip, [r5, #20]
   13e34:	str	r3, [sp, #20]
   13e38:	ldr	r3, [r5]
   13e3c:	str	lr, [sp, #12]
   13e40:	str	ip, [sp, #16]
   13e44:	bl	10d88 <__fprintf_chk@plt>
   13e48:	b	13bcc <__assert_fail@plt+0x2dd8>
   13e4c:	movw	r1, #23176	; 0x5a88
   13e50:	movt	r1, #1
   13e54:	b	13b6c <__assert_fail@plt+0x2d78>
   13e58:	strd	r4, [sp, #-12]!
   13e5c:	str	lr, [sp, #8]
   13e60:	sub	sp, sp, #12
   13e64:	ldr	r5, [sp, #24]
   13e68:	ldr	ip, [r5]
   13e6c:	cmp	ip, #0
   13e70:	beq	13e8c <__assert_fail@plt+0x3098>
   13e74:	mov	lr, r5
   13e78:	mov	ip, #0
   13e7c:	ldr	r4, [lr, #4]!
   13e80:	add	ip, ip, #1
   13e84:	cmp	r4, #0
   13e88:	bne	13e7c <__assert_fail@plt+0x3088>
   13e8c:	stm	sp, {r5, ip}
   13e90:	bl	13a78 <__assert_fail@plt+0x2c84>
   13e94:	add	sp, sp, #12
   13e98:	ldrd	r4, [sp]
   13e9c:	add	sp, sp, #8
   13ea0:	pop	{pc}		; (ldr pc, [sp], #4)
   13ea4:	strd	r4, [sp, #-16]!
   13ea8:	mov	ip, #0
   13eac:	str	r6, [sp, #8]
   13eb0:	str	lr, [sp, #12]
   13eb4:	sub	sp, sp, #48	; 0x30
   13eb8:	ldr	r5, [sp, #64]	; 0x40
   13ebc:	add	r6, sp, #8
   13ec0:	mov	r4, r6
   13ec4:	ldr	lr, [r5], #4
   13ec8:	cmp	lr, #0
   13ecc:	str	lr, [r4], #4
   13ed0:	beq	13ee0 <__assert_fail@plt+0x30ec>
   13ed4:	add	ip, ip, #1
   13ed8:	cmp	ip, #10
   13edc:	bne	13ec4 <__assert_fail@plt+0x30d0>
   13ee0:	stm	sp, {r6, ip}
   13ee4:	bl	13a78 <__assert_fail@plt+0x2c84>
   13ee8:	add	sp, sp, #48	; 0x30
   13eec:	ldrd	r4, [sp]
   13ef0:	ldr	r6, [sp, #8]
   13ef4:	add	sp, sp, #12
   13ef8:	pop	{pc}		; (ldr pc, [sp], #4)
   13efc:	push	{r3}		; (str r3, [sp, #-4]!)
   13f00:	mov	ip, #0
   13f04:	strd	r4, [sp, #-12]!
   13f08:	str	lr, [sp, #8]
   13f0c:	sub	sp, sp, #56	; 0x38
   13f10:	add	r3, sp, #72	; 0x48
   13f14:	add	r5, sp, #16
   13f18:	mov	r4, r3
   13f1c:	mov	lr, r5
   13f20:	str	r3, [sp, #12]
   13f24:	ldr	r3, [r4], #4
   13f28:	cmp	r3, #0
   13f2c:	str	r3, [lr], #4
   13f30:	beq	13f40 <__assert_fail@plt+0x314c>
   13f34:	add	ip, ip, #1
   13f38:	cmp	ip, #10
   13f3c:	bne	13f24 <__assert_fail@plt+0x3130>
   13f40:	ldr	r3, [sp, #68]	; 0x44
   13f44:	stm	sp, {r5, ip}
   13f48:	bl	13a78 <__assert_fail@plt+0x2c84>
   13f4c:	add	sp, sp, #56	; 0x38
   13f50:	ldrd	r4, [sp]
   13f54:	ldr	lr, [sp, #8]
   13f58:	add	sp, sp, #12
   13f5c:	add	sp, sp, #4
   13f60:	bx	lr
   13f64:	movw	r3, #24884	; 0x6134
   13f68:	movt	r3, #2
   13f6c:	str	r4, [sp, #-8]!
   13f70:	mov	r0, #10
   13f74:	ldr	r1, [r3]
   13f78:	str	lr, [sp, #4]
   13f7c:	bl	10c44 <fputc_unlocked@plt>
   13f80:	mov	r2, #5
   13f84:	movw	r1, #23236	; 0x5ac4
   13f88:	movt	r1, #1
   13f8c:	mov	r0, #0
   13f90:	bl	10c50 <dcgettext@plt>
   13f94:	mov	r1, r0
   13f98:	movw	r2, #23256	; 0x5ad8
   13f9c:	movt	r2, #1
   13fa0:	mov	r0, #1
   13fa4:	bl	10d70 <__printf_chk@plt>
   13fa8:	mov	r2, #5
   13fac:	movw	r1, #23280	; 0x5af0
   13fb0:	movt	r1, #1
   13fb4:	mov	r0, #0
   13fb8:	bl	10c50 <dcgettext@plt>
   13fbc:	mov	r1, r0
   13fc0:	movw	r3, #21816	; 0x5538
   13fc4:	movt	r3, #1
   13fc8:	movw	r2, #21856	; 0x5560
   13fcc:	movt	r2, #1
   13fd0:	mov	r0, #1
   13fd4:	bl	10d70 <__printf_chk@plt>
   13fd8:	mov	r2, #5
   13fdc:	movw	r1, #23300	; 0x5b04
   13fe0:	movt	r1, #1
   13fe4:	mov	r0, #0
   13fe8:	bl	10c50 <dcgettext@plt>
   13fec:	mov	r1, r0
   13ff0:	movw	r2, #23340	; 0x5b2c
   13ff4:	movt	r2, #1
   13ff8:	mov	r0, #1
   13ffc:	ldr	r4, [sp]
   14000:	ldr	lr, [sp, #4]
   14004:	add	sp, sp, #8
   14008:	b	10d70 <__printf_chk@plt>
   1400c:	str	r4, [sp, #-8]!
   14010:	str	lr, [sp, #4]
   14014:	bl	14bc0 <__assert_fail@plt+0x3dcc>
   14018:	cmp	r0, #0
   1401c:	beq	1402c <__assert_fail@plt+0x3238>
   14020:	ldr	r4, [sp]
   14024:	add	sp, sp, #4
   14028:	pop	{pc}		; (ldr pc, [sp], #4)
   1402c:	bl	14484 <__assert_fail@plt+0x3690>
   14030:	str	r4, [sp, #-8]!
   14034:	str	lr, [sp, #4]
   14038:	bl	14bc0 <__assert_fail@plt+0x3dcc>
   1403c:	cmp	r0, #0
   14040:	beq	14050 <__assert_fail@plt+0x325c>
   14044:	ldr	r4, [sp]
   14048:	add	sp, sp, #4
   1404c:	pop	{pc}		; (ldr pc, [sp], #4)
   14050:	bl	14484 <__assert_fail@plt+0x3690>
   14054:	str	r4, [sp, #-8]!
   14058:	str	lr, [sp, #4]
   1405c:	bl	14bc0 <__assert_fail@plt+0x3dcc>
   14060:	cmp	r0, #0
   14064:	beq	14074 <__assert_fail@plt+0x3280>
   14068:	ldr	r4, [sp]
   1406c:	add	sp, sp, #4
   14070:	pop	{pc}		; (ldr pc, [sp], #4)
   14074:	bl	14484 <__assert_fail@plt+0x3690>
   14078:	strd	r4, [sp, #-16]!
   1407c:	mov	r5, r0
   14080:	mov	r4, r1
   14084:	str	r6, [sp, #8]
   14088:	str	lr, [sp, #12]
   1408c:	bl	14bfc <__assert_fail@plt+0x3e08>
   14090:	cmp	r0, #0
   14094:	beq	140a8 <__assert_fail@plt+0x32b4>
   14098:	ldrd	r4, [sp]
   1409c:	ldr	r6, [sp, #8]
   140a0:	add	sp, sp, #12
   140a4:	pop	{pc}		; (ldr pc, [sp], #4)
   140a8:	adds	r4, r4, #0
   140ac:	movne	r4, #1
   140b0:	cmp	r5, #0
   140b4:	moveq	r4, #1
   140b8:	cmp	r4, #0
   140bc:	beq	14098 <__assert_fail@plt+0x32a4>
   140c0:	bl	14484 <__assert_fail@plt+0x3690>
   140c4:	cmp	r1, #0
   140c8:	orreq	r1, r1, #1
   140cc:	str	r4, [sp, #-8]!
   140d0:	str	lr, [sp, #4]
   140d4:	bl	14bfc <__assert_fail@plt+0x3e08>
   140d8:	cmp	r0, #0
   140dc:	beq	140ec <__assert_fail@plt+0x32f8>
   140e0:	ldr	r4, [sp]
   140e4:	add	sp, sp, #4
   140e8:	pop	{pc}		; (ldr pc, [sp], #4)
   140ec:	bl	14484 <__assert_fail@plt+0x3690>
   140f0:	strd	r4, [sp, #-16]!
   140f4:	mov	r4, r0
   140f8:	mov	r5, r2
   140fc:	str	r6, [sp, #8]
   14100:	mov	r6, r1
   14104:	str	lr, [sp, #12]
   14108:	bl	14fdc <__assert_fail@plt+0x41e8>
   1410c:	cmp	r0, #0
   14110:	beq	14124 <__assert_fail@plt+0x3330>
   14114:	ldrd	r4, [sp]
   14118:	ldr	r6, [sp, #8]
   1411c:	add	sp, sp, #12
   14120:	pop	{pc}		; (ldr pc, [sp], #4)
   14124:	cmp	r4, #0
   14128:	beq	14138 <__assert_fail@plt+0x3344>
   1412c:	cmp	r6, #0
   14130:	cmpne	r5, #0
   14134:	beq	14114 <__assert_fail@plt+0x3320>
   14138:	bl	14484 <__assert_fail@plt+0x3690>
   1413c:	b	140f0 <__assert_fail@plt+0x32fc>
   14140:	cmp	r2, #0
   14144:	cmpne	r1, #0
   14148:	str	r4, [sp, #-8]!
   1414c:	moveq	r2, #1
   14150:	str	lr, [sp, #4]
   14154:	moveq	r1, r2
   14158:	bl	14fdc <__assert_fail@plt+0x41e8>
   1415c:	cmp	r0, #0
   14160:	beq	14170 <__assert_fail@plt+0x337c>
   14164:	ldr	r4, [sp]
   14168:	add	sp, sp, #4
   1416c:	pop	{pc}		; (ldr pc, [sp], #4)
   14170:	bl	14484 <__assert_fail@plt+0x3690>
   14174:	mov	r2, r1
   14178:	mov	r1, r0
   1417c:	mov	r0, #0
   14180:	b	140f0 <__assert_fail@plt+0x32fc>
   14184:	mov	r2, r1
   14188:	mov	r1, r0
   1418c:	mov	r0, #0
   14190:	b	14140 <__assert_fail@plt+0x334c>
   14194:	cmp	r0, #0
   14198:	strd	r4, [sp, #-16]!
   1419c:	mov	r5, r1
   141a0:	ldr	r4, [r1]
   141a4:	str	r6, [sp, #8]
   141a8:	str	lr, [sp, #12]
   141ac:	beq	141dc <__assert_fail@plt+0x33e8>
   141b0:	lsr	r3, r4, #1
   141b4:	add	r3, r3, #1
   141b8:	adds	r4, r4, r3
   141bc:	bcs	141f8 <__assert_fail@plt+0x3404>
   141c0:	mov	r1, r4
   141c4:	bl	140f0 <__assert_fail@plt+0x32fc>
   141c8:	ldr	r6, [sp, #8]
   141cc:	str	r4, [r5]
   141d0:	ldrd	r4, [sp]
   141d4:	add	sp, sp, #12
   141d8:	pop	{pc}		; (ldr pc, [sp], #4)
   141dc:	cmp	r4, #0
   141e0:	bne	141c0 <__assert_fail@plt+0x33cc>
   141e4:	mov	r4, #64	; 0x40
   141e8:	udiv	r4, r4, r2
   141ec:	cmp	r2, #64	; 0x40
   141f0:	addhi	r4, r4, #1
   141f4:	b	141c0 <__assert_fail@plt+0x33cc>
   141f8:	bl	14484 <__assert_fail@plt+0x3690>
   141fc:	mov	r2, #1
   14200:	b	14194 <__assert_fail@plt+0x33a0>
   14204:	ldr	ip, [r1]
   14208:	strd	r4, [sp, #-32]!	; 0xffffffe0
   1420c:	mov	r5, r1
   14210:	strd	r6, [sp, #8]
   14214:	str	lr, [sp, #28]
   14218:	strd	r8, [sp, #16]
   1421c:	asr	lr, ip, #1
   14220:	ldr	r8, [sp, #32]
   14224:	str	sl, [sp, #24]
   14228:	adds	r4, ip, lr
   1422c:	mvn	lr, r3
   14230:	lsr	lr, lr, #31
   14234:	mvnvs	r4, #-2147483648	; 0x80000000
   14238:	cmp	r3, r4
   1423c:	movge	r1, #0
   14240:	andlt	r1, lr, #1
   14244:	cmp	r1, #0
   14248:	movne	r4, r3
   1424c:	smull	r6, r7, r4, r8
   14250:	cmp	r7, r6, asr #31
   14254:	bne	142dc <__assert_fail@plt+0x34e8>
   14258:	cmp	r6, #63	; 0x3f
   1425c:	mov	r1, r6
   14260:	ble	142c4 <__assert_fail@plt+0x34d0>
   14264:	cmp	r0, #0
   14268:	sub	r6, r4, ip
   1426c:	streq	r0, [r5]
   14270:	cmp	r6, r2
   14274:	bge	142a4 <__assert_fail@plt+0x34b0>
   14278:	adds	r4, ip, r2
   1427c:	bvs	142d8 <__assert_fail@plt+0x34e4>
   14280:	cmp	r4, r3
   14284:	movle	r3, #0
   14288:	andgt	r3, lr, #1
   1428c:	cmp	r3, #0
   14290:	bne	142d8 <__assert_fail@plt+0x34e4>
   14294:	smull	r8, r9, r4, r8
   14298:	cmp	r9, r8, asr #31
   1429c:	mov	r1, r8
   142a0:	bne	142d8 <__assert_fail@plt+0x34e4>
   142a4:	bl	14078 <__assert_fail@plt+0x3284>
   142a8:	ldrd	r6, [sp, #8]
   142ac:	ldrd	r8, [sp, #16]
   142b0:	ldr	sl, [sp, #24]
   142b4:	str	r4, [r5]
   142b8:	ldrd	r4, [sp]
   142bc:	add	sp, sp, #28
   142c0:	pop	{pc}		; (ldr pc, [sp], #4)
   142c4:	mov	r6, #64	; 0x40
   142c8:	sdiv	r4, r6, r8
   142cc:	mls	r1, r8, r4, r6
   142d0:	sub	r1, r6, r1
   142d4:	b	14264 <__assert_fail@plt+0x3470>
   142d8:	bl	14484 <__assert_fail@plt+0x3690>
   142dc:	mvn	r6, #-2147483648	; 0x80000000
   142e0:	b	142c8 <__assert_fail@plt+0x34d4>
   142e4:	mov	r1, #1
   142e8:	str	r4, [sp, #-8]!
   142ec:	str	lr, [sp, #4]
   142f0:	bl	14b4c <__assert_fail@plt+0x3d58>
   142f4:	cmp	r0, #0
   142f8:	beq	14308 <__assert_fail@plt+0x3514>
   142fc:	ldr	r4, [sp]
   14300:	add	sp, sp, #4
   14304:	pop	{pc}		; (ldr pc, [sp], #4)
   14308:	bl	14484 <__assert_fail@plt+0x3690>
   1430c:	mov	r1, #1
   14310:	str	r4, [sp, #-8]!
   14314:	str	lr, [sp, #4]
   14318:	bl	14b4c <__assert_fail@plt+0x3d58>
   1431c:	cmp	r0, #0
   14320:	beq	14330 <__assert_fail@plt+0x353c>
   14324:	ldr	r4, [sp]
   14328:	add	sp, sp, #4
   1432c:	pop	{pc}		; (ldr pc, [sp], #4)
   14330:	bl	14484 <__assert_fail@plt+0x3690>
   14334:	str	r4, [sp, #-8]!
   14338:	str	lr, [sp, #4]
   1433c:	bl	14b4c <__assert_fail@plt+0x3d58>
   14340:	cmp	r0, #0
   14344:	beq	14354 <__assert_fail@plt+0x3560>
   14348:	ldr	r4, [sp]
   1434c:	add	sp, sp, #4
   14350:	pop	{pc}		; (ldr pc, [sp], #4)
   14354:	bl	14484 <__assert_fail@plt+0x3690>
   14358:	str	r4, [sp, #-8]!
   1435c:	str	lr, [sp, #4]
   14360:	bl	14b4c <__assert_fail@plt+0x3d58>
   14364:	cmp	r0, #0
   14368:	beq	14378 <__assert_fail@plt+0x3584>
   1436c:	ldr	r4, [sp]
   14370:	add	sp, sp, #4
   14374:	pop	{pc}		; (ldr pc, [sp], #4)
   14378:	bl	14484 <__assert_fail@plt+0x3690>
   1437c:	strd	r4, [sp, #-16]!
   14380:	mov	r4, r1
   14384:	str	r6, [sp, #8]
   14388:	mov	r6, r0
   1438c:	mov	r0, r1
   14390:	str	lr, [sp, #12]
   14394:	bl	14bc0 <__assert_fail@plt+0x3dcc>
   14398:	subs	r5, r0, #0
   1439c:	beq	143c0 <__assert_fail@plt+0x35cc>
   143a0:	mov	r2, r4
   143a4:	mov	r1, r6
   143a8:	bl	10c14 <memcpy@plt>
   143ac:	mov	r0, r5
   143b0:	ldrd	r4, [sp]
   143b4:	ldr	r6, [sp, #8]
   143b8:	add	sp, sp, #12
   143bc:	pop	{pc}		; (ldr pc, [sp], #4)
   143c0:	bl	14484 <__assert_fail@plt+0x3690>
   143c4:	strd	r4, [sp, #-16]!
   143c8:	mov	r4, r1
   143cc:	str	r6, [sp, #8]
   143d0:	mov	r6, r0
   143d4:	mov	r0, r1
   143d8:	str	lr, [sp, #12]
   143dc:	bl	14bc0 <__assert_fail@plt+0x3dcc>
   143e0:	subs	r5, r0, #0
   143e4:	beq	14408 <__assert_fail@plt+0x3614>
   143e8:	mov	r2, r4
   143ec:	mov	r1, r6
   143f0:	bl	10c14 <memcpy@plt>
   143f4:	mov	r0, r5
   143f8:	ldrd	r4, [sp]
   143fc:	ldr	r6, [sp, #8]
   14400:	add	sp, sp, #12
   14404:	pop	{pc}		; (ldr pc, [sp], #4)
   14408:	bl	14484 <__assert_fail@plt+0x3690>
   1440c:	strd	r4, [sp, #-16]!
   14410:	mov	r4, r1
   14414:	str	r6, [sp, #8]
   14418:	mov	r6, r0
   1441c:	add	r0, r1, #1
   14420:	str	lr, [sp, #12]
   14424:	bl	14bc0 <__assert_fail@plt+0x3dcc>
   14428:	subs	r5, r0, #0
   1442c:	beq	14458 <__assert_fail@plt+0x3664>
   14430:	mov	r3, #0
   14434:	mov	r1, r6
   14438:	mov	r2, r4
   1443c:	strb	r3, [r5, r4]
   14440:	bl	10c14 <memcpy@plt>
   14444:	mov	r0, r5
   14448:	ldrd	r4, [sp]
   1444c:	ldr	r6, [sp, #8]
   14450:	add	sp, sp, #12
   14454:	pop	{pc}		; (ldr pc, [sp], #4)
   14458:	bl	14484 <__assert_fail@plt+0x3690>
   1445c:	str	r4, [sp, #-8]!
   14460:	mov	r4, r0
   14464:	str	lr, [sp, #4]
   14468:	bl	10d34 <strlen@plt>
   1446c:	add	r1, r0, #1
   14470:	mov	r0, r4
   14474:	ldr	r4, [sp]
   14478:	ldr	lr, [sp, #4]
   1447c:	add	sp, sp, #8
   14480:	b	1437c <__assert_fail@plt+0x3588>
   14484:	movw	r3, #24796	; 0x60dc
   14488:	movt	r3, #2
   1448c:	str	r4, [sp, #-8]!
   14490:	ldr	r4, [r3]
   14494:	mov	r2, #5
   14498:	movw	r1, #23420	; 0x5b7c
   1449c:	movt	r1, #1
   144a0:	mov	r0, #0
   144a4:	str	lr, [sp, #4]
   144a8:	bl	10c50 <dcgettext@plt>
   144ac:	mov	r3, r0
   144b0:	movw	r2, #22340	; 0x5744
   144b4:	movt	r2, #1
   144b8:	mov	r1, #0
   144bc:	mov	r0, r4
   144c0:	bl	10cc8 <error@plt>
   144c4:	bl	10de8 <abort@plt>
   144c8:	cmp	r2, #36	; 0x24
   144cc:	strd	r4, [sp, #-32]!	; 0xffffffe0
   144d0:	strd	r6, [sp, #8]
   144d4:	strd	r8, [sp, #16]
   144d8:	str	sl, [sp, #24]
   144dc:	str	lr, [sp, #28]
   144e0:	sub	sp, sp, #8
   144e4:	bhi	14aa4 <__assert_fail@plt+0x3cb0>
   144e8:	cmp	r1, #0
   144ec:	mov	r6, r1
   144f0:	mov	r5, r2
   144f4:	addeq	r6, sp, #4
   144f8:	mov	r9, r0
   144fc:	mov	r8, r3
   14500:	bl	10d4c <__errno_location@plt>
   14504:	mov	sl, r0
   14508:	mov	r4, #0
   1450c:	mov	r2, r5
   14510:	mov	r1, r6
   14514:	mov	r0, r9
   14518:	str	r4, [sl]
   1451c:	bl	10be4 <strtol@plt>
   14520:	ldr	r7, [r6]
   14524:	mov	r5, r0
   14528:	cmp	r7, r9
   1452c:	beq	14584 <__assert_fail@plt+0x3790>
   14530:	ldr	r4, [sl]
   14534:	cmp	r4, #0
   14538:	beq	14548 <__assert_fail@plt+0x3754>
   1453c:	cmp	r4, #34	; 0x22
   14540:	bne	14684 <__assert_fail@plt+0x3890>
   14544:	mov	r4, #1
   14548:	ldr	r3, [sp, #40]	; 0x28
   1454c:	cmp	r3, #0
   14550:	beq	14560 <__assert_fail@plt+0x376c>
   14554:	ldrb	r9, [r7]
   14558:	cmp	r9, #0
   1455c:	bne	14788 <__assert_fail@plt+0x3994>
   14560:	str	r5, [r8]
   14564:	mov	r0, r4
   14568:	add	sp, sp, #8
   1456c:	ldrd	r4, [sp]
   14570:	ldrd	r6, [sp, #8]
   14574:	ldrd	r8, [sp, #16]
   14578:	ldr	sl, [sp, #24]
   1457c:	add	sp, sp, #28
   14580:	pop	{pc}		; (ldr pc, [sp], #4)
   14584:	ldr	r3, [sp, #40]	; 0x28
   14588:	cmp	r3, r4
   1458c:	beq	14684 <__assert_fail@plt+0x3890>
   14590:	ldrb	r9, [r9]
   14594:	cmp	r9, r4
   14598:	beq	14684 <__assert_fail@plt+0x3890>
   1459c:	mov	r1, r9
   145a0:	mov	r0, r3
   145a4:	bl	10d40 <strchr@plt>
   145a8:	cmp	r0, r4
   145ac:	movne	r5, #1
   145b0:	beq	14684 <__assert_fail@plt+0x3890>
   145b4:	sub	sl, r9, #69	; 0x45
   145b8:	cmp	sl, #47	; 0x2f
   145bc:	ldrls	pc, [pc, sl, lsl #2]
   145c0:	b	147a4 <__assert_fail@plt+0x39b0>
   145c4:	andeq	r4, r1, ip, lsl #13
   145c8:	andeq	r4, r1, r4, lsr #15
   145cc:	andeq	r4, r1, ip, lsl #13
   145d0:	andeq	r4, r1, r4, lsr #15
   145d4:	andeq	r4, r1, r4, lsr #15
   145d8:	andeq	r4, r1, r4, lsr #15
   145dc:	andeq	r4, r1, ip, lsl #13
   145e0:	andeq	r4, r1, r4, lsr #15
   145e4:	andeq	r4, r1, ip, lsl #13
   145e8:	andeq	r4, r1, r4, lsr #15
   145ec:	andeq	r4, r1, r4, lsr #15
   145f0:	andeq	r4, r1, ip, lsl #13
   145f4:	andeq	r4, r1, r4, lsr #15
   145f8:	andeq	r4, r1, r4, lsr #15
   145fc:	andeq	r4, r1, r4, lsr #15
   14600:	andeq	r4, r1, ip, lsl #13
   14604:	andeq	r4, r1, r4, lsr #15
   14608:	andeq	r4, r1, r4, lsr #15
   1460c:	andeq	r4, r1, r4, lsr #15
   14610:	andeq	r4, r1, r4, lsr #15
   14614:	andeq	r4, r1, ip, lsl #13
   14618:	andeq	r4, r1, ip, lsl #13
   1461c:	andeq	r4, r1, r4, lsr #15
   14620:	andeq	r4, r1, r4, lsr #15
   14624:	andeq	r4, r1, r4, lsr #15
   14628:	andeq	r4, r1, r4, lsr #15
   1462c:	andeq	r4, r1, r4, lsr #15
   14630:	andeq	r4, r1, r4, lsr #15
   14634:	andeq	r4, r1, r4, lsr #15
   14638:	andeq	r4, r1, r4, lsr #15
   1463c:	andeq	r4, r1, r4, lsr #15
   14640:	andeq	r4, r1, r4, lsr #15
   14644:	andeq	r4, r1, r4, lsr #15
   14648:	andeq	r4, r1, r4, lsr #15
   1464c:	andeq	r4, r1, ip, lsl #13
   14650:	andeq	r4, r1, r4, lsr #15
   14654:	andeq	r4, r1, r4, lsr #15
   14658:	andeq	r4, r1, r4, lsr #15
   1465c:	andeq	r4, r1, ip, lsl #13
   14660:	andeq	r4, r1, r4, lsr #15
   14664:	andeq	r4, r1, ip, lsl #13
   14668:	andeq	r4, r1, r4, lsr #15
   1466c:	andeq	r4, r1, r4, lsr #15
   14670:	andeq	r4, r1, r4, lsr #15
   14674:	andeq	r4, r1, r4, lsr #15
   14678:	andeq	r4, r1, r4, lsr #15
   1467c:	andeq	r4, r1, r4, lsr #15
   14680:	andeq	r4, r1, ip, lsl #13
   14684:	mov	r4, #4
   14688:	b	14564 <__assert_fail@plt+0x3770>
   1468c:	mov	r1, #48	; 0x30
   14690:	ldr	r0, [sp, #40]	; 0x28
   14694:	bl	10d40 <strchr@plt>
   14698:	cmp	r0, #0
   1469c:	beq	147a4 <__assert_fail@plt+0x39b0>
   146a0:	ldrb	r3, [r7, #1]
   146a4:	cmp	r3, #68	; 0x44
   146a8:	beq	14a74 <__assert_fail@plt+0x3c80>
   146ac:	cmp	r3, #105	; 0x69
   146b0:	beq	14a80 <__assert_fail@plt+0x3c8c>
   146b4:	cmp	r3, #66	; 0x42
   146b8:	beq	14a74 <__assert_fail@plt+0x3c80>
   146bc:	cmp	sl, #47	; 0x2f
   146c0:	ldrls	pc, [pc, sl, lsl #2]
   146c4:	b	1479c <__assert_fail@plt+0x39a8>
   146c8:	andeq	r4, r1, r4, lsr #20
   146cc:	muleq	r1, ip, r7
   146d0:	strdeq	r4, [r1], -r8
   146d4:	muleq	r1, ip, r7
   146d8:	muleq	r1, ip, r7
   146dc:	muleq	r1, ip, r7
   146e0:	ldrdeq	r4, [r1], -r0
   146e4:	muleq	r1, ip, r7
   146e8:	muleq	r1, r8, r9
   146ec:	muleq	r1, ip, r7
   146f0:	muleq	r1, ip, r7
   146f4:	andeq	r4, r1, ip, asr #19
   146f8:	muleq	r1, ip, r7
   146fc:	muleq	r1, ip, r7
   14700:	muleq	r1, ip, r7
   14704:	andeq	r4, r1, ip, ror #18
   14708:	muleq	r1, ip, r7
   1470c:	muleq	r1, ip, r7
   14710:	muleq	r1, ip, r7
   14714:	muleq	r1, ip, r7
   14718:	andeq	r4, r1, r0, asr #18
   1471c:	andeq	r4, r1, r0, lsl r9
   14720:	muleq	r1, ip, r7
   14724:	muleq	r1, ip, r7
   14728:	muleq	r1, ip, r7
   1472c:	muleq	r1, ip, r7
   14730:	muleq	r1, ip, r7
   14734:	muleq	r1, ip, r7
   14738:	muleq	r1, ip, r7
   1473c:	andeq	r4, r1, ip, ror #17
   14740:	andeq	r4, r1, ip, ror #20
   14744:	muleq	r1, ip, r7
   14748:	muleq	r1, ip, r7
   1474c:	muleq	r1, ip, r7
   14750:	strdeq	r4, [r1], -r8
   14754:	muleq	r1, ip, r7
   14758:	muleq	r1, ip, r7
   1475c:	muleq	r1, ip, r7
   14760:	ldrdeq	r4, [r1], -r0
   14764:	muleq	r1, ip, r7
   14768:	muleq	r1, r8, r9
   1476c:	muleq	r1, ip, r7
   14770:	muleq	r1, ip, r7
   14774:	muleq	r1, ip, r7
   14778:	muleq	r1, ip, r7
   1477c:	muleq	r1, ip, r7
   14780:	muleq	r1, ip, r7
   14784:	andeq	r4, r1, ip, ror #18
   14788:	mov	r1, r9
   1478c:	ldr	r0, [sp, #40]	; 0x28
   14790:	bl	10d40 <strchr@plt>
   14794:	cmp	r0, #0
   14798:	bne	145b4 <__assert_fail@plt+0x37c0>
   1479c:	orr	r4, r4, #2
   147a0:	b	14560 <__assert_fail@plt+0x376c>
   147a4:	mov	ip, #1
   147a8:	mov	r2, #1024	; 0x400
   147ac:	sub	r9, r9, #66	; 0x42
   147b0:	cmp	r9, #53	; 0x35
   147b4:	ldrls	pc, [pc, r9, lsl #2]
   147b8:	b	1479c <__assert_fail@plt+0x39a8>
   147bc:	andeq	r4, r1, r0, asr sl
   147c0:	muleq	r1, ip, r7
   147c4:	muleq	r1, ip, r7
   147c8:	andeq	r4, r1, ip, lsr #20
   147cc:	muleq	r1, ip, r7
   147d0:	andeq	r4, r1, r0, lsl #20
   147d4:	muleq	r1, ip, r7
   147d8:	muleq	r1, ip, r7
   147dc:	muleq	r1, ip, r7
   147e0:	ldrdeq	r4, [r1], -r8
   147e4:	muleq	r1, ip, r7
   147e8:	andeq	r4, r1, r0, lsr #19
   147ec:	muleq	r1, ip, r7
   147f0:	muleq	r1, ip, r7
   147f4:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   147f8:	muleq	r1, ip, r7
   147fc:	muleq	r1, ip, r7
   14800:	muleq	r1, ip, r7
   14804:	andeq	r4, r1, r4, ror r9
   14808:	muleq	r1, ip, r7
   1480c:	muleq	r1, ip, r7
   14810:	muleq	r1, ip, r7
   14814:	muleq	r1, ip, r7
   14818:	andeq	r4, r1, r8, asr #18
   1481c:	andeq	r4, r1, r8, lsl r9
   14820:	muleq	r1, ip, r7
   14824:	muleq	r1, ip, r7
   14828:	muleq	r1, ip, r7
   1482c:	muleq	r1, ip, r7
   14830:	muleq	r1, ip, r7
   14834:	muleq	r1, ip, r7
   14838:	muleq	r1, ip, r7
   1483c:	strdeq	r4, [r1], -r0
   14840:			; <UNDEFINED> instruction: 0x000148b8
   14844:	muleq	r1, ip, r7
   14848:	muleq	r1, ip, r7
   1484c:	muleq	r1, ip, r7
   14850:	andeq	r4, r1, r0, lsl #20
   14854:	muleq	r1, ip, r7
   14858:	muleq	r1, ip, r7
   1485c:	muleq	r1, ip, r7
   14860:	ldrdeq	r4, [r1], -r8
   14864:	muleq	r1, ip, r7
   14868:	andeq	r4, r1, r0, lsr #19
   1486c:	muleq	r1, ip, r7
   14870:	muleq	r1, ip, r7
   14874:	muleq	r1, ip, r7
   14878:	muleq	r1, ip, r7
   1487c:	muleq	r1, ip, r7
   14880:	muleq	r1, ip, r7
   14884:	andeq	r4, r1, r4, ror r9
   14888:	muleq	r1, ip, r7
   1488c:	muleq	r1, ip, r7
   14890:	muleq	r1, r4, r8
   14894:	asr	r1, r5, #31
   14898:	adds	r2, r5, r5
   1489c:	adc	r3, r1, r1
   148a0:	cmp	r3, r2, asr #31
   148a4:	beq	148e4 <__assert_fail@plt+0x3af0>
   148a8:	cmp	r5, #0
   148ac:	movge	r4, #1
   148b0:	blt	14a98 <__assert_fail@plt+0x3ca4>
   148b4:	mvn	r5, #-2147483648	; 0x80000000
   148b8:	add	r3, r7, ip
   148bc:	str	r3, [r6]
   148c0:	ldrb	r3, [r7, ip]
   148c4:	cmp	r3, #0
   148c8:	beq	14560 <__assert_fail@plt+0x376c>
   148cc:	b	1479c <__assert_fail@plt+0x39a8>
   148d0:	mov	ip, #1
   148d4:	mov	r2, #1024	; 0x400
   148d8:	smull	r2, r3, r5, r2
   148dc:	cmp	r3, r2, asr #31
   148e0:	bne	14ac4 <__assert_fail@plt+0x3cd0>
   148e4:	mov	r5, r2
   148e8:	b	148b8 <__assert_fail@plt+0x3ac4>
   148ec:	mov	ip, #1
   148f0:	asr	r3, r5, #31
   148f4:	lsl	r1, r5, #9
   148f8:	lsl	r3, r3, #9
   148fc:	orr	r3, r3, r5, lsr #23
   14900:	cmp	r3, r1, asr #31
   14904:	bne	14ac4 <__assert_fail@plt+0x3cd0>
   14908:	mov	r5, r1
   1490c:	b	148b8 <__assert_fail@plt+0x3ac4>
   14910:	mov	ip, #1
   14914:	mov	r2, #1024	; 0x400
   14918:	mov	r3, #7
   1491c:	mov	lr, #0
   14920:	smull	r0, r1, r5, r2
   14924:	cmp	r1, r0, asr #31
   14928:	bne	14b10 <__assert_fail@plt+0x3d1c>
   1492c:	mov	r5, r0
   14930:	subs	r3, r3, #1
   14934:	bne	14920 <__assert_fail@plt+0x3b2c>
   14938:	orr	r4, r4, lr
   1493c:	b	148b8 <__assert_fail@plt+0x3ac4>
   14940:	mov	ip, #1
   14944:	mov	r2, #1024	; 0x400
   14948:	mov	r3, #8
   1494c:	mov	lr, #0
   14950:	smull	r0, r1, r5, r2
   14954:	cmp	r1, r0, asr #31
   14958:	bne	14afc <__assert_fail@plt+0x3d08>
   1495c:	mov	r5, r0
   14960:	subs	r3, r3, #1
   14964:	bne	14950 <__assert_fail@plt+0x3b5c>
   14968:	b	14938 <__assert_fail@plt+0x3b44>
   1496c:	mov	ip, #1
   14970:	mov	r2, #1024	; 0x400
   14974:	mov	r3, #4
   14978:	mov	lr, #0
   1497c:	smull	r0, r1, r5, r2
   14980:	cmp	r1, r0, asr #31
   14984:	bne	14b24 <__assert_fail@plt+0x3d30>
   14988:	mov	r5, r0
   1498c:	subs	r3, r3, #1
   14990:	bne	1497c <__assert_fail@plt+0x3b88>
   14994:	b	14938 <__assert_fail@plt+0x3b44>
   14998:	mov	ip, #1
   1499c:	mov	r2, #1024	; 0x400
   149a0:	smull	r0, r1, r5, r2
   149a4:	cmp	r1, r0, asr #31
   149a8:	bne	14ac4 <__assert_fail@plt+0x3cd0>
   149ac:	smull	r2, r3, r0, r2
   149b0:	cmp	r3, r2, asr #31
   149b4:	beq	148e4 <__assert_fail@plt+0x3af0>
   149b8:	cmp	r0, #0
   149bc:	mov	r4, #1
   149c0:	movlt	r5, #-2147483648	; 0x80000000
   149c4:	mvnge	r5, #-2147483648	; 0x80000000
   149c8:	b	148b8 <__assert_fail@plt+0x3ac4>
   149cc:	mov	ip, #1
   149d0:	mov	r2, #1024	; 0x400
   149d4:	mov	r3, #5
   149d8:	mov	lr, #0
   149dc:	smull	r0, r1, r5, r2
   149e0:	cmp	r1, r0, asr #31
   149e4:	bne	14b38 <__assert_fail@plt+0x3d44>
   149e8:	mov	r5, r0
   149ec:	subs	r3, r3, #1
   149f0:	bne	149dc <__assert_fail@plt+0x3be8>
   149f4:	b	14938 <__assert_fail@plt+0x3b44>
   149f8:	mov	ip, #1
   149fc:	mov	r2, #1024	; 0x400
   14a00:	mov	r3, #3
   14a04:	mov	lr, #0
   14a08:	smull	r0, r1, r5, r2
   14a0c:	cmp	r1, r0, asr #31
   14a10:	bne	14ad4 <__assert_fail@plt+0x3ce0>
   14a14:	mov	r5, r0
   14a18:	subs	r3, r3, #1
   14a1c:	bne	14a08 <__assert_fail@plt+0x3c14>
   14a20:	b	14938 <__assert_fail@plt+0x3b44>
   14a24:	mov	ip, #1
   14a28:	mov	r2, #1024	; 0x400
   14a2c:	mov	r3, #6
   14a30:	mov	lr, #0
   14a34:	smull	r0, r1, r5, r2
   14a38:	cmp	r1, r0, asr #31
   14a3c:	bne	14ae8 <__assert_fail@plt+0x3cf4>
   14a40:	mov	r5, r0
   14a44:	subs	r3, r3, #1
   14a48:	bne	14a34 <__assert_fail@plt+0x3c40>
   14a4c:	b	14938 <__assert_fail@plt+0x3b44>
   14a50:	asr	r3, r5, #31
   14a54:	lsl	r1, r5, #10
   14a58:	lsl	r3, r3, #10
   14a5c:	orr	r3, r3, r5, lsr #22
   14a60:	cmp	r3, r1, asr #31
   14a64:	beq	14908 <__assert_fail@plt+0x3b14>
   14a68:	b	148a8 <__assert_fail@plt+0x3ab4>
   14a6c:	mov	ip, #1
   14a70:	b	148b8 <__assert_fail@plt+0x3ac4>
   14a74:	mov	ip, #2
   14a78:	mov	r2, #1000	; 0x3e8
   14a7c:	b	147ac <__assert_fail@plt+0x39b8>
   14a80:	ldrb	r3, [r7, #2]
   14a84:	mov	r2, #1024	; 0x400
   14a88:	cmp	r3, #66	; 0x42
   14a8c:	movne	ip, #1
   14a90:	moveq	ip, #3
   14a94:	b	147ac <__assert_fail@plt+0x39b8>
   14a98:	mov	r4, #1
   14a9c:	mov	r5, #-2147483648	; 0x80000000
   14aa0:	b	148b8 <__assert_fail@plt+0x3ac4>
   14aa4:	movw	r3, #23440	; 0x5b90
   14aa8:	movt	r3, #1
   14aac:	movw	r1, #23448	; 0x5b98
   14ab0:	movt	r1, #1
   14ab4:	movw	r0, #23464	; 0x5ba8
   14ab8:	movt	r0, #1
   14abc:	mov	r2, #85	; 0x55
   14ac0:	bl	10df4 <__assert_fail@plt>
   14ac4:	cmp	r5, #0
   14ac8:	mov	r4, #1
   14acc:	bge	148b4 <__assert_fail@plt+0x3ac0>
   14ad0:	b	14a9c <__assert_fail@plt+0x3ca8>
   14ad4:	cmp	r5, #0
   14ad8:	mov	lr, #1
   14adc:	mvnge	r5, #-2147483648	; 0x80000000
   14ae0:	movlt	r5, #-2147483648	; 0x80000000
   14ae4:	b	14a18 <__assert_fail@plt+0x3c24>
   14ae8:	cmp	r5, #0
   14aec:	mov	lr, #1
   14af0:	mvnge	r5, #-2147483648	; 0x80000000
   14af4:	movlt	r5, #-2147483648	; 0x80000000
   14af8:	b	14a44 <__assert_fail@plt+0x3c50>
   14afc:	cmp	r5, #0
   14b00:	mov	lr, #1
   14b04:	mvnge	r5, #-2147483648	; 0x80000000
   14b08:	movlt	r5, #-2147483648	; 0x80000000
   14b0c:	b	14960 <__assert_fail@plt+0x3b6c>
   14b10:	cmp	r5, #0
   14b14:	mov	lr, #1
   14b18:	mvnge	r5, #-2147483648	; 0x80000000
   14b1c:	movlt	r5, #-2147483648	; 0x80000000
   14b20:	b	14930 <__assert_fail@plt+0x3b3c>
   14b24:	cmp	r5, #0
   14b28:	mov	lr, #1
   14b2c:	mvnge	r5, #-2147483648	; 0x80000000
   14b30:	movlt	r5, #-2147483648	; 0x80000000
   14b34:	b	1498c <__assert_fail@plt+0x3b98>
   14b38:	cmp	r5, #0
   14b3c:	mov	lr, #1
   14b40:	mvnge	r5, #-2147483648	; 0x80000000
   14b44:	movlt	r5, #-2147483648	; 0x80000000
   14b48:	b	149ec <__assert_fail@plt+0x3bf8>
   14b4c:	cmp	r1, #0
   14b50:	cmpne	r0, #0
   14b54:	beq	14ba0 <__assert_fail@plt+0x3dac>
   14b58:	strd	r4, [sp, #-16]!
   14b5c:	umull	r4, r5, r0, r1
   14b60:	str	r6, [sp, #8]
   14b64:	str	lr, [sp, #12]
   14b68:	adds	r3, r5, #0
   14b6c:	movne	r3, #1
   14b70:	cmp	r4, #0
   14b74:	blt	14b80 <__assert_fail@plt+0x3d8c>
   14b78:	cmp	r3, #0
   14b7c:	beq	14bac <__assert_fail@plt+0x3db8>
   14b80:	bl	10d4c <__errno_location@plt>
   14b84:	mov	r3, #12
   14b88:	ldrd	r4, [sp]
   14b8c:	ldr	r6, [sp, #8]
   14b90:	add	sp, sp, #12
   14b94:	str	r3, [r0]
   14b98:	mov	r0, #0
   14b9c:	pop	{pc}		; (ldr pc, [sp], #4)
   14ba0:	mov	r1, #1
   14ba4:	mov	r0, r1
   14ba8:	b	10bc0 <calloc@plt>
   14bac:	ldrd	r4, [sp]
   14bb0:	ldr	r6, [sp, #8]
   14bb4:	ldr	lr, [sp, #12]
   14bb8:	add	sp, sp, #16
   14bbc:	b	10bc0 <calloc@plt>
   14bc0:	cmp	r0, #0
   14bc4:	beq	14bd0 <__assert_fail@plt+0x3ddc>
   14bc8:	blt	14bd8 <__assert_fail@plt+0x3de4>
   14bcc:	b	10ce0 <malloc@plt>
   14bd0:	mov	r0, #1
   14bd4:	b	10ce0 <malloc@plt>
   14bd8:	str	r4, [sp, #-8]!
   14bdc:	str	lr, [sp, #4]
   14be0:	bl	10d4c <__errno_location@plt>
   14be4:	mov	r3, #12
   14be8:	ldr	r4, [sp]
   14bec:	add	sp, sp, #4
   14bf0:	str	r3, [r0]
   14bf4:	mov	r0, #0
   14bf8:	pop	{pc}		; (ldr pc, [sp], #4)
   14bfc:	cmp	r0, #0
   14c00:	beq	14c28 <__assert_fail@plt+0x3e34>
   14c04:	cmp	r1, #0
   14c08:	str	r4, [sp, #-8]!
   14c0c:	str	lr, [sp, #4]
   14c10:	beq	14c30 <__assert_fail@plt+0x3e3c>
   14c14:	blt	14c44 <__assert_fail@plt+0x3e50>
   14c18:	ldr	r4, [sp]
   14c1c:	ldr	lr, [sp, #4]
   14c20:	add	sp, sp, #8
   14c24:	b	10c5c <realloc@plt>
   14c28:	mov	r0, r1
   14c2c:	b	14bc0 <__assert_fail@plt+0x3dcc>
   14c30:	bl	14df0 <__assert_fail@plt+0x3ffc>
   14c34:	ldr	r4, [sp]
   14c38:	add	sp, sp, #4
   14c3c:	mov	r0, #0
   14c40:	pop	{pc}		; (ldr pc, [sp], #4)
   14c44:	bl	10d4c <__errno_location@plt>
   14c48:	mov	r3, #12
   14c4c:	str	r3, [r0]
   14c50:	b	14c34 <__assert_fail@plt+0x3e40>
   14c54:	strd	r4, [sp, #-16]!
   14c58:	mov	r4, r0
   14c5c:	str	r6, [sp, #8]
   14c60:	str	lr, [sp, #12]
   14c64:	bl	10cb0 <__fpending@plt>
   14c68:	ldr	r5, [r4]
   14c6c:	mov	r6, r0
   14c70:	mov	r0, r4
   14c74:	bl	14cdc <__assert_fail@plt+0x3ee8>
   14c78:	mov	r4, r0
   14c7c:	and	r5, r5, #32
   14c80:	cmp	r5, #0
   14c84:	bne	14cbc <__assert_fail@plt+0x3ec8>
   14c88:	cmp	r0, #0
   14c8c:	beq	14ca8 <__assert_fail@plt+0x3eb4>
   14c90:	cmp	r6, #0
   14c94:	bne	14cd4 <__assert_fail@plt+0x3ee0>
   14c98:	bl	10d4c <__errno_location@plt>
   14c9c:	ldr	r4, [r0]
   14ca0:	subs	r4, r4, #9
   14ca4:	mvnne	r4, #0
   14ca8:	mov	r0, r4
   14cac:	ldrd	r4, [sp]
   14cb0:	ldr	r6, [sp, #8]
   14cb4:	add	sp, sp, #12
   14cb8:	pop	{pc}		; (ldr pc, [sp], #4)
   14cbc:	cmp	r0, #0
   14cc0:	bne	14cd4 <__assert_fail@plt+0x3ee0>
   14cc4:	bl	10d4c <__errno_location@plt>
   14cc8:	str	r4, [r0]
   14ccc:	mvn	r4, #0
   14cd0:	b	14ca8 <__assert_fail@plt+0x3eb4>
   14cd4:	mvn	r4, #0
   14cd8:	b	14ca8 <__assert_fail@plt+0x3eb4>
   14cdc:	strd	r4, [sp, #-12]!
   14ce0:	mov	r4, r0
   14ce4:	str	lr, [sp, #8]
   14ce8:	sub	sp, sp, #12
   14cec:	bl	10d7c <fileno@plt>
   14cf0:	cmp	r0, #0
   14cf4:	mov	r0, r4
   14cf8:	blt	14d7c <__assert_fail@plt+0x3f88>
   14cfc:	bl	10cf8 <__freading@plt>
   14d00:	cmp	r0, #0
   14d04:	bne	14d48 <__assert_fail@plt+0x3f54>
   14d08:	mov	r0, r4
   14d0c:	bl	14d90 <__assert_fail@plt+0x3f9c>
   14d10:	cmp	r0, #0
   14d14:	beq	14d78 <__assert_fail@plt+0x3f84>
   14d18:	bl	10d4c <__errno_location@plt>
   14d1c:	mov	r5, r0
   14d20:	mov	r0, r4
   14d24:	ldr	r4, [r5]
   14d28:	bl	10d94 <fclose@plt>
   14d2c:	cmp	r4, #0
   14d30:	mvnne	r0, #0
   14d34:	strne	r4, [r5]
   14d38:	add	sp, sp, #12
   14d3c:	ldrd	r4, [sp]
   14d40:	add	sp, sp, #8
   14d44:	pop	{pc}		; (ldr pc, [sp], #4)
   14d48:	mov	r0, r4
   14d4c:	bl	10d7c <fileno@plt>
   14d50:	mov	r1, #1
   14d54:	mov	r2, #0
   14d58:	mov	r3, #0
   14d5c:	str	r1, [sp]
   14d60:	bl	10c98 <lseek64@plt>
   14d64:	mvn	r3, #0
   14d68:	mvn	r2, #0
   14d6c:	cmp	r1, r3
   14d70:	cmpeq	r0, r2
   14d74:	bne	14d08 <__assert_fail@plt+0x3f14>
   14d78:	mov	r0, r4
   14d7c:	add	sp, sp, #12
   14d80:	ldrd	r4, [sp]
   14d84:	ldr	lr, [sp, #8]
   14d88:	add	sp, sp, #12
   14d8c:	b	10d94 <fclose@plt>
   14d90:	str	r4, [sp, #-8]!
   14d94:	subs	r4, r0, #0
   14d98:	str	lr, [sp, #4]
   14d9c:	sub	sp, sp, #8
   14da0:	beq	14dbc <__assert_fail@plt+0x3fc8>
   14da4:	bl	10cf8 <__freading@plt>
   14da8:	cmp	r0, #0
   14dac:	beq	14dbc <__assert_fail@plt+0x3fc8>
   14db0:	ldr	r3, [r4]
   14db4:	tst	r3, #256	; 0x100
   14db8:	bne	14dd4 <__assert_fail@plt+0x3fe0>
   14dbc:	mov	r0, r4
   14dc0:	add	sp, sp, #8
   14dc4:	ldr	r4, [sp]
   14dc8:	ldr	lr, [sp, #4]
   14dcc:	add	sp, sp, #8
   14dd0:	b	10bf0 <fflush@plt>
   14dd4:	mov	r1, #1
   14dd8:	mov	r2, #0
   14ddc:	mov	r3, #0
   14de0:	mov	r0, r4
   14de4:	str	r1, [sp]
   14de8:	bl	14e50 <__assert_fail@plt+0x405c>
   14dec:	b	14dbc <__assert_fail@plt+0x3fc8>
   14df0:	strd	r4, [sp, #-12]!
   14df4:	mov	r5, r0
   14df8:	str	lr, [sp, #8]
   14dfc:	sub	sp, sp, #12
   14e00:	bl	10d4c <__errno_location@plt>
   14e04:	mov	r4, r0
   14e08:	mov	r2, #0
   14e0c:	ldr	r3, [r4]
   14e10:	mov	r0, r5
   14e14:	str	r2, [r4]
   14e18:	str	r3, [sp]
   14e1c:	str	r3, [sp, #4]
   14e20:	bl	10bfc <free@plt>
   14e24:	ldr	r3, [r4]
   14e28:	add	r2, sp, #8
   14e2c:	clz	r3, r3
   14e30:	lsr	r3, r3, #5
   14e34:	add	r3, r2, r3, lsl #2
   14e38:	ldr	r3, [r3, #-8]
   14e3c:	str	r3, [r4]
   14e40:	add	sp, sp, #12
   14e44:	ldrd	r4, [sp]
   14e48:	add	sp, sp, #8
   14e4c:	pop	{pc}		; (ldr pc, [sp], #4)
   14e50:	strd	r4, [sp, #-24]!	; 0xffffffe8
   14e54:	mov	r4, r0
   14e58:	ldr	ip, [r0, #4]
   14e5c:	strd	r6, [sp, #8]
   14e60:	str	lr, [sp, #20]
   14e64:	ldr	lr, [r0, #8]
   14e68:	str	r8, [sp, #16]
   14e6c:	sub	sp, sp, #8
   14e70:	ldr	r5, [sp, #32]
   14e74:	cmp	lr, ip
   14e78:	beq	14ea0 <__assert_fail@plt+0x40ac>
   14e7c:	mov	r0, r4
   14e80:	str	r5, [sp, #32]
   14e84:	add	sp, sp, #8
   14e88:	ldrd	r4, [sp]
   14e8c:	ldrd	r6, [sp, #8]
   14e90:	ldr	r8, [sp, #16]
   14e94:	ldr	lr, [sp, #20]
   14e98:	add	sp, sp, #24
   14e9c:	b	10da0 <fseeko64@plt>
   14ea0:	ldr	ip, [r0, #16]
   14ea4:	ldr	lr, [r0, #20]
   14ea8:	cmp	lr, ip
   14eac:	bne	14e7c <__assert_fail@plt+0x4088>
   14eb0:	ldr	r8, [r0, #36]	; 0x24
   14eb4:	cmp	r8, #0
   14eb8:	bne	14e7c <__assert_fail@plt+0x4088>
   14ebc:	mov	r6, r2
   14ec0:	mov	r7, r3
   14ec4:	bl	10d7c <fileno@plt>
   14ec8:	mov	r2, r6
   14ecc:	mov	r3, r7
   14ed0:	str	r5, [sp]
   14ed4:	bl	10c98 <lseek64@plt>
   14ed8:	mvn	r3, #0
   14edc:	mvn	r2, #0
   14ee0:	cmp	r1, r3
   14ee4:	cmpeq	r0, r2
   14ee8:	beq	14f18 <__assert_fail@plt+0x4124>
   14eec:	ldr	r3, [r4]
   14ef0:	strd	r0, [r4, #80]	; 0x50
   14ef4:	bic	r3, r3, #16
   14ef8:	str	r3, [r4]
   14efc:	mov	r0, r8
   14f00:	add	sp, sp, #8
   14f04:	ldrd	r4, [sp]
   14f08:	ldrd	r6, [sp, #8]
   14f0c:	ldr	r8, [sp, #16]
   14f10:	add	sp, sp, #20
   14f14:	pop	{pc}		; (ldr pc, [sp], #4)
   14f18:	mvn	r8, #0
   14f1c:	b	14efc <__assert_fail@plt+0x4108>
   14f20:	mov	r0, #14
   14f24:	str	r4, [sp, #-8]!
   14f28:	str	lr, [sp, #4]
   14f2c:	bl	10dc4 <nl_langinfo@plt>
   14f30:	cmp	r0, #0
   14f34:	beq	14f58 <__assert_fail@plt+0x4164>
   14f38:	ldrb	r2, [r0]
   14f3c:	movw	r3, #23504	; 0x5bd0
   14f40:	movt	r3, #1
   14f44:	ldr	r4, [sp]
   14f48:	add	sp, sp, #4
   14f4c:	cmp	r2, #0
   14f50:	moveq	r0, r3
   14f54:	pop	{pc}		; (ldr pc, [sp], #4)
   14f58:	ldr	r4, [sp]
   14f5c:	add	sp, sp, #4
   14f60:	movw	r0, #23504	; 0x5bd0
   14f64:	movt	r0, #1
   14f68:	pop	{pc}		; (ldr pc, [sp], #4)
   14f6c:	strd	r4, [sp, #-20]!	; 0xffffffec
   14f70:	mov	r5, r2
   14f74:	strd	r6, [sp, #8]
   14f78:	subs	r6, r0, #0
   14f7c:	mov	r7, r1
   14f80:	str	lr, [sp, #16]
   14f84:	sub	sp, sp, #12
   14f88:	addeq	r6, sp, #4
   14f8c:	mov	r0, r6
   14f90:	bl	10cbc <mbrtowc@plt>
   14f94:	cmp	r5, #0
   14f98:	cmnne	r0, #3
   14f9c:	mov	r4, r0
   14fa0:	bhi	14fbc <__assert_fail@plt+0x41c8>
   14fa4:	mov	r0, r4
   14fa8:	add	sp, sp, #12
   14fac:	ldrd	r4, [sp]
   14fb0:	ldrd	r6, [sp, #8]
   14fb4:	add	sp, sp, #16
   14fb8:	pop	{pc}		; (ldr pc, [sp], #4)
   14fbc:	mov	r0, #0
   14fc0:	bl	15014 <__assert_fail@plt+0x4220>
   14fc4:	cmp	r0, #0
   14fc8:	bne	14fa4 <__assert_fail@plt+0x41b0>
   14fcc:	ldrb	r3, [r7]
   14fd0:	mov	r4, #1
   14fd4:	str	r3, [r6]
   14fd8:	b	14fa4 <__assert_fail@plt+0x41b0>
   14fdc:	umull	r2, r3, r1, r2
   14fe0:	cmp	r3, #0
   14fe4:	bne	14ff0 <__assert_fail@plt+0x41fc>
   14fe8:	mov	r1, r2
   14fec:	b	14bfc <__assert_fail@plt+0x3e08>
   14ff0:	str	r4, [sp, #-8]!
   14ff4:	str	lr, [sp, #4]
   14ff8:	bl	10d4c <__errno_location@plt>
   14ffc:	mov	r3, #12
   15000:	ldr	r4, [sp]
   15004:	add	sp, sp, #4
   15008:	str	r3, [r0]
   1500c:	mov	r0, #0
   15010:	pop	{pc}		; (ldr pc, [sp], #4)
   15014:	push	{lr}		; (str lr, [sp, #-4]!)
   15018:	sub	sp, sp, #268	; 0x10c
   1501c:	movw	r2, #257	; 0x101
   15020:	add	r1, sp, #4
   15024:	bl	1506c <__assert_fail@plt+0x4278>
   15028:	cmp	r0, #0
   1502c:	movne	r0, #0
   15030:	bne	15064 <__assert_fail@plt+0x4270>
   15034:	movw	r1, #23512	; 0x5bd8
   15038:	movt	r1, #1
   1503c:	add	r0, sp, #4
   15040:	bl	10bd8 <strcmp@plt>
   15044:	cmp	r0, #0
   15048:	beq	15064 <__assert_fail@plt+0x4270>
   1504c:	add	r0, sp, #4
   15050:	movw	r1, #23516	; 0x5bdc
   15054:	movt	r1, #1
   15058:	bl	10bd8 <strcmp@plt>
   1505c:	adds	r0, r0, #0
   15060:	movne	r0, #1
   15064:	add	sp, sp, #268	; 0x10c
   15068:	pop	{pc}		; (ldr pc, [sp], #4)
   1506c:	strd	r4, [sp, #-16]!
   15070:	mov	r5, r1
   15074:	mov	r1, #0
   15078:	mov	r4, r2
   1507c:	str	r6, [sp, #8]
   15080:	str	lr, [sp, #12]
   15084:	bl	10dac <setlocale@plt>
   15088:	subs	r6, r0, #0
   1508c:	beq	1510c <__assert_fail@plt+0x4318>
   15090:	bl	10d34 <strlen@plt>
   15094:	cmp	r4, r0
   15098:	bhi	150b8 <__assert_fail@plt+0x42c4>
   1509c:	cmp	r4, #0
   150a0:	moveq	r0, #34	; 0x22
   150a4:	bne	150dc <__assert_fail@plt+0x42e8>
   150a8:	ldrd	r4, [sp]
   150ac:	ldr	r6, [sp, #8]
   150b0:	add	sp, sp, #12
   150b4:	pop	{pc}		; (ldr pc, [sp], #4)
   150b8:	add	r2, r0, #1
   150bc:	mov	r1, r6
   150c0:	mov	r0, r5
   150c4:	bl	10c14 <memcpy@plt>
   150c8:	ldrd	r4, [sp]
   150cc:	mov	r0, #0
   150d0:	ldr	r6, [sp, #8]
   150d4:	add	sp, sp, #12
   150d8:	pop	{pc}		; (ldr pc, [sp], #4)
   150dc:	sub	r4, r4, #1
   150e0:	mov	r1, r6
   150e4:	mov	r2, r4
   150e8:	mov	r0, r5
   150ec:	bl	10c14 <memcpy@plt>
   150f0:	mov	r3, #0
   150f4:	mov	r0, #34	; 0x22
   150f8:	strb	r3, [r5, r4]
   150fc:	ldrd	r4, [sp]
   15100:	ldr	r6, [sp, #8]
   15104:	add	sp, sp, #12
   15108:	pop	{pc}		; (ldr pc, [sp], #4)
   1510c:	cmp	r4, #0
   15110:	mov	r0, #22
   15114:	strbne	r6, [r5]
   15118:	ldrd	r4, [sp]
   1511c:	ldr	r6, [sp, #8]
   15120:	add	sp, sp, #12
   15124:	pop	{pc}		; (ldr pc, [sp], #4)
   15128:	mov	r1, #0
   1512c:	b	10dac <setlocale@plt>
   15130:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   15134:	mov	r7, r0
   15138:	ldr	r6, [pc, #72]	; 15188 <__assert_fail@plt+0x4394>
   1513c:	ldr	r5, [pc, #72]	; 1518c <__assert_fail@plt+0x4398>
   15140:	add	r6, pc, r6
   15144:	add	r5, pc, r5
   15148:	sub	r6, r6, r5
   1514c:	mov	r8, r1
   15150:	mov	r9, r2
   15154:	bl	10ba0 <calloc@plt-0x20>
   15158:	asrs	r6, r6, #2
   1515c:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   15160:	mov	r4, #0
   15164:	add	r4, r4, #1
   15168:	ldr	r3, [r5], #4
   1516c:	mov	r2, r9
   15170:	mov	r1, r8
   15174:	mov	r0, r7
   15178:	blx	r3
   1517c:	cmp	r6, r4
   15180:	bne	15164 <__assert_fail@plt+0x4370>
   15184:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   15188:	andeq	r0, r1, ip, asr #27
   1518c:	andeq	r0, r1, r4, asr #27
   15190:	bx	lr
   15194:	ldr	r3, [pc, #12]	; 151a8 <__assert_fail@plt+0x43b4>
   15198:	mov	r1, #0
   1519c:	add	r3, pc, r3
   151a0:	ldr	r2, [r3]
   151a4:	b	10d58 <__cxa_atexit@plt>
   151a8:	andeq	r0, r1, r0, lsr pc

Disassembly of section .fini:

000151ac <.fini>:
   151ac:	push	{r3, lr}
   151b0:	pop	{r3, pc}
