
../repos/coreutils/src/factor:     file format elf32-littlearm


Disassembly of section .init:

00011644 <.init>:
   11644:	push	{r3, lr}
   11648:	bl	11ac0 <__assert_fail@plt+0x48>
   1164c:	pop	{r3, pc}

Disassembly of section .plt:

00011650 <calloc@plt-0x14>:
   11650:	push	{lr}		; (str lr, [sp, #-4]!)
   11654:	ldr	lr, [pc, #4]	; 11660 <calloc@plt-0x4>
   11658:	add	lr, pc, lr
   1165c:	ldr	pc, [lr, #8]!
   11660:	andeq	pc, r1, r0, lsr #19

00011664 <calloc@plt>:
   11664:	add	ip, pc, #0, 12
   11668:	add	ip, ip, #126976	; 0x1f000
   1166c:	ldr	pc, [ip, #2464]!	; 0x9a0

00011670 <fputs_unlocked@plt>:
   11670:	add	ip, pc, #0, 12
   11674:	add	ip, ip, #126976	; 0x1f000
   11678:	ldr	pc, [ip, #2456]!	; 0x998

0001167c <raise@plt>:
   1167c:	add	ip, pc, #0, 12
   11680:	add	ip, ip, #126976	; 0x1f000
   11684:	ldr	pc, [ip, #2448]!	; 0x990

00011688 <__gmpz_scan1@plt>:
   11688:	add	ip, pc, #0, 12
   1168c:	add	ip, ip, #126976	; 0x1f000
   11690:	ldr	pc, [ip, #2440]!	; 0x988

00011694 <iconv_close@plt>:
   11694:	add	ip, pc, #0, 12
   11698:	add	ip, ip, #126976	; 0x1f000
   1169c:	ldr	pc, [ip, #2432]!	; 0x980

000116a0 <iconv@plt>:
   116a0:	add	ip, pc, #0, 12
   116a4:	add	ip, ip, #126976	; 0x1f000
   116a8:	ldr	pc, [ip, #2424]!	; 0x978

000116ac <strcmp@plt>:
   116ac:	add	ip, pc, #0, 12
   116b0:	add	ip, ip, #126976	; 0x1f000
   116b4:	ldr	pc, [ip, #2416]!	; 0x970

000116b8 <fflush@plt>:
   116b8:	add	ip, pc, #0, 12
   116bc:	add	ip, ip, #126976	; 0x1f000
   116c0:	ldr	pc, [ip, #2408]!	; 0x968

000116c4 <__gmpz_sub_ui@plt>:
   116c4:	add	ip, pc, #0, 12
   116c8:	add	ip, ip, #126976	; 0x1f000
   116cc:	ldr	pc, [ip, #2400]!	; 0x960

000116d0 <__gmpz_clears@plt>:
   116d0:	add	ip, pc, #0, 12
   116d4:	add	ip, ip, #126976	; 0x1f000
   116d8:	ldr	pc, [ip, #2392]!	; 0x958

000116dc <wcwidth@plt>:
   116dc:	add	ip, pc, #0, 12
   116e0:	add	ip, ip, #126976	; 0x1f000
   116e4:	ldr	pc, [ip, #2384]!	; 0x950

000116e8 <memmove@plt>:
   116e8:	add	ip, pc, #0, 12
   116ec:	add	ip, ip, #126976	; 0x1f000
   116f0:	ldr	pc, [ip, #2376]!	; 0x948

000116f4 <__gmpz_set_ui@plt>:
   116f4:	add	ip, pc, #0, 12
   116f8:	add	ip, ip, #126976	; 0x1f000
   116fc:	ldr	pc, [ip, #2368]!	; 0x940

00011700 <free@plt>:
   11700:	add	ip, pc, #0, 12
   11704:	add	ip, ip, #126976	; 0x1f000
   11708:	ldr	pc, [ip, #2360]!	; 0x938

0001170c <_exit@plt>:
   1170c:	add	ip, pc, #0, 12
   11710:	add	ip, ip, #126976	; 0x1f000
   11714:	ldr	pc, [ip, #2352]!	; 0x930

00011718 <memcpy@plt>:
   11718:	add	ip, pc, #0, 12
   1171c:	add	ip, ip, #126976	; 0x1f000
   11720:	ldr	pc, [ip, #2344]!	; 0x928

00011724 <__gmpz_sub@plt>:
   11724:	add	ip, pc, #0, 12
   11728:	add	ip, ip, #126976	; 0x1f000
   1172c:	ldr	pc, [ip, #2336]!	; 0x920

00011730 <mbsinit@plt>:
   11730:	add	ip, pc, #0, 12
   11734:	add	ip, ip, #126976	; 0x1f000
   11738:	ldr	pc, [ip, #2328]!	; 0x918

0001173c <getc_unlocked@plt>:
   1173c:	add	ip, pc, #0, 12
   11740:	add	ip, ip, #126976	; 0x1f000
   11744:	ldr	pc, [ip, #2320]!	; 0x910

00011748 <dcgettext@plt>:
   11748:	add	ip, pc, #0, 12
   1174c:	add	ip, ip, #126976	; 0x1f000
   11750:	ldr	pc, [ip, #2312]!	; 0x908

00011754 <__gmpz_powm@plt>:
   11754:	add	ip, pc, #0, 12
   11758:	add	ip, ip, #126976	; 0x1f000
   1175c:	ldr	pc, [ip, #2304]!	; 0x900

00011760 <strdup@plt>:
   11760:	add	ip, pc, #0, 12
   11764:	add	ip, ip, #126976	; 0x1f000
   11768:	ldr	pc, [ip, #2296]!	; 0x8f8

0001176c <__gmpz_divexact@plt>:
   1176c:	add	ip, pc, #0, 12
   11770:	add	ip, ip, #126976	; 0x1f000
   11774:	ldr	pc, [ip, #2288]!	; 0x8f0

00011778 <__gmpz_inits@plt>:
   11778:	add	ip, pc, #0, 12
   1177c:	add	ip, ip, #126976	; 0x1f000
   11780:	ldr	pc, [ip, #2280]!	; 0x8e8

00011784 <__gmpz_set@plt>:
   11784:	add	ip, pc, #0, 12
   11788:	add	ip, ip, #126976	; 0x1f000
   1178c:	ldr	pc, [ip, #2272]!	; 0x8e0

00011790 <realloc@plt>:
   11790:	add	ip, pc, #0, 12
   11794:	add	ip, ip, #126976	; 0x1f000
   11798:	ldr	pc, [ip, #2264]!	; 0x8d8

0001179c <__gmpz_mul@plt>:
   1179c:	add	ip, pc, #0, 12
   117a0:	add	ip, ip, #126976	; 0x1f000
   117a4:	ldr	pc, [ip, #2256]!	; 0x8d0

000117a8 <__gmpz_tdiv_q_ui@plt>:
   117a8:	add	ip, pc, #0, 12
   117ac:	add	ip, ip, #126976	; 0x1f000
   117b0:	ldr	pc, [ip, #2248]!	; 0x8c8

000117b4 <textdomain@plt>:
   117b4:	add	ip, pc, #0, 12
   117b8:	add	ip, ip, #126976	; 0x1f000
   117bc:	ldr	pc, [ip, #2240]!	; 0x8c0

000117c0 <iswcntrl@plt>:
   117c0:	add	ip, pc, #0, 12
   117c4:	add	ip, ip, #126976	; 0x1f000
   117c8:	ldr	pc, [ip, #2232]!	; 0x8b8

000117cc <__gmpz_out_str@plt>:
   117cc:	add	ip, pc, #0, 12
   117d0:	add	ip, ip, #126976	; 0x1f000
   117d4:	ldr	pc, [ip, #2224]!	; 0x8b0

000117d8 <fflush_unlocked@plt>:
   117d8:	add	ip, pc, #0, 12
   117dc:	add	ip, ip, #126976	; 0x1f000
   117e0:	ldr	pc, [ip, #2216]!	; 0x8a8

000117e4 <iswprint@plt>:
   117e4:	add	ip, pc, #0, 12
   117e8:	add	ip, ip, #126976	; 0x1f000
   117ec:	ldr	pc, [ip, #2208]!	; 0x8a0

000117f0 <fwrite@plt>:
   117f0:	add	ip, pc, #0, 12
   117f4:	add	ip, ip, #126976	; 0x1f000
   117f8:	ldr	pc, [ip, #2200]!	; 0x898

000117fc <lseek64@plt>:
   117fc:	add	ip, pc, #0, 12
   11800:	add	ip, ip, #126976	; 0x1f000
   11804:	ldr	pc, [ip, #2192]!	; 0x890

00011808 <__gmpz_fdiv_q_2exp@plt>:
   11808:	add	ip, pc, #0, 12
   1180c:	add	ip, ip, #126976	; 0x1f000
   11810:	ldr	pc, [ip, #2184]!	; 0x888

00011814 <__ctype_get_mb_cur_max@plt>:
   11814:	add	ip, pc, #0, 12
   11818:	add	ip, ip, #126976	; 0x1f000
   1181c:	ldr	pc, [ip, #2176]!	; 0x880

00011820 <__fpending@plt>:
   11820:	add	ip, pc, #0, 12
   11824:	add	ip, ip, #126976	; 0x1f000
   11828:	ldr	pc, [ip, #2168]!	; 0x878

0001182c <ferror_unlocked@plt>:
   1182c:	add	ip, pc, #0, 12
   11830:	add	ip, ip, #126976	; 0x1f000
   11834:	ldr	pc, [ip, #2160]!	; 0x870

00011838 <mbrtowc@plt>:
   11838:	add	ip, pc, #0, 12
   1183c:	add	ip, ip, #126976	; 0x1f000
   11840:	ldr	pc, [ip, #2152]!	; 0x868

00011844 <error@plt>:
   11844:	add	ip, pc, #0, 12
   11848:	add	ip, ip, #126976	; 0x1f000
   1184c:	ldr	pc, [ip, #2144]!	; 0x860

00011850 <malloc@plt>:
   11850:	add	ip, pc, #0, 12
   11854:	add	ip, ip, #126976	; 0x1f000
   11858:	ldr	pc, [ip, #2136]!	; 0x858

0001185c <iconv_open@plt>:
   1185c:	add	ip, pc, #0, 12
   11860:	add	ip, ip, #126976	; 0x1f000
   11864:	ldr	pc, [ip, #2128]!	; 0x850

00011868 <__libc_start_main@plt>:
   11868:	add	ip, pc, #0, 12
   1186c:	add	ip, ip, #126976	; 0x1f000
   11870:	ldr	pc, [ip, #2120]!	; 0x848

00011874 <__freading@plt>:
   11874:	add	ip, pc, #0, 12
   11878:	add	ip, ip, #126976	; 0x1f000
   1187c:	ldr	pc, [ip, #2112]!	; 0x840

00011880 <__gmpz_init_set_si@plt>:
   11880:	add	ip, pc, #0, 12
   11884:	add	ip, ip, #126976	; 0x1f000
   11888:	ldr	pc, [ip, #2104]!	; 0x838

0001188c <__gmpz_add_ui@plt>:
   1188c:	add	ip, pc, #0, 12
   11890:	add	ip, ip, #126976	; 0x1f000
   11894:	ldr	pc, [ip, #2096]!	; 0x830

00011898 <__gmon_start__@plt>:
   11898:	add	ip, pc, #0, 12
   1189c:	add	ip, ip, #126976	; 0x1f000
   118a0:	ldr	pc, [ip, #2088]!	; 0x828

000118a4 <getopt_long@plt>:
   118a4:	add	ip, pc, #0, 12
   118a8:	add	ip, ip, #126976	; 0x1f000
   118ac:	ldr	pc, [ip, #2080]!	; 0x820

000118b0 <__ctype_b_loc@plt>:
   118b0:	add	ip, pc, #0, 12
   118b4:	add	ip, ip, #126976	; 0x1f000
   118b8:	ldr	pc, [ip, #2072]!	; 0x818

000118bc <exit@plt>:
   118bc:	add	ip, pc, #0, 12
   118c0:	add	ip, ip, #126976	; 0x1f000
   118c4:	ldr	pc, [ip, #2064]!	; 0x810

000118c8 <iswspace@plt>:
   118c8:	add	ip, pc, #0, 12
   118cc:	add	ip, ip, #126976	; 0x1f000
   118d0:	ldr	pc, [ip, #2056]!	; 0x808

000118d4 <bcmp@plt>:
   118d4:	add	ip, pc, #0, 12
   118d8:	add	ip, ip, #126976	; 0x1f000
   118dc:	ldr	pc, [ip, #2048]!	; 0x800

000118e0 <strlen@plt>:
   118e0:	add	ip, pc, #0, 12
   118e4:	add	ip, ip, #126976	; 0x1f000
   118e8:	ldr	pc, [ip, #2040]!	; 0x7f8

000118ec <strchr@plt>:
   118ec:	add	ip, pc, #0, 12
   118f0:	add	ip, ip, #126976	; 0x1f000
   118f4:	ldr	pc, [ip, #2032]!	; 0x7f0

000118f8 <__gmpz_divisible_ui_p@plt>:
   118f8:	add	ip, pc, #0, 12
   118fc:	add	ip, ip, #126976	; 0x1f000
   11900:	ldr	pc, [ip, #2024]!	; 0x7e8

00011904 <__gmpz_clear@plt>:
   11904:	add	ip, pc, #0, 12
   11908:	add	ip, ip, #126976	; 0x1f000
   1190c:	ldr	pc, [ip, #2016]!	; 0x7e0

00011910 <__errno_location@plt>:
   11910:	add	ip, pc, #0, 12
   11914:	add	ip, ip, #126976	; 0x1f000
   11918:	ldr	pc, [ip, #2008]!	; 0x7d8

0001191c <iswalnum@plt>:
   1191c:	add	ip, pc, #0, 12
   11920:	add	ip, ip, #126976	; 0x1f000
   11924:	ldr	pc, [ip, #2000]!	; 0x7d0

00011928 <__sprintf_chk@plt>:
   11928:	add	ip, pc, #0, 12
   1192c:	add	ip, ip, #126976	; 0x1f000
   11930:	ldr	pc, [ip, #1992]!	; 0x7c8

00011934 <__cxa_atexit@plt>:
   11934:	add	ip, pc, #0, 12
   11938:	add	ip, ip, #126976	; 0x1f000
   1193c:	ldr	pc, [ip, #1984]!	; 0x7c0

00011940 <memset@plt>:
   11940:	add	ip, pc, #0, 12
   11944:	add	ip, ip, #126976	; 0x1f000
   11948:	ldr	pc, [ip, #1976]!	; 0x7b8

0001194c <__gmpz_tdiv_q_2exp@plt>:
   1194c:	add	ip, pc, #0, 12
   11950:	add	ip, ip, #126976	; 0x1f000
   11954:	ldr	pc, [ip, #1968]!	; 0x7b0

00011958 <__printf_chk@plt>:
   11958:	add	ip, pc, #0, 12
   1195c:	add	ip, ip, #126976	; 0x1f000
   11960:	ldr	pc, [ip, #1960]!	; 0x7a8

00011964 <write@plt>:
   11964:	add	ip, pc, #0, 12
   11968:	add	ip, ip, #126976	; 0x1f000
   1196c:	ldr	pc, [ip, #1952]!	; 0x7a0

00011970 <fileno@plt>:
   11970:	add	ip, pc, #0, 12
   11974:	add	ip, ip, #126976	; 0x1f000
   11978:	ldr	pc, [ip, #1944]!	; 0x798

0001197c <__fprintf_chk@plt>:
   1197c:	add	ip, pc, #0, 12
   11980:	add	ip, ip, #126976	; 0x1f000
   11984:	ldr	pc, [ip, #1936]!	; 0x790

00011988 <memchr@plt>:
   11988:	add	ip, pc, #0, 12
   1198c:	add	ip, ip, #126976	; 0x1f000
   11990:	ldr	pc, [ip, #1928]!	; 0x788

00011994 <fclose@plt>:
   11994:	add	ip, pc, #0, 12
   11998:	add	ip, ip, #126976	; 0x1f000
   1199c:	ldr	pc, [ip, #1920]!	; 0x780

000119a0 <strnlen@plt>:
   119a0:	add	ip, pc, #0, 12
   119a4:	add	ip, ip, #126976	; 0x1f000
   119a8:	ldr	pc, [ip, #1912]!	; 0x778

000119ac <fseeko64@plt>:
   119ac:	add	ip, pc, #0, 12
   119b0:	add	ip, ip, #126976	; 0x1f000
   119b4:	ldr	pc, [ip, #1904]!	; 0x770

000119b8 <__gmpz_mod@plt>:
   119b8:	add	ip, pc, #0, 12
   119bc:	add	ip, ip, #126976	; 0x1f000
   119c0:	ldr	pc, [ip, #1896]!	; 0x768

000119c4 <__gmpz_init_set_ui@plt>:
   119c4:	add	ip, pc, #0, 12
   119c8:	add	ip, ip, #126976	; 0x1f000
   119cc:	ldr	pc, [ip, #1888]!	; 0x760

000119d0 <__gmpz_cmp@plt>:
   119d0:	add	ip, pc, #0, 12
   119d4:	add	ip, ip, #126976	; 0x1f000
   119d8:	ldr	pc, [ip, #1880]!	; 0x758

000119dc <setlocale@plt>:
   119dc:	add	ip, pc, #0, 12
   119e0:	add	ip, ip, #126976	; 0x1f000
   119e4:	ldr	pc, [ip, #1872]!	; 0x750

000119e8 <strrchr@plt>:
   119e8:	add	ip, pc, #0, 12
   119ec:	add	ip, ip, #126976	; 0x1f000
   119f0:	ldr	pc, [ip, #1864]!	; 0x748

000119f4 <nl_langinfo@plt>:
   119f4:	add	ip, pc, #0, 12
   119f8:	add	ip, ip, #126976	; 0x1f000
   119fc:	ldr	pc, [ip, #1856]!	; 0x740

00011a00 <__gmpz_gcd@plt>:
   11a00:	add	ip, pc, #0, 12
   11a04:	add	ip, ip, #126976	; 0x1f000
   11a08:	ldr	pc, [ip, #1848]!	; 0x738

00011a0c <__gmpz_init_set_str@plt>:
   11a0c:	add	ip, pc, #0, 12
   11a10:	add	ip, ip, #126976	; 0x1f000
   11a14:	ldr	pc, [ip, #1840]!	; 0x730

00011a18 <bindtextdomain@plt>:
   11a18:	add	ip, pc, #0, 12
   11a1c:	add	ip, ip, #126976	; 0x1f000
   11a20:	ldr	pc, [ip, #1832]!	; 0x728

00011a24 <__gmpz_cmp_ui@plt>:
   11a24:	add	ip, pc, #0, 12
   11a28:	add	ip, ip, #126976	; 0x1f000
   11a2c:	ldr	pc, [ip, #1824]!	; 0x720

00011a30 <__gmpz_init@plt>:
   11a30:	add	ip, pc, #0, 12
   11a34:	add	ip, ip, #126976	; 0x1f000
   11a38:	ldr	pc, [ip, #1816]!	; 0x718

00011a3c <__gmpz_powm_ui@plt>:
   11a3c:	add	ip, pc, #0, 12
   11a40:	add	ip, ip, #126976	; 0x1f000
   11a44:	ldr	pc, [ip, #1808]!	; 0x710

00011a48 <isatty@plt>:
   11a48:	add	ip, pc, #0, 12
   11a4c:	add	ip, ip, #126976	; 0x1f000
   11a50:	ldr	pc, [ip, #1800]!	; 0x708

00011a54 <strncmp@plt>:
   11a54:	add	ip, pc, #0, 12
   11a58:	add	ip, ip, #126976	; 0x1f000
   11a5c:	ldr	pc, [ip, #1792]!	; 0x700

00011a60 <abort@plt>:
   11a60:	add	ip, pc, #0, 12
   11a64:	add	ip, ip, #126976	; 0x1f000
   11a68:	ldr	pc, [ip, #1784]!	; 0x6f8

00011a6c <putchar_unlocked@plt>:
   11a6c:	add	ip, pc, #0, 12
   11a70:	add	ip, ip, #126976	; 0x1f000
   11a74:	ldr	pc, [ip, #1776]!	; 0x6f0

00011a78 <__assert_fail@plt>:
   11a78:	add	ip, pc, #0, 12
   11a7c:	add	ip, ip, #126976	; 0x1f000
   11a80:	ldr	pc, [ip, #1768]!	; 0x6e8

Disassembly of section .text:

00011a84 <.text>:
   11a84:	mov	fp, #0
   11a88:	mov	lr, #0
   11a8c:	pop	{r1}		; (ldr r1, [sp], #4)
   11a90:	mov	r2, sp
   11a94:	push	{r2}		; (str r2, [sp, #-4]!)
   11a98:	push	{r0}		; (str r0, [sp, #-4]!)
   11a9c:	ldr	ip, [pc, #16]	; 11ab4 <__assert_fail@plt+0x3c>
   11aa0:	push	{ip}		; (str ip, [sp, #-4]!)
   11aa4:	ldr	r0, [pc, #12]	; 11ab8 <__assert_fail@plt+0x40>
   11aa8:	ldr	r3, [pc, #12]	; 11abc <__assert_fail@plt+0x44>
   11aac:	bl	11868 <__libc_start_main@plt>
   11ab0:	bl	11a60 <abort@plt>
   11ab4:	andeq	ip, r1, r8, lsl r5
   11ab8:	andeq	r1, r1, ip, ror #27
   11abc:			; <UNDEFINED> instruction: 0x0001c4b8
   11ac0:	ldr	r3, [pc, #20]	; 11adc <__assert_fail@plt+0x64>
   11ac4:	ldr	r2, [pc, #20]	; 11ae0 <__assert_fail@plt+0x68>
   11ac8:	add	r3, pc, r3
   11acc:	ldr	r2, [r3, r2]
   11ad0:	cmp	r2, #0
   11ad4:	bxeq	lr
   11ad8:	b	11898 <__gmon_start__@plt>
   11adc:	andeq	pc, r1, r0, lsr r5	; <UNPREDICTABLE>
   11ae0:	andeq	r0, r0, ip, ror #2
   11ae4:	ldr	r0, [pc, #24]	; 11b04 <__assert_fail@plt+0x8c>
   11ae8:	ldr	r3, [pc, #24]	; 11b08 <__assert_fail@plt+0x90>
   11aec:	cmp	r3, r0
   11af0:	bxeq	lr
   11af4:	ldr	r3, [pc, #16]	; 11b0c <__assert_fail@plt+0x94>
   11af8:	cmp	r3, #0
   11afc:	bxeq	lr
   11b00:	bx	r3
   11b04:	andeq	r1, r3, r8, asr #3
   11b08:	andeq	r1, r3, r8, asr #3
   11b0c:	andeq	r0, r0, r0
   11b10:	ldr	r0, [pc, #36]	; 11b3c <__assert_fail@plt+0xc4>
   11b14:	ldr	r1, [pc, #36]	; 11b40 <__assert_fail@plt+0xc8>
   11b18:	sub	r1, r1, r0
   11b1c:	asr	r1, r1, #2
   11b20:	add	r1, r1, r1, lsr #31
   11b24:	asrs	r1, r1, #1
   11b28:	bxeq	lr
   11b2c:	ldr	r3, [pc, #16]	; 11b44 <__assert_fail@plt+0xcc>
   11b30:	cmp	r3, #0
   11b34:	bxeq	lr
   11b38:	bx	r3
   11b3c:	andeq	r1, r3, r8, asr #3
   11b40:	andeq	r1, r3, r8, asr #3
   11b44:	andeq	r0, r0, r0
   11b48:	push	{r4, lr}
   11b4c:	ldr	r4, [pc, #24]	; 11b6c <__assert_fail@plt+0xf4>
   11b50:	ldrb	r3, [r4]
   11b54:	cmp	r3, #0
   11b58:	popne	{r4, pc}
   11b5c:	bl	11ae4 <__assert_fail@plt+0x6c>
   11b60:	mov	r3, #1
   11b64:	strb	r3, [r4]
   11b68:	pop	{r4, pc}
   11b6c:	andeq	r1, r3, r8, ror #3
   11b70:	b	11b10 <__assert_fail@plt+0x98>
   11b74:	push	{fp, lr}
   11b78:	mov	fp, sp
   11b7c:	mov	r4, r0
   11b80:	cmp	r0, #0
   11b84:	bne	11c20 <__assert_fail@plt+0x1a8>
   11b88:	movw	r1, #50539	; 0xc56b
   11b8c:	movt	r1, #1
   11b90:	mov	r0, #0
   11b94:	mov	r2, #5
   11b98:	bl	11748 <dcgettext@plt>
   11b9c:	mov	r1, r0
   11ba0:	movw	r0, #4608	; 0x1200
   11ba4:	movt	r0, #3
   11ba8:	ldr	r2, [r0]
   11bac:	mov	r0, #1
   11bb0:	mov	r3, r2
   11bb4:	bl	11958 <__printf_chk@plt>
   11bb8:	movw	r1, #50579	; 0xc593
   11bbc:	movt	r1, #1
   11bc0:	mov	r0, #0
   11bc4:	mov	r2, #5
   11bc8:	bl	11748 <dcgettext@plt>
   11bcc:	movw	r5, #4580	; 0x11e4
   11bd0:	movt	r5, #3
   11bd4:	ldr	r1, [r5]
   11bd8:	bl	11670 <fputs_unlocked@plt>
   11bdc:	movw	r1, #50714	; 0xc61a
   11be0:	movt	r1, #1
   11be4:	mov	r0, #0
   11be8:	mov	r2, #5
   11bec:	bl	11748 <dcgettext@plt>
   11bf0:	ldr	r1, [r5]
   11bf4:	bl	11670 <fputs_unlocked@plt>
   11bf8:	movw	r1, #50759	; 0xc647
   11bfc:	movt	r1, #1
   11c00:	mov	r0, #0
   11c04:	mov	r2, #5
   11c08:	bl	11748 <dcgettext@plt>
   11c0c:	ldr	r1, [r5]
   11c10:	bl	11670 <fputs_unlocked@plt>
   11c14:	bl	11c64 <__assert_fail@plt+0x1ec>
   11c18:	mov	r0, r4
   11c1c:	bl	118bc <exit@plt>
   11c20:	movw	r0, #4568	; 0x11d8
   11c24:	movt	r0, #3
   11c28:	ldr	r5, [r0]
   11c2c:	movw	r1, #50500	; 0xc544
   11c30:	movt	r1, #1
   11c34:	mov	r0, #0
   11c38:	mov	r2, #5
   11c3c:	bl	11748 <dcgettext@plt>
   11c40:	mov	r2, r0
   11c44:	movw	r0, #4608	; 0x1200
   11c48:	movt	r0, #3
   11c4c:	ldr	r3, [r0]
   11c50:	mov	r0, r5
   11c54:	mov	r1, #1
   11c58:	bl	1197c <__fprintf_chk@plt>
   11c5c:	mov	r0, r4
   11c60:	bl	118bc <exit@plt>
   11c64:	push	{r4, r5, r6, sl, fp, lr}
   11c68:	add	fp, sp, #16
   11c6c:	sub	sp, sp, #56	; 0x38
   11c70:	movw	r0, #52208	; 0xcbf0
   11c74:	movt	r0, #1
   11c78:	add	r1, r0, #32
   11c7c:	mov	r2, #48	; 0x30
   11c80:	vld1.64	{d16-d17}, [r1]
   11c84:	mov	r6, sp
   11c88:	add	r1, r6, #32
   11c8c:	add	r3, r0, #16
   11c90:	vld1.64	{d18-d19}, [r0], r2
   11c94:	vld1.64	{d20-d21}, [r3]
   11c98:	vldr	d22, [r0]
   11c9c:	vst1.64	{d16-d17}, [r1]
   11ca0:	add	r0, r6, #16
   11ca4:	vst1.64	{d20-d21}, [r0]
   11ca8:	mov	r0, r6
   11cac:	vst1.64	{d18-d19}, [r0], r2
   11cb0:	vstr	d22, [r0]
   11cb4:	ldr	r1, [sp]
   11cb8:	cmp	r1, #0
   11cbc:	movw	r4, #50813	; 0xc67d
   11cc0:	movt	r4, #1
   11cc4:	beq	11cec <__assert_fail@plt+0x274>
   11cc8:	mov	r6, sp
   11ccc:	movw	r5, #50813	; 0xc67d
   11cd0:	movt	r5, #1
   11cd4:	mov	r0, r5
   11cd8:	bl	116ac <strcmp@plt>
   11cdc:	cmp	r0, #0
   11ce0:	ldrne	r1, [r6, #8]!
   11ce4:	cmpne	r1, #0
   11ce8:	bne	11cd4 <__assert_fail@plt+0x25c>
   11cec:	ldr	r5, [r6, #4]
   11cf0:	movw	r1, #51028	; 0xc754
   11cf4:	movt	r1, #1
   11cf8:	mov	r0, #0
   11cfc:	mov	r2, #5
   11d00:	bl	11748 <dcgettext@plt>
   11d04:	mov	r1, r0
   11d08:	movw	r2, #50844	; 0xc69c
   11d0c:	movt	r2, #1
   11d10:	movw	r3, #51051	; 0xc76b
   11d14:	movt	r3, #1
   11d18:	mov	r0, #1
   11d1c:	bl	11958 <__printf_chk@plt>
   11d20:	cmp	r5, #0
   11d24:	moveq	r5, r4
   11d28:	mov	r0, #5
   11d2c:	mov	r1, #0
   11d30:	bl	119dc <setlocale@plt>
   11d34:	cmp	r0, #0
   11d38:	beq	11d78 <__assert_fail@plt+0x300>
   11d3c:	movw	r1, #51091	; 0xc793
   11d40:	movt	r1, #1
   11d44:	mov	r2, #3
   11d48:	bl	11a54 <strncmp@plt>
   11d4c:	cmp	r0, #0
   11d50:	beq	11d78 <__assert_fail@plt+0x300>
   11d54:	movw	r1, #51095	; 0xc797
   11d58:	movt	r1, #1
   11d5c:	mov	r0, #0
   11d60:	mov	r2, #5
   11d64:	bl	11748 <dcgettext@plt>
   11d68:	movw	r1, #4580	; 0x11e4
   11d6c:	movt	r1, #3
   11d70:	ldr	r1, [r1]
   11d74:	bl	11670 <fputs_unlocked@plt>
   11d78:	movw	r1, #51166	; 0xc7de
   11d7c:	movt	r1, #1
   11d80:	mov	r0, #0
   11d84:	mov	r2, #5
   11d88:	bl	11748 <dcgettext@plt>
   11d8c:	mov	r1, r0
   11d90:	movw	r2, #51051	; 0xc76b
   11d94:	movt	r2, #1
   11d98:	mov	r0, #1
   11d9c:	mov	r3, r4
   11da0:	bl	11958 <__printf_chk@plt>
   11da4:	movw	r0, #50961	; 0xc711
   11da8:	movt	r0, #1
   11dac:	movw	r6, #50713	; 0xc619
   11db0:	movt	r6, #1
   11db4:	cmp	r5, r4
   11db8:	moveq	r6, r0
   11dbc:	movw	r1, #51193	; 0xc7f9
   11dc0:	movt	r1, #1
   11dc4:	mov	r0, #0
   11dc8:	mov	r2, #5
   11dcc:	bl	11748 <dcgettext@plt>
   11dd0:	mov	r1, r0
   11dd4:	mov	r0, #1
   11dd8:	mov	r2, r5
   11ddc:	mov	r3, r6
   11de0:	sub	sp, fp, #16
   11de4:	pop	{r4, r5, r6, sl, fp, lr}
   11de8:	b	11958 <__printf_chk@plt>
   11dec:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11df0:	add	fp, sp, #28
   11df4:	sub	sp, sp, #20
   11df8:	mov	r5, r1
   11dfc:	mov	r4, r0
   11e00:	ldr	r0, [r1]
   11e04:	bl	173e8 <__assert_fail@plt+0x5970>
   11e08:	movw	r8, #50713	; 0xc619
   11e0c:	movt	r8, #1
   11e10:	mov	r0, #6
   11e14:	mov	r1, r8
   11e18:	bl	119dc <setlocale@plt>
   11e1c:	movw	r7, #50848	; 0xc6a0
   11e20:	movt	r7, #1
   11e24:	movw	r1, #50820	; 0xc684
   11e28:	movt	r1, #1
   11e2c:	mov	r0, r7
   11e30:	bl	11a18 <bindtextdomain@plt>
   11e34:	mov	r0, r7
   11e38:	bl	117b4 <textdomain@plt>
   11e3c:	bl	11f94 <__assert_fail@plt+0x51c>
   11e40:	movw	r0, #29188	; 0x7204
   11e44:	movt	r0, #1
   11e48:	bl	1c51c <__assert_fail@plt+0xaaa4>
   11e4c:	movw	r0, #8140	; 0x1fcc
   11e50:	movt	r0, #1
   11e54:	bl	1c51c <__assert_fail@plt+0xaaa4>
   11e58:	mov	r6, #0
   11e5c:	movw	r7, #52144	; 0xcbb0
   11e60:	movt	r7, #1
   11e64:	movw	r9, #4588	; 0x11ec
   11e68:	movt	r9, #3
   11e6c:	mov	sl, #1
   11e70:	str	r6, [sp]
   11e74:	mov	r0, r4
   11e78:	mov	r1, r5
   11e7c:	mov	r2, r8
   11e80:	mov	r3, r7
   11e84:	bl	118a4 <getopt_long@plt>
   11e88:	cmp	r0, #255	; 0xff
   11e8c:	ble	11ea0 <__assert_fail@plt+0x428>
   11e90:	cmp	r0, #256	; 0x100
   11e94:	bne	11f8c <__assert_fail@plt+0x514>
   11e98:	strb	sl, [r9]
   11e9c:	b	11e70 <__assert_fail@plt+0x3f8>
   11ea0:	cmn	r0, #1
   11ea4:	bne	11ef4 <__assert_fail@plt+0x47c>
   11ea8:	movw	r0, #4560	; 0x11d0
   11eac:	movt	r0, #3
   11eb0:	ldr	r0, [r0]
   11eb4:	cmp	r0, r4
   11eb8:	bge	11ee0 <__assert_fail@plt+0x468>
   11ebc:	add	r5, r5, r0, lsl #2
   11ec0:	sub	r6, r4, r0
   11ec4:	mov	r4, #1
   11ec8:	ldr	r0, [r5], #4
   11ecc:	bl	120d8 <__assert_fail@plt+0x660>
   11ed0:	and	r4, r4, r0
   11ed4:	subs	r6, r6, #1
   11ed8:	bne	11ec8 <__assert_fail@plt+0x450>
   11edc:	b	11ee8 <__assert_fail@plt+0x470>
   11ee0:	bl	12040 <__assert_fail@plt+0x5c8>
   11ee4:	mov	r4, r0
   11ee8:	eor	r0, r4, #1
   11eec:	sub	sp, fp, #28
   11ef0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11ef4:	cmn	r0, #3
   11ef8:	bne	11f7c <__assert_fail@plt+0x504>
   11efc:	movw	r0, #4476	; 0x117c
   11f00:	movt	r0, #3
   11f04:	ldr	r4, [r0]
   11f08:	movw	r0, #4580	; 0x11e4
   11f0c:	movt	r0, #3
   11f10:	ldr	r5, [r0]
   11f14:	movw	r0, #50869	; 0xc6b5
   11f18:	movt	r0, #1
   11f1c:	movw	r1, #50887	; 0xc6c7
   11f20:	movt	r1, #1
   11f24:	bl	17810 <__assert_fail@plt+0x5d98>
   11f28:	mov	r6, r0
   11f2c:	movw	r0, #50906	; 0xc6da
   11f30:	movt	r0, #1
   11f34:	movw	r1, #50919	; 0xc6e7
   11f38:	movt	r1, #1
   11f3c:	bl	17810 <__assert_fail@plt+0x5d98>
   11f40:	mov	r1, #0
   11f44:	movw	r2, #50858	; 0xc6aa
   11f48:	movt	r2, #1
   11f4c:	stm	sp, {r2, r6}
   11f50:	str	r0, [sp, #8]
   11f54:	str	r1, [sp, #12]
   11f58:	movw	r1, #50813	; 0xc67d
   11f5c:	movt	r1, #1
   11f60:	movw	r2, #50844	; 0xc69c
   11f64:	movt	r2, #1
   11f68:	mov	r0, r5
   11f6c:	mov	r3, r4
   11f70:	bl	19f6c <__assert_fail@plt+0x84f4>
   11f74:	mov	r0, #0
   11f78:	bl	118bc <exit@plt>
   11f7c:	cmn	r0, #2
   11f80:	bne	11f8c <__assert_fail@plt+0x514>
   11f84:	mov	r0, #0
   11f88:	bl	11b74 <__assert_fail@plt+0xfc>
   11f8c:	mov	r0, #1
   11f90:	bl	11b74 <__assert_fail@plt+0xfc>
   11f94:	push	{r4, sl, fp, lr}
   11f98:	add	fp, sp, #8
   11f9c:	movw	r4, #4592	; 0x11f0
   11fa0:	movt	r4, #3
   11fa4:	ldr	r0, [r4]
   11fa8:	cmp	r0, #0
   11fac:	popne	{r4, sl, fp, pc}
   11fb0:	mov	r0, #1024	; 0x400
   11fb4:	bl	1a074 <__assert_fail@plt+0x85fc>
   11fb8:	str	r0, [r4]
   11fbc:	movw	r1, #4596	; 0x11f4
   11fc0:	movt	r1, #3
   11fc4:	str	r0, [r1]
   11fc8:	pop	{r4, sl, fp, pc}
   11fcc:	push	{r4, r5, r6, sl, fp, lr}
   11fd0:	add	fp, sp, #16
   11fd4:	movw	r5, #4592	; 0x11f0
   11fd8:	movt	r5, #3
   11fdc:	ldr	r1, [r5]
   11fe0:	movw	r6, #4596	; 0x11f4
   11fe4:	movt	r6, #3
   11fe8:	ldr	r0, [r6]
   11fec:	sub	r4, r0, r1
   11ff0:	mov	r0, #1
   11ff4:	mov	r2, r4
   11ff8:	bl	17314 <__assert_fail@plt+0x589c>
   11ffc:	cmp	r0, r4
   12000:	ldreq	r0, [r5]
   12004:	streq	r0, [r6]
   12008:	popeq	{r4, r5, r6, sl, fp, pc}
   1200c:	bl	11910 <__errno_location@plt>
   12010:	ldr	r4, [r0]
   12014:	movw	r1, #51244	; 0xc82c
   12018:	movt	r1, #1
   1201c:	mov	r0, #0
   12020:	mov	r2, #5
   12024:	bl	11748 <dcgettext@plt>
   12028:	mov	r3, r0
   1202c:	movw	r2, #64561	; 0xfc31
   12030:	movt	r2, #1
   12034:	mov	r0, #1
   12038:	mov	r1, r4
   1203c:	bl	11844 <error@plt>
   12040:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   12044:	add	fp, sp, #24
   12048:	sub	sp, sp, #8
   1204c:	mov	r4, sp
   12050:	mov	r0, r4
   12054:	bl	1959c <__assert_fail@plt+0x7b24>
   12058:	movw	r8, #4576	; 0x11e0
   1205c:	movt	r8, #3
   12060:	ldr	r0, [r8]
   12064:	movw	r1, #51276	; 0xc84c
   12068:	movt	r1, #1
   1206c:	mov	r2, #3
   12070:	mov	r3, r4
   12074:	bl	195ac <__assert_fail@plt+0x7b34>
   12078:	mov	r1, r0
   1207c:	ldr	r0, [sp, #4]
   12080:	mov	r4, #1
   12084:	cmn	r1, #1
   12088:	beq	120c8 <__assert_fail@plt+0x650>
   1208c:	movw	r5, #51276	; 0xc84c
   12090:	movt	r5, #1
   12094:	mov	r6, sp
   12098:	bl	120d8 <__assert_fail@plt+0x660>
   1209c:	mov	r7, r0
   120a0:	ldr	r0, [r8]
   120a4:	mov	r1, r5
   120a8:	mov	r2, #3
   120ac:	mov	r3, r6
   120b0:	bl	195ac <__assert_fail@plt+0x7b34>
   120b4:	mov	r1, r0
   120b8:	and	r4, r4, r7
   120bc:	ldr	r0, [sp, #4]
   120c0:	cmn	r1, #1
   120c4:	bne	12098 <__assert_fail@plt+0x620>
   120c8:	bl	172ec <__assert_fail@plt+0x5874>
   120cc:	mov	r0, r4
   120d0:	sub	sp, fp, #24
   120d4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   120d8:	push	{r4, r5, r6, sl, fp, lr}
   120dc:	add	fp, sp, #16
   120e0:	sub	sp, sp, #40	; 0x28
   120e4:	mov	r5, r0
   120e8:	sub	r4, r0, #1
   120ec:	ldrb	r0, [r4, #1]!
   120f0:	cmp	r0, #32
   120f4:	beq	120ec <__assert_fail@plt+0x674>
   120f8:	cmp	r0, #43	; 0x2b
   120fc:	addeq	r4, r4, #1
   12100:	sub	r0, fp, #24
   12104:	add	r1, sp, #24
   12108:	mov	r2, r4
   1210c:	bl	122c8 <__assert_fail@plt+0x850>
   12110:	cmp	r0, #1
   12114:	beq	1217c <__assert_fail@plt+0x704>
   12118:	cmp	r0, #0
   1211c:	bne	12284 <__assert_fail@plt+0x80c>
   12120:	ldr	r5, [fp, #-20]	; 0xffffffec
   12124:	cmp	r5, #0
   12128:	bmi	1217c <__assert_fail@plt+0x704>
   1212c:	ldr	r4, [fp, #-24]	; 0xffffffe8
   12130:	movw	r0, #4588	; 0x11ec
   12134:	movt	r0, #3
   12138:	ldrb	r0, [r0]
   1213c:	cmp	r0, #1
   12140:	bne	12160 <__assert_fail@plt+0x6e8>
   12144:	movw	r0, #4568	; 0x11d8
   12148:	movt	r0, #3
   1214c:	ldr	r0, [r0]
   12150:	movw	r2, #51280	; 0xc850
   12154:	movt	r2, #1
   12158:	mov	r1, #1
   1215c:	bl	1197c <__fprintf_chk@plt>
   12160:	ldr	r2, [sp, #24]
   12164:	ldr	r3, [sp, #28]
   12168:	mov	r0, r4
   1216c:	mov	r1, r5
   12170:	bl	123dc <__assert_fail@plt+0x964>
   12174:	mov	r4, #1
   12178:	b	122bc <__assert_fail@plt+0x844>
   1217c:	movw	r0, #4588	; 0x11ec
   12180:	movt	r0, #3
   12184:	ldrb	r0, [r0]
   12188:	cmp	r0, #1
   1218c:	bne	121ac <__assert_fail@plt+0x734>
   12190:	movw	r0, #4568	; 0x11d8
   12194:	movt	r0, #3
   12198:	ldr	r0, [r0]
   1219c:	movw	r2, #51352	; 0xc898
   121a0:	movt	r2, #1
   121a4:	mov	r1, #1
   121a8:	bl	1197c <__fprintf_chk@plt>
   121ac:	add	r5, sp, #12
   121b0:	mov	r0, r5
   121b4:	mov	r1, r4
   121b8:	mov	r2, #10
   121bc:	bl	11a0c <__gmpz_init_set_str@plt>
   121c0:	movw	r4, #4580	; 0x11e4
   121c4:	movt	r4, #3
   121c8:	ldr	r0, [r4]
   121cc:	mov	r1, #10
   121d0:	mov	r2, r5
   121d4:	bl	117cc <__gmpz_out_str@plt>
   121d8:	mov	r0, #58	; 0x3a
   121dc:	bl	11a6c <putchar_unlocked@plt>
   121e0:	mov	r1, sp
   121e4:	mov	r0, r5
   121e8:	bl	124c8 <__assert_fail@plt+0xa50>
   121ec:	ldr	r0, [sp, #8]
   121f0:	cmp	r0, #0
   121f4:	beq	1225c <__assert_fail@plt+0x7e4>
   121f8:	mov	r5, #0
   121fc:	b	12210 <__assert_fail@plt+0x798>
   12200:	add	r5, r5, #1
   12204:	ldr	r0, [sp, #8]
   12208:	cmp	r5, r0
   1220c:	bcs	1225c <__assert_fail@plt+0x7e4>
   12210:	ldr	r0, [sp, #4]
   12214:	ldr	r0, [r0, r5, lsl #2]
   12218:	cmp	r0, #0
   1221c:	beq	12200 <__assert_fail@plt+0x788>
   12220:	mov	r6, #0
   12224:	mov	r0, #32
   12228:	bl	11a6c <putchar_unlocked@plt>
   1222c:	add	r0, r5, r5, lsl #1
   12230:	ldr	r1, [sp]
   12234:	add	r2, r1, r0, lsl #2
   12238:	ldr	r0, [r4]
   1223c:	mov	r1, #10
   12240:	bl	117cc <__gmpz_out_str@plt>
   12244:	ldr	r0, [sp, #4]
   12248:	ldr	r0, [r0, r5, lsl #2]
   1224c:	add	r6, r6, #1
   12250:	cmp	r6, r0
   12254:	bcc	12224 <__assert_fail@plt+0x7ac>
   12258:	b	12200 <__assert_fail@plt+0x788>
   1225c:	mov	r0, sp
   12260:	bl	12574 <__assert_fail@plt+0xafc>
   12264:	add	r0, sp, #12
   12268:	bl	11904 <__gmpz_clear@plt>
   1226c:	mov	r0, #10
   12270:	bl	11a6c <putchar_unlocked@plt>
   12274:	ldr	r0, [r4]
   12278:	bl	117d8 <fflush_unlocked@plt>
   1227c:	mov	r4, #1
   12280:	b	122bc <__assert_fail@plt+0x844>
   12284:	mov	r4, #0
   12288:	movw	r1, #51317	; 0xc875
   1228c:	movt	r1, #1
   12290:	mov	r0, #0
   12294:	mov	r2, #5
   12298:	bl	11748 <dcgettext@plt>
   1229c:	mov	r6, r0
   122a0:	mov	r0, r5
   122a4:	bl	19184 <__assert_fail@plt+0x770c>
   122a8:	mov	r3, r0
   122ac:	mov	r0, #0
   122b0:	mov	r1, #0
   122b4:	mov	r2, r6
   122b8:	bl	11844 <error@plt>
   122bc:	mov	r0, r4
   122c0:	sub	sp, fp, #16
   122c4:	pop	{r4, r5, r6, sl, fp, pc}
   122c8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   122cc:	add	fp, sp, #28
   122d0:	sub	sp, sp, #8
   122d4:	ldrb	r7, [r2]
   122d8:	mov	r3, #4
   122dc:	cmp	r7, #0
   122e0:	stm	sp, {r0, r1}
   122e4:	beq	1230c <__assert_fail@plt+0x894>
   122e8:	add	r6, r2, #1
   122ec:	mvn	r5, #47	; 0x2f
   122f0:	uxtab	r7, r5, r7
   122f4:	cmp	r7, #10
   122f8:	bcs	1230c <__assert_fail@plt+0x894>
   122fc:	ldrb	r7, [r6], #1
   12300:	cmp	r7, #0
   12304:	bne	122f0 <__assert_fail@plt+0x878>
   12308:	mov	r3, #0
   1230c:	mov	sl, #0
   12310:	movw	r8, #39321	; 0x9999
   12314:	movt	r8, #39321	; 0x9999
   12318:	mov	r9, #10
   1231c:	mov	r5, #0
   12320:	mov	r6, #0
   12324:	mov	r7, #0
   12328:	mov	ip, #1
   1232c:	cmp	r3, #0
   12330:	bne	123b0 <__assert_fail@plt+0x938>
   12334:	ldrb	r3, [r2], #1
   12338:	cmp	r3, #0
   1233c:	beq	123b8 <__assert_fail@plt+0x940>
   12340:	subs	r4, r8, sl
   12344:	movw	r0, #39321	; 0x9999
   12348:	movt	r0, #6553	; 0x1999
   1234c:	sbcs	r4, r0, r5
   12350:	bcc	123bc <__assert_fail@plt+0x944>
   12354:	lsl	r4, r7, #1
   12358:	orr	r4, r4, r6, lsr #31
   1235c:	umull	lr, r1, r6, r9
   12360:	add	r0, r7, r7, lsl #2
   12364:	add	r0, r1, r0, lsl #1
   12368:	lsr	r1, r7, #29
   1236c:	add	r1, r1, r7, lsr #31
   12370:	subs	r6, lr, r6, lsl #1
   12374:	sbcs	r4, r0, r4
   12378:	addcc	r1, r1, #1
   1237c:	umull	r4, r6, sl, r9
   12380:	add	r5, r5, r5, lsl #2
   12384:	add	r5, r6, r5, lsl #1
   12388:	sub	r6, r3, #48	; 0x30
   1238c:	mov	r3, #0
   12390:	adds	r6, lr, r6
   12394:	adcs	r7, r0, #0
   12398:	adcs	sl, r4, r1
   1239c:	adcs	r5, r5, #0
   123a0:	adc	r0, r3, #0
   123a4:	cmp	r0, #1
   123a8:	bne	1232c <__assert_fail@plt+0x8b4>
   123ac:	b	123bc <__assert_fail@plt+0x944>
   123b0:	mov	ip, r3
   123b4:	b	123bc <__assert_fail@plt+0x944>
   123b8:	mov	ip, #0
   123bc:	ldr	r0, [sp]
   123c0:	str	sl, [r0]
   123c4:	str	r5, [r0, #4]
   123c8:	ldr	r0, [sp, #4]
   123cc:	strd	r6, [r0]
   123d0:	mov	r0, ip
   123d4:	sub	sp, fp, #28
   123d8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   123dc:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   123e0:	add	fp, sp, #24
   123e4:	sub	sp, sp, #272	; 0x110
   123e8:	mov	r8, r3
   123ec:	mov	r5, r2
   123f0:	mov	r6, r1
   123f4:	mov	r7, r0
   123f8:	bl	125c8 <__assert_fail@plt+0xb50>
   123fc:	mov	r0, #58	; 0x3a
   12400:	bl	12720 <__assert_fail@plt+0xca8>
   12404:	add	r9, sp, #8
   12408:	str	r9, [sp]
   1240c:	mov	r0, r7
   12410:	mov	r1, r6
   12414:	mov	r2, r5
   12418:	mov	r3, r8
   1241c:	bl	12808 <__assert_fail@plt+0xd90>
   12420:	ldrb	r0, [sp, #258]	; 0x102
   12424:	cmp	r0, #0
   12428:	beq	1248c <__assert_fail@plt+0xa14>
   1242c:	mov	r5, #0
   12430:	b	12444 <__assert_fail@plt+0x9cc>
   12434:	add	r5, r5, #1
   12438:	ldrb	r0, [sp, #258]	; 0x102
   1243c:	cmp	r5, r0
   12440:	bcs	1248c <__assert_fail@plt+0xa14>
   12444:	add	r6, r9, r5
   12448:	ldrb	r0, [r6, #224]!	; 0xe0
   1244c:	cmp	r0, #0
   12450:	beq	12434 <__assert_fail@plt+0x9bc>
   12454:	add	r0, r9, r5, lsl #3
   12458:	add	r7, r0, #16
   1245c:	mov	r4, #0
   12460:	mov	r0, #32
   12464:	bl	12720 <__assert_fail@plt+0xca8>
   12468:	ldrd	r2, [r7]
   1246c:	mov	r0, #0
   12470:	mov	r1, #0
   12474:	bl	125c8 <__assert_fail@plt+0xb50>
   12478:	add	r4, r4, #1
   1247c:	ldrb	r0, [r6]
   12480:	cmp	r4, r0
   12484:	bcc	12460 <__assert_fail@plt+0x9e8>
   12488:	b	12434 <__assert_fail@plt+0x9bc>
   1248c:	ldr	r0, [sp, #16]
   12490:	ldr	r1, [sp, #20]
   12494:	orrs	r0, r0, r1
   12498:	beq	124b8 <__assert_fail@plt+0xa40>
   1249c:	add	r4, r9, #8
   124a0:	mov	r0, #32
   124a4:	bl	12720 <__assert_fail@plt+0xca8>
   124a8:	ldrd	r0, [r4]
   124ac:	ldr	r2, [sp, #8]
   124b0:	ldr	r3, [sp, #12]
   124b4:	bl	125c8 <__assert_fail@plt+0xb50>
   124b8:	mov	r0, #10
   124bc:	bl	12720 <__assert_fail@plt+0xca8>
   124c0:	sub	sp, fp, #24
   124c4:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   124c8:	push	{r4, r5, fp, lr}
   124cc:	add	fp, sp, #8
   124d0:	mov	r4, r1
   124d4:	mov	r5, r0
   124d8:	mov	r0, r1
   124dc:	bl	16888 <__assert_fail@plt+0x4e10>
   124e0:	ldr	r0, [r5, #4]
   124e4:	cmp	r0, #0
   124e8:	beq	1255c <__assert_fail@plt+0xae4>
   124ec:	mov	r0, r5
   124f0:	mov	r1, r4
   124f4:	bl	1689c <__assert_fail@plt+0x4e24>
   124f8:	mov	r0, r5
   124fc:	mov	r1, #1
   12500:	bl	11a24 <__gmpz_cmp_ui@plt>
   12504:	cmp	r0, #0
   12508:	popeq	{r4, r5, fp, pc}
   1250c:	movw	r0, #4588	; 0x11ec
   12510:	movt	r0, #3
   12514:	ldrb	r0, [r0]
   12518:	cmp	r0, #1
   1251c:	bne	1253c <__assert_fail@plt+0xac4>
   12520:	movw	r0, #4568	; 0x11d8
   12524:	movt	r0, #3
   12528:	ldr	r0, [r0]
   1252c:	movw	r2, #52035	; 0xcb43
   12530:	movt	r2, #1
   12534:	mov	r1, #1
   12538:	bl	1197c <__fprintf_chk@plt>
   1253c:	mov	r0, r5
   12540:	bl	169a8 <__assert_fail@plt+0x4f30>
   12544:	cmp	r0, #0
   12548:	beq	12560 <__assert_fail@plt+0xae8>
   1254c:	mov	r0, r4
   12550:	mov	r1, r5
   12554:	pop	{r4, r5, fp, lr}
   12558:	b	16bcc <__assert_fail@plt+0x5154>
   1255c:	pop	{r4, r5, fp, pc}
   12560:	mov	r0, r5
   12564:	mov	r1, #1
   12568:	mov	r2, r4
   1256c:	pop	{r4, r5, fp, lr}
   12570:	b	16d30 <__assert_fail@plt+0x52b8>
   12574:	push	{r4, r5, r6, sl, fp, lr}
   12578:	add	fp, sp, #16
   1257c:	mov	r4, r0
   12580:	ldr	r0, [r0, #8]
   12584:	cmp	r0, #0
   12588:	beq	125b4 <__assert_fail@plt+0xb3c>
   1258c:	mov	r5, #0
   12590:	mov	r6, #0
   12594:	ldr	r0, [r4]
   12598:	add	r0, r0, r5
   1259c:	bl	11904 <__gmpz_clear@plt>
   125a0:	add	r5, r5, #12
   125a4:	add	r6, r6, #1
   125a8:	ldr	r0, [r4, #8]
   125ac:	cmp	r6, r0
   125b0:	bcc	12594 <__assert_fail@plt+0xb1c>
   125b4:	ldr	r0, [r4]
   125b8:	bl	172ec <__assert_fail@plt+0x5874>
   125bc:	ldr	r0, [r4, #4]
   125c0:	pop	{r4, r5, r6, sl, fp, lr}
   125c4:	b	172ec <__assert_fail@plt+0x5874>
   125c8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   125cc:	add	fp, sp, #28
   125d0:	sub	sp, sp, #20
   125d4:	str	r3, [sp, #16]
   125d8:	mov	r9, r2
   125dc:	mov	r7, r0
   125e0:	orrs	r0, r0, r1
   125e4:	beq	12708 <__assert_fail@plt+0xc90>
   125e8:	mov	r4, r1
   125ec:	movw	r6, #51712	; 0xca00
   125f0:	movt	r6, #15258	; 0x3b9a
   125f4:	mov	r5, #0
   125f8:	mov	r0, r7
   125fc:	mov	r2, r6
   12600:	mov	r3, #0
   12604:	bl	1c344 <__assert_fail@plt+0xa8cc>
   12608:	str	r0, [sp, #8]
   1260c:	umull	r2, r3, r0, r6
   12610:	str	r1, [sp, #4]
   12614:	mla	r3, r1, r6, r3
   12618:	subs	ip, r7, r2
   1261c:	sbc	lr, r4, r3
   12620:	mvn	r4, #63	; 0x3f
   12624:	mov	r3, #0
   12628:	mov	r1, #0
   1262c:	mov	r2, #0
   12630:	mov	r7, #0
   12634:	mov	sl, r9
   12638:	b	12694 <__assert_fail@plt+0xc1c>
   1263c:	subs	r3, ip, r6
   12640:	sbc	r0, lr, r7
   12644:	subs	ip, r3, #1
   12648:	sbc	lr, r0, #0
   1264c:	subs	sl, sl, r1
   12650:	mov	r8, sl
   12654:	mov	sl, r1
   12658:	ldr	r1, [sp, #16]
   1265c:	sbcs	r1, r1, r2
   12660:	str	r1, [sp, #16]
   12664:	mov	r1, #0
   12668:	movwcc	r1, #1
   1266c:	cmp	r1, #0
   12670:	mov	r1, sl
   12674:	mov	sl, r8
   12678:	moveq	ip, r3
   1267c:	moveq	lr, r0
   12680:	orr	r5, r5, #1
   12684:	ldr	r0, [sp, #12]
   12688:	orr	r3, r0, r9, lsr #31
   1268c:	adds	r4, r4, #1
   12690:	bcs	126e8 <__assert_fail@plt+0xc70>
   12694:	mov	r9, r5
   12698:	lsl	r0, r3, #1
   1269c:	str	r0, [sp, #12]
   126a0:	lsrs	r3, r2, #1
   126a4:	rrx	r1, r1
   126a8:	orr	r2, r3, r6, lsl #31
   126ac:	lsrs	r7, r7, #1
   126b0:	rrx	r6, r6
   126b4:	lsl	r5, r5, #1
   126b8:	subs	r3, r6, ip
   126bc:	sbcs	r3, r7, lr
   126c0:	bcc	1263c <__assert_fail@plt+0xbc4>
   126c4:	ldr	r0, [sp, #16]
   126c8:	eor	r3, ip, r6
   126cc:	eor	r8, lr, r7
   126d0:	orrs	r3, r3, r8
   126d4:	bne	12684 <__assert_fail@plt+0xc0c>
   126d8:	subs	r3, sl, r1
   126dc:	sbcs	r3, r0, r2
   126e0:	bcs	1263c <__assert_fail@plt+0xbc4>
   126e4:	b	12684 <__assert_fail@plt+0xc0c>
   126e8:	ldr	r0, [sp, #8]
   126ec:	ldr	r1, [sp, #4]
   126f0:	mov	r2, r5
   126f4:	bl	125c8 <__assert_fail@plt+0xb50>
   126f8:	mov	r0, sl
   126fc:	ldr	r1, [sp, #16]
   12700:	mov	r2, #9
   12704:	b	12714 <__assert_fail@plt+0xc9c>
   12708:	mov	r0, r9
   1270c:	ldr	r1, [sp, #16]
   12710:	mov	r2, #0
   12714:	sub	sp, fp, #28
   12718:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1271c:	b	12904 <__assert_fail@plt+0xe8c>
   12720:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   12724:	add	fp, sp, #24
   12728:	movw	r7, #4596	; 0x11f4
   1272c:	movt	r7, #3
   12730:	ldr	r1, [r7]
   12734:	add	r2, r1, #1
   12738:	str	r2, [r7]
   1273c:	strb	r0, [r1]
   12740:	cmp	r0, #10
   12744:	bne	12804 <__assert_fail@plt+0xd8c>
   12748:	movw	r8, #4592	; 0x11f0
   1274c:	movt	r8, #3
   12750:	ldr	r4, [r8]
   12754:	ldr	r5, [r7]
   12758:	movw	r6, #4472	; 0x1178
   1275c:	movt	r6, #3
   12760:	ldr	r0, [r6]
   12764:	cmn	r0, #1
   12768:	beq	1277c <__assert_fail@plt+0xd04>
   1276c:	cmp	r0, #0
   12770:	beq	127b0 <__assert_fail@plt+0xd38>
   12774:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   12778:	b	11fcc <__assert_fail@plt+0x554>
   1277c:	mov	r0, #0
   12780:	bl	11a48 <isatty@plt>
   12784:	mov	r1, r0
   12788:	mov	r0, #1
   1278c:	cmp	r1, #0
   12790:	bne	127a4 <__assert_fail@plt+0xd2c>
   12794:	mov	r0, #1
   12798:	bl	11a48 <isatty@plt>
   1279c:	cmp	r0, #0
   127a0:	movwne	r0, #1
   127a4:	str	r0, [r6]
   127a8:	cmp	r0, #0
   127ac:	bne	12774 <__assert_fail@plt+0xcfc>
   127b0:	sub	r0, r5, r4
   127b4:	cmp	r0, #512	; 0x200
   127b8:	bcc	12804 <__assert_fail@plt+0xd8c>
   127bc:	ldr	r0, [r8]
   127c0:	movw	r1, #513	; 0x201
   127c4:	add	r4, r0, r1
   127c8:	ldr	r5, [r7]
   127cc:	ldrb	r0, [r4, #-2]
   127d0:	sub	r4, r4, #1
   127d4:	cmp	r0, #10
   127d8:	bne	127cc <__assert_fail@plt+0xd54>
   127dc:	str	r4, [r7]
   127e0:	bl	11fcc <__assert_fail@plt+0x554>
   127e4:	sub	r5, r5, r4
   127e8:	ldr	r6, [r8]
   127ec:	mov	r0, r6
   127f0:	mov	r1, r4
   127f4:	mov	r2, r5
   127f8:	bl	11718 <memcpy@plt>
   127fc:	add	r0, r6, r5
   12800:	str	r0, [r7]
   12804:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   12808:	push	{r4, r5, r6, sl, fp, lr}
   1280c:	add	fp, sp, #16
   12810:	sub	sp, sp, #24
   12814:	mov	r6, r0
   12818:	str	r1, [sp, #20]
   1281c:	str	r0, [sp, #16]
   12820:	ldr	r4, [fp, #8]
   12824:	mov	r0, #0
   12828:	str	r0, [r4, #8]
   1282c:	str	r0, [r4, #12]
   12830:	strb	r0, [r4, #250]	; 0xfa
   12834:	orrs	r0, r6, r1
   12838:	bne	12848 <__assert_fail@plt+0xdd0>
   1283c:	subs	r0, r2, #2
   12840:	sbcs	r0, r3, #0
   12844:	bcc	12880 <__assert_fail@plt+0xe08>
   12848:	stm	sp, {r2, r3, r4}
   1284c:	add	r0, sp, #16
   12850:	mov	r2, r6
   12854:	mov	r3, r1
   12858:	bl	1298c <__assert_fail@plt+0xf14>
   1285c:	mov	r6, r0
   12860:	mov	r5, r1
   12864:	ldr	r0, [sp, #16]
   12868:	ldr	r1, [sp, #20]
   1286c:	rsbs	r2, r6, #1
   12870:	rscs	r2, r5, #0
   12874:	bcc	12888 <__assert_fail@plt+0xe10>
   12878:	orrs	r2, r0, r1
   1287c:	bne	12888 <__assert_fail@plt+0xe10>
   12880:	sub	sp, fp, #16
   12884:	pop	{r4, r5, r6, sl, fp, pc}
   12888:	mov	r2, r6
   1288c:	mov	r3, r5
   12890:	bl	131c0 <__assert_fail@plt+0x1748>
   12894:	ldr	r2, [sp, #16]
   12898:	ldr	r3, [sp, #20]
   1289c:	cmp	r0, #0
   128a0:	beq	128bc <__assert_fail@plt+0xe44>
   128a4:	str	r6, [sp]
   128a8:	str	r5, [sp, #4]
   128ac:	mov	r0, r4
   128b0:	bl	13bfc <__assert_fail@plt+0x2184>
   128b4:	sub	sp, fp, #16
   128b8:	pop	{r4, r5, r6, sl, fp, pc}
   128bc:	orrs	r0, r2, r3
   128c0:	beq	128e8 <__assert_fail@plt+0xe70>
   128c4:	mov	r0, #1
   128c8:	stm	sp, {r0, r4}
   128cc:	mov	r0, r2
   128d0:	mov	r1, r3
   128d4:	mov	r2, r6
   128d8:	mov	r3, r5
   128dc:	bl	142a8 <__assert_fail@plt+0x2830>
   128e0:	sub	sp, fp, #16
   128e4:	pop	{r4, r5, r6, sl, fp, pc}
   128e8:	mov	r0, r6
   128ec:	mov	r1, r5
   128f0:	mov	r2, #1
   128f4:	mov	r3, r4
   128f8:	bl	13c78 <__assert_fail@plt+0x2200>
   128fc:	sub	sp, fp, #16
   12900:	pop	{r4, r5, r6, sl, fp, pc}
   12904:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   12908:	add	fp, sp, #24
   1290c:	sub	sp, sp, #24
   12910:	mov	r7, r2
   12914:	add	r8, sp, #3
   12918:	mov	r2, r8
   1291c:	bl	1738c <__assert_fail@plt+0x5914>
   12920:	mov	r5, r0
   12924:	sub	r0, r8, r0
   12928:	add	r4, r0, #20
   1292c:	movw	r9, #4596	; 0x11f4
   12930:	movt	r9, #3
   12934:	ldr	r6, [r9]
   12938:	cmp	r4, r7
   1293c:	bcs	1296c <__assert_fail@plt+0xef4>
   12940:	add	r0, r5, r7
   12944:	sub	r0, r0, r8
   12948:	sub	r7, r0, #20
   1294c:	mov	r0, r6
   12950:	mov	r1, #48	; 0x30
   12954:	mov	r2, r7
   12958:	bl	11940 <memset@plt>
   1295c:	subs	r7, r7, #1
   12960:	add	r6, r6, #1
   12964:	bne	1295c <__assert_fail@plt+0xee4>
   12968:	str	r6, [r9]
   1296c:	mov	r0, r6
   12970:	mov	r1, r5
   12974:	mov	r2, r4
   12978:	bl	11718 <memcpy@plt>
   1297c:	add	r0, r6, r4
   12980:	str	r0, [r9]
   12984:	sub	sp, fp, #24
   12988:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1298c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12990:	add	fp, sp, #28
   12994:	sub	sp, sp, #36	; 0x24
   12998:	ldr	lr, [fp, #12]
   1299c:	ldr	ip, [fp, #8]
   129a0:	tst	ip, #1
   129a4:	str	r0, [sp, #12]
   129a8:	bne	12a54 <__assert_fail@plt+0xfdc>
   129ac:	orrs	r1, ip, lr
   129b0:	beq	12bb8 <__assert_fail@plt+0x1140>
   129b4:	mov	r8, r3
   129b8:	mov	r0, #0
   129bc:	tst	ip, #1
   129c0:	bne	129e8 <__assert_fail@plt+0xf70>
   129c4:	mov	r0, #0
   129c8:	mov	r1, ip
   129cc:	mov	r3, lr
   129d0:	lsrs	r3, r3, #1
   129d4:	rrx	r7, r1
   129d8:	add	r0, r0, #1
   129dc:	tst	r1, #2
   129e0:	mov	r1, r7
   129e4:	beq	129d0 <__assert_fail@plt+0xf58>
   129e8:	lsr	r1, ip, r0
   129ec:	rsb	r3, r0, #32
   129f0:	orr	r1, r1, lr, lsl r3
   129f4:	subs	r4, r0, #32
   129f8:	lsrpl	r1, lr, r4
   129fc:	rsb	r5, r0, #64	; 0x40
   12a00:	lsl	r6, r2, r5
   12a04:	cmp	r3, #0
   12a08:	movwpl	r6, #0
   12a0c:	orr	r9, r6, r1
   12a10:	rsb	r1, r5, #32
   12a14:	lsr	r1, r2, r1
   12a18:	orr	r1, r1, r8, lsl r5
   12a1c:	cmp	r3, #0
   12a20:	lslpl	r1, r2, r3
   12a24:	lsr	r5, lr, r0
   12a28:	cmp	r4, #0
   12a2c:	movwpl	r5, #0
   12a30:	orr	r5, r1, r5
   12a34:	lsr	r1, r2, r0
   12a38:	orr	r7, r1, r8, lsl r3
   12a3c:	lsrpl	r7, r8, r4
   12a40:	lsr	r8, r8, r0
   12a44:	cmp	r4, #0
   12a48:	movwpl	r8, #0
   12a4c:	mov	r6, r8
   12a50:	b	12c18 <__assert_fail@plt+0x11a0>
   12a54:	mov	r7, r2
   12a58:	orrs	r0, r7, r3
   12a5c:	beq	12c40 <__assert_fail@plt+0x11c8>
   12a60:	mov	r5, #0
   12a64:	mov	r8, #3
   12a68:	mov	r6, #0
   12a6c:	str	r7, [sp, #32]
   12a70:	str	r3, [sp, #24]
   12a74:	movw	r0, #52264	; 0xcc28
   12a78:	movt	r0, #1
   12a7c:	str	r6, [sp, #20]
   12a80:	ldr	r9, [r0, r6, lsl #4]!
   12a84:	add	r1, r0, #8
   12a88:	str	r1, [sp, #16]
   12a8c:	ldr	r4, [r0, #4]
   12a90:	umull	r7, r0, r9, ip
   12a94:	str	lr, [sp, #28]
   12a98:	mla	r0, r9, lr, r0
   12a9c:	mov	lr, ip
   12aa0:	mla	sl, r4, ip, r0
   12aa4:	umull	r0, r1, r7, r5
   12aa8:	umlal	r0, r1, sl, r8
   12aac:	umull	r2, r3, r7, r8
   12ab0:	adds	r0, r0, r3
   12ab4:	adc	r1, r1, #0
   12ab8:	mov	r6, r8
   12abc:	umull	r2, r3, sl, r8
   12ac0:	subs	r0, r0, r2
   12ac4:	sbcs	r0, r1, r3
   12ac8:	mov	r0, #0
   12acc:	movwcc	r0, #1
   12ad0:	mov	ip, r5
   12ad4:	umull	r2, r3, sl, r5
   12ad8:	cmp	r0, #0
   12adc:	addne	r3, r3, #1
   12ae0:	adds	r1, r2, r1
   12ae4:	adc	r0, r3, #0
   12ae8:	ldr	r5, [sp, #32]
   12aec:	subs	r2, r5, r1
   12af0:	ldr	r3, [sp, #24]
   12af4:	sbcs	r2, r3, r0
   12af8:	bcc	12b5c <__assert_fail@plt+0x10e4>
   12afc:	subs	r1, r5, r1
   12b00:	umull	r8, r2, r1, r9
   12b04:	mla	r1, r1, r4, r2
   12b08:	sbc	r0, r3, r0
   12b0c:	mla	r5, r0, r9, r1
   12b10:	ldr	r0, [sp, #16]
   12b14:	ldrd	r0, [r0]
   12b18:	subs	r0, r0, r8
   12b1c:	sbcs	r0, r1, r5
   12b20:	bcc	12b5c <__assert_fail@plt+0x10e4>
   12b24:	mov	r0, #1
   12b28:	str	r0, [sp]
   12b2c:	ldr	r0, [fp, #16]
   12b30:	mov	r2, r6
   12b34:	str	ip, [sp, #8]
   12b38:	mov	r3, ip
   12b3c:	bl	15004 <__assert_fail@plt+0x358c>
   12b40:	mov	ip, r7
   12b44:	mov	lr, sl
   12b48:	str	r8, [sp, #32]
   12b4c:	mov	r8, r6
   12b50:	str	r5, [sp, #24]
   12b54:	ldr	r5, [sp, #8]
   12b58:	b	12a90 <__assert_fail@plt+0x1018>
   12b5c:	ldr	r1, [sp, #20]
   12b60:	add	r1, r1, #1
   12b64:	movw	r0, #63064	; 0xf658
   12b68:	movt	r0, #1
   12b6c:	ldrb	r0, [r0, r1]
   12b70:	mov	r8, r6
   12b74:	adds	r8, r6, r0
   12b78:	mov	r5, ip
   12b7c:	mov	r6, r1
   12b80:	adc	r5, ip, #0
   12b84:	lsr	r0, r1, #2
   12b88:	cmp	r0, #166	; 0xa6
   12b8c:	bhi	12ba8 <__assert_fail@plt+0x1130>
   12b90:	ldr	r7, [sp, #32]
   12b94:	orrs	r0, r7, r3
   12b98:	mov	ip, lr
   12b9c:	ldr	lr, [sp, #28]
   12ba0:	bne	12a6c <__assert_fail@plt+0xff4>
   12ba4:	b	12c54 <__assert_fail@plt+0x11dc>
   12ba8:	mov	ip, lr
   12bac:	ldr	lr, [sp, #28]
   12bb0:	ldr	r7, [sp, #32]
   12bb4:	b	12c54 <__assert_fail@plt+0x11dc>
   12bb8:	mov	r6, r3
   12bbc:	mov	r7, #0
   12bc0:	tst	r2, #1
   12bc4:	mov	r0, #0
   12bc8:	bne	12bf0 <__assert_fail@plt+0x1178>
   12bcc:	mov	r0, #0
   12bd0:	mov	r1, r2
   12bd4:	mov	r3, r6
   12bd8:	lsrs	r3, r3, #1
   12bdc:	rrx	r5, r1
   12be0:	add	r0, r0, #1
   12be4:	tst	r1, #2
   12be8:	mov	r1, r5
   12bec:	beq	12bd8 <__assert_fail@plt+0x1160>
   12bf0:	lsr	r1, r2, r0
   12bf4:	rsb	r2, r0, #32
   12bf8:	orr	r4, r1, r6, lsl r2
   12bfc:	subs	r1, r0, #32
   12c00:	lsrpl	r4, r6, r1
   12c04:	mov	r9, r4
   12c08:	lsr	r5, r6, r0
   12c0c:	movwpl	r5, #0
   12c10:	add	r0, r0, #64	; 0x40
   12c14:	mov	r6, #0
   12c18:	str	r0, [sp]
   12c1c:	ldr	r0, [fp, #16]
   12c20:	mov	r2, #2
   12c24:	mov	r3, #0
   12c28:	bl	15004 <__assert_fail@plt+0x358c>
   12c2c:	mov	ip, r9
   12c30:	mov	lr, r5
   12c34:	mov	r3, r6
   12c38:	orrs	r0, r7, r3
   12c3c:	bne	12a60 <__assert_fail@plt+0xfe8>
   12c40:	mov	r6, #0
   12c44:	mov	r8, #3
   12c48:	mov	r5, #0
   12c4c:	mov	r7, #0
   12c50:	mov	r3, #0
   12c54:	ldr	r0, [sp, #12]
   12c58:	cmp	r0, #0
   12c5c:	strne	r7, [r0]
   12c60:	strne	r3, [r0, #4]
   12c64:	lsr	r0, r6, #2
   12c68:	cmp	r0, #166	; 0xa6
   12c6c:	bhi	131b0 <__assert_fail@plt+0x1738>
   12c70:	movw	sl, #52264	; 0xcc28
   12c74:	movt	sl, #1
   12c78:	ldr	r0, [sl, r6, lsl #4]!
   12c7c:	umull	r7, r1, r0, ip
   12c80:	mla	r0, r0, lr, r1
   12c84:	ldr	r2, [sl, #4]
   12c88:	ldr	r1, [sl, #12]
   12c8c:	mla	r9, r2, ip, r0
   12c90:	mov	r4, sl
   12c94:	ldr	r0, [r4, #8]!
   12c98:	subs	r0, r0, r7
   12c9c:	sbcs	r0, r1, r9
   12ca0:	bcs	12e2c <__assert_fail@plt+0x13b4>
   12ca4:	mov	r4, sl
   12ca8:	ldr	r0, [r4, #16]!
   12cac:	umull	r3, r1, r0, ip
   12cb0:	mla	r0, r0, lr, r1
   12cb4:	ldr	r2, [r4, #4]
   12cb8:	ldr	r1, [r4, #12]
   12cbc:	mla	r7, r2, ip, r0
   12cc0:	mov	r9, r4
   12cc4:	ldr	r0, [r9, #8]!
   12cc8:	subs	r0, r0, r3
   12ccc:	sbcs	r0, r1, r7
   12cd0:	bcs	12e9c <__assert_fail@plt+0x1424>
   12cd4:	mov	r4, sl
   12cd8:	ldr	r0, [r4, #32]!
   12cdc:	umull	r3, r1, r0, ip
   12ce0:	mla	r0, r0, lr, r1
   12ce4:	ldr	r2, [r4, #4]
   12ce8:	ldr	r1, [r4, #12]
   12cec:	mla	r7, r2, ip, r0
   12cf0:	mov	r9, r4
   12cf4:	ldr	r0, [r9, #8]!
   12cf8:	subs	r0, r0, r3
   12cfc:	sbcs	r0, r1, r7
   12d00:	bcs	12f10 <__assert_fail@plt+0x1498>
   12d04:	mov	r4, sl
   12d08:	ldr	r0, [r4, #48]!	; 0x30
   12d0c:	umull	r3, r1, r0, ip
   12d10:	mla	r0, r0, lr, r1
   12d14:	ldr	r2, [r4, #4]
   12d18:	ldr	r1, [r4, #12]
   12d1c:	mla	r7, r2, ip, r0
   12d20:	mov	r9, r4
   12d24:	ldr	r0, [r9, #8]!
   12d28:	subs	r0, r0, r3
   12d2c:	sbcs	r0, r1, r7
   12d30:	bcs	12f84 <__assert_fail@plt+0x150c>
   12d34:	mov	r4, sl
   12d38:	ldr	r0, [r4, #64]!	; 0x40
   12d3c:	umull	r3, r1, r0, ip
   12d40:	mla	r0, r0, lr, r1
   12d44:	ldr	r2, [r4, #4]
   12d48:	ldr	r1, [r4, #12]
   12d4c:	mla	r7, r2, ip, r0
   12d50:	mov	r9, r4
   12d54:	ldr	r0, [r9, #8]!
   12d58:	subs	r0, r0, r3
   12d5c:	sbcs	r0, r1, r7
   12d60:	bcs	12ff8 <__assert_fail@plt+0x1580>
   12d64:	mov	r4, sl
   12d68:	ldr	r0, [r4, #80]!	; 0x50
   12d6c:	umull	r3, r1, r0, ip
   12d70:	mla	r0, r0, lr, r1
   12d74:	ldr	r2, [r4, #4]
   12d78:	ldr	r1, [r4, #12]
   12d7c:	mla	r7, r2, ip, r0
   12d80:	mov	r9, r4
   12d84:	ldr	r0, [r9, #8]!
   12d88:	subs	r0, r0, r3
   12d8c:	sbcs	r0, r1, r7
   12d90:	bcs	1306c <__assert_fail@plt+0x15f4>
   12d94:	mov	r4, sl
   12d98:	ldr	r0, [r4, #96]!	; 0x60
   12d9c:	umull	r3, r1, r0, ip
   12da0:	mla	r0, r0, lr, r1
   12da4:	ldr	r2, [r4, #4]
   12da8:	ldr	r1, [r4, #12]
   12dac:	mla	r7, r2, ip, r0
   12db0:	mov	r9, r4
   12db4:	ldr	r0, [r9, #8]!
   12db8:	subs	r0, r0, r3
   12dbc:	sbcs	r0, r1, r7
   12dc0:	bcs	130e0 <__assert_fail@plt+0x1668>
   12dc4:	ldr	r1, [sl, #112]!	; 0x70
   12dc8:	umull	r0, r2, r1, ip
   12dcc:	mla	r1, r1, lr, r2
   12dd0:	ldr	r4, [sl, #4]
   12dd4:	ldr	r2, [sl, #12]
   12dd8:	mla	r1, r4, ip, r1
   12ddc:	mov	r7, sl
   12de0:	ldr	r3, [r7, #8]!
   12de4:	subs	r3, r3, r0
   12de8:	sbcs	r2, r2, r1
   12dec:	bcs	13154 <__assert_fail@plt+0x16dc>
   12df0:	movw	r0, #63739	; 0xf8fb
   12df4:	movt	r0, #1
   12df8:	ldrb	r0, [r0, r6]
   12dfc:	adds	r8, r8, r0
   12e00:	adc	r5, r5, #0
   12e04:	umull	r0, r1, r8, r8
   12e08:	mla	r1, r8, r5, r1
   12e0c:	mla	r1, r8, r5, r1
   12e10:	subs	r0, ip, r0
   12e14:	sbcs	r0, lr, r1
   12e18:	bcc	131b0 <__assert_fail@plt+0x1738>
   12e1c:	add	r6, r6, #8
   12e20:	cmp	r6, #668	; 0x29c
   12e24:	bcc	12c70 <__assert_fail@plt+0x11f8>
   12e28:	b	131b0 <__assert_fail@plt+0x1738>
   12e2c:	add	r0, r6, #1
   12e30:	str	r0, [sp, #28]
   12e34:	str	r2, [sp, #32]
   12e38:	str	r5, [sp, #8]
   12e3c:	ldr	r0, [sp, #28]
   12e40:	str	r0, [sp]
   12e44:	mov	r0, #0
   12e48:	str	r0, [sp, #4]
   12e4c:	ldr	r0, [fp, #16]
   12e50:	mov	r2, r8
   12e54:	mov	r3, r5
   12e58:	bl	1510c <__assert_fail@plt+0x3694>
   12e5c:	ldr	r5, [sp, #8]
   12e60:	ldr	r0, [sl]
   12e64:	umull	r1, r2, r0, r7
   12e68:	mla	r0, r0, r9, r2
   12e6c:	ldr	r2, [sp, #32]
   12e70:	mla	r0, r2, r7, r0
   12e74:	ldrd	r2, [r4]
   12e78:	subs	r2, r2, r1
   12e7c:	sbcs	r2, r3, r0
   12e80:	ldr	r2, [sp, #32]
   12e84:	mov	ip, r7
   12e88:	mov	lr, r9
   12e8c:	mov	r7, r1
   12e90:	mov	r9, r0
   12e94:	bcc	12ca4 <__assert_fail@plt+0x122c>
   12e98:	b	12e34 <__assert_fail@plt+0x13bc>
   12e9c:	add	r0, r6, #1
   12ea0:	str	r0, [sp, #28]
   12ea4:	str	r3, [sp, #24]
   12ea8:	str	r2, [sp, #32]
   12eac:	str	r5, [sp, #8]
   12eb0:	ldr	r0, [sp, #28]
   12eb4:	str	r0, [sp]
   12eb8:	mov	r0, #1
   12ebc:	str	r0, [sp, #4]
   12ec0:	ldr	r0, [fp, #16]
   12ec4:	mov	r2, r8
   12ec8:	mov	r3, r5
   12ecc:	bl	1510c <__assert_fail@plt+0x3694>
   12ed0:	ldr	r5, [sp, #8]
   12ed4:	ldr	r0, [r4]
   12ed8:	ldr	ip, [sp, #24]
   12edc:	umull	r1, r2, r0, ip
   12ee0:	mla	r0, r0, r7, r2
   12ee4:	ldr	r2, [sp, #32]
   12ee8:	mla	r0, r2, ip, r0
   12eec:	ldrd	r2, [r9]
   12ef0:	subs	r2, r2, r1
   12ef4:	sbcs	r2, r3, r0
   12ef8:	ldr	r2, [sp, #32]
   12efc:	mov	lr, r7
   12f00:	mov	r3, r1
   12f04:	mov	r7, r0
   12f08:	bcc	12cd4 <__assert_fail@plt+0x125c>
   12f0c:	b	12ea4 <__assert_fail@plt+0x142c>
   12f10:	add	r0, r6, #1
   12f14:	str	r0, [sp, #28]
   12f18:	str	r3, [sp, #24]
   12f1c:	str	r2, [sp, #32]
   12f20:	str	r5, [sp, #8]
   12f24:	ldr	r0, [sp, #28]
   12f28:	str	r0, [sp]
   12f2c:	mov	r0, #2
   12f30:	str	r0, [sp, #4]
   12f34:	ldr	r0, [fp, #16]
   12f38:	mov	r2, r8
   12f3c:	mov	r3, r5
   12f40:	bl	1510c <__assert_fail@plt+0x3694>
   12f44:	ldr	r5, [sp, #8]
   12f48:	ldr	r0, [r4]
   12f4c:	ldr	ip, [sp, #24]
   12f50:	umull	r1, r2, r0, ip
   12f54:	mla	r0, r0, r7, r2
   12f58:	ldr	r2, [sp, #32]
   12f5c:	mla	r0, r2, ip, r0
   12f60:	ldrd	r2, [r9]
   12f64:	subs	r2, r2, r1
   12f68:	sbcs	r2, r3, r0
   12f6c:	ldr	r2, [sp, #32]
   12f70:	mov	lr, r7
   12f74:	mov	r3, r1
   12f78:	mov	r7, r0
   12f7c:	bcc	12d04 <__assert_fail@plt+0x128c>
   12f80:	b	12f18 <__assert_fail@plt+0x14a0>
   12f84:	add	r0, r6, #1
   12f88:	str	r0, [sp, #28]
   12f8c:	str	r3, [sp, #24]
   12f90:	str	r2, [sp, #32]
   12f94:	str	r5, [sp, #8]
   12f98:	ldr	r0, [sp, #28]
   12f9c:	str	r0, [sp]
   12fa0:	mov	r0, #3
   12fa4:	str	r0, [sp, #4]
   12fa8:	ldr	r0, [fp, #16]
   12fac:	mov	r2, r8
   12fb0:	mov	r3, r5
   12fb4:	bl	1510c <__assert_fail@plt+0x3694>
   12fb8:	ldr	r5, [sp, #8]
   12fbc:	ldr	r0, [r4]
   12fc0:	ldr	ip, [sp, #24]
   12fc4:	umull	r1, r2, r0, ip
   12fc8:	mla	r0, r0, r7, r2
   12fcc:	ldr	r2, [sp, #32]
   12fd0:	mla	r0, r2, ip, r0
   12fd4:	ldrd	r2, [r9]
   12fd8:	subs	r2, r2, r1
   12fdc:	sbcs	r2, r3, r0
   12fe0:	ldr	r2, [sp, #32]
   12fe4:	mov	lr, r7
   12fe8:	mov	r3, r1
   12fec:	mov	r7, r0
   12ff0:	bcc	12d34 <__assert_fail@plt+0x12bc>
   12ff4:	b	12f8c <__assert_fail@plt+0x1514>
   12ff8:	add	r0, r6, #1
   12ffc:	str	r0, [sp, #28]
   13000:	str	r3, [sp, #24]
   13004:	str	r2, [sp, #32]
   13008:	str	r5, [sp, #8]
   1300c:	ldr	r0, [sp, #28]
   13010:	str	r0, [sp]
   13014:	mov	r0, #4
   13018:	str	r0, [sp, #4]
   1301c:	ldr	r0, [fp, #16]
   13020:	mov	r2, r8
   13024:	mov	r3, r5
   13028:	bl	1510c <__assert_fail@plt+0x3694>
   1302c:	ldr	r5, [sp, #8]
   13030:	ldr	r0, [r4]
   13034:	ldr	ip, [sp, #24]
   13038:	umull	r1, r2, r0, ip
   1303c:	mla	r0, r0, r7, r2
   13040:	ldr	r2, [sp, #32]
   13044:	mla	r0, r2, ip, r0
   13048:	ldrd	r2, [r9]
   1304c:	subs	r2, r2, r1
   13050:	sbcs	r2, r3, r0
   13054:	ldr	r2, [sp, #32]
   13058:	mov	lr, r7
   1305c:	mov	r3, r1
   13060:	mov	r7, r0
   13064:	bcc	12d64 <__assert_fail@plt+0x12ec>
   13068:	b	13000 <__assert_fail@plt+0x1588>
   1306c:	add	r0, r6, #1
   13070:	str	r0, [sp, #28]
   13074:	str	r3, [sp, #24]
   13078:	str	r2, [sp, #32]
   1307c:	str	r5, [sp, #8]
   13080:	ldr	r0, [sp, #28]
   13084:	str	r0, [sp]
   13088:	mov	r0, #5
   1308c:	str	r0, [sp, #4]
   13090:	ldr	r0, [fp, #16]
   13094:	mov	r2, r8
   13098:	mov	r3, r5
   1309c:	bl	1510c <__assert_fail@plt+0x3694>
   130a0:	ldr	r5, [sp, #8]
   130a4:	ldr	r0, [r4]
   130a8:	ldr	ip, [sp, #24]
   130ac:	umull	r1, r2, r0, ip
   130b0:	mla	r0, r0, r7, r2
   130b4:	ldr	r2, [sp, #32]
   130b8:	mla	r0, r2, ip, r0
   130bc:	ldrd	r2, [r9]
   130c0:	subs	r2, r2, r1
   130c4:	sbcs	r2, r3, r0
   130c8:	ldr	r2, [sp, #32]
   130cc:	mov	lr, r7
   130d0:	mov	r3, r1
   130d4:	mov	r7, r0
   130d8:	bcc	12d94 <__assert_fail@plt+0x131c>
   130dc:	b	13074 <__assert_fail@plt+0x15fc>
   130e0:	add	r0, r6, #1
   130e4:	str	r0, [sp, #28]
   130e8:	str	r3, [sp, #24]
   130ec:	str	r2, [sp, #32]
   130f0:	str	r5, [sp, #8]
   130f4:	ldr	r0, [sp, #28]
   130f8:	str	r0, [sp]
   130fc:	mov	r0, #6
   13100:	str	r0, [sp, #4]
   13104:	ldr	r0, [fp, #16]
   13108:	mov	r2, r8
   1310c:	mov	r3, r5
   13110:	bl	1510c <__assert_fail@plt+0x3694>
   13114:	ldr	r5, [sp, #8]
   13118:	ldr	r0, [r4]
   1311c:	ldr	ip, [sp, #24]
   13120:	umull	r1, r2, r0, ip
   13124:	mla	r0, r0, r7, r2
   13128:	ldr	r2, [sp, #32]
   1312c:	mla	r0, r2, ip, r0
   13130:	ldrd	r2, [r9]
   13134:	subs	r2, r2, r1
   13138:	sbcs	r2, r3, r0
   1313c:	ldr	r2, [sp, #32]
   13140:	mov	lr, r7
   13144:	mov	r3, r1
   13148:	mov	r7, r0
   1314c:	bcc	12dc4 <__assert_fail@plt+0x134c>
   13150:	b	130e8 <__assert_fail@plt+0x1670>
   13154:	add	r2, r6, #1
   13158:	str	r2, [sp, #32]
   1315c:	str	r1, [sp, #28]
   13160:	str	r0, [sp, #24]
   13164:	ldr	r0, [sp, #32]
   13168:	str	r0, [sp]
   1316c:	mov	r0, #7
   13170:	str	r0, [sp, #4]
   13174:	ldr	r0, [fp, #16]
   13178:	mov	r2, r8
   1317c:	mov	r3, r5
   13180:	bl	1510c <__assert_fail@plt+0x3694>
   13184:	ldr	lr, [sp, #28]
   13188:	ldr	ip, [sp, #24]
   1318c:	ldr	r1, [sl]
   13190:	umull	r0, r2, r1, ip
   13194:	mla	r1, r1, lr, r2
   13198:	mla	r1, r4, ip, r1
   1319c:	ldrd	r2, [r7]
   131a0:	subs	r2, r2, r0
   131a4:	sbcs	r2, r3, r1
   131a8:	bcc	12df0 <__assert_fail@plt+0x1378>
   131ac:	b	1315c <__assert_fail@plt+0x16e4>
   131b0:	mov	r0, ip
   131b4:	mov	r1, lr
   131b8:	sub	sp, fp, #28
   131bc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   131c0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   131c4:	add	fp, sp, #28
   131c8:	sub	sp, sp, #516	; 0x204
   131cc:	rsbs	r6, r0, #0
   131d0:	rsc	r5, r1, #0
   131d4:	orrs	r7, r0, r1
   131d8:	beq	132dc <__assert_fail@plt+0x1864>
   131dc:	str	r5, [sp, #132]	; 0x84
   131e0:	str	r6, [sp, #140]	; 0x8c
   131e4:	orr	r7, r2, r3
   131e8:	subs	ip, r0, #1
   131ec:	sbc	r8, r1, #0
   131f0:	cmp	r7, #0
   131f4:	movne	r8, r1
   131f8:	movne	ip, r0
   131fc:	subs	r6, r2, #1
   13200:	sbc	r4, r3, #0
   13204:	mov	r7, r4
   13208:	str	r4, [sp, #88]	; 0x58
   1320c:	orrs	r7, r6, r4
   13210:	str	r1, [sp, #84]	; 0x54
   13214:	str	r0, [sp, #56]	; 0x38
   13218:	str	ip, [sp, #80]	; 0x50
   1321c:	str	r8, [sp, #76]	; 0x4c
   13220:	str	r6, [sp, #92]	; 0x5c
   13224:	beq	132ec <__assert_fail@plt+0x1874>
   13228:	mov	r5, #0
   1322c:	tst	r6, #1
   13230:	bne	13258 <__assert_fail@plt+0x17e0>
   13234:	mov	r5, #0
   13238:	ldr	r0, [sp, #92]	; 0x5c
   1323c:	ldr	r1, [sp, #88]	; 0x58
   13240:	lsrs	r1, r1, #1
   13244:	rrx	r7, r0
   13248:	add	r5, r5, #1
   1324c:	tst	r0, #2
   13250:	mov	r0, r7
   13254:	beq	13240 <__assert_fail@plt+0x17c8>
   13258:	lsr	r0, r8, r5
   1325c:	subs	lr, r5, #32
   13260:	movwpl	r0, #0
   13264:	str	r0, [fp, #-36]	; 0xffffffdc
   13268:	lsr	r0, ip, r5
   1326c:	rsb	r6, r5, #32
   13270:	orr	r0, r0, r8, lsl r6
   13274:	cmp	lr, #0
   13278:	lsrpl	r0, r8, lr
   1327c:	str	r0, [fp, #-40]	; 0xffffffd8
   13280:	ldr	r0, [sp, #92]	; 0x5c
   13284:	lsr	r0, r0, r5
   13288:	ldr	r1, [sp, #88]	; 0x58
   1328c:	orr	r0, r0, r1, lsl r6
   13290:	lsrpl	r0, r1, lr
   13294:	rsb	r7, r5, #64	; 0x40
   13298:	lsl	r4, ip, r7
   1329c:	cmp	r6, #0
   132a0:	movwpl	r4, #0
   132a4:	orr	r0, r4, r0
   132a8:	str	r0, [fp, #-48]	; 0xffffffd0
   132ac:	rsb	r0, r7, #32
   132b0:	lsr	r0, ip, r0
   132b4:	orr	r0, r0, r8, lsl r7
   132b8:	cmp	r6, #0
   132bc:	lslpl	r0, ip, r6
   132c0:	str	r5, [sp, #32]
   132c4:	lsr	r7, r1, r5
   132c8:	cmp	lr, #0
   132cc:	movwpl	r7, #0
   132d0:	orr	r0, r0, r7
   132d4:	str	r0, [fp, #-44]	; 0xffffffd4
   132d8:	b	13358 <__assert_fail@plt+0x18e0>
   132dc:	mov	r0, r2
   132e0:	mov	r1, r3
   132e4:	bl	1515c <__assert_fail@plt+0x36e4>
   132e8:	b	13bb4 <__assert_fail@plt+0x213c>
   132ec:	mov	r1, #0
   132f0:	tst	ip, #1
   132f4:	mov	r0, #0
   132f8:	bne	13320 <__assert_fail@plt+0x18a8>
   132fc:	mov	r0, #0
   13300:	mov	r4, ip
   13304:	mov	r7, r8
   13308:	lsrs	r7, r7, #1
   1330c:	rrx	r6, r4
   13310:	add	r0, r0, #1
   13314:	tst	r4, #2
   13318:	mov	r4, r6
   1331c:	beq	13308 <__assert_fail@plt+0x1890>
   13320:	str	r1, [fp, #-36]	; 0xffffffdc
   13324:	str	r1, [fp, #-40]	; 0xffffffd8
   13328:	lsr	r1, r8, r0
   1332c:	subs	r6, r0, #32
   13330:	movwpl	r1, #0
   13334:	str	r1, [fp, #-44]	; 0xffffffd4
   13338:	lsr	r1, ip, r0
   1333c:	rsb	r7, r0, #32
   13340:	orr	r1, r1, r8, lsl r7
   13344:	cmp	r6, #0
   13348:	lsrpl	r1, r8, r6
   1334c:	str	r1, [fp, #-48]	; 0xffffffd0
   13350:	add	r0, r0, #64	; 0x40
   13354:	str	r0, [sp, #32]
   13358:	ubfx	r0, r2, #1, #7
   1335c:	movw	r1, #64414	; 0xfb9e
   13360:	movt	r1, #1
   13364:	ldrb	r0, [r1, r0]
   13368:	umull	r1, r7, r0, r2
   1336c:	mla	r7, r0, r3, r7
   13370:	rsbs	r1, r1, #2
   13374:	rsc	r8, r7, #0
   13378:	umull	r1, r4, r1, r0
   1337c:	umull	r7, r5, r1, r2
   13380:	rsbs	r6, r7, #2
   13384:	umull	ip, sl, r1, r6
   13388:	mov	r7, r2
   1338c:	umull	r9, r2, ip, r2
   13390:	mla	r2, ip, r3, r2
   13394:	mla	r0, r8, r0, r4
   13398:	str	r3, [sp, #52]	; 0x34
   1339c:	mla	r3, r1, r3, r5
   133a0:	mla	r3, r0, r7, r3
   133a4:	rsc	r3, r3, #0
   133a8:	mla	r1, r1, r3, sl
   133ac:	mla	r0, r0, r6, r1
   133b0:	str	r7, [sp, #48]	; 0x30
   133b4:	str	r0, [sp, #148]	; 0x94
   133b8:	mla	r0, r0, r7, r2
   133bc:	rsbs	lr, r9, #2
   133c0:	rsc	r0, r0, #0
   133c4:	str	r0, [sp, #144]	; 0x90
   133c8:	mov	r0, #0
   133cc:	ldr	r2, [sp, #56]	; 0x38
   133d0:	rsbs	r1, r2, #1
   133d4:	ldr	sl, [sp, #84]	; 0x54
   133d8:	rscs	r1, sl, #0
   133dc:	mov	r6, #0
   133e0:	movwcc	r6, #1
   133e4:	mov	r3, #127	; 0x7f
   133e8:	cmp	r6, #0
   133ec:	movwne	r3, #63	; 0x3f
   133f0:	subs	r1, r2, #2
   133f4:	sbcs	r1, sl, #0
   133f8:	mov	r7, #0
   133fc:	movwcc	r7, #1
   13400:	mov	r4, #0
   13404:	mov	r1, #0
   13408:	str	r1, [sp, #156]	; 0x9c
   1340c:	b	13458 <__assert_fail@plt+0x19e0>
   13410:	subs	r2, r6, r5
   13414:	sbc	r3, r4, sl
   13418:	subs	r6, r2, #1
   1341c:	sbc	r4, r3, #0
   13420:	ldr	r5, [sp, #48]	; 0x30
   13424:	subs	r7, r7, r5
   13428:	ldr	r5, [sp, #52]	; 0x34
   1342c:	sbcs	r0, r0, r5
   13430:	str	r0, [sp, #156]	; 0x9c
   13434:	mov	r0, #0
   13438:	movwcc	r0, #1
   1343c:	cmp	r0, #0
   13440:	moveq	r6, r2
   13444:	moveq	r4, r3
   13448:	subs	r3, r1, #1
   1344c:	sbc	r0, r9, #0
   13450:	orrs	r1, r1, r9
   13454:	beq	134c0 <__assert_fail@plt+0x1a48>
   13458:	mov	r9, r0
   1345c:	mov	r1, r3
   13460:	ldr	r3, [sp, #156]	; 0x9c
   13464:	lsl	r0, r3, #1
   13468:	orr	r0, r0, r7, lsr #31
   1346c:	lsl	r2, r4, #1
   13470:	orr	r4, r2, r6, lsr #31
   13474:	lsl	r2, r6, #1
   13478:	orr	r6, r2, r3, lsr #31
   1347c:	lsl	r7, r7, #1
   13480:	ldr	r5, [sp, #56]	; 0x38
   13484:	subs	r2, r5, r6
   13488:	sbcs	r2, sl, r4
   1348c:	bcc	13410 <__assert_fail@plt+0x1998>
   13490:	ldr	r2, [sp, #48]	; 0x30
   13494:	subs	r2, r7, r2
   13498:	ldr	r2, [sp, #52]	; 0x34
   1349c:	sbcs	r2, r0, r2
   134a0:	bcc	134b8 <__assert_fail@plt+0x1a40>
   134a4:	ldr	r5, [sp, #56]	; 0x38
   134a8:	eor	r2, r6, r5
   134ac:	eor	r3, r4, sl
   134b0:	orrs	r2, r2, r3
   134b4:	beq	13410 <__assert_fail@plt+0x1998>
   134b8:	str	r0, [sp, #156]	; 0x9c
   134bc:	b	13448 <__assert_fail@plt+0x19d0>
   134c0:	str	r7, [fp, #-80]	; 0xffffffb0
   134c4:	str	r6, [fp, #-72]	; 0xffffffb8
   134c8:	ldr	r3, [sp, #156]	; 0x9c
   134cc:	str	r3, [fp, #-76]	; 0xffffffb4
   134d0:	str	r4, [fp, #-68]	; 0xffffffbc
   134d4:	lsl	r5, r7, #1
   134d8:	str	r5, [fp, #-64]	; 0xffffffc0
   134dc:	str	r4, [sp, #96]	; 0x60
   134e0:	lsl	r0, r4, #1
   134e4:	orr	r8, r0, r6, lsr #31
   134e8:	str	r8, [fp, #-52]	; 0xffffffcc
   134ec:	lsl	r0, r3, #1
   134f0:	mov	r2, r7
   134f4:	orr	r9, r0, r7, lsr #31
   134f8:	str	r9, [fp, #-60]	; 0xffffffc4
   134fc:	mov	r7, sl
   13500:	mov	sl, #0
   13504:	str	r2, [sp, #100]	; 0x64
   13508:	rsbs	r0, r2, r2, lsl #1
   1350c:	sbcs	r0, r9, r3
   13510:	mov	r0, #0
   13514:	movwcc	r0, #1
   13518:	str	r6, [sp, #136]	; 0x88
   1351c:	orr	r0, r0, r6, lsl #1
   13520:	str	r0, [fp, #-56]	; 0xffffffc8
   13524:	umull	r3, r2, ip, lr
   13528:	str	r3, [sp, #152]	; 0x98
   1352c:	ldr	r1, [sp, #144]	; 0x90
   13530:	mla	r2, ip, r1, r2
   13534:	ldr	r1, [sp, #148]	; 0x94
   13538:	mla	r2, r1, lr, r2
   1353c:	str	r2, [sp, #148]	; 0x94
   13540:	sub	r2, fp, #64	; 0x40
   13544:	add	r2, r2, #8
   13548:	str	r2, [sp, #28]
   1354c:	ldr	r4, [sp, #56]	; 0x38
   13550:	subs	r2, r4, r0
   13554:	sbcs	r2, r7, r8
   13558:	ldr	ip, [sp, #52]	; 0x34
   1355c:	ldr	lr, [sp, #48]	; 0x30
   13560:	bcc	13584 <__assert_fail@plt+0x1b0c>
   13564:	subs	r2, r5, lr
   13568:	sbcs	r2, r9, ip
   1356c:	bcc	135c4 <__assert_fail@plt+0x1b4c>
   13570:	eor	r2, r0, r4
   13574:	ldr	r7, [sp, #84]	; 0x54
   13578:	eor	r7, r8, r7
   1357c:	orrs	r2, r2, r7
   13580:	bne	135c4 <__assert_fail@plt+0x1b4c>
   13584:	ldr	r1, [sp, #140]	; 0x8c
   13588:	subs	r2, r1, #1
   1358c:	ldr	r3, [sp, #132]	; 0x84
   13590:	sbc	r7, r3, #0
   13594:	subs	r5, r5, lr
   13598:	str	r5, [fp, #-64]	; 0xffffffc0
   1359c:	sbcs	r6, r9, ip
   135a0:	str	r6, [fp, #-60]	; 0xffffffc4
   135a4:	movwcc	sl, #1
   135a8:	cmp	sl, #0
   135ac:	moveq	r7, r3
   135b0:	moveq	r2, r1
   135b4:	adds	r0, r2, r0
   135b8:	adc	r1, r7, r8
   135bc:	ldr	r2, [sp, #28]
   135c0:	strd	r0, [r2]
   135c4:	str	r4, [fp, #-88]	; 0xffffffa8
   135c8:	str	lr, [fp, #-96]	; 0xffffffa0
   135cc:	ldr	sl, [sp, #84]	; 0x54
   135d0:	str	sl, [fp, #-84]	; 0xffffffac
   135d4:	str	ip, [fp, #-92]	; 0xffffffa4
   135d8:	sub	r1, fp, #80	; 0x50
   135dc:	sub	r2, fp, #48	; 0x30
   135e0:	sub	r0, fp, #64	; 0x40
   135e4:	stm	sp, {r0, r2}
   135e8:	ldr	r0, [sp, #32]
   135ec:	str	r0, [sp, #8]
   135f0:	str	r1, [sp, #12]
   135f4:	sub	r0, fp, #96	; 0x60
   135f8:	ldr	r2, [sp, #152]	; 0x98
   135fc:	ldr	r3, [sp, #148]	; 0x94
   13600:	bl	15684 <__assert_fail@plt+0x3c0c>
   13604:	mov	r1, r0
   13608:	mov	r0, #0
   1360c:	cmp	r1, #0
   13610:	beq	13bb4 <__assert_fail@plt+0x213c>
   13614:	add	r8, sp, #192	; 0xc0
   13618:	str	r8, [sp]
   1361c:	ldr	r5, [sp, #80]	; 0x50
   13620:	mov	r0, r5
   13624:	ldr	r6, [sp, #76]	; 0x4c
   13628:	mov	r1, r6
   1362c:	ldr	r7, [sp, #92]	; 0x5c
   13630:	mov	r2, r7
   13634:	ldr	r4, [sp, #88]	; 0x58
   13638:	mov	r3, r4
   1363c:	bl	12808 <__assert_fail@plt+0xd90>
   13640:	lsrs	r0, r6, #1
   13644:	str	r0, [sp, #72]	; 0x48
   13648:	rrx	r0, r5
   1364c:	str	r0, [sp, #68]	; 0x44
   13650:	lsrs	r0, r4, #1
   13654:	rrx	r1, r7
   13658:	str	r1, [sp, #64]	; 0x40
   1365c:	orr	r0, r0, r5, lsl #31
   13660:	str	r0, [sp, #60]	; 0x3c
   13664:	add	r0, sp, #160	; 0xa0
   13668:	add	r0, r0, #8
   1366c:	str	r0, [sp, #144]	; 0x90
   13670:	add	r0, sp, #176	; 0xb0
   13674:	add	r0, r0, #8
   13678:	str	r0, [sp, #140]	; 0x8c
   1367c:	add	r0, r8, #16
   13680:	str	r0, [sp, #20]
   13684:	add	r0, r8, #8
   13688:	str	r0, [sp, #24]
   1368c:	mov	r0, #2
   13690:	str	r0, [sp, #40]	; 0x28
   13694:	mov	r0, #0
   13698:	str	r0, [sp, #36]	; 0x24
   1369c:	mov	r0, #0
   136a0:	str	r0, [sp, #44]	; 0x2c
   136a4:	ldr	r0, [sp, #24]
   136a8:	ldrd	r0, [r0]
   136ac:	orrs	r0, r0, r1
   136b0:	mov	r4, #1
   136b4:	mov	r8, sl
   136b8:	beq	137f8 <__assert_fail@plt+0x1d80>
   136bc:	ldr	r0, [sp, #192]	; 0xc0
   136c0:	ldr	ip, [sp, #196]	; 0xc4
   136c4:	ubfx	r2, r0, #1, #7
   136c8:	movw	r1, #64414	; 0xfb9e
   136cc:	movt	r1, #1
   136d0:	ldrb	r2, [r1, r2]
   136d4:	umull	r3, r7, r0, r2
   136d8:	rsbs	r3, r3, #2
   136dc:	umull	r3, r6, r3, r2
   136e0:	mla	r7, ip, r2, r7
   136e4:	rsc	r7, r7, #0
   136e8:	mla	r1, r7, r2, r6
   136ec:	str	r1, [sp, #112]	; 0x70
   136f0:	umull	r7, r6, r3, r0
   136f4:	mla	r6, r3, ip, r6
   136f8:	mla	r6, r1, r0, r6
   136fc:	rsbs	r9, r7, #2
   13700:	rsc	r1, r6, #0
   13704:	str	r1, [sp, #132]	; 0x84
   13708:	umull	r5, r1, r3, r9
   1370c:	str	r1, [sp, #124]	; 0x7c
   13710:	umull	r6, r1, r5, r0
   13714:	str	r1, [sp, #120]	; 0x78
   13718:	rsbs	sl, r6, #2
   1371c:	umull	r1, r2, r5, sl
   13720:	str	r2, [sp, #128]	; 0x80
   13724:	ldr	r6, [sp, #92]	; 0x5c
   13728:	umull	lr, r2, r1, r6
   1372c:	str	r2, [sp, #116]	; 0x74
   13730:	str	lr, [sp, #176]	; 0xb0
   13734:	ldr	r2, [sp, #88]	; 0x58
   13738:	ldr	r7, [sp, #116]	; 0x74
   1373c:	mla	lr, r1, r2, r7
   13740:	ldr	r1, [sp, #120]	; 0x78
   13744:	mla	ip, r5, ip, r1
   13748:	ldr	r2, [sp, #132]	; 0x84
   1374c:	ldr	r1, [sp, #124]	; 0x7c
   13750:	mla	r3, r3, r2, r1
   13754:	ldr	r1, [sp, #112]	; 0x70
   13758:	mla	r2, r1, r9, r3
   1375c:	mla	r0, r2, r0, ip
   13760:	rsc	r0, r0, #0
   13764:	ldr	r1, [sp, #128]	; 0x80
   13768:	mla	r0, r5, r0, r1
   1376c:	mla	r0, r2, sl, r0
   13770:	mla	r0, r0, r6, lr
   13774:	str	r0, [sp, #180]	; 0xb4
   13778:	ldr	r0, [sp, #140]	; 0x8c
   1377c:	mov	r1, #0
   13780:	str	r1, [r0]
   13784:	str	r1, [r0, #4]
   13788:	ldr	r0, [sp, #152]	; 0x98
   1378c:	str	r0, [sp]
   13790:	ldr	r0, [sp, #148]	; 0x94
   13794:	str	r0, [sp, #4]
   13798:	sub	r0, fp, #80	; 0x50
   1379c:	str	r0, [sp, #8]
   137a0:	ldr	r0, [sp, #144]	; 0x90
   137a4:	sub	r1, fp, #64	; 0x40
   137a8:	add	r2, sp, #176	; 0xb0
   137ac:	sub	r3, fp, #96	; 0x60
   137b0:	bl	1585c <__assert_fail@plt+0x3de4>
   137b4:	str	r1, [sp, #164]	; 0xa4
   137b8:	str	r0, [sp, #160]	; 0xa0
   137bc:	ldr	r2, [sp, #156]	; 0x9c
   137c0:	eor	r1, r1, r2
   137c4:	ldr	r9, [sp, #100]	; 0x64
   137c8:	eor	r0, r0, r9
   137cc:	orrs	r0, r0, r1
   137d0:	ldr	r7, [sp, #96]	; 0x60
   137d4:	bne	13800 <__assert_fail@plt+0x1d88>
   137d8:	ldr	r0, [sp, #144]	; 0x90
   137dc:	ldrd	r0, [r0]
   137e0:	eor	r1, r1, r7
   137e4:	ldr	r2, [sp, #136]	; 0x88
   137e8:	eor	r0, r0, r2
   137ec:	orrs	r4, r0, r1
   137f0:	movwne	r4, #1
   137f4:	b	13800 <__assert_fail@plt+0x1d88>
   137f8:	ldr	r9, [sp, #100]	; 0x64
   137fc:	ldr	r7, [sp, #96]	; 0x60
   13800:	cmp	r4, #0
   13804:	ldrbne	r0, [sp, #442]	; 0x1ba
   13808:	cmpne	r0, #0
   1380c:	bne	13988 <__assert_fail@plt+0x1f10>
   13810:	cmp	r4, #0
   13814:	bne	13bbc <__assert_fail@plt+0x2144>
   13818:	movw	r0, #63064	; 0xf658
   1381c:	movt	r0, #1
   13820:	ldr	r1, [sp, #44]	; 0x2c
   13824:	ldrb	r0, [r0, r1]
   13828:	ldr	r7, [sp, #40]	; 0x28
   1382c:	adds	r7, r7, r0
   13830:	ldr	r6, [sp, #36]	; 0x24
   13834:	adc	r6, r6, #0
   13838:	mov	r2, #0
   1383c:	ldr	r9, [sp, #56]	; 0x38
   13840:	subs	r0, r7, r9
   13844:	mov	sl, r8
   13848:	sbcs	r0, r6, r8
   1384c:	mov	r0, #0
   13850:	movwcc	r0, #1
   13854:	cmp	r0, #0
   13858:	mov	r4, #127	; 0x7f
   1385c:	movwne	r4, #63	; 0x3f
   13860:	mov	r5, r6
   13864:	movwne	r5, #0
   13868:	mov	r1, r7
   1386c:	movwne	r1, #0
   13870:	mov	r3, r0
   13874:	str	r6, [sp, #36]	; 0x24
   13878:	movne	r3, r6
   1387c:	str	r7, [sp, #40]	; 0x28
   13880:	movne	r0, r7
   13884:	ldr	lr, [sp, #52]	; 0x34
   13888:	ldr	r8, [sp, #48]	; 0x30
   1388c:	b	138cc <__assert_fail@plt+0x1e54>
   13890:	subs	r4, r0, r9
   13894:	sbc	r6, r3, sl
   13898:	subs	r0, r4, #1
   1389c:	sbc	r3, r6, #0
   138a0:	subs	r1, r1, r8
   138a4:	sbcs	r5, r2, lr
   138a8:	mov	r2, #0
   138ac:	movwcc	r2, #1
   138b0:	cmp	r2, #0
   138b4:	moveq	r0, r4
   138b8:	moveq	r3, r6
   138bc:	subs	r4, r7, #1
   138c0:	sbc	r2, ip, #0
   138c4:	orrs	r7, r7, ip
   138c8:	beq	13920 <__assert_fail@plt+0x1ea8>
   138cc:	mov	ip, r2
   138d0:	mov	r7, r4
   138d4:	lsl	r2, r5, #1
   138d8:	orr	r2, r2, r1, lsr #31
   138dc:	lsl	r3, r3, #1
   138e0:	orr	r3, r3, r0, lsr #31
   138e4:	lsr	r5, r5, #31
   138e8:	orr	r0, r5, r0, lsl #1
   138ec:	lsl	r1, r1, #1
   138f0:	subs	r5, r9, r0
   138f4:	sbcs	r5, sl, r3
   138f8:	bcc	13890 <__assert_fail@plt+0x1e18>
   138fc:	subs	r5, r1, r8
   13900:	sbcs	r5, r2, lr
   13904:	bcc	13918 <__assert_fail@plt+0x1ea0>
   13908:	eor	r5, r0, r9
   1390c:	eor	r4, r3, sl
   13910:	orrs	r5, r5, r4
   13914:	beq	13890 <__assert_fail@plt+0x1e18>
   13918:	mov	r5, r2
   1391c:	b	138bc <__assert_fail@plt+0x1e44>
   13920:	ldr	r2, [sp, #28]
   13924:	stm	r2, {r0, r3}
   13928:	str	r5, [fp, #-60]	; 0xffffffc4
   1392c:	str	r1, [fp, #-64]	; 0xffffffc0
   13930:	sub	r0, fp, #64	; 0x40
   13934:	str	r0, [sp]
   13938:	sub	r0, fp, #48	; 0x30
   1393c:	str	r0, [sp, #4]
   13940:	ldr	r0, [sp, #32]
   13944:	str	r0, [sp, #8]
   13948:	sub	r0, fp, #80	; 0x50
   1394c:	str	r0, [sp, #12]
   13950:	sub	r0, fp, #96	; 0x60
   13954:	ldr	r2, [sp, #152]	; 0x98
   13958:	ldr	r3, [sp, #148]	; 0x94
   1395c:	bl	15684 <__assert_fail@plt+0x3c0c>
   13960:	cmp	r0, #0
   13964:	beq	13bc8 <__assert_fail@plt+0x2150>
   13968:	ldr	r0, [sp, #44]	; 0x2c
   1396c:	mov	r1, r0
   13970:	add	r1, r0, #1
   13974:	mov	r0, r1
   13978:	str	r1, [sp, #44]	; 0x2c
   1397c:	cmp	r1, #668	; 0x29c
   13980:	bne	136a4 <__assert_fail@plt+0x1c2c>
   13984:	b	13bd4 <__assert_fail@plt+0x215c>
   13988:	mov	r6, #1
   1398c:	ldr	r5, [sp, #20]
   13990:	ldrd	r0, [r5]
   13994:	eor	r2, r0, #2
   13998:	orrs	r2, r2, r1
   1399c:	bne	139c8 <__assert_fail@plt+0x1f50>
   139a0:	ldr	r0, [sp, #64]	; 0x40
   139a4:	str	r0, [sp, #176]	; 0xb0
   139a8:	ldr	r0, [sp, #60]	; 0x3c
   139ac:	str	r0, [sp, #180]	; 0xb4
   139b0:	ldr	r0, [sp, #72]	; 0x48
   139b4:	ldr	r1, [sp, #68]	; 0x44
   139b8:	ldr	r2, [sp, #140]	; 0x8c
   139bc:	str	r1, [r2]
   139c0:	str	r0, [r2, #4]
   139c4:	b	13b28 <__assert_fail@plt+0x20b0>
   139c8:	str	r6, [sp, #108]	; 0x6c
   139cc:	ubfx	r2, r0, #1, #7
   139d0:	movw	r3, #64414	; 0xfb9e
   139d4:	movt	r3, #1
   139d8:	ldrb	r2, [r3, r2]
   139dc:	umull	r3, r7, r0, r2
   139e0:	rsbs	r3, r3, #2
   139e4:	umull	r6, r3, r3, r2
   139e8:	mla	r7, r1, r2, r7
   139ec:	rsc	r7, r7, #0
   139f0:	mla	sl, r7, r2, r3
   139f4:	umull	r2, r3, r6, r0
   139f8:	mla	r3, r6, r1, r3
   139fc:	mla	r3, sl, r0, r3
   13a00:	rsbs	r4, r2, #2
   13a04:	rsc	r2, r3, #0
   13a08:	str	r2, [sp, #128]	; 0x80
   13a0c:	umull	r2, r3, r6, r4
   13a10:	str	r3, [sp, #120]	; 0x78
   13a14:	umull	r3, r7, r2, r0
   13a18:	str	r7, [sp, #112]	; 0x70
   13a1c:	rsbs	ip, r3, #2
   13a20:	umull	r8, r3, r2, ip
   13a24:	str	r3, [sp, #124]	; 0x7c
   13a28:	ldr	r9, [sp, #92]	; 0x5c
   13a2c:	umull	r3, lr, r8, r9
   13a30:	str	r3, [sp, #132]	; 0x84
   13a34:	ldr	r3, [sp, #88]	; 0x58
   13a38:	str	r8, [sp, #104]	; 0x68
   13a3c:	mla	r3, r8, r3, lr
   13a40:	str	r3, [sp, #116]	; 0x74
   13a44:	ldr	r3, [sp, #112]	; 0x70
   13a48:	mla	r8, r2, r1, r3
   13a4c:	ldr	r3, [sp, #128]	; 0x80
   13a50:	ldr	lr, [sp, #120]	; 0x78
   13a54:	mla	r6, r6, r3, lr
   13a58:	mla	r4, sl, r4, r6
   13a5c:	mla	r3, r4, r0, r8
   13a60:	rsc	r3, r3, #0
   13a64:	ldr	r6, [sp, #124]	; 0x7c
   13a68:	mla	r2, r2, r3, r6
   13a6c:	mla	ip, r4, ip, r2
   13a70:	ldr	r2, [sp, #116]	; 0x74
   13a74:	mla	r6, ip, r9, r2
   13a78:	ldr	lr, [sp, #80]	; 0x50
   13a7c:	subs	r2, lr, r0
   13a80:	ldr	r9, [sp, #76]	; 0x4c
   13a84:	sbcs	r2, r9, r1
   13a88:	bcs	13aac <__assert_fail@plt+0x2034>
   13a8c:	ldr	r0, [sp, #132]	; 0x84
   13a90:	str	r0, [sp, #176]	; 0xb0
   13a94:	str	r6, [sp, #180]	; 0xb4
   13a98:	ldr	r0, [sp, #140]	; 0x8c
   13a9c:	mov	r1, #0
   13aa0:	str	r1, [r0]
   13aa4:	str	r1, [r0, #4]
   13aa8:	b	13b18 <__assert_fail@plt+0x20a0>
   13aac:	ldr	r8, [sp, #132]	; 0x84
   13ab0:	umull	r2, r3, r8, r1
   13ab4:	umlal	r2, r3, r6, r0
   13ab8:	umull	r4, r7, r8, r0
   13abc:	adds	r2, r2, r7
   13ac0:	adc	r3, r3, #0
   13ac4:	umull	r0, r7, r6, r0
   13ac8:	subs	r0, r2, r0
   13acc:	sbcs	r0, r3, r7
   13ad0:	mov	r0, #0
   13ad4:	movwcc	r0, #1
   13ad8:	umull	r1, r2, r6, r1
   13adc:	cmp	r0, #0
   13ae0:	addne	r2, r2, #1
   13ae4:	subs	r0, lr, r3
   13ae8:	sbc	r3, r9, #0
   13aec:	subs	r0, r0, r1
   13af0:	ldr	r7, [sp, #104]	; 0x68
   13af4:	umull	r4, r1, r0, r7
   13af8:	mla	r0, r0, ip, r1
   13afc:	sbc	r1, r3, r2
   13b00:	mla	r1, r1, r7, r0
   13b04:	ldr	r0, [sp, #140]	; 0x8c
   13b08:	str	r4, [r0]
   13b0c:	str	r1, [r0, #4]
   13b10:	str	r6, [sp, #180]	; 0xb4
   13b14:	str	r8, [sp, #176]	; 0xb0
   13b18:	ldr	r8, [sp, #84]	; 0x54
   13b1c:	ldr	r9, [sp, #100]	; 0x64
   13b20:	ldr	r7, [sp, #96]	; 0x60
   13b24:	ldr	r6, [sp, #108]	; 0x6c
   13b28:	ldr	r0, [sp, #152]	; 0x98
   13b2c:	str	r0, [sp]
   13b30:	ldr	r0, [sp, #148]	; 0x94
   13b34:	str	r0, [sp, #4]
   13b38:	sub	r0, fp, #80	; 0x50
   13b3c:	str	r0, [sp, #8]
   13b40:	ldr	r4, [sp, #144]	; 0x90
   13b44:	mov	r0, r4
   13b48:	sub	r1, fp, #64	; 0x40
   13b4c:	add	r2, sp, #176	; 0xb0
   13b50:	sub	r3, fp, #96	; 0x60
   13b54:	bl	1585c <__assert_fail@plt+0x3de4>
   13b58:	str	r1, [sp, #164]	; 0xa4
   13b5c:	str	r0, [sp, #160]	; 0xa0
   13b60:	ldr	r2, [sp, #156]	; 0x9c
   13b64:	eor	r1, r1, r2
   13b68:	ldrd	r2, [r4]
   13b6c:	eor	r3, r3, r7
   13b70:	orr	r1, r1, r3
   13b74:	eor	r0, r0, r9
   13b78:	ldr	r3, [sp, #136]	; 0x88
   13b7c:	eor	r2, r2, r3
   13b80:	orr	r0, r0, r2
   13b84:	orrs	r0, r0, r1
   13b88:	mov	r4, r0
   13b8c:	movwne	r4, #1
   13b90:	cmp	r0, #0
   13b94:	beq	13810 <__assert_fail@plt+0x1d98>
   13b98:	add	r5, r5, #8
   13b9c:	add	r0, r6, #1
   13ba0:	ldrb	r1, [sp, #442]	; 0x1ba
   13ba4:	cmp	r6, r1
   13ba8:	mov	r6, r0
   13bac:	bcc	13990 <__assert_fail@plt+0x1f18>
   13bb0:	b	13810 <__assert_fail@plt+0x1d98>
   13bb4:	sub	sp, fp, #28
   13bb8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13bbc:	mov	r0, #1
   13bc0:	sub	sp, fp, #28
   13bc4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13bc8:	mov	r0, #0
   13bcc:	sub	sp, fp, #28
   13bd0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13bd4:	movw	r1, #51405	; 0xc8cd
   13bd8:	movt	r1, #1
   13bdc:	mov	r0, #0
   13be0:	mov	r2, #5
   13be4:	bl	11748 <dcgettext@plt>
   13be8:	mov	r2, r0
   13bec:	mov	r0, #0
   13bf0:	mov	r1, #0
   13bf4:	bl	11844 <error@plt>
   13bf8:	bl	11a60 <abort@plt>
   13bfc:	push	{r4, r5, r7, r9, fp, lr}
   13c00:	add	fp, sp, #16
   13c04:	sub	sp, sp, #8
   13c08:	mov	r4, r2
   13c0c:	orrs	r1, r2, r3
   13c10:	ldr	r9, [fp, #12]
   13c14:	ldr	r2, [fp, #8]
   13c18:	beq	13c60 <__assert_fail@plt+0x21e8>
   13c1c:	mov	r1, r0
   13c20:	ldr	r5, [r1, #8]!
   13c24:	ldr	r7, [r1, #4]
   13c28:	orrs	r7, r5, r7
   13c2c:	stmeq	r0, {r2, r9}
   13c30:	streq	r4, [r1]
   13c34:	streq	r3, [r1, #4]
   13c38:	subeq	sp, fp, #16
   13c3c:	popeq	{r4, r5, r7, r9, fp, pc}
   13c40:	movw	r0, #51703	; 0xc9f7
   13c44:	movt	r0, #1
   13c48:	movw	r1, #51392	; 0xc8c0
   13c4c:	movt	r1, #1
   13c50:	movw	r3, #51727	; 0xca0f
   13c54:	movt	r3, #1
   13c58:	movw	r2, #558	; 0x22e
   13c5c:	bl	11a78 <__assert_fail@plt>
   13c60:	mov	r1, #1
   13c64:	str	r1, [sp]
   13c68:	mov	r3, r9
   13c6c:	bl	15004 <__assert_fail@plt+0x358c>
   13c70:	sub	sp, fp, #16
   13c74:	pop	{r4, r5, r7, r9, fp, pc}
   13c78:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13c7c:	add	fp, sp, #28
   13c80:	sub	sp, sp, #92	; 0x5c
   13c84:	str	r3, [sp, #24]
   13c88:	str	r2, [sp, #28]
   13c8c:	mov	sl, r0
   13c90:	subs	r0, r0, #2
   13c94:	sbcs	r0, r1, #0
   13c98:	bcc	14240 <__assert_fail@plt+0x27c8>
   13c9c:	mov	r2, r1
   13ca0:	mvn	r0, #63	; 0x3f
   13ca4:	mov	r1, sl
   13ca8:	mov	r9, r2
   13cac:	mov	r3, #0
   13cb0:	str	r3, [fp, #-36]	; 0xffffffdc
   13cb4:	mov	r3, #0
   13cb8:	str	r3, [fp, #-40]	; 0xffffffd8
   13cbc:	mov	r7, #1
   13cc0:	mov	r6, #0
   13cc4:	mov	ip, #0
   13cc8:	mov	lr, #0
   13ccc:	b	13d14 <__assert_fail@plt+0x229c>
   13cd0:	subs	r3, r7, r1
   13cd4:	sbc	r4, r6, r2
   13cd8:	subs	r7, r3, #1
   13cdc:	sbc	r6, r4, #0
   13ce0:	ldr	r5, [fp, #-36]	; 0xffffffdc
   13ce4:	subs	r5, r5, ip
   13ce8:	str	r5, [fp, #-36]	; 0xffffffdc
   13cec:	ldr	r5, [fp, #-40]	; 0xffffffd8
   13cf0:	sbcs	r5, r5, lr
   13cf4:	str	r5, [fp, #-40]	; 0xffffffd8
   13cf8:	mov	r5, #0
   13cfc:	movwcc	r5, #1
   13d00:	cmp	r5, #0
   13d04:	moveq	r7, r3
   13d08:	moveq	r6, r4
   13d0c:	adds	r0, r0, #1
   13d10:	bcs	13d5c <__assert_fail@plt+0x22e4>
   13d14:	lsrs	r5, lr, #1
   13d18:	rrx	ip, ip
   13d1c:	orr	lr, r5, r1, lsl #31
   13d20:	lsrs	r2, r2, #1
   13d24:	rrx	r1, r1
   13d28:	subs	r4, r1, r7
   13d2c:	sbcs	r4, r2, r6
   13d30:	bcc	13cd0 <__assert_fail@plt+0x2258>
   13d34:	eor	r4, r7, r1
   13d38:	eor	r3, r6, r2
   13d3c:	orrs	r3, r4, r3
   13d40:	bne	13d0c <__assert_fail@plt+0x2294>
   13d44:	ldr	r3, [fp, #-36]	; 0xffffffdc
   13d48:	subs	r3, r3, ip
   13d4c:	ldr	r3, [fp, #-40]	; 0xffffffd8
   13d50:	sbcs	r3, r3, lr
   13d54:	bcs	13cd0 <__assert_fail@plt+0x2258>
   13d58:	b	13d0c <__assert_fail@plt+0x2294>
   13d5c:	ldr	r2, [fp, #-36]	; 0xffffffdc
   13d60:	subs	r0, sl, r2
   13d64:	ldr	r3, [fp, #-40]	; 0xffffffd8
   13d68:	sbc	r1, r9, r3
   13d6c:	subs	r0, r2, r0
   13d70:	sbcs	r1, r3, r1
   13d74:	mov	r2, #0
   13d78:	movwcc	r2, #1
   13d7c:	adds	r7, r0, sl
   13d80:	adc	r3, r1, r9
   13d84:	cmp	r2, #0
   13d88:	moveq	r3, r1
   13d8c:	str	r3, [sp, #36]	; 0x24
   13d90:	moveq	r7, r0
   13d94:	eor	r0, sl, #1
   13d98:	orrs	r0, r0, r9
   13d9c:	ldr	lr, [sp, #28]
   13da0:	beq	14260 <__assert_fail@plt+0x27e8>
   13da4:	add	r0, lr, #1
   13da8:	str	r0, [sp, #20]
   13dac:	mov	r0, #1
   13db0:	str	r0, [fp, #-32]	; 0xffffffe0
   13db4:	str	r7, [sp, #60]	; 0x3c
   13db8:	ldr	r8, [sp, #36]	; 0x24
   13dbc:	str	r8, [fp, #-56]	; 0xffffffc8
   13dc0:	mov	r2, r7
   13dc4:	mov	r0, #1
   13dc8:	str	r0, [sp, #40]	; 0x28
   13dcc:	str	r7, [sp, #32]
   13dd0:	subs	r0, lr, sl
   13dd4:	rscs	r0, r9, #0
   13dd8:	bcs	14288 <__assert_fail@plt+0x2810>
   13ddc:	ubfx	r0, sl, #1, #7
   13de0:	movw	r1, #64414	; 0xfb9e
   13de4:	movt	r1, #1
   13de8:	ldrb	r0, [r1, r0]
   13dec:	umull	r1, r3, sl, r0
   13df0:	mla	r3, r9, r0, r3
   13df4:	rsbs	r1, r1, #2
   13df8:	rsc	r3, r3, #0
   13dfc:	str	r3, [fp, #-44]	; 0xffffffd4
   13e00:	umull	r1, r3, r1, r0
   13e04:	str	r3, [sp, #56]	; 0x38
   13e08:	mov	r4, sl
   13e0c:	umull	r7, r5, r1, sl
   13e10:	rsbs	r7, r7, #2
   13e14:	umull	r6, r3, r1, r7
   13e18:	str	r3, [fp, #-52]	; 0xffffffcc
   13e1c:	umull	r3, ip, r6, sl
   13e20:	str	r3, [fp, #-48]	; 0xffffffd0
   13e24:	mla	ip, r6, r9, ip
   13e28:	ldr	sl, [fp, #-44]	; 0xffffffd4
   13e2c:	ldr	r3, [sp, #56]	; 0x38
   13e30:	mla	r0, sl, r0, r3
   13e34:	mla	r3, r1, r9, r5
   13e38:	mla	r3, r0, r4, r3
   13e3c:	rsc	r3, r3, #0
   13e40:	ldr	r5, [fp, #-52]	; 0xffffffcc
   13e44:	mla	r1, r1, r3, r5
   13e48:	mla	r0, r0, r7, r1
   13e4c:	mla	r1, r0, r4, ip
   13e50:	ldr	r3, [fp, #-48]	; 0xffffffd0
   13e54:	rsbs	r3, r3, #2
   13e58:	rsc	r1, r1, #0
   13e5c:	umull	r5, r7, r6, r3
   13e60:	str	r5, [sp, #56]	; 0x38
   13e64:	mla	r1, r6, r1, r7
   13e68:	mla	r1, r0, r3, r1
   13e6c:	subs	r0, r4, lr
   13e70:	str	r0, [sp, #52]	; 0x34
   13e74:	str	r9, [sp, #48]	; 0x30
   13e78:	sbc	r0, r9, #0
   13e7c:	str	r0, [sp, #44]	; 0x2c
   13e80:	mov	sl, r4
   13e84:	ldr	r5, [sp, #40]	; 0x28
   13e88:	ldr	r9, [sp, #32]
   13e8c:	ldr	r3, [sp, #36]	; 0x24
   13e90:	ldr	r7, [fp, #-56]	; 0xffffffc8
   13e94:	str	r1, [fp, #-52]	; 0xffffffcc
   13e98:	str	r5, [sp, #40]	; 0x28
   13e9c:	ldr	r6, [fp, #-32]	; 0xffffffe0
   13ea0:	str	r7, [fp, #-56]	; 0xffffffc8
   13ea4:	b	13ecc <__assert_fail@plt+0x2454>
   13ea8:	ldr	r2, [fp, #-44]	; 0xffffffd4
   13eac:	ldr	r1, [fp, #-48]	; 0xffffffd0
   13eb0:	mov	r3, r6
   13eb4:	subs	r4, r4, #1
   13eb8:	mov	r8, r1
   13ebc:	mov	r6, r4
   13ec0:	ldr	r7, [fp, #-56]	; 0xffffffc8
   13ec4:	ldr	r1, [fp, #-52]	; 0xffffffcc
   13ec8:	beq	13fc8 <__assert_fail@plt+0x2550>
   13ecc:	str	r6, [fp, #-32]	; 0xffffffe0
   13ed0:	str	r8, [fp, #-48]	; 0xffffffd0
   13ed4:	str	r2, [fp, #-44]	; 0xffffffd4
   13ed8:	str	sl, [sp]
   13edc:	ldr	r8, [sp, #48]	; 0x30
   13ee0:	str	r8, [sp, #4]
   13ee4:	ldr	r4, [sp, #56]	; 0x38
   13ee8:	str	r4, [sp, #8]
   13eec:	str	r1, [sp, #12]
   13ef0:	mov	r0, r9
   13ef4:	mov	r5, sl
   13ef8:	mov	sl, r1
   13efc:	mov	r1, r3
   13f00:	mov	r2, r9
   13f04:	bl	15cfc <__assert_fail@plt+0x4284>
   13f08:	ldr	r2, [sp, #52]	; 0x34
   13f0c:	subs	r0, r0, r2
   13f10:	ldr	r2, [sp, #44]	; 0x2c
   13f14:	sbcs	r1, r1, r2
   13f18:	mov	r2, #0
   13f1c:	movwcc	r2, #1
   13f20:	adds	r9, r0, r5
   13f24:	adc	r6, r1, r8
   13f28:	cmp	r2, #0
   13f2c:	moveq	r6, r1
   13f30:	moveq	r9, r0
   13f34:	ldr	r0, [sp, #60]	; 0x3c
   13f38:	subs	r0, r0, r9
   13f3c:	sbcs	r1, r7, r6
   13f40:	stm	sp, {r5, r8}
   13f44:	str	r4, [sp, #8]
   13f48:	str	sl, [sp, #12]
   13f4c:	mov	sl, r5
   13f50:	mov	r7, #0
   13f54:	movwcc	r7, #1
   13f58:	adds	r2, r0, r5
   13f5c:	adc	r3, r1, r8
   13f60:	cmp	r7, #0
   13f64:	moveq	r3, r1
   13f68:	moveq	r2, r0
   13f6c:	ldr	r0, [fp, #-36]	; 0xffffffdc
   13f70:	ldr	r1, [fp, #-40]	; 0xffffffd8
   13f74:	bl	15cfc <__assert_fail@plt+0x4284>
   13f78:	mov	r7, r0
   13f7c:	ldr	r4, [fp, #-32]	; 0xffffffe0
   13f80:	and	r0, r4, #31
   13f84:	cmp	r0, #1
   13f88:	str	r7, [fp, #-36]	; 0xffffffdc
   13f8c:	str	r1, [fp, #-40]	; 0xffffffd8
   13f90:	bne	13ea8 <__assert_fail@plt+0x2430>
   13f94:	mov	r0, r7
   13f98:	mov	r2, sl
   13f9c:	mov	r3, r8
   13fa0:	bl	163b0 <__assert_fail@plt+0x4938>
   13fa4:	eor	r0, r0, #1
   13fa8:	orrs	r0, r0, r1
   13fac:	mov	r2, r9
   13fb0:	mov	r1, r6
   13fb4:	mov	r3, r6
   13fb8:	ldr	r6, [fp, #-44]	; 0xffffffd4
   13fbc:	ldr	r5, [fp, #-48]	; 0xffffffd0
   13fc0:	beq	13eb4 <__assert_fail@plt+0x243c>
   13fc4:	b	14084 <__assert_fail@plt+0x260c>
   13fc8:	ldr	r6, [sp, #40]	; 0x28
   13fcc:	lsl	r5, r6, #1
   13fd0:	cmp	r6, #0
   13fd4:	str	r6, [fp, #-32]	; 0xffffffe0
   13fd8:	mov	r2, r9
   13fdc:	mov	r8, r3
   13fe0:	str	r9, [sp, #60]	; 0x3c
   13fe4:	mov	r7, r3
   13fe8:	beq	13e98 <__assert_fail@plt+0x2420>
   13fec:	str	r5, [fp, #-44]	; 0xffffffd4
   13ff0:	str	r9, [sp, #32]
   13ff4:	mov	r2, r9
   13ff8:	str	r3, [sp, #36]	; 0x24
   13ffc:	mov	r8, r3
   14000:	ldr	r7, [sp, #48]	; 0x30
   14004:	mov	r5, sl
   14008:	ldr	sl, [sp, #56]	; 0x38
   1400c:	ldr	r9, [sp, #52]	; 0x34
   14010:	ldr	r4, [sp, #44]	; 0x2c
   14014:	stm	sp, {r5, r7, sl}
   14018:	str	r1, [sp, #12]
   1401c:	mov	r0, r2
   14020:	mov	r1, r8
   14024:	mov	r3, r8
   14028:	bl	15cfc <__assert_fail@plt+0x4284>
   1402c:	subs	r0, r0, r9
   14030:	sbcs	r1, r1, r4
   14034:	mov	r3, #0
   14038:	movwcc	r3, #1
   1403c:	adds	r2, r0, r5
   14040:	adc	r8, r1, r7
   14044:	cmp	r3, #0
   14048:	moveq	r8, r1
   1404c:	ldr	r1, [fp, #-52]	; 0xffffffcc
   14050:	moveq	r2, r0
   14054:	subs	r6, r6, #1
   14058:	bne	14014 <__assert_fail@plt+0x259c>
   1405c:	ldr	r0, [sp, #40]	; 0x28
   14060:	str	r0, [fp, #-32]	; 0xffffffe0
   14064:	ldr	r0, [sp, #32]
   14068:	str	r0, [sp, #60]	; 0x3c
   1406c:	ldr	r7, [sp, #36]	; 0x24
   14070:	mov	r9, r2
   14074:	mov	r3, r8
   14078:	mov	sl, r5
   1407c:	ldr	r5, [fp, #-44]	; 0xffffffd4
   14080:	b	13e98 <__assert_fail@plt+0x2420>
   14084:	str	r3, [sp, #36]	; 0x24
   14088:	str	r9, [sp, #32]
   1408c:	mov	r8, sl
   14090:	ldr	r9, [sp, #48]	; 0x30
   14094:	ldr	sl, [sp, #44]	; 0x2c
   14098:	stm	sp, {r8, r9}
   1409c:	ldr	r0, [sp, #56]	; 0x38
   140a0:	str	r0, [sp, #8]
   140a4:	ldr	r0, [fp, #-52]	; 0xffffffcc
   140a8:	str	r0, [sp, #12]
   140ac:	mov	r0, r6
   140b0:	mov	r1, r5
   140b4:	mov	r2, r6
   140b8:	mov	r3, r5
   140bc:	bl	15cfc <__assert_fail@plt+0x4284>
   140c0:	ldr	r2, [sp, #52]	; 0x34
   140c4:	subs	r0, r0, r2
   140c8:	sbcs	r1, r1, sl
   140cc:	mov	r2, #0
   140d0:	movwcc	r2, #1
   140d4:	adds	r6, r0, r8
   140d8:	adc	r5, r1, r9
   140dc:	cmp	r2, #0
   140e0:	moveq	r5, r1
   140e4:	moveq	r6, r0
   140e8:	ldr	r0, [sp, #60]	; 0x3c
   140ec:	subs	r2, r0, r6
   140f0:	ldr	r0, [fp, #-56]	; 0xffffffc8
   140f4:	sbcs	r3, r0, r5
   140f8:	mov	r7, #0
   140fc:	movwcc	r7, #1
   14100:	adds	r0, r2, r8
   14104:	adc	r1, r3, r9
   14108:	cmp	r7, #0
   1410c:	moveq	r1, r3
   14110:	moveq	r0, r2
   14114:	mov	r2, r8
   14118:	mov	r3, r9
   1411c:	bl	163b0 <__assert_fail@plt+0x4938>
   14120:	mov	r4, r0
   14124:	eor	r0, r0, #1
   14128:	orrs	r0, r0, r1
   1412c:	beq	14098 <__assert_fail@plt+0x2620>
   14130:	mov	r7, r1
   14134:	eor	r0, r8, r4
   14138:	eor	r1, r9, r1
   1413c:	orrs	r0, r0, r1
   14140:	beq	14224 <__assert_fail@plt+0x27ac>
   14144:	mov	r0, r8
   14148:	mov	r1, r9
   1414c:	mov	r2, r4
   14150:	mov	r3, r7
   14154:	bl	1c344 <__assert_fail@plt+0xa8cc>
   14158:	mov	r8, r0
   1415c:	mov	r9, r1
   14160:	mov	r0, r4
   14164:	mov	r1, r7
   14168:	bl	1515c <__assert_fail@plt+0x36e4>
   1416c:	cmp	r0, #0
   14170:	beq	14190 <__assert_fail@plt+0x2718>
   14174:	mov	r0, #1
   14178:	str	r0, [sp]
   1417c:	ldr	r0, [sp, #24]
   14180:	mov	r2, r4
   14184:	mov	r3, r7
   14188:	bl	15004 <__assert_fail@plt+0x358c>
   1418c:	b	141a4 <__assert_fail@plt+0x272c>
   14190:	mov	r0, r4
   14194:	mov	r1, r7
   14198:	ldr	r2, [sp, #20]
   1419c:	ldr	r3, [sp, #24]
   141a0:	bl	13c78 <__assert_fail@plt+0x2200>
   141a4:	mov	r4, r8
   141a8:	mov	r0, r8
   141ac:	mov	r1, r9
   141b0:	bl	1515c <__assert_fail@plt+0x36e4>
   141b4:	cmp	r0, #0
   141b8:	ldr	r0, [sp, #32]
   141bc:	bne	14268 <__assert_fail@plt+0x27f0>
   141c0:	ldr	r1, [sp, #36]	; 0x24
   141c4:	mov	r2, r4
   141c8:	mov	r3, r9
   141cc:	bl	1c344 <__assert_fail@plt+0xa8cc>
   141d0:	mov	r7, r2
   141d4:	str	r3, [sp, #36]	; 0x24
   141d8:	ldr	r0, [sp, #60]	; 0x3c
   141dc:	ldr	r1, [fp, #-56]	; 0xffffffc8
   141e0:	mov	r2, r4
   141e4:	mov	r3, r9
   141e8:	bl	1c344 <__assert_fail@plt+0xa8cc>
   141ec:	str	r2, [sp, #60]	; 0x3c
   141f0:	str	r3, [fp, #-56]	; 0xffffffc8
   141f4:	mov	r0, r6
   141f8:	mov	r1, r5
   141fc:	mov	r2, r4
   14200:	mov	r3, r9
   14204:	bl	1c344 <__assert_fail@plt+0xa8cc>
   14208:	mov	r8, r3
   1420c:	eor	r0, r4, #1
   14210:	orrs	r0, r0, r9
   14214:	mov	sl, r4
   14218:	ldr	lr, [sp, #28]
   1421c:	bne	13dcc <__assert_fail@plt+0x2354>
   14220:	b	14260 <__assert_fail@plt+0x27e8>
   14224:	rsbs	r0, r8, #1
   14228:	rscs	r0, r9, #0
   1422c:	ldr	r0, [sp, #20]
   14230:	str	r0, [sp, #28]
   14234:	mov	r2, r9
   14238:	mov	sl, r8
   1423c:	bcc	13ca0 <__assert_fail@plt+0x2228>
   14240:	movw	r0, #51455	; 0xc8ff
   14244:	movt	r0, #1
   14248:	movw	r1, #51392	; 0xc8c0
   1424c:	movt	r1, #1
   14250:	movw	r3, #51792	; 0xca50
   14254:	movt	r3, #1
   14258:	movw	r2, #1466	; 0x5ba
   1425c:	bl	11a78 <__assert_fail@plt>
   14260:	sub	sp, fp, #28
   14264:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14268:	mov	r0, #1
   1426c:	str	r0, [sp]
   14270:	ldr	r0, [sp, #24]
   14274:	mov	r2, r4
   14278:	mov	r3, r9
   1427c:	bl	15004 <__assert_fail@plt+0x358c>
   14280:	sub	sp, fp, #28
   14284:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14288:	movw	r0, #51866	; 0xca9a
   1428c:	movt	r0, #1
   14290:	movw	r1, #51392	; 0xc8c0
   14294:	movt	r1, #1
   14298:	movw	r3, #51792	; 0xca50
   1429c:	movt	r3, #1
   142a0:	mov	r2, #1472	; 0x5c0
   142a4:	bl	11a78 <__assert_fail@plt>
   142a8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   142ac:	add	fp, sp, #28
   142b0:	sub	sp, sp, #204	; 0xcc
   142b4:	str	r3, [fp, #-96]	; 0xffffffa0
   142b8:	mov	r7, #0
   142bc:	subs	r3, r0, #2
   142c0:	sbcs	r3, r1, #0
   142c4:	mov	ip, #0
   142c8:	movwcc	ip, #1
   142cc:	str	r0, [fp, #-76]	; 0xffffffb4
   142d0:	rsbs	r0, r0, #1
   142d4:	mov	sl, r1
   142d8:	rscs	r0, r1, #0
   142dc:	mov	r4, #0
   142e0:	movwcc	r4, #1
   142e4:	mov	r3, #127	; 0x7f
   142e8:	cmp	r4, #0
   142ec:	movwne	r3, #63	; 0x3f
   142f0:	mov	lr, #0
   142f4:	mov	r6, #0
   142f8:	mov	r9, r2
   142fc:	b	14344 <__assert_fail@plt+0x28cc>
   14300:	subs	r3, r4, r8
   14304:	sbc	r7, lr, r6
   14308:	subs	r4, r3, #1
   1430c:	sbc	lr, r7, #0
   14310:	subs	ip, ip, r9
   14314:	ldr	r2, [fp, #-96]	; 0xffffffa0
   14318:	sbcs	r6, r5, r2
   1431c:	mov	r2, #0
   14320:	movwcc	r2, #1
   14324:	cmp	r2, #0
   14328:	moveq	r4, r3
   1432c:	moveq	lr, r7
   14330:	mov	r2, r9
   14334:	subs	r3, r1, #1
   14338:	sbc	r7, r0, #0
   1433c:	orrs	r0, r1, r0
   14340:	beq	143b0 <__assert_fail@plt+0x2938>
   14344:	mov	r0, r7
   14348:	mov	r1, r3
   1434c:	lsl	r3, r6, #1
   14350:	orr	r5, r3, ip, lsr #31
   14354:	lsl	r3, lr, #1
   14358:	orr	lr, r3, r4, lsr #31
   1435c:	lsl	r3, r4, #1
   14360:	orr	r4, r3, r6, lsr #31
   14364:	lsl	ip, ip, #1
   14368:	ldr	r8, [fp, #-76]	; 0xffffffb4
   1436c:	subs	r3, r8, r4
   14370:	mov	r6, sl
   14374:	sbcs	r3, sl, lr
   14378:	bcc	14300 <__assert_fail@plt+0x2888>
   1437c:	subs	r3, ip, r2
   14380:	ldr	r3, [fp, #-96]	; 0xffffffa0
   14384:	sbcs	r3, r5, r3
   14388:	bcc	143a8 <__assert_fail@plt+0x2930>
   1438c:	ldr	r8, [fp, #-76]	; 0xffffffb4
   14390:	eor	r3, r4, r8
   14394:	mov	r6, sl
   14398:	eor	r7, lr, sl
   1439c:	orrs	r3, r3, r7
   143a0:	beq	14300 <__assert_fail@plt+0x2888>
   143a4:	mov	r2, r9
   143a8:	mov	r6, r5
   143ac:	b	14334 <__assert_fail@plt+0x28bc>
   143b0:	lsl	r0, lr, #1
   143b4:	orr	r2, r0, r4, lsr #31
   143b8:	str	r2, [fp, #-36]	; 0xffffffdc
   143bc:	lsl	r1, r6, #1
   143c0:	orr	r3, r1, ip, lsr #31
   143c4:	rsbs	r1, ip, ip, lsl #1
   143c8:	str	r6, [sp, #104]	; 0x68
   143cc:	sbcs	r1, r3, r6
   143d0:	mov	r1, #0
   143d4:	movwcc	r1, #1
   143d8:	orr	r1, r1, r4, lsl #1
   143dc:	str	r1, [fp, #-40]	; 0xffffffd8
   143e0:	lsl	r8, ip, #1
   143e4:	ldr	r6, [fp, #-76]	; 0xffffffb4
   143e8:	rsbs	r0, r6, #0
   143ec:	rsc	r7, sl, #0
   143f0:	subs	r6, r6, r1
   143f4:	sbcs	r6, sl, r2
   143f8:	bcc	14434 <__assert_fail@plt+0x29bc>
   143fc:	str	r8, [sp, #112]	; 0x70
   14400:	subs	r6, r8, r9
   14404:	str	r3, [sp, #116]	; 0x74
   14408:	ldr	r6, [fp, #-96]	; 0xffffffa0
   1440c:	sbcs	r6, r3, r6
   14410:	bcc	14f38 <__assert_fail@plt+0x34c0>
   14414:	ldr	r5, [fp, #-76]	; 0xffffffb4
   14418:	eor	r6, r1, r5
   1441c:	eor	r5, r2, sl
   14420:	orrs	r6, r6, r5
   14424:	ldr	r5, [fp, #8]
   14428:	ldr	r3, [sp, #116]	; 0x74
   1442c:	ldr	r8, [sp, #112]	; 0x70
   14430:	bne	14f4c <__assert_fail@plt+0x34d4>
   14434:	subs	r6, r0, #1
   14438:	sbc	r5, r7, #0
   1443c:	subs	r8, r8, r9
   14440:	str	r8, [sp, #112]	; 0x70
   14444:	ldr	r8, [fp, #-96]	; 0xffffffa0
   14448:	sbcs	r3, r3, r8
   1444c:	str	r3, [sp, #116]	; 0x74
   14450:	mov	r3, #0
   14454:	movwcc	r3, #1
   14458:	cmp	r3, #0
   1445c:	moveq	r5, r7
   14460:	mov	r7, r9
   14464:	mov	r3, r8
   14468:	moveq	r6, r0
   1446c:	adds	r1, r6, r1
   14470:	str	r1, [fp, #-40]	; 0xffffffd8
   14474:	adc	r0, r5, r2
   14478:	ldr	r5, [fp, #8]
   1447c:	mov	r2, r5
   14480:	mov	r5, sl
   14484:	str	r0, [fp, #-36]	; 0xffffffdc
   14488:	ldr	r0, [fp, #-40]	; 0xffffffd8
   1448c:	ldr	r1, [fp, #-36]	; 0xffffffdc
   14490:	str	r1, [fp, #-44]	; 0xffffffd4
   14494:	str	r0, [fp, #-48]	; 0xffffffd0
   14498:	str	r1, [fp, #-52]	; 0xffffffcc
   1449c:	str	r0, [fp, #-56]	; 0xffffffc8
   144a0:	eor	r0, r7, #1
   144a4:	mov	r8, r3
   144a8:	orrs	r0, r0, r3
   144ac:	ldreq	r0, [fp, #-76]	; 0xffffffb4
   144b0:	orrseq	r0, r0, r5
   144b4:	beq	14f84 <__assert_fail@plt+0x350c>
   144b8:	str	lr, [sp, #92]	; 0x5c
   144bc:	str	r4, [sp, #96]	; 0x60
   144c0:	str	ip, [sp, #100]	; 0x64
   144c4:	add	r0, r2, #1
   144c8:	str	r0, [sp, #52]	; 0x34
   144cc:	ldr	r1, [sp, #112]	; 0x70
   144d0:	str	r1, [sp, #80]	; 0x50
   144d4:	ldr	r0, [sp, #116]	; 0x74
   144d8:	str	r0, [sp, #76]	; 0x4c
   144dc:	str	r1, [fp, #-104]	; 0xffffff98
   144e0:	str	r0, [fp, #-108]	; 0xffffff94
   144e4:	mov	r0, #1
   144e8:	str	r0, [sp, #108]	; 0x6c
   144ec:	mov	r0, #1
   144f0:	str	r0, [sp, #72]	; 0x48
   144f4:	mov	r4, r5
   144f8:	ldr	r1, [fp, #-76]	; 0xffffffb4
   144fc:	str	r1, [fp, #-76]	; 0xffffffb4
   14500:	str	r4, [fp, #-84]	; 0xffffffac
   14504:	str	r7, [fp, #-80]	; 0xffffffb0
   14508:	str	r8, [fp, #-96]	; 0xffffffa0
   1450c:	ubfx	r0, r7, #1, #7
   14510:	movw	r1, #64414	; 0xfb9e
   14514:	movt	r1, #1
   14518:	ldrb	r0, [r1, r0]
   1451c:	umull	r1, r2, r7, r0
   14520:	mla	r2, r8, r0, r2
   14524:	rsbs	r1, r1, #2
   14528:	rsc	r9, r2, #0
   1452c:	umull	r1, r3, r1, r0
   14530:	mov	r8, r4
   14534:	umull	r6, r5, r1, r7
   14538:	rsbs	r6, r6, #2
   1453c:	umull	r4, ip, r1, r6
   14540:	umull	lr, r2, r4, r7
   14544:	ldr	r7, [fp, #-96]	; 0xffffffa0
   14548:	mla	r2, r4, r7, r2
   1454c:	ldr	r7, [fp, #-80]	; 0xffffffb0
   14550:	mla	r0, r9, r0, r3
   14554:	ldr	sl, [fp, #-96]	; 0xffffffa0
   14558:	mla	r3, r1, sl, r5
   1455c:	mla	r3, r0, r7, r3
   14560:	rsc	r3, r3, #0
   14564:	mla	r1, r1, r3, ip
   14568:	mla	r0, r0, r6, r1
   1456c:	mla	r1, r0, r7, r2
   14570:	rsbs	r2, lr, #2
   14574:	rsc	r1, r1, #0
   14578:	umull	r7, r3, r4, r2
   1457c:	str	r7, [fp, #-88]	; 0xffffffa8
   14580:	mla	r1, r4, r1, r3
   14584:	mla	r0, r0, r2, r1
   14588:	str	r0, [fp, #-92]	; 0xffffffa4
   1458c:	ldr	r0, [fp, #-76]	; 0xffffffb4
   14590:	rsbs	r0, r0, #0
   14594:	str	r0, [sp, #64]	; 0x40
   14598:	rsc	r0, r8, #0
   1459c:	str	r0, [sp, #60]	; 0x3c
   145a0:	ldr	r2, [fp, #-56]	; 0xffffffc8
   145a4:	ldr	r3, [fp, #-52]	; 0xffffffcc
   145a8:	ldr	r0, [fp, #-48]	; 0xffffffd0
   145ac:	str	r0, [sp, #88]	; 0x58
   145b0:	ldr	r0, [fp, #-44]	; 0xffffffd4
   145b4:	str	r0, [sp, #84]	; 0x54
   145b8:	ldr	r0, [fp, #-40]	; 0xffffffd8
   145bc:	str	r0, [fp, #-112]	; 0xffffff90
   145c0:	ldr	r0, [fp, #-36]	; 0xffffffdc
   145c4:	str	r0, [fp, #-100]	; 0xffffff9c
   145c8:	ldr	ip, [sp, #116]	; 0x74
   145cc:	ldr	lr, [sp, #112]	; 0x70
   145d0:	ldr	r4, [fp, #-104]	; 0xffffff98
   145d4:	ldr	r7, [fp, #-108]	; 0xffffff94
   145d8:	ldr	r5, [sp, #108]	; 0x6c
   145dc:	ldr	r8, [sp, #72]	; 0x48
   145e0:	str	r8, [sp, #56]	; 0x38
   145e4:	ldr	r6, [fp, #-112]	; 0xffffff90
   145e8:	b	14618 <__assert_fail@plt+0x2ba0>
   145ec:	ldr	r2, [sp, #72]	; 0x48
   145f0:	ldr	r3, [sp, #68]	; 0x44
   145f4:	ldr	r0, [fp, #-104]	; 0xffffff98
   145f8:	ldr	r1, [fp, #-108]	; 0xffffff94
   145fc:	ldr	ip, [sp, #116]	; 0x74
   14600:	ldr	lr, [sp, #112]	; 0x70
   14604:	ldr	r6, [fp, #-112]	; 0xffffff90
   14608:	subs	r5, r5, #1
   1460c:	mov	r4, r0
   14610:	mov	r7, r1
   14614:	beq	14868 <__assert_fail@plt+0x2df0>
   14618:	str	r5, [sp, #108]	; 0x6c
   1461c:	str	r3, [sp, #68]	; 0x44
   14620:	str	r2, [sp, #72]	; 0x48
   14624:	str	r7, [fp, #-108]	; 0xffffff94
   14628:	str	r4, [fp, #-104]	; 0xffffff98
   1462c:	ldr	r8, [fp, #-80]	; 0xffffffb0
   14630:	str	r8, [sp, #32]
   14634:	str	sl, [sp, #36]	; 0x24
   14638:	ldr	r0, [fp, #-88]	; 0xffffffa8
   1463c:	str	r0, [sp, #40]	; 0x28
   14640:	ldr	r0, [fp, #-92]	; 0xffffffa4
   14644:	str	r0, [sp, #44]	; 0x2c
   14648:	str	lr, [sp]
   1464c:	str	ip, [sp, #4]
   14650:	str	r6, [sp, #8]
   14654:	ldr	r3, [fp, #-100]	; 0xffffff9c
   14658:	str	r3, [sp, #12]
   1465c:	str	lr, [sp, #16]
   14660:	str	ip, [sp, #20]
   14664:	ldr	r4, [fp, #-76]	; 0xffffffb4
   14668:	str	r4, [sp, #24]
   1466c:	ldr	r1, [fp, #-84]	; 0xffffffac
   14670:	str	r1, [sp, #28]
   14674:	sub	r0, fp, #72	; 0x48
   14678:	mov	r2, r6
   1467c:	mov	r6, r1
   14680:	bl	15de4 <__assert_fail@plt+0x436c>
   14684:	ldr	r2, [fp, #-72]	; 0xffffffb8
   14688:	ldr	r3, [fp, #-68]	; 0xffffffbc
   1468c:	ldr	r7, [fp, #8]
   14690:	adds	ip, r0, r7
   14694:	adcs	r9, r1, #0
   14698:	adcs	r5, r2, #0
   1469c:	mov	r7, sl
   146a0:	adc	sl, r3, #0
   146a4:	subs	r0, r4, r5
   146a8:	sbcs	r0, r6, sl
   146ac:	ldr	r2, [sp, #96]	; 0x60
   146b0:	ldr	r3, [sp, #92]	; 0x5c
   146b4:	ldr	lr, [sp, #104]	; 0x68
   146b8:	bcc	146e0 <__assert_fail@plt+0x2c68>
   146bc:	subs	r0, ip, r8
   146c0:	sbcs	r0, r9, r7
   146c4:	bcc	14714 <__assert_fail@plt+0x2c9c>
   146c8:	ldr	r0, [fp, #-76]	; 0xffffffb4
   146cc:	eor	r0, r5, r0
   146d0:	eor	r1, sl, r6
   146d4:	orrs	r0, r0, r1
   146d8:	ldr	r7, [fp, #-96]	; 0xffffffa0
   146dc:	bne	14714 <__assert_fail@plt+0x2c9c>
   146e0:	ldr	r6, [sp, #64]	; 0x40
   146e4:	subs	r0, r6, #1
   146e8:	ldr	r4, [sp, #60]	; 0x3c
   146ec:	sbc	r1, r4, #0
   146f0:	subs	ip, ip, r8
   146f4:	sbcs	r9, r9, r7
   146f8:	mov	r7, #0
   146fc:	movwcc	r7, #1
   14700:	cmp	r7, #0
   14704:	moveq	r1, r4
   14708:	moveq	r0, r6
   1470c:	adds	r5, r0, r5
   14710:	adc	sl, r1, sl
   14714:	str	r5, [fp, #-112]	; 0xffffff90
   14718:	ldr	r0, [sp, #88]	; 0x58
   1471c:	subs	r6, r0, r5
   14720:	ldr	r0, [sp, #84]	; 0x54
   14724:	sbc	r7, r0, sl
   14728:	subs	r5, r6, #1
   1472c:	sbc	r0, r7, #0
   14730:	str	ip, [sp, #112]	; 0x70
   14734:	ldr	r1, [sp, #80]	; 0x50
   14738:	subs	ip, r1, ip
   1473c:	str	r9, [sp, #116]	; 0x74
   14740:	ldr	r1, [sp, #76]	; 0x4c
   14744:	sbcs	r1, r1, r9
   14748:	mov	r4, #0
   1474c:	movwcc	r4, #1
   14750:	cmp	r4, #0
   14754:	moveq	r5, r6
   14758:	moveq	r0, r7
   1475c:	cmn	r0, #1
   14760:	ble	14778 <__assert_fail@plt+0x2d00>
   14764:	ldr	r6, [fp, #-80]	; 0xffffffb0
   14768:	ldr	r9, [fp, #-76]	; 0xffffffb4
   1476c:	ldr	r8, [fp, #-84]	; 0xffffffac
   14770:	ldr	r7, [fp, #-96]	; 0xffffffa0
   14774:	b	147a0 <__assert_fail@plt+0x2d28>
   14778:	ldr	r9, [fp, #-76]	; 0xffffffb4
   1477c:	adds	r4, r5, r9
   14780:	ldr	r8, [fp, #-84]	; 0xffffffac
   14784:	adc	r0, r0, r8
   14788:	ldr	r6, [fp, #-80]	; 0xffffffb0
   1478c:	adds	ip, ip, r6
   14790:	ldr	r7, [fp, #-96]	; 0xffffffa0
   14794:	adcs	r1, r1, r7
   14798:	adcs	r5, r4, #0
   1479c:	adc	r0, r0, #0
   147a0:	str	sl, [fp, #-100]	; 0xffffff9c
   147a4:	str	r6, [sp, #32]
   147a8:	str	r7, [sp, #36]	; 0x24
   147ac:	ldr	r4, [fp, #-88]	; 0xffffffa8
   147b0:	str	r4, [sp, #40]	; 0x28
   147b4:	ldr	r4, [fp, #-92]	; 0xffffffa4
   147b8:	str	r4, [sp, #44]	; 0x2c
   147bc:	ldr	r4, [sp, #100]	; 0x64
   147c0:	stm	sp, {r4, lr}
   147c4:	str	r5, [sp, #8]
   147c8:	str	r0, [sp, #12]
   147cc:	str	ip, [sp, #16]
   147d0:	str	r1, [sp, #20]
   147d4:	str	r9, [sp, #24]
   147d8:	str	r8, [sp, #28]
   147dc:	sub	r0, fp, #72	; 0x48
   147e0:	bl	15de4 <__assert_fail@plt+0x436c>
   147e4:	ldr	r5, [sp, #108]	; 0x6c
   147e8:	and	r4, r5, #31
   147ec:	ldr	r2, [fp, #-72]	; 0xffffffb8
   147f0:	ldr	r3, [fp, #-68]	; 0xffffffbc
   147f4:	cmp	r4, #1
   147f8:	mov	sl, r7
   147fc:	str	r0, [sp, #100]	; 0x64
   14800:	str	r2, [sp, #96]	; 0x60
   14804:	str	r3, [sp, #92]	; 0x5c
   14808:	str	r1, [sp, #104]	; 0x68
   1480c:	bne	145ec <__assert_fail@plt+0x2b74>
   14810:	mov	r4, r6
   14814:	stm	sp, {r0, r1, r9}
   14818:	str	r8, [sp, #12]
   1481c:	str	r6, [sp, #16]
   14820:	str	sl, [sp, #20]
   14824:	sub	r0, fp, #64	; 0x40
   14828:	bl	1644c <__assert_fail@plt+0x49d4>
   1482c:	eor	r0, r0, #1
   14830:	orrs	r0, r0, r1
   14834:	ldr	ip, [sp, #116]	; 0x74
   14838:	ldr	lr, [sp, #112]	; 0x70
   1483c:	ldr	r6, [fp, #-112]	; 0xffffff90
   14840:	bne	149e0 <__assert_fail@plt+0x2f68>
   14844:	ldr	r0, [fp, #-64]	; 0xffffffc0
   14848:	ldr	r1, [fp, #-60]	; 0xffffffc4
   1484c:	orrs	r0, r0, r1
   14850:	mov	r2, r6
   14854:	ldr	r3, [fp, #-100]	; 0xffffff9c
   14858:	mov	r0, lr
   1485c:	mov	r1, ip
   14860:	beq	14608 <__assert_fail@plt+0x2b90>
   14864:	b	149e0 <__assert_fail@plt+0x2f68>
   14868:	mov	r0, r6
   1486c:	ldr	r6, [sp, #56]	; 0x38
   14870:	lsl	r8, r6, #1
   14874:	cmp	r6, #0
   14878:	mov	r2, r0
   1487c:	ldr	r1, [fp, #-100]	; 0xffffff9c
   14880:	mov	r3, r1
   14884:	str	r0, [sp, #88]	; 0x58
   14888:	str	r1, [sp, #84]	; 0x54
   1488c:	mov	r5, r6
   14890:	mov	r4, lr
   14894:	mov	r7, ip
   14898:	str	lr, [sp, #80]	; 0x50
   1489c:	str	ip, [sp, #76]	; 0x4c
   148a0:	beq	145e0 <__assert_fail@plt+0x2b68>
   148a4:	str	r8, [sp, #72]	; 0x48
   148a8:	mov	sl, r6
   148ac:	ldr	r2, [fp, #-112]	; 0xffffff90
   148b0:	ldr	r3, [fp, #-100]	; 0xffffff9c
   148b4:	mov	r4, lr
   148b8:	mov	r7, ip
   148bc:	ldr	r6, [fp, #-84]	; 0xffffffac
   148c0:	b	14910 <__assert_fail@plt+0x2e98>
   148c4:	mov	lr, r6
   148c8:	ldr	r6, [sp, #64]	; 0x40
   148cc:	subs	r0, r6, #1
   148d0:	ldr	r5, [sp, #60]	; 0x3c
   148d4:	sbc	r1, r5, #0
   148d8:	subs	r4, r4, r9
   148dc:	sbcs	r7, r7, r8
   148e0:	mov	ip, r3
   148e4:	mov	r3, #0
   148e8:	movwcc	r3, #1
   148ec:	cmp	r3, #0
   148f0:	mov	r3, ip
   148f4:	moveq	r1, r5
   148f8:	moveq	r0, r6
   148fc:	mov	r6, lr
   14900:	adds	r2, r0, r2
   14904:	adc	r3, r1, ip
   14908:	subs	sl, sl, #1
   1490c:	beq	149a4 <__assert_fail@plt+0x2f2c>
   14910:	ldr	r9, [fp, #-80]	; 0xffffffb0
   14914:	str	r9, [sp, #32]
   14918:	ldr	r8, [fp, #-96]	; 0xffffffa0
   1491c:	str	r8, [sp, #36]	; 0x24
   14920:	ldr	r0, [fp, #-88]	; 0xffffffa8
   14924:	str	r0, [sp, #40]	; 0x28
   14928:	ldr	r0, [fp, #-92]	; 0xffffffa4
   1492c:	str	r0, [sp, #44]	; 0x2c
   14930:	stm	sp, {r4, r7}
   14934:	add	r0, sp, #8
   14938:	stm	r0, {r2, r3, r4, r7}
   1493c:	ldr	r5, [fp, #-76]	; 0xffffffb4
   14940:	str	r5, [sp, #24]
   14944:	str	r6, [sp, #28]
   14948:	sub	r0, fp, #72	; 0x48
   1494c:	bl	15de4 <__assert_fail@plt+0x436c>
   14950:	ldr	r2, [fp, #-72]	; 0xffffffb8
   14954:	ldr	r3, [fp, #-68]	; 0xffffffbc
   14958:	ldr	r7, [fp, #8]
   1495c:	adds	r4, r0, r7
   14960:	adcs	r7, r1, #0
   14964:	adcs	r2, r2, #0
   14968:	adc	r3, r3, #0
   1496c:	subs	r0, r5, r2
   14970:	sbcs	r0, r6, r3
   14974:	bcc	148c4 <__assert_fail@plt+0x2e4c>
   14978:	subs	r0, r4, r9
   1497c:	sbcs	r0, r7, r8
   14980:	bcc	14908 <__assert_fail@plt+0x2e90>
   14984:	ldr	r0, [fp, #-76]	; 0xffffffb4
   14988:	eor	r0, r2, r0
   1498c:	eor	r1, r3, r6
   14990:	orrs	r0, r0, r1
   14994:	ldr	r9, [fp, #-80]	; 0xffffffb0
   14998:	ldr	r8, [fp, #-96]	; 0xffffffa0
   1499c:	beq	148c4 <__assert_fail@plt+0x2e4c>
   149a0:	b	14908 <__assert_fail@plt+0x2e90>
   149a4:	ldr	r0, [fp, #-112]	; 0xffffff90
   149a8:	str	r0, [sp, #88]	; 0x58
   149ac:	ldr	r0, [fp, #-100]	; 0xffffff9c
   149b0:	str	r0, [sp, #84]	; 0x54
   149b4:	str	r2, [fp, #-112]	; 0xffffff90
   149b8:	str	r3, [fp, #-100]	; 0xffffff9c
   149bc:	ldr	r5, [sp, #56]	; 0x38
   149c0:	ldr	r0, [sp, #112]	; 0x70
   149c4:	str	r0, [sp, #80]	; 0x50
   149c8:	ldr	r0, [sp, #116]	; 0x74
   149cc:	str	r0, [sp, #76]	; 0x4c
   149d0:	mov	lr, r4
   149d4:	mov	ip, r7
   149d8:	ldr	sl, [fp, #-96]	; 0xffffffa0
   149dc:	b	145dc <__assert_fail@plt+0x2b64>
   149e0:	str	r6, [fp, #-40]	; 0xffffffd8
   149e4:	ldr	r0, [sp, #88]	; 0x58
   149e8:	str	r0, [fp, #-48]	; 0xffffffd0
   149ec:	ldr	r2, [sp, #72]	; 0x48
   149f0:	str	r2, [fp, #-56]	; 0xffffffc8
   149f4:	ldr	r0, [fp, #-100]	; 0xffffff9c
   149f8:	str	r0, [fp, #-36]	; 0xffffffdc
   149fc:	ldr	r0, [sp, #84]	; 0x54
   14a00:	str	r0, [fp, #-44]	; 0xffffffd4
   14a04:	ldr	r3, [sp, #68]	; 0x44
   14a08:	str	r3, [fp, #-52]	; 0xffffffcc
   14a0c:	b	14a70 <__assert_fail@plt+0x2ff8>
   14a10:	adds	r2, r2, r9
   14a14:	ldr	r6, [fp, #-84]	; 0xffffffac
   14a18:	adc	r3, r3, r6
   14a1c:	ldr	r4, [fp, #-80]	; 0xffffffb0
   14a20:	adds	r0, r0, r4
   14a24:	adcs	r1, r1, r8
   14a28:	adcs	r2, r2, #0
   14a2c:	adc	r3, r3, #0
   14a30:	stm	sp, {r0, r1, r9}
   14a34:	str	r6, [sp, #12]
   14a38:	str	r4, [sp, #16]
   14a3c:	str	r8, [sp, #20]
   14a40:	sub	r0, fp, #64	; 0x40
   14a44:	bl	1644c <__assert_fail@plt+0x49d4>
   14a48:	mov	r6, r0
   14a4c:	mov	r7, r1
   14a50:	eor	r0, r0, #1
   14a54:	orrs	r0, r0, r1
   14a58:	ldr	r9, [fp, #-64]	; 0xffffffc0
   14a5c:	ldr	r8, [fp, #-60]	; 0xffffffc4
   14a60:	mov	r2, r5
   14a64:	mov	r3, sl
   14a68:	orrseq	r0, r9, r8
   14a6c:	bne	14b9c <__assert_fail@plt+0x3124>
   14a70:	str	r4, [sp, #32]
   14a74:	ldr	r5, [fp, #-96]	; 0xffffffa0
   14a78:	mov	r8, r5
   14a7c:	str	r5, [sp, #36]	; 0x24
   14a80:	ldr	r0, [fp, #-88]	; 0xffffffa8
   14a84:	str	r0, [sp, #40]	; 0x28
   14a88:	ldr	r0, [fp, #-92]	; 0xffffffa4
   14a8c:	str	r0, [sp, #44]	; 0x2c
   14a90:	ldr	r0, [fp, #-104]	; 0xffffff98
   14a94:	str	r0, [sp]
   14a98:	ldr	r1, [fp, #-108]	; 0xffffff94
   14a9c:	stmib	sp, {r1, r2, r3}
   14aa0:	str	r0, [sp, #16]
   14aa4:	str	r1, [sp, #20]
   14aa8:	ldr	r9, [fp, #-76]	; 0xffffffb4
   14aac:	str	r9, [sp, #24]
   14ab0:	ldr	r4, [fp, #-84]	; 0xffffffac
   14ab4:	str	r4, [sp, #28]
   14ab8:	sub	r0, fp, #72	; 0x48
   14abc:	bl	15de4 <__assert_fail@plt+0x436c>
   14ac0:	ldr	r2, [fp, #-72]	; 0xffffffb8
   14ac4:	ldr	r3, [fp, #-68]	; 0xffffffbc
   14ac8:	ldr	r7, [fp, #8]
   14acc:	adds	ip, r0, r7
   14ad0:	ldr	r7, [fp, #-80]	; 0xffffffb0
   14ad4:	adcs	lr, r1, #0
   14ad8:	adcs	r5, r2, #0
   14adc:	adc	r3, r3, #0
   14ae0:	subs	r0, r9, r5
   14ae4:	sbcs	r0, r4, r3
   14ae8:	bcc	14b0c <__assert_fail@plt+0x3094>
   14aec:	subs	r0, ip, r7
   14af0:	sbcs	r0, lr, r8
   14af4:	bcc	14b40 <__assert_fail@plt+0x30c8>
   14af8:	eor	r0, r5, r9
   14afc:	ldr	r1, [fp, #-84]	; 0xffffffac
   14b00:	eor	r1, r3, r1
   14b04:	orrs	r0, r0, r1
   14b08:	bne	14b40 <__assert_fail@plt+0x30c8>
   14b0c:	ldr	r4, [sp, #64]	; 0x40
   14b10:	subs	r0, r4, #1
   14b14:	ldr	r6, [sp, #60]	; 0x3c
   14b18:	sbc	r1, r6, #0
   14b1c:	subs	ip, ip, r7
   14b20:	sbcs	lr, lr, r8
   14b24:	mov	r2, #0
   14b28:	movwcc	r2, #1
   14b2c:	cmp	r2, #0
   14b30:	moveq	r1, r6
   14b34:	moveq	r0, r4
   14b38:	adds	r5, r0, r5
   14b3c:	adc	r3, r1, r3
   14b40:	ldr	r0, [sp, #88]	; 0x58
   14b44:	subs	r7, r0, r5
   14b48:	mov	sl, r3
   14b4c:	ldr	r0, [sp, #84]	; 0x54
   14b50:	sbc	r6, r0, r3
   14b54:	subs	r2, r7, #1
   14b58:	sbc	r3, r6, #0
   14b5c:	ldr	r0, [sp, #80]	; 0x50
   14b60:	subs	r0, r0, ip
   14b64:	ldr	r1, [sp, #76]	; 0x4c
   14b68:	sbcs	r1, r1, lr
   14b6c:	mov	r4, #0
   14b70:	movwcc	r4, #1
   14b74:	cmp	r4, #0
   14b78:	moveq	r2, r7
   14b7c:	moveq	r3, r6
   14b80:	cmn	r3, #1
   14b84:	str	ip, [fp, #-104]	; 0xffffff98
   14b88:	str	lr, [fp, #-108]	; 0xffffff94
   14b8c:	ble	14a10 <__assert_fail@plt+0x2f98>
   14b90:	ldr	r4, [fp, #-80]	; 0xffffffb0
   14b94:	ldr	r6, [fp, #-84]	; 0xffffffac
   14b98:	b	14a30 <__assert_fail@plt+0x2fb8>
   14b9c:	str	r2, [fp, #-56]	; 0xffffffc8
   14ba0:	str	r3, [fp, #-52]	; 0xffffffcc
   14ba4:	orrs	r0, r9, r8
   14ba8:	bne	14e04 <__assert_fail@plt+0x338c>
   14bac:	str	r2, [sp, #72]	; 0x48
   14bb0:	ubfx	r0, r6, #1, #7
   14bb4:	movw	r1, #64414	; 0xfb9e
   14bb8:	movt	r1, #1
   14bbc:	ldrb	r0, [r1, r0]
   14bc0:	umull	r1, r2, r6, r0
   14bc4:	rsbs	r1, r1, #2
   14bc8:	umull	r1, r3, r1, r0
   14bcc:	mla	r2, r7, r0, r2
   14bd0:	rsc	r2, r2, #0
   14bd4:	mla	r2, r2, r0, r3
   14bd8:	umull	r0, r3, r1, r6
   14bdc:	mla	r3, r1, r7, r3
   14be0:	mla	r3, r2, r6, r3
   14be4:	mov	lr, r4
   14be8:	str	r7, [fp, #-88]	; 0xffffffa8
   14bec:	rsbs	r7, r0, #2
   14bf0:	rsc	r0, r3, #0
   14bf4:	str	r0, [sp, #68]	; 0x44
   14bf8:	umull	r4, r9, r1, r7
   14bfc:	umull	r3, r8, r4, r6
   14c00:	rsbs	r3, r3, #2
   14c04:	umull	r0, r5, r4, r3
   14c08:	str	r5, [sp, #64]	; 0x40
   14c0c:	umull	r5, ip, r0, lr
   14c10:	str	r5, [fp, #-92]	; 0xffffffa4
   14c14:	ldr	r5, [fp, #-96]	; 0xffffffa0
   14c18:	str	r0, [sp, #60]	; 0x3c
   14c1c:	mla	ip, r0, r5, ip
   14c20:	ldr	r5, [fp, #-88]	; 0xffffffa8
   14c24:	mla	r0, r4, r5, r8
   14c28:	ldr	r5, [sp, #68]	; 0x44
   14c2c:	mla	r1, r1, r5, r9
   14c30:	mla	r1, r2, r7, r1
   14c34:	ldr	r7, [fp, #-88]	; 0xffffffa8
   14c38:	mla	r0, r1, r6, r0
   14c3c:	rsc	r0, r0, #0
   14c40:	ldr	r2, [sp, #64]	; 0x40
   14c44:	mla	r0, r4, r0, r2
   14c48:	mla	r9, r1, r3, r0
   14c4c:	mla	r0, r9, lr, ip
   14c50:	str	r0, [fp, #-96]	; 0xffffffa0
   14c54:	mov	r0, #0
   14c58:	str	r0, [fp, #-80]	; 0xffffffb0
   14c5c:	ldr	r4, [fp, #-76]	; 0xffffffb4
   14c60:	subs	r0, r4, r6
   14c64:	ldr	r5, [fp, #-84]	; 0xffffffac
   14c68:	sbcs	r0, r5, r7
   14c6c:	mov	r8, #0
   14c70:	bcc	14ce0 <__assert_fail@plt+0x3268>
   14c74:	ldr	ip, [fp, #-92]	; 0xffffffa4
   14c78:	umull	r0, r2, ip, r7
   14c7c:	ldr	r3, [fp, #-96]	; 0xffffffa0
   14c80:	mov	r1, r3
   14c84:	umlal	r0, r2, r3, r6
   14c88:	umull	r3, r7, ip, r6
   14c8c:	adds	r0, r0, r7
   14c90:	adc	r2, r2, #0
   14c94:	umull	r3, r7, r1, r6
   14c98:	subs	r0, r0, r3
   14c9c:	sbcs	r0, r2, r7
   14ca0:	mov	r0, #0
   14ca4:	movwcc	r0, #1
   14ca8:	ldr	r3, [fp, #-88]	; 0xffffffa8
   14cac:	umull	r3, r7, r1, r3
   14cb0:	cmp	r0, #0
   14cb4:	addne	r7, r7, #1
   14cb8:	subs	r0, r4, r2
   14cbc:	sbc	r2, r5, #0
   14cc0:	subs	r0, r0, r3
   14cc4:	ldr	r5, [sp, #60]	; 0x3c
   14cc8:	umull	r1, r3, r0, r5
   14ccc:	str	r1, [fp, #-80]	; 0xffffffb0
   14cd0:	mla	r0, r0, r9, r3
   14cd4:	sbc	r1, r2, r7
   14cd8:	ldr	r7, [fp, #-88]	; 0xffffffa8
   14cdc:	mla	r8, r1, r5, r0
   14ce0:	mov	r0, r6
   14ce4:	mov	r1, r7
   14ce8:	bl	1515c <__assert_fail@plt+0x36e4>
   14cec:	cmp	r0, #0
   14cf0:	ldr	r4, [sp, #116]	; 0x74
   14cf4:	ldr	r5, [sp, #112]	; 0x70
   14cf8:	beq	14d18 <__assert_fail@plt+0x32a0>
   14cfc:	mov	r0, #1
   14d00:	str	r0, [sp]
   14d04:	ldr	r0, [fp, #12]
   14d08:	mov	r2, r6
   14d0c:	mov	r3, r7
   14d10:	bl	15004 <__assert_fail@plt+0x358c>
   14d14:	b	14d2c <__assert_fail@plt+0x32b4>
   14d18:	mov	r0, r6
   14d1c:	mov	r1, r7
   14d20:	ldr	r2, [sp, #52]	; 0x34
   14d24:	ldr	r3, [fp, #12]
   14d28:	bl	13c78 <__assert_fail@plt+0x2200>
   14d2c:	ldr	r7, [fp, #-80]	; 0xffffffb0
   14d30:	orrs	r0, r7, r8
   14d34:	ldr	r6, [fp, #-92]	; 0xffffffa4
   14d38:	beq	14f10 <__assert_fail@plt+0x3498>
   14d3c:	mov	r0, r7
   14d40:	mov	r1, r8
   14d44:	mov	r2, r6
   14d48:	mov	r9, r8
   14d4c:	ldr	r3, [fp, #-96]	; 0xffffffa0
   14d50:	mov	r8, r3
   14d54:	bl	131c0 <__assert_fail@plt+0x1748>
   14d58:	cmp	r0, #0
   14d5c:	bne	14f1c <__assert_fail@plt+0x34a4>
   14d60:	str	r5, [sp]
   14d64:	stmib	sp, {r4, r7, r9}
   14d68:	str	r6, [sp, #16]
   14d6c:	str	r8, [sp, #20]
   14d70:	sub	r0, fp, #40	; 0x28
   14d74:	ldr	r2, [fp, #-112]	; 0xffffff90
   14d78:	ldr	r3, [fp, #-100]	; 0xffffff9c
   14d7c:	bl	16658 <__assert_fail@plt+0x4be0>
   14d80:	str	r0, [sp, #112]	; 0x70
   14d84:	str	r1, [sp, #116]	; 0x74
   14d88:	ldr	r0, [sp, #80]	; 0x50
   14d8c:	str	r0, [sp]
   14d90:	ldr	r0, [sp, #76]	; 0x4c
   14d94:	stmib	sp, {r0, r7, r9}
   14d98:	str	r6, [sp, #16]
   14d9c:	str	r8, [sp, #20]
   14da0:	sub	r0, fp, #48	; 0x30
   14da4:	ldr	r2, [sp, #88]	; 0x58
   14da8:	ldr	r3, [sp, #84]	; 0x54
   14dac:	bl	16658 <__assert_fail@plt+0x4be0>
   14db0:	str	r0, [sp, #80]	; 0x50
   14db4:	str	r1, [sp, #76]	; 0x4c
   14db8:	ldr	r0, [fp, #-104]	; 0xffffff98
   14dbc:	str	r0, [sp]
   14dc0:	ldr	r0, [fp, #-108]	; 0xffffff94
   14dc4:	stmib	sp, {r0, r7, r9}
   14dc8:	str	r6, [sp, #16]
   14dcc:	str	r8, [sp, #20]
   14dd0:	sub	r0, fp, #56	; 0x38
   14dd4:	ldr	r2, [sp, #72]	; 0x48
   14dd8:	mov	r3, sl
   14ddc:	bl	16658 <__assert_fail@plt+0x4be0>
   14de0:	str	r0, [fp, #-104]	; 0xffffff98
   14de4:	str	r1, [fp, #-108]	; 0xffffff94
   14de8:	mov	r0, r7
   14dec:	mov	r1, r7
   14df0:	mov	r4, r9
   14df4:	mov	r7, r6
   14df8:	ldr	r0, [sp, #56]	; 0x38
   14dfc:	str	r0, [sp, #72]	; 0x48
   14e00:	b	144fc <__assert_fail@plt+0x2a84>
   14e04:	eor	r0, r4, r6
   14e08:	ldr	r1, [fp, #-96]	; 0xffffffa0
   14e0c:	eor	r1, r1, r7
   14e10:	orrs	r0, r0, r1
   14e14:	ldr	r1, [fp, #-84]	; 0xffffffac
   14e18:	ldreq	r0, [fp, #-76]	; 0xffffffb4
   14e1c:	eoreq	r0, r0, r9
   14e20:	eoreq	r2, r1, r8
   14e24:	orrseq	r0, r0, r2
   14e28:	beq	14f64 <__assert_fail@plt+0x34ec>
   14e2c:	ubfx	r0, r6, #1, #7
   14e30:	movw	r1, #64414	; 0xfb9e
   14e34:	movt	r1, #1
   14e38:	ldrb	r0, [r1, r0]
   14e3c:	umull	r1, r2, r6, r0
   14e40:	rsbs	r1, r1, #2
   14e44:	umull	r1, r3, r1, r0
   14e48:	mla	r2, r7, r0, r2
   14e4c:	rsc	r2, r2, #0
   14e50:	mla	r0, r2, r0, r3
   14e54:	str	r0, [fp, #-76]	; 0xffffffb4
   14e58:	umull	r2, r3, r1, r6
   14e5c:	mla	r3, r1, r7, r3
   14e60:	mla	r3, r0, r6, r3
   14e64:	rsbs	r2, r2, #2
   14e68:	rsc	r0, r3, #0
   14e6c:	str	r0, [fp, #-84]	; 0xffffffac
   14e70:	mov	lr, r4
   14e74:	mov	r3, r7
   14e78:	umull	r7, r0, r1, r2
   14e7c:	str	r0, [fp, #-100]	; 0xffffff9c
   14e80:	umull	r4, r0, r7, r6
   14e84:	str	r0, [fp, #-104]	; 0xffffff98
   14e88:	rsbs	r4, r4, #2
   14e8c:	umull	r5, r0, r7, r4
   14e90:	str	r0, [fp, #-88]	; 0xffffffa8
   14e94:	umull	r0, ip, r5, lr
   14e98:	str	r0, [fp, #-92]	; 0xffffffa4
   14e9c:	ldr	sl, [fp, #-96]	; 0xffffffa0
   14ea0:	mla	ip, r5, sl, ip
   14ea4:	ldr	r0, [fp, #-104]	; 0xffffff98
   14ea8:	mla	sl, r7, r3, r0
   14eac:	ldr	r0, [fp, #-84]	; 0xffffffac
   14eb0:	ldr	r5, [fp, #-100]	; 0xffffff9c
   14eb4:	mla	r1, r1, r0, r5
   14eb8:	ldr	r0, [fp, #-76]	; 0xffffffb4
   14ebc:	mla	r0, r0, r2, r1
   14ec0:	mla	r1, r0, r6, sl
   14ec4:	rsc	r1, r1, #0
   14ec8:	ldr	r2, [fp, #-88]	; 0xffffffa8
   14ecc:	mla	r1, r7, r1, r2
   14ed0:	mov	r7, r3
   14ed4:	mla	r0, r0, r4, r1
   14ed8:	mla	r4, r0, lr, ip
   14edc:	mov	r0, r9
   14ee0:	mov	r1, r8
   14ee4:	mov	r2, r6
   14ee8:	bl	131c0 <__assert_fail@plt+0x1748>
   14eec:	cmp	r0, #0
   14ef0:	ldr	r5, [fp, #8]
   14ef4:	beq	14f8c <__assert_fail@plt+0x3514>
   14ef8:	stm	sp, {r6, r7}
   14efc:	ldr	r0, [fp, #12]
   14f00:	mov	r2, r9
   14f04:	mov	r3, r8
   14f08:	bl	13bfc <__assert_fail@plt+0x2184>
   14f0c:	b	14fb0 <__assert_fail@plt+0x3538>
   14f10:	ldr	r5, [fp, #8]
   14f14:	ldr	r4, [fp, #-96]	; 0xffffffa0
   14f18:	b	14fb4 <__assert_fail@plt+0x353c>
   14f1c:	stm	sp, {r6, r8}
   14f20:	ldr	r0, [fp, #12]
   14f24:	mov	r2, r7
   14f28:	mov	r3, r9
   14f2c:	bl	13bfc <__assert_fail@plt+0x2184>
   14f30:	sub	sp, fp, #28
   14f34:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14f38:	mov	r5, sl
   14f3c:	mov	r7, r9
   14f40:	ldr	r3, [fp, #-96]	; 0xffffffa0
   14f44:	ldr	r2, [fp, #8]
   14f48:	b	14488 <__assert_fail@plt+0x2a10>
   14f4c:	mov	r6, r5
   14f50:	mov	r5, sl
   14f54:	mov	r7, r9
   14f58:	ldr	r3, [fp, #-96]	; 0xffffffa0
   14f5c:	mov	r2, r6
   14f60:	b	14488 <__assert_fail@plt+0x2a10>
   14f64:	ldr	r0, [sp, #52]	; 0x34
   14f68:	str	r0, [sp]
   14f6c:	ldr	r0, [fp, #12]
   14f70:	str	r0, [sp, #4]
   14f74:	ldr	r0, [fp, #-76]	; 0xffffffb4
   14f78:	mov	r2, r4
   14f7c:	ldr	r3, [fp, #-96]	; 0xffffffa0
   14f80:	bl	142a8 <__assert_fail@plt+0x2830>
   14f84:	sub	sp, fp, #28
   14f88:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14f8c:	ldr	r0, [sp, #52]	; 0x34
   14f90:	str	r0, [sp]
   14f94:	ldr	r0, [fp, #12]
   14f98:	str	r0, [sp, #4]
   14f9c:	mov	r0, r9
   14fa0:	mov	r1, r8
   14fa4:	mov	r2, r6
   14fa8:	mov	r3, r7
   14fac:	bl	142a8 <__assert_fail@plt+0x2830>
   14fb0:	ldr	r6, [fp, #-92]	; 0xffffffa4
   14fb4:	mov	r0, r6
   14fb8:	mov	r1, r4
   14fbc:	bl	1515c <__assert_fail@plt+0x36e4>
   14fc0:	cmp	r0, #0
   14fc4:	beq	14fe8 <__assert_fail@plt+0x3570>
   14fc8:	mov	r0, #1
   14fcc:	str	r0, [sp]
   14fd0:	ldr	r0, [fp, #12]
   14fd4:	mov	r2, r6
   14fd8:	mov	r3, r4
   14fdc:	bl	15004 <__assert_fail@plt+0x358c>
   14fe0:	sub	sp, fp, #28
   14fe4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14fe8:	mov	r0, r6
   14fec:	mov	r1, r4
   14ff0:	mov	r2, r5
   14ff4:	ldr	r3, [fp, #12]
   14ff8:	bl	13c78 <__assert_fail@plt+0x2200>
   14ffc:	sub	sp, fp, #28
   15000:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15004:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15008:	add	fp, sp, #28
   1500c:	mov	r1, r3
   15010:	mov	r4, r2
   15014:	ldrb	sl, [r0, #250]	; 0xfa
   15018:	sub	lr, sl, #1
   1501c:	ldr	ip, [fp, #8]
   15020:	cmp	sl, #0
   15024:	beq	150e8 <__assert_fail@plt+0x3670>
   15028:	mov	r2, #8
   1502c:	add	r5, r2, sl, lsl #3
   15030:	add	r3, sl, #223	; 0xdf
   15034:	mov	r2, r0
   15038:	ldr	r7, [r2, r5]!
   1503c:	ldr	r2, [r2, #4]
   15040:	subs	r7, r4, r7
   15044:	sbcs	r2, r1, r2
   15048:	bcs	15074 <__assert_fail@plt+0x35fc>
   1504c:	sub	r5, r5, #8
   15050:	sub	r2, r3, #1
   15054:	sub	r3, r3, #224	; 0xe0
   15058:	cmp	r3, #0
   1505c:	mov	r3, r2
   15060:	bgt	15034 <__assert_fail@plt+0x35bc>
   15064:	sub	r3, r2, #224	; 0xe0
   15068:	cmp	lr, r3
   1506c:	bgt	150ac <__assert_fail@plt+0x3634>
   15070:	b	150e4 <__assert_fail@plt+0x366c>
   15074:	mov	r2, r0
   15078:	ldr	r5, [r2, r5]!
   1507c:	eor	r5, r5, r4
   15080:	ldr	r2, [r2, #4]
   15084:	eor	r2, r2, r1
   15088:	orrs	r2, r5, r2
   1508c:	bne	150a0 <__assert_fail@plt+0x3628>
   15090:	ldrb	r1, [r0, r3]
   15094:	add	r1, r1, ip
   15098:	strb	r1, [r0, r3]
   1509c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   150a0:	sub	r3, r3, #224	; 0xe0
   150a4:	cmp	lr, r3
   150a8:	ble	150e4 <__assert_fail@plt+0x366c>
   150ac:	lsl	r5, sl, #3
   150b0:	add	r2, sl, #223	; 0xdf
   150b4:	add	r7, r0, r5
   150b8:	ldrd	r8, [r7, #8]
   150bc:	strd	r8, [r7, #16]
   150c0:	mov	r7, r0
   150c4:	ldrb	r6, [r7, r2]!
   150c8:	strb	r6, [r7, #1]
   150cc:	sub	r5, r5, #8
   150d0:	sub	r7, r2, #1
   150d4:	sub	r2, r2, #225	; 0xe1
   150d8:	cmp	r2, r3
   150dc:	mov	r2, r7
   150e0:	bgt	150b4 <__assert_fail@plt+0x363c>
   150e4:	mov	lr, r3
   150e8:	add	r2, lr, #1
   150ec:	add	r3, r0, r2, lsl #3
   150f0:	str	r4, [r3, #16]
   150f4:	str	r1, [r3, #20]
   150f8:	add	r1, r0, r2
   150fc:	strb	ip, [r1, #224]	; 0xe0
   15100:	add	r1, sl, #1
   15104:	strb	r1, [r0, #250]	; 0xfa
   15108:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1510c:	push	{fp, lr}
   15110:	mov	fp, sp
   15114:	sub	sp, sp, #8
   15118:	ldr	ip, [fp, #12]
   1511c:	cmp	ip, #0
   15120:	beq	15148 <__assert_fail@plt+0x36d0>
   15124:	ldr	lr, [fp, #8]
   15128:	movw	r1, #63064	; 0xf658
   1512c:	movt	r1, #1
   15130:	add	lr, r1, lr
   15134:	ldrb	r1, [lr], #1
   15138:	adds	r2, r2, r1
   1513c:	adc	r3, r3, #0
   15140:	subs	ip, ip, #1
   15144:	bne	15134 <__assert_fail@plt+0x36bc>
   15148:	mov	r1, #1
   1514c:	str	r1, [sp]
   15150:	bl	15004 <__assert_fail@plt+0x358c>
   15154:	mov	sp, fp
   15158:	pop	{fp, pc}
   1515c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15160:	add	fp, sp, #28
   15164:	sub	sp, sp, #356	; 0x164
   15168:	mov	r5, #0
   1516c:	subs	r2, r0, #2
   15170:	sbcs	r2, r1, #0
   15174:	bcc	15610 <__assert_fail@plt+0x3b98>
   15178:	mov	r5, #1
   1517c:	movw	r2, #60793	; 0xed79
   15180:	movt	r2, #381	; 0x17d
   15184:	subs	r2, r0, r2
   15188:	sbcs	r2, r1, #0
   1518c:	bcc	15610 <__assert_fail@plt+0x3b98>
   15190:	subs	r2, r0, #1
   15194:	sbc	r3, r1, #0
   15198:	mov	r7, #0
   1519c:	tst	r2, #1
   151a0:	str	r2, [sp, #76]	; 0x4c
   151a4:	mov	r6, r2
   151a8:	str	r3, [sp, #72]	; 0x48
   151ac:	bne	151d4 <__assert_fail@plt+0x375c>
   151b0:	mov	r7, #0
   151b4:	ldr	r2, [sp, #76]	; 0x4c
   151b8:	ldr	r3, [sp, #72]	; 0x48
   151bc:	lsrs	r3, r3, #1
   151c0:	rrx	r6, r2
   151c4:	add	r7, r7, #1
   151c8:	tst	r2, #2
   151cc:	mov	r2, r6
   151d0:	beq	151bc <__assert_fail@plt+0x3744>
   151d4:	str	r6, [sp, #48]	; 0x30
   151d8:	str	r3, [sp, #52]	; 0x34
   151dc:	str	r7, [sp, #56]	; 0x38
   151e0:	ubfx	r3, r0, #1, #7
   151e4:	movw	r2, #64414	; 0xfb9e
   151e8:	movt	r2, #1
   151ec:	ldrb	r4, [r2, r3]
   151f0:	umull	r3, r2, r4, r0
   151f4:	mla	r2, r4, r1, r2
   151f8:	rsbs	r3, r3, #2
   151fc:	rsc	lr, r2, #0
   15200:	mov	r5, r0
   15204:	umull	r3, r7, r3, r4
   15208:	str	r1, [sp, #92]	; 0x5c
   1520c:	umull	r0, r6, r3, r0
   15210:	rsbs	r9, r0, #2
   15214:	umull	r0, r8, r3, r9
   15218:	umull	ip, r2, r0, r5
   1521c:	ldr	r1, [sp, #92]	; 0x5c
   15220:	mla	r2, r0, r1, r2
   15224:	mla	r1, lr, r4, r7
   15228:	ldr	r7, [sp, #92]	; 0x5c
   1522c:	mla	r7, r3, r7, r6
   15230:	ldr	r6, [sp, #92]	; 0x5c
   15234:	mla	r7, r1, r5, r7
   15238:	rsc	r7, r7, #0
   1523c:	mla	r3, r3, r7, r8
   15240:	mla	r1, r1, r9, r3
   15244:	mla	r3, r1, r5, r2
   15248:	rsbs	r2, ip, #2
   1524c:	rsc	r3, r3, #0
   15250:	subs	r7, r5, #2
   15254:	sbcs	r7, r6, #0
   15258:	bcc	15644 <__assert_fail@plt+0x3bcc>
   1525c:	umull	r4, r7, r0, r2
   15260:	str	r4, [sp, #84]	; 0x54
   15264:	mla	r0, r0, r3, r7
   15268:	mla	r0, r1, r2, r0
   1526c:	str	r0, [sp, #80]	; 0x50
   15270:	mov	ip, #0
   15274:	mov	r2, #1
   15278:	mvn	r1, #63	; 0x3f
   1527c:	str	r5, [sp, #88]	; 0x58
   15280:	mov	r3, r5
   15284:	mov	r5, r6
   15288:	mov	lr, #0
   1528c:	mov	r7, #0
   15290:	mov	r9, #0
   15294:	mov	sl, #0
   15298:	b	152d0 <__assert_fail@plt+0x3858>
   1529c:	subs	r0, r2, r3
   152a0:	sbc	r6, r7, r5
   152a4:	subs	r2, r0, #1
   152a8:	sbc	r7, r6, #0
   152ac:	subs	r9, r9, ip
   152b0:	sbcs	sl, sl, lr
   152b4:	mov	r4, #0
   152b8:	movwcc	r4, #1
   152bc:	cmp	r4, #0
   152c0:	moveq	r2, r0
   152c4:	moveq	r7, r6
   152c8:	adds	r1, r1, #1
   152cc:	bcs	15310 <__assert_fail@plt+0x3898>
   152d0:	lsrs	r6, lr, #1
   152d4:	rrx	ip, ip
   152d8:	orr	lr, r6, r3, lsl #31
   152dc:	lsrs	r5, r5, #1
   152e0:	rrx	r3, r3
   152e4:	subs	r6, r3, r2
   152e8:	sbcs	r6, r5, r7
   152ec:	bcc	1529c <__assert_fail@plt+0x3824>
   152f0:	eor	r6, r2, r3
   152f4:	eor	r0, r7, r5
   152f8:	orrs	r0, r6, r0
   152fc:	bne	152c8 <__assert_fail@plt+0x3850>
   15300:	subs	r0, r9, ip
   15304:	sbcs	r0, sl, lr
   15308:	bcs	1529c <__assert_fail@plt+0x3824>
   1530c:	b	152c8 <__assert_fail@plt+0x3850>
   15310:	ldr	r0, [sp, #48]	; 0x30
   15314:	str	r0, [sp, #8]
   15318:	ldr	r0, [sp, #88]	; 0x58
   1531c:	subs	r3, r0, r9
   15320:	ldr	r1, [sp, #92]	; 0x5c
   15324:	sbc	r2, r1, sl
   15328:	subs	r7, r9, r3
   1532c:	sbcs	r3, sl, r2
   15330:	ldr	r2, [sp, #52]	; 0x34
   15334:	str	r2, [sp, #12]
   15338:	ldr	r2, [sp, #56]	; 0x38
   1533c:	str	r2, [sp, #16]
   15340:	str	r9, [sp, #24]
   15344:	str	sl, [sp, #28]
   15348:	mov	r5, #0
   1534c:	mov	r2, #0
   15350:	movwcc	r2, #1
   15354:	adds	r4, r7, r0
   15358:	adc	r8, r3, r1
   1535c:	cmp	r2, #0
   15360:	moveq	r8, r3
   15364:	str	r8, [sp, #4]
   15368:	moveq	r4, r7
   1536c:	str	r4, [sp]
   15370:	ldr	r2, [sp, #84]	; 0x54
   15374:	ldr	r3, [sp, #80]	; 0x50
   15378:	bl	15b28 <__assert_fail@plt+0x40b0>
   1537c:	cmp	r0, #0
   15380:	beq	15610 <__assert_fail@plt+0x3b98>
   15384:	add	r5, sp, #96	; 0x60
   15388:	str	r5, [sp]
   1538c:	mov	r0, #0
   15390:	str	r0, [sp, #64]	; 0x40
   15394:	mov	r0, #0
   15398:	mov	r1, #0
   1539c:	ldr	r2, [sp, #76]	; 0x4c
   153a0:	ldr	r3, [sp, #72]	; 0x48
   153a4:	bl	12808 <__assert_fail@plt+0xd90>
   153a8:	add	r0, r5, #16
   153ac:	str	r0, [sp, #44]	; 0x2c
   153b0:	mov	r0, #2
   153b4:	str	r0, [sp, #60]	; 0x3c
   153b8:	ldrb	r5, [sp, #346]	; 0x15a
   153bc:	mov	r0, #0
   153c0:	str	r0, [sp, #68]	; 0x44
   153c4:	cmp	r5, #0
   153c8:	beq	15604 <__assert_fail@plt+0x3b8c>
   153cc:	mov	r6, #1
   153d0:	ldr	r7, [sp, #44]	; 0x2c
   153d4:	ldrd	r2, [r7]
   153d8:	ldr	r0, [sp, #76]	; 0x4c
   153dc:	ldr	r1, [sp, #72]	; 0x48
   153e0:	bl	1c344 <__assert_fail@plt+0xa8cc>
   153e4:	mov	r2, r0
   153e8:	mov	r3, r1
   153ec:	ldr	r0, [sp, #88]	; 0x58
   153f0:	str	r0, [sp]
   153f4:	ldr	r0, [sp, #92]	; 0x5c
   153f8:	str	r0, [sp, #4]
   153fc:	ldr	r0, [sp, #84]	; 0x54
   15400:	str	r0, [sp, #8]
   15404:	ldr	r0, [sp, #80]	; 0x50
   15408:	add	r1, sp, #12
   1540c:	stm	r1, {r0, r9, sl}
   15410:	mov	r0, r4
   15414:	mov	r1, r8
   15418:	bl	15c18 <__assert_fail@plt+0x41a0>
   1541c:	eor	r1, r1, sl
   15420:	eor	r0, r0, r9
   15424:	orrs	r0, r0, r1
   15428:	beq	15440 <__assert_fail@plt+0x39c8>
   1542c:	add	r7, r7, #8
   15430:	add	r1, r6, #1
   15434:	cmp	r6, r5
   15438:	mov	r6, r1
   1543c:	bcc	153d4 <__assert_fail@plt+0x395c>
   15440:	cmp	r0, #0
   15444:	bne	15604 <__assert_fail@plt+0x3b8c>
   15448:	movw	r0, #63064	; 0xf658
   1544c:	movt	r0, #1
   15450:	ldr	r1, [sp, #68]	; 0x44
   15454:	ldrb	r0, [r0, r1]
   15458:	ldr	r7, [sp, #60]	; 0x3c
   1545c:	adds	r7, r7, r0
   15460:	ldr	r3, [sp, #64]	; 0x40
   15464:	adc	r3, r3, #0
   15468:	umull	r0, r1, r3, r9
   1546c:	umlal	r0, r1, r7, sl
   15470:	umull	r4, r2, r7, r9
   15474:	adds	r8, r0, r2
   15478:	adc	r0, r1, #0
   1547c:	str	r7, [sp, #60]	; 0x3c
   15480:	umull	r1, r2, r7, sl
   15484:	subs	r1, r8, r1
   15488:	sbcs	r1, r0, r2
   1548c:	mov	r1, #0
   15490:	movwcc	r1, #1
   15494:	str	r3, [sp, #64]	; 0x40
   15498:	umull	r2, r3, r3, sl
   1549c:	cmp	r1, #0
   154a0:	addne	r3, r3, #1
   154a4:	adds	r0, r2, r0
   154a8:	adc	r1, r3, #0
   154ac:	orrs	r2, r0, r1
   154b0:	bne	15538 <__assert_fail@plt+0x3ac0>
   154b4:	mov	r0, r4
   154b8:	mov	r1, r8
   154bc:	ldr	r7, [sp, #88]	; 0x58
   154c0:	mov	r2, r7
   154c4:	ldr	r6, [sp, #92]	; 0x5c
   154c8:	mov	r3, r6
   154cc:	bl	1c344 <__assert_fail@plt+0xa8cc>
   154d0:	mov	r4, r2
   154d4:	mov	r8, r3
   154d8:	str	r9, [sp, #24]
   154dc:	str	sl, [sp, #28]
   154e0:	stm	sp, {r4, r8}
   154e4:	ldr	r0, [sp, #48]	; 0x30
   154e8:	str	r0, [sp, #8]
   154ec:	ldr	r0, [sp, #52]	; 0x34
   154f0:	str	r0, [sp, #12]
   154f4:	ldr	r0, [sp, #56]	; 0x38
   154f8:	str	r0, [sp, #16]
   154fc:	mov	r0, r7
   15500:	mov	r1, r6
   15504:	ldr	r2, [sp, #84]	; 0x54
   15508:	ldr	r3, [sp, #80]	; 0x50
   1550c:	bl	15b28 <__assert_fail@plt+0x40b0>
   15510:	cmp	r0, #0
   15514:	beq	1560c <__assert_fail@plt+0x3b94>
   15518:	ldr	r0, [sp, #68]	; 0x44
   1551c:	mov	r1, r0
   15520:	add	r1, r0, #1
   15524:	mov	r0, r1
   15528:	str	r1, [sp, #68]	; 0x44
   1552c:	cmp	r1, #668	; 0x29c
   15530:	bne	153c4 <__assert_fail@plt+0x394c>
   15534:	b	1561c <__assert_fail@plt+0x3ba4>
   15538:	ldr	r7, [sp, #88]	; 0x58
   1553c:	subs	r2, r0, r7
   15540:	ldr	ip, [sp, #92]	; 0x5c
   15544:	sbcs	r2, r1, ip
   15548:	bcs	15664 <__assert_fail@plt+0x3bec>
   1554c:	mov	lr, #0
   15550:	mvn	r3, #63	; 0x3f
   15554:	mov	r2, r7
   15558:	str	ip, [sp, #40]	; 0x28
   1555c:	mov	ip, #0
   15560:	b	155b8 <__assert_fail@plt+0x3b40>
   15564:	subs	r6, r0, r2
   15568:	sbc	r7, r1, r7
   1556c:	subs	r0, r6, #1
   15570:	sbc	r1, r7, #0
   15574:	subs	r4, r4, lr
   15578:	sbcs	r8, r8, ip
   1557c:	str	r2, [sp, #36]	; 0x24
   15580:	mov	r2, ip
   15584:	mov	ip, lr
   15588:	mov	lr, #0
   1558c:	movwcc	lr, #1
   15590:	cmp	lr, #0
   15594:	mov	lr, ip
   15598:	mov	ip, r2
   1559c:	ldr	r2, [sp, #36]	; 0x24
   155a0:	moveq	r0, r6
   155a4:	moveq	r1, r7
   155a8:	adds	r3, r3, #1
   155ac:	ldr	r6, [sp, #92]	; 0x5c
   155b0:	ldr	r7, [sp, #88]	; 0x58
   155b4:	bcs	154d8 <__assert_fail@plt+0x3a60>
   155b8:	lsrs	r7, ip, #1
   155bc:	rrx	lr, lr
   155c0:	orr	ip, r7, r2, lsl #31
   155c4:	ldr	r7, [sp, #40]	; 0x28
   155c8:	lsrs	r7, r7, #1
   155cc:	rrx	r2, r2
   155d0:	subs	r6, r2, r0
   155d4:	sbcs	r6, r7, r1
   155d8:	str	r7, [sp, #40]	; 0x28
   155dc:	bcc	15564 <__assert_fail@plt+0x3aec>
   155e0:	eor	r6, r0, r2
   155e4:	eor	r7, r1, r7
   155e8:	orrs	r6, r6, r7
   155ec:	bne	155a8 <__assert_fail@plt+0x3b30>
   155f0:	subs	r6, r4, lr
   155f4:	sbcs	r6, r8, ip
   155f8:	ldr	r7, [sp, #40]	; 0x28
   155fc:	bcs	15564 <__assert_fail@plt+0x3aec>
   15600:	b	155a8 <__assert_fail@plt+0x3b30>
   15604:	mov	r5, #1
   15608:	b	15610 <__assert_fail@plt+0x3b98>
   1560c:	mov	r5, #0
   15610:	mov	r0, r5
   15614:	sub	sp, fp, #28
   15618:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1561c:	movw	r1, #51405	; 0xc8cd
   15620:	movt	r1, #1
   15624:	mov	r0, #0
   15628:	mov	r2, #5
   1562c:	bl	11748 <dcgettext@plt>
   15630:	mov	r2, r0
   15634:	mov	r0, #0
   15638:	mov	r1, #0
   1563c:	bl	11844 <error@plt>
   15640:	bl	11a60 <abort@plt>
   15644:	movw	r0, #51455	; 0xc8ff
   15648:	movt	r0, #1
   1564c:	movw	r1, #51392	; 0xc8c0
   15650:	movt	r1, #1
   15654:	movw	r3, #51465	; 0xc909
   15658:	movt	r3, #1
   1565c:	movw	r2, #1214	; 0x4be
   15660:	bl	11a78 <__assert_fail@plt>
   15664:	movw	r0, #51490	; 0xc922
   15668:	movt	r0, #1
   1566c:	movw	r1, #51392	; 0xc8c0
   15670:	movt	r1, #1
   15674:	movw	r3, #51465	; 0xc909
   15678:	movt	r3, #1
   1567c:	movw	r2, #1262	; 0x4ee
   15680:	bl	11a78 <__assert_fail@plt>
   15684:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15688:	add	fp, sp, #28
   1568c:	sub	sp, sp, #92	; 0x5c
   15690:	mov	r7, r0
   15694:	ldr	r6, [fp, #20]
   15698:	str	r2, [fp, #-52]	; 0xffffffcc
   1569c:	str	r2, [sp]
   156a0:	str	r3, [fp, #-48]	; 0xffffffd0
   156a4:	stmib	sp, {r3, r6}
   156a8:	ldr	r1, [fp, #8]
   156ac:	ldr	r2, [fp, #12]
   156b0:	sub	r0, fp, #40	; 0x28
   156b4:	str	r7, [fp, #-44]	; 0xffffffd4
   156b8:	mov	r3, r7
   156bc:	bl	1585c <__assert_fail@plt+0x3de4>
   156c0:	ldm	r6, {ip, lr}
   156c4:	eor	r2, r1, lr
   156c8:	eor	r3, r0, ip
   156cc:	orrs	r2, r3, r2
   156d0:	ldr	r2, [fp, #-40]	; 0xffffffd8
   156d4:	ldr	r3, [fp, #-36]	; 0xffffffdc
   156d8:	bne	15700 <__assert_fail@plt+0x3c88>
   156dc:	mov	r4, r6
   156e0:	ldr	r9, [r6, #12]
   156e4:	ldr	r6, [r6, #8]
   156e8:	eor	r5, r3, r9
   156ec:	eor	r7, r2, r6
   156f0:	mov	r6, r4
   156f4:	orrs	r7, r7, r5
   156f8:	mov	r4, #1
   156fc:	beq	15850 <__assert_fail@plt+0x3dd8>
   15700:	ldr	r8, [fp, #-44]	; 0xffffffd4
   15704:	ldr	r5, [r8]
   15708:	ldr	r4, [r8, #4]
   1570c:	str	r5, [sp, #60]	; 0x3c
   15710:	ldr	sl, [r8, #12]
   15714:	mov	r7, r6
   15718:	ldr	r6, [r7, #8]!
   1571c:	str	r7, [sp, #56]	; 0x38
   15720:	ldr	r7, [r7, #4]
   15724:	mov	r5, r8
   15728:	ldr	r9, [r5, #8]!
   1572c:	str	r5, [fp, #-56]	; 0xffffffc8
   15730:	subs	r6, r9, r6
   15734:	sbc	r8, sl, r7
   15738:	subs	r9, r6, #1
   1573c:	sbc	sl, r8, #0
   15740:	ldr	r5, [sp, #60]	; 0x3c
   15744:	subs	r5, r5, ip
   15748:	sbcs	r7, r4, lr
   1574c:	mov	r4, #0
   15750:	movwcc	r4, #1
   15754:	cmp	r4, #0
   15758:	moveq	r9, r6
   1575c:	moveq	sl, r8
   15760:	str	r5, [sp, #60]	; 0x3c
   15764:	eor	r5, r0, r5
   15768:	mov	r8, r7
   1576c:	eor	r6, r1, r7
   15770:	orrs	r7, r5, r6
   15774:	mov	r4, #1
   15778:	eoreq	r7, r2, r9
   1577c:	eoreq	r6, r3, sl
   15780:	orrseq	r7, r7, r6
   15784:	beq	15850 <__assert_fail@plt+0x3dd8>
   15788:	ldr	r7, [fp, #16]
   1578c:	cmp	r7, #2
   15790:	bcc	15844 <__assert_fail@plt+0x3dcc>
   15794:	str	r9, [sp, #52]	; 0x34
   15798:	sub	r9, r7, #1
   1579c:	b	157a8 <__assert_fail@plt+0x3d30>
   157a0:	subs	r9, r9, #1
   157a4:	beq	15844 <__assert_fail@plt+0x3dcc>
   157a8:	ldr	r7, [fp, #-56]	; 0xffffffc8
   157ac:	ldrd	r4, [r7]
   157b0:	ldr	r7, [fp, #-44]	; 0xffffffd4
   157b4:	ldrd	r6, [r7]
   157b8:	str	r6, [sp, #32]
   157bc:	str	r7, [sp, #36]	; 0x24
   157c0:	ldr	r7, [fp, #-52]	; 0xffffffcc
   157c4:	str	r7, [sp, #40]	; 0x28
   157c8:	ldr	r7, [fp, #-48]	; 0xffffffd0
   157cc:	str	r7, [sp, #44]	; 0x2c
   157d0:	stm	sp, {r0, r1, r2, r3}
   157d4:	add	ip, sp, #16
   157d8:	stm	ip, {r0, r1, r4, r5}
   157dc:	sub	r0, fp, #40	; 0x28
   157e0:	bl	15de4 <__assert_fail@plt+0x436c>
   157e4:	eor	r2, r1, r8
   157e8:	ldr	r3, [sp, #60]	; 0x3c
   157ec:	eor	r3, r0, r3
   157f0:	orrs	r2, r3, r2
   157f4:	ldr	r2, [fp, #-40]	; 0xffffffd8
   157f8:	ldr	r3, [fp, #-36]	; 0xffffffdc
   157fc:	bne	15814 <__assert_fail@plt+0x3d9c>
   15800:	ldr	r7, [sp, #52]	; 0x34
   15804:	eor	r7, r2, r7
   15808:	eor	r6, r3, sl
   1580c:	orrs	r7, r7, r6
   15810:	beq	1584c <__assert_fail@plt+0x3dd4>
   15814:	ldr	r7, [fp, #20]
   15818:	ldrd	r4, [r7]
   1581c:	eor	r7, r1, r5
   15820:	eor	r6, r0, r4
   15824:	orrs	r7, r6, r7
   15828:	bne	157a0 <__assert_fail@plt+0x3d28>
   1582c:	ldr	r7, [sp, #56]	; 0x38
   15830:	ldrd	r4, [r7]
   15834:	eor	r7, r3, r5
   15838:	eor	r6, r2, r4
   1583c:	orrs	r7, r6, r7
   15840:	bne	157a0 <__assert_fail@plt+0x3d28>
   15844:	mov	r4, #0
   15848:	b	15850 <__assert_fail@plt+0x3dd8>
   1584c:	mov	r4, #1
   15850:	mov	r0, r4
   15854:	sub	sp, fp, #28
   15858:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1585c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15860:	add	fp, sp, #28
   15864:	sub	sp, sp, #100	; 0x64
   15868:	str	r0, [fp, #-40]	; 0xffffffd8
   1586c:	ldm	r1, {r5, lr}
   15870:	ldr	ip, [r1, #8]
   15874:	ldr	r6, [r1, #12]
   15878:	str	r2, [sp, #52]	; 0x34
   1587c:	ldr	r4, [r2]
   15880:	ldr	r2, [r2, #4]
   15884:	ldr	r0, [r3]
   15888:	str	r0, [fp, #-44]	; 0xffffffd4
   1588c:	ldr	r8, [r3, #4]
   15890:	ldr	r0, [r3, #8]
   15894:	str	r0, [fp, #-32]	; 0xffffffe0
   15898:	ldr	sl, [r3, #12]
   1589c:	ldr	r0, [fp, #16]
   158a0:	ldr	r1, [r0]
   158a4:	str	r1, [fp, #-56]	; 0xffffffc8
   158a8:	ldr	r1, [r0, #4]
   158ac:	str	r1, [fp, #-60]	; 0xffffffc4
   158b0:	ldr	r1, [r0, #8]
   158b4:	str	r1, [fp, #-52]	; 0xffffffcc
   158b8:	ldr	r0, [r0, #12]
   158bc:	str	r0, [fp, #-48]	; 0xffffffd0
   158c0:	mvn	r9, #63	; 0x3f
   158c4:	str	sl, [sp, #64]	; 0x40
   158c8:	str	r8, [sp, #60]	; 0x3c
   158cc:	b	159c8 <__assert_fail@plt+0x3f50>
   158d0:	mov	r0, r8
   158d4:	ldr	r8, [fp, #-44]	; 0xffffffd4
   158d8:	str	r8, [sp, #32]
   158dc:	str	r0, [sp, #36]	; 0x24
   158e0:	ldr	r0, [fp, #8]
   158e4:	str	r0, [sp, #40]	; 0x28
   158e8:	ldr	r0, [fp, #12]
   158ec:	str	r0, [sp, #44]	; 0x2c
   158f0:	ldr	r0, [fp, #-56]	; 0xffffffc8
   158f4:	str	r0, [sp]
   158f8:	ldr	r0, [fp, #-60]	; 0xffffffc4
   158fc:	stmib	sp, {r0, ip}
   15900:	str	r6, [sp, #12]
   15904:	str	r5, [sp, #16]
   15908:	str	lr, [sp, #20]
   1590c:	ldr	r0, [fp, #-32]	; 0xffffffe0
   15910:	str	r0, [sp, #24]
   15914:	str	sl, [sp, #28]
   15918:	ldr	r7, [fp, #-40]	; 0xffffffd8
   1591c:	mov	r0, r7
   15920:	ldr	r2, [fp, #-52]	; 0xffffffcc
   15924:	ldr	r3, [fp, #-48]	; 0xffffffd0
   15928:	str	lr, [sp, #56]	; 0x38
   1592c:	mov	sl, ip
   15930:	bl	15de4 <__assert_fail@plt+0x436c>
   15934:	mov	ip, sl
   15938:	ldr	lr, [sp, #56]	; 0x38
   1593c:	ldr	r2, [fp, #8]
   15940:	str	r0, [fp, #-56]	; 0xffffffc8
   15944:	str	r1, [fp, #-60]	; 0xffffffc4
   15948:	ldr	r1, [r7]
   1594c:	ldr	r0, [r7, #4]
   15950:	str	r1, [fp, #-52]	; 0xffffffcc
   15954:	ldr	r1, [fp, #12]
   15958:	str	r0, [fp, #-48]	; 0xffffffd0
   1595c:	ldr	r0, [fp, #-32]	; 0xffffffe0
   15960:	str	r8, [sp, #32]
   15964:	ldr	r8, [sp, #60]	; 0x3c
   15968:	str	r8, [sp, #36]	; 0x24
   1596c:	str	r2, [sp, #40]	; 0x28
   15970:	str	r1, [sp, #44]	; 0x2c
   15974:	stm	sp, {r5, lr}
   15978:	str	ip, [sp, #8]
   1597c:	str	r6, [sp, #12]
   15980:	str	r5, [sp, #16]
   15984:	str	lr, [sp, #20]
   15988:	str	r0, [sp, #24]
   1598c:	ldr	sl, [sp, #64]	; 0x40
   15990:	str	sl, [sp, #28]
   15994:	mov	r0, r7
   15998:	mov	r2, ip
   1599c:	mov	r3, r6
   159a0:	bl	15de4 <__assert_fail@plt+0x436c>
   159a4:	mov	r5, r0
   159a8:	mov	lr, r1
   159ac:	ldr	r2, [fp, #-36]	; 0xffffffdc
   159b0:	lsrs	r2, r2, #1
   159b4:	rrx	r4, r4
   159b8:	adds	r9, r9, #1
   159bc:	ldr	ip, [r7]
   159c0:	ldr	r6, [r7, #4]
   159c4:	bcs	159ec <__assert_fail@plt+0x3f74>
   159c8:	str	r2, [fp, #-36]	; 0xffffffdc
   159cc:	tst	r4, #1
   159d0:	bne	158d0 <__assert_fail@plt+0x3e58>
   159d4:	ldr	r7, [fp, #-40]	; 0xffffffd8
   159d8:	ldr	r8, [fp, #-44]	; 0xffffffd4
   159dc:	ldr	r0, [fp, #-32]	; 0xffffffe0
   159e0:	ldr	r1, [fp, #12]
   159e4:	ldr	r2, [fp, #8]
   159e8:	b	15960 <__assert_fail@plt+0x3ee8>
   159ec:	ldr	r0, [sp, #52]	; 0x34
   159f0:	ldr	r4, [r0, #8]
   159f4:	ldr	r9, [r0, #12]
   159f8:	orrs	r0, r4, r9
   159fc:	beq	15b08 <__assert_fail@plt+0x4090>
   15a00:	ldr	r3, [fp, #-40]	; 0xffffffd8
   15a04:	b	15aec <__assert_fail@plt+0x4074>
   15a08:	ldr	r0, [fp, #-44]	; 0xffffffd4
   15a0c:	str	r0, [sp, #32]
   15a10:	str	r8, [sp, #36]	; 0x24
   15a14:	str	r2, [sp, #40]	; 0x28
   15a18:	str	r1, [sp, #44]	; 0x2c
   15a1c:	ldr	r1, [fp, #-56]	; 0xffffffc8
   15a20:	str	r1, [sp]
   15a24:	ldr	r1, [fp, #-60]	; 0xffffffc4
   15a28:	stmib	sp, {r1, ip}
   15a2c:	str	r6, [sp, #12]
   15a30:	str	r5, [sp, #16]
   15a34:	str	lr, [sp, #20]
   15a38:	str	r7, [sp, #24]
   15a3c:	str	sl, [sp, #28]
   15a40:	mov	r0, r3
   15a44:	ldr	r2, [fp, #-52]	; 0xffffffcc
   15a48:	ldr	r3, [fp, #-48]	; 0xffffffd0
   15a4c:	mov	r7, lr
   15a50:	str	ip, [fp, #-36]	; 0xffffffdc
   15a54:	bl	15de4 <__assert_fail@plt+0x436c>
   15a58:	ldr	r3, [fp, #-40]	; 0xffffffd8
   15a5c:	ldr	ip, [fp, #-36]	; 0xffffffdc
   15a60:	mov	lr, r7
   15a64:	ldr	r2, [fp, #8]
   15a68:	str	r0, [fp, #-56]	; 0xffffffc8
   15a6c:	ldr	r7, [fp, #-32]	; 0xffffffe0
   15a70:	str	r1, [fp, #-60]	; 0xffffffc4
   15a74:	ldr	r1, [r3]
   15a78:	ldr	r0, [r3, #4]
   15a7c:	str	r0, [fp, #-48]	; 0xffffffd0
   15a80:	ldr	r0, [fp, #-44]	; 0xffffffd4
   15a84:	str	r1, [fp, #-52]	; 0xffffffcc
   15a88:	ldr	r1, [fp, #12]
   15a8c:	str	r0, [sp, #32]
   15a90:	str	r8, [sp, #36]	; 0x24
   15a94:	str	r2, [sp, #40]	; 0x28
   15a98:	str	r1, [sp, #44]	; 0x2c
   15a9c:	stm	sp, {r5, lr}
   15aa0:	str	ip, [sp, #8]
   15aa4:	str	r6, [sp, #12]
   15aa8:	str	r5, [sp, #16]
   15aac:	str	lr, [sp, #20]
   15ab0:	str	r7, [sp, #24]
   15ab4:	str	sl, [sp, #28]
   15ab8:	mov	r0, r3
   15abc:	mov	r2, ip
   15ac0:	mov	r3, r6
   15ac4:	bl	15de4 <__assert_fail@plt+0x436c>
   15ac8:	ldr	r3, [fp, #-40]	; 0xffffffd8
   15acc:	mov	r5, r0
   15ad0:	mov	lr, r1
   15ad4:	lsrs	r9, r9, #1
   15ad8:	rrx	r4, r4
   15adc:	orrs	r0, r4, r9
   15ae0:	ldr	ip, [r3]
   15ae4:	ldr	r6, [r3, #4]
   15ae8:	beq	15b0c <__assert_fail@plt+0x4094>
   15aec:	tst	r4, #1
   15af0:	ldr	r7, [fp, #-32]	; 0xffffffe0
   15af4:	ldr	r1, [fp, #12]
   15af8:	ldr	r2, [fp, #8]
   15afc:	bne	15a08 <__assert_fail@plt+0x3f90>
   15b00:	ldr	r0, [fp, #-44]	; 0xffffffd4
   15b04:	b	15a8c <__assert_fail@plt+0x4014>
   15b08:	ldr	r3, [fp, #-40]	; 0xffffffd8
   15b0c:	ldr	r0, [fp, #-52]	; 0xffffffcc
   15b10:	ldr	r1, [fp, #-48]	; 0xffffffd0
   15b14:	strd	r0, [r3]
   15b18:	ldr	r0, [fp, #-56]	; 0xffffffc8
   15b1c:	ldr	r1, [fp, #-60]	; 0xffffffc4
   15b20:	sub	sp, fp, #28
   15b24:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15b28:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15b2c:	add	fp, sp, #28
   15b30:	sub	sp, sp, #36	; 0x24
   15b34:	mov	r6, r1
   15b38:	mov	r7, r0
   15b3c:	str	r3, [sp, #28]
   15b40:	str	r2, [sp, #24]
   15b44:	stm	sp, {r0, r1, r2, r3}
   15b48:	ldr	r4, [fp, #36]	; 0x24
   15b4c:	str	r4, [sp, #20]
   15b50:	ldr	r5, [fp, #32]
   15b54:	str	r5, [sp, #16]
   15b58:	add	r3, fp, #8
   15b5c:	ldm	r3, {r0, r1, r2, r3}
   15b60:	bl	15c18 <__assert_fail@plt+0x41a0>
   15b64:	eor	r2, r1, r4
   15b68:	eor	r3, r0, r5
   15b6c:	orr	r2, r3, r2
   15b70:	subs	r8, r7, r5
   15b74:	str	r6, [sp, #32]
   15b78:	sbc	r9, r6, r4
   15b7c:	mov	r5, #1
   15b80:	cmp	r2, #0
   15b84:	eorne	r2, r0, r8
   15b88:	eorne	r3, r1, r9
   15b8c:	orrsne	r2, r2, r3
   15b90:	beq	15c0c <__assert_fail@plt+0x4194>
   15b94:	ldr	r6, [fp, #24]
   15b98:	cmp	r6, #2
   15b9c:	bcc	15c00 <__assert_fail@plt+0x4188>
   15ba0:	mov	sl, #2
   15ba4:	ldr	r4, [sp, #28]
   15ba8:	ldr	r5, [sp, #24]
   15bac:	str	r7, [sp]
   15bb0:	ldr	r2, [sp, #32]
   15bb4:	stmib	sp, {r2, r5}
   15bb8:	str	r4, [sp, #12]
   15bbc:	mov	r2, r0
   15bc0:	mov	r3, r1
   15bc4:	bl	15cfc <__assert_fail@plt+0x4284>
   15bc8:	eor	r2, r1, r9
   15bcc:	eor	r3, r0, r8
   15bd0:	orrs	r2, r3, r2
   15bd4:	beq	15c08 <__assert_fail@plt+0x4190>
   15bd8:	ldr	r2, [fp, #32]
   15bdc:	eor	r2, r0, r2
   15be0:	ldr	r3, [fp, #36]	; 0x24
   15be4:	eor	r3, r1, r3
   15be8:	orrs	r2, r2, r3
   15bec:	beq	15c00 <__assert_fail@plt+0x4188>
   15bf0:	add	r2, sl, #1
   15bf4:	cmp	sl, r6
   15bf8:	mov	sl, r2
   15bfc:	bcc	15bac <__assert_fail@plt+0x4134>
   15c00:	mov	r5, #0
   15c04:	b	15c0c <__assert_fail@plt+0x4194>
   15c08:	mov	r5, #1
   15c0c:	mov	r0, r5
   15c10:	sub	sp, fp, #28
   15c14:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15c18:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15c1c:	add	fp, sp, #28
   15c20:	sub	sp, sp, #28
   15c24:	mov	r5, r0
   15c28:	ands	r0, r2, #1
   15c2c:	ldr	r0, [fp, #28]
   15c30:	movne	r0, r1
   15c34:	str	r0, [sp, #24]
   15c38:	ldr	r0, [fp, #24]
   15c3c:	movne	r0, r5
   15c40:	str	r0, [sp, #20]
   15c44:	orrs	r0, r2, r3
   15c48:	beq	15cec <__assert_fail@plt+0x4274>
   15c4c:	mov	r7, r2
   15c50:	mov	r4, r1
   15c54:	ldr	r0, [fp, #20]
   15c58:	add	r9, fp, #8
   15c5c:	ldm	r9, {r6, r8, r9}
   15c60:	b	15c7c <__assert_fail@plt+0x4204>
   15c64:	orrs	r0, sl, r3
   15c68:	mov	r7, sl
   15c6c:	ldr	r0, [fp, #20]
   15c70:	add	r9, fp, #8
   15c74:	ldm	r9, {r6, r8, r9}
   15c78:	beq	15cec <__assert_fail@plt+0x4274>
   15c7c:	stm	sp, {r6, r8, r9}
   15c80:	str	r0, [sp, #12]
   15c84:	mov	r0, r5
   15c88:	mov	r1, r4
   15c8c:	mov	r2, r5
   15c90:	mov	r5, r3
   15c94:	mov	r3, r4
   15c98:	bl	15cfc <__assert_fail@plt+0x4284>
   15c9c:	mov	r3, r5
   15ca0:	mov	r5, r0
   15ca4:	mov	r4, r1
   15ca8:	lsrs	r3, r3, #1
   15cac:	rrx	sl, r7
   15cb0:	tst	r7, #2
   15cb4:	beq	15c64 <__assert_fail@plt+0x41ec>
   15cb8:	stm	sp, {r6, r8, r9}
   15cbc:	ldr	r0, [fp, #20]
   15cc0:	str	r0, [sp, #12]
   15cc4:	ldr	r0, [sp, #20]
   15cc8:	ldr	r1, [sp, #24]
   15ccc:	mov	r2, r5
   15cd0:	mov	r6, r3
   15cd4:	mov	r3, r4
   15cd8:	bl	15cfc <__assert_fail@plt+0x4284>
   15cdc:	mov	r3, r6
   15ce0:	str	r0, [sp, #20]
   15ce4:	str	r1, [sp, #24]
   15ce8:	b	15c64 <__assert_fail@plt+0x41ec>
   15cec:	ldr	r0, [sp, #20]
   15cf0:	ldr	r1, [sp, #24]
   15cf4:	sub	sp, fp, #28
   15cf8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15cfc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15d00:	add	fp, sp, #28
   15d04:	sub	sp, sp, #12
   15d08:	mov	r4, r3
   15d0c:	str	r3, [sp, #8]
   15d10:	mov	lr, r1
   15d14:	umull	ip, r3, r2, r0
   15d18:	ldr	r1, [fp, #16]
   15d1c:	umull	r5, r6, ip, r1
   15d20:	ldr	r7, [fp, #20]
   15d24:	mla	r7, ip, r7, r6
   15d28:	umull	r0, r6, r4, r0
   15d2c:	umlal	r0, r6, r2, lr
   15d30:	adds	ip, r0, r3
   15d34:	mla	r4, ip, r1, r7
   15d38:	ldr	r0, [fp, #12]
   15d3c:	umull	r1, r7, r4, r0
   15d40:	str	r1, [sp, #4]
   15d44:	ldr	r8, [fp, #8]
   15d48:	umull	r9, sl, r4, r8
   15d4c:	umull	r0, r1, r5, r0
   15d50:	umlal	r0, r1, r4, r8
   15d54:	adc	r4, r6, #0
   15d58:	umull	r5, r6, r5, r8
   15d5c:	adds	r0, r0, r6
   15d60:	adc	r1, r1, #0
   15d64:	mov	r5, #0
   15d68:	subs	r0, r0, r9
   15d6c:	sbcs	r0, r1, sl
   15d70:	mov	r0, #0
   15d74:	movwcc	r0, #1
   15d78:	cmp	r0, #0
   15d7c:	addne	r7, r7, #1
   15d80:	ldr	r0, [sp, #4]
   15d84:	adds	r0, r0, r1
   15d88:	adc	r1, r7, #0
   15d8c:	umull	r2, r6, r2, lr
   15d90:	subs	r2, ip, r2
   15d94:	sbcs	r2, r4, r6
   15d98:	mov	r2, #0
   15d9c:	movwcc	r2, #1
   15da0:	ldr	r3, [sp, #8]
   15da4:	umull	r3, r7, r3, lr
   15da8:	cmp	r2, #0
   15dac:	addne	r7, r7, #1
   15db0:	adds	r2, r3, r4
   15db4:	adc	r3, r7, #0
   15db8:	subs	r2, r2, r0
   15dbc:	sbcs	r3, r3, r1
   15dc0:	movwcc	r5, #1
   15dc4:	adds	r0, r2, r8
   15dc8:	ldr	r1, [fp, #12]
   15dcc:	adc	r1, r3, r1
   15dd0:	cmp	r5, #0
   15dd4:	moveq	r1, r3
   15dd8:	moveq	r0, r2
   15ddc:	sub	sp, fp, #28
   15de0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15de4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15de8:	add	fp, sp, #28
   15dec:	sub	sp, sp, #84	; 0x54
   15df0:	ldr	r7, [fp, #52]	; 0x34
   15df4:	ldr	r1, [fp, #48]	; 0x30
   15df8:	rsbs	r4, r1, #0
   15dfc:	rsc	ip, r7, #0
   15e00:	cmn	r3, #1
   15e04:	ble	16350 <__assert_fail@plt+0x48d8>
   15e08:	mvn	r6, #0
   15e0c:	ldr	r7, [fp, #20]
   15e10:	ldr	r1, [fp, #16]
   15e14:	subs	r1, r6, r1
   15e18:	sbcs	r1, r6, r7
   15e1c:	bge	16370 <__assert_fail@plt+0x48f8>
   15e20:	sub	r1, fp, #40	; 0x28
   15e24:	stm	r1, {r0, r2, r3}
   15e28:	ldr	r2, [fp, #36]	; 0x24
   15e2c:	ldr	r0, [fp, #32]
   15e30:	subs	r1, r6, r0
   15e34:	sbcs	r0, r6, r2
   15e38:	bge	16390 <__assert_fail@plt+0x4918>
   15e3c:	ldr	r5, [fp, #44]	; 0x2c
   15e40:	ldr	sl, [fp, #40]	; 0x28
   15e44:	ldr	lr, [fp, #28]
   15e48:	ldr	r7, [fp, #24]
   15e4c:	ldr	r8, [fp, #12]
   15e50:	ldr	r2, [fp, #8]
   15e54:	umull	r3, r0, r7, r2
   15e58:	str	r3, [sp, #32]
   15e5c:	umull	r9, r1, r3, r4
   15e60:	mla	r3, r3, ip, r1
   15e64:	umull	r1, r6, lr, r2
   15e68:	mov	lr, r2
   15e6c:	umlal	r1, r6, r7, r8
   15e70:	mov	r7, r8
   15e74:	adds	r0, r1, r0
   15e78:	str	r0, [sp, #28]
   15e7c:	mla	r0, r0, r4, r3
   15e80:	umull	r1, r2, r0, r5
   15e84:	str	r2, [sp, #24]
   15e88:	str	r1, [sp, #36]	; 0x24
   15e8c:	umull	r2, r1, r0, sl
   15e90:	str	r2, [sp, #16]
   15e94:	str	r1, [sp, #20]
   15e98:	umull	r2, r1, r9, r5
   15e9c:	umlal	r2, r1, r0, sl
   15ea0:	str	r2, [sp, #8]
   15ea4:	str	r1, [sp, #12]
   15ea8:	ldr	r1, [fp, #36]	; 0x24
   15eac:	umull	r1, sl, r0, r1
   15eb0:	str	r1, [sp, #4]
   15eb4:	ldr	r1, [fp, #32]
   15eb8:	str	r4, [fp, #-48]	; 0xffffffd0
   15ebc:	str	ip, [fp, #-44]	; 0xffffffd4
   15ec0:	umull	r8, ip, r0, r1
   15ec4:	ldr	r1, [fp, #36]	; 0x24
   15ec8:	umull	r3, r2, r9, r1
   15ecc:	ldr	r1, [fp, #32]
   15ed0:	umlal	r3, r2, r0, r1
   15ed4:	adc	r0, r6, #0
   15ed8:	str	r0, [sp, #40]	; 0x28
   15edc:	ldr	r0, [fp, #32]
   15ee0:	umull	r1, r0, r9, r0
   15ee4:	str	r1, [sp, #48]	; 0x30
   15ee8:	adds	r0, r3, r0
   15eec:	str	r0, [sp, #44]	; 0x2c
   15ef0:	adc	r6, r2, #0
   15ef4:	subs	r0, r0, r8
   15ef8:	sbcs	r0, r6, ip
   15efc:	mov	r0, #0
   15f00:	movwcc	r0, #1
   15f04:	cmp	r0, #0
   15f08:	addne	sl, sl, #1
   15f0c:	ldr	r0, [fp, #20]
   15f10:	mov	r3, lr
   15f14:	umull	r1, r2, r0, lr
   15f18:	mov	r0, r7
   15f1c:	ldr	lr, [fp, #16]
   15f20:	umlal	r1, r2, lr, r7
   15f24:	umull	r7, r3, lr, r3
   15f28:	str	r7, [sp]
   15f2c:	adds	r4, r1, r3
   15f30:	adc	r2, r2, #0
   15f34:	umull	r3, r8, lr, r0
   15f38:	mov	r5, lr
   15f3c:	subs	r3, r4, r3
   15f40:	sbcs	r3, r2, r8
   15f44:	mov	r3, #0
   15f48:	movwcc	r3, #1
   15f4c:	ldr	r7, [fp, #20]
   15f50:	umull	r8, r0, r7, r0
   15f54:	cmp	r3, #0
   15f58:	addne	r0, r0, #1
   15f5c:	adds	lr, r8, r2
   15f60:	adc	ip, r0, #0
   15f64:	ldr	r0, [fp, #-36]	; 0xffffffdc
   15f68:	ldr	r2, [fp, #20]
   15f6c:	umull	r3, r8, r2, r0
   15f70:	ldr	r2, [fp, #-32]	; 0xffffffe0
   15f74:	umlal	r3, r8, r5, r2
   15f78:	umull	r2, r7, r5, r0
   15f7c:	str	r2, [sp, #56]	; 0x38
   15f80:	adds	r7, r3, r7
   15f84:	str	r7, [sp, #52]	; 0x34
   15f88:	adc	r3, r8, #0
   15f8c:	str	r3, [fp, #-52]	; 0xffffffcc
   15f90:	adds	r2, lr, r2
   15f94:	adc	r0, ip, r7
   15f98:	adds	r2, r2, r6
   15f9c:	adc	r0, r0, #0
   15fa0:	ldr	r3, [sp, #4]
   15fa4:	adds	r2, r2, r3
   15fa8:	str	r2, [sp, #4]
   15fac:	adc	r8, r0, sl
   15fb0:	adds	sl, r2, #1
   15fb4:	adc	ip, r8, #0
   15fb8:	ldr	r2, [fp, #40]	; 0x28
   15fbc:	umull	r2, r7, r9, r2
   15fc0:	ldr	r0, [sp, #8]
   15fc4:	adds	r2, r0, r7
   15fc8:	ldr	r0, [sp, #12]
   15fcc:	adc	r7, r0, #0
   15fd0:	ldr	r0, [sp, #16]
   15fd4:	subs	r2, r2, r0
   15fd8:	ldr	r0, [sp, #20]
   15fdc:	sbcs	r2, r7, r0
   15fe0:	mov	r2, #0
   15fe4:	movwcc	r2, #1
   15fe8:	cmp	r2, #0
   15fec:	ldr	r0, [sp, #24]
   15ff0:	addne	r0, r0, #1
   15ff4:	ldr	r3, [sp, #28]
   15ff8:	ldr	r2, [sp, #32]
   15ffc:	orrs	r2, r2, r3
   16000:	mov	r2, #1
   16004:	ldr	r5, [fp, #8]
   16008:	ldr	r6, [fp, #16]
   1600c:	umlal	r2, r1, r6, r5
   16010:	moveq	r1, r4
   16014:	ldr	r5, [sp]
   16018:	moveq	r2, r5
   1601c:	adds	r7, r7, r2
   16020:	adc	r5, r1, #0
   16024:	ldr	r4, [sp, #36]	; 0x24
   16028:	adds	r7, r7, r4
   1602c:	adc	lr, r5, r0
   16030:	subs	r2, r7, r2
   16034:	sbcs	r1, lr, r1
   16038:	mov	r1, #0
   1603c:	movwcc	r1, #1
   16040:	cmp	r1, #0
   16044:	moveq	ip, r8
   16048:	ldr	r0, [sp, #4]
   1604c:	moveq	sl, r0
   16050:	ldr	r4, [fp, #24]
   16054:	ldr	r2, [fp, #12]
   16058:	umull	r0, r1, r4, r2
   1605c:	subs	r0, r3, r0
   16060:	ldr	r5, [sp, #40]	; 0x28
   16064:	sbcs	r0, r5, r1
   16068:	mov	r0, #0
   1606c:	movwcc	r0, #1
   16070:	ldr	r3, [fp, #28]
   16074:	umull	r1, r2, r3, r2
   16078:	cmp	r0, #0
   1607c:	addne	r2, r2, #1
   16080:	adds	r0, r1, r5
   16084:	adc	r1, r2, #0
   16088:	adds	r0, r0, r7
   1608c:	adcs	r1, r1, lr
   16090:	adcs	r8, sl, #0
   16094:	adc	sl, ip, #0
   16098:	ldr	r2, [sp, #48]	; 0x30
   1609c:	adds	r9, r0, r2
   160a0:	ldr	r0, [sp, #44]	; 0x2c
   160a4:	adcs	r1, r1, r0
   160a8:	mrs	lr, CPSR
   160ac:	ldr	r2, [fp, #-36]	; 0xffffffdc
   160b0:	umull	r6, r5, r3, r2
   160b4:	mov	r7, r3
   160b8:	ldr	r0, [fp, #-32]	; 0xffffffe0
   160bc:	mov	r3, r4
   160c0:	umlal	r6, r5, r4, r0
   160c4:	umull	r2, r4, r4, r2
   160c8:	adds	r4, r6, r4
   160cc:	adc	r6, r5, #0
   160d0:	umull	r5, r3, r3, r0
   160d4:	subs	r5, r4, r5
   160d8:	sbcs	r3, r6, r3
   160dc:	mov	r3, #0
   160e0:	movwcc	r3, #1
   160e4:	umull	r5, r7, r7, r0
   160e8:	cmp	r3, #0
   160ec:	addne	r7, r7, #1
   160f0:	adds	r0, r5, r6
   160f4:	adc	r7, r7, #0
   160f8:	adds	r5, r9, r2
   160fc:	str	r5, [sp, #36]	; 0x24
   16100:	adcs	r3, r1, r4
   16104:	str	r3, [sp, #32]
   16108:	adcs	r0, r0, #0
   1610c:	str	r0, [fp, #-36]	; 0xffffffdc
   16110:	adc	r0, r7, #0
   16114:	str	r0, [sp, #48]	; 0x30
   16118:	msr	CPSR_f, lr
   1611c:	adcs	ip, r8, #0
   16120:	str	ip, [sp, #16]
   16124:	adc	sl, sl, #0
   16128:	ldr	r1, [fp, #-48]	; 0xffffffd0
   1612c:	umull	r6, r0, r5, r1
   16130:	ldr	r2, [fp, #-44]	; 0xffffffd4
   16134:	mla	r0, r5, r2, r0
   16138:	mla	r4, r3, r1, r0
   1613c:	ldr	r0, [fp, #36]	; 0x24
   16140:	umull	r0, r2, r6, r0
   16144:	ldr	r1, [fp, #32]
   16148:	umlal	r0, r2, r4, r1
   1614c:	ldr	r1, [fp, #32]
   16150:	umull	r1, r7, r6, r1
   16154:	str	r1, [fp, #-44]	; 0xffffffd4
   16158:	adds	r1, r0, r7
   1615c:	str	r1, [fp, #-48]	; 0xffffffd0
   16160:	adc	r5, r2, #0
   16164:	ldr	r0, [fp, #32]
   16168:	umull	r0, r2, r4, r0
   1616c:	subs	r0, r1, r0
   16170:	sbcs	r0, r5, r2
   16174:	mov	r0, #0
   16178:	movwcc	r0, #1
   1617c:	ldr	r1, [fp, #44]	; 0x2c
   16180:	umull	r2, r3, r4, r1
   16184:	str	r3, [sp, #40]	; 0x28
   16188:	str	r2, [sp, #44]	; 0x2c
   1618c:	ldr	r2, [fp, #40]	; 0x28
   16190:	umull	r7, r3, r4, r2
   16194:	str	r7, [sp, #24]
   16198:	str	r3, [sp, #28]
   1619c:	umull	r7, r9, r6, r1
   161a0:	umlal	r7, r9, r4, r2
   161a4:	ldr	r1, [fp, #36]	; 0x24
   161a8:	umull	r1, lr, r4, r1
   161ac:	str	r1, [sp, #20]
   161b0:	cmp	r0, #0
   161b4:	addne	lr, lr, #1
   161b8:	ldr	r0, [sp, #56]	; 0x38
   161bc:	subs	r0, ip, r0
   161c0:	ldr	r0, [sp, #52]	; 0x34
   161c4:	sbcs	r0, sl, r0
   161c8:	mov	r2, #0
   161cc:	movwcc	r2, #1
   161d0:	ldr	r8, [fp, #-52]	; 0xffffffcc
   161d4:	mov	r3, r8
   161d8:	ldr	r4, [fp, #20]
   161dc:	mov	r1, #1
   161e0:	ldr	ip, [fp, #-32]	; 0xffffffe0
   161e4:	umaal	r3, r1, r4, ip
   161e8:	mov	r0, #0
   161ec:	umlal	r8, r0, r4, ip
   161f0:	cmp	r2, #0
   161f4:	movne	r0, r1
   161f8:	movne	r8, r3
   161fc:	adds	r1, r8, r5
   16200:	adc	r5, r0, #0
   16204:	ldr	r0, [sp, #20]
   16208:	adds	r0, r1, r0
   1620c:	str	r0, [fp, #-32]	; 0xffffffe0
   16210:	adc	lr, r5, lr
   16214:	adds	r8, r0, #1
   16218:	adc	r4, lr, #0
   1621c:	ldr	r3, [sp, #16]
   16220:	adds	r2, r3, #1
   16224:	adc	r5, sl, #0
   16228:	ldr	r0, [sp, #36]	; 0x24
   1622c:	ldr	r1, [sp, #32]
   16230:	orrs	r0, r0, r1
   16234:	moveq	r5, sl
   16238:	moveq	r2, r3
   1623c:	ldr	r0, [fp, #40]	; 0x28
   16240:	umull	r0, r6, r6, r0
   16244:	adds	r0, r7, r6
   16248:	adc	r3, r9, #0
   1624c:	ldr	r9, [fp, #44]	; 0x2c
   16250:	adds	r6, r3, r2
   16254:	adc	ip, r5, #0
   16258:	ldr	r1, [sp, #24]
   1625c:	subs	r0, r0, r1
   16260:	ldr	r0, [sp, #28]
   16264:	sbcs	r0, r3, r0
   16268:	mov	r0, #0
   1626c:	movwcc	r0, #1
   16270:	cmp	r0, #0
   16274:	ldr	r3, [sp, #40]	; 0x28
   16278:	addne	r3, r3, #1
   1627c:	ldr	r0, [sp, #44]	; 0x2c
   16280:	adds	r0, r6, r0
   16284:	adc	r3, ip, r3
   16288:	ldr	ip, [fp, #32]
   1628c:	subs	r2, r0, r2
   16290:	sbcs	r2, r3, r5
   16294:	mov	r2, #0
   16298:	movwcc	r2, #1
   1629c:	cmp	r2, #0
   162a0:	moveq	r4, lr
   162a4:	ldr	r1, [fp, #-32]	; 0xffffffe0
   162a8:	moveq	r8, r1
   162ac:	ldr	r1, [fp, #-36]	; 0xffffffdc
   162b0:	adds	r0, r1, r0
   162b4:	ldr	r1, [sp, #48]	; 0x30
   162b8:	adcs	r1, r1, r3
   162bc:	adcs	r3, r8, #0
   162c0:	ldr	r5, [fp, #36]	; 0x24
   162c4:	adc	r7, r4, #0
   162c8:	ldr	r2, [fp, #-44]	; 0xffffffd4
   162cc:	adds	r2, r0, r2
   162d0:	ldr	r0, [fp, #-48]	; 0xffffffd0
   162d4:	adcs	r1, r1, r0
   162d8:	adcs	r0, r3, #0
   162dc:	adc	r3, r7, #0
   162e0:	subs	r7, ip, r0
   162e4:	sbcs	r7, r5, r3
   162e8:	bcc	1630c <__assert_fail@plt+0x4894>
   162ec:	ldr	r4, [fp, #40]	; 0x28
   162f0:	subs	r7, r2, r4
   162f4:	sbcs	r7, r1, r9
   162f8:	bcc	1633c <__assert_fail@plt+0x48c4>
   162fc:	eor	r7, r0, ip
   16300:	eor	r6, r3, r5
   16304:	orrs	r7, r7, r6
   16308:	bne	1633c <__assert_fail@plt+0x48c4>
   1630c:	adds	r7, ip, #1
   16310:	adc	r6, r5, #0
   16314:	ldr	r4, [fp, #40]	; 0x28
   16318:	subs	r2, r2, r4
   1631c:	sbcs	r1, r1, r9
   16320:	mov	r4, #0
   16324:	movwcc	r4, #1
   16328:	cmp	r4, #0
   1632c:	moveq	r6, r5
   16330:	moveq	r7, ip
   16334:	subs	r0, r0, r7
   16338:	sbc	r3, r3, r6
   1633c:	ldr	r7, [fp, #-40]	; 0xffffffd8
   16340:	stm	r7, {r0, r3}
   16344:	mov	r0, r2
   16348:	sub	sp, fp, #28
   1634c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16350:	movw	r0, #51501	; 0xc92d
   16354:	movt	r0, #1
   16358:	movw	r1, #51392	; 0xc8c0
   1635c:	movt	r1, #1
   16360:	movw	r3, #51532	; 0xc94c
   16364:	movt	r3, #1
   16368:	movw	r2, #993	; 0x3e1
   1636c:	bl	11a78 <__assert_fail@plt>
   16370:	movw	r0, #51641	; 0xc9b9
   16374:	movt	r0, #1
   16378:	movw	r1, #51392	; 0xc8c0
   1637c:	movt	r1, #1
   16380:	movw	r3, #51532	; 0xc94c
   16384:	movt	r3, #1
   16388:	movw	r2, #994	; 0x3e2
   1638c:	bl	11a78 <__assert_fail@plt>
   16390:	movw	r0, #51672	; 0xc9d8
   16394:	movt	r0, #1
   16398:	movw	r1, #51392	; 0xc8c0
   1639c:	movt	r1, #1
   163a0:	movw	r3, #51532	; 0xc94c
   163a4:	movt	r3, #1
   163a8:	movw	r2, #995	; 0x3e3
   163ac:	bl	11a78 <__assert_fail@plt>
   163b0:	push	{r4, r5, r6, sl, fp, lr}
   163b4:	add	fp, sp, #16
   163b8:	mov	ip, r3
   163bc:	mov	lr, r2
   163c0:	ands	r2, r2, #1
   163c4:	mov	r3, r1
   163c8:	moveq	r3, ip
   163cc:	mov	r4, r0
   163d0:	moveq	r4, lr
   163d4:	orr	r2, r4, r3
   163d8:	moveq	ip, r1
   163dc:	moveq	lr, r0
   163e0:	cmp	r2, #0
   163e4:	beq	16440 <__assert_fail@plt+0x49c8>
   163e8:	lsrs	r6, ip, #1
   163ec:	rrx	r1, lr
   163f0:	mov	ip, r3
   163f4:	mov	r2, r4
   163f8:	lsrs	r3, r3, #1
   163fc:	rrx	r4, r4
   16400:	tst	r2, #1
   16404:	beq	163f0 <__assert_fail@plt+0x4978>
   16408:	subs	r0, r4, r1
   1640c:	sbc	r5, r3, r6
   16410:	orrs	r3, r0, r5
   16414:	beq	1643c <__assert_fail@plt+0x49c4>
   16418:	eor	r2, r0, r5, asr #31
   1641c:	eor	r3, r5, r5, asr #31
   16420:	subs	r4, r2, r5, asr #31
   16424:	sbc	r3, r3, r5, asr #31
   16428:	and	r0, r0, r5, asr #31
   1642c:	and	r2, r5, r5, asr #31
   16430:	adds	r1, r0, r1
   16434:	adc	r6, r2, r6
   16438:	b	163f0 <__assert_fail@plt+0x4978>
   1643c:	orr	lr, r2, #1
   16440:	mov	r0, lr
   16444:	mov	r1, ip
   16448:	pop	{r4, r5, r6, sl, fp, pc}
   1644c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16450:	add	fp, sp, #28
   16454:	sub	sp, sp, #4
   16458:	ldr	ip, [fp, #24]
   1645c:	tst	ip, #1
   16460:	beq	16638 <__assert_fail@plt+0x4bc0>
   16464:	mov	r5, r3
   16468:	mov	lr, r2
   1646c:	ldr	r1, [fp, #28]
   16470:	add	sl, fp, #12
   16474:	ldm	sl, {r3, r9, sl}
   16478:	ldr	r8, [fp, #8]
   1647c:	orr	r2, r8, r2
   16480:	orr	r4, r3, r5
   16484:	orrs	r2, r2, r4
   16488:	beq	164c0 <__assert_fail@plt+0x4a48>
   1648c:	tst	r8, #1
   16490:	str	r0, [sp]
   16494:	bne	164d0 <__assert_fail@plt+0x4a58>
   16498:	lsrs	r5, r5, #1
   1649c:	rrx	r0, lr
   164a0:	lsrs	r3, r3, #1
   164a4:	rrx	r2, r8
   164a8:	orr	r3, r3, lr, lsl #31
   164ac:	tst	r8, #2
   164b0:	mov	lr, r0
   164b4:	mov	r8, r2
   164b8:	beq	16498 <__assert_fail@plt+0x4a20>
   164bc:	b	164d8 <__assert_fail@plt+0x4a60>
   164c0:	stm	r0, {r9, sl}
   164c4:	mov	r0, ip
   164c8:	sub	sp, fp, #28
   164cc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   164d0:	mov	r2, r8
   164d4:	mov	r0, lr
   164d8:	orr	r6, r0, r9
   164dc:	orr	r4, r5, sl
   164e0:	orrs	r6, r6, r4
   164e4:	bne	164fc <__assert_fail@plt+0x4a84>
   164e8:	b	16604 <__assert_fail@plt+0x4b8c>
   164ec:	orr	r7, r0, r9
   164f0:	orr	r6, r5, sl
   164f4:	orrs	r7, r7, r6
   164f8:	beq	16604 <__assert_fail@plt+0x4b8c>
   164fc:	subs	r6, r9, r0
   16500:	sbcs	r6, sl, r5
   16504:	bcc	16524 <__assert_fail@plt+0x4aac>
   16508:	subs	r6, ip, r2
   1650c:	sbcs	r6, r1, r3
   16510:	bcs	16578 <__assert_fail@plt+0x4b00>
   16514:	eor	r6, r0, r9
   16518:	eor	r4, r5, sl
   1651c:	orrs	r6, r6, r4
   16520:	bne	16578 <__assert_fail@plt+0x4b00>
   16524:	subs	r7, r0, r9
   16528:	sbc	lr, r5, sl
   1652c:	subs	r4, r7, #1
   16530:	sbc	r5, lr, #0
   16534:	subs	r6, r2, ip
   16538:	sbcs	r3, r3, r1
   1653c:	mov	r2, #0
   16540:	movwcc	r2, #1
   16544:	cmp	r2, #0
   16548:	moveq	r4, r7
   1654c:	moveq	r5, lr
   16550:	lsrs	r5, r5, #1
   16554:	rrx	r0, r4
   16558:	lsrs	r3, r3, #1
   1655c:	rrx	r2, r6
   16560:	orr	r3, r3, r4, lsl #31
   16564:	tst	r6, #2
   16568:	mov	r6, r2
   1656c:	mov	r4, r0
   16570:	beq	16550 <__assert_fail@plt+0x4ad8>
   16574:	b	164ec <__assert_fail@plt+0x4a74>
   16578:	subs	r6, r2, ip
   1657c:	sbcs	r6, r3, r1
   16580:	mov	r6, #0
   16584:	movwcc	r6, #1
   16588:	subs	r4, r0, r9
   1658c:	sbcs	r4, r5, sl
   16590:	bcc	165b0 <__assert_fail@plt+0x4b38>
   16594:	eor	lr, r0, r9
   16598:	eor	r4, r5, sl
   1659c:	orr	r4, lr, r4
   165a0:	clz	r4, r4
   165a4:	lsr	r4, r4, #5
   165a8:	ands	r6, r6, r4
   165ac:	beq	16624 <__assert_fail@plt+0x4bac>
   165b0:	subs	lr, r9, r0
   165b4:	sbc	r8, sl, r5
   165b8:	subs	r6, lr, #1
   165bc:	sbc	sl, r8, #0
   165c0:	subs	r4, ip, r2
   165c4:	sbcs	r1, r1, r3
   165c8:	mov	r7, #0
   165cc:	movwcc	r7, #1
   165d0:	cmp	r7, #0
   165d4:	moveq	r6, lr
   165d8:	moveq	sl, r8
   165dc:	lsrs	sl, sl, #1
   165e0:	rrx	r9, r6
   165e4:	lsrs	r1, r1, #1
   165e8:	rrx	ip, r4
   165ec:	orr	r1, r1, r6, lsl #31
   165f0:	tst	r4, #2
   165f4:	mov	r6, r9
   165f8:	mov	r4, ip
   165fc:	beq	165dc <__assert_fail@plt+0x4b64>
   16600:	b	164ec <__assert_fail@plt+0x4a74>
   16604:	mov	r7, #0
   16608:	ldr	r0, [sp]
   1660c:	str	r7, [r0]
   16610:	str	r7, [r0, #4]
   16614:	mov	r0, ip
   16618:	sub	sp, fp, #28
   1661c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16620:	b	163b0 <__assert_fail@plt+0x4938>
   16624:	ldr	r1, [sp]
   16628:	stm	r1, {r0, r5}
   1662c:	mov	ip, r2
   16630:	mov	r1, r3
   16634:	b	164c4 <__assert_fail@plt+0x4a4c>
   16638:	movw	r0, #51872	; 0xcaa0
   1663c:	movt	r0, #1
   16640:	movw	r1, #51392	; 0xc8c0
   16644:	movt	r1, #1
   16648:	movw	r3, #51879	; 0xcaa7
   1664c:	movt	r3, #1
   16650:	mov	r2, #476	; 0x1dc
   16654:	bl	11a78 <__assert_fail@plt>
   16658:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1665c:	add	fp, sp, #28
   16660:	push	{r0}		; (str r0, [sp, #-4]!)
   16664:	ldr	ip, [fp, #20]
   16668:	ldr	r0, [fp, #16]
   1666c:	orrs	r1, r0, ip
   16670:	beq	16868 <__assert_fail@plt+0x4df0>
   16674:	mov	sl, r3
   16678:	mov	r9, r2
   1667c:	ldr	r1, [fp, #12]
   16680:	ldr	r8, [fp, #8]
   16684:	orrs	r2, r2, r3
   16688:	beq	1684c <__assert_fail@plt+0x4dd4>
   1668c:	mov	r3, #0
   16690:	cmp	r3, ip, lsr #24
   16694:	mov	r4, r0
   16698:	mov	r6, ip
   1669c:	bne	166c4 <__assert_fail@plt+0x4c4c>
   166a0:	mov	r3, #0
   166a4:	mov	r4, r0
   166a8:	mov	r6, ip
   166ac:	lsl	r2, r6, #8
   166b0:	orr	r6, r2, r4, lsr #24
   166b4:	lsl	r4, r4, #8
   166b8:	add	r3, r3, #8
   166bc:	cmp	r6, #16777216	; 0x1000000
   166c0:	bcc	166ac <__assert_fail@plt+0x4c34>
   166c4:	mvn	r2, #0
   166c8:	cmp	r6, #0
   166cc:	bmi	166f0 <__assert_fail@plt+0x4c78>
   166d0:	lsl	r5, r6, #1
   166d4:	orr	r6, r5, r4, lsr #31
   166d8:	lsl	r5, r4, #1
   166dc:	add	r3, r3, #1
   166e0:	subs	r4, r2, r4, lsl #1
   166e4:	sbcs	r4, r2, r6
   166e8:	mov	r4, r5
   166ec:	blt	166d0 <__assert_fail@plt+0x4c58>
   166f0:	mov	r6, #0
   166f4:	cmp	r6, sl, lsr #24
   166f8:	mov	r4, r9
   166fc:	mov	r7, sl
   16700:	bne	16728 <__assert_fail@plt+0x4cb0>
   16704:	mov	r6, #0
   16708:	mov	r4, r9
   1670c:	mov	r7, sl
   16710:	lsl	r5, r7, #8
   16714:	orr	r7, r5, r4, lsr #24
   16718:	lsl	r4, r4, #8
   1671c:	add	r6, r6, #8
   16720:	cmp	r7, #16777216	; 0x1000000
   16724:	bcc	16710 <__assert_fail@plt+0x4c98>
   16728:	subs	r5, r2, r4
   1672c:	sbcs	r5, r2, r7
   16730:	bge	16754 <__assert_fail@plt+0x4cdc>
   16734:	lsl	r5, r7, #1
   16738:	orr	r7, r5, r4, lsr #31
   1673c:	lsl	r5, r4, #1
   16740:	add	r6, r6, #1
   16744:	subs	r4, r2, r4, lsl #1
   16748:	sbcs	r4, r2, r7
   1674c:	mov	r4, r5
   16750:	blt	16734 <__assert_fail@plt+0x4cbc>
   16754:	sub	lr, r3, r6
   16758:	cmp	lr, #1
   1675c:	blt	16854 <__assert_fail@plt+0x4ddc>
   16760:	ldr	r7, [fp, #28]
   16764:	rsb	r6, lr, #32
   16768:	mov	r4, r0
   1676c:	lsr	r2, r0, r6
   16770:	orr	r2, r2, ip, lsl lr
   16774:	subs	r3, lr, #32
   16778:	lslpl	r2, r0, r3
   1677c:	rsb	r5, lr, #64	; 0x40
   16780:	lsr	ip, r7, r5
   16784:	cmp	r6, #0
   16788:	movwpl	ip, #0
   1678c:	orr	r2, ip, r2
   16790:	ldr	ip, [fp, #24]
   16794:	lsr	r0, ip, r5
   16798:	rsb	r5, r5, #32
   1679c:	orr	r0, r0, r7, lsl r5
   167a0:	cmp	r6, #0
   167a4:	lsrpl	r0, r7, r6
   167a8:	lsl	r5, r4, lr
   167ac:	cmp	r3, #0
   167b0:	movwpl	r5, #0
   167b4:	orr	r5, r0, r5
   167b8:	lsr	r0, ip, r6
   167bc:	orr	r6, r0, r7, lsl lr
   167c0:	lslpl	r6, ip, r3
   167c4:	lsl	r7, ip, lr
   167c8:	cmp	r3, #0
   167cc:	movwpl	r7, #0
   167d0:	b	1681c <__assert_fail@plt+0x4da4>
   167d4:	subs	r0, r9, r4
   167d8:	sbc	r5, sl, r2
   167dc:	subs	r9, r0, #1
   167e0:	sbc	sl, r5, #0
   167e4:	subs	r8, r8, r7
   167e8:	sbcs	r1, r1, r6
   167ec:	mov	r3, #0
   167f0:	movwcc	r3, #1
   167f4:	cmp	r3, #0
   167f8:	moveq	r9, r0
   167fc:	moveq	sl, r5
   16800:	lsrs	r2, r2, #1
   16804:	rrx	r5, r4
   16808:	lsrs	r0, r6, #1
   1680c:	rrx	r7, r7
   16810:	orr	r6, r0, r4, lsl #31
   16814:	subs	lr, lr, #1
   16818:	beq	16854 <__assert_fail@plt+0x4ddc>
   1681c:	mov	r4, r5
   16820:	subs	r0, r5, r9
   16824:	sbcs	r0, r2, sl
   16828:	bcc	167d4 <__assert_fail@plt+0x4d5c>
   1682c:	subs	r0, r8, r7
   16830:	sbcs	r0, r1, r6
   16834:	bcc	16800 <__assert_fail@plt+0x4d88>
   16838:	eor	r0, r9, r4
   1683c:	eor	r5, sl, r2
   16840:	orrs	r0, r0, r5
   16844:	beq	167d4 <__assert_fail@plt+0x4d5c>
   16848:	b	16800 <__assert_fail@plt+0x4d88>
   1684c:	mov	r9, #0
   16850:	mov	sl, #0
   16854:	ldr	r0, [sp]
   16858:	stm	r0, {r9, sl}
   1685c:	mov	r0, r8
   16860:	sub	sp, fp, #28
   16864:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16868:	movw	r0, #51955	; 0xcaf3
   1686c:	movt	r0, #1
   16870:	movw	r1, #51392	; 0xc8c0
   16874:	movt	r1, #1
   16878:	movw	r3, #51963	; 0xcafb
   1687c:	movt	r3, #1
   16880:	movw	r2, #411	; 0x19b
   16884:	bl	11a78 <__assert_fail@plt>
   16888:	mov	r1, #0
   1688c:	str	r1, [r0]
   16890:	str	r1, [r0, #4]
   16894:	str	r1, [r0, #8]
   16898:	bx	lr
   1689c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   168a0:	add	fp, sp, #24
   168a4:	sub	sp, sp, #16
   168a8:	mov	r4, r1
   168ac:	mov	r5, r0
   168b0:	movw	r0, #4588	; 0x11ec
   168b4:	movt	r0, #3
   168b8:	ldrb	r0, [r0]
   168bc:	cmp	r0, #1
   168c0:	bne	168e0 <__assert_fail@plt+0x4e68>
   168c4:	movw	r0, #4568	; 0x11d8
   168c8:	movt	r0, #3
   168cc:	ldr	r0, [r0]
   168d0:	movw	r2, #52055	; 0xcb57
   168d4:	movt	r2, #1
   168d8:	mov	r1, #1
   168dc:	bl	1197c <__fprintf_chk@plt>
   168e0:	add	r0, sp, #4
   168e4:	bl	11a30 <__gmpz_init@plt>
   168e8:	mov	r0, r5
   168ec:	mov	r1, #0
   168f0:	bl	11688 <__gmpz_scan1@plt>
   168f4:	mov	r6, r0
   168f8:	mov	r0, r5
   168fc:	mov	r1, r5
   16900:	mov	r2, r6
   16904:	bl	11808 <__gmpz_fdiv_q_2exp@plt>
   16908:	cmp	r6, #0
   1690c:	beq	16924 <__assert_fail@plt+0x4eac>
   16910:	mov	r0, r4
   16914:	mov	r1, #2
   16918:	bl	170e0 <__assert_fail@plt+0x5668>
   1691c:	subs	r6, r6, #1
   16920:	bne	16910 <__assert_fail@plt+0x4e98>
   16924:	mov	r6, #3
   16928:	mov	r7, #1
   1692c:	movw	r8, #63064	; 0xf658
   16930:	movt	r8, #1
   16934:	b	1695c <__assert_fail@plt+0x4ee4>
   16938:	mov	r0, r5
   1693c:	mov	r1, r5
   16940:	mov	r2, r6
   16944:	bl	117a8 <__gmpz_tdiv_q_ui@plt>
   16948:	mov	r0, r4
   1694c:	mov	r1, r6
   16950:	bl	170e0 <__assert_fail@plt+0x5668>
   16954:	cmp	r7, #668	; 0x29c
   16958:	bhi	16998 <__assert_fail@plt+0x4f20>
   1695c:	mov	r0, r5
   16960:	mov	r1, r6
   16964:	bl	118f8 <__gmpz_divisible_ui_p@plt>
   16968:	cmp	r0, #0
   1696c:	bne	16938 <__assert_fail@plt+0x4ec0>
   16970:	ldrb	r0, [r8, r7]
   16974:	add	r6, r6, r0
   16978:	mul	r1, r6, r6
   1697c:	mov	r0, r5
   16980:	bl	11a24 <__gmpz_cmp_ui@plt>
   16984:	cmp	r0, #0
   16988:	bmi	16998 <__assert_fail@plt+0x4f20>
   1698c:	add	r7, r7, #1
   16990:	cmp	r7, #668	; 0x29c
   16994:	bls	1695c <__assert_fail@plt+0x4ee4>
   16998:	add	r0, sp, #4
   1699c:	bl	11904 <__gmpz_clear@plt>
   169a0:	sub	sp, fp, #24
   169a4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   169a8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   169ac:	add	fp, sp, #28
   169b0:	sub	sp, sp, #76	; 0x4c
   169b4:	mov	r4, r0
   169b8:	mov	r5, #1
   169bc:	mov	r1, #1
   169c0:	bl	11a24 <__gmpz_cmp_ui@plt>
   169c4:	cmp	r0, #1
   169c8:	blt	16b88 <__assert_fail@plt+0x5110>
   169cc:	movw	r1, #60793	; 0xed79
   169d0:	movt	r1, #381	; 0x17d
   169d4:	mov	r0, r4
   169d8:	bl	11a24 <__gmpz_cmp_ui@plt>
   169dc:	cmp	r0, #0
   169e0:	bmi	16bc0 <__assert_fail@plt+0x5148>
   169e4:	mov	r6, #0
   169e8:	str	r6, [sp]
   169ec:	sub	sl, fp, #40	; 0x28
   169f0:	add	r9, sp, #52	; 0x34
   169f4:	add	r7, sp, #40	; 0x28
   169f8:	add	r8, sp, #28
   169fc:	mov	r0, sl
   16a00:	mov	r1, r9
   16a04:	mov	r2, r7
   16a08:	mov	r3, r8
   16a0c:	bl	11778 <__gmpz_inits@plt>
   16a10:	mov	r0, r7
   16a14:	mov	r1, r4
   16a18:	mov	r2, #1
   16a1c:	bl	116c4 <__gmpz_sub_ui@plt>
   16a20:	mov	r0, r7
   16a24:	mov	r1, #0
   16a28:	bl	11688 <__gmpz_scan1@plt>
   16a2c:	mov	r5, r0
   16a30:	mov	r0, sl
   16a34:	mov	r1, r7
   16a38:	mov	r2, r5
   16a3c:	bl	1194c <__gmpz_tdiv_q_2exp@plt>
   16a40:	mov	r0, r9
   16a44:	mov	r1, #2
   16a48:	bl	116f4 <__gmpz_set_ui@plt>
   16a4c:	str	sl, [sp]
   16a50:	str	r5, [sp, #12]
   16a54:	str	r5, [sp, #4]
   16a58:	mov	r0, r4
   16a5c:	mov	r1, r7
   16a60:	mov	r2, r9
   16a64:	mov	r3, r8
   16a68:	bl	17118 <__assert_fail@plt+0x56a0>
   16a6c:	cmp	r0, #0
   16a70:	mov	r5, #0
   16a74:	beq	16ba8 <__assert_fail@plt+0x5130>
   16a78:	add	r5, sp, #28
   16a7c:	add	r6, sp, #40	; 0x28
   16a80:	mov	r0, r5
   16a84:	mov	r1, r6
   16a88:	bl	11784 <__gmpz_set@plt>
   16a8c:	add	r1, sp, #16
   16a90:	mov	r0, r5
   16a94:	bl	124c8 <__assert_fail@plt+0xa50>
   16a98:	mov	r8, #0
   16a9c:	add	r7, sp, #52	; 0x34
   16aa0:	ldr	r0, [sp, #24]
   16aa4:	cmp	r0, #0
   16aa8:	beq	16b90 <__assert_fail@plt+0x5118>
   16aac:	mov	sl, #1
   16ab0:	mov	r9, #0
   16ab4:	ldr	r0, [sp, #16]
   16ab8:	add	r2, r0, r9
   16abc:	mov	r0, r5
   16ac0:	mov	r1, r6
   16ac4:	bl	1176c <__gmpz_divexact@plt>
   16ac8:	mov	r0, r5
   16acc:	mov	r1, r7
   16ad0:	mov	r2, r5
   16ad4:	mov	r3, r4
   16ad8:	bl	11754 <__gmpz_powm@plt>
   16adc:	mov	r0, r5
   16ae0:	mov	r1, #1
   16ae4:	bl	11a24 <__gmpz_cmp_ui@plt>
   16ae8:	cmp	r0, #0
   16aec:	beq	16b08 <__assert_fail@plt+0x5090>
   16af0:	add	r9, r9, #12
   16af4:	add	r1, sl, #1
   16af8:	ldr	r2, [sp, #24]
   16afc:	cmp	sl, r2
   16b00:	mov	sl, r1
   16b04:	bcc	16ab4 <__assert_fail@plt+0x503c>
   16b08:	cmp	r0, #0
   16b0c:	bne	16b90 <__assert_fail@plt+0x5118>
   16b10:	movw	r0, #63064	; 0xf658
   16b14:	movt	r0, #1
   16b18:	ldrb	r2, [r0, r8]
   16b1c:	mov	r0, r7
   16b20:	mov	r1, r7
   16b24:	bl	1188c <__gmpz_add_ui@plt>
   16b28:	sub	r0, fp, #40	; 0x28
   16b2c:	str	r0, [sp]
   16b30:	ldr	r0, [sp, #12]
   16b34:	str	r0, [sp, #4]
   16b38:	mov	r0, r4
   16b3c:	mov	r1, r6
   16b40:	mov	r2, r7
   16b44:	mov	r3, r5
   16b48:	bl	17118 <__assert_fail@plt+0x56a0>
   16b4c:	cmp	r0, #0
   16b50:	beq	16b98 <__assert_fail@plt+0x5120>
   16b54:	add	r8, r8, #1
   16b58:	cmp	r8, #668	; 0x29c
   16b5c:	bne	16aa0 <__assert_fail@plt+0x5028>
   16b60:	movw	r1, #51405	; 0xc8cd
   16b64:	movt	r1, #1
   16b68:	mov	r0, #0
   16b6c:	mov	r2, #5
   16b70:	bl	11748 <dcgettext@plt>
   16b74:	mov	r2, r0
   16b78:	mov	r0, #0
   16b7c:	mov	r1, #0
   16b80:	bl	11844 <error@plt>
   16b84:	bl	11a60 <abort@plt>
   16b88:	mov	r5, #0
   16b8c:	b	16bc0 <__assert_fail@plt+0x5148>
   16b90:	mov	r5, #1
   16b94:	b	16b9c <__assert_fail@plt+0x5124>
   16b98:	mov	r5, #0
   16b9c:	add	r0, sp, #16
   16ba0:	bl	12574 <__assert_fail@plt+0xafc>
   16ba4:	mov	r6, #0
   16ba8:	str	r6, [sp]
   16bac:	sub	r0, fp, #40	; 0x28
   16bb0:	add	r1, sp, #52	; 0x34
   16bb4:	add	r2, sp, #40	; 0x28
   16bb8:	add	r3, sp, #28
   16bbc:	bl	116d0 <__gmpz_clears@plt>
   16bc0:	mov	r0, r5
   16bc4:	sub	sp, fp, #28
   16bc8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16bcc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16bd0:	add	fp, sp, #28
   16bd4:	sub	sp, sp, #20
   16bd8:	mov	sl, r1
   16bdc:	mov	r5, r0
   16be0:	ldr	r0, [r0]
   16be4:	ldr	r6, [r5, #4]
   16be8:	ldr	r4, [r5, #8]
   16bec:	subs	r8, r4, #1
   16bf0:	mov	r9, r8
   16bf4:	bmi	16c54 <__assert_fail@plt+0x51dc>
   16bf8:	str	r6, [sp, #16]
   16bfc:	add	r1, r8, r8, lsl #1
   16c00:	str	r0, [sp, #12]
   16c04:	add	r6, r0, r1, lsl #2
   16c08:	mov	r7, r4
   16c0c:	mov	r0, r6
   16c10:	mov	r1, sl
   16c14:	bl	119d0 <__gmpz_cmp@plt>
   16c18:	cmp	r0, #1
   16c1c:	blt	16c34 <__assert_fail@plt+0x51bc>
   16c20:	sub	r7, r7, #1
   16c24:	sub	r6, r6, #12
   16c28:	cmp	r7, #0
   16c2c:	bgt	16c0c <__assert_fail@plt+0x5194>
   16c30:	b	16c48 <__assert_fail@plt+0x51d0>
   16c34:	mov	r0, r6
   16c38:	mov	r1, sl
   16c3c:	bl	119d0 <__gmpz_cmp@plt>
   16c40:	cmp	r0, #0
   16c44:	beq	16d14 <__assert_fail@plt+0x529c>
   16c48:	sub	r9, r7, #1
   16c4c:	ldr	r6, [sp, #16]
   16c50:	ldr	r0, [sp, #12]
   16c54:	str	r5, [sp, #12]
   16c58:	add	r5, r4, r4, lsl #1
   16c5c:	mov	r1, #12
   16c60:	add	r1, r1, r5, lsl #2
   16c64:	bl	1a0b4 <__assert_fail@plt+0x863c>
   16c68:	mov	r7, r0
   16c6c:	add	r0, r4, #1
   16c70:	str	r0, [sp, #8]
   16c74:	lsl	r1, r0, #2
   16c78:	mov	r0, r6
   16c7c:	bl	1a0b4 <__assert_fail@plt+0x863c>
   16c80:	str	r0, [sp, #16]
   16c84:	str	r7, [sp, #4]
   16c88:	add	r6, r7, r5, lsl #2
   16c8c:	mov	r0, r6
   16c90:	bl	11a30 <__gmpz_init@plt>
   16c94:	cmp	r8, r9
   16c98:	ble	16cd4 <__assert_fail@plt+0x525c>
   16c9c:	ldr	r0, [sp, #16]
   16ca0:	add	r4, r0, r4, lsl #2
   16ca4:	mov	r5, r4
   16ca8:	sub	r7, r6, #12
   16cac:	mov	r0, r6
   16cb0:	mov	r1, r7
   16cb4:	bl	11784 <__gmpz_set@plt>
   16cb8:	ldr	r0, [r5, #-4]!
   16cbc:	str	r0, [r4]
   16cc0:	sub	r8, r8, #1
   16cc4:	cmp	r8, r9
   16cc8:	mov	r4, r5
   16ccc:	mov	r6, r7
   16cd0:	bgt	16ca8 <__assert_fail@plt+0x5230>
   16cd4:	add	r4, r9, #1
   16cd8:	add	r0, r4, r4, lsl #1
   16cdc:	ldr	r5, [sp, #4]
   16ce0:	add	r0, r5, r0, lsl #2
   16ce4:	mov	r1, sl
   16ce8:	bl	11784 <__gmpz_set@plt>
   16cec:	mov	r0, #1
   16cf0:	ldr	r1, [sp, #16]
   16cf4:	str	r0, [r1, r4, lsl #2]
   16cf8:	ldr	r0, [sp, #12]
   16cfc:	str	r5, [r0]
   16d00:	str	r1, [r0, #4]
   16d04:	ldr	r1, [sp, #8]
   16d08:	str	r1, [r0, #8]
   16d0c:	sub	sp, fp, #28
   16d10:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16d14:	ldr	r0, [sp, #16]
   16d18:	add	r0, r0, r7, lsl #2
   16d1c:	ldr	r1, [r0, #-4]
   16d20:	add	r1, r1, #1
   16d24:	str	r1, [r0, #-4]
   16d28:	sub	sp, fp, #28
   16d2c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16d30:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16d34:	add	fp, sp, #28
   16d38:	sub	sp, sp, #108	; 0x6c
   16d3c:	str	r2, [sp, #20]
   16d40:	mov	r9, r1
   16d44:	mov	r8, r0
   16d48:	movw	r0, #4588	; 0x11ec
   16d4c:	movt	r0, #3
   16d50:	ldrb	r0, [r0]
   16d54:	cmp	r0, #1
   16d58:	bne	16d7c <__assert_fail@plt+0x5304>
   16d5c:	movw	r0, #4568	; 0x11d8
   16d60:	movt	r0, #3
   16d64:	ldr	r0, [r0]
   16d68:	movw	r2, #52073	; 0xcb69
   16d6c:	movt	r2, #1
   16d70:	mov	r1, #1
   16d74:	mov	r3, r9
   16d78:	bl	1197c <__fprintf_chk@plt>
   16d7c:	add	r0, sp, #48	; 0x30
   16d80:	add	r1, sp, #36	; 0x24
   16d84:	mov	r6, #0
   16d88:	mov	r2, #0
   16d8c:	bl	11778 <__gmpz_inits@plt>
   16d90:	sub	r0, fp, #64	; 0x40
   16d94:	mov	r1, #2
   16d98:	bl	11880 <__gmpz_init_set_si@plt>
   16d9c:	sub	r0, fp, #40	; 0x28
   16da0:	mov	r1, #2
   16da4:	bl	11880 <__gmpz_init_set_si@plt>
   16da8:	sub	r0, fp, #52	; 0x34
   16dac:	mov	r1, #2
   16db0:	bl	11880 <__gmpz_init_set_si@plt>
   16db4:	add	r0, sp, #60	; 0x3c
   16db8:	mov	r4, #1
   16dbc:	mov	r1, #1
   16dc0:	bl	119c4 <__gmpz_init_set_ui@plt>
   16dc4:	mov	r0, r8
   16dc8:	mov	r1, #1
   16dcc:	bl	11a24 <__gmpz_cmp_ui@plt>
   16dd0:	cmp	r0, #0
   16dd4:	beq	170ac <__assert_fail@plt+0x5634>
   16dd8:	add	r0, r9, #1
   16ddc:	str	r0, [sp, #16]
   16de0:	add	r7, sp, #48	; 0x30
   16de4:	sub	r5, fp, #40	; 0x28
   16de8:	mov	r0, #1
   16dec:	str	r0, [sp, #24]
   16df0:	mov	r0, #0
   16df4:	str	r0, [sp, #28]
   16df8:	b	16e1c <__assert_fail@plt+0x53a4>
   16dfc:	mov	r0, r6
   16e00:	mov	r1, r5
   16e04:	bl	11784 <__gmpz_set@plt>
   16e08:	subs	r4, r4, #1
   16e0c:	ldr	r6, [sp, #32]
   16e10:	sbc	r6, r6, #0
   16e14:	orrs	r0, r4, r6
   16e18:	beq	16f58 <__assert_fail@plt+0x54e0>
   16e1c:	str	r6, [sp, #32]
   16e20:	mov	r0, r7
   16e24:	mov	r1, r5
   16e28:	mov	r2, r5
   16e2c:	bl	1179c <__gmpz_mul@plt>
   16e30:	mov	r0, r5
   16e34:	mov	r1, r7
   16e38:	mov	r2, r8
   16e3c:	bl	119b8 <__gmpz_mod@plt>
   16e40:	mov	r0, r5
   16e44:	mov	r1, r5
   16e48:	mov	r2, r9
   16e4c:	bl	1188c <__gmpz_add_ui@plt>
   16e50:	mov	r0, r7
   16e54:	sub	r1, fp, #52	; 0x34
   16e58:	mov	r2, r5
   16e5c:	bl	11724 <__gmpz_sub@plt>
   16e60:	add	r6, sp, #36	; 0x24
   16e64:	mov	r0, r6
   16e68:	mov	sl, r5
   16e6c:	add	r5, sp, #60	; 0x3c
   16e70:	mov	r1, r5
   16e74:	mov	r2, r7
   16e78:	bl	1179c <__gmpz_mul@plt>
   16e7c:	mov	r0, r5
   16e80:	mov	r5, sl
   16e84:	mov	r1, r6
   16e88:	mov	r2, r8
   16e8c:	bl	119b8 <__gmpz_mod@plt>
   16e90:	and	r0, r4, #31
   16e94:	teq	r0, #1
   16e98:	bne	16e08 <__assert_fail@plt+0x5390>
   16e9c:	mov	r0, r7
   16ea0:	add	r1, sp, #60	; 0x3c
   16ea4:	mov	r2, r8
   16ea8:	bl	11a00 <__gmpz_gcd@plt>
   16eac:	mov	r0, r7
   16eb0:	mov	r1, #1
   16eb4:	bl	11a24 <__gmpz_cmp_ui@plt>
   16eb8:	cmp	r0, #0
   16ebc:	sub	r6, fp, #64	; 0x40
   16ec0:	beq	16dfc <__assert_fail@plt+0x5384>
   16ec4:	mov	r0, r7
   16ec8:	mov	r1, r6
   16ecc:	mov	r2, r6
   16ed0:	bl	1179c <__gmpz_mul@plt>
   16ed4:	mov	r0, r6
   16ed8:	mov	r1, r7
   16edc:	mov	r2, r8
   16ee0:	bl	119b8 <__gmpz_mod@plt>
   16ee4:	mov	r0, r6
   16ee8:	mov	r1, r6
   16eec:	mov	r2, r9
   16ef0:	bl	1188c <__gmpz_add_ui@plt>
   16ef4:	mov	r0, r7
   16ef8:	sub	r1, fp, #52	; 0x34
   16efc:	mov	r2, r6
   16f00:	bl	11724 <__gmpz_sub@plt>
   16f04:	mov	r0, r7
   16f08:	mov	r1, r7
   16f0c:	mov	r2, r8
   16f10:	bl	11a00 <__gmpz_gcd@plt>
   16f14:	mov	r0, r7
   16f18:	mov	r1, #1
   16f1c:	bl	11a24 <__gmpz_cmp_ui@plt>
   16f20:	cmp	r0, #0
   16f24:	beq	16ec4 <__assert_fail@plt+0x544c>
   16f28:	mov	r0, r8
   16f2c:	mov	r1, r8
   16f30:	mov	r2, r7
   16f34:	bl	1176c <__gmpz_divexact@plt>
   16f38:	mov	r0, r7
   16f3c:	bl	169a8 <__assert_fail@plt+0x4f30>
   16f40:	cmp	r0, #0
   16f44:	beq	17004 <__assert_fail@plt+0x558c>
   16f48:	ldr	r0, [sp, #20]
   16f4c:	mov	r1, r7
   16f50:	bl	16bcc <__assert_fail@plt+0x5154>
   16f54:	b	17044 <__assert_fail@plt+0x55cc>
   16f58:	sub	r0, fp, #52	; 0x34
   16f5c:	mov	r1, r5
   16f60:	bl	11784 <__gmpz_set@plt>
   16f64:	ldr	r0, [sp, #28]
   16f68:	lsl	r1, r0, #1
   16f6c:	str	r1, [sp, #32]
   16f70:	ldr	r6, [sp, #24]
   16f74:	str	r0, [sp, #28]
   16f78:	orrs	r0, r6, r0
   16f7c:	beq	16fd0 <__assert_fail@plt+0x5558>
   16f80:	mov	r4, #0
   16f84:	mov	sl, #0
   16f88:	mov	r0, r7
   16f8c:	mov	r1, r5
   16f90:	mov	r2, r5
   16f94:	bl	1179c <__gmpz_mul@plt>
   16f98:	mov	r0, r5
   16f9c:	mov	r1, r7
   16fa0:	mov	r2, r8
   16fa4:	bl	119b8 <__gmpz_mod@plt>
   16fa8:	mov	r0, r5
   16fac:	mov	r1, r5
   16fb0:	mov	r2, r9
   16fb4:	bl	1188c <__gmpz_add_ui@plt>
   16fb8:	adds	r4, r4, #1
   16fbc:	adc	sl, sl, #0
   16fc0:	subs	r0, r4, r6
   16fc4:	ldr	r0, [sp, #28]
   16fc8:	sbcs	r0, sl, r0
   16fcc:	bcc	16f88 <__assert_fail@plt+0x5510>
   16fd0:	ldr	r0, [sp, #32]
   16fd4:	orr	sl, r0, r6, lsr #31
   16fd8:	lsl	r0, r6, #1
   16fdc:	str	r0, [sp, #32]
   16fe0:	sub	r0, fp, #64	; 0x40
   16fe4:	mov	r1, r5
   16fe8:	bl	11784 <__gmpz_set@plt>
   16fec:	mov	r4, r6
   16ff0:	ldr	r6, [sp, #28]
   16ff4:	ldr	r0, [sp, #32]
   16ff8:	str	r0, [sp, #24]
   16ffc:	str	sl, [sp, #28]
   17000:	b	16e1c <__assert_fail@plt+0x53a4>
   17004:	movw	r0, #4588	; 0x11ec
   17008:	movt	r0, #3
   1700c:	ldrb	r0, [r0]
   17010:	cmp	r0, #1
   17014:	bne	17034 <__assert_fail@plt+0x55bc>
   17018:	movw	r0, #4568	; 0x11d8
   1701c:	movt	r0, #3
   17020:	ldr	r0, [r0]
   17024:	mov	r1, #1
   17028:	movw	r2, #52094	; 0xcb7e
   1702c:	movt	r2, #1
   17030:	bl	1197c <__fprintf_chk@plt>
   17034:	mov	r0, r7
   17038:	ldr	r1, [sp, #16]
   1703c:	ldr	r2, [sp, #20]
   17040:	bl	16d30 <__assert_fail@plt+0x52b8>
   17044:	mov	r0, r8
   17048:	bl	169a8 <__assert_fail@plt+0x4f30>
   1704c:	cmp	r0, #0
   17050:	bne	170a0 <__assert_fail@plt+0x5628>
   17054:	mov	r0, r5
   17058:	mov	r1, r5
   1705c:	mov	r2, r8
   17060:	bl	119b8 <__gmpz_mod@plt>
   17064:	sub	r0, fp, #52	; 0x34
   17068:	mov	r1, r0
   1706c:	mov	r2, r8
   17070:	bl	119b8 <__gmpz_mod@plt>
   17074:	mov	r0, r6
   17078:	mov	r1, r6
   1707c:	mov	r2, r8
   17080:	bl	119b8 <__gmpz_mod@plt>
   17084:	mov	r0, r8
   17088:	mov	r1, #1
   1708c:	bl	11a24 <__gmpz_cmp_ui@plt>
   17090:	cmp	r0, #0
   17094:	ldr	r6, [sp, #32]
   17098:	bne	16e1c <__assert_fail@plt+0x53a4>
   1709c:	b	170ac <__assert_fail@plt+0x5634>
   170a0:	ldr	r0, [sp, #20]
   170a4:	mov	r1, r8
   170a8:	bl	16bcc <__assert_fail@plt+0x5154>
   170ac:	mov	r0, #0
   170b0:	sub	r1, fp, #40	; 0x28
   170b4:	str	r1, [sp]
   170b8:	sub	r1, fp, #64	; 0x40
   170bc:	str	r1, [sp, #4]
   170c0:	str	r0, [sp, #8]
   170c4:	add	r0, sp, #60	; 0x3c
   170c8:	add	r1, sp, #36	; 0x24
   170cc:	add	r2, sp, #48	; 0x30
   170d0:	sub	r3, fp, #52	; 0x34
   170d4:	bl	116d0 <__gmpz_clears@plt>
   170d8:	sub	sp, fp, #28
   170dc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   170e0:	push	{r4, r5, fp, lr}
   170e4:	add	fp, sp, #8
   170e8:	sub	sp, sp, #16
   170ec:	mov	r4, r0
   170f0:	add	r5, sp, #4
   170f4:	mov	r0, r5
   170f8:	bl	119c4 <__gmpz_init_set_ui@plt>
   170fc:	mov	r0, r4
   17100:	mov	r1, r5
   17104:	bl	16bcc <__assert_fail@plt+0x5154>
   17108:	mov	r0, r5
   1710c:	bl	11904 <__gmpz_clear@plt>
   17110:	sub	sp, fp, #8
   17114:	pop	{r4, r5, fp, pc}
   17118:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1711c:	add	fp, sp, #24
   17120:	mov	r4, r3
   17124:	mov	r3, r2
   17128:	mov	r6, r1
   1712c:	mov	r7, r0
   17130:	ldr	r2, [fp, #8]
   17134:	mov	r0, r4
   17138:	mov	r1, r3
   1713c:	mov	r3, r7
   17140:	bl	11754 <__gmpz_powm@plt>
   17144:	mov	r8, #1
   17148:	mov	r0, r4
   1714c:	mov	r1, #1
   17150:	bl	11a24 <__gmpz_cmp_ui@plt>
   17154:	cmp	r0, #0
   17158:	beq	171d0 <__assert_fail@plt+0x5758>
   1715c:	mov	r0, r4
   17160:	mov	r1, r6
   17164:	bl	119d0 <__gmpz_cmp@plt>
   17168:	cmp	r0, #0
   1716c:	beq	171d0 <__assert_fail@plt+0x5758>
   17170:	ldr	r9, [fp, #12]
   17174:	mov	r8, #0
   17178:	cmp	r9, #2
   1717c:	bcc	171d0 <__assert_fail@plt+0x5758>
   17180:	mov	r5, #2
   17184:	mov	r0, r4
   17188:	mov	r1, r4
   1718c:	mov	r2, #2
   17190:	mov	r3, r7
   17194:	bl	11a3c <__gmpz_powm_ui@plt>
   17198:	mov	r0, r4
   1719c:	mov	r1, r6
   171a0:	bl	119d0 <__gmpz_cmp@plt>
   171a4:	cmp	r0, #0
   171a8:	beq	171d8 <__assert_fail@plt+0x5760>
   171ac:	mov	r0, r4
   171b0:	mov	r1, #1
   171b4:	bl	11a24 <__gmpz_cmp_ui@plt>
   171b8:	cmp	r0, #0
   171bc:	beq	171d0 <__assert_fail@plt+0x5758>
   171c0:	add	r0, r5, #1
   171c4:	cmp	r5, r9
   171c8:	mov	r5, r0
   171cc:	bcc	17184 <__assert_fail@plt+0x570c>
   171d0:	mov	r0, r8
   171d4:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   171d8:	mov	r8, #1
   171dc:	mov	r0, r8
   171e0:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   171e4:	movw	r1, #4600	; 0x11f8
   171e8:	movt	r1, #3
   171ec:	str	r0, [r1]
   171f0:	bx	lr
   171f4:	movw	r1, #4604	; 0x11fc
   171f8:	movt	r1, #3
   171fc:	strb	r0, [r1]
   17200:	bx	lr
   17204:	push	{r4, r5, r6, sl, fp, lr}
   17208:	add	fp, sp, #16
   1720c:	sub	sp, sp, #8
   17210:	movw	r0, #4580	; 0x11e4
   17214:	movt	r0, #3
   17218:	ldr	r0, [r0]
   1721c:	bl	1a948 <__assert_fail@plt+0x8ed0>
   17220:	cmp	r0, #0
   17224:	beq	1724c <__assert_fail@plt+0x57d4>
   17228:	movw	r0, #4604	; 0x11fc
   1722c:	movt	r0, #3
   17230:	ldrb	r0, [r0]
   17234:	cmp	r0, #0
   17238:	beq	1726c <__assert_fail@plt+0x57f4>
   1723c:	bl	11910 <__errno_location@plt>
   17240:	ldr	r0, [r0]
   17244:	cmp	r0, #32
   17248:	bne	1726c <__assert_fail@plt+0x57f4>
   1724c:	movw	r0, #4568	; 0x11d8
   17250:	movt	r0, #3
   17254:	ldr	r0, [r0]
   17258:	bl	1a948 <__assert_fail@plt+0x8ed0>
   1725c:	cmp	r0, #0
   17260:	subeq	sp, fp, #16
   17264:	popeq	{r4, r5, r6, sl, fp, pc}
   17268:	b	172dc <__assert_fail@plt+0x5864>
   1726c:	movw	r1, #51244	; 0xc82c
   17270:	movt	r1, #1
   17274:	mov	r0, #0
   17278:	mov	r2, #5
   1727c:	bl	11748 <dcgettext@plt>
   17280:	mov	r4, r0
   17284:	movw	r0, #4600	; 0x11f8
   17288:	movt	r0, #3
   1728c:	ldr	r6, [r0]
   17290:	bl	11910 <__errno_location@plt>
   17294:	ldr	r5, [r0]
   17298:	cmp	r6, #0
   1729c:	bne	172b8 <__assert_fail@plt+0x5840>
   172a0:	movw	r2, #64561	; 0xfc31
   172a4:	movt	r2, #1
   172a8:	mov	r0, #0
   172ac:	mov	r1, r5
   172b0:	mov	r3, r4
   172b4:	b	172d8 <__assert_fail@plt+0x5860>
   172b8:	mov	r0, r6
   172bc:	bl	19034 <__assert_fail@plt+0x75bc>
   172c0:	mov	r3, r0
   172c4:	str	r4, [sp]
   172c8:	movw	r2, #64557	; 0xfc2d
   172cc:	movt	r2, #1
   172d0:	mov	r0, #0
   172d4:	mov	r1, r5
   172d8:	bl	11844 <error@plt>
   172dc:	movw	r0, #4480	; 0x1180
   172e0:	movt	r0, #3
   172e4:	ldr	r0, [r0]
   172e8:	bl	1170c <_exit@plt>
   172ec:	push	{r4, r5, r6, sl, fp, lr}
   172f0:	add	fp, sp, #16
   172f4:	mov	r4, r0
   172f8:	bl	11910 <__errno_location@plt>
   172fc:	mov	r5, r0
   17300:	ldr	r6, [r0]
   17304:	mov	r0, r4
   17308:	bl	11700 <free@plt>
   1730c:	str	r6, [r5]
   17310:	pop	{r4, r5, r6, sl, fp, pc}
   17314:	push	{r4, r5, r6, r7, fp, lr}
   17318:	add	fp, sp, #16
   1731c:	cmp	r2, #0
   17320:	beq	1736c <__assert_fail@plt+0x58f4>
   17324:	mov	r5, r2
   17328:	mov	r6, r1
   1732c:	mov	r7, r0
   17330:	mov	r4, #0
   17334:	mov	r0, r7
   17338:	mov	r1, r6
   1733c:	mov	r2, r5
   17340:	bl	1984c <__assert_fail@plt+0x7dd4>
   17344:	cmn	r0, #1
   17348:	beq	17364 <__assert_fail@plt+0x58ec>
   1734c:	cmp	r0, #0
   17350:	beq	17378 <__assert_fail@plt+0x5900>
   17354:	subs	r5, r5, r0
   17358:	add	r6, r6, r0
   1735c:	add	r4, r0, r4
   17360:	bne	17334 <__assert_fail@plt+0x58bc>
   17364:	mov	r0, r4
   17368:	pop	{r4, r5, r6, r7, fp, pc}
   1736c:	mov	r4, #0
   17370:	mov	r0, r4
   17374:	pop	{r4, r5, r6, r7, fp, pc}
   17378:	bl	11910 <__errno_location@plt>
   1737c:	mov	r1, #28
   17380:	str	r1, [r0]
   17384:	mov	r0, r4
   17388:	pop	{r4, r5, r6, r7, fp, pc}
   1738c:	push	{r4, r5, r6, sl, fp, lr}
   17390:	add	fp, sp, #16
   17394:	mov	r4, r1
   17398:	mov	r5, r0
   1739c:	mov	r0, #0
   173a0:	strb	r0, [r2, #20]
   173a4:	add	r6, r2, #19
   173a8:	mov	r0, r5
   173ac:	mov	r1, r4
   173b0:	mov	r2, #10
   173b4:	mov	r3, #0
   173b8:	bl	1c344 <__assert_fail@plt+0xa8cc>
   173bc:	add	r2, r0, r0, lsl #2
   173c0:	sub	r2, r5, r2, lsl #1
   173c4:	orr	r2, r2, #48	; 0x30
   173c8:	strb	r2, [r6], #-1
   173cc:	rsbs	r2, r5, #9
   173d0:	rscs	r2, r4, #0
   173d4:	mov	r5, r0
   173d8:	mov	r4, r1
   173dc:	bcc	173a8 <__assert_fail@plt+0x5930>
   173e0:	add	r0, r6, #1
   173e4:	pop	{r4, r5, r6, sl, fp, pc}
   173e8:	push	{r4, r5, fp, lr}
   173ec:	add	fp, sp, #8
   173f0:	cmp	r0, #0
   173f4:	beq	17488 <__assert_fail@plt+0x5a10>
   173f8:	mov	r4, r0
   173fc:	mov	r1, #47	; 0x2f
   17400:	bl	119e8 <strrchr@plt>
   17404:	cmp	r0, #0
   17408:	mov	r5, r4
   1740c:	addne	r5, r0, #1
   17410:	sub	r0, r5, r4
   17414:	cmp	r0, #7
   17418:	blt	1746c <__assert_fail@plt+0x59f4>
   1741c:	sub	r0, r5, #7
   17420:	movw	r1, #64620	; 0xfc6c
   17424:	movt	r1, #1
   17428:	mov	r2, #7
   1742c:	bl	11a54 <strncmp@plt>
   17430:	cmp	r0, #0
   17434:	bne	1746c <__assert_fail@plt+0x59f4>
   17438:	movw	r1, #64628	; 0xfc74
   1743c:	movt	r1, #1
   17440:	mov	r0, r5
   17444:	mov	r2, #3
   17448:	bl	11a54 <strncmp@plt>
   1744c:	cmp	r0, #0
   17450:	beq	1745c <__assert_fail@plt+0x59e4>
   17454:	mov	r4, r5
   17458:	b	1746c <__assert_fail@plt+0x59f4>
   1745c:	add	r4, r5, #3
   17460:	movw	r0, #4552	; 0x11c8
   17464:	movt	r0, #3
   17468:	str	r4, [r0]
   1746c:	movw	r0, #4556	; 0x11cc
   17470:	movt	r0, #3
   17474:	str	r4, [r0]
   17478:	movw	r0, #4608	; 0x1200
   1747c:	movt	r0, #3
   17480:	str	r4, [r0]
   17484:	pop	{r4, r5, fp, pc}
   17488:	movw	r0, #4568	; 0x11d8
   1748c:	movt	r0, #3
   17490:	ldr	r3, [r0]
   17494:	movw	r0, #64564	; 0xfc34
   17498:	movt	r0, #1
   1749c:	mov	r1, #55	; 0x37
   174a0:	mov	r2, #1
   174a4:	bl	117f0 <fwrite@plt>
   174a8:	bl	11a60 <abort@plt>
   174ac:	push	{r4, r5, r6, sl, fp, lr}
   174b0:	add	fp, sp, #16
   174b4:	sub	sp, sp, #8
   174b8:	mov	r4, r0
   174bc:	mov	r0, #0
   174c0:	mov	r1, r4
   174c4:	mov	r2, #5
   174c8:	bl	11748 <dcgettext@plt>
   174cc:	cmp	r0, r4
   174d0:	beq	174f0 <__assert_fail@plt+0x5a78>
   174d4:	mov	r5, r0
   174d8:	mov	r1, r4
   174dc:	bl	17544 <__assert_fail@plt+0x5acc>
   174e0:	cmp	r0, #0
   174e4:	beq	174f8 <__assert_fail@plt+0x5a80>
   174e8:	mov	r6, r5
   174ec:	b	17538 <__assert_fail@plt+0x5ac0>
   174f0:	mov	r6, r4
   174f4:	b	17538 <__assert_fail@plt+0x5ac0>
   174f8:	mov	r0, r5
   174fc:	bl	118e0 <strlen@plt>
   17500:	mov	r6, r0
   17504:	mov	r0, r4
   17508:	bl	118e0 <strlen@plt>
   1750c:	add	r0, r6, r0
   17510:	add	r0, r0, #4
   17514:	bl	1a074 <__assert_fail@plt+0x85fc>
   17518:	mov	r6, r0
   1751c:	str	r5, [sp]
   17520:	str	r4, [sp, #4]
   17524:	movw	r3, #64632	; 0xfc78
   17528:	movt	r3, #1
   1752c:	mov	r1, #1
   17530:	mvn	r2, #0
   17534:	bl	11928 <__sprintf_chk@plt>
   17538:	mov	r0, r6
   1753c:	sub	sp, fp, #16
   17540:	pop	{r4, r5, r6, sl, fp, pc}
   17544:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17548:	add	fp, sp, #28
   1754c:	sub	sp, sp, #124	; 0x7c
   17550:	mov	r4, r0
   17554:	mov	r0, r1
   17558:	mov	r1, #2
   1755c:	bl	198e4 <__assert_fail@plt+0x7e6c>
   17560:	mov	sl, r0
   17564:	ldrb	r0, [r4]
   17568:	cmp	r0, #0
   1756c:	beq	177e8 <__assert_fail@plt+0x5d70>
   17570:	add	r5, sp, #12
   17574:	add	r0, r5, #4
   17578:	str	r0, [sp, #4]
   1757c:	add	r6, sp, #68	; 0x44
   17580:	add	r8, r6, #4
   17584:	mov	r9, #0
   17588:	str	r8, [sp]
   1758c:	b	175a4 <__assert_fail@plt+0x5b2c>
   17590:	ldr	r0, [sp, #88]	; 0x58
   17594:	add	r4, r7, r0
   17598:	ldrb	r0, [r4]
   1759c:	cmp	r0, #0
   175a0:	beq	177e8 <__assert_fail@plt+0x5d70>
   175a4:	mov	r0, r4
   175a8:	mov	r1, sl
   175ac:	bl	1ae50 <__assert_fail@plt+0x93d8>
   175b0:	cmp	r0, #0
   175b4:	beq	177e8 <__assert_fail@plt+0x5d70>
   175b8:	mov	r7, r0
   175bc:	bl	11814 <__ctype_get_mb_cur_max@plt>
   175c0:	cmp	r0, #2
   175c4:	bcc	17630 <__assert_fail@plt+0x5bb8>
   175c8:	strb	r9, [sp, #68]	; 0x44
   175cc:	str	r4, [sp, #84]	; 0x54
   175d0:	str	r9, [r8]
   175d4:	str	r9, [r8, #4]
   175d8:	strb	r9, [sp, #80]	; 0x50
   175dc:	mov	r0, #1
   175e0:	str	r0, [sp, #8]
   175e4:	cmp	r4, r7
   175e8:	bcc	1760c <__assert_fail@plt+0x5b94>
   175ec:	b	176cc <__assert_fail@plt+0x5c54>
   175f0:	strb	r9, [sp, #80]	; 0x50
   175f4:	ldr	r2, [sp, #84]	; 0x54
   175f8:	ldr	r3, [sp, #88]	; 0x58
   175fc:	add	r2, r2, r3
   17600:	str	r2, [sp, #84]	; 0x54
   17604:	cmp	r2, r7
   17608:	bcs	176b4 <__assert_fail@plt+0x5c3c>
   1760c:	mov	r0, r6
   17610:	bl	1b86c <__assert_fail@plt+0x9df4>
   17614:	ldr	r0, [sp, #96]	; 0x60
   17618:	ldrb	r1, [sp, #92]	; 0x5c
   1761c:	cmp	r1, #0
   17620:	beq	175f0 <__assert_fail@plt+0x5b78>
   17624:	cmp	r0, #0
   17628:	bne	175f0 <__assert_fail@plt+0x5b78>
   1762c:	b	1780c <__assert_fail@plt+0x5d94>
   17630:	mov	r8, #1
   17634:	cmp	r4, r7
   17638:	mov	r4, #1
   1763c:	bcs	1765c <__assert_fail@plt+0x5be4>
   17640:	bl	118b0 <__ctype_b_loc@plt>
   17644:	ldrb	r1, [r7, #-1]
   17648:	ldr	r0, [r0]
   1764c:	ldrb	r0, [r0, r1, lsl #1]
   17650:	and	r0, r0, #8
   17654:	mov	r1, #1
   17658:	eor	r4, r1, r0, lsr #3
   1765c:	mov	r5, sl
   17660:	mov	r0, sl
   17664:	bl	118e0 <strlen@plt>
   17668:	ldrb	sl, [r7, r0]
   1766c:	cmp	sl, #0
   17670:	beq	1768c <__assert_fail@plt+0x5c14>
   17674:	bl	118b0 <__ctype_b_loc@plt>
   17678:	ldr	r0, [r0]
   1767c:	ldrb	r0, [r0, sl, lsl #1]
   17680:	and	r0, r0, #8
   17684:	mov	r1, #1
   17688:	eor	r8, r1, r0, lsr #3
   1768c:	tst	r4, r8
   17690:	bne	17800 <__assert_fail@plt+0x5d88>
   17694:	ldrb	r0, [r7], #1
   17698:	cmp	r0, #0
   1769c:	mov	r4, r7
   176a0:	mov	sl, r5
   176a4:	add	r5, sp, #12
   176a8:	ldr	r8, [sp]
   176ac:	bne	17598 <__assert_fail@plt+0x5b20>
   176b0:	b	177e8 <__assert_fail@plt+0x5d70>
   176b4:	cmp	r1, #0
   176b8:	beq	176cc <__assert_fail@plt+0x5c54>
   176bc:	bl	1191c <iswalnum@plt>
   176c0:	clz	r0, r0
   176c4:	lsr	r0, r0, #5
   176c8:	str	r0, [sp, #8]
   176cc:	strb	r9, [sp, #68]	; 0x44
   176d0:	str	r7, [sp, #84]	; 0x54
   176d4:	str	r9, [r8]
   176d8:	str	r9, [r8, #4]
   176dc:	strb	r9, [sp, #80]	; 0x50
   176e0:	strb	r9, [sp, #12]
   176e4:	str	sl, [sp, #28]
   176e8:	ldr	r0, [sp, #4]
   176ec:	str	r9, [r0]
   176f0:	str	r9, [r0, #4]
   176f4:	strb	r9, [sp, #24]
   176f8:	b	17724 <__assert_fail@plt+0x5cac>
   176fc:	strb	r9, [sp, #80]	; 0x50
   17700:	strb	r9, [sp, #24]
   17704:	ldr	r0, [sp, #84]	; 0x54
   17708:	ldr	r1, [sp, #88]	; 0x58
   1770c:	add	r0, r0, r1
   17710:	str	r0, [sp, #84]	; 0x54
   17714:	ldr	r0, [sp, #28]
   17718:	ldr	r1, [sp, #32]
   1771c:	add	r0, r0, r1
   17720:	str	r0, [sp, #28]
   17724:	mov	r0, r5
   17728:	bl	1b86c <__assert_fail@plt+0x9df4>
   1772c:	ldrb	r0, [sp, #36]	; 0x24
   17730:	cmp	r0, #0
   17734:	beq	17744 <__assert_fail@plt+0x5ccc>
   17738:	ldr	r0, [sp, #40]	; 0x28
   1773c:	cmp	r0, #0
   17740:	beq	17768 <__assert_fail@plt+0x5cf0>
   17744:	mov	r0, r6
   17748:	bl	1b86c <__assert_fail@plt+0x9df4>
   1774c:	ldrb	r0, [sp, #92]	; 0x5c
   17750:	cmp	r0, #0
   17754:	beq	176fc <__assert_fail@plt+0x5c84>
   17758:	ldr	r0, [sp, #96]	; 0x60
   1775c:	cmp	r0, #0
   17760:	bne	176fc <__assert_fail@plt+0x5c84>
   17764:	b	1780c <__assert_fail@plt+0x5d94>
   17768:	mov	r0, r6
   1776c:	bl	1b86c <__assert_fail@plt+0x9df4>
   17770:	mov	r4, #1
   17774:	ldrb	r0, [sp, #92]	; 0x5c
   17778:	cmp	r0, #0
   1777c:	mov	r1, #1
   17780:	beq	177a0 <__assert_fail@plt+0x5d28>
   17784:	ldr	r0, [sp, #96]	; 0x60
   17788:	cmp	r0, #0
   1778c:	mov	r1, #1
   17790:	beq	177a0 <__assert_fail@plt+0x5d28>
   17794:	bl	1191c <iswalnum@plt>
   17798:	clz	r0, r0
   1779c:	lsr	r1, r0, #5
   177a0:	ldr	r0, [sp, #8]
   177a4:	tst	r0, r1
   177a8:	bne	177ec <__assert_fail@plt+0x5d74>
   177ac:	mov	r4, #0
   177b0:	strb	r4, [sp, #68]	; 0x44
   177b4:	str	r7, [sp, #84]	; 0x54
   177b8:	str	r4, [r8]
   177bc:	str	r4, [r8, #4]
   177c0:	strb	r4, [sp, #80]	; 0x50
   177c4:	mov	r0, r6
   177c8:	bl	1b86c <__assert_fail@plt+0x9df4>
   177cc:	ldrb	r0, [sp, #92]	; 0x5c
   177d0:	cmp	r0, #0
   177d4:	beq	17590 <__assert_fail@plt+0x5b18>
   177d8:	ldr	r0, [sp, #96]	; 0x60
   177dc:	cmp	r0, #0
   177e0:	bne	17590 <__assert_fail@plt+0x5b18>
   177e4:	b	177ec <__assert_fail@plt+0x5d74>
   177e8:	mov	r4, #0
   177ec:	mov	r0, sl
   177f0:	bl	172ec <__assert_fail@plt+0x5874>
   177f4:	mov	r0, r4
   177f8:	sub	sp, fp, #28
   177fc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17800:	mov	r4, #1
   17804:	mov	sl, r5
   17808:	b	177ec <__assert_fail@plt+0x5d74>
   1780c:	bl	11a60 <abort@plt>
   17810:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17814:	add	fp, sp, #28
   17818:	sub	sp, sp, #12
   1781c:	mov	r5, r1
   17820:	mov	r8, r0
   17824:	mov	r7, #0
   17828:	mov	r0, #0
   1782c:	mov	r1, r8
   17830:	mov	r2, #5
   17834:	bl	11748 <dcgettext@plt>
   17838:	mov	r4, r0
   1783c:	bl	1abcc <__assert_fail@plt+0x9154>
   17840:	mov	r6, r0
   17844:	movw	r1, #64640	; 0xfc80
   17848:	movt	r1, #1
   1784c:	bl	1a8e8 <__assert_fail@plt+0x8e70>
   17850:	cmp	r0, #0
   17854:	beq	17908 <__assert_fail@plt+0x5e90>
   17858:	str	r4, [sp, #8]
   1785c:	movw	r4, #64640	; 0xfc80
   17860:	movt	r4, #1
   17864:	mov	r0, r5
   17868:	mov	r1, r4
   1786c:	mov	r2, r6
   17870:	bl	1a4b8 <__assert_fail@plt+0x8a40>
   17874:	mov	sl, r0
   17878:	mov	r0, r6
   1787c:	bl	118e0 <strlen@plt>
   17880:	mov	r7, r0
   17884:	add	r0, r0, #11
   17888:	bl	1a074 <__assert_fail@plt+0x85fc>
   1788c:	mov	r9, r0
   17890:	mov	r1, r6
   17894:	mov	r2, r7
   17898:	bl	11718 <memcpy@plt>
   1789c:	movw	r0, #64776	; 0xfd08
   178a0:	movt	r0, #1
   178a4:	vldr	d16, [r0]
   178a8:	add	r0, r9, r7
   178ac:	movw	r1, #18764	; 0x494c
   178b0:	movt	r1, #84	; 0x54
   178b4:	str	r1, [r0, #7]
   178b8:	vst1.8	{d16}, [r0]
   178bc:	mov	r0, r5
   178c0:	mov	r1, r4
   178c4:	mov	r2, r9
   178c8:	bl	1a4b8 <__assert_fail@plt+0x8a40>
   178cc:	mov	r7, r0
   178d0:	mov	r0, r9
   178d4:	bl	172ec <__assert_fail@plt+0x5874>
   178d8:	mov	r5, #0
   178dc:	cmp	r7, #0
   178e0:	beq	17900 <__assert_fail@plt+0x5e88>
   178e4:	mov	r0, r7
   178e8:	mov	r1, #63	; 0x3f
   178ec:	bl	118ec <strchr@plt>
   178f0:	cmp	r0, #0
   178f4:	beq	17914 <__assert_fail@plt+0x5e9c>
   178f8:	mov	r0, r7
   178fc:	bl	172ec <__assert_fail@plt+0x5874>
   17900:	mov	r7, #0
   17904:	b	17918 <__assert_fail@plt+0x5ea0>
   17908:	mov	sl, r5
   1790c:	mov	r9, #0
   17910:	b	17920 <__assert_fail@plt+0x5ea8>
   17914:	mov	r5, r7
   17918:	mov	r9, sl
   1791c:	ldr	r4, [sp, #8]
   17920:	cmp	r5, #0
   17924:	mov	r6, r5
   17928:	moveq	r6, r8
   1792c:	cmp	sl, #0
   17930:	movne	r6, sl
   17934:	mov	r0, r4
   17938:	mov	r1, r8
   1793c:	bl	116ac <strcmp@plt>
   17940:	cmp	r0, #0
   17944:	beq	179b8 <__assert_fail@plt+0x5f40>
   17948:	mov	r0, r4
   1794c:	mov	r1, r8
   17950:	bl	17544 <__assert_fail@plt+0x5acc>
   17954:	cmp	r0, #0
   17958:	bne	17994 <__assert_fail@plt+0x5f1c>
   1795c:	cmp	sl, #0
   17960:	beq	17978 <__assert_fail@plt+0x5f00>
   17964:	mov	r0, r4
   17968:	mov	r1, sl
   1796c:	bl	17544 <__assert_fail@plt+0x5acc>
   17970:	cmp	r0, #0
   17974:	bne	17994 <__assert_fail@plt+0x5f1c>
   17978:	cmp	r5, #0
   1797c:	beq	179e8 <__assert_fail@plt+0x5f70>
   17980:	mov	r0, r4
   17984:	mov	r1, r5
   17988:	bl	17544 <__assert_fail@plt+0x5acc>
   1798c:	cmp	r0, #0
   17990:	beq	179e8 <__assert_fail@plt+0x5f70>
   17994:	cmp	r9, #0
   17998:	beq	179a4 <__assert_fail@plt+0x5f2c>
   1799c:	mov	r0, r9
   179a0:	bl	172ec <__assert_fail@plt+0x5874>
   179a4:	cmp	r7, #0
   179a8:	beq	17a48 <__assert_fail@plt+0x5fd0>
   179ac:	mov	r0, r7
   179b0:	bl	172ec <__assert_fail@plt+0x5874>
   179b4:	b	17a48 <__assert_fail@plt+0x5fd0>
   179b8:	cmp	r9, #0
   179bc:	cmpne	r9, r6
   179c0:	beq	179cc <__assert_fail@plt+0x5f54>
   179c4:	mov	r0, r9
   179c8:	bl	172ec <__assert_fail@plt+0x5874>
   179cc:	cmp	r7, #0
   179d0:	cmpne	r7, r6
   179d4:	beq	179e0 <__assert_fail@plt+0x5f68>
   179d8:	mov	r0, r7
   179dc:	bl	172ec <__assert_fail@plt+0x5874>
   179e0:	mov	r4, r6
   179e4:	b	17a48 <__assert_fail@plt+0x5fd0>
   179e8:	mov	r0, r4
   179ec:	bl	118e0 <strlen@plt>
   179f0:	mov	r5, r0
   179f4:	mov	r0, r6
   179f8:	bl	118e0 <strlen@plt>
   179fc:	add	r0, r5, r0
   17a00:	add	r0, r0, #4
   17a04:	bl	1a074 <__assert_fail@plt+0x85fc>
   17a08:	mov	r5, r0
   17a0c:	stm	sp, {r4, r6}
   17a10:	movw	r3, #64632	; 0xfc78
   17a14:	movt	r3, #1
   17a18:	mov	r1, #1
   17a1c:	mvn	r2, #0
   17a20:	bl	11928 <__sprintf_chk@plt>
   17a24:	cmp	r9, #0
   17a28:	beq	17a34 <__assert_fail@plt+0x5fbc>
   17a2c:	mov	r0, r9
   17a30:	bl	172ec <__assert_fail@plt+0x5874>
   17a34:	cmp	r7, #0
   17a38:	beq	17a44 <__assert_fail@plt+0x5fcc>
   17a3c:	mov	r0, r7
   17a40:	bl	172ec <__assert_fail@plt+0x5874>
   17a44:	mov	r4, r5
   17a48:	mov	r0, r4
   17a4c:	sub	sp, fp, #28
   17a50:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17a54:	push	{r4, r5, r6, sl, fp, lr}
   17a58:	add	fp, sp, #16
   17a5c:	mov	r4, r0
   17a60:	movw	r0, #4616	; 0x1208
   17a64:	movt	r0, #3
   17a68:	cmp	r4, #0
   17a6c:	moveq	r4, r0
   17a70:	bl	11910 <__errno_location@plt>
   17a74:	mov	r5, r0
   17a78:	ldr	r6, [r0]
   17a7c:	mov	r0, r4
   17a80:	mov	r1, #48	; 0x30
   17a84:	bl	1a35c <__assert_fail@plt+0x88e4>
   17a88:	str	r6, [r5]
   17a8c:	pop	{r4, r5, r6, sl, fp, pc}
   17a90:	movw	r1, #4616	; 0x1208
   17a94:	movt	r1, #3
   17a98:	cmp	r0, #0
   17a9c:	movne	r1, r0
   17aa0:	ldr	r0, [r1]
   17aa4:	bx	lr
   17aa8:	movw	r2, #4616	; 0x1208
   17aac:	movt	r2, #3
   17ab0:	cmp	r0, #0
   17ab4:	movne	r2, r0
   17ab8:	str	r1, [r2]
   17abc:	bx	lr
   17ac0:	movw	r3, #4616	; 0x1208
   17ac4:	movt	r3, #3
   17ac8:	cmp	r0, #0
   17acc:	movne	r3, r0
   17ad0:	ubfx	r0, r1, #5, #3
   17ad4:	add	ip, r3, r0, lsl #2
   17ad8:	ldr	r3, [ip, #8]
   17adc:	and	r1, r1, #31
   17ae0:	mov	r0, #1
   17ae4:	and	r0, r0, r3, lsr r1
   17ae8:	and	r2, r2, #1
   17aec:	eor	r2, r0, r2
   17af0:	eor	r1, r3, r2, lsl r1
   17af4:	str	r1, [ip, #8]
   17af8:	bx	lr
   17afc:	movw	r2, #4616	; 0x1208
   17b00:	movt	r2, #3
   17b04:	cmp	r0, #0
   17b08:	movne	r2, r0
   17b0c:	ldr	r0, [r2, #4]
   17b10:	str	r1, [r2, #4]
   17b14:	bx	lr
   17b18:	push	{fp, lr}
   17b1c:	mov	fp, sp
   17b20:	movw	r3, #4616	; 0x1208
   17b24:	movt	r3, #3
   17b28:	cmp	r0, #0
   17b2c:	movne	r3, r0
   17b30:	mov	r0, #10
   17b34:	str	r0, [r3]
   17b38:	cmp	r1, #0
   17b3c:	cmpne	r2, #0
   17b40:	bne	17b48 <__assert_fail@plt+0x60d0>
   17b44:	bl	11a60 <abort@plt>
   17b48:	str	r1, [r3, #40]	; 0x28
   17b4c:	str	r2, [r3, #44]	; 0x2c
   17b50:	pop	{fp, pc}
   17b54:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17b58:	add	fp, sp, #28
   17b5c:	sub	sp, sp, #20
   17b60:	mov	r8, r3
   17b64:	mov	r9, r2
   17b68:	mov	sl, r1
   17b6c:	mov	r7, r0
   17b70:	ldr	r0, [fp, #8]
   17b74:	movw	r5, #4616	; 0x1208
   17b78:	movt	r5, #3
   17b7c:	cmp	r0, #0
   17b80:	movne	r5, r0
   17b84:	bl	11910 <__errno_location@plt>
   17b88:	mov	r4, r0
   17b8c:	ldm	r5, {r0, r1}
   17b90:	ldr	r2, [r5, #40]	; 0x28
   17b94:	ldr	r3, [r5, #44]	; 0x2c
   17b98:	ldr	r6, [r4]
   17b9c:	add	r5, r5, #8
   17ba0:	stm	sp, {r0, r1, r5}
   17ba4:	str	r2, [sp, #12]
   17ba8:	str	r3, [sp, #16]
   17bac:	mov	r0, r7
   17bb0:	mov	r1, sl
   17bb4:	mov	r2, r9
   17bb8:	mov	r3, r8
   17bbc:	bl	17bcc <__assert_fail@plt+0x6154>
   17bc0:	str	r6, [r4]
   17bc4:	sub	sp, fp, #28
   17bc8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17bcc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17bd0:	add	fp, sp, #28
   17bd4:	sub	sp, sp, #156	; 0x9c
   17bd8:	mov	r9, r3
   17bdc:	mov	r7, r1
   17be0:	mov	r6, r0
   17be4:	str	r2, [fp, #-80]	; 0xffffffb0
   17be8:	add	r0, r2, #1
   17bec:	str	r0, [sp, #76]	; 0x4c
   17bf0:	ldr	r0, [fp, #12]
   17bf4:	and	r1, r0, #1
   17bf8:	str	r1, [sp, #40]	; 0x28
   17bfc:	and	r1, r0, #4
   17c00:	str	r1, [sp, #36]	; 0x24
   17c04:	ubfx	r4, r0, #1, #1
   17c08:	bl	11814 <__ctype_get_mb_cur_max@plt>
   17c0c:	str	r0, [sp, #44]	; 0x2c
   17c10:	ldr	r0, [fp, #24]
   17c14:	str	r0, [sp, #88]	; 0x58
   17c18:	ldr	r0, [fp, #20]
   17c1c:	str	r0, [sp, #80]	; 0x50
   17c20:	ldr	r1, [fp, #8]
   17c24:	mov	r0, #0
   17c28:	str	r0, [sp, #84]	; 0x54
   17c2c:	mov	r0, #0
   17c30:	str	r0, [fp, #-84]	; 0xffffffac
   17c34:	mov	r0, #0
   17c38:	str	r0, [fp, #-72]	; 0xffffffb8
   17c3c:	mov	r0, #0
   17c40:	mov	r2, #0
   17c44:	str	r2, [fp, #-56]	; 0xffffffc8
   17c48:	mov	r2, #0
   17c4c:	str	r2, [sp, #64]	; 0x40
   17c50:	mov	r2, #1
   17c54:	str	r2, [fp, #-48]	; 0xffffffd0
   17c58:	cmp	r1, #10
   17c5c:	bhi	18b88 <__assert_fail@plt+0x7110>
   17c60:	mov	sl, r7
   17c64:	mov	r7, r1
   17c68:	add	r1, pc, #24
   17c6c:	mov	r8, #0
   17c70:	mov	r2, #1
   17c74:	mov	r3, #0
   17c78:	ldr	ip, [fp, #-80]	; 0xffffffb0
   17c7c:	mov	lr, r9
   17c80:	mov	r5, r6
   17c84:	ldr	pc, [r1, r7, lsl #2]
   17c88:	andeq	r7, r1, ip, asr sp
   17c8c:	muleq	r1, ip, sp
   17c90:	andeq	r7, r1, ip, ror #26
   17c94:	andeq	r7, r1, r4, asr sp
   17c98:	muleq	r1, r0, sp
   17c9c:	strdeq	r7, [r1], -r0
   17ca0:	andeq	r7, r1, ip, ror sp
   17ca4:	andeq	r7, r1, ip, asr #28
   17ca8:			; <UNDEFINED> instruction: 0x00017cb4
   17cac:			; <UNDEFINED> instruction: 0x00017cb4
   17cb0:	andeq	r7, r1, r0, ror #25
   17cb4:	movw	r0, #64870	; 0xfd66
   17cb8:	movt	r0, #1
   17cbc:	mov	r1, r7
   17cc0:	bl	19190 <__assert_fail@plt+0x7718>
   17cc4:	str	r0, [sp, #80]	; 0x50
   17cc8:	movw	r0, #64754	; 0xfcf2
   17ccc:	movt	r0, #1
   17cd0:	mov	r1, r7
   17cd4:	bl	19190 <__assert_fail@plt+0x7718>
   17cd8:	mov	r5, r6
   17cdc:	str	r0, [sp, #88]	; 0x58
   17ce0:	mov	r8, #0
   17ce4:	tst	r4, #1
   17ce8:	str	r7, [fp, #-64]	; 0xffffffc0
   17cec:	bne	17d24 <__assert_fail@plt+0x62ac>
   17cf0:	ldr	r0, [sp, #80]	; 0x50
   17cf4:	ldrb	r0, [r0]
   17cf8:	cmp	r0, #0
   17cfc:	beq	17d24 <__assert_fail@plt+0x62ac>
   17d00:	ldr	r1, [sp, #80]	; 0x50
   17d04:	add	r1, r1, #1
   17d08:	mov	r8, #0
   17d0c:	cmp	r8, sl
   17d10:	strbcc	r0, [r5, r8]
   17d14:	ldrb	r0, [r1, r8]
   17d18:	add	r8, r8, #1
   17d1c:	cmp	r0, #0
   17d20:	bne	17d0c <__assert_fail@plt+0x6294>
   17d24:	ldr	r7, [sp, #88]	; 0x58
   17d28:	mov	r0, r7
   17d2c:	bl	118e0 <strlen@plt>
   17d30:	mov	r5, r6
   17d34:	str	r0, [fp, #-72]	; 0xffffffb8
   17d38:	str	r7, [fp, #-84]	; 0xffffffac
   17d3c:	mov	r2, #1
   17d40:	mov	r3, r4
   17d44:	ldr	ip, [fp, #-80]	; 0xffffffb0
   17d48:	mov	lr, r9
   17d4c:	ldr	r7, [fp, #-64]	; 0xffffffc0
   17d50:	b	17e4c <__assert_fail@plt+0x63d4>
   17d54:	mov	r0, #1
   17d58:	b	17d9c <__assert_fail@plt+0x6324>
   17d5c:	mov	r7, #0
   17d60:	mov	r8, #0
   17d64:	mov	r2, r0
   17d68:	b	17e48 <__assert_fail@plt+0x63d0>
   17d6c:	tst	r4, #1
   17d70:	bne	17d9c <__assert_fail@plt+0x6324>
   17d74:	mov	r2, r0
   17d78:	b	17dc4 <__assert_fail@plt+0x634c>
   17d7c:	mov	r0, #1
   17d80:	str	r0, [fp, #-72]	; 0xffffffb8
   17d84:	mov	r8, #0
   17d88:	mov	r7, #5
   17d8c:	b	17e08 <__assert_fail@plt+0x6390>
   17d90:	mov	r2, #1
   17d94:	tst	r4, #1
   17d98:	beq	17dc4 <__assert_fail@plt+0x634c>
   17d9c:	mov	r1, #1
   17da0:	str	r1, [fp, #-72]	; 0xffffffb8
   17da4:	mov	r8, #0
   17da8:	mov	r7, #2
   17dac:	movw	r1, #64754	; 0xfcf2
   17db0:	movt	r1, #1
   17db4:	str	r1, [fp, #-84]	; 0xffffffac
   17db8:	mov	r2, r0
   17dbc:	mov	r3, #1
   17dc0:	b	17e4c <__assert_fail@plt+0x63d4>
   17dc4:	mov	r8, #1
   17dc8:	mov	r7, #2
   17dcc:	cmp	sl, #0
   17dd0:	movne	r0, #39	; 0x27
   17dd4:	strbne	r0, [r5]
   17dd8:	movw	r0, #64754	; 0xfcf2
   17ddc:	movt	r0, #1
   17de0:	str	r0, [fp, #-84]	; 0xffffffac
   17de4:	mov	r0, #1
   17de8:	str	r0, [fp, #-72]	; 0xffffffb8
   17dec:	b	17e48 <__assert_fail@plt+0x63d0>
   17df0:	mov	r7, #5
   17df4:	tst	r4, #1
   17df8:	beq	17e20 <__assert_fail@plt+0x63a8>
   17dfc:	mov	r0, #1
   17e00:	str	r0, [fp, #-72]	; 0xffffffb8
   17e04:	mov	r8, #0
   17e08:	movw	r0, #64868	; 0xfd64
   17e0c:	movt	r0, #1
   17e10:	str	r0, [fp, #-84]	; 0xffffffac
   17e14:	mov	r2, #1
   17e18:	mov	r3, #1
   17e1c:	b	17e4c <__assert_fail@plt+0x63d4>
   17e20:	cmp	sl, #0
   17e24:	movne	r0, #34	; 0x22
   17e28:	strbne	r0, [r5]
   17e2c:	mov	r8, #1
   17e30:	movw	r0, #64868	; 0xfd64
   17e34:	movt	r0, #1
   17e38:	str	r0, [fp, #-84]	; 0xffffffac
   17e3c:	mov	r0, #1
   17e40:	str	r0, [fp, #-72]	; 0xffffffb8
   17e44:	mov	r2, #1
   17e48:	mov	r3, #0
   17e4c:	ldr	r0, [fp, #-72]	; 0xffffffb8
   17e50:	cmp	r0, #0
   17e54:	movwne	r0, #1
   17e58:	and	r1, r0, r3
   17e5c:	and	r1, r2, r1
   17e60:	str	r1, [sp, #56]	; 0x38
   17e64:	sub	r1, r7, #2
   17e68:	clz	r1, r1
   17e6c:	lsr	r1, r1, #5
   17e70:	and	r1, r1, r3
   17e74:	str	r1, [sp, #68]	; 0x44
   17e78:	str	r7, [fp, #-64]	; 0xffffffc0
   17e7c:	subs	r1, r7, #2
   17e80:	movwne	r1, #1
   17e84:	eor	r4, r3, #1
   17e88:	str	r4, [fp, #-88]	; 0xffffffa8
   17e8c:	orr	r4, r1, r4
   17e90:	str	r4, [sp, #72]	; 0x48
   17e94:	and	r1, r1, r2
   17e98:	and	r0, r0, r1
   17e9c:	str	r0, [fp, #-60]	; 0xffffffc4
   17ea0:	str	r3, [fp, #-76]	; 0xffffffb4
   17ea4:	orr	r0, r1, r3
   17ea8:	eor	r0, r0, #1
   17eac:	ldr	r1, [fp, #16]
   17eb0:	clz	r1, r1
   17eb4:	lsr	r1, r1, #5
   17eb8:	orr	r0, r1, r0
   17ebc:	str	r0, [fp, #-68]	; 0xffffffbc
   17ec0:	str	r2, [sp, #92]	; 0x5c
   17ec4:	eor	r0, r2, #1
   17ec8:	str	r0, [sp, #60]	; 0x3c
   17ecc:	mov	r7, #0
   17ed0:	cmn	lr, #1
   17ed4:	beq	17ee4 <__assert_fail@plt+0x646c>
   17ed8:	cmp	r7, lr
   17edc:	bne	17ef0 <__assert_fail@plt+0x6478>
   17ee0:	b	189fc <__assert_fail@plt+0x6f84>
   17ee4:	ldrb	r0, [ip, r7]
   17ee8:	cmp	r0, #0
   17eec:	beq	189fc <__assert_fail@plt+0x6f84>
   17ef0:	mov	r9, #0
   17ef4:	ldr	r0, [fp, #-60]	; 0xffffffc4
   17ef8:	cmp	r0, #0
   17efc:	beq	17f30 <__assert_fail@plt+0x64b8>
   17f00:	ldr	r0, [fp, #-72]	; 0xffffffb8
   17f04:	add	r4, r7, r0
   17f08:	cmp	r0, #2
   17f0c:	bcc	17f28 <__assert_fail@plt+0x64b0>
   17f10:	cmn	lr, #1
   17f14:	bne	17f28 <__assert_fail@plt+0x64b0>
   17f18:	mov	r0, ip
   17f1c:	bl	118e0 <strlen@plt>
   17f20:	ldr	ip, [fp, #-80]	; 0xffffffb0
   17f24:	mov	lr, r0
   17f28:	cmp	r4, lr
   17f2c:	bls	17f3c <__assert_fail@plt+0x64c4>
   17f30:	mov	r0, #0
   17f34:	str	r0, [fp, #-52]	; 0xffffffcc
   17f38:	b	17f80 <__assert_fail@plt+0x6508>
   17f3c:	mov	r4, lr
   17f40:	add	r0, ip, r7
   17f44:	ldr	r1, [fp, #-84]	; 0xffffffac
   17f48:	ldr	r2, [fp, #-72]	; 0xffffffb8
   17f4c:	bl	118d4 <bcmp@plt>
   17f50:	cmp	r0, #0
   17f54:	mov	r1, r0
   17f58:	movwne	r1, #1
   17f5c:	ldr	r2, [fp, #-88]	; 0xffffffa8
   17f60:	orr	r1, r1, r2
   17f64:	tst	r1, #1
   17f68:	beq	18ad0 <__assert_fail@plt+0x7058>
   17f6c:	clz	r0, r0
   17f70:	lsr	r0, r0, #5
   17f74:	str	r0, [fp, #-52]	; 0xffffffcc
   17f78:	ldr	ip, [fp, #-80]	; 0xffffffb0
   17f7c:	mov	lr, r4
   17f80:	ldrb	r4, [ip, r7]
   17f84:	cmp	r4, #126	; 0x7e
   17f88:	bhi	184b8 <__assert_fail@plt+0x6a40>
   17f8c:	mov	r6, #1
   17f90:	mov	r2, #110	; 0x6e
   17f94:	mov	r0, #97	; 0x61
   17f98:	add	r3, pc, #4
   17f9c:	mov	r1, #0
   17fa0:	ldr	pc, [r3, r4, lsl #2]
   17fa4:	andeq	r8, r1, r8, lsl r3
   17fa8:			; <UNDEFINED> instruction: 0x000184b8
   17fac:			; <UNDEFINED> instruction: 0x000184b8
   17fb0:			; <UNDEFINED> instruction: 0x000184b8
   17fb4:			; <UNDEFINED> instruction: 0x000184b8
   17fb8:			; <UNDEFINED> instruction: 0x000184b8
   17fbc:			; <UNDEFINED> instruction: 0x000184b8
   17fc0:	andeq	r8, r1, ip, lsl #11
   17fc4:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   17fc8:	strdeq	r8, [r1], -r0
   17fcc:	andeq	r8, r1, r4, lsl #6
   17fd0:	andeq	r8, r1, r0, lsr #8
   17fd4:	andeq	r8, r1, r8, ror #5
   17fd8:	andeq	r8, r1, r0, lsl #6
   17fdc:			; <UNDEFINED> instruction: 0x000184b8
   17fe0:			; <UNDEFINED> instruction: 0x000184b8
   17fe4:			; <UNDEFINED> instruction: 0x000184b8
   17fe8:			; <UNDEFINED> instruction: 0x000184b8
   17fec:			; <UNDEFINED> instruction: 0x000184b8
   17ff0:			; <UNDEFINED> instruction: 0x000184b8
   17ff4:			; <UNDEFINED> instruction: 0x000184b8
   17ff8:			; <UNDEFINED> instruction: 0x000184b8
   17ffc:			; <UNDEFINED> instruction: 0x000184b8
   18000:			; <UNDEFINED> instruction: 0x000184b8
   18004:			; <UNDEFINED> instruction: 0x000184b8
   18008:			; <UNDEFINED> instruction: 0x000184b8
   1800c:			; <UNDEFINED> instruction: 0x000184b8
   18010:			; <UNDEFINED> instruction: 0x000184b8
   18014:			; <UNDEFINED> instruction: 0x000184b8
   18018:			; <UNDEFINED> instruction: 0x000184b8
   1801c:			; <UNDEFINED> instruction: 0x000184b8
   18020:			; <UNDEFINED> instruction: 0x000184b8
   18024:	muleq	r1, ip, r2
   18028:	andeq	r8, r1, r0, lsr #5
   1802c:	andeq	r8, r1, r0, lsr #5
   18030:	andeq	r8, r1, r8, lsl #5
   18034:	andeq	r8, r1, r0, lsr #5
   18038:	andeq	r8, r1, r0, lsr #3
   1803c:	andeq	r8, r1, r0, lsr #5
   18040:	andeq	r8, r1, r8, lsr #8
   18044:	andeq	r8, r1, r0, lsr #5
   18048:	andeq	r8, r1, r0, lsr #5
   1804c:	andeq	r8, r1, r0, lsr #5
   18050:	andeq	r8, r1, r0, lsr #3
   18054:	andeq	r8, r1, r0, lsr #3
   18058:	andeq	r8, r1, r0, lsr #3
   1805c:	andeq	r8, r1, r0, lsr #3
   18060:	andeq	r8, r1, r0, lsr #3
   18064:	andeq	r8, r1, r0, lsr #3
   18068:	andeq	r8, r1, r0, lsr #3
   1806c:	andeq	r8, r1, r0, lsr #3
   18070:	andeq	r8, r1, r0, lsr #3
   18074:	andeq	r8, r1, r0, lsr #3
   18078:	andeq	r8, r1, r0, lsr #3
   1807c:	andeq	r8, r1, r0, lsr #3
   18080:	andeq	r8, r1, r0, lsr #3
   18084:	andeq	r8, r1, r0, lsr #3
   18088:	andeq	r8, r1, r0, lsr #3
   1808c:	andeq	r8, r1, r0, lsr #3
   18090:	andeq	r8, r1, r0, lsr #5
   18094:	andeq	r8, r1, r0, lsr #5
   18098:	andeq	r8, r1, r0, lsr #5
   1809c:	andeq	r8, r1, r0, lsr #5
   180a0:	strdeq	r8, [r1], -r0
   180a4:			; <UNDEFINED> instruction: 0x000184b8
   180a8:	andeq	r8, r1, r0, lsr #3
   180ac:	andeq	r8, r1, r0, lsr #3
   180b0:	andeq	r8, r1, r0, lsr #3
   180b4:	andeq	r8, r1, r0, lsr #3
   180b8:	andeq	r8, r1, r0, lsr #3
   180bc:	andeq	r8, r1, r0, lsr #3
   180c0:	andeq	r8, r1, r0, lsr #3
   180c4:	andeq	r8, r1, r0, lsr #3
   180c8:	andeq	r8, r1, r0, lsr #3
   180cc:	andeq	r8, r1, r0, lsr #3
   180d0:	andeq	r8, r1, r0, lsr #3
   180d4:	andeq	r8, r1, r0, lsr #3
   180d8:	andeq	r8, r1, r0, lsr #3
   180dc:	andeq	r8, r1, r0, lsr #3
   180e0:	andeq	r8, r1, r0, lsr #3
   180e4:	andeq	r8, r1, r0, lsr #3
   180e8:	andeq	r8, r1, r0, lsr #3
   180ec:	andeq	r8, r1, r0, lsr #3
   180f0:	andeq	r8, r1, r0, lsr #3
   180f4:	andeq	r8, r1, r0, lsr #3
   180f8:	andeq	r8, r1, r0, lsr #3
   180fc:	andeq	r8, r1, r0, lsr #3
   18100:	andeq	r8, r1, r0, lsr #3
   18104:	andeq	r8, r1, r0, lsr #3
   18108:	andeq	r8, r1, r0, lsr #3
   1810c:	andeq	r8, r1, r0, lsr #3
   18110:	andeq	r8, r1, r0, lsr #5
   18114:	andeq	r8, r1, r8, asr #5
   18118:	andeq	r8, r1, r0, lsr #3
   1811c:	andeq	r8, r1, r0, lsr #5
   18120:	andeq	r8, r1, r0, lsr #3
   18124:	andeq	r8, r1, r0, lsr #5
   18128:	andeq	r8, r1, r0, lsr #3
   1812c:	andeq	r8, r1, r0, lsr #3
   18130:	andeq	r8, r1, r0, lsr #3
   18134:	andeq	r8, r1, r0, lsr #3
   18138:	andeq	r8, r1, r0, lsr #3
   1813c:	andeq	r8, r1, r0, lsr #3
   18140:	andeq	r8, r1, r0, lsr #3
   18144:	andeq	r8, r1, r0, lsr #3
   18148:	andeq	r8, r1, r0, lsr #3
   1814c:	andeq	r8, r1, r0, lsr #3
   18150:	andeq	r8, r1, r0, lsr #3
   18154:	andeq	r8, r1, r0, lsr #3
   18158:	andeq	r8, r1, r0, lsr #3
   1815c:	andeq	r8, r1, r0, lsr #3
   18160:	andeq	r8, r1, r0, lsr #3
   18164:	andeq	r8, r1, r0, lsr #3
   18168:	andeq	r8, r1, r0, lsr #3
   1816c:	andeq	r8, r1, r0, lsr #3
   18170:	andeq	r8, r1, r0, lsr #3
   18174:	andeq	r8, r1, r0, lsr #3
   18178:	andeq	r8, r1, r0, lsr #3
   1817c:	andeq	r8, r1, r0, lsr #3
   18180:	andeq	r8, r1, r0, lsr #3
   18184:	andeq	r8, r1, r0, lsr #3
   18188:	andeq	r8, r1, r0, lsr #3
   1818c:	andeq	r8, r1, r0, lsr #3
   18190:	andeq	r8, r1, ip, asr r2
   18194:	andeq	r8, r1, r0, lsr #5
   18198:	andeq	r8, r1, ip, asr r2
   1819c:	andeq	r8, r1, r8, lsl #5
   181a0:	ldr	r0, [fp, #-68]	; 0xffffffbc
   181a4:	tst	r0, #1
   181a8:	bne	181d4 <__assert_fail@plt+0x675c>
   181ac:	ubfx	r0, r4, #5, #3
   181b0:	ldr	r1, [fp, #16]
   181b4:	ldr	r0, [r1, r0, lsl #2]
   181b8:	and	r1, r4, #31
   181bc:	mov	r2, #1
   181c0:	tst	r0, r2, lsl r1
   181c4:	beq	181d4 <__assert_fail@plt+0x675c>
   181c8:	mov	r0, r4
   181cc:	mov	r1, r6
   181d0:	b	181e8 <__assert_fail@plt+0x6770>
   181d4:	ldr	r0, [fp, #-52]	; 0xffffffcc
   181d8:	cmp	r0, #0
   181dc:	mov	r0, r4
   181e0:	mov	r1, r6
   181e4:	beq	18520 <__assert_fail@plt+0x6aa8>
   181e8:	ldr	r2, [fp, #-76]	; 0xffffffb4
   181ec:	tst	r2, #1
   181f0:	bne	18ae4 <__assert_fail@plt+0x706c>
   181f4:	ldr	r2, [fp, #-64]	; 0xffffffc0
   181f8:	subs	r2, r2, #2
   181fc:	movwne	r2, #1
   18200:	ldr	r3, [fp, #-56]	; 0xffffffc8
   18204:	orr	r2, r2, r3
   18208:	tst	r2, #1
   1820c:	bne	18248 <__assert_fail@plt+0x67d0>
   18210:	cmp	r8, sl
   18214:	movcc	r2, #39	; 0x27
   18218:	strbcc	r2, [r5, r8]
   1821c:	add	r2, r8, #1
   18220:	cmp	r2, sl
   18224:	movcc	r3, #36	; 0x24
   18228:	strbcc	r3, [r5, r2]
   1822c:	add	r2, r8, #2
   18230:	cmp	r2, sl
   18234:	movcc	r3, #39	; 0x27
   18238:	strbcc	r3, [r5, r2]
   1823c:	add	r8, r8, #3
   18240:	mov	r2, #1
   18244:	str	r2, [fp, #-56]	; 0xffffffc8
   18248:	cmp	r8, sl
   1824c:	movcc	r2, #92	; 0x5c
   18250:	strbcc	r2, [r5, r8]
   18254:	add	r8, r8, #1
   18258:	b	18564 <__assert_fail@plt+0x6aec>
   1825c:	cmp	lr, #1
   18260:	beq	18288 <__assert_fail@plt+0x6810>
   18264:	mov	r6, #0
   18268:	cmn	lr, #1
   1826c:	bne	18294 <__assert_fail@plt+0x681c>
   18270:	ldrb	r0, [ip, #1]
   18274:	cmp	r0, #0
   18278:	beq	18288 <__assert_fail@plt+0x6810>
   1827c:	mvn	lr, #0
   18280:	mov	r9, #0
   18284:	b	181a0 <__assert_fail@plt+0x6728>
   18288:	mov	r6, #0
   1828c:	cmp	r7, #0
   18290:	beq	1829c <__assert_fail@plt+0x6824>
   18294:	mov	r9, #0
   18298:	b	181a0 <__assert_fail@plt+0x6728>
   1829c:	mov	r1, #1
   182a0:	ldr	r0, [fp, #-64]	; 0xffffffc0
   182a4:	cmp	r0, #2
   182a8:	bne	182c0 <__assert_fail@plt+0x6848>
   182ac:	ldr	r0, [fp, #-76]	; 0xffffffb4
   182b0:	tst	r0, #1
   182b4:	mov	r6, r1
   182b8:	beq	181a0 <__assert_fail@plt+0x6728>
   182bc:	b	18ae4 <__assert_fail@plt+0x706c>
   182c0:	mov	r6, r1
   182c4:	b	181a0 <__assert_fail@plt+0x6728>
   182c8:	ldr	r0, [fp, #-64]	; 0xffffffc0
   182cc:	cmp	r0, #2
   182d0:	bne	18504 <__assert_fail@plt+0x6a8c>
   182d4:	ldr	r0, [fp, #-76]	; 0xffffffb4
   182d8:	tst	r0, #1
   182dc:	bne	18ae4 <__assert_fail@plt+0x706c>
   182e0:	mov	r9, #0
   182e4:	b	18518 <__assert_fail@plt+0x6aa0>
   182e8:	mov	r0, #102	; 0x66
   182ec:	b	1858c <__assert_fail@plt+0x6b14>
   182f0:	mov	r2, #116	; 0x74
   182f4:	b	18304 <__assert_fail@plt+0x688c>
   182f8:	mov	r0, #98	; 0x62
   182fc:	b	1858c <__assert_fail@plt+0x6b14>
   18300:	mov	r2, #114	; 0x72
   18304:	ldr	r0, [sp, #72]	; 0x48
   18308:	tst	r0, #1
   1830c:	mov	r0, r2
   18310:	bne	1858c <__assert_fail@plt+0x6b14>
   18314:	b	18ae4 <__assert_fail@plt+0x706c>
   18318:	ldr	r0, [sp, #92]	; 0x5c
   1831c:	tst	r0, #1
   18320:	beq	185a8 <__assert_fail@plt+0x6b30>
   18324:	ldr	r0, [fp, #-76]	; 0xffffffb4
   18328:	tst	r0, #1
   1832c:	bne	18ae4 <__assert_fail@plt+0x706c>
   18330:	ldr	r0, [fp, #-64]	; 0xffffffc0
   18334:	subs	r0, r0, #2
   18338:	movwne	r0, #1
   1833c:	ldr	r1, [fp, #-56]	; 0xffffffc8
   18340:	orr	r0, r0, r1
   18344:	tst	r0, #1
   18348:	bne	18384 <__assert_fail@plt+0x690c>
   1834c:	cmp	r8, sl
   18350:	movcc	r0, #39	; 0x27
   18354:	strbcc	r0, [r5, r8]
   18358:	add	r0, r8, #1
   1835c:	cmp	r0, sl
   18360:	movcc	r1, #36	; 0x24
   18364:	strbcc	r1, [r5, r0]
   18368:	add	r0, r8, #2
   1836c:	cmp	r0, sl
   18370:	movcc	r1, #39	; 0x27
   18374:	strbcc	r1, [r5, r0]
   18378:	add	r8, r8, #3
   1837c:	mov	r0, #1
   18380:	str	r0, [fp, #-56]	; 0xffffffc8
   18384:	cmp	r8, sl
   18388:	movcc	r0, #92	; 0x5c
   1838c:	strbcc	r0, [r5, r8]
   18390:	add	r0, r8, #1
   18394:	mov	r6, #0
   18398:	mov	r9, #1
   1839c:	mov	r4, #48	; 0x30
   183a0:	ldr	r1, [fp, #-64]	; 0xffffffc0
   183a4:	cmp	r1, #2
   183a8:	beq	1876c <__assert_fail@plt+0x6cf4>
   183ac:	add	r1, r7, #1
   183b0:	cmp	r1, lr
   183b4:	bcs	1876c <__assert_fail@plt+0x6cf4>
   183b8:	ldrb	r1, [ip, r1]
   183bc:	sub	r1, r1, #48	; 0x30
   183c0:	uxtb	r1, r1
   183c4:	cmp	r1, #9
   183c8:	bhi	1876c <__assert_fail@plt+0x6cf4>
   183cc:	cmp	r0, sl
   183d0:	movcc	r1, #48	; 0x30
   183d4:	strbcc	r1, [r5, r0]
   183d8:	add	r0, r8, #2
   183dc:	cmp	r0, sl
   183e0:	movcc	r1, #48	; 0x30
   183e4:	strbcc	r1, [r5, r0]
   183e8:	add	r8, r8, #3
   183ec:	b	181a0 <__assert_fail@plt+0x6728>
   183f0:	mov	r9, #0
   183f4:	mov	r4, #63	; 0x3f
   183f8:	ldr	r0, [fp, #-64]	; 0xffffffc0
   183fc:	cmp	r0, #5
   18400:	beq	18774 <__assert_fail@plt+0x6cfc>
   18404:	cmp	r0, #2
   18408:	bne	1881c <__assert_fail@plt+0x6da4>
   1840c:	ldr	r0, [fp, #-76]	; 0xffffffb4
   18410:	tst	r0, #1
   18414:	mov	r6, #0
   18418:	beq	181a0 <__assert_fail@plt+0x6728>
   1841c:	b	18ae4 <__assert_fail@plt+0x706c>
   18420:	mov	r0, #118	; 0x76
   18424:	b	1858c <__assert_fail@plt+0x6b14>
   18428:	mov	r4, #39	; 0x27
   1842c:	mov	r0, #1
   18430:	str	r0, [sp, #64]	; 0x40
   18434:	ldr	r0, [fp, #-64]	; 0xffffffc0
   18438:	cmp	r0, #2
   1843c:	bne	185c4 <__assert_fail@plt+0x6b4c>
   18440:	ldr	r0, [fp, #-76]	; 0xffffffb4
   18444:	tst	r0, #1
   18448:	bne	18ae4 <__assert_fail@plt+0x706c>
   1844c:	ldr	r2, [sp, #84]	; 0x54
   18450:	cmp	r2, #0
   18454:	mov	r0, r2
   18458:	movwne	r0, #1
   1845c:	clz	r1, sl
   18460:	lsr	r1, r1, #5
   18464:	orrs	r0, r0, r1
   18468:	moveq	r2, sl
   1846c:	str	r2, [sp, #84]	; 0x54
   18470:	moveq	sl, r0
   18474:	cmp	r8, sl
   18478:	movcc	r0, #39	; 0x27
   1847c:	strbcc	r0, [r5, r8]
   18480:	add	r0, r8, #1
   18484:	cmp	r0, sl
   18488:	movcc	r1, #92	; 0x5c
   1848c:	strbcc	r1, [r5, r0]
   18490:	add	r0, r8, #2
   18494:	cmp	r0, sl
   18498:	movcc	r1, #39	; 0x27
   1849c:	strbcc	r1, [r5, r0]
   184a0:	add	r8, r8, #3
   184a4:	mov	r0, #0
   184a8:	str	r0, [fp, #-56]	; 0xffffffc8
   184ac:	mov	r9, #0
   184b0:	mov	r6, #1
   184b4:	b	181a0 <__assert_fail@plt+0x6728>
   184b8:	ldr	r0, [sp, #44]	; 0x2c
   184bc:	cmp	r0, #1
   184c0:	bne	185cc <__assert_fail@plt+0x6b54>
   184c4:	str	lr, [sp, #32]
   184c8:	bl	118b0 <__ctype_b_loc@plt>
   184cc:	ldr	ip, [fp, #-80]	; 0xffffffb0
   184d0:	ldr	r0, [r0]
   184d4:	add	r0, r0, r4, lsl #1
   184d8:	ldrb	r0, [r0, #1]
   184dc:	ubfx	r6, r0, #6, #1
   184e0:	mov	r2, #1
   184e4:	ldr	r0, [sp, #60]	; 0x3c
   184e8:	orr	r1, r6, r0
   184ec:	cmp	r2, #1
   184f0:	bhi	18824 <__assert_fail@plt+0x6dac>
   184f4:	tst	r1, #1
   184f8:	beq	18824 <__assert_fail@plt+0x6dac>
   184fc:	ldr	lr, [sp, #32]
   18500:	b	181a0 <__assert_fail@plt+0x6728>
   18504:	mov	r9, #0
   18508:	mov	r0, #92	; 0x5c
   1850c:	ldr	r1, [sp, #56]	; 0x38
   18510:	cmp	r1, #0
   18514:	beq	1858c <__assert_fail@plt+0x6b14>
   18518:	mov	r4, #92	; 0x5c
   1851c:	mov	r6, #0
   18520:	cmp	r9, #0
   18524:	bne	1855c <__assert_fail@plt+0x6ae4>
   18528:	ldr	r0, [fp, #-56]	; 0xffffffc8
   1852c:	tst	r0, #1
   18530:	beq	1855c <__assert_fail@plt+0x6ae4>
   18534:	cmp	r8, sl
   18538:	movcc	r0, #39	; 0x27
   1853c:	strbcc	r0, [r5, r8]
   18540:	add	r0, r8, #1
   18544:	cmp	r0, sl
   18548:	movcc	r1, #39	; 0x27
   1854c:	strbcc	r1, [r5, r0]
   18550:	add	r8, r8, #2
   18554:	mov	r0, #0
   18558:	str	r0, [fp, #-56]	; 0xffffffc8
   1855c:	mov	r1, r6
   18560:	mov	r0, r4
   18564:	cmp	r8, sl
   18568:	strbcc	r0, [r5, r8]
   1856c:	ldr	r0, [fp, #-48]	; 0xffffffd0
   18570:	and	r0, r0, r1
   18574:	str	r0, [fp, #-48]	; 0xffffffd0
   18578:	add	r8, r8, #1
   1857c:	add	r7, r7, #1
   18580:	cmn	lr, #1
   18584:	bne	17ed8 <__assert_fail@plt+0x6460>
   18588:	b	17ee4 <__assert_fail@plt+0x646c>
   1858c:	mov	r9, #0
   18590:	ldr	r1, [sp, #92]	; 0x5c
   18594:	tst	r1, #1
   18598:	mov	r6, #0
   1859c:	mov	r1, #0
   185a0:	beq	181a0 <__assert_fail@plt+0x6728>
   185a4:	b	181e8 <__assert_fail@plt+0x6770>
   185a8:	mov	r4, #0
   185ac:	ldr	r0, [sp, #40]	; 0x28
   185b0:	cmp	r0, #0
   185b4:	mov	r9, #0
   185b8:	mov	r6, #0
   185bc:	beq	181a0 <__assert_fail@plt+0x6728>
   185c0:	b	1857c <__assert_fail@plt+0x6b04>
   185c4:	mov	r6, #1
   185c8:	b	181a0 <__assert_fail@plt+0x6728>
   185cc:	mov	r0, #0
   185d0:	str	r0, [fp, #-36]	; 0xffffffdc
   185d4:	str	r0, [fp, #-40]	; 0xffffffd8
   185d8:	cmn	lr, #1
   185dc:	bne	185f0 <__assert_fail@plt+0x6b78>
   185e0:	mov	r0, ip
   185e4:	bl	118e0 <strlen@plt>
   185e8:	ldr	ip, [fp, #-80]	; 0xffffffb0
   185ec:	mov	lr, r0
   185f0:	ldr	r0, [sp, #76]	; 0x4c
   185f4:	add	r0, r0, r7
   185f8:	str	r0, [sp, #24]
   185fc:	mov	r6, #1
   18600:	mov	r2, #0
   18604:	sub	r0, fp, #40	; 0x28
   18608:	mov	r3, r0
   1860c:	str	r5, [sp, #28]
   18610:	str	lr, [sp, #32]
   18614:	b	18658 <__assert_fail@plt+0x6be0>
   18618:	ldr	r5, [sp, #52]	; 0x34
   1861c:	add	r5, r0, r5
   18620:	ldr	r0, [fp, #-44]	; 0xffffffd4
   18624:	bl	117e4 <iswprint@plt>
   18628:	cmp	r0, #0
   1862c:	movwne	r0, #1
   18630:	and	r6, r6, r0
   18634:	sub	r0, fp, #40	; 0x28
   18638:	bl	11730 <mbsinit@plt>
   1863c:	sub	r3, fp, #40	; 0x28
   18640:	mov	r2, r5
   18644:	ldr	lr, [sp, #32]
   18648:	cmp	r0, #0
   1864c:	ldr	r5, [sp, #28]
   18650:	ldr	ip, [fp, #-80]	; 0xffffffb0
   18654:	bne	184e4 <__assert_fail@plt+0x6a6c>
   18658:	str	r2, [sp, #52]	; 0x34
   1865c:	add	r0, r2, r7
   18660:	add	r1, ip, r0
   18664:	str	r0, [sp, #48]	; 0x30
   18668:	sub	r2, lr, r0
   1866c:	sub	r0, fp, #44	; 0x2c
   18670:	bl	1adec <__assert_fail@plt+0x9374>
   18674:	cmp	r0, #0
   18678:	beq	189f0 <__assert_fail@plt+0x6f78>
   1867c:	cmn	r0, #1
   18680:	beq	189ac <__assert_fail@plt+0x6f34>
   18684:	cmn	r0, #2
   18688:	ldr	lr, [sp, #32]
   1868c:	beq	189b4 <__assert_fail@plt+0x6f3c>
   18690:	cmp	r0, #2
   18694:	mov	r1, #0
   18698:	movwcc	r1, #1
   1869c:	ldr	r2, [sp, #68]	; 0x44
   186a0:	eor	r2, r2, #1
   186a4:	orrs	r1, r2, r1
   186a8:	bne	18618 <__assert_fail@plt+0x6ba0>
   186ac:	ldr	r1, [sp, #52]	; 0x34
   186b0:	ldr	r2, [sp, #24]
   186b4:	add	r1, r2, r1
   186b8:	sub	r2, r0, #1
   186bc:	b	186cc <__assert_fail@plt+0x6c54>
   186c0:	add	r1, r1, #1
   186c4:	subs	r2, r2, #1
   186c8:	beq	18618 <__assert_fail@plt+0x6ba0>
   186cc:	ldrb	r3, [r1]
   186d0:	sub	r3, r3, #91	; 0x5b
   186d4:	cmp	r3, #33	; 0x21
   186d8:	bhi	186c0 <__assert_fail@plt+0x6c48>
   186dc:	add	r5, pc, #0
   186e0:	ldr	pc, [r5, r3, lsl #2]
   186e4:	ldrdeq	r8, [r1], -ip
   186e8:	ldrdeq	r8, [r1], -ip
   186ec:	andeq	r8, r1, r0, asr #13
   186f0:	ldrdeq	r8, [r1], -ip
   186f4:	andeq	r8, r1, r0, asr #13
   186f8:	ldrdeq	r8, [r1], -ip
   186fc:	andeq	r8, r1, r0, asr #13
   18700:	andeq	r8, r1, r0, asr #13
   18704:	andeq	r8, r1, r0, asr #13
   18708:	andeq	r8, r1, r0, asr #13
   1870c:	andeq	r8, r1, r0, asr #13
   18710:	andeq	r8, r1, r0, asr #13
   18714:	andeq	r8, r1, r0, asr #13
   18718:	andeq	r8, r1, r0, asr #13
   1871c:	andeq	r8, r1, r0, asr #13
   18720:	andeq	r8, r1, r0, asr #13
   18724:	andeq	r8, r1, r0, asr #13
   18728:	andeq	r8, r1, r0, asr #13
   1872c:	andeq	r8, r1, r0, asr #13
   18730:	andeq	r8, r1, r0, asr #13
   18734:	andeq	r8, r1, r0, asr #13
   18738:	andeq	r8, r1, r0, asr #13
   1873c:	andeq	r8, r1, r0, asr #13
   18740:	andeq	r8, r1, r0, asr #13
   18744:	andeq	r8, r1, r0, asr #13
   18748:	andeq	r8, r1, r0, asr #13
   1874c:	andeq	r8, r1, r0, asr #13
   18750:	andeq	r8, r1, r0, asr #13
   18754:	andeq	r8, r1, r0, asr #13
   18758:	andeq	r8, r1, r0, asr #13
   1875c:	andeq	r8, r1, r0, asr #13
   18760:	andeq	r8, r1, r0, asr #13
   18764:	andeq	r8, r1, r0, asr #13
   18768:	ldrdeq	r8, [r1], -ip
   1876c:	mov	r8, r0
   18770:	b	181a0 <__assert_fail@plt+0x6728>
   18774:	ldr	r0, [sp, #36]	; 0x24
   18778:	cmp	r0, #0
   1877c:	beq	1881c <__assert_fail@plt+0x6da4>
   18780:	add	r0, r7, #2
   18784:	cmp	r0, lr
   18788:	bcs	1881c <__assert_fail@plt+0x6da4>
   1878c:	add	r1, r7, ip
   18790:	ldrb	r1, [r1, #1]
   18794:	cmp	r1, #63	; 0x3f
   18798:	bne	1881c <__assert_fail@plt+0x6da4>
   1879c:	ldrb	r1, [ip, r0]
   187a0:	sub	r2, r1, #33	; 0x21
   187a4:	cmp	r2, #29
   187a8:	bhi	1881c <__assert_fail@plt+0x6da4>
   187ac:	mov	r3, #1
   187b0:	movw	r6, #20929	; 0x51c1
   187b4:	movt	r6, #14336	; 0x3800
   187b8:	tst	r6, r3, lsl r2
   187bc:	beq	1881c <__assert_fail@plt+0x6da4>
   187c0:	ldr	r2, [fp, #-76]	; 0xffffffb4
   187c4:	tst	r2, #1
   187c8:	bne	18ae4 <__assert_fail@plt+0x706c>
   187cc:	cmp	r8, sl
   187d0:	movcc	r2, #63	; 0x3f
   187d4:	strbcc	r2, [r5, r8]
   187d8:	add	r2, r8, #1
   187dc:	cmp	r2, sl
   187e0:	movcc	r3, #34	; 0x22
   187e4:	strbcc	r3, [r5, r2]
   187e8:	add	r2, r8, #2
   187ec:	cmp	r2, sl
   187f0:	movcc	r3, #34	; 0x22
   187f4:	strbcc	r3, [r5, r2]
   187f8:	add	r2, r8, #3
   187fc:	cmp	r2, sl
   18800:	movcc	r3, #63	; 0x3f
   18804:	strbcc	r3, [r5, r2]
   18808:	add	r8, r8, #4
   1880c:	mov	r7, r0
   18810:	mov	r4, r1
   18814:	mov	r6, #0
   18818:	b	181a0 <__assert_fail@plt+0x6728>
   1881c:	mov	r6, #0
   18820:	b	181a0 <__assert_fail@plt+0x6728>
   18824:	add	r0, r2, r7
   18828:	str	r0, [sp, #52]	; 0x34
   1882c:	mov	r2, #0
   18830:	ldr	lr, [sp, #32]
   18834:	ldr	r0, [fp, #-56]	; 0xffffffc8
   18838:	str	r1, [sp, #48]	; 0x30
   1883c:	tst	r1, #1
   18840:	bne	1891c <__assert_fail@plt+0x6ea4>
   18844:	ldr	r1, [fp, #-76]	; 0xffffffb4
   18848:	tst	r1, #1
   1884c:	bne	18ae4 <__assert_fail@plt+0x706c>
   18850:	mov	r3, r0
   18854:	ldr	r0, [fp, #-64]	; 0xffffffc0
   18858:	subs	r1, r0, #2
   1885c:	movwne	r1, #1
   18860:	orr	r1, r1, r3
   18864:	tst	r1, #1
   18868:	bne	188a0 <__assert_fail@plt+0x6e28>
   1886c:	cmp	r8, sl
   18870:	movcc	r0, #39	; 0x27
   18874:	strbcc	r0, [r5, r8]
   18878:	add	r2, r8, #1
   1887c:	cmp	r2, sl
   18880:	movcc	r0, #36	; 0x24
   18884:	strbcc	r0, [r5, r2]
   18888:	add	r2, r8, #2
   1888c:	cmp	r2, sl
   18890:	movcc	r0, #39	; 0x27
   18894:	strbcc	r0, [r5, r2]
   18898:	add	r8, r8, #3
   1889c:	mov	r3, #1
   188a0:	cmp	r8, sl
   188a4:	movcc	r1, #92	; 0x5c
   188a8:	strbcc	r1, [r5, r8]
   188ac:	add	r2, r8, #1
   188b0:	cmp	r2, sl
   188b4:	bcs	188c8 <__assert_fail@plt+0x6e50>
   188b8:	uxtb	r1, r4
   188bc:	mov	r0, #48	; 0x30
   188c0:	orr	r1, r0, r1, lsr #6
   188c4:	strb	r1, [r5, r2]
   188c8:	add	r2, r8, #2
   188cc:	cmp	r2, sl
   188d0:	lsrcc	r1, r4, #3
   188d4:	movcc	r0, #6
   188d8:	bficc	r1, r0, #3, #29
   188dc:	strbcc	r1, [r5, r2]
   188e0:	mov	r0, #6
   188e4:	bfi	r4, r0, #3, #29
   188e8:	add	r8, r8, #3
   188ec:	mov	r2, #1
   188f0:	mov	r0, r3
   188f4:	b	18940 <__assert_fail@plt+0x6ec8>
   188f8:	cmp	r8, sl
   188fc:	strbcc	r4, [r5, r8]
   18900:	ldr	r1, [sp, #76]	; 0x4c
   18904:	ldrb	r4, [r1, r7]
   18908:	add	r8, r8, #1
   1890c:	mov	r7, r3
   18910:	ldr	r1, [sp, #48]	; 0x30
   18914:	tst	r1, #1
   18918:	beq	18844 <__assert_fail@plt+0x6dcc>
   1891c:	ldr	r1, [fp, #-52]	; 0xffffffcc
   18920:	tst	r1, #1
   18924:	beq	18938 <__assert_fail@plt+0x6ec0>
   18928:	cmp	r8, sl
   1892c:	movcc	r1, #92	; 0x5c
   18930:	strbcc	r1, [r5, r8]
   18934:	add	r8, r8, #1
   18938:	mov	r1, #0
   1893c:	str	r1, [fp, #-52]	; 0xffffffcc
   18940:	and	r9, r2, #1
   18944:	add	r3, r7, #1
   18948:	ldr	r1, [sp, #52]	; 0x34
   1894c:	cmp	r1, r3
   18950:	bls	18994 <__assert_fail@plt+0x6f1c>
   18954:	cmp	r9, #0
   18958:	movwne	r9, #1
   1895c:	mvn	r1, r0
   18960:	orr	r1, r1, r9
   18964:	tst	r1, #1
   18968:	bne	188f8 <__assert_fail@plt+0x6e80>
   1896c:	cmp	r8, sl
   18970:	movcc	r1, #39	; 0x27
   18974:	strbcc	r1, [r5, r8]
   18978:	add	r1, r8, #1
   1897c:	cmp	r1, sl
   18980:	movcc	r0, #39	; 0x27
   18984:	strbcc	r0, [r5, r1]
   18988:	add	r8, r8, #2
   1898c:	mov	r0, #0
   18990:	b	188f8 <__assert_fail@plt+0x6e80>
   18994:	str	r0, [fp, #-56]	; 0xffffffc8
   18998:	cmp	r9, #0
   1899c:	movwne	r9, #1
   189a0:	cmp	r9, #0
   189a4:	beq	18528 <__assert_fail@plt+0x6ab0>
   189a8:	b	1855c <__assert_fail@plt+0x6ae4>
   189ac:	mov	r6, #0
   189b0:	b	189f0 <__assert_fail@plt+0x6f78>
   189b4:	mov	r6, #0
   189b8:	ldr	r0, [sp, #48]	; 0x30
   189bc:	cmp	r0, lr
   189c0:	bcs	189f0 <__assert_fail@plt+0x6f78>
   189c4:	ldr	ip, [fp, #-80]	; 0xffffffb0
   189c8:	add	r0, ip, r7
   189cc:	ldr	r2, [sp, #52]	; 0x34
   189d0:	ldrb	r1, [r0, r2]
   189d4:	cmp	r1, #0
   189d8:	beq	184e4 <__assert_fail@plt+0x6a6c>
   189dc:	add	r2, r2, #1
   189e0:	add	r1, r7, r2
   189e4:	cmp	r1, lr
   189e8:	bcc	189d0 <__assert_fail@plt+0x6f58>
   189ec:	b	184e4 <__assert_fail@plt+0x6a6c>
   189f0:	ldr	ip, [fp, #-80]	; 0xffffffb0
   189f4:	ldr	r2, [sp, #52]	; 0x34
   189f8:	b	184e4 <__assert_fail@plt+0x6a6c>
   189fc:	ldr	r1, [fp, #-64]	; 0xffffffc0
   18a00:	eor	r0, r1, #2
   18a04:	orr	r0, r0, r8
   18a08:	clz	r0, r0
   18a0c:	lsr	r0, r0, #5
   18a10:	ldr	r3, [fp, #-76]	; 0xffffffb4
   18a14:	tst	r3, r0
   18a18:	bne	18ae4 <__assert_fail@plt+0x706c>
   18a1c:	mov	r6, r5
   18a20:	subs	r0, r1, #2
   18a24:	movwne	r0, #1
   18a28:	orr	r0, r3, r0
   18a2c:	tst	r0, #1
   18a30:	ldr	r2, [sp, #92]	; 0x5c
   18a34:	ldreq	r0, [sp, #64]	; 0x40
   18a38:	eoreq	r0, r0, #1
   18a3c:	tsteq	r0, #1
   18a40:	bne	18a80 <__assert_fail@plt+0x7008>
   18a44:	mov	r9, lr
   18a48:	ldr	r0, [fp, #-48]	; 0xffffffd0
   18a4c:	tst	r0, #1
   18a50:	bne	18b4c <__assert_fail@plt+0x70d4>
   18a54:	ldr	r0, [sp, #84]	; 0x54
   18a58:	cmp	r0, #0
   18a5c:	beq	18a80 <__assert_fail@plt+0x7008>
   18a60:	mov	r0, #0
   18a64:	str	r0, [fp, #-48]	; 0xffffffd0
   18a68:	mov	r1, #2
   18a6c:	cmp	sl, #0
   18a70:	mov	r0, r2
   18a74:	mov	r4, r3
   18a78:	ldr	r7, [sp, #84]	; 0x54
   18a7c:	beq	17c58 <__assert_fail@plt+0x61e0>
   18a80:	ldr	r1, [fp, #-84]	; 0xffffffac
   18a84:	clz	r0, r1
   18a88:	lsr	r0, r0, #5
   18a8c:	orr	r0, r0, r3
   18a90:	tst	r0, #1
   18a94:	bne	18ac0 <__assert_fail@plt+0x7048>
   18a98:	ldrb	r0, [r1]
   18a9c:	cmp	r0, #0
   18aa0:	beq	18ac0 <__assert_fail@plt+0x7048>
   18aa4:	add	r1, r1, #1
   18aa8:	cmp	r8, sl
   18aac:	strbcc	r0, [r6, r8]
   18ab0:	add	r8, r8, #1
   18ab4:	ldrb	r0, [r1], #1
   18ab8:	cmp	r0, #0
   18abc:	bne	18aa8 <__assert_fail@plt+0x7030>
   18ac0:	cmp	r8, sl
   18ac4:	movcc	r0, #0
   18ac8:	strbcc	r0, [r6, r8]
   18acc:	b	18b40 <__assert_fail@plt+0x70c8>
   18ad0:	ldr	ip, [fp, #-80]	; 0xffffffb0
   18ad4:	mov	lr, r4
   18ad8:	b	18ae4 <__assert_fail@plt+0x706c>
   18adc:	ldr	r5, [sp, #28]
   18ae0:	ldr	ip, [fp, #-80]	; 0xffffffb0
   18ae4:	mov	r0, #0
   18ae8:	ldr	r1, [fp, #12]
   18aec:	bic	r1, r1, #2
   18af0:	mov	r2, #2
   18af4:	ldr	r3, [sp, #92]	; 0x5c
   18af8:	tst	r3, #1
   18afc:	movwne	r2, #4
   18b00:	ldr	r3, [fp, #-64]	; 0xffffffc0
   18b04:	cmp	r3, #2
   18b08:	movne	r2, r3
   18b0c:	str	r2, [sp]
   18b10:	str	r1, [sp, #4]
   18b14:	str	r0, [sp, #8]
   18b18:	ldr	r0, [sp, #80]	; 0x50
   18b1c:	str	r0, [sp, #12]
   18b20:	ldr	r0, [sp, #88]	; 0x58
   18b24:	str	r0, [sp, #16]
   18b28:	mov	r0, r5
   18b2c:	mov	r1, sl
   18b30:	mov	r2, ip
   18b34:	mov	r3, lr
   18b38:	bl	17bcc <__assert_fail@plt+0x6154>
   18b3c:	mov	r8, r0
   18b40:	mov	r0, r8
   18b44:	sub	sp, fp, #28
   18b48:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18b4c:	mov	r0, #5
   18b50:	str	r0, [sp]
   18b54:	ldr	r0, [fp, #12]
   18b58:	str	r0, [sp, #4]
   18b5c:	ldr	r0, [fp, #16]
   18b60:	str	r0, [sp, #8]
   18b64:	ldr	r0, [sp, #80]	; 0x50
   18b68:	str	r0, [sp, #12]
   18b6c:	ldr	r0, [sp, #88]	; 0x58
   18b70:	str	r0, [sp, #16]
   18b74:	mov	r0, r6
   18b78:	ldr	r1, [sp, #84]	; 0x54
   18b7c:	ldr	r2, [fp, #-80]	; 0xffffffb0
   18b80:	mov	r3, r9
   18b84:	b	18b38 <__assert_fail@plt+0x70c0>
   18b88:	bl	11a60 <abort@plt>
   18b8c:	mov	r3, r2
   18b90:	mov	r2, #0
   18b94:	b	18b98 <__assert_fail@plt+0x7120>
   18b98:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18b9c:	add	fp, sp, #28
   18ba0:	sub	sp, sp, #36	; 0x24
   18ba4:	mov	r4, r2
   18ba8:	str	r2, [sp, #24]
   18bac:	mov	r5, r1
   18bb0:	mov	r6, r0
   18bb4:	str	r0, [sp, #20]
   18bb8:	movw	r8, #4616	; 0x1208
   18bbc:	movt	r8, #3
   18bc0:	cmp	r3, #0
   18bc4:	movne	r8, r3
   18bc8:	bl	11910 <__errno_location@plt>
   18bcc:	str	r0, [sp, #28]
   18bd0:	ldm	r8, {r3, r9}
   18bd4:	ldr	r1, [r8, #40]	; 0x28
   18bd8:	ldr	r2, [r8, #44]	; 0x2c
   18bdc:	ldr	r7, [r0]
   18be0:	str	r7, [sp, #32]
   18be4:	add	sl, r8, #8
   18be8:	cmp	r4, #0
   18bec:	orreq	r9, r9, #1
   18bf0:	stm	sp, {r3, r9, sl}
   18bf4:	str	r1, [sp, #12]
   18bf8:	str	r2, [sp, #16]
   18bfc:	mov	r0, #0
   18c00:	mov	r1, #0
   18c04:	mov	r2, r6
   18c08:	mov	r3, r5
   18c0c:	mov	r7, r5
   18c10:	bl	17bcc <__assert_fail@plt+0x6154>
   18c14:	mov	r5, r0
   18c18:	add	r4, r0, #1
   18c1c:	mov	r0, r4
   18c20:	bl	1a0b0 <__assert_fail@plt+0x8638>
   18c24:	mov	r6, r0
   18c28:	ldr	r0, [r8]
   18c2c:	ldr	r1, [r8, #40]	; 0x28
   18c30:	ldr	r2, [r8, #44]	; 0x2c
   18c34:	stm	sp, {r0, r9, sl}
   18c38:	str	r1, [sp, #12]
   18c3c:	str	r2, [sp, #16]
   18c40:	mov	r0, r6
   18c44:	mov	r1, r4
   18c48:	ldr	r2, [sp, #20]
   18c4c:	mov	r3, r7
   18c50:	bl	17bcc <__assert_fail@plt+0x6154>
   18c54:	ldr	r0, [sp, #24]
   18c58:	ldr	r1, [sp, #32]
   18c5c:	ldr	r2, [sp, #28]
   18c60:	str	r1, [r2]
   18c64:	cmp	r0, #0
   18c68:	strne	r5, [r0]
   18c6c:	mov	r0, r6
   18c70:	sub	sp, fp, #28
   18c74:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18c78:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   18c7c:	add	fp, sp, #24
   18c80:	movw	r8, #4488	; 0x1188
   18c84:	movt	r8, #3
   18c88:	ldr	r4, [r8]
   18c8c:	movw	r5, #4492	; 0x118c
   18c90:	movt	r5, #3
   18c94:	ldr	r0, [r5]
   18c98:	cmp	r0, #2
   18c9c:	blt	18cc8 <__assert_fail@plt+0x7250>
   18ca0:	add	r7, r4, #12
   18ca4:	mov	r6, #0
   18ca8:	ldr	r0, [r7, r6, lsl #3]
   18cac:	bl	172ec <__assert_fail@plt+0x5874>
   18cb0:	add	r0, r6, #1
   18cb4:	ldr	r1, [r5]
   18cb8:	add	r2, r6, #2
   18cbc:	cmp	r2, r1
   18cc0:	mov	r6, r0
   18cc4:	blt	18ca8 <__assert_fail@plt+0x7230>
   18cc8:	ldr	r0, [r4, #4]
   18ccc:	movw	r9, #4664	; 0x1238
   18cd0:	movt	r9, #3
   18cd4:	cmp	r0, r9
   18cd8:	movw	r7, #4496	; 0x1190
   18cdc:	movt	r7, #3
   18ce0:	beq	18cf0 <__assert_fail@plt+0x7278>
   18ce4:	bl	172ec <__assert_fail@plt+0x5874>
   18ce8:	mov	r0, #256	; 0x100
   18cec:	stm	r7, {r0, r9}
   18cf0:	cmp	r4, r7
   18cf4:	beq	18d04 <__assert_fail@plt+0x728c>
   18cf8:	mov	r0, r4
   18cfc:	bl	172ec <__assert_fail@plt+0x5874>
   18d00:	str	r7, [r8]
   18d04:	mov	r0, #1
   18d08:	str	r0, [r5]
   18d0c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   18d10:	movw	r3, #4616	; 0x1208
   18d14:	movt	r3, #3
   18d18:	mvn	r2, #0
   18d1c:	b	18d20 <__assert_fail@plt+0x72a8>
   18d20:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18d24:	add	fp, sp, #28
   18d28:	sub	sp, sp, #44	; 0x2c
   18d2c:	mov	r7, r3
   18d30:	str	r2, [sp, #36]	; 0x24
   18d34:	str	r1, [sp, #32]
   18d38:	mov	r5, r0
   18d3c:	bl	11910 <__errno_location@plt>
   18d40:	cmp	r5, #0
   18d44:	bmi	18eb4 <__assert_fail@plt+0x743c>
   18d48:	cmn	r5, #-2147483647	; 0x80000001
   18d4c:	beq	18eb4 <__assert_fail@plt+0x743c>
   18d50:	movw	r4, #4488	; 0x1188
   18d54:	movt	r4, #3
   18d58:	ldr	r6, [r4]
   18d5c:	str	r0, [sp, #28]
   18d60:	ldr	r0, [r0]
   18d64:	str	r0, [sp, #24]
   18d68:	movw	r8, #4492	; 0x118c
   18d6c:	movt	r8, #3
   18d70:	ldr	r1, [r8]
   18d74:	cmp	r1, r5
   18d78:	ble	18d84 <__assert_fail@plt+0x730c>
   18d7c:	mov	sl, r6
   18d80:	b	18df0 <__assert_fail@plt+0x7378>
   18d84:	str	r1, [fp, #-32]	; 0xffffffe0
   18d88:	mov	r0, #8
   18d8c:	str	r0, [sp]
   18d90:	movw	r9, #4496	; 0x1190
   18d94:	movt	r9, #3
   18d98:	subs	r0, r6, r9
   18d9c:	movne	r0, r6
   18da0:	sub	r1, r5, r1
   18da4:	add	r2, r1, #1
   18da8:	sub	r1, fp, #32
   18dac:	mvn	r3, #-2147483648	; 0x80000000
   18db0:	bl	1a18c <__assert_fail@plt+0x8714>
   18db4:	mov	sl, r0
   18db8:	str	r0, [r4]
   18dbc:	cmp	r6, r9
   18dc0:	bne	18dcc <__assert_fail@plt+0x7354>
   18dc4:	ldrd	r0, [r9]
   18dc8:	stm	sl, {r0, r1}
   18dcc:	ldr	r1, [r8]
   18dd0:	add	r0, sl, r1, lsl #3
   18dd4:	ldr	r2, [fp, #-32]	; 0xffffffe0
   18dd8:	sub	r1, r2, r1
   18ddc:	lsl	r2, r1, #3
   18de0:	mov	r1, #0
   18de4:	bl	11940 <memset@plt>
   18de8:	ldr	r0, [fp, #-32]	; 0xffffffe0
   18dec:	str	r0, [r8]
   18df0:	mov	r9, sl
   18df4:	ldr	r6, [r9, r5, lsl #3]!
   18df8:	ldr	r4, [r9, #4]!
   18dfc:	ldm	r7, {r0, r1}
   18e00:	ldr	r2, [r7, #40]	; 0x28
   18e04:	ldr	r3, [r7, #44]	; 0x2c
   18e08:	orr	r8, r1, #1
   18e0c:	add	r1, r7, #8
   18e10:	stm	sp, {r0, r8}
   18e14:	str	r1, [sp, #20]
   18e18:	add	r0, sp, #8
   18e1c:	stm	r0, {r1, r2, r3}
   18e20:	mov	r0, r4
   18e24:	mov	r1, r6
   18e28:	ldr	r2, [sp, #32]
   18e2c:	ldr	r3, [sp, #36]	; 0x24
   18e30:	bl	17bcc <__assert_fail@plt+0x6154>
   18e34:	cmp	r6, r0
   18e38:	bhi	18e9c <__assert_fail@plt+0x7424>
   18e3c:	add	r6, r0, #1
   18e40:	str	r6, [sl, r5, lsl #3]
   18e44:	movw	r0, #4664	; 0x1238
   18e48:	movt	r0, #3
   18e4c:	cmp	r4, r0
   18e50:	beq	18e5c <__assert_fail@plt+0x73e4>
   18e54:	mov	r0, r4
   18e58:	bl	172ec <__assert_fail@plt+0x5874>
   18e5c:	mov	r0, r6
   18e60:	bl	1a0b0 <__assert_fail@plt+0x8638>
   18e64:	mov	r4, r0
   18e68:	str	r0, [r9]
   18e6c:	ldr	r0, [r7]
   18e70:	ldr	r1, [r7, #40]	; 0x28
   18e74:	ldr	r2, [r7, #44]	; 0x2c
   18e78:	stm	sp, {r0, r8}
   18e7c:	ldr	r0, [sp, #20]
   18e80:	add	r3, sp, #8
   18e84:	stm	r3, {r0, r1, r2}
   18e88:	mov	r0, r4
   18e8c:	mov	r1, r6
   18e90:	ldr	r2, [sp, #32]
   18e94:	ldr	r3, [sp, #36]	; 0x24
   18e98:	bl	17bcc <__assert_fail@plt+0x6154>
   18e9c:	ldr	r0, [sp, #28]
   18ea0:	ldr	r1, [sp, #24]
   18ea4:	str	r1, [r0]
   18ea8:	mov	r0, r4
   18eac:	sub	sp, fp, #28
   18eb0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18eb4:	bl	11a60 <abort@plt>
   18eb8:	movw	r3, #4616	; 0x1208
   18ebc:	movt	r3, #3
   18ec0:	b	18d20 <__assert_fail@plt+0x72a8>
   18ec4:	mov	r1, r0
   18ec8:	mov	r0, #0
   18ecc:	b	18d10 <__assert_fail@plt+0x7298>
   18ed0:	mov	r2, r1
   18ed4:	mov	r1, r0
   18ed8:	mov	r0, #0
   18edc:	b	18eb8 <__assert_fail@plt+0x7440>
   18ee0:	push	{r4, r5, r6, sl, fp, lr}
   18ee4:	add	fp, sp, #16
   18ee8:	sub	sp, sp, #48	; 0x30
   18eec:	mov	r4, r2
   18ef0:	mov	r5, r0
   18ef4:	mov	r6, sp
   18ef8:	mov	r0, r6
   18efc:	bl	18f1c <__assert_fail@plt+0x74a4>
   18f00:	mov	r0, r5
   18f04:	mov	r1, r4
   18f08:	mvn	r2, #0
   18f0c:	mov	r3, r6
   18f10:	bl	18d20 <__assert_fail@plt+0x72a8>
   18f14:	sub	sp, fp, #16
   18f18:	pop	{r4, r5, r6, sl, fp, pc}
   18f1c:	push	{fp, lr}
   18f20:	mov	fp, sp
   18f24:	vmov.i32	q8, #0	; 0x00000000
   18f28:	mov	r2, #32
   18f2c:	mov	r3, r0
   18f30:	vst1.32	{d16-d17}, [r3], r2
   18f34:	vst1.32	{d16-d17}, [r3]
   18f38:	add	r2, r0, #16
   18f3c:	vst1.32	{d16-d17}, [r2]
   18f40:	cmp	r1, #10
   18f44:	strne	r1, [r0]
   18f48:	popne	{fp, pc}
   18f4c:	bl	11a60 <abort@plt>
   18f50:	push	{r4, r5, r6, r7, fp, lr}
   18f54:	add	fp, sp, #16
   18f58:	sub	sp, sp, #48	; 0x30
   18f5c:	mov	r4, r3
   18f60:	mov	r5, r2
   18f64:	mov	r6, r0
   18f68:	mov	r7, sp
   18f6c:	mov	r0, r7
   18f70:	bl	18f1c <__assert_fail@plt+0x74a4>
   18f74:	mov	r0, r6
   18f78:	mov	r1, r5
   18f7c:	mov	r2, r4
   18f80:	mov	r3, r7
   18f84:	bl	18d20 <__assert_fail@plt+0x72a8>
   18f88:	sub	sp, fp, #16
   18f8c:	pop	{r4, r5, r6, r7, fp, pc}
   18f90:	mov	r2, r1
   18f94:	mov	r1, r0
   18f98:	mov	r0, #0
   18f9c:	b	18ee0 <__assert_fail@plt+0x7468>
   18fa0:	mov	r3, r2
   18fa4:	mov	r2, r1
   18fa8:	mov	r1, r0
   18fac:	mov	r0, #0
   18fb0:	b	18f50 <__assert_fail@plt+0x74d8>
   18fb4:	push	{r4, r5, r6, sl, fp, lr}
   18fb8:	add	fp, sp, #16
   18fbc:	sub	sp, sp, #48	; 0x30
   18fc0:	mov	r4, r1
   18fc4:	mov	r5, r0
   18fc8:	movw	r0, #4616	; 0x1208
   18fcc:	movt	r0, #3
   18fd0:	add	r1, r0, #16
   18fd4:	mov	r3, #32
   18fd8:	vld1.64	{d16-d17}, [r0], r3
   18fdc:	vld1.64	{d18-d19}, [r1]
   18fe0:	mov	r6, sp
   18fe4:	add	r1, r6, #16
   18fe8:	vld1.64	{d20-d21}, [r0]
   18fec:	vst1.64	{d18-d19}, [r1]
   18ff0:	mov	r0, r6
   18ff4:	vst1.64	{d16-d17}, [r0], r3
   18ff8:	vst1.64	{d20-d21}, [r0]
   18ffc:	mov	r0, r6
   19000:	mov	r1, r2
   19004:	mov	r2, #1
   19008:	bl	17ac0 <__assert_fail@plt+0x6048>
   1900c:	mov	r0, #0
   19010:	mov	r1, r5
   19014:	mov	r2, r4
   19018:	mov	r3, r6
   1901c:	bl	18d20 <__assert_fail@plt+0x72a8>
   19020:	sub	sp, fp, #16
   19024:	pop	{r4, r5, r6, sl, fp, pc}
   19028:	mov	r2, r1
   1902c:	mvn	r1, #0
   19030:	b	18fb4 <__assert_fail@plt+0x753c>
   19034:	mov	r1, #58	; 0x3a
   19038:	b	19028 <__assert_fail@plt+0x75b0>
   1903c:	mov	r2, #58	; 0x3a
   19040:	b	18fb4 <__assert_fail@plt+0x753c>
   19044:	push	{r4, r5, r6, sl, fp, lr}
   19048:	add	fp, sp, #16
   1904c:	sub	sp, sp, #48	; 0x30
   19050:	mov	r4, r2
   19054:	mov	r5, r0
   19058:	mov	r6, sp
   1905c:	mov	r0, r6
   19060:	bl	18f1c <__assert_fail@plt+0x74a4>
   19064:	mov	r0, r6
   19068:	mov	r1, #58	; 0x3a
   1906c:	mov	r2, #1
   19070:	bl	17ac0 <__assert_fail@plt+0x6048>
   19074:	mov	r0, r5
   19078:	mov	r1, r4
   1907c:	mvn	r2, #0
   19080:	mov	r3, r6
   19084:	bl	18d20 <__assert_fail@plt+0x72a8>
   19088:	sub	sp, fp, #16
   1908c:	pop	{r4, r5, r6, sl, fp, pc}
   19090:	push	{fp, lr}
   19094:	mov	fp, sp
   19098:	sub	sp, sp, #8
   1909c:	mvn	ip, #0
   190a0:	str	ip, [sp]
   190a4:	bl	190b0 <__assert_fail@plt+0x7638>
   190a8:	mov	sp, fp
   190ac:	pop	{fp, pc}
   190b0:	push	{r4, r5, r6, r7, fp, lr}
   190b4:	add	fp, sp, #16
   190b8:	sub	sp, sp, #48	; 0x30
   190bc:	mov	r7, r3
   190c0:	mov	r5, r0
   190c4:	movw	r0, #4616	; 0x1208
   190c8:	movt	r0, #3
   190cc:	add	r3, r0, #16
   190d0:	mov	r4, #32
   190d4:	vld1.64	{d16-d17}, [r0], r4
   190d8:	vld1.64	{d18-d19}, [r3]
   190dc:	mov	r6, sp
   190e0:	add	r3, r6, #16
   190e4:	vld1.64	{d20-d21}, [r0]
   190e8:	vst1.64	{d18-d19}, [r3]
   190ec:	mov	r0, r6
   190f0:	vst1.64	{d16-d17}, [r0], r4
   190f4:	vst1.64	{d20-d21}, [r0]
   190f8:	mov	r0, r6
   190fc:	bl	17b18 <__assert_fail@plt+0x60a0>
   19100:	ldr	r2, [fp, #8]
   19104:	mov	r0, r5
   19108:	mov	r1, r7
   1910c:	mov	r3, r6
   19110:	bl	18d20 <__assert_fail@plt+0x72a8>
   19114:	sub	sp, fp, #16
   19118:	pop	{r4, r5, r6, r7, fp, pc}
   1911c:	mov	r3, r2
   19120:	mov	r2, r1
   19124:	mov	r1, r0
   19128:	mov	r0, #0
   1912c:	b	19090 <__assert_fail@plt+0x7618>
   19130:	push	{fp, lr}
   19134:	mov	fp, sp
   19138:	sub	sp, sp, #8
   1913c:	mov	ip, r2
   19140:	mov	r2, r1
   19144:	mov	r1, r0
   19148:	str	r3, [sp]
   1914c:	mov	r0, #0
   19150:	mov	r3, ip
   19154:	bl	190b0 <__assert_fail@plt+0x7638>
   19158:	mov	sp, fp
   1915c:	pop	{fp, pc}
   19160:	movw	r3, #4504	; 0x1198
   19164:	movt	r3, #3
   19168:	b	18d20 <__assert_fail@plt+0x72a8>
   1916c:	mov	r2, r1
   19170:	mov	r1, r0
   19174:	mov	r0, #0
   19178:	b	19160 <__assert_fail@plt+0x76e8>
   1917c:	mvn	r2, #0
   19180:	b	19160 <__assert_fail@plt+0x76e8>
   19184:	mov	r1, r0
   19188:	mov	r0, #0
   1918c:	b	1917c <__assert_fail@plt+0x7704>
   19190:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   19194:	add	fp, sp, #24
   19198:	sub	sp, sp, #16
   1919c:	mov	r4, r1
   191a0:	mov	r5, r0
   191a4:	mov	r7, #0
   191a8:	mov	r0, #0
   191ac:	mov	r1, r5
   191b0:	mov	r2, #5
   191b4:	bl	11748 <dcgettext@plt>
   191b8:	cmp	r0, r5
   191bc:	beq	191c8 <__assert_fail@plt+0x7750>
   191c0:	sub	sp, fp, #24
   191c4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   191c8:	bl	1abcc <__assert_fail@plt+0x9154>
   191cc:	mov	r6, r0
   191d0:	mov	r8, #56	; 0x38
   191d4:	mov	r0, #45	; 0x2d
   191d8:	stm	sp, {r0, r8}
   191dc:	str	r7, [sp, #8]
   191e0:	str	r7, [sp, #12]
   191e4:	mov	r0, r6
   191e8:	mov	r1, #85	; 0x55
   191ec:	mov	r2, #84	; 0x54
   191f0:	mov	r3, #70	; 0x46
   191f4:	bl	1928c <__assert_fail@plt+0x7814>
   191f8:	cmp	r0, #0
   191fc:	beq	19218 <__assert_fail@plt+0x77a0>
   19200:	ldrb	r1, [r5]
   19204:	movw	r2, #64872	; 0xfd68
   19208:	movt	r2, #1
   1920c:	movw	r0, #64876	; 0xfd6c
   19210:	movt	r0, #1
   19214:	b	1925c <__assert_fail@plt+0x77e4>
   19218:	mov	r0, #48	; 0x30
   1921c:	mov	r1, #51	; 0x33
   19220:	str	r8, [sp]
   19224:	stmib	sp, {r0, r1}
   19228:	str	r0, [sp, #12]
   1922c:	mov	r0, r6
   19230:	mov	r1, #71	; 0x47
   19234:	mov	r2, #66	; 0x42
   19238:	mov	r3, #49	; 0x31
   1923c:	bl	1928c <__assert_fail@plt+0x7814>
   19240:	cmp	r0, #0
   19244:	beq	1926c <__assert_fail@plt+0x77f4>
   19248:	ldrb	r1, [r5]
   1924c:	movw	r2, #64880	; 0xfd70
   19250:	movt	r2, #1
   19254:	movw	r0, #64884	; 0xfd74
   19258:	movt	r0, #1
   1925c:	cmp	r1, #96	; 0x60
   19260:	moveq	r0, r2
   19264:	sub	sp, fp, #24
   19268:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1926c:	movw	r1, #64868	; 0xfd64
   19270:	movt	r1, #1
   19274:	movw	r0, #64754	; 0xfcf2
   19278:	movt	r0, #1
   1927c:	cmp	r4, #9
   19280:	moveq	r0, r1
   19284:	sub	sp, fp, #24
   19288:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1928c:	push	{r4, r5, r6, r7, fp, lr}
   19290:	add	fp, sp, #16
   19294:	sub	sp, sp, #16
   19298:	mov	r4, r3
   1929c:	mov	r5, r2
   192a0:	mov	r7, r1
   192a4:	mov	r6, r0
   192a8:	mov	r0, r1
   192ac:	bl	1a878 <__assert_fail@plt+0x8e00>
   192b0:	ldrb	r1, [r6]
   192b4:	cmp	r0, #0
   192b8:	andne	r1, r1, #223	; 0xdf
   192bc:	mov	r0, #0
   192c0:	cmp	r1, r7
   192c4:	bne	192fc <__assert_fail@plt+0x7884>
   192c8:	cmp	r7, #0
   192cc:	beq	19304 <__assert_fail@plt+0x788c>
   192d0:	ldr	r0, [fp, #20]
   192d4:	ldr	r1, [fp, #16]
   192d8:	ldr	r2, [fp, #12]
   192dc:	ldr	r3, [fp, #8]
   192e0:	str	r2, [sp]
   192e4:	str	r1, [sp, #4]
   192e8:	str	r0, [sp, #8]
   192ec:	mov	r0, r6
   192f0:	mov	r1, r5
   192f4:	mov	r2, r4
   192f8:	bl	19310 <__assert_fail@plt+0x7898>
   192fc:	sub	sp, fp, #16
   19300:	pop	{r4, r5, r6, r7, fp, pc}
   19304:	mov	r0, #1
   19308:	sub	sp, fp, #16
   1930c:	pop	{r4, r5, r6, r7, fp, pc}
   19310:	push	{r4, r5, r6, r7, fp, lr}
   19314:	add	fp, sp, #16
   19318:	sub	sp, sp, #8
   1931c:	mov	r4, r3
   19320:	mov	r5, r2
   19324:	mov	r7, r1
   19328:	mov	r6, r0
   1932c:	mov	r0, r1
   19330:	bl	1a878 <__assert_fail@plt+0x8e00>
   19334:	ldrb	r1, [r6, #1]
   19338:	cmp	r0, #0
   1933c:	andne	r1, r1, #223	; 0xdf
   19340:	mov	r0, #0
   19344:	cmp	r1, r7
   19348:	bne	19378 <__assert_fail@plt+0x7900>
   1934c:	cmp	r7, #0
   19350:	beq	19380 <__assert_fail@plt+0x7908>
   19354:	ldr	r0, [fp, #16]
   19358:	ldr	r1, [fp, #12]
   1935c:	ldr	r3, [fp, #8]
   19360:	str	r1, [sp]
   19364:	str	r0, [sp, #4]
   19368:	mov	r0, r6
   1936c:	mov	r1, r5
   19370:	mov	r2, r4
   19374:	bl	1938c <__assert_fail@plt+0x7914>
   19378:	sub	sp, fp, #16
   1937c:	pop	{r4, r5, r6, r7, fp, pc}
   19380:	mov	r0, #1
   19384:	sub	sp, fp, #16
   19388:	pop	{r4, r5, r6, r7, fp, pc}
   1938c:	push	{r4, r5, r6, r7, fp, lr}
   19390:	add	fp, sp, #16
   19394:	sub	sp, sp, #8
   19398:	mov	r4, r3
   1939c:	mov	r5, r2
   193a0:	mov	r7, r1
   193a4:	mov	r6, r0
   193a8:	mov	r0, r1
   193ac:	bl	1a878 <__assert_fail@plt+0x8e00>
   193b0:	ldrb	r1, [r6, #2]
   193b4:	cmp	r0, #0
   193b8:	andne	r1, r1, #223	; 0xdf
   193bc:	mov	r0, #0
   193c0:	cmp	r1, r7
   193c4:	bne	193ec <__assert_fail@plt+0x7974>
   193c8:	cmp	r7, #0
   193cc:	beq	193f4 <__assert_fail@plt+0x797c>
   193d0:	ldr	r0, [fp, #12]
   193d4:	ldr	r3, [fp, #8]
   193d8:	str	r0, [sp]
   193dc:	mov	r0, r6
   193e0:	mov	r1, r5
   193e4:	mov	r2, r4
   193e8:	bl	19400 <__assert_fail@plt+0x7988>
   193ec:	sub	sp, fp, #16
   193f0:	pop	{r4, r5, r6, r7, fp, pc}
   193f4:	mov	r0, #1
   193f8:	sub	sp, fp, #16
   193fc:	pop	{r4, r5, r6, r7, fp, pc}
   19400:	push	{r4, r5, r6, r7, fp, lr}
   19404:	add	fp, sp, #16
   19408:	mov	r4, r3
   1940c:	mov	r5, r2
   19410:	mov	r7, r1
   19414:	mov	r6, r0
   19418:	mov	r0, r1
   1941c:	bl	1a878 <__assert_fail@plt+0x8e00>
   19420:	ldrb	r1, [r6, #3]
   19424:	ldr	r3, [fp, #8]
   19428:	cmp	r0, #0
   1942c:	andne	r1, r1, #223	; 0xdf
   19430:	mov	r0, #0
   19434:	cmp	r1, r7
   19438:	bne	1945c <__assert_fail@plt+0x79e4>
   1943c:	cmp	r7, #0
   19440:	beq	19458 <__assert_fail@plt+0x79e0>
   19444:	mov	r0, r6
   19448:	mov	r1, r5
   1944c:	mov	r2, r4
   19450:	pop	{r4, r5, r6, r7, fp, lr}
   19454:	b	19460 <__assert_fail@plt+0x79e8>
   19458:	mov	r0, #1
   1945c:	pop	{r4, r5, r6, r7, fp, pc}
   19460:	push	{r4, r5, r6, r7, fp, lr}
   19464:	add	fp, sp, #16
   19468:	mov	r4, r3
   1946c:	mov	r5, r2
   19470:	mov	r7, r1
   19474:	mov	r6, r0
   19478:	mov	r0, r1
   1947c:	bl	1a878 <__assert_fail@plt+0x8e00>
   19480:	ldrb	r1, [r6, #4]
   19484:	cmp	r0, #0
   19488:	andne	r1, r1, #223	; 0xdf
   1948c:	mov	r0, #0
   19490:	cmp	r1, r7
   19494:	bne	194b8 <__assert_fail@plt+0x7a40>
   19498:	cmp	r7, #0
   1949c:	beq	194b4 <__assert_fail@plt+0x7a3c>
   194a0:	mov	r0, r6
   194a4:	mov	r1, r5
   194a8:	mov	r2, r4
   194ac:	pop	{r4, r5, r6, r7, fp, lr}
   194b0:	b	194bc <__assert_fail@plt+0x7a44>
   194b4:	mov	r0, #1
   194b8:	pop	{r4, r5, r6, r7, fp, pc}
   194bc:	push	{r4, r5, r6, sl, fp, lr}
   194c0:	add	fp, sp, #16
   194c4:	mov	r4, r2
   194c8:	mov	r6, r1
   194cc:	mov	r5, r0
   194d0:	mov	r0, r1
   194d4:	bl	1a878 <__assert_fail@plt+0x8e00>
   194d8:	ldrb	r1, [r5, #5]
   194dc:	cmp	r0, #0
   194e0:	andne	r1, r1, #223	; 0xdf
   194e4:	mov	r0, #0
   194e8:	cmp	r1, r6
   194ec:	bne	1950c <__assert_fail@plt+0x7a94>
   194f0:	cmp	r6, #0
   194f4:	beq	19508 <__assert_fail@plt+0x7a90>
   194f8:	mov	r0, r5
   194fc:	mov	r1, r4
   19500:	pop	{r4, r5, r6, sl, fp, lr}
   19504:	b	19510 <__assert_fail@plt+0x7a98>
   19508:	mov	r0, #1
   1950c:	pop	{r4, r5, r6, sl, fp, pc}
   19510:	push	{r4, r5, fp, lr}
   19514:	add	fp, sp, #8
   19518:	mov	r5, r1
   1951c:	mov	r4, r0
   19520:	mov	r0, r1
   19524:	bl	1a878 <__assert_fail@plt+0x8e00>
   19528:	ldrb	r1, [r4, #6]
   1952c:	cmp	r0, #0
   19530:	andne	r1, r1, #223	; 0xdf
   19534:	mov	r0, #0
   19538:	cmp	r1, r5
   1953c:	popne	{r4, r5, fp, pc}
   19540:	cmp	r5, #0
   19544:	beq	19554 <__assert_fail@plt+0x7adc>
   19548:	mov	r0, r4
   1954c:	pop	{r4, r5, fp, lr}
   19550:	b	1955c <__assert_fail@plt+0x7ae4>
   19554:	mov	r0, #1
   19558:	pop	{r4, r5, fp, pc}
   1955c:	push	{r4, sl, fp, lr}
   19560:	add	fp, sp, #8
   19564:	mov	r4, r0
   19568:	mov	r0, #0
   1956c:	bl	1a878 <__assert_fail@plt+0x8e00>
   19570:	ldrb	r1, [r4, #7]
   19574:	cmp	r0, #0
   19578:	beq	1958c <__assert_fail@plt+0x7b14>
   1957c:	tst	r1, #223	; 0xdf
   19580:	bne	19594 <__assert_fail@plt+0x7b1c>
   19584:	mov	r0, #1
   19588:	pop	{r4, sl, fp, pc}
   1958c:	cmp	r1, #0
   19590:	beq	19584 <__assert_fail@plt+0x7b0c>
   19594:	mov	r0, #0
   19598:	pop	{r4, sl, fp, pc}
   1959c:	mov	r1, #0
   195a0:	str	r1, [r0]
   195a4:	str	r1, [r0, #4]
   195a8:	bx	lr
   195ac:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   195b0:	add	fp, sp, #28
   195b4:	sub	sp, sp, #52	; 0x34
   195b8:	mov	r8, r3
   195bc:	mov	r5, r0
   195c0:	vmov.i32	q8, #0	; 0x00000000
   195c4:	add	r0, sp, #16
   195c8:	vst1.64	{d16-d17}, [r0]!
   195cc:	vst1.64	{d16-d17}, [r0]
   195d0:	cmp	r2, #0
   195d4:	beq	195f8 <__assert_fail@plt+0x7b80>
   195d8:	mov	r4, r2
   195dc:	mov	r6, r1
   195e0:	add	r7, sp, #16
   195e4:	ldrb	r0, [r6], #1
   195e8:	mov	r1, r7
   195ec:	bl	196e8 <__assert_fail@plt+0x7c70>
   195f0:	subs	r4, r4, #1
   195f4:	bne	195e4 <__assert_fail@plt+0x7b6c>
   195f8:	mov	r0, r5
   195fc:	bl	1173c <getc_unlocked@plt>
   19600:	mov	r6, r0
   19604:	cmp	r0, #0
   19608:	bmi	19638 <__assert_fail@plt+0x7bc0>
   1960c:	add	r4, sp, #16
   19610:	mov	r0, r6
   19614:	mov	r1, r4
   19618:	bl	19704 <__assert_fail@plt+0x7c8c>
   1961c:	cmp	r0, #0
   19620:	beq	19638 <__assert_fail@plt+0x7bc0>
   19624:	mov	r0, r5
   19628:	bl	1173c <getc_unlocked@plt>
   1962c:	mov	r6, r0
   19630:	cmn	r0, #1
   19634:	bgt	19610 <__assert_fail@plt+0x7b98>
   19638:	ldm	r8, {r0, r7}
   1963c:	str	r0, [sp, #12]
   19640:	cmp	r6, #0
   19644:	bmi	196d8 <__assert_fail@plt+0x7c60>
   19648:	str	r8, [sp, #8]
   1964c:	mov	r8, #0
   19650:	add	r9, sp, #12
   19654:	add	sl, sp, #16
   19658:	mov	r4, #0
   1965c:	ldr	r0, [sp, #12]
   19660:	cmp	r4, r0
   19664:	bne	19688 <__assert_fail@plt+0x7c10>
   19668:	mov	r0, #1
   1966c:	str	r0, [sp]
   19670:	mov	r0, r7
   19674:	mov	r1, r9
   19678:	mov	r2, #1
   1967c:	mvn	r3, #0
   19680:	bl	1a18c <__assert_fail@plt+0x8714>
   19684:	mov	r7, r0
   19688:	tst	r8, #1
   1968c:	bne	196c0 <__assert_fail@plt+0x7c48>
   19690:	mov	r0, r6
   19694:	mov	r1, sl
   19698:	bl	19704 <__assert_fail@plt+0x7c8c>
   1969c:	cmp	r0, #0
   196a0:	bne	196c0 <__assert_fail@plt+0x7c48>
   196a4:	strb	r6, [r7, r4]
   196a8:	add	r4, r4, #1
   196ac:	mov	r0, r5
   196b0:	bl	1173c <getc_unlocked@plt>
   196b4:	mov	r6, r0
   196b8:	lsr	r8, r0, #31
   196bc:	b	1965c <__assert_fail@plt+0x7be4>
   196c0:	mov	r0, #0
   196c4:	strb	r0, [r7, r4]
   196c8:	ldr	r0, [sp, #12]
   196cc:	ldr	r1, [sp, #8]
   196d0:	stm	r1, {r0, r7}
   196d4:	b	196dc <__assert_fail@plt+0x7c64>
   196d8:	mvn	r4, #0
   196dc:	mov	r0, r4
   196e0:	sub	sp, fp, #28
   196e4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   196e8:	lsr	r2, r0, #5
   196ec:	ldr	ip, [r1, r2, lsl #2]
   196f0:	and	r0, r0, #31
   196f4:	mov	r3, #1
   196f8:	orr	r0, ip, r3, lsl r0
   196fc:	str	r0, [r1, r2, lsl #2]
   19700:	bx	lr
   19704:	lsr	r2, r0, #5
   19708:	ldr	r1, [r1, r2, lsl #2]
   1970c:	and	r0, r0, #31
   19710:	mov	r2, #1
   19714:	and	r0, r1, r2, lsl r0
   19718:	cmp	r0, #0
   1971c:	movwne	r0, #1
   19720:	bx	lr
   19724:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19728:	add	fp, sp, #28
   1972c:	sub	sp, sp, #28
   19730:	str	r3, [sp, #12]
   19734:	str	r2, [sp, #8]
   19738:	mov	r6, r0
   1973c:	add	r4, r1, #1
   19740:	cmp	r1, #0
   19744:	movweq	r4, #64	; 0x40
   19748:	str	r4, [sp, #16]
   1974c:	mov	r0, r4
   19750:	mov	r1, #4
   19754:	bl	1a110 <__assert_fail@plt+0x8698>
   19758:	mov	r5, r0
   1975c:	mov	r0, r4
   19760:	mov	r1, #4
   19764:	bl	1a110 <__assert_fail@plt+0x8698>
   19768:	mov	r4, r0
   1976c:	add	r0, sp, #20
   19770:	bl	1959c <__assert_fail@plt+0x7b24>
   19774:	mov	r7, #0
   19778:	mov	r0, r6
   1977c:	ldr	r1, [sp, #8]
   19780:	ldr	r2, [sp, #12]
   19784:	add	r3, sp, #20
   19788:	bl	195ac <__assert_fail@plt+0x7b34>
   1978c:	mov	sl, r0
   19790:	ldr	r0, [sp, #16]
   19794:	cmp	r7, r0
   19798:	blt	197d0 <__assert_fail@plt+0x7d58>
   1979c:	mov	r0, #4
   197a0:	str	r0, [sp]
   197a4:	mov	r0, r5
   197a8:	add	r1, sp, #16
   197ac:	mov	r2, #1
   197b0:	mvn	r3, #0
   197b4:	bl	1a18c <__assert_fail@plt+0x8714>
   197b8:	mov	r5, r0
   197bc:	ldr	r1, [sp, #16]
   197c0:	mov	r0, r4
   197c4:	mov	r2, #4
   197c8:	bl	1a038 <__assert_fail@plt+0x85c0>
   197cc:	mov	r4, r0
   197d0:	cmn	sl, #1
   197d4:	beq	19808 <__assert_fail@plt+0x7d90>
   197d8:	add	r8, sl, #1
   197dc:	mov	r0, r8
   197e0:	mov	r1, #1
   197e4:	bl	1a110 <__assert_fail@plt+0x8698>
   197e8:	mov	r9, r0
   197ec:	str	sl, [r4, r7, lsl #2]
   197f0:	ldr	r1, [sp, #24]
   197f4:	mov	r2, r8
   197f8:	bl	11718 <memcpy@plt>
   197fc:	str	r9, [r5, r7, lsl #2]
   19800:	add	r7, r7, #1
   19804:	b	19778 <__assert_fail@plt+0x7d00>
   19808:	mov	r0, #0
   1980c:	str	r0, [r5, r7, lsl #2]
   19810:	str	r0, [r4, r7, lsl #2]
   19814:	ldr	r0, [sp, #24]
   19818:	bl	172ec <__assert_fail@plt+0x5874>
   1981c:	ldr	r0, [fp, #8]
   19820:	str	r5, [r0]
   19824:	ldr	r0, [fp, #12]
   19828:	cmp	r0, #0
   1982c:	beq	19838 <__assert_fail@plt+0x7dc0>
   19830:	str	r4, [r0]
   19834:	b	19840 <__assert_fail@plt+0x7dc8>
   19838:	mov	r0, r4
   1983c:	bl	172ec <__assert_fail@plt+0x5874>
   19840:	mov	r0, r7
   19844:	sub	sp, fp, #28
   19848:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1984c:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   19850:	add	fp, sp, #24
   19854:	mov	r7, r2
   19858:	mov	r5, r1
   1985c:	mov	r6, r0
   19860:	movw	r9, #0
   19864:	movt	r9, #32752	; 0x7ff0
   19868:	mov	r0, r6
   1986c:	mov	r1, r5
   19870:	mov	r2, r7
   19874:	bl	11964 <write@plt>
   19878:	mov	r4, r0
   1987c:	cmn	r0, #1
   19880:	bgt	198dc <__assert_fail@plt+0x7e64>
   19884:	bl	11910 <__errno_location@plt>
   19888:	ldr	r0, [r0]
   1988c:	cmp	r0, #4
   19890:	beq	19868 <__assert_fail@plt+0x7df0>
   19894:	cmp	r7, r9
   19898:	mov	r1, #0
   1989c:	movwhi	r1, #1
   198a0:	sub	r2, r0, #22
   198a4:	clz	r2, r2
   198a8:	lsr	r2, r2, #5
   198ac:	ands	r1, r1, r2
   198b0:	moveq	r8, r4
   198b4:	mov	r1, r7
   198b8:	movwne	r1, #0
   198bc:	movtne	r1, #32752	; 0x7ff0
   198c0:	cmp	r7, r9
   198c4:	bls	198d4 <__assert_fail@plt+0x7e5c>
   198c8:	cmp	r0, #22
   198cc:	mov	r7, r1
   198d0:	beq	19868 <__assert_fail@plt+0x7df0>
   198d4:	mov	r0, r8
   198d8:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   198dc:	mov	r0, r4
   198e0:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   198e4:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   198e8:	add	fp, sp, #24
   198ec:	sub	sp, sp, #64	; 0x40
   198f0:	mov	r5, r1
   198f4:	bl	11760 <strdup@plt>
   198f8:	cmp	r0, #0
   198fc:	beq	19ba8 <__assert_fail@plt+0x8130>
   19900:	mov	r4, r0
   19904:	bl	11814 <__ctype_get_mb_cur_max@plt>
   19908:	cmp	r0, #2
   1990c:	bcc	19ae8 <__assert_fail@plt+0x8070>
   19910:	cmp	r5, #0
   19914:	beq	199b8 <__assert_fail@plt+0x7f40>
   19918:	str	r4, [sp, #24]
   1991c:	mov	r0, r4
   19920:	bl	118e0 <strlen@plt>
   19924:	mov	r7, #0
   19928:	str	r7, [sp, #16]
   1992c:	str	r7, [sp, #12]
   19930:	strb	r7, [sp, #20]
   19934:	strb	r7, [sp, #8]
   19938:	add	r0, r4, r0
   1993c:	str	r0, [sp, #4]
   19940:	ldr	r1, [sp, #24]
   19944:	cmp	r1, r0
   19948:	bcs	19994 <__assert_fail@plt+0x7f1c>
   1994c:	add	r6, sp, #4
   19950:	mov	r0, r6
   19954:	bl	1ac04 <__assert_fail@plt+0x918c>
   19958:	ldrb	r0, [sp, #32]
   1995c:	cmp	r0, #0
   19960:	beq	19994 <__assert_fail@plt+0x7f1c>
   19964:	ldr	r0, [sp, #36]	; 0x24
   19968:	bl	118c8 <iswspace@plt>
   1996c:	cmp	r0, #0
   19970:	beq	19994 <__assert_fail@plt+0x7f1c>
   19974:	strb	r7, [sp, #20]
   19978:	ldr	r0, [sp, #4]
   1997c:	ldr	r1, [sp, #24]
   19980:	ldr	r2, [sp, #28]
   19984:	add	r1, r1, r2
   19988:	str	r1, [sp, #24]
   1998c:	cmp	r1, r0
   19990:	bcc	19950 <__assert_fail@plt+0x7ed8>
   19994:	ldr	r6, [sp, #24]
   19998:	mov	r0, r6
   1999c:	bl	118e0 <strlen@plt>
   199a0:	add	r2, r0, #1
   199a4:	mov	r0, r4
   199a8:	mov	r1, r6
   199ac:	bl	116e8 <memmove@plt>
   199b0:	cmp	r5, #1
   199b4:	beq	19b9c <__assert_fail@plt+0x8124>
   199b8:	str	r4, [sp, #24]
   199bc:	mov	r0, r4
   199c0:	bl	118e0 <strlen@plt>
   199c4:	mov	r6, #0
   199c8:	str	r6, [sp, #16]
   199cc:	str	r6, [sp, #12]
   199d0:	strb	r6, [sp, #20]
   199d4:	strb	r6, [sp, #8]
   199d8:	add	r0, r4, r0
   199dc:	str	r0, [sp, #4]
   199e0:	ldr	r1, [sp, #24]
   199e4:	cmp	r1, r0
   199e8:	bcs	19b9c <__assert_fail@plt+0x8124>
   199ec:	add	r5, sp, #4
   199f0:	mov	r7, #0
   199f4:	b	19a1c <__assert_fail@plt+0x7fa4>
   199f8:	mov	r7, #1
   199fc:	strb	r6, [sp, #20]
   19a00:	ldr	r0, [sp, #4]
   19a04:	ldr	r1, [sp, #24]
   19a08:	ldr	r2, [sp, #28]
   19a0c:	add	r1, r1, r2
   19a10:	str	r1, [sp, #24]
   19a14:	cmp	r1, r0
   19a18:	bcs	19b90 <__assert_fail@plt+0x8118>
   19a1c:	mov	r0, r5
   19a20:	bl	1ac04 <__assert_fail@plt+0x918c>
   19a24:	cmp	r7, #1
   19a28:	beq	19a5c <__assert_fail@plt+0x7fe4>
   19a2c:	cmp	r7, #0
   19a30:	bne	19aa4 <__assert_fail@plt+0x802c>
   19a34:	mov	r7, #1
   19a38:	ldrb	r0, [sp, #32]
   19a3c:	cmp	r0, #0
   19a40:	beq	199fc <__assert_fail@plt+0x7f84>
   19a44:	ldr	r0, [sp, #36]	; 0x24
   19a48:	bl	118c8 <iswspace@plt>
   19a4c:	cmp	r0, #0
   19a50:	beq	19ac8 <__assert_fail@plt+0x8050>
   19a54:	mov	r7, #0
   19a58:	b	199fc <__assert_fail@plt+0x7f84>
   19a5c:	mov	r7, #1
   19a60:	ldrb	r0, [sp, #32]
   19a64:	cmp	r0, #0
   19a68:	beq	199fc <__assert_fail@plt+0x7f84>
   19a6c:	ldr	r0, [sp, #36]	; 0x24
   19a70:	bl	118c8 <iswspace@plt>
   19a74:	cmp	r0, #0
   19a78:	beq	199fc <__assert_fail@plt+0x7f84>
   19a7c:	ldrb	r0, [sp, #32]
   19a80:	cmp	r0, #0
   19a84:	beq	199f8 <__assert_fail@plt+0x7f80>
   19a88:	ldr	r0, [sp, #36]	; 0x24
   19a8c:	bl	118c8 <iswspace@plt>
   19a90:	cmp	r0, #0
   19a94:	beq	199f8 <__assert_fail@plt+0x7f80>
   19a98:	mov	r7, #2
   19a9c:	ldr	r8, [sp, #24]
   19aa0:	b	199fc <__assert_fail@plt+0x7f84>
   19aa4:	ldrb	r0, [sp, #32]
   19aa8:	cmp	r0, #0
   19aac:	beq	199f8 <__assert_fail@plt+0x7f80>
   19ab0:	ldr	r0, [sp, #36]	; 0x24
   19ab4:	bl	118c8 <iswspace@plt>
   19ab8:	mov	r7, #2
   19abc:	cmp	r0, #0
   19ac0:	bne	199fc <__assert_fail@plt+0x7f84>
   19ac4:	b	199f8 <__assert_fail@plt+0x7f80>
   19ac8:	ldrb	r0, [sp, #32]
   19acc:	cmp	r0, #0
   19ad0:	beq	199fc <__assert_fail@plt+0x7f84>
   19ad4:	ldr	r0, [sp, #36]	; 0x24
   19ad8:	bl	118c8 <iswspace@plt>
   19adc:	cmp	r0, #0
   19ae0:	movne	r7, #1
   19ae4:	b	199fc <__assert_fail@plt+0x7f84>
   19ae8:	cmp	r5, #0
   19aec:	beq	19b48 <__assert_fail@plt+0x80d0>
   19af0:	ldrb	r7, [r4]
   19af4:	cmp	r7, #0
   19af8:	mov	r6, r4
   19afc:	beq	19b28 <__assert_fail@plt+0x80b0>
   19b00:	bl	118b0 <__ctype_b_loc@plt>
   19b04:	ldr	r0, [r0]
   19b08:	mov	r6, r4
   19b0c:	uxtb	r1, r7
   19b10:	add	r1, r0, r1, lsl #1
   19b14:	ldrb	r1, [r1, #1]
   19b18:	tst	r1, #32
   19b1c:	ldrbne	r7, [r6, #1]!
   19b20:	cmpne	r7, #0
   19b24:	bne	19b0c <__assert_fail@plt+0x8094>
   19b28:	mov	r0, r6
   19b2c:	bl	118e0 <strlen@plt>
   19b30:	add	r2, r0, #1
   19b34:	mov	r0, r4
   19b38:	mov	r1, r6
   19b3c:	bl	116e8 <memmove@plt>
   19b40:	cmp	r5, #1
   19b44:	beq	19b9c <__assert_fail@plt+0x8124>
   19b48:	mov	r0, r4
   19b4c:	bl	118e0 <strlen@plt>
   19b50:	add	r0, r4, r0
   19b54:	sub	r5, r0, #1
   19b58:	cmp	r5, r4
   19b5c:	bcc	19b9c <__assert_fail@plt+0x8124>
   19b60:	bl	118b0 <__ctype_b_loc@plt>
   19b64:	mov	r1, #0
   19b68:	ldrb	r2, [r5]
   19b6c:	ldr	r3, [r0]
   19b70:	add	r2, r3, r2, lsl #1
   19b74:	ldrb	r2, [r2, #1]
   19b78:	tst	r2, #32
   19b7c:	beq	19b9c <__assert_fail@plt+0x8124>
   19b80:	strb	r1, [r5], #-1
   19b84:	cmp	r5, r4
   19b88:	bcs	19b68 <__assert_fail@plt+0x80f0>
   19b8c:	b	19b9c <__assert_fail@plt+0x8124>
   19b90:	cmp	r7, #2
   19b94:	moveq	r0, #0
   19b98:	strbeq	r0, [r8]
   19b9c:	mov	r0, r4
   19ba0:	sub	sp, fp, #24
   19ba4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   19ba8:	bl	1a3fc <__assert_fail@plt+0x8984>
   19bac:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   19bb0:	add	fp, sp, #24
   19bb4:	sub	sp, sp, #32
   19bb8:	mov	r4, r2
   19bbc:	mov	r8, r0
   19bc0:	ldr	r6, [fp, #12]
   19bc4:	ldr	r7, [fp, #8]
   19bc8:	cmp	r1, #0
   19bcc:	beq	19bf4 <__assert_fail@plt+0x817c>
   19bd0:	mov	r5, r1
   19bd4:	str	r4, [sp]
   19bd8:	str	r3, [sp, #4]
   19bdc:	movw	r2, #65033	; 0xfe09
   19be0:	movt	r2, #1
   19be4:	mov	r0, r8
   19be8:	mov	r1, #1
   19bec:	mov	r3, r5
   19bf0:	b	19c0c <__assert_fail@plt+0x8194>
   19bf4:	str	r3, [sp]
   19bf8:	movw	r2, #65045	; 0xfe15
   19bfc:	movt	r2, #1
   19c00:	mov	r0, r8
   19c04:	mov	r1, #1
   19c08:	mov	r3, r4
   19c0c:	bl	1197c <__fprintf_chk@plt>
   19c10:	movw	r1, #65052	; 0xfe1c
   19c14:	movt	r1, #1
   19c18:	mov	r0, #0
   19c1c:	mov	r2, #5
   19c20:	bl	11748 <dcgettext@plt>
   19c24:	mov	r3, r0
   19c28:	movw	r0, #2022	; 0x7e6
   19c2c:	str	r0, [sp]
   19c30:	movw	r2, #234	; 0xea
   19c34:	movt	r2, #2
   19c38:	mov	r0, r8
   19c3c:	mov	r1, #1
   19c40:	bl	1197c <__fprintf_chk@plt>
   19c44:	movw	r4, #50712	; 0xc618
   19c48:	movt	r4, #1
   19c4c:	mov	r0, r4
   19c50:	mov	r1, r8
   19c54:	bl	11670 <fputs_unlocked@plt>
   19c58:	movw	r1, #65056	; 0xfe20
   19c5c:	movt	r1, #1
   19c60:	mov	r0, #0
   19c64:	mov	r2, #5
   19c68:	bl	11748 <dcgettext@plt>
   19c6c:	mov	r2, r0
   19c70:	movw	r3, #65227	; 0xfecb
   19c74:	movt	r3, #1
   19c78:	mov	r0, r8
   19c7c:	mov	r1, #1
   19c80:	bl	1197c <__fprintf_chk@plt>
   19c84:	mov	r0, r4
   19c88:	mov	r1, r8
   19c8c:	bl	11670 <fputs_unlocked@plt>
   19c90:	cmp	r6, #9
   19c94:	bhi	19cd0 <__assert_fail@plt+0x8258>
   19c98:	add	r0, pc, #0
   19c9c:	ldr	pc, [r0, r6, lsl #2]
   19ca0:	andeq	r9, r1, r8, asr #25
   19ca4:	ldrdeq	r9, [r1], -ip
   19ca8:	andeq	r9, r1, ip, lsl #26
   19cac:	andeq	r9, r1, r4, lsr sp
   19cb0:	andeq	r9, r1, ip, asr sp
   19cb4:	andeq	r9, r1, r4, lsl #27
   19cb8:	andeq	r9, r1, ip, lsr #27
   19cbc:	andeq	r9, r1, r4, ror #27
   19cc0:	andeq	r9, r1, r4, lsl #29
   19cc4:	andeq	r9, r1, ip, lsr #28
   19cc8:	sub	sp, fp, #24
   19ccc:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   19cd0:	movw	r1, #44	; 0x2c
   19cd4:	movt	r1, #2
   19cd8:	b	19e34 <__assert_fail@plt+0x83bc>
   19cdc:	movw	r1, #65261	; 0xfeed
   19ce0:	movt	r1, #1
   19ce4:	mov	r0, #0
   19ce8:	mov	r2, #5
   19cec:	bl	11748 <dcgettext@plt>
   19cf0:	mov	r2, r0
   19cf4:	ldr	r3, [r7]
   19cf8:	mov	r0, r8
   19cfc:	mov	r1, #1
   19d00:	sub	sp, fp, #24
   19d04:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   19d08:	b	1197c <__fprintf_chk@plt>
   19d0c:	movw	r1, #65277	; 0xfefd
   19d10:	movt	r1, #1
   19d14:	mov	r0, #0
   19d18:	mov	r2, #5
   19d1c:	bl	11748 <dcgettext@plt>
   19d20:	mov	r2, r0
   19d24:	ldr	r3, [r7]
   19d28:	ldr	r0, [r7, #4]
   19d2c:	str	r0, [sp]
   19d30:	b	19e20 <__assert_fail@plt+0x83a8>
   19d34:	movw	r1, #65300	; 0xff14
   19d38:	movt	r1, #1
   19d3c:	mov	r0, #0
   19d40:	mov	r2, #5
   19d44:	bl	11748 <dcgettext@plt>
   19d48:	mov	r2, r0
   19d4c:	ldr	r3, [r7]
   19d50:	ldmib	r7, {r0, r1}
   19d54:	stm	sp, {r0, r1}
   19d58:	b	19e20 <__assert_fail@plt+0x83a8>
   19d5c:	movw	r1, #65328	; 0xff30
   19d60:	movt	r1, #1
   19d64:	mov	r0, #0
   19d68:	mov	r2, #5
   19d6c:	bl	11748 <dcgettext@plt>
   19d70:	mov	r2, r0
   19d74:	ldr	r3, [r7]
   19d78:	ldmib	r7, {r0, r1, r7}
   19d7c:	stm	sp, {r0, r1, r7}
   19d80:	b	19e20 <__assert_fail@plt+0x83a8>
   19d84:	movw	r1, #65360	; 0xff50
   19d88:	movt	r1, #1
   19d8c:	mov	r0, #0
   19d90:	mov	r2, #5
   19d94:	bl	11748 <dcgettext@plt>
   19d98:	mov	r2, r0
   19d9c:	ldr	r3, [r7]
   19da0:	ldmib	r7, {r0, r1, r6, r7}
   19da4:	stm	sp, {r0, r1, r6, r7}
   19da8:	b	19e20 <__assert_fail@plt+0x83a8>
   19dac:	movw	r1, #65396	; 0xff74
   19db0:	movt	r1, #1
   19db4:	mov	r0, #0
   19db8:	mov	r2, #5
   19dbc:	bl	11748 <dcgettext@plt>
   19dc0:	mov	r2, r0
   19dc4:	ldr	r3, [r7]
   19dc8:	ldmib	r7, {r0, r1, r6}
   19dcc:	ldr	r5, [r7, #16]
   19dd0:	ldr	r7, [r7, #20]
   19dd4:	stm	sp, {r0, r1, r6}
   19dd8:	str	r5, [sp, #12]
   19ddc:	str	r7, [sp, #16]
   19de0:	b	19e20 <__assert_fail@plt+0x83a8>
   19de4:	movw	r1, #65436	; 0xff9c
   19de8:	movt	r1, #1
   19dec:	mov	r0, #0
   19df0:	mov	r2, #5
   19df4:	bl	11748 <dcgettext@plt>
   19df8:	mov	r2, r0
   19dfc:	ldr	r3, [r7]
   19e00:	ldmib	r7, {r0, r1, r6}
   19e04:	ldr	r5, [r7, #16]
   19e08:	ldr	r4, [r7, #20]
   19e0c:	ldr	r7, [r7, #24]
   19e10:	stm	sp, {r0, r1, r6}
   19e14:	str	r5, [sp, #12]
   19e18:	str	r4, [sp, #16]
   19e1c:	str	r7, [sp, #20]
   19e20:	mov	r0, r8
   19e24:	mov	r1, #1
   19e28:	b	19ed4 <__assert_fail@plt+0x845c>
   19e2c:	movw	r1, #65528	; 0xfff8
   19e30:	movt	r1, #1
   19e34:	mov	r0, #0
   19e38:	mov	r2, #5
   19e3c:	bl	11748 <dcgettext@plt>
   19e40:	mov	ip, r0
   19e44:	ldr	r3, [r7]
   19e48:	ldr	r0, [r7, #4]
   19e4c:	ldr	r1, [r7, #8]
   19e50:	ldr	r6, [r7, #12]
   19e54:	ldr	r5, [r7, #16]
   19e58:	ldr	r4, [r7, #20]
   19e5c:	ldr	r2, [r7, #24]
   19e60:	ldr	lr, [r7, #28]
   19e64:	ldr	r7, [r7, #32]
   19e68:	stm	sp, {r0, r1, r6}
   19e6c:	str	r5, [sp, #12]
   19e70:	str	r4, [sp, #16]
   19e74:	str	r2, [sp, #20]
   19e78:	str	lr, [sp, #24]
   19e7c:	str	r7, [sp, #28]
   19e80:	b	19ec8 <__assert_fail@plt+0x8450>
   19e84:	movw	r1, #65480	; 0xffc8
   19e88:	movt	r1, #1
   19e8c:	mov	r0, #0
   19e90:	mov	r2, #5
   19e94:	bl	11748 <dcgettext@plt>
   19e98:	mov	ip, r0
   19e9c:	ldr	r3, [r7]
   19ea0:	ldmib	r7, {r0, r1, r6}
   19ea4:	ldr	r5, [r7, #16]
   19ea8:	ldr	r4, [r7, #20]
   19eac:	ldr	r2, [r7, #24]
   19eb0:	ldr	r7, [r7, #28]
   19eb4:	stm	sp, {r0, r1, r6}
   19eb8:	str	r5, [sp, #12]
   19ebc:	str	r4, [sp, #16]
   19ec0:	str	r2, [sp, #20]
   19ec4:	str	r7, [sp, #24]
   19ec8:	mov	r0, r8
   19ecc:	mov	r1, #1
   19ed0:	mov	r2, ip
   19ed4:	bl	1197c <__fprintf_chk@plt>
   19ed8:	sub	sp, fp, #24
   19edc:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   19ee0:	push	{r4, sl, fp, lr}
   19ee4:	add	fp, sp, #8
   19ee8:	sub	sp, sp, #8
   19eec:	mov	lr, #0
   19ef0:	ldr	ip, [fp, #8]
   19ef4:	ldr	r4, [ip, lr, lsl #2]
   19ef8:	add	lr, lr, #1
   19efc:	cmp	r4, #0
   19f00:	bne	19ef4 <__assert_fail@plt+0x847c>
   19f04:	sub	r4, lr, #1
   19f08:	str	ip, [sp]
   19f0c:	str	r4, [sp, #4]
   19f10:	bl	19bac <__assert_fail@plt+0x8134>
   19f14:	sub	sp, fp, #8
   19f18:	pop	{r4, sl, fp, pc}
   19f1c:	push	{r4, r5, fp, lr}
   19f20:	add	fp, sp, #8
   19f24:	sub	sp, sp, #48	; 0x30
   19f28:	mov	ip, #0
   19f2c:	ldr	r4, [fp, #8]
   19f30:	add	lr, sp, #8
   19f34:	ldr	r5, [r4]
   19f38:	str	r5, [lr, ip, lsl #2]
   19f3c:	cmp	r5, #0
   19f40:	beq	19f58 <__assert_fail@plt+0x84e0>
   19f44:	add	ip, ip, #1
   19f48:	add	r4, r4, #4
   19f4c:	cmp	ip, #10
   19f50:	bne	19f34 <__assert_fail@plt+0x84bc>
   19f54:	mov	ip, #10
   19f58:	str	lr, [sp]
   19f5c:	str	ip, [sp, #4]
   19f60:	bl	19bac <__assert_fail@plt+0x8134>
   19f64:	sub	sp, fp, #8
   19f68:	pop	{r4, r5, fp, pc}
   19f6c:	push	{fp, lr}
   19f70:	mov	fp, sp
   19f74:	sub	sp, sp, #8
   19f78:	add	ip, fp, #8
   19f7c:	str	ip, [sp, #4]
   19f80:	str	ip, [sp]
   19f84:	bl	19f1c <__assert_fail@plt+0x84a4>
   19f88:	mov	sp, fp
   19f8c:	pop	{fp, pc}
   19f90:	push	{fp, lr}
   19f94:	mov	fp, sp
   19f98:	movw	r0, #4580	; 0x11e4
   19f9c:	movt	r0, #3
   19fa0:	ldr	r1, [r0]
   19fa4:	movw	r0, #50712	; 0xc618
   19fa8:	movt	r0, #1
   19fac:	bl	11670 <fputs_unlocked@plt>
   19fb0:	movw	r1, #104	; 0x68
   19fb4:	movt	r1, #2
   19fb8:	mov	r0, #0
   19fbc:	mov	r2, #5
   19fc0:	bl	11748 <dcgettext@plt>
   19fc4:	mov	r1, r0
   19fc8:	movw	r2, #124	; 0x7c
   19fcc:	movt	r2, #2
   19fd0:	mov	r0, #1
   19fd4:	bl	11958 <__printf_chk@plt>
   19fd8:	movw	r1, #146	; 0x92
   19fdc:	movt	r1, #2
   19fe0:	mov	r0, #0
   19fe4:	mov	r2, #5
   19fe8:	bl	11748 <dcgettext@plt>
   19fec:	mov	r1, r0
   19ff0:	movw	r2, #50844	; 0xc69c
   19ff4:	movt	r2, #1
   19ff8:	movw	r3, #51051	; 0xc76b
   19ffc:	movt	r3, #1
   1a000:	mov	r0, #1
   1a004:	bl	11958 <__printf_chk@plt>
   1a008:	movw	r1, #166	; 0xa6
   1a00c:	movt	r1, #2
   1a010:	mov	r0, #0
   1a014:	mov	r2, #5
   1a018:	bl	11748 <dcgettext@plt>
   1a01c:	mov	r1, r0
   1a020:	movw	r2, #205	; 0xcd
   1a024:	movt	r2, #2
   1a028:	mov	r0, #1
   1a02c:	pop	{fp, lr}
   1a030:	b	11958 <__printf_chk@plt>
   1a034:	b	1a038 <__assert_fail@plt+0x85c0>
   1a038:	push	{r4, r5, r6, sl, fp, lr}
   1a03c:	add	fp, sp, #16
   1a040:	mov	r4, r2
   1a044:	mov	r5, r1
   1a048:	mov	r6, r0
   1a04c:	bl	1ba48 <__assert_fail@plt+0x9fd0>
   1a050:	cmp	r0, #0
   1a054:	popne	{r4, r5, r6, sl, fp, pc}
   1a058:	cmp	r6, #0
   1a05c:	beq	1a070 <__assert_fail@plt+0x85f8>
   1a060:	cmp	r5, #0
   1a064:	cmpne	r4, #0
   1a068:	bne	1a070 <__assert_fail@plt+0x85f8>
   1a06c:	pop	{r4, r5, r6, sl, fp, pc}
   1a070:	bl	1a3fc <__assert_fail@plt+0x8984>
   1a074:	push	{fp, lr}
   1a078:	mov	fp, sp
   1a07c:	bl	1a540 <__assert_fail@plt+0x8ac8>
   1a080:	pop	{fp, lr}
   1a084:	b	1a088 <__assert_fail@plt+0x8610>
   1a088:	cmp	r0, #0
   1a08c:	bxne	lr
   1a090:	push	{fp, lr}
   1a094:	mov	fp, sp
   1a098:	bl	1a3fc <__assert_fail@plt+0x8984>
   1a09c:	push	{fp, lr}
   1a0a0:	mov	fp, sp
   1a0a4:	bl	1ab98 <__assert_fail@plt+0x9120>
   1a0a8:	pop	{fp, lr}
   1a0ac:	b	1a088 <__assert_fail@plt+0x8610>
   1a0b0:	b	1a074 <__assert_fail@plt+0x85fc>
   1a0b4:	push	{r4, r5, fp, lr}
   1a0b8:	add	fp, sp, #8
   1a0bc:	mov	r4, r1
   1a0c0:	mov	r5, r0
   1a0c4:	bl	1a570 <__assert_fail@plt+0x8af8>
   1a0c8:	cmp	r0, #0
   1a0cc:	popne	{r4, r5, fp, pc}
   1a0d0:	cmp	r5, #0
   1a0d4:	beq	1a0e4 <__assert_fail@plt+0x866c>
   1a0d8:	cmp	r4, #0
   1a0dc:	bne	1a0e4 <__assert_fail@plt+0x866c>
   1a0e0:	pop	{r4, r5, fp, pc}
   1a0e4:	bl	1a3fc <__assert_fail@plt+0x8984>
   1a0e8:	push	{fp, lr}
   1a0ec:	mov	fp, sp
   1a0f0:	bl	1ab9c <__assert_fail@plt+0x9124>
   1a0f4:	pop	{fp, lr}
   1a0f8:	b	1a088 <__assert_fail@plt+0x8610>
   1a0fc:	push	{fp, lr}
   1a100:	mov	fp, sp
   1a104:	bl	1abac <__assert_fail@plt+0x9134>
   1a108:	pop	{fp, lr}
   1a10c:	b	1a088 <__assert_fail@plt+0x8610>
   1a110:	mov	r2, r1
   1a114:	mov	r1, r0
   1a118:	mov	r0, #0
   1a11c:	b	1a038 <__assert_fail@plt+0x85c0>
   1a120:	mov	r2, r1
   1a124:	mov	r1, r0
   1a128:	mov	r0, #0
   1a12c:	b	1a0fc <__assert_fail@plt+0x8684>
   1a130:	mov	r2, #1
   1a134:	b	1a138 <__assert_fail@plt+0x86c0>
   1a138:	push	{r4, r5, fp, lr}
   1a13c:	add	fp, sp, #8
   1a140:	mov	r4, r1
   1a144:	ldr	r5, [r1]
   1a148:	cmp	r0, #0
   1a14c:	beq	1a164 <__assert_fail@plt+0x86ec>
   1a150:	mov	r1, #1
   1a154:	add	r1, r1, r5, lsr #1
   1a158:	adds	r5, r5, r1
   1a15c:	bcc	1a17c <__assert_fail@plt+0x8704>
   1a160:	bl	1a3fc <__assert_fail@plt+0x8984>
   1a164:	cmp	r5, #0
   1a168:	bne	1a17c <__assert_fail@plt+0x8704>
   1a16c:	mov	r1, #64	; 0x40
   1a170:	udiv	r5, r1, r2
   1a174:	cmp	r2, #64	; 0x40
   1a178:	addhi	r5, r5, #1
   1a17c:	mov	r1, r5
   1a180:	bl	1a038 <__assert_fail@plt+0x85c0>
   1a184:	str	r5, [r4]
   1a188:	pop	{r4, r5, fp, pc}
   1a18c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1a190:	add	fp, sp, #24
   1a194:	mov	r8, r1
   1a198:	ldr	r6, [r1]
   1a19c:	add	r1, r6, r6, asr #1
   1a1a0:	cmp	r1, r6
   1a1a4:	mvnvs	r1, #-2147483648	; 0x80000000
   1a1a8:	cmp	r1, r3
   1a1ac:	mov	r5, r1
   1a1b0:	movgt	r5, r3
   1a1b4:	cmn	r3, #1
   1a1b8:	movle	r5, r1
   1a1bc:	ldr	r4, [fp, #8]
   1a1c0:	cmn	r4, #1
   1a1c4:	ble	1a1ec <__assert_fail@plt+0x8774>
   1a1c8:	cmp	r4, #0
   1a1cc:	beq	1a240 <__assert_fail@plt+0x87c8>
   1a1d0:	cmn	r5, #1
   1a1d4:	ble	1a214 <__assert_fail@plt+0x879c>
   1a1d8:	mvn	r7, #-2147483648	; 0x80000000
   1a1dc:	udiv	r1, r7, r4
   1a1e0:	cmp	r1, r5
   1a1e4:	bge	1a240 <__assert_fail@plt+0x87c8>
   1a1e8:	b	1a250 <__assert_fail@plt+0x87d8>
   1a1ec:	cmn	r5, #1
   1a1f0:	ble	1a230 <__assert_fail@plt+0x87b8>
   1a1f4:	cmn	r4, #1
   1a1f8:	beq	1a240 <__assert_fail@plt+0x87c8>
   1a1fc:	mov	r1, #-2147483648	; 0x80000000
   1a200:	sdiv	r1, r1, r4
   1a204:	mvn	r7, #-2147483648	; 0x80000000
   1a208:	cmp	r1, r5
   1a20c:	bge	1a240 <__assert_fail@plt+0x87c8>
   1a210:	b	1a250 <__assert_fail@plt+0x87d8>
   1a214:	beq	1a240 <__assert_fail@plt+0x87c8>
   1a218:	mov	r1, #-2147483648	; 0x80000000
   1a21c:	sdiv	r1, r1, r5
   1a220:	mvn	r7, #-2147483648	; 0x80000000
   1a224:	cmp	r1, r4
   1a228:	bge	1a240 <__assert_fail@plt+0x87c8>
   1a22c:	b	1a250 <__assert_fail@plt+0x87d8>
   1a230:	mvn	r7, #-2147483648	; 0x80000000
   1a234:	sdiv	r1, r7, r4
   1a238:	cmp	r5, r1
   1a23c:	blt	1a250 <__assert_fail@plt+0x87d8>
   1a240:	mul	r1, r5, r4
   1a244:	mov	r7, #64	; 0x40
   1a248:	cmp	r1, #63	; 0x3f
   1a24c:	bgt	1a258 <__assert_fail@plt+0x87e0>
   1a250:	sdiv	r5, r7, r4
   1a254:	mul	r1, r5, r4
   1a258:	cmp	r0, #0
   1a25c:	moveq	r7, #0
   1a260:	streq	r7, [r8]
   1a264:	sub	r7, r5, r6
   1a268:	cmp	r7, r2
   1a26c:	bge	1a318 <__assert_fail@plt+0x88a0>
   1a270:	add	r5, r6, r2
   1a274:	mov	r1, #0
   1a278:	cmp	r5, r3
   1a27c:	mov	r2, #0
   1a280:	movwgt	r2, #1
   1a284:	cmn	r3, #1
   1a288:	movwgt	r1, #1
   1a28c:	cmp	r5, r6
   1a290:	bvs	1a300 <__assert_fail@plt+0x8888>
   1a294:	ands	r1, r1, r2
   1a298:	bne	1a300 <__assert_fail@plt+0x8888>
   1a29c:	cmn	r4, #1
   1a2a0:	ble	1a2c8 <__assert_fail@plt+0x8850>
   1a2a4:	cmp	r4, #0
   1a2a8:	beq	1a314 <__assert_fail@plt+0x889c>
   1a2ac:	cmn	r5, #1
   1a2b0:	ble	1a2ec <__assert_fail@plt+0x8874>
   1a2b4:	mvn	r1, #-2147483648	; 0x80000000
   1a2b8:	udiv	r1, r1, r4
   1a2bc:	cmp	r1, r5
   1a2c0:	bge	1a314 <__assert_fail@plt+0x889c>
   1a2c4:	b	1a300 <__assert_fail@plt+0x8888>
   1a2c8:	cmn	r5, #1
   1a2cc:	ble	1a304 <__assert_fail@plt+0x888c>
   1a2d0:	cmn	r4, #1
   1a2d4:	beq	1a314 <__assert_fail@plt+0x889c>
   1a2d8:	mov	r1, #-2147483648	; 0x80000000
   1a2dc:	sdiv	r1, r1, r4
   1a2e0:	cmp	r1, r5
   1a2e4:	bge	1a314 <__assert_fail@plt+0x889c>
   1a2e8:	b	1a300 <__assert_fail@plt+0x8888>
   1a2ec:	beq	1a314 <__assert_fail@plt+0x889c>
   1a2f0:	mov	r1, #-2147483648	; 0x80000000
   1a2f4:	sdiv	r1, r1, r5
   1a2f8:	cmp	r1, r4
   1a2fc:	bge	1a314 <__assert_fail@plt+0x889c>
   1a300:	bl	1a3fc <__assert_fail@plt+0x8984>
   1a304:	mvn	r1, #-2147483648	; 0x80000000
   1a308:	sdiv	r1, r1, r4
   1a30c:	cmp	r5, r1
   1a310:	blt	1a300 <__assert_fail@plt+0x8888>
   1a314:	mul	r1, r5, r4
   1a318:	bl	1a0b4 <__assert_fail@plt+0x863c>
   1a31c:	str	r5, [r8]
   1a320:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1a324:	mov	r1, #1
   1a328:	b	1a32c <__assert_fail@plt+0x88b4>
   1a32c:	push	{fp, lr}
   1a330:	mov	fp, sp
   1a334:	bl	1a4ec <__assert_fail@plt+0x8a74>
   1a338:	pop	{fp, lr}
   1a33c:	b	1a088 <__assert_fail@plt+0x8610>
   1a340:	mov	r1, #1
   1a344:	b	1a348 <__assert_fail@plt+0x88d0>
   1a348:	push	{fp, lr}
   1a34c:	mov	fp, sp
   1a350:	bl	1aba8 <__assert_fail@plt+0x9130>
   1a354:	pop	{fp, lr}
   1a358:	b	1a088 <__assert_fail@plt+0x8610>
   1a35c:	push	{r4, r5, fp, lr}
   1a360:	add	fp, sp, #8
   1a364:	mov	r4, r1
   1a368:	mov	r5, r0
   1a36c:	mov	r0, r1
   1a370:	bl	1a074 <__assert_fail@plt+0x85fc>
   1a374:	mov	r1, r5
   1a378:	mov	r2, r4
   1a37c:	pop	{r4, r5, fp, lr}
   1a380:	b	11718 <memcpy@plt>
   1a384:	push	{r4, r5, fp, lr}
   1a388:	add	fp, sp, #8
   1a38c:	mov	r4, r1
   1a390:	mov	r5, r0
   1a394:	mov	r0, r1
   1a398:	bl	1a09c <__assert_fail@plt+0x8624>
   1a39c:	mov	r1, r5
   1a3a0:	mov	r2, r4
   1a3a4:	pop	{r4, r5, fp, lr}
   1a3a8:	b	11718 <memcpy@plt>
   1a3ac:	push	{r4, r5, fp, lr}
   1a3b0:	add	fp, sp, #8
   1a3b4:	mov	r4, r1
   1a3b8:	mov	r5, r0
   1a3bc:	add	r0, r1, #1
   1a3c0:	bl	1a09c <__assert_fail@plt+0x8624>
   1a3c4:	mov	r1, #0
   1a3c8:	strb	r1, [r0, r4]
   1a3cc:	mov	r1, r5
   1a3d0:	mov	r2, r4
   1a3d4:	pop	{r4, r5, fp, lr}
   1a3d8:	b	11718 <memcpy@plt>
   1a3dc:	push	{r4, sl, fp, lr}
   1a3e0:	add	fp, sp, #8
   1a3e4:	mov	r4, r0
   1a3e8:	bl	118e0 <strlen@plt>
   1a3ec:	add	r1, r0, #1
   1a3f0:	mov	r0, r4
   1a3f4:	pop	{r4, sl, fp, lr}
   1a3f8:	b	1a35c <__assert_fail@plt+0x88e4>
   1a3fc:	push	{fp, lr}
   1a400:	mov	fp, sp
   1a404:	movw	r0, #4480	; 0x1180
   1a408:	movt	r0, #3
   1a40c:	ldr	r4, [r0]
   1a410:	movw	r1, #281	; 0x119
   1a414:	movt	r1, #2
   1a418:	mov	r0, #0
   1a41c:	mov	r2, #5
   1a420:	bl	11748 <dcgettext@plt>
   1a424:	mov	r3, r0
   1a428:	movw	r2, #64561	; 0xfc31
   1a42c:	movt	r2, #1
   1a430:	mov	r0, r4
   1a434:	mov	r1, #0
   1a438:	bl	11844 <error@plt>
   1a43c:	bl	11a60 <abort@plt>
   1a440:	push	{r4, sl, fp, lr}
   1a444:	add	fp, sp, #8
   1a448:	sub	sp, sp, #8
   1a44c:	ldr	r4, [fp, #8]
   1a450:	str	r4, [sp]
   1a454:	bl	1ba84 <__assert_fail@plt+0xa00c>
   1a458:	mov	r4, r0
   1a45c:	cmn	r0, #1
   1a460:	bgt	1a474 <__assert_fail@plt+0x89fc>
   1a464:	bl	11910 <__errno_location@plt>
   1a468:	ldr	r0, [r0]
   1a46c:	cmp	r0, #12
   1a470:	beq	1a480 <__assert_fail@plt+0x8a08>
   1a474:	mov	r0, r4
   1a478:	sub	sp, fp, #8
   1a47c:	pop	{r4, sl, fp, pc}
   1a480:	bl	1a3fc <__assert_fail@plt+0x8984>
   1a484:	push	{r4, sl, fp, lr}
   1a488:	add	fp, sp, #8
   1a48c:	bl	1bcfc <__assert_fail@plt+0xa284>
   1a490:	mov	r4, r0
   1a494:	cmp	r0, #0
   1a498:	bne	1a4ac <__assert_fail@plt+0x8a34>
   1a49c:	bl	11910 <__errno_location@plt>
   1a4a0:	ldr	r0, [r0]
   1a4a4:	cmp	r0, #12
   1a4a8:	beq	1a4b4 <__assert_fail@plt+0x8a3c>
   1a4ac:	mov	r0, r4
   1a4b0:	pop	{r4, sl, fp, pc}
   1a4b4:	bl	1a3fc <__assert_fail@plt+0x8984>
   1a4b8:	push	{r4, sl, fp, lr}
   1a4bc:	add	fp, sp, #8
   1a4c0:	bl	1bf2c <__assert_fail@plt+0xa4b4>
   1a4c4:	mov	r4, r0
   1a4c8:	cmp	r0, #0
   1a4cc:	bne	1a4e0 <__assert_fail@plt+0x8a68>
   1a4d0:	bl	11910 <__errno_location@plt>
   1a4d4:	ldr	r0, [r0]
   1a4d8:	cmp	r0, #12
   1a4dc:	beq	1a4e8 <__assert_fail@plt+0x8a70>
   1a4e0:	mov	r0, r4
   1a4e4:	pop	{r4, sl, fp, pc}
   1a4e8:	bl	1a3fc <__assert_fail@plt+0x8984>
   1a4ec:	clz	r2, r1
   1a4f0:	lsr	r2, r2, #5
   1a4f4:	clz	r3, r0
   1a4f8:	lsr	r3, r3, #5
   1a4fc:	orrs	r2, r3, r2
   1a500:	movwne	r1, #1
   1a504:	movwne	r0, #1
   1a508:	cmp	r1, #0
   1a50c:	beq	1a53c <__assert_fail@plt+0x8ac4>
   1a510:	mvn	r2, #-2147483648	; 0x80000000
   1a514:	udiv	r2, r2, r1
   1a518:	cmp	r2, r0
   1a51c:	bcs	1a53c <__assert_fail@plt+0x8ac4>
   1a520:	push	{fp, lr}
   1a524:	mov	fp, sp
   1a528:	bl	11910 <__errno_location@plt>
   1a52c:	mov	r1, #12
   1a530:	str	r1, [r0]
   1a534:	mov	r0, #0
   1a538:	pop	{fp, pc}
   1a53c:	b	11664 <calloc@plt>
   1a540:	cmp	r0, #0
   1a544:	movweq	r0, #1
   1a548:	cmn	r0, #1
   1a54c:	ble	1a554 <__assert_fail@plt+0x8adc>
   1a550:	b	11850 <malloc@plt>
   1a554:	push	{fp, lr}
   1a558:	mov	fp, sp
   1a55c:	bl	11910 <__errno_location@plt>
   1a560:	mov	r1, #12
   1a564:	str	r1, [r0]
   1a568:	mov	r0, #0
   1a56c:	pop	{fp, pc}
   1a570:	push	{fp, lr}
   1a574:	mov	fp, sp
   1a578:	cmp	r0, #0
   1a57c:	beq	1a598 <__assert_fail@plt+0x8b20>
   1a580:	cmp	r1, #0
   1a584:	beq	1a5a4 <__assert_fail@plt+0x8b2c>
   1a588:	cmn	r1, #1
   1a58c:	ble	1a5b0 <__assert_fail@plt+0x8b38>
   1a590:	pop	{fp, lr}
   1a594:	b	11790 <realloc@plt>
   1a598:	mov	r0, r1
   1a59c:	pop	{fp, lr}
   1a5a0:	b	1a540 <__assert_fail@plt+0x8ac8>
   1a5a4:	bl	172ec <__assert_fail@plt+0x5874>
   1a5a8:	mov	r0, #0
   1a5ac:	pop	{fp, pc}
   1a5b0:	bl	11910 <__errno_location@plt>
   1a5b4:	mov	r1, #12
   1a5b8:	str	r1, [r0]
   1a5bc:	mov	r0, #0
   1a5c0:	pop	{fp, pc}
   1a5c4:	mov	r1, r0
   1a5c8:	sub	r2, r0, #65	; 0x41
   1a5cc:	mov	r0, #1
   1a5d0:	cmp	r2, #26
   1a5d4:	subcs	r2, r1, #97	; 0x61
   1a5d8:	cmpcs	r2, #26
   1a5dc:	bcs	1a5e4 <__assert_fail@plt+0x8b6c>
   1a5e0:	bx	lr
   1a5e4:	sub	r1, r1, #48	; 0x30
   1a5e8:	cmp	r1, #10
   1a5ec:	movcs	r0, #0
   1a5f0:	bx	lr
   1a5f4:	mov	r1, r0
   1a5f8:	sub	r2, r0, #65	; 0x41
   1a5fc:	mov	r0, #1
   1a600:	cmp	r2, #26
   1a604:	subcs	r1, r1, #97	; 0x61
   1a608:	cmpcs	r1, #26
   1a60c:	movcs	r0, #0
   1a610:	bx	lr
   1a614:	mov	r1, #0
   1a618:	cmp	r0, #128	; 0x80
   1a61c:	movwcc	r1, #1
   1a620:	mov	r0, r1
   1a624:	bx	lr
   1a628:	sub	r1, r0, #9
   1a62c:	clz	r1, r1
   1a630:	lsr	r1, r1, #5
   1a634:	sub	r0, r0, #32
   1a638:	clz	r0, r0
   1a63c:	lsr	r0, r0, #5
   1a640:	orr	r0, r0, r1
   1a644:	bx	lr
   1a648:	mov	r1, r0
   1a64c:	mov	r0, #1
   1a650:	cmp	r1, #32
   1a654:	bxcc	lr
   1a658:	cmp	r1, #127	; 0x7f
   1a65c:	movne	r0, #0
   1a660:	bx	lr
   1a664:	sub	r1, r0, #48	; 0x30
   1a668:	mov	r0, #0
   1a66c:	cmp	r1, #10
   1a670:	movwcc	r0, #1
   1a674:	bx	lr
   1a678:	sub	r1, r0, #33	; 0x21
   1a67c:	mov	r0, #0
   1a680:	cmp	r1, #94	; 0x5e
   1a684:	movwcc	r0, #1
   1a688:	bx	lr
   1a68c:	sub	r1, r0, #97	; 0x61
   1a690:	mov	r0, #0
   1a694:	cmp	r1, #26
   1a698:	movwcc	r0, #1
   1a69c:	bx	lr
   1a6a0:	sub	r1, r0, #32
   1a6a4:	mov	r0, #0
   1a6a8:	cmp	r1, #95	; 0x5f
   1a6ac:	movwcc	r0, #1
   1a6b0:	bx	lr
   1a6b4:	sub	r1, r0, #33	; 0x21
   1a6b8:	cmp	r1, #93	; 0x5d
   1a6bc:	bhi	1a848 <__assert_fail@plt+0x8dd0>
   1a6c0:	mov	r0, #1
   1a6c4:	add	r2, pc, #0
   1a6c8:	ldr	pc, [r2, r1, lsl #2]
   1a6cc:	andeq	sl, r1, r4, asr #16
   1a6d0:	andeq	sl, r1, r4, asr #16
   1a6d4:	andeq	sl, r1, r4, asr #16
   1a6d8:	andeq	sl, r1, r4, asr #16
   1a6dc:	andeq	sl, r1, r4, asr #16
   1a6e0:	andeq	sl, r1, r4, asr #16
   1a6e4:	andeq	sl, r1, r4, asr #16
   1a6e8:	andeq	sl, r1, r4, asr #16
   1a6ec:	andeq	sl, r1, r4, asr #16
   1a6f0:	andeq	sl, r1, r4, asr #16
   1a6f4:	andeq	sl, r1, r4, asr #16
   1a6f8:	andeq	sl, r1, r4, asr #16
   1a6fc:	andeq	sl, r1, r4, asr #16
   1a700:	andeq	sl, r1, r4, asr #16
   1a704:	andeq	sl, r1, r4, asr #16
   1a708:	andeq	sl, r1, r8, asr #16
   1a70c:	andeq	sl, r1, r8, asr #16
   1a710:	andeq	sl, r1, r8, asr #16
   1a714:	andeq	sl, r1, r8, asr #16
   1a718:	andeq	sl, r1, r8, asr #16
   1a71c:	andeq	sl, r1, r8, asr #16
   1a720:	andeq	sl, r1, r8, asr #16
   1a724:	andeq	sl, r1, r8, asr #16
   1a728:	andeq	sl, r1, r8, asr #16
   1a72c:	andeq	sl, r1, r8, asr #16
   1a730:	andeq	sl, r1, r4, asr #16
   1a734:	andeq	sl, r1, r4, asr #16
   1a738:	andeq	sl, r1, r4, asr #16
   1a73c:	andeq	sl, r1, r4, asr #16
   1a740:	andeq	sl, r1, r4, asr #16
   1a744:	andeq	sl, r1, r4, asr #16
   1a748:	andeq	sl, r1, r4, asr #16
   1a74c:	andeq	sl, r1, r8, asr #16
   1a750:	andeq	sl, r1, r8, asr #16
   1a754:	andeq	sl, r1, r8, asr #16
   1a758:	andeq	sl, r1, r8, asr #16
   1a75c:	andeq	sl, r1, r8, asr #16
   1a760:	andeq	sl, r1, r8, asr #16
   1a764:	andeq	sl, r1, r8, asr #16
   1a768:	andeq	sl, r1, r8, asr #16
   1a76c:	andeq	sl, r1, r8, asr #16
   1a770:	andeq	sl, r1, r8, asr #16
   1a774:	andeq	sl, r1, r8, asr #16
   1a778:	andeq	sl, r1, r8, asr #16
   1a77c:	andeq	sl, r1, r8, asr #16
   1a780:	andeq	sl, r1, r8, asr #16
   1a784:	andeq	sl, r1, r8, asr #16
   1a788:	andeq	sl, r1, r8, asr #16
   1a78c:	andeq	sl, r1, r8, asr #16
   1a790:	andeq	sl, r1, r8, asr #16
   1a794:	andeq	sl, r1, r8, asr #16
   1a798:	andeq	sl, r1, r8, asr #16
   1a79c:	andeq	sl, r1, r8, asr #16
   1a7a0:	andeq	sl, r1, r8, asr #16
   1a7a4:	andeq	sl, r1, r8, asr #16
   1a7a8:	andeq	sl, r1, r8, asr #16
   1a7ac:	andeq	sl, r1, r8, asr #16
   1a7b0:	andeq	sl, r1, r8, asr #16
   1a7b4:	andeq	sl, r1, r4, asr #16
   1a7b8:	andeq	sl, r1, r4, asr #16
   1a7bc:	andeq	sl, r1, r4, asr #16
   1a7c0:	andeq	sl, r1, r4, asr #16
   1a7c4:	andeq	sl, r1, r4, asr #16
   1a7c8:	andeq	sl, r1, r4, asr #16
   1a7cc:	andeq	sl, r1, r8, asr #16
   1a7d0:	andeq	sl, r1, r8, asr #16
   1a7d4:	andeq	sl, r1, r8, asr #16
   1a7d8:	andeq	sl, r1, r8, asr #16
   1a7dc:	andeq	sl, r1, r8, asr #16
   1a7e0:	andeq	sl, r1, r8, asr #16
   1a7e4:	andeq	sl, r1, r8, asr #16
   1a7e8:	andeq	sl, r1, r8, asr #16
   1a7ec:	andeq	sl, r1, r8, asr #16
   1a7f0:	andeq	sl, r1, r8, asr #16
   1a7f4:	andeq	sl, r1, r8, asr #16
   1a7f8:	andeq	sl, r1, r8, asr #16
   1a7fc:	andeq	sl, r1, r8, asr #16
   1a800:	andeq	sl, r1, r8, asr #16
   1a804:	andeq	sl, r1, r8, asr #16
   1a808:	andeq	sl, r1, r8, asr #16
   1a80c:	andeq	sl, r1, r8, asr #16
   1a810:	andeq	sl, r1, r8, asr #16
   1a814:	andeq	sl, r1, r8, asr #16
   1a818:	andeq	sl, r1, r8, asr #16
   1a81c:	andeq	sl, r1, r8, asr #16
   1a820:	andeq	sl, r1, r8, asr #16
   1a824:	andeq	sl, r1, r8, asr #16
   1a828:	andeq	sl, r1, r8, asr #16
   1a82c:	andeq	sl, r1, r8, asr #16
   1a830:	andeq	sl, r1, r8, asr #16
   1a834:	andeq	sl, r1, r4, asr #16
   1a838:	andeq	sl, r1, r4, asr #16
   1a83c:	andeq	sl, r1, r4, asr #16
   1a840:	andeq	sl, r1, r4, asr #16
   1a844:	bx	lr
   1a848:	mov	r0, #0
   1a84c:	bx	lr
   1a850:	sub	r0, r0, #9
   1a854:	cmp	r0, #23
   1a858:	movhi	r0, #0
   1a85c:	bxhi	lr
   1a860:	bic	r0, r0, #-16777216	; 0xff000000
   1a864:	movw	r1, #31
   1a868:	movt	r1, #128	; 0x80
   1a86c:	mov	r2, #1
   1a870:	and	r0, r2, r1, lsr r0
   1a874:	bx	lr
   1a878:	sub	r1, r0, #65	; 0x41
   1a87c:	mov	r0, #0
   1a880:	cmp	r1, #26
   1a884:	movwcc	r0, #1
   1a888:	bx	lr
   1a88c:	mov	r1, r0
   1a890:	sub	r2, r0, #48	; 0x30
   1a894:	mov	r0, #1
   1a898:	cmp	r2, #22
   1a89c:	bhi	1a8b4 <__assert_fail@plt+0x8e3c>
   1a8a0:	mov	ip, #1
   1a8a4:	movw	r3, #1023	; 0x3ff
   1a8a8:	movt	r3, #126	; 0x7e
   1a8ac:	tst	r3, ip, lsl r2
   1a8b0:	bxne	lr
   1a8b4:	sub	r1, r1, #97	; 0x61
   1a8b8:	cmp	r1, #6
   1a8bc:	movcs	r0, #0
   1a8c0:	bxcs	lr
   1a8c4:	bx	lr
   1a8c8:	sub	r1, r0, #65	; 0x41
   1a8cc:	cmp	r1, #26
   1a8d0:	addcc	r0, r0, #32
   1a8d4:	bx	lr
   1a8d8:	sub	r1, r0, #97	; 0x61
   1a8dc:	cmp	r1, #26
   1a8e0:	subcc	r0, r0, #32
   1a8e4:	bx	lr
   1a8e8:	push	{r4, r5, r6, sl, fp, lr}
   1a8ec:	add	fp, sp, #16
   1a8f0:	cmp	r0, r1
   1a8f4:	beq	1a940 <__assert_fail@plt+0x8ec8>
   1a8f8:	mov	r4, r1
   1a8fc:	mov	r5, r0
   1a900:	ldrb	r0, [r5]
   1a904:	bl	1a8c8 <__assert_fail@plt+0x8e50>
   1a908:	mov	r6, r0
   1a90c:	ldrb	r0, [r4]
   1a910:	bl	1a8c8 <__assert_fail@plt+0x8e50>
   1a914:	uxtb	r1, r6
   1a918:	cmp	r1, #0
   1a91c:	beq	1a934 <__assert_fail@plt+0x8ebc>
   1a920:	add	r4, r4, #1
   1a924:	add	r5, r5, #1
   1a928:	uxtb	r2, r0
   1a92c:	cmp	r1, r2
   1a930:	beq	1a900 <__assert_fail@plt+0x8e88>
   1a934:	uxtb	r0, r0
   1a938:	sub	r0, r1, r0
   1a93c:	pop	{r4, r5, r6, sl, fp, pc}
   1a940:	mov	r0, #0
   1a944:	pop	{r4, r5, r6, sl, fp, pc}
   1a948:	push	{r4, r5, r6, sl, fp, lr}
   1a94c:	add	fp, sp, #16
   1a950:	mov	r4, r0
   1a954:	bl	11820 <__fpending@plt>
   1a958:	mov	r5, r0
   1a95c:	mov	r0, r4
   1a960:	bl	1182c <ferror_unlocked@plt>
   1a964:	mov	r6, r0
   1a968:	mov	r0, r4
   1a96c:	bl	1a9cc <__assert_fail@plt+0x8f54>
   1a970:	cmp	r6, #0
   1a974:	beq	1a998 <__assert_fail@plt+0x8f20>
   1a978:	mvn	r4, #0
   1a97c:	cmp	r0, #0
   1a980:	bne	1a9c4 <__assert_fail@plt+0x8f4c>
   1a984:	bl	11910 <__errno_location@plt>
   1a988:	mov	r1, #0
   1a98c:	str	r1, [r0]
   1a990:	mov	r0, r4
   1a994:	pop	{r4, r5, r6, sl, fp, pc}
   1a998:	cmp	r0, #0
   1a99c:	mov	r4, r0
   1a9a0:	mvnne	r4, #0
   1a9a4:	cmp	r5, #0
   1a9a8:	bne	1a9c4 <__assert_fail@plt+0x8f4c>
   1a9ac:	cmp	r0, #0
   1a9b0:	beq	1a9c4 <__assert_fail@plt+0x8f4c>
   1a9b4:	bl	11910 <__errno_location@plt>
   1a9b8:	ldr	r0, [r0]
   1a9bc:	subs	r4, r0, #9
   1a9c0:	mvnne	r4, #0
   1a9c4:	mov	r0, r4
   1a9c8:	pop	{r4, r5, r6, sl, fp, pc}
   1a9cc:	push	{r4, r5, fp, lr}
   1a9d0:	add	fp, sp, #8
   1a9d4:	sub	sp, sp, #8
   1a9d8:	mov	r4, r0
   1a9dc:	bl	11970 <fileno@plt>
   1a9e0:	cmn	r0, #1
   1a9e4:	ble	1aa5c <__assert_fail@plt+0x8fe4>
   1a9e8:	mov	r0, r4
   1a9ec:	bl	11874 <__freading@plt>
   1a9f0:	cmp	r0, #0
   1a9f4:	beq	1aa20 <__assert_fail@plt+0x8fa8>
   1a9f8:	mov	r0, r4
   1a9fc:	bl	11970 <fileno@plt>
   1aa00:	mov	r1, #1
   1aa04:	str	r1, [sp]
   1aa08:	mov	r2, #0
   1aa0c:	mov	r3, #0
   1aa10:	bl	117fc <lseek64@plt>
   1aa14:	and	r0, r0, r1
   1aa18:	cmn	r0, #1
   1aa1c:	beq	1aa5c <__assert_fail@plt+0x8fe4>
   1aa20:	mov	r0, r4
   1aa24:	bl	1aa6c <__assert_fail@plt+0x8ff4>
   1aa28:	cmp	r0, #0
   1aa2c:	beq	1aa5c <__assert_fail@plt+0x8fe4>
   1aa30:	bl	11910 <__errno_location@plt>
   1aa34:	ldr	r5, [r0]
   1aa38:	mov	r0, r4
   1aa3c:	bl	11994 <fclose@plt>
   1aa40:	cmp	r5, #0
   1aa44:	beq	1aa54 <__assert_fail@plt+0x8fdc>
   1aa48:	bl	11910 <__errno_location@plt>
   1aa4c:	str	r5, [r0]
   1aa50:	mvn	r0, #0
   1aa54:	sub	sp, fp, #8
   1aa58:	pop	{r4, r5, fp, pc}
   1aa5c:	mov	r0, r4
   1aa60:	sub	sp, fp, #8
   1aa64:	pop	{r4, r5, fp, lr}
   1aa68:	b	11994 <fclose@plt>
   1aa6c:	push	{r4, sl, fp, lr}
   1aa70:	add	fp, sp, #8
   1aa74:	mov	r4, r0
   1aa78:	cmp	r0, #0
   1aa7c:	beq	1aa94 <__assert_fail@plt+0x901c>
   1aa80:	mov	r0, r4
   1aa84:	bl	11874 <__freading@plt>
   1aa88:	cmp	r0, #0
   1aa8c:	movne	r0, r4
   1aa90:	blne	1aaa0 <__assert_fail@plt+0x9028>
   1aa94:	mov	r0, r4
   1aa98:	pop	{r4, sl, fp, lr}
   1aa9c:	b	116b8 <fflush@plt>
   1aaa0:	push	{fp, lr}
   1aaa4:	mov	fp, sp
   1aaa8:	sub	sp, sp, #8
   1aaac:	ldrb	r1, [r0, #1]
   1aab0:	tst	r1, #1
   1aab4:	beq	1aacc <__assert_fail@plt+0x9054>
   1aab8:	mov	r1, #1
   1aabc:	str	r1, [sp]
   1aac0:	mov	r2, #0
   1aac4:	mov	r3, #0
   1aac8:	bl	1aad4 <__assert_fail@plt+0x905c>
   1aacc:	mov	sp, fp
   1aad0:	pop	{fp, pc}
   1aad4:	push	{r4, r5, r6, r7, fp, lr}
   1aad8:	add	fp, sp, #16
   1aadc:	sub	sp, sp, #8
   1aae0:	mov	r5, r3
   1aae4:	mov	r6, r2
   1aae8:	mov	r4, r0
   1aaec:	ldr	r0, [r0, #4]
   1aaf0:	ldr	r1, [r4, #8]
   1aaf4:	cmp	r1, r0
   1aaf8:	bne	1ab14 <__assert_fail@plt+0x909c>
   1aafc:	ldrd	r0, [r4, #16]
   1ab00:	cmp	r1, r0
   1ab04:	bne	1ab14 <__assert_fail@plt+0x909c>
   1ab08:	ldr	r0, [r4, #36]	; 0x24
   1ab0c:	cmp	r0, #0
   1ab10:	beq	1ab2c <__assert_fail@plt+0x90b4>
   1ab14:	mov	r0, r4
   1ab18:	mov	r2, r6
   1ab1c:	mov	r3, r5
   1ab20:	sub	sp, fp, #16
   1ab24:	pop	{r4, r5, r6, r7, fp, lr}
   1ab28:	b	119ac <fseeko64@plt>
   1ab2c:	ldr	r7, [fp, #8]
   1ab30:	mov	r0, r4
   1ab34:	bl	11970 <fileno@plt>
   1ab38:	str	r7, [sp]
   1ab3c:	mov	r2, r6
   1ab40:	mov	r3, r5
   1ab44:	bl	117fc <lseek64@plt>
   1ab48:	and	r2, r0, r1
   1ab4c:	cmn	r2, #1
   1ab50:	beq	1ab70 <__assert_fail@plt+0x90f8>
   1ab54:	strd	r0, [r4, #80]	; 0x50
   1ab58:	ldr	r0, [r4]
   1ab5c:	bic	r0, r0, #16
   1ab60:	str	r0, [r4]
   1ab64:	mov	r0, #0
   1ab68:	sub	sp, fp, #16
   1ab6c:	pop	{r4, r5, r6, r7, fp, pc}
   1ab70:	mvn	r0, #0
   1ab74:	sub	sp, fp, #16
   1ab78:	pop	{r4, r5, r6, r7, fp, pc}
   1ab7c:	push	{fp, lr}
   1ab80:	mov	fp, sp
   1ab84:	bl	11910 <__errno_location@plt>
   1ab88:	mov	r1, #12
   1ab8c:	str	r1, [r0]
   1ab90:	mov	r0, #0
   1ab94:	pop	{fp, pc}
   1ab98:	b	1a540 <__assert_fail@plt+0x8ac8>
   1ab9c:	cmp	r1, #0
   1aba0:	orreq	r1, r1, #1
   1aba4:	b	1a570 <__assert_fail@plt+0x8af8>
   1aba8:	b	1a4ec <__assert_fail@plt+0x8a74>
   1abac:	clz	r3, r2
   1abb0:	lsr	ip, r3, #5
   1abb4:	clz	r3, r1
   1abb8:	lsr	r3, r3, #5
   1abbc:	orrs	r3, r3, ip
   1abc0:	movwne	r1, #1
   1abc4:	movwne	r2, #1
   1abc8:	b	1ba48 <__assert_fail@plt+0x9fd0>
   1abcc:	push	{fp, lr}
   1abd0:	mov	fp, sp
   1abd4:	mov	r0, #14
   1abd8:	bl	119f4 <nl_langinfo@plt>
   1abdc:	movw	r1, #50713	; 0xc619
   1abe0:	movt	r1, #1
   1abe4:	cmp	r0, #0
   1abe8:	movne	r1, r0
   1abec:	ldrb	r2, [r1]
   1abf0:	movw	r0, #298	; 0x12a
   1abf4:	movt	r0, #2
   1abf8:	cmp	r2, #0
   1abfc:	movne	r0, r1
   1ac00:	pop	{fp, pc}
   1ac04:	push	{r4, r5, r6, sl, fp, lr}
   1ac08:	add	fp, sp, #16
   1ac0c:	mov	r4, r0
   1ac10:	ldrb	r0, [r0, #16]
   1ac14:	cmp	r0, #0
   1ac18:	popne	{r4, r5, r6, sl, fp, pc}
   1ac1c:	ldrb	r0, [r4, #4]
   1ac20:	cmp	r0, #0
   1ac24:	bne	1ac70 <__assert_fail@plt+0x91f8>
   1ac28:	ldr	r0, [r4, #20]
   1ac2c:	ldrb	r0, [r0]
   1ac30:	bl	1c1c4 <__assert_fail@plt+0xa74c>
   1ac34:	cmp	r0, #0
   1ac38:	beq	1ac58 <__assert_fail@plt+0x91e0>
   1ac3c:	mov	r0, #1
   1ac40:	str	r0, [r4, #24]
   1ac44:	ldr	r1, [r4, #20]
   1ac48:	ldrb	r1, [r1]
   1ac4c:	strb	r0, [r4, #28]
   1ac50:	str	r1, [r4, #32]
   1ac54:	b	1ad18 <__assert_fail@plt+0x92a0>
   1ac58:	add	r0, r4, #8
   1ac5c:	bl	11730 <mbsinit@plt>
   1ac60:	cmp	r0, #0
   1ac64:	beq	1ad24 <__assert_fail@plt+0x92ac>
   1ac68:	mov	r0, #1
   1ac6c:	strb	r0, [r4, #4]
   1ac70:	ldr	r0, [r4]
   1ac74:	ldr	r1, [r4, #20]
   1ac78:	add	r6, r4, #32
   1ac7c:	add	r5, r4, #8
   1ac80:	sub	r2, r0, r1
   1ac84:	mov	r0, r6
   1ac88:	mov	r3, r5
   1ac8c:	bl	1adec <__assert_fail@plt+0x9374>
   1ac90:	str	r0, [r4, #24]
   1ac94:	cmn	r0, #2
   1ac98:	beq	1ad00 <__assert_fail@plt+0x9288>
   1ac9c:	cmp	r0, #0
   1aca0:	beq	1acbc <__assert_fail@plt+0x9244>
   1aca4:	cmn	r0, #1
   1aca8:	bne	1ace0 <__assert_fail@plt+0x9268>
   1acac:	mov	r0, #0
   1acb0:	strb	r0, [r4, #28]
   1acb4:	mov	r0, #1
   1acb8:	b	1ad14 <__assert_fail@plt+0x929c>
   1acbc:	mov	r0, #1
   1acc0:	str	r0, [r4, #24]
   1acc4:	ldr	r0, [r4, #20]
   1acc8:	ldrb	r0, [r0]
   1accc:	cmp	r0, #0
   1acd0:	bne	1ad44 <__assert_fail@plt+0x92cc>
   1acd4:	ldr	r0, [r6]
   1acd8:	cmp	r0, #0
   1acdc:	bne	1ad64 <__assert_fail@plt+0x92ec>
   1ace0:	mov	r0, #1
   1ace4:	strb	r0, [r4, #28]
   1ace8:	mov	r0, r5
   1acec:	bl	11730 <mbsinit@plt>
   1acf0:	cmp	r0, #0
   1acf4:	movne	r0, #0
   1acf8:	strbne	r0, [r4, #4]
   1acfc:	b	1ad18 <__assert_fail@plt+0x92a0>
   1ad00:	mov	r0, #0
   1ad04:	strb	r0, [r4, #28]
   1ad08:	ldr	r0, [r4]
   1ad0c:	ldr	r1, [r4, #20]
   1ad10:	sub	r0, r0, r1
   1ad14:	str	r0, [r4, #24]
   1ad18:	mov	r0, #1
   1ad1c:	strb	r0, [r4, #16]
   1ad20:	pop	{r4, r5, r6, sl, fp, pc}
   1ad24:	movw	r0, #64646	; 0xfc86
   1ad28:	movt	r0, #1
   1ad2c:	movw	r1, #64972	; 0xfdcc
   1ad30:	movt	r1, #1
   1ad34:	movw	r3, #64987	; 0xfddb
   1ad38:	movt	r3, #1
   1ad3c:	mov	r2, #135	; 0x87
   1ad40:	bl	11a78 <__assert_fail@plt>
   1ad44:	movw	r0, #64733	; 0xfcdd
   1ad48:	movt	r0, #1
   1ad4c:	movw	r1, #64972	; 0xfdcc
   1ad50:	movt	r1, #1
   1ad54:	movw	r3, #64987	; 0xfddb
   1ad58:	movt	r3, #1
   1ad5c:	mov	r2, #162	; 0xa2
   1ad60:	bl	11a78 <__assert_fail@plt>
   1ad64:	movw	r0, #64756	; 0xfcf4
   1ad68:	movt	r0, #1
   1ad6c:	movw	r1, #64972	; 0xfdcc
   1ad70:	movt	r1, #1
   1ad74:	movw	r3, #64987	; 0xfddb
   1ad78:	movt	r3, #1
   1ad7c:	mov	r2, #163	; 0xa3
   1ad80:	bl	11a78 <__assert_fail@plt>
   1ad84:	ldr	r2, [r0]
   1ad88:	ldr	r3, [r0, #20]
   1ad8c:	add	r3, r3, r1
   1ad90:	str	r3, [r0, #20]
   1ad94:	add	r1, r2, r1
   1ad98:	str	r1, [r0]
   1ad9c:	bx	lr
   1ada0:	ldr	r2, [r1]
   1ada4:	str	r2, [r0]
   1ada8:	ldrb	r3, [r1, #4]
   1adac:	strb	r3, [r0, #4]
   1adb0:	add	r2, r0, #8
   1adb4:	cmp	r3, #0
   1adb8:	beq	1adcc <__assert_fail@plt+0x9354>
   1adbc:	ldr	r3, [r1, #8]
   1adc0:	ldr	ip, [r1, #12]
   1adc4:	stm	r2, {r3, ip}
   1adc8:	b	1add8 <__assert_fail@plt+0x9360>
   1adcc:	mov	r3, #0
   1add0:	str	r3, [r2]
   1add4:	str	r3, [r2, #4]
   1add8:	ldrb	r2, [r1, #16]
   1addc:	strb	r2, [r0, #16]
   1ade0:	add	r0, r0, #20
   1ade4:	add	r1, r1, #20
   1ade8:	b	1c174 <__assert_fail@plt+0xa6fc>
   1adec:	push	{r4, r5, r6, r7, fp, lr}
   1adf0:	add	fp, sp, #16
   1adf4:	sub	sp, sp, #8
   1adf8:	mov	r7, r2
   1adfc:	mov	r4, r1
   1ae00:	add	r5, sp, #4
   1ae04:	cmp	r0, #0
   1ae08:	movne	r5, r0
   1ae0c:	mov	r0, r5
   1ae10:	bl	11838 <mbrtowc@plt>
   1ae14:	mov	r6, r0
   1ae18:	cmp	r7, #0
   1ae1c:	beq	1ae44 <__assert_fail@plt+0x93cc>
   1ae20:	cmn	r6, #2
   1ae24:	bcc	1ae44 <__assert_fail@plt+0x93cc>
   1ae28:	mov	r0, #0
   1ae2c:	bl	1c040 <__assert_fail@plt+0xa5c8>
   1ae30:	cmp	r0, #0
   1ae34:	bne	1ae44 <__assert_fail@plt+0x93cc>
   1ae38:	ldrb	r0, [r4]
   1ae3c:	str	r0, [r5]
   1ae40:	mov	r6, #1
   1ae44:	mov	r0, r6
   1ae48:	sub	sp, fp, #16
   1ae4c:	pop	{r4, r5, r6, r7, fp, pc}
   1ae50:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ae54:	add	fp, sp, #28
   1ae58:	sub	sp, sp, #300	; 0x12c
   1ae5c:	mov	r5, r1
   1ae60:	mov	r6, r0
   1ae64:	bl	11814 <__ctype_get_mb_cur_max@plt>
   1ae68:	cmp	r0, #2
   1ae6c:	bcc	1b200 <__assert_fail@plt+0x9788>
   1ae70:	mov	r4, #0
   1ae74:	str	r4, [fp, #-80]	; 0xffffffb0
   1ae78:	str	r4, [fp, #-84]	; 0xffffffac
   1ae7c:	strb	r4, [fp, #-76]	; 0xffffffb4
   1ae80:	strb	r4, [fp, #-88]	; 0xffffffa8
   1ae84:	str	r5, [fp, #-72]	; 0xffffffb8
   1ae88:	sub	r0, fp, #88	; 0x58
   1ae8c:	bl	1b86c <__assert_fail@plt+0x9df4>
   1ae90:	ldrb	r0, [fp, #-64]	; 0xffffffc0
   1ae94:	cmp	r0, #0
   1ae98:	beq	1aea8 <__assert_fail@plt+0x9430>
   1ae9c:	ldr	r0, [fp, #-60]	; 0xffffffc4
   1aea0:	cmp	r0, #0
   1aea4:	beq	1b300 <__assert_fail@plt+0x9888>
   1aea8:	str	r4, [fp, #-136]	; 0xffffff78
   1aeac:	str	r4, [fp, #-140]	; 0xffffff74
   1aeb0:	str	r5, [fp, #-128]	; 0xffffff80
   1aeb4:	strb	r4, [fp, #-132]	; 0xffffff7c
   1aeb8:	strb	r4, [fp, #-144]	; 0xffffff70
   1aebc:	str	r4, [sp, #136]	; 0x88
   1aec0:	str	r4, [sp, #132]	; 0x84
   1aec4:	str	r6, [sp, #144]	; 0x90
   1aec8:	strb	r4, [sp, #140]	; 0x8c
   1aecc:	strb	r4, [sp, #128]	; 0x80
   1aed0:	add	r7, sp, #128	; 0x80
   1aed4:	mov	r0, r7
   1aed8:	bl	1b86c <__assert_fail@plt+0x9df4>
   1aedc:	ldrb	r0, [sp, #152]	; 0x98
   1aee0:	cmp	r0, #0
   1aee4:	beq	1aef4 <__assert_fail@plt+0x947c>
   1aee8:	ldr	r0, [sp, #156]	; 0x9c
   1aeec:	cmp	r0, #0
   1aef0:	beq	1b30c <__assert_fail@plt+0x9894>
   1aef4:	add	r0, sp, #16
   1aef8:	add	r0, r0, #4
   1aefc:	str	r0, [sp, #4]
   1af00:	mov	r0, #1
   1af04:	str	r0, [sp, #8]
   1af08:	mov	r8, #0
   1af0c:	add	r0, r7, #16
   1af10:	str	r0, [sp]
   1af14:	mov	r0, #0
   1af18:	str	r0, [sp, #12]
   1af1c:	mov	sl, #0
   1af20:	mov	r9, #0
   1af24:	mov	r4, sl
   1af28:	add	r0, r9, r9, lsl #2
   1af2c:	cmp	sl, r0
   1af30:	bcc	1aff4 <__assert_fail@plt+0x957c>
   1af34:	ldr	r0, [sp, #8]
   1af38:	tst	r0, #1
   1af3c:	beq	1aff4 <__assert_fail@plt+0x957c>
   1af40:	cmp	r9, #10
   1af44:	bcc	1aff4 <__assert_fail@plt+0x957c>
   1af48:	mov	sl, r7
   1af4c:	ldr	r1, [sp, #12]
   1af50:	subs	r0, r4, r1
   1af54:	beq	1af9c <__assert_fail@plt+0x9524>
   1af58:	sub	r7, r1, r4
   1af5c:	b	1af7c <__assert_fail@plt+0x9504>
   1af60:	strb	r8, [fp, #-132]	; 0xffffff7c
   1af64:	ldr	r0, [fp, #-128]	; 0xffffff80
   1af68:	ldr	r1, [fp, #-124]	; 0xffffff84
   1af6c:	add	r0, r0, r1
   1af70:	str	r0, [fp, #-128]	; 0xffffff80
   1af74:	adds	r7, r7, #1
   1af78:	bcs	1af9c <__assert_fail@plt+0x9524>
   1af7c:	sub	r0, fp, #144	; 0x90
   1af80:	bl	1b86c <__assert_fail@plt+0x9df4>
   1af84:	ldrb	r0, [fp, #-120]	; 0xffffff88
   1af88:	cmp	r0, #0
   1af8c:	beq	1af60 <__assert_fail@plt+0x94e8>
   1af90:	ldr	r0, [fp, #-116]	; 0xffffff8c
   1af94:	cmp	r0, #0
   1af98:	bne	1af60 <__assert_fail@plt+0x94e8>
   1af9c:	sub	r0, fp, #144	; 0x90
   1afa0:	bl	1b86c <__assert_fail@plt+0x9df4>
   1afa4:	ldrb	r0, [fp, #-120]	; 0xffffff88
   1afa8:	cmp	r0, #0
   1afac:	beq	1afec <__assert_fail@plt+0x9574>
   1afb0:	ldr	r0, [fp, #-116]	; 0xffffff8c
   1afb4:	cmp	r0, #0
   1afb8:	str	r4, [sp, #12]
   1afbc:	mov	r7, sl
   1afc0:	bne	1aff4 <__assert_fail@plt+0x957c>
   1afc4:	mov	r0, r6
   1afc8:	mov	r1, r5
   1afcc:	add	r2, sp, #72	; 0x48
   1afd0:	bl	1b334 <__assert_fail@plt+0x98bc>
   1afd4:	mov	r1, #0
   1afd8:	str	r1, [sp, #8]
   1afdc:	cmp	r0, #0
   1afe0:	str	r4, [sp, #12]
   1afe4:	beq	1aff4 <__assert_fail@plt+0x957c>
   1afe8:	b	1b328 <__assert_fail@plt+0x98b0>
   1afec:	str	r4, [sp, #12]
   1aff0:	mov	r7, sl
   1aff4:	add	sl, r4, #1
   1aff8:	ldrb	r0, [sp, #152]	; 0x98
   1affc:	cmp	r0, #0
   1b000:	ldrbne	r0, [fp, #-64]	; 0xffffffc0
   1b004:	cmpne	r0, #0
   1b008:	bne	1b034 <__assert_fail@plt+0x95bc>
   1b00c:	ldr	r2, [sp, #148]	; 0x94
   1b010:	ldr	r0, [fp, #-68]	; 0xffffffbc
   1b014:	cmp	r2, r0
   1b018:	bne	1b1c0 <__assert_fail@plt+0x9748>
   1b01c:	ldr	r1, [fp, #-72]	; 0xffffffb8
   1b020:	ldr	r0, [sp, #144]	; 0x90
   1b024:	bl	118d4 <bcmp@plt>
   1b028:	cmp	r0, #0
   1b02c:	bne	1b1c0 <__assert_fail@plt+0x9748>
   1b030:	b	1b044 <__assert_fail@plt+0x95cc>
   1b034:	ldr	r0, [fp, #-60]	; 0xffffffc4
   1b038:	ldr	r1, [sp, #156]	; 0x9c
   1b03c:	cmp	r1, r0
   1b040:	bne	1b1c0 <__assert_fail@plt+0x9748>
   1b044:	mov	r0, r7
   1b048:	mov	r1, #48	; 0x30
   1b04c:	vld1.64	{d16-d17}, [r0], r1
   1b050:	ldr	r1, [sp]
   1b054:	vld1.64	{d18-d19}, [r1]
   1b058:	add	r3, sp, #72	; 0x48
   1b05c:	add	r1, r3, #16
   1b060:	add	r2, r7, #32
   1b064:	vld1.64	{d20-d21}, [r2]
   1b068:	vldr	d22, [r0]
   1b06c:	vst1.64	{d18-d19}, [r1]
   1b070:	add	r0, r3, #32
   1b074:	vst1.64	{d20-d21}, [r0]
   1b078:	mov	r0, r3
   1b07c:	mov	r1, #12
   1b080:	vst1.64	{d16-d17}, [r0], r1
   1b084:	strb	r8, [r0]
   1b088:	str	r5, [sp, #32]
   1b08c:	strb	r8, [sp, #16]
   1b090:	vstr	d22, [sp, #120]	; 0x78
   1b094:	ldr	r0, [sp, #88]	; 0x58
   1b098:	ldr	r1, [sp, #92]	; 0x5c
   1b09c:	add	r0, r0, r1
   1b0a0:	str	r0, [sp, #88]	; 0x58
   1b0a4:	ldr	r0, [sp, #4]
   1b0a8:	str	r8, [r0]
   1b0ac:	str	r8, [r0, #4]
   1b0b0:	strb	r8, [sp, #28]
   1b0b4:	add	r0, sp, #16
   1b0b8:	bl	1b86c <__assert_fail@plt+0x9df4>
   1b0bc:	ldrb	r0, [sp, #40]	; 0x28
   1b0c0:	cmp	r0, #0
   1b0c4:	beq	1b0d4 <__assert_fail@plt+0x965c>
   1b0c8:	ldr	r0, [sp, #44]	; 0x2c
   1b0cc:	cmp	r0, #0
   1b0d0:	beq	1b330 <__assert_fail@plt+0x98b8>
   1b0d4:	strb	r8, [sp, #28]
   1b0d8:	ldr	r0, [sp, #32]
   1b0dc:	ldr	r1, [sp, #36]	; 0x24
   1b0e0:	add	r0, r0, r1
   1b0e4:	str	r0, [sp, #32]
   1b0e8:	add	r0, sp, #16
   1b0ec:	bl	1b86c <__assert_fail@plt+0x9df4>
   1b0f0:	ldrb	r0, [sp, #40]	; 0x28
   1b0f4:	cmp	r0, #0
   1b0f8:	beq	1b108 <__assert_fail@plt+0x9690>
   1b0fc:	ldr	r0, [sp, #44]	; 0x2c
   1b100:	cmp	r0, #0
   1b104:	beq	1b318 <__assert_fail@plt+0x98a0>
   1b108:	add	sl, r4, #2
   1b10c:	add	r0, sp, #72	; 0x48
   1b110:	bl	1b86c <__assert_fail@plt+0x9df4>
   1b114:	ldr	r0, [sp, #100]	; 0x64
   1b118:	ldrb	r1, [sp, #96]	; 0x60
   1b11c:	cmp	r0, #0
   1b120:	bne	1b12c <__assert_fail@plt+0x96b4>
   1b124:	cmp	r1, #0
   1b128:	bne	1b308 <__assert_fail@plt+0x9890>
   1b12c:	cmp	r1, #0
   1b130:	ldrbne	r1, [sp, #40]	; 0x28
   1b134:	cmpne	r1, #0
   1b138:	bne	1b164 <__assert_fail@plt+0x96ec>
   1b13c:	ldr	r2, [sp, #92]	; 0x5c
   1b140:	ldr	r0, [sp, #36]	; 0x24
   1b144:	cmp	r2, r0
   1b148:	bne	1b1c0 <__assert_fail@plt+0x9748>
   1b14c:	ldr	r1, [sp, #32]
   1b150:	ldr	r0, [sp, #88]	; 0x58
   1b154:	bl	118d4 <bcmp@plt>
   1b158:	cmp	r0, #0
   1b15c:	beq	1b170 <__assert_fail@plt+0x96f8>
   1b160:	b	1b1c0 <__assert_fail@plt+0x9748>
   1b164:	ldr	r1, [sp, #44]	; 0x2c
   1b168:	cmp	r0, r1
   1b16c:	bne	1b1c0 <__assert_fail@plt+0x9748>
   1b170:	strb	r8, [sp, #84]	; 0x54
   1b174:	strb	r8, [sp, #28]
   1b178:	ldr	r0, [sp, #88]	; 0x58
   1b17c:	ldr	r1, [sp, #92]	; 0x5c
   1b180:	add	r0, r0, r1
   1b184:	str	r0, [sp, #88]	; 0x58
   1b188:	ldr	r0, [sp, #32]
   1b18c:	ldr	r1, [sp, #36]	; 0x24
   1b190:	add	r0, r0, r1
   1b194:	str	r0, [sp, #32]
   1b198:	add	r0, sp, #16
   1b19c:	bl	1b86c <__assert_fail@plt+0x9df4>
   1b1a0:	add	sl, sl, #1
   1b1a4:	ldrb	r0, [sp, #40]	; 0x28
   1b1a8:	cmp	r0, #0
   1b1ac:	beq	1b10c <__assert_fail@plt+0x9694>
   1b1b0:	ldr	r0, [sp, #44]	; 0x2c
   1b1b4:	cmp	r0, #0
   1b1b8:	bne	1b10c <__assert_fail@plt+0x9694>
   1b1bc:	b	1b318 <__assert_fail@plt+0x98a0>
   1b1c0:	add	r9, r9, #1
   1b1c4:	mov	r4, #0
   1b1c8:	strb	r4, [sp, #140]	; 0x8c
   1b1cc:	ldr	r0, [sp, #144]	; 0x90
   1b1d0:	ldr	r1, [sp, #148]	; 0x94
   1b1d4:	add	r0, r0, r1
   1b1d8:	str	r0, [sp, #144]	; 0x90
   1b1dc:	mov	r0, r7
   1b1e0:	bl	1b86c <__assert_fail@plt+0x9df4>
   1b1e4:	ldrb	r0, [sp, #152]	; 0x98
   1b1e8:	cmp	r0, #0
   1b1ec:	beq	1af24 <__assert_fail@plt+0x94ac>
   1b1f0:	ldr	r0, [sp, #156]	; 0x9c
   1b1f4:	cmp	r0, #0
   1b1f8:	bne	1af24 <__assert_fail@plt+0x94ac>
   1b1fc:	b	1b30c <__assert_fail@plt+0x9894>
   1b200:	ldrb	r9, [r5]
   1b204:	cmp	r9, #0
   1b208:	beq	1b300 <__assert_fail@plt+0x9888>
   1b20c:	ldrb	r0, [r6]
   1b210:	cmp	r0, #0
   1b214:	beq	1b308 <__assert_fail@plt+0x9890>
   1b218:	mov	r3, #1
   1b21c:	mov	ip, #0
   1b220:	mov	sl, r5
   1b224:	mov	r7, #0
   1b228:	mov	r8, #0
   1b22c:	add	r0, r8, r8, lsl #2
   1b230:	cmp	r7, r0
   1b234:	bcc	1b2a8 <__assert_fail@plt+0x9830>
   1b238:	tst	r3, #1
   1b23c:	beq	1b2a8 <__assert_fail@plt+0x9830>
   1b240:	cmp	r8, #10
   1b244:	bcc	1b2a8 <__assert_fail@plt+0x9830>
   1b248:	cmp	sl, #0
   1b24c:	beq	1b274 <__assert_fail@plt+0x97fc>
   1b250:	sub	r1, r7, ip
   1b254:	mov	r0, sl
   1b258:	mov	r4, r3
   1b25c:	bl	119a0 <strnlen@plt>
   1b260:	mov	r3, r4
   1b264:	ldrb	r0, [sl, r0]!
   1b268:	cmp	r0, #0
   1b26c:	mov	ip, r7
   1b270:	bne	1b2a8 <__assert_fail@plt+0x9830>
   1b274:	mov	r0, r5
   1b278:	mov	r4, ip
   1b27c:	bl	118e0 <strlen@plt>
   1b280:	mov	r2, r0
   1b284:	mov	r0, r6
   1b288:	mov	r1, r5
   1b28c:	sub	r3, fp, #88	; 0x58
   1b290:	bl	1b710 <__assert_fail@plt+0x9c98>
   1b294:	mov	ip, r4
   1b298:	mov	r3, #0
   1b29c:	cmp	r0, #0
   1b2a0:	mov	sl, #0
   1b2a4:	bne	1b320 <__assert_fail@plt+0x98a8>
   1b2a8:	ldrb	r0, [r6]
   1b2ac:	cmp	r0, r9
   1b2b0:	bne	1b2e4 <__assert_fail@plt+0x986c>
   1b2b4:	mov	r0, #1
   1b2b8:	ldrb	r1, [r5, r0]
   1b2bc:	cmp	r1, #0
   1b2c0:	beq	1b300 <__assert_fail@plt+0x9888>
   1b2c4:	ldrb	r2, [r6, r0]
   1b2c8:	cmp	r2, #0
   1b2cc:	beq	1b308 <__assert_fail@plt+0x9890>
   1b2d0:	add	r0, r0, #1
   1b2d4:	cmp	r2, r1
   1b2d8:	beq	1b2b8 <__assert_fail@plt+0x9840>
   1b2dc:	add	r7, r7, r0
   1b2e0:	b	1b2e8 <__assert_fail@plt+0x9870>
   1b2e4:	add	r7, r7, #1
   1b2e8:	add	r8, r8, #1
   1b2ec:	ldrb	r0, [r6, #1]!
   1b2f0:	mov	r4, #0
   1b2f4:	cmp	r0, #0
   1b2f8:	bne	1b22c <__assert_fail@plt+0x97b4>
   1b2fc:	b	1b30c <__assert_fail@plt+0x9894>
   1b300:	mov	r4, r6
   1b304:	b	1b30c <__assert_fail@plt+0x9894>
   1b308:	mov	r4, #0
   1b30c:	mov	r0, r4
   1b310:	sub	sp, fp, #28
   1b314:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b318:	ldr	r4, [sp, #144]	; 0x90
   1b31c:	b	1b30c <__assert_fail@plt+0x9894>
   1b320:	ldr	r4, [fp, #-88]	; 0xffffffa8
   1b324:	b	1b30c <__assert_fail@plt+0x9894>
   1b328:	ldr	r4, [sp, #72]	; 0x48
   1b32c:	b	1b30c <__assert_fail@plt+0x9894>
   1b330:	bl	11a60 <abort@plt>
   1b334:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b338:	add	fp, sp, #28
   1b33c:	sub	sp, sp, #132	; 0x84
   1b340:	mov	r5, r2
   1b344:	mov	r4, r1
   1b348:	mov	r8, r0
   1b34c:	mov	r0, r1
   1b350:	bl	1c1ec <__assert_fail@plt+0xa774>
   1b354:	mov	r6, r0
   1b358:	mov	r7, #0
   1b35c:	movw	r0, #47662	; 0xba2e
   1b360:	movt	r0, #744	; 0x2e8
   1b364:	cmp	r6, r0
   1b368:	bhi	1b700 <__assert_fail@plt+0x9c88>
   1b36c:	mov	r0, #44	; 0x2c
   1b370:	mul	r0, r6, r0
   1b374:	cmp	r0, #4016	; 0xfb0
   1b378:	bhi	1b3a0 <__assert_fail@plt+0x9928>
   1b37c:	add	r0, r0, #22
   1b380:	bic	r0, r0, #7
   1b384:	sub	r0, sp, r0
   1b388:	add	r1, r0, #15
   1b38c:	bic	sl, r1, #15
   1b390:	mov	sp, r0
   1b394:	cmp	sl, #0
   1b398:	bne	1b3b0 <__assert_fail@plt+0x9938>
   1b39c:	b	1b700 <__assert_fail@plt+0x9c88>
   1b3a0:	bl	1c0ac <__assert_fail@plt+0xa634>
   1b3a4:	mov	sl, r0
   1b3a8:	cmp	sl, #0
   1b3ac:	beq	1b700 <__assert_fail@plt+0x9c88>
   1b3b0:	str	r5, [fp, #-156]	; 0xffffff64
   1b3b4:	mov	r9, #0
   1b3b8:	str	r9, [fp, #-80]	; 0xffffffb0
   1b3bc:	str	r9, [fp, #-84]	; 0xffffffac
   1b3c0:	strb	r9, [fp, #-76]	; 0xffffffb4
   1b3c4:	strb	r9, [fp, #-88]	; 0xffffffa8
   1b3c8:	str	r4, [fp, #-72]	; 0xffffffb8
   1b3cc:	sub	r4, fp, #88	; 0x58
   1b3d0:	mov	r0, r4
   1b3d4:	bl	1b86c <__assert_fail@plt+0x9df4>
   1b3d8:	add	r0, r6, r6, lsl #2
   1b3dc:	add	r0, sl, r0, lsl #3
   1b3e0:	str	r0, [fp, #-148]	; 0xffffff6c
   1b3e4:	ldrb	r0, [fp, #-64]	; 0xffffffc0
   1b3e8:	cmp	r0, #0
   1b3ec:	beq	1b3fc <__assert_fail@plt+0x9984>
   1b3f0:	ldr	r0, [fp, #-60]	; 0xffffffc4
   1b3f4:	cmp	r0, #0
   1b3f8:	beq	1b44c <__assert_fail@plt+0x99d4>
   1b3fc:	add	r4, r4, #16
   1b400:	sub	r7, fp, #88	; 0x58
   1b404:	mov	r5, sl
   1b408:	mov	r0, r5
   1b40c:	mov	r1, r4
   1b410:	bl	1c174 <__assert_fail@plt+0xa6fc>
   1b414:	strb	r9, [fp, #-76]	; 0xffffffb4
   1b418:	ldr	r0, [fp, #-72]	; 0xffffffb8
   1b41c:	ldr	r1, [fp, #-68]	; 0xffffffbc
   1b420:	add	r0, r0, r1
   1b424:	str	r0, [fp, #-72]	; 0xffffffb8
   1b428:	mov	r0, r7
   1b42c:	bl	1b86c <__assert_fail@plt+0x9df4>
   1b430:	add	r5, r5, #40	; 0x28
   1b434:	ldr	r0, [fp, #-60]	; 0xffffffc4
   1b438:	ldrb	r1, [fp, #-64]	; 0xffffffc0
   1b43c:	cmp	r1, #0
   1b440:	beq	1b408 <__assert_fail@plt+0x9990>
   1b444:	cmp	r0, #0
   1b448:	bne	1b408 <__assert_fail@plt+0x9990>
   1b44c:	str	r8, [fp, #-160]	; 0xffffff60
   1b450:	mov	r0, #1
   1b454:	ldr	r3, [fp, #-148]	; 0xffffff6c
   1b458:	str	r0, [r3, #4]
   1b45c:	str	r6, [fp, #-152]	; 0xffffff68
   1b460:	cmp	r6, #3
   1b464:	bcc	1b530 <__assert_fail@plt+0x9ab8>
   1b468:	mov	r4, #2
   1b46c:	mov	r5, #0
   1b470:	b	1b490 <__assert_fail@plt+0x9a18>
   1b474:	mov	r5, #0
   1b478:	mov	r0, r4
   1b47c:	str	r0, [r3, r4, lsl #2]
   1b480:	add	r4, r4, #1
   1b484:	ldr	r0, [fp, #-152]	; 0xffffff68
   1b488:	cmp	r4, r0
   1b48c:	beq	1b530 <__assert_fail@plt+0x9ab8>
   1b490:	add	r0, r4, r4, lsl #2
   1b494:	add	r0, sl, r0, lsl #3
   1b498:	sub	r9, r0, #40	; 0x28
   1b49c:	sub	r6, r0, #36	; 0x24
   1b4a0:	sub	r7, r0, #28
   1b4a4:	ldrb	r8, [r0, #-32]	; 0xffffffe0
   1b4a8:	cmp	r8, #0
   1b4ac:	beq	1b4d8 <__assert_fail@plt+0x9a60>
   1b4b0:	add	r0, r5, r5, lsl #2
   1b4b4:	add	r0, sl, r0, lsl #3
   1b4b8:	ldrb	r1, [r0, #8]
   1b4bc:	cmp	r1, #0
   1b4c0:	beq	1b4d8 <__assert_fail@plt+0x9a60>
   1b4c4:	ldr	r0, [r0, #12]
   1b4c8:	ldr	r1, [r7]
   1b4cc:	cmp	r1, r0
   1b4d0:	bne	1b508 <__assert_fail@plt+0x9a90>
   1b4d4:	b	1b524 <__assert_fail@plt+0x9aac>
   1b4d8:	add	r0, r5, r5, lsl #2
   1b4dc:	add	r1, sl, r0, lsl #3
   1b4e0:	ldr	r1, [r1, #4]
   1b4e4:	ldr	r2, [r6]
   1b4e8:	cmp	r2, r1
   1b4ec:	bne	1b508 <__assert_fail@plt+0x9a90>
   1b4f0:	ldr	r1, [sl, r0, lsl #3]
   1b4f4:	ldr	r0, [r9]
   1b4f8:	bl	118d4 <bcmp@plt>
   1b4fc:	ldr	r3, [fp, #-148]	; 0xffffff6c
   1b500:	cmp	r0, #0
   1b504:	beq	1b524 <__assert_fail@plt+0x9aac>
   1b508:	cmp	r5, #0
   1b50c:	beq	1b474 <__assert_fail@plt+0x99fc>
   1b510:	ldr	r0, [r3, r5, lsl #2]
   1b514:	sub	r5, r5, r0
   1b518:	cmp	r8, #0
   1b51c:	bne	1b4b0 <__assert_fail@plt+0x9a38>
   1b520:	b	1b4d8 <__assert_fail@plt+0x9a60>
   1b524:	add	r5, r5, #1
   1b528:	sub	r0, r4, r5
   1b52c:	b	1b47c <__assert_fail@plt+0x9a04>
   1b530:	mov	r5, #0
   1b534:	ldr	r8, [fp, #-156]	; 0xffffff64
   1b538:	str	r5, [r8]
   1b53c:	str	r5, [fp, #-80]	; 0xffffffb0
   1b540:	str	r5, [fp, #-84]	; 0xffffffac
   1b544:	str	r5, [fp, #-136]	; 0xffffff78
   1b548:	str	r5, [fp, #-140]	; 0xffffff74
   1b54c:	strb	r5, [fp, #-76]	; 0xffffffb4
   1b550:	strb	r5, [fp, #-88]	; 0xffffffa8
   1b554:	ldr	r0, [fp, #-160]	; 0xffffff60
   1b558:	str	r0, [fp, #-72]	; 0xffffffb8
   1b55c:	str	r0, [fp, #-128]	; 0xffffff80
   1b560:	strb	r5, [fp, #-132]	; 0xffffff7c
   1b564:	strb	r5, [fp, #-144]	; 0xffffff70
   1b568:	sub	r0, fp, #144	; 0x90
   1b56c:	bl	1b86c <__assert_fail@plt+0x9df4>
   1b570:	ldrb	r1, [fp, #-120]	; 0xffffff88
   1b574:	ldr	r0, [fp, #-116]	; 0xffffff8c
   1b578:	cmp	r0, #0
   1b57c:	bne	1b588 <__assert_fail@plt+0x9b10>
   1b580:	cmp	r1, #0
   1b584:	bne	1b6f4 <__assert_fail@plt+0x9c7c>
   1b588:	clz	r1, r1
   1b58c:	lsr	r1, r1, #5
   1b590:	sub	r9, fp, #144	; 0x90
   1b594:	sub	r4, fp, #88	; 0x58
   1b598:	mov	r7, #0
   1b59c:	add	r3, r7, r7, lsl #2
   1b5a0:	add	r2, sl, r3, lsl #3
   1b5a4:	tst	r1, #1
   1b5a8:	bne	1b5c8 <__assert_fail@plt+0x9b50>
   1b5ac:	ldrb	r1, [r2, #8]
   1b5b0:	cmp	r1, #0
   1b5b4:	beq	1b5c8 <__assert_fail@plt+0x9b50>
   1b5b8:	ldr	r1, [r2, #12]
   1b5bc:	cmp	r1, r0
   1b5c0:	bne	1b5ec <__assert_fail@plt+0x9b74>
   1b5c4:	b	1b64c <__assert_fail@plt+0x9bd4>
   1b5c8:	ldr	r2, [r2, #4]
   1b5cc:	ldr	r0, [fp, #-124]	; 0xffffff84
   1b5d0:	cmp	r2, r0
   1b5d4:	bne	1b5ec <__assert_fail@plt+0x9b74>
   1b5d8:	ldr	r0, [sl, r3, lsl #3]
   1b5dc:	ldr	r1, [fp, #-128]	; 0xffffff80
   1b5e0:	bl	118d4 <bcmp@plt>
   1b5e4:	cmp	r0, #0
   1b5e8:	beq	1b64c <__assert_fail@plt+0x9bd4>
   1b5ec:	cmp	r7, #0
   1b5f0:	beq	1b674 <__assert_fail@plt+0x9bfc>
   1b5f4:	ldr	r0, [fp, #-148]	; 0xffffff6c
   1b5f8:	ldr	r6, [r0, r7, lsl #2]
   1b5fc:	sub	r7, r7, r6
   1b600:	cmp	r6, #0
   1b604:	bne	1b628 <__assert_fail@plt+0x9bb0>
   1b608:	b	1b6c0 <__assert_fail@plt+0x9c48>
   1b60c:	strb	r5, [fp, #-76]	; 0xffffffb4
   1b610:	ldr	r0, [fp, #-72]	; 0xffffffb8
   1b614:	ldr	r1, [fp, #-68]	; 0xffffffbc
   1b618:	add	r0, r0, r1
   1b61c:	str	r0, [fp, #-72]	; 0xffffffb8
   1b620:	subs	r6, r6, #1
   1b624:	beq	1b6c0 <__assert_fail@plt+0x9c48>
   1b628:	mov	r0, r4
   1b62c:	bl	1b86c <__assert_fail@plt+0x9df4>
   1b630:	ldrb	r0, [fp, #-64]	; 0xffffffc0
   1b634:	cmp	r0, #0
   1b638:	beq	1b60c <__assert_fail@plt+0x9b94>
   1b63c:	ldr	r0, [fp, #-60]	; 0xffffffc4
   1b640:	cmp	r0, #0
   1b644:	bne	1b60c <__assert_fail@plt+0x9b94>
   1b648:	b	1b70c <__assert_fail@plt+0x9c94>
   1b64c:	strb	r5, [fp, #-132]	; 0xffffff7c
   1b650:	ldr	r0, [fp, #-128]	; 0xffffff80
   1b654:	ldr	r1, [fp, #-124]	; 0xffffff84
   1b658:	add	r0, r0, r1
   1b65c:	str	r0, [fp, #-128]	; 0xffffff80
   1b660:	add	r7, r7, #1
   1b664:	ldr	r0, [fp, #-152]	; 0xffffff68
   1b668:	cmp	r7, r0
   1b66c:	bne	1b6c0 <__assert_fail@plt+0x9c48>
   1b670:	b	1b6ec <__assert_fail@plt+0x9c74>
   1b674:	mov	r0, r4
   1b678:	bl	1b86c <__assert_fail@plt+0x9df4>
   1b67c:	ldrb	r0, [fp, #-64]	; 0xffffffc0
   1b680:	cmp	r0, #0
   1b684:	beq	1b694 <__assert_fail@plt+0x9c1c>
   1b688:	ldr	r0, [fp, #-60]	; 0xffffffc4
   1b68c:	cmp	r0, #0
   1b690:	beq	1b70c <__assert_fail@plt+0x9c94>
   1b694:	mov	r7, #0
   1b698:	strb	r7, [fp, #-76]	; 0xffffffb4
   1b69c:	strb	r7, [fp, #-132]	; 0xffffff7c
   1b6a0:	ldr	r0, [fp, #-72]	; 0xffffffb8
   1b6a4:	ldr	r1, [fp, #-68]	; 0xffffffbc
   1b6a8:	add	r0, r0, r1
   1b6ac:	str	r0, [fp, #-72]	; 0xffffffb8
   1b6b0:	ldr	r0, [fp, #-128]	; 0xffffff80
   1b6b4:	ldr	r1, [fp, #-124]	; 0xffffff84
   1b6b8:	add	r0, r0, r1
   1b6bc:	str	r0, [fp, #-128]	; 0xffffff80
   1b6c0:	mov	r0, r9
   1b6c4:	bl	1b86c <__assert_fail@plt+0x9df4>
   1b6c8:	ldrb	r2, [fp, #-120]	; 0xffffff88
   1b6cc:	clz	r0, r2
   1b6d0:	lsr	r1, r0, #5
   1b6d4:	ldr	r0, [fp, #-116]	; 0xffffff8c
   1b6d8:	cmp	r0, #0
   1b6dc:	bne	1b59c <__assert_fail@plt+0x9b24>
   1b6e0:	cmp	r2, #0
   1b6e4:	beq	1b59c <__assert_fail@plt+0x9b24>
   1b6e8:	b	1b6f4 <__assert_fail@plt+0x9c7c>
   1b6ec:	ldr	r0, [fp, #-72]	; 0xffffffb8
   1b6f0:	str	r0, [r8]
   1b6f4:	mov	r0, sl
   1b6f8:	bl	1c11c <__assert_fail@plt+0xa6a4>
   1b6fc:	mov	r7, #1
   1b700:	mov	r0, r7
   1b704:	sub	sp, fp, #28
   1b708:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b70c:	bl	11a60 <abort@plt>
   1b710:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1b714:	add	fp, sp, #24
   1b718:	mov	r4, #0
   1b71c:	cmn	r2, #-536870911	; 0xe0000001
   1b720:	bhi	1b860 <__assert_fail@plt+0x9de8>
   1b724:	mov	r8, r3
   1b728:	mov	r5, r2
   1b72c:	mov	r6, r1
   1b730:	mov	r7, r0
   1b734:	lsl	r0, r2, #2
   1b738:	cmp	r0, #4016	; 0xfb0
   1b73c:	bhi	1b764 <__assert_fail@plt+0x9cec>
   1b740:	add	r0, r0, #22
   1b744:	bic	r0, r0, #7
   1b748:	sub	r1, sp, r0
   1b74c:	add	r0, r1, #15
   1b750:	bic	r0, r0, #15
   1b754:	mov	sp, r1
   1b758:	cmp	r0, #0
   1b75c:	bne	1b770 <__assert_fail@plt+0x9cf8>
   1b760:	b	1b860 <__assert_fail@plt+0x9de8>
   1b764:	bl	1c0ac <__assert_fail@plt+0xa634>
   1b768:	cmp	r0, #0
   1b76c:	beq	1b860 <__assert_fail@plt+0x9de8>
   1b770:	mov	r1, #1
   1b774:	str	r1, [r0, #4]
   1b778:	cmp	r5, #3
   1b77c:	bcc	1b7e4 <__assert_fail@plt+0x9d6c>
   1b780:	mov	r1, #2
   1b784:	mov	r2, #0
   1b788:	b	1b7a4 <__assert_fail@plt+0x9d2c>
   1b78c:	add	r2, r2, #1
   1b790:	sub	r3, r1, r2
   1b794:	str	r3, [r0, r1, lsl #2]
   1b798:	add	r1, r1, #1
   1b79c:	cmp	r1, r5
   1b7a0:	beq	1b7e4 <__assert_fail@plt+0x9d6c>
   1b7a4:	ldrb	r4, [r6, r2]
   1b7a8:	add	r3, r1, r6
   1b7ac:	ldrb	r3, [r3, #-1]
   1b7b0:	cmp	r3, r4
   1b7b4:	beq	1b78c <__assert_fail@plt+0x9d14>
   1b7b8:	cmp	r2, #0
   1b7bc:	beq	1b7d8 <__assert_fail@plt+0x9d60>
   1b7c0:	ldr	r4, [r0, r2, lsl #2]
   1b7c4:	sub	r2, r2, r4
   1b7c8:	ldrb	r4, [r6, r2]
   1b7cc:	cmp	r3, r4
   1b7d0:	bne	1b7b8 <__assert_fail@plt+0x9d40>
   1b7d4:	b	1b78c <__assert_fail@plt+0x9d14>
   1b7d8:	mov	r2, #0
   1b7dc:	mov	r3, r1
   1b7e0:	b	1b794 <__assert_fail@plt+0x9d1c>
   1b7e4:	mov	r1, #0
   1b7e8:	str	r1, [r8]
   1b7ec:	ldrb	r3, [r7]
   1b7f0:	cmp	r3, #0
   1b7f4:	beq	1b858 <__assert_fail@plt+0x9de0>
   1b7f8:	mov	r2, r7
   1b7fc:	b	1b818 <__assert_fail@plt+0x9da0>
   1b800:	add	r7, r7, #1
   1b804:	add	r2, r2, #1
   1b808:	mov	r1, #0
   1b80c:	ldrb	r3, [r7]
   1b810:	cmp	r3, #0
   1b814:	beq	1b858 <__assert_fail@plt+0x9de0>
   1b818:	ldrb	r4, [r6, r1]
   1b81c:	uxtb	r3, r3
   1b820:	cmp	r4, r3
   1b824:	bne	1b83c <__assert_fail@plt+0x9dc4>
   1b828:	add	r1, r1, #1
   1b82c:	cmp	r1, r5
   1b830:	beq	1b854 <__assert_fail@plt+0x9ddc>
   1b834:	add	r7, r7, #1
   1b838:	b	1b80c <__assert_fail@plt+0x9d94>
   1b83c:	cmp	r1, #0
   1b840:	beq	1b800 <__assert_fail@plt+0x9d88>
   1b844:	ldr	r3, [r0, r1, lsl #2]
   1b848:	sub	r1, r1, r3
   1b84c:	add	r2, r2, r3
   1b850:	b	1b80c <__assert_fail@plt+0x9d94>
   1b854:	str	r2, [r8]
   1b858:	bl	1c11c <__assert_fail@plt+0xa6a4>
   1b85c:	mov	r4, #1
   1b860:	mov	r0, r4
   1b864:	sub	sp, fp, #24
   1b868:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1b86c:	push	{r4, r5, r6, r7, fp, lr}
   1b870:	add	fp, sp, #16
   1b874:	mov	r4, r0
   1b878:	ldrb	r0, [r0, #12]
   1b87c:	cmp	r0, #0
   1b880:	popne	{r4, r5, r6, r7, fp, pc}
   1b884:	ldrb	r0, [r4]
   1b888:	cmp	r0, #0
   1b88c:	bne	1b8d8 <__assert_fail@plt+0x9e60>
   1b890:	ldr	r0, [r4, #16]
   1b894:	ldrb	r0, [r0]
   1b898:	bl	1c1c4 <__assert_fail@plt+0xa74c>
   1b89c:	cmp	r0, #0
   1b8a0:	beq	1b8c0 <__assert_fail@plt+0x9e48>
   1b8a4:	mov	r0, #1
   1b8a8:	str	r0, [r4, #20]
   1b8ac:	ldr	r1, [r4, #16]
   1b8b0:	ldrb	r1, [r1]
   1b8b4:	strb	r0, [r4, #24]
   1b8b8:	str	r1, [r4, #28]
   1b8bc:	b	1b98c <__assert_fail@plt+0x9f14>
   1b8c0:	add	r0, r4, #4
   1b8c4:	bl	11730 <mbsinit@plt>
   1b8c8:	cmp	r0, #0
   1b8cc:	beq	1b998 <__assert_fail@plt+0x9f20>
   1b8d0:	mov	r0, #1
   1b8d4:	strb	r0, [r4]
   1b8d8:	ldr	r7, [r4, #16]
   1b8dc:	bl	11814 <__ctype_get_mb_cur_max@plt>
   1b8e0:	mov	r1, r0
   1b8e4:	mov	r0, r7
   1b8e8:	bl	1c010 <__assert_fail@plt+0xa598>
   1b8ec:	mov	r2, r0
   1b8f0:	add	r6, r4, #28
   1b8f4:	add	r5, r4, #4
   1b8f8:	mov	r0, r6
   1b8fc:	mov	r1, r7
   1b900:	mov	r3, r5
   1b904:	bl	1adec <__assert_fail@plt+0x9374>
   1b908:	str	r0, [r4, #20]
   1b90c:	cmn	r0, #2
   1b910:	beq	1b978 <__assert_fail@plt+0x9f00>
   1b914:	cmp	r0, #0
   1b918:	beq	1b934 <__assert_fail@plt+0x9ebc>
   1b91c:	cmn	r0, #1
   1b920:	bne	1b958 <__assert_fail@plt+0x9ee0>
   1b924:	mov	r0, #0
   1b928:	strb	r0, [r4, #24]
   1b92c:	mov	r0, #1
   1b930:	b	1b988 <__assert_fail@plt+0x9f10>
   1b934:	mov	r0, #1
   1b938:	str	r0, [r4, #20]
   1b93c:	ldr	r0, [r4, #16]
   1b940:	ldrb	r0, [r0]
   1b944:	cmp	r0, #0
   1b948:	bne	1b9b8 <__assert_fail@plt+0x9f40>
   1b94c:	ldr	r0, [r6]
   1b950:	cmp	r0, #0
   1b954:	bne	1b9d8 <__assert_fail@plt+0x9f60>
   1b958:	mov	r0, #1
   1b95c:	strb	r0, [r4, #24]
   1b960:	mov	r0, r5
   1b964:	bl	11730 <mbsinit@plt>
   1b968:	cmp	r0, #0
   1b96c:	movne	r0, #0
   1b970:	strbne	r0, [r4]
   1b974:	b	1b98c <__assert_fail@plt+0x9f14>
   1b978:	ldr	r0, [r4, #16]
   1b97c:	bl	118e0 <strlen@plt>
   1b980:	mov	r1, #0
   1b984:	strb	r1, [r4, #24]
   1b988:	str	r0, [r4, #20]
   1b98c:	mov	r0, #1
   1b990:	strb	r0, [r4, #12]
   1b994:	pop	{r4, r5, r6, r7, fp, pc}
   1b998:	movw	r0, #64646	; 0xfc86
   1b99c:	movt	r0, #1
   1b9a0:	movw	r1, #64669	; 0xfc9d
   1b9a4:	movt	r1, #1
   1b9a8:	movw	r3, #64685	; 0xfcad
   1b9ac:	movt	r3, #1
   1b9b0:	mov	r2, #143	; 0x8f
   1b9b4:	bl	11a78 <__assert_fail@plt>
   1b9b8:	movw	r0, #64733	; 0xfcdd
   1b9bc:	movt	r0, #1
   1b9c0:	movw	r1, #64669	; 0xfc9d
   1b9c4:	movt	r1, #1
   1b9c8:	movw	r3, #64685	; 0xfcad
   1b9cc:	movt	r3, #1
   1b9d0:	mov	r2, #171	; 0xab
   1b9d4:	bl	11a78 <__assert_fail@plt>
   1b9d8:	movw	r0, #64756	; 0xfcf4
   1b9dc:	movt	r0, #1
   1b9e0:	movw	r1, #64669	; 0xfc9d
   1b9e4:	movt	r1, #1
   1b9e8:	movw	r3, #64685	; 0xfcad
   1b9ec:	movt	r3, #1
   1b9f0:	mov	r2, #172	; 0xac
   1b9f4:	bl	11a78 <__assert_fail@plt>
   1b9f8:	ldr	r2, [r0, #16]
   1b9fc:	add	r1, r2, r1
   1ba00:	str	r1, [r0, #16]
   1ba04:	bx	lr
   1ba08:	ldrb	r3, [r1]
   1ba0c:	mov	r2, r0
   1ba10:	strb	r3, [r2], #4
   1ba14:	cmp	r3, #0
   1ba18:	beq	1ba28 <__assert_fail@plt+0x9fb0>
   1ba1c:	ldmib	r1, {r3, ip}
   1ba20:	stm	r2, {r3, ip}
   1ba24:	b	1ba34 <__assert_fail@plt+0x9fbc>
   1ba28:	mov	r3, #0
   1ba2c:	str	r3, [r2]
   1ba30:	str	r3, [r2, #4]
   1ba34:	ldrb	r2, [r1, #12]
   1ba38:	strb	r2, [r0, #12]
   1ba3c:	add	r0, r0, #16
   1ba40:	add	r1, r1, #16
   1ba44:	b	1c174 <__assert_fail@plt+0xa6fc>
   1ba48:	cmp	r2, #0
   1ba4c:	beq	1ba7c <__assert_fail@plt+0xa004>
   1ba50:	mvn	r3, #0
   1ba54:	udiv	r3, r3, r2
   1ba58:	cmp	r3, r1
   1ba5c:	bcs	1ba7c <__assert_fail@plt+0xa004>
   1ba60:	push	{fp, lr}
   1ba64:	mov	fp, sp
   1ba68:	bl	11910 <__errno_location@plt>
   1ba6c:	mov	r1, #12
   1ba70:	str	r1, [r0]
   1ba74:	mov	r0, #0
   1ba78:	pop	{fp, pc}
   1ba7c:	mul	r1, r2, r1
   1ba80:	b	1a570 <__assert_fail@plt+0x8af8>
   1ba84:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ba88:	add	fp, sp, #28
   1ba8c:	sub	sp, sp, #44	; 0x2c
   1ba90:	sub	sp, sp, #4096	; 0x1000
   1ba94:	str	r3, [sp, #16]
   1ba98:	mov	r4, r1
   1ba9c:	mov	r5, r0
   1baa0:	mov	r0, #0
   1baa4:	str	r0, [sp]
   1baa8:	str	r2, [sp, #20]
   1baac:	mov	r0, r2
   1bab0:	mov	r1, #0
   1bab4:	mov	r2, #0
   1bab8:	mov	r3, #0
   1babc:	bl	116a0 <iconv@plt>
   1bac0:	str	r5, [sp, #8]
   1bac4:	str	r5, [sp, #36]	; 0x24
   1bac8:	str	r4, [sp, #32]
   1bacc:	str	r4, [sp, #12]
   1bad0:	cmp	r4, #0
   1bad4:	mov	r6, #0
   1bad8:	beq	1bb54 <__assert_fail@plt+0xa0dc>
   1badc:	mov	r6, #0
   1bae0:	add	r8, sp, #40	; 0x28
   1bae4:	mov	sl, #4096	; 0x1000
   1bae8:	add	r9, sp, #24
   1baec:	add	r4, sp, #36	; 0x24
   1baf0:	add	r7, sp, #32
   1baf4:	add	r5, sp, #28
   1baf8:	b	1bb14 <__assert_fail@plt+0xa09c>
   1bafc:	sub	r0, r6, r8
   1bb00:	ldr	r1, [sp, #28]
   1bb04:	add	r6, r0, r1
   1bb08:	ldr	r0, [sp, #32]
   1bb0c:	cmp	r0, #0
   1bb10:	beq	1bb54 <__assert_fail@plt+0xa0dc>
   1bb14:	str	r8, [sp, #28]
   1bb18:	str	sl, [sp, #24]
   1bb1c:	str	r9, [sp]
   1bb20:	ldr	r0, [sp, #20]
   1bb24:	mov	r1, r4
   1bb28:	mov	r2, r7
   1bb2c:	mov	r3, r5
   1bb30:	bl	116a0 <iconv@plt>
   1bb34:	cmn	r0, #1
   1bb38:	bne	1bafc <__assert_fail@plt+0xa084>
   1bb3c:	bl	11910 <__errno_location@plt>
   1bb40:	ldr	r0, [r0]
   1bb44:	cmp	r0, #7
   1bb48:	beq	1bafc <__assert_fail@plt+0xa084>
   1bb4c:	cmp	r0, #22
   1bb50:	bne	1bba4 <__assert_fail@plt+0xa12c>
   1bb54:	add	r4, sp, #40	; 0x28
   1bb58:	str	r4, [sp, #28]
   1bb5c:	mov	r0, #4096	; 0x1000
   1bb60:	str	r0, [sp, #24]
   1bb64:	add	r0, sp, #24
   1bb68:	str	r0, [sp]
   1bb6c:	add	r3, sp, #28
   1bb70:	ldr	r0, [sp, #20]
   1bb74:	mov	r1, #0
   1bb78:	mov	r2, #0
   1bb7c:	bl	116a0 <iconv@plt>
   1bb80:	cmn	r0, #1
   1bb84:	beq	1bb9c <__assert_fail@plt+0xa124>
   1bb88:	sub	r0, r6, r4
   1bb8c:	ldr	r1, [sp, #28]
   1bb90:	add	r6, r0, r1
   1bb94:	mov	r0, #1
   1bb98:	b	1bba8 <__assert_fail@plt+0xa130>
   1bb9c:	mov	r0, #0
   1bba0:	b	1bba8 <__assert_fail@plt+0xa130>
   1bba4:	mov	r0, #0
   1bba8:	mvn	r9, #0
   1bbac:	cmp	r0, #0
   1bbb0:	beq	1bcec <__assert_fail@plt+0xa274>
   1bbb4:	ldr	r1, [fp, #8]
   1bbb8:	cmp	r6, #0
   1bbbc:	beq	1bcb8 <__assert_fail@plt+0xa240>
   1bbc0:	ldr	r0, [sp, #16]
   1bbc4:	ldr	r4, [r0]
   1bbc8:	cmp	r4, #0
   1bbcc:	beq	1bbdc <__assert_fail@plt+0xa164>
   1bbd0:	ldr	r0, [r1]
   1bbd4:	cmp	r0, r6
   1bbd8:	bcs	1bbf0 <__assert_fail@plt+0xa178>
   1bbdc:	mov	r0, r6
   1bbe0:	bl	1a540 <__assert_fail@plt+0x8ac8>
   1bbe4:	mov	r4, r0
   1bbe8:	cmp	r0, #0
   1bbec:	beq	1bce0 <__assert_fail@plt+0xa268>
   1bbf0:	mov	r0, #0
   1bbf4:	str	r0, [sp]
   1bbf8:	ldr	r0, [sp, #20]
   1bbfc:	mov	r1, #0
   1bc00:	mov	r2, #0
   1bc04:	mov	r3, #0
   1bc08:	bl	116a0 <iconv@plt>
   1bc0c:	ldr	r0, [sp, #8]
   1bc10:	str	r0, [sp, #40]	; 0x28
   1bc14:	ldr	r0, [sp, #12]
   1bc18:	str	r0, [sp, #36]	; 0x24
   1bc1c:	mov	sl, r4
   1bc20:	str	r4, [sp, #32]
   1bc24:	str	r6, [sp, #28]
   1bc28:	add	r8, sp, #28
   1bc2c:	add	r5, sp, #40	; 0x28
   1bc30:	add	r7, sp, #36	; 0x24
   1bc34:	add	r4, sp, #32
   1bc38:	ldr	r0, [sp, #36]	; 0x24
   1bc3c:	cmp	r0, #0
   1bc40:	beq	1bc74 <__assert_fail@plt+0xa1fc>
   1bc44:	str	r8, [sp]
   1bc48:	ldr	r0, [sp, #20]
   1bc4c:	mov	r1, r5
   1bc50:	mov	r2, r7
   1bc54:	mov	r3, r4
   1bc58:	bl	116a0 <iconv@plt>
   1bc5c:	cmn	r0, #1
   1bc60:	bne	1bc38 <__assert_fail@plt+0xa1c0>
   1bc64:	bl	11910 <__errno_location@plt>
   1bc68:	ldr	r0, [r0]
   1bc6c:	cmp	r0, #22
   1bc70:	bne	1bcc4 <__assert_fail@plt+0xa24c>
   1bc74:	str	r8, [sp]
   1bc78:	add	r3, sp, #32
   1bc7c:	ldr	r0, [sp, #20]
   1bc80:	mov	r1, #0
   1bc84:	mov	r2, #0
   1bc88:	bl	116a0 <iconv@plt>
   1bc8c:	cmn	r0, #1
   1bc90:	beq	1bcc4 <__assert_fail@plt+0xa24c>
   1bc94:	ldr	r0, [sp, #28]
   1bc98:	cmp	r0, #0
   1bc9c:	bne	1bcf8 <__assert_fail@plt+0xa280>
   1bca0:	ldr	r0, [sp, #16]
   1bca4:	str	sl, [r0]
   1bca8:	ldr	r0, [fp, #8]
   1bcac:	str	r6, [r0]
   1bcb0:	mov	r9, #0
   1bcb4:	b	1bcec <__assert_fail@plt+0xa274>
   1bcb8:	mov	r9, #0
   1bcbc:	str	r9, [r1]
   1bcc0:	b	1bcec <__assert_fail@plt+0xa274>
   1bcc4:	ldr	r0, [sp, #16]
   1bcc8:	ldr	r1, [r0]
   1bccc:	cmp	sl, r1
   1bcd0:	beq	1bcec <__assert_fail@plt+0xa274>
   1bcd4:	mov	r0, sl
   1bcd8:	bl	172ec <__assert_fail@plt+0x5874>
   1bcdc:	b	1bcec <__assert_fail@plt+0xa274>
   1bce0:	bl	11910 <__errno_location@plt>
   1bce4:	mov	r1, #12
   1bce8:	str	r1, [r0]
   1bcec:	mov	r0, r9
   1bcf0:	sub	sp, fp, #28
   1bcf4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1bcf8:	bl	11a60 <abort@plt>
   1bcfc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1bd00:	add	fp, sp, #28
   1bd04:	sub	sp, sp, #20
   1bd08:	mov	r5, r1
   1bd0c:	str	r0, [sp, #16]
   1bd10:	bl	118e0 <strlen@plt>
   1bd14:	mov	r6, r0
   1bd18:	str	r0, [sp, #12]
   1bd1c:	cmp	r0, #4096	; 0x1000
   1bd20:	lslcc	r6, r0, #4
   1bd24:	add	r4, r6, #1
   1bd28:	mov	r0, r4
   1bd2c:	bl	1a540 <__assert_fail@plt+0x8ac8>
   1bd30:	cmp	r0, #0
   1bd34:	beq	1be68 <__assert_fail@plt+0xa3f0>
   1bd38:	mov	r7, r0
   1bd3c:	mov	r0, #0
   1bd40:	str	r0, [sp]
   1bd44:	mov	r0, r5
   1bd48:	mov	r1, #0
   1bd4c:	mov	r2, #0
   1bd50:	mov	r3, #0
   1bd54:	bl	116a0 <iconv@plt>
   1bd58:	stmib	sp, {r6, r7}
   1bd5c:	add	r9, sp, #4
   1bd60:	str	r9, [sp]
   1bd64:	add	r1, sp, #16
   1bd68:	add	r2, sp, #12
   1bd6c:	add	r3, sp, #8
   1bd70:	mov	r0, r5
   1bd74:	bl	116a0 <iconv@plt>
   1bd78:	cmn	r0, #1
   1bd7c:	beq	1be48 <__assert_fail@plt+0xa3d0>
   1bd80:	mov	r6, r7
   1bd84:	str	r9, [sp]
   1bd88:	add	r3, sp, #8
   1bd8c:	mov	r0, r5
   1bd90:	mov	r1, #0
   1bd94:	mov	r2, #0
   1bd98:	bl	116a0 <iconv@plt>
   1bd9c:	cmn	r0, #1
   1bda0:	beq	1be78 <__assert_fail@plt+0xa400>
   1bda4:	mov	r7, r6
   1bda8:	ldr	r0, [sp, #8]
   1bdac:	add	r1, r0, #1
   1bdb0:	str	r1, [sp, #8]
   1bdb4:	mov	r1, #0
   1bdb8:	strb	r1, [r0]
   1bdbc:	ldr	r0, [sp, #8]
   1bdc0:	sub	r1, r0, r7
   1bdc4:	cmp	r1, r4
   1bdc8:	bcs	1bef4 <__assert_fail@plt+0xa47c>
   1bdcc:	mov	r0, r7
   1bdd0:	bl	1a570 <__assert_fail@plt+0x8af8>
   1bdd4:	cmp	r0, #0
   1bdd8:	moveq	r0, r7
   1bddc:	sub	sp, fp, #28
   1bde0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1bde4:	cmp	r4, r4, lsl #1
   1bde8:	bcs	1bf00 <__assert_fail@plt+0xa488>
   1bdec:	ldr	sl, [sp, #8]
   1bdf0:	lsl	r4, r4, #1
   1bdf4:	mov	r0, r7
   1bdf8:	mov	r1, r4
   1bdfc:	bl	1a570 <__assert_fail@plt+0x8af8>
   1be00:	cmp	r0, #0
   1be04:	beq	1bf00 <__assert_fail@plt+0xa488>
   1be08:	mov	r6, r0
   1be0c:	sub	r0, sl, r7
   1be10:	add	r1, r6, r0
   1be14:	str	r1, [sp, #8]
   1be18:	mvn	r0, r0
   1be1c:	add	r0, r4, r0
   1be20:	str	r0, [sp, #4]
   1be24:	str	r9, [sp]
   1be28:	mov	r0, r5
   1be2c:	add	r1, sp, #16
   1be30:	add	r2, sp, #12
   1be34:	add	r3, sp, #8
   1be38:	bl	116a0 <iconv@plt>
   1be3c:	cmn	r0, #1
   1be40:	mov	r7, r6
   1be44:	bne	1bd84 <__assert_fail@plt+0xa30c>
   1be48:	bl	11910 <__errno_location@plt>
   1be4c:	mov	r8, r0
   1be50:	ldr	r0, [r0]
   1be54:	cmp	r0, #7
   1be58:	beq	1bde4 <__assert_fail@plt+0xa36c>
   1be5c:	cmp	r0, #22
   1be60:	beq	1bd80 <__assert_fail@plt+0xa308>
   1be64:	b	1bf18 <__assert_fail@plt+0xa4a0>
   1be68:	bl	11910 <__errno_location@plt>
   1be6c:	mov	r1, #12
   1be70:	str	r1, [r0]
   1be74:	b	1bf20 <__assert_fail@plt+0xa4a8>
   1be78:	bl	11910 <__errno_location@plt>
   1be7c:	mov	r8, r0
   1be80:	ldr	r0, [r8]
   1be84:	cmp	r0, #7
   1be88:	bne	1bf14 <__assert_fail@plt+0xa49c>
   1be8c:	cmp	r4, r4, lsl #1
   1be90:	bcs	1bf0c <__assert_fail@plt+0xa494>
   1be94:	ldr	sl, [sp, #8]
   1be98:	lsl	r4, r4, #1
   1be9c:	mov	r0, r6
   1bea0:	mov	r1, r4
   1bea4:	bl	1a570 <__assert_fail@plt+0x8af8>
   1bea8:	cmp	r0, #0
   1beac:	beq	1bf0c <__assert_fail@plt+0xa494>
   1beb0:	mov	r7, r0
   1beb4:	sub	r0, sl, r6
   1beb8:	add	r1, r7, r0
   1bebc:	str	r1, [sp, #8]
   1bec0:	mvn	r0, r0
   1bec4:	add	r0, r4, r0
   1bec8:	str	r0, [sp, #4]
   1becc:	str	r9, [sp]
   1bed0:	mov	r0, r5
   1bed4:	mov	r1, #0
   1bed8:	mov	r2, #0
   1bedc:	add	r3, sp, #8
   1bee0:	bl	116a0 <iconv@plt>
   1bee4:	cmn	r0, #1
   1bee8:	mov	r6, r7
   1beec:	beq	1be80 <__assert_fail@plt+0xa408>
   1bef0:	b	1bda8 <__assert_fail@plt+0xa330>
   1bef4:	mov	r0, r7
   1bef8:	sub	sp, fp, #28
   1befc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1bf00:	mov	r0, #12
   1bf04:	str	r0, [r8]
   1bf08:	b	1bf18 <__assert_fail@plt+0xa4a0>
   1bf0c:	mov	r0, #12
   1bf10:	str	r0, [r8]
   1bf14:	mov	r7, r6
   1bf18:	mov	r0, r7
   1bf1c:	bl	172ec <__assert_fail@plt+0x5874>
   1bf20:	mov	r0, #0
   1bf24:	sub	sp, fp, #28
   1bf28:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1bf2c:	push	{r4, r5, r6, r7, fp, lr}
   1bf30:	add	fp, sp, #16
   1bf34:	mov	r5, r0
   1bf38:	ldrb	r0, [r0]
   1bf3c:	cmp	r0, #0
   1bf40:	beq	1bfac <__assert_fail@plt+0xa534>
   1bf44:	mov	r6, r2
   1bf48:	mov	r4, r1
   1bf4c:	mov	r0, r1
   1bf50:	mov	r1, r2
   1bf54:	bl	1a8e8 <__assert_fail@plt+0x8e70>
   1bf58:	cmp	r0, #0
   1bf5c:	beq	1bfac <__assert_fail@plt+0xa534>
   1bf60:	mov	r0, r6
   1bf64:	mov	r1, r4
   1bf68:	bl	1185c <iconv_open@plt>
   1bf6c:	mov	r4, #0
   1bf70:	cmn	r0, #1
   1bf74:	beq	1bfc0 <__assert_fail@plt+0xa548>
   1bf78:	mov	r6, r0
   1bf7c:	mov	r0, r5
   1bf80:	mov	r1, r6
   1bf84:	bl	1bcfc <__assert_fail@plt+0xa284>
   1bf88:	cmp	r0, #0
   1bf8c:	beq	1bfe0 <__assert_fail@plt+0xa568>
   1bf90:	mov	r5, r0
   1bf94:	mov	r0, r6
   1bf98:	bl	11694 <iconv_close@plt>
   1bf9c:	cmn	r0, #1
   1bfa0:	ble	1c000 <__assert_fail@plt+0xa588>
   1bfa4:	mov	r0, r5
   1bfa8:	pop	{r4, r5, r6, r7, fp, pc}
   1bfac:	mov	r0, r5
   1bfb0:	bl	11760 <strdup@plt>
   1bfb4:	mov	r4, r0
   1bfb8:	cmp	r0, #0
   1bfbc:	beq	1bfc8 <__assert_fail@plt+0xa550>
   1bfc0:	mov	r0, r4
   1bfc4:	pop	{r4, r5, r6, r7, fp, pc}
   1bfc8:	bl	11910 <__errno_location@plt>
   1bfcc:	mov	r1, #12
   1bfd0:	str	r1, [r0]
   1bfd4:	mov	r4, #0
   1bfd8:	mov	r0, r4
   1bfdc:	pop	{r4, r5, r6, r7, fp, pc}
   1bfe0:	bl	11910 <__errno_location@plt>
   1bfe4:	mov	r5, r0
   1bfe8:	ldr	r7, [r0]
   1bfec:	mov	r0, r6
   1bff0:	bl	11694 <iconv_close@plt>
   1bff4:	str	r7, [r5]
   1bff8:	mov	r0, r4
   1bffc:	pop	{r4, r5, r6, r7, fp, pc}
   1c000:	mov	r0, r5
   1c004:	bl	172ec <__assert_fail@plt+0x5874>
   1c008:	mov	r0, r4
   1c00c:	pop	{r4, r5, r6, r7, fp, pc}
   1c010:	push	{r4, r5, fp, lr}
   1c014:	add	fp, sp, #8
   1c018:	mov	r4, r1
   1c01c:	mov	r5, r0
   1c020:	mov	r1, #0
   1c024:	mov	r2, r4
   1c028:	bl	11988 <memchr@plt>
   1c02c:	sub	r1, r0, r5
   1c030:	cmp	r0, #0
   1c034:	addne	r4, r1, #1
   1c038:	mov	r0, r4
   1c03c:	pop	{r4, r5, fp, pc}
   1c040:	push	{r4, sl, fp, lr}
   1c044:	add	fp, sp, #8
   1c048:	sub	sp, sp, #264	; 0x108
   1c04c:	add	r1, sp, #7
   1c050:	movw	r2, #257	; 0x101
   1c054:	bl	1c2a0 <__assert_fail@plt+0xa828>
   1c058:	mov	r4, #0
   1c05c:	cmp	r0, #0
   1c060:	bne	1c0a0 <__assert_fail@plt+0xa628>
   1c064:	add	r0, sp, #7
   1c068:	movw	r1, #304	; 0x130
   1c06c:	movt	r1, #2
   1c070:	mov	r2, #2
   1c074:	bl	118d4 <bcmp@plt>
   1c078:	cmp	r0, #0
   1c07c:	beq	1c0a0 <__assert_fail@plt+0xa628>
   1c080:	add	r0, sp, #7
   1c084:	movw	r1, #306	; 0x132
   1c088:	movt	r1, #2
   1c08c:	mov	r2, #6
   1c090:	bl	118d4 <bcmp@plt>
   1c094:	mov	r4, r0
   1c098:	cmp	r0, #0
   1c09c:	movwne	r4, #1
   1c0a0:	mov	r0, r4
   1c0a4:	sub	sp, fp, #8
   1c0a8:	pop	{r4, sl, fp, pc}
   1c0ac:	push	{r4, sl, fp, lr}
   1c0b0:	add	fp, sp, #8
   1c0b4:	mov	r4, #0
   1c0b8:	adds	r0, r0, #16
   1c0bc:	adc	r1, r4, #0
   1c0c0:	rsb	r2, r1, #0
   1c0c4:	eors	r2, r2, r1
   1c0c8:	movwne	r2, #1
   1c0cc:	cmp	r0, #0
   1c0d0:	bmi	1c0f0 <__assert_fail@plt+0xa678>
   1c0d4:	cmp	r2, #0
   1c0d8:	asreq	r2, r0, #31
   1c0dc:	eoreq	r3, r0, r0
   1c0e0:	andeq	r2, r2, #1
   1c0e4:	eoreq	r1, r1, r2
   1c0e8:	orrseq	r1, r3, r1
   1c0ec:	beq	1c0f8 <__assert_fail@plt+0xa680>
   1c0f0:	mov	r0, r4
   1c0f4:	pop	{r4, sl, fp, pc}
   1c0f8:	bl	11850 <malloc@plt>
   1c0fc:	cmp	r0, #0
   1c100:	addne	r4, r0, #8
   1c104:	movne	r1, #8
   1c108:	bfine	r4, r1, #0, #4
   1c10c:	subne	r0, r4, r0
   1c110:	strbne	r0, [r4, #-1]
   1c114:	mov	r0, r4
   1c118:	pop	{r4, sl, fp, pc}
   1c11c:	push	{fp, lr}
   1c120:	mov	fp, sp
   1c124:	tst	r0, #7
   1c128:	bne	1c144 <__assert_fail@plt+0xa6cc>
   1c12c:	tst	r0, #8
   1c130:	popeq	{fp, pc}
   1c134:	ldrb	r1, [r0, #-1]
   1c138:	sub	r0, r0, r1
   1c13c:	pop	{fp, lr}
   1c140:	b	172ec <__assert_fail@plt+0x5874>
   1c144:	bl	11a60 <abort@plt>
   1c148:	push	{r4, sl, fp, lr}
   1c14c:	add	fp, sp, #8
   1c150:	mov	r4, r0
   1c154:	bl	116dc <wcwidth@plt>
   1c158:	cmn	r0, #1
   1c15c:	popgt	{r4, sl, fp, pc}
   1c160:	mov	r0, r4
   1c164:	bl	117c0 <iswcntrl@plt>
   1c168:	clz	r0, r0
   1c16c:	lsr	r0, r0, #5
   1c170:	pop	{r4, sl, fp, pc}
   1c174:	push	{r4, r5, r6, sl, fp, lr}
   1c178:	add	fp, sp, #16
   1c17c:	mov	r5, r1
   1c180:	mov	r4, r0
   1c184:	ldr	r6, [r1], #16
   1c188:	cmp	r6, r1
   1c18c:	bne	1c1a0 <__assert_fail@plt+0xa728>
   1c190:	ldr	r2, [r5, #4]
   1c194:	add	r6, r4, #16
   1c198:	mov	r0, r6
   1c19c:	bl	11718 <memcpy@plt>
   1c1a0:	str	r6, [r4]
   1c1a4:	ldr	r0, [r5, #4]
   1c1a8:	str	r0, [r4, #4]
   1c1ac:	ldrb	r0, [r5, #8]
   1c1b0:	strb	r0, [r4, #8]
   1c1b4:	cmp	r0, #0
   1c1b8:	ldrne	r0, [r5, #12]
   1c1bc:	strne	r0, [r4, #12]
   1c1c0:	pop	{r4, r5, r6, sl, fp, pc}
   1c1c4:	ubfx	r1, r0, #5, #3
   1c1c8:	movw	r2, #312	; 0x138
   1c1cc:	movt	r2, #2
   1c1d0:	ldr	r1, [r2, r1, lsl #2]
   1c1d4:	and	r0, r0, #31
   1c1d8:	mov	r2, #1
   1c1dc:	and	r0, r1, r2, lsl r0
   1c1e0:	cmp	r0, #0
   1c1e4:	movwne	r0, #1
   1c1e8:	bx	lr
   1c1ec:	push	{r4, r5, r6, sl, fp, lr}
   1c1f0:	add	fp, sp, #16
   1c1f4:	sub	sp, sp, #56	; 0x38
   1c1f8:	mov	r5, r0
   1c1fc:	bl	11814 <__ctype_get_mb_cur_max@plt>
   1c200:	cmp	r0, #2
   1c204:	bcc	1c290 <__assert_fail@plt+0xa818>
   1c208:	mov	r4, #0
   1c20c:	str	r4, [sp, #8]
   1c210:	str	r4, [sp, #4]
   1c214:	strb	r4, [sp, #12]
   1c218:	strb	r4, [sp]
   1c21c:	str	r5, [sp, #16]
   1c220:	mov	r0, sp
   1c224:	bl	1b86c <__assert_fail@plt+0x9df4>
   1c228:	ldrb	r0, [sp, #24]
   1c22c:	cmp	r0, #0
   1c230:	beq	1c240 <__assert_fail@plt+0xa7c8>
   1c234:	ldr	r0, [sp, #28]
   1c238:	cmp	r0, #0
   1c23c:	beq	1c284 <__assert_fail@plt+0xa80c>
   1c240:	mov	r6, #0
   1c244:	mov	r5, sp
   1c248:	mov	r4, #0
   1c24c:	strb	r6, [sp, #12]
   1c250:	ldr	r0, [sp, #16]
   1c254:	ldr	r1, [sp, #20]
   1c258:	add	r0, r0, r1
   1c25c:	str	r0, [sp, #16]
   1c260:	mov	r0, r5
   1c264:	bl	1b86c <__assert_fail@plt+0x9df4>
   1c268:	add	r4, r4, #1
   1c26c:	ldr	r0, [sp, #28]
   1c270:	ldrb	r1, [sp, #24]
   1c274:	cmp	r1, #0
   1c278:	beq	1c24c <__assert_fail@plt+0xa7d4>
   1c27c:	cmp	r0, #0
   1c280:	bne	1c24c <__assert_fail@plt+0xa7d4>
   1c284:	mov	r0, r4
   1c288:	sub	sp, fp, #16
   1c28c:	pop	{r4, r5, r6, sl, fp, pc}
   1c290:	mov	r0, r5
   1c294:	sub	sp, fp, #16
   1c298:	pop	{r4, r5, r6, sl, fp, lr}
   1c29c:	b	118e0 <strlen@plt>
   1c2a0:	b	1c2a4 <__assert_fail@plt+0xa82c>
   1c2a4:	push	{r4, r5, r6, r7, fp, lr}
   1c2a8:	add	fp, sp, #16
   1c2ac:	mov	r6, r2
   1c2b0:	mov	r4, r1
   1c2b4:	bl	1c33c <__assert_fail@plt+0xa8c4>
   1c2b8:	cmp	r0, #0
   1c2bc:	beq	1c2ec <__assert_fail@plt+0xa874>
   1c2c0:	mov	r7, r0
   1c2c4:	bl	118e0 <strlen@plt>
   1c2c8:	cmp	r0, r6
   1c2cc:	bcs	1c308 <__assert_fail@plt+0xa890>
   1c2d0:	add	r2, r0, #1
   1c2d4:	mov	r0, r4
   1c2d8:	mov	r1, r7
   1c2dc:	bl	11718 <memcpy@plt>
   1c2e0:	mov	r5, #0
   1c2e4:	mov	r0, r5
   1c2e8:	pop	{r4, r5, r6, r7, fp, pc}
   1c2ec:	mov	r5, #22
   1c2f0:	cmp	r6, #0
   1c2f4:	beq	1c330 <__assert_fail@plt+0xa8b8>
   1c2f8:	mov	r0, #0
   1c2fc:	strb	r0, [r4]
   1c300:	mov	r0, r5
   1c304:	pop	{r4, r5, r6, r7, fp, pc}
   1c308:	mov	r5, #34	; 0x22
   1c30c:	cmp	r6, #0
   1c310:	beq	1c330 <__assert_fail@plt+0xa8b8>
   1c314:	sub	r6, r6, #1
   1c318:	mov	r0, r4
   1c31c:	mov	r1, r7
   1c320:	mov	r2, r6
   1c324:	bl	11718 <memcpy@plt>
   1c328:	mov	r0, #0
   1c32c:	strb	r0, [r4, r6]
   1c330:	mov	r0, r5
   1c334:	pop	{r4, r5, r6, r7, fp, pc}
   1c338:	b	1c33c <__assert_fail@plt+0xa8c4>
   1c33c:	mov	r1, #0
   1c340:	b	119dc <setlocale@plt>
   1c344:	cmp	r3, #0
   1c348:	cmpeq	r2, #0
   1c34c:	bne	1c364 <__assert_fail@plt+0xa8ec>
   1c350:	cmp	r1, #0
   1c354:	cmpeq	r0, #0
   1c358:	mvnne	r1, #0
   1c35c:	mvnne	r0, #0
   1c360:	b	1c380 <__assert_fail@plt+0xa908>
   1c364:	sub	sp, sp, #8
   1c368:	push	{sp, lr}
   1c36c:	bl	1c390 <__assert_fail@plt+0xa918>
   1c370:	ldr	lr, [sp, #4]
   1c374:	add	sp, sp, #8
   1c378:	pop	{r2, r3}
   1c37c:	bx	lr
   1c380:	push	{r1, lr}
   1c384:	mov	r0, #8
   1c388:	bl	1167c <raise@plt>
   1c38c:	pop	{r1, pc}
   1c390:	cmp	r1, r3
   1c394:	cmpeq	r0, r2
   1c398:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c39c:	mov	r4, r0
   1c3a0:	movcc	r0, #0
   1c3a4:	mov	r5, r1
   1c3a8:	ldr	lr, [sp, #36]	; 0x24
   1c3ac:	movcc	r1, r0
   1c3b0:	bcc	1c4ac <__assert_fail@plt+0xaa34>
   1c3b4:	cmp	r3, #0
   1c3b8:	clzeq	ip, r2
   1c3bc:	clzne	ip, r3
   1c3c0:	addeq	ip, ip, #32
   1c3c4:	cmp	r5, #0
   1c3c8:	clzeq	r1, r4
   1c3cc:	addeq	r1, r1, #32
   1c3d0:	clzne	r1, r5
   1c3d4:	sub	ip, ip, r1
   1c3d8:	sub	sl, ip, #32
   1c3dc:	lsl	r9, r3, ip
   1c3e0:	rsb	fp, ip, #32
   1c3e4:	orr	r9, r9, r2, lsl sl
   1c3e8:	orr	r9, r9, r2, lsr fp
   1c3ec:	lsl	r8, r2, ip
   1c3f0:	cmp	r5, r9
   1c3f4:	cmpeq	r4, r8
   1c3f8:	movcc	r0, #0
   1c3fc:	movcc	r1, r0
   1c400:	bcc	1c41c <__assert_fail@plt+0xa9a4>
   1c404:	mov	r0, #1
   1c408:	subs	r4, r4, r8
   1c40c:	lsl	r1, r0, sl
   1c410:	orr	r1, r1, r0, lsr fp
   1c414:	lsl	r0, r0, ip
   1c418:	sbc	r5, r5, r9
   1c41c:	cmp	ip, #0
   1c420:	beq	1c4ac <__assert_fail@plt+0xaa34>
   1c424:	lsr	r6, r8, #1
   1c428:	orr	r6, r6, r9, lsl #31
   1c42c:	lsr	r7, r9, #1
   1c430:	mov	r2, ip
   1c434:	b	1c458 <__assert_fail@plt+0xa9e0>
   1c438:	subs	r3, r4, r6
   1c43c:	sbc	r8, r5, r7
   1c440:	adds	r3, r3, r3
   1c444:	adc	r8, r8, r8
   1c448:	adds	r4, r3, #1
   1c44c:	adc	r5, r8, #0
   1c450:	subs	r2, r2, #1
   1c454:	beq	1c474 <__assert_fail@plt+0xa9fc>
   1c458:	cmp	r5, r7
   1c45c:	cmpeq	r4, r6
   1c460:	bcs	1c438 <__assert_fail@plt+0xa9c0>
   1c464:	adds	r4, r4, r4
   1c468:	adc	r5, r5, r5
   1c46c:	subs	r2, r2, #1
   1c470:	bne	1c458 <__assert_fail@plt+0xa9e0>
   1c474:	lsr	r3, r4, ip
   1c478:	orr	r3, r3, r5, lsl fp
   1c47c:	lsr	r2, r5, ip
   1c480:	orr	r3, r3, r5, lsr sl
   1c484:	adds	r0, r0, r4
   1c488:	mov	r4, r3
   1c48c:	lsl	r3, r2, ip
   1c490:	orr	r3, r3, r4, lsl sl
   1c494:	lsl	ip, r4, ip
   1c498:	orr	r3, r3, r4, lsr fp
   1c49c:	adc	r1, r1, r5
   1c4a0:	subs	r0, r0, ip
   1c4a4:	mov	r5, r2
   1c4a8:	sbc	r1, r1, r3
   1c4ac:	cmp	lr, #0
   1c4b0:	strdne	r4, [lr]
   1c4b4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c4b8:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1c4bc:	mov	r7, r0
   1c4c0:	ldr	r6, [pc, #72]	; 1c510 <__assert_fail@plt+0xaa98>
   1c4c4:	ldr	r5, [pc, #72]	; 1c514 <__assert_fail@plt+0xaa9c>
   1c4c8:	add	r6, pc, r6
   1c4cc:	add	r5, pc, r5
   1c4d0:	sub	r6, r6, r5
   1c4d4:	mov	r8, r1
   1c4d8:	mov	r9, r2
   1c4dc:	bl	11644 <calloc@plt-0x20>
   1c4e0:	asrs	r6, r6, #2
   1c4e4:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   1c4e8:	mov	r4, #0
   1c4ec:	add	r4, r4, #1
   1c4f0:	ldr	r3, [r5], #4
   1c4f4:	mov	r2, r9
   1c4f8:	mov	r1, r8
   1c4fc:	mov	r0, r7
   1c500:	blx	r3
   1c504:	cmp	r6, r4
   1c508:	bne	1c4ec <__assert_fail@plt+0xaa74>
   1c50c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1c510:	andeq	r4, r1, r4, lsr sl
   1c514:	andeq	r4, r1, ip, lsr #20
   1c518:	bx	lr
   1c51c:	ldr	r3, [pc, #12]	; 1c530 <__assert_fail@plt+0xaab8>
   1c520:	mov	r1, #0
   1c524:	add	r3, pc, r3
   1c528:	ldr	r2, [r3]
   1c52c:	b	11934 <__cxa_atexit@plt>
   1c530:	andeq	r4, r1, r8, asr #24

Disassembly of section .fini:

0001c534 <.fini>:
   1c534:	push	{r3, lr}
   1c538:	pop	{r3, pc}
