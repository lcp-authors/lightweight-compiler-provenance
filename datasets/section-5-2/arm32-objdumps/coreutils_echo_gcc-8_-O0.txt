
../repos/coreutils/src/echo:     file format elf32-littlearm


Disassembly of section .init:

00010ad8 <.init>:
   10ad8:	push	{r3, lr}
   10adc:	bl	10d50 <__assert_fail@plt+0x48>
   10ae0:	pop	{r3, pc}

Disassembly of section .plt:

00010ae4 <calloc@plt-0x14>:
   10ae4:	push	{lr}		; (str lr, [sp, #-4]!)
   10ae8:	ldr	lr, [pc, #4]	; 10af4 <calloc@plt-0x4>
   10aec:	add	lr, pc, lr
   10af0:	ldr	pc, [lr, #8]!
   10af4:	andeq	r7, r1, ip, lsl #10

00010af8 <calloc@plt>:
   10af8:	add	ip, pc, #0, 12
   10afc:	add	ip, ip, #94208	; 0x17000
   10b00:	ldr	pc, [ip, #1292]!	; 0x50c

00010b04 <fputs_unlocked@plt>:
   10b04:	add	ip, pc, #0, 12
   10b08:	add	ip, ip, #94208	; 0x17000
   10b0c:	ldr	pc, [ip, #1284]!	; 0x504

00010b10 <strcmp@plt>:
   10b10:	add	ip, pc, #0, 12
   10b14:	add	ip, ip, #94208	; 0x17000
   10b18:	ldr	pc, [ip, #1276]!	; 0x4fc

00010b1c <printf@plt>:
   10b1c:	add	ip, pc, #0, 12
   10b20:	add	ip, ip, #94208	; 0x17000
   10b24:	ldr	pc, [ip, #1268]!	; 0x4f4

00010b28 <fflush@plt>:
   10b28:	add	ip, pc, #0, 12
   10b2c:	add	ip, ip, #94208	; 0x17000
   10b30:	ldr	pc, [ip, #1260]!	; 0x4ec

00010b34 <free@plt>:
   10b34:	add	ip, pc, #0, 12
   10b38:	add	ip, ip, #94208	; 0x17000
   10b3c:	ldr	pc, [ip, #1252]!	; 0x4e4

00010b40 <_exit@plt>:
   10b40:	add	ip, pc, #0, 12
   10b44:	add	ip, ip, #94208	; 0x17000
   10b48:	ldr	pc, [ip, #1244]!	; 0x4dc

00010b4c <memcpy@plt>:
   10b4c:	add	ip, pc, #0, 12
   10b50:	add	ip, ip, #94208	; 0x17000
   10b54:	ldr	pc, [ip, #1236]!	; 0x4d4

00010b58 <mbsinit@plt>:
   10b58:	add	ip, pc, #0, 12
   10b5c:	add	ip, ip, #94208	; 0x17000
   10b60:	ldr	pc, [ip, #1228]!	; 0x4cc

00010b64 <memcmp@plt>:
   10b64:	add	ip, pc, #0, 12
   10b68:	add	ip, ip, #94208	; 0x17000
   10b6c:	ldr	pc, [ip, #1220]!	; 0x4c4

00010b70 <fputc_unlocked@plt>:
   10b70:	add	ip, pc, #0, 12
   10b74:	add	ip, ip, #94208	; 0x17000
   10b78:	ldr	pc, [ip, #1212]!	; 0x4bc

00010b7c <realloc@plt>:
   10b7c:	add	ip, pc, #0, 12
   10b80:	add	ip, ip, #94208	; 0x17000
   10b84:	ldr	pc, [ip, #1204]!	; 0x4b4

00010b88 <textdomain@plt>:
   10b88:	add	ip, pc, #0, 12
   10b8c:	add	ip, ip, #94208	; 0x17000
   10b90:	ldr	pc, [ip, #1196]!	; 0x4ac

00010b94 <iswprint@plt>:
   10b94:	add	ip, pc, #0, 12
   10b98:	add	ip, ip, #94208	; 0x17000
   10b9c:	ldr	pc, [ip, #1188]!	; 0x4a4

00010ba0 <fwrite@plt>:
   10ba0:	add	ip, pc, #0, 12
   10ba4:	add	ip, ip, #94208	; 0x17000
   10ba8:	ldr	pc, [ip, #1180]!	; 0x49c

00010bac <lseek64@plt>:
   10bac:	add	ip, pc, #0, 12
   10bb0:	add	ip, ip, #94208	; 0x17000
   10bb4:	ldr	pc, [ip, #1172]!	; 0x494

00010bb8 <__ctype_get_mb_cur_max@plt>:
   10bb8:	add	ip, pc, #0, 12
   10bbc:	add	ip, ip, #94208	; 0x17000
   10bc0:	ldr	pc, [ip, #1164]!	; 0x48c

00010bc4 <__fpending@plt>:
   10bc4:	add	ip, pc, #0, 12
   10bc8:	add	ip, ip, #94208	; 0x17000
   10bcc:	ldr	pc, [ip, #1156]!	; 0x484

00010bd0 <ferror_unlocked@plt>:
   10bd0:	add	ip, pc, #0, 12
   10bd4:	add	ip, ip, #94208	; 0x17000
   10bd8:	ldr	pc, [ip, #1148]!	; 0x47c

00010bdc <mbrtowc@plt>:
   10bdc:	add	ip, pc, #0, 12
   10be0:	add	ip, ip, #94208	; 0x17000
   10be4:	ldr	pc, [ip, #1140]!	; 0x474

00010be8 <error@plt>:
   10be8:	add	ip, pc, #0, 12
   10bec:	add	ip, ip, #94208	; 0x17000
   10bf0:	ldr	pc, [ip, #1132]!	; 0x46c

00010bf4 <getenv@plt>:
   10bf4:	add	ip, pc, #0, 12
   10bf8:	add	ip, ip, #94208	; 0x17000
   10bfc:	ldr	pc, [ip, #1124]!	; 0x464

00010c00 <malloc@plt>:
   10c00:	add	ip, pc, #0, 12
   10c04:	add	ip, ip, #94208	; 0x17000
   10c08:	ldr	pc, [ip, #1116]!	; 0x45c

00010c0c <__libc_start_main@plt>:
   10c0c:	add	ip, pc, #0, 12
   10c10:	add	ip, ip, #94208	; 0x17000
   10c14:	ldr	pc, [ip, #1108]!	; 0x454

00010c18 <__freading@plt>:
   10c18:	add	ip, pc, #0, 12
   10c1c:	add	ip, ip, #94208	; 0x17000
   10c20:	ldr	pc, [ip, #1100]!	; 0x44c

00010c24 <__gmon_start__@plt>:
   10c24:	add	ip, pc, #0, 12
   10c28:	add	ip, ip, #94208	; 0x17000
   10c2c:	ldr	pc, [ip, #1092]!	; 0x444

00010c30 <__ctype_b_loc@plt>:
   10c30:	add	ip, pc, #0, 12
   10c34:	add	ip, ip, #94208	; 0x17000
   10c38:	ldr	pc, [ip, #1084]!	; 0x43c

00010c3c <exit@plt>:
   10c3c:	add	ip, pc, #0, 12
   10c40:	add	ip, ip, #94208	; 0x17000
   10c44:	ldr	pc, [ip, #1076]!	; 0x434

00010c48 <gettext@plt>:
   10c48:	add	ip, pc, #0, 12
   10c4c:	add	ip, ip, #94208	; 0x17000
   10c50:	ldr	pc, [ip, #1068]!	; 0x42c

00010c54 <strlen@plt>:
   10c54:	add	ip, pc, #0, 12
   10c58:	add	ip, ip, #94208	; 0x17000
   10c5c:	ldr	pc, [ip, #1060]!	; 0x424

00010c60 <fprintf@plt>:
   10c60:	add	ip, pc, #0, 12
   10c64:	add	ip, ip, #94208	; 0x17000
   10c68:	ldr	pc, [ip, #1052]!	; 0x41c

00010c6c <__errno_location@plt>:
   10c6c:	add	ip, pc, #0, 12
   10c70:	add	ip, ip, #94208	; 0x17000
   10c74:	ldr	pc, [ip, #1044]!	; 0x414

00010c78 <__cxa_atexit@plt>:
   10c78:	add	ip, pc, #0, 12
   10c7c:	add	ip, ip, #94208	; 0x17000
   10c80:	ldr	pc, [ip, #1036]!	; 0x40c

00010c84 <memset@plt>:
   10c84:	add	ip, pc, #0, 12
   10c88:	add	ip, ip, #94208	; 0x17000
   10c8c:	ldr	pc, [ip, #1028]!	; 0x404

00010c90 <fileno@plt>:
   10c90:	add	ip, pc, #0, 12
   10c94:	add	ip, ip, #94208	; 0x17000
   10c98:	ldr	pc, [ip, #1020]!	; 0x3fc

00010c9c <fclose@plt>:
   10c9c:	add	ip, pc, #0, 12
   10ca0:	add	ip, ip, #94208	; 0x17000
   10ca4:	ldr	pc, [ip, #1012]!	; 0x3f4

00010ca8 <fseeko64@plt>:
   10ca8:	add	ip, pc, #0, 12
   10cac:	add	ip, ip, #94208	; 0x17000
   10cb0:	ldr	pc, [ip, #1004]!	; 0x3ec

00010cb4 <setlocale@plt>:
   10cb4:	add	ip, pc, #0, 12
   10cb8:	add	ip, ip, #94208	; 0x17000
   10cbc:	ldr	pc, [ip, #996]!	; 0x3e4

00010cc0 <strrchr@plt>:
   10cc0:	add	ip, pc, #0, 12
   10cc4:	add	ip, ip, #94208	; 0x17000
   10cc8:	ldr	pc, [ip, #988]!	; 0x3dc

00010ccc <nl_langinfo@plt>:
   10ccc:	add	ip, pc, #0, 12
   10cd0:	add	ip, ip, #94208	; 0x17000
   10cd4:	ldr	pc, [ip, #980]!	; 0x3d4

00010cd8 <bindtextdomain@plt>:
   10cd8:	add	ip, pc, #0, 12
   10cdc:	add	ip, ip, #94208	; 0x17000
   10ce0:	ldr	pc, [ip, #972]!	; 0x3cc

00010ce4 <strncmp@plt>:
   10ce4:	add	ip, pc, #0, 12
   10ce8:	add	ip, ip, #94208	; 0x17000
   10cec:	ldr	pc, [ip, #964]!	; 0x3c4

00010cf0 <abort@plt>:
   10cf0:	add	ip, pc, #0, 12
   10cf4:	add	ip, ip, #94208	; 0x17000
   10cf8:	ldr	pc, [ip, #956]!	; 0x3bc

00010cfc <putchar_unlocked@plt>:
   10cfc:	add	ip, pc, #0, 12
   10d00:	add	ip, ip, #94208	; 0x17000
   10d04:	ldr	pc, [ip, #948]!	; 0x3b4

00010d08 <__assert_fail@plt>:
   10d08:	add	ip, pc, #0, 12
   10d0c:	add	ip, ip, #94208	; 0x17000
   10d10:	ldr	pc, [ip, #940]!	; 0x3ac

Disassembly of section .text:

00010d14 <.text>:
   10d14:	mov	fp, #0
   10d18:	mov	lr, #0
   10d1c:	pop	{r1}		; (ldr r1, [sp], #4)
   10d20:	mov	r2, sp
   10d24:	push	{r2}		; (str r2, [sp, #-4]!)
   10d28:	push	{r0}		; (str r0, [sp, #-4]!)
   10d2c:	ldr	ip, [pc, #16]	; 10d44 <__assert_fail@plt+0x3c>
   10d30:	push	{ip}		; (str ip, [sp, #-4]!)
   10d34:	ldr	r0, [pc, #12]	; 10d48 <__assert_fail@plt+0x40>
   10d38:	ldr	r3, [pc, #12]	; 10d4c <__assert_fail@plt+0x44>
   10d3c:	bl	10c0c <__libc_start_main@plt>
   10d40:	bl	10cf0 <abort@plt>
   10d44:	ldrdeq	r6, [r1], -r8
   10d48:			; <UNDEFINED> instruction: 0x000112b0
   10d4c:	andeq	r6, r1, r8, ror r8
   10d50:	ldr	r3, [pc, #20]	; 10d6c <__assert_fail@plt+0x64>
   10d54:	ldr	r2, [pc, #20]	; 10d70 <__assert_fail@plt+0x68>
   10d58:	add	r3, pc, r3
   10d5c:	ldr	r2, [r3, r2]
   10d60:	cmp	r2, #0
   10d64:	bxeq	lr
   10d68:	b	10c24 <__gmon_start__@plt>
   10d6c:	andeq	r7, r1, r0, lsr #5
   10d70:	andeq	r0, r0, r0, asr #1
   10d74:	ldr	r0, [pc, #24]	; 10d94 <__assert_fail@plt+0x8c>
   10d78:	ldr	r3, [pc, #24]	; 10d98 <__assert_fail@plt+0x90>
   10d7c:	cmp	r3, r0
   10d80:	bxeq	lr
   10d84:	ldr	r3, [pc, #16]	; 10d9c <__assert_fail@plt+0x94>
   10d88:	cmp	r3, #0
   10d8c:	bxeq	lr
   10d90:	bx	r3
   10d94:	andeq	r8, r2, r4, lsl r1
   10d98:	andeq	r8, r2, r4, lsl r1
   10d9c:	andeq	r0, r0, r0
   10da0:	ldr	r0, [pc, #36]	; 10dcc <__assert_fail@plt+0xc4>
   10da4:	ldr	r1, [pc, #36]	; 10dd0 <__assert_fail@plt+0xc8>
   10da8:	sub	r1, r1, r0
   10dac:	asr	r1, r1, #2
   10db0:	add	r1, r1, r1, lsr #31
   10db4:	asrs	r1, r1, #1
   10db8:	bxeq	lr
   10dbc:	ldr	r3, [pc, #16]	; 10dd4 <__assert_fail@plt+0xcc>
   10dc0:	cmp	r3, #0
   10dc4:	bxeq	lr
   10dc8:	bx	r3
   10dcc:	andeq	r8, r2, r4, lsl r1
   10dd0:	andeq	r8, r2, r4, lsl r1
   10dd4:	andeq	r0, r0, r0
   10dd8:	push	{r4, lr}
   10ddc:	ldr	r4, [pc, #24]	; 10dfc <__assert_fail@plt+0xf4>
   10de0:	ldrb	r3, [r4]
   10de4:	cmp	r3, #0
   10de8:	popne	{r4, pc}
   10dec:	bl	10d74 <__assert_fail@plt+0x6c>
   10df0:	mov	r3, #1
   10df4:	strb	r3, [r4]
   10df8:	pop	{r4, pc}
   10dfc:	andeq	r8, r2, r8, lsr #2
   10e00:	b	10da0 <__assert_fail@plt+0x98>
   10e04:	str	fp, [sp, #-8]!
   10e08:	str	lr, [sp, #4]
   10e0c:	add	fp, sp, #4
   10e10:	sub	sp, sp, #80	; 0x50
   10e14:	str	r0, [fp, #-80]	; 0xffffffb0
   10e18:	movw	r2, #27252	; 0x6a74
   10e1c:	movt	r2, #1
   10e20:	sub	r3, fp, #72	; 0x48
   10e24:	ldrd	r0, [r2]
   10e28:	strd	r0, [r3]
   10e2c:	ldrd	r0, [r2, #8]
   10e30:	strd	r0, [r3, #8]
   10e34:	ldrd	r0, [r2, #16]
   10e38:	strd	r0, [r3, #16]
   10e3c:	ldrd	r0, [r2, #24]
   10e40:	strd	r0, [r3, #24]
   10e44:	ldrd	r0, [r2, #32]
   10e48:	strd	r0, [r3, #32]
   10e4c:	ldrd	r0, [r2, #40]	; 0x28
   10e50:	strd	r0, [r3, #40]	; 0x28
   10e54:	ldrd	r0, [r2, #48]	; 0x30
   10e58:	strd	r0, [r3, #48]	; 0x30
   10e5c:	ldr	r3, [fp, #-80]	; 0xffffffb0
   10e60:	str	r3, [fp, #-8]
   10e64:	sub	r3, fp, #72	; 0x48
   10e68:	str	r3, [fp, #-12]
   10e6c:	b	10e7c <__assert_fail@plt+0x174>
   10e70:	ldr	r3, [fp, #-12]
   10e74:	add	r3, r3, #8
   10e78:	str	r3, [fp, #-12]
   10e7c:	ldr	r3, [fp, #-12]
   10e80:	ldr	r3, [r3]
   10e84:	cmp	r3, #0
   10e88:	beq	10eac <__assert_fail@plt+0x1a4>
   10e8c:	ldr	r3, [fp, #-12]
   10e90:	ldr	r3, [r3]
   10e94:	mov	r1, r3
   10e98:	ldr	r0, [fp, #-80]	; 0xffffffb0
   10e9c:	bl	10b10 <strcmp@plt>
   10ea0:	mov	r3, r0
   10ea4:	cmp	r3, #0
   10ea8:	bne	10e70 <__assert_fail@plt+0x168>
   10eac:	ldr	r3, [fp, #-12]
   10eb0:	ldr	r3, [r3, #4]
   10eb4:	cmp	r3, #0
   10eb8:	beq	10ec8 <__assert_fail@plt+0x1c0>
   10ebc:	ldr	r3, [fp, #-12]
   10ec0:	ldr	r3, [r3, #4]
   10ec4:	str	r3, [fp, #-8]
   10ec8:	movw	r0, #26880	; 0x6900
   10ecc:	movt	r0, #1
   10ed0:	bl	10c48 <gettext@plt>
   10ed4:	mov	r3, r0
   10ed8:	movw	r2, #26904	; 0x6918
   10edc:	movt	r2, #1
   10ee0:	movw	r1, #26944	; 0x6940
   10ee4:	movt	r1, #1
   10ee8:	mov	r0, r3
   10eec:	bl	10b1c <printf@plt>
   10ef0:	mov	r1, #0
   10ef4:	mov	r0, #5
   10ef8:	bl	10cb4 <setlocale@plt>
   10efc:	str	r0, [fp, #-16]
   10f00:	ldr	r3, [fp, #-16]
   10f04:	cmp	r3, #0
   10f08:	beq	10f54 <__assert_fail@plt+0x24c>
   10f0c:	mov	r2, #3
   10f10:	movw	r1, #26960	; 0x6950
   10f14:	movt	r1, #1
   10f18:	ldr	r0, [fp, #-16]
   10f1c:	bl	10ce4 <strncmp@plt>
   10f20:	mov	r3, r0
   10f24:	cmp	r3, #0
   10f28:	beq	10f54 <__assert_fail@plt+0x24c>
   10f2c:	movw	r0, #26964	; 0x6954
   10f30:	movt	r0, #1
   10f34:	bl	10c48 <gettext@plt>
   10f38:	mov	r2, r0
   10f3c:	movw	r3, #33060	; 0x8124
   10f40:	movt	r3, #2
   10f44:	ldr	r3, [r3]
   10f48:	mov	r1, r3
   10f4c:	mov	r0, r2
   10f50:	bl	10b04 <fputs_unlocked@plt>
   10f54:	movw	r0, #27036	; 0x699c
   10f58:	movt	r0, #1
   10f5c:	bl	10c48 <gettext@plt>
   10f60:	mov	r3, r0
   10f64:	ldr	r2, [fp, #-80]	; 0xffffffb0
   10f68:	movw	r1, #26904	; 0x6918
   10f6c:	movt	r1, #1
   10f70:	mov	r0, r3
   10f74:	bl	10b1c <printf@plt>
   10f78:	movw	r0, #27064	; 0x69b8
   10f7c:	movt	r0, #1
   10f80:	bl	10c48 <gettext@plt>
   10f84:	ldr	r2, [fp, #-8]
   10f88:	ldr	r3, [fp, #-80]	; 0xffffffb0
   10f8c:	cmp	r2, r3
   10f90:	bne	10fa0 <__assert_fail@plt+0x298>
   10f94:	movw	r3, #27116	; 0x69ec
   10f98:	movt	r3, #1
   10f9c:	b	10fa8 <__assert_fail@plt+0x2a0>
   10fa0:	movw	r3, #27128	; 0x69f8
   10fa4:	movt	r3, #1
   10fa8:	mov	r2, r3
   10fac:	ldr	r1, [fp, #-8]
   10fb0:	bl	10b1c <printf@plt>
   10fb4:	nop	{0}
   10fb8:	sub	sp, fp, #4
   10fbc:	ldr	fp, [sp]
   10fc0:	add	sp, sp, #4
   10fc4:	pop	{pc}		; (ldr pc, [sp], #4)
   10fc8:	str	fp, [sp, #-8]!
   10fcc:	str	lr, [sp, #4]
   10fd0:	add	fp, sp, #4
   10fd4:	sub	sp, sp, #8
   10fd8:	str	r0, [fp, #-8]
   10fdc:	ldr	r3, [fp, #-8]
   10fe0:	cmp	r3, #0
   10fe4:	beq	11008 <__assert_fail@plt+0x300>
   10fe8:	movw	r3, #28544	; 0x6f80
   10fec:	movt	r3, #1
   10ff0:	mov	r2, #40	; 0x28
   10ff4:	movw	r1, #27308	; 0x6aac
   10ff8:	movt	r1, #1
   10ffc:	movw	r0, #27320	; 0x6ab8
   11000:	movt	r0, #1
   11004:	bl	10d08 <__assert_fail@plt>
   11008:	movw	r0, #27344	; 0x6ad0
   1100c:	movt	r0, #1
   11010:	bl	10c48 <gettext@plt>
   11014:	movw	r3, #33076	; 0x8134
   11018:	movt	r3, #2
   1101c:	ldr	r1, [r3]
   11020:	movw	r3, #33076	; 0x8134
   11024:	movt	r3, #2
   11028:	ldr	r3, [r3]
   1102c:	mov	r2, r3
   11030:	bl	10b1c <printf@plt>
   11034:	movw	r0, #27408	; 0x6b10
   11038:	movt	r0, #1
   1103c:	bl	10c48 <gettext@plt>
   11040:	mov	r2, r0
   11044:	movw	r3, #33060	; 0x8124
   11048:	movt	r3, #2
   1104c:	ldr	r3, [r3]
   11050:	mov	r1, r3
   11054:	mov	r0, r2
   11058:	bl	10b04 <fputs_unlocked@plt>
   1105c:	movw	r0, #27504	; 0x6b70
   11060:	movt	r0, #1
   11064:	bl	10c48 <gettext@plt>
   11068:	mov	r2, r0
   1106c:	movw	r3, #33060	; 0x8124
   11070:	movt	r3, #2
   11074:	ldr	r3, [r3]
   11078:	mov	r1, r3
   1107c:	mov	r0, r2
   11080:	bl	10b04 <fputs_unlocked@plt>
   11084:	movw	r0, #27636	; 0x6bf4
   11088:	movt	r0, #1
   1108c:	bl	10c48 <gettext@plt>
   11090:	mov	r2, r0
   11094:	movw	r3, #33060	; 0x8124
   11098:	movt	r3, #2
   1109c:	ldr	r3, [r3]
   110a0:	mov	r1, r3
   110a4:	mov	r0, r2
   110a8:	bl	10b04 <fputs_unlocked@plt>
   110ac:	movw	r0, #27684	; 0x6c24
   110b0:	movt	r0, #1
   110b4:	bl	10c48 <gettext@plt>
   110b8:	mov	r2, r0
   110bc:	movw	r3, #33060	; 0x8124
   110c0:	movt	r3, #2
   110c4:	ldr	r3, [r3]
   110c8:	mov	r1, r3
   110cc:	mov	r0, r2
   110d0:	bl	10b04 <fputs_unlocked@plt>
   110d4:	movw	r0, #27740	; 0x6c5c
   110d8:	movt	r0, #1
   110dc:	bl	10c48 <gettext@plt>
   110e0:	mov	r2, r0
   110e4:	movw	r3, #33060	; 0x8124
   110e8:	movt	r3, #2
   110ec:	ldr	r3, [r3]
   110f0:	mov	r1, r3
   110f4:	mov	r0, r2
   110f8:	bl	10b04 <fputs_unlocked@plt>
   110fc:	movw	r0, #27804	; 0x6c9c
   11100:	movt	r0, #1
   11104:	bl	10c48 <gettext@plt>
   11108:	mov	r2, r0
   1110c:	movw	r3, #33060	; 0x8124
   11110:	movt	r3, #2
   11114:	ldr	r3, [r3]
   11118:	mov	r1, r3
   1111c:	mov	r0, r2
   11120:	bl	10b04 <fputs_unlocked@plt>
   11124:	movw	r0, #28036	; 0x6d84
   11128:	movt	r0, #1
   1112c:	bl	10c48 <gettext@plt>
   11130:	mov	r2, r0
   11134:	movw	r3, #33060	; 0x8124
   11138:	movt	r3, #2
   1113c:	ldr	r3, [r3]
   11140:	mov	r1, r3
   11144:	mov	r0, r2
   11148:	bl	10b04 <fputs_unlocked@plt>
   1114c:	movw	r0, #28148	; 0x6df4
   11150:	movt	r0, #1
   11154:	bl	10c48 <gettext@plt>
   11158:	mov	r3, r0
   1115c:	movw	r1, #28340	; 0x6eb4
   11160:	movt	r1, #1
   11164:	mov	r0, r3
   11168:	bl	10b1c <printf@plt>
   1116c:	movw	r0, #28348	; 0x6ebc
   11170:	movt	r0, #1
   11174:	bl	10c48 <gettext@plt>
   11178:	mov	r2, r0
   1117c:	movw	r3, #33060	; 0x8124
   11180:	movt	r3, #2
   11184:	ldr	r3, [r3]
   11188:	mov	r1, r3
   1118c:	mov	r0, r2
   11190:	bl	10b04 <fputs_unlocked@plt>
   11194:	movw	r0, #28340	; 0x6eb4
   11198:	movt	r0, #1
   1119c:	bl	10e04 <__assert_fail@plt+0xfc>
   111a0:	ldr	r0, [fp, #-8]
   111a4:	bl	10c3c <exit@plt>
   111a8:	push	{fp}		; (str fp, [sp, #-4]!)
   111ac:	add	fp, sp, #0
   111b0:	sub	sp, sp, #12
   111b4:	mov	r3, r0
   111b8:	strb	r3, [fp, #-5]
   111bc:	ldrb	r3, [fp, #-5]
   111c0:	sub	r3, r3, #65	; 0x41
   111c4:	cmp	r3, #37	; 0x25
   111c8:	ldrls	pc, [pc, r3, lsl #2]
   111cc:	b	11268 <__assert_fail@plt+0x560>
   111d0:	andeq	r1, r1, r4, ror r2
   111d4:	andeq	r1, r1, ip, ror r2
   111d8:	andeq	r1, r1, r4, lsl #5
   111dc:	andeq	r1, r1, ip, lsl #5
   111e0:	muleq	r1, r4, r2
   111e4:	muleq	r1, ip, r2
   111e8:	andeq	r1, r1, r8, ror #4
   111ec:	andeq	r1, r1, r8, ror #4
   111f0:	andeq	r1, r1, r8, ror #4
   111f4:	andeq	r1, r1, r8, ror #4
   111f8:	andeq	r1, r1, r8, ror #4
   111fc:	andeq	r1, r1, r8, ror #4
   11200:	andeq	r1, r1, r8, ror #4
   11204:	andeq	r1, r1, r8, ror #4
   11208:	andeq	r1, r1, r8, ror #4
   1120c:	andeq	r1, r1, r8, ror #4
   11210:	andeq	r1, r1, r8, ror #4
   11214:	andeq	r1, r1, r8, ror #4
   11218:	andeq	r1, r1, r8, ror #4
   1121c:	andeq	r1, r1, r8, ror #4
   11220:	andeq	r1, r1, r8, ror #4
   11224:	andeq	r1, r1, r8, ror #4
   11228:	andeq	r1, r1, r8, ror #4
   1122c:	andeq	r1, r1, r8, ror #4
   11230:	andeq	r1, r1, r8, ror #4
   11234:	andeq	r1, r1, r8, ror #4
   11238:	andeq	r1, r1, r8, ror #4
   1123c:	andeq	r1, r1, r8, ror #4
   11240:	andeq	r1, r1, r8, ror #4
   11244:	andeq	r1, r1, r8, ror #4
   11248:	andeq	r1, r1, r8, ror #4
   1124c:	andeq	r1, r1, r8, ror #4
   11250:	andeq	r1, r1, r4, ror r2
   11254:	andeq	r1, r1, ip, ror r2
   11258:	andeq	r1, r1, r4, lsl #5
   1125c:	andeq	r1, r1, ip, lsl #5
   11260:	muleq	r1, r4, r2
   11264:	muleq	r1, ip, r2
   11268:	ldrb	r3, [fp, #-5]
   1126c:	sub	r3, r3, #48	; 0x30
   11270:	b	112a0 <__assert_fail@plt+0x598>
   11274:	mov	r3, #10
   11278:	b	112a0 <__assert_fail@plt+0x598>
   1127c:	mov	r3, #11
   11280:	b	112a0 <__assert_fail@plt+0x598>
   11284:	mov	r3, #12
   11288:	b	112a0 <__assert_fail@plt+0x598>
   1128c:	mov	r3, #13
   11290:	b	112a0 <__assert_fail@plt+0x598>
   11294:	mov	r3, #14
   11298:	b	112a0 <__assert_fail@plt+0x598>
   1129c:	mov	r3, #15
   112a0:	mov	r0, r3
   112a4:	add	sp, fp, #0
   112a8:	pop	{fp}		; (ldr fp, [sp], #4)
   112ac:	bx	lr
   112b0:	str	r4, [sp, #-12]!
   112b4:	str	fp, [sp, #4]
   112b8:	str	lr, [sp, #8]
   112bc:	add	fp, sp, #8
   112c0:	sub	sp, sp, #52	; 0x34
   112c4:	str	r0, [fp, #-40]	; 0xffffffd8
   112c8:	str	r1, [fp, #-44]	; 0xffffffd4
   112cc:	mov	r3, #1
   112d0:	strb	r3, [fp, #-13]
   112d4:	movw	r0, #28456	; 0x6f28
   112d8:	movt	r0, #1
   112dc:	bl	10bf4 <getenv@plt>
   112e0:	mov	r3, r0
   112e4:	cmp	r3, #0
   112e8:	movne	r3, #1
   112ec:	moveq	r3, #0
   112f0:	strb	r3, [fp, #-30]	; 0xffffffe2
   112f4:	ldrb	r3, [fp, #-30]	; 0xffffffe2
   112f8:	eor	r3, r3, #1
   112fc:	uxtb	r3, r3
   11300:	cmp	r3, #0
   11304:	bne	1133c <__assert_fail@plt+0x634>
   11308:	ldr	r3, [fp, #-40]	; 0xffffffd8
   1130c:	cmp	r3, #1
   11310:	ble	11344 <__assert_fail@plt+0x63c>
   11314:	ldr	r3, [fp, #-44]	; 0xffffffd4
   11318:	add	r3, r3, #4
   1131c:	ldr	r3, [r3]
   11320:	movw	r1, #28472	; 0x6f38
   11324:	movt	r1, #1
   11328:	mov	r0, r3
   1132c:	bl	10b10 <strcmp@plt>
   11330:	mov	r3, r0
   11334:	cmp	r3, #0
   11338:	bne	11344 <__assert_fail@plt+0x63c>
   1133c:	mov	r3, #1
   11340:	b	11348 <__assert_fail@plt+0x640>
   11344:	mov	r3, #0
   11348:	strb	r3, [fp, #-31]	; 0xffffffe1
   1134c:	ldrb	r3, [fp, #-31]	; 0xffffffe1
   11350:	and	r3, r3, #1
   11354:	strb	r3, [fp, #-31]	; 0xffffffe1
   11358:	mov	r3, #0
   1135c:	strb	r3, [fp, #-14]
   11360:	ldr	r3, [fp, #-44]	; 0xffffffd4
   11364:	ldr	r3, [r3]
   11368:	mov	r0, r3
   1136c:	bl	11c34 <__assert_fail@plt+0xf2c>
   11370:	movw	r1, #27128	; 0x69f8
   11374:	movt	r1, #1
   11378:	mov	r0, #6
   1137c:	bl	10cb4 <setlocale@plt>
   11380:	movw	r1, #28476	; 0x6f3c
   11384:	movt	r1, #1
   11388:	movw	r0, #27152	; 0x6a10
   1138c:	movt	r0, #1
   11390:	bl	10cd8 <bindtextdomain@plt>
   11394:	movw	r0, #27152	; 0x6a10
   11398:	movt	r0, #1
   1139c:	bl	10b88 <textdomain@plt>
   113a0:	movw	r0, #6884	; 0x1ae4
   113a4:	movt	r0, #1
   113a8:	bl	168dc <__assert_fail@plt+0x5bd4>
   113ac:	ldrb	r3, [fp, #-31]	; 0xffffffe1
   113b0:	cmp	r3, #0
   113b4:	beq	11474 <__assert_fail@plt+0x76c>
   113b8:	ldr	r3, [fp, #-40]	; 0xffffffd8
   113bc:	cmp	r3, #2
   113c0:	bne	11474 <__assert_fail@plt+0x76c>
   113c4:	ldr	r3, [fp, #-44]	; 0xffffffd4
   113c8:	add	r3, r3, #4
   113cc:	ldr	r3, [r3]
   113d0:	movw	r1, #28500	; 0x6f54
   113d4:	movt	r1, #1
   113d8:	mov	r0, r3
   113dc:	bl	10b10 <strcmp@plt>
   113e0:	mov	r3, r0
   113e4:	cmp	r3, #0
   113e8:	bne	113f4 <__assert_fail@plt+0x6ec>
   113ec:	mov	r0, #0
   113f0:	bl	10fc8 <__assert_fail@plt+0x2c0>
   113f4:	ldr	r3, [fp, #-44]	; 0xffffffd4
   113f8:	add	r3, r3, #4
   113fc:	ldr	r3, [r3]
   11400:	movw	r1, #28508	; 0x6f5c
   11404:	movt	r1, #1
   11408:	mov	r0, r3
   1140c:	bl	10b10 <strcmp@plt>
   11410:	mov	r3, r0
   11414:	cmp	r3, #0
   11418:	bne	11474 <__assert_fail@plt+0x76c>
   1141c:	movw	r3, #33060	; 0x8124
   11420:	movt	r3, #2
   11424:	ldr	r0, [r3]
   11428:	movw	r3, #32972	; 0x80cc
   1142c:	movt	r3, #2
   11430:	ldr	r2, [r3]
   11434:	mov	r3, #0
   11438:	str	r3, [sp, #8]
   1143c:	movw	r3, #28520	; 0x6f68
   11440:	movt	r3, #1
   11444:	str	r3, [sp, #4]
   11448:	movw	r3, #28532	; 0x6f74
   1144c:	movt	r3, #1
   11450:	str	r3, [sp]
   11454:	mov	r3, r2
   11458:	movw	r2, #26944	; 0x6940
   1145c:	movt	r2, #1
   11460:	movw	r1, #28340	; 0x6eb4
   11464:	movt	r1, #1
   11468:	bl	14c9c <__assert_fail@plt+0x3f94>
   1146c:	mov	r3, #0
   11470:	b	11a68 <__assert_fail@plt+0xd60>
   11474:	ldr	r3, [fp, #-40]	; 0xffffffd8
   11478:	sub	r3, r3, #1
   1147c:	str	r3, [fp, #-40]	; 0xffffffd8
   11480:	ldr	r3, [fp, #-44]	; 0xffffffd4
   11484:	add	r3, r3, #4
   11488:	str	r3, [fp, #-44]	; 0xffffffd4
   1148c:	ldrb	r3, [fp, #-31]	; 0xffffffe1
   11490:	cmp	r3, #0
   11494:	beq	115b0 <__assert_fail@plt+0x8a8>
   11498:	b	11590 <__assert_fail@plt+0x888>
   1149c:	ldr	r3, [fp, #-44]	; 0xffffffd4
   114a0:	ldr	r3, [r3]
   114a4:	add	r3, r3, #1
   114a8:	str	r3, [fp, #-20]	; 0xffffffec
   114ac:	mov	r3, #0
   114b0:	str	r3, [fp, #-24]	; 0xffffffe8
   114b4:	b	114f0 <__assert_fail@plt+0x7e8>
   114b8:	ldr	r2, [fp, #-20]	; 0xffffffec
   114bc:	ldr	r3, [fp, #-24]	; 0xffffffe8
   114c0:	add	r3, r2, r3
   114c4:	ldrb	r3, [r3]
   114c8:	cmp	r3, #101	; 0x65
   114cc:	beq	114e0 <__assert_fail@plt+0x7d8>
   114d0:	cmp	r3, #110	; 0x6e
   114d4:	beq	114e0 <__assert_fail@plt+0x7d8>
   114d8:	cmp	r3, #69	; 0x45
   114dc:	bne	115b8 <__assert_fail@plt+0x8b0>
   114e0:	nop	{0}
   114e4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   114e8:	add	r3, r3, #1
   114ec:	str	r3, [fp, #-24]	; 0xffffffe8
   114f0:	ldr	r2, [fp, #-20]	; 0xffffffec
   114f4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   114f8:	add	r3, r2, r3
   114fc:	ldrb	r3, [r3]
   11500:	cmp	r3, #0
   11504:	bne	114b8 <__assert_fail@plt+0x7b0>
   11508:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1150c:	cmp	r3, #0
   11510:	beq	115c0 <__assert_fail@plt+0x8b8>
   11514:	b	11568 <__assert_fail@plt+0x860>
   11518:	ldr	r3, [fp, #-20]	; 0xffffffec
   1151c:	add	r2, r3, #1
   11520:	str	r2, [fp, #-20]	; 0xffffffec
   11524:	ldrb	r3, [r3]
   11528:	cmp	r3, #101	; 0x65
   1152c:	beq	11544 <__assert_fail@plt+0x83c>
   11530:	cmp	r3, #110	; 0x6e
   11534:	beq	1155c <__assert_fail@plt+0x854>
   11538:	cmp	r3, #69	; 0x45
   1153c:	beq	11550 <__assert_fail@plt+0x848>
   11540:	b	11568 <__assert_fail@plt+0x860>
   11544:	mov	r3, #1
   11548:	strb	r3, [fp, #-14]
   1154c:	b	11568 <__assert_fail@plt+0x860>
   11550:	mov	r3, #0
   11554:	strb	r3, [fp, #-14]
   11558:	b	11568 <__assert_fail@plt+0x860>
   1155c:	mov	r3, #0
   11560:	strb	r3, [fp, #-13]
   11564:	nop	{0}
   11568:	ldr	r3, [fp, #-20]	; 0xffffffec
   1156c:	ldrb	r3, [r3]
   11570:	cmp	r3, #0
   11574:	bne	11518 <__assert_fail@plt+0x810>
   11578:	ldr	r3, [fp, #-40]	; 0xffffffd8
   1157c:	sub	r3, r3, #1
   11580:	str	r3, [fp, #-40]	; 0xffffffd8
   11584:	ldr	r3, [fp, #-44]	; 0xffffffd4
   11588:	add	r3, r3, #4
   1158c:	str	r3, [fp, #-44]	; 0xffffffd4
   11590:	ldr	r3, [fp, #-40]	; 0xffffffd8
   11594:	cmp	r3, #0
   11598:	ble	115b0 <__assert_fail@plt+0x8a8>
   1159c:	ldr	r3, [fp, #-44]	; 0xffffffd4
   115a0:	ldr	r3, [r3]
   115a4:	ldrb	r3, [r3]
   115a8:	cmp	r3, #45	; 0x2d
   115ac:	beq	1149c <__assert_fail@plt+0x794>
   115b0:	nop	{0}
   115b4:	b	115c4 <__assert_fail@plt+0x8bc>
   115b8:	nop	{0}
   115bc:	b	115c4 <__assert_fail@plt+0x8bc>
   115c0:	nop	{0}
   115c4:	ldrb	r3, [fp, #-14]
   115c8:	cmp	r3, #0
   115cc:	bne	119e8 <__assert_fail@plt+0xce0>
   115d0:	ldrb	r3, [fp, #-30]	; 0xffffffe2
   115d4:	cmp	r3, #0
   115d8:	beq	11a44 <__assert_fail@plt+0xd3c>
   115dc:	b	119e8 <__assert_fail@plt+0xce0>
   115e0:	ldr	r3, [fp, #-44]	; 0xffffffd4
   115e4:	ldr	r3, [r3]
   115e8:	str	r3, [fp, #-28]	; 0xffffffe4
   115ec:	b	1199c <__assert_fail@plt+0xc94>
   115f0:	ldrb	r3, [fp, #-29]	; 0xffffffe3
   115f4:	cmp	r3, #92	; 0x5c
   115f8:	bne	1197c <__assert_fail@plt+0xc74>
   115fc:	ldr	r3, [fp, #-28]	; 0xffffffe4
   11600:	ldrb	r3, [r3]
   11604:	cmp	r3, #0
   11608:	beq	1197c <__assert_fail@plt+0xc74>
   1160c:	ldr	r3, [fp, #-28]	; 0xffffffe4
   11610:	add	r2, r3, #1
   11614:	str	r2, [fp, #-28]	; 0xffffffe4
   11618:	ldrb	r3, [r3]
   1161c:	strb	r3, [fp, #-29]	; 0xffffffe3
   11620:	ldrb	r3, [fp, #-29]	; 0xffffffe3
   11624:	sub	r3, r3, #48	; 0x30
   11628:	cmp	r3, #72	; 0x48
   1162c:	ldrls	pc, [pc, r3, lsl #2]
   11630:	b	11970 <__assert_fail@plt+0xc68>
   11634:	andeq	r1, r1, r8, lsl #17
   11638:	andeq	r1, r1, r4, asr #17
   1163c:	andeq	r1, r1, r4, asr #17
   11640:	andeq	r1, r1, r4, asr #17
   11644:	andeq	r1, r1, r4, asr #17
   11648:	andeq	r1, r1, r4, asr #17
   1164c:	andeq	r1, r1, r4, asr #17
   11650:	andeq	r1, r1, r4, asr #17
   11654:	andeq	r1, r1, r0, ror r9
   11658:	andeq	r1, r1, r0, ror r9
   1165c:	andeq	r1, r1, r0, ror r9
   11660:	andeq	r1, r1, r0, ror r9
   11664:	andeq	r1, r1, r0, ror r9
   11668:	andeq	r1, r1, r0, ror r9
   1166c:	andeq	r1, r1, r0, ror r9
   11670:	andeq	r1, r1, r0, ror r9
   11674:	andeq	r1, r1, r0, ror r9
   11678:	andeq	r1, r1, r0, ror r9
   1167c:	andeq	r1, r1, r0, ror r9
   11680:	andeq	r1, r1, r0, ror r9
   11684:	andeq	r1, r1, r0, ror r9
   11688:	andeq	r1, r1, r0, ror r9
   1168c:	andeq	r1, r1, r0, ror r9
   11690:	andeq	r1, r1, r0, ror r9
   11694:	andeq	r1, r1, r0, ror r9
   11698:	andeq	r1, r1, r0, ror r9
   1169c:	andeq	r1, r1, r0, ror r9
   116a0:	andeq	r1, r1, r0, ror r9
   116a4:	andeq	r1, r1, r0, ror r9
   116a8:	andeq	r1, r1, r0, ror r9
   116ac:	andeq	r1, r1, r0, ror r9
   116b0:	andeq	r1, r1, r0, ror r9
   116b4:	andeq	r1, r1, r0, ror r9
   116b8:	andeq	r1, r1, r0, ror r9
   116bc:	andeq	r1, r1, r0, ror r9
   116c0:	andeq	r1, r1, r0, ror r9
   116c4:	andeq	r1, r1, r0, ror r9
   116c8:	andeq	r1, r1, r0, ror r9
   116cc:	andeq	r1, r1, r0, ror r9
   116d0:	andeq	r1, r1, r0, ror r9
   116d4:	andeq	r1, r1, r0, ror r9
   116d8:	andeq	r1, r1, r0, ror r9
   116dc:	andeq	r1, r1, r0, ror r9
   116e0:	andeq	r1, r1, r0, ror r9
   116e4:	andeq	r1, r1, r4, lsl #19
   116e8:	andeq	r1, r1, r0, ror r9
   116ec:	andeq	r1, r1, r0, ror r9
   116f0:	andeq	r1, r1, r0, ror r9
   116f4:	andeq	r1, r1, r0, ror r9
   116f8:	andeq	r1, r1, r8, asr r7
   116fc:	andeq	r1, r1, r4, ror #14
   11700:	andeq	r1, r1, r0, ror r7
   11704:	andeq	r1, r1, r0, ror r9
   11708:	andeq	r1, r1, r8, ror r7
   1170c:	andeq	r1, r1, r4, lsl #15
   11710:	andeq	r1, r1, r0, ror r9
   11714:	andeq	r1, r1, r0, ror r9
   11718:	andeq	r1, r1, r0, ror r9
   1171c:	andeq	r1, r1, r0, ror r9
   11720:	andeq	r1, r1, r0, ror r9
   11724:	andeq	r1, r1, r0, ror r9
   11728:	andeq	r1, r1, r0, ror r9
   1172c:	muleq	r1, r0, r7
   11730:	andeq	r1, r1, r0, ror r9
   11734:	andeq	r1, r1, r0, ror r9
   11738:	andeq	r1, r1, r0, ror r9
   1173c:	muleq	r1, ip, r7
   11740:	andeq	r1, r1, r0, ror r9
   11744:	andeq	r1, r1, r8, lsr #15
   11748:	andeq	r1, r1, r0, ror r9
   1174c:			; <UNDEFINED> instruction: 0x000117b4
   11750:	andeq	r1, r1, r0, ror r9
   11754:	andeq	r1, r1, r0, asr #15
   11758:	mov	r3, #7
   1175c:	strb	r3, [fp, #-29]	; 0xffffffe3
   11760:	b	11990 <__assert_fail@plt+0xc88>
   11764:	mov	r3, #8
   11768:	strb	r3, [fp, #-29]	; 0xffffffe3
   1176c:	b	11990 <__assert_fail@plt+0xc88>
   11770:	mov	r3, #0
   11774:	b	11a68 <__assert_fail@plt+0xd60>
   11778:	mov	r3, #27
   1177c:	strb	r3, [fp, #-29]	; 0xffffffe3
   11780:	b	11990 <__assert_fail@plt+0xc88>
   11784:	mov	r3, #12
   11788:	strb	r3, [fp, #-29]	; 0xffffffe3
   1178c:	b	11990 <__assert_fail@plt+0xc88>
   11790:	mov	r3, #10
   11794:	strb	r3, [fp, #-29]	; 0xffffffe3
   11798:	b	11990 <__assert_fail@plt+0xc88>
   1179c:	mov	r3, #13
   117a0:	strb	r3, [fp, #-29]	; 0xffffffe3
   117a4:	b	11990 <__assert_fail@plt+0xc88>
   117a8:	mov	r3, #9
   117ac:	strb	r3, [fp, #-29]	; 0xffffffe3
   117b0:	b	11990 <__assert_fail@plt+0xc88>
   117b4:	mov	r3, #11
   117b8:	strb	r3, [fp, #-29]	; 0xffffffe3
   117bc:	b	11990 <__assert_fail@plt+0xc88>
   117c0:	ldr	r3, [fp, #-28]	; 0xffffffe4
   117c4:	ldrb	r3, [r3]
   117c8:	strb	r3, [fp, #-32]	; 0xffffffe0
   117cc:	bl	10c30 <__ctype_b_loc@plt>
   117d0:	mov	r3, r0
   117d4:	ldr	r2, [r3]
   117d8:	ldrb	r3, [fp, #-32]	; 0xffffffe0
   117dc:	lsl	r3, r3, #1
   117e0:	add	r3, r2, r3
   117e4:	ldrh	r3, [r3]
   117e8:	and	r3, r3, #4096	; 0x1000
   117ec:	cmp	r3, #0
   117f0:	beq	1196c <__assert_fail@plt+0xc64>
   117f4:	ldr	r3, [fp, #-28]	; 0xffffffe4
   117f8:	add	r3, r3, #1
   117fc:	str	r3, [fp, #-28]	; 0xffffffe4
   11800:	ldrb	r3, [fp, #-32]	; 0xffffffe0
   11804:	mov	r0, r3
   11808:	bl	111a8 <__assert_fail@plt+0x4a0>
   1180c:	mov	r3, r0
   11810:	strb	r3, [fp, #-29]	; 0xffffffe3
   11814:	ldr	r3, [fp, #-28]	; 0xffffffe4
   11818:	ldrb	r3, [r3]
   1181c:	strb	r3, [fp, #-32]	; 0xffffffe0
   11820:	bl	10c30 <__ctype_b_loc@plt>
   11824:	mov	r3, r0
   11828:	ldr	r2, [r3]
   1182c:	ldrb	r3, [fp, #-32]	; 0xffffffe0
   11830:	lsl	r3, r3, #1
   11834:	add	r3, r2, r3
   11838:	ldrh	r3, [r3]
   1183c:	and	r3, r3, #4096	; 0x1000
   11840:	cmp	r3, #0
   11844:	beq	11880 <__assert_fail@plt+0xb78>
   11848:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1184c:	add	r3, r3, #1
   11850:	str	r3, [fp, #-28]	; 0xffffffe4
   11854:	ldrb	r3, [fp, #-29]	; 0xffffffe3
   11858:	lsl	r3, r3, #4
   1185c:	uxtb	r4, r3
   11860:	ldrb	r3, [fp, #-32]	; 0xffffffe0
   11864:	mov	r0, r3
   11868:	bl	111a8 <__assert_fail@plt+0x4a0>
   1186c:	mov	r3, r0
   11870:	uxtb	r3, r3
   11874:	add	r3, r4, r3
   11878:	strb	r3, [fp, #-29]	; 0xffffffe3
   1187c:	b	11990 <__assert_fail@plt+0xc88>
   11880:	nop	{0}
   11884:	b	11990 <__assert_fail@plt+0xc88>
   11888:	mov	r3, #0
   1188c:	strb	r3, [fp, #-29]	; 0xffffffe3
   11890:	ldr	r3, [fp, #-28]	; 0xffffffe4
   11894:	ldrb	r3, [r3]
   11898:	cmp	r3, #47	; 0x2f
   1189c:	bls	1197c <__assert_fail@plt+0xc74>
   118a0:	ldr	r3, [fp, #-28]	; 0xffffffe4
   118a4:	ldrb	r3, [r3]
   118a8:	cmp	r3, #55	; 0x37
   118ac:	bhi	1197c <__assert_fail@plt+0xc74>
   118b0:	ldr	r3, [fp, #-28]	; 0xffffffe4
   118b4:	add	r2, r3, #1
   118b8:	str	r2, [fp, #-28]	; 0xffffffe4
   118bc:	ldrb	r3, [r3]
   118c0:	strb	r3, [fp, #-29]	; 0xffffffe3
   118c4:	ldrb	r3, [fp, #-29]	; 0xffffffe3
   118c8:	sub	r3, r3, #48	; 0x30
   118cc:	strb	r3, [fp, #-29]	; 0xffffffe3
   118d0:	ldr	r3, [fp, #-28]	; 0xffffffe4
   118d4:	ldrb	r3, [r3]
   118d8:	cmp	r3, #47	; 0x2f
   118dc:	bls	1191c <__assert_fail@plt+0xc14>
   118e0:	ldr	r3, [fp, #-28]	; 0xffffffe4
   118e4:	ldrb	r3, [r3]
   118e8:	cmp	r3, #55	; 0x37
   118ec:	bhi	1191c <__assert_fail@plt+0xc14>
   118f0:	ldrb	r3, [fp, #-29]	; 0xffffffe3
   118f4:	lsl	r3, r3, #3
   118f8:	uxtb	r2, r3
   118fc:	ldr	r3, [fp, #-28]	; 0xffffffe4
   11900:	add	r1, r3, #1
   11904:	str	r1, [fp, #-28]	; 0xffffffe4
   11908:	ldrb	r3, [r3]
   1190c:	add	r3, r2, r3
   11910:	uxtb	r3, r3
   11914:	sub	r3, r3, #48	; 0x30
   11918:	strb	r3, [fp, #-29]	; 0xffffffe3
   1191c:	ldr	r3, [fp, #-28]	; 0xffffffe4
   11920:	ldrb	r3, [r3]
   11924:	cmp	r3, #47	; 0x2f
   11928:	bls	1198c <__assert_fail@plt+0xc84>
   1192c:	ldr	r3, [fp, #-28]	; 0xffffffe4
   11930:	ldrb	r3, [r3]
   11934:	cmp	r3, #55	; 0x37
   11938:	bhi	1198c <__assert_fail@plt+0xc84>
   1193c:	ldrb	r3, [fp, #-29]	; 0xffffffe3
   11940:	lsl	r3, r3, #3
   11944:	uxtb	r2, r3
   11948:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1194c:	add	r1, r3, #1
   11950:	str	r1, [fp, #-28]	; 0xffffffe4
   11954:	ldrb	r3, [r3]
   11958:	add	r3, r2, r3
   1195c:	uxtb	r3, r3
   11960:	sub	r3, r3, #48	; 0x30
   11964:	strb	r3, [fp, #-29]	; 0xffffffe3
   11968:	b	1198c <__assert_fail@plt+0xc84>
   1196c:	nop	{0}
   11970:	mov	r0, #92	; 0x5c
   11974:	bl	10cfc <putchar_unlocked@plt>
   11978:	b	11990 <__assert_fail@plt+0xc88>
   1197c:	nop	{0}
   11980:	b	11990 <__assert_fail@plt+0xc88>
   11984:	nop	{0}
   11988:	b	11990 <__assert_fail@plt+0xc88>
   1198c:	nop	{0}
   11990:	ldrb	r3, [fp, #-29]	; 0xffffffe3
   11994:	mov	r0, r3
   11998:	bl	10cfc <putchar_unlocked@plt>
   1199c:	ldr	r3, [fp, #-28]	; 0xffffffe4
   119a0:	add	r2, r3, #1
   119a4:	str	r2, [fp, #-28]	; 0xffffffe4
   119a8:	ldrb	r3, [r3]
   119ac:	strb	r3, [fp, #-29]	; 0xffffffe3
   119b0:	ldrb	r3, [fp, #-29]	; 0xffffffe3
   119b4:	cmp	r3, #0
   119b8:	bne	115f0 <__assert_fail@plt+0x8e8>
   119bc:	ldr	r3, [fp, #-40]	; 0xffffffd8
   119c0:	sub	r3, r3, #1
   119c4:	str	r3, [fp, #-40]	; 0xffffffd8
   119c8:	ldr	r3, [fp, #-44]	; 0xffffffd4
   119cc:	add	r3, r3, #4
   119d0:	str	r3, [fp, #-44]	; 0xffffffd4
   119d4:	ldr	r3, [fp, #-40]	; 0xffffffd8
   119d8:	cmp	r3, #0
   119dc:	ble	119e8 <__assert_fail@plt+0xce0>
   119e0:	mov	r0, #32
   119e4:	bl	10cfc <putchar_unlocked@plt>
   119e8:	ldr	r3, [fp, #-40]	; 0xffffffd8
   119ec:	cmp	r3, #0
   119f0:	bgt	115e0 <__assert_fail@plt+0x8d8>
   119f4:	b	11a50 <__assert_fail@plt+0xd48>
   119f8:	ldr	r3, [fp, #-44]	; 0xffffffd4
   119fc:	ldr	r2, [r3]
   11a00:	movw	r3, #33060	; 0x8124
   11a04:	movt	r3, #2
   11a08:	ldr	r3, [r3]
   11a0c:	mov	r1, r3
   11a10:	mov	r0, r2
   11a14:	bl	10b04 <fputs_unlocked@plt>
   11a18:	ldr	r3, [fp, #-40]	; 0xffffffd8
   11a1c:	sub	r3, r3, #1
   11a20:	str	r3, [fp, #-40]	; 0xffffffd8
   11a24:	ldr	r3, [fp, #-44]	; 0xffffffd4
   11a28:	add	r3, r3, #4
   11a2c:	str	r3, [fp, #-44]	; 0xffffffd4
   11a30:	ldr	r3, [fp, #-40]	; 0xffffffd8
   11a34:	cmp	r3, #0
   11a38:	ble	11a44 <__assert_fail@plt+0xd3c>
   11a3c:	mov	r0, #32
   11a40:	bl	10cfc <putchar_unlocked@plt>
   11a44:	ldr	r3, [fp, #-40]	; 0xffffffd8
   11a48:	cmp	r3, #0
   11a4c:	bgt	119f8 <__assert_fail@plt+0xcf0>
   11a50:	ldrb	r3, [fp, #-13]
   11a54:	cmp	r3, #0
   11a58:	beq	11a64 <__assert_fail@plt+0xd5c>
   11a5c:	mov	r0, #10
   11a60:	bl	10cfc <putchar_unlocked@plt>
   11a64:	mov	r3, #0
   11a68:	mov	r0, r3
   11a6c:	sub	sp, fp, #8
   11a70:	ldr	r4, [sp]
   11a74:	ldr	fp, [sp, #4]
   11a78:	add	sp, sp, #8
   11a7c:	pop	{pc}		; (ldr pc, [sp], #4)
   11a80:	push	{fp}		; (str fp, [sp, #-4]!)
   11a84:	add	fp, sp, #0
   11a88:	sub	sp, sp, #12
   11a8c:	str	r0, [fp, #-8]
   11a90:	movw	r3, #33068	; 0x812c
   11a94:	movt	r3, #2
   11a98:	ldr	r2, [fp, #-8]
   11a9c:	str	r2, [r3]
   11aa0:	nop	{0}
   11aa4:	add	sp, fp, #0
   11aa8:	pop	{fp}		; (ldr fp, [sp], #4)
   11aac:	bx	lr
   11ab0:	push	{fp}		; (str fp, [sp, #-4]!)
   11ab4:	add	fp, sp, #0
   11ab8:	sub	sp, sp, #12
   11abc:	mov	r3, r0
   11ac0:	strb	r3, [fp, #-5]
   11ac4:	movw	r3, #33072	; 0x8130
   11ac8:	movt	r3, #2
   11acc:	ldrb	r2, [fp, #-5]
   11ad0:	strb	r2, [r3]
   11ad4:	nop	{0}
   11ad8:	add	sp, fp, #0
   11adc:	pop	{fp}		; (ldr fp, [sp], #4)
   11ae0:	bx	lr
   11ae4:	str	r4, [sp, #-12]!
   11ae8:	str	fp, [sp, #4]
   11aec:	str	lr, [sp, #8]
   11af0:	add	fp, sp, #8
   11af4:	sub	sp, sp, #20
   11af8:	movw	r3, #33060	; 0x8124
   11afc:	movt	r3, #2
   11b00:	ldr	r3, [r3]
   11b04:	mov	r0, r3
   11b08:	bl	15998 <__assert_fail@plt+0x4c90>
   11b0c:	mov	r3, r0
   11b10:	cmp	r3, #0
   11b14:	beq	11be8 <__assert_fail@plt+0xee0>
   11b18:	movw	r3, #33072	; 0x8130
   11b1c:	movt	r3, #2
   11b20:	ldrb	r3, [r3]
   11b24:	eor	r3, r3, #1
   11b28:	uxtb	r3, r3
   11b2c:	cmp	r3, #0
   11b30:	bne	11b48 <__assert_fail@plt+0xe40>
   11b34:	bl	10c6c <__errno_location@plt>
   11b38:	mov	r3, r0
   11b3c:	ldr	r3, [r3]
   11b40:	cmp	r3, #32
   11b44:	beq	11be8 <__assert_fail@plt+0xee0>
   11b48:	movw	r0, #28568	; 0x6f98
   11b4c:	movt	r0, #1
   11b50:	bl	10c48 <gettext@plt>
   11b54:	str	r0, [fp, #-16]
   11b58:	movw	r3, #33068	; 0x812c
   11b5c:	movt	r3, #2
   11b60:	ldr	r3, [r3]
   11b64:	cmp	r3, #0
   11b68:	beq	11bb4 <__assert_fail@plt+0xeac>
   11b6c:	bl	10c6c <__errno_location@plt>
   11b70:	mov	r3, r0
   11b74:	ldr	r4, [r3]
   11b78:	movw	r3, #33068	; 0x812c
   11b7c:	movt	r3, #2
   11b80:	ldr	r3, [r3]
   11b84:	mov	r0, r3
   11b88:	bl	14220 <__assert_fail@plt+0x3518>
   11b8c:	mov	r2, r0
   11b90:	ldr	r3, [fp, #-16]
   11b94:	str	r3, [sp]
   11b98:	mov	r3, r2
   11b9c:	movw	r2, #28580	; 0x6fa4
   11ba0:	movt	r2, #1
   11ba4:	mov	r1, r4
   11ba8:	mov	r0, #0
   11bac:	bl	10be8 <error@plt>
   11bb0:	b	11bd4 <__assert_fail@plt+0xecc>
   11bb4:	bl	10c6c <__errno_location@plt>
   11bb8:	mov	r3, r0
   11bbc:	ldr	r1, [r3]
   11bc0:	ldr	r3, [fp, #-16]
   11bc4:	movw	r2, #28588	; 0x6fac
   11bc8:	movt	r2, #1
   11bcc:	mov	r0, #0
   11bd0:	bl	10be8 <error@plt>
   11bd4:	movw	r3, #32976	; 0x80d0
   11bd8:	movt	r3, #2
   11bdc:	ldr	r3, [r3]
   11be0:	mov	r0, r3
   11be4:	bl	10b40 <_exit@plt>
   11be8:	movw	r3, #33056	; 0x8120
   11bec:	movt	r3, #2
   11bf0:	ldr	r3, [r3]
   11bf4:	mov	r0, r3
   11bf8:	bl	15998 <__assert_fail@plt+0x4c90>
   11bfc:	mov	r3, r0
   11c00:	cmp	r3, #0
   11c04:	beq	11c1c <__assert_fail@plt+0xf14>
   11c08:	movw	r3, #32976	; 0x80d0
   11c0c:	movt	r3, #2
   11c10:	ldr	r3, [r3]
   11c14:	mov	r0, r3
   11c18:	bl	10b40 <_exit@plt>
   11c1c:	nop	{0}
   11c20:	sub	sp, fp, #8
   11c24:	ldr	r4, [sp]
   11c28:	ldr	fp, [sp, #4]
   11c2c:	add	sp, sp, #8
   11c30:	pop	{pc}		; (ldr pc, [sp], #4)
   11c34:	str	fp, [sp, #-8]!
   11c38:	str	lr, [sp, #4]
   11c3c:	add	fp, sp, #4
   11c40:	sub	sp, sp, #16
   11c44:	str	r0, [fp, #-16]
   11c48:	ldr	r3, [fp, #-16]
   11c4c:	cmp	r3, #0
   11c50:	bne	11c78 <__assert_fail@plt+0xf70>
   11c54:	movw	r3, #33056	; 0x8120
   11c58:	movt	r3, #2
   11c5c:	ldr	r3, [r3]
   11c60:	mov	r2, #55	; 0x37
   11c64:	mov	r1, #1
   11c68:	movw	r0, #28592	; 0x6fb0
   11c6c:	movt	r0, #1
   11c70:	bl	10ba0 <fwrite@plt>
   11c74:	bl	10cf0 <abort@plt>
   11c78:	mov	r1, #47	; 0x2f
   11c7c:	ldr	r0, [fp, #-16]
   11c80:	bl	10cc0 <strrchr@plt>
   11c84:	str	r0, [fp, #-8]
   11c88:	ldr	r3, [fp, #-8]
   11c8c:	cmp	r3, #0
   11c90:	beq	11ca0 <__assert_fail@plt+0xf98>
   11c94:	ldr	r3, [fp, #-8]
   11c98:	add	r3, r3, #1
   11c9c:	b	11ca4 <__assert_fail@plt+0xf9c>
   11ca0:	ldr	r3, [fp, #-16]
   11ca4:	str	r3, [fp, #-12]
   11ca8:	ldr	r2, [fp, #-12]
   11cac:	ldr	r3, [fp, #-16]
   11cb0:	sub	r3, r2, r3
   11cb4:	cmp	r3, #6
   11cb8:	ble	11d28 <__assert_fail@plt+0x1020>
   11cbc:	ldr	r3, [fp, #-12]
   11cc0:	sub	r3, r3, #7
   11cc4:	mov	r2, #7
   11cc8:	movw	r1, #28648	; 0x6fe8
   11ccc:	movt	r1, #1
   11cd0:	mov	r0, r3
   11cd4:	bl	10ce4 <strncmp@plt>
   11cd8:	mov	r3, r0
   11cdc:	cmp	r3, #0
   11ce0:	bne	11d28 <__assert_fail@plt+0x1020>
   11ce4:	ldr	r3, [fp, #-12]
   11ce8:	str	r3, [fp, #-16]
   11cec:	mov	r2, #3
   11cf0:	movw	r1, #28656	; 0x6ff0
   11cf4:	movt	r1, #1
   11cf8:	ldr	r0, [fp, #-12]
   11cfc:	bl	10ce4 <strncmp@plt>
   11d00:	mov	r3, r0
   11d04:	cmp	r3, #0
   11d08:	bne	11d28 <__assert_fail@plt+0x1020>
   11d0c:	ldr	r3, [fp, #-12]
   11d10:	add	r3, r3, #3
   11d14:	str	r3, [fp, #-16]
   11d18:	movw	r3, #33048	; 0x8118
   11d1c:	movt	r3, #2
   11d20:	ldr	r2, [fp, #-16]
   11d24:	str	r2, [r3]
   11d28:	movw	r3, #33076	; 0x8134
   11d2c:	movt	r3, #2
   11d30:	ldr	r2, [fp, #-16]
   11d34:	str	r2, [r3]
   11d38:	movw	r3, #33052	; 0x811c
   11d3c:	movt	r3, #2
   11d40:	ldr	r2, [fp, #-16]
   11d44:	str	r2, [r3]
   11d48:	nop	{0}
   11d4c:	sub	sp, fp, #4
   11d50:	ldr	fp, [sp]
   11d54:	add	sp, sp, #4
   11d58:	pop	{pc}		; (ldr pc, [sp], #4)
   11d5c:	str	fp, [sp, #-8]!
   11d60:	str	lr, [sp, #4]
   11d64:	add	fp, sp, #4
   11d68:	sub	sp, sp, #16
   11d6c:	str	r0, [fp, #-16]
   11d70:	bl	10c6c <__errno_location@plt>
   11d74:	mov	r3, r0
   11d78:	ldr	r3, [r3]
   11d7c:	str	r3, [fp, #-8]
   11d80:	ldr	r3, [fp, #-16]
   11d84:	cmp	r3, #0
   11d88:	beq	11d94 <__assert_fail@plt+0x108c>
   11d8c:	ldr	r3, [fp, #-16]
   11d90:	b	11d9c <__assert_fail@plt+0x1094>
   11d94:	movw	r3, #33080	; 0x8138
   11d98:	movt	r3, #2
   11d9c:	mov	r1, #48	; 0x30
   11da0:	mov	r0, r3
   11da4:	bl	1553c <__assert_fail@plt+0x4834>
   11da8:	mov	r3, r0
   11dac:	str	r3, [fp, #-12]
   11db0:	bl	10c6c <__errno_location@plt>
   11db4:	mov	r2, r0
   11db8:	ldr	r3, [fp, #-8]
   11dbc:	str	r3, [r2]
   11dc0:	ldr	r3, [fp, #-12]
   11dc4:	mov	r0, r3
   11dc8:	sub	sp, fp, #4
   11dcc:	ldr	fp, [sp]
   11dd0:	add	sp, sp, #4
   11dd4:	pop	{pc}		; (ldr pc, [sp], #4)
   11dd8:	push	{fp}		; (str fp, [sp, #-4]!)
   11ddc:	add	fp, sp, #0
   11de0:	sub	sp, sp, #12
   11de4:	str	r0, [fp, #-8]
   11de8:	ldr	r3, [fp, #-8]
   11dec:	cmp	r3, #0
   11df0:	beq	11dfc <__assert_fail@plt+0x10f4>
   11df4:	ldr	r3, [fp, #-8]
   11df8:	b	11e04 <__assert_fail@plt+0x10fc>
   11dfc:	movw	r3, #33080	; 0x8138
   11e00:	movt	r3, #2
   11e04:	ldr	r3, [r3]
   11e08:	mov	r0, r3
   11e0c:	add	sp, fp, #0
   11e10:	pop	{fp}		; (ldr fp, [sp], #4)
   11e14:	bx	lr
   11e18:	push	{fp}		; (str fp, [sp, #-4]!)
   11e1c:	add	fp, sp, #0
   11e20:	sub	sp, sp, #12
   11e24:	str	r0, [fp, #-8]
   11e28:	str	r1, [fp, #-12]
   11e2c:	ldr	r3, [fp, #-8]
   11e30:	cmp	r3, #0
   11e34:	beq	11e40 <__assert_fail@plt+0x1138>
   11e38:	ldr	r3, [fp, #-8]
   11e3c:	b	11e48 <__assert_fail@plt+0x1140>
   11e40:	movw	r3, #33080	; 0x8138
   11e44:	movt	r3, #2
   11e48:	ldr	r2, [fp, #-12]
   11e4c:	str	r2, [r3]
   11e50:	nop	{0}
   11e54:	add	sp, fp, #0
   11e58:	pop	{fp}		; (ldr fp, [sp], #4)
   11e5c:	bx	lr
   11e60:	push	{fp}		; (str fp, [sp, #-4]!)
   11e64:	add	fp, sp, #0
   11e68:	sub	sp, sp, #36	; 0x24
   11e6c:	str	r0, [fp, #-24]	; 0xffffffe8
   11e70:	mov	r3, r1
   11e74:	str	r2, [fp, #-32]	; 0xffffffe0
   11e78:	strb	r3, [fp, #-25]	; 0xffffffe7
   11e7c:	ldrb	r3, [fp, #-25]	; 0xffffffe7
   11e80:	strb	r3, [fp, #-5]
   11e84:	ldr	r3, [fp, #-24]	; 0xffffffe8
   11e88:	cmp	r3, #0
   11e8c:	beq	11e98 <__assert_fail@plt+0x1190>
   11e90:	ldr	r3, [fp, #-24]	; 0xffffffe8
   11e94:	b	11ea0 <__assert_fail@plt+0x1198>
   11e98:	movw	r3, #33080	; 0x8138
   11e9c:	movt	r3, #2
   11ea0:	add	r2, r3, #8
   11ea4:	ldrb	r3, [fp, #-5]
   11ea8:	lsr	r3, r3, #5
   11eac:	uxtb	r3, r3
   11eb0:	lsl	r3, r3, #2
   11eb4:	add	r3, r2, r3
   11eb8:	str	r3, [fp, #-12]
   11ebc:	ldrb	r3, [fp, #-5]
   11ec0:	and	r3, r3, #31
   11ec4:	str	r3, [fp, #-16]
   11ec8:	ldr	r3, [fp, #-12]
   11ecc:	ldr	r2, [r3]
   11ed0:	ldr	r3, [fp, #-16]
   11ed4:	lsr	r3, r2, r3
   11ed8:	and	r3, r3, #1
   11edc:	str	r3, [fp, #-20]	; 0xffffffec
   11ee0:	ldr	r3, [fp, #-12]
   11ee4:	ldr	r3, [r3]
   11ee8:	ldr	r2, [fp, #-32]	; 0xffffffe0
   11eec:	and	r1, r2, #1
   11ef0:	ldr	r2, [fp, #-20]	; 0xffffffec
   11ef4:	eor	r1, r1, r2
   11ef8:	ldr	r2, [fp, #-16]
   11efc:	lsl	r2, r1, r2
   11f00:	eor	r2, r2, r3
   11f04:	ldr	r3, [fp, #-12]
   11f08:	str	r2, [r3]
   11f0c:	ldr	r3, [fp, #-20]	; 0xffffffec
   11f10:	mov	r0, r3
   11f14:	add	sp, fp, #0
   11f18:	pop	{fp}		; (ldr fp, [sp], #4)
   11f1c:	bx	lr
   11f20:	push	{fp}		; (str fp, [sp, #-4]!)
   11f24:	add	fp, sp, #0
   11f28:	sub	sp, sp, #20
   11f2c:	str	r0, [fp, #-16]
   11f30:	str	r1, [fp, #-20]	; 0xffffffec
   11f34:	ldr	r3, [fp, #-16]
   11f38:	cmp	r3, #0
   11f3c:	bne	11f4c <__assert_fail@plt+0x1244>
   11f40:	movw	r3, #33080	; 0x8138
   11f44:	movt	r3, #2
   11f48:	str	r3, [fp, #-16]
   11f4c:	ldr	r3, [fp, #-16]
   11f50:	ldr	r3, [r3, #4]
   11f54:	str	r3, [fp, #-8]
   11f58:	ldr	r3, [fp, #-16]
   11f5c:	ldr	r2, [fp, #-20]	; 0xffffffec
   11f60:	str	r2, [r3, #4]
   11f64:	ldr	r3, [fp, #-8]
   11f68:	mov	r0, r3
   11f6c:	add	sp, fp, #0
   11f70:	pop	{fp}		; (ldr fp, [sp], #4)
   11f74:	bx	lr
   11f78:	str	fp, [sp, #-8]!
   11f7c:	str	lr, [sp, #4]
   11f80:	add	fp, sp, #4
   11f84:	sub	sp, sp, #16
   11f88:	str	r0, [fp, #-8]
   11f8c:	str	r1, [fp, #-12]
   11f90:	str	r2, [fp, #-16]
   11f94:	ldr	r3, [fp, #-8]
   11f98:	cmp	r3, #0
   11f9c:	bne	11fac <__assert_fail@plt+0x12a4>
   11fa0:	movw	r3, #33080	; 0x8138
   11fa4:	movt	r3, #2
   11fa8:	str	r3, [fp, #-8]
   11fac:	ldr	r3, [fp, #-8]
   11fb0:	mov	r2, #10
   11fb4:	str	r2, [r3]
   11fb8:	ldr	r3, [fp, #-12]
   11fbc:	cmp	r3, #0
   11fc0:	beq	11fd0 <__assert_fail@plt+0x12c8>
   11fc4:	ldr	r3, [fp, #-16]
   11fc8:	cmp	r3, #0
   11fcc:	bne	11fd4 <__assert_fail@plt+0x12cc>
   11fd0:	bl	10cf0 <abort@plt>
   11fd4:	ldr	r3, [fp, #-8]
   11fd8:	ldr	r2, [fp, #-12]
   11fdc:	str	r2, [r3, #40]	; 0x28
   11fe0:	ldr	r3, [fp, #-8]
   11fe4:	ldr	r2, [fp, #-16]
   11fe8:	str	r2, [r3, #44]	; 0x2c
   11fec:	nop	{0}
   11ff0:	sub	sp, fp, #4
   11ff4:	ldr	fp, [sp]
   11ff8:	add	sp, sp, #4
   11ffc:	pop	{pc}		; (ldr pc, [sp], #4)
   12000:	str	fp, [sp, #-8]!
   12004:	str	lr, [sp, #4]
   12008:	add	fp, sp, #4
   1200c:	sub	sp, sp, #56	; 0x38
   12010:	str	r0, [fp, #-56]	; 0xffffffc8
   12014:	str	r1, [fp, #-60]	; 0xffffffc4
   12018:	sub	r1, fp, #52	; 0x34
   1201c:	mov	r2, #0
   12020:	mov	r3, #0
   12024:	strd	r2, [r1]
   12028:	strd	r2, [r1, #8]
   1202c:	strd	r2, [r1, #16]
   12030:	strd	r2, [r1, #24]
   12034:	strd	r2, [r1, #32]
   12038:	strd	r2, [r1, #40]	; 0x28
   1203c:	ldr	r3, [fp, #-60]	; 0xffffffc4
   12040:	cmp	r3, #10
   12044:	bne	1204c <__assert_fail@plt+0x1344>
   12048:	bl	10cf0 <abort@plt>
   1204c:	ldr	r3, [fp, #-60]	; 0xffffffc4
   12050:	str	r3, [fp, #-52]	; 0xffffffcc
   12054:	ldr	r3, [fp, #-56]	; 0xffffffc8
   12058:	mov	r2, r3
   1205c:	sub	r3, fp, #52	; 0x34
   12060:	ldrd	r0, [r3]
   12064:	strd	r0, [r2]
   12068:	ldrd	r0, [r3, #8]
   1206c:	strd	r0, [r2, #8]
   12070:	ldrd	r0, [r3, #16]
   12074:	strd	r0, [r2, #16]
   12078:	ldrd	r0, [r3, #24]
   1207c:	strd	r0, [r2, #24]
   12080:	ldrd	r0, [r3, #32]
   12084:	strd	r0, [r2, #32]
   12088:	ldrd	r0, [r3, #40]	; 0x28
   1208c:	strd	r0, [r2, #40]	; 0x28
   12090:	ldr	r0, [fp, #-56]	; 0xffffffc8
   12094:	sub	sp, fp, #4
   12098:	ldr	fp, [sp]
   1209c:	add	sp, sp, #4
   120a0:	pop	{pc}		; (ldr pc, [sp], #4)
   120a4:	str	fp, [sp, #-8]!
   120a8:	str	lr, [sp, #4]
   120ac:	add	fp, sp, #4
   120b0:	sub	sp, sp, #16
   120b4:	str	r0, [fp, #-16]
   120b8:	str	r1, [fp, #-20]	; 0xffffffec
   120bc:	ldr	r0, [fp, #-16]
   120c0:	bl	10c48 <gettext@plt>
   120c4:	str	r0, [fp, #-8]
   120c8:	ldr	r2, [fp, #-8]
   120cc:	ldr	r3, [fp, #-16]
   120d0:	cmp	r2, r3
   120d4:	beq	120e0 <__assert_fail@plt+0x13d8>
   120d8:	ldr	r3, [fp, #-8]
   120dc:	b	12190 <__assert_fail@plt+0x1488>
   120e0:	bl	15f50 <__assert_fail@plt+0x5248>
   120e4:	str	r0, [fp, #-12]
   120e8:	movw	r1, #28848	; 0x70b0
   120ec:	movt	r1, #1
   120f0:	ldr	r0, [fp, #-12]
   120f4:	bl	158ec <__assert_fail@plt+0x4be4>
   120f8:	mov	r3, r0
   120fc:	cmp	r3, #0
   12100:	bne	1212c <__assert_fail@plt+0x1424>
   12104:	ldr	r3, [fp, #-16]
   12108:	ldrb	r3, [r3]
   1210c:	cmp	r3, #96	; 0x60
   12110:	bne	12120 <__assert_fail@plt+0x1418>
   12114:	movw	r3, #28856	; 0x70b8
   12118:	movt	r3, #1
   1211c:	b	12190 <__assert_fail@plt+0x1488>
   12120:	movw	r3, #28860	; 0x70bc
   12124:	movt	r3, #1
   12128:	b	12190 <__assert_fail@plt+0x1488>
   1212c:	movw	r1, #28864	; 0x70c0
   12130:	movt	r1, #1
   12134:	ldr	r0, [fp, #-12]
   12138:	bl	158ec <__assert_fail@plt+0x4be4>
   1213c:	mov	r3, r0
   12140:	cmp	r3, #0
   12144:	bne	12170 <__assert_fail@plt+0x1468>
   12148:	ldr	r3, [fp, #-16]
   1214c:	ldrb	r3, [r3]
   12150:	cmp	r3, #96	; 0x60
   12154:	bne	12164 <__assert_fail@plt+0x145c>
   12158:	movw	r3, #28872	; 0x70c8
   1215c:	movt	r3, #1
   12160:	b	12190 <__assert_fail@plt+0x1488>
   12164:	movw	r3, #28876	; 0x70cc
   12168:	movt	r3, #1
   1216c:	b	12190 <__assert_fail@plt+0x1488>
   12170:	ldr	r3, [fp, #-20]	; 0xffffffec
   12174:	cmp	r3, #9
   12178:	bne	12188 <__assert_fail@plt+0x1480>
   1217c:	movw	r3, #28880	; 0x70d0
   12180:	movt	r3, #1
   12184:	b	12190 <__assert_fail@plt+0x1488>
   12188:	movw	r3, #28884	; 0x70d4
   1218c:	movt	r3, #1
   12190:	mov	r0, r3
   12194:	sub	sp, fp, #4
   12198:	ldr	fp, [sp]
   1219c:	add	sp, sp, #4
   121a0:	pop	{pc}		; (ldr pc, [sp], #4)
   121a4:	str	r4, [sp, #-12]!
   121a8:	str	fp, [sp, #4]
   121ac:	str	lr, [sp, #8]
   121b0:	add	fp, sp, #8
   121b4:	sub	sp, sp, #116	; 0x74
   121b8:	str	r0, [fp, #-88]	; 0xffffffa8
   121bc:	str	r1, [fp, #-92]	; 0xffffffa4
   121c0:	str	r2, [fp, #-96]	; 0xffffffa0
   121c4:	str	r3, [fp, #-100]	; 0xffffff9c
   121c8:	mov	r3, #0
   121cc:	str	r3, [fp, #-20]	; 0xffffffec
   121d0:	mov	r3, #0
   121d4:	str	r3, [fp, #-24]	; 0xffffffe8
   121d8:	mov	r3, #0
   121dc:	str	r3, [fp, #-28]	; 0xffffffe4
   121e0:	mov	r3, #0
   121e4:	str	r3, [fp, #-32]	; 0xffffffe0
   121e8:	mov	r3, #0
   121ec:	strb	r3, [fp, #-33]	; 0xffffffdf
   121f0:	bl	10bb8 <__ctype_get_mb_cur_max@plt>
   121f4:	mov	r3, r0
   121f8:	cmp	r3, #1
   121fc:	moveq	r3, #1
   12200:	movne	r3, #0
   12204:	strb	r3, [fp, #-57]	; 0xffffffc7
   12208:	ldr	r3, [fp, #8]
   1220c:	and	r3, r3, #2
   12210:	cmp	r3, #0
   12214:	movne	r3, #1
   12218:	moveq	r3, #0
   1221c:	strb	r3, [fp, #-34]	; 0xffffffde
   12220:	mov	r3, #0
   12224:	strb	r3, [fp, #-35]	; 0xffffffdd
   12228:	mov	r3, #0
   1222c:	strb	r3, [fp, #-36]	; 0xffffffdc
   12230:	mov	r3, #1
   12234:	strb	r3, [fp, #-37]	; 0xffffffdb
   12238:	ldr	r3, [fp, #4]
   1223c:	cmp	r3, #10
   12240:	ldrls	pc, [pc, r3, lsl #2]
   12244:	b	1245c <__assert_fail@plt+0x1754>
   12248:	andeq	r2, r1, r0, asr r4
   1224c:	andeq	r2, r1, r8, asr #7
   12250:	andeq	r2, r1, ip, ror #7
   12254:	andeq	r2, r1, r0, asr #7
   12258:	ldrdeq	r2, [r1], -r0
   1225c:	andeq	r2, r1, r4, lsl #5
   12260:	andeq	r2, r1, r4, ror r2
   12264:	andeq	r2, r1, r8, ror #5
   12268:	strdeq	r2, [r1], -ip
   1226c:	strdeq	r2, [r1], -ip
   12270:	strdeq	r2, [r1], -ip
   12274:	mov	r3, #5
   12278:	str	r3, [fp, #4]
   1227c:	mov	r3, #1
   12280:	strb	r3, [fp, #-34]	; 0xffffffde
   12284:	ldrb	r3, [fp, #-34]	; 0xffffffde
   12288:	eor	r3, r3, #1
   1228c:	uxtb	r3, r3
   12290:	cmp	r3, #0
   12294:	beq	122c8 <__assert_fail@plt+0x15c0>
   12298:	ldr	r2, [fp, #-20]	; 0xffffffec
   1229c:	ldr	r3, [fp, #-92]	; 0xffffffa4
   122a0:	cmp	r2, r3
   122a4:	bcs	122bc <__assert_fail@plt+0x15b4>
   122a8:	ldr	r2, [fp, #-88]	; 0xffffffa8
   122ac:	ldr	r3, [fp, #-20]	; 0xffffffec
   122b0:	add	r3, r2, r3
   122b4:	mov	r2, #34	; 0x22
   122b8:	strb	r2, [r3]
   122bc:	ldr	r3, [fp, #-20]	; 0xffffffec
   122c0:	add	r3, r3, #1
   122c4:	str	r3, [fp, #-20]	; 0xffffffec
   122c8:	mov	r3, #1
   122cc:	strb	r3, [fp, #-33]	; 0xffffffdf
   122d0:	movw	r3, #28880	; 0x70d0
   122d4:	movt	r3, #1
   122d8:	str	r3, [fp, #-28]	; 0xffffffe4
   122dc:	mov	r3, #1
   122e0:	str	r3, [fp, #-32]	; 0xffffffe0
   122e4:	b	12460 <__assert_fail@plt+0x1758>
   122e8:	mov	r3, #1
   122ec:	strb	r3, [fp, #-33]	; 0xffffffdf
   122f0:	mov	r3, #0
   122f4:	strb	r3, [fp, #-34]	; 0xffffffde
   122f8:	b	12460 <__assert_fail@plt+0x1758>
   122fc:	ldr	r3, [fp, #4]
   12300:	cmp	r3, #10
   12304:	beq	12330 <__assert_fail@plt+0x1628>
   12308:	ldr	r1, [fp, #4]
   1230c:	movw	r0, #28888	; 0x70d8
   12310:	movt	r0, #1
   12314:	bl	120a4 <__assert_fail@plt+0x139c>
   12318:	str	r0, [fp, #16]
   1231c:	ldr	r1, [fp, #4]
   12320:	movw	r0, #28884	; 0x70d4
   12324:	movt	r0, #1
   12328:	bl	120a4 <__assert_fail@plt+0x139c>
   1232c:	str	r0, [fp, #20]
   12330:	ldrb	r3, [fp, #-34]	; 0xffffffde
   12334:	eor	r3, r3, #1
   12338:	uxtb	r3, r3
   1233c:	cmp	r3, #0
   12340:	beq	123a0 <__assert_fail@plt+0x1698>
   12344:	ldr	r3, [fp, #16]
   12348:	str	r3, [fp, #-28]	; 0xffffffe4
   1234c:	b	12390 <__assert_fail@plt+0x1688>
   12350:	ldr	r2, [fp, #-20]	; 0xffffffec
   12354:	ldr	r3, [fp, #-92]	; 0xffffffa4
   12358:	cmp	r2, r3
   1235c:	bcs	12378 <__assert_fail@plt+0x1670>
   12360:	ldr	r2, [fp, #-88]	; 0xffffffa8
   12364:	ldr	r3, [fp, #-20]	; 0xffffffec
   12368:	add	r3, r2, r3
   1236c:	ldr	r2, [fp, #-28]	; 0xffffffe4
   12370:	ldrb	r2, [r2]
   12374:	strb	r2, [r3]
   12378:	ldr	r3, [fp, #-20]	; 0xffffffec
   1237c:	add	r3, r3, #1
   12380:	str	r3, [fp, #-20]	; 0xffffffec
   12384:	ldr	r3, [fp, #-28]	; 0xffffffe4
   12388:	add	r3, r3, #1
   1238c:	str	r3, [fp, #-28]	; 0xffffffe4
   12390:	ldr	r3, [fp, #-28]	; 0xffffffe4
   12394:	ldrb	r3, [r3]
   12398:	cmp	r3, #0
   1239c:	bne	12350 <__assert_fail@plt+0x1648>
   123a0:	mov	r3, #1
   123a4:	strb	r3, [fp, #-33]	; 0xffffffdf
   123a8:	ldr	r3, [fp, #20]
   123ac:	str	r3, [fp, #-28]	; 0xffffffe4
   123b0:	ldr	r0, [fp, #-28]	; 0xffffffe4
   123b4:	bl	10c54 <strlen@plt>
   123b8:	str	r0, [fp, #-32]	; 0xffffffe0
   123bc:	b	12460 <__assert_fail@plt+0x1758>
   123c0:	mov	r3, #1
   123c4:	strb	r3, [fp, #-33]	; 0xffffffdf
   123c8:	mov	r3, #1
   123cc:	strb	r3, [fp, #-34]	; 0xffffffde
   123d0:	ldrb	r3, [fp, #-34]	; 0xffffffde
   123d4:	eor	r3, r3, #1
   123d8:	uxtb	r3, r3
   123dc:	cmp	r3, #0
   123e0:	beq	123ec <__assert_fail@plt+0x16e4>
   123e4:	mov	r3, #1
   123e8:	strb	r3, [fp, #-33]	; 0xffffffdf
   123ec:	mov	r3, #2
   123f0:	str	r3, [fp, #4]
   123f4:	ldrb	r3, [fp, #-34]	; 0xffffffde
   123f8:	eor	r3, r3, #1
   123fc:	uxtb	r3, r3
   12400:	cmp	r3, #0
   12404:	beq	12438 <__assert_fail@plt+0x1730>
   12408:	ldr	r2, [fp, #-20]	; 0xffffffec
   1240c:	ldr	r3, [fp, #-92]	; 0xffffffa4
   12410:	cmp	r2, r3
   12414:	bcs	1242c <__assert_fail@plt+0x1724>
   12418:	ldr	r2, [fp, #-88]	; 0xffffffa8
   1241c:	ldr	r3, [fp, #-20]	; 0xffffffec
   12420:	add	r3, r2, r3
   12424:	mov	r2, #39	; 0x27
   12428:	strb	r2, [r3]
   1242c:	ldr	r3, [fp, #-20]	; 0xffffffec
   12430:	add	r3, r3, #1
   12434:	str	r3, [fp, #-20]	; 0xffffffec
   12438:	movw	r3, #28884	; 0x70d4
   1243c:	movt	r3, #1
   12440:	str	r3, [fp, #-28]	; 0xffffffe4
   12444:	mov	r3, #1
   12448:	str	r3, [fp, #-32]	; 0xffffffe0
   1244c:	b	12460 <__assert_fail@plt+0x1758>
   12450:	mov	r3, #0
   12454:	strb	r3, [fp, #-34]	; 0xffffffde
   12458:	b	12460 <__assert_fail@plt+0x1758>
   1245c:	bl	10cf0 <abort@plt>
   12460:	mov	r3, #0
   12464:	str	r3, [fp, #-16]
   12468:	b	13604 <__assert_fail@plt+0x28fc>
   1246c:	mov	r3, #0
   12470:	strb	r3, [fp, #-40]	; 0xffffffd8
   12474:	mov	r3, #0
   12478:	strb	r3, [fp, #-41]	; 0xffffffd7
   1247c:	mov	r3, #0
   12480:	strb	r3, [fp, #-42]	; 0xffffffd6
   12484:	ldrb	r3, [fp, #-33]	; 0xffffffdf
   12488:	cmp	r3, #0
   1248c:	beq	12528 <__assert_fail@plt+0x1820>
   12490:	ldr	r3, [fp, #4]
   12494:	cmp	r3, #2
   12498:	beq	12528 <__assert_fail@plt+0x1820>
   1249c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   124a0:	cmp	r3, #0
   124a4:	beq	12528 <__assert_fail@plt+0x1820>
   124a8:	ldr	r2, [fp, #-16]
   124ac:	ldr	r3, [fp, #-32]	; 0xffffffe0
   124b0:	add	r4, r2, r3
   124b4:	ldr	r3, [fp, #-100]	; 0xffffff9c
   124b8:	cmn	r3, #1
   124bc:	bne	124e0 <__assert_fail@plt+0x17d8>
   124c0:	ldr	r3, [fp, #-32]	; 0xffffffe0
   124c4:	cmp	r3, #1
   124c8:	bls	124e0 <__assert_fail@plt+0x17d8>
   124cc:	ldr	r0, [fp, #-96]	; 0xffffffa0
   124d0:	bl	10c54 <strlen@plt>
   124d4:	str	r0, [fp, #-100]	; 0xffffff9c
   124d8:	ldr	r3, [fp, #-100]	; 0xffffff9c
   124dc:	b	124e4 <__assert_fail@plt+0x17dc>
   124e0:	ldr	r3, [fp, #-100]	; 0xffffff9c
   124e4:	cmp	r3, r4
   124e8:	bcc	12528 <__assert_fail@plt+0x1820>
   124ec:	ldr	r2, [fp, #-96]	; 0xffffffa0
   124f0:	ldr	r3, [fp, #-16]
   124f4:	add	r3, r2, r3
   124f8:	ldr	r2, [fp, #-32]	; 0xffffffe0
   124fc:	ldr	r1, [fp, #-28]	; 0xffffffe4
   12500:	mov	r0, r3
   12504:	bl	10b64 <memcmp@plt>
   12508:	mov	r3, r0
   1250c:	cmp	r3, #0
   12510:	bne	12528 <__assert_fail@plt+0x1820>
   12514:	ldrb	r3, [fp, #-34]	; 0xffffffde
   12518:	cmp	r3, #0
   1251c:	bne	137c0 <__assert_fail@plt+0x2ab8>
   12520:	mov	r3, #1
   12524:	strb	r3, [fp, #-40]	; 0xffffffd8
   12528:	ldr	r2, [fp, #-96]	; 0xffffffa0
   1252c:	ldr	r3, [fp, #-16]
   12530:	add	r3, r2, r3
   12534:	ldrb	r3, [r3]
   12538:	strb	r3, [fp, #-38]	; 0xffffffda
   1253c:	ldrb	r3, [fp, #-38]	; 0xffffffda
   12540:	cmp	r3, #126	; 0x7e
   12544:	ldrls	pc, [pc, r3, lsl #2]
   12548:	b	12d80 <__assert_fail@plt+0x2078>
   1254c:	andeq	r2, r1, r8, asr #14
   12550:	andeq	r2, r1, r0, lsl #27
   12554:	andeq	r2, r1, r0, lsl #27
   12558:	andeq	r2, r1, r0, lsl #27
   1255c:	andeq	r2, r1, r0, lsl #27
   12560:	andeq	r2, r1, r0, lsl #27
   12564:	andeq	r2, r1, r0, lsl #27
   12568:	andeq	r2, r1, ip, lsr fp
   1256c:	andeq	r2, r1, r8, asr #22
   12570:	andeq	r2, r1, r8, ror fp
   12574:	andeq	r2, r1, r0, ror #22
   12578:	andeq	r2, r1, r4, lsl #23
   1257c:	andeq	r2, r1, r4, asr fp
   12580:	andeq	r2, r1, ip, ror #22
   12584:	andeq	r2, r1, r0, lsl #27
   12588:	andeq	r2, r1, r0, lsl #27
   1258c:	andeq	r2, r1, r0, lsl #27
   12590:	andeq	r2, r1, r0, lsl #27
   12594:	andeq	r2, r1, r0, lsl #27
   12598:	andeq	r2, r1, r0, lsl #27
   1259c:	andeq	r2, r1, r0, lsl #27
   125a0:	andeq	r2, r1, r0, lsl #27
   125a4:	andeq	r2, r1, r0, lsl #27
   125a8:	andeq	r2, r1, r0, lsl #27
   125ac:	andeq	r2, r1, r0, lsl #27
   125b0:	andeq	r2, r1, r0, lsl #27
   125b4:	andeq	r2, r1, r0, lsl #27
   125b8:	andeq	r2, r1, r0, lsl #27
   125bc:	andeq	r2, r1, r0, lsl #27
   125c0:	andeq	r2, r1, r0, lsl #27
   125c4:	andeq	r2, r1, r0, lsl #27
   125c8:	andeq	r2, r1, r0, lsl #27
   125cc:	andeq	r2, r1, r4, ror #24
   125d0:	andeq	r2, r1, ip, ror #24
   125d4:	andeq	r2, r1, ip, ror #24
   125d8:	andeq	r2, r1, r8, asr ip
   125dc:	andeq	r2, r1, ip, ror #24
   125e0:	andeq	r2, r1, r4, ror sp
   125e4:	andeq	r2, r1, ip, ror #24
   125e8:	andeq	r2, r1, r8, lsl #25
   125ec:	andeq	r2, r1, ip, ror #24
   125f0:	andeq	r2, r1, ip, ror #24
   125f4:	andeq	r2, r1, ip, ror #24
   125f8:	andeq	r2, r1, r4, ror sp
   125fc:	andeq	r2, r1, r4, ror sp
   12600:	andeq	r2, r1, r4, ror sp
   12604:	andeq	r2, r1, r4, ror sp
   12608:	andeq	r2, r1, r4, ror sp
   1260c:	andeq	r2, r1, r4, ror sp
   12610:	andeq	r2, r1, r4, ror sp
   12614:	andeq	r2, r1, r4, ror sp
   12618:	andeq	r2, r1, r4, ror sp
   1261c:	andeq	r2, r1, r4, ror sp
   12620:	andeq	r2, r1, r4, ror sp
   12624:	andeq	r2, r1, r4, ror sp
   12628:	andeq	r2, r1, r4, ror sp
   1262c:	andeq	r2, r1, r4, ror sp
   12630:	andeq	r2, r1, r4, ror sp
   12634:	andeq	r2, r1, r4, ror sp
   12638:	andeq	r2, r1, ip, ror #24
   1263c:	andeq	r2, r1, ip, ror #24
   12640:	andeq	r2, r1, ip, ror #24
   12644:	andeq	r2, r1, ip, ror #24
   12648:	andeq	r2, r1, r8, lsr #18
   1264c:	andeq	r2, r1, r0, lsl #27
   12650:	andeq	r2, r1, r4, ror sp
   12654:	andeq	r2, r1, r4, ror sp
   12658:	andeq	r2, r1, r4, ror sp
   1265c:	andeq	r2, r1, r4, ror sp
   12660:	andeq	r2, r1, r4, ror sp
   12664:	andeq	r2, r1, r4, ror sp
   12668:	andeq	r2, r1, r4, ror sp
   1266c:	andeq	r2, r1, r4, ror sp
   12670:	andeq	r2, r1, r4, ror sp
   12674:	andeq	r2, r1, r4, ror sp
   12678:	andeq	r2, r1, r4, ror sp
   1267c:	andeq	r2, r1, r4, ror sp
   12680:	andeq	r2, r1, r4, ror sp
   12684:	andeq	r2, r1, r4, ror sp
   12688:	andeq	r2, r1, r4, ror sp
   1268c:	andeq	r2, r1, r4, ror sp
   12690:	andeq	r2, r1, r4, ror sp
   12694:	andeq	r2, r1, r4, ror sp
   12698:	andeq	r2, r1, r4, ror sp
   1269c:	andeq	r2, r1, r4, ror sp
   126a0:	andeq	r2, r1, r4, ror sp
   126a4:	andeq	r2, r1, r4, ror sp
   126a8:	andeq	r2, r1, r4, ror sp
   126ac:	andeq	r2, r1, r4, ror sp
   126b0:	andeq	r2, r1, r4, ror sp
   126b4:	andeq	r2, r1, r4, ror sp
   126b8:	andeq	r2, r1, ip, ror #24
   126bc:	muleq	r1, r0, fp
   126c0:	andeq	r2, r1, r4, ror sp
   126c4:	andeq	r2, r1, ip, ror #24
   126c8:	andeq	r2, r1, r4, ror sp
   126cc:	andeq	r2, r1, ip, ror #24
   126d0:	andeq	r2, r1, r4, ror sp
   126d4:	andeq	r2, r1, r4, ror sp
   126d8:	andeq	r2, r1, r4, ror sp
   126dc:	andeq	r2, r1, r4, ror sp
   126e0:	andeq	r2, r1, r4, ror sp
   126e4:	andeq	r2, r1, r4, ror sp
   126e8:	andeq	r2, r1, r4, ror sp
   126ec:	andeq	r2, r1, r4, ror sp
   126f0:	andeq	r2, r1, r4, ror sp
   126f4:	andeq	r2, r1, r4, ror sp
   126f8:	andeq	r2, r1, r4, ror sp
   126fc:	andeq	r2, r1, r4, ror sp
   12700:	andeq	r2, r1, r4, ror sp
   12704:	andeq	r2, r1, r4, ror sp
   12708:	andeq	r2, r1, r4, ror sp
   1270c:	andeq	r2, r1, r4, ror sp
   12710:	andeq	r2, r1, r4, ror sp
   12714:	andeq	r2, r1, r4, ror sp
   12718:	andeq	r2, r1, r4, ror sp
   1271c:	andeq	r2, r1, r4, ror sp
   12720:	andeq	r2, r1, r4, ror sp
   12724:	andeq	r2, r1, r4, ror sp
   12728:	andeq	r2, r1, r4, ror sp
   1272c:	andeq	r2, r1, r4, ror sp
   12730:	andeq	r2, r1, r4, ror sp
   12734:	andeq	r2, r1, r4, ror sp
   12738:	andeq	r2, r1, r0, lsl ip
   1273c:	andeq	r2, r1, ip, ror #24
   12740:	andeq	r2, r1, r0, lsl ip
   12744:	andeq	r2, r1, r8, asr ip
   12748:	ldrb	r3, [fp, #-33]	; 0xffffffdf
   1274c:	cmp	r3, #0
   12750:	beq	12914 <__assert_fail@plt+0x1c0c>
   12754:	ldrb	r3, [fp, #-34]	; 0xffffffde
   12758:	cmp	r3, #0
   1275c:	bne	137c8 <__assert_fail@plt+0x2ac0>
   12760:	mov	r3, #1
   12764:	strb	r3, [fp, #-41]	; 0xffffffd7
   12768:	ldr	r3, [fp, #4]
   1276c:	cmp	r3, #2
   12770:	bne	12820 <__assert_fail@plt+0x1b18>
   12774:	ldrb	r3, [fp, #-35]	; 0xffffffdd
   12778:	eor	r3, r3, #1
   1277c:	uxtb	r3, r3
   12780:	cmp	r3, #0
   12784:	beq	12820 <__assert_fail@plt+0x1b18>
   12788:	ldr	r2, [fp, #-20]	; 0xffffffec
   1278c:	ldr	r3, [fp, #-92]	; 0xffffffa4
   12790:	cmp	r2, r3
   12794:	bcs	127ac <__assert_fail@plt+0x1aa4>
   12798:	ldr	r2, [fp, #-88]	; 0xffffffa8
   1279c:	ldr	r3, [fp, #-20]	; 0xffffffec
   127a0:	add	r3, r2, r3
   127a4:	mov	r2, #39	; 0x27
   127a8:	strb	r2, [r3]
   127ac:	ldr	r3, [fp, #-20]	; 0xffffffec
   127b0:	add	r3, r3, #1
   127b4:	str	r3, [fp, #-20]	; 0xffffffec
   127b8:	ldr	r2, [fp, #-20]	; 0xffffffec
   127bc:	ldr	r3, [fp, #-92]	; 0xffffffa4
   127c0:	cmp	r2, r3
   127c4:	bcs	127dc <__assert_fail@plt+0x1ad4>
   127c8:	ldr	r2, [fp, #-88]	; 0xffffffa8
   127cc:	ldr	r3, [fp, #-20]	; 0xffffffec
   127d0:	add	r3, r2, r3
   127d4:	mov	r2, #36	; 0x24
   127d8:	strb	r2, [r3]
   127dc:	ldr	r3, [fp, #-20]	; 0xffffffec
   127e0:	add	r3, r3, #1
   127e4:	str	r3, [fp, #-20]	; 0xffffffec
   127e8:	ldr	r2, [fp, #-20]	; 0xffffffec
   127ec:	ldr	r3, [fp, #-92]	; 0xffffffa4
   127f0:	cmp	r2, r3
   127f4:	bcs	1280c <__assert_fail@plt+0x1b04>
   127f8:	ldr	r2, [fp, #-88]	; 0xffffffa8
   127fc:	ldr	r3, [fp, #-20]	; 0xffffffec
   12800:	add	r3, r2, r3
   12804:	mov	r2, #39	; 0x27
   12808:	strb	r2, [r3]
   1280c:	ldr	r3, [fp, #-20]	; 0xffffffec
   12810:	add	r3, r3, #1
   12814:	str	r3, [fp, #-20]	; 0xffffffec
   12818:	mov	r3, #1
   1281c:	strb	r3, [fp, #-35]	; 0xffffffdd
   12820:	ldr	r2, [fp, #-20]	; 0xffffffec
   12824:	ldr	r3, [fp, #-92]	; 0xffffffa4
   12828:	cmp	r2, r3
   1282c:	bcs	12844 <__assert_fail@plt+0x1b3c>
   12830:	ldr	r2, [fp, #-88]	; 0xffffffa8
   12834:	ldr	r3, [fp, #-20]	; 0xffffffec
   12838:	add	r3, r2, r3
   1283c:	mov	r2, #92	; 0x5c
   12840:	strb	r2, [r3]
   12844:	ldr	r3, [fp, #-20]	; 0xffffffec
   12848:	add	r3, r3, #1
   1284c:	str	r3, [fp, #-20]	; 0xffffffec
   12850:	ldr	r3, [fp, #4]
   12854:	cmp	r3, #2
   12858:	beq	12908 <__assert_fail@plt+0x1c00>
   1285c:	ldr	r3, [fp, #-16]
   12860:	add	r3, r3, #1
   12864:	ldr	r2, [fp, #-100]	; 0xffffff9c
   12868:	cmp	r2, r3
   1286c:	bls	12908 <__assert_fail@plt+0x1c00>
   12870:	ldr	r3, [fp, #-16]
   12874:	add	r3, r3, #1
   12878:	ldr	r2, [fp, #-96]	; 0xffffffa0
   1287c:	add	r3, r2, r3
   12880:	ldrb	r3, [r3]
   12884:	cmp	r3, #47	; 0x2f
   12888:	bls	12908 <__assert_fail@plt+0x1c00>
   1288c:	ldr	r3, [fp, #-16]
   12890:	add	r3, r3, #1
   12894:	ldr	r2, [fp, #-96]	; 0xffffffa0
   12898:	add	r3, r2, r3
   1289c:	ldrb	r3, [r3]
   128a0:	cmp	r3, #57	; 0x39
   128a4:	bhi	12908 <__assert_fail@plt+0x1c00>
   128a8:	ldr	r2, [fp, #-20]	; 0xffffffec
   128ac:	ldr	r3, [fp, #-92]	; 0xffffffa4
   128b0:	cmp	r2, r3
   128b4:	bcs	128cc <__assert_fail@plt+0x1bc4>
   128b8:	ldr	r2, [fp, #-88]	; 0xffffffa8
   128bc:	ldr	r3, [fp, #-20]	; 0xffffffec
   128c0:	add	r3, r2, r3
   128c4:	mov	r2, #48	; 0x30
   128c8:	strb	r2, [r3]
   128cc:	ldr	r3, [fp, #-20]	; 0xffffffec
   128d0:	add	r3, r3, #1
   128d4:	str	r3, [fp, #-20]	; 0xffffffec
   128d8:	ldr	r2, [fp, #-20]	; 0xffffffec
   128dc:	ldr	r3, [fp, #-92]	; 0xffffffa4
   128e0:	cmp	r2, r3
   128e4:	bcs	128fc <__assert_fail@plt+0x1bf4>
   128e8:	ldr	r2, [fp, #-88]	; 0xffffffa8
   128ec:	ldr	r3, [fp, #-20]	; 0xffffffec
   128f0:	add	r3, r2, r3
   128f4:	mov	r2, #48	; 0x30
   128f8:	strb	r2, [r3]
   128fc:	ldr	r3, [fp, #-20]	; 0xffffffec
   12900:	add	r3, r3, #1
   12904:	str	r3, [fp, #-20]	; 0xffffffec
   12908:	mov	r3, #48	; 0x30
   1290c:	strb	r3, [fp, #-38]	; 0xffffffda
   12910:	b	13350 <__assert_fail@plt+0x2648>
   12914:	ldr	r3, [fp, #8]
   12918:	and	r3, r3, #1
   1291c:	cmp	r3, #0
   12920:	beq	13350 <__assert_fail@plt+0x2648>
   12924:	b	135f8 <__assert_fail@plt+0x28f0>
   12928:	ldr	r3, [fp, #4]
   1292c:	cmp	r3, #2
   12930:	beq	12944 <__assert_fail@plt+0x1c3c>
   12934:	ldr	r3, [fp, #4]
   12938:	cmp	r3, #5
   1293c:	beq	12954 <__assert_fail@plt+0x1c4c>
   12940:	b	12b38 <__assert_fail@plt+0x1e30>
   12944:	ldrb	r3, [fp, #-34]	; 0xffffffde
   12948:	cmp	r3, #0
   1294c:	beq	12b2c <__assert_fail@plt+0x1e24>
   12950:	b	137fc <__assert_fail@plt+0x2af4>
   12954:	ldr	r3, [fp, #8]
   12958:	and	r3, r3, #4
   1295c:	cmp	r3, #0
   12960:	beq	12b34 <__assert_fail@plt+0x1e2c>
   12964:	ldr	r3, [fp, #-16]
   12968:	add	r3, r3, #2
   1296c:	ldr	r2, [fp, #-100]	; 0xffffff9c
   12970:	cmp	r2, r3
   12974:	bls	12b34 <__assert_fail@plt+0x1e2c>
   12978:	ldr	r3, [fp, #-16]
   1297c:	add	r3, r3, #1
   12980:	ldr	r2, [fp, #-96]	; 0xffffffa0
   12984:	add	r3, r2, r3
   12988:	ldrb	r3, [r3]
   1298c:	cmp	r3, #63	; 0x3f
   12990:	bne	12b34 <__assert_fail@plt+0x1e2c>
   12994:	ldr	r3, [fp, #-16]
   12998:	add	r3, r3, #2
   1299c:	ldr	r2, [fp, #-96]	; 0xffffffa0
   129a0:	add	r3, r2, r3
   129a4:	ldrb	r3, [r3]
   129a8:	sub	r3, r3, #33	; 0x21
   129ac:	cmp	r3, #29
   129b0:	ldrls	pc, [pc, r3, lsl #2]
   129b4:	b	12b24 <__assert_fail@plt+0x1e1c>
   129b8:	andeq	r2, r1, r0, lsr sl
   129bc:	andeq	r2, r1, r4, lsr #22
   129c0:	andeq	r2, r1, r4, lsr #22
   129c4:	andeq	r2, r1, r4, lsr #22
   129c8:	andeq	r2, r1, r4, lsr #22
   129cc:	andeq	r2, r1, r4, lsr #22
   129d0:	andeq	r2, r1, r0, lsr sl
   129d4:	andeq	r2, r1, r0, lsr sl
   129d8:	andeq	r2, r1, r0, lsr sl
   129dc:	andeq	r2, r1, r4, lsr #22
   129e0:	andeq	r2, r1, r4, lsr #22
   129e4:	andeq	r2, r1, r4, lsr #22
   129e8:	andeq	r2, r1, r0, lsr sl
   129ec:	andeq	r2, r1, r4, lsr #22
   129f0:	andeq	r2, r1, r0, lsr sl
   129f4:	andeq	r2, r1, r4, lsr #22
   129f8:	andeq	r2, r1, r4, lsr #22
   129fc:	andeq	r2, r1, r4, lsr #22
   12a00:	andeq	r2, r1, r4, lsr #22
   12a04:	andeq	r2, r1, r4, lsr #22
   12a08:	andeq	r2, r1, r4, lsr #22
   12a0c:	andeq	r2, r1, r4, lsr #22
   12a10:	andeq	r2, r1, r4, lsr #22
   12a14:	andeq	r2, r1, r4, lsr #22
   12a18:	andeq	r2, r1, r4, lsr #22
   12a1c:	andeq	r2, r1, r4, lsr #22
   12a20:	andeq	r2, r1, r4, lsr #22
   12a24:	andeq	r2, r1, r0, lsr sl
   12a28:	andeq	r2, r1, r0, lsr sl
   12a2c:	andeq	r2, r1, r0, lsr sl
   12a30:	ldrb	r3, [fp, #-34]	; 0xffffffde
   12a34:	cmp	r3, #0
   12a38:	bne	137d0 <__assert_fail@plt+0x2ac8>
   12a3c:	ldr	r3, [fp, #-16]
   12a40:	add	r3, r3, #2
   12a44:	ldr	r2, [fp, #-96]	; 0xffffffa0
   12a48:	add	r3, r2, r3
   12a4c:	ldrb	r3, [r3]
   12a50:	strb	r3, [fp, #-38]	; 0xffffffda
   12a54:	ldr	r3, [fp, #-16]
   12a58:	add	r3, r3, #2
   12a5c:	str	r3, [fp, #-16]
   12a60:	ldr	r2, [fp, #-20]	; 0xffffffec
   12a64:	ldr	r3, [fp, #-92]	; 0xffffffa4
   12a68:	cmp	r2, r3
   12a6c:	bcs	12a84 <__assert_fail@plt+0x1d7c>
   12a70:	ldr	r2, [fp, #-88]	; 0xffffffa8
   12a74:	ldr	r3, [fp, #-20]	; 0xffffffec
   12a78:	add	r3, r2, r3
   12a7c:	mov	r2, #63	; 0x3f
   12a80:	strb	r2, [r3]
   12a84:	ldr	r3, [fp, #-20]	; 0xffffffec
   12a88:	add	r3, r3, #1
   12a8c:	str	r3, [fp, #-20]	; 0xffffffec
   12a90:	ldr	r2, [fp, #-20]	; 0xffffffec
   12a94:	ldr	r3, [fp, #-92]	; 0xffffffa4
   12a98:	cmp	r2, r3
   12a9c:	bcs	12ab4 <__assert_fail@plt+0x1dac>
   12aa0:	ldr	r2, [fp, #-88]	; 0xffffffa8
   12aa4:	ldr	r3, [fp, #-20]	; 0xffffffec
   12aa8:	add	r3, r2, r3
   12aac:	mov	r2, #34	; 0x22
   12ab0:	strb	r2, [r3]
   12ab4:	ldr	r3, [fp, #-20]	; 0xffffffec
   12ab8:	add	r3, r3, #1
   12abc:	str	r3, [fp, #-20]	; 0xffffffec
   12ac0:	ldr	r2, [fp, #-20]	; 0xffffffec
   12ac4:	ldr	r3, [fp, #-92]	; 0xffffffa4
   12ac8:	cmp	r2, r3
   12acc:	bcs	12ae4 <__assert_fail@plt+0x1ddc>
   12ad0:	ldr	r2, [fp, #-88]	; 0xffffffa8
   12ad4:	ldr	r3, [fp, #-20]	; 0xffffffec
   12ad8:	add	r3, r2, r3
   12adc:	mov	r2, #34	; 0x22
   12ae0:	strb	r2, [r3]
   12ae4:	ldr	r3, [fp, #-20]	; 0xffffffec
   12ae8:	add	r3, r3, #1
   12aec:	str	r3, [fp, #-20]	; 0xffffffec
   12af0:	ldr	r2, [fp, #-20]	; 0xffffffec
   12af4:	ldr	r3, [fp, #-92]	; 0xffffffa4
   12af8:	cmp	r2, r3
   12afc:	bcs	12b14 <__assert_fail@plt+0x1e0c>
   12b00:	ldr	r2, [fp, #-88]	; 0xffffffa8
   12b04:	ldr	r3, [fp, #-20]	; 0xffffffec
   12b08:	add	r3, r2, r3
   12b0c:	mov	r2, #63	; 0x3f
   12b10:	strb	r2, [r3]
   12b14:	ldr	r3, [fp, #-20]	; 0xffffffec
   12b18:	add	r3, r3, #1
   12b1c:	str	r3, [fp, #-20]	; 0xffffffec
   12b20:	b	12b28 <__assert_fail@plt+0x1e20>
   12b24:	nop	{0}
   12b28:	b	12b34 <__assert_fail@plt+0x1e2c>
   12b2c:	nop	{0}
   12b30:	b	13384 <__assert_fail@plt+0x267c>
   12b34:	nop	{0}
   12b38:	b	13384 <__assert_fail@plt+0x267c>
   12b3c:	mov	r3, #97	; 0x61
   12b40:	strb	r3, [fp, #-39]	; 0xffffffd9
   12b44:	b	12bf8 <__assert_fail@plt+0x1ef0>
   12b48:	mov	r3, #98	; 0x62
   12b4c:	strb	r3, [fp, #-39]	; 0xffffffd9
   12b50:	b	12bf8 <__assert_fail@plt+0x1ef0>
   12b54:	mov	r3, #102	; 0x66
   12b58:	strb	r3, [fp, #-39]	; 0xffffffd9
   12b5c:	b	12bf8 <__assert_fail@plt+0x1ef0>
   12b60:	mov	r3, #110	; 0x6e
   12b64:	strb	r3, [fp, #-39]	; 0xffffffd9
   12b68:	b	12bdc <__assert_fail@plt+0x1ed4>
   12b6c:	mov	r3, #114	; 0x72
   12b70:	strb	r3, [fp, #-39]	; 0xffffffd9
   12b74:	b	12bdc <__assert_fail@plt+0x1ed4>
   12b78:	mov	r3, #116	; 0x74
   12b7c:	strb	r3, [fp, #-39]	; 0xffffffd9
   12b80:	b	12bdc <__assert_fail@plt+0x1ed4>
   12b84:	mov	r3, #118	; 0x76
   12b88:	strb	r3, [fp, #-39]	; 0xffffffd9
   12b8c:	b	12bf8 <__assert_fail@plt+0x1ef0>
   12b90:	ldrb	r3, [fp, #-38]	; 0xffffffda
   12b94:	strb	r3, [fp, #-39]	; 0xffffffd9
   12b98:	ldr	r3, [fp, #4]
   12b9c:	cmp	r3, #2
   12ba0:	bne	12bb4 <__assert_fail@plt+0x1eac>
   12ba4:	ldrb	r3, [fp, #-34]	; 0xffffffde
   12ba8:	cmp	r3, #0
   12bac:	beq	13510 <__assert_fail@plt+0x2808>
   12bb0:	b	137fc <__assert_fail@plt+0x2af4>
   12bb4:	ldrb	r3, [fp, #-33]	; 0xffffffdf
   12bb8:	cmp	r3, #0
   12bbc:	beq	12bd8 <__assert_fail@plt+0x1ed0>
   12bc0:	ldrb	r3, [fp, #-34]	; 0xffffffde
   12bc4:	cmp	r3, #0
   12bc8:	beq	12bd8 <__assert_fail@plt+0x1ed0>
   12bcc:	ldr	r3, [fp, #-32]	; 0xffffffe0
   12bd0:	cmp	r3, #0
   12bd4:	bne	13518 <__assert_fail@plt+0x2810>
   12bd8:	nop	{0}
   12bdc:	ldr	r3, [fp, #4]
   12be0:	cmp	r3, #2
   12be4:	bne	12bf4 <__assert_fail@plt+0x1eec>
   12be8:	ldrb	r3, [fp, #-34]	; 0xffffffde
   12bec:	cmp	r3, #0
   12bf0:	bne	137d8 <__assert_fail@plt+0x2ad0>
   12bf4:	nop	{0}
   12bf8:	ldrb	r3, [fp, #-33]	; 0xffffffdf
   12bfc:	cmp	r3, #0
   12c00:	beq	13358 <__assert_fail@plt+0x2650>
   12c04:	ldrb	r3, [fp, #-39]	; 0xffffffd9
   12c08:	strb	r3, [fp, #-38]	; 0xffffffda
   12c0c:	b	13410 <__assert_fail@plt+0x2708>
   12c10:	ldr	r3, [fp, #-100]	; 0xffffff9c
   12c14:	cmn	r3, #1
   12c18:	bne	12c3c <__assert_fail@plt+0x1f34>
   12c1c:	ldr	r3, [fp, #-96]	; 0xffffffa0
   12c20:	add	r3, r3, #1
   12c24:	ldrb	r3, [r3]
   12c28:	cmp	r3, #0
   12c2c:	movne	r3, #1
   12c30:	moveq	r3, #0
   12c34:	uxtb	r3, r3
   12c38:	b	12c50 <__assert_fail@plt+0x1f48>
   12c3c:	ldr	r3, [fp, #-100]	; 0xffffff9c
   12c40:	cmp	r3, #1
   12c44:	movne	r3, #1
   12c48:	moveq	r3, #0
   12c4c:	uxtb	r3, r3
   12c50:	cmp	r3, #0
   12c54:	bne	13360 <__assert_fail@plt+0x2658>
   12c58:	ldr	r3, [fp, #-16]
   12c5c:	cmp	r3, #0
   12c60:	bne	13368 <__assert_fail@plt+0x2660>
   12c64:	mov	r3, #1
   12c68:	strb	r3, [fp, #-42]	; 0xffffffd6
   12c6c:	ldr	r3, [fp, #4]
   12c70:	cmp	r3, #2
   12c74:	bne	13370 <__assert_fail@plt+0x2668>
   12c78:	ldrb	r3, [fp, #-34]	; 0xffffffde
   12c7c:	cmp	r3, #0
   12c80:	beq	13370 <__assert_fail@plt+0x2668>
   12c84:	b	137fc <__assert_fail@plt+0x2af4>
   12c88:	mov	r3, #1
   12c8c:	strb	r3, [fp, #-36]	; 0xffffffdc
   12c90:	mov	r3, #1
   12c94:	strb	r3, [fp, #-42]	; 0xffffffd6
   12c98:	ldr	r3, [fp, #4]
   12c9c:	cmp	r3, #2
   12ca0:	bne	13378 <__assert_fail@plt+0x2670>
   12ca4:	ldrb	r3, [fp, #-34]	; 0xffffffde
   12ca8:	cmp	r3, #0
   12cac:	bne	137e0 <__assert_fail@plt+0x2ad8>
   12cb0:	ldr	r3, [fp, #-92]	; 0xffffffa4
   12cb4:	cmp	r3, #0
   12cb8:	beq	12cd8 <__assert_fail@plt+0x1fd0>
   12cbc:	ldr	r3, [fp, #-24]	; 0xffffffe8
   12cc0:	cmp	r3, #0
   12cc4:	bne	12cd8 <__assert_fail@plt+0x1fd0>
   12cc8:	ldr	r3, [fp, #-92]	; 0xffffffa4
   12ccc:	str	r3, [fp, #-24]	; 0xffffffe8
   12cd0:	mov	r3, #0
   12cd4:	str	r3, [fp, #-92]	; 0xffffffa4
   12cd8:	ldr	r2, [fp, #-20]	; 0xffffffec
   12cdc:	ldr	r3, [fp, #-92]	; 0xffffffa4
   12ce0:	cmp	r2, r3
   12ce4:	bcs	12cfc <__assert_fail@plt+0x1ff4>
   12ce8:	ldr	r2, [fp, #-88]	; 0xffffffa8
   12cec:	ldr	r3, [fp, #-20]	; 0xffffffec
   12cf0:	add	r3, r2, r3
   12cf4:	mov	r2, #39	; 0x27
   12cf8:	strb	r2, [r3]
   12cfc:	ldr	r3, [fp, #-20]	; 0xffffffec
   12d00:	add	r3, r3, #1
   12d04:	str	r3, [fp, #-20]	; 0xffffffec
   12d08:	ldr	r2, [fp, #-20]	; 0xffffffec
   12d0c:	ldr	r3, [fp, #-92]	; 0xffffffa4
   12d10:	cmp	r2, r3
   12d14:	bcs	12d2c <__assert_fail@plt+0x2024>
   12d18:	ldr	r2, [fp, #-88]	; 0xffffffa8
   12d1c:	ldr	r3, [fp, #-20]	; 0xffffffec
   12d20:	add	r3, r2, r3
   12d24:	mov	r2, #92	; 0x5c
   12d28:	strb	r2, [r3]
   12d2c:	ldr	r3, [fp, #-20]	; 0xffffffec
   12d30:	add	r3, r3, #1
   12d34:	str	r3, [fp, #-20]	; 0xffffffec
   12d38:	ldr	r2, [fp, #-20]	; 0xffffffec
   12d3c:	ldr	r3, [fp, #-92]	; 0xffffffa4
   12d40:	cmp	r2, r3
   12d44:	bcs	12d5c <__assert_fail@plt+0x2054>
   12d48:	ldr	r2, [fp, #-88]	; 0xffffffa8
   12d4c:	ldr	r3, [fp, #-20]	; 0xffffffec
   12d50:	add	r3, r2, r3
   12d54:	mov	r2, #39	; 0x27
   12d58:	strb	r2, [r3]
   12d5c:	ldr	r3, [fp, #-20]	; 0xffffffec
   12d60:	add	r3, r3, #1
   12d64:	str	r3, [fp, #-20]	; 0xffffffec
   12d68:	mov	r3, #0
   12d6c:	strb	r3, [fp, #-35]	; 0xffffffdd
   12d70:	b	13378 <__assert_fail@plt+0x2670>
   12d74:	mov	r3, #1
   12d78:	strb	r3, [fp, #-42]	; 0xffffffd6
   12d7c:	b	13384 <__assert_fail@plt+0x267c>
   12d80:	ldrb	r3, [fp, #-57]	; 0xffffffc7
   12d84:	cmp	r3, #0
   12d88:	beq	12dc8 <__assert_fail@plt+0x20c0>
   12d8c:	mov	r3, #1
   12d90:	str	r3, [fp, #-48]	; 0xffffffd0
   12d94:	bl	10c30 <__ctype_b_loc@plt>
   12d98:	mov	r3, r0
   12d9c:	ldr	r2, [r3]
   12da0:	ldrb	r3, [fp, #-38]	; 0xffffffda
   12da4:	lsl	r3, r3, #1
   12da8:	add	r3, r2, r3
   12dac:	ldrh	r3, [r3]
   12db0:	and	r3, r3, #16384	; 0x4000
   12db4:	cmp	r3, #0
   12db8:	movne	r3, #1
   12dbc:	moveq	r3, #0
   12dc0:	strb	r3, [fp, #-49]	; 0xffffffcf
   12dc4:	b	13014 <__assert_fail@plt+0x230c>
   12dc8:	sub	r3, fp, #76	; 0x4c
   12dcc:	mov	r2, #8
   12dd0:	mov	r1, #0
   12dd4:	mov	r0, r3
   12dd8:	bl	10c84 <memset@plt>
   12ddc:	mov	r3, #0
   12de0:	str	r3, [fp, #-48]	; 0xffffffd0
   12de4:	mov	r3, #1
   12de8:	strb	r3, [fp, #-49]	; 0xffffffcf
   12dec:	ldr	r3, [fp, #-100]	; 0xffffff9c
   12df0:	cmn	r3, #1
   12df4:	bne	12e04 <__assert_fail@plt+0x20fc>
   12df8:	ldr	r0, [fp, #-96]	; 0xffffffa0
   12dfc:	bl	10c54 <strlen@plt>
   12e00:	str	r0, [fp, #-100]	; 0xffffff9c
   12e04:	ldr	r2, [fp, #-16]
   12e08:	ldr	r3, [fp, #-48]	; 0xffffffd0
   12e0c:	add	r3, r2, r3
   12e10:	ldr	r2, [fp, #-96]	; 0xffffffa0
   12e14:	add	r1, r2, r3
   12e18:	ldr	r2, [fp, #-16]
   12e1c:	ldr	r3, [fp, #-48]	; 0xffffffd0
   12e20:	add	r3, r2, r3
   12e24:	ldr	r2, [fp, #-100]	; 0xffffff9c
   12e28:	sub	r2, r2, r3
   12e2c:	sub	r3, fp, #76	; 0x4c
   12e30:	sub	r0, fp, #80	; 0x50
   12e34:	bl	15fb8 <__assert_fail@plt+0x52b0>
   12e38:	str	r0, [fp, #-64]	; 0xffffffc0
   12e3c:	ldr	r3, [fp, #-64]	; 0xffffffc0
   12e40:	cmp	r3, #0
   12e44:	beq	13008 <__assert_fail@plt+0x2300>
   12e48:	ldr	r3, [fp, #-64]	; 0xffffffc0
   12e4c:	cmn	r3, #1
   12e50:	bne	12e60 <__assert_fail@plt+0x2158>
   12e54:	mov	r3, #0
   12e58:	strb	r3, [fp, #-49]	; 0xffffffcf
   12e5c:	b	13014 <__assert_fail@plt+0x230c>
   12e60:	ldr	r3, [fp, #-64]	; 0xffffffc0
   12e64:	cmn	r3, #2
   12e68:	bne	12ec0 <__assert_fail@plt+0x21b8>
   12e6c:	mov	r3, #0
   12e70:	strb	r3, [fp, #-49]	; 0xffffffcf
   12e74:	b	12e84 <__assert_fail@plt+0x217c>
   12e78:	ldr	r3, [fp, #-48]	; 0xffffffd0
   12e7c:	add	r3, r3, #1
   12e80:	str	r3, [fp, #-48]	; 0xffffffd0
   12e84:	ldr	r2, [fp, #-16]
   12e88:	ldr	r3, [fp, #-48]	; 0xffffffd0
   12e8c:	add	r3, r2, r3
   12e90:	ldr	r2, [fp, #-100]	; 0xffffff9c
   12e94:	cmp	r2, r3
   12e98:	bls	13010 <__assert_fail@plt+0x2308>
   12e9c:	ldr	r2, [fp, #-16]
   12ea0:	ldr	r3, [fp, #-48]	; 0xffffffd0
   12ea4:	add	r3, r2, r3
   12ea8:	ldr	r2, [fp, #-96]	; 0xffffffa0
   12eac:	add	r3, r2, r3
   12eb0:	ldrb	r3, [r3]
   12eb4:	cmp	r3, #0
   12eb8:	bne	12e78 <__assert_fail@plt+0x2170>
   12ebc:	b	13010 <__assert_fail@plt+0x2308>
   12ec0:	ldrb	r3, [fp, #-34]	; 0xffffffde
   12ec4:	cmp	r3, #0
   12ec8:	beq	12fbc <__assert_fail@plt+0x22b4>
   12ecc:	ldr	r3, [fp, #4]
   12ed0:	cmp	r3, #2
   12ed4:	bne	12fbc <__assert_fail@plt+0x22b4>
   12ed8:	mov	r3, #1
   12edc:	str	r3, [fp, #-56]	; 0xffffffc8
   12ee0:	b	12fac <__assert_fail@plt+0x22a4>
   12ee4:	ldr	r2, [fp, #-16]
   12ee8:	ldr	r3, [fp, #-48]	; 0xffffffd0
   12eec:	add	r2, r2, r3
   12ef0:	ldr	r3, [fp, #-56]	; 0xffffffc8
   12ef4:	add	r3, r2, r3
   12ef8:	ldr	r2, [fp, #-96]	; 0xffffffa0
   12efc:	add	r3, r2, r3
   12f00:	ldrb	r3, [r3]
   12f04:	sub	r3, r3, #91	; 0x5b
   12f08:	cmp	r3, #33	; 0x21
   12f0c:	ldrls	pc, [pc, r3, lsl #2]
   12f10:	b	12f9c <__assert_fail@plt+0x2294>
   12f14:	strdeq	r3, [r1], -ip
   12f18:	strdeq	r3, [r1], -ip
   12f1c:	muleq	r1, ip, pc	; <UNPREDICTABLE>
   12f20:	strdeq	r3, [r1], -ip
   12f24:	muleq	r1, ip, pc	; <UNPREDICTABLE>
   12f28:	strdeq	r3, [r1], -ip
   12f2c:	muleq	r1, ip, pc	; <UNPREDICTABLE>
   12f30:	muleq	r1, ip, pc	; <UNPREDICTABLE>
   12f34:	muleq	r1, ip, pc	; <UNPREDICTABLE>
   12f38:	muleq	r1, ip, pc	; <UNPREDICTABLE>
   12f3c:	muleq	r1, ip, pc	; <UNPREDICTABLE>
   12f40:	muleq	r1, ip, pc	; <UNPREDICTABLE>
   12f44:	muleq	r1, ip, pc	; <UNPREDICTABLE>
   12f48:	muleq	r1, ip, pc	; <UNPREDICTABLE>
   12f4c:	muleq	r1, ip, pc	; <UNPREDICTABLE>
   12f50:	muleq	r1, ip, pc	; <UNPREDICTABLE>
   12f54:	muleq	r1, ip, pc	; <UNPREDICTABLE>
   12f58:	muleq	r1, ip, pc	; <UNPREDICTABLE>
   12f5c:	muleq	r1, ip, pc	; <UNPREDICTABLE>
   12f60:	muleq	r1, ip, pc	; <UNPREDICTABLE>
   12f64:	muleq	r1, ip, pc	; <UNPREDICTABLE>
   12f68:	muleq	r1, ip, pc	; <UNPREDICTABLE>
   12f6c:	muleq	r1, ip, pc	; <UNPREDICTABLE>
   12f70:	muleq	r1, ip, pc	; <UNPREDICTABLE>
   12f74:	muleq	r1, ip, pc	; <UNPREDICTABLE>
   12f78:	muleq	r1, ip, pc	; <UNPREDICTABLE>
   12f7c:	muleq	r1, ip, pc	; <UNPREDICTABLE>
   12f80:	muleq	r1, ip, pc	; <UNPREDICTABLE>
   12f84:	muleq	r1, ip, pc	; <UNPREDICTABLE>
   12f88:	muleq	r1, ip, pc	; <UNPREDICTABLE>
   12f8c:	muleq	r1, ip, pc	; <UNPREDICTABLE>
   12f90:	muleq	r1, ip, pc	; <UNPREDICTABLE>
   12f94:	muleq	r1, ip, pc	; <UNPREDICTABLE>
   12f98:	strdeq	r3, [r1], -ip
   12f9c:	nop	{0}
   12fa0:	ldr	r3, [fp, #-56]	; 0xffffffc8
   12fa4:	add	r3, r3, #1
   12fa8:	str	r3, [fp, #-56]	; 0xffffffc8
   12fac:	ldr	r2, [fp, #-56]	; 0xffffffc8
   12fb0:	ldr	r3, [fp, #-64]	; 0xffffffc0
   12fb4:	cmp	r2, r3
   12fb8:	bcc	12ee4 <__assert_fail@plt+0x21dc>
   12fbc:	ldr	r3, [fp, #-80]	; 0xffffffb0
   12fc0:	mov	r0, r3
   12fc4:	bl	10b94 <iswprint@plt>
   12fc8:	mov	r3, r0
   12fcc:	cmp	r3, #0
   12fd0:	bne	12fdc <__assert_fail@plt+0x22d4>
   12fd4:	mov	r3, #0
   12fd8:	strb	r3, [fp, #-49]	; 0xffffffcf
   12fdc:	ldr	r2, [fp, #-48]	; 0xffffffd0
   12fe0:	ldr	r3, [fp, #-64]	; 0xffffffc0
   12fe4:	add	r3, r2, r3
   12fe8:	str	r3, [fp, #-48]	; 0xffffffd0
   12fec:	sub	r3, fp, #76	; 0x4c
   12ff0:	mov	r0, r3
   12ff4:	bl	10b58 <mbsinit@plt>
   12ff8:	mov	r3, r0
   12ffc:	cmp	r3, #0
   13000:	beq	12e04 <__assert_fail@plt+0x20fc>
   13004:	b	13014 <__assert_fail@plt+0x230c>
   13008:	nop	{0}
   1300c:	b	13014 <__assert_fail@plt+0x230c>
   13010:	nop	{0}
   13014:	ldrb	r3, [fp, #-49]	; 0xffffffcf
   13018:	strb	r3, [fp, #-42]	; 0xffffffd6
   1301c:	ldr	r3, [fp, #-48]	; 0xffffffd0
   13020:	cmp	r3, #1
   13024:	bhi	13048 <__assert_fail@plt+0x2340>
   13028:	ldrb	r3, [fp, #-33]	; 0xffffffdf
   1302c:	cmp	r3, #0
   13030:	beq	13380 <__assert_fail@plt+0x2678>
   13034:	ldrb	r3, [fp, #-49]	; 0xffffffcf
   13038:	eor	r3, r3, #1
   1303c:	uxtb	r3, r3
   13040:	cmp	r3, #0
   13044:	beq	13380 <__assert_fail@plt+0x2678>
   13048:	ldr	r2, [fp, #-16]
   1304c:	ldr	r3, [fp, #-48]	; 0xffffffd0
   13050:	add	r3, r2, r3
   13054:	str	r3, [fp, #-68]	; 0xffffffbc
   13058:	ldrb	r3, [fp, #-33]	; 0xffffffdf
   1305c:	cmp	r3, #0
   13060:	beq	13214 <__assert_fail@plt+0x250c>
   13064:	ldrb	r3, [fp, #-49]	; 0xffffffcf
   13068:	eor	r3, r3, #1
   1306c:	uxtb	r3, r3
   13070:	cmp	r3, #0
   13074:	beq	13214 <__assert_fail@plt+0x250c>
   13078:	ldrb	r3, [fp, #-34]	; 0xffffffde
   1307c:	cmp	r3, #0
   13080:	bne	137e8 <__assert_fail@plt+0x2ae0>
   13084:	mov	r3, #1
   13088:	strb	r3, [fp, #-41]	; 0xffffffd7
   1308c:	ldr	r3, [fp, #4]
   13090:	cmp	r3, #2
   13094:	bne	13144 <__assert_fail@plt+0x243c>
   13098:	ldrb	r3, [fp, #-35]	; 0xffffffdd
   1309c:	eor	r3, r3, #1
   130a0:	uxtb	r3, r3
   130a4:	cmp	r3, #0
   130a8:	beq	13144 <__assert_fail@plt+0x243c>
   130ac:	ldr	r2, [fp, #-20]	; 0xffffffec
   130b0:	ldr	r3, [fp, #-92]	; 0xffffffa4
   130b4:	cmp	r2, r3
   130b8:	bcs	130d0 <__assert_fail@plt+0x23c8>
   130bc:	ldr	r2, [fp, #-88]	; 0xffffffa8
   130c0:	ldr	r3, [fp, #-20]	; 0xffffffec
   130c4:	add	r3, r2, r3
   130c8:	mov	r2, #39	; 0x27
   130cc:	strb	r2, [r3]
   130d0:	ldr	r3, [fp, #-20]	; 0xffffffec
   130d4:	add	r3, r3, #1
   130d8:	str	r3, [fp, #-20]	; 0xffffffec
   130dc:	ldr	r2, [fp, #-20]	; 0xffffffec
   130e0:	ldr	r3, [fp, #-92]	; 0xffffffa4
   130e4:	cmp	r2, r3
   130e8:	bcs	13100 <__assert_fail@plt+0x23f8>
   130ec:	ldr	r2, [fp, #-88]	; 0xffffffa8
   130f0:	ldr	r3, [fp, #-20]	; 0xffffffec
   130f4:	add	r3, r2, r3
   130f8:	mov	r2, #36	; 0x24
   130fc:	strb	r2, [r3]
   13100:	ldr	r3, [fp, #-20]	; 0xffffffec
   13104:	add	r3, r3, #1
   13108:	str	r3, [fp, #-20]	; 0xffffffec
   1310c:	ldr	r2, [fp, #-20]	; 0xffffffec
   13110:	ldr	r3, [fp, #-92]	; 0xffffffa4
   13114:	cmp	r2, r3
   13118:	bcs	13130 <__assert_fail@plt+0x2428>
   1311c:	ldr	r2, [fp, #-88]	; 0xffffffa8
   13120:	ldr	r3, [fp, #-20]	; 0xffffffec
   13124:	add	r3, r2, r3
   13128:	mov	r2, #39	; 0x27
   1312c:	strb	r2, [r3]
   13130:	ldr	r3, [fp, #-20]	; 0xffffffec
   13134:	add	r3, r3, #1
   13138:	str	r3, [fp, #-20]	; 0xffffffec
   1313c:	mov	r3, #1
   13140:	strb	r3, [fp, #-35]	; 0xffffffdd
   13144:	ldr	r2, [fp, #-20]	; 0xffffffec
   13148:	ldr	r3, [fp, #-92]	; 0xffffffa4
   1314c:	cmp	r2, r3
   13150:	bcs	13168 <__assert_fail@plt+0x2460>
   13154:	ldr	r2, [fp, #-88]	; 0xffffffa8
   13158:	ldr	r3, [fp, #-20]	; 0xffffffec
   1315c:	add	r3, r2, r3
   13160:	mov	r2, #92	; 0x5c
   13164:	strb	r2, [r3]
   13168:	ldr	r3, [fp, #-20]	; 0xffffffec
   1316c:	add	r3, r3, #1
   13170:	str	r3, [fp, #-20]	; 0xffffffec
   13174:	ldr	r2, [fp, #-20]	; 0xffffffec
   13178:	ldr	r3, [fp, #-92]	; 0xffffffa4
   1317c:	cmp	r2, r3
   13180:	bcs	131a8 <__assert_fail@plt+0x24a0>
   13184:	ldrb	r3, [fp, #-38]	; 0xffffffda
   13188:	lsr	r3, r3, #6
   1318c:	uxtb	r2, r3
   13190:	ldr	r1, [fp, #-88]	; 0xffffffa8
   13194:	ldr	r3, [fp, #-20]	; 0xffffffec
   13198:	add	r3, r1, r3
   1319c:	add	r2, r2, #48	; 0x30
   131a0:	uxtb	r2, r2
   131a4:	strb	r2, [r3]
   131a8:	ldr	r3, [fp, #-20]	; 0xffffffec
   131ac:	add	r3, r3, #1
   131b0:	str	r3, [fp, #-20]	; 0xffffffec
   131b4:	ldr	r2, [fp, #-20]	; 0xffffffec
   131b8:	ldr	r3, [fp, #-92]	; 0xffffffa4
   131bc:	cmp	r2, r3
   131c0:	bcs	131f0 <__assert_fail@plt+0x24e8>
   131c4:	ldrb	r3, [fp, #-38]	; 0xffffffda
   131c8:	lsr	r3, r3, #3
   131cc:	uxtb	r3, r3
   131d0:	and	r3, r3, #7
   131d4:	uxtb	r2, r3
   131d8:	ldr	r1, [fp, #-88]	; 0xffffffa8
   131dc:	ldr	r3, [fp, #-20]	; 0xffffffec
   131e0:	add	r3, r1, r3
   131e4:	add	r2, r2, #48	; 0x30
   131e8:	uxtb	r2, r2
   131ec:	strb	r2, [r3]
   131f0:	ldr	r3, [fp, #-20]	; 0xffffffec
   131f4:	add	r3, r3, #1
   131f8:	str	r3, [fp, #-20]	; 0xffffffec
   131fc:	ldrb	r3, [fp, #-38]	; 0xffffffda
   13200:	and	r3, r3, #7
   13204:	uxtb	r3, r3
   13208:	add	r3, r3, #48	; 0x30
   1320c:	strb	r3, [fp, #-38]	; 0xffffffda
   13210:	b	13258 <__assert_fail@plt+0x2550>
   13214:	ldrb	r3, [fp, #-40]	; 0xffffffd8
   13218:	cmp	r3, #0
   1321c:	beq	13258 <__assert_fail@plt+0x2550>
   13220:	ldr	r2, [fp, #-20]	; 0xffffffec
   13224:	ldr	r3, [fp, #-92]	; 0xffffffa4
   13228:	cmp	r2, r3
   1322c:	bcs	13244 <__assert_fail@plt+0x253c>
   13230:	ldr	r2, [fp, #-88]	; 0xffffffa8
   13234:	ldr	r3, [fp, #-20]	; 0xffffffec
   13238:	add	r3, r2, r3
   1323c:	mov	r2, #92	; 0x5c
   13240:	strb	r2, [r3]
   13244:	ldr	r3, [fp, #-20]	; 0xffffffec
   13248:	add	r3, r3, #1
   1324c:	str	r3, [fp, #-20]	; 0xffffffec
   13250:	mov	r3, #0
   13254:	strb	r3, [fp, #-40]	; 0xffffffd8
   13258:	ldr	r3, [fp, #-16]
   1325c:	add	r3, r3, #1
   13260:	ldr	r2, [fp, #-68]	; 0xffffffbc
   13264:	cmp	r2, r3
   13268:	bls	13348 <__assert_fail@plt+0x2640>
   1326c:	ldrb	r3, [fp, #-35]	; 0xffffffdd
   13270:	cmp	r3, #0
   13274:	beq	132f4 <__assert_fail@plt+0x25ec>
   13278:	ldrb	r3, [fp, #-41]	; 0xffffffd7
   1327c:	eor	r3, r3, #1
   13280:	uxtb	r3, r3
   13284:	cmp	r3, #0
   13288:	beq	132f4 <__assert_fail@plt+0x25ec>
   1328c:	ldr	r2, [fp, #-20]	; 0xffffffec
   13290:	ldr	r3, [fp, #-92]	; 0xffffffa4
   13294:	cmp	r2, r3
   13298:	bcs	132b0 <__assert_fail@plt+0x25a8>
   1329c:	ldr	r2, [fp, #-88]	; 0xffffffa8
   132a0:	ldr	r3, [fp, #-20]	; 0xffffffec
   132a4:	add	r3, r2, r3
   132a8:	mov	r2, #39	; 0x27
   132ac:	strb	r2, [r3]
   132b0:	ldr	r3, [fp, #-20]	; 0xffffffec
   132b4:	add	r3, r3, #1
   132b8:	str	r3, [fp, #-20]	; 0xffffffec
   132bc:	ldr	r2, [fp, #-20]	; 0xffffffec
   132c0:	ldr	r3, [fp, #-92]	; 0xffffffa4
   132c4:	cmp	r2, r3
   132c8:	bcs	132e0 <__assert_fail@plt+0x25d8>
   132cc:	ldr	r2, [fp, #-88]	; 0xffffffa8
   132d0:	ldr	r3, [fp, #-20]	; 0xffffffec
   132d4:	add	r3, r2, r3
   132d8:	mov	r2, #39	; 0x27
   132dc:	strb	r2, [r3]
   132e0:	ldr	r3, [fp, #-20]	; 0xffffffec
   132e4:	add	r3, r3, #1
   132e8:	str	r3, [fp, #-20]	; 0xffffffec
   132ec:	mov	r3, #0
   132f0:	strb	r3, [fp, #-35]	; 0xffffffdd
   132f4:	ldr	r2, [fp, #-20]	; 0xffffffec
   132f8:	ldr	r3, [fp, #-92]	; 0xffffffa4
   132fc:	cmp	r2, r3
   13300:	bcs	13318 <__assert_fail@plt+0x2610>
   13304:	ldr	r2, [fp, #-88]	; 0xffffffa8
   13308:	ldr	r3, [fp, #-20]	; 0xffffffec
   1330c:	add	r3, r2, r3
   13310:	ldrb	r2, [fp, #-38]	; 0xffffffda
   13314:	strb	r2, [r3]
   13318:	ldr	r3, [fp, #-20]	; 0xffffffec
   1331c:	add	r3, r3, #1
   13320:	str	r3, [fp, #-20]	; 0xffffffec
   13324:	ldr	r3, [fp, #-16]
   13328:	add	r3, r3, #1
   1332c:	str	r3, [fp, #-16]
   13330:	ldr	r2, [fp, #-96]	; 0xffffffa0
   13334:	ldr	r3, [fp, #-16]
   13338:	add	r3, r2, r3
   1333c:	ldrb	r3, [r3]
   13340:	strb	r3, [fp, #-38]	; 0xffffffda
   13344:	b	13058 <__assert_fail@plt+0x2350>
   13348:	nop	{0}
   1334c:	b	13524 <__assert_fail@plt+0x281c>
   13350:	nop	{0}
   13354:	b	13384 <__assert_fail@plt+0x267c>
   13358:	nop	{0}
   1335c:	b	13384 <__assert_fail@plt+0x267c>
   13360:	nop	{0}
   13364:	b	13384 <__assert_fail@plt+0x267c>
   13368:	nop	{0}
   1336c:	b	13384 <__assert_fail@plt+0x267c>
   13370:	nop	{0}
   13374:	b	13384 <__assert_fail@plt+0x267c>
   13378:	nop	{0}
   1337c:	b	13384 <__assert_fail@plt+0x267c>
   13380:	nop	{0}
   13384:	ldrb	r3, [fp, #-33]	; 0xffffffdf
   13388:	eor	r3, r3, #1
   1338c:	uxtb	r3, r3
   13390:	cmp	r3, #0
   13394:	bne	133a4 <__assert_fail@plt+0x269c>
   13398:	ldr	r3, [fp, #4]
   1339c:	cmp	r3, #2
   133a0:	bne	133b8 <__assert_fail@plt+0x26b0>
   133a4:	ldrb	r3, [fp, #-34]	; 0xffffffde
   133a8:	eor	r3, r3, #1
   133ac:	uxtb	r3, r3
   133b0:	cmp	r3, #0
   133b4:	bne	133f8 <__assert_fail@plt+0x26f0>
   133b8:	ldr	r3, [fp, #12]
   133bc:	cmp	r3, #0
   133c0:	beq	133f8 <__assert_fail@plt+0x26f0>
   133c4:	ldrb	r3, [fp, #-38]	; 0xffffffda
   133c8:	lsr	r3, r3, #5
   133cc:	uxtb	r3, r3
   133d0:	lsl	r3, r3, #2
   133d4:	ldr	r2, [fp, #12]
   133d8:	add	r3, r2, r3
   133dc:	ldr	r2, [r3]
   133e0:	ldrb	r3, [fp, #-38]	; 0xffffffda
   133e4:	and	r3, r3, #31
   133e8:	lsr	r3, r2, r3
   133ec:	and	r3, r3, #1
   133f0:	cmp	r3, #0
   133f4:	bne	1340c <__assert_fail@plt+0x2704>
   133f8:	ldrb	r3, [fp, #-40]	; 0xffffffd8
   133fc:	eor	r3, r3, #1
   13400:	uxtb	r3, r3
   13404:	cmp	r3, #0
   13408:	bne	13520 <__assert_fail@plt+0x2818>
   1340c:	nop	{0}
   13410:	ldrb	r3, [fp, #-34]	; 0xffffffde
   13414:	cmp	r3, #0
   13418:	bne	137f0 <__assert_fail@plt+0x2ae8>
   1341c:	mov	r3, #1
   13420:	strb	r3, [fp, #-41]	; 0xffffffd7
   13424:	ldr	r3, [fp, #4]
   13428:	cmp	r3, #2
   1342c:	bne	134dc <__assert_fail@plt+0x27d4>
   13430:	ldrb	r3, [fp, #-35]	; 0xffffffdd
   13434:	eor	r3, r3, #1
   13438:	uxtb	r3, r3
   1343c:	cmp	r3, #0
   13440:	beq	134dc <__assert_fail@plt+0x27d4>
   13444:	ldr	r2, [fp, #-20]	; 0xffffffec
   13448:	ldr	r3, [fp, #-92]	; 0xffffffa4
   1344c:	cmp	r2, r3
   13450:	bcs	13468 <__assert_fail@plt+0x2760>
   13454:	ldr	r2, [fp, #-88]	; 0xffffffa8
   13458:	ldr	r3, [fp, #-20]	; 0xffffffec
   1345c:	add	r3, r2, r3
   13460:	mov	r2, #39	; 0x27
   13464:	strb	r2, [r3]
   13468:	ldr	r3, [fp, #-20]	; 0xffffffec
   1346c:	add	r3, r3, #1
   13470:	str	r3, [fp, #-20]	; 0xffffffec
   13474:	ldr	r2, [fp, #-20]	; 0xffffffec
   13478:	ldr	r3, [fp, #-92]	; 0xffffffa4
   1347c:	cmp	r2, r3
   13480:	bcs	13498 <__assert_fail@plt+0x2790>
   13484:	ldr	r2, [fp, #-88]	; 0xffffffa8
   13488:	ldr	r3, [fp, #-20]	; 0xffffffec
   1348c:	add	r3, r2, r3
   13490:	mov	r2, #36	; 0x24
   13494:	strb	r2, [r3]
   13498:	ldr	r3, [fp, #-20]	; 0xffffffec
   1349c:	add	r3, r3, #1
   134a0:	str	r3, [fp, #-20]	; 0xffffffec
   134a4:	ldr	r2, [fp, #-20]	; 0xffffffec
   134a8:	ldr	r3, [fp, #-92]	; 0xffffffa4
   134ac:	cmp	r2, r3
   134b0:	bcs	134c8 <__assert_fail@plt+0x27c0>
   134b4:	ldr	r2, [fp, #-88]	; 0xffffffa8
   134b8:	ldr	r3, [fp, #-20]	; 0xffffffec
   134bc:	add	r3, r2, r3
   134c0:	mov	r2, #39	; 0x27
   134c4:	strb	r2, [r3]
   134c8:	ldr	r3, [fp, #-20]	; 0xffffffec
   134cc:	add	r3, r3, #1
   134d0:	str	r3, [fp, #-20]	; 0xffffffec
   134d4:	mov	r3, #1
   134d8:	strb	r3, [fp, #-35]	; 0xffffffdd
   134dc:	ldr	r2, [fp, #-20]	; 0xffffffec
   134e0:	ldr	r3, [fp, #-92]	; 0xffffffa4
   134e4:	cmp	r2, r3
   134e8:	bcs	13500 <__assert_fail@plt+0x27f8>
   134ec:	ldr	r2, [fp, #-88]	; 0xffffffa8
   134f0:	ldr	r3, [fp, #-20]	; 0xffffffec
   134f4:	add	r3, r2, r3
   134f8:	mov	r2, #92	; 0x5c
   134fc:	strb	r2, [r3]
   13500:	ldr	r3, [fp, #-20]	; 0xffffffec
   13504:	add	r3, r3, #1
   13508:	str	r3, [fp, #-20]	; 0xffffffec
   1350c:	b	13524 <__assert_fail@plt+0x281c>
   13510:	nop	{0}
   13514:	b	13524 <__assert_fail@plt+0x281c>
   13518:	nop	{0}
   1351c:	b	13524 <__assert_fail@plt+0x281c>
   13520:	nop	{0}
   13524:	ldrb	r3, [fp, #-35]	; 0xffffffdd
   13528:	cmp	r3, #0
   1352c:	beq	135ac <__assert_fail@plt+0x28a4>
   13530:	ldrb	r3, [fp, #-41]	; 0xffffffd7
   13534:	eor	r3, r3, #1
   13538:	uxtb	r3, r3
   1353c:	cmp	r3, #0
   13540:	beq	135ac <__assert_fail@plt+0x28a4>
   13544:	ldr	r2, [fp, #-20]	; 0xffffffec
   13548:	ldr	r3, [fp, #-92]	; 0xffffffa4
   1354c:	cmp	r2, r3
   13550:	bcs	13568 <__assert_fail@plt+0x2860>
   13554:	ldr	r2, [fp, #-88]	; 0xffffffa8
   13558:	ldr	r3, [fp, #-20]	; 0xffffffec
   1355c:	add	r3, r2, r3
   13560:	mov	r2, #39	; 0x27
   13564:	strb	r2, [r3]
   13568:	ldr	r3, [fp, #-20]	; 0xffffffec
   1356c:	add	r3, r3, #1
   13570:	str	r3, [fp, #-20]	; 0xffffffec
   13574:	ldr	r2, [fp, #-20]	; 0xffffffec
   13578:	ldr	r3, [fp, #-92]	; 0xffffffa4
   1357c:	cmp	r2, r3
   13580:	bcs	13598 <__assert_fail@plt+0x2890>
   13584:	ldr	r2, [fp, #-88]	; 0xffffffa8
   13588:	ldr	r3, [fp, #-20]	; 0xffffffec
   1358c:	add	r3, r2, r3
   13590:	mov	r2, #39	; 0x27
   13594:	strb	r2, [r3]
   13598:	ldr	r3, [fp, #-20]	; 0xffffffec
   1359c:	add	r3, r3, #1
   135a0:	str	r3, [fp, #-20]	; 0xffffffec
   135a4:	mov	r3, #0
   135a8:	strb	r3, [fp, #-35]	; 0xffffffdd
   135ac:	ldr	r2, [fp, #-20]	; 0xffffffec
   135b0:	ldr	r3, [fp, #-92]	; 0xffffffa4
   135b4:	cmp	r2, r3
   135b8:	bcs	135d0 <__assert_fail@plt+0x28c8>
   135bc:	ldr	r2, [fp, #-88]	; 0xffffffa8
   135c0:	ldr	r3, [fp, #-20]	; 0xffffffec
   135c4:	add	r3, r2, r3
   135c8:	ldrb	r2, [fp, #-38]	; 0xffffffda
   135cc:	strb	r2, [r3]
   135d0:	ldr	r3, [fp, #-20]	; 0xffffffec
   135d4:	add	r3, r3, #1
   135d8:	str	r3, [fp, #-20]	; 0xffffffec
   135dc:	ldrb	r3, [fp, #-42]	; 0xffffffd6
   135e0:	eor	r3, r3, #1
   135e4:	uxtb	r3, r3
   135e8:	cmp	r3, #0
   135ec:	beq	135f8 <__assert_fail@plt+0x28f0>
   135f0:	mov	r3, #0
   135f4:	strb	r3, [fp, #-37]	; 0xffffffdb
   135f8:	ldr	r3, [fp, #-16]
   135fc:	add	r3, r3, #1
   13600:	str	r3, [fp, #-16]
   13604:	ldr	r3, [fp, #-100]	; 0xffffff9c
   13608:	cmn	r3, #1
   1360c:	bne	13634 <__assert_fail@plt+0x292c>
   13610:	ldr	r2, [fp, #-96]	; 0xffffffa0
   13614:	ldr	r3, [fp, #-16]
   13618:	add	r3, r2, r3
   1361c:	ldrb	r3, [r3]
   13620:	cmp	r3, #0
   13624:	movne	r3, #1
   13628:	moveq	r3, #0
   1362c:	uxtb	r3, r3
   13630:	b	1364c <__assert_fail@plt+0x2944>
   13634:	ldr	r2, [fp, #-16]
   13638:	ldr	r3, [fp, #-100]	; 0xffffff9c
   1363c:	cmp	r2, r3
   13640:	movne	r3, #1
   13644:	moveq	r3, #0
   13648:	uxtb	r3, r3
   1364c:	cmp	r3, #0
   13650:	bne	1246c <__assert_fail@plt+0x1764>
   13654:	ldr	r3, [fp, #-20]	; 0xffffffec
   13658:	cmp	r3, #0
   1365c:	bne	13678 <__assert_fail@plt+0x2970>
   13660:	ldr	r3, [fp, #4]
   13664:	cmp	r3, #2
   13668:	bne	13678 <__assert_fail@plt+0x2970>
   1366c:	ldrb	r3, [fp, #-34]	; 0xffffffde
   13670:	cmp	r3, #0
   13674:	bne	137f8 <__assert_fail@plt+0x2af0>
   13678:	ldr	r3, [fp, #4]
   1367c:	cmp	r3, #2
   13680:	bne	13720 <__assert_fail@plt+0x2a18>
   13684:	ldrb	r3, [fp, #-34]	; 0xffffffde
   13688:	eor	r3, r3, #1
   1368c:	uxtb	r3, r3
   13690:	cmp	r3, #0
   13694:	beq	13720 <__assert_fail@plt+0x2a18>
   13698:	ldrb	r3, [fp, #-36]	; 0xffffffdc
   1369c:	cmp	r3, #0
   136a0:	beq	13720 <__assert_fail@plt+0x2a18>
   136a4:	ldrb	r3, [fp, #-37]	; 0xffffffdb
   136a8:	cmp	r3, #0
   136ac:	beq	136f4 <__assert_fail@plt+0x29ec>
   136b0:	ldr	r3, [fp, #20]
   136b4:	str	r3, [sp, #16]
   136b8:	ldr	r3, [fp, #16]
   136bc:	str	r3, [sp, #12]
   136c0:	ldr	r3, [fp, #12]
   136c4:	str	r3, [sp, #8]
   136c8:	ldr	r3, [fp, #8]
   136cc:	str	r3, [sp, #4]
   136d0:	mov	r3, #5
   136d4:	str	r3, [sp]
   136d8:	ldr	r3, [fp, #-100]	; 0xffffff9c
   136dc:	ldr	r2, [fp, #-96]	; 0xffffffa0
   136e0:	ldr	r1, [fp, #-24]	; 0xffffffe8
   136e4:	ldr	r0, [fp, #-88]	; 0xffffffa8
   136e8:	bl	121a4 <__assert_fail@plt+0x149c>
   136ec:	mov	r3, r0
   136f0:	b	13860 <__assert_fail@plt+0x2b58>
   136f4:	ldr	r3, [fp, #-92]	; 0xffffffa4
   136f8:	cmp	r3, #0
   136fc:	bne	13720 <__assert_fail@plt+0x2a18>
   13700:	ldr	r3, [fp, #-24]	; 0xffffffe8
   13704:	cmp	r3, #0
   13708:	beq	13720 <__assert_fail@plt+0x2a18>
   1370c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   13710:	str	r3, [fp, #-92]	; 0xffffffa4
   13714:	mov	r3, #0
   13718:	str	r3, [fp, #-20]	; 0xffffffec
   1371c:	b	12238 <__assert_fail@plt+0x1530>
   13720:	ldr	r3, [fp, #-28]	; 0xffffffe4
   13724:	cmp	r3, #0
   13728:	beq	13794 <__assert_fail@plt+0x2a8c>
   1372c:	ldrb	r3, [fp, #-34]	; 0xffffffde
   13730:	eor	r3, r3, #1
   13734:	uxtb	r3, r3
   13738:	cmp	r3, #0
   1373c:	beq	13794 <__assert_fail@plt+0x2a8c>
   13740:	b	13784 <__assert_fail@plt+0x2a7c>
   13744:	ldr	r2, [fp, #-20]	; 0xffffffec
   13748:	ldr	r3, [fp, #-92]	; 0xffffffa4
   1374c:	cmp	r2, r3
   13750:	bcs	1376c <__assert_fail@plt+0x2a64>
   13754:	ldr	r2, [fp, #-88]	; 0xffffffa8
   13758:	ldr	r3, [fp, #-20]	; 0xffffffec
   1375c:	add	r3, r2, r3
   13760:	ldr	r2, [fp, #-28]	; 0xffffffe4
   13764:	ldrb	r2, [r2]
   13768:	strb	r2, [r3]
   1376c:	ldr	r3, [fp, #-20]	; 0xffffffec
   13770:	add	r3, r3, #1
   13774:	str	r3, [fp, #-20]	; 0xffffffec
   13778:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1377c:	add	r3, r3, #1
   13780:	str	r3, [fp, #-28]	; 0xffffffe4
   13784:	ldr	r3, [fp, #-28]	; 0xffffffe4
   13788:	ldrb	r3, [r3]
   1378c:	cmp	r3, #0
   13790:	bne	13744 <__assert_fail@plt+0x2a3c>
   13794:	ldr	r2, [fp, #-20]	; 0xffffffec
   13798:	ldr	r3, [fp, #-92]	; 0xffffffa4
   1379c:	cmp	r2, r3
   137a0:	bcs	137b8 <__assert_fail@plt+0x2ab0>
   137a4:	ldr	r2, [fp, #-88]	; 0xffffffa8
   137a8:	ldr	r3, [fp, #-20]	; 0xffffffec
   137ac:	add	r3, r2, r3
   137b0:	mov	r2, #0
   137b4:	strb	r2, [r3]
   137b8:	ldr	r3, [fp, #-20]	; 0xffffffec
   137bc:	b	13860 <__assert_fail@plt+0x2b58>
   137c0:	nop	{0}
   137c4:	b	137fc <__assert_fail@plt+0x2af4>
   137c8:	nop	{0}
   137cc:	b	137fc <__assert_fail@plt+0x2af4>
   137d0:	nop	{0}
   137d4:	b	137fc <__assert_fail@plt+0x2af4>
   137d8:	nop	{0}
   137dc:	b	137fc <__assert_fail@plt+0x2af4>
   137e0:	nop	{0}
   137e4:	b	137fc <__assert_fail@plt+0x2af4>
   137e8:	nop	{0}
   137ec:	b	137fc <__assert_fail@plt+0x2af4>
   137f0:	nop	{0}
   137f4:	b	137fc <__assert_fail@plt+0x2af4>
   137f8:	nop	{0}
   137fc:	ldr	r3, [fp, #4]
   13800:	cmp	r3, #2
   13804:	bne	1381c <__assert_fail@plt+0x2b14>
   13808:	ldrb	r3, [fp, #-33]	; 0xffffffdf
   1380c:	cmp	r3, #0
   13810:	beq	1381c <__assert_fail@plt+0x2b14>
   13814:	mov	r3, #4
   13818:	str	r3, [fp, #4]
   1381c:	ldr	r3, [fp, #8]
   13820:	bic	r3, r3, #2
   13824:	ldr	r2, [fp, #20]
   13828:	str	r2, [sp, #16]
   1382c:	ldr	r2, [fp, #16]
   13830:	str	r2, [sp, #12]
   13834:	mov	r2, #0
   13838:	str	r2, [sp, #8]
   1383c:	str	r3, [sp, #4]
   13840:	ldr	r3, [fp, #4]
   13844:	str	r3, [sp]
   13848:	ldr	r3, [fp, #-100]	; 0xffffff9c
   1384c:	ldr	r2, [fp, #-96]	; 0xffffffa0
   13850:	ldr	r1, [fp, #-92]	; 0xffffffa4
   13854:	ldr	r0, [fp, #-88]	; 0xffffffa8
   13858:	bl	121a4 <__assert_fail@plt+0x149c>
   1385c:	mov	r3, r0
   13860:	mov	r0, r3
   13864:	sub	sp, fp, #8
   13868:	ldr	r4, [sp]
   1386c:	ldr	fp, [sp, #4]
   13870:	add	sp, sp, #8
   13874:	pop	{pc}		; (ldr pc, [sp], #4)
   13878:	str	fp, [sp, #-8]!
   1387c:	str	lr, [sp, #4]
   13880:	add	fp, sp, #4
   13884:	sub	sp, sp, #56	; 0x38
   13888:	str	r0, [fp, #-24]	; 0xffffffe8
   1388c:	str	r1, [fp, #-28]	; 0xffffffe4
   13890:	str	r2, [fp, #-32]	; 0xffffffe0
   13894:	str	r3, [fp, #-36]	; 0xffffffdc
   13898:	ldr	r3, [fp, #4]
   1389c:	cmp	r3, #0
   138a0:	beq	138ac <__assert_fail@plt+0x2ba4>
   138a4:	ldr	r3, [fp, #4]
   138a8:	b	138b4 <__assert_fail@plt+0x2bac>
   138ac:	movw	r3, #33080	; 0x8138
   138b0:	movt	r3, #2
   138b4:	str	r3, [fp, #-8]
   138b8:	bl	10c6c <__errno_location@plt>
   138bc:	mov	r3, r0
   138c0:	ldr	r3, [r3]
   138c4:	str	r3, [fp, #-12]
   138c8:	ldr	r3, [fp, #-8]
   138cc:	ldr	r3, [r3]
   138d0:	ldr	r2, [fp, #-8]
   138d4:	ldr	r2, [r2, #4]
   138d8:	ldr	r1, [fp, #-8]
   138dc:	add	r1, r1, #8
   138e0:	ldr	r0, [fp, #-8]
   138e4:	ldr	r0, [r0, #40]	; 0x28
   138e8:	ldr	ip, [fp, #-8]
   138ec:	ldr	ip, [ip, #44]	; 0x2c
   138f0:	str	ip, [sp, #16]
   138f4:	str	r0, [sp, #12]
   138f8:	str	r1, [sp, #8]
   138fc:	str	r2, [sp, #4]
   13900:	str	r3, [sp]
   13904:	ldr	r3, [fp, #-36]	; 0xffffffdc
   13908:	ldr	r2, [fp, #-32]	; 0xffffffe0
   1390c:	ldr	r1, [fp, #-28]	; 0xffffffe4
   13910:	ldr	r0, [fp, #-24]	; 0xffffffe8
   13914:	bl	121a4 <__assert_fail@plt+0x149c>
   13918:	str	r0, [fp, #-16]
   1391c:	bl	10c6c <__errno_location@plt>
   13920:	mov	r2, r0
   13924:	ldr	r3, [fp, #-12]
   13928:	str	r3, [r2]
   1392c:	ldr	r3, [fp, #-16]
   13930:	mov	r0, r3
   13934:	sub	sp, fp, #4
   13938:	ldr	fp, [sp]
   1393c:	add	sp, sp, #4
   13940:	pop	{pc}		; (ldr pc, [sp], #4)
   13944:	str	fp, [sp, #-8]!
   13948:	str	lr, [sp, #4]
   1394c:	add	fp, sp, #4
   13950:	sub	sp, sp, #16
   13954:	str	r0, [fp, #-8]
   13958:	str	r1, [fp, #-12]
   1395c:	str	r2, [fp, #-16]
   13960:	ldr	r3, [fp, #-16]
   13964:	mov	r2, #0
   13968:	ldr	r1, [fp, #-12]
   1396c:	ldr	r0, [fp, #-8]
   13970:	bl	1398c <__assert_fail@plt+0x2c84>
   13974:	mov	r3, r0
   13978:	mov	r0, r3
   1397c:	sub	sp, fp, #4
   13980:	ldr	fp, [sp]
   13984:	add	sp, sp, #4
   13988:	pop	{pc}		; (ldr pc, [sp], #4)
   1398c:	str	fp, [sp, #-8]!
   13990:	str	lr, [sp, #4]
   13994:	add	fp, sp, #4
   13998:	sub	sp, sp, #64	; 0x40
   1399c:	str	r0, [fp, #-32]	; 0xffffffe0
   139a0:	str	r1, [fp, #-36]	; 0xffffffdc
   139a4:	str	r2, [fp, #-40]	; 0xffffffd8
   139a8:	str	r3, [fp, #-44]	; 0xffffffd4
   139ac:	ldr	r3, [fp, #-44]	; 0xffffffd4
   139b0:	cmp	r3, #0
   139b4:	beq	139c0 <__assert_fail@plt+0x2cb8>
   139b8:	ldr	r3, [fp, #-44]	; 0xffffffd4
   139bc:	b	139c8 <__assert_fail@plt+0x2cc0>
   139c0:	movw	r3, #33080	; 0x8138
   139c4:	movt	r3, #2
   139c8:	str	r3, [fp, #-8]
   139cc:	bl	10c6c <__errno_location@plt>
   139d0:	mov	r3, r0
   139d4:	ldr	r3, [r3]
   139d8:	str	r3, [fp, #-12]
   139dc:	ldr	r3, [fp, #-8]
   139e0:	ldr	r3, [r3, #4]
   139e4:	ldr	r2, [fp, #-40]	; 0xffffffd8
   139e8:	cmp	r2, #0
   139ec:	moveq	r2, #1
   139f0:	movne	r2, #0
   139f4:	uxtb	r2, r2
   139f8:	orr	r3, r3, r2
   139fc:	str	r3, [fp, #-16]
   13a00:	ldr	r3, [fp, #-8]
   13a04:	ldr	r3, [r3]
   13a08:	ldr	r2, [fp, #-8]
   13a0c:	add	r2, r2, #8
   13a10:	ldr	r1, [fp, #-8]
   13a14:	ldr	r1, [r1, #40]	; 0x28
   13a18:	ldr	r0, [fp, #-8]
   13a1c:	ldr	r0, [r0, #44]	; 0x2c
   13a20:	str	r0, [sp, #16]
   13a24:	str	r1, [sp, #12]
   13a28:	str	r2, [sp, #8]
   13a2c:	ldr	r2, [fp, #-16]
   13a30:	str	r2, [sp, #4]
   13a34:	str	r3, [sp]
   13a38:	ldr	r3, [fp, #-36]	; 0xffffffdc
   13a3c:	ldr	r2, [fp, #-32]	; 0xffffffe0
   13a40:	mov	r1, #0
   13a44:	mov	r0, #0
   13a48:	bl	121a4 <__assert_fail@plt+0x149c>
   13a4c:	mov	r3, r0
   13a50:	add	r3, r3, #1
   13a54:	str	r3, [fp, #-20]	; 0xffffffec
   13a58:	ldr	r0, [fp, #-20]	; 0xffffffec
   13a5c:	bl	14e9c <__assert_fail@plt+0x4194>
   13a60:	mov	r3, r0
   13a64:	str	r3, [fp, #-24]	; 0xffffffe8
   13a68:	ldr	r3, [fp, #-8]
   13a6c:	ldr	r3, [r3]
   13a70:	ldr	r2, [fp, #-8]
   13a74:	add	r2, r2, #8
   13a78:	ldr	r1, [fp, #-8]
   13a7c:	ldr	r1, [r1, #40]	; 0x28
   13a80:	ldr	r0, [fp, #-8]
   13a84:	ldr	r0, [r0, #44]	; 0x2c
   13a88:	str	r0, [sp, #16]
   13a8c:	str	r1, [sp, #12]
   13a90:	str	r2, [sp, #8]
   13a94:	ldr	r2, [fp, #-16]
   13a98:	str	r2, [sp, #4]
   13a9c:	str	r3, [sp]
   13aa0:	ldr	r3, [fp, #-36]	; 0xffffffdc
   13aa4:	ldr	r2, [fp, #-32]	; 0xffffffe0
   13aa8:	ldr	r1, [fp, #-20]	; 0xffffffec
   13aac:	ldr	r0, [fp, #-24]	; 0xffffffe8
   13ab0:	bl	121a4 <__assert_fail@plt+0x149c>
   13ab4:	bl	10c6c <__errno_location@plt>
   13ab8:	mov	r2, r0
   13abc:	ldr	r3, [fp, #-12]
   13ac0:	str	r3, [r2]
   13ac4:	ldr	r3, [fp, #-40]	; 0xffffffd8
   13ac8:	cmp	r3, #0
   13acc:	beq	13ae0 <__assert_fail@plt+0x2dd8>
   13ad0:	ldr	r3, [fp, #-20]	; 0xffffffec
   13ad4:	sub	r2, r3, #1
   13ad8:	ldr	r3, [fp, #-40]	; 0xffffffd8
   13adc:	str	r2, [r3]
   13ae0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   13ae4:	mov	r0, r3
   13ae8:	sub	sp, fp, #4
   13aec:	ldr	fp, [sp]
   13af0:	add	sp, sp, #4
   13af4:	pop	{pc}		; (ldr pc, [sp], #4)
   13af8:	str	fp, [sp, #-8]!
   13afc:	str	lr, [sp, #4]
   13b00:	add	fp, sp, #4
   13b04:	sub	sp, sp, #8
   13b08:	movw	r3, #32992	; 0x80e0
   13b0c:	movt	r3, #2
   13b10:	ldr	r3, [r3]
   13b14:	str	r3, [fp, #-12]
   13b18:	mov	r3, #1
   13b1c:	str	r3, [fp, #-8]
   13b20:	b	13b4c <__assert_fail@plt+0x2e44>
   13b24:	ldr	r3, [fp, #-8]
   13b28:	lsl	r3, r3, #3
   13b2c:	ldr	r2, [fp, #-12]
   13b30:	add	r3, r2, r3
   13b34:	ldr	r3, [r3, #4]
   13b38:	mov	r0, r3
   13b3c:	bl	15c40 <__assert_fail@plt+0x4f38>
   13b40:	ldr	r3, [fp, #-8]
   13b44:	add	r3, r3, #1
   13b48:	str	r3, [fp, #-8]
   13b4c:	movw	r3, #32980	; 0x80d4
   13b50:	movt	r3, #2
   13b54:	ldr	r3, [r3]
   13b58:	ldr	r2, [fp, #-8]
   13b5c:	cmp	r2, r3
   13b60:	blt	13b24 <__assert_fail@plt+0x2e1c>
   13b64:	ldr	r3, [fp, #-12]
   13b68:	ldr	r2, [r3, #4]
   13b6c:	movw	r3, #33128	; 0x8168
   13b70:	movt	r3, #2
   13b74:	cmp	r2, r3
   13b78:	beq	13bb0 <__assert_fail@plt+0x2ea8>
   13b7c:	ldr	r3, [fp, #-12]
   13b80:	ldr	r3, [r3, #4]
   13b84:	mov	r0, r3
   13b88:	bl	15c40 <__assert_fail@plt+0x4f38>
   13b8c:	movw	r3, #32984	; 0x80d8
   13b90:	movt	r3, #2
   13b94:	mov	r2, #256	; 0x100
   13b98:	str	r2, [r3]
   13b9c:	movw	r3, #32984	; 0x80d8
   13ba0:	movt	r3, #2
   13ba4:	movw	r2, #33128	; 0x8168
   13ba8:	movt	r2, #2
   13bac:	str	r2, [r3, #4]
   13bb0:	ldr	r2, [fp, #-12]
   13bb4:	movw	r3, #32984	; 0x80d8
   13bb8:	movt	r3, #2
   13bbc:	cmp	r2, r3
   13bc0:	beq	13be0 <__assert_fail@plt+0x2ed8>
   13bc4:	ldr	r0, [fp, #-12]
   13bc8:	bl	15c40 <__assert_fail@plt+0x4f38>
   13bcc:	movw	r3, #32992	; 0x80e0
   13bd0:	movt	r3, #2
   13bd4:	movw	r2, #32984	; 0x80d8
   13bd8:	movt	r2, #2
   13bdc:	str	r2, [r3]
   13be0:	movw	r3, #32980	; 0x80d4
   13be4:	movt	r3, #2
   13be8:	mov	r2, #1
   13bec:	str	r2, [r3]
   13bf0:	nop	{0}
   13bf4:	sub	sp, fp, #4
   13bf8:	ldr	fp, [sp]
   13bfc:	add	sp, sp, #4
   13c00:	pop	{pc}		; (ldr pc, [sp], #4)
   13c04:	str	fp, [sp, #-8]!
   13c08:	str	lr, [sp, #4]
   13c0c:	add	fp, sp, #4
   13c10:	sub	sp, sp, #80	; 0x50
   13c14:	str	r0, [fp, #-48]	; 0xffffffd0
   13c18:	str	r1, [fp, #-52]	; 0xffffffcc
   13c1c:	str	r2, [fp, #-56]	; 0xffffffc8
   13c20:	str	r3, [fp, #-60]	; 0xffffffc4
   13c24:	bl	10c6c <__errno_location@plt>
   13c28:	mov	r3, r0
   13c2c:	ldr	r3, [r3]
   13c30:	str	r3, [fp, #-16]
   13c34:	movw	r3, #32992	; 0x80e0
   13c38:	movt	r3, #2
   13c3c:	ldr	r3, [r3]
   13c40:	str	r3, [fp, #-8]
   13c44:	mvn	r3, #-2147483648	; 0x80000000
   13c48:	str	r3, [fp, #-20]	; 0xffffffec
   13c4c:	ldr	r3, [fp, #-48]	; 0xffffffd0
   13c50:	cmp	r3, #0
   13c54:	blt	13c68 <__assert_fail@plt+0x2f60>
   13c58:	ldr	r2, [fp, #-48]	; 0xffffffd0
   13c5c:	ldr	r3, [fp, #-20]	; 0xffffffec
   13c60:	cmp	r2, r3
   13c64:	blt	13c6c <__assert_fail@plt+0x2f64>
   13c68:	bl	10cf0 <abort@plt>
   13c6c:	movw	r3, #32980	; 0x80d4
   13c70:	movt	r3, #2
   13c74:	ldr	r3, [r3]
   13c78:	ldr	r2, [fp, #-48]	; 0xffffffd0
   13c7c:	cmp	r2, r3
   13c80:	blt	13d78 <__assert_fail@plt+0x3070>
   13c84:	ldr	r2, [fp, #-8]
   13c88:	movw	r3, #32984	; 0x80d8
   13c8c:	movt	r3, #2
   13c90:	cmp	r2, r3
   13c94:	moveq	r3, #1
   13c98:	movne	r3, #0
   13c9c:	strb	r3, [fp, #-21]	; 0xffffffeb
   13ca0:	movw	r3, #32980	; 0x80d4
   13ca4:	movt	r3, #2
   13ca8:	ldr	r3, [r3]
   13cac:	str	r3, [fp, #-40]	; 0xffffffd8
   13cb0:	ldrb	r3, [fp, #-21]	; 0xffffffeb
   13cb4:	cmp	r3, #0
   13cb8:	beq	13cc4 <__assert_fail@plt+0x2fbc>
   13cbc:	mov	r0, #0
   13cc0:	b	13cc8 <__assert_fail@plt+0x2fc0>
   13cc4:	ldr	r0, [fp, #-8]
   13cc8:	movw	r3, #32980	; 0x80d4
   13ccc:	movt	r3, #2
   13cd0:	ldr	r3, [r3]
   13cd4:	ldr	r2, [fp, #-48]	; 0xffffffd0
   13cd8:	sub	r3, r2, r3
   13cdc:	add	r2, r3, #1
   13ce0:	sub	r1, fp, #40	; 0x28
   13ce4:	mov	r3, #8
   13ce8:	str	r3, [sp]
   13cec:	ldr	r3, [fp, #-20]	; 0xffffffec
   13cf0:	bl	151fc <__assert_fail@plt+0x44f4>
   13cf4:	str	r0, [fp, #-8]
   13cf8:	movw	r3, #32992	; 0x80e0
   13cfc:	movt	r3, #2
   13d00:	ldr	r2, [fp, #-8]
   13d04:	str	r2, [r3]
   13d08:	ldrb	r3, [fp, #-21]	; 0xffffffeb
   13d0c:	cmp	r3, #0
   13d10:	beq	13d2c <__assert_fail@plt+0x3024>
   13d14:	ldr	r2, [fp, #-8]
   13d18:	movw	r3, #32984	; 0x80d8
   13d1c:	movt	r3, #2
   13d20:	mov	r1, r2
   13d24:	ldrd	r2, [r3]
   13d28:	strd	r2, [r1]
   13d2c:	movw	r3, #32980	; 0x80d4
   13d30:	movt	r3, #2
   13d34:	ldr	r3, [r3]
   13d38:	lsl	r3, r3, #3
   13d3c:	ldr	r2, [fp, #-8]
   13d40:	add	r0, r2, r3
   13d44:	ldr	r2, [fp, #-40]	; 0xffffffd8
   13d48:	movw	r3, #32980	; 0x80d4
   13d4c:	movt	r3, #2
   13d50:	ldr	r3, [r3]
   13d54:	sub	r3, r2, r3
   13d58:	lsl	r3, r3, #3
   13d5c:	mov	r2, r3
   13d60:	mov	r1, #0
   13d64:	bl	10c84 <memset@plt>
   13d68:	ldr	r2, [fp, #-40]	; 0xffffffd8
   13d6c:	movw	r3, #32980	; 0x80d4
   13d70:	movt	r3, #2
   13d74:	str	r2, [r3]
   13d78:	ldr	r3, [fp, #-48]	; 0xffffffd0
   13d7c:	lsl	r3, r3, #3
   13d80:	ldr	r2, [fp, #-8]
   13d84:	add	r3, r2, r3
   13d88:	ldr	r3, [r3]
   13d8c:	str	r3, [fp, #-28]	; 0xffffffe4
   13d90:	ldr	r3, [fp, #-48]	; 0xffffffd0
   13d94:	lsl	r3, r3, #3
   13d98:	ldr	r2, [fp, #-8]
   13d9c:	add	r3, r2, r3
   13da0:	ldr	r3, [r3, #4]
   13da4:	str	r3, [fp, #-12]
   13da8:	ldr	r3, [fp, #-60]	; 0xffffffc4
   13dac:	ldr	r3, [r3, #4]
   13db0:	orr	r3, r3, #1
   13db4:	str	r3, [fp, #-32]	; 0xffffffe0
   13db8:	ldr	r3, [fp, #-60]	; 0xffffffc4
   13dbc:	ldr	r3, [r3]
   13dc0:	ldr	r2, [fp, #-60]	; 0xffffffc4
   13dc4:	add	r2, r2, #8
   13dc8:	ldr	r1, [fp, #-60]	; 0xffffffc4
   13dcc:	ldr	r1, [r1, #40]	; 0x28
   13dd0:	ldr	r0, [fp, #-60]	; 0xffffffc4
   13dd4:	ldr	r0, [r0, #44]	; 0x2c
   13dd8:	str	r0, [sp, #16]
   13ddc:	str	r1, [sp, #12]
   13de0:	str	r2, [sp, #8]
   13de4:	ldr	r2, [fp, #-32]	; 0xffffffe0
   13de8:	str	r2, [sp, #4]
   13dec:	str	r3, [sp]
   13df0:	ldr	r3, [fp, #-56]	; 0xffffffc8
   13df4:	ldr	r2, [fp, #-52]	; 0xffffffcc
   13df8:	ldr	r1, [fp, #-28]	; 0xffffffe4
   13dfc:	ldr	r0, [fp, #-12]
   13e00:	bl	121a4 <__assert_fail@plt+0x149c>
   13e04:	str	r0, [fp, #-36]	; 0xffffffdc
   13e08:	ldr	r2, [fp, #-28]	; 0xffffffe4
   13e0c:	ldr	r3, [fp, #-36]	; 0xffffffdc
   13e10:	cmp	r2, r3
   13e14:	bhi	13ecc <__assert_fail@plt+0x31c4>
   13e18:	ldr	r3, [fp, #-36]	; 0xffffffdc
   13e1c:	add	r3, r3, #1
   13e20:	str	r3, [fp, #-28]	; 0xffffffe4
   13e24:	ldr	r3, [fp, #-48]	; 0xffffffd0
   13e28:	lsl	r3, r3, #3
   13e2c:	ldr	r2, [fp, #-8]
   13e30:	add	r3, r2, r3
   13e34:	ldr	r2, [fp, #-28]	; 0xffffffe4
   13e38:	str	r2, [r3]
   13e3c:	ldr	r2, [fp, #-12]
   13e40:	movw	r3, #33128	; 0x8168
   13e44:	movt	r3, #2
   13e48:	cmp	r2, r3
   13e4c:	beq	13e58 <__assert_fail@plt+0x3150>
   13e50:	ldr	r0, [fp, #-12]
   13e54:	bl	15c40 <__assert_fail@plt+0x4f38>
   13e58:	ldr	r0, [fp, #-28]	; 0xffffffe4
   13e5c:	bl	14e9c <__assert_fail@plt+0x4194>
   13e60:	mov	r3, r0
   13e64:	str	r3, [fp, #-12]
   13e68:	ldr	r3, [fp, #-48]	; 0xffffffd0
   13e6c:	lsl	r3, r3, #3
   13e70:	ldr	r2, [fp, #-8]
   13e74:	add	r3, r2, r3
   13e78:	ldr	r2, [fp, #-12]
   13e7c:	str	r2, [r3, #4]
   13e80:	ldr	r3, [fp, #-60]	; 0xffffffc4
   13e84:	ldr	r3, [r3]
   13e88:	ldr	r2, [fp, #-60]	; 0xffffffc4
   13e8c:	add	r2, r2, #8
   13e90:	ldr	r1, [fp, #-60]	; 0xffffffc4
   13e94:	ldr	r1, [r1, #40]	; 0x28
   13e98:	ldr	r0, [fp, #-60]	; 0xffffffc4
   13e9c:	ldr	r0, [r0, #44]	; 0x2c
   13ea0:	str	r0, [sp, #16]
   13ea4:	str	r1, [sp, #12]
   13ea8:	str	r2, [sp, #8]
   13eac:	ldr	r2, [fp, #-32]	; 0xffffffe0
   13eb0:	str	r2, [sp, #4]
   13eb4:	str	r3, [sp]
   13eb8:	ldr	r3, [fp, #-56]	; 0xffffffc8
   13ebc:	ldr	r2, [fp, #-52]	; 0xffffffcc
   13ec0:	ldr	r1, [fp, #-28]	; 0xffffffe4
   13ec4:	ldr	r0, [fp, #-12]
   13ec8:	bl	121a4 <__assert_fail@plt+0x149c>
   13ecc:	bl	10c6c <__errno_location@plt>
   13ed0:	mov	r2, r0
   13ed4:	ldr	r3, [fp, #-16]
   13ed8:	str	r3, [r2]
   13edc:	ldr	r3, [fp, #-12]
   13ee0:	mov	r0, r3
   13ee4:	sub	sp, fp, #4
   13ee8:	ldr	fp, [sp]
   13eec:	add	sp, sp, #4
   13ef0:	pop	{pc}		; (ldr pc, [sp], #4)
   13ef4:	str	fp, [sp, #-8]!
   13ef8:	str	lr, [sp, #4]
   13efc:	add	fp, sp, #4
   13f00:	sub	sp, sp, #8
   13f04:	str	r0, [fp, #-8]
   13f08:	str	r1, [fp, #-12]
   13f0c:	movw	r3, #33080	; 0x8138
   13f10:	movt	r3, #2
   13f14:	mvn	r2, #0
   13f18:	ldr	r1, [fp, #-12]
   13f1c:	ldr	r0, [fp, #-8]
   13f20:	bl	13c04 <__assert_fail@plt+0x2efc>
   13f24:	mov	r3, r0
   13f28:	mov	r0, r3
   13f2c:	sub	sp, fp, #4
   13f30:	ldr	fp, [sp]
   13f34:	add	sp, sp, #4
   13f38:	pop	{pc}		; (ldr pc, [sp], #4)
   13f3c:	str	fp, [sp, #-8]!
   13f40:	str	lr, [sp, #4]
   13f44:	add	fp, sp, #4
   13f48:	sub	sp, sp, #16
   13f4c:	str	r0, [fp, #-8]
   13f50:	str	r1, [fp, #-12]
   13f54:	str	r2, [fp, #-16]
   13f58:	movw	r3, #33080	; 0x8138
   13f5c:	movt	r3, #2
   13f60:	ldr	r2, [fp, #-16]
   13f64:	ldr	r1, [fp, #-12]
   13f68:	ldr	r0, [fp, #-8]
   13f6c:	bl	13c04 <__assert_fail@plt+0x2efc>
   13f70:	mov	r3, r0
   13f74:	mov	r0, r3
   13f78:	sub	sp, fp, #4
   13f7c:	ldr	fp, [sp]
   13f80:	add	sp, sp, #4
   13f84:	pop	{pc}		; (ldr pc, [sp], #4)
   13f88:	str	fp, [sp, #-8]!
   13f8c:	str	lr, [sp, #4]
   13f90:	add	fp, sp, #4
   13f94:	sub	sp, sp, #8
   13f98:	str	r0, [fp, #-8]
   13f9c:	ldr	r1, [fp, #-8]
   13fa0:	mov	r0, #0
   13fa4:	bl	13ef4 <__assert_fail@plt+0x31ec>
   13fa8:	mov	r3, r0
   13fac:	mov	r0, r3
   13fb0:	sub	sp, fp, #4
   13fb4:	ldr	fp, [sp]
   13fb8:	add	sp, sp, #4
   13fbc:	pop	{pc}		; (ldr pc, [sp], #4)
   13fc0:	str	fp, [sp, #-8]!
   13fc4:	str	lr, [sp, #4]
   13fc8:	add	fp, sp, #4
   13fcc:	sub	sp, sp, #8
   13fd0:	str	r0, [fp, #-8]
   13fd4:	str	r1, [fp, #-12]
   13fd8:	ldr	r2, [fp, #-12]
   13fdc:	ldr	r1, [fp, #-8]
   13fe0:	mov	r0, #0
   13fe4:	bl	13f3c <__assert_fail@plt+0x3234>
   13fe8:	mov	r3, r0
   13fec:	mov	r0, r3
   13ff0:	sub	sp, fp, #4
   13ff4:	ldr	fp, [sp]
   13ff8:	add	sp, sp, #4
   13ffc:	pop	{pc}		; (ldr pc, [sp], #4)
   14000:	str	fp, [sp, #-8]!
   14004:	str	lr, [sp, #4]
   14008:	add	fp, sp, #4
   1400c:	sub	sp, sp, #64	; 0x40
   14010:	str	r0, [fp, #-56]	; 0xffffffc8
   14014:	str	r1, [fp, #-60]	; 0xffffffc4
   14018:	str	r2, [fp, #-64]	; 0xffffffc0
   1401c:	sub	r3, fp, #52	; 0x34
   14020:	ldr	r1, [fp, #-60]	; 0xffffffc4
   14024:	mov	r0, r3
   14028:	bl	12000 <__assert_fail@plt+0x12f8>
   1402c:	sub	r3, fp, #52	; 0x34
   14030:	mvn	r2, #0
   14034:	ldr	r1, [fp, #-64]	; 0xffffffc0
   14038:	ldr	r0, [fp, #-56]	; 0xffffffc8
   1403c:	bl	13c04 <__assert_fail@plt+0x2efc>
   14040:	mov	r3, r0
   14044:	mov	r0, r3
   14048:	sub	sp, fp, #4
   1404c:	ldr	fp, [sp]
   14050:	add	sp, sp, #4
   14054:	pop	{pc}		; (ldr pc, [sp], #4)
   14058:	str	fp, [sp, #-8]!
   1405c:	str	lr, [sp, #4]
   14060:	add	fp, sp, #4
   14064:	sub	sp, sp, #64	; 0x40
   14068:	str	r0, [fp, #-56]	; 0xffffffc8
   1406c:	str	r1, [fp, #-60]	; 0xffffffc4
   14070:	str	r2, [fp, #-64]	; 0xffffffc0
   14074:	str	r3, [fp, #-68]	; 0xffffffbc
   14078:	sub	r3, fp, #52	; 0x34
   1407c:	ldr	r1, [fp, #-60]	; 0xffffffc4
   14080:	mov	r0, r3
   14084:	bl	12000 <__assert_fail@plt+0x12f8>
   14088:	sub	r3, fp, #52	; 0x34
   1408c:	ldr	r2, [fp, #-68]	; 0xffffffbc
   14090:	ldr	r1, [fp, #-64]	; 0xffffffc0
   14094:	ldr	r0, [fp, #-56]	; 0xffffffc8
   14098:	bl	13c04 <__assert_fail@plt+0x2efc>
   1409c:	mov	r3, r0
   140a0:	mov	r0, r3
   140a4:	sub	sp, fp, #4
   140a8:	ldr	fp, [sp]
   140ac:	add	sp, sp, #4
   140b0:	pop	{pc}		; (ldr pc, [sp], #4)
   140b4:	str	fp, [sp, #-8]!
   140b8:	str	lr, [sp, #4]
   140bc:	add	fp, sp, #4
   140c0:	sub	sp, sp, #8
   140c4:	str	r0, [fp, #-8]
   140c8:	str	r1, [fp, #-12]
   140cc:	ldr	r2, [fp, #-12]
   140d0:	ldr	r1, [fp, #-8]
   140d4:	mov	r0, #0
   140d8:	bl	14000 <__assert_fail@plt+0x32f8>
   140dc:	mov	r3, r0
   140e0:	mov	r0, r3
   140e4:	sub	sp, fp, #4
   140e8:	ldr	fp, [sp]
   140ec:	add	sp, sp, #4
   140f0:	pop	{pc}		; (ldr pc, [sp], #4)
   140f4:	str	fp, [sp, #-8]!
   140f8:	str	lr, [sp, #4]
   140fc:	add	fp, sp, #4
   14100:	sub	sp, sp, #16
   14104:	str	r0, [fp, #-8]
   14108:	str	r1, [fp, #-12]
   1410c:	str	r2, [fp, #-16]
   14110:	ldr	r3, [fp, #-16]
   14114:	ldr	r2, [fp, #-12]
   14118:	ldr	r1, [fp, #-8]
   1411c:	mov	r0, #0
   14120:	bl	14058 <__assert_fail@plt+0x3350>
   14124:	mov	r3, r0
   14128:	mov	r0, r3
   1412c:	sub	sp, fp, #4
   14130:	ldr	fp, [sp]
   14134:	add	sp, sp, #4
   14138:	pop	{pc}		; (ldr pc, [sp], #4)
   1413c:	str	fp, [sp, #-8]!
   14140:	str	lr, [sp, #4]
   14144:	add	fp, sp, #4
   14148:	sub	sp, sp, #64	; 0x40
   1414c:	str	r0, [fp, #-56]	; 0xffffffc8
   14150:	str	r1, [fp, #-60]	; 0xffffffc4
   14154:	mov	r3, r2
   14158:	strb	r3, [fp, #-61]	; 0xffffffc3
   1415c:	movw	r2, #33080	; 0x8138
   14160:	movt	r2, #2
   14164:	sub	r3, fp, #52	; 0x34
   14168:	ldrd	r0, [r2]
   1416c:	strd	r0, [r3]
   14170:	ldrd	r0, [r2, #8]
   14174:	strd	r0, [r3, #8]
   14178:	ldrd	r0, [r2, #16]
   1417c:	strd	r0, [r3, #16]
   14180:	ldrd	r0, [r2, #24]
   14184:	strd	r0, [r3, #24]
   14188:	ldrd	r0, [r2, #32]
   1418c:	strd	r0, [r3, #32]
   14190:	ldrd	r0, [r2, #40]	; 0x28
   14194:	strd	r0, [r3, #40]	; 0x28
   14198:	ldrb	r1, [fp, #-61]	; 0xffffffc3
   1419c:	sub	r3, fp, #52	; 0x34
   141a0:	mov	r2, #1
   141a4:	mov	r0, r3
   141a8:	bl	11e60 <__assert_fail@plt+0x1158>
   141ac:	sub	r3, fp, #52	; 0x34
   141b0:	ldr	r2, [fp, #-60]	; 0xffffffc4
   141b4:	ldr	r1, [fp, #-56]	; 0xffffffc8
   141b8:	mov	r0, #0
   141bc:	bl	13c04 <__assert_fail@plt+0x2efc>
   141c0:	mov	r3, r0
   141c4:	mov	r0, r3
   141c8:	sub	sp, fp, #4
   141cc:	ldr	fp, [sp]
   141d0:	add	sp, sp, #4
   141d4:	pop	{pc}		; (ldr pc, [sp], #4)
   141d8:	str	fp, [sp, #-8]!
   141dc:	str	lr, [sp, #4]
   141e0:	add	fp, sp, #4
   141e4:	sub	sp, sp, #8
   141e8:	str	r0, [fp, #-8]
   141ec:	mov	r3, r1
   141f0:	strb	r3, [fp, #-9]
   141f4:	ldrb	r3, [fp, #-9]
   141f8:	mov	r2, r3
   141fc:	mvn	r1, #0
   14200:	ldr	r0, [fp, #-8]
   14204:	bl	1413c <__assert_fail@plt+0x3434>
   14208:	mov	r3, r0
   1420c:	mov	r0, r3
   14210:	sub	sp, fp, #4
   14214:	ldr	fp, [sp]
   14218:	add	sp, sp, #4
   1421c:	pop	{pc}		; (ldr pc, [sp], #4)
   14220:	str	fp, [sp, #-8]!
   14224:	str	lr, [sp, #4]
   14228:	add	fp, sp, #4
   1422c:	sub	sp, sp, #8
   14230:	str	r0, [fp, #-8]
   14234:	mov	r1, #58	; 0x3a
   14238:	ldr	r0, [fp, #-8]
   1423c:	bl	141d8 <__assert_fail@plt+0x34d0>
   14240:	mov	r3, r0
   14244:	mov	r0, r3
   14248:	sub	sp, fp, #4
   1424c:	ldr	fp, [sp]
   14250:	add	sp, sp, #4
   14254:	pop	{pc}		; (ldr pc, [sp], #4)
   14258:	str	fp, [sp, #-8]!
   1425c:	str	lr, [sp, #4]
   14260:	add	fp, sp, #4
   14264:	sub	sp, sp, #8
   14268:	str	r0, [fp, #-8]
   1426c:	str	r1, [fp, #-12]
   14270:	mov	r2, #58	; 0x3a
   14274:	ldr	r1, [fp, #-12]
   14278:	ldr	r0, [fp, #-8]
   1427c:	bl	1413c <__assert_fail@plt+0x3434>
   14280:	mov	r3, r0
   14284:	mov	r0, r3
   14288:	sub	sp, fp, #4
   1428c:	ldr	fp, [sp]
   14290:	add	sp, sp, #4
   14294:	pop	{pc}		; (ldr pc, [sp], #4)
   14298:	str	fp, [sp, #-8]!
   1429c:	str	lr, [sp, #4]
   142a0:	add	fp, sp, #4
   142a4:	sub	sp, sp, #112	; 0x70
   142a8:	str	r0, [fp, #-56]	; 0xffffffc8
   142ac:	str	r1, [fp, #-60]	; 0xffffffc4
   142b0:	str	r2, [fp, #-64]	; 0xffffffc0
   142b4:	sub	r3, fp, #116	; 0x74
   142b8:	ldr	r1, [fp, #-60]	; 0xffffffc4
   142bc:	mov	r0, r3
   142c0:	bl	12000 <__assert_fail@plt+0x12f8>
   142c4:	sub	r3, fp, #52	; 0x34
   142c8:	sub	r2, fp, #116	; 0x74
   142cc:	ldrd	r0, [r2]
   142d0:	strd	r0, [r3]
   142d4:	ldrd	r0, [r2, #8]
   142d8:	strd	r0, [r3, #8]
   142dc:	ldrd	r0, [r2, #16]
   142e0:	strd	r0, [r3, #16]
   142e4:	ldrd	r0, [r2, #24]
   142e8:	strd	r0, [r3, #24]
   142ec:	ldrd	r0, [r2, #32]
   142f0:	strd	r0, [r3, #32]
   142f4:	ldrd	r0, [r2, #40]	; 0x28
   142f8:	strd	r0, [r3, #40]	; 0x28
   142fc:	sub	r3, fp, #52	; 0x34
   14300:	mov	r2, #1
   14304:	mov	r1, #58	; 0x3a
   14308:	mov	r0, r3
   1430c:	bl	11e60 <__assert_fail@plt+0x1158>
   14310:	sub	r3, fp, #52	; 0x34
   14314:	mvn	r2, #0
   14318:	ldr	r1, [fp, #-64]	; 0xffffffc0
   1431c:	ldr	r0, [fp, #-56]	; 0xffffffc8
   14320:	bl	13c04 <__assert_fail@plt+0x2efc>
   14324:	mov	r3, r0
   14328:	mov	r0, r3
   1432c:	sub	sp, fp, #4
   14330:	ldr	fp, [sp]
   14334:	add	sp, sp, #4
   14338:	pop	{pc}		; (ldr pc, [sp], #4)
   1433c:	str	fp, [sp, #-8]!
   14340:	str	lr, [sp, #4]
   14344:	add	fp, sp, #4
   14348:	sub	sp, sp, #24
   1434c:	str	r0, [fp, #-8]
   14350:	str	r1, [fp, #-12]
   14354:	str	r2, [fp, #-16]
   14358:	str	r3, [fp, #-20]	; 0xffffffec
   1435c:	mvn	r3, #0
   14360:	str	r3, [sp]
   14364:	ldr	r3, [fp, #-20]	; 0xffffffec
   14368:	ldr	r2, [fp, #-16]
   1436c:	ldr	r1, [fp, #-12]
   14370:	ldr	r0, [fp, #-8]
   14374:	bl	14390 <__assert_fail@plt+0x3688>
   14378:	mov	r3, r0
   1437c:	mov	r0, r3
   14380:	sub	sp, fp, #4
   14384:	ldr	fp, [sp]
   14388:	add	sp, sp, #4
   1438c:	pop	{pc}		; (ldr pc, [sp], #4)
   14390:	str	fp, [sp, #-8]!
   14394:	str	lr, [sp, #4]
   14398:	add	fp, sp, #4
   1439c:	sub	sp, sp, #64	; 0x40
   143a0:	str	r0, [fp, #-56]	; 0xffffffc8
   143a4:	str	r1, [fp, #-60]	; 0xffffffc4
   143a8:	str	r2, [fp, #-64]	; 0xffffffc0
   143ac:	str	r3, [fp, #-68]	; 0xffffffbc
   143b0:	movw	r2, #33080	; 0x8138
   143b4:	movt	r2, #2
   143b8:	sub	r3, fp, #52	; 0x34
   143bc:	ldrd	r0, [r2]
   143c0:	strd	r0, [r3]
   143c4:	ldrd	r0, [r2, #8]
   143c8:	strd	r0, [r3, #8]
   143cc:	ldrd	r0, [r2, #16]
   143d0:	strd	r0, [r3, #16]
   143d4:	ldrd	r0, [r2, #24]
   143d8:	strd	r0, [r3, #24]
   143dc:	ldrd	r0, [r2, #32]
   143e0:	strd	r0, [r3, #32]
   143e4:	ldrd	r0, [r2, #40]	; 0x28
   143e8:	strd	r0, [r3, #40]	; 0x28
   143ec:	sub	r3, fp, #52	; 0x34
   143f0:	ldr	r2, [fp, #-64]	; 0xffffffc0
   143f4:	ldr	r1, [fp, #-60]	; 0xffffffc4
   143f8:	mov	r0, r3
   143fc:	bl	11f78 <__assert_fail@plt+0x1270>
   14400:	sub	r3, fp, #52	; 0x34
   14404:	ldr	r2, [fp, #4]
   14408:	ldr	r1, [fp, #-68]	; 0xffffffbc
   1440c:	ldr	r0, [fp, #-56]	; 0xffffffc8
   14410:	bl	13c04 <__assert_fail@plt+0x2efc>
   14414:	mov	r3, r0
   14418:	mov	r0, r3
   1441c:	sub	sp, fp, #4
   14420:	ldr	fp, [sp]
   14424:	add	sp, sp, #4
   14428:	pop	{pc}		; (ldr pc, [sp], #4)
   1442c:	str	fp, [sp, #-8]!
   14430:	str	lr, [sp, #4]
   14434:	add	fp, sp, #4
   14438:	sub	sp, sp, #16
   1443c:	str	r0, [fp, #-8]
   14440:	str	r1, [fp, #-12]
   14444:	str	r2, [fp, #-16]
   14448:	ldr	r3, [fp, #-16]
   1444c:	ldr	r2, [fp, #-12]
   14450:	ldr	r1, [fp, #-8]
   14454:	mov	r0, #0
   14458:	bl	1433c <__assert_fail@plt+0x3634>
   1445c:	mov	r3, r0
   14460:	mov	r0, r3
   14464:	sub	sp, fp, #4
   14468:	ldr	fp, [sp]
   1446c:	add	sp, sp, #4
   14470:	pop	{pc}		; (ldr pc, [sp], #4)
   14474:	str	fp, [sp, #-8]!
   14478:	str	lr, [sp, #4]
   1447c:	add	fp, sp, #4
   14480:	sub	sp, sp, #24
   14484:	str	r0, [fp, #-8]
   14488:	str	r1, [fp, #-12]
   1448c:	str	r2, [fp, #-16]
   14490:	str	r3, [fp, #-20]	; 0xffffffec
   14494:	ldr	r3, [fp, #-20]	; 0xffffffec
   14498:	str	r3, [sp]
   1449c:	ldr	r3, [fp, #-16]
   144a0:	ldr	r2, [fp, #-12]
   144a4:	ldr	r1, [fp, #-8]
   144a8:	mov	r0, #0
   144ac:	bl	14390 <__assert_fail@plt+0x3688>
   144b0:	mov	r3, r0
   144b4:	mov	r0, r3
   144b8:	sub	sp, fp, #4
   144bc:	ldr	fp, [sp]
   144c0:	add	sp, sp, #4
   144c4:	pop	{pc}		; (ldr pc, [sp], #4)
   144c8:	str	fp, [sp, #-8]!
   144cc:	str	lr, [sp, #4]
   144d0:	add	fp, sp, #4
   144d4:	sub	sp, sp, #16
   144d8:	str	r0, [fp, #-8]
   144dc:	str	r1, [fp, #-12]
   144e0:	str	r2, [fp, #-16]
   144e4:	movw	r3, #32996	; 0x80e4
   144e8:	movt	r3, #2
   144ec:	ldr	r2, [fp, #-16]
   144f0:	ldr	r1, [fp, #-12]
   144f4:	ldr	r0, [fp, #-8]
   144f8:	bl	13c04 <__assert_fail@plt+0x2efc>
   144fc:	mov	r3, r0
   14500:	mov	r0, r3
   14504:	sub	sp, fp, #4
   14508:	ldr	fp, [sp]
   1450c:	add	sp, sp, #4
   14510:	pop	{pc}		; (ldr pc, [sp], #4)
   14514:	str	fp, [sp, #-8]!
   14518:	str	lr, [sp, #4]
   1451c:	add	fp, sp, #4
   14520:	sub	sp, sp, #8
   14524:	str	r0, [fp, #-8]
   14528:	str	r1, [fp, #-12]
   1452c:	ldr	r2, [fp, #-12]
   14530:	ldr	r1, [fp, #-8]
   14534:	mov	r0, #0
   14538:	bl	144c8 <__assert_fail@plt+0x37c0>
   1453c:	mov	r3, r0
   14540:	mov	r0, r3
   14544:	sub	sp, fp, #4
   14548:	ldr	fp, [sp]
   1454c:	add	sp, sp, #4
   14550:	pop	{pc}		; (ldr pc, [sp], #4)
   14554:	str	fp, [sp, #-8]!
   14558:	str	lr, [sp, #4]
   1455c:	add	fp, sp, #4
   14560:	sub	sp, sp, #8
   14564:	str	r0, [fp, #-8]
   14568:	str	r1, [fp, #-12]
   1456c:	mvn	r2, #0
   14570:	ldr	r1, [fp, #-12]
   14574:	ldr	r0, [fp, #-8]
   14578:	bl	144c8 <__assert_fail@plt+0x37c0>
   1457c:	mov	r3, r0
   14580:	mov	r0, r3
   14584:	sub	sp, fp, #4
   14588:	ldr	fp, [sp]
   1458c:	add	sp, sp, #4
   14590:	pop	{pc}		; (ldr pc, [sp], #4)
   14594:	str	fp, [sp, #-8]!
   14598:	str	lr, [sp, #4]
   1459c:	add	fp, sp, #4
   145a0:	sub	sp, sp, #8
   145a4:	str	r0, [fp, #-8]
   145a8:	ldr	r1, [fp, #-8]
   145ac:	mov	r0, #0
   145b0:	bl	14554 <__assert_fail@plt+0x384c>
   145b4:	mov	r3, r0
   145b8:	mov	r0, r3
   145bc:	sub	sp, fp, #4
   145c0:	ldr	fp, [sp]
   145c4:	add	sp, sp, #4
   145c8:	pop	{pc}		; (ldr pc, [sp], #4)
   145cc:	strd	r4, [sp, #-24]!	; 0xffffffe8
   145d0:	strd	r6, [sp, #8]
   145d4:	str	fp, [sp, #16]
   145d8:	str	lr, [sp, #20]
   145dc:	add	fp, sp, #20
   145e0:	sub	sp, sp, #48	; 0x30
   145e4:	str	r0, [fp, #-24]	; 0xffffffe8
   145e8:	str	r1, [fp, #-28]	; 0xffffffe4
   145ec:	str	r2, [fp, #-32]	; 0xffffffe0
   145f0:	str	r3, [fp, #-36]	; 0xffffffdc
   145f4:	ldr	r3, [fp, #-28]	; 0xffffffe4
   145f8:	cmp	r3, #0
   145fc:	beq	14624 <__assert_fail@plt+0x391c>
   14600:	ldr	r3, [fp, #-36]	; 0xffffffdc
   14604:	str	r3, [sp]
   14608:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1460c:	ldr	r2, [fp, #-28]	; 0xffffffe4
   14610:	movw	r1, #28892	; 0x70dc
   14614:	movt	r1, #1
   14618:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1461c:	bl	10c60 <fprintf@plt>
   14620:	b	1463c <__assert_fail@plt+0x3934>
   14624:	ldr	r3, [fp, #-36]	; 0xffffffdc
   14628:	ldr	r2, [fp, #-32]	; 0xffffffe0
   1462c:	movw	r1, #28904	; 0x70e8
   14630:	movt	r1, #1
   14634:	ldr	r0, [fp, #-24]	; 0xffffffe8
   14638:	bl	10c60 <fprintf@plt>
   1463c:	movw	r0, #28912	; 0x70f0
   14640:	movt	r0, #1
   14644:	bl	10c48 <gettext@plt>
   14648:	mov	r2, r0
   1464c:	movw	r3, #2022	; 0x7e6
   14650:	movw	r1, #29696	; 0x7400
   14654:	movt	r1, #1
   14658:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1465c:	bl	10c60 <fprintf@plt>
   14660:	ldr	r1, [fp, #-24]	; 0xffffffe8
   14664:	mov	r0, #10
   14668:	bl	10b70 <fputc_unlocked@plt>
   1466c:	movw	r0, #28916	; 0x70f4
   14670:	movt	r0, #1
   14674:	bl	10c48 <gettext@plt>
   14678:	mov	r3, r0
   1467c:	movw	r2, #29088	; 0x71a0
   14680:	movt	r2, #1
   14684:	mov	r1, r3
   14688:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1468c:	bl	10c60 <fprintf@plt>
   14690:	ldr	r1, [fp, #-24]	; 0xffffffe8
   14694:	mov	r0, #10
   14698:	bl	10b70 <fputc_unlocked@plt>
   1469c:	ldr	r3, [fp, #8]
   146a0:	cmp	r3, #9
   146a4:	ldrls	pc, [pc, r3, lsl #2]
   146a8:	b	14a88 <__assert_fail@plt+0x3d80>
   146ac:	andeq	r4, r1, r4, lsr fp
   146b0:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   146b4:	strdeq	r4, [r1], -ip
   146b8:	andeq	r4, r1, ip, lsr #14
   146bc:	andeq	r4, r1, r0, ror r7
   146c0:	andeq	r4, r1, ip, asr #15
   146c4:	andeq	r4, r1, r8, lsr r8
   146c8:			; <UNDEFINED> instruction: 0x000148b4
   146cc:	andeq	r4, r1, r0, asr #18
   146d0:	ldrdeq	r4, [r1], -ip
   146d4:	movw	r0, #29124	; 0x71c4
   146d8:	movt	r0, #1
   146dc:	bl	10c48 <gettext@plt>
   146e0:	mov	r1, r0
   146e4:	ldr	r3, [fp, #4]
   146e8:	ldr	r3, [r3]
   146ec:	mov	r2, r3
   146f0:	ldr	r0, [fp, #-24]	; 0xffffffe8
   146f4:	bl	10c60 <fprintf@plt>
   146f8:	b	14b38 <__assert_fail@plt+0x3e30>
   146fc:	movw	r0, #29140	; 0x71d4
   14700:	movt	r0, #1
   14704:	bl	10c48 <gettext@plt>
   14708:	mov	r1, r0
   1470c:	ldr	r3, [fp, #4]
   14710:	ldr	r2, [r3]
   14714:	ldr	r3, [fp, #4]
   14718:	add	r3, r3, #4
   1471c:	ldr	r3, [r3]
   14720:	ldr	r0, [fp, #-24]	; 0xffffffe8
   14724:	bl	10c60 <fprintf@plt>
   14728:	b	14b38 <__assert_fail@plt+0x3e30>
   1472c:	movw	r0, #29164	; 0x71ec
   14730:	movt	r0, #1
   14734:	bl	10c48 <gettext@plt>
   14738:	ldr	r3, [fp, #4]
   1473c:	ldr	r2, [r3]
   14740:	ldr	r3, [fp, #4]
   14744:	add	r3, r3, #4
   14748:	ldr	r1, [r3]
   1474c:	ldr	r3, [fp, #4]
   14750:	add	r3, r3, #8
   14754:	ldr	r3, [r3]
   14758:	str	r3, [sp]
   1475c:	mov	r3, r1
   14760:	mov	r1, r0
   14764:	ldr	r0, [fp, #-24]	; 0xffffffe8
   14768:	bl	10c60 <fprintf@plt>
   1476c:	b	14b38 <__assert_fail@plt+0x3e30>
   14770:	movw	r0, #29192	; 0x7208
   14774:	movt	r0, #1
   14778:	bl	10c48 <gettext@plt>
   1477c:	mov	ip, r0
   14780:	ldr	r3, [fp, #4]
   14784:	ldr	r1, [r3]
   14788:	ldr	r3, [fp, #4]
   1478c:	add	r3, r3, #4
   14790:	ldr	r0, [r3]
   14794:	ldr	r3, [fp, #4]
   14798:	add	r3, r3, #8
   1479c:	ldr	r3, [r3]
   147a0:	ldr	r2, [fp, #4]
   147a4:	add	r2, r2, #12
   147a8:	ldr	r2, [r2]
   147ac:	str	r2, [sp, #4]
   147b0:	str	r3, [sp]
   147b4:	mov	r3, r0
   147b8:	mov	r2, r1
   147bc:	mov	r1, ip
   147c0:	ldr	r0, [fp, #-24]	; 0xffffffe8
   147c4:	bl	10c60 <fprintf@plt>
   147c8:	b	14b38 <__assert_fail@plt+0x3e30>
   147cc:	movw	r0, #29224	; 0x7228
   147d0:	movt	r0, #1
   147d4:	bl	10c48 <gettext@plt>
   147d8:	mov	lr, r0
   147dc:	ldr	r3, [fp, #4]
   147e0:	ldr	r0, [r3]
   147e4:	ldr	r3, [fp, #4]
   147e8:	add	r3, r3, #4
   147ec:	ldr	ip, [r3]
   147f0:	ldr	r3, [fp, #4]
   147f4:	add	r3, r3, #8
   147f8:	ldr	r3, [r3]
   147fc:	ldr	r2, [fp, #4]
   14800:	add	r2, r2, #12
   14804:	ldr	r2, [r2]
   14808:	ldr	r1, [fp, #4]
   1480c:	add	r1, r1, #16
   14810:	ldr	r1, [r1]
   14814:	str	r1, [sp, #8]
   14818:	str	r2, [sp, #4]
   1481c:	str	r3, [sp]
   14820:	mov	r3, ip
   14824:	mov	r2, r0
   14828:	mov	r1, lr
   1482c:	ldr	r0, [fp, #-24]	; 0xffffffe8
   14830:	bl	10c60 <fprintf@plt>
   14834:	b	14b38 <__assert_fail@plt+0x3e30>
   14838:	movw	r0, #29260	; 0x724c
   1483c:	movt	r0, #1
   14840:	bl	10c48 <gettext@plt>
   14844:	mov	r4, r0
   14848:	ldr	r3, [fp, #4]
   1484c:	ldr	ip, [r3]
   14850:	ldr	r3, [fp, #4]
   14854:	add	r3, r3, #4
   14858:	ldr	lr, [r3]
   1485c:	ldr	r3, [fp, #4]
   14860:	add	r3, r3, #8
   14864:	ldr	r3, [r3]
   14868:	ldr	r2, [fp, #4]
   1486c:	add	r2, r2, #12
   14870:	ldr	r2, [r2]
   14874:	ldr	r1, [fp, #4]
   14878:	add	r1, r1, #16
   1487c:	ldr	r1, [r1]
   14880:	ldr	r0, [fp, #4]
   14884:	add	r0, r0, #20
   14888:	ldr	r0, [r0]
   1488c:	str	r0, [sp, #12]
   14890:	str	r1, [sp, #8]
   14894:	str	r2, [sp, #4]
   14898:	str	r3, [sp]
   1489c:	mov	r3, lr
   148a0:	mov	r2, ip
   148a4:	mov	r1, r4
   148a8:	ldr	r0, [fp, #-24]	; 0xffffffe8
   148ac:	bl	10c60 <fprintf@plt>
   148b0:	b	14b38 <__assert_fail@plt+0x3e30>
   148b4:	movw	r0, #29300	; 0x7274
   148b8:	movt	r0, #1
   148bc:	bl	10c48 <gettext@plt>
   148c0:	mov	r5, r0
   148c4:	ldr	r3, [fp, #4]
   148c8:	ldr	lr, [r3]
   148cc:	ldr	r3, [fp, #4]
   148d0:	add	r3, r3, #4
   148d4:	ldr	r4, [r3]
   148d8:	ldr	r3, [fp, #4]
   148dc:	add	r3, r3, #8
   148e0:	ldr	r3, [r3]
   148e4:	ldr	r2, [fp, #4]
   148e8:	add	r2, r2, #12
   148ec:	ldr	r2, [r2]
   148f0:	ldr	r1, [fp, #4]
   148f4:	add	r1, r1, #16
   148f8:	ldr	r1, [r1]
   148fc:	ldr	r0, [fp, #4]
   14900:	add	r0, r0, #20
   14904:	ldr	r0, [r0]
   14908:	ldr	ip, [fp, #4]
   1490c:	add	ip, ip, #24
   14910:	ldr	ip, [ip]
   14914:	str	ip, [sp, #16]
   14918:	str	r0, [sp, #12]
   1491c:	str	r1, [sp, #8]
   14920:	str	r2, [sp, #4]
   14924:	str	r3, [sp]
   14928:	mov	r3, r4
   1492c:	mov	r2, lr
   14930:	mov	r1, r5
   14934:	ldr	r0, [fp, #-24]	; 0xffffffe8
   14938:	bl	10c60 <fprintf@plt>
   1493c:	b	14b38 <__assert_fail@plt+0x3e30>
   14940:	movw	r0, #29344	; 0x72a0
   14944:	movt	r0, #1
   14948:	bl	10c48 <gettext@plt>
   1494c:	mov	r6, r0
   14950:	ldr	r3, [fp, #4]
   14954:	ldr	r4, [r3]
   14958:	ldr	r3, [fp, #4]
   1495c:	add	r3, r3, #4
   14960:	ldr	r5, [r3]
   14964:	ldr	r3, [fp, #4]
   14968:	add	r3, r3, #8
   1496c:	ldr	r3, [r3]
   14970:	ldr	r2, [fp, #4]
   14974:	add	r2, r2, #12
   14978:	ldr	r2, [r2]
   1497c:	ldr	r1, [fp, #4]
   14980:	add	r1, r1, #16
   14984:	ldr	r1, [r1]
   14988:	ldr	r0, [fp, #4]
   1498c:	add	r0, r0, #20
   14990:	ldr	r0, [r0]
   14994:	ldr	ip, [fp, #4]
   14998:	add	ip, ip, #24
   1499c:	ldr	ip, [ip]
   149a0:	ldr	lr, [fp, #4]
   149a4:	add	lr, lr, #28
   149a8:	ldr	lr, [lr]
   149ac:	str	lr, [sp, #20]
   149b0:	str	ip, [sp, #16]
   149b4:	str	r0, [sp, #12]
   149b8:	str	r1, [sp, #8]
   149bc:	str	r2, [sp, #4]
   149c0:	str	r3, [sp]
   149c4:	mov	r3, r5
   149c8:	mov	r2, r4
   149cc:	mov	r1, r6
   149d0:	ldr	r0, [fp, #-24]	; 0xffffffe8
   149d4:	bl	10c60 <fprintf@plt>
   149d8:	b	14b38 <__assert_fail@plt+0x3e30>
   149dc:	movw	r0, #29392	; 0x72d0
   149e0:	movt	r0, #1
   149e4:	bl	10c48 <gettext@plt>
   149e8:	mov	r7, r0
   149ec:	ldr	r3, [fp, #4]
   149f0:	ldr	r5, [r3]
   149f4:	ldr	r3, [fp, #4]
   149f8:	add	r3, r3, #4
   149fc:	ldr	r6, [r3]
   14a00:	ldr	r3, [fp, #4]
   14a04:	add	r3, r3, #8
   14a08:	ldr	r3, [r3]
   14a0c:	ldr	r2, [fp, #4]
   14a10:	add	r2, r2, #12
   14a14:	ldr	r2, [r2]
   14a18:	ldr	r1, [fp, #4]
   14a1c:	add	r1, r1, #16
   14a20:	ldr	r1, [r1]
   14a24:	ldr	r0, [fp, #4]
   14a28:	add	r0, r0, #20
   14a2c:	ldr	r0, [r0]
   14a30:	ldr	ip, [fp, #4]
   14a34:	add	ip, ip, #24
   14a38:	ldr	ip, [ip]
   14a3c:	ldr	lr, [fp, #4]
   14a40:	add	lr, lr, #28
   14a44:	ldr	lr, [lr]
   14a48:	ldr	r4, [fp, #4]
   14a4c:	add	r4, r4, #32
   14a50:	ldr	r4, [r4]
   14a54:	str	r4, [sp, #24]
   14a58:	str	lr, [sp, #20]
   14a5c:	str	ip, [sp, #16]
   14a60:	str	r0, [sp, #12]
   14a64:	str	r1, [sp, #8]
   14a68:	str	r2, [sp, #4]
   14a6c:	str	r3, [sp]
   14a70:	mov	r3, r6
   14a74:	mov	r2, r5
   14a78:	mov	r1, r7
   14a7c:	ldr	r0, [fp, #-24]	; 0xffffffe8
   14a80:	bl	10c60 <fprintf@plt>
   14a84:	b	14b38 <__assert_fail@plt+0x3e30>
   14a88:	movw	r0, #29444	; 0x7304
   14a8c:	movt	r0, #1
   14a90:	bl	10c48 <gettext@plt>
   14a94:	mov	r7, r0
   14a98:	ldr	r3, [fp, #4]
   14a9c:	ldr	r5, [r3]
   14aa0:	ldr	r3, [fp, #4]
   14aa4:	add	r3, r3, #4
   14aa8:	ldr	r6, [r3]
   14aac:	ldr	r3, [fp, #4]
   14ab0:	add	r3, r3, #8
   14ab4:	ldr	r3, [r3]
   14ab8:	ldr	r2, [fp, #4]
   14abc:	add	r2, r2, #12
   14ac0:	ldr	r2, [r2]
   14ac4:	ldr	r1, [fp, #4]
   14ac8:	add	r1, r1, #16
   14acc:	ldr	r1, [r1]
   14ad0:	ldr	r0, [fp, #4]
   14ad4:	add	r0, r0, #20
   14ad8:	ldr	r0, [r0]
   14adc:	ldr	ip, [fp, #4]
   14ae0:	add	ip, ip, #24
   14ae4:	ldr	ip, [ip]
   14ae8:	ldr	lr, [fp, #4]
   14aec:	add	lr, lr, #28
   14af0:	ldr	lr, [lr]
   14af4:	ldr	r4, [fp, #4]
   14af8:	add	r4, r4, #32
   14afc:	ldr	r4, [r4]
   14b00:	str	r4, [sp, #24]
   14b04:	str	lr, [sp, #20]
   14b08:	str	ip, [sp, #16]
   14b0c:	str	r0, [sp, #12]
   14b10:	str	r1, [sp, #8]
   14b14:	str	r2, [sp, #4]
   14b18:	str	r3, [sp]
   14b1c:	mov	r3, r6
   14b20:	mov	r2, r5
   14b24:	mov	r1, r7
   14b28:	ldr	r0, [fp, #-24]	; 0xffffffe8
   14b2c:	bl	10c60 <fprintf@plt>
   14b30:	b	14b38 <__assert_fail@plt+0x3e30>
   14b34:	nop	{0}
   14b38:	nop	{0}
   14b3c:	sub	sp, fp, #20
   14b40:	ldrd	r4, [sp]
   14b44:	ldrd	r6, [sp, #8]
   14b48:	ldr	fp, [sp, #16]
   14b4c:	add	sp, sp, #20
   14b50:	pop	{pc}		; (ldr pc, [sp], #4)
   14b54:	str	fp, [sp, #-8]!
   14b58:	str	lr, [sp, #4]
   14b5c:	add	fp, sp, #4
   14b60:	sub	sp, sp, #32
   14b64:	str	r0, [fp, #-16]
   14b68:	str	r1, [fp, #-20]	; 0xffffffec
   14b6c:	str	r2, [fp, #-24]	; 0xffffffe8
   14b70:	str	r3, [fp, #-28]	; 0xffffffe4
   14b74:	mov	r3, #0
   14b78:	str	r3, [fp, #-8]
   14b7c:	b	14b8c <__assert_fail@plt+0x3e84>
   14b80:	ldr	r3, [fp, #-8]
   14b84:	add	r3, r3, #1
   14b88:	str	r3, [fp, #-8]
   14b8c:	ldr	r3, [fp, #-8]
   14b90:	lsl	r3, r3, #2
   14b94:	ldr	r2, [fp, #4]
   14b98:	add	r3, r2, r3
   14b9c:	ldr	r3, [r3]
   14ba0:	cmp	r3, #0
   14ba4:	bne	14b80 <__assert_fail@plt+0x3e78>
   14ba8:	ldr	r3, [fp, #-8]
   14bac:	str	r3, [sp, #4]
   14bb0:	ldr	r3, [fp, #4]
   14bb4:	str	r3, [sp]
   14bb8:	ldr	r3, [fp, #-28]	; 0xffffffe4
   14bbc:	ldr	r2, [fp, #-24]	; 0xffffffe8
   14bc0:	ldr	r1, [fp, #-20]	; 0xffffffec
   14bc4:	ldr	r0, [fp, #-16]
   14bc8:	bl	145cc <__assert_fail@plt+0x38c4>
   14bcc:	nop	{0}
   14bd0:	sub	sp, fp, #4
   14bd4:	ldr	fp, [sp]
   14bd8:	add	sp, sp, #4
   14bdc:	pop	{pc}		; (ldr pc, [sp], #4)
   14be0:	str	fp, [sp, #-8]!
   14be4:	str	lr, [sp, #4]
   14be8:	add	fp, sp, #4
   14bec:	sub	sp, sp, #72	; 0x48
   14bf0:	str	r0, [fp, #-56]	; 0xffffffc8
   14bf4:	str	r1, [fp, #-60]	; 0xffffffc4
   14bf8:	str	r2, [fp, #-64]	; 0xffffffc0
   14bfc:	str	r3, [fp, #-68]	; 0xffffffbc
   14c00:	mov	r3, #0
   14c04:	str	r3, [fp, #-8]
   14c08:	b	14c18 <__assert_fail@plt+0x3f10>
   14c0c:	ldr	r3, [fp, #-8]
   14c10:	add	r3, r3, #1
   14c14:	str	r3, [fp, #-8]
   14c18:	ldr	r3, [fp, #-8]
   14c1c:	cmp	r3, #9
   14c20:	bhi	14c64 <__assert_fail@plt+0x3f5c>
   14c24:	ldr	r3, [fp, #4]
   14c28:	add	r2, r3, #4
   14c2c:	str	r2, [fp, #4]
   14c30:	ldr	r2, [r3]
   14c34:	ldr	r3, [fp, #-8]
   14c38:	lsl	r3, r3, #2
   14c3c:	sub	r1, fp, #4
   14c40:	add	r3, r1, r3
   14c44:	str	r2, [r3, #-44]	; 0xffffffd4
   14c48:	ldr	r3, [fp, #-8]
   14c4c:	lsl	r3, r3, #2
   14c50:	sub	r2, fp, #4
   14c54:	add	r3, r2, r3
   14c58:	ldr	r3, [r3, #-44]	; 0xffffffd4
   14c5c:	cmp	r3, #0
   14c60:	bne	14c0c <__assert_fail@plt+0x3f04>
   14c64:	ldr	r3, [fp, #-8]
   14c68:	str	r3, [sp, #4]
   14c6c:	sub	r3, fp, #48	; 0x30
   14c70:	str	r3, [sp]
   14c74:	ldr	r3, [fp, #-68]	; 0xffffffbc
   14c78:	ldr	r2, [fp, #-64]	; 0xffffffc0
   14c7c:	ldr	r1, [fp, #-60]	; 0xffffffc4
   14c80:	ldr	r0, [fp, #-56]	; 0xffffffc8
   14c84:	bl	145cc <__assert_fail@plt+0x38c4>
   14c88:	nop	{0}
   14c8c:	sub	sp, fp, #4
   14c90:	ldr	fp, [sp]
   14c94:	add	sp, sp, #4
   14c98:	pop	{pc}		; (ldr pc, [sp], #4)
   14c9c:	push	{r3}		; (str r3, [sp, #-4]!)
   14ca0:	str	fp, [sp, #-8]!
   14ca4:	str	lr, [sp, #4]
   14ca8:	add	fp, sp, #4
   14cac:	sub	sp, sp, #36	; 0x24
   14cb0:	str	r0, [fp, #-20]	; 0xffffffec
   14cb4:	str	r1, [fp, #-24]	; 0xffffffe8
   14cb8:	str	r2, [fp, #-28]	; 0xffffffe4
   14cbc:	add	r3, fp, #8
   14cc0:	str	r3, [fp, #-12]
   14cc4:	ldr	r3, [fp, #-12]
   14cc8:	str	r3, [sp]
   14ccc:	ldr	r3, [fp, #4]
   14cd0:	ldr	r2, [fp, #-28]	; 0xffffffe4
   14cd4:	ldr	r1, [fp, #-24]	; 0xffffffe8
   14cd8:	ldr	r0, [fp, #-20]	; 0xffffffec
   14cdc:	bl	14be0 <__assert_fail@plt+0x3ed8>
   14ce0:	nop	{0}
   14ce4:	sub	sp, fp, #4
   14ce8:	ldr	fp, [sp]
   14cec:	ldr	lr, [sp, #4]
   14cf0:	add	sp, sp, #8
   14cf4:	add	sp, sp, #4
   14cf8:	bx	lr
   14cfc:	str	fp, [sp, #-8]!
   14d00:	str	lr, [sp, #4]
   14d04:	add	fp, sp, #4
   14d08:	movw	r3, #33060	; 0x8124
   14d0c:	movt	r3, #2
   14d10:	ldr	r3, [r3]
   14d14:	mov	r1, r3
   14d18:	mov	r0, #10
   14d1c:	bl	10b70 <fputc_unlocked@plt>
   14d20:	movw	r0, #29504	; 0x7340
   14d24:	movt	r0, #1
   14d28:	bl	10c48 <gettext@plt>
   14d2c:	mov	r3, r0
   14d30:	movw	r1, #29524	; 0x7354
   14d34:	movt	r1, #1
   14d38:	mov	r0, r3
   14d3c:	bl	10b1c <printf@plt>
   14d40:	movw	r0, #29548	; 0x736c
   14d44:	movt	r0, #1
   14d48:	bl	10c48 <gettext@plt>
   14d4c:	mov	r3, r0
   14d50:	movw	r2, #29568	; 0x7380
   14d54:	movt	r2, #1
   14d58:	movw	r1, #29608	; 0x73a8
   14d5c:	movt	r1, #1
   14d60:	mov	r0, r3
   14d64:	bl	10b1c <printf@plt>
   14d68:	movw	r0, #29624	; 0x73b8
   14d6c:	movt	r0, #1
   14d70:	bl	10c48 <gettext@plt>
   14d74:	mov	r3, r0
   14d78:	movw	r1, #29664	; 0x73e0
   14d7c:	movt	r1, #1
   14d80:	mov	r0, r3
   14d84:	bl	10b1c <printf@plt>
   14d88:	nop	{0}
   14d8c:	sub	sp, fp, #4
   14d90:	ldr	fp, [sp]
   14d94:	add	sp, sp, #4
   14d98:	pop	{pc}		; (ldr pc, [sp], #4)
   14d9c:	str	fp, [sp, #-8]!
   14da0:	str	lr, [sp, #4]
   14da4:	add	fp, sp, #4
   14da8:	sub	sp, sp, #16
   14dac:	str	r0, [fp, #-8]
   14db0:	str	r1, [fp, #-12]
   14db4:	str	r2, [fp, #-16]
   14db8:	ldr	r2, [fp, #-16]
   14dbc:	ldr	r1, [fp, #-12]
   14dc0:	ldr	r0, [fp, #-8]
   14dc4:	bl	14f80 <__assert_fail@plt+0x4278>
   14dc8:	mov	r3, r0
   14dcc:	mov	r0, r3
   14dd0:	sub	sp, fp, #4
   14dd4:	ldr	fp, [sp]
   14dd8:	add	sp, sp, #4
   14ddc:	pop	{pc}		; (ldr pc, [sp], #4)
   14de0:	str	fp, [sp, #-8]!
   14de4:	str	lr, [sp, #4]
   14de8:	add	fp, sp, #4
   14dec:	sub	sp, sp, #8
   14df0:	str	r0, [fp, #-8]
   14df4:	ldr	r3, [fp, #-8]
   14df8:	cmp	r3, #0
   14dfc:	bne	14e04 <__assert_fail@plt+0x40fc>
   14e00:	bl	15690 <__assert_fail@plt+0x4988>
   14e04:	ldr	r3, [fp, #-8]
   14e08:	mov	r0, r3
   14e0c:	sub	sp, fp, #4
   14e10:	ldr	fp, [sp]
   14e14:	add	sp, sp, #4
   14e18:	pop	{pc}		; (ldr pc, [sp], #4)
   14e1c:	str	fp, [sp, #-8]!
   14e20:	str	lr, [sp, #4]
   14e24:	add	fp, sp, #4
   14e28:	sub	sp, sp, #8
   14e2c:	str	r0, [fp, #-8]
   14e30:	ldr	r0, [fp, #-8]
   14e34:	bl	157a4 <__assert_fail@plt+0x4a9c>
   14e38:	mov	r3, r0
   14e3c:	mov	r0, r3
   14e40:	bl	14de0 <__assert_fail@plt+0x40d8>
   14e44:	mov	r3, r0
   14e48:	mov	r0, r3
   14e4c:	sub	sp, fp, #4
   14e50:	ldr	fp, [sp]
   14e54:	add	sp, sp, #4
   14e58:	pop	{pc}		; (ldr pc, [sp], #4)
   14e5c:	str	fp, [sp, #-8]!
   14e60:	str	lr, [sp, #4]
   14e64:	add	fp, sp, #4
   14e68:	sub	sp, sp, #8
   14e6c:	str	r0, [fp, #-8]
   14e70:	ldr	r0, [fp, #-8]
   14e74:	bl	15e08 <__assert_fail@plt+0x5100>
   14e78:	mov	r3, r0
   14e7c:	mov	r0, r3
   14e80:	bl	14de0 <__assert_fail@plt+0x40d8>
   14e84:	mov	r3, r0
   14e88:	mov	r0, r3
   14e8c:	sub	sp, fp, #4
   14e90:	ldr	fp, [sp]
   14e94:	add	sp, sp, #4
   14e98:	pop	{pc}		; (ldr pc, [sp], #4)
   14e9c:	str	fp, [sp, #-8]!
   14ea0:	str	lr, [sp, #4]
   14ea4:	add	fp, sp, #4
   14ea8:	sub	sp, sp, #8
   14eac:	str	r0, [fp, #-8]
   14eb0:	ldr	r0, [fp, #-8]
   14eb4:	bl	14e1c <__assert_fail@plt+0x4114>
   14eb8:	mov	r3, r0
   14ebc:	mov	r0, r3
   14ec0:	sub	sp, fp, #4
   14ec4:	ldr	fp, [sp]
   14ec8:	add	sp, sp, #4
   14ecc:	pop	{pc}		; (ldr pc, [sp], #4)
   14ed0:	str	fp, [sp, #-8]!
   14ed4:	str	lr, [sp, #4]
   14ed8:	add	fp, sp, #4
   14edc:	sub	sp, sp, #16
   14ee0:	str	r0, [fp, #-16]
   14ee4:	str	r1, [fp, #-20]	; 0xffffffec
   14ee8:	ldr	r1, [fp, #-20]	; 0xffffffec
   14eec:	ldr	r0, [fp, #-16]
   14ef0:	bl	15834 <__assert_fail@plt+0x4b2c>
   14ef4:	str	r0, [fp, #-8]
   14ef8:	ldr	r3, [fp, #-8]
   14efc:	cmp	r3, #0
   14f00:	bne	14f20 <__assert_fail@plt+0x4218>
   14f04:	ldr	r3, [fp, #-16]
   14f08:	cmp	r3, #0
   14f0c:	beq	14f1c <__assert_fail@plt+0x4214>
   14f10:	ldr	r3, [fp, #-20]	; 0xffffffec
   14f14:	cmp	r3, #0
   14f18:	beq	14f20 <__assert_fail@plt+0x4218>
   14f1c:	bl	15690 <__assert_fail@plt+0x4988>
   14f20:	ldr	r3, [fp, #-8]
   14f24:	mov	r0, r3
   14f28:	sub	sp, fp, #4
   14f2c:	ldr	fp, [sp]
   14f30:	add	sp, sp, #4
   14f34:	pop	{pc}		; (ldr pc, [sp], #4)
   14f38:	str	fp, [sp, #-8]!
   14f3c:	str	lr, [sp, #4]
   14f40:	add	fp, sp, #4
   14f44:	sub	sp, sp, #8
   14f48:	str	r0, [fp, #-8]
   14f4c:	str	r1, [fp, #-12]
   14f50:	ldr	r1, [fp, #-12]
   14f54:	ldr	r0, [fp, #-8]
   14f58:	bl	15e40 <__assert_fail@plt+0x5138>
   14f5c:	mov	r3, r0
   14f60:	mov	r0, r3
   14f64:	bl	14de0 <__assert_fail@plt+0x40d8>
   14f68:	mov	r3, r0
   14f6c:	mov	r0, r3
   14f70:	sub	sp, fp, #4
   14f74:	ldr	fp, [sp]
   14f78:	add	sp, sp, #4
   14f7c:	pop	{pc}		; (ldr pc, [sp], #4)
   14f80:	str	fp, [sp, #-8]!
   14f84:	str	lr, [sp, #4]
   14f88:	add	fp, sp, #4
   14f8c:	sub	sp, sp, #24
   14f90:	str	r0, [fp, #-16]
   14f94:	str	r1, [fp, #-20]	; 0xffffffec
   14f98:	str	r2, [fp, #-24]	; 0xffffffe8
   14f9c:	ldr	r2, [fp, #-24]	; 0xffffffe8
   14fa0:	ldr	r1, [fp, #-20]	; 0xffffffec
   14fa4:	ldr	r0, [fp, #-16]
   14fa8:	bl	16070 <__assert_fail@plt+0x5368>
   14fac:	str	r0, [fp, #-8]
   14fb0:	ldr	r3, [fp, #-8]
   14fb4:	cmp	r3, #0
   14fb8:	bne	14fe4 <__assert_fail@plt+0x42dc>
   14fbc:	ldr	r3, [fp, #-16]
   14fc0:	cmp	r3, #0
   14fc4:	beq	14fe0 <__assert_fail@plt+0x42d8>
   14fc8:	ldr	r3, [fp, #-20]	; 0xffffffec
   14fcc:	cmp	r3, #0
   14fd0:	beq	14fe4 <__assert_fail@plt+0x42dc>
   14fd4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   14fd8:	cmp	r3, #0
   14fdc:	beq	14fe4 <__assert_fail@plt+0x42dc>
   14fe0:	bl	15690 <__assert_fail@plt+0x4988>
   14fe4:	ldr	r3, [fp, #-8]
   14fe8:	mov	r0, r3
   14fec:	sub	sp, fp, #4
   14ff0:	ldr	fp, [sp]
   14ff4:	add	sp, sp, #4
   14ff8:	pop	{pc}		; (ldr pc, [sp], #4)
   14ffc:	str	fp, [sp, #-8]!
   15000:	str	lr, [sp, #4]
   15004:	add	fp, sp, #4
   15008:	sub	sp, sp, #16
   1500c:	str	r0, [fp, #-8]
   15010:	str	r1, [fp, #-12]
   15014:	str	r2, [fp, #-16]
   15018:	ldr	r2, [fp, #-16]
   1501c:	ldr	r1, [fp, #-12]
   15020:	ldr	r0, [fp, #-8]
   15024:	bl	15ee0 <__assert_fail@plt+0x51d8>
   15028:	mov	r3, r0
   1502c:	mov	r0, r3
   15030:	bl	14de0 <__assert_fail@plt+0x40d8>
   15034:	mov	r3, r0
   15038:	mov	r0, r3
   1503c:	sub	sp, fp, #4
   15040:	ldr	fp, [sp]
   15044:	add	sp, sp, #4
   15048:	pop	{pc}		; (ldr pc, [sp], #4)
   1504c:	str	fp, [sp, #-8]!
   15050:	str	lr, [sp, #4]
   15054:	add	fp, sp, #4
   15058:	sub	sp, sp, #8
   1505c:	str	r0, [fp, #-8]
   15060:	str	r1, [fp, #-12]
   15064:	ldr	r2, [fp, #-12]
   15068:	ldr	r1, [fp, #-8]
   1506c:	mov	r0, #0
   15070:	bl	14f80 <__assert_fail@plt+0x4278>
   15074:	mov	r3, r0
   15078:	mov	r0, r3
   1507c:	sub	sp, fp, #4
   15080:	ldr	fp, [sp]
   15084:	add	sp, sp, #4
   15088:	pop	{pc}		; (ldr pc, [sp], #4)
   1508c:	str	fp, [sp, #-8]!
   15090:	str	lr, [sp, #4]
   15094:	add	fp, sp, #4
   15098:	sub	sp, sp, #8
   1509c:	str	r0, [fp, #-8]
   150a0:	str	r1, [fp, #-12]
   150a4:	ldr	r2, [fp, #-12]
   150a8:	ldr	r1, [fp, #-8]
   150ac:	mov	r0, #0
   150b0:	bl	14ffc <__assert_fail@plt+0x42f4>
   150b4:	mov	r3, r0
   150b8:	mov	r0, r3
   150bc:	sub	sp, fp, #4
   150c0:	ldr	fp, [sp]
   150c4:	add	sp, sp, #4
   150c8:	pop	{pc}		; (ldr pc, [sp], #4)
   150cc:	str	fp, [sp, #-8]!
   150d0:	str	lr, [sp, #4]
   150d4:	add	fp, sp, #4
   150d8:	sub	sp, sp, #8
   150dc:	str	r0, [fp, #-8]
   150e0:	str	r1, [fp, #-12]
   150e4:	mov	r2, #1
   150e8:	ldr	r1, [fp, #-12]
   150ec:	ldr	r0, [fp, #-8]
   150f0:	bl	1510c <__assert_fail@plt+0x4404>
   150f4:	mov	r3, r0
   150f8:	mov	r0, r3
   150fc:	sub	sp, fp, #4
   15100:	ldr	fp, [sp]
   15104:	add	sp, sp, #4
   15108:	pop	{pc}		; (ldr pc, [sp], #4)
   1510c:	str	fp, [sp, #-8]!
   15110:	str	lr, [sp, #4]
   15114:	add	fp, sp, #4
   15118:	sub	sp, sp, #24
   1511c:	str	r0, [fp, #-16]
   15120:	str	r1, [fp, #-20]	; 0xffffffec
   15124:	str	r2, [fp, #-24]	; 0xffffffe8
   15128:	ldr	r3, [fp, #-20]	; 0xffffffec
   1512c:	ldr	r3, [r3]
   15130:	str	r3, [fp, #-8]
   15134:	ldr	r3, [fp, #-16]
   15138:	cmp	r3, #0
   1513c:	bne	15184 <__assert_fail@plt+0x447c>
   15140:	ldr	r3, [fp, #-8]
   15144:	cmp	r3, #0
   15148:	bne	151c0 <__assert_fail@plt+0x44b8>
   1514c:	mov	r2, #64	; 0x40
   15150:	ldr	r3, [fp, #-24]	; 0xffffffe8
   15154:	udiv	r3, r2, r3
   15158:	str	r3, [fp, #-8]
   1515c:	ldr	r3, [fp, #-8]
   15160:	cmp	r3, #0
   15164:	moveq	r3, #1
   15168:	movne	r3, #0
   1516c:	uxtb	r3, r3
   15170:	mov	r2, r3
   15174:	ldr	r3, [fp, #-8]
   15178:	add	r3, r2, r3
   1517c:	str	r3, [fp, #-8]
   15180:	b	151c0 <__assert_fail@plt+0x44b8>
   15184:	ldr	r2, [fp, #-8]
   15188:	ldr	r3, [fp, #-8]
   1518c:	lsr	r3, r3, #1
   15190:	add	r3, r3, #1
   15194:	mov	r1, #0
   15198:	adds	r3, r2, r3
   1519c:	bcc	151a4 <__assert_fail@plt+0x449c>
   151a0:	mov	r1, #1
   151a4:	str	r3, [fp, #-8]
   151a8:	mov	r3, r1
   151ac:	and	r3, r3, #1
   151b0:	uxtb	r3, r3
   151b4:	cmp	r3, #0
   151b8:	beq	151c0 <__assert_fail@plt+0x44b8>
   151bc:	bl	15690 <__assert_fail@plt+0x4988>
   151c0:	ldr	r3, [fp, #-8]
   151c4:	ldr	r2, [fp, #-24]	; 0xffffffe8
   151c8:	mov	r1, r3
   151cc:	ldr	r0, [fp, #-16]
   151d0:	bl	14f80 <__assert_fail@plt+0x4278>
   151d4:	str	r0, [fp, #-16]
   151d8:	ldr	r2, [fp, #-8]
   151dc:	ldr	r3, [fp, #-20]	; 0xffffffec
   151e0:	str	r2, [r3]
   151e4:	ldr	r3, [fp, #-16]
   151e8:	mov	r0, r3
   151ec:	sub	sp, fp, #4
   151f0:	ldr	fp, [sp]
   151f4:	add	sp, sp, #4
   151f8:	pop	{pc}		; (ldr pc, [sp], #4)
   151fc:	str	fp, [sp, #-8]!
   15200:	str	lr, [sp, #4]
   15204:	add	fp, sp, #4
   15208:	sub	sp, sp, #32
   1520c:	str	r0, [fp, #-24]	; 0xffffffe8
   15210:	str	r1, [fp, #-28]	; 0xffffffe4
   15214:	str	r2, [fp, #-32]	; 0xffffffe0
   15218:	str	r3, [fp, #-36]	; 0xffffffdc
   1521c:	ldr	r3, [fp, #-28]	; 0xffffffe4
   15220:	ldr	r3, [r3]
   15224:	str	r3, [fp, #-8]
   15228:	ldr	r3, [fp, #-8]
   1522c:	asr	r3, r3, #1
   15230:	mov	r1, #0
   15234:	ldr	r2, [fp, #-8]
   15238:	adds	r3, r2, r3
   1523c:	bvc	15244 <__assert_fail@plt+0x453c>
   15240:	mov	r1, #1
   15244:	str	r3, [fp, #-16]
   15248:	mov	r3, r1
   1524c:	and	r3, r3, #1
   15250:	uxtb	r3, r3
   15254:	cmp	r3, #0
   15258:	beq	15264 <__assert_fail@plt+0x455c>
   1525c:	mvn	r3, #-2147483648	; 0x80000000
   15260:	str	r3, [fp, #-16]
   15264:	ldr	r3, [fp, #-36]	; 0xffffffdc
   15268:	cmp	r3, #0
   1526c:	blt	15288 <__assert_fail@plt+0x4580>
   15270:	ldr	r3, [fp, #-16]
   15274:	ldr	r2, [fp, #-36]	; 0xffffffdc
   15278:	cmp	r2, r3
   1527c:	bge	15288 <__assert_fail@plt+0x4580>
   15280:	ldr	r3, [fp, #-36]	; 0xffffffdc
   15284:	str	r3, [fp, #-16]
   15288:	ldr	r2, [fp, #-16]
   1528c:	mov	lr, #0
   15290:	ldr	r3, [fp, #4]
   15294:	smull	r2, r3, r2, r3
   15298:	mov	r0, #0
   1529c:	mov	r1, #0
   152a0:	mov	r0, r3
   152a4:	asr	r1, r3, #31
   152a8:	asr	ip, r2, #31
   152ac:	cmp	ip, r0
   152b0:	beq	152b8 <__assert_fail@plt+0x45b0>
   152b4:	mov	lr, #1
   152b8:	mov	r3, r2
   152bc:	str	r3, [fp, #-20]	; 0xffffffec
   152c0:	mov	r3, lr
   152c4:	and	r3, r3, #1
   152c8:	uxtb	r3, r3
   152cc:	cmp	r3, #0
   152d0:	beq	152dc <__assert_fail@plt+0x45d4>
   152d4:	mvn	r3, #-2147483648	; 0x80000000
   152d8:	b	152f4 <__assert_fail@plt+0x45ec>
   152dc:	ldr	r3, [fp, #-20]	; 0xffffffec
   152e0:	cmp	r3, #63	; 0x3f
   152e4:	bgt	152f0 <__assert_fail@plt+0x45e8>
   152e8:	mov	r3, #64	; 0x40
   152ec:	b	152f4 <__assert_fail@plt+0x45ec>
   152f0:	mov	r3, #0
   152f4:	str	r3, [fp, #-12]
   152f8:	ldr	r3, [fp, #-12]
   152fc:	cmp	r3, #0
   15300:	beq	15338 <__assert_fail@plt+0x4630>
   15304:	ldr	r2, [fp, #-12]
   15308:	ldr	r3, [fp, #4]
   1530c:	sdiv	r3, r2, r3
   15310:	str	r3, [fp, #-16]
   15314:	ldr	r3, [fp, #-12]
   15318:	ldr	r2, [fp, #4]
   1531c:	sdiv	r2, r3, r2
   15320:	ldr	r1, [fp, #4]
   15324:	mul	r2, r1, r2
   15328:	sub	r3, r3, r2
   1532c:	ldr	r2, [fp, #-12]
   15330:	sub	r3, r2, r3
   15334:	str	r3, [fp, #-20]	; 0xffffffec
   15338:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1533c:	cmp	r3, #0
   15340:	bne	15350 <__assert_fail@plt+0x4648>
   15344:	ldr	r3, [fp, #-28]	; 0xffffffe4
   15348:	mov	r2, #0
   1534c:	str	r2, [r3]
   15350:	ldr	r2, [fp, #-16]
   15354:	ldr	r3, [fp, #-8]
   15358:	sub	r3, r2, r3
   1535c:	ldr	r2, [fp, #-32]	; 0xffffffe0
   15360:	cmp	r2, r3
   15364:	ble	15404 <__assert_fail@plt+0x46fc>
   15368:	mov	r1, #0
   1536c:	ldr	r2, [fp, #-8]
   15370:	ldr	r3, [fp, #-32]	; 0xffffffe0
   15374:	adds	r3, r2, r3
   15378:	bvc	15380 <__assert_fail@plt+0x4678>
   1537c:	mov	r1, #1
   15380:	str	r3, [fp, #-16]
   15384:	mov	r3, r1
   15388:	and	r3, r3, #1
   1538c:	uxtb	r3, r3
   15390:	cmp	r3, #0
   15394:	bne	15400 <__assert_fail@plt+0x46f8>
   15398:	ldr	r3, [fp, #-36]	; 0xffffffdc
   1539c:	cmp	r3, #0
   153a0:	blt	153b4 <__assert_fail@plt+0x46ac>
   153a4:	ldr	r3, [fp, #-16]
   153a8:	ldr	r2, [fp, #-36]	; 0xffffffdc
   153ac:	cmp	r2, r3
   153b0:	blt	15400 <__assert_fail@plt+0x46f8>
   153b4:	ldr	r2, [fp, #-16]
   153b8:	mov	lr, #0
   153bc:	ldr	r3, [fp, #4]
   153c0:	smull	r2, r3, r2, r3
   153c4:	mov	r0, #0
   153c8:	mov	r1, #0
   153cc:	mov	r0, r3
   153d0:	asr	r1, r3, #31
   153d4:	asr	ip, r2, #31
   153d8:	cmp	ip, r0
   153dc:	beq	153e4 <__assert_fail@plt+0x46dc>
   153e0:	mov	lr, #1
   153e4:	mov	r3, r2
   153e8:	str	r3, [fp, #-20]	; 0xffffffec
   153ec:	mov	r3, lr
   153f0:	and	r3, r3, #1
   153f4:	uxtb	r3, r3
   153f8:	cmp	r3, #0
   153fc:	beq	15404 <__assert_fail@plt+0x46fc>
   15400:	bl	15690 <__assert_fail@plt+0x4988>
   15404:	ldr	r3, [fp, #-20]	; 0xffffffec
   15408:	mov	r1, r3
   1540c:	ldr	r0, [fp, #-24]	; 0xffffffe8
   15410:	bl	14ed0 <__assert_fail@plt+0x41c8>
   15414:	str	r0, [fp, #-24]	; 0xffffffe8
   15418:	ldr	r2, [fp, #-16]
   1541c:	ldr	r3, [fp, #-28]	; 0xffffffe4
   15420:	str	r2, [r3]
   15424:	ldr	r3, [fp, #-24]	; 0xffffffe8
   15428:	mov	r0, r3
   1542c:	sub	sp, fp, #4
   15430:	ldr	fp, [sp]
   15434:	add	sp, sp, #4
   15438:	pop	{pc}		; (ldr pc, [sp], #4)
   1543c:	str	fp, [sp, #-8]!
   15440:	str	lr, [sp, #4]
   15444:	add	fp, sp, #4
   15448:	sub	sp, sp, #8
   1544c:	str	r0, [fp, #-8]
   15450:	mov	r1, #1
   15454:	ldr	r0, [fp, #-8]
   15458:	bl	154ac <__assert_fail@plt+0x47a4>
   1545c:	mov	r3, r0
   15460:	mov	r0, r3
   15464:	sub	sp, fp, #4
   15468:	ldr	fp, [sp]
   1546c:	add	sp, sp, #4
   15470:	pop	{pc}		; (ldr pc, [sp], #4)
   15474:	str	fp, [sp, #-8]!
   15478:	str	lr, [sp, #4]
   1547c:	add	fp, sp, #4
   15480:	sub	sp, sp, #8
   15484:	str	r0, [fp, #-8]
   15488:	mov	r1, #1
   1548c:	ldr	r0, [fp, #-8]
   15490:	bl	154f4 <__assert_fail@plt+0x47ec>
   15494:	mov	r3, r0
   15498:	mov	r0, r3
   1549c:	sub	sp, fp, #4
   154a0:	ldr	fp, [sp]
   154a4:	add	sp, sp, #4
   154a8:	pop	{pc}		; (ldr pc, [sp], #4)
   154ac:	str	fp, [sp, #-8]!
   154b0:	str	lr, [sp, #4]
   154b4:	add	fp, sp, #4
   154b8:	sub	sp, sp, #8
   154bc:	str	r0, [fp, #-8]
   154c0:	str	r1, [fp, #-12]
   154c4:	ldr	r1, [fp, #-12]
   154c8:	ldr	r0, [fp, #-8]
   154cc:	bl	156d4 <__assert_fail@plt+0x49cc>
   154d0:	mov	r3, r0
   154d4:	mov	r0, r3
   154d8:	bl	14de0 <__assert_fail@plt+0x40d8>
   154dc:	mov	r3, r0
   154e0:	mov	r0, r3
   154e4:	sub	sp, fp, #4
   154e8:	ldr	fp, [sp]
   154ec:	add	sp, sp, #4
   154f0:	pop	{pc}		; (ldr pc, [sp], #4)
   154f4:	str	fp, [sp, #-8]!
   154f8:	str	lr, [sp, #4]
   154fc:	add	fp, sp, #4
   15500:	sub	sp, sp, #8
   15504:	str	r0, [fp, #-8]
   15508:	str	r1, [fp, #-12]
   1550c:	ldr	r1, [fp, #-12]
   15510:	ldr	r0, [fp, #-8]
   15514:	bl	15e9c <__assert_fail@plt+0x5194>
   15518:	mov	r3, r0
   1551c:	mov	r0, r3
   15520:	bl	14de0 <__assert_fail@plt+0x40d8>
   15524:	mov	r3, r0
   15528:	mov	r0, r3
   1552c:	sub	sp, fp, #4
   15530:	ldr	fp, [sp]
   15534:	add	sp, sp, #4
   15538:	pop	{pc}		; (ldr pc, [sp], #4)
   1553c:	str	fp, [sp, #-8]!
   15540:	str	lr, [sp, #4]
   15544:	add	fp, sp, #4
   15548:	sub	sp, sp, #8
   1554c:	str	r0, [fp, #-8]
   15550:	str	r1, [fp, #-12]
   15554:	ldr	r0, [fp, #-12]
   15558:	bl	14e1c <__assert_fail@plt+0x4114>
   1555c:	mov	r3, r0
   15560:	ldr	r2, [fp, #-12]
   15564:	ldr	r1, [fp, #-8]
   15568:	mov	r0, r3
   1556c:	bl	10b4c <memcpy@plt>
   15570:	mov	r3, r0
   15574:	mov	r0, r3
   15578:	sub	sp, fp, #4
   1557c:	ldr	fp, [sp]
   15580:	add	sp, sp, #4
   15584:	pop	{pc}		; (ldr pc, [sp], #4)
   15588:	str	fp, [sp, #-8]!
   1558c:	str	lr, [sp, #4]
   15590:	add	fp, sp, #4
   15594:	sub	sp, sp, #8
   15598:	str	r0, [fp, #-8]
   1559c:	str	r1, [fp, #-12]
   155a0:	ldr	r0, [fp, #-12]
   155a4:	bl	14e5c <__assert_fail@plt+0x4154>
   155a8:	mov	r3, r0
   155ac:	mov	r0, r3
   155b0:	ldr	r3, [fp, #-12]
   155b4:	mov	r2, r3
   155b8:	ldr	r1, [fp, #-8]
   155bc:	bl	10b4c <memcpy@plt>
   155c0:	mov	r3, r0
   155c4:	mov	r0, r3
   155c8:	sub	sp, fp, #4
   155cc:	ldr	fp, [sp]
   155d0:	add	sp, sp, #4
   155d4:	pop	{pc}		; (ldr pc, [sp], #4)
   155d8:	str	fp, [sp, #-8]!
   155dc:	str	lr, [sp, #4]
   155e0:	add	fp, sp, #4
   155e4:	sub	sp, sp, #16
   155e8:	str	r0, [fp, #-16]
   155ec:	str	r1, [fp, #-20]	; 0xffffffec
   155f0:	ldr	r3, [fp, #-20]	; 0xffffffec
   155f4:	add	r3, r3, #1
   155f8:	mov	r0, r3
   155fc:	bl	14e5c <__assert_fail@plt+0x4154>
   15600:	mov	r3, r0
   15604:	str	r3, [fp, #-8]
   15608:	ldr	r3, [fp, #-20]	; 0xffffffec
   1560c:	ldr	r2, [fp, #-8]
   15610:	add	r3, r2, r3
   15614:	mov	r2, #0
   15618:	strb	r2, [r3]
   1561c:	ldr	r3, [fp, #-20]	; 0xffffffec
   15620:	mov	r2, r3
   15624:	ldr	r1, [fp, #-16]
   15628:	ldr	r0, [fp, #-8]
   1562c:	bl	10b4c <memcpy@plt>
   15630:	mov	r3, r0
   15634:	mov	r0, r3
   15638:	sub	sp, fp, #4
   1563c:	ldr	fp, [sp]
   15640:	add	sp, sp, #4
   15644:	pop	{pc}		; (ldr pc, [sp], #4)
   15648:	str	fp, [sp, #-8]!
   1564c:	str	lr, [sp, #4]
   15650:	add	fp, sp, #4
   15654:	sub	sp, sp, #8
   15658:	str	r0, [fp, #-8]
   1565c:	ldr	r0, [fp, #-8]
   15660:	bl	10c54 <strlen@plt>
   15664:	mov	r3, r0
   15668:	add	r3, r3, #1
   1566c:	mov	r1, r3
   15670:	ldr	r0, [fp, #-8]
   15674:	bl	1553c <__assert_fail@plt+0x4834>
   15678:	mov	r3, r0
   1567c:	mov	r0, r3
   15680:	sub	sp, fp, #4
   15684:	ldr	fp, [sp]
   15688:	add	sp, sp, #4
   1568c:	pop	{pc}		; (ldr pc, [sp], #4)
   15690:	strd	r4, [sp, #-16]!
   15694:	str	fp, [sp, #8]
   15698:	str	lr, [sp, #12]
   1569c:	add	fp, sp, #12
   156a0:	movw	r3, #32976	; 0x80d0
   156a4:	movt	r3, #2
   156a8:	ldr	r4, [r3]
   156ac:	movw	r0, #29744	; 0x7430
   156b0:	movt	r0, #1
   156b4:	bl	10c48 <gettext@plt>
   156b8:	mov	r3, r0
   156bc:	movw	r2, #29764	; 0x7444
   156c0:	movt	r2, #1
   156c4:	mov	r1, #0
   156c8:	mov	r0, r4
   156cc:	bl	10be8 <error@plt>
   156d0:	bl	10cf0 <abort@plt>
   156d4:	str	fp, [sp, #-8]!
   156d8:	str	lr, [sp, #4]
   156dc:	add	fp, sp, #4
   156e0:	sub	sp, sp, #16
   156e4:	str	r0, [fp, #-16]
   156e8:	str	r1, [fp, #-20]	; 0xffffffec
   156ec:	ldr	r3, [fp, #-16]
   156f0:	cmp	r3, #0
   156f4:	beq	15704 <__assert_fail@plt+0x49fc>
   156f8:	ldr	r3, [fp, #-20]	; 0xffffffec
   156fc:	cmp	r3, #0
   15700:	bne	15714 <__assert_fail@plt+0x4a0c>
   15704:	mov	r3, #1
   15708:	str	r3, [fp, #-20]	; 0xffffffec
   1570c:	ldr	r3, [fp, #-20]	; 0xffffffec
   15710:	str	r3, [fp, #-16]
   15714:	mov	ip, #0
   15718:	ldr	r2, [fp, #-16]
   1571c:	ldr	r3, [fp, #-20]	; 0xffffffec
   15720:	umull	r0, r1, r2, r3
   15724:	mov	r2, #0
   15728:	mov	r3, #0
   1572c:	mov	r2, r1
   15730:	mov	r3, #0
   15734:	cmp	r2, #0
   15738:	beq	15740 <__assert_fail@plt+0x4a38>
   1573c:	mov	ip, #1
   15740:	cmp	r0, #0
   15744:	bge	1574c <__assert_fail@plt+0x4a44>
   15748:	mov	ip, #1
   1574c:	mov	r3, ip
   15750:	and	r3, r3, #1
   15754:	uxtb	r3, r3
   15758:	cmp	r3, #0
   1575c:	beq	15778 <__assert_fail@plt+0x4a70>
   15760:	bl	10c6c <__errno_location@plt>
   15764:	mov	r2, r0
   15768:	mov	r3, #12
   1576c:	str	r3, [r2]
   15770:	mov	r3, #0
   15774:	b	15790 <__assert_fail@plt+0x4a88>
   15778:	ldr	r1, [fp, #-20]	; 0xffffffec
   1577c:	ldr	r0, [fp, #-16]
   15780:	bl	10af8 <calloc@plt>
   15784:	mov	r3, r0
   15788:	str	r3, [fp, #-8]
   1578c:	ldr	r3, [fp, #-8]
   15790:	mov	r0, r3
   15794:	sub	sp, fp, #4
   15798:	ldr	fp, [sp]
   1579c:	add	sp, sp, #4
   157a0:	pop	{pc}		; (ldr pc, [sp], #4)
   157a4:	str	fp, [sp, #-8]!
   157a8:	str	lr, [sp, #4]
   157ac:	add	fp, sp, #4
   157b0:	sub	sp, sp, #16
   157b4:	str	r0, [fp, #-16]
   157b8:	ldr	r3, [fp, #-16]
   157bc:	cmp	r3, #0
   157c0:	bne	157cc <__assert_fail@plt+0x4ac4>
   157c4:	mov	r3, #1
   157c8:	str	r3, [fp, #-16]
   157cc:	mov	r2, #0
   157d0:	ldr	r3, [fp, #-16]
   157d4:	cmp	r3, #0
   157d8:	bge	157e0 <__assert_fail@plt+0x4ad8>
   157dc:	mov	r2, #1
   157e0:	mov	r3, r2
   157e4:	and	r3, r3, #1
   157e8:	uxtb	r3, r3
   157ec:	cmp	r3, #0
   157f0:	beq	1580c <__assert_fail@plt+0x4b04>
   157f4:	bl	10c6c <__errno_location@plt>
   157f8:	mov	r2, r0
   157fc:	mov	r3, #12
   15800:	str	r3, [r2]
   15804:	mov	r3, #0
   15808:	b	15820 <__assert_fail@plt+0x4b18>
   1580c:	ldr	r0, [fp, #-16]
   15810:	bl	10c00 <malloc@plt>
   15814:	mov	r3, r0
   15818:	str	r3, [fp, #-8]
   1581c:	ldr	r3, [fp, #-8]
   15820:	mov	r0, r3
   15824:	sub	sp, fp, #4
   15828:	ldr	fp, [sp]
   1582c:	add	sp, sp, #4
   15830:	pop	{pc}		; (ldr pc, [sp], #4)
   15834:	str	fp, [sp, #-8]!
   15838:	str	lr, [sp, #4]
   1583c:	add	fp, sp, #4
   15840:	sub	sp, sp, #16
   15844:	str	r0, [fp, #-16]
   15848:	str	r1, [fp, #-20]	; 0xffffffec
   1584c:	ldr	r3, [fp, #-16]
   15850:	cmp	r3, #0
   15854:	bne	15868 <__assert_fail@plt+0x4b60>
   15858:	ldr	r0, [fp, #-20]	; 0xffffffec
   1585c:	bl	157a4 <__assert_fail@plt+0x4a9c>
   15860:	mov	r3, r0
   15864:	b	158d8 <__assert_fail@plt+0x4bd0>
   15868:	ldr	r3, [fp, #-20]	; 0xffffffec
   1586c:	cmp	r3, #0
   15870:	bne	15884 <__assert_fail@plt+0x4b7c>
   15874:	ldr	r0, [fp, #-16]
   15878:	bl	15c40 <__assert_fail@plt+0x4f38>
   1587c:	mov	r3, #0
   15880:	b	158d8 <__assert_fail@plt+0x4bd0>
   15884:	mov	r2, #0
   15888:	ldr	r3, [fp, #-20]	; 0xffffffec
   1588c:	cmp	r3, #0
   15890:	bge	15898 <__assert_fail@plt+0x4b90>
   15894:	mov	r2, #1
   15898:	mov	r3, r2
   1589c:	and	r3, r3, #1
   158a0:	uxtb	r3, r3
   158a4:	cmp	r3, #0
   158a8:	beq	158c4 <__assert_fail@plt+0x4bbc>
   158ac:	bl	10c6c <__errno_location@plt>
   158b0:	mov	r2, r0
   158b4:	mov	r3, #12
   158b8:	str	r3, [r2]
   158bc:	mov	r3, #0
   158c0:	b	158d8 <__assert_fail@plt+0x4bd0>
   158c4:	ldr	r1, [fp, #-20]	; 0xffffffec
   158c8:	ldr	r0, [fp, #-16]
   158cc:	bl	10b7c <realloc@plt>
   158d0:	str	r0, [fp, #-8]
   158d4:	ldr	r3, [fp, #-8]
   158d8:	mov	r0, r3
   158dc:	sub	sp, fp, #4
   158e0:	ldr	fp, [sp]
   158e4:	add	sp, sp, #4
   158e8:	pop	{pc}		; (ldr pc, [sp], #4)
   158ec:	strd	r4, [sp, #-16]!
   158f0:	str	fp, [sp, #8]
   158f4:	str	lr, [sp, #12]
   158f8:	add	fp, sp, #12
   158fc:	sub	sp, sp, #16
   15900:	str	r0, [fp, #-24]	; 0xffffffe8
   15904:	str	r1, [fp, #-28]	; 0xffffffe4
   15908:	ldr	r5, [fp, #-24]	; 0xffffffe8
   1590c:	ldr	r4, [fp, #-28]	; 0xffffffe4
   15910:	cmp	r5, r4
   15914:	bne	15920 <__assert_fail@plt+0x4c18>
   15918:	mov	r3, #0
   1591c:	b	15980 <__assert_fail@plt+0x4c78>
   15920:	ldrb	r3, [r5]
   15924:	mov	r0, r3
   15928:	bl	165bc <__assert_fail@plt+0x58b4>
   1592c:	mov	r3, r0
   15930:	strb	r3, [fp, #-13]
   15934:	ldrb	r3, [r4]
   15938:	mov	r0, r3
   1593c:	bl	165bc <__assert_fail@plt+0x58b4>
   15940:	mov	r3, r0
   15944:	strb	r3, [fp, #-14]
   15948:	ldrb	r3, [fp, #-13]
   1594c:	cmp	r3, #0
   15950:	beq	15970 <__assert_fail@plt+0x4c68>
   15954:	add	r5, r5, #1
   15958:	add	r4, r4, #1
   1595c:	ldrb	r2, [fp, #-13]
   15960:	ldrb	r3, [fp, #-14]
   15964:	cmp	r2, r3
   15968:	beq	15920 <__assert_fail@plt+0x4c18>
   1596c:	b	15974 <__assert_fail@plt+0x4c6c>
   15970:	nop	{0}
   15974:	ldrb	r2, [fp, #-13]
   15978:	ldrb	r3, [fp, #-14]
   1597c:	sub	r3, r2, r3
   15980:	mov	r0, r3
   15984:	sub	sp, fp, #12
   15988:	ldrd	r4, [sp]
   1598c:	ldr	fp, [sp, #8]
   15990:	add	sp, sp, #12
   15994:	pop	{pc}		; (ldr pc, [sp], #4)
   15998:	str	fp, [sp, #-8]!
   1599c:	str	lr, [sp, #4]
   159a0:	add	fp, sp, #4
   159a4:	sub	sp, sp, #16
   159a8:	str	r0, [fp, #-16]
   159ac:	ldr	r0, [fp, #-16]
   159b0:	bl	10bc4 <__fpending@plt>
   159b4:	mov	r3, r0
   159b8:	cmp	r3, #0
   159bc:	movne	r3, #1
   159c0:	moveq	r3, #0
   159c4:	strb	r3, [fp, #-5]
   159c8:	ldr	r0, [fp, #-16]
   159cc:	bl	10bd0 <ferror_unlocked@plt>
   159d0:	mov	r3, r0
   159d4:	cmp	r3, #0
   159d8:	movne	r3, #1
   159dc:	moveq	r3, #0
   159e0:	strb	r3, [fp, #-6]
   159e4:	ldr	r0, [fp, #-16]
   159e8:	bl	15a7c <__assert_fail@plt+0x4d74>
   159ec:	mov	r3, r0
   159f0:	cmp	r3, #0
   159f4:	movne	r3, #1
   159f8:	moveq	r3, #0
   159fc:	strb	r3, [fp, #-7]
   15a00:	ldrb	r3, [fp, #-6]
   15a04:	cmp	r3, #0
   15a08:	bne	15a38 <__assert_fail@plt+0x4d30>
   15a0c:	ldrb	r3, [fp, #-7]
   15a10:	cmp	r3, #0
   15a14:	beq	15a64 <__assert_fail@plt+0x4d5c>
   15a18:	ldrb	r3, [fp, #-5]
   15a1c:	cmp	r3, #0
   15a20:	bne	15a38 <__assert_fail@plt+0x4d30>
   15a24:	bl	10c6c <__errno_location@plt>
   15a28:	mov	r3, r0
   15a2c:	ldr	r3, [r3]
   15a30:	cmp	r3, #9
   15a34:	beq	15a64 <__assert_fail@plt+0x4d5c>
   15a38:	ldrb	r3, [fp, #-7]
   15a3c:	eor	r3, r3, #1
   15a40:	uxtb	r3, r3
   15a44:	cmp	r3, #0
   15a48:	beq	15a5c <__assert_fail@plt+0x4d54>
   15a4c:	bl	10c6c <__errno_location@plt>
   15a50:	mov	r2, r0
   15a54:	mov	r3, #0
   15a58:	str	r3, [r2]
   15a5c:	mvn	r3, #0
   15a60:	b	15a68 <__assert_fail@plt+0x4d60>
   15a64:	mov	r3, #0
   15a68:	mov	r0, r3
   15a6c:	sub	sp, fp, #4
   15a70:	ldr	fp, [sp]
   15a74:	add	sp, sp, #4
   15a78:	pop	{pc}		; (ldr pc, [sp], #4)
   15a7c:	str	fp, [sp, #-8]!
   15a80:	str	lr, [sp, #4]
   15a84:	add	fp, sp, #4
   15a88:	sub	sp, sp, #32
   15a8c:	str	r0, [fp, #-24]	; 0xffffffe8
   15a90:	mov	r3, #0
   15a94:	str	r3, [fp, #-8]
   15a98:	mov	r3, #0
   15a9c:	str	r3, [fp, #-12]
   15aa0:	ldr	r0, [fp, #-24]	; 0xffffffe8
   15aa4:	bl	10c90 <fileno@plt>
   15aa8:	str	r0, [fp, #-16]
   15aac:	ldr	r3, [fp, #-16]
   15ab0:	cmp	r3, #0
   15ab4:	bge	15ac8 <__assert_fail@plt+0x4dc0>
   15ab8:	ldr	r0, [fp, #-24]	; 0xffffffe8
   15abc:	bl	10c9c <fclose@plt>
   15ac0:	mov	r3, r0
   15ac4:	b	15b6c <__assert_fail@plt+0x4e64>
   15ac8:	ldr	r0, [fp, #-24]	; 0xffffffe8
   15acc:	bl	10c18 <__freading@plt>
   15ad0:	mov	r3, r0
   15ad4:	cmp	r3, #0
   15ad8:	beq	15b14 <__assert_fail@plt+0x4e0c>
   15adc:	ldr	r0, [fp, #-24]	; 0xffffffe8
   15ae0:	bl	10c90 <fileno@plt>
   15ae4:	mov	r1, r0
   15ae8:	mov	r3, #1
   15aec:	str	r3, [sp]
   15af0:	mov	r2, #0
   15af4:	mov	r3, #0
   15af8:	mov	r0, r1
   15afc:	bl	10bac <lseek64@plt>
   15b00:	mvn	r2, #0
   15b04:	mvn	r3, #0
   15b08:	cmp	r1, r3
   15b0c:	cmpeq	r0, r2
   15b10:	beq	15b38 <__assert_fail@plt+0x4e30>
   15b14:	ldr	r0, [fp, #-24]	; 0xffffffe8
   15b18:	bl	15bd4 <__assert_fail@plt+0x4ecc>
   15b1c:	mov	r3, r0
   15b20:	cmp	r3, #0
   15b24:	beq	15b38 <__assert_fail@plt+0x4e30>
   15b28:	bl	10c6c <__errno_location@plt>
   15b2c:	mov	r3, r0
   15b30:	ldr	r3, [r3]
   15b34:	str	r3, [fp, #-8]
   15b38:	ldr	r0, [fp, #-24]	; 0xffffffe8
   15b3c:	bl	10c9c <fclose@plt>
   15b40:	str	r0, [fp, #-12]
   15b44:	ldr	r3, [fp, #-8]
   15b48:	cmp	r3, #0
   15b4c:	beq	15b68 <__assert_fail@plt+0x4e60>
   15b50:	bl	10c6c <__errno_location@plt>
   15b54:	mov	r2, r0
   15b58:	ldr	r3, [fp, #-8]
   15b5c:	str	r3, [r2]
   15b60:	mvn	r3, #0
   15b64:	str	r3, [fp, #-12]
   15b68:	ldr	r3, [fp, #-12]
   15b6c:	mov	r0, r3
   15b70:	sub	sp, fp, #4
   15b74:	ldr	fp, [sp]
   15b78:	add	sp, sp, #4
   15b7c:	pop	{pc}		; (ldr pc, [sp], #4)
   15b80:	str	fp, [sp, #-8]!
   15b84:	str	lr, [sp, #4]
   15b88:	add	fp, sp, #4
   15b8c:	sub	sp, sp, #16
   15b90:	str	r0, [fp, #-8]
   15b94:	ldr	r3, [fp, #-8]
   15b98:	ldr	r3, [r3]
   15b9c:	and	r3, r3, #256	; 0x100
   15ba0:	cmp	r3, #0
   15ba4:	beq	15bc0 <__assert_fail@plt+0x4eb8>
   15ba8:	mov	r3, #1
   15bac:	str	r3, [sp]
   15bb0:	mov	r2, #0
   15bb4:	mov	r3, #0
   15bb8:	ldr	r0, [fp, #-8]
   15bbc:	bl	15ce4 <__assert_fail@plt+0x4fdc>
   15bc0:	nop	{0}
   15bc4:	sub	sp, fp, #4
   15bc8:	ldr	fp, [sp]
   15bcc:	add	sp, sp, #4
   15bd0:	pop	{pc}		; (ldr pc, [sp], #4)
   15bd4:	str	fp, [sp, #-8]!
   15bd8:	str	lr, [sp, #4]
   15bdc:	add	fp, sp, #4
   15be0:	sub	sp, sp, #8
   15be4:	str	r0, [fp, #-8]
   15be8:	ldr	r3, [fp, #-8]
   15bec:	cmp	r3, #0
   15bf0:	beq	15c08 <__assert_fail@plt+0x4f00>
   15bf4:	ldr	r0, [fp, #-8]
   15bf8:	bl	10c18 <__freading@plt>
   15bfc:	mov	r3, r0
   15c00:	cmp	r3, #0
   15c04:	bne	15c18 <__assert_fail@plt+0x4f10>
   15c08:	ldr	r0, [fp, #-8]
   15c0c:	bl	10b28 <fflush@plt>
   15c10:	mov	r3, r0
   15c14:	b	15c2c <__assert_fail@plt+0x4f24>
   15c18:	ldr	r0, [fp, #-8]
   15c1c:	bl	15b80 <__assert_fail@plt+0x4e78>
   15c20:	ldr	r0, [fp, #-8]
   15c24:	bl	10b28 <fflush@plt>
   15c28:	mov	r3, r0
   15c2c:	mov	r0, r3
   15c30:	sub	sp, fp, #4
   15c34:	ldr	fp, [sp]
   15c38:	add	sp, sp, #4
   15c3c:	pop	{pc}		; (ldr pc, [sp], #4)
   15c40:	str	r4, [sp, #-12]!
   15c44:	str	fp, [sp, #4]
   15c48:	str	lr, [sp, #8]
   15c4c:	add	fp, sp, #8
   15c50:	sub	sp, sp, #20
   15c54:	str	r0, [fp, #-24]	; 0xffffffe8
   15c58:	bl	10c6c <__errno_location@plt>
   15c5c:	mov	r3, r0
   15c60:	ldr	r3, [r3]
   15c64:	str	r3, [fp, #-20]	; 0xffffffec
   15c68:	bl	10c6c <__errno_location@plt>
   15c6c:	mov	r3, r0
   15c70:	ldr	r3, [r3]
   15c74:	str	r3, [fp, #-16]
   15c78:	bl	10c6c <__errno_location@plt>
   15c7c:	mov	r2, r0
   15c80:	mov	r3, #0
   15c84:	str	r3, [r2]
   15c88:	ldr	r0, [fp, #-24]	; 0xffffffe8
   15c8c:	bl	10b34 <free@plt>
   15c90:	bl	10c6c <__errno_location@plt>
   15c94:	mov	r3, r0
   15c98:	ldr	r3, [r3]
   15c9c:	cmp	r3, #0
   15ca0:	moveq	r3, #1
   15ca4:	movne	r3, #0
   15ca8:	uxtb	r3, r3
   15cac:	mov	r4, r3
   15cb0:	bl	10c6c <__errno_location@plt>
   15cb4:	mov	r2, r0
   15cb8:	lsl	r3, r4, #2
   15cbc:	sub	r1, fp, #12
   15cc0:	add	r3, r1, r3
   15cc4:	ldr	r3, [r3, #-8]
   15cc8:	str	r3, [r2]
   15ccc:	nop	{0}
   15cd0:	sub	sp, fp, #8
   15cd4:	ldr	r4, [sp]
   15cd8:	ldr	fp, [sp, #4]
   15cdc:	add	sp, sp, #8
   15ce0:	pop	{pc}		; (ldr pc, [sp], #4)
   15ce4:	str	fp, [sp, #-8]!
   15ce8:	str	lr, [sp, #4]
   15cec:	add	fp, sp, #4
   15cf0:	sub	sp, sp, #32
   15cf4:	str	r0, [fp, #-16]
   15cf8:	strd	r2, [fp, #-28]	; 0xffffffe4
   15cfc:	ldr	r3, [fp, #-16]
   15d00:	ldr	r2, [r3, #8]
   15d04:	ldr	r3, [fp, #-16]
   15d08:	ldr	r3, [r3, #4]
   15d0c:	cmp	r2, r3
   15d10:	bne	15da8 <__assert_fail@plt+0x50a0>
   15d14:	ldr	r3, [fp, #-16]
   15d18:	ldr	r2, [r3, #20]
   15d1c:	ldr	r3, [fp, #-16]
   15d20:	ldr	r3, [r3, #16]
   15d24:	cmp	r2, r3
   15d28:	bne	15da8 <__assert_fail@plt+0x50a0>
   15d2c:	ldr	r3, [fp, #-16]
   15d30:	ldr	r3, [r3, #36]	; 0x24
   15d34:	cmp	r3, #0
   15d38:	bne	15da8 <__assert_fail@plt+0x50a0>
   15d3c:	ldr	r0, [fp, #-16]
   15d40:	bl	10c90 <fileno@plt>
   15d44:	mov	r1, r0
   15d48:	ldr	r3, [fp, #4]
   15d4c:	str	r3, [sp]
   15d50:	ldrd	r2, [fp, #-28]	; 0xffffffe4
   15d54:	mov	r0, r1
   15d58:	bl	10bac <lseek64@plt>
   15d5c:	strd	r0, [fp, #-12]
   15d60:	ldrd	r2, [fp, #-12]
   15d64:	mvn	r0, #0
   15d68:	mvn	r1, #0
   15d6c:	cmp	r3, r1
   15d70:	cmpeq	r2, r0
   15d74:	bne	15d80 <__assert_fail@plt+0x5078>
   15d78:	mvn	r3, #0
   15d7c:	b	15dc0 <__assert_fail@plt+0x50b8>
   15d80:	ldr	r3, [fp, #-16]
   15d84:	ldr	r3, [r3]
   15d88:	bic	r2, r3, #16
   15d8c:	ldr	r3, [fp, #-16]
   15d90:	str	r2, [r3]
   15d94:	ldr	r1, [fp, #-16]
   15d98:	ldrd	r2, [fp, #-12]
   15d9c:	strd	r2, [r1, #80]	; 0x50
   15da0:	mov	r3, #0
   15da4:	b	15dc0 <__assert_fail@plt+0x50b8>
   15da8:	ldr	r3, [fp, #4]
   15dac:	str	r3, [sp]
   15db0:	ldrd	r2, [fp, #-28]	; 0xffffffe4
   15db4:	ldr	r0, [fp, #-16]
   15db8:	bl	10ca8 <fseeko64@plt>
   15dbc:	mov	r3, r0
   15dc0:	mov	r0, r3
   15dc4:	sub	sp, fp, #4
   15dc8:	ldr	fp, [sp]
   15dcc:	add	sp, sp, #4
   15dd0:	pop	{pc}		; (ldr pc, [sp], #4)
   15dd4:	str	fp, [sp, #-8]!
   15dd8:	str	lr, [sp, #4]
   15ddc:	add	fp, sp, #4
   15de0:	bl	10c6c <__errno_location@plt>
   15de4:	mov	r2, r0
   15de8:	mov	r3, #12
   15dec:	str	r3, [r2]
   15df0:	mov	r3, #0
   15df4:	mov	r0, r3
   15df8:	sub	sp, fp, #4
   15dfc:	ldr	fp, [sp]
   15e00:	add	sp, sp, #4
   15e04:	pop	{pc}		; (ldr pc, [sp], #4)
   15e08:	str	fp, [sp, #-8]!
   15e0c:	str	lr, [sp, #4]
   15e10:	add	fp, sp, #4
   15e14:	sub	sp, sp, #8
   15e18:	str	r0, [fp, #-8]
   15e1c:	ldr	r3, [fp, #-8]
   15e20:	mov	r0, r3
   15e24:	bl	157a4 <__assert_fail@plt+0x4a9c>
   15e28:	mov	r3, r0
   15e2c:	mov	r0, r3
   15e30:	sub	sp, fp, #4
   15e34:	ldr	fp, [sp]
   15e38:	add	sp, sp, #4
   15e3c:	pop	{pc}		; (ldr pc, [sp], #4)
   15e40:	str	fp, [sp, #-8]!
   15e44:	str	lr, [sp, #4]
   15e48:	add	fp, sp, #4
   15e4c:	sub	sp, sp, #8
   15e50:	str	r0, [fp, #-8]
   15e54:	str	r1, [fp, #-12]
   15e58:	ldr	r3, [fp, #-12]
   15e5c:	cmp	r3, #0
   15e60:	moveq	r3, #1
   15e64:	movne	r3, #0
   15e68:	uxtb	r3, r3
   15e6c:	mov	r2, r3
   15e70:	ldr	r3, [fp, #-12]
   15e74:	orr	r3, r2, r3
   15e78:	mov	r1, r3
   15e7c:	ldr	r0, [fp, #-8]
   15e80:	bl	15834 <__assert_fail@plt+0x4b2c>
   15e84:	mov	r3, r0
   15e88:	mov	r0, r3
   15e8c:	sub	sp, fp, #4
   15e90:	ldr	fp, [sp]
   15e94:	add	sp, sp, #4
   15e98:	pop	{pc}		; (ldr pc, [sp], #4)
   15e9c:	str	fp, [sp, #-8]!
   15ea0:	str	lr, [sp, #4]
   15ea4:	add	fp, sp, #4
   15ea8:	sub	sp, sp, #8
   15eac:	str	r0, [fp, #-8]
   15eb0:	str	r1, [fp, #-12]
   15eb4:	ldr	r3, [fp, #-8]
   15eb8:	ldr	r2, [fp, #-12]
   15ebc:	mov	r1, r2
   15ec0:	mov	r0, r3
   15ec4:	bl	156d4 <__assert_fail@plt+0x49cc>
   15ec8:	mov	r3, r0
   15ecc:	mov	r0, r3
   15ed0:	sub	sp, fp, #4
   15ed4:	ldr	fp, [sp]
   15ed8:	add	sp, sp, #4
   15edc:	pop	{pc}		; (ldr pc, [sp], #4)
   15ee0:	str	fp, [sp, #-8]!
   15ee4:	str	lr, [sp, #4]
   15ee8:	add	fp, sp, #4
   15eec:	sub	sp, sp, #16
   15ef0:	str	r0, [fp, #-8]
   15ef4:	str	r1, [fp, #-12]
   15ef8:	str	r2, [fp, #-16]
   15efc:	ldr	r3, [fp, #-12]
   15f00:	cmp	r3, #0
   15f04:	beq	15f14 <__assert_fail@plt+0x520c>
   15f08:	ldr	r3, [fp, #-16]
   15f0c:	cmp	r3, #0
   15f10:	bne	15f24 <__assert_fail@plt+0x521c>
   15f14:	mov	r3, #1
   15f18:	str	r3, [fp, #-16]
   15f1c:	ldr	r3, [fp, #-16]
   15f20:	str	r3, [fp, #-12]
   15f24:	ldr	r3, [fp, #-12]
   15f28:	ldr	r2, [fp, #-16]
   15f2c:	mov	r1, r3
   15f30:	ldr	r0, [fp, #-8]
   15f34:	bl	16070 <__assert_fail@plt+0x5368>
   15f38:	mov	r3, r0
   15f3c:	mov	r0, r3
   15f40:	sub	sp, fp, #4
   15f44:	ldr	fp, [sp]
   15f48:	add	sp, sp, #4
   15f4c:	pop	{pc}		; (ldr pc, [sp], #4)
   15f50:	str	fp, [sp, #-8]!
   15f54:	str	lr, [sp, #4]
   15f58:	add	fp, sp, #4
   15f5c:	sub	sp, sp, #8
   15f60:	mov	r0, #14
   15f64:	bl	10ccc <nl_langinfo@plt>
   15f68:	str	r0, [fp, #-8]
   15f6c:	ldr	r3, [fp, #-8]
   15f70:	cmp	r3, #0
   15f74:	bne	15f84 <__assert_fail@plt+0x527c>
   15f78:	movw	r3, #29768	; 0x7448
   15f7c:	movt	r3, #1
   15f80:	str	r3, [fp, #-8]
   15f84:	ldr	r3, [fp, #-8]
   15f88:	ldrb	r3, [r3]
   15f8c:	cmp	r3, #0
   15f90:	bne	15fa0 <__assert_fail@plt+0x5298>
   15f94:	movw	r3, #29772	; 0x744c
   15f98:	movt	r3, #1
   15f9c:	str	r3, [fp, #-8]
   15fa0:	ldr	r3, [fp, #-8]
   15fa4:	mov	r0, r3
   15fa8:	sub	sp, fp, #4
   15fac:	ldr	fp, [sp]
   15fb0:	add	sp, sp, #4
   15fb4:	pop	{pc}		; (ldr pc, [sp], #4)
   15fb8:	str	fp, [sp, #-8]!
   15fbc:	str	lr, [sp, #4]
   15fc0:	add	fp, sp, #4
   15fc4:	sub	sp, sp, #32
   15fc8:	str	r0, [fp, #-24]	; 0xffffffe8
   15fcc:	str	r1, [fp, #-28]	; 0xffffffe4
   15fd0:	str	r2, [fp, #-32]	; 0xffffffe0
   15fd4:	str	r3, [fp, #-36]	; 0xffffffdc
   15fd8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   15fdc:	cmp	r3, #0
   15fe0:	bne	15fec <__assert_fail@plt+0x52e4>
   15fe4:	sub	r3, fp, #16
   15fe8:	str	r3, [fp, #-24]	; 0xffffffe8
   15fec:	ldr	r3, [fp, #-36]	; 0xffffffdc
   15ff0:	ldr	r2, [fp, #-32]	; 0xffffffe0
   15ff4:	ldr	r1, [fp, #-28]	; 0xffffffe4
   15ff8:	ldr	r0, [fp, #-24]	; 0xffffffe8
   15ffc:	bl	10bdc <mbrtowc@plt>
   16000:	str	r0, [fp, #-8]
   16004:	ldr	r3, [fp, #-8]
   16008:	cmn	r3, #3
   1600c:	bls	16058 <__assert_fail@plt+0x5350>
   16010:	ldr	r3, [fp, #-32]	; 0xffffffe0
   16014:	cmp	r3, #0
   16018:	beq	16058 <__assert_fail@plt+0x5350>
   1601c:	mov	r0, #0
   16020:	bl	1663c <__assert_fail@plt+0x5934>
   16024:	mov	r3, r0
   16028:	eor	r3, r3, #1
   1602c:	uxtb	r3, r3
   16030:	cmp	r3, #0
   16034:	beq	16058 <__assert_fail@plt+0x5350>
   16038:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1603c:	ldrb	r3, [r3]
   16040:	strb	r3, [fp, #-9]
   16044:	ldrb	r2, [fp, #-9]
   16048:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1604c:	str	r2, [r3]
   16050:	mov	r3, #1
   16054:	b	1605c <__assert_fail@plt+0x5354>
   16058:	ldr	r3, [fp, #-8]
   1605c:	mov	r0, r3
   16060:	sub	sp, fp, #4
   16064:	ldr	fp, [sp]
   16068:	add	sp, sp, #4
   1606c:	pop	{pc}		; (ldr pc, [sp], #4)
   16070:	str	fp, [sp, #-8]!
   16074:	str	lr, [sp, #4]
   16078:	add	fp, sp, #4
   1607c:	sub	sp, sp, #24
   16080:	str	r0, [fp, #-16]
   16084:	str	r1, [fp, #-20]	; 0xffffffec
   16088:	str	r2, [fp, #-24]	; 0xffffffe8
   1608c:	mov	ip, #0
   16090:	ldr	r2, [fp, #-20]	; 0xffffffec
   16094:	ldr	r3, [fp, #-24]	; 0xffffffe8
   16098:	umull	r0, r1, r2, r3
   1609c:	mov	r2, #0
   160a0:	mov	r3, #0
   160a4:	mov	r2, r1
   160a8:	mov	r3, #0
   160ac:	cmp	r2, #0
   160b0:	beq	160b8 <__assert_fail@plt+0x53b0>
   160b4:	mov	ip, #1
   160b8:	mov	r3, r0
   160bc:	str	r3, [fp, #-8]
   160c0:	mov	r3, ip
   160c4:	and	r3, r3, #1
   160c8:	uxtb	r3, r3
   160cc:	cmp	r3, #0
   160d0:	beq	160ec <__assert_fail@plt+0x53e4>
   160d4:	bl	10c6c <__errno_location@plt>
   160d8:	mov	r2, r0
   160dc:	mov	r3, #12
   160e0:	str	r3, [r2]
   160e4:	mov	r3, #0
   160e8:	b	16100 <__assert_fail@plt+0x53f8>
   160ec:	ldr	r3, [fp, #-8]
   160f0:	mov	r1, r3
   160f4:	ldr	r0, [fp, #-16]
   160f8:	bl	15834 <__assert_fail@plt+0x4b2c>
   160fc:	mov	r3, r0
   16100:	mov	r0, r3
   16104:	sub	sp, fp, #4
   16108:	ldr	fp, [sp]
   1610c:	add	sp, sp, #4
   16110:	pop	{pc}		; (ldr pc, [sp], #4)
   16114:	push	{fp}		; (str fp, [sp, #-4]!)
   16118:	add	fp, sp, #0
   1611c:	sub	sp, sp, #12
   16120:	str	r0, [fp, #-8]
   16124:	ldr	r3, [fp, #-8]
   16128:	cmp	r3, #90	; 0x5a
   1612c:	bgt	16150 <__assert_fail@plt+0x5448>
   16130:	ldr	r3, [fp, #-8]
   16134:	cmp	r3, #65	; 0x41
   16138:	bge	16160 <__assert_fail@plt+0x5458>
   1613c:	ldr	r3, [fp, #-8]
   16140:	sub	r3, r3, #48	; 0x30
   16144:	cmp	r3, #9
   16148:	bhi	16168 <__assert_fail@plt+0x5460>
   1614c:	b	16160 <__assert_fail@plt+0x5458>
   16150:	ldr	r3, [fp, #-8]
   16154:	sub	r3, r3, #97	; 0x61
   16158:	cmp	r3, #25
   1615c:	bhi	16168 <__assert_fail@plt+0x5460>
   16160:	mov	r3, #1
   16164:	b	1616c <__assert_fail@plt+0x5464>
   16168:	mov	r3, #0
   1616c:	mov	r0, r3
   16170:	add	sp, fp, #0
   16174:	pop	{fp}		; (ldr fp, [sp], #4)
   16178:	bx	lr
   1617c:	push	{fp}		; (str fp, [sp, #-4]!)
   16180:	add	fp, sp, #0
   16184:	sub	sp, sp, #12
   16188:	str	r0, [fp, #-8]
   1618c:	ldr	r3, [fp, #-8]
   16190:	cmp	r3, #65	; 0x41
   16194:	blt	161bc <__assert_fail@plt+0x54b4>
   16198:	ldr	r3, [fp, #-8]
   1619c:	cmp	r3, #90	; 0x5a
   161a0:	ble	161b4 <__assert_fail@plt+0x54ac>
   161a4:	ldr	r3, [fp, #-8]
   161a8:	sub	r3, r3, #97	; 0x61
   161ac:	cmp	r3, #25
   161b0:	bhi	161bc <__assert_fail@plt+0x54b4>
   161b4:	mov	r3, #1
   161b8:	b	161c0 <__assert_fail@plt+0x54b8>
   161bc:	mov	r3, #0
   161c0:	mov	r0, r3
   161c4:	add	sp, fp, #0
   161c8:	pop	{fp}		; (ldr fp, [sp], #4)
   161cc:	bx	lr
   161d0:	push	{fp}		; (str fp, [sp, #-4]!)
   161d4:	add	fp, sp, #0
   161d8:	sub	sp, sp, #12
   161dc:	str	r0, [fp, #-8]
   161e0:	ldr	r3, [fp, #-8]
   161e4:	cmp	r3, #127	; 0x7f
   161e8:	bhi	161f4 <__assert_fail@plt+0x54ec>
   161ec:	mov	r3, #1
   161f0:	b	161f8 <__assert_fail@plt+0x54f0>
   161f4:	mov	r3, #0
   161f8:	mov	r0, r3
   161fc:	add	sp, fp, #0
   16200:	pop	{fp}		; (ldr fp, [sp], #4)
   16204:	bx	lr
   16208:	push	{fp}		; (str fp, [sp, #-4]!)
   1620c:	add	fp, sp, #0
   16210:	sub	sp, sp, #12
   16214:	str	r0, [fp, #-8]
   16218:	ldr	r3, [fp, #-8]
   1621c:	cmp	r3, #32
   16220:	beq	16230 <__assert_fail@plt+0x5528>
   16224:	ldr	r3, [fp, #-8]
   16228:	cmp	r3, #9
   1622c:	bne	16238 <__assert_fail@plt+0x5530>
   16230:	mov	r3, #1
   16234:	b	1623c <__assert_fail@plt+0x5534>
   16238:	mov	r3, #0
   1623c:	and	r3, r3, #1
   16240:	uxtb	r3, r3
   16244:	mov	r0, r3
   16248:	add	sp, fp, #0
   1624c:	pop	{fp}		; (ldr fp, [sp], #4)
   16250:	bx	lr
   16254:	push	{fp}		; (str fp, [sp, #-4]!)
   16258:	add	fp, sp, #0
   1625c:	sub	sp, sp, #12
   16260:	str	r0, [fp, #-8]
   16264:	ldr	r3, [fp, #-8]
   16268:	cmp	r3, #0
   1626c:	blt	16290 <__assert_fail@plt+0x5588>
   16270:	ldr	r3, [fp, #-8]
   16274:	cmp	r3, #31
   16278:	ble	16288 <__assert_fail@plt+0x5580>
   1627c:	ldr	r3, [fp, #-8]
   16280:	cmp	r3, #127	; 0x7f
   16284:	bne	16290 <__assert_fail@plt+0x5588>
   16288:	mov	r3, #1
   1628c:	b	16294 <__assert_fail@plt+0x558c>
   16290:	mov	r3, #0
   16294:	mov	r0, r3
   16298:	add	sp, fp, #0
   1629c:	pop	{fp}		; (ldr fp, [sp], #4)
   162a0:	bx	lr
   162a4:	push	{fp}		; (str fp, [sp, #-4]!)
   162a8:	add	fp, sp, #0
   162ac:	sub	sp, sp, #12
   162b0:	str	r0, [fp, #-8]
   162b4:	ldr	r3, [fp, #-8]
   162b8:	sub	r3, r3, #48	; 0x30
   162bc:	cmp	r3, #9
   162c0:	bhi	162cc <__assert_fail@plt+0x55c4>
   162c4:	mov	r3, #1
   162c8:	b	162d0 <__assert_fail@plt+0x55c8>
   162cc:	mov	r3, #0
   162d0:	mov	r0, r3
   162d4:	add	sp, fp, #0
   162d8:	pop	{fp}		; (ldr fp, [sp], #4)
   162dc:	bx	lr
   162e0:	push	{fp}		; (str fp, [sp, #-4]!)
   162e4:	add	fp, sp, #0
   162e8:	sub	sp, sp, #12
   162ec:	str	r0, [fp, #-8]
   162f0:	ldr	r3, [fp, #-8]
   162f4:	sub	r3, r3, #33	; 0x21
   162f8:	cmp	r3, #93	; 0x5d
   162fc:	bhi	16308 <__assert_fail@plt+0x5600>
   16300:	mov	r3, #1
   16304:	b	1630c <__assert_fail@plt+0x5604>
   16308:	mov	r3, #0
   1630c:	mov	r0, r3
   16310:	add	sp, fp, #0
   16314:	pop	{fp}		; (ldr fp, [sp], #4)
   16318:	bx	lr
   1631c:	push	{fp}		; (str fp, [sp, #-4]!)
   16320:	add	fp, sp, #0
   16324:	sub	sp, sp, #12
   16328:	str	r0, [fp, #-8]
   1632c:	ldr	r3, [fp, #-8]
   16330:	sub	r3, r3, #97	; 0x61
   16334:	cmp	r3, #25
   16338:	bhi	16344 <__assert_fail@plt+0x563c>
   1633c:	mov	r3, #1
   16340:	b	16348 <__assert_fail@plt+0x5640>
   16344:	mov	r3, #0
   16348:	mov	r0, r3
   1634c:	add	sp, fp, #0
   16350:	pop	{fp}		; (ldr fp, [sp], #4)
   16354:	bx	lr
   16358:	push	{fp}		; (str fp, [sp, #-4]!)
   1635c:	add	fp, sp, #0
   16360:	sub	sp, sp, #12
   16364:	str	r0, [fp, #-8]
   16368:	ldr	r3, [fp, #-8]
   1636c:	sub	r3, r3, #32
   16370:	cmp	r3, #94	; 0x5e
   16374:	bhi	16380 <__assert_fail@plt+0x5678>
   16378:	mov	r3, #1
   1637c:	b	16384 <__assert_fail@plt+0x567c>
   16380:	mov	r3, #0
   16384:	mov	r0, r3
   16388:	add	sp, fp, #0
   1638c:	pop	{fp}		; (ldr fp, [sp], #4)
   16390:	bx	lr
   16394:	push	{fp}		; (str fp, [sp, #-4]!)
   16398:	add	fp, sp, #0
   1639c:	sub	sp, sp, #12
   163a0:	str	r0, [fp, #-8]
   163a4:	ldr	r3, [fp, #-8]
   163a8:	cmp	r3, #64	; 0x40
   163ac:	bgt	163d0 <__assert_fail@plt+0x56c8>
   163b0:	ldr	r3, [fp, #-8]
   163b4:	cmp	r3, #58	; 0x3a
   163b8:	bge	163f8 <__assert_fail@plt+0x56f0>
   163bc:	ldr	r3, [fp, #-8]
   163c0:	sub	r3, r3, #33	; 0x21
   163c4:	cmp	r3, #14
   163c8:	bhi	16400 <__assert_fail@plt+0x56f8>
   163cc:	b	163f8 <__assert_fail@plt+0x56f0>
   163d0:	ldr	r3, [fp, #-8]
   163d4:	cmp	r3, #91	; 0x5b
   163d8:	blt	16400 <__assert_fail@plt+0x56f8>
   163dc:	ldr	r3, [fp, #-8]
   163e0:	cmp	r3, #96	; 0x60
   163e4:	ble	163f8 <__assert_fail@plt+0x56f0>
   163e8:	ldr	r3, [fp, #-8]
   163ec:	sub	r3, r3, #123	; 0x7b
   163f0:	cmp	r3, #3
   163f4:	bhi	16400 <__assert_fail@plt+0x56f8>
   163f8:	mov	r3, #1
   163fc:	b	16404 <__assert_fail@plt+0x56fc>
   16400:	mov	r3, #0
   16404:	mov	r0, r3
   16408:	add	sp, fp, #0
   1640c:	pop	{fp}		; (ldr fp, [sp], #4)
   16410:	bx	lr
   16414:	push	{fp}		; (str fp, [sp, #-4]!)
   16418:	add	fp, sp, #0
   1641c:	sub	sp, sp, #12
   16420:	str	r0, [fp, #-8]
   16424:	ldr	r3, [fp, #-8]
   16428:	cmp	r3, #9
   1642c:	blt	16450 <__assert_fail@plt+0x5748>
   16430:	ldr	r3, [fp, #-8]
   16434:	cmp	r3, #13
   16438:	ble	16448 <__assert_fail@plt+0x5740>
   1643c:	ldr	r3, [fp, #-8]
   16440:	cmp	r3, #32
   16444:	bne	16450 <__assert_fail@plt+0x5748>
   16448:	mov	r3, #1
   1644c:	b	16454 <__assert_fail@plt+0x574c>
   16450:	mov	r3, #0
   16454:	mov	r0, r3
   16458:	add	sp, fp, #0
   1645c:	pop	{fp}		; (ldr fp, [sp], #4)
   16460:	bx	lr
   16464:	push	{fp}		; (str fp, [sp, #-4]!)
   16468:	add	fp, sp, #0
   1646c:	sub	sp, sp, #12
   16470:	str	r0, [fp, #-8]
   16474:	ldr	r3, [fp, #-8]
   16478:	sub	r3, r3, #65	; 0x41
   1647c:	cmp	r3, #25
   16480:	bhi	1648c <__assert_fail@plt+0x5784>
   16484:	mov	r3, #1
   16488:	b	16490 <__assert_fail@plt+0x5788>
   1648c:	mov	r3, #0
   16490:	mov	r0, r3
   16494:	add	sp, fp, #0
   16498:	pop	{fp}		; (ldr fp, [sp], #4)
   1649c:	bx	lr
   164a0:	push	{fp}		; (str fp, [sp, #-4]!)
   164a4:	add	fp, sp, #0
   164a8:	sub	sp, sp, #12
   164ac:	str	r0, [fp, #-8]
   164b0:	ldr	r3, [fp, #-8]
   164b4:	sub	r3, r3, #48	; 0x30
   164b8:	cmp	r3, #54	; 0x36
   164bc:	ldrls	pc, [pc, r3, lsl #2]
   164c0:	b	165a8 <__assert_fail@plt+0x58a0>
   164c4:	andeq	r6, r1, r0, lsr #11
   164c8:	andeq	r6, r1, r0, lsr #11
   164cc:	andeq	r6, r1, r0, lsr #11
   164d0:	andeq	r6, r1, r0, lsr #11
   164d4:	andeq	r6, r1, r0, lsr #11
   164d8:	andeq	r6, r1, r0, lsr #11
   164dc:	andeq	r6, r1, r0, lsr #11
   164e0:	andeq	r6, r1, r0, lsr #11
   164e4:	andeq	r6, r1, r0, lsr #11
   164e8:	andeq	r6, r1, r0, lsr #11
   164ec:	andeq	r6, r1, r8, lsr #11
   164f0:	andeq	r6, r1, r8, lsr #11
   164f4:	andeq	r6, r1, r8, lsr #11
   164f8:	andeq	r6, r1, r8, lsr #11
   164fc:	andeq	r6, r1, r8, lsr #11
   16500:	andeq	r6, r1, r8, lsr #11
   16504:	andeq	r6, r1, r8, lsr #11
   16508:	andeq	r6, r1, r0, lsr #11
   1650c:	andeq	r6, r1, r0, lsr #11
   16510:	andeq	r6, r1, r0, lsr #11
   16514:	andeq	r6, r1, r0, lsr #11
   16518:	andeq	r6, r1, r0, lsr #11
   1651c:	andeq	r6, r1, r0, lsr #11
   16520:	andeq	r6, r1, r8, lsr #11
   16524:	andeq	r6, r1, r8, lsr #11
   16528:	andeq	r6, r1, r8, lsr #11
   1652c:	andeq	r6, r1, r8, lsr #11
   16530:	andeq	r6, r1, r8, lsr #11
   16534:	andeq	r6, r1, r8, lsr #11
   16538:	andeq	r6, r1, r8, lsr #11
   1653c:	andeq	r6, r1, r8, lsr #11
   16540:	andeq	r6, r1, r8, lsr #11
   16544:	andeq	r6, r1, r8, lsr #11
   16548:	andeq	r6, r1, r8, lsr #11
   1654c:	andeq	r6, r1, r8, lsr #11
   16550:	andeq	r6, r1, r8, lsr #11
   16554:	andeq	r6, r1, r8, lsr #11
   16558:	andeq	r6, r1, r8, lsr #11
   1655c:	andeq	r6, r1, r8, lsr #11
   16560:	andeq	r6, r1, r8, lsr #11
   16564:	andeq	r6, r1, r8, lsr #11
   16568:	andeq	r6, r1, r8, lsr #11
   1656c:	andeq	r6, r1, r8, lsr #11
   16570:	andeq	r6, r1, r8, lsr #11
   16574:	andeq	r6, r1, r8, lsr #11
   16578:	andeq	r6, r1, r8, lsr #11
   1657c:	andeq	r6, r1, r8, lsr #11
   16580:	andeq	r6, r1, r8, lsr #11
   16584:	andeq	r6, r1, r8, lsr #11
   16588:	andeq	r6, r1, r0, lsr #11
   1658c:	andeq	r6, r1, r0, lsr #11
   16590:	andeq	r6, r1, r0, lsr #11
   16594:	andeq	r6, r1, r0, lsr #11
   16598:	andeq	r6, r1, r0, lsr #11
   1659c:	andeq	r6, r1, r0, lsr #11
   165a0:	mov	r3, #1
   165a4:	b	165ac <__assert_fail@plt+0x58a4>
   165a8:	mov	r3, #0
   165ac:	mov	r0, r3
   165b0:	add	sp, fp, #0
   165b4:	pop	{fp}		; (ldr fp, [sp], #4)
   165b8:	bx	lr
   165bc:	push	{fp}		; (str fp, [sp, #-4]!)
   165c0:	add	fp, sp, #0
   165c4:	sub	sp, sp, #12
   165c8:	str	r0, [fp, #-8]
   165cc:	ldr	r3, [fp, #-8]
   165d0:	sub	r3, r3, #65	; 0x41
   165d4:	cmp	r3, #25
   165d8:	bhi	165e8 <__assert_fail@plt+0x58e0>
   165dc:	ldr	r3, [fp, #-8]
   165e0:	add	r3, r3, #32
   165e4:	b	165ec <__assert_fail@plt+0x58e4>
   165e8:	ldr	r3, [fp, #-8]
   165ec:	mov	r0, r3
   165f0:	add	sp, fp, #0
   165f4:	pop	{fp}		; (ldr fp, [sp], #4)
   165f8:	bx	lr
   165fc:	push	{fp}		; (str fp, [sp, #-4]!)
   16600:	add	fp, sp, #0
   16604:	sub	sp, sp, #12
   16608:	str	r0, [fp, #-8]
   1660c:	ldr	r3, [fp, #-8]
   16610:	sub	r3, r3, #97	; 0x61
   16614:	cmp	r3, #25
   16618:	bhi	16628 <__assert_fail@plt+0x5920>
   1661c:	ldr	r3, [fp, #-8]
   16620:	sub	r3, r3, #32
   16624:	b	1662c <__assert_fail@plt+0x5924>
   16628:	ldr	r3, [fp, #-8]
   1662c:	mov	r0, r3
   16630:	add	sp, fp, #0
   16634:	pop	{fp}		; (ldr fp, [sp], #4)
   16638:	bx	lr
   1663c:	str	fp, [sp, #-8]!
   16640:	str	lr, [sp, #4]
   16644:	add	fp, sp, #4
   16648:	sub	sp, sp, #272	; 0x110
   1664c:	str	r0, [fp, #-272]	; 0xfffffef0
   16650:	sub	r3, fp, #264	; 0x108
   16654:	movw	r2, #257	; 0x101
   16658:	mov	r1, r3
   1665c:	ldr	r0, [fp, #-272]	; 0xfffffef0
   16660:	bl	16800 <__assert_fail@plt+0x5af8>
   16664:	mov	r3, r0
   16668:	cmp	r3, #0
   1666c:	beq	16678 <__assert_fail@plt+0x5970>
   16670:	mov	r3, #0
   16674:	b	166cc <__assert_fail@plt+0x59c4>
   16678:	sub	r3, fp, #264	; 0x108
   1667c:	movw	r1, #29780	; 0x7454
   16680:	movt	r1, #1
   16684:	mov	r0, r3
   16688:	bl	10b10 <strcmp@plt>
   1668c:	mov	r3, r0
   16690:	cmp	r3, #0
   16694:	beq	166c0 <__assert_fail@plt+0x59b8>
   16698:	sub	r3, fp, #264	; 0x108
   1669c:	movw	r1, #29784	; 0x7458
   166a0:	movt	r1, #1
   166a4:	mov	r0, r3
   166a8:	bl	10b10 <strcmp@plt>
   166ac:	mov	r3, r0
   166b0:	cmp	r3, #0
   166b4:	beq	166c0 <__assert_fail@plt+0x59b8>
   166b8:	mov	r3, #1
   166bc:	b	166c4 <__assert_fail@plt+0x59bc>
   166c0:	mov	r3, #0
   166c4:	and	r3, r3, #1
   166c8:	uxtb	r3, r3
   166cc:	mov	r0, r3
   166d0:	sub	sp, fp, #4
   166d4:	ldr	fp, [sp]
   166d8:	add	sp, sp, #4
   166dc:	pop	{pc}		; (ldr pc, [sp], #4)
   166e0:	str	fp, [sp, #-8]!
   166e4:	str	lr, [sp, #4]
   166e8:	add	fp, sp, #4
   166ec:	sub	sp, sp, #16
   166f0:	str	r0, [fp, #-16]
   166f4:	mov	r1, #0
   166f8:	ldr	r0, [fp, #-16]
   166fc:	bl	10cb4 <setlocale@plt>
   16700:	str	r0, [fp, #-8]
   16704:	ldr	r3, [fp, #-8]
   16708:	mov	r0, r3
   1670c:	sub	sp, fp, #4
   16710:	ldr	fp, [sp]
   16714:	add	sp, sp, #4
   16718:	pop	{pc}		; (ldr pc, [sp], #4)
   1671c:	str	fp, [sp, #-8]!
   16720:	str	lr, [sp, #4]
   16724:	add	fp, sp, #4
   16728:	sub	sp, sp, #24
   1672c:	str	r0, [fp, #-16]
   16730:	str	r1, [fp, #-20]	; 0xffffffec
   16734:	str	r2, [fp, #-24]	; 0xffffffe8
   16738:	ldr	r0, [fp, #-16]
   1673c:	bl	166e0 <__assert_fail@plt+0x59d8>
   16740:	str	r0, [fp, #-8]
   16744:	ldr	r3, [fp, #-8]
   16748:	cmp	r3, #0
   1674c:	bne	16770 <__assert_fail@plt+0x5a68>
   16750:	ldr	r3, [fp, #-24]	; 0xffffffe8
   16754:	cmp	r3, #0
   16758:	beq	16768 <__assert_fail@plt+0x5a60>
   1675c:	ldr	r3, [fp, #-20]	; 0xffffffec
   16760:	mov	r2, #0
   16764:	strb	r2, [r3]
   16768:	mov	r3, #22
   1676c:	b	167ec <__assert_fail@plt+0x5ae4>
   16770:	ldr	r0, [fp, #-8]
   16774:	bl	10c54 <strlen@plt>
   16778:	str	r0, [fp, #-12]
   1677c:	ldr	r2, [fp, #-12]
   16780:	ldr	r3, [fp, #-24]	; 0xffffffe8
   16784:	cmp	r2, r3
   16788:	bcs	167ac <__assert_fail@plt+0x5aa4>
   1678c:	ldr	r3, [fp, #-12]
   16790:	add	r3, r3, #1
   16794:	mov	r2, r3
   16798:	ldr	r1, [fp, #-8]
   1679c:	ldr	r0, [fp, #-20]	; 0xffffffec
   167a0:	bl	10b4c <memcpy@plt>
   167a4:	mov	r3, #0
   167a8:	b	167ec <__assert_fail@plt+0x5ae4>
   167ac:	ldr	r3, [fp, #-24]	; 0xffffffe8
   167b0:	cmp	r3, #0
   167b4:	beq	167e8 <__assert_fail@plt+0x5ae0>
   167b8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   167bc:	sub	r3, r3, #1
   167c0:	mov	r2, r3
   167c4:	ldr	r1, [fp, #-8]
   167c8:	ldr	r0, [fp, #-20]	; 0xffffffec
   167cc:	bl	10b4c <memcpy@plt>
   167d0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   167d4:	sub	r3, r3, #1
   167d8:	ldr	r2, [fp, #-20]	; 0xffffffec
   167dc:	add	r3, r2, r3
   167e0:	mov	r2, #0
   167e4:	strb	r2, [r3]
   167e8:	mov	r3, #34	; 0x22
   167ec:	mov	r0, r3
   167f0:	sub	sp, fp, #4
   167f4:	ldr	fp, [sp]
   167f8:	add	sp, sp, #4
   167fc:	pop	{pc}		; (ldr pc, [sp], #4)
   16800:	str	fp, [sp, #-8]!
   16804:	str	lr, [sp, #4]
   16808:	add	fp, sp, #4
   1680c:	sub	sp, sp, #16
   16810:	str	r0, [fp, #-8]
   16814:	str	r1, [fp, #-12]
   16818:	str	r2, [fp, #-16]
   1681c:	ldr	r2, [fp, #-16]
   16820:	ldr	r1, [fp, #-12]
   16824:	ldr	r0, [fp, #-8]
   16828:	bl	1671c <__assert_fail@plt+0x5a14>
   1682c:	mov	r3, r0
   16830:	mov	r0, r3
   16834:	sub	sp, fp, #4
   16838:	ldr	fp, [sp]
   1683c:	add	sp, sp, #4
   16840:	pop	{pc}		; (ldr pc, [sp], #4)
   16844:	str	fp, [sp, #-8]!
   16848:	str	lr, [sp, #4]
   1684c:	add	fp, sp, #4
   16850:	sub	sp, sp, #8
   16854:	str	r0, [fp, #-8]
   16858:	ldr	r0, [fp, #-8]
   1685c:	bl	166e0 <__assert_fail@plt+0x59d8>
   16860:	mov	r3, r0
   16864:	mov	r0, r3
   16868:	sub	sp, fp, #4
   1686c:	ldr	fp, [sp]
   16870:	add	sp, sp, #4
   16874:	pop	{pc}		; (ldr pc, [sp], #4)
   16878:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1687c:	mov	r7, r0
   16880:	ldr	r6, [pc, #72]	; 168d0 <__assert_fail@plt+0x5bc8>
   16884:	ldr	r5, [pc, #72]	; 168d4 <__assert_fail@plt+0x5bcc>
   16888:	add	r6, pc, r6
   1688c:	add	r5, pc, r5
   16890:	sub	r6, r6, r5
   16894:	mov	r8, r1
   16898:	mov	r9, r2
   1689c:	bl	10ad8 <calloc@plt-0x20>
   168a0:	asrs	r6, r6, #2
   168a4:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   168a8:	mov	r4, #0
   168ac:	add	r4, r4, #1
   168b0:	ldr	r3, [r5], #4
   168b4:	mov	r2, r9
   168b8:	mov	r1, r8
   168bc:	mov	r0, r7
   168c0:	blx	r3
   168c4:	cmp	r6, r4
   168c8:	bne	168ac <__assert_fail@plt+0x5ba4>
   168cc:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   168d0:	andeq	r1, r1, r4, lsl #13
   168d4:	andeq	r1, r1, ip, ror r6
   168d8:	bx	lr
   168dc:	ldr	r3, [pc, #12]	; 168f0 <__assert_fail@plt+0x5be8>
   168e0:	mov	r1, #0
   168e4:	add	r3, pc, r3
   168e8:	ldr	r2, [r3]
   168ec:	b	10c78 <__cxa_atexit@plt>
   168f0:	ldrdeq	r1, [r1], -ip

Disassembly of section .fini:

000168f4 <.fini>:
   168f4:	push	{r3, lr}
   168f8:	pop	{r3, pc}
