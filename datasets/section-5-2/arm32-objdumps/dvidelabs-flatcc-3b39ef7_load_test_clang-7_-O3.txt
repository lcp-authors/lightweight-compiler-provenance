
../repos/dvidelabs-flatcc-3b39ef7/test/load_test/load_test:     file format elf32-littlearm


Disassembly of section .init:

00012398 <.init>:
   12398:	push	{r3, lr}
   1239c:	bl	124e4 <_start@@Base+0x3c>
   123a0:	pop	{r3, pc}

Disassembly of section .plt:

000123a4 <strcmp@plt-0x14>:
   123a4:	push	{lr}		; (str lr, [sp, #-4]!)
   123a8:	ldr	lr, [pc, #4]	; 123b4 <strcmp@plt-0x4>
   123ac:	add	lr, pc, lr
   123b0:	ldr	pc, [lr, #8]!
   123b4:	andeq	r7, r1, ip, asr #24

000123b8 <strcmp@plt>:
   123b8:	add	ip, pc, #0, 12
   123bc:	add	ip, ip, #94208	; 0x17000
   123c0:	ldr	pc, [ip, #3148]!	; 0xc4c

000123c4 <printf@plt>:
   123c4:	add	ip, pc, #0, 12
   123c8:	add	ip, ip, #94208	; 0x17000
   123cc:	ldr	pc, [ip, #3140]!	; 0xc44

000123d0 <fopen@plt>:
   123d0:	add	ip, pc, #0, 12
   123d4:	add	ip, ip, #94208	; 0x17000
   123d8:	ldr	pc, [ip, #3132]!	; 0xc3c

000123dc <free@plt>:
   123dc:	add	ip, pc, #0, 12
   123e0:	add	ip, ip, #94208	; 0x17000
   123e4:	ldr	pc, [ip, #3124]!	; 0xc34

000123e8 <memcpy@plt>:
   123e8:	add	ip, pc, #0, 12
   123ec:	add	ip, ip, #94208	; 0x17000
   123f0:	ldr	pc, [ip, #3116]!	; 0xc2c

000123f4 <fwrite_unlocked@plt>:
   123f4:	add	ip, pc, #0, 12
   123f8:	add	ip, ip, #94208	; 0x17000
   123fc:	ldr	pc, [ip, #3108]!	; 0xc24

00012400 <memcmp@plt>:
   12400:	add	ip, pc, #0, 12
   12404:	add	ip, ip, #94208	; 0x17000
   12408:	ldr	pc, [ip, #3100]!	; 0xc1c

0001240c <realloc@plt>:
   1240c:	add	ip, pc, #0, 12
   12410:	add	ip, ip, #94208	; 0x17000
   12414:	ldr	pc, [ip, #3092]!	; 0xc14

00012418 <gettimeofday@plt>:
   12418:	add	ip, pc, #0, 12
   1241c:	add	ip, ip, #94208	; 0x17000
   12420:	ldr	pc, [ip, #3084]!	; 0xc0c

00012424 <puts@plt>:
   12424:	add	ip, pc, #0, 12
   12428:	add	ip, ip, #94208	; 0x17000
   1242c:	ldr	pc, [ip, #3076]!	; 0xc04

00012430 <malloc@plt>:
   12430:	add	ip, pc, #0, 12
   12434:	add	ip, ip, #94208	; 0x17000
   12438:	ldr	pc, [ip, #3068]!	; 0xbfc

0001243c <__libc_start_main@plt>:
   1243c:	add	ip, pc, #0, 12
   12440:	add	ip, ip, #94208	; 0x17000
   12444:	ldr	pc, [ip, #3060]!	; 0xbf4

00012448 <__gmon_start__@plt>:
   12448:	add	ip, pc, #0, 12
   1244c:	add	ip, ip, #94208	; 0x17000
   12450:	ldr	pc, [ip, #3052]!	; 0xbec

00012454 <strlen@plt>:
   12454:	add	ip, pc, #0, 12
   12458:	add	ip, ip, #94208	; 0x17000
   1245c:	ldr	pc, [ip, #3044]!	; 0xbe4

00012460 <posix_memalign@plt>:
   12460:	add	ip, pc, #0, 12
   12464:	add	ip, ip, #94208	; 0x17000
   12468:	ldr	pc, [ip, #3036]!	; 0xbdc

0001246c <memset@plt>:
   1246c:	add	ip, pc, #0, 12
   12470:	add	ip, ip, #94208	; 0x17000
   12474:	ldr	pc, [ip, #3028]!	; 0xbd4

00012478 <memchr@plt>:
   12478:	add	ip, pc, #0, 12
   1247c:	add	ip, ip, #94208	; 0x17000
   12480:	ldr	pc, [ip, #3020]!	; 0xbcc

00012484 <fclose@plt>:
   12484:	add	ip, pc, #0, 12
   12488:	add	ip, ip, #94208	; 0x17000
   1248c:	ldr	pc, [ip, #3012]!	; 0xbc4

00012490 <abort@plt>:
   12490:	add	ip, pc, #0, 12
   12494:	add	ip, ip, #94208	; 0x17000
   12498:	ldr	pc, [ip, #3004]!	; 0xbbc

0001249c <__assert_fail@plt>:
   1249c:	add	ip, pc, #0, 12
   124a0:	add	ip, ip, #94208	; 0x17000
   124a4:	ldr	pc, [ip, #2996]!	; 0xbb4

Disassembly of section .text:

000124a8 <_start@@Base>:
   124a8:	mov	fp, #0
   124ac:	mov	lr, #0
   124b0:	pop	{r1}		; (ldr r1, [sp], #4)
   124b4:	mov	r2, sp
   124b8:	push	{r2}		; (str r2, [sp, #-4]!)
   124bc:	push	{r0}		; (str r0, [sp, #-4]!)
   124c0:	ldr	ip, [pc, #16]	; 124d8 <_start@@Base+0x30>
   124c4:	push	{ip}		; (str ip, [sp, #-4]!)
   124c8:	ldr	r0, [pc, #12]	; 124dc <_start@@Base+0x34>
   124cc:	ldr	r3, [pc, #12]	; 124e0 <_start@@Base+0x38>
   124d0:	bl	1243c <__libc_start_main@plt>
   124d4:	bl	12490 <abort@plt>
   124d8:	andeq	r8, r1, r4, lsr r1
   124dc:	muleq	r1, r8, r5
   124e0:	ldrdeq	r8, [r1], -r4
   124e4:	ldr	r3, [pc, #20]	; 12500 <_start@@Base+0x58>
   124e8:	ldr	r2, [pc, #20]	; 12504 <_start@@Base+0x5c>
   124ec:	add	r3, pc, r3
   124f0:	ldr	r2, [r3, r2]
   124f4:	cmp	r2, #0
   124f8:	bxeq	lr
   124fc:	b	12448 <__gmon_start__@plt>
   12500:	andeq	r7, r1, ip, lsl #22
   12504:	andeq	r0, r0, ip, asr r0
   12508:	ldr	r0, [pc, #24]	; 12528 <_start@@Base+0x80>
   1250c:	ldr	r3, [pc, #24]	; 1252c <_start@@Base+0x84>
   12510:	cmp	r3, r0
   12514:	bxeq	lr
   12518:	ldr	r3, [pc, #16]	; 12530 <_start@@Base+0x88>
   1251c:	cmp	r3, #0
   12520:	bxeq	lr
   12524:	bx	r3
   12528:	andeq	sl, r2, r8, rrx
   1252c:	andeq	sl, r2, r8, rrx
   12530:	andeq	r0, r0, r0
   12534:	ldr	r0, [pc, #36]	; 12560 <_start@@Base+0xb8>
   12538:	ldr	r1, [pc, #36]	; 12564 <_start@@Base+0xbc>
   1253c:	sub	r1, r1, r0
   12540:	asr	r1, r1, #2
   12544:	add	r1, r1, r1, lsr #31
   12548:	asrs	r1, r1, #1
   1254c:	bxeq	lr
   12550:	ldr	r3, [pc, #16]	; 12568 <_start@@Base+0xc0>
   12554:	cmp	r3, #0
   12558:	bxeq	lr
   1255c:	bx	r3
   12560:	andeq	sl, r2, r8, rrx
   12564:	andeq	sl, r2, r8, rrx
   12568:	andeq	r0, r0, r0
   1256c:	push	{r4, lr}
   12570:	ldr	r4, [pc, #24]	; 12590 <_start@@Base+0xe8>
   12574:	ldrb	r3, [r4]
   12578:	cmp	r3, #0
   1257c:	popne	{r4, pc}
   12580:	bl	12508 <_start@@Base+0x60>
   12584:	mov	r3, #1
   12588:	strb	r3, [r4]
   1258c:	pop	{r4, pc}
   12590:	andeq	sl, r2, r8, rrx
   12594:	b	12534 <_start@@Base+0x8c>

00012598 <main@@Base>:
   12598:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1259c:	add	fp, sp, #28
   125a0:	sub	sp, sp, #4
   125a4:	vpush	{d8-d10}
   125a8:	sub	sp, sp, #280	; 0x118
   125ac:	add	r4, sp, #28
   125b0:	mov	r0, r4
   125b4:	bl	12fac <flatcc_builder_init@@Base>
   125b8:	mov	r0, r4
   125bc:	bl	12bb8 <main@@Base+0x620>
   125c0:	sub	r1, fp, #76	; 0x4c
   125c4:	mov	r0, r4
   125c8:	bl	1790c <flatcc_builder_finalize_buffer@@Base>
   125cc:	movw	r1, #33114	; 0x815a
   125d0:	mov	r7, r0
   125d4:	movw	r0, #33092	; 0x8144
   125d8:	movt	r0, #1
   125dc:	movt	r1, #1
   125e0:	bl	123d0 <fopen@plt>
   125e4:	cmp	r0, #0
   125e8:	beq	12668 <main@@Base+0xd0>
   125ec:	ldr	r6, [fp, #-76]	; 0xffffffb4
   125f0:	mov	r5, r0
   125f4:	mov	r0, r7
   125f8:	mov	r1, #1
   125fc:	mov	r4, #1
   12600:	mov	r3, r5
   12604:	mov	r2, r6
   12608:	bl	123f4 <fwrite_unlocked@plt>
   1260c:	mov	r8, r0
   12610:	mov	r0, r5
   12614:	bl	12484 <fclose@plt>
   12618:	cmp	r6, r8
   1261c:	bne	12a30 <main@@Base+0x498>
   12620:	ldr	r1, [fp, #-76]	; 0xffffffb4
   12624:	movw	r0, #33117	; 0x815d
   12628:	movt	r0, #1
   1262c:	bl	123c4 <printf@plt>
   12630:	movw	r0, #34544	; 0x86f0
   12634:	movt	r0, #1
   12638:	bl	12424 <puts@plt>
   1263c:	sub	r0, fp, #72	; 0x48
   12640:	mov	r1, #0
   12644:	bl	12418 <gettimeofday@plt>
   12648:	movw	r2, #42072	; 0xa458
   1264c:	movt	r2, #2
   12650:	ldr	r0, [r2]
   12654:	cmp	r0, #0
   12658:	beq	12670 <main@@Base+0xd8>
   1265c:	ldr	r1, [r2, #4]
   12660:	ldr	r2, [fp, #-72]	; 0xffffffb8
   12664:	b	12680 <main@@Base+0xe8>
   12668:	mvn	r4, #0
   1266c:	b	12a30 <main@@Base+0x498>
   12670:	ldr	r0, [fp, #-72]	; 0xffffffb8
   12674:	ldr	r1, [fp, #-68]	; 0xffffffbc
   12678:	strd	r0, [r2]
   1267c:	mov	r2, r0
   12680:	sub	r0, r2, r0
   12684:	ldr	r2, [fp, #-68]	; 0xffffffbc
   12688:	vldr	d8, [pc, #984]	; 12a68 <main@@Base+0x4d0>
   1268c:	movw	sl, #33419	; 0x828b
   12690:	movw	r6, #41072	; 0xa070
   12694:	vmov	s2, r0
   12698:	add	r0, r7, #8
   1269c:	movt	sl, #1
   126a0:	movt	r6, #2
   126a4:	sub	r1, r2, r1
   126a8:	vmov	s0, r1
   126ac:	vcvt.f64.s32	d16, s0
   126b0:	vcvt.f64.s32	d17, s2
   126b4:	str	r0, [sp, #4]
   126b8:	mov	r0, #0
   126bc:	str	r7, [sp]
   126c0:	vdiv.f64	d16, d16, d8
   126c4:	vadd.f64	d9, d16, d17
   126c8:	add	r4, sp, #28
   126cc:	str	r0, [sp, #8]
   126d0:	mov	r0, r4
   126d4:	bl	12bb8 <main@@Base+0x620>
   126d8:	ldr	r2, [fp, #-76]	; 0xffffffb4
   126dc:	mov	r0, r4
   126e0:	mov	r1, r7
   126e4:	bl	178c0 <flatcc_builder_copy_buffer@@Base>
   126e8:	cmp	r7, #0
   126ec:	beq	12b04 <main@@Base+0x56c>
   126f0:	ldr	r0, [r7, #4]
   126f4:	movw	r1, #20301	; 0x4f4d
   126f8:	movt	r1, #21326	; 0x534e
   126fc:	cmp	r0, r1
   12700:	bne	12b04 <main@@Base+0x56c>
   12704:	ldr	r8, [r7]
   12708:	mov	r5, r7
   1270c:	ldr	r0, [r5, r8]!
   12710:	mov	r4, r5
   12714:	ldrh	r9, [r4, -r0]!
   12718:	cmp	r9, #11
   1271c:	bls	12ad8 <main@@Base+0x540>
   12720:	ldrh	r0, [r4, #10]
   12724:	cmp	r0, #0
   12728:	beq	12ad8 <main@@Base+0x540>
   1272c:	mov	r1, r5
   12730:	ldr	r0, [r1, r0]!
   12734:	add	r0, r1, r0
   12738:	movw	r1, #33135	; 0x816f
   1273c:	add	r0, r0, #4
   12740:	movt	r1, #1
   12744:	bl	123b8 <strcmp@plt>
   12748:	cmp	r0, #0
   1274c:	bne	12b84 <main@@Base+0x5ec>
   12750:	cmp	r9, #28
   12754:	bcc	12b64 <main@@Base+0x5cc>
   12758:	ldrh	r0, [r4, #26]
   1275c:	cmp	r0, #0
   12760:	beq	12b64 <main@@Base+0x5cc>
   12764:	ldr	r1, [r5, r0]!
   12768:	ldr	r2, [r5, r1]!
   1276c:	cmp	r2, #1000	; 0x3e8
   12770:	bne	12b64 <main@@Base+0x5cc>
   12774:	add	r1, r1, r8
   12778:	add	r2, r5, #4
   1277c:	add	r0, r1, r0
   12780:	ldr	r1, [sp, #4]
   12784:	str	r2, [sp, #16]
   12788:	add	r7, r1, r0
   1278c:	ldr	r0, [r2, #-4]
   12790:	mov	r2, #0
   12794:	str	r0, [sp, #12]
   12798:	ldr	r0, [sp, #12]
   1279c:	cmp	r0, r2
   127a0:	bls	12b24 <main@@Base+0x58c>
   127a4:	ldr	r1, [sp, #16]
   127a8:	ldr	lr, [r1, r2, lsl #2]!
   127ac:	adds	r0, r1, lr
   127b0:	beq	12b04 <main@@Base+0x56c>
   127b4:	ldr	r1, [r0]
   127b8:	mov	r3, r0
   127bc:	str	r2, [sp, #20]
   127c0:	ldrh	r2, [r3, -r1]!
   127c4:	cmp	r2, #12
   127c8:	bcc	12ad8 <main@@Base+0x540>
   127cc:	ldrh	r1, [r3, #10]
   127d0:	cmp	r1, #0
   127d4:	beq	12ad8 <main@@Base+0x540>
   127d8:	mov	r4, r0
   127dc:	mov	r5, #0
   127e0:	cmp	r2, #16
   127e4:	ldr	ip, [r4, r1]!
   127e8:	add	r4, r4, ip
   127ec:	add	r4, r4, #4
   127f0:	bcc	12808 <main@@Base+0x270>
   127f4:	ldrh	r2, [r3, #14]
   127f8:	cmp	r2, #0
   127fc:	ldrne	r2, [r0, r2]!
   12800:	addne	r0, r0, r2
   12804:	addne	r5, r0, #4
   12808:	ldr	r0, [r4, #-4]
   1280c:	cmp	r0, #700	; 0x2bc
   12810:	bne	12b44 <main@@Base+0x5ac>
   12814:	cmp	r5, #0
   12818:	beq	12ae4 <main@@Base+0x54c>
   1281c:	ldr	r0, [r5, #-4]
   12820:	movw	r2, #34464	; 0x86a0
   12824:	movt	r2, #1
   12828:	cmp	r0, r2
   1282c:	bne	12ae4 <main@@Base+0x54c>
   12830:	add	r0, ip, lr
   12834:	mov	r9, #0
   12838:	str	r7, [sp, #24]
   1283c:	add	r0, r0, r1
   12840:	add	r8, r7, r0
   12844:	mov	r0, r8
   12848:	mov	r1, sl
   1284c:	mov	r2, #7
   12850:	bl	12400 <memcmp@plt>
   12854:	cmp	r0, #0
   12858:	bne	12a70 <main@@Base+0x4d8>
   1285c:	add	r9, r9, #1
   12860:	add	r8, r8, #7
   12864:	cmp	r9, #100	; 0x64
   12868:	bcc	12844 <main@@Base+0x2ac>
   1286c:	ldr	r7, [sp, #24]
   12870:	mov	r4, #0
   12874:	mov	r0, r5
   12878:	mov	r1, r6
   1287c:	mov	r2, #1000	; 0x3e8
   12880:	bl	12400 <memcmp@plt>
   12884:	cmp	r0, #0
   12888:	bne	12ab8 <main@@Base+0x520>
   1288c:	add	r4, r4, #1
   12890:	add	r5, r5, #1000	; 0x3e8
   12894:	cmp	r4, #100	; 0x64
   12898:	bcc	12874 <main@@Base+0x2dc>
   1289c:	ldr	r2, [sp, #20]
   128a0:	add	r7, r7, #4
   128a4:	add	r2, r2, #1
   128a8:	cmp	r2, #1000	; 0x3e8
   128ac:	bcc	12798 <main@@Base+0x200>
   128b0:	ldr	r0, [sp, #8]
   128b4:	ldr	r7, [sp]
   128b8:	add	r0, r0, #1
   128bc:	cmp	r0, #10
   128c0:	bcc	126c8 <main@@Base+0x130>
   128c4:	sub	r0, fp, #72	; 0x48
   128c8:	mov	r1, #0
   128cc:	bl	12418 <gettimeofday@plt>
   128d0:	movw	r0, #42072	; 0xa458
   128d4:	movt	r0, #2
   128d8:	ldr	r6, [r0]
   128dc:	cmp	r6, #0
   128e0:	beq	128f0 <main@@Base+0x358>
   128e4:	ldr	r9, [r0, #4]
   128e8:	ldr	r8, [fp, #-72]	; 0xffffffb8
   128ec:	b	12900 <main@@Base+0x368>
   128f0:	ldr	r6, [fp, #-72]	; 0xffffffb8
   128f4:	ldr	r9, [fp, #-68]	; 0xffffffbc
   128f8:	mov	r8, r6
   128fc:	stm	r0, {r6, r9}
   12900:	ldr	r5, [fp, #-68]	; 0xffffffbc
   12904:	ldr	r4, [fp, #-76]	; 0xffffffb4
   12908:	movw	r0, #34277	; 0x85e5
   1290c:	movw	r1, #33255	; 0x81e7
   12910:	movt	r0, #1
   12914:	movt	r1, #1
   12918:	bl	123c4 <printf@plt>
   1291c:	sub	r1, r5, r9
   12920:	sub	r0, r8, r6
   12924:	vmov	s0, r1
   12928:	vmov	s2, r0
   1292c:	movw	r0, #34292	; 0x85f4
   12930:	vcvt.f64.s32	d16, s0
   12934:	vcvt.f64.s32	d17, s2
   12938:	movt	r0, #1
   1293c:	vdiv.f64	d16, d16, d8
   12940:	vadd.f64	d16, d16, d17
   12944:	vsub.f64	d9, d16, d9
   12948:	vmov	r2, r3, d9
   1294c:	bl	123c4 <printf@plt>
   12950:	movw	r0, #34316	; 0x860c
   12954:	mov	r1, #10
   12958:	movt	r0, #1
   1295c:	bl	123c4 <printf@plt>
   12960:	movw	r0, #34332	; 0x861c
   12964:	mov	r1, r4
   12968:	movt	r0, #1
   1296c:	bl	123c4 <printf@plt>
   12970:	vmov	s0, r4
   12974:	vmov.f64	d10, #36	; 0x41200000  10.0
   12978:	movw	r0, #34351	; 0x862f
   1297c:	vcvt.f64.u32	d16, s0
   12980:	movt	r0, #1
   12984:	vmul.f64	d16, d16, d10
   12988:	vdiv.f64	d16, d16, d8
   1298c:	vdiv.f64	d16, d16, d9
   12990:	vmov	r2, r3, d16
   12994:	bl	123c4 <printf@plt>
   12998:	movw	r0, #34375	; 0x8647
   1299c:	vdiv.f64	d16, d10, d9
   129a0:	vmov	r2, r3, d16
   129a4:	movt	r0, #1
   129a8:	bl	123c4 <printf@plt>
   129ac:	vldr	d17, [pc, #500]	; 12ba8 <main@@Base+0x610>
   129b0:	vldr	d18, [pc, #504]	; 12bb0 <main@@Base+0x618>
   129b4:	vmul.f64	d16, d9, d17
   129b8:	vdiv.f64	d16, d16, d10
   129bc:	vcmpe.f64	d16, d18
   129c0:	vmrs	APSR_nzcv, fpscr
   129c4:	bpl	129d8 <main@@Base+0x440>
   129c8:	movw	r0, #34408	; 0x8668
   129cc:	vmov	r2, r3, d16
   129d0:	movt	r0, #1
   129d4:	b	12a28 <main@@Base+0x490>
   129d8:	vcmpe.f64	d16, d8
   129dc:	vmrs	APSR_nzcv, fpscr
   129e0:	bpl	129f8 <main@@Base+0x460>
   129e4:	movw	r0, #34432	; 0x8680
   129e8:	vdiv.f64	d16, d16, d18
   129ec:	vmov	r2, r3, d16
   129f0:	movt	r0, #1
   129f4:	b	12a28 <main@@Base+0x490>
   129f8:	vcmpe.f64	d16, d17
   129fc:	vmrs	APSR_nzcv, fpscr
   12a00:	bpl	12a18 <main@@Base+0x480>
   12a04:	movw	r0, #34456	; 0x8698
   12a08:	vdiv.f64	d16, d16, d8
   12a0c:	vmov	r2, r3, d16
   12a10:	movt	r0, #1
   12a14:	b	12a28 <main@@Base+0x490>
   12a18:	movw	r0, #34480	; 0x86b0
   12a1c:	vdiv.f64	d16, d16, d17
   12a20:	vmov	r2, r3, d16
   12a24:	movt	r0, #1
   12a28:	bl	123c4 <printf@plt>
   12a2c:	mov	r4, #0
   12a30:	add	r0, sp, #28
   12a34:	bl	13554 <flatcc_builder_clear@@Base>
   12a38:	mov	r0, r7
   12a3c:	bl	123dc <free@plt>
   12a40:	cmp	r4, #0
   12a44:	beq	12a54 <main@@Base+0x4bc>
   12a48:	movw	r0, #34512	; 0x86d0
   12a4c:	movt	r0, #1
   12a50:	bl	12424 <puts@plt>
   12a54:	mov	r0, r4
   12a58:	sub	sp, fp, #56	; 0x38
   12a5c:	vpop	{d8-d10}
   12a60:	add	sp, sp, #4
   12a64:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12a68:	andeq	r0, r0, r0
   12a6c:	smlawbmi	lr, r0, r4, r8
   12a70:	movw	r0, #34078	; 0x851e
   12a74:	mov	r1, r9
   12a78:	mov	r2, r4
   12a7c:	movt	r0, #1
   12a80:	bl	123c4 <printf@plt>
   12a84:	ldr	r0, [sp]
   12a88:	sub	r1, r8, r0
   12a8c:	movw	r0, #34110	; 0x853e
   12a90:	movt	r0, #1
   12a94:	bl	123c4 <printf@plt>
   12a98:	movw	r0, #39624	; 0x9ac8
   12a9c:	movw	r1, #33157	; 0x8185
   12aa0:	movw	r3, #34013	; 0x84dd
   12aa4:	mov	r2, #85	; 0x55
   12aa8:	movt	r0, #1
   12aac:	movt	r1, #1
   12ab0:	movt	r3, #1
   12ab4:	bl	1249c <__assert_fail@plt>
   12ab8:	movw	r0, #39624	; 0x9ac8
   12abc:	movw	r1, #33157	; 0x8185
   12ac0:	movw	r3, #34013	; 0x84dd
   12ac4:	mov	r2, #91	; 0x5b
   12ac8:	movt	r0, #1
   12acc:	movt	r1, #1
   12ad0:	movt	r3, #1
   12ad4:	bl	1249c <__assert_fail@plt>
   12ad8:	movw	r0, #33980	; 0x84bc
   12adc:	movt	r0, #1
   12ae0:	b	12b0c <main@@Base+0x574>
   12ae4:	movw	r0, #39624	; 0x9ac8
   12ae8:	movw	r1, #33157	; 0x8185
   12aec:	movw	r3, #34013	; 0x84dd
   12af0:	mov	r2, #78	; 0x4e
   12af4:	movt	r0, #1
   12af8:	movt	r1, #1
   12afc:	movt	r3, #1
   12b00:	bl	1249c <__assert_fail@plt>
   12b04:	movw	r0, #33766	; 0x83e6
   12b08:	movt	r0, #1
   12b0c:	movw	r1, #33804	; 0x840c
   12b10:	movw	r3, #33899	; 0x846b
   12b14:	movw	r2, #699	; 0x2bb
   12b18:	movt	r1, #1
   12b1c:	movt	r3, #1
   12b20:	bl	1249c <__assert_fail@plt>
   12b24:	movw	r0, #34123	; 0x854b
   12b28:	movw	r1, #33804	; 0x840c
   12b2c:	movw	r3, #34178	; 0x8582
   12b30:	movw	r2, #693	; 0x2b5
   12b34:	movt	r0, #1
   12b38:	movt	r1, #1
   12b3c:	movt	r3, #1
   12b40:	bl	1249c <__assert_fail@plt>
   12b44:	movw	r0, #39624	; 0x9ac8
   12b48:	movw	r1, #33157	; 0x8185
   12b4c:	movw	r3, #34013	; 0x84dd
   12b50:	mov	r2, #74	; 0x4a
   12b54:	movt	r0, #1
   12b58:	movt	r1, #1
   12b5c:	movt	r3, #1
   12b60:	bl	1249c <__assert_fail@plt>
   12b64:	movw	r0, #33148	; 0x817c
   12b68:	movw	r1, #33157	; 0x8185
   12b6c:	movw	r3, #33232	; 0x81d0
   12b70:	mov	r2, #143	; 0x8f
   12b74:	movt	r0, #1
   12b78:	movt	r1, #1
   12b7c:	movt	r3, #1
   12b80:	bl	1249c <__assert_fail@plt>
   12b84:	movw	r0, #33148	; 0x817c
   12b88:	movw	r1, #33157	; 0x8185
   12b8c:	movw	r3, #33232	; 0x81d0
   12b90:	mov	r2, #139	; 0x8b
   12b94:	movt	r0, #1
   12b98:	movt	r1, #1
   12b9c:	movt	r3, #1
   12ba0:	bl	1249c <__assert_fail@plt>
   12ba4:	nop	{0}
   12ba8:	andeq	r0, r0, r0
   12bac:	bicmi	ip, sp, r5, ror #26
   12bb0:	andeq	r0, r0, r0
   12bb4:	addmi	r4, pc, r0
   12bb8:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   12bbc:	add	fp, sp, #24
   12bc0:	mov	r4, r0
   12bc4:	bl	13548 <flatcc_builder_reset@@Base>
   12bc8:	movw	r1, #33343	; 0x823f
   12bcc:	mov	r0, r4
   12bd0:	mov	r2, #0
   12bd4:	mov	r3, #0
   12bd8:	movt	r1, #1
   12bdc:	bl	13ec8 <flatcc_builder_start_buffer@@Base>
   12be0:	cmp	r0, #0
   12be4:	bne	12bf4 <main@@Base+0x65c>
   12be8:	mov	r0, r4
   12bec:	mov	r1, #36	; 0x24
   12bf0:	bl	154c0 <flatcc_builder_start_table@@Base>
   12bf4:	movw	r1, #33135	; 0x816f
   12bf8:	mov	r0, r4
   12bfc:	movt	r1, #1
   12c00:	bl	17570 <flatcc_builder_create_string_str@@Base>
   12c04:	cmp	r0, #0
   12c08:	beq	12c24 <main@@Base+0x68c>
   12c0c:	mov	r5, r0
   12c10:	mov	r0, r4
   12c14:	mov	r1, #3
   12c18:	bl	166a0 <flatcc_builder_table_add_offset@@Base>
   12c1c:	cmp	r0, #0
   12c20:	strne	r5, [r0]
   12c24:	mov	r0, r4
   12c28:	bl	14f94 <flatcc_builder_start_offset_vector@@Base>
   12c2c:	movw	r5, #33419	; 0x828b
   12c30:	movw	r6, #41072	; 0xa070
   12c34:	movw	r8, #34504	; 0x86c8
   12c38:	mov	r9, #0
   12c3c:	movt	r5, #1
   12c40:	movt	r6, #2
   12c44:	movt	r8, #1
   12c48:	mov	r0, r4
   12c4c:	mov	r1, #36	; 0x24
   12c50:	bl	154c0 <flatcc_builder_start_table@@Base>
   12c54:	mov	r0, r4
   12c58:	bl	15324 <flatcc_builder_start_string@@Base>
   12c5c:	mov	r7, #100	; 0x64
   12c60:	mov	r0, r4
   12c64:	mov	r1, r5
   12c68:	mov	r2, #7
   12c6c:	bl	14b94 <flatcc_builder_append_string@@Base>
   12c70:	subs	r7, r7, #1
   12c74:	bne	12c60 <main@@Base+0x6c8>
   12c78:	mov	r0, r4
   12c7c:	bl	175d8 <flatcc_builder_end_string@@Base>
   12c80:	cmp	r0, #0
   12c84:	beq	12ca0 <main@@Base+0x708>
   12c88:	mov	r7, r0
   12c8c:	mov	r0, r4
   12c90:	mov	r1, #3
   12c94:	bl	166a0 <flatcc_builder_table_add_offset@@Base>
   12c98:	cmp	r0, #0
   12c9c:	strne	r7, [r0]
   12ca0:	mov	r0, r4
   12ca4:	mov	r1, #1
   12ca8:	mov	r2, #1
   12cac:	mvn	r3, #0
   12cb0:	bl	14f08 <flatcc_builder_start_vector@@Base>
   12cb4:	mov	r7, #100	; 0x64
   12cb8:	mov	r0, r4
   12cbc:	mov	r1, r6
   12cc0:	mov	r2, #1000	; 0x3e8
   12cc4:	bl	145fc <flatcc_builder_append_vector@@Base>
   12cc8:	subs	r7, r7, #1
   12ccc:	bne	12cb8 <main@@Base+0x720>
   12cd0:	mov	r0, r4
   12cd4:	bl	16188 <flatcc_builder_end_vector@@Base>
   12cd8:	cmp	r0, #0
   12cdc:	beq	12cf8 <main@@Base+0x760>
   12ce0:	mov	r7, r0
   12ce4:	mov	r0, r4
   12ce8:	mov	r1, #5
   12cec:	bl	166a0 <flatcc_builder_table_add_offset@@Base>
   12cf0:	cmp	r0, #0
   12cf4:	strne	r7, [r0]
   12cf8:	mov	r0, r4
   12cfc:	mov	r1, r8
   12d00:	mov	r2, #1
   12d04:	bl	15de0 <flatcc_builder_check_required@@Base>
   12d08:	cmp	r0, #0
   12d0c:	beq	12d94 <main@@Base+0x7fc>
   12d10:	mov	r0, r4
   12d14:	bl	15e70 <flatcc_builder_end_table@@Base>
   12d18:	cmp	r0, #0
   12d1c:	beq	12db4 <main@@Base+0x81c>
   12d20:	mov	r1, r0
   12d24:	mov	r0, r4
   12d28:	bl	1483c <flatcc_builder_offset_vector_push@@Base>
   12d2c:	add	r9, r9, #1
   12d30:	cmp	r9, #1000	; 0x3e8
   12d34:	bcc	12c48 <main@@Base+0x6b0>
   12d38:	mov	r0, r4
   12d3c:	bl	1524c <flatcc_builder_end_offset_vector@@Base>
   12d40:	cmp	r0, #0
   12d44:	beq	12dd4 <main@@Base+0x83c>
   12d48:	mov	r5, r0
   12d4c:	mov	r0, r4
   12d50:	mov	r1, #11
   12d54:	bl	166a0 <flatcc_builder_table_add_offset@@Base>
   12d58:	movw	r1, #34504	; 0x86c8
   12d5c:	cmp	r0, #0
   12d60:	mov	r2, #1
   12d64:	strne	r5, [r0]
   12d68:	movt	r1, #1
   12d6c:	mov	r0, r4
   12d70:	bl	15de0 <flatcc_builder_check_required@@Base>
   12d74:	cmp	r0, #0
   12d78:	beq	12d94 <main@@Base+0x7fc>
   12d7c:	mov	r0, r4
   12d80:	bl	15e70 <flatcc_builder_end_table@@Base>
   12d84:	mov	r1, r0
   12d88:	mov	r0, r4
   12d8c:	pop	{r4, r5, r6, r7, r8, r9, fp, lr}
   12d90:	b	140b8 <flatcc_builder_end_buffer@@Base>
   12d94:	movw	r0, #33427	; 0x8293
   12d98:	movw	r1, #33589	; 0x8335
   12d9c:	movw	r3, #33685	; 0x8395
   12da0:	mov	r2, #235	; 0xeb
   12da4:	movt	r0, #1
   12da8:	movt	r1, #1
   12dac:	movt	r3, #1
   12db0:	bl	1249c <__assert_fail@plt>
   12db4:	movw	r0, #33348	; 0x8244
   12db8:	movw	r1, #33157	; 0x8185
   12dbc:	movw	r3, #33350	; 0x8246
   12dc0:	mov	r2, #42	; 0x2a
   12dc4:	movt	r0, #1
   12dc8:	movt	r1, #1
   12dcc:	movt	r3, #1
   12dd0:	bl	1249c <__assert_fail@plt>
   12dd4:	movw	r0, #33296	; 0x8210
   12dd8:	movw	r1, #33157	; 0x8185
   12ddc:	movw	r3, #33299	; 0x8213
   12de0:	mov	r2, #56	; 0x38
   12de4:	movt	r0, #1
   12de8:	movt	r1, #1
   12dec:	movt	r3, #1
   12df0:	bl	1249c <__assert_fail@plt>

00012df4 <flatcc_builder_default_alloc@@Base>:
   12df4:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   12df8:	add	fp, sp, #24
   12dfc:	mov	r4, r1
   12e00:	cmp	r2, #0
   12e04:	beq	12e4c <flatcc_builder_default_alloc@@Base+0x58>
   12e08:	ldr	r0, [fp, #8]
   12e0c:	mov	r8, r3
   12e10:	sub	r1, r0, #1
   12e14:	cmp	r1, #6
   12e18:	bhi	12e78 <flatcc_builder_default_alloc@@Base+0x84>
   12e1c:	add	r3, pc, #4
   12e20:	mov	r0, #256	; 0x100
   12e24:	ldr	pc, [r3, r1, lsl #2]
   12e28:	andeq	r2, r1, ip, lsl #29
   12e2c:	andeq	r2, r1, r8, ror lr
   12e30:	andeq	r2, r1, r8, ror lr
   12e34:	andeq	r2, r1, r4, asr #28
   12e38:	andeq	r2, r1, r0, lsl #29
   12e3c:	andeq	r2, r1, r8, ror lr
   12e40:	andeq	r2, r1, r8, lsl #29
   12e44:	mov	r0, #288	; 0x120
   12e48:	b	12e8c <flatcc_builder_default_alloc@@Base+0x98>
   12e4c:	ldr	r0, [r4]
   12e50:	cmp	r0, #0
   12e54:	moveq	r6, #0
   12e58:	moveq	r0, r6
   12e5c:	popeq	{r4, r5, r6, r7, r8, sl, fp, pc}
   12e60:	bl	123dc <free@plt>
   12e64:	mov	r6, #0
   12e68:	mov	r0, r6
   12e6c:	str	r6, [r4]
   12e70:	str	r6, [r4, #4]
   12e74:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   12e78:	mov	r0, #32
   12e7c:	b	12e8c <flatcc_builder_default_alloc@@Base+0x98>
   12e80:	mov	r0, r2
   12e84:	b	12e8c <flatcc_builder_default_alloc@@Base+0x98>
   12e88:	mov	r0, #64	; 0x40
   12e8c:	mov	r7, r0
   12e90:	lsl	r0, r0, #1
   12e94:	cmp	r7, r2
   12e98:	bcc	12e8c <flatcc_builder_default_alloc@@Base+0x98>
   12e9c:	ldr	r0, [r4, #4]
   12ea0:	mov	r6, #0
   12ea4:	cmp	r0, r2
   12ea8:	lsrcs	r0, r0, #1
   12eac:	cmpcs	r0, r7
   12eb0:	bcs	12ee8 <flatcc_builder_default_alloc@@Base+0xf4>
   12eb4:	ldr	r0, [r4]
   12eb8:	mov	r1, r7
   12ebc:	bl	1240c <realloc@plt>
   12ec0:	cmp	r0, #0
   12ec4:	mvneq	r6, #0
   12ec8:	moveq	r0, r6
   12ecc:	popeq	{r4, r5, r6, r7, r8, sl, fp, pc}
   12ed0:	cmp	r8, #0
   12ed4:	mov	r5, r0
   12ed8:	ldrne	r1, [r4, #4]
   12edc:	cmpne	r7, r1
   12ee0:	bhi	12ef0 <flatcc_builder_default_alloc@@Base+0xfc>
   12ee4:	stm	r4, {r5, r7}
   12ee8:	mov	r0, r6
   12eec:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   12ef0:	add	r0, r5, r1
   12ef4:	sub	r2, r7, r1
   12ef8:	mov	r1, #0
   12efc:	bl	1246c <memset@plt>
   12f00:	b	12ee4 <flatcc_builder_default_alloc@@Base+0xf0>

00012f04 <flatcc_builder_flush_vtable_cache@@Base>:
   12f04:	push	{r4, r5, fp, lr}
   12f08:	add	fp, sp, #8
   12f0c:	mov	r4, r0
   12f10:	ldr	r0, [r0, #116]	; 0x74
   12f14:	cmp	r0, #0
   12f18:	popeq	{r4, r5, fp, pc}
   12f1c:	ldr	r0, [r4, #92]	; 0x5c
   12f20:	ldr	r2, [r4, #96]	; 0x60
   12f24:	mov	r1, #0
   12f28:	mov	r5, #0
   12f2c:	bl	1246c <memset@plt>
   12f30:	mov	r0, #16
   12f34:	str	r5, [r4, #120]	; 0x78
   12f38:	str	r0, [r4, #124]	; 0x7c
   12f3c:	pop	{r4, r5, fp, pc}

00012f40 <flatcc_builder_custom_init@@Base>:
   12f40:	push	{r4, r5, r6, r7, fp, lr}
   12f44:	add	fp, sp, #16
   12f48:	mov	r6, r2
   12f4c:	mov	r7, r1
   12f50:	mov	r1, #0
   12f54:	mov	r2, #232	; 0xe8
   12f58:	mov	r5, r3
   12f5c:	mov	r4, r0
   12f60:	bl	1246c <memset@plt>
   12f64:	ldr	r0, [fp, #8]
   12f68:	cmp	r7, #0
   12f6c:	bne	12f84 <flatcc_builder_custom_init@@Base+0x44>
   12f70:	movw	r7, #31904	; 0x7ca0
   12f74:	mov	r1, #1
   12f78:	add	r6, r4, #188	; 0xbc
   12f7c:	movt	r7, #1
   12f80:	str	r1, [r4, #184]	; 0xb8
   12f84:	movw	r1, #11764	; 0x2df4
   12f88:	cmp	r5, #0
   12f8c:	str	r6, [r4, #36]	; 0x24
   12f90:	str	r0, [r4, #40]	; 0x28
   12f94:	mov	r0, #0
   12f98:	str	r7, [r4, #44]	; 0x2c
   12f9c:	movt	r1, #1
   12fa0:	movne	r1, r5
   12fa4:	str	r1, [r4, #48]	; 0x30
   12fa8:	pop	{r4, r5, r6, r7, fp, pc}

00012fac <flatcc_builder_init@@Base>:
   12fac:	push	{r4, r5, fp, lr}
   12fb0:	add	fp, sp, #8
   12fb4:	mov	r1, #0
   12fb8:	mov	r2, #232	; 0xe8
   12fbc:	mov	r4, r0
   12fc0:	mov	r5, #0
   12fc4:	bl	1246c <memset@plt>
   12fc8:	mov	r0, #1
   12fcc:	movw	r2, #31904	; 0x7ca0
   12fd0:	add	r1, r4, #188	; 0xbc
   12fd4:	str	r0, [r4, #184]	; 0xb8
   12fd8:	movw	r0, #11764	; 0x2df4
   12fdc:	movt	r2, #1
   12fe0:	str	r1, [r4, #36]	; 0x24
   12fe4:	str	r5, [r4, #40]	; 0x28
   12fe8:	movt	r0, #1
   12fec:	str	r2, [r4, #44]	; 0x2c
   12ff0:	str	r0, [r4, #48]	; 0x30
   12ff4:	mov	r0, #0
   12ff8:	pop	{r4, r5, fp, pc}

00012ffc <flatcc_builder_custom_reset@@Base>:
   12ffc:	push	{r4, r5, r6, sl, fp, lr}
   13000:	add	fp, sp, #16
   13004:	sub	sp, sp, #8
   13008:	mov	r5, r1
   1300c:	mov	r4, r0
   13010:	cmp	r2, #0
   13014:	beq	13074 <flatcc_builder_custom_reset@@Base+0x78>
   13018:	mov	r1, r4
   1301c:	ldr	r0, [r1, #52]!	; 0x34
   13020:	cmp	r0, #0
   13024:	beq	130a0 <flatcc_builder_custom_reset@@Base+0xa4>
   13028:	ldr	r0, [r4, #40]	; 0x28
   1302c:	ldr	r6, [r4, #48]	; 0x30
   13030:	mov	r2, #0
   13034:	mov	r3, #1
   13038:	str	r2, [sp]
   1303c:	mov	r2, #1
   13040:	blx	r6
   13044:	mvn	r6, #0
   13048:	cmp	r0, #0
   1304c:	bne	13354 <flatcc_builder_custom_reset@@Base+0x358>
   13050:	ldr	r0, [r4, #52]	; 0x34
   13054:	ldr	r2, [r4, #56]	; 0x38
   13058:	mov	r1, #0
   1305c:	bl	1246c <memset@plt>
   13060:	mov	r1, r4
   13064:	ldr	r0, [r1, #60]!	; 0x3c
   13068:	cmp	r0, #0
   1306c:	bne	130bc <flatcc_builder_custom_reset@@Base+0xc0>
   13070:	b	13108 <flatcc_builder_custom_reset@@Base+0x10c>
   13074:	ldr	r0, [r4, #52]	; 0x34
   13078:	ldr	r2, [r4, #56]	; 0x38
   1307c:	cmp	r0, #0
   13080:	beq	13170 <flatcc_builder_custom_reset@@Base+0x174>
   13084:	mov	r1, #0
   13088:	bl	1246c <memset@plt>
   1308c:	ldr	r0, [r4, #60]	; 0x3c
   13090:	ldr	r2, [r4, #64]	; 0x40
   13094:	cmp	r0, #0
   13098:	bne	13188 <flatcc_builder_custom_reset@@Base+0x18c>
   1309c:	b	131a4 <flatcc_builder_custom_reset@@Base+0x1a8>
   130a0:	ldr	r0, [r4, #56]	; 0x38
   130a4:	cmp	r0, #0
   130a8:	bne	13528 <flatcc_builder_custom_reset@@Base+0x52c>
   130ac:	mov	r1, r4
   130b0:	ldr	r0, [r1, #60]!	; 0x3c
   130b4:	cmp	r0, #0
   130b8:	beq	13108 <flatcc_builder_custom_reset@@Base+0x10c>
   130bc:	ldr	r0, [r4, #40]	; 0x28
   130c0:	ldr	r6, [r4, #48]	; 0x30
   130c4:	mov	r2, #1
   130c8:	mov	r3, #1
   130cc:	str	r2, [sp]
   130d0:	mov	r2, #1
   130d4:	blx	r6
   130d8:	mvn	r6, #0
   130dc:	cmp	r0, #0
   130e0:	bne	13354 <flatcc_builder_custom_reset@@Base+0x358>
   130e4:	ldr	r0, [r4, #60]	; 0x3c
   130e8:	ldr	r2, [r4, #64]	; 0x40
   130ec:	mov	r1, #0
   130f0:	bl	1246c <memset@plt>
   130f4:	mov	r1, r4
   130f8:	ldr	r0, [r1, #68]!	; 0x44
   130fc:	cmp	r0, #0
   13100:	bne	13124 <flatcc_builder_custom_reset@@Base+0x128>
   13104:	b	13360 <flatcc_builder_custom_reset@@Base+0x364>
   13108:	ldr	r0, [r4, #64]	; 0x40
   1310c:	cmp	r0, #0
   13110:	bne	13528 <flatcc_builder_custom_reset@@Base+0x52c>
   13114:	mov	r1, r4
   13118:	ldr	r0, [r1, #68]!	; 0x44
   1311c:	cmp	r0, #0
   13120:	beq	13360 <flatcc_builder_custom_reset@@Base+0x364>
   13124:	ldr	r0, [r4, #40]	; 0x28
   13128:	ldr	r6, [r4, #48]	; 0x30
   1312c:	mov	r2, #2
   13130:	mov	r3, #1
   13134:	str	r2, [sp]
   13138:	mov	r2, #1
   1313c:	blx	r6
   13140:	mvn	r6, #0
   13144:	cmp	r0, #0
   13148:	bne	13354 <flatcc_builder_custom_reset@@Base+0x358>
   1314c:	ldr	r0, [r4, #68]	; 0x44
   13150:	ldr	r2, [r4, #72]	; 0x48
   13154:	mov	r1, #0
   13158:	bl	1246c <memset@plt>
   1315c:	mov	r1, r4
   13160:	ldr	r0, [r1, #76]!	; 0x4c
   13164:	cmp	r0, #0
   13168:	bne	1337c <flatcc_builder_custom_reset@@Base+0x380>
   1316c:	b	133c8 <flatcc_builder_custom_reset@@Base+0x3cc>
   13170:	cmp	r2, #0
   13174:	bne	13528 <flatcc_builder_custom_reset@@Base+0x52c>
   13178:	ldr	r0, [r4, #60]	; 0x3c
   1317c:	ldr	r2, [r4, #64]	; 0x40
   13180:	cmp	r0, #0
   13184:	beq	131a4 <flatcc_builder_custom_reset@@Base+0x1a8>
   13188:	mov	r1, #0
   1318c:	bl	1246c <memset@plt>
   13190:	ldr	r0, [r4, #68]	; 0x44
   13194:	ldr	r2, [r4, #72]	; 0x48
   13198:	cmp	r0, #0
   1319c:	bne	131bc <flatcc_builder_custom_reset@@Base+0x1c0>
   131a0:	b	131d8 <flatcc_builder_custom_reset@@Base+0x1dc>
   131a4:	cmp	r2, #0
   131a8:	bne	13528 <flatcc_builder_custom_reset@@Base+0x52c>
   131ac:	ldr	r0, [r4, #68]	; 0x44
   131b0:	ldr	r2, [r4, #72]	; 0x48
   131b4:	cmp	r0, #0
   131b8:	beq	131d8 <flatcc_builder_custom_reset@@Base+0x1dc>
   131bc:	mov	r1, #0
   131c0:	bl	1246c <memset@plt>
   131c4:	ldr	r0, [r4, #76]	; 0x4c
   131c8:	ldr	r2, [r4, #80]	; 0x50
   131cc:	cmp	r0, #0
   131d0:	bne	131f0 <flatcc_builder_custom_reset@@Base+0x1f4>
   131d4:	b	1320c <flatcc_builder_custom_reset@@Base+0x210>
   131d8:	cmp	r2, #0
   131dc:	bne	13528 <flatcc_builder_custom_reset@@Base+0x52c>
   131e0:	ldr	r0, [r4, #76]	; 0x4c
   131e4:	ldr	r2, [r4, #80]	; 0x50
   131e8:	cmp	r0, #0
   131ec:	beq	1320c <flatcc_builder_custom_reset@@Base+0x210>
   131f0:	mov	r1, #0
   131f4:	bl	1246c <memset@plt>
   131f8:	ldr	r0, [r4, #84]	; 0x54
   131fc:	ldr	r2, [r4, #88]	; 0x58
   13200:	cmp	r0, #0
   13204:	bne	13224 <flatcc_builder_custom_reset@@Base+0x228>
   13208:	b	13240 <flatcc_builder_custom_reset@@Base+0x244>
   1320c:	cmp	r2, #0
   13210:	bne	13528 <flatcc_builder_custom_reset@@Base+0x52c>
   13214:	ldr	r0, [r4, #84]	; 0x54
   13218:	ldr	r2, [r4, #88]	; 0x58
   1321c:	cmp	r0, #0
   13220:	beq	13240 <flatcc_builder_custom_reset@@Base+0x244>
   13224:	mov	r1, #0
   13228:	bl	1246c <memset@plt>
   1322c:	ldr	r0, [r4, #92]	; 0x5c
   13230:	ldr	r2, [r4, #96]	; 0x60
   13234:	cmp	r0, #0
   13238:	bne	13258 <flatcc_builder_custom_reset@@Base+0x25c>
   1323c:	b	13274 <flatcc_builder_custom_reset@@Base+0x278>
   13240:	cmp	r2, #0
   13244:	bne	13528 <flatcc_builder_custom_reset@@Base+0x52c>
   13248:	ldr	r0, [r4, #92]	; 0x5c
   1324c:	ldr	r2, [r4, #96]	; 0x60
   13250:	cmp	r0, #0
   13254:	beq	13274 <flatcc_builder_custom_reset@@Base+0x278>
   13258:	mov	r1, #0
   1325c:	bl	1246c <memset@plt>
   13260:	ldr	r0, [r4, #100]	; 0x64
   13264:	ldr	r2, [r4, #104]	; 0x68
   13268:	cmp	r0, #0
   1326c:	bne	1328c <flatcc_builder_custom_reset@@Base+0x290>
   13270:	b	132a8 <flatcc_builder_custom_reset@@Base+0x2ac>
   13274:	cmp	r2, #0
   13278:	bne	13528 <flatcc_builder_custom_reset@@Base+0x52c>
   1327c:	ldr	r0, [r4, #100]	; 0x64
   13280:	ldr	r2, [r4, #104]	; 0x68
   13284:	cmp	r0, #0
   13288:	beq	132a8 <flatcc_builder_custom_reset@@Base+0x2ac>
   1328c:	mov	r1, #0
   13290:	bl	1246c <memset@plt>
   13294:	ldr	r0, [r4, #108]	; 0x6c
   13298:	ldr	r2, [r4, #112]	; 0x70
   1329c:	cmp	r0, #0
   132a0:	bne	132c0 <flatcc_builder_custom_reset@@Base+0x2c4>
   132a4:	b	132cc <flatcc_builder_custom_reset@@Base+0x2d0>
   132a8:	cmp	r2, #0
   132ac:	bne	13528 <flatcc_builder_custom_reset@@Base+0x52c>
   132b0:	ldr	r0, [r4, #108]	; 0x6c
   132b4:	ldr	r2, [r4, #112]	; 0x70
   132b8:	cmp	r0, #0
   132bc:	beq	132cc <flatcc_builder_custom_reset@@Base+0x2d0>
   132c0:	mov	r1, #0
   132c4:	bl	1246c <memset@plt>
   132c8:	b	132d4 <flatcc_builder_custom_reset@@Base+0x2d8>
   132cc:	cmp	r2, #0
   132d0:	bne	13528 <flatcc_builder_custom_reset@@Base+0x52c>
   132d4:	mov	r0, #0
   132d8:	vmov.i32	q8, #0	; 0x00000000
   132dc:	mov	r6, #0
   132e0:	str	r0, [r4, #120]	; 0x78
   132e4:	ldr	r1, [r4, #124]	; 0x7c
   132e8:	cmp	r1, #0
   132ec:	movne	r1, #16
   132f0:	strne	r1, [r4, #124]	; 0x7c
   132f4:	add	r1, r4, #148	; 0x94
   132f8:	strh	r0, [r4, #128]	; 0x80
   132fc:	str	r0, [r4, #136]	; 0x88
   13300:	str	r0, [r4, #140]	; 0x8c
   13304:	str	r0, [r4, #32]
   13308:	cmp	r5, #0
   1330c:	vst1.32	{d16-d17}, [r1]
   13310:	ldr	r2, [r4, #60]	; 0x3c
   13314:	ldr	r1, [r4, #52]	; 0x34
   13318:	ldr	r3, [r4, #76]	; 0x4c
   1331c:	str	r2, [r4, #16]
   13320:	str	r0, [r4, #20]
   13324:	str	r0, [r4, #24]
   13328:	movne	r0, #0
   1332c:	str	r3, [r4]
   13330:	str	r1, [r4, #4]
   13334:	strne	r0, [r4, #172]	; 0xac
   13338:	strne	r0, [r4, #176]	; 0xb0
   1333c:	strne	r0, [r4, #180]	; 0xb4
   13340:	ldr	r0, [r4, #184]	; 0xb8
   13344:	cmp	r0, #0
   13348:	beq	13354 <flatcc_builder_custom_reset@@Base+0x358>
   1334c:	add	r0, r4, #188	; 0xbc
   13350:	bl	17b68 <flatcc_emitter_reset@@Base>
   13354:	mov	r0, r6
   13358:	sub	sp, fp, #16
   1335c:	pop	{r4, r5, r6, sl, fp, pc}
   13360:	ldr	r0, [r4, #72]	; 0x48
   13364:	cmp	r0, #0
   13368:	bne	13528 <flatcc_builder_custom_reset@@Base+0x52c>
   1336c:	mov	r1, r4
   13370:	ldr	r0, [r1, #76]!	; 0x4c
   13374:	cmp	r0, #0
   13378:	beq	133c8 <flatcc_builder_custom_reset@@Base+0x3cc>
   1337c:	ldr	r0, [r4, #40]	; 0x28
   13380:	ldr	r6, [r4, #48]	; 0x30
   13384:	mov	r2, #3
   13388:	mov	r3, #1
   1338c:	str	r2, [sp]
   13390:	mov	r2, #1
   13394:	blx	r6
   13398:	mvn	r6, #0
   1339c:	cmp	r0, #0
   133a0:	bne	13354 <flatcc_builder_custom_reset@@Base+0x358>
   133a4:	ldr	r0, [r4, #76]	; 0x4c
   133a8:	ldr	r2, [r4, #80]	; 0x50
   133ac:	mov	r1, #0
   133b0:	bl	1246c <memset@plt>
   133b4:	mov	r1, r4
   133b8:	ldr	r0, [r1, #84]!	; 0x54
   133bc:	cmp	r0, #0
   133c0:	bne	133e4 <flatcc_builder_custom_reset@@Base+0x3e8>
   133c4:	b	13430 <flatcc_builder_custom_reset@@Base+0x434>
   133c8:	ldr	r0, [r4, #80]	; 0x50
   133cc:	cmp	r0, #0
   133d0:	bne	13528 <flatcc_builder_custom_reset@@Base+0x52c>
   133d4:	mov	r1, r4
   133d8:	ldr	r0, [r1, #84]!	; 0x54
   133dc:	cmp	r0, #0
   133e0:	beq	13430 <flatcc_builder_custom_reset@@Base+0x434>
   133e4:	ldr	r0, [r4, #40]	; 0x28
   133e8:	ldr	r6, [r4, #48]	; 0x30
   133ec:	mov	r2, #4
   133f0:	mov	r3, #1
   133f4:	str	r2, [sp]
   133f8:	mov	r2, #1
   133fc:	blx	r6
   13400:	mvn	r6, #0
   13404:	cmp	r0, #0
   13408:	bne	13354 <flatcc_builder_custom_reset@@Base+0x358>
   1340c:	ldr	r0, [r4, #84]	; 0x54
   13410:	ldr	r2, [r4, #88]	; 0x58
   13414:	mov	r1, #0
   13418:	bl	1246c <memset@plt>
   1341c:	ldr	r0, [r4, #92]	; 0x5c
   13420:	ldr	r2, [r4, #96]	; 0x60
   13424:	cmp	r0, #0
   13428:	bne	1344c <flatcc_builder_custom_reset@@Base+0x450>
   1342c:	b	13468 <flatcc_builder_custom_reset@@Base+0x46c>
   13430:	ldr	r0, [r4, #88]	; 0x58
   13434:	cmp	r0, #0
   13438:	bne	13528 <flatcc_builder_custom_reset@@Base+0x52c>
   1343c:	ldr	r0, [r4, #92]	; 0x5c
   13440:	ldr	r2, [r4, #96]	; 0x60
   13444:	cmp	r0, #0
   13448:	beq	13468 <flatcc_builder_custom_reset@@Base+0x46c>
   1344c:	mov	r1, #0
   13450:	bl	1246c <memset@plt>
   13454:	mov	r1, r4
   13458:	ldr	r0, [r1, #100]!	; 0x64
   1345c:	cmp	r0, #0
   13460:	bne	13480 <flatcc_builder_custom_reset@@Base+0x484>
   13464:	b	134cc <flatcc_builder_custom_reset@@Base+0x4d0>
   13468:	cmp	r2, #0
   1346c:	bne	13528 <flatcc_builder_custom_reset@@Base+0x52c>
   13470:	mov	r1, r4
   13474:	ldr	r0, [r1, #100]!	; 0x64
   13478:	cmp	r0, #0
   1347c:	beq	134cc <flatcc_builder_custom_reset@@Base+0x4d0>
   13480:	ldr	r0, [r4, #40]	; 0x28
   13484:	ldr	r6, [r4, #48]	; 0x30
   13488:	mov	r2, #6
   1348c:	mov	r3, #1
   13490:	str	r2, [sp]
   13494:	mov	r2, #1
   13498:	blx	r6
   1349c:	mvn	r6, #0
   134a0:	cmp	r0, #0
   134a4:	bne	13354 <flatcc_builder_custom_reset@@Base+0x358>
   134a8:	ldr	r0, [r4, #100]	; 0x64
   134ac:	ldr	r2, [r4, #104]	; 0x68
   134b0:	mov	r1, #0
   134b4:	bl	1246c <memset@plt>
   134b8:	mov	r1, r4
   134bc:	ldr	r0, [r1, #108]!	; 0x6c
   134c0:	cmp	r0, #0
   134c4:	bne	134e8 <flatcc_builder_custom_reset@@Base+0x4ec>
   134c8:	b	1351c <flatcc_builder_custom_reset@@Base+0x520>
   134cc:	ldr	r0, [r4, #104]	; 0x68
   134d0:	cmp	r0, #0
   134d4:	bne	13528 <flatcc_builder_custom_reset@@Base+0x52c>
   134d8:	mov	r1, r4
   134dc:	ldr	r0, [r1, #108]!	; 0x6c
   134e0:	cmp	r0, #0
   134e4:	beq	1351c <flatcc_builder_custom_reset@@Base+0x520>
   134e8:	ldr	r0, [r4, #40]	; 0x28
   134ec:	ldr	r6, [r4, #48]	; 0x30
   134f0:	mov	r2, #7
   134f4:	mov	r3, #1
   134f8:	str	r2, [sp]
   134fc:	mov	r2, #1
   13500:	blx	r6
   13504:	mvn	r6, #0
   13508:	cmp	r0, #0
   1350c:	bne	13354 <flatcc_builder_custom_reset@@Base+0x358>
   13510:	ldr	r0, [r4, #108]	; 0x6c
   13514:	ldr	r2, [r4, #112]	; 0x70
   13518:	b	132c0 <flatcc_builder_custom_reset@@Base+0x2c4>
   1351c:	ldr	r0, [r4, #112]	; 0x70
   13520:	cmp	r0, #0
   13524:	beq	132d4 <flatcc_builder_custom_reset@@Base+0x2d8>
   13528:	movw	r0, #35088	; 0x8910
   1352c:	movw	r1, #35106	; 0x8922
   13530:	movw	r3, #35176	; 0x8968
   13534:	movw	r2, #434	; 0x1b2
   13538:	movt	r0, #1
   1353c:	movt	r1, #1
   13540:	movt	r3, #1
   13544:	bl	1249c <__assert_fail@plt>

00013548 <flatcc_builder_reset@@Base>:
   13548:	mov	r1, #0
   1354c:	mov	r2, #0
   13550:	b	12ffc <flatcc_builder_custom_reset@@Base>

00013554 <flatcc_builder_clear@@Base>:
   13554:	push	{r4, sl, fp, lr}
   13558:	add	fp, sp, #8
   1355c:	sub	sp, sp, #8
   13560:	mov	r4, r0
   13564:	ldr	r0, [r0, #40]	; 0x28
   13568:	mov	r1, #0
   1356c:	mov	r2, #0
   13570:	mov	r3, #0
   13574:	ldr	ip, [r4, #48]	; 0x30
   13578:	str	r1, [sp]
   1357c:	add	r1, r4, #52	; 0x34
   13580:	blx	ip
   13584:	ldr	r0, [r4, #40]	; 0x28
   13588:	ldr	ip, [r4, #48]	; 0x30
   1358c:	mov	r1, #1
   13590:	mov	r2, #0
   13594:	mov	r3, #0
   13598:	str	r1, [sp]
   1359c:	add	r1, r4, #60	; 0x3c
   135a0:	blx	ip
   135a4:	ldr	r0, [r4, #40]	; 0x28
   135a8:	ldr	ip, [r4, #48]	; 0x30
   135ac:	mov	r1, #2
   135b0:	mov	r2, #0
   135b4:	mov	r3, #0
   135b8:	str	r1, [sp]
   135bc:	add	r1, r4, #68	; 0x44
   135c0:	blx	ip
   135c4:	ldr	r0, [r4, #40]	; 0x28
   135c8:	ldr	ip, [r4, #48]	; 0x30
   135cc:	mov	r1, #3
   135d0:	mov	r2, #0
   135d4:	mov	r3, #0
   135d8:	str	r1, [sp]
   135dc:	add	r1, r4, #76	; 0x4c
   135e0:	blx	ip
   135e4:	ldr	r0, [r4, #40]	; 0x28
   135e8:	ldr	ip, [r4, #48]	; 0x30
   135ec:	mov	r1, #4
   135f0:	mov	r2, #0
   135f4:	mov	r3, #0
   135f8:	str	r1, [sp]
   135fc:	add	r1, r4, #84	; 0x54
   13600:	blx	ip
   13604:	ldr	r0, [r4, #40]	; 0x28
   13608:	ldr	ip, [r4, #48]	; 0x30
   1360c:	mov	r1, #5
   13610:	mov	r2, #0
   13614:	mov	r3, #0
   13618:	str	r1, [sp]
   1361c:	add	r1, r4, #92	; 0x5c
   13620:	blx	ip
   13624:	ldr	r0, [r4, #40]	; 0x28
   13628:	ldr	ip, [r4, #48]	; 0x30
   1362c:	mov	r1, #6
   13630:	mov	r2, #0
   13634:	mov	r3, #0
   13638:	str	r1, [sp]
   1363c:	add	r1, r4, #100	; 0x64
   13640:	blx	ip
   13644:	ldr	r0, [r4, #40]	; 0x28
   13648:	ldr	ip, [r4, #48]	; 0x30
   1364c:	mov	r1, #7
   13650:	mov	r2, #0
   13654:	mov	r3, #0
   13658:	str	r1, [sp]
   1365c:	add	r1, r4, #108	; 0x6c
   13660:	blx	ip
   13664:	ldr	r0, [r4, #184]	; 0xb8
   13668:	cmp	r0, #0
   1366c:	beq	13678 <flatcc_builder_clear@@Base+0x124>
   13670:	add	r0, r4, #188	; 0xbc
   13674:	bl	17c34 <flatcc_emitter_clear@@Base>
   13678:	mov	r0, r4
   1367c:	mov	r1, #0
   13680:	mov	r2, #232	; 0xe8
   13684:	sub	sp, fp, #8
   13688:	pop	{r4, sl, fp, lr}
   1368c:	b	1246c <memset@plt>

00013690 <flatcc_builder_enter_user_frame_ptr@@Base>:
   13690:	push	{r4, r5, r6, r7, fp, lr}
   13694:	add	fp, sp, #16
   13698:	sub	sp, sp, #8
   1369c:	mov	r4, r0
   136a0:	ldr	r0, [r0, #112]	; 0x70
   136a4:	add	r1, r1, #7
   136a8:	ldr	r7, [r4, #228]	; 0xe4
   136ac:	bic	r5, r1, #3
   136b0:	add	r6, r4, #108	; 0x6c
   136b4:	add	r2, r7, r5
   136b8:	cmp	r2, r0
   136bc:	bls	136e4 <flatcc_builder_enter_user_frame_ptr@@Base+0x54>
   136c0:	ldr	r0, [r4, #40]	; 0x28
   136c4:	ldr	ip, [r4, #48]	; 0x30
   136c8:	mov	r1, #7
   136cc:	mov	r3, #0
   136d0:	str	r1, [sp]
   136d4:	mov	r1, r6
   136d8:	blx	ip
   136dc:	cmp	r0, #0
   136e0:	bne	13738 <flatcc_builder_enter_user_frame_ptr@@Base+0xa8>
   136e4:	ldr	r0, [r6]
   136e8:	adds	r6, r0, r7
   136ec:	beq	13728 <flatcc_builder_enter_user_frame_ptr@@Base+0x98>
   136f0:	mov	r0, r6
   136f4:	mov	r1, #0
   136f8:	mov	r2, r5
   136fc:	bl	1246c <memset@plt>
   13700:	ldr	r0, [r4, #224]	; 0xe0
   13704:	str	r0, [r6], #4
   13708:	ldr	r0, [r4, #228]	; 0xe4
   1370c:	add	r1, r0, #4
   13710:	add	r0, r0, r5
   13714:	str	r1, [r4, #224]	; 0xe0
   13718:	str	r0, [r4, #228]	; 0xe4
   1371c:	mov	r0, r6
   13720:	sub	sp, fp, #16
   13724:	pop	{r4, r5, r6, r7, fp, pc}
   13728:	mov	r6, #0
   1372c:	mov	r0, r6
   13730:	sub	sp, fp, #16
   13734:	pop	{r4, r5, r6, r7, fp, pc}
   13738:	movw	r0, #39624	; 0x9ac8
   1373c:	movw	r1, #35106	; 0x8922
   13740:	movw	r3, #39170	; 0x9902
   13744:	mov	r2, #308	; 0x134
   13748:	movt	r0, #1
   1374c:	movt	r1, #1
   13750:	movt	r3, #1
   13754:	bl	1249c <__assert_fail@plt>

00013758 <flatcc_builder_enter_user_frame@@Base>:
   13758:	push	{r4, r5, r6, r7, fp, lr}
   1375c:	add	fp, sp, #16
   13760:	sub	sp, sp, #8
   13764:	mov	r4, r0
   13768:	ldr	r0, [r0, #112]	; 0x70
   1376c:	add	r1, r1, #7
   13770:	ldr	r7, [r4, #228]	; 0xe4
   13774:	bic	r5, r1, #3
   13778:	add	r6, r4, #108	; 0x6c
   1377c:	add	r2, r7, r5
   13780:	cmp	r2, r0
   13784:	bls	137ac <flatcc_builder_enter_user_frame@@Base+0x54>
   13788:	ldr	r0, [r4, #40]	; 0x28
   1378c:	ldr	ip, [r4, #48]	; 0x30
   13790:	mov	r1, #7
   13794:	mov	r3, #0
   13798:	str	r1, [sp]
   1379c:	mov	r1, r6
   137a0:	blx	ip
   137a4:	cmp	r0, #0
   137a8:	bne	137f4 <flatcc_builder_enter_user_frame@@Base+0x9c>
   137ac:	ldr	r0, [r6]
   137b0:	adds	r6, r0, r7
   137b4:	moveq	r0, #0
   137b8:	subeq	sp, fp, #16
   137bc:	popeq	{r4, r5, r6, r7, fp, pc}
   137c0:	mov	r0, r6
   137c4:	mov	r1, #0
   137c8:	mov	r2, r5
   137cc:	bl	1246c <memset@plt>
   137d0:	ldr	r0, [r4, #224]	; 0xe0
   137d4:	str	r0, [r6]
   137d8:	ldr	r1, [r4, #228]	; 0xe4
   137dc:	add	r0, r1, #4
   137e0:	add	r1, r1, r5
   137e4:	str	r0, [r4, #224]	; 0xe0
   137e8:	str	r1, [r4, #228]	; 0xe4
   137ec:	sub	sp, fp, #16
   137f0:	pop	{r4, r5, r6, r7, fp, pc}
   137f4:	movw	r0, #39624	; 0x9ac8
   137f8:	movw	r1, #35106	; 0x8922
   137fc:	movw	r3, #39170	; 0x9902
   13800:	mov	r2, #308	; 0x134
   13804:	movt	r0, #1
   13808:	movt	r1, #1
   1380c:	movt	r3, #1
   13810:	bl	1249c <__assert_fail@plt>

00013814 <flatcc_builder_exit_user_frame@@Base>:
   13814:	ldr	r1, [r0, #224]	; 0xe0
   13818:	cmp	r1, #0
   1381c:	subne	r2, r1, #4
   13820:	strne	r2, [r0, #228]	; 0xe4
   13824:	ldrne	r2, [r0, #108]	; 0x6c
   13828:	addne	r1, r2, r1
   1382c:	ldrne	r1, [r1, #-4]
   13830:	strne	r1, [r0, #224]	; 0xe0
   13834:	movne	r0, r1
   13838:	bxne	lr
   1383c:	push	{fp, lr}
   13840:	mov	fp, sp
   13844:	movw	r0, #35238	; 0x89a6
   13848:	movw	r1, #35106	; 0x8922
   1384c:	movw	r3, #35263	; 0x89bf
   13850:	movw	r2, #542	; 0x21e
   13854:	movt	r0, #1
   13858:	movt	r1, #1
   1385c:	movt	r3, #1
   13860:	bl	1249c <__assert_fail@plt>

00013864 <flatcc_builder_exit_user_frame_at@@Base>:
   13864:	push	{fp, lr}
   13868:	mov	fp, sp
   1386c:	ldr	r2, [r0, #224]	; 0xe0
   13870:	cmp	r2, r1
   13874:	bcc	138c0 <flatcc_builder_exit_user_frame_at@@Base+0x5c>
   13878:	cmp	r1, #0
   1387c:	str	r1, [r0, #224]	; 0xe0
   13880:	subne	r2, r1, #4
   13884:	strne	r2, [r0, #228]	; 0xe4
   13888:	ldrne	r2, [r0, #108]	; 0x6c
   1388c:	addne	r1, r2, r1
   13890:	ldrne	r1, [r1, #-4]
   13894:	strne	r1, [r0, #224]	; 0xe0
   13898:	movne	r0, r1
   1389c:	popne	{fp, pc}
   138a0:	movw	r0, #35238	; 0x89a6
   138a4:	movw	r1, #35106	; 0x8922
   138a8:	movw	r3, #35263	; 0x89bf
   138ac:	movw	r2, #542	; 0x21e
   138b0:	movt	r0, #1
   138b4:	movt	r1, #1
   138b8:	movt	r3, #1
   138bc:	bl	1249c <__assert_fail@plt>
   138c0:	movw	r0, #35321	; 0x89f9
   138c4:	movw	r1, #35106	; 0x8922
   138c8:	movw	r3, #35352	; 0x8a18
   138cc:	movw	r2, #551	; 0x227
   138d0:	movt	r0, #1
   138d4:	movt	r1, #1
   138d8:	movt	r3, #1
   138dc:	bl	1249c <__assert_fail@plt>

000138e0 <flatcc_builder_get_current_user_frame@@Base>:
   138e0:	ldr	r0, [r0, #224]	; 0xe0
   138e4:	bx	lr

000138e8 <flatcc_builder_get_user_frame_ptr@@Base>:
   138e8:	ldr	r0, [r0, #108]	; 0x6c
   138ec:	add	r0, r0, r1
   138f0:	bx	lr

000138f4 <flatcc_builder_embed_buffer@@Base>:
   138f4:	push	{r4, r5, r6, r7, fp, lr}
   138f8:	add	fp, sp, #16
   138fc:	sub	sp, sp, #88	; 0x58
   13900:	mov	r4, r0
   13904:	ldr	r0, [fp, #8]
   13908:	mov	r5, r3
   1390c:	mov	r7, r2
   13910:	mov	r2, r1
   13914:	sub	r1, fp, #18
   13918:	strh	r0, [fp, #-18]	; 0xffffffee
   1391c:	mov	r0, r4
   13920:	ldr	r3, [r4, #152]	; 0x98
   13924:	cmp	r3, #0
   13928:	movwne	r3, #1
   1392c:	bl	13a64 <flatcc_builder_embed_buffer@@Base+0x170>
   13930:	ldr	r1, [fp, #12]
   13934:	ldrh	r3, [fp, #-18]	; 0xffffffee
   13938:	ldr	r0, [r4, #136]	; 0x88
   1393c:	mov	r2, #0
   13940:	str	r2, [sp, #8]
   13944:	str	r2, [sp, #12]
   13948:	and	r1, r1, #2
   1394c:	sub	r3, r3, #1
   13950:	add	r1, r5, r1, lsl #1
   13954:	sub	r1, r0, r1
   13958:	and	r3, r3, r1
   1395c:	add	r1, r3, r5
   13960:	str	r1, [fp, #-24]	; 0xffffffe8
   13964:	ldr	r1, [r4, #152]	; 0x98
   13968:	cmp	r1, #0
   1396c:	mov	r1, #0
   13970:	beq	13990 <flatcc_builder_embed_buffer@@Base+0x9c>
   13974:	sub	r1, fp, #24
   13978:	mov	r2, #1
   1397c:	str	r1, [sp, #16]
   13980:	mov	r1, #4
   13984:	str	r1, [sp, #8]
   13988:	str	r1, [sp, #20]
   1398c:	str	r2, [sp, #12]
   13990:	cmp	r5, #0
   13994:	beq	139b8 <flatcc_builder_embed_buffer@@Base+0xc4>
   13998:	add	r6, sp, #8
   1399c:	add	r1, r1, r5
   139a0:	add	r6, r6, r2, lsl #3
   139a4:	add	r2, r2, #1
   139a8:	str	r1, [sp, #8]
   139ac:	str	r7, [r6, #8]
   139b0:	str	r5, [r6, #12]
   139b4:	str	r2, [sp, #12]
   139b8:	cmp	r3, #0
   139bc:	beq	139e8 <flatcc_builder_embed_buffer@@Base+0xf4>
   139c0:	add	r7, sp, #8
   139c4:	movw	r6, #34576	; 0x8710
   139c8:	add	r1, r1, r3
   139cc:	add	r7, r7, r2, lsl #3
   139d0:	add	r2, r2, #1
   139d4:	movt	r6, #1
   139d8:	str	r1, [sp, #8]
   139dc:	str	r6, [r7, #8]
   139e0:	str	r3, [r7, #12]
   139e4:	str	r2, [sp, #12]
   139e8:	cmp	r1, #0
   139ec:	ble	13a44 <flatcc_builder_embed_buffer@@Base+0x150>
   139f0:	sub	r5, r0, r1
   139f4:	ldr	r0, [r4, #36]	; 0x24
   139f8:	ldr	r7, [r4, #44]	; 0x2c
   139fc:	str	r1, [sp]
   13a00:	add	r1, sp, #8
   13a04:	add	r1, r1, #8
   13a08:	mov	r3, r5
   13a0c:	blx	r7
   13a10:	cmp	r0, #0
   13a14:	streq	r5, [r4, #136]	; 0x88
   13a18:	moveq	r0, r5
   13a1c:	subeq	sp, fp, #16
   13a20:	popeq	{r4, r5, r6, r7, fp, pc}
   13a24:	movw	r0, #39624	; 0x9ac8
   13a28:	movw	r1, #35106	; 0x8922
   13a2c:	movw	r3, #39303	; 0x9987
   13a30:	movw	r2, #651	; 0x28b
   13a34:	movt	r0, #1
   13a38:	movt	r1, #1
   13a3c:	movt	r3, #1
   13a40:	bl	1249c <__assert_fail@plt>
   13a44:	movw	r0, #39624	; 0x9ac8
   13a48:	movw	r1, #35106	; 0x8922
   13a4c:	movw	r3, #39303	; 0x9987
   13a50:	movw	r2, #647	; 0x287
   13a54:	movt	r0, #1
   13a58:	movt	r1, #1
   13a5c:	movt	r3, #1
   13a60:	bl	1249c <__assert_fail@plt>
   13a64:	push	{r4, sl, fp, lr}
   13a68:	add	fp, sp, #8
   13a6c:	sub	sp, sp, #80	; 0x50
   13a70:	cmp	r2, #0
   13a74:	bne	13a84 <flatcc_builder_embed_buffer@@Base+0x190>
   13a78:	ldrh	r2, [r0, #132]	; 0x84
   13a7c:	cmp	r2, #0
   13a80:	movweq	r2, #1
   13a84:	ldrh	r4, [r1]
   13a88:	cmp	r4, #4
   13a8c:	movwcc	r4, #4
   13a90:	cmpcs	r4, r2
   13a94:	bcs	13aa4 <flatcc_builder_embed_buffer@@Base+0x1b0>
   13a98:	cmp	r4, r2
   13a9c:	movcc	r4, r2
   13aa0:	strh	r4, [r1]
   13aa4:	cmp	r3, #0
   13aa8:	bne	13b1c <flatcc_builder_embed_buffer@@Base+0x228>
   13aac:	ldr	r4, [r0, #140]	; 0x8c
   13ab0:	sub	r1, r2, #1
   13ab4:	ands	r1, r4, r1
   13ab8:	beq	13b1c <flatcc_builder_embed_buffer@@Base+0x228>
   13abc:	movw	r2, #34576	; 0x8710
   13ac0:	cmn	r1, #1
   13ac4:	movt	r2, #1
   13ac8:	str	r2, [sp, #16]
   13acc:	mov	r2, #1
   13ad0:	str	r1, [sp, #8]
   13ad4:	str	r1, [sp, #20]
   13ad8:	str	r2, [sp, #12]
   13adc:	add	r2, r4, r1
   13ae0:	str	r2, [r0, #140]	; 0x8c
   13ae4:	ble	13b24 <flatcc_builder_embed_buffer@@Base+0x230>
   13ae8:	ldr	r2, [r0, #36]	; 0x24
   13aec:	ldr	ip, [r0, #44]	; 0x2c
   13af0:	add	r0, sp, #8
   13af4:	str	r1, [sp]
   13af8:	mov	r3, r4
   13afc:	add	r1, r0, #8
   13b00:	mov	r0, r2
   13b04:	mov	r2, #1
   13b08:	blx	ip
   13b0c:	cmp	r0, #0
   13b10:	bne	13b44 <flatcc_builder_embed_buffer@@Base+0x250>
   13b14:	cmn	r4, #1
   13b18:	beq	13b64 <flatcc_builder_embed_buffer@@Base+0x270>
   13b1c:	sub	sp, fp, #8
   13b20:	pop	{r4, sl, fp, pc}
   13b24:	movw	r0, #39624	; 0x9ac8
   13b28:	movw	r1, #35106	; 0x8922
   13b2c:	movw	r3, #39491	; 0x9a43
   13b30:	movw	r2, #673	; 0x2a1
   13b34:	movt	r0, #1
   13b38:	movt	r1, #1
   13b3c:	movt	r3, #1
   13b40:	bl	1249c <__assert_fail@plt>
   13b44:	movw	r0, #39624	; 0x9ac8
   13b48:	movw	r1, #35106	; 0x8922
   13b4c:	movw	r3, #39491	; 0x9a43
   13b50:	movw	r2, #677	; 0x2a5
   13b54:	movt	r0, #1
   13b58:	movt	r1, #1
   13b5c:	movt	r3, #1
   13b60:	bl	1249c <__assert_fail@plt>
   13b64:	movw	r0, #39624	; 0x9ac8
   13b68:	movw	r1, #35106	; 0x8922
   13b6c:	movw	r3, #39237	; 0x9945
   13b70:	movw	r2, #702	; 0x2be
   13b74:	movt	r0, #1
   13b78:	movt	r1, #1
   13b7c:	movt	r3, #1
   13b80:	bl	1249c <__assert_fail@plt>

00013b84 <flatcc_builder_create_buffer@@Base>:
   13b84:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13b88:	add	fp, sp, #28
   13b8c:	sub	sp, sp, #100	; 0x64
   13b90:	ldr	r8, [fp, #12]
   13b94:	mov	r4, r0
   13b98:	ldr	r0, [fp, #8]
   13b9c:	mov	r7, r1
   13ba0:	mov	r5, #0
   13ba4:	mov	r9, r3
   13ba8:	sub	r1, fp, #30
   13bac:	str	r5, [sp, #12]
   13bb0:	and	r6, r8, #1
   13bb4:	strh	r0, [fp, #-30]	; 0xffffffe2
   13bb8:	mov	r0, r4
   13bbc:	mov	r3, r6
   13bc0:	bl	13a64 <flatcc_builder_embed_buffer@@Base+0x170>
   13bc4:	ldrh	r0, [r4, #128]	; 0x80
   13bc8:	ldrh	r1, [fp, #-30]	; 0xffffffe2
   13bcc:	cmp	r0, r1
   13bd0:	strhcc	r1, [r4, #128]	; 0x80
   13bd4:	cmp	r7, #0
   13bd8:	stmib	sp, {r6, r9}
   13bdc:	beq	13bf8 <flatcc_builder_create_buffer@@Base+0x74>
   13be0:	ldr	r5, [r7]
   13be4:	cmp	r5, #0
   13be8:	str	r5, [sp, #12]
   13bec:	movwne	r5, #1
   13bf0:	lsl	r7, r5, #2
   13bf4:	b	13bfc <flatcc_builder_create_buffer@@Base+0x78>
   13bf8:	mov	r7, #0
   13bfc:	ldr	r9, [r4, #136]	; 0x88
   13c00:	mov	sl, #4
   13c04:	mvn	r6, #3
   13c08:	mov	r3, #0
   13c0c:	ands	ip, r8, #3
   13c10:	and	r2, sl, r8, lsl #1
   13c14:	str	r3, [sp, #20]
   13c18:	str	r3, [sp, #16]
   13c1c:	sub	r2, r6, r2
   13c20:	sub	r6, r1, #1
   13c24:	mov	r1, #4
   13c28:	add	r2, r2, r9
   13c2c:	sub	r2, r2, r7
   13c30:	beq	13c54 <flatcc_builder_create_buffer@@Base+0xd0>
   13c34:	sub	r1, fp, #40	; 0x28
   13c38:	mov	r3, #1
   13c3c:	str	r1, [sp, #24]
   13c40:	mov	r1, #4
   13c44:	str	r1, [sp, #16]
   13c48:	str	r1, [sp, #28]
   13c4c:	mov	r1, #8
   13c50:	str	r3, [sp, #20]
   13c54:	add	lr, sp, #16
   13c58:	and	r6, r2, r6
   13c5c:	sub	r0, fp, #36	; 0x24
   13c60:	str	r1, [sp, #16]
   13c64:	cmp	r5, #0
   13c68:	add	r2, lr, r3, lsl #3
   13c6c:	str	r0, [r2, #8]
   13c70:	str	sl, [r2, #12]
   13c74:	add	r2, r3, #1
   13c78:	str	r2, [sp, #20]
   13c7c:	beq	13ca0 <flatcc_builder_create_buffer@@Base+0x11c>
   13c80:	add	r1, r1, r7
   13c84:	add	r0, lr, r2, lsl #3
   13c88:	add	r2, sp, #12
   13c8c:	str	r1, [sp, #16]
   13c90:	str	r2, [r0, #8]
   13c94:	orr	r2, r3, #2
   13c98:	str	r7, [r0, #12]
   13c9c:	str	r2, [sp, #20]
   13ca0:	cmp	r6, #0
   13ca4:	beq	13ccc <flatcc_builder_create_buffer@@Base+0x148>
   13ca8:	movw	r3, #34576	; 0x8710
   13cac:	add	r1, r1, r6
   13cb0:	add	r0, lr, r2, lsl #3
   13cb4:	add	r2, r2, #1
   13cb8:	movt	r3, #1
   13cbc:	str	r1, [sp, #16]
   13cc0:	str	r3, [r0, #8]
   13cc4:	str	r6, [r0, #12]
   13cc8:	str	r2, [sp, #20]
   13ccc:	ldr	r5, [sp, #4]
   13cd0:	sub	r7, r9, r1
   13cd4:	cmp	ip, #0
   13cd8:	mov	r6, #144	; 0x90
   13cdc:	ldr	r3, [sp, #8]
   13ce0:	mov	r0, r7
   13ce4:	addne	r0, r0, #4
   13ce8:	cmp	r5, #0
   13cec:	sub	r3, r3, r0
   13cf0:	movweq	r6, #140	; 0x8c
   13cf4:	cmp	r1, #0
   13cf8:	ldr	r6, [r4, r6]
   13cfc:	str	r3, [fp, #-36]	; 0xffffffdc
   13d00:	sub	r0, r6, r0
   13d04:	str	r0, [fp, #-40]	; 0xffffffd8
   13d08:	ble	13d60 <flatcc_builder_create_buffer@@Base+0x1dc>
   13d0c:	ldr	r0, [r4, #36]	; 0x24
   13d10:	ldr	r6, [r4, #44]	; 0x2c
   13d14:	str	r1, [sp]
   13d18:	add	r1, lr, #8
   13d1c:	mov	r3, r7
   13d20:	blx	r6
   13d24:	cmp	r0, #0
   13d28:	bne	13d80 <flatcc_builder_create_buffer@@Base+0x1fc>
   13d2c:	cmp	r7, #0
   13d30:	str	r7, [r4, #136]	; 0x88
   13d34:	movne	r0, r7
   13d38:	subne	sp, fp, #28
   13d3c:	popne	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13d40:	movw	r0, #39624	; 0x9ac8
   13d44:	movw	r1, #35106	; 0x8922
   13d48:	movw	r3, #35421	; 0x8a5d
   13d4c:	mov	r2, #772	; 0x304
   13d50:	movt	r0, #1
   13d54:	movt	r1, #1
   13d58:	movt	r3, #1
   13d5c:	bl	1249c <__assert_fail@plt>
   13d60:	movw	r0, #39624	; 0x9ac8
   13d64:	movw	r1, #35106	; 0x8922
   13d68:	movw	r3, #39303	; 0x9987
   13d6c:	movw	r2, #647	; 0x287
   13d70:	movt	r0, #1
   13d74:	movt	r1, #1
   13d78:	movt	r3, #1
   13d7c:	bl	1249c <__assert_fail@plt>
   13d80:	movw	r0, #39624	; 0x9ac8
   13d84:	movw	r1, #35106	; 0x8922
   13d88:	movw	r3, #39303	; 0x9987
   13d8c:	movw	r2, #651	; 0x28b
   13d90:	movt	r0, #1
   13d94:	movt	r1, #1
   13d98:	movt	r3, #1
   13d9c:	bl	1249c <__assert_fail@plt>

00013da0 <flatcc_builder_create_struct@@Base>:
   13da0:	push	{r4, r5, r6, sl, fp, lr}
   13da4:	add	fp, sp, #16
   13da8:	sub	sp, sp, #80	; 0x50
   13dac:	cmp	r3, #0
   13db0:	beq	13e88 <flatcc_builder_create_struct@@Base+0xe8>
   13db4:	mov	r5, r0
   13db8:	ldrh	r0, [r0, #128]	; 0x80
   13dbc:	mov	r4, #0
   13dc0:	cmp	r0, r3
   13dc4:	strhcc	r3, [r5, #128]	; 0x80
   13dc8:	sub	r3, r3, #1
   13dcc:	cmp	r2, #0
   13dd0:	ldr	r0, [r5, #136]	; 0x88
   13dd4:	str	r4, [sp, #12]
   13dd8:	str	r4, [sp, #8]
   13ddc:	movne	r4, #1
   13de0:	strne	r1, [sp, #16]
   13de4:	strne	r2, [sp, #8]
   13de8:	strne	r2, [sp, #20]
   13dec:	strne	r4, [sp, #12]
   13df0:	sub	r6, r0, r2
   13df4:	and	r3, r6, r3
   13df8:	cmp	r3, #0
   13dfc:	beq	13e28 <flatcc_builder_create_struct@@Base+0x88>
   13e00:	add	r1, sp, #8
   13e04:	movw	r6, #34576	; 0x8710
   13e08:	add	r2, r3, r2
   13e0c:	add	r1, r1, r4, lsl #3
   13e10:	add	r4, r4, #1
   13e14:	movt	r6, #1
   13e18:	str	r2, [sp, #8]
   13e1c:	str	r6, [r1, #8]
   13e20:	str	r3, [r1, #12]
   13e24:	str	r4, [sp, #12]
   13e28:	cmp	r2, #0
   13e2c:	ble	13ea8 <flatcc_builder_create_struct@@Base+0x108>
   13e30:	sub	r6, r0, r2
   13e34:	ldr	r0, [r5, #36]	; 0x24
   13e38:	ldr	ip, [r5, #44]	; 0x2c
   13e3c:	add	r1, sp, #8
   13e40:	str	r2, [sp]
   13e44:	mov	r2, r4
   13e48:	add	r1, r1, #8
   13e4c:	mov	r3, r6
   13e50:	blx	ip
   13e54:	cmp	r0, #0
   13e58:	streq	r6, [r5, #136]	; 0x88
   13e5c:	moveq	r0, r6
   13e60:	subeq	sp, fp, #16
   13e64:	popeq	{r4, r5, r6, sl, fp, pc}
   13e68:	movw	r0, #39624	; 0x9ac8
   13e6c:	movw	r1, #35106	; 0x8922
   13e70:	movw	r3, #39303	; 0x9987
   13e74:	movw	r2, #651	; 0x28b
   13e78:	movt	r0, #1
   13e7c:	movt	r1, #1
   13e80:	movt	r3, #1
   13e84:	bl	1249c <__assert_fail@plt>
   13e88:	movw	r0, #35552	; 0x8ae0
   13e8c:	movw	r1, #35106	; 0x8922
   13e90:	movw	r3, #35563	; 0x8aeb
   13e94:	movw	r2, #783	; 0x30f
   13e98:	movt	r0, #1
   13e9c:	movt	r1, #1
   13ea0:	movt	r3, #1
   13ea4:	bl	1249c <__assert_fail@plt>
   13ea8:	movw	r0, #39624	; 0x9ac8
   13eac:	movw	r1, #35106	; 0x8922
   13eb0:	movw	r3, #39303	; 0x9987
   13eb4:	movw	r2, #647	; 0x287
   13eb8:	movt	r0, #1
   13ebc:	movt	r1, #1
   13ec0:	movt	r3, #1
   13ec4:	bl	1249c <__assert_fail@plt>

00013ec8 <flatcc_builder_start_buffer@@Base>:
   13ec8:	push	{r4, r5, r6, r7, fp, lr}
   13ecc:	add	fp, sp, #16
   13ed0:	mov	r5, r1
   13ed4:	ldrh	r1, [r0, #128]	; 0x80
   13ed8:	mov	r6, r3
   13edc:	mov	r7, r2
   13ee0:	mov	r4, r0
   13ee4:	bl	13f84 <flatcc_builder_start_buffer@@Base+0xbc>
   13ee8:	mov	r1, r0
   13eec:	mvn	r0, #0
   13ef0:	cmp	r1, #0
   13ef4:	popne	{r4, r5, r6, r7, fp, pc}
   13ef8:	mov	r0, #1
   13efc:	cmp	r5, #0
   13f00:	strh	r0, [r4, #128]	; 0x80
   13f04:	ldrh	r1, [r4, #132]	; 0x84
   13f08:	ldr	r2, [r4, #32]
   13f0c:	strh	r1, [r2, #34]	; 0x22
   13f10:	strh	r7, [r4, #132]	; 0x84
   13f14:	ldrh	r1, [r4, #164]	; 0xa4
   13f18:	ldr	r2, [r4, #32]
   13f1c:	strh	r1, [r2, #32]
   13f20:	strh	r6, [r4, #164]	; 0xa4
   13f24:	ldr	r1, [r4, #32]
   13f28:	ldr	r2, [r4, #144]	; 0x90
   13f2c:	str	r2, [r1, #20]
   13f30:	ldr	r1, [r4, #32]
   13f34:	ldr	r2, [r4, #152]	; 0x98
   13f38:	str	r2, [r1, #28]
   13f3c:	ldr	r3, [r4, #148]	; 0x94
   13f40:	ldr	r1, [r4, #32]
   13f44:	ldr	r2, [r4, #136]	; 0x88
   13f48:	ldr	r7, [r4, #168]	; 0xa8
   13f4c:	add	r6, r3, #1
   13f50:	str	r2, [r4, #144]	; 0x90
   13f54:	str	r6, [r4, #148]	; 0x94
   13f58:	str	r3, [r4, #152]	; 0x98
   13f5c:	str	r7, [r1, #16]
   13f60:	movw	r1, #34576	; 0x8710
   13f64:	movt	r1, #1
   13f68:	movne	r1, r5
   13f6c:	ldr	r1, [r1]
   13f70:	str	r1, [r4, #168]	; 0xa8
   13f74:	ldr	r1, [r4, #32]
   13f78:	strh	r0, [r1, #14]
   13f7c:	mov	r0, #0
   13f80:	pop	{r4, r5, r6, r7, fp, pc}
   13f84:	push	{r4, r5, r6, r7, fp, lr}
   13f88:	add	fp, sp, #16
   13f8c:	sub	sp, sp, #8
   13f90:	mov	r5, r1
   13f94:	ldr	r1, [r0, #156]	; 0x9c
   13f98:	ldr	r2, [r0, #160]	; 0xa0
   13f9c:	mov	r4, r0
   13fa0:	add	r0, r1, #1
   13fa4:	cmp	r1, r2
   13fa8:	str	r0, [r4, #156]	; 0x9c
   13fac:	bge	13fc0 <flatcc_builder_start_buffer@@Base+0xf8>
   13fb0:	ldr	r0, [r4, #32]
   13fb4:	add	r0, r0, #36	; 0x24
   13fb8:	str	r0, [r4, #32]
   13fbc:	b	14054 <flatcc_builder_start_buffer@@Base+0x18c>
   13fc0:	ldr	r2, [r4, #176]	; 0xb0
   13fc4:	mvn	r6, #0
   13fc8:	cmp	r2, #1
   13fcc:	cmpge	r1, r2
   13fd0:	bge	1408c <flatcc_builder_start_buffer@@Base+0x1c4>
   13fd4:	add	r7, r0, r0, lsl #3
   13fd8:	ldr	r0, [r4, #88]	; 0x58
   13fdc:	lsl	r2, r7, #2
   13fe0:	cmp	r2, r0
   13fe4:	bls	1400c <flatcc_builder_start_buffer@@Base+0x144>
   13fe8:	ldr	r0, [r4, #40]	; 0x28
   13fec:	ldr	ip, [r4, #48]	; 0x30
   13ff0:	mov	r3, #4
   13ff4:	add	r1, r4, #84	; 0x54
   13ff8:	str	r3, [sp]
   13ffc:	mov	r3, #0
   14000:	blx	ip
   14004:	cmp	r0, #0
   14008:	bne	14098 <flatcc_builder_start_buffer@@Base+0x1d0>
   1400c:	ldr	r1, [r4, #84]	; 0x54
   14010:	mvn	r0, #35	; 0x23
   14014:	add	r0, r0, r7, lsl #2
   14018:	adds	r0, r0, r1
   1401c:	str	r0, [r4, #32]
   14020:	beq	1408c <flatcc_builder_start_buffer@@Base+0x1c4>
   14024:	ldr	r1, [r4, #88]	; 0x58
   14028:	movw	r3, #36409	; 0x8e39
   1402c:	ldr	r2, [r4, #176]	; 0xb0
   14030:	movt	r3, #14563	; 0x38e3
   14034:	umull	r1, r3, r1, r3
   14038:	lsr	r1, r3, #3
   1403c:	cmp	r2, r3, lsr #3
   14040:	mov	r3, r1
   14044:	movlt	r3, r2
   14048:	cmp	r2, #0
   1404c:	movle	r3, r1
   14050:	str	r3, [r4, #160]	; 0xa0
   14054:	ldr	r1, [r4, #20]
   14058:	mvn	r3, #3
   1405c:	mov	r6, #0
   14060:	str	r1, [r0, #8]
   14064:	ldrh	r2, [r4, #130]	; 0x82
   14068:	strh	r2, [r0, #12]
   1406c:	strh	r5, [r4, #130]	; 0x82
   14070:	ldr	r2, [r4, #28]
   14074:	stm	r0, {r2, r3}
   14078:	add	r0, r1, r2
   1407c:	str	r6, [r4, #20]
   14080:	add	r0, r0, #7
   14084:	bic	r0, r0, #7
   14088:	str	r0, [r4, #28]
   1408c:	mov	r0, r6
   14090:	sub	sp, fp, #16
   14094:	pop	{r4, r5, r6, r7, fp, pc}
   14098:	movw	r0, #39624	; 0x9ac8
   1409c:	movw	r1, #35106	; 0x8922
   140a0:	movw	r3, #39170	; 0x9902
   140a4:	mov	r2, #308	; 0x134
   140a8:	movt	r0, #1
   140ac:	movt	r1, #1
   140b0:	movt	r3, #1
   140b4:	bl	1249c <__assert_fail@plt>

000140b8 <flatcc_builder_end_buffer@@Base>:
   140b8:	push	{r4, r5, r6, sl, fp, lr}
   140bc:	add	fp, sp, #16
   140c0:	sub	sp, sp, #8
   140c4:	mov	r4, r0
   140c8:	ldr	r0, [r0, #32]
   140cc:	ldrh	r0, [r0, #14]
   140d0:	cmp	r0, #1
   140d4:	bne	141c8 <flatcc_builder_end_buffer@@Base+0x110>
   140d8:	mov	r3, r1
   140dc:	ldr	r1, [r4, #152]	; 0x98
   140e0:	ldrh	r0, [r4, #164]	; 0xa4
   140e4:	ldrh	r2, [r4, #132]	; 0x84
   140e8:	cmp	r1, #0
   140ec:	ldrh	r1, [r4, #128]	; 0x80
   140f0:	and	r0, r0, #2
   140f4:	orrne	r0, r0, #1
   140f8:	cmp	r1, r2
   140fc:	movcc	r1, r2
   14100:	strhcc	r2, [r4, #128]	; 0x80
   14104:	str	r0, [sp, #4]
   14108:	mov	r0, r4
   1410c:	str	r1, [sp]
   14110:	add	r1, r4, #168	; 0xa8
   14114:	bl	13b84 <flatcc_builder_create_buffer@@Base>
   14118:	mov	r6, r0
   1411c:	cmp	r0, #0
   14120:	beq	141bc <flatcc_builder_end_buffer@@Base+0x104>
   14124:	ldr	r1, [r4, #32]
   14128:	ldr	r0, [r4, #16]
   1412c:	ldr	r2, [r4, #20]
   14130:	ldr	r3, [r1, #20]
   14134:	str	r3, [r4, #144]	; 0x90
   14138:	ldr	r3, [r1, #28]
   1413c:	str	r3, [r4, #152]	; 0x98
   14140:	ldr	r3, [r1, #16]
   14144:	str	r3, [r4, #168]	; 0xa8
   14148:	ldrh	r1, [r1, #32]
   1414c:	strh	r1, [r4, #164]	; 0xa4
   14150:	mov	r1, #0
   14154:	bl	1246c <memset@plt>
   14158:	ldr	r0, [r4, #32]
   1415c:	ldr	r1, [r4, #60]	; 0x3c
   14160:	ldr	r2, [r4, #64]	; 0x40
   14164:	ldr	r3, [r0, #8]
   14168:	str	r3, [r4, #20]
   1416c:	ldr	r3, [r0]
   14170:	str	r3, [r4, #28]
   14174:	add	r1, r1, r3
   14178:	ldr	r5, [r0, #4]
   1417c:	str	r1, [r4, #16]
   14180:	sub	r1, r2, r3
   14184:	cmp	r1, r5
   14188:	movhi	r1, r5
   1418c:	str	r1, [r4, #24]
   14190:	ldrh	r1, [r4, #130]	; 0x82
   14194:	ldrh	r2, [r4, #128]	; 0x80
   14198:	cmp	r2, r1
   1419c:	strhcc	r1, [r4, #128]	; 0x80
   141a0:	ldrh	r1, [r0, #12]
   141a4:	sub	r0, r0, #36	; 0x24
   141a8:	str	r0, [r4, #32]
   141ac:	strh	r1, [r4, #130]	; 0x82
   141b0:	ldr	r0, [r4, #156]	; 0x9c
   141b4:	sub	r0, r0, #1
   141b8:	str	r0, [r4, #156]	; 0x9c
   141bc:	mov	r0, r6
   141c0:	sub	sp, fp, #16
   141c4:	pop	{r4, r5, r6, sl, fp, pc}
   141c8:	movw	r0, #35665	; 0x8b51
   141cc:	movw	r1, #35106	; 0x8922
   141d0:	movw	r3, #35709	; 0x8b7d
   141d4:	movw	r2, #838	; 0x346
   141d8:	movt	r0, #1
   141dc:	movt	r1, #1
   141e0:	movt	r3, #1
   141e4:	bl	1249c <__assert_fail@plt>

000141e8 <flatcc_builder_start_struct@@Base>:
   141e8:	push	{r4, r5, r6, r7, fp, lr}
   141ec:	add	fp, sp, #16
   141f0:	sub	sp, sp, #8
   141f4:	mov	r6, r1
   141f8:	mov	r1, r2
   141fc:	mov	r4, r0
   14200:	bl	13f84 <flatcc_builder_start_buffer@@Base+0xbc>
   14204:	mov	r5, #0
   14208:	cmp	r0, #0
   1420c:	bne	14288 <flatcc_builder_start_struct@@Base+0xa0>
   14210:	ldr	r2, [r4, #32]
   14214:	mov	r0, #2
   14218:	mvn	r7, #3
   1421c:	strh	r0, [r2, #14]
   14220:	ldr	r1, [r4, #28]
   14224:	ldr	r3, [r4, #64]	; 0x40
   14228:	ldr	r0, [r4, #60]	; 0x3c
   1422c:	sub	r3, r3, r1
   14230:	add	r0, r0, r1
   14234:	cmn	r3, #4
   14238:	str	r0, [r4, #16]
   1423c:	movcs	r3, r7
   14240:	str	r3, [r4, #24]
   14244:	str	r7, [r2, #4]
   14248:	ldr	r7, [r4, #20]
   1424c:	add	r2, r7, r6
   14250:	cmp	r2, r3
   14254:	str	r2, [r4, #20]
   14258:	bcc	142c4 <flatcc_builder_start_struct@@Base+0xdc>
   1425c:	ldr	r0, [r4, #40]	; 0x28
   14260:	ldr	r6, [r4, #48]	; 0x30
   14264:	add	r1, r1, r2
   14268:	mov	r3, #1
   1426c:	str	r3, [sp]
   14270:	add	r2, r1, #1
   14274:	add	r1, r4, #60	; 0x3c
   14278:	mov	r3, #1
   1427c:	blx	r6
   14280:	cmp	r0, #0
   14284:	beq	14294 <flatcc_builder_start_struct@@Base+0xac>
   14288:	mov	r0, r5
   1428c:	sub	sp, fp, #16
   14290:	pop	{r4, r5, r6, r7, fp, pc}
   14294:	ldr	r1, [r4, #28]
   14298:	ldr	r0, [r4, #60]	; 0x3c
   1429c:	ldr	r3, [r4, #64]	; 0x40
   142a0:	ldr	r2, [r4, #32]
   142a4:	add	r0, r0, r1
   142a8:	sub	r1, r3, r1
   142ac:	mvn	r3, #3
   142b0:	cmn	r1, #4
   142b4:	str	r0, [r4, #16]
   142b8:	movcs	r1, r3
   142bc:	str	r1, [r4, #24]
   142c0:	str	r3, [r2, #4]
   142c4:	add	r5, r0, r7
   142c8:	mov	r0, r5
   142cc:	sub	sp, fp, #16
   142d0:	pop	{r4, r5, r6, r7, fp, pc}

000142d4 <flatcc_builder_struct_edit@@Base>:
   142d4:	ldr	r0, [r0, #16]
   142d8:	bx	lr

000142dc <flatcc_builder_end_struct@@Base>:
   142dc:	push	{r4, r5, fp, lr}
   142e0:	add	fp, sp, #8
   142e4:	mov	r4, r0
   142e8:	ldr	r0, [r0, #32]
   142ec:	ldrh	r0, [r0, #14]
   142f0:	cmp	r0, #2
   142f4:	bne	14394 <flatcc_builder_end_struct@@Base+0xb8>
   142f8:	ldrh	r3, [r4, #130]	; 0x82
   142fc:	ldr	r1, [r4, #16]
   14300:	ldr	r2, [r4, #20]
   14304:	mov	r0, r4
   14308:	bl	13da0 <flatcc_builder_create_struct@@Base>
   1430c:	mov	r5, r0
   14310:	cmp	r0, #0
   14314:	beq	1438c <flatcc_builder_end_struct@@Base+0xb0>
   14318:	ldr	r0, [r4, #16]
   1431c:	ldr	r2, [r4, #20]
   14320:	mov	r1, #0
   14324:	bl	1246c <memset@plt>
   14328:	ldr	r0, [r4, #32]
   1432c:	ldr	r1, [r4, #60]	; 0x3c
   14330:	ldr	ip, [r4, #64]	; 0x40
   14334:	ldr	r3, [r0, #8]
   14338:	str	r3, [r4, #20]
   1433c:	ldr	r3, [r0]
   14340:	str	r3, [r4, #28]
   14344:	add	r1, r1, r3
   14348:	ldr	r2, [r0, #4]
   1434c:	str	r1, [r4, #16]
   14350:	sub	r1, ip, r3
   14354:	cmp	r1, r2
   14358:	movhi	r1, r2
   1435c:	str	r1, [r4, #24]
   14360:	ldrh	r1, [r4, #130]	; 0x82
   14364:	ldrh	r2, [r4, #128]	; 0x80
   14368:	cmp	r2, r1
   1436c:	strhcc	r1, [r4, #128]	; 0x80
   14370:	ldrh	r1, [r0, #12]
   14374:	sub	r0, r0, #36	; 0x24
   14378:	str	r0, [r4, #32]
   1437c:	strh	r1, [r4, #130]	; 0x82
   14380:	ldr	r0, [r4, #156]	; 0x9c
   14384:	sub	r0, r0, #1
   14388:	str	r0, [r4, #156]	; 0x9c
   1438c:	mov	r0, r5
   14390:	pop	{r4, r5, fp, pc}
   14394:	movw	r0, #35798	; 0x8bd6
   14398:	movw	r1, #35106	; 0x8922
   1439c:	movw	r3, #35842	; 0x8c02
   143a0:	mov	r2, #872	; 0x368
   143a4:	movt	r0, #1
   143a8:	movt	r1, #1
   143ac:	movt	r3, #1
   143b0:	bl	1249c <__assert_fail@plt>

000143b4 <flatcc_builder_extend_vector@@Base>:
   143b4:	push	{r4, r5, fp, lr}
   143b8:	add	fp, sp, #8
   143bc:	sub	sp, sp, #8
   143c0:	mov	r4, r0
   143c4:	ldr	r0, [r0, #32]
   143c8:	ldr	r2, [r0, #20]
   143cc:	adds	r2, r2, r1
   143d0:	bcs	14490 <flatcc_builder_extend_vector@@Base+0xdc>
   143d4:	ldr	r3, [r0, #24]
   143d8:	cmp	r2, r3
   143dc:	bhi	14490 <flatcc_builder_extend_vector@@Base+0xdc>
   143e0:	str	r2, [r0, #20]
   143e4:	ldr	r2, [r4, #32]
   143e8:	ldr	r5, [r4, #20]
   143ec:	ldr	r0, [r4, #24]
   143f0:	ldr	r2, [r2, #16]
   143f4:	mla	r1, r2, r1, r5
   143f8:	cmp	r1, r0
   143fc:	str	r1, [r4, #20]
   14400:	bcs	14414 <flatcc_builder_extend_vector@@Base+0x60>
   14404:	ldr	r0, [r4, #16]
   14408:	add	r0, r0, r5
   1440c:	sub	sp, fp, #8
   14410:	pop	{r4, r5, fp, pc}
   14414:	ldr	r2, [r4, #28]
   14418:	ldr	r0, [r4, #40]	; 0x28
   1441c:	ldr	ip, [r4, #48]	; 0x30
   14420:	mov	r3, #1
   14424:	str	r3, [sp]
   14428:	mov	r3, #1
   1442c:	add	r1, r1, r2
   14430:	add	r2, r1, #1
   14434:	add	r1, r4, #60	; 0x3c
   14438:	blx	ip
   1443c:	mov	r1, r0
   14440:	mov	r0, #0
   14444:	cmp	r1, #0
   14448:	beq	14454 <flatcc_builder_extend_vector@@Base+0xa0>
   1444c:	sub	sp, fp, #8
   14450:	pop	{r4, r5, fp, pc}
   14454:	ldr	r1, [r4, #28]
   14458:	ldr	r0, [r4, #60]	; 0x3c
   1445c:	ldr	r3, [r4, #64]	; 0x40
   14460:	ldr	r2, [r4, #32]
   14464:	add	r0, r0, r1
   14468:	sub	r1, r3, r1
   1446c:	mvn	r3, #3
   14470:	cmn	r1, #4
   14474:	str	r0, [r4, #16]
   14478:	movcs	r1, r3
   1447c:	str	r1, [r4, #24]
   14480:	str	r3, [r2, #4]
   14484:	add	r0, r0, r5
   14488:	sub	sp, fp, #8
   1448c:	pop	{r4, r5, fp, pc}
   14490:	movw	r0, #39377	; 0x99d1
   14494:	movw	r1, #35106	; 0x8922
   14498:	movw	r3, #39404	; 0x99ec
   1449c:	mov	r2, #892	; 0x37c
   144a0:	movt	r0, #1
   144a4:	movt	r1, #1
   144a8:	movt	r3, #1
   144ac:	bl	1249c <__assert_fail@plt>

000144b0 <flatcc_builder_vector_push@@Base>:
   144b0:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   144b4:	add	fp, sp, #24
   144b8:	sub	sp, sp, #8
   144bc:	mov	r5, r0
   144c0:	ldr	r0, [r0, #32]
   144c4:	mov	r8, r1
   144c8:	ldrh	r1, [r0, #14]
   144cc:	cmp	r1, #4
   144d0:	bne	145bc <flatcc_builder_vector_push@@Base+0x10c>
   144d4:	ldr	r1, [r0, #20]
   144d8:	ldr	r2, [r0, #24]
   144dc:	cmp	r1, r2
   144e0:	bhi	145dc <flatcc_builder_vector_push@@Base+0x12c>
   144e4:	add	r1, r1, #1
   144e8:	str	r1, [r0, #20]
   144ec:	ldr	r1, [r5, #32]
   144f0:	ldr	r4, [r5, #20]
   144f4:	ldr	r0, [r5, #24]
   144f8:	ldr	r6, [r1, #16]
   144fc:	add	r1, r4, r6
   14500:	cmp	r1, r0
   14504:	str	r1, [r5, #20]
   14508:	bcs	14534 <flatcc_builder_vector_push@@Base+0x84>
   1450c:	ldr	r0, [r5, #16]
   14510:	adds	r7, r0, r4
   14514:	beq	145ac <flatcc_builder_vector_push@@Base+0xfc>
   14518:	mov	r0, r7
   1451c:	mov	r1, r8
   14520:	mov	r2, r6
   14524:	bl	123e8 <memcpy@plt>
   14528:	mov	r0, r7
   1452c:	sub	sp, fp, #24
   14530:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14534:	ldr	r2, [r5, #28]
   14538:	ldr	r0, [r5, #40]	; 0x28
   1453c:	ldr	r7, [r5, #48]	; 0x30
   14540:	mov	r3, #1
   14544:	str	r3, [sp]
   14548:	mov	r3, #1
   1454c:	add	r1, r1, r2
   14550:	add	r2, r1, #1
   14554:	add	r1, r5, #60	; 0x3c
   14558:	blx	r7
   1455c:	mov	r7, #0
   14560:	cmp	r0, #0
   14564:	beq	14574 <flatcc_builder_vector_push@@Base+0xc4>
   14568:	mov	r0, r7
   1456c:	sub	sp, fp, #24
   14570:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14574:	ldr	r1, [r5, #28]
   14578:	ldr	r0, [r5, #60]	; 0x3c
   1457c:	ldr	r3, [r5, #64]	; 0x40
   14580:	ldr	r2, [r5, #32]
   14584:	add	r0, r0, r1
   14588:	sub	r1, r3, r1
   1458c:	mvn	r3, #3
   14590:	cmn	r1, #4
   14594:	str	r0, [r5, #16]
   14598:	movcs	r1, r3
   1459c:	str	r1, [r5, #24]
   145a0:	str	r3, [r2, #4]
   145a4:	adds	r7, r0, r4
   145a8:	bne	14518 <flatcc_builder_vector_push@@Base+0x68>
   145ac:	mov	r7, #0
   145b0:	mov	r0, r7
   145b4:	sub	sp, fp, #24
   145b8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   145bc:	movw	r0, #35909	; 0x8c45
   145c0:	movw	r1, #35106	; 0x8922
   145c4:	movw	r3, #35953	; 0x8c71
   145c8:	movw	r2, #907	; 0x38b
   145cc:	movt	r0, #1
   145d0:	movt	r1, #1
   145d4:	movt	r3, #1
   145d8:	bl	1249c <__assert_fail@plt>
   145dc:	movw	r0, #36020	; 0x8cb4
   145e0:	movw	r1, #35106	; 0x8922
   145e4:	movw	r3, #35953	; 0x8c71
   145e8:	mov	r2, #908	; 0x38c
   145ec:	movt	r0, #1
   145f0:	movt	r1, #1
   145f4:	movt	r3, #1
   145f8:	bl	1249c <__assert_fail@plt>

000145fc <flatcc_builder_append_vector@@Base>:
   145fc:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   14600:	add	fp, sp, #24
   14604:	sub	sp, sp, #8
   14608:	mov	r6, r0
   1460c:	ldr	r0, [r0, #32]
   14610:	mov	r8, r1
   14614:	ldrh	r1, [r0, #14]
   14618:	cmp	r1, #4
   1461c:	bne	14730 <flatcc_builder_append_vector@@Base+0x134>
   14620:	ldr	r1, [r0, #20]
   14624:	mov	r5, r2
   14628:	adds	r1, r1, r2
   1462c:	bcs	14710 <flatcc_builder_append_vector@@Base+0x114>
   14630:	ldr	r2, [r0, #24]
   14634:	cmp	r1, r2
   14638:	bhi	14710 <flatcc_builder_append_vector@@Base+0x114>
   1463c:	str	r1, [r0, #20]
   14640:	ldr	r1, [r6, #32]
   14644:	ldr	r4, [r6, #20]
   14648:	ldr	r0, [r6, #24]
   1464c:	ldr	r9, [r1, #16]
   14650:	mla	r1, r9, r5, r4
   14654:	cmp	r1, r0
   14658:	str	r1, [r6, #20]
   1465c:	bcs	14688 <flatcc_builder_append_vector@@Base+0x8c>
   14660:	ldr	r0, [r6, #16]
   14664:	adds	r7, r0, r4
   14668:	beq	14700 <flatcc_builder_append_vector@@Base+0x104>
   1466c:	mul	r2, r9, r5
   14670:	mov	r0, r7
   14674:	mov	r1, r8
   14678:	bl	123e8 <memcpy@plt>
   1467c:	mov	r0, r7
   14680:	sub	sp, fp, #24
   14684:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   14688:	ldr	r2, [r6, #28]
   1468c:	ldr	r0, [r6, #40]	; 0x28
   14690:	ldr	r7, [r6, #48]	; 0x30
   14694:	mov	r3, #1
   14698:	str	r3, [sp]
   1469c:	mov	r3, #1
   146a0:	add	r1, r1, r2
   146a4:	add	r2, r1, #1
   146a8:	add	r1, r6, #60	; 0x3c
   146ac:	blx	r7
   146b0:	mov	r7, #0
   146b4:	cmp	r0, #0
   146b8:	beq	146c8 <flatcc_builder_append_vector@@Base+0xcc>
   146bc:	mov	r0, r7
   146c0:	sub	sp, fp, #24
   146c4:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   146c8:	ldr	r1, [r6, #28]
   146cc:	ldr	r0, [r6, #60]	; 0x3c
   146d0:	ldr	r3, [r6, #64]	; 0x40
   146d4:	ldr	r2, [r6, #32]
   146d8:	add	r0, r0, r1
   146dc:	sub	r1, r3, r1
   146e0:	mvn	r3, #3
   146e4:	cmn	r1, #4
   146e8:	str	r0, [r6, #16]
   146ec:	movcs	r1, r3
   146f0:	str	r1, [r6, #24]
   146f4:	str	r3, [r2, #4]
   146f8:	adds	r7, r0, r4
   146fc:	bne	1466c <flatcc_builder_append_vector@@Base+0x70>
   14700:	mov	r7, #0
   14704:	mov	r0, r7
   14708:	sub	sp, fp, #24
   1470c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   14710:	movw	r0, #39377	; 0x99d1
   14714:	movw	r1, #35106	; 0x8922
   14718:	movw	r3, #39404	; 0x99ec
   1471c:	mov	r2, #892	; 0x37c
   14720:	movt	r0, #1
   14724:	movt	r1, #1
   14728:	movt	r3, #1
   1472c:	bl	1249c <__assert_fail@plt>
   14730:	movw	r0, #35909	; 0x8c45
   14734:	movw	r1, #35106	; 0x8922
   14738:	movw	r3, #36081	; 0x8cf1
   1473c:	movw	r2, #915	; 0x393
   14740:	movt	r0, #1
   14744:	movt	r1, #1
   14748:	movt	r3, #1
   1474c:	bl	1249c <__assert_fail@plt>

00014750 <flatcc_builder_extend_offset_vector@@Base>:
   14750:	push	{r4, r5, fp, lr}
   14754:	add	fp, sp, #8
   14758:	sub	sp, sp, #8
   1475c:	mov	r4, r0
   14760:	ldr	r0, [r0, #32]
   14764:	ldr	r2, [r0, #20]
   14768:	adds	r2, r2, r1
   1476c:	cmpcc	r2, #1073741824	; 0x40000000
   14770:	bcc	14794 <flatcc_builder_extend_offset_vector@@Base+0x44>
   14774:	movw	r0, #39377	; 0x99d1
   14778:	movw	r1, #35106	; 0x8922
   1477c:	movw	r3, #39404	; 0x99ec
   14780:	mov	r2, #892	; 0x37c
   14784:	movt	r0, #1
   14788:	movt	r1, #1
   1478c:	movt	r3, #1
   14790:	bl	1249c <__assert_fail@plt>
   14794:	str	r2, [r0, #20]
   14798:	ldr	r5, [r4, #20]
   1479c:	ldr	r0, [r4, #24]
   147a0:	add	r1, r5, r1, lsl #2
   147a4:	cmp	r1, r0
   147a8:	str	r1, [r4, #20]
   147ac:	bcs	147c0 <flatcc_builder_extend_offset_vector@@Base+0x70>
   147b0:	ldr	r0, [r4, #16]
   147b4:	add	r0, r0, r5
   147b8:	sub	sp, fp, #8
   147bc:	pop	{r4, r5, fp, pc}
   147c0:	ldr	r2, [r4, #28]
   147c4:	ldr	r0, [r4, #40]	; 0x28
   147c8:	ldr	ip, [r4, #48]	; 0x30
   147cc:	mov	r3, #1
   147d0:	str	r3, [sp]
   147d4:	mov	r3, #1
   147d8:	add	r1, r1, r2
   147dc:	add	r2, r1, #1
   147e0:	add	r1, r4, #60	; 0x3c
   147e4:	blx	ip
   147e8:	mov	r1, r0
   147ec:	mov	r0, #0
   147f0:	cmp	r1, #0
   147f4:	beq	14800 <flatcc_builder_extend_offset_vector@@Base+0xb0>
   147f8:	sub	sp, fp, #8
   147fc:	pop	{r4, r5, fp, pc}
   14800:	ldr	r1, [r4, #28]
   14804:	ldr	r0, [r4, #60]	; 0x3c
   14808:	ldr	r3, [r4, #64]	; 0x40
   1480c:	ldr	r2, [r4, #32]
   14810:	add	r0, r0, r1
   14814:	sub	r1, r3, r1
   14818:	mvn	r3, #3
   1481c:	cmn	r1, #4
   14820:	str	r0, [r4, #16]
   14824:	movcs	r1, r3
   14828:	str	r1, [r4, #24]
   1482c:	str	r3, [r2, #4]
   14830:	add	r0, r0, r5
   14834:	sub	sp, fp, #8
   14838:	pop	{r4, r5, fp, pc}

0001483c <flatcc_builder_offset_vector_push@@Base>:
   1483c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   14840:	add	fp, sp, #24
   14844:	sub	sp, sp, #8
   14848:	mov	r6, r0
   1484c:	ldr	r0, [r0, #32]
   14850:	mov	r8, r1
   14854:	ldrh	r1, [r0, #14]
   14858:	cmp	r1, #5
   1485c:	bne	1491c <flatcc_builder_offset_vector_push@@Base+0xe0>
   14860:	ldr	r1, [r0, #20]
   14864:	mov	r5, #0
   14868:	cmn	r1, #-1073741823	; 0xc0000001
   1486c:	beq	148c8 <flatcc_builder_offset_vector_push@@Base+0x8c>
   14870:	add	r1, r1, #1
   14874:	str	r1, [r0, #20]
   14878:	ldr	r7, [r6, #20]
   1487c:	ldr	r0, [r6, #24]
   14880:	add	r1, r7, #4
   14884:	cmp	r1, r0
   14888:	str	r1, [r6, #20]
   1488c:	bcs	14898 <flatcc_builder_offset_vector_push@@Base+0x5c>
   14890:	ldr	r0, [r6, #16]
   14894:	b	14904 <flatcc_builder_offset_vector_push@@Base+0xc8>
   14898:	ldr	r1, [r6, #28]
   1489c:	ldr	r0, [r6, #40]	; 0x28
   148a0:	ldr	r4, [r6, #48]	; 0x30
   148a4:	mov	r2, #1
   148a8:	mov	r3, #1
   148ac:	str	r2, [sp]
   148b0:	add	r1, r7, r1
   148b4:	add	r2, r1, #5
   148b8:	add	r1, r6, #60	; 0x3c
   148bc:	blx	r4
   148c0:	cmp	r0, #0
   148c4:	beq	148d4 <flatcc_builder_offset_vector_push@@Base+0x98>
   148c8:	mov	r0, r5
   148cc:	sub	sp, fp, #24
   148d0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   148d4:	ldr	r1, [r6, #28]
   148d8:	ldr	r0, [r6, #60]	; 0x3c
   148dc:	ldr	r3, [r6, #64]	; 0x40
   148e0:	ldr	r2, [r6, #32]
   148e4:	add	r0, r0, r1
   148e8:	sub	r1, r3, r1
   148ec:	mvn	r3, #3
   148f0:	cmn	r1, #4
   148f4:	str	r0, [r6, #16]
   148f8:	movcs	r1, r3
   148fc:	str	r1, [r6, #24]
   14900:	str	r3, [r2, #4]
   14904:	adds	r0, r0, r7
   14908:	movne	r5, r0
   1490c:	strne	r8, [r0]
   14910:	mov	r0, r5
   14914:	sub	sp, fp, #24
   14918:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1491c:	movw	r0, #36158	; 0x8d3e
   14920:	movw	r1, #35106	; 0x8922
   14924:	movw	r3, #36209	; 0x8d71
   14928:	movw	r2, #934	; 0x3a6
   1492c:	movt	r0, #1
   14930:	movt	r1, #1
   14934:	movt	r3, #1
   14938:	bl	1249c <__assert_fail@plt>

0001493c <flatcc_builder_append_offset_vector@@Base>:
   1493c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   14940:	add	fp, sp, #24
   14944:	sub	sp, sp, #8
   14948:	mov	r6, r0
   1494c:	ldr	r0, [r0, #32]
   14950:	mov	r8, r1
   14954:	ldrh	r1, [r0, #14]
   14958:	cmp	r1, #5
   1495c:	bne	14a60 <flatcc_builder_append_offset_vector@@Base+0x124>
   14960:	ldr	r1, [r0, #20]
   14964:	mov	r5, r2
   14968:	adds	r1, r1, r2
   1496c:	cmpcc	r1, #1073741824	; 0x40000000
   14970:	bcc	14994 <flatcc_builder_append_offset_vector@@Base+0x58>
   14974:	movw	r0, #39377	; 0x99d1
   14978:	movw	r1, #35106	; 0x8922
   1497c:	movw	r3, #39404	; 0x99ec
   14980:	mov	r2, #892	; 0x37c
   14984:	movt	r0, #1
   14988:	movt	r1, #1
   1498c:	movt	r3, #1
   14990:	bl	1249c <__assert_fail@plt>
   14994:	str	r1, [r0, #20]
   14998:	ldr	r4, [r6, #20]
   1499c:	ldr	r0, [r6, #24]
   149a0:	add	r1, r4, r5, lsl #2
   149a4:	cmp	r1, r0
   149a8:	str	r1, [r6, #20]
   149ac:	bcs	149d8 <flatcc_builder_append_offset_vector@@Base+0x9c>
   149b0:	ldr	r0, [r6, #16]
   149b4:	adds	r7, r0, r4
   149b8:	beq	14a50 <flatcc_builder_append_offset_vector@@Base+0x114>
   149bc:	lsl	r2, r5, #2
   149c0:	mov	r0, r7
   149c4:	mov	r1, r8
   149c8:	bl	123e8 <memcpy@plt>
   149cc:	mov	r0, r7
   149d0:	sub	sp, fp, #24
   149d4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   149d8:	ldr	r2, [r6, #28]
   149dc:	ldr	r0, [r6, #40]	; 0x28
   149e0:	ldr	r7, [r6, #48]	; 0x30
   149e4:	mov	r3, #1
   149e8:	str	r3, [sp]
   149ec:	mov	r3, #1
   149f0:	add	r1, r1, r2
   149f4:	add	r2, r1, #1
   149f8:	add	r1, r6, #60	; 0x3c
   149fc:	blx	r7
   14a00:	mov	r7, #0
   14a04:	cmp	r0, #0
   14a08:	beq	14a18 <flatcc_builder_append_offset_vector@@Base+0xdc>
   14a0c:	mov	r0, r7
   14a10:	sub	sp, fp, #24
   14a14:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14a18:	ldr	r1, [r6, #28]
   14a1c:	ldr	r0, [r6, #60]	; 0x3c
   14a20:	ldr	r3, [r6, #64]	; 0x40
   14a24:	ldr	r2, [r6, #32]
   14a28:	add	r0, r0, r1
   14a2c:	sub	r1, r3, r1
   14a30:	mvn	r3, #3
   14a34:	cmn	r1, #4
   14a38:	str	r0, [r6, #16]
   14a3c:	movcs	r1, r3
   14a40:	str	r1, [r6, #24]
   14a44:	str	r3, [r2, #4]
   14a48:	adds	r7, r0, r4
   14a4c:	bne	149bc <flatcc_builder_append_offset_vector@@Base+0x80>
   14a50:	mov	r7, #0
   14a54:	mov	r0, r7
   14a58:	sub	sp, fp, #24
   14a5c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14a60:	movw	r0, #36158	; 0x8d3e
   14a64:	movw	r1, #35106	; 0x8922
   14a68:	movw	r3, #36307	; 0x8dd3
   14a6c:	mov	r2, #948	; 0x3b4
   14a70:	movt	r0, #1
   14a74:	movt	r1, #1
   14a78:	movt	r3, #1
   14a7c:	bl	1249c <__assert_fail@plt>

00014a80 <flatcc_builder_extend_string@@Base>:
   14a80:	push	{r4, r5, fp, lr}
   14a84:	add	fp, sp, #8
   14a88:	sub	sp, sp, #8
   14a8c:	mov	r4, r0
   14a90:	ldr	r0, [r0, #32]
   14a94:	ldrh	r2, [r0, #14]
   14a98:	cmp	r2, #6
   14a9c:	bne	14b54 <flatcc_builder_extend_string@@Base+0xd4>
   14aa0:	ldr	r2, [r0, #20]
   14aa4:	adds	r2, r2, r1
   14aa8:	bcs	14b74 <flatcc_builder_extend_string@@Base+0xf4>
   14aac:	str	r2, [r0, #20]
   14ab0:	ldr	r5, [r4, #20]
   14ab4:	ldr	r0, [r4, #24]
   14ab8:	add	r1, r5, r1
   14abc:	cmp	r1, r0
   14ac0:	str	r1, [r4, #20]
   14ac4:	bcs	14ad8 <flatcc_builder_extend_string@@Base+0x58>
   14ac8:	ldr	r0, [r4, #16]
   14acc:	add	r0, r0, r5
   14ad0:	sub	sp, fp, #8
   14ad4:	pop	{r4, r5, fp, pc}
   14ad8:	ldr	r2, [r4, #28]
   14adc:	ldr	r0, [r4, #40]	; 0x28
   14ae0:	ldr	ip, [r4, #48]	; 0x30
   14ae4:	mov	r3, #1
   14ae8:	str	r3, [sp]
   14aec:	mov	r3, #1
   14af0:	add	r1, r1, r2
   14af4:	add	r2, r1, #1
   14af8:	add	r1, r4, #60	; 0x3c
   14afc:	blx	ip
   14b00:	mov	r1, r0
   14b04:	mov	r0, #0
   14b08:	cmp	r1, #0
   14b0c:	beq	14b18 <flatcc_builder_extend_string@@Base+0x98>
   14b10:	sub	sp, fp, #8
   14b14:	pop	{r4, r5, fp, pc}
   14b18:	ldr	r1, [r4, #28]
   14b1c:	ldr	r0, [r4, #60]	; 0x3c
   14b20:	ldr	r3, [r4, #64]	; 0x40
   14b24:	ldr	r2, [r4, #32]
   14b28:	add	r0, r0, r1
   14b2c:	sub	r1, r3, r1
   14b30:	mvn	r3, #3
   14b34:	cmn	r1, #4
   14b38:	str	r0, [r4, #16]
   14b3c:	movcs	r1, r3
   14b40:	str	r1, [r4, #24]
   14b44:	str	r3, [r2, #4]
   14b48:	add	r0, r0, r5
   14b4c:	sub	sp, fp, #8
   14b50:	pop	{r4, r5, fp, pc}
   14b54:	movw	r0, #36423	; 0x8e47
   14b58:	movw	r1, #35106	; 0x8922
   14b5c:	movw	r3, #36467	; 0x8e73
   14b60:	movw	r2, #957	; 0x3bd
   14b64:	movt	r0, #1
   14b68:	movt	r1, #1
   14b6c:	movt	r3, #1
   14b70:	bl	1249c <__assert_fail@plt>
   14b74:	movw	r0, #39377	; 0x99d1
   14b78:	movw	r1, #35106	; 0x8922
   14b7c:	movw	r3, #39404	; 0x99ec
   14b80:	mov	r2, #892	; 0x37c
   14b84:	movt	r0, #1
   14b88:	movt	r1, #1
   14b8c:	movt	r3, #1
   14b90:	bl	1249c <__assert_fail@plt>

00014b94 <flatcc_builder_append_string@@Base>:
   14b94:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   14b98:	add	fp, sp, #24
   14b9c:	sub	sp, sp, #8
   14ba0:	mov	r6, r0
   14ba4:	ldr	r0, [r0, #32]
   14ba8:	mov	r8, r1
   14bac:	ldrh	r1, [r0, #14]
   14bb0:	cmp	r1, #6
   14bb4:	bne	14c94 <flatcc_builder_append_string@@Base+0x100>
   14bb8:	ldr	r1, [r0, #20]
   14bbc:	mov	r4, r2
   14bc0:	adds	r1, r1, r2
   14bc4:	bcs	14cb4 <flatcc_builder_append_string@@Base+0x120>
   14bc8:	str	r1, [r0, #20]
   14bcc:	ldr	r5, [r6, #20]
   14bd0:	ldr	r0, [r6, #24]
   14bd4:	add	r1, r5, r4
   14bd8:	cmp	r1, r0
   14bdc:	str	r1, [r6, #20]
   14be0:	bcs	14c0c <flatcc_builder_append_string@@Base+0x78>
   14be4:	ldr	r0, [r6, #16]
   14be8:	adds	r7, r0, r5
   14bec:	beq	14c84 <flatcc_builder_append_string@@Base+0xf0>
   14bf0:	mov	r0, r7
   14bf4:	mov	r1, r8
   14bf8:	mov	r2, r4
   14bfc:	bl	123e8 <memcpy@plt>
   14c00:	mov	r0, r7
   14c04:	sub	sp, fp, #24
   14c08:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14c0c:	ldr	r2, [r6, #28]
   14c10:	ldr	r0, [r6, #40]	; 0x28
   14c14:	ldr	r7, [r6, #48]	; 0x30
   14c18:	mov	r3, #1
   14c1c:	str	r3, [sp]
   14c20:	mov	r3, #1
   14c24:	add	r1, r1, r2
   14c28:	add	r2, r1, #1
   14c2c:	add	r1, r6, #60	; 0x3c
   14c30:	blx	r7
   14c34:	mov	r7, #0
   14c38:	cmp	r0, #0
   14c3c:	beq	14c4c <flatcc_builder_append_string@@Base+0xb8>
   14c40:	mov	r0, r7
   14c44:	sub	sp, fp, #24
   14c48:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14c4c:	ldr	r1, [r6, #28]
   14c50:	ldr	r0, [r6, #60]	; 0x3c
   14c54:	ldr	r3, [r6, #64]	; 0x40
   14c58:	ldr	r2, [r6, #32]
   14c5c:	add	r0, r0, r1
   14c60:	sub	r1, r3, r1
   14c64:	mvn	r3, #3
   14c68:	cmn	r1, #4
   14c6c:	str	r0, [r6, #16]
   14c70:	movcs	r1, r3
   14c74:	str	r1, [r6, #24]
   14c78:	str	r3, [r2, #4]
   14c7c:	adds	r7, r0, r5
   14c80:	bne	14bf0 <flatcc_builder_append_string@@Base+0x5c>
   14c84:	mov	r7, #0
   14c88:	mov	r0, r7
   14c8c:	sub	sp, fp, #24
   14c90:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14c94:	movw	r0, #36423	; 0x8e47
   14c98:	movw	r1, #35106	; 0x8922
   14c9c:	movw	r3, #36530	; 0x8eb2
   14ca0:	movw	r2, #966	; 0x3c6
   14ca4:	movt	r0, #1
   14ca8:	movt	r1, #1
   14cac:	movt	r3, #1
   14cb0:	bl	1249c <__assert_fail@plt>
   14cb4:	movw	r0, #39377	; 0x99d1
   14cb8:	movw	r1, #35106	; 0x8922
   14cbc:	movw	r3, #39404	; 0x99ec
   14cc0:	mov	r2, #892	; 0x37c
   14cc4:	movt	r0, #1
   14cc8:	movt	r1, #1
   14ccc:	movt	r3, #1
   14cd0:	bl	1249c <__assert_fail@plt>

00014cd4 <flatcc_builder_append_string_str@@Base>:
   14cd4:	push	{r4, r5, fp, lr}
   14cd8:	add	fp, sp, #8
   14cdc:	mov	r5, r0
   14ce0:	mov	r0, r1
   14ce4:	mov	r4, r1
   14ce8:	bl	12454 <strlen@plt>
   14cec:	mov	r2, r0
   14cf0:	mov	r0, r5
   14cf4:	mov	r1, r4
   14cf8:	pop	{r4, r5, fp, lr}
   14cfc:	b	14b94 <flatcc_builder_append_string@@Base>

00014d00 <flatcc_builder_append_string_strn@@Base>:
   14d00:	push	{r4, r5, r6, sl, fp, lr}
   14d04:	add	fp, sp, #16
   14d08:	mov	r6, r0
   14d0c:	mov	r5, r1
   14d10:	mov	r0, r1
   14d14:	mov	r1, #0
   14d18:	mov	r4, r2
   14d1c:	bl	12478 <memchr@plt>
   14d20:	cmp	r0, #0
   14d24:	mov	r1, r5
   14d28:	subne	r4, r0, r5
   14d2c:	mov	r0, r6
   14d30:	mov	r2, r4
   14d34:	pop	{r4, r5, r6, sl, fp, lr}
   14d38:	b	14b94 <flatcc_builder_append_string@@Base>

00014d3c <flatcc_builder_truncate_vector@@Base>:
   14d3c:	push	{fp, lr}
   14d40:	mov	fp, sp
   14d44:	ldr	r2, [r0, #32]
   14d48:	ldrh	r3, [r2, #14]
   14d4c:	cmp	r3, #4
   14d50:	bne	14d98 <flatcc_builder_truncate_vector@@Base+0x5c>
   14d54:	ldr	r3, [r2, #20]
   14d58:	cmp	r3, r1
   14d5c:	bcc	14db8 <flatcc_builder_truncate_vector@@Base+0x7c>
   14d60:	sub	r3, r3, r1
   14d64:	str	r3, [r2, #20]
   14d68:	ldr	r2, [r0, #32]
   14d6c:	ldr	r3, [r0, #20]
   14d70:	ldr	ip, [r0, #16]
   14d74:	ldr	r2, [r2, #16]
   14d78:	mls	r3, r2, r1, r3
   14d7c:	mul	r2, r2, r1
   14d80:	mov	r1, #0
   14d84:	str	r3, [r0, #20]
   14d88:	add	r0, ip, r3
   14d8c:	bl	1246c <memset@plt>
   14d90:	mov	r0, #0
   14d94:	pop	{fp, pc}
   14d98:	movw	r0, #35909	; 0x8c45
   14d9c:	movw	r1, #35106	; 0x8922
   14da0:	movw	r3, #36607	; 0x8eff
   14da4:	movw	r2, #985	; 0x3d9
   14da8:	movt	r0, #1
   14dac:	movt	r1, #1
   14db0:	movt	r3, #1
   14db4:	bl	1249c <__assert_fail@plt>
   14db8:	movw	r0, #36670	; 0x8f3e
   14dbc:	movw	r1, #35106	; 0x8922
   14dc0:	movw	r3, #36607	; 0x8eff
   14dc4:	movw	r2, #986	; 0x3da
   14dc8:	movt	r0, #1
   14dcc:	movt	r1, #1
   14dd0:	movt	r3, #1
   14dd4:	bl	1249c <__assert_fail@plt>

00014dd8 <flatcc_builder_truncate_offset_vector@@Base>:
   14dd8:	push	{fp, lr}
   14ddc:	mov	fp, sp
   14de0:	ldr	r2, [r0, #32]
   14de4:	ldrh	r3, [r2, #14]
   14de8:	cmp	r3, #5
   14dec:	bne	14e34 <flatcc_builder_truncate_offset_vector@@Base+0x5c>
   14df0:	ldr	r3, [r2, #20]
   14df4:	cmp	r3, r1
   14df8:	bcc	14e54 <flatcc_builder_truncate_offset_vector@@Base+0x7c>
   14dfc:	sub	r3, r3, r1
   14e00:	str	r3, [r2, #20]
   14e04:	ldr	r2, [r0, #32]
   14e08:	ldr	r3, [r0, #20]
   14e0c:	ldr	ip, [r0, #16]
   14e10:	ldr	r2, [r2, #16]
   14e14:	mls	r3, r2, r1, r3
   14e18:	mul	r2, r2, r1
   14e1c:	mov	r1, #0
   14e20:	str	r3, [r0, #20]
   14e24:	add	r0, ip, r3
   14e28:	bl	1246c <memset@plt>
   14e2c:	mov	r0, #0
   14e30:	pop	{fp, pc}
   14e34:	movw	r0, #36158	; 0x8d3e
   14e38:	movw	r1, #35106	; 0x8922
   14e3c:	movw	r3, #36706	; 0x8f62
   14e40:	movw	r2, #994	; 0x3e2
   14e44:	movt	r0, #1
   14e48:	movt	r1, #1
   14e4c:	movt	r3, #1
   14e50:	bl	1249c <__assert_fail@plt>
   14e54:	movw	r0, #36776	; 0x8fa8
   14e58:	movw	r1, #35106	; 0x8922
   14e5c:	movw	r3, #36706	; 0x8f62
   14e60:	movw	r2, #995	; 0x3e3
   14e64:	movt	r0, #1
   14e68:	movt	r1, #1
   14e6c:	movt	r3, #1
   14e70:	bl	1249c <__assert_fail@plt>

00014e74 <flatcc_builder_truncate_string@@Base>:
   14e74:	push	{fp, lr}
   14e78:	mov	fp, sp
   14e7c:	mov	r2, r1
   14e80:	ldr	r1, [r0, #32]
   14e84:	ldrh	r3, [r1, #14]
   14e88:	cmp	r3, #6
   14e8c:	bne	14ec8 <flatcc_builder_truncate_string@@Base+0x54>
   14e90:	ldr	r3, [r1, #20]
   14e94:	cmp	r3, r2
   14e98:	bcc	14ee8 <flatcc_builder_truncate_string@@Base+0x74>
   14e9c:	sub	r3, r3, r2
   14ea0:	str	r3, [r1, #20]
   14ea4:	ldr	r3, [r0, #20]
   14ea8:	ldr	r1, [r0, #16]
   14eac:	sub	r3, r3, r2
   14eb0:	str	r3, [r0, #20]
   14eb4:	add	r0, r1, r3
   14eb8:	mov	r1, #0
   14ebc:	bl	1246c <memset@plt>
   14ec0:	mov	r0, #0
   14ec4:	pop	{fp, pc}
   14ec8:	movw	r0, #36423	; 0x8e47
   14ecc:	movw	r1, #35106	; 0x8922
   14ed0:	movw	r3, #36835	; 0x8fe3
   14ed4:	movw	r2, #1003	; 0x3eb
   14ed8:	movt	r0, #1
   14edc:	movt	r1, #1
   14ee0:	movt	r3, #1
   14ee4:	bl	1249c <__assert_fail@plt>
   14ee8:	movw	r0, #36898	; 0x9022
   14eec:	movw	r1, #35106	; 0x8922
   14ef0:	movw	r3, #36835	; 0x8fe3
   14ef4:	mov	r2, #1004	; 0x3ec
   14ef8:	movt	r0, #1
   14efc:	movt	r1, #1
   14f00:	movt	r3, #1
   14f04:	bl	1249c <__assert_fail@plt>

00014f08 <flatcc_builder_start_vector@@Base>:
   14f08:	push	{r4, r5, r6, r7, fp, lr}
   14f0c:	add	fp, sp, #16
   14f10:	mov	r7, #4
   14f14:	cmp	r2, #4
   14f18:	mov	r6, r1
   14f1c:	mov	r5, r3
   14f20:	mov	r4, r0
   14f24:	movls	r2, r7
   14f28:	mov	r1, r2
   14f2c:	bl	13f84 <flatcc_builder_start_buffer@@Base+0xbc>
   14f30:	mov	r1, r0
   14f34:	mvn	r0, #0
   14f38:	cmp	r1, #0
   14f3c:	popne	{r4, r5, r6, r7, fp, pc}
   14f40:	ldr	r0, [r4, #32]
   14f44:	str	r6, [r0, #16]
   14f48:	mov	r0, #0
   14f4c:	ldr	r1, [r4, #32]
   14f50:	str	r0, [r1, #20]
   14f54:	ldr	r1, [r4, #32]
   14f58:	str	r5, [r1, #24]
   14f5c:	ldr	r1, [r4, #32]
   14f60:	strh	r7, [r1, #14]
   14f64:	ldr	r2, [r4, #28]
   14f68:	ldr	r3, [r4, #60]	; 0x3c
   14f6c:	ldr	r7, [r4, #64]	; 0x40
   14f70:	add	r3, r3, r2
   14f74:	sub	r2, r7, r2
   14f78:	str	r3, [r4, #16]
   14f7c:	mvn	r3, #3
   14f80:	cmn	r2, #4
   14f84:	movcs	r2, r3
   14f88:	str	r2, [r4, #24]
   14f8c:	str	r3, [r1, #4]
   14f90:	pop	{r4, r5, r6, r7, fp, pc}

00014f94 <flatcc_builder_start_offset_vector@@Base>:
   14f94:	push	{r4, r5, fp, lr}
   14f98:	add	fp, sp, #8
   14f9c:	mov	r1, #4
   14fa0:	mov	r4, r0
   14fa4:	mov	r5, #4
   14fa8:	bl	13f84 <flatcc_builder_start_buffer@@Base+0xbc>
   14fac:	mov	r1, r0
   14fb0:	mvn	r0, #0
   14fb4:	cmp	r1, #0
   14fb8:	popne	{r4, r5, fp, pc}
   14fbc:	ldr	r0, [r4, #32]
   14fc0:	mov	r2, #5
   14fc4:	str	r5, [r0, #16]
   14fc8:	mov	r0, #0
   14fcc:	ldr	r1, [r4, #32]
   14fd0:	str	r0, [r1, #20]
   14fd4:	ldr	r1, [r4, #32]
   14fd8:	strh	r2, [r1, #14]
   14fdc:	ldr	r2, [r4, #28]
   14fe0:	ldr	r3, [r4, #60]	; 0x3c
   14fe4:	ldr	r5, [r4, #64]	; 0x40
   14fe8:	add	r3, r3, r2
   14fec:	sub	r2, r5, r2
   14ff0:	str	r3, [r4, #16]
   14ff4:	mvn	r3, #3
   14ff8:	cmn	r2, #4
   14ffc:	movcs	r2, r3
   15000:	str	r2, [r4, #24]
   15004:	str	r3, [r1, #4]
   15008:	pop	{r4, r5, fp, pc}

0001500c <flatcc_builder_create_offset_vector@@Base>:
   1500c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   15010:	add	fp, sp, #24
   15014:	sub	sp, sp, #8
   15018:	mov	r8, r1
   1501c:	mov	r1, #4
   15020:	mov	r6, r2
   15024:	mov	r4, r0
   15028:	mov	r5, #4
   1502c:	bl	13f84 <flatcc_builder_start_buffer@@Base+0xbc>
   15030:	mov	r7, #0
   15034:	cmp	r0, #0
   15038:	beq	15048 <flatcc_builder_create_offset_vector@@Base+0x3c>
   1503c:	mov	r0, r7
   15040:	sub	sp, fp, #24
   15044:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   15048:	ldr	r0, [r4, #32]
   1504c:	mov	r1, #0
   15050:	str	r5, [r0, #16]
   15054:	ldr	r0, [r4, #32]
   15058:	str	r1, [r0, #20]
   1505c:	mov	r1, #5
   15060:	ldr	r0, [r4, #32]
   15064:	strh	r1, [r0, #14]
   15068:	ldr	r1, [r4, #28]
   1506c:	ldr	r2, [r4, #60]	; 0x3c
   15070:	ldr	r3, [r4, #64]	; 0x40
   15074:	add	r2, r2, r1
   15078:	sub	r1, r3, r1
   1507c:	str	r2, [r4, #16]
   15080:	mvn	r2, #3
   15084:	cmn	r1, #4
   15088:	movcs	r1, r2
   1508c:	str	r1, [r4, #24]
   15090:	str	r2, [r0, #4]
   15094:	ldr	r1, [r0, #20]
   15098:	adds	r1, r1, r6
   1509c:	cmpcc	r1, #1073741824	; 0x40000000
   150a0:	bcc	150c4 <flatcc_builder_create_offset_vector@@Base+0xb8>
   150a4:	movw	r0, #39377	; 0x99d1
   150a8:	movw	r1, #35106	; 0x8922
   150ac:	movw	r3, #39404	; 0x99ec
   150b0:	mov	r2, #892	; 0x37c
   150b4:	movt	r0, #1
   150b8:	movt	r1, #1
   150bc:	movt	r3, #1
   150c0:	bl	1249c <__assert_fail@plt>
   150c4:	str	r1, [r0, #20]
   150c8:	ldr	r5, [r4, #20]
   150cc:	ldr	r0, [r4, #24]
   150d0:	add	r1, r5, r6, lsl #2
   150d4:	cmp	r1, r0
   150d8:	str	r1, [r4, #20]
   150dc:	bcs	151b0 <flatcc_builder_create_offset_vector@@Base+0x1a4>
   150e0:	ldr	r0, [r4, #16]
   150e4:	adds	r0, r0, r5
   150e8:	beq	1521c <flatcc_builder_create_offset_vector@@Base+0x210>
   150ec:	lsl	r2, r6, #2
   150f0:	mov	r1, r8
   150f4:	bl	123e8 <memcpy@plt>
   150f8:	ldr	r0, [r4, #32]
   150fc:	ldrh	r1, [r0, #14]
   15100:	cmp	r1, #5
   15104:	bne	1522c <flatcc_builder_create_offset_vector@@Base+0x220>
   15108:	ldr	r2, [r0, #20]
   1510c:	ldr	r1, [r4, #16]
   15110:	mov	r0, r4
   15114:	mov	r3, #0
   15118:	mov	r7, #0
   1511c:	bl	16294 <flatcc_builder_create_offset_vector_direct@@Base+0x8>
   15120:	cmp	r0, #0
   15124:	beq	1503c <flatcc_builder_create_offset_vector@@Base+0x30>
   15128:	mov	r5, r0
   1512c:	ldr	r0, [r4, #16]
   15130:	ldr	r2, [r4, #20]
   15134:	mov	r1, #0
   15138:	bl	1246c <memset@plt>
   1513c:	ldr	r0, [r4, #32]
   15140:	ldr	r1, [r4, #60]	; 0x3c
   15144:	ldr	r2, [r4, #64]	; 0x40
   15148:	ldr	r3, [r0, #8]
   1514c:	str	r3, [r4, #20]
   15150:	ldr	r3, [r0]
   15154:	str	r3, [r4, #28]
   15158:	add	r1, r1, r3
   1515c:	ldr	r7, [r0, #4]
   15160:	str	r1, [r4, #16]
   15164:	sub	r1, r2, r3
   15168:	cmp	r1, r7
   1516c:	movhi	r1, r7
   15170:	mov	r7, r5
   15174:	str	r1, [r4, #24]
   15178:	ldrh	r1, [r4, #130]	; 0x82
   1517c:	ldrh	r2, [r4, #128]	; 0x80
   15180:	cmp	r2, r1
   15184:	strhcc	r1, [r4, #128]	; 0x80
   15188:	ldrh	r1, [r0, #12]
   1518c:	sub	r0, r0, #36	; 0x24
   15190:	str	r0, [r4, #32]
   15194:	strh	r1, [r4, #130]	; 0x82
   15198:	ldr	r0, [r4, #156]	; 0x9c
   1519c:	sub	r0, r0, #1
   151a0:	str	r0, [r4, #156]	; 0x9c
   151a4:	mov	r0, r7
   151a8:	sub	sp, fp, #24
   151ac:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   151b0:	ldr	r2, [r4, #28]
   151b4:	ldr	r0, [r4, #40]	; 0x28
   151b8:	ldr	r7, [r4, #48]	; 0x30
   151bc:	mov	r3, #1
   151c0:	str	r3, [sp]
   151c4:	mov	r3, #1
   151c8:	add	r1, r1, r2
   151cc:	add	r2, r1, #1
   151d0:	add	r1, r4, #60	; 0x3c
   151d4:	blx	r7
   151d8:	mov	r7, #0
   151dc:	cmp	r0, #0
   151e0:	bne	1503c <flatcc_builder_create_offset_vector@@Base+0x30>
   151e4:	ldr	r1, [r4, #28]
   151e8:	ldr	r0, [r4, #60]	; 0x3c
   151ec:	ldr	r3, [r4, #64]	; 0x40
   151f0:	ldr	r2, [r4, #32]
   151f4:	add	r0, r0, r1
   151f8:	sub	r1, r3, r1
   151fc:	mvn	r3, #3
   15200:	cmn	r1, #4
   15204:	str	r0, [r4, #16]
   15208:	movcs	r1, r3
   1520c:	str	r1, [r4, #24]
   15210:	str	r3, [r2, #4]
   15214:	adds	r0, r0, r5
   15218:	bne	150ec <flatcc_builder_create_offset_vector@@Base+0xe0>
   1521c:	mov	r7, #0
   15220:	mov	r0, r7
   15224:	sub	sp, fp, #24
   15228:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1522c:	movw	r0, #36158	; 0x8d3e
   15230:	movw	r1, #35106	; 0x8922
   15234:	movw	r3, #37741	; 0x936d
   15238:	movw	r2, #1480	; 0x5c8
   1523c:	movt	r0, #1
   15240:	movt	r1, #1
   15244:	movt	r3, #1
   15248:	bl	1249c <__assert_fail@plt>

0001524c <flatcc_builder_end_offset_vector@@Base>:
   1524c:	push	{r4, r5, fp, lr}
   15250:	add	fp, sp, #8
   15254:	mov	r4, r0
   15258:	ldr	r0, [r0, #32]
   1525c:	ldrh	r1, [r0, #14]
   15260:	cmp	r1, #5
   15264:	bne	15304 <flatcc_builder_end_offset_vector@@Base+0xb8>
   15268:	ldr	r2, [r0, #20]
   1526c:	ldr	r1, [r4, #16]
   15270:	mov	r0, r4
   15274:	mov	r3, #0
   15278:	bl	16294 <flatcc_builder_create_offset_vector_direct@@Base+0x8>
   1527c:	mov	r5, r0
   15280:	cmp	r0, #0
   15284:	beq	152fc <flatcc_builder_end_offset_vector@@Base+0xb0>
   15288:	ldr	r0, [r4, #16]
   1528c:	ldr	r2, [r4, #20]
   15290:	mov	r1, #0
   15294:	bl	1246c <memset@plt>
   15298:	ldr	r0, [r4, #32]
   1529c:	ldr	r1, [r4, #60]	; 0x3c
   152a0:	ldr	ip, [r4, #64]	; 0x40
   152a4:	ldr	r3, [r0, #8]
   152a8:	str	r3, [r4, #20]
   152ac:	ldr	r3, [r0]
   152b0:	str	r3, [r4, #28]
   152b4:	add	r1, r1, r3
   152b8:	ldr	r2, [r0, #4]
   152bc:	str	r1, [r4, #16]
   152c0:	sub	r1, ip, r3
   152c4:	cmp	r1, r2
   152c8:	movhi	r1, r2
   152cc:	str	r1, [r4, #24]
   152d0:	ldrh	r1, [r4, #130]	; 0x82
   152d4:	ldrh	r2, [r4, #128]	; 0x80
   152d8:	cmp	r2, r1
   152dc:	strhcc	r1, [r4, #128]	; 0x80
   152e0:	ldrh	r1, [r0, #12]
   152e4:	sub	r0, r0, #36	; 0x24
   152e8:	str	r0, [r4, #32]
   152ec:	strh	r1, [r4, #130]	; 0x82
   152f0:	ldr	r0, [r4, #156]	; 0x9c
   152f4:	sub	r0, r0, #1
   152f8:	str	r0, [r4, #156]	; 0x9c
   152fc:	mov	r0, r5
   15300:	pop	{r4, r5, fp, pc}
   15304:	movw	r0, #36158	; 0x8d3e
   15308:	movw	r1, #35106	; 0x8922
   1530c:	movw	r3, #37741	; 0x936d
   15310:	movw	r2, #1480	; 0x5c8
   15314:	movt	r0, #1
   15318:	movt	r1, #1
   1531c:	movt	r3, #1
   15320:	bl	1249c <__assert_fail@plt>

00015324 <flatcc_builder_start_string@@Base>:
   15324:	push	{r4, r5, fp, lr}
   15328:	add	fp, sp, #8
   1532c:	mov	r1, #1
   15330:	mov	r4, r0
   15334:	mov	r5, #1
   15338:	bl	13f84 <flatcc_builder_start_buffer@@Base+0xbc>
   1533c:	mov	r1, r0
   15340:	mvn	r0, #0
   15344:	cmp	r1, #0
   15348:	popne	{r4, r5, fp, pc}
   1534c:	ldr	r0, [r4, #32]
   15350:	mov	r2, #6
   15354:	str	r5, [r0, #16]
   15358:	mov	r0, #0
   1535c:	ldr	r1, [r4, #32]
   15360:	str	r0, [r1, #20]
   15364:	ldr	r1, [r4, #32]
   15368:	strh	r2, [r1, #14]
   1536c:	ldr	r2, [r4, #28]
   15370:	ldr	r3, [r4, #60]	; 0x3c
   15374:	ldr	r5, [r4, #64]	; 0x40
   15378:	add	r3, r3, r2
   1537c:	sub	r2, r5, r2
   15380:	str	r3, [r4, #16]
   15384:	mvn	r3, #3
   15388:	cmn	r2, #4
   1538c:	movcs	r2, r3
   15390:	str	r2, [r4, #24]
   15394:	str	r3, [r1, #4]
   15398:	pop	{r4, r5, fp, pc}

0001539c <flatcc_builder_reserve_table@@Base>:
   1539c:	push	{r4, r5, r6, sl, fp, lr}
   153a0:	add	fp, sp, #16
   153a4:	sub	sp, sp, #8
   153a8:	cmn	r1, #1
   153ac:	ble	15480 <flatcc_builder_reserve_table@@Base+0xe4>
   153b0:	mov	r4, r0
   153b4:	ldr	r0, [r0, #32]
   153b8:	mov	r5, r1
   153bc:	ldr	r1, [r4, #56]	; 0x38
   153c0:	ldrh	r2, [r0, #28]
   153c4:	ldr	r0, [r0, #16]
   153c8:	add	r6, r0, r2, lsl #1
   153cc:	add	r0, r6, r5, lsl #1
   153d0:	add	r2, r0, #4
   153d4:	cmp	r2, r1
   153d8:	bls	15400 <flatcc_builder_reserve_table@@Base+0x64>
   153dc:	ldr	r0, [r4, #40]	; 0x28
   153e0:	ldr	ip, [r4, #48]	; 0x30
   153e4:	mov	r3, #0
   153e8:	add	r1, r4, #52	; 0x34
   153ec:	str	r3, [sp]
   153f0:	mov	r3, #1
   153f4:	blx	ip
   153f8:	cmp	r0, #0
   153fc:	bne	154a0 <flatcc_builder_reserve_table@@Base+0x104>
   15400:	ldr	r0, [r4, #52]	; 0x34
   15404:	adds	r0, r0, r6
   15408:	str	r0, [r4, #4]
   1540c:	mvneq	r0, #0
   15410:	subeq	sp, fp, #16
   15414:	popeq	{r4, r5, r6, sl, fp, pc}
   15418:	add	r0, r0, #4
   1541c:	lsl	r1, r5, #1
   15420:	str	r0, [r4, #4]
   15424:	ldr	r0, [r4, #32]
   15428:	ldr	r3, [r4, #80]	; 0x50
   1542c:	ldr	r5, [r0, #20]
   15430:	orr	r0, r1, #1
   15434:	add	r2, r5, r0
   15438:	cmp	r2, r3
   1543c:	bls	15464 <flatcc_builder_reserve_table@@Base+0xc8>
   15440:	ldr	r0, [r4, #40]	; 0x28
   15444:	ldr	r6, [r4, #48]	; 0x30
   15448:	mov	r3, #3
   1544c:	add	r1, r4, #76	; 0x4c
   15450:	str	r3, [sp]
   15454:	mov	r3, #0
   15458:	blx	r6
   1545c:	cmp	r0, #0
   15460:	bne	154a0 <flatcc_builder_reserve_table@@Base+0x104>
   15464:	ldr	r0, [r4, #76]	; 0x4c
   15468:	adds	r0, r0, r5
   1546c:	str	r0, [r4]
   15470:	mov	r0, #0
   15474:	mvneq	r0, #0
   15478:	sub	sp, fp, #16
   1547c:	pop	{r4, r5, r6, sl, fp, pc}
   15480:	movw	r0, #36997	; 0x9085
   15484:	movw	r1, #35106	; 0x8922
   15488:	movw	r3, #36932	; 0x9044
   1548c:	movw	r2, #1065	; 0x429
   15490:	movt	r0, #1
   15494:	movt	r1, #1
   15498:	movt	r3, #1
   1549c:	bl	1249c <__assert_fail@plt>
   154a0:	movw	r0, #39624	; 0x9ac8
   154a4:	movw	r1, #35106	; 0x8922
   154a8:	movw	r3, #39170	; 0x9902
   154ac:	mov	r2, #308	; 0x134
   154b0:	movt	r0, #1
   154b4:	movt	r1, #1
   154b8:	movt	r3, #1
   154bc:	bl	1249c <__assert_fail@plt>

000154c0 <flatcc_builder_start_table@@Base>:
   154c0:	push	{r4, r5, r6, r7, fp, lr}
   154c4:	add	fp, sp, #16
   154c8:	sub	sp, sp, #8
   154cc:	mov	r6, r1
   154d0:	mov	r1, #4
   154d4:	mov	r4, r0
   154d8:	bl	13f84 <flatcc_builder_start_buffer@@Base+0xbc>
   154dc:	mvn	r5, #0
   154e0:	cmp	r0, #0
   154e4:	beq	154f4 <flatcc_builder_start_table@@Base+0x34>
   154e8:	mov	r0, r5
   154ec:	sub	sp, fp, #16
   154f0:	pop	{r4, r5, r6, r7, fp, pc}
   154f4:	mov	r1, r4
   154f8:	ldr	r2, [r4, #4]
   154fc:	ldr	r3, [r4, #32]
   15500:	ldr	r0, [r1, #52]!	; 0x34
   15504:	sub	r0, r2, r0
   15508:	str	r0, [r3, #16]
   1550c:	ldr	r0, [r4]
   15510:	ldr	r3, [r4, #76]	; 0x4c
   15514:	ldr	r2, [r4, #32]
   15518:	sub	r0, r0, r3
   1551c:	mov	r3, #0
   15520:	str	r0, [r2, #20]
   15524:	ldr	r0, [r4, #12]
   15528:	ldr	r2, [r4, #32]
   1552c:	str	r0, [r2, #24]
   15530:	ldr	r0, [r4, #32]
   15534:	ldrh	r2, [r4, #8]
   15538:	strh	r2, [r0, #28]
   1553c:	movw	r0, #15186	; 0x3b52
   15540:	strh	r3, [r4, #8]
   15544:	mov	r2, #3
   15548:	movt	r0, #12137	; 0x2f69
   1554c:	str	r0, [r4, #12]
   15550:	ldr	r0, [r4, #32]
   15554:	strh	r2, [r0, #14]
   15558:	ldrh	r2, [r0, #28]
   1555c:	ldr	r0, [r0, #16]
   15560:	add	r7, r0, r2, lsl #1
   15564:	add	r0, r7, r6, lsl #1
   15568:	add	r2, r0, #4
   1556c:	ldr	r0, [r4, #56]	; 0x38
   15570:	cmp	r2, r0
   15574:	bls	15594 <flatcc_builder_start_table@@Base+0xd4>
   15578:	ldr	r0, [r4, #40]	; 0x28
   1557c:	ldr	ip, [r4, #48]	; 0x30
   15580:	str	r3, [sp]
   15584:	mov	r3, #1
   15588:	blx	ip
   1558c:	cmp	r0, #0
   15590:	bne	15640 <flatcc_builder_start_table@@Base+0x180>
   15594:	ldr	r0, [r4, #52]	; 0x34
   15598:	adds	r0, r0, r7
   1559c:	str	r0, [r4, #4]
   155a0:	beq	154e8 <flatcc_builder_start_table@@Base+0x28>
   155a4:	add	r0, r0, #4
   155a8:	lsl	r1, r6, #1
   155ac:	str	r0, [r4, #4]
   155b0:	ldr	r0, [r4, #32]
   155b4:	ldr	r3, [r4, #80]	; 0x50
   155b8:	ldr	r6, [r0, #20]
   155bc:	orr	r0, r1, #1
   155c0:	add	r2, r6, r0
   155c4:	cmp	r2, r3
   155c8:	bls	155f0 <flatcc_builder_start_table@@Base+0x130>
   155cc:	ldr	r0, [r4, #40]	; 0x28
   155d0:	ldr	r7, [r4, #48]	; 0x30
   155d4:	mov	r3, #3
   155d8:	add	r1, r4, #76	; 0x4c
   155dc:	str	r3, [sp]
   155e0:	mov	r3, #0
   155e4:	blx	r7
   155e8:	cmp	r0, #0
   155ec:	bne	15640 <flatcc_builder_start_table@@Base+0x180>
   155f0:	ldr	r0, [r4, #76]	; 0x4c
   155f4:	adds	r0, r0, r6
   155f8:	str	r0, [r4]
   155fc:	beq	154e8 <flatcc_builder_start_table@@Base+0x28>
   15600:	ldr	r0, [r4, #28]
   15604:	ldr	r2, [r4, #60]	; 0x3c
   15608:	ldr	r3, [r4, #64]	; 0x40
   1560c:	ldr	r1, [r4, #32]
   15610:	mov	r5, #0
   15614:	add	r2, r2, r0
   15618:	sub	r0, r3, r0
   1561c:	str	r2, [r4, #16]
   15620:	movw	r2, #65532	; 0xfffc
   15624:	cmp	r0, r2
   15628:	movcs	r0, r2
   1562c:	str	r0, [r4, #24]
   15630:	str	r2, [r1, #4]
   15634:	mov	r0, r5
   15638:	sub	sp, fp, #16
   1563c:	pop	{r4, r5, r6, r7, fp, pc}
   15640:	movw	r0, #39624	; 0x9ac8
   15644:	movw	r1, #35106	; 0x8922
   15648:	movw	r3, #39170	; 0x9902
   1564c:	mov	r2, #308	; 0x134
   15650:	movt	r0, #1
   15654:	movt	r1, #1
   15658:	movt	r3, #1
   1565c:	bl	1249c <__assert_fail@plt>

00015660 <flatcc_builder_create_vtable@@Base>:
   15660:	push	{r4, r5, fp, lr}
   15664:	add	fp, sp, #8
   15668:	sub	sp, sp, #80	; 0x50
   1566c:	mov	r3, r2
   15670:	mov	r2, #0
   15674:	mov	r4, r0
   15678:	cmp	r3, #0
   1567c:	str	r2, [sp, #12]
   15680:	str	r2, [sp, #8]
   15684:	movne	r2, #1
   15688:	strne	r1, [sp, #16]
   1568c:	strne	r3, [sp, #8]
   15690:	strne	r3, [sp, #20]
   15694:	strne	r2, [sp, #12]
   15698:	ldr	r0, [r4, #152]	; 0x98
   1569c:	cmp	r0, #0
   156a0:	bne	156b0 <flatcc_builder_create_vtable@@Base+0x50>
   156a4:	ldr	r0, [r4, #180]	; 0xb4
   156a8:	cmp	r0, #0
   156ac:	beq	156fc <flatcc_builder_create_vtable@@Base+0x9c>
   156b0:	cmp	r3, #0
   156b4:	beq	15740 <flatcc_builder_create_vtable@@Base+0xe0>
   156b8:	ldr	r0, [r4, #136]	; 0x88
   156bc:	ldr	ip, [r4, #44]	; 0x2c
   156c0:	add	r1, sp, #8
   156c4:	add	r1, r1, #8
   156c8:	sub	r5, r0, r3
   156cc:	ldr	r0, [r4, #36]	; 0x24
   156d0:	str	r3, [sp]
   156d4:	mov	r3, r5
   156d8:	blx	ip
   156dc:	cmp	r0, #0
   156e0:	bne	15760 <flatcc_builder_create_vtable@@Base+0x100>
   156e4:	cmp	r5, #0
   156e8:	str	r5, [r4, #136]	; 0x88
   156ec:	beq	15734 <flatcc_builder_create_vtable@@Base+0xd4>
   156f0:	add	r0, r5, #1
   156f4:	sub	sp, fp, #8
   156f8:	pop	{r4, r5, fp, pc}
   156fc:	ldr	r5, [r4, #140]	; 0x8c
   15700:	ldr	r0, [r4, #36]	; 0x24
   15704:	ldr	ip, [r4, #44]	; 0x2c
   15708:	add	r1, r5, r3
   1570c:	str	r1, [r4, #140]	; 0x8c
   15710:	add	r1, sp, #8
   15714:	str	r3, [sp]
   15718:	mov	r3, r5
   1571c:	add	r1, r1, #8
   15720:	blx	ip
   15724:	cmp	r0, #0
   15728:	bne	15780 <flatcc_builder_create_vtable@@Base+0x120>
   1572c:	adds	r0, r5, #1
   15730:	bne	156f4 <flatcc_builder_create_vtable@@Base+0x94>
   15734:	mov	r0, #0
   15738:	sub	sp, fp, #8
   1573c:	pop	{r4, r5, fp, pc}
   15740:	movw	r0, #39624	; 0x9ac8
   15744:	movw	r1, #35106	; 0x8922
   15748:	movw	r3, #39303	; 0x9987
   1574c:	movw	r2, #647	; 0x287
   15750:	movt	r0, #1
   15754:	movt	r1, #1
   15758:	movt	r3, #1
   1575c:	bl	1249c <__assert_fail@plt>
   15760:	movw	r0, #39624	; 0x9ac8
   15764:	movw	r1, #35106	; 0x8922
   15768:	movw	r3, #39303	; 0x9987
   1576c:	movw	r2, #651	; 0x28b
   15770:	movt	r0, #1
   15774:	movt	r1, #1
   15778:	movt	r3, #1
   1577c:	bl	1249c <__assert_fail@plt>
   15780:	movw	r0, #39624	; 0x9ac8
   15784:	movw	r1, #35106	; 0x8922
   15788:	movw	r3, #39491	; 0x9a43
   1578c:	movw	r2, #677	; 0x2a5
   15790:	movt	r0, #1
   15794:	movt	r1, #1
   15798:	movt	r3, #1
   1579c:	bl	1249c <__assert_fail@plt>

000157a0 <flatcc_builder_create_cached_vtable@@Base>:
   157a0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   157a4:	add	fp, sp, #28
   157a8:	sub	sp, sp, #20
   157ac:	mov	sl, r0
   157b0:	ldr	r0, [r0, #116]	; 0x74
   157b4:	mov	r8, r3
   157b8:	mov	r5, r2
   157bc:	str	r1, [sp, #16]
   157c0:	cmp	r0, #0
   157c4:	beq	15868 <flatcc_builder_create_cached_vtable@@Base+0xc8>
   157c8:	ldr	r1, [sl, #92]	; 0x5c
   157cc:	rsb	r0, r0, #32
   157d0:	lsr	r0, r8, r0
   157d4:	add	r6, r1, r0, lsl #2
   157d8:	cmp	r6, #0
   157dc:	beq	1592c <flatcc_builder_create_cached_vtable@@Base+0x18c>
   157e0:	ldr	r7, [r6]
   157e4:	str	r6, [sp, #12]
   157e8:	cmp	r7, #0
   157ec:	beq	1593c <flatcc_builder_create_cached_vtable@@Base+0x19c>
   157f0:	ldr	r4, [sl, #68]	; 0x44
   157f4:	ldr	r8, [sl, #100]	; 0x64
   157f8:	mov	r0, #0
   157fc:	str	r0, [sp, #8]
   15800:	add	r9, r8, r7
   15804:	mov	r1, r4
   15808:	ldr	r0, [r9, #8]
   1580c:	ldrh	r0, [r1, r0]!	; <UNPREDICTABLE>
   15810:	cmp	r0, r5
   15814:	bne	1582c <flatcc_builder_create_cached_vtable@@Base+0x8c>
   15818:	ldr	r0, [sp, #16]
   1581c:	mov	r2, r5
   15820:	bl	12400 <memcmp@plt>
   15824:	cmp	r0, #0
   15828:	beq	15840 <flatcc_builder_create_cached_vtable@@Base+0xa0>
   1582c:	ldr	r7, [r9, #12]!
   15830:	cmp	r7, #0
   15834:	mov	r6, r9
   15838:	bne	15800 <flatcc_builder_create_cached_vtable@@Base+0x60>
   1583c:	b	15924 <flatcc_builder_create_cached_vtable@@Base+0x184>
   15840:	ldr	r0, [sl, #152]	; 0x98
   15844:	ldr	r1, [r9, #4]
   15848:	cmp	r1, r0
   1584c:	beq	15aa8 <flatcc_builder_create_cached_vtable@@Base+0x308>
   15850:	mov	r6, r9
   15854:	mov	r0, r9
   15858:	ldr	r7, [r6, #12]!
   1585c:	cmp	r7, #0
   15860:	bne	157fc <flatcc_builder_create_cached_vtable@@Base+0x5c>
   15864:	b	15940 <flatcc_builder_create_cached_vtable@@Base+0x1a0>
   15868:	ldr	r0, [sl, #124]	; 0x7c
   1586c:	cmp	r0, #0
   15870:	bne	15afc <flatcc_builder_create_cached_vtable@@Base+0x35c>
   15874:	ldr	r0, [sl, #104]	; 0x68
   15878:	add	r7, sl, #100	; 0x64
   1587c:	cmp	r0, #15
   15880:	bhi	158ac <flatcc_builder_create_cached_vtable@@Base+0x10c>
   15884:	ldr	r0, [sl, #40]	; 0x28
   15888:	ldr	r6, [sl, #48]	; 0x30
   1588c:	mov	r1, #6
   15890:	mov	r2, #16
   15894:	mov	r3, #0
   15898:	str	r1, [sp]
   1589c:	mov	r1, r7
   158a0:	blx	r6
   158a4:	cmp	r0, #0
   158a8:	bne	15adc <flatcc_builder_create_cached_vtable@@Base+0x33c>
   158ac:	ldr	r0, [r7]
   158b0:	mov	r7, #0
   158b4:	cmp	r0, #0
   158b8:	beq	159e0 <flatcc_builder_create_cached_vtable@@Base+0x240>
   158bc:	mov	r0, #16
   158c0:	mov	r2, #5
   158c4:	add	r1, sl, #92	; 0x5c
   158c8:	mov	r3, #1
   158cc:	mov	r4, #256	; 0x100
   158d0:	str	r0, [sl, #124]	; 0x7c
   158d4:	ldr	r0, [sl, #40]	; 0x28
   158d8:	ldr	r6, [sl, #48]	; 0x30
   158dc:	str	r2, [sp]
   158e0:	mov	r2, #256	; 0x100
   158e4:	blx	r6
   158e8:	cmp	r0, #0
   158ec:	bne	159e0 <flatcc_builder_create_cached_vtable@@Base+0x240>
   158f0:	ldr	r0, [sl, #96]	; 0x60
   158f4:	mov	r1, r4
   158f8:	lsl	r4, r4, #1
   158fc:	cmp	r0, r1, lsl #1
   15900:	bcs	158f4 <flatcc_builder_create_cached_vtable@@Base+0x154>
   15904:	lsr	r1, r1, #2
   15908:	mvn	r0, #0
   1590c:	mov	r2, #1
   15910:	add	r0, r0, #1
   15914:	cmp	r1, r2, lsl r0
   15918:	bhi	15910 <flatcc_builder_create_cached_vtable@@Base+0x170>
   1591c:	str	r0, [sl, #116]	; 0x74
   15920:	b	157c8 <flatcc_builder_create_cached_vtable@@Base+0x28>
   15924:	ldr	r9, [sp, #8]
   15928:	b	15940 <flatcc_builder_create_cached_vtable@@Base+0x1a0>
   1592c:	mov	r7, #0
   15930:	mov	r0, r7
   15934:	sub	sp, fp, #28
   15938:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1593c:	mov	r9, #0
   15940:	ldr	r4, [sl, #124]	; 0x7c
   15944:	ldr	r0, [sl, #104]	; 0x68
   15948:	add	r7, sl, #100	; 0x64
   1594c:	add	r2, r4, #16
   15950:	cmp	r2, r0
   15954:	bls	1597c <flatcc_builder_create_cached_vtable@@Base+0x1dc>
   15958:	ldr	r0, [sl, #40]	; 0x28
   1595c:	ldr	r6, [sl, #48]	; 0x30
   15960:	mov	r1, #6
   15964:	mov	r3, #0
   15968:	str	r1, [sp]
   1596c:	mov	r1, r7
   15970:	blx	r6
   15974:	cmp	r0, #0
   15978:	bne	15adc <flatcc_builder_create_cached_vtable@@Base+0x33c>
   1597c:	ldr	r0, [r7]
   15980:	mov	r7, #0
   15984:	adds	r4, r0, r4
   15988:	beq	159e0 <flatcc_builder_create_cached_vtable@@Base+0x240>
   1598c:	ldr	r0, [sl, #124]	; 0x7c
   15990:	ldr	r1, [sl, #152]	; 0x98
   15994:	add	r2, r0, #16
   15998:	str	r2, [sl, #124]	; 0x7c
   1599c:	ldr	r2, [sp, #12]
   159a0:	str	r1, [r4, #4]
   159a4:	ldr	r1, [r2]
   159a8:	str	r1, [r4, #12]
   159ac:	ldr	r1, [sp, #16]
   159b0:	str	r0, [r2]
   159b4:	mov	r0, sl
   159b8:	mov	r2, r5
   159bc:	bl	15660 <flatcc_builder_create_vtable@@Base>
   159c0:	cmp	r0, #0
   159c4:	str	r0, [r4]
   159c8:	beq	159e0 <flatcc_builder_create_cached_vtable@@Base+0x240>
   159cc:	cmp	r9, #0
   159d0:	beq	159ec <flatcc_builder_create_cached_vtable@@Base+0x24c>
   159d4:	ldr	r0, [r9, #8]
   159d8:	str	r0, [r4, #8]
   159dc:	ldr	r7, [r4]
   159e0:	mov	r0, r7
   159e4:	sub	sp, fp, #28
   159e8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   159ec:	ldr	r6, [sl, #120]	; 0x78
   159f0:	ldr	r0, [sl, #172]	; 0xac
   159f4:	add	r2, r6, r5
   159f8:	cmp	r0, #0
   159fc:	beq	15a38 <flatcc_builder_create_cached_vtable@@Base+0x298>
   15a00:	cmp	r0, r2
   15a04:	bcs	15a38 <flatcc_builder_create_cached_vtable@@Base+0x298>
   15a08:	ldr	r0, [sl, #116]	; 0x74
   15a0c:	cmp	r0, #0
   15a10:	beq	159dc <flatcc_builder_create_cached_vtable@@Base+0x23c>
   15a14:	ldr	r0, [sl, #92]	; 0x5c
   15a18:	ldr	r2, [sl, #96]	; 0x60
   15a1c:	mov	r1, #0
   15a20:	mov	r5, #0
   15a24:	bl	1246c <memset@plt>
   15a28:	mov	r0, #16
   15a2c:	str	r5, [sl, #120]	; 0x78
   15a30:	str	r0, [sl, #124]	; 0x7c
   15a34:	b	159dc <flatcc_builder_create_cached_vtable@@Base+0x23c>
   15a38:	ldr	r0, [sl, #72]	; 0x48
   15a3c:	add	r7, sl, #68	; 0x44
   15a40:	cmp	r2, r0
   15a44:	bls	15a6c <flatcc_builder_create_cached_vtable@@Base+0x2cc>
   15a48:	ldr	r0, [sl, #40]	; 0x28
   15a4c:	ldr	ip, [sl, #48]	; 0x30
   15a50:	mov	r1, #2
   15a54:	mov	r3, #0
   15a58:	str	r1, [sp]
   15a5c:	mov	r1, r7
   15a60:	blx	ip
   15a64:	cmp	r0, #0
   15a68:	bne	15adc <flatcc_builder_create_cached_vtable@@Base+0x33c>
   15a6c:	ldr	r0, [r7]
   15a70:	adds	r0, r0, r6
   15a74:	beq	15a98 <flatcc_builder_create_cached_vtable@@Base+0x2f8>
   15a78:	ldr	r1, [sl, #120]	; 0x78
   15a7c:	mov	r2, r5
   15a80:	str	r1, [r4, #8]
   15a84:	add	r1, r1, r5
   15a88:	str	r1, [sl, #120]	; 0x78
   15a8c:	ldr	r1, [sp, #16]
   15a90:	bl	123e8 <memcpy@plt>
   15a94:	b	159dc <flatcc_builder_create_cached_vtable@@Base+0x23c>
   15a98:	mvn	r7, #0
   15a9c:	mov	r0, r7
   15aa0:	sub	sp, fp, #28
   15aa4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15aa8:	ldr	r0, [sp, #12]
   15aac:	cmp	r6, r0
   15ab0:	beq	15acc <flatcc_builder_create_cached_vtable@@Base+0x32c>
   15ab4:	mov	r1, r0
   15ab8:	ldr	r0, [r9, #12]
   15abc:	str	r0, [r6]
   15ac0:	ldr	r0, [r1]
   15ac4:	str	r0, [r9, #12]
   15ac8:	str	r7, [r1]
   15acc:	ldr	r7, [r9]
   15ad0:	mov	r0, r7
   15ad4:	sub	sp, fp, #28
   15ad8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15adc:	movw	r0, #39624	; 0x9ac8
   15ae0:	movw	r1, #35106	; 0x8922
   15ae4:	movw	r3, #39170	; 0x9902
   15ae8:	mov	r2, #308	; 0x134
   15aec:	movt	r0, #1
   15af0:	movt	r1, #1
   15af4:	movt	r3, #1
   15af8:	bl	1249c <__assert_fail@plt>
   15afc:	movw	r0, #39564	; 0x9a8c
   15b00:	movw	r1, #35106	; 0x8922
   15b04:	movw	r3, #39579	; 0x9a9b
   15b08:	movw	r2, #342	; 0x156
   15b0c:	movt	r0, #1
   15b10:	movt	r1, #1
   15b14:	movt	r3, #1
   15b18:	bl	1249c <__assert_fail@plt>

00015b1c <flatcc_builder_create_table@@Base>:
   15b1c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   15b20:	add	fp, sp, #24
   15b24:	sub	sp, sp, #80	; 0x50
   15b28:	ldr	r5, [fp, #12]
   15b2c:	cmn	r5, #1
   15b30:	ble	15c84 <flatcc_builder_create_table@@Base+0x168>
   15b34:	ldr	ip, [fp, #16]
   15b38:	tst	ip, #1
   15b3c:	beq	15ca4 <flatcc_builder_create_table@@Base+0x188>
   15b40:	mov	r8, r0
   15b44:	ldrh	r0, [r0, #128]	; 0x80
   15b48:	cmp	r3, #4
   15b4c:	movls	r3, #4
   15b50:	cmp	r0, r3
   15b54:	strhcc	r3, [r8, #128]	; 0x80
   15b58:	sub	r3, r3, #1
   15b5c:	cmp	r5, #1
   15b60:	ldr	r4, [r8, #136]	; 0x88
   15b64:	sub	r0, r4, r2
   15b68:	and	r0, r0, r3
   15b6c:	add	r3, ip, r0
   15b70:	mvn	ip, #3
   15b74:	sub	r6, ip, r2
   15b78:	add	r4, r6, r4
   15b7c:	add	r6, r4, #1
   15b80:	sub	r3, r6, r3
   15b84:	str	r3, [fp, #-28]	; 0xffffffe4
   15b88:	blt	15bb4 <flatcc_builder_create_table@@Base+0x98>
   15b8c:	ldr	r3, [fp, #8]
   15b90:	sub	r6, r4, r0
   15b94:	sub	r4, ip, r6
   15b98:	ldrh	r6, [r3], #2
   15b9c:	subs	r5, r5, #1
   15ba0:	ldr	r7, [r6, r1]
   15ba4:	add	r7, r4, r7
   15ba8:	sub	r7, r7, r6
   15bac:	str	r7, [r6, r1]
   15bb0:	bne	15b98 <flatcc_builder_create_table@@Base+0x7c>
   15bb4:	sub	r3, fp, #28
   15bb8:	mov	r4, #4
   15bbc:	cmp	r2, #0
   15bc0:	str	r3, [sp, #12]
   15bc4:	mov	r3, #1
   15bc8:	str	r4, [sp, #4]
   15bcc:	str	r4, [sp, #16]
   15bd0:	str	r3, [sp, #8]
   15bd4:	beq	15bf0 <flatcc_builder_create_table@@Base+0xd4>
   15bd8:	mov	r3, #2
   15bdc:	add	r4, r2, #4
   15be0:	str	r1, [sp, #20]
   15be4:	str	r2, [sp, #24]
   15be8:	str	r3, [sp, #8]
   15bec:	str	r4, [sp, #4]
   15bf0:	cmp	r0, #0
   15bf4:	beq	15c20 <flatcc_builder_create_table@@Base+0x104>
   15bf8:	add	r1, sp, #4
   15bfc:	movw	r2, #34576	; 0x8710
   15c00:	add	r4, r4, r0
   15c04:	add	r1, r1, r3, lsl #3
   15c08:	add	r3, r3, #1
   15c0c:	movt	r2, #1
   15c10:	str	r4, [sp, #4]
   15c14:	str	r2, [r1, #8]
   15c18:	str	r0, [r1, #12]
   15c1c:	str	r3, [sp, #8]
   15c20:	cmp	r4, #0
   15c24:	ble	15cc4 <flatcc_builder_create_table@@Base+0x1a8>
   15c28:	ldr	r0, [r8, #136]	; 0x88
   15c2c:	ldr	r7, [r8, #44]	; 0x2c
   15c30:	add	r1, sp, #4
   15c34:	mov	r2, r3
   15c38:	add	r1, r1, #8
   15c3c:	sub	r5, r0, r4
   15c40:	ldr	r0, [r8, #36]	; 0x24
   15c44:	str	r4, [sp]
   15c48:	mov	r3, r5
   15c4c:	blx	r7
   15c50:	cmp	r0, #0
   15c54:	streq	r5, [r8, #136]	; 0x88
   15c58:	moveq	r0, r5
   15c5c:	subeq	sp, fp, #24
   15c60:	popeq	{r4, r5, r6, r7, r8, sl, fp, pc}
   15c64:	movw	r0, #39624	; 0x9ac8
   15c68:	movw	r1, #35106	; 0x8922
   15c6c:	movw	r3, #39303	; 0x9987
   15c70:	movw	r2, #651	; 0x28b
   15c74:	movt	r0, #1
   15c78:	movt	r1, #1
   15c7c:	movt	r3, #1
   15c80:	bl	1249c <__assert_fail@plt>
   15c84:	movw	r0, #36990	; 0x907e
   15c88:	movw	r1, #35106	; 0x8922
   15c8c:	movw	r3, #37008	; 0x9090
   15c90:	movw	r2, #1237	; 0x4d5
   15c94:	movt	r0, #1
   15c98:	movt	r1, #1
   15c9c:	movt	r3, #1
   15ca0:	bl	1249c <__assert_fail@plt>
   15ca4:	movw	r0, #37164	; 0x912c
   15ca8:	movw	r1, #35106	; 0x8922
   15cac:	movw	r3, #37008	; 0x9090
   15cb0:	movw	r2, #1243	; 0x4db
   15cb4:	movt	r0, #1
   15cb8:	movt	r1, #1
   15cbc:	movt	r3, #1
   15cc0:	bl	1249c <__assert_fail@plt>
   15cc4:	movw	r0, #39624	; 0x9ac8
   15cc8:	movw	r1, #35106	; 0x8922
   15ccc:	movw	r3, #39303	; 0x9987
   15cd0:	movw	r2, #647	; 0x287
   15cd4:	movt	r0, #1
   15cd8:	movt	r1, #1
   15cdc:	movt	r3, #1
   15ce0:	bl	1249c <__assert_fail@plt>

00015ce4 <flatcc_builder_check_required_field@@Base>:
   15ce4:	ldr	r2, [r0, #32]
   15ce8:	ldrh	r2, [r2, #14]
   15cec:	cmp	r2, #3
   15cf0:	bne	15d20 <flatcc_builder_check_required_field@@Base+0x3c>
   15cf4:	ldrh	r3, [r0, #8]
   15cf8:	mov	r2, #0
   15cfc:	cmp	r3, r1
   15d00:	bls	15d18 <flatcc_builder_check_required_field@@Base+0x34>
   15d04:	ldr	r0, [r0, #4]
   15d08:	add	r0, r0, r1, lsl #1
   15d0c:	ldrh	r2, [r0]
   15d10:	cmp	r2, #0
   15d14:	movwne	r2, #1
   15d18:	mov	r0, r2
   15d1c:	bx	lr
   15d20:	push	{fp, lr}
   15d24:	mov	fp, sp
   15d28:	movw	r0, #37175	; 0x9137
   15d2c:	movw	r1, #35106	; 0x8922
   15d30:	movw	r3, #37218	; 0x9162
   15d34:	movw	r2, #1272	; 0x4f8
   15d38:	movt	r0, #1
   15d3c:	movt	r1, #1
   15d40:	movt	r3, #1
   15d44:	bl	1249c <__assert_fail@plt>

00015d48 <flatcc_builder_check_union_field@@Base>:
   15d48:	mov	r2, r0
   15d4c:	ldr	r0, [r0, #32]
   15d50:	ldrh	r0, [r0, #14]
   15d54:	cmp	r0, #3
   15d58:	bne	15db8 <flatcc_builder_check_union_field@@Base+0x70>
   15d5c:	cmp	r1, #0
   15d60:	mov	r0, #0
   15d64:	ldrhne	r3, [r2, #8]
   15d68:	cmpne	r3, r1
   15d6c:	bhi	15d74 <flatcc_builder_check_union_field@@Base+0x2c>
   15d70:	bx	lr
   15d74:	ldr	r0, [r2, #4]
   15d78:	add	r0, r0, r1, lsl #1
   15d7c:	ldrh	r1, [r0, #-2]
   15d80:	cmp	r1, #0
   15d84:	beq	15da8 <flatcc_builder_check_union_field@@Base+0x60>
   15d88:	ldr	r2, [r2, #16]
   15d8c:	ldrh	r0, [r0]
   15d90:	ldrb	r1, [r2, r1]
   15d94:	cmp	r1, #0
   15d98:	beq	15dac <flatcc_builder_check_union_field@@Base+0x64>
   15d9c:	cmp	r0, #0
   15da0:	movwne	r0, #1
   15da4:	bx	lr
   15da8:	ldrh	r0, [r0]
   15dac:	clz	r0, r0
   15db0:	lsr	r0, r0, #5
   15db4:	bx	lr
   15db8:	push	{fp, lr}
   15dbc:	mov	fp, sp
   15dc0:	movw	r0, #37175	; 0x9137
   15dc4:	movw	r1, #35106	; 0x8922
   15dc8:	movw	r3, #37301	; 0x91b5
   15dcc:	movw	r2, #1279	; 0x4ff
   15dd0:	movt	r0, #1
   15dd4:	movt	r1, #1
   15dd8:	movt	r3, #1
   15ddc:	bl	1249c <__assert_fail@plt>

00015de0 <flatcc_builder_check_required@@Base>:
   15de0:	push	{fp, lr}
   15de4:	mov	fp, sp
   15de8:	mov	r3, r0
   15dec:	ldr	r0, [r0, #32]
   15df0:	ldrh	r0, [r0, #14]
   15df4:	cmp	r0, #3
   15df8:	bne	15e50 <flatcc_builder_check_required@@Base+0x70>
   15dfc:	ldrh	ip, [r3, #8]
   15e00:	mov	r0, #0
   15e04:	cmp	ip, r2
   15e08:	movge	r0, #1
   15e0c:	cmpge	r2, #1
   15e10:	bge	15e18 <flatcc_builder_check_required@@Base+0x38>
   15e14:	pop	{fp, pc}
   15e18:	ldr	ip, [r3, #4]
   15e1c:	mov	lr, #0
   15e20:	b	15e34 <flatcc_builder_check_required@@Base+0x54>
   15e24:	add	lr, lr, #1
   15e28:	add	r1, r1, #2
   15e2c:	cmp	lr, r2
   15e30:	popge	{fp, pc}
   15e34:	ldrh	r3, [r1]
   15e38:	add	r3, ip, r3, lsl #1
   15e3c:	ldrh	r3, [r3]
   15e40:	cmp	r3, #0
   15e44:	bne	15e24 <flatcc_builder_check_required@@Base+0x44>
   15e48:	mov	r0, #0
   15e4c:	pop	{fp, pc}
   15e50:	movw	r0, #37175	; 0x9137
   15e54:	movw	r1, #35106	; 0x8922
   15e58:	movw	r3, #37381	; 0x9205
   15e5c:	movw	r2, #1297	; 0x511
   15e60:	movt	r0, #1
   15e64:	movt	r1, #1
   15e68:	movt	r3, #1
   15e6c:	bl	1249c <__assert_fail@plt>

00015e70 <flatcc_builder_end_table@@Base>:
   15e70:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   15e74:	add	fp, sp, #24
   15e78:	sub	sp, sp, #16
   15e7c:	mov	r4, r0
   15e80:	ldr	r0, [r0, #32]
   15e84:	ldrh	r0, [r0, #14]
   15e88:	cmp	r0, #3
   15e8c:	bne	16010 <flatcc_builder_end_table@@Base+0x1a0>
   15e90:	ldrh	r0, [r4, #8]
   15e94:	ldr	r5, [r4, #4]
   15e98:	mov	r1, #4
   15e9c:	movw	r2, #31153	; 0x79b1
   15ea0:	movt	r2, #40503	; 0x9e37
   15ea4:	add	r0, r1, r0, lsl #1
   15ea8:	strh	r0, [r5, #-4]!
   15eac:	ldrh	r1, [r4, #20]
   15eb0:	uxth	r6, r0
   15eb4:	add	r1, r1, #4
   15eb8:	strh	r1, [r5, #2]
   15ebc:	uxth	r1, r1
   15ec0:	ldr	r0, [r4, #12]
   15ec4:	eor	r0, r0, r6
   15ec8:	mul	r0, r0, r2
   15ecc:	eor	r0, r0, r1
   15ed0:	mov	r1, r5
   15ed4:	mul	r3, r0, r2
   15ed8:	mov	r0, r4
   15edc:	mov	r2, r6
   15ee0:	str	r3, [r4, #12]
   15ee4:	bl	157a0 <flatcc_builder_create_cached_vtable@@Base>
   15ee8:	cmp	r0, #0
   15eec:	beq	16000 <flatcc_builder_end_table@@Base+0x190>
   15ef0:	mov	r7, r0
   15ef4:	mov	r0, r5
   15ef8:	mov	r1, #0
   15efc:	mov	r2, r6
   15f00:	mov	r8, #0
   15f04:	bl	1246c <memset@plt>
   15f08:	ldr	r5, [r4, #32]
   15f0c:	ldr	r0, [r4, #76]	; 0x4c
   15f10:	ldr	r6, [r4]
   15f14:	ldrh	r3, [r4, #130]	; 0x82
   15f18:	ldr	r1, [r4, #16]
   15f1c:	ldr	r2, [r4, #20]
   15f20:	ldr	r5, [r5, #20]
   15f24:	add	r0, r0, r5
   15f28:	sub	r6, r6, r0
   15f2c:	asr	r6, r6, #1
   15f30:	stm	sp, {r0, r6, r7}
   15f34:	mov	r0, r4
   15f38:	bl	15b1c <flatcc_builder_create_table@@Base>
   15f3c:	cmp	r0, #0
   15f40:	beq	15ff4 <flatcc_builder_end_table@@Base+0x184>
   15f44:	ldr	r1, [r4, #32]
   15f48:	mov	r5, r0
   15f4c:	ldr	r0, [r4, #16]
   15f50:	ldr	r2, [r4, #20]
   15f54:	ldr	r3, [r4, #52]	; 0x34
   15f58:	ldr	r7, [r1, #24]
   15f5c:	str	r7, [r4, #12]
   15f60:	ldrh	r7, [r1, #28]
   15f64:	strh	r7, [r4, #8]
   15f68:	ldr	r7, [r1, #16]
   15f6c:	add	r3, r3, r7
   15f70:	str	r3, [r4, #4]
   15f74:	ldr	r3, [r4, #76]	; 0x4c
   15f78:	ldr	r1, [r1, #20]
   15f7c:	add	r1, r3, r1
   15f80:	str	r1, [r4]
   15f84:	mov	r1, #0
   15f88:	bl	1246c <memset@plt>
   15f8c:	ldr	r0, [r4, #32]
   15f90:	ldr	r1, [r4, #60]	; 0x3c
   15f94:	ldr	r2, [r4, #64]	; 0x40
   15f98:	mov	r8, r5
   15f9c:	ldr	r3, [r0, #8]
   15fa0:	str	r3, [r4, #20]
   15fa4:	ldr	r3, [r0]
   15fa8:	str	r3, [r4, #28]
   15fac:	add	r1, r1, r3
   15fb0:	ldr	r7, [r0, #4]
   15fb4:	str	r1, [r4, #16]
   15fb8:	sub	r1, r2, r3
   15fbc:	cmp	r1, r7
   15fc0:	movhi	r1, r7
   15fc4:	str	r1, [r4, #24]
   15fc8:	ldrh	r1, [r4, #130]	; 0x82
   15fcc:	ldrh	r2, [r4, #128]	; 0x80
   15fd0:	cmp	r2, r1
   15fd4:	strhcc	r1, [r4, #128]	; 0x80
   15fd8:	ldrh	r1, [r0, #12]
   15fdc:	sub	r0, r0, #36	; 0x24
   15fe0:	str	r0, [r4, #32]
   15fe4:	strh	r1, [r4, #130]	; 0x82
   15fe8:	ldr	r0, [r4, #156]	; 0x9c
   15fec:	sub	r0, r0, #1
   15ff0:	str	r0, [r4, #156]	; 0x9c
   15ff4:	mov	r0, r8
   15ff8:	sub	sp, fp, #24
   15ffc:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   16000:	mov	r8, #0
   16004:	mov	r0, r8
   16008:	sub	sp, fp, #24
   1600c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   16010:	movw	r0, #37175	; 0x9137
   16014:	movw	r1, #35106	; 0x8922
   16018:	movw	r3, #37471	; 0x925f
   1601c:	movw	r2, #1317	; 0x525
   16020:	movt	r0, #1
   16024:	movt	r1, #1
   16028:	movt	r3, #1
   1602c:	bl	1249c <__assert_fail@plt>

00016030 <flatcc_builder_create_vector@@Base>:
   16030:	push	{r4, r5, r6, r7, fp, lr}
   16034:	add	fp, sp, #16
   16038:	sub	sp, sp, #80	; 0x50
   1603c:	mov	r7, r0
   16040:	ldr	r0, [fp, #12]
   16044:	cmp	r2, r0
   16048:	bhi	16148 <flatcc_builder_create_vector@@Base+0x118>
   1604c:	ldr	r0, [fp, #8]
   16050:	mov	r4, r2
   16054:	ldrh	r2, [r7, #128]	; 0x80
   16058:	mov	r5, #4
   1605c:	cmp	r0, #4
   16060:	movls	r0, r5
   16064:	cmp	r2, r0
   16068:	sub	r2, fp, #20
   1606c:	strhcc	r0, [r7, #128]	; 0x80
   16070:	str	r4, [fp, #-20]	; 0xffffffec
   16074:	sub	r0, r0, #1
   16078:	ldr	ip, [r7, #136]	; 0x88
   1607c:	str	r2, [sp, #12]
   16080:	mov	r2, #1
   16084:	str	r5, [sp, #4]
   16088:	str	r5, [sp, #16]
   1608c:	str	r2, [sp, #8]
   16090:	mls	r6, r3, r4, ip
   16094:	mul	r3, r3, r4
   16098:	and	r0, r6, r0
   1609c:	cmp	r3, #0
   160a0:	beq	160bc <flatcc_builder_create_vector@@Base+0x8c>
   160a4:	mov	r2, #2
   160a8:	add	r5, r3, #4
   160ac:	str	r1, [sp, #20]
   160b0:	str	r3, [sp, #24]
   160b4:	str	r2, [sp, #8]
   160b8:	str	r5, [sp, #4]
   160bc:	cmp	r0, #0
   160c0:	beq	160ec <flatcc_builder_create_vector@@Base+0xbc>
   160c4:	add	r1, sp, #4
   160c8:	movw	r3, #34576	; 0x8710
   160cc:	add	r5, r5, r0
   160d0:	add	r1, r1, r2, lsl #3
   160d4:	add	r2, r2, #1
   160d8:	movt	r3, #1
   160dc:	str	r5, [sp, #4]
   160e0:	str	r3, [r1, #8]
   160e4:	str	r0, [r1, #12]
   160e8:	str	r2, [sp, #8]
   160ec:	cmp	r5, #0
   160f0:	ble	16168 <flatcc_builder_create_vector@@Base+0x138>
   160f4:	ldr	r0, [r7, #36]	; 0x24
   160f8:	ldr	r6, [r7, #44]	; 0x2c
   160fc:	add	r1, sp, #4
   16100:	sub	r4, ip, r5
   16104:	str	r5, [sp]
   16108:	add	r1, r1, #8
   1610c:	mov	r3, r4
   16110:	blx	r6
   16114:	cmp	r0, #0
   16118:	streq	r4, [r7, #136]	; 0x88
   1611c:	moveq	r0, r4
   16120:	subeq	sp, fp, #16
   16124:	popeq	{r4, r5, r6, r7, fp, pc}
   16128:	movw	r0, #39624	; 0x9ac8
   1612c:	movw	r1, #35106	; 0x8922
   16130:	movw	r3, #39303	; 0x9987
   16134:	movw	r2, #651	; 0x28b
   16138:	movt	r0, #1
   1613c:	movt	r1, #1
   16140:	movt	r3, #1
   16144:	bl	1249c <__assert_fail@plt>
   16148:	movw	r0, #37537	; 0x92a1
   1614c:	movw	r1, #35106	; 0x8922
   16150:	movw	r3, #37556	; 0x92b4
   16154:	movw	r2, #1365	; 0x555
   16158:	movt	r0, #1
   1615c:	movt	r1, #1
   16160:	movt	r3, #1
   16164:	bl	1249c <__assert_fail@plt>
   16168:	movw	r0, #39624	; 0x9ac8
   1616c:	movw	r1, #35106	; 0x8922
   16170:	movw	r3, #39303	; 0x9987
   16174:	movw	r2, #647	; 0x287
   16178:	movt	r0, #1
   1617c:	movt	r1, #1
   16180:	movt	r3, #1
   16184:	bl	1249c <__assert_fail@plt>

00016188 <flatcc_builder_end_vector@@Base>:
   16188:	push	{r4, r5, fp, lr}
   1618c:	add	fp, sp, #8
   16190:	sub	sp, sp, #8
   16194:	mov	r4, r0
   16198:	ldr	r0, [r0, #32]
   1619c:	ldrh	r1, [r0, #14]
   161a0:	cmp	r1, #4
   161a4:	bne	16258 <flatcc_builder_end_vector@@Base+0xd0>
   161a8:	ldr	r3, [r0, #16]
   161ac:	ldr	r2, [r0, #20]
   161b0:	ldr	r0, [r0, #24]
   161b4:	ldr	r1, [r4, #16]
   161b8:	ldrh	r5, [r4, #130]	; 0x82
   161bc:	str	r0, [sp, #4]
   161c0:	mov	r0, r4
   161c4:	str	r5, [sp]
   161c8:	bl	16030 <flatcc_builder_create_vector@@Base>
   161cc:	mov	r5, r0
   161d0:	cmp	r0, #0
   161d4:	beq	1624c <flatcc_builder_end_vector@@Base+0xc4>
   161d8:	ldr	r0, [r4, #16]
   161dc:	ldr	r2, [r4, #20]
   161e0:	mov	r1, #0
   161e4:	bl	1246c <memset@plt>
   161e8:	ldr	r0, [r4, #32]
   161ec:	ldr	r1, [r4, #60]	; 0x3c
   161f0:	ldr	ip, [r4, #64]	; 0x40
   161f4:	ldr	r3, [r0, #8]
   161f8:	str	r3, [r4, #20]
   161fc:	ldr	r3, [r0]
   16200:	str	r3, [r4, #28]
   16204:	add	r1, r1, r3
   16208:	ldr	r2, [r0, #4]
   1620c:	str	r1, [r4, #16]
   16210:	sub	r1, ip, r3
   16214:	cmp	r1, r2
   16218:	movhi	r1, r2
   1621c:	str	r1, [r4, #24]
   16220:	ldrh	r1, [r4, #130]	; 0x82
   16224:	ldrh	r2, [r4, #128]	; 0x80
   16228:	cmp	r2, r1
   1622c:	strhcc	r1, [r4, #128]	; 0x80
   16230:	ldrh	r1, [r0, #12]
   16234:	sub	r0, r0, #36	; 0x24
   16238:	str	r0, [r4, #32]
   1623c:	strh	r1, [r4, #130]	; 0x82
   16240:	ldr	r0, [r4, #156]	; 0x9c
   16244:	sub	r0, r0, #1
   16248:	str	r0, [r4, #156]	; 0x9c
   1624c:	mov	r0, r5
   16250:	sub	sp, fp, #8
   16254:	pop	{r4, r5, fp, pc}
   16258:	movw	r0, #35909	; 0x8c45
   1625c:	movw	r1, #35106	; 0x8922
   16260:	movw	r3, #37674	; 0x932a
   16264:	movw	r2, #1400	; 0x578
   16268:	movt	r0, #1
   1626c:	movt	r1, #1
   16270:	movt	r3, #1
   16274:	bl	1249c <__assert_fail@plt>

00016278 <flatcc_builder_vector_count@@Base>:
   16278:	ldr	r0, [r0, #32]
   1627c:	ldr	r0, [r0, #20]
   16280:	bx	lr

00016284 <flatcc_builder_vector_edit@@Base>:
   16284:	ldr	r0, [r0, #16]
   16288:	bx	lr

0001628c <flatcc_builder_create_offset_vector_direct@@Base>:
   1628c:	mov	r3, #0
   16290:	b	16294 <flatcc_builder_create_offset_vector_direct@@Base+0x8>
   16294:	push	{r4, r5, r6, r7, fp, lr}
   16298:	add	fp, sp, #16
   1629c:	sub	sp, sp, #80	; 0x50
   162a0:	mov	r5, #0
   162a4:	cmn	r2, #-1073741823	; 0xc0000001
   162a8:	bhi	16408 <flatcc_builder_create_offset_vector_direct@@Base+0x17c>
   162ac:	mov	r7, r0
   162b0:	ldrh	r0, [r0, #128]	; 0x80
   162b4:	sub	r6, fp, #20
   162b8:	mov	r4, #4
   162bc:	mov	ip, #1
   162c0:	cmp	r0, #3
   162c4:	movls	r0, #4
   162c8:	strhls	r0, [r7, #128]	; 0x80
   162cc:	str	r2, [fp, #-20]	; 0xffffffec
   162d0:	ldr	lr, [r7, #136]	; 0x88
   162d4:	str	r6, [sp, #12]
   162d8:	mov	r6, #0
   162dc:	str	r4, [sp, #4]
   162e0:	str	r4, [sp, #16]
   162e4:	str	ip, [sp, #8]
   162e8:	cmp	r6, r2, lsl #2
   162ec:	and	r5, lr, #3
   162f0:	beq	16310 <flatcc_builder_create_offset_vector_direct@@Base+0x84>
   162f4:	lsl	r6, r2, #2
   162f8:	mov	ip, #2
   162fc:	str	r1, [sp, #20]
   16300:	add	r4, r6, #4
   16304:	str	r6, [sp, #24]
   16308:	str	ip, [sp, #8]
   1630c:	str	r4, [sp, #4]
   16310:	cmp	r5, #0
   16314:	beq	16340 <flatcc_builder_create_offset_vector_direct@@Base+0xb4>
   16318:	add	r6, sp, #4
   1631c:	movw	r0, #34576	; 0x8710
   16320:	add	r4, r4, r5
   16324:	add	r6, r6, ip, lsl #3
   16328:	add	ip, ip, #1
   1632c:	movt	r0, #1
   16330:	str	r4, [sp, #4]
   16334:	str	r0, [r6, #8]
   16338:	str	r5, [r6, #12]
   1633c:	str	ip, [sp, #8]
   16340:	cmp	r2, #0
   16344:	beq	163cc <flatcc_builder_create_offset_vector_direct@@Base+0x140>
   16348:	mvn	r0, #3
   1634c:	cmp	r3, #0
   16350:	sub	r0, r0, lr
   16354:	add	r0, r0, r4
   16358:	beq	163a4 <flatcc_builder_create_offset_vector_direct@@Base+0x118>
   1635c:	mov	r5, #0
   16360:	ldr	r6, [r1, r5, lsl #2]
   16364:	cmp	r6, #0
   16368:	beq	16384 <flatcc_builder_create_offset_vector_direct@@Base+0xf8>
   1636c:	add	r6, r0, r6
   16370:	str	r6, [r1, r5, lsl #2]
   16374:	ldrb	r6, [r3, r5]
   16378:	cmp	r6, #0
   1637c:	bne	16390 <flatcc_builder_create_offset_vector_direct@@Base+0x104>
   16380:	b	16414 <flatcc_builder_create_offset_vector_direct@@Base+0x188>
   16384:	ldrb	r6, [r3, r5]
   16388:	cmp	r6, #0
   1638c:	bne	16454 <flatcc_builder_create_offset_vector_direct@@Base+0x1c8>
   16390:	add	r5, r5, #1
   16394:	sub	r0, r0, #4
   16398:	cmp	r5, r2
   1639c:	bcc	16360 <flatcc_builder_create_offset_vector_direct@@Base+0xd4>
   163a0:	b	163cc <flatcc_builder_create_offset_vector_direct@@Base+0x140>
   163a4:	mov	r3, #0
   163a8:	ldr	r5, [r1, r3, lsl #2]
   163ac:	cmp	r5, #0
   163b0:	beq	16434 <flatcc_builder_create_offset_vector_direct@@Base+0x1a8>
   163b4:	add	r6, r0, r5
   163b8:	sub	r0, r0, #4
   163bc:	str	r6, [r1, r3, lsl #2]
   163c0:	add	r3, r3, #1
   163c4:	cmp	r3, r2
   163c8:	bcc	163a8 <flatcc_builder_create_offset_vector_direct@@Base+0x11c>
   163cc:	cmp	r4, #0
   163d0:	ble	16474 <flatcc_builder_create_offset_vector_direct@@Base+0x1e8>
   163d4:	ldr	r0, [r7, #136]	; 0x88
   163d8:	ldr	r6, [r7, #44]	; 0x2c
   163dc:	add	r1, sp, #4
   163e0:	mov	r2, ip
   163e4:	add	r1, r1, #8
   163e8:	sub	r5, r0, r4
   163ec:	ldr	r0, [r7, #36]	; 0x24
   163f0:	str	r4, [sp]
   163f4:	mov	r3, r5
   163f8:	blx	r6
   163fc:	cmp	r0, #0
   16400:	bne	16494 <flatcc_builder_create_offset_vector_direct@@Base+0x208>
   16404:	str	r5, [r7, #136]	; 0x88
   16408:	mov	r0, r5
   1640c:	sub	sp, fp, #16
   16410:	pop	{r4, r5, r6, r7, fp, pc}
   16414:	movw	r0, #39612	; 0x9abc
   16418:	movw	r1, #35106	; 0x8922
   1641c:	movw	r3, #39626	; 0x9aca
   16420:	movw	r2, #1457	; 0x5b1
   16424:	movt	r0, #1
   16428:	movt	r1, #1
   1642c:	movt	r3, #1
   16430:	bl	1249c <__assert_fail@plt>
   16434:	movw	r0, #39624	; 0x9ac8
   16438:	movw	r1, #35106	; 0x8922
   1643c:	movw	r3, #39626	; 0x9aca
   16440:	movw	r2, #1463	; 0x5b7
   16444:	movt	r0, #1
   16448:	movt	r1, #1
   1644c:	movt	r3, #1
   16450:	bl	1249c <__assert_fail@plt>
   16454:	movw	r0, #39757	; 0x9b4d
   16458:	movw	r1, #35106	; 0x8922
   1645c:	movw	r3, #39626	; 0x9aca
   16460:	movw	r2, #1461	; 0x5b5
   16464:	movt	r0, #1
   16468:	movt	r1, #1
   1646c:	movt	r3, #1
   16470:	bl	1249c <__assert_fail@plt>
   16474:	movw	r0, #39624	; 0x9ac8
   16478:	movw	r1, #35106	; 0x8922
   1647c:	movw	r3, #39303	; 0x9987
   16480:	movw	r2, #647	; 0x287
   16484:	movt	r0, #1
   16488:	movt	r1, #1
   1648c:	movt	r3, #1
   16490:	bl	1249c <__assert_fail@plt>
   16494:	movw	r0, #39624	; 0x9ac8
   16498:	movw	r1, #35106	; 0x8922
   1649c:	movw	r3, #39303	; 0x9987
   164a0:	movw	r2, #651	; 0x28b
   164a4:	movt	r0, #1
   164a8:	movt	r1, #1
   164ac:	movt	r3, #1
   164b0:	bl	1249c <__assert_fail@plt>

000164b4 <flatcc_builder_end_offset_vector_for_unions@@Base>:
   164b4:	push	{r4, r5, fp, lr}
   164b8:	add	fp, sp, #8
   164bc:	mov	r4, r0
   164c0:	ldr	r0, [r0, #32]
   164c4:	mov	r3, r1
   164c8:	ldrh	r1, [r0, #14]
   164cc:	cmp	r1, #5
   164d0:	bne	1656c <flatcc_builder_end_offset_vector_for_unions@@Base+0xb8>
   164d4:	ldr	r2, [r0, #20]
   164d8:	ldr	r1, [r4, #16]
   164dc:	mov	r0, r4
   164e0:	bl	16294 <flatcc_builder_create_offset_vector_direct@@Base+0x8>
   164e4:	mov	r5, r0
   164e8:	cmp	r0, #0
   164ec:	beq	16564 <flatcc_builder_end_offset_vector_for_unions@@Base+0xb0>
   164f0:	ldr	r0, [r4, #16]
   164f4:	ldr	r2, [r4, #20]
   164f8:	mov	r1, #0
   164fc:	bl	1246c <memset@plt>
   16500:	ldr	r0, [r4, #32]
   16504:	ldr	r1, [r4, #60]	; 0x3c
   16508:	ldr	ip, [r4, #64]	; 0x40
   1650c:	ldr	r3, [r0, #8]
   16510:	str	r3, [r4, #20]
   16514:	ldr	r3, [r0]
   16518:	str	r3, [r4, #28]
   1651c:	add	r1, r1, r3
   16520:	ldr	r2, [r0, #4]
   16524:	str	r1, [r4, #16]
   16528:	sub	r1, ip, r3
   1652c:	cmp	r1, r2
   16530:	movhi	r1, r2
   16534:	str	r1, [r4, #24]
   16538:	ldrh	r1, [r4, #130]	; 0x82
   1653c:	ldrh	r2, [r4, #128]	; 0x80
   16540:	cmp	r2, r1
   16544:	strhcc	r1, [r4, #128]	; 0x80
   16548:	ldrh	r1, [r0, #12]
   1654c:	sub	r0, r0, #36	; 0x24
   16550:	str	r0, [r4, #32]
   16554:	strh	r1, [r4, #130]	; 0x82
   16558:	ldr	r0, [r4, #156]	; 0x9c
   1655c:	sub	r0, r0, #1
   16560:	str	r0, [r4, #156]	; 0x9c
   16564:	mov	r0, r5
   16568:	pop	{r4, r5, fp, pc}
   1656c:	movw	r0, #36158	; 0x8d3e
   16570:	movw	r1, #35106	; 0x8922
   16574:	movw	r3, #37815	; 0x93b7
   16578:	movw	r2, #1493	; 0x5d5
   1657c:	movt	r0, #1
   16580:	movt	r1, #1
   16584:	movt	r3, #1
   16588:	bl	1249c <__assert_fail@plt>

0001658c <flatcc_builder_offset_vector_edit@@Base>:
   1658c:	ldr	r0, [r0, #16]
   16590:	bx	lr

00016594 <flatcc_builder_offset_vector_count@@Base>:
   16594:	ldr	r0, [r0, #32]
   16598:	ldr	r0, [r0, #20]
   1659c:	bx	lr

000165a0 <flatcc_builder_table_add_union@@Base>:
   165a0:	push	{r4, r5, r6, r7, fp, lr}
   165a4:	add	fp, sp, #16
   165a8:	mov	r5, r0
   165ac:	ldr	r0, [r0, #32]
   165b0:	ldrh	r0, [r0, #14]
   165b4:	cmp	r0, #3
   165b8:	bne	16640 <flatcc_builder_table_add_union@@Base+0xa0>
   165bc:	mov	r7, r3
   165c0:	mov	r4, r2
   165c4:	mov	r6, r1
   165c8:	cmp	r3, #0
   165cc:	beq	165dc <flatcc_builder_table_add_union@@Base+0x3c>
   165d0:	uxtb	r0, r4
   165d4:	cmp	r0, #0
   165d8:	beq	16660 <flatcc_builder_table_add_union@@Base+0xc0>
   165dc:	cmp	r7, #0
   165e0:	beq	165fc <flatcc_builder_table_add_union@@Base+0x5c>
   165e4:	mov	r0, r5
   165e8:	mov	r1, r6
   165ec:	bl	166a0 <flatcc_builder_table_add_offset@@Base>
   165f0:	cmp	r0, #0
   165f4:	beq	16680 <flatcc_builder_table_add_union@@Base+0xe0>
   165f8:	str	r7, [r0]
   165fc:	sub	r1, r6, #1
   16600:	mov	r0, r5
   16604:	mov	r2, #1
   16608:	mov	r3, #1
   1660c:	bl	16830 <flatcc_builder_table_add@@Base>
   16610:	cmp	r0, #0
   16614:	strbne	r4, [r0]
   16618:	movne	r0, #0
   1661c:	popne	{r4, r5, r6, r7, fp, pc}
   16620:	movw	r0, #38061	; 0x94ad
   16624:	movw	r1, #35106	; 0x8922
   16628:	movw	r3, #37929	; 0x9429
   1662c:	movw	r2, #1526	; 0x5f6
   16630:	movt	r0, #1
   16634:	movt	r1, #1
   16638:	movt	r3, #1
   1663c:	bl	1249c <__assert_fail@plt>
   16640:	movw	r0, #37175	; 0x9137
   16644:	movw	r1, #35106	; 0x8922
   16648:	movw	r3, #37929	; 0x9429
   1664c:	movw	r2, #1518	; 0x5ee
   16650:	movt	r0, #1
   16654:	movt	r1, #1
   16658:	movt	r3, #1
   1665c:	bl	1249c <__assert_fail@plt>
   16660:	movw	r0, #38017	; 0x9481
   16664:	movw	r1, #35106	; 0x8922
   16668:	movw	r3, #37929	; 0x9429
   1666c:	movw	r2, #1519	; 0x5ef
   16670:	movt	r0, #1
   16674:	movt	r1, #1
   16678:	movt	r3, #1
   1667c:	bl	1249c <__assert_fail@plt>
   16680:	movw	r0, #38051	; 0x94a3
   16684:	movw	r1, #35106	; 0x8922
   16688:	movw	r3, #37929	; 0x9429
   1668c:	movw	r2, #1522	; 0x5f2
   16690:	movt	r0, #1
   16694:	movt	r1, #1
   16698:	movt	r3, #1
   1669c:	bl	1249c <__assert_fail@plt>

000166a0 <flatcc_builder_table_add_offset@@Base>:
   166a0:	push	{r4, r5, r6, r7, fp, lr}
   166a4:	add	fp, sp, #16
   166a8:	sub	sp, sp, #8
   166ac:	mov	r4, r0
   166b0:	ldr	r0, [r0, #32]
   166b4:	ldrh	r0, [r0, #14]
   166b8:	cmp	r0, #3
   166bc:	bne	167d0 <flatcc_builder_table_add_offset@@Base+0x130>
   166c0:	movw	r0, #32765	; 0x7ffd
   166c4:	mov	r5, r1
   166c8:	cmp	r1, r0
   166cc:	bcs	167f0 <flatcc_builder_table_add_offset@@Base+0x150>
   166d0:	ldr	r0, [r4, #4]
   166d4:	add	r1, r0, r5, lsl #1
   166d8:	ldrh	r1, [r1]
   166dc:	cmp	r1, #0
   166e0:	bne	16810 <flatcc_builder_table_add_offset@@Base+0x170>
   166e4:	ldr	r2, [r4, #20]
   166e8:	ldr	r1, [r4, #12]
   166ec:	ldr	r3, [r4, #24]
   166f0:	add	r2, r2, #3
   166f4:	eor	r1, r1, r5
   166f8:	bic	r6, r2, #3
   166fc:	movw	r2, #31153	; 0x79b1
   16700:	movt	r2, #40503	; 0x9e37
   16704:	add	r7, r6, #4
   16708:	mul	r1, r1, r2
   1670c:	cmp	r7, r3
   16710:	str	r7, [r4, #20]
   16714:	eor	r1, r1, #4
   16718:	mul	r1, r1, r2
   1671c:	str	r1, [r4, #12]
   16720:	bls	16794 <flatcc_builder_table_add_offset@@Base+0xf4>
   16724:	ldr	r1, [r4, #28]
   16728:	ldr	r0, [r4, #40]	; 0x28
   1672c:	ldr	ip, [r4, #48]	; 0x30
   16730:	mov	r2, #1
   16734:	mov	r3, #1
   16738:	str	r2, [sp]
   1673c:	add	r2, r1, r7
   16740:	add	r1, r4, #60	; 0x3c
   16744:	blx	ip
   16748:	mov	r1, r0
   1674c:	mov	r0, #0
   16750:	cmp	r1, #0
   16754:	beq	16760 <flatcc_builder_table_add_offset@@Base+0xc0>
   16758:	sub	sp, fp, #16
   1675c:	pop	{r4, r5, r6, r7, fp, pc}
   16760:	ldr	r0, [r4, #28]
   16764:	ldr	r2, [r4, #60]	; 0x3c
   16768:	ldr	r3, [r4, #64]	; 0x40
   1676c:	ldr	r1, [r4, #32]
   16770:	add	r2, r2, r0
   16774:	sub	r0, r3, r0
   16778:	str	r2, [r4, #16]
   1677c:	movw	r2, #65532	; 0xfffc
   16780:	cmp	r0, r2
   16784:	movcs	r0, r2
   16788:	str	r0, [r4, #24]
   1678c:	str	r2, [r1, #4]
   16790:	ldr	r0, [r4, #4]
   16794:	uxth	r1, r5
   16798:	add	r0, r0, r1, lsl #1
   1679c:	strh	r7, [r0]
   167a0:	ldrh	r0, [r4, #8]
   167a4:	cmp	r0, r1
   167a8:	addls	r0, r5, #1
   167ac:	strhls	r0, [r4, #8]
   167b0:	ldr	r0, [r4]
   167b4:	add	r1, r0, #2
   167b8:	str	r1, [r4]
   167bc:	strh	r6, [r0]
   167c0:	ldr	r0, [r4, #16]
   167c4:	add	r0, r0, r6
   167c8:	sub	sp, fp, #16
   167cc:	pop	{r4, r5, r6, r7, fp, pc}
   167d0:	movw	r0, #37175	; 0x9137
   167d4:	movw	r1, #35106	; 0x8922
   167d8:	movw	r3, #38955	; 0x982b
   167dc:	movw	r2, #1811	; 0x713
   167e0:	movt	r0, #1
   167e4:	movt	r1, #1
   167e8:	movt	r3, #1
   167ec:	bl	1249c <__assert_fail@plt>
   167f0:	movw	r0, #38827	; 0x97ab
   167f4:	movw	r1, #35106	; 0x8922
   167f8:	movw	r3, #38955	; 0x982b
   167fc:	movw	r2, #1812	; 0x714
   16800:	movt	r0, #1
   16804:	movt	r1, #1
   16808:	movt	r3, #1
   1680c:	bl	1249c <__assert_fail@plt>
   16810:	movw	r0, #39624	; 0x9ac8
   16814:	movw	r1, #35106	; 0x8922
   16818:	movw	r3, #38955	; 0x982b
   1681c:	movw	r2, #1819	; 0x71b
   16820:	movt	r0, #1
   16824:	movt	r1, #1
   16828:	movt	r3, #1
   1682c:	bl	1249c <__assert_fail@plt>

00016830 <flatcc_builder_table_add@@Base>:
   16830:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   16834:	add	fp, sp, #24
   16838:	sub	sp, sp, #8
   1683c:	mov	r4, r0
   16840:	ldr	r0, [r0, #32]
   16844:	ldrh	r0, [r0, #14]
   16848:	cmp	r0, #3
   1684c:	bne	1696c <flatcc_builder_table_add@@Base+0x13c>
   16850:	movw	r0, #32765	; 0x7ffd
   16854:	mov	r8, r1
   16858:	cmp	r1, r0
   1685c:	bcs	1698c <flatcc_builder_table_add@@Base+0x15c>
   16860:	ldrh	r0, [r4, #130]	; 0x82
   16864:	cmp	r0, r3
   16868:	strhcc	r3, [r4, #130]	; 0x82
   1686c:	ldr	r0, [r4, #4]
   16870:	add	r1, r0, r8, lsl #1
   16874:	ldrh	r1, [r1]
   16878:	cmp	r1, #0
   1687c:	bne	169ac <flatcc_builder_table_add@@Base+0x17c>
   16880:	ldr	r1, [r4, #12]
   16884:	movw	r7, #31153	; 0x79b1
   16888:	ldr	r6, [r4, #20]
   1688c:	ldr	r5, [r4, #24]
   16890:	movt	r7, #40503	; 0x9e37
   16894:	eor	r1, r1, r8
   16898:	mul	r1, r1, r7
   1689c:	eor	r1, r1, r2
   168a0:	mul	r1, r1, r7
   168a4:	str	r1, [r4, #12]
   168a8:	add	r1, r3, r6
   168ac:	rsb	r3, r3, #0
   168b0:	sub	r1, r1, #1
   168b4:	and	r6, r1, r3
   168b8:	add	r1, r6, r2
   168bc:	cmp	r1, r5
   168c0:	str	r1, [r4, #20]
   168c4:	bcc	1693c <flatcc_builder_table_add@@Base+0x10c>
   168c8:	ldr	r2, [r4, #28]
   168cc:	ldr	r0, [r4, #40]	; 0x28
   168d0:	ldr	r7, [r4, #48]	; 0x30
   168d4:	mov	r3, #1
   168d8:	str	r3, [sp]
   168dc:	mov	r3, #1
   168e0:	add	r1, r1, r2
   168e4:	add	r2, r1, #1
   168e8:	add	r1, r4, #60	; 0x3c
   168ec:	blx	r7
   168f0:	mov	r1, r0
   168f4:	mov	r0, #0
   168f8:	cmp	r1, #0
   168fc:	beq	16908 <flatcc_builder_table_add@@Base+0xd8>
   16900:	sub	sp, fp, #24
   16904:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   16908:	ldr	r0, [r4, #28]
   1690c:	ldr	r2, [r4, #60]	; 0x3c
   16910:	ldr	r3, [r4, #64]	; 0x40
   16914:	ldr	r1, [r4, #32]
   16918:	add	r2, r2, r0
   1691c:	sub	r0, r3, r0
   16920:	str	r2, [r4, #16]
   16924:	movw	r2, #65532	; 0xfffc
   16928:	cmp	r0, r2
   1692c:	movcs	r0, r2
   16930:	str	r0, [r4, #24]
   16934:	str	r2, [r1, #4]
   16938:	ldr	r0, [r4, #4]
   1693c:	uxth	r1, r8
   16940:	add	r2, r6, #4
   16944:	add	r0, r0, r1, lsl #1
   16948:	strh	r2, [r0]
   1694c:	ldrh	r0, [r4, #8]
   16950:	cmp	r0, r1
   16954:	addls	r0, r8, #1
   16958:	strhls	r0, [r4, #8]
   1695c:	ldr	r0, [r4, #16]
   16960:	add	r0, r0, r6
   16964:	sub	sp, fp, #24
   16968:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1696c:	movw	r0, #37175	; 0x9137
   16970:	movw	r1, #35106	; 0x8922
   16974:	movw	r3, #38753	; 0x9761
   16978:	movw	r2, #1773	; 0x6ed
   1697c:	movt	r0, #1
   16980:	movt	r1, #1
   16984:	movt	r3, #1
   16988:	bl	1249c <__assert_fail@plt>
   1698c:	movw	r0, #38827	; 0x97ab
   16990:	movw	r1, #35106	; 0x8922
   16994:	movw	r3, #38753	; 0x9761
   16998:	movw	r2, #1774	; 0x6ee
   1699c:	movt	r0, #1
   169a0:	movt	r1, #1
   169a4:	movt	r3, #1
   169a8:	bl	1249c <__assert_fail@plt>
   169ac:	movw	r0, #39624	; 0x9ac8
   169b0:	movw	r1, #35106	; 0x8922
   169b4:	movw	r3, #38753	; 0x9761
   169b8:	movw	r2, #1784	; 0x6f8
   169bc:	movt	r0, #1
   169c0:	movt	r1, #1
   169c4:	movt	r3, #1
   169c8:	bl	1249c <__assert_fail@plt>

000169cc <flatcc_builder_table_add_union_vector@@Base>:
   169cc:	push	{r4, r5, r6, r7, fp, lr}
   169d0:	add	fp, sp, #16
   169d4:	mov	r6, r0
   169d8:	ldr	r0, [r0, #32]
   169dc:	ldrh	r0, [r0, #14]
   169e0:	cmp	r0, #3
   169e4:	bne	16a4c <flatcc_builder_table_add_union_vector@@Base+0x80>
   169e8:	clz	r0, r3
   169ec:	mov	r5, r1
   169f0:	clz	r1, r2
   169f4:	mov	r4, r3
   169f8:	mov	r7, r2
   169fc:	lsr	r0, r0, #5
   16a00:	lsr	r1, r1, #5
   16a04:	cmp	r1, r0
   16a08:	bne	16a6c <flatcc_builder_table_add_union_vector@@Base+0xa0>
   16a0c:	cmp	r7, #0
   16a10:	beq	16a44 <flatcc_builder_table_add_union_vector@@Base+0x78>
   16a14:	sub	r1, r5, #1
   16a18:	mov	r0, r6
   16a1c:	bl	166a0 <flatcc_builder_table_add_offset@@Base>
   16a20:	cmp	r0, #0
   16a24:	beq	16a8c <flatcc_builder_table_add_union_vector@@Base+0xc0>
   16a28:	str	r7, [r0]
   16a2c:	mov	r0, r6
   16a30:	mov	r1, r5
   16a34:	bl	166a0 <flatcc_builder_table_add_offset@@Base>
   16a38:	cmp	r0, #0
   16a3c:	beq	16aac <flatcc_builder_table_add_union_vector@@Base+0xe0>
   16a40:	str	r4, [r0]
   16a44:	mov	r0, #0
   16a48:	pop	{r4, r5, r6, r7, fp, pc}
   16a4c:	movw	r0, #37175	; 0x9137
   16a50:	movw	r1, #35106	; 0x8922
   16a54:	movw	r3, #38073	; 0x94b9
   16a58:	mov	r2, #1536	; 0x600
   16a5c:	movt	r0, #1
   16a60:	movt	r1, #1
   16a64:	movt	r3, #1
   16a68:	bl	1249c <__assert_fail@plt>
   16a6c:	movw	r0, #38172	; 0x951c
   16a70:	movw	r1, #35106	; 0x8922
   16a74:	movw	r3, #38073	; 0x94b9
   16a78:	movw	r2, #1537	; 0x601
   16a7c:	movt	r0, #1
   16a80:	movt	r1, #1
   16a84:	movt	r3, #1
   16a88:	bl	1249c <__assert_fail@plt>
   16a8c:	movw	r0, #38051	; 0x94a3
   16a90:	movw	r1, #35106	; 0x8922
   16a94:	movw	r3, #38073	; 0x94b9
   16a98:	movw	r2, #1540	; 0x604
   16a9c:	movt	r0, #1
   16aa0:	movt	r1, #1
   16aa4:	movt	r3, #1
   16aa8:	bl	1249c <__assert_fail@plt>
   16aac:	movw	r0, #38051	; 0x94a3
   16ab0:	movw	r1, #35106	; 0x8922
   16ab4:	movw	r3, #38073	; 0x94b9
   16ab8:	movw	r2, #1544	; 0x608
   16abc:	movt	r0, #1
   16ac0:	movt	r1, #1
   16ac4:	movt	r3, #1
   16ac8:	bl	1249c <__assert_fail@plt>

00016acc <flatcc_builder_create_union_vector@@Base>:
   16acc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16ad0:	add	fp, sp, #28
   16ad4:	sub	sp, sp, #12
   16ad8:	mov	r7, #0
   16adc:	mov	r4, r1
   16ae0:	mov	r5, r0
   16ae4:	mov	sl, r3
   16ae8:	mov	r9, r2
   16aec:	mov	r6, #4
   16af0:	str	r7, [r0]
   16af4:	str	r7, [r0, #4]
   16af8:	mov	r0, r1
   16afc:	mov	r1, #4
   16b00:	bl	13f84 <flatcc_builder_start_buffer@@Base+0xbc>
   16b04:	cmp	r0, #0
   16b08:	beq	16b14 <flatcc_builder_create_union_vector@@Base+0x48>
   16b0c:	sub	sp, fp, #28
   16b10:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16b14:	ldr	r0, [r4, #32]
   16b18:	mov	r1, #5
   16b1c:	str	r6, [r0, #16]
   16b20:	ldr	r0, [r4, #32]
   16b24:	str	r7, [r0, #20]
   16b28:	ldr	r0, [r4, #32]
   16b2c:	strh	r1, [r0, #14]
   16b30:	ldr	r1, [r4, #28]
   16b34:	ldr	r2, [r4, #60]	; 0x3c
   16b38:	ldr	r3, [r4, #64]	; 0x40
   16b3c:	add	r2, r2, r1
   16b40:	sub	r1, r3, r1
   16b44:	str	r2, [r4, #16]
   16b48:	mvn	r2, #3
   16b4c:	cmn	r1, #4
   16b50:	movcs	r1, r2
   16b54:	str	r1, [r4, #24]
   16b58:	str	r2, [r0, #4]
   16b5c:	ldr	r1, [r0, #20]
   16b60:	adds	r1, r1, sl
   16b64:	cmpcc	r1, #1073741824	; 0x40000000
   16b68:	bcc	16b8c <flatcc_builder_create_union_vector@@Base+0xc0>
   16b6c:	movw	r0, #39377	; 0x99d1
   16b70:	movw	r1, #35106	; 0x8922
   16b74:	movw	r3, #39404	; 0x99ec
   16b78:	mov	r2, #892	; 0x37c
   16b7c:	movt	r0, #1
   16b80:	movt	r1, #1
   16b84:	movt	r3, #1
   16b88:	bl	1249c <__assert_fail@plt>
   16b8c:	str	r1, [r0, #20]
   16b90:	ldr	r7, [r4, #20]
   16b94:	ldr	r0, [r4, #24]
   16b98:	add	r1, r7, sl, lsl #2
   16b9c:	cmp	r1, r0
   16ba0:	str	r1, [r4, #20]
   16ba4:	bcs	16bb8 <flatcc_builder_create_union_vector@@Base+0xec>
   16ba8:	ldr	r1, [r4, #16]
   16bac:	adds	r2, r1, r7
   16bb0:	bne	16c20 <flatcc_builder_create_union_vector@@Base+0x154>
   16bb4:	b	16b0c <flatcc_builder_create_union_vector@@Base+0x40>
   16bb8:	ldr	r2, [r4, #28]
   16bbc:	ldr	r0, [r4, #40]	; 0x28
   16bc0:	ldr	r6, [r4, #48]	; 0x30
   16bc4:	mov	r3, #1
   16bc8:	str	r3, [sp]
   16bcc:	mov	r3, #1
   16bd0:	add	r1, r1, r2
   16bd4:	add	r2, r1, #1
   16bd8:	add	r1, r4, #60	; 0x3c
   16bdc:	blx	r6
   16be0:	cmp	r0, #0
   16be4:	bne	16b0c <flatcc_builder_create_union_vector@@Base+0x40>
   16be8:	ldr	r0, [r4, #28]
   16bec:	ldr	r1, [r4, #60]	; 0x3c
   16bf0:	ldr	r3, [r4, #64]	; 0x40
   16bf4:	ldr	r2, [r4, #32]
   16bf8:	add	r1, r1, r0
   16bfc:	sub	r0, r3, r0
   16c00:	mvn	r3, #3
   16c04:	cmn	r0, #4
   16c08:	str	r1, [r4, #16]
   16c0c:	movcs	r0, r3
   16c10:	str	r0, [r4, #24]
   16c14:	str	r3, [r2, #4]
   16c18:	adds	r2, r1, r7
   16c1c:	beq	16b0c <flatcc_builder_create_union_vector@@Base+0x40>
   16c20:	ldr	r7, [r4, #20]
   16c24:	add	r2, r7, sl
   16c28:	cmp	r2, r0
   16c2c:	str	r2, [r4, #20]
   16c30:	bcc	16c94 <flatcc_builder_create_union_vector@@Base+0x1c8>
   16c34:	ldr	r1, [r4, #28]
   16c38:	ldr	r0, [r4, #40]	; 0x28
   16c3c:	ldr	r6, [r4, #48]	; 0x30
   16c40:	mov	r3, #1
   16c44:	str	r3, [sp]
   16c48:	mov	r3, #1
   16c4c:	add	r1, r2, r1
   16c50:	add	r2, r1, #1
   16c54:	add	r1, r4, #60	; 0x3c
   16c58:	blx	r6
   16c5c:	cmp	r0, #0
   16c60:	bne	16b0c <flatcc_builder_create_union_vector@@Base+0x40>
   16c64:	ldr	r0, [r4, #28]
   16c68:	ldr	r1, [r4, #60]	; 0x3c
   16c6c:	ldr	r3, [r4, #64]	; 0x40
   16c70:	ldr	r2, [r4, #32]
   16c74:	add	r1, r1, r0
   16c78:	sub	r0, r3, r0
   16c7c:	mvn	r3, #3
   16c80:	cmn	r0, #4
   16c84:	str	r1, [r4, #16]
   16c88:	movcs	r0, r3
   16c8c:	str	r0, [r4, #24]
   16c90:	str	r3, [r2, #4]
   16c94:	adds	r8, r1, r7
   16c98:	beq	16b0c <flatcc_builder_create_union_vector@@Base+0x40>
   16c9c:	cmp	sl, #0
   16ca0:	beq	16cd0 <flatcc_builder_create_union_vector@@Base+0x204>
   16ca4:	add	r0, r9, #4
   16ca8:	mov	r2, sl
   16cac:	mov	r3, r1
   16cb0:	mov	r7, r8
   16cb4:	ldrb	r6, [r0, #-4]
   16cb8:	subs	r2, r2, #1
   16cbc:	strb	r6, [r7], #1
   16cc0:	ldr	r6, [r0]
   16cc4:	add	r0, r0, #8
   16cc8:	str	r6, [r3], #4
   16ccc:	bne	16cb4 <flatcc_builder_create_union_vector@@Base+0x1e8>
   16cd0:	mov	r0, r4
   16cd4:	mov	r2, sl
   16cd8:	mov	r3, r8
   16cdc:	bl	16294 <flatcc_builder_create_offset_vector_direct@@Base+0x8>
   16ce0:	mov	r7, r0
   16ce4:	mov	r9, #0
   16ce8:	cmp	r0, #0
   16cec:	beq	16d18 <flatcc_builder_create_union_vector@@Base+0x24c>
   16cf0:	mvn	r0, #0
   16cf4:	mov	r1, #1
   16cf8:	mov	r2, sl
   16cfc:	mov	r3, #1
   16d00:	str	r1, [sp]
   16d04:	str	r0, [sp, #4]
   16d08:	mov	r0, r4
   16d0c:	mov	r1, r8
   16d10:	bl	16030 <flatcc_builder_create_vector@@Base>
   16d14:	b	16d1c <flatcc_builder_create_union_vector@@Base+0x250>
   16d18:	mov	r0, #0
   16d1c:	orr	r1, r9, r7
   16d20:	stm	r5, {r0, r1}
   16d24:	mov	r1, #0
   16d28:	ldr	r0, [r4, #16]
   16d2c:	ldr	r2, [r4, #20]
   16d30:	bl	1246c <memset@plt>
   16d34:	ldr	r0, [r4, #32]
   16d38:	ldr	r1, [r4, #60]	; 0x3c
   16d3c:	ldr	r2, [r4, #64]	; 0x40
   16d40:	ldr	r3, [r0, #8]
   16d44:	str	r3, [r4, #20]
   16d48:	ldr	r3, [r0]
   16d4c:	str	r3, [r4, #28]
   16d50:	add	r1, r1, r3
   16d54:	ldr	r7, [r0, #4]
   16d58:	str	r1, [r4, #16]
   16d5c:	sub	r1, r2, r3
   16d60:	cmp	r1, r7
   16d64:	movhi	r1, r7
   16d68:	str	r1, [r4, #24]
   16d6c:	ldrh	r1, [r4, #130]	; 0x82
   16d70:	ldrh	r2, [r4, #128]	; 0x80
   16d74:	cmp	r2, r1
   16d78:	strhcc	r1, [r4, #128]	; 0x80
   16d7c:	ldrh	r1, [r0, #12]
   16d80:	sub	r0, r0, #36	; 0x24
   16d84:	str	r0, [r4, #32]
   16d88:	strh	r1, [r4, #130]	; 0x82
   16d8c:	ldr	r0, [r4, #156]	; 0x9c
   16d90:	sub	r0, r0, #1
   16d94:	str	r0, [r4, #156]	; 0x9c
   16d98:	sub	sp, fp, #28
   16d9c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

00016da0 <flatcc_builder_create_union_vector_direct@@Base>:
   16da0:	push	{r4, r5, r6, r7, fp, lr}
   16da4:	add	fp, sp, #16
   16da8:	sub	sp, sp, #8
   16dac:	ldr	r7, [fp, #8]
   16db0:	mov	r5, r2
   16db4:	mov	r4, r0
   16db8:	mov	r0, #0
   16dbc:	mov	r6, r1
   16dc0:	str	r0, [r4]
   16dc4:	str	r0, [r4, #4]
   16dc8:	mov	r0, r1
   16dcc:	mov	r1, r3
   16dd0:	mov	r3, r5
   16dd4:	mov	r2, r7
   16dd8:	bl	16294 <flatcc_builder_create_offset_vector_direct@@Base+0x8>
   16ddc:	cmp	r0, #0
   16de0:	str	r0, [r4, #4]
   16de4:	beq	16e10 <flatcc_builder_create_union_vector_direct@@Base+0x70>
   16de8:	mvn	r0, #0
   16dec:	mov	r1, #1
   16df0:	mov	r2, r7
   16df4:	mov	r3, #1
   16df8:	str	r1, [sp]
   16dfc:	str	r0, [sp, #4]
   16e00:	mov	r0, r6
   16e04:	mov	r1, r5
   16e08:	bl	16030 <flatcc_builder_create_vector@@Base>
   16e0c:	str	r0, [r4]
   16e10:	sub	sp, fp, #16
   16e14:	pop	{r4, r5, r6, r7, fp, pc}

00016e18 <flatcc_builder_start_union_vector@@Base>:
   16e18:	push	{r4, sl, fp, lr}
   16e1c:	add	fp, sp, #8
   16e20:	mov	r1, #4
   16e24:	mov	r4, r0
   16e28:	bl	13f84 <flatcc_builder_start_buffer@@Base+0xbc>
   16e2c:	mov	r1, r0
   16e30:	mvn	r0, #0
   16e34:	cmp	r1, #0
   16e38:	popne	{r4, sl, fp, pc}
   16e3c:	ldr	r0, [r4, #32]
   16e40:	mov	r1, #8
   16e44:	mov	r2, #7
   16e48:	str	r1, [r0, #16]
   16e4c:	mov	r0, #0
   16e50:	ldr	r1, [r4, #32]
   16e54:	str	r0, [r1, #20]
   16e58:	ldr	r1, [r4, #32]
   16e5c:	strh	r2, [r1, #14]
   16e60:	ldr	r2, [r4, #28]
   16e64:	ldr	r3, [r4, #60]	; 0x3c
   16e68:	ldr	ip, [r4, #64]	; 0x40
   16e6c:	add	r3, r3, r2
   16e70:	sub	r2, ip, r2
   16e74:	str	r3, [r4, #16]
   16e78:	mvn	r3, #3
   16e7c:	cmn	r2, #4
   16e80:	movcs	r2, r3
   16e84:	str	r2, [r4, #24]
   16e88:	str	r3, [r1, #4]
   16e8c:	pop	{r4, sl, fp, pc}

00016e90 <flatcc_builder_end_union_vector@@Base>:
   16e90:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16e94:	add	fp, sp, #28
   16e98:	sub	sp, sp, #12
   16e9c:	mov	sl, r0
   16ea0:	mov	r0, #0
   16ea4:	mov	r4, r1
   16ea8:	str	r0, [sl]
   16eac:	str	r0, [sl, #4]
   16eb0:	ldr	r0, [r1, #32]
   16eb4:	ldrh	r1, [r0, #14]
   16eb8:	cmp	r1, #7
   16ebc:	bne	17064 <flatcc_builder_end_union_vector@@Base+0x1d4>
   16ec0:	ldr	r6, [r0, #20]
   16ec4:	ldr	r7, [r4, #20]
   16ec8:	ldr	r2, [r4, #24]
   16ecc:	add	r0, r6, r6, lsl #2
   16ed0:	add	r1, r7, r0
   16ed4:	cmp	r1, r2
   16ed8:	str	r1, [r4, #20]
   16edc:	bcs	16f6c <flatcc_builder_end_union_vector@@Base+0xdc>
   16ee0:	ldr	r0, [r4, #16]
   16ee4:	adds	r1, r0, r7
   16ee8:	beq	16fd4 <flatcc_builder_end_union_vector@@Base+0x144>
   16eec:	add	r8, r1, r6, lsl #2
   16ef0:	cmp	r6, #0
   16ef4:	beq	16f24 <flatcc_builder_end_union_vector@@Base+0x94>
   16ef8:	add	r0, r0, #4
   16efc:	mov	r2, r6
   16f00:	mov	r3, r1
   16f04:	mov	r7, r8
   16f08:	ldrb	r5, [r0, #-4]
   16f0c:	subs	r2, r2, #1
   16f10:	strb	r5, [r7], #1
   16f14:	ldr	r5, [r0]
   16f18:	add	r0, r0, #8
   16f1c:	str	r5, [r3], #4
   16f20:	bne	16f08 <flatcc_builder_end_union_vector@@Base+0x78>
   16f24:	mov	r0, r4
   16f28:	mov	r2, r6
   16f2c:	mov	r3, r8
   16f30:	bl	16294 <flatcc_builder_create_offset_vector_direct@@Base+0x8>
   16f34:	mov	r7, r0
   16f38:	mov	r9, #0
   16f3c:	cmp	r0, #0
   16f40:	beq	16fdc <flatcc_builder_end_union_vector@@Base+0x14c>
   16f44:	mvn	r0, #0
   16f48:	mov	r1, #1
   16f4c:	mov	r2, r6
   16f50:	mov	r3, #1
   16f54:	str	r1, [sp]
   16f58:	str	r0, [sp, #4]
   16f5c:	mov	r0, r4
   16f60:	mov	r1, r8
   16f64:	bl	16030 <flatcc_builder_create_vector@@Base>
   16f68:	b	16fe0 <flatcc_builder_end_union_vector@@Base+0x150>
   16f6c:	ldr	r2, [r4, #28]
   16f70:	ldr	r0, [r4, #40]	; 0x28
   16f74:	ldr	r5, [r4, #48]	; 0x30
   16f78:	mov	r3, #1
   16f7c:	str	r3, [sp]
   16f80:	mov	r3, #1
   16f84:	add	r1, r1, r2
   16f88:	add	r2, r1, #1
   16f8c:	add	r1, r4, #60	; 0x3c
   16f90:	blx	r5
   16f94:	cmp	r0, #0
   16f98:	bne	16fd4 <flatcc_builder_end_union_vector@@Base+0x144>
   16f9c:	ldr	r1, [r4, #28]
   16fa0:	ldr	r0, [r4, #60]	; 0x3c
   16fa4:	ldr	r3, [r4, #64]	; 0x40
   16fa8:	ldr	r2, [r4, #32]
   16fac:	add	r0, r0, r1
   16fb0:	sub	r1, r3, r1
   16fb4:	mvn	r3, #3
   16fb8:	cmn	r1, #4
   16fbc:	str	r0, [r4, #16]
   16fc0:	movcs	r1, r3
   16fc4:	str	r1, [r4, #24]
   16fc8:	str	r3, [r2, #4]
   16fcc:	adds	r1, r0, r7
   16fd0:	bne	16eec <flatcc_builder_end_union_vector@@Base+0x5c>
   16fd4:	sub	sp, fp, #28
   16fd8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16fdc:	mov	r0, #0
   16fe0:	orr	r1, r9, r7
   16fe4:	stm	sl, {r0, r1}
   16fe8:	mov	r1, #0
   16fec:	ldr	r0, [r4, #16]
   16ff0:	ldr	r2, [r4, #20]
   16ff4:	bl	1246c <memset@plt>
   16ff8:	ldr	r0, [r4, #32]
   16ffc:	ldr	r1, [r4, #60]	; 0x3c
   17000:	ldr	r2, [r4, #64]	; 0x40
   17004:	ldr	r3, [r0, #8]
   17008:	str	r3, [r4, #20]
   1700c:	ldr	r3, [r0]
   17010:	str	r3, [r4, #28]
   17014:	add	r1, r1, r3
   17018:	ldr	r7, [r0, #4]
   1701c:	str	r1, [r4, #16]
   17020:	sub	r1, r2, r3
   17024:	cmp	r1, r7
   17028:	movhi	r1, r7
   1702c:	str	r1, [r4, #24]
   17030:	ldrh	r1, [r4, #130]	; 0x82
   17034:	ldrh	r2, [r4, #128]	; 0x80
   17038:	cmp	r2, r1
   1703c:	strhcc	r1, [r4, #128]	; 0x80
   17040:	ldrh	r1, [r0, #12]
   17044:	sub	r0, r0, #36	; 0x24
   17048:	str	r0, [r4, #32]
   1704c:	strh	r1, [r4, #130]	; 0x82
   17050:	ldr	r0, [r4, #156]	; 0x9c
   17054:	sub	r0, r0, #1
   17058:	str	r0, [r4, #156]	; 0x9c
   1705c:	sub	sp, fp, #28
   17060:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17064:	movw	r0, #38212	; 0x9544
   17068:	movw	r1, #35106	; 0x8922
   1706c:	movw	r3, #38262	; 0x9576
   17070:	movw	r2, #1617	; 0x651
   17074:	movt	r0, #1
   17078:	movt	r1, #1
   1707c:	movt	r3, #1
   17080:	bl	1249c <__assert_fail@plt>

00017084 <flatcc_builder_union_vector_count@@Base>:
   17084:	ldr	r0, [r0, #32]
   17088:	ldr	r0, [r0, #20]
   1708c:	bx	lr

00017090 <flatcc_builder_union_vector_edit@@Base>:
   17090:	ldr	r0, [r0, #16]
   17094:	bx	lr

00017098 <flatcc_builder_extend_union_vector@@Base>:
   17098:	push	{r4, r5, fp, lr}
   1709c:	add	fp, sp, #8
   170a0:	sub	sp, sp, #8
   170a4:	mov	r4, r0
   170a8:	ldr	r0, [r0, #32]
   170ac:	ldr	r2, [r0, #20]
   170b0:	adds	r2, r2, r1
   170b4:	cmpcc	r2, #536870912	; 0x20000000
   170b8:	bcc	170dc <flatcc_builder_extend_union_vector@@Base+0x44>
   170bc:	movw	r0, #39377	; 0x99d1
   170c0:	movw	r1, #35106	; 0x8922
   170c4:	movw	r3, #39404	; 0x99ec
   170c8:	mov	r2, #892	; 0x37c
   170cc:	movt	r0, #1
   170d0:	movt	r1, #1
   170d4:	movt	r3, #1
   170d8:	bl	1249c <__assert_fail@plt>
   170dc:	str	r2, [r0, #20]
   170e0:	ldr	r5, [r4, #20]
   170e4:	ldr	r0, [r4, #24]
   170e8:	add	r1, r5, r1, lsl #3
   170ec:	cmp	r1, r0
   170f0:	str	r1, [r4, #20]
   170f4:	bcs	17108 <flatcc_builder_extend_union_vector@@Base+0x70>
   170f8:	ldr	r0, [r4, #16]
   170fc:	add	r0, r0, r5
   17100:	sub	sp, fp, #8
   17104:	pop	{r4, r5, fp, pc}
   17108:	ldr	r2, [r4, #28]
   1710c:	ldr	r0, [r4, #40]	; 0x28
   17110:	ldr	ip, [r4, #48]	; 0x30
   17114:	mov	r3, #1
   17118:	str	r3, [sp]
   1711c:	mov	r3, #1
   17120:	add	r1, r1, r2
   17124:	add	r2, r1, #1
   17128:	add	r1, r4, #60	; 0x3c
   1712c:	blx	ip
   17130:	mov	r1, r0
   17134:	mov	r0, #0
   17138:	cmp	r1, #0
   1713c:	beq	17148 <flatcc_builder_extend_union_vector@@Base+0xb0>
   17140:	sub	sp, fp, #8
   17144:	pop	{r4, r5, fp, pc}
   17148:	ldr	r1, [r4, #28]
   1714c:	ldr	r0, [r4, #60]	; 0x3c
   17150:	ldr	r3, [r4, #64]	; 0x40
   17154:	ldr	r2, [r4, #32]
   17158:	add	r0, r0, r1
   1715c:	sub	r1, r3, r1
   17160:	mvn	r3, #3
   17164:	cmn	r1, #4
   17168:	str	r0, [r4, #16]
   1716c:	movcs	r1, r3
   17170:	str	r1, [r4, #24]
   17174:	str	r3, [r2, #4]
   17178:	add	r0, r0, r5
   1717c:	sub	sp, fp, #8
   17180:	pop	{r4, r5, fp, pc}

00017184 <flatcc_builder_truncate_union_vector@@Base>:
   17184:	push	{fp, lr}
   17188:	mov	fp, sp
   1718c:	ldr	r2, [r0, #32]
   17190:	ldrh	r3, [r2, #14]
   17194:	cmp	r3, #7
   17198:	bne	171e0 <flatcc_builder_truncate_union_vector@@Base+0x5c>
   1719c:	ldr	r3, [r2, #20]
   171a0:	cmp	r3, r1
   171a4:	bcc	17200 <flatcc_builder_truncate_union_vector@@Base+0x7c>
   171a8:	sub	r3, r3, r1
   171ac:	str	r3, [r2, #20]
   171b0:	ldr	r2, [r0, #32]
   171b4:	ldr	r3, [r0, #20]
   171b8:	ldr	ip, [r0, #16]
   171bc:	ldr	r2, [r2, #16]
   171c0:	mls	r3, r2, r1, r3
   171c4:	mul	r2, r2, r1
   171c8:	mov	r1, #0
   171cc:	str	r3, [r0, #20]
   171d0:	add	r0, ip, r3
   171d4:	bl	1246c <memset@plt>
   171d8:	mov	r0, #0
   171dc:	pop	{fp, pc}
   171e0:	movw	r0, #38212	; 0x9544
   171e4:	movw	r1, #35106	; 0x8922
   171e8:	movw	r3, #38345	; 0x95c9
   171ec:	movw	r2, #1665	; 0x681
   171f0:	movt	r0, #1
   171f4:	movt	r1, #1
   171f8:	movt	r3, #1
   171fc:	bl	1249c <__assert_fail@plt>
   17200:	movw	r0, #36776	; 0x8fa8
   17204:	movw	r1, #35106	; 0x8922
   17208:	movw	r3, #38345	; 0x95c9
   1720c:	movw	r2, #1666	; 0x682
   17210:	movt	r0, #1
   17214:	movt	r1, #1
   17218:	movt	r3, #1
   1721c:	bl	1249c <__assert_fail@plt>

00017220 <flatcc_builder_union_vector_push@@Base>:
   17220:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   17224:	add	fp, sp, #24
   17228:	sub	sp, sp, #8
   1722c:	mov	r7, r0
   17230:	ldr	r0, [r0, #32]
   17234:	mov	r9, r1
   17238:	ldrh	r1, [r0, #14]
   1723c:	cmp	r1, #7
   17240:	bne	17308 <flatcc_builder_union_vector_push@@Base+0xe8>
   17244:	ldr	r1, [r0, #20]
   17248:	mov	r6, #0
   1724c:	cmn	r1, #-536870911	; 0xe0000001
   17250:	beq	172b0 <flatcc_builder_union_vector_push@@Base+0x90>
   17254:	add	r1, r1, #1
   17258:	mov	r8, r2
   1725c:	str	r1, [r0, #20]
   17260:	ldr	r4, [r7, #20]
   17264:	ldr	r0, [r7, #24]
   17268:	add	r1, r4, #8
   1726c:	cmp	r1, r0
   17270:	str	r1, [r7, #20]
   17274:	bcs	17280 <flatcc_builder_union_vector_push@@Base+0x60>
   17278:	ldr	r0, [r7, #16]
   1727c:	b	172ec <flatcc_builder_union_vector_push@@Base+0xcc>
   17280:	ldr	r1, [r7, #28]
   17284:	ldr	r0, [r7, #40]	; 0x28
   17288:	ldr	r5, [r7, #48]	; 0x30
   1728c:	mov	r2, #1
   17290:	mov	r3, #1
   17294:	str	r2, [sp]
   17298:	add	r1, r4, r1
   1729c:	add	r2, r1, #9
   172a0:	add	r1, r7, #60	; 0x3c
   172a4:	blx	r5
   172a8:	cmp	r0, #0
   172ac:	beq	172bc <flatcc_builder_union_vector_push@@Base+0x9c>
   172b0:	mov	r0, r6
   172b4:	sub	sp, fp, #24
   172b8:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   172bc:	ldr	r1, [r7, #28]
   172c0:	ldr	r0, [r7, #60]	; 0x3c
   172c4:	ldr	r3, [r7, #64]	; 0x40
   172c8:	ldr	r2, [r7, #32]
   172cc:	add	r0, r0, r1
   172d0:	sub	r1, r3, r1
   172d4:	mvn	r3, #3
   172d8:	cmn	r1, #4
   172dc:	str	r0, [r7, #16]
   172e0:	movcs	r1, r3
   172e4:	str	r1, [r7, #24]
   172e8:	str	r3, [r2, #4]
   172ec:	adds	r0, r0, r4
   172f0:	movne	r6, r0
   172f4:	strne	r9, [r0]
   172f8:	strne	r8, [r0, #4]
   172fc:	mov	r0, r6
   17300:	sub	sp, fp, #24
   17304:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   17308:	movw	r0, #38212	; 0x9544
   1730c:	movw	r1, #35106	; 0x8922
   17310:	movw	r3, #38414	; 0x960e
   17314:	movw	r2, #1677	; 0x68d
   17318:	movt	r0, #1
   1731c:	movt	r1, #1
   17320:	movt	r3, #1
   17324:	bl	1249c <__assert_fail@plt>

00017328 <flatcc_builder_append_union_vector@@Base>:
   17328:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1732c:	add	fp, sp, #24
   17330:	sub	sp, sp, #8
   17334:	mov	r6, r0
   17338:	ldr	r0, [r0, #32]
   1733c:	mov	r8, r1
   17340:	ldrh	r1, [r0, #14]
   17344:	cmp	r1, #7
   17348:	bne	1744c <flatcc_builder_append_union_vector@@Base+0x124>
   1734c:	ldr	r1, [r0, #20]
   17350:	mov	r5, r2
   17354:	adds	r1, r1, r2
   17358:	cmpcc	r1, #536870912	; 0x20000000
   1735c:	bcc	17380 <flatcc_builder_append_union_vector@@Base+0x58>
   17360:	movw	r0, #39377	; 0x99d1
   17364:	movw	r1, #35106	; 0x8922
   17368:	movw	r3, #39404	; 0x99ec
   1736c:	mov	r2, #892	; 0x37c
   17370:	movt	r0, #1
   17374:	movt	r1, #1
   17378:	movt	r3, #1
   1737c:	bl	1249c <__assert_fail@plt>
   17380:	str	r1, [r0, #20]
   17384:	ldr	r4, [r6, #20]
   17388:	ldr	r0, [r6, #24]
   1738c:	add	r1, r4, r5, lsl #3
   17390:	cmp	r1, r0
   17394:	str	r1, [r6, #20]
   17398:	bcs	173c4 <flatcc_builder_append_union_vector@@Base+0x9c>
   1739c:	ldr	r0, [r6, #16]
   173a0:	adds	r7, r0, r4
   173a4:	beq	1743c <flatcc_builder_append_union_vector@@Base+0x114>
   173a8:	lsl	r2, r5, #3
   173ac:	mov	r0, r7
   173b0:	mov	r1, r8
   173b4:	bl	123e8 <memcpy@plt>
   173b8:	mov	r0, r7
   173bc:	sub	sp, fp, #24
   173c0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   173c4:	ldr	r2, [r6, #28]
   173c8:	ldr	r0, [r6, #40]	; 0x28
   173cc:	ldr	r7, [r6, #48]	; 0x30
   173d0:	mov	r3, #1
   173d4:	str	r3, [sp]
   173d8:	mov	r3, #1
   173dc:	add	r1, r1, r2
   173e0:	add	r2, r1, #1
   173e4:	add	r1, r6, #60	; 0x3c
   173e8:	blx	r7
   173ec:	mov	r7, #0
   173f0:	cmp	r0, #0
   173f4:	beq	17404 <flatcc_builder_append_union_vector@@Base+0xdc>
   173f8:	mov	r0, r7
   173fc:	sub	sp, fp, #24
   17400:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   17404:	ldr	r1, [r6, #28]
   17408:	ldr	r0, [r6, #60]	; 0x3c
   1740c:	ldr	r3, [r6, #64]	; 0x40
   17410:	ldr	r2, [r6, #32]
   17414:	add	r0, r0, r1
   17418:	sub	r1, r3, r1
   1741c:	mvn	r3, #3
   17420:	cmn	r1, #4
   17424:	str	r0, [r6, #16]
   17428:	movcs	r1, r3
   1742c:	str	r1, [r6, #24]
   17430:	str	r3, [r2, #4]
   17434:	adds	r7, r0, r4
   17438:	bne	173a8 <flatcc_builder_append_union_vector@@Base+0x80>
   1743c:	mov	r7, #0
   17440:	mov	r0, r7
   17444:	sub	sp, fp, #24
   17448:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1744c:	movw	r0, #38212	; 0x9544
   17450:	movw	r1, #35106	; 0x8922
   17454:	movw	r3, #38523	; 0x967b
   17458:	movw	r2, #1692	; 0x69c
   1745c:	movt	r0, #1
   17460:	movt	r1, #1
   17464:	movt	r3, #1
   17468:	bl	1249c <__assert_fail@plt>

0001746c <flatcc_builder_create_string@@Base>:
   1746c:	push	{r4, r5, r6, sl, fp, lr}
   17470:	add	fp, sp, #16
   17474:	sub	sp, sp, #80	; 0x50
   17478:	str	r2, [fp, #-20]	; 0xffffffec
   1747c:	mvn	r5, r2
   17480:	mov	r6, r0
   17484:	mov	r3, #1
   17488:	cmp	r2, #0
   1748c:	ldr	ip, [r0, #136]	; 0x88
   17490:	sub	r0, fp, #20
   17494:	str	r0, [sp, #12]
   17498:	mov	r0, #4
   1749c:	str	r0, [sp, #4]
   174a0:	str	r0, [sp, #16]
   174a4:	str	r3, [sp, #8]
   174a8:	add	r5, ip, r5
   174ac:	and	r5, r5, #3
   174b0:	add	r5, r5, #1
   174b4:	beq	174d0 <flatcc_builder_create_string@@Base+0x64>
   174b8:	mov	r3, #2
   174bc:	add	r0, r2, #4
   174c0:	str	r1, [sp, #20]
   174c4:	str	r2, [sp, #24]
   174c8:	str	r3, [sp, #8]
   174cc:	str	r0, [sp, #4]
   174d0:	movw	r2, #34576	; 0x8710
   174d4:	add	lr, sp, #4
   174d8:	add	r1, r0, r5
   174dc:	add	r0, lr, r3, lsl #3
   174e0:	movt	r2, #1
   174e4:	str	r1, [sp, #4]
   174e8:	cmp	r1, #0
   174ec:	str	r2, [r0, #8]
   174f0:	add	r2, r3, #1
   174f4:	str	r5, [r0, #12]
   174f8:	str	r2, [sp, #8]
   174fc:	ble	17550 <flatcc_builder_create_string@@Base+0xe4>
   17500:	ldr	r0, [r6, #36]	; 0x24
   17504:	ldr	r4, [r6, #44]	; 0x2c
   17508:	sub	r5, ip, r1
   1750c:	str	r1, [sp]
   17510:	add	r1, lr, #8
   17514:	mov	r3, r5
   17518:	blx	r4
   1751c:	cmp	r0, #0
   17520:	streq	r5, [r6, #136]	; 0x88
   17524:	moveq	r0, r5
   17528:	subeq	sp, fp, #16
   1752c:	popeq	{r4, r5, r6, sl, fp, pc}
   17530:	movw	r0, #39624	; 0x9ac8
   17534:	movw	r1, #35106	; 0x8922
   17538:	movw	r3, #39303	; 0x9987
   1753c:	movw	r2, #651	; 0x28b
   17540:	movt	r0, #1
   17544:	movt	r1, #1
   17548:	movt	r3, #1
   1754c:	bl	1249c <__assert_fail@plt>
   17550:	movw	r0, #39624	; 0x9ac8
   17554:	movw	r1, #35106	; 0x8922
   17558:	movw	r3, #39303	; 0x9987
   1755c:	movw	r2, #647	; 0x287
   17560:	movt	r0, #1
   17564:	movt	r1, #1
   17568:	movt	r3, #1
   1756c:	bl	1249c <__assert_fail@plt>

00017570 <flatcc_builder_create_string_str@@Base>:
   17570:	push	{r4, r5, fp, lr}
   17574:	add	fp, sp, #8
   17578:	mov	r5, r0
   1757c:	mov	r0, r1
   17580:	mov	r4, r1
   17584:	bl	12454 <strlen@plt>
   17588:	mov	r2, r0
   1758c:	mov	r0, r5
   17590:	mov	r1, r4
   17594:	pop	{r4, r5, fp, lr}
   17598:	b	1746c <flatcc_builder_create_string@@Base>

0001759c <flatcc_builder_create_string_strn@@Base>:
   1759c:	push	{r4, r5, r6, sl, fp, lr}
   175a0:	add	fp, sp, #16
   175a4:	mov	r6, r0
   175a8:	mov	r5, r1
   175ac:	mov	r0, r1
   175b0:	mov	r1, #0
   175b4:	mov	r4, r2
   175b8:	bl	12478 <memchr@plt>
   175bc:	cmp	r0, #0
   175c0:	mov	r1, r5
   175c4:	subne	r4, r0, r5
   175c8:	mov	r0, r6
   175cc:	mov	r2, r4
   175d0:	pop	{r4, r5, r6, sl, fp, lr}
   175d4:	b	1746c <flatcc_builder_create_string@@Base>

000175d8 <flatcc_builder_end_string@@Base>:
   175d8:	push	{r4, r5, fp, lr}
   175dc:	add	fp, sp, #8
   175e0:	mov	r4, r0
   175e4:	ldr	r0, [r0, #32]
   175e8:	ldrh	r1, [r0, #14]
   175ec:	cmp	r1, #6
   175f0:	bne	17698 <flatcc_builder_end_string@@Base+0xc0>
   175f4:	ldr	r2, [r0, #20]
   175f8:	ldr	r0, [r4, #20]
   175fc:	cmp	r2, r0
   17600:	bne	176b8 <flatcc_builder_end_string@@Base+0xe0>
   17604:	ldr	r1, [r4, #16]
   17608:	mov	r0, r4
   1760c:	bl	1746c <flatcc_builder_create_string@@Base>
   17610:	mov	r5, r0
   17614:	cmp	r0, #0
   17618:	beq	17690 <flatcc_builder_end_string@@Base+0xb8>
   1761c:	ldr	r0, [r4, #16]
   17620:	ldr	r2, [r4, #20]
   17624:	mov	r1, #0
   17628:	bl	1246c <memset@plt>
   1762c:	ldr	r0, [r4, #32]
   17630:	ldr	r1, [r4, #60]	; 0x3c
   17634:	ldr	ip, [r4, #64]	; 0x40
   17638:	ldr	r3, [r0, #8]
   1763c:	str	r3, [r4, #20]
   17640:	ldr	r3, [r0]
   17644:	str	r3, [r4, #28]
   17648:	add	r1, r1, r3
   1764c:	ldr	r2, [r0, #4]
   17650:	str	r1, [r4, #16]
   17654:	sub	r1, ip, r3
   17658:	cmp	r1, r2
   1765c:	movhi	r1, r2
   17660:	str	r1, [r4, #24]
   17664:	ldrh	r1, [r4, #130]	; 0x82
   17668:	ldrh	r2, [r4, #128]	; 0x80
   1766c:	cmp	r2, r1
   17670:	strhcc	r1, [r4, #128]	; 0x80
   17674:	ldrh	r1, [r0, #12]
   17678:	sub	r0, r0, #36	; 0x24
   1767c:	str	r0, [r4, #32]
   17680:	strh	r1, [r4, #130]	; 0x82
   17684:	ldr	r0, [r4, #156]	; 0x9c
   17688:	sub	r0, r0, #1
   1768c:	str	r0, [r4, #156]	; 0x9c
   17690:	mov	r0, r5
   17694:	pop	{r4, r5, fp, pc}
   17698:	movw	r0, #36423	; 0x8e47
   1769c:	movw	r1, #35106	; 0x8922
   176a0:	movw	r3, #38650	; 0x96fa
   176a4:	movw	r2, #1732	; 0x6c4
   176a8:	movt	r0, #1
   176ac:	movt	r1, #1
   176b0:	movt	r3, #1
   176b4:	bl	1249c <__assert_fail@plt>
   176b8:	movw	r0, #38717	; 0x973d
   176bc:	movw	r1, #35106	; 0x8922
   176c0:	movw	r3, #38650	; 0x96fa
   176c4:	movw	r2, #1733	; 0x6c5
   176c8:	movt	r0, #1
   176cc:	movt	r1, #1
   176d0:	movt	r3, #1
   176d4:	bl	1249c <__assert_fail@plt>

000176d8 <flatcc_builder_string_edit@@Base>:
   176d8:	ldr	r0, [r0, #16]
   176dc:	bx	lr

000176e0 <flatcc_builder_string_len@@Base>:
   176e0:	ldr	r0, [r0, #32]
   176e4:	ldr	r0, [r0, #20]
   176e8:	bx	lr

000176ec <flatcc_builder_table_edit@@Base>:
   176ec:	ldr	r2, [r0, #32]
   176f0:	ldrh	r2, [r2, #14]
   176f4:	cmp	r2, #3
   176f8:	ldreq	r2, [r0, #16]
   176fc:	ldreq	r0, [r0, #20]
   17700:	addeq	r0, r2, r0
   17704:	subeq	r0, r0, r1
   17708:	bxeq	lr
   1770c:	push	{fp, lr}
   17710:	mov	fp, sp
   17714:	movw	r0, #37175	; 0x9137
   17718:	movw	r1, #35106	; 0x8922
   1771c:	movw	r3, #38895	; 0x97ef
   17720:	movw	r2, #1794	; 0x702
   17724:	movt	r0, #1
   17728:	movt	r1, #1
   1772c:	movt	r3, #1
   17730:	bl	1249c <__assert_fail@plt>

00017734 <flatcc_builder_table_add_copy@@Base>:
   17734:	push	{r4, r5, r6, sl, fp, lr}
   17738:	add	fp, sp, #16
   1773c:	mov	r4, r3
   17740:	ldr	r3, [fp, #8]
   17744:	mov	r5, r2
   17748:	mov	r2, r4
   1774c:	bl	16830 <flatcc_builder_table_add@@Base>
   17750:	mov	r6, r0
   17754:	cmp	r0, #0
   17758:	beq	1776c <flatcc_builder_table_add_copy@@Base+0x38>
   1775c:	mov	r0, r6
   17760:	mov	r1, r5
   17764:	mov	r2, r4
   17768:	bl	123e8 <memcpy@plt>
   1776c:	mov	r0, r6
   17770:	pop	{r4, r5, r6, sl, fp, pc}

00017774 <flatcc_builder_push_buffer_alignment@@Base>:
   17774:	ldrh	r1, [r0, #128]	; 0x80
   17778:	mov	r2, #4
   1777c:	strh	r2, [r0, #128]	; 0x80
   17780:	mov	r0, r1
   17784:	bx	lr

00017788 <flatcc_builder_pop_buffer_alignment@@Base>:
   17788:	ldrh	r2, [r0, #128]	; 0x80
   1778c:	cmp	r2, r1
   17790:	strhcc	r1, [r0, #128]	; 0x80
   17794:	bx	lr

00017798 <flatcc_builder_get_buffer_alignment@@Base>:
   17798:	ldrh	r0, [r0, #128]	; 0x80
   1779c:	bx	lr

000177a0 <flatcc_builder_set_vtable_clustering@@Base>:
   177a0:	clz	r1, r1
   177a4:	lsr	r1, r1, #5
   177a8:	str	r1, [r0, #180]	; 0xb4
   177ac:	bx	lr

000177b0 <flatcc_builder_set_block_align@@Base>:
   177b0:	strh	r1, [r0, #132]	; 0x84
   177b4:	bx	lr

000177b8 <flatcc_builder_get_level@@Base>:
   177b8:	ldr	r0, [r0, #156]	; 0x9c
   177bc:	bx	lr

000177c0 <flatcc_builder_set_max_level@@Base>:
   177c0:	str	r1, [r0, #176]	; 0xb0
   177c4:	ldr	r2, [r0, #160]	; 0xa0
   177c8:	cmp	r2, r1
   177cc:	strlt	r1, [r0, #160]	; 0xa0
   177d0:	bx	lr

000177d4 <flatcc_builder_get_buffer_size@@Base>:
   177d4:	ldr	r1, [r0, #136]	; 0x88
   177d8:	ldr	r0, [r0, #140]	; 0x8c
   177dc:	sub	r0, r0, r1
   177e0:	bx	lr

000177e4 <flatcc_builder_get_buffer_start@@Base>:
   177e4:	ldr	r0, [r0, #136]	; 0x88
   177e8:	bx	lr

000177ec <flatcc_builder_get_buffer_end@@Base>:
   177ec:	ldr	r0, [r0, #140]	; 0x8c
   177f0:	bx	lr

000177f4 <flatcc_builder_set_vtable_cache_limit@@Base>:
   177f4:	str	r1, [r0, #172]	; 0xac
   177f8:	bx	lr

000177fc <flatcc_builder_set_identifier@@Base>:
   177fc:	movw	r2, #34576	; 0x8710
   17800:	cmp	r1, #0
   17804:	movt	r2, #1
   17808:	movne	r2, r1
   1780c:	ldr	r1, [r2]
   17810:	str	r1, [r0, #168]	; 0xa8
   17814:	bx	lr

00017818 <flatcc_builder_get_type@@Base>:
   17818:	ldr	r0, [r0, #32]
   1781c:	cmp	r0, #0
   17820:	ldrhne	r0, [r0, #14]
   17824:	moveq	r0, #0
   17828:	bx	lr

0001782c <flatcc_builder_get_type_at@@Base>:
   1782c:	mov	r2, r0
   17830:	cmp	r1, #1
   17834:	mov	r0, #0
   17838:	ldrge	r3, [r2, #156]	; 0x9c
   1783c:	cmpge	r3, r1
   17840:	bge	17848 <flatcc_builder_get_type_at@@Base+0x1c>
   17844:	bx	lr
   17848:	sub	r0, r1, r3
   1784c:	ldr	r1, [r2, #32]
   17850:	add	r0, r0, r0, lsl #3
   17854:	add	r0, r1, r0, lsl #2
   17858:	ldrh	r0, [r0, #14]
   1785c:	bx	lr

00017860 <flatcc_builder_get_direct_buffer@@Base>:
   17860:	ldr	r2, [r0, #184]	; 0xb8
   17864:	cmp	r2, #0
   17868:	beq	17894 <flatcc_builder_get_direct_buffer@@Base+0x34>
   1786c:	ldr	r2, [r0, #188]	; 0xbc
   17870:	ldr	r3, [r0, #192]	; 0xc0
   17874:	cmp	r2, r3
   17878:	beq	178ac <flatcc_builder_get_direct_buffer@@Base+0x4c>
   1787c:	cmp	r1, #0
   17880:	moveq	r0, #0
   17884:	bxeq	lr
   17888:	mov	r0, #0
   1788c:	str	r0, [r1]
   17890:	bx	lr
   17894:	cmp	r1, #0
   17898:	moveq	r0, #0
   1789c:	bxeq	lr
   178a0:	mov	r0, #0
   178a4:	str	r0, [r1]
   178a8:	bx	lr
   178ac:	cmp	r1, #0
   178b0:	ldrne	r2, [r0, #212]	; 0xd4
   178b4:	strne	r2, [r1]
   178b8:	ldr	r0, [r0, #196]	; 0xc4
   178bc:	bx	lr

000178c0 <flatcc_builder_copy_buffer@@Base>:
   178c0:	push	{fp, lr}
   178c4:	mov	fp, sp
   178c8:	ldr	r3, [r0, #184]	; 0xb8
   178cc:	cmp	r3, #0
   178d0:	beq	17904 <flatcc_builder_copy_buffer@@Base+0x44>
   178d4:	add	r0, r0, #188	; 0xbc
   178d8:	bl	18018 <flatcc_emitter_copy_buffer@@Base>
   178dc:	cmp	r0, #0
   178e0:	popne	{fp, pc}
   178e4:	movw	r0, #33289	; 0x8209
   178e8:	movw	r1, #35106	; 0x8922
   178ec:	movw	r3, #39034	; 0x987a
   178f0:	movw	r2, #1926	; 0x786
   178f4:	movt	r0, #1
   178f8:	movt	r1, #1
   178fc:	movt	r3, #1
   17900:	bl	1249c <__assert_fail@plt>
   17904:	mov	r0, #0
   17908:	pop	{fp, pc}

0001790c <flatcc_builder_finalize_buffer@@Base>:
   1790c:	push	{r4, r5, r6, sl, fp, lr}
   17910:	add	fp, sp, #16
   17914:	mov	r5, r0
   17918:	ldr	r0, [r0, #136]	; 0x88
   1791c:	cmp	r1, #0
   17920:	ldr	r2, [r5, #140]	; 0x8c
   17924:	sub	r4, r2, r0
   17928:	mov	r0, r4
   1792c:	strne	r4, [r1]
   17930:	bl	12430 <malloc@plt>
   17934:	cmp	r0, #0
   17938:	beq	17988 <flatcc_builder_finalize_buffer@@Base+0x7c>
   1793c:	mov	r6, r0
   17940:	ldr	r0, [r5, #184]	; 0xb8
   17944:	cmp	r0, #0
   17948:	beq	179a8 <flatcc_builder_finalize_buffer@@Base+0x9c>
   1794c:	add	r0, r5, #188	; 0xbc
   17950:	mov	r1, r6
   17954:	mov	r2, r4
   17958:	bl	18018 <flatcc_emitter_copy_buffer@@Base>
   1795c:	cmp	r0, #0
   17960:	movne	r0, r6
   17964:	popne	{r4, r5, r6, sl, fp, pc}
   17968:	movw	r0, #33289	; 0x8209
   1796c:	movw	r1, #35106	; 0x8922
   17970:	movw	r3, #39034	; 0x987a
   17974:	movw	r2, #1926	; 0x786
   17978:	movt	r0, #1
   1797c:	movt	r1, #1
   17980:	movt	r3, #1
   17984:	bl	1249c <__assert_fail@plt>
   17988:	movw	r0, #39624	; 0x9ac8
   1798c:	movw	r1, #35106	; 0x8922
   17990:	movw	r3, #39103	; 0x98bf
   17994:	movw	r2, #1944	; 0x798
   17998:	movt	r0, #1
   1799c:	movt	r1, #1
   179a0:	movt	r3, #1
   179a4:	bl	1249c <__assert_fail@plt>
   179a8:	movw	r0, #39624	; 0x9ac8
   179ac:	movw	r1, #35106	; 0x8922
   179b0:	movw	r3, #39103	; 0x98bf
   179b4:	movw	r2, #1948	; 0x79c
   179b8:	movt	r0, #1
   179bc:	movt	r1, #1
   179c0:	movt	r3, #1
   179c4:	bl	1249c <__assert_fail@plt>

000179c8 <flatcc_builder_finalize_aligned_buffer@@Base>:
   179c8:	push	{r4, r5, r6, r7, fp, lr}
   179cc:	add	fp, sp, #16
   179d0:	sub	sp, sp, #8
   179d4:	mov	r5, r0
   179d8:	mov	r4, r1
   179dc:	ldr	r0, [r0, #136]	; 0x88
   179e0:	ldr	r1, [r5, #140]	; 0x8c
   179e4:	cmp	r4, #0
   179e8:	sub	r0, r1, r0
   179ec:	mov	r1, #0
   179f0:	strne	r0, [r4]
   179f4:	ldrh	r2, [r5, #128]	; 0x80
   179f8:	str	r1, [sp, #4]
   179fc:	add	r0, r0, r2
   17a00:	cmp	r2, #4
   17a04:	mov	r1, r2
   17a08:	rsb	r2, r2, #0
   17a0c:	sub	r0, r0, #1
   17a10:	movls	r1, #4
   17a14:	and	r7, r0, r2
   17a18:	add	r0, sp, #4
   17a1c:	mov	r2, r7
   17a20:	bl	12460 <posix_memalign@plt>
   17a24:	ldr	r6, [sp, #4]
   17a28:	cmp	r0, #0
   17a2c:	cmpne	r6, #0
   17a30:	bne	17a6c <flatcc_builder_finalize_aligned_buffer@@Base+0xa4>
   17a34:	cmp	r6, #0
   17a38:	beq	17a74 <flatcc_builder_finalize_aligned_buffer@@Base+0xac>
   17a3c:	ldr	r0, [r5, #184]	; 0xb8
   17a40:	cmp	r0, #0
   17a44:	beq	17a6c <flatcc_builder_finalize_aligned_buffer@@Base+0xa4>
   17a48:	add	r0, r5, #188	; 0xbc
   17a4c:	mov	r1, r6
   17a50:	mov	r2, r7
   17a54:	bl	18018 <flatcc_emitter_copy_buffer@@Base>
   17a58:	cmp	r0, #0
   17a5c:	beq	17a8c <flatcc_builder_finalize_aligned_buffer@@Base+0xc4>
   17a60:	mov	r0, r6
   17a64:	sub	sp, fp, #16
   17a68:	pop	{r4, r5, r6, r7, fp, pc}
   17a6c:	mov	r0, r6
   17a70:	bl	123dc <free@plt>
   17a74:	mov	r6, #0
   17a78:	cmp	r4, #0
   17a7c:	strne	r6, [r4]
   17a80:	mov	r0, r6
   17a84:	sub	sp, fp, #16
   17a88:	pop	{r4, r5, r6, r7, fp, pc}
   17a8c:	movw	r0, #33289	; 0x8209
   17a90:	movw	r1, #35106	; 0x8922
   17a94:	movw	r3, #39034	; 0x987a
   17a98:	movw	r2, #1926	; 0x786
   17a9c:	movt	r0, #1
   17aa0:	movt	r1, #1
   17aa4:	movt	r3, #1
   17aa8:	bl	1249c <__assert_fail@plt>

00017aac <flatcc_builder_aligned_alloc@@Base>:
   17aac:	push	{fp, lr}
   17ab0:	mov	fp, sp
   17ab4:	sub	sp, sp, #8
   17ab8:	mov	r2, r1
   17abc:	mov	r1, r0
   17ac0:	mov	r0, #0
   17ac4:	cmp	r1, #4
   17ac8:	str	r0, [sp, #4]
   17acc:	add	r0, sp, #4
   17ad0:	movls	r1, #4
   17ad4:	bl	12460 <posix_memalign@plt>
   17ad8:	mov	r1, r0
   17adc:	ldr	r0, [sp, #4]
   17ae0:	cmp	r1, #0
   17ae4:	cmpne	r0, #0
   17ae8:	bne	17af4 <flatcc_builder_aligned_alloc@@Base+0x48>
   17aec:	mov	sp, fp
   17af0:	pop	{fp, pc}
   17af4:	bl	123dc <free@plt>
   17af8:	mov	r0, #0
   17afc:	str	r0, [sp, #4]
   17b00:	mov	sp, fp
   17b04:	pop	{fp, pc}

00017b08 <flatcc_builder_aligned_free@@Base>:
   17b08:	b	123dc <free@plt>

00017b0c <flatcc_builder_get_emit_context@@Base>:
   17b0c:	ldr	r0, [r0, #36]	; 0x24
   17b10:	bx	lr

00017b14 <flatcc_emitter_recycle_page@@Base>:
   17b14:	ldr	r3, [r0]
   17b18:	mov	r2, r0
   17b1c:	mvn	r0, #0
   17b20:	cmp	r3, r1
   17b24:	ldrne	r2, [r2, #4]
   17b28:	cmpne	r2, r1
   17b2c:	bne	17b34 <flatcc_emitter_recycle_page@@Base+0x20>
   17b30:	bx	lr
   17b34:	ldr	r0, [r1, #2944]	; 0xb80
   17b38:	ldr	r2, [r1, #2948]	; 0xb84
   17b3c:	str	r2, [r0, #2948]	; 0xb84
   17b40:	ldr	r2, [r1, #2948]	; 0xb84
   17b44:	str	r0, [r2, #2944]	; 0xb80
   17b48:	ldr	r0, [r3, #2948]	; 0xb84
   17b4c:	str	r3, [r1, #2944]	; 0xb80
   17b50:	str	r0, [r1, #2948]	; 0xb84
   17b54:	str	r1, [r0, #2944]	; 0xb80
   17b58:	ldr	r0, [r1, #2944]	; 0xb80
   17b5c:	str	r1, [r0, #2948]	; 0xb84
   17b60:	mov	r0, #0
   17b64:	bx	lr

00017b68 <flatcc_emitter_reset@@Base>:
   17b68:	push	{r4, sl, fp, lr}
   17b6c:	add	fp, sp, #8
   17b70:	ldr	r1, [r0]
   17b74:	cmp	r1, #0
   17b78:	beq	17c30 <flatcc_emitter_reset@@Base+0xc8>
   17b7c:	mov	r4, r0
   17b80:	add	r2, r1, #1472	; 0x5c0
   17b84:	mov	r0, #1472	; 0x5c0
   17b88:	mov	r3, #0
   17b8c:	stmib	r4, {r1, r2}
   17b90:	str	r0, [r4, #12]
   17b94:	str	r2, [r4, #16]
   17b98:	str	r0, [r4, #20]
   17b9c:	movw	r0, #64064	; 0xfa40
   17ba0:	movt	r0, #65535	; 0xffff
   17ba4:	str	r0, [r1, #2952]	; 0xb88
   17ba8:	ldr	r2, [r4, #32]
   17bac:	ldr	r0, [r4, #24]
   17bb0:	cmp	r2, #0
   17bb4:	moveq	r2, r0
   17bb8:	streq	r0, [r4, #32]
   17bbc:	str	r3, [r4, #24]
   17bc0:	add	r2, r2, r2, lsl #1
   17bc4:	lsr	r2, r2, #2
   17bc8:	add	r0, r2, r0, lsr #2
   17bcc:	str	r0, [r4, #32]
   17bd0:	ldr	r2, [r4, #28]
   17bd4:	cmp	r2, r0, lsl #1
   17bd8:	bls	17c30 <flatcc_emitter_reset@@Base+0xc8>
   17bdc:	mov	r2, r1
   17be0:	ldr	r0, [r2, #2944]!	; 0xb80
   17be4:	cmp	r0, r1
   17be8:	beq	17c30 <flatcc_emitter_reset@@Base+0xc8>
   17bec:	ldr	r3, [r0, #2944]	; 0xb80
   17bf0:	str	r3, [r2]
   17bf4:	ldr	r2, [r0, #2944]	; 0xb80
   17bf8:	str	r1, [r2, #2948]	; 0xb84
   17bfc:	bl	123dc <free@plt>
   17c00:	ldr	r0, [r4, #28]
   17c04:	ldr	r1, [r4, #32]
   17c08:	sub	r0, r0, #2944	; 0xb80
   17c0c:	cmp	r0, r1, lsl #1
   17c10:	str	r0, [r4, #28]
   17c14:	popls	{r4, sl, fp, pc}
   17c18:	ldr	r1, [r4, #4]
   17c1c:	ldr	r3, [r4]
   17c20:	mov	r2, r1
   17c24:	ldr	r0, [r2, #2944]!	; 0xb80
   17c28:	cmp	r0, r3
   17c2c:	bne	17bec <flatcc_emitter_reset@@Base+0x84>
   17c30:	pop	{r4, sl, fp, pc}

00017c34 <flatcc_emitter_clear@@Base>:
   17c34:	push	{r4, r5, r6, sl, fp, lr}
   17c38:	add	fp, sp, #16
   17c3c:	ldr	r5, [r0]
   17c40:	cmp	r5, #0
   17c44:	popeq	{r4, r5, r6, sl, fp, pc}
   17c48:	mov	r4, r0
   17c4c:	ldr	r0, [r5, #2948]	; 0xb84
   17c50:	mov	r6, #0
   17c54:	str	r6, [r0, #2944]	; 0xb80
   17c58:	ldr	r0, [r5, #2944]	; 0xb80
   17c5c:	cmp	r0, #0
   17c60:	beq	17c7c <flatcc_emitter_clear@@Base+0x48>
   17c64:	mov	r5, r0
   17c68:	ldr	r0, [r0, #2948]	; 0xb84
   17c6c:	bl	123dc <free@plt>
   17c70:	ldr	r0, [r5, #2944]	; 0xb80
   17c74:	cmp	r0, #0
   17c78:	bne	17c64 <flatcc_emitter_clear@@Base+0x30>
   17c7c:	mov	r0, r5
   17c80:	bl	123dc <free@plt>
   17c84:	vmov.i32	q8, #0	; 0x00000000
   17c88:	add	r0, r4, #16
   17c8c:	vst1.32	{d16-d17}, [r0]
   17c90:	mov	r0, #32
   17c94:	vst1.32	{d16-d17}, [r4], r0
   17c98:	str	r6, [r4]
   17c9c:	pop	{r4, r5, r6, sl, fp, pc}

00017ca0 <flatcc_emitter@@Base>:
   17ca0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17ca4:	add	fp, sp, #28
   17ca8:	sub	sp, sp, #4
   17cac:	mov	r6, r0
   17cb0:	mov	r7, r1
   17cb4:	ldr	r0, [r0, #24]
   17cb8:	ldr	r1, [fp, #8]
   17cbc:	mov	r4, r2
   17cc0:	cmn	r3, #1
   17cc4:	mov	r9, r6
   17cc8:	add	r0, r0, r1
   17ccc:	str	r0, [r6, #24]
   17cd0:	ble	17e1c <flatcc_emitter@@Base+0x17c>
   17cd4:	ldr	r0, [r9, #20]!
   17cd8:	cmp	r0, r1
   17cdc:	bcs	17f9c <flatcc_emitter@@Base+0x2fc>
   17ce0:	mov	r8, #0
   17ce4:	cmp	r4, #0
   17ce8:	beq	17ffc <flatcc_emitter@@Base+0x35c>
   17cec:	movw	sl, #64064	; 0xfa40
   17cf0:	movt	sl, #65535	; 0xffff
   17cf4:	ldr	r8, [r7, #4]
   17cf8:	cmp	r8, #0
   17cfc:	beq	17e00 <flatcc_emitter@@Base+0x160>
   17d00:	ldr	r9, [r7]
   17d04:	cmp	r8, r0
   17d08:	mov	r5, r8
   17d0c:	bls	17dcc <flatcc_emitter@@Base+0x12c>
   17d10:	mov	r5, r0
   17d14:	cmp	r5, #0
   17d18:	bne	17dcc <flatcc_emitter@@Base+0x12c>
   17d1c:	ldr	r5, [r6, #4]
   17d20:	cmp	r5, #0
   17d24:	beq	17d38 <flatcc_emitter@@Base+0x98>
   17d28:	ldr	r0, [r5, #2944]	; 0xb80
   17d2c:	ldr	r1, [r6]
   17d30:	cmp	r0, r1
   17d34:	bne	17d70 <flatcc_emitter@@Base+0xd0>
   17d38:	movw	r0, #2956	; 0xb8c
   17d3c:	bl	12430 <malloc@plt>
   17d40:	cmp	r0, #0
   17d44:	beq	17fac <flatcc_emitter@@Base+0x30c>
   17d48:	ldr	r1, [r6, #28]
   17d4c:	cmp	r5, #0
   17d50:	add	r1, r1, #2944	; 0xb80
   17d54:	str	r1, [r6, #28]
   17d58:	beq	17d9c <flatcc_emitter@@Base+0xfc>
   17d5c:	ldr	r1, [r6]
   17d60:	str	r1, [r0, #2944]	; 0xb80
   17d64:	str	r5, [r0, #2948]	; 0xb84
   17d68:	str	r0, [r1, #2948]	; 0xb84
   17d6c:	str	r0, [r5, #2944]	; 0xb80
   17d70:	mov	r5, #2944	; 0xb80
   17d74:	str	r0, [r6, #4]
   17d78:	str	r0, [r6, #16]
   17d7c:	str	r5, [r6, #20]
   17d80:	ldr	r1, [r0, #2948]	; 0xb84
   17d84:	ldr	r1, [r1, #2952]	; 0xb88
   17d88:	add	r1, r1, #2944	; 0xb80
   17d8c:	str	r1, [r0, #2952]	; 0xb88
   17d90:	cmp	r8, r5
   17d94:	bhi	17d14 <flatcc_emitter@@Base+0x74>
   17d98:	b	17dc8 <flatcc_emitter@@Base+0x128>
   17d9c:	add	r1, r0, #1472	; 0x5c0
   17da0:	mov	r5, #1472	; 0x5c0
   17da4:	str	r0, [r6]
   17da8:	stmib	r6, {r0, r1, r5}
   17dac:	str	r1, [r6, #16]
   17db0:	str	r5, [r6, #20]
   17db4:	str	r0, [r0, #2944]	; 0xb80
   17db8:	str	r0, [r0, #2948]	; 0xb84
   17dbc:	str	sl, [r0, #2952]	; 0xb88
   17dc0:	cmp	r8, r5
   17dc4:	bhi	17d14 <flatcc_emitter@@Base+0x74>
   17dc8:	mov	r5, r8
   17dcc:	ldr	r0, [r6, #16]
   17dd0:	mov	r1, r9
   17dd4:	mov	r2, r5
   17dd8:	bl	123e8 <memcpy@plt>
   17ddc:	ldr	r0, [r6, #16]
   17de0:	ldr	r1, [r6, #20]
   17de4:	add	r9, r9, r5
   17de8:	subs	r8, r8, r5
   17dec:	add	r2, r0, r5
   17df0:	sub	r0, r1, r5
   17df4:	str	r2, [r6, #16]
   17df8:	str	r0, [r6, #20]
   17dfc:	bne	17d04 <flatcc_emitter@@Base+0x64>
   17e00:	subs	r4, r4, #1
   17e04:	add	r7, r7, #8
   17e08:	bne	17cf4 <flatcc_emitter@@Base+0x54>
   17e0c:	mov	r8, #0
   17e10:	mov	r0, r8
   17e14:	sub	sp, fp, #28
   17e18:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17e1c:	ldr	r0, [r9, #12]!
   17e20:	cmp	r0, r1
   17e24:	bcs	17fbc <flatcc_emitter@@Base+0x31c>
   17e28:	mov	r8, #0
   17e2c:	cmp	r4, #0
   17e30:	beq	17ffc <flatcc_emitter@@Base+0x35c>
   17e34:	add	r0, r7, r4, lsl #3
   17e38:	movw	sl, #2952	; 0xb88
   17e3c:	ldr	r8, [r0, #-4]
   17e40:	sub	r1, r0, #8
   17e44:	str	r1, [sp]
   17e48:	cmp	r8, #0
   17e4c:	beq	17f80 <flatcc_emitter@@Base+0x2e0>
   17e50:	ldr	r0, [sp]
   17e54:	ldr	r0, [r0]
   17e58:	add	r7, r0, r8
   17e5c:	ldr	r1, [r9]
   17e60:	cmp	r8, r1
   17e64:	bhi	17e94 <flatcc_emitter@@Base+0x1f4>
   17e68:	b	17f50 <flatcc_emitter@@Base+0x2b0>
   17e6c:	add	r3, r0, #2944	; 0xb80
   17e70:	mov	r1, #2944	; 0xb80
   17e74:	str	r3, [r6, #8]
   17e78:	str	r1, [r6, #12]
   17e7c:	ldr	r0, [r0, #2944]	; 0xb80
   17e80:	ldr	r0, [r0, #2952]	; 0xb88
   17e84:	sub	r0, r0, #2944	; 0xb80
   17e88:	str	r0, [r2]
   17e8c:	cmp	r8, r1
   17e90:	bls	17f50 <flatcc_emitter@@Base+0x2b0>
   17e94:	cmp	r1, #0
   17e98:	mov	r5, r1
   17e9c:	bne	17f54 <flatcc_emitter@@Base+0x2b4>
   17ea0:	ldr	r5, [r6]
   17ea4:	cmp	r5, #0
   17ea8:	beq	17ed4 <flatcc_emitter@@Base+0x234>
   17eac:	ldr	r0, [r5, #2948]	; 0xb84
   17eb0:	ldr	r1, [r6, #4]
   17eb4:	cmp	r0, r1
   17eb8:	beq	17ed4 <flatcc_emitter@@Base+0x234>
   17ebc:	ldr	r1, [r5, #2952]	; 0xb88
   17ec0:	mov	r2, r0
   17ec4:	sub	r1, r1, #2944	; 0xb80
   17ec8:	str	r1, [r2, #2952]!	; 0xb88
   17ecc:	str	r0, [r6]
   17ed0:	b	17e6c <flatcc_emitter@@Base+0x1cc>
   17ed4:	movw	r0, #2956	; 0xb8c
   17ed8:	bl	12430 <malloc@plt>
   17edc:	cmp	r0, #0
   17ee0:	beq	18008 <flatcc_emitter@@Base+0x368>
   17ee4:	ldr	r1, [r6, #28]
   17ee8:	cmp	r5, #0
   17eec:	add	r1, r1, #2944	; 0xb80
   17ef0:	str	r1, [r6, #28]
   17ef4:	beq	17f18 <flatcc_emitter@@Base+0x278>
   17ef8:	ldr	r1, [r6, #4]
   17efc:	add	r2, r0, sl
   17f00:	str	r5, [r0, #2944]	; 0xb80
   17f04:	str	r1, [r0, #2948]	; 0xb84
   17f08:	str	r0, [r5, #2948]	; 0xb84
   17f0c:	str	r0, [r1, #2944]	; 0xb80
   17f10:	str	r0, [r6]
   17f14:	b	17e6c <flatcc_emitter@@Base+0x1cc>
   17f18:	add	r2, r0, #1472	; 0x5c0
   17f1c:	mov	r1, #1472	; 0x5c0
   17f20:	str	r0, [r6]
   17f24:	stmib	r6, {r0, r2}
   17f28:	str	r1, [r6, #12]
   17f2c:	str	r2, [r6, #16]
   17f30:	movw	r2, #64064	; 0xfa40
   17f34:	str	r1, [r6, #20]
   17f38:	str	r0, [r0, #2944]	; 0xb80
   17f3c:	str	r0, [r0, #2948]	; 0xb84
   17f40:	movt	r2, #65535	; 0xffff
   17f44:	str	r2, [r0, #2952]	; 0xb88
   17f48:	cmp	r8, r1
   17f4c:	bhi	17e94 <flatcc_emitter@@Base+0x1f4>
   17f50:	mov	r5, r8
   17f54:	sub	r0, r1, r5
   17f58:	sub	r7, r7, r5
   17f5c:	mov	r2, r5
   17f60:	str	r0, [r6, #12]
   17f64:	mov	r1, r7
   17f68:	ldr	r0, [r6, #8]
   17f6c:	sub	r0, r0, r5
   17f70:	str	r0, [r6, #8]
   17f74:	bl	123e8 <memcpy@plt>
   17f78:	subs	r8, r8, r5
   17f7c:	bne	17e5c <flatcc_emitter@@Base+0x1bc>
   17f80:	ldr	r0, [sp]
   17f84:	subs	r4, r4, #1
   17f88:	bne	17e3c <flatcc_emitter@@Base+0x19c>
   17f8c:	mov	r8, #0
   17f90:	mov	r0, r8
   17f94:	sub	sp, fp, #28
   17f98:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17f9c:	ldr	r5, [r6, #16]
   17fa0:	add	r2, r5, r1
   17fa4:	str	r2, [r6, #16]
   17fa8:	b	17fc8 <flatcc_emitter@@Base+0x328>
   17fac:	mvn	r8, #0
   17fb0:	mov	r0, r8
   17fb4:	sub	sp, fp, #28
   17fb8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17fbc:	ldr	r2, [r6, #8]
   17fc0:	sub	r5, r2, r1
   17fc4:	str	r5, [r6, #8]
   17fc8:	sub	r0, r0, r1
   17fcc:	mov	r8, #0
   17fd0:	cmp	r4, #0
   17fd4:	str	r0, [r9]
   17fd8:	beq	17ffc <flatcc_emitter@@Base+0x35c>
   17fdc:	ldm	r7, {r1, r2}
   17fe0:	mov	r0, r5
   17fe4:	bl	123e8 <memcpy@plt>
   17fe8:	ldr	r0, [r7, #4]
   17fec:	add	r7, r7, #8
   17ff0:	subs	r4, r4, #1
   17ff4:	add	r5, r5, r0
   17ff8:	bne	17fdc <flatcc_emitter@@Base+0x33c>
   17ffc:	mov	r0, r8
   18000:	sub	sp, fp, #28
   18004:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18008:	mvn	r8, #0
   1800c:	mov	r0, r8
   18010:	sub	sp, fp, #28
   18014:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

00018018 <flatcc_emitter_copy_buffer@@Base>:
   18018:	push	{r4, r5, r6, sl, fp, lr}
   1801c:	add	fp, sp, #16
   18020:	mov	r3, r2
   18024:	ldr	r2, [r0, #24]
   18028:	mov	r5, #0
   1802c:	cmp	r2, r3
   18030:	bhi	180b8 <flatcc_emitter_copy_buffer@@Base+0xa0>
   18034:	mov	r4, r0
   18038:	ldr	r0, [r0]
   1803c:	cmp	r0, #0
   18040:	beq	180b8 <flatcc_emitter_copy_buffer@@Base+0xa0>
   18044:	mov	r6, r1
   18048:	ldr	r1, [r4, #4]
   1804c:	cmp	r0, r1
   18050:	beq	180c0 <flatcc_emitter_copy_buffer@@Base+0xa8>
   18054:	ldr	r0, [r4, #12]
   18058:	ldr	r1, [r4, #8]
   1805c:	rsb	r5, r0, #2944	; 0xb80
   18060:	mov	r0, r6
   18064:	mov	r2, r5
   18068:	bl	123e8 <memcpy@plt>
   1806c:	ldm	r4, {r0, r1}
   18070:	add	r5, r6, r5
   18074:	ldr	r6, [r0, #2944]	; 0xb80
   18078:	cmp	r6, r1
   1807c:	beq	180a4 <flatcc_emitter_copy_buffer@@Base+0x8c>
   18080:	mov	r0, r5
   18084:	mov	r1, r6
   18088:	mov	r2, #2944	; 0xb80
   1808c:	bl	123e8 <memcpy@plt>
   18090:	ldr	r6, [r6, #2944]	; 0xb80
   18094:	ldr	r0, [r4, #4]
   18098:	add	r5, r5, #2944	; 0xb80
   1809c:	cmp	r6, r0
   180a0:	bne	18080 <flatcc_emitter_copy_buffer@@Base+0x68>
   180a4:	ldr	r0, [r4, #20]
   180a8:	mov	r1, r6
   180ac:	rsb	r2, r0, #2944	; 0xb80
   180b0:	mov	r0, r5
   180b4:	bl	123e8 <memcpy@plt>
   180b8:	mov	r0, r5
   180bc:	pop	{r4, r5, r6, sl, fp, pc}
   180c0:	ldr	r1, [r4, #8]
   180c4:	mov	r0, r6
   180c8:	bl	123e8 <memcpy@plt>
   180cc:	mov	r0, r6
   180d0:	pop	{r4, r5, r6, sl, fp, pc}

000180d4 <__libc_csu_init@@Base>:
   180d4:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   180d8:	mov	r7, r0
   180dc:	ldr	r6, [pc, #72]	; 1812c <__libc_csu_init@@Base+0x58>
   180e0:	ldr	r5, [pc, #72]	; 18130 <__libc_csu_init@@Base+0x5c>
   180e4:	add	r6, pc, r6
   180e8:	add	r5, pc, r5
   180ec:	sub	r6, r6, r5
   180f0:	mov	r8, r1
   180f4:	mov	r9, r2
   180f8:	bl	12398 <strcmp@plt-0x20>
   180fc:	asrs	r6, r6, #2
   18100:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   18104:	mov	r4, #0
   18108:	add	r4, r4, #1
   1810c:	ldr	r3, [r5], #4
   18110:	mov	r2, r9
   18114:	mov	r1, r8
   18118:	mov	r0, r7
   1811c:	blx	r3
   18120:	cmp	r6, r4
   18124:	bne	18108 <__libc_csu_init@@Base+0x34>
   18128:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1812c:	andeq	r1, r1, r0, lsr #28
   18130:	andeq	r1, r1, r8, lsl lr

00018134 <__libc_csu_fini@@Base>:
   18134:	bx	lr

Disassembly of section .fini:

00018138 <.fini>:
   18138:	push	{r3, lr}
   1813c:	pop	{r3, pc}
