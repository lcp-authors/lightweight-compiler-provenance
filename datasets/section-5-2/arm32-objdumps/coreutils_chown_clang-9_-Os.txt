
../repos/coreutils/src/chown:     file format elf32-littlearm


Disassembly of section .init:

000111f4 <.init>:
   111f4:	push	{r3, lr}
   111f8:	bl	115a4 <__assert_fail@plt+0x48>
   111fc:	pop	{r3, pc}

Disassembly of section .plt:

00011200 <fstatfs64@plt-0x14>:
   11200:	push	{lr}		; (str lr, [sp, #-4]!)
   11204:	ldr	lr, [pc, #4]	; 11210 <fstatfs64@plt-0x4>
   11208:	add	lr, pc, lr
   1120c:	ldr	pc, [lr, #8]!
   11210:	strdeq	r9, [r1], -r0

00011214 <fstatfs64@plt>:
   11214:	add	ip, pc, #0, 12
   11218:	add	ip, ip, #102400	; 0x19000
   1121c:	ldr	pc, [ip, #3568]!	; 0xdf0

00011220 <calloc@plt>:
   11220:	add	ip, pc, #0, 12
   11224:	add	ip, ip, #102400	; 0x19000
   11228:	ldr	pc, [ip, #3560]!	; 0xde8

0001122c <endgrent@plt>:
   1122c:	add	ip, pc, #0, 12
   11230:	add	ip, ip, #102400	; 0x19000
   11234:	ldr	pc, [ip, #3552]!	; 0xde0

00011238 <fputs_unlocked@plt>:
   11238:	add	ip, pc, #0, 12
   1123c:	add	ip, ip, #102400	; 0x19000
   11240:	ldr	pc, [ip, #3544]!	; 0xdd8

00011244 <raise@plt>:
   11244:	add	ip, pc, #0, 12
   11248:	add	ip, ip, #102400	; 0x19000
   1124c:	ldr	pc, [ip, #3536]!	; 0xdd0

00011250 <getpwnam@plt>:
   11250:	add	ip, pc, #0, 12
   11254:	add	ip, ip, #102400	; 0x19000
   11258:	ldr	pc, [ip, #3528]!	; 0xdc8

0001125c <strcmp@plt>:
   1125c:	add	ip, pc, #0, 12
   11260:	add	ip, ip, #102400	; 0x19000
   11264:	ldr	pc, [ip, #3520]!	; 0xdc0

00011268 <getpwuid@plt>:
   11268:	add	ip, pc, #0, 12
   1126c:	add	ip, ip, #102400	; 0x19000
   11270:	ldr	pc, [ip, #3512]!	; 0xdb8

00011274 <fflush@plt>:
   11274:	add	ip, pc, #0, 12
   11278:	add	ip, ip, #102400	; 0x19000
   1127c:	ldr	pc, [ip, #3504]!	; 0xdb0

00011280 <memmove@plt>:
   11280:	add	ip, pc, #0, 12
   11284:	add	ip, ip, #102400	; 0x19000
   11288:	ldr	pc, [ip, #3496]!	; 0xda8

0001128c <free@plt>:
   1128c:	add	ip, pc, #0, 12
   11290:	add	ip, ip, #102400	; 0x19000
   11294:	ldr	pc, [ip, #3488]!	; 0xda0

00011298 <_exit@plt>:
   11298:	add	ip, pc, #0, 12
   1129c:	add	ip, ip, #102400	; 0x19000
   112a0:	ldr	pc, [ip, #3480]!	; 0xd98

000112a4 <memcpy@plt>:
   112a4:	add	ip, pc, #0, 12
   112a8:	add	ip, ip, #102400	; 0x19000
   112ac:	ldr	pc, [ip, #3472]!	; 0xd90

000112b0 <mbsinit@plt>:
   112b0:	add	ip, pc, #0, 12
   112b4:	add	ip, ip, #102400	; 0x19000
   112b8:	ldr	pc, [ip, #3464]!	; 0xd88

000112bc <stpcpy@plt>:
   112bc:	add	ip, pc, #0, 12
   112c0:	add	ip, ip, #102400	; 0x19000
   112c4:	ldr	pc, [ip, #3456]!	; 0xd80

000112c8 <dcgettext@plt>:
   112c8:	add	ip, pc, #0, 12
   112cc:	add	ip, ip, #102400	; 0x19000
   112d0:	ldr	pc, [ip, #3448]!	; 0xd78

000112d4 <realloc@plt>:
   112d4:	add	ip, pc, #0, 12
   112d8:	add	ip, ip, #102400	; 0x19000
   112dc:	ldr	pc, [ip, #3440]!	; 0xd70

000112e0 <textdomain@plt>:
   112e0:	add	ip, pc, #0, 12
   112e4:	add	ip, ip, #102400	; 0x19000
   112e8:	ldr	pc, [ip, #3432]!	; 0xd68

000112ec <__fxstatat64@plt>:
   112ec:	add	ip, pc, #0, 12
   112f0:	add	ip, ip, #102400	; 0x19000
   112f4:	ldr	pc, [ip, #3424]!	; 0xd60

000112f8 <iswprint@plt>:
   112f8:	add	ip, pc, #0, 12
   112fc:	add	ip, ip, #102400	; 0x19000
   11300:	ldr	pc, [ip, #3416]!	; 0xd58

00011304 <__fxstat64@plt>:
   11304:	add	ip, pc, #0, 12
   11308:	add	ip, ip, #102400	; 0x19000
   1130c:	ldr	pc, [ip, #3408]!	; 0xd50

00011310 <lseek64@plt>:
   11310:	add	ip, pc, #0, 12
   11314:	add	ip, ip, #102400	; 0x19000
   11318:	ldr	pc, [ip, #3400]!	; 0xd48

0001131c <__ctype_get_mb_cur_max@plt>:
   1131c:	add	ip, pc, #0, 12
   11320:	add	ip, ip, #102400	; 0x19000
   11324:	ldr	pc, [ip, #3392]!	; 0xd40

00011328 <__fpending@plt>:
   11328:	add	ip, pc, #0, 12
   1132c:	add	ip, ip, #102400	; 0x19000
   11330:	ldr	pc, [ip, #3384]!	; 0xd38

00011334 <ferror_unlocked@plt>:
   11334:	add	ip, pc, #0, 12
   11338:	add	ip, ip, #102400	; 0x19000
   1133c:	ldr	pc, [ip, #3376]!	; 0xd30

00011340 <mbrtowc@plt>:
   11340:	add	ip, pc, #0, 12
   11344:	add	ip, ip, #102400	; 0x19000
   11348:	ldr	pc, [ip, #3368]!	; 0xd28

0001134c <error@plt>:
   1134c:	add	ip, pc, #0, 12
   11350:	add	ip, ip, #102400	; 0x19000
   11354:	ldr	pc, [ip, #3360]!	; 0xd20

00011358 <open64@plt>:
   11358:	add	ip, pc, #0, 12
   1135c:	add	ip, ip, #102400	; 0x19000
   11360:	ldr	pc, [ip, #3352]!	; 0xd18

00011364 <malloc@plt>:
   11364:	add	ip, pc, #0, 12
   11368:	add	ip, ip, #102400	; 0x19000
   1136c:	ldr	pc, [ip, #3344]!	; 0xd10

00011370 <__libc_start_main@plt>:
   11370:	add	ip, pc, #0, 12
   11374:	add	ip, ip, #102400	; 0x19000
   11378:	ldr	pc, [ip, #3336]!	; 0xd08

0001137c <__freading@plt>:
   1137c:	add	ip, pc, #0, 12
   11380:	add	ip, ip, #102400	; 0x19000
   11384:	ldr	pc, [ip, #3328]!	; 0xd00

00011388 <__gmon_start__@plt>:
   11388:	add	ip, pc, #0, 12
   1138c:	add	ip, ip, #102400	; 0x19000
   11390:	ldr	pc, [ip, #3320]!	; 0xcf8

00011394 <getopt_long@plt>:
   11394:	add	ip, pc, #0, 12
   11398:	add	ip, ip, #102400	; 0x19000
   1139c:	ldr	pc, [ip, #3312]!	; 0xcf0

000113a0 <__ctype_b_loc@plt>:
   113a0:	add	ip, pc, #0, 12
   113a4:	add	ip, ip, #102400	; 0x19000
   113a8:	ldr	pc, [ip, #3304]!	; 0xce8

000113ac <exit@plt>:
   113ac:	add	ip, pc, #0, 12
   113b0:	add	ip, ip, #102400	; 0x19000
   113b4:	ldr	pc, [ip, #3296]!	; 0xce0

000113b8 <bcmp@plt>:
   113b8:	add	ip, pc, #0, 12
   113bc:	add	ip, ip, #102400	; 0x19000
   113c0:	ldr	pc, [ip, #3288]!	; 0xcd8

000113c4 <strtoul@plt>:
   113c4:	add	ip, pc, #0, 12
   113c8:	add	ip, ip, #102400	; 0x19000
   113cc:	ldr	pc, [ip, #3280]!	; 0xcd0

000113d0 <strlen@plt>:
   113d0:	add	ip, pc, #0, 12
   113d4:	add	ip, ip, #102400	; 0x19000
   113d8:	ldr	pc, [ip, #3272]!	; 0xcc8

000113dc <strchr@plt>:
   113dc:	add	ip, pc, #0, 12
   113e0:	add	ip, ip, #102400	; 0x19000
   113e4:	ldr	pc, [ip, #3264]!	; 0xcc0

000113e8 <openat64@plt>:
   113e8:	add	ip, pc, #0, 12
   113ec:	add	ip, ip, #102400	; 0x19000
   113f0:	ldr	pc, [ip, #3256]!	; 0xcb8

000113f4 <fchown@plt>:
   113f4:	add	ip, pc, #0, 12
   113f8:	add	ip, ip, #102400	; 0x19000
   113fc:	ldr	pc, [ip, #3248]!	; 0xcb0

00011400 <__errno_location@plt>:
   11400:	add	ip, pc, #0, 12
   11404:	add	ip, ip, #102400	; 0x19000
   11408:	ldr	pc, [ip, #3240]!	; 0xca8

0001140c <__cxa_atexit@plt>:
   1140c:	add	ip, pc, #0, 12
   11410:	add	ip, ip, #102400	; 0x19000
   11414:	ldr	pc, [ip, #3232]!	; 0xca0

00011418 <memset@plt>:
   11418:	add	ip, pc, #0, 12
   1141c:	add	ip, ip, #102400	; 0x19000
   11420:	ldr	pc, [ip, #3224]!	; 0xc98

00011424 <__printf_chk@plt>:
   11424:	add	ip, pc, #0, 12
   11428:	add	ip, ip, #102400	; 0x19000
   1142c:	ldr	pc, [ip, #3216]!	; 0xc90

00011430 <fileno@plt>:
   11430:	add	ip, pc, #0, 12
   11434:	add	ip, ip, #102400	; 0x19000
   11438:	ldr	pc, [ip, #3208]!	; 0xc88

0001143c <__fprintf_chk@plt>:
   1143c:	add	ip, pc, #0, 12
   11440:	add	ip, ip, #102400	; 0x19000
   11444:	ldr	pc, [ip, #3200]!	; 0xc80

00011448 <fclose@plt>:
   11448:	add	ip, pc, #0, 12
   1144c:	add	ip, ip, #102400	; 0x19000
   11450:	ldr	pc, [ip, #3192]!	; 0xc78

00011454 <fseeko64@plt>:
   11454:	add	ip, pc, #0, 12
   11458:	add	ip, ip, #102400	; 0x19000
   1145c:	ldr	pc, [ip, #3184]!	; 0xc70

00011460 <fcntl64@plt>:
   11460:	add	ip, pc, #0, 12
   11464:	add	ip, ip, #102400	; 0x19000
   11468:	ldr	pc, [ip, #3176]!	; 0xc68

0001146c <setlocale@plt>:
   1146c:	add	ip, pc, #0, 12
   11470:	add	ip, ip, #102400	; 0x19000
   11474:	ldr	pc, [ip, #3168]!	; 0xc60

00011478 <endpwent@plt>:
   11478:	add	ip, pc, #0, 12
   1147c:	add	ip, ip, #102400	; 0x19000
   11480:	ldr	pc, [ip, #3160]!	; 0xc58

00011484 <strrchr@plt>:
   11484:	add	ip, pc, #0, 12
   11488:	add	ip, ip, #102400	; 0x19000
   1148c:	ldr	pc, [ip, #3152]!	; 0xc50

00011490 <nl_langinfo@plt>:
   11490:	add	ip, pc, #0, 12
   11494:	add	ip, ip, #102400	; 0x19000
   11498:	ldr	pc, [ip, #3144]!	; 0xc48

0001149c <readdir64@plt>:
   1149c:	add	ip, pc, #0, 12
   114a0:	add	ip, ip, #102400	; 0x19000
   114a4:	ldr	pc, [ip, #3136]!	; 0xc40

000114a8 <fdopendir@plt>:
   114a8:	add	ip, pc, #0, 12
   114ac:	add	ip, ip, #102400	; 0x19000
   114b0:	ldr	pc, [ip, #3128]!	; 0xc38

000114b4 <dirfd@plt>:
   114b4:	add	ip, pc, #0, 12
   114b8:	add	ip, ip, #102400	; 0x19000
   114bc:	ldr	pc, [ip, #3120]!	; 0xc30

000114c0 <fchdir@plt>:
   114c0:	add	ip, pc, #0, 12
   114c4:	add	ip, ip, #102400	; 0x19000
   114c8:	ldr	pc, [ip, #3112]!	; 0xc28

000114cc <qsort@plt>:
   114cc:	add	ip, pc, #0, 12
   114d0:	add	ip, ip, #102400	; 0x19000
   114d4:	ldr	pc, [ip, #3104]!	; 0xc20

000114d8 <fchownat@plt>:
   114d8:	add	ip, pc, #0, 12
   114dc:	add	ip, ip, #102400	; 0x19000
   114e0:	ldr	pc, [ip, #3096]!	; 0xc18

000114e4 <bindtextdomain@plt>:
   114e4:	add	ip, pc, #0, 12
   114e8:	add	ip, ip, #102400	; 0x19000
   114ec:	ldr	pc, [ip, #3088]!	; 0xc10

000114f0 <__xstat64@plt>:
   114f0:	add	ip, pc, #0, 12
   114f4:	add	ip, ip, #102400	; 0x19000
   114f8:	ldr	pc, [ip, #3080]!	; 0xc08

000114fc <fputs@plt>:
   114fc:	add	ip, pc, #0, 12
   11500:	add	ip, ip, #102400	; 0x19000
   11504:	ldr	pc, [ip, #3072]!	; 0xc00

00011508 <strncmp@plt>:
   11508:	add	ip, pc, #0, 12
   1150c:	add	ip, ip, #102400	; 0x19000
   11510:	ldr	pc, [ip, #3064]!	; 0xbf8

00011514 <abort@plt>:
   11514:	add	ip, pc, #0, 12
   11518:	add	ip, ip, #102400	; 0x19000
   1151c:	ldr	pc, [ip, #3056]!	; 0xbf0

00011520 <close@plt>:
   11520:	add	ip, pc, #0, 12
   11524:	add	ip, ip, #102400	; 0x19000
   11528:	ldr	pc, [ip, #3048]!	; 0xbe8

0001152c <__lxstat64@plt>:
   1152c:	add	ip, pc, #0, 12
   11530:	add	ip, ip, #102400	; 0x19000
   11534:	ldr	pc, [ip, #3040]!	; 0xbe0

00011538 <closedir@plt>:
   11538:	add	ip, pc, #0, 12
   1153c:	add	ip, ip, #102400	; 0x19000
   11540:	ldr	pc, [ip, #3032]!	; 0xbd8

00011544 <getgrgid@plt>:
   11544:	add	ip, pc, #0, 12
   11548:	add	ip, ip, #102400	; 0x19000
   1154c:	ldr	pc, [ip, #3024]!	; 0xbd0

00011550 <getgrnam@plt>:
   11550:	add	ip, pc, #0, 12
   11554:	add	ip, ip, #102400	; 0x19000
   11558:	ldr	pc, [ip, #3016]!	; 0xbc8

0001155c <__assert_fail@plt>:
   1155c:	add	ip, pc, #0, 12
   11560:	add	ip, ip, #102400	; 0x19000
   11564:	ldr	pc, [ip, #3008]!	; 0xbc0

Disassembly of section .text:

00011568 <.text>:
   11568:	mov	fp, #0
   1156c:	mov	lr, #0
   11570:	pop	{r1}		; (ldr r1, [sp], #4)
   11574:	mov	r2, sp
   11578:	push	{r2}		; (str r2, [sp, #-4]!)
   1157c:	push	{r0}		; (str r0, [sp, #-4]!)
   11580:	ldr	ip, [pc, #16]	; 11598 <__assert_fail@plt+0x3c>
   11584:	push	{ip}		; (str ip, [sp, #-4]!)
   11588:	ldr	r0, [pc, #12]	; 1159c <__assert_fail@plt+0x40>
   1158c:	ldr	r3, [pc, #12]	; 115a0 <__assert_fail@plt+0x44>
   11590:	bl	11370 <__libc_start_main@plt>
   11594:	bl	11514 <abort@plt>
   11598:	andeq	r9, r1, r4, ror #12
   1159c:	andeq	r1, r1, r8, lsr #19
   115a0:	andeq	r9, r1, r4, lsl #12
   115a4:	ldr	r3, [pc, #20]	; 115c0 <__assert_fail@plt+0x64>
   115a8:	ldr	r2, [pc, #20]	; 115c4 <__assert_fail@plt+0x68>
   115ac:	add	r3, pc, r3
   115b0:	ldr	r2, [r3, r2]
   115b4:	cmp	r2, #0
   115b8:	bxeq	lr
   115bc:	b	11388 <__gmon_start__@plt>
   115c0:	andeq	r9, r1, ip, asr #20
   115c4:	andeq	r0, r0, r8, lsr #2
   115c8:	ldr	r0, [pc, #24]	; 115e8 <__assert_fail@plt+0x8c>
   115cc:	ldr	r3, [pc, #24]	; 115ec <__assert_fail@plt+0x90>
   115d0:	cmp	r3, r0
   115d4:	bxeq	lr
   115d8:	ldr	r3, [pc, #16]	; 115f0 <__assert_fail@plt+0x94>
   115dc:	cmp	r3, #0
   115e0:	bxeq	lr
   115e4:	bx	r3
   115e8:	andeq	fp, r2, r0, lsl #3
   115ec:	andeq	fp, r2, r0, lsl #3
   115f0:	andeq	r0, r0, r0
   115f4:	ldr	r0, [pc, #36]	; 11620 <__assert_fail@plt+0xc4>
   115f8:	ldr	r1, [pc, #36]	; 11624 <__assert_fail@plt+0xc8>
   115fc:	sub	r1, r1, r0
   11600:	asr	r1, r1, #2
   11604:	add	r1, r1, r1, lsr #31
   11608:	asrs	r1, r1, #1
   1160c:	bxeq	lr
   11610:	ldr	r3, [pc, #16]	; 11628 <__assert_fail@plt+0xcc>
   11614:	cmp	r3, #0
   11618:	bxeq	lr
   1161c:	bx	r3
   11620:	andeq	fp, r2, r0, lsl #3
   11624:	andeq	fp, r2, r0, lsl #3
   11628:	andeq	r0, r0, r0
   1162c:	push	{r4, lr}
   11630:	ldr	r4, [pc, #24]	; 11650 <__assert_fail@plt+0xf4>
   11634:	ldrb	r3, [r4]
   11638:	cmp	r3, #0
   1163c:	popne	{r4, pc}
   11640:	bl	115c8 <__assert_fail@plt+0x6c>
   11644:	mov	r3, #1
   11648:	strb	r3, [r4]
   1164c:	pop	{r4, pc}
   11650:	muleq	r2, ip, r1
   11654:	b	115f4 <__assert_fail@plt+0x98>
   11658:	push	{fp, lr}
   1165c:	mov	fp, sp
   11660:	sub	sp, sp, #64	; 0x40
   11664:	mov	r8, r0
   11668:	cmp	r0, #0
   1166c:	bne	11968 <__assert_fail@plt+0x40c>
   11670:	movw	r1, #38667	; 0x970b
   11674:	mov	r0, #0
   11678:	mov	r2, #5
   1167c:	movt	r1, #1
   11680:	bl	112c8 <dcgettext@plt>
   11684:	movw	r5, #45504	; 0xb1c0
   11688:	mov	r1, r0
   1168c:	mov	r0, #1
   11690:	movt	r5, #2
   11694:	ldr	r2, [r5]
   11698:	mov	r3, r2
   1169c:	bl	11424 <__printf_chk@plt>
   116a0:	movw	r1, #38764	; 0x976c
   116a4:	mov	r0, #0
   116a8:	mov	r2, #5
   116ac:	movt	r1, #1
   116b0:	bl	112c8 <dcgettext@plt>
   116b4:	movw	r9, #45460	; 0xb194
   116b8:	movt	r9, #2
   116bc:	ldr	r1, [r9]
   116c0:	bl	11238 <fputs_unlocked@plt>
   116c4:	movw	r1, #38909	; 0x97fd
   116c8:	mov	r0, #0
   116cc:	mov	r2, #5
   116d0:	movt	r1, #1
   116d4:	bl	112c8 <dcgettext@plt>
   116d8:	ldr	r1, [r9]
   116dc:	bl	11238 <fputs_unlocked@plt>
   116e0:	movw	r1, #39110	; 0x98c6
   116e4:	mov	r0, #0
   116e8:	mov	r2, #5
   116ec:	movt	r1, #1
   116f0:	bl	112c8 <dcgettext@plt>
   116f4:	ldr	r1, [r9]
   116f8:	bl	11238 <fputs_unlocked@plt>
   116fc:	movw	r1, #39341	; 0x99ad
   11700:	mov	r0, #0
   11704:	mov	r2, #5
   11708:	movt	r1, #1
   1170c:	bl	112c8 <dcgettext@plt>
   11710:	ldr	r1, [r9]
   11714:	bl	11238 <fputs_unlocked@plt>
   11718:	movw	r1, #39460	; 0x9a24
   1171c:	mov	r0, #0
   11720:	mov	r2, #5
   11724:	movt	r1, #1
   11728:	bl	112c8 <dcgettext@plt>
   1172c:	ldr	r1, [r9]
   11730:	bl	11238 <fputs_unlocked@plt>
   11734:	movw	r1, #39800	; 0x9b78
   11738:	mov	r0, #0
   1173c:	mov	r2, #5
   11740:	movt	r1, #1
   11744:	bl	112c8 <dcgettext@plt>
   11748:	ldr	r1, [r9]
   1174c:	bl	11238 <fputs_unlocked@plt>
   11750:	movw	r1, #39928	; 0x9bf8
   11754:	mov	r0, #0
   11758:	mov	r2, #5
   1175c:	movt	r1, #1
   11760:	bl	112c8 <dcgettext@plt>
   11764:	ldr	r1, [r9]
   11768:	bl	11238 <fputs_unlocked@plt>
   1176c:	movw	r1, #40049	; 0x9c71
   11770:	mov	r0, #0
   11774:	mov	r2, #5
   11778:	movt	r1, #1
   1177c:	bl	112c8 <dcgettext@plt>
   11780:	ldr	r1, [r9]
   11784:	bl	11238 <fputs_unlocked@plt>
   11788:	movw	r1, #40120	; 0x9cb8
   1178c:	mov	r0, #0
   11790:	mov	r2, #5
   11794:	movt	r1, #1
   11798:	bl	112c8 <dcgettext@plt>
   1179c:	ldr	r1, [r9]
   117a0:	bl	11238 <fputs_unlocked@plt>
   117a4:	movw	r1, #40585	; 0x9e89
   117a8:	mov	r0, #0
   117ac:	mov	r2, #5
   117b0:	movt	r1, #1
   117b4:	bl	112c8 <dcgettext@plt>
   117b8:	ldr	r1, [r9]
   117bc:	bl	11238 <fputs_unlocked@plt>
   117c0:	movw	r1, #40630	; 0x9eb6
   117c4:	mov	r0, #0
   117c8:	mov	r2, #5
   117cc:	movt	r1, #1
   117d0:	bl	112c8 <dcgettext@plt>
   117d4:	ldr	r1, [r9]
   117d8:	bl	11238 <fputs_unlocked@plt>
   117dc:	movw	r1, #40684	; 0x9eec
   117e0:	mov	r0, #0
   117e4:	mov	r2, #5
   117e8:	movt	r1, #1
   117ec:	bl	112c8 <dcgettext@plt>
   117f0:	ldr	r1, [r9]
   117f4:	bl	11238 <fputs_unlocked@plt>
   117f8:	movw	r1, #40876	; 0x9fac
   117fc:	mov	r0, #0
   11800:	mov	r2, #5
   11804:	movt	r1, #1
   11808:	bl	112c8 <dcgettext@plt>
   1180c:	ldr	r2, [r5]
   11810:	mov	r1, r0
   11814:	mov	r0, #1
   11818:	mov	r3, r2
   1181c:	str	r2, [sp]
   11820:	bl	11424 <__printf_chk@plt>
   11824:	movw	r0, #41904	; 0xa3b0
   11828:	add	r6, sp, #8
   1182c:	movt	r0, #1
   11830:	mov	r1, r6
   11834:	ldm	r0!, {r2, r3, r4, r5}
   11838:	stmia	r1!, {r2, r3, r4, r5}
   1183c:	ldm	r0!, {r2, r3, r4, r5, r7}
   11840:	stmia	r1!, {r2, r3, r4, r5, r7}
   11844:	ldm	r0, {r2, r3, r4, r5, r7}
   11848:	stm	r1, {r2, r3, r4, r5, r7}
   1184c:	movw	r1, #41280	; 0xa140
   11850:	movw	r5, #41077	; 0xa075
   11854:	movt	r1, #1
   11858:	movt	r5, #1
   1185c:	mov	r0, r5
   11860:	bl	1125c <strcmp@plt>
   11864:	cmp	r0, #0
   11868:	ldrne	r1, [r6, #8]!
   1186c:	cmpne	r1, #0
   11870:	bne	1185c <__assert_fail@plt+0x300>
   11874:	movw	r1, #41375	; 0xa19f
   11878:	ldr	r6, [r6, #4]
   1187c:	mov	r0, #0
   11880:	mov	r2, #5
   11884:	movt	r1, #1
   11888:	bl	112c8 <dcgettext@plt>
   1188c:	movw	r2, #41123	; 0xa0a3
   11890:	movw	r3, #41398	; 0xa1b6
   11894:	mov	r1, r0
   11898:	mov	r0, #1
   1189c:	movt	r2, #1
   118a0:	movt	r3, #1
   118a4:	bl	11424 <__printf_chk@plt>
   118a8:	cmp	r6, #0
   118ac:	mov	r0, #5
   118b0:	mov	r1, #0
   118b4:	moveq	r6, r5
   118b8:	bl	1146c <setlocale@plt>
   118bc:	cmp	r0, #0
   118c0:	beq	118f8 <__assert_fail@plt+0x39c>
   118c4:	movw	r1, #41438	; 0xa1de
   118c8:	mov	r2, #3
   118cc:	movt	r1, #1
   118d0:	bl	11508 <strncmp@plt>
   118d4:	cmp	r0, #0
   118d8:	beq	118f8 <__assert_fail@plt+0x39c>
   118dc:	movw	r1, #41442	; 0xa1e2
   118e0:	mov	r0, #0
   118e4:	mov	r2, #5
   118e8:	movt	r1, #1
   118ec:	bl	112c8 <dcgettext@plt>
   118f0:	ldr	r1, [r9]
   118f4:	bl	11238 <fputs_unlocked@plt>
   118f8:	movw	r1, #41513	; 0xa229
   118fc:	mov	r0, #0
   11900:	mov	r2, #5
   11904:	movt	r1, #1
   11908:	bl	112c8 <dcgettext@plt>
   1190c:	movw	r2, #41398	; 0xa1b6
   11910:	mov	r1, r0
   11914:	mov	r0, #1
   11918:	mov	r3, r5
   1191c:	movt	r2, #1
   11920:	bl	11424 <__printf_chk@plt>
   11924:	movw	r1, #41540	; 0xa244
   11928:	mov	r0, #0
   1192c:	mov	r2, #5
   11930:	movt	r1, #1
   11934:	bl	112c8 <dcgettext@plt>
   11938:	mov	r1, r0
   1193c:	movw	r0, #41308	; 0xa15c
   11940:	movw	r3, #40584	; 0x9e88
   11944:	cmp	r6, r5
   11948:	mov	r2, r6
   1194c:	movt	r0, #1
   11950:	movt	r3, #1
   11954:	moveq	r3, r0
   11958:	mov	r0, #1
   1195c:	bl	11424 <__printf_chk@plt>
   11960:	mov	r0, r8
   11964:	bl	113ac <exit@plt>
   11968:	movw	r0, #45456	; 0xb190
   1196c:	movw	r1, #38628	; 0x96e4
   11970:	mov	r2, #5
   11974:	movt	r0, #2
   11978:	movt	r1, #1
   1197c:	ldr	r5, [r0]
   11980:	mov	r0, #0
   11984:	bl	112c8 <dcgettext@plt>
   11988:	mov	r2, r0
   1198c:	movw	r0, #45504	; 0xb1c0
   11990:	mov	r1, #1
   11994:	movt	r0, #2
   11998:	ldr	r3, [r0]
   1199c:	mov	r0, r5
   119a0:	bl	1143c <__fprintf_chk@plt>
   119a4:	b	11960 <__assert_fail@plt+0x404>
   119a8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   119ac:	add	fp, sp, #28
   119b0:	sub	sp, sp, #172	; 0xac
   119b4:	mvn	r8, #0
   119b8:	mov	r6, r0
   119bc:	mov	r4, r1
   119c0:	str	r8, [fp, #-32]	; 0xffffffe0
   119c4:	str	r8, [fp, #-36]	; 0xffffffdc
   119c8:	str	r8, [fp, #-40]	; 0xffffffd8
   119cc:	str	r8, [fp, #-44]	; 0xffffffd4
   119d0:	ldr	r0, [r1]
   119d4:	bl	15f40 <__assert_fail@plt+0x49e4>
   119d8:	movw	r1, #40584	; 0x9e88
   119dc:	mov	r0, #6
   119e0:	movt	r1, #1
   119e4:	bl	1146c <setlocale@plt>
   119e8:	movw	r5, #41127	; 0xa0a7
   119ec:	movw	r1, #41083	; 0xa07b
   119f0:	movt	r5, #1
   119f4:	movt	r1, #1
   119f8:	mov	r0, r5
   119fc:	bl	114e4 <bindtextdomain@plt>
   11a00:	mov	r0, r5
   11a04:	bl	112e0 <textdomain@plt>
   11a08:	movw	r0, #11472	; 0x2cd0
   11a0c:	movt	r0, #1
   11a10:	bl	19668 <__assert_fail@plt+0x810c>
   11a14:	sub	r0, fp, #68	; 0x44
   11a18:	bl	11edc <__assert_fail@plt+0x980>
   11a1c:	movw	r7, #41107	; 0xa093
   11a20:	movw	r5, #41680	; 0xa2d0
   11a24:	mov	r0, #16
   11a28:	mov	sl, #0
   11a2c:	movt	r7, #1
   11a30:	movt	r5, #1
   11a34:	str	r0, [sp, #20]
   11a38:	mov	r0, #0
   11a3c:	str	r0, [sp, #16]
   11a40:	mov	r0, r6
   11a44:	mov	r1, r4
   11a48:	mov	r2, r7
   11a4c:	mov	r3, r5
   11a50:	str	sl, [sp]
   11a54:	bl	11394 <getopt_long@plt>
   11a58:	cmp	r0, #103	; 0x67
   11a5c:	bgt	11a84 <__assert_fail@plt+0x528>
   11a60:	cmp	r0, #79	; 0x4f
   11a64:	ble	11ab4 <__assert_fail@plt+0x558>
   11a68:	cmp	r0, #98	; 0x62
   11a6c:	bgt	11af0 <__assert_fail@plt+0x594>
   11a70:	cmp	r0, #80	; 0x50
   11a74:	bne	11b14 <__assert_fail@plt+0x5b8>
   11a78:	mov	r0, #16
   11a7c:	str	r0, [sp, #20]
   11a80:	b	11a40 <__assert_fail@plt+0x4e4>
   11a84:	sub	r1, r0, #256	; 0x100
   11a88:	cmp	r1, #4
   11a8c:	bhi	11ae0 <__assert_fail@plt+0x584>
   11a90:	add	r0, pc, #0
   11a94:	ldr	pc, [r0, r1, lsl #2]
   11a98:	andeq	r1, r1, ip, lsr #21
   11a9c:	andeq	r1, r1, r8, asr fp
   11aa0:	andeq	r1, r1, r8, lsr sl
   11aa4:	andeq	r1, r1, r4, lsl #23
   11aa8:	andeq	r1, r1, ip, lsr fp
   11aac:	mov	r8, #1
   11ab0:	b	11a40 <__assert_fail@plt+0x4e4>
   11ab4:	cmp	r0, #71	; 0x47
   11ab8:	ble	11b8c <__assert_fail@plt+0x630>
   11abc:	mov	r1, #17
   11ac0:	cmp	r0, #72	; 0x48
   11ac4:	str	r1, [sp, #20]
   11ac8:	beq	11a40 <__assert_fail@plt+0x4e4>
   11acc:	cmp	r0, #76	; 0x4c
   11ad0:	bne	11eac <__assert_fail@plt+0x950>
   11ad4:	mov	r0, #2
   11ad8:	str	r0, [sp, #20]
   11adc:	b	11a40 <__assert_fail@plt+0x4e4>
   11ae0:	cmp	r0, #104	; 0x68
   11ae4:	bne	11b04 <__assert_fail@plt+0x5a8>
   11ae8:	mov	r8, #0
   11aec:	b	11a40 <__assert_fail@plt+0x4e4>
   11af0:	cmp	r0, #99	; 0x63
   11af4:	bne	11b28 <__assert_fail@plt+0x5cc>
   11af8:	mov	r0, #1
   11afc:	str	r0, [fp, #-68]	; 0xffffffbc
   11b00:	b	11a40 <__assert_fail@plt+0x4e4>
   11b04:	cmp	r0, #118	; 0x76
   11b08:	bne	11eac <__assert_fail@plt+0x950>
   11b0c:	str	sl, [fp, #-68]	; 0xffffffbc
   11b10:	b	11a40 <__assert_fail@plt+0x4e4>
   11b14:	cmp	r0, #82	; 0x52
   11b18:	bne	11eac <__assert_fail@plt+0x950>
   11b1c:	mov	r0, #1
   11b20:	strb	r0, [fp, #-64]	; 0xffffffc0
   11b24:	b	11a40 <__assert_fail@plt+0x4e4>
   11b28:	cmp	r0, #102	; 0x66
   11b2c:	bne	11eac <__assert_fail@plt+0x950>
   11b30:	mov	r0, #1
   11b34:	strb	r0, [fp, #-55]	; 0xffffffc9
   11b38:	b	11a40 <__assert_fail@plt+0x4e4>
   11b3c:	movw	r0, #45464	; 0xb198
   11b40:	movw	r1, #45472	; 0xb1a0
   11b44:	movt	r0, #2
   11b48:	movt	r1, #2
   11b4c:	ldr	r0, [r0]
   11b50:	str	r0, [r1]
   11b54:	b	11a40 <__assert_fail@plt+0x4e4>
   11b58:	movw	r0, #45464	; 0xb198
   11b5c:	sub	r1, fp, #40	; 0x28
   11b60:	sub	r2, fp, #44	; 0x2c
   11b64:	mov	r3, #0
   11b68:	str	sl, [sp]
   11b6c:	movt	r0, #2
   11b70:	ldr	r0, [r0]
   11b74:	bl	17b0c <__assert_fail@plt+0x65b0>
   11b78:	cmp	r0, #0
   11b7c:	beq	11a40 <__assert_fail@plt+0x4e4>
   11b80:	b	11da0 <__assert_fail@plt+0x844>
   11b84:	mov	r0, #1
   11b88:	b	11a3c <__assert_fail@plt+0x4e0>
   11b8c:	cmn	r0, #1
   11b90:	bne	11d34 <__assert_fail@plt+0x7d8>
   11b94:	ldrb	r0, [fp, #-64]	; 0xffffffc0
   11b98:	ldr	r1, [sp, #20]
   11b9c:	mov	r9, #16
   11ba0:	cmp	r0, #0
   11ba4:	beq	11be0 <__assert_fail@plt+0x684>
   11ba8:	cmp	r1, #16
   11bac:	bne	11be8 <__assert_fail@plt+0x68c>
   11bb0:	mov	r0, #0
   11bb4:	cmp	r8, #1
   11bb8:	bne	11bf0 <__assert_fail@plt+0x694>
   11bbc:	movw	r1, #41166	; 0xa0ce
   11bc0:	mov	r0, #0
   11bc4:	mov	r2, #5
   11bc8:	movt	r1, #1
   11bcc:	bl	112c8 <dcgettext@plt>
   11bd0:	mov	r2, r0
   11bd4:	mov	r0, #1
   11bd8:	mov	r1, #0
   11bdc:	bl	1134c <error@plt>
   11be0:	mov	r0, r8
   11be4:	b	11bf0 <__assert_fail@plt+0x694>
   11be8:	mov	r0, r8
   11bec:	mov	r9, r1
   11bf0:	cmp	r0, #0
   11bf4:	movw	r7, #45448	; 0xb188
   11bf8:	mov	r2, #2
   11bfc:	movwne	r0, #1
   11c00:	movt	r7, #2
   11c04:	strb	r0, [fp, #-56]	; 0xffffffc8
   11c08:	movw	r0, #45472	; 0xb1a0
   11c0c:	movt	r0, #2
   11c10:	ldr	r1, [r7]
   11c14:	ldr	r0, [r0]
   11c18:	sub	r3, r6, r1
   11c1c:	cmp	r0, #0
   11c20:	movwne	r2, #1
   11c24:	cmp	r3, r2
   11c28:	blt	11dd0 <__assert_fail@plt+0x874>
   11c2c:	cmp	r0, #0
   11c30:	beq	11c70 <__assert_fail@plt+0x714>
   11c34:	add	r1, sp, #24
   11c38:	bl	19680 <__assert_fail@plt+0x8124>
   11c3c:	cmp	r0, #0
   11c40:	sub	r6, fp, #68	; 0x44
   11c44:	bne	11e14 <__assert_fail@plt+0x8b8>
   11c48:	ldr	r0, [sp, #48]	; 0x30
   11c4c:	ldr	r5, [sp, #52]	; 0x34
   11c50:	str	r0, [fp, #-32]	; 0xffffffe0
   11c54:	str	r5, [fp, #-36]	; 0xffffffdc
   11c58:	bl	11f64 <__assert_fail@plt+0xa08>
   11c5c:	str	r0, [fp, #-52]	; 0xffffffcc
   11c60:	mov	r0, r5
   11c64:	bl	11f24 <__assert_fail@plt+0x9c8>
   11c68:	str	r0, [fp, #-48]	; 0xffffffd0
   11c6c:	b	11ccc <__assert_fail@plt+0x770>
   11c70:	ldr	r0, [r4, r1, lsl #2]
   11c74:	sub	r6, fp, #68	; 0x44
   11c78:	sub	r2, fp, #36	; 0x24
   11c7c:	add	r1, r6, #20
   11c80:	add	r3, r6, #16
   11c84:	str	r1, [sp]
   11c88:	sub	r1, fp, #32
   11c8c:	bl	17b0c <__assert_fail@plt+0x65b0>
   11c90:	cmp	r0, #0
   11c94:	bne	11eb4 <__assert_fail@plt+0x958>
   11c98:	ldr	r0, [fp, #-52]	; 0xffffffcc
   11c9c:	cmp	r0, #0
   11ca0:	bne	11cc0 <__assert_fail@plt+0x764>
   11ca4:	ldr	r0, [fp, #-48]	; 0xffffffd0
   11ca8:	cmp	r0, #0
   11cac:	beq	11cc0 <__assert_fail@plt+0x764>
   11cb0:	movw	r0, #40584	; 0x9e88
   11cb4:	movt	r0, #1
   11cb8:	bl	18758 <__assert_fail@plt+0x71fc>
   11cbc:	str	r0, [fp, #-52]	; 0xffffffcc
   11cc0:	ldr	r0, [r7]
   11cc4:	add	r0, r0, #1
   11cc8:	str	r0, [r7]
   11ccc:	ldrb	r0, [fp, #-64]	; 0xffffffc0
   11cd0:	cmp	r0, #0
   11cd4:	beq	11d00 <__assert_fail@plt+0x7a4>
   11cd8:	ldr	r0, [sp, #16]
   11cdc:	eor	r0, r0, #1
   11ce0:	tst	r0, #1
   11ce4:	bne	11d00 <__assert_fail@plt+0x7a4>
   11ce8:	movw	r0, #45480	; 0xb1a8
   11cec:	movt	r0, #2
   11cf0:	bl	17a78 <__assert_fail@plt+0x651c>
   11cf4:	cmp	r0, #0
   11cf8:	str	r0, [fp, #-60]	; 0xffffffc4
   11cfc:	beq	11e44 <__assert_fail@plt+0x8e8>
   11d00:	ldr	r0, [r7]
   11d04:	ldr	r1, [fp, #-40]	; 0xffffffd8
   11d08:	ldr	r3, [fp, #-36]	; 0xffffffdc
   11d0c:	ldr	r2, [fp, #-32]	; 0xffffffe0
   11d10:	ldr	r7, [fp, #-44]	; 0xffffffd4
   11d14:	add	r0, r4, r0, lsl #2
   11d18:	stm	sp, {r1, r7}
   11d1c:	orr	r1, r9, #1024	; 0x400
   11d20:	str	r6, [sp, #8]
   11d24:	bl	11fa4 <__assert_fail@plt+0xa48>
   11d28:	eor	r0, r0, #1
   11d2c:	sub	sp, fp, #28
   11d30:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11d34:	cmn	r0, #3
   11d38:	bne	11d90 <__assert_fail@plt+0x834>
   11d3c:	movw	r0, #45368	; 0xb138
   11d40:	movw	r2, #41153	; 0xa0c1
   11d44:	mov	r1, #0
   11d48:	movw	r7, #41137	; 0xa0b1
   11d4c:	movt	r0, #2
   11d50:	movt	r2, #1
   11d54:	str	r1, [sp, #8]
   11d58:	movw	r1, #41077	; 0xa075
   11d5c:	movt	r7, #1
   11d60:	movt	r1, #1
   11d64:	ldr	r3, [r0]
   11d68:	movw	r0, #45460	; 0xb194
   11d6c:	str	r2, [sp, #4]
   11d70:	movw	r2, #41123	; 0xa0a3
   11d74:	str	r7, [sp]
   11d78:	movt	r0, #2
   11d7c:	movt	r2, #1
   11d80:	ldr	r0, [r0]
   11d84:	bl	1825c <__assert_fail@plt+0x6d00>
   11d88:	mov	r0, #0
   11d8c:	bl	113ac <exit@plt>
   11d90:	cmn	r0, #2
   11d94:	bne	11eac <__assert_fail@plt+0x950>
   11d98:	mov	r0, #0
   11d9c:	bl	11658 <__assert_fail@plt+0xfc>
   11da0:	mov	r9, r0
   11da4:	movw	r0, #45464	; 0xb198
   11da8:	movt	r0, #2
   11dac:	ldr	r0, [r0]
   11db0:	bl	1792c <__assert_fail@plt+0x63d0>
   11db4:	movw	r2, #41116	; 0xa09c
   11db8:	str	r0, [sp]
   11dbc:	mov	r0, #1
   11dc0:	mov	r1, #0
   11dc4:	mov	r3, r9
   11dc8:	movt	r2, #1
   11dcc:	bl	1134c <error@plt>
   11dd0:	cmp	r1, r6
   11dd4:	bge	11e88 <__assert_fail@plt+0x92c>
   11dd8:	movw	r1, #41224	; 0xa108
   11ddc:	mov	r0, #0
   11de0:	mov	r2, #5
   11de4:	movt	r1, #1
   11de8:	bl	112c8 <dcgettext@plt>
   11dec:	mov	r5, r0
   11df0:	add	r0, r4, r6, lsl #2
   11df4:	ldr	r0, [r0, #-4]
   11df8:	bl	1792c <__assert_fail@plt+0x63d0>
   11dfc:	mov	r3, r0
   11e00:	mov	r0, #0
   11e04:	mov	r1, #0
   11e08:	mov	r2, r5
   11e0c:	bl	1134c <error@plt>
   11e10:	b	11eac <__assert_fail@plt+0x950>
   11e14:	bl	11400 <__errno_location@plt>
   11e18:	movw	r1, #41249	; 0xa121
   11e1c:	ldr	r4, [r0]
   11e20:	mov	r0, #0
   11e24:	mov	r2, #5
   11e28:	movt	r1, #1
   11e2c:	bl	112c8 <dcgettext@plt>
   11e30:	mov	r5, r0
   11e34:	movw	r0, #45472	; 0xb1a0
   11e38:	movt	r0, #2
   11e3c:	ldr	r1, [r0]
   11e40:	b	11e6c <__assert_fail@plt+0x910>
   11e44:	bl	11400 <__errno_location@plt>
   11e48:	movw	r1, #41249	; 0xa121
   11e4c:	ldr	r4, [r0]
   11e50:	mov	r0, #0
   11e54:	mov	r2, #5
   11e58:	movt	r1, #1
   11e5c:	bl	112c8 <dcgettext@plt>
   11e60:	movw	r1, #44127	; 0xac5f
   11e64:	mov	r5, r0
   11e68:	movt	r1, #1
   11e6c:	mov	r0, #4
   11e70:	bl	175f4 <__assert_fail@plt+0x6098>
   11e74:	mov	r3, r0
   11e78:	mov	r0, #1
   11e7c:	mov	r1, r4
   11e80:	mov	r2, r5
   11e84:	bl	1134c <error@plt>
   11e88:	movw	r1, #41208	; 0xa0f8
   11e8c:	mov	r0, #0
   11e90:	mov	r2, #5
   11e94:	movt	r1, #1
   11e98:	bl	112c8 <dcgettext@plt>
   11e9c:	mov	r2, r0
   11ea0:	mov	r0, #0
   11ea4:	mov	r1, #0
   11ea8:	bl	1134c <error@plt>
   11eac:	mov	r0, #1
   11eb0:	bl	11658 <__assert_fail@plt+0xfc>
   11eb4:	mov	r5, r0
   11eb8:	ldr	r0, [r7]
   11ebc:	ldr	r0, [r4, r0, lsl #2]
   11ec0:	bl	1792c <__assert_fail@plt+0x63d0>
   11ec4:	movw	r2, #41116	; 0xa09c
   11ec8:	str	r0, [sp]
   11ecc:	mov	r0, #1
   11ed0:	mov	r1, #0
   11ed4:	mov	r3, r5
   11ed8:	b	11dc8 <__assert_fail@plt+0x86c>
   11edc:	mov	r1, #0
   11ee0:	mov	r2, #2
   11ee4:	str	r1, [r0, #8]
   11ee8:	str	r2, [r0]
   11eec:	mov	r2, #1
   11ef0:	str	r1, [r0, #16]
   11ef4:	str	r1, [r0, #20]
   11ef8:	strh	r2, [r0, #12]
   11efc:	strb	r1, [r0, #4]
   11f00:	bx	lr
   11f04:	push	{r4, sl, fp, lr}
   11f08:	add	fp, sp, #8
   11f0c:	mov	r4, r0
   11f10:	ldr	r0, [r0, #16]
   11f14:	bl	12db8 <__assert_fail@plt+0x185c>
   11f18:	ldr	r0, [r4, #20]
   11f1c:	pop	{r4, sl, fp, lr}
   11f20:	b	12db8 <__assert_fail@plt+0x185c>
   11f24:	push	{r4, sl, fp, lr}
   11f28:	add	fp, sp, #8
   11f2c:	sub	sp, sp, #24
   11f30:	mov	r4, r0
   11f34:	bl	11544 <getgrgid@plt>
   11f38:	cmp	r0, #0
   11f3c:	beq	11f48 <__assert_fail@plt+0x9ec>
   11f40:	ldr	r0, [r0]
   11f44:	b	11f58 <__assert_fail@plt+0x9fc>
   11f48:	add	r2, sp, #3
   11f4c:	mov	r0, r4
   11f50:	mov	r1, #0
   11f54:	bl	15e4c <__assert_fail@plt+0x48f0>
   11f58:	bl	18758 <__assert_fail@plt+0x71fc>
   11f5c:	sub	sp, fp, #8
   11f60:	pop	{r4, sl, fp, pc}
   11f64:	push	{r4, sl, fp, lr}
   11f68:	add	fp, sp, #8
   11f6c:	sub	sp, sp, #24
   11f70:	mov	r4, r0
   11f74:	bl	11268 <getpwuid@plt>
   11f78:	cmp	r0, #0
   11f7c:	beq	11f88 <__assert_fail@plt+0xa2c>
   11f80:	ldr	r0, [r0]
   11f84:	b	11f98 <__assert_fail@plt+0xa3c>
   11f88:	add	r2, sp, #3
   11f8c:	mov	r0, r4
   11f90:	mov	r1, #0
   11f94:	bl	15e4c <__assert_fail@plt+0x48f0>
   11f98:	bl	18758 <__assert_fail@plt+0x71fc>
   11f9c:	sub	sp, fp, #8
   11fa0:	pop	{r4, sl, fp, pc}
   11fa4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11fa8:	add	fp, sp, #28
   11fac:	sub	sp, sp, #268	; 0x10c
   11fb0:	str	r3, [sp, #32]
   11fb4:	str	r2, [sp, #40]	; 0x28
   11fb8:	ldr	r2, [fp, #8]
   11fbc:	ldr	r3, [fp, #12]
   11fc0:	ldr	r5, [fp, #16]
   11fc4:	and	r3, r3, r2
   11fc8:	mov	r2, #0
   11fcc:	cmn	r3, #1
   11fd0:	str	r3, [sp, #44]	; 0x2c
   11fd4:	bne	11ff8 <__assert_fail@plt+0xa9c>
   11fd8:	ldrb	r3, [r5, #12]
   11fdc:	cmp	r3, #0
   11fe0:	bne	11ff8 <__assert_fail@plt+0xa9c>
   11fe4:	ldr	r2, [r5]
   11fe8:	sub	r2, r2, #2
   11fec:	clz	r2, r2
   11ff0:	lsr	r2, r2, #5
   11ff4:	lsl	r2, r2, #3
   11ff8:	orr	r1, r2, r1
   11ffc:	mov	r2, #0
   12000:	bl	187d4 <__assert_fail@plt+0x7278>
   12004:	str	r0, [sp, #52]	; 0x34
   12008:	bl	136b0 <__assert_fail@plt+0x2154>
   1200c:	cmp	r0, #0
   12010:	beq	12b88 <__assert_fail@plt+0x162c>
   12014:	ldr	r1, [sp, #40]	; 0x28
   12018:	mov	sl, r0
   1201c:	movw	r0, #42420	; 0xa5b4
   12020:	movw	r2, #42395	; 0xa59b
   12024:	mov	r8, #1
   12028:	movt	r0, #1
   1202c:	movt	r2, #1
   12030:	cmn	r1, #1
   12034:	moveq	r2, r0
   12038:	sub	r0, fp, #136	; 0x88
   1203c:	add	r0, r0, #96	; 0x60
   12040:	str	r2, [sp, #12]
   12044:	str	r0, [sp, #8]
   12048:	ldrh	r0, [sl, #56]	; 0x38
   1204c:	ldr	r4, [sl, #24]
   12050:	ldr	r7, [sl, #28]
   12054:	add	r9, sl, #64	; 0x40
   12058:	sub	r0, r0, #1
   1205c:	cmp	r0, #9
   12060:	bhi	12258 <__assert_fail@plt+0xcfc>
   12064:	add	r1, pc, #0
   12068:	ldr	pc, [r1, r0, lsl #2]
   1206c:	muleq	r1, r4, r0
   12070:	strdeq	r2, [r1], -r4
   12074:	andeq	r2, r1, r8, asr r2
   12078:	andeq	r2, r1, r4, asr r1
   1207c:	andeq	r2, r1, r8, asr r2
   12080:	andeq	r2, r1, ip, asr #4
   12084:	andeq	r2, r1, r8, asr r3
   12088:	andeq	r2, r1, r8, asr r2
   1208c:	andeq	r2, r1, r8, asr r2
   12090:	andeq	r2, r1, r4, lsl #3
   12094:	ldrb	r0, [r5, #4]
   12098:	cmp	r0, #0
   1209c:	beq	12258 <__assert_fail@plt+0xcfc>
   120a0:	ldr	r0, [r5, #8]
   120a4:	mov	r4, #1
   120a8:	cmp	r0, #0
   120ac:	beq	12b40 <__assert_fail@plt+0x15e4>
   120b0:	add	r1, sl, #160	; 0xa0
   120b4:	ldrd	r2, [r0]
   120b8:	ldrd	r4, [r1]
   120bc:	eor	r1, r5, r3
   120c0:	eor	r2, r4, r2
   120c4:	orrs	r1, r2, r1
   120c8:	bne	123d0 <__assert_fail@plt+0xe74>
   120cc:	ldrd	r0, [r0, #8]
   120d0:	ldrd	r2, [r9]
   120d4:	ldr	r5, [fp, #16]
   120d8:	mov	r4, #1
   120dc:	eor	r1, r3, r1
   120e0:	eor	r0, r2, r0
   120e4:	orrs	r0, r0, r1
   120e8:	bne	12b40 <__assert_fail@plt+0x15e4>
   120ec:	movw	r6, #44127	; 0xac5f
   120f0:	mov	r0, r7
   120f4:	movt	r6, #1
   120f8:	mov	r1, r6
   120fc:	bl	1125c <strcmp@plt>
   12100:	cmp	r0, #0
   12104:	beq	12a20 <__assert_fail@plt+0x14c4>
   12108:	movw	r1, #42038	; 0xa436
   1210c:	mov	r0, #0
   12110:	mov	r2, #5
   12114:	movt	r1, #1
   12118:	bl	112c8 <dcgettext@plt>
   1211c:	mov	r4, r0
   12120:	mov	r0, #0
   12124:	mov	r1, #4
   12128:	mov	r2, r7
   1212c:	bl	1754c <__assert_fail@plt+0x5ff0>
   12130:	mov	r5, r0
   12134:	mov	r0, #1
   12138:	mov	r1, #4
   1213c:	mov	r2, r6
   12140:	bl	1754c <__assert_fail@plt+0x5ff0>
   12144:	mov	r3, r5
   12148:	ldr	r5, [fp, #16]
   1214c:	str	r0, [sp]
   12150:	b	12a48 <__assert_fail@plt+0x14ec>
   12154:	ldrb	r0, [r5, #13]
   12158:	mov	r9, #0
   1215c:	mov	r6, #1
   12160:	str	r7, [sp, #48]	; 0x30
   12164:	cmp	r0, #0
   12168:	bne	123a0 <__assert_fail@plt+0xe44>
   1216c:	ldr	r4, [sl, #32]
   12170:	movw	r1, #42162	; 0xa4b2
   12174:	mov	r9, #0
   12178:	mov	r0, #0
   1217c:	movt	r1, #1
   12180:	b	121c8 <__assert_fail@plt+0xc6c>
   12184:	ldr	r0, [sl, #48]	; 0x30
   12188:	cmp	r0, #0
   1218c:	bne	1219c <__assert_fail@plt+0xc40>
   12190:	ldr	r0, [sl, #16]
   12194:	cmp	r0, #0
   12198:	beq	12550 <__assert_fail@plt+0xff4>
   1219c:	ldrb	r0, [r5, #13]
   121a0:	mov	r9, #0
   121a4:	mov	r6, #1
   121a8:	str	r7, [sp, #48]	; 0x30
   121ac:	cmp	r0, #0
   121b0:	bne	123a0 <__assert_fail@plt+0xe44>
   121b4:	ldr	r4, [sl, #32]
   121b8:	movw	r1, #42145	; 0xa4a1
   121bc:	mov	r9, #0
   121c0:	mov	r0, #0
   121c4:	movt	r1, #1
   121c8:	mov	r2, #5
   121cc:	bl	112c8 <dcgettext@plt>
   121d0:	mov	r5, r0
   121d4:	mov	r0, #4
   121d8:	mov	r1, r7
   121dc:	bl	175f4 <__assert_fail@plt+0x6098>
   121e0:	mov	r3, r0
   121e4:	mov	r0, #0
   121e8:	mov	r1, r4
   121ec:	mov	r2, r5
   121f0:	b	1239c <__assert_fail@plt+0xe40>
   121f4:	ldr	r0, [sp, #52]	; 0x34
   121f8:	mov	r1, sl
   121fc:	bl	18820 <__assert_fail@plt+0x72c4>
   12200:	cmp	r0, #0
   12204:	beq	12258 <__assert_fail@plt+0xcfc>
   12208:	movw	r1, #42187	; 0xa4cb
   1220c:	mov	r0, #0
   12210:	mov	r2, #5
   12214:	movt	r1, #1
   12218:	bl	112c8 <dcgettext@plt>
   1221c:	mov	r4, r0
   12220:	mov	r0, #0
   12224:	mov	r1, #3
   12228:	mov	r2, r7
   1222c:	bl	17798 <__assert_fail@plt+0x623c>
   12230:	mov	r3, r0
   12234:	mov	r2, r4
   12238:	mov	r0, #0
   1223c:	mov	r1, #0
   12240:	mov	r4, #0
   12244:	bl	1134c <error@plt>
   12248:	b	12b40 <__assert_fail@plt+0x15e4>
   1224c:	ldrb	r0, [r5, #4]
   12250:	cmp	r0, #0
   12254:	beq	123d4 <__assert_fail@plt+0xe78>
   12258:	ldr	r0, [sp, #44]	; 0x2c
   1225c:	cmn	r0, #1
   12260:	bne	1227c <__assert_fail@plt+0xd20>
   12264:	ldr	r0, [r5]
   12268:	cmp	r0, #2
   1226c:	bne	1227c <__assert_fail@plt+0xd20>
   12270:	ldr	r0, [r5, #8]
   12274:	cmp	r0, #0
   12278:	beq	123dc <__assert_fail@plt+0xe80>
   1227c:	ldrb	r0, [r5, #12]
   12280:	cmp	r0, #0
   12284:	beq	12324 <__assert_fail@plt+0xdc8>
   12288:	ldr	r0, [sl, #80]	; 0x50
   1228c:	and	r0, r0, #61440	; 0xf000
   12290:	cmp	r0, #40960	; 0xa000
   12294:	bne	12324 <__assert_fail@plt+0xdc8>
   12298:	ldr	r0, [sp, #52]	; 0x34
   1229c:	add	r9, sp, #56	; 0x38
   122a0:	mov	r1, r4
   122a4:	mov	r3, #0
   122a8:	mov	r2, r9
   122ac:	ldr	r0, [r0, #32]
   122b0:	bl	196b0 <__assert_fail@plt+0x8154>
   122b4:	cmp	r0, #0
   122b8:	beq	12324 <__assert_fail@plt+0xdc8>
   122bc:	ldrb	r0, [r5, #13]
   122c0:	mov	r4, #0
   122c4:	mov	r6, #1
   122c8:	str	r7, [sp, #48]	; 0x30
   122cc:	cmp	r0, #0
   122d0:	bne	12318 <__assert_fail@plt+0xdbc>
   122d4:	bl	11400 <__errno_location@plt>
   122d8:	movw	r1, #42373	; 0xa585
   122dc:	ldr	r4, [r0]
   122e0:	mov	r0, #0
   122e4:	mov	r2, #5
   122e8:	movt	r1, #1
   122ec:	bl	112c8 <dcgettext@plt>
   122f0:	ldr	r1, [sp, #48]	; 0x30
   122f4:	mov	r5, r0
   122f8:	mov	r0, #4
   122fc:	bl	175f4 <__assert_fail@plt+0x6098>
   12300:	mov	r3, r0
   12304:	mov	r1, r4
   12308:	mov	r0, #0
   1230c:	mov	r2, r5
   12310:	mov	r4, #0
   12314:	bl	1134c <error@plt>
   12318:	add	r9, sp, #56	; 0x38
   1231c:	mov	r5, #1
   12320:	b	12720 <__assert_fail@plt+0x11c4>
   12324:	ldr	r2, [fp, #8]
   12328:	cmn	r2, #1
   1232c:	beq	123ac <__assert_fail@plt+0xe50>
   12330:	ldr	r1, [r9, #24]
   12334:	ldr	r3, [fp, #12]
   12338:	sub	r0, r1, r2
   1233c:	cmn	r3, #1
   12340:	clz	r0, r0
   12344:	lsr	r0, r0, #5
   12348:	beq	123f0 <__assert_fail@plt+0xe94>
   1234c:	cmp	r1, r2
   12350:	beq	123b8 <__assert_fail@plt+0xe5c>
   12354:	b	123f0 <__assert_fail@plt+0xe94>
   12358:	ldrb	r0, [r5, #13]
   1235c:	mov	r9, #0
   12360:	mov	r6, #1
   12364:	str	r7, [sp, #48]	; 0x30
   12368:	cmp	r0, #0
   1236c:	bne	123a0 <__assert_fail@plt+0xe44>
   12370:	ldr	r4, [sl, #32]
   12374:	mov	r0, #0
   12378:	mov	r1, #3
   1237c:	mov	r2, r7
   12380:	mov	r9, #0
   12384:	bl	17798 <__assert_fail@plt+0x623c>
   12388:	movw	r2, #41120	; 0xa0a0
   1238c:	mov	r3, r0
   12390:	mov	r0, #0
   12394:	mov	r1, r4
   12398:	movt	r2, #1
   1239c:	bl	1134c <error@plt>
   123a0:	mov	r5, #1
   123a4:	mov	r4, #0
   123a8:	b	12720 <__assert_fail@plt+0x11c4>
   123ac:	ldr	r0, [fp, #12]
   123b0:	cmn	r0, #1
   123b4:	beq	123ec <__assert_fail@plt+0xe90>
   123b8:	ldr	r0, [r9, #28]
   123bc:	ldr	r1, [fp, #12]
   123c0:	sub	r0, r0, r1
   123c4:	clz	r0, r0
   123c8:	lsr	r0, r0, #5
   123cc:	b	123f0 <__assert_fail@plt+0xe94>
   123d0:	ldr	r5, [fp, #16]
   123d4:	mov	r4, #1
   123d8:	b	12b40 <__assert_fail@plt+0x15e4>
   123dc:	ldrb	r0, [r5, #12]
   123e0:	add	r9, sl, #64	; 0x40
   123e4:	cmp	r0, #0
   123e8:	bne	12288 <__assert_fail@plt+0xd2c>
   123ec:	mov	r0, #1
   123f0:	ldrh	r1, [sl, #56]	; 0x38
   123f4:	cmp	r1, #6
   123f8:	bhi	12414 <__assert_fail@plt+0xeb8>
   123fc:	mov	r2, #1
   12400:	mov	r3, #86	; 0x56
   12404:	tst	r3, r2, lsl r1
   12408:	ldrne	r1, [r5, #8]
   1240c:	cmpne	r1, #0
   12410:	bne	1246c <__assert_fail@plt+0xf10>
   12414:	cmp	r0, #0
   12418:	str	r7, [sp, #48]	; 0x30
   1241c:	beq	12460 <__assert_fail@plt+0xf04>
   12420:	ldr	r0, [sp, #52]	; 0x34
   12424:	ldr	r6, [r0, #32]
   12428:	ldrb	r0, [r5, #12]
   1242c:	cmp	r0, #0
   12430:	beq	12510 <__assert_fail@plt+0xfb4>
   12434:	ldr	r0, [sp, #44]	; 0x2c
   12438:	cmn	r0, #1
   1243c:	beq	12608 <__assert_fail@plt+0x10ac>
   12440:	ldr	r0, [r9, #16]
   12444:	and	r0, r0, #61440	; 0xf000
   12448:	cmp	r0, #32768	; 0x8000
   1244c:	beq	12568 <__assert_fail@plt+0x100c>
   12450:	cmp	r0, #16384	; 0x4000
   12454:	bne	12608 <__assert_fail@plt+0x10ac>
   12458:	mov	r5, #18688	; 0x4900
   1245c:	b	1256c <__assert_fail@plt+0x1010>
   12460:	mov	r6, #1
   12464:	mov	r5, #1
   12468:	b	1271c <__assert_fail@plt+0x11c0>
   1246c:	ldrd	r2, [r1]
   12470:	ldr	r5, [r9, #100]	; 0x64
   12474:	ldr	r6, [r9, #96]	; 0x60
   12478:	eor	r3, r5, r3
   1247c:	ldr	r5, [fp, #16]
   12480:	eor	r2, r6, r2
   12484:	orrs	r2, r2, r3
   12488:	bne	12414 <__assert_fail@plt+0xeb8>
   1248c:	ldrd	r2, [r1, #8]
   12490:	ldr	r1, [r9, #4]
   12494:	ldr	r6, [r9]
   12498:	eor	r1, r1, r3
   1249c:	eor	r2, r6, r2
   124a0:	orrs	r1, r2, r1
   124a4:	bne	12414 <__assert_fail@plt+0xeb8>
   124a8:	movw	r6, #44127	; 0xac5f
   124ac:	mov	r0, r7
   124b0:	movt	r6, #1
   124b4:	mov	r1, r6
   124b8:	bl	1125c <strcmp@plt>
   124bc:	cmp	r0, #0
   124c0:	beq	1297c <__assert_fail@plt+0x1420>
   124c4:	movw	r1, #42038	; 0xa436
   124c8:	mov	r0, #0
   124cc:	mov	r2, #5
   124d0:	movt	r1, #1
   124d4:	bl	112c8 <dcgettext@plt>
   124d8:	mov	r4, r0
   124dc:	mov	r0, #0
   124e0:	mov	r1, #4
   124e4:	mov	r2, r7
   124e8:	bl	1754c <__assert_fail@plt+0x5ff0>
   124ec:	mov	r5, r0
   124f0:	mov	r0, #1
   124f4:	mov	r1, #4
   124f8:	mov	r2, r6
   124fc:	bl	1754c <__assert_fail@plt+0x5ff0>
   12500:	mov	r3, r5
   12504:	ldr	r5, [fp, #16]
   12508:	str	r0, [sp]
   1250c:	b	129a4 <__assert_fail@plt+0x1448>
   12510:	ldr	r2, [sp, #40]	; 0x28
   12514:	ldr	r3, [sp, #32]
   12518:	mov	r0, #256	; 0x100
   1251c:	mov	r1, r4
   12520:	str	r0, [sp]
   12524:	mov	r0, r6
   12528:	bl	114d8 <fchownat@plt>
   1252c:	cmp	r0, #0
   12530:	beq	12714 <__assert_fail@plt+0x11b8>
   12534:	bl	11400 <__errno_location@plt>
   12538:	ldr	r0, [r0]
   1253c:	mov	r6, #0
   12540:	cmp	r0, #95	; 0x5f
   12544:	bne	12630 <__assert_fail@plt+0x10d4>
   12548:	mov	r5, #0
   1254c:	b	1271c <__assert_fail@plt+0x11c0>
   12550:	ldr	r0, [sp, #52]	; 0x34
   12554:	mov	r4, #1
   12558:	mov	r1, sl
   1255c:	mov	r2, #1
   12560:	str	r4, [sl, #16]
   12564:	b	12b3c <__assert_fail@plt+0x15e0>
   12568:	mov	r5, #2304	; 0x900
   1256c:	mov	r0, r6
   12570:	mov	r1, r4
   12574:	mov	r2, r5
   12578:	bl	113e8 <openat64@plt>
   1257c:	mov	r7, r0
   12580:	cmn	r0, #1
   12584:	ble	125b8 <__assert_fail@plt+0x105c>
   12588:	mov	r0, r7
   1258c:	sub	r1, fp, #136	; 0x88
   12590:	bl	19690 <__assert_fail@plt+0x8134>
   12594:	cmp	r0, #0
   12598:	beq	1268c <__assert_fail@plt+0x1130>
   1259c:	bl	11400 <__errno_location@plt>
   125a0:	ldr	r5, [r0]
   125a4:	mov	r4, r0
   125a8:	mov	r0, r7
   125ac:	bl	11520 <close@plt>
   125b0:	str	r5, [r4]
   125b4:	b	12630 <__assert_fail@plt+0x10d4>
   125b8:	bl	11400 <__errno_location@plt>
   125bc:	ldr	r1, [r0]
   125c0:	cmp	r1, #13
   125c4:	bne	12630 <__assert_fail@plt+0x10d4>
   125c8:	ldr	r1, [r9, #16]
   125cc:	and	r1, r1, #61440	; 0xf000
   125d0:	cmp	r1, #32768	; 0x8000
   125d4:	bne	12608 <__assert_fail@plt+0x10ac>
   125d8:	str	r0, [sp, #36]	; 0x24
   125dc:	orr	r2, r5, #1
   125e0:	mov	r0, r6
   125e4:	mov	r1, r4
   125e8:	bl	113e8 <openat64@plt>
   125ec:	mov	r7, r0
   125f0:	cmn	r0, #1
   125f4:	bgt	12588 <__assert_fail@plt+0x102c>
   125f8:	ldr	r0, [sp, #36]	; 0x24
   125fc:	ldr	r0, [r0]
   12600:	cmp	r0, #13
   12604:	bne	12630 <__assert_fail@plt+0x10d4>
   12608:	ldr	r0, [sp, #52]	; 0x34
   1260c:	ldr	r2, [sp, #40]	; 0x28
   12610:	ldr	r3, [sp, #32]
   12614:	mov	r5, #0
   12618:	mov	r1, r4
   1261c:	str	r5, [sp]
   12620:	ldr	r0, [r0, #32]
   12624:	bl	114d8 <fchownat@plt>
   12628:	cmp	r0, #0
   1262c:	beq	12718 <__assert_fail@plt+0x11bc>
   12630:	ldr	r0, [fp, #16]
   12634:	mov	r5, #0
   12638:	ldrb	r0, [r0, #13]
   1263c:	cmp	r0, #0
   12640:	bne	12684 <__assert_fail@plt+0x1128>
   12644:	bl	11400 <__errno_location@plt>
   12648:	ldr	r1, [sp, #12]
   1264c:	ldr	r4, [r0]
   12650:	mov	r0, #0
   12654:	mov	r2, #5
   12658:	mov	r5, #0
   1265c:	bl	112c8 <dcgettext@plt>
   12660:	ldr	r1, [sp, #48]	; 0x30
   12664:	mov	r6, r0
   12668:	mov	r0, #4
   1266c:	bl	175f4 <__assert_fail@plt+0x6098>
   12670:	mov	r3, r0
   12674:	mov	r0, #0
   12678:	mov	r1, r4
   1267c:	mov	r2, r6
   12680:	bl	1134c <error@plt>
   12684:	mov	r6, #1
   12688:	b	123a4 <__assert_fail@plt+0xe48>
   1268c:	ldr	r0, [sp, #8]
   12690:	ldrd	r2, [r9, #96]	; 0x60
   12694:	ldrd	r0, [r0]
   12698:	eor	r1, r3, r1
   1269c:	eor	r0, r2, r0
   126a0:	orrs	r0, r0, r1
   126a4:	bne	129fc <__assert_fail@plt+0x14a0>
   126a8:	ldrd	r0, [r9]
   126ac:	ldr	r2, [fp, #-136]	; 0xffffff78
   126b0:	ldr	r3, [fp, #-132]	; 0xffffff7c
   126b4:	eor	r1, r1, r3
   126b8:	eor	r0, r0, r2
   126bc:	orrs	r0, r0, r1
   126c0:	bne	129fc <__assert_fail@plt+0x14a0>
   126c4:	ldr	r0, [fp, #8]
   126c8:	cmn	r0, #1
   126cc:	beq	126e0 <__assert_fail@plt+0x1184>
   126d0:	ldr	r0, [fp, #-112]	; 0xffffff90
   126d4:	ldr	r1, [fp, #8]
   126d8:	cmp	r0, r1
   126dc:	bne	126fc <__assert_fail@plt+0x11a0>
   126e0:	ldr	r0, [fp, #12]
   126e4:	cmn	r0, #1
   126e8:	beq	12b5c <__assert_fail@plt+0x1600>
   126ec:	ldr	r0, [fp, #-108]	; 0xffffff94
   126f0:	ldr	r1, [fp, #12]
   126f4:	cmp	r0, r1
   126f8:	beq	12b5c <__assert_fail@plt+0x1600>
   126fc:	bl	11400 <__errno_location@plt>
   12700:	ldr	r5, [r0]
   12704:	mov	r4, r0
   12708:	mov	r0, r7
   1270c:	bl	11520 <close@plt>
   12710:	str	r5, [r4]
   12714:	mov	r5, #0
   12718:	mov	r6, #1
   1271c:	mov	r4, #1
   12720:	ldr	r0, [fp, #16]
   12724:	ldr	r1, [r0]
   12728:	cmp	r1, #2
   1272c:	beq	12b20 <__assert_fail@plt+0x15c4>
   12730:	eor	r0, r4, #1
   12734:	orrs	r0, r5, r0
   12738:	eorseq	r0, r6, #1
   1273c:	beq	12770 <__assert_fail@plt+0x1214>
   12740:	cmp	r1, #0
   12744:	bne	12b20 <__assert_fail@plt+0x15c4>
   12748:	cmp	r6, #0
   1274c:	mov	r5, #1
   12750:	mov	r0, #3
   12754:	movwne	r5, #4
   12758:	cmp	r4, #0
   1275c:	moveq	r5, r0
   12760:	cmp	r9, #0
   12764:	beq	127dc <__assert_fail@plt+0x1280>
   12768:	ldr	r0, [r9, #24]
   1276c:	b	127c4 <__assert_fail@plt+0x1268>
   12770:	ldr	r0, [sp, #40]	; 0x28
   12774:	cmn	r0, #1
   12778:	beq	1278c <__assert_fail@plt+0x1230>
   1277c:	ldr	r0, [r9, #24]
   12780:	ldr	r2, [sp, #40]	; 0x28
   12784:	cmp	r0, r2
   12788:	bne	127ac <__assert_fail@plt+0x1250>
   1278c:	ldr	r0, [sp, #32]
   12790:	cmn	r0, #1
   12794:	beq	12740 <__assert_fail@plt+0x11e4>
   12798:	ldr	r0, [r9, #28]
   1279c:	ldr	r2, [sp, #32]
   127a0:	cmp	r0, r2
   127a4:	beq	12740 <__assert_fail@plt+0x11e4>
   127a8:	ldr	r0, [r9, #24]
   127ac:	cmp	r6, #0
   127b0:	mov	r5, #1
   127b4:	mov	r1, #3
   127b8:	movwne	r5, #2
   127bc:	cmp	r4, #0
   127c0:	moveq	r5, r1
   127c4:	bl	11f64 <__assert_fail@plt+0xa08>
   127c8:	mov	r6, r0
   127cc:	ldr	r0, [r9, #28]
   127d0:	bl	11f24 <__assert_fail@plt+0x9c8>
   127d4:	mov	r7, r0
   127d8:	b	127e4 <__assert_fail@plt+0x1288>
   127dc:	mov	r6, #0
   127e0:	mov	r7, #0
   127e4:	cmp	r5, #1
   127e8:	str	r4, [sp, #36]	; 0x24
   127ec:	bne	1282c <__assert_fail@plt+0x12d0>
   127f0:	movw	r1, #42441	; 0xa5c9
   127f4:	mov	r0, #0
   127f8:	mov	r2, #5
   127fc:	movt	r1, #1
   12800:	bl	112c8 <dcgettext@plt>
   12804:	ldr	r1, [sp, #48]	; 0x30
   12808:	mov	r4, r0
   1280c:	mov	r0, #4
   12810:	bl	175f4 <__assert_fail@plt+0x6098>
   12814:	mov	r2, r0
   12818:	mov	r0, #1
   1281c:	mov	r1, r4
   12820:	bl	11424 <__printf_chk@plt>
   12824:	ldr	r4, [sp, #36]	; 0x24
   12828:	b	12b10 <__assert_fail@plt+0x15b4>
   1282c:	ldr	r0, [fp, #16]
   12830:	ldr	r9, [r0, #20]
   12834:	ldr	r4, [r0, #16]
   12838:	mov	r0, r4
   1283c:	mov	r1, r9
   12840:	bl	12c28 <__assert_fail@plt+0x16cc>
   12844:	cmp	r4, #0
   12848:	str	r0, [sp, #16]
   1284c:	mov	r0, r4
   12850:	mov	r1, r9
   12854:	str	r6, [sp, #24]
   12858:	str	r7, [sp, #20]
   1285c:	movne	r0, r6
   12860:	cmp	r9, #0
   12864:	movne	r1, r7
   12868:	bl	12c28 <__assert_fail@plt+0x16cc>
   1286c:	cmp	r5, #4
   12870:	beq	128c4 <__assert_fail@plt+0x1368>
   12874:	cmp	r5, #3
   12878:	beq	128a0 <__assert_fail@plt+0x1344>
   1287c:	cmp	r5, #2
   12880:	bne	12c24 <__assert_fail@plt+0x16c8>
   12884:	cmp	r4, #0
   12888:	str	r0, [sp, #28]
   1288c:	beq	128ec <__assert_fail@plt+0x1390>
   12890:	movw	r1, #42497	; 0xa601
   12894:	mov	r0, #0
   12898:	movt	r1, #1
   1289c:	b	128dc <__assert_fail@plt+0x1380>
   128a0:	cmp	r0, #0
   128a4:	beq	12908 <__assert_fail@plt+0x13ac>
   128a8:	cmp	r4, #0
   128ac:	str	r0, [sp, #28]
   128b0:	beq	129e0 <__assert_fail@plt+0x1484>
   128b4:	movw	r1, #42601	; 0xa669
   128b8:	mov	r0, #0
   128bc:	movt	r1, #1
   128c0:	b	128dc <__assert_fail@plt+0x1380>
   128c4:	cmp	r4, #0
   128c8:	str	r0, [sp, #28]
   128cc:	beq	12960 <__assert_fail@plt+0x1404>
   128d0:	movw	r1, #42803	; 0xa733
   128d4:	mov	r0, #0
   128d8:	movt	r1, #1
   128dc:	mov	r2, #5
   128e0:	bl	112c8 <dcgettext@plt>
   128e4:	ldr	r4, [sp, #36]	; 0x24
   128e8:	b	12ac8 <__assert_fail@plt+0x156c>
   128ec:	ldr	r4, [sp, #36]	; 0x24
   128f0:	cmp	r9, #0
   128f4:	mov	r0, #0
   128f8:	beq	12aa0 <__assert_fail@plt+0x1544>
   128fc:	movw	r1, #42536	; 0xa628
   12900:	movt	r1, #1
   12904:	b	12ac0 <__assert_fail@plt+0x1564>
   12908:	movw	r0, #42767	; 0xa70f
   1290c:	movw	r1, #42693	; 0xa6c5
   12910:	cmp	r9, #0
   12914:	mov	r2, #5
   12918:	movt	r0, #1
   1291c:	movt	r1, #1
   12920:	movne	r1, r0
   12924:	movw	r0, #42727	; 0xa6e7
   12928:	cmp	r4, #0
   1292c:	movt	r0, #1
   12930:	movne	r1, r0
   12934:	mov	r0, #0
   12938:	bl	112c8 <dcgettext@plt>
   1293c:	mov	r6, r0
   12940:	mov	r0, #0
   12944:	bl	12db8 <__assert_fail@plt+0x185c>
   12948:	ldr	r0, [sp, #16]
   1294c:	ldr	r4, [sp, #36]	; 0x24
   12950:	ldr	r7, [sp, #20]
   12954:	mov	r5, #0
   12958:	str	r0, [sp, #28]
   1295c:	b	12ad4 <__assert_fail@plt+0x1578>
   12960:	ldr	r4, [sp, #36]	; 0x24
   12964:	cmp	r9, #0
   12968:	mov	r0, #0
   1296c:	beq	12aac <__assert_fail@plt+0x1550>
   12970:	movw	r1, #42835	; 0xa753
   12974:	movt	r1, #1
   12978:	b	12ac0 <__assert_fail@plt+0x1564>
   1297c:	movw	r1, #41993	; 0xa409
   12980:	mov	r0, #0
   12984:	mov	r2, #5
   12988:	movt	r1, #1
   1298c:	bl	112c8 <dcgettext@plt>
   12990:	mov	r4, r0
   12994:	mov	r0, #4
   12998:	mov	r1, r7
   1299c:	bl	175f4 <__assert_fail@plt+0x6098>
   129a0:	mov	r3, r0
   129a4:	mov	r0, #0
   129a8:	mov	r1, #0
   129ac:	mov	r2, r4
   129b0:	bl	1134c <error@plt>
   129b4:	movw	r1, #42096	; 0xa470
   129b8:	mov	r0, #0
   129bc:	mov	r2, #5
   129c0:	mov	r4, #0
   129c4:	movt	r1, #1
   129c8:	bl	112c8 <dcgettext@plt>
   129cc:	mov	r2, r0
   129d0:	mov	r0, #0
   129d4:	mov	r1, #0
   129d8:	bl	1134c <error@plt>
   129dc:	b	12b40 <__assert_fail@plt+0x15e4>
   129e0:	ldr	r4, [sp, #36]	; 0x24
   129e4:	cmp	r9, #0
   129e8:	mov	r0, #0
   129ec:	beq	12ab8 <__assert_fail@plt+0x155c>
   129f0:	movw	r1, #42649	; 0xa699
   129f4:	movt	r1, #1
   129f8:	b	12ac0 <__assert_fail@plt+0x1564>
   129fc:	bl	11400 <__errno_location@plt>
   12a00:	ldr	r5, [r0]
   12a04:	mov	r4, r0
   12a08:	mov	r0, r7
   12a0c:	bl	11520 <close@plt>
   12a10:	str	r5, [r4]
   12a14:	mov	r4, #0
   12a18:	mov	r6, #1
   12a1c:	b	1231c <__assert_fail@plt+0xdc0>
   12a20:	movw	r1, #41993	; 0xa409
   12a24:	mov	r0, #0
   12a28:	mov	r2, #5
   12a2c:	movt	r1, #1
   12a30:	bl	112c8 <dcgettext@plt>
   12a34:	mov	r4, r0
   12a38:	mov	r0, #4
   12a3c:	mov	r1, r7
   12a40:	bl	175f4 <__assert_fail@plt+0x6098>
   12a44:	mov	r3, r0
   12a48:	mov	r0, #0
   12a4c:	mov	r1, #0
   12a50:	mov	r2, r4
   12a54:	bl	1134c <error@plt>
   12a58:	movw	r1, #42096	; 0xa470
   12a5c:	mov	r0, #0
   12a60:	mov	r2, #5
   12a64:	movt	r1, #1
   12a68:	bl	112c8 <dcgettext@plt>
   12a6c:	mov	r2, r0
   12a70:	mov	r0, #0
   12a74:	mov	r1, #0
   12a78:	bl	1134c <error@plt>
   12a7c:	ldr	r4, [sp, #52]	; 0x34
   12a80:	mov	r1, sl
   12a84:	mov	r2, #4
   12a88:	mov	r0, r4
   12a8c:	bl	14a88 <__assert_fail@plt+0x352c>
   12a90:	mov	r0, r4
   12a94:	mov	r4, #0
   12a98:	bl	136b0 <__assert_fail@plt+0x2154>
   12a9c:	b	12b40 <__assert_fail@plt+0x15e4>
   12aa0:	movw	r1, #42571	; 0xa64b
   12aa4:	movt	r1, #1
   12aa8:	b	12ac0 <__assert_fail@plt+0x1564>
   12aac:	movw	r1, #42863	; 0xa76f
   12ab0:	movt	r1, #1
   12ab4:	b	12ac0 <__assert_fail@plt+0x1564>
   12ab8:	movw	r1, #42693	; 0xa6c5
   12abc:	movt	r1, #1
   12ac0:	mov	r2, #5
   12ac4:	bl	112c8 <dcgettext@plt>
   12ac8:	mov	r6, r0
   12acc:	ldr	r7, [sp, #20]
   12ad0:	ldr	r5, [sp, #16]
   12ad4:	ldr	r1, [sp, #48]	; 0x30
   12ad8:	mov	r0, #4
   12adc:	bl	175f4 <__assert_fail@plt+0x6098>
   12ae0:	mov	r1, r6
   12ae4:	ldr	r6, [sp, #28]
   12ae8:	mov	r2, r0
   12aec:	mov	r0, #1
   12af0:	str	r5, [sp]
   12af4:	mov	r3, r6
   12af8:	bl	11424 <__printf_chk@plt>
   12afc:	mov	r0, r6
   12b00:	bl	12db8 <__assert_fail@plt+0x185c>
   12b04:	mov	r0, r5
   12b08:	bl	12db8 <__assert_fail@plt+0x185c>
   12b0c:	ldr	r6, [sp, #24]
   12b10:	mov	r0, r6
   12b14:	bl	12db8 <__assert_fail@plt+0x185c>
   12b18:	mov	r0, r7
   12b1c:	bl	12db8 <__assert_fail@plt+0x185c>
   12b20:	ldr	r5, [fp, #16]
   12b24:	ldrb	r0, [r5, #4]
   12b28:	cmp	r0, #0
   12b2c:	bne	12b40 <__assert_fail@plt+0x15e4>
   12b30:	ldr	r0, [sp, #52]	; 0x34
   12b34:	mov	r1, sl
   12b38:	mov	r2, #4
   12b3c:	bl	14a88 <__assert_fail@plt+0x352c>
   12b40:	ldr	r0, [sp, #52]	; 0x34
   12b44:	and	r8, r8, r4
   12b48:	bl	136b0 <__assert_fail@plt+0x2154>
   12b4c:	mov	sl, r0
   12b50:	cmp	r0, #0
   12b54:	bne	12048 <__assert_fail@plt+0xaec>
   12b58:	b	12b8c <__assert_fail@plt+0x1630>
   12b5c:	ldr	r1, [sp, #40]	; 0x28
   12b60:	ldr	r2, [sp, #32]
   12b64:	mov	r0, r7
   12b68:	bl	113f4 <fchown@plt>
   12b6c:	cmp	r0, #0
   12b70:	bne	1259c <__assert_fail@plt+0x1040>
   12b74:	mov	r0, r7
   12b78:	bl	11520 <close@plt>
   12b7c:	cmp	r0, #0
   12b80:	bne	12630 <__assert_fail@plt+0x10d4>
   12b84:	b	12714 <__assert_fail@plt+0x11b8>
   12b88:	mov	r8, #1
   12b8c:	bl	11400 <__errno_location@plt>
   12b90:	ldr	r4, [r0]
   12b94:	mov	r5, r0
   12b98:	cmp	r4, #0
   12b9c:	beq	12bdc <__assert_fail@plt+0x1680>
   12ba0:	ldr	r0, [fp, #16]
   12ba4:	mov	r8, #0
   12ba8:	ldrb	r0, [r0, #13]
   12bac:	cmp	r0, #0
   12bb0:	bne	12bdc <__assert_fail@plt+0x1680>
   12bb4:	movw	r1, #41960	; 0xa3e8
   12bb8:	mov	r0, #0
   12bbc:	mov	r2, #5
   12bc0:	mov	r8, #0
   12bc4:	movt	r1, #1
   12bc8:	bl	112c8 <dcgettext@plt>
   12bcc:	mov	r2, r0
   12bd0:	mov	r0, #0
   12bd4:	mov	r1, r4
   12bd8:	bl	1134c <error@plt>
   12bdc:	ldr	r0, [sp, #52]	; 0x34
   12be0:	bl	13528 <__assert_fail@plt+0x1fcc>
   12be4:	cmp	r0, #0
   12be8:	beq	12c18 <__assert_fail@plt+0x16bc>
   12bec:	movw	r1, #41976	; 0xa3f8
   12bf0:	ldr	r4, [r5]
   12bf4:	mov	r0, #0
   12bf8:	mov	r2, #5
   12bfc:	mov	r8, #0
   12c00:	movt	r1, #1
   12c04:	bl	112c8 <dcgettext@plt>
   12c08:	mov	r2, r0
   12c0c:	mov	r0, #0
   12c10:	mov	r1, r4
   12c14:	bl	1134c <error@plt>
   12c18:	mov	r0, r8
   12c1c:	sub	sp, fp, #28
   12c20:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12c24:	bl	11514 <abort@plt>
   12c28:	push	{r4, r5, r6, sl, fp, lr}
   12c2c:	add	fp, sp, #16
   12c30:	mov	r4, r1
   12c34:	cmp	r0, #0
   12c38:	beq	12c88 <__assert_fail@plt+0x172c>
   12c3c:	mov	r5, r0
   12c40:	cmp	r4, #0
   12c44:	beq	12c98 <__assert_fail@plt+0x173c>
   12c48:	mov	r0, r5
   12c4c:	bl	113d0 <strlen@plt>
   12c50:	mov	r6, r0
   12c54:	mov	r0, r4
   12c58:	bl	113d0 <strlen@plt>
   12c5c:	add	r0, r6, r0
   12c60:	add	r0, r0, #2
   12c64:	bl	18364 <__assert_fail@plt+0x6e08>
   12c68:	mov	r1, r5
   12c6c:	mov	r6, r0
   12c70:	bl	112bc <stpcpy@plt>
   12c74:	mov	r1, #58	; 0x3a
   12c78:	strh	r1, [r0], #1
   12c7c:	mov	r1, r4
   12c80:	bl	112bc <stpcpy@plt>
   12c84:	b	12ca8 <__assert_fail@plt+0x174c>
   12c88:	cmp	r4, #0
   12c8c:	beq	12ca4 <__assert_fail@plt+0x1748>
   12c90:	mov	r0, r4
   12c94:	b	12c9c <__assert_fail@plt+0x1740>
   12c98:	mov	r0, r5
   12c9c:	pop	{r4, r5, r6, sl, fp, lr}
   12ca0:	b	18758 <__assert_fail@plt+0x71fc>
   12ca4:	mov	r6, #0
   12ca8:	mov	r0, r6
   12cac:	pop	{r4, r5, r6, sl, fp, pc}
   12cb0:	movw	r1, #45496	; 0xb1b8
   12cb4:	movt	r1, #2
   12cb8:	str	r0, [r1]
   12cbc:	bx	lr
   12cc0:	movw	r1, #45500	; 0xb1bc
   12cc4:	movt	r1, #2
   12cc8:	strb	r0, [r1]
   12ccc:	bx	lr
   12cd0:	push	{r4, r5, r6, sl, fp, lr}
   12cd4:	add	fp, sp, #16
   12cd8:	sub	sp, sp, #8
   12cdc:	movw	r0, #45460	; 0xb194
   12ce0:	movt	r0, #2
   12ce4:	ldr	r0, [r0]
   12ce8:	bl	18d90 <__assert_fail@plt+0x7834>
   12cec:	cmp	r0, #0
   12cf0:	beq	12d18 <__assert_fail@plt+0x17bc>
   12cf4:	movw	r0, #45500	; 0xb1bc
   12cf8:	movt	r0, #2
   12cfc:	ldrb	r0, [r0]
   12d00:	cmp	r0, #0
   12d04:	beq	12d38 <__assert_fail@plt+0x17dc>
   12d08:	bl	11400 <__errno_location@plt>
   12d0c:	ldr	r0, [r0]
   12d10:	cmp	r0, #32
   12d14:	bne	12d38 <__assert_fail@plt+0x17dc>
   12d18:	movw	r0, #45456	; 0xb190
   12d1c:	movt	r0, #2
   12d20:	ldr	r0, [r0]
   12d24:	bl	18d90 <__assert_fail@plt+0x7834>
   12d28:	cmp	r0, #0
   12d2c:	subeq	sp, fp, #16
   12d30:	popeq	{r4, r5, r6, sl, fp, pc}
   12d34:	b	12da8 <__assert_fail@plt+0x184c>
   12d38:	movw	r1, #42904	; 0xa798
   12d3c:	mov	r0, #0
   12d40:	mov	r2, #5
   12d44:	movt	r1, #1
   12d48:	bl	112c8 <dcgettext@plt>
   12d4c:	mov	r4, r0
   12d50:	movw	r0, #45496	; 0xb1b8
   12d54:	movt	r0, #2
   12d58:	ldr	r6, [r0]
   12d5c:	bl	11400 <__errno_location@plt>
   12d60:	ldr	r5, [r0]
   12d64:	cmp	r6, #0
   12d68:	bne	12d84 <__assert_fail@plt+0x1828>
   12d6c:	movw	r2, #41120	; 0xa0a0
   12d70:	mov	r0, #0
   12d74:	mov	r1, r5
   12d78:	mov	r3, r4
   12d7c:	movt	r2, #1
   12d80:	b	12da4 <__assert_fail@plt+0x1848>
   12d84:	mov	r0, r6
   12d88:	bl	176ec <__assert_fail@plt+0x6190>
   12d8c:	movw	r2, #41116	; 0xa09c
   12d90:	mov	r3, r0
   12d94:	str	r4, [sp]
   12d98:	mov	r0, #0
   12d9c:	mov	r1, r5
   12da0:	movt	r2, #1
   12da4:	bl	1134c <error@plt>
   12da8:	movw	r0, #45372	; 0xb13c
   12dac:	movt	r0, #2
   12db0:	ldr	r0, [r0]
   12db4:	bl	11298 <_exit@plt>
   12db8:	push	{r4, r5, r6, sl, fp, lr}
   12dbc:	add	fp, sp, #16
   12dc0:	mov	r4, r0
   12dc4:	bl	11400 <__errno_location@plt>
   12dc8:	ldr	r6, [r0]
   12dcc:	mov	r5, r0
   12dd0:	mov	r0, r4
   12dd4:	bl	1128c <free@plt>
   12dd8:	str	r6, [r5]
   12ddc:	pop	{r4, r5, r6, sl, fp, pc}
   12de0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12de4:	add	fp, sp, #28
   12de8:	sub	sp, sp, #12
   12dec:	cmp	r1, #4096	; 0x1000
   12df0:	bcs	12e0c <__assert_fail@plt+0x18b0>
   12df4:	mov	r6, r0
   12df8:	and	r0, r1, #516	; 0x204
   12dfc:	mov	r5, r1
   12e00:	cmp	r0, #516	; 0x204
   12e04:	tstne	r5, #18
   12e08:	bne	12e28 <__assert_fail@plt+0x18cc>
   12e0c:	bl	11400 <__errno_location@plt>
   12e10:	mov	r1, #22
   12e14:	str	r1, [r0]
   12e18:	mov	r8, #0
   12e1c:	mov	r0, r8
   12e20:	sub	sp, fp, #28
   12e24:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12e28:	mov	r0, #1
   12e2c:	mov	r1, #96	; 0x60
   12e30:	mov	r9, r2
   12e34:	bl	18cbc <__assert_fail@plt+0x7760>
   12e38:	cmp	r0, #0
   12e3c:	beq	12e18 <__assert_fail@plt+0x18bc>
   12e40:	mov	r8, r0
   12e44:	mvn	r0, #99	; 0x63
   12e48:	tst	r5, #2
   12e4c:	mov	r1, r5
   12e50:	str	r0, [r8, #32]
   12e54:	bic	r0, r5, #516	; 0x204
   12e58:	str	r9, [r8, #44]	; 0x2c
   12e5c:	orrne	r1, r0, #4
   12e60:	str	r1, [r8, #48]	; 0x30
   12e64:	ldr	r0, [r6]
   12e68:	cmp	r0, #0
   12e6c:	beq	12ea0 <__assert_fail@plt+0x1944>
   12e70:	add	r4, r6, #4
   12e74:	mov	r7, #0
   12e78:	bl	113d0 <strlen@plt>
   12e7c:	cmp	r0, r7
   12e80:	movhi	r7, r0
   12e84:	ldr	r0, [r4], #4
   12e88:	cmp	r0, #0
   12e8c:	bne	12e78 <__assert_fail@plt+0x191c>
   12e90:	add	r1, r7, #1
   12e94:	cmp	r1, #4096	; 0x1000
   12e98:	movls	r1, #4096	; 0x1000
   12e9c:	b	12ea4 <__assert_fail@plt+0x1948>
   12ea0:	mov	r1, #4096	; 0x1000
   12ea4:	mov	r0, r8
   12ea8:	bl	13108 <__assert_fail@plt+0x1bac>
   12eac:	cmp	r0, #0
   12eb0:	beq	130fc <__assert_fail@plt+0x1ba0>
   12eb4:	ldr	r0, [r6]
   12eb8:	cmp	r0, #0
   12ebc:	beq	12eec <__assert_fail@plt+0x1990>
   12ec0:	movw	r1, #40584	; 0x9e88
   12ec4:	mov	r0, r8
   12ec8:	mov	r2, #0
   12ecc:	movt	r1, #1
   12ed0:	bl	1317c <__assert_fail@plt+0x1c20>
   12ed4:	cmp	r0, #0
   12ed8:	beq	130f4 <__assert_fail@plt+0x1b98>
   12edc:	mov	r4, r0
   12ee0:	mvn	r0, #0
   12ee4:	str	r0, [r4, #48]	; 0x30
   12ee8:	b	12ef0 <__assert_fail@plt+0x1994>
   12eec:	mov	r4, #0
   12ef0:	cmp	r9, #0
   12ef4:	beq	12f04 <__assert_fail@plt+0x19a8>
   12ef8:	ldrb	r0, [r8, #49]	; 0x31
   12efc:	ubfx	r0, r0, #2, #1
   12f00:	b	12f08 <__assert_fail@plt+0x19ac>
   12f04:	mov	r0, #1
   12f08:	ldr	r7, [r6]
   12f0c:	cmp	r7, #0
   12f10:	beq	13030 <__assert_fail@plt+0x1ad4>
   12f14:	eor	r0, r0, #1
   12f18:	and	r1, r5, #2048	; 0x800
   12f1c:	mov	sl, #0
   12f20:	mov	r5, #0
   12f24:	str	r0, [sp, #4]
   12f28:	mov	r0, #0
   12f2c:	str	r1, [sp, #8]
   12f30:	str	r0, [sp]
   12f34:	mov	r0, r7
   12f38:	bl	113d0 <strlen@plt>
   12f3c:	mov	r2, r0
   12f40:	ldr	r0, [sp, #8]
   12f44:	cmp	r0, #0
   12f48:	bne	12f80 <__assert_fail@plt+0x1a24>
   12f4c:	cmp	r2, #3
   12f50:	bcc	12f80 <__assert_fail@plt+0x1a24>
   12f54:	add	r0, r2, r7
   12f58:	ldrb	r0, [r0, #-1]
   12f5c:	cmp	r0, #47	; 0x2f
   12f60:	bne	12f80 <__assert_fail@plt+0x1a24>
   12f64:	sub	r0, r7, #2
   12f68:	ldrb	r1, [r0, r2]
   12f6c:	cmp	r1, #47	; 0x2f
   12f70:	bne	12f80 <__assert_fail@plt+0x1a24>
   12f74:	sub	r2, r2, #1
   12f78:	cmp	r2, #1
   12f7c:	bhi	12f68 <__assert_fail@plt+0x1a0c>
   12f80:	mov	r0, r8
   12f84:	mov	r1, r7
   12f88:	bl	1317c <__assert_fail@plt+0x1c20>
   12f8c:	cmp	r0, #0
   12f90:	beq	130e4 <__assert_fail@plt+0x1b88>
   12f94:	mov	r1, #0
   12f98:	ldr	r2, [sp, #4]
   12f9c:	str	r4, [r0, #4]
   12fa0:	mov	r7, r0
   12fa4:	str	r1, [r0, #48]	; 0x30
   12fa8:	add	r0, r0, #168	; 0xa8
   12fac:	str	r0, [r7, #24]
   12fb0:	clz	r0, sl
   12fb4:	lsr	r0, r0, #5
   12fb8:	orrs	r0, r2, r0
   12fbc:	bne	12fd0 <__assert_fail@plt+0x1a74>
   12fc0:	mov	r0, #2
   12fc4:	strd	r0, [r7, #112]	; 0x70
   12fc8:	mov	r0, #11
   12fcc:	b	12fe4 <__assert_fail@plt+0x1a88>
   12fd0:	mov	r0, r8
   12fd4:	mov	r1, r7
   12fd8:	mov	r2, #0
   12fdc:	bl	131fc <__assert_fail@plt+0x1ca0>
   12fe0:	mov	r1, #0
   12fe4:	cmp	r9, #0
   12fe8:	strh	r0, [r7, #56]	; 0x38
   12fec:	beq	12ffc <__assert_fail@plt+0x1aa0>
   12ff0:	str	sl, [r7, #8]
   12ff4:	mov	sl, r7
   12ff8:	b	13014 <__assert_fail@plt+0x1ab8>
   12ffc:	cmp	sl, #0
   13000:	str	r1, [r7, #8]
   13004:	beq	13028 <__assert_fail@plt+0x1acc>
   13008:	ldr	r0, [sp]
   1300c:	str	r7, [sp]
   13010:	str	r7, [r0, #8]
   13014:	ldr	r7, [r6, #4]!
   13018:	add	r5, r5, #1
   1301c:	cmp	r7, #0
   13020:	bne	12f34 <__assert_fail@plt+0x19d8>
   13024:	b	13038 <__assert_fail@plt+0x1adc>
   13028:	str	r7, [sp]
   1302c:	b	12ff4 <__assert_fail@plt+0x1a98>
   13030:	mov	sl, #0
   13034:	b	1305c <__assert_fail@plt+0x1b00>
   13038:	cmp	r9, #0
   1303c:	beq	1305c <__assert_fail@plt+0x1b00>
   13040:	cmp	r5, #2
   13044:	bcc	1305c <__assert_fail@plt+0x1b00>
   13048:	mov	r0, r8
   1304c:	mov	r1, sl
   13050:	mov	r2, r5
   13054:	bl	13338 <__assert_fail@plt+0x1ddc>
   13058:	mov	sl, r0
   1305c:	movw	r1, #40584	; 0x9e88
   13060:	mov	r0, r8
   13064:	mov	r2, #0
   13068:	movt	r1, #1
   1306c:	bl	1317c <__assert_fail@plt+0x1c20>
   13070:	cmp	r0, #0
   13074:	str	r0, [r8]
   13078:	beq	130e4 <__assert_fail@plt+0x1b88>
   1307c:	mov	r1, #9
   13080:	strh	r1, [r0, #56]	; 0x38
   13084:	mov	r1, #1
   13088:	str	sl, [r0, #8]
   1308c:	str	r1, [r0, #48]	; 0x30
   13090:	mov	r0, r8
   13094:	bl	1342c <__assert_fail@plt+0x1ed0>
   13098:	cmp	r0, #0
   1309c:	beq	130e4 <__assert_fail@plt+0x1b88>
   130a0:	ldrh	r0, [r8, #48]	; 0x30
   130a4:	tst	r0, #516	; 0x204
   130a8:	bne	130d4 <__assert_fail@plt+0x1b78>
   130ac:	movw	r1, #42917	; 0xa7a5
   130b0:	mov	r0, r8
   130b4:	movt	r1, #1
   130b8:	bl	134b8 <__assert_fail@plt+0x1f5c>
   130bc:	cmn	r0, #1
   130c0:	str	r0, [r8, #28]
   130c4:	bgt	130d4 <__assert_fail@plt+0x1b78>
   130c8:	ldr	r0, [r8, #48]	; 0x30
   130cc:	orr	r0, r0, #4
   130d0:	str	r0, [r8, #48]	; 0x30
   130d4:	add	r0, r8, #60	; 0x3c
   130d8:	mvn	r1, #0
   130dc:	bl	15d7c <__assert_fail@plt+0x4820>
   130e0:	b	12e1c <__assert_fail@plt+0x18c0>
   130e4:	mov	r0, sl
   130e8:	bl	134e8 <__assert_fail@plt+0x1f8c>
   130ec:	mov	r0, r4
   130f0:	bl	12db8 <__assert_fail@plt+0x185c>
   130f4:	ldr	r0, [r8, #24]
   130f8:	bl	12db8 <__assert_fail@plt+0x185c>
   130fc:	mov	r0, r8
   13100:	bl	12db8 <__assert_fail@plt+0x185c>
   13104:	b	12e18 <__assert_fail@plt+0x18bc>
   13108:	push	{r4, r5, fp, lr}
   1310c:	add	fp, sp, #8
   13110:	mov	r4, r0
   13114:	ldr	r0, [r0, #36]	; 0x24
   13118:	add	r1, r1, #256	; 0x100
   1311c:	adds	r1, r1, r0
   13120:	bcc	13144 <__assert_fail@plt+0x1be8>
   13124:	ldr	r0, [r4, #24]
   13128:	bl	12db8 <__assert_fail@plt+0x185c>
   1312c:	mov	r5, #0
   13130:	str	r5, [r4, #24]
   13134:	bl	11400 <__errno_location@plt>
   13138:	mov	r1, #36	; 0x24
   1313c:	str	r1, [r0]
   13140:	b	13174 <__assert_fail@plt+0x1c18>
   13144:	str	r1, [r4, #36]	; 0x24
   13148:	ldr	r0, [r4, #24]
   1314c:	bl	18d40 <__assert_fail@plt+0x77e4>
   13150:	cmp	r0, #0
   13154:	beq	13164 <__assert_fail@plt+0x1c08>
   13158:	mov	r5, #1
   1315c:	str	r0, [r4, #24]
   13160:	b	13174 <__assert_fail@plt+0x1c18>
   13164:	ldr	r0, [r4, #24]
   13168:	bl	12db8 <__assert_fail@plt+0x185c>
   1316c:	mov	r5, #0
   13170:	str	r5, [r4, #24]
   13174:	mov	r0, r5
   13178:	pop	{r4, r5, fp, pc}
   1317c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   13180:	add	fp, sp, #24
   13184:	mov	r5, r0
   13188:	add	r0, r2, #176	; 0xb0
   1318c:	mov	r6, r2
   13190:	mov	r8, r1
   13194:	bic	r0, r0, #7
   13198:	bl	18d10 <__assert_fail@plt+0x77b4>
   1319c:	cmp	r0, #0
   131a0:	beq	131f0 <__assert_fail@plt+0x1c94>
   131a4:	add	r7, r0, #168	; 0xa8
   131a8:	mov	r4, r0
   131ac:	mov	r1, r8
   131b0:	mov	r2, r6
   131b4:	mov	r0, r7
   131b8:	bl	112a4 <memcpy@plt>
   131bc:	mov	r0, #0
   131c0:	mov	r2, #196608	; 0x30000
   131c4:	strb	r0, [r7, r6]
   131c8:	str	r6, [r4, #52]	; 0x34
   131cc:	str	r5, [r4, #44]	; 0x2c
   131d0:	ldr	r1, [r5, #24]
   131d4:	str	r0, [r4, #12]
   131d8:	str	r0, [r4, #16]
   131dc:	str	r0, [r4, #20]
   131e0:	str	r2, [r4, #58]	; 0x3a
   131e4:	str	r1, [r4, #28]
   131e8:	str	r0, [r4, #32]
   131ec:	b	131f4 <__assert_fail@plt+0x1c98>
   131f0:	mov	r4, #0
   131f4:	mov	r0, r4
   131f8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   131fc:	push	{r4, r5, r6, sl, fp, lr}
   13200:	add	fp, sp, #16
   13204:	mov	r4, r1
   13208:	ldr	r1, [r0, #48]	; 0x30
   1320c:	ldr	r3, [r4, #48]	; 0x30
   13210:	add	r5, r4, #64	; 0x40
   13214:	cmp	r3, #0
   13218:	andeq	r3, r1, #1
   1321c:	orreq	r2, r3, r2
   13220:	cmp	r2, #0
   13224:	andseq	r1, r1, #2
   13228:	beq	13278 <__assert_fail@plt+0x1d1c>
   1322c:	ldr	r0, [r4, #24]
   13230:	mov	r1, r5
   13234:	bl	19680 <__assert_fail@plt+0x8124>
   13238:	cmp	r0, #0
   1323c:	beq	132bc <__assert_fail@plt+0x1d60>
   13240:	bl	11400 <__errno_location@plt>
   13244:	mov	r6, r0
   13248:	ldr	r0, [r0]
   1324c:	cmp	r0, #2
   13250:	bne	132a0 <__assert_fail@plt+0x1d44>
   13254:	ldr	r0, [r4, #24]
   13258:	mov	r1, r5
   1325c:	bl	196a0 <__assert_fail@plt+0x8144>
   13260:	cmp	r0, #0
   13264:	bne	1329c <__assert_fail@plt+0x1d40>
   13268:	mov	r0, #0
   1326c:	str	r0, [r6]
   13270:	mov	r0, #13
   13274:	pop	{r4, r5, r6, sl, fp, pc}
   13278:	ldr	r1, [r4, #24]
   1327c:	ldr	r0, [r0, #32]
   13280:	mov	r2, r5
   13284:	mov	r3, #256	; 0x100
   13288:	bl	196b0 <__assert_fail@plt+0x8154>
   1328c:	cmp	r0, #0
   13290:	beq	132bc <__assert_fail@plt+0x1d60>
   13294:	bl	11400 <__errno_location@plt>
   13298:	mov	r6, r0
   1329c:	ldr	r0, [r6]
   132a0:	str	r0, [r4, #32]
   132a4:	mov	r0, r5
   132a8:	mov	r1, #0
   132ac:	mov	r2, #104	; 0x68
   132b0:	bl	11418 <memset@plt>
   132b4:	mov	r0, #10
   132b8:	pop	{r4, r5, r6, sl, fp, pc}
   132bc:	ldr	r0, [r4, #80]	; 0x50
   132c0:	and	r0, r0, #61440	; 0xf000
   132c4:	cmp	r0, #40960	; 0xa000
   132c8:	beq	13320 <__assert_fail@plt+0x1dc4>
   132cc:	cmp	r0, #32768	; 0x8000
   132d0:	beq	13328 <__assert_fail@plt+0x1dcc>
   132d4:	cmp	r0, #16384	; 0x4000
   132d8:	bne	13330 <__assert_fail@plt+0x1dd4>
   132dc:	ldrb	r1, [r4, #168]	; 0xa8
   132e0:	mov	r0, #1
   132e4:	cmp	r1, #46	; 0x2e
   132e8:	bne	13334 <__assert_fail@plt+0x1dd8>
   132ec:	ldrb	r1, [r4, #169]	; 0xa9
   132f0:	cmp	r1, #0
   132f4:	beq	1330c <__assert_fail@plt+0x1db0>
   132f8:	cmp	r1, #46	; 0x2e
   132fc:	bne	13334 <__assert_fail@plt+0x1dd8>
   13300:	ldrb	r1, [r4, #170]	; 0xaa
   13304:	cmp	r1, #0
   13308:	popne	{r4, r5, r6, sl, fp, pc}
   1330c:	ldr	r1, [r4, #48]	; 0x30
   13310:	mov	r0, #5
   13314:	cmp	r1, #0
   13318:	movweq	r0, #1
   1331c:	pop	{r4, r5, r6, sl, fp, pc}
   13320:	mov	r0, #12
   13324:	pop	{r4, r5, r6, sl, fp, pc}
   13328:	mov	r0, #8
   1332c:	pop	{r4, r5, r6, sl, fp, pc}
   13330:	mov	r0, #3
   13334:	pop	{r4, r5, r6, sl, fp, pc}
   13338:	push	{r4, r5, r6, r7, fp, lr}
   1333c:	add	fp, sp, #16
   13340:	mov	r6, r0
   13344:	ldr	r7, [r0, #44]	; 0x2c
   13348:	ldr	r0, [r0, #40]	; 0x28
   1334c:	mov	r5, r2
   13350:	mov	r4, r1
   13354:	cmp	r0, r2
   13358:	bcs	13388 <__assert_fail@plt+0x1e2c>
   1335c:	add	r1, r5, #40	; 0x28
   13360:	cmn	r1, #-1073741823	; 0xc0000001
   13364:	str	r1, [r6, #40]	; 0x28
   13368:	bhi	133fc <__assert_fail@plt+0x1ea0>
   1336c:	ldr	r0, [r6, #8]
   13370:	lsl	r1, r1, #2
   13374:	bl	18d40 <__assert_fail@plt+0x77e4>
   13378:	cmp	r0, #0
   1337c:	beq	133fc <__assert_fail@plt+0x1ea0>
   13380:	str	r0, [r6, #8]
   13384:	b	1338c <__assert_fail@plt+0x1e30>
   13388:	ldr	r0, [r6, #8]
   1338c:	cmp	r4, #0
   13390:	beq	133a8 <__assert_fail@plt+0x1e4c>
   13394:	str	r4, [r0], #4
   13398:	ldr	r4, [r4, #8]
   1339c:	cmp	r4, #0
   133a0:	bne	13394 <__assert_fail@plt+0x1e38>
   133a4:	ldr	r0, [r6, #8]
   133a8:	mov	r1, r5
   133ac:	mov	r2, #4
   133b0:	mov	r3, r7
   133b4:	bl	114cc <qsort@plt>
   133b8:	ldr	r0, [r6, #8]
   133bc:	cmp	r5, #1
   133c0:	ldr	r4, [r0]
   133c4:	mov	r1, r4
   133c8:	beq	1341c <__assert_fail@plt+0x1ec0>
   133cc:	ldr	r1, [r0, #4]!
   133d0:	str	r1, [r4, #8]
   133d4:	subs	r1, r5, #2
   133d8:	beq	13414 <__assert_fail@plt+0x1eb8>
   133dc:	mov	r2, r0
   133e0:	ldr	r3, [r2, #4]!
   133e4:	ldr	r0, [r0]
   133e8:	subs	r1, r1, #1
   133ec:	str	r3, [r0, #8]
   133f0:	mov	r0, r2
   133f4:	bne	133e0 <__assert_fail@plt+0x1e84>
   133f8:	b	13418 <__assert_fail@plt+0x1ebc>
   133fc:	ldr	r0, [r6, #8]
   13400:	bl	12db8 <__assert_fail@plt+0x185c>
   13404:	mov	r0, #0
   13408:	str	r0, [r6, #40]	; 0x28
   1340c:	str	r0, [r6, #8]
   13410:	b	13424 <__assert_fail@plt+0x1ec8>
   13414:	mov	r2, r0
   13418:	ldr	r1, [r2]
   1341c:	mov	r0, #0
   13420:	str	r0, [r1, #8]
   13424:	mov	r0, r4
   13428:	pop	{r4, r5, r6, r7, fp, pc}
   1342c:	push	{r4, r5, fp, lr}
   13430:	add	fp, sp, #8
   13434:	sub	sp, sp, #8
   13438:	mov	r4, r0
   1343c:	ldrh	r0, [r0, #48]	; 0x30
   13440:	movw	r1, #258	; 0x102
   13444:	tst	r0, r1
   13448:	beq	13488 <__assert_fail@plt+0x1f2c>
   1344c:	movw	r0, #11704	; 0x2db8
   13450:	movw	r2, #19488	; 0x4c20
   13454:	movw	r3, #19520	; 0x4c40
   13458:	mov	r1, #0
   1345c:	mov	r5, #0
   13460:	movt	r0, #1
   13464:	movt	r2, #1
   13468:	movt	r3, #1
   1346c:	str	r0, [sp]
   13470:	mov	r0, #31
   13474:	bl	152ac <__assert_fail@plt+0x3d50>
   13478:	cmp	r0, #0
   1347c:	str	r0, [r4, #56]	; 0x38
   13480:	movne	r5, #1
   13484:	b	134ac <__assert_fail@plt+0x1f50>
   13488:	mov	r0, #32
   1348c:	bl	18d10 <__assert_fail@plt+0x77b4>
   13490:	cmp	r0, #0
   13494:	str	r0, [r4, #56]	; 0x38
   13498:	beq	134a8 <__assert_fail@plt+0x1f4c>
   1349c:	bl	18e10 <__assert_fail@plt+0x78b4>
   134a0:	mov	r5, #1
   134a4:	b	134ac <__assert_fail@plt+0x1f50>
   134a8:	mov	r5, #0
   134ac:	mov	r0, r5
   134b0:	sub	sp, fp, #8
   134b4:	pop	{r4, r5, fp, pc}
   134b8:	ldr	r3, [r0, #48]	; 0x30
   134bc:	mov	r2, #32768	; 0x8000
   134c0:	and	r2, r2, r3, lsl #11
   134c4:	tst	r3, #512	; 0x200
   134c8:	orr	r2, r2, #18688	; 0x4900
   134cc:	orr	r2, r2, #524288	; 0x80000
   134d0:	bne	134e0 <__assert_fail@plt+0x1f84>
   134d4:	mov	r0, r1
   134d8:	mov	r1, r2
   134dc:	b	19170 <__assert_fail@plt+0x7c14>
   134e0:	ldr	r0, [r0, #32]
   134e4:	b	15ea8 <__assert_fail@plt+0x494c>
   134e8:	push	{r4, r6, r7, sl, fp, lr}
   134ec:	add	fp, sp, #16
   134f0:	cmp	r0, #0
   134f4:	beq	13524 <__assert_fail@plt+0x1fc8>
   134f8:	mov	r4, r0
   134fc:	ldrd	r6, [r4, #8]
   13500:	cmp	r7, #0
   13504:	beq	13510 <__assert_fail@plt+0x1fb4>
   13508:	mov	r0, r7
   1350c:	bl	11538 <closedir@plt>
   13510:	mov	r0, r4
   13514:	bl	12db8 <__assert_fail@plt+0x185c>
   13518:	cmp	r6, #0
   1351c:	mov	r4, r6
   13520:	bne	134fc <__assert_fail@plt+0x1fa0>
   13524:	pop	{r4, r6, r7, sl, fp, pc}
   13528:	push	{r4, r5, fp, lr}
   1352c:	add	fp, sp, #8
   13530:	mov	r4, r0
   13534:	ldr	r0, [r0]
   13538:	cmp	r0, #0
   1353c:	beq	1357c <__assert_fail@plt+0x2020>
   13540:	ldr	r1, [r0, #48]	; 0x30
   13544:	cmp	r1, #0
   13548:	bmi	13570 <__assert_fail@plt+0x2014>
   1354c:	ldr	r5, [r0, #8]
   13550:	cmp	r5, #0
   13554:	ldreq	r5, [r0, #4]
   13558:	bl	12db8 <__assert_fail@plt+0x185c>
   1355c:	ldr	r0, [r5, #48]	; 0x30
   13560:	cmn	r0, #1
   13564:	mov	r0, r5
   13568:	bgt	1354c <__assert_fail@plt+0x1ff0>
   1356c:	b	13574 <__assert_fail@plt+0x2018>
   13570:	mov	r5, r0
   13574:	mov	r0, r5
   13578:	bl	12db8 <__assert_fail@plt+0x185c>
   1357c:	ldr	r0, [r4, #4]
   13580:	cmp	r0, #0
   13584:	blne	134e8 <__assert_fail@plt+0x1f8c>
   13588:	ldr	r0, [r4, #8]
   1358c:	bl	12db8 <__assert_fail@plt+0x185c>
   13590:	ldr	r0, [r4, #24]
   13594:	bl	12db8 <__assert_fail@plt+0x185c>
   13598:	ldr	r0, [r4, #48]	; 0x30
   1359c:	tst	r0, #512	; 0x200
   135a0:	bne	135cc <__assert_fail@plt+0x2070>
   135a4:	mov	r5, #0
   135a8:	tst	r0, #4
   135ac:	bne	13608 <__assert_fail@plt+0x20ac>
   135b0:	ldr	r0, [r4, #28]
   135b4:	bl	114c0 <fchdir@plt>
   135b8:	cmp	r0, #0
   135bc:	beq	135e4 <__assert_fail@plt+0x2088>
   135c0:	bl	11400 <__errno_location@plt>
   135c4:	ldr	r5, [r0]
   135c8:	b	135e8 <__assert_fail@plt+0x208c>
   135cc:	ldr	r0, [r4, #32]
   135d0:	mov	r5, #0
   135d4:	cmp	r0, #0
   135d8:	bmi	13608 <__assert_fail@plt+0x20ac>
   135dc:	bl	11520 <close@plt>
   135e0:	b	135f8 <__assert_fail@plt+0x209c>
   135e4:	mov	r5, #0
   135e8:	ldr	r0, [r4, #28]
   135ec:	bl	11520 <close@plt>
   135f0:	cmp	r5, #0
   135f4:	bne	13608 <__assert_fail@plt+0x20ac>
   135f8:	cmp	r0, #0
   135fc:	beq	13608 <__assert_fail@plt+0x20ac>
   13600:	bl	11400 <__errno_location@plt>
   13604:	ldr	r5, [r0]
   13608:	add	r0, r4, #60	; 0x3c
   1360c:	bl	13650 <__assert_fail@plt+0x20f4>
   13610:	ldr	r0, [r4, #52]	; 0x34
   13614:	cmp	r0, #0
   13618:	beq	13620 <__assert_fail@plt+0x20c4>
   1361c:	bl	155d8 <__assert_fail@plt+0x407c>
   13620:	mov	r0, r4
   13624:	bl	13688 <__assert_fail@plt+0x212c>
   13628:	mov	r0, r4
   1362c:	bl	12db8 <__assert_fail@plt+0x185c>
   13630:	cmp	r5, #0
   13634:	beq	13648 <__assert_fail@plt+0x20ec>
   13638:	bl	11400 <__errno_location@plt>
   1363c:	str	r5, [r0]
   13640:	mvn	r0, #0
   13644:	pop	{r4, r5, fp, pc}
   13648:	mov	r0, #0
   1364c:	pop	{r4, r5, fp, pc}
   13650:	push	{r4, sl, fp, lr}
   13654:	add	fp, sp, #8
   13658:	mov	r4, r0
   1365c:	bl	15da0 <__assert_fail@plt+0x4844>
   13660:	cmp	r0, #0
   13664:	bne	13684 <__assert_fail@plt+0x2128>
   13668:	mov	r0, r4
   1366c:	bl	15df4 <__assert_fail@plt+0x4898>
   13670:	cmp	r0, #0
   13674:	bmi	1367c <__assert_fail@plt+0x2120>
   13678:	bl	11520 <close@plt>
   1367c:	mov	r0, r4
   13680:	b	1365c <__assert_fail@plt+0x2100>
   13684:	pop	{r4, sl, fp, pc}
   13688:	ldrh	r1, [r0, #48]	; 0x30
   1368c:	movw	r2, #258	; 0x102
   13690:	tst	r1, r2
   13694:	beq	136a8 <__assert_fail@plt+0x214c>
   13698:	ldr	r0, [r0, #56]	; 0x38
   1369c:	cmp	r0, #0
   136a0:	bxeq	lr
   136a4:	b	155d8 <__assert_fail@plt+0x407c>
   136a8:	ldr	r0, [r0, #56]	; 0x38
   136ac:	b	12db8 <__assert_fail@plt+0x185c>
   136b0:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   136b4:	add	fp, sp, #24
   136b8:	ldr	r6, [r0]
   136bc:	mov	r5, #0
   136c0:	cmp	r6, #0
   136c4:	beq	13cb4 <__assert_fail@plt+0x2758>
   136c8:	ldr	r1, [r0, #48]	; 0x30
   136cc:	mov	r4, r0
   136d0:	tst	r1, #8192	; 0x2000
   136d4:	bne	13cb4 <__assert_fail@plt+0x2758>
   136d8:	ldrh	r0, [r6, #60]	; 0x3c
   136dc:	mov	r2, #3
   136e0:	strh	r2, [r6, #60]	; 0x3c
   136e4:	cmp	r0, #1
   136e8:	beq	13758 <__assert_fail@plt+0x21fc>
   136ec:	cmp	r0, #2
   136f0:	bne	13770 <__assert_fail@plt+0x2214>
   136f4:	ldrh	r2, [r6, #56]	; 0x38
   136f8:	bic	r3, r2, #1
   136fc:	cmp	r3, #12
   13700:	bne	13774 <__assert_fail@plt+0x2218>
   13704:	mov	r0, r4
   13708:	mov	r1, r6
   1370c:	mov	r2, #1
   13710:	bl	131fc <__assert_fail@plt+0x1ca0>
   13714:	cmp	r0, #1
   13718:	strh	r0, [r6, #56]	; 0x38
   1371c:	bne	13b08 <__assert_fail@plt+0x25ac>
   13720:	ldrb	r0, [r4, #48]	; 0x30
   13724:	tst	r0, #4
   13728:	bne	13b08 <__assert_fail@plt+0x25ac>
   1372c:	movw	r1, #42917	; 0xa7a5
   13730:	mov	r0, r4
   13734:	movt	r1, #1
   13738:	bl	134b8 <__assert_fail@plt+0x1f5c>
   1373c:	cmn	r0, #1
   13740:	str	r0, [r6, #36]	; 0x24
   13744:	ble	13af4 <__assert_fail@plt+0x2598>
   13748:	ldrh	r0, [r6, #58]	; 0x3a
   1374c:	orr	r0, r0, #2
   13750:	strh	r0, [r6, #58]	; 0x3a
   13754:	b	13b08 <__assert_fail@plt+0x25ac>
   13758:	mov	r0, r4
   1375c:	mov	r1, r6
   13760:	mov	r2, #0
   13764:	bl	131fc <__assert_fail@plt+0x1ca0>
   13768:	strh	r0, [r6, #56]	; 0x38
   1376c:	b	137c4 <__assert_fail@plt+0x2268>
   13770:	ldrh	r2, [r6, #56]	; 0x38
   13774:	cmp	r2, #1
   13778:	bne	137cc <__assert_fail@plt+0x2270>
   1377c:	cmp	r0, #4
   13780:	bne	1385c <__assert_fail@plt+0x2300>
   13784:	ldrb	r0, [r6, #58]	; 0x3a
   13788:	tst	r0, #2
   1378c:	beq	13798 <__assert_fail@plt+0x223c>
   13790:	ldr	r0, [r6, #36]	; 0x24
   13794:	bl	11520 <close@plt>
   13798:	ldr	r0, [r4, #4]
   1379c:	cmp	r0, #0
   137a0:	beq	137b0 <__assert_fail@plt+0x2254>
   137a4:	bl	134e8 <__assert_fail@plt+0x1f8c>
   137a8:	mov	r0, #0
   137ac:	str	r0, [r4, #4]
   137b0:	mov	r0, #6
   137b4:	strh	r0, [r6, #56]	; 0x38
   137b8:	mov	r0, r4
   137bc:	mov	r1, r6
   137c0:	bl	13cc0 <__assert_fail@plt+0x2764>
   137c4:	mov	r5, r6
   137c8:	b	13cb4 <__assert_fail@plt+0x2758>
   137cc:	ldr	r5, [r6, #8]
   137d0:	cmp	r5, #0
   137d4:	beq	138f4 <__assert_fail@plt+0x2398>
   137d8:	mov	r0, r6
   137dc:	str	r5, [r4]
   137e0:	bl	12db8 <__assert_fail@plt+0x185c>
   137e4:	ldr	r0, [r5, #48]	; 0x30
   137e8:	cmp	r0, #0
   137ec:	beq	13940 <__assert_fail@plt+0x23e4>
   137f0:	ldrh	r0, [r5, #60]	; 0x3c
   137f4:	mov	r6, r5
   137f8:	cmp	r0, #4
   137fc:	beq	137cc <__assert_fail@plt+0x2270>
   13800:	cmp	r0, #2
   13804:	bne	13b9c <__assert_fail@plt+0x2640>
   13808:	mov	r0, r4
   1380c:	mov	r1, r5
   13810:	mov	r2, #1
   13814:	bl	131fc <__assert_fail@plt+0x1ca0>
   13818:	cmp	r0, #1
   1381c:	strh	r0, [r5, #56]	; 0x38
   13820:	bne	13b94 <__assert_fail@plt+0x2638>
   13824:	ldrb	r0, [r4, #48]	; 0x30
   13828:	tst	r0, #4
   1382c:	bne	13b94 <__assert_fail@plt+0x2638>
   13830:	movw	r1, #42917	; 0xa7a5
   13834:	mov	r0, r4
   13838:	movt	r1, #1
   1383c:	bl	134b8 <__assert_fail@plt+0x1f5c>
   13840:	cmn	r0, #1
   13844:	str	r0, [r5, #36]	; 0x24
   13848:	ble	13b80 <__assert_fail@plt+0x2624>
   1384c:	ldrh	r0, [r5, #58]	; 0x3a
   13850:	orr	r0, r0, #2
   13854:	strh	r0, [r5, #58]	; 0x3a
   13858:	b	13b94 <__assert_fail@plt+0x2638>
   1385c:	tst	r1, #64	; 0x40
   13860:	beq	13884 <__assert_fail@plt+0x2328>
   13864:	ldr	r0, [r4, #16]
   13868:	ldr	r2, [r6, #64]	; 0x40
   1386c:	ldr	r3, [r4, #20]
   13870:	ldr	r5, [r6, #68]	; 0x44
   13874:	eor	r3, r5, r3
   13878:	eor	r0, r2, r0
   1387c:	orrs	r0, r0, r3
   13880:	bne	13784 <__assert_fail@plt+0x2228>
   13884:	ldr	r0, [r4, #4]
   13888:	cmp	r0, #0
   1388c:	beq	13a00 <__assert_fail@plt+0x24a4>
   13890:	tst	r1, #4096	; 0x1000
   13894:	bne	139ec <__assert_fail@plt+0x2490>
   13898:	ldr	r3, [r6, #24]
   1389c:	mov	r0, r4
   138a0:	mov	r1, r6
   138a4:	mvn	r2, #0
   138a8:	bl	13d98 <__assert_fail@plt+0x283c>
   138ac:	cmp	r0, #0
   138b0:	beq	13a18 <__assert_fail@plt+0x24bc>
   138b4:	bl	11400 <__errno_location@plt>
   138b8:	ldr	r0, [r0]
   138bc:	str	r0, [r6, #32]
   138c0:	ldrh	r0, [r6, #58]	; 0x3a
   138c4:	orr	r0, r0, #1
   138c8:	strh	r0, [r6, #58]	; 0x3a
   138cc:	ldr	r0, [r4, #4]
   138d0:	cmp	r0, #0
   138d4:	beq	13a18 <__assert_fail@plt+0x24bc>
   138d8:	ldmib	r0, {r1, r2}
   138dc:	cmp	r2, #0
   138e0:	ldr	r1, [r1, #24]
   138e4:	str	r1, [r0, #24]
   138e8:	mov	r0, r2
   138ec:	bne	138d8 <__assert_fail@plt+0x237c>
   138f0:	b	13a18 <__assert_fail@plt+0x24bc>
   138f4:	ldr	r5, [r6, #4]
   138f8:	ldr	r0, [r5, #12]
   138fc:	cmp	r0, #0
   13900:	beq	13a68 <__assert_fail@plt+0x250c>
   13904:	str	r5, [r4]
   13908:	ldr	r1, [r5, #40]	; 0x28
   1390c:	ldr	r0, [r4, #24]
   13910:	mov	r5, #0
   13914:	strb	r5, [r0, r1]
   13918:	mov	r0, r4
   1391c:	mov	r1, #3
   13920:	bl	13f78 <__assert_fail@plt+0x2a1c>
   13924:	cmp	r0, #0
   13928:	beq	13a58 <__assert_fail@plt+0x24fc>
   1392c:	mov	r7, r0
   13930:	mov	r0, r6
   13934:	bl	12db8 <__assert_fail@plt+0x185c>
   13938:	mov	r5, r7
   1393c:	b	13b9c <__assert_fail@plt+0x2640>
   13940:	mov	r0, r4
   13944:	bl	14908 <__assert_fail@plt+0x33ac>
   13948:	cmp	r0, #0
   1394c:	beq	13964 <__assert_fail@plt+0x2408>
   13950:	ldr	r0, [r4, #48]	; 0x30
   13954:	mov	r5, #0
   13958:	orr	r0, r0, #8192	; 0x2000
   1395c:	str	r0, [r4, #48]	; 0x30
   13960:	b	13cb4 <__assert_fail@plt+0x2758>
   13964:	mov	r0, r4
   13968:	bl	13688 <__assert_fail@plt+0x212c>
   1396c:	ldr	r1, [r5, #52]	; 0x34
   13970:	add	r6, r5, #168	; 0xa8
   13974:	str	r1, [r5, #40]	; 0x28
   13978:	add	r2, r1, #1
   1397c:	mov	r1, r6
   13980:	ldr	r0, [r4, #24]
   13984:	bl	11280 <memmove@plt>
   13988:	mov	r0, r6
   1398c:	mov	r1, #47	; 0x2f
   13990:	bl	11484 <strrchr@plt>
   13994:	cmp	r0, #0
   13998:	beq	139d4 <__assert_fail@plt+0x2478>
   1399c:	cmp	r0, r6
   139a0:	bne	139b0 <__assert_fail@plt+0x2454>
   139a4:	ldrb	r1, [r5, #169]	; 0xa9
   139a8:	cmp	r1, #0
   139ac:	beq	139d4 <__assert_fail@plt+0x2478>
   139b0:	add	r7, r0, #1
   139b4:	mov	r0, r7
   139b8:	bl	113d0 <strlen@plt>
   139bc:	mov	r8, r0
   139c0:	add	r2, r0, #1
   139c4:	mov	r0, r6
   139c8:	mov	r1, r7
   139cc:	bl	11280 <memmove@plt>
   139d0:	str	r8, [r5, #52]	; 0x34
   139d4:	ldr	r0, [r4, #24]
   139d8:	str	r0, [r5, #24]
   139dc:	str	r0, [r5, #28]
   139e0:	mov	r0, r4
   139e4:	bl	1342c <__assert_fail@plt+0x1ed0>
   139e8:	b	13bd8 <__assert_fail@plt+0x267c>
   139ec:	bic	r1, r1, #4096	; 0x1000
   139f0:	str	r1, [r4, #48]	; 0x30
   139f4:	bl	134e8 <__assert_fail@plt+0x1f8c>
   139f8:	mov	r0, #0
   139fc:	str	r0, [r4, #4]
   13a00:	mov	r0, r4
   13a04:	mov	r1, #3
   13a08:	bl	13f78 <__assert_fail@plt+0x2a1c>
   13a0c:	cmp	r0, #0
   13a10:	str	r0, [r4, #4]
   13a14:	beq	13a28 <__assert_fail@plt+0x24cc>
   13a18:	ldr	r5, [r4, #4]
   13a1c:	mov	r0, #0
   13a20:	str	r0, [r4, #4]
   13a24:	b	13b9c <__assert_fail@plt+0x2640>
   13a28:	ldrb	r0, [r4, #49]	; 0x31
   13a2c:	mov	r5, #0
   13a30:	tst	r0, #32
   13a34:	bne	13cb4 <__assert_fail@plt+0x2758>
   13a38:	ldr	r0, [r6, #32]
   13a3c:	cmp	r0, #0
   13a40:	beq	137b8 <__assert_fail@plt+0x225c>
   13a44:	ldrh	r0, [r6, #56]	; 0x38
   13a48:	cmp	r0, #4
   13a4c:	beq	137b8 <__assert_fail@plt+0x225c>
   13a50:	mov	r0, #7
   13a54:	b	137b4 <__assert_fail@plt+0x2258>
   13a58:	ldrb	r0, [r4, #49]	; 0x31
   13a5c:	tst	r0, #32
   13a60:	bne	13cb4 <__assert_fail@plt+0x2758>
   13a64:	ldr	r5, [r6, #4]
   13a68:	mov	r0, r6
   13a6c:	str	r5, [r4]
   13a70:	bl	12db8 <__assert_fail@plt+0x185c>
   13a74:	ldr	r0, [r5, #48]	; 0x30
   13a78:	cmn	r0, #1
   13a7c:	beq	13ad8 <__assert_fail@plt+0x257c>
   13a80:	ldrh	r0, [r5, #56]	; 0x38
   13a84:	cmp	r0, #11
   13a88:	beq	13cbc <__assert_fail@plt+0x2760>
   13a8c:	ldr	r0, [r5, #40]	; 0x28
   13a90:	ldr	r1, [r4, #24]
   13a94:	mov	r2, #0
   13a98:	strb	r2, [r1, r0]
   13a9c:	ldr	r0, [r5, #48]	; 0x30
   13aa0:	cmp	r0, #0
   13aa4:	beq	13b10 <__assert_fail@plt+0x25b4>
   13aa8:	ldrh	r0, [r5, #58]	; 0x3a
   13aac:	tst	r0, #2
   13ab0:	bne	13b3c <__assert_fail@plt+0x25e0>
   13ab4:	tst	r0, #1
   13ab8:	bne	13c78 <__assert_fail@plt+0x271c>
   13abc:	ldr	r1, [r5, #4]
   13ac0:	movw	r3, #42916	; 0xa7a4
   13ac4:	mov	r0, r4
   13ac8:	mvn	r2, #0
   13acc:	movt	r3, #1
   13ad0:	bl	13d98 <__assert_fail@plt+0x283c>
   13ad4:	b	13b18 <__assert_fail@plt+0x25bc>
   13ad8:	mov	r0, r5
   13adc:	bl	12db8 <__assert_fail@plt+0x185c>
   13ae0:	bl	11400 <__errno_location@plt>
   13ae4:	mov	r5, #0
   13ae8:	str	r5, [r0]
   13aec:	str	r5, [r4]
   13af0:	b	13cb4 <__assert_fail@plt+0x2758>
   13af4:	bl	11400 <__errno_location@plt>
   13af8:	ldr	r0, [r0]
   13afc:	mov	r1, #7
   13b00:	strh	r1, [r6, #56]	; 0x38
   13b04:	str	r0, [r6, #32]
   13b08:	mov	r5, r6
   13b0c:	b	13bd8 <__assert_fail@plt+0x267c>
   13b10:	mov	r0, r4
   13b14:	bl	14908 <__assert_fail@plt+0x33ac>
   13b18:	cmp	r0, #0
   13b1c:	beq	13c78 <__assert_fail@plt+0x271c>
   13b20:	bl	11400 <__errno_location@plt>
   13b24:	ldr	r0, [r0]
   13b28:	str	r0, [r5, #32]
   13b2c:	ldr	r0, [r4, #48]	; 0x30
   13b30:	orr	r0, r0, #8192	; 0x2000
   13b34:	str	r0, [r4, #48]	; 0x30
   13b38:	b	13c78 <__assert_fail@plt+0x271c>
   13b3c:	ldr	r0, [r4, #48]	; 0x30
   13b40:	tst	r0, #4
   13b44:	bne	13c70 <__assert_fail@plt+0x2714>
   13b48:	ldr	r1, [r5, #36]	; 0x24
   13b4c:	tst	r0, #512	; 0x200
   13b50:	bne	13c64 <__assert_fail@plt+0x2708>
   13b54:	mov	r0, r1
   13b58:	bl	114c0 <fchdir@plt>
   13b5c:	cmp	r0, #0
   13b60:	beq	13c70 <__assert_fail@plt+0x2714>
   13b64:	bl	11400 <__errno_location@plt>
   13b68:	ldr	r0, [r0]
   13b6c:	str	r0, [r5, #32]
   13b70:	ldr	r0, [r4, #48]	; 0x30
   13b74:	orr	r0, r0, #8192	; 0x2000
   13b78:	str	r0, [r4, #48]	; 0x30
   13b7c:	b	13c70 <__assert_fail@plt+0x2714>
   13b80:	bl	11400 <__errno_location@plt>
   13b84:	ldr	r0, [r0]
   13b88:	mov	r1, #7
   13b8c:	strh	r1, [r5, #56]	; 0x38
   13b90:	str	r0, [r5, #32]
   13b94:	mov	r0, #3
   13b98:	strh	r0, [r5, #60]	; 0x3c
   13b9c:	ldr	r0, [r5, #4]
   13ba0:	ldr	r1, [r0, #28]
   13ba4:	ldr	r0, [r0, #40]	; 0x28
   13ba8:	sub	r2, r0, #1
   13bac:	ldrb	r1, [r1, r2]
   13bb0:	cmp	r1, #47	; 0x2f
   13bb4:	ldr	r1, [r4, #24]
   13bb8:	moveq	r0, r2
   13bbc:	mov	r2, #47	; 0x2f
   13bc0:	strb	r2, [r1, r0]!
   13bc4:	ldr	r2, [r5, #52]	; 0x34
   13bc8:	add	r0, r1, #1
   13bcc:	add	r1, r5, #168	; 0xa8
   13bd0:	add	r2, r2, #1
   13bd4:	bl	11280 <memmove@plt>
   13bd8:	str	r5, [r4]
   13bdc:	ldrh	r0, [r5, #56]	; 0x38
   13be0:	cmp	r0, #11
   13be4:	bne	13c1c <__assert_fail@plt+0x26c0>
   13be8:	add	r0, r5, #112	; 0x70
   13bec:	ldrd	r0, [r0]
   13bf0:	eor	r2, r0, #1
   13bf4:	orrs	r2, r2, r1
   13bf8:	beq	13cb4 <__assert_fail@plt+0x2758>
   13bfc:	eor	r0, r0, #2
   13c00:	orrs	r0, r0, r1
   13c04:	bne	13cbc <__assert_fail@plt+0x2760>
   13c08:	mov	r0, r4
   13c0c:	mov	r1, r5
   13c10:	mov	r2, #0
   13c14:	bl	131fc <__assert_fail@plt+0x1ca0>
   13c18:	strh	r0, [r5, #56]	; 0x38
   13c1c:	cmp	r0, #1
   13c20:	bne	13cb4 <__assert_fail@plt+0x2758>
   13c24:	ldr	r0, [r5, #48]	; 0x30
   13c28:	cmp	r0, #0
   13c2c:	bne	13c3c <__assert_fail@plt+0x26e0>
   13c30:	add	r0, r5, #64	; 0x40
   13c34:	ldrd	r0, [r0]
   13c38:	strd	r0, [r4, #16]
   13c3c:	mov	r0, r4
   13c40:	mov	r1, r5
   13c44:	bl	14964 <__assert_fail@plt+0x3408>
   13c48:	cmp	r0, #0
   13c4c:	bne	13cb4 <__assert_fail@plt+0x2758>
   13c50:	bl	11400 <__errno_location@plt>
   13c54:	mov	r1, #12
   13c58:	mov	r5, #0
   13c5c:	str	r1, [r0]
   13c60:	b	13cb4 <__assert_fail@plt+0x2758>
   13c64:	mov	r0, r4
   13c68:	mov	r2, #1
   13c6c:	bl	14a20 <__assert_fail@plt+0x34c4>
   13c70:	ldr	r0, [r5, #36]	; 0x24
   13c74:	bl	11520 <close@plt>
   13c78:	ldrh	r0, [r5, #56]	; 0x38
   13c7c:	cmp	r0, #2
   13c80:	beq	13ca8 <__assert_fail@plt+0x274c>
   13c84:	ldr	r0, [r5, #32]
   13c88:	mov	r1, #7
   13c8c:	cmp	r0, #0
   13c90:	movweq	r1, #6
   13c94:	strh	r1, [r5, #56]	; 0x38
   13c98:	bne	13ca8 <__assert_fail@plt+0x274c>
   13c9c:	mov	r0, r4
   13ca0:	mov	r1, r5
   13ca4:	bl	13cc0 <__assert_fail@plt+0x2764>
   13ca8:	ldrb	r0, [r4, #49]	; 0x31
   13cac:	tst	r0, #32
   13cb0:	movne	r5, #0
   13cb4:	mov	r0, r5
   13cb8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   13cbc:	bl	11514 <abort@plt>
   13cc0:	push	{r4, r5, r7, sl, fp, lr}
   13cc4:	add	fp, sp, #16
   13cc8:	sub	sp, sp, #24
   13ccc:	ldrh	r2, [r0, #48]	; 0x30
   13cd0:	movw	r3, #258	; 0x102
   13cd4:	add	lr, r1, #64	; 0x40
   13cd8:	add	r4, r1, #160	; 0xa0
   13cdc:	tst	r2, r3
   13ce0:	beq	13d18 <__assert_fail@plt+0x27bc>
   13ce4:	ldrd	r2, [lr]
   13ce8:	mov	r1, sp
   13cec:	stm	sp, {r2, r3}
   13cf0:	ldrd	r2, [r4]
   13cf4:	str	r3, [sp, #12]
   13cf8:	str	r2, [sp, #8]
   13cfc:	ldr	r0, [r0, #56]	; 0x38
   13d00:	bl	15c68 <__assert_fail@plt+0x470c>
   13d04:	cmp	r0, #0
   13d08:	beq	13d94 <__assert_fail@plt+0x2838>
   13d0c:	bl	12db8 <__assert_fail@plt+0x185c>
   13d10:	sub	sp, fp, #16
   13d14:	pop	{r4, r5, r7, sl, fp, pc}
   13d18:	ldr	r1, [r1, #4]
   13d1c:	cmp	r1, #0
   13d20:	beq	13d10 <__assert_fail@plt+0x27b4>
   13d24:	ldr	r2, [r1, #48]	; 0x30
   13d28:	cmp	r2, #0
   13d2c:	bmi	13d10 <__assert_fail@plt+0x27b4>
   13d30:	ldr	ip, [r0, #56]	; 0x38
   13d34:	ldrd	r2, [ip, #16]
   13d38:	orrs	r2, r2, r3
   13d3c:	beq	13d94 <__assert_fail@plt+0x2838>
   13d40:	ldrd	r2, [r4]
   13d44:	ldrd	r4, [ip]
   13d48:	eor	r3, r5, r3
   13d4c:	eor	r2, r4, r2
   13d50:	orrs	r2, r2, r3
   13d54:	bne	13d10 <__assert_fail@plt+0x27b4>
   13d58:	add	r3, ip, #8
   13d5c:	ldm	lr, {r2, r5}
   13d60:	ldm	r3, {r4, r7}
   13d64:	eor	r7, r7, r5
   13d68:	eor	r2, r4, r2
   13d6c:	orrs	r2, r2, r7
   13d70:	bne	13d10 <__assert_fail@plt+0x27b4>
   13d74:	add	r2, r1, #64	; 0x40
   13d78:	add	r1, r1, #160	; 0xa0
   13d7c:	ldm	r2, {r2, r5}
   13d80:	stm	r3, {r2, r5}
   13d84:	ldr	r0, [r0, #56]	; 0x38
   13d88:	ldrd	r2, [r1]
   13d8c:	strd	r2, [r0]
   13d90:	b	13d10 <__assert_fail@plt+0x27b4>
   13d94:	bl	11514 <abort@plt>
   13d98:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13d9c:	add	fp, sp, #28
   13da0:	sub	sp, sp, #108	; 0x6c
   13da4:	mov	r7, r3
   13da8:	mov	r4, r2
   13dac:	mov	r8, r1
   13db0:	mov	sl, r0
   13db4:	cmp	r3, #0
   13db8:	beq	13ddc <__assert_fail@plt+0x2880>
   13dbc:	movw	r1, #42916	; 0xa7a4
   13dc0:	mov	r0, r7
   13dc4:	movt	r1, #1
   13dc8:	bl	1125c <strcmp@plt>
   13dcc:	cmp	r0, #0
   13dd0:	mov	r6, r0
   13dd4:	movwne	r6, #1
   13dd8:	b	13de0 <__assert_fail@plt+0x2884>
   13ddc:	mov	r6, #1
   13de0:	ldr	r0, [sl, #48]	; 0x30
   13de4:	tst	r0, #4
   13de8:	bne	13e40 <__assert_fail@plt+0x28e4>
   13dec:	cmn	r4, #1
   13df0:	mov	r1, #0
   13df4:	mov	r9, #0
   13df8:	movwgt	r1, #1
   13dfc:	orrs	r1, r1, r6
   13e00:	bne	13e60 <__assert_fail@plt+0x2904>
   13e04:	ands	r0, r0, #512	; 0x200
   13e08:	beq	13e60 <__assert_fail@plt+0x2904>
   13e0c:	add	r4, sl, #60	; 0x3c
   13e10:	mov	r0, r4
   13e14:	bl	15da0 <__assert_fail@plt+0x4844>
   13e18:	cmp	r0, #0
   13e1c:	bne	13e68 <__assert_fail@plt+0x290c>
   13e20:	mov	r0, r4
   13e24:	bl	15df4 <__assert_fail@plt+0x4898>
   13e28:	cmn	r0, #1
   13e2c:	ble	13e68 <__assert_fail@plt+0x290c>
   13e30:	mov	r4, r0
   13e34:	mov	r9, #0
   13e38:	mov	r7, #0
   13e3c:	b	13e84 <__assert_fail@plt+0x2928>
   13e40:	mov	r5, #0
   13e44:	cmp	r4, #0
   13e48:	bmi	13f6c <__assert_fail@plt+0x2a10>
   13e4c:	ands	r0, r0, #512	; 0x200
   13e50:	beq	13f6c <__assert_fail@plt+0x2a10>
   13e54:	mov	r0, r4
   13e58:	bl	11520 <close@plt>
   13e5c:	b	13f6c <__assert_fail@plt+0x2a10>
   13e60:	cmn	r4, #1
   13e64:	bgt	13e84 <__assert_fail@plt+0x2928>
   13e68:	mov	r0, sl
   13e6c:	mov	r1, r7
   13e70:	bl	134b8 <__assert_fail@plt+0x1f5c>
   13e74:	cmp	r0, #0
   13e78:	bmi	13f1c <__assert_fail@plt+0x29c0>
   13e7c:	mov	r4, r0
   13e80:	mov	r9, #1
   13e84:	ldr	r5, [sl, #48]	; 0x30
   13e88:	tst	r5, #2
   13e8c:	bne	13eb0 <__assert_fail@plt+0x2954>
   13e90:	cmp	r7, #0
   13e94:	beq	13f04 <__assert_fail@plt+0x29a8>
   13e98:	movw	r1, #42916	; 0xa7a4
   13e9c:	mov	r0, r7
   13ea0:	movt	r1, #1
   13ea4:	bl	1125c <strcmp@plt>
   13ea8:	cmp	r0, #0
   13eac:	bne	13f04 <__assert_fail@plt+0x29a8>
   13eb0:	mov	r1, sp
   13eb4:	mov	r0, r4
   13eb8:	bl	19690 <__assert_fail@plt+0x8134>
   13ebc:	cmp	r0, #0
   13ec0:	bne	13f48 <__assert_fail@plt+0x29ec>
   13ec4:	add	r0, r8, #64	; 0x40
   13ec8:	ldm	sp, {r2, r3}
   13ecc:	ldrd	r0, [r0]
   13ed0:	eor	r1, r1, r3
   13ed4:	eor	r0, r0, r2
   13ed8:	orrs	r0, r0, r1
   13edc:	bne	13f3c <__assert_fail@plt+0x29e0>
   13ee0:	add	r0, r8, #160	; 0xa0
   13ee4:	ldr	r2, [sp, #96]	; 0x60
   13ee8:	ldr	r3, [sp, #100]	; 0x64
   13eec:	ldrd	r0, [r0]
   13ef0:	eor	r1, r1, r3
   13ef4:	eor	r0, r0, r2
   13ef8:	orrs	r0, r0, r1
   13efc:	bne	13f3c <__assert_fail@plt+0x29e0>
   13f00:	ldr	r5, [sl, #48]	; 0x30
   13f04:	tst	r5, #512	; 0x200
   13f08:	bne	13f24 <__assert_fail@plt+0x29c8>
   13f0c:	mov	r0, r4
   13f10:	bl	114c0 <fchdir@plt>
   13f14:	mov	r5, r0
   13f18:	b	13f4c <__assert_fail@plt+0x29f0>
   13f1c:	mvn	r5, #0
   13f20:	b	13f6c <__assert_fail@plt+0x2a10>
   13f24:	mov	r0, sl
   13f28:	mov	r1, r4
   13f2c:	mov	r2, r6
   13f30:	bl	14a20 <__assert_fail@plt+0x34c4>
   13f34:	mov	r5, #0
   13f38:	b	13f6c <__assert_fail@plt+0x2a10>
   13f3c:	bl	11400 <__errno_location@plt>
   13f40:	mov	r1, #2
   13f44:	str	r1, [r0]
   13f48:	mvn	r5, #0
   13f4c:	cmp	r9, #0
   13f50:	beq	13f6c <__assert_fail@plt+0x2a10>
   13f54:	bl	11400 <__errno_location@plt>
   13f58:	ldr	r7, [r0]
   13f5c:	mov	r6, r0
   13f60:	mov	r0, r4
   13f64:	bl	11520 <close@plt>
   13f68:	str	r7, [r6]
   13f6c:	mov	r0, r5
   13f70:	sub	sp, fp, #28
   13f74:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13f78:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13f7c:	add	fp, sp, #28
   13f80:	sub	sp, sp, #68	; 0x44
   13f84:	ldr	sl, [r0]
   13f88:	mov	r4, r1
   13f8c:	str	r0, [fp, #-36]	; 0xffffffdc
   13f90:	ldr	r9, [sl, #12]
   13f94:	cmp	r9, #0
   13f98:	beq	13fdc <__assert_fail@plt+0x2a80>
   13f9c:	mov	r0, r9
   13fa0:	bl	114b4 <dirfd@plt>
   13fa4:	cmn	r0, #1
   13fa8:	str	r0, [fp, #-32]	; 0xffffffe0
   13fac:	ble	14014 <__assert_fail@plt+0x2ab8>
   13fb0:	ldr	r7, [fp, #-36]	; 0xffffffdc
   13fb4:	mov	ip, #0
   13fb8:	mov	r1, r7
   13fbc:	ldr	r0, [r1, #44]!	; 0x2c
   13fc0:	str	r1, [sp, #24]
   13fc4:	mvn	r1, #0
   13fc8:	cmp	r0, #0
   13fcc:	movweq	r1, #34464	; 0x86a0
   13fd0:	movteq	r1, #1
   13fd4:	str	r1, [sp, #32]
   13fd8:	b	1427c <__assert_fail@plt+0x2d20>
   13fdc:	ldr	r3, [r0, #48]	; 0x30
   13fe0:	mov	r2, r0
   13fe4:	mvn	r0, #99	; 0x63
   13fe8:	and	r1, r3, #516	; 0x204
   13fec:	cmp	r1, #512	; 0x200
   13ff0:	ldr	r1, [sl, #24]
   13ff4:	ldreq	r0, [r2, #32]
   13ff8:	mov	r2, #0
   13ffc:	tst	r3, #16
   14000:	beq	14034 <__assert_fail@plt+0x2ad8>
   14004:	tst	r3, #1
   14008:	bne	14028 <__assert_fail@plt+0x2acc>
   1400c:	mov	r2, #32768	; 0x8000
   14010:	b	14034 <__assert_fail@plt+0x2ad8>
   14014:	ldr	r0, [sl, #12]
   14018:	bl	11538 <closedir@plt>
   1401c:	mov	r5, #0
   14020:	str	r5, [sl, #12]
   14024:	b	14074 <__assert_fail@plt+0x2b18>
   14028:	ldr	r3, [sl, #48]	; 0x30
   1402c:	cmp	r3, #0
   14030:	movne	r2, #32768	; 0x8000
   14034:	sub	r3, fp, #32
   14038:	bl	15ee0 <__assert_fail@plt+0x4984>
   1403c:	cmp	r0, #0
   14040:	str	r0, [sl, #12]
   14044:	beq	14070 <__assert_fail@plt+0x2b14>
   14048:	ldrh	r0, [sl, #56]	; 0x38
   1404c:	cmp	r0, #11
   14050:	bne	14094 <__assert_fail@plt+0x2b38>
   14054:	ldr	r7, [fp, #-36]	; 0xffffffdc
   14058:	mov	r1, sl
   1405c:	mov	r2, #0
   14060:	mov	r0, r7
   14064:	bl	131fc <__assert_fail@plt+0x1ca0>
   14068:	strh	r0, [sl, #56]	; 0x38
   1406c:	b	140dc <__assert_fail@plt+0x2b80>
   14070:	mov	r5, #0
   14074:	cmp	r4, #3
   14078:	bne	148fc <__assert_fail@plt+0x33a0>
   1407c:	mov	r0, #4
   14080:	strh	r0, [sl, #56]	; 0x38
   14084:	bl	11400 <__errno_location@plt>
   14088:	ldr	r0, [r0]
   1408c:	str	r0, [sl, #32]
   14090:	b	148fc <__assert_fail@plt+0x33a0>
   14094:	ldr	r7, [fp, #-36]	; 0xffffffdc
   14098:	ldrb	r0, [r7, #49]	; 0x31
   1409c:	tst	r0, #1
   140a0:	beq	140dc <__assert_fail@plt+0x2b80>
   140a4:	mov	r0, r7
   140a8:	mov	r1, sl
   140ac:	bl	13cc0 <__assert_fail@plt+0x2764>
   140b0:	ldr	r0, [fp, #-36]	; 0xffffffdc
   140b4:	mov	r1, sl
   140b8:	mov	r2, #0
   140bc:	mov	r5, #0
   140c0:	bl	131fc <__assert_fail@plt+0x1ca0>
   140c4:	ldr	r0, [fp, #-36]	; 0xffffffdc
   140c8:	mov	r1, sl
   140cc:	bl	14964 <__assert_fail@plt+0x3408>
   140d0:	ldr	r7, [fp, #-36]	; 0xffffffdc
   140d4:	cmp	r0, #0
   140d8:	beq	14180 <__assert_fail@plt+0x2c24>
   140dc:	mov	r1, r7
   140e0:	ldr	r0, [r1, #44]!	; 0x2c
   140e4:	str	r1, [sp, #24]
   140e8:	mvn	r1, #0
   140ec:	cmp	r0, #0
   140f0:	movweq	r1, #34464	; 0x86a0
   140f4:	movteq	r1, #1
   140f8:	cmp	r4, #2
   140fc:	str	r1, [sp, #32]
   14100:	bne	14120 <__assert_fail@plt+0x2bc4>
   14104:	mov	ip, #1
   14108:	cmp	r4, #3
   1410c:	bne	1427c <__assert_fail@plt+0x2d20>
   14110:	sub	r0, r4, #3
   14114:	mov	r8, r4
   14118:	mov	r5, #0
   1411c:	b	141b4 <__assert_fail@plt+0x2c58>
   14120:	ldr	r0, [r7, #48]	; 0x30
   14124:	and	r0, r0, #56	; 0x38
   14128:	cmp	r0, #24
   1412c:	bne	141a8 <__assert_fail@plt+0x2c4c>
   14130:	ldr	r0, [sl, #84]	; 0x54
   14134:	cmp	r0, #2
   14138:	bne	141a8 <__assert_fail@plt+0x2c4c>
   1413c:	ldr	r1, [fp, #-32]	; 0xffffffe0
   14140:	mov	r0, sl
   14144:	bl	14cc0 <__assert_fail@plt+0x3764>
   14148:	movw	r1, #26984	; 0x6968
   1414c:	cmp	r0, r1
   14150:	ble	14190 <__assert_fail@plt+0x2c34>
   14154:	movw	r1, #26985	; 0x6969
   14158:	ldr	r7, [fp, #-36]	; 0xffffffdc
   1415c:	cmp	r0, r1
   14160:	movwne	r1, #16719	; 0x414f
   14164:	movtne	r1, #21318	; 0x5346
   14168:	cmpne	r0, r1
   1416c:	beq	141a8 <__assert_fail@plt+0x2c4c>
   14170:	movw	r1, #40864	; 0x9fa0
   14174:	cmp	r0, r1
   14178:	beq	141a8 <__assert_fail@plt+0x2c4c>
   1417c:	b	14104 <__assert_fail@plt+0x2ba8>
   14180:	bl	11400 <__errno_location@plt>
   14184:	mov	r1, #12
   14188:	str	r1, [r0]
   1418c:	b	148fc <__assert_fail@plt+0x33a0>
   14190:	movw	r1, #19778	; 0x4d42
   14194:	ldr	r7, [fp, #-36]	; 0xffffffdc
   14198:	movt	r1, #65363	; 0xff53
   1419c:	cmp	r0, r1
   141a0:	cmpne	r0, #0
   141a4:	bne	14104 <__assert_fail@plt+0x2ba8>
   141a8:	sub	r0, r4, #3
   141ac:	mov	r8, r4
   141b0:	mov	r5, #1
   141b4:	clz	r0, r0
   141b8:	lsr	r4, r0, #5
   141bc:	ldrb	r0, [r7, #49]	; 0x31
   141c0:	ldr	r2, [fp, #-32]	; 0xffffffe0
   141c4:	tst	r0, #2
   141c8:	beq	141e8 <__assert_fail@plt+0x2c8c>
   141cc:	mov	r0, r2
   141d0:	movw	r1, #1030	; 0x406
   141d4:	mov	r2, #3
   141d8:	bl	18f98 <__assert_fail@plt+0x7a3c>
   141dc:	ldr	r7, [fp, #-36]	; 0xffffffdc
   141e0:	mov	r2, r0
   141e4:	str	r0, [fp, #-32]	; 0xffffffe0
   141e8:	cmp	r2, #0
   141ec:	bmi	1420c <__assert_fail@plt+0x2cb0>
   141f0:	mov	r0, r7
   141f4:	mov	r1, sl
   141f8:	mov	r3, #0
   141fc:	bl	13d98 <__assert_fail@plt+0x283c>
   14200:	ldr	r7, [fp, #-36]	; 0xffffffdc
   14204:	cmp	r0, #0
   14208:	beq	14274 <__assert_fail@plt+0x2d18>
   1420c:	and	r0, r4, r5
   14210:	cmp	r0, #1
   14214:	bne	14224 <__assert_fail@plt+0x2cc8>
   14218:	bl	11400 <__errno_location@plt>
   1421c:	ldr	r0, [r0]
   14220:	str	r0, [sl, #32]
   14224:	ldrh	r0, [sl, #58]	; 0x3a
   14228:	orr	r0, r0, #1
   1422c:	strh	r0, [sl, #58]	; 0x3a
   14230:	ldr	r0, [sl, #12]
   14234:	bl	11538 <closedir@plt>
   14238:	ldr	r7, [fp, #-36]	; 0xffffffdc
   1423c:	mov	r4, #0
   14240:	str	r4, [sl, #12]
   14244:	ldrb	r0, [r7, #49]	; 0x31
   14248:	tst	r0, #2
   1424c:	beq	14264 <__assert_fail@plt+0x2d08>
   14250:	ldr	r0, [fp, #-32]	; 0xffffffe0
   14254:	cmp	r0, #0
   14258:	bmi	14264 <__assert_fail@plt+0x2d08>
   1425c:	bl	11520 <close@plt>
   14260:	ldr	r7, [fp, #-36]	; 0xffffffdc
   14264:	str	r4, [sl, #12]
   14268:	mov	ip, #1
   1426c:	mov	r4, r8
   14270:	b	1427c <__assert_fail@plt+0x2d20>
   14274:	mov	r4, r8
   14278:	mov	ip, #0
   1427c:	ldr	r0, [sl, #40]	; 0x28
   14280:	ldr	r1, [sl, #28]
   14284:	mov	r5, #0
   14288:	str	r4, [sp, #12]
   1428c:	sub	r2, r0, #1
   14290:	ldrb	r1, [r1, r2]
   14294:	cmp	r1, #47	; 0x2f
   14298:	ldrb	r1, [r7, #48]	; 0x30
   1429c:	moveq	r0, r2
   142a0:	tst	r1, #4
   142a4:	mov	r1, #0
   142a8:	str	r1, [sp, #40]	; 0x28
   142ac:	beq	142c4 <__assert_fail@plt+0x2d68>
   142b0:	ldr	r1, [r7, #24]
   142b4:	mov	r2, #47	; 0x2f
   142b8:	strb	r2, [r1, r0]!
   142bc:	add	r1, r1, #1
   142c0:	str	r1, [sp, #40]	; 0x28
   142c4:	ldr	r4, [sl, #12]
   142c8:	add	r1, r0, #1
   142cc:	str	r1, [sp, #48]	; 0x30
   142d0:	cmp	r4, #0
   142d4:	beq	14618 <__assert_fail@plt+0x30bc>
   142d8:	ldr	r0, [sl, #48]	; 0x30
   142dc:	str	ip, [sp, #4]
   142e0:	str	r9, [sp, #8]
   142e4:	add	r0, r0, #1
   142e8:	str	r0, [sp, #28]
   142ec:	ldr	r0, [r7, #36]	; 0x24
   142f0:	sub	r0, r0, r1
   142f4:	str	r0, [fp, #-44]	; 0xffffffd4
   142f8:	bl	11400 <__errno_location@plt>
   142fc:	str	r0, [sp, #36]	; 0x24
   14300:	mov	r0, #0
   14304:	mov	r1, #0
   14308:	mov	r5, #0
   1430c:	mov	r8, #0
   14310:	mov	r9, #0
   14314:	str	r0, [sp, #20]
   14318:	mov	r0, #0
   1431c:	str	r0, [sp, #16]
   14320:	ldr	r0, [sp, #36]	; 0x24
   14324:	str	r5, [fp, #-40]	; 0xffffffd8
   14328:	mov	r5, sl
   1432c:	str	r1, [r0]
   14330:	mov	r0, r4
   14334:	bl	1149c <readdir64@plt>
   14338:	cmp	r0, #0
   1433c:	beq	14674 <__assert_fail@plt+0x3118>
   14340:	ldr	r7, [fp, #-36]	; 0xffffffdc
   14344:	mov	sl, r0
   14348:	ldrb	r0, [r7, #48]	; 0x30
   1434c:	tst	r0, #32
   14350:	bne	14380 <__assert_fail@plt+0x2e24>
   14354:	ldrb	r0, [sl, #19]
   14358:	cmp	r0, #46	; 0x2e
   1435c:	bne	14380 <__assert_fail@plt+0x2e24>
   14360:	ldrb	r0, [sl, #20]
   14364:	cmp	r0, #0
   14368:	beq	145bc <__assert_fail@plt+0x3060>
   1436c:	cmp	r0, #46	; 0x2e
   14370:	bne	14380 <__assert_fail@plt+0x2e24>
   14374:	ldrb	r0, [sl, #21]
   14378:	cmp	r0, #0
   1437c:	beq	145bc <__assert_fail@plt+0x3060>
   14380:	add	r6, sl, #19
   14384:	str	r9, [sp, #44]	; 0x2c
   14388:	mov	r0, r6
   1438c:	bl	113d0 <strlen@plt>
   14390:	mov	r4, r0
   14394:	mov	r0, r7
   14398:	mov	r1, r6
   1439c:	mov	r2, r4
   143a0:	bl	1317c <__assert_fail@plt+0x1c20>
   143a4:	mov	r9, r0
   143a8:	cmp	r0, #0
   143ac:	beq	1462c <__assert_fail@plt+0x30d0>
   143b0:	ldr	r0, [fp, #-44]	; 0xffffffd4
   143b4:	cmp	r4, r0
   143b8:	bcs	143cc <__assert_fail@plt+0x2e70>
   143bc:	ldr	r2, [sp, #48]	; 0x30
   143c0:	ldr	r7, [fp, #-36]	; 0xffffffdc
   143c4:	add	r4, r4, r2
   143c8:	b	1442c <__assert_fail@plt+0x2ed0>
   143cc:	ldr	r7, [fp, #-36]	; 0xffffffdc
   143d0:	ldr	r0, [sp, #48]	; 0x30
   143d4:	ldr	r6, [r7, #24]
   143d8:	add	r4, r4, r0
   143dc:	mov	r0, r7
   143e0:	add	r1, r4, #1
   143e4:	bl	13108 <__assert_fail@plt+0x1bac>
   143e8:	cmp	r0, #0
   143ec:	beq	1462c <__assert_fail@plt+0x30d0>
   143f0:	ldr	r0, [r7, #24]
   143f4:	cmp	r6, r0
   143f8:	beq	14420 <__assert_fail@plt+0x2ec4>
   143fc:	ldrb	r1, [r7, #48]	; 0x30
   14400:	ldr	r2, [sp, #48]	; 0x30
   14404:	tst	r1, #4
   14408:	ldr	r1, [sp, #40]	; 0x28
   1440c:	addne	r1, r0, r2
   14410:	mov	r0, #1
   14414:	str	r1, [sp, #40]	; 0x28
   14418:	str	r0, [sp, #16]
   1441c:	b	14424 <__assert_fail@plt+0x2ec8>
   14420:	ldr	r2, [sp, #48]	; 0x30
   14424:	ldr	r0, [r7, #36]	; 0x24
   14428:	sub	r0, r0, r2
   1442c:	cmp	r4, r2
   14430:	bcc	146d0 <__assert_fail@plt+0x3174>
   14434:	ldr	r1, [sp, #28]
   14438:	str	r0, [fp, #-44]	; 0xffffffd4
   1443c:	add	r0, r9, #160	; 0xa0
   14440:	str	r1, [r9, #48]	; 0x30
   14444:	ldr	r1, [r7]
   14448:	str	r4, [r9, #40]	; 0x28
   1444c:	str	r1, [r9, #4]
   14450:	ldrd	r2, [sl]
   14454:	strd	r2, [r0]
   14458:	ldrb	r0, [r7, #48]	; 0x30
   1445c:	tst	r0, #4
   14460:	bne	14470 <__assert_fail@plt+0x2f14>
   14464:	add	r0, r9, #168	; 0xa8
   14468:	str	r0, [r9, #24]
   1446c:	b	14490 <__assert_fail@plt+0x2f34>
   14470:	ldr	r0, [r9, #28]
   14474:	ldr	r2, [r9, #52]	; 0x34
   14478:	add	r1, r9, #168	; 0xa8
   1447c:	str	r0, [r9, #24]
   14480:	ldr	r0, [sp, #40]	; 0x28
   14484:	add	r2, r2, #1
   14488:	bl	11280 <memmove@plt>
   1448c:	ldr	r7, [fp, #-36]	; 0xffffffdc
   14490:	ldr	r0, [r7, #44]	; 0x2c
   14494:	ldr	r2, [r7, #48]	; 0x30
   14498:	cmp	r0, #0
   1449c:	beq	144d0 <__assert_fail@plt+0x2f74>
   144a0:	ands	r0, r2, #1024	; 0x400
   144a4:	bne	144d0 <__assert_fail@plt+0x2f74>
   144a8:	mov	r0, r7
   144ac:	mov	r1, r9
   144b0:	mov	r2, #0
   144b4:	bl	131fc <__assert_fail@plt+0x1ca0>
   144b8:	mov	sl, r5
   144bc:	ldr	r7, [fp, #-36]	; 0xffffffdc
   144c0:	ldr	r5, [fp, #-40]	; 0xffffffd8
   144c4:	mov	r1, #0
   144c8:	strh	r0, [r9, #56]	; 0x38
   144cc:	b	14550 <__assert_fail@plt+0x2ff4>
   144d0:	ldrb	r3, [sl, #18]
   144d4:	mov	r0, #0
   144d8:	tst	r2, #8
   144dc:	mov	r1, #0
   144e0:	beq	14504 <__assert_fail@plt+0x2fa8>
   144e4:	orr	r1, r3, #4
   144e8:	cmp	r1, #4
   144ec:	mov	r1, #0
   144f0:	beq	14504 <__assert_fail@plt+0x2fa8>
   144f4:	eor	r1, r3, #10
   144f8:	and	r2, r2, #16
   144fc:	orrs	r1, r2, r1
   14500:	movwne	r1, #1
   14504:	mov	r6, #11
   14508:	mov	sl, r5
   1450c:	sub	r3, r3, #1
   14510:	ldr	r5, [fp, #-40]	; 0xffffffd8
   14514:	add	r2, r9, #112	; 0x70
   14518:	strh	r6, [r9, #56]	; 0x38
   1451c:	uxtb	r6, r3
   14520:	cmp	r6, #11
   14524:	bhi	14538 <__assert_fail@plt+0x2fdc>
   14528:	sxtb	r0, r3
   1452c:	movw	r3, #42920	; 0xa7a8
   14530:	movt	r3, #1
   14534:	ldr	r0, [r3, r0, lsl #2]
   14538:	cmp	r1, #0
   1453c:	str	r0, [r9, #80]	; 0x50
   14540:	mov	r0, #2
   14544:	mov	r1, #0
   14548:	movwne	r0, #1
   1454c:	strd	r0, [r2]
   14550:	cmp	r5, #0
   14554:	str	r1, [r9, #8]
   14558:	mov	r4, r9
   1455c:	ldrne	r0, [sp, #44]	; 0x2c
   14560:	movne	r4, r5
   14564:	strne	r9, [r0, #8]
   14568:	movw	r0, #10000	; 0x2710
   1456c:	cmp	r8, r0
   14570:	bne	145e8 <__assert_fail@plt+0x308c>
   14574:	ldr	r0, [sp, #24]
   14578:	ldr	r0, [r0]
   1457c:	cmp	r0, #0
   14580:	bne	145e8 <__assert_fail@plt+0x308c>
   14584:	ldr	r1, [fp, #-32]	; 0xffffffe0
   14588:	mov	r0, sl
   1458c:	bl	14cc0 <__assert_fail@plt+0x3764>
   14590:	mov	r1, #0
   14594:	str	r1, [sp, #20]
   14598:	movw	r1, #19778	; 0x4d42
   1459c:	movt	r1, #65363	; 0xff53
   145a0:	cmp	r0, r1
   145a4:	movwne	r1, #26985	; 0x6969
   145a8:	cmpne	r0, r1
   145ac:	bne	145cc <__assert_fail@plt+0x3070>
   145b0:	ldr	r7, [fp, #-36]	; 0xffffffdc
   145b4:	mov	r1, #0
   145b8:	b	145e8 <__assert_fail@plt+0x308c>
   145bc:	mov	sl, r5
   145c0:	ldr	r5, [fp, #-40]	; 0xffffffd8
   145c4:	mov	r1, #0
   145c8:	b	145fc <__assert_fail@plt+0x30a0>
   145cc:	movw	r1, #6548	; 0x1994
   145d0:	ldr	r7, [fp, #-36]	; 0xffffffdc
   145d4:	movt	r1, #258	; 0x102
   145d8:	cmp	r0, r1
   145dc:	mov	r1, #0
   145e0:	movne	r0, #1
   145e4:	strne	r0, [sp, #20]
   145e8:	ldr	r0, [sp, #32]
   145ec:	add	r8, r8, #1
   145f0:	cmp	r0, r8
   145f4:	bls	14718 <__assert_fail@plt+0x31bc>
   145f8:	mov	r5, r4
   145fc:	ldr	r4, [sl, #12]
   14600:	cmp	r4, #0
   14604:	bne	14320 <__assert_fail@plt+0x2dc4>
   14608:	ldr	r0, [sp, #16]
   1460c:	ldr	r4, [sp, #12]
   14610:	ldr	r9, [sp, #8]
   14614:	b	146c4 <__assert_fail@plt+0x3168>
   14618:	ldr	r4, [sp, #12]
   1461c:	mov	r8, #0
   14620:	mov	r0, #0
   14624:	str	r0, [sp, #20]
   14628:	b	147c0 <__assert_fail@plt+0x3264>
   1462c:	ldr	r6, [sp, #36]	; 0x24
   14630:	mov	r0, r9
   14634:	ldr	r4, [r6]
   14638:	bl	12db8 <__assert_fail@plt+0x185c>
   1463c:	ldr	r0, [fp, #-40]	; 0xffffffd8
   14640:	bl	134e8 <__assert_fail@plt+0x1f8c>
   14644:	ldr	r0, [r5, #12]
   14648:	mov	r8, r5
   1464c:	bl	11538 <closedir@plt>
   14650:	mov	r0, #7
   14654:	strh	r0, [r5, #56]	; 0x38
   14658:	mov	r5, #0
   1465c:	str	r5, [r8, #12]
   14660:	ldr	r0, [r7, #48]	; 0x30
   14664:	orr	r0, r0, #8192	; 0x2000
   14668:	str	r0, [r7, #48]	; 0x30
   1466c:	str	r4, [r6]
   14670:	b	148fc <__assert_fail@plt+0x33a0>
   14674:	ldr	r0, [sp, #36]	; 0x24
   14678:	ldr	r9, [sp, #8]
   1467c:	mov	sl, r5
   14680:	ldr	r0, [r0]
   14684:	cmp	r0, #0
   14688:	beq	146a0 <__assert_fail@plt+0x3144>
   1468c:	str	r0, [sl, #32]
   14690:	orrs	r0, r9, r8
   14694:	mov	r0, #4
   14698:	movwne	r0, #7
   1469c:	strh	r0, [sl, #56]	; 0x38
   146a0:	ldr	r0, [sl, #12]
   146a4:	ldr	r4, [sp, #12]
   146a8:	ldr	r5, [fp, #-40]	; 0xffffffd8
   146ac:	cmp	r0, #0
   146b0:	beq	146c0 <__assert_fail@plt+0x3164>
   146b4:	bl	11538 <closedir@plt>
   146b8:	mov	r0, #0
   146bc:	str	r0, [sl, #12]
   146c0:	ldr	r0, [sp, #16]
   146c4:	tst	r0, #1
   146c8:	ldr	r7, [fp, #-36]	; 0xffffffdc
   146cc:	b	1472c <__assert_fail@plt+0x31d0>
   146d0:	mov	r0, r9
   146d4:	bl	12db8 <__assert_fail@plt+0x185c>
   146d8:	ldr	r0, [fp, #-40]	; 0xffffffd8
   146dc:	bl	134e8 <__assert_fail@plt+0x1f8c>
   146e0:	ldr	r0, [r5, #12]
   146e4:	mov	r8, r5
   146e8:	bl	11538 <closedir@plt>
   146ec:	mov	r0, #7
   146f0:	ldr	r1, [sp, #36]	; 0x24
   146f4:	strh	r0, [r5, #56]	; 0x38
   146f8:	mov	r5, #0
   146fc:	str	r5, [r8, #12]
   14700:	ldr	r0, [r7, #48]	; 0x30
   14704:	orr	r0, r0, #8192	; 0x2000
   14708:	str	r0, [r7, #48]	; 0x30
   1470c:	mov	r0, #36	; 0x24
   14710:	str	r0, [r1]
   14714:	b	148fc <__assert_fail@plt+0x33a0>
   14718:	ldr	r0, [sp, #16]
   1471c:	mov	r5, r4
   14720:	ldr	r4, [sp, #12]
   14724:	ldr	r9, [sp, #8]
   14728:	tst	r0, #1
   1472c:	ldr	ip, [sp, #4]
   14730:	beq	147c0 <__assert_fail@plt+0x3264>
   14734:	ldr	r1, [r7, #4]
   14738:	ldr	r0, [r7, #24]
   1473c:	cmp	r1, #0
   14740:	beq	14770 <__assert_fail@plt+0x3214>
   14744:	ldr	r2, [r1, #24]
   14748:	add	r3, r1, #168	; 0xa8
   1474c:	cmp	r2, r3
   14750:	beq	14764 <__assert_fail@plt+0x3208>
   14754:	ldr	r3, [r1, #28]
   14758:	sub	r2, r2, r3
   1475c:	add	r2, r0, r2
   14760:	str	r2, [r1, #24]
   14764:	str	r0, [r1, #28]
   14768:	ldr	r1, [r1, #8]
   1476c:	b	1473c <__assert_fail@plt+0x31e0>
   14770:	ldr	r1, [r5, #48]	; 0x30
   14774:	cmp	r1, #0
   14778:	bmi	147c0 <__assert_fail@plt+0x3264>
   1477c:	mov	r1, r5
   14780:	ldr	r2, [r1, #24]
   14784:	add	r3, r1, #168	; 0xa8
   14788:	cmp	r2, r3
   1478c:	beq	147a0 <__assert_fail@plt+0x3244>
   14790:	ldr	r3, [r1, #28]
   14794:	sub	r2, r2, r3
   14798:	add	r2, r0, r2
   1479c:	str	r2, [r1, #24]
   147a0:	str	r0, [r1, #28]
   147a4:	ldr	r2, [r1, #8]
   147a8:	cmp	r2, #0
   147ac:	ldreq	r2, [r1, #4]
   147b0:	ldr	r1, [r2, #48]	; 0x30
   147b4:	cmn	r1, #1
   147b8:	mov	r1, r2
   147bc:	bgt	14780 <__assert_fail@plt+0x3224>
   147c0:	ldrb	r0, [r7, #48]	; 0x30
   147c4:	tst	r0, #4
   147c8:	beq	147f4 <__assert_fail@plt+0x3298>
   147cc:	ldr	r2, [sp, #40]	; 0x28
   147d0:	ldr	r0, [r7, #36]	; 0x24
   147d4:	ldr	r3, [sp, #48]	; 0x30
   147d8:	cmp	r3, r0
   147dc:	sub	r1, r2, #1
   147e0:	mov	r0, #0
   147e4:	moveq	r2, r1
   147e8:	cmp	r8, #0
   147ec:	moveq	r2, r1
   147f0:	strb	r0, [r2]
   147f4:	cmp	r9, #0
   147f8:	movwne	r9, #1
   147fc:	orrs	r0, r9, ip
   14800:	beq	1482c <__assert_fail@plt+0x32d0>
   14804:	cmp	r8, #0
   14808:	bne	14860 <__assert_fail@plt+0x3304>
   1480c:	cmp	r4, #3
   14810:	bne	148f0 <__assert_fail@plt+0x3394>
   14814:	ldrh	r0, [sl, #56]	; 0x38
   14818:	cmp	r0, #4
   1481c:	cmpne	r0, #7
   14820:	movne	r0, #6
   14824:	strhne	r0, [sl, #56]	; 0x38
   14828:	b	148f0 <__assert_fail@plt+0x3394>
   1482c:	cmp	r4, #1
   14830:	cmpne	r8, #0
   14834:	bne	14860 <__assert_fail@plt+0x3304>
   14838:	ldr	r0, [sl, #48]	; 0x30
   1483c:	cmp	r0, #0
   14840:	beq	148c8 <__assert_fail@plt+0x336c>
   14844:	ldr	r1, [sl, #4]
   14848:	movw	r3, #42916	; 0xa7a4
   1484c:	mov	r0, r7
   14850:	mvn	r2, #0
   14854:	movt	r3, #1
   14858:	bl	13d98 <__assert_fail@plt+0x283c>
   1485c:	b	148d0 <__assert_fail@plt+0x3374>
   14860:	ldr	r0, [sp, #20]
   14864:	tst	r0, #1
   14868:	beq	14898 <__assert_fail@plt+0x333c>
   1486c:	movw	r0, #19592	; 0x4c88
   14870:	mov	r1, r5
   14874:	mov	r2, r8
   14878:	movt	r0, #1
   1487c:	str	r0, [r7, #44]	; 0x2c
   14880:	mov	r0, r7
   14884:	bl	13338 <__assert_fail@plt+0x1ddc>
   14888:	mov	r5, r0
   1488c:	mov	r0, #0
   14890:	str	r0, [r7, #44]	; 0x2c
   14894:	b	148fc <__assert_fail@plt+0x33a0>
   14898:	cmp	r8, #2
   1489c:	bcc	148fc <__assert_fail@plt+0x33a0>
   148a0:	ldr	r0, [sp, #24]
   148a4:	ldr	r0, [r0]
   148a8:	cmp	r0, #0
   148ac:	beq	148fc <__assert_fail@plt+0x33a0>
   148b0:	mov	r0, r7
   148b4:	mov	r1, r5
   148b8:	mov	r2, r8
   148bc:	bl	13338 <__assert_fail@plt+0x1ddc>
   148c0:	mov	r5, r0
   148c4:	b	148fc <__assert_fail@plt+0x33a0>
   148c8:	mov	r0, r7
   148cc:	bl	14908 <__assert_fail@plt+0x33ac>
   148d0:	ldr	r7, [fp, #-36]	; 0xffffffdc
   148d4:	cmp	r0, #0
   148d8:	beq	14804 <__assert_fail@plt+0x32a8>
   148dc:	mov	r0, #7
   148e0:	strh	r0, [sl, #56]	; 0x38
   148e4:	ldr	r0, [r7, #48]	; 0x30
   148e8:	orr	r0, r0, #8192	; 0x2000
   148ec:	str	r0, [r7, #48]	; 0x30
   148f0:	mov	r0, r5
   148f4:	bl	134e8 <__assert_fail@plt+0x1f8c>
   148f8:	mov	r5, #0
   148fc:	mov	r0, r5
   14900:	sub	sp, fp, #28
   14904:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14908:	push	{r4, r5, fp, lr}
   1490c:	add	fp, sp, #8
   14910:	mov	r4, r0
   14914:	ldr	r0, [r0, #48]	; 0x30
   14918:	mov	r5, #0
   1491c:	tst	r0, #4
   14920:	bne	14954 <__assert_fail@plt+0x33f8>
   14924:	tst	r0, #512	; 0x200
   14928:	bne	14944 <__assert_fail@plt+0x33e8>
   1492c:	ldr	r0, [r4, #28]
   14930:	bl	114c0 <fchdir@plt>
   14934:	cmp	r0, #0
   14938:	mov	r5, r0
   1493c:	movwne	r5, #1
   14940:	b	14954 <__assert_fail@plt+0x33f8>
   14944:	mov	r0, r4
   14948:	mvn	r1, #99	; 0x63
   1494c:	mov	r2, #1
   14950:	bl	14a20 <__assert_fail@plt+0x34c4>
   14954:	add	r0, r4, #60	; 0x3c
   14958:	bl	13650 <__assert_fail@plt+0x20f4>
   1495c:	mov	r0, r5
   14960:	pop	{r4, r5, fp, pc}
   14964:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   14968:	add	fp, sp, #24
   1496c:	mov	r6, r0
   14970:	ldrh	r0, [r0, #48]	; 0x30
   14974:	mov	r4, r1
   14978:	add	r5, r1, #64	; 0x40
   1497c:	movw	r1, #258	; 0x102
   14980:	tst	r0, r1
   14984:	beq	149f8 <__assert_fail@plt+0x349c>
   14988:	mov	r0, #24
   1498c:	bl	18d10 <__assert_fail@plt+0x77b4>
   14990:	mov	r8, #0
   14994:	cmp	r0, #0
   14998:	beq	14a18 <__assert_fail@plt+0x34bc>
   1499c:	ldrd	r2, [r5]
   149a0:	mov	r7, r0
   149a4:	add	r0, r4, #160	; 0xa0
   149a8:	stm	r7, {r2, r3}
   149ac:	add	r2, r7, #8
   149b0:	ldrd	r0, [r0]
   149b4:	stm	r2, {r0, r1, r4}
   149b8:	mov	r1, r7
   149bc:	ldr	r0, [r6, #56]	; 0x38
   149c0:	bl	15c28 <__assert_fail@plt+0x46cc>
   149c4:	cmp	r0, r7
   149c8:	beq	149f0 <__assert_fail@plt+0x3494>
   149cc:	mov	r5, r0
   149d0:	mov	r0, r7
   149d4:	bl	12db8 <__assert_fail@plt+0x185c>
   149d8:	cmp	r5, #0
   149dc:	beq	14a18 <__assert_fail@plt+0x34bc>
   149e0:	ldr	r0, [r5, #16]
   149e4:	mov	r1, #2
   149e8:	strh	r1, [r4, #56]	; 0x38
   149ec:	str	r0, [r4]
   149f0:	mov	r8, #1
   149f4:	b	14a18 <__assert_fail@plt+0x34bc>
   149f8:	ldr	r0, [r6, #56]	; 0x38
   149fc:	mov	r1, r5
   14a00:	bl	18e2c <__assert_fail@plt+0x78d0>
   14a04:	cmp	r0, #0
   14a08:	mov	r8, #1
   14a0c:	movne	r0, #2
   14a10:	strhne	r0, [r4, #56]	; 0x38
   14a14:	strne	r4, [r4]
   14a18:	mov	r0, r8
   14a1c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14a20:	push	{r4, r5, fp, lr}
   14a24:	add	fp, sp, #8
   14a28:	mov	r4, r1
   14a2c:	ldr	r1, [r0, #32]
   14a30:	mov	r5, r0
   14a34:	cmp	r1, r4
   14a38:	bne	14a44 <__assert_fail@plt+0x34e8>
   14a3c:	cmn	r1, #100	; 0x64
   14a40:	bne	14a84 <__assert_fail@plt+0x3528>
   14a44:	cmp	r2, #0
   14a48:	beq	14a60 <__assert_fail@plt+0x3504>
   14a4c:	add	r0, r5, #60	; 0x3c
   14a50:	bl	15da8 <__assert_fail@plt+0x484c>
   14a54:	cmp	r0, #0
   14a58:	bpl	14a78 <__assert_fail@plt+0x351c>
   14a5c:	b	14a7c <__assert_fail@plt+0x3520>
   14a60:	cmp	r1, #0
   14a64:	bmi	14a7c <__assert_fail@plt+0x3520>
   14a68:	ldr	r0, [r5, #48]	; 0x30
   14a6c:	ands	r0, r0, #4
   14a70:	bne	14a7c <__assert_fail@plt+0x3520>
   14a74:	mov	r0, r1
   14a78:	bl	11520 <close@plt>
   14a7c:	str	r4, [r5, #32]
   14a80:	pop	{r4, r5, fp, pc}
   14a84:	bl	11514 <abort@plt>
   14a88:	push	{fp, lr}
   14a8c:	mov	fp, sp
   14a90:	cmp	r2, #5
   14a94:	bcc	14aac <__assert_fail@plt+0x3550>
   14a98:	bl	11400 <__errno_location@plt>
   14a9c:	mov	r1, #22
   14aa0:	str	r1, [r0]
   14aa4:	mov	r0, #1
   14aa8:	pop	{fp, pc}
   14aac:	mov	r0, #0
   14ab0:	strh	r2, [r1, #60]	; 0x3c
   14ab4:	pop	{fp, pc}
   14ab8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14abc:	add	fp, sp, #28
   14ac0:	sub	sp, sp, #4
   14ac4:	mov	r5, r0
   14ac8:	mvn	r0, #4096	; 0x1000
   14acc:	tst	r1, r0
   14ad0:	beq	14ae8 <__assert_fail@plt+0x358c>
   14ad4:	bl	11400 <__errno_location@plt>
   14ad8:	mov	r1, #22
   14adc:	mov	r4, #0
   14ae0:	str	r1, [r0]
   14ae4:	b	14be4 <__assert_fail@plt+0x3688>
   14ae8:	ldr	r6, [r5]
   14aec:	mov	r7, r1
   14af0:	bl	11400 <__errno_location@plt>
   14af4:	mov	r4, #0
   14af8:	mov	sl, r0
   14afc:	str	r4, [r0]
   14b00:	ldrb	r0, [r5, #49]	; 0x31
   14b04:	tst	r0, #32
   14b08:	bne	14be4 <__assert_fail@plt+0x3688>
   14b0c:	ldrh	r0, [r6, #56]	; 0x38
   14b10:	cmp	r0, #1
   14b14:	beq	14b24 <__assert_fail@plt+0x35c8>
   14b18:	cmp	r0, #9
   14b1c:	ldreq	r4, [r6, #8]
   14b20:	b	14be4 <__assert_fail@plt+0x3688>
   14b24:	ldr	r0, [r5, #4]
   14b28:	cmp	r0, #0
   14b2c:	blne	134e8 <__assert_fail@plt+0x1f8c>
   14b30:	mov	r9, #1
   14b34:	cmp	r7, #4096	; 0x1000
   14b38:	bne	14b4c <__assert_fail@plt+0x35f0>
   14b3c:	ldr	r0, [r5, #48]	; 0x30
   14b40:	mov	r9, #2
   14b44:	orr	r0, r0, #4096	; 0x1000
   14b48:	str	r0, [r5, #48]	; 0x30
   14b4c:	ldr	r0, [r6, #48]	; 0x30
   14b50:	cmp	r0, #0
   14b54:	bne	14bd0 <__assert_fail@plt+0x3674>
   14b58:	ldr	r0, [r6, #24]
   14b5c:	ldrb	r0, [r0]
   14b60:	cmp	r0, #47	; 0x2f
   14b64:	beq	14bd0 <__assert_fail@plt+0x3674>
   14b68:	ldrb	r0, [r5, #48]	; 0x30
   14b6c:	tst	r0, #4
   14b70:	bne	14bd0 <__assert_fail@plt+0x3674>
   14b74:	movw	r1, #42917	; 0xa7a5
   14b78:	mov	r0, r5
   14b7c:	movt	r1, #1
   14b80:	bl	134b8 <__assert_fail@plt+0x1f5c>
   14b84:	cmn	r0, #1
   14b88:	ble	14bf0 <__assert_fail@plt+0x3694>
   14b8c:	mov	r8, r0
   14b90:	mov	r0, r5
   14b94:	mov	r1, r9
   14b98:	bl	13f78 <__assert_fail@plt+0x2a1c>
   14b9c:	str	r0, [r5, #4]
   14ba0:	ldrb	r0, [r5, #49]	; 0x31
   14ba4:	tst	r0, #2
   14ba8:	bne	14bfc <__assert_fail@plt+0x36a0>
   14bac:	mov	r0, r8
   14bb0:	bl	114c0 <fchdir@plt>
   14bb4:	cmp	r0, #0
   14bb8:	beq	14c10 <__assert_fail@plt+0x36b4>
   14bbc:	ldr	r5, [sl]
   14bc0:	mov	r0, r8
   14bc4:	bl	11520 <close@plt>
   14bc8:	str	r5, [sl]
   14bcc:	b	14be4 <__assert_fail@plt+0x3688>
   14bd0:	mov	r0, r5
   14bd4:	mov	r1, r9
   14bd8:	bl	13f78 <__assert_fail@plt+0x2a1c>
   14bdc:	mov	r4, r0
   14be0:	str	r0, [r5, #4]
   14be4:	mov	r0, r4
   14be8:	sub	sp, fp, #28
   14bec:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14bf0:	mov	r4, #0
   14bf4:	str	r4, [r5, #4]
   14bf8:	b	14be4 <__assert_fail@plt+0x3688>
   14bfc:	mov	r0, r5
   14c00:	mov	r1, r8
   14c04:	mov	r2, #1
   14c08:	bl	14a20 <__assert_fail@plt+0x34c4>
   14c0c:	b	14c18 <__assert_fail@plt+0x36bc>
   14c10:	mov	r0, r8
   14c14:	bl	11520 <close@plt>
   14c18:	ldr	r4, [r5, #4]
   14c1c:	b	14be4 <__assert_fail@plt+0x3688>
   14c20:	push	{fp, lr}
   14c24:	mov	fp, sp
   14c28:	mov	r2, r1
   14c2c:	ldrd	r0, [r0, #8]
   14c30:	mov	r3, #0
   14c34:	bl	19490 <__assert_fail@plt+0x7f34>
   14c38:	mov	r0, r2
   14c3c:	pop	{fp, pc}
   14c40:	push	{r4, r5, fp, lr}
   14c44:	add	fp, sp, #8
   14c48:	ldrd	r2, [r1, #8]
   14c4c:	ldrd	r4, [r0, #8]
   14c50:	eor	r3, r5, r3
   14c54:	eor	r2, r4, r2
   14c58:	orrs	r2, r2, r3
   14c5c:	mov	r2, #0
   14c60:	bne	14c80 <__assert_fail@plt+0x3724>
   14c64:	ldrd	r2, [r1]
   14c68:	ldrd	r0, [r0]
   14c6c:	eor	r1, r1, r3
   14c70:	eor	r0, r0, r2
   14c74:	orr	r0, r0, r1
   14c78:	clz	r0, r0
   14c7c:	lsr	r2, r0, #5
   14c80:	mov	r0, r2
   14c84:	pop	{r4, r5, fp, pc}
   14c88:	push	{r4, r5, fp, lr}
   14c8c:	add	fp, sp, #8
   14c90:	ldr	r0, [r0]
   14c94:	ldrd	r2, [r0, #160]	; 0xa0
   14c98:	ldr	r0, [r1]
   14c9c:	ldrd	r4, [r0, #160]	; 0xa0
   14ca0:	mov	r0, #0
   14ca4:	subs	r1, r4, r2
   14ca8:	sbcs	r1, r5, r3
   14cac:	movwcc	r0, #1
   14cb0:	subs	r1, r2, r4
   14cb4:	sbcs	r1, r3, r5
   14cb8:	subcc	r0, r0, #1
   14cbc:	pop	{r4, r5, fp, pc}
   14cc0:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   14cc4:	add	fp, sp, #24
   14cc8:	sub	sp, sp, #96	; 0x60
   14ccc:	ldr	r7, [r0, #44]	; 0x2c
   14cd0:	mov	r4, r0
   14cd4:	mov	r5, #0
   14cd8:	ldrb	r0, [r7, #49]	; 0x31
   14cdc:	tst	r0, #2
   14ce0:	beq	14dd4 <__assert_fail@plt+0x3878>
   14ce4:	ldr	r6, [r7, #52]	; 0x34
   14ce8:	mov	r9, r1
   14cec:	cmp	r6, #0
   14cf0:	bne	14d30 <__assert_fail@plt+0x37d4>
   14cf4:	movw	r0, #11704	; 0x2db8
   14cf8:	movw	r2, #19936	; 0x4de0
   14cfc:	movw	r3, #19968	; 0x4e00
   14d00:	mov	r1, #0
   14d04:	mov	r8, #0
   14d08:	movt	r0, #1
   14d0c:	movt	r2, #1
   14d10:	movt	r3, #1
   14d14:	str	r0, [sp]
   14d18:	mov	r0, #13
   14d1c:	bl	152ac <__assert_fail@plt+0x3d50>
   14d20:	mov	r6, r0
   14d24:	cmp	r0, #0
   14d28:	str	r0, [r7, #52]	; 0x34
   14d2c:	beq	14d60 <__assert_fail@plt+0x3804>
   14d30:	ldrd	r0, [r4, #64]	; 0x40
   14d34:	str	r1, [sp, #12]
   14d38:	str	r0, [sp, #8]
   14d3c:	add	r1, sp, #8
   14d40:	mov	r0, r6
   14d44:	bl	14ff8 <__assert_fail@plt+0x3a9c>
   14d48:	cmp	r0, #0
   14d4c:	beq	14d58 <__assert_fail@plt+0x37fc>
   14d50:	ldr	r5, [r0, #8]
   14d54:	b	14dd4 <__assert_fail@plt+0x3878>
   14d58:	mov	r8, #1
   14d5c:	b	14d64 <__assert_fail@plt+0x3808>
   14d60:	mov	r6, #0
   14d64:	cmp	r9, #0
   14d68:	bmi	14dd4 <__assert_fail@plt+0x3878>
   14d6c:	add	r1, sp, #8
   14d70:	mov	r0, r9
   14d74:	bl	11214 <fstatfs64@plt>
   14d78:	cmp	r0, #0
   14d7c:	bne	14dd4 <__assert_fail@plt+0x3878>
   14d80:	cmp	r8, #0
   14d84:	beq	14dd0 <__assert_fail@plt+0x3874>
   14d88:	mov	r0, #16
   14d8c:	bl	18d10 <__assert_fail@plt+0x77b4>
   14d90:	cmp	r0, #0
   14d94:	beq	14dd0 <__assert_fail@plt+0x3874>
   14d98:	mov	r5, r0
   14d9c:	ldrd	r0, [r4, #64]	; 0x40
   14da0:	ldr	r2, [sp, #8]
   14da4:	stm	r5, {r0, r1, r2}
   14da8:	mov	r0, r6
   14dac:	mov	r1, r5
   14db0:	bl	15c28 <__assert_fail@plt+0x46cc>
   14db4:	cmp	r0, #0
   14db8:	beq	14dc8 <__assert_fail@plt+0x386c>
   14dbc:	cmp	r0, r5
   14dc0:	beq	14dd0 <__assert_fail@plt+0x3874>
   14dc4:	bl	11514 <abort@plt>
   14dc8:	mov	r0, r5
   14dcc:	bl	12db8 <__assert_fail@plt+0x185c>
   14dd0:	ldr	r5, [sp, #8]
   14dd4:	mov	r0, r5
   14dd8:	sub	sp, fp, #24
   14ddc:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   14de0:	push	{fp, lr}
   14de4:	mov	fp, sp
   14de8:	mov	r2, r1
   14dec:	ldrd	r0, [r0]
   14df0:	mov	r3, #0
   14df4:	bl	19490 <__assert_fail@plt+0x7f34>
   14df8:	mov	r0, r2
   14dfc:	pop	{fp, pc}
   14e00:	ldrd	r2, [r1]
   14e04:	ldrd	r0, [r0]
   14e08:	eor	r1, r1, r3
   14e0c:	eor	r0, r0, r2
   14e10:	orr	r0, r0, r1
   14e14:	clz	r0, r0
   14e18:	lsr	r0, r0, #5
   14e1c:	bx	lr
   14e20:	ldr	r0, [r0, #8]
   14e24:	bx	lr
   14e28:	ldr	r0, [r0, #12]
   14e2c:	bx	lr
   14e30:	ldr	r0, [r0, #16]
   14e34:	bx	lr
   14e38:	ldm	r0, {r2, ip}
   14e3c:	mov	r0, #0
   14e40:	cmp	r2, ip
   14e44:	bxcs	lr
   14e48:	mov	r0, #0
   14e4c:	ldr	r1, [r2]
   14e50:	cmp	r1, #0
   14e54:	beq	14e78 <__assert_fail@plt+0x391c>
   14e58:	mov	r3, #0
   14e5c:	mov	r1, r2
   14e60:	ldr	r1, [r1, #4]
   14e64:	add	r3, r3, #1
   14e68:	cmp	r1, #0
   14e6c:	bne	14e60 <__assert_fail@plt+0x3904>
   14e70:	cmp	r3, r0
   14e74:	movhi	r0, r3
   14e78:	add	r2, r2, #8
   14e7c:	cmp	r2, ip
   14e80:	bcc	14e4c <__assert_fail@plt+0x38f0>
   14e84:	bx	lr
   14e88:	push	{fp, lr}
   14e8c:	mov	fp, sp
   14e90:	ldm	r0, {r3, ip}
   14e94:	mov	lr, #0
   14e98:	mov	r1, #0
   14e9c:	cmp	r3, ip
   14ea0:	bcs	14edc <__assert_fail@plt+0x3980>
   14ea4:	mov	r1, #0
   14ea8:	mov	lr, #0
   14eac:	ldr	r2, [r3]
   14eb0:	cmp	r2, #0
   14eb4:	beq	14ed0 <__assert_fail@plt+0x3974>
   14eb8:	mov	r2, r3
   14ebc:	ldr	r2, [r2, #4]
   14ec0:	add	r1, r1, #1
   14ec4:	cmp	r2, #0
   14ec8:	bne	14ebc <__assert_fail@plt+0x3960>
   14ecc:	add	lr, lr, #1
   14ed0:	add	r3, r3, #8
   14ed4:	cmp	r3, ip
   14ed8:	bcc	14eac <__assert_fail@plt+0x3950>
   14edc:	ldr	r2, [r0, #12]
   14ee0:	cmp	lr, r2
   14ee4:	bne	14efc <__assert_fail@plt+0x39a0>
   14ee8:	ldr	r2, [r0, #16]
   14eec:	mov	r0, #1
   14ef0:	cmp	r1, r2
   14ef4:	movne	r0, #0
   14ef8:	pop	{fp, pc}
   14efc:	mov	r0, #0
   14f00:	pop	{fp, pc}
   14f04:	nop	{0}
   14f08:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   14f0c:	add	fp, sp, #24
   14f10:	sub	sp, sp, #8
   14f14:	ldr	r6, [r0]
   14f18:	ldmib	r0, {r2, r7, r8}
   14f1c:	ldr	r3, [r0, #16]
   14f20:	mov	r4, r1
   14f24:	mov	r5, #0
   14f28:	cmp	r6, r2
   14f2c:	bcs	14f6c <__assert_fail@plt+0x3a10>
   14f30:	mov	r5, #0
   14f34:	ldr	r0, [r6]
   14f38:	cmp	r0, #0
   14f3c:	beq	14f60 <__assert_fail@plt+0x3a04>
   14f40:	mov	r0, #0
   14f44:	mov	r1, r6
   14f48:	ldr	r1, [r1, #4]
   14f4c:	add	r0, r0, #1
   14f50:	cmp	r1, #0
   14f54:	bne	14f48 <__assert_fail@plt+0x39ec>
   14f58:	cmp	r0, r5
   14f5c:	movhi	r5, r0
   14f60:	add	r6, r6, #8
   14f64:	cmp	r6, r2
   14f68:	bcc	14f34 <__assert_fail@plt+0x39d8>
   14f6c:	movw	r2, #42968	; 0xa7d8
   14f70:	mov	r0, r4
   14f74:	mov	r1, #1
   14f78:	movt	r2, #1
   14f7c:	bl	1143c <__fprintf_chk@plt>
   14f80:	movw	r2, #42992	; 0xa7f0
   14f84:	mov	r0, r4
   14f88:	mov	r1, #1
   14f8c:	mov	r3, r7
   14f90:	movt	r2, #1
   14f94:	bl	1143c <__fprintf_chk@plt>
   14f98:	vmov	s0, r8
   14f9c:	vldr	d16, [pc, #76]	; 14ff0 <__assert_fail@plt+0x3a94>
   14fa0:	movw	r2, #43016	; 0xa808
   14fa4:	mov	r0, r4
   14fa8:	mov	r1, #1
   14fac:	mov	r3, r8
   14fb0:	movt	r2, #1
   14fb4:	vcvt.f64.u32	d17, s0
   14fb8:	vmov	s0, r7
   14fbc:	vcvt.f64.u32	d18, s0
   14fc0:	vmul.f64	d16, d17, d16
   14fc4:	vdiv.f64	d16, d16, d18
   14fc8:	vstr	d16, [sp]
   14fcc:	bl	1143c <__fprintf_chk@plt>
   14fd0:	movw	r2, #43049	; 0xa829
   14fd4:	mov	r0, r4
   14fd8:	mov	r1, #1
   14fdc:	mov	r3, r5
   14fe0:	movt	r2, #1
   14fe4:	sub	sp, fp, #24
   14fe8:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   14fec:	b	1143c <__fprintf_chk@plt>
   14ff0:	andeq	r0, r0, r0
   14ff4:	subsmi	r0, r9, r0
   14ff8:	push	{r4, r5, r6, r7, fp, lr}
   14ffc:	add	fp, sp, #16
   15000:	mov	r4, r1
   15004:	ldr	r1, [r0, #8]
   15008:	ldr	r2, [r0, #24]
   1500c:	mov	r5, r0
   15010:	mov	r0, r4
   15014:	blx	r2
   15018:	ldr	r1, [r5, #8]
   1501c:	cmp	r0, r1
   15020:	bcs	15080 <__assert_fail@plt+0x3b24>
   15024:	ldr	r7, [r5]
   15028:	mov	r6, #0
   1502c:	ldr	r1, [r7, r0, lsl #3]!
   15030:	cmp	r1, #0
   15034:	cmpne	r7, #0
   15038:	bne	15068 <__assert_fail@plt+0x3b0c>
   1503c:	mov	r0, r6
   15040:	pop	{r4, r5, r6, r7, fp, pc}
   15044:	ldr	r2, [r5, #28]
   15048:	mov	r0, r4
   1504c:	blx	r2
   15050:	cmp	r0, #0
   15054:	bne	15078 <__assert_fail@plt+0x3b1c>
   15058:	ldr	r7, [r7, #4]
   1505c:	cmp	r7, #0
   15060:	beq	1503c <__assert_fail@plt+0x3ae0>
   15064:	ldr	r1, [r7]
   15068:	cmp	r1, r4
   1506c:	bne	15044 <__assert_fail@plt+0x3ae8>
   15070:	mov	r6, r4
   15074:	b	1503c <__assert_fail@plt+0x3ae0>
   15078:	ldr	r6, [r7]
   1507c:	b	1503c <__assert_fail@plt+0x3ae0>
   15080:	bl	11514 <abort@plt>
   15084:	push	{fp, lr}
   15088:	mov	fp, sp
   1508c:	ldr	r1, [r0, #16]
   15090:	cmp	r1, #0
   15094:	beq	150b4 <__assert_fail@plt+0x3b58>
   15098:	ldm	r0, {r1, r2}
   1509c:	cmp	r1, r2
   150a0:	bcs	150bc <__assert_fail@plt+0x3b60>
   150a4:	ldr	r0, [r1], #8
   150a8:	cmp	r0, #0
   150ac:	beq	1509c <__assert_fail@plt+0x3b40>
   150b0:	pop	{fp, pc}
   150b4:	mov	r0, #0
   150b8:	pop	{fp, pc}
   150bc:	bl	11514 <abort@plt>
   150c0:	push	{r4, r5, fp, lr}
   150c4:	add	fp, sp, #8
   150c8:	mov	r5, r1
   150cc:	ldr	r1, [r0, #8]
   150d0:	ldr	r2, [r0, #24]
   150d4:	mov	r4, r0
   150d8:	mov	r0, r5
   150dc:	blx	r2
   150e0:	ldr	r1, [r4, #8]
   150e4:	cmp	r0, r1
   150e8:	bcs	1514c <__assert_fail@plt+0x3bf0>
   150ec:	ldr	r1, [r4]
   150f0:	add	r2, r1, r0, lsl #3
   150f4:	ldr	r3, [r2]
   150f8:	ldr	r2, [r2, #4]
   150fc:	cmp	r3, r5
   15100:	beq	15110 <__assert_fail@plt+0x3bb4>
   15104:	cmp	r2, #0
   15108:	bne	150f4 <__assert_fail@plt+0x3b98>
   1510c:	b	15120 <__assert_fail@plt+0x3bc4>
   15110:	cmp	r2, #0
   15114:	beq	15120 <__assert_fail@plt+0x3bc4>
   15118:	ldr	r0, [r2]
   1511c:	pop	{r4, r5, fp, pc}
   15120:	ldr	r2, [r4, #4]
   15124:	add	r0, r1, r0, lsl #3
   15128:	add	r1, r0, #8
   1512c:	cmp	r1, r2
   15130:	bcs	15144 <__assert_fail@plt+0x3be8>
   15134:	ldr	r0, [r1], #8
   15138:	cmp	r0, #0
   1513c:	beq	1512c <__assert_fail@plt+0x3bd0>
   15140:	pop	{r4, r5, fp, pc}
   15144:	mov	r0, #0
   15148:	pop	{r4, r5, fp, pc}
   1514c:	bl	11514 <abort@plt>
   15150:	push	{r4, r5, fp, lr}
   15154:	add	fp, sp, #8
   15158:	ldm	r0, {r5, lr}
   1515c:	mov	ip, r0
   15160:	mov	r0, #0
   15164:	cmp	r5, lr
   15168:	popcs	{r4, r5, fp, pc}
   1516c:	mov	r0, #0
   15170:	ldr	r3, [r5]
   15174:	cmp	r3, #0
   15178:	cmpne	r5, #0
   1517c:	bne	15190 <__assert_fail@plt+0x3c34>
   15180:	add	r5, r5, #8
   15184:	cmp	r5, lr
   15188:	bcc	15170 <__assert_fail@plt+0x3c14>
   1518c:	b	151bc <__assert_fail@plt+0x3c60>
   15190:	mov	r3, r5
   15194:	cmp	r0, r2
   15198:	bcs	151bc <__assert_fail@plt+0x3c60>
   1519c:	ldr	r4, [r3]
   151a0:	str	r4, [r1, r0, lsl #2]
   151a4:	add	r0, r0, #1
   151a8:	ldr	r3, [r3, #4]
   151ac:	cmp	r3, #0
   151b0:	bne	15194 <__assert_fail@plt+0x3c38>
   151b4:	ldr	lr, [ip, #4]
   151b8:	b	15180 <__assert_fail@plt+0x3c24>
   151bc:	pop	{r4, r5, fp, pc}
   151c0:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   151c4:	add	fp, sp, #24
   151c8:	mov	r5, r1
   151cc:	ldr	r4, [r0]
   151d0:	ldr	r1, [r0, #4]
   151d4:	mov	r6, #0
   151d8:	cmp	r4, r1
   151dc:	bcs	15250 <__assert_fail@plt+0x3cf4>
   151e0:	mov	r9, r2
   151e4:	mov	r8, r0
   151e8:	mov	r6, #0
   151ec:	ldr	r0, [r4]
   151f0:	cmp	r0, #0
   151f4:	cmpne	r4, #0
   151f8:	bne	1520c <__assert_fail@plt+0x3cb0>
   151fc:	add	r4, r4, #8
   15200:	cmp	r4, r1
   15204:	bcc	151ec <__assert_fail@plt+0x3c90>
   15208:	b	15250 <__assert_fail@plt+0x3cf4>
   1520c:	mov	r1, r9
   15210:	blx	r5
   15214:	cmp	r0, #0
   15218:	beq	15250 <__assert_fail@plt+0x3cf4>
   1521c:	mov	r7, r4
   15220:	ldr	r7, [r7, #4]
   15224:	add	r6, r6, #1
   15228:	cmp	r7, #0
   1522c:	beq	15248 <__assert_fail@plt+0x3cec>
   15230:	ldr	r0, [r7]
   15234:	mov	r1, r9
   15238:	blx	r5
   1523c:	cmp	r0, #0
   15240:	bne	15220 <__assert_fail@plt+0x3cc4>
   15244:	b	15250 <__assert_fail@plt+0x3cf4>
   15248:	ldr	r1, [r8, #4]
   1524c:	b	151fc <__assert_fail@plt+0x3ca0>
   15250:	mov	r0, r6
   15254:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   15258:	ldrb	r2, [r0]
   1525c:	cmp	r2, #0
   15260:	moveq	r0, #0
   15264:	bxeq	lr
   15268:	add	r3, r0, #1
   1526c:	mov	r0, #0
   15270:	rsb	r0, r0, r0, lsl #5
   15274:	uxtab	r0, r0, r2
   15278:	udiv	r2, r0, r1
   1527c:	mls	r0, r2, r1, r0
   15280:	ldrb	r2, [r3], #1
   15284:	cmp	r2, #0
   15288:	bne	15270 <__assert_fail@plt+0x3d14>
   1528c:	bx	lr
   15290:	movw	r1, #43080	; 0xa848
   15294:	movt	r1, #1
   15298:	vld1.32	{d16-d17}, [r1]!
   1529c:	ldr	r1, [r1]
   152a0:	vst1.32	{d16-d17}, [r0]!
   152a4:	str	r1, [r0]
   152a8:	bx	lr
   152ac:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   152b0:	add	fp, sp, #28
   152b4:	sub	sp, sp, #4
   152b8:	movw	sl, #21408	; 0x53a0
   152bc:	cmp	r3, #0
   152c0:	movw	r5, #21388	; 0x538c
   152c4:	mov	r8, r0
   152c8:	mov	r0, #40	; 0x28
   152cc:	mov	r7, r1
   152d0:	movt	sl, #1
   152d4:	movne	sl, r3
   152d8:	cmp	r2, #0
   152dc:	movt	r5, #1
   152e0:	movne	r5, r2
   152e4:	bl	18d10 <__assert_fail@plt+0x77b4>
   152e8:	mov	r9, #0
   152ec:	cmp	r0, #0
   152f0:	beq	15380 <__assert_fail@plt+0x3e24>
   152f4:	movw	r6, #43080	; 0xa848
   152f8:	cmp	r7, #0
   152fc:	mov	r4, r0
   15300:	movt	r6, #1
   15304:	movne	r6, r7
   15308:	str	r6, [r0, #20]
   1530c:	bl	153b0 <__assert_fail@plt+0x3e54>
   15310:	cmp	r0, #0
   15314:	beq	15378 <__assert_fail@plt+0x3e1c>
   15318:	mov	r0, r8
   1531c:	mov	r1, r6
   15320:	bl	1545c <__assert_fail@plt+0x3f00>
   15324:	cmp	r0, #0
   15328:	str	r0, [r4, #8]
   1532c:	beq	15378 <__assert_fail@plt+0x3e1c>
   15330:	mov	r1, #8
   15334:	bl	18cbc <__assert_fail@plt+0x7760>
   15338:	cmp	r0, #0
   1533c:	str	r0, [r4]
   15340:	beq	15378 <__assert_fail@plt+0x3e1c>
   15344:	ldr	r1, [fp, #8]
   15348:	mov	r2, #0
   1534c:	str	r5, [r4, #24]
   15350:	str	sl, [r4, #28]
   15354:	mov	r9, r4
   15358:	str	r1, [r4, #32]
   1535c:	str	r2, [r4, #36]	; 0x24
   15360:	str	r2, [r4, #12]
   15364:	str	r2, [r4, #16]
   15368:	ldr	r1, [r4, #8]
   1536c:	add	r0, r0, r1, lsl #3
   15370:	str	r0, [r4, #4]
   15374:	b	15380 <__assert_fail@plt+0x3e24>
   15378:	mov	r0, r4
   1537c:	bl	12db8 <__assert_fail@plt+0x185c>
   15380:	mov	r0, r9
   15384:	sub	sp, fp, #28
   15388:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1538c:	ror	r2, r0, #3
   15390:	udiv	r2, r2, r1
   15394:	mul	r1, r2, r1
   15398:	rsb	r0, r1, r0, ror #3
   1539c:	bx	lr
   153a0:	sub	r0, r0, r1
   153a4:	clz	r0, r0
   153a8:	lsr	r0, r0, #5
   153ac:	bx	lr
   153b0:	ldr	r3, [r0, #20]
   153b4:	movw	r2, #43080	; 0xa848
   153b8:	mov	r1, r0
   153bc:	mov	r0, #1
   153c0:	movt	r2, #1
   153c4:	cmp	r3, r2
   153c8:	beq	1544c <__assert_fail@plt+0x3ef0>
   153cc:	vldr	s2, [pc, #124]	; 15450 <__assert_fail@plt+0x3ef4>
   153d0:	vldr	s0, [r3, #8]
   153d4:	vcmpe.f32	s0, s2
   153d8:	vmrs	APSR_nzcv, fpscr
   153dc:	ble	15444 <__assert_fail@plt+0x3ee8>
   153e0:	vldr	s4, [pc, #108]	; 15454 <__assert_fail@plt+0x3ef8>
   153e4:	vcmpe.f32	s0, s4
   153e8:	vmrs	APSR_nzcv, fpscr
   153ec:	bpl	15444 <__assert_fail@plt+0x3ee8>
   153f0:	vldr	s4, [pc, #96]	; 15458 <__assert_fail@plt+0x3efc>
   153f4:	vldr	s6, [r3, #12]
   153f8:	vcmpe.f32	s6, s4
   153fc:	vmrs	APSR_nzcv, fpscr
   15400:	ble	15444 <__assert_fail@plt+0x3ee8>
   15404:	vldr	s4, [r3]
   15408:	vcmpe.f32	s4, #0.0
   1540c:	vmrs	APSR_nzcv, fpscr
   15410:	blt	15444 <__assert_fail@plt+0x3ee8>
   15414:	vadd.f32	s2, s4, s2
   15418:	vcmpe.f32	s2, s0
   1541c:	vmrs	APSR_nzcv, fpscr
   15420:	bpl	15444 <__assert_fail@plt+0x3ee8>
   15424:	vldr	s0, [r3, #4]
   15428:	vmov.f32	s4, #112	; 0x3f800000  1.0
   1542c:	vcmpe.f32	s0, s4
   15430:	vmrs	APSR_nzcv, fpscr
   15434:	bhi	15444 <__assert_fail@plt+0x3ee8>
   15438:	vcmpe.f32	s2, s0
   1543c:	vmrs	APSR_nzcv, fpscr
   15440:	bxmi	lr
   15444:	mov	r0, #0
   15448:	str	r2, [r1, #20]
   1544c:	bx	lr
   15450:	stclcc	12, cr12, [ip, #820]	; 0x334
   15454:	svccc	0x00666666
   15458:	svccc	0x008ccccd
   1545c:	ldrb	r2, [r1, #16]
   15460:	cmp	r2, #0
   15464:	bne	15494 <__assert_fail@plt+0x3f38>
   15468:	vmov	s2, r0
   1546c:	vldr	s0, [r1, #8]
   15470:	vldr	s4, [pc, #156]	; 15514 <__assert_fail@plt+0x3fb8>
   15474:	mov	r0, #0
   15478:	vcvt.f32.u32	s2, s2
   1547c:	vdiv.f32	s2, s2, s0
   15480:	vcmpe.f32	s2, s4
   15484:	vcvt.u32.f32	s0, s2
   15488:	vmrs	APSR_nzcv, fpscr
   1548c:	bxge	lr
   15490:	vmov	r0, s0
   15494:	cmp	r0, #10
   15498:	movls	r0, #10
   1549c:	orr	r0, r0, #1
   154a0:	cmn	r0, #1
   154a4:	beq	15500 <__assert_fail@plt+0x3fa4>
   154a8:	mov	r1, #3
   154ac:	cmp	r0, #10
   154b0:	bcc	154e8 <__assert_fail@plt+0x3f8c>
   154b4:	mov	r1, #3
   154b8:	mov	ip, #9
   154bc:	mov	r2, #12
   154c0:	udiv	r3, r0, r1
   154c4:	mls	r3, r3, r1, r0
   154c8:	cmp	r3, #0
   154cc:	beq	154e8 <__assert_fail@plt+0x3f8c>
   154d0:	add	r3, ip, r2
   154d4:	add	r2, r2, #8
   154d8:	add	r1, r1, #2
   154dc:	add	ip, r3, #4
   154e0:	cmp	ip, r0
   154e4:	bcc	154c0 <__assert_fail@plt+0x3f64>
   154e8:	udiv	r2, r0, r1
   154ec:	mls	r1, r2, r1, r0
   154f0:	cmp	r1, #0
   154f4:	bne	15508 <__assert_fail@plt+0x3fac>
   154f8:	add	r0, r0, #2
   154fc:	b	154a0 <__assert_fail@plt+0x3f44>
   15500:	mov	r0, #0
   15504:	bx	lr
   15508:	cmp	r0, #536870912	; 0x20000000
   1550c:	movcs	r0, #0
   15510:	bx	lr
   15514:	svcmi	0x00800000
   15518:	push	{r4, r5, r6, r7, fp, lr}
   1551c:	add	fp, sp, #16
   15520:	mov	r4, r0
   15524:	ldr	r5, [r0]
   15528:	ldr	r0, [r0, #4]
   1552c:	cmp	r5, r0
   15530:	bcs	155c8 <__assert_fail@plt+0x406c>
   15534:	mov	r6, #0
   15538:	ldr	r1, [r5]
   1553c:	cmp	r1, #0
   15540:	beq	155bc <__assert_fail@plt+0x4060>
   15544:	ldr	r1, [r4, #32]
   15548:	ldr	r7, [r5, #4]
   1554c:	cmp	r1, #0
   15550:	mov	r0, r1
   15554:	movwne	r0, #1
   15558:	cmp	r7, #0
   1555c:	beq	155a0 <__assert_fail@plt+0x4044>
   15560:	tst	r0, #1
   15564:	beq	15574 <__assert_fail@plt+0x4018>
   15568:	ldr	r0, [r7]
   1556c:	blx	r1
   15570:	ldr	r1, [r4, #32]
   15574:	str	r6, [r7]
   15578:	cmp	r1, #0
   1557c:	ldr	r2, [r7, #4]
   15580:	ldr	r0, [r4, #36]	; 0x24
   15584:	str	r0, [r7, #4]
   15588:	mov	r0, r1
   1558c:	str	r7, [r4, #36]	; 0x24
   15590:	movwne	r0, #1
   15594:	cmp	r2, #0
   15598:	mov	r7, r2
   1559c:	bne	15560 <__assert_fail@plt+0x4004>
   155a0:	cmp	r0, #0
   155a4:	beq	155b0 <__assert_fail@plt+0x4054>
   155a8:	ldr	r0, [r5]
   155ac:	blx	r1
   155b0:	str	r6, [r5]
   155b4:	str	r6, [r5, #4]
   155b8:	ldr	r0, [r4, #4]
   155bc:	add	r5, r5, #8
   155c0:	cmp	r5, r0
   155c4:	bcc	15538 <__assert_fail@plt+0x3fdc>
   155c8:	mov	r0, #0
   155cc:	str	r0, [r4, #12]
   155d0:	str	r0, [r4, #16]
   155d4:	pop	{r4, r5, r6, r7, fp, pc}
   155d8:	push	{r4, r5, r6, sl, fp, lr}
   155dc:	add	fp, sp, #16
   155e0:	mov	r4, r0
   155e4:	ldr	r0, [r0, #32]
   155e8:	cmp	r0, #0
   155ec:	beq	15650 <__assert_fail@plt+0x40f4>
   155f0:	ldr	r0, [r4, #16]
   155f4:	cmp	r0, #0
   155f8:	beq	15650 <__assert_fail@plt+0x40f4>
   155fc:	ldr	r5, [r4]
   15600:	ldr	r1, [r4, #4]
   15604:	cmp	r5, r1
   15608:	bcs	15650 <__assert_fail@plt+0x40f4>
   1560c:	ldr	r0, [r5]
   15610:	cmp	r0, #0
   15614:	cmpne	r5, #0
   15618:	beq	15648 <__assert_fail@plt+0x40ec>
   1561c:	ldr	r1, [r4, #32]
   15620:	blx	r1
   15624:	ldr	r6, [r5, #4]
   15628:	cmp	r6, #0
   1562c:	beq	15644 <__assert_fail@plt+0x40e8>
   15630:	ldr	r1, [r4, #32]
   15634:	ldr	r0, [r6]
   15638:	blx	r1
   1563c:	ldr	r6, [r6, #4]
   15640:	b	15628 <__assert_fail@plt+0x40cc>
   15644:	ldr	r1, [r4, #4]
   15648:	add	r5, r5, #8
   1564c:	b	15604 <__assert_fail@plt+0x40a8>
   15650:	ldr	r5, [r4]
   15654:	ldr	r1, [r4, #4]
   15658:	cmp	r5, r1
   1565c:	bcs	1568c <__assert_fail@plt+0x4130>
   15660:	ldr	r0, [r5, #4]
   15664:	cmp	r0, #0
   15668:	beq	15684 <__assert_fail@plt+0x4128>
   1566c:	ldr	r6, [r0, #4]
   15670:	bl	12db8 <__assert_fail@plt+0x185c>
   15674:	cmp	r6, #0
   15678:	mov	r0, r6
   1567c:	bne	1566c <__assert_fail@plt+0x4110>
   15680:	ldr	r1, [r4, #4]
   15684:	add	r5, r5, #8
   15688:	b	15658 <__assert_fail@plt+0x40fc>
   1568c:	ldr	r0, [r4, #36]	; 0x24
   15690:	cmp	r0, #0
   15694:	beq	156ac <__assert_fail@plt+0x4150>
   15698:	ldr	r5, [r0, #4]
   1569c:	bl	12db8 <__assert_fail@plt+0x185c>
   156a0:	cmp	r5, #0
   156a4:	mov	r0, r5
   156a8:	bne	15698 <__assert_fail@plt+0x413c>
   156ac:	ldr	r0, [r4]
   156b0:	bl	12db8 <__assert_fail@plt+0x185c>
   156b4:	mov	r0, r4
   156b8:	pop	{r4, r5, r6, sl, fp, lr}
   156bc:	b	12db8 <__assert_fail@plt+0x185c>
   156c0:	push	{r4, r5, r6, r7, fp, lr}
   156c4:	add	fp, sp, #16
   156c8:	sub	sp, sp, #40	; 0x28
   156cc:	mov	r7, r0
   156d0:	mov	r2, r1
   156d4:	mov	r4, r0
   156d8:	ldr	r1, [r7, #20]!
   156dc:	mov	r0, r2
   156e0:	bl	1545c <__assert_fail@plt+0x3f00>
   156e4:	mov	r5, #0
   156e8:	cmp	r0, #0
   156ec:	beq	15780 <__assert_fail@plt+0x4224>
   156f0:	mov	r6, r0
   156f4:	ldr	r0, [r4, #8]
   156f8:	cmp	r6, r0
   156fc:	beq	1577c <__assert_fail@plt+0x4220>
   15700:	mov	r0, r6
   15704:	mov	r1, #8
   15708:	bl	18cbc <__assert_fail@plt+0x7760>
   1570c:	cmp	r0, #0
   15710:	str	r0, [sp]
   15714:	beq	15780 <__assert_fail@plt+0x4224>
   15718:	add	r0, r0, r6, lsl #3
   1571c:	mov	r1, #0
   15720:	mov	r5, sp
   15724:	mov	r2, #0
   15728:	str	r1, [sp, #16]
   1572c:	str	r1, [sp, #12]
   15730:	str	r6, [sp, #8]
   15734:	mov	r1, r4
   15738:	str	r0, [sp, #4]
   1573c:	add	r0, r5, #20
   15740:	vld1.32	{d16-d17}, [r7]
   15744:	vst1.32	{d16-d17}, [r0]
   15748:	ldr	r0, [r4, #36]	; 0x24
   1574c:	str	r0, [sp, #36]	; 0x24
   15750:	mov	r0, r5
   15754:	bl	157d8 <__assert_fail@plt+0x427c>
   15758:	cmp	r0, #0
   1575c:	beq	1578c <__assert_fail@plt+0x4230>
   15760:	ldr	r0, [r4]
   15764:	bl	12db8 <__assert_fail@plt+0x185c>
   15768:	mov	r0, #36	; 0x24
   1576c:	vld1.32	{d16-d17}, [r5], r0
   15770:	vst1.32	{d16-d17}, [r4], r0
   15774:	ldr	r0, [r5]
   15778:	str	r0, [r4]
   1577c:	mov	r5, #1
   15780:	mov	r0, r5
   15784:	sub	sp, fp, #16
   15788:	pop	{r4, r5, r6, r7, fp, pc}
   1578c:	ldr	r0, [sp, #36]	; 0x24
   15790:	mov	r1, sp
   15794:	mov	r2, #1
   15798:	str	r0, [r4, #36]	; 0x24
   1579c:	mov	r0, r4
   157a0:	bl	157d8 <__assert_fail@plt+0x427c>
   157a4:	cmp	r0, #0
   157a8:	beq	157d4 <__assert_fail@plt+0x4278>
   157ac:	mov	r1, sp
   157b0:	mov	r0, r4
   157b4:	mov	r2, #0
   157b8:	mov	r5, #0
   157bc:	bl	157d8 <__assert_fail@plt+0x427c>
   157c0:	cmp	r0, #0
   157c4:	beq	157d4 <__assert_fail@plt+0x4278>
   157c8:	ldr	r0, [sp]
   157cc:	bl	12db8 <__assert_fail@plt+0x185c>
   157d0:	b	15780 <__assert_fail@plt+0x4224>
   157d4:	bl	11514 <abort@plt>
   157d8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   157dc:	add	fp, sp, #28
   157e0:	sub	sp, sp, #12
   157e4:	ldr	sl, [r1]
   157e8:	str	r1, [sp, #8]
   157ec:	ldr	r1, [r1, #4]
   157f0:	mov	r7, r0
   157f4:	mov	r0, #1
   157f8:	str	r2, [sp, #4]
   157fc:	cmp	sl, r1
   15800:	bcs	15954 <__assert_fail@plt+0x43f8>
   15804:	add	r8, r7, #36	; 0x24
   15808:	mov	r9, #0
   1580c:	ldr	r4, [sl]
   15810:	cmp	r4, #0
   15814:	beq	1593c <__assert_fail@plt+0x43e0>
   15818:	ldr	r5, [sl, #4]
   1581c:	cmp	r5, #0
   15820:	beq	15898 <__assert_fail@plt+0x433c>
   15824:	ldr	r1, [r7, #8]
   15828:	ldr	r4, [r5]
   1582c:	ldr	r2, [r7, #24]
   15830:	mov	r0, r4
   15834:	blx	r2
   15838:	ldr	r1, [r7, #8]
   1583c:	cmp	r0, r1
   15840:	bcs	15964 <__assert_fail@plt+0x4408>
   15844:	ldr	r3, [r7]
   15848:	ldr	r2, [r5, #4]
   1584c:	ldr	r6, [r3, r0, lsl #3]
   15850:	cmp	r6, #0
   15854:	beq	15864 <__assert_fail@plt+0x4308>
   15858:	add	r0, r3, r0, lsl #3
   1585c:	add	r0, r0, #4
   15860:	b	1587c <__assert_fail@plt+0x4320>
   15864:	str	r4, [r3, r0, lsl #3]
   15868:	ldr	r0, [r7, #12]
   1586c:	add	r0, r0, #1
   15870:	str	r0, [r7, #12]
   15874:	mov	r0, r8
   15878:	str	r9, [r5]
   1587c:	ldr	r3, [r0]
   15880:	cmp	r2, #0
   15884:	str	r3, [r5, #4]
   15888:	str	r5, [r0]
   1588c:	mov	r5, r2
   15890:	bne	15828 <__assert_fail@plt+0x42cc>
   15894:	ldr	r4, [sl]
   15898:	ldr	r0, [sp, #4]
   1589c:	str	r9, [sl, #4]
   158a0:	cmp	r0, #0
   158a4:	bne	1593c <__assert_fail@plt+0x43e0>
   158a8:	ldr	r1, [r7, #8]
   158ac:	ldr	r2, [r7, #24]
   158b0:	mov	r0, r4
   158b4:	blx	r2
   158b8:	mov	r5, r0
   158bc:	ldr	r0, [r7, #8]
   158c0:	cmp	r5, r0
   158c4:	bcs	15964 <__assert_fail@plt+0x4408>
   158c8:	ldr	r6, [r7]
   158cc:	ldr	r0, [r6, r5, lsl #3]
   158d0:	cmp	r0, #0
   158d4:	beq	158f0 <__assert_fail@plt+0x4394>
   158d8:	ldr	r0, [r8]
   158dc:	cmp	r0, #0
   158e0:	beq	15904 <__assert_fail@plt+0x43a8>
   158e4:	ldr	r1, [r0, #4]
   158e8:	str	r1, [r8]
   158ec:	b	15914 <__assert_fail@plt+0x43b8>
   158f0:	str	r4, [r6, r5, lsl #3]
   158f4:	ldr	r0, [r7, #12]
   158f8:	add	r0, r0, #1
   158fc:	str	r0, [r7, #12]
   15900:	b	15928 <__assert_fail@plt+0x43cc>
   15904:	mov	r0, #8
   15908:	bl	18d10 <__assert_fail@plt+0x77b4>
   1590c:	cmp	r0, #0
   15910:	beq	1595c <__assert_fail@plt+0x4400>
   15914:	add	r1, r6, r5, lsl #3
   15918:	str	r4, [r0]
   1591c:	ldr	r2, [r1, #4]
   15920:	str	r2, [r0, #4]
   15924:	str	r0, [r1, #4]
   15928:	ldr	r1, [sp, #8]
   1592c:	str	r9, [sl]
   15930:	ldr	r0, [r1, #12]
   15934:	sub	r0, r0, #1
   15938:	str	r0, [r1, #12]
   1593c:	ldr	r0, [sp, #8]
   15940:	add	sl, sl, #8
   15944:	ldr	r0, [r0, #4]
   15948:	cmp	sl, r0
   1594c:	bcc	1580c <__assert_fail@plt+0x42b0>
   15950:	mov	r0, #1
   15954:	sub	sp, fp, #28
   15958:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1595c:	mov	r0, #0
   15960:	b	15954 <__assert_fail@plt+0x43f8>
   15964:	bl	11514 <abort@plt>
   15968:	push	{r4, r5, r6, r7, fp, lr}
   1596c:	add	fp, sp, #16
   15970:	sub	sp, sp, #8
   15974:	cmp	r1, #0
   15978:	beq	15af0 <__assert_fail@plt+0x4594>
   1597c:	mov	r7, r2
   15980:	add	r2, sp, #4
   15984:	mov	r3, #0
   15988:	mov	r5, r1
   1598c:	mov	r4, r0
   15990:	mov	r6, #0
   15994:	bl	15af8 <__assert_fail@plt+0x459c>
   15998:	cmp	r0, #0
   1599c:	beq	159ac <__assert_fail@plt+0x4450>
   159a0:	cmp	r7, #0
   159a4:	strne	r0, [r7]
   159a8:	b	15adc <__assert_fail@plt+0x4580>
   159ac:	vldr	s0, [r4, #8]
   159b0:	ldr	r0, [r4, #20]
   159b4:	vldr	s2, [r4, #12]
   159b8:	vldr	s4, [r0, #8]
   159bc:	vcvt.f32.u32	s0, s0
   159c0:	vcvt.f32.u32	s2, s2
   159c4:	vmul.f32	s0, s4, s0
   159c8:	vcmpe.f32	s0, s2
   159cc:	vmrs	APSR_nzcv, fpscr
   159d0:	bpl	15a64 <__assert_fail@plt+0x4508>
   159d4:	mov	r0, r4
   159d8:	bl	153b0 <__assert_fail@plt+0x3e54>
   159dc:	vldr	s0, [r4, #8]
   159e0:	ldr	r0, [r4, #20]
   159e4:	vldr	s4, [r4, #12]
   159e8:	vcvt.f32.u32	s2, s0
   159ec:	vldr	s0, [r0, #8]
   159f0:	vcvt.f32.u32	s4, s4
   159f4:	vmul.f32	s6, s0, s2
   159f8:	vcmpe.f32	s6, s4
   159fc:	vmrs	APSR_nzcv, fpscr
   15a00:	bpl	15a64 <__assert_fail@plt+0x4508>
   15a04:	vldr	s4, [r0, #12]
   15a08:	ldrb	r0, [r0, #16]
   15a0c:	mvn	r6, #0
   15a10:	cmp	r0, #0
   15a14:	vmul.f32	s2, s4, s2
   15a18:	vldr	s4, [pc, #212]	; 15af4 <__assert_fail@plt+0x4598>
   15a1c:	vmul.f32	s0, s0, s2
   15a20:	vseleq.f32	s0, s0, s2
   15a24:	vcmpe.f32	s0, s4
   15a28:	vmrs	APSR_nzcv, fpscr
   15a2c:	bge	15adc <__assert_fail@plt+0x4580>
   15a30:	vcvt.u32.f32	s0, s0
   15a34:	mov	r0, r4
   15a38:	vmov	r1, s0
   15a3c:	bl	156c0 <__assert_fail@plt+0x4164>
   15a40:	cmp	r0, #0
   15a44:	beq	15adc <__assert_fail@plt+0x4580>
   15a48:	add	r2, sp, #4
   15a4c:	mov	r0, r4
   15a50:	mov	r1, r5
   15a54:	mov	r3, #0
   15a58:	bl	15af8 <__assert_fail@plt+0x459c>
   15a5c:	cmp	r0, #0
   15a60:	bne	15af0 <__assert_fail@plt+0x4594>
   15a64:	ldr	r6, [sp, #4]
   15a68:	ldr	r0, [r6]
   15a6c:	cmp	r0, #0
   15a70:	beq	15a8c <__assert_fail@plt+0x4530>
   15a74:	ldr	r0, [r4, #36]	; 0x24
   15a78:	cmp	r0, #0
   15a7c:	beq	15aac <__assert_fail@plt+0x4550>
   15a80:	ldr	r1, [r0, #4]
   15a84:	str	r1, [r4, #36]	; 0x24
   15a88:	b	15abc <__assert_fail@plt+0x4560>
   15a8c:	str	r5, [r6]
   15a90:	ldr	r0, [r4, #12]
   15a94:	ldr	r1, [r4, #16]
   15a98:	add	r0, r0, #1
   15a9c:	add	r1, r1, #1
   15aa0:	str	r0, [r4, #12]
   15aa4:	str	r1, [r4, #16]
   15aa8:	b	15ad8 <__assert_fail@plt+0x457c>
   15aac:	mov	r0, #8
   15ab0:	bl	18d10 <__assert_fail@plt+0x77b4>
   15ab4:	cmp	r0, #0
   15ab8:	beq	15ae8 <__assert_fail@plt+0x458c>
   15abc:	str	r5, [r0]
   15ac0:	ldr	r1, [r6, #4]
   15ac4:	str	r1, [r0, #4]
   15ac8:	str	r0, [r6, #4]
   15acc:	ldr	r0, [r4, #16]
   15ad0:	add	r0, r0, #1
   15ad4:	str	r0, [r4, #16]
   15ad8:	mov	r6, #1
   15adc:	mov	r0, r6
   15ae0:	sub	sp, fp, #16
   15ae4:	pop	{r4, r5, r6, r7, fp, pc}
   15ae8:	mvn	r6, #0
   15aec:	b	15adc <__assert_fail@plt+0x4580>
   15af0:	bl	11514 <abort@plt>
   15af4:	svcmi	0x00800000
   15af8:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   15afc:	add	fp, sp, #24
   15b00:	mov	r7, r2
   15b04:	mov	r4, r1
   15b08:	ldr	r1, [r0, #8]
   15b0c:	ldr	r2, [r0, #24]
   15b10:	mov	r5, r0
   15b14:	mov	r8, r3
   15b18:	mov	r0, r4
   15b1c:	blx	r2
   15b20:	ldr	r1, [r5, #8]
   15b24:	cmp	r0, r1
   15b28:	bcs	15c24 <__assert_fail@plt+0x46c8>
   15b2c:	ldr	r1, [r5]
   15b30:	add	r6, r1, r0, lsl #3
   15b34:	str	r6, [r7]
   15b38:	ldr	r1, [r1, r0, lsl #3]
   15b3c:	cmp	r1, #0
   15b40:	beq	15bd8 <__assert_fail@plt+0x467c>
   15b44:	cmp	r1, r4
   15b48:	beq	15b64 <__assert_fail@plt+0x4608>
   15b4c:	ldr	r2, [r5, #28]
   15b50:	mov	r0, r4
   15b54:	blx	r2
   15b58:	cmp	r0, #0
   15b5c:	beq	15b98 <__assert_fail@plt+0x463c>
   15b60:	ldr	r4, [r6]
   15b64:	cmp	r8, #0
   15b68:	beq	15bdc <__assert_fail@plt+0x4680>
   15b6c:	ldr	r0, [r6, #4]
   15b70:	cmp	r0, #0
   15b74:	beq	15be4 <__assert_fail@plt+0x4688>
   15b78:	ldm	r0, {r1, r2}
   15b7c:	stm	r6, {r1, r2}
   15b80:	mov	r1, #0
   15b84:	str	r1, [r0]
   15b88:	ldr	r1, [r5, #36]	; 0x24
   15b8c:	str	r1, [r0, #4]
   15b90:	str	r0, [r5, #36]	; 0x24
   15b94:	b	15bdc <__assert_fail@plt+0x4680>
   15b98:	ldr	r0, [r6, #4]!
   15b9c:	cmp	r0, #0
   15ba0:	beq	15bd8 <__assert_fail@plt+0x467c>
   15ba4:	ldr	r1, [r0]
   15ba8:	cmp	r1, r4
   15bac:	beq	15bf0 <__assert_fail@plt+0x4694>
   15bb0:	ldr	r2, [r5, #28]
   15bb4:	mov	r0, r4
   15bb8:	blx	r2
   15bbc:	ldr	r1, [r6]
   15bc0:	cmp	r0, #0
   15bc4:	bne	15bf8 <__assert_fail@plt+0x469c>
   15bc8:	ldr	r0, [r1, #4]!
   15bcc:	mov	r6, r1
   15bd0:	cmp	r0, #0
   15bd4:	bne	15ba4 <__assert_fail@plt+0x4648>
   15bd8:	mov	r4, #0
   15bdc:	mov	r0, r4
   15be0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   15be4:	mov	r0, #0
   15be8:	str	r0, [r6]
   15bec:	b	15bdc <__assert_fail@plt+0x4680>
   15bf0:	mov	r1, r0
   15bf4:	b	15bfc <__assert_fail@plt+0x46a0>
   15bf8:	ldr	r4, [r1]
   15bfc:	cmp	r8, #0
   15c00:	beq	15bdc <__assert_fail@plt+0x4680>
   15c04:	ldr	r0, [r1, #4]
   15c08:	str	r0, [r6]
   15c0c:	mov	r0, #0
   15c10:	str	r0, [r1]
   15c14:	ldr	r0, [r5, #36]	; 0x24
   15c18:	str	r0, [r1, #4]
   15c1c:	str	r1, [r5, #36]	; 0x24
   15c20:	b	15bdc <__assert_fail@plt+0x4680>
   15c24:	bl	11514 <abort@plt>
   15c28:	push	{r4, sl, fp, lr}
   15c2c:	add	fp, sp, #8
   15c30:	sub	sp, sp, #8
   15c34:	add	r2, sp, #4
   15c38:	mov	r4, r1
   15c3c:	bl	15968 <__assert_fail@plt+0x440c>
   15c40:	cmn	r0, #1
   15c44:	beq	15c58 <__assert_fail@plt+0x46fc>
   15c48:	ldr	r1, [sp, #4]
   15c4c:	cmp	r0, #0
   15c50:	moveq	r4, r1
   15c54:	b	15c5c <__assert_fail@plt+0x4700>
   15c58:	mov	r4, #0
   15c5c:	mov	r0, r4
   15c60:	sub	sp, fp, #8
   15c64:	pop	{r4, sl, fp, pc}
   15c68:	push	{r4, r5, r6, sl, fp, lr}
   15c6c:	add	fp, sp, #16
   15c70:	sub	sp, sp, #8
   15c74:	add	r2, sp, #4
   15c78:	mov	r3, #1
   15c7c:	mov	r4, r0
   15c80:	bl	15af8 <__assert_fail@plt+0x459c>
   15c84:	mov	r5, r0
   15c88:	cmp	r0, #0
   15c8c:	beq	15d6c <__assert_fail@plt+0x4810>
   15c90:	ldr	r0, [r4, #16]
   15c94:	sub	r0, r0, #1
   15c98:	str	r0, [r4, #16]
   15c9c:	ldr	r0, [sp, #4]
   15ca0:	ldr	r0, [r0]
   15ca4:	cmp	r0, #0
   15ca8:	bne	15d6c <__assert_fail@plt+0x4810>
   15cac:	ldr	r0, [r4, #12]
   15cb0:	vldr	s0, [r4, #8]
   15cb4:	sub	r0, r0, #1
   15cb8:	str	r0, [r4, #12]
   15cbc:	vmov	s4, r0
   15cc0:	ldr	r1, [r4, #20]
   15cc4:	vldr	s2, [r1]
   15cc8:	vcvt.f32.u32	s0, s0
   15ccc:	vcvt.f32.u32	s4, s4
   15cd0:	vmul.f32	s0, s2, s0
   15cd4:	vcmpe.f32	s0, s4
   15cd8:	vmrs	APSR_nzcv, fpscr
   15cdc:	ble	15d6c <__assert_fail@plt+0x4810>
   15ce0:	mov	r0, r4
   15ce4:	bl	153b0 <__assert_fail@plt+0x3e54>
   15ce8:	vldr	s0, [r4, #8]
   15cec:	ldr	r0, [r4, #20]
   15cf0:	vldr	s2, [r4, #12]
   15cf4:	vcvt.f32.u32	s0, s0
   15cf8:	vldr	s4, [r0]
   15cfc:	vcvt.f32.u32	s2, s2
   15d00:	vmul.f32	s4, s4, s0
   15d04:	vcmpe.f32	s4, s2
   15d08:	vmrs	APSR_nzcv, fpscr
   15d0c:	ble	15d6c <__assert_fail@plt+0x4810>
   15d10:	vldr	s2, [r0, #4]
   15d14:	ldrb	r1, [r0, #16]
   15d18:	cmp	r1, #0
   15d1c:	vmul.f32	s0, s2, s0
   15d20:	bne	15d2c <__assert_fail@plt+0x47d0>
   15d24:	vldr	s2, [r0, #8]
   15d28:	vmul.f32	s0, s0, s2
   15d2c:	vcvt.u32.f32	s0, s0
   15d30:	mov	r0, r4
   15d34:	vmov	r1, s0
   15d38:	bl	156c0 <__assert_fail@plt+0x4164>
   15d3c:	cmp	r0, #0
   15d40:	bne	15d6c <__assert_fail@plt+0x4810>
   15d44:	ldr	r0, [r4, #36]	; 0x24
   15d48:	cmp	r0, #0
   15d4c:	beq	15d64 <__assert_fail@plt+0x4808>
   15d50:	ldr	r6, [r0, #4]
   15d54:	bl	12db8 <__assert_fail@plt+0x185c>
   15d58:	cmp	r6, #0
   15d5c:	mov	r0, r6
   15d60:	bne	15d50 <__assert_fail@plt+0x47f4>
   15d64:	mov	r0, #0
   15d68:	str	r0, [r4, #36]	; 0x24
   15d6c:	mov	r0, r5
   15d70:	sub	sp, fp, #16
   15d74:	pop	{r4, r5, r6, sl, fp, pc}
   15d78:	b	15c68 <__assert_fail@plt+0x470c>
   15d7c:	vdup.32	q8, r1
   15d80:	mov	r2, #0
   15d84:	str	r2, [r0, #20]
   15d88:	str	r2, [r0, #24]
   15d8c:	mov	r2, #1
   15d90:	strb	r2, [r0, #28]
   15d94:	vst1.32	{d16-d17}, [r0]!
   15d98:	str	r1, [r0]
   15d9c:	bx	lr
   15da0:	ldrb	r0, [r0, #28]
   15da4:	bx	lr
   15da8:	push	{fp, lr}
   15dac:	mov	fp, sp
   15db0:	ldrb	r3, [r0, #28]
   15db4:	ldr	r2, [r0, #20]
   15db8:	eor	lr, r3, #1
   15dbc:	add	r2, r2, lr
   15dc0:	and	r3, r2, #3
   15dc4:	ldr	ip, [r0, r3, lsl #2]
   15dc8:	str	r1, [r0, r3, lsl #2]
   15dcc:	str	r3, [r0, #20]
   15dd0:	ldr	r1, [r0, #24]
   15dd4:	cmp	r3, r1
   15dd8:	addeq	r1, r2, lr
   15ddc:	andeq	r1, r1, #3
   15de0:	streq	r1, [r0, #24]
   15de4:	mov	r1, #0
   15de8:	strb	r1, [r0, #28]
   15dec:	mov	r0, ip
   15df0:	pop	{fp, pc}
   15df4:	push	{fp, lr}
   15df8:	mov	fp, sp
   15dfc:	ldrb	r1, [r0, #28]
   15e00:	cmp	r1, #0
   15e04:	bne	15e48 <__assert_fail@plt+0x48ec>
   15e08:	ldr	r3, [r0, #20]
   15e0c:	ldr	r2, [r0, #16]
   15e10:	ldr	r1, [r0, r3, lsl #2]
   15e14:	str	r2, [r0, r3, lsl #2]
   15e18:	ldr	r2, [r0, #20]
   15e1c:	ldr	r3, [r0, #24]
   15e20:	cmp	r2, r3
   15e24:	bne	15e34 <__assert_fail@plt+0x48d8>
   15e28:	mov	r2, #1
   15e2c:	strb	r2, [r0, #28]
   15e30:	b	15e40 <__assert_fail@plt+0x48e4>
   15e34:	sub	r2, r2, #1
   15e38:	and	r2, r2, #3
   15e3c:	str	r2, [r0, #20]
   15e40:	mov	r0, r1
   15e44:	pop	{fp, pc}
   15e48:	bl	11514 <abort@plt>
   15e4c:	push	{r4, r5, r6, sl, fp, lr}
   15e50:	add	fp, sp, #16
   15e54:	mov	r5, r0
   15e58:	mov	r0, #0
   15e5c:	mov	r4, r1
   15e60:	add	r6, r2, #19
   15e64:	strb	r0, [r2, #20]
   15e68:	mov	r0, r5
   15e6c:	mov	r1, r4
   15e70:	mov	r2, #10
   15e74:	mov	r3, #0
   15e78:	bl	19490 <__assert_fail@plt+0x7f34>
   15e7c:	add	r2, r0, r0, lsl #2
   15e80:	sub	r2, r5, r2, lsl #1
   15e84:	orr	r2, r2, #48	; 0x30
   15e88:	strb	r2, [r6], #-1
   15e8c:	rsbs	r2, r5, #9
   15e90:	mov	r5, r0
   15e94:	rscs	r2, r4, #0
   15e98:	mov	r4, r1
   15e9c:	bcc	15e68 <__assert_fail@plt+0x490c>
   15ea0:	add	r0, r6, #1
   15ea4:	pop	{r4, r5, r6, sl, fp, pc}
   15ea8:	sub	sp, sp, #4
   15eac:	push	{fp, lr}
   15eb0:	mov	fp, sp
   15eb4:	sub	sp, sp, #4
   15eb8:	str	r3, [fp, #8]
   15ebc:	tst	r2, #64	; 0x40
   15ec0:	mov	r3, #0
   15ec4:	ldrne	r3, [fp, #8]
   15ec8:	bl	113e8 <openat64@plt>
   15ecc:	bl	17ac4 <__assert_fail@plt+0x6568>
   15ed0:	mov	sp, fp
   15ed4:	pop	{fp, lr}
   15ed8:	add	sp, sp, #4
   15edc:	bx	lr
   15ee0:	push	{r4, r5, r6, sl, fp, lr}
   15ee4:	add	fp, sp, #16
   15ee8:	orr	r2, r2, #18688	; 0x4900
   15eec:	mov	r4, r3
   15ef0:	orr	r2, r2, #524288	; 0x80000
   15ef4:	bl	15ea8 <__assert_fail@plt+0x494c>
   15ef8:	mov	r5, r0
   15efc:	mov	r0, #0
   15f00:	cmp	r5, #0
   15f04:	bmi	15f3c <__assert_fail@plt+0x49e0>
   15f08:	mov	r0, r5
   15f0c:	bl	114a8 <fdopendir@plt>
   15f10:	cmp	r0, #0
   15f14:	beq	15f20 <__assert_fail@plt+0x49c4>
   15f18:	str	r5, [r4]
   15f1c:	pop	{r4, r5, r6, sl, fp, pc}
   15f20:	bl	11400 <__errno_location@plt>
   15f24:	ldr	r6, [r0]
   15f28:	mov	r4, r0
   15f2c:	mov	r0, r5
   15f30:	bl	11520 <close@plt>
   15f34:	mov	r0, #0
   15f38:	str	r6, [r4]
   15f3c:	pop	{r4, r5, r6, sl, fp, pc}
   15f40:	push	{r4, r5, fp, lr}
   15f44:	add	fp, sp, #8
   15f48:	cmp	r0, #0
   15f4c:	beq	15fe0 <__assert_fail@plt+0x4a84>
   15f50:	mov	r1, #47	; 0x2f
   15f54:	mov	r4, r0
   15f58:	bl	11484 <strrchr@plt>
   15f5c:	cmp	r0, #0
   15f60:	mov	r5, r4
   15f64:	addne	r5, r0, #1
   15f68:	sub	r0, r5, r4
   15f6c:	cmp	r0, #7
   15f70:	blt	15fc4 <__assert_fail@plt+0x4a68>
   15f74:	movw	r1, #43156	; 0xa894
   15f78:	sub	r0, r5, #7
   15f7c:	mov	r2, #7
   15f80:	movt	r1, #1
   15f84:	bl	11508 <strncmp@plt>
   15f88:	cmp	r0, #0
   15f8c:	bne	15fc4 <__assert_fail@plt+0x4a68>
   15f90:	movw	r1, #43164	; 0xa89c
   15f94:	mov	r0, r5
   15f98:	mov	r2, #3
   15f9c:	movt	r1, #1
   15fa0:	bl	11508 <strncmp@plt>
   15fa4:	cmp	r0, #0
   15fa8:	beq	15fb4 <__assert_fail@plt+0x4a58>
   15fac:	mov	r4, r5
   15fb0:	b	15fc4 <__assert_fail@plt+0x4a68>
   15fb4:	movw	r0, #45440	; 0xb180
   15fb8:	add	r4, r5, #3
   15fbc:	movt	r0, #2
   15fc0:	str	r4, [r0]
   15fc4:	movw	r0, #45444	; 0xb184
   15fc8:	movt	r0, #2
   15fcc:	str	r4, [r0]
   15fd0:	movw	r0, #45504	; 0xb1c0
   15fd4:	movt	r0, #2
   15fd8:	str	r4, [r0]
   15fdc:	pop	{r4, r5, fp, pc}
   15fe0:	movw	r0, #45456	; 0xb190
   15fe4:	movt	r0, #2
   15fe8:	ldr	r1, [r0]
   15fec:	movw	r0, #43100	; 0xa85c
   15ff0:	movt	r0, #1
   15ff4:	bl	114fc <fputs@plt>
   15ff8:	bl	11514 <abort@plt>
   15ffc:	push	{r4, r5, r6, sl, fp, lr}
   16000:	add	fp, sp, #16
   16004:	mov	r4, r0
   16008:	movw	r0, #45512	; 0xb1c8
   1600c:	movt	r0, #2
   16010:	cmp	r4, #0
   16014:	moveq	r4, r0
   16018:	bl	11400 <__errno_location@plt>
   1601c:	ldr	r6, [r0]
   16020:	mov	r5, r0
   16024:	mov	r0, r4
   16028:	mov	r1, #48	; 0x30
   1602c:	bl	186b4 <__assert_fail@plt+0x7158>
   16030:	str	r6, [r5]
   16034:	pop	{r4, r5, r6, sl, fp, pc}
   16038:	movw	r1, #45512	; 0xb1c8
   1603c:	cmp	r0, #0
   16040:	movt	r1, #2
   16044:	movne	r1, r0
   16048:	ldr	r0, [r1]
   1604c:	bx	lr
   16050:	movw	r2, #45512	; 0xb1c8
   16054:	cmp	r0, #0
   16058:	movt	r2, #2
   1605c:	movne	r2, r0
   16060:	str	r1, [r2]
   16064:	bx	lr
   16068:	movw	r3, #45512	; 0xb1c8
   1606c:	cmp	r0, #0
   16070:	and	r2, r2, #1
   16074:	movt	r3, #2
   16078:	movne	r3, r0
   1607c:	ubfx	r0, r1, #5, #3
   16080:	and	r1, r1, #31
   16084:	add	ip, r3, r0, lsl #2
   16088:	mov	r0, #1
   1608c:	ldr	r3, [ip, #8]
   16090:	and	r0, r0, r3, lsr r1
   16094:	eor	r2, r0, r2
   16098:	eor	r1, r3, r2, lsl r1
   1609c:	str	r1, [ip, #8]
   160a0:	bx	lr
   160a4:	movw	r2, #45512	; 0xb1c8
   160a8:	cmp	r0, #0
   160ac:	movt	r2, #2
   160b0:	movne	r2, r0
   160b4:	ldr	r0, [r2, #4]
   160b8:	str	r1, [r2, #4]
   160bc:	bx	lr
   160c0:	push	{fp, lr}
   160c4:	mov	fp, sp
   160c8:	movw	r3, #45512	; 0xb1c8
   160cc:	cmp	r0, #0
   160d0:	movt	r3, #2
   160d4:	movne	r3, r0
   160d8:	cmp	r1, #0
   160dc:	mov	r0, #10
   160e0:	cmpne	r2, #0
   160e4:	str	r0, [r3]
   160e8:	bne	160f0 <__assert_fail@plt+0x4b94>
   160ec:	bl	11514 <abort@plt>
   160f0:	str	r1, [r3, #40]	; 0x28
   160f4:	str	r2, [r3, #44]	; 0x2c
   160f8:	pop	{fp, pc}
   160fc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16100:	add	fp, sp, #28
   16104:	sub	sp, sp, #20
   16108:	mov	r7, r0
   1610c:	ldr	r0, [fp, #8]
   16110:	movw	r5, #45512	; 0xb1c8
   16114:	mov	r8, r3
   16118:	mov	r9, r2
   1611c:	mov	sl, r1
   16120:	movt	r5, #2
   16124:	cmp	r0, #0
   16128:	movne	r5, r0
   1612c:	bl	11400 <__errno_location@plt>
   16130:	ldr	r2, [r5, #40]	; 0x28
   16134:	ldr	r3, [r5, #44]	; 0x2c
   16138:	mov	r4, r0
   1613c:	ldm	r5, {r0, r1}
   16140:	add	r5, r5, #8
   16144:	ldr	r6, [r4]
   16148:	stm	sp, {r0, r1, r5}
   1614c:	mov	r0, r7
   16150:	mov	r1, sl
   16154:	str	r2, [sp, #12]
   16158:	str	r3, [sp, #16]
   1615c:	mov	r2, r9
   16160:	mov	r3, r8
   16164:	bl	16174 <__assert_fail@plt+0x4c18>
   16168:	str	r6, [r4]
   1616c:	sub	sp, fp, #28
   16170:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16174:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16178:	add	fp, sp, #28
   1617c:	sub	sp, sp, #156	; 0x9c
   16180:	mov	r5, r0
   16184:	add	r0, r2, #1
   16188:	mov	r6, r1
   1618c:	mov	sl, r3
   16190:	str	r2, [fp, #-80]	; 0xffffffb0
   16194:	str	r0, [sp, #72]	; 0x48
   16198:	ldr	r0, [fp, #12]
   1619c:	and	r1, r0, #1
   161a0:	str	r1, [sp, #32]
   161a4:	and	r1, r0, #4
   161a8:	str	r1, [sp, #28]
   161ac:	ubfx	r9, r0, #1, #1
   161b0:	bl	1131c <__ctype_get_mb_cur_max@plt>
   161b4:	str	r0, [sp, #40]	; 0x28
   161b8:	ldr	r0, [fp, #24]
   161bc:	ldr	r7, [fp, #8]
   161c0:	mov	r1, #0
   161c4:	mov	lr, #0
   161c8:	str	r5, [fp, #-84]	; 0xffffffac
   161cc:	str	r1, [sp, #60]	; 0x3c
   161d0:	mov	r1, #1
   161d4:	str	r1, [fp, #-48]	; 0xffffffd0
   161d8:	str	r0, [sp, #80]	; 0x50
   161dc:	ldr	r0, [fp, #20]
   161e0:	str	r0, [sp, #76]	; 0x4c
   161e4:	mov	r0, #0
   161e8:	str	r0, [sp, #56]	; 0x38
   161ec:	mov	r0, #0
   161f0:	str	r0, [fp, #-88]	; 0xffffffa8
   161f4:	mov	r0, #0
   161f8:	str	r0, [fp, #-72]	; 0xffffffb8
   161fc:	mov	r0, #0
   16200:	cmp	r7, #10
   16204:	bhi	171e0 <__assert_fail@plt+0x5c84>
   16208:	add	r1, pc, #24
   1620c:	ldr	r4, [fp, #-80]	; 0xffffffb0
   16210:	mov	ip, r6
   16214:	mov	r8, #0
   16218:	mov	r2, #1
   1621c:	mov	r6, #0
   16220:	mov	r3, sl
   16224:	ldr	pc, [r1, r7, lsl #2]
   16228:	andeq	r6, r1, r4, lsl r3
   1622c:	andeq	r6, r1, r8, ror #6
   16230:	andeq	r6, r1, r8, lsr #6
   16234:	andeq	r6, r1, ip, lsl #6
   16238:	andeq	r6, r1, ip, asr r3
   1623c:	muleq	r1, r0, r3
   16240:	andeq	r6, r1, r8, lsr r3
   16244:	andeq	r6, r1, r4, lsl r4
   16248:	andeq	r6, r1, r4, asr r2
   1624c:	andeq	r6, r1, r4, asr r2
   16250:	muleq	r1, r4, r2
   16254:	movw	r0, #43246	; 0xa8ee
   16258:	mov	r1, r7
   1625c:	mov	r6, r5
   16260:	mov	r4, ip
   16264:	mov	r5, lr
   16268:	movt	r0, #1
   1626c:	bl	17944 <__assert_fail@plt+0x63e8>
   16270:	str	r0, [sp, #76]	; 0x4c
   16274:	movw	r0, #43248	; 0xa8f0
   16278:	mov	r1, r7
   1627c:	movt	r0, #1
   16280:	bl	17944 <__assert_fail@plt+0x63e8>
   16284:	mov	lr, r5
   16288:	mov	r5, r6
   1628c:	mov	ip, r4
   16290:	str	r0, [sp, #80]	; 0x50
   16294:	mov	r8, #0
   16298:	tst	r9, #1
   1629c:	str	lr, [sp, #44]	; 0x2c
   162a0:	bne	162d8 <__assert_fail@plt+0x4d7c>
   162a4:	ldr	r0, [sp, #76]	; 0x4c
   162a8:	ldrb	r0, [r0]
   162ac:	cmp	r0, #0
   162b0:	beq	162d8 <__assert_fail@plt+0x4d7c>
   162b4:	ldr	r1, [sp, #76]	; 0x4c
   162b8:	mov	r8, #0
   162bc:	add	r1, r1, #1
   162c0:	cmp	r8, ip
   162c4:	strbcc	r0, [r5, r8]
   162c8:	ldrb	r0, [r1, r8]
   162cc:	add	r8, r8, #1
   162d0:	cmp	r0, #0
   162d4:	bne	162c0 <__assert_fail@plt+0x4d64>
   162d8:	ldr	r6, [sp, #80]	; 0x50
   162dc:	mov	r4, ip
   162e0:	mov	r0, r6
   162e4:	bl	113d0 <strlen@plt>
   162e8:	mov	ip, r4
   162ec:	ldr	r4, [fp, #-80]	; 0xffffffb0
   162f0:	ldr	lr, [sp, #44]	; 0x2c
   162f4:	str	r6, [fp, #-88]	; 0xffffffa8
   162f8:	str	r0, [fp, #-72]	; 0xffffffb8
   162fc:	mov	r2, #1
   16300:	mov	r6, r9
   16304:	mov	r3, sl
   16308:	b	16414 <__assert_fail@plt+0x4eb8>
   1630c:	mov	r0, #1
   16310:	b	16368 <__assert_fail@plt+0x4e0c>
   16314:	mov	r7, #0
   16318:	mov	r8, #0
   1631c:	mov	r2, r0
   16320:	mov	r6, #0
   16324:	b	16414 <__assert_fail@plt+0x4eb8>
   16328:	tst	r9, #1
   1632c:	bne	16368 <__assert_fail@plt+0x4e0c>
   16330:	mov	r2, r0
   16334:	b	163c0 <__assert_fail@plt+0x4e64>
   16338:	mov	r0, #1
   1633c:	mov	r8, #0
   16340:	mov	r7, #5
   16344:	mov	r2, #1
   16348:	str	r0, [fp, #-72]	; 0xffffffb8
   1634c:	movw	r0, #43244	; 0xa8ec
   16350:	movt	r0, #1
   16354:	str	r0, [fp, #-88]	; 0xffffffa8
   16358:	b	16388 <__assert_fail@plt+0x4e2c>
   1635c:	mov	r2, #1
   16360:	tst	r9, #1
   16364:	beq	163c0 <__assert_fail@plt+0x4e64>
   16368:	mov	r1, #1
   1636c:	mov	r8, #0
   16370:	mov	r7, #2
   16374:	mov	r2, r0
   16378:	str	r1, [fp, #-72]	; 0xffffffb8
   1637c:	movw	r1, #43248	; 0xa8f0
   16380:	movt	r1, #1
   16384:	str	r1, [fp, #-88]	; 0xffffffa8
   16388:	mov	r6, #1
   1638c:	b	16414 <__assert_fail@plt+0x4eb8>
   16390:	tst	r9, #1
   16394:	beq	163e4 <__assert_fail@plt+0x4e88>
   16398:	mov	r0, #1
   1639c:	mov	r8, #0
   163a0:	mov	r2, #1
   163a4:	mov	r6, #1
   163a8:	mov	r7, #5
   163ac:	str	r0, [fp, #-72]	; 0xffffffb8
   163b0:	movw	r0, #43244	; 0xa8ec
   163b4:	movt	r0, #1
   163b8:	str	r0, [fp, #-88]	; 0xffffffa8
   163bc:	b	16414 <__assert_fail@plt+0x4eb8>
   163c0:	cmp	ip, #0
   163c4:	mov	r8, #1
   163c8:	mov	r6, #0
   163cc:	mov	r7, #2
   163d0:	movne	r0, #39	; 0x27
   163d4:	strbne	r0, [r5]
   163d8:	movw	r0, #43248	; 0xa8f0
   163dc:	movt	r0, #1
   163e0:	b	16408 <__assert_fail@plt+0x4eac>
   163e4:	cmp	ip, #0
   163e8:	mov	r8, #1
   163ec:	mov	r2, #1
   163f0:	mov	r7, #5
   163f4:	mov	r6, #0
   163f8:	movne	r0, #34	; 0x22
   163fc:	strbne	r0, [r5]
   16400:	movw	r0, #43244	; 0xa8ec
   16404:	movt	r0, #1
   16408:	str	r0, [fp, #-88]	; 0xffffffa8
   1640c:	mov	r0, #1
   16410:	str	r0, [fp, #-72]	; 0xffffffb8
   16414:	ldr	r0, [fp, #-72]	; 0xffffffb8
   16418:	str	r7, [fp, #-68]	; 0xffffffbc
   1641c:	str	r6, [fp, #-76]	; 0xffffffb4
   16420:	str	r2, [sp, #84]	; 0x54
   16424:	cmp	r0, #0
   16428:	movwne	r0, #1
   1642c:	and	r1, r0, r6
   16430:	and	r1, r2, r1
   16434:	str	r1, [sp, #48]	; 0x30
   16438:	sub	r1, r7, #2
   1643c:	clz	r1, r1
   16440:	lsr	r1, r1, #5
   16444:	and	r1, r1, r6
   16448:	str	r1, [sp, #64]	; 0x40
   1644c:	subs	r1, r7, #2
   16450:	eor	r7, r6, #1
   16454:	movwne	r1, #1
   16458:	str	r7, [sp, #92]	; 0x5c
   1645c:	orr	r7, r1, r7
   16460:	and	r1, r1, r2
   16464:	and	r0, r0, r1
   16468:	str	r7, [sp, #68]	; 0x44
   1646c:	mov	r7, #0
   16470:	str	r0, [fp, #-60]	; 0xffffffc4
   16474:	orr	r0, r1, r6
   16478:	ldr	r1, [fp, #16]
   1647c:	eor	r0, r0, #1
   16480:	clz	r1, r1
   16484:	lsr	r1, r1, #5
   16488:	orr	r0, r1, r0
   1648c:	str	r0, [fp, #-64]	; 0xffffffc0
   16490:	eor	r0, r2, #1
   16494:	str	r0, [sp, #52]	; 0x34
   16498:	cmn	r3, #1
   1649c:	beq	164ac <__assert_fail@plt+0x4f50>
   164a0:	cmp	r7, r3
   164a4:	bne	164b8 <__assert_fail@plt+0x4f5c>
   164a8:	b	17014 <__assert_fail@plt+0x5ab8>
   164ac:	ldrb	r0, [r4, r7]
   164b0:	cmp	r0, #0
   164b4:	beq	1701c <__assert_fail@plt+0x5ac0>
   164b8:	ldr	r0, [fp, #-60]	; 0xffffffc4
   164bc:	cmp	r0, #0
   164c0:	beq	16508 <__assert_fail@plt+0x4fac>
   164c4:	ldr	r0, [fp, #-72]	; 0xffffffb8
   164c8:	add	r5, r7, r0
   164cc:	cmp	r0, #2
   164d0:	bcc	1651c <__assert_fail@plt+0x4fc0>
   164d4:	mov	r0, #0
   164d8:	cmn	r3, #1
   164dc:	str	r0, [fp, #-56]	; 0xffffffc8
   164e0:	bne	16524 <__assert_fail@plt+0x4fc8>
   164e4:	mov	r0, r4
   164e8:	mov	r4, ip
   164ec:	mov	r6, lr
   164f0:	bl	113d0 <strlen@plt>
   164f4:	mov	ip, r4
   164f8:	ldr	r4, [fp, #-80]	; 0xffffffb0
   164fc:	mov	lr, r6
   16500:	mov	r3, r0
   16504:	b	16524 <__assert_fail@plt+0x4fc8>
   16508:	mov	r0, #0
   1650c:	mov	sl, r3
   16510:	str	r0, [fp, #-56]	; 0xffffffc8
   16514:	mov	r0, #0
   16518:	b	16590 <__assert_fail@plt+0x5034>
   1651c:	mov	r0, #0
   16520:	str	r0, [fp, #-56]	; 0xffffffc8
   16524:	cmp	r5, r3
   16528:	bls	1653c <__assert_fail@plt+0x4fe0>
   1652c:	ldr	r5, [fp, #-84]	; 0xffffffac
   16530:	mov	r0, #0
   16534:	mov	sl, r3
   16538:	b	16590 <__assert_fail@plt+0x5034>
   1653c:	ldr	r1, [fp, #-88]	; 0xffffffa8
   16540:	ldr	r2, [fp, #-72]	; 0xffffffb8
   16544:	add	r0, r4, r7
   16548:	mov	r5, lr
   1654c:	mov	r6, ip
   16550:	mov	sl, r3
   16554:	bl	113b8 <bcmp@plt>
   16558:	ldr	r2, [sp, #92]	; 0x5c
   1655c:	cmp	r0, #0
   16560:	ldr	r3, [fp, #-84]	; 0xffffffac
   16564:	mov	r1, r0
   16568:	movwne	r1, #1
   1656c:	orr	r1, r1, r2
   16570:	tst	r1, #1
   16574:	beq	170a0 <__assert_fail@plt+0x5b44>
   16578:	ldr	r4, [fp, #-80]	; 0xffffffb0
   1657c:	clz	r0, r0
   16580:	mov	lr, r5
   16584:	mov	ip, r6
   16588:	mov	r5, r3
   1658c:	lsr	r0, r0, #5
   16590:	str	r0, [fp, #-52]	; 0xffffffcc
   16594:	ldrb	r6, [r4, r7]
   16598:	cmp	r6, #126	; 0x7e
   1659c:	bhi	16ac4 <__assert_fail@plt+0x5568>
   165a0:	add	r3, pc, #16
   165a4:	mov	r9, #1
   165a8:	mov	r2, #110	; 0x6e
   165ac:	mov	r0, #97	; 0x61
   165b0:	mov	r1, #0
   165b4:	ldr	pc, [r3, r6, lsl #2]
   165b8:	andeq	r6, r1, r8, lsr #18
   165bc:	andeq	r6, r1, r4, asr #21
   165c0:	andeq	r6, r1, r4, asr #21
   165c4:	andeq	r6, r1, r4, asr #21
   165c8:	andeq	r6, r1, r4, asr #21
   165cc:	andeq	r6, r1, r4, asr #21
   165d0:	andeq	r6, r1, r4, asr #21
   165d4:	andeq	r6, r1, r4, asr #22
   165d8:	andeq	r6, r1, r8, lsl #18
   165dc:	andeq	r6, r1, r0, lsl #18
   165e0:	andeq	r6, r1, r4, lsl r9
   165e4:	andeq	r6, r1, ip, lsr #20
   165e8:	strdeq	r6, [r1], -r8
   165ec:	andeq	r6, r1, r0, lsl r9
   165f0:	andeq	r6, r1, r4, asr #21
   165f4:	andeq	r6, r1, r4, asr #21
   165f8:	andeq	r6, r1, r4, asr #21
   165fc:	andeq	r6, r1, r4, asr #21
   16600:	andeq	r6, r1, r4, asr #21
   16604:	andeq	r6, r1, r4, asr #21
   16608:	andeq	r6, r1, r4, asr #21
   1660c:	andeq	r6, r1, r4, asr #21
   16610:	andeq	r6, r1, r4, asr #21
   16614:	andeq	r6, r1, r4, asr #21
   16618:	andeq	r6, r1, r4, asr #21
   1661c:	andeq	r6, r1, r4, asr #21
   16620:	andeq	r6, r1, r4, asr #21
   16624:	andeq	r6, r1, r4, asr #21
   16628:	andeq	r6, r1, r4, asr #21
   1662c:	andeq	r6, r1, r4, asr #21
   16630:	andeq	r6, r1, r4, asr #21
   16634:	andeq	r6, r1, r4, asr #21
   16638:	andeq	r6, r1, r8, lsr #17
   1663c:	andeq	r6, r1, ip, lsr #17
   16640:	andeq	r6, r1, ip, lsr #17
   16644:	muleq	r1, r0, r8
   16648:	andeq	r6, r1, ip, lsr #17
   1664c:			; <UNDEFINED> instruction: 0x000167b4
   16650:	andeq	r6, r1, ip, lsr #17
   16654:	andeq	r6, r1, r4, lsr sl
   16658:	andeq	r6, r1, ip, lsr #17
   1665c:	andeq	r6, r1, ip, lsr #17
   16660:	andeq	r6, r1, ip, lsr #17
   16664:			; <UNDEFINED> instruction: 0x000167b4
   16668:			; <UNDEFINED> instruction: 0x000167b4
   1666c:			; <UNDEFINED> instruction: 0x000167b4
   16670:			; <UNDEFINED> instruction: 0x000167b4
   16674:			; <UNDEFINED> instruction: 0x000167b4
   16678:			; <UNDEFINED> instruction: 0x000167b4
   1667c:			; <UNDEFINED> instruction: 0x000167b4
   16680:			; <UNDEFINED> instruction: 0x000167b4
   16684:			; <UNDEFINED> instruction: 0x000167b4
   16688:			; <UNDEFINED> instruction: 0x000167b4
   1668c:			; <UNDEFINED> instruction: 0x000167b4
   16690:			; <UNDEFINED> instruction: 0x000167b4
   16694:			; <UNDEFINED> instruction: 0x000167b4
   16698:			; <UNDEFINED> instruction: 0x000167b4
   1669c:			; <UNDEFINED> instruction: 0x000167b4
   166a0:			; <UNDEFINED> instruction: 0x000167b4
   166a4:	andeq	r6, r1, ip, lsr #17
   166a8:	andeq	r6, r1, ip, lsr #17
   166ac:	andeq	r6, r1, ip, lsr #17
   166b0:	andeq	r6, r1, ip, lsr #17
   166b4:	andeq	r6, r1, r0, lsl #20
   166b8:	andeq	r6, r1, r4, asr #21
   166bc:			; <UNDEFINED> instruction: 0x000167b4
   166c0:			; <UNDEFINED> instruction: 0x000167b4
   166c4:			; <UNDEFINED> instruction: 0x000167b4
   166c8:			; <UNDEFINED> instruction: 0x000167b4
   166cc:			; <UNDEFINED> instruction: 0x000167b4
   166d0:			; <UNDEFINED> instruction: 0x000167b4
   166d4:			; <UNDEFINED> instruction: 0x000167b4
   166d8:			; <UNDEFINED> instruction: 0x000167b4
   166dc:			; <UNDEFINED> instruction: 0x000167b4
   166e0:			; <UNDEFINED> instruction: 0x000167b4
   166e4:			; <UNDEFINED> instruction: 0x000167b4
   166e8:			; <UNDEFINED> instruction: 0x000167b4
   166ec:			; <UNDEFINED> instruction: 0x000167b4
   166f0:			; <UNDEFINED> instruction: 0x000167b4
   166f4:			; <UNDEFINED> instruction: 0x000167b4
   166f8:			; <UNDEFINED> instruction: 0x000167b4
   166fc:			; <UNDEFINED> instruction: 0x000167b4
   16700:			; <UNDEFINED> instruction: 0x000167b4
   16704:			; <UNDEFINED> instruction: 0x000167b4
   16708:			; <UNDEFINED> instruction: 0x000167b4
   1670c:			; <UNDEFINED> instruction: 0x000167b4
   16710:			; <UNDEFINED> instruction: 0x000167b4
   16714:			; <UNDEFINED> instruction: 0x000167b4
   16718:			; <UNDEFINED> instruction: 0x000167b4
   1671c:			; <UNDEFINED> instruction: 0x000167b4
   16720:			; <UNDEFINED> instruction: 0x000167b4
   16724:	andeq	r6, r1, ip, lsr #17
   16728:	ldrdeq	r6, [r1], -r4
   1672c:			; <UNDEFINED> instruction: 0x000167b4
   16730:	andeq	r6, r1, ip, lsr #17
   16734:			; <UNDEFINED> instruction: 0x000167b4
   16738:	andeq	r6, r1, ip, lsr #17
   1673c:			; <UNDEFINED> instruction: 0x000167b4
   16740:			; <UNDEFINED> instruction: 0x000167b4
   16744:			; <UNDEFINED> instruction: 0x000167b4
   16748:			; <UNDEFINED> instruction: 0x000167b4
   1674c:			; <UNDEFINED> instruction: 0x000167b4
   16750:			; <UNDEFINED> instruction: 0x000167b4
   16754:			; <UNDEFINED> instruction: 0x000167b4
   16758:			; <UNDEFINED> instruction: 0x000167b4
   1675c:			; <UNDEFINED> instruction: 0x000167b4
   16760:			; <UNDEFINED> instruction: 0x000167b4
   16764:			; <UNDEFINED> instruction: 0x000167b4
   16768:			; <UNDEFINED> instruction: 0x000167b4
   1676c:			; <UNDEFINED> instruction: 0x000167b4
   16770:			; <UNDEFINED> instruction: 0x000167b4
   16774:			; <UNDEFINED> instruction: 0x000167b4
   16778:			; <UNDEFINED> instruction: 0x000167b4
   1677c:			; <UNDEFINED> instruction: 0x000167b4
   16780:			; <UNDEFINED> instruction: 0x000167b4
   16784:			; <UNDEFINED> instruction: 0x000167b4
   16788:			; <UNDEFINED> instruction: 0x000167b4
   1678c:			; <UNDEFINED> instruction: 0x000167b4
   16790:			; <UNDEFINED> instruction: 0x000167b4
   16794:			; <UNDEFINED> instruction: 0x000167b4
   16798:			; <UNDEFINED> instruction: 0x000167b4
   1679c:			; <UNDEFINED> instruction: 0x000167b4
   167a0:			; <UNDEFINED> instruction: 0x000167b4
   167a4:	andeq	r6, r1, r8, ror #16
   167a8:	andeq	r6, r1, ip, lsr #17
   167ac:	andeq	r6, r1, r8, ror #16
   167b0:	muleq	r1, r0, r8
   167b4:	ldr	r0, [fp, #-64]	; 0xffffffc0
   167b8:	tst	r0, #1
   167bc:	bne	167e8 <__assert_fail@plt+0x528c>
   167c0:	ldr	r1, [fp, #16]
   167c4:	ubfx	r0, r6, #5, #3
   167c8:	mov	r2, #1
   167cc:	ldr	r0, [r1, r0, lsl #2]
   167d0:	and	r1, r6, #31
   167d4:	tst	r0, r2, lsl r1
   167d8:	beq	167e8 <__assert_fail@plt+0x528c>
   167dc:	mov	r0, r6
   167e0:	mov	r1, r9
   167e4:	b	167fc <__assert_fail@plt+0x52a0>
   167e8:	ldr	r0, [fp, #-52]	; 0xffffffcc
   167ec:	mov	r1, r9
   167f0:	cmp	r0, #0
   167f4:	mov	r0, r6
   167f8:	beq	16f48 <__assert_fail@plt+0x59ec>
   167fc:	ldr	r2, [fp, #-76]	; 0xffffffb4
   16800:	tst	r2, #1
   16804:	bne	170e4 <__assert_fail@plt+0x5b88>
   16808:	ldr	r2, [fp, #-68]	; 0xffffffbc
   1680c:	subs	r2, r2, #2
   16810:	movwne	r2, #1
   16814:	orr	r2, r2, lr
   16818:	tst	r2, #1
   1681c:	bne	16854 <__assert_fail@plt+0x52f8>
   16820:	cmp	r8, ip
   16824:	mov	lr, #1
   16828:	movcc	r2, #39	; 0x27
   1682c:	strbcc	r2, [r5, r8]
   16830:	add	r2, r8, #1
   16834:	cmp	r2, ip
   16838:	movcc	r3, #36	; 0x24
   1683c:	strbcc	r3, [r5, r2]
   16840:	add	r2, r8, #2
   16844:	add	r8, r8, #3
   16848:	cmp	r2, ip
   1684c:	movcc	r3, #39	; 0x27
   16850:	strbcc	r3, [r5, r2]
   16854:	cmp	r8, ip
   16858:	movcc	r2, #92	; 0x5c
   1685c:	strbcc	r2, [r5, r8]
   16860:	add	r8, r8, #1
   16864:	b	16f88 <__assert_fail@plt+0x5a2c>
   16868:	cmp	sl, #1
   1686c:	beq	16890 <__assert_fail@plt+0x5334>
   16870:	mov	r9, #0
   16874:	cmn	sl, #1
   16878:	bne	1689c <__assert_fail@plt+0x5340>
   1687c:	ldrb	r0, [r4, #1]
   16880:	cmp	r0, #0
   16884:	beq	16890 <__assert_fail@plt+0x5334>
   16888:	mvn	sl, #0
   1688c:	b	1689c <__assert_fail@plt+0x5340>
   16890:	mov	r9, #0
   16894:	cmp	r7, #0
   16898:	beq	168a8 <__assert_fail@plt+0x534c>
   1689c:	mov	r0, #0
   168a0:	str	r0, [fp, #-56]	; 0xffffffc8
   168a4:	b	167b4 <__assert_fail@plt+0x5258>
   168a8:	mov	r1, #1
   168ac:	ldr	r0, [fp, #-68]	; 0xffffffbc
   168b0:	cmp	r0, #2
   168b4:	bne	168cc <__assert_fail@plt+0x5370>
   168b8:	ldr	r0, [fp, #-76]	; 0xffffffb4
   168bc:	mov	r9, r1
   168c0:	tst	r0, #1
   168c4:	beq	167b4 <__assert_fail@plt+0x5258>
   168c8:	b	170e4 <__assert_fail@plt+0x5b88>
   168cc:	mov	r9, r1
   168d0:	b	167b4 <__assert_fail@plt+0x5258>
   168d4:	ldr	r0, [fp, #-68]	; 0xffffffbc
   168d8:	cmp	r0, #2
   168dc:	bne	16b20 <__assert_fail@plt+0x55c4>
   168e0:	ldr	r0, [fp, #-76]	; 0xffffffb4
   168e4:	tst	r0, #1
   168e8:	bne	170e4 <__assert_fail@plt+0x5b88>
   168ec:	mov	r0, #0
   168f0:	str	r0, [fp, #-56]	; 0xffffffc8
   168f4:	b	16b38 <__assert_fail@plt+0x55dc>
   168f8:	mov	r0, #102	; 0x66
   168fc:	b	16b44 <__assert_fail@plt+0x55e8>
   16900:	mov	r2, #116	; 0x74
   16904:	b	16914 <__assert_fail@plt+0x53b8>
   16908:	mov	r0, #98	; 0x62
   1690c:	b	16b44 <__assert_fail@plt+0x55e8>
   16910:	mov	r2, #114	; 0x72
   16914:	ldr	r0, [sp, #68]	; 0x44
   16918:	tst	r0, #1
   1691c:	mov	r0, r2
   16920:	bne	16b44 <__assert_fail@plt+0x55e8>
   16924:	b	170e4 <__assert_fail@plt+0x5b88>
   16928:	ldr	r0, [sp, #84]	; 0x54
   1692c:	tst	r0, #1
   16930:	beq	16b64 <__assert_fail@plt+0x5608>
   16934:	ldr	r0, [fp, #-76]	; 0xffffffb4
   16938:	tst	r0, #1
   1693c:	bne	171d0 <__assert_fail@plt+0x5c74>
   16940:	ldr	r0, [fp, #-68]	; 0xffffffbc
   16944:	mov	r2, sl
   16948:	subs	r0, r0, #2
   1694c:	movwne	r0, #1
   16950:	orr	r0, r0, lr
   16954:	tst	r0, #1
   16958:	bne	16990 <__assert_fail@plt+0x5434>
   1695c:	cmp	r8, ip
   16960:	mov	lr, #1
   16964:	movcc	r0, #39	; 0x27
   16968:	strbcc	r0, [r5, r8]
   1696c:	add	r0, r8, #1
   16970:	cmp	r0, ip
   16974:	movcc	r1, #36	; 0x24
   16978:	strbcc	r1, [r5, r0]
   1697c:	add	r0, r8, #2
   16980:	add	r8, r8, #3
   16984:	cmp	r0, ip
   16988:	movcc	r1, #39	; 0x27
   1698c:	strbcc	r1, [r5, r0]
   16990:	mov	r1, #1
   16994:	cmp	r8, ip
   16998:	mov	r9, #0
   1699c:	mov	r6, #48	; 0x30
   169a0:	str	r1, [fp, #-56]	; 0xffffffc8
   169a4:	ldr	r1, [fp, #-68]	; 0xffffffbc
   169a8:	movcc	r0, #92	; 0x5c
   169ac:	strbcc	r0, [r5, r8]
   169b0:	add	r0, r8, #1
   169b4:	cmp	r1, #2
   169b8:	beq	16cc0 <__assert_fail@plt+0x5764>
   169bc:	add	r1, r7, #1
   169c0:	cmp	r1, r2
   169c4:	bcs	16cc0 <__assert_fail@plt+0x5764>
   169c8:	ldrb	r1, [r4, r1]
   169cc:	sub	r1, r1, #48	; 0x30
   169d0:	uxtb	r1, r1
   169d4:	cmp	r1, #9
   169d8:	bhi	16cc0 <__assert_fail@plt+0x5764>
   169dc:	cmp	r0, ip
   169e0:	movcc	r1, #48	; 0x30
   169e4:	strbcc	r1, [r5, r0]
   169e8:	add	r0, r8, #2
   169ec:	add	r8, r8, #3
   169f0:	cmp	r0, ip
   169f4:	movcc	r1, #48	; 0x30
   169f8:	strbcc	r1, [r5, r0]
   169fc:	b	167b4 <__assert_fail@plt+0x5258>
   16a00:	ldr	r0, [fp, #-68]	; 0xffffffbc
   16a04:	mov	r6, #63	; 0x3f
   16a08:	cmp	r0, #5
   16a0c:	beq	16cc8 <__assert_fail@plt+0x576c>
   16a10:	mov	r1, #0
   16a14:	cmp	r0, #2
   16a18:	str	r1, [fp, #-56]	; 0xffffffc8
   16a1c:	bne	16d7c <__assert_fail@plt+0x5820>
   16a20:	ldr	r0, [fp, #-76]	; 0xffffffb4
   16a24:	mov	r9, #0
   16a28:	b	168c0 <__assert_fail@plt+0x5364>
   16a2c:	mov	r0, #118	; 0x76
   16a30:	b	16b44 <__assert_fail@plt+0x55e8>
   16a34:	mov	r0, #1
   16a38:	mov	r6, #39	; 0x27
   16a3c:	str	r0, [sp, #60]	; 0x3c
   16a40:	ldr	r0, [fp, #-68]	; 0xffffffbc
   16a44:	cmp	r0, #2
   16a48:	bne	16abc <__assert_fail@plt+0x5560>
   16a4c:	ldr	r0, [fp, #-76]	; 0xffffffb4
   16a50:	tst	r0, #1
   16a54:	bne	170e4 <__assert_fail@plt+0x5b88>
   16a58:	ldr	r2, [sp, #56]	; 0x38
   16a5c:	clz	r1, ip
   16a60:	mov	lr, #0
   16a64:	lsr	r1, r1, #5
   16a68:	cmp	r2, #0
   16a6c:	mov	r0, r2
   16a70:	movwne	r0, #1
   16a74:	orrs	r0, r0, r1
   16a78:	moveq	r2, ip
   16a7c:	moveq	ip, r0
   16a80:	cmp	r8, ip
   16a84:	str	r2, [sp, #56]	; 0x38
   16a88:	movcc	r0, #39	; 0x27
   16a8c:	strbcc	r0, [r5, r8]
   16a90:	add	r0, r8, #1
   16a94:	cmp	r0, ip
   16a98:	movcc	r1, #92	; 0x5c
   16a9c:	strbcc	r1, [r5, r0]
   16aa0:	add	r0, r8, #2
   16aa4:	add	r8, r8, #3
   16aa8:	cmp	r0, ip
   16aac:	movcc	r1, #39	; 0x27
   16ab0:	strbcc	r1, [r5, r0]
   16ab4:	mov	r0, #0
   16ab8:	str	r0, [fp, #-56]	; 0xffffffc8
   16abc:	mov	r9, #1
   16ac0:	b	167b4 <__assert_fail@plt+0x5258>
   16ac4:	ldr	r0, [sp, #40]	; 0x28
   16ac8:	str	lr, [sp, #44]	; 0x2c
   16acc:	str	ip, [sp, #88]	; 0x58
   16ad0:	cmp	r0, #1
   16ad4:	bne	16b84 <__assert_fail@plt+0x5628>
   16ad8:	str	sl, [sp, #36]	; 0x24
   16adc:	bl	113a0 <__ctype_b_loc@plt>
   16ae0:	ldr	r0, [r0]
   16ae4:	ldr	r4, [fp, #-80]	; 0xffffffb0
   16ae8:	mov	r1, #1
   16aec:	add	r0, r0, r6, lsl #1
   16af0:	ldrb	r0, [r0, #1]
   16af4:	ubfx	r9, r0, #6, #1
   16af8:	ldr	r0, [sp, #52]	; 0x34
   16afc:	ldr	lr, [sp, #44]	; 0x2c
   16b00:	cmp	r1, #1
   16b04:	orr	r3, r9, r0
   16b08:	bhi	16d84 <__assert_fail@plt+0x5828>
   16b0c:	tst	r3, #1
   16b10:	beq	16d84 <__assert_fail@plt+0x5828>
   16b14:	ldr	sl, [sp, #36]	; 0x24
   16b18:	ldr	ip, [sp, #88]	; 0x58
   16b1c:	b	167b4 <__assert_fail@plt+0x5258>
   16b20:	ldr	r1, [sp, #48]	; 0x30
   16b24:	mov	r0, #0
   16b28:	str	r0, [fp, #-56]	; 0xffffffc8
   16b2c:	mov	r0, #92	; 0x5c
   16b30:	cmp	r1, #0
   16b34:	beq	16b44 <__assert_fail@plt+0x55e8>
   16b38:	mov	r6, #92	; 0x5c
   16b3c:	mov	r9, #0
   16b40:	b	16f48 <__assert_fail@plt+0x59ec>
   16b44:	mov	r1, #0
   16b48:	mov	r9, #0
   16b4c:	str	r1, [fp, #-56]	; 0xffffffc8
   16b50:	ldr	r1, [sp, #84]	; 0x54
   16b54:	tst	r1, #1
   16b58:	mov	r1, #0
   16b5c:	beq	167b4 <__assert_fail@plt+0x5258>
   16b60:	b	167fc <__assert_fail@plt+0x52a0>
   16b64:	ldr	r0, [sp, #32]
   16b68:	mov	r6, #0
   16b6c:	mov	r9, #0
   16b70:	cmp	r0, #0
   16b74:	mov	r0, #0
   16b78:	str	r0, [fp, #-56]	; 0xffffffc8
   16b7c:	beq	167b4 <__assert_fail@plt+0x5258>
   16b80:	b	16fa0 <__assert_fail@plt+0x5a44>
   16b84:	mov	r0, #0
   16b88:	cmn	sl, #1
   16b8c:	sub	r3, fp, #40	; 0x28
   16b90:	str	r0, [fp, #-36]	; 0xffffffdc
   16b94:	str	r0, [fp, #-40]	; 0xffffffd8
   16b98:	bne	16bb0 <__assert_fail@plt+0x5654>
   16b9c:	mov	r0, r4
   16ba0:	bl	113d0 <strlen@plt>
   16ba4:	ldr	r4, [fp, #-80]	; 0xffffffb0
   16ba8:	sub	r3, fp, #40	; 0x28
   16bac:	mov	sl, r0
   16bb0:	ldr	r0, [sp, #72]	; 0x48
   16bb4:	mov	r9, #1
   16bb8:	mov	r1, #0
   16bbc:	str	sl, [sp, #36]	; 0x24
   16bc0:	add	r0, r0, r7
   16bc4:	str	r0, [sp, #20]
   16bc8:	add	r0, r1, r7
   16bcc:	str	r1, [sp, #24]
   16bd0:	add	r1, r4, r0
   16bd4:	mov	r4, r0
   16bd8:	sub	r2, sl, r0
   16bdc:	sub	r0, fp, #44	; 0x2c
   16be0:	bl	192e4 <__assert_fail@plt+0x7d88>
   16be4:	cmp	r0, #0
   16be8:	beq	16ff4 <__assert_fail@plt+0x5a98>
   16bec:	cmn	r0, #1
   16bf0:	beq	16fac <__assert_fail@plt+0x5a50>
   16bf4:	ldr	r2, [sp, #36]	; 0x24
   16bf8:	cmn	r0, #2
   16bfc:	beq	16fb4 <__assert_fail@plt+0x5a58>
   16c00:	ldr	r2, [sp, #64]	; 0x40
   16c04:	ldr	ip, [sp, #88]	; 0x58
   16c08:	ldr	r4, [sp, #84]	; 0x54
   16c0c:	ldr	lr, [fp, #-48]	; 0xffffffd0
   16c10:	cmp	r0, #2
   16c14:	mov	r1, #0
   16c18:	movwcc	r1, #1
   16c1c:	eor	r2, r2, #1
   16c20:	orrs	r1, r2, r1
   16c24:	bne	16c74 <__assert_fail@plt+0x5718>
   16c28:	ldr	r1, [sp, #24]
   16c2c:	ldr	r2, [sp, #20]
   16c30:	add	r1, r2, r1
   16c34:	sub	r2, r0, #1
   16c38:	ldrb	r3, [r1]
   16c3c:	sub	r5, r3, #94	; 0x5e
   16c40:	cmp	r5, #30
   16c44:	bhi	16c5c <__assert_fail@plt+0x5700>
   16c48:	mov	r4, #1
   16c4c:	mov	sl, #1073741829	; 0x40000005
   16c50:	tst	sl, r4, lsl r5
   16c54:	ldr	r4, [sp, #84]	; 0x54
   16c58:	bne	170bc <__assert_fail@plt+0x5b60>
   16c5c:	sub	r3, r3, #91	; 0x5b
   16c60:	cmp	r3, #2
   16c64:	bcc	170bc <__assert_fail@plt+0x5b60>
   16c68:	add	r1, r1, #1
   16c6c:	subs	r2, r2, #1
   16c70:	bne	16c38 <__assert_fail@plt+0x56dc>
   16c74:	ldr	r5, [sp, #24]
   16c78:	str	lr, [fp, #-48]	; 0xffffffd0
   16c7c:	add	r5, r0, r5
   16c80:	ldr	r0, [fp, #-44]	; 0xffffffd4
   16c84:	bl	112f8 <iswprint@plt>
   16c88:	cmp	r0, #0
   16c8c:	sub	r4, fp, #40	; 0x28
   16c90:	movwne	r0, #1
   16c94:	and	r9, r9, r0
   16c98:	mov	r0, r4
   16c9c:	bl	112b0 <mbsinit@plt>
   16ca0:	mov	r1, r5
   16ca4:	mov	r3, r4
   16ca8:	ldr	sl, [sp, #36]	; 0x24
   16cac:	ldr	r5, [fp, #-84]	; 0xffffffac
   16cb0:	ldr	r4, [fp, #-80]	; 0xffffffb0
   16cb4:	cmp	r0, #0
   16cb8:	beq	16bc8 <__assert_fail@plt+0x566c>
   16cbc:	b	16af8 <__assert_fail@plt+0x559c>
   16cc0:	mov	r8, r0
   16cc4:	b	167b4 <__assert_fail@plt+0x5258>
   16cc8:	mov	r0, #0
   16ccc:	str	r0, [fp, #-56]	; 0xffffffc8
   16cd0:	ldr	r0, [sp, #28]
   16cd4:	cmp	r0, #0
   16cd8:	beq	16d7c <__assert_fail@plt+0x5820>
   16cdc:	add	r0, r7, #2
   16ce0:	mov	r1, sl
   16ce4:	cmp	r0, sl
   16ce8:	bcs	16d7c <__assert_fail@plt+0x5820>
   16cec:	add	r1, r7, r4
   16cf0:	ldrb	r1, [r1, #1]
   16cf4:	cmp	r1, #63	; 0x3f
   16cf8:	bne	16d7c <__assert_fail@plt+0x5820>
   16cfc:	ldrb	r9, [r4, r0]
   16d00:	sub	r2, r9, #33	; 0x21
   16d04:	cmp	r2, #29
   16d08:	bhi	16d7c <__assert_fail@plt+0x5820>
   16d0c:	mov	r1, r4
   16d10:	movw	r4, #20929	; 0x51c1
   16d14:	mov	r3, #1
   16d18:	movt	r4, #14336	; 0x3800
   16d1c:	tst	r4, r3, lsl r2
   16d20:	beq	17008 <__assert_fail@plt+0x5aac>
   16d24:	ldr	r2, [fp, #-76]	; 0xffffffb4
   16d28:	tst	r2, #1
   16d2c:	bne	171d8 <__assert_fail@plt+0x5c7c>
   16d30:	cmp	r8, ip
   16d34:	mov	r4, r1
   16d38:	mov	r7, r0
   16d3c:	mov	r6, r9
   16d40:	movcc	r2, #63	; 0x3f
   16d44:	strbcc	r2, [r5, r8]
   16d48:	add	r2, r8, #1
   16d4c:	cmp	r2, ip
   16d50:	movcc	r3, #34	; 0x22
   16d54:	strbcc	r3, [r5, r2]
   16d58:	add	r2, r8, #2
   16d5c:	cmp	r2, ip
   16d60:	movcc	r3, #34	; 0x22
   16d64:	strbcc	r3, [r5, r2]
   16d68:	add	r2, r8, #3
   16d6c:	add	r8, r8, #4
   16d70:	cmp	r2, ip
   16d74:	movcc	r3, #63	; 0x3f
   16d78:	strbcc	r3, [r5, r2]
   16d7c:	mov	r9, #0
   16d80:	b	167b4 <__assert_fail@plt+0x5258>
   16d84:	ldr	sl, [sp, #36]	; 0x24
   16d88:	add	r0, r1, r7
   16d8c:	mov	r2, #0
   16d90:	str	r3, [sp, #24]
   16d94:	str	r0, [fp, #-56]	; 0xffffffc8
   16d98:	tst	r3, #1
   16d9c:	beq	16dc8 <__assert_fail@plt+0x586c>
   16da0:	ldr	r0, [fp, #-52]	; 0xffffffcc
   16da4:	tst	r0, #1
   16da8:	beq	16e90 <__assert_fail@plt+0x5934>
   16dac:	ldr	r1, [sp, #88]	; 0x58
   16db0:	mov	r0, r3
   16db4:	cmp	r8, r1
   16db8:	movcc	r1, #92	; 0x5c
   16dbc:	strbcc	r1, [r5, r8]
   16dc0:	add	r8, r8, #1
   16dc4:	b	16e94 <__assert_fail@plt+0x5938>
   16dc8:	ldr	r1, [fp, #-76]	; 0xffffffb4
   16dcc:	tst	r1, #1
   16dd0:	bne	170e0 <__assert_fail@plt+0x5b84>
   16dd4:	ldr	r1, [fp, #-68]	; 0xffffffbc
   16dd8:	subs	r2, r1, #2
   16ddc:	movwne	r2, #1
   16de0:	orr	r2, r2, lr
   16de4:	tst	r2, #1
   16de8:	bne	16e2c <__assert_fail@plt+0x58d0>
   16dec:	ldr	r1, [sp, #88]	; 0x58
   16df0:	add	r2, r8, #1
   16df4:	mov	lr, #1
   16df8:	cmp	r8, r1
   16dfc:	movcc	r1, #39	; 0x27
   16e00:	strbcc	r1, [r5, r8]
   16e04:	ldr	r1, [sp, #88]	; 0x58
   16e08:	cmp	r2, r1
   16e0c:	movcc	r1, #36	; 0x24
   16e10:	strbcc	r1, [r5, r2]
   16e14:	ldr	r1, [sp, #88]	; 0x58
   16e18:	add	r2, r8, #2
   16e1c:	add	r8, r8, #3
   16e20:	cmp	r2, r1
   16e24:	movcc	r1, #39	; 0x27
   16e28:	strbcc	r1, [r5, r2]
   16e2c:	ldr	r1, [sp, #88]	; 0x58
   16e30:	add	r2, r8, #1
   16e34:	mov	r0, r3
   16e38:	cmp	r8, r1
   16e3c:	movcc	r1, #92	; 0x5c
   16e40:	strbcc	r1, [r5, r8]
   16e44:	ldr	r1, [sp, #88]	; 0x58
   16e48:	cmp	r2, r1
   16e4c:	bcs	16e60 <__assert_fail@plt+0x5904>
   16e50:	uxtb	r3, r6
   16e54:	mov	r1, #48	; 0x30
   16e58:	orr	r3, r1, r3, lsr #6
   16e5c:	strb	r3, [r5, r2]
   16e60:	ldr	r1, [sp, #88]	; 0x58
   16e64:	add	r2, r8, #2
   16e68:	add	r8, r8, #3
   16e6c:	cmp	r2, r1
   16e70:	lsrcc	r3, r6, #3
   16e74:	movcc	r1, #6
   16e78:	bficc	r3, r1, #3, #29
   16e7c:	mov	r1, #6
   16e80:	bfi	r6, r1, #3, #29
   16e84:	strbcc	r3, [r5, r2]
   16e88:	mov	r2, #1
   16e8c:	b	16e9c <__assert_fail@plt+0x5940>
   16e90:	mov	r0, r3
   16e94:	mov	r1, #0
   16e98:	str	r1, [fp, #-52]	; 0xffffffcc
   16e9c:	mov	ip, r2
   16ea0:	and	r1, r2, #1
   16ea4:	ldr	r2, [fp, #-56]	; 0xffffffc8
   16ea8:	add	r3, r7, #1
   16eac:	cmp	r2, r3
   16eb0:	bls	16f38 <__assert_fail@plt+0x59dc>
   16eb4:	cmp	r1, #0
   16eb8:	mvn	r5, lr
   16ebc:	movwne	r1, #1
   16ec0:	orr	r5, r5, r1
   16ec4:	tst	r5, #1
   16ec8:	bne	16f0c <__assert_fail@plt+0x59b0>
   16ecc:	ldr	r1, [sp, #88]	; 0x58
   16ed0:	ldr	r5, [fp, #-84]	; 0xffffffac
   16ed4:	mov	r2, r4
   16ed8:	ldr	r4, [sp, #88]	; 0x58
   16edc:	ldr	r0, [sp, #24]
   16ee0:	mov	lr, #0
   16ee4:	cmp	r8, r1
   16ee8:	movcc	r1, #39	; 0x27
   16eec:	strbcc	r1, [r5, r8]
   16ef0:	add	r1, r8, #1
   16ef4:	add	r8, r8, #2
   16ef8:	cmp	r1, r4
   16efc:	movcc	r4, #39	; 0x27
   16f00:	strbcc	r4, [r5, r1]
   16f04:	mov	r4, r2
   16f08:	b	16f10 <__assert_fail@plt+0x59b4>
   16f0c:	ldr	r5, [fp, #-84]	; 0xffffffac
   16f10:	ldr	r1, [sp, #88]	; 0x58
   16f14:	mov	r2, ip
   16f18:	cmp	r8, r1
   16f1c:	ldr	r1, [sp, #72]	; 0x48
   16f20:	strbcc	r6, [r5, r8]
   16f24:	add	r8, r8, #1
   16f28:	ldrb	r6, [r1, r7]
   16f2c:	mov	r7, r3
   16f30:	mov	r3, r0
   16f34:	b	16d98 <__assert_fail@plt+0x583c>
   16f38:	ldr	ip, [sp, #88]	; 0x58
   16f3c:	cmp	r1, #0
   16f40:	movwne	r1, #1
   16f44:	str	r1, [fp, #-56]	; 0xffffffc8
   16f48:	ldr	r0, [fp, #-56]	; 0xffffffc8
   16f4c:	cmp	r0, #0
   16f50:	bne	16f80 <__assert_fail@plt+0x5a24>
   16f54:	tst	lr, #1
   16f58:	beq	16f80 <__assert_fail@plt+0x5a24>
   16f5c:	cmp	r8, ip
   16f60:	mov	lr, #0
   16f64:	movcc	r0, #39	; 0x27
   16f68:	strbcc	r0, [r5, r8]
   16f6c:	add	r0, r8, #1
   16f70:	add	r8, r8, #2
   16f74:	cmp	r0, ip
   16f78:	movcc	r1, #39	; 0x27
   16f7c:	strbcc	r1, [r5, r0]
   16f80:	mov	r1, r9
   16f84:	mov	r0, r6
   16f88:	cmp	r8, ip
   16f8c:	strbcc	r0, [r5, r8]
   16f90:	ldr	r0, [fp, #-48]	; 0xffffffd0
   16f94:	add	r8, r8, #1
   16f98:	and	r0, r0, r1
   16f9c:	str	r0, [fp, #-48]	; 0xffffffd0
   16fa0:	mov	r3, sl
   16fa4:	add	r7, r7, #1
   16fa8:	b	16498 <__assert_fail@plt+0x4f3c>
   16fac:	mov	r9, #0
   16fb0:	b	16ff4 <__assert_fail@plt+0x5a98>
   16fb4:	mov	r9, #0
   16fb8:	cmp	r2, r4
   16fbc:	bls	16ff4 <__assert_fail@plt+0x5a98>
   16fc0:	ldr	r4, [fp, #-80]	; 0xffffffb0
   16fc4:	ldr	r1, [sp, #24]
   16fc8:	add	r0, r4, r7
   16fcc:	mov	r3, r1
   16fd0:	ldrb	r1, [r0, r1]
   16fd4:	cmp	r1, #0
   16fd8:	beq	17000 <__assert_fail@plt+0x5aa4>
   16fdc:	add	r3, r3, #1
   16fe0:	add	r1, r7, r3
   16fe4:	cmp	r1, r2
   16fe8:	mov	r1, r3
   16fec:	bcc	16fcc <__assert_fail@plt+0x5a70>
   16ff0:	b	16af8 <__assert_fail@plt+0x559c>
   16ff4:	ldr	r4, [fp, #-80]	; 0xffffffb0
   16ff8:	ldr	r1, [sp, #24]
   16ffc:	b	16af8 <__assert_fail@plt+0x559c>
   17000:	mov	r1, r3
   17004:	b	16af8 <__assert_fail@plt+0x559c>
   17008:	mov	r9, #0
   1700c:	mov	r4, r1
   17010:	b	167b4 <__assert_fail@plt+0x5258>
   17014:	mov	sl, r7
   17018:	b	17020 <__assert_fail@plt+0x5ac4>
   1701c:	mvn	sl, #0
   17020:	ldr	r1, [fp, #-68]	; 0xffffffbc
   17024:	ldr	r2, [fp, #-76]	; 0xffffffb4
   17028:	eor	r0, r1, #2
   1702c:	orr	r0, r0, r8
   17030:	clz	r0, r0
   17034:	lsr	r0, r0, #5
   17038:	tst	r2, r0
   1703c:	bne	170e4 <__assert_fail@plt+0x5b88>
   17040:	subs	r0, r1, #2
   17044:	movwne	r0, #1
   17048:	orr	r0, r2, r0
   1704c:	tst	r0, #1
   17050:	ldreq	r0, [sp, #60]	; 0x3c
   17054:	ldreq	r1, [fp, #-48]	; 0xffffffd0
   17058:	eoreq	r0, r0, #1
   1705c:	tsteq	r0, #1
   17060:	bne	17178 <__assert_fail@plt+0x5c1c>
   17064:	tst	r1, #1
   17068:	bne	17144 <__assert_fail@plt+0x5be8>
   1706c:	ldr	r6, [sp, #56]	; 0x38
   17070:	mov	r9, #0
   17074:	cmp	r6, #0
   17078:	beq	17170 <__assert_fail@plt+0x5c14>
   1707c:	ldr	r0, [sp, #84]	; 0x54
   17080:	mov	r1, #0
   17084:	mov	r7, #2
   17088:	cmp	ip, #0
   1708c:	str	r1, [fp, #-48]	; 0xffffffd0
   17090:	mov	r1, #0
   17094:	str	r1, [fp, #-76]	; 0xffffffb4
   17098:	beq	16200 <__assert_fail@plt+0x4ca4>
   1709c:	b	17178 <__assert_fail@plt+0x5c1c>
   170a0:	ldr	r4, [fp, #-80]	; 0xffffffb0
   170a4:	ldr	r1, [fp, #12]
   170a8:	ldr	r2, [fp, #-68]	; 0xffffffbc
   170ac:	mov	r5, r3
   170b0:	mov	ip, r6
   170b4:	mov	r3, sl
   170b8:	b	17108 <__assert_fail@plt+0x5bac>
   170bc:	tst	r4, #1
   170c0:	ldr	r5, [fp, #-84]	; 0xffffffac
   170c4:	ldr	r4, [fp, #-80]	; 0xffffffb0
   170c8:	ldr	r1, [fp, #12]
   170cc:	ldr	r3, [sp, #36]	; 0x24
   170d0:	mov	r0, #2
   170d4:	movwne	r0, #4
   170d8:	mov	r2, r0
   170dc:	b	17108 <__assert_fail@plt+0x5bac>
   170e0:	ldr	ip, [sp, #88]	; 0x58
   170e4:	ldr	r1, [sp, #84]	; 0x54
   170e8:	mov	r0, #2
   170ec:	tst	r1, #1
   170f0:	movwne	r0, #4
   170f4:	ldr	r2, [fp, #-68]	; 0xffffffbc
   170f8:	ldr	r1, [fp, #12]
   170fc:	mov	r3, sl
   17100:	cmp	r2, #2
   17104:	moveq	r2, r0
   17108:	mov	r0, #0
   1710c:	bic	r1, r1, #2
   17110:	str	r2, [sp]
   17114:	mov	r2, r4
   17118:	str	r0, [sp, #8]
   1711c:	ldr	r0, [sp, #76]	; 0x4c
   17120:	str	r1, [sp, #4]
   17124:	mov	r1, ip
   17128:	str	r0, [sp, #12]
   1712c:	ldr	r0, [sp, #80]	; 0x50
   17130:	str	r0, [sp, #16]
   17134:	mov	r0, r5
   17138:	bl	16174 <__assert_fail@plt+0x4c18>
   1713c:	mov	r8, r0
   17140:	b	171c4 <__assert_fail@plt+0x5c68>
   17144:	mov	r0, #5
   17148:	ldr	r1, [sp, #56]	; 0x38
   1714c:	ldr	r2, [fp, #-80]	; 0xffffffb0
   17150:	mov	r3, sl
   17154:	str	r0, [sp]
   17158:	ldr	r0, [fp, #12]
   1715c:	str	r0, [sp, #4]
   17160:	ldr	r0, [fp, #16]
   17164:	str	r0, [sp, #8]
   17168:	ldr	r0, [sp, #76]	; 0x4c
   1716c:	b	17128 <__assert_fail@plt+0x5bcc>
   17170:	mov	r0, #0
   17174:	str	r0, [fp, #-76]	; 0xffffffb4
   17178:	ldr	r1, [fp, #-88]	; 0xffffffa8
   1717c:	cmp	r1, #0
   17180:	beq	171b8 <__assert_fail@plt+0x5c5c>
   17184:	ldr	r0, [fp, #-76]	; 0xffffffb4
   17188:	tst	r0, #1
   1718c:	bne	171b8 <__assert_fail@plt+0x5c5c>
   17190:	ldrb	r0, [r1]
   17194:	cmp	r0, #0
   17198:	beq	171b8 <__assert_fail@plt+0x5c5c>
   1719c:	add	r1, r1, #1
   171a0:	cmp	r8, ip
   171a4:	strbcc	r0, [r5, r8]
   171a8:	add	r8, r8, #1
   171ac:	ldrb	r0, [r1], #1
   171b0:	cmp	r0, #0
   171b4:	bne	171a0 <__assert_fail@plt+0x5c44>
   171b8:	cmp	r8, ip
   171bc:	movcc	r0, #0
   171c0:	strbcc	r0, [r5, r8]
   171c4:	mov	r0, r8
   171c8:	sub	sp, fp, #28
   171cc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   171d0:	mov	r0, #4
   171d4:	b	170f4 <__assert_fail@plt+0x5b98>
   171d8:	mov	r4, r1
   171dc:	b	170e4 <__assert_fail@plt+0x5b88>
   171e0:	bl	11514 <abort@plt>
   171e4:	mov	r3, r2
   171e8:	mov	r2, #0
   171ec:	b	171f0 <__assert_fail@plt+0x5c94>
   171f0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   171f4:	add	fp, sp, #28
   171f8:	sub	sp, sp, #36	; 0x24
   171fc:	movw	r8, #45512	; 0xb1c8
   17200:	cmp	r3, #0
   17204:	mov	r4, r2
   17208:	str	r2, [sp, #24]
   1720c:	mov	r5, r1
   17210:	mov	r6, r0
   17214:	str	r0, [sp, #20]
   17218:	movt	r8, #2
   1721c:	movne	r8, r3
   17220:	bl	11400 <__errno_location@plt>
   17224:	str	r0, [sp, #28]
   17228:	ldr	r1, [r8, #40]	; 0x28
   1722c:	ldr	r2, [r8, #44]	; 0x2c
   17230:	ldr	r7, [r0]
   17234:	cmp	r4, #0
   17238:	add	sl, r8, #8
   1723c:	mov	r0, #0
   17240:	ldm	r8, {r3, r9}
   17244:	orreq	r9, r9, #1
   17248:	stm	sp, {r3, r9, sl}
   1724c:	str	r1, [sp, #12]
   17250:	str	r2, [sp, #16]
   17254:	mov	r1, #0
   17258:	mov	r2, r6
   1725c:	mov	r3, r5
   17260:	str	r7, [sp, #32]
   17264:	mov	r7, r5
   17268:	bl	16174 <__assert_fail@plt+0x4c18>
   1726c:	add	r4, r0, #1
   17270:	mov	r5, r0
   17274:	mov	r0, r4
   17278:	bl	18394 <__assert_fail@plt+0x6e38>
   1727c:	mov	r6, r0
   17280:	ldr	r0, [r8]
   17284:	ldr	r2, [r8, #44]	; 0x2c
   17288:	ldr	r1, [r8, #40]	; 0x28
   1728c:	mov	r3, r7
   17290:	stm	sp, {r0, r9, sl}
   17294:	str	r2, [sp, #16]
   17298:	ldr	r2, [sp, #20]
   1729c:	str	r1, [sp, #12]
   172a0:	mov	r0, r6
   172a4:	mov	r1, r4
   172a8:	bl	16174 <__assert_fail@plt+0x4c18>
   172ac:	ldr	r0, [sp, #24]
   172b0:	ldr	r1, [sp, #32]
   172b4:	ldr	r2, [sp, #28]
   172b8:	cmp	r0, #0
   172bc:	str	r1, [r2]
   172c0:	strne	r5, [r0]
   172c4:	mov	r0, r6
   172c8:	sub	sp, fp, #28
   172cc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   172d0:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   172d4:	add	fp, sp, #24
   172d8:	movw	r5, #45380	; 0xb144
   172dc:	movw	r8, #45376	; 0xb140
   172e0:	movt	r5, #2
   172e4:	movt	r8, #2
   172e8:	ldr	r0, [r5]
   172ec:	ldr	r4, [r8]
   172f0:	cmp	r0, #2
   172f4:	blt	17320 <__assert_fail@plt+0x5dc4>
   172f8:	add	r7, r4, #12
   172fc:	mov	r6, #0
   17300:	ldr	r0, [r7, r6, lsl #3]
   17304:	bl	12db8 <__assert_fail@plt+0x185c>
   17308:	ldr	r1, [r5]
   1730c:	add	r2, r6, #2
   17310:	add	r0, r6, #1
   17314:	mov	r6, r0
   17318:	cmp	r2, r1
   1731c:	blt	17300 <__assert_fail@plt+0x5da4>
   17320:	ldr	r0, [r4, #4]
   17324:	movw	r9, #45560	; 0xb1f8
   17328:	movw	r7, #45384	; 0xb148
   1732c:	movt	r9, #2
   17330:	movt	r7, #2
   17334:	cmp	r0, r9
   17338:	beq	17348 <__assert_fail@plt+0x5dec>
   1733c:	bl	12db8 <__assert_fail@plt+0x185c>
   17340:	mov	r0, #256	; 0x100
   17344:	stm	r7, {r0, r9}
   17348:	cmp	r4, r7
   1734c:	beq	1735c <__assert_fail@plt+0x5e00>
   17350:	mov	r0, r4
   17354:	bl	12db8 <__assert_fail@plt+0x185c>
   17358:	str	r7, [r8]
   1735c:	mov	r0, #1
   17360:	str	r0, [r5]
   17364:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   17368:	movw	r3, #45512	; 0xb1c8
   1736c:	mvn	r2, #0
   17370:	movt	r3, #2
   17374:	b	17378 <__assert_fail@plt+0x5e1c>
   17378:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1737c:	add	fp, sp, #28
   17380:	sub	sp, sp, #44	; 0x2c
   17384:	mov	r7, r3
   17388:	str	r2, [sp, #36]	; 0x24
   1738c:	str	r1, [sp, #32]
   17390:	mov	r5, r0
   17394:	bl	11400 <__errno_location@plt>
   17398:	cmp	r5, #0
   1739c:	bmi	1750c <__assert_fail@plt+0x5fb0>
   173a0:	cmn	r5, #-2147483647	; 0x80000001
   173a4:	beq	1750c <__assert_fail@plt+0x5fb0>
   173a8:	movw	r8, #45380	; 0xb144
   173ac:	movw	r4, #45376	; 0xb140
   173b0:	str	r0, [sp, #28]
   173b4:	ldr	r0, [r0]
   173b8:	movt	r8, #2
   173bc:	movt	r4, #2
   173c0:	ldr	r1, [r8]
   173c4:	ldr	r6, [r4]
   173c8:	str	r0, [sp, #24]
   173cc:	cmp	r1, r5
   173d0:	ble	173dc <__assert_fail@plt+0x5e80>
   173d4:	mov	sl, r6
   173d8:	b	17448 <__assert_fail@plt+0x5eec>
   173dc:	movw	r9, #45384	; 0xb148
   173e0:	mov	r0, #8
   173e4:	str	r1, [fp, #-32]	; 0xffffffe0
   173e8:	sub	r1, r5, r1
   173ec:	mvn	r3, #-2147483648	; 0x80000000
   173f0:	movt	r9, #2
   173f4:	str	r0, [sp]
   173f8:	add	r2, r1, #1
   173fc:	sub	r1, fp, #32
   17400:	subs	r0, r6, r9
   17404:	movne	r0, r6
   17408:	bl	184c4 <__assert_fail@plt+0x6f68>
   1740c:	mov	sl, r0
   17410:	cmp	r6, r9
   17414:	str	r0, [r4]
   17418:	bne	17424 <__assert_fail@plt+0x5ec8>
   1741c:	ldrd	r0, [r9]
   17420:	stm	sl, {r0, r1}
   17424:	ldr	r1, [r8]
   17428:	ldr	r2, [fp, #-32]	; 0xffffffe0
   1742c:	add	r0, sl, r1, lsl #3
   17430:	sub	r1, r2, r1
   17434:	lsl	r2, r1, #3
   17438:	mov	r1, #0
   1743c:	bl	11418 <memset@plt>
   17440:	ldr	r0, [fp, #-32]	; 0xffffffe0
   17444:	str	r0, [r8]
   17448:	mov	r9, sl
   1744c:	ldm	r7, {r0, r1}
   17450:	orr	r8, r1, #1
   17454:	add	r1, r7, #8
   17458:	ldr	r2, [r7, #40]	; 0x28
   1745c:	ldr	r3, [r7, #44]	; 0x2c
   17460:	ldr	r6, [r9, r5, lsl #3]!
   17464:	str	r1, [sp, #20]
   17468:	ldr	r4, [r9, #4]!
   1746c:	stm	sp, {r0, r8}
   17470:	add	r0, sp, #8
   17474:	stm	r0, {r1, r2, r3}
   17478:	ldr	r2, [sp, #32]
   1747c:	ldr	r3, [sp, #36]	; 0x24
   17480:	mov	r1, r6
   17484:	mov	r0, r4
   17488:	bl	16174 <__assert_fail@plt+0x4c18>
   1748c:	cmp	r6, r0
   17490:	bhi	174f4 <__assert_fail@plt+0x5f98>
   17494:	add	r6, r0, #1
   17498:	movw	r0, #45560	; 0xb1f8
   1749c:	movt	r0, #2
   174a0:	str	r6, [sl, r5, lsl #3]
   174a4:	cmp	r4, r0
   174a8:	beq	174b4 <__assert_fail@plt+0x5f58>
   174ac:	mov	r0, r4
   174b0:	bl	12db8 <__assert_fail@plt+0x185c>
   174b4:	mov	r0, r6
   174b8:	bl	18394 <__assert_fail@plt+0x6e38>
   174bc:	str	r0, [r9]
   174c0:	mov	r4, r0
   174c4:	add	r3, sp, #8
   174c8:	ldr	r0, [r7]
   174cc:	ldr	r1, [r7, #40]	; 0x28
   174d0:	ldr	r2, [r7, #44]	; 0x2c
   174d4:	stm	sp, {r0, r8}
   174d8:	ldr	r0, [sp, #20]
   174dc:	stm	r3, {r0, r1, r2}
   174e0:	ldr	r2, [sp, #32]
   174e4:	ldr	r3, [sp, #36]	; 0x24
   174e8:	mov	r0, r4
   174ec:	mov	r1, r6
   174f0:	bl	16174 <__assert_fail@plt+0x4c18>
   174f4:	ldr	r0, [sp, #28]
   174f8:	ldr	r1, [sp, #24]
   174fc:	str	r1, [r0]
   17500:	mov	r0, r4
   17504:	sub	sp, fp, #28
   17508:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1750c:	bl	11514 <abort@plt>
   17510:	movw	r3, #45512	; 0xb1c8
   17514:	movt	r3, #2
   17518:	b	17378 <__assert_fail@plt+0x5e1c>
   1751c:	movw	r3, #45512	; 0xb1c8
   17520:	mov	r1, r0
   17524:	mov	r0, #0
   17528:	mvn	r2, #0
   1752c:	movt	r3, #2
   17530:	b	17378 <__assert_fail@plt+0x5e1c>
   17534:	movw	r3, #45512	; 0xb1c8
   17538:	mov	r2, r1
   1753c:	mov	r1, r0
   17540:	mov	r0, #0
   17544:	movt	r3, #2
   17548:	b	17378 <__assert_fail@plt+0x5e1c>
   1754c:	push	{fp, lr}
   17550:	mov	fp, sp
   17554:	sub	sp, sp, #48	; 0x30
   17558:	vmov.i32	q8, #0	; 0x00000000
   1755c:	mov	ip, #32
   17560:	mov	r3, sp
   17564:	mov	lr, r2
   17568:	cmp	r1, #10
   1756c:	add	r2, r3, #16
   17570:	vst1.64	{d16-d17}, [r3], ip
   17574:	vst1.64	{d16-d17}, [r2]
   17578:	vst1.64	{d16-d17}, [r3]
   1757c:	beq	1759c <__assert_fail@plt+0x6040>
   17580:	str	r1, [sp]
   17584:	mov	r3, sp
   17588:	mov	r1, lr
   1758c:	mvn	r2, #0
   17590:	bl	17378 <__assert_fail@plt+0x5e1c>
   17594:	mov	sp, fp
   17598:	pop	{fp, pc}
   1759c:	bl	11514 <abort@plt>
   175a0:	push	{r4, sl, fp, lr}
   175a4:	add	fp, sp, #8
   175a8:	sub	sp, sp, #48	; 0x30
   175ac:	vmov.i32	q8, #0	; 0x00000000
   175b0:	mov	ip, r3
   175b4:	mov	r3, sp
   175b8:	mov	lr, #32
   175bc:	cmp	r1, #10
   175c0:	add	r4, r3, #16
   175c4:	vst1.64	{d16-d17}, [r3], lr
   175c8:	vst1.64	{d16-d17}, [r4]
   175cc:	vst1.64	{d16-d17}, [r3]
   175d0:	beq	175f0 <__assert_fail@plt+0x6094>
   175d4:	str	r1, [sp]
   175d8:	mov	r1, r2
   175dc:	mov	r3, sp
   175e0:	mov	r2, ip
   175e4:	bl	17378 <__assert_fail@plt+0x5e1c>
   175e8:	sub	sp, fp, #8
   175ec:	pop	{r4, sl, fp, pc}
   175f0:	bl	11514 <abort@plt>
   175f4:	mov	r2, r1
   175f8:	mov	r1, r0
   175fc:	mov	r0, #0
   17600:	b	1754c <__assert_fail@plt+0x5ff0>
   17604:	mov	r3, r2
   17608:	mov	r2, r1
   1760c:	mov	r1, r0
   17610:	mov	r0, #0
   17614:	b	175a0 <__assert_fail@plt+0x6044>
   17618:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1761c:	add	fp, sp, #24
   17620:	sub	sp, sp, #48	; 0x30
   17624:	movw	r8, #45512	; 0xb1c8
   17628:	mov	lr, r0
   1762c:	mov	r3, sp
   17630:	mov	ip, r1
   17634:	movt	r8, #2
   17638:	mov	r1, r3
   1763c:	ldm	r8!, {r0, r4, r5, r6, r7, r9}
   17640:	stmia	r1!, {r0, r4, r5, r6, r7, r9}
   17644:	ldm	r8, {r0, r4, r5, r6, r7, r9}
   17648:	stm	r1, {r0, r4, r5, r6, r7, r9}
   1764c:	ubfx	r0, r2, #5, #3
   17650:	and	r2, r2, #31
   17654:	mov	r4, #1
   17658:	add	r0, r3, r0, lsl #2
   1765c:	ldr	r1, [r0, #8]
   17660:	bic	r4, r4, r1, lsr r2
   17664:	eor	r1, r1, r4, lsl r2
   17668:	mov	r2, ip
   1766c:	str	r1, [r0, #8]
   17670:	mov	r0, #0
   17674:	mov	r1, lr
   17678:	bl	17378 <__assert_fail@plt+0x5e1c>
   1767c:	sub	sp, fp, #24
   17680:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   17684:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   17688:	add	fp, sp, #24
   1768c:	sub	sp, sp, #48	; 0x30
   17690:	movw	lr, #45512	; 0xb1c8
   17694:	mov	ip, r0
   17698:	mov	r3, sp
   1769c:	movt	lr, #2
   176a0:	mov	r2, r3
   176a4:	ldm	lr!, {r0, r4, r5, r6, r7, r8}
   176a8:	stmia	r2!, {r0, r4, r5, r6, r7, r8}
   176ac:	ldm	lr, {r0, r4, r5, r6, r7, r8}
   176b0:	stm	r2, {r0, r4, r5, r6, r7, r8}
   176b4:	ubfx	r0, r1, #5, #3
   176b8:	and	r1, r1, #31
   176bc:	mov	r7, #1
   176c0:	add	r0, r3, r0, lsl #2
   176c4:	ldr	r2, [r0, #8]
   176c8:	bic	r7, r7, r2, lsr r1
   176cc:	eor	r1, r2, r7, lsl r1
   176d0:	mvn	r2, #0
   176d4:	str	r1, [r0, #8]
   176d8:	mov	r0, #0
   176dc:	mov	r1, ip
   176e0:	bl	17378 <__assert_fail@plt+0x5e1c>
   176e4:	sub	sp, fp, #24
   176e8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   176ec:	push	{r4, r5, r6, r7, fp, lr}
   176f0:	add	fp, sp, #16
   176f4:	sub	sp, sp, #48	; 0x30
   176f8:	movw	lr, #45512	; 0xb1c8
   176fc:	mov	ip, r0
   17700:	mov	r3, sp
   17704:	movt	lr, #2
   17708:	mov	r2, r3
   1770c:	ldm	lr!, {r0, r1, r4, r5, r6, r7}
   17710:	stmia	r2!, {r0, r1, r4, r5, r6, r7}
   17714:	ldm	lr, {r0, r1, r4, r5, r6, r7}
   17718:	stm	r2, {r0, r1, r4, r5, r6, r7}
   1771c:	mov	r1, ip
   17720:	mvn	r2, #0
   17724:	ldr	r0, [sp, #12]
   17728:	orr	r0, r0, #67108864	; 0x4000000
   1772c:	str	r0, [sp, #12]
   17730:	mov	r0, #0
   17734:	bl	17378 <__assert_fail@plt+0x5e1c>
   17738:	sub	sp, fp, #16
   1773c:	pop	{r4, r5, r6, r7, fp, pc}
   17740:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   17744:	add	fp, sp, #24
   17748:	sub	sp, sp, #48	; 0x30
   1774c:	movw	r8, #45512	; 0xb1c8
   17750:	mov	ip, r1
   17754:	mov	lr, r0
   17758:	mov	r3, sp
   1775c:	movt	r8, #2
   17760:	mov	r2, r3
   17764:	ldm	r8!, {r0, r1, r4, r5, r6, r7}
   17768:	stmia	r2!, {r0, r1, r4, r5, r6, r7}
   1776c:	ldm	r8, {r0, r1, r4, r5, r6, r7}
   17770:	stm	r2, {r0, r1, r4, r5, r6, r7}
   17774:	mov	r1, lr
   17778:	mov	r2, ip
   1777c:	ldr	r0, [sp, #12]
   17780:	orr	r0, r0, #67108864	; 0x4000000
   17784:	str	r0, [sp, #12]
   17788:	mov	r0, #0
   1778c:	bl	17378 <__assert_fail@plt+0x5e1c>
   17790:	sub	sp, fp, #24
   17794:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   17798:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1779c:	add	fp, sp, #24
   177a0:	sub	sp, sp, #96	; 0x60
   177a4:	vmov.i32	q8, #0	; 0x00000000
   177a8:	mov	lr, sp
   177ac:	mov	ip, r2
   177b0:	cmp	r1, #10
   177b4:	add	r3, lr, #16
   177b8:	mov	r2, lr
   177bc:	vst1.64	{d16-d17}, [r3]
   177c0:	mov	r3, #28
   177c4:	vst1.64	{d16-d17}, [r2], r3
   177c8:	vst1.32	{d16-d17}, [r2]
   177cc:	beq	1780c <__assert_fail@plt+0x62b0>
   177d0:	str	r1, [sp, #48]	; 0x30
   177d4:	add	r3, sp, #48	; 0x30
   177d8:	ldm	lr!, {r2, r4, r5, r6, r7}
   177dc:	add	r1, r3, #4
   177e0:	stmia	r1!, {r2, r4, r5, r6, r7}
   177e4:	ldm	lr, {r2, r4, r5, r6, r7, r8}
   177e8:	stm	r1, {r2, r4, r5, r6, r7, r8}
   177ec:	mvn	r2, #0
   177f0:	ldr	r1, [sp, #60]	; 0x3c
   177f4:	orr	r1, r1, #67108864	; 0x4000000
   177f8:	str	r1, [sp, #60]	; 0x3c
   177fc:	mov	r1, ip
   17800:	bl	17378 <__assert_fail@plt+0x5e1c>
   17804:	sub	sp, fp, #24
   17808:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1780c:	bl	11514 <abort@plt>
   17810:	push	{fp, lr}
   17814:	mov	fp, sp
   17818:	sub	sp, sp, #8
   1781c:	mvn	ip, #0
   17820:	str	ip, [sp]
   17824:	bl	17830 <__assert_fail@plt+0x62d4>
   17828:	mov	sp, fp
   1782c:	pop	{fp, pc}
   17830:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   17834:	add	fp, sp, #24
   17838:	sub	sp, sp, #48	; 0x30
   1783c:	movw	ip, #45512	; 0xb1c8
   17840:	mov	lr, r3
   17844:	mov	r3, sp
   17848:	cmp	r1, #0
   1784c:	movt	ip, #2
   17850:	cmpne	r2, #0
   17854:	ldm	ip!, {r4, r5, r6, r7, r8, r9}
   17858:	stmia	r3!, {r4, r5, r6, r7, r8, r9}
   1785c:	ldm	ip, {r4, r5, r6, r7, r8, r9}
   17860:	stm	r3, {r4, r5, r6, r7, r8, r9}
   17864:	mov	r3, #10
   17868:	str	r3, [sp]
   1786c:	bne	17874 <__assert_fail@plt+0x6318>
   17870:	bl	11514 <abort@plt>
   17874:	ldr	ip, [fp, #8]
   17878:	str	r2, [sp, #44]	; 0x2c
   1787c:	str	r1, [sp, #40]	; 0x28
   17880:	mov	r3, sp
   17884:	mov	r1, lr
   17888:	mov	r2, ip
   1788c:	bl	17378 <__assert_fail@plt+0x5e1c>
   17890:	sub	sp, fp, #24
   17894:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   17898:	push	{fp, lr}
   1789c:	mov	fp, sp
   178a0:	sub	sp, sp, #8
   178a4:	mov	r3, r2
   178a8:	mov	r2, r1
   178ac:	mov	r1, r0
   178b0:	mvn	r0, #0
   178b4:	str	r0, [sp]
   178b8:	mov	r0, #0
   178bc:	bl	17830 <__assert_fail@plt+0x62d4>
   178c0:	mov	sp, fp
   178c4:	pop	{fp, pc}
   178c8:	push	{fp, lr}
   178cc:	mov	fp, sp
   178d0:	sub	sp, sp, #8
   178d4:	mov	ip, r2
   178d8:	mov	r2, r1
   178dc:	mov	r1, r0
   178e0:	str	r3, [sp]
   178e4:	mov	r0, #0
   178e8:	mov	r3, ip
   178ec:	bl	17830 <__assert_fail@plt+0x62d4>
   178f0:	mov	sp, fp
   178f4:	pop	{fp, pc}
   178f8:	movw	r3, #45392	; 0xb150
   178fc:	movt	r3, #2
   17900:	b	17378 <__assert_fail@plt+0x5e1c>
   17904:	movw	r3, #45392	; 0xb150
   17908:	mov	r2, r1
   1790c:	mov	r1, r0
   17910:	mov	r0, #0
   17914:	movt	r3, #2
   17918:	b	17378 <__assert_fail@plt+0x5e1c>
   1791c:	movw	r3, #45392	; 0xb150
   17920:	mvn	r2, #0
   17924:	movt	r3, #2
   17928:	b	17378 <__assert_fail@plt+0x5e1c>
   1792c:	movw	r3, #45392	; 0xb150
   17930:	mov	r1, r0
   17934:	mov	r0, #0
   17938:	mvn	r2, #0
   1793c:	movt	r3, #2
   17940:	b	17378 <__assert_fail@plt+0x5e1c>
   17944:	push	{r4, r5, fp, lr}
   17948:	add	fp, sp, #8
   1794c:	mov	r5, r0
   17950:	mov	r4, r1
   17954:	mov	r0, #0
   17958:	mov	r2, #5
   1795c:	mov	r1, r5
   17960:	bl	112c8 <dcgettext@plt>
   17964:	cmp	r0, r5
   17968:	popne	{r4, r5, fp, pc}
   1796c:	bl	192ac <__assert_fail@plt+0x7d50>
   17970:	ldrb	r1, [r0]
   17974:	and	r1, r1, #223	; 0xdf
   17978:	cmp	r1, #71	; 0x47
   1797c:	beq	179e4 <__assert_fail@plt+0x6488>
   17980:	cmp	r1, #85	; 0x55
   17984:	bne	17a3c <__assert_fail@plt+0x64e0>
   17988:	ldrb	r1, [r0, #1]
   1798c:	and	r1, r1, #223	; 0xdf
   17990:	cmp	r1, #84	; 0x54
   17994:	bne	17a3c <__assert_fail@plt+0x64e0>
   17998:	ldrb	r1, [r0, #2]
   1799c:	and	r1, r1, #223	; 0xdf
   179a0:	cmp	r1, #70	; 0x46
   179a4:	bne	17a3c <__assert_fail@plt+0x64e0>
   179a8:	ldrb	r1, [r0, #3]
   179ac:	cmp	r1, #45	; 0x2d
   179b0:	bne	17a3c <__assert_fail@plt+0x64e0>
   179b4:	ldrb	r1, [r0, #4]
   179b8:	cmp	r1, #56	; 0x38
   179bc:	bne	17a3c <__assert_fail@plt+0x64e0>
   179c0:	ldrb	r0, [r0, #5]
   179c4:	cmp	r0, #0
   179c8:	bne	17a3c <__assert_fail@plt+0x64e0>
   179cc:	ldrb	r1, [r5]
   179d0:	movw	r2, #43250	; 0xa8f2
   179d4:	movw	r0, #43254	; 0xa8f6
   179d8:	movt	r2, #1
   179dc:	movt	r0, #1
   179e0:	b	17a6c <__assert_fail@plt+0x6510>
   179e4:	ldrb	r1, [r0, #1]
   179e8:	and	r1, r1, #223	; 0xdf
   179ec:	cmp	r1, #66	; 0x42
   179f0:	bne	17a3c <__assert_fail@plt+0x64e0>
   179f4:	ldrb	r1, [r0, #2]
   179f8:	cmp	r1, #49	; 0x31
   179fc:	bne	17a3c <__assert_fail@plt+0x64e0>
   17a00:	ldrb	r1, [r0, #3]
   17a04:	cmp	r1, #56	; 0x38
   17a08:	bne	17a3c <__assert_fail@plt+0x64e0>
   17a0c:	ldrb	r1, [r0, #4]
   17a10:	cmp	r1, #48	; 0x30
   17a14:	bne	17a3c <__assert_fail@plt+0x64e0>
   17a18:	ldrb	r1, [r0, #5]
   17a1c:	cmp	r1, #51	; 0x33
   17a20:	bne	17a3c <__assert_fail@plt+0x64e0>
   17a24:	ldrb	r1, [r0, #6]
   17a28:	cmp	r1, #48	; 0x30
   17a2c:	bne	17a3c <__assert_fail@plt+0x64e0>
   17a30:	ldrb	r0, [r0, #7]
   17a34:	cmp	r0, #0
   17a38:	beq	17a58 <__assert_fail@plt+0x64fc>
   17a3c:	movw	r1, #43244	; 0xa8ec
   17a40:	movw	r0, #43248	; 0xa8f0
   17a44:	cmp	r4, #9
   17a48:	movt	r1, #1
   17a4c:	movt	r0, #1
   17a50:	moveq	r0, r1
   17a54:	pop	{r4, r5, fp, pc}
   17a58:	ldrb	r1, [r5]
   17a5c:	movw	r2, #43258	; 0xa8fa
   17a60:	movw	r0, #43262	; 0xa8fe
   17a64:	movt	r2, #1
   17a68:	movt	r0, #1
   17a6c:	cmp	r1, #96	; 0x60
   17a70:	moveq	r0, r2
   17a74:	pop	{r4, r5, fp, pc}
   17a78:	push	{r4, sl, fp, lr}
   17a7c:	add	fp, sp, #8
   17a80:	sub	sp, sp, #104	; 0x68
   17a84:	mov	r4, r0
   17a88:	movw	r0, #44127	; 0xac5f
   17a8c:	mov	r1, sp
   17a90:	movt	r0, #1
   17a94:	bl	196a0 <__assert_fail@plt+0x8144>
   17a98:	mov	r1, r0
   17a9c:	mov	r0, #0
   17aa0:	cmp	r1, #0
   17aa4:	bne	17abc <__assert_fail@plt+0x6560>
   17aa8:	ldr	r0, [sp, #96]	; 0x60
   17aac:	ldr	r1, [sp, #100]	; 0x64
   17ab0:	ldm	sp, {r2, r3}
   17ab4:	stm	r4, {r0, r1, r2, r3}
   17ab8:	mov	r0, r4
   17abc:	sub	sp, fp, #8
   17ac0:	pop	{r4, sl, fp, pc}
   17ac4:	push	{r4, r5, r6, r7, fp, lr}
   17ac8:	add	fp, sp, #16
   17acc:	mov	r4, r0
   17ad0:	cmp	r0, #2
   17ad4:	bhi	17b04 <__assert_fail@plt+0x65a8>
   17ad8:	mov	r0, r4
   17adc:	bl	19384 <__assert_fail@plt+0x7e28>
   17ae0:	mov	r5, r0
   17ae4:	bl	11400 <__errno_location@plt>
   17ae8:	ldr	r7, [r0]
   17aec:	mov	r6, r0
   17af0:	mov	r0, r4
   17af4:	bl	11520 <close@plt>
   17af8:	mov	r0, r5
   17afc:	str	r7, [r6]
   17b00:	pop	{r4, r5, r6, r7, fp, pc}
   17b04:	mov	r0, r4
   17b08:	pop	{r4, r5, r6, r7, fp, pc}
   17b0c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17b10:	add	fp, sp, #28
   17b14:	sub	sp, sp, #12
   17b18:	ldr	sl, [fp, #8]
   17b1c:	mov	r9, r3
   17b20:	mov	r4, r2
   17b24:	mov	r8, r1
   17b28:	mov	r7, r0
   17b2c:	cmp	r2, #0
   17b30:	beq	17b48 <__assert_fail@plt+0x65ec>
   17b34:	mov	r0, r7
   17b38:	mov	r1, #58	; 0x3a
   17b3c:	bl	113dc <strchr@plt>
   17b40:	mov	r6, r0
   17b44:	b	17b4c <__assert_fail@plt+0x65f0>
   17b48:	mov	r6, #0
   17b4c:	mov	r0, r7
   17b50:	mov	r1, r6
   17b54:	mov	r2, r8
   17b58:	mov	r3, r4
   17b5c:	stm	sp, {r9, sl}
   17b60:	bl	17bc4 <__assert_fail@plt+0x6668>
   17b64:	mov	r5, r0
   17b68:	cmp	r4, #0
   17b6c:	beq	17bb8 <__assert_fail@plt+0x665c>
   17b70:	cmp	r6, #0
   17b74:	bne	17bb8 <__assert_fail@plt+0x665c>
   17b78:	cmp	r5, #0
   17b7c:	beq	17bb8 <__assert_fail@plt+0x665c>
   17b80:	mov	r0, r7
   17b84:	mov	r1, #46	; 0x2e
   17b88:	bl	113dc <strchr@plt>
   17b8c:	cmp	r0, #0
   17b90:	beq	17bb8 <__assert_fail@plt+0x665c>
   17b94:	mov	r1, r0
   17b98:	mov	r0, r7
   17b9c:	mov	r2, r8
   17ba0:	mov	r3, r4
   17ba4:	stm	sp, {r9, sl}
   17ba8:	bl	17bc4 <__assert_fail@plt+0x6668>
   17bac:	cmp	r0, #0
   17bb0:	movne	r0, r5
   17bb4:	b	17bbc <__assert_fail@plt+0x6660>
   17bb8:	mov	r0, r5
   17bbc:	sub	sp, fp, #28
   17bc0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17bc4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17bc8:	add	fp, sp, #28
   17bcc:	sub	sp, sp, #36	; 0x24
   17bd0:	mov	sl, r3
   17bd4:	mov	r9, r2
   17bd8:	ldr	r3, [r2]
   17bdc:	ldr	r2, [fp, #8]
   17be0:	mov	r4, r1
   17be4:	cmp	sl, #0
   17be8:	beq	17bf4 <__assert_fail@plt+0x6698>
   17bec:	ldr	r1, [sl]
   17bf0:	b	17bf8 <__assert_fail@plt+0x669c>
   17bf4:	mvn	r1, #0
   17bf8:	ldr	r8, [fp, #12]
   17bfc:	cmp	r2, #0
   17c00:	str	r1, [sp, #8]
   17c04:	str	r3, [sp, #4]
   17c08:	movne	r1, #0
   17c0c:	strne	r1, [r2]
   17c10:	cmp	r8, #0
   17c14:	movne	r1, #0
   17c18:	strne	r1, [r8]
   17c1c:	cmp	r4, #0
   17c20:	beq	17c54 <__assert_fail@plt+0x66f8>
   17c24:	subs	r5, r4, r0
   17c28:	beq	17ce4 <__assert_fail@plt+0x6788>
   17c2c:	add	r1, r5, #1
   17c30:	bl	186e8 <__assert_fail@plt+0x718c>
   17c34:	mov	r7, r0
   17c38:	mov	r0, #0
   17c3c:	mov	r6, r4
   17c40:	strb	r0, [r7, r5]
   17c44:	ldrb	r0, [r6, #1]!
   17c48:	cmp	r0, #0
   17c4c:	moveq	r6, r0
   17c50:	b	17c6c <__assert_fail@plt+0x6710>
   17c54:	ldrb	r1, [r0]
   17c58:	cmp	r1, #0
   17c5c:	beq	17d60 <__assert_fail@plt+0x6804>
   17c60:	bl	18758 <__assert_fail@plt+0x71fc>
   17c64:	mov	r7, r0
   17c68:	mov	r6, #0
   17c6c:	ldrb	r0, [r7]
   17c70:	cmp	r0, #43	; 0x2b
   17c74:	beq	17cc4 <__assert_fail@plt+0x6768>
   17c78:	mov	r0, r7
   17c7c:	bl	11250 <getpwnam@plt>
   17c80:	cmp	r0, #0
   17c84:	beq	17cc4 <__assert_fail@plt+0x6768>
   17c88:	ldr	r1, [r0, #8]
   17c8c:	mov	r5, #0
   17c90:	cmp	r4, #0
   17c94:	str	r1, [sp, #4]
   17c98:	beq	17cdc <__assert_fail@plt+0x6780>
   17c9c:	cmp	r6, #0
   17ca0:	bne	17cdc <__assert_fail@plt+0x6780>
   17ca4:	ldr	r4, [r0, #12]
   17ca8:	mov	r0, r4
   17cac:	bl	11544 <getgrgid@plt>
   17cb0:	cmp	r0, #0
   17cb4:	str	r4, [sp, #8]
   17cb8:	beq	17d6c <__assert_fail@plt+0x6810>
   17cbc:	ldr	r0, [r0]
   17cc0:	b	17d7c <__assert_fail@plt+0x6820>
   17cc4:	cmp	r4, #0
   17cc8:	beq	17d04 <__assert_fail@plt+0x67a8>
   17ccc:	cmp	r6, #0
   17cd0:	bne	17d04 <__assert_fail@plt+0x67a8>
   17cd4:	movw	r5, #43379	; 0xa973
   17cd8:	movt	r5, #1
   17cdc:	mov	r4, #0
   17ce0:	b	17d88 <__assert_fail@plt+0x682c>
   17ce4:	ldrb	r0, [r4, #1]!
   17ce8:	mov	r7, #0
   17cec:	mov	r5, #0
   17cf0:	cmp	r0, #0
   17cf4:	moveq	r4, r0
   17cf8:	mov	r6, r4
   17cfc:	mov	r4, #0
   17d00:	b	17d8c <__assert_fail@plt+0x6830>
   17d04:	movw	r0, #40584	; 0x9e88
   17d08:	add	r3, sp, #12
   17d0c:	mov	r1, #0
   17d10:	mov	r2, #10
   17d14:	mov	r4, #0
   17d18:	movt	r0, #1
   17d1c:	str	r0, [sp]
   17d20:	mov	r0, r7
   17d24:	bl	18850 <__assert_fail@plt+0x72f4>
   17d28:	ldr	r1, [sp, #12]
   17d2c:	mvn	r2, #0
   17d30:	clz	r0, r0
   17d34:	movw	r5, #43352	; 0xa958
   17d38:	lsr	r0, r0, #5
   17d3c:	movt	r5, #1
   17d40:	subs	r2, r1, r2
   17d44:	movwne	r2, #1
   17d48:	ands	r0, r0, r2
   17d4c:	ldr	r0, [sp, #4]
   17d50:	movne	r0, r1
   17d54:	movwne	r5, #0
   17d58:	str	r0, [sp, #4]
   17d5c:	b	17d88 <__assert_fail@plt+0x682c>
   17d60:	mov	r4, #0
   17d64:	mov	r7, #0
   17d68:	b	17e34 <__assert_fail@plt+0x68d8>
   17d6c:	add	r2, sp, #12
   17d70:	mov	r0, r4
   17d74:	mov	r1, #0
   17d78:	bl	15e4c <__assert_fail@plt+0x48f0>
   17d7c:	bl	18758 <__assert_fail@plt+0x71fc>
   17d80:	mov	r4, r0
   17d84:	bl	1122c <endgrent@plt>
   17d88:	bl	11478 <endpwent@plt>
   17d8c:	cmp	r6, #0
   17d90:	beq	17e28 <__assert_fail@plt+0x68cc>
   17d94:	cmp	r5, #0
   17d98:	bne	17e28 <__assert_fail@plt+0x68cc>
   17d9c:	ldrb	r0, [r6]
   17da0:	cmp	r0, #43	; 0x2b
   17da4:	beq	17dc4 <__assert_fail@plt+0x6868>
   17da8:	mov	r0, r6
   17dac:	bl	11550 <getgrnam@plt>
   17db0:	cmp	r0, #0
   17db4:	beq	17dc4 <__assert_fail@plt+0x6868>
   17db8:	ldr	r0, [r0, #8]
   17dbc:	mov	r5, #0
   17dc0:	b	17e14 <__assert_fail@plt+0x68b8>
   17dc4:	movw	r0, #40584	; 0x9e88
   17dc8:	add	r3, sp, #12
   17dcc:	mov	r1, #0
   17dd0:	mov	r2, #10
   17dd4:	movt	r0, #1
   17dd8:	str	r0, [sp]
   17ddc:	mov	r0, r6
   17de0:	bl	18850 <__assert_fail@plt+0x72f4>
   17de4:	ldr	r1, [sp, #12]
   17de8:	mvn	r2, #0
   17dec:	clz	r0, r0
   17df0:	movw	r5, #43365	; 0xa965
   17df4:	lsr	r0, r0, #5
   17df8:	movt	r5, #1
   17dfc:	subs	r2, r1, r2
   17e00:	movwne	r2, #1
   17e04:	ands	r0, r0, r2
   17e08:	ldr	r0, [sp, #8]
   17e0c:	movne	r0, r1
   17e10:	movwne	r5, #0
   17e14:	str	r0, [sp, #8]
   17e18:	bl	1122c <endgrent@plt>
   17e1c:	mov	r0, r6
   17e20:	bl	18758 <__assert_fail@plt+0x71fc>
   17e24:	mov	r4, r0
   17e28:	mov	r6, #0
   17e2c:	cmp	r5, #0
   17e30:	bne	17e70 <__assert_fail@plt+0x6914>
   17e34:	ldr	r0, [sp, #4]
   17e38:	cmp	sl, #0
   17e3c:	mov	r6, #1
   17e40:	str	r0, [r9]
   17e44:	ldrne	r0, [sp, #8]
   17e48:	strne	r0, [sl]
   17e4c:	ldr	r0, [fp, #8]
   17e50:	cmp	r0, #0
   17e54:	strne	r7, [r0]
   17e58:	movne	r7, #0
   17e5c:	cmp	r8, #0
   17e60:	moveq	r5, #0
   17e64:	strne	r4, [r8]
   17e68:	movne	r5, #0
   17e6c:	movne	r4, #0
   17e70:	mov	r0, r7
   17e74:	bl	12db8 <__assert_fail@plt+0x185c>
   17e78:	mov	r0, r4
   17e7c:	bl	12db8 <__assert_fail@plt+0x185c>
   17e80:	mov	r0, #0
   17e84:	cmp	r6, #0
   17e88:	bne	17e9c <__assert_fail@plt+0x6940>
   17e8c:	mov	r0, #0
   17e90:	mov	r1, r5
   17e94:	mov	r2, #5
   17e98:	bl	112c8 <dcgettext@plt>
   17e9c:	sub	sp, fp, #28
   17ea0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17ea4:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   17ea8:	add	fp, sp, #24
   17eac:	sub	sp, sp, #32
   17eb0:	ldr	r6, [fp, #12]
   17eb4:	ldr	r7, [fp, #8]
   17eb8:	mov	r4, r2
   17ebc:	mov	r8, r0
   17ec0:	cmp	r1, #0
   17ec4:	beq	17eec <__assert_fail@plt+0x6990>
   17ec8:	movw	r2, #43392	; 0xa980
   17ecc:	mov	r5, r1
   17ed0:	str	r3, [sp, #4]
   17ed4:	str	r4, [sp]
   17ed8:	mov	r0, r8
   17edc:	mov	r1, #1
   17ee0:	movt	r2, #1
   17ee4:	mov	r3, r5
   17ee8:	b	17f04 <__assert_fail@plt+0x69a8>
   17eec:	movw	r2, #43404	; 0xa98c
   17ef0:	str	r3, [sp]
   17ef4:	mov	r0, r8
   17ef8:	mov	r1, #1
   17efc:	mov	r3, r4
   17f00:	movt	r2, #1
   17f04:	bl	1143c <__fprintf_chk@plt>
   17f08:	movw	r1, #43411	; 0xa993
   17f0c:	mov	r0, #0
   17f10:	mov	r2, #5
   17f14:	movt	r1, #1
   17f18:	bl	112c8 <dcgettext@plt>
   17f1c:	movw	r2, #44129	; 0xac61
   17f20:	mov	r3, r0
   17f24:	movw	r0, #2022	; 0x7e6
   17f28:	mov	r1, #1
   17f2c:	movt	r2, #1
   17f30:	str	r0, [sp]
   17f34:	mov	r0, r8
   17f38:	bl	1143c <__fprintf_chk@plt>
   17f3c:	movw	r4, #40583	; 0x9e87
   17f40:	mov	r1, r8
   17f44:	movt	r4, #1
   17f48:	mov	r0, r4
   17f4c:	bl	11238 <fputs_unlocked@plt>
   17f50:	movw	r1, #43415	; 0xa997
   17f54:	mov	r0, #0
   17f58:	mov	r2, #5
   17f5c:	movt	r1, #1
   17f60:	bl	112c8 <dcgettext@plt>
   17f64:	movw	r3, #43586	; 0xaa42
   17f68:	mov	r2, r0
   17f6c:	mov	r0, r8
   17f70:	mov	r1, #1
   17f74:	movt	r3, #1
   17f78:	bl	1143c <__fprintf_chk@plt>
   17f7c:	mov	r0, r4
   17f80:	mov	r1, r8
   17f84:	bl	11238 <fputs_unlocked@plt>
   17f88:	cmp	r6, #9
   17f8c:	bhi	17ff0 <__assert_fail@plt+0x6a94>
   17f90:	add	r0, pc, #0
   17f94:	ldr	pc, [r0, r6, lsl #2]
   17f98:	andeq	r8, r1, r8, asr #3
   17f9c:	andeq	r7, r1, r0, asr #31
   17fa0:	strdeq	r7, [r1], -ip
   17fa4:	andeq	r8, r1, r4, lsr #32
   17fa8:	andeq	r8, r1, ip, asr #32
   17fac:	andeq	r8, r1, r4, ror r0
   17fb0:	muleq	r1, ip, r0
   17fb4:	ldrdeq	r8, [r1], -r4
   17fb8:	andeq	r8, r1, r4, ror r1
   17fbc:	andeq	r8, r1, ip, lsl r1
   17fc0:	movw	r1, #43620	; 0xaa64
   17fc4:	mov	r0, #0
   17fc8:	mov	r2, #5
   17fcc:	movt	r1, #1
   17fd0:	bl	112c8 <dcgettext@plt>
   17fd4:	ldr	r3, [r7]
   17fd8:	mov	r2, r0
   17fdc:	mov	r0, r8
   17fe0:	mov	r1, #1
   17fe4:	sub	sp, fp, #24
   17fe8:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   17fec:	b	1143c <__fprintf_chk@plt>
   17ff0:	movw	r1, #43939	; 0xaba3
   17ff4:	movt	r1, #1
   17ff8:	b	18124 <__assert_fail@plt+0x6bc8>
   17ffc:	movw	r1, #43636	; 0xaa74
   18000:	mov	r0, #0
   18004:	mov	r2, #5
   18008:	movt	r1, #1
   1800c:	bl	112c8 <dcgettext@plt>
   18010:	mov	r2, r0
   18014:	ldr	r3, [r7]
   18018:	ldr	r0, [r7, #4]
   1801c:	str	r0, [sp]
   18020:	b	18110 <__assert_fail@plt+0x6bb4>
   18024:	movw	r1, #43659	; 0xaa8b
   18028:	mov	r0, #0
   1802c:	mov	r2, #5
   18030:	movt	r1, #1
   18034:	bl	112c8 <dcgettext@plt>
   18038:	mov	r2, r0
   1803c:	ldr	r3, [r7]
   18040:	ldmib	r7, {r0, r1}
   18044:	stm	sp, {r0, r1}
   18048:	b	18110 <__assert_fail@plt+0x6bb4>
   1804c:	movw	r1, #43687	; 0xaaa7
   18050:	mov	r0, #0
   18054:	mov	r2, #5
   18058:	movt	r1, #1
   1805c:	bl	112c8 <dcgettext@plt>
   18060:	ldr	r3, [r7]
   18064:	mov	r2, r0
   18068:	ldmib	r7, {r0, r1, r7}
   1806c:	stm	sp, {r0, r1, r7}
   18070:	b	18110 <__assert_fail@plt+0x6bb4>
   18074:	movw	r1, #43719	; 0xaac7
   18078:	mov	r0, #0
   1807c:	mov	r2, #5
   18080:	movt	r1, #1
   18084:	bl	112c8 <dcgettext@plt>
   18088:	ldr	r3, [r7]
   1808c:	mov	r2, r0
   18090:	ldmib	r7, {r0, r1, r6, r7}
   18094:	stm	sp, {r0, r1, r6, r7}
   18098:	b	18110 <__assert_fail@plt+0x6bb4>
   1809c:	movw	r1, #43755	; 0xaaeb
   180a0:	mov	r0, #0
   180a4:	mov	r2, #5
   180a8:	movt	r1, #1
   180ac:	bl	112c8 <dcgettext@plt>
   180b0:	mov	r2, r0
   180b4:	ldr	r3, [r7]
   180b8:	ldmib	r7, {r0, r1, r6}
   180bc:	ldr	r5, [r7, #16]
   180c0:	ldr	r7, [r7, #20]
   180c4:	stm	sp, {r0, r1, r6}
   180c8:	str	r5, [sp, #12]
   180cc:	str	r7, [sp, #16]
   180d0:	b	18110 <__assert_fail@plt+0x6bb4>
   180d4:	movw	r1, #43795	; 0xab13
   180d8:	mov	r0, #0
   180dc:	mov	r2, #5
   180e0:	movt	r1, #1
   180e4:	bl	112c8 <dcgettext@plt>
   180e8:	mov	r2, r0
   180ec:	ldr	r3, [r7]
   180f0:	ldmib	r7, {r0, r1, r6}
   180f4:	ldr	r5, [r7, #16]
   180f8:	ldr	r4, [r7, #20]
   180fc:	ldr	r7, [r7, #24]
   18100:	stm	sp, {r0, r1, r6}
   18104:	str	r5, [sp, #12]
   18108:	str	r4, [sp, #16]
   1810c:	str	r7, [sp, #20]
   18110:	mov	r0, r8
   18114:	mov	r1, #1
   18118:	b	181c4 <__assert_fail@plt+0x6c68>
   1811c:	movw	r1, #43887	; 0xab6f
   18120:	movt	r1, #1
   18124:	mov	r0, #0
   18128:	mov	r2, #5
   1812c:	bl	112c8 <dcgettext@plt>
   18130:	mov	ip, r0
   18134:	ldr	r3, [r7]
   18138:	ldr	r0, [r7, #4]
   1813c:	ldr	r1, [r7, #8]
   18140:	ldr	r6, [r7, #12]
   18144:	ldr	r5, [r7, #16]
   18148:	ldr	r4, [r7, #20]
   1814c:	ldr	r2, [r7, #24]
   18150:	ldr	lr, [r7, #28]
   18154:	ldr	r7, [r7, #32]
   18158:	stm	sp, {r0, r1, r6}
   1815c:	str	r5, [sp, #12]
   18160:	str	r4, [sp, #16]
   18164:	str	r2, [sp, #20]
   18168:	str	lr, [sp, #24]
   1816c:	str	r7, [sp, #28]
   18170:	b	181b8 <__assert_fail@plt+0x6c5c>
   18174:	movw	r1, #43839	; 0xab3f
   18178:	mov	r0, #0
   1817c:	mov	r2, #5
   18180:	movt	r1, #1
   18184:	bl	112c8 <dcgettext@plt>
   18188:	mov	ip, r0
   1818c:	ldr	r3, [r7]
   18190:	ldmib	r7, {r0, r1, r6}
   18194:	ldr	r5, [r7, #16]
   18198:	ldr	r4, [r7, #20]
   1819c:	ldr	r2, [r7, #24]
   181a0:	ldr	r7, [r7, #28]
   181a4:	stm	sp, {r0, r1, r6}
   181a8:	str	r5, [sp, #12]
   181ac:	str	r4, [sp, #16]
   181b0:	str	r2, [sp, #20]
   181b4:	str	r7, [sp, #24]
   181b8:	mov	r0, r8
   181bc:	mov	r1, #1
   181c0:	mov	r2, ip
   181c4:	bl	1143c <__fprintf_chk@plt>
   181c8:	sub	sp, fp, #24
   181cc:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   181d0:	push	{r4, sl, fp, lr}
   181d4:	add	fp, sp, #8
   181d8:	sub	sp, sp, #8
   181dc:	ldr	ip, [fp, #8]
   181e0:	mov	lr, #0
   181e4:	ldr	r4, [ip, lr, lsl #2]
   181e8:	add	lr, lr, #1
   181ec:	cmp	r4, #0
   181f0:	bne	181e4 <__assert_fail@plt+0x6c88>
   181f4:	sub	r4, lr, #1
   181f8:	str	ip, [sp]
   181fc:	str	r4, [sp, #4]
   18200:	bl	17ea4 <__assert_fail@plt+0x6948>
   18204:	sub	sp, fp, #8
   18208:	pop	{r4, sl, fp, pc}
   1820c:	push	{r4, r5, fp, lr}
   18210:	add	fp, sp, #8
   18214:	sub	sp, sp, #48	; 0x30
   18218:	ldr	r4, [fp, #8]
   1821c:	mov	ip, #0
   18220:	add	lr, sp, #8
   18224:	ldr	r5, [r4]
   18228:	cmp	r5, #0
   1822c:	str	r5, [lr, ip, lsl #2]
   18230:	beq	18248 <__assert_fail@plt+0x6cec>
   18234:	add	ip, ip, #1
   18238:	add	r4, r4, #4
   1823c:	cmp	ip, #10
   18240:	bne	18224 <__assert_fail@plt+0x6cc8>
   18244:	mov	ip, #10
   18248:	str	lr, [sp]
   1824c:	str	ip, [sp, #4]
   18250:	bl	17ea4 <__assert_fail@plt+0x6948>
   18254:	sub	sp, fp, #8
   18258:	pop	{r4, r5, fp, pc}
   1825c:	push	{fp, lr}
   18260:	mov	fp, sp
   18264:	sub	sp, sp, #8
   18268:	add	ip, fp, #8
   1826c:	str	ip, [sp, #4]
   18270:	str	ip, [sp]
   18274:	bl	1820c <__assert_fail@plt+0x6cb0>
   18278:	mov	sp, fp
   1827c:	pop	{fp, pc}
   18280:	push	{fp, lr}
   18284:	mov	fp, sp
   18288:	movw	r0, #45460	; 0xb194
   1828c:	movt	r0, #2
   18290:	ldr	r1, [r0]
   18294:	movw	r0, #40583	; 0x9e87
   18298:	movt	r0, #1
   1829c:	bl	11238 <fputs_unlocked@plt>
   182a0:	movw	r1, #43999	; 0xabdf
   182a4:	mov	r0, #0
   182a8:	mov	r2, #5
   182ac:	movt	r1, #1
   182b0:	bl	112c8 <dcgettext@plt>
   182b4:	movw	r2, #44019	; 0xabf3
   182b8:	mov	r1, r0
   182bc:	mov	r0, #1
   182c0:	movt	r2, #1
   182c4:	bl	11424 <__printf_chk@plt>
   182c8:	movw	r1, #44041	; 0xac09
   182cc:	mov	r0, #0
   182d0:	mov	r2, #5
   182d4:	movt	r1, #1
   182d8:	bl	112c8 <dcgettext@plt>
   182dc:	movw	r2, #41123	; 0xa0a3
   182e0:	movw	r3, #41398	; 0xa1b6
   182e4:	mov	r1, r0
   182e8:	mov	r0, #1
   182ec:	movt	r2, #1
   182f0:	movt	r3, #1
   182f4:	bl	11424 <__printf_chk@plt>
   182f8:	movw	r1, #44061	; 0xac1d
   182fc:	mov	r0, #0
   18300:	mov	r2, #5
   18304:	movt	r1, #1
   18308:	bl	112c8 <dcgettext@plt>
   1830c:	movw	r2, #44100	; 0xac44
   18310:	mov	r1, r0
   18314:	mov	r0, #1
   18318:	movt	r2, #1
   1831c:	pop	{fp, lr}
   18320:	b	11424 <__printf_chk@plt>
   18324:	b	18328 <__assert_fail@plt+0x6dcc>
   18328:	push	{r4, r5, r6, sl, fp, lr}
   1832c:	add	fp, sp, #16
   18330:	mov	r4, r2
   18334:	mov	r5, r1
   18338:	mov	r6, r0
   1833c:	bl	19348 <__assert_fail@plt+0x7dec>
   18340:	cmp	r0, #0
   18344:	popne	{r4, r5, r6, sl, fp, pc}
   18348:	cmp	r6, #0
   1834c:	beq	18360 <__assert_fail@plt+0x6e04>
   18350:	cmp	r5, #0
   18354:	cmpne	r4, #0
   18358:	bne	18360 <__assert_fail@plt+0x6e04>
   1835c:	pop	{r4, r5, r6, sl, fp, pc}
   18360:	bl	18790 <__assert_fail@plt+0x7234>
   18364:	push	{fp, lr}
   18368:	mov	fp, sp
   1836c:	bl	18d10 <__assert_fail@plt+0x77b4>
   18370:	cmp	r0, #0
   18374:	popne	{fp, pc}
   18378:	bl	18790 <__assert_fail@plt+0x7234>
   1837c:	push	{fp, lr}
   18380:	mov	fp, sp
   18384:	bl	18d10 <__assert_fail@plt+0x77b4>
   18388:	cmp	r0, #0
   1838c:	popne	{fp, pc}
   18390:	bl	18790 <__assert_fail@plt+0x7234>
   18394:	push	{fp, lr}
   18398:	mov	fp, sp
   1839c:	bl	18d10 <__assert_fail@plt+0x77b4>
   183a0:	cmp	r0, #0
   183a4:	popne	{fp, pc}
   183a8:	bl	18790 <__assert_fail@plt+0x7234>
   183ac:	push	{r4, r5, fp, lr}
   183b0:	add	fp, sp, #8
   183b4:	mov	r4, r1
   183b8:	mov	r5, r0
   183bc:	bl	18d40 <__assert_fail@plt+0x77e4>
   183c0:	cmp	r0, #0
   183c4:	popne	{r4, r5, fp, pc}
   183c8:	cmp	r5, #0
   183cc:	beq	183dc <__assert_fail@plt+0x6e80>
   183d0:	cmp	r4, #0
   183d4:	bne	183dc <__assert_fail@plt+0x6e80>
   183d8:	pop	{r4, r5, fp, pc}
   183dc:	bl	18790 <__assert_fail@plt+0x7234>
   183e0:	push	{fp, lr}
   183e4:	mov	fp, sp
   183e8:	cmp	r1, #0
   183ec:	orreq	r1, r1, #1
   183f0:	bl	18d40 <__assert_fail@plt+0x77e4>
   183f4:	cmp	r0, #0
   183f8:	popne	{fp, pc}
   183fc:	bl	18790 <__assert_fail@plt+0x7234>
   18400:	push	{fp, lr}
   18404:	mov	fp, sp
   18408:	clz	r3, r2
   1840c:	lsr	ip, r3, #5
   18410:	clz	r3, r1
   18414:	lsr	r3, r3, #5
   18418:	orrs	r3, r3, ip
   1841c:	movwne	r1, #1
   18420:	movwne	r2, #1
   18424:	bl	19348 <__assert_fail@plt+0x7dec>
   18428:	cmp	r0, #0
   1842c:	popne	{fp, pc}
   18430:	bl	18790 <__assert_fail@plt+0x7234>
   18434:	push	{fp, lr}
   18438:	mov	fp, sp
   1843c:	mov	r2, r1
   18440:	mov	r1, r0
   18444:	mov	r0, #0
   18448:	bl	19348 <__assert_fail@plt+0x7dec>
   1844c:	cmp	r0, #0
   18450:	popne	{fp, pc}
   18454:	bl	18790 <__assert_fail@plt+0x7234>
   18458:	mov	r2, r1
   1845c:	mov	r1, r0
   18460:	mov	r0, #0
   18464:	b	18400 <__assert_fail@plt+0x6ea4>
   18468:	mov	r2, #1
   1846c:	b	18470 <__assert_fail@plt+0x6f14>
   18470:	push	{r4, r5, fp, lr}
   18474:	add	fp, sp, #8
   18478:	ldr	r5, [r1]
   1847c:	mov	r4, r1
   18480:	cmp	r0, #0
   18484:	beq	1849c <__assert_fail@plt+0x6f40>
   18488:	mov	r1, #1
   1848c:	add	r1, r1, r5, lsr #1
   18490:	adds	r5, r5, r1
   18494:	bcc	184b4 <__assert_fail@plt+0x6f58>
   18498:	bl	18790 <__assert_fail@plt+0x7234>
   1849c:	cmp	r5, #0
   184a0:	bne	184b4 <__assert_fail@plt+0x6f58>
   184a4:	mov	r1, #64	; 0x40
   184a8:	cmp	r2, #64	; 0x40
   184ac:	udiv	r5, r1, r2
   184b0:	addhi	r5, r5, #1
   184b4:	mov	r1, r5
   184b8:	bl	18328 <__assert_fail@plt+0x6dcc>
   184bc:	str	r5, [r4]
   184c0:	pop	{r4, r5, fp, pc}
   184c4:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   184c8:	add	fp, sp, #24
   184cc:	ldr	r6, [r1]
   184d0:	mov	r8, r1
   184d4:	ldr	r4, [fp, #8]
   184d8:	add	r1, r6, r6, asr #1
   184dc:	cmp	r1, r6
   184e0:	mvnvs	r1, #-2147483648	; 0x80000000
   184e4:	cmp	r1, r3
   184e8:	mov	r5, r1
   184ec:	movgt	r5, r3
   184f0:	cmn	r3, #1
   184f4:	movle	r5, r1
   184f8:	cmn	r4, #1
   184fc:	ble	1851c <__assert_fail@plt+0x6fc0>
   18500:	cmp	r4, #0
   18504:	beq	18570 <__assert_fail@plt+0x7014>
   18508:	cmn	r5, #1
   1850c:	ble	18544 <__assert_fail@plt+0x6fe8>
   18510:	mvn	r7, #-2147483648	; 0x80000000
   18514:	udiv	r1, r7, r4
   18518:	b	18538 <__assert_fail@plt+0x6fdc>
   1851c:	cmn	r5, #1
   18520:	ble	18560 <__assert_fail@plt+0x7004>
   18524:	cmn	r4, #1
   18528:	beq	18570 <__assert_fail@plt+0x7014>
   1852c:	mov	r1, #-2147483648	; 0x80000000
   18530:	mvn	r7, #-2147483648	; 0x80000000
   18534:	sdiv	r1, r1, r4
   18538:	cmp	r1, r5
   1853c:	bge	18570 <__assert_fail@plt+0x7014>
   18540:	b	18580 <__assert_fail@plt+0x7024>
   18544:	beq	18570 <__assert_fail@plt+0x7014>
   18548:	mov	r1, #-2147483648	; 0x80000000
   1854c:	mvn	r7, #-2147483648	; 0x80000000
   18550:	sdiv	r1, r1, r5
   18554:	cmp	r1, r4
   18558:	bge	18570 <__assert_fail@plt+0x7014>
   1855c:	b	18580 <__assert_fail@plt+0x7024>
   18560:	mvn	r7, #-2147483648	; 0x80000000
   18564:	sdiv	r1, r7, r4
   18568:	cmp	r5, r1
   1856c:	blt	18580 <__assert_fail@plt+0x7024>
   18570:	mul	r1, r5, r4
   18574:	mov	r7, #64	; 0x40
   18578:	cmp	r1, #63	; 0x3f
   1857c:	bgt	18588 <__assert_fail@plt+0x702c>
   18580:	sdiv	r5, r7, r4
   18584:	mul	r1, r5, r4
   18588:	cmp	r0, #0
   1858c:	moveq	r7, #0
   18590:	streq	r7, [r8]
   18594:	sub	r7, r5, r6
   18598:	cmp	r7, r2
   1859c:	bge	18640 <__assert_fail@plt+0x70e4>
   185a0:	add	r5, r6, r2
   185a4:	mov	r2, #0
   185a8:	mov	r1, #0
   185ac:	cmp	r5, r3
   185b0:	movwgt	r2, #1
   185b4:	cmn	r3, #1
   185b8:	movwgt	r1, #1
   185bc:	cmp	r5, r6
   185c0:	bvs	18628 <__assert_fail@plt+0x70cc>
   185c4:	ands	r1, r1, r2
   185c8:	bne	18628 <__assert_fail@plt+0x70cc>
   185cc:	cmn	r4, #1
   185d0:	ble	185f0 <__assert_fail@plt+0x7094>
   185d4:	cmp	r4, #0
   185d8:	beq	1863c <__assert_fail@plt+0x70e0>
   185dc:	cmn	r5, #1
   185e0:	ble	18614 <__assert_fail@plt+0x70b8>
   185e4:	mvn	r1, #-2147483648	; 0x80000000
   185e8:	udiv	r1, r1, r4
   185ec:	b	18608 <__assert_fail@plt+0x70ac>
   185f0:	cmn	r5, #1
   185f4:	ble	1862c <__assert_fail@plt+0x70d0>
   185f8:	cmn	r4, #1
   185fc:	beq	1863c <__assert_fail@plt+0x70e0>
   18600:	mov	r1, #-2147483648	; 0x80000000
   18604:	sdiv	r1, r1, r4
   18608:	cmp	r1, r5
   1860c:	bge	1863c <__assert_fail@plt+0x70e0>
   18610:	b	18628 <__assert_fail@plt+0x70cc>
   18614:	beq	1863c <__assert_fail@plt+0x70e0>
   18618:	mov	r1, #-2147483648	; 0x80000000
   1861c:	sdiv	r1, r1, r5
   18620:	cmp	r1, r4
   18624:	bge	1863c <__assert_fail@plt+0x70e0>
   18628:	bl	18790 <__assert_fail@plt+0x7234>
   1862c:	mvn	r1, #-2147483648	; 0x80000000
   18630:	sdiv	r1, r1, r4
   18634:	cmp	r5, r1
   18638:	blt	18628 <__assert_fail@plt+0x70cc>
   1863c:	mul	r1, r5, r4
   18640:	bl	183ac <__assert_fail@plt+0x6e50>
   18644:	str	r5, [r8]
   18648:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1864c:	push	{fp, lr}
   18650:	mov	fp, sp
   18654:	mov	r1, #1
   18658:	bl	18cbc <__assert_fail@plt+0x7760>
   1865c:	cmp	r0, #0
   18660:	popne	{fp, pc}
   18664:	bl	18790 <__assert_fail@plt+0x7234>
   18668:	push	{fp, lr}
   1866c:	mov	fp, sp
   18670:	bl	18cbc <__assert_fail@plt+0x7760>
   18674:	cmp	r0, #0
   18678:	popne	{fp, pc}
   1867c:	bl	18790 <__assert_fail@plt+0x7234>
   18680:	push	{fp, lr}
   18684:	mov	fp, sp
   18688:	mov	r1, #1
   1868c:	bl	18cbc <__assert_fail@plt+0x7760>
   18690:	cmp	r0, #0
   18694:	popne	{fp, pc}
   18698:	bl	18790 <__assert_fail@plt+0x7234>
   1869c:	push	{fp, lr}
   186a0:	mov	fp, sp
   186a4:	bl	18cbc <__assert_fail@plt+0x7760>
   186a8:	cmp	r0, #0
   186ac:	popne	{fp, pc}
   186b0:	bl	18790 <__assert_fail@plt+0x7234>
   186b4:	push	{r4, r5, fp, lr}
   186b8:	add	fp, sp, #8
   186bc:	mov	r5, r0
   186c0:	mov	r0, r1
   186c4:	mov	r4, r1
   186c8:	bl	18d10 <__assert_fail@plt+0x77b4>
   186cc:	cmp	r0, #0
   186d0:	beq	186e4 <__assert_fail@plt+0x7188>
   186d4:	mov	r1, r5
   186d8:	mov	r2, r4
   186dc:	pop	{r4, r5, fp, lr}
   186e0:	b	112a4 <memcpy@plt>
   186e4:	bl	18790 <__assert_fail@plt+0x7234>
   186e8:	push	{r4, r5, fp, lr}
   186ec:	add	fp, sp, #8
   186f0:	mov	r5, r0
   186f4:	mov	r0, r1
   186f8:	mov	r4, r1
   186fc:	bl	18d10 <__assert_fail@plt+0x77b4>
   18700:	cmp	r0, #0
   18704:	beq	18718 <__assert_fail@plt+0x71bc>
   18708:	mov	r1, r5
   1870c:	mov	r2, r4
   18710:	pop	{r4, r5, fp, lr}
   18714:	b	112a4 <memcpy@plt>
   18718:	bl	18790 <__assert_fail@plt+0x7234>
   1871c:	push	{r4, r5, fp, lr}
   18720:	add	fp, sp, #8
   18724:	mov	r5, r0
   18728:	add	r0, r1, #1
   1872c:	mov	r4, r1
   18730:	bl	18d10 <__assert_fail@plt+0x77b4>
   18734:	cmp	r0, #0
   18738:	beq	18754 <__assert_fail@plt+0x71f8>
   1873c:	mov	r1, #0
   18740:	mov	r2, r4
   18744:	strb	r1, [r0, r4]
   18748:	mov	r1, r5
   1874c:	pop	{r4, r5, fp, lr}
   18750:	b	112a4 <memcpy@plt>
   18754:	bl	18790 <__assert_fail@plt+0x7234>
   18758:	push	{r4, r5, fp, lr}
   1875c:	add	fp, sp, #8
   18760:	mov	r4, r0
   18764:	bl	113d0 <strlen@plt>
   18768:	add	r5, r0, #1
   1876c:	mov	r0, r5
   18770:	bl	18d10 <__assert_fail@plt+0x77b4>
   18774:	cmp	r0, #0
   18778:	beq	1878c <__assert_fail@plt+0x7230>
   1877c:	mov	r1, r4
   18780:	mov	r2, r5
   18784:	pop	{r4, r5, fp, lr}
   18788:	b	112a4 <memcpy@plt>
   1878c:	bl	18790 <__assert_fail@plt+0x7234>
   18790:	push	{fp, lr}
   18794:	mov	fp, sp
   18798:	movw	r0, #45372	; 0xb13c
   1879c:	movw	r1, #44176	; 0xac90
   187a0:	mov	r2, #5
   187a4:	movt	r0, #2
   187a8:	movt	r1, #1
   187ac:	ldr	r4, [r0]
   187b0:	mov	r0, #0
   187b4:	bl	112c8 <dcgettext@plt>
   187b8:	movw	r2, #41120	; 0xa0a0
   187bc:	mov	r3, r0
   187c0:	mov	r0, r4
   187c4:	mov	r1, #0
   187c8:	movt	r2, #1
   187cc:	bl	1134c <error@plt>
   187d0:	bl	11514 <abort@plt>
   187d4:	push	{fp, lr}
   187d8:	mov	fp, sp
   187dc:	orr	r1, r1, #512	; 0x200
   187e0:	bl	12de0 <__assert_fail@plt+0x1884>
   187e4:	cmp	r0, #0
   187e8:	popne	{fp, pc}
   187ec:	bl	11400 <__errno_location@plt>
   187f0:	ldr	r0, [r0]
   187f4:	cmp	r0, #22
   187f8:	bne	1881c <__assert_fail@plt+0x72c0>
   187fc:	movw	r0, #44193	; 0xaca1
   18800:	movw	r1, #44209	; 0xacb1
   18804:	movw	r3, #44220	; 0xacbc
   18808:	mov	r2, #41	; 0x29
   1880c:	movt	r0, #1
   18810:	movt	r1, #1
   18814:	movt	r3, #1
   18818:	bl	1155c <__assert_fail@plt>
   1881c:	bl	18790 <__assert_fail@plt+0x7234>
   18820:	ldr	r0, [r0, #48]	; 0x30
   18824:	and	r0, r0, #17
   18828:	cmp	r0, #16
   1882c:	moveq	r0, #1
   18830:	bxeq	lr
   18834:	cmp	r0, #17
   18838:	movne	r0, #0
   1883c:	bxne	lr
   18840:	ldr	r0, [r1, #48]	; 0x30
   18844:	cmp	r0, #0
   18848:	movwne	r0, #1
   1884c:	bx	lr
   18850:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18854:	add	fp, sp, #28
   18858:	sub	sp, sp, #12
   1885c:	cmp	r2, #37	; 0x25
   18860:	bcs	18c9c <__assert_fail@plt+0x7740>
   18864:	ldr	r9, [fp, #8]
   18868:	mov	r7, r2
   1886c:	mov	r6, r1
   18870:	mov	r4, r0
   18874:	str	r3, [sp, #4]
   18878:	bl	11400 <__errno_location@plt>
   1887c:	mov	r5, r0
   18880:	mov	r0, #0
   18884:	str	r0, [r5]
   18888:	bl	113a0 <__ctype_b_loc@plt>
   1888c:	ldr	r1, [r0]
   18890:	mov	r2, r4
   18894:	ldrb	r0, [r2], #1
   18898:	add	r3, r1, r0, lsl #1
   1889c:	ldrb	r3, [r3, #1]
   188a0:	tst	r3, #32
   188a4:	bne	18894 <__assert_fail@plt+0x7338>
   188a8:	cmp	r6, #0
   188ac:	add	r8, sp, #8
   188b0:	mov	sl, #4
   188b4:	movne	r8, r6
   188b8:	cmp	r0, #45	; 0x2d
   188bc:	beq	18c90 <__assert_fail@plt+0x7734>
   188c0:	mov	r0, r4
   188c4:	mov	r1, r8
   188c8:	mov	r2, r7
   188cc:	bl	113c4 <strtoul@plt>
   188d0:	ldr	r6, [r8]
   188d4:	cmp	r6, r4
   188d8:	beq	188fc <__assert_fail@plt+0x73a0>
   188dc:	mov	r7, r0
   188e0:	ldr	r0, [r5]
   188e4:	cmp	r0, #0
   188e8:	beq	1892c <__assert_fail@plt+0x73d0>
   188ec:	cmp	r0, #34	; 0x22
   188f0:	bne	18c90 <__assert_fail@plt+0x7734>
   188f4:	mov	sl, #1
   188f8:	b	18930 <__assert_fail@plt+0x73d4>
   188fc:	cmp	r9, #0
   18900:	beq	18c90 <__assert_fail@plt+0x7734>
   18904:	ldrb	r1, [r4]
   18908:	cmp	r1, #0
   1890c:	beq	18c90 <__assert_fail@plt+0x7734>
   18910:	mov	r0, r9
   18914:	bl	113dc <strchr@plt>
   18918:	cmp	r0, #0
   1891c:	beq	18c90 <__assert_fail@plt+0x7734>
   18920:	mov	r7, #1
   18924:	mov	sl, #0
   18928:	b	18938 <__assert_fail@plt+0x73dc>
   1892c:	mov	sl, r0
   18930:	cmp	r9, #0
   18934:	beq	18c88 <__assert_fail@plt+0x772c>
   18938:	ldrb	r4, [r6]
   1893c:	cmp	r4, #0
   18940:	beq	18c88 <__assert_fail@plt+0x772c>
   18944:	mov	r0, r9
   18948:	mov	r1, r4
   1894c:	bl	113dc <strchr@plt>
   18950:	cmp	r0, #0
   18954:	beq	18c10 <__assert_fail@plt+0x76b4>
   18958:	sub	r0, r4, #69	; 0x45
   1895c:	mov	r3, #1
   18960:	mov	r5, #1024	; 0x400
   18964:	cmp	r0, #21
   18968:	bhi	18980 <__assert_fail@plt+0x7424>
   1896c:	movw	r2, #35141	; 0x8945
   18970:	mov	r1, #1
   18974:	movt	r2, #48	; 0x30
   18978:	tst	r2, r1, lsl r0
   1897c:	bne	1899c <__assert_fail@plt+0x7440>
   18980:	sub	r0, r4, #103	; 0x67
   18984:	cmp	r0, #13
   18988:	bhi	189ec <__assert_fail@plt+0x7490>
   1898c:	mov	r1, #1
   18990:	movw	r2, #8273	; 0x2051
   18994:	tst	r2, r1, lsl r0
   18998:	beq	189ec <__assert_fail@plt+0x7490>
   1899c:	mov	r0, r9
   189a0:	mov	r1, #48	; 0x30
   189a4:	bl	113dc <strchr@plt>
   189a8:	cmp	r0, #0
   189ac:	beq	189e8 <__assert_fail@plt+0x748c>
   189b0:	ldrb	r0, [r6, #1]
   189b4:	cmp	r0, #66	; 0x42
   189b8:	cmpne	r0, #68	; 0x44
   189bc:	bne	189cc <__assert_fail@plt+0x7470>
   189c0:	mov	r3, #2
   189c4:	mov	r5, #1000	; 0x3e8
   189c8:	b	189ec <__assert_fail@plt+0x7490>
   189cc:	cmp	r0, #105	; 0x69
   189d0:	bne	189e8 <__assert_fail@plt+0x748c>
   189d4:	ldrb	r0, [r6, #2]
   189d8:	mov	r3, #1
   189dc:	cmp	r0, #66	; 0x42
   189e0:	movweq	r3, #3
   189e4:	b	189ec <__assert_fail@plt+0x7490>
   189e8:	mov	r3, #1
   189ec:	cmp	r4, #89	; 0x59
   189f0:	bgt	18a60 <__assert_fail@plt+0x7504>
   189f4:	sub	r0, r4, #66	; 0x42
   189f8:	cmp	r0, #14
   189fc:	bhi	18ad4 <__assert_fail@plt+0x7578>
   18a00:	add	r1, pc, #0
   18a04:	ldr	pc, [r1, r0, lsl #2]
   18a08:	andeq	r8, r1, r4, asr #20
   18a0c:	andeq	r8, r1, r0, lsl ip
   18a10:	andeq	r8, r1, r0, lsl ip
   18a14:	andeq	r8, r1, ip, lsl ip
   18a18:	andeq	r8, r1, r0, lsl ip
   18a1c:	andeq	r8, r1, r4, lsr fp
   18a20:	andeq	r8, r1, r0, lsl ip
   18a24:	andeq	r8, r1, r0, lsl ip
   18a28:	andeq	r8, r1, r0, lsl ip
   18a2c:	andeq	r8, r1, r0, ror #22
   18a30:	andeq	r8, r1, r0, lsl ip
   18a34:	andeq	r8, r1, r4, lsl #23
   18a38:	andeq	r8, r1, r0, lsl ip
   18a3c:	andeq	r8, r1, r0, lsl ip
   18a40:	andeq	r8, r1, r8, asr #24
   18a44:	mov	r1, #0
   18a48:	lsr	r0, r7, #22
   18a4c:	cmp	r1, r7, lsr #22
   18a50:	lsl	r7, r7, #10
   18a54:	movwne	r0, #1
   18a58:	mvnne	r7, #0
   18a5c:	b	18c70 <__assert_fail@plt+0x7714>
   18a60:	cmp	r4, #115	; 0x73
   18a64:	bgt	18b10 <__assert_fail@plt+0x75b4>
   18a68:	sub	r1, r4, #98	; 0x62
   18a6c:	cmp	r1, #11
   18a70:	bhi	18bdc <__assert_fail@plt+0x7680>
   18a74:	add	r2, pc, #4
   18a78:	mov	r0, #0
   18a7c:	ldr	pc, [r2, r1, lsl #2]
   18a80:			; <UNDEFINED> instruction: 0x00018ab0
   18a84:	andeq	r8, r1, r0, ror ip
   18a88:	andeq	r8, r1, r0, lsl ip
   18a8c:	andeq	r8, r1, r0, lsl ip
   18a90:	andeq	r8, r1, r0, lsl ip
   18a94:	andeq	r8, r1, r4, lsr fp
   18a98:	andeq	r8, r1, r0, lsl ip
   18a9c:	andeq	r8, r1, r0, lsl ip
   18aa0:	andeq	r8, r1, r0, lsl ip
   18aa4:	andeq	r8, r1, r0, ror #22
   18aa8:	andeq	r8, r1, r0, lsl ip
   18aac:	andeq	r8, r1, r4, lsl #23
   18ab0:	movw	r0, #65535	; 0xffff
   18ab4:	movt	r0, #63	; 0x3f
   18ab8:	orr	r1, r0, #4194304	; 0x400000
   18abc:	mov	r0, #0
   18ac0:	cmp	r7, r1
   18ac4:	lsl	r7, r7, #9
   18ac8:	movwhi	r0, #1
   18acc:	mvnhi	r7, #0
   18ad0:	b	18c70 <__assert_fail@plt+0x7714>
   18ad4:	cmp	r4, #84	; 0x54
   18ad8:	beq	18bb0 <__assert_fail@plt+0x7654>
   18adc:	cmp	r4, #89	; 0x59
   18ae0:	bne	18c10 <__assert_fail@plt+0x76b4>
   18ae4:	mvn	r0, #0
   18ae8:	mvn	r2, #7
   18aec:	udiv	r1, r0, r5
   18af0:	mov	r0, #0
   18af4:	cmp	r1, r7
   18af8:	mul	r7, r7, r5
   18afc:	orrcc	r0, r0, #1
   18b00:	mvncc	r7, #0
   18b04:	adds	r2, r2, #1
   18b08:	bcc	18af4 <__assert_fail@plt+0x7598>
   18b0c:	b	18c70 <__assert_fail@plt+0x7714>
   18b10:	cmp	r4, #116	; 0x74
   18b14:	beq	18bb0 <__assert_fail@plt+0x7654>
   18b18:	cmp	r4, #119	; 0x77
   18b1c:	bne	18c10 <__assert_fail@plt+0x76b4>
   18b20:	cmp	r7, #0
   18b24:	lsl	r1, r7, #1
   18b28:	lsr	r0, r7, #31
   18b2c:	mvnmi	r1, #0
   18b30:	b	18b7c <__assert_fail@plt+0x7620>
   18b34:	mvn	r0, #0
   18b38:	mvn	r2, #2
   18b3c:	udiv	r1, r0, r5
   18b40:	mov	r0, #0
   18b44:	cmp	r1, r7
   18b48:	mul	r7, r7, r5
   18b4c:	orrcc	r0, r0, #1
   18b50:	mvncc	r7, #0
   18b54:	adds	r2, r2, #1
   18b58:	bcc	18b44 <__assert_fail@plt+0x75e8>
   18b5c:	b	18c70 <__assert_fail@plt+0x7714>
   18b60:	mvn	r0, #0
   18b64:	mul	r1, r7, r5
   18b68:	udiv	r0, r0, r5
   18b6c:	cmp	r0, r7
   18b70:	mov	r0, #0
   18b74:	mvncc	r1, #0
   18b78:	movwcc	r0, #1
   18b7c:	mov	r7, r1
   18b80:	b	18c70 <__assert_fail@plt+0x7714>
   18b84:	mvn	r0, #0
   18b88:	mvn	r2, #1
   18b8c:	udiv	r1, r0, r5
   18b90:	mov	r0, #0
   18b94:	cmp	r1, r7
   18b98:	mul	r7, r7, r5
   18b9c:	orrcc	r0, r0, #1
   18ba0:	mvncc	r7, #0
   18ba4:	adds	r2, r2, #1
   18ba8:	bcc	18b94 <__assert_fail@plt+0x7638>
   18bac:	b	18c70 <__assert_fail@plt+0x7714>
   18bb0:	mvn	r0, #0
   18bb4:	mvn	r2, #3
   18bb8:	udiv	r1, r0, r5
   18bbc:	mov	r0, #0
   18bc0:	cmp	r1, r7
   18bc4:	mul	r7, r7, r5
   18bc8:	orrcc	r0, r0, #1
   18bcc:	mvncc	r7, #0
   18bd0:	adds	r2, r2, #1
   18bd4:	bcc	18bc0 <__assert_fail@plt+0x7664>
   18bd8:	b	18c70 <__assert_fail@plt+0x7714>
   18bdc:	cmp	r4, #90	; 0x5a
   18be0:	bne	18c10 <__assert_fail@plt+0x76b4>
   18be4:	mvn	r0, #0
   18be8:	mvn	r2, #6
   18bec:	udiv	r1, r0, r5
   18bf0:	mov	r0, #0
   18bf4:	cmp	r1, r7
   18bf8:	mul	r7, r7, r5
   18bfc:	orrcc	r0, r0, #1
   18c00:	mvncc	r7, #0
   18c04:	adds	r2, r2, #1
   18c08:	bcc	18bf4 <__assert_fail@plt+0x7698>
   18c0c:	b	18c70 <__assert_fail@plt+0x7714>
   18c10:	ldr	r0, [sp, #4]
   18c14:	orr	sl, sl, #2
   18c18:	b	18c8c <__assert_fail@plt+0x7730>
   18c1c:	mvn	r0, #0
   18c20:	mvn	r2, #5
   18c24:	udiv	r1, r0, r5
   18c28:	mov	r0, #0
   18c2c:	cmp	r1, r7
   18c30:	mul	r7, r7, r5
   18c34:	orrcc	r0, r0, #1
   18c38:	mvncc	r7, #0
   18c3c:	adds	r2, r2, #1
   18c40:	bcc	18c2c <__assert_fail@plt+0x76d0>
   18c44:	b	18c70 <__assert_fail@plt+0x7714>
   18c48:	mvn	r0, #0
   18c4c:	mvn	r2, #4
   18c50:	udiv	r1, r0, r5
   18c54:	mov	r0, #0
   18c58:	cmp	r1, r7
   18c5c:	mul	r7, r7, r5
   18c60:	orrcc	r0, r0, #1
   18c64:	mvncc	r7, #0
   18c68:	adds	r2, r2, #1
   18c6c:	bcc	18c58 <__assert_fail@plt+0x76fc>
   18c70:	add	r1, r6, r3
   18c74:	orr	sl, r0, sl
   18c78:	str	r1, [r8]
   18c7c:	ldrb	r1, [r6, r3]
   18c80:	cmp	r1, #0
   18c84:	orrne	sl, sl, #2
   18c88:	ldr	r0, [sp, #4]
   18c8c:	str	r7, [r0]
   18c90:	mov	r0, sl
   18c94:	sub	sp, fp, #28
   18c98:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18c9c:	movw	r0, #44298	; 0xad0a
   18ca0:	movw	r1, #44336	; 0xad30
   18ca4:	movw	r3, #44352	; 0xad40
   18ca8:	mov	r2, #85	; 0x55
   18cac:	movt	r0, #1
   18cb0:	movt	r1, #1
   18cb4:	movt	r3, #1
   18cb8:	bl	1155c <__assert_fail@plt>
   18cbc:	clz	r2, r1
   18cc0:	clz	r3, r0
   18cc4:	lsr	r2, r2, #5
   18cc8:	lsr	r3, r3, #5
   18ccc:	orrs	r2, r3, r2
   18cd0:	movwne	r1, #1
   18cd4:	movwne	r0, #1
   18cd8:	cmp	r1, #0
   18cdc:	beq	18d0c <__assert_fail@plt+0x77b0>
   18ce0:	mvn	r2, #-2147483648	; 0x80000000
   18ce4:	udiv	r2, r2, r1
   18ce8:	cmp	r2, r0
   18cec:	bcs	18d0c <__assert_fail@plt+0x77b0>
   18cf0:	push	{fp, lr}
   18cf4:	mov	fp, sp
   18cf8:	bl	11400 <__errno_location@plt>
   18cfc:	mov	r1, #12
   18d00:	str	r1, [r0]
   18d04:	mov	r0, #0
   18d08:	pop	{fp, pc}
   18d0c:	b	11220 <calloc@plt>
   18d10:	cmp	r0, #0
   18d14:	movweq	r0, #1
   18d18:	cmn	r0, #1
   18d1c:	ble	18d24 <__assert_fail@plt+0x77c8>
   18d20:	b	11364 <malloc@plt>
   18d24:	push	{fp, lr}
   18d28:	mov	fp, sp
   18d2c:	bl	11400 <__errno_location@plt>
   18d30:	mov	r1, #12
   18d34:	str	r1, [r0]
   18d38:	mov	r0, #0
   18d3c:	pop	{fp, pc}
   18d40:	push	{fp, lr}
   18d44:	mov	fp, sp
   18d48:	cmp	r0, #0
   18d4c:	beq	18d68 <__assert_fail@plt+0x780c>
   18d50:	cmp	r1, #0
   18d54:	beq	18d74 <__assert_fail@plt+0x7818>
   18d58:	cmn	r1, #1
   18d5c:	ble	18d7c <__assert_fail@plt+0x7820>
   18d60:	pop	{fp, lr}
   18d64:	b	112d4 <realloc@plt>
   18d68:	mov	r0, r1
   18d6c:	pop	{fp, lr}
   18d70:	b	18d10 <__assert_fail@plt+0x77b4>
   18d74:	bl	12db8 <__assert_fail@plt+0x185c>
   18d78:	b	18d88 <__assert_fail@plt+0x782c>
   18d7c:	bl	11400 <__errno_location@plt>
   18d80:	mov	r1, #12
   18d84:	str	r1, [r0]
   18d88:	mov	r0, #0
   18d8c:	pop	{fp, pc}
   18d90:	push	{r4, r5, r6, sl, fp, lr}
   18d94:	add	fp, sp, #16
   18d98:	mov	r4, r0
   18d9c:	bl	11328 <__fpending@plt>
   18da0:	mov	r5, r0
   18da4:	mov	r0, r4
   18da8:	bl	11334 <ferror_unlocked@plt>
   18dac:	mov	r6, r0
   18db0:	mov	r0, r4
   18db4:	bl	18efc <__assert_fail@plt+0x79a0>
   18db8:	cmp	r6, #0
   18dbc:	beq	18ddc <__assert_fail@plt+0x7880>
   18dc0:	mvn	r4, #0
   18dc4:	cmp	r0, #0
   18dc8:	bne	18e08 <__assert_fail@plt+0x78ac>
   18dcc:	bl	11400 <__errno_location@plt>
   18dd0:	mov	r1, #0
   18dd4:	str	r1, [r0]
   18dd8:	b	18e08 <__assert_fail@plt+0x78ac>
   18ddc:	cmp	r0, #0
   18de0:	mov	r4, r0
   18de4:	mvnne	r4, #0
   18de8:	cmp	r5, #0
   18dec:	bne	18e08 <__assert_fail@plt+0x78ac>
   18df0:	cmp	r0, #0
   18df4:	beq	18e08 <__assert_fail@plt+0x78ac>
   18df8:	bl	11400 <__errno_location@plt>
   18dfc:	ldr	r0, [r0]
   18e00:	subs	r4, r0, #9
   18e04:	mvnne	r4, #0
   18e08:	mov	r0, r4
   18e0c:	pop	{r4, r5, r6, sl, fp, pc}
   18e10:	movw	r2, #62998	; 0xf616
   18e14:	mov	r1, #0
   18e18:	movt	r2, #149	; 0x95
   18e1c:	str	r1, [r0, #16]
   18e20:	str	r1, [r0, #20]
   18e24:	str	r2, [r0, #24]
   18e28:	bx	lr
   18e2c:	push	{r4, r5, r6, r7, r9, sl, fp, lr}
   18e30:	add	fp, sp, #24
   18e34:	ldr	r2, [r0, #24]
   18e38:	movw	r3, #62998	; 0xf616
   18e3c:	movt	r3, #149	; 0x95
   18e40:	cmp	r2, r3
   18e44:	bne	18edc <__assert_fail@plt+0x7980>
   18e48:	add	r3, r0, #16
   18e4c:	add	ip, r0, #8
   18e50:	ldrd	r4, [r3]
   18e54:	orrs	r2, r4, r5
   18e58:	beq	18e94 <__assert_fail@plt+0x7938>
   18e5c:	ldr	r6, [r1, #96]	; 0x60
   18e60:	ldr	r9, [r1, #100]	; 0x64
   18e64:	ldm	r0, {r2, r7}
   18e68:	eor	r7, r9, r7
   18e6c:	eor	r2, r6, r2
   18e70:	orrs	r2, r2, r7
   18e74:	bne	18e94 <__assert_fail@plt+0x7938>
   18e78:	ldm	ip, {r2, r7}
   18e7c:	ldm	r1, {r6, r9}
   18e80:	eor	r7, r9, r7
   18e84:	eor	r2, r6, r2
   18e88:	orrs	r2, r2, r7
   18e8c:	mov	r2, #1
   18e90:	beq	18ed4 <__assert_fail@plt+0x7978>
   18e94:	adds	r6, r4, #1
   18e98:	adc	r7, r5, #0
   18e9c:	and	r2, r6, r4
   18ea0:	strd	r6, [r3]
   18ea4:	and	r3, r7, r5
   18ea8:	orrs	r2, r2, r3
   18eac:	mov	r2, #0
   18eb0:	bne	18ed4 <__assert_fail@plt+0x7978>
   18eb4:	orrs	r3, r6, r7
   18eb8:	beq	18ed0 <__assert_fail@plt+0x7974>
   18ebc:	ldrd	r4, [r1]
   18ec0:	strd	r4, [ip]
   18ec4:	ldrd	r4, [r1, #96]	; 0x60
   18ec8:	strd	r4, [r0]
   18ecc:	b	18ed4 <__assert_fail@plt+0x7978>
   18ed0:	mov	r2, #1
   18ed4:	mov	r0, r2
   18ed8:	pop	{r4, r5, r6, r7, r9, sl, fp, pc}
   18edc:	movw	r0, #44433	; 0xad91
   18ee0:	movw	r1, #44457	; 0xada9
   18ee4:	movw	r3, #44475	; 0xadbb
   18ee8:	mov	r2, #60	; 0x3c
   18eec:	movt	r0, #1
   18ef0:	movt	r1, #1
   18ef4:	movt	r3, #1
   18ef8:	bl	1155c <__assert_fail@plt>
   18efc:	push	{r4, r5, r6, sl, fp, lr}
   18f00:	add	fp, sp, #16
   18f04:	sub	sp, sp, #8
   18f08:	mov	r4, r0
   18f0c:	bl	11430 <fileno@plt>
   18f10:	cmn	r0, #1
   18f14:	ble	18f88 <__assert_fail@plt+0x7a2c>
   18f18:	mov	r0, r4
   18f1c:	bl	1137c <__freading@plt>
   18f20:	cmp	r0, #0
   18f24:	beq	18f50 <__assert_fail@plt+0x79f4>
   18f28:	mov	r0, r4
   18f2c:	bl	11430 <fileno@plt>
   18f30:	mov	r1, #1
   18f34:	mov	r2, #0
   18f38:	mov	r3, #0
   18f3c:	str	r1, [sp]
   18f40:	bl	11310 <lseek64@plt>
   18f44:	and	r0, r0, r1
   18f48:	cmn	r0, #1
   18f4c:	beq	18f88 <__assert_fail@plt+0x7a2c>
   18f50:	mov	r0, r4
   18f54:	bl	191ac <__assert_fail@plt+0x7c50>
   18f58:	cmp	r0, #0
   18f5c:	beq	18f88 <__assert_fail@plt+0x7a2c>
   18f60:	bl	11400 <__errno_location@plt>
   18f64:	ldr	r6, [r0]
   18f68:	mov	r5, r0
   18f6c:	mov	r0, r4
   18f70:	bl	11448 <fclose@plt>
   18f74:	cmp	r6, #0
   18f78:	strne	r6, [r5]
   18f7c:	mvnne	r0, #0
   18f80:	sub	sp, fp, #16
   18f84:	pop	{r4, r5, r6, sl, fp, pc}
   18f88:	mov	r0, r4
   18f8c:	sub	sp, fp, #16
   18f90:	pop	{r4, r5, r6, sl, fp, lr}
   18f94:	b	11448 <fclose@plt>
   18f98:	sub	sp, sp, #8
   18f9c:	push	{r4, r5, r6, r7, fp, lr}
   18fa0:	add	fp, sp, #16
   18fa4:	sub	sp, sp, #8
   18fa8:	mov	r5, r0
   18fac:	add	r0, fp, #8
   18fb0:	cmp	r1, #11
   18fb4:	str	r2, [fp, #8]
   18fb8:	str	r3, [fp, #12]
   18fbc:	str	r0, [sp, #4]
   18fc0:	bhi	18ffc <__assert_fail@plt+0x7aa0>
   18fc4:	mov	r0, #1
   18fc8:	movw	r2, #1300	; 0x514
   18fcc:	tst	r2, r0, lsl r1
   18fd0:	bne	190b4 <__assert_fail@plt+0x7b58>
   18fd4:	movw	r2, #2570	; 0xa0a
   18fd8:	tst	r2, r0, lsl r1
   18fdc:	bne	19024 <__assert_fail@plt+0x7ac8>
   18fe0:	cmp	r1, #0
   18fe4:	bne	18ffc <__assert_fail@plt+0x7aa0>
   18fe8:	ldr	r0, [sp, #4]
   18fec:	add	r1, r0, #4
   18ff0:	str	r1, [sp, #4]
   18ff4:	mov	r1, #0
   18ff8:	b	190c0 <__assert_fail@plt+0x7b64>
   18ffc:	sub	r0, r1, #1024	; 0x400
   19000:	cmp	r0, #10
   19004:	bhi	190b4 <__assert_fail@plt+0x7b58>
   19008:	mov	r2, #1
   1900c:	movw	r3, #645	; 0x285
   19010:	tst	r3, r2, lsl r0
   19014:	bne	190b4 <__assert_fail@plt+0x7b58>
   19018:	movw	r3, #1282	; 0x502
   1901c:	tst	r3, r2, lsl r0
   19020:	beq	19030 <__assert_fail@plt+0x7ad4>
   19024:	mov	r0, r5
   19028:	bl	11460 <fcntl64@plt>
   1902c:	b	190cc <__assert_fail@plt+0x7b70>
   19030:	cmp	r0, #6
   19034:	bne	190b4 <__assert_fail@plt+0x7b58>
   19038:	ldr	r0, [sp, #4]
   1903c:	movw	r7, #45816	; 0xb2f8
   19040:	movt	r7, #2
   19044:	add	r1, r0, #4
   19048:	str	r1, [sp, #4]
   1904c:	ldr	r6, [r0]
   19050:	ldr	r0, [r7]
   19054:	cmp	r0, #0
   19058:	bmi	190f0 <__assert_fail@plt+0x7b94>
   1905c:	mov	r0, r5
   19060:	movw	r1, #1030	; 0x406
   19064:	mov	r2, r6
   19068:	bl	11460 <fcntl64@plt>
   1906c:	mov	r4, r0
   19070:	cmn	r0, #1
   19074:	bgt	190e4 <__assert_fail@plt+0x7b88>
   19078:	bl	11400 <__errno_location@plt>
   1907c:	ldr	r0, [r0]
   19080:	cmp	r0, #22
   19084:	bne	190e4 <__assert_fail@plt+0x7b88>
   19088:	mov	r0, r5
   1908c:	mov	r1, #0
   19090:	mov	r2, r6
   19094:	bl	11460 <fcntl64@plt>
   19098:	mov	r4, r0
   1909c:	cmp	r0, #0
   190a0:	bmi	190d0 <__assert_fail@plt+0x7b74>
   190a4:	mvn	r0, #0
   190a8:	str	r0, [r7]
   190ac:	mov	r0, #1
   190b0:	b	19114 <__assert_fail@plt+0x7bb8>
   190b4:	ldr	r0, [sp, #4]
   190b8:	add	r2, r0, #4
   190bc:	str	r2, [sp, #4]
   190c0:	ldr	r2, [r0]
   190c4:	mov	r0, r5
   190c8:	bl	11460 <fcntl64@plt>
   190cc:	mov	r4, r0
   190d0:	mov	r0, r4
   190d4:	sub	sp, fp, #16
   190d8:	pop	{r4, r5, r6, r7, fp, lr}
   190dc:	add	sp, sp, #8
   190e0:	bx	lr
   190e4:	mov	r0, #1
   190e8:	str	r0, [r7]
   190ec:	b	190d0 <__assert_fail@plt+0x7b74>
   190f0:	mov	r0, r5
   190f4:	mov	r1, #0
   190f8:	mov	r2, r6
   190fc:	bl	11460 <fcntl64@plt>
   19100:	mov	r4, r0
   19104:	ldr	r0, [r7]
   19108:	add	r0, r0, #1
   1910c:	clz	r0, r0
   19110:	lsr	r0, r0, #5
   19114:	cmp	r0, #0
   19118:	beq	190d0 <__assert_fail@plt+0x7b74>
   1911c:	cmp	r4, #0
   19120:	bmi	190d0 <__assert_fail@plt+0x7b74>
   19124:	mov	r0, r4
   19128:	mov	r1, #1
   1912c:	bl	11460 <fcntl64@plt>
   19130:	cmp	r0, #0
   19134:	bmi	19150 <__assert_fail@plt+0x7bf4>
   19138:	orr	r2, r0, #1
   1913c:	mov	r0, r4
   19140:	mov	r1, #2
   19144:	bl	11460 <fcntl64@plt>
   19148:	cmn	r0, #1
   1914c:	bne	190d0 <__assert_fail@plt+0x7b74>
   19150:	bl	11400 <__errno_location@plt>
   19154:	ldr	r6, [r0]
   19158:	mov	r5, r0
   1915c:	mov	r0, r4
   19160:	bl	11520 <close@plt>
   19164:	str	r6, [r5]
   19168:	mvn	r4, #0
   1916c:	b	190d0 <__assert_fail@plt+0x7b74>
   19170:	sub	sp, sp, #8
   19174:	push	{fp, lr}
   19178:	mov	fp, sp
   1917c:	sub	sp, sp, #8
   19180:	str	r2, [fp, #8]
   19184:	str	r3, [fp, #12]
   19188:	tst	r1, #64	; 0x40
   1918c:	mov	r2, #0
   19190:	ldrne	r2, [fp, #8]
   19194:	bl	11358 <open64@plt>
   19198:	bl	17ac4 <__assert_fail@plt+0x6568>
   1919c:	mov	sp, fp
   191a0:	pop	{fp, lr}
   191a4:	add	sp, sp, #8
   191a8:	bx	lr
   191ac:	push	{r4, sl, fp, lr}
   191b0:	add	fp, sp, #8
   191b4:	sub	sp, sp, #8
   191b8:	mov	r4, r0
   191bc:	cmp	r0, #0
   191c0:	beq	191f8 <__assert_fail@plt+0x7c9c>
   191c4:	mov	r0, r4
   191c8:	bl	1137c <__freading@plt>
   191cc:	cmp	r0, #0
   191d0:	beq	191f8 <__assert_fail@plt+0x7c9c>
   191d4:	ldrb	r0, [r4, #1]
   191d8:	tst	r0, #1
   191dc:	beq	191f8 <__assert_fail@plt+0x7c9c>
   191e0:	mov	r0, #1
   191e4:	mov	r2, #0
   191e8:	mov	r3, #0
   191ec:	str	r0, [sp]
   191f0:	mov	r0, r4
   191f4:	bl	19208 <__assert_fail@plt+0x7cac>
   191f8:	mov	r0, r4
   191fc:	sub	sp, fp, #8
   19200:	pop	{r4, sl, fp, lr}
   19204:	b	11274 <fflush@plt>
   19208:	push	{r4, r5, r6, r7, fp, lr}
   1920c:	add	fp, sp, #16
   19210:	sub	sp, sp, #8
   19214:	mov	r4, r0
   19218:	ldr	r0, [r0, #4]
   1921c:	mov	r5, r3
   19220:	mov	r6, r2
   19224:	ldr	r1, [r4, #8]
   19228:	cmp	r1, r0
   1922c:	bne	19248 <__assert_fail@plt+0x7cec>
   19230:	ldrd	r0, [r4, #16]
   19234:	cmp	r1, r0
   19238:	bne	19248 <__assert_fail@plt+0x7cec>
   1923c:	ldr	r0, [r4, #36]	; 0x24
   19240:	cmp	r0, #0
   19244:	beq	19260 <__assert_fail@plt+0x7d04>
   19248:	mov	r0, r4
   1924c:	mov	r2, r6
   19250:	mov	r3, r5
   19254:	sub	sp, fp, #16
   19258:	pop	{r4, r5, r6, r7, fp, lr}
   1925c:	b	11454 <fseeko64@plt>
   19260:	ldr	r7, [fp, #8]
   19264:	mov	r0, r4
   19268:	bl	11430 <fileno@plt>
   1926c:	mov	r2, r6
   19270:	mov	r3, r5
   19274:	str	r7, [sp]
   19278:	bl	11310 <lseek64@plt>
   1927c:	and	r2, r0, r1
   19280:	cmn	r2, #1
   19284:	beq	192a0 <__assert_fail@plt+0x7d44>
   19288:	strd	r0, [r4, #80]	; 0x50
   1928c:	ldr	r0, [r4]
   19290:	bic	r0, r0, #16
   19294:	str	r0, [r4]
   19298:	mov	r0, #0
   1929c:	b	192a4 <__assert_fail@plt+0x7d48>
   192a0:	mvn	r0, #0
   192a4:	sub	sp, fp, #16
   192a8:	pop	{r4, r5, r6, r7, fp, pc}
   192ac:	push	{fp, lr}
   192b0:	mov	fp, sp
   192b4:	mov	r0, #14
   192b8:	bl	11490 <nl_langinfo@plt>
   192bc:	movw	r1, #40584	; 0x9e88
   192c0:	cmp	r0, #0
   192c4:	movt	r1, #1
   192c8:	movne	r1, r0
   192cc:	movw	r0, #44542	; 0xadfe
   192d0:	ldrb	r2, [r1]
   192d4:	movt	r0, #1
   192d8:	cmp	r2, #0
   192dc:	movne	r0, r1
   192e0:	pop	{fp, pc}
   192e4:	push	{r4, r5, r6, r7, fp, lr}
   192e8:	add	fp, sp, #16
   192ec:	sub	sp, sp, #8
   192f0:	cmp	r0, #0
   192f4:	add	r5, sp, #4
   192f8:	mov	r7, r2
   192fc:	mov	r4, r1
   19300:	movne	r5, r0
   19304:	mov	r0, r5
   19308:	bl	11340 <mbrtowc@plt>
   1930c:	mov	r6, r0
   19310:	cmp	r7, #0
   19314:	beq	1933c <__assert_fail@plt+0x7de0>
   19318:	cmn	r6, #2
   1931c:	bcc	1933c <__assert_fail@plt+0x7de0>
   19320:	mov	r0, #0
   19324:	bl	19390 <__assert_fail@plt+0x7e34>
   19328:	cmp	r0, #0
   1932c:	bne	1933c <__assert_fail@plt+0x7de0>
   19330:	ldrb	r0, [r4]
   19334:	mov	r6, #1
   19338:	str	r0, [r5]
   1933c:	mov	r0, r6
   19340:	sub	sp, fp, #16
   19344:	pop	{r4, r5, r6, r7, fp, pc}
   19348:	cmp	r2, #0
   1934c:	beq	1937c <__assert_fail@plt+0x7e20>
   19350:	mvn	r3, #0
   19354:	udiv	r3, r3, r2
   19358:	cmp	r3, r1
   1935c:	bcs	1937c <__assert_fail@plt+0x7e20>
   19360:	push	{fp, lr}
   19364:	mov	fp, sp
   19368:	bl	11400 <__errno_location@plt>
   1936c:	mov	r1, #12
   19370:	str	r1, [r0]
   19374:	mov	r0, #0
   19378:	pop	{fp, pc}
   1937c:	mul	r1, r2, r1
   19380:	b	18d40 <__assert_fail@plt+0x77e4>
   19384:	mov	r1, #0
   19388:	mov	r2, #3
   1938c:	b	18f98 <__assert_fail@plt+0x7a3c>
   19390:	push	{r4, sl, fp, lr}
   19394:	add	fp, sp, #8
   19398:	sub	sp, sp, #264	; 0x108
   1939c:	add	r1, sp, #7
   193a0:	movw	r2, #257	; 0x101
   193a4:	bl	193fc <__assert_fail@plt+0x7ea0>
   193a8:	mov	r4, #0
   193ac:	cmp	r0, #0
   193b0:	bne	193f0 <__assert_fail@plt+0x7e94>
   193b4:	movw	r1, #44548	; 0xae04
   193b8:	add	r0, sp, #7
   193bc:	mov	r2, #2
   193c0:	movt	r1, #1
   193c4:	bl	113b8 <bcmp@plt>
   193c8:	cmp	r0, #0
   193cc:	beq	193f0 <__assert_fail@plt+0x7e94>
   193d0:	movw	r1, #44550	; 0xae06
   193d4:	add	r0, sp, #7
   193d8:	mov	r2, #6
   193dc:	movt	r1, #1
   193e0:	bl	113b8 <bcmp@plt>
   193e4:	cmp	r0, #0
   193e8:	mov	r4, r0
   193ec:	movwne	r4, #1
   193f0:	mov	r0, r4
   193f4:	sub	sp, fp, #8
   193f8:	pop	{r4, sl, fp, pc}
   193fc:	push	{r4, r5, r6, r7, fp, lr}
   19400:	add	fp, sp, #16
   19404:	mov	r4, r1
   19408:	mov	r1, #0
   1940c:	mov	r6, r2
   19410:	bl	1146c <setlocale@plt>
   19414:	cmp	r0, #0
   19418:	beq	19444 <__assert_fail@plt+0x7ee8>
   1941c:	mov	r7, r0
   19420:	bl	113d0 <strlen@plt>
   19424:	cmp	r0, r6
   19428:	bcs	19458 <__assert_fail@plt+0x7efc>
   1942c:	add	r2, r0, #1
   19430:	mov	r0, r4
   19434:	mov	r1, r7
   19438:	bl	112a4 <memcpy@plt>
   1943c:	mov	r5, #0
   19440:	b	19480 <__assert_fail@plt+0x7f24>
   19444:	cmp	r6, #0
   19448:	mov	r5, #22
   1944c:	movne	r0, #0
   19450:	strbne	r0, [r4]
   19454:	b	19480 <__assert_fail@plt+0x7f24>
   19458:	mov	r5, #34	; 0x22
   1945c:	cmp	r6, #0
   19460:	beq	19480 <__assert_fail@plt+0x7f24>
   19464:	sub	r6, r6, #1
   19468:	mov	r0, r4
   1946c:	mov	r1, r7
   19470:	mov	r2, r6
   19474:	bl	112a4 <memcpy@plt>
   19478:	mov	r0, #0
   1947c:	strb	r0, [r4, r6]
   19480:	mov	r0, r5
   19484:	pop	{r4, r5, r6, r7, fp, pc}
   19488:	mov	r1, #0
   1948c:	b	1146c <setlocale@plt>
   19490:	cmp	r3, #0
   19494:	cmpeq	r2, #0
   19498:	bne	194b0 <__assert_fail@plt+0x7f54>
   1949c:	cmp	r1, #0
   194a0:	cmpeq	r0, #0
   194a4:	mvnne	r1, #0
   194a8:	mvnne	r0, #0
   194ac:	b	194cc <__assert_fail@plt+0x7f70>
   194b0:	sub	sp, sp, #8
   194b4:	push	{sp, lr}
   194b8:	bl	194dc <__assert_fail@plt+0x7f80>
   194bc:	ldr	lr, [sp, #4]
   194c0:	add	sp, sp, #8
   194c4:	pop	{r2, r3}
   194c8:	bx	lr
   194cc:	push	{r1, lr}
   194d0:	mov	r0, #8
   194d4:	bl	11244 <raise@plt>
   194d8:	pop	{r1, pc}
   194dc:	cmp	r1, r3
   194e0:	cmpeq	r0, r2
   194e4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   194e8:	mov	r4, r0
   194ec:	movcc	r0, #0
   194f0:	mov	r5, r1
   194f4:	ldr	lr, [sp, #36]	; 0x24
   194f8:	movcc	r1, r0
   194fc:	bcc	195f8 <__assert_fail@plt+0x809c>
   19500:	cmp	r3, #0
   19504:	clzeq	ip, r2
   19508:	clzne	ip, r3
   1950c:	addeq	ip, ip, #32
   19510:	cmp	r5, #0
   19514:	clzeq	r1, r4
   19518:	addeq	r1, r1, #32
   1951c:	clzne	r1, r5
   19520:	sub	ip, ip, r1
   19524:	sub	sl, ip, #32
   19528:	lsl	r9, r3, ip
   1952c:	rsb	fp, ip, #32
   19530:	orr	r9, r9, r2, lsl sl
   19534:	orr	r9, r9, r2, lsr fp
   19538:	lsl	r8, r2, ip
   1953c:	cmp	r5, r9
   19540:	cmpeq	r4, r8
   19544:	movcc	r0, #0
   19548:	movcc	r1, r0
   1954c:	bcc	19568 <__assert_fail@plt+0x800c>
   19550:	mov	r0, #1
   19554:	subs	r4, r4, r8
   19558:	lsl	r1, r0, sl
   1955c:	orr	r1, r1, r0, lsr fp
   19560:	lsl	r0, r0, ip
   19564:	sbc	r5, r5, r9
   19568:	cmp	ip, #0
   1956c:	beq	195f8 <__assert_fail@plt+0x809c>
   19570:	lsr	r6, r8, #1
   19574:	orr	r6, r6, r9, lsl #31
   19578:	lsr	r7, r9, #1
   1957c:	mov	r2, ip
   19580:	b	195a4 <__assert_fail@plt+0x8048>
   19584:	subs	r3, r4, r6
   19588:	sbc	r8, r5, r7
   1958c:	adds	r3, r3, r3
   19590:	adc	r8, r8, r8
   19594:	adds	r4, r3, #1
   19598:	adc	r5, r8, #0
   1959c:	subs	r2, r2, #1
   195a0:	beq	195c0 <__assert_fail@plt+0x8064>
   195a4:	cmp	r5, r7
   195a8:	cmpeq	r4, r6
   195ac:	bcs	19584 <__assert_fail@plt+0x8028>
   195b0:	adds	r4, r4, r4
   195b4:	adc	r5, r5, r5
   195b8:	subs	r2, r2, #1
   195bc:	bne	195a4 <__assert_fail@plt+0x8048>
   195c0:	lsr	r3, r4, ip
   195c4:	orr	r3, r3, r5, lsl fp
   195c8:	lsr	r2, r5, ip
   195cc:	orr	r3, r3, r5, lsr sl
   195d0:	adds	r0, r0, r4
   195d4:	mov	r4, r3
   195d8:	lsl	r3, r2, ip
   195dc:	orr	r3, r3, r4, lsl sl
   195e0:	lsl	ip, r4, ip
   195e4:	orr	r3, r3, r4, lsr fp
   195e8:	adc	r1, r1, r5
   195ec:	subs	r0, r0, ip
   195f0:	mov	r5, r2
   195f4:	sbc	r1, r1, r3
   195f8:	cmp	lr, #0
   195fc:	strdne	r4, [lr]
   19600:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19604:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   19608:	mov	r7, r0
   1960c:	ldr	r6, [pc, #72]	; 1965c <__assert_fail@plt+0x8100>
   19610:	ldr	r5, [pc, #72]	; 19660 <__assert_fail@plt+0x8104>
   19614:	add	r6, pc, r6
   19618:	add	r5, pc, r5
   1961c:	sub	r6, r6, r5
   19620:	mov	r8, r1
   19624:	mov	r9, r2
   19628:	bl	111f4 <fstatfs64@plt-0x20>
   1962c:	asrs	r6, r6, #2
   19630:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   19634:	mov	r4, #0
   19638:	add	r4, r4, #1
   1963c:	ldr	r3, [r5], #4
   19640:	mov	r2, r9
   19644:	mov	r1, r8
   19648:	mov	r0, r7
   1964c:	blx	r3
   19650:	cmp	r6, r4
   19654:	bne	19638 <__assert_fail@plt+0x80dc>
   19658:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1965c:	strdeq	r1, [r1], -r0
   19660:	andeq	r1, r1, r8, ror #17
   19664:	bx	lr
   19668:	ldr	r3, [pc, #12]	; 1967c <__assert_fail@plt+0x8120>
   1966c:	mov	r1, #0
   19670:	add	r3, pc, r3
   19674:	ldr	r2, [r3]
   19678:	b	1140c <__cxa_atexit@plt>
   1967c:			; <UNDEFINED> instruction: 0x00011abc
   19680:	mov	r2, r1
   19684:	mov	r1, r0
   19688:	mov	r0, #3
   1968c:	b	114f0 <__xstat64@plt>
   19690:	mov	r2, r1
   19694:	mov	r1, r0
   19698:	mov	r0, #3
   1969c:	b	11304 <__fxstat64@plt>
   196a0:	mov	r2, r1
   196a4:	mov	r1, r0
   196a8:	mov	r0, #3
   196ac:	b	1152c <__lxstat64@plt>
   196b0:	push	{lr}		; (str lr, [sp, #-4]!)
   196b4:	sub	sp, sp, #12
   196b8:	str	r3, [sp]
   196bc:	mov	r3, r2
   196c0:	mov	r2, r1
   196c4:	mov	r1, r0
   196c8:	mov	r0, #3
   196cc:	bl	112ec <__fxstatat64@plt>
   196d0:	add	sp, sp, #12
   196d4:	pop	{pc}		; (ldr pc, [sp], #4)

Disassembly of section .fini:

000196d8 <.fini>:
   196d8:	push	{r3, lr}
   196dc:	pop	{r3, pc}
