
../repos/charybdis/librb/src/.libs/librb.so:     file format elf32-littlearm


Disassembly of section .init:

00004c80 <_init>:
    4c80:	push	{r3, lr}
    4c84:	bl	5628 <call_weak_fn>
    4c88:	pop	{r3, pc}

Disassembly of section .plt:

00004c8c <.plt>:
    4c8c:	push	{lr}		; (str lr, [sp, #-4]!)
    4c90:	ldr	lr, [pc, #4]	; 4c9c <.plt+0x10>
    4c94:	add	lr, pc, lr
    4c98:	ldr	pc, [lr, #8]!
    4c9c:	.word	0x00023364

00004ca0 <rb_helper_run@plt>:
    4ca0:	add	ip, pc, #0, 12
    4ca4:	add	ip, ip, #143360	; 0x23000
    4ca8:	ldr	pc, [ip, #868]!	; 0x364

00004cac <TLS_method@plt>:
    4cac:	add	ip, pc, #0, 12
    4cb0:	add	ip, ip, #143360	; 0x23000
    4cb4:	ldr	pc, [ip, #860]!	; 0x35c

00004cb8 <open@plt>:
    4cb8:	add	ip, pc, #0, 12
    4cbc:	add	ip, ip, #143360	; 0x23000
    4cc0:	ldr	pc, [ip, #852]!	; 0x354

00004cc4 <rb_init_netio@plt>:
    4cc4:	add	ip, pc, #0, 12
    4cc8:	add	ip, ip, #143360	; 0x23000
    4ccc:	ldr	pc, [ip, #844]!	; 0x34c

00004cd0 <sigemptyset@plt>:
    4cd0:	add	ip, pc, #0, 12
    4cd4:	add	ip, ip, #143360	; 0x23000
    4cd8:	ldr	pc, [ip, #836]!	; 0x344

00004cdc <strerror@plt>:
    4cdc:	add	ip, pc, #0, 12
    4ce0:	add	ip, ip, #143360	; 0x23000
    4ce4:	ldr	pc, [ip, #828]!	; 0x33c

00004ce8 <rb_radixtree_elem_delete@plt>:
    4ce8:	add	ip, pc, #0, 12
    4cec:	add	ip, ip, #143360	; 0x23000
    4cf0:	ldr	pc, [ip, #820]!	; 0x334

00004cf4 <getdtablesize@plt>:
    4cf4:	add	ip, pc, #0, 12
    4cf8:	add	ip, ip, #143360	; 0x23000
    4cfc:	ldr	pc, [ip, #812]!	; 0x32c

00004d00 <abort@plt>:
    4d00:	add	ip, pc, #0, 12
    4d04:	add	ip, ip, #143360	; 0x23000
    4d08:	ldr	pc, [ip, #804]!	; 0x324

00004d0c <connect@plt>:
    4d0c:	add	ip, pc, #0, 12
    4d10:	add	ip, ip, #143360	; 0x23000
    4d14:	ldr	pc, [ip, #796]!	; 0x31c

00004d18 <rb_ignore_errno@plt>:
    4d18:	add	ip, pc, #0, 12
    4d1c:	add	ip, ip, #143360	; 0x23000
    4d20:	ldr	pc, [ip, #788]!	; 0x314

00004d24 <rb_settimeout@plt>:
    4d24:	add	ip, pc, #0, 12
    4d28:	add	ip, ip, #143360	; 0x23000
    4d2c:	ldr	pc, [ip, #780]!	; 0x30c

00004d30 <SSL_CTX_set_cipher_list@plt>:
    4d30:	add	ip, pc, #0, 12
    4d34:	add	ip, ip, #143360	; 0x23000
    4d38:	ldr	pc, [ip, #772]!	; 0x304

00004d3c <ERR_get_error@plt>:
    4d3c:	add	ip, pc, #0, 12
    4d40:	add	ip, ip, #143360	; 0x23000
    4d44:	ldr	pc, [ip, #764]!	; 0x2fc

00004d48 <rb_radixtree_foreach_start@plt>:
    4d48:	add	ip, pc, #0, 12
    4d4c:	add	ip, ip, #143360	; 0x23000
    4d50:	ldr	pc, [ip, #756]!	; 0x2f4

00004d54 <strcasestr@plt>:
    4d54:	add	ip, pc, #0, 12
    4d58:	add	ip, ip, #143360	; 0x23000
    4d5c:	ldr	pc, [ip, #748]!	; 0x2ec

00004d60 <rb_connect_tcp@plt>:
    4d60:	add	ip, pc, #0, 12
    4d64:	add	ip, ip, #143360	; 0x23000
    4d68:	ldr	pc, [ip, #740]!	; 0x2e4

00004d6c <RAND_load_file@plt>:
    4d6c:	add	ip, pc, #0, 12
    4d70:	add	ip, ip, #143360	; 0x23000
    4d74:	ldr	pc, [ip, #732]!	; 0x2dc

00004d78 <signalfd@plt>:
    4d78:	add	ip, pc, #0, 12
    4d7c:	add	ip, ip, #143360	; 0x23000
    4d80:	ldr	pc, [ip, #724]!	; 0x2d4

00004d84 <rb_radixtree_foreach_next@plt>:
    4d84:	add	ip, pc, #0, 12
    4d88:	add	ip, ip, #143360	; 0x23000
    4d8c:	ldr	pc, [ip, #716]!	; 0x2cc

00004d90 <memcmp@plt>:
    4d90:	add	ip, pc, #0, 12
    4d94:	add	ip, ip, #143360	; 0x23000
    4d98:	ldr	pc, [ip, #708]!	; 0x2c4

00004d9c <SSL_CTX_free@plt>:
    4d9c:	add	ip, pc, #0, 12
    4da0:	add	ip, ip, #143360	; 0x23000
    4da4:	ldr	pc, [ip, #700]!	; 0x2bc

00004da8 <rb_getmaxconnect@plt>:
    4da8:	add	ip, pc, #0, 12
    4dac:	add	ip, ip, #143360	; 0x23000
    4db0:	ldr	pc, [ip, #692]!	; 0x2b4

00004db4 <sigwaitinfo@plt>:
    4db4:	add	ip, pc, #0, 12
    4db8:	add	ip, ip, #143360	; 0x23000
    4dbc:	ldr	pc, [ip, #684]!	; 0x2ac

00004dc0 <__libc_current_sigrtmin@plt>:
    4dc0:	add	ip, pc, #0, 12
    4dc4:	add	ip, ip, #143360	; 0x23000
    4dc8:	ldr	pc, [ip, #676]!	; 0x2a4

00004dcc <__xstat@plt>:
    4dcc:	add	ip, pc, #0, 12
    4dd0:	add	ip, ip, #143360	; 0x23000
    4dd4:	ldr	pc, [ip, #668]!	; 0x29c

00004dd8 <rb_event_delete@plt>:
    4dd8:	add	ip, pc, #0, 12
    4ddc:	add	ip, ip, #143360	; 0x23000
    4de0:	ldr	pc, [ip, #660]!	; 0x294

00004de4 <rb_setselect@plt>:
    4de4:	add	ip, pc, #0, 12
    4de8:	add	ip, ip, #143360	; 0x23000
    4dec:	ldr	pc, [ip, #652]!	; 0x28c

00004df0 <rb_fd_ssl@plt>:
    4df0:	add	ip, pc, #0, 12
    4df4:	add	ip, ip, #143360	; 0x23000
    4df8:	ldr	pc, [ip, #644]!	; 0x284

00004dfc <sigtimedwait@plt>:
    4dfc:	add	ip, pc, #0, 12
    4e00:	add	ip, ip, #143360	; 0x23000
    4e04:	ldr	pc, [ip, #636]!	; 0x27c

00004e08 <rb_setenv@plt>:
    4e08:	add	ip, pc, #0, 12
    4e0c:	add	ip, ip, #143360	; 0x23000
    4e10:	ldr	pc, [ip, #628]!	; 0x274

00004e14 <signal@plt>:
    4e14:	add	ip, pc, #0, 12
    4e18:	add	ip, ip, #143360	; 0x23000
    4e1c:	ldr	pc, [ip, #620]!	; 0x26c

00004e20 <rb_get_fd@plt>:
    4e20:	add	ip, pc, #0, 12
    4e24:	add	ip, ip, #143360	; 0x23000
    4e28:	ldr	pc, [ip, #612]!	; 0x264

00004e2c <epoll_create@plt>:
    4e2c:	add	ip, pc, #0, 12
    4e30:	add	ip, ip, #143360	; 0x23000
    4e34:	ldr	pc, [ip, #604]!	; 0x25c

00004e38 <rb_clear_patricia@plt>:
    4e38:	add	ip, pc, #0, 12
    4e3c:	add	ip, ip, #143360	; 0x23000
    4e40:	ldr	pc, [ip, #596]!	; 0x254

00004e44 <__gmon_start__@plt>:
    4e44:	add	ip, pc, #0, 12
    4e48:	add	ip, ip, #143360	; 0x23000
    4e4c:	ldr	pc, [ip, #588]!	; 0x24c

00004e50 <SSL_CTX_clear_options@plt>:
    4e50:	add	ip, pc, #0, 12
    4e54:	add	ip, ip, #143360	; 0x23000
    4e58:	ldr	pc, [ip, #580]!	; 0x244

00004e5c <SSL_get_current_cipher@plt>:
    4e5c:	add	ip, pc, #0, 12
    4e60:	add	ip, ip, #143360	; 0x23000
    4e64:	ldr	pc, [ip, #572]!	; 0x23c

00004e68 <timer_create@plt>:
    4e68:	add	ip, pc, #0, 12
    4e6c:	add	ip, ip, #143360	; 0x23000
    4e70:	ldr	pc, [ip, #564]!	; 0x234

00004e74 <X509_get_X509_PUBKEY@plt>:
    4e74:	add	ip, pc, #0, 12
    4e78:	add	ip, ip, #143360	; 0x23000
    4e7c:	ldr	pc, [ip, #556]!	; 0x22c

00004e80 <rb_select@plt>:
    4e80:	add	ip, pc, #0, 12
    4e84:	add	ip, ip, #143360	; 0x23000
    4e88:	ldr	pc, [ip, #548]!	; 0x224

00004e8c <vsnprintf@plt>:
    4e8c:	add	ip, pc, #0, 12
    4e90:	add	ip, ip, #143360	; 0x23000
    4e94:	ldr	pc, [ip, #540]!	; 0x21c

00004e98 <socketpair@plt>:
    4e98:	add	ip, pc, #0, 12
    4e9c:	add	ip, ip, #143360	; 0x23000
    4ea0:	ldr	pc, [ip, #532]!	; 0x214

00004ea4 <strncpy@plt>:
    4ea4:	add	ip, pc, #0, 12
    4ea8:	add	ip, ip, #143360	; 0x23000
    4eac:	ldr	pc, [ip, #524]!	; 0x20c

00004eb0 <fclose@plt>:
    4eb0:	add	ip, pc, #0, 12
    4eb4:	add	ip, ip, #143360	; 0x23000
    4eb8:	ldr	pc, [ip, #516]!	; 0x204

00004ebc <recv@plt>:
    4ebc:	add	ip, pc, #0, 12
    4ec0:	add	ip, ip, #143360	; 0x23000
    4ec4:	ldr	pc, [ip, #508]!	; 0x1fc

00004ec8 <getenv@plt>:
    4ec8:	add	ip, pc, #0, 12
    4ecc:	add	ip, ip, #143360	; 0x23000
    4ed0:	ldr	pc, [ip, #500]!	; 0x1f4

00004ed4 <ERR_error_string_n@plt>:
    4ed4:	add	ip, pc, #0, 12
    4ed8:	add	ip, ip, #143360	; 0x23000
    4edc:	ldr	pc, [ip, #492]!	; 0x1ec

00004ee0 <strchr@plt>:
    4ee0:	add	ip, pc, #0, 12
    4ee4:	add	ip, ip, #143360	; 0x23000
    4ee8:	ldr	pc, [ip, #484]!	; 0x1e4

00004eec <rb_gettimeofday@plt>:
    4eec:	add	ip, pc, #0, 12
    4ef0:	add	ip, ip, #143360	; 0x23000
    4ef4:	ldr	pc, [ip, #476]!	; 0x1dc

00004ef8 <strcasecmp@plt>:
    4ef8:	add	ip, pc, #0, 12
    4efc:	add	ip, ip, #143360	; 0x23000
    4f00:	ldr	pc, [ip, #468]!	; 0x1d4

00004f04 <listen@plt>:
    4f04:	add	ip, pc, #0, 12
    4f08:	add	ip, ip, #143360	; 0x23000
    4f0c:	ldr	pc, [ip, #460]!	; 0x1cc

00004f10 <calloc@plt>:
    4f10:	add	ip, pc, #0, 12
    4f14:	add	ip, ip, #143360	; 0x23000
    4f18:	ldr	pc, [ip, #452]!	; 0x1c4

00004f1c <SSL_write@plt>:
    4f1c:	add	ip, pc, #0, 12
    4f20:	add	ip, ip, #143360	; 0x23000
    4f24:	ldr	pc, [ip, #444]!	; 0x1bc

00004f28 <rb_event_init@plt>:
    4f28:	add	ip, pc, #0, 12
    4f2c:	add	ip, ip, #143360	; 0x23000
    4f30:	ldr	pc, [ip, #436]!	; 0x1b4

00004f34 <fopen@plt>:
    4f34:	add	ip, pc, #0, 12
    4f38:	add	ip, ip, #143360	; 0x23000
    4f3c:	ldr	pc, [ip, #428]!	; 0x1ac

00004f40 <rb_set_nb@plt>:
    4f40:	add	ip, pc, #0, 12
    4f44:	add	ip, ip, #143360	; 0x23000
    4f48:	ldr	pc, [ip, #420]!	; 0x1a4

00004f4c <memset@plt>:
    4f4c:	add	ip, pc, #0, 12
    4f50:	add	ip, ip, #143360	; 0x23000
    4f54:	ldr	pc, [ip, #412]!	; 0x19c

00004f58 <rb_inet_pton@plt>:
    4f58:	add	ip, pc, #0, 12
    4f5c:	add	ip, ip, #143360	; 0x23000
    4f60:	ldr	pc, [ip, #404]!	; 0x194

00004f64 <rb_radixtree_stats@plt>:
    4f64:	add	ip, pc, #0, 12
    4f68:	add	ip, ip, #143360	; 0x23000
    4f6c:	ldr	pc, [ip, #396]!	; 0x18c

00004f70 <strrchr@plt>:
    4f70:	add	ip, pc, #0, 12
    4f74:	add	ip, ip, #143360	; 0x23000
    4f78:	ldr	pc, [ip, #388]!	; 0x184

00004f7c <rb_write@plt>:
    4f7c:	add	ip, pc, #0, 12
    4f80:	add	ip, ip, #143360	; 0x23000
    4f84:	ldr	pc, [ip, #380]!	; 0x17c

00004f88 <SSL_set_fd@plt>:
    4f88:	add	ip, pc, #0, 12
    4f8c:	add	ip, ip, #143360	; 0x23000
    4f90:	ldr	pc, [ip, #372]!	; 0x174

00004f94 <SSL_CTX_ctrl@plt>:
    4f94:	add	ip, pc, #0, 12
    4f98:	add	ip, ip, #143360	; 0x23000
    4f9c:	ldr	pc, [ip, #364]!	; 0x16c

00004fa0 <rb_linebuf_parse@plt>:
    4fa0:	add	ip, pc, #0, 12
    4fa4:	add	ip, ip, #143360	; 0x23000
    4fa8:	ldr	pc, [ip, #356]!	; 0x164

00004fac <writev@plt>:
    4fac:	add	ip, pc, #0, 12
    4fb0:	add	ip, ip, #143360	; 0x23000
    4fb4:	ldr	pc, [ip, #348]!	; 0x15c

00004fb8 <rb_fsnprint@plt>:
    4fb8:	add	ip, pc, #0, 12
    4fbc:	add	ip, ip, #143360	; 0x23000
    4fc0:	ldr	pc, [ip, #340]!	; 0x154

00004fc4 <rb_strlcpy@plt>:
    4fc4:	add	ip, pc, #0, 12
    4fc8:	add	ip, ip, #143360	; 0x23000
    4fcc:	ldr	pc, [ip, #332]!	; 0x14c

00004fd0 <rb_patricia_search_best2@plt>:
    4fd0:	add	ip, pc, #0, 12
    4fd4:	add	ip, ip, #143360	; 0x23000
    4fd8:	ldr	pc, [ip, #324]!	; 0x144

00004fdc <SSL_CIPHER_get_name@plt>:
    4fdc:	add	ip, pc, #0, 12
    4fe0:	add	ip, ip, #143360	; 0x23000
    4fe4:	ldr	pc, [ip, #316]!	; 0x13c

00004fe8 <posix_spawnattr_init@plt>:
    4fe8:	add	ip, pc, #0, 12
    4fec:	add	ip, ip, #143360	; 0x23000
    4ff0:	ldr	pc, [ip, #308]!	; 0x134

00004ff4 <OpenSSL_version_num@plt>:
    4ff4:	add	ip, pc, #0, 12
    4ff8:	add	ip, ip, #143360	; 0x23000
    4ffc:	ldr	pc, [ip, #300]!	; 0x12c

00005000 <rb_kill@plt>:
    5000:	add	ip, pc, #0, 12
    5004:	add	ip, ip, #143360	; 0x23000
    5008:	ldr	pc, [ip, #292]!	; 0x124

0000500c <free@plt>:
    500c:	add	ip, pc, #0, 12
    5010:	add	ip, ip, #143360	; 0x23000
    5014:	ldr	pc, [ip, #284]!	; 0x11c

00005018 <sendmsg@plt>:
    5018:	add	ip, pc, #0, 12
    501c:	add	ip, ip, #143360	; 0x23000
    5020:	ldr	pc, [ip, #276]!	; 0x114

00005024 <read@plt>:
    5024:	add	ip, pc, #0, 12
    5028:	add	ip, ip, #143360	; 0x23000
    502c:	ldr	pc, [ip, #268]!	; 0x10c

00005030 <rb_radixtree_elem_add@plt>:
    5030:	add	ip, pc, #0, 12
    5034:	add	ip, ip, #143360	; 0x23000
    5038:	ldr	pc, [ip, #260]!	; 0x104

0000503c <write@plt>:
    503c:	add	ip, pc, #0, 12
    5040:	add	ip, ip, #143360	; 0x23000
    5044:	ldr	pc, [ip, #252]!	; 0xfc

00005048 <SSL_new@plt>:
    5048:	add	ip, pc, #0, 12
    504c:	add	ip, ip, #143360	; 0x23000
    5050:	ldr	pc, [ip, #244]!	; 0xf4

00005054 <access@plt>:
    5054:	add	ip, pc, #0, 12
    5058:	add	ip, ip, #143360	; 0x23000
    505c:	ldr	pc, [ip, #236]!	; 0xec

00005060 <rb_lib_loop@plt>:
    5060:	add	ip, pc, #0, 12
    5064:	add	ip, ip, #143360	; 0x23000
    5068:	ldr	pc, [ip, #228]!	; 0xe4

0000506c <timer_settime@plt>:
    506c:	add	ip, pc, #0, 12
    5070:	add	ip, ip, #143360	; 0x23000
    5074:	ldr	pc, [ip, #220]!	; 0xdc

00005078 <gettimeofday@plt>:
    5078:	add	ip, pc, #0, 12
    507c:	add	ip, ip, #143360	; 0x23000
    5080:	ldr	pc, [ip, #212]!	; 0xd4

00005084 <accept@plt>:
    5084:	add	ip, pc, #0, 12
    5088:	add	ip, ip, #143360	; 0x23000
    508c:	ldr	pc, [ip, #204]!	; 0xcc

00005090 <SSL_read@plt>:
    5090:	add	ip, pc, #0, 12
    5094:	add	ip, ip, #143360	; 0x23000
    5098:	ldr	pc, [ip, #196]!	; 0xc4

0000509c <rb_read@plt>:
    509c:	add	ip, pc, #0, 12
    50a0:	add	ip, ip, #143360	; 0x23000
    50a4:	ldr	pc, [ip, #188]!	; 0xbc

000050a8 <socket@plt>:
    50a8:	add	ip, pc, #0, 12
    50ac:	add	ip, ip, #143360	; 0x23000
    50b0:	ldr	pc, [ip, #180]!	; 0xb4

000050b4 <rb_linebuf_get@plt>:
    50b4:	add	ip, pc, #0, 12
    50b8:	add	ip, ip, #143360	; 0x23000
    50bc:	ldr	pc, [ip, #172]!	; 0xac

000050c0 <epoll_wait@plt>:
    50c0:	add	ip, pc, #0, 12
    50c4:	add	ip, ip, #143360	; 0x23000
    50c8:	ldr	pc, [ip, #164]!	; 0xa4

000050cc <SSL_do_handshake@plt>:
    50cc:	add	ip, pc, #0, 12
    50d0:	add	ip, ip, #143360	; 0x23000
    50d4:	ldr	pc, [ip, #156]!	; 0x9c

000050d8 <rb_linebuf_flush@plt>:
    50d8:	add	ip, pc, #0, 12
    50dc:	add	ip, ip, #143360	; 0x23000
    50e0:	ldr	pc, [ip, #148]!	; 0x94

000050e4 <posix_spawn@plt>:
    50e4:	add	ip, pc, #0, 12
    50e8:	add	ip, ip, #143360	; 0x23000
    50ec:	ldr	pc, [ip, #140]!	; 0x8c

000050f0 <strlen@plt>:
    50f0:	add	ip, pc, #0, 12
    50f4:	add	ip, ip, #143360	; 0x23000
    50f8:	ldr	pc, [ip, #132]!	; 0x84

000050fc <rb_current_time@plt>:
    50fc:	add	ip, pc, #0, 12
    5100:	add	ip, ip, #143360	; 0x23000
    5104:	ldr	pc, [ip, #124]!	; 0x7c

00005108 <strtoul@plt>:
    5108:	add	ip, pc, #0, 12
    510c:	add	ip, ip, #143360	; 0x23000
    5110:	ldr	pc, [ip, #116]!	; 0x74

00005114 <memcpy@plt>:
    5114:	add	ip, pc, #0, 12
    5118:	add	ip, ip, #143360	; 0x23000
    511c:	ldr	pc, [ip, #108]!	; 0x6c

00005120 <PEM_read_X509@plt>:
    5120:	add	ip, pc, #0, 12
    5124:	add	ip, ip, #143360	; 0x23000
    5128:	ldr	pc, [ip, #100]!	; 0x64

0000512c <posix_spawnattr_setflags@plt>:
    512c:	add	ip, pc, #0, 12
    5130:	add	ip, ip, #143360	; 0x23000
    5134:	ldr	pc, [ip, #92]!	; 0x5c

00005138 <__ctype_tolower_loc@plt>:
    5138:	add	ip, pc, #0, 12
    513c:	add	ip, ip, #143360	; 0x23000
    5140:	ldr	pc, [ip, #84]!	; 0x54

00005144 <SSL_CTX_use_certificate_chain_file@plt>:
    5144:	add	ip, pc, #0, 12
    5148:	add	ip, ip, #143360	; 0x23000
    514c:	ldr	pc, [ip, #76]!	; 0x4c

00005150 <rb_free_rb_dlink_node@plt>:
    5150:	add	ip, pc, #0, 12
    5154:	add	ip, ip, #143360	; 0x23000
    5158:	ldr	pc, [ip, #68]!	; 0x44

0000515c <SSL_CTX_set_options@plt>:
    515c:	add	ip, pc, #0, 12
    5160:	add	ip, ip, #143360	; 0x23000
    5164:	ldr	pc, [ip, #60]!	; 0x3c

00005168 <posix_spawnattr_destroy@plt>:
    5168:	add	ip, pc, #0, 12
    516c:	add	ip, ip, #143360	; 0x23000
    5170:	ldr	pc, [ip, #52]!	; 0x34

00005174 <rb_close@plt>:
    5174:	add	ip, pc, #0, 12
    5178:	add	ip, ip, #143360	; 0x23000
    517c:	ldr	pc, [ip, #44]!	; 0x2c

00005180 <strtol@plt>:
    5180:	add	ip, pc, #0, 12
    5184:	add	ip, ip, #143360	; 0x23000
    5188:	ldr	pc, [ip, #36]!	; 0x24

0000518c <sigaddset@plt>:
    518c:	add	ip, pc, #0, 12
    5190:	add	ip, ip, #143360	; 0x23000
    5194:	ldr	pc, [ip, #28]!

00005198 <strcpy@plt>:
    5198:	add	ip, pc, #0, 12
    519c:	add	ip, ip, #143360	; 0x23000
    51a0:	ldr	pc, [ip, #20]!

000051a4 <waitpid@plt>:
    51a4:	add	ip, pc, #0, 12
    51a8:	add	ip, ip, #143360	; 0x23000
    51ac:	ldr	pc, [ip, #12]!

000051b0 <rb_run_one_event@plt>:
    51b0:	add	ip, pc, #0, 12
    51b4:	add	ip, ip, #143360	; 0x23000
    51b8:	ldr	pc, [ip, #4]!

000051bc <rb_patricia_search_exact@plt>:
    51bc:	add	ip, pc, #0, 12
    51c0:	add	ip, ip, #139264	; 0x22000
    51c4:	ldr	pc, [ip, #4092]!	; 0xffc

000051c8 <strncat@plt>:
    51c8:	add	ip, pc, #0, 12
    51cc:	add	ip, ip, #139264	; 0x22000
    51d0:	ldr	pc, [ip, #4084]!	; 0xff4

000051d4 <atol@plt>:
    51d4:	add	ip, pc, #0, 12
    51d8:	add	ip, ip, #139264	; 0x22000
    51dc:	ldr	pc, [ip, #4076]!	; 0xfec

000051e0 <rb_bh_free@plt>:
    51e0:	add	ip, pc, #0, 12
    51e4:	add	ip, ip, #139264	; 0x22000
    51e8:	ldr	pc, [ip, #4068]!	; 0xfe4

000051ec <rb_init_rb_dlink_nodes@plt>:
    51ec:	add	ip, pc, #0, 12
    51f0:	add	ip, ip, #139264	; 0x22000
    51f4:	ldr	pc, [ip, #4060]!	; 0xfdc

000051f8 <EVP_sha1@plt>:
    51f8:	add	ip, pc, #0, 12
    51fc:	add	ip, ip, #139264	; 0x22000
    5200:	ldr	pc, [ip, #4052]!	; 0xfd4

00005204 <rb_patricia_lookup@plt>:
    5204:	add	ip, pc, #0, 12
    5208:	add	ip, ip, #139264	; 0x22000
    520c:	ldr	pc, [ip, #4044]!	; 0xfcc

00005210 <shutdown@plt>:
    5210:	add	ip, pc, #0, 12
    5214:	add	ip, ip, #139264	; 0x22000
    5218:	ldr	pc, [ip, #4036]!	; 0xfc4

0000521c <bind@plt>:
    521c:	add	ip, pc, #0, 12
    5220:	add	ip, ip, #139264	; 0x22000
    5224:	ldr	pc, [ip, #4028]!	; 0xfbc

00005228 <rb_lib_log@plt>:
    5228:	add	ip, pc, #0, 12
    522c:	add	ip, ip, #139264	; 0x22000
    5230:	ldr	pc, [ip, #4020]!	; 0xfb4

00005234 <SSL_CTX_use_PrivateKey_file@plt>:
    5234:	add	ip, pc, #0, 12
    5238:	add	ip, ip, #139264	; 0x22000
    523c:	ldr	pc, [ip, #4012]!	; 0xfac

00005240 <select@plt>:
    5240:	add	ip, pc, #0, 12
    5244:	add	ip, ip, #139264	; 0x22000
    5248:	ldr	pc, [ip, #4004]!	; 0xfa4

0000524c <close@plt>:
    524c:	add	ip, pc, #0, 12
    5250:	add	ip, ip, #139264	; 0x22000
    5254:	ldr	pc, [ip, #3996]!	; 0xf9c

00005258 <rb_bh_alloc@plt>:
    5258:	add	ip, pc, #0, 12
    525c:	add	ip, ip, #139264	; 0x22000
    5260:	ldr	pc, [ip, #3988]!	; 0xf94

00005264 <SSL_free@plt>:
    5264:	add	ip, pc, #0, 12
    5268:	add	ip, ip, #139264	; 0x22000
    526c:	ldr	pc, [ip, #3980]!	; 0xf8c

00005270 <rb_pipe@plt>:
    5270:	add	ip, pc, #0, 12
    5274:	add	ip, ip, #139264	; 0x22000
    5278:	ldr	pc, [ip, #3972]!	; 0xf84

0000527c <strncasecmp@plt>:
    527c:	add	ip, pc, #0, 12
    5280:	add	ip, ip, #139264	; 0x22000
    5284:	ldr	pc, [ip, #3964]!	; 0xf7c

00005288 <rb_outofmemory@plt>:
    5288:	add	ip, pc, #0, 12
    528c:	add	ip, ip, #139264	; 0x22000
    5290:	ldr	pc, [ip, #3956]!	; 0xf74

00005294 <rb_set_time@plt>:
    5294:	add	ip, pc, #0, 12
    5298:	add	ip, ip, #139264	; 0x22000
    529c:	ldr	pc, [ip, #3948]!	; 0xf6c

000052a0 <rb_dictionary_stats@plt>:
    52a0:	add	ip, pc, #0, 12
    52a4:	add	ip, ip, #139264	; 0x22000
    52a8:	ldr	pc, [ip, #3940]!	; 0xf64

000052ac <malloc@plt>:
    52ac:	add	ip, pc, #0, 12
    52b0:	add	ip, ip, #139264	; 0x22000
    52b4:	ldr	pc, [ip, #3932]!	; 0xf5c

000052b8 <sigprocmask@plt>:
    52b8:	add	ip, pc, #0, 12
    52bc:	add	ip, ip, #139264	; 0x22000
    52c0:	ldr	pc, [ip, #3924]!	; 0xf54

000052c4 <rb_event_run@plt>:
    52c4:	add	ip, pc, #0, 12
    52c8:	add	ip, ip, #139264	; 0x22000
    52cc:	ldr	pc, [ip, #3916]!	; 0xf4c

000052d0 <SSL_set_accept_state@plt>:
    52d0:	add	ip, pc, #0, 12
    52d4:	add	ip, ip, #139264	; 0x22000
    52d8:	ldr	pc, [ip, #3908]!	; 0xf44

000052dc <rb_init_bh@plt>:
    52dc:	add	ip, pc, #0, 12
    52e0:	add	ip, ip, #139264	; 0x22000
    52e4:	ldr	pc, [ip, #3900]!	; 0xf3c

000052e8 <PEM_read_DHparams@plt>:
    52e8:	add	ip, pc, #0, 12
    52ec:	add	ip, ip, #139264	; 0x22000
    52f0:	ldr	pc, [ip, #3892]!	; 0xf34

000052f4 <gmtime_r@plt>:
    52f4:	add	ip, pc, #0, 12
    52f8:	add	ip, ip, #139264	; 0x22000
    52fc:	ldr	pc, [ip, #3884]!	; 0xf2c

00005300 <poll@plt>:
    5300:	add	ip, pc, #0, 12
    5304:	add	ip, ip, #139264	; 0x22000
    5308:	ldr	pc, [ip, #3876]!	; 0xf24

0000530c <ASN1_item_digest@plt>:
    530c:	add	ip, pc, #0, 12
    5310:	add	ip, ip, #139264	; 0x22000
    5314:	ldr	pc, [ip, #3868]!	; 0xf1c

00005318 <strnlen@plt>:
    5318:	add	ip, pc, #0, 12
    531c:	add	ip, ip, #139264	; 0x22000
    5320:	ldr	pc, [ip, #3860]!	; 0xf14

00005324 <SSL_get_peer_certificate@plt>:
    5324:	add	ip, pc, #0, 12
    5328:	add	ip, ip, #139264	; 0x22000
    532c:	ldr	pc, [ip, #3852]!	; 0xf0c

00005330 <rb_dictionary_find@plt>:
    5330:	add	ip, pc, #0, 12
    5334:	add	ip, ip, #139264	; 0x22000
    5338:	ldr	pc, [ip, #3844]!	; 0xf04

0000533c <rb_lib_init@plt>:
    533c:	add	ip, pc, #0, 12
    5340:	add	ip, ip, #139264	; 0x22000
    5344:	ldr	pc, [ip, #3836]!	; 0xefc

00005348 <SSL_get_verify_result@plt>:
    5348:	add	ip, pc, #0, 12
    534c:	add	ip, ip, #139264	; 0x22000
    5350:	ldr	pc, [ip, #3828]!	; 0xef4

00005354 <strtok_r@plt>:
    5354:	add	ip, pc, #0, 12
    5358:	add	ip, ip, #139264	; 0x22000
    535c:	ldr	pc, [ip, #3820]!	; 0xeec

00005360 <rb_lib_restart@plt>:
    5360:	add	ip, pc, #0, 12
    5364:	add	ip, ip, #139264	; 0x22000
    5368:	ldr	pc, [ip, #3812]!	; 0xee4

0000536c <DH_free@plt>:
    536c:	add	ip, pc, #0, 12
    5370:	add	ip, ip, #139264	; 0x22000
    5374:	ldr	pc, [ip, #3804]!	; 0xedc

00005378 <timer_delete@plt>:
    5378:	add	ip, pc, #0, 12
    537c:	add	ip, ip, #139264	; 0x22000
    5380:	ldr	pc, [ip, #3796]!	; 0xed4

00005384 <rb_open@plt>:
    5384:	add	ip, pc, #0, 12
    5388:	add	ip, ip, #139264	; 0x22000
    538c:	ldr	pc, [ip, #3788]!	; 0xecc

00005390 <rb_get_sockerr@plt>:
    5390:	add	ip, pc, #0, 12
    5394:	add	ip, ip, #139264	; 0x22000
    5398:	ldr	pc, [ip, #3780]!	; 0xec4

0000539c <send@plt>:
    539c:	add	ip, pc, #0, 12
    53a0:	add	ip, ip, #139264	; 0x22000
    53a4:	ldr	pc, [ip, #3772]!	; 0xebc

000053a8 <SSL_shutdown@plt>:
    53a8:	add	ip, pc, #0, 12
    53ac:	add	ip, ip, #139264	; 0x22000
    53b0:	ldr	pc, [ip, #3764]!	; 0xeb4

000053b4 <rb_bh_create@plt>:
    53b4:	add	ip, pc, #0, 12
    53b8:	add	ip, ip, #139264	; 0x22000
    53bc:	ldr	pc, [ip, #3756]!	; 0xeac

000053c0 <dup2@plt>:
    53c0:	add	ip, pc, #0, 12
    53c4:	add	ip, ip, #139264	; 0x22000
    53c8:	ldr	pc, [ip, #3748]!	; 0xea4

000053cc <getpid@plt>:
    53cc:	add	ip, pc, #0, 12
    53d0:	add	ip, ip, #139264	; 0x22000
    53d4:	ldr	pc, [ip, #3740]!	; 0xe9c

000053d8 <rb_writev@plt>:
    53d8:	add	ip, pc, #0, 12
    53dc:	add	ip, ip, #139264	; 0x22000
    53e0:	ldr	pc, [ip, #3732]!	; 0xe94

000053e4 <RAND_bytes@plt>:
    53e4:	add	ip, pc, #0, 12
    53e8:	add	ip, ip, #139264	; 0x22000
    53ec:	ldr	pc, [ip, #3724]!	; 0xe8c

000053f0 <rb_linebuf_newbuf@plt>:
    53f0:	add	ip, pc, #0, 12
    53f4:	add	ip, ip, #139264	; 0x22000
    53f8:	ldr	pc, [ip, #3716]!	; 0xe84

000053fc <rb_fdlist_init@plt>:
    53fc:	add	ip, pc, #0, 12
    5400:	add	ip, ip, #139264	; 0x22000
    5404:	ldr	pc, [ip, #3708]!	; 0xe7c

00005408 <rb_event_add@plt>:
    5408:	add	ip, pc, #0, 12
    540c:	add	ip, ip, #139264	; 0x22000
    5410:	ldr	pc, [ip, #3700]!	; 0xe74

00005414 <readlink@plt>:
    5414:	add	ip, pc, #0, 12
    5418:	add	ip, ip, #139264	; 0x22000
    541c:	ldr	pc, [ip, #3692]!	; 0xe6c

00005420 <SSL_CTX_new@plt>:
    5420:	add	ip, pc, #0, 12
    5424:	add	ip, ip, #139264	; 0x22000
    5428:	ldr	pc, [ip, #3684]!	; 0xe64

0000542c <recvmsg@plt>:
    542c:	add	ip, pc, #0, 12
    5430:	add	ip, ip, #139264	; 0x22000
    5434:	ldr	pc, [ip, #3676]!	; 0xe5c

00005438 <rand@plt>:
    5438:	add	ip, pc, #0, 12
    543c:	add	ip, ip, #139264	; 0x22000
    5440:	ldr	pc, [ip, #3668]!	; 0xe54

00005444 <rb_linebuf_init@plt>:
    5444:	add	ip, pc, #0, 12
    5448:	add	ip, ip, #139264	; 0x22000
    544c:	ldr	pc, [ip, #3660]!	; 0xe4c

00005450 <__fxstat@plt>:
    5450:	add	ip, pc, #0, 12
    5454:	add	ip, ip, #139264	; 0x22000
    5458:	ldr	pc, [ip, #3652]!	; 0xe44

0000545c <SSL_set_connect_state@plt>:
    545c:	add	ip, pc, #0, 12
    5460:	add	ip, ip, #139264	; 0x22000
    5464:	ldr	pc, [ip, #3644]!	; 0xe3c

00005468 <rb_radixtree_elem_find@plt>:
    5468:	add	ip, pc, #0, 12
    546c:	add	ip, ip, #139264	; 0x22000
    5470:	ldr	pc, [ip, #3636]!	; 0xe34

00005474 <rb_make_rb_dlink_node@plt>:
    5474:	add	ip, pc, #0, 12
    5478:	add	ip, ip, #139264	; 0x22000
    547c:	ldr	pc, [ip, #3628]!	; 0xe2c

00005480 <rb_strlcat@plt>:
    5480:	add	ip, pc, #0, 12
    5484:	add	ip, ip, #139264	; 0x22000
    5488:	ldr	pc, [ip, #3620]!	; 0xe24

0000548c <rb_spawn_process@plt>:
    548c:	add	ip, pc, #0, 12
    5490:	add	ip, ip, #139264	; 0x22000
    5494:	ldr	pc, [ip, #3612]!	; 0xe1c

00005498 <EVP_sha512@plt>:
    5498:	add	ip, pc, #0, 12
    549c:	add	ip, ip, #139264	; 0x22000
    54a0:	ldr	pc, [ip, #3604]!	; 0xe14

000054a4 <snprintf@plt>:
    54a4:	add	ip, pc, #0, 12
    54a8:	add	ip, ip, #139264	; 0x22000
    54ac:	ldr	pc, [ip, #3596]!	; 0xe0c

000054b0 <RAND_status@plt>:
    54b0:	add	ip, pc, #0, 12
    54b4:	add	ip, ip, #139264	; 0x22000
    54b8:	ldr	pc, [ip, #3588]!	; 0xe04

000054bc <timerfd_create@plt>:
    54bc:	add	ip, pc, #0, 12
    54c0:	add	ip, ip, #139264	; 0x22000
    54c4:	ldr	pc, [ip, #3580]!	; 0xdfc

000054c8 <EVP_sha256@plt>:
    54c8:	add	ip, pc, #0, 12
    54cc:	add	ip, ip, #139264	; 0x22000
    54d0:	ldr	pc, [ip, #3572]!	; 0xdf4

000054d4 <strcspn@plt>:
    54d4:	add	ip, pc, #0, 12
    54d8:	add	ip, ip, #139264	; 0x22000
    54dc:	ldr	pc, [ip, #3564]!	; 0xdec

000054e0 <rb_linebuf_put@plt>:
    54e0:	add	ip, pc, #0, 12
    54e4:	add	ip, ip, #139264	; 0x22000
    54e8:	ldr	pc, [ip, #3556]!	; 0xde4

000054ec <rb_listen@plt>:
    54ec:	add	ip, pc, #0, 12
    54f0:	add	ip, ip, #139264	; 0x22000
    54f4:	ldr	pc, [ip, #3548]!	; 0xddc

000054f8 <fcntl@plt>:
    54f8:	add	ip, pc, #0, 12
    54fc:	add	ip, ip, #139264	; 0x22000
    5500:	ldr	pc, [ip, #3540]!	; 0xdd4

00005504 <strncmp@plt>:
    5504:	add	ip, pc, #0, 12
    5508:	add	ip, ip, #139264	; 0x22000
    550c:	ldr	pc, [ip, #3532]!	; 0xdcc

00005510 <kill@plt>:
    5510:	add	ip, pc, #0, 12
    5514:	add	ip, ip, #139264	; 0x22000
    5518:	ldr	pc, [ip, #3524]!	; 0xdc4

0000551c <nanosleep@plt>:
    551c:	add	ip, pc, #0, 12
    5520:	add	ip, ip, #139264	; 0x22000
    5524:	ldr	pc, [ip, #3516]!	; 0xdbc

00005528 <rb_event_next@plt>:
    5528:	add	ip, pc, #0, 12
    552c:	add	ip, ip, #139264	; 0x22000
    5530:	ldr	pc, [ip, #3508]!	; 0xdb4

00005534 <realloc@plt>:
    5534:	add	ip, pc, #0, 12
    5538:	add	ip, ip, #139264	; 0x22000
    553c:	ldr	pc, [ip, #3500]!	; 0xdac

00005540 <timerfd_settime@plt>:
    5540:	add	ip, pc, #0, 12
    5544:	add	ip, ip, #139264	; 0x22000
    5548:	ldr	pc, [ip, #3492]!	; 0xda4

0000554c <epoll_ctl@plt>:
    554c:	add	ip, pc, #0, 12
    5550:	add	ip, ip, #139264	; 0x22000
    5554:	ldr	pc, [ip, #3484]!	; 0xd9c

00005558 <X509_free@plt>:
    5558:	add	ip, pc, #0, 12
    555c:	add	ip, ip, #139264	; 0x22000
    5560:	ldr	pc, [ip, #3476]!	; 0xd94

00005564 <readv@plt>:
    5564:	add	ip, pc, #0, 12
    5568:	add	ip, ip, #139264	; 0x22000
    556c:	ldr	pc, [ip, #3468]!	; 0xd8c

00005570 <getsockopt@plt>:
    5570:	add	ip, pc, #0, 12
    5574:	add	ip, ip, #139264	; 0x22000
    5578:	ldr	pc, [ip, #3460]!	; 0xd84

0000557c <pipe@plt>:
    557c:	add	ip, pc, #0, 12
    5580:	add	ip, ip, #139264	; 0x22000
    5584:	ldr	pc, [ip, #3452]!	; 0xd7c

00005588 <OpenSSL_version@plt>:
    5588:	add	ip, pc, #0, 12
    558c:	add	ip, ip, #139264	; 0x22000
    5590:	ldr	pc, [ip, #3444]!	; 0xd74

00005594 <setsockopt@plt>:
    5594:	add	ip, pc, #0, 12
    5598:	add	ip, ip, #139264	; 0x22000
    559c:	ldr	pc, [ip, #3436]!	; 0xd6c

000055a0 <SSL_get_error@plt>:
    55a0:	add	ip, pc, #0, 12
    55a4:	add	ip, ip, #139264	; 0x22000
    55a8:	ldr	pc, [ip, #3428]!	; 0xd64

000055ac <SSL_get_version@plt>:
    55ac:	add	ip, pc, #0, 12
    55b0:	add	ip, ip, #139264	; 0x22000
    55b4:	ldr	pc, [ip, #3420]!	; 0xd5c

000055b8 <rb_radixtree_delete@plt>:
    55b8:	add	ip, pc, #0, 12
    55bc:	add	ip, ip, #139264	; 0x22000
    55c0:	ldr	pc, [ip, #3412]!	; 0xd54

000055c4 <memchr@plt>:
    55c4:	add	ip, pc, #0, 12
    55c8:	add	ip, ip, #139264	; 0x22000
    55cc:	ldr	pc, [ip, #3404]!	; 0xd4c

000055d0 <setenv@plt>:
    55d0:	add	ip, pc, #0, 12
    55d4:	add	ip, ip, #139264	; 0x22000
    55d8:	ldr	pc, [ip, #3396]!	; 0xd44

000055dc <strcmp@plt>:
    55dc:	add	ip, pc, #0, 12
    55e0:	add	ip, ip, #139264	; 0x22000
    55e4:	ldr	pc, [ip, #3388]!	; 0xd3c

000055e8 <__errno_location@plt>:
    55e8:	add	ip, pc, #0, 12
    55ec:	add	ip, ip, #139264	; 0x22000
    55f0:	ldr	pc, [ip, #3380]!	; 0xd34

000055f4 <__cxa_finalize@plt>:
    55f4:	add	ip, pc, #0, 12
    55f8:	add	ip, ip, #139264	; 0x22000
    55fc:	ldr	pc, [ip, #3372]!	; 0xd2c

00005600 <sprintf@plt>:
    5600:	add	ip, pc, #0, 12
    5604:	add	ip, ip, #139264	; 0x22000
    5608:	ldr	pc, [ip, #3364]!	; 0xd24

0000560c <rb_bh_usage@plt>:
    560c:	add	ip, pc, #0, 12
    5610:	add	ip, ip, #139264	; 0x22000
    5614:	ldr	pc, [ip, #3356]!	; 0xd1c

00005618 <SSL_CTX_set_verify@plt>:
    5618:	add	ip, pc, #0, 12
    561c:	add	ip, ip, #139264	; 0x22000
    5620:	ldr	pc, [ip, #3348]!	; 0xd14

Disassembly of section .text:

00005628 <call_weak_fn>:
    5628:	ldr	r3, [pc, #20]	; 5644 <call_weak_fn+0x1c>
    562c:	ldr	r2, [pc, #20]	; 5648 <call_weak_fn+0x20>
    5630:	add	r3, pc, r3
    5634:	ldr	r2, [r3, r2]
    5638:	cmp	r2, #0
    563c:	bxeq	lr
    5640:	b	4e44 <__gmon_start__@plt>
    5644:	.word	0x000229c8
    5648:	.word	0x00000348

0000564c <deregister_tm_clones>:
    564c:	ldr	r0, [pc, #44]	; 5680 <deregister_tm_clones+0x34>
    5650:	ldr	r3, [pc, #44]	; 5684 <deregister_tm_clones+0x38>
    5654:	add	r0, pc, r0
    5658:	add	r3, pc, r3
    565c:	cmp	r3, r0
    5660:	ldr	r3, [pc, #32]	; 5688 <deregister_tm_clones+0x3c>
    5664:	add	r3, pc, r3
    5668:	bxeq	lr
    566c:	ldr	r2, [pc, #24]	; 568c <deregister_tm_clones+0x40>
    5670:	ldr	r3, [r3, r2]
    5674:	cmp	r3, #0
    5678:	bxeq	lr
    567c:	bx	r3
    5680:	.word	0x00022e5c
    5684:	.word	0x00022e58
    5688:	.word	0x00022994
    568c:	.word	0x00000364

00005690 <register_tm_clones>:
    5690:	ldr	r0, [pc, #56]	; 56d0 <register_tm_clones+0x40>
    5694:	ldr	r3, [pc, #56]	; 56d4 <register_tm_clones+0x44>
    5698:	add	r0, pc, r0
    569c:	add	r3, pc, r3
    56a0:	sub	r1, r3, r0
    56a4:	ldr	r3, [pc, #44]	; 56d8 <register_tm_clones+0x48>
    56a8:	asr	r1, r1, #2
    56ac:	add	r3, pc, r3
    56b0:	add	r1, r1, r1, lsr #31
    56b4:	asrs	r1, r1, #1
    56b8:	bxeq	lr
    56bc:	ldr	r2, [pc, #24]	; 56dc <register_tm_clones+0x4c>
    56c0:	ldr	r3, [r3, r2]
    56c4:	cmp	r3, #0
    56c8:	bxeq	lr
    56cc:	bx	r3
    56d0:	.word	0x00022e18
    56d4:	.word	0x00022e14
    56d8:	.word	0x0002294c
    56dc:	.word	0x00000374

000056e0 <__do_global_dtors_aux>:
    56e0:	ldr	r3, [pc, #76]	; 5734 <__do_global_dtors_aux+0x54>
    56e4:	ldr	r2, [pc, #76]	; 5738 <__do_global_dtors_aux+0x58>
    56e8:	add	r3, pc, r3
    56ec:	add	r2, pc, r2
    56f0:	ldrb	r3, [r3]
    56f4:	cmp	r3, #0
    56f8:	bxne	lr
    56fc:	ldr	r3, [pc, #56]	; 573c <__do_global_dtors_aux+0x5c>
    5700:	push	{r4, lr}
    5704:	ldr	r3, [r2, r3]
    5708:	cmp	r3, #0
    570c:	beq	571c <__do_global_dtors_aux+0x3c>
    5710:	ldr	r3, [pc, #40]	; 5740 <__do_global_dtors_aux+0x60>
    5714:	ldr	r0, [pc, r3]
    5718:	bl	55f4 <__cxa_finalize@plt>
    571c:	bl	564c <deregister_tm_clones>
    5720:	ldr	r3, [pc, #28]	; 5744 <__do_global_dtors_aux+0x64>
    5724:	mov	r2, #1
    5728:	add	r3, pc, r3
    572c:	strb	r2, [r3]
    5730:	pop	{r4, pc}
    5734:	.word	0x00022dc8
    5738:	.word	0x0002290c
    573c:	.word	0x00000404
    5740:	.word	0x00022cf0
    5744:	.word	0x00022d88

00005748 <frame_dummy>:
    5748:	b	5690 <register_tm_clones>

0000574c <rb_spawn_process>:
    574c:	push	{r4, r5, r6, sl, fp, lr}
    5750:	add	fp, sp, #16
    5754:	sub	sp, sp, #352	; 0x160
    5758:	add	r6, sp, #12
    575c:	mov	r5, r0
    5760:	mov	r4, r1
    5764:	mov	r0, r6
    5768:	bl	4fe8 <posix_spawnattr_init@plt>
    576c:	mov	r0, r6
    5770:	mov	r1, #64	; 0x40
    5774:	bl	512c <posix_spawnattr_setflags@plt>
    5778:	ldr	r0, [pc, #84]	; 57d4 <rb_spawn_process+0x88>
    577c:	mov	r1, r5
    5780:	mov	r2, #0
    5784:	mov	r3, r6
    5788:	ldr	r0, [pc, r0]
    578c:	str	r4, [sp]
    5790:	ldr	r0, [r0]
    5794:	str	r0, [sp, #4]
    5798:	sub	r0, fp, #20
    579c:	bl	50e4 <posix_spawn@plt>
    57a0:	mov	r4, r0
    57a4:	mov	r0, r6
    57a8:	bl	5168 <posix_spawnattr_destroy@plt>
    57ac:	cmp	r4, #0
    57b0:	beq	57c8 <rb_spawn_process+0x7c>
    57b4:	bl	55e8 <__errno_location@plt>
    57b8:	str	r4, [r0]
    57bc:	mvn	r0, #0
    57c0:	str	r0, [fp, #-20]	; 0xffffffec
    57c4:	b	57cc <rb_spawn_process+0x80>
    57c8:	ldr	r0, [fp, #-20]	; 0xffffffec
    57cc:	sub	sp, fp, #16
    57d0:	pop	{r4, r5, r6, sl, fp, pc}
    57d4:	.word	0x00022bfc

000057d8 <rb_gettimeofday>:
    57d8:	b	5078 <gettimeofday@plt>

000057dc <rb_sleep>:
    57dc:	push	{fp, lr}
    57e0:	mov	fp, sp
    57e4:	sub	sp, sp, #8
    57e8:	str	r0, [sp]
    57ec:	mov	r0, #1000	; 0x3e8
    57f0:	mul	r0, r1, r0
    57f4:	mov	r1, #0
    57f8:	str	r0, [sp, #4]
    57fc:	mov	r0, sp
    5800:	bl	551c <nanosleep@plt>
    5804:	mov	sp, fp
    5808:	pop	{fp, pc}

0000580c <rb_strerror>:
    580c:	b	4cdc <strerror@plt>

00005810 <rb_kill>:
    5810:	b	5510 <kill@plt>

00005814 <rb_setenv>:
    5814:	b	55d0 <setenv@plt>

00005818 <rb_waitpid>:
    5818:	b	51a4 <waitpid@plt>

0000581c <rb_getpid>:
    581c:	b	53cc <getpid@plt>

00005820 <rb_path_to_self>:
    5820:	push	{r4, sl, fp, lr}
    5824:	add	fp, sp, #8
    5828:	ldr	r0, [pc, #36]	; 5854 <rb_path_to_self+0x34>
    582c:	ldr	r4, [pc, #36]	; 5858 <rb_path_to_self+0x38>
    5830:	mov	r2, #4096	; 0x1000
    5834:	add	r4, pc, r4
    5838:	add	r0, pc, r0
    583c:	mov	r1, r4
    5840:	bl	5414 <readlink@plt>
    5844:	cmn	r0, #1
    5848:	addeq	r4, r0, #1
    584c:	mov	r0, r4
    5850:	pop	{r4, sl, fp, pc}
    5854:	.word	0x0000f9e0
    5858:	.word	0x00022c7d

0000585c <rb_init_netio_win32>:
    585c:	push	{fp, lr}
    5860:	mov	fp, sp
    5864:	bl	55e8 <__errno_location@plt>
    5868:	mov	r1, #38	; 0x26
    586c:	str	r1, [r0]
    5870:	mvn	r0, #0
    5874:	pop	{fp, pc}

00005878 <rb_setselect_win32>:
    5878:	push	{fp, lr}
    587c:	mov	fp, sp
    5880:	bl	55e8 <__errno_location@plt>
    5884:	mov	r1, #38	; 0x26
    5888:	str	r1, [r0]
    588c:	pop	{fp, pc}

00005890 <rb_select_win32>:
    5890:	push	{fp, lr}
    5894:	mov	fp, sp
    5898:	bl	55e8 <__errno_location@plt>
    589c:	mov	r1, #38	; 0x26
    58a0:	str	r1, [r0]
    58a4:	mvn	r0, #0
    58a8:	pop	{fp, pc}

000058ac <rb_setup_fd_win32>:
    58ac:	push	{fp, lr}
    58b0:	mov	fp, sp
    58b4:	bl	55e8 <__errno_location@plt>
    58b8:	mov	r1, #38	; 0x26
    58bc:	str	r1, [r0]
    58c0:	mvn	r0, #0
    58c4:	pop	{fp, pc}

000058c8 <rb_crypt>:
    58c8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    58cc:	add	fp, sp, #28
    58d0:	sub	sp, sp, #4
    58d4:	vpush	{d8-d9}
    58d8:	sub	sp, sp, #232	; 0xe8
    58dc:	mov	r5, r0
    58e0:	ldrb	r0, [r1]
    58e4:	mov	r7, r1
    58e8:	cmp	r0, #36	; 0x24
    58ec:	bne	5968 <rb_crypt+0xa0>
    58f0:	ldrb	r0, [r7, #2]
    58f4:	cmp	r0, #36	; 0x24
    58f8:	ldrbne	r0, [r7, #3]
    58fc:	cmpne	r0, #36	; 0x24
    5900:	bne	5968 <rb_crypt+0xa0>
    5904:	ldrb	r0, [r7, #1]
    5908:	mov	r4, #0
    590c:	cmp	r0, #54	; 0x36
    5910:	beq	5c64 <rb_crypt+0x39c>
    5914:	cmp	r0, #53	; 0x35
    5918:	beq	5cbc <rb_crypt+0x3f4>
    591c:	cmp	r0, #49	; 0x31
    5920:	bne	6674 <rb_crypt+0xdac>
    5924:	ldr	r4, [pc, #3420]	; 6688 <rb_crypt+0xdc0>
    5928:	mov	r0, r7
    592c:	mov	r2, #3
    5930:	add	r4, pc, r4
    5934:	str	r7, [r4]
    5938:	ldr	r1, [pc, #3404]	; 668c <rb_crypt+0xdc4>
    593c:	add	r1, pc, r1
    5940:	bl	5504 <strncmp@plt>
    5944:	cmp	r0, #0
    5948:	mov	r1, #0
    594c:	addeq	r7, r7, #3
    5950:	streq	r7, [r4]
    5954:	mov	r6, r7
    5958:	ldr	r0, [pc, #3376]	; 6690 <rb_crypt+0xdc8>
    595c:	add	r0, pc, r0
    5960:	str	r7, [r0]
    5964:	b	5d20 <rb_crypt+0x458>
    5968:	str	r7, [sp, #20]
    596c:	bl	6744 <rb_des_init>
    5970:	add	r0, sp, #140	; 0x8c
    5974:	mov	r2, #254	; 0xfe
    5978:	orr	r1, r0, #1
    597c:	mov	r3, r5
    5980:	ldrb	r7, [r3], #1
    5984:	tst	r2, r7, lsl #1
    5988:	lsl	r6, r7, #1
    598c:	movne	r5, r3
    5990:	sub	r3, r1, r0
    5994:	strb	r6, [r1, #-1]
    5998:	add	r1, r1, #1
    599c:	cmp	r3, #8
    59a0:	bne	597c <rb_crypt+0xb4>
    59a4:	bl	6744 <rb_des_init>
    59a8:	ldr	r2, [sp, #140]	; 0x8c
    59ac:	ldr	r3, [sp, #144]	; 0x90
    59b0:	ldr	r7, [pc, #3356]	; 66d4 <rb_crypt+0xe0c>
    59b4:	ldr	r7, [pc, r7]
    59b8:	rev	r0, r3
    59bc:	rev	r1, r2
    59c0:	cmp	r0, r7
    59c4:	ldreq	r7, [pc, #3340]	; 66d8 <rb_crypt+0xe10>
    59c8:	ldreq	r7, [pc, r7]
    59cc:	cmpeq	r1, r7
    59d0:	beq	5c10 <rb_crypt+0x348>
    59d4:	ldr	r2, [pc, #3328]	; 66dc <rb_crypt+0xe14>
    59d8:	lsr	r8, r1, #25
    59dc:	and	ip, r1, #254	; 0xfe
    59e0:	add	r2, pc, r2
    59e4:	str	r0, [r2]
    59e8:	ldr	r2, [pc, #3312]	; 66e0 <rb_crypt+0xe18>
    59ec:	add	r2, pc, r2
    59f0:	str	r1, [r2]
    59f4:	ldr	r3, [pc, #3304]	; 66e4 <rb_crypt+0xe1c>
    59f8:	add	r3, pc, r3
    59fc:	ldr	r7, [r3, r8, lsl #2]
    5a00:	ubfx	lr, r1, #17, #7
    5a04:	add	r5, r3, lr, lsl #2
    5a08:	ldr	r5, [r5, #512]	; 0x200
    5a0c:	ubfx	r9, r1, #9, #7
    5a10:	add	r4, r3, r9, lsl #2
    5a14:	ldr	r4, [r4, #1024]	; 0x400
    5a18:	orr	r7, r5, r7
    5a1c:	orr	r7, r7, r4
    5a20:	add	r4, r3, ip, lsl #1
    5a24:	ldr	r4, [r4, #1536]	; 0x600
    5a28:	orr	r7, r7, r4
    5a2c:	lsr	r4, r0, #25
    5a30:	add	r2, r3, r4, lsl #2
    5a34:	ldr	r2, [r2, #2048]	; 0x800
    5a38:	orr	r2, r7, r2
    5a3c:	ubfx	r7, r0, #17, #7
    5a40:	add	r6, r3, r7, lsl #2
    5a44:	ldr	r6, [r6, #2560]	; 0xa00
    5a48:	orr	r2, r2, r6
    5a4c:	ubfx	r6, r0, #9, #7
    5a50:	add	r5, r3, r6, lsl #2
    5a54:	ldr	r5, [r5, #3072]	; 0xc00
    5a58:	orr	r2, r2, r5
    5a5c:	and	r5, r0, #254	; 0xfe
    5a60:	add	r0, r3, r5, lsl #1
    5a64:	ldr	r0, [r0, #3584]	; 0xe00
    5a68:	orr	r0, r2, r0
    5a6c:	str	r0, [sp, #28]
    5a70:	ldr	r2, [pc, #3184]	; 66e8 <rb_crypt+0xe20>
    5a74:	add	r2, pc, r2
    5a78:	add	r1, r2, lr, lsl #2
    5a7c:	ldr	r3, [r2, r8, lsl #2]
    5a80:	ldr	r1, [r1, #512]	; 0x200
    5a84:	orr	r1, r1, r3
    5a88:	add	r3, r2, r9, lsl #2
    5a8c:	ldr	r3, [r3, #1024]	; 0x400
    5a90:	orr	r1, r1, r3
    5a94:	add	r3, r2, ip, lsl #1
    5a98:	ldr	r3, [r3, #1536]	; 0x600
    5a9c:	orr	r1, r1, r3
    5aa0:	add	r3, r2, r4, lsl #2
    5aa4:	ldr	r3, [r3, #2048]	; 0x800
    5aa8:	orr	r1, r1, r3
    5aac:	add	r3, r2, r7, lsl #2
    5ab0:	ldr	r3, [r3, #2560]	; 0xa00
    5ab4:	orr	r1, r1, r3
    5ab8:	add	r3, r2, r6, lsl #2
    5abc:	add	r2, r2, r5, lsl #1
    5ac0:	ldr	r3, [r3, #3072]	; 0xc00
    5ac4:	ldr	r2, [r2, #3584]	; 0xe00
    5ac8:	orr	r1, r1, r3
    5acc:	mov	r3, #0
    5ad0:	orr	r0, r1, r2
    5ad4:	mov	r2, #0
    5ad8:	str	r0, [sp, #24]
    5adc:	ldr	r9, [pc, #3080]	; 66ec <rb_crypt+0xe24>
    5ae0:	add	r9, pc, r9
    5ae4:	ldr	r0, [pc, #3076]	; 66f0 <rb_crypt+0xe28>
    5ae8:	ldr	r1, [sp, #24]
    5aec:	add	r0, pc, r0
    5af0:	ldrb	r5, [r0, r3]
    5af4:	add	r2, r2, r5
    5af8:	rsb	r0, r2, #28
    5afc:	lsr	r5, r1, r0
    5b00:	orr	r8, r5, r1, lsl r2
    5b04:	ubfx	sl, r8, #14, #7
    5b08:	add	r6, r9, sl, lsl #2
    5b0c:	ldr	r6, [r6, #512]	; 0x200
    5b10:	ubfx	ip, r8, #21, #7
    5b14:	ldr	lr, [r9, ip, lsl #2]
    5b18:	orr	r1, r6, lr
    5b1c:	ubfx	lr, r8, #7, #7
    5b20:	and	r8, r8, #127	; 0x7f
    5b24:	add	r7, r9, lr, lsl #2
    5b28:	add	r4, r9, r8, lsl #2
    5b2c:	ldr	r7, [r7, #1024]	; 0x400
    5b30:	ldr	r4, [r4, #1536]	; 0x600
    5b34:	orr	r1, r1, r7
    5b38:	orr	r1, r1, r4
    5b3c:	ldr	r4, [sp, #28]
    5b40:	lsr	r0, r4, r0
    5b44:	orr	r0, r0, r4, lsl r2
    5b48:	ubfx	r4, r0, #21, #7
    5b4c:	add	r5, r9, r4, lsl #2
    5b50:	ldr	r5, [r5, #2048]	; 0x800
    5b54:	orr	r1, r1, r5
    5b58:	ubfx	r5, r0, #14, #7
    5b5c:	add	r6, r9, r5, lsl #2
    5b60:	ldr	r6, [r6, #2560]	; 0xa00
    5b64:	orr	r1, r1, r6
    5b68:	ubfx	r6, r0, #7, #7
    5b6c:	and	r0, r0, #127	; 0x7f
    5b70:	add	r7, r9, r6, lsl #2
    5b74:	ldr	r7, [r7, #3072]	; 0xc00
    5b78:	orr	r1, r1, r7
    5b7c:	add	r7, r9, r0, lsl #2
    5b80:	ldr	r7, [r7, #3584]	; 0xe00
    5b84:	orr	r1, r1, r7
    5b88:	ldr	r7, [pc, #2916]	; 66f4 <rb_crypt+0xe2c>
    5b8c:	add	r7, pc, r7
    5b90:	str	r1, [r7, r3, lsl #2]
    5b94:	ldr	r1, [pc, #2908]	; 66f8 <rb_crypt+0xe30>
    5b98:	add	r1, pc, r1
    5b9c:	add	r7, r1, sl, lsl #2
    5ba0:	ldr	ip, [r1, ip, lsl #2]
    5ba4:	add	r0, r1, r0, lsl #2
    5ba8:	ldr	r7, [r7, #512]	; 0x200
    5bac:	ldr	r0, [r0, #3584]	; 0xe00
    5bb0:	orr	ip, r7, ip
    5bb4:	add	r7, r1, lr, lsl #2
    5bb8:	ldr	r7, [r7, #1024]	; 0x400
    5bbc:	orr	ip, ip, r7
    5bc0:	add	r7, r1, r8, lsl #2
    5bc4:	ldr	r7, [r7, #1536]	; 0x600
    5bc8:	orr	ip, ip, r7
    5bcc:	add	r7, r1, r4, lsl #2
    5bd0:	ldr	r7, [r7, #2048]	; 0x800
    5bd4:	orr	r4, ip, r7
    5bd8:	add	r7, r1, r5, lsl #2
    5bdc:	ldr	r7, [r7, #2560]	; 0xa00
    5be0:	orr	r5, r4, r7
    5be4:	add	r7, r1, r6, lsl #2
    5be8:	ldr	r7, [r7, #3072]	; 0xc00
    5bec:	ldr	r1, [pc, #2824]	; 66fc <rb_crypt+0xe34>
    5bf0:	orr	r7, r5, r7
    5bf4:	add	r1, pc, r1
    5bf8:	orr	r0, r7, r0
    5bfc:	str	r0, [r1, r3, lsl #2]
    5c00:	add	r3, r3, #1
    5c04:	cmp	r3, #16
    5c08:	bne	5ae4 <rb_crypt+0x21c>
    5c0c:	b	5c20 <rb_crypt+0x358>
    5c10:	orr	r2, r3, r2
    5c14:	rev	r2, r2
    5c18:	cmp	r2, #0
    5c1c:	beq	59d4 <rb_crypt+0x10c>
    5c20:	ldr	r7, [sp, #20]
    5c24:	mov	r1, #0
    5c28:	mov	r2, #0
    5c2c:	ldrb	r0, [r7, #1]
    5c30:	cmp	r0, #122	; 0x7a
    5c34:	bhi	6204 <rb_crypt+0x93c>
    5c38:	cmp	r0, #97	; 0x61
    5c3c:	bcc	5c48 <rb_crypt+0x380>
    5c40:	sub	r2, r0, #59	; 0x3b
    5c44:	b	6204 <rb_crypt+0x93c>
    5c48:	cmp	r0, #90	; 0x5a
    5c4c:	mov	r2, #0
    5c50:	bhi	6204 <rb_crypt+0x93c>
    5c54:	cmp	r0, #65	; 0x41
    5c58:	bcc	61f4 <rb_crypt+0x92c>
    5c5c:	sub	r2, r0, #53	; 0x35
    5c60:	b	6204 <rb_crypt+0x93c>
    5c64:	mov	r0, r7
    5c68:	bl	50f0 <strlen@plt>
    5c6c:	ldr	r2, [pc, #2640]	; 66c4 <rb_crypt+0xdfc>
    5c70:	add	r6, r0, #109	; 0x6d
    5c74:	ldr	r2, [pc, r2]
    5c78:	ldr	r0, [pc, #2632]	; 66c8 <rb_crypt+0xe00>
    5c7c:	ldr	r0, [pc, r0]
    5c80:	cmp	r0, r6
    5c84:	bge	61d0 <rb_crypt+0x908>
    5c88:	mov	r0, r2
    5c8c:	mov	r1, r6
    5c90:	bl	5534 <realloc@plt>
    5c94:	cmp	r0, #0
    5c98:	beq	6674 <rb_crypt+0xdac>
    5c9c:	mov	r2, r0
    5ca0:	ldr	r0, [pc, #2596]	; 66cc <rb_crypt+0xe04>
    5ca4:	add	r0, pc, r0
    5ca8:	str	r6, [r0]
    5cac:	ldr	r0, [pc, #2588]	; 66d0 <rb_crypt+0xe08>
    5cb0:	add	r0, pc, r0
    5cb4:	str	r2, [r0]
    5cb8:	b	61d4 <rb_crypt+0x90c>
    5cbc:	mov	r0, r7
    5cc0:	bl	50f0 <strlen@plt>
    5cc4:	add	r6, r0, #66	; 0x42
    5cc8:	mov	r0, r6
    5ccc:	bl	52ac <malloc@plt>
    5cd0:	cmp	r0, #0
    5cd4:	beq	6674 <rb_crypt+0xdac>
    5cd8:	mov	r2, r0
    5cdc:	ldr	r0, [pc, #2524]	; 66c0 <rb_crypt+0xdf8>
    5ce0:	mov	r1, r7
    5ce4:	mov	r3, r6
    5ce8:	add	r0, pc, r0
    5cec:	str	r2, [r0]
    5cf0:	mov	r0, r5
    5cf4:	sub	sp, fp, #48	; 0x30
    5cf8:	vpop	{d8-d9}
    5cfc:	add	sp, sp, #4
    5d00:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5d04:	b	77e8 <rb_sha256_crypt_r>
    5d08:	cmp	r1, #7
    5d0c:	bhi	5d30 <rb_crypt+0x468>
    5d10:	add	r2, r7, r1
    5d14:	add	r1, r1, #1
    5d18:	add	r6, r2, #1
    5d1c:	str	r6, [r0]
    5d20:	ldrb	r2, [r7, r1]
    5d24:	cmp	r2, #0
    5d28:	cmpne	r2, #36	; 0x24
    5d2c:	bne	5d08 <rb_crypt+0x440>
    5d30:	add	r0, pc, #648	; 0x288
    5d34:	add	r4, sp, #140	; 0x8c
    5d38:	mov	r9, #0
    5d3c:	vld1.64	{d8-d9}, [r0]
    5d40:	mov	r0, r4
    5d44:	vst1.32	{d8-d9}, [r0]!
    5d48:	str	r9, [r0]
    5d4c:	str	r9, [r0, #4]
    5d50:	mov	r0, r5
    5d54:	bl	50f0 <strlen@plt>
    5d58:	mov	r2, r0
    5d5c:	mov	r0, r4
    5d60:	mov	r1, r5
    5d64:	bl	6c8c <MD5Update>
    5d68:	ldr	r1, [pc, #2340]	; 6694 <rb_crypt+0xdcc>
    5d6c:	mov	r0, r4
    5d70:	mov	r2, #3
    5d74:	add	r1, pc, r1
    5d78:	bl	6c8c <MD5Update>
    5d7c:	ldr	r1, [pc, #2324]	; 6698 <rb_crypt+0xdd0>
    5d80:	sub	r6, r6, r7
    5d84:	mov	r0, r4
    5d88:	mov	r2, r6
    5d8c:	ldr	r1, [pc, r1]
    5d90:	bl	6c8c <MD5Update>
    5d94:	add	r7, sp, #52	; 0x34
    5d98:	mov	r0, r7
    5d9c:	vst1.32	{d8-d9}, [r0]!
    5da0:	str	r9, [r0]
    5da4:	str	r9, [r0, #4]
    5da8:	mov	r0, r5
    5dac:	bl	50f0 <strlen@plt>
    5db0:	mov	r2, r0
    5db4:	mov	r0, r7
    5db8:	mov	r1, r5
    5dbc:	bl	6c8c <MD5Update>
    5dc0:	ldr	r1, [pc, #2260]	; 669c <rb_crypt+0xdd4>
    5dc4:	mov	r0, r7
    5dc8:	mov	r2, r6
    5dcc:	ldr	r1, [pc, r1]
    5dd0:	str	r6, [sp, #28]
    5dd4:	bl	6c8c <MD5Update>
    5dd8:	mov	r0, r5
    5ddc:	bl	50f0 <strlen@plt>
    5de0:	mov	r2, r0
    5de4:	mov	r0, r7
    5de8:	mov	r1, r5
    5dec:	bl	6c8c <MD5Update>
    5df0:	add	r9, sp, #32
    5df4:	mov	r1, r7
    5df8:	mov	r0, r9
    5dfc:	bl	6d48 <MD5Final>
    5e00:	mov	r0, r5
    5e04:	bl	50f0 <strlen@plt>
    5e08:	cmp	r0, #1
    5e0c:	blt	5e3c <rb_crypt+0x574>
    5e10:	mov	r6, r0
    5e14:	add	sl, sp, #140	; 0x8c
    5e18:	add	r4, sp, #32
    5e1c:	cmp	r6, #16
    5e20:	mov	r2, r6
    5e24:	mov	r0, sl
    5e28:	mov	r1, r4
    5e2c:	movge	r2, #16
    5e30:	bl	6c8c <MD5Update>
    5e34:	subs	r6, r6, #16
    5e38:	bgt	5e1c <rb_crypt+0x554>
    5e3c:	vmov.i32	q8, #0	; 0x00000000
    5e40:	mov	r0, r5
    5e44:	vst1.64	{d16-d17}, [r9]
    5e48:	bl	50f0 <strlen@plt>
    5e4c:	cmp	r0, #0
    5e50:	beq	5e8c <rb_crypt+0x5c4>
    5e54:	mov	r4, r0
    5e58:	add	r8, sp, #140	; 0x8c
    5e5c:	mov	r6, #0
    5e60:	add	r9, sp, #32
    5e64:	tst	r4, #1
    5e68:	mov	r0, r8
    5e6c:	mov	r2, #1
    5e70:	moveq	r1, r5
    5e74:	movne	r1, r9
    5e78:	bl	6c8c <MD5Update>
    5e7c:	lsr	r0, r4, #1
    5e80:	cmp	r6, r4, lsr #1
    5e84:	mov	r4, r0
    5e88:	bne	5e64 <rb_crypt+0x59c>
    5e8c:	ldr	r4, [pc, #2060]	; 66a0 <rb_crypt+0xdd8>
    5e90:	ldr	r1, [pc, #2060]	; 66a4 <rb_crypt+0xddc>
    5e94:	mov	r2, #120	; 0x78
    5e98:	add	r4, pc, r4
    5e9c:	add	r1, pc, r1
    5ea0:	mov	r0, r4
    5ea4:	bl	4fc4 <rb_strlcpy@plt>
    5ea8:	ldr	r1, [pc, #2040]	; 66a8 <rb_crypt+0xde0>
    5eac:	mov	r0, r4
    5eb0:	ldr	r1, [pc, r1]
    5eb4:	ldr	r2, [sp, #28]
    5eb8:	bl	51c8 <strncat@plt>
    5ebc:	ldr	r1, [pc, #2024]	; 66ac <rb_crypt+0xde4>
    5ec0:	mov	r0, r4
    5ec4:	mov	r2, #120	; 0x78
    5ec8:	add	r1, pc, r1
    5ecc:	bl	5480 <rb_strlcat@plt>
    5ed0:	add	r9, sp, #32
    5ed4:	add	r1, sp, #140	; 0x8c
    5ed8:	mov	r0, r9
    5edc:	bl	6d48 <MD5Final>
    5ee0:	mov	r4, #0
    5ee4:	mov	sl, #0
    5ee8:	add	r0, pc, #208	; 0xd0
    5eec:	ands	r6, sl, #1
    5ef0:	vld1.64	{d16-d17}, [r0]
    5ef4:	mov	r0, r7
    5ef8:	vst1.32	{d16-d17}, [r0]!
    5efc:	str	r4, [r0]
    5f00:	str	r4, [sp, #72]	; 0x48
    5f04:	beq	5f20 <rb_crypt+0x658>
    5f08:	mov	r0, r5
    5f0c:	bl	50f0 <strlen@plt>
    5f10:	mov	r2, r0
    5f14:	mov	r0, r7
    5f18:	mov	r1, r5
    5f1c:	b	5f2c <rb_crypt+0x664>
    5f20:	mov	r0, r7
    5f24:	mov	r1, r9
    5f28:	mov	r2, #16
    5f2c:	bl	6c8c <MD5Update>
    5f30:	movw	r0, #43691	; 0xaaab
    5f34:	uxth	r8, sl
    5f38:	movt	r0, #43690	; 0xaaaa
    5f3c:	umull	r0, r1, r8, r0
    5f40:	lsr	r0, r1, #1
    5f44:	add	r0, r0, r0, lsl #1
    5f48:	subs	r0, r8, r0
    5f4c:	beq	5f64 <rb_crypt+0x69c>
    5f50:	ldr	r1, [pc, #1880]	; 66b0 <rb_crypt+0xde8>
    5f54:	mov	r0, r7
    5f58:	ldr	r1, [pc, r1]
    5f5c:	ldr	r2, [sp, #28]
    5f60:	bl	6c8c <MD5Update>
    5f64:	movw	r0, #18725	; 0x4925
    5f68:	movt	r0, #9362	; 0x2492
    5f6c:	umull	r0, r1, r8, r0
    5f70:	sub	r0, r8, r1
    5f74:	add	r0, r1, r0, lsr #1
    5f78:	lsr	r0, r0, #2
    5f7c:	sub	r0, r0, r0, lsl #3
    5f80:	uxtah	r0, r0, sl
    5f84:	cmp	r0, #0
    5f88:	beq	5fa4 <rb_crypt+0x6dc>
    5f8c:	mov	r0, r5
    5f90:	bl	50f0 <strlen@plt>
    5f94:	mov	r2, r0
    5f98:	mov	r0, r7
    5f9c:	mov	r1, r5
    5fa0:	bl	6c8c <MD5Update>
    5fa4:	cmp	r6, #0
    5fa8:	beq	5fd0 <rb_crypt+0x708>
    5fac:	mov	r0, r7
    5fb0:	mov	r1, r9
    5fb4:	mov	r2, #16
    5fb8:	b	5fe4 <rb_crypt+0x71c>
    5fbc:	nop	{0}
    5fc0:	.word	0x67452301
    5fc4:	.word	0xefcdab89
    5fc8:	.word	0x98badcfe
    5fcc:	.word	0x10325476
    5fd0:	mov	r0, r5
    5fd4:	bl	50f0 <strlen@plt>
    5fd8:	mov	r2, r0
    5fdc:	mov	r0, r7
    5fe0:	mov	r1, r5
    5fe4:	bl	6c8c <MD5Update>
    5fe8:	mov	r0, r9
    5fec:	mov	r1, r7
    5ff0:	bl	6d48 <MD5Final>
    5ff4:	add	sl, sl, #1
    5ff8:	cmp	sl, #1000	; 0x3e8
    5ffc:	bne	5ee8 <rb_crypt+0x620>
    6000:	ldr	r4, [pc, #1708]	; 66b4 <rb_crypt+0xdec>
    6004:	add	r4, pc, r4
    6008:	mov	r0, r4
    600c:	bl	50f0 <strlen@plt>
    6010:	ldr	r1, [pc, #1696]	; 66b8 <rb_crypt+0xdf0>
    6014:	ldrb	r3, [sp, #38]	; 0x26
    6018:	ldrb	r2, [sp, #32]
    601c:	ldrb	r7, [sp, #44]	; 0x2c
    6020:	add	r0, r4, r0
    6024:	add	r1, pc, r1
    6028:	lsl	r3, r3, #8
    602c:	orr	r2, r3, r2, lsl #16
    6030:	str	r0, [r1]
    6034:	orr	r3, r2, r7
    6038:	ldr	r2, [pc, #1660]	; 66bc <rb_crypt+0xdf4>
    603c:	mov	r7, #0
    6040:	add	r2, pc, r2
    6044:	and	r6, r3, #63	; 0x3f
    6048:	lsr	r3, r3, #6
    604c:	ldrb	r6, [r2, r6]
    6050:	strb	r6, [r0, -r7]
    6054:	sub	r6, r7, #1
    6058:	add	r7, r7, #4
    605c:	cmp	r7, #1
    6060:	mov	r7, r6
    6064:	bhi	6044 <rb_crypt+0x77c>
    6068:	ldrb	r6, [sp, #39]	; 0x27
    606c:	ldrb	r7, [sp, #33]	; 0x21
    6070:	ldrb	r5, [sp, #45]	; 0x2d
    6074:	add	r3, r0, #4
    6078:	str	r3, [r1]
    607c:	lsl	r6, r6, #8
    6080:	orr	r7, r6, r7, lsl #16
    6084:	mov	r6, #0
    6088:	orr	r7, r7, r5
    608c:	and	r5, r7, #63	; 0x3f
    6090:	lsr	r7, r7, #6
    6094:	ldrb	r5, [r2, r5]
    6098:	strb	r5, [r3, -r6]
    609c:	sub	r5, r6, #1
    60a0:	add	r6, r6, #4
    60a4:	cmp	r6, #1
    60a8:	mov	r6, r5
    60ac:	bhi	608c <rb_crypt+0x7c4>
    60b0:	ldrb	r6, [sp, #40]	; 0x28
    60b4:	ldrb	r7, [sp, #34]	; 0x22
    60b8:	ldrb	r5, [sp, #46]	; 0x2e
    60bc:	add	r3, r0, #8
    60c0:	str	r3, [r1]
    60c4:	lsl	r6, r6, #8
    60c8:	orr	r7, r6, r7, lsl #16
    60cc:	mov	r6, #0
    60d0:	orr	r7, r7, r5
    60d4:	and	r5, r7, #63	; 0x3f
    60d8:	lsr	r7, r7, #6
    60dc:	ldrb	r5, [r2, r5]
    60e0:	strb	r5, [r3, -r6]
    60e4:	sub	r5, r6, #1
    60e8:	add	r6, r6, #4
    60ec:	cmp	r6, #1
    60f0:	mov	r6, r5
    60f4:	bhi	60d4 <rb_crypt+0x80c>
    60f8:	ldrb	r6, [sp, #41]	; 0x29
    60fc:	ldrb	r7, [sp, #35]	; 0x23
    6100:	ldrb	r5, [sp, #47]	; 0x2f
    6104:	add	r3, r0, #12
    6108:	str	r3, [r1]
    610c:	lsl	r6, r6, #8
    6110:	orr	r7, r6, r7, lsl #16
    6114:	mov	r6, #0
    6118:	orr	r7, r7, r5
    611c:	and	r5, r7, #63	; 0x3f
    6120:	lsr	r7, r7, #6
    6124:	ldrb	r5, [r2, r5]
    6128:	strb	r5, [r3, -r6]
    612c:	sub	r5, r6, #1
    6130:	add	r6, r6, #4
    6134:	cmp	r6, #1
    6138:	mov	r6, r5
    613c:	bhi	611c <rb_crypt+0x854>
    6140:	ldrb	r5, [sp, #42]	; 0x2a
    6144:	ldrb	r7, [sp, #36]	; 0x24
    6148:	ldrb	r6, [sp, #37]	; 0x25
    614c:	add	r3, r0, #16
    6150:	str	r3, [r1]
    6154:	lsl	r5, r5, #8
    6158:	orr	r7, r5, r7, lsl #16
    615c:	orr	r7, r7, r6
    6160:	mov	r6, #0
    6164:	and	r5, r7, #63	; 0x3f
    6168:	lsr	r7, r7, #6
    616c:	ldrb	r5, [r2, r5]
    6170:	strb	r5, [r3, -r6]
    6174:	sub	r5, r6, #1
    6178:	add	r6, r6, #4
    617c:	cmp	r6, #1
    6180:	mov	r6, r5
    6184:	bhi	6164 <rb_crypt+0x89c>
    6188:	ldrb	r7, [sp, #43]	; 0x2b
    618c:	add	r3, r0, #20
    6190:	mov	r6, #0
    6194:	str	r3, [r1]
    6198:	and	r5, r7, #63	; 0x3f
    619c:	lsr	r7, r7, #6
    61a0:	ldrb	r5, [r2, r5]
    61a4:	strb	r5, [r3, -r6]
    61a8:	sub	r5, r6, #1
    61ac:	add	r6, r6, #2
    61b0:	cmp	r6, #1
    61b4:	mov	r6, r5
    61b8:	bhi	6198 <rb_crypt+0x8d0>
    61bc:	add	r2, r0, #22
    61c0:	str	r2, [r1]
    61c4:	mov	r1, #0
    61c8:	strb	r1, [r0, #22]
    61cc:	b	6674 <rb_crypt+0xdac>
    61d0:	mov	r6, r0
    61d4:	mov	r0, r5
    61d8:	mov	r1, r7
    61dc:	mov	r3, r6
    61e0:	sub	sp, fp, #48	; 0x30
    61e4:	vpop	{d8-d9}
    61e8:	add	sp, sp, #4
    61ec:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    61f0:	b	8910 <rb_sha512_crypt_r>
    61f4:	sub	r2, r0, #46	; 0x2e
    61f8:	uxtb	r3, r2
    61fc:	cmp	r3, #12
    6200:	movcs	r2, #0
    6204:	ldrb	r3, [r7]
    6208:	lsl	r2, r2, #6
    620c:	cmp	r3, #122	; 0x7a
    6210:	bhi	624c <rb_crypt+0x984>
    6214:	cmp	r3, #97	; 0x61
    6218:	bcc	6224 <rb_crypt+0x95c>
    621c:	sub	r1, r3, #59	; 0x3b
    6220:	b	624c <rb_crypt+0x984>
    6224:	cmp	r3, #90	; 0x5a
    6228:	bhi	624c <rb_crypt+0x984>
    622c:	cmp	r3, #65	; 0x41
    6230:	bcc	623c <rb_crypt+0x974>
    6234:	sub	r1, r3, #53	; 0x35
    6238:	b	624c <rb_crypt+0x984>
    623c:	sub	r1, r3, #46	; 0x2e
    6240:	uxtb	r7, r1
    6244:	cmp	r7, #12
    6248:	movcs	r1, #0
    624c:	ldr	r7, [pc, #1196]	; 6700 <rb_crypt+0xe38>
    6250:	cmp	r0, #0
    6254:	orr	r1, r1, r2
    6258:	add	r7, pc, r7
    625c:	strb	r3, [r7]
    6260:	movne	r3, r0
    6264:	strb	r3, [r7, #1]
    6268:	ldr	r0, [pc, #1172]	; 6704 <rb_crypt+0xe3c>
    626c:	ldr	r0, [pc, r0]
    6270:	cmp	r0, r1
    6274:	bne	6284 <rb_crypt+0x9bc>
    6278:	ldr	r0, [pc, #1160]	; 6708 <rb_crypt+0xe40>
    627c:	ldr	r0, [pc, r0]
    6280:	b	62c8 <rb_crypt+0xa00>
    6284:	ldr	r2, [pc, #1152]	; 670c <rb_crypt+0xe44>
    6288:	mov	r0, #0
    628c:	mov	r7, #1
    6290:	mov	r6, #24
    6294:	add	r2, pc, r2
    6298:	str	r0, [r2]
    629c:	ldr	r3, [pc, #1132]	; 6710 <rb_crypt+0xe48>
    62a0:	add	r3, pc, r3
    62a4:	str	r1, [r3]
    62a8:	mov	r3, #8388608	; 0x800000
    62ac:	tst	r7, r1
    62b0:	lsl	r7, r7, #1
    62b4:	orrne	r0, r3, r0
    62b8:	lsr	r3, r3, #1
    62bc:	strne	r0, [r2]
    62c0:	subs	r6, r6, #1
    62c4:	bne	62ac <rb_crypt+0x9e4>
    62c8:	str	r0, [sp, #24]
    62cc:	mov	r5, #4096	; 0x1000
    62d0:	mov	ip, #5120	; 0x1400
    62d4:	ldr	r1, [pc, #1080]	; 6714 <rb_crypt+0xe4c>
    62d8:	add	r1, pc, r1
    62dc:	ldr	r2, [r1, r5]
    62e0:	ldr	r3, [r1, #1024]	; 0x400
    62e4:	ldr	r7, [pc, #1068]	; 6718 <rb_crypt+0xe50>
    62e8:	ldr	r7, [pc, r7]
    62ec:	orr	r3, r3, r7
    62f0:	ldr	r7, [r1, #2048]	; 0x800
    62f4:	orr	r3, r3, r7
    62f8:	ldr	r7, [r1, #3072]	; 0xc00
    62fc:	orr	r3, r3, r7
    6300:	ldr	r7, [r1, ip]
    6304:	orr	r2, r3, r2
    6308:	orr	r2, r2, r7
    630c:	mov	r7, #6144	; 0x1800
    6310:	ldr	r6, [r1, r7]
    6314:	orr	r2, r2, r6
    6318:	mov	r6, #7168	; 0x1c00
    631c:	ldr	r1, [r1, r6]
    6320:	orr	r2, r2, r1
    6324:	ldr	r1, [pc, #1008]	; 671c <rb_crypt+0xe54>
    6328:	add	r1, pc, r1
    632c:	ldr	r5, [r1, r5]
    6330:	ldr	r4, [r1, #1024]	; 0x400
    6334:	ldr	r3, [pc, #996]	; 6720 <rb_crypt+0xe58>
    6338:	ldr	r3, [pc, r3]
    633c:	ldr	r7, [r1, r7]
    6340:	orr	r3, r4, r3
    6344:	ldr	r4, [r1, #2048]	; 0x800
    6348:	orr	r3, r3, r4
    634c:	ldr	r4, [r1, #3072]	; 0xc00
    6350:	orr	r3, r3, r4
    6354:	orr	r3, r3, r5
    6358:	ldr	r5, [r1, ip]
    635c:	ldr	r1, [r1, r6]
    6360:	ldr	r4, [pc, #956]	; 6724 <rb_crypt+0xe5c>
    6364:	mov	ip, #24
    6368:	mov	r6, #16515072	; 0xfc0000
    636c:	orr	r3, r3, r5
    6370:	add	r4, pc, r4
    6374:	orr	r3, r3, r7
    6378:	mov	r7, #4032	; 0xfc0
    637c:	orr	lr, r3, r1
    6380:	ldr	r1, [pc, #928]	; 6728 <rb_crypt+0xe60>
    6384:	ldr	sl, [pc, #928]	; 672c <rb_crypt+0xe64>
    6388:	ldr	r8, [sp, #24]
    638c:	mov	r3, #258048	; 0x3f000
    6390:	add	r1, pc, r1
    6394:	add	sl, pc, sl
    6398:	mov	r9, lr
    639c:	str	ip, [sp, #28]
    63a0:	mov	ip, #0
    63a4:	mov	lr, r2
    63a8:	and	r5, r3, lr, lsr #11
    63ac:	and	r3, r6, lr, ror #9
    63b0:	and	r6, lr, #129024	; 0x1f800
    63b4:	mov	r2, lr
    63b8:	orr	r3, r3, r5
    63bc:	and	r5, r7, lr, lsr #13
    63c0:	and	r7, lr, #8064	; 0x1f80
    63c4:	orr	r3, r3, r5
    63c8:	ubfx	r5, lr, #15, #6
    63cc:	ldr	r0, [pc, #860]	; 6730 <rb_crypt+0xe68>
    63d0:	lsl	r7, r7, #5
    63d4:	orr	r7, r7, lr, lsr #31
    63d8:	orr	r3, r3, r5
    63dc:	orr	r7, r7, r6, lsl #7
    63e0:	and	r6, lr, #504	; 0x1f8
    63e4:	orr	r7, r7, r6, lsl #3
    63e8:	and	r6, lr, #31
    63ec:	add	r0, pc, r0
    63f0:	orr	r7, r7, r6, lsl #1
    63f4:	ldr	r5, [r0, ip, lsl #2]
    63f8:	mov	r0, #4096	; 0x1000
    63fc:	eor	r5, r3, r5
    6400:	eor	r3, r3, r7
    6404:	and	r3, r3, r8
    6408:	eor	r6, r5, r3
    640c:	ldrb	r5, [r4, r6, lsr #12]
    6410:	bfc	r6, #12, #20
    6414:	add	r6, r4, r6
    6418:	ldrb	r6, [r6, r0]
    641c:	ldr	r5, [r1, r5, lsl #2]
    6420:	add	r6, r1, r6, lsl #2
    6424:	ldr	r6, [r6, #1024]	; 0x400
    6428:	orr	r6, r6, r5
    642c:	ldr	r5, [sl, ip, lsl #2]
    6430:	add	ip, ip, #1
    6434:	cmp	ip, #16
    6438:	eor	r7, r7, r5
    643c:	mov	r5, #8192	; 0x2000
    6440:	eor	r3, r7, r3
    6444:	add	r7, r4, r3, lsr #12
    6448:	bfc	r3, #12, #20
    644c:	ldrb	r7, [r7, r5]
    6450:	mov	r5, #12288	; 0x3000
    6454:	add	r3, r4, r3
    6458:	ldrb	r3, [r3, r5]
    645c:	add	r7, r1, r7, lsl #2
    6460:	ldr	r7, [r7, #2048]	; 0x800
    6464:	add	r3, r1, r3, lsl #2
    6468:	ldr	r3, [r3, #3072]	; 0xc00
    646c:	orr	r7, r6, r7
    6470:	mov	r6, #16515072	; 0xfc0000
    6474:	orr	r3, r7, r3
    6478:	mov	r7, #4032	; 0xfc0
    647c:	eor	lr, r3, r9
    6480:	mov	r3, #258048	; 0x3f000
    6484:	mov	r9, r2
    6488:	bne	63a8 <rb_crypt+0xae0>
    648c:	ldr	r0, [sp, #28]
    6490:	sub	ip, r0, #1
    6494:	cmp	r0, #0
    6498:	bne	6398 <rb_crypt+0xad0>
    649c:	ldr	r1, [pc, #656]	; 6734 <rb_crypt+0xe6c>
    64a0:	uxtb	r6, r2
    64a4:	mov	r0, #7168	; 0x1c00
    64a8:	mov	r9, #5120	; 0x1400
    64ac:	mov	sl, #4096	; 0x1000
    64b0:	uxtb	ip, lr
    64b4:	add	r1, pc, r1
    64b8:	add	r3, r1, r6, lsl #2
    64bc:	ldr	r0, [r3, r0]
    64c0:	str	r0, [sp, #28]
    64c4:	ubfx	r8, r2, #8, #8
    64c8:	mov	r0, #6144	; 0x1800
    64cc:	add	r4, r1, r8, lsl #2
    64d0:	ldr	r0, [r4, r0]
    64d4:	str	r0, [sp, #24]
    64d8:	ubfx	r5, r2, #16, #8
    64dc:	add	r4, r1, r5, lsl #2
    64e0:	ldr	r0, [r4, r9]
    64e4:	lsr	r4, r2, #24
    64e8:	add	r2, r1, r4, lsl #2
    64ec:	str	r0, [sp, #20]
    64f0:	ldr	r0, [r2, sl]
    64f4:	add	r2, r1, ip, lsl #2
    64f8:	str	r0, [sp, #16]
    64fc:	ldr	r0, [r2, #3072]	; 0xc00
    6500:	str	r0, [sp, #12]
    6504:	ubfx	r3, lr, #8, #8
    6508:	add	r2, r1, r3, lsl #2
    650c:	ldr	r0, [r2, #2048]	; 0x800
    6510:	str	r0, [sp, #8]
    6514:	ubfx	r2, lr, #16, #8
    6518:	lsr	r0, lr, #24
    651c:	ldr	r7, [r1, r0, lsl #2]
    6520:	add	r1, r1, r2, lsl #2
    6524:	ldr	r1, [r1, #1024]	; 0x400
    6528:	str	r7, [sp, #4]
    652c:	str	r1, [sp]
    6530:	ldr	r1, [pc, #512]	; 6738 <rb_crypt+0xe70>
    6534:	add	r1, pc, r1
    6538:	add	r7, r1, r6, lsl #2
    653c:	mov	r6, #7168	; 0x1c00
    6540:	add	r3, r1, r3, lsl #2
    6544:	add	r5, r1, r5, lsl #2
    6548:	add	r4, r1, r4, lsl #2
    654c:	ldr	r0, [r1, r0, lsl #2]
    6550:	ldr	lr, [r7, r6]
    6554:	add	r6, r1, r8, lsl #2
    6558:	mov	r7, #6144	; 0x1800
    655c:	ldr	r3, [r3, #2048]	; 0x800
    6560:	ldr	r9, [r5, r9]
    6564:	ldr	r5, [r4, sl]
    6568:	ldr	r6, [r6, r7]
    656c:	add	r7, r1, ip, lsl #2
    6570:	add	r1, r1, r2, lsl #2
    6574:	mov	r2, #0
    6578:	ldr	r1, [r1, #1024]	; 0x400
    657c:	ldr	r7, [r7, #3072]	; 0xc00
    6580:	ldr	r4, [pc, #436]	; 673c <rb_crypt+0xe74>
    6584:	orr	r0, r1, r0
    6588:	add	r4, pc, r4
    658c:	orr	r0, r0, r3
    6590:	strb	r2, [r4, #13]
    6594:	orr	r0, r0, r7
    6598:	orr	r0, r0, r5
    659c:	orr	r0, r0, r9
    65a0:	orr	r0, r0, r6
    65a4:	orr	r1, r0, lr
    65a8:	ldr	r0, [pc, #400]	; 6740 <rb_crypt+0xe78>
    65ac:	add	r0, pc, r0
    65b0:	ldrb	r2, [r0, r1, lsr #26]
    65b4:	strb	r2, [r4, #2]
    65b8:	ubfx	r2, r1, #20, #6
    65bc:	ldrb	r2, [r0, r2]
    65c0:	strb	r2, [r4, #3]
    65c4:	ubfx	r2, r1, #14, #6
    65c8:	ldrb	r2, [r0, r2]
    65cc:	strb	r2, [r4, #4]
    65d0:	ubfx	r2, r1, #8, #6
    65d4:	ldrb	r2, [r0, r2]
    65d8:	strb	r2, [r4, #5]
    65dc:	ubfx	r2, r1, #2, #6
    65e0:	ldr	r3, [sp]
    65e4:	ldrb	r2, [r0, r2]
    65e8:	strb	r2, [r4, #6]
    65ec:	ldr	r2, [sp, #4]
    65f0:	orr	r2, r3, r2
    65f4:	ldr	r3, [sp, #8]
    65f8:	orr	r2, r2, r3
    65fc:	ldr	r3, [sp, #12]
    6600:	orr	r2, r2, r3
    6604:	ldr	r3, [sp, #16]
    6608:	orr	r2, r2, r3
    660c:	ldr	r3, [sp, #20]
    6610:	orr	r2, r2, r3
    6614:	ldr	r3, [sp, #24]
    6618:	orr	r2, r2, r3
    661c:	ldr	r3, [sp, #28]
    6620:	orr	r2, r2, r3
    6624:	ubfx	r3, r2, #22, #6
    6628:	ldrb	r3, [r0, r3]
    662c:	strb	r3, [r4, #8]
    6630:	ubfx	r3, r2, #16, #6
    6634:	ldrb	r3, [r0, r3]
    6638:	strb	r3, [r4, #9]
    663c:	ubfx	r3, r2, #10, #6
    6640:	ldrb	r3, [r0, r3]
    6644:	strb	r3, [r4, #10]
    6648:	ubfx	r3, r2, #4, #6
    664c:	ldrb	r3, [r0, r3]
    6650:	strb	r3, [r4, #11]
    6654:	and	r3, r2, #15
    6658:	lsr	r2, r2, #16
    665c:	ldrb	r3, [r0, r3, lsl #2]
    6660:	orr	r1, r2, r1, lsl #16
    6664:	strb	r3, [r4, #12]
    6668:	ubfx	r1, r1, #12, #6
    666c:	ldrb	r0, [r0, r1]
    6670:	strb	r0, [r4, #7]
    6674:	mov	r0, r4
    6678:	sub	sp, fp, #48	; 0x30
    667c:	vpop	{d8-d9}
    6680:	add	sp, sp, #4
    6684:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    6688:	.word	0x00034f50
    668c:	.word	0x0000f92c
    6690:	.word	0x00034f28
    6694:	.word	0x0000f4f4
    6698:	.word	0x00034af4
    669c:	.word	0x00034ab4
    66a0:	.word	0x000349f0
    66a4:	.word	0x0000f3cc
    66a8:	.word	0x000349d0
    66ac:	.word	0x0000f3a2
    66b0:	.word	0x00034928
    66b4:	.word	0x00034884
    66b8:	.word	0x000348dc
    66bc:	.word	0x0000f1e7
    66c0:	.word	0x00034c1c
    66c4:	.word	0x00034c94
    66c8:	.word	0x00034c90
    66cc:	.word	0x00034c68
    66d0:	.word	0x00034c58
    66d4:	.word	0x00023b20
    66d8:	.word	0x00023b10
    66dc:	.word	0x00023af4
    66e0:	.word	0x00023aec
    66e4:	.word	0x00030de8
    66e8:	.word	0x0002fd6c
    66ec:	.word	0x00031d00
    66f0:	.word	0x0000ff3c
    66f4:	.word	0x00034c74
    66f8:	.word	0x00032c48
    66fc:	.word	0x00034c4c
    6700:	.word	0x00023260
    6704:	.word	0x00023274
    6708:	.word	0x00023260
    670c:	.word	0x00023248
    6710:	.word	0x00023240
    6714:	.word	0x00029508
    6718:	.word	0x000294f8
    671c:	.word	0x000274b8
    6720:	.word	0x000274a8
    6724:	.word	0x00023374
    6728:	.word	0x00033470
    672c:	.word	0x000344ac
    6730:	.word	0x00034414
    6734:	.word	0x0002d32c
    6738:	.word	0x0002b2ac
    673c:	.word	0x00022f30
    6740:	.word	0x0000ec7b

00006744 <rb_des_init>:
    6744:	ldr	r0, [pc, #1224]	; 6c14 <rb_des_init+0x4d0>
    6748:	add	r0, pc, r0
    674c:	ldrb	r0, [r0]
    6750:	cmp	r0, #0
    6754:	bxne	lr
    6758:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    675c:	add	fp, sp, #28
    6760:	sub	sp, sp, #28
    6764:	ldr	r1, [pc, #1196]	; 6c18 <rb_des_init+0x4d4>
    6768:	mov	r0, #0
    676c:	add	r1, pc, r1
    6770:	str	r0, [r1]
    6774:	ldr	r1, [pc, #1184]	; 6c1c <rb_des_init+0x4d8>
    6778:	add	r1, pc, r1
    677c:	str	r0, [r1]
    6780:	ldr	r1, [pc, #1176]	; 6c20 <rb_des_init+0x4dc>
    6784:	add	r1, pc, r1
    6788:	str	r0, [r1]
    678c:	ldr	r1, [pc, #1168]	; 6c24 <rb_des_init+0x4e0>
    6790:	add	r1, pc, r1
    6794:	str	r0, [r1]
    6798:	ldr	r1, [pc, #1160]	; 6c28 <rb_des_init+0x4e4>
    679c:	ldr	r2, [pc, #1160]	; 6c2c <rb_des_init+0x4e8>
    67a0:	add	r1, pc, r1
    67a4:	add	r2, pc, r2
    67a8:	mov	r3, #0
    67ac:	mov	r7, #0
    67b0:	and	r4, r3, #16
    67b4:	and	r5, r7, #32
    67b8:	add	r6, r2, r0, lsl #6
    67bc:	add	r3, r3, #16
    67c0:	orr	r5, r4, r5
    67c4:	ubfx	r4, r7, #1, #4
    67c8:	orr	r5, r5, r4
    67cc:	ldrb	r6, [r6, r5]
    67d0:	strb	r6, [r1, r7]
    67d4:	add	r7, r7, #1
    67d8:	cmp	r7, #64	; 0x40
    67dc:	bne	67b0 <rb_des_init+0x6c>
    67e0:	add	r0, r0, #1
    67e4:	add	r1, r1, #64	; 0x40
    67e8:	cmp	r0, #8
    67ec:	bne	67a8 <rb_des_init+0x64>
    67f0:	ldr	ip, [pc, #1080]	; 6c30 <rb_des_init+0x4ec>
    67f4:	ldr	r9, [pc, #1080]	; 6c34 <rb_des_init+0x4f0>
    67f8:	mov	r2, #0
    67fc:	add	ip, pc, ip
    6800:	add	r9, pc, r9
    6804:	add	r1, ip, #64	; 0x40
    6808:	lsl	lr, r2, #1
    680c:	mov	r8, #0
    6810:	add	r0, ip, lr, lsl #6
    6814:	lsl	r4, r8, #6
    6818:	ldrb	r0, [r0, r8]
    681c:	lsl	r5, r0, #4
    6820:	mov	r0, #0
    6824:	ldrb	r3, [r1, r0]
    6828:	orr	r7, r0, r4
    682c:	add	r0, r0, #1
    6830:	add	r6, r9, r2, lsl #12
    6834:	cmp	r0, #64	; 0x40
    6838:	orr	r3, r5, r3
    683c:	strb	r3, [r6, r7]
    6840:	bne	6824 <rb_des_init+0xe0>
    6844:	add	r8, r8, #1
    6848:	cmp	r8, #64	; 0x40
    684c:	bne	6810 <rb_des_init+0xcc>
    6850:	add	r2, r2, #1
    6854:	add	r1, r1, #128	; 0x80
    6858:	cmp	r2, #4
    685c:	bne	6808 <rb_des_init+0xc4>
    6860:	ldr	r8, [pc, #976]	; 6c38 <rb_des_init+0x4f4>
    6864:	mov	r1, #255	; 0xff
    6868:	mov	r2, #64	; 0x40
    686c:	add	r8, pc, r8
    6870:	mov	r0, r8
    6874:	bl	4f4c <memset@plt>
    6878:	ldr	r1, [pc, #956]	; 6c3c <rb_des_init+0x4f8>
    687c:	ldr	r4, [pc, #956]	; 6c40 <rb_des_init+0x4fc>
    6880:	ldr	r5, [pc, #956]	; 6c44 <rb_des_init+0x500>
    6884:	mov	r0, #0
    6888:	add	r1, pc, r1
    688c:	add	r4, pc, r4
    6890:	add	r5, pc, r5
    6894:	ldrb	r2, [r1, r0]
    6898:	sub	r2, r2, #1
    689c:	strb	r2, [r4, r0]
    68a0:	uxtb	r2, r2
    68a4:	strb	r0, [r5, r2]
    68a8:	add	r0, r0, #1
    68ac:	cmp	r0, #64	; 0x40
    68b0:	bne	6894 <rb_des_init+0x150>
    68b4:	ldr	r9, [pc, #908]	; 6c48 <rb_des_init+0x504>
    68b8:	mov	r1, #255	; 0xff
    68bc:	mov	r2, #56	; 0x38
    68c0:	add	r9, pc, r9
    68c4:	mov	r0, r9
    68c8:	bl	4f4c <memset@plt>
    68cc:	ldr	r1, [pc, #888]	; 6c4c <rb_des_init+0x508>
    68d0:	mov	r0, #0
    68d4:	add	r1, pc, r1
    68d8:	ldrb	r2, [r1, r0]
    68dc:	add	r2, r8, r2
    68e0:	strb	r0, [r2, #-1]
    68e4:	add	r0, r0, #1
    68e8:	cmp	r0, #56	; 0x38
    68ec:	bne	68d8 <rb_des_init+0x194>
    68f0:	ldr	r1, [pc, #856]	; 6c50 <rb_des_init+0x50c>
    68f4:	mov	r0, #0
    68f8:	add	r1, pc, r1
    68fc:	ldrb	r2, [r1, r0]
    6900:	add	r2, r9, r2
    6904:	strb	r0, [r2, #-1]
    6908:	add	r0, r0, #1
    690c:	cmp	r0, #48	; 0x30
    6910:	bne	68fc <rb_des_init+0x1b8>
    6914:	ldr	r0, [pc, #824]	; 6c54 <rb_des_init+0x510>
    6918:	ldr	r1, [pc, #824]	; 6c58 <rb_des_init+0x514>
    691c:	mov	lr, #0
    6920:	add	r0, pc, r0
    6924:	add	r1, pc, r1
    6928:	mov	r3, #0
    692c:	str	r9, [sp, #4]
    6930:	str	r5, [sp, #20]
    6934:	str	r4, [sp, #24]
    6938:	str	r8, [sp, #8]
    693c:	str	lr, [sp, #12]
    6940:	ldr	r2, [pc, #788]	; 6c5c <rb_des_init+0x518>
    6944:	mov	r4, #0
    6948:	mov	ip, #0
    694c:	mov	r9, #0
    6950:	add	r2, pc, r2
    6954:	add	r2, r2, lr, lsl #10
    6958:	str	r4, [r2, r3, lsl #2]!
    695c:	str	r2, [sp, #16]
    6960:	ldr	r2, [pc, #760]	; 6c60 <rb_des_init+0x51c>
    6964:	add	r2, pc, r2
    6968:	add	sl, r2, lr, lsl #10
    696c:	str	r4, [sl, r3, lsl #2]!
    6970:	ldr	r2, [pc, #748]	; 6c64 <rb_des_init+0x520>
    6974:	add	r2, pc, r2
    6978:	add	r6, r2, lr, lsl #10
    697c:	str	r4, [r6, r3, lsl #2]!
    6980:	ldr	r2, [pc, #736]	; 6c68 <rb_des_init+0x524>
    6984:	add	r2, pc, r2
    6988:	add	r5, r2, lr, lsl #10
    698c:	mov	r2, #0
    6990:	mov	lr, #0
    6994:	str	r4, [r5, r3, lsl #2]!
    6998:	ldrb	r7, [r0, r9]
    699c:	tst	r3, r7
    69a0:	beq	6a08 <rb_des_init+0x2c4>
    69a4:	ldr	r7, [sp, #20]
    69a8:	ldrb	r8, [r7, r9]
    69ac:	cmp	r8, #31
    69b0:	bhi	69c8 <rb_des_init+0x284>
    69b4:	ldr	r7, [r1, r8, lsl #2]
    69b8:	orr	lr, lr, r7
    69bc:	ldr	r7, [sp, #16]
    69c0:	str	lr, [r7]
    69c4:	b	69d8 <rb_des_init+0x294>
    69c8:	add	r7, r1, r8, lsl #2
    69cc:	ldr	r7, [r7, #-128]	; 0xffffff80
    69d0:	orr	ip, ip, r7
    69d4:	str	ip, [sl]
    69d8:	ldr	r7, [sp, #24]
    69dc:	ldrb	r7, [r7, r9]
    69e0:	cmp	r7, #31
    69e4:	bhi	69f8 <rb_des_init+0x2b4>
    69e8:	ldr	r7, [r1, r7, lsl #2]
    69ec:	orr	r4, r4, r7
    69f0:	str	r4, [r6]
    69f4:	b	6a08 <rb_des_init+0x2c4>
    69f8:	add	r7, r1, r7, lsl #2
    69fc:	ldr	r7, [r7, #-128]	; 0xffffff80
    6a00:	orr	r2, r2, r7
    6a04:	str	r2, [r5]
    6a08:	add	r9, r9, #1
    6a0c:	cmp	r9, #8
    6a10:	bne	6998 <rb_des_init+0x254>
    6a14:	ldr	lr, [sp, #12]
    6a18:	add	r3, r3, #1
    6a1c:	cmp	r3, #256	; 0x100
    6a20:	bne	6940 <rb_des_init+0x1fc>
    6a24:	ldr	r8, [sp, #8]
    6a28:	ldr	r9, [sp, #4]
    6a2c:	mov	ip, #0
    6a30:	mov	sl, #0
    6a34:	ldr	r2, [pc, #560]	; 6c6c <rb_des_init+0x528>
    6a38:	mov	r6, #0
    6a3c:	mov	r5, #0
    6a40:	mov	r4, #0
    6a44:	add	r2, pc, r2
    6a48:	add	r3, r2, lr, lsl #9
    6a4c:	str	ip, [r3, sl, lsl #2]!
    6a50:	ldr	r2, [pc, #536]	; 6c70 <rb_des_init+0x52c>
    6a54:	add	r2, pc, r2
    6a58:	add	r7, r2, lr, lsl #9
    6a5c:	str	ip, [r7, sl, lsl #2]!
    6a60:	b	6a94 <rb_des_init+0x350>
    6a64:	cmp	r2, #27
    6a68:	bhi	6a80 <rb_des_init+0x33c>
    6a6c:	add	r2, r1, r2, lsl #2
    6a70:	ldr	r2, [r2, #16]
    6a74:	orr	r5, r5, r2
    6a78:	str	r5, [r3]
    6a7c:	b	6aac <rb_des_init+0x368>
    6a80:	add	r2, r1, r2, lsl #2
    6a84:	ldr	r2, [r2, #-96]	; 0xffffffa0
    6a88:	orr	r4, r4, r2
    6a8c:	str	r4, [r7]
    6a90:	b	6aac <rb_des_init+0x368>
    6a94:	sub	r2, r0, r6
    6a98:	ldrb	r2, [r2, #1]
    6a9c:	tst	sl, r2
    6aa0:	ldrbne	r2, [r8, -r6]
    6aa4:	cmpne	r2, #255	; 0xff
    6aa8:	bne	6a64 <rb_des_init+0x320>
    6aac:	sub	r6, r6, #1
    6ab0:	cmn	r6, #7
    6ab4:	bne	6a94 <rb_des_init+0x350>
    6ab8:	ldr	r2, [pc, #436]	; 6c74 <rb_des_init+0x530>
    6abc:	mov	r7, #0
    6ac0:	mov	r5, #0
    6ac4:	mov	r4, #0
    6ac8:	add	r2, pc, r2
    6acc:	add	r3, r2, lr, lsl #9
    6ad0:	str	r7, [r3, sl, lsl #2]!
    6ad4:	ldr	r2, [pc, #412]	; 6c78 <rb_des_init+0x534>
    6ad8:	add	r2, pc, r2
    6adc:	add	r6, r2, lr, lsl #9
    6ae0:	str	r7, [r6, sl, lsl #2]!
    6ae4:	b	6b18 <rb_des_init+0x3d4>
    6ae8:	cmp	r2, #23
    6aec:	bhi	6b04 <rb_des_init+0x3c0>
    6af0:	add	r2, r1, r2, lsl #2
    6af4:	ldr	r2, [r2, #32]
    6af8:	orr	r5, r5, r2
    6afc:	str	r5, [r3]
    6b00:	b	6b30 <rb_des_init+0x3ec>
    6b04:	add	r2, r1, r2, lsl #2
    6b08:	ldr	r2, [r2, #-64]	; 0xffffffc0
    6b0c:	orr	r4, r4, r2
    6b10:	str	r4, [r6]
    6b14:	b	6b30 <rb_des_init+0x3ec>
    6b18:	sub	r2, r0, r7
    6b1c:	ldrb	r2, [r2, #1]
    6b20:	tst	sl, r2
    6b24:	ldrbne	r2, [r9, -r7]
    6b28:	cmpne	r2, #255	; 0xff
    6b2c:	bne	6ae8 <rb_des_init+0x3a4>
    6b30:	sub	r7, r7, #1
    6b34:	cmn	r7, #7
    6b38:	bne	6b18 <rb_des_init+0x3d4>
    6b3c:	add	sl, sl, #1
    6b40:	cmp	sl, #128	; 0x80
    6b44:	bne	6a34 <rb_des_init+0x2f0>
    6b48:	ldr	r5, [sp, #20]
    6b4c:	ldr	r4, [sp, #24]
    6b50:	add	lr, lr, #1
    6b54:	add	r9, r9, #7
    6b58:	add	r8, r8, #8
    6b5c:	cmp	lr, #8
    6b60:	add	r5, r5, #8
    6b64:	add	r4, r4, #8
    6b68:	bne	6928 <rb_des_init+0x1e4>
    6b6c:	ldr	r7, [pc, #264]	; 6c7c <rb_des_init+0x538>
    6b70:	ldr	r2, [pc, #264]	; 6c80 <rb_des_init+0x53c>
    6b74:	mov	r3, #0
    6b78:	add	r7, pc, r7
    6b7c:	add	r2, pc, r2
    6b80:	ldrb	r6, [r7, r3]
    6b84:	add	r6, r2, r6
    6b88:	strb	r3, [r6, #-1]
    6b8c:	add	r3, r3, #1
    6b90:	cmp	r3, #32
    6b94:	bne	6b80 <rb_des_init+0x43c>
    6b98:	ldr	ip, [pc, #228]	; 6c84 <rb_des_init+0x540>
    6b9c:	mov	lr, #0
    6ba0:	add	ip, pc, ip
    6ba4:	mov	r6, #0
    6ba8:	add	r5, ip, lr, lsl #10
    6bac:	mov	r4, #0
    6bb0:	mov	r7, #0
    6bb4:	str	r4, [r5, r6, lsl #2]!
    6bb8:	ldrb	r3, [r0, r7]
    6bbc:	tst	r6, r3
    6bc0:	ldrbne	r3, [r2, r7]
    6bc4:	add	r7, r7, #1
    6bc8:	ldrne	r3, [r1, r3, lsl #2]
    6bcc:	orrne	r4, r4, r3
    6bd0:	strne	r4, [r5]
    6bd4:	cmp	r7, #8
    6bd8:	bne	6bb8 <rb_des_init+0x474>
    6bdc:	add	r6, r6, #1
    6be0:	cmp	r6, #256	; 0x100
    6be4:	bne	6ba8 <rb_des_init+0x464>
    6be8:	add	lr, lr, #1
    6bec:	add	r2, r2, #8
    6bf0:	cmp	lr, #4
    6bf4:	bne	6ba4 <rb_des_init+0x460>
    6bf8:	ldr	r1, [pc, #136]	; 6c88 <rb_des_init+0x544>
    6bfc:	mov	r0, #1
    6c00:	add	r1, pc, r1
    6c04:	strb	r0, [r1]
    6c08:	sub	sp, fp, #28
    6c0c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6c10:	bx	lr
    6c14:	.word	0x00022d88
    6c18:	.word	0x00022d6c
    6c1c:	.word	0x00022d5c
    6c20:	.word	0x00022d58
    6c24:	.word	0x00022d50
    6c28:	.word	0x00022d44
    6c2c:	.word	0x0000eb54
    6c30:	.word	0x00022ce8
    6c34:	.word	0x00022ee4
    6c38:	.word	0x00026efc
    6c3c:	.word	0x0000ec70
    6c40:	.word	0x00026e98
    6c44:	.word	0x00026e54
    6c48:	.word	0x00026ee8
    6c4c:	.word	0x0000ec64
    6c50:	.word	0x0000ec78
    6c54:	.word	0x0000f0e0
    6c58:	.word	0x0000e954
    6c5c:	.word	0x00026e90
    6c60:	.word	0x00028e7c
    6c64:	.word	0x0002ae6c
    6c68:	.word	0x0002ce5c
    6c6c:	.word	0x0002ed9c
    6c70:	.word	0x0002fd8c
    6c74:	.word	0x00030d18
    6c78:	.word	0x00031d08
    6c7c:	.word	0x0000ee90
    6c80:	.word	0x00032c64
    6c84:	.word	0x00032c60
    6c88:	.word	0x000228d0

00006c8c <MD5Update>:
    6c8c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
    6c90:	add	fp, sp, #24
    6c94:	mov	r4, r2
    6c98:	ldr	r2, [r0, #16]
    6c9c:	mov	r5, r1
    6ca0:	ldr	r1, [r0, #20]
    6ca4:	mov	r6, r0
    6ca8:	add	r3, r2, r4, lsl #3
    6cac:	cmp	r3, r2
    6cb0:	str	r3, [r0, #16]
    6cb4:	ubfx	r0, r2, #3, #6
    6cb8:	addcc	r1, r1, #1
    6cbc:	rsb	r7, r0, #64	; 0x40
    6cc0:	strcc	r1, [r6, #20]
    6cc4:	add	r1, r1, r4, lsr #29
    6cc8:	cmp	r7, r4
    6ccc:	str	r1, [r6, #20]
    6cd0:	add	r1, r6, r0
    6cd4:	mov	r0, #0
    6cd8:	add	r8, r1, #24
    6cdc:	bhi	6d34 <MD5Update+0xa8>
    6ce0:	mov	r0, r8
    6ce4:	mov	r1, r5
    6ce8:	mov	r2, r7
    6cec:	bl	5114 <memcpy@plt>
    6cf0:	add	r8, r6, #24
    6cf4:	mov	r0, r6
    6cf8:	mov	r1, r8
    6cfc:	bl	6dc0 <MD5Transform>
    6d00:	add	r0, r7, #63	; 0x3f
    6d04:	cmp	r0, r4
    6d08:	bcs	6d30 <MD5Update+0xa4>
    6d0c:	add	r1, r5, r7
    6d10:	mov	r0, r6
    6d14:	bl	6dc0 <MD5Transform>
    6d18:	add	r1, r7, #127	; 0x7f
    6d1c:	add	r0, r7, #64	; 0x40
    6d20:	cmp	r1, r4
    6d24:	mov	r7, r0
    6d28:	bcc	6d0c <MD5Update+0x80>
    6d2c:	b	6d34 <MD5Update+0xa8>
    6d30:	mov	r0, r7
    6d34:	add	r1, r5, r0
    6d38:	sub	r2, r4, r0
    6d3c:	mov	r0, r8
    6d40:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
    6d44:	b	5114 <memcpy@plt>

00006d48 <MD5Final>:
    6d48:	push	{r4, r5, fp, lr}
    6d4c:	add	fp, sp, #8
    6d50:	sub	sp, sp, #8
    6d54:	mov	r5, r0
    6d58:	mov	r4, r1
    6d5c:	ldr	r0, [r1, #16]
    6d60:	ldr	r1, [r1, #20]
    6d64:	stm	sp, {r0, r1}
    6d68:	ubfx	r0, r0, #3, #6
    6d6c:	mov	r1, #120	; 0x78
    6d70:	cmp	r0, #56	; 0x38
    6d74:	movwcc	r1, #56	; 0x38
    6d78:	sub	r2, r1, r0
    6d7c:	ldr	r1, [pc, #56]	; 6dbc <MD5Final+0x74>
    6d80:	mov	r0, r4
    6d84:	add	r1, pc, r1
    6d88:	bl	6c8c <MD5Update>
    6d8c:	mov	r1, sp
    6d90:	mov	r0, r4
    6d94:	mov	r2, #8
    6d98:	bl	6c8c <MD5Update>
    6d9c:	vld1.8	{d16-d17}, [r4]
    6da0:	mov	r0, r4
    6da4:	mov	r1, #0
    6da8:	mov	r2, #88	; 0x58
    6dac:	vst1.8	{d16-d17}, [r5]
    6db0:	sub	sp, fp, #8
    6db4:	pop	{r4, r5, fp, lr}
    6db8:	b	4f4c <memset@plt>
    6dbc:	.word	0x00021684

00006dc0 <MD5Transform>:
    6dc0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6dc4:	add	fp, sp, #28
    6dc8:	sub	sp, sp, #84	; 0x54
    6dcc:	mov	ip, r1
    6dd0:	ldr	r4, [r0, #4]
    6dd4:	ldr	r2, [r0, #12]
    6dd8:	ldr	r1, [r0, #8]
    6ddc:	ldr	r5, [r0]
    6de0:	str	r0, [sp, #16]
    6de4:	ldr	r9, [ip, #4]
    6de8:	ldr	lr, [ip, #8]
    6dec:	ldr	r8, [ip, #12]
    6df0:	and	r0, r1, r4
    6df4:	bic	r3, r2, r4
    6df8:	str	r5, [sp, #24]
    6dfc:	str	r1, [sp, #32]
    6e00:	str	r4, [sp, #20]
    6e04:	str	r2, [sp, #28]
    6e08:	orr	r0, r3, r0
    6e0c:	ldr	r3, [ip]
    6e10:	str	r8, [fp, #-44]	; 0xffffffd4
    6e14:	str	lr, [fp, #-52]	; 0xffffffcc
    6e18:	str	r9, [fp, #-48]	; 0xffffffd0
    6e1c:	str	r3, [fp, #-36]	; 0xffffffdc
    6e20:	add	r3, r5, r3
    6e24:	add	r0, r3, r0
    6e28:	movw	r3, #42104	; 0xa478
    6e2c:	movt	r3, #55146	; 0xd76a
    6e30:	add	r0, r0, r3
    6e34:	add	r0, r4, r0, ror #25
    6e38:	bic	r3, r1, r0
    6e3c:	and	r7, r0, r4
    6e40:	orr	r3, r7, r3
    6e44:	add	r7, r2, r9
    6e48:	add	r3, r7, r3
    6e4c:	movw	r7, #46934	; 0xb756
    6e50:	movt	r7, #59591	; 0xe8c7
    6e54:	add	r3, r3, r7
    6e58:	add	r3, r0, r3, ror #20
    6e5c:	bic	r7, r4, r3
    6e60:	and	r6, r3, r0
    6e64:	orr	r7, r6, r7
    6e68:	add	r6, r1, lr
    6e6c:	ldr	r1, [ip, #16]
    6e70:	ldr	lr, [ip, #44]	; 0x2c
    6e74:	add	r7, r6, r7
    6e78:	movw	r6, #28891	; 0x70db
    6e7c:	movt	r6, #9248	; 0x2420
    6e80:	add	r7, r7, r6
    6e84:	add	r7, r3, r7, ror #15
    6e88:	str	r1, [sp, #48]	; 0x30
    6e8c:	str	lr, [fp, #-40]	; 0xffffffd8
    6e90:	bic	r6, r0, r7
    6e94:	and	r5, r7, r3
    6e98:	add	r0, r1, r0
    6e9c:	ldr	r1, [ip, #20]
    6ea0:	orr	r6, r5, r6
    6ea4:	add	r5, r4, r8
    6ea8:	ldr	r8, [ip, #24]
    6eac:	add	r6, r5, r6
    6eb0:	movw	r5, #52974	; 0xceee
    6eb4:	movt	r5, #49597	; 0xc1bd
    6eb8:	add	r6, r6, r5
    6ebc:	str	r1, [sp, #36]	; 0x24
    6ec0:	add	r4, r7, r6, ror #10
    6ec4:	str	r8, [sp, #12]
    6ec8:	bic	r6, r3, r4
    6ecc:	and	r5, r4, r7
    6ed0:	add	r3, r1, r3
    6ed4:	ldr	r1, [ip, #28]
    6ed8:	orr	r6, r5, r6
    6edc:	add	r0, r0, r6
    6ee0:	movw	r6, #4015	; 0xfaf
    6ee4:	movt	r6, #62844	; 0xf57c
    6ee8:	add	r0, r0, r6
    6eec:	str	r1, [sp, #52]	; 0x34
    6ef0:	add	r0, r4, r0, ror #25
    6ef4:	bic	r6, r7, r0
    6ef8:	and	r5, r0, r4
    6efc:	add	r7, r8, r7
    6f00:	orr	r5, r5, r6
    6f04:	add	r3, r3, r5
    6f08:	movw	r5, #50730	; 0xc62a
    6f0c:	movt	r5, #18311	; 0x4787
    6f10:	add	r3, r3, r5
    6f14:	add	r3, r0, r3, ror #20
    6f18:	bic	r5, r4, r3
    6f1c:	and	r6, r3, r0
    6f20:	add	r4, r1, r4
    6f24:	ldr	r1, [ip, #32]
    6f28:	orr	r5, r6, r5
    6f2c:	add	r7, r7, r5
    6f30:	movw	r5, #17939	; 0x4613
    6f34:	movt	r5, #43056	; 0xa830
    6f38:	add	r7, r7, r5
    6f3c:	str	r1, [sp, #44]	; 0x2c
    6f40:	add	r5, r3, r7, ror #15
    6f44:	bic	r7, r0, r5
    6f48:	and	r6, r5, r3
    6f4c:	add	r0, r1, r0
    6f50:	ldr	r1, [ip, #36]	; 0x24
    6f54:	orr	r6, r6, r7
    6f58:	add	r4, r4, r6
    6f5c:	movw	r6, #38145	; 0x9501
    6f60:	movt	r6, #64838	; 0xfd46
    6f64:	add	r4, r4, r6
    6f68:	str	r1, [fp, #-32]	; 0xffffffe0
    6f6c:	add	r6, r5, r4, ror #10
    6f70:	bic	r4, r3, r6
    6f74:	and	r7, r6, r5
    6f78:	add	r3, r1, r3
    6f7c:	ldr	r1, [ip, #40]	; 0x28
    6f80:	orr	r4, r7, r4
    6f84:	add	r0, r0, r4
    6f88:	movw	r4, #39128	; 0x98d8
    6f8c:	movt	r4, #27008	; 0x6980
    6f90:	add	r0, r0, r4
    6f94:	str	r1, [sp, #56]	; 0x38
    6f98:	add	r0, r6, r0, ror #25
    6f9c:	bic	r4, r5, r0
    6fa0:	and	r7, r0, r6
    6fa4:	add	r5, r1, r5
    6fa8:	orr	r4, r7, r4
    6fac:	add	r3, r3, r4
    6fb0:	movw	r4, #63407	; 0xf7af
    6fb4:	movt	r4, #35652	; 0x8b44
    6fb8:	add	r3, r3, r4
    6fbc:	add	r3, r0, r3, ror #20
    6fc0:	bic	r4, r6, r3
    6fc4:	and	r7, r3, r0
    6fc8:	add	r6, lr, r6
    6fcc:	orr	r7, r7, r4
    6fd0:	ldr	r4, [ip, #48]	; 0x30
    6fd4:	add	r5, r5, r7
    6fd8:	movw	r7, #42063	; 0xa44f
    6fdc:	sub	r5, r5, r7
    6fe0:	add	r1, r3, r5, ror #15
    6fe4:	bic	r5, r0, r1
    6fe8:	and	r7, r1, r3
    6fec:	add	r0, r4, r0
    6ff0:	str	r4, [sp, #4]
    6ff4:	ldr	r4, [ip, #52]	; 0x34
    6ff8:	orr	r5, r7, r5
    6ffc:	add	r5, r6, r5
    7000:	movw	r6, #55230	; 0xd7be
    7004:	movt	r6, #35164	; 0x895c
    7008:	add	r5, r5, r6
    700c:	str	r4, [sp, #40]	; 0x28
    7010:	add	r2, r1, r5, ror #10
    7014:	bic	r5, r3, r2
    7018:	and	r6, r2, r1
    701c:	add	r3, r4, r3
    7020:	ldr	r4, [ip, #56]	; 0x38
    7024:	orr	r5, r6, r5
    7028:	add	r0, r0, r5
    702c:	movw	r5, #4386	; 0x1122
    7030:	movt	r5, #27536	; 0x6b90
    7034:	add	r0, r0, r5
    7038:	add	r0, r2, r0, ror #25
    703c:	bic	r5, r1, r0
    7040:	and	r7, r0, r2
    7044:	add	r1, r4, r1
    7048:	orr	r7, r7, r5
    704c:	add	r3, r3, r7
    7050:	movw	r7, #29075	; 0x7193
    7054:	movt	r7, #64920	; 0xfd98
    7058:	add	r3, r3, r7
    705c:	add	r7, r0, r3, ror #20
    7060:	bic	r3, r2, r7
    7064:	and	sl, r7, r0
    7068:	orr	r3, sl, r3
    706c:	mov	sl, r4
    7070:	add	r1, r1, r3
    7074:	movw	r3, #17294	; 0x438e
    7078:	str	sl, [sp]
    707c:	movt	r3, #42617	; 0xa679
    7080:	add	r1, r1, r3
    7084:	add	r3, r7, r1, ror #15
    7088:	bic	r1, r0, r3
    708c:	and	r5, r3, r7
    7090:	bic	r4, r3, r7
    7094:	add	r0, r9, r0
    7098:	ldr	r9, [sp, #36]	; 0x24
    709c:	orr	r5, r5, r1
    70a0:	ldr	r1, [ip, #60]	; 0x3c
    70a4:	ldr	ip, [sp, #48]	; 0x30
    70a8:	add	r2, r1, r2
    70ac:	mov	r6, r1
    70b0:	str	r1, [sp, #8]
    70b4:	ldr	r1, [fp, #-36]	; 0xffffffdc
    70b8:	add	r2, r2, r5
    70bc:	movw	r5, #2081	; 0x821
    70c0:	movt	r5, #18868	; 0x49b4
    70c4:	add	r2, r2, r5
    70c8:	add	r2, r3, r2, ror #10
    70cc:	and	r5, r2, r7
    70d0:	add	r7, r8, r7
    70d4:	ldr	r8, [sp, #44]	; 0x2c
    70d8:	orr	r5, r5, r4
    70dc:	bic	r4, r2, r3
    70e0:	add	r0, r0, r5
    70e4:	movw	r5, #9570	; 0x2562
    70e8:	movt	r5, #63006	; 0xf61e
    70ec:	add	r0, r0, r5
    70f0:	add	r0, r2, r0, ror #27
    70f4:	and	r5, r0, r3
    70f8:	add	r3, lr, r3
    70fc:	mov	lr, sl
    7100:	orr	r5, r5, r4
    7104:	bic	r4, r0, r2
    7108:	add	r7, r7, r5
    710c:	movw	r5, #45888	; 0xb340
    7110:	movt	r5, #49216	; 0xc040
    7114:	add	r7, r7, r5
    7118:	add	r7, r0, r7, ror #23
    711c:	and	r5, r7, r2
    7120:	add	r2, r1, r2
    7124:	ldr	r1, [sp, #56]	; 0x38
    7128:	orr	r5, r5, r4
    712c:	bic	r4, r7, r0
    7130:	add	r3, r3, r5
    7134:	movw	r5, #23121	; 0x5a51
    7138:	movt	r5, #9822	; 0x265e
    713c:	add	r3, r3, r5
    7140:	add	r3, r7, r3, ror #18
    7144:	and	r5, r3, r0
    7148:	add	r0, r9, r0
    714c:	orr	r5, r5, r4
    7150:	bic	r4, r3, r7
    7154:	add	r2, r2, r5
    7158:	movw	r5, #51114	; 0xc7aa
    715c:	movt	r5, #59830	; 0xe9b6
    7160:	add	r2, r2, r5
    7164:	add	r2, r3, r2, ror #12
    7168:	and	r5, r2, r7
    716c:	add	r7, r1, r7
    7170:	ldr	r1, [fp, #-32]	; 0xffffffe0
    7174:	orr	r5, r5, r4
    7178:	bic	r4, r2, r3
    717c:	add	r0, r0, r5
    7180:	movw	r5, #4189	; 0x105d
    7184:	movt	r5, #54831	; 0xd62f
    7188:	add	r0, r0, r5
    718c:	add	r0, r2, r0, ror #27
    7190:	and	r5, r0, r3
    7194:	add	r3, r6, r3
    7198:	ldr	r6, [sp, #4]
    719c:	orr	r5, r5, r4
    71a0:	bic	r4, r0, r2
    71a4:	add	r7, r7, r5
    71a8:	movw	r5, #5203	; 0x1453
    71ac:	movt	r5, #580	; 0x244
    71b0:	add	r7, r7, r5
    71b4:	add	r7, r0, r7, ror #23
    71b8:	and	r5, r7, r2
    71bc:	add	r2, ip, r2
    71c0:	orr	r5, r5, r4
    71c4:	bic	r4, r7, r0
    71c8:	add	r3, r3, r5
    71cc:	movw	r5, #59009	; 0xe681
    71d0:	movt	r5, #55457	; 0xd8a1
    71d4:	add	r3, r3, r5
    71d8:	add	r3, r7, r3, ror #18
    71dc:	and	r5, r3, r0
    71e0:	add	r0, r1, r0
    71e4:	ldr	r1, [fp, #-44]	; 0xffffffd4
    71e8:	orr	r5, r5, r4
    71ec:	bic	r4, r3, r7
    71f0:	add	r2, r2, r5
    71f4:	movw	r5, #64456	; 0xfbc8
    71f8:	movt	r5, #59347	; 0xe7d3
    71fc:	add	r2, r2, r5
    7200:	add	r2, r3, r2, ror #12
    7204:	and	r5, r2, r7
    7208:	add	r7, sl, r7
    720c:	ldr	sl, [sp, #40]	; 0x28
    7210:	orr	r5, r5, r4
    7214:	bic	r4, r2, r3
    7218:	add	r0, r0, r5
    721c:	movw	r5, #52710	; 0xcde6
    7220:	movt	r5, #8673	; 0x21e1
    7224:	add	r0, r0, r5
    7228:	add	r0, r2, r0, ror #27
    722c:	and	r5, r0, r3
    7230:	add	r3, r1, r3
    7234:	ldr	r1, [fp, #-52]	; 0xffffffcc
    7238:	orr	r5, r5, r4
    723c:	bic	r4, r0, r2
    7240:	add	r7, r7, r5
    7244:	movw	r5, #2006	; 0x7d6
    7248:	movt	r5, #49975	; 0xc337
    724c:	add	r7, r7, r5
    7250:	add	r7, r0, r7, ror #23
    7254:	and	r5, r7, r2
    7258:	add	r2, r8, r2
    725c:	orr	r5, r5, r4
    7260:	bic	r4, r7, r0
    7264:	add	r3, r3, r5
    7268:	movw	r5, #3463	; 0xd87
    726c:	movt	r5, #62677	; 0xf4d5
    7270:	add	r3, r3, r5
    7274:	add	r3, r7, r3, ror #18
    7278:	and	r5, r3, r0
    727c:	add	r0, sl, r0
    7280:	orr	r5, r5, r4
    7284:	bic	r4, r3, r7
    7288:	add	r2, r2, r5
    728c:	movw	r5, #5357	; 0x14ed
    7290:	movt	r5, #17754	; 0x455a
    7294:	add	r2, r2, r5
    7298:	add	r2, r3, r2, ror #12
    729c:	and	r5, r2, r7
    72a0:	add	r7, r1, r7
    72a4:	ldr	r1, [sp, #52]	; 0x34
    72a8:	orr	r5, r5, r4
    72ac:	bic	r4, r2, r3
    72b0:	add	r0, r0, r5
    72b4:	movw	r5, #59653	; 0xe905
    72b8:	movt	r5, #43491	; 0xa9e3
    72bc:	add	r0, r0, r5
    72c0:	add	r0, r2, r0, ror #27
    72c4:	and	r5, r0, r3
    72c8:	add	r3, r1, r3
    72cc:	orr	r5, r5, r4
    72d0:	bic	r4, r0, r2
    72d4:	add	r7, r7, r5
    72d8:	movw	r5, #41976	; 0xa3f8
    72dc:	movt	r5, #64751	; 0xfcef
    72e0:	add	r7, r7, r5
    72e4:	add	r7, r0, r7, ror #23
    72e8:	and	r5, r7, r2
    72ec:	add	r2, r6, r2
    72f0:	orr	r5, r5, r4
    72f4:	bic	r4, r7, r0
    72f8:	add	r3, r3, r5
    72fc:	movw	r5, #729	; 0x2d9
    7300:	movt	r5, #26479	; 0x676f
    7304:	add	r3, r3, r5
    7308:	add	r3, r7, r3, ror #18
    730c:	and	r5, r3, r0
    7310:	add	r0, r9, r0
    7314:	ldr	r9, [sp, #12]
    7318:	orr	r5, r5, r4
    731c:	add	r2, r2, r5
    7320:	movw	r5, #19594	; 0x4c8a
    7324:	movt	r5, #36138	; 0x8d2a
    7328:	add	r2, r2, r5
    732c:	add	r2, r3, r2, ror #12
    7330:	eor	r5, r2, r3
    7334:	eor	r4, r5, r7
    7338:	add	r7, r8, r7
    733c:	ldr	r8, [sp, #56]	; 0x38
    7340:	add	r0, r0, r4
    7344:	movw	r4, #14658	; 0x3942
    7348:	movt	r4, #65530	; 0xfffa
    734c:	add	r0, r0, r4
    7350:	ldr	r4, [fp, #-40]	; 0xffffffd8
    7354:	add	r0, r2, r0, ror #28
    7358:	eor	r5, r5, r0
    735c:	add	r7, r7, r5
    7360:	movw	r5, #63105	; 0xf681
    7364:	movt	r5, #34673	; 0x8771
    7368:	add	r3, r4, r3
    736c:	ldr	r4, [fp, #-48]	; 0xffffffd0
    7370:	add	r7, r7, r5
    7374:	eor	r5, r0, r2
    7378:	add	r2, lr, r2
    737c:	ldr	lr, [sp, #8]
    7380:	add	r7, r0, r7, ror #21
    7384:	eor	r5, r5, r7
    7388:	add	r3, r3, r5
    738c:	movw	r5, #24866	; 0x6122
    7390:	movt	r5, #28061	; 0x6d9d
    7394:	add	r3, r3, r5
    7398:	eor	r5, r7, r0
    739c:	add	r0, r4, r0
    73a0:	ldr	r4, [fp, #-36]	; 0xffffffdc
    73a4:	add	r3, r7, r3, ror #16
    73a8:	eor	r5, r5, r3
    73ac:	add	r2, r2, r5
    73b0:	movw	r5, #14348	; 0x380c
    73b4:	movt	r5, #64997	; 0xfde5
    73b8:	add	r2, r2, r5
    73bc:	eor	r5, r3, r7
    73c0:	add	r7, ip, r7
    73c4:	ldr	ip, [fp, #-44]	; 0xffffffd4
    73c8:	add	r2, r3, r2, ror #9
    73cc:	eor	r5, r5, r2
    73d0:	add	r0, r0, r5
    73d4:	movw	r5, #59972	; 0xea44
    73d8:	movt	r5, #42174	; 0xa4be
    73dc:	add	r0, r0, r5
    73e0:	eor	r5, r2, r3
    73e4:	add	r3, r1, r3
    73e8:	ldr	r1, [fp, #-32]	; 0xffffffe0
    73ec:	add	r0, r2, r0, ror #28
    73f0:	eor	r5, r5, r0
    73f4:	add	r7, r7, r5
    73f8:	movw	r5, #53161	; 0xcfa9
    73fc:	movt	r5, #19422	; 0x4bde
    7400:	add	r7, r7, r5
    7404:	eor	r5, r0, r2
    7408:	add	r2, r8, r2
    740c:	add	r7, r0, r7, ror #21
    7410:	eor	r5, r5, r7
    7414:	add	r3, r3, r5
    7418:	movw	r5, #19296	; 0x4b60
    741c:	movt	r5, #63163	; 0xf6bb
    7420:	add	r3, r3, r5
    7424:	eor	r5, r7, r0
    7428:	add	r0, sl, r0
    742c:	ldr	sl, [fp, #-52]	; 0xffffffcc
    7430:	add	r3, r7, r3, ror #16
    7434:	eor	r5, r5, r3
    7438:	add	r2, r2, r5
    743c:	movw	r5, #48240	; 0xbc70
    7440:	movt	r5, #48831	; 0xbebf
    7444:	add	r2, r2, r5
    7448:	eor	r5, r3, r7
    744c:	add	r7, r4, r7
    7450:	add	r2, r3, r2, ror #9
    7454:	eor	r5, r5, r2
    7458:	add	r0, r0, r5
    745c:	movw	r5, #32454	; 0x7ec6
    7460:	movt	r5, #10395	; 0x289b
    7464:	add	r0, r0, r5
    7468:	eor	r5, r2, r3
    746c:	add	r3, ip, r3
    7470:	add	r0, r2, r0, ror #28
    7474:	eor	r5, r5, r0
    7478:	add	r7, r7, r5
    747c:	movw	r5, #10234	; 0x27fa
    7480:	movt	r5, #60065	; 0xeaa1
    7484:	add	r7, r7, r5
    7488:	eor	r5, r0, r2
    748c:	add	r2, r9, r2
    7490:	add	r7, r0, r7, ror #21
    7494:	eor	r5, r5, r7
    7498:	add	r3, r3, r5
    749c:	movw	r5, #12421	; 0x3085
    74a0:	movt	r5, #54511	; 0xd4ef
    74a4:	add	r3, r3, r5
    74a8:	eor	r5, r7, r0
    74ac:	add	r0, r1, r0
    74b0:	ldr	r1, [sp, #52]	; 0x34
    74b4:	add	r3, r7, r3, ror #16
    74b8:	eor	r5, r5, r3
    74bc:	add	r2, r2, r5
    74c0:	movw	r5, #7429	; 0x1d05
    74c4:	movt	r5, #1160	; 0x488
    74c8:	add	r2, r2, r5
    74cc:	eor	r5, r3, r7
    74d0:	add	r7, r6, r7
    74d4:	add	r2, r3, r2, ror #9
    74d8:	eor	r5, r5, r2
    74dc:	add	r0, r0, r5
    74e0:	movw	r5, #53305	; 0xd039
    74e4:	movt	r5, #55764	; 0xd9d4
    74e8:	add	r0, r0, r5
    74ec:	eor	r5, r2, r3
    74f0:	add	r3, lr, r3
    74f4:	add	r0, r2, r0, ror #28
    74f8:	eor	r5, r5, r0
    74fc:	add	r7, r7, r5
    7500:	movw	r5, #39397	; 0x99e5
    7504:	movt	r5, #59099	; 0xe6db
    7508:	add	r7, r7, r5
    750c:	eor	r5, r0, r2
    7510:	add	r2, sl, r2
    7514:	add	r7, r0, r7, ror #21
    7518:	eor	r5, r5, r7
    751c:	add	r3, r3, r5
    7520:	movw	r5, #31992	; 0x7cf8
    7524:	movt	r5, #8098	; 0x1fa2
    7528:	add	r3, r3, r5
    752c:	eor	r5, r7, r0
    7530:	add	r0, r4, r0
    7534:	add	r3, r7, r3, ror #16
    7538:	eor	r5, r5, r3
    753c:	add	r2, r2, r5
    7540:	movw	r5, #22117	; 0x5665
    7544:	movt	r5, #50348	; 0xc4ac
    7548:	add	r2, r2, r5
    754c:	mvn	r5, r7
    7550:	add	r7, r1, r7
    7554:	ldr	r1, [sp]
    7558:	add	r2, r3, r2, ror #9
    755c:	orr	r5, r2, r5
    7560:	eor	r5, r5, r3
    7564:	add	r0, r0, r5
    7568:	movw	r5, #8772	; 0x2244
    756c:	movt	r5, #62505	; 0xf429
    7570:	add	r0, r0, r5
    7574:	mvn	r5, r3
    7578:	add	r3, r1, r3
    757c:	ldr	r1, [sp, #36]	; 0x24
    7580:	add	r0, r2, r0, ror #26
    7584:	orr	r5, r0, r5
    7588:	eor	r5, r5, r2
    758c:	add	r7, r7, r5
    7590:	movw	r5, #65431	; 0xff97
    7594:	movt	r5, #17194	; 0x432a
    7598:	add	r7, r7, r5
    759c:	mvn	r5, r2
    75a0:	add	r2, r1, r2
    75a4:	ldr	r1, [fp, #-48]	; 0xffffffd0
    75a8:	add	r7, r0, r7, ror #22
    75ac:	orr	r5, r7, r5
    75b0:	eor	r5, r5, r0
    75b4:	add	r3, r3, r5
    75b8:	movw	r5, #9127	; 0x23a7
    75bc:	movt	r5, #43924	; 0xab94
    75c0:	add	r3, r3, r5
    75c4:	mvn	r5, r0
    75c8:	add	r0, r6, r0
    75cc:	movw	r6, #22979	; 0x59c3
    75d0:	add	r3, r7, r3, ror #17
    75d4:	movt	r6, #25947	; 0x655b
    75d8:	orr	r5, r3, r5
    75dc:	eor	r5, r5, r7
    75e0:	add	r2, r2, r5
    75e4:	movw	r5, #41017	; 0xa039
    75e8:	movt	r5, #64659	; 0xfc93
    75ec:	add	r2, r2, r5
    75f0:	mvn	r5, r7
    75f4:	add	r7, ip, r7
    75f8:	add	r2, r3, r2, ror #11
    75fc:	orr	r5, r2, r5
    7600:	eor	r5, r5, r3
    7604:	add	r0, r0, r5
    7608:	ldr	r5, [fp, #-40]	; 0xffffffd8
    760c:	add	r0, r0, r6
    7610:	mvn	r6, r3
    7614:	add	r3, r8, r3
    7618:	add	r0, r2, r0, ror #26
    761c:	orr	r6, r0, r6
    7620:	eor	r6, r6, r2
    7624:	add	r7, r7, r6
    7628:	movw	r6, #52370	; 0xcc92
    762c:	movt	r6, #36620	; 0x8f0c
    7630:	add	r7, r7, r6
    7634:	mvn	r6, r2
    7638:	add	r2, r1, r2
    763c:	ldr	r1, [sp, #44]	; 0x2c
    7640:	add	r7, r0, r7, ror #22
    7644:	orr	r6, r7, r6
    7648:	eor	r6, r6, r0
    764c:	add	r3, r3, r6
    7650:	movw	r6, #62589	; 0xf47d
    7654:	movt	r6, #65519	; 0xffef
    7658:	add	r3, r3, r6
    765c:	mvn	r6, r0
    7660:	add	r0, r1, r0
    7664:	add	r1, lr, r7
    7668:	add	r3, r7, r3, ror #17
    766c:	orr	r6, r3, r6
    7670:	eor	r6, r6, r7
    7674:	add	r2, r2, r6
    7678:	movw	r6, #24017	; 0x5dd1
    767c:	movt	r6, #34180	; 0x8584
    7680:	add	r2, r2, r6
    7684:	mvn	r6, r7
    7688:	ldr	r7, [sp, #40]	; 0x28
    768c:	add	r2, r3, r2, ror #11
    7690:	orr	r6, r2, r6
    7694:	eor	r6, r6, r3
    7698:	add	r0, r0, r6
    769c:	movw	r6, #32335	; 0x7e4f
    76a0:	movt	r6, #28584	; 0x6fa8
    76a4:	add	r0, r0, r6
    76a8:	add	r6, r2, r0, ror #26
    76ac:	mvn	r0, r3
    76b0:	add	r3, r9, r3
    76b4:	orr	r0, r6, r0
    76b8:	eor	r0, r0, r2
    76bc:	add	r0, r1, r0
    76c0:	movw	r1, #59104	; 0xe6e0
    76c4:	movt	r1, #65068	; 0xfe2c
    76c8:	add	r0, r0, r1
    76cc:	add	r1, r6, r0, ror #22
    76d0:	mvn	r0, r2
    76d4:	add	r2, r7, r2
    76d8:	ldr	r7, [sp, #48]	; 0x30
    76dc:	orr	r0, r1, r0
    76e0:	eor	r0, r0, r6
    76e4:	add	r0, r3, r0
    76e8:	movw	r3, #17172	; 0x4314
    76ec:	movt	r3, #41729	; 0xa301
    76f0:	add	r7, r7, r6
    76f4:	add	r0, r0, r3
    76f8:	add	r3, r1, r0, ror #17
    76fc:	mvn	r0, r6
    7700:	ldr	r6, [sp, #16]
    7704:	orr	r0, r3, r0
    7708:	eor	r0, r0, r1
    770c:	add	r0, r2, r0
    7710:	movw	r2, #4513	; 0x11a1
    7714:	movt	r2, #19976	; 0x4e08
    7718:	add	r0, r0, r2
    771c:	mvn	r2, r1
    7720:	add	r1, r5, r1
    7724:	add	r0, r3, r0, ror #11
    7728:	orr	r2, r0, r2
    772c:	eor	r2, r2, r3
    7730:	add	r2, r7, r2
    7734:	movw	r7, #32386	; 0x7e82
    7738:	movt	r7, #63315	; 0xf753
    773c:	add	r2, r2, r7
    7740:	ldr	r7, [sp, #24]
    7744:	add	r2, r0, r2, ror #26
    7748:	add	r7, r2, r7
    774c:	str	r7, [r6]
    7750:	mvn	r7, r3
    7754:	add	r3, sl, r3
    7758:	orr	r7, r2, r7
    775c:	eor	r7, r7, r0
    7760:	add	r1, r1, r7
    7764:	movw	r7, #62005	; 0xf235
    7768:	movt	r7, #48442	; 0xbd3a
    776c:	add	r1, r1, r7
    7770:	ldr	r7, [sp, #28]
    7774:	add	r1, r2, r1, ror #22
    7778:	add	r7, r1, r7
    777c:	str	r7, [r6, #12]
    7780:	mvn	r7, r0
    7784:	orr	r7, r1, r7
    7788:	eor	r7, r7, r2
    778c:	mvn	r2, r2
    7790:	add	r3, r3, r7
    7794:	movw	r7, #53947	; 0xd2bb
    7798:	movt	r7, #10967	; 0x2ad7
    779c:	add	r3, r3, r7
    77a0:	ldr	r7, [sp, #32]
    77a4:	add	r3, r1, r3, ror #17
    77a8:	orr	r2, r3, r2
    77ac:	eor	r1, r2, r1
    77b0:	ldr	r2, [fp, #-32]	; 0xffffffe0
    77b4:	add	r7, r3, r7
    77b8:	str	r7, [r6, #8]
    77bc:	ldr	r7, [sp, #20]
    77c0:	add	r0, r2, r0
    77c4:	add	r0, r0, r1
    77c8:	movw	r1, #54161	; 0xd391
    77cc:	movt	r1, #60294	; 0xeb86
    77d0:	add	r7, r3, r7
    77d4:	add	r0, r0, r1
    77d8:	add	r0, r7, r0, ror #11
    77dc:	str	r0, [r6, #4]
    77e0:	sub	sp, fp, #28
    77e4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

000077e8 <rb_sha256_crypt_r>:
    77e8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    77ec:	add	fp, sp, #28
    77f0:	sub	sp, sp, #4
    77f4:	vpush	{d8-d11}
    77f8:	sub	sp, sp, #480	; 0x1e0
    77fc:	str	r2, [fp, #-516]	; 0xfffffdfc
    7800:	str	r3, [fp, #-532]	; 0xfffffdec
    7804:	mov	r4, r0
    7808:	mov	r2, #3
    780c:	mov	r7, r1
    7810:	ldr	r0, [pc, #3128]	; 8450 <rb_sha256_crypt_r+0xc68>
    7814:	add	r0, pc, r0
    7818:	bl	5504 <strncmp@plt>
    781c:	ldr	r1, [pc, #3120]	; 8454 <rb_sha256_crypt_r+0xc6c>
    7820:	cmp	r0, #0
    7824:	mov	r2, #7
    7828:	addeq	r7, r7, #3
    782c:	mov	r0, r7
    7830:	add	r1, pc, r1
    7834:	bl	5504 <strncmp@plt>
    7838:	movw	r1, #5000	; 0x1388
    783c:	mov	r5, #0
    7840:	cmp	r0, #0
    7844:	str	r1, [fp, #-500]	; 0xfffffe0c
    7848:	beq	7854 <rb_sha256_crypt_r+0x6c>
    784c:	mov	r0, #0
    7850:	b	7898 <rb_sha256_crypt_r+0xb0>
    7854:	add	r0, r7, #7
    7858:	sub	r1, fp, #312	; 0x138
    785c:	mov	r2, #10
    7860:	bl	5108 <strtoul@plt>
    7864:	ldr	r1, [fp, #-312]	; 0xfffffec8
    7868:	ldrb	r2, [r1]
    786c:	cmp	r2, #36	; 0x24
    7870:	bne	840c <rb_sha256_crypt_r+0xc24>
    7874:	movw	r2, #51711	; 0xc9ff
    7878:	add	r7, r1, #1
    787c:	movt	r2, #15258	; 0x3b9a
    7880:	cmp	r0, r2
    7884:	movcc	r2, r0
    7888:	mov	r0, #1
    788c:	cmp	r2, #1000	; 0x3e8
    7890:	movls	r2, #1000	; 0x3e8
    7894:	str	r2, [fp, #-500]	; 0xfffffe0c
    7898:	str	r0, [fp, #-536]	; 0xfffffde8
    789c:	ldr	r1, [pc, #2996]	; 8458 <rb_sha256_crypt_r+0xc70>
    78a0:	mov	r0, r7
    78a4:	add	r1, pc, r1
    78a8:	bl	54d4 <strcspn@plt>
    78ac:	mov	r6, r0
    78b0:	cmp	r0, #16
    78b4:	str	r0, [fp, #-540]	; 0xfffffde4
    78b8:	mov	r0, r4
    78bc:	movcs	r6, #16
    78c0:	bl	50f0 <strlen@plt>
    78c4:	mov	sl, r0
    78c8:	tst	r4, #3
    78cc:	beq	78f8 <rb_sha256_crypt_r+0x110>
    78d0:	add	r0, sl, #11
    78d4:	bic	r0, r0, #7
    78d8:	sub	r0, sp, r0
    78dc:	add	r5, r0, #4
    78e0:	mov	sp, r0
    78e4:	mov	r0, r5
    78e8:	mov	r1, r4
    78ec:	mov	r2, sl
    78f0:	bl	5114 <memcpy@plt>
    78f4:	mov	r4, r5
    78f8:	mov	r9, #0
    78fc:	tst	r7, #3
    7900:	str	r5, [fp, #-524]	; 0xfffffdf4
    7904:	beq	7938 <rb_sha256_crypt_r+0x150>
    7908:	add	r0, r6, #11
    790c:	bic	r0, r0, #7
    7910:	sub	r0, sp, r0
    7914:	add	r5, r0, #4
    7918:	mov	sp, r0
    791c:	mov	r0, r5
    7920:	mov	r1, r7
    7924:	mov	r2, r6
    7928:	bl	5114 <memcpy@plt>
    792c:	mov	r7, r5
    7930:	str	r5, [fp, #-528]	; 0xfffffdf0
    7934:	b	7940 <rb_sha256_crypt_r+0x158>
    7938:	mov	r0, #0
    793c:	str	r0, [fp, #-528]	; 0xfffffdf0
    7940:	add	r0, pc, #704	; 0x2c0
    7944:	sub	r5, fp, #312	; 0x138
    7948:	mov	r1, #36	; 0x24
    794c:	vld1.64	{d8-d9}, [r0]
    7950:	add	r0, pc, #704	; 0x2c0
    7954:	mov	r2, r5
    7958:	vld1.64	{d10-d11}, [r0]
    795c:	add	r0, r5, #16
    7960:	str	r0, [fp, #-504]	; 0xfffffe08
    7964:	vst1.64	{d8-d9}, [r0]
    7968:	mov	r0, r5
    796c:	vst1.32	{d10-d11}, [r0], r1
    7970:	mov	r1, sl
    7974:	str	r9, [r0]
    7978:	mov	r0, r4
    797c:	str	r9, [fp, #-280]	; 0xfffffee8
    7980:	str	r9, [fp, #-272]	; 0xfffffef0
    7984:	bl	846c <rb_sha256_process_bytes>
    7988:	mov	r0, r7
    798c:	mov	r1, r6
    7990:	mov	r2, r5
    7994:	bl	846c <rb_sha256_process_bytes>
    7998:	sub	r8, fp, #488	; 0x1e8
    799c:	mov	r1, #36	; 0x24
    79a0:	mov	r0, r8
    79a4:	mov	r2, r8
    79a8:	vst1.32	{d10-d11}, [r0], r1
    79ac:	mov	r1, sl
    79b0:	str	r9, [r0]
    79b4:	add	r0, r8, #16
    79b8:	vst1.64	{d8-d9}, [r0]
    79bc:	str	r0, [fp, #-512]	; 0xfffffe00
    79c0:	mov	r0, r4
    79c4:	str	r9, [fp, #-456]	; 0xfffffe38
    79c8:	str	r9, [fp, #-448]	; 0xfffffe40
    79cc:	bl	846c <rb_sha256_process_bytes>
    79d0:	mov	r0, r7
    79d4:	mov	r1, r6
    79d8:	mov	r2, r8
    79dc:	str	r6, [fp, #-508]	; 0xfffffe04
    79e0:	bl	846c <rb_sha256_process_bytes>
    79e4:	mov	r0, r4
    79e8:	mov	r1, sl
    79ec:	mov	r2, r8
    79f0:	bl	846c <rb_sha256_process_bytes>
    79f4:	sub	r1, fp, #100	; 0x64
    79f8:	mov	r0, r8
    79fc:	bl	85f8 <rb_sha256_finish_ctx>
    7a00:	cmp	sl, #33	; 0x21
    7a04:	mov	r1, sl
    7a08:	mov	r9, r7
    7a0c:	str	r7, [fp, #-520]	; 0xfffffdf8
    7a10:	bcc	7a50 <rb_sha256_crypt_r+0x268>
    7a14:	sub	r0, sl, #33	; 0x21
    7a18:	sub	r5, fp, #100	; 0x64
    7a1c:	sub	r7, fp, #312	; 0x138
    7a20:	mov	r6, sl
    7a24:	bic	r9, r0, #31
    7a28:	mov	r0, r5
    7a2c:	mov	r1, #32
    7a30:	mov	r2, r7
    7a34:	bl	846c <rb_sha256_process_bytes>
    7a38:	sub	r6, r6, #32
    7a3c:	cmp	r6, #32
    7a40:	bhi	7a28 <rb_sha256_crypt_r+0x240>
    7a44:	sub	r0, sl, #32
    7a48:	sub	r1, r0, r9
    7a4c:	ldr	r9, [fp, #-520]	; 0xfffffdf8
    7a50:	sub	r7, fp, #312	; 0x138
    7a54:	sub	r0, fp, #100	; 0x64
    7a58:	mov	r2, r7
    7a5c:	bl	846c <rb_sha256_process_bytes>
    7a60:	cmp	sl, #0
    7a64:	str	sl, [fp, #-492]	; 0xfffffe14
    7a68:	beq	7b98 <rb_sha256_crypt_r+0x3b0>
    7a6c:	mov	r6, sl
    7a70:	sub	r5, fp, #312	; 0x138
    7a74:	mov	r7, #0
    7a78:	sub	sl, fp, #100	; 0x64
    7a7c:	tst	r6, #1
    7a80:	bne	7a90 <rb_sha256_crypt_r+0x2a8>
    7a84:	ldr	r1, [fp, #-492]	; 0xfffffe14
    7a88:	mov	r0, r4
    7a8c:	b	7a98 <rb_sha256_crypt_r+0x2b0>
    7a90:	mov	r0, sl
    7a94:	mov	r1, #32
    7a98:	mov	r2, r5
    7a9c:	bl	846c <rb_sha256_process_bytes>
    7aa0:	lsr	r0, r6, #1
    7aa4:	cmp	r7, r6, lsr #1
    7aa8:	mov	r6, r0
    7aac:	bne	7a7c <rb_sha256_crypt_r+0x294>
    7ab0:	sub	r0, fp, #312	; 0x138
    7ab4:	sub	r1, fp, #100	; 0x64
    7ab8:	bl	85f8 <rb_sha256_finish_ctx>
    7abc:	add	r0, pc, #340	; 0x154
    7ac0:	add	r1, pc, #320	; 0x140
    7ac4:	ldr	sl, [fp, #-492]	; 0xfffffe14
    7ac8:	sub	r7, fp, #312	; 0x138
    7acc:	vld1.64	{d16-d17}, [r0]
    7ad0:	vld1.64	{d18-d19}, [r1]
    7ad4:	mov	r0, #40	; 0x28
    7ad8:	mov	r1, r8
    7adc:	cmp	sl, #0
    7ae0:	vst1.32	{d16-d17}, [r1], r0
    7ae4:	ldr	r0, [fp, #-512]	; 0xfffffe00
    7ae8:	vst1.32	{d18-d19}, [r0]
    7aec:	mov	r0, #0
    7af0:	str	r0, [r1]
    7af4:	str	r0, [fp, #-456]	; 0xfffffe38
    7af8:	str	r0, [fp, #-452]	; 0xfffffe3c
    7afc:	beq	7bd8 <rb_sha256_crypt_r+0x3f0>
    7b00:	sub	r5, fp, #488	; 0x1e8
    7b04:	mov	r6, sl
    7b08:	mov	r0, r4
    7b0c:	mov	r1, sl
    7b10:	mov	r2, r5
    7b14:	bl	846c <rb_sha256_process_bytes>
    7b18:	subs	r6, r6, #1
    7b1c:	bne	7b08 <rb_sha256_crypt_r+0x320>
    7b20:	sub	r5, fp, #136	; 0x88
    7b24:	sub	r0, fp, #488	; 0x1e8
    7b28:	mov	r1, r5
    7b2c:	bl	85f8 <rb_sha256_finish_ctx>
    7b30:	add	r0, sl, #7
    7b34:	bic	r0, r0, #7
    7b38:	sub	r1, sp, r0
    7b3c:	mov	sp, r1
    7b40:	ldr	r6, [fp, #-508]	; 0xfffffe04
    7b44:	cmp	sl, #32
    7b48:	str	r1, [fp, #-496]	; 0xfffffe10
    7b4c:	bcc	7c28 <rb_sha256_crypt_r+0x440>
    7b50:	sub	ip, sl, #32
    7b54:	mov	r3, #0
    7b58:	bic	r2, ip, #31
    7b5c:	add	r0, r1, r2
    7b60:	add	r0, r0, #32
    7b64:	mov	r4, r5
    7b68:	sub	r7, r1, r3
    7b6c:	sub	r3, r3, #32
    7b70:	vld1.64	{d16-d17}, [r4]!
    7b74:	vld1.64	{d18-d19}, [r4]
    7b78:	vst1.64	{d16-d17}, [r7]!
    7b7c:	vst1.64	{d18-d19}, [r7]
    7b80:	add	r7, sl, r3
    7b84:	cmp	r7, #31
    7b88:	bhi	7b64 <rb_sha256_crypt_r+0x37c>
    7b8c:	sub	r2, ip, r2
    7b90:	sub	r7, fp, #312	; 0x138
    7b94:	b	7c30 <rb_sha256_crypt_r+0x448>
    7b98:	sub	r0, fp, #312	; 0x138
    7b9c:	sub	r1, fp, #100	; 0x64
    7ba0:	bl	85f8 <rb_sha256_finish_ctx>
    7ba4:	add	r0, pc, #108	; 0x6c
    7ba8:	add	r1, pc, #88	; 0x58
    7bac:	vld1.64	{d16-d17}, [r0]
    7bb0:	vld1.64	{d18-d19}, [r1]
    7bb4:	mov	r0, #40	; 0x28
    7bb8:	mov	r1, r8
    7bbc:	vst1.32	{d16-d17}, [r1], r0
    7bc0:	ldr	r0, [fp, #-512]	; 0xfffffe00
    7bc4:	vst1.32	{d18-d19}, [r0]
    7bc8:	mov	r0, #0
    7bcc:	str	r0, [r1]
    7bd0:	str	r0, [fp, #-456]	; 0xfffffe38
    7bd4:	str	r0, [fp, #-452]	; 0xfffffe3c
    7bd8:	sub	r0, fp, #488	; 0x1e8
    7bdc:	sub	r1, fp, #136	; 0x88
    7be0:	bl	85f8 <rb_sha256_finish_ctx>
    7be4:	add	r0, sl, #7
    7be8:	bic	r0, r0, #7
    7bec:	sub	r0, sp, r0
    7bf0:	mov	sp, r0
    7bf4:	ldr	r6, [fp, #-508]	; 0xfffffe04
    7bf8:	mov	r2, #0
    7bfc:	str	r0, [fp, #-496]	; 0xfffffe10
    7c00:	b	7c30 <rb_sha256_crypt_r+0x448>
    7c04:	nop	{0}
    7c08:	.word	0x510e527f
    7c0c:	.word	0x9b05688c
    7c10:	.word	0x1f83d9ab
    7c14:	.word	0x5be0cd19
    7c18:	.word	0x6a09e667
    7c1c:	.word	0xbb67ae85
    7c20:	.word	0x3c6ef372
    7c24:	.word	0xa54ff53a
    7c28:	mov	r0, r1
    7c2c:	mov	r2, sl
    7c30:	sub	r1, fp, #136	; 0x88
    7c34:	bl	5114 <memcpy@plt>
    7c38:	sub	r0, pc, #40	; 0x28
    7c3c:	sub	r1, pc, #60	; 0x3c
    7c40:	mov	r4, #0
    7c44:	vld1.64	{d16-d17}, [r0]
    7c48:	vld1.64	{d18-d19}, [r1]
    7c4c:	mov	r0, #40	; 0x28
    7c50:	mov	r1, r8
    7c54:	vst1.32	{d16-d17}, [r1], r0
    7c58:	ldr	r0, [fp, #-512]	; 0xfffffe00
    7c5c:	vst1.32	{d18-d19}, [r0]
    7c60:	str	r4, [r1]
    7c64:	str	r4, [fp, #-456]	; 0xfffffe38
    7c68:	str	r4, [fp, #-452]	; 0xfffffe3c
    7c6c:	mov	r0, r9
    7c70:	mov	r1, r6
    7c74:	mov	r2, r8
    7c78:	bl	846c <rb_sha256_process_bytes>
    7c7c:	ldrb	r0, [fp, #-100]	; 0xffffff9c
    7c80:	add	r4, r4, #1
    7c84:	add	r0, r0, #16
    7c88:	cmp	r4, r0
    7c8c:	bcc	7c6c <rb_sha256_crypt_r+0x484>
    7c90:	sub	r4, fp, #136	; 0x88
    7c94:	sub	r0, fp, #488	; 0x1e8
    7c98:	mov	r1, r4
    7c9c:	bl	85f8 <rb_sha256_finish_ctx>
    7ca0:	add	r0, r6, #7
    7ca4:	bic	r0, r0, #7
    7ca8:	sub	r0, sp, r0
    7cac:	mov	sp, r0
    7cb0:	cmp	r6, #32
    7cb4:	bcc	7d08 <rb_sha256_crypt_r+0x520>
    7cb8:	ldr	r3, [fp, #-540]	; 0xfffffde4
    7cbc:	mvn	r1, #32
    7cc0:	mvn	r2, r3
    7cc4:	cmn	r2, #17
    7cc8:	mvnls	r2, #16
    7ccc:	sub	r5, r1, r2
    7cd0:	mov	r2, r3
    7cd4:	mov	r1, #32
    7cd8:	mov	r3, r0
    7cdc:	mov	r6, r4
    7ce0:	sub	r2, r2, #32
    7ce4:	add	r7, r3, #16
    7ce8:	vld1.8	{d16-d17}, [r6]!
    7cec:	cmp	r2, #31
    7cf0:	vld1.64	{d18-d19}, [r6]
    7cf4:	vst1.8	{d16-d17}, [r3], r1
    7cf8:	vst1.8	{d18-d19}, [r7]
    7cfc:	bhi	7cdc <rb_sha256_crypt_r+0x4f4>
    7d00:	add	r6, r5, #32
    7d04:	sub	r7, fp, #312	; 0x138
    7d08:	sub	r1, fp, #136	; 0x88
    7d0c:	mov	r2, r6
    7d10:	str	r0, [fp, #-512]	; 0xfffffe00
    7d14:	bl	5114 <memcpy@plt>
    7d18:	ldr	r0, [fp, #-500]	; 0xfffffe0c
    7d1c:	cmp	r0, #0
    7d20:	beq	7e30 <rb_sha256_crypt_r+0x648>
    7d24:	mov	r4, #0
    7d28:	sub	r6, fp, #100	; 0x64
    7d2c:	mov	r8, #0
    7d30:	sub	r0, pc, #288	; 0x120
    7d34:	mov	r1, #40	; 0x28
    7d38:	mov	r2, r7
    7d3c:	ands	r9, r8, #1
    7d40:	vld1.64	{d16-d17}, [r0]
    7d44:	sub	r0, pc, #324	; 0x144
    7d48:	vld1.64	{d18-d19}, [r0]
    7d4c:	mov	r0, r7
    7d50:	vst1.32	{d16-d17}, [r0], r1
    7d54:	ldr	r1, [fp, #-504]	; 0xfffffe08
    7d58:	vst1.32	{d18-d19}, [r1]
    7d5c:	str	r4, [r0]
    7d60:	movw	r0, #18725	; 0x4925
    7d64:	str	r4, [fp, #-280]	; 0xfffffee8
    7d68:	str	r4, [fp, #-276]	; 0xfffffeec
    7d6c:	movt	r0, #9362	; 0x2492
    7d70:	umull	r0, r1, r8, r0
    7d74:	sub	r0, r8, r1
    7d78:	add	r5, r1, r0, lsr #1
    7d7c:	lsr	r0, r5, #2
    7d80:	lsl	sl, r0, #3
    7d84:	movw	r0, #43691	; 0xaaab
    7d88:	movt	r0, #43690	; 0xaaaa
    7d8c:	umull	r0, r1, r8, r0
    7d90:	lsr	r0, r1, #1
    7d94:	add	r7, r0, r0, lsl #1
    7d98:	beq	7da8 <rb_sha256_crypt_r+0x5c0>
    7d9c:	ldr	r0, [fp, #-496]	; 0xfffffe10
    7da0:	ldr	r1, [fp, #-492]	; 0xfffffe14
    7da4:	b	7db0 <rb_sha256_crypt_r+0x5c8>
    7da8:	mov	r0, r6
    7dac:	mov	r1, #32
    7db0:	bl	846c <rb_sha256_process_bytes>
    7db4:	cmp	r7, r8
    7db8:	sub	r5, sl, r5, lsr #2
    7dbc:	sub	r7, fp, #312	; 0x138
    7dc0:	beq	7dd4 <rb_sha256_crypt_r+0x5ec>
    7dc4:	ldr	r0, [fp, #-512]	; 0xfffffe00
    7dc8:	ldr	r1, [fp, #-508]	; 0xfffffe04
    7dcc:	mov	r2, r7
    7dd0:	bl	846c <rb_sha256_process_bytes>
    7dd4:	ldr	sl, [fp, #-492]	; 0xfffffe14
    7dd8:	cmp	r5, r8
    7ddc:	beq	7df0 <rb_sha256_crypt_r+0x608>
    7de0:	ldr	r0, [fp, #-496]	; 0xfffffe10
    7de4:	mov	r1, sl
    7de8:	mov	r2, r7
    7dec:	bl	846c <rb_sha256_process_bytes>
    7df0:	cmp	r9, #0
    7df4:	beq	7e04 <rb_sha256_crypt_r+0x61c>
    7df8:	mov	r0, r6
    7dfc:	mov	r1, #32
    7e00:	b	7e0c <rb_sha256_crypt_r+0x624>
    7e04:	ldr	r0, [fp, #-496]	; 0xfffffe10
    7e08:	mov	r1, sl
    7e0c:	mov	r2, r7
    7e10:	bl	846c <rb_sha256_process_bytes>
    7e14:	mov	r0, r7
    7e18:	mov	r1, r6
    7e1c:	bl	85f8 <rb_sha256_finish_ctx>
    7e20:	ldr	r0, [fp, #-500]	; 0xfffffe0c
    7e24:	add	r8, r8, #1
    7e28:	cmp	r0, r8
    7e2c:	bne	7d30 <rb_sha256_crypt_r+0x548>
    7e30:	ldr	r6, [fp, #-532]	; 0xfffffdec
    7e34:	ldr	r5, [fp, #-516]	; 0xfffffdfc
    7e38:	mov	r1, #0
    7e3c:	mov	r9, #0
    7e40:	bic	r4, r6, r6, asr #31
    7e44:	mov	r0, r5
    7e48:	mov	r2, r4
    7e4c:	bl	4f4c <memset@plt>
    7e50:	ldr	r1, [pc, #1540]	; 845c <rb_sha256_crypt_r+0xc74>
    7e54:	mov	r0, r5
    7e58:	mov	r2, r4
    7e5c:	add	r1, pc, r1
    7e60:	bl	4ea4 <strncpy@plt>
    7e64:	mov	r0, r5
    7e68:	bl	50f0 <strlen@plt>
    7e6c:	adds	r7, r5, r0
    7e70:	ldr	r0, [fp, #-536]	; 0xfffffde8
    7e74:	sub	r8, r6, #3
    7e78:	addeq	r7, r5, r4
    7e7c:	cmp	r0, #0
    7e80:	beq	7eb8 <rb_sha256_crypt_r+0x6d0>
    7e84:	sub	sp, sp, #8
    7e88:	ldr	r0, [fp, #-500]	; 0xfffffe0c
    7e8c:	bic	r1, r8, r8, asr #31
    7e90:	str	r0, [sp]
    7e94:	mov	r0, r7
    7e98:	ldr	r2, [pc, #1472]	; 8460 <rb_sha256_crypt_r+0xc78>
    7e9c:	ldr	r3, [pc, #1472]	; 8464 <rb_sha256_crypt_r+0xc7c>
    7ea0:	add	r2, pc, r2
    7ea4:	add	r3, pc, r3
    7ea8:	bl	54a4 <snprintf@plt>
    7eac:	add	sp, sp, #8
    7eb0:	sub	r8, r8, r0
    7eb4:	add	r7, r7, r0
    7eb8:	ldr	r6, [fp, #-508]	; 0xfffffe04
    7ebc:	mov	r0, r7
    7ec0:	mov	r1, #0
    7ec4:	mov	r2, r6
    7ec8:	bl	4f4c <memset@plt>
    7ecc:	bic	r5, r8, r8, asr #31
    7ed0:	ldr	r1, [fp, #-520]	; 0xfffffdf8
    7ed4:	mov	r4, r6
    7ed8:	mov	r0, r7
    7edc:	cmp	r5, r6
    7ee0:	movcc	r4, r5
    7ee4:	mov	r2, r4
    7ee8:	bl	4ea4 <strncpy@plt>
    7eec:	ldr	r7, [fp, #-516]	; 0xfffffdfc
    7ef0:	mov	r0, r7
    7ef4:	bl	50f0 <strlen@plt>
    7ef8:	adds	r0, r7, r0
    7efc:	sub	r1, r8, r4
    7f00:	mov	r2, r0
    7f04:	moveq	r9, r6
    7f08:	addeq	r2, r2, r6
    7f0c:	cmp	r1, #1
    7f10:	blt	831c <rb_sha256_crypt_r+0xb34>
    7f14:	mov	r1, #36	; 0x24
    7f18:	strb	r1, [r0, r9]
    7f1c:	beq	831c <rb_sha256_crypt_r+0xb34>
    7f20:	ldr	r0, [fp, #-540]	; 0xfffffde4
    7f24:	mvn	ip, r5
    7f28:	ldrb	r3, [fp, #-90]	; 0xffffffa6
    7f2c:	ldrb	r6, [fp, #-80]	; 0xffffffb0
    7f30:	mvn	r9, r0
    7f34:	lsl	r3, r3, #8
    7f38:	cmp	ip, r9
    7f3c:	mov	r0, r9
    7f40:	movhi	r0, ip
    7f44:	cmn	r0, #17
    7f48:	mvnls	r0, #16
    7f4c:	add	r7, r8, r0
    7f50:	ldrb	r0, [fp, #-100]	; 0xffffff9c
    7f54:	ldr	lr, [pc, #1292]	; 8468 <rb_sha256_crypt_r+0xc80>
    7f58:	orr	r0, r3, r0, lsl #16
    7f5c:	add	r3, r2, #1
    7f60:	add	lr, pc, lr
    7f64:	orr	r5, r0, r6
    7f68:	mov	r6, #0
    7f6c:	and	r0, r5, #63	; 0x3f
    7f70:	add	r4, r7, r6
    7f74:	ldrb	r0, [lr, r0]
    7f78:	cmp	r4, #2
    7f7c:	strb	r0, [r3, -r6]
    7f80:	sub	r0, r6, #1
    7f84:	blt	7f9c <rb_sha256_crypt_r+0x7b4>
    7f88:	add	r4, r6, #4
    7f8c:	lsr	r5, r5, #6
    7f90:	mov	r6, r0
    7f94:	cmp	r4, #1
    7f98:	bhi	7f6c <rb_sha256_crypt_r+0x784>
    7f9c:	cmp	ip, r9
    7fa0:	mov	r5, r9
    7fa4:	mvn	r4, #16
    7fa8:	ldr	r6, [fp, #-508]	; 0xfffffe04
    7fac:	movhi	r5, ip
    7fb0:	cmn	r5, #17
    7fb4:	movls	r5, r4
    7fb8:	add	r5, r8, r5
    7fbc:	add	r5, r5, r0
    7fc0:	add	r5, r5, #1
    7fc4:	cmp	r5, #2
    7fc8:	blt	831c <rb_sha256_crypt_r+0xb34>
    7fcc:	cmp	ip, r9
    7fd0:	mov	r5, r9
    7fd4:	ldrb	r6, [fp, #-79]	; 0xffffffb1
    7fd8:	movhi	r5, ip
    7fdc:	cmn	r5, #17
    7fe0:	movhi	r4, r5
    7fe4:	ldrb	r5, [fp, #-89]	; 0xffffffa7
    7fe8:	add	r7, r8, r4
    7fec:	ldrb	r4, [fp, #-99]	; 0xffffff9d
    7ff0:	lsl	r4, r4, #8
    7ff4:	orr	r4, r4, r6, lsl #16
    7ff8:	orr	r5, r4, r5
    7ffc:	mvn	r4, #0
    8000:	and	r6, r5, #63	; 0x3f
    8004:	sub	r1, r2, r0
    8008:	ldrb	r6, [lr, r6]
    800c:	strb	r6, [r1, #1]
    8010:	add	r1, r7, r0
    8014:	sub	r0, r0, #1
    8018:	cmp	r1, #2
    801c:	blt	8034 <rb_sha256_crypt_r+0x84c>
    8020:	add	r1, r4, #5
    8024:	sub	r4, r4, #1
    8028:	lsr	r5, r5, #6
    802c:	cmp	r1, #1
    8030:	bhi	8000 <rb_sha256_crypt_r+0x818>
    8034:	cmp	ip, r9
    8038:	mov	r1, r9
    803c:	mvn	r2, #16
    8040:	ldr	r6, [fp, #-508]	; 0xfffffe04
    8044:	movhi	r1, ip
    8048:	cmn	r1, #17
    804c:	movls	r1, r2
    8050:	add	r1, r8, r1
    8054:	add	r1, r1, r0
    8058:	add	r1, r1, #1
    805c:	cmp	r1, #2
    8060:	blt	831c <rb_sha256_crypt_r+0xb34>
    8064:	cmp	ip, r9
    8068:	mov	r1, r9
    806c:	ldrb	r5, [fp, #-78]	; 0xffffffb2
    8070:	ldrb	r4, [fp, #-88]	; 0xffffffa8
    8074:	movhi	r1, ip
    8078:	cmn	r1, #17
    807c:	movhi	r2, r1
    8080:	ldrb	r1, [fp, #-98]	; 0xffffff9e
    8084:	lsl	r5, r5, #8
    8088:	add	r2, r8, r2
    808c:	orr	r4, r5, r4, lsl #16
    8090:	mov	r5, #4
    8094:	orr	r7, r4, r1
    8098:	and	r1, r7, #63	; 0x3f
    809c:	ldrb	r1, [lr, r1]
    80a0:	strb	r1, [r3, -r0]
    80a4:	add	r1, r2, r0
    80a8:	sub	r0, r0, #1
    80ac:	cmp	r1, #2
    80b0:	blt	80c0 <rb_sha256_crypt_r+0x8d8>
    80b4:	lsr	r7, r7, #6
    80b8:	subs	r5, r5, #1
    80bc:	bhi	8098 <rb_sha256_crypt_r+0x8b0>
    80c0:	cmp	ip, r9
    80c4:	movhi	r9, ip
    80c8:	cmn	r9, #17
    80cc:	mvnls	r9, #16
    80d0:	add	r1, r8, r9
    80d4:	add	r1, r1, r0
    80d8:	add	r1, r1, #1
    80dc:	cmp	r1, #2
    80e0:	blt	831c <rb_sha256_crypt_r+0xb34>
    80e4:	sub	r2, r3, r0
    80e8:	ldrb	r3, [fp, #-87]	; 0xffffffa9
    80ec:	ldrb	r0, [fp, #-97]	; 0xffffff9f
    80f0:	ldrb	r7, [fp, #-77]	; 0xffffffb3
    80f4:	lsl	r3, r3, #8
    80f8:	orr	r0, r3, r0, lsl #16
    80fc:	orr	r3, r0, r7
    8100:	mov	r7, #4
    8104:	and	r0, r3, #63	; 0x3f
    8108:	sub	r1, r1, #1
    810c:	ldrb	r0, [lr, r0]
    8110:	cmp	r1, #2
    8114:	strb	r0, [r2], #1
    8118:	blt	8128 <rb_sha256_crypt_r+0x940>
    811c:	lsr	r3, r3, #6
    8120:	subs	r7, r7, #1
    8124:	bhi	8104 <rb_sha256_crypt_r+0x91c>
    8128:	cmp	r1, #2
    812c:	blt	831c <rb_sha256_crypt_r+0xb34>
    8130:	ldrb	r0, [fp, #-96]	; 0xffffffa0
    8134:	ldrb	r7, [fp, #-76]	; 0xffffffb4
    8138:	ldrb	r3, [fp, #-86]	; 0xffffffaa
    813c:	lsl	r0, r0, #8
    8140:	orr	r0, r0, r7, lsl #16
    8144:	mov	r7, #4
    8148:	orr	r3, r0, r3
    814c:	and	r0, r3, #63	; 0x3f
    8150:	sub	r1, r1, #1
    8154:	ldrb	r0, [lr, r0]
    8158:	cmp	r1, #2
    815c:	strb	r0, [r2], #1
    8160:	blt	8170 <rb_sha256_crypt_r+0x988>
    8164:	lsr	r3, r3, #6
    8168:	subs	r7, r7, #1
    816c:	bhi	814c <rb_sha256_crypt_r+0x964>
    8170:	cmp	r1, #2
    8174:	blt	831c <rb_sha256_crypt_r+0xb34>
    8178:	ldrb	r7, [fp, #-75]	; 0xffffffb5
    817c:	ldrb	r3, [fp, #-85]	; 0xffffffab
    8180:	ldrb	r0, [fp, #-95]	; 0xffffffa1
    8184:	lsl	r7, r7, #8
    8188:	orr	r3, r7, r3, lsl #16
    818c:	mov	r7, #4
    8190:	orr	r3, r3, r0
    8194:	and	r0, r3, #63	; 0x3f
    8198:	sub	r1, r1, #1
    819c:	ldrb	r0, [lr, r0]
    81a0:	cmp	r1, #2
    81a4:	strb	r0, [r2], #1
    81a8:	blt	81b8 <rb_sha256_crypt_r+0x9d0>
    81ac:	lsr	r3, r3, #6
    81b0:	subs	r7, r7, #1
    81b4:	bhi	8194 <rb_sha256_crypt_r+0x9ac>
    81b8:	cmp	r1, #2
    81bc:	blt	831c <rb_sha256_crypt_r+0xb34>
    81c0:	ldrb	r3, [fp, #-84]	; 0xffffffac
    81c4:	ldrb	r0, [fp, #-94]	; 0xffffffa2
    81c8:	ldrb	r7, [fp, #-74]	; 0xffffffb6
    81cc:	lsl	r3, r3, #8
    81d0:	orr	r0, r3, r0, lsl #16
    81d4:	orr	r3, r0, r7
    81d8:	mov	r7, #4
    81dc:	and	r0, r3, #63	; 0x3f
    81e0:	sub	r1, r1, #1
    81e4:	ldrb	r0, [lr, r0]
    81e8:	cmp	r1, #2
    81ec:	strb	r0, [r2], #1
    81f0:	blt	8200 <rb_sha256_crypt_r+0xa18>
    81f4:	lsr	r3, r3, #6
    81f8:	subs	r7, r7, #1
    81fc:	bhi	81dc <rb_sha256_crypt_r+0x9f4>
    8200:	cmp	r1, #2
    8204:	blt	831c <rb_sha256_crypt_r+0xb34>
    8208:	ldrb	r0, [fp, #-93]	; 0xffffffa3
    820c:	ldrb	r7, [fp, #-73]	; 0xffffffb7
    8210:	ldrb	r3, [fp, #-83]	; 0xffffffad
    8214:	lsl	r0, r0, #8
    8218:	orr	r0, r0, r7, lsl #16
    821c:	mov	r7, #4
    8220:	orr	r3, r0, r3
    8224:	and	r0, r3, #63	; 0x3f
    8228:	sub	r1, r1, #1
    822c:	ldrb	r0, [lr, r0]
    8230:	cmp	r1, #2
    8234:	strb	r0, [r2], #1
    8238:	blt	8248 <rb_sha256_crypt_r+0xa60>
    823c:	lsr	r3, r3, #6
    8240:	subs	r7, r7, #1
    8244:	bhi	8224 <rb_sha256_crypt_r+0xa3c>
    8248:	cmp	r1, #2
    824c:	blt	831c <rb_sha256_crypt_r+0xb34>
    8250:	ldrb	r7, [fp, #-72]	; 0xffffffb8
    8254:	ldrb	r3, [fp, #-82]	; 0xffffffae
    8258:	ldrb	r0, [fp, #-92]	; 0xffffffa4
    825c:	lsl	r7, r7, #8
    8260:	orr	r3, r7, r3, lsl #16
    8264:	mov	r7, #4
    8268:	orr	r3, r3, r0
    826c:	and	r0, r3, #63	; 0x3f
    8270:	sub	r1, r1, #1
    8274:	ldrb	r0, [lr, r0]
    8278:	cmp	r1, #2
    827c:	strb	r0, [r2], #1
    8280:	blt	8290 <rb_sha256_crypt_r+0xaa8>
    8284:	lsr	r3, r3, #6
    8288:	subs	r7, r7, #1
    828c:	bhi	826c <rb_sha256_crypt_r+0xa84>
    8290:	cmp	r1, #2
    8294:	blt	831c <rb_sha256_crypt_r+0xb34>
    8298:	ldrb	r3, [fp, #-81]	; 0xffffffaf
    829c:	ldrb	r0, [fp, #-91]	; 0xffffffa5
    82a0:	ldrb	r7, [fp, #-71]	; 0xffffffb9
    82a4:	lsl	r3, r3, #8
    82a8:	orr	r0, r3, r0, lsl #16
    82ac:	orr	r3, r0, r7
    82b0:	mov	r7, #4
    82b4:	and	r0, r3, #63	; 0x3f
    82b8:	sub	r1, r1, #1
    82bc:	ldrb	r0, [lr, r0]
    82c0:	cmp	r1, #2
    82c4:	strb	r0, [r2], #1
    82c8:	blt	82d8 <rb_sha256_crypt_r+0xaf0>
    82cc:	lsr	r3, r3, #6
    82d0:	subs	r7, r7, #1
    82d4:	bhi	82b4 <rb_sha256_crypt_r+0xacc>
    82d8:	cmp	r1, #2
    82dc:	blt	831c <rb_sha256_crypt_r+0xb34>
    82e0:	ldrb	r0, [fp, #-70]	; 0xffffffba
    82e4:	ldrb	r3, [fp, #-69]	; 0xffffffbb
    82e8:	mov	r7, #3
    82ec:	orr	r3, r0, r3, lsl #8
    82f0:	and	r0, r3, #63	; 0x3f
    82f4:	sub	r1, r1, #1
    82f8:	ldrb	r0, [lr, r0]
    82fc:	cmp	r1, #2
    8300:	strb	r0, [r2], #1
    8304:	blt	8314 <rb_sha256_crypt_r+0xb2c>
    8308:	lsr	r3, r3, #6
    830c:	subs	r7, r7, #1
    8310:	bhi	82f0 <rb_sha256_crypt_r+0xb08>
    8314:	cmp	r1, #1
    8318:	bgt	8420 <rb_sha256_crypt_r+0xc38>
    831c:	bl	55e8 <__errno_location@plt>
    8320:	mov	r1, #34	; 0x22
    8324:	str	r1, [r0]
    8328:	mov	r0, #0
    832c:	str	r0, [fp, #-516]	; 0xfffffdfc
    8330:	add	r0, pc, #264	; 0x108
    8334:	add	r1, pc, #244	; 0xf4
    8338:	sub	r4, fp, #312	; 0x138
    833c:	vld1.64	{d16-d17}, [r0]
    8340:	vld1.64	{d18-d19}, [r1]
    8344:	mov	r0, #40	; 0x28
    8348:	mov	r1, r4
    834c:	vst1.32	{d16-d17}, [r1], r0
    8350:	ldr	r0, [fp, #-504]	; 0xfffffe08
    8354:	vst1.32	{d18-d19}, [r0]
    8358:	mov	r0, #0
    835c:	str	r0, [r1]
    8360:	str	r0, [fp, #-280]	; 0xfffffee8
    8364:	str	r0, [fp, #-276]	; 0xfffffeec
    8368:	sub	r1, fp, #100	; 0x64
    836c:	mov	r0, r4
    8370:	bl	85f8 <rb_sha256_finish_ctx>
    8374:	vmov.i32	q8, #0	; 0x00000000
    8378:	sub	r0, fp, #136	; 0x88
    837c:	mov	r1, #0
    8380:	mov	r2, sl
    8384:	vst1.64	{d16-d17}, [r0]!
    8388:	vst1.64	{d16-d17}, [r0]
    838c:	ldr	r0, [fp, #-496]	; 0xfffffe10
    8390:	bl	4f4c <memset@plt>
    8394:	ldr	r0, [fp, #-512]	; 0xfffffe00
    8398:	mov	r1, #0
    839c:	mov	r2, r6
    83a0:	bl	4f4c <memset@plt>
    83a4:	mov	r0, r4
    83a8:	mov	r1, #0
    83ac:	mov	r2, #172	; 0xac
    83b0:	bl	4f4c <memset@plt>
    83b4:	sub	r0, fp, #488	; 0x1e8
    83b8:	mov	r1, #0
    83bc:	mov	r2, #172	; 0xac
    83c0:	bl	4f4c <memset@plt>
    83c4:	ldr	r0, [fp, #-524]	; 0xfffffdf4
    83c8:	ldr	r4, [fp, #-528]	; 0xfffffdf0
    83cc:	cmp	r0, #0
    83d0:	beq	83e0 <rb_sha256_crypt_r+0xbf8>
    83d4:	mov	r1, #0
    83d8:	mov	r2, sl
    83dc:	bl	4f4c <memset@plt>
    83e0:	cmp	r4, #0
    83e4:	beq	83f8 <rb_sha256_crypt_r+0xc10>
    83e8:	mov	r0, r4
    83ec:	mov	r1, #0
    83f0:	mov	r2, r6
    83f4:	bl	4f4c <memset@plt>
    83f8:	ldr	r0, [fp, #-516]	; 0xfffffdfc
    83fc:	sub	sp, fp, #64	; 0x40
    8400:	vpop	{d8-d11}
    8404:	add	sp, sp, #4
    8408:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    840c:	mov	r0, #0
    8410:	str	r0, [fp, #-536]	; 0xfffffde8
    8414:	movw	r0, #5000	; 0x1388
    8418:	str	r0, [fp, #-500]	; 0xfffffe0c
    841c:	b	789c <rb_sha256_crypt_r+0xb4>
    8420:	mov	r0, #0
    8424:	strb	r0, [r2]
    8428:	b	8330 <rb_sha256_crypt_r+0xb48>
    842c:	nop	{0}
    8430:	.word	0x510e527f
    8434:	.word	0x9b05688c
    8438:	.word	0x1f83d9ab
    843c:	.word	0x5be0cd19
    8440:	.word	0x6a09e667
    8444:	.word	0xbb67ae85
    8448:	.word	0x3c6ef372
    844c:	.word	0xa54ff53a
    8450:	.word	0x0000dd8c
    8454:	.word	0x0000dd74
    8458:	.word	0x0000d9c6
    845c:	.word	0x0000d744
    8460:	.word	0x0000d3cc
    8464:	.word	0x0000d700
    8468:	.word	0x0000d2c7

0000846c <rb_sha256_process_bytes>:
    846c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8470:	add	fp, sp, #28
    8474:	sub	sp, sp, #4
    8478:	ldr	r6, [r2, #40]	; 0x28
    847c:	mov	r4, r2
    8480:	mov	r5, r1
    8484:	mov	r8, r0
    8488:	cmp	r6, #0
    848c:	beq	8500 <rb_sha256_process_bytes+0x94>
    8490:	rsb	r7, r6, #128	; 0x80
    8494:	add	r0, r4, r6
    8498:	mov	r1, r8
    849c:	cmp	r7, r5
    84a0:	add	r0, r0, #44	; 0x2c
    84a4:	movhi	r7, r5
    84a8:	mov	r2, r7
    84ac:	bl	5114 <memcpy@plt>
    84b0:	ldr	r0, [r4, #40]	; 0x28
    84b4:	add	r0, r0, r7
    84b8:	cmp	r0, #65	; 0x41
    84bc:	str	r0, [r4, #40]	; 0x28
    84c0:	bcc	84f8 <rb_sha256_process_bytes+0x8c>
    84c4:	add	r9, r4, #44	; 0x2c
    84c8:	bic	r1, r0, #63	; 0x3f
    84cc:	mov	r2, r4
    84d0:	mov	r0, r9
    84d4:	bl	86d4 <rb_sha256_process_block>
    84d8:	ldr	r0, [r4, #40]	; 0x28
    84dc:	and	r2, r0, #63	; 0x3f
    84e0:	add	r0, r7, r6
    84e4:	bic	r0, r0, #63	; 0x3f
    84e8:	str	r2, [r4, #40]	; 0x28
    84ec:	add	r1, r9, r0
    84f0:	mov	r0, r9
    84f4:	bl	5114 <memcpy@plt>
    84f8:	sub	r5, r5, r7
    84fc:	add	r8, r8, r7
    8500:	cmp	r5, #64	; 0x40
    8504:	bcc	8590 <rb_sha256_process_bytes+0x124>
    8508:	tst	r8, #3
    850c:	beq	8574 <rb_sha256_process_bytes+0x108>
    8510:	cmp	r5, #65	; 0x41
    8514:	bcc	859c <rb_sha256_process_bytes+0x130>
    8518:	sub	r0, r5, #64	; 0x40
    851c:	add	r7, r4, #44	; 0x2c
    8520:	mov	r6, r8
    8524:	str	r0, [sp]
    8528:	sub	r0, r5, #65	; 0x41
    852c:	bic	sl, r0, #63	; 0x3f
    8530:	add	r9, sl, #64	; 0x40
    8534:	mov	r0, r7
    8538:	mov	r1, r6
    853c:	mov	r2, #64	; 0x40
    8540:	bl	5114 <memcpy@plt>
    8544:	mov	r0, r7
    8548:	mov	r1, #64	; 0x40
    854c:	mov	r2, r4
    8550:	bl	86d4 <rb_sha256_process_block>
    8554:	sub	r5, r5, #64	; 0x40
    8558:	add	r6, r6, #64	; 0x40
    855c:	cmp	r5, #64	; 0x40
    8560:	bhi	8534 <rb_sha256_process_bytes+0xc8>
    8564:	ldr	r0, [sp]
    8568:	add	r8, r8, r9
    856c:	sub	r5, r0, sl
    8570:	b	85a0 <rb_sha256_process_bytes+0x134>
    8574:	bic	r6, r5, #63	; 0x3f
    8578:	mov	r0, r8
    857c:	mov	r2, r4
    8580:	mov	r1, r6
    8584:	bl	86d4 <rb_sha256_process_block>
    8588:	add	r8, r8, r6
    858c:	and	r5, r5, #63	; 0x3f
    8590:	cmp	r5, #0
    8594:	bne	85a0 <rb_sha256_process_bytes+0x134>
    8598:	b	85f0 <rb_sha256_process_bytes+0x184>
    859c:	mov	r5, #64	; 0x40
    85a0:	ldr	r6, [r4, #40]	; 0x28
    85a4:	mov	r1, r8
    85a8:	mov	r2, r5
    85ac:	add	r0, r4, r6
    85b0:	add	r0, r0, #44	; 0x2c
    85b4:	bl	5114 <memcpy@plt>
    85b8:	add	r5, r6, r5
    85bc:	cmp	r5, #64	; 0x40
    85c0:	bcc	85ec <rb_sha256_process_bytes+0x180>
    85c4:	add	r6, r4, #44	; 0x2c
    85c8:	mov	r1, #64	; 0x40
    85cc:	mov	r2, r4
    85d0:	mov	r0, r6
    85d4:	bl	86d4 <rb_sha256_process_block>
    85d8:	sub	r5, r5, #64	; 0x40
    85dc:	add	r1, r4, #108	; 0x6c
    85e0:	mov	r0, r6
    85e4:	mov	r2, r5
    85e8:	bl	5114 <memcpy@plt>
    85ec:	str	r5, [r4, #40]	; 0x28
    85f0:	sub	sp, fp, #28
    85f4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

000085f8 <rb_sha256_finish_ctx>:
    85f8:	push	{r4, r5, r6, r7, fp, lr}
    85fc:	add	fp, sp, #16
    8600:	mov	r5, r0
    8604:	mov	r4, r1
    8608:	ldr	r0, [r0, #32]
    860c:	mov	r7, #56	; 0x38
    8610:	ldr	r1, [r5, #40]	; 0x28
    8614:	add	r6, r5, #44	; 0x2c
    8618:	adds	r0, r0, r1
    861c:	str	r0, [r5, #32]
    8620:	ldrcs	r0, [r5, #36]	; 0x24
    8624:	addcs	r0, r0, #1
    8628:	strcs	r0, [r5, #36]	; 0x24
    862c:	cmp	r1, #55	; 0x37
    8630:	add	r0, r6, r1
    8634:	movwhi	r7, #120	; 0x78
    8638:	sub	r2, r7, r1
    863c:	ldr	r1, [pc, #140]	; 86d0 <rb_sha256_finish_ctx+0xd8>
    8640:	add	r1, pc, r1
    8644:	bl	5114 <memcpy@plt>
    8648:	ldr	r0, [r5, #32]
    864c:	mov	r1, #65280	; 0xff00
    8650:	lsl	r3, r0, #11
    8654:	and	r2, r1, r0, lsr #5
    8658:	uxtb16	r3, r3
    865c:	orr	r3, r3, r0, lsl #27
    8660:	orr	r2, r3, r2
    8664:	ubfx	r3, r0, #21, #8
    8668:	orr	r2, r2, r3
    866c:	orr	r3, r7, #4
    8670:	str	r2, [r6, r3]
    8674:	movw	r3, #8160	; 0x1fe0
    8678:	ldr	r2, [r5, #36]	; 0x24
    867c:	and	r3, r2, r3
    8680:	and	r1, r1, r2, lsr #5
    8684:	orr	r1, r1, r3, lsl #11
    8688:	ubfx	r3, r2, #21, #8
    868c:	lsl	r2, r2, #3
    8690:	orr	r0, r2, r0, lsr #29
    8694:	orr	r1, r1, r3
    8698:	mov	r2, r5
    869c:	orr	r0, r1, r0, lsl #24
    86a0:	add	r1, r7, #8
    86a4:	str	r0, [r6, r7]
    86a8:	mov	r0, r6
    86ac:	bl	86d4 <rb_sha256_process_block>
    86b0:	mov	r0, #0
    86b4:	ldr	r1, [r5, r0, lsl #2]
    86b8:	rev	r1, r1
    86bc:	str	r1, [r4, r0, lsl #2]
    86c0:	add	r0, r0, #1
    86c4:	cmp	r0, #8
    86c8:	bne	86b4 <rb_sha256_finish_ctx+0xbc>
    86cc:	pop	{r4, r5, r6, r7, fp, pc}
    86d0:	.word	0x0000d070

000086d4 <rb_sha256_process_block>:
    86d4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    86d8:	add	fp, sp, #28
    86dc:	sub	sp, sp, #304	; 0x130
    86e0:	mov	r4, r0
    86e4:	ldr	r0, [r2, #32]
    86e8:	lsr	r3, r1, #2
    86ec:	str	r2, [sp]
    86f0:	adds	r0, r0, r1
    86f4:	str	r0, [r2, #32]
    86f8:	ldr	r0, [r2, #4]
    86fc:	ldrcs	r1, [r2, #36]	; 0x24
    8700:	ldr	r8, [r2]
    8704:	ldr	lr, [r2, #8]
    8708:	ldr	r9, [r2, #16]
    870c:	ldr	ip, [r2, #20]
    8710:	ldr	sl, [r2, #28]
    8714:	str	r0, [sp, #32]
    8718:	ldr	r0, [r2, #12]
    871c:	addcs	r1, r1, #1
    8720:	str	r0, [sp, #36]	; 0x24
    8724:	ldr	r0, [r2, #24]
    8728:	strcs	r1, [r2, #36]	; 0x24
    872c:	cmp	r3, #0
    8730:	str	r0, [sp, #40]	; 0x28
    8734:	beq	88dc <rb_sha256_process_block+0x208>
    8738:	add	r0, sp, #44	; 0x2c
    873c:	mov	r2, #0
    8740:	str	r3, [sp, #4]
    8744:	ldr	r3, [r4, r2, lsl #2]
    8748:	rev	r3, r3
    874c:	str	r3, [r0, r2, lsl #2]
    8750:	add	r2, r2, #1
    8754:	cmp	r2, #16
    8758:	bne	8744 <rb_sha256_process_block+0x70>
    875c:	ldr	r6, [sp, #44]	; 0x2c
    8760:	mov	r2, #0
    8764:	str	r4, [sp, #8]
    8768:	add	r0, sp, #44	; 0x2c
    876c:	add	r7, r0, r2
    8770:	add	r2, r2, #4
    8774:	ldr	r4, [r7, #56]	; 0x38
    8778:	ldr	r3, [r7, #4]
    877c:	ldr	r5, [r7, #36]	; 0x24
    8780:	cmp	r2, #192	; 0xc0
    8784:	ror	r0, r4, #19
    8788:	ror	r1, r3, #18
    878c:	add	r6, r6, r5
    8790:	eor	r0, r0, r4, lsr #10
    8794:	eor	r1, r1, r3, lsr #3
    8798:	eor	r0, r0, r4, ror #17
    879c:	eor	r1, r1, r3, ror #7
    87a0:	add	r0, r6, r0
    87a4:	mov	r6, r3
    87a8:	add	r0, r0, r1
    87ac:	str	r0, [r7, #64]	; 0x40
    87b0:	bne	8768 <rb_sha256_process_block+0x94>
    87b4:	ldr	r6, [sp, #32]
    87b8:	ldr	r7, [sp, #36]	; 0x24
    87bc:	ldr	r3, [sp, #40]	; 0x28
    87c0:	mov	r2, #0
    87c4:	str	r8, [sp, #12]
    87c8:	str	lr, [sp, #16]
    87cc:	str	r9, [sp, #20]
    87d0:	str	ip, [sp, #24]
    87d4:	str	sl, [sp, #28]
    87d8:	mov	r5, lr
    87dc:	mov	lr, r6
    87e0:	mov	r4, r3
    87e4:	mov	r3, ip
    87e8:	mov	r6, r8
    87ec:	mov	ip, r9
    87f0:	eor	r1, lr, r5
    87f4:	and	r0, lr, r5
    87f8:	and	r1, r8, r1
    87fc:	eor	r0, r1, r0
    8800:	ror	r1, r8, #2
    8804:	eor	r1, r1, r8, ror #13
    8808:	eor	r1, r1, r8, ror #22
    880c:	add	r8, r1, r0
    8810:	bic	r1, r4, r9
    8814:	and	r0, r9, r3
    8818:	orr	r0, r0, r1
    881c:	ror	r1, r9, #6
    8820:	eor	r1, r1, r9, ror #11
    8824:	add	r0, r0, sl
    8828:	mov	sl, r4
    882c:	eor	r1, r1, r9, ror #25
    8830:	add	r0, r0, r1
    8834:	ldr	r1, [pc, #208]	; 890c <rb_sha256_process_block+0x238>
    8838:	add	r1, pc, r1
    883c:	ldr	r1, [r1, r2, lsl #2]
    8840:	add	r0, r0, r1
    8844:	add	r1, sp, #44	; 0x2c
    8848:	ldr	r1, [r1, r2, lsl #2]
    884c:	add	r2, r2, #1
    8850:	cmp	r2, #64	; 0x40
    8854:	add	r0, r0, r1
    8858:	add	r9, r0, r7
    885c:	add	r8, r8, r0
    8860:	mov	r7, r5
    8864:	bne	87d8 <rb_sha256_process_block+0x104>
    8868:	ldr	r0, [sp, #40]	; 0x28
    886c:	ldr	sl, [sp, #28]
    8870:	add	r0, r3, r0
    8874:	ldr	r3, [sp, #4]
    8878:	add	sl, r4, sl
    887c:	ldr	r4, [sp, #8]
    8880:	str	r0, [sp, #40]	; 0x28
    8884:	ldr	r0, [sp, #24]
    8888:	subs	r3, r3, #16
    888c:	add	r4, r4, #64	; 0x40
    8890:	add	r0, ip, r0
    8894:	mov	ip, r0
    8898:	ldr	r0, [sp, #20]
    889c:	add	r0, r9, r0
    88a0:	mov	r9, r0
    88a4:	ldr	r0, [sp, #36]	; 0x24
    88a8:	add	r0, r5, r0
    88ac:	str	r0, [sp, #36]	; 0x24
    88b0:	ldr	r0, [sp, #16]
    88b4:	add	r0, lr, r0
    88b8:	mov	lr, r0
    88bc:	ldr	r0, [sp, #32]
    88c0:	add	r0, r6, r0
    88c4:	str	r0, [sp, #32]
    88c8:	ldr	r0, [sp, #12]
    88cc:	add	r0, r8, r0
    88d0:	mov	r8, r0
    88d4:	add	r0, sp, #44	; 0x2c
    88d8:	bne	873c <rb_sha256_process_block+0x68>
    88dc:	ldr	r0, [sp]
    88e0:	ldr	r1, [sp, #32]
    88e4:	str	r8, [r0]
    88e8:	stmib	r0, {r1, lr}
    88ec:	add	r2, r0, #12
    88f0:	ldr	r1, [sp, #36]	; 0x24
    88f4:	stm	r2, {r1, r9, ip}
    88f8:	ldr	r1, [sp, #40]	; 0x28
    88fc:	str	r1, [r0, #24]
    8900:	str	sl, [r0, #28]
    8904:	sub	sp, fp, #28
    8908:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    890c:	.word	0x0000cd74

00008910 <rb_sha512_crypt_r>:
    8910:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8914:	add	fp, sp, #28
    8918:	sub	sp, sp, #4
    891c:	vpush	{d8-d15}
    8920:	sub	sp, sp, #912	; 0x390
    8924:	str	r2, [fp, #-960]	; 0xfffffc40
    8928:	str	r3, [fp, #-988]	; 0xfffffc24
    892c:	mov	sl, r0
    8930:	mov	r2, #3
    8934:	mov	r7, r1
    8938:	ldr	r0, [pc, #1700]	; 8fe4 <rb_sha512_crypt_r+0x6d4>
    893c:	add	r0, pc, r0
    8940:	bl	5504 <strncmp@plt>
    8944:	ldr	r1, [pc, #1692]	; 8fe8 <rb_sha512_crypt_r+0x6d8>
    8948:	cmp	r0, #0
    894c:	mov	r2, #7
    8950:	addeq	r7, r7, #3
    8954:	mov	r0, r7
    8958:	add	r1, pc, r1
    895c:	bl	5504 <strncmp@plt>
    8960:	movw	r1, #5000	; 0x1388
    8964:	mov	r4, #0
    8968:	cmp	r0, #0
    896c:	str	r1, [fp, #-932]	; 0xfffffc5c
    8970:	beq	897c <rb_sha512_crypt_r+0x6c>
    8974:	mov	r0, #0
    8978:	b	89c0 <rb_sha512_crypt_r+0xb0>
    897c:	add	r0, r7, #7
    8980:	sub	r1, fp, #576	; 0x240
    8984:	mov	r2, #10
    8988:	bl	5108 <strtoul@plt>
    898c:	ldr	r1, [fp, #-576]	; 0xfffffdc0
    8990:	ldrb	r2, [r1]
    8994:	cmp	r2, #36	; 0x24
    8998:	bne	9954 <rb_sha512_crypt_r+0x1044>
    899c:	movw	r2, #51711	; 0xc9ff
    89a0:	add	r7, r1, #1
    89a4:	movt	r2, #15258	; 0x3b9a
    89a8:	cmp	r0, r2
    89ac:	movcc	r2, r0
    89b0:	mov	r0, #1
    89b4:	cmp	r2, #1000	; 0x3e8
    89b8:	movls	r2, #1000	; 0x3e8
    89bc:	str	r2, [fp, #-932]	; 0xfffffc5c
    89c0:	str	r0, [fp, #-992]	; 0xfffffc20
    89c4:	ldr	r1, [pc, #4084]	; 99c0 <rb_sha512_crypt_r+0x10b0>
    89c8:	mov	r0, r7
    89cc:	add	r1, pc, r1
    89d0:	bl	54d4 <strcspn@plt>
    89d4:	mov	r5, r0
    89d8:	cmp	r0, #16
    89dc:	str	r0, [fp, #-996]	; 0xfffffc1c
    89e0:	mov	r0, sl
    89e4:	movcs	r5, #16
    89e8:	bl	50f0 <strlen@plt>
    89ec:	mov	r6, r0
    89f0:	tst	sl, #7
    89f4:	beq	8a20 <rb_sha512_crypt_r+0x110>
    89f8:	add	r0, r6, #15
    89fc:	bic	r0, r0, #7
    8a00:	sub	r0, sp, r0
    8a04:	add	r4, r0, #8
    8a08:	mov	sp, r0
    8a0c:	mov	r0, r4
    8a10:	mov	r1, sl
    8a14:	mov	r2, r6
    8a18:	bl	5114 <memcpy@plt>
    8a1c:	mov	sl, r4
    8a20:	mov	r9, #0
    8a24:	tst	r7, #7
    8a28:	str	r6, [fp, #-924]	; 0xfffffc64
    8a2c:	str	r4, [fp, #-980]	; 0xfffffc2c
    8a30:	beq	8a64 <rb_sha512_crypt_r+0x154>
    8a34:	add	r0, r5, #15
    8a38:	bic	r0, r0, #7
    8a3c:	sub	r0, sp, r0
    8a40:	add	r4, r0, #8
    8a44:	mov	sp, r0
    8a48:	mov	r0, r4
    8a4c:	mov	r1, r7
    8a50:	mov	r2, r5
    8a54:	bl	5114 <memcpy@plt>
    8a58:	mov	r7, r4
    8a5c:	str	r4, [fp, #-984]	; 0xfffffc28
    8a60:	b	8a6c <rb_sha512_crypt_r+0x15c>
    8a64:	mov	r0, #0
    8a68:	str	r0, [fp, #-984]	; 0xfffffc28
    8a6c:	add	r0, pc, #780	; 0x30c
    8a70:	add	r1, pc, #792	; 0x318
    8a74:	add	r2, pc, #804	; 0x324
    8a78:	sub	r4, fp, #576	; 0x240
    8a7c:	vmov.i32	q8, #0	; 0x00000000
    8a80:	mov	r8, #80	; 0x50
    8a84:	vld1.64	{d10-d11}, [r2]
    8a88:	add	r2, pc, #800	; 0x320
    8a8c:	vld1.64	{d14-d15}, [r1]
    8a90:	add	r3, r4, #64	; 0x40
    8a94:	vld1.64	{d8-d9}, [r0]
    8a98:	add	r0, r4, #16
    8a9c:	ldr	r6, [fp, #-924]	; 0xfffffc64
    8aa0:	vld1.64	{d12-d13}, [r2]
    8aa4:	vst1.64	{d16-d17}, [r3]
    8aa8:	str	r0, [fp, #-940]	; 0xfffffc54
    8aac:	mov	r2, r4
    8ab0:	str	r3, [fp, #-936]	; 0xfffffc58
    8ab4:	vst1.64	{d10-d11}, [r0]
    8ab8:	add	r0, r4, #32
    8abc:	mov	r1, r6
    8ac0:	str	r0, [fp, #-944]	; 0xfffffc50
    8ac4:	vst1.64	{d12-d13}, [r0]
    8ac8:	add	r0, r4, #48	; 0x30
    8acc:	str	r0, [fp, #-948]	; 0xfffffc4c
    8ad0:	vst1.64	{d14-d15}, [r0]
    8ad4:	mov	r0, r4
    8ad8:	vst1.64	{d8-d9}, [r0], r8
    8adc:	str	r9, [fp, #-492]	; 0xfffffe14
    8ae0:	str	r9, [r0]
    8ae4:	mov	r0, sl
    8ae8:	bl	99d4 <rb_sha512_process_bytes>
    8aec:	mov	r0, r7
    8af0:	mov	r1, r5
    8af4:	mov	r2, r4
    8af8:	bl	99d4 <rb_sha512_process_bytes>
    8afc:	sub	r9, fp, #920	; 0x398
    8b00:	mov	r1, #0
    8b04:	vmov.i32	q8, #0	; 0x00000000
    8b08:	mov	r0, r9
    8b0c:	mov	r2, r9
    8b10:	vst1.64	{d8-d9}, [r0], r8
    8b14:	str	r1, [fp, #-836]	; 0xfffffcbc
    8b18:	str	r1, [r0]
    8b1c:	add	r0, r9, #16
    8b20:	mov	r1, r6
    8b24:	str	r0, [fp, #-968]	; 0xfffffc38
    8b28:	vst1.64	{d10-d11}, [r0]
    8b2c:	add	r0, r9, #32
    8b30:	str	r0, [fp, #-956]	; 0xfffffc44
    8b34:	vst1.64	{d12-d13}, [r0]
    8b38:	add	r0, r9, #48	; 0x30
    8b3c:	str	r0, [fp, #-972]	; 0xfffffc34
    8b40:	vst1.64	{d14-d15}, [r0]
    8b44:	add	r0, r9, #64	; 0x40
    8b48:	str	r0, [fp, #-976]	; 0xfffffc30
    8b4c:	vst1.64	{d16-d17}, [r0]
    8b50:	mov	r0, sl
    8b54:	bl	99d4 <rb_sha512_process_bytes>
    8b58:	mov	r0, r7
    8b5c:	mov	r1, r5
    8b60:	mov	r2, r9
    8b64:	str	r7, [fp, #-964]	; 0xfffffc3c
    8b68:	bl	99d4 <rb_sha512_process_bytes>
    8b6c:	mov	r0, sl
    8b70:	mov	r1, r6
    8b74:	mov	r2, r9
    8b78:	bl	99d4 <rb_sha512_process_bytes>
    8b7c:	sub	r1, fp, #168	; 0xa8
    8b80:	mov	r0, r9
    8b84:	bl	9b88 <rb_sha512_finish_ctx>
    8b88:	cmp	r6, #65	; 0x41
    8b8c:	mov	r1, r6
    8b90:	bcc	8bcc <rb_sha512_crypt_r+0x2bc>
    8b94:	sub	r0, r6, #65	; 0x41
    8b98:	sub	r4, fp, #168	; 0xa8
    8b9c:	sub	r7, fp, #576	; 0x240
    8ba0:	bic	r8, r0, #63	; 0x3f
    8ba4:	mov	r0, r4
    8ba8:	mov	r1, #64	; 0x40
    8bac:	mov	r2, r7
    8bb0:	bl	99d4 <rb_sha512_process_bytes>
    8bb4:	sub	r6, r6, #64	; 0x40
    8bb8:	cmp	r6, #64	; 0x40
    8bbc:	bhi	8ba4 <rb_sha512_crypt_r+0x294>
    8bc0:	ldr	r6, [fp, #-924]	; 0xfffffc64
    8bc4:	sub	r0, r6, #64	; 0x40
    8bc8:	sub	r1, r0, r8
    8bcc:	sub	r0, fp, #168	; 0xa8
    8bd0:	sub	r2, fp, #576	; 0x240
    8bd4:	str	r5, [fp, #-952]	; 0xfffffc48
    8bd8:	bl	99d4 <rb_sha512_process_bytes>
    8bdc:	cmp	r6, #0
    8be0:	beq	8c34 <rb_sha512_crypt_r+0x324>
    8be4:	clz	r0, r6
    8be8:	sub	r4, fp, #576	; 0x240
    8bec:	mov	r5, #0
    8bf0:	sub	r7, fp, #168	; 0xa8
    8bf4:	lsr	r8, r0, #5
    8bf8:	tst	r6, #1
    8bfc:	bne	8c0c <rb_sha512_crypt_r+0x2fc>
    8c00:	ldr	r1, [fp, #-924]	; 0xfffffc64
    8c04:	mov	r0, sl
    8c08:	b	8c14 <rb_sha512_crypt_r+0x304>
    8c0c:	mov	r0, r7
    8c10:	mov	r1, #64	; 0x40
    8c14:	mov	r2, r4
    8c18:	bl	99d4 <rb_sha512_process_bytes>
    8c1c:	lsr	r0, r6, #1
    8c20:	cmp	r5, r6, lsr #1
    8c24:	mov	r6, r0
    8c28:	bne	8bf8 <rb_sha512_crypt_r+0x2e8>
    8c2c:	ldr	r6, [fp, #-924]	; 0xfffffc64
    8c30:	b	8c38 <rb_sha512_crypt_r+0x328>
    8c34:	mov	r8, #1
    8c38:	sub	r0, fp, #576	; 0x240
    8c3c:	sub	r1, fp, #168	; 0xa8
    8c40:	bl	9b88 <rb_sha512_finish_ctx>
    8c44:	add	r0, pc, #308	; 0x134
    8c48:	mov	r7, #0
    8c4c:	cmp	r8, #0
    8c50:	vld1.64	{d16-d17}, [r0]
    8c54:	add	r0, pc, #340	; 0x154
    8c58:	add	r1, pc, #320	; 0x140
    8c5c:	vld1.64	{d20-d21}, [r0]
    8c60:	vld1.64	{d18-d19}, [r1]
    8c64:	vst1.64	{d16-d17}, [r9]
    8c68:	add	r0, pc, #288	; 0x120
    8c6c:	ldr	r5, [fp, #-976]	; 0xfffffc30
    8c70:	vld1.64	{d16-d17}, [r0]
    8c74:	ldr	r0, [fp, #-968]	; 0xfffffc38
    8c78:	mov	r1, r5
    8c7c:	vst1.64	{d18-d19}, [r0]
    8c80:	ldr	r0, [fp, #-956]	; 0xfffffc44
    8c84:	vst1.64	{d20-d21}, [r0]
    8c88:	ldr	r0, [fp, #-972]	; 0xfffffc34
    8c8c:	vst1.64	{d16-d17}, [r0]
    8c90:	vmov.i32	q8, #0	; 0x00000000
    8c94:	mov	r0, #20
    8c98:	str	r7, [r5, #16]
    8c9c:	vst1.64	{d16-d17}, [r1], r0
    8ca0:	str	r7, [r1]
    8ca4:	beq	8ccc <rb_sha512_crypt_r+0x3bc>
    8ca8:	sub	r0, fp, #920	; 0x398
    8cac:	sub	r1, fp, #232	; 0xe8
    8cb0:	bl	9b88 <rb_sha512_finish_ctx>
    8cb4:	add	r0, r6, #7
    8cb8:	bic	r0, r0, #7
    8cbc:	sub	r0, sp, r0
    8cc0:	mov	sp, r0
    8cc4:	str	r0, [fp, #-928]	; 0xfffffc60
    8cc8:	b	8dc8 <rb_sha512_crypt_r+0x4b8>
    8ccc:	sub	r7, fp, #920	; 0x398
    8cd0:	mov	r4, r6
    8cd4:	mov	r0, sl
    8cd8:	mov	r1, r6
    8cdc:	mov	r2, r7
    8ce0:	bl	99d4 <rb_sha512_process_bytes>
    8ce4:	subs	r4, r4, #1
    8ce8:	bne	8cd4 <rb_sha512_crypt_r+0x3c4>
    8cec:	sub	r8, fp, #232	; 0xe8
    8cf0:	sub	r0, fp, #920	; 0x398
    8cf4:	mov	r1, r8
    8cf8:	bl	9b88 <rb_sha512_finish_ctx>
    8cfc:	add	r0, r6, #7
    8d00:	bic	r0, r0, #7
    8d04:	sub	lr, sp, r0
    8d08:	mov	sp, lr
    8d0c:	cmp	r6, #64	; 0x40
    8d10:	str	lr, [fp, #-928]	; 0xfffffc60
    8d14:	bcc	8dc0 <rb_sha512_crypt_r+0x4b0>
    8d18:	sub	r0, r6, #64	; 0x40
    8d1c:	mov	sl, #0
    8d20:	str	r0, [fp, #-1000]	; 0xfffffc18
    8d24:	bic	r0, r0, #63	; 0x3f
    8d28:	str	r0, [fp, #-1004]	; 0xfffffc14
    8d2c:	add	r0, lr, r0
    8d30:	add	r0, r0, #64	; 0x40
    8d34:	mov	r7, r8
    8d38:	sub	r6, lr, sl
    8d3c:	sub	sl, sl, #64	; 0x40
    8d40:	ldm	r7!, {r1, r2, r3, r4, r5}
    8d44:	stmia	r6!, {r1, r2, r3, r4, r5}
    8d48:	ldm	r7!, {r1, r2, r3, r4, r5}
    8d4c:	stmia	r6!, {r1, r2, r3, r4, r5}
    8d50:	ldm	r7, {r1, r2, r3, r4, r5, ip}
    8d54:	stm	r6, {r1, r2, r3, r4, r5, ip}
    8d58:	ldr	r1, [fp, #-924]	; 0xfffffc64
    8d5c:	add	r1, r1, sl
    8d60:	cmp	r1, #63	; 0x3f
    8d64:	bhi	8d34 <rb_sha512_crypt_r+0x424>
    8d68:	ldr	r1, [fp, #-1000]	; 0xfffffc18
    8d6c:	ldr	r2, [fp, #-1004]	; 0xfffffc14
    8d70:	ldr	r5, [fp, #-976]	; 0xfffffc30
    8d74:	sub	r7, r1, r2
    8d78:	b	8dc8 <rb_sha512_crypt_r+0x4b8>
    8d7c:	nop	{0}
    8d80:	.word	0xf3bcc908
    8d84:	.word	0x6a09e667
    8d88:	.word	0x84caa73b
    8d8c:	.word	0xbb67ae85
    8d90:	.word	0xfb41bd6b
    8d94:	.word	0x1f83d9ab
    8d98:	.word	0x137e2179
    8d9c:	.word	0x5be0cd19
    8da0:	.word	0xfe94f82b
    8da4:	.word	0x3c6ef372
    8da8:	.word	0x5f1d36f1
    8dac:	.word	0xa54ff53a
    8db0:	.word	0xade682d1
    8db4:	.word	0x510e527f
    8db8:	.word	0x2b3e6c1f
    8dbc:	.word	0x9b05688c
    8dc0:	mov	r0, lr
    8dc4:	mov	r7, r6
    8dc8:	sub	r1, fp, #232	; 0xe8
    8dcc:	mov	r2, r7
    8dd0:	bl	5114 <memcpy@plt>
    8dd4:	sub	r0, pc, #92	; 0x5c
    8dd8:	mov	r4, #0
    8ddc:	vld1.64	{d16-d17}, [r0]
    8de0:	sub	r0, pc, #72	; 0x48
    8de4:	vld1.64	{d18-d19}, [r0]
    8de8:	vst1.64	{d16-d17}, [r9]
    8dec:	sub	r0, pc, #68	; 0x44
    8df0:	vld1.64	{d16-d17}, [r0]
    8df4:	ldr	r0, [fp, #-968]	; 0xfffffc38
    8df8:	vst1.64	{d18-d19}, [r0]
    8dfc:	sub	r0, pc, #116	; 0x74
    8e00:	ldr	r6, [fp, #-964]	; 0xfffffc3c
    8e04:	vld1.64	{d18-d19}, [r0]
    8e08:	ldr	r0, [fp, #-956]	; 0xfffffc44
    8e0c:	vst1.64	{d16-d17}, [r0]
    8e10:	ldr	r0, [fp, #-972]	; 0xfffffc34
    8e14:	vmov.i32	q8, #0	; 0x00000000
    8e18:	vst1.64	{d18-d19}, [r0]
    8e1c:	mov	r0, #20
    8e20:	str	r4, [r5, #16]
    8e24:	vst1.64	{d16-d17}, [r5], r0
    8e28:	str	r4, [r5]
    8e2c:	ldr	r5, [fp, #-952]	; 0xfffffc48
    8e30:	mov	r0, r6
    8e34:	mov	r1, r5
    8e38:	mov	r2, r9
    8e3c:	bl	99d4 <rb_sha512_process_bytes>
    8e40:	ldrb	r0, [fp, #-168]	; 0xffffff58
    8e44:	add	r4, r4, #1
    8e48:	add	r0, r0, #16
    8e4c:	cmp	r4, r0
    8e50:	bcc	8e30 <rb_sha512_crypt_r+0x520>
    8e54:	sub	r0, fp, #920	; 0x398
    8e58:	sub	r1, fp, #232	; 0xe8
    8e5c:	bl	9b88 <rb_sha512_finish_ctx>
    8e60:	add	r0, r5, #7
    8e64:	bic	r0, r0, #7
    8e68:	sub	r4, sp, r0
    8e6c:	mov	sp, r4
    8e70:	cmp	r5, #64	; 0x40
    8e74:	sub	r9, fp, #576	; 0x240
    8e78:	bcc	8ec0 <rb_sha512_crypt_r+0x5b0>
    8e7c:	ldr	r6, [fp, #-996]	; 0xfffffc1c
    8e80:	mvn	r1, #64	; 0x40
    8e84:	sub	r5, fp, #232	; 0xe8
    8e88:	mov	r7, r4
    8e8c:	mvn	r0, r6
    8e90:	cmn	r0, #17
    8e94:	mvnls	r0, #16
    8e98:	sub	r8, r1, r0
    8e9c:	mov	r0, r7
    8ea0:	mov	r1, r5
    8ea4:	mov	r2, #64	; 0x40
    8ea8:	bl	5114 <memcpy@plt>
    8eac:	sub	r6, r6, #64	; 0x40
    8eb0:	add	r7, r7, #64	; 0x40
    8eb4:	cmp	r6, #63	; 0x3f
    8eb8:	bhi	8e9c <rb_sha512_crypt_r+0x58c>
    8ebc:	add	r5, r8, #64	; 0x40
    8ec0:	sub	r1, fp, #232	; 0xe8
    8ec4:	mov	r0, r4
    8ec8:	mov	r2, r5
    8ecc:	str	r4, [fp, #-956]	; 0xfffffc44
    8ed0:	bl	5114 <memcpy@plt>
    8ed4:	ldr	r0, [fp, #-932]	; 0xfffffc5c
    8ed8:	cmp	r0, #0
    8edc:	beq	9018 <rb_sha512_crypt_r+0x708>
    8ee0:	mov	r7, #0
    8ee4:	vmov.i32	q4, #0	; 0x00000000
    8ee8:	sub	r5, fp, #168	; 0xa8
    8eec:	mov	r8, #0
    8ef0:	sub	r0, pc, #376	; 0x178
    8ef4:	mov	r2, r9
    8ef8:	ands	sl, r8, #1
    8efc:	vld1.64	{d16-d17}, [r0]
    8f00:	sub	r0, pc, #344	; 0x158
    8f04:	sub	r1, pc, #364	; 0x16c
    8f08:	vld1.64	{d20-d21}, [r0]
    8f0c:	vld1.64	{d18-d19}, [r1]
    8f10:	mov	r1, #20
    8f14:	vst1.64	{d16-d17}, [r9]
    8f18:	sub	r0, pc, #400	; 0x190
    8f1c:	vld1.64	{d16-d17}, [r0]
    8f20:	ldr	r0, [fp, #-940]	; 0xfffffc54
    8f24:	vst1.64	{d18-d19}, [r0]
    8f28:	ldr	r0, [fp, #-944]	; 0xfffffc50
    8f2c:	vst1.64	{d20-d21}, [r0]
    8f30:	ldr	r0, [fp, #-948]	; 0xfffffc4c
    8f34:	vst1.64	{d16-d17}, [r0]
    8f38:	ldr	r0, [fp, #-936]	; 0xfffffc58
    8f3c:	str	r7, [r0, #16]
    8f40:	vst1.64	{d8-d9}, [r0], r1
    8f44:	str	r7, [r0]
    8f48:	movw	r0, #18725	; 0x4925
    8f4c:	movt	r0, #9362	; 0x2492
    8f50:	umull	r0, r1, r8, r0
    8f54:	sub	r0, r8, r1
    8f58:	add	r6, r1, r0, lsr #1
    8f5c:	lsr	r0, r6, #2
    8f60:	lsl	r9, r0, #3
    8f64:	movw	r0, #43691	; 0xaaab
    8f68:	movt	r0, #43690	; 0xaaaa
    8f6c:	umull	r0, r1, r8, r0
    8f70:	lsr	r0, r1, #1
    8f74:	add	r4, r0, r0, lsl #1
    8f78:	beq	8f88 <rb_sha512_crypt_r+0x678>
    8f7c:	ldr	r0, [fp, #-928]	; 0xfffffc60
    8f80:	ldr	r1, [fp, #-924]	; 0xfffffc64
    8f84:	b	8f90 <rb_sha512_crypt_r+0x680>
    8f88:	mov	r0, r5
    8f8c:	mov	r1, #64	; 0x40
    8f90:	bl	99d4 <rb_sha512_process_bytes>
    8f94:	sub	r6, r9, r6, lsr #2
    8f98:	cmp	r4, r8
    8f9c:	sub	r9, fp, #576	; 0x240
    8fa0:	beq	8fb4 <rb_sha512_crypt_r+0x6a4>
    8fa4:	ldr	r0, [fp, #-956]	; 0xfffffc44
    8fa8:	ldr	r1, [fp, #-952]	; 0xfffffc48
    8fac:	mov	r2, r9
    8fb0:	bl	99d4 <rb_sha512_process_bytes>
    8fb4:	ldr	r4, [fp, #-924]	; 0xfffffc64
    8fb8:	cmp	r6, r8
    8fbc:	beq	8fd0 <rb_sha512_crypt_r+0x6c0>
    8fc0:	ldr	r0, [fp, #-928]	; 0xfffffc60
    8fc4:	mov	r1, r4
    8fc8:	mov	r2, r9
    8fcc:	bl	99d4 <rb_sha512_process_bytes>
    8fd0:	cmp	sl, #0
    8fd4:	beq	8fec <rb_sha512_crypt_r+0x6dc>
    8fd8:	mov	r0, r5
    8fdc:	mov	r1, #64	; 0x40
    8fe0:	b	8ff4 <rb_sha512_crypt_r+0x6e4>
    8fe4:	.word	0x0000cdb4
    8fe8:	.word	0x0000cd9c
    8fec:	ldr	r0, [fp, #-928]	; 0xfffffc60
    8ff0:	mov	r1, r4
    8ff4:	mov	r2, r9
    8ff8:	bl	99d4 <rb_sha512_process_bytes>
    8ffc:	mov	r0, r9
    9000:	mov	r1, r5
    9004:	bl	9b88 <rb_sha512_finish_ctx>
    9008:	ldr	r0, [fp, #-932]	; 0xfffffc5c
    900c:	add	r8, r8, #1
    9010:	cmp	r0, r8
    9014:	bne	8ef0 <rb_sha512_crypt_r+0x5e0>
    9018:	ldr	r6, [fp, #-988]	; 0xfffffc24
    901c:	ldr	r4, [fp, #-960]	; 0xfffffc40
    9020:	mov	r1, #0
    9024:	bic	r7, r6, r6, asr #31
    9028:	mov	r0, r4
    902c:	mov	r2, r7
    9030:	bl	4f4c <memset@plt>
    9034:	ldr	r1, [pc, #2440]	; 99c4 <rb_sha512_crypt_r+0x10b4>
    9038:	mov	r0, r4
    903c:	mov	r2, r7
    9040:	add	r1, pc, r1
    9044:	bl	4ea4 <strncpy@plt>
    9048:	mov	r0, r4
    904c:	bl	50f0 <strlen@plt>
    9050:	adds	r5, r4, r0
    9054:	ldr	r0, [fp, #-992]	; 0xfffffc20
    9058:	sub	sl, r6, #3
    905c:	addeq	r5, r4, r7
    9060:	cmp	r0, #0
    9064:	beq	909c <rb_sha512_crypt_r+0x78c>
    9068:	sub	sp, sp, #8
    906c:	ldr	r0, [fp, #-932]	; 0xfffffc5c
    9070:	bic	r1, sl, sl, asr #31
    9074:	str	r0, [sp]
    9078:	mov	r0, r5
    907c:	ldr	r2, [pc, #2372]	; 99c8 <rb_sha512_crypt_r+0x10b8>
    9080:	ldr	r3, [pc, #2372]	; 99cc <rb_sha512_crypt_r+0x10bc>
    9084:	add	r2, pc, r2
    9088:	add	r3, pc, r3
    908c:	bl	54a4 <snprintf@plt>
    9090:	add	sp, sp, #8
    9094:	sub	sl, sl, r0
    9098:	add	r5, r5, r0
    909c:	ldr	r6, [fp, #-952]	; 0xfffffc48
    90a0:	bic	r8, sl, sl, asr #31
    90a4:	mov	r0, #0
    90a8:	mov	r1, #0
    90ac:	str	r0, [fp, #-932]	; 0xfffffc5c
    90b0:	mov	r0, r5
    90b4:	cmp	r8, r6
    90b8:	mov	r7, r6
    90bc:	movcc	r7, r8
    90c0:	mov	r2, r7
    90c4:	bl	4f4c <memset@plt>
    90c8:	ldr	r1, [fp, #-964]	; 0xfffffc3c
    90cc:	mov	r0, r5
    90d0:	mov	r2, r7
    90d4:	bl	4ea4 <strncpy@plt>
    90d8:	ldr	r4, [fp, #-960]	; 0xfffffc40
    90dc:	mov	r0, r4
    90e0:	bl	50f0 <strlen@plt>
    90e4:	adds	r5, r4, r0
    90e8:	sub	r0, sl, r7
    90ec:	addeq	r5, r4, r6
    90f0:	cmp	r0, #1
    90f4:	blt	9834 <rb_sha512_crypt_r+0xf24>
    90f8:	mov	r0, #36	; 0x24
    90fc:	strb	r0, [r5]
    9100:	beq	9834 <rb_sha512_crypt_r+0xf24>
    9104:	ldr	r0, [fp, #-996]	; 0xfffffc1c
    9108:	mvn	lr, r8
    910c:	ldrb	r2, [fp, #-147]	; 0xffffff6d
    9110:	ldrb	r3, [fp, #-126]	; 0xffffff82
    9114:	mov	r7, #0
    9118:	mov	r1, sl
    911c:	mvn	r8, r0
    9120:	lsl	r2, r2, #8
    9124:	cmp	lr, r8
    9128:	mov	r0, r8
    912c:	movhi	r0, lr
    9130:	cmn	r0, #17
    9134:	mvnls	r0, #16
    9138:	add	r6, sl, r0
    913c:	ldrb	r0, [fp, #-168]	; 0xffffff58
    9140:	ldr	ip, [pc, #2184]	; 99d0 <rb_sha512_crypt_r+0x10c0>
    9144:	orr	r0, r2, r0, lsl #16
    9148:	add	ip, pc, ip
    914c:	orr	r0, r0, r3
    9150:	add	r3, r5, #1
    9154:	and	r2, r0, #63	; 0x3f
    9158:	add	r4, r6, r7
    915c:	ldrb	r2, [ip, r2]
    9160:	cmp	r4, #2
    9164:	strb	r2, [r3, -r7]
    9168:	sub	r2, r7, #1
    916c:	blt	9184 <rb_sha512_crypt_r+0x874>
    9170:	add	r4, r7, #4
    9174:	lsr	r0, r0, #6
    9178:	mov	r7, r2
    917c:	cmp	r4, #1
    9180:	bhi	9154 <rb_sha512_crypt_r+0x844>
    9184:	cmp	lr, r8
    9188:	mov	r4, r8
    918c:	mvn	r0, #16
    9190:	movhi	r4, lr
    9194:	cmn	r4, #17
    9198:	movls	r4, r0
    919c:	add	r4, sl, r4
    91a0:	add	r4, r4, r2
    91a4:	add	r4, r4, #1
    91a8:	cmp	r4, #2
    91ac:	blt	9834 <rb_sha512_crypt_r+0xf24>
    91b0:	cmp	lr, r8
    91b4:	mov	r4, r8
    91b8:	ldrb	r7, [fp, #-125]	; 0xffffff83
    91bc:	mov	r1, sl
    91c0:	movhi	r4, lr
    91c4:	cmn	r4, #17
    91c8:	movhi	r0, r4
    91cc:	ldrb	r4, [fp, #-146]	; 0xffffff6e
    91d0:	add	r6, sl, r0
    91d4:	ldrb	r0, [fp, #-167]	; 0xffffff59
    91d8:	lsl	r7, r7, #8
    91dc:	orr	r4, r7, r4, lsl #16
    91e0:	orr	r4, r4, r0
    91e4:	mvn	r0, #0
    91e8:	and	r7, r4, #63	; 0x3f
    91ec:	sub	r1, r5, r2
    91f0:	ldrb	r7, [ip, r7]
    91f4:	strb	r7, [r1, #1]
    91f8:	add	r1, r6, r2
    91fc:	sub	r2, r2, #1
    9200:	cmp	r1, #2
    9204:	blt	921c <rb_sha512_crypt_r+0x90c>
    9208:	add	r1, r0, #5
    920c:	sub	r0, r0, #1
    9210:	lsr	r4, r4, #6
    9214:	cmp	r1, #1
    9218:	bhi	91e8 <rb_sha512_crypt_r+0x8d8>
    921c:	cmp	lr, r8
    9220:	mov	r1, r8
    9224:	mvn	r0, #16
    9228:	movhi	r1, lr
    922c:	cmn	r1, #17
    9230:	movls	r1, r0
    9234:	add	r1, sl, r1
    9238:	add	r1, r1, r2
    923c:	add	r1, r1, #1
    9240:	cmp	r1, #2
    9244:	blt	9834 <rb_sha512_crypt_r+0xf24>
    9248:	cmp	lr, r8
    924c:	mov	r1, r8
    9250:	ldrb	r4, [fp, #-124]	; 0xffffff84
    9254:	mov	r5, #4
    9258:	movhi	r1, lr
    925c:	cmn	r1, #17
    9260:	movhi	r0, r1
    9264:	ldrb	r1, [fp, #-145]	; 0xffffff6f
    9268:	add	r6, sl, r0
    926c:	ldrb	r0, [fp, #-166]	; 0xffffff5a
    9270:	lsl	r0, r0, #8
    9274:	orr	r0, r0, r4, lsl #16
    9278:	orr	r0, r0, r1
    927c:	and	r1, r0, #63	; 0x3f
    9280:	ldrb	r1, [ip, r1]
    9284:	strb	r1, [r3, -r2]
    9288:	add	r1, r6, r2
    928c:	sub	r2, r2, #1
    9290:	cmp	r1, #2
    9294:	blt	92a4 <rb_sha512_crypt_r+0x994>
    9298:	lsr	r0, r0, #6
    929c:	subs	r5, r5, #1
    92a0:	bhi	927c <rb_sha512_crypt_r+0x96c>
    92a4:	cmp	lr, r8
    92a8:	movhi	r8, lr
    92ac:	cmn	r8, #17
    92b0:	mvnls	r8, #16
    92b4:	add	r0, sl, r8
    92b8:	add	r0, r0, r2
    92bc:	add	r1, r0, #1
    92c0:	cmp	r1, #2
    92c4:	blt	9834 <rb_sha512_crypt_r+0xf24>
    92c8:	sub	r2, r3, r2
    92cc:	ldrb	r3, [fp, #-144]	; 0xffffff70
    92d0:	ldrb	r0, [fp, #-165]	; 0xffffff5b
    92d4:	ldrb	r7, [fp, #-123]	; 0xffffff85
    92d8:	lsl	r3, r3, #8
    92dc:	orr	r0, r3, r0, lsl #16
    92e0:	orr	r3, r0, r7
    92e4:	mov	r0, #4
    92e8:	and	r7, r3, #63	; 0x3f
    92ec:	sub	r1, r1, #1
    92f0:	ldrb	r7, [ip, r7]
    92f4:	cmp	r1, #2
    92f8:	strb	r7, [r2], #1
    92fc:	blt	930c <rb_sha512_crypt_r+0x9fc>
    9300:	lsr	r3, r3, #6
    9304:	subs	r0, r0, #1
    9308:	bhi	92e8 <rb_sha512_crypt_r+0x9d8>
    930c:	cmp	r1, #2
    9310:	blt	9834 <rb_sha512_crypt_r+0xf24>
    9314:	ldrb	r7, [fp, #-122]	; 0xffffff86
    9318:	ldrb	r3, [fp, #-143]	; 0xffffff71
    931c:	ldrb	r0, [fp, #-164]	; 0xffffff5c
    9320:	lsl	r7, r7, #8
    9324:	orr	r3, r7, r3, lsl #16
    9328:	orr	r3, r3, r0
    932c:	mov	r0, #4
    9330:	and	r7, r3, #63	; 0x3f
    9334:	sub	r1, r1, #1
    9338:	ldrb	r7, [ip, r7]
    933c:	cmp	r1, #2
    9340:	strb	r7, [r2], #1
    9344:	blt	9354 <rb_sha512_crypt_r+0xa44>
    9348:	lsr	r3, r3, #6
    934c:	subs	r0, r0, #1
    9350:	bhi	9330 <rb_sha512_crypt_r+0xa20>
    9354:	cmp	r1, #2
    9358:	blt	9834 <rb_sha512_crypt_r+0xf24>
    935c:	ldrb	r0, [fp, #-163]	; 0xffffff5d
    9360:	ldrb	r7, [fp, #-121]	; 0xffffff87
    9364:	ldrb	r3, [fp, #-142]	; 0xffffff72
    9368:	lsl	r0, r0, #8
    936c:	orr	r0, r0, r7, lsl #16
    9370:	orr	r3, r0, r3
    9374:	mov	r0, #4
    9378:	and	r7, r3, #63	; 0x3f
    937c:	sub	r1, r1, #1
    9380:	ldrb	r7, [ip, r7]
    9384:	cmp	r1, #2
    9388:	strb	r7, [r2], #1
    938c:	blt	939c <rb_sha512_crypt_r+0xa8c>
    9390:	lsr	r3, r3, #6
    9394:	subs	r0, r0, #1
    9398:	bhi	9378 <rb_sha512_crypt_r+0xa68>
    939c:	cmp	r1, #2
    93a0:	blt	9834 <rb_sha512_crypt_r+0xf24>
    93a4:	ldrb	r3, [fp, #-141]	; 0xffffff73
    93a8:	ldrb	r0, [fp, #-162]	; 0xffffff5e
    93ac:	ldrb	r7, [fp, #-120]	; 0xffffff88
    93b0:	lsl	r3, r3, #8
    93b4:	orr	r0, r3, r0, lsl #16
    93b8:	orr	r3, r0, r7
    93bc:	mov	r0, #4
    93c0:	and	r7, r3, #63	; 0x3f
    93c4:	sub	r1, r1, #1
    93c8:	ldrb	r7, [ip, r7]
    93cc:	cmp	r1, #2
    93d0:	strb	r7, [r2], #1
    93d4:	blt	93e4 <rb_sha512_crypt_r+0xad4>
    93d8:	lsr	r3, r3, #6
    93dc:	subs	r0, r0, #1
    93e0:	bhi	93c0 <rb_sha512_crypt_r+0xab0>
    93e4:	cmp	r1, #2
    93e8:	blt	9834 <rb_sha512_crypt_r+0xf24>
    93ec:	ldrb	r7, [fp, #-119]	; 0xffffff89
    93f0:	ldrb	r3, [fp, #-140]	; 0xffffff74
    93f4:	ldrb	r0, [fp, #-161]	; 0xffffff5f
    93f8:	lsl	r7, r7, #8
    93fc:	orr	r3, r7, r3, lsl #16
    9400:	orr	r3, r3, r0
    9404:	mov	r0, #4
    9408:	and	r7, r3, #63	; 0x3f
    940c:	sub	r1, r1, #1
    9410:	ldrb	r7, [ip, r7]
    9414:	cmp	r1, #2
    9418:	strb	r7, [r2], #1
    941c:	blt	942c <rb_sha512_crypt_r+0xb1c>
    9420:	lsr	r3, r3, #6
    9424:	subs	r0, r0, #1
    9428:	bhi	9408 <rb_sha512_crypt_r+0xaf8>
    942c:	cmp	r1, #2
    9430:	blt	9834 <rb_sha512_crypt_r+0xf24>
    9434:	ldrb	r0, [fp, #-160]	; 0xffffff60
    9438:	ldrb	r7, [fp, #-118]	; 0xffffff8a
    943c:	ldrb	r3, [fp, #-139]	; 0xffffff75
    9440:	lsl	r0, r0, #8
    9444:	orr	r0, r0, r7, lsl #16
    9448:	orr	r3, r0, r3
    944c:	mov	r0, #4
    9450:	and	r7, r3, #63	; 0x3f
    9454:	sub	r1, r1, #1
    9458:	ldrb	r7, [ip, r7]
    945c:	cmp	r1, #2
    9460:	strb	r7, [r2], #1
    9464:	blt	9474 <rb_sha512_crypt_r+0xb64>
    9468:	lsr	r3, r3, #6
    946c:	subs	r0, r0, #1
    9470:	bhi	9450 <rb_sha512_crypt_r+0xb40>
    9474:	cmp	r1, #2
    9478:	blt	9834 <rb_sha512_crypt_r+0xf24>
    947c:	ldrb	r3, [fp, #-138]	; 0xffffff76
    9480:	ldrb	r0, [fp, #-159]	; 0xffffff61
    9484:	ldrb	r7, [fp, #-117]	; 0xffffff8b
    9488:	lsl	r3, r3, #8
    948c:	orr	r0, r3, r0, lsl #16
    9490:	orr	r3, r0, r7
    9494:	mov	r0, #4
    9498:	and	r7, r3, #63	; 0x3f
    949c:	sub	r1, r1, #1
    94a0:	ldrb	r7, [ip, r7]
    94a4:	cmp	r1, #2
    94a8:	strb	r7, [r2], #1
    94ac:	blt	94bc <rb_sha512_crypt_r+0xbac>
    94b0:	lsr	r3, r3, #6
    94b4:	subs	r0, r0, #1
    94b8:	bhi	9498 <rb_sha512_crypt_r+0xb88>
    94bc:	cmp	r1, #2
    94c0:	blt	9834 <rb_sha512_crypt_r+0xf24>
    94c4:	ldrb	r7, [fp, #-116]	; 0xffffff8c
    94c8:	ldrb	r3, [fp, #-137]	; 0xffffff77
    94cc:	ldrb	r0, [fp, #-158]	; 0xffffff62
    94d0:	lsl	r7, r7, #8
    94d4:	orr	r3, r7, r3, lsl #16
    94d8:	orr	r3, r3, r0
    94dc:	mov	r0, #4
    94e0:	and	r7, r3, #63	; 0x3f
    94e4:	sub	r1, r1, #1
    94e8:	ldrb	r7, [ip, r7]
    94ec:	cmp	r1, #2
    94f0:	strb	r7, [r2], #1
    94f4:	blt	9504 <rb_sha512_crypt_r+0xbf4>
    94f8:	lsr	r3, r3, #6
    94fc:	subs	r0, r0, #1
    9500:	bhi	94e0 <rb_sha512_crypt_r+0xbd0>
    9504:	cmp	r1, #2
    9508:	blt	9834 <rb_sha512_crypt_r+0xf24>
    950c:	ldrb	r0, [fp, #-157]	; 0xffffff63
    9510:	ldrb	r7, [fp, #-115]	; 0xffffff8d
    9514:	ldrb	r3, [fp, #-136]	; 0xffffff78
    9518:	lsl	r0, r0, #8
    951c:	orr	r0, r0, r7, lsl #16
    9520:	orr	r3, r0, r3
    9524:	mov	r0, #4
    9528:	and	r7, r3, #63	; 0x3f
    952c:	sub	r1, r1, #1
    9530:	ldrb	r7, [ip, r7]
    9534:	cmp	r1, #2
    9538:	strb	r7, [r2], #1
    953c:	blt	954c <rb_sha512_crypt_r+0xc3c>
    9540:	lsr	r3, r3, #6
    9544:	subs	r0, r0, #1
    9548:	bhi	9528 <rb_sha512_crypt_r+0xc18>
    954c:	cmp	r1, #2
    9550:	blt	9834 <rb_sha512_crypt_r+0xf24>
    9554:	ldrb	r3, [fp, #-135]	; 0xffffff79
    9558:	ldrb	r0, [fp, #-156]	; 0xffffff64
    955c:	ldrb	r7, [fp, #-114]	; 0xffffff8e
    9560:	lsl	r3, r3, #8
    9564:	orr	r0, r3, r0, lsl #16
    9568:	orr	r3, r0, r7
    956c:	mov	r0, #4
    9570:	and	r7, r3, #63	; 0x3f
    9574:	sub	r1, r1, #1
    9578:	ldrb	r7, [ip, r7]
    957c:	cmp	r1, #2
    9580:	strb	r7, [r2], #1
    9584:	blt	9594 <rb_sha512_crypt_r+0xc84>
    9588:	lsr	r3, r3, #6
    958c:	subs	r0, r0, #1
    9590:	bhi	9570 <rb_sha512_crypt_r+0xc60>
    9594:	cmp	r1, #2
    9598:	blt	9834 <rb_sha512_crypt_r+0xf24>
    959c:	ldrb	r7, [fp, #-113]	; 0xffffff8f
    95a0:	ldrb	r3, [fp, #-134]	; 0xffffff7a
    95a4:	ldrb	r0, [fp, #-155]	; 0xffffff65
    95a8:	lsl	r7, r7, #8
    95ac:	orr	r3, r7, r3, lsl #16
    95b0:	orr	r3, r3, r0
    95b4:	mov	r0, #4
    95b8:	and	r7, r3, #63	; 0x3f
    95bc:	sub	r1, r1, #1
    95c0:	ldrb	r7, [ip, r7]
    95c4:	cmp	r1, #2
    95c8:	strb	r7, [r2], #1
    95cc:	blt	95dc <rb_sha512_crypt_r+0xccc>
    95d0:	lsr	r3, r3, #6
    95d4:	subs	r0, r0, #1
    95d8:	bhi	95b8 <rb_sha512_crypt_r+0xca8>
    95dc:	cmp	r1, #2
    95e0:	sub	r9, fp, #576	; 0x240
    95e4:	blt	9834 <rb_sha512_crypt_r+0xf24>
    95e8:	ldrb	r0, [fp, #-154]	; 0xffffff66
    95ec:	ldrb	r7, [fp, #-112]	; 0xffffff90
    95f0:	ldrb	r3, [fp, #-133]	; 0xffffff7b
    95f4:	lsl	r0, r0, #8
    95f8:	orr	r0, r0, r7, lsl #16
    95fc:	orr	r3, r0, r3
    9600:	mov	r0, #4
    9604:	and	r7, r3, #63	; 0x3f
    9608:	sub	r1, r1, #1
    960c:	ldrb	r7, [ip, r7]
    9610:	cmp	r1, #2
    9614:	strb	r7, [r2], #1
    9618:	blt	9628 <rb_sha512_crypt_r+0xd18>
    961c:	lsr	r3, r3, #6
    9620:	subs	r0, r0, #1
    9624:	bhi	9604 <rb_sha512_crypt_r+0xcf4>
    9628:	cmp	r1, #2
    962c:	sub	r9, fp, #576	; 0x240
    9630:	blt	9834 <rb_sha512_crypt_r+0xf24>
    9634:	ldrb	r3, [fp, #-132]	; 0xffffff7c
    9638:	ldrb	r0, [fp, #-153]	; 0xffffff67
    963c:	ldrb	r7, [fp, #-111]	; 0xffffff91
    9640:	lsl	r3, r3, #8
    9644:	orr	r0, r3, r0, lsl #16
    9648:	orr	r3, r0, r7
    964c:	mov	r0, #4
    9650:	and	r7, r3, #63	; 0x3f
    9654:	sub	r1, r1, #1
    9658:	ldrb	r7, [ip, r7]
    965c:	cmp	r1, #2
    9660:	strb	r7, [r2], #1
    9664:	blt	9674 <rb_sha512_crypt_r+0xd64>
    9668:	lsr	r3, r3, #6
    966c:	subs	r0, r0, #1
    9670:	bhi	9650 <rb_sha512_crypt_r+0xd40>
    9674:	cmp	r1, #2
    9678:	sub	r9, fp, #576	; 0x240
    967c:	blt	9834 <rb_sha512_crypt_r+0xf24>
    9680:	ldrb	r7, [fp, #-110]	; 0xffffff92
    9684:	ldrb	r3, [fp, #-131]	; 0xffffff7d
    9688:	ldrb	r0, [fp, #-152]	; 0xffffff68
    968c:	lsl	r7, r7, #8
    9690:	orr	r3, r7, r3, lsl #16
    9694:	orr	r3, r3, r0
    9698:	mov	r0, #4
    969c:	and	r7, r3, #63	; 0x3f
    96a0:	sub	r1, r1, #1
    96a4:	ldrb	r7, [ip, r7]
    96a8:	cmp	r1, #2
    96ac:	strb	r7, [r2], #1
    96b0:	blt	96c0 <rb_sha512_crypt_r+0xdb0>
    96b4:	lsr	r3, r3, #6
    96b8:	subs	r0, r0, #1
    96bc:	bhi	969c <rb_sha512_crypt_r+0xd8c>
    96c0:	cmp	r1, #2
    96c4:	sub	r9, fp, #576	; 0x240
    96c8:	blt	9834 <rb_sha512_crypt_r+0xf24>
    96cc:	ldrb	r0, [fp, #-151]	; 0xffffff69
    96d0:	ldrb	r7, [fp, #-109]	; 0xffffff93
    96d4:	ldrb	r3, [fp, #-130]	; 0xffffff7e
    96d8:	lsl	r0, r0, #8
    96dc:	orr	r0, r0, r7, lsl #16
    96e0:	orr	r3, r0, r3
    96e4:	mov	r0, #4
    96e8:	and	r7, r3, #63	; 0x3f
    96ec:	sub	r1, r1, #1
    96f0:	ldrb	r7, [ip, r7]
    96f4:	cmp	r1, #2
    96f8:	strb	r7, [r2], #1
    96fc:	blt	970c <rb_sha512_crypt_r+0xdfc>
    9700:	lsr	r3, r3, #6
    9704:	subs	r0, r0, #1
    9708:	bhi	96e8 <rb_sha512_crypt_r+0xdd8>
    970c:	cmp	r1, #2
    9710:	sub	r9, fp, #576	; 0x240
    9714:	blt	9834 <rb_sha512_crypt_r+0xf24>
    9718:	ldrb	r3, [fp, #-129]	; 0xffffff7f
    971c:	ldrb	r0, [fp, #-150]	; 0xffffff6a
    9720:	ldrb	r7, [fp, #-108]	; 0xffffff94
    9724:	lsl	r3, r3, #8
    9728:	orr	r0, r3, r0, lsl #16
    972c:	orr	r3, r0, r7
    9730:	mov	r0, #4
    9734:	and	r7, r3, #63	; 0x3f
    9738:	sub	r1, r1, #1
    973c:	ldrb	r7, [ip, r7]
    9740:	cmp	r1, #2
    9744:	strb	r7, [r2], #1
    9748:	blt	9758 <rb_sha512_crypt_r+0xe48>
    974c:	lsr	r3, r3, #6
    9750:	subs	r0, r0, #1
    9754:	bhi	9734 <rb_sha512_crypt_r+0xe24>
    9758:	cmp	r1, #2
    975c:	sub	r9, fp, #576	; 0x240
    9760:	blt	9834 <rb_sha512_crypt_r+0xf24>
    9764:	ldrb	r7, [fp, #-107]	; 0xffffff95
    9768:	ldrb	r3, [fp, #-128]	; 0xffffff80
    976c:	ldrb	r0, [fp, #-149]	; 0xffffff6b
    9770:	lsl	r7, r7, #8
    9774:	orr	r3, r7, r3, lsl #16
    9778:	orr	r3, r3, r0
    977c:	mov	r0, #4
    9780:	and	r7, r3, #63	; 0x3f
    9784:	sub	r1, r1, #1
    9788:	ldrb	r7, [ip, r7]
    978c:	cmp	r1, #2
    9790:	strb	r7, [r2], #1
    9794:	blt	97a4 <rb_sha512_crypt_r+0xe94>
    9798:	lsr	r3, r3, #6
    979c:	subs	r0, r0, #1
    97a0:	bhi	9780 <rb_sha512_crypt_r+0xe70>
    97a4:	cmp	r1, #2
    97a8:	sub	r9, fp, #576	; 0x240
    97ac:	blt	9834 <rb_sha512_crypt_r+0xf24>
    97b0:	ldrb	r0, [fp, #-148]	; 0xffffff6c
    97b4:	ldrb	r7, [fp, #-106]	; 0xffffff96
    97b8:	ldrb	r3, [fp, #-127]	; 0xffffff81
    97bc:	lsl	r0, r0, #8
    97c0:	orr	r0, r0, r7, lsl #16
    97c4:	orr	r3, r0, r3
    97c8:	mov	r0, #4
    97cc:	and	r7, r3, #63	; 0x3f
    97d0:	sub	r1, r1, #1
    97d4:	ldrb	r7, [ip, r7]
    97d8:	cmp	r1, #2
    97dc:	strb	r7, [r2], #1
    97e0:	blt	97f0 <rb_sha512_crypt_r+0xee0>
    97e4:	lsr	r3, r3, #6
    97e8:	subs	r0, r0, #1
    97ec:	bhi	97cc <rb_sha512_crypt_r+0xebc>
    97f0:	cmp	r1, #2
    97f4:	sub	r9, fp, #576	; 0x240
    97f8:	blt	9834 <rb_sha512_crypt_r+0xf24>
    97fc:	ldrb	r7, [fp, #-105]	; 0xffffff97
    9800:	mov	r3, #2
    9804:	and	r0, r7, #63	; 0x3f
    9808:	sub	r1, r1, #1
    980c:	ldrb	r0, [ip, r0]
    9810:	cmp	r1, #2
    9814:	strb	r0, [r2], #1
    9818:	blt	9828 <rb_sha512_crypt_r+0xf18>
    981c:	lsr	r7, r7, #6
    9820:	subs	r3, r3, #1
    9824:	bhi	9804 <rb_sha512_crypt_r+0xef4>
    9828:	cmp	r1, #1
    982c:	sub	r9, fp, #576	; 0x240
    9830:	bgt	9968 <rb_sha512_crypt_r+0x1058>
    9834:	bl	55e8 <__errno_location@plt>
    9838:	mov	r1, #34	; 0x22
    983c:	str	r1, [r0]
    9840:	add	r0, pc, #312	; 0x138
    9844:	vmov.i32	q4, #0	; 0x00000000
    9848:	vld1.64	{d16-d17}, [r0]
    984c:	add	r0, pc, #348	; 0x15c
    9850:	add	r1, pc, #328	; 0x148
    9854:	vld1.64	{d20-d21}, [r0]
    9858:	vld1.64	{d18-d19}, [r1]
    985c:	mov	r1, #20
    9860:	vst1.64	{d16-d17}, [r9]
    9864:	add	r0, pc, #292	; 0x124
    9868:	ldr	r2, [fp, #-936]	; 0xfffffc58
    986c:	vld1.64	{d16-d17}, [r0]
    9870:	ldr	r0, [fp, #-940]	; 0xfffffc54
    9874:	vst1.64	{d18-d19}, [r0]
    9878:	ldr	r0, [fp, #-944]	; 0xfffffc50
    987c:	vst1.64	{d20-d21}, [r0]
    9880:	ldr	r0, [fp, #-948]	; 0xfffffc4c
    9884:	vst1.64	{d16-d17}, [r0]
    9888:	mov	r0, #0
    988c:	str	r0, [r2, #16]
    9890:	vst1.64	{d8-d9}, [r2], r1
    9894:	sub	r1, fp, #168	; 0xa8
    9898:	str	r0, [r2]
    989c:	mov	r0, r9
    98a0:	bl	9b88 <rb_sha512_finish_ctx>
    98a4:	sub	r0, fp, #232	; 0xe8
    98a8:	ldr	r5, [fp, #-924]	; 0xfffffc64
    98ac:	mov	r1, r0
    98b0:	add	r0, r0, #32
    98b4:	vst1.64	{d8-d9}, [r0]
    98b8:	add	r0, r1, #16
    98bc:	vst1.64	{d8-d9}, [r0]
    98c0:	mov	r0, #48	; 0x30
    98c4:	vst1.64	{d8-d9}, [r1], r0
    98c8:	ldr	r0, [fp, #-928]	; 0xfffffc60
    98cc:	mov	r2, r5
    98d0:	vst1.64	{d8-d9}, [r1]
    98d4:	mov	r1, #0
    98d8:	bl	4f4c <memset@plt>
    98dc:	ldr	r4, [fp, #-952]	; 0xfffffc48
    98e0:	ldr	r0, [fp, #-956]	; 0xfffffc44
    98e4:	mov	r1, #0
    98e8:	mov	r2, r4
    98ec:	bl	4f4c <memset@plt>
    98f0:	mov	r0, r9
    98f4:	mov	r1, #0
    98f8:	mov	r2, #344	; 0x158
    98fc:	bl	4f4c <memset@plt>
    9900:	sub	r0, fp, #920	; 0x398
    9904:	mov	r1, #0
    9908:	mov	r2, #344	; 0x158
    990c:	bl	4f4c <memset@plt>
    9910:	ldr	r0, [fp, #-980]	; 0xfffffc2c
    9914:	cmp	r0, #0
    9918:	beq	9928 <rb_sha512_crypt_r+0x1018>
    991c:	mov	r1, #0
    9920:	mov	r2, r5
    9924:	bl	4f4c <memset@plt>
    9928:	ldr	r0, [fp, #-984]	; 0xfffffc28
    992c:	cmp	r0, #0
    9930:	beq	9940 <rb_sha512_crypt_r+0x1030>
    9934:	mov	r1, #0
    9938:	mov	r2, r4
    993c:	bl	4f4c <memset@plt>
    9940:	ldr	r0, [fp, #-932]	; 0xfffffc5c
    9944:	sub	sp, fp, #96	; 0x60
    9948:	vpop	{d8-d15}
    994c:	add	sp, sp, #4
    9950:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9954:	mov	r0, #0
    9958:	str	r0, [fp, #-992]	; 0xfffffc20
    995c:	movw	r0, #5000	; 0x1388
    9960:	str	r0, [fp, #-932]	; 0xfffffc5c
    9964:	b	89c4 <rb_sha512_crypt_r+0xb4>
    9968:	mov	r0, #0
    996c:	strb	r0, [r2]
    9970:	ldr	r0, [fp, #-960]	; 0xfffffc40
    9974:	str	r0, [fp, #-932]	; 0xfffffc5c
    9978:	b	9840 <rb_sha512_crypt_r+0xf30>
    997c:	nop	{0}
    9980:	.word	0xf3bcc908
    9984:	.word	0x6a09e667
    9988:	.word	0x84caa73b
    998c:	.word	0xbb67ae85
    9990:	.word	0xfb41bd6b
    9994:	.word	0x1f83d9ab
    9998:	.word	0x137e2179
    999c:	.word	0x5be0cd19
    99a0:	.word	0xfe94f82b
    99a4:	.word	0x3c6ef372
    99a8:	.word	0x5f1d36f1
    99ac:	.word	0xa54ff53a
    99b0:	.word	0xade682d1
    99b4:	.word	0x510e527f
    99b8:	.word	0x2b3e6c1f
    99bc:	.word	0x9b05688c
    99c0:	.word	0x0000c89e
    99c4:	.word	0x0000c6b0
    99c8:	.word	0x0000c1e8
    99cc:	.word	0x0000c66c
    99d0:	.word	0x0000c0df

000099d4 <rb_sha512_process_bytes>:
    99d4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    99d8:	add	fp, sp, #28
    99dc:	sub	sp, sp, #12
    99e0:	mov	r9, r2
    99e4:	mov	r8, r0
    99e8:	mov	r4, r2
    99ec:	mov	r5, r1
    99f0:	ldr	r6, [r9, #80]!	; 0x50
    99f4:	ldr	r0, [r9, #4]
    99f8:	orrs	r0, r6, r0
    99fc:	beq	9a80 <rb_sha512_process_bytes+0xac>
    9a00:	rsb	r7, r6, #256	; 0x100
    9a04:	add	r0, r4, r6
    9a08:	mov	r1, r8
    9a0c:	cmp	r7, r5
    9a10:	add	r0, r0, #88	; 0x58
    9a14:	movhi	r7, r5
    9a18:	mov	r2, r7
    9a1c:	bl	5114 <memcpy@plt>
    9a20:	ldrd	r0, [r9]
    9a24:	adds	r0, r0, r7
    9a28:	adc	r1, r1, #0
    9a2c:	subs	r2, r0, #129	; 0x81
    9a30:	strd	r0, [r9]
    9a34:	sbcs	r1, r1, #0
    9a38:	bcc	9a78 <rb_sha512_process_bytes+0xa4>
    9a3c:	add	sl, r4, #88	; 0x58
    9a40:	bic	r1, r0, #127	; 0x7f
    9a44:	mov	r2, r4
    9a48:	mov	r0, sl
    9a4c:	bl	9e94 <rb_sha512_process_block>
    9a50:	mov	r0, #0
    9a54:	str	r0, [r9, #4]
    9a58:	ldr	r0, [r9]
    9a5c:	and	r2, r0, #127	; 0x7f
    9a60:	add	r0, r7, r6
    9a64:	bic	r0, r0, #127	; 0x7f
    9a68:	str	r2, [r9]
    9a6c:	add	r1, sl, r0
    9a70:	mov	r0, sl
    9a74:	bl	5114 <memcpy@plt>
    9a78:	sub	r5, r5, r7
    9a7c:	add	r8, r8, r7
    9a80:	cmp	r5, #128	; 0x80
    9a84:	bcc	9b18 <rb_sha512_process_bytes+0x144>
    9a88:	tst	r8, #7
    9a8c:	beq	9afc <rb_sha512_process_bytes+0x128>
    9a90:	cmp	r5, #129	; 0x81
    9a94:	bcc	9b24 <rb_sha512_process_bytes+0x150>
    9a98:	sub	r0, r5, #128	; 0x80
    9a9c:	add	r7, r4, #88	; 0x58
    9aa0:	mov	r6, r8
    9aa4:	str	r0, [sp, #8]
    9aa8:	sub	r0, r5, #129	; 0x81
    9aac:	bic	sl, r0, #127	; 0x7f
    9ab0:	add	r0, sl, #128	; 0x80
    9ab4:	str	r0, [sp, #4]
    9ab8:	mov	r0, r7
    9abc:	mov	r1, r6
    9ac0:	mov	r2, #128	; 0x80
    9ac4:	bl	5114 <memcpy@plt>
    9ac8:	mov	r0, r7
    9acc:	mov	r1, #128	; 0x80
    9ad0:	mov	r2, r4
    9ad4:	bl	9e94 <rb_sha512_process_block>
    9ad8:	sub	r5, r5, #128	; 0x80
    9adc:	add	r6, r6, #128	; 0x80
    9ae0:	cmp	r5, #128	; 0x80
    9ae4:	bhi	9ab8 <rb_sha512_process_bytes+0xe4>
    9ae8:	ldr	r0, [sp, #8]
    9aec:	sub	r5, r0, sl
    9af0:	ldr	r0, [sp, #4]
    9af4:	add	r8, r8, r0
    9af8:	b	9b28 <rb_sha512_process_bytes+0x154>
    9afc:	bic	r6, r5, #127	; 0x7f
    9b00:	mov	r0, r8
    9b04:	mov	r2, r4
    9b08:	mov	r1, r6
    9b0c:	bl	9e94 <rb_sha512_process_block>
    9b10:	add	r8, r8, r6
    9b14:	and	r5, r5, #127	; 0x7f
    9b18:	cmp	r5, #0
    9b1c:	bne	9b28 <rb_sha512_process_bytes+0x154>
    9b20:	b	9b7c <rb_sha512_process_bytes+0x1a8>
    9b24:	mov	r5, #128	; 0x80
    9b28:	ldr	r6, [r9]
    9b2c:	mov	r1, r8
    9b30:	mov	r2, r5
    9b34:	add	r0, r4, r6
    9b38:	add	r0, r0, #88	; 0x58
    9b3c:	bl	5114 <memcpy@plt>
    9b40:	add	r6, r5, r6
    9b44:	cmp	r6, #128	; 0x80
    9b48:	bcc	9b74 <rb_sha512_process_bytes+0x1a0>
    9b4c:	add	r5, r4, #88	; 0x58
    9b50:	mov	r1, #128	; 0x80
    9b54:	mov	r2, r4
    9b58:	mov	r0, r5
    9b5c:	bl	9e94 <rb_sha512_process_block>
    9b60:	sub	r6, r6, #128	; 0x80
    9b64:	add	r1, r4, #216	; 0xd8
    9b68:	mov	r0, r5
    9b6c:	mov	r2, r6
    9b70:	bl	5114 <memcpy@plt>
    9b74:	mov	r7, #0
    9b78:	strd	r6, [r9]
    9b7c:	sub	sp, fp, #28
    9b80:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9b84:	nop	{0}

00009b88 <rb_sha512_finish_ctx>:
    9b88:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
    9b8c:	add	fp, sp, #24
    9b90:	vpush	{d8-d9}
    9b94:	mov	r6, r0
    9b98:	mov	r5, r0
    9b9c:	mov	r4, r1
    9ba0:	mov	r7, #0
    9ba4:	ldr	r0, [r6, #64]!	; 0x40
    9ba8:	ldrd	r2, [r6, #16]
    9bac:	ldr	r1, [r6, #4]
    9bb0:	adds	r0, r0, r2
    9bb4:	adcs	r1, r1, r3
    9bb8:	strd	r0, [r6]
    9bbc:	adc	r0, r7, #0
    9bc0:	cmp	r0, #1
    9bc4:	bne	9bdc <rb_sha512_finish_ctx+0x54>
    9bc8:	add	r0, r6, #8
    9bcc:	ldrd	r8, [r0]
    9bd0:	adds	r8, r8, #1
    9bd4:	adc	r9, r9, #0
    9bd8:	strd	r8, [r0]
    9bdc:	rsbs	r1, r2, #111	; 0x6f
    9be0:	mov	r9, #112	; 0x70
    9be4:	add	r8, r5, #88	; 0x58
    9be8:	rscs	r1, r3, #0
    9bec:	add	r0, r8, r2
    9bf0:	mov	r1, #0
    9bf4:	movwcc	r1, #1
    9bf8:	cmp	r1, #0
    9bfc:	ldr	r1, [pc, #652]	; 9e90 <rb_sha512_finish_ctx+0x308>
    9c00:	movwne	r9, #240	; 0xf0
    9c04:	sub	r2, r9, r2
    9c08:	add	r1, pc, r1
    9c0c:	bl	5114 <memcpy@plt>
    9c10:	vld1.64	{d1-d2}, [r6]
    9c14:	vmov.i64	q13, #0x00ff000000000000
    9c18:	vmov.32	r3, d1[1]
    9c1c:	vmov.32	r6, d2[0]
    9c20:	vmov.32	r0, d1[0]
    9c24:	lsl	r1, r3, #11
    9c28:	lsr	r2, r6, #5
    9c2c:	orr	ip, r1, r0, lsr #21
    9c30:	vmov.32	r1, d2[1]
    9c34:	lsl	r0, r0, #11
    9c38:	orr	lr, r2, r1, lsl #27
    9c3c:	lsl	r2, r1, #3
    9c40:	vmov.32	d9[0], r0
    9c44:	orr	r2, r2, r6, lsr #29
    9c48:	vmov.32	d9[1], ip
    9c4c:	vmov	s9, r2
    9c50:	add	r2, pc, #368	; 0x170
    9c54:	vmov.i64	d8, #0x00000000ff000000
    9c58:	vld1.64	{d16-d17}, [r2]
    9c5c:	add	r2, pc, #372	; 0x174
    9c60:	vld1.64	{d18-d19}, [r2]
    9c64:	add	r2, pc, #380	; 0x17c
    9c68:	vld1.64	{d20-d21}, [r2]
    9c6c:	lsl	r2, r6, #3
    9c70:	vmov	s8, r2
    9c74:	add	r2, pc, #380	; 0x17c
    9c78:	vld1.64	{d22-d23}, [r2]
    9c7c:	add	r2, pc, #388	; 0x184
    9c80:	vldr	s10, [pc, #516]	; 9e8c <rb_sha512_finish_ctx+0x304>
    9c84:	vld1.64	{d24-d25}, [r2]
    9c88:	lsl	r2, r6, #11
    9c8c:	vmov	s1, r2
    9c90:	add	r2, pc, #384	; 0x180
    9c94:	add	r0, pc, #396	; 0x18c
    9c98:	vldr	s0, [pc, #488]	; 9e88 <rb_sha512_finish_ctx+0x300>
    9c9c:	vshl.u64	q12, q0, q12
    9ca0:	vorr	d3, d1, d1
    9ca4:	vand	q13, q0, q13
    9ca8:	vshl.u64	q14, q1, q11
    9cac:	vld1.64	{d22-d23}, [r2]
    9cb0:	lsr	r2, r3, #29
    9cb4:	vmov.f32	s11, s0
    9cb8:	vorr	d27, d25, d25
    9cbc:	vand	q10, q14, q10
    9cc0:	vmov	s12, r2
    9cc4:	vld1.64	{d24-d25}, [r0]
    9cc8:	lsr	r0, r1, #5
    9ccc:	vorr	q10, q10, q13
    9cd0:	vmov.32	d26[0], lr
    9cd4:	vmov.f32	s13, s0
    9cd8:	vmov.i64	d27, #0x000000ff00000000
    9cdc:	vorr	d7, d1, d1
    9ce0:	vmov.32	d26[1], r0
    9ce4:	vshl.u64	q15, q1, q11
    9ce8:	vmov.i32	q11, #0	; 0x00000000
    9cec:	add	r0, pc, #324	; 0x144
    9cf0:	add	r1, pc, #336	; 0x150
    9cf4:	vand	q14, q15, q8
    9cf8:	vsub.i64	q15, q11, q2
    9cfc:	vorr	q8, q3, q2
    9d00:	vld1.64	{d4-d5}, [r1]
    9d04:	vsub.i64	q9, q11, q9
    9d08:	vsub.i64	q12, q11, q12
    9d0c:	vand	q13, q4, q13
    9d10:	vorr	q10, q10, q14
    9d14:	vld1.64	{d28-d29}, [r0]
    9d18:	add	r0, pc, #312	; 0x138
    9d1c:	add	r1, pc, #324	; 0x144
    9d20:	add	r2, pc, #336	; 0x150
    9d24:	vshl.u64	q9, q1, q9
    9d28:	vshl.u64	q15, q3, q15
    9d2c:	vshl.u64	q12, q1, q12
    9d30:	vld1.64	{d6-d7}, [r1]
    9d34:	vorr	q10, q10, q13
    9d38:	vmov.i64	q13, #0x00000000000000ff
    9d3c:	vorr	d17, d31, d31
    9d40:	add	r1, r9, #16
    9d44:	vsub.i64	q11, q11, q2
    9d48:	vld1.64	{d4-d5}, [r2]
    9d4c:	mov	r2, r5
    9d50:	vand	q9, q9, q14
    9d54:	vld1.64	{d28-d29}, [r0]
    9d58:	vshl.u64	q11, q1, q11
    9d5c:	add	r0, r8, r9
    9d60:	vorr	q9, q10, q9
    9d64:	vand	q10, q8, q13
    9d68:	vshl.u64	q8, q8, q3
    9d6c:	vorr	d17, d21, d21
    9d70:	vand	q12, q12, q2
    9d74:	vand	q11, q11, q14
    9d78:	vorr	q9, q9, q12
    9d7c:	vorr	q9, q9, q11
    9d80:	vorr	q8, q9, q8
    9d84:	vst1.64	{d16-d17}, [r0]
    9d88:	mov	r0, r8
    9d8c:	bl	9e94 <rb_sha512_process_block>
    9d90:	mov	r0, r5
    9d94:	mov	r2, r4
    9d98:	ldr	r1, [r0, r7]!
    9d9c:	ldr	r0, [r0, #4]
    9da0:	rev	r0, r0
    9da4:	str	r0, [r2, r7]!
    9da8:	add	r7, r7, #8
    9dac:	rev	r0, r1
    9db0:	cmp	r7, #64	; 0x40
    9db4:	str	r0, [r2, #4]
    9db8:	bne	9d90 <rb_sha512_finish_ctx+0x208>
    9dbc:	vpop	{d8-d9}
    9dc0:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
    9dc4:	nop	{0}
    9dc8:	.word	0x00000000
    9dcc:	.word	0x000000ff
    9dd0:	.word	0x00000000
    9dd4:	.word	0x0000ff00
    9dd8:	.word	0x00000015
    9ddc:	.word	0x00000000
    9de0:	.word	0x00000005
	...
    9dec:	.word	0x0000ff00
    9df0:	.word	0x00000000
    9df4:	.word	0x00ff0000
    9df8:	.word	0x0000001b
    9dfc:	.word	0x00000000
    9e00:	.word	0x0000002b
	...
    9e0c:	.word	0x00ff0000
    9e10:	.word	0x0000003b
    9e14:	.word	0x00000000
    9e18:	.word	0x0000000b
    9e1c:	.word	0x00000000
    9e20:	.word	0x0000001b
    9e24:	.word	0x00000000
    9e28:	.word	0x00000025
    9e2c:	.word	0x00000000
    9e30:	.word	0x00000015
    9e34:	.word	0x00000000
    9e38:	.word	0x00ff0000
    9e3c:	.word	0x00000000
    9e40:	.word	0xff000000
    9e44:	.word	0x00000000
    9e48:	.word	0x00000035
    9e4c:	.word	0x00000000
    9e50:	.word	0x00000025
    9e54:	.word	0x00000000
    9e58:	.word	0x000000ff
    9e5c:	.word	0x00000000
    9e60:	.word	0x0000ff00
    9e64:	.word	0x00000000
    9e68:	.word	0x00000038
    9e6c:	.word	0x00000000
    9e70:	.word	0x000000ff
    9e74:	.word	0x00000000
    9e78:	.word	0x0000ff00
    9e7c:	.word	0x00000000
    9e80:	.word	0x00ff0000
	...
    9e8c:	.word	0x00000035
    9e90:	.word	0x0000bd78

00009e94 <rb_sha512_process_block>:
    9e94:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9e98:	add	fp, sp, #28
    9e9c:	sub	sp, sp, #804	; 0x324
    9ea0:	ldr	r3, [r2, #64]	; 0x40
    9ea4:	lsr	r6, r1, #3
    9ea8:	adds	r3, r3, r1
    9eac:	str	r3, [r2, #64]	; 0x40
    9eb0:	ldr	r3, [r2, #68]	; 0x44
    9eb4:	adcs	r3, r3, #0
    9eb8:	str	r3, [r2, #68]	; 0x44
    9ebc:	mov	r3, #0
    9ec0:	ldr	r1, [r2, #60]	; 0x3c
    9ec4:	adc	r7, r3, #0
    9ec8:	ldr	r9, [r2, #36]	; 0x24
    9ecc:	ldr	sl, [r2, #28]
    9ed0:	cmp	r7, #1
    9ed4:	str	r1, [sp, #104]	; 0x68
    9ed8:	mov	r1, r2
    9edc:	ldr	r3, [r1, #56]!	; 0x38
    9ee0:	str	r1, [sp, #28]
    9ee4:	ldr	r1, [r2, #52]	; 0x34
    9ee8:	str	r3, [sp, #100]	; 0x64
    9eec:	str	r1, [sp, #96]	; 0x60
    9ef0:	mov	r1, r2
    9ef4:	ldr	r3, [r1, #48]!	; 0x30
    9ef8:	str	r1, [sp, #24]
    9efc:	ldr	r1, [r2, #44]	; 0x2c
    9f00:	str	r3, [sp, #92]	; 0x5c
    9f04:	str	r1, [sp, #88]	; 0x58
    9f08:	mov	r1, r2
    9f0c:	ldr	r3, [r1, #40]!	; 0x28
    9f10:	str	r1, [sp, #20]
    9f14:	mov	r1, r2
    9f18:	str	r3, [sp, #84]	; 0x54
    9f1c:	ldr	ip, [r1, #32]!
    9f20:	str	r1, [sp, #16]
    9f24:	mov	r1, r2
    9f28:	ldr	r3, [r1, #24]!
    9f2c:	str	r3, [sp, #80]	; 0x50
    9f30:	str	r1, [sp, #12]
    9f34:	ldm	r2, {r1, r3}
    9f38:	str	r1, [sp, #68]	; 0x44
    9f3c:	ldr	r1, [r2, #12]
    9f40:	str	r3, [sp, #64]	; 0x40
    9f44:	str	r1, [sp, #72]	; 0x48
    9f48:	ldr	r1, [r2, #20]
    9f4c:	str	r1, [sp, #76]	; 0x4c
    9f50:	mov	r1, r2
    9f54:	ldr	r3, [r1, #16]!
    9f58:	str	r1, [sp, #8]
    9f5c:	mov	r1, r2
    9f60:	str	r3, [sp, #60]	; 0x3c
    9f64:	ldr	r3, [r1, #8]!
    9f68:	str	r3, [sp, #56]	; 0x38
    9f6c:	str	r1, [sp, #4]
    9f70:	bne	9f8c <rb_sha512_process_block+0xf8>
    9f74:	ldr	r4, [r2, #72]	; 0x48
    9f78:	ldr	r1, [r2, #76]	; 0x4c
    9f7c:	adds	r4, r4, #1
    9f80:	adc	r1, r1, #0
    9f84:	str	r4, [r2, #72]	; 0x48
    9f88:	str	r1, [r2, #76]	; 0x4c
    9f8c:	cmp	r6, #0
    9f90:	str	r2, [sp, #32]
    9f94:	beq	a3b4 <rb_sha512_process_block+0x520>
    9f98:	add	r7, sp, #160	; 0xa0
    9f9c:	mov	r3, #0
    9fa0:	mov	r1, r0
    9fa4:	ldr	r2, [r1, r3]!
    9fa8:	ldr	r1, [r1, #4]
    9fac:	rev	r2, r2
    9fb0:	rev	r1, r1
    9fb4:	str	r1, [r7, r3]
    9fb8:	add	r1, r7, r3
    9fbc:	add	r3, r3, #8
    9fc0:	cmp	r3, #128	; 0x80
    9fc4:	str	r2, [r1, #4]
    9fc8:	bne	9fa0 <rb_sha512_process_block+0x10c>
    9fcc:	ldr	lr, [sp, #160]	; 0xa0
    9fd0:	ldr	r3, [sp, #164]	; 0xa4
    9fd4:	str	r0, [sp, #40]	; 0x28
    9fd8:	movw	r0, #65024	; 0xfe00
    9fdc:	mov	r8, ip
    9fe0:	str	r6, [sp, #36]	; 0x24
    9fe4:	movt	r0, #65535	; 0xffff
    9fe8:	add	r1, sp, #160	; 0xa0
    9fec:	add	r1, r1, r0
    9ff0:	ldr	r6, [r1, #628]	; 0x274
    9ff4:	ldr	r7, [r1, #624]	; 0x270
    9ff8:	ldr	r2, [r1, #520]	; 0x208
    9ffc:	lsl	r4, r6, #3
    a000:	lsr	r5, r6, #19
    a004:	orr	r4, r4, r7, lsr #29
    a008:	orr	r5, r5, r7, lsl #13
    a00c:	eor	r4, r4, r6, lsr #6
    a010:	eor	ip, r4, r5
    a014:	lsr	r4, r7, #6
    a018:	lsr	r5, r6, #29
    a01c:	orr	r5, r5, r7, lsl #3
    a020:	lsr	r7, r7, #19
    a024:	orr	r4, r4, r6, lsl #26
    a028:	eor	r5, r5, r4
    a02c:	orr	r7, r7, r6, lsl #13
    a030:	ldr	r6, [r1, #588]	; 0x24c
    a034:	ldr	r4, [r1, #524]	; 0x20c
    a038:	eor	r7, r5, r7
    a03c:	ldr	r5, [r1, #584]	; 0x248
    a040:	adds	r5, lr, r5
    a044:	mov	lr, r2
    a048:	adc	r3, r3, r6
    a04c:	adds	r7, r5, r7
    a050:	lsr	r6, r2, #7
    a054:	lsr	r5, r2, #8
    a058:	orr	r6, r6, r4, lsl #25
    a05c:	orr	r5, r5, r4, lsl #24
    a060:	adc	ip, r3, ip
    a064:	eor	r6, r5, r6
    a068:	lsrs	r5, r4, #1
    a06c:	rrx	r3, r2
    a070:	eor	r3, r6, r3
    a074:	orr	r6, r5, r2, lsl #31
    a078:	lsr	r5, r4, #8
    a07c:	orr	r5, r5, r2, lsl #24
    a080:	adds	r3, r7, r3
    a084:	eor	r5, r5, r4, lsr #7
    a088:	str	r3, [r1, #640]	; 0x280
    a08c:	mov	r3, r4
    a090:	eor	r7, r5, r6
    a094:	adc	r7, ip, r7
    a098:	adds	r0, r0, #8
    a09c:	str	r7, [r1, #644]	; 0x284
    a0a0:	bne	9fe8 <rb_sha512_process_block+0x154>
    a0a4:	ldr	r0, [sp, #68]	; 0x44
    a0a8:	ldr	r7, [sp, #60]	; 0x3c
    a0ac:	ldr	r6, [sp, #96]	; 0x60
    a0b0:	ldr	r2, [sp, #56]	; 0x38
    a0b4:	ldr	r3, [sp, #72]	; 0x48
    a0b8:	ldr	r5, [sp, #84]	; 0x54
    a0bc:	ldr	lr, [sp, #100]	; 0x64
    a0c0:	ldr	r4, [sp, #104]	; 0x68
    a0c4:	mov	ip, #0
    a0c8:	str	r8, [sp, #48]	; 0x30
    a0cc:	str	r8, [sp, #132]	; 0x84
    a0d0:	mov	r8, r9
    a0d4:	str	sl, [sp, #44]	; 0x2c
    a0d8:	str	sl, [sp, #124]	; 0x7c
    a0dc:	str	r9, [sp, #52]	; 0x34
    a0e0:	str	r0, [sp, #140]	; 0x8c
    a0e4:	ldr	r0, [sp, #64]	; 0x40
    a0e8:	str	r7, [sp, #152]	; 0x98
    a0ec:	ldr	r7, [sp, #76]	; 0x4c
    a0f0:	str	r6, [sp, #144]	; 0x90
    a0f4:	str	r0, [sp, #136]	; 0x88
    a0f8:	ldr	r0, [sp, #80]	; 0x50
    a0fc:	str	r7, [sp, #148]	; 0x94
    a100:	ldr	r7, [sp, #88]	; 0x58
    a104:	str	r0, [sp, #128]	; 0x80
    a108:	ldr	r0, [sp, #92]	; 0x5c
    a10c:	str	r0, [sp, #156]	; 0x9c
    a110:	ldr	r1, [sp, #148]	; 0x94
    a114:	ldr	r9, [sp, #156]	; 0x9c
    a118:	ldr	r0, [sp, #144]	; 0x90
    a11c:	mov	r6, r7
    a120:	str	r5, [sp, #156]	; 0x9c
    a124:	mov	r7, r8
    a128:	ldr	r5, [sp, #132]	; 0x84
    a12c:	mov	r8, r3
    a130:	mov	sl, r2
    a134:	ldr	r3, [sp, #136]	; 0x88
    a138:	ldr	r2, [sp, #140]	; 0x8c
    a13c:	str	r6, [sp, #144]	; 0x90
    a140:	str	r1, [sp, #108]	; 0x6c
    a144:	ldr	r1, [sp, #152]	; 0x98
    a148:	str	r0, [sp, #116]	; 0x74
    a14c:	bic	r0, r0, r7
    a150:	str	r9, [sp, #112]	; 0x70
    a154:	str	r1, [sp, #120]	; 0x78
    a158:	and	r1, r7, r6
    a15c:	ldr	r6, [sp, #156]	; 0x9c
    a160:	orr	r0, r1, r0
    a164:	bic	r1, r9, r5
    a168:	and	r6, r5, r6
    a16c:	orr	r1, r6, r1
    a170:	lsr	r6, r7, #18
    a174:	adds	r1, r1, lr
    a178:	orr	r6, r6, r5, lsl #14
    a17c:	adc	lr, r0, r4
    a180:	lsr	r4, r7, #14
    a184:	lsr	r0, r5, #14
    a188:	orr	r4, r4, r5, lsl #18
    a18c:	orr	r0, r0, r7, lsl #18
    a190:	eor	r6, r4, r6
    a194:	lsl	r4, r7, #23
    a198:	orr	r4, r4, r5, lsr #9
    a19c:	eor	r6, r6, r4
    a1a0:	lsr	r4, r5, #18
    a1a4:	orr	r4, r4, r7, lsl #14
    a1a8:	eor	r0, r0, r4
    a1ac:	lsr	r4, r7, #9
    a1b0:	orr	r4, r4, r5, lsl #23
    a1b4:	eor	r0, r0, r4
    a1b8:	adds	r0, r1, r0
    a1bc:	adc	r1, lr, r6
    a1c0:	ldr	r6, [pc, #640]	; a448 <rb_sha512_process_block+0x5b4>
    a1c4:	ldr	lr, [sp, #108]	; 0x6c
    a1c8:	str	r8, [sp, #148]	; 0x94
    a1cc:	str	sl, [sp, #152]	; 0x98
    a1d0:	add	r6, pc, r6
    a1d4:	ldr	r4, [r6, ip]!
    a1d8:	ldr	r6, [r6, #4]
    a1dc:	adds	r0, r0, r4
    a1e0:	adc	r1, r1, r6
    a1e4:	add	r6, sp, #160	; 0xa0
    a1e8:	mov	r4, r6
    a1ec:	add	r6, r6, ip
    a1f0:	ldr	r4, [r4, ip]
    a1f4:	ldr	r6, [r6, #4]
    a1f8:	add	ip, ip, #8
    a1fc:	adds	r9, r0, r4
    a200:	and	r0, r8, lr
    a204:	ldr	r4, [sp, #120]	; 0x78
    a208:	adc	r6, r1, r6
    a20c:	eor	r1, r8, lr
    a210:	and	r1, r3, r1
    a214:	eor	r0, r1, r0
    a218:	lsl	r1, r3, #30
    a21c:	str	r0, [sp, #140]	; 0x8c
    a220:	lsr	r0, r3, #28
    a224:	orr	r1, r1, r2, lsr #2
    a228:	orr	r0, r0, r2, lsl #4
    a22c:	eor	r0, r0, r1
    a230:	lsl	r1, r3, #25
    a234:	orr	r1, r1, r2, lsr #7
    a238:	eor	r8, r0, r1
    a23c:	eor	r0, sl, r4
    a240:	and	r1, sl, r4
    a244:	mov	sl, r4
    a248:	lsr	r4, r3, #2
    a24c:	and	r0, r2, r0
    a250:	orr	r4, r4, r2, lsl #30
    a254:	eor	r0, r0, r1
    a258:	lsr	r1, r2, #28
    a25c:	orr	r1, r1, r3, lsl #4
    a260:	eor	r1, r1, r4
    a264:	lsr	r4, r3, #7
    a268:	orr	r4, r4, r2, lsl #25
    a26c:	eor	r1, r1, r4
    a270:	ldr	r4, [sp, #116]	; 0x74
    a274:	adds	r0, r1, r0
    a278:	ldr	r1, [sp, #140]	; 0x8c
    a27c:	adc	r1, r8, r1
    a280:	adds	r0, r0, r9
    a284:	str	r0, [sp, #140]	; 0x8c
    a288:	adc	r0, r1, r6
    a28c:	str	r0, [sp, #136]	; 0x88
    a290:	ldr	r0, [sp, #128]	; 0x80
    a294:	str	sl, [sp, #128]	; 0x80
    a298:	adds	r0, r9, r0
    a29c:	str	r0, [sp, #132]	; 0x84
    a2a0:	ldr	r0, [sp, #124]	; 0x7c
    a2a4:	str	lr, [sp, #124]	; 0x7c
    a2a8:	adc	r8, r6, r0
    a2ac:	mov	r0, lr
    a2b0:	ldr	lr, [sp, #112]	; 0x70
    a2b4:	cmp	ip, #640	; 0x280
    a2b8:	bne	a110 <rb_sha512_process_block+0x27c>
    a2bc:	ldr	r6, [sp, #100]	; 0x64
    a2c0:	mov	r1, r4
    a2c4:	ldr	r9, [sp, #52]	; 0x34
    a2c8:	mov	sl, lr
    a2cc:	ldr	r1, [sp, #156]	; 0x9c
    a2d0:	ldr	sl, [sp, #44]	; 0x2c
    a2d4:	adds	r6, lr, r6
    a2d8:	str	r6, [sp, #100]	; 0x64
    a2dc:	ldr	r6, [sp, #104]	; 0x68
    a2e0:	adc	r6, r4, r6
    a2e4:	ldr	r4, [sp, #144]	; 0x90
    a2e8:	str	r6, [sp, #104]	; 0x68
    a2ec:	ldr	r6, [sp, #92]	; 0x5c
    a2f0:	adds	r6, r1, r6
    a2f4:	ldr	r1, [sp, #132]	; 0x84
    a2f8:	str	r6, [sp, #92]	; 0x5c
    a2fc:	ldr	r6, [sp, #96]	; 0x60
    a300:	adc	r6, r4, r6
    a304:	str	r6, [sp, #96]	; 0x60
    a308:	ldr	r6, [sp, #84]	; 0x54
    a30c:	adds	r6, r5, r6
    a310:	str	r6, [sp, #84]	; 0x54
    a314:	ldr	r6, [sp, #88]	; 0x58
    a318:	adc	r6, r7, r6
    a31c:	ldr	r7, [sp, #48]	; 0x30
    a320:	str	r6, [sp, #88]	; 0x58
    a324:	ldr	r6, [sp, #152]	; 0x98
    a328:	adds	r7, r1, r7
    a32c:	ldr	r1, [sp, #120]	; 0x78
    a330:	mov	ip, r7
    a334:	ldr	r7, [sp, #80]	; 0x50
    a338:	adc	r9, r8, r9
    a33c:	adds	r7, r1, r7
    a340:	ldr	r1, [sp, #136]	; 0x88
    a344:	str	r7, [sp, #80]	; 0x50
    a348:	ldr	r7, [sp, #60]	; 0x3c
    a34c:	adc	sl, r0, sl
    a350:	ldr	r0, [sp, #140]	; 0x8c
    a354:	adds	r7, r6, r7
    a358:	ldr	r6, [sp, #148]	; 0x94
    a35c:	str	r7, [sp, #60]	; 0x3c
    a360:	ldr	r7, [sp, #76]	; 0x4c
    a364:	adc	r7, r6, r7
    a368:	ldr	r6, [sp, #36]	; 0x24
    a36c:	str	r7, [sp, #76]	; 0x4c
    a370:	ldr	r7, [sp, #56]	; 0x38
    a374:	adds	r7, r2, r7
    a378:	ldr	r2, [sp, #72]	; 0x48
    a37c:	str	r7, [sp, #56]	; 0x38
    a380:	add	r7, sp, #160	; 0xa0
    a384:	adc	r2, r3, r2
    a388:	str	r2, [sp, #72]	; 0x48
    a38c:	ldr	r2, [sp, #68]	; 0x44
    a390:	adds	r2, r0, r2
    a394:	ldr	r0, [sp, #64]	; 0x40
    a398:	str	r2, [sp, #68]	; 0x44
    a39c:	adc	r0, r1, r0
    a3a0:	subs	r6, r6, #16
    a3a4:	str	r0, [sp, #64]	; 0x40
    a3a8:	ldr	r0, [sp, #40]	; 0x28
    a3ac:	add	r0, r0, #128	; 0x80
    a3b0:	bne	9f9c <rb_sha512_process_block+0x108>
    a3b4:	ldr	r0, [sp, #32]
    a3b8:	ldr	r1, [sp, #68]	; 0x44
    a3bc:	ldr	r2, [sp, #64]	; 0x40
    a3c0:	stm	r0, {r1, r2}
    a3c4:	ldr	r0, [sp, #72]	; 0x48
    a3c8:	ldr	r1, [sp, #4]
    a3cc:	ldr	r2, [sp, #56]	; 0x38
    a3d0:	str	r2, [r1]
    a3d4:	str	r0, [r1, #4]
    a3d8:	ldr	r0, [sp, #76]	; 0x4c
    a3dc:	ldr	r1, [sp, #8]
    a3e0:	ldr	r2, [sp, #60]	; 0x3c
    a3e4:	str	r2, [r1]
    a3e8:	str	r0, [r1, #4]
    a3ec:	ldr	r0, [sp, #12]
    a3f0:	ldr	r1, [sp, #80]	; 0x50
    a3f4:	stm	r0, {r1, sl}
    a3f8:	ldr	r0, [sp, #16]
    a3fc:	str	ip, [r0]
    a400:	str	r9, [r0, #4]
    a404:	ldr	r0, [sp, #88]	; 0x58
    a408:	ldr	r1, [sp, #20]
    a40c:	ldr	r2, [sp, #84]	; 0x54
    a410:	str	r2, [r1]
    a414:	str	r0, [r1, #4]
    a418:	ldr	r0, [sp, #96]	; 0x60
    a41c:	ldr	r1, [sp, #24]
    a420:	ldr	r2, [sp, #92]	; 0x5c
    a424:	str	r2, [r1]
    a428:	str	r0, [r1, #4]
    a42c:	ldr	r0, [sp, #104]	; 0x68
    a430:	ldr	r1, [sp, #28]
    a434:	ldr	r2, [sp, #100]	; 0x64
    a438:	str	r2, [r1]
    a43c:	str	r0, [r1, #4]
    a440:	sub	sp, fp, #28
    a444:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a448:	.word	0x0000b530

0000a44c <rb_init_bh>:
    a44c:	push	{fp, lr}
    a450:	mov	fp, sp
    a454:	mov	r0, #1
    a458:	mov	r1, #12
    a45c:	bl	4f10 <calloc@plt>
    a460:	cmp	r0, #0
    a464:	ldrne	r1, [pc, #12]	; a478 <rb_init_bh+0x2c>
    a468:	addne	r1, pc, r1
    a46c:	strne	r0, [r1]
    a470:	popne	{fp, pc}
    a474:	bl	5288 <rb_outofmemory@plt>
    a478:	.word	0x000304a8

0000a47c <rb_bh_create>:
    a47c:	push	{r4, r5, r6, r7, fp, lr}
    a480:	add	fp, sp, #16
    a484:	cmp	r0, #0
    a488:	beq	a550 <rb_bh_create+0xd4>
    a48c:	mov	r6, r1
    a490:	cmp	r1, #0
    a494:	ble	a550 <rb_bh_create+0xd4>
    a498:	mov	r7, r0
    a49c:	cmp	r0, #11
    a4a0:	bls	a564 <rb_bh_create+0xe8>
    a4a4:	mov	r0, #1
    a4a8:	mov	r1, #48	; 0x30
    a4ac:	mov	r5, r2
    a4b0:	bl	4f10 <calloc@plt>
    a4b4:	cmp	r0, #0
    a4b8:	beq	a560 <rb_bh_create+0xe4>
    a4bc:	mov	r4, r0
    a4c0:	cmp	r5, #0
    a4c4:	str	r7, [r0, #12]
    a4c8:	str	r6, [r0, #16]
    a4cc:	beq	a4f8 <rb_bh_create+0x7c>
    a4d0:	mov	r0, r5
    a4d4:	bl	50f0 <strlen@plt>
    a4d8:	add	r0, r0, #1
    a4dc:	bl	52ac <malloc@plt>
    a4e0:	cmp	r0, #0
    a4e4:	beq	a560 <rb_bh_create+0xe4>
    a4e8:	mov	r1, r5
    a4ec:	mov	r6, r0
    a4f0:	bl	5198 <strcpy@plt>
    a4f4:	str	r6, [r4, #44]	; 0x2c
    a4f8:	ldr	r0, [pc, #116]	; a574 <rb_bh_create+0xf8>
    a4fc:	mov	r1, #0
    a500:	ldr	r0, [pc, r0]
    a504:	str	r1, [r4, #4]
    a508:	str	r4, [r4]
    a50c:	ldr	r1, [r0]
    a510:	cmp	r1, #0
    a514:	str	r1, [r4, #8]
    a518:	beq	a528 <rb_bh_create+0xac>
    a51c:	add	r1, r1, #4
    a520:	str	r4, [r1]
    a524:	b	a538 <rb_bh_create+0xbc>
    a528:	mov	r1, r0
    a52c:	ldr	r2, [r1, #4]!
    a530:	cmp	r2, #0
    a534:	streq	r4, [r1]
    a538:	str	r4, [r0]
    a53c:	ldr	r1, [r0, #8]
    a540:	add	r1, r1, #1
    a544:	str	r1, [r0, #8]
    a548:	mov	r0, r4
    a54c:	pop	{r4, r5, r6, r7, fp, pc}
    a550:	ldr	r0, [pc, #32]	; a578 <rb_bh_create+0xfc>
    a554:	mov	r1, #147	; 0x93
    a558:	add	r0, pc, r0
    a55c:	bl	a580 <_rb_bh_fail>
    a560:	bl	5288 <rb_outofmemory@plt>
    a564:	ldr	r0, [pc, #16]	; a57c <rb_bh_create+0x100>
    a568:	mov	r1, #151	; 0x97
    a56c:	add	r0, pc, r0
    a570:	bl	a580 <_rb_bh_fail>
    a574:	.word	0x00030410
    a578:	.word	0x0000b4e0
    a57c:	.word	0x0000b4fe

0000a580 <_rb_bh_fail>:
    a580:	push	{fp, lr}
    a584:	mov	fp, sp
    a588:	mov	r3, r1
    a58c:	mov	r1, r0
    a590:	ldr	r0, [pc, #16]	; a5a8 <_rb_bh_fail+0x28>
    a594:	ldr	r2, [pc, #16]	; a5ac <_rb_bh_fail+0x2c>
    a598:	add	r0, pc, r0
    a59c:	add	r2, pc, r2
    a5a0:	bl	5228 <rb_lib_log@plt>
    a5a4:	bl	4d00 <abort@plt>
    a5a8:	.word	0x0000b586
    a5ac:	.word	0x0000b4c5

0000a5b0 <rb_bh_alloc>:
    a5b0:	push	{fp, lr}
    a5b4:	mov	fp, sp
    a5b8:	cmp	r0, #0
    a5bc:	beq	a5d8 <rb_bh_alloc+0x28>
    a5c0:	ldr	r1, [r0, #12]
    a5c4:	mov	r0, #1
    a5c8:	bl	4f10 <calloc@plt>
    a5cc:	cmp	r0, #0
    a5d0:	popne	{fp, pc}
    a5d4:	bl	5288 <rb_outofmemory@plt>
    a5d8:	ldr	r0, [pc, #8]	; a5e8 <rb_bh_alloc+0x38>
    a5dc:	mov	r1, #186	; 0xba
    a5e0:	add	r0, pc, r0
    a5e4:	bl	a580 <_rb_bh_fail>
    a5e8:	.word	0x0000b4c5

0000a5ec <rb_bh_free>:
    a5ec:	push	{fp, lr}
    a5f0:	mov	fp, sp
    a5f4:	cmp	r0, #0
    a5f8:	beq	a614 <rb_bh_free+0x28>
    a5fc:	cmp	r1, #0
    a600:	beq	a620 <rb_bh_free+0x34>
    a604:	mov	r0, r1
    a608:	bl	500c <free@plt>
    a60c:	mov	r0, #0
    a610:	pop	{fp, pc}
    a614:	ldr	r0, [pc, #24]	; a634 <rb_bh_free+0x48>
    a618:	add	r0, pc, r0
    a61c:	b	a628 <rb_bh_free+0x3c>
    a620:	ldr	r0, [pc, #16]	; a638 <rb_bh_free+0x4c>
    a624:	add	r0, pc, r0
    a628:	bl	5228 <rb_lib_log@plt>
    a62c:	mov	r0, #1
    a630:	pop	{fp, pc}
    a634:	.word	0x0000b4ab
    a638:	.word	0x0000b4bf

0000a63c <rb_bh_destroy>:
    a63c:	push	{r4, r5, fp, lr}
    a640:	add	fp, sp, #8
    a644:	cmp	r0, #0
    a648:	beq	a6b4 <rb_bh_destroy+0x78>
    a64c:	ldr	r1, [r0, #8]
    a650:	mov	r4, r0
    a654:	ldr	r2, [r0, #4]
    a658:	ldr	r0, [pc, #96]	; a6c0 <rb_bh_destroy+0x84>
    a65c:	mov	r5, #0
    a660:	ldr	r0, [pc, r0]
    a664:	cmp	r1, #0
    a668:	streq	r2, [r0, #4]
    a66c:	strne	r2, [r1, #4]
    a670:	mov	r3, r0
    a674:	ldrne	r2, [r4, #4]
    a678:	cmp	r2, #0
    a67c:	addne	r3, r2, #8
    a680:	str	r1, [r3]
    a684:	str	r5, [r4, #4]
    a688:	str	r5, [r4, #8]
    a68c:	ldr	r1, [r0, #8]
    a690:	sub	r1, r1, #1
    a694:	str	r1, [r0, #8]
    a698:	ldr	r0, [r4, #44]	; 0x2c
    a69c:	cmp	r0, #0
    a6a0:	beq	a6a8 <rb_bh_destroy+0x6c>
    a6a4:	bl	500c <free@plt>
    a6a8:	mov	r0, r4
    a6ac:	bl	500c <free@plt>
    a6b0:	b	a6b8 <rb_bh_destroy+0x7c>
    a6b4:	mov	r5, #1
    a6b8:	mov	r0, r5
    a6bc:	pop	{r4, r5, fp, pc}
    a6c0:	.word	0x000302b0

0000a6c4 <rb_bh_usage>:
    a6c4:	cmp	r1, #0
    a6c8:	movne	r0, #0
    a6cc:	strne	r0, [r1]
    a6d0:	cmp	r2, #0
    a6d4:	movne	r0, #0
    a6d8:	strne	r0, [r2]
    a6dc:	ldr	r0, [sp]
    a6e0:	cmp	r3, #0
    a6e4:	movne	r1, #0
    a6e8:	strne	r1, [r3]
    a6ec:	cmp	r0, #0
    a6f0:	ldrne	r1, [pc, #8]	; a700 <rb_bh_usage+0x3c>
    a6f4:	addne	r1, pc, r1
    a6f8:	strne	r1, [r0]
    a6fc:	bx	lr
    a700:	.word	0x0000b40e

0000a704 <rb_bh_usage_all>:
    a704:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
    a708:	add	fp, sp, #24
    a70c:	sub	sp, sp, #8
    a710:	cmp	r0, #0
    a714:	beq	a780 <rb_bh_usage_all+0x7c>
    a718:	mov	r5, r0
    a71c:	ldr	r0, [pc, #100]	; a788 <rb_bh_usage_all+0x84>
    a720:	ldr	r0, [pc, r0]
    a724:	ldr	r6, [r0]
    a728:	cmp	r6, #0
    a72c:	beq	a780 <rb_bh_usage_all+0x7c>
    a730:	ldr	r7, [pc, #84]	; a78c <rb_bh_usage_all+0x88>
    a734:	mov	r8, r1
    a738:	add	r7, pc, r7
    a73c:	ldr	r0, [r6]
    a740:	ldr	r2, [r0, #12]
    a744:	ldr	r3, [r0, #16]
    a748:	ldr	r4, [r0, #28]
    a74c:	ldr	r1, [r0, #40]	; 0x28
    a750:	ldr	r0, [r0, #44]	; 0x2c
    a754:	cmp	r0, #0
    a758:	movne	r7, r0
    a75c:	mul	r0, r3, r4
    a760:	mul	r3, r0, r2
    a764:	sub	r0, r0, r1
    a768:	stm	sp, {r7, r8}
    a76c:	mul	r2, r0, r2
    a770:	blx	r5
    a774:	ldr	r6, [r6, #8]
    a778:	cmp	r6, #0
    a77c:	bne	a73c <rb_bh_usage_all+0x38>
    a780:	sub	sp, fp, #24
    a784:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
    a788:	.word	0x000301f0
    a78c:	.word	0x0000b3d7

0000a790 <rb_bh_total_usage>:
    a790:	push	{r4, r5, r6, sl, fp, lr}
    a794:	add	fp, sp, #16
    a798:	ldr	r2, [pc, #100]	; a804 <rb_bh_total_usage+0x74>
    a79c:	ldr	r2, [pc, r2]
    a7a0:	ldr	r2, [r2]
    a7a4:	cmp	r2, #0
    a7a8:	beq	a7e8 <rb_bh_total_usage+0x58>
    a7ac:	mov	lr, #0
    a7b0:	mov	ip, #0
    a7b4:	ldr	r3, [r2]
    a7b8:	ldr	r2, [r2, #8]
    a7bc:	ldr	r5, [r3, #16]
    a7c0:	ldr	r6, [r3, #28]
    a7c4:	ldr	r4, [r3, #12]
    a7c8:	ldr	r3, [r3, #40]	; 0x28
    a7cc:	cmp	r2, #0
    a7d0:	mul	r5, r5, r6
    a7d4:	sub	r3, r5, r3
    a7d8:	mla	lr, r5, r4, lr
    a7dc:	mla	ip, r3, r4, ip
    a7e0:	bne	a7b4 <rb_bh_total_usage+0x24>
    a7e4:	b	a7f0 <rb_bh_total_usage+0x60>
    a7e8:	mov	ip, #0
    a7ec:	mov	lr, #0
    a7f0:	cmp	r0, #0
    a7f4:	strne	lr, [r0]
    a7f8:	cmp	r1, #0
    a7fc:	strne	ip, [r1]
    a800:	pop	{r4, r5, r6, sl, fp, pc}
    a804:	.word	0x00030174

0000a808 <rb_get_sockerr>:
    a808:	push	{r4, r5, r6, r7, fp, lr}
    a80c:	add	fp, sp, #16
    a810:	sub	sp, sp, #16
    a814:	mov	r5, r0
    a818:	mov	r0, #0
    a81c:	str	r0, [sp, #12]
    a820:	mov	r0, #4
    a824:	str	r0, [sp, #8]
    a828:	ldrb	r7, [r5, #17]
    a82c:	bl	55e8 <__errno_location@plt>
    a830:	ldr	r6, [r0]
    a834:	tst	r7, #4
    a838:	bne	a844 <rb_get_sockerr+0x3c>
    a83c:	mov	r0, r6
    a840:	b	a880 <rb_get_sockerr+0x78>
    a844:	mov	r4, r0
    a848:	ldr	r0, [r5, #12]
    a84c:	add	r1, sp, #8
    a850:	add	r3, sp, #12
    a854:	mov	r2, #4
    a858:	str	r1, [sp]
    a85c:	mov	r1, #1
    a860:	bl	5570 <getsockopt@plt>
    a864:	mov	r1, r0
    a868:	ldr	r0, [sp, #12]
    a86c:	cmp	r0, #0
    a870:	moveq	r0, r6
    a874:	cmp	r1, #0
    a878:	movne	r0, r6
    a87c:	str	r0, [r4]
    a880:	sub	sp, fp, #16
    a884:	pop	{r4, r5, r6, r7, fp, pc}

0000a888 <rb_get_fd>:
    a888:	cmp	r0, #0
    a88c:	ldrne	r0, [r0, #12]
    a890:	mvneq	r0, #0
    a894:	bx	lr

0000a898 <rb_getmaxconnect>:
    a898:	ldr	r0, [pc, #8]	; a8a8 <rb_getmaxconnect+0x10>
    a89c:	ldr	r0, [pc, r0]
    a8a0:	ldr	r0, [r0]
    a8a4:	bx	lr
    a8a8:	.word	0x0001dae4

0000a8ac <rb_set_buffers>:
    a8ac:	push	{r4, r5, fp, lr}
    a8b0:	add	fp, sp, #8
    a8b4:	sub	sp, sp, #8
    a8b8:	cmp	r0, #0
    a8bc:	str	r1, [sp, #4]
    a8c0:	beq	a8ec <rb_set_buffers+0x40>
    a8c4:	mov	r4, r0
    a8c8:	ldr	r0, [r0, #12]
    a8cc:	mov	r5, #4
    a8d0:	add	r3, sp, #4
    a8d4:	mov	r1, #1
    a8d8:	mov	r2, #8
    a8dc:	str	r5, [sp]
    a8e0:	bl	5594 <setsockopt@plt>
    a8e4:	cmp	r0, #0
    a8e8:	beq	a8f8 <rb_set_buffers+0x4c>
    a8ec:	mov	r0, #0
    a8f0:	sub	sp, fp, #8
    a8f4:	pop	{r4, r5, fp, pc}
    a8f8:	ldr	r0, [r4, #12]
    a8fc:	add	r3, sp, #4
    a900:	mov	r1, #1
    a904:	mov	r2, #7
    a908:	str	r5, [sp]
    a90c:	bl	5594 <setsockopt@plt>
    a910:	clz	r0, r0
    a914:	lsr	r0, r0, #5
    a918:	sub	sp, fp, #8
    a91c:	pop	{r4, r5, fp, pc}

0000a920 <rb_set_nb>:
    a920:	push	{r4, r5, fp, lr}
    a924:	add	fp, sp, #8
    a928:	cmp	r0, #0
    a92c:	beq	a98c <rb_set_nb+0x6c>
    a930:	ldr	r4, [r0, #12]
    a934:	ldr	r1, [pc, #92]	; a998 <rb_set_nb+0x78>
    a938:	ldr	r1, [pc, r1]
    a93c:	blx	r1
    a940:	mov	r5, r0
    a944:	cmp	r0, #0
    a948:	bne	a990 <rb_set_nb+0x70>
    a94c:	mov	r0, r4
    a950:	mov	r1, #3
    a954:	mov	r2, #0
    a958:	mov	r5, #0
    a95c:	bl	54f8 <fcntl@plt>
    a960:	cmn	r0, #1
    a964:	beq	a990 <rb_set_nb+0x70>
    a968:	orr	r2, r0, #2048	; 0x800
    a96c:	mov	r0, r4
    a970:	mov	r1, #4
    a974:	bl	54f8 <fcntl@plt>
    a978:	add	r1, r0, #1
    a97c:	cmn	r0, #1
    a980:	movwne	r1, #1
    a984:	mov	r0, r1
    a988:	pop	{r4, r5, fp, pc}
    a98c:	mov	r5, #0
    a990:	mov	r0, r5
    a994:	pop	{r4, r5, fp, pc}
    a998:	.word	0x00030030

0000a99c <rb_setup_fd>:
    a99c:	ldr	r1, [pc, #4]	; a9a8 <rb_setup_fd+0xc>
    a9a0:	ldr	r1, [pc, r1]
    a9a4:	bx	r1
    a9a8:	.word	0x0002ffc8

0000a9ac <rb_settimeout>:
    a9ac:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
    a9b0:	add	fp, sp, #24
    a9b4:	cmp	r0, #0
    a9b8:	beq	aac8 <rb_settimeout+0x11c>
    a9bc:	ldr	r5, [r0, #44]	; 0x2c
    a9c0:	mov	r7, r2
    a9c4:	mov	r4, r0
    a9c8:	cmp	r2, #0
    a9cc:	beq	aa40 <rb_settimeout+0x94>
    a9d0:	mov	r8, r3
    a9d4:	mov	r6, r1
    a9d8:	cmp	r5, #0
    a9dc:	bne	a9fc <rb_settimeout+0x50>
    a9e0:	mov	r0, #1
    a9e4:	mov	r1, #28
    a9e8:	bl	4f10 <calloc@plt>
    a9ec:	cmp	r0, #0
    a9f0:	beq	ab3c <rb_settimeout+0x190>
    a9f4:	mov	r5, r0
    a9f8:	str	r0, [r4, #44]	; 0x2c
    a9fc:	str	r4, [r5]
    aa00:	bl	50fc <rb_current_time@plt>
    aa04:	ldr	r1, [pc, #324]	; ab50 <rb_settimeout+0x1a4>
    aa08:	mov	r2, #0
    aa0c:	add	r0, r0, r6
    aa10:	ldr	r1, [pc, r1]
    aa14:	str	r5, [r5, #4]
    aa18:	str	r2, [r5, #8]
    aa1c:	add	r2, r5, #16
    aa20:	str	r1, [r5, #12]
    aa24:	stm	r2, {r0, r7, r8}
    aa28:	add	r0, r5, #4
    aa2c:	cmp	r1, #0
    aa30:	beq	aa64 <rb_settimeout+0xb8>
    aa34:	add	r1, r1, #4
    aa38:	str	r0, [r1]
    aa3c:	b	aa78 <rb_settimeout+0xcc>
    aa40:	cmp	r5, #0
    aa44:	beq	aac8 <rb_settimeout+0x11c>
    aa48:	ldr	r0, [r5, #12]
    aa4c:	ldr	r1, [r5, #8]
    aa50:	cmp	r0, #0
    aa54:	beq	aacc <rb_settimeout+0x120>
    aa58:	str	r1, [r0, #4]
    aa5c:	ldr	r1, [r5, #8]
    aa60:	b	aad8 <rb_settimeout+0x12c>
    aa64:	ldr	r1, [pc, #232]	; ab54 <rb_settimeout+0x1a8>
    aa68:	add	r1, pc, r1
    aa6c:	ldr	r2, [r1, #4]!
    aa70:	cmp	r2, #0
    aa74:	streq	r0, [r1]
    aa78:	ldr	r1, [pc, #216]	; ab58 <rb_settimeout+0x1ac>
    aa7c:	add	r1, pc, r1
    aa80:	str	r0, [r1]
    aa84:	ldr	r0, [r1, #8]
    aa88:	add	r0, r0, #1
    aa8c:	str	r0, [r1, #8]
    aa90:	ldr	r0, [pc, #196]	; ab5c <rb_settimeout+0x1b0>
    aa94:	ldr	r0, [pc, r0]
    aa98:	cmp	r0, #0
    aa9c:	popne	{r4, r5, r6, r7, r8, sl, fp, pc}
    aaa0:	ldr	r1, [pc, #184]	; ab60 <rb_settimeout+0x1b4>
    aaa4:	mov	r2, #0
    aaa8:	mov	r3, #5
    aaac:	ldr	r1, [pc, r1]
    aab0:	ldr	r0, [pc, #172]	; ab64 <rb_settimeout+0x1b8>
    aab4:	add	r0, pc, r0
    aab8:	bl	5408 <rb_event_add@plt>
    aabc:	ldr	r1, [pc, #164]	; ab68 <rb_settimeout+0x1bc>
    aac0:	add	r1, pc, r1
    aac4:	str	r0, [r1]
    aac8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
    aacc:	ldr	r2, [pc, #108]	; ab40 <rb_settimeout+0x194>
    aad0:	add	r2, pc, r2
    aad4:	str	r1, [r2, #4]
    aad8:	ldr	r7, [pc, #100]	; ab44 <rb_settimeout+0x198>
    aadc:	cmp	r1, #0
    aae0:	mov	r6, #0
    aae4:	add	r7, pc, r7
    aae8:	mov	r2, r7
    aaec:	addne	r2, r1, #8
    aaf0:	str	r0, [r2]
    aaf4:	str	r6, [r5, #8]
    aaf8:	str	r6, [r5, #12]
    aafc:	ldr	r0, [r7, #8]
    ab00:	sub	r0, r0, #1
    ab04:	str	r0, [r7, #8]
    ab08:	mov	r0, r5
    ab0c:	bl	500c <free@plt>
    ab10:	ldr	r0, [r7, #8]
    ab14:	str	r6, [r4, #44]	; 0x2c
    ab18:	cmp	r0, #0
    ab1c:	bne	aac8 <rb_settimeout+0x11c>
    ab20:	ldr	r0, [pc, #32]	; ab48 <rb_settimeout+0x19c>
    ab24:	ldr	r0, [pc, r0]
    ab28:	bl	4dd8 <rb_event_delete@plt>
    ab2c:	ldr	r0, [pc, #24]	; ab4c <rb_settimeout+0x1a0>
    ab30:	add	r0, pc, r0
    ab34:	str	r6, [r0]
    ab38:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
    ab3c:	bl	5288 <rb_outofmemory@plt>
    ab40:	.word	0x0002fe48
    ab44:	.word	0x0002fe34
    ab48:	.word	0x0002fe00
    ab4c:	.word	0x0002fdf4
    ab50:	.word	0x0002ff08
    ab54:	.word	0x0002feb0
    ab58:	.word	0x0002fe9c
    ab5c:	.word	0x0002fe90
    ab60:	.word	0x0001d884
    ab64:	.word	0x0000b090
    ab68:	.word	0x0002fe64

0000ab6c <rb_checktimeouts>:
    ab6c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ab70:	add	fp, sp, #28
    ab74:	sub	sp, sp, #4
    ab78:	ldr	r7, [pc, #180]	; ac34 <rb_checktimeouts+0xc8>
    ab7c:	ldr	r7, [pc, r7]
    ab80:	cmp	r7, #0
    ab84:	beq	ac2c <rb_checktimeouts+0xc0>
    ab88:	ldr	r8, [pc, #168]	; ac38 <rb_checktimeouts+0xcc>
    ab8c:	mov	r9, #0
    ab90:	add	r8, pc, r8
    ab94:	b	ac08 <rb_checktimeouts+0x9c>
    ab98:	ldr	r6, [r5, #16]
    ab9c:	bl	50fc <rb_current_time@plt>
    aba0:	cmp	r6, r0
    aba4:	bge	ac24 <rb_checktimeouts+0xb8>
    aba8:	ldr	r0, [r5, #12]
    abac:	ldr	r1, [r5, #8]
    abb0:	ldr	sl, [r5, #20]
    abb4:	ldr	r6, [r5, #24]
    abb8:	mov	r2, r8
    abbc:	cmp	r0, #0
    abc0:	streq	r1, [r8, #4]
    abc4:	strne	r1, [r0, #4]
    abc8:	ldrne	r1, [r5, #8]
    abcc:	cmp	r1, #0
    abd0:	addne	r2, r1, #8
    abd4:	str	r0, [r2]
    abd8:	str	r9, [r5, #8]
    abdc:	str	r9, [r5, #12]
    abe0:	ldr	r0, [r8, #8]
    abe4:	sub	r0, r0, #1
    abe8:	str	r0, [r8, #8]
    abec:	mov	r0, r5
    abf0:	str	r9, [r4, #44]	; 0x2c
    abf4:	bl	500c <free@plt>
    abf8:	mov	r0, r4
    abfc:	mov	r1, r6
    ac00:	blx	sl
    ac04:	b	ac24 <rb_checktimeouts+0xb8>
    ac08:	ldr	r5, [r7]
    ac0c:	ldr	r7, [r7, #8]
    ac10:	ldr	r4, [r5]
    ac14:	cmp	r4, #0
    ac18:	ldrbne	r0, [r4, #16]
    ac1c:	tstne	r0, #1
    ac20:	bne	ab98 <rb_checktimeouts+0x2c>
    ac24:	cmp	r7, #0
    ac28:	bne	ac08 <rb_checktimeouts+0x9c>
    ac2c:	sub	sp, fp, #28
    ac30:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ac34:	.word	0x0002fd9c
    ac38:	.word	0x0002fd88

0000ac3c <rb_bind>:
    ac3c:	push	{r4, r5, r6, sl, fp, lr}
    ac40:	add	fp, sp, #16
    ac44:	sub	sp, sp, #8
    ac48:	mov	r5, r0
    ac4c:	mov	r0, #1
    ac50:	mov	r6, r1
    ac54:	mov	r1, #4
    ac58:	add	r3, sp, #4
    ac5c:	mov	r2, #2
    ac60:	str	r0, [sp, #4]
    ac64:	ldr	r0, [r5, #12]
    ac68:	str	r1, [sp]
    ac6c:	mov	r1, #1
    ac70:	bl	5594 <setsockopt@plt>
    ac74:	cmp	r0, #0
    ac78:	beq	aca8 <rb_bind+0x6c>
    ac7c:	ldr	r6, [r5, #12]
    ac80:	mov	r4, r0
    ac84:	mov	r0, r5
    ac88:	bl	5390 <rb_get_sockerr@plt>
    ac8c:	bl	4cdc <strerror@plt>
    ac90:	mov	r2, r0
    ac94:	ldr	r0, [pc, #56]	; acd4 <rb_bind+0x98>
    ac98:	mov	r1, r6
    ac9c:	add	r0, pc, r0
    aca0:	bl	5228 <rb_lib_log@plt>
    aca4:	b	acc8 <rb_bind+0x8c>
    aca8:	ldrh	r0, [r6]
    acac:	mov	r2, #28
    acb0:	mov	r1, r6
    acb4:	cmp	r0, #2
    acb8:	ldr	r0, [r5, #12]
    acbc:	movweq	r2, #16
    acc0:	bl	521c <bind@plt>
    acc4:	mov	r4, r0
    acc8:	mov	r0, r4
    accc:	sub	sp, fp, #16
    acd0:	pop	{r4, r5, r6, sl, fp, pc}
    acd4:	.word	0x0000b06f

0000acd8 <rb_sctp_bindx>:
    acd8:	mvn	r0, #0
    acdc:	bx	lr

0000ace0 <rb_inet_get_proto>:
    ace0:	mov	r0, #6
    ace4:	bx	lr

0000ace8 <rb_accept_tcp>:
    ace8:	push	{r4, r5, r6, r7, fp, lr}
    acec:	add	fp, sp, #16
    acf0:	cmp	r0, #0
    acf4:	popeq	{r4, r5, r6, r7, fp, pc}
    acf8:	mov	r6, r1
    acfc:	mov	r5, r0
    ad00:	mov	r0, #1
    ad04:	mov	r1, #144	; 0x90
    ad08:	mov	r4, r3
    ad0c:	mov	r7, r2
    ad10:	bl	4f10 <calloc@plt>
    ad14:	cmp	r0, #0
    ad18:	beq	ad3c <rb_accept_tcp+0x54>
    ad1c:	str	r0, [r5, #52]	; 0x34
    ad20:	str	r7, [r0, #132]	; 0x84
    ad24:	str	r6, [r0, #136]	; 0x88
    ad28:	str	r4, [r0, #140]	; 0x8c
    ad2c:	mov	r0, r5
    ad30:	mov	r1, #0
    ad34:	pop	{r4, r5, r6, r7, fp, lr}
    ad38:	b	ad40 <rb_accept_tryaccept>
    ad3c:	bl	5288 <rb_outofmemory@plt>

0000ad40 <rb_accept_tryaccept>:
    ad40:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ad44:	add	fp, sp, #28
    ad48:	sub	sp, sp, #140	; 0x8c
    ad4c:	add	r5, sp, #8
    ad50:	mov	r4, r0
    ad54:	mov	r1, #0
    ad58:	mov	r2, #128	; 0x80
    ad5c:	mov	r6, #128	; 0x80
    ad60:	mov	r0, r5
    ad64:	bl	4f4c <memset@plt>
    ad68:	str	r6, [sp, #4]
    ad6c:	add	r2, sp, #4
    ad70:	mov	r1, r5
    ad74:	ldr	r0, [r4, #12]
    ad78:	bl	5084 <accept@plt>
    ad7c:	cmp	r0, #0
    ad80:	blt	aee8 <rb_accept_tryaccept+0x1a8>
    ad84:	mov	r9, r0
    ad88:	add	r8, r5, #8
    ad8c:	add	sl, sp, #4
    ad90:	b	adb0 <rb_accept_tryaccept+0x70>
    ad94:	ldr	r1, [r6, #12]
    ad98:	ldr	r0, [pc, #384]	; af20 <rb_accept_tryaccept+0x1e0>
    ad9c:	add	r0, pc, r0
    ada0:	bl	5228 <rb_lib_log@plt>
    ada4:	mov	r0, r6
    ada8:	bl	5174 <rb_close@plt>
    adac:	b	ade4 <rb_accept_tryaccept+0xa4>
    adb0:	ldrb	r0, [r4, #17]
    adb4:	ldr	r2, [pc, #340]	; af10 <rb_accept_tryaccept+0x1d0>
    adb8:	and	r0, r0, #128	; 0x80
    adbc:	add	r2, pc, r2
    adc0:	orr	r1, r0, #4
    adc4:	mov	r0, r9
    adc8:	bl	5384 <rb_open@plt>
    adcc:	cmp	r0, #0
    add0:	beq	ae84 <rb_accept_tryaccept+0x144>
    add4:	mov	r6, r0
    add8:	bl	4f40 <rb_set_nb@plt>
    addc:	cmp	r0, #0
    ade0:	beq	ad94 <rb_accept_tryaccept+0x54>
    ade4:	ldr	r0, [sp, #16]
    ade8:	ldr	r1, [sp, #20]
    adec:	orrs	r0, r0, r1
    adf0:	bne	ae24 <rb_accept_tryaccept+0xe4>
    adf4:	ldrh	r0, [sp, #8]
    adf8:	cmp	r0, #10
    adfc:	ldreq	r0, [sp, #24]
    ae00:	cmneq	r0, #65536	; 0x10000
    ae04:	bne	ae24 <rb_accept_tryaccept+0xe4>
    ae08:	mov	r0, #2
    ae0c:	strh	r0, [sp, #8]
    ae10:	ldr	r0, [sp, #28]
    ae14:	str	r0, [sp, #12]
    ae18:	mov	r0, #0
    ae1c:	str	r0, [r8, #4]
    ae20:	str	r0, [r8]
    ae24:	ldr	r0, [r4, #52]	; 0x34
    ae28:	ldr	r7, [r0, #136]	; 0x88
    ae2c:	cmp	r7, #0
    ae30:	beq	ae50 <rb_accept_tryaccept+0x110>
    ae34:	ldr	r3, [r0, #140]	; 0x8c
    ae38:	ldr	r2, [sp, #4]
    ae3c:	mov	r0, r6
    ae40:	mov	r1, r5
    ae44:	blx	r7
    ae48:	cmp	r0, #0
    ae4c:	beq	aeb4 <rb_accept_tryaccept+0x174>
    ae50:	ldrb	r0, [r4, #17]
    ae54:	tst	r0, #32
    ae58:	bne	aea0 <rb_accept_tryaccept+0x160>
    ae5c:	ldr	r0, [r4, #52]	; 0x34
    ae60:	ldr	r3, [sp, #4]
    ae64:	mov	r1, #0
    ae68:	mov	r2, r5
    ae6c:	ldr	r7, [r0, #132]	; 0x84
    ae70:	ldr	r0, [r0, #140]	; 0x8c
    ae74:	str	r0, [sp]
    ae78:	mov	r0, r6
    ae7c:	blx	r7
    ae80:	b	aeb4 <rb_accept_tryaccept+0x174>
    ae84:	ldr	r0, [pc, #136]	; af14 <rb_accept_tryaccept+0x1d4>
    ae88:	mov	r1, r9
    ae8c:	add	r0, pc, r0
    ae90:	bl	5228 <rb_lib_log@plt>
    ae94:	mov	r0, r9
    ae98:	bl	524c <close@plt>
    ae9c:	b	aeb4 <rb_accept_tryaccept+0x174>
    aea0:	ldr	r3, [sp, #4]
    aea4:	mov	r0, r4
    aea8:	mov	r1, r6
    aeac:	mov	r2, r5
    aeb0:	bl	e274 <rb_ssl_accept_setup>
    aeb4:	mov	r0, r5
    aeb8:	mov	r1, #0
    aebc:	mov	r2, #128	; 0x80
    aec0:	bl	4f4c <memset@plt>
    aec4:	mov	r0, #128	; 0x80
    aec8:	mov	r1, r5
    aecc:	mov	r2, sl
    aed0:	str	r0, [sp, #4]
    aed4:	ldr	r0, [r4, #12]
    aed8:	bl	5084 <accept@plt>
    aedc:	mov	r9, r0
    aee0:	cmp	r0, #0
    aee4:	bge	adb0 <rb_accept_tryaccept+0x70>
    aee8:	ldr	r7, [pc, #40]	; af18 <rb_accept_tryaccept+0x1d8>
    aeec:	mov	r0, r4
    aef0:	mov	r1, #1
    aef4:	mov	r3, #0
    aef8:	ldr	r7, [pc, r7]
    aefc:	ldr	r2, [pc, #24]	; af1c <rb_accept_tryaccept+0x1dc>
    af00:	add	r2, pc, r2
    af04:	blx	r7
    af08:	sub	sp, fp, #28
    af0c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    af10:	.word	0x0000af8e
    af14:	.word	0x0000aed2
    af18:	.word	0x0002fa68
    af1c:	.word	0xfffffe38
    af20:	.word	0x0000b008

0000af24 <rb_connect_tcp>:
    af24:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
    af28:	add	fp, sp, #24
    af2c:	cmp	r0, #0
    af30:	popeq	{r4, r5, r6, r7, r8, r9, fp, pc}
    af34:	ldr	r8, [fp, #12]
    af38:	ldr	r9, [fp, #8]
    af3c:	mov	r7, r1
    af40:	mov	r4, r0
    af44:	mov	r0, #1
    af48:	mov	r1, #268	; 0x10c
    af4c:	mov	r5, r3
    af50:	mov	r6, r2
    af54:	bl	4f10 <calloc@plt>
    af58:	cmp	r0, #0
    af5c:	beq	b074 <rb_connect_tcp+0x150>
    af60:	str	r0, [r4, #48]	; 0x30
    af64:	str	r5, [r0, #260]	; 0x104
    af68:	str	r9, [r0, #264]	; 0x108
    af6c:	add	r0, r0, #128	; 0x80
    af70:	mov	r1, r7
    af74:	mov	r2, #128	; 0x80
    af78:	bl	5114 <memcpy@plt>
    af7c:	cmp	r6, #0
    af80:	beq	afa8 <rb_connect_tcp+0x84>
    af84:	ldrh	r0, [r6]
    af88:	mov	r2, #28
    af8c:	mov	r1, r6
    af90:	cmp	r0, #2
    af94:	ldr	r0, [r4, #12]
    af98:	movweq	r2, #16
    af9c:	bl	521c <bind@plt>
    afa0:	cmn	r0, #1
    afa4:	ble	b01c <rb_connect_tcp+0xf8>
    afa8:	ldr	r2, [pc, #200]	; b078 <rb_connect_tcp+0x154>
    afac:	mov	r0, r4
    afb0:	mov	r1, r8
    afb4:	mov	r3, #0
    afb8:	add	r2, pc, r2
    afbc:	bl	4d24 <rb_settimeout@plt>
    afc0:	ldr	r1, [r4, #48]	; 0x30
    afc4:	ldr	r0, [r4, #12]
    afc8:	mov	r2, #28
    afcc:	ldrh	r3, [r1, #128]!	; 0x80
    afd0:	cmp	r3, #2
    afd4:	movweq	r2, #16
    afd8:	bl	4d0c <connect@plt>
    afdc:	cmn	r0, #1
    afe0:	ble	aff4 <rb_connect_tcp+0xd0>
    afe4:	mov	r0, r4
    afe8:	mov	r1, #0
    afec:	pop	{r4, r5, r6, r7, r8, r9, fp, lr}
    aff0:	b	b084 <rb_connect_callback>
    aff4:	bl	55e8 <__errno_location@plt>
    aff8:	ldr	r0, [r0]
    affc:	cmp	r0, #104	; 0x68
    b000:	bgt	b02c <rb_connect_tcp+0x108>
    b004:	cmp	r0, #4
    b008:	cmpne	r0, #11
    b00c:	beq	b038 <rb_connect_tcp+0x114>
    b010:	cmp	r0, #85	; 0x55
    b014:	beq	b038 <rb_connect_tcp+0x114>
    b018:	b	b064 <rb_connect_tcp+0x140>
    b01c:	mov	r0, r4
    b020:	mov	r1, #1
    b024:	pop	{r4, r5, r6, r7, r8, r9, fp, lr}
    b028:	b	b084 <rb_connect_callback>
    b02c:	cmp	r0, #105	; 0x69
    b030:	cmpne	r0, #115	; 0x73
    b034:	bne	b05c <rb_connect_tcp+0x138>
    b038:	ldr	ip, [pc, #60]	; b07c <rb_connect_tcp+0x158>
    b03c:	mov	r0, r4
    b040:	mov	r1, #2
    b044:	mov	r3, #0
    b048:	ldr	ip, [pc, ip]
    b04c:	ldr	r2, [pc, #44]	; b080 <rb_connect_tcp+0x15c>
    b050:	add	r2, pc, r2
    b054:	pop	{r4, r5, r6, r7, r8, r9, fp, lr}
    b058:	bx	ip
    b05c:	cmp	r0, #106	; 0x6a
    b060:	beq	afe4 <rb_connect_tcp+0xc0>
    b064:	mov	r0, r4
    b068:	mov	r1, #4
    b06c:	pop	{r4, r5, r6, r7, r8, r9, fp, lr}
    b070:	b	b084 <rb_connect_callback>
    b074:	bl	5288 <rb_outofmemory@plt>
    b078:	.word	0x00000140
    b07c:	.word	0x0002f918
    b080:	.word	0x00000100

0000b084 <rb_connect_callback>:
    b084:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
    b088:	add	fp, sp, #24
    b08c:	mov	r4, r1
    b090:	mov	r5, r0
    b094:	bl	55e8 <__errno_location@plt>
    b098:	cmp	r5, #0
    b09c:	popeq	{r4, r5, r6, r7, r8, r9, fp, pc}
    b0a0:	mov	r6, r0
    b0a4:	ldr	r0, [r5, #48]	; 0x30
    b0a8:	cmp	r0, #0
    b0ac:	ldrne	r1, [r0, #260]	; 0x104
    b0b0:	cmpne	r1, #0
    b0b4:	bne	b0bc <rb_connect_callback+0x38>
    b0b8:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
    b0bc:	mov	r9, r1
    b0c0:	mov	r1, #0
    b0c4:	ldr	r8, [r6]
    b0c8:	mov	r2, #0
    b0cc:	mov	r3, #0
    b0d0:	str	r1, [r0, #260]	; 0x104
    b0d4:	mov	r1, #0
    b0d8:	ldr	r7, [r0, #264]	; 0x108
    b0dc:	mov	r0, r5
    b0e0:	bl	4d24 <rb_settimeout@plt>
    b0e4:	str	r8, [r6]
    b0e8:	mov	r0, r5
    b0ec:	mov	r1, r4
    b0f0:	mov	r2, r7
    b0f4:	mov	r3, r9
    b0f8:	pop	{r4, r5, r6, r7, r8, r9, fp, lr}
    b0fc:	bx	r3

0000b100 <rb_connect_timeout>:
    b100:	mov	r1, #3
    b104:	b	b084 <rb_connect_callback>

0000b108 <rb_ignore_errno>:
    b108:	sub	r2, r0, #85	; 0x55
    b10c:	mov	r1, r0
    b110:	mov	r0, #1
    b114:	cmp	r2, #30
    b118:	bhi	b130 <rb_ignore_errno+0x28>
    b11c:	movw	r3, #1
    b120:	mov	ip, #1
    b124:	movt	r3, #16400	; 0x4010
    b128:	tst	r3, ip, lsl r2
    b12c:	bxne	lr
    b130:	cmp	r1, #4
    b134:	cmpne	r1, #11
    b138:	bne	b140 <rb_ignore_errno+0x38>
    b13c:	bx	lr
    b140:	mov	r0, #0
    b144:	bx	lr

0000b148 <rb_setselect>:
    b148:	ldr	ip, [pc, #4]	; b154 <rb_setselect+0xc>
    b14c:	ldr	ip, [pc, ip]
    b150:	bx	ip
    b154:	.word	0x0002f814

0000b158 <rb_connect_outcome>:
    b158:	push	{r4, r5, fp, lr}
    b15c:	add	fp, sp, #8
    b160:	sub	sp, sp, #16
    b164:	mov	r4, r0
    b168:	mov	r0, #0
    b16c:	str	r0, [sp, #12]
    b170:	mov	r0, #4
    b174:	cmp	r4, #0
    b178:	str	r0, [sp, #8]
    b17c:	beq	b1f0 <rb_connect_outcome+0x98>
    b180:	ldr	r0, [r4, #48]	; 0x30
    b184:	cmp	r0, #0
    b188:	ldrne	r0, [r0, #260]	; 0x104
    b18c:	cmpne	r0, #0
    b190:	beq	b1f0 <rb_connect_outcome+0x98>
    b194:	ldr	r0, [r4, #12]
    b198:	add	r1, sp, #8
    b19c:	add	r3, sp, #12
    b1a0:	mov	r2, #4
    b1a4:	str	r1, [sp]
    b1a8:	mov	r1, #1
    b1ac:	bl	5570 <getsockopt@plt>
    b1b0:	cmp	r0, #0
    b1b4:	blt	b1d0 <rb_connect_outcome+0x78>
    b1b8:	ldr	r5, [sp, #12]
    b1bc:	cmp	r5, #0
    b1c0:	beq	b1d0 <rb_connect_outcome+0x78>
    b1c4:	bl	55e8 <__errno_location@plt>
    b1c8:	str	r5, [r0]
    b1cc:	b	b1e4 <rb_connect_outcome+0x8c>
    b1d0:	cmn	r0, #1
    b1d4:	ble	b1e4 <rb_connect_outcome+0x8c>
    b1d8:	mov	r0, r4
    b1dc:	mov	r1, #0
    b1e0:	b	b1ec <rb_connect_outcome+0x94>
    b1e4:	mov	r0, r4
    b1e8:	mov	r1, #4
    b1ec:	bl	b084 <rb_connect_callback>
    b1f0:	sub	sp, fp, #8
    b1f4:	pop	{r4, r5, fp, pc}

0000b1f8 <rb_connect_sctp>:
    b1f8:	mov	r1, #4
    b1fc:	b	b084 <rb_connect_callback>

0000b200 <rb_connect_sockaddr>:
    b200:	cmp	r0, #0
    b204:	moveq	r0, #0
    b208:	bxeq	lr
    b20c:	push	{fp, lr}
    b210:	mov	fp, sp
    b214:	ldr	r0, [r0, #48]	; 0x30
    b218:	add	r3, r0, #128	; 0x80
    b21c:	mov	r0, r1
    b220:	mov	r1, r3
    b224:	bl	5114 <memcpy@plt>
    b228:	mov	r0, #1
    b22c:	pop	{fp, pc}

0000b230 <rb_errstr>:
    b230:	cmp	r0, #6
    b234:	ldrls	r1, [pc, #24]	; b254 <rb_errstr+0x24>
    b238:	addls	r1, pc, r1
    b23c:	ldrls	r0, [r1, r0, lsl #2]
    b240:	bxls	lr
    b244:	ldr	r0, [pc, #4]	; b250 <rb_errstr+0x20>
    b248:	add	r0, pc, r0
    b24c:	bx	lr
    b250:	.word	0x0000a90d
    b254:	.word	0x0001c7fc

0000b258 <rb_socketpair>:
    b258:	push	{r4, r5, r6, r7, fp, lr}
    b25c:	add	fp, sp, #16
    b260:	sub	sp, sp, #8
    b264:	mov	r4, r3
    b268:	ldr	r3, [pc, #256]	; b370 <rb_socketpair+0x118>
    b26c:	ldr	r3, [pc, r3]
    b270:	ldr	r3, [r3]
    b274:	ldr	r7, [pc, #248]	; b374 <rb_socketpair+0x11c>
    b278:	ldr	r7, [pc, r7]
    b27c:	cmp	r7, r3
    b280:	bge	b308 <rb_socketpair+0xb0>
    b284:	mov	r3, sp
    b288:	bl	4e98 <socketpair@plt>
    b28c:	mvn	r5, #0
    b290:	cmp	r0, #0
    b294:	bne	b318 <rb_socketpair+0xc0>
    b298:	ldr	r6, [fp, #12]
    b29c:	ldr	r0, [sp]
    b2a0:	ldr	r7, [fp, #8]
    b2a4:	mov	r1, #4
    b2a8:	mov	r2, r6
    b2ac:	bl	5384 <rb_open@plt>
    b2b0:	str	r0, [r4]
    b2b4:	mov	r1, #4
    b2b8:	mov	r2, r6
    b2bc:	ldr	r0, [sp, #4]
    b2c0:	bl	5384 <rb_open@plt>
    b2c4:	str	r0, [r7]
    b2c8:	ldr	r1, [r4]
    b2cc:	cmp	r1, #0
    b2d0:	beq	b324 <rb_socketpair+0xcc>
    b2d4:	cmp	r0, #0
    b2d8:	beq	b330 <rb_socketpair+0xd8>
    b2dc:	mov	r0, r1
    b2e0:	bl	4f40 <rb_set_nb@plt>
    b2e4:	cmp	r0, #0
    b2e8:	beq	b33c <rb_socketpair+0xe4>
    b2ec:	ldr	r0, [r7]
    b2f0:	bl	4f40 <rb_set_nb@plt>
    b2f4:	mov	r5, #0
    b2f8:	cmp	r0, #0
    b2fc:	bne	b318 <rb_socketpair+0xc0>
    b300:	ldr	r5, [sp, #4]
    b304:	b	b340 <rb_socketpair+0xe8>
    b308:	bl	55e8 <__errno_location@plt>
    b30c:	mov	r1, #23
    b310:	str	r1, [r0]
    b314:	mvn	r5, #0
    b318:	mov	r0, r5
    b31c:	sub	sp, fp, #16
    b320:	pop	{r4, r5, r6, r7, fp, pc}
    b324:	cmp	r0, #0
    b328:	bne	b334 <rb_socketpair+0xdc>
    b32c:	b	b318 <rb_socketpair+0xc0>
    b330:	mov	r0, r1
    b334:	bl	5174 <rb_close@plt>
    b338:	b	b314 <rb_socketpair+0xbc>
    b33c:	ldr	r5, [sp]
    b340:	bl	55e8 <__errno_location@plt>
    b344:	ldr	r0, [r0]
    b348:	bl	4cdc <strerror@plt>
    b34c:	mov	r2, r0
    b350:	ldr	r0, [pc, #32]	; b378 <rb_socketpair+0x120>
    b354:	mov	r1, r5
    b358:	add	r0, pc, r0
    b35c:	bl	5228 <rb_lib_log@plt>
    b360:	ldr	r0, [r4]
    b364:	bl	5174 <rb_close@plt>
    b368:	ldr	r0, [r7]
    b36c:	b	b334 <rb_socketpair+0xdc>
    b370:	.word	0x0001d114
    b374:	.word	0x0002f6b0
    b378:	.word	0x0000a813

0000b37c <rb_open>:
    b37c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
    b380:	add	fp, sp, #24
    b384:	mov	r4, r2
    b388:	mov	r8, r1
    b38c:	mov	r5, r0
    b390:	eor	r7, r0, r0, lsr #12
    b394:	cmn	r0, #1
    b398:	ble	b3dc <rb_open+0x60>
    b39c:	ldr	r1, [pc, #348]	; b500 <rb_open+0x184>
    b3a0:	mov	r0, r7
    b3a4:	bfc	r0, #12, #20
    b3a8:	eor	r0, r0, r5, lsr #24
    b3ac:	add	r0, r0, r0, lsl #1
    b3b0:	ldr	r1, [pc, r1]
    b3b4:	ldr	r1, [r1]
    b3b8:	ldr	r0, [r1, r0, lsl #2]
    b3bc:	b	b3d4 <rb_open+0x58>
    b3c0:	ldr	r6, [r0]
    b3c4:	ldr	r1, [r6, #12]
    b3c8:	cmp	r1, r5
    b3cc:	beq	b434 <rb_open+0xb8>
    b3d0:	ldr	r0, [r0, #8]
    b3d4:	cmp	r0, #0
    b3d8:	bne	b3c0 <rb_open+0x44>
    b3dc:	ldr	r0, [pc, #288]	; b504 <rb_open+0x188>
    b3e0:	ldr	r0, [pc, r0]
    b3e4:	bl	5258 <rb_bh_alloc@plt>
    b3e8:	str	r5, [r0, #12]
    b3ec:	mov	r6, r0
    b3f0:	mov	r1, #0
    b3f4:	ldr	r0, [pc, #268]	; b508 <rb_open+0x18c>
    b3f8:	ldr	r0, [pc, r0]
    b3fc:	ldr	r0, [r0]
    b400:	str	r1, [r6, #4]
    b404:	eor	r1, r7, r5, asr #24
    b408:	str	r6, [r6]
    b40c:	bfc	r1, #12, #20
    b410:	add	r1, r1, r1, lsl #1
    b414:	mov	r2, r0
    b418:	ldr	r3, [r2, r1, lsl #2]!
    b41c:	cmp	r3, #0
    b420:	str	r3, [r6, #8]
    b424:	beq	b440 <rb_open+0xc4>
    b428:	add	r3, r3, #4
    b42c:	str	r6, [r3]
    b430:	b	b450 <rb_open+0xd4>
    b434:	cmp	r6, #0
    b438:	bne	b464 <rb_open+0xe8>
    b43c:	b	b3dc <rb_open+0x60>
    b440:	add	r3, r0, r1, lsl #2
    b444:	ldr	r7, [r3, #4]!
    b448:	cmp	r7, #0
    b44c:	streq	r6, [r3]
    b450:	str	r6, [r2]
    b454:	add	r0, r0, r1, lsl #2
    b458:	ldr	r1, [r0, #8]
    b45c:	add	r1, r1, #1
    b460:	str	r1, [r0, #8]
    b464:	ldrb	r0, [r6, #16]
    b468:	tst	r0, #1
    b46c:	bne	b4cc <rb_open+0x150>
    b470:	cmp	r4, #0
    b474:	orr	r0, r0, #1
    b478:	strb	r8, [r6, #17]
    b47c:	str	r5, [r6, #12]
    b480:	strb	r0, [r6, #16]
    b484:	beq	b4ac <rb_open+0x130>
    b488:	mov	r0, #128	; 0x80
    b48c:	bl	52ac <malloc@plt>
    b490:	cmp	r0, #0
    b494:	beq	b4fc <rb_open+0x180>
    b498:	mov	r1, r4
    b49c:	mov	r2, #128	; 0x80
    b4a0:	mov	r5, r0
    b4a4:	bl	4fc4 <rb_strlcpy@plt>
    b4a8:	str	r5, [r6, #24]
    b4ac:	ldr	r0, [pc, #96]	; b514 <rb_open+0x198>
    b4b0:	ldr	r0, [pc, r0]
    b4b4:	ldr	r1, [pc, #92]	; b518 <rb_open+0x19c>
    b4b8:	add	r0, r0, #1
    b4bc:	add	r1, pc, r1
    b4c0:	str	r0, [r1]
    b4c4:	mov	r0, r6
    b4c8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
    b4cc:	cmp	r6, #0
    b4d0:	ldrne	r2, [r6, #24]
    b4d4:	cmpne	r2, #0
    b4d8:	bne	b4e4 <rb_open+0x168>
    b4dc:	ldr	r2, [pc, #40]	; b50c <rb_open+0x190>
    b4e0:	add	r2, pc, r2
    b4e4:	ldr	r0, [pc, #36]	; b510 <rb_open+0x194>
    b4e8:	mov	r1, r5
    b4ec:	add	r0, pc, r0
    b4f0:	bl	5228 <rb_lib_log@plt>
    b4f4:	mov	r6, #0
    b4f8:	b	b4c4 <rb_open+0x148>
    b4fc:	bl	5288 <rb_outofmemory@plt>
    b500:	.word	0x0001cff0
    b504:	.word	0x0002f550
    b508:	.word	0x0001cfa8
    b50c:	.word	0x0000a5fe
    b510:	.word	0x0000a732
    b514:	.word	0x0002f478
    b518:	.word	0x0002f46c

0000b51c <rb_close>:
    b51c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
    b520:	add	fp, sp, #24
    b524:	cmp	r0, #0
    b528:	popeq	{r4, r5, r6, r7, r8, sl, fp, pc}
    b52c:	ldrb	r7, [r0, #17]
    b530:	ldr	r8, [r0, #12]
    b534:	mov	r5, r0
    b538:	ands	r6, r7, #16
    b53c:	beq	b54c <rb_close+0x30>
    b540:	mov	r0, r8
    b544:	mov	r1, #0
    b548:	bl	4f04 <listen@plt>
    b54c:	ldr	r4, [pc, #324]	; b698 <rb_close+0x17c>
    b550:	mov	r0, r5
    b554:	mov	r1, #3
    b558:	mov	r2, #0
    b55c:	mov	r3, #0
    b560:	ldr	r4, [pc, r4]
    b564:	blx	r4
    b568:	mov	r0, r5
    b56c:	mov	r1, #0
    b570:	mov	r2, #0
    b574:	mov	r3, #0
    b578:	bl	4d24 <rb_settimeout@plt>
    b57c:	ldr	r0, [r5, #52]	; 0x34
    b580:	cmp	r0, #0
    b584:	beq	b58c <rb_close+0x70>
    b588:	bl	500c <free@plt>
    b58c:	ldr	r0, [r5, #48]	; 0x30
    b590:	cmp	r0, #0
    b594:	beq	b59c <rb_close+0x80>
    b598:	bl	500c <free@plt>
    b59c:	ldr	r0, [r5, #24]
    b5a0:	cmp	r0, #0
    b5a4:	beq	b5ac <rb_close+0x90>
    b5a8:	bl	500c <free@plt>
    b5ac:	tst	r7, #32
    b5b0:	beq	b5bc <rb_close+0xa0>
    b5b4:	mov	r0, r5
    b5b8:	bl	d42c <rb_ssl_shutdown>
    b5bc:	ldrb	r0, [r5, #16]
    b5c0:	tst	r0, #1
    b5c4:	beq	b67c <rb_close+0x160>
    b5c8:	ldr	r1, [r5, #12]
    b5cc:	ldr	r2, [r5, #8]
    b5d0:	ldr	r3, [r5, #4]
    b5d4:	eor	r7, r1, r1, lsr #12
    b5d8:	cmp	r2, #0
    b5dc:	eor	r1, r7, r1, asr #24
    b5e0:	ldr	r7, [pc, #180]	; b69c <rb_close+0x180>
    b5e4:	bfc	r1, #12, #20
    b5e8:	add	r1, r1, r1, lsl #1
    b5ec:	ldr	r7, [pc, r7]
    b5f0:	ldr	r7, [r7]
    b5f4:	add	r7, r7, r1, lsl #2
    b5f8:	streq	r3, [r7, #4]
    b5fc:	strne	r3, [r2, #4]
    b600:	mov	r1, r7
    b604:	ldrne	r3, [r5, #4]
    b608:	cmp	r3, #0
    b60c:	addne	r1, r3, #8
    b610:	str	r2, [r1]
    b614:	mov	r1, #0
    b618:	str	r1, [r5, #4]
    b61c:	ldr	r2, [pc, #124]	; b6a0 <rb_close+0x184>
    b620:	ldr	r2, [pc, r2]
    b624:	cmp	r2, #0
    b628:	str	r2, [r5, #8]
    b62c:	beq	b63c <rb_close+0x120>
    b630:	add	r2, r2, #4
    b634:	str	r5, [r2]
    b638:	b	b650 <rb_close+0x134>
    b63c:	ldr	r2, [pc, #96]	; b6a4 <rb_close+0x188>
    b640:	add	r2, pc, r2
    b644:	ldr	r1, [r2, #4]!
    b648:	cmp	r1, #0
    b64c:	streq	r5, [r2]
    b650:	ldr	r1, [pc, #80]	; b6a8 <rb_close+0x18c>
    b654:	and	r0, r0, #254	; 0xfe
    b658:	add	r1, pc, r1
    b65c:	str	r5, [r1]
    b660:	ldr	r2, [r7, #8]
    b664:	sub	r2, r2, #1
    b668:	str	r2, [r7, #8]
    b66c:	ldr	r2, [r1, #8]
    b670:	add	r2, r2, #1
    b674:	str	r2, [r1, #8]
    b678:	strb	r0, [r5, #16]
    b67c:	cmp	r6, #0
    b680:	beq	b694 <rb_close+0x178>
    b684:	mov	r0, r8
    b688:	mov	r1, #2
    b68c:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
    b690:	b	5210 <shutdown@plt>
    b694:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
    b698:	.word	0x0002f400
    b69c:	.word	0x0001cdb4
    b6a0:	.word	0x0002f34c
    b6a4:	.word	0x0002f32c
    b6a8:	.word	0x0002f314

0000b6ac <rb_pipe>:
    b6ac:	push	{r4, r5, r6, sl, fp, lr}
    b6b0:	add	fp, sp, #16
    b6b4:	sub	sp, sp, #8
    b6b8:	mov	r5, r0
    b6bc:	ldr	r0, [pc, #220]	; b7a0 <rb_pipe+0xf4>
    b6c0:	mov	r4, r1
    b6c4:	ldr	r0, [pc, r0]
    b6c8:	ldr	r0, [r0]
    b6cc:	ldr	r1, [pc, #208]	; b7a4 <rb_pipe+0xf8>
    b6d0:	ldr	r1, [pc, r1]
    b6d4:	cmp	r1, r0
    b6d8:	bge	b750 <rb_pipe+0xa4>
    b6dc:	mov	r0, sp
    b6e0:	mov	r6, r2
    b6e4:	bl	557c <pipe@plt>
    b6e8:	mov	r1, r0
    b6ec:	mvn	r0, #0
    b6f0:	cmn	r1, #1
    b6f4:	beq	b760 <rb_pipe+0xb4>
    b6f8:	ldr	r0, [sp]
    b6fc:	mov	r1, #8
    b700:	mov	r2, r6
    b704:	bl	5384 <rb_open@plt>
    b708:	str	r0, [r5]
    b70c:	mov	r1, #8
    b710:	mov	r2, r6
    b714:	ldr	r0, [sp, #4]
    b718:	bl	5384 <rb_open@plt>
    b71c:	str	r0, [r4]
    b720:	ldr	r0, [r5]
    b724:	bl	4f40 <rb_set_nb@plt>
    b728:	cmp	r0, #0
    b72c:	beq	b768 <rb_pipe+0xbc>
    b730:	ldr	r0, [r4]
    b734:	bl	4f40 <rb_set_nb@plt>
    b738:	mov	r1, r0
    b73c:	mov	r0, #0
    b740:	cmp	r1, #0
    b744:	bne	b760 <rb_pipe+0xb4>
    b748:	ldr	r6, [sp, #4]
    b74c:	b	b76c <rb_pipe+0xc0>
    b750:	bl	55e8 <__errno_location@plt>
    b754:	mov	r1, #23
    b758:	str	r1, [r0]
    b75c:	mvn	r0, #0
    b760:	sub	sp, fp, #16
    b764:	pop	{r4, r5, r6, sl, fp, pc}
    b768:	ldr	r6, [sp]
    b76c:	bl	55e8 <__errno_location@plt>
    b770:	ldr	r0, [r0]
    b774:	bl	4cdc <strerror@plt>
    b778:	mov	r2, r0
    b77c:	ldr	r0, [pc, #36]	; b7a8 <rb_pipe+0xfc>
    b780:	mov	r1, r6
    b784:	add	r0, pc, r0
    b788:	bl	5228 <rb_lib_log@plt>
    b78c:	ldr	r0, [r5]
    b790:	bl	5174 <rb_close@plt>
    b794:	ldr	r0, [r4]
    b798:	bl	5174 <rb_close@plt>
    b79c:	b	b75c <rb_pipe+0xb0>
    b7a0:	.word	0x0001ccbc
    b7a4:	.word	0x0002f258
    b7a8:	.word	0x0000a3e7

0000b7ac <rb_socket>:
    b7ac:	push	{r4, r5, r6, r7, fp, lr}
    b7b0:	add	fp, sp, #16
    b7b4:	sub	sp, sp, #8
    b7b8:	mov	r7, r0
    b7bc:	ldr	r0, [pc, #308]	; b8f8 <rb_socket+0x14c>
    b7c0:	mov	r6, r3
    b7c4:	ldr	r0, [pc, r0]
    b7c8:	ldr	r0, [r0]
    b7cc:	ldr	r3, [pc, #296]	; b8fc <rb_socket+0x150>
    b7d0:	ldr	r3, [pc, r3]
    b7d4:	cmp	r3, r0
    b7d8:	bge	b8b8 <rb_socket+0x10c>
    b7dc:	mov	r0, r7
    b7e0:	bl	50a8 <socket@plt>
    b7e4:	mov	r4, #0
    b7e8:	cmp	r0, #0
    b7ec:	blt	b8ac <rb_socket+0x100>
    b7f0:	mov	r5, r0
    b7f4:	cmp	r7, #10
    b7f8:	bne	b828 <rb_socket+0x7c>
    b7fc:	mov	r0, #1
    b800:	add	r3, sp, #4
    b804:	mov	r1, #41	; 0x29
    b808:	mov	r2, #26
    b80c:	str	r0, [sp, #4]
    b810:	mov	r0, #4
    b814:	str	r0, [sp]
    b818:	mov	r0, r5
    b81c:	bl	5594 <setsockopt@plt>
    b820:	cmn	r0, #1
    b824:	beq	b87c <rb_socket+0xd0>
    b828:	mov	r0, r5
    b82c:	mov	r1, #4
    b830:	mov	r2, r6
    b834:	bl	5384 <rb_open@plt>
    b838:	cmp	r0, #0
    b83c:	beq	b858 <rb_socket+0xac>
    b840:	mov	r6, r0
    b844:	bl	4f40 <rb_set_nb@plt>
    b848:	cmp	r0, #0
    b84c:	beq	b8cc <rb_socket+0x120>
    b850:	mov	r4, r6
    b854:	b	b8ac <rb_socket+0x100>
    b858:	bl	55e8 <__errno_location@plt>
    b85c:	ldr	r0, [r0]
    b860:	bl	4cdc <strerror@plt>
    b864:	mov	r2, r0
    b868:	ldr	r0, [pc, #148]	; b904 <rb_socket+0x158>
    b86c:	mov	r1, r5
    b870:	add	r0, pc, r0
    b874:	bl	5228 <rb_lib_log@plt>
    b878:	b	b8a4 <rb_socket+0xf8>
    b87c:	ldr	r6, [sp, #4]
    b880:	bl	55e8 <__errno_location@plt>
    b884:	ldr	r0, [r0]
    b888:	bl	4cdc <strerror@plt>
    b88c:	mov	r3, r0
    b890:	ldr	r0, [pc, #104]	; b900 <rb_socket+0x154>
    b894:	mov	r1, r6
    b898:	mov	r2, r5
    b89c:	add	r0, pc, r0
    b8a0:	bl	5228 <rb_lib_log@plt>
    b8a4:	mov	r0, r5
    b8a8:	bl	524c <close@plt>
    b8ac:	mov	r0, r4
    b8b0:	sub	sp, fp, #16
    b8b4:	pop	{r4, r5, r6, r7, fp, pc}
    b8b8:	bl	55e8 <__errno_location@plt>
    b8bc:	mov	r1, #23
    b8c0:	mov	r4, #0
    b8c4:	str	r1, [r0]
    b8c8:	b	b8ac <rb_socket+0x100>
    b8cc:	bl	55e8 <__errno_location@plt>
    b8d0:	ldr	r0, [r0]
    b8d4:	bl	4cdc <strerror@plt>
    b8d8:	mov	r2, r0
    b8dc:	ldr	r0, [pc, #36]	; b908 <rb_socket+0x15c>
    b8e0:	mov	r1, r5
    b8e4:	add	r0, pc, r0
    b8e8:	bl	5228 <rb_lib_log@plt>
    b8ec:	mov	r0, r6
    b8f0:	bl	5174 <rb_close@plt>
    b8f4:	b	b8ac <rb_socket+0x100>
    b8f8:	.word	0x0001cbbc
    b8fc:	.word	0x0002f158
    b900:	.word	0x0000a2fc
    b904:	.word	0x0000a367
    b908:	.word	0x0000a287

0000b90c <rb_listen>:
    b90c:	push	{r4, r5, r6, sl, fp, lr}
    b910:	add	fp, sp, #16
    b914:	sub	sp, sp, #8
    b918:	str	r1, [sp, #4]
    b91c:	mov	r5, r0
    b920:	mov	r6, r2
    b924:	ldrb	r0, [r0, #17]
    b928:	and	r0, r0, #128	; 0x80
    b92c:	orr	r0, r0, #20
    b930:	strb	r0, [r5, #17]
    b934:	ldr	r0, [r5, #12]
    b938:	bl	4f04 <listen@plt>
    b93c:	mov	r4, r0
    b940:	cmp	r6, #0
    b944:	beq	b96c <rb_listen+0x60>
    b948:	cmp	r4, #0
    b94c:	bne	b96c <rb_listen+0x60>
    b950:	ldr	r0, [r5, #12]
    b954:	mov	r1, #4
    b958:	add	r3, sp, #4
    b95c:	mov	r2, #9
    b960:	str	r1, [sp]
    b964:	mov	r1, #6
    b968:	bl	5594 <setsockopt@plt>
    b96c:	mov	r0, r4
    b970:	sub	sp, fp, #16
    b974:	pop	{r4, r5, r6, sl, fp, pc}

0000b978 <rb_fdlist_init>:
    b978:	push	{r4, r5, r6, r7, fp, lr}
    b97c:	add	fp, sp, #16
    b980:	ldr	r6, [pc, #116]	; b9fc <rb_fdlist_init+0x84>
    b984:	mov	r4, r2
    b988:	add	r6, pc, r6
    b98c:	ldrb	r2, [r6]
    b990:	cmp	r2, #0
    b994:	bne	b9d8 <rb_fdlist_init+0x60>
    b998:	ldr	r7, [pc, #96]	; ba00 <rb_fdlist_init+0x88>
    b99c:	cmp	r0, #0
    b9a0:	ldr	r7, [pc, r7]
    b9a4:	str	r1, [r7]
    b9a8:	beq	b9d0 <rb_fdlist_init+0x58>
    b9ac:	cmp	r1, #4
    b9b0:	blt	b9d0 <rb_fdlist_init+0x58>
    b9b4:	mov	r5, #3
    b9b8:	mov	r0, r5
    b9bc:	bl	524c <close@plt>
    b9c0:	ldr	r0, [r7]
    b9c4:	add	r5, r5, #1
    b9c8:	cmp	r5, r0
    b9cc:	blt	b9b8 <rb_fdlist_init+0x40>
    b9d0:	mov	r0, #1
    b9d4:	strb	r0, [r6]
    b9d8:	ldr	r2, [pc, #36]	; ba04 <rb_fdlist_init+0x8c>
    b9dc:	mov	r0, #68	; 0x44
    b9e0:	mov	r1, r4
    b9e4:	add	r2, pc, r2
    b9e8:	bl	53b4 <rb_bh_create@plt>
    b9ec:	ldr	r1, [pc, #20]	; ba08 <rb_fdlist_init+0x90>
    b9f0:	add	r1, pc, r1
    b9f4:	str	r0, [r1]
    b9f8:	pop	{r4, r5, r6, r7, fp, pc}
    b9fc:	.word	0x0002efa4
    ba00:	.word	0x0001c9e0
    ba04:	.word	0x0000a22c
    ba08:	.word	0x0002ef40

0000ba0c <rb_dump_fd>:
    ba0c:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
    ba10:	add	fp, sp, #24
    ba14:	ldr	r8, [pc, #128]	; ba9c <rb_dump_fd+0x90>
    ba18:	mov	r4, r1
    ba1c:	mov	r5, r0
    ba20:	mov	r6, #0
    ba24:	ldr	r8, [pc, r8]
    ba28:	ldr	r9, [pc, #112]	; baa0 <rb_dump_fd+0x94>
    ba2c:	add	r9, pc, r9
    ba30:	ldr	r0, [r8]
    ba34:	add	r1, r6, r6, lsl #1
    ba38:	add	r2, r0, r1, lsl #2
    ba3c:	ldr	r2, [r2, #8]
    ba40:	cmp	r2, #0
    ba44:	beq	ba8c <rb_dump_fd+0x80>
    ba48:	ldr	r7, [r0, r1, lsl #2]
    ba4c:	cmp	r7, #0
    ba50:	beq	ba8c <rb_dump_fd+0x80>
    ba54:	ldr	r1, [r7]
    ba58:	cmp	r1, #0
    ba5c:	ldrbne	r0, [r1, #16]
    ba60:	tstne	r0, #1
    ba64:	bne	ba70 <rb_dump_fd+0x64>
    ba68:	ldr	r7, [r7, #8]
    ba6c:	b	ba4c <rb_dump_fd+0x40>
    ba70:	ldr	r0, [r1, #12]
    ba74:	ldr	r1, [r1, #24]
    ba78:	mov	r2, r4
    ba7c:	cmp	r1, #0
    ba80:	moveq	r1, r9
    ba84:	blx	r5
    ba88:	b	ba68 <rb_dump_fd+0x5c>
    ba8c:	add	r6, r6, #1
    ba90:	cmp	r6, #4096	; 0x1000
    ba94:	popeq	{r4, r5, r6, r7, r8, r9, fp, pc}
    ba98:	b	ba30 <rb_dump_fd+0x24>
    ba9c:	.word	0x0001c97c
    baa0:	.word	0x0000a2de

0000baa4 <rb_note>:
    baa4:	push	{r4, r5, r6, sl, fp, lr}
    baa8:	add	fp, sp, #16
    baac:	cmp	r0, #0
    bab0:	popeq	{r4, r5, r6, sl, fp, pc}
    bab4:	mov	r4, r0
    bab8:	ldr	r0, [r0, #24]
    babc:	mov	r5, r1
    bac0:	cmp	r0, #0
    bac4:	beq	bacc <rb_note+0x28>
    bac8:	bl	500c <free@plt>
    bacc:	mov	r0, #128	; 0x80
    bad0:	bl	52ac <malloc@plt>
    bad4:	cmp	r0, #0
    bad8:	beq	baf4 <rb_note+0x50>
    badc:	mov	r1, r5
    bae0:	mov	r2, #128	; 0x80
    bae4:	mov	r6, r0
    bae8:	bl	4fc4 <rb_strlcpy@plt>
    baec:	str	r6, [r4, #24]
    baf0:	pop	{r4, r5, r6, sl, fp, pc}
    baf4:	bl	5288 <rb_outofmemory@plt>

0000baf8 <rb_set_type>:
    baf8:	strb	r1, [r0, #17]
    bafc:	bx	lr

0000bb00 <rb_get_type>:
    bb00:	ldrb	r0, [r0, #17]
    bb04:	bx	lr

0000bb08 <rb_fd_ssl>:
    bb08:	cmp	r0, #0
    bb0c:	moveq	r0, #0
    bb10:	ldrbne	r0, [r0, #17]
    bb14:	ubfxne	r0, r0, #5, #1
    bb18:	bx	lr

0000bb1c <rb_get_fde>:
    bb1c:	cmp	r0, #0
    bb20:	blt	bb64 <rb_get_fde+0x48>
    bb24:	ldr	r2, [pc, #68]	; bb70 <rb_get_fde+0x54>
    bb28:	eor	r1, r0, r0, lsr #12
    bb2c:	bfc	r1, #12, #20
    bb30:	eor	r1, r1, r0, lsr #24
    bb34:	add	r1, r1, r1, lsl #1
    bb38:	ldr	r2, [pc, r2]
    bb3c:	ldr	r2, [r2]
    bb40:	ldr	r2, [r2, r1, lsl #2]
    bb44:	b	bb5c <rb_get_fde+0x40>
    bb48:	ldr	r1, [r2]
    bb4c:	ldr	r3, [r1, #12]
    bb50:	cmp	r3, r0
    bb54:	beq	bb68 <rb_get_fde+0x4c>
    bb58:	ldr	r2, [r2, #8]
    bb5c:	cmp	r2, #0
    bb60:	bne	bb48 <rb_get_fde+0x2c>
    bb64:	mov	r1, #0
    bb68:	mov	r0, r1
    bb6c:	bx	lr
    bb70:	.word	0x0001c868

0000bb74 <rb_read>:
    bb74:	cmp	r0, #0
    bb78:	moveq	r0, #0
    bb7c:	bxeq	lr
    bb80:	ldrb	r3, [r0, #17]
    bb84:	tst	r3, #32
    bb88:	bne	bb9c <rb_read+0x28>
    bb8c:	ldr	r0, [r0, #12]
    bb90:	tst	r3, #4
    bb94:	bne	bba0 <rb_read+0x2c>
    bb98:	b	5024 <read@plt>
    bb9c:	b	ddfc <rb_ssl_read>
    bba0:	mov	r3, #0
    bba4:	b	4ebc <recv@plt>

0000bba8 <rb_write>:
    bba8:	cmp	r0, #0
    bbac:	moveq	r0, #0
    bbb0:	bxeq	lr
    bbb4:	ldrb	r3, [r0, #17]
    bbb8:	tst	r3, #32
    bbbc:	bne	bbd0 <rb_write+0x28>
    bbc0:	ldr	r0, [r0, #12]
    bbc4:	tst	r3, #4
    bbc8:	bne	bbd4 <rb_write+0x2c>
    bbcc:	b	503c <write@plt>
    bbd0:	b	df58 <rb_ssl_write>
    bbd4:	mov	r3, #16384	; 0x4000
    bbd8:	b	539c <send@plt>

0000bbdc <rb_writev>:
    bbdc:	push	{r4, r5, r6, r7, fp, lr}
    bbe0:	add	fp, sp, #16
    bbe4:	sub	sp, sp, #32
    bbe8:	cmp	r0, #0
    bbec:	beq	bc28 <rb_writev+0x4c>
    bbf0:	mov	r6, r0
    bbf4:	ldrb	r0, [r0, #17]
    bbf8:	mov	r4, r2
    bbfc:	mov	r5, r1
    bc00:	tst	r0, #32
    bc04:	bne	bc3c <rb_writev+0x60>
    bc08:	tst	r0, #4
    bc0c:	bne	bc70 <rb_writev+0x94>
    bc10:	ldr	r0, [r6, #12]
    bc14:	mov	r1, r5
    bc18:	mov	r2, r4
    bc1c:	sub	sp, fp, #16
    bc20:	pop	{r4, r5, r6, r7, fp, lr}
    bc24:	b	4fac <writev@plt>
    bc28:	bl	55e8 <__errno_location@plt>
    bc2c:	mov	r1, #9
    bc30:	mvn	r7, #0
    bc34:	str	r1, [r0]
    bc38:	b	bcb0 <rb_writev+0xd4>
    bc3c:	mov	r7, #0
    bc40:	cmp	r4, #0
    bc44:	beq	bcb0 <rb_writev+0xd4>
    bc48:	ldm	r5, {r1, r2}
    bc4c:	mov	r0, r6
    bc50:	bl	4f7c <rb_write@plt>
    bc54:	cmp	r0, #0
    bc58:	ble	bca8 <rb_writev+0xcc>
    bc5c:	subs	r4, r4, #1
    bc60:	add	r7, r0, r7
    bc64:	add	r5, r5, #8
    bc68:	bne	bc48 <rb_writev+0x6c>
    bc6c:	b	bcb0 <rb_writev+0xd4>
    bc70:	mov	r1, sp
    bc74:	vmov.i32	q8, #0	; 0x00000000
    bc78:	add	r0, r1, #12
    bc7c:	mov	r2, r1
    bc80:	vst1.32	{d16-d17}, [r0]
    bc84:	mov	r0, #8
    bc88:	vst1.64	{d16-d17}, [r2], r0
    bc8c:	str	r5, [r2]
    bc90:	str	r4, [sp, #12]
    bc94:	mov	r2, #16384	; 0x4000
    bc98:	ldr	r0, [r6, #12]
    bc9c:	bl	5018 <sendmsg@plt>
    bca0:	mov	r7, r0
    bca4:	b	bcb0 <rb_writev+0xd4>
    bca8:	cmp	r7, #0
    bcac:	movle	r7, r0
    bcb0:	mov	r0, r7
    bcb4:	sub	sp, fp, #16
    bcb8:	pop	{r4, r5, r6, r7, fp, pc}

0000bcbc <rb_inet_pton_sock>:
    bcbc:	push	{r4, r5, r6, r7, fp, lr}
    bcc0:	add	fp, sp, #16
    bcc4:	mov	r6, r0
    bcc8:	mov	r5, r1
    bccc:	mov	r0, r1
    bcd0:	mov	r1, #0
    bcd4:	mov	r2, #128	; 0x80
    bcd8:	mov	r4, #0
    bcdc:	bl	4f4c <memset@plt>
    bce0:	add	r1, r5, #4
    bce4:	mov	r0, r6
    bce8:	bl	c204 <inet_pton4>
    bcec:	mov	r7, #2
    bcf0:	cmp	r0, #0
    bcf4:	bne	bd14 <rb_inet_pton_sock+0x58>
    bcf8:	add	r2, r5, #8
    bcfc:	mov	r0, #10
    bd00:	mov	r1, r6
    bd04:	mov	r7, #10
    bd08:	bl	4f58 <rb_inet_pton@plt>
    bd0c:	cmp	r0, #0
    bd10:	beq	bd20 <rb_inet_pton_sock+0x64>
    bd14:	strh	r4, [r5, #2]
    bd18:	mov	r4, #1
    bd1c:	strh	r7, [r5]
    bd20:	mov	r0, r4
    bd24:	pop	{r4, r5, r6, r7, fp, pc}

0000bd28 <rb_inet_pton>:
    bd28:	push	{r4, r5, r6, sl, fp, lr}
    bd2c:	add	fp, sp, #16
    bd30:	sub	sp, sp, #56	; 0x38
    bd34:	mov	r4, r2
    bd38:	mov	r5, r1
    bd3c:	cmp	r0, #10
    bd40:	beq	bd68 <rb_inet_pton+0x40>
    bd44:	mov	r1, r0
    bd48:	mvn	r0, #0
    bd4c:	cmp	r1, #2
    bd50:	bne	bda0 <rb_inet_pton+0x78>
    bd54:	mov	r0, r5
    bd58:	mov	r1, r4
    bd5c:	sub	sp, fp, #16
    bd60:	pop	{r4, r5, r6, sl, fp, lr}
    bd64:	b	c204 <inet_pton4>
    bd68:	mov	r0, r5
    bd6c:	mov	r1, r4
    bd70:	bl	c204 <inet_pton4>
    bd74:	cmp	r0, #0
    bd78:	beq	bda8 <rb_inet_pton+0x80>
    bd7c:	ldr	r1, [pc, #56]	; bdbc <rb_inet_pton+0x94>
    bd80:	add	r6, sp, #3
    bd84:	mov	r2, r5
    bd88:	mov	r0, r6
    bd8c:	add	r1, pc, r1
    bd90:	bl	5600 <sprintf@plt>
    bd94:	mov	r0, r6
    bd98:	mov	r1, r4
    bd9c:	bl	c2e0 <inet_pton6>
    bda0:	sub	sp, fp, #16
    bda4:	pop	{r4, r5, r6, sl, fp, pc}
    bda8:	mov	r0, r5
    bdac:	mov	r1, r4
    bdb0:	sub	sp, fp, #16
    bdb4:	pop	{r4, r5, r6, sl, fp, lr}
    bdb8:	b	c2e0 <inet_pton6>
    bdbc:	.word	0x00009ec4

0000bdc0 <rb_inet_ntop_sock>:
    bdc0:	mov	r3, r2
    bdc4:	mov	r2, r1
    bdc8:	ldrh	r1, [r0]
    bdcc:	cmp	r1, #10
    bdd0:	beq	bdf0 <rb_inet_ntop_sock+0x30>
    bdd4:	cmp	r1, #2
    bdd8:	movne	r0, #0
    bddc:	bxne	lr
    bde0:	mov	r1, r2
    bde4:	add	r0, r0, #4
    bde8:	mov	r2, r3
    bdec:	b	c0e4 <inet_ntop4>
    bdf0:	add	r1, r0, #8
    bdf4:	mov	r0, #10
    bdf8:	b	bdfc <rb_inet_ntop>

0000bdfc <rb_inet_ntop>:
    bdfc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    be00:	add	fp, sp, #28
    be04:	sub	sp, sp, #92	; 0x5c
    be08:	cmp	r0, #10
    be0c:	beq	be38 <rb_inet_ntop+0x3c>
    be10:	mov	r7, r0
    be14:	mov	r0, #0
    be18:	cmp	r7, #2
    be1c:	bne	c090 <rb_inet_ntop+0x294>
    be20:	mov	r0, r1
    be24:	mov	r1, r2
    be28:	mov	r2, r3
    be2c:	sub	sp, fp, #28
    be30:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    be34:	b	c0e4 <inet_ntop4>
    be38:	ldr	r6, [r1]
    be3c:	cmp	r6, #0
    be40:	bne	be50 <rb_inet_ntop+0x54>
    be44:	ldr	r0, [r1, #4]
    be48:	cmp	r0, #0
    be4c:	beq	c098 <rb_inet_ntop+0x29c>
    be50:	add	ip, sp, #8
    be54:	vmov.i32	q8, #0	; 0x00000000
    be58:	str	r2, [sp, #4]
    be5c:	mov	r0, ip
    be60:	vst1.64	{d16-d17}, [r0]!
    be64:	vst1.64	{d16-d17}, [r0]
    be68:	ldrb	r0, [r1, #1]
    be6c:	bfi	r0, r6, #8, #8
    be70:	mov	r6, #0
    be74:	str	r0, [sp, #8]
    be78:	orr	r0, ip, #4
    be7c:	add	r2, r1, r6
    be80:	ldrb	r7, [r2, #2]
    be84:	ldrb	r2, [r2, #3]
    be88:	orr	r2, r2, r7, lsl #8
    be8c:	add	r7, r6, #4
    be90:	str	r2, [r0, r6, lsl #1]
    be94:	add	r2, r6, #2
    be98:	cmp	r7, #16
    be9c:	mov	r6, r2
    bea0:	bcc	be7c <rb_inet_ntop+0x80>
    bea4:	mvn	r0, #0
    bea8:	mov	r6, #0
    beac:	mov	r4, #0
    beb0:	mvn	lr, #0
    beb4:	mov	r2, #0
    beb8:	ldr	r7, [ip, r6, lsl #2]
    bebc:	cmp	r7, #0
    bec0:	beq	bef8 <rb_inet_ntop+0xfc>
    bec4:	cmn	r0, #1
    bec8:	beq	bef0 <rb_inet_ntop+0xf4>
    becc:	add	r5, lr, #1
    bed0:	cmp	r4, r2
    bed4:	mov	r7, #0
    bed8:	clz	r5, r5
    bedc:	movwgt	r7, #1
    bee0:	lsr	r5, r5, #5
    bee4:	orrs	r7, r5, r7
    bee8:	movne	lr, r0
    beec:	movne	r2, r4
    bef0:	mvn	r0, #0
    bef4:	b	bf08 <rb_inet_ntop+0x10c>
    bef8:	cmn	r0, #1
    befc:	add	r4, r4, #1
    bf00:	moveq	r0, r6
    bf04:	movweq	r4, #1
    bf08:	add	r6, r6, #1
    bf0c:	cmp	r6, #8
    bf10:	bne	beb8 <rb_inet_ntop+0xbc>
    bf14:	cmn	r0, #1
    bf18:	mov	r5, r3
    bf1c:	str	r1, [sp]
    bf20:	beq	bf4c <rb_inet_ntop+0x150>
    bf24:	add	r7, lr, #1
    bf28:	mov	r3, #0
    bf2c:	cmp	r4, r2
    bf30:	clz	r7, r7
    bf34:	movwgt	r3, #1
    bf38:	lsr	r7, r7, #5
    bf3c:	orrs	r3, r7, r3
    bf40:	moveq	r0, lr
    bf44:	movne	r2, r4
    bf48:	b	bf50 <rb_inet_ntop+0x154>
    bf4c:	mov	r0, lr
    bf50:	cmn	r0, #1
    bf54:	mov	r8, r0
    bf58:	mov	r6, r2
    bf5c:	mov	sl, #0
    bf60:	add	r7, sp, #40	; 0x28
    bf64:	mvnne	r8, #0
    bf68:	cmp	r2, #2
    bf6c:	movge	r8, r0
    bf70:	add	r9, r8, r2
    bf74:	cmp	sl, r9
    bf78:	bge	bfac <rb_inet_ntop+0x1b0>
    bf7c:	cmn	r8, #1
    bf80:	beq	bfac <rb_inet_ntop+0x1b0>
    bf84:	cmp	sl, r8
    bf88:	blt	bfac <rb_inet_ntop+0x1b0>
    bf8c:	cmp	r8, sl
    bf90:	bne	bfe8 <rb_inet_ntop+0x1ec>
    bf94:	cmp	r8, #0
    bf98:	moveq	r0, #48	; 0x30
    bf9c:	strbeq	r0, [r7], #1
    bfa0:	mov	r0, #58	; 0x3a
    bfa4:	strb	r0, [r7], #1
    bfa8:	b	bfe8 <rb_inet_ntop+0x1ec>
    bfac:	cmp	sl, #0
    bfb0:	beq	bfc8 <rb_inet_ntop+0x1cc>
    bfb4:	cmp	r8, #0
    bfb8:	mov	r0, #58	; 0x3a
    bfbc:	strb	r0, [r7], #1
    bfc0:	cmpeq	sl, #6
    bfc4:	beq	bff8 <rb_inet_ntop+0x1fc>
    bfc8:	ldr	r2, [ip, sl, lsl #2]
    bfcc:	ldr	r1, [pc, #268]	; c0e0 <rb_inet_ntop+0x2e4>
    bfd0:	mov	r0, r7
    bfd4:	mov	r4, ip
    bfd8:	add	r1, pc, r1
    bfdc:	bl	5600 <sprintf@plt>
    bfe0:	mov	ip, r4
    bfe4:	add	r7, r7, r0
    bfe8:	add	sl, sl, #1
    bfec:	cmp	sl, #8
    bff0:	bcc	bf74 <rb_inet_ntop+0x178>
    bff4:	b	c050 <rb_inet_ntop+0x254>
    bff8:	cmp	r6, #5
    bffc:	beq	c010 <rb_inet_ntop+0x214>
    c000:	cmp	r6, #6
    c004:	mov	r0, r6
    c008:	bne	bfc8 <rb_inet_ntop+0x1cc>
    c00c:	b	c020 <rb_inet_ntop+0x224>
    c010:	ldr	r0, [sp, #28]
    c014:	movw	r1, #65535	; 0xffff
    c018:	cmp	r0, r1
    c01c:	bne	bfc8 <rb_inet_ntop+0x1cc>
    c020:	add	r0, sp, #40	; 0x28
    c024:	mov	r1, r7
    c028:	add	r0, r0, #46	; 0x2e
    c02c:	sub	r2, r0, r7
    c030:	ldr	r0, [sp]
    c034:	add	r0, r0, #12
    c038:	bl	c0e4 <inet_ntop4>
    c03c:	cmp	r0, #0
    c040:	beq	c0d8 <rb_inet_ntop+0x2dc>
    c044:	mov	r0, r7
    c048:	bl	50f0 <strlen@plt>
    c04c:	add	r7, r7, r0
    c050:	cmn	r8, #1
    c054:	beq	c064 <rb_inet_ntop+0x268>
    c058:	cmp	r9, #8
    c05c:	moveq	r0, #58	; 0x3a
    c060:	strbeq	r0, [r7], #1
    c064:	mov	r0, #0
    c068:	add	r1, sp, #40	; 0x28
    c06c:	strb	r0, [r7], #1
    c070:	sub	r2, r7, r1
    c074:	cmp	r2, r5
    c078:	bhi	c090 <rb_inet_ntop+0x294>
    c07c:	ldr	r4, [sp, #4]
    c080:	add	r1, sp, #40	; 0x28
    c084:	mov	r0, r4
    c088:	bl	5114 <memcpy@plt>
    c08c:	mov	r0, r4
    c090:	sub	sp, fp, #28
    c094:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c098:	ldr	r0, [r1, #8]
    c09c:	cmn	r0, #65536	; 0x10000
    c0a0:	bne	c0ac <rb_inet_ntop+0x2b0>
    c0a4:	add	r0, r1, #12
    c0a8:	b	be24 <rb_inet_ntop+0x28>
    c0ac:	ldr	r0, [r1, #8]
    c0b0:	cmp	r0, #0
    c0b4:	bne	be50 <rb_inet_ntop+0x54>
    c0b8:	mov	r0, r1
    c0bc:	mov	r7, r2
    c0c0:	ldr	r2, [r0, #12]!
    c0c4:	rev	r2, r2
    c0c8:	cmp	r2, #2
    c0cc:	mov	r2, r7
    c0d0:	bcs	be24 <rb_inet_ntop+0x28>
    c0d4:	b	be50 <rb_inet_ntop+0x54>
    c0d8:	mov	r0, #0
    c0dc:	b	c090 <rb_inet_ntop+0x294>
    c0e0:	.word	0x0000a0dd

0000c0e4 <inet_ntop4>:
    c0e4:	cmp	r2, #16
    c0e8:	movcc	r0, #0
    c0ec:	bxcc	lr
    c0f0:	push	{r4, r5, fp, lr}
    c0f4:	add	fp, sp, #8
    c0f8:	ldrb	r2, [r0]
    c0fc:	ldr	ip, [pc, #240]	; c1f4 <inet_ntop4+0x110>
    c100:	add	ip, pc, ip
    c104:	ldr	r2, [ip, r2, lsl #2]
    c108:	ldrb	r3, [r2]
    c10c:	cmp	r3, #0
    c110:	beq	c134 <inet_ntop4+0x50>
    c114:	ldr	r4, [pc, #224]	; c1fc <inet_ntop4+0x118>
    c118:	add	r2, r2, #1
    c11c:	add	r4, pc, r4
    c120:	strb	r3, [r4], #1
    c124:	ldrb	r3, [r2], #1
    c128:	cmp	r3, #0
    c12c:	bne	c120 <inet_ntop4+0x3c>
    c130:	b	c13c <inet_ntop4+0x58>
    c134:	ldr	r4, [pc, #188]	; c1f8 <inet_ntop4+0x114>
    c138:	add	r4, pc, r4
    c13c:	mov	lr, #46	; 0x2e
    c140:	mov	r3, r4
    c144:	strb	lr, [r3], #1
    c148:	ldrb	r2, [r0, #1]
    c14c:	ldr	r5, [ip, r2, lsl #2]
    c150:	ldrb	r2, [r5]
    c154:	cmp	r2, #0
    c158:	beq	c174 <inet_ntop4+0x90>
    c15c:	add	r4, r5, #1
    c160:	strb	r2, [r3], #1
    c164:	ldrb	r2, [r4], #1
    c168:	cmp	r2, #0
    c16c:	bne	c160 <inet_ntop4+0x7c>
    c170:	sub	r4, r3, #1
    c174:	strb	lr, [r3]
    c178:	add	r3, r4, #2
    c17c:	ldrb	r2, [r0, #2]
    c180:	ldr	lr, [ip, r2, lsl #2]
    c184:	ldrb	r2, [lr]
    c188:	cmp	r2, #0
    c18c:	beq	c1a4 <inet_ntop4+0xc0>
    c190:	add	r4, lr, #1
    c194:	strb	r2, [r3], #1
    c198:	ldrb	r2, [r4], #1
    c19c:	cmp	r2, #0
    c1a0:	bne	c194 <inet_ntop4+0xb0>
    c1a4:	mov	r2, #46	; 0x2e
    c1a8:	strb	r2, [r3], #1
    c1ac:	ldrb	r0, [r0, #3]
    c1b0:	ldr	r2, [ip, r0, lsl #2]
    c1b4:	ldrb	r0, [r2]
    c1b8:	cmp	r0, #0
    c1bc:	pop	{r4, r5, fp, lr}
    c1c0:	beq	c1d8 <inet_ntop4+0xf4>
    c1c4:	add	r2, r2, #1
    c1c8:	strb	r0, [r3], #1
    c1cc:	ldrb	r0, [r2], #1
    c1d0:	cmp	r0, #0
    c1d4:	bne	c1c8 <inet_ntop4+0xe4>
    c1d8:	mov	r0, #0
    c1dc:	strb	r0, [r3]
    c1e0:	mov	r0, r1
    c1e4:	ldr	r2, [pc, #20]	; c200 <inet_ntop4+0x11c>
    c1e8:	add	r2, pc, r2
    c1ec:	mov	r1, r2
    c1f0:	b	5198 <strcpy@plt>
    c1f4:	.word	0x0001b950
    c1f8:	.word	0x0002e840
    c1fc:	.word	0x0002e85c
    c200:	.word	0x0002e790

0000c204 <inet_pton4>:
    c204:	push	{r4, r5, fp, lr}
    c208:	add	fp, sp, #8
    c20c:	sub	sp, sp, #4
    c210:	mov	r2, r0
    c214:	mov	r0, #0
    c218:	strb	r0, [sp]
    c21c:	ldrb	r5, [r2]
    c220:	cmp	r5, #0
    c224:	beq	c2d8 <inet_pton4+0xd4>
    c228:	add	r2, r2, #1
    c22c:	mov	r3, #0
    c230:	mov	lr, sp
    c234:	mov	ip, #0
    c238:	mov	r4, #0
    c23c:	sub	r0, r5, #48	; 0x30
    c240:	uxtb	r0, r0
    c244:	cmp	r0, #9
    c248:	bhi	c290 <inet_pton4+0x8c>
    c24c:	uxtb	r0, r3
    c250:	lsl	r0, r0, #2
    c254:	uxtab	r0, r0, r3
    c258:	lsl	r0, r0, #1
    c25c:	uxtab	r0, r0, r5
    c260:	sub	r3, r0, #48	; 0x30
    c264:	mov	r0, #0
    c268:	cmp	r3, #255	; 0xff
    c26c:	bhi	c2d8 <inet_pton4+0xd4>
    c270:	cmp	r4, #0
    c274:	strb	r3, [lr]
    c278:	bne	c2b8 <inet_pton4+0xb4>
    c27c:	cmp	ip, #3
    c280:	bgt	c2d8 <inet_pton4+0xd4>
    c284:	add	ip, ip, #1
    c288:	mov	r4, #1
    c28c:	b	c2b8 <inet_pton4+0xb4>
    c290:	cmp	ip, #4
    c294:	mov	r0, #0
    c298:	cmpne	r4, #0
    c29c:	beq	c2d8 <inet_pton4+0xd4>
    c2a0:	uxtb	r3, r5
    c2a4:	cmp	r3, #46	; 0x2e
    c2a8:	bne	c2d8 <inet_pton4+0xd4>
    c2ac:	mov	r3, #0
    c2b0:	mov	r4, #0
    c2b4:	strb	r3, [lr, #1]!
    c2b8:	ldrb	r5, [r2], #1
    c2bc:	cmp	r5, #0
    c2c0:	bne	c23c <inet_pton4+0x38>
    c2c4:	mov	r0, #0
    c2c8:	cmp	ip, #4
    c2cc:	ldrge	r0, [sp]
    c2d0:	strge	r0, [r1]
    c2d4:	movge	r0, #1
    c2d8:	sub	sp, fp, #8
    c2dc:	pop	{r4, r5, fp, pc}

0000c2e0 <inet_pton6>:
    c2e0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c2e4:	add	fp, sp, #28
    c2e8:	sub	sp, sp, #36	; 0x24
    c2ec:	add	r5, sp, #16
    c2f0:	vmov.i32	q8, #0	; 0x00000000
    c2f4:	str	r1, [sp]
    c2f8:	mov	r2, r5
    c2fc:	vst1.64	{d16-d17}, [r2]!
    c300:	ldrb	r4, [r0]
    c304:	str	r2, [sp, #8]
    c308:	cmp	r4, #58	; 0x3a
    c30c:	bne	c328 <inet_pton6+0x48>
    c310:	ldrb	r1, [r0, #1]!
    c314:	mov	r6, #0
    c318:	cmp	r1, #58	; 0x3a
    c31c:	str	r0, [sp, #12]
    c320:	beq	c32c <inet_pton6+0x4c>
    c324:	b	c520 <inet_pton6+0x240>
    c328:	str	r0, [sp, #12]
    c32c:	bl	5138 <__ctype_tolower_loc@plt>
    c330:	mov	r7, r0
    c334:	ldr	r0, [r0]
    c338:	ldr	r6, [r0, r4, lsl #2]
    c33c:	cmp	r6, #0
    c340:	beq	c450 <inet_pton6+0x170>
    c344:	ldr	r0, [sp, #12]
    c348:	ldr	r4, [pc, #520]	; c558 <inet_pton6+0x278>
    c34c:	add	r5, sp, #16
    c350:	mov	r8, #0
    c354:	mov	sl, #0
    c358:	add	r9, r0, #1
    c35c:	add	r4, pc, r4
    c360:	mov	r0, #0
    c364:	str	r0, [sp, #4]
    c368:	b	c3f8 <inet_pton6+0x118>
    c36c:	cmp	r6, #58	; 0x3a
    c370:	bne	c3bc <inet_pton6+0xdc>
    c374:	cmp	sl, #0
    c378:	beq	c3d4 <inet_pton6+0xf4>
    c37c:	ldr	r1, [sp, #8]
    c380:	add	r0, r5, #2
    c384:	mov	r6, #0
    c388:	cmp	r0, r1
    c38c:	bhi	c520 <inet_pton6+0x240>
    c390:	ldrb	r1, [r9]
    c394:	cmp	r1, #0
    c398:	beq	c520 <inet_pton6+0x240>
    c39c:	lsr	r1, r8, #8
    c3a0:	strb	r8, [r5, #1]
    c3a4:	mov	r8, #0
    c3a8:	mov	sl, #0
    c3ac:	str	r9, [sp, #12]
    c3b0:	strb	r1, [r5]
    c3b4:	mov	r5, r0
    c3b8:	b	c438 <inet_pton6+0x158>
    c3bc:	cmp	r6, #46	; 0x2e
    c3c0:	bne	c438 <inet_pton6+0x158>
    c3c4:	ldrb	r0, [r9]
    c3c8:	cmp	r0, #0
    c3cc:	beq	c438 <inet_pton6+0x158>
    c3d0:	b	c52c <inet_pton6+0x24c>
    c3d4:	ldr	r0, [sp, #4]
    c3d8:	mov	sl, #0
    c3dc:	str	r9, [sp, #12]
    c3e0:	cmp	r0, #0
    c3e4:	moveq	r0, r5
    c3e8:	str	r0, [sp, #4]
    c3ec:	mov	r0, #1
    c3f0:	movweq	r0, #2
    c3f4:	b	c430 <inet_pton6+0x150>
    c3f8:	mov	r0, r4
    c3fc:	mov	r1, r6
    c400:	mov	r2, #17
    c404:	bl	55c4 <memchr@plt>
    c408:	cmp	r0, #0
    c40c:	beq	c36c <inet_pton6+0x8c>
    c410:	sub	r0, r0, r4
    c414:	orr	r8, r0, r8, lsl #4
    c418:	mov	r0, #0
    c41c:	cmp	r0, r8, lsr #16
    c420:	mov	r0, #1
    c424:	moveq	sl, r0
    c428:	mov	r0, #2
    c42c:	movwne	r0, #1
    c430:	cmp	r0, #2
    c434:	bne	c464 <inet_pton6+0x184>
    c438:	ldrb	r0, [r9], #1
    c43c:	ldr	r1, [r7]
    c440:	ldr	r6, [r1, r0, lsl #2]
    c444:	cmp	r6, #0
    c448:	bne	c3f8 <inet_pton6+0x118>
    c44c:	b	c470 <inet_pton6+0x190>
    c450:	mov	r0, #0
    c454:	mov	sl, #0
    c458:	mov	r8, #0
    c45c:	str	r0, [sp, #4]
    c460:	b	c470 <inet_pton6+0x190>
    c464:	mov	r6, #0
    c468:	cmp	r0, #3
    c46c:	bne	c520 <inet_pton6+0x240>
    c470:	cmp	sl, #0
    c474:	beq	c49c <inet_pton6+0x1bc>
    c478:	ldr	r0, [sp, #8]
    c47c:	add	r4, r5, #2
    c480:	mov	r6, #0
    c484:	cmp	r4, r0
    c488:	bhi	c520 <inet_pton6+0x240>
    c48c:	lsr	r0, r8, #8
    c490:	strb	r8, [r5, #1]
    c494:	strb	r0, [r5]
    c498:	b	c4a0 <inet_pton6+0x1c0>
    c49c:	mov	r4, r5
    c4a0:	ldr	r0, [sp, #4]
    c4a4:	cmp	r0, #0
    c4a8:	beq	c4f4 <inet_pton6+0x214>
    c4ac:	ldr	r0, [sp, #8]
    c4b0:	cmp	r4, r0
    c4b4:	beq	c51c <inet_pton6+0x23c>
    c4b8:	ldr	r0, [sp, #4]
    c4bc:	sub	r0, r4, r0
    c4c0:	cmp	r0, #1
    c4c4:	blt	c504 <inet_pton6+0x224>
    c4c8:	ldr	r2, [sp, #4]
    c4cc:	add	r1, sp, #16
    c4d0:	mov	r3, #0
    c4d4:	add	r1, r1, #15
    c4d8:	sub	r2, r2, #1
    c4dc:	ldrb	r7, [r2, r0]
    c4e0:	strb	r7, [r1], #-1
    c4e4:	strb	r3, [r2, r0]
    c4e8:	subs	r0, r0, #1
    c4ec:	bne	c4dc <inet_pton6+0x1fc>
    c4f0:	b	c504 <inet_pton6+0x224>
    c4f4:	ldr	r0, [sp, #8]
    c4f8:	mov	r6, #0
    c4fc:	cmp	r4, r0
    c500:	bne	c520 <inet_pton6+0x240>
    c504:	add	r0, sp, #16
    c508:	mov	r6, #1
    c50c:	vld1.64	{d16-d17}, [r0]
    c510:	ldr	r0, [sp]
    c514:	vst1.8	{d16-d17}, [r0]
    c518:	b	c520 <inet_pton6+0x240>
    c51c:	mov	r6, #0
    c520:	mov	r0, r6
    c524:	sub	sp, fp, #28
    c528:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c52c:	ldr	r0, [sp, #8]
    c530:	add	r4, r5, #4
    c534:	mov	r6, #0
    c538:	cmp	r4, r0
    c53c:	bhi	c520 <inet_pton6+0x240>
    c540:	ldr	r0, [sp, #12]
    c544:	mov	r1, r5
    c548:	bl	c204 <inet_pton4>
    c54c:	cmp	r0, #0
    c550:	bgt	c4a0 <inet_pton6+0x1c0>
    c554:	b	c520 <inet_pton6+0x240>
    c558:	.word	0x00009d61

0000c55c <rb_get_iotype>:
    c55c:	ldr	r0, [pc, #4]	; c568 <rb_get_iotype+0xc>
    c560:	add	r0, pc, r0
    c564:	bx	lr
    c568:	.word	0x0002e3d4

0000c56c <rb_io_sched_event>:
    c56c:	push	{r4, r5, fp, lr}
    c570:	add	fp, sp, #8
    c574:	cmp	r0, #0
    c578:	beq	c5a0 <rb_io_sched_event+0x34>
    c57c:	mov	r5, r0
    c580:	ldr	r0, [pc, #68]	; c5cc <rb_io_sched_event+0x60>
    c584:	ldr	r0, [pc, r0]
    c588:	cmp	r0, #0
    c58c:	movne	r4, r1
    c590:	ldrne	r1, [pc, #56]	; c5d0 <rb_io_sched_event+0x64>
    c594:	ldrne	r1, [pc, r1]
    c598:	cmpne	r1, #0
    c59c:	bne	c5a8 <rb_io_sched_event+0x3c>
    c5a0:	mov	r0, #0
    c5a4:	pop	{r4, r5, fp, pc}
    c5a8:	blx	r0
    c5ac:	cmp	r0, #0
    c5b0:	beq	c5a0 <rb_io_sched_event+0x34>
    c5b4:	ldr	r2, [pc, #24]	; c5d4 <rb_io_sched_event+0x68>
    c5b8:	mov	r0, r5
    c5bc:	mov	r1, r4
    c5c0:	ldr	r2, [pc, r2]
    c5c4:	pop	{r4, r5, fp, lr}
    c5c8:	bx	r2
    c5cc:	.word	0x0002e3cc
    c5d0:	.word	0x0002e3c0
    c5d4:	.word	0x0002e394

0000c5d8 <rb_io_unsched_event>:
    c5d8:	push	{r4, sl, fp, lr}
    c5dc:	add	fp, sp, #8
    c5e0:	cmp	r0, #0
    c5e4:	beq	c608 <rb_io_unsched_event+0x30>
    c5e8:	mov	r4, r0
    c5ec:	ldr	r0, [pc, #56]	; c62c <rb_io_unsched_event+0x54>
    c5f0:	ldr	r0, [pc, r0]
    c5f4:	cmp	r0, #0
    c5f8:	ldrne	r1, [pc, #48]	; c630 <rb_io_unsched_event+0x58>
    c5fc:	ldrne	r1, [pc, r1]
    c600:	cmpne	r1, #0
    c604:	bne	c60c <rb_io_unsched_event+0x34>
    c608:	pop	{r4, sl, fp, pc}
    c60c:	blx	r0
    c610:	cmp	r0, #0
    c614:	popeq	{r4, sl, fp, pc}
    c618:	ldr	r1, [pc, #20]	; c634 <rb_io_unsched_event+0x5c>
    c61c:	mov	r0, r4
    c620:	ldr	r1, [pc, r1]
    c624:	pop	{r4, sl, fp, lr}
    c628:	bx	r1
    c62c:	.word	0x0002e360
    c630:	.word	0x0002e35c
    c634:	.word	0x0002e338

0000c638 <rb_io_supports_event>:
    c638:	ldr	r0, [pc, #16]	; c650 <rb_io_supports_event+0x18>
    c63c:	ldr	r0, [pc, r0]
    c640:	cmp	r0, #0
    c644:	moveq	r0, #0
    c648:	bxeq	lr
    c64c:	bx	r0
    c650:	.word	0x0002e314

0000c654 <rb_io_init_event>:
    c654:	push	{fp, lr}
    c658:	mov	fp, sp
    c65c:	ldr	r0, [pc, #12]	; c670 <rb_io_init_event+0x1c>
    c660:	ldr	r0, [pc, r0]
    c664:	blx	r0
    c668:	pop	{fp, lr}
    c66c:	b	eb70 <rb_event_io_register_all>
    c670:	.word	0x0002e2fc

0000c674 <rb_init_netio>:
    c674:	push	{r4, sl, fp, lr}
    c678:	add	fp, sp, #8
    c67c:	ldr	r0, [pc, #436]	; c838 <rb_init_netio+0x1c4>
    c680:	add	r0, pc, r0
    c684:	bl	4ec8 <getenv@plt>
    c688:	mov	r4, r0
    c68c:	mov	r0, #1
    c690:	mov	r1, #49152	; 0xc000
    c694:	bl	4f10 <calloc@plt>
    c698:	cmp	r0, #0
    c69c:	beq	c824 <rb_init_netio+0x1b0>
    c6a0:	ldr	r1, [pc, #404]	; c83c <rb_init_netio+0x1c8>
    c6a4:	ldr	r1, [pc, r1]
    c6a8:	str	r0, [r1]
    c6ac:	bl	d4ac <rb_init_ssl>
    c6b0:	cmp	r4, #0
    c6b4:	beq	c7c0 <rb_init_netio+0x14c>
    c6b8:	ldr	r0, [pc, #384]	; c840 <rb_init_netio+0x1cc>
    c6bc:	mov	r1, r4
    c6c0:	add	r0, pc, r0
    c6c4:	bl	55dc <strcmp@plt>
    c6c8:	cmp	r0, #0
    c6cc:	beq	c768 <rb_init_netio+0xf4>
    c6d0:	ldr	r0, [pc, #364]	; c844 <rb_init_netio+0x1d0>
    c6d4:	mov	r1, r4
    c6d8:	add	r0, pc, r0
    c6dc:	bl	55dc <strcmp@plt>
    c6e0:	cmp	r0, #0
    c6e4:	beq	c770 <rb_init_netio+0xfc>
    c6e8:	ldr	r0, [pc, #344]	; c848 <rb_init_netio+0x1d4>
    c6ec:	mov	r1, r4
    c6f0:	add	r0, pc, r0
    c6f4:	bl	55dc <strcmp@plt>
    c6f8:	cmp	r0, #0
    c6fc:	beq	c778 <rb_init_netio+0x104>
    c700:	ldr	r0, [pc, #324]	; c84c <rb_init_netio+0x1d8>
    c704:	mov	r1, r4
    c708:	add	r0, pc, r0
    c70c:	bl	55dc <strcmp@plt>
    c710:	cmp	r0, #0
    c714:	beq	c780 <rb_init_netio+0x10c>
    c718:	ldr	r0, [pc, #304]	; c850 <rb_init_netio+0x1dc>
    c71c:	mov	r1, r4
    c720:	add	r0, pc, r0
    c724:	bl	55dc <strcmp@plt>
    c728:	cmp	r0, #0
    c72c:	beq	c788 <rb_init_netio+0x114>
    c730:	ldr	r0, [pc, #284]	; c854 <rb_init_netio+0x1e0>
    c734:	mov	r1, r4
    c738:	add	r0, pc, r0
    c73c:	bl	55dc <strcmp@plt>
    c740:	cmp	r0, #0
    c744:	beq	c790 <rb_init_netio+0x11c>
    c748:	ldr	r0, [pc, #264]	; c858 <rb_init_netio+0x1e4>
    c74c:	mov	r1, r4
    c750:	add	r0, pc, r0
    c754:	bl	55dc <strcmp@plt>
    c758:	cmp	r0, #0
    c75c:	bne	c79c <rb_init_netio+0x128>
    c760:	bl	ce4c <try_select>
    c764:	b	c794 <rb_init_netio+0x120>
    c768:	bl	c864 <try_epoll>
    c76c:	b	c794 <rb_init_netio+0x120>
    c770:	bl	c96c <try_kqueue>
    c774:	b	c794 <rb_init_netio+0x120>
    c778:	bl	ca74 <try_ports>
    c77c:	b	c794 <rb_init_netio+0x120>
    c780:	bl	cb7c <try_poll>
    c784:	b	c794 <rb_init_netio+0x120>
    c788:	bl	cc60 <try_devpoll>
    c78c:	b	c794 <rb_init_netio+0x120>
    c790:	bl	cd44 <try_sigio>
    c794:	cmp	r0, #0
    c798:	beq	c820 <rb_init_netio+0x1ac>
    c79c:	ldr	r0, [pc, #184]	; c85c <rb_init_netio+0x1e8>
    c7a0:	mov	r1, r4
    c7a4:	add	r0, pc, r0
    c7a8:	bl	55dc <strcmp@plt>
    c7ac:	cmp	r0, #0
    c7b0:	bne	c7c0 <rb_init_netio+0x14c>
    c7b4:	bl	cf30 <try_win32>
    c7b8:	cmp	r0, #0
    c7bc:	beq	c820 <rb_init_netio+0x1ac>
    c7c0:	bl	c96c <try_kqueue>
    c7c4:	cmp	r0, #0
    c7c8:	beq	c820 <rb_init_netio+0x1ac>
    c7cc:	bl	c864 <try_epoll>
    c7d0:	cmp	r0, #0
    c7d4:	beq	c820 <rb_init_netio+0x1ac>
    c7d8:	bl	ca74 <try_ports>
    c7dc:	cmp	r0, #0
    c7e0:	beq	c820 <rb_init_netio+0x1ac>
    c7e4:	bl	cc60 <try_devpoll>
    c7e8:	cmp	r0, #0
    c7ec:	beq	c820 <rb_init_netio+0x1ac>
    c7f0:	bl	cd44 <try_sigio>
    c7f4:	cmp	r0, #0
    c7f8:	beq	c820 <rb_init_netio+0x1ac>
    c7fc:	bl	cb7c <try_poll>
    c800:	cmp	r0, #0
    c804:	beq	c820 <rb_init_netio+0x1ac>
    c808:	bl	cf30 <try_win32>
    c80c:	cmp	r0, #0
    c810:	popeq	{r4, sl, fp, pc}
    c814:	bl	ce4c <try_select>
    c818:	cmp	r0, #0
    c81c:	bne	c828 <rb_init_netio+0x1b4>
    c820:	pop	{r4, sl, fp, pc}
    c824:	bl	5288 <rb_outofmemory@plt>
    c828:	ldr	r0, [pc, #48]	; c860 <rb_init_netio+0x1ec>
    c82c:	add	r0, pc, r0
    c830:	bl	5228 <rb_lib_log@plt>
    c834:	bl	4d00 <abort@plt>
    c838:	.word	0x000095da
    c83c:	.word	0x0001bcfc
    c840:	.word	0x000095ab
    c844:	.word	0x00009599
    c848:	.word	0x00009588
    c84c:	.word	0x00009564
    c850:	.word	0x0000955e
    c854:	.word	0x0000954e
    c858:	.word	0x0000953c
    c85c:	.word	0x000094ef
    c860:	.word	0x0000946d

0000c864 <try_epoll>:
    c864:	push	{fp, lr}
    c868:	mov	fp, sp
    c86c:	bl	10ca8 <rb_init_netio_epoll>
    c870:	mov	r1, r0
    c874:	mvn	r0, #0
    c878:	cmp	r1, #0
    c87c:	popne	{fp, pc}
    c880:	ldr	r0, [pc, #164]	; c92c <try_epoll+0xc8>
    c884:	mov	r2, #25
    c888:	ldr	r0, [pc, r0]
    c88c:	ldr	r1, [pc, #156]	; c930 <try_epoll+0xcc>
    c890:	add	r1, pc, r1
    c894:	str	r0, [r1]
    c898:	ldr	r0, [pc, #148]	; c934 <try_epoll+0xd0>
    c89c:	ldr	r0, [pc, r0]
    c8a0:	ldr	r1, [pc, #144]	; c938 <try_epoll+0xd4>
    c8a4:	add	r1, pc, r1
    c8a8:	str	r0, [r1]
    c8ac:	ldr	r0, [pc, #136]	; c93c <try_epoll+0xd8>
    c8b0:	ldr	r0, [pc, r0]
    c8b4:	ldr	r1, [pc, #132]	; c940 <try_epoll+0xdc>
    c8b8:	add	r1, pc, r1
    c8bc:	str	r0, [r1]
    c8c0:	ldr	r0, [pc, #124]	; c944 <try_epoll+0xe0>
    c8c4:	ldr	r0, [pc, r0]
    c8c8:	ldr	r1, [pc, #120]	; c948 <try_epoll+0xe4>
    c8cc:	add	r1, pc, r1
    c8d0:	str	r0, [r1]
    c8d4:	ldr	r0, [pc, #112]	; c94c <try_epoll+0xe8>
    c8d8:	ldr	r0, [pc, r0]
    c8dc:	ldr	r1, [pc, #108]	; c950 <try_epoll+0xec>
    c8e0:	add	r1, pc, r1
    c8e4:	str	r0, [r1]
    c8e8:	ldr	r0, [pc, #100]	; c954 <try_epoll+0xf0>
    c8ec:	ldr	r0, [pc, r0]
    c8f0:	ldr	r1, [pc, #96]	; c958 <try_epoll+0xf4>
    c8f4:	add	r1, pc, r1
    c8f8:	str	r0, [r1]
    c8fc:	ldr	r0, [pc, #88]	; c95c <try_epoll+0xf8>
    c900:	ldr	r0, [pc, r0]
    c904:	ldr	r1, [pc, #84]	; c960 <try_epoll+0xfc>
    c908:	add	r1, pc, r1
    c90c:	str	r0, [r1]
    c910:	ldr	r0, [pc, #76]	; c964 <try_epoll+0x100>
    c914:	ldr	r1, [pc, #76]	; c968 <try_epoll+0x104>
    c918:	add	r0, pc, r0
    c91c:	add	r1, pc, r1
    c920:	bl	4fc4 <rb_strlcpy@plt>
    c924:	mov	r0, #0
    c928:	pop	{fp, pc}
    c92c:	.word	0x0001bb20
    c930:	.word	0x0002e0d4
    c934:	.word	0x0001baac
    c938:	.word	0x0002e0bc
    c93c:	.word	0x0001bb34
    c940:	.word	0x0002e0b0
    c944:	.word	0x0001baa0
    c948:	.word	0x0002e088
    c94c:	.word	0x0001bacc
    c950:	.word	0x0002e078
    c954:	.word	0x0001ba4c
    c958:	.word	0x0002e05c
    c95c:	.word	0x0001baf8
    c960:	.word	0x0002e054
    c964:	.word	0x0002e01c
    c968:	.word	0x0000934f

0000c96c <try_kqueue>:
    c96c:	push	{fp, lr}
    c970:	mov	fp, sp
    c974:	bl	12894 <rb_init_netio_kqueue>
    c978:	mov	r1, r0
    c97c:	mvn	r0, #0
    c980:	cmp	r1, #0
    c984:	popne	{fp, pc}
    c988:	ldr	r0, [pc, #164]	; ca34 <try_kqueue+0xc8>
    c98c:	mov	r2, #25
    c990:	ldr	r0, [pc, r0]
    c994:	ldr	r1, [pc, #156]	; ca38 <try_kqueue+0xcc>
    c998:	add	r1, pc, r1
    c99c:	str	r0, [r1]
    c9a0:	ldr	r0, [pc, #148]	; ca3c <try_kqueue+0xd0>
    c9a4:	ldr	r0, [pc, r0]
    c9a8:	ldr	r1, [pc, #144]	; ca40 <try_kqueue+0xd4>
    c9ac:	add	r1, pc, r1
    c9b0:	str	r0, [r1]
    c9b4:	ldr	r0, [pc, #136]	; ca44 <try_kqueue+0xd8>
    c9b8:	ldr	r0, [pc, r0]
    c9bc:	ldr	r1, [pc, #132]	; ca48 <try_kqueue+0xdc>
    c9c0:	add	r1, pc, r1
    c9c4:	str	r0, [r1]
    c9c8:	ldr	r0, [pc, #124]	; ca4c <try_kqueue+0xe0>
    c9cc:	ldr	r0, [pc, r0]
    c9d0:	ldr	r1, [pc, #120]	; ca50 <try_kqueue+0xe4>
    c9d4:	add	r1, pc, r1
    c9d8:	str	r0, [r1]
    c9dc:	ldr	r0, [pc, #112]	; ca54 <try_kqueue+0xe8>
    c9e0:	ldr	r0, [pc, r0]
    c9e4:	ldr	r1, [pc, #108]	; ca58 <try_kqueue+0xec>
    c9e8:	add	r1, pc, r1
    c9ec:	str	r0, [r1]
    c9f0:	ldr	r0, [pc, #100]	; ca5c <try_kqueue+0xf0>
    c9f4:	ldr	r0, [pc, r0]
    c9f8:	ldr	r1, [pc, #96]	; ca60 <try_kqueue+0xf4>
    c9fc:	add	r1, pc, r1
    ca00:	str	r0, [r1]
    ca04:	ldr	r0, [pc, #88]	; ca64 <try_kqueue+0xf8>
    ca08:	ldr	r0, [pc, r0]
    ca0c:	ldr	r1, [pc, #84]	; ca68 <try_kqueue+0xfc>
    ca10:	add	r1, pc, r1
    ca14:	str	r0, [r1]
    ca18:	ldr	r0, [pc, #76]	; ca6c <try_kqueue+0x100>
    ca1c:	ldr	r1, [pc, #76]	; ca70 <try_kqueue+0x104>
    ca20:	add	r0, pc, r0
    ca24:	add	r1, pc, r1
    ca28:	bl	4fc4 <rb_strlcpy@plt>
    ca2c:	mov	r0, #0
    ca30:	pop	{fp, pc}
    ca34:	.word	0x0001b9c8
    ca38:	.word	0x0002dfcc
    ca3c:	.word	0x0001b9f8
    ca40:	.word	0x0002dfb4
    ca44:	.word	0x0001b9c0
    ca48:	.word	0x0002dfa8
    ca4c:	.word	0x0001b9a4
    ca50:	.word	0x0002df80
    ca54:	.word	0x0001b9d4
    ca58:	.word	0x0002df70
    ca5c:	.word	0x0001b980
    ca60:	.word	0x0002df60
    ca64:	.word	0x0001b9bc
    ca68:	.word	0x0002df40
    ca6c:	.word	0x0002df14
    ca70:	.word	0x0000924d

0000ca74 <try_ports>:
    ca74:	push	{fp, lr}
    ca78:	mov	fp, sp
    ca7c:	bl	11af4 <rb_init_netio_ports>
    ca80:	mov	r1, r0
    ca84:	mvn	r0, #0
    ca88:	cmp	r1, #0
    ca8c:	popne	{fp, pc}
    ca90:	ldr	r0, [pc, #164]	; cb3c <try_ports+0xc8>
    ca94:	mov	r2, #25
    ca98:	ldr	r0, [pc, r0]
    ca9c:	ldr	r1, [pc, #156]	; cb40 <try_ports+0xcc>
    caa0:	add	r1, pc, r1
    caa4:	str	r0, [r1]
    caa8:	ldr	r0, [pc, #148]	; cb44 <try_ports+0xd0>
    caac:	ldr	r0, [pc, r0]
    cab0:	ldr	r1, [pc, #144]	; cb48 <try_ports+0xd4>
    cab4:	add	r1, pc, r1
    cab8:	str	r0, [r1]
    cabc:	ldr	r0, [pc, #136]	; cb4c <try_ports+0xd8>
    cac0:	ldr	r0, [pc, r0]
    cac4:	ldr	r1, [pc, #132]	; cb50 <try_ports+0xdc>
    cac8:	add	r1, pc, r1
    cacc:	str	r0, [r1]
    cad0:	ldr	r0, [pc, #124]	; cb54 <try_ports+0xe0>
    cad4:	ldr	r0, [pc, r0]
    cad8:	ldr	r1, [pc, #120]	; cb58 <try_ports+0xe4>
    cadc:	add	r1, pc, r1
    cae0:	str	r0, [r1]
    cae4:	ldr	r0, [pc, #112]	; cb5c <try_ports+0xe8>
    cae8:	ldr	r0, [pc, r0]
    caec:	ldr	r1, [pc, #108]	; cb60 <try_ports+0xec>
    caf0:	add	r1, pc, r1
    caf4:	str	r0, [r1]
    caf8:	ldr	r0, [pc, #100]	; cb64 <try_ports+0xf0>
    cafc:	ldr	r0, [pc, r0]
    cb00:	ldr	r1, [pc, #96]	; cb68 <try_ports+0xf4>
    cb04:	add	r1, pc, r1
    cb08:	str	r0, [r1]
    cb0c:	ldr	r0, [pc, #88]	; cb6c <try_ports+0xf8>
    cb10:	ldr	r0, [pc, r0]
    cb14:	ldr	r1, [pc, #84]	; cb70 <try_ports+0xfc>
    cb18:	add	r1, pc, r1
    cb1c:	str	r0, [r1]
    cb20:	ldr	r0, [pc, #76]	; cb74 <try_ports+0x100>
    cb24:	ldr	r1, [pc, #76]	; cb78 <try_ports+0x104>
    cb28:	add	r0, pc, r0
    cb2c:	add	r1, pc, r1
    cb30:	bl	4fc4 <rb_strlcpy@plt>
    cb34:	mov	r0, #0
    cb38:	pop	{fp, pc}
    cb3c:	.word	0x0001b8d0
    cb40:	.word	0x0002dec4
    cb44:	.word	0x0001b91c
    cb48:	.word	0x0002deac
    cb4c:	.word	0x0001b930
    cb50:	.word	0x0002dea0
    cb54:	.word	0x0001b860
    cb58:	.word	0x0002de78
    cb5c:	.word	0x0001b904
    cb60:	.word	0x0002de68
    cb64:	.word	0x0001b848
    cb68:	.word	0x0002de58
    cb6c:	.word	0x0001b8b0
    cb70:	.word	0x0002de38
    cb74:	.word	0x0002de0c
    cb78:	.word	0x0000914c

0000cb7c <try_poll>:
    cb7c:	push	{r4, sl, fp, lr}
    cb80:	add	fp, sp, #8
    cb84:	bl	116b4 <rb_init_netio_poll>
    cb88:	mvn	r4, #0
    cb8c:	cmp	r0, #0
    cb90:	bne	cc24 <try_poll+0xa8>
    cb94:	ldr	r0, [pc, #144]	; cc2c <try_poll+0xb0>
    cb98:	mov	r4, #0
    cb9c:	mov	r2, #25
    cba0:	add	r0, pc, r0
    cba4:	str	r4, [r0]
    cba8:	ldr	r0, [pc, #128]	; cc30 <try_poll+0xb4>
    cbac:	add	r0, pc, r0
    cbb0:	str	r4, [r0]
    cbb4:	ldr	r0, [pc, #120]	; cc34 <try_poll+0xb8>
    cbb8:	add	r0, pc, r0
    cbbc:	str	r4, [r0]
    cbc0:	ldr	r0, [pc, #112]	; cc38 <try_poll+0xbc>
    cbc4:	ldr	r1, [pc, #112]	; cc3c <try_poll+0xc0>
    cbc8:	add	r0, pc, r0
    cbcc:	add	r1, pc, r1
    cbd0:	str	r1, [r0]
    cbd4:	ldr	r0, [pc, #100]	; cc40 <try_poll+0xc4>
    cbd8:	ldr	r0, [pc, r0]
    cbdc:	ldr	r1, [pc, #96]	; cc44 <try_poll+0xc8>
    cbe0:	add	r1, pc, r1
    cbe4:	str	r0, [r1]
    cbe8:	ldr	r0, [pc, #88]	; cc48 <try_poll+0xcc>
    cbec:	ldr	r0, [pc, r0]
    cbf0:	ldr	r1, [pc, #84]	; cc4c <try_poll+0xd0>
    cbf4:	add	r1, pc, r1
    cbf8:	str	r0, [r1]
    cbfc:	ldr	r0, [pc, #76]	; cc50 <try_poll+0xd4>
    cc00:	ldr	r0, [pc, r0]
    cc04:	ldr	r1, [pc, #72]	; cc54 <try_poll+0xd8>
    cc08:	add	r1, pc, r1
    cc0c:	str	r0, [r1]
    cc10:	ldr	r0, [pc, #64]	; cc58 <try_poll+0xdc>
    cc14:	ldr	r1, [pc, #64]	; cc5c <try_poll+0xe0>
    cc18:	add	r0, pc, r0
    cc1c:	add	r1, pc, r1
    cc20:	bl	4fc4 <rb_strlcpy@plt>
    cc24:	mov	r0, r4
    cc28:	pop	{r4, sl, fp, pc}
    cc2c:	.word	0x0002ddb4
    cc30:	.word	0x0002ddac
    cc34:	.word	0x0002dda4
    cc38:	.word	0x0002dd88
    cc3c:	.word	0x00000850
    cc40:	.word	0x0001b804
    cc44:	.word	0x0002dd84
    cc48:	.word	0x0001b7e0
    cc4c:	.word	0x0002dd6c
    cc50:	.word	0x0001b760
    cc54:	.word	0x0002dd60
    cc58:	.word	0x0002dd1c
    cc5c:	.word	0x00009050

0000cc60 <try_devpoll>:
    cc60:	push	{r4, sl, fp, lr}
    cc64:	add	fp, sp, #8
    cc68:	bl	10c4c <rb_init_netio_devpoll>
    cc6c:	mvn	r4, #0
    cc70:	cmp	r0, #0
    cc74:	bne	cd08 <try_devpoll+0xa8>
    cc78:	ldr	r0, [pc, #144]	; cd10 <try_devpoll+0xb0>
    cc7c:	mov	r4, #0
    cc80:	mov	r2, #25
    cc84:	add	r0, pc, r0
    cc88:	str	r4, [r0]
    cc8c:	ldr	r0, [pc, #128]	; cd14 <try_devpoll+0xb4>
    cc90:	add	r0, pc, r0
    cc94:	str	r4, [r0]
    cc98:	ldr	r0, [pc, #120]	; cd18 <try_devpoll+0xb8>
    cc9c:	add	r0, pc, r0
    cca0:	str	r4, [r0]
    cca4:	ldr	r0, [pc, #112]	; cd1c <try_devpoll+0xbc>
    cca8:	ldr	r1, [pc, #112]	; cd20 <try_devpoll+0xc0>
    ccac:	add	r0, pc, r0
    ccb0:	add	r1, pc, r1
    ccb4:	str	r1, [r0]
    ccb8:	ldr	r0, [pc, #100]	; cd24 <try_devpoll+0xc4>
    ccbc:	ldr	r0, [pc, r0]
    ccc0:	ldr	r1, [pc, #96]	; cd28 <try_devpoll+0xc8>
    ccc4:	add	r1, pc, r1
    ccc8:	str	r0, [r1]
    cccc:	ldr	r0, [pc, #88]	; cd2c <try_devpoll+0xcc>
    ccd0:	ldr	r0, [pc, r0]
    ccd4:	ldr	r1, [pc, #84]	; cd30 <try_devpoll+0xd0>
    ccd8:	add	r1, pc, r1
    ccdc:	str	r0, [r1]
    cce0:	ldr	r0, [pc, #76]	; cd34 <try_devpoll+0xd4>
    cce4:	ldr	r0, [pc, r0]
    cce8:	ldr	r1, [pc, #72]	; cd38 <try_devpoll+0xd8>
    ccec:	add	r1, pc, r1
    ccf0:	str	r0, [r1]
    ccf4:	ldr	r0, [pc, #64]	; cd3c <try_devpoll+0xdc>
    ccf8:	ldr	r1, [pc, #64]	; cd40 <try_devpoll+0xe0>
    ccfc:	add	r0, pc, r0
    cd00:	add	r1, pc, r1
    cd04:	bl	4fc4 <rb_strlcpy@plt>
    cd08:	mov	r0, r4
    cd0c:	pop	{r4, sl, fp, pc}
    cd10:	.word	0x0002dcd0
    cd14:	.word	0x0002dcc8
    cd18:	.word	0x0002dcc0
    cd1c:	.word	0x0002dca4
    cd20:	.word	0x0000076c
    cd24:	.word	0x0001b714
    cd28:	.word	0x0002dca0
    cd2c:	.word	0x0001b6c0
    cd30:	.word	0x0002dc88
    cd34:	.word	0x0001b6b0
    cd38:	.word	0x0002dc7c
    cd3c:	.word	0x0002dc38
    cd40:	.word	0x00008f7e

0000cd44 <try_sigio>:
    cd44:	push	{fp, lr}
    cd48:	mov	fp, sp
    cd4c:	bl	11b4c <rb_init_netio_sigio>
    cd50:	mov	r1, r0
    cd54:	mvn	r0, #0
    cd58:	cmp	r1, #0
    cd5c:	popne	{fp, pc}
    cd60:	ldr	r0, [pc, #164]	; ce0c <try_sigio+0xc8>
    cd64:	mov	r2, #25
    cd68:	ldr	r0, [pc, r0]
    cd6c:	ldr	r1, [pc, #156]	; ce10 <try_sigio+0xcc>
    cd70:	add	r1, pc, r1
    cd74:	str	r0, [r1]
    cd78:	ldr	r0, [pc, #148]	; ce14 <try_sigio+0xd0>
    cd7c:	ldr	r0, [pc, r0]
    cd80:	ldr	r1, [pc, #144]	; ce18 <try_sigio+0xd4>
    cd84:	add	r1, pc, r1
    cd88:	str	r0, [r1]
    cd8c:	ldr	r0, [pc, #136]	; ce1c <try_sigio+0xd8>
    cd90:	ldr	r0, [pc, r0]
    cd94:	ldr	r1, [pc, #132]	; ce20 <try_sigio+0xdc>
    cd98:	add	r1, pc, r1
    cd9c:	str	r0, [r1]
    cda0:	ldr	r0, [pc, #124]	; ce24 <try_sigio+0xe0>
    cda4:	ldr	r0, [pc, r0]
    cda8:	ldr	r1, [pc, #120]	; ce28 <try_sigio+0xe4>
    cdac:	add	r1, pc, r1
    cdb0:	str	r0, [r1]
    cdb4:	ldr	r0, [pc, #112]	; ce2c <try_sigio+0xe8>
    cdb8:	ldr	r0, [pc, r0]
    cdbc:	ldr	r1, [pc, #108]	; ce30 <try_sigio+0xec>
    cdc0:	add	r1, pc, r1
    cdc4:	str	r0, [r1]
    cdc8:	ldr	r0, [pc, #100]	; ce34 <try_sigio+0xf0>
    cdcc:	ldr	r0, [pc, r0]
    cdd0:	ldr	r1, [pc, #96]	; ce38 <try_sigio+0xf4>
    cdd4:	add	r1, pc, r1
    cdd8:	str	r0, [r1]
    cddc:	ldr	r0, [pc, #88]	; ce3c <try_sigio+0xf8>
    cde0:	ldr	r0, [pc, r0]
    cde4:	ldr	r1, [pc, #84]	; ce40 <try_sigio+0xfc>
    cde8:	add	r1, pc, r1
    cdec:	str	r0, [r1]
    cdf0:	ldr	r0, [pc, #76]	; ce44 <try_sigio+0x100>
    cdf4:	ldr	r1, [pc, #76]	; ce48 <try_sigio+0x104>
    cdf8:	add	r0, pc, r0
    cdfc:	add	r1, pc, r1
    ce00:	bl	4fc4 <rb_strlcpy@plt>
    ce04:	mov	r0, #0
    ce08:	pop	{fp, pc}
    ce0c:	.word	0x0001b5e4
    ce10:	.word	0x0002dbf4
    ce14:	.word	0x0001b630
    ce18:	.word	0x0002dbdc
    ce1c:	.word	0x0001b62c
    ce20:	.word	0x0002dbd0
    ce24:	.word	0x0001b5b0
    ce28:	.word	0x0002dba8
    ce2c:	.word	0x0001b584
    ce30:	.word	0x0002db98
    ce34:	.word	0x0001b5ec
    ce38:	.word	0x0002db7c
    ce3c:	.word	0x0001b5f8
    ce40:	.word	0x0002db74
    ce44:	.word	0x0002db3c
    ce48:	.word	0x00008e8a

0000ce4c <try_select>:
    ce4c:	push	{r4, sl, fp, lr}
    ce50:	add	fp, sp, #8
    ce54:	bl	12430 <rb_init_netio_select>
    ce58:	mvn	r4, #0
    ce5c:	cmp	r0, #0
    ce60:	bne	cef4 <try_select+0xa8>
    ce64:	ldr	r0, [pc, #144]	; cefc <try_select+0xb0>
    ce68:	mov	r4, #0
    ce6c:	mov	r2, #25
    ce70:	add	r0, pc, r0
    ce74:	str	r4, [r0]
    ce78:	ldr	r0, [pc, #128]	; cf00 <try_select+0xb4>
    ce7c:	add	r0, pc, r0
    ce80:	str	r4, [r0]
    ce84:	ldr	r0, [pc, #120]	; cf04 <try_select+0xb8>
    ce88:	add	r0, pc, r0
    ce8c:	str	r4, [r0]
    ce90:	ldr	r0, [pc, #112]	; cf08 <try_select+0xbc>
    ce94:	ldr	r1, [pc, #112]	; cf0c <try_select+0xc0>
    ce98:	add	r0, pc, r0
    ce9c:	add	r1, pc, r1
    cea0:	str	r1, [r0]
    cea4:	ldr	r0, [pc, #100]	; cf10 <try_select+0xc4>
    cea8:	ldr	r0, [pc, r0]
    ceac:	ldr	r1, [pc, #96]	; cf14 <try_select+0xc8>
    ceb0:	add	r1, pc, r1
    ceb4:	str	r0, [r1]
    ceb8:	ldr	r0, [pc, #88]	; cf18 <try_select+0xcc>
    cebc:	ldr	r0, [pc, r0]
    cec0:	ldr	r1, [pc, #84]	; cf1c <try_select+0xd0>
    cec4:	add	r1, pc, r1
    cec8:	str	r0, [r1]
    cecc:	ldr	r0, [pc, #76]	; cf20 <try_select+0xd4>
    ced0:	ldr	r0, [pc, r0]
    ced4:	ldr	r1, [pc, #72]	; cf24 <try_select+0xd8>
    ced8:	add	r1, pc, r1
    cedc:	str	r0, [r1]
    cee0:	ldr	r0, [pc, #64]	; cf28 <try_select+0xdc>
    cee4:	ldr	r1, [pc, #64]	; cf2c <try_select+0xe0>
    cee8:	add	r0, pc, r0
    ceec:	add	r1, pc, r1
    cef0:	bl	4fc4 <rb_strlcpy@plt>
    cef4:	mov	r0, r4
    cef8:	pop	{r4, sl, fp, pc}
    cefc:	.word	0x0002dae4
    cf00:	.word	0x0002dadc
    cf04:	.word	0x0002dad4
    cf08:	.word	0x0002dab8
    cf0c:	.word	0x00000580
    cf10:	.word	0x0001b4f0
    cf14:	.word	0x0002dab4
    cf18:	.word	0x0001b544
    cf1c:	.word	0x0002da9c
    cf20:	.word	0x0001b510
    cf24:	.word	0x0002da90
    cf28:	.word	0x0002da4c
    cf2c:	.word	0x00008da0

0000cf30 <try_win32>:
    cf30:	push	{r4, sl, fp, lr}
    cf34:	add	fp, sp, #8
    cf38:	bl	585c <rb_init_netio_win32>
    cf3c:	mvn	r4, #0
    cf40:	cmp	r0, #0
    cf44:	bne	cfd8 <try_win32+0xa8>
    cf48:	ldr	r0, [pc, #144]	; cfe0 <try_win32+0xb0>
    cf4c:	mov	r4, #0
    cf50:	mov	r2, #25
    cf54:	add	r0, pc, r0
    cf58:	str	r4, [r0]
    cf5c:	ldr	r0, [pc, #128]	; cfe4 <try_win32+0xb4>
    cf60:	add	r0, pc, r0
    cf64:	str	r4, [r0]
    cf68:	ldr	r0, [pc, #120]	; cfe8 <try_win32+0xb8>
    cf6c:	add	r0, pc, r0
    cf70:	str	r4, [r0]
    cf74:	ldr	r0, [pc, #112]	; cfec <try_win32+0xbc>
    cf78:	ldr	r1, [pc, #112]	; cff0 <try_win32+0xc0>
    cf7c:	add	r0, pc, r0
    cf80:	add	r1, pc, r1
    cf84:	str	r1, [r0]
    cf88:	ldr	r0, [pc, #100]	; cff4 <try_win32+0xc4>
    cf8c:	ldr	r0, [pc, r0]
    cf90:	ldr	r1, [pc, #96]	; cff8 <try_win32+0xc8>
    cf94:	add	r1, pc, r1
    cf98:	str	r0, [r1]
    cf9c:	ldr	r0, [pc, #88]	; cffc <try_win32+0xcc>
    cfa0:	ldr	r0, [pc, r0]
    cfa4:	ldr	r1, [pc, #84]	; d000 <try_win32+0xd0>
    cfa8:	add	r1, pc, r1
    cfac:	str	r0, [r1]
    cfb0:	ldr	r0, [pc, #76]	; d004 <try_win32+0xd4>
    cfb4:	ldr	r0, [pc, r0]
    cfb8:	ldr	r1, [pc, #72]	; d008 <try_win32+0xd8>
    cfbc:	add	r1, pc, r1
    cfc0:	str	r0, [r1]
    cfc4:	ldr	r0, [pc, #64]	; d00c <try_win32+0xdc>
    cfc8:	ldr	r1, [pc, #64]	; d010 <try_win32+0xe0>
    cfcc:	add	r0, pc, r0
    cfd0:	add	r1, pc, r1
    cfd4:	bl	4fc4 <rb_strlcpy@plt>
    cfd8:	mov	r0, r4
    cfdc:	pop	{r4, sl, fp, pc}
    cfe0:	.word	0x0002da00
    cfe4:	.word	0x0002d9f8
    cfe8:	.word	0x0002d9f0
    cfec:	.word	0x0002d9d4
    cff0:	.word	0x0000049c
    cff4:	.word	0x0001b3fc
    cff8:	.word	0x0002d9d0
    cffc:	.word	0x0001b3dc
    d000:	.word	0x0002d9b8
    d004:	.word	0x0001b39c
    d008:	.word	0x0002d9ac
    d00c:	.word	0x0002d968
    d010:	.word	0x00008cc3

0000d014 <rb_select>:
    d014:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d018:	add	fp, sp, #28
    d01c:	sub	sp, sp, #4
    d020:	ldr	r1, [pc, #176]	; d0d8 <rb_select+0xc4>
    d024:	ldr	r1, [pc, r1]
    d028:	blx	r1
    d02c:	ldr	r6, [pc, #168]	; d0dc <rb_select+0xc8>
    d030:	mov	r8, r0
    d034:	ldr	r6, [pc, r6]
    d038:	cmp	r6, #0
    d03c:	beq	d0cc <rb_select+0xb8>
    d040:	ldr	r9, [pc, #152]	; d0e0 <rb_select+0xcc>
    d044:	ldr	r7, [pc, #152]	; d0e4 <rb_select+0xd0>
    d048:	mov	sl, #0
    d04c:	add	r9, pc, r9
    d050:	add	r7, pc, r7
    d054:	ldr	r5, [r6]
    d058:	ldr	r4, [r6, #8]
    d05c:	ldr	r0, [pc, #132]	; d0e8 <rb_select+0xd4>
    d060:	ldr	r0, [pc, r0]
    d064:	sub	r0, r0, #1
    d068:	str	r0, [r9]
    d06c:	ldr	r0, [r5, #12]
    d070:	bl	524c <close@plt>
    d074:	ldr	r0, [r6, #8]
    d078:	ldr	r1, [r6, #4]
    d07c:	mov	r2, r7
    d080:	cmp	r0, #0
    d084:	streq	r1, [r7, #4]
    d088:	strne	r1, [r0, #4]
    d08c:	ldrne	r1, [r6, #4]
    d090:	cmp	r1, #0
    d094:	addne	r2, r1, #8
    d098:	mov	r1, r5
    d09c:	str	r0, [r2]
    d0a0:	str	sl, [r6, #4]
    d0a4:	str	sl, [r6, #8]
    d0a8:	ldr	r0, [r7, #8]
    d0ac:	sub	r0, r0, #1
    d0b0:	str	r0, [r7, #8]
    d0b4:	ldr	r0, [pc, #48]	; d0ec <rb_select+0xd8>
    d0b8:	ldr	r0, [pc, r0]
    d0bc:	bl	51e0 <rb_bh_free@plt>
    d0c0:	cmp	r4, #0
    d0c4:	mov	r6, r4
    d0c8:	bne	d054 <rb_select+0x40>
    d0cc:	mov	r0, r8
    d0d0:	sub	sp, fp, #28
    d0d4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d0d8:	.word	0x0002d940
    d0dc:	.word	0x0002d938
    d0e0:	.word	0x0002d8dc
    d0e4:	.word	0x0002d91c
    d0e8:	.word	0x0002d8c8
    d0ec:	.word	0x0002d878

0000d0f0 <rb_recv_fd_buf>:
    d0f0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d0f4:	add	fp, sp, #28
    d0f8:	sub	sp, sp, #132	; 0x84
    d0fc:	ldr	r9, [fp, #8]
    d100:	str	r2, [fp, #-64]	; 0xffffffc0
    d104:	str	r1, [fp, #-68]	; 0xffffffbc
    d108:	mov	r1, #0
    d10c:	sub	r2, fp, #68	; 0x44
    d110:	mov	r4, r3
    d114:	str	r1, [fp, #-60]	; 0xffffffc4
    d118:	str	r1, [fp, #-56]	; 0xffffffc8
    d11c:	str	r2, [fp, #-52]	; 0xffffffcc
    d120:	mov	r2, #1
    d124:	str	r2, [fp, #-48]	; 0xffffffd0
    d128:	str	r1, [fp, #-36]	; 0xffffffdc
    d12c:	mov	r1, #19
    d130:	mov	r2, #12
    d134:	add	r1, r1, r9, lsl #2
    d138:	add	r2, r2, r9, lsl #2
    d13c:	bic	r1, r1, #7
    d140:	sub	r1, sp, r1
    d144:	mov	sp, r1
    d148:	str	r2, [fp, #-40]	; 0xffffffd8
    d14c:	str	r1, [fp, #-44]	; 0xffffffd4
    d150:	cmp	r0, #0
    d154:	sub	r1, fp, #60	; 0x3c
    d158:	mov	r2, #0
    d15c:	ldrne	r0, [r0, #12]
    d160:	mvneq	r0, #0
    d164:	bl	542c <recvmsg@plt>
    d168:	mov	sl, r0
    d16c:	cmp	r0, #1
    d170:	blt	d258 <rb_recv_fd_buf+0x168>
    d174:	ldr	r0, [fp, #-40]	; 0xffffffd8
    d178:	cmp	r0, #0
    d17c:	beq	d250 <rb_recv_fd_buf+0x160>
    d180:	cmp	r0, #12
    d184:	bcc	d250 <rb_recv_fd_buf+0x160>
    d188:	ldr	r0, [fp, #-44]	; 0xffffffd4
    d18c:	cmp	r0, #0
    d190:	beq	d250 <rb_recv_fd_buf+0x160>
    d194:	cmp	r9, #1
    d198:	blt	d258 <rb_recv_fd_buf+0x168>
    d19c:	ldr	r1, [r0]
    d1a0:	sub	r1, r1, #12
    d1a4:	lsr	r6, r1, #2
    d1a8:	cmp	r6, #0
    d1ac:	beq	d258 <rb_recv_fd_buf+0x168>
    d1b0:	add	r5, r0, #12
    d1b4:	mov	r8, #0
    d1b8:	ldr	r7, [r5, r8, lsl #2]
    d1bc:	sub	r1, fp, #160	; 0xa0
    d1c0:	mov	r0, r7
    d1c4:	bl	15208 <__fstat>
    d1c8:	mov	r1, #64	; 0x40
    d1cc:	cmp	r0, #0
    d1d0:	beq	d200 <rb_recv_fd_buf+0x110>
    d1d4:	ldr	r2, [pc, #148]	; d270 <rb_recv_fd_buf+0x180>
    d1d8:	add	r2, pc, r2
    d1dc:	mov	r0, r7
    d1e0:	bl	5384 <rb_open@plt>
    d1e4:	str	r0, [r4, r8, lsl #2]
    d1e8:	add	r8, r8, #1
    d1ec:	cmp	r8, r9
    d1f0:	bge	d258 <rb_recv_fd_buf+0x168>
    d1f4:	cmp	r8, r6
    d1f8:	bcc	d1b8 <rb_recv_fd_buf+0xc8>
    d1fc:	b	d258 <rb_recv_fd_buf+0x168>
    d200:	ldr	r0, [fp, #-144]	; 0xffffff70
    d204:	and	r0, r0, #61440	; 0xf000
    d208:	cmp	r0, #49152	; 0xc000
    d20c:	beq	d230 <rb_recv_fd_buf+0x140>
    d210:	cmp	r0, #32768	; 0x8000
    d214:	beq	d240 <rb_recv_fd_buf+0x150>
    d218:	cmp	r0, #4096	; 0x1000
    d21c:	bne	d1d4 <rb_recv_fd_buf+0xe4>
    d220:	ldr	r2, [pc, #64]	; d268 <rb_recv_fd_buf+0x178>
    d224:	mov	r1, #8
    d228:	add	r2, pc, r2
    d22c:	b	d1dc <rb_recv_fd_buf+0xec>
    d230:	ldr	r2, [pc, #44]	; d264 <rb_recv_fd_buf+0x174>
    d234:	mov	r1, #4
    d238:	add	r2, pc, r2
    d23c:	b	d1dc <rb_recv_fd_buf+0xec>
    d240:	ldr	r2, [pc, #36]	; d26c <rb_recv_fd_buf+0x17c>
    d244:	mov	r1, #2
    d248:	add	r2, pc, r2
    d24c:	b	d1dc <rb_recv_fd_buf+0xec>
    d250:	mov	r0, #0
    d254:	str	r0, [r4]
    d258:	mov	r0, sl
    d25c:	sub	sp, fp, #28
    d260:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d264:	.word	0x00008aaa
    d268:	.word	0x00008ac8
    d26c:	.word	0x00008ab4
    d270:	.word	0x00008afb

0000d274 <rb_send_fd_buf>:
    d274:	push	{r4, r5, r6, sl, fp, lr}
    d278:	add	fp, sp, #16
    d27c:	sub	sp, sp, #48	; 0x30
    d280:	sub	r5, fp, #48	; 0x30
    d284:	vmov.i32	q8, #0	; 0x00000000
    d288:	mov	ip, #0
    d28c:	mov	lr, #1
    d290:	add	r4, r5, #12
    d294:	vst1.32	{d16-d17}, [r4]
    d298:	mov	r4, #48	; 0x30
    d29c:	strb	r4, [fp, #-57]	; 0xffffffc7
    d2a0:	mov	r4, #20
    d2a4:	vst1.64	{d16-d17}, [r5], r4
    d2a8:	sub	r4, fp, #57	; 0x39
    d2ac:	str	ip, [r5]
    d2b0:	sub	r5, fp, #56	; 0x38
    d2b4:	str	ip, [fp, #-48]	; 0xffffffd0
    d2b8:	str	ip, [fp, #-44]	; 0xffffffd4
    d2bc:	str	ip, [fp, #-24]	; 0xffffffe8
    d2c0:	str	ip, [fp, #-32]	; 0xffffffe0
    d2c4:	str	r5, [fp, #-40]	; 0xffffffd8
    d2c8:	ldr	r5, [fp, #8]
    d2cc:	str	lr, [fp, #-36]	; 0xffffffdc
    d2d0:	cmp	r5, #0
    d2d4:	movne	r4, r3
    d2d8:	movweq	r5, #1
    d2dc:	cmp	r2, #1
    d2e0:	str	r4, [fp, #-56]	; 0xffffffc8
    d2e4:	str	r5, [fp, #-52]	; 0xffffffcc
    d2e8:	blt	d374 <rb_send_fd_buf+0x100>
    d2ec:	mov	r3, #19
    d2f0:	mov	r4, #12
    d2f4:	mov	r5, sp
    d2f8:	add	r3, r3, r2, lsl #2
    d2fc:	add	r4, r4, r2, lsl #2
    d300:	bic	r3, r3, #7
    d304:	sub	r3, sp, r3
    d308:	mov	sp, r3
    d30c:	lsl	r6, r2, #2
    d310:	str	r4, [fp, #-28]	; 0xffffffe4
    d314:	str	r3, [fp, #-32]	; 0xffffffe0
    d318:	cmn	r6, #12
    d31c:	movcc	ip, r3
    d320:	add	r3, ip, #12
    d324:	stm	ip, {r4, lr}
    d328:	str	lr, [ip, #8]
    d32c:	ldr	r4, [r1]
    d330:	add	r1, r1, #4
    d334:	cmp	r4, #0
    d338:	ldrne	r4, [r4, #12]
    d33c:	mvneq	r4, #0
    d340:	subs	r2, r2, #1
    d344:	str	r4, [r3], #4
    d348:	bne	d32c <rb_send_fd_buf+0xb8>
    d34c:	ldr	r1, [ip]
    d350:	cmp	r0, #0
    d354:	mov	r2, #16384	; 0x4000
    d358:	str	r1, [fp, #-28]	; 0xffffffe4
    d35c:	sub	r1, fp, #48	; 0x30
    d360:	ldrne	r0, [r0, #12]
    d364:	mvneq	r0, #0
    d368:	bl	5018 <sendmsg@plt>
    d36c:	mov	sp, r5
    d370:	b	d38c <rb_send_fd_buf+0x118>
    d374:	cmp	r0, #0
    d378:	sub	r1, fp, #48	; 0x30
    d37c:	mov	r2, #16384	; 0x4000
    d380:	ldrne	r0, [r0, #12]
    d384:	mvneq	r0, #0
    d388:	bl	5018 <sendmsg@plt>
    d38c:	sub	sp, fp, #16
    d390:	pop	{r4, r5, r6, sl, fp, pc}

0000d394 <rb_ipv4_from_ipv6>:
    d394:	push	{fp, lr}
    d398:	mov	fp, sp
    d39c:	sub	sp, sp, #4
    d3a0:	mov	r2, r0
    d3a4:	ldrh	r3, [r2, #8]!
    d3a8:	cmp	r3, #544	; 0x220
    d3ac:	beq	d404 <rb_ipv4_from_ipv6+0x70>
    d3b0:	ldr	r3, [r2]
    d3b4:	mov	r2, #0
    d3b8:	cmp	r3, #288	; 0x120
    d3bc:	bne	d418 <rb_ipv4_from_ipv6+0x84>
    d3c0:	add	lr, r1, #4
    d3c4:	add	r0, r0, #20
    d3c8:	mov	r3, #0
    d3cc:	mov	ip, sp
    d3d0:	vmov.i16	d16, #255	; 0x00ff
    d3d4:	ldr	r2, [r0, r3]
    d3d8:	str	r2, [sp]
    d3dc:	add	r2, lr, r3
    d3e0:	add	r3, r3, #4
    d3e4:	vld1.32	{d17[0]}, [ip :32]
    d3e8:	cmp	r3, #4
    d3ec:	vmovl.u8	q9, d17
    d3f0:	veor	d17, d18, d16
    d3f4:	vuzp.8	d17, d18
    d3f8:	vst1.32	{d17[0]}, [r2]
    d3fc:	bne	d3d4 <rb_ipv4_from_ipv6+0x40>
    d400:	b	d40c <rb_ipv4_from_ipv6+0x78>
    d404:	ldr	r0, [r2, #2]
    d408:	str	r0, [r1, #4]
    d40c:	mov	r0, #2
    d410:	mov	r2, #1
    d414:	str	r0, [r1]
    d418:	mov	r0, r2
    d41c:	mov	sp, fp
    d420:	pop	{fp, pc}

0000d424 <rb_unsupported_event>:
    d424:	mov	r0, #0
    d428:	bx	lr

0000d42c <rb_ssl_shutdown>:
    d42c:	push	{r4, r5, r6, sl, fp, lr}
    d430:	add	fp, sp, #16
    d434:	cmp	r0, #0
    d438:	beq	d4a8 <rb_ssl_shutdown+0x7c>
    d43c:	mov	r4, r0
    d440:	ldr	r0, [r0, #56]	; 0x38
    d444:	cmp	r0, #0
    d448:	popeq	{r4, r5, r6, sl, fp, pc}
    d44c:	bl	4d3c <ERR_get_error@plt>
    d450:	cmp	r0, #0
    d454:	bne	d44c <rb_ssl_shutdown+0x20>
    d458:	mov	r6, #1
    d45c:	ldr	r0, [r4, #56]	; 0x38
    d460:	bl	53a8 <SSL_shutdown@plt>
    d464:	mov	r5, r0
    d468:	ldr	r0, [r4, #56]	; 0x38
    d46c:	mov	r1, r5
    d470:	bl	55a0 <SSL_get_error@plt>
    d474:	cmn	r5, #1
    d478:	bgt	d498 <rb_ssl_shutdown+0x6c>
    d47c:	orr	r0, r0, #1
    d480:	cmp	r0, #3
    d484:	bne	d498 <rb_ssl_shutdown+0x6c>
    d488:	add	r0, r6, #1
    d48c:	cmp	r6, #4
    d490:	mov	r6, r0
    d494:	bcc	d45c <rb_ssl_shutdown+0x30>
    d498:	ldr	r0, [r4, #56]	; 0x38
    d49c:	bl	5264 <SSL_free@plt>
    d4a0:	mov	r0, #0
    d4a4:	str	r0, [r4, #56]	; 0x38
    d4a8:	pop	{r4, r5, r6, sl, fp, pc}

0000d4ac <rb_init_ssl>:
    d4ac:	push	{fp, lr}
    d4b0:	mov	fp, sp
    d4b4:	ldr	r0, [pc, #20]	; d4d0 <rb_init_ssl+0x24>
    d4b8:	ldr	r1, [pc, #20]	; d4d4 <rb_init_ssl+0x28>
    d4bc:	add	r0, pc, r0
    d4c0:	add	r1, pc, r1
    d4c4:	bl	5228 <rb_lib_log@plt>
    d4c8:	mov	r0, #1
    d4cc:	pop	{fp, pc}
    d4d0:	.word	0x00008c12
    d4d4:	.word	0x00008c2e

0000d4d8 <rb_setup_ssl_server>:
    d4d8:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
    d4dc:	add	fp, sp, #24
    d4e0:	sub	sp, sp, #8
    d4e4:	cmp	r0, #0
    d4e8:	beq	d61c <rb_setup_ssl_server+0x144>
    d4ec:	mov	r4, r3
    d4f0:	mov	r8, r2
    d4f4:	mov	r7, r1
    d4f8:	mov	r6, r0
    d4fc:	bl	4d3c <ERR_get_error@plt>
    d500:	cmp	r0, #0
    d504:	bne	d4fc <rb_setup_ssl_server+0x24>
    d508:	ldr	r5, [pc, #840]	; d858 <rb_setup_ssl_server+0x380>
    d50c:	cmp	r4, #0
    d510:	add	r5, pc, r5
    d514:	movne	r5, r4
    d518:	cmp	r7, #0
    d51c:	moveq	r7, r6
    d520:	bl	4cac <TLS_method@plt>
    d524:	bl	5420 <SSL_CTX_new@plt>
    d528:	cmp	r0, #0
    d52c:	beq	d634 <rb_setup_ssl_server+0x15c>
    d530:	mov	r1, r6
    d534:	mov	r4, r0
    d538:	bl	5144 <SSL_CTX_use_certificate_chain_file@plt>
    d53c:	cmp	r0, #1
    d540:	bne	d67c <rb_setup_ssl_server+0x1a4>
    d544:	mov	r0, r4
    d548:	mov	r1, r7
    d54c:	mov	r2, #1
    d550:	bl	5234 <SSL_CTX_use_PrivateKey_file@plt>
    d554:	cmp	r0, #1
    d558:	bne	d6c4 <rb_setup_ssl_server+0x1ec>
    d55c:	cmp	r8, #0
    d560:	beq	d720 <rb_setup_ssl_server+0x248>
    d564:	ldr	r1, [pc, #796]	; d888 <rb_setup_ssl_server+0x3b0>
    d568:	mov	r0, r8
    d56c:	add	r1, pc, r1
    d570:	bl	4f34 <fopen@plt>
    d574:	mov	r9, r0
    d578:	mov	r0, #0
    d57c:	cmp	r9, #0
    d580:	str	r0, [sp, #4]
    d584:	beq	d738 <rb_setup_ssl_server+0x260>
    d588:	add	r1, sp, #4
    d58c:	mov	r0, r9
    d590:	mov	r2, #0
    d594:	mov	r3, #0
    d598:	mov	r7, #0
    d59c:	bl	52e8 <PEM_read_DHparams@plt>
    d5a0:	cmp	r0, #0
    d5a4:	beq	d5c8 <rb_setup_ssl_server+0xf0>
    d5a8:	ldr	r3, [sp, #4]
    d5ac:	mov	r0, r4
    d5b0:	mov	r1, #3
    d5b4:	mov	r2, #0
    d5b8:	bl	4f94 <SSL_CTX_ctrl@plt>
    d5bc:	ldr	r0, [sp, #4]
    d5c0:	bl	536c <DH_free@plt>
    d5c4:	b	d610 <rb_setup_ssl_server+0x138>
    d5c8:	mov	r6, r7
    d5cc:	bl	4d3c <ERR_get_error@plt>
    d5d0:	mov	r7, r0
    d5d4:	cmp	r0, #0
    d5d8:	bne	d5c8 <rb_setup_ssl_server+0xf0>
    d5dc:	ldr	r7, [pc, #688]	; d894 <rb_setup_ssl_server+0x3bc>
    d5e0:	mov	r0, r6
    d5e4:	mov	r2, #512	; 0x200
    d5e8:	add	r7, pc, r7
    d5ec:	mov	r1, r7
    d5f0:	bl	4ed4 <ERR_error_string_n@plt>
    d5f4:	ldr	r0, [pc, #668]	; d898 <rb_setup_ssl_server+0x3c0>
    d5f8:	ldr	r1, [pc, #668]	; d89c <rb_setup_ssl_server+0x3c4>
    d5fc:	mov	r2, r8
    d600:	mov	r3, r7
    d604:	add	r0, pc, r0
    d608:	add	r1, pc, r1
    d60c:	bl	5228 <rb_lib_log@plt>
    d610:	mov	r0, r9
    d614:	bl	4eb0 <fclose@plt>
    d618:	b	d760 <rb_setup_ssl_server+0x288>
    d61c:	ldr	r0, [pc, #556]	; d850 <rb_setup_ssl_server+0x378>
    d620:	ldr	r1, [pc, #556]	; d854 <rb_setup_ssl_server+0x37c>
    d624:	add	r0, pc, r0
    d628:	add	r1, pc, r1
    d62c:	bl	5228 <rb_lib_log@plt>
    d630:	b	d714 <rb_setup_ssl_server+0x23c>
    d634:	mov	r0, #0
    d638:	mov	r4, r0
    d63c:	bl	4d3c <ERR_get_error@plt>
    d640:	cmp	r0, #0
    d644:	bne	d638 <rb_setup_ssl_server+0x160>
    d648:	ldr	r5, [pc, #524]	; d85c <rb_setup_ssl_server+0x384>
    d64c:	mov	r0, r4
    d650:	mov	r2, #512	; 0x200
    d654:	add	r5, pc, r5
    d658:	mov	r1, r5
    d65c:	bl	4ed4 <ERR_error_string_n@plt>
    d660:	ldr	r0, [pc, #504]	; d860 <rb_setup_ssl_server+0x388>
    d664:	ldr	r1, [pc, #504]	; d864 <rb_setup_ssl_server+0x38c>
    d668:	mov	r2, r5
    d66c:	add	r0, pc, r0
    d670:	add	r1, pc, r1
    d674:	bl	5228 <rb_lib_log@plt>
    d678:	b	d714 <rb_setup_ssl_server+0x23c>
    d67c:	mov	r0, #0
    d680:	mov	r5, r0
    d684:	bl	4d3c <ERR_get_error@plt>
    d688:	cmp	r0, #0
    d68c:	bne	d680 <rb_setup_ssl_server+0x1a8>
    d690:	ldr	r7, [pc, #464]	; d868 <rb_setup_ssl_server+0x390>
    d694:	mov	r0, r5
    d698:	mov	r2, #512	; 0x200
    d69c:	add	r7, pc, r7
    d6a0:	mov	r1, r7
    d6a4:	bl	4ed4 <ERR_error_string_n@plt>
    d6a8:	ldr	r0, [pc, #444]	; d86c <rb_setup_ssl_server+0x394>
    d6ac:	ldr	r1, [pc, #444]	; d870 <rb_setup_ssl_server+0x398>
    d6b0:	mov	r2, r6
    d6b4:	mov	r3, r7
    d6b8:	add	r0, pc, r0
    d6bc:	add	r1, pc, r1
    d6c0:	b	d708 <rb_setup_ssl_server+0x230>
    d6c4:	mov	r0, #0
    d6c8:	mov	r5, r0
    d6cc:	bl	4d3c <ERR_get_error@plt>
    d6d0:	cmp	r0, #0
    d6d4:	bne	d6c8 <rb_setup_ssl_server+0x1f0>
    d6d8:	ldr	r6, [pc, #404]	; d874 <rb_setup_ssl_server+0x39c>
    d6dc:	mov	r0, r5
    d6e0:	mov	r2, #512	; 0x200
    d6e4:	add	r6, pc, r6
    d6e8:	mov	r1, r6
    d6ec:	bl	4ed4 <ERR_error_string_n@plt>
    d6f0:	ldr	r0, [pc, #384]	; d878 <rb_setup_ssl_server+0x3a0>
    d6f4:	ldr	r1, [pc, #384]	; d87c <rb_setup_ssl_server+0x3a4>
    d6f8:	mov	r2, r7
    d6fc:	mov	r3, r6
    d700:	add	r0, pc, r0
    d704:	add	r1, pc, r1
    d708:	bl	5228 <rb_lib_log@plt>
    d70c:	mov	r0, r4
    d710:	bl	4d9c <SSL_CTX_free@plt>
    d714:	mov	r0, #0
    d718:	sub	sp, fp, #24
    d71c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
    d720:	ldr	r0, [pc, #344]	; d880 <rb_setup_ssl_server+0x3a8>
    d724:	ldr	r1, [pc, #344]	; d884 <rb_setup_ssl_server+0x3ac>
    d728:	add	r0, pc, r0
    d72c:	add	r1, pc, r1
    d730:	bl	5228 <rb_lib_log@plt>
    d734:	b	d760 <rb_setup_ssl_server+0x288>
    d738:	bl	55e8 <__errno_location@plt>
    d73c:	ldr	r0, [r0]
    d740:	bl	4cdc <strerror@plt>
    d744:	mov	r3, r0
    d748:	ldr	r0, [pc, #316]	; d88c <rb_setup_ssl_server+0x3b4>
    d74c:	ldr	r1, [pc, #316]	; d890 <rb_setup_ssl_server+0x3b8>
    d750:	mov	r2, r8
    d754:	add	r0, pc, r0
    d758:	add	r1, pc, r1
    d75c:	bl	5228 <rb_lib_log@plt>
    d760:	mov	r0, r4
    d764:	mov	r1, r5
    d768:	bl	4d30 <SSL_CTX_set_cipher_list@plt>
    d76c:	cmp	r0, #1
    d770:	bne	d838 <rb_setup_ssl_server+0x360>
    d774:	mov	r0, r4
    d778:	mov	r1, #44	; 0x2c
    d77c:	mov	r2, #0
    d780:	mov	r3, #0
    d784:	bl	4f94 <SSL_CTX_ctrl@plt>
    d788:	ldr	r2, [pc, #280]	; d8a8 <rb_setup_ssl_server+0x3d0>
    d78c:	mov	r0, r4
    d790:	mov	r1, #5
    d794:	add	r2, pc, r2
    d798:	bl	5618 <SSL_CTX_set_verify@plt>
    d79c:	mov	r0, r4
    d7a0:	mov	r1, #2048	; 0x800
    d7a4:	bl	4e50 <SSL_CTX_clear_options@plt>
    d7a8:	mov	r0, r4
    d7ac:	mov	r1, #67108864	; 0x4000000
    d7b0:	bl	515c <SSL_CTX_set_options@plt>
    d7b4:	mov	r0, r4
    d7b8:	mov	r1, #16384	; 0x4000
    d7bc:	bl	515c <SSL_CTX_set_options@plt>
    d7c0:	mov	r0, r4
    d7c4:	mov	r1, #4194304	; 0x400000
    d7c8:	bl	515c <SSL_CTX_set_options@plt>
    d7cc:	mov	r0, r4
    d7d0:	mov	r1, #0
    d7d4:	bl	515c <SSL_CTX_set_options@plt>
    d7d8:	mov	r0, r4
    d7dc:	mov	r1, #0
    d7e0:	bl	515c <SSL_CTX_set_options@plt>
    d7e4:	ldr	r3, [pc, #192]	; d8ac <rb_setup_ssl_server+0x3d4>
    d7e8:	mov	r0, r4
    d7ec:	mov	r1, #92	; 0x5c
    d7f0:	mov	r2, #0
    d7f4:	add	r3, pc, r3
    d7f8:	bl	4f94 <SSL_CTX_ctrl@plt>
    d7fc:	ldr	r0, [pc, #172]	; d8b0 <rb_setup_ssl_server+0x3d8>
    d800:	ldr	r0, [pc, r0]
    d804:	cmp	r0, #0
    d808:	beq	d810 <rb_setup_ssl_server+0x338>
    d80c:	bl	4d9c <SSL_CTX_free@plt>
    d810:	ldr	r0, [pc, #156]	; d8b4 <rb_setup_ssl_server+0x3dc>
    d814:	add	r0, pc, r0
    d818:	str	r4, [r0]
    d81c:	ldr	r0, [pc, #148]	; d8b8 <rb_setup_ssl_server+0x3e0>
    d820:	ldr	r1, [pc, #148]	; d8bc <rb_setup_ssl_server+0x3e4>
    d824:	add	r0, pc, r0
    d828:	add	r1, pc, r1
    d82c:	bl	5228 <rb_lib_log@plt>
    d830:	mov	r0, #1
    d834:	b	d718 <rb_setup_ssl_server+0x240>
    d838:	ldr	r0, [pc, #96]	; d8a0 <rb_setup_ssl_server+0x3c8>
    d83c:	ldr	r1, [pc, #96]	; d8a4 <rb_setup_ssl_server+0x3cc>
    d840:	add	r0, pc, r0
    d844:	add	r1, pc, r1
    d848:	bl	5228 <rb_lib_log@plt>
    d84c:	b	d70c <rb_setup_ssl_server+0x234>
    d850:	.word	0x00008ad6
    d854:	.word	0x00008af4
    d858:	.word	0x00008e75
    d85c:	.word	0x0002d538
    d860:	.word	0x00008ac4
    d864:	.word	0x00008aac
    d868:	.word	0x0002d4f0
    d86c:	.word	0x00008a8c
    d870:	.word	0x00008a60
    d874:	.word	0x0002d4a8
    d878:	.word	0x00008a76
    d87c:	.word	0x00008a18
    d880:	.word	0x00008a79
    d884:	.word	0x000089f0
    d888:	.word	0x00009178
    d88c:	.word	0x00008a71
    d890:	.word	0x000089c4
    d894:	.word	0x0002d5a4
    d898:	.word	0x00008bd6
    d89c:	.word	0x00008b14
    d8a0:	.word	0x000089bb
    d8a4:	.word	0x000088d8
    d8a8:	.word	0x00000124
    d8ac:	.word	0x0001ac54
    d8b0:	.word	0x0002d188
    d8b4:	.word	0x0002d174
    d8b8:	.word	0x00008a14
    d8bc:	.word	0x000088f4

0000d8c0 <verify_accept_all_cb>:
    d8c0:	mov	r0, #1
    d8c4:	bx	lr

0000d8c8 <rb_init_prng>:
    d8c8:	push	{r4, r5, fp, lr}
    d8cc:	add	fp, sp, #8
    d8d0:	mov	r5, r1
    d8d4:	mov	r4, r0
    d8d8:	bl	4d3c <ERR_get_error@plt>
    d8dc:	cmp	r0, #0
    d8e0:	bne	d8d8 <rb_init_prng+0x10>
    d8e4:	cmp	r5, #0
    d8e8:	bne	d944 <rb_init_prng+0x7c>
    d8ec:	mov	r0, r4
    d8f0:	mvn	r1, #0
    d8f4:	bl	4d6c <RAND_load_file@plt>
    d8f8:	cmn	r0, #1
    d8fc:	bgt	d944 <rb_init_prng+0x7c>
    d900:	mov	r0, #0
    d904:	mov	r4, r0
    d908:	bl	4d3c <ERR_get_error@plt>
    d90c:	cmp	r0, #0
    d910:	bne	d904 <rb_init_prng+0x3c>
    d914:	ldr	r5, [pc, #156]	; d9b8 <rb_init_prng+0xf0>
    d918:	mov	r0, r4
    d91c:	mov	r2, #512	; 0x200
    d920:	add	r5, pc, r5
    d924:	mov	r1, r5
    d928:	bl	4ed4 <ERR_error_string_n@plt>
    d92c:	ldr	r0, [pc, #136]	; d9bc <rb_init_prng+0xf4>
    d930:	ldr	r1, [pc, #136]	; d9c0 <rb_init_prng+0xf8>
    d934:	mov	r2, r5
    d938:	add	r0, pc, r0
    d93c:	add	r1, pc, r1
    d940:	bl	5228 <rb_lib_log@plt>
    d944:	bl	54b0 <RAND_status@plt>
    d948:	cmp	r0, #1
    d94c:	bne	d96c <rb_init_prng+0xa4>
    d950:	ldr	r0, [pc, #120]	; d9d0 <rb_init_prng+0x108>
    d954:	ldr	r1, [pc, #120]	; d9d4 <rb_init_prng+0x10c>
    d958:	add	r0, pc, r0
    d95c:	add	r1, pc, r1
    d960:	bl	5228 <rb_lib_log@plt>
    d964:	mov	r0, #1
    d968:	pop	{r4, r5, fp, pc}
    d96c:	mov	r0, #0
    d970:	mov	r4, r0
    d974:	bl	4d3c <ERR_get_error@plt>
    d978:	cmp	r0, #0
    d97c:	bne	d970 <rb_init_prng+0xa8>
    d980:	ldr	r5, [pc, #60]	; d9c4 <rb_init_prng+0xfc>
    d984:	mov	r0, r4
    d988:	mov	r2, #512	; 0x200
    d98c:	add	r5, pc, r5
    d990:	mov	r1, r5
    d994:	bl	4ed4 <ERR_error_string_n@plt>
    d998:	ldr	r0, [pc, #40]	; d9c8 <rb_init_prng+0x100>
    d99c:	ldr	r1, [pc, #40]	; d9cc <rb_init_prng+0x104>
    d9a0:	mov	r2, r5
    d9a4:	add	r0, pc, r0
    d9a8:	add	r1, pc, r1
    d9ac:	bl	5228 <rb_lib_log@plt>
    d9b0:	mov	r0, #0
    d9b4:	pop	{r4, r5, fp, pc}
    d9b8:	.word	0x0002d26c
    d9bc:	.word	0x00008921
    d9c0:	.word	0x00008934
    d9c4:	.word	0x0002d200
    d9c8:	.word	0x000088d9
    d9cc:	.word	0x000088c8
    d9d0:	.word	0x00008939
    d9d4:	.word	0x00008914

0000d9d8 <rb_get_random>:
    d9d8:	push	{r4, r5, fp, lr}
    d9dc:	add	fp, sp, #8
    d9e0:	mov	r4, r1
    d9e4:	mov	r5, r0
    d9e8:	bl	4d3c <ERR_get_error@plt>
    d9ec:	cmp	r0, #0
    d9f0:	bne	d9e8 <rb_get_random+0x10>
    d9f4:	mov	r0, r5
    d9f8:	mov	r1, r4
    d9fc:	bl	53e4 <RAND_bytes@plt>
    da00:	mov	r1, r0
    da04:	mov	r0, #1
    da08:	cmp	r1, #1
    da0c:	popeq	{r4, r5, fp, pc}
    da10:	mov	r0, #0
    da14:	mov	r4, r0
    da18:	bl	4d3c <ERR_get_error@plt>
    da1c:	cmp	r0, #0
    da20:	bne	da14 <rb_get_random+0x3c>
    da24:	ldr	r5, [pc, #48]	; da5c <rb_get_random+0x84>
    da28:	mov	r0, r4
    da2c:	mov	r2, #512	; 0x200
    da30:	add	r5, pc, r5
    da34:	mov	r1, r5
    da38:	bl	4ed4 <ERR_error_string_n@plt>
    da3c:	ldr	r0, [pc, #28]	; da60 <rb_get_random+0x88>
    da40:	ldr	r1, [pc, #28]	; da64 <rb_get_random+0x8c>
    da44:	mov	r2, r5
    da48:	add	r0, pc, r0
    da4c:	add	r1, pc, r1
    da50:	bl	5228 <rb_lib_log@plt>
    da54:	mov	r0, #0
    da58:	pop	{r4, r5, fp, pc}
    da5c:	.word	0x0002d15c
    da60:	.word	0x0000885e
    da64:	.word	0x0000886d

0000da68 <rb_get_ssl_strerror>:
    da68:	push	{r4, sl, fp, lr}
    da6c:	add	fp, sp, #8
    da70:	ldr	r0, [r0, #64]	; 0x40
    da74:	ldr	r4, [pc, #20]	; da90 <rb_get_ssl_strerror+0x28>
    da78:	mov	r2, #512	; 0x200
    da7c:	add	r4, pc, r4
    da80:	mov	r1, r4
    da84:	bl	4ed4 <ERR_error_string_n@plt>
    da88:	mov	r0, r4
    da8c:	pop	{r4, sl, fp, pc}
    da90:	.word	0x0002d110

0000da94 <rb_get_ssl_certfp>:
    da94:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
    da98:	add	fp, sp, #24
    da9c:	mov	r4, #0
    daa0:	cmp	r0, #0
    daa4:	beq	db14 <rb_get_ssl_certfp+0x80>
    daa8:	mov	r5, r0
    daac:	ldr	r0, [r0, #56]	; 0x38
    dab0:	cmp	r0, #0
    dab4:	beq	db14 <rb_get_ssl_certfp+0x80>
    dab8:	mov	r8, r2
    dabc:	mov	r6, r1
    dac0:	bl	5324 <SSL_get_peer_certificate@plt>
    dac4:	cmp	r0, #0
    dac8:	beq	db14 <rb_get_ssl_certfp+0x80>
    dacc:	mov	r7, r0
    dad0:	ldr	r0, [r5, #56]	; 0x38
    dad4:	bl	5348 <SSL_get_verify_result@plt>
    dad8:	mov	r4, #0
    dadc:	cmp	r0, #27
    dae0:	bhi	db0c <rb_get_ssl_certfp+0x78>
    dae4:	movw	r2, #1
    dae8:	mov	r1, #1
    daec:	movt	r2, #2108	; 0x83c
    daf0:	tst	r2, r1, lsl r0
    daf4:	beq	db0c <rb_get_ssl_certfp+0x78>
    daf8:	mov	r0, r7
    dafc:	mov	r1, r6
    db00:	mov	r2, r8
    db04:	bl	db1c <make_certfp>
    db08:	mov	r4, r0
    db0c:	mov	r0, r7
    db10:	bl	5558 <X509_free@plt>
    db14:	mov	r0, r4
    db18:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}

0000db1c <make_certfp>:
    db1c:	push	{r4, r5, r6, sl, fp, lr}
    db20:	add	fp, sp, #16
    db24:	sub	sp, sp, #8
    db28:	mov	r5, r0
    db2c:	mov	r0, #0
    db30:	mov	r4, r1
    db34:	cmp	r2, #1
    db38:	str	r0, [sp, #4]
    db3c:	ble	db70 <make_certfp+0x54>
    db40:	cmp	r2, #2
    db44:	beq	db90 <make_certfp+0x74>
    db48:	movw	r1, #4097	; 0x1001
    db4c:	cmp	r2, r1
    db50:	beq	dba0 <make_certfp+0x84>
    db54:	movw	r1, #4098	; 0x1002
    db58:	cmp	r2, r1
    db5c:	bne	dc50 <make_certfp+0x134>
    db60:	mov	r0, #64	; 0x40
    db64:	str	r0, [sp, #4]
    db68:	bl	5498 <EVP_sha512@plt>
    db6c:	b	dbac <make_certfp+0x90>
    db70:	cmp	r2, #0
    db74:	beq	dbc8 <make_certfp+0xac>
    db78:	cmp	r2, #1
    db7c:	bne	dc50 <make_certfp+0x134>
    db80:	mov	r0, #32
    db84:	str	r0, [sp, #4]
    db88:	bl	54c8 <EVP_sha256@plt>
    db8c:	b	dbd4 <make_certfp+0xb8>
    db90:	mov	r0, #64	; 0x40
    db94:	str	r0, [sp, #4]
    db98:	bl	5498 <EVP_sha512@plt>
    db9c:	b	dbd4 <make_certfp+0xb8>
    dba0:	mov	r0, #32
    dba4:	str	r0, [sp, #4]
    dba8:	bl	54c8 <EVP_sha256@plt>
    dbac:	mov	r6, r0
    dbb0:	mov	r0, r5
    dbb4:	bl	4e74 <X509_get_X509_PUBKEY@plt>
    dbb8:	mov	r5, r0
    dbbc:	ldr	r0, [pc, #152]	; dc5c <make_certfp+0x140>
    dbc0:	ldr	r0, [pc, r0]
    dbc4:	b	dbe0 <make_certfp+0xc4>
    dbc8:	mov	r0, #20
    dbcc:	str	r0, [sp, #4]
    dbd0:	bl	51f8 <EVP_sha1@plt>
    dbd4:	mov	r6, r0
    dbd8:	ldr	r0, [pc, #120]	; dc58 <make_certfp+0x13c>
    dbdc:	ldr	r0, [pc, r0]
    dbe0:	add	r1, sp, #4
    dbe4:	mov	r2, r5
    dbe8:	mov	r3, r4
    dbec:	str	r1, [sp]
    dbf0:	mov	r1, r6
    dbf4:	bl	530c <ASN1_item_digest@plt>
    dbf8:	cmp	r0, #1
    dbfc:	bne	dc08 <make_certfp+0xec>
    dc00:	ldr	r0, [sp, #4]
    dc04:	b	dc50 <make_certfp+0x134>
    dc08:	mov	r0, #0
    dc0c:	mov	r4, r0
    dc10:	bl	4d3c <ERR_get_error@plt>
    dc14:	cmp	r0, #0
    dc18:	bne	dc0c <make_certfp+0xf0>
    dc1c:	ldr	r5, [pc, #60]	; dc60 <make_certfp+0x144>
    dc20:	mov	r0, r4
    dc24:	mov	r2, #512	; 0x200
    dc28:	add	r5, pc, r5
    dc2c:	mov	r1, r5
    dc30:	bl	4ed4 <ERR_error_string_n@plt>
    dc34:	ldr	r0, [pc, #40]	; dc64 <make_certfp+0x148>
    dc38:	ldr	r1, [pc, #40]	; dc68 <make_certfp+0x14c>
    dc3c:	mov	r2, r5
    dc40:	add	r0, pc, r0
    dc44:	add	r1, pc, r1
    dc48:	bl	5228 <rb_lib_log@plt>
    dc4c:	mov	r0, #0
    dc50:	sub	sp, fp, #16
    dc54:	pop	{r4, r5, r6, sl, fp, pc}
    dc58:	.word	0x0001a80c
    dc5c:	.word	0x0001a834
    dc60:	.word	0x0002cf64
    dc64:	.word	0x00008701
    dc68:	.word	0x00008716

0000dc6c <rb_get_ssl_certfp_file>:
    dc6c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
    dc70:	add	fp, sp, #24
    dc74:	mov	r6, r1
    dc78:	ldr	r1, [pc, #116]	; dcf4 <rb_get_ssl_certfp_file+0x88>
    dc7c:	mov	r8, r2
    dc80:	add	r1, pc, r1
    dc84:	bl	4f34 <fopen@plt>
    dc88:	cmp	r0, #0
    dc8c:	beq	dcdc <rb_get_ssl_certfp_file+0x70>
    dc90:	mov	r1, #0
    dc94:	mov	r2, #0
    dc98:	mov	r3, #0
    dc9c:	mov	r4, r0
    dca0:	mov	r7, #0
    dca4:	bl	5120 <PEM_read_X509@plt>
    dca8:	cmp	r0, #0
    dcac:	beq	dce4 <rb_get_ssl_certfp_file+0x78>
    dcb0:	mov	r1, r6
    dcb4:	mov	r2, r8
    dcb8:	mov	r5, r0
    dcbc:	bl	db1c <make_certfp>
    dcc0:	mov	r6, r0
    dcc4:	mov	r0, r5
    dcc8:	bl	5558 <X509_free@plt>
    dccc:	mov	r0, r4
    dcd0:	bl	4eb0 <fclose@plt>
    dcd4:	mov	r0, r6
    dcd8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
    dcdc:	mvn	r7, #0
    dce0:	b	dcec <rb_get_ssl_certfp_file+0x80>
    dce4:	mov	r0, r4
    dce8:	bl	4eb0 <fclose@plt>
    dcec:	mov	r0, r7
    dcf0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
    dcf4:	.word	0x00008a64

0000dcf8 <rb_get_ssl_info>:
    dcf8:	push	{r4, r5, r6, r7, fp, lr}
    dcfc:	add	fp, sp, #16
    dd00:	sub	sp, sp, #16
    dd04:	movw	r4, #4175	; 0x104f
    dd08:	mov	r5, r1
    dd0c:	mov	r6, r0
    dd10:	movt	r4, #4112	; 0x1010
    dd14:	bl	4ff4 <OpenSSL_version_num@plt>
    dd18:	cmp	r0, r4
    dd1c:	bne	dd38 <rb_get_ssl_info+0x40>
    dd20:	ldr	r0, [pc, #80]	; dd78 <rb_get_ssl_info+0x80>
    dd24:	add	r0, pc, r0
    dd28:	str	r0, [sp]
    dd2c:	ldr	r2, [pc, #72]	; dd7c <rb_get_ssl_info+0x84>
    dd30:	add	r2, pc, r2
    dd34:	b	dd60 <rb_get_ssl_info+0x68>
    dd38:	bl	4ff4 <OpenSSL_version_num@plt>
    dd3c:	mov	r7, r0
    dd40:	mov	r0, #0
    dd44:	bl	5588 <OpenSSL_version@plt>
    dd48:	ldr	r1, [pc, #48]	; dd80 <rb_get_ssl_info+0x88>
    dd4c:	add	r1, pc, r1
    dd50:	stm	sp, {r1, r7}
    dd54:	str	r0, [sp, #8]
    dd58:	ldr	r2, [pc, #36]	; dd84 <rb_get_ssl_info+0x8c>
    dd5c:	add	r2, pc, r2
    dd60:	mov	r0, r6
    dd64:	mov	r1, r5
    dd68:	mov	r3, r4
    dd6c:	bl	54a4 <snprintf@plt>
    dd70:	sub	sp, fp, #16
    dd74:	pop	{r4, r5, r6, r7, fp, pc}
    dd78:	.word	0x000085c7
    dd7c:	.word	0x00008597
    dd80:	.word	0x0000859f
    dd84:	.word	0x000085ab

0000dd88 <rb_ssl_get_cipher>:
    dd88:	push	{r4, r5, r6, sl, fp, lr}
    dd8c:	add	fp, sp, #16
    dd90:	sub	sp, sp, #8
    dd94:	mov	r4, #0
    dd98:	cmp	r0, #0
    dd9c:	beq	dde8 <rb_ssl_get_cipher+0x60>
    dda0:	mov	r5, r0
    dda4:	ldr	r0, [r0, #56]	; 0x38
    dda8:	cmp	r0, #0
    ddac:	beq	dde8 <rb_ssl_get_cipher+0x60>
    ddb0:	bl	55ac <SSL_get_version@plt>
    ddb4:	mov	r6, r0
    ddb8:	ldr	r0, [r5, #56]	; 0x38
    ddbc:	bl	4e5c <SSL_get_current_cipher@plt>
    ddc0:	bl	4fdc <SSL_CIPHER_get_name@plt>
    ddc4:	str	r0, [sp]
    ddc8:	mov	r1, #512	; 0x200
    ddcc:	mov	r3, r6
    ddd0:	ldr	r4, [pc, #28]	; ddf4 <rb_ssl_get_cipher+0x6c>
    ddd4:	ldr	r2, [pc, #28]	; ddf8 <rb_ssl_get_cipher+0x70>
    ddd8:	add	r4, pc, r4
    dddc:	add	r2, pc, r2
    dde0:	mov	r0, r4
    dde4:	bl	54a4 <snprintf@plt>
    dde8:	mov	r0, r4
    ddec:	sub	sp, fp, #16
    ddf0:	pop	{r4, r5, r6, sl, fp, pc}
    ddf4:	.word	0x0002cbb4
    ddf8:	.word	0x0000855e

0000ddfc <rb_ssl_read>:
    ddfc:	push	{fp, lr}
    de00:	mov	fp, sp
    de04:	sub	sp, sp, #8
    de08:	mov	r3, r1
    de0c:	mov	r1, r0
    de10:	str	r2, [sp]
    de14:	mov	r0, #0
    de18:	mov	r2, r3
    de1c:	mov	r3, #0
    de20:	bl	de2c <rb_ssl_read_or_write>
    de24:	mov	sp, fp
    de28:	pop	{fp, pc}

0000de2c <rb_ssl_read_or_write>:
    de2c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
    de30:	add	fp, sp, #24
    de34:	ldr	r5, [fp, #8]
    de38:	mov	r6, r3
    de3c:	mov	r7, r2
    de40:	mov	r8, r1
    de44:	mov	r4, r0
    de48:	bl	4d3c <ERR_get_error@plt>
    de4c:	cmp	r0, #0
    de50:	bne	de48 <rb_ssl_read_or_write+0x1c>
    de54:	ldr	r0, [r8, #56]	; 0x38
    de58:	cmp	r4, #0
    de5c:	beq	de70 <rb_ssl_read_or_write+0x44>
    de60:	mov	r1, r6
    de64:	mov	r2, r5
    de68:	bl	4f1c <SSL_write@plt>
    de6c:	b	de7c <rb_ssl_read_or_write+0x50>
    de70:	mov	r1, r7
    de74:	mov	r2, r5
    de78:	bl	5090 <SSL_read@plt>
    de7c:	mov	r1, r0
    de80:	cmn	r0, #1
    de84:	ble	de90 <rb_ssl_read_or_write+0x64>
    de88:	mov	r0, r1
    de8c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
    de90:	ldr	r0, [r8, #56]	; 0x38
    de94:	bl	55a0 <SSL_get_error@plt>
    de98:	sub	r0, r0, #2
    de9c:	cmp	r0, #4
    dea0:	bhi	def0 <rb_ssl_read_or_write+0xc4>
    dea4:	add	r2, pc, #8
    dea8:	mov	r1, #0
    deac:	ldr	r0, [r2, r0, lsl #2]
    deb0:	add	pc, r2, r0
    deb4:	.word	0x00000014
    deb8:	.word	0x00000028
    debc:	.word	0x0000003c
    dec0:	.word	0x00000060
    dec4:	.word	0xffffffd4
    dec8:	bl	55e8 <__errno_location@plt>
    decc:	mov	r1, #11
    ded0:	str	r1, [r0]
    ded4:	mvn	r1, #2
    ded8:	b	de88 <rb_ssl_read_or_write+0x5c>
    dedc:	bl	55e8 <__errno_location@plt>
    dee0:	mov	r1, #11
    dee4:	str	r1, [r0]
    dee8:	mvn	r1, #3
    deec:	b	de88 <rb_ssl_read_or_write+0x5c>
    def0:	mov	r0, #0
    def4:	mov	r4, r0
    def8:	bl	4d3c <ERR_get_error@plt>
    defc:	cmp	r0, #0
    df00:	bne	def4 <rb_ssl_read_or_write+0xc8>
    df04:	cmp	r4, #0
    df08:	str	r4, [r8, #64]	; 0x40
    df0c:	bne	df34 <rb_ssl_read_or_write+0x108>
    df10:	b	df50 <rb_ssl_read_or_write+0x124>
    df14:	mov	r0, #0
    df18:	mov	r4, r0
    df1c:	bl	4d3c <ERR_get_error@plt>
    df20:	cmp	r0, #0
    df24:	bne	df18 <rb_ssl_read_or_write+0xec>
    df28:	cmp	r4, #0
    df2c:	beq	df48 <rb_ssl_read_or_write+0x11c>
    df30:	str	r4, [r8, #64]	; 0x40
    df34:	bl	55e8 <__errno_location@plt>
    df38:	mov	r1, #5
    df3c:	str	r1, [r0]
    df40:	mvn	r1, #1
    df44:	b	de88 <rb_ssl_read_or_write+0x5c>
    df48:	mov	r0, #0
    df4c:	str	r0, [r8, #64]	; 0x40
    df50:	mvn	r1, #0
    df54:	b	de88 <rb_ssl_read_or_write+0x5c>

0000df58 <rb_ssl_write>:
    df58:	push	{fp, lr}
    df5c:	mov	fp, sp
    df60:	sub	sp, sp, #8
    df64:	mov	r3, r1
    df68:	mov	r1, r0
    df6c:	str	r2, [sp]
    df70:	mov	r0, #1
    df74:	mov	r2, #0
    df78:	bl	de2c <rb_ssl_read_or_write>
    df7c:	mov	sp, fp
    df80:	pop	{fp, pc}

0000df84 <rb_supports_ssl>:
    df84:	mov	r0, #1
    df88:	bx	lr

0000df8c <rb_ssl_handshake_count>:
    df8c:	ldr	r0, [r0, #60]	; 0x3c
    df90:	bx	lr

0000df94 <rb_ssl_clear_handshake_count>:
    df94:	mov	r1, #0
    df98:	str	r1, [r0, #60]	; 0x3c
    df9c:	bx	lr

0000dfa0 <rb_ssl_start_accepted>:
    dfa0:	push	{r4, r5, r6, r7, fp, lr}
    dfa4:	add	fp, sp, #16
    dfa8:	mov	r4, r0
    dfac:	ldrb	r0, [r0, #17]
    dfb0:	mov	r6, r1
    dfb4:	mov	r1, #144	; 0x90
    dfb8:	mov	r5, r3
    dfbc:	mov	r7, r2
    dfc0:	orr	r0, r0, #32
    dfc4:	strb	r0, [r4, #17]
    dfc8:	mov	r0, #1
    dfcc:	bl	4f10 <calloc@plt>
    dfd0:	cmp	r0, #0
    dfd4:	beq	e024 <rb_ssl_start_accepted+0x84>
    dfd8:	mov	r1, #0
    dfdc:	mov	r2, #132	; 0x84
    dfe0:	str	r0, [r4, #52]	; 0x34
    dfe4:	str	r7, [r0, #140]	; 0x8c
    dfe8:	str	r6, [r0, #132]	; 0x84
    dfec:	bl	4f4c <memset@plt>
    dff0:	ldr	r2, [pc, #48]	; e028 <rb_ssl_start_accepted+0x88>
    dff4:	mov	r0, r4
    dff8:	mov	r1, r5
    dffc:	mov	r3, #0
    e000:	add	r2, pc, r2
    e004:	bl	4d24 <rb_settimeout@plt>
    e008:	mov	r0, r4
    e00c:	mov	r1, #0
    e010:	bl	e060 <rb_ssl_init_fd>
    e014:	mov	r0, r4
    e018:	mov	r1, #0
    e01c:	pop	{r4, r5, r6, r7, fp, lr}
    e020:	b	e12c <rb_ssl_accept_common>
    e024:	bl	5288 <rb_outofmemory@plt>
    e028:	.word	0x00000024

0000e02c <rb_ssl_timeout_cb>:
    e02c:	push	{fp, lr}
    e030:	mov	fp, sp
    e034:	sub	sp, sp, #8
    e038:	ldr	r1, [r0, #52]	; 0x34
    e03c:	mov	r2, #0
    e040:	mov	r3, #0
    e044:	ldr	ip, [r1, #132]	; 0x84
    e048:	ldr	r1, [r1, #140]	; 0x8c
    e04c:	str	r1, [sp]
    e050:	mov	r1, #3
    e054:	blx	ip
    e058:	mov	sp, fp
    e05c:	pop	{fp, pc}

0000e060 <rb_ssl_init_fd>:
    e060:	push	{r4, r5, r6, sl, fp, lr}
    e064:	add	fp, sp, #16
    e068:	mov	r5, r1
    e06c:	mov	r4, r0
    e070:	bl	4d3c <ERR_get_error@plt>
    e074:	cmp	r0, #0
    e078:	bne	e070 <rb_ssl_init_fd+0x10>
    e07c:	ldr	r0, [pc, #152]	; e11c <rb_ssl_init_fd+0xbc>
    e080:	ldr	r0, [pc, r0]
    e084:	bl	5048 <SSL_new@plt>
    e088:	cmp	r0, #0
    e08c:	str	r0, [r4, #56]	; 0x38
    e090:	beq	e0ac <rb_ssl_init_fd+0x4c>
    e094:	cmp	r5, #1
    e098:	beq	e0fc <rb_ssl_init_fd+0x9c>
    e09c:	cmp	r5, #0
    e0a0:	bne	e100 <rb_ssl_init_fd+0xa0>
    e0a4:	bl	52d0 <SSL_set_accept_state@plt>
    e0a8:	b	e100 <rb_ssl_init_fd+0xa0>
    e0ac:	mov	r0, #0
    e0b0:	mov	r5, r0
    e0b4:	bl	4d3c <ERR_get_error@plt>
    e0b8:	cmp	r0, #0
    e0bc:	bne	e0b0 <rb_ssl_init_fd+0x50>
    e0c0:	ldr	r6, [pc, #88]	; e120 <rb_ssl_init_fd+0xc0>
    e0c4:	mov	r0, r5
    e0c8:	mov	r2, #512	; 0x200
    e0cc:	add	r6, pc, r6
    e0d0:	mov	r1, r6
    e0d4:	bl	4ed4 <ERR_error_string_n@plt>
    e0d8:	ldr	r0, [pc, #68]	; e124 <rb_ssl_init_fd+0xc4>
    e0dc:	ldr	r1, [pc, #68]	; e128 <rb_ssl_init_fd+0xc8>
    e0e0:	mov	r2, r6
    e0e4:	add	r0, pc, r0
    e0e8:	add	r1, pc, r1
    e0ec:	bl	5228 <rb_lib_log@plt>
    e0f0:	mov	r0, r4
    e0f4:	pop	{r4, r5, r6, sl, fp, lr}
    e0f8:	b	5174 <rb_close@plt>
    e0fc:	bl	545c <SSL_set_connect_state@plt>
    e100:	ldr	r5, [r4, #56]	; 0x38
    e104:	mov	r0, r4
    e108:	bl	4e20 <rb_get_fd@plt>
    e10c:	mov	r1, r0
    e110:	mov	r0, r5
    e114:	pop	{r4, r5, r6, sl, fp, lr}
    e118:	b	4f88 <SSL_set_fd@plt>
    e11c:	.word	0x0002c908
    e120:	.word	0x0002cac0
    e124:	.word	0x00008282
    e128:	.word	0x0000828e

0000e12c <rb_ssl_accept_common>:
    e12c:	push	{r4, r5, r6, sl, fp, lr}
    e130:	add	fp, sp, #16
    e134:	sub	sp, sp, #8
    e138:	mov	r4, r0
    e13c:	bl	4d3c <ERR_get_error@plt>
    e140:	cmp	r0, #0
    e144:	bne	e13c <rb_ssl_accept_common+0x10>
    e148:	ldr	r0, [r4, #56]	; 0x38
    e14c:	bl	50cc <SSL_do_handshake@plt>
    e150:	mov	r6, r0
    e154:	ldr	r0, [r4, #56]	; 0x38
    e158:	mov	r1, r6
    e15c:	bl	55a0 <SSL_get_error@plt>
    e160:	cmp	r6, #1
    e164:	bne	e1e0 <rb_ssl_accept_common+0xb4>
    e168:	ldr	r0, [r4, #60]	; 0x3c
    e16c:	mov	r1, #0
    e170:	mov	r2, #0
    e174:	mov	r3, #0
    e178:	mov	r6, #0
    e17c:	add	r0, r0, #1
    e180:	str	r0, [r4, #60]	; 0x3c
    e184:	mov	r0, r4
    e188:	bl	4d24 <rb_settimeout@plt>
    e18c:	mov	r0, r4
    e190:	mov	r1, #3
    e194:	mov	r2, #0
    e198:	mov	r3, #0
    e19c:	bl	4de4 <rb_setselect@plt>
    e1a0:	ldr	r5, [r4, #52]	; 0x34
    e1a4:	str	r6, [r4, #52]	; 0x34
    e1a8:	mov	r1, #0
    e1ac:	ldr	r0, [r5, #140]	; 0x8c
    e1b0:	ldr	r3, [r5, #128]	; 0x80
    e1b4:	ldr	r6, [r5, #132]	; 0x84
    e1b8:	mov	r2, r5
    e1bc:	str	r0, [sp]
    e1c0:	mov	r0, r4
    e1c4:	blx	r6
    e1c8:	cmp	r5, #0
    e1cc:	beq	e230 <rb_ssl_accept_common+0x104>
    e1d0:	mov	r0, r5
    e1d4:	sub	sp, fp, #16
    e1d8:	pop	{r4, r5, r6, sl, fp, lr}
    e1dc:	b	500c <free@plt>
    e1e0:	mov	r5, r0
    e1e4:	cmn	r6, #1
    e1e8:	cmpeq	r5, #2
    e1ec:	beq	e238 <rb_ssl_accept_common+0x10c>
    e1f0:	cmn	r6, #1
    e1f4:	cmpeq	r5, #3
    e1f8:	beq	e24c <rb_ssl_accept_common+0x120>
    e1fc:	bl	55e8 <__errno_location@plt>
    e200:	mov	r1, #5
    e204:	mov	r2, #0
    e208:	mov	r3, #0
    e20c:	str	r1, [r0]
    e210:	str	r5, [r4, #64]	; 0x40
    e214:	mov	r1, #6
    e218:	ldr	r0, [r4, #52]	; 0x34
    e21c:	ldr	r6, [r0, #132]	; 0x84
    e220:	ldr	r0, [r0, #140]	; 0x8c
    e224:	str	r0, [sp]
    e228:	mov	r0, r4
    e22c:	blx	r6
    e230:	sub	sp, fp, #16
    e234:	pop	{r4, r5, r6, sl, fp, pc}
    e238:	ldr	r2, [pc, #44]	; e26c <rb_ssl_accept_common+0x140>
    e23c:	mov	r0, r4
    e240:	mov	r1, #1
    e244:	add	r2, pc, r2
    e248:	b	e25c <rb_ssl_accept_common+0x130>
    e24c:	ldr	r2, [pc, #28]	; e270 <rb_ssl_accept_common+0x144>
    e250:	mov	r0, r4
    e254:	mov	r1, #2
    e258:	add	r2, pc, r2
    e25c:	mov	r3, #0
    e260:	sub	sp, fp, #16
    e264:	pop	{r4, r5, r6, sl, fp, lr}
    e268:	b	4de4 <rb_setselect@plt>
    e26c:	.word	0xfffffee0
    e270:	.word	0xfffffecc

0000e274 <rb_ssl_accept_setup>:
    e274:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
    e278:	add	fp, sp, #24
    e27c:	mov	r6, r0
    e280:	ldrb	r0, [r1, #17]
    e284:	mov	r4, r1
    e288:	mov	r5, r3
    e28c:	mov	r8, r2
    e290:	orr	r0, r0, #32
    e294:	strb	r0, [r1, #17]
    e298:	mov	r0, #1
    e29c:	mov	r1, #144	; 0x90
    e2a0:	bl	4f10 <calloc@plt>
    e2a4:	cmp	r0, #0
    e2a8:	beq	e328 <rb_ssl_accept_setup+0xb4>
    e2ac:	str	r0, [r4, #52]	; 0x34
    e2b0:	mov	r7, r0
    e2b4:	rsb	r2, r5, #128	; 0x80
    e2b8:	cmp	r5, #127	; 0x7f
    e2bc:	ldr	r0, [r6, #52]	; 0x34
    e2c0:	movwhi	r2, #0
    e2c4:	ldr	r1, [r0, #132]	; 0x84
    e2c8:	str	r1, [r7, #132]	; 0x84
    e2cc:	mov	r1, #0
    e2d0:	ldr	r0, [r0, #140]	; 0x8c
    e2d4:	str	r5, [r7, #128]	; 0x80
    e2d8:	str	r0, [r7, #140]	; 0x8c
    e2dc:	add	r0, r7, r5
    e2e0:	bl	4f4c <memset@plt>
    e2e4:	mov	r0, r7
    e2e8:	mov	r1, r8
    e2ec:	mov	r2, r5
    e2f0:	bl	5114 <memcpy@plt>
    e2f4:	ldr	r2, [pc, #48]	; e32c <rb_ssl_accept_setup+0xb8>
    e2f8:	mov	r0, r4
    e2fc:	mov	r1, #10
    e300:	mov	r3, #0
    e304:	add	r2, pc, r2
    e308:	bl	4d24 <rb_settimeout@plt>
    e30c:	mov	r0, r4
    e310:	mov	r1, #0
    e314:	bl	e060 <rb_ssl_init_fd>
    e318:	mov	r0, r4
    e31c:	mov	r1, #0
    e320:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
    e324:	b	e12c <rb_ssl_accept_common>
    e328:	bl	5288 <rb_outofmemory@plt>
    e32c:	.word	0xfffffd20

0000e330 <rb_ssl_listen>:
    e330:	push	{r4, sl, fp, lr}
    e334:	add	fp, sp, #8
    e338:	mov	r4, r0
    e33c:	bl	54ec <rb_listen@plt>
    e340:	mov	r1, #52	; 0x34
    e344:	strb	r1, [r4, #17]
    e348:	pop	{r4, sl, fp, pc}

0000e34c <rb_connect_tcp_ssl>:
    e34c:	push	{r4, r5, r6, r7, fp, lr}
    e350:	add	fp, sp, #16
    e354:	sub	sp, sp, #8
    e358:	cmp	r0, #0
    e35c:	beq	e3b4 <rb_connect_tcp_ssl+0x68>
    e360:	mov	r5, r1
    e364:	mov	r6, r0
    e368:	mov	r0, #1
    e36c:	mov	r1, #12
    e370:	mov	r7, r3
    e374:	mov	r4, r2
    e378:	bl	4f10 <calloc@plt>
    e37c:	cmp	r0, #0
    e380:	beq	e3bc <rb_connect_tcp_ssl+0x70>
    e384:	ldr	r1, [fp, #12]
    e388:	ldr	r2, [fp, #8]
    e38c:	str	r7, [r0]
    e390:	str	r2, [r0, #4]
    e394:	str	r1, [r0, #8]
    e398:	stm	sp, {r0, r1}
    e39c:	mov	r0, r6
    e3a0:	mov	r1, r5
    e3a4:	mov	r2, r4
    e3a8:	ldr	r3, [pc, #16]	; e3c0 <rb_connect_tcp_ssl+0x74>
    e3ac:	add	r3, pc, r3
    e3b0:	bl	4d60 <rb_connect_tcp@plt>
    e3b4:	sub	sp, fp, #16
    e3b8:	pop	{r4, r5, r6, r7, fp, pc}
    e3bc:	bl	5288 <rb_outofmemory@plt>
    e3c0:	.word	0x00000010

0000e3c4 <rb_ssl_tryconn>:
    e3c4:	push	{r4, r5, fp, lr}
    e3c8:	add	fp, sp, #8
    e3cc:	mov	r4, r2
    e3d0:	mov	r5, r0
    e3d4:	cmp	r1, #0
    e3d8:	beq	e3ec <rb_ssl_tryconn+0x28>
    e3dc:	mov	r0, r5
    e3e0:	mov	r2, r4
    e3e4:	pop	{r4, r5, fp, lr}
    e3e8:	b	e5d4 <rb_ssl_connect_realcb>
    e3ec:	ldrb	r0, [r5, #17]
    e3f0:	mov	r3, r4
    e3f4:	orr	r0, r0, #32
    e3f8:	strb	r0, [r5, #17]
    e3fc:	mov	r0, r5
    e400:	ldr	r1, [r4, #8]
    e404:	ldr	r2, [pc, #32]	; e42c <rb_ssl_tryconn+0x68>
    e408:	add	r2, pc, r2
    e40c:	bl	4d24 <rb_settimeout@plt>
    e410:	mov	r0, r5
    e414:	mov	r1, #1
    e418:	bl	e060 <rb_ssl_init_fd>
    e41c:	mov	r0, r5
    e420:	mov	r1, r4
    e424:	pop	{r4, r5, fp, lr}
    e428:	b	e4e0 <rb_ssl_connect_common>
    e42c:	.word	0x000000c4

0000e430 <rb_ssl_start_connected>:
    e430:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
    e434:	add	fp, sp, #24
    e438:	cmp	r0, #0
    e43c:	popeq	{r4, r5, r6, r7, r8, sl, fp, pc}
    e440:	mov	r5, r1
    e444:	mov	r4, r0
    e448:	mov	r0, #1
    e44c:	mov	r1, #12
    e450:	mov	r8, r3
    e454:	mov	r7, r2
    e458:	bl	4f10 <calloc@plt>
    e45c:	cmp	r0, #0
    e460:	beq	e4cc <rb_ssl_start_connected+0x9c>
    e464:	mov	r6, r0
    e468:	stm	r0, {r5, r7, r8}
    e46c:	mov	r0, #1
    e470:	mov	r1, #268	; 0x10c
    e474:	bl	4f10 <calloc@plt>
    e478:	cmp	r0, #0
    e47c:	beq	e4cc <rb_ssl_start_connected+0x9c>
    e480:	str	r0, [r4, #48]	; 0x30
    e484:	str	r5, [r0, #260]	; 0x104
    e488:	str	r7, [r0, #264]	; 0x108
    e48c:	mov	r1, r8
    e490:	mov	r3, r6
    e494:	ldrb	r0, [r4, #17]
    e498:	orr	r0, r0, #32
    e49c:	strb	r0, [r4, #17]
    e4a0:	mov	r0, r4
    e4a4:	ldr	r2, [pc, #36]	; e4d0 <rb_ssl_start_connected+0xa0>
    e4a8:	add	r2, pc, r2
    e4ac:	bl	4d24 <rb_settimeout@plt>
    e4b0:	mov	r0, r4
    e4b4:	mov	r1, #1
    e4b8:	bl	e060 <rb_ssl_init_fd>
    e4bc:	mov	r0, r4
    e4c0:	mov	r1, r6
    e4c4:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
    e4c8:	b	e4e0 <rb_ssl_connect_common>
    e4cc:	bl	5288 <rb_outofmemory@plt>
    e4d0:	.word	0x00000024

0000e4d4 <rb_ssl_tryconn_timeout_cb>:
    e4d4:	mov	r2, r1
    e4d8:	mov	r1, #3
    e4dc:	b	e5d4 <rb_ssl_connect_realcb>

0000e4e0 <rb_ssl_connect_common>:
    e4e0:	push	{r4, r5, r6, r7, fp, lr}
    e4e4:	add	fp, sp, #16
    e4e8:	mov	r4, r1
    e4ec:	mov	r5, r0
    e4f0:	bl	4d3c <ERR_get_error@plt>
    e4f4:	cmp	r0, #0
    e4f8:	bne	e4f0 <rb_ssl_connect_common+0x10>
    e4fc:	ldr	r0, [r5, #56]	; 0x38
    e500:	bl	50cc <SSL_do_handshake@plt>
    e504:	mov	r7, r0
    e508:	ldr	r0, [r5, #56]	; 0x38
    e50c:	mov	r1, r7
    e510:	bl	55a0 <SSL_get_error@plt>
    e514:	cmp	r7, #1
    e518:	bne	e55c <rb_ssl_connect_common+0x7c>
    e51c:	ldr	r0, [r5, #60]	; 0x3c
    e520:	mov	r1, #0
    e524:	mov	r2, #0
    e528:	mov	r3, #0
    e52c:	add	r0, r0, #1
    e530:	str	r0, [r5, #60]	; 0x3c
    e534:	mov	r0, r5
    e538:	bl	4d24 <rb_settimeout@plt>
    e53c:	mov	r0, r5
    e540:	mov	r1, #3
    e544:	mov	r2, #0
    e548:	mov	r3, #0
    e54c:	bl	4de4 <rb_setselect@plt>
    e550:	mov	r0, r5
    e554:	mov	r1, #0
    e558:	b	e590 <rb_ssl_connect_common+0xb0>
    e55c:	mov	r6, r0
    e560:	cmn	r7, #1
    e564:	cmpeq	r6, #2
    e568:	beq	e59c <rb_ssl_connect_common+0xbc>
    e56c:	cmn	r7, #1
    e570:	cmpeq	r6, #3
    e574:	beq	e5b0 <rb_ssl_connect_common+0xd0>
    e578:	bl	55e8 <__errno_location@plt>
    e57c:	mov	r1, #5
    e580:	str	r1, [r0]
    e584:	mov	r0, r5
    e588:	mov	r1, #6
    e58c:	str	r6, [r5, #64]	; 0x40
    e590:	mov	r2, r4
    e594:	pop	{r4, r5, r6, r7, fp, lr}
    e598:	b	e5d4 <rb_ssl_connect_realcb>
    e59c:	ldr	r2, [pc, #40]	; e5cc <rb_ssl_connect_common+0xec>
    e5a0:	mov	r0, r5
    e5a4:	mov	r1, #1
    e5a8:	add	r2, pc, r2
    e5ac:	b	e5c0 <rb_ssl_connect_common+0xe0>
    e5b0:	ldr	r2, [pc, #24]	; e5d0 <rb_ssl_connect_common+0xf0>
    e5b4:	mov	r0, r5
    e5b8:	mov	r1, #2
    e5bc:	add	r2, pc, r2
    e5c0:	mov	r3, r4
    e5c4:	pop	{r4, r5, r6, r7, fp, lr}
    e5c8:	b	4de4 <rb_setselect@plt>
    e5cc:	.word	0xffffff30
    e5d0:	.word	0xffffff1c

0000e5d4 <rb_ssl_connect_realcb>:
    e5d4:	push	{r4, sl, fp, lr}
    e5d8:	add	fp, sp, #8
    e5dc:	mov	r4, r2
    e5e0:	ldr	r2, [r0, #48]	; 0x30
    e5e4:	ldr	r3, [r4]
    e5e8:	str	r3, [r2, #260]	; 0x104
    e5ec:	ldr	r3, [r4, #4]
    e5f0:	str	r3, [r2, #264]	; 0x108
    e5f4:	bl	b084 <rb_connect_callback>
    e5f8:	cmp	r4, #0
    e5fc:	popeq	{r4, sl, fp, pc}
    e600:	mov	r0, r4
    e604:	pop	{r4, sl, fp, lr}
    e608:	b	500c <free@plt>

0000e60c <rb_event_add>:
    e60c:	push	{r4, r5, r6, sl, fp, lr}
    e610:	add	fp, sp, #16
    e614:	sub	sp, sp, #8
    e618:	mov	r4, r2
    e61c:	mov	r5, r1
    e620:	mov	r6, r0
    e624:	cmp	r3, #0
    e628:	ble	e648 <rb_event_add+0x3c>
    e62c:	mov	r0, r6
    e630:	mov	r1, r5
    e634:	mov	r2, r4
    e638:	str	r3, [sp]
    e63c:	bl	e668 <rb_event_add_common>
    e640:	sub	sp, fp, #16
    e644:	pop	{r4, r5, r6, sl, fp, pc}
    e648:	ldr	r0, [pc, #20]	; e664 <rb_event_add+0x58>
    e64c:	mov	r1, r6
    e650:	mov	r2, r3
    e654:	add	r0, pc, r0
    e658:	bl	5228 <rb_lib_log@plt>
    e65c:	mov	r3, #1
    e660:	b	e62c <rb_event_add+0x20>
    e664:	.word	0x00007ec1

0000e668 <rb_event_add_common>:
    e668:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
    e66c:	add	fp, sp, #24
    e670:	mov	r6, r1
    e674:	mov	r7, r0
    e678:	mov	r0, #1
    e67c:	mov	r1, #48	; 0x30
    e680:	mov	r4, r3
    e684:	mov	r8, r2
    e688:	bl	4f10 <calloc@plt>
    e68c:	cmp	r0, #0
    e690:	beq	e774 <rb_event_add_common+0x10c>
    e694:	mov	r5, r0
    e698:	str	r6, [r0, #12]
    e69c:	mov	r0, #33	; 0x21
    e6a0:	bl	52ac <malloc@plt>
    e6a4:	cmp	r0, #0
    e6a8:	beq	e774 <rb_event_add_common+0x10c>
    e6ac:	ldr	r9, [fp, #8]
    e6b0:	mov	r1, r7
    e6b4:	mov	r2, #33	; 0x21
    e6b8:	mov	r6, r0
    e6bc:	bl	4fc4 <rb_strlcpy@plt>
    e6c0:	str	r8, [r5, #16]
    e6c4:	str	r6, [r5, #20]
    e6c8:	bl	50fc <rb_current_time@plt>
    e6cc:	mov	r1, #0
    e6d0:	add	r0, r0, r4
    e6d4:	str	r1, [r5, #44]	; 0x2c
    e6d8:	str	r9, [r5, #24]
    e6dc:	str	r0, [r5, #28]
    e6e0:	str	r4, [r5, #32]
    e6e4:	ldr	r1, [pc, #140]	; e778 <rb_event_add_common+0x110>
    e6e8:	ldr	r1, [pc, r1]
    e6ec:	cmp	r0, r1
    e6f0:	blt	e6fc <rb_event_add_common+0x94>
    e6f4:	cmn	r1, #1
    e6f8:	bne	e708 <rb_event_add_common+0xa0>
    e6fc:	ldr	r1, [pc, #120]	; e77c <rb_event_add_common+0x114>
    e700:	add	r1, pc, r1
    e704:	str	r0, [r1]
    e708:	ldr	r0, [pc, #112]	; e780 <rb_event_add_common+0x118>
    e70c:	mov	r1, #0
    e710:	ldr	r0, [pc, r0]
    e714:	str	r5, [r5]
    e718:	str	r1, [r5, #4]
    e71c:	cmp	r0, #0
    e720:	str	r0, [r5, #8]
    e724:	beq	e734 <rb_event_add_common+0xcc>
    e728:	add	r0, r0, #4
    e72c:	str	r5, [r0]
    e730:	b	e748 <rb_event_add_common+0xe0>
    e734:	ldr	r0, [pc, #72]	; e784 <rb_event_add_common+0x11c>
    e738:	add	r0, pc, r0
    e73c:	ldr	r1, [r0, #4]!
    e740:	cmp	r1, #0
    e744:	streq	r5, [r0]
    e748:	ldr	r0, [pc, #56]	; e788 <rb_event_add_common+0x120>
    e74c:	add	r0, pc, r0
    e750:	str	r5, [r0]
    e754:	ldr	r1, [r0, #8]
    e758:	add	r1, r1, #1
    e75c:	str	r1, [r0, #8]
    e760:	mov	r0, r5
    e764:	mov	r1, r4
    e768:	bl	c56c <rb_io_sched_event>
    e76c:	mov	r0, r5
    e770:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
    e774:	bl	5288 <rb_outofmemory@plt>
    e778:	.word	0x00019d7c
    e77c:	.word	0x00019d64
    e780:	.word	0x0002c6a0
    e784:	.word	0x0002c678
    e788:	.word	0x0002c664

0000e78c <rb_event_addonce>:
    e78c:	push	{r4, r5, r6, sl, fp, lr}
    e790:	add	fp, sp, #16
    e794:	sub	sp, sp, #8
    e798:	mov	r4, r2
    e79c:	mov	r5, r1
    e7a0:	mov	r6, r0
    e7a4:	cmp	r3, #0
    e7a8:	ble	e7cc <rb_event_addonce+0x40>
    e7ac:	mov	r0, #0
    e7b0:	mov	r1, r5
    e7b4:	mov	r2, r4
    e7b8:	str	r0, [sp]
    e7bc:	mov	r0, r6
    e7c0:	bl	e668 <rb_event_add_common>
    e7c4:	sub	sp, fp, #16
    e7c8:	pop	{r4, r5, r6, sl, fp, pc}
    e7cc:	ldr	r0, [pc, #20]	; e7e8 <rb_event_addonce+0x5c>
    e7d0:	mov	r1, r6
    e7d4:	mov	r2, r3
    e7d8:	add	r0, pc, r0
    e7dc:	bl	5228 <rb_lib_log@plt>
    e7e0:	mov	r3, #1
    e7e4:	b	e7ac <rb_event_addonce+0x20>
    e7e8:	.word	0x00007d81

0000e7ec <rb_event_delete>:
    e7ec:	cmp	r0, #0
    e7f0:	bxeq	lr
    e7f4:	mov	r1, #1
    e7f8:	str	r1, [r0, #44]	; 0x2c
    e7fc:	b	c5d8 <rb_io_unsched_event>

0000e800 <rb_event_find_delete>:
    e800:	ldr	r3, [pc, #60]	; e844 <rb_event_find_delete+0x44>
    e804:	ldr	r3, [pc, r3]
    e808:	b	e810 <rb_event_find_delete+0x10>
    e80c:	ldr	r3, [r3, #8]
    e810:	cmp	r3, #0
    e814:	bxeq	lr
    e818:	ldr	ip, [r3]
    e81c:	ldr	r2, [ip, #12]
    e820:	cmp	r2, r0
    e824:	bne	e80c <rb_event_find_delete+0xc>
    e828:	ldr	r2, [ip, #16]
    e82c:	cmp	r2, r1
    e830:	bne	e80c <rb_event_find_delete+0xc>
    e834:	mov	r0, #1
    e838:	str	r0, [ip, #44]	; 0x2c
    e83c:	mov	r0, ip
    e840:	b	c5d8 <rb_io_unsched_event>
    e844:	.word	0x0002c5ac

0000e848 <rb_event_addish>:
    e848:	push	{r4, r5, r6, r7, fp, lr}
    e84c:	add	fp, sp, #16
    e850:	sub	sp, sp, #8
    e854:	mov	r6, r3
    e858:	cmp	r3, #0
    e85c:	mov	r4, r2
    e860:	mov	r5, r1
    e864:	mov	r7, r0
    e868:	rsbmi	r6, r6, #0
    e86c:	cmp	r6, #2
    e870:	rsbgt	r6, r6, #0
    e874:	cmn	r6, #1
    e878:	mov	r3, r6
    e87c:	bgt	e8cc <rb_event_addish+0x84>
    e880:	bl	5438 <rand@plt>
    e884:	movw	r1, #19923	; 0x4dd3
    e888:	movt	r1, #4194	; 0x1062
    e88c:	smmul	r2, r0, r1
    e890:	asr	r3, r2, #6
    e894:	add	r2, r3, r2, lsr #31
    e898:	mov	r3, #1000	; 0x3e8
    e89c:	mls	r0, r2, r3, r0
    e8a0:	mov	r2, #0
    e8a4:	movw	r3, #21846	; 0x5556
    e8a8:	sub	r2, r2, r6, lsl #1
    e8ac:	movt	r3, #21845	; 0x5555
    e8b0:	smmul	r2, r2, r3
    e8b4:	add	r2, r2, r2, lsr #31
    e8b8:	mul	r0, r0, r2
    e8bc:	smmul	r0, r0, r1
    e8c0:	asr	r1, r0, #6
    e8c4:	add	r0, r1, r0, lsr #31
    e8c8:	add	r3, r0, r2
    e8cc:	mov	r0, r7
    e8d0:	mov	r1, r5
    e8d4:	mov	r2, r4
    e8d8:	str	r6, [sp]
    e8dc:	bl	e668 <rb_event_add_common>
    e8e0:	sub	sp, fp, #16
    e8e4:	pop	{r4, r5, r6, r7, fp, pc}

0000e8e8 <rb_run_one_event>:
    e8e8:	push	{r4, r5, r6, sl, fp, lr}
    e8ec:	add	fp, sp, #16
    e8f0:	mov	r4, r0
    e8f4:	ldr	r1, [r0, #20]
    e8f8:	ldr	r0, [pc, #196]	; e9c4 <rb_run_one_event+0xdc>
    e8fc:	mov	r2, #33	; 0x21
    e900:	add	r0, pc, r0
    e904:	bl	4fc4 <rb_strlcpy@plt>
    e908:	ldr	r1, [r4, #12]
    e90c:	ldr	r0, [r4, #16]
    e910:	blx	r1
    e914:	ldr	r0, [r4, #24]
    e918:	cmp	r0, #0
    e91c:	beq	e9b0 <rb_run_one_event+0xc8>
    e920:	bl	50fc <rb_current_time@plt>
    e924:	ldr	r6, [r4, #24]
    e928:	mov	r5, r0
    e92c:	cmn	r6, #1
    e930:	bgt	e980 <rb_run_one_event+0x98>
    e934:	bl	5438 <rand@plt>
    e938:	movw	r1, #19923	; 0x4dd3
    e93c:	movt	r1, #4194	; 0x1062
    e940:	smmul	r2, r0, r1
    e944:	asr	r3, r2, #6
    e948:	add	r2, r3, r2, lsr #31
    e94c:	mov	r3, #1000	; 0x3e8
    e950:	mls	r0, r2, r3, r0
    e954:	mov	r2, #0
    e958:	movw	r3, #21846	; 0x5556
    e95c:	sub	r2, r2, r6, lsl #1
    e960:	movt	r3, #21845	; 0x5555
    e964:	smmul	r2, r2, r3
    e968:	add	r2, r2, r2, lsr #31
    e96c:	mul	r0, r0, r2
    e970:	smmul	r0, r0, r1
    e974:	asr	r1, r0, #6
    e978:	add	r0, r1, r0, lsr #31
    e97c:	add	r6, r0, r2
    e980:	add	r0, r6, r5
    e984:	str	r0, [r4, #28]
    e988:	ldr	r1, [pc, #56]	; e9c8 <rb_run_one_event+0xe0>
    e98c:	ldr	r1, [pc, r1]
    e990:	cmp	r0, r1
    e994:	blt	e9a0 <rb_run_one_event+0xb8>
    e998:	cmn	r1, #1
    e99c:	popne	{r4, r5, r6, sl, fp, pc}
    e9a0:	ldr	r1, [pc, #36]	; e9cc <rb_run_one_event+0xe4>
    e9a4:	add	r1, pc, r1
    e9a8:	str	r0, [r1]
    e9ac:	pop	{r4, r5, r6, sl, fp, pc}
    e9b0:	mov	r0, #1
    e9b4:	str	r0, [r4, #44]	; 0x2c
    e9b8:	mov	r0, r4
    e9bc:	pop	{r4, r5, r6, sl, fp, lr}
    e9c0:	b	c5d8 <rb_io_unsched_event>
    e9c4:	.word	0x0002c48c
    e9c8:	.word	0x00019ad8
    e9cc:	.word	0x00019ac0

0000e9d0 <rb_event_run>:
    e9d0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e9d4:	add	fp, sp, #28
    e9d8:	sub	sp, sp, #4
    e9dc:	bl	c638 <rb_io_supports_event>
    e9e0:	cmp	r0, #0
    e9e4:	bne	eb54 <rb_event_run+0x184>
    e9e8:	ldr	r9, [pc, #364]	; eb5c <rb_event_run+0x18c>
    e9ec:	mvn	r0, #0
    e9f0:	add	r9, pc, r9
    e9f4:	str	r0, [r9]
    e9f8:	ldr	r4, [pc, #352]	; eb60 <rb_event_run+0x190>
    e9fc:	ldr	r4, [pc, r4]
    ea00:	cmp	r4, #0
    ea04:	beq	eb54 <rb_event_run+0x184>
    ea08:	ldr	r7, [pc, #340]	; eb64 <rb_event_run+0x194>
    ea0c:	mov	sl, #0
    ea10:	add	r7, pc, r7
    ea14:	ldr	r5, [r4]
    ea18:	ldr	r4, [r4, #8]
    ea1c:	ldr	r0, [r5, #44]	; 0x2c
    ea20:	cmp	r0, #0
    ea24:	beq	ea80 <rb_event_run+0xb0>
    ea28:	ldr	r0, [r5, #8]
    ea2c:	ldr	r1, [r5, #4]
    ea30:	mov	r2, r7
    ea34:	cmp	r0, #0
    ea38:	streq	r1, [r7, #4]
    ea3c:	strne	r1, [r0, #4]
    ea40:	ldrne	r1, [r5, #4]
    ea44:	cmp	r1, #0
    ea48:	addne	r2, r1, #8
    ea4c:	str	r0, [r2]
    ea50:	str	sl, [r5, #4]
    ea54:	str	sl, [r5, #8]
    ea58:	ldr	r0, [r7, #8]
    ea5c:	sub	r0, r0, #1
    ea60:	str	r0, [r7, #8]
    ea64:	ldr	r0, [r5, #20]
    ea68:	cmp	r0, #0
    ea6c:	beq	ea74 <rb_event_run+0xa4>
    ea70:	bl	500c <free@plt>
    ea74:	mov	r0, r5
    ea78:	bl	500c <free@plt>
    ea7c:	b	eb4c <rb_event_run+0x17c>
    ea80:	ldr	r6, [r5, #28]
    ea84:	bl	50fc <rb_current_time@plt>
    ea88:	cmp	r6, r0
    ea8c:	ble	ea98 <rb_event_run+0xc8>
    ea90:	ldr	r0, [r5, #28]
    ea94:	b	eb2c <rb_event_run+0x15c>
    ea98:	ldr	r1, [r5, #20]
    ea9c:	ldr	r0, [pc, #196]	; eb68 <rb_event_run+0x198>
    eaa0:	mov	r2, #33	; 0x21
    eaa4:	add	r0, pc, r0
    eaa8:	bl	4fc4 <rb_strlcpy@plt>
    eaac:	ldr	r1, [r5, #12]
    eab0:	ldr	r0, [r5, #16]
    eab4:	blx	r1
    eab8:	ldr	r0, [r5, #24]
    eabc:	cmp	r0, #0
    eac0:	beq	ea28 <rb_event_run+0x58>
    eac4:	bl	50fc <rb_current_time@plt>
    eac8:	ldr	r8, [r5, #24]
    eacc:	mov	r6, r0
    ead0:	cmn	r8, #1
    ead4:	bgt	eb24 <rb_event_run+0x154>
    ead8:	bl	5438 <rand@plt>
    eadc:	movw	r1, #19923	; 0x4dd3
    eae0:	movt	r1, #4194	; 0x1062
    eae4:	mov	r3, r1
    eae8:	smmul	r1, r0, r1
    eaec:	asr	r2, r1, #6
    eaf0:	add	r1, r2, r1, lsr #31
    eaf4:	mov	r2, #1000	; 0x3e8
    eaf8:	mls	r0, r1, r2, r0
    eafc:	movw	r2, #21846	; 0x5556
    eb00:	sub	r1, sl, r8, lsl #1
    eb04:	movt	r2, #21845	; 0x5555
    eb08:	smmul	r1, r1, r2
    eb0c:	add	r1, r1, r1, lsr #31
    eb10:	mul	r0, r0, r1
    eb14:	smmul	r0, r0, r3
    eb18:	asr	r2, r0, #6
    eb1c:	add	r0, r2, r0, lsr #31
    eb20:	add	r8, r0, r1
    eb24:	add	r0, r8, r6
    eb28:	str	r0, [r5, #28]
    eb2c:	ldr	r1, [pc, #56]	; eb6c <rb_event_run+0x19c>
    eb30:	ldr	r1, [pc, r1]
    eb34:	cmp	r0, r1
    eb38:	blt	eb48 <rb_event_run+0x178>
    eb3c:	cmn	r1, #1
    eb40:	streq	r0, [r9]
    eb44:	b	eb4c <rb_event_run+0x17c>
    eb48:	str	r0, [r9]
    eb4c:	cmp	r4, #0
    eb50:	bne	ea14 <rb_event_run+0x44>
    eb54:	sub	sp, fp, #28
    eb58:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    eb5c:	.word	0x00019a74
    eb60:	.word	0x0002c3b4
    eb64:	.word	0x0002c3a0
    eb68:	.word	0x0002c2e8
    eb6c:	.word	0x00019934

0000eb70 <rb_event_io_register_all>:
    eb70:	push	{r4, sl, fp, lr}
    eb74:	add	fp, sp, #8
    eb78:	bl	c638 <rb_io_supports_event>
    eb7c:	cmp	r0, #0
    eb80:	popeq	{r4, sl, fp, pc}
    eb84:	ldr	r4, [pc, #32]	; ebac <rb_event_io_register_all+0x3c>
    eb88:	ldr	r4, [pc, r4]
    eb8c:	b	eba0 <rb_event_io_register_all+0x30>
    eb90:	ldr	r0, [r4]
    eb94:	ldr	r1, [r0, #32]
    eb98:	bl	c56c <rb_io_sched_event>
    eb9c:	ldr	r4, [r4, #8]
    eba0:	cmp	r4, #0
    eba4:	bne	eb90 <rb_event_io_register_all+0x20>
    eba8:	pop	{r4, sl, fp, pc}
    ebac:	.word	0x0002c228

0000ebb0 <rb_event_init>:
    ebb0:	ldr	r0, [pc, #16]	; ebc8 <rb_event_init+0x18>
    ebb4:	ldr	r1, [pc, #16]	; ebcc <rb_event_init+0x1c>
    ebb8:	mov	r2, #33	; 0x21
    ebbc:	add	r0, pc, r0
    ebc0:	add	r1, pc, r1
    ebc4:	b	4fc4 <rb_strlcpy@plt>
    ebc8:	.word	0x0002c1d0
    ebcc:	.word	0x000079db

0000ebd0 <rb_dump_events>:
    ebd0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ebd4:	add	fp, sp, #28
    ebd8:	sub	sp, sp, #524	; 0x20c
    ebdc:	ldr	r2, [pc, #180]	; ec98 <rb_dump_events+0xc8>
    ebe0:	ldr	r3, [pc, #180]	; ec9c <rb_dump_events+0xcc>
    ebe4:	add	r6, sp, #8
    ebe8:	mov	r9, r1
    ebec:	mov	sl, r0
    ebf0:	mov	r1, #512	; 0x200
    ebf4:	mov	r0, r6
    ebf8:	add	r2, pc, r2
    ebfc:	add	r3, pc, r3
    ec00:	bl	54a4 <snprintf@plt>
    ec04:	mov	r0, r6
    ec08:	mov	r1, r9
    ec0c:	blx	sl
    ec10:	ldr	r1, [pc, #136]	; eca0 <rb_dump_events+0xd0>
    ec14:	mov	r0, r6
    ec18:	mov	r2, #512	; 0x200
    ec1c:	add	r1, pc, r1
    ec20:	bl	4fc4 <rb_strlcpy@plt>
    ec24:	mov	r0, r6
    ec28:	mov	r1, r9
    ec2c:	blx	sl
    ec30:	ldr	r4, [pc, #108]	; eca4 <rb_dump_events+0xd4>
    ec34:	ldr	r4, [pc, r4]
    ec38:	cmp	r4, #0
    ec3c:	beq	ec90 <rb_dump_events+0xc0>
    ec40:	add	r6, sp, #8
    ec44:	ldr	r5, [r4]
    ec48:	ldr	r7, [r5, #20]
    ec4c:	ldr	r8, [r5, #28]
    ec50:	bl	50fc <rb_current_time@plt>
    ec54:	ldr	r1, [r5, #24]
    ec58:	sub	r0, r8, r0
    ec5c:	mov	r3, r7
    ec60:	stm	sp, {r0, r1}
    ec64:	mov	r0, r6
    ec68:	mov	r1, #512	; 0x200
    ec6c:	ldr	r2, [pc, #52]	; eca8 <rb_dump_events+0xd8>
    ec70:	add	r2, pc, r2
    ec74:	bl	54a4 <snprintf@plt>
    ec78:	mov	r0, r6
    ec7c:	mov	r1, r9
    ec80:	blx	sl
    ec84:	ldr	r4, [r4, #8]
    ec88:	cmp	r4, #0
    ec8c:	bne	ec44 <rb_dump_events+0x74>
    ec90:	sub	sp, fp, #28
    ec94:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ec98:	.word	0x000079a8
    ec9c:	.word	0x0002c190
    eca0:	.word	0x0000799a
    eca4:	.word	0x0002c17c
    eca8:	.word	0x00007972

0000ecac <rb_set_back_events>:
    ecac:	ldr	r1, [pc, #36]	; ecd8 <rb_set_back_events+0x2c>
    ecb0:	ldr	r1, [pc, r1]
    ecb4:	cmp	r1, #0
    ecb8:	bxeq	lr
    ecbc:	ldr	r2, [r1]
    ecc0:	ldr	r3, [r2, #28]
    ecc4:	subs	r3, r3, r0
    ecc8:	movle	r3, #0
    eccc:	str	r3, [r2, #28]
    ecd0:	ldr	r1, [r1, #8]
    ecd4:	b	ecb4 <rb_set_back_events+0x8>
    ecd8:	.word	0x0002c100

0000ecdc <rb_event_update>:
    ecdc:	push	{r4, r5, fp, lr}
    ece0:	add	fp, sp, #8
    ece4:	cmp	r0, #0
    ece8:	beq	ed6c <rb_event_update+0x90>
    ecec:	mov	r5, r1
    ecf0:	mov	r4, r0
    ecf4:	cmn	r1, #1
    ecf8:	str	r1, [r0, #24]
    ecfc:	bgt	ed4c <rb_event_update+0x70>
    ed00:	bl	5438 <rand@plt>
    ed04:	movw	r1, #19923	; 0x4dd3
    ed08:	movt	r1, #4194	; 0x1062
    ed0c:	smmul	r2, r0, r1
    ed10:	asr	r3, r2, #6
    ed14:	add	r2, r3, r2, lsr #31
    ed18:	mov	r3, #1000	; 0x3e8
    ed1c:	mls	r0, r2, r3, r0
    ed20:	mov	r2, #0
    ed24:	movw	r3, #21846	; 0x5556
    ed28:	sub	r2, r2, r5, lsl #1
    ed2c:	movt	r3, #21845	; 0x5555
    ed30:	smmul	r2, r2, r3
    ed34:	add	r2, r2, r2, lsr #31
    ed38:	mul	r0, r0, r2
    ed3c:	smmul	r0, r0, r1
    ed40:	asr	r1, r0, #6
    ed44:	add	r0, r1, r0, lsr #31
    ed48:	add	r5, r0, r2
    ed4c:	bl	50fc <rb_current_time@plt>
    ed50:	ldr	r1, [r4, #28]
    ed54:	add	r0, r0, r5
    ed58:	cmp	r0, r1
    ed5c:	popge	{r4, r5, fp, pc}
    ed60:	bl	50fc <rb_current_time@plt>
    ed64:	add	r0, r0, r5
    ed68:	str	r0, [r4, #28]
    ed6c:	pop	{r4, r5, fp, pc}

0000ed70 <rb_event_next>:
    ed70:	ldr	r0, [pc, #4]	; ed7c <rb_event_next+0xc>
    ed74:	ldr	r0, [pc, r0]
    ed78:	bx	lr
    ed7c:	.word	0x000196f0

0000ed80 <rb_ctime>:
    ed80:	push	{r4, r5, r6, r7, fp, lr}
    ed84:	add	fp, sp, #16
    ed88:	sub	sp, sp, #72	; 0x48
    ed8c:	mov	r6, r1
    ed90:	str	r0, [fp, #-20]	; 0xffffffec
    ed94:	sub	r0, fp, #20
    ed98:	add	r1, sp, #24
    ed9c:	mov	r7, r2
    eda0:	bl	52f4 <gmtime_r@plt>
    eda4:	ldr	r5, [pc, #144]	; ee3c <rb_ctime+0xbc>
    eda8:	cmp	r6, #0
    edac:	movweq	r7, #128	; 0x80
    edb0:	add	r5, pc, r5
    edb4:	movne	r5, r6
    edb8:	cmp	r0, #0
    edbc:	beq	ee24 <rb_ctime+0xa4>
    edc0:	ldm	r0, {r1, r2, r3, r6, ip}
    edc4:	ldr	r4, [r0, #20]
    edc8:	ldr	r0, [r0, #24]
    edcc:	str	r1, [sp, #16]
    edd0:	movw	r1, #1900	; 0x76c
    edd4:	str	r2, [sp, #12]
    edd8:	str	r3, [sp, #8]
    eddc:	str	r6, [sp, #4]
    ede0:	add	r1, r4, r1
    ede4:	str	r1, [sp, #20]
    ede8:	ldr	r1, [pc, #84]	; ee44 <rb_ctime+0xc4>
    edec:	add	r1, pc, r1
    edf0:	ldr	r1, [r1, ip, lsl #2]
    edf4:	str	r1, [sp]
    edf8:	ldr	r1, [pc, #72]	; ee48 <rb_ctime+0xc8>
    edfc:	ldr	r2, [pc, #72]	; ee4c <rb_ctime+0xcc>
    ee00:	add	r1, pc, r1
    ee04:	add	r2, pc, r2
    ee08:	ldr	r3, [r1, r0, lsl #2]
    ee0c:	mov	r0, r5
    ee10:	mov	r1, r7
    ee14:	bl	54a4 <snprintf@plt>
    ee18:	mov	r0, r5
    ee1c:	sub	sp, fp, #16
    ee20:	pop	{r4, r5, r6, r7, fp, pc}
    ee24:	ldr	r1, [pc, #20]	; ee40 <rb_ctime+0xc0>
    ee28:	mov	r0, r5
    ee2c:	mov	r2, r7
    ee30:	add	r1, pc, r1
    ee34:	bl	4fc4 <rb_strlcpy@plt>
    ee38:	b	ee18 <rb_ctime+0x98>
    ee3c:	.word	0x0002c010
    ee40:	.word	0x00006eda
    ee44:	.word	0x00019080
    ee48:	.word	0x00019050
    ee4c:	.word	0x00007801

0000ee50 <rb_date>:
    ee50:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
    ee54:	add	fp, sp, #24
    ee58:	sub	sp, sp, #72	; 0x48
    ee5c:	mov	r4, r1
    ee60:	str	r0, [fp, #-28]	; 0xffffffe4
    ee64:	sub	r0, fp, #28
    ee68:	add	r1, sp, #24
    ee6c:	mov	r8, r2
    ee70:	bl	52f4 <gmtime_r@plt>
    ee74:	cmp	r0, #0
    ee78:	beq	eedc <rb_date+0x8c>
    ee7c:	ldm	r0, {r1, r2, r3, r5, r6, r7}
    ee80:	ldr	r0, [r0, #24]
    ee84:	str	r1, [sp, #20]
    ee88:	movw	r1, #1900	; 0x76c
    ee8c:	str	r2, [sp, #16]
    ee90:	str	r3, [sp, #12]
    ee94:	str	r5, [sp, #4]
    ee98:	add	r1, r7, r1
    ee9c:	str	r1, [sp, #8]
    eea0:	ldr	r1, [pc, #80]	; eef8 <rb_date+0xa8>
    eea4:	add	r1, pc, r1
    eea8:	ldr	r1, [r1, r6, lsl #2]
    eeac:	str	r1, [sp]
    eeb0:	ldr	r1, [pc, #68]	; eefc <rb_date+0xac>
    eeb4:	ldr	r2, [pc, #68]	; ef00 <rb_date+0xb0>
    eeb8:	add	r1, pc, r1
    eebc:	add	r2, pc, r2
    eec0:	ldr	r3, [r1, r0, lsl #2]
    eec4:	mov	r0, r4
    eec8:	mov	r1, r8
    eecc:	bl	54a4 <snprintf@plt>
    eed0:	mov	r0, r4
    eed4:	sub	sp, fp, #24
    eed8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
    eedc:	ldr	r1, [pc, #16]	; eef4 <rb_date+0xa4>
    eee0:	mov	r0, r4
    eee4:	mov	r2, r8
    eee8:	add	r1, pc, r1
    eeec:	bl	4fc4 <rb_strlcpy@plt>
    eef0:	b	eed0 <rb_date+0x80>
    eef4:	.word	0x00006e22
    eef8:	.word	0x00019014
    eefc:	.word	0x00018fe4
    ef00:	.word	0x00007764

0000ef04 <rb_current_time>:
    ef04:	ldr	r0, [pc, #4]	; ef10 <rb_current_time+0xc>
    ef08:	ldr	r0, [pc, r0]
    ef0c:	bx	lr
    ef10:	.word	0x0002bf38

0000ef14 <rb_current_time_tv>:
    ef14:	ldr	r0, [pc, #4]	; ef20 <rb_current_time_tv+0xc>
    ef18:	add	r0, pc, r0
    ef1c:	bx	lr
    ef20:	.word	0x0002bf28

0000ef24 <rb_lib_log>:
    ef24:	sub	sp, sp, #12
    ef28:	push	{r4, sl, fp, lr}
    ef2c:	add	fp, sp, #8
    ef30:	sub	sp, sp, #4
    ef34:	mov	ip, r0
    ef38:	add	r0, fp, #8
    ef3c:	stm	r0, {r1, r2, r3}
    ef40:	ldr	r0, [pc, #72]	; ef90 <rb_lib_log+0x6c>
    ef44:	ldr	r0, [pc, r0]
    ef48:	cmp	r0, #0
    ef4c:	beq	ef80 <rb_lib_log+0x5c>
    ef50:	add	r3, fp, #8
    ef54:	mov	r1, #512	; 0x200
    ef58:	mov	r2, ip
    ef5c:	str	r3, [sp]
    ef60:	ldr	r4, [pc, #44]	; ef94 <rb_lib_log+0x70>
    ef64:	add	r4, pc, r4
    ef68:	mov	r0, r4
    ef6c:	bl	4e8c <vsnprintf@plt>
    ef70:	ldr	r1, [pc, #32]	; ef98 <rb_lib_log+0x74>
    ef74:	mov	r0, r4
    ef78:	ldr	r1, [pc, r1]
    ef7c:	blx	r1
    ef80:	sub	sp, fp, #8
    ef84:	pop	{r4, sl, fp, lr}
    ef88:	add	sp, sp, #12
    ef8c:	bx	lr
    ef90:	.word	0x0002bf04
    ef94:	.word	0x0002bee8
    ef98:	.word	0x0002bed0

0000ef9c <rb_lib_die>:
    ef9c:	sub	sp, sp, #12
    efa0:	push	{r4, sl, fp, lr}
    efa4:	add	fp, sp, #8
    efa8:	sub	sp, sp, #4
    efac:	mov	ip, r0
    efb0:	add	r0, fp, #8
    efb4:	stm	r0, {r1, r2, r3}
    efb8:	ldr	r0, [pc, #76]	; f00c <rb_lib_die+0x70>
    efbc:	ldr	r0, [pc, r0]
    efc0:	cmp	r0, #0
    efc4:	beq	f008 <rb_lib_die+0x6c>
    efc8:	add	r3, fp, #8
    efcc:	mov	r1, #512	; 0x200
    efd0:	mov	r2, ip
    efd4:	str	r3, [sp]
    efd8:	ldr	r4, [pc, #48]	; f010 <rb_lib_die+0x74>
    efdc:	add	r4, pc, r4
    efe0:	mov	r0, r4
    efe4:	bl	4e8c <vsnprintf@plt>
    efe8:	ldr	r1, [pc, #36]	; f014 <rb_lib_die+0x78>
    efec:	mov	r0, r4
    eff0:	ldr	r1, [pc, r1]
    eff4:	blx	r1
    eff8:	sub	sp, fp, #8
    effc:	pop	{r4, sl, fp, lr}
    f000:	add	sp, sp, #12
    f004:	bx	lr
    f008:	bl	4d00 <abort@plt>
    f00c:	.word	0x0002c090
    f010:	.word	0x0002be70
    f014:	.word	0x0002c05c

0000f018 <rb_lib_restart>:
    f018:	sub	sp, sp, #12
    f01c:	push	{fp, lr}
    f020:	mov	fp, sp
    f024:	sub	sp, sp, #4
    f028:	mov	ip, r0
    f02c:	add	r0, fp, #8
    f030:	stm	r0, {r1, r2, r3}
    f034:	ldr	r0, [pc, #64]	; f07c <rb_lib_restart+0x64>
    f038:	ldr	r0, [pc, r0]
    f03c:	cmp	r0, #0
    f040:	bne	f048 <rb_lib_restart+0x30>
    f044:	bl	4d00 <abort@plt>
    f048:	add	r3, fp, #8
    f04c:	mov	r1, #512	; 0x200
    f050:	mov	r2, ip
    f054:	str	r3, [sp]
    f058:	ldr	r4, [pc, #32]	; f080 <rb_lib_restart+0x68>
    f05c:	add	r4, pc, r4
    f060:	mov	r0, r4
    f064:	bl	4e8c <vsnprintf@plt>
    f068:	ldr	r1, [pc, #20]	; f084 <rb_lib_restart+0x6c>
    f06c:	mov	r0, r4
    f070:	ldr	r1, [pc, r1]
    f074:	blx	r1
    f078:	bl	4d00 <abort@plt>
    f07c:	.word	0x0002c018
    f080:	.word	0x0002bdf0
    f084:	.word	0x0002bfe0

0000f088 <rb_set_time>:
    f088:	push	{fp, lr}
    f08c:	mov	fp, sp
    f090:	sub	sp, sp, #8
    f094:	mov	r0, sp
    f098:	mov	r1, #0
    f09c:	bl	4eec <rb_gettimeofday@plt>
    f0a0:	cmn	r0, #1
    f0a4:	beq	f0dc <rb_set_time+0x54>
    f0a8:	ldr	r0, [pc, #84]	; f104 <rb_set_time+0x7c>
    f0ac:	ldr	r0, [pc, r0]
    f0b0:	ldr	r1, [sp]
    f0b4:	cmp	r0, r1
    f0b8:	ble	f0c4 <rb_set_time+0x3c>
    f0bc:	sub	r0, r0, r1
    f0c0:	bl	ecac <rb_set_back_events>
    f0c4:	ldm	sp, {r0, r1}
    f0c8:	ldr	r2, [pc, #56]	; f108 <rb_set_time+0x80>
    f0cc:	add	r2, pc, r2
    f0d0:	strd	r0, [r2]
    f0d4:	mov	sp, fp
    f0d8:	pop	{fp, pc}
    f0dc:	bl	55e8 <__errno_location@plt>
    f0e0:	ldr	r0, [r0]
    f0e4:	bl	4cdc <strerror@plt>
    f0e8:	mov	r1, r0
    f0ec:	ldr	r0, [pc, #24]	; f10c <rb_set_time+0x84>
    f0f0:	add	r0, pc, r0
    f0f4:	bl	5228 <rb_lib_log@plt>
    f0f8:	ldr	r0, [pc, #16]	; f110 <rb_set_time+0x88>
    f0fc:	add	r0, pc, r0
    f100:	bl	5360 <rb_lib_restart@plt>
    f104:	.word	0x0002bd94
    f108:	.word	0x0002bd74
    f10c:	.word	0x00007555
    f110:	.word	0x0000755c

0000f114 <rb_lib_version>:
    f114:	push	{r4, sl, fp, lr}
    f118:	add	fp, sp, #8
    f11c:	sub	sp, sp, #520	; 0x208
    f120:	add	r4, sp, #8
    f124:	mov	r1, #512	; 0x200
    f128:	mov	r0, r4
    f12c:	bl	dcf8 <rb_get_ssl_info>
    f130:	ldr	r0, [pc, #48]	; f168 <rb_lib_version+0x54>
    f134:	mov	r1, #640	; 0x280
    f138:	ldr	r0, [pc, r0]
    f13c:	str	r4, [sp]
    f140:	ldr	r3, [r0]
    f144:	ldr	r4, [pc, #32]	; f16c <rb_lib_version+0x58>
    f148:	ldr	r2, [pc, #32]	; f170 <rb_lib_version+0x5c>
    f14c:	add	r4, pc, r4
    f150:	add	r2, pc, r2
    f154:	mov	r0, r4
    f158:	bl	54a4 <snprintf@plt>
    f15c:	mov	r0, r4
    f160:	sub	sp, fp, #8
    f164:	pop	{r4, sl, fp, pc}
    f168:	.word	0x00019254
    f16c:	.word	0x0002bf08
    f170:	.word	0x00007516

0000f174 <rb_lib_init>:
    f174:	push	{r4, r5, r6, r7, fp, lr}
    f178:	add	fp, sp, #16
    f17c:	mov	r4, r3
    f180:	mov	r5, r2
    f184:	mov	r6, r1
    f188:	mov	r7, r0
    f18c:	bl	5294 <rb_set_time@plt>
    f190:	ldr	r0, [pc, #84]	; f1ec <rb_lib_init+0x78>
    f194:	add	r0, pc, r0
    f198:	str	r6, [r0]
    f19c:	ldr	r0, [pc, #76]	; f1f0 <rb_lib_init+0x7c>
    f1a0:	add	r0, pc, r0
    f1a4:	str	r7, [r0]
    f1a8:	ldr	r0, [pc, #68]	; f1f4 <rb_lib_init+0x80>
    f1ac:	add	r0, pc, r0
    f1b0:	str	r5, [r0]
    f1b4:	bl	4f28 <rb_event_init@plt>
    f1b8:	bl	52dc <rb_init_bh@plt>
    f1bc:	ldr	r1, [fp, #8]
    f1c0:	ldr	r2, [fp, #16]
    f1c4:	mov	r0, r4
    f1c8:	bl	53fc <rb_fdlist_init@plt>
    f1cc:	bl	4cc4 <rb_init_netio@plt>
    f1d0:	ldr	r0, [fp, #12]
    f1d4:	bl	51ec <rb_init_rb_dlink_nodes@plt>
    f1d8:	bl	c638 <rb_io_supports_event>
    f1dc:	cmp	r0, #0
    f1e0:	popeq	{r4, r5, r6, r7, fp, pc}
    f1e4:	pop	{r4, r5, r6, r7, fp, lr}
    f1e8:	b	c654 <rb_io_init_event>
    f1ec:	.word	0x0002bebc
    f1f0:	.word	0x0002bca8
    f1f4:	.word	0x0002bea0

0000f1f8 <rb_lib_loop>:
    f1f8:	push	{fp, lr}
    f1fc:	mov	fp, sp
    f200:	mov	r4, r0
    f204:	bl	5294 <rb_set_time@plt>
    f208:	bl	c638 <rb_io_supports_event>
    f20c:	cmp	r0, #0
    f210:	beq	f220 <rb_lib_loop+0x28>
    f214:	mvn	r0, #0
    f218:	bl	4e80 <rb_select@plt>
    f21c:	b	f214 <rb_lib_loop+0x1c>
    f220:	mov	r5, #1000	; 0x3e8
    f224:	cmp	r4, #0
    f228:	beq	f234 <rb_lib_loop+0x3c>
    f22c:	mov	r0, r4
    f230:	b	f260 <rb_lib_loop+0x68>
    f234:	bl	5528 <rb_event_next@plt>
    f238:	cmp	r0, #1
    f23c:	blt	f25c <rb_lib_loop+0x64>
    f240:	ldr	r1, [pc, #36]	; f26c <rb_lib_loop+0x74>
    f244:	ldr	r1, [pc, r1]
    f248:	sub	r1, r0, r1
    f24c:	mul	r0, r1, r5
    f250:	cmp	r1, #1
    f254:	movwlt	r0, #1000	; 0x3e8
    f258:	b	f260 <rb_lib_loop+0x68>
    f25c:	mvn	r0, #0
    f260:	bl	4e80 <rb_select@plt>
    f264:	bl	52c4 <rb_event_run@plt>
    f268:	b	f224 <rb_lib_loop+0x2c>
    f26c:	.word	0x0002bbfc

0000f270 <rb_strtok_r>:
    f270:	b	5354 <strtok_r@plt>

0000f274 <rb_base64_encode>:
    f274:	push	{r4, r5, r6, sl, fp, lr}
    f278:	add	fp, sp, #16
    f27c:	mov	r4, r0
    f280:	mov	r0, #0
    f284:	cmn	r1, #2
    f288:	poplt	{r4, r5, r6, sl, fp, pc}
    f28c:	mov	r6, r1
    f290:	add	r0, r1, #2
    f294:	movw	r1, #21846	; 0x5556
    f298:	movt	r1, #21845	; 0x5555
    f29c:	smmul	r0, r0, r1
    f2a0:	add	r0, r0, r0, lsr #31
    f2a4:	add	r1, r0, r0, lsl #2
    f2a8:	mov	r0, #1
    f2ac:	bl	4f10 <calloc@plt>
    f2b0:	cmp	r0, #0
    f2b4:	beq	f3a8 <rb_base64_encode+0x134>
    f2b8:	cmp	r6, #3
    f2bc:	blt	f330 <rb_base64_encode+0xbc>
    f2c0:	ldr	ip, [pc, #228]	; f3ac <rb_base64_encode+0x138>
    f2c4:	mov	r1, r0
    f2c8:	add	ip, pc, ip
    f2cc:	ldrb	r3, [r4]
    f2d0:	cmp	r6, #5
    f2d4:	ldrb	r2, [ip, r3, lsr #2]
    f2d8:	strb	r2, [r1]
    f2dc:	and	r2, r3, #3
    f2e0:	ldrb	r3, [r4, #1]
    f2e4:	lsr	r5, r3, #4
    f2e8:	and	r3, r3, #15
    f2ec:	orr	r2, r5, r2, lsl #4
    f2f0:	ldrb	r2, [ip, r2]
    f2f4:	strb	r2, [r1, #1]
    f2f8:	ldrb	r2, [r4, #2]
    f2fc:	add	r4, r4, #3
    f300:	and	r5, r2, #63	; 0x3f
    f304:	lsr	r2, r2, #6
    f308:	orr	r2, r2, r3, lsl #2
    f30c:	ldrb	r5, [ip, r5]
    f310:	sub	r3, r6, #3
    f314:	ldrb	r2, [ip, r2]
    f318:	mov	r6, r3
    f31c:	strb	r5, [r1, #3]
    f320:	strb	r2, [r1, #2]
    f324:	add	r1, r1, #4
    f328:	bgt	f2cc <rb_base64_encode+0x58>
    f32c:	b	f338 <rb_base64_encode+0xc4>
    f330:	mov	r3, r6
    f334:	mov	r1, r0
    f338:	cmp	r3, #0
    f33c:	beq	f39c <rb_base64_encode+0x128>
    f340:	ldrb	r6, [r4]
    f344:	ldr	r2, [pc, #100]	; f3b0 <rb_base64_encode+0x13c>
    f348:	cmp	r3, #2
    f34c:	add	r2, pc, r2
    f350:	ldrb	r5, [r2, r6, lsr #2]
    f354:	strb	r5, [r1]
    f358:	mov	r5, #48	; 0x30
    f35c:	and	r5, r5, r6, lsl #4
    f360:	blt	f380 <rb_base64_encode+0x10c>
    f364:	ldrb	r3, [r4, #1]
    f368:	and	r6, r3, #15
    f36c:	orr	r3, r5, r3, lsr #4
    f370:	ldrb	r6, [r2, r6, lsl #2]
    f374:	ldrb	r2, [r2, r3]
    f378:	strb	r6, [r1, #2]
    f37c:	b	f38c <rb_base64_encode+0x118>
    f380:	ldrb	r2, [r2, r5]
    f384:	mov	r3, #61	; 0x3d
    f388:	strb	r3, [r1, #2]
    f38c:	strb	r2, [r1, #1]
    f390:	mov	r2, #61	; 0x3d
    f394:	strb	r2, [r1, #3]
    f398:	add	r1, r1, #4
    f39c:	mov	r2, #0
    f3a0:	strb	r2, [r1]
    f3a4:	pop	{r4, r5, r6, sl, fp, pc}
    f3a8:	bl	5288 <rb_outofmemory@plt>
    f3ac:	.word	0x000073b5
    f3b0:	.word	0x00007331

0000f3b4 <rb_base64_decode>:
    f3b4:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
    f3b8:	add	fp, sp, #24
    f3bc:	mov	r5, r1
    f3c0:	mov	r6, r0
    f3c4:	add	r1, r1, #1
    f3c8:	mov	r0, #1
    f3cc:	mov	r8, r2
    f3d0:	bl	4f10 <calloc@plt>
    f3d4:	cmp	r0, #0
    f3d8:	beq	f4e8 <rb_base64_decode+0x134>
    f3dc:	ldr	r3, [pc, #264]	; f4ec <rb_base64_decode+0x138>
    f3e0:	mov	r1, #0
    f3e4:	mov	r2, #0
    f3e8:	add	r3, pc, r3
    f3ec:	b	f484 <rb_base64_decode+0xd0>
    f3f0:	subs	r5, r5, #1
    f3f4:	blt	f494 <rb_base64_decode+0xe0>
    f3f8:	cmp	r4, #61	; 0x3d
    f3fc:	beq	f494 <rb_base64_decode+0xe0>
    f400:	add	r7, r3, r4, lsl #1
    f404:	ldrsh	r4, [r7]
    f408:	cmp	r4, #0
    f40c:	blt	f484 <rb_base64_decode+0xd0>
    f410:	and	r7, r2, #3
    f414:	cmp	r7, #1
    f418:	beq	f458 <rb_base64_decode+0xa4>
    f41c:	cmp	r7, #2
    f420:	beq	f440 <rb_base64_decode+0x8c>
    f424:	cmp	r7, #3
    f428:	bne	f478 <rb_base64_decode+0xc4>
    f42c:	ldrb	r7, [r0, r1]
    f430:	orr	r7, r7, r4
    f434:	strb	r7, [r0, r1]
    f438:	add	r1, r1, #1
    f43c:	b	f480 <rb_base64_decode+0xcc>
    f440:	add	ip, r1, #1
    f444:	lsl	r7, r4, #6
    f448:	strb	r7, [r0, ip]
    f44c:	ldrb	r7, [r0, r1]
    f450:	orr	r7, r7, r4, lsr #2
    f454:	b	f46c <rb_base64_decode+0xb8>
    f458:	add	ip, r1, #1
    f45c:	lsl	r7, r4, #4
    f460:	strb	r7, [r0, ip]
    f464:	ldrb	r7, [r0, r1]
    f468:	orr	r7, r7, r4, lsr #4
    f46c:	strb	r7, [r0, r1]
    f470:	mov	r1, ip
    f474:	b	f480 <rb_base64_decode+0xcc>
    f478:	lsl	r7, r4, #2
    f47c:	strb	r7, [r0, r1]
    f480:	add	r2, r2, #1
    f484:	ldrb	r4, [r6], #1
    f488:	cmp	r4, #0
    f48c:	bne	f3f0 <rb_base64_decode+0x3c>
    f490:	b	f4d8 <rb_base64_decode+0x124>
    f494:	cmp	r4, #61	; 0x3d
    f498:	bne	f4d8 <rb_base64_decode+0x124>
    f49c:	and	r2, r2, #3
    f4a0:	cmp	r2, #3
    f4a4:	beq	f4c4 <rb_base64_decode+0x110>
    f4a8:	cmp	r2, #2
    f4ac:	beq	f4cc <rb_base64_decode+0x118>
    f4b0:	cmp	r2, #1
    f4b4:	bne	f4d8 <rb_base64_decode+0x124>
    f4b8:	bl	500c <free@plt>
    f4bc:	mov	r0, #0
    f4c0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
    f4c4:	mov	r2, r1
    f4c8:	b	f4d0 <rb_base64_decode+0x11c>
    f4cc:	add	r2, r1, #1
    f4d0:	mov	r3, #0
    f4d4:	strb	r3, [r0, r2]
    f4d8:	mov	r2, #0
    f4dc:	strb	r2, [r0, r1]
    f4e0:	str	r1, [r8]
    f4e4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
    f4e8:	bl	5288 <rb_outofmemory@plt>
    f4ec:	.word	0x000073ae

0000f4f0 <rb_outofmemory>:
    f4f0:	push	{fp, lr}
    f4f4:	mov	fp, sp
    f4f8:	ldr	r0, [pc, #48]	; f530 <rb_outofmemory+0x40>
    f4fc:	add	r0, pc, r0
    f500:	ldrb	r1, [r0]
    f504:	cmp	r1, #1
    f508:	bne	f510 <rb_outofmemory+0x20>
    f50c:	bl	4d00 <abort@plt>
    f510:	mov	r1, #1
    f514:	strb	r1, [r0]
    f518:	ldr	r0, [pc, #20]	; f534 <rb_outofmemory+0x44>
    f51c:	add	r0, pc, r0
    f520:	bl	5228 <rb_lib_log@plt>
    f524:	ldr	r0, [pc, #12]	; f538 <rb_outofmemory+0x48>
    f528:	add	r0, pc, r0
    f52c:	bl	5360 <rb_lib_restart@plt>
    f530:	.word	0x0002bdd8
    f534:	.word	0x0000747a
    f538:	.word	0x00007492

0000f53c <rb_linebuf_init>:
    f53c:	push	{fp, lr}
    f540:	mov	fp, sp
    f544:	ldr	r2, [pc, #28]	; f568 <rb_linebuf_init+0x2c>
    f548:	mov	r1, r0
    f54c:	movw	r0, #1036	; 0x40c
    f550:	add	r2, pc, r2
    f554:	bl	53b4 <rb_bh_create@plt>
    f558:	ldr	r1, [pc, #12]	; f56c <rb_linebuf_init+0x30>
    f55c:	add	r1, pc, r1
    f560:	str	r0, [r1]
    f564:	pop	{fp, pc}
    f568:	.word	0x00007478
    f56c:	.word	0x0002bd7c

0000f570 <rb_linebuf_newbuf>:
    f570:	vmov.i32	q8, #0	; 0x00000000
    f574:	mov	r1, #12
    f578:	vst1.32	{d16-d17}, [r0], r1
    f57c:	vst1.32	{d16-d17}, [r0]
    f580:	bx	lr

0000f584 <rb_linebuf_donebuf>:
    f584:	push	{r4, sl, fp, lr}
    f588:	add	fp, sp, #8
    f58c:	ldr	r2, [r0]
    f590:	cmp	r2, #0
    f594:	popeq	{r4, sl, fp, pc}
    f598:	mov	r4, r0
    f59c:	ldr	r1, [r2]
    f5a0:	mov	r0, r4
    f5a4:	bl	f5b8 <rb_linebuf_done_line>
    f5a8:	ldr	r2, [r4]
    f5ac:	cmp	r2, #0
    f5b0:	bne	f59c <rb_linebuf_donebuf+0x18>
    f5b4:	pop	{r4, sl, fp, pc}

0000f5b8 <rb_linebuf_done_line>:
    f5b8:	push	{r4, r5, fp, lr}
    f5bc:	add	fp, sp, #8
    f5c0:	mov	r5, r0
    f5c4:	ldr	r0, [r2, #8]
    f5c8:	mov	r4, r1
    f5cc:	ldr	r1, [r2, #4]
    f5d0:	mov	r3, r5
    f5d4:	cmp	r0, #0
    f5d8:	streq	r1, [r5, #4]
    f5dc:	strne	r1, [r0, #4]
    f5e0:	ldrne	r1, [r2, #4]
    f5e4:	cmp	r1, #0
    f5e8:	addne	r3, r1, #8
    f5ec:	str	r0, [r3]
    f5f0:	mov	r0, #0
    f5f4:	str	r0, [r2, #4]
    f5f8:	str	r0, [r2, #8]
    f5fc:	ldr	r0, [r5, #8]
    f600:	sub	r0, r0, #1
    f604:	str	r0, [r5, #8]
    f608:	mov	r0, r2
    f60c:	bl	5150 <rb_free_rb_dlink_node@plt>
    f610:	ldr	r1, [r5, #16]
    f614:	ldr	r2, [r5, #24]
    f618:	ldr	r0, [r5, #12]
    f61c:	sub	r1, r1, #1
    f620:	sub	r2, r2, #1
    f624:	str	r1, [r5, #16]
    f628:	ldr	r1, [r4, #1028]	; 0x404
    f62c:	str	r2, [r5, #24]
    f630:	sub	r0, r0, r1
    f634:	str	r0, [r5, #12]
    f638:	ldr	r0, [r4, #1032]	; 0x408
    f63c:	subs	r0, r0, #1
    f640:	str	r0, [r4, #1032]	; 0x408
    f644:	popne	{r4, r5, fp, pc}
    f648:	ldr	r0, [pc, #36]	; f674 <rb_linebuf_done_line+0xbc>
    f64c:	ldr	r0, [pc, r0]
    f650:	ldr	r1, [pc, #32]	; f678 <rb_linebuf_done_line+0xc0>
    f654:	sub	r0, r0, #1
    f658:	add	r1, pc, r1
    f65c:	str	r0, [r1]
    f660:	mov	r1, r4
    f664:	ldr	r0, [pc, #16]	; f67c <rb_linebuf_done_line+0xc4>
    f668:	ldr	r0, [pc, r0]
    f66c:	pop	{r4, r5, fp, lr}
    f670:	b	51e0 <rb_bh_free@plt>
    f674:	.word	0x0002dc94
    f678:	.word	0x0002dc88
    f67c:	.word	0x0002bc70

0000f680 <rb_linebuf_parse>:
    f680:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
    f684:	add	fp, sp, #24
    f688:	mov	r7, r0
    f68c:	ldr	r0, [r0, #4]
    f690:	mov	r8, r3
    f694:	mov	r5, r2
    f698:	mov	r6, r1
    f69c:	cmp	r0, #0
    f6a0:	beq	f6c4 <rb_linebuf_parse+0x44>
    f6a4:	ldr	r1, [r0]
    f6a8:	mov	r0, r7
    f6ac:	mov	r2, r6
    f6b0:	mov	r3, r5
    f6b4:	cmp	r8, #0
    f6b8:	beq	f6cc <rb_linebuf_parse+0x4c>
    f6bc:	bl	f930 <rb_linebuf_copy_raw>
    f6c0:	b	f6d0 <rb_linebuf_parse+0x50>
    f6c4:	mov	r4, #0
    f6c8:	b	f6f0 <rb_linebuf_parse+0x70>
    f6cc:	bl	f750 <rb_linebuf_copy_line>
    f6d0:	cmn	r0, #1
    f6d4:	beq	f744 <rb_linebuf_parse+0xc4>
    f6d8:	mov	r4, #1
    f6dc:	cmp	r0, r5
    f6e0:	beq	f748 <rb_linebuf_parse+0xc8>
    f6e4:	add	r6, r6, r0
    f6e8:	sub	r5, r5, r0
    f6ec:	mov	r4, #1
    f6f0:	cmp	r5, #1
    f6f4:	blt	f748 <rb_linebuf_parse+0xc8>
    f6f8:	mov	r0, r7
    f6fc:	bl	fa90 <rb_linebuf_new_line>
    f700:	mov	r1, r0
    f704:	mov	r0, r7
    f708:	mov	r2, r6
    f70c:	mov	r3, r5
    f710:	cmp	r8, #0
    f714:	beq	f720 <rb_linebuf_parse+0xa0>
    f718:	bl	f930 <rb_linebuf_copy_raw>
    f71c:	b	f724 <rb_linebuf_parse+0xa4>
    f720:	bl	f750 <rb_linebuf_copy_line>
    f724:	cmn	r0, #1
    f728:	beq	f744 <rb_linebuf_parse+0xc4>
    f72c:	sub	r5, r5, r0
    f730:	add	r6, r6, r0
    f734:	add	r4, r4, #1
    f738:	cmp	r5, #0
    f73c:	bgt	f6f8 <rb_linebuf_parse+0x78>
    f740:	b	f748 <rb_linebuf_parse+0xc8>
    f744:	mvn	r4, #0
    f748:	mov	r0, r4
    f74c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}

0000f750 <rb_linebuf_copy_line>:
    f750:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
    f754:	add	fp, sp, #24
    f758:	mov	r7, #0
    f75c:	mov	r8, r0
    f760:	strb	r7, [r1, #1026]	; 0x402
    f764:	ldrb	r0, [r1, #1025]	; 0x401
    f768:	cmp	r0, #1
    f76c:	beq	f928 <rb_linebuf_copy_line+0x1d8>
    f770:	ldr	r9, [r1, #1028]	; 0x404
    f774:	mov	r4, r1
    f778:	mov	r7, #0
    f77c:	cmp	r3, #0
    f780:	beq	f7e4 <rb_linebuf_copy_line+0x94>
    f784:	rsb	r0, r3, #0
    f788:	add	r1, r2, #1
    f78c:	ldrb	r5, [r1, #-1]
    f790:	cmp	r5, #13
    f794:	cmpne	r5, #10
    f798:	beq	f7ac <rb_linebuf_copy_line+0x5c>
    f79c:	adds	r0, r0, #1
    f7a0:	add	r1, r1, #1
    f7a4:	bne	f78c <rb_linebuf_copy_line+0x3c>
    f7a8:	b	f7e4 <rb_linebuf_copy_line+0x94>
    f7ac:	add	r6, r0, #1
    f7b0:	mov	r7, #0
    f7b4:	b	f7c8 <rb_linebuf_copy_line+0x78>
    f7b8:	cmp	r6, r7
    f7bc:	beq	f7e0 <rb_linebuf_copy_line+0x90>
    f7c0:	ldrb	r5, [r1, -r7]
    f7c4:	sub	r7, r7, #1
    f7c8:	uxtb	r5, r5
    f7cc:	cmp	r5, #13
    f7d0:	cmpne	r5, #10
    f7d4:	beq	f7b8 <rb_linebuf_copy_line+0x68>
    f7d8:	sub	r7, r7, r0
    f7dc:	b	f7e4 <rb_linebuf_copy_line+0x94>
    f7e0:	mov	r7, #0
    f7e4:	sub	r7, r3, r7
    f7e8:	cmn	r7, #1
    f7ec:	beq	f870 <rb_linebuf_copy_line+0x120>
    f7f0:	movw	r0, #1022	; 0x3fe
    f7f4:	add	r6, r4, r9
    f7f8:	sub	r5, r0, r9
    f7fc:	cmp	r7, r5
    f800:	ble	f878 <rb_linebuf_copy_line+0x128>
    f804:	mov	r1, r2
    f808:	mov	r0, r6
    f80c:	mov	r2, r5
    f810:	bl	5114 <memcpy@plt>
    f814:	mov	r0, #0
    f818:	cmp	r5, #0
    f81c:	strb	r0, [r4, #1022]	; 0x3fe
    f820:	beq	f850 <rb_linebuf_copy_line+0x100>
    f824:	movw	r1, #1022	; 0x3fe
    f828:	movw	r2, #1021	; 0x3fd
    f82c:	sub	r1, r9, r1
    f830:	add	r2, r4, r2
    f834:	ldrb	r3, [r2]
    f838:	cmp	r3, #13
    f83c:	cmpne	r3, #10
    f840:	bne	f850 <rb_linebuf_copy_line+0x100>
    f844:	strb	r0, [r2], #-1
    f848:	adds	r1, r1, #1
    f84c:	bne	f834 <rb_linebuf_copy_line+0xe4>
    f850:	movw	r0, #1022	; 0x3fe
    f854:	mov	r1, #1
    f858:	str	r0, [r4, #1028]	; 0x404
    f85c:	strb	r1, [r4, #1025]	; 0x401
    f860:	ldr	r1, [r8, #12]
    f864:	add	r0, r1, r0
    f868:	str	r0, [r8, #12]
    f86c:	b	f928 <rb_linebuf_copy_line+0x1d8>
    f870:	mvn	r7, #0
    f874:	b	f928 <rb_linebuf_copy_line+0x1d8>
    f878:	mov	r1, r2
    f87c:	mov	r0, r6
    f880:	mov	r2, r7
    f884:	bl	5114 <memcpy@plt>
    f888:	mov	r0, #0
    f88c:	mov	r1, r6
    f890:	strb	r0, [r1, r7]!
    f894:	ldrb	r2, [r1, #-1]
    f898:	cmp	r2, #10
    f89c:	cmpne	r2, #13
    f8a0:	bne	f908 <rb_linebuf_copy_line+0x1b8>
    f8a4:	cmp	r7, #0
    f8a8:	beq	f8e8 <rb_linebuf_copy_line+0x198>
    f8ac:	sub	r1, r6, #2
    f8b0:	mov	r6, r7
    f8b4:	b	f8d4 <rb_linebuf_copy_line+0x184>
    f8b8:	add	r2, r1, r6
    f8bc:	mov	r0, #0
    f8c0:	subs	r3, r6, #1
    f8c4:	strb	r0, [r2, #1]
    f8c8:	beq	f8e8 <rb_linebuf_copy_line+0x198>
    f8cc:	ldrb	r2, [r1, r6]
    f8d0:	mov	r6, r3
    f8d4:	uxtb	r0, r2
    f8d8:	cmp	r0, #13
    f8dc:	cmpne	r0, #10
    f8e0:	beq	f8b8 <rb_linebuf_copy_line+0x168>
    f8e4:	mov	r0, r6
    f8e8:	mov	r1, #1
    f8ec:	strb	r1, [r4, #1025]	; 0x401
    f8f0:	ldr	r1, [r8, #12]
    f8f4:	add	r1, r1, r0
    f8f8:	str	r1, [r8, #12]
    f8fc:	ldr	r1, [r4, #1028]	; 0x404
    f900:	add	r0, r1, r0
    f904:	b	f924 <rb_linebuf_copy_line+0x1d4>
    f908:	ldr	r0, [r8, #12]
    f90c:	add	r0, r0, r7
    f910:	str	r0, [r8, #12]
    f914:	mov	r0, #0
    f918:	strb	r0, [r4, #1025]	; 0x401
    f91c:	ldr	r0, [r4, #1028]	; 0x404
    f920:	add	r0, r0, r7
    f924:	str	r0, [r4, #1028]	; 0x404
    f928:	mov	r0, r7
    f92c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}

0000f930 <rb_linebuf_copy_raw>:
    f930:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
    f934:	add	fp, sp, #24
    f938:	mov	r8, r0
    f93c:	mov	r0, #1
    f940:	mov	r6, #0
    f944:	strb	r0, [r1, #1026]	; 0x402
    f948:	ldrb	r0, [r1, #1025]	; 0x401
    f94c:	cmp	r0, #1
    f950:	beq	fa88 <rb_linebuf_copy_raw+0x158>
    f954:	ldr	ip, [r1, #1028]	; 0x404
    f958:	mov	r4, r1
    f95c:	mov	r6, #0
    f960:	cmp	r3, #0
    f964:	beq	f9c8 <rb_linebuf_copy_raw+0x98>
    f968:	rsb	r1, r3, #0
    f96c:	add	r7, r2, #1
    f970:	ldrb	r0, [r7, #-1]
    f974:	cmp	r0, #13
    f978:	cmpne	r0, #10
    f97c:	beq	f990 <rb_linebuf_copy_raw+0x60>
    f980:	adds	r1, r1, #1
    f984:	add	r7, r7, #1
    f988:	bne	f970 <rb_linebuf_copy_raw+0x40>
    f98c:	b	f9c8 <rb_linebuf_copy_raw+0x98>
    f990:	add	r5, r1, #1
    f994:	mov	r6, #0
    f998:	b	f9ac <rb_linebuf_copy_raw+0x7c>
    f99c:	cmp	r5, r6
    f9a0:	beq	f9c4 <rb_linebuf_copy_raw+0x94>
    f9a4:	ldrb	r0, [r7, -r6]
    f9a8:	sub	r6, r6, #1
    f9ac:	uxtb	r0, r0
    f9b0:	cmp	r0, #13
    f9b4:	cmpne	r0, #10
    f9b8:	beq	f99c <rb_linebuf_copy_raw+0x6c>
    f9bc:	sub	r6, r6, r1
    f9c0:	b	f9c8 <rb_linebuf_copy_raw+0x98>
    f9c4:	mov	r6, #0
    f9c8:	sub	r6, r3, r6
    f9cc:	cmn	r6, #1
    f9d0:	beq	fa20 <rb_linebuf_copy_raw+0xf0>
    f9d4:	movw	r9, #1022	; 0x3fe
    f9d8:	add	r5, r4, ip
    f9dc:	sub	r7, r9, ip
    f9e0:	cmp	r6, r7
    f9e4:	ble	fa28 <rb_linebuf_copy_raw+0xf8>
    f9e8:	mov	r1, r2
    f9ec:	mov	r0, r5
    f9f0:	mov	r2, r7
    f9f4:	bl	5114 <memcpy@plt>
    f9f8:	mov	r0, #0
    f9fc:	mov	r6, r7
    fa00:	strb	r0, [r4, #1022]	; 0x3fe
    fa04:	mov	r0, #1
    fa08:	strb	r0, [r4, #1025]	; 0x401
    fa0c:	str	r9, [r4, #1028]	; 0x404
    fa10:	ldr	r0, [r8, #12]
    fa14:	add	r0, r0, r9
    fa18:	str	r0, [r8, #12]
    fa1c:	b	fa88 <rb_linebuf_copy_raw+0x158>
    fa20:	mvn	r6, #0
    fa24:	b	fa88 <rb_linebuf_copy_raw+0x158>
    fa28:	mov	r1, r2
    fa2c:	mov	r0, r5
    fa30:	mov	r2, r6
    fa34:	bl	5114 <memcpy@plt>
    fa38:	mov	r0, #0
    fa3c:	strb	r0, [r5, r6]!
    fa40:	ldrb	r0, [r5, #-1]
    fa44:	cmp	r0, #10
    fa48:	cmpne	r0, #13
    fa4c:	bne	fa68 <rb_linebuf_copy_raw+0x138>
    fa50:	mov	r0, #1
    fa54:	strb	r0, [r4, #1025]	; 0x401
    fa58:	ldr	r0, [r8, #12]
    fa5c:	add	r0, r0, r6
    fa60:	str	r0, [r8, #12]
    fa64:	b	fa7c <rb_linebuf_copy_raw+0x14c>
    fa68:	ldr	r0, [r8, #12]
    fa6c:	add	r0, r0, r6
    fa70:	str	r0, [r8, #12]
    fa74:	mov	r0, #0
    fa78:	strb	r0, [r4, #1025]	; 0x401
    fa7c:	ldr	r0, [r4, #1028]	; 0x404
    fa80:	add	r0, r0, r6
    fa84:	str	r0, [r4, #1028]	; 0x404
    fa88:	mov	r0, r6
    fa8c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}

0000fa90 <rb_linebuf_new_line>:
    fa90:	push	{r4, r5, fp, lr}
    fa94:	add	fp, sp, #8
    fa98:	mov	r4, r0
    fa9c:	ldr	r0, [pc, #164]	; fb48 <rb_linebuf_new_line+0xb8>
    faa0:	ldr	r0, [pc, r0]
    faa4:	bl	5258 <rb_bh_alloc@plt>
    faa8:	mov	r5, r0
    faac:	cmp	r0, #0
    fab0:	beq	fb38 <rb_linebuf_new_line+0xa8>
    fab4:	ldr	r0, [pc, #144]	; fb4c <rb_linebuf_new_line+0xbc>
    fab8:	ldr	r0, [pc, r0]
    fabc:	ldr	r1, [pc, #140]	; fb50 <rb_linebuf_new_line+0xc0>
    fac0:	add	r0, r0, #1
    fac4:	add	r1, pc, r1
    fac8:	str	r0, [r1]
    facc:	bl	5474 <rb_make_rb_dlink_node@plt>
    fad0:	mov	r1, #0
    fad4:	str	r5, [r0]
    fad8:	str	r1, [r0, #8]
    fadc:	ldr	r1, [r4, #4]
    fae0:	cmp	r1, #0
    fae4:	str	r1, [r0, #4]
    fae8:	beq	faf8 <rb_linebuf_new_line+0x68>
    faec:	add	r1, r1, #8
    faf0:	str	r0, [r1]
    faf4:	b	fb04 <rb_linebuf_new_line+0x74>
    faf8:	ldr	r1, [r4]
    fafc:	cmp	r1, #0
    fb00:	beq	fb40 <rb_linebuf_new_line+0xb0>
    fb04:	str	r0, [r4, #4]
    fb08:	ldr	r0, [r4, #8]
    fb0c:	add	r0, r0, #1
    fb10:	str	r0, [r4, #8]
    fb14:	ldr	r0, [r5, #1032]	; 0x408
    fb18:	add	r0, r0, #1
    fb1c:	str	r0, [r5, #1032]	; 0x408
    fb20:	ldr	r0, [r4, #16]
    fb24:	ldr	r1, [r4, #24]
    fb28:	add	r0, r0, #1
    fb2c:	str	r0, [r4, #16]
    fb30:	add	r0, r1, #1
    fb34:	str	r0, [r4, #24]
    fb38:	mov	r0, r5
    fb3c:	pop	{r4, r5, fp, pc}
    fb40:	mov	r1, r4
    fb44:	b	faf0 <rb_linebuf_new_line+0x60>
    fb48:	.word	0x0002b838
    fb4c:	.word	0x0002d828
    fb50:	.word	0x0002d81c

0000fb54 <rb_linebuf_get>:
    fb54:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
    fb58:	add	fp, sp, #24
    fb5c:	mov	r4, r0
    fb60:	ldr	r0, [r0]
    fb64:	mov	r7, #0
    fb68:	cmp	r0, #0
    fb6c:	beq	fc14 <rb_linebuf_get+0xc0>
    fb70:	ldr	r6, [r0]
    fb74:	mov	r9, r1
    fb78:	cmp	r3, #0
    fb7c:	bne	fb8c <rb_linebuf_get+0x38>
    fb80:	ldrb	r0, [r6, #1025]	; 0x401
    fb84:	cmp	r0, #0
    fb88:	beq	fc14 <rb_linebuf_get+0xc0>
    fb8c:	ldr	r3, [r6, #1028]	; 0x404
    fb90:	ldr	r8, [fp, #8]
    fb94:	cmp	r3, r2
    fb98:	subgt	r3, r2, #1
    fb9c:	cmp	r8, #0
    fba0:	bne	fbe4 <rb_linebuf_get+0x90>
    fba4:	ldrb	r0, [r6, #1026]	; 0x402
    fba8:	cmp	r0, #0
    fbac:	beq	fbe4 <rb_linebuf_get+0x90>
    fbb0:	mov	r7, #0
    fbb4:	cmp	r3, #0
    fbb8:	beq	fbe8 <rb_linebuf_get+0x94>
    fbbc:	rsb	r0, r3, #0
    fbc0:	mov	r1, r6
    fbc4:	ldrb	r2, [r1]
    fbc8:	cmp	r2, #13
    fbcc:	cmpne	r2, #10
    fbd0:	bne	fc1c <rb_linebuf_get+0xc8>
    fbd4:	adds	r0, r0, #1
    fbd8:	add	r1, r1, #1
    fbdc:	bne	fbc4 <rb_linebuf_get+0x70>
    fbe0:	b	fbec <rb_linebuf_get+0x98>
    fbe4:	mov	r7, r3
    fbe8:	mov	r1, r6
    fbec:	mov	r0, r9
    fbf0:	mov	r2, r7
    fbf4:	bl	5114 <memcpy@plt>
    fbf8:	cmp	r8, #0
    fbfc:	mov	r1, r6
    fc00:	moveq	r0, #0
    fc04:	strbeq	r0, [r9, r7]
    fc08:	mov	r0, r4
    fc0c:	ldr	r2, [r4]
    fc10:	bl	f5b8 <rb_linebuf_done_line>
    fc14:	mov	r0, r7
    fc18:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
    fc1c:	add	r2, r6, r3
    fc20:	add	r3, r0, #1
    fc24:	mov	r7, #0
    fc28:	sub	r2, r2, #1
    fc2c:	ldrb	r5, [r2, r7]
    fc30:	cmp	r5, #13
    fc34:	cmpne	r5, #10
    fc38:	bne	fc54 <rb_linebuf_get+0x100>
    fc3c:	sub	r5, r7, #1
    fc40:	cmp	r3, r7
    fc44:	mov	r7, r5
    fc48:	bne	fc2c <rb_linebuf_get+0xd8>
    fc4c:	mov	r7, #0
    fc50:	b	fbec <rb_linebuf_get+0x98>
    fc54:	sub	r7, r7, r0
    fc58:	b	fbec <rb_linebuf_get+0x98>

0000fc5c <rb_linebuf_attach>:
    fc5c:	push	{r4, r5, r6, r7, fp, lr}
    fc60:	add	fp, sp, #16
    fc64:	ldr	r5, [r1]
    fc68:	cmp	r5, #0
    fc6c:	popeq	{r4, r5, r6, r7, fp, pc}
    fc70:	mov	r4, r0
    fc74:	mov	r6, #0
    fc78:	b	fc84 <rb_linebuf_attach+0x28>
    fc7c:	mov	r1, r4
    fc80:	b	fca8 <rb_linebuf_attach+0x4c>
    fc84:	ldr	r7, [r5]
    fc88:	bl	5474 <rb_make_rb_dlink_node@plt>
    fc8c:	str	r7, [r0]
    fc90:	str	r6, [r0, #8]
    fc94:	ldr	r1, [r4, #4]
    fc98:	cmp	r1, #0
    fc9c:	str	r1, [r0, #4]
    fca0:	beq	fcb0 <rb_linebuf_attach+0x54>
    fca4:	add	r1, r1, #8
    fca8:	str	r0, [r1]
    fcac:	b	fcbc <rb_linebuf_attach+0x60>
    fcb0:	ldr	r1, [r4]
    fcb4:	cmp	r1, #0
    fcb8:	beq	fc7c <rb_linebuf_attach+0x20>
    fcbc:	str	r0, [r4, #4]
    fcc0:	add	r2, r4, #8
    fcc4:	ldm	r2, {r0, r1, r2}
    fcc8:	ldr	r3, [r4, #24]
    fccc:	add	r0, r0, #1
    fcd0:	str	r0, [r4, #8]
    fcd4:	add	r0, r2, #1
    fcd8:	add	r2, r3, #1
    fcdc:	str	r0, [r4, #16]
    fce0:	ldr	r0, [r7, #1028]	; 0x404
    fce4:	str	r2, [r4, #24]
    fce8:	add	r0, r1, r0
    fcec:	str	r0, [r4, #12]
    fcf0:	ldr	r0, [r7, #1032]	; 0x408
    fcf4:	add	r0, r0, #1
    fcf8:	str	r0, [r7, #1032]	; 0x408
    fcfc:	ldr	r5, [r5, #8]
    fd00:	cmp	r5, #0
    fd04:	bne	fc84 <rb_linebuf_attach+0x28>
    fd08:	pop	{r4, r5, r6, r7, fp, pc}

0000fd0c <rb_linebuf_put>:
    fd0c:	push	{r4, r5, r6, sl, fp, lr}
    fd10:	add	fp, sp, #16
    fd14:	mov	r4, r1
    fd18:	mov	r5, r0
    fd1c:	bl	fa90 <rb_linebuf_new_line>
    fd20:	movw	r1, #1023	; 0x3ff
    fd24:	mov	r2, r4
    fd28:	mov	r6, r0
    fd2c:	bl	4fb8 <rb_fsnprint@plt>
    fd30:	bic	r0, r0, r0, asr #31
    fd34:	movw	r1, #1022	; 0x3fe
    fd38:	mov	r2, #0
    fd3c:	cmp	r0, r1
    fd40:	movcc	r1, r0
    fd44:	add	r0, r1, #2
    fd48:	add	r1, r6, r1
    fd4c:	strb	r2, [r6, r0]
    fd50:	movw	r2, #2573	; 0xa0d
    fd54:	strh	r2, [r1]
    fd58:	mov	r1, #1
    fd5c:	str	r0, [r6, #1028]	; 0x404
    fd60:	strb	r1, [r6, #1025]	; 0x401
    fd64:	ldr	r1, [r5, #12]
    fd68:	add	r0, r1, r0
    fd6c:	str	r0, [r5, #12]
    fd70:	pop	{r4, r5, r6, sl, fp, pc}

0000fd74 <rb_linebuf_flush>:
    fd74:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    fd78:	add	fp, sp, #28
    fd7c:	sub	sp, sp, #4
    fd80:	mov	sl, r1
    fd84:	mov	r5, r0
    fd88:	bl	4df0 <rb_fd_ssl@plt>
    fd8c:	cmp	r0, #0
    fd90:	beq	fe08 <rb_linebuf_flush+0x94>
    fd94:	ldr	r0, [sl]
    fd98:	cmp	r0, #0
    fd9c:	beq	feac <rb_linebuf_flush+0x138>
    fda0:	ldr	r6, [r0]
    fda4:	ldrb	r0, [r6, #1025]	; 0x401
    fda8:	cmp	r0, #0
    fdac:	beq	feac <rb_linebuf_flush+0x138>
    fdb0:	ldr	r0, [sl, #20]
    fdb4:	ldr	r2, [r6, #1028]	; 0x404
    fdb8:	add	r1, r6, r0
    fdbc:	sub	r2, r2, r0
    fdc0:	mov	r0, r5
    fdc4:	bl	4f7c <rb_write@plt>
    fdc8:	mov	r9, r0
    fdcc:	cmp	r0, #1
    fdd0:	blt	febc <rb_linebuf_flush+0x148>
    fdd4:	ldr	r0, [sl, #20]
    fdd8:	add	r0, r0, r9
    fddc:	str	r0, [sl, #20]
    fde0:	ldr	r1, [r6, #1028]	; 0x404
    fde4:	cmp	r0, r1
    fde8:	bne	febc <rb_linebuf_flush+0x148>
    fdec:	mov	r0, #0
    fdf0:	mov	r1, r6
    fdf4:	str	r0, [sl, #20]
    fdf8:	mov	r0, sl
    fdfc:	ldr	r2, [sl]
    fe00:	bl	f5b8 <rb_linebuf_done_line>
    fe04:	b	febc <rb_linebuf_flush+0x148>
    fe08:	ldr	r6, [pc, #320]	; ff50 <rb_linebuf_flush+0x1dc>
    fe0c:	mov	r1, #0
    fe10:	mov	r2, #8192	; 0x2000
    fe14:	add	r6, pc, r6
    fe18:	mov	r0, r6
    fe1c:	bl	4f4c <memset@plt>
    fe20:	ldr	r0, [sl]
    fe24:	cmp	r0, #0
    fe28:	beq	feac <rb_linebuf_flush+0x138>
    fe2c:	ldr	r1, [r0]
    fe30:	ldrb	r2, [r1, #1025]	; 0x401
    fe34:	cmp	r2, #0
    fe38:	beq	feac <rb_linebuf_flush+0x138>
    fe3c:	ldr	r2, [sl, #20]
    fe40:	add	r4, r1, r2
    fe44:	ldr	r1, [r1, #1028]	; 0x404
    fe48:	str	r4, [r6]
    fe4c:	sub	r1, r1, r2
    fe50:	str	r1, [r6, #4]
    fe54:	ldr	r0, [r0, #8]
    fe58:	cmp	r0, #0
    fe5c:	beq	fec8 <rb_linebuf_flush+0x154>
    fe60:	mov	r2, #0
    fe64:	movw	r1, #1022	; 0x3fe
    fe68:	ldr	r7, [r0]
    fe6c:	ldrb	r3, [r7, #1025]	; 0x401
    fe70:	cmp	r3, #0
    fe74:	beq	fed0 <rb_linebuf_flush+0x15c>
    fe78:	add	r3, r2, #1
    fe7c:	add	r2, r6, r2, lsl #3
    fe80:	str	r7, [r2, #8]
    fe84:	cmp	r3, r1
    fe88:	ldr	r7, [r7, #1028]	; 0x404
    fe8c:	str	r7, [r2, #12]
    fe90:	bhi	fea4 <rb_linebuf_flush+0x130>
    fe94:	ldr	r0, [r0, #8]
    fe98:	mov	r2, r3
    fe9c:	cmp	r0, #0
    fea0:	bne	fe68 <rb_linebuf_flush+0xf4>
    fea4:	add	r8, r3, #1
    fea8:	b	fed4 <rb_linebuf_flush+0x160>
    feac:	bl	55e8 <__errno_location@plt>
    feb0:	mov	r1, #11
    feb4:	mvn	r9, #0
    feb8:	str	r1, [r0]
    febc:	mov	r0, r9
    fec0:	sub	sp, fp, #28
    fec4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    fec8:	mov	r8, #1
    fecc:	b	fed4 <rb_linebuf_flush+0x160>
    fed0:	add	r8, r2, #1
    fed4:	ldr	r1, [pc, #120]	; ff54 <rb_linebuf_flush+0x1e0>
    fed8:	mov	r0, r5
    fedc:	mov	r2, r8
    fee0:	add	r1, pc, r1
    fee4:	bl	53d8 <rb_writev@plt>
    fee8:	mov	r9, r0
    feec:	cmp	r0, #1
    fef0:	blt	febc <rb_linebuf_flush+0x148>
    fef4:	ldr	r7, [sl]
    fef8:	ldr	r0, [sl, #20]
    fefc:	mov	r6, #0
    ff00:	mov	r5, r9
    ff04:	ldr	r1, [r7]
    ff08:	ldr	r2, [r1, #1028]	; 0x404
    ff0c:	sub	r4, r2, r0
    ff10:	cmp	r5, r4
    ff14:	blt	ff44 <rb_linebuf_flush+0x1d0>
    ff18:	ldr	r2, [sl]
    ff1c:	ldr	r7, [r7, #8]
    ff20:	mov	r0, sl
    ff24:	bl	f5b8 <rb_linebuf_done_line>
    ff28:	add	r6, r6, #1
    ff2c:	mov	r0, #0
    ff30:	sub	r5, r5, r4
    ff34:	cmp	r6, r8
    ff38:	str	r0, [sl, #20]
    ff3c:	bcc	ff04 <rb_linebuf_flush+0x190>
    ff40:	b	febc <rb_linebuf_flush+0x148>
    ff44:	add	r0, r0, r5
    ff48:	str	r0, [sl, #20]
    ff4c:	b	febc <rb_linebuf_flush+0x148>
    ff50:	.word	0x0002b4cc
    ff54:	.word	0x0002b400

0000ff58 <rb_count_rb_linebuf_memory>:
    ff58:	push	{fp, lr}
    ff5c:	mov	fp, sp
    ff60:	sub	sp, sp, #8
    ff64:	mov	r3, r1
    ff68:	mov	r1, r0
    ff6c:	ldr	r0, [pc, #24]	; ff8c <rb_count_rb_linebuf_memory+0x34>
    ff70:	mov	r2, #0
    ff74:	ldr	r0, [pc, r0]
    ff78:	str	r2, [sp]
    ff7c:	mov	r2, #0
    ff80:	bl	560c <rb_bh_usage@plt>
    ff84:	mov	sp, fp
    ff88:	pop	{fp, pc}
    ff8c:	.word	0x0002b364

0000ff90 <rb_init_rb_dlink_nodes>:
    ff90:	push	{fp, lr}
    ff94:	mov	fp, sp
    ff98:	ldr	r2, [pc, #36]	; ffc4 <rb_init_rb_dlink_nodes+0x34>
    ff9c:	mov	r1, r0
    ffa0:	mov	r0, #12
    ffa4:	add	r2, pc, r2
    ffa8:	bl	53b4 <rb_bh_create@plt>
    ffac:	ldr	r1, [pc, #20]	; ffc8 <rb_init_rb_dlink_nodes+0x38>
    ffb0:	cmp	r0, #0
    ffb4:	add	r1, pc, r1
    ffb8:	str	r0, [r1]
    ffbc:	popne	{fp, pc}
    ffc0:	bl	5288 <rb_outofmemory@plt>
    ffc4:	.word	0x00006a37
    ffc8:	.word	0x0002d330

0000ffcc <rb_make_rb_dlink_node>:
    ffcc:	ldr	r0, [pc, #4]	; ffd8 <rb_make_rb_dlink_node+0xc>
    ffd0:	ldr	r0, [pc, r0]
    ffd4:	b	5258 <rb_bh_alloc@plt>
    ffd8:	.word	0x0002d314

0000ffdc <rb_free_rb_dlink_node>:
    ffdc:	mov	r1, r0
    ffe0:	ldr	r0, [pc, #4]	; ffec <rb_free_rb_dlink_node+0x10>
    ffe4:	ldr	r0, [pc, r0]
    ffe8:	b	51e0 <rb_bh_free@plt>
    ffec:	.word	0x0002d300

0000fff0 <rb_string_to_array>:
    fff0:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
    fff4:	add	fp, sp, #24
    fff8:	mov	r4, r1
    fffc:	mov	r1, r0
   10000:	mov	r0, #0
   10004:	cmp	r1, #0
   10008:	ldrbne	r3, [r1]
   1000c:	cmpne	r3, #0
   10010:	bne	1001c <rb_string_to_array+0x2c>
   10014:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   10018:	ldrb	r3, [r1, #1]!
   1001c:	uxtb	r7, r3
   10020:	cmp	r7, #32
   10024:	beq	10018 <rb_string_to_array+0x28>
   10028:	cmp	r7, #0
   1002c:	beq	10014 <rb_string_to_array+0x24>
   10030:	sub	r6, r2, #1
   10034:	mov	r8, #0
   10038:	mov	r0, #0
   1003c:	mov	r5, r0
   10040:	uxtb	r0, r3
   10044:	cmp	r0, #58	; 0x3a
   10048:	beq	100b4 <rb_string_to_array+0xc4>
   1004c:	str	r1, [r4, r5, lsl #2]
   10050:	mov	r0, r1
   10054:	mov	r1, #32
   10058:	bl	4ee0 <strchr@plt>
   1005c:	mov	r2, r0
   10060:	add	r0, r5, #1
   10064:	cmp	r2, #0
   10068:	beq	10014 <rb_string_to_array+0x24>
   1006c:	mov	r7, r2
   10070:	strb	r8, [r7], #1
   10074:	mov	r1, r7
   10078:	b	10080 <rb_string_to_array+0x90>
   1007c:	add	r1, r1, #1
   10080:	ldrb	r3, [r1]
   10084:	cmp	r3, #32
   10088:	beq	1007c <rb_string_to_array+0x8c>
   1008c:	cmp	r3, #0
   10090:	popeq	{r4, r5, r6, r7, r8, sl, fp, pc}
   10094:	cmp	r0, r6
   10098:	blt	1003c <rb_string_to_array+0x4c>
   1009c:	ldrb	r1, [r2, #1]
   100a0:	cmp	r1, #58	; 0x3a
   100a4:	addeq	r7, r2, #2
   100a8:	str	r7, [r4, r0, lsl #2]
   100ac:	add	r0, r5, #2
   100b0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   100b4:	add	r0, r1, #1
   100b8:	str	r0, [r4, r5, lsl #2]
   100bc:	add	r0, r5, #1
   100c0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}

000100c4 <rb_strcasecmp>:
   100c4:	b	4ef8 <strcasecmp@plt>

000100c8 <rb_strncasecmp>:
   100c8:	b	527c <strncasecmp@plt>

000100cc <rb_strcasestr>:
   100cc:	b	4d54 <strcasestr@plt>

000100d0 <rb_strlcat>:
   100d0:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   100d4:	add	fp, sp, #24
   100d8:	mov	r4, r2
   100dc:	mov	r8, r1
   100e0:	mov	r9, r0
   100e4:	bl	50f0 <strlen@plt>
   100e8:	mov	r7, r0
   100ec:	sub	r6, r4, r0
   100f0:	mov	r0, r8
   100f4:	bl	50f0 <strlen@plt>
   100f8:	cmp	r0, r6
   100fc:	mov	r4, r0
   10100:	mov	r5, r0
   10104:	mov	r1, r8
   10108:	subcs	r4, r6, #1
   1010c:	add	r6, r9, r7
   10110:	mov	r0, r6
   10114:	mov	r2, r4
   10118:	bl	5114 <memcpy@plt>
   1011c:	mov	r0, #0
   10120:	strb	r0, [r6, r4]
   10124:	add	r0, r5, r7
   10128:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}

0001012c <rb_strlcpy>:
   1012c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   10130:	add	fp, sp, #24
   10134:	mov	r8, r0
   10138:	mov	r0, r1
   1013c:	mov	r7, r2
   10140:	mov	r6, r1
   10144:	bl	50f0 <strlen@plt>
   10148:	mov	r4, r0
   1014c:	cmp	r7, #0
   10150:	beq	10178 <rb_strlcpy+0x4c>
   10154:	cmp	r4, r7
   10158:	mov	r5, r4
   1015c:	mov	r0, r8
   10160:	mov	r1, r6
   10164:	subcs	r5, r7, #1
   10168:	mov	r2, r5
   1016c:	bl	5114 <memcpy@plt>
   10170:	mov	r0, #0
   10174:	strb	r0, [r8, r5]
   10178:	mov	r0, r4
   1017c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}

00010180 <rb_strnlen>:
   10180:	b	5318 <strnlen@plt>

00010184 <rb_snprintf_append>:
   10184:	sub	sp, sp, #4
   10188:	push	{r4, r5, r6, r7, fp, lr}
   1018c:	add	fp, sp, #16
   10190:	sub	sp, sp, #4
   10194:	cmp	r1, #0
   10198:	str	r3, [fp, #8]
   1019c:	beq	101c8 <rb_snprintf_append+0x44>
   101a0:	mov	r4, r2
   101a4:	mov	r6, r1
   101a8:	mov	r5, r0
   101ac:	bl	50f0 <strlen@plt>
   101b0:	cmp	r0, r6
   101b4:	ble	101d0 <rb_snprintf_append+0x4c>
   101b8:	sub	r0, r6, #1
   101bc:	mov	r1, #0
   101c0:	strb	r1, [r5, r0]
   101c4:	b	101f4 <rb_snprintf_append+0x70>
   101c8:	mvn	r0, #0
   101cc:	b	101f4 <rb_snprintf_append+0x70>
   101d0:	mov	r7, r0
   101d4:	add	r3, fp, #8
   101d8:	add	r0, r5, r0
   101dc:	mov	r2, r4
   101e0:	sub	r1, r6, r7
   101e4:	str	r3, [sp]
   101e8:	bl	4e8c <vsnprintf@plt>
   101ec:	cmp	r0, #0
   101f0:	addge	r0, r0, r7
   101f4:	sub	sp, fp, #16
   101f8:	pop	{r4, r5, r6, r7, fp, lr}
   101fc:	add	sp, sp, #4
   10200:	bx	lr

00010204 <rb_snprintf_try_append>:
   10204:	sub	sp, sp, #4
   10208:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1020c:	add	fp, sp, #24
   10210:	sub	sp, sp, #4
   10214:	mvn	r4, #0
   10218:	cmp	r1, #0
   1021c:	str	r3, [fp, #8]
   10220:	beq	10290 <rb_snprintf_try_append+0x8c>
   10224:	mov	r9, r2
   10228:	mov	r5, r1
   1022c:	mov	r6, r0
   10230:	bl	50f0 <strlen@plt>
   10234:	cmp	r0, r5
   10238:	ble	1024c <rb_snprintf_try_append+0x48>
   1023c:	add	r0, r6, r5
   10240:	mov	r1, #0
   10244:	strb	r1, [r0, #-1]
   10248:	b	10290 <rb_snprintf_try_append+0x8c>
   1024c:	add	r8, r6, r0
   10250:	add	r3, fp, #8
   10254:	mov	r7, r0
   10258:	sub	r1, r5, r0
   1025c:	mov	r2, r9
   10260:	mov	r0, r8
   10264:	str	r3, [sp]
   10268:	bl	4e8c <vsnprintf@plt>
   1026c:	mov	r4, r0
   10270:	cmp	r0, #0
   10274:	blt	10290 <rb_snprintf_try_append+0x8c>
   10278:	add	r4, r4, r7
   1027c:	sub	r0, r5, #1
   10280:	cmp	r4, r0
   10284:	movgt	r0, #0
   10288:	mvngt	r4, #0
   1028c:	strbgt	r0, [r8]
   10290:	mov	r0, r4
   10294:	sub	sp, fp, #24
   10298:	pop	{r4, r5, r6, r7, r8, r9, fp, lr}
   1029c:	add	sp, sp, #4
   102a0:	bx	lr

000102a4 <rb_basename>:
   102a4:	push	{r4, r5, fp, lr}
   102a8:	add	fp, sp, #8
   102ac:	mov	r1, #47	; 0x2f
   102b0:	mov	r4, r0
   102b4:	bl	4f70 <strrchr@plt>
   102b8:	cmp	r0, #0
   102bc:	addne	r4, r0, #1
   102c0:	mov	r0, r4
   102c4:	bl	50f0 <strlen@plt>
   102c8:	add	r0, r0, #1
   102cc:	bl	52ac <malloc@plt>
   102d0:	cmp	r0, #0
   102d4:	beq	102ec <rb_basename+0x48>
   102d8:	mov	r1, r4
   102dc:	mov	r5, r0
   102e0:	bl	5198 <strcpy@plt>
   102e4:	mov	r0, r5
   102e8:	pop	{r4, r5, fp, pc}
   102ec:	bl	5288 <rb_outofmemory@plt>

000102f0 <rb_dirname>:
   102f0:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   102f4:	add	fp, sp, #24
   102f8:	mov	r1, #47	; 0x2f
   102fc:	mov	r4, r0
   10300:	bl	4f70 <strrchr@plt>
   10304:	cmp	r0, #0
   10308:	bne	1033c <rb_dirname+0x4c>
   1030c:	mov	r0, #2
   10310:	bl	52ac <malloc@plt>
   10314:	cmp	r0, #0
   10318:	beq	1039c <rb_dirname+0xac>
   1031c:	mov	r5, r0
   10320:	mov	r0, #46	; 0x2e
   10324:	strh	r0, [r5]
   10328:	b	10394 <rb_dirname+0xa4>
   1032c:	ldrb	r1, [r0]
   10330:	cmp	r1, #47	; 0x2f
   10334:	bne	10344 <rb_dirname+0x54>
   10338:	sub	r0, r0, #1
   1033c:	cmp	r0, r4
   10340:	bhi	1032c <rb_dirname+0x3c>
   10344:	sub	r8, r0, r4
   10348:	add	r6, r8, #2
   1034c:	mov	r0, r6
   10350:	bl	52ac <malloc@plt>
   10354:	cmp	r0, #0
   10358:	beq	1039c <rb_dirname+0xac>
   1035c:	mov	r5, r0
   10360:	mov	r0, r4
   10364:	bl	50f0 <strlen@plt>
   10368:	cmp	r6, #0
   1036c:	beq	10394 <rb_dirname+0xa4>
   10370:	mov	r7, r0
   10374:	cmp	r0, r6
   10378:	mov	r0, r5
   1037c:	mov	r1, r4
   10380:	addcs	r7, r8, #1
   10384:	mov	r2, r7
   10388:	bl	5114 <memcpy@plt>
   1038c:	mov	r0, #0
   10390:	strb	r0, [r5, r7]
   10394:	mov	r0, r5
   10398:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1039c:	bl	5288 <rb_outofmemory@plt>

000103a0 <rb_fsnprint>:
   103a0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   103a4:	add	fp, sp, #28
   103a8:	sub	sp, sp, #12
   103ac:	cmp	r2, #0
   103b0:	str	r0, [sp, #4]
   103b4:	beq	104d0 <rb_fsnprint+0x130>
   103b8:	sub	r0, r1, #1
   103bc:	mov	r4, r2
   103c0:	mov	r8, r1
   103c4:	mov	r9, #0
   103c8:	str	r1, [sp]
   103cc:	str	r0, [sp, #8]
   103d0:	mov	r0, r1
   103d4:	ldr	r7, [r4]
   103d8:	cmp	r7, #0
   103dc:	beq	103ec <rb_fsnprint+0x4c>
   103e0:	sub	r0, r8, r9
   103e4:	cmp	r7, r0
   103e8:	bls	103f8 <rb_fsnprint+0x58>
   103ec:	cmp	r0, #0
   103f0:	mov	r7, r0
   103f4:	beq	104e0 <rb_fsnprint+0x140>
   103f8:	ldr	r6, [r4, #4]
   103fc:	cmp	r6, #0
   10400:	beq	10430 <rb_fsnprint+0x90>
   10404:	ldr	r0, [sp, #4]
   10408:	add	sl, r0, r9
   1040c:	ldr	r0, [r4, #12]
   10410:	cmp	r0, #0
   10414:	beq	10458 <rb_fsnprint+0xb8>
   10418:	ldr	r3, [r0]
   1041c:	mov	r0, sl
   10420:	mov	r1, r7
   10424:	mov	r2, r6
   10428:	bl	4e8c <vsnprintf@plt>
   1042c:	b	10450 <rb_fsnprint+0xb0>
   10430:	ldr	r3, [r4, #8]
   10434:	cmp	r3, #0
   10438:	beq	104c8 <rb_fsnprint+0x128>
   1043c:	ldr	r0, [sp, #4]
   10440:	ldr	r2, [r4, #12]
   10444:	mov	r1, r7
   10448:	add	r0, r0, r9
   1044c:	blx	r3
   10450:	mov	r5, r0
   10454:	b	1048c <rb_fsnprint+0xec>
   10458:	mov	r0, r6
   1045c:	bl	50f0 <strlen@plt>
   10460:	cmp	r0, r7
   10464:	mov	r8, r0
   10468:	mov	r5, r0
   1046c:	mov	r0, sl
   10470:	mov	r1, r6
   10474:	subcs	r8, r7, #1
   10478:	mov	r2, r8
   1047c:	bl	5114 <memcpy@plt>
   10480:	mov	r0, #0
   10484:	strb	r0, [sl, r8]
   10488:	ldr	r8, [sp]
   1048c:	cmp	r5, #0
   10490:	blt	104e4 <rb_fsnprint+0x144>
   10494:	sub	r0, r7, #1
   10498:	cmp	r5, r0
   1049c:	movls	r0, r5
   104a0:	add	r9, r0, r9
   104a4:	ldr	r0, [sp, #8]
   104a8:	cmp	r9, r0
   104ac:	bcs	104d8 <rb_fsnprint+0x138>
   104b0:	ldr	r4, [r4, #16]
   104b4:	sub	r0, r7, r5
   104b8:	mov	r5, r9
   104bc:	cmp	r4, #0
   104c0:	bne	103d4 <rb_fsnprint+0x34>
   104c4:	b	104e4 <rb_fsnprint+0x144>
   104c8:	mov	r5, #0
   104cc:	b	10494 <rb_fsnprint+0xf4>
   104d0:	mov	r5, #0
   104d4:	b	104e4 <rb_fsnprint+0x144>
   104d8:	ldr	r5, [sp, #8]
   104dc:	b	104e4 <rb_fsnprint+0x144>
   104e0:	mov	r5, r9
   104e4:	mov	r0, r5
   104e8:	sub	sp, fp, #28
   104ec:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

000104f0 <rb_fsnprintf>:
   104f0:	push	{fp, lr}
   104f4:	mov	fp, sp
   104f8:	sub	sp, sp, #24
   104fc:	str	r3, [sp, #4]
   10500:	mov	r3, #0
   10504:	str	r3, [sp]
   10508:	str	r3, [sp, #8]
   1050c:	sub	r3, fp, #4
   10510:	str	r3, [sp, #12]
   10514:	str	r2, [sp, #16]
   10518:	add	r2, fp, #8
   1051c:	str	r2, [fp, #-4]
   10520:	mov	r2, sp
   10524:	bl	4fb8 <rb_fsnprint@plt>
   10528:	mov	sp, fp
   1052c:	pop	{fp, pc}

00010530 <rb_helper_child>:
   10530:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10534:	add	fp, sp, #28
   10538:	sub	sp, sp, #28
   1053c:	str	r2, [sp, #24]
   10540:	mov	r4, r0
   10544:	mov	r8, r3
   10548:	mov	r9, r1
   1054c:	ldr	r0, [pc, #480]	; 10734 <rb_helper_child+0x204>
   10550:	add	r0, pc, r0
   10554:	bl	4ec8 <getenv@plt>
   10558:	mov	r7, r0
   1055c:	ldr	r0, [pc, #468]	; 10738 <rb_helper_child+0x208>
   10560:	add	r0, pc, r0
   10564:	bl	4ec8 <getenv@plt>
   10568:	mov	r5, r0
   1056c:	ldr	r0, [pc, #456]	; 1073c <rb_helper_child+0x20c>
   10570:	add	r0, pc, r0
   10574:	bl	4ec8 <getenv@plt>
   10578:	mov	sl, #0
   1057c:	cmp	r7, #0
   10580:	beq	10724 <rb_helper_child+0x1f4>
   10584:	cmp	r5, #0
   10588:	movne	r6, r0
   1058c:	cmpne	r0, #0
   10590:	beq	10724 <rb_helper_child+0x1f4>
   10594:	mov	r0, #1
   10598:	mov	r1, #84	; 0x54
   1059c:	str	r8, [sp, #12]
   105a0:	str	r4, [sp, #16]
   105a4:	bl	4f10 <calloc@plt>
   105a8:	cmp	r0, #0
   105ac:	beq	10730 <rb_helper_child+0x200>
   105b0:	mov	sl, r0
   105b4:	mov	r0, r7
   105b8:	mov	r1, #0
   105bc:	mov	r2, #10
   105c0:	mov	r4, #0
   105c4:	bl	5180 <strtol@plt>
   105c8:	mov	r7, r0
   105cc:	mov	r0, r5
   105d0:	mov	r1, #0
   105d4:	mov	r2, #10
   105d8:	bl	5180 <strtol@plt>
   105dc:	mov	r5, r0
   105e0:	mov	r0, r6
   105e4:	mov	r1, #0
   105e8:	mov	r2, #10
   105ec:	bl	5180 <strtol@plt>
   105f0:	mov	r8, r0
   105f4:	cmp	r0, #1
   105f8:	blt	1061c <rb_helper_child+0xec>
   105fc:	cmp	r7, r4
   10600:	cmpne	r5, r4
   10604:	beq	10610 <rb_helper_child+0xe0>
   10608:	mov	r0, r4
   1060c:	bl	524c <close@plt>
   10610:	add	r4, r4, #1
   10614:	cmp	r8, r4
   10618:	bne	105fc <rb_helper_child+0xcc>
   1061c:	str	r9, [sp, #20]
   10620:	mov	r1, #2
   10624:	ldr	r0, [pc, #276]	; 10740 <rb_helper_child+0x210>
   10628:	add	r0, pc, r0
   1062c:	bl	4cb8 <open@plt>
   10630:	cmp	r7, #0
   10634:	mov	r9, r0
   10638:	cmpne	r5, #0
   1063c:	beq	1064c <rb_helper_child+0x11c>
   10640:	mov	r0, r9
   10644:	mov	r1, #0
   10648:	bl	53c0 <dup2@plt>
   1064c:	cmp	r7, #1
   10650:	cmpne	r5, #1
   10654:	beq	10664 <rb_helper_child+0x134>
   10658:	mov	r0, r9
   1065c:	mov	r1, #1
   10660:	bl	53c0 <dup2@plt>
   10664:	cmp	r7, #2
   10668:	cmpne	r5, #2
   1066c:	beq	1067c <rb_helper_child+0x14c>
   10670:	mov	r0, r9
   10674:	mov	r1, #2
   10678:	bl	53c0 <dup2@plt>
   1067c:	ldr	r4, [fp, #20]
   10680:	ldr	r6, [fp, #16]
   10684:	ldr	r2, [fp, #8]
   10688:	cmp	r9, #3
   1068c:	blt	106a0 <rb_helper_child+0x170>
   10690:	mov	r0, r9
   10694:	mov	r9, r2
   10698:	bl	524c <close@plt>
   1069c:	mov	r2, r9
   106a0:	ldr	r0, [sp, #24]
   106a4:	ldr	r1, [sp, #12]
   106a8:	mov	r3, #0
   106ac:	str	r8, [sp]
   106b0:	str	r6, [sp, #4]
   106b4:	str	r4, [sp, #8]
   106b8:	bl	533c <rb_lib_init@plt>
   106bc:	ldr	r0, [fp, #12]
   106c0:	bl	5444 <rb_linebuf_init@plt>
   106c4:	add	r0, sl, #4
   106c8:	bl	53f0 <rb_linebuf_newbuf@plt>
   106cc:	add	r0, sl, #32
   106d0:	bl	53f0 <rb_linebuf_newbuf@plt>
   106d4:	ldr	r2, [pc, #104]	; 10744 <rb_helper_child+0x214>
   106d8:	mov	r0, r7
   106dc:	mov	r1, #8
   106e0:	add	r2, pc, r2
   106e4:	bl	5384 <rb_open@plt>
   106e8:	str	r0, [sl, #60]	; 0x3c
   106ec:	mov	r0, r5
   106f0:	mov	r1, #8
   106f4:	ldr	r2, [pc, #76]	; 10748 <rb_helper_child+0x218>
   106f8:	add	r2, pc, r2
   106fc:	bl	5384 <rb_open@plt>
   10700:	str	r0, [sl, #64]	; 0x40
   10704:	ldr	r0, [sl, #60]	; 0x3c
   10708:	bl	4f40 <rb_set_nb@plt>
   1070c:	ldr	r0, [sl, #64]	; 0x40
   10710:	bl	4f40 <rb_set_nb@plt>
   10714:	ldr	r0, [sp, #16]
   10718:	str	r0, [sl, #76]	; 0x4c
   1071c:	ldr	r0, [sp, #20]
   10720:	str	r0, [sl, #80]	; 0x50
   10724:	mov	r0, sl
   10728:	sub	sp, fp, #28
   1072c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10730:	bl	5288 <rb_outofmemory@plt>
   10734:	.word	0x0000649c
   10738:	.word	0x00006490
   1073c:	.word	0x00006484
   10740:	.word	0x000063d2
   10744:	.word	0x00006324
   10748:	.word	0x00006320

0001074c <rb_helper_start>:
   1074c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10750:	add	fp, sp, #28
   10754:	sub	sp, sp, #196	; 0xc4
   10758:	mov	r9, r0
   1075c:	mov	r8, r1
   10760:	mov	r0, r1
   10764:	mov	r1, #1
   10768:	mov	r5, r3
   1076c:	mov	r6, r2
   10770:	bl	5054 <access@plt>
   10774:	mov	r4, #0
   10778:	cmn	r0, #1
   1077c:	beq	10960 <rb_helper_start+0x214>
   10780:	mov	r0, #1
   10784:	mov	r1, #84	; 0x54
   10788:	bl	4f10 <calloc@plt>
   1078c:	cmp	r0, #0
   10790:	beq	1096c <rb_helper_start+0x220>
   10794:	ldr	r2, [pc, #468]	; 10970 <rb_helper_start+0x224>
   10798:	add	r7, sp, #60	; 0x3c
   1079c:	mov	sl, r0
   107a0:	mov	r1, #128	; 0x80
   107a4:	mov	r3, r9
   107a8:	mov	r0, r7
   107ac:	add	r2, pc, r2
   107b0:	bl	54a4 <snprintf@plt>
   107b4:	add	r0, sp, #20
   107b8:	mov	r2, r7
   107bc:	add	r1, r0, #4
   107c0:	bl	5270 <rb_pipe@plt>
   107c4:	cmn	r0, #1
   107c8:	ble	10958 <rb_helper_start+0x20c>
   107cc:	str	r5, [sp, #8]
   107d0:	str	r6, [sp, #4]
   107d4:	add	r5, sp, #60	; 0x3c
   107d8:	mov	r1, #128	; 0x80
   107dc:	mov	r3, r9
   107e0:	ldr	r2, [pc, #396]	; 10974 <rb_helper_start+0x228>
   107e4:	mov	r0, r5
   107e8:	add	r2, pc, r2
   107ec:	bl	54a4 <snprintf@plt>
   107f0:	add	r0, sp, #12
   107f4:	mov	r2, r5
   107f8:	add	r1, r0, #4
   107fc:	bl	5270 <rb_pipe@plt>
   10800:	cmn	r0, #1
   10804:	ble	10958 <rb_helper_start+0x20c>
   10808:	ldr	r0, [sp, #24]
   1080c:	bl	4e20 <rb_get_fd@plt>
   10810:	ldr	r7, [pc, #352]	; 10978 <rb_helper_start+0x22c>
   10814:	add	r6, sp, #44	; 0x2c
   10818:	mov	r3, r0
   1081c:	mov	r1, #16
   10820:	mov	r0, r6
   10824:	add	r7, pc, r7
   10828:	mov	r2, r7
   1082c:	bl	54a4 <snprintf@plt>
   10830:	ldr	r0, [sp, #12]
   10834:	bl	4e20 <rb_get_fd@plt>
   10838:	add	r4, sp, #28
   1083c:	mov	r3, r0
   10840:	mov	r1, #16
   10844:	mov	r2, r7
   10848:	mov	r0, r4
   1084c:	bl	54a4 <snprintf@plt>
   10850:	ldr	r0, [sp, #20]
   10854:	bl	4f40 <rb_set_nb@plt>
   10858:	ldr	r0, [sp, #24]
   1085c:	bl	4f40 <rb_set_nb@plt>
   10860:	ldr	r0, [sp, #12]
   10864:	bl	4f40 <rb_set_nb@plt>
   10868:	ldr	r0, [sp, #16]
   1086c:	bl	4f40 <rb_set_nb@plt>
   10870:	ldr	r0, [pc, #260]	; 1097c <rb_helper_start+0x230>
   10874:	mov	r1, r4
   10878:	mov	r2, #1
   1087c:	add	r0, pc, r0
   10880:	bl	4e08 <rb_setenv@plt>
   10884:	ldr	r0, [pc, #244]	; 10980 <rb_helper_start+0x234>
   10888:	mov	r1, r6
   1088c:	mov	r2, #1
   10890:	add	r0, pc, r0
   10894:	bl	4e08 <rb_setenv@plt>
   10898:	ldr	r0, [pc, #228]	; 10984 <rb_helper_start+0x238>
   1089c:	ldr	r1, [pc, #228]	; 10988 <rb_helper_start+0x23c>
   108a0:	mov	r2, #1
   108a4:	add	r0, pc, r0
   108a8:	add	r1, pc, r1
   108ac:	bl	4e08 <rb_setenv@plt>
   108b0:	ldr	r2, [pc, #212]	; 1098c <rb_helper_start+0x240>
   108b4:	mov	r0, r5
   108b8:	mov	r1, #128	; 0x80
   108bc:	mov	r3, r9
   108c0:	add	r2, pc, r2
   108c4:	bl	54a4 <snprintf@plt>
   108c8:	mov	r4, #0
   108cc:	sub	r1, fp, #36	; 0x24
   108d0:	mov	r0, r8
   108d4:	str	r5, [fp, #-36]	; 0xffffffdc
   108d8:	str	r4, [fp, #-32]	; 0xffffffe0
   108dc:	bl	548c <rb_spawn_process@plt>
   108e0:	cmn	r0, #1
   108e4:	beq	10938 <rb_helper_start+0x1ec>
   108e8:	mov	r5, r0
   108ec:	ldr	r0, [sp, #24]
   108f0:	bl	5174 <rb_close@plt>
   108f4:	ldr	r0, [sp, #12]
   108f8:	bl	5174 <rb_close@plt>
   108fc:	add	r0, sl, #4
   10900:	bl	53f0 <rb_linebuf_newbuf@plt>
   10904:	add	r0, sl, #32
   10908:	bl	53f0 <rb_linebuf_newbuf@plt>
   1090c:	ldr	r0, [sp, #20]
   10910:	ldr	r1, [sp, #16]
   10914:	add	r2, sl, #60	; 0x3c
   10918:	stm	r2, {r0, r1, r5}
   1091c:	str	r4, [sl, #72]	; 0x48
   10920:	mov	r4, sl
   10924:	ldr	r0, [sp, #4]
   10928:	str	r0, [sl, #76]	; 0x4c
   1092c:	ldr	r0, [sp, #8]
   10930:	str	r0, [sl, #80]	; 0x50
   10934:	b	10960 <rb_helper_start+0x214>
   10938:	ldr	r0, [sp, #20]
   1093c:	bl	5174 <rb_close@plt>
   10940:	ldr	r0, [sp, #24]
   10944:	bl	5174 <rb_close@plt>
   10948:	ldr	r0, [sp, #12]
   1094c:	bl	5174 <rb_close@plt>
   10950:	ldr	r0, [sp, #16]
   10954:	bl	5174 <rb_close@plt>
   10958:	mov	r0, sl
   1095c:	bl	500c <free@plt>
   10960:	mov	r0, r4
   10964:	sub	sp, fp, #28
   10968:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1096c:	bl	5288 <rb_outofmemory@plt>
   10970:	.word	0x00006280
   10974:	.word	0x00006255
   10978:	.word	0x0000557d
   1097c:	.word	0x00006170
   10980:	.word	0x00006160
   10984:	.word	0x00006150
   10988:	.word	0x000061a7
   1098c:	.word	0x00006193

00010990 <rb_helper_restart>:
   10990:	ldr	r1, [r0, #80]	; 0x50
   10994:	bx	r1

00010998 <rb_helper_write_queue>:
   10998:	sub	sp, sp, #8
   1099c:	push	{fp, lr}
   109a0:	mov	fp, sp
   109a4:	sub	sp, sp, #24
   109a8:	str	r2, [fp, #8]
   109ac:	str	r1, [sp, #4]
   109b0:	mov	r1, #0
   109b4:	sub	r2, fp, #4
   109b8:	add	r0, r0, #4
   109bc:	str	r3, [fp, #12]
   109c0:	str	r1, [sp]
   109c4:	str	r1, [sp, #8]
   109c8:	str	r2, [sp, #12]
   109cc:	str	r1, [sp, #16]
   109d0:	add	r1, fp, #8
   109d4:	str	r1, [fp, #-4]
   109d8:	mov	r1, sp
   109dc:	bl	54e0 <rb_linebuf_put@plt>
   109e0:	mov	sp, fp
   109e4:	pop	{fp, lr}
   109e8:	add	sp, sp, #8
   109ec:	bx	lr

000109f0 <rb_helper_write_flush>:
   109f0:	mov	r1, r0
   109f4:	ldr	r0, [r0, #64]	; 0x40
   109f8:	b	109fc <rb_helper_write_sendq>

000109fc <rb_helper_write_sendq>:
   109fc:	push	{r4, r5, r6, sl, fp, lr}
   10a00:	add	fp, sp, #16
   10a04:	mov	r5, r0
   10a08:	ldr	r0, [r1, #16]
   10a0c:	cmp	r0, #1
   10a10:	poplt	{r4, r5, r6, sl, fp, pc}
   10a14:	mov	r4, r1
   10a18:	add	r6, r1, #4
   10a1c:	mov	r0, r5
   10a20:	mov	r1, r6
   10a24:	bl	50d8 <rb_linebuf_flush@plt>
   10a28:	cmp	r0, #0
   10a2c:	bgt	10a1c <rb_helper_write_sendq+0x20>
   10a30:	beq	10a70 <rb_helper_write_sendq+0x74>
   10a34:	bl	55e8 <__errno_location@plt>
   10a38:	ldr	r0, [r0]
   10a3c:	bl	4d18 <rb_ignore_errno@plt>
   10a40:	cmp	r0, #0
   10a44:	beq	10a70 <rb_helper_write_sendq+0x74>
   10a48:	ldr	r0, [r4, #16]
   10a4c:	cmp	r0, #1
   10a50:	blt	10a80 <rb_helper_write_sendq+0x84>
   10a54:	ldr	r0, [r4, #64]	; 0x40
   10a58:	ldr	r2, [pc, #36]	; 10a84 <rb_helper_write_sendq+0x88>
   10a5c:	mov	r1, #2
   10a60:	mov	r3, r4
   10a64:	add	r2, pc, r2
   10a68:	pop	{r4, r5, r6, sl, fp, lr}
   10a6c:	b	4de4 <rb_setselect@plt>
   10a70:	ldr	r1, [r4, #80]	; 0x50
   10a74:	mov	r0, r4
   10a78:	pop	{r4, r5, r6, sl, fp, lr}
   10a7c:	bx	r1
   10a80:	pop	{r4, r5, r6, sl, fp, pc}
   10a84:	.word	0xffffff90

00010a88 <rb_helper_write>:
   10a88:	sub	sp, sp, #8
   10a8c:	push	{r4, sl, fp, lr}
   10a90:	add	fp, sp, #8
   10a94:	sub	sp, sp, #24
   10a98:	mov	r4, r0
   10a9c:	str	r1, [sp, #4]
   10aa0:	mov	r0, #0
   10aa4:	sub	r1, fp, #12
   10aa8:	str	r3, [fp, #12]
   10aac:	str	r2, [fp, #8]
   10ab0:	str	r0, [sp]
   10ab4:	str	r0, [sp, #8]
   10ab8:	str	r1, [sp, #12]
   10abc:	str	r0, [sp, #16]
   10ac0:	add	r0, fp, #8
   10ac4:	mov	r1, sp
   10ac8:	str	r0, [fp, #-12]
   10acc:	add	r0, r4, #4
   10ad0:	bl	54e0 <rb_linebuf_put@plt>
   10ad4:	ldr	r0, [r4, #64]	; 0x40
   10ad8:	mov	r1, r4
   10adc:	bl	109fc <rb_helper_write_sendq>
   10ae0:	sub	sp, fp, #8
   10ae4:	pop	{r4, sl, fp, lr}
   10ae8:	add	sp, sp, #8
   10aec:	bx	lr

00010af0 <rb_helper_run>:
   10af0:	cmp	r0, #0
   10af4:	bxeq	lr
   10af8:	mov	r1, r0
   10afc:	ldr	r0, [r0, #60]	; 0x3c
   10b00:	b	10b04 <rb_helper_read_cb>

00010b04 <rb_helper_read_cb>:
   10b04:	push	{r4, r5, r6, sl, fp, lr}
   10b08:	add	fp, sp, #16
   10b0c:	cmp	r1, #0
   10b10:	popeq	{r4, r5, r6, sl, fp, pc}
   10b14:	mov	r4, r1
   10b18:	ldr	r0, [r1, #60]	; 0x3c
   10b1c:	ldr	r1, [pc, #160]	; 10bc4 <rb_helper_read_cb+0xc0>
   10b20:	mov	r2, #32768	; 0x8000
   10b24:	add	r1, pc, r1
   10b28:	bl	509c <rb_read@plt>
   10b2c:	mov	r2, r0
   10b30:	cmp	r0, #1
   10b34:	blt	10b7c <rb_helper_read_cb+0x78>
   10b38:	ldr	r6, [pc, #136]	; 10bc8 <rb_helper_read_cb+0xc4>
   10b3c:	add	r5, r4, #32
   10b40:	add	r6, pc, r6
   10b44:	mov	r0, r5
   10b48:	mov	r1, r6
   10b4c:	mov	r3, #0
   10b50:	bl	4fa0 <rb_linebuf_parse@plt>
   10b54:	ldr	r1, [r4, #76]	; 0x4c
   10b58:	mov	r0, r4
   10b5c:	blx	r1
   10b60:	ldr	r0, [r4, #60]	; 0x3c
   10b64:	mov	r1, r6
   10b68:	mov	r2, #32768	; 0x8000
   10b6c:	bl	509c <rb_read@plt>
   10b70:	mov	r2, r0
   10b74:	cmp	r0, #0
   10b78:	bgt	10b44 <rb_helper_read_cb+0x40>
   10b7c:	cmp	r2, #0
   10b80:	beq	10bb4 <rb_helper_read_cb+0xb0>
   10b84:	bl	55e8 <__errno_location@plt>
   10b88:	ldr	r0, [r0]
   10b8c:	bl	4d18 <rb_ignore_errno@plt>
   10b90:	cmp	r0, #0
   10b94:	beq	10bb4 <rb_helper_read_cb+0xb0>
   10b98:	ldr	r0, [r4, #60]	; 0x3c
   10b9c:	ldr	r2, [pc, #40]	; 10bcc <rb_helper_read_cb+0xc8>
   10ba0:	mov	r1, #1
   10ba4:	mov	r3, r4
   10ba8:	add	r2, pc, r2
   10bac:	pop	{r4, r5, r6, sl, fp, lr}
   10bb0:	b	4de4 <rb_setselect@plt>
   10bb4:	ldr	r1, [r4, #80]	; 0x50
   10bb8:	mov	r0, r4
   10bbc:	pop	{r4, r5, r6, sl, fp, lr}
   10bc0:	bx	r1
   10bc4:	.word	0x0002c7c4
   10bc8:	.word	0x0002c7a8
   10bcc:	.word	0xffffff54

00010bd0 <rb_helper_close>:
   10bd0:	cmp	r0, #0
   10bd4:	bxeq	lr
   10bd8:	push	{r4, sl, fp, lr}
   10bdc:	add	fp, sp, #8
   10be0:	mov	r4, r0
   10be4:	ldr	r0, [r0, #68]	; 0x44
   10be8:	mov	r1, #9
   10bec:	bl	5000 <rb_kill@plt>
   10bf0:	ldr	r0, [r4, #60]	; 0x3c
   10bf4:	bl	5174 <rb_close@plt>
   10bf8:	ldr	r0, [r4, #64]	; 0x40
   10bfc:	bl	5174 <rb_close@plt>
   10c00:	mov	r0, r4
   10c04:	pop	{r4, sl, fp, lr}
   10c08:	b	500c <free@plt>

00010c0c <rb_helper_read>:
   10c0c:	push	{fp, lr}
   10c10:	mov	fp, sp
   10c14:	sub	sp, sp, #8
   10c18:	mov	r3, #0
   10c1c:	add	r0, r0, #32
   10c20:	str	r3, [sp]
   10c24:	mov	r3, #0
   10c28:	bl	50b4 <rb_linebuf_get@plt>
   10c2c:	mov	sp, fp
   10c30:	pop	{fp, pc}

00010c34 <rb_helper_loop>:
   10c34:	push	{fp, lr}
   10c38:	mov	fp, sp
   10c3c:	mov	r4, r1
   10c40:	bl	4ca0 <rb_helper_run@plt>
   10c44:	mov	r0, r4
   10c48:	bl	5060 <rb_lib_loop@plt>

00010c4c <rb_init_netio_devpoll>:
   10c4c:	mov	r0, #38	; 0x26
   10c50:	bx	lr

00010c54 <rb_setselect_devpoll>:
   10c54:	push	{fp, lr}
   10c58:	mov	fp, sp
   10c5c:	bl	55e8 <__errno_location@plt>
   10c60:	mov	r1, #38	; 0x26
   10c64:	str	r1, [r0]
   10c68:	pop	{fp, pc}

00010c6c <rb_select_devpoll>:
   10c6c:	push	{fp, lr}
   10c70:	mov	fp, sp
   10c74:	bl	55e8 <__errno_location@plt>
   10c78:	mov	r1, #38	; 0x26
   10c7c:	str	r1, [r0]
   10c80:	mvn	r0, #0
   10c84:	pop	{fp, pc}

00010c88 <rb_setup_fd_devpoll>:
   10c88:	push	{fp, lr}
   10c8c:	mov	fp, sp
   10c90:	bl	55e8 <__errno_location@plt>
   10c94:	mov	r1, #38	; 0x26
   10c98:	str	r1, [r0]
   10c9c:	mvn	r0, #0
   10ca0:	pop	{fp, pc}
   10ca4:	andeq	r0, r0, r0

00010ca8 <rb_init_netio_epoll>:
   10ca8:	push	{r4, sl, fp, lr}
   10cac:	add	fp, sp, #8
   10cb0:	ldr	r0, [pc, #156]	; 10d54 <rb_init_netio_epoll+0xac>
   10cb4:	mov	r1, #0
   10cb8:	add	r0, pc, r0
   10cbc:	strb	r1, [r0]
   10cc0:	ldr	r0, [pc, #144]	; 10d58 <rb_init_netio_epoll+0xb0>
   10cc4:	add	r0, pc, r0
   10cc8:	str	r1, [r0]
   10ccc:	mov	r0, #1
   10cd0:	mov	r1, #12
   10cd4:	bl	4f10 <calloc@plt>
   10cd8:	cmp	r0, #0
   10cdc:	beq	10d50 <rb_init_netio_epoll+0xa8>
   10ce0:	ldr	r1, [pc, #116]	; 10d5c <rb_init_netio_epoll+0xb4>
   10ce4:	add	r1, pc, r1
   10ce8:	str	r0, [r1]
   10cec:	bl	4cf4 <getdtablesize@plt>
   10cf0:	ldr	r1, [pc, #104]	; 10d60 <rb_init_netio_epoll+0xb8>
   10cf4:	ldr	r1, [pc, r1]
   10cf8:	str	r0, [r1, #8]
   10cfc:	bl	4e2c <epoll_create@plt>
   10d00:	ldr	r1, [pc, #92]	; 10d64 <rb_init_netio_epoll+0xbc>
   10d04:	cmp	r0, #0
   10d08:	ldr	r1, [pc, r1]
   10d0c:	str	r0, [r1]
   10d10:	mvnlt	r0, #0
   10d14:	poplt	{r4, sl, fp, pc}
   10d18:	ldr	r2, [pc, #72]	; 10d68 <rb_init_netio_epoll+0xc0>
   10d1c:	mov	r1, #64	; 0x40
   10d20:	add	r2, pc, r2
   10d24:	bl	5384 <rb_open@plt>
   10d28:	ldr	r4, [pc, #60]	; 10d6c <rb_init_netio_epoll+0xc4>
   10d2c:	ldr	r4, [pc, r4]
   10d30:	ldr	r0, [r4, #8]
   10d34:	lsl	r1, r0, #4
   10d38:	mov	r0, #1
   10d3c:	bl	4f10 <calloc@plt>
   10d40:	cmp	r0, #0
   10d44:	strne	r0, [r4, #4]
   10d48:	movne	r0, #0
   10d4c:	popne	{r4, sl, fp, pc}
   10d50:	bl	5288 <rb_outofmemory@plt>
   10d54:	.word	0x00034634
   10d58:	.word	0x00034624
   10d5c:	.word	0x0003460c
   10d60:	.word	0x000345fc
   10d64:	.word	0x000345e8
   10d68:	.word	0x00005d43
   10d6c:	.word	0x000345c4

00010d70 <rb_setup_fd_epoll>:
   10d70:	mov	r0, #0
   10d74:	bx	lr

00010d78 <rb_setselect_epoll>:
   10d78:	push	{fp, lr}
   10d7c:	mov	fp, sp
   10d80:	sub	sp, sp, #16
   10d84:	ldr	ip, [r0, #20]
   10d88:	tst	r1, #1
   10d8c:	mov	lr, ip
   10d90:	beq	10dac <rb_setselect_epoll+0x34>
   10d94:	orr	lr, ip, #1
   10d98:	cmp	r2, #0
   10d9c:	str	r2, [r0, #28]
   10da0:	str	r3, [r0, #32]
   10da4:	biceq	lr, ip, #1
   10da8:	str	lr, [r0, #20]
   10dac:	tst	r1, #2
   10db0:	bne	10dbc <rb_setselect_epoll+0x44>
   10db4:	mov	r3, lr
   10db8:	b	10dd4 <rb_setselect_epoll+0x5c>
   10dbc:	str	r2, [r0, #36]	; 0x24
   10dc0:	str	r3, [r0, #40]	; 0x28
   10dc4:	orr	r3, lr, #4
   10dc8:	cmp	r2, #0
   10dcc:	biceq	r3, lr, #4
   10dd0:	str	r3, [r0, #20]
   10dd4:	orrs	r1, r3, ip
   10dd8:	beq	10e3c <rb_setselect_epoll+0xc4>
   10ddc:	cmp	r3, #1
   10de0:	blt	10dfc <rb_setselect_epoll+0x84>
   10de4:	cmp	ip, #0
   10de8:	beq	10e0c <rb_setselect_epoll+0x94>
   10dec:	mov	r1, #3
   10df0:	cmp	r3, ip
   10df4:	bne	10e10 <rb_setselect_epoll+0x98>
   10df8:	b	10e3c <rb_setselect_epoll+0xc4>
   10dfc:	str	r0, [sp, #8]
   10e00:	str	r3, [sp]
   10e04:	mov	r1, #2
   10e08:	b	10e1c <rb_setselect_epoll+0xa4>
   10e0c:	mov	r1, #1
   10e10:	orr	r2, r3, #-2147483648	; 0x80000000
   10e14:	str	r0, [sp, #8]
   10e18:	str	r2, [sp]
   10e1c:	ldr	r2, [r0, #12]
   10e20:	ldr	r0, [pc, #60]	; 10e64 <rb_setselect_epoll+0xec>
   10e24:	mov	r3, sp
   10e28:	ldr	r0, [pc, r0]
   10e2c:	ldr	r0, [r0]
   10e30:	bl	554c <epoll_ctl@plt>
   10e34:	cmp	r0, #0
   10e38:	bne	10e44 <rb_setselect_epoll+0xcc>
   10e3c:	mov	sp, fp
   10e40:	pop	{fp, pc}
   10e44:	bl	55e8 <__errno_location@plt>
   10e48:	ldr	r0, [r0]
   10e4c:	bl	4cdc <strerror@plt>
   10e50:	mov	r1, r0
   10e54:	ldr	r0, [pc, #12]	; 10e68 <rb_setselect_epoll+0xf0>
   10e58:	add	r0, pc, r0
   10e5c:	bl	5228 <rb_lib_log@plt>
   10e60:	bl	4d00 <abort@plt>
   10e64:	.word	0x000344c8
   10e68:	.word	0x00005c21

00010e6c <rb_select_epoll>:
   10e6c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10e70:	add	fp, sp, #28
   10e74:	sub	sp, sp, #20
   10e78:	ldr	r2, [pc, #380]	; 10ffc <rb_select_epoll+0x190>
   10e7c:	mov	r3, r0
   10e80:	ldr	r2, [pc, r2]
   10e84:	ldm	r2, {r0, r1, r2}
   10e88:	bl	50c0 <epoll_wait@plt>
   10e8c:	mov	r4, r0
   10e90:	bl	55e8 <__errno_location@plt>
   10e94:	ldr	r6, [r0]
   10e98:	mov	sl, r0
   10e9c:	bl	5294 <rb_set_time@plt>
   10ea0:	cmn	r4, #1
   10ea4:	str	r6, [sl]
   10ea8:	ble	10fdc <rb_select_epoll+0x170>
   10eac:	cmp	r4, #0
   10eb0:	beq	10fd4 <rb_select_epoll+0x168>
   10eb4:	mov	r6, #0
   10eb8:	mov	r9, sp
   10ebc:	mov	r5, #0
   10ec0:	ldr	r0, [pc, #312]	; 11000 <rb_select_epoll+0x194>
   10ec4:	ldr	r0, [pc, r0]
   10ec8:	ldr	r0, [r0, #4]
   10ecc:	ldrb	r1, [r0, r5, lsl #4]!
   10ed0:	ldr	r7, [r0, #8]
   10ed4:	tst	r1, #25
   10ed8:	ldr	r8, [r7, #20]
   10edc:	beq	10f00 <rb_select_epoll+0x94>
   10ee0:	ldr	r2, [r7, #28]
   10ee4:	ldr	r1, [r7, #32]
   10ee8:	str	r6, [r7, #28]
   10eec:	str	r6, [r7, #32]
   10ef0:	cmp	r2, #0
   10ef4:	beq	10f00 <rb_select_epoll+0x94>
   10ef8:	mov	r0, r7
   10efc:	blx	r2
   10f00:	ldrb	r0, [r7, #16]
   10f04:	tst	r0, #1
   10f08:	beq	10fc8 <rb_select_epoll+0x15c>
   10f0c:	ldr	r0, [pc, #240]	; 11004 <rb_select_epoll+0x198>
   10f10:	ldr	r0, [pc, r0]
   10f14:	ldr	r0, [r0, #4]
   10f18:	ldrb	r0, [r0, r5, lsl #4]
   10f1c:	tst	r0, #28
   10f20:	beq	10f50 <rb_select_epoll+0xe4>
   10f24:	ldr	r2, [r7, #36]	; 0x24
   10f28:	ldr	r1, [r7, #40]	; 0x28
   10f2c:	str	r6, [r7, #36]	; 0x24
   10f30:	str	r6, [r7, #40]	; 0x28
   10f34:	cmp	r2, #0
   10f38:	beq	10f50 <rb_select_epoll+0xe4>
   10f3c:	mov	r0, r7
   10f40:	blx	r2
   10f44:	ldrb	r0, [r7, #16]
   10f48:	tst	r0, #1
   10f4c:	beq	10fc8 <rb_select_epoll+0x15c>
   10f50:	ldr	r0, [r7, #28]
   10f54:	ldr	r1, [r7, #36]	; 0x24
   10f58:	cmp	r0, #0
   10f5c:	movwne	r0, #1
   10f60:	cmp	r1, #0
   10f64:	orrne	r0, r0, #4
   10f68:	cmp	r8, r0
   10f6c:	beq	10fc8 <rb_select_epoll+0x15c>
   10f70:	cmp	r0, #0
   10f74:	str	r0, [sp]
   10f78:	str	r0, [r7, #20]
   10f7c:	str	r7, [sp, #8]
   10f80:	mov	r1, #3
   10f84:	mov	r3, r9
   10f88:	orrne	r0, r0, #-2147483648	; 0x80000000
   10f8c:	movweq	r1, #2
   10f90:	strne	r0, [sp]
   10f94:	ldr	r2, [r7, #12]
   10f98:	ldr	r0, [pc, #104]	; 11008 <rb_select_epoll+0x19c>
   10f9c:	ldr	r0, [pc, r0]
   10fa0:	ldr	r0, [r0]
   10fa4:	bl	554c <epoll_ctl@plt>
   10fa8:	cmp	r0, #0
   10fac:	beq	10fc8 <rb_select_epoll+0x15c>
   10fb0:	ldr	r0, [sl]
   10fb4:	bl	4cdc <strerror@plt>
   10fb8:	mov	r1, r0
   10fbc:	ldr	r0, [pc, #72]	; 1100c <rb_select_epoll+0x1a0>
   10fc0:	add	r0, pc, r0
   10fc4:	bl	5228 <rb_lib_log@plt>
   10fc8:	add	r5, r5, #1
   10fcc:	cmp	r4, r5
   10fd0:	bne	10ec0 <rb_select_epoll+0x54>
   10fd4:	mov	r0, #0
   10fd8:	b	10ff4 <rb_select_epoll+0x188>
   10fdc:	mov	r0, r6
   10fe0:	bl	4d18 <rb_ignore_errno@plt>
   10fe4:	mov	r1, r0
   10fe8:	mov	r0, #0
   10fec:	cmp	r1, #0
   10ff0:	movweq	r0, #5
   10ff4:	sub	sp, fp, #28
   10ff8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10ffc:	.word	0x00034470
   11000:	.word	0x0003442c
   11004:	.word	0x000343e0
   11008:	.word	0x00034354
   1100c:	.word	0x00005ae4

00011010 <rb_epoll_supports_event>:
   11010:	push	{r4, r5, r6, sl, fp, lr}
   11014:	add	fp, sp, #16
   11018:	sub	sp, sp, #288	; 0x120
   1101c:	ldr	r4, [pc, #260]	; 11128 <rb_epoll_supports_event+0x118>
   11020:	ldr	r4, [pc, r4]
   11024:	cmp	r4, #1
   11028:	beq	110c0 <rb_epoll_supports_event+0xb0>
   1102c:	cmn	r4, #1
   11030:	beq	110bc <rb_epoll_supports_event+0xac>
   11034:	ldr	r0, [pc, #240]	; 1112c <rb_epoll_supports_event+0x11c>
   11038:	add	r1, sp, #128	; 0x80
   1103c:	add	r0, pc, r0
   11040:	bl	151f8 <__stat>
   11044:	cmp	r0, #0
   11048:	beq	110ac <rb_epoll_supports_event+0x9c>
   1104c:	mov	r0, #0
   11050:	mov	r1, #0
   11054:	mov	r4, #0
   11058:	bl	54bc <timerfd_create@plt>
   1105c:	cmp	r0, #0
   11060:	blt	11088 <rb_epoll_supports_event+0x78>
   11064:	bl	524c <close@plt>
   11068:	ldr	r0, [pc, #196]	; 11134 <rb_epoll_supports_event+0x124>
   1106c:	mov	r4, #1
   11070:	add	r0, pc, r0
   11074:	str	r4, [r0]
   11078:	ldr	r0, [pc, #184]	; 11138 <rb_epoll_supports_event+0x128>
   1107c:	add	r0, pc, r0
   11080:	strb	r4, [r0]
   11084:	b	110c0 <rb_epoll_supports_event+0xb0>
   11088:	mov	r0, #26
   1108c:	str	r4, [fp, #-76]	; 0xffffffb4
   11090:	sub	r1, fp, #84	; 0x54
   11094:	sub	r2, fp, #20
   11098:	str	r0, [fp, #-80]	; 0xffffffb0
   1109c:	mov	r0, #0
   110a0:	bl	4e68 <timer_create@plt>
   110a4:	cmp	r0, #0
   110a8:	beq	110cc <rb_epoll_supports_event+0xbc>
   110ac:	ldr	r0, [pc, #124]	; 11130 <rb_epoll_supports_event+0x120>
   110b0:	mvn	r1, #0
   110b4:	add	r0, pc, r0
   110b8:	str	r1, [r0]
   110bc:	mov	r4, #0
   110c0:	mov	r0, r4
   110c4:	sub	sp, fp, #16
   110c8:	pop	{r4, r5, r6, sl, fp, pc}
   110cc:	ldr	r0, [fp, #-20]	; 0xffffffec
   110d0:	bl	5378 <timer_delete@plt>
   110d4:	mov	r5, sp
   110d8:	mov	r0, r5
   110dc:	bl	4cd0 <sigemptyset@plt>
   110e0:	mvn	r0, #0
   110e4:	mov	r1, r5
   110e8:	mov	r2, #0
   110ec:	mvn	r6, #0
   110f0:	mov	r4, #0
   110f4:	bl	4d78 <signalfd@plt>
   110f8:	cmn	r0, #1
   110fc:	ble	11118 <rb_epoll_supports_event+0x108>
   11100:	bl	524c <close@plt>
   11104:	ldr	r0, [pc, #52]	; 11140 <rb_epoll_supports_event+0x130>
   11108:	mov	r4, #1
   1110c:	add	r0, pc, r0
   11110:	str	r4, [r0]
   11114:	b	110c0 <rb_epoll_supports_event+0xb0>
   11118:	ldr	r0, [pc, #28]	; 1113c <rb_epoll_supports_event+0x12c>
   1111c:	add	r0, pc, r0
   11120:	str	r6, [r0]
   11124:	b	110c0 <rb_epoll_supports_event+0xb0>
   11128:	.word	0x000342c8
   1112c:	.word	0x00005a90
   11130:	.word	0x00034234
   11134:	.word	0x00034278
   11138:	.word	0x00034270
   1113c:	.word	0x000341cc
   11140:	.word	0x000341dc

00011144 <rb_epoll_init_event>:
   11144:	push	{r4, r5, fp, lr}
   11148:	add	fp, sp, #8
   1114c:	sub	sp, sp, #128	; 0x80
   11150:	bl	11010 <rb_epoll_supports_event>
   11154:	ldr	r0, [pc, #168]	; 11204 <rb_epoll_init_event+0xc0>
   11158:	add	r0, pc, r0
   1115c:	ldrb	r0, [r0]
   11160:	cmp	r0, #0
   11164:	bne	111fc <rb_epoll_init_event+0xb8>
   11168:	mov	r4, sp
   1116c:	mov	r0, r4
   11170:	bl	4cd0 <sigemptyset@plt>
   11174:	bl	4dc0 <__libc_current_sigrtmin@plt>
   11178:	mov	r1, r0
   1117c:	mov	r0, r4
   11180:	bl	518c <sigaddset@plt>
   11184:	mov	r0, #0
   11188:	mov	r1, r4
   1118c:	mov	r2, #0
   11190:	bl	52b8 <sigprocmask@plt>
   11194:	mov	r0, r4
   11198:	bl	4cd0 <sigemptyset@plt>
   1119c:	bl	4dc0 <__libc_current_sigrtmin@plt>
   111a0:	mov	r1, r0
   111a4:	mov	r0, r4
   111a8:	bl	518c <sigaddset@plt>
   111ac:	mvn	r0, #0
   111b0:	mov	r1, r4
   111b4:	mov	r2, #0
   111b8:	mvn	r5, #0
   111bc:	bl	4d78 <signalfd@plt>
   111c0:	cmn	r0, #1
   111c4:	beq	111f0 <rb_epoll_init_event+0xac>
   111c8:	ldr	r2, [pc, #60]	; 1120c <rb_epoll_init_event+0xc8>
   111cc:	mov	r1, #64	; 0x40
   111d0:	add	r2, pc, r2
   111d4:	bl	5384 <rb_open@plt>
   111d8:	mov	r4, r0
   111dc:	bl	4f40 <rb_set_nb@plt>
   111e0:	mov	r0, r4
   111e4:	mov	r1, #0
   111e8:	bl	11210 <signalfd_handler>
   111ec:	b	111fc <rb_epoll_init_event+0xb8>
   111f0:	ldr	r0, [pc, #16]	; 11208 <rb_epoll_init_event+0xc4>
   111f4:	add	r0, pc, r0
   111f8:	str	r5, [r0]
   111fc:	sub	sp, fp, #8
   11200:	pop	{r4, r5, fp, pc}
   11204:	.word	0x00034194
   11208:	.word	0x000340f4
   1120c:	.word	0x00005914

00011210 <signalfd_handler>:
   11210:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   11214:	add	fp, sp, #24
   11218:	add	r1, pc, #264	; 0x108
   1121c:	ldr	r5, [pc, #276]	; 11338 <signalfd_handler+0x128>
   11220:	mov	r4, r0
   11224:	mov	r0, #0
   11228:	vmov.i32	q11, #128	; 0x00000080
   1122c:	vmov.i32	q12, #4	; 0x00000004
   11230:	vld1.64	{d16-d17}, [r1]
   11234:	ldr	r1, [pc, #256]	; 1133c <signalfd_handler+0x12c>
   11238:	add	r5, pc, r5
   1123c:	vdup.32	q9, r5
   11240:	add	r1, pc, r1
   11244:	vshl.s32	q13, q8, #7
   11248:	add	r2, r1, r0
   1124c:	add	r0, r0, #32
   11250:	vadd.i32	q8, q8, q12
   11254:	vadd.i32	q10, q9, q13
   11258:	cmp	r0, #128	; 0x80
   1125c:	vst2.32	{d20-d23}, [r2]
   11260:	bne	11244 <signalfd_handler+0x34>
   11264:	mov	r0, r4
   11268:	bl	4e20 <rb_get_fd@plt>
   1126c:	ldr	r1, [pc, #204]	; 11340 <signalfd_handler+0x130>
   11270:	mov	r2, #16
   11274:	add	r1, pc, r1
   11278:	bl	5564 <readv@plt>
   1127c:	cmp	r0, #0
   11280:	beq	11314 <signalfd_handler+0x104>
   11284:	ldr	r8, [pc, #184]	; 11344 <signalfd_handler+0x134>
   11288:	add	r5, r5, #48	; 0x30
   1128c:	add	r8, pc, r8
   11290:	cmp	r0, #0
   11294:	blt	112e4 <signalfd_handler+0xd4>
   11298:	cmp	r0, #128	; 0x80
   1129c:	blt	112c4 <signalfd_handler+0xb4>
   112a0:	lsr	r7, r0, #7
   112a4:	mov	r6, r5
   112a8:	ldr	r0, [r6]
   112ac:	cmp	r0, #0
   112b0:	beq	112b8 <signalfd_handler+0xa8>
   112b4:	bl	51b0 <rb_run_one_event@plt>
   112b8:	add	r6, r6, #128	; 0x80
   112bc:	subs	r7, r7, #1
   112c0:	bne	112a8 <signalfd_handler+0x98>
   112c4:	mov	r0, r4
   112c8:	bl	4e20 <rb_get_fd@plt>
   112cc:	mov	r1, r8
   112d0:	mov	r2, #16
   112d4:	bl	5564 <readv@plt>
   112d8:	cmp	r0, #0
   112dc:	bne	11290 <signalfd_handler+0x80>
   112e0:	b	11314 <signalfd_handler+0x104>
   112e4:	bl	55e8 <__errno_location@plt>
   112e8:	ldr	r0, [r0]
   112ec:	bl	4d18 <rb_ignore_errno@plt>
   112f0:	cmp	r0, #0
   112f4:	beq	11314 <signalfd_handler+0x104>
   112f8:	ldr	r2, [pc, #72]	; 11348 <signalfd_handler+0x138>
   112fc:	mov	r0, r4
   11300:	mov	r1, #1
   11304:	mov	r3, #0
   11308:	add	r2, pc, r2
   1130c:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   11310:	b	4de4 <rb_setselect@plt>
   11314:	mov	r0, r4
   11318:	bl	5174 <rb_close@plt>
   1131c:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   11320:	b	11144 <rb_epoll_init_event>
   11324:	nop	{0}
   11328:	.word	0x00000000
   1132c:	.word	0x00000001
   11330:	.word	0x00000002
   11334:	.word	0x00000003
   11338:	.word	0x000340c0
   1133c:	.word	0x000348b8
   11340:	.word	0x00034884
   11344:	.word	0x0003486c
   11348:	.word	0xffffff00

0001134c <rb_epoll_sched_event>:
   1134c:	push	{r4, r5, r6, r7, fp, lr}
   11350:	add	fp, sp, #16
   11354:	sub	sp, sp, #80	; 0x50
   11358:	mov	r5, r0
   1135c:	ldr	r0, [pc, #536]	; 1157c <rb_epoll_sched_event+0x230>
   11360:	mov	r6, r1
   11364:	add	r0, pc, r0
   11368:	ldrb	r0, [r0]
   1136c:	cmp	r0, #1
   11370:	bne	11438 <rb_epoll_sched_event+0xec>
   11374:	mov	r0, #0
   11378:	mov	r1, #0
   1137c:	mov	r4, #0
   11380:	bl	54bc <timerfd_create@plt>
   11384:	cmn	r0, #1
   11388:	ble	1150c <rb_epoll_sched_event+0x1c0>
   1138c:	str	r4, [sp, #20]
   11390:	str	r4, [sp, #16]
   11394:	str	r6, [sp, #24]
   11398:	str	r4, [sp, #28]
   1139c:	mov	r7, r0
   113a0:	add	r2, sp, #16
   113a4:	mov	r3, #0
   113a8:	mov	r4, #0
   113ac:	ldr	r0, [r5, #24]
   113b0:	cmp	r0, #0
   113b4:	addne	r0, sp, #16
   113b8:	addne	r0, r0, #8
   113bc:	ldrdne	r0, [r0]
   113c0:	strne	r1, [sp, #20]
   113c4:	strne	r0, [sp, #16]
   113c8:	mov	r0, r7
   113cc:	mov	r1, #0
   113d0:	bl	5540 <timerfd_settime@plt>
   113d4:	cmn	r0, #1
   113d8:	ble	11548 <rb_epoll_sched_event+0x1fc>
   113dc:	ldr	r3, [r5, #20]
   113e0:	ldr	r4, [pc, #416]	; 11588 <rb_epoll_sched_event+0x23c>
   113e4:	ldr	r2, [pc, #416]	; 1158c <rb_epoll_sched_event+0x240>
   113e8:	mov	r1, #136	; 0x88
   113ec:	add	r4, pc, r4
   113f0:	add	r2, pc, r2
   113f4:	mov	r0, r4
   113f8:	bl	54a4 <snprintf@plt>
   113fc:	mov	r0, r7
   11400:	mov	r1, #64	; 0x40
   11404:	mov	r2, r4
   11408:	bl	5384 <rb_open@plt>
   1140c:	mov	r6, r0
   11410:	bl	4f40 <rb_set_nb@plt>
   11414:	str	r6, [r5, #40]	; 0x28
   11418:	mov	r0, r6
   1141c:	mov	r1, #1
   11420:	mov	r3, r5
   11424:	mov	r4, #1
   11428:	ldr	r2, [pc, #352]	; 11590 <rb_epoll_sched_event+0x244>
   1142c:	add	r2, pc, r2
   11430:	bl	4de4 <rb_setselect@plt>
   11434:	b	1156c <rb_epoll_sched_event+0x220>
   11438:	add	r0, sp, #16
   1143c:	vmov.i32	q8, #0	; 0x00000000
   11440:	add	r1, r0, #32
   11444:	vst1.64	{d16-d17}, [r1]
   11448:	add	r1, r0, #16
   1144c:	vst1.64	{d16-d17}, [r1]
   11450:	mov	r1, #48	; 0x30
   11454:	vst1.64	{d16-d17}, [r0], r1
   11458:	mov	r1, #4
   1145c:	vst1.64	{d16-d17}, [r0]
   11460:	mov	r0, #1
   11464:	bl	4f10 <calloc@plt>
   11468:	cmp	r0, #0
   1146c:	beq	11578 <rb_epoll_sched_event+0x22c>
   11470:	mov	r4, #0
   11474:	str	r0, [r5, #40]	; 0x28
   11478:	mov	r7, r0
   1147c:	str	r4, [sp, #24]
   11480:	bl	4dc0 <__libc_current_sigrtmin@plt>
   11484:	str	r0, [sp, #20]
   11488:	add	r1, sp, #16
   1148c:	mov	r0, #0
   11490:	mov	r2, r7
   11494:	str	r5, [sp, #16]
   11498:	bl	4e68 <timer_create@plt>
   1149c:	cmn	r0, #1
   114a0:	ble	11528 <rb_epoll_sched_event+0x1dc>
   114a4:	str	r4, [sp]
   114a8:	stmib	sp, {r4, r6}
   114ac:	str	r4, [sp, #12]
   114b0:	mov	r2, sp
   114b4:	mov	r3, #0
   114b8:	ldr	r0, [r5, #24]
   114bc:	cmp	r0, #0
   114c0:	movne	r0, sp
   114c4:	addne	r0, r0, #8
   114c8:	ldrdne	r0, [r0]
   114cc:	stmne	sp, {r0, r1}
   114d0:	mov	r1, #0
   114d4:	ldr	r0, [r7]
   114d8:	bl	506c <timer_settime@plt>
   114dc:	mov	r4, #1
   114e0:	cmn	r0, #1
   114e4:	bgt	1156c <rb_epoll_sched_event+0x220>
   114e8:	bl	55e8 <__errno_location@plt>
   114ec:	ldr	r0, [r0]
   114f0:	bl	4cdc <strerror@plt>
   114f4:	mov	r1, r0
   114f8:	ldr	r0, [pc, #152]	; 11598 <rb_epoll_sched_event+0x24c>
   114fc:	add	r0, pc, r0
   11500:	bl	5228 <rb_lib_log@plt>
   11504:	mov	r4, #0
   11508:	b	1156c <rb_epoll_sched_event+0x220>
   1150c:	bl	55e8 <__errno_location@plt>
   11510:	ldr	r0, [r0]
   11514:	bl	4cdc <strerror@plt>
   11518:	mov	r1, r0
   1151c:	ldr	r0, [pc, #92]	; 11580 <rb_epoll_sched_event+0x234>
   11520:	add	r0, pc, r0
   11524:	b	11540 <rb_epoll_sched_event+0x1f4>
   11528:	bl	55e8 <__errno_location@plt>
   1152c:	ldr	r0, [r0]
   11530:	bl	4cdc <strerror@plt>
   11534:	mov	r1, r0
   11538:	ldr	r0, [pc, #84]	; 11594 <rb_epoll_sched_event+0x248>
   1153c:	add	r0, pc, r0
   11540:	bl	5228 <rb_lib_log@plt>
   11544:	b	1156c <rb_epoll_sched_event+0x220>
   11548:	bl	55e8 <__errno_location@plt>
   1154c:	ldr	r0, [r0]
   11550:	bl	4cdc <strerror@plt>
   11554:	mov	r1, r0
   11558:	ldr	r0, [pc, #36]	; 11584 <rb_epoll_sched_event+0x238>
   1155c:	add	r0, pc, r0
   11560:	bl	5228 <rb_lib_log@plt>
   11564:	mov	r0, r7
   11568:	bl	524c <close@plt>
   1156c:	mov	r0, r4
   11570:	sub	sp, fp, #16
   11574:	pop	{r4, r5, r6, r7, fp, pc}
   11578:	bl	5288 <rb_outofmemory@plt>
   1157c:	.word	0x00033f88
   11580:	.word	0x000055cd
   11584:	.word	0x000055a5
   11588:	.word	0x0003478c
   1158c:	.word	0x00005726
   11590:	.word	0x000001bc
   11594:	.word	0x00005617
   11598:	.word	0x00005669

0001159c <rb_epoll_unsched_event>:
   1159c:	push	{r4, sl, fp, lr}
   115a0:	add	fp, sp, #8
   115a4:	mov	r4, r0
   115a8:	ldr	r0, [r0, #40]	; 0x28
   115ac:	ldr	r1, [pc, #56]	; 115ec <rb_epoll_unsched_event+0x50>
   115b0:	add	r1, pc, r1
   115b4:	ldrb	r1, [r1]
   115b8:	cmp	r1, #1
   115bc:	bne	115c8 <rb_epoll_unsched_event+0x2c>
   115c0:	bl	5174 <rb_close@plt>
   115c4:	b	115e0 <rb_epoll_unsched_event+0x44>
   115c8:	ldr	r0, [r0]
   115cc:	bl	5378 <timer_delete@plt>
   115d0:	ldr	r0, [r4, #40]	; 0x28
   115d4:	cmp	r0, #0
   115d8:	beq	115e0 <rb_epoll_unsched_event+0x44>
   115dc:	bl	500c <free@plt>
   115e0:	mov	r0, #0
   115e4:	str	r0, [r4, #40]	; 0x28
   115e8:	pop	{r4, sl, fp, pc}
   115ec:	.word	0x00033d3c

000115f0 <rb_read_timerfd>:
   115f0:	push	{r4, r5, fp, lr}
   115f4:	add	fp, sp, #8
   115f8:	sub	sp, sp, #8
   115fc:	mov	r5, r0
   11600:	cmp	r1, #0
   11604:	beq	11664 <rb_read_timerfd+0x74>
   11608:	mov	r4, r1
   1160c:	mov	r1, sp
   11610:	mov	r0, r5
   11614:	mov	r2, #8
   11618:	bl	509c <rb_read@plt>
   1161c:	cmp	r0, #0
   11620:	beq	11670 <rb_read_timerfd+0x80>
   11624:	cmn	r0, #1
   11628:	bgt	11640 <rb_read_timerfd+0x50>
   1162c:	bl	55e8 <__errno_location@plt>
   11630:	ldr	r0, [r0]
   11634:	bl	4d18 <rb_ignore_errno@plt>
   11638:	cmp	r0, #0
   1163c:	beq	11670 <rb_read_timerfd+0x80>
   11640:	ldr	r2, [pc, #96]	; 116a8 <rb_read_timerfd+0xb8>
   11644:	mov	r0, r5
   11648:	mov	r1, #1
   1164c:	mov	r3, r4
   11650:	add	r2, pc, r2
   11654:	bl	4de4 <rb_setselect@plt>
   11658:	mov	r0, r4
   1165c:	bl	51b0 <rb_run_one_event@plt>
   11660:	b	1169c <rb_read_timerfd+0xac>
   11664:	mov	r0, r5
   11668:	bl	5174 <rb_close@plt>
   1166c:	b	1169c <rb_read_timerfd+0xac>
   11670:	mov	r0, r5
   11674:	bl	5174 <rb_close@plt>
   11678:	ldr	r4, [r4, #20]
   1167c:	bl	55e8 <__errno_location@plt>
   11680:	ldr	r0, [r0]
   11684:	bl	4cdc <strerror@plt>
   11688:	mov	r2, r0
   1168c:	ldr	r0, [pc, #16]	; 116a4 <rb_read_timerfd+0xb4>
   11690:	mov	r1, r4
   11694:	add	r0, pc, r0
   11698:	bl	5228 <rb_lib_log@plt>
   1169c:	sub	sp, fp, #8
   116a0:	pop	{r4, r5, fp, pc}
   116a4:	.word	0x0000548e
   116a8:	.word	0xffffff98

000116ac <rb_setup_fd_poll>:
   116ac:	mov	r0, #0
   116b0:	bx	lr

000116b4 <rb_init_netio_poll>:
   116b4:	push	{r4, r5, fp, lr}
   116b8:	add	fp, sp, #8
   116bc:	bl	4da8 <rb_getmaxconnect@plt>
   116c0:	lsl	r1, r0, #3
   116c4:	mov	r0, #1
   116c8:	bl	4f10 <calloc@plt>
   116cc:	cmp	r0, #0
   116d0:	beq	11738 <rb_init_netio_poll+0x84>
   116d4:	ldr	r1, [pc, #96]	; 1173c <rb_init_netio_poll+0x88>
   116d8:	add	r1, pc, r1
   116dc:	str	r0, [r1]
   116e0:	bl	4da8 <rb_getmaxconnect@plt>
   116e4:	ldr	r1, [pc, #84]	; 11740 <rb_init_netio_poll+0x8c>
   116e8:	add	r1, pc, r1
   116ec:	str	r0, [r1]
   116f0:	bl	4da8 <rb_getmaxconnect@plt>
   116f4:	cmp	r0, #1
   116f8:	blt	11720 <rb_init_netio_poll+0x6c>
   116fc:	mov	r4, #0
   11700:	mvn	r5, #0
   11704:	ldr	r0, [pc, #56]	; 11744 <rb_init_netio_poll+0x90>
   11708:	ldr	r0, [pc, r0]
   1170c:	str	r5, [r0, r4, lsl #3]
   11710:	add	r4, r4, #1
   11714:	bl	4da8 <rb_getmaxconnect@plt>
   11718:	cmp	r4, r0
   1171c:	blt	11704 <rb_init_netio_poll+0x50>
   11720:	ldr	r0, [pc, #32]	; 11748 <rb_init_netio_poll+0x94>
   11724:	mov	r1, #0
   11728:	add	r0, pc, r0
   1172c:	str	r1, [r0]
   11730:	mov	r0, #0
   11734:	pop	{r4, r5, fp, pc}
   11738:	bl	5288 <rb_outofmemory@plt>
   1173c:	.word	0x00034528
   11740:	.word	0x00034520
   11744:	.word	0x000344f8
   11748:	.word	0x000344dc

0001174c <rb_setselect_poll>:
   1174c:	push	{r4, r5, r6, r7, fp, lr}
   11750:	add	fp, sp, #16
   11754:	cmp	r0, #0
   11758:	beq	11854 <rb_setselect_poll+0x108>
   1175c:	mov	r4, r0
   11760:	tst	r1, #1
   11764:	beq	11784 <rb_setselect_poll+0x38>
   11768:	str	r2, [r4, #28]
   1176c:	str	r3, [r4, #32]
   11770:	cmp	r2, #0
   11774:	ldr	r0, [r4, #20]
   11778:	orr	r6, r0, #64	; 0x40
   1177c:	biceq	r6, r0, #64	; 0x40
   11780:	str	r6, [r4, #20]
   11784:	tst	r1, #2
   11788:	beq	117a8 <rb_setselect_poll+0x5c>
   1178c:	str	r2, [r4, #36]	; 0x24
   11790:	str	r3, [r4, #40]	; 0x28
   11794:	cmp	r2, #0
   11798:	ldr	r0, [r4, #20]
   1179c:	orr	r1, r0, #256	; 0x100
   117a0:	biceq	r1, r0, #256	; 0x100
   117a4:	str	r1, [r4, #20]
   117a8:	ldr	r0, [r4, #12]
   117ac:	ldr	r6, [pc, #296]	; 118dc <rb_setselect_poll+0x190>
   117b0:	ldr	r6, [pc, r6]
   117b4:	cmp	r6, r0
   117b8:	ble	11858 <rb_setselect_poll+0x10c>
   117bc:	ldr	r1, [r4, #20]
   117c0:	cmp	r1, #0
   117c4:	ble	117f0 <rb_setselect_poll+0xa4>
   117c8:	ldr	r0, [r4, #12]
   117cc:	ldr	r2, [pc, #292]	; 118f8 <rb_setselect_poll+0x1ac>
   117d0:	ldr	r2, [pc, r2]
   117d4:	str	r0, [r2, r0, lsl #3]!
   117d8:	strh	r1, [r2, #4]
   117dc:	ldr	r1, [pc, #280]	; 118fc <rb_setselect_poll+0x1b0>
   117e0:	ldr	r1, [pc, r1]
   117e4:	cmp	r0, r1
   117e8:	pople	{r4, r5, r6, r7, fp, pc}
   117ec:	b	11848 <rb_setselect_poll+0xfc>
   117f0:	ldr	r0, [r4, #12]
   117f4:	ldr	r1, [pc, #244]	; 118f0 <rb_setselect_poll+0x1a4>
   117f8:	mvn	r2, #0
   117fc:	ldr	r1, [pc, r1]
   11800:	mov	r3, r1
   11804:	str	r2, [r3, r0, lsl #3]!
   11808:	mov	r2, #0
   1180c:	strh	r2, [r3, #4]
   11810:	ldr	r2, [pc, #220]	; 118f4 <rb_setselect_poll+0x1a8>
   11814:	ldr	r2, [pc, r2]
   11818:	cmp	r0, r2
   1181c:	bne	11854 <rb_setselect_poll+0x108>
   11820:	cmp	r2, #0
   11824:	blt	11854 <rb_setselect_poll+0x108>
   11828:	sub	r1, r1, #8
   1182c:	mov	r2, r0
   11830:	subs	r0, r0, #1
   11834:	blt	11844 <rb_setselect_poll+0xf8>
   11838:	ldr	r3, [r1, r2, lsl #3]
   1183c:	cmn	r3, #1
   11840:	beq	1182c <rb_setselect_poll+0xe0>
   11844:	sub	r0, r2, #1
   11848:	ldr	r1, [pc, #176]	; 11900 <rb_setselect_poll+0x1b4>
   1184c:	add	r1, pc, r1
   11850:	str	r0, [r1]
   11854:	pop	{r4, r5, r6, r7, fp, pc}
   11858:	ldr	r0, [pc, #128]	; 118e0 <rb_setselect_poll+0x194>
   1185c:	add	r1, r6, #1024	; 0x400
   11860:	add	r0, pc, r0
   11864:	str	r1, [r0]
   11868:	lsl	r1, r1, #3
   1186c:	ldr	r0, [pc, #112]	; 118e4 <rb_setselect_poll+0x198>
   11870:	ldr	r0, [pc, r0]
   11874:	bl	5534 <realloc@plt>
   11878:	cmp	r0, #0
   1187c:	beq	118d8 <rb_setselect_poll+0x18c>
   11880:	mov	r5, r0
   11884:	ldr	r0, [pc, #92]	; 118e8 <rb_setselect_poll+0x19c>
   11888:	add	r7, r6, #1
   1188c:	mov	r1, #0
   11890:	mov	r2, #8192	; 0x2000
   11894:	add	r0, pc, r0
   11898:	str	r5, [r0]
   1189c:	add	r0, r5, r7, lsl #3
   118a0:	bl	4f4c <memset@plt>
   118a4:	ldr	r0, [pc, #64]	; 118ec <rb_setselect_poll+0x1a0>
   118a8:	ldr	r0, [pc, r0]
   118ac:	cmp	r7, r0
   118b0:	bge	117bc <rb_setselect_poll+0x70>
   118b4:	sub	r0, r0, #1
   118b8:	add	r1, r5, r6, lsl #3
   118bc:	mvn	r2, #0
   118c0:	sub	r0, r0, r6
   118c4:	add	r1, r1, #8
   118c8:	str	r2, [r1], #8
   118cc:	subs	r0, r0, #1
   118d0:	bne	118c8 <rb_setselect_poll+0x17c>
   118d4:	b	117bc <rb_setselect_poll+0x70>
   118d8:	bl	5288 <rb_outofmemory@plt>
   118dc:	.word	0x00034458
   118e0:	.word	0x000343a8
   118e4:	.word	0x00034390
   118e8:	.word	0x0003436c
   118ec:	.word	0x00034360
   118f0:	.word	0x00034404
   118f4:	.word	0x000343f0
   118f8:	.word	0x00034430
   118fc:	.word	0x00034424
   11900:	.word	0x000343b8

00011904 <rb_select_poll>:
   11904:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   11908:	add	fp, sp, #24
   1190c:	mov	r2, r0
   11910:	ldr	r0, [pc, #388]	; 11a9c <rb_select_poll+0x198>
   11914:	ldr	r0, [pc, r0]
   11918:	ldr	r1, [pc, #384]	; 11aa0 <rb_select_poll+0x19c>
   1191c:	ldr	r1, [pc, r1]
   11920:	add	r1, r1, #1
   11924:	bl	5300 <poll@plt>
   11928:	mov	r4, r0
   1192c:	bl	5294 <rb_set_time@plt>
   11930:	cmn	r4, #1
   11934:	ble	11a84 <rb_select_poll+0x180>
   11938:	mov	r0, #0
   1193c:	cmp	r4, #0
   11940:	beq	11a80 <rb_select_poll+0x17c>
   11944:	ldr	r1, [pc, #344]	; 11aa4 <rb_select_poll+0x1a0>
   11948:	ldr	r1, [pc, r1]
   1194c:	cmp	r1, #0
   11950:	poplt	{r4, r5, r6, r7, r8, sl, fp, pc}
   11954:	ldr	r6, [pc, #332]	; 11aa8 <rb_select_poll+0x1a4>
   11958:	mov	r8, #0
   1195c:	mov	r0, #0
   11960:	ldr	r6, [pc, r6]
   11964:	b	1198c <rb_select_poll+0x88>
   11968:	ldr	r2, [r4, #36]	; 0x24
   1196c:	ldr	r1, [r4, #40]	; 0x28
   11970:	str	r8, [r4, #36]	; 0x24
   11974:	str	r8, [r4, #40]	; 0x28
   11978:	cmp	r2, #0
   1197c:	beq	11a28 <rb_select_poll+0x124>
   11980:	mov	r0, r4
   11984:	blx	r2
   11988:	b	11a28 <rb_select_poll+0x124>
   1198c:	ldr	r1, [pc, #280]	; 11aac <rb_select_poll+0x1a8>
   11990:	mov	r7, r0
   11994:	ldr	r1, [pc, r1]
   11998:	ldr	r0, [r1, r0, lsl #3]!
   1199c:	ldrsh	r5, [r1, #6]
   119a0:	cmp	r5, #0
   119a4:	beq	11a68 <rb_select_poll+0x164>
   119a8:	cmp	r0, #0
   119ac:	blt	11a68 <rb_select_poll+0x164>
   119b0:	eor	r1, r0, r0, lsr #12
   119b4:	ldr	r2, [r6]
   119b8:	bfc	r1, #12, #20
   119bc:	eor	r1, r1, r0, lsr #24
   119c0:	add	r1, r1, r1, lsl #1
   119c4:	ldr	r1, [r2, r1, lsl #2]
   119c8:	b	119d0 <rb_select_poll+0xcc>
   119cc:	ldr	r1, [r1, #8]
   119d0:	cmp	r1, #0
   119d4:	beq	11a68 <rb_select_poll+0x164>
   119d8:	ldr	r4, [r1]
   119dc:	ldr	r2, [r4, #12]
   119e0:	cmp	r2, r0
   119e4:	bne	119cc <rb_select_poll+0xc8>
   119e8:	cmp	r4, #0
   119ec:	beq	11a68 <rb_select_poll+0x164>
   119f0:	tst	r5, #89	; 0x59
   119f4:	beq	11a18 <rb_select_poll+0x114>
   119f8:	ldr	r2, [r4, #28]
   119fc:	ldr	r1, [r4, #32]
   11a00:	str	r8, [r4, #28]
   11a04:	str	r8, [r4, #32]
   11a08:	cmp	r2, #0
   11a0c:	beq	11a18 <rb_select_poll+0x114>
   11a10:	mov	r0, r4
   11a14:	blx	r2
   11a18:	tst	r5, #284	; 0x11c
   11a1c:	ldrbne	r0, [r4, #16]
   11a20:	andsne	r0, r0, #1
   11a24:	bne	11968 <rb_select_poll+0x64>
   11a28:	ldr	r0, [r4, #28]
   11a2c:	cmp	r0, #0
   11a30:	bne	11a48 <rb_select_poll+0x144>
   11a34:	mov	r0, r4
   11a38:	mov	r1, #1
   11a3c:	mov	r2, #0
   11a40:	mov	r3, #0
   11a44:	bl	1174c <rb_setselect_poll>
   11a48:	ldr	r0, [r4, #36]	; 0x24
   11a4c:	cmp	r0, #0
   11a50:	bne	11a68 <rb_select_poll+0x164>
   11a54:	mov	r0, r4
   11a58:	mov	r1, #2
   11a5c:	mov	r2, #0
   11a60:	mov	r3, #0
   11a64:	bl	1174c <rb_setselect_poll>
   11a68:	ldr	r1, [pc, #64]	; 11ab0 <rb_select_poll+0x1ac>
   11a6c:	add	r0, r7, #1
   11a70:	ldr	r1, [pc, r1]
   11a74:	cmp	r7, r1
   11a78:	blt	1198c <rb_select_poll+0x88>
   11a7c:	mov	r0, #0
   11a80:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   11a84:	bl	55e8 <__errno_location@plt>
   11a88:	ldr	r0, [r0]
   11a8c:	bl	4d18 <rb_ignore_errno@plt>
   11a90:	cmp	r0, #0
   11a94:	movwne	r0, #5
   11a98:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   11a9c:	.word	0x000342ec
   11aa0:	.word	0x000342e8
   11aa4:	.word	0x000342bc
   11aa8:	.word	0x00016a40
   11aac:	.word	0x0003426c
   11ab0:	.word	0x00034194

00011ab4 <rb_ports_supports_event>:
   11ab4:	push	{fp, lr}
   11ab8:	mov	fp, sp
   11abc:	bl	55e8 <__errno_location@plt>
   11ac0:	mov	r1, #38	; 0x26
   11ac4:	str	r1, [r0]
   11ac8:	mov	r0, #0
   11acc:	pop	{fp, pc}

00011ad0 <rb_ports_init_event>:
   11ad0:	bx	lr

00011ad4 <rb_ports_sched_event>:
   11ad4:	push	{fp, lr}
   11ad8:	mov	fp, sp
   11adc:	bl	55e8 <__errno_location@plt>
   11ae0:	mov	r1, #38	; 0x26
   11ae4:	str	r1, [r0]
   11ae8:	mvn	r0, #0
   11aec:	pop	{fp, pc}

00011af0 <rb_ports_unsched_event>:
   11af0:	bx	lr

00011af4 <rb_init_netio_ports>:
   11af4:	mov	r0, #38	; 0x26
   11af8:	bx	lr

00011afc <rb_setselect_ports>:
   11afc:	push	{fp, lr}
   11b00:	mov	fp, sp
   11b04:	bl	55e8 <__errno_location@plt>
   11b08:	mov	r1, #38	; 0x26
   11b0c:	str	r1, [r0]
   11b10:	pop	{fp, pc}

00011b14 <rb_select_ports>:
   11b14:	push	{fp, lr}
   11b18:	mov	fp, sp
   11b1c:	bl	55e8 <__errno_location@plt>
   11b20:	mov	r1, #38	; 0x26
   11b24:	str	r1, [r0]
   11b28:	mvn	r0, #0
   11b2c:	pop	{fp, pc}

00011b30 <rb_setup_fd_ports>:
   11b30:	push	{fp, lr}
   11b34:	mov	fp, sp
   11b38:	bl	55e8 <__errno_location@plt>
   11b3c:	mov	r1, #38	; 0x26
   11b40:	str	r1, [r0]
   11b44:	mvn	r0, #0
   11b48:	pop	{fp, pc}

00011b4c <rb_init_netio_sigio>:
   11b4c:	push	{r4, r5, r6, sl, fp, lr}
   11b50:	add	fp, sp, #16
   11b54:	bl	4da8 <rb_getmaxconnect@plt>
   11b58:	lsl	r1, r0, #3
   11b5c:	mov	r0, #1
   11b60:	bl	4f10 <calloc@plt>
   11b64:	cmp	r0, #0
   11b68:	beq	11c18 <rb_init_netio_sigio+0xcc>
   11b6c:	ldr	r4, [pc, #168]	; 11c1c <rb_init_netio_sigio+0xd0>
   11b70:	ldr	r4, [pc, r4]
   11b74:	str	r0, [r4]
   11b78:	bl	4da8 <rb_getmaxconnect@plt>
   11b7c:	str	r0, [r4, #8]
   11b80:	bl	4da8 <rb_getmaxconnect@plt>
   11b84:	cmp	r0, #1
   11b88:	blt	11bac <rb_init_netio_sigio+0x60>
   11b8c:	mov	r5, #0
   11b90:	mvn	r6, #0
   11b94:	ldr	r0, [r4]
   11b98:	str	r6, [r0, r5, lsl #3]
   11b9c:	add	r5, r5, #1
   11ba0:	bl	4da8 <rb_getmaxconnect@plt>
   11ba4:	cmp	r5, r0
   11ba8:	blt	11b94 <rb_init_netio_sigio+0x48>
   11bac:	ldr	r0, [pc, #108]	; 11c20 <rb_init_netio_sigio+0xd4>
   11bb0:	mov	r1, #1
   11bb4:	add	r0, pc, r0
   11bb8:	strb	r1, [r0]
   11bbc:	mov	r0, #0
   11bc0:	str	r0, [r4, #4]
   11bc4:	ldr	r4, [pc, #88]	; 11c24 <rb_init_netio_sigio+0xd8>
   11bc8:	add	r4, pc, r4
   11bcc:	mov	r0, r4
   11bd0:	bl	4cd0 <sigemptyset@plt>
   11bd4:	bl	4dc0 <__libc_current_sigrtmin@plt>
   11bd8:	mov	r1, r0
   11bdc:	mov	r0, r4
   11be0:	bl	518c <sigaddset@plt>
   11be4:	mov	r0, r4
   11be8:	mov	r1, #29
   11bec:	bl	518c <sigaddset@plt>
   11bf0:	bl	4dc0 <__libc_current_sigrtmin@plt>
   11bf4:	add	r1, r0, #1
   11bf8:	mov	r0, r4
   11bfc:	bl	518c <sigaddset@plt>
   11c00:	mov	r0, #0
   11c04:	mov	r1, r4
   11c08:	mov	r2, #0
   11c0c:	bl	52b8 <sigprocmask@plt>
   11c10:	mov	r0, #0
   11c14:	pop	{r4, r5, r6, sl, fp, pc}
   11c18:	bl	5288 <rb_outofmemory@plt>
   11c1c:	.word	0x00016840
   11c20:	.word	0x00034058
   11c24:	.word	0x00034048

00011c28 <rb_setup_fd_sigio>:
   11c28:	push	{r4, r5, r6, sl, fp, lr}
   11c2c:	add	fp, sp, #16
   11c30:	ldr	r5, [r0, #12]
   11c34:	mov	r1, #3
   11c38:	mov	r2, #0
   11c3c:	mov	r4, #0
   11c40:	mov	r0, r5
   11c44:	bl	54f8 <fcntl@plt>
   11c48:	cmn	r0, #1
   11c4c:	beq	11cc4 <rb_setup_fd_sigio+0x9c>
   11c50:	mov	r6, r0
   11c54:	tst	r0, #8192	; 0x2000
   11c58:	beq	11c70 <rb_setup_fd_sigio+0x48>
   11c5c:	bic	r6, r6, #8192	; 0x2000
   11c60:	mov	r0, r5
   11c64:	mov	r1, #4
   11c68:	mov	r2, r6
   11c6c:	bl	54f8 <fcntl@plt>
   11c70:	orr	r2, r6, #10240	; 0x2800
   11c74:	mov	r0, r5
   11c78:	mov	r1, #4
   11c7c:	bl	54f8 <fcntl@plt>
   11c80:	cmn	r0, #1
   11c84:	beq	11cc4 <rb_setup_fd_sigio+0x9c>
   11c88:	bl	4dc0 <__libc_current_sigrtmin@plt>
   11c8c:	mov	r2, r0
   11c90:	mov	r0, r5
   11c94:	mov	r1, #10
   11c98:	bl	54f8 <fcntl@plt>
   11c9c:	cmn	r0, #1
   11ca0:	beq	11cc4 <rb_setup_fd_sigio+0x9c>
   11ca4:	bl	53cc <getpid@plt>
   11ca8:	mov	r2, r0
   11cac:	mov	r0, r5
   11cb0:	mov	r1, #8
   11cb4:	bl	54f8 <fcntl@plt>
   11cb8:	add	r4, r0, #1
   11cbc:	cmn	r0, #1
   11cc0:	movwne	r4, #1
   11cc4:	mov	r0, r4
   11cc8:	pop	{r4, r5, r6, sl, fp, pc}

00011ccc <rb_setselect_sigio>:
   11ccc:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   11cd0:	add	fp, sp, #24
   11cd4:	cmp	r0, #0
   11cd8:	beq	11dc0 <rb_setselect_sigio+0xf4>
   11cdc:	mov	r4, r0
   11ce0:	tst	r1, #1
   11ce4:	beq	11d04 <rb_setselect_sigio+0x38>
   11ce8:	str	r2, [r4, #28]
   11cec:	str	r3, [r4, #32]
   11cf0:	cmp	r2, #0
   11cf4:	ldr	r0, [r4, #20]
   11cf8:	orr	r7, r0, #64	; 0x40
   11cfc:	biceq	r7, r0, #64	; 0x40
   11d00:	str	r7, [r4, #20]
   11d04:	tst	r1, #2
   11d08:	beq	11d28 <rb_setselect_sigio+0x5c>
   11d0c:	str	r2, [r4, #36]	; 0x24
   11d10:	str	r3, [r4, #40]	; 0x28
   11d14:	cmp	r2, #0
   11d18:	ldr	r0, [r4, #20]
   11d1c:	orr	r1, r0, #256	; 0x100
   11d20:	biceq	r1, r0, #256	; 0x100
   11d24:	str	r1, [r4, #20]
   11d28:	ldr	r0, [r4, #12]
   11d2c:	ldr	r6, [pc, #252]	; 11e30 <rb_setselect_sigio+0x164>
   11d30:	ldr	r6, [pc, r6]
   11d34:	ldr	r7, [r6, #8]
   11d38:	cmp	r7, r0
   11d3c:	ble	11dc4 <rb_setselect_sigio+0xf8>
   11d40:	ldr	r1, [r4, #20]
   11d44:	cmp	r1, #0
   11d48:	ble	11d6c <rb_setselect_sigio+0xa0>
   11d4c:	ldr	r0, [r4, #12]
   11d50:	ldr	r2, [r6]
   11d54:	str	r0, [r2, r0, lsl #3]!
   11d58:	strh	r1, [r2, #4]
   11d5c:	ldr	r1, [r6, #4]
   11d60:	cmp	r0, r1
   11d64:	strgt	r0, [r6, #4]
   11d68:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   11d6c:	ldr	r1, [r6]
   11d70:	ldr	r0, [r4, #12]
   11d74:	mvn	r2, #0
   11d78:	mov	r3, r1
   11d7c:	str	r2, [r3, r0, lsl #3]!
   11d80:	mov	r2, #0
   11d84:	strh	r2, [r3, #4]
   11d88:	ldr	r2, [r6, #4]
   11d8c:	cmp	r0, r2
   11d90:	bne	11dc0 <rb_setselect_sigio+0xf4>
   11d94:	cmp	r2, #0
   11d98:	poplt	{r4, r5, r6, r7, r8, sl, fp, pc}
   11d9c:	sub	r1, r1, #8
   11da0:	mov	r2, r0
   11da4:	subs	r0, r0, #1
   11da8:	blt	11db8 <rb_setselect_sigio+0xec>
   11dac:	ldr	r3, [r1, r2, lsl #3]
   11db0:	cmn	r3, #1
   11db4:	beq	11da0 <rb_setselect_sigio+0xd4>
   11db8:	sub	r0, r2, #1
   11dbc:	str	r0, [r6, #4]
   11dc0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   11dc4:	add	r1, r7, #1024	; 0x400
   11dc8:	str	r1, [r6, #8]
   11dcc:	lsl	r1, r1, #3
   11dd0:	ldr	r0, [r6]
   11dd4:	bl	5534 <realloc@plt>
   11dd8:	cmp	r0, #0
   11ddc:	beq	11e2c <rb_setselect_sigio+0x160>
   11de0:	add	r8, r7, #1
   11de4:	mov	r5, r0
   11de8:	str	r0, [r6]
   11dec:	mov	r1, #0
   11df0:	mov	r2, #8192	; 0x2000
   11df4:	add	r0, r0, r8, lsl #3
   11df8:	bl	4f4c <memset@plt>
   11dfc:	ldr	r0, [r6, #8]
   11e00:	cmp	r8, r0
   11e04:	bge	11d40 <rb_setselect_sigio+0x74>
   11e08:	sub	r0, r0, #1
   11e0c:	add	r1, r5, r7, lsl #3
   11e10:	mvn	r2, #0
   11e14:	sub	r0, r0, r7
   11e18:	add	r1, r1, #8
   11e1c:	str	r2, [r1], #8
   11e20:	subs	r0, r0, #1
   11e24:	bne	11e1c <rb_setselect_sigio+0x150>
   11e28:	b	11d40 <rb_setselect_sigio+0x74>
   11e2c:	bl	5288 <rb_outofmemory@plt>
   11e30:	.word	0x00016680

00011e34 <rb_select_sigio>:
   11e34:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11e38:	add	fp, sp, #28
   11e3c:	sub	sp, sp, #140	; 0x8c
   11e40:	mov	r4, r0
   11e44:	bl	1220c <rb_sigio_supports_event>
   11e48:	cmn	r4, #1
   11e4c:	bgt	11e58 <rb_select_sigio+0x24>
   11e50:	cmp	r0, #0
   11e54:	beq	11e88 <rb_select_sigio+0x54>
   11e58:	movw	r0, #19923	; 0x4dd3
   11e5c:	movt	r0, #4194	; 0x1062
   11e60:	smmul	r0, r4, r0
   11e64:	asr	r1, r0, #6
   11e68:	add	r0, r1, r0, lsr #31
   11e6c:	mov	r1, #1000	; 0x3e8
   11e70:	str	r0, [sp, #4]
   11e74:	mls	r0, r0, r1, r4
   11e78:	movw	r1, #16960	; 0x4240
   11e7c:	movt	r1, #15
   11e80:	mul	r0, r0, r1
   11e84:	str	r0, [sp, #8]
   11e88:	ldr	r6, [pc, #856]	; 121e8 <rb_select_sigio+0x3b4>
   11e8c:	add	r6, pc, r6
   11e90:	ldrb	r0, [r6]
   11e94:	cmp	r0, #0
   11e98:	bne	1203c <rb_select_sigio+0x208>
   11e9c:	ldr	r9, [pc, #840]	; 121ec <rb_select_sigio+0x3b8>
   11ea0:	add	r5, sp, #12
   11ea4:	add	r8, sp, #4
   11ea8:	add	r9, pc, r9
   11eac:	cmp	r4, #0
   11eb0:	blt	11ed8 <rb_select_sigio+0xa4>
   11eb4:	ldr	r0, [pc, #820]	; 121f0 <rb_select_sigio+0x3bc>
   11eb8:	ldr	r0, [pc, r0]
   11ebc:	cmp	r0, #0
   11ec0:	bne	11ed8 <rb_select_sigio+0xa4>
   11ec4:	mov	r0, r9
   11ec8:	mov	r1, r5
   11ecc:	mov	r2, r8
   11ed0:	bl	4dfc <sigtimedwait@plt>
   11ed4:	b	11ee4 <rb_select_sigio+0xb0>
   11ed8:	mov	r0, r9
   11edc:	mov	r1, r5
   11ee0:	bl	4db4 <sigwaitinfo@plt>
   11ee4:	mov	r7, r0
   11ee8:	cmp	r0, #1
   11eec:	blt	12014 <rb_select_sigio+0x1e0>
   11ef0:	cmp	r7, #29
   11ef4:	beq	12028 <rb_select_sigio+0x1f4>
   11ef8:	bl	4dc0 <__libc_current_sigrtmin@plt>
   11efc:	add	r0, r0, #1
   11f00:	cmp	r7, r0
   11f04:	bne	11f2c <rb_select_sigio+0xf8>
   11f08:	ldr	r0, [pc, #744]	; 121f8 <rb_select_sigio+0x3c4>
   11f0c:	ldr	r0, [pc, r0]
   11f10:	cmp	r0, #0
   11f14:	beq	11f2c <rb_select_sigio+0xf8>
   11f18:	ldr	r0, [sp, #32]
   11f1c:	cmp	r0, #0
   11f20:	beq	12004 <rb_select_sigio+0x1d0>
   11f24:	bl	51b0 <rb_run_one_event@plt>
   11f28:	b	12004 <rb_select_sigio+0x1d0>
   11f2c:	ldr	r0, [pc, #716]	; 12200 <rb_select_sigio+0x3cc>
   11f30:	ldr	r0, [pc, r0]
   11f34:	ldrh	r3, [sp, #24]
   11f38:	ldr	r1, [r0]
   11f3c:	ldr	r0, [sp, #28]
   11f40:	add	r1, r1, r0, lsl #3
   11f44:	cmp	r0, #0
   11f48:	ldrh	r2, [r1, #6]
   11f4c:	orr	r2, r2, r3
   11f50:	strh	r2, [r1, #6]
   11f54:	blt	12004 <rb_select_sigio+0x1d0>
   11f58:	ldr	r3, [pc, #676]	; 12204 <rb_select_sigio+0x3d0>
   11f5c:	eor	r1, r0, r0, lsr #12
   11f60:	bfc	r1, #12, #20
   11f64:	eor	r1, r1, r0, lsr #24
   11f68:	add	r1, r1, r1, lsl #1
   11f6c:	ldr	r3, [pc, r3]
   11f70:	ldr	r3, [r3]
   11f74:	ldr	r1, [r3, r1, lsl #2]
   11f78:	cmp	r1, #0
   11f7c:	beq	12004 <rb_select_sigio+0x1d0>
   11f80:	sxth	sl, r2
   11f84:	ldr	r7, [r1]
   11f88:	ldr	r2, [r7, #12]
   11f8c:	cmp	r2, r0
   11f90:	beq	11fa4 <rb_select_sigio+0x170>
   11f94:	ldr	r1, [r1, #8]
   11f98:	cmp	r1, #0
   11f9c:	bne	11f84 <rb_select_sigio+0x150>
   11fa0:	b	12004 <rb_select_sigio+0x1d0>
   11fa4:	cmp	r7, #0
   11fa8:	beq	12004 <rb_select_sigio+0x1d0>
   11fac:	tst	sl, #89	; 0x59
   11fb0:	beq	11fd8 <rb_select_sigio+0x1a4>
   11fb4:	ldr	r2, [r7, #28]
   11fb8:	ldr	r1, [r7, #32]
   11fbc:	mov	r0, #0
   11fc0:	str	r0, [r7, #28]
   11fc4:	str	r0, [r7, #32]
   11fc8:	cmp	r2, #0
   11fcc:	beq	11fd8 <rb_select_sigio+0x1a4>
   11fd0:	mov	r0, r7
   11fd4:	blx	r2
   11fd8:	tst	sl, #284	; 0x11c
   11fdc:	beq	12004 <rb_select_sigio+0x1d0>
   11fe0:	ldr	r2, [r7, #36]	; 0x24
   11fe4:	ldr	r1, [r7, #40]	; 0x28
   11fe8:	mov	r0, #0
   11fec:	str	r0, [r7, #36]	; 0x24
   11ff0:	str	r0, [r7, #40]	; 0x28
   11ff4:	cmp	r2, #0
   11ff8:	beq	12004 <rb_select_sigio+0x1d0>
   11ffc:	mov	r0, r7
   12000:	blx	r2
   12004:	ldrb	r0, [r6]
   12008:	cmp	r0, #0
   1200c:	beq	11eac <rb_select_sigio+0x78>
   12010:	b	1203c <rb_select_sigio+0x208>
   12014:	ldrb	r0, [r6]
   12018:	cmp	r0, #0
   1201c:	bne	1203c <rb_select_sigio+0x208>
   12020:	bl	5294 <rb_set_time@plt>
   12024:	b	121d8 <rb_select_sigio+0x3a4>
   12028:	ldr	r0, [pc, #452]	; 121f4 <rb_select_sigio+0x3c0>
   1202c:	add	r0, pc, r0
   12030:	bl	5228 <rb_lib_log@plt>
   12034:	mov	r0, #1
   12038:	strb	r0, [r6]
   1203c:	bl	4dc0 <__libc_current_sigrtmin@plt>
   12040:	mov	r1, #1
   12044:	bl	4e14 <signal@plt>
   12048:	bl	4dc0 <__libc_current_sigrtmin@plt>
   1204c:	mov	r1, #0
   12050:	mov	r5, #0
   12054:	bl	4e14 <signal@plt>
   12058:	strb	r5, [r6]
   1205c:	mov	r2, r4
   12060:	ldr	r6, [pc, #404]	; 121fc <rb_select_sigio+0x3c8>
   12064:	ldr	r6, [pc, r6]
   12068:	ldm	r6, {r0, r1}
   1206c:	add	r1, r1, #1
   12070:	bl	5300 <poll@plt>
   12074:	mov	r4, r0
   12078:	bl	5294 <rb_set_time@plt>
   1207c:	cmn	r4, #1
   12080:	ble	120ac <rb_select_sigio+0x278>
   12084:	cmp	r4, #0
   12088:	beq	121dc <rb_select_sigio+0x3a8>
   1208c:	ldr	r0, [r6, #4]
   12090:	cmp	r0, #0
   12094:	blt	121dc <rb_select_sigio+0x3a8>
   12098:	ldr	r9, [pc, #360]	; 12208 <rb_select_sigio+0x3d4>
   1209c:	mov	r8, #0
   120a0:	mov	r0, #0
   120a4:	ldr	r9, [pc, r9]
   120a8:	b	120ec <rb_select_sigio+0x2b8>
   120ac:	bl	55e8 <__errno_location@plt>
   120b0:	ldr	r0, [r0]
   120b4:	bl	4d18 <rb_ignore_errno@plt>
   120b8:	mov	r5, r0
   120bc:	cmp	r0, #0
   120c0:	movwne	r5, #5
   120c4:	b	121dc <rb_select_sigio+0x3a8>
   120c8:	ldr	r2, [r4, #36]	; 0x24
   120cc:	ldr	r1, [r4, #40]	; 0x28
   120d0:	str	r8, [r4, #36]	; 0x24
   120d4:	str	r8, [r4, #40]	; 0x28
   120d8:	cmp	r2, #0
   120dc:	beq	12188 <rb_select_sigio+0x354>
   120e0:	mov	r0, r4
   120e4:	blx	r2
   120e8:	b	12188 <rb_select_sigio+0x354>
   120ec:	mov	r5, r0
   120f0:	ldr	r0, [r6]
   120f4:	add	r1, r0, r5, lsl #3
   120f8:	ldrsh	r7, [r1, #6]
   120fc:	cmp	r7, #0
   12100:	beq	121c8 <rb_select_sigio+0x394>
   12104:	ldr	r0, [r0, r5, lsl #3]
   12108:	cmp	r0, #0
   1210c:	blt	121c8 <rb_select_sigio+0x394>
   12110:	eor	r1, r0, r0, lsr #12
   12114:	ldr	r2, [r9]
   12118:	bfc	r1, #12, #20
   1211c:	eor	r1, r1, r0, lsr #24
   12120:	add	r1, r1, r1, lsl #1
   12124:	ldr	r1, [r2, r1, lsl #2]
   12128:	b	12130 <rb_select_sigio+0x2fc>
   1212c:	ldr	r1, [r1, #8]
   12130:	cmp	r1, #0
   12134:	beq	121c8 <rb_select_sigio+0x394>
   12138:	ldr	r4, [r1]
   1213c:	ldr	r2, [r4, #12]
   12140:	cmp	r2, r0
   12144:	bne	1212c <rb_select_sigio+0x2f8>
   12148:	cmp	r4, #0
   1214c:	beq	121c8 <rb_select_sigio+0x394>
   12150:	tst	r7, #89	; 0x59
   12154:	beq	12178 <rb_select_sigio+0x344>
   12158:	ldr	r2, [r4, #28]
   1215c:	ldr	r1, [r4, #32]
   12160:	str	r8, [r4, #28]
   12164:	str	r8, [r4, #32]
   12168:	cmp	r2, #0
   1216c:	beq	12178 <rb_select_sigio+0x344>
   12170:	mov	r0, r4
   12174:	blx	r2
   12178:	tst	r7, #284	; 0x11c
   1217c:	ldrbne	r0, [r4, #16]
   12180:	andsne	r0, r0, #1
   12184:	bne	120c8 <rb_select_sigio+0x294>
   12188:	ldr	r0, [r4, #28]
   1218c:	cmp	r0, #0
   12190:	bne	121a8 <rb_select_sigio+0x374>
   12194:	mov	r0, r4
   12198:	mov	r1, #1
   1219c:	mov	r2, #0
   121a0:	mov	r3, #0
   121a4:	bl	11ccc <rb_setselect_sigio>
   121a8:	ldr	r0, [r4, #36]	; 0x24
   121ac:	cmp	r0, #0
   121b0:	bne	121c8 <rb_select_sigio+0x394>
   121b4:	mov	r0, r4
   121b8:	mov	r1, #2
   121bc:	mov	r2, #0
   121c0:	mov	r3, #0
   121c4:	bl	11ccc <rb_setselect_sigio>
   121c8:	ldr	r1, [r6, #4]
   121cc:	add	r0, r5, #1
   121d0:	cmp	r5, r1
   121d4:	blt	120ec <rb_select_sigio+0x2b8>
   121d8:	mov	r5, #0
   121dc:	mov	r0, r5
   121e0:	sub	sp, fp, #28
   121e4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   121e8:	.word	0x00033d80
   121ec:	.word	0x00033d68
   121f0:	.word	0x00033dd8
   121f4:	.word	0x00004b4c
   121f8:	.word	0x00033d84
   121fc:	.word	0x0001634c
   12200:	.word	0x00016480
   12204:	.word	0x00016434
   12208:	.word	0x000162fc

0001220c <rb_sigio_supports_event>:
   1220c:	push	{r4, sl, fp, lr}
   12210:	add	fp, sp, #8
   12214:	sub	sp, sp, #72	; 0x48
   12218:	ldr	r4, [pc, #120]	; 12298 <rb_sigio_supports_event+0x8c>
   1221c:	ldr	r4, [pc, r4]
   12220:	cmp	r4, #1
   12224:	beq	1228c <rb_sigio_supports_event+0x80>
   12228:	cmn	r4, #1
   1222c:	bne	12238 <rb_sigio_supports_event+0x2c>
   12230:	mov	r4, #0
   12234:	b	1228c <rb_sigio_supports_event+0x80>
   12238:	mov	r4, #0
   1223c:	mov	r0, #26
   12240:	add	r1, sp, #4
   12244:	sub	r2, fp, #12
   12248:	str	r4, [sp, #12]
   1224c:	str	r0, [sp, #8]
   12250:	mov	r0, #0
   12254:	bl	4e68 <timer_create@plt>
   12258:	cmp	r0, #0
   1225c:	beq	12274 <rb_sigio_supports_event+0x68>
   12260:	ldr	r0, [pc, #52]	; 1229c <rb_sigio_supports_event+0x90>
   12264:	mvn	r1, #0
   12268:	add	r0, pc, r0
   1226c:	str	r1, [r0]
   12270:	b	1228c <rb_sigio_supports_event+0x80>
   12274:	ldr	r0, [fp, #-12]
   12278:	bl	5378 <timer_delete@plt>
   1227c:	ldr	r0, [pc, #28]	; 122a0 <rb_sigio_supports_event+0x94>
   12280:	mov	r4, #1
   12284:	add	r0, pc, r0
   12288:	str	r4, [r0]
   1228c:	mov	r0, r4
   12290:	sub	sp, fp, #8
   12294:	pop	{r4, sl, fp, pc}
   12298:	.word	0x00033a74
   1229c:	.word	0x00033a28
   122a0:	.word	0x00033a0c

000122a4 <rb_sigio_init_event>:
   122a4:	b	1220c <rb_sigio_supports_event>

000122a8 <rb_sigio_sched_event>:
   122a8:	push	{r4, r5, r6, r7, fp, lr}
   122ac:	add	fp, sp, #16
   122b0:	sub	sp, sp, #80	; 0x50
   122b4:	mov	r4, r0
   122b8:	ldr	r0, [pc, #276]	; 123d4 <rb_sigio_sched_event+0x12c>
   122bc:	ldr	r0, [pc, r0]
   122c0:	cmp	r0, #1
   122c4:	blt	123a0 <rb_sigio_sched_event+0xf8>
   122c8:	mov	r6, r1
   122cc:	add	r1, sp, #16
   122d0:	vmov.i32	q8, #0	; 0x00000000
   122d4:	mov	r0, #48	; 0x30
   122d8:	mov	r2, r1
   122dc:	vst1.64	{d16-d17}, [r2], r0
   122e0:	add	r0, r1, #32
   122e4:	vst1.64	{d16-d17}, [r0]
   122e8:	add	r0, r1, #16
   122ec:	mov	r1, #4
   122f0:	vst1.64	{d16-d17}, [r2]
   122f4:	vst1.64	{d16-d17}, [r0]
   122f8:	mov	r0, #1
   122fc:	bl	4f10 <calloc@plt>
   12300:	cmp	r0, #0
   12304:	beq	123d0 <rb_sigio_sched_event+0x128>
   12308:	mov	r5, #0
   1230c:	str	r0, [r4, #40]	; 0x28
   12310:	mov	r7, r0
   12314:	str	r5, [sp, #24]
   12318:	bl	4dc0 <__libc_current_sigrtmin@plt>
   1231c:	add	r0, r0, #1
   12320:	str	r4, [sp, #16]
   12324:	add	r1, sp, #16
   12328:	mov	r2, r7
   1232c:	str	r0, [sp, #20]
   12330:	mov	r0, #0
   12334:	bl	4e68 <timer_create@plt>
   12338:	cmn	r0, #1
   1233c:	ble	123a8 <rb_sigio_sched_event+0x100>
   12340:	str	r5, [sp]
   12344:	stmib	sp, {r5, r6}
   12348:	str	r5, [sp, #12]
   1234c:	mov	r2, sp
   12350:	mov	r3, #0
   12354:	ldr	r0, [r4, #24]
   12358:	cmp	r0, #0
   1235c:	movne	r0, sp
   12360:	addne	r0, r0, #8
   12364:	ldrdne	r0, [r0]
   12368:	stmne	sp, {r0, r1}
   1236c:	mov	r1, #0
   12370:	ldr	r0, [r7]
   12374:	bl	506c <timer_settime@plt>
   12378:	mov	r5, #1
   1237c:	cmn	r0, #1
   12380:	bgt	123c4 <rb_sigio_sched_event+0x11c>
   12384:	bl	55e8 <__errno_location@plt>
   12388:	ldr	r0, [r0]
   1238c:	bl	4cdc <strerror@plt>
   12390:	mov	r1, r0
   12394:	ldr	r0, [pc, #64]	; 123dc <rb_sigio_sched_event+0x134>
   12398:	add	r0, pc, r0
   1239c:	bl	5228 <rb_lib_log@plt>
   123a0:	mov	r5, #0
   123a4:	b	123c4 <rb_sigio_sched_event+0x11c>
   123a8:	bl	55e8 <__errno_location@plt>
   123ac:	ldr	r0, [r0]
   123b0:	bl	4cdc <strerror@plt>
   123b4:	mov	r1, r0
   123b8:	ldr	r0, [pc, #24]	; 123d8 <rb_sigio_sched_event+0x130>
   123bc:	add	r0, pc, r0
   123c0:	bl	5228 <rb_lib_log@plt>
   123c4:	mov	r0, r5
   123c8:	sub	sp, fp, #16
   123cc:	pop	{r4, r5, r6, r7, fp, pc}
   123d0:	bl	5288 <rb_outofmemory@plt>
   123d4:	.word	0x000339d4
   123d8:	.word	0x00004797
   123dc:	.word	0x000047cd

000123e0 <rb_sigio_unsched_event>:
   123e0:	push	{r4, sl, fp, lr}
   123e4:	add	fp, sp, #8
   123e8:	mov	r4, r0
   123ec:	ldr	r0, [pc, #48]	; 12424 <rb_sigio_unsched_event+0x44>
   123f0:	ldr	r0, [pc, r0]
   123f4:	cmp	r0, #1
   123f8:	poplt	{r4, sl, fp, pc}
   123fc:	ldr	r0, [r4, #40]	; 0x28
   12400:	ldr	r0, [r0]
   12404:	bl	5378 <timer_delete@plt>
   12408:	ldr	r0, [r4, #40]	; 0x28
   1240c:	cmp	r0, #0
   12410:	beq	12418 <rb_sigio_unsched_event+0x38>
   12414:	bl	500c <free@plt>
   12418:	mov	r0, #0
   1241c:	str	r0, [r4, #40]	; 0x28
   12420:	pop	{r4, sl, fp, pc}
   12424:	.word	0x000338a0

00012428 <rb_setup_fd_select>:
   12428:	mov	r0, #0
   1242c:	bx	lr

00012430 <rb_init_netio_select>:
   12430:	ldr	r0, [pc, #72]	; 12480 <rb_init_netio_select+0x50>
   12434:	ldr	r0, [pc, r0]
   12438:	ldr	r1, [r0]
   1243c:	cmp	r1, #1024	; 0x400
   12440:	movgt	r1, #1024	; 0x400
   12444:	strgt	r1, [r0]
   12448:	push	{fp, lr}
   1244c:	mov	fp, sp
   12450:	ldr	r0, [pc, #44]	; 12484 <rb_init_netio_select+0x54>
   12454:	mov	r1, #0
   12458:	mov	r2, #128	; 0x80
   1245c:	add	r0, pc, r0
   12460:	bl	4f4c <memset@plt>
   12464:	ldr	r0, [pc, #28]	; 12488 <rb_init_netio_select+0x58>
   12468:	mov	r1, #0
   1246c:	mov	r2, #128	; 0x80
   12470:	add	r0, pc, r0
   12474:	bl	4f4c <memset@plt>
   12478:	mov	r0, #0
   1247c:	pop	{fp, pc}
   12480:	.word	0x00015f4c
   12484:	.word	0x0003383c
   12488:	.word	0x000338a8

0001248c <rb_setselect_select>:
   1248c:	push	{r4, r5, r6, r7, fp, lr}
   12490:	add	fp, sp, #16
   12494:	mov	r5, r3
   12498:	mov	r4, r2
   1249c:	mov	r7, r1
   124a0:	mov	r6, r0
   124a4:	tst	r1, #1
   124a8:	beq	124c4 <rb_setselect_select+0x38>
   124ac:	mov	r0, r6
   124b0:	mov	r1, #1
   124b4:	mov	r2, r4
   124b8:	str	r4, [r6, #28]
   124bc:	str	r5, [r6, #32]
   124c0:	bl	124e8 <select_update_selectfds>
   124c4:	tst	r7, #2
   124c8:	popeq	{r4, r5, r6, r7, fp, pc}
   124cc:	str	r4, [r6, #36]	; 0x24
   124d0:	str	r5, [r6, #40]	; 0x28
   124d4:	mov	r0, r6
   124d8:	mov	r1, #2
   124dc:	mov	r2, r4
   124e0:	pop	{r4, r5, r6, r7, fp, lr}
   124e4:	b	124e8 <select_update_selectfds>

000124e8 <select_update_selectfds>:
   124e8:	push	{r4, r5, fp, lr}
   124ec:	add	fp, sp, #8
   124f0:	tst	r1, #1
   124f4:	beq	12554 <select_update_selectfds+0x6c>
   124f8:	ldr	r3, [r0, #12]
   124fc:	ldr	lr, [pc, #360]	; 1266c <select_update_selectfds+0x184>
   12500:	mov	r4, #1
   12504:	cmp	r2, #0
   12508:	and	ip, r3, #31
   1250c:	add	lr, pc, lr
   12510:	lsl	ip, r4, ip
   12514:	asr	r4, r3, #31
   12518:	add	r3, r3, r4, lsr #27
   1251c:	asr	r3, r3, #5
   12520:	beq	1253c <select_update_selectfds+0x54>
   12524:	ldr	r4, [lr, r3, lsl #2]
   12528:	orr	r4, r4, ip
   1252c:	str	r4, [lr, r3, lsl #2]
   12530:	ldr	r3, [r0, #20]
   12534:	orr	r3, r3, #1
   12538:	b	12550 <select_update_selectfds+0x68>
   1253c:	ldr	r4, [lr, r3, lsl #2]
   12540:	bic	r4, r4, ip
   12544:	str	r4, [lr, r3, lsl #2]
   12548:	ldr	r3, [r0, #20]
   1254c:	bic	r3, r3, #1
   12550:	str	r3, [r0, #20]
   12554:	tst	r1, #2
   12558:	bne	12568 <select_update_selectfds+0x80>
   1255c:	ldr	r1, [r0, #12]
   12560:	ldr	r2, [r0, #20]
   12564:	b	125d8 <select_update_selectfds+0xf0>
   12568:	ldr	r1, [r0, #12]
   1256c:	mov	r4, #1
   12570:	cmp	r2, #0
   12574:	and	r3, r1, #31
   12578:	lsl	r3, r4, r3
   1257c:	beq	125ac <select_update_selectfds+0xc4>
   12580:	ldr	ip, [pc, #232]	; 12670 <select_update_selectfds+0x188>
   12584:	asr	r2, r1, #31
   12588:	add	r2, r1, r2, lsr #27
   1258c:	asr	r2, r2, #5
   12590:	add	ip, pc, ip
   12594:	ldr	r4, [ip, r2, lsl #2]
   12598:	orr	r3, r4, r3
   1259c:	str	r3, [ip, r2, lsl #2]
   125a0:	ldr	r2, [r0, #20]
   125a4:	orr	r2, r2, #2
   125a8:	b	125d4 <select_update_selectfds+0xec>
   125ac:	ldr	ip, [pc, #192]	; 12674 <select_update_selectfds+0x18c>
   125b0:	asr	r2, r1, #31
   125b4:	add	r2, r1, r2, lsr #27
   125b8:	asr	r2, r2, #5
   125bc:	add	ip, pc, ip
   125c0:	ldr	r4, [ip, r2, lsl #2]
   125c4:	bic	r3, r4, r3
   125c8:	str	r3, [ip, r2, lsl #2]
   125cc:	ldr	r2, [r0, #20]
   125d0:	bic	r2, r2, #2
   125d4:	str	r2, [r0, #20]
   125d8:	ldr	r0, [pc, #152]	; 12678 <select_update_selectfds+0x190>
   125dc:	tst	r2, #3
   125e0:	ldr	r0, [pc, r0]
   125e4:	beq	12600 <select_update_selectfds+0x118>
   125e8:	cmp	r1, r0
   125ec:	ldrgt	r0, [pc, #136]	; 1267c <select_update_selectfds+0x194>
   125f0:	addgt	r0, pc, r0
   125f4:	strgt	r1, [r0]
   125f8:	popgt	{r4, r5, fp, pc}
   125fc:	pop	{r4, r5, fp, pc}
   12600:	cmp	r1, r0
   12604:	bgt	12668 <select_update_selectfds+0x180>
   12608:	cmp	r0, #0
   1260c:	poplt	{r4, r5, fp, pc}
   12610:	ldr	r2, [pc, #104]	; 12680 <select_update_selectfds+0x198>
   12614:	ldr	lr, [pc, #104]	; 12684 <select_update_selectfds+0x19c>
   12618:	ldr	ip, [pc, #104]	; 12688 <select_update_selectfds+0x1a0>
   1261c:	mov	r1, #1
   12620:	add	r2, pc, r2
   12624:	add	lr, pc, lr
   12628:	add	ip, pc, ip
   1262c:	asr	r4, r0, #31
   12630:	and	r3, r0, #31
   12634:	add	r4, r0, r4, lsr #27
   12638:	asr	r4, r4, #5
   1263c:	ldr	r5, [r2, r4, lsl #2]
   12640:	tst	r5, r1, lsl r3
   12644:	ldreq	r4, [lr, r4, lsl #2]
   12648:	lsleq	r3, r1, r3
   1264c:	tsteq	r4, r3
   12650:	bne	12668 <select_update_selectfds+0x180>
   12654:	sub	r3, r0, #1
   12658:	cmp	r0, #0
   1265c:	mov	r0, r3
   12660:	str	r3, [ip]
   12664:	bgt	1262c <select_update_selectfds+0x144>
   12668:	pop	{r4, r5, fp, pc}
   1266c:	.word	0x0003378c
   12670:	.word	0x00033788
   12674:	.word	0x0003375c
   12678:	.word	0x00015e88
   1267c:	.word	0x00015e78
   12680:	.word	0x00033678
   12684:	.word	0x000336f4
   12688:	.word	0x00015e40

0001268c <rb_select_select>:
   1268c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12690:	add	fp, sp, #28
   12694:	sub	sp, sp, #12
   12698:	ldr	r8, [pc, #468]	; 12874 <rb_select_select+0x1e8>
   1269c:	ldr	r1, [pc, #468]	; 12878 <rb_select_select+0x1ec>
   126a0:	mov	r6, r0
   126a4:	mov	r2, #128	; 0x80
   126a8:	add	r8, pc, r8
   126ac:	add	r1, pc, r1
   126b0:	mov	r0, r8
   126b4:	bl	5114 <memcpy@plt>
   126b8:	ldr	r9, [pc, #444]	; 1287c <rb_select_select+0x1f0>
   126bc:	ldr	r1, [pc, #444]	; 12880 <rb_select_select+0x1f4>
   126c0:	mov	r2, #128	; 0x80
   126c4:	add	r9, pc, r9
   126c8:	add	r1, pc, r1
   126cc:	mov	r0, r9
   126d0:	bl	5114 <memcpy@plt>
   126d4:	mov	r0, #1000	; 0x3e8
   126d8:	mov	r4, #0
   126dc:	add	r5, sp, #4
   126e0:	mul	r7, r6, r0
   126e4:	stmib	sp, {r4, r7}
   126e8:	mov	r1, r8
   126ec:	mov	r2, r9
   126f0:	mov	r3, #0
   126f4:	ldr	r0, [pc, #392]	; 12884 <rb_select_select+0x1f8>
   126f8:	ldr	r0, [pc, r0]
   126fc:	str	r5, [sp]
   12700:	add	r0, r0, #1
   12704:	bl	5240 <select@plt>
   12708:	cmn	r0, #1
   1270c:	bgt	12730 <rb_select_select+0xa4>
   12710:	bl	55e8 <__errno_location@plt>
   12714:	ldr	r0, [r0]
   12718:	bl	4d18 <rb_ignore_errno@plt>
   1271c:	cmp	r0, #0
   12720:	bne	126e4 <rb_select_select+0x58>
   12724:	bl	5294 <rb_set_time@plt>
   12728:	mvn	r0, #0
   1272c:	b	1286c <rb_select_select+0x1e0>
   12730:	mov	r6, r0
   12734:	bl	5294 <rb_set_time@plt>
   12738:	mov	r0, #0
   1273c:	cmp	r6, #0
   12740:	beq	1286c <rb_select_select+0x1e0>
   12744:	ldr	r1, [pc, #316]	; 12888 <rb_select_select+0x1fc>
   12748:	ldr	r1, [pc, r1]
   1274c:	cmp	r1, #0
   12750:	blt	1286c <rb_select_select+0x1e0>
   12754:	ldr	sl, [pc, #304]	; 1288c <rb_select_select+0x200>
   12758:	mov	r0, #0
   1275c:	ldr	sl, [pc, sl]
   12760:	mov	r7, r0
   12764:	eor	r0, r0, r0, lsr #12
   12768:	ldr	r1, [sl]
   1276c:	bfc	r0, #12, #20
   12770:	eor	r0, r0, r7, lsr #24
   12774:	add	r0, r0, r0, lsl #1
   12778:	ldr	r0, [r1, r0, lsl #2]
   1277c:	b	12784 <rb_select_select+0xf8>
   12780:	ldr	r0, [r0, #8]
   12784:	cmp	r0, #0
   12788:	beq	12854 <rb_select_select+0x1c8>
   1278c:	ldr	r6, [r0]
   12790:	ldr	r1, [r6, #12]
   12794:	cmp	r1, r7
   12798:	bne	12780 <rb_select_select+0xf4>
   1279c:	cmp	r6, #0
   127a0:	beq	12854 <rb_select_select+0x1c8>
   127a4:	lsr	r4, r7, #5
   127a8:	and	r5, r7, #31
   127ac:	mov	r1, #1
   127b0:	ldr	r0, [r8, r4, lsl #2]
   127b4:	tst	r0, r1, lsl r5
   127b8:	beq	127dc <rb_select_select+0x150>
   127bc:	ldr	r2, [r6, #28]
   127c0:	mov	r0, #0
   127c4:	str	r0, [r6, #28]
   127c8:	cmp	r2, #0
   127cc:	beq	127dc <rb_select_select+0x150>
   127d0:	ldr	r1, [r6, #32]
   127d4:	mov	r0, r6
   127d8:	blx	r2
   127dc:	ldrb	r0, [r6, #16]
   127e0:	tst	r0, #1
   127e4:	beq	12854 <rb_select_select+0x1c8>
   127e8:	ldr	r1, [r9, r4, lsl #2]
   127ec:	mov	r0, #1
   127f0:	lsl	r0, r0, r5
   127f4:	tst	r1, r0
   127f8:	beq	1281c <rb_select_select+0x190>
   127fc:	ldr	r2, [r6, #36]	; 0x24
   12800:	mov	r0, #0
   12804:	str	r0, [r6, #36]	; 0x24
   12808:	cmp	r2, #0
   1280c:	beq	1281c <rb_select_select+0x190>
   12810:	ldr	r1, [r6, #40]	; 0x28
   12814:	mov	r0, r6
   12818:	blx	r2
   1281c:	ldr	r0, [r6, #28]
   12820:	cmp	r0, #0
   12824:	bne	12838 <rb_select_select+0x1ac>
   12828:	mov	r0, r6
   1282c:	mov	r1, #1
   12830:	mov	r2, #0
   12834:	bl	124e8 <select_update_selectfds>
   12838:	ldr	r0, [r6, #36]	; 0x24
   1283c:	cmp	r0, #0
   12840:	bne	12854 <rb_select_select+0x1c8>
   12844:	mov	r0, r6
   12848:	mov	r1, #2
   1284c:	mov	r2, #0
   12850:	bl	124e8 <select_update_selectfds>
   12854:	ldr	r1, [pc, #52]	; 12890 <rb_select_select+0x204>
   12858:	add	r0, r7, #1
   1285c:	ldr	r1, [pc, r1]
   12860:	cmp	r7, r1
   12864:	blt	12760 <rb_select_select+0xd4>
   12868:	mov	r0, #0
   1286c:	sub	sp, fp, #28
   12870:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12874:	.word	0x000336f0
   12878:	.word	0x000335ec
   1287c:	.word	0x00033754
   12880:	.word	0x00033650
   12884:	.word	0x00015d70
   12888:	.word	0x00015d20
   1288c:	.word	0x00015c44
   12890:	.word	0x00015c0c

00012894 <rb_init_netio_kqueue>:
   12894:	push	{fp, lr}
   12898:	mov	fp, sp
   1289c:	bl	55e8 <__errno_location@plt>
   128a0:	mov	r1, #38	; 0x26
   128a4:	str	r1, [r0]
   128a8:	mvn	r0, #0
   128ac:	pop	{fp, pc}

000128b0 <rb_setselect_kqueue>:
   128b0:	push	{fp, lr}
   128b4:	mov	fp, sp
   128b8:	bl	55e8 <__errno_location@plt>
   128bc:	mov	r1, #38	; 0x26
   128c0:	str	r1, [r0]
   128c4:	pop	{fp, pc}

000128c8 <rb_select_kqueue>:
   128c8:	push	{fp, lr}
   128cc:	mov	fp, sp
   128d0:	bl	55e8 <__errno_location@plt>
   128d4:	mov	r1, #38	; 0x26
   128d8:	str	r1, [r0]
   128dc:	mvn	r0, #0
   128e0:	pop	{fp, pc}

000128e4 <rb_setup_fd_kqueue>:
   128e4:	push	{fp, lr}
   128e8:	mov	fp, sp
   128ec:	bl	55e8 <__errno_location@plt>
   128f0:	mov	r1, #38	; 0x26
   128f4:	str	r1, [r0]
   128f8:	mvn	r0, #0
   128fc:	pop	{fp, pc}

00012900 <rb_kqueue_init_event>:
   12900:	bx	lr

00012904 <rb_kqueue_sched_event>:
   12904:	push	{fp, lr}
   12908:	mov	fp, sp
   1290c:	bl	55e8 <__errno_location@plt>
   12910:	mov	r1, #38	; 0x26
   12914:	str	r1, [r0]
   12918:	mvn	r0, #0
   1291c:	pop	{fp, pc}

00012920 <rb_kqueue_unsched_event>:
   12920:	bx	lr

00012924 <rb_kqueue_supports_event>:
   12924:	push	{fp, lr}
   12928:	mov	fp, sp
   1292c:	bl	55e8 <__errno_location@plt>
   12930:	mov	r1, #38	; 0x26
   12934:	str	r1, [r0]
   12938:	mov	r0, #0
   1293c:	pop	{fp, pc}

00012940 <rb_rawbuf_flush>:
   12940:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12944:	add	fp, sp, #28
   12948:	sub	sp, sp, #12
   1294c:	sub	sp, sp, #8192	; 0x2000
   12950:	mov	r4, r0
   12954:	ldr	r0, [r0]
   12958:	cmp	r0, #0
   1295c:	beq	12b50 <rb_rawbuf_flush+0x210>
   12960:	mov	r0, r1
   12964:	mov	r8, r1
   12968:	bl	4df0 <rb_fd_ssl@plt>
   1296c:	cmp	r0, #0
   12970:	beq	12994 <rb_rawbuf_flush+0x54>
   12974:	ldr	r0, [r4]
   12978:	ldr	r6, [r0]
   1297c:	ldrb	r0, [r6, #1040]	; 0x410
   12980:	cmp	r0, #0
   12984:	beq	12b64 <rb_rawbuf_flush+0x224>
   12988:	mov	r5, r4
   1298c:	ldr	r0, [r5, #16]!
   12990:	b	12b78 <rb_rawbuf_flush+0x238>
   12994:	add	r6, sp, #8
   12998:	mov	r1, #0
   1299c:	mov	r2, #8192	; 0x2000
   129a0:	mov	r7, #0
   129a4:	mov	r0, r6
   129a8:	bl	4f4c <memset@plt>
   129ac:	ldr	r0, [r4]
   129b0:	cmp	r0, #0
   129b4:	beq	12b50 <rb_rawbuf_flush+0x210>
   129b8:	movw	r1, #1022	; 0x3fe
   129bc:	ldr	r3, [r0]
   129c0:	ldrb	r2, [r3, #1040]	; 0x410
   129c4:	cmp	r2, #0
   129c8:	beq	129e0 <rb_rawbuf_flush+0xa0>
   129cc:	ldr	r5, [r4, #16]
   129d0:	ldr	r2, [r3, #1036]	; 0x40c
   129d4:	add	r3, r3, r5
   129d8:	sub	r2, r2, r5
   129dc:	b	129e4 <rb_rawbuf_flush+0xa4>
   129e0:	ldr	r2, [r3, #1036]	; 0x40c
   129e4:	add	r5, r3, #12
   129e8:	str	r5, [r6, r7, lsl #3]
   129ec:	add	r3, r6, r7, lsl #3
   129f0:	add	r5, r7, #1
   129f4:	cmp	r7, r1
   129f8:	str	r2, [r3, #4]
   129fc:	bhi	12a10 <rb_rawbuf_flush+0xd0>
   12a00:	ldr	r0, [r0, #8]
   12a04:	mov	r7, r5
   12a08:	cmp	r0, #0
   12a0c:	bne	129bc <rb_rawbuf_flush+0x7c>
   12a10:	add	r1, sp, #8
   12a14:	mov	r0, r8
   12a18:	mov	r2, r5
   12a1c:	bl	53d8 <rb_writev@plt>
   12a20:	mov	sl, r0
   12a24:	cmp	r0, #1
   12a28:	blt	12c18 <rb_rawbuf_flush+0x2d8>
   12a2c:	ldr	r6, [r4]
   12a30:	cmp	r6, #0
   12a34:	beq	12c18 <rb_rawbuf_flush+0x2d8>
   12a38:	sub	r0, r5, #1
   12a3c:	mov	r5, #0
   12a40:	mov	r7, sl
   12a44:	str	r0, [sp, #4]
   12a48:	ldr	r1, [r6]
   12a4c:	ldr	r6, [r6, #8]
   12a50:	ldrb	r0, [r1, #1040]	; 0x410
   12a54:	ldr	r9, [r1, #1036]	; 0x40c
   12a58:	cmp	r0, #0
   12a5c:	beq	12a70 <rb_rawbuf_flush+0x130>
   12a60:	ldr	r0, [r4, #16]
   12a64:	sub	r8, r9, r0
   12a68:	cmp	r7, r8
   12a6c:	bge	12ad8 <rb_rawbuf_flush+0x198>
   12a70:	cmp	r7, r9
   12a74:	blt	12c24 <rb_rawbuf_flush+0x2e4>
   12a78:	ldr	r0, [r4, #12]
   12a7c:	mov	r3, r4
   12a80:	sub	r0, r0, r9
   12a84:	str	r0, [r4, #12]
   12a88:	ldr	r0, [r1, #8]
   12a8c:	ldr	r2, [r1, #4]
   12a90:	cmp	r0, #0
   12a94:	streq	r2, [r4, #4]
   12a98:	strne	r2, [r0, #4]
   12a9c:	ldrne	r2, [r1, #4]
   12aa0:	cmp	r2, #0
   12aa4:	addne	r3, r2, #8
   12aa8:	str	r0, [r3]
   12aac:	mov	r0, #0
   12ab0:	str	r0, [r1, #4]
   12ab4:	str	r0, [r1, #8]
   12ab8:	ldr	r0, [r4, #8]
   12abc:	sub	r0, r0, #1
   12ac0:	str	r0, [r4, #8]
   12ac4:	ldr	r0, [pc, #372]	; 12c40 <rb_rawbuf_flush+0x300>
   12ac8:	ldr	r0, [pc, r0]
   12acc:	bl	51e0 <rb_bh_free@plt>
   12ad0:	mov	r8, r9
   12ad4:	b	12b30 <rb_rawbuf_flush+0x1f0>
   12ad8:	ldr	r0, [r4, #12]
   12adc:	mov	r3, r4
   12ae0:	sub	r0, r0, r8
   12ae4:	str	r0, [r4, #12]
   12ae8:	ldr	r0, [r1, #8]
   12aec:	ldr	r2, [r1, #4]
   12af0:	cmp	r0, #0
   12af4:	streq	r2, [r4, #4]
   12af8:	strne	r2, [r0, #4]
   12afc:	ldrne	r2, [r1, #4]
   12b00:	cmp	r2, #0
   12b04:	addne	r3, r2, #8
   12b08:	str	r0, [r3]
   12b0c:	mov	r0, #0
   12b10:	str	r0, [r1, #4]
   12b14:	str	r0, [r1, #8]
   12b18:	ldr	r0, [r4, #8]
   12b1c:	sub	r0, r0, #1
   12b20:	str	r0, [r4, #8]
   12b24:	ldr	r0, [pc, #272]	; 12c3c <rb_rawbuf_flush+0x2fc>
   12b28:	ldr	r0, [pc, r0]
   12b2c:	bl	51e0 <rb_bh_free@plt>
   12b30:	cmp	r6, #0
   12b34:	beq	12c18 <rb_rawbuf_flush+0x2d8>
   12b38:	ldr	r0, [sp, #4]
   12b3c:	add	r5, r5, #1
   12b40:	sub	r7, r7, r8
   12b44:	cmp	r5, r0
   12b48:	bls	12a48 <rb_rawbuf_flush+0x108>
   12b4c:	b	12c18 <rb_rawbuf_flush+0x2d8>
   12b50:	bl	55e8 <__errno_location@plt>
   12b54:	mov	r1, #11
   12b58:	mvn	sl, #0
   12b5c:	str	r1, [r0]
   12b60:	b	12c18 <rb_rawbuf_flush+0x2d8>
   12b64:	mov	r0, #1
   12b68:	mov	r5, r4
   12b6c:	strb	r0, [r6, #1040]	; 0x410
   12b70:	mov	r0, #0
   12b74:	str	r0, [r5, #16]!
   12b78:	ldr	r1, [r6, #1036]	; 0x40c
   12b7c:	sub	r2, r1, r0
   12b80:	add	r0, r6, r0
   12b84:	add	r1, r0, #12
   12b88:	mov	r0, r8
   12b8c:	bl	4f7c <rb_write@plt>
   12b90:	mov	sl, r0
   12b94:	cmp	r0, #1
   12b98:	blt	12c18 <rb_rawbuf_flush+0x2d8>
   12b9c:	ldr	r0, [r5]
   12ba0:	add	r0, r0, sl
   12ba4:	str	r0, [r5]
   12ba8:	ldr	r1, [r6, #1036]	; 0x40c
   12bac:	cmp	r0, r1
   12bb0:	bne	12c0c <rb_rawbuf_flush+0x2cc>
   12bb4:	mov	r0, #0
   12bb8:	mov	r2, r4
   12bbc:	str	r0, [r5]
   12bc0:	ldr	r0, [r6, #8]
   12bc4:	ldr	r1, [r6, #4]
   12bc8:	cmp	r0, #0
   12bcc:	streq	r1, [r4, #4]
   12bd0:	strne	r1, [r0, #4]
   12bd4:	ldrne	r1, [r6, #4]
   12bd8:	cmp	r1, #0
   12bdc:	addne	r2, r1, #8
   12be0:	mov	r1, r6
   12be4:	str	r0, [r2]
   12be8:	mov	r0, #0
   12bec:	str	r0, [r6, #4]
   12bf0:	str	r0, [r6, #8]
   12bf4:	ldr	r0, [r4, #8]
   12bf8:	sub	r0, r0, #1
   12bfc:	str	r0, [r4, #8]
   12c00:	ldr	r0, [pc, #60]	; 12c44 <rb_rawbuf_flush+0x304>
   12c04:	ldr	r0, [pc, r0]
   12c08:	bl	51e0 <rb_bh_free@plt>
   12c0c:	ldr	r0, [r4, #12]
   12c10:	sub	r0, r0, sl
   12c14:	str	r0, [r4, #12]
   12c18:	mov	r0, sl
   12c1c:	sub	sp, fp, #28
   12c20:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12c24:	mov	r0, #1
   12c28:	strb	r0, [r1, #1040]	; 0x410
   12c2c:	str	r7, [r4, #16]
   12c30:	ldr	r0, [r4, #12]
   12c34:	sub	r0, r0, r7
   12c38:	b	12c14 <rb_rawbuf_flush+0x2d4>
   12c3c:	.word	0x00033370
   12c40:	.word	0x000333d0
   12c44:	.word	0x00033294

00012c48 <rb_rawbuf_append>:
   12c48:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   12c4c:	add	fp, sp, #24
   12c50:	mov	r8, r0
   12c54:	ldr	r0, [r0, #4]
   12c58:	mov	r6, r2
   12c5c:	mov	r5, r1
   12c60:	cmp	r0, #0
   12c64:	ldrne	r4, [r0]
   12c68:	cmpne	r4, #0
   12c6c:	bne	12d20 <rb_rawbuf_append+0xd8>
   12c70:	cmp	r6, #1
   12c74:	poplt	{r4, r5, r6, r7, r8, r9, fp, pc}
   12c78:	mov	r9, #0
   12c7c:	b	12c88 <rb_rawbuf_append+0x40>
   12c80:	mov	r0, r8
   12c84:	b	12cb4 <rb_rawbuf_append+0x6c>
   12c88:	ldr	r0, [pc, #240]	; 12d80 <rb_rawbuf_append+0x138>
   12c8c:	ldr	r0, [pc, r0]
   12c90:	bl	5258 <rb_bh_alloc@plt>
   12c94:	str	r9, [r0, #8]
   12c98:	str	r0, [r0]
   12c9c:	mov	r7, r0
   12ca0:	ldr	r0, [r8, #4]
   12ca4:	cmp	r0, #0
   12ca8:	str	r0, [r7, #4]
   12cac:	beq	12cbc <rb_rawbuf_append+0x74>
   12cb0:	add	r0, r0, #8
   12cb4:	str	r7, [r0]
   12cb8:	b	12cc8 <rb_rawbuf_append+0x80>
   12cbc:	ldr	r0, [r8]
   12cc0:	cmp	r0, #0
   12cc4:	beq	12c80 <rb_rawbuf_append+0x38>
   12cc8:	str	r7, [r8, #4]
   12ccc:	cmp	r6, #1024	; 0x400
   12cd0:	mov	r4, r6
   12cd4:	mov	r1, r5
   12cd8:	ldr	r0, [r8, #8]
   12cdc:	movge	r4, #1024	; 0x400
   12ce0:	mov	r2, r4
   12ce4:	add	r0, r0, #1
   12ce8:	str	r0, [r8, #8]
   12cec:	add	r0, r7, #12
   12cf0:	bl	5114 <memcpy@plt>
   12cf4:	ldr	r0, [r7, #1036]	; 0x40c
   12cf8:	sub	r6, r6, r4
   12cfc:	add	r5, r5, r4
   12d00:	cmp	r6, #0
   12d04:	add	r0, r0, r4
   12d08:	str	r0, [r7, #1036]	; 0x40c
   12d0c:	ldr	r0, [r8, #12]
   12d10:	add	r0, r0, r4
   12d14:	str	r0, [r8, #12]
   12d18:	bgt	12c88 <rb_rawbuf_append+0x40>
   12d1c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   12d20:	ldr	r0, [r4, #1036]	; 0x40c
   12d24:	cmp	r0, #1024	; 0x400
   12d28:	bge	12c70 <rb_rawbuf_append+0x28>
   12d2c:	ldrb	r1, [r4, #1040]	; 0x410
   12d30:	cmp	r1, #0
   12d34:	bne	12c70 <rb_rawbuf_append+0x28>
   12d38:	rsb	r7, r0, #1024	; 0x400
   12d3c:	add	r0, r4, r0
   12d40:	mov	r1, r5
   12d44:	cmp	r7, r6
   12d48:	add	r0, r0, #12
   12d4c:	movgt	r7, r6
   12d50:	mov	r2, r7
   12d54:	bl	5114 <memcpy@plt>
   12d58:	ldr	r0, [r4, #1036]	; 0x40c
   12d5c:	subs	r6, r6, r7
   12d60:	add	r0, r7, r0
   12d64:	str	r0, [r4, #1036]	; 0x40c
   12d68:	ldr	r0, [r8, #12]
   12d6c:	add	r0, r0, r7
   12d70:	str	r0, [r8, #12]
   12d74:	beq	12d1c <rb_rawbuf_append+0xd4>
   12d78:	add	r5, r5, r7
   12d7c:	b	12c70 <rb_rawbuf_append+0x28>
   12d80:	.word	0x0003320c

00012d84 <rb_rawbuf_get>:
   12d84:	push	{r4, r5, r6, r7, fp, lr}
   12d88:	add	fp, sp, #16
   12d8c:	mov	r4, r0
   12d90:	ldr	r0, [r0]
   12d94:	cmp	r0, #0
   12d98:	beq	12dc0 <rb_rawbuf_get+0x3c>
   12d9c:	ldr	r7, [r0]
   12da0:	mov	r5, r2
   12da4:	ldrb	r0, [r7, #1040]	; 0x410
   12da8:	cmp	r0, #0
   12dac:	beq	12dc8 <rb_rawbuf_get+0x44>
   12db0:	ldr	r0, [r4, #16]
   12db4:	add	r0, r7, r0
   12db8:	add	r2, r0, #12
   12dbc:	b	12dcc <rb_rawbuf_get+0x48>
   12dc0:	mov	r6, #0
   12dc4:	b	12e84 <rb_rawbuf_get+0x100>
   12dc8:	add	r2, r7, #12
   12dcc:	ldr	r6, [r7, #1036]	; 0x40c
   12dd0:	mov	r0, r1
   12dd4:	mov	r1, r2
   12dd8:	cmp	r6, r5
   12ddc:	movge	r6, r5
   12de0:	mov	r2, r6
   12de4:	bl	5114 <memcpy@plt>
   12de8:	ldr	r0, [r7, #1036]	; 0x40c
   12dec:	cmp	r0, r6
   12df0:	bne	12e5c <rb_rawbuf_get+0xd8>
   12df4:	mov	r0, #0
   12df8:	mov	r2, r4
   12dfc:	str	r0, [r4, #16]
   12e00:	ldr	r0, [r7, #8]
   12e04:	ldr	r1, [r7, #4]
   12e08:	cmp	r0, #0
   12e0c:	streq	r1, [r4, #4]
   12e10:	strne	r1, [r0, #4]
   12e14:	ldrne	r1, [r7, #4]
   12e18:	cmp	r1, #0
   12e1c:	addne	r2, r1, #8
   12e20:	mov	r1, r7
   12e24:	str	r0, [r2]
   12e28:	mov	r0, #0
   12e2c:	str	r0, [r7, #4]
   12e30:	str	r0, [r7, #8]
   12e34:	ldr	r0, [r4, #8]
   12e38:	sub	r0, r0, #1
   12e3c:	str	r0, [r4, #8]
   12e40:	ldr	r0, [pc, #68]	; 12e8c <rb_rawbuf_get+0x108>
   12e44:	ldr	r0, [pc, r0]
   12e48:	bl	51e0 <rb_bh_free@plt>
   12e4c:	ldr	r0, [r4, #12]
   12e50:	sub	r0, r0, r5
   12e54:	str	r0, [r4, #12]
   12e58:	b	12e84 <rb_rawbuf_get+0x100>
   12e5c:	mov	r1, #1
   12e60:	sub	r0, r0, r6
   12e64:	strb	r1, [r7, #1040]	; 0x410
   12e68:	str	r0, [r7, #1036]	; 0x40c
   12e6c:	ldr	r0, [r4, #12]
   12e70:	ldr	r1, [r4, #16]
   12e74:	sub	r0, r0, r6
   12e78:	add	r1, r1, r6
   12e7c:	str	r0, [r4, #12]
   12e80:	str	r1, [r4, #16]
   12e84:	mov	r0, r6
   12e88:	pop	{r4, r5, r6, r7, fp, pc}
   12e8c:	.word	0x00033054

00012e90 <rb_rawbuf_length>:
   12e90:	ldr	r0, [r0, #12]
   12e94:	bx	lr

00012e98 <rb_new_rawbuffer>:
   12e98:	push	{fp, lr}
   12e9c:	mov	fp, sp
   12ea0:	mov	r0, #1
   12ea4:	mov	r1, #20
   12ea8:	bl	4f10 <calloc@plt>
   12eac:	cmp	r0, #0
   12eb0:	popne	{fp, pc}
   12eb4:	bl	5288 <rb_outofmemory@plt>

00012eb8 <rb_free_rawbuffer>:
   12eb8:	push	{r4, r5, r6, sl, fp, lr}
   12ebc:	add	fp, sp, #16
   12ec0:	ldr	r5, [r0]
   12ec4:	mov	r4, r0
   12ec8:	cmp	r5, #0
   12ecc:	beq	12f2c <rb_free_rawbuffer+0x74>
   12ed0:	mov	r6, #0
   12ed4:	ldr	r1, [r5]
   12ed8:	ldr	r5, [r5, #8]
   12edc:	mov	r3, r4
   12ee0:	ldr	r0, [r1, #8]
   12ee4:	ldr	r2, [r1, #4]
   12ee8:	cmp	r0, #0
   12eec:	streq	r2, [r4, #4]
   12ef0:	strne	r2, [r0, #4]
   12ef4:	ldrne	r2, [r1, #4]
   12ef8:	cmp	r2, #0
   12efc:	addne	r3, r2, #8
   12f00:	str	r0, [r3]
   12f04:	str	r6, [r1, #4]
   12f08:	str	r6, [r1, #8]
   12f0c:	ldr	r0, [r4, #8]
   12f10:	sub	r0, r0, #1
   12f14:	str	r0, [r4, #8]
   12f18:	ldr	r0, [pc, #24]	; 12f38 <rb_free_rawbuffer+0x80>
   12f1c:	ldr	r0, [pc, r0]
   12f20:	bl	51e0 <rb_bh_free@plt>
   12f24:	cmp	r5, #0
   12f28:	bne	12ed4 <rb_free_rawbuffer+0x1c>
   12f2c:	mov	r0, r4
   12f30:	pop	{r4, r5, r6, sl, fp, lr}
   12f34:	b	500c <free@plt>
   12f38:	.word	0x00032f7c

00012f3c <rb_init_rawbuffers>:
   12f3c:	mov	r1, r0
   12f40:	ldr	r0, [pc, #52]	; 12f7c <rb_init_rawbuffers+0x40>
   12f44:	ldr	r0, [pc, r0]
   12f48:	cmp	r0, #0
   12f4c:	bxne	lr
   12f50:	push	{fp, lr}
   12f54:	mov	fp, sp
   12f58:	ldr	r2, [pc, #32]	; 12f80 <rb_init_rawbuffers+0x44>
   12f5c:	movw	r0, #1044	; 0x414
   12f60:	add	r2, pc, r2
   12f64:	bl	53b4 <rb_bh_create@plt>
   12f68:	ldr	r1, [pc, #20]	; 12f84 <rb_init_rawbuffers+0x48>
   12f6c:	add	r1, pc, r1
   12f70:	str	r0, [r1]
   12f74:	pop	{fp, lr}
   12f78:	bx	lr
   12f7c:	.word	0x00032f54
   12f80:	.word	0x00003c89
   12f84:	.word	0x00032f2c

00012f88 <rb_init_patricia>:
   12f88:	bx	lr

00012f8c <rb_new_patricia>:
   12f8c:	push	{r4, sl, fp, lr}
   12f90:	add	fp, sp, #8
   12f94:	mov	r4, r0
   12f98:	mov	r0, #1
   12f9c:	mov	r1, #12
   12fa0:	bl	4f10 <calloc@plt>
   12fa4:	cmp	r0, #0
   12fa8:	strne	r4, [r0, #4]
   12fac:	ldrne	r1, [pc, #24]	; 12fcc <rb_new_patricia+0x40>
   12fb0:	ldrne	r1, [pc, r1]
   12fb4:	ldrne	r2, [pc, #20]	; 12fd0 <rb_new_patricia+0x44>
   12fb8:	addne	r1, r1, #1
   12fbc:	addne	r2, pc, r2
   12fc0:	strne	r1, [r2]
   12fc4:	popne	{r4, sl, fp, pc}
   12fc8:	bl	5288 <rb_outofmemory@plt>
   12fcc:	.word	0x00032eec
   12fd0:	.word	0x00032ee0

00012fd4 <rb_clear_patricia>:
   12fd4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12fd8:	add	fp, sp, #28
   12fdc:	sub	sp, sp, #524	; 0x20c
   12fe0:	ldr	r6, [r0]
   12fe4:	mov	r4, r0
   12fe8:	cmp	r6, #0
   12fec:	beq	13094 <rb_clear_patricia+0xc0>
   12ff0:	mov	r9, r1
   12ff4:	mov	sl, #0
   12ff8:	add	r8, sp, #4
   12ffc:	ldmib	r6, {r0, r5, r7}
   13000:	cmp	r0, #0
   13004:	beq	13030 <rb_clear_patricia+0x5c>
   13008:	ldr	r1, [r0, #4]
   1300c:	subs	r1, r1, #1
   13010:	str	r1, [r0, #4]
   13014:	bgt	1301c <rb_clear_patricia+0x48>
   13018:	bl	500c <free@plt>
   1301c:	cmp	r9, #0
   13020:	ldrne	r0, [r6, #20]
   13024:	cmpne	r0, #0
   13028:	beq	13030 <rb_clear_patricia+0x5c>
   1302c:	blx	r9
   13030:	mov	r0, r6
   13034:	bl	500c <free@plt>
   13038:	ldr	r0, [r4, #8]
   1303c:	cmp	r5, #0
   13040:	sub	r0, r0, #1
   13044:	str	r0, [r4, #8]
   13048:	beq	13060 <rb_clear_patricia+0x8c>
   1304c:	cmp	r7, #0
   13050:	mov	r6, r5
   13054:	strne	r7, [r8, sl, lsl #2]
   13058:	addne	sl, sl, #1
   1305c:	b	13080 <rb_clear_patricia+0xac>
   13060:	cmp	r7, #0
   13064:	beq	13070 <rb_clear_patricia+0x9c>
   13068:	mov	r6, r7
   1306c:	b	13080 <rb_clear_patricia+0xac>
   13070:	cmp	sl, #0
   13074:	beq	13094 <rb_clear_patricia+0xc0>
   13078:	sub	sl, sl, #1
   1307c:	ldr	r6, [r8, sl, lsl #2]
   13080:	cmp	r6, #0
   13084:	bne	12ffc <rb_clear_patricia+0x28>
   13088:	cmp	r4, #0
   1308c:	subeq	sp, fp, #28
   13090:	popeq	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13094:	mov	r0, r4
   13098:	sub	sp, fp, #28
   1309c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   130a0:	b	500c <free@plt>

000130a4 <rb_destroy_patricia>:
   130a4:	push	{fp, lr}
   130a8:	mov	fp, sp
   130ac:	bl	4e38 <rb_clear_patricia@plt>
   130b0:	ldr	r0, [pc, #20]	; 130cc <rb_destroy_patricia+0x28>
   130b4:	ldr	r0, [pc, r0]
   130b8:	ldr	r1, [pc, #16]	; 130d0 <rb_destroy_patricia+0x2c>
   130bc:	sub	r0, r0, #1
   130c0:	add	r1, pc, r1
   130c4:	str	r0, [r1]
   130c8:	pop	{fp, pc}
   130cc:	.word	0x00032de8
   130d0:	.word	0x00032ddc

000130d4 <rb_patricia_process>:
   130d4:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   130d8:	add	fp, sp, #24
   130dc:	sub	sp, sp, #520	; 0x208
   130e0:	ldr	r7, [r0]
   130e4:	cmp	r7, #0
   130e8:	beq	13150 <rb_patricia_process+0x7c>
   130ec:	mov	r4, r1
   130f0:	mov	r5, #0
   130f4:	add	r6, sp, #4
   130f8:	ldr	r0, [r7, #4]
   130fc:	cmp	r0, #0
   13100:	beq	1310c <rb_patricia_process+0x38>
   13104:	ldr	r1, [r7, #20]
   13108:	blx	r4
   1310c:	ldr	r0, [r7, #8]
   13110:	ldr	r7, [r7, #12]
   13114:	cmp	r0, #0
   13118:	beq	13130 <rb_patricia_process+0x5c>
   1311c:	cmp	r7, #0
   13120:	strne	r7, [r6, r5, lsl #2]
   13124:	addne	r5, r5, #1
   13128:	mov	r7, r0
   1312c:	b	13148 <rb_patricia_process+0x74>
   13130:	cmp	r7, #0
   13134:	bne	13148 <rb_patricia_process+0x74>
   13138:	cmp	r5, #0
   1313c:	beq	13150 <rb_patricia_process+0x7c>
   13140:	sub	r5, r5, #1
   13144:	ldr	r7, [r6, r5, lsl #2]
   13148:	cmp	r7, #0
   1314c:	bne	130f8 <rb_patricia_process+0x24>
   13150:	sub	sp, fp, #24
   13154:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}

00013158 <rb_patricia_search_exact>:
   13158:	push	{r4, sl, fp, lr}
   1315c:	add	fp, sp, #8
   13160:	ldr	r4, [r0]
   13164:	mov	r0, #0
   13168:	cmp	r4, #0
   1316c:	beq	131d4 <rb_patricia_search_exact+0x7c>
   13170:	mov	r2, r1
   13174:	add	r1, r1, #8
   13178:	mov	ip, #128	; 0x80
   1317c:	ldrh	r2, [r2, #2]
   13180:	ldr	r3, [r4]
   13184:	cmp	r3, r2
   13188:	bcs	131b0 <rb_patricia_search_exact+0x58>
   1318c:	ldrb	lr, [r1, r3, lsr #3]
   13190:	and	r3, r3, #7
   13194:	tst	lr, ip, lsr r3
   13198:	mov	r3, #12
   1319c:	movweq	r3, #8
   131a0:	ldr	r4, [r4, r3]
   131a4:	cmp	r4, #0
   131a8:	bne	13180 <rb_patricia_search_exact+0x28>
   131ac:	b	131d4 <rb_patricia_search_exact+0x7c>
   131b0:	bhi	131d4 <rb_patricia_search_exact+0x7c>
   131b4:	ldr	r3, [r4, #4]
   131b8:	cmp	r3, #0
   131bc:	popeq	{r4, sl, fp, pc}
   131c0:	add	r0, r3, #8
   131c4:	bl	131d8 <comp_with_mask>
   131c8:	cmp	r0, #0
   131cc:	moveq	r4, r0
   131d0:	mov	r0, r4
   131d4:	pop	{r4, sl, fp, pc}

000131d8 <comp_with_mask>:
   131d8:	push	{r4, r5, r6, r7, fp, lr}
   131dc:	add	fp, sp, #16
   131e0:	lsr	r6, r2, #3
   131e4:	mov	r7, r2
   131e8:	mov	r4, r1
   131ec:	mov	r5, r0
   131f0:	mov	r2, r6
   131f4:	bl	4d90 <memcmp@plt>
   131f8:	mov	r1, r0
   131fc:	mov	r0, #0
   13200:	cmp	r1, #0
   13204:	popne	{r4, r5, r6, r7, fp, pc}
   13208:	ands	r0, r7, #7
   1320c:	moveq	r0, #1
   13210:	popeq	{r4, r5, r6, r7, fp, pc}
   13214:	ldrb	r1, [r5, r6]
   13218:	ldrb	r2, [r4, r6]
   1321c:	rsb	r0, r0, #8
   13220:	eor	r1, r2, r1
   13224:	mov	r2, #255	; 0xff
   13228:	and	r0, r1, r2, lsl r0
   1322c:	clz	r0, r0
   13230:	lsr	r0, r0, #5
   13234:	pop	{r4, r5, r6, r7, fp, pc}

00013238 <rb_patricia_search_best2>:
   13238:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1323c:	add	fp, sp, #24
   13240:	sub	sp, sp, #520	; 0x208
   13244:	ldr	r5, [r0]
   13248:	cmp	r5, #0
   1324c:	beq	13300 <rb_patricia_search_best2+0xc8>
   13250:	ldrh	r3, [r1, #2]
   13254:	add	r4, r1, #8
   13258:	mov	r0, #0
   1325c:	mov	lr, #128	; 0x80
   13260:	add	ip, sp, #4
   13264:	ldr	r6, [r5]
   13268:	cmp	r6, r3
   1326c:	bcs	132a4 <rb_patricia_search_best2+0x6c>
   13270:	ldr	r7, [r5, #4]
   13274:	cmp	r7, #0
   13278:	strne	r5, [ip, r0, lsl #2]
   1327c:	addne	r0, r0, #1
   13280:	ldrb	r7, [r4, r6, lsr #3]
   13284:	and	r6, r6, #7
   13288:	tst	r7, lr, lsr r6
   1328c:	mov	r6, #12
   13290:	movweq	r6, #8
   13294:	ldr	r5, [r5, r6]
   13298:	cmp	r5, #0
   1329c:	bne	13264 <rb_patricia_search_best2+0x2c>
   132a0:	b	132b8 <rb_patricia_search_best2+0x80>
   132a4:	cmp	r2, #0
   132a8:	ldrne	r2, [r5, #4]
   132ac:	cmpne	r2, #0
   132b0:	strne	r5, [ip, r0, lsl #2]
   132b4:	addne	r0, r0, #1
   132b8:	cmp	r0, #1
   132bc:	blt	13300 <rb_patricia_search_best2+0xc8>
   132c0:	cmp	r1, #0
   132c4:	sub	r6, ip, #4
   132c8:	moveq	r4, r1
   132cc:	subs	r7, r0, #1
   132d0:	blt	13300 <rb_patricia_search_best2+0xc8>
   132d4:	ldr	r5, [r6, r0, lsl #2]
   132d8:	mov	r1, r4
   132dc:	ldr	r0, [r5, #4]
   132e0:	ldrh	r2, [r0, #2]
   132e4:	cmp	r0, #0
   132e8:	addne	r0, r0, #8
   132ec:	bl	131d8 <comp_with_mask>
   132f0:	cmp	r0, #0
   132f4:	mov	r0, r7
   132f8:	beq	132cc <rb_patricia_search_best2+0x94>
   132fc:	b	13304 <rb_patricia_search_best2+0xcc>
   13300:	mov	r5, #0
   13304:	mov	r0, r5
   13308:	sub	sp, fp, #24
   1330c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}

00013310 <rb_patricia_search_best>:
   13310:	mov	r2, #1
   13314:	b	13238 <rb_patricia_search_best2>

00013318 <rb_patricia_lookup>:
   13318:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1331c:	add	fp, sp, #28
   13320:	sub	sp, sp, #12
   13324:	ldr	r3, [r0]
   13328:	mov	r5, r1
   1332c:	mov	r9, r0
   13330:	cmp	r3, #0
   13334:	beq	1339c <rb_patricia_lookup+0x84>
   13338:	ldrh	r8, [r5, #2]
   1333c:	add	ip, r5, #8
   13340:	mov	r2, #128	; 0x80
   13344:	ldr	r1, [r3]
   13348:	mov	r0, r3
   1334c:	cmp	r1, r8
   13350:	bcc	13360 <rb_patricia_lookup+0x48>
   13354:	ldr	r3, [r0, #4]
   13358:	cmp	r3, #0
   1335c:	bne	133e8 <rb_patricia_lookup+0xd0>
   13360:	ldr	r3, [r9, #4]
   13364:	cmp	r1, r3
   13368:	bcs	13384 <rb_patricia_lookup+0x6c>
   1336c:	ldrb	r3, [ip, r1, lsr #3]
   13370:	and	r7, r1, #7
   13374:	tst	r3, r2, lsr r7
   13378:	beq	13384 <rb_patricia_lookup+0x6c>
   1337c:	ldr	r3, [r0, #12]
   13380:	b	13388 <rb_patricia_lookup+0x70>
   13384:	ldr	r3, [r0, #8]
   13388:	cmp	r3, #0
   1338c:	bne	13344 <rb_patricia_lookup+0x2c>
   13390:	cmp	r1, r8
   13394:	movcs	r1, r8
   13398:	b	133ec <rb_patricia_lookup+0xd4>
   1339c:	mov	r0, #1
   133a0:	mov	r1, #24
   133a4:	bl	4f10 <calloc@plt>
   133a8:	cmp	r0, #0
   133ac:	beq	13644 <rb_patricia_lookup+0x32c>
   133b0:	mov	r4, r0
   133b4:	ldrh	r0, [r5, #2]
   133b8:	str	r0, [r4]
   133bc:	mov	r0, r5
   133c0:	bl	13648 <Ref_Prefix>
   133c4:	vmov.i32	q8, #0	; 0x00000000
   133c8:	add	r1, r4, #8
   133cc:	vst1.32	{d16-d17}, [r1]
   133d0:	str	r0, [r4, #4]
   133d4:	str	r4, [r9]
   133d8:	ldr	r0, [r9, #8]
   133dc:	add	r0, r0, #1
   133e0:	str	r0, [r9, #8]
   133e4:	b	13638 <rb_patricia_lookup+0x320>
   133e8:	mov	r1, r8
   133ec:	ldr	r7, [r0, #4]
   133f0:	cmp	r1, #0
   133f4:	str	r5, [sp, #8]
   133f8:	add	lr, r7, #8
   133fc:	beq	13474 <rb_patricia_lookup+0x15c>
   13400:	ldrb	r2, [ip]
   13404:	ldrb	r3, [lr]
   13408:	eor	r4, r3, r2
   1340c:	mov	r2, #0
   13410:	mov	r3, #0
   13414:	tst	r4, #255	; 0xff
   13418:	bne	13450 <rb_patricia_lookup+0x138>
   1341c:	ldr	r3, [sp, #8]
   13420:	add	r7, r7, #9
   13424:	add	r6, r3, #9
   13428:	mov	r3, #0
   1342c:	add	sl, r3, #8
   13430:	cmp	sl, r1
   13434:	bcs	13478 <rb_patricia_lookup+0x160>
   13438:	ldrb	r4, [r6], #1
   1343c:	ldrb	r5, [r7], #1
   13440:	add	r3, r3, #8
   13444:	eor	r4, r5, r4
   13448:	tst	r4, #255	; 0xff
   1344c:	beq	1342c <rb_patricia_lookup+0x114>
   13450:	uxtb	r7, r4
   13454:	mov	r6, #128	; 0x80
   13458:	tst	r7, r6, lsr r2
   1345c:	bne	1346c <rb_patricia_lookup+0x154>
   13460:	add	r2, r2, #1
   13464:	cmp	r2, #8
   13468:	bcc	13458 <rb_patricia_lookup+0x140>
   1346c:	add	sl, r2, r3
   13470:	b	13478 <rb_patricia_lookup+0x160>
   13474:	mov	sl, #0
   13478:	cmp	sl, r1
   1347c:	movhi	sl, r1
   13480:	mov	r6, r0
   13484:	ldr	r0, [r0, #16]
   13488:	cmp	r0, #0
   1348c:	beq	1349c <rb_patricia_lookup+0x184>
   13490:	ldr	r1, [r0]
   13494:	cmp	r1, sl
   13498:	bcs	13480 <rb_patricia_lookup+0x168>
   1349c:	cmp	sl, r8
   134a0:	ldreq	r0, [r6]
   134a4:	cmpeq	r0, r8
   134a8:	beq	13594 <rb_patricia_lookup+0x27c>
   134ac:	mov	r0, #1
   134b0:	mov	r1, #24
   134b4:	str	lr, [sp, #4]
   134b8:	mov	r5, ip
   134bc:	bl	4f10 <calloc@plt>
   134c0:	cmp	r0, #0
   134c4:	beq	13644 <rb_patricia_lookup+0x32c>
   134c8:	mov	r4, r0
   134cc:	str	r8, [r0]
   134d0:	ldr	r0, [sp, #8]
   134d4:	bl	13648 <Ref_Prefix>
   134d8:	vmov.i32	q8, #0	; 0x00000000
   134dc:	add	r1, r4, #8
   134e0:	vst1.32	{d16-d17}, [r1]
   134e4:	str	r0, [r4, #4]
   134e8:	ldr	r7, [r9, #8]
   134ec:	add	r0, r7, #1
   134f0:	str	r0, [r9, #8]
   134f4:	ldr	r0, [r6]
   134f8:	cmp	r0, sl
   134fc:	bne	1352c <rb_patricia_lookup+0x214>
   13500:	str	r6, [r4, #16]
   13504:	ldr	r0, [r9, #4]
   13508:	cmp	sl, r0
   1350c:	bcs	1358c <rb_patricia_lookup+0x274>
   13510:	ldrb	r0, [r5, sl, lsr #3]
   13514:	and	r1, sl, #7
   13518:	mov	r2, #128	; 0x80
   1351c:	tst	r0, r2, lsr r1
   13520:	beq	1358c <rb_patricia_lookup+0x274>
   13524:	str	r4, [r6, #12]
   13528:	b	13638 <rb_patricia_lookup+0x320>
   1352c:	cmp	sl, r8
   13530:	bne	135b4 <rb_patricia_lookup+0x29c>
   13534:	ldr	r0, [r9, #4]
   13538:	cmp	r0, r8
   1353c:	bls	13558 <rb_patricia_lookup+0x240>
   13540:	ldr	r0, [sp, #4]
   13544:	and	r2, r8, #7
   13548:	mov	r3, #128	; 0x80
   1354c:	ldrb	r0, [r0, r8, lsr #3]
   13550:	tst	r0, r3, lsr r2
   13554:	addne	r1, r4, #12
   13558:	str	r6, [r1]
   1355c:	ldr	r0, [r6, #16]
   13560:	str	r0, [r4, #16]
   13564:	ldr	r0, [r6, #16]
   13568:	cmp	r0, #0
   1356c:	beq	13580 <rb_patricia_lookup+0x268>
   13570:	mov	r9, r0
   13574:	ldr	r1, [r9, #12]!
   13578:	cmp	r1, r6
   1357c:	addne	r9, r0, #8
   13580:	str	r4, [r9]
   13584:	str	r4, [r6, #16]
   13588:	b	13638 <rb_patricia_lookup+0x320>
   1358c:	str	r4, [r6, #8]
   13590:	b	13638 <rb_patricia_lookup+0x320>
   13594:	ldr	r0, [r6, #4]
   13598:	cmp	r0, #0
   1359c:	bne	135ac <rb_patricia_lookup+0x294>
   135a0:	ldr	r0, [sp, #8]
   135a4:	bl	13648 <Ref_Prefix>
   135a8:	str	r0, [r6, #4]
   135ac:	mov	r4, r6
   135b0:	b	13638 <rb_patricia_lookup+0x320>
   135b4:	mov	r0, #1
   135b8:	mov	r1, #24
   135bc:	bl	4f10 <calloc@plt>
   135c0:	cmp	r0, #0
   135c4:	beq	13644 <rb_patricia_lookup+0x32c>
   135c8:	str	sl, [r0]
   135cc:	ldr	r1, [r6, #16]
   135d0:	str	r1, [r0, #16]
   135d4:	add	r1, r7, #2
   135d8:	str	r1, [r9, #8]
   135dc:	ldr	r1, [r9, #4]
   135e0:	cmp	sl, r1
   135e4:	bcs	13608 <rb_patricia_lookup+0x2f0>
   135e8:	ldrb	r1, [r5, sl, lsr #3]
   135ec:	and	r2, sl, #7
   135f0:	mov	r3, #128	; 0x80
   135f4:	tst	r1, r3, lsr r2
   135f8:	beq	13608 <rb_patricia_lookup+0x2f0>
   135fc:	str	r6, [r0, #8]
   13600:	str	r4, [r0, #12]
   13604:	b	13610 <rb_patricia_lookup+0x2f8>
   13608:	str	r4, [r0, #8]
   1360c:	str	r6, [r0, #12]
   13610:	str	r0, [r4, #16]
   13614:	ldr	r1, [r6, #16]
   13618:	cmp	r1, #0
   1361c:	beq	13630 <rb_patricia_lookup+0x318>
   13620:	mov	r9, r1
   13624:	ldr	r2, [r9, #12]!
   13628:	cmp	r2, r6
   1362c:	addne	r9, r1, #8
   13630:	str	r0, [r9]
   13634:	str	r0, [r6, #16]
   13638:	mov	r0, r4
   1363c:	sub	sp, fp, #28
   13640:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13644:	bl	5288 <rb_outofmemory@plt>

00013648 <Ref_Prefix>:
   13648:	cmp	r0, #0
   1364c:	moveq	r0, #0
   13650:	bxeq	lr
   13654:	ldr	r1, [r0, #4]
   13658:	cmp	r1, #0
   1365c:	addne	r1, r1, #1
   13660:	strne	r1, [r0, #4]
   13664:	bxne	lr
   13668:	ldrh	r3, [r0]
   1366c:	ldrh	r2, [r0, #2]
   13670:	add	r1, r0, #8
   13674:	mov	r0, r3
   13678:	b	13bc4 <New_Prefix2>

0001367c <rb_patricia_remove>:
   1367c:	push	{r4, r5, r6, r7, fp, lr}
   13680:	add	fp, sp, #16
   13684:	ldr	r6, [r1, #12]
   13688:	mov	r4, r0
   1368c:	ldr	r0, [r1, #8]
   13690:	mov	r5, r1
   13694:	cmp	r6, #0
   13698:	beq	136d4 <rb_patricia_remove+0x58>
   1369c:	cmp	r0, #0
   136a0:	beq	136e0 <rb_patricia_remove+0x64>
   136a4:	ldr	r0, [r5, #4]
   136a8:	cmp	r0, #0
   136ac:	beq	136c4 <rb_patricia_remove+0x48>
   136b0:	ldr	r1, [r0, #4]
   136b4:	subs	r1, r1, #1
   136b8:	str	r1, [r0, #4]
   136bc:	bgt	136c4 <rb_patricia_remove+0x48>
   136c0:	bl	500c <free@plt>
   136c4:	mov	r0, #0
   136c8:	str	r0, [r5, #20]
   136cc:	str	r0, [r5, #4]
   136d0:	pop	{r4, r5, r6, r7, fp, pc}
   136d4:	cmp	r0, #0
   136d8:	mov	r6, r0
   136dc:	beq	13740 <rb_patricia_remove+0xc4>
   136e0:	ldr	r7, [r5, #16]
   136e4:	str	r7, [r6, #16]
   136e8:	ldr	r0, [r5, #4]
   136ec:	cmp	r0, #0
   136f0:	beq	13708 <rb_patricia_remove+0x8c>
   136f4:	ldr	r1, [r0, #4]
   136f8:	subs	r1, r1, #1
   136fc:	str	r1, [r0, #4]
   13700:	bgt	13708 <rb_patricia_remove+0x8c>
   13704:	bl	500c <free@plt>
   13708:	mov	r0, r5
   1370c:	bl	500c <free@plt>
   13710:	ldr	r0, [r4, #8]
   13714:	cmp	r7, #0
   13718:	sub	r0, r0, #1
   1371c:	str	r0, [r4, #8]
   13720:	streq	r6, [r4]
   13724:	popeq	{r4, r5, r6, r7, fp, pc}
   13728:	ldr	r0, [r7, #12]
   1372c:	cmp	r0, r5
   13730:	streq	r6, [r7, #12]
   13734:	popeq	{r4, r5, r6, r7, fp, pc}
   13738:	str	r6, [r7, #8]
   1373c:	pop	{r4, r5, r6, r7, fp, pc}
   13740:	ldr	r0, [r5, #4]
   13744:	ldr	r6, [r5, #16]
   13748:	cmp	r0, #0
   1374c:	beq	13764 <rb_patricia_remove+0xe8>
   13750:	ldr	r1, [r0, #4]
   13754:	subs	r1, r1, #1
   13758:	str	r1, [r0, #4]
   1375c:	bgt	13764 <rb_patricia_remove+0xe8>
   13760:	bl	500c <free@plt>
   13764:	mov	r0, r5
   13768:	bl	500c <free@plt>
   1376c:	ldr	r0, [r4, #8]
   13770:	cmp	r6, #0
   13774:	sub	r0, r0, #1
   13778:	str	r0, [r4, #8]
   1377c:	moveq	r0, #0
   13780:	streq	r0, [r4]
   13784:	popeq	{r4, r5, r6, r7, fp, pc}
   13788:	ldr	r0, [r6, #12]
   1378c:	cmp	r0, r5
   13790:	beq	137a0 <rb_patricia_remove+0x124>
   13794:	mov	r1, #0
   13798:	str	r1, [r6, #8]
   1379c:	b	137ac <rb_patricia_remove+0x130>
   137a0:	mov	r0, #0
   137a4:	str	r0, [r6, #12]
   137a8:	ldr	r0, [r6, #8]
   137ac:	ldr	r1, [r6, #4]
   137b0:	cmp	r1, #0
   137b4:	popne	{r4, r5, r6, r7, fp, pc}
   137b8:	ldr	r1, [r6, #16]
   137bc:	cmp	r1, #0
   137c0:	beq	137d8 <rb_patricia_remove+0x15c>
   137c4:	mov	r2, r1
   137c8:	ldr	r3, [r2, #12]!
   137cc:	cmp	r3, r6
   137d0:	subne	r2, r2, #4
   137d4:	b	137dc <rb_patricia_remove+0x160>
   137d8:	mov	r2, r4
   137dc:	str	r0, [r2]
   137e0:	str	r1, [r0, #16]
   137e4:	mov	r0, r6
   137e8:	bl	500c <free@plt>
   137ec:	ldr	r0, [r4, #8]
   137f0:	sub	r0, r0, #1
   137f4:	str	r0, [r4, #8]
   137f8:	pop	{r4, r5, r6, r7, fp, pc}

000137fc <make_and_lookup_ip>:
   137fc:	push	{r4, r5, fp, lr}
   13800:	add	fp, sp, #8
   13804:	mov	r3, r1
   13808:	mov	r4, r0
   1380c:	ldrh	r0, [r3], #8
   13810:	cmp	r0, #10
   13814:	addne	r3, r1, #4
   13818:	mov	r1, r3
   1381c:	bl	13bc4 <New_Prefix2>
   13820:	cmp	r0, #0
   13824:	beq	13858 <make_and_lookup_ip+0x5c>
   13828:	mov	r5, r0
   1382c:	mov	r0, r4
   13830:	mov	r1, r5
   13834:	bl	5204 <rb_patricia_lookup@plt>
   13838:	mov	r4, r0
   1383c:	ldr	r0, [r5, #4]
   13840:	subs	r0, r0, #1
   13844:	str	r0, [r5, #4]
   13848:	bgt	1385c <make_and_lookup_ip+0x60>
   1384c:	mov	r0, r5
   13850:	bl	500c <free@plt>
   13854:	b	1385c <make_and_lookup_ip+0x60>
   13858:	mov	r4, #0
   1385c:	mov	r0, r4
   13860:	pop	{r4, r5, fp, pc}

00013864 <make_and_lookup>:
   13864:	push	{r4, r5, r6, sl, fp, lr}
   13868:	add	fp, sp, #16
   1386c:	mov	r4, r0
   13870:	mov	r0, #2
   13874:	mov	r6, r1
   13878:	bl	138d8 <ascii2prefix>
   1387c:	mov	r5, r0
   13880:	cmp	r0, #0
   13884:	bne	138a0 <make_and_lookup+0x3c>
   13888:	mov	r0, #10
   1388c:	mov	r1, r6
   13890:	bl	138d8 <ascii2prefix>
   13894:	mov	r5, r0
   13898:	cmp	r0, #0
   1389c:	beq	138cc <make_and_lookup+0x68>
   138a0:	mov	r0, r4
   138a4:	mov	r1, r5
   138a8:	bl	5204 <rb_patricia_lookup@plt>
   138ac:	mov	r4, r0
   138b0:	ldr	r0, [r5, #4]
   138b4:	subs	r0, r0, #1
   138b8:	str	r0, [r5, #4]
   138bc:	bgt	138d0 <make_and_lookup+0x6c>
   138c0:	mov	r0, r5
   138c4:	bl	500c <free@plt>
   138c8:	b	138d0 <make_and_lookup+0x6c>
   138cc:	mov	r4, #0
   138d0:	mov	r0, r4
   138d4:	pop	{r4, r5, r6, sl, fp, pc}

000138d8 <ascii2prefix>:
   138d8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   138dc:	add	fp, sp, #28
   138e0:	sub	sp, sp, #20
   138e4:	sub	sp, sp, #1024	; 0x400
   138e8:	mov	r8, #0
   138ec:	cmp	r1, #0
   138f0:	beq	139d8 <ascii2prefix+0x100>
   138f4:	mov	sl, r0
   138f8:	sub	r0, r0, #10
   138fc:	mov	r5, r1
   13900:	clz	r0, r0
   13904:	cmp	sl, #2
   13908:	lsr	r0, r0, #5
   1390c:	lsl	r6, r0, #7
   13910:	mov	r0, r1
   13914:	mov	r1, #47	; 0x2f
   13918:	movweq	r6, #32
   1391c:	bl	4ee0 <strchr@plt>
   13920:	cmp	r0, #0
   13924:	beq	13970 <ascii2prefix+0x98>
   13928:	mov	r7, r0
   1392c:	add	r0, r0, #1
   13930:	bl	51d4 <atol@plt>
   13934:	sub	r7, r7, r5
   13938:	mov	r9, sp
   1393c:	mov	r4, r0
   13940:	mov	r1, r5
   13944:	mov	r0, r9
   13948:	mov	r2, r7
   1394c:	bl	5114 <memcpy@plt>
   13950:	cmp	r4, r6
   13954:	mov	r5, r4
   13958:	mov	r0, #0
   1395c:	movgt	r5, r6
   13960:	cmp	r4, #1
   13964:	strb	r0, [r9, r7]
   13968:	movlt	r5, r6
   1396c:	b	13978 <ascii2prefix+0xa0>
   13970:	mov	r9, r5
   13974:	mov	r5, r6
   13978:	cmp	sl, #2
   1397c:	bne	139a4 <ascii2prefix+0xcc>
   13980:	sub	r2, fp, #48	; 0x30
   13984:	mov	r0, #2
   13988:	mov	r1, r9
   1398c:	bl	4f58 <rb_inet_pton@plt>
   13990:	cmp	r0, #1
   13994:	blt	139d8 <ascii2prefix+0x100>
   13998:	sub	r1, fp, #48	; 0x30
   1399c:	mov	r0, #2
   139a0:	b	139cc <ascii2prefix+0xf4>
   139a4:	cmp	sl, #10
   139a8:	bne	139d8 <ascii2prefix+0x100>
   139ac:	sub	r2, fp, #48	; 0x30
   139b0:	mov	r0, #10
   139b4:	mov	r1, r9
   139b8:	bl	4f58 <rb_inet_pton@plt>
   139bc:	cmp	r0, #1
   139c0:	blt	139d8 <ascii2prefix+0x100>
   139c4:	sub	r1, fp, #48	; 0x30
   139c8:	mov	r0, #10
   139cc:	mov	r2, r5
   139d0:	bl	13bc4 <New_Prefix2>
   139d4:	mov	r8, r0
   139d8:	mov	r0, r8
   139dc:	sub	sp, fp, #28
   139e0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

000139e4 <rb_match_ip>:
   139e4:	push	{r4, r5, fp, lr}
   139e8:	add	fp, sp, #8
   139ec:	mov	r3, r1
   139f0:	mov	r4, r0
   139f4:	mov	r2, #32
   139f8:	ldrh	r0, [r3], #8
   139fc:	cmp	r0, #10
   13a00:	addne	r3, r1, #4
   13a04:	movweq	r2, #128	; 0x80
   13a08:	movwne	r0, #2
   13a0c:	mov	r1, r3
   13a10:	bl	13bc4 <New_Prefix2>
   13a14:	cmp	r0, #0
   13a18:	beq	13a50 <rb_match_ip+0x6c>
   13a1c:	mov	r5, r0
   13a20:	mov	r0, r4
   13a24:	mov	r2, #1
   13a28:	mov	r1, r5
   13a2c:	bl	4fd0 <rb_patricia_search_best2@plt>
   13a30:	mov	r4, r0
   13a34:	ldr	r0, [r5, #4]
   13a38:	subs	r0, r0, #1
   13a3c:	str	r0, [r5, #4]
   13a40:	bgt	13a54 <rb_match_ip+0x70>
   13a44:	mov	r0, r5
   13a48:	bl	500c <free@plt>
   13a4c:	b	13a54 <rb_match_ip+0x70>
   13a50:	mov	r4, #0
   13a54:	mov	r0, r4
   13a58:	pop	{r4, r5, fp, pc}

00013a5c <rb_match_ip_exact>:
   13a5c:	push	{r4, r5, fp, lr}
   13a60:	add	fp, sp, #8
   13a64:	mov	r3, r1
   13a68:	mov	r4, r0
   13a6c:	cmp	r2, #128	; 0x80
   13a70:	mov	r5, r2
   13a74:	ldrh	r0, [r3], #8
   13a78:	movcs	r5, #128	; 0x80
   13a7c:	cmp	r2, #32
   13a80:	movcs	r2, #32
   13a84:	cmp	r0, #10
   13a88:	addne	r3, r1, #4
   13a8c:	moveq	r2, r5
   13a90:	movwne	r0, #2
   13a94:	mov	r1, r3
   13a98:	bl	13bc4 <New_Prefix2>
   13a9c:	cmp	r0, #0
   13aa0:	beq	13ad4 <rb_match_ip_exact+0x78>
   13aa4:	mov	r5, r0
   13aa8:	mov	r0, r4
   13aac:	mov	r1, r5
   13ab0:	bl	51bc <rb_patricia_search_exact@plt>
   13ab4:	mov	r4, r0
   13ab8:	ldr	r0, [r5, #4]
   13abc:	subs	r0, r0, #1
   13ac0:	str	r0, [r5, #4]
   13ac4:	bgt	13ad8 <rb_match_ip_exact+0x7c>
   13ac8:	mov	r0, r5
   13acc:	bl	500c <free@plt>
   13ad0:	b	13ad8 <rb_match_ip_exact+0x7c>
   13ad4:	mov	r4, #0
   13ad8:	mov	r0, r4
   13adc:	pop	{r4, r5, fp, pc}

00013ae0 <rb_match_string>:
   13ae0:	push	{r4, r5, r6, sl, fp, lr}
   13ae4:	add	fp, sp, #16
   13ae8:	mov	r4, r0
   13aec:	mov	r0, #2
   13af0:	mov	r6, r1
   13af4:	bl	138d8 <ascii2prefix>
   13af8:	cmp	r0, #0
   13afc:	bne	13b14 <rb_match_string+0x34>
   13b00:	mov	r0, #10
   13b04:	mov	r1, r6
   13b08:	bl	138d8 <ascii2prefix>
   13b0c:	cmp	r0, #0
   13b10:	beq	13b48 <rb_match_string+0x68>
   13b14:	mov	r5, r0
   13b18:	mov	r0, r4
   13b1c:	mov	r2, #1
   13b20:	mov	r1, r5
   13b24:	bl	4fd0 <rb_patricia_search_best2@plt>
   13b28:	mov	r4, r0
   13b2c:	ldr	r0, [r5, #4]
   13b30:	subs	r0, r0, #1
   13b34:	str	r0, [r5, #4]
   13b38:	bgt	13b4c <rb_match_string+0x6c>
   13b3c:	mov	r0, r5
   13b40:	bl	500c <free@plt>
   13b44:	b	13b4c <rb_match_string+0x6c>
   13b48:	mov	r4, #0
   13b4c:	mov	r0, r4
   13b50:	pop	{r4, r5, r6, sl, fp, pc}

00013b54 <rb_match_exact_string>:
   13b54:	push	{r4, r5, r6, sl, fp, lr}
   13b58:	add	fp, sp, #16
   13b5c:	mov	r4, r0
   13b60:	mov	r0, #2
   13b64:	mov	r6, r1
   13b68:	bl	138d8 <ascii2prefix>
   13b6c:	cmp	r0, #0
   13b70:	bne	13b88 <rb_match_exact_string+0x34>
   13b74:	mov	r0, #10
   13b78:	mov	r1, r6
   13b7c:	bl	138d8 <ascii2prefix>
   13b80:	cmp	r0, #0
   13b84:	beq	13bb8 <rb_match_exact_string+0x64>
   13b88:	mov	r5, r0
   13b8c:	mov	r0, r4
   13b90:	mov	r1, r5
   13b94:	bl	51bc <rb_patricia_search_exact@plt>
   13b98:	mov	r4, r0
   13b9c:	ldr	r0, [r5, #4]
   13ba0:	subs	r0, r0, #1
   13ba4:	str	r0, [r5, #4]
   13ba8:	bgt	13bbc <rb_match_exact_string+0x68>
   13bac:	mov	r0, r5
   13bb0:	bl	500c <free@plt>
   13bb4:	b	13bbc <rb_match_exact_string+0x68>
   13bb8:	mov	r4, #0
   13bbc:	mov	r0, r4
   13bc0:	pop	{r4, r5, r6, sl, fp, pc}

00013bc4 <New_Prefix2>:
   13bc4:	push	{r4, r5, r6, sl, fp, lr}
   13bc8:	add	fp, sp, #16
   13bcc:	mov	r4, r2
   13bd0:	mov	r6, r1
   13bd4:	mov	r5, r0
   13bd8:	cmp	r0, #2
   13bdc:	beq	13c10 <New_Prefix2+0x4c>
   13be0:	mov	r0, #0
   13be4:	cmp	r5, #10
   13be8:	popne	{r4, r5, r6, sl, fp, pc}
   13bec:	mov	r0, #1
   13bf0:	mov	r1, #24
   13bf4:	bl	4f10 <calloc@plt>
   13bf8:	cmp	r0, #0
   13bfc:	beq	13c48 <New_Prefix2+0x84>
   13c00:	vld1.8	{d16-d17}, [r6]
   13c04:	add	r1, r0, #8
   13c08:	vst1.8	{d16-d17}, [r1]
   13c0c:	b	13c2c <New_Prefix2+0x68>
   13c10:	mov	r0, #1
   13c14:	mov	r1, #24
   13c18:	bl	4f10 <calloc@plt>
   13c1c:	cmp	r0, #0
   13c20:	beq	13c48 <New_Prefix2+0x84>
   13c24:	ldr	r1, [r6]
   13c28:	str	r1, [r0, #8]
   13c2c:	cmn	r4, #1
   13c30:	mov	r1, #1
   13c34:	strh	r5, [r0]
   13c38:	movle	r4, #128	; 0x80
   13c3c:	str	r1, [r0, #4]
   13c40:	strh	r4, [r0, #2]
   13c44:	pop	{r4, r5, r6, sl, fp, pc}
   13c48:	bl	5288 <rb_outofmemory@plt>

00013c4c <rb_dictionary_create>:
   13c4c:	push	{r4, r5, r6, sl, fp, lr}
   13c50:	add	fp, sp, #16
   13c54:	mov	r6, r1
   13c58:	mov	r5, r0
   13c5c:	mov	r0, #1
   13c60:	mov	r1, #40	; 0x28
   13c64:	bl	4f10 <calloc@plt>
   13c68:	cmp	r0, #0
   13c6c:	beq	13d04 <rb_dictionary_create+0xb8>
   13c70:	mov	r4, r0
   13c74:	str	r6, [r0]
   13c78:	mov	r0, r5
   13c7c:	bl	50f0 <strlen@plt>
   13c80:	add	r0, r0, #1
   13c84:	bl	52ac <malloc@plt>
   13c88:	cmp	r0, #0
   13c8c:	beq	13d04 <rb_dictionary_create+0xb8>
   13c90:	mov	r1, r5
   13c94:	mov	r6, r0
   13c98:	bl	5198 <strcpy@plt>
   13c9c:	str	r6, [r4, #20]
   13ca0:	mov	r0, #0
   13ca4:	ldr	r1, [pc, #92]	; 13d08 <rb_dictionary_create+0xbc>
   13ca8:	ldr	r1, [pc, r1]
   13cac:	str	r4, [r4, #28]
   13cb0:	str	r0, [r4, #32]
   13cb4:	add	r0, r4, #28
   13cb8:	cmp	r1, #0
   13cbc:	str	r1, [r4, #36]	; 0x24
   13cc0:	beq	13cd0 <rb_dictionary_create+0x84>
   13cc4:	add	r1, r1, #4
   13cc8:	str	r0, [r1]
   13ccc:	b	13ce4 <rb_dictionary_create+0x98>
   13cd0:	ldr	r1, [pc, #52]	; 13d0c <rb_dictionary_create+0xc0>
   13cd4:	add	r1, pc, r1
   13cd8:	ldr	r2, [r1, #4]!
   13cdc:	cmp	r2, #0
   13ce0:	streq	r0, [r1]
   13ce4:	ldr	r1, [pc, #36]	; 13d10 <rb_dictionary_create+0xc4>
   13ce8:	add	r1, pc, r1
   13cec:	str	r0, [r1]
   13cf0:	ldr	r0, [r1, #8]
   13cf4:	add	r0, r0, #1
   13cf8:	str	r0, [r1, #8]
   13cfc:	mov	r0, r4
   13d00:	pop	{r4, r5, r6, sl, fp, pc}
   13d04:	bl	5288 <rb_outofmemory@plt>
   13d08:	.word	0x000321f8
   13d0c:	.word	0x000321cc
   13d10:	.word	0x000321b8

00013d14 <rb_dictionary_set_comparator_func>:
   13d14:	str	r1, [r0]
   13d18:	bx	lr

00013d1c <rb_dictionary_get_comparator_func>:
   13d1c:	ldr	r0, [r0]
   13d20:	bx	lr

00013d24 <rb_dictionary_get_linear_index>:
   13d24:	push	{r4, sl, fp, lr}
   13d28:	add	fp, sp, #8
   13d2c:	mov	r4, r0
   13d30:	bl	5330 <rb_dictionary_find@plt>
   13d34:	cmp	r0, #0
   13d38:	mvneq	r0, #0
   13d3c:	popeq	{r4, sl, fp, pc}
   13d40:	ldrb	r2, [r4, #24]
   13d44:	tst	r2, #1
   13d48:	beq	13d7c <rb_dictionary_get_linear_index+0x58>
   13d4c:	ldr	r1, [r4, #8]
   13d50:	cmp	r1, #0
   13d54:	beq	13d74 <rb_dictionary_get_linear_index+0x50>
   13d58:	mov	r2, #0
   13d5c:	str	r2, [r1, #24]
   13d60:	add	r2, r2, #1
   13d64:	ldr	r1, [r1, #12]
   13d68:	cmp	r1, #0
   13d6c:	bne	13d5c <rb_dictionary_get_linear_index+0x38>
   13d70:	ldrb	r2, [r4, #24]
   13d74:	and	r1, r2, #254	; 0xfe
   13d78:	strb	r1, [r4, #24]
   13d7c:	ldr	r0, [r0, #24]
   13d80:	pop	{r4, sl, fp, pc}

00013d84 <rb_dictionary_find>:
   13d84:	push	{r4, r5, r6, sl, fp, lr}
   13d88:	add	fp, sp, #16
   13d8c:	mov	r6, r1
   13d90:	mov	r4, r0
   13d94:	bl	13f90 <rb_dictionary_retune>
   13d98:	ldr	r0, [r4, #4]
   13d9c:	mov	r5, #0
   13da0:	cmp	r0, #0
   13da4:	beq	13dc0 <rb_dictionary_find+0x3c>
   13da8:	ldr	r1, [r0, #20]
   13dac:	ldr	r2, [r4]
   13db0:	mov	r0, r6
   13db4:	blx	r2
   13db8:	cmp	r0, #0
   13dbc:	ldreq	r5, [r4, #4]
   13dc0:	mov	r0, r5
   13dc4:	pop	{r4, r5, r6, sl, fp, pc}

00013dc8 <rb_dictionary_destroy>:
   13dc8:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   13dcc:	add	fp, sp, #24
   13dd0:	ldr	r7, [r0, #8]
   13dd4:	mov	r8, r0
   13dd8:	cmp	r7, #0
   13ddc:	beq	13e14 <rb_dictionary_destroy+0x4c>
   13de0:	mov	r5, r2
   13de4:	mov	r6, r1
   13de8:	ldr	r4, [r7, #12]
   13dec:	cmp	r6, #0
   13df0:	beq	13e00 <rb_dictionary_destroy+0x38>
   13df4:	mov	r0, r7
   13df8:	mov	r1, r5
   13dfc:	blx	r6
   13e00:	mov	r0, r7
   13e04:	bl	500c <free@plt>
   13e08:	cmp	r4, #0
   13e0c:	mov	r7, r4
   13e10:	bne	13de8 <rb_dictionary_destroy+0x20>
   13e14:	ldr	r0, [r8, #36]	; 0x24
   13e18:	ldr	r1, [r8, #32]
   13e1c:	cmp	r0, #0
   13e20:	beq	13e30 <rb_dictionary_destroy+0x68>
   13e24:	str	r1, [r0, #4]
   13e28:	ldr	r1, [r8, #32]
   13e2c:	b	13e3c <rb_dictionary_destroy+0x74>
   13e30:	ldr	r2, [pc, #80]	; 13e88 <rb_dictionary_destroy+0xc0>
   13e34:	add	r2, pc, r2
   13e38:	str	r1, [r2, #4]
   13e3c:	ldr	r2, [pc, #72]	; 13e8c <rb_dictionary_destroy+0xc4>
   13e40:	cmp	r1, #0
   13e44:	add	r2, pc, r2
   13e48:	mov	r3, r2
   13e4c:	addne	r3, r1, #8
   13e50:	str	r0, [r3]
   13e54:	mov	r0, #0
   13e58:	str	r0, [r8, #32]
   13e5c:	str	r0, [r8, #36]	; 0x24
   13e60:	ldr	r0, [r2, #8]
   13e64:	sub	r0, r0, #1
   13e68:	str	r0, [r2, #8]
   13e6c:	ldr	r0, [r8, #20]
   13e70:	cmp	r0, #0
   13e74:	beq	13e7c <rb_dictionary_destroy+0xb4>
   13e78:	bl	500c <free@plt>
   13e7c:	mov	r0, r8
   13e80:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   13e84:	b	500c <free@plt>
   13e88:	.word	0x0003206c
   13e8c:	.word	0x0003205c

00013e90 <rb_dictionary_foreach>:
   13e90:	push	{r4, r5, r6, sl, fp, lr}
   13e94:	add	fp, sp, #16
   13e98:	ldr	r0, [r0, #8]
   13e9c:	cmp	r0, #0
   13ea0:	popeq	{r4, r5, r6, sl, fp, pc}
   13ea4:	mov	r4, r2
   13ea8:	mov	r5, r1
   13eac:	ldr	r6, [r0, #12]
   13eb0:	cmp	r5, #0
   13eb4:	beq	13ec0 <rb_dictionary_foreach+0x30>
   13eb8:	mov	r1, r4
   13ebc:	blx	r5
   13ec0:	cmp	r6, #0
   13ec4:	mov	r0, r6
   13ec8:	bne	13eac <rb_dictionary_foreach+0x1c>
   13ecc:	pop	{r4, r5, r6, sl, fp, pc}

00013ed0 <rb_dictionary_search>:
   13ed0:	push	{r4, r5, r6, sl, fp, lr}
   13ed4:	add	fp, sp, #16
   13ed8:	ldr	r0, [r0, #8]
   13edc:	cmp	r0, #0
   13ee0:	beq	13f14 <rb_dictionary_search+0x44>
   13ee4:	mov	r4, r2
   13ee8:	mov	r5, r1
   13eec:	ldr	r6, [r0, #12]
   13ef0:	cmp	r5, #0
   13ef4:	beq	13f08 <rb_dictionary_search+0x38>
   13ef8:	mov	r1, r4
   13efc:	blx	r5
   13f00:	cmp	r0, #0
   13f04:	popne	{r4, r5, r6, sl, fp, pc}
   13f08:	cmp	r6, #0
   13f0c:	mov	r0, r6
   13f10:	bne	13eec <rb_dictionary_search+0x1c>
   13f14:	mov	r0, #0
   13f18:	pop	{r4, r5, r6, sl, fp, pc}

00013f1c <rb_dictionary_foreach_start>:
   13f1c:	mov	r2, #0
   13f20:	str	r2, [r1, #4]
   13f24:	ldr	r0, [r0, #8]
   13f28:	cmp	r0, #0
   13f2c:	str	r0, [r1]
   13f30:	strne	r0, [r1]
   13f34:	ldrne	r0, [r0, #12]
   13f38:	strne	r0, [r1, #4]
   13f3c:	bx	lr

00013f40 <rb_dictionary_foreach_next>:
   13f40:	mov	r2, r0
   13f44:	ldr	r0, [r1]
   13f48:	cmp	r0, #0
   13f4c:	beq	13f68 <rb_dictionary_foreach_next+0x28>
   13f50:	ldr	r0, [r1, #4]
   13f54:	str	r0, [r1]
   13f58:	cmp	r0, #0
   13f5c:	ldrne	r0, [r0, #12]
   13f60:	strne	r0, [r1, #4]
   13f64:	bx	lr
   13f68:	ldr	r0, [pc, #8]	; 13f78 <rb_dictionary_foreach_next+0x38>
   13f6c:	mov	r1, r2
   13f70:	add	r0, pc, r0
   13f74:	b	5228 <rb_lib_log@plt>
   13f78:	.word	0x00002c8b

00013f7c <rb_dictionary_foreach_cur>:
   13f7c:	ldr	r0, [r1]
   13f80:	cmp	r0, #0
   13f84:	ldrne	r0, [r0, #16]
   13f88:	moveq	r0, #0
   13f8c:	bx	lr

00013f90 <rb_dictionary_retune>:
   13f90:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   13f94:	add	fp, sp, #24
   13f98:	sub	sp, sp, #32
   13f9c:	ldr	r6, [r0, #4]
   13fa0:	cmp	r6, #0
   13fa4:	beq	140ec <rb_dictionary_retune+0x15c>
   13fa8:	mov	r4, r0
   13fac:	mov	r0, #0
   13fb0:	mov	r5, r1
   13fb4:	str	r0, [sp, #4]
   13fb8:	str	r0, [sp, #8]
   13fbc:	mov	r0, r5
   13fc0:	ldr	r1, [r6, #20]
   13fc4:	ldr	r2, [r4]
   13fc8:	blx	r2
   13fcc:	add	r8, sp, #4
   13fd0:	cmp	r0, #0
   13fd4:	beq	140b0 <rb_dictionary_retune+0x120>
   13fd8:	mov	r9, r8
   13fdc:	cmn	r0, #1
   13fe0:	ble	14030 <rb_dictionary_retune+0xa0>
   13fe4:	mov	r7, r6
   13fe8:	ldr	r0, [r7, #4]!
   13fec:	cmp	r0, #0
   13ff0:	beq	140c4 <rb_dictionary_retune+0x134>
   13ff4:	ldr	r1, [r0, #20]
   13ff8:	ldr	r2, [r4]
   13ffc:	mov	r0, r5
   14000:	blx	r2
   14004:	cmp	r0, #1
   14008:	blt	1405c <rb_dictionary_retune+0xcc>
   1400c:	ldr	r0, [r6, #4]
   14010:	ldr	r1, [r0]
   14014:	mov	r7, r0
   14018:	str	r1, [r6, #4]
   1401c:	str	r6, [r7], #4
   14020:	ldr	r1, [r7]
   14024:	cmp	r1, #0
   14028:	bne	14060 <rb_dictionary_retune+0xd0>
   1402c:	b	140b8 <rb_dictionary_retune+0x128>
   14030:	ldr	r0, [r6]
   14034:	cmp	r0, #0
   14038:	beq	140c4 <rb_dictionary_retune+0x134>
   1403c:	ldr	r1, [r0, #20]
   14040:	ldr	r2, [r4]
   14044:	mov	r0, r5
   14048:	blx	r2
   1404c:	cmn	r0, #1
   14050:	ble	1406c <rb_dictionary_retune+0xdc>
   14054:	mov	r7, r6
   14058:	b	14088 <rb_dictionary_retune+0xf8>
   1405c:	mov	r0, r6
   14060:	str	r0, [r9, #4]
   14064:	mov	r9, r0
   14068:	b	14090 <rb_dictionary_retune+0x100>
   1406c:	ldr	r7, [r6]
   14070:	ldr	r0, [r7, #4]
   14074:	str	r0, [r6]
   14078:	str	r6, [r7, #4]
   1407c:	ldr	r0, [r7]
   14080:	cmp	r0, #0
   14084:	beq	140c0 <rb_dictionary_retune+0x130>
   14088:	str	r7, [r8]
   1408c:	mov	r8, r7
   14090:	ldr	r6, [r7]
   14094:	ldr	r2, [r4]
   14098:	mov	r0, r5
   1409c:	ldr	r1, [r6, #20]
   140a0:	blx	r2
   140a4:	cmp	r0, #0
   140a8:	bne	13fdc <rb_dictionary_retune+0x4c>
   140ac:	b	140c4 <rb_dictionary_retune+0x134>
   140b0:	add	r0, r8, #4
   140b4:	b	140c8 <rb_dictionary_retune+0x138>
   140b8:	mov	r6, r0
   140bc:	b	140c4 <rb_dictionary_retune+0x134>
   140c0:	mov	r6, r7
   140c4:	add	r0, r9, #4
   140c8:	ldr	r1, [r6]
   140cc:	str	r1, [r0]
   140d0:	ldr	r0, [r6, #4]
   140d4:	str	r0, [r8]
   140d8:	ldr	r0, [sp, #8]
   140dc:	str	r0, [r6]
   140e0:	ldr	r0, [sp, #4]
   140e4:	str	r0, [r6, #4]
   140e8:	str	r6, [r4, #4]
   140ec:	sub	sp, fp, #24
   140f0:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}

000140f4 <rb_dictionary_add>:
   140f4:	push	{r4, r5, r6, r7, fp, lr}
   140f8:	add	fp, sp, #16
   140fc:	mov	r6, r1
   14100:	mov	r5, r0
   14104:	mov	r0, #1
   14108:	mov	r1, #28
   1410c:	mov	r7, r2
   14110:	bl	4f10 <calloc@plt>
   14114:	cmp	r0, #0
   14118:	beq	14240 <rb_dictionary_add+0x14c>
   1411c:	str	r7, [r0, #16]
   14120:	str	r6, [r0, #20]
   14124:	mov	r4, r0
   14128:	ldrb	r0, [r5, #24]
   1412c:	orr	r0, r0, #1
   14130:	strb	r0, [r5, #24]
   14134:	ldr	r1, [r5, #16]
   14138:	ldr	r0, [r5, #4]
   1413c:	add	r1, r1, #1
   14140:	cmp	r0, #0
   14144:	str	r1, [r5, #16]
   14148:	beq	141b4 <rb_dictionary_add+0xc0>
   1414c:	mov	r0, r5
   14150:	mov	r1, r6
   14154:	bl	13f90 <rb_dictionary_retune>
   14158:	ldr	r1, [r5, #4]
   1415c:	ldr	r0, [r4, #20]
   14160:	ldr	r2, [r5]
   14164:	ldr	r1, [r1, #20]
   14168:	blx	r2
   1416c:	cmn	r0, #1
   14170:	ble	141cc <rb_dictionary_add+0xd8>
   14174:	cmp	r0, #0
   14178:	beq	1420c <rb_dictionary_add+0x118>
   1417c:	ldr	r0, [r5, #4]
   14180:	ldr	r1, [r0, #4]
   14184:	stm	r4, {r0, r1}
   14188:	mov	r1, #0
   1418c:	str	r1, [r0, #4]
   14190:	ldr	r1, [r0, #12]
   14194:	add	r2, r1, #8
   14198:	cmp	r1, #0
   1419c:	addeq	r2, r5, #12
   141a0:	str	r4, [r2]
   141a4:	str	r0, [r4, #8]
   141a8:	str	r1, [r4, #12]
   141ac:	str	r4, [r0, #12]
   141b0:	b	14204 <rb_dictionary_add+0x110>
   141b4:	vmov.i32	q8, #0	; 0x00000000
   141b8:	vst1.32	{d16-d17}, [r4]
   141bc:	str	r4, [r5, #4]
   141c0:	str	r4, [r5, #8]
   141c4:	str	r4, [r5, #12]
   141c8:	b	14238 <rb_dictionary_add+0x144>
   141cc:	ldr	r0, [r5, #4]
   141d0:	ldr	r1, [r0]
   141d4:	str	r0, [r4, #4]
   141d8:	str	r1, [r4]
   141dc:	mov	r1, #0
   141e0:	str	r1, [r0]
   141e4:	ldr	r1, [r0, #8]
   141e8:	add	r2, r1, #12
   141ec:	cmp	r1, #0
   141f0:	addeq	r2, r5, #8
   141f4:	str	r4, [r2]
   141f8:	str	r0, [r4, #12]
   141fc:	str	r1, [r4, #8]
   14200:	str	r4, [r0, #8]
   14204:	str	r4, [r5, #4]
   14208:	b	14238 <rb_dictionary_add+0x144>
   1420c:	ldr	r0, [r5, #4]
   14210:	ldr	r1, [r4, #20]
   14214:	str	r1, [r0, #20]
   14218:	ldr	r1, [r4, #16]
   1421c:	str	r1, [r0, #16]
   14220:	ldr	r0, [r5, #16]
   14224:	sub	r0, r0, #1
   14228:	str	r0, [r5, #16]
   1422c:	mov	r0, r4
   14230:	bl	500c <free@plt>
   14234:	ldr	r4, [r5, #4]
   14238:	mov	r0, r4
   1423c:	pop	{r4, r5, r6, r7, fp, pc}
   14240:	bl	5288 <rb_outofmemory@plt>

00014244 <rb_dictionary_delete>:
   14244:	push	{r4, r5, r6, r7, fp, lr}
   14248:	add	fp, sp, #16
   1424c:	mov	r5, r0
   14250:	bl	5330 <rb_dictionary_find@plt>
   14254:	cmp	r0, #0
   14258:	beq	142d0 <rb_dictionary_delete+0x8c>
   1425c:	ldrb	r1, [r5, #24]
   14260:	ldr	r7, [r0, #16]
   14264:	orr	r1, r1, #1
   14268:	strb	r1, [r5, #24]
   1426c:	ldr	r1, [r5, #4]
   14270:	cmp	r1, #0
   14274:	beq	14334 <rb_dictionary_delete+0xf0>
   14278:	ldr	r4, [r1]
   1427c:	ldr	r2, [r1, #4]
   14280:	cmp	r4, #0
   14284:	beq	142d8 <rb_dictionary_delete+0x94>
   14288:	cmp	r2, #0
   1428c:	beq	142e0 <rb_dictionary_delete+0x9c>
   14290:	ldr	r3, [r1, #12]
   14294:	cmp	r3, r2
   14298:	beq	142e8 <rb_dictionary_delete+0xa4>
   1429c:	mov	r4, r2
   142a0:	mov	r6, r4
   142a4:	ldr	r4, [r4]
   142a8:	cmp	r4, #0
   142ac:	cmpne	r4, r3
   142b0:	bne	142a0 <rb_dictionary_delete+0x5c>
   142b4:	ldr	r4, [r3, #4]
   142b8:	str	r4, [r6]
   142bc:	str	r3, [r5, #4]
   142c0:	ldr	r6, [r1]
   142c4:	str	r6, [r3]
   142c8:	str	r2, [r3, #4]
   142cc:	b	142f0 <rb_dictionary_delete+0xac>
   142d0:	mov	r7, #0
   142d4:	b	14338 <rb_dictionary_delete+0xf4>
   142d8:	str	r2, [r5, #4]
   142dc:	b	142f0 <rb_dictionary_delete+0xac>
   142e0:	str	r4, [r5, #4]
   142e4:	b	142f0 <rb_dictionary_delete+0xac>
   142e8:	str	r2, [r5, #4]
   142ec:	str	r4, [r2]
   142f0:	ldr	r2, [r1, #8]
   142f4:	cmp	r2, #0
   142f8:	ldrne	r3, [r1, #12]
   142fc:	strne	r3, [r2, #12]
   14300:	ldr	r3, [r5, #8]
   14304:	cmp	r3, r1
   14308:	ldr	r3, [r1, #12]
   1430c:	streq	r3, [r5, #8]
   14310:	cmp	r3, #0
   14314:	strne	r2, [r3, #8]
   14318:	ldr	r2, [r5, #12]
   1431c:	cmp	r2, r1
   14320:	ldreq	r1, [r1, #8]
   14324:	streq	r1, [r5, #12]
   14328:	ldr	r1, [r5, #16]
   1432c:	sub	r1, r1, #1
   14330:	str	r1, [r5, #16]
   14334:	bl	500c <free@plt>
   14338:	mov	r0, r7
   1433c:	pop	{r4, r5, r6, r7, fp, pc}

00014340 <rb_dictionary_retrieve>:
   14340:	push	{fp, lr}
   14344:	mov	fp, sp
   14348:	bl	5330 <rb_dictionary_find@plt>
   1434c:	cmp	r0, #0
   14350:	ldrne	r0, [r0, #16]
   14354:	moveq	r0, #0
   14358:	pop	{fp, pc}

0001435c <rb_dictionary_size>:
   1435c:	ldr	r0, [r0, #16]
   14360:	bx	lr

00014364 <rb_dictionary_stats>:
   14364:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   14368:	add	fp, sp, #24
   1436c:	sub	sp, sp, #280	; 0x118
   14370:	mov	r6, r0
   14374:	ldr	r0, [r0, #16]
   14378:	mov	r5, r2
   1437c:	mov	r7, r1
   14380:	cmp	r0, #0
   14384:	beq	143dc <rb_dictionary_stats+0x78>
   14388:	mov	r0, #0
   1438c:	add	r2, sp, #20
   14390:	mov	r1, #0
   14394:	str	r0, [sp, #20]
   14398:	ldr	r0, [r6, #4]
   1439c:	bl	14440 <stats_recurse>
   143a0:	ldr	r1, [r6, #16]
   143a4:	ldr	r3, [r6, #20]
   143a8:	ldr	r2, [sp, #20]
   143ac:	ldr	r6, [pc, #120]	; 1442c <rb_dictionary_stats+0xc8>
   143b0:	str	r0, [sp, #8]
   143b4:	udiv	r4, r0, r1
   143b8:	add	r6, pc, r6
   143bc:	str	r1, [sp, #4]
   143c0:	str	r2, [sp, #16]
   143c4:	add	r0, sp, #24
   143c8:	str	r6, [sp]
   143cc:	str	r4, [sp, #12]
   143d0:	ldr	r2, [pc, #88]	; 14430 <rb_dictionary_stats+0xcc>
   143d4:	add	r2, pc, r2
   143d8:	b	14410 <rb_dictionary_stats+0xac>
   143dc:	ldr	r3, [r6, #20]
   143e0:	ldr	r0, [pc, #76]	; 14434 <rb_dictionary_stats+0xd0>
   143e4:	ldr	r1, [pc, #76]	; 14438 <rb_dictionary_stats+0xd4>
   143e8:	add	r0, pc, r0
   143ec:	add	r1, pc, r1
   143f0:	str	r1, [sp]
   143f4:	str	r0, [sp, #4]
   143f8:	str	r0, [sp, #8]
   143fc:	str	r0, [sp, #12]
   14400:	str	r0, [sp, #16]
   14404:	add	r0, sp, #24
   14408:	ldr	r2, [pc, #44]	; 1443c <rb_dictionary_stats+0xd8>
   1440c:	add	r2, pc, r2
   14410:	mov	r1, #256	; 0x100
   14414:	bl	54a4 <snprintf@plt>
   14418:	add	r0, sp, #24
   1441c:	mov	r1, r5
   14420:	blx	r7
   14424:	sub	sp, fp, #24
   14428:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1442c:	.word	0x000028b8
   14430:	.word	0x00002878
   14434:	.word	0x00001a5f
   14438:	.word	0x00002884
   1443c:	.word	0x00002869

00014440 <stats_recurse>:
   14440:	push	{r4, r5, r6, r7, fp, lr}
   14444:	add	fp, sp, #16
   14448:	mov	r6, r0
   1444c:	ldr	r0, [r2]
   14450:	mov	r5, r2
   14454:	mov	r4, r1
   14458:	cmp	r0, r1
   1445c:	strlt	r4, [r5]
   14460:	cmp	r6, #0
   14464:	beq	144ac <stats_recurse+0x6c>
   14468:	ldr	r0, [r6]
   1446c:	mov	r7, r4
   14470:	cmp	r0, #0
   14474:	beq	14488 <stats_recurse+0x48>
   14478:	add	r1, r4, #1
   1447c:	mov	r2, r5
   14480:	bl	14440 <stats_recurse>
   14484:	add	r7, r0, r4
   14488:	ldr	r0, [r6, #4]
   1448c:	cmp	r0, #0
   14490:	beq	144a8 <stats_recurse+0x68>
   14494:	add	r1, r4, #1
   14498:	mov	r2, r5
   1449c:	bl	14440 <stats_recurse>
   144a0:	add	r0, r0, r7
   144a4:	pop	{r4, r5, r6, r7, fp, pc}
   144a8:	mov	r4, r7
   144ac:	mov	r0, r4
   144b0:	pop	{r4, r5, r6, r7, fp, pc}

000144b4 <rb_dictionary_stats_walk>:
   144b4:	push	{r4, r5, r6, sl, fp, lr}
   144b8:	add	fp, sp, #16
   144bc:	ldr	r6, [pc, #48]	; 144f4 <rb_dictionary_stats_walk+0x40>
   144c0:	ldr	r6, [pc, r6]
   144c4:	cmp	r6, #0
   144c8:	popeq	{r4, r5, r6, sl, fp, pc}
   144cc:	mov	r4, r1
   144d0:	mov	r5, r0
   144d4:	ldr	r0, [r6]
   144d8:	mov	r1, r5
   144dc:	mov	r2, r4
   144e0:	bl	52a0 <rb_dictionary_stats@plt>
   144e4:	ldr	r6, [r6, #8]
   144e8:	cmp	r6, #0
   144ec:	bne	144d4 <rb_dictionary_stats_walk+0x20>
   144f0:	pop	{r4, r5, r6, sl, fp, pc}
   144f4:	.word	0x000319e0

000144f8 <rb_radixtree_create>:
   144f8:	push	{r4, r5, r6, sl, fp, lr}
   144fc:	add	fp, sp, #16
   14500:	mov	r6, r1
   14504:	mov	r5, r0
   14508:	mov	r0, #1
   1450c:	mov	r1, #28
   14510:	bl	4f10 <calloc@plt>
   14514:	cmp	r0, #0
   14518:	beq	145ac <rb_radixtree_create+0xb4>
   1451c:	mov	r4, r0
   14520:	str	r6, [r0]
   14524:	mov	r0, r5
   14528:	bl	50f0 <strlen@plt>
   1452c:	add	r0, r0, #1
   14530:	bl	52ac <malloc@plt>
   14534:	cmp	r0, #0
   14538:	beq	145ac <rb_radixtree_create+0xb4>
   1453c:	mov	r1, r5
   14540:	mov	r6, r0
   14544:	bl	5198 <strcpy@plt>
   14548:	mov	r1, #0
   1454c:	str	r1, [r4, #4]
   14550:	ldr	r0, [pc, #88]	; 145b0 <rb_radixtree_create+0xb8>
   14554:	ldr	r0, [pc, r0]
   14558:	str	r6, [r4, #12]
   1455c:	str	r4, [r4, #16]
   14560:	str	r1, [r4, #20]
   14564:	add	r1, r4, #16
   14568:	ldr	r2, [r0]
   1456c:	cmp	r2, #0
   14570:	str	r2, [r4, #24]
   14574:	beq	14584 <rb_radixtree_create+0x8c>
   14578:	add	r2, r2, #4
   1457c:	str	r1, [r2]
   14580:	b	14594 <rb_radixtree_create+0x9c>
   14584:	mov	r2, r0
   14588:	ldr	r3, [r2, #4]!
   1458c:	cmp	r3, #0
   14590:	streq	r1, [r2]
   14594:	str	r1, [r0]
   14598:	ldr	r1, [r0, #8]
   1459c:	add	r1, r1, #1
   145a0:	str	r1, [r0, #8]
   145a4:	mov	r0, r4
   145a8:	pop	{r4, r5, r6, sl, fp, pc}
   145ac:	bl	5288 <rb_outofmemory@plt>
   145b0:	.word	0x00013e80

000145b4 <rb_radixtree_destroy>:
   145b4:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   145b8:	add	fp, sp, #24
   145bc:	sub	sp, sp, #40	; 0x28
   145c0:	mov	r6, r1
   145c4:	mov	r1, sp
   145c8:	mov	r5, r2
   145cc:	mov	r4, r0
   145d0:	bl	4d48 <rb_radixtree_foreach_start@plt>
   145d4:	cmp	r4, #0
   145d8:	ldrne	r7, [sp, #8]
   145dc:	cmpne	r7, #0
   145e0:	bne	1465c <rb_radixtree_destroy+0xa8>
   145e4:	ldr	r0, [r4, #24]
   145e8:	ldr	r1, [r4, #20]
   145ec:	cmp	r0, #0
   145f0:	beq	14600 <rb_radixtree_destroy+0x4c>
   145f4:	str	r1, [r0, #4]
   145f8:	ldr	r1, [r4, #20]
   145fc:	b	1460c <rb_radixtree_destroy+0x58>
   14600:	ldr	r2, [pc, #160]	; 146a8 <rb_radixtree_destroy+0xf4>
   14604:	ldr	r2, [pc, r2]
   14608:	str	r1, [r2, #4]
   1460c:	ldr	r2, [pc, #152]	; 146ac <rb_radixtree_destroy+0xf8>
   14610:	cmp	r1, #0
   14614:	ldr	r2, [pc, r2]
   14618:	mov	r3, r2
   1461c:	addne	r3, r1, #8
   14620:	str	r0, [r3]
   14624:	mov	r0, #0
   14628:	str	r0, [r4, #20]
   1462c:	str	r0, [r4, #24]
   14630:	ldr	r0, [r2, #8]
   14634:	sub	r0, r0, #1
   14638:	str	r0, [r2, #8]
   1463c:	ldr	r0, [r4, #12]
   14640:	cmp	r0, #0
   14644:	beq	1464c <rb_radixtree_destroy+0x98>
   14648:	bl	500c <free@plt>
   1464c:	mov	r0, r4
   14650:	bl	500c <free@plt>
   14654:	sub	sp, fp, #24
   14658:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1465c:	mov	r8, sp
   14660:	ldr	r1, [r7, #4]
   14664:	cmp	r1, #0
   14668:	beq	145e4 <rb_radixtree_destroy+0x30>
   1466c:	cmp	r6, #0
   14670:	beq	14680 <rb_radixtree_destroy+0xcc>
   14674:	ldr	r0, [r7, #8]
   14678:	mov	r2, r5
   1467c:	blx	r6
   14680:	ldr	r1, [r7, #8]
   14684:	mov	r0, r4
   14688:	bl	55b8 <rb_radixtree_delete@plt>
   1468c:	mov	r0, r4
   14690:	mov	r1, r8
   14694:	bl	4d84 <rb_radixtree_foreach_next@plt>
   14698:	ldr	r7, [sp, #8]
   1469c:	cmp	r7, #0
   146a0:	bne	14660 <rb_radixtree_destroy+0xac>
   146a4:	b	145e4 <rb_radixtree_destroy+0x30>
   146a8:	.word	0x00013dd0
   146ac:	.word	0x00013dc0

000146b0 <rb_radixtree_foreach_start>:
   146b0:	cmp	r0, #0
   146b4:	beq	146d0 <rb_radixtree_foreach_start+0x20>
   146b8:	ldr	r2, [r0, #4]
   146bc:	cmp	r2, #0
   146c0:	bne	146fc <rb_radixtree_foreach_start+0x4c>
   146c4:	mov	r0, #0
   146c8:	str	r0, [r1, #8]
   146cc:	str	r0, [r1, #12]
   146d0:	bx	lr
   146d4:	mov	ip, r2
   146d8:	mov	r3, #0
   146dc:	add	r2, ip, r3, lsl #2
   146e0:	ldr	r2, [r2, #4]
   146e4:	cmp	r2, #0
   146e8:	bne	146fc <rb_radixtree_foreach_start+0x4c>
   146ec:	add	r3, r3, #1
   146f0:	cmp	r3, #15
   146f4:	bls	146dc <rb_radixtree_foreach_start+0x2c>
   146f8:	mov	r2, ip
   146fc:	ldr	r3, [r2]
   14700:	cmn	r3, #1
   14704:	bne	146d4 <rb_radixtree_foreach_start+0x24>
   14708:	cmp	r2, #0
   1470c:	str	r2, [r1, #8]
   14710:	str	r2, [r1, #12]
   14714:	bxeq	lr
   14718:	b	14770 <rb_radixtree_foreach_next>

0001471c <rb_radixtree_foreach_cur>:
   1471c:	mov	r2, r0
   14720:	mov	r0, #0
   14724:	cmp	r2, #0
   14728:	ldrne	r1, [r1, #8]
   1472c:	cmpne	r1, #0
   14730:	ldrne	r0, [r1, #4]
   14734:	bx	lr

00014738 <rb_radixtree_delete>:
   14738:	push	{r4, r5, fp, lr}
   1473c:	add	fp, sp, #8
   14740:	mov	r2, #0
   14744:	mov	r5, r0
   14748:	mov	r4, #0
   1474c:	bl	5468 <rb_radixtree_elem_find@plt>
   14750:	cmp	r0, #0
   14754:	beq	14768 <rb_radixtree_delete+0x30>
   14758:	ldr	r4, [r0, #4]
   1475c:	mov	r1, r0
   14760:	mov	r0, r5
   14764:	bl	4ce8 <rb_radixtree_elem_delete@plt>
   14768:	mov	r0, r4
   1476c:	pop	{r4, r5, fp, pc}

00014770 <rb_radixtree_foreach_next>:
   14770:	push	{r4, r5, fp, lr}
   14774:	add	fp, sp, #8
   14778:	cmp	r0, #0
   1477c:	beq	14850 <rb_radixtree_foreach_next+0xe0>
   14780:	ldr	r0, [r1, #8]
   14784:	mov	r4, r1
   14788:	cmp	r0, #0
   1478c:	beq	14850 <rb_radixtree_foreach_next+0xe0>
   14790:	ldr	r0, [r4, #12]
   14794:	cmp	r0, #0
   14798:	str	r0, [r4, #8]
   1479c:	popeq	{r4, r5, fp, pc}
   147a0:	ldr	r1, [r0, #12]
   147a4:	cmp	r1, #0
   147a8:	beq	14848 <rb_radixtree_foreach_next+0xd8>
   147ac:	ldrb	r2, [r0, #16]
   147b0:	b	147f0 <rb_radixtree_foreach_next+0x80>
   147b4:	sub	r3, r2, #1
   147b8:	cmp	r3, #15
   147bc:	blt	147f0 <rb_radixtree_foreach_next+0x80>
   147c0:	ldr	r3, [r1, #68]	; 0x44
   147c4:	cmp	r3, #0
   147c8:	beq	14848 <rb_radixtree_foreach_next+0xd8>
   147cc:	ldrb	r2, [r1, #72]	; 0x48
   147d0:	mov	r1, r3
   147d4:	cmp	r2, #14
   147d8:	bhi	147c0 <rb_radixtree_foreach_next+0x50>
   147dc:	add	r2, r2, #1
   147e0:	mov	r1, r3
   147e4:	b	147f0 <rb_radixtree_foreach_next+0x80>
   147e8:	mov	r2, #0
   147ec:	mov	r1, r5
   147f0:	mov	r3, r2
   147f4:	add	r2, r1, r3, lsl #2
   147f8:	cmp	r3, #14
   147fc:	ldr	r5, [r2, #4]
   14800:	add	r2, r3, #1
   14804:	bgt	14814 <rb_radixtree_foreach_next+0xa4>
   14808:	cmp	r5, #0
   1480c:	mov	r3, r2
   14810:	beq	147f4 <rb_radixtree_foreach_next+0x84>
   14814:	cmp	r5, #0
   14818:	beq	147b4 <rb_radixtree_foreach_next+0x44>
   1481c:	ldr	r3, [r5]
   14820:	cmn	r3, #1
   14824:	bne	147e8 <rb_radixtree_foreach_next+0x78>
   14828:	cmp	r5, r0
   1482c:	beq	147b4 <rb_radixtree_foreach_next+0x44>
   14830:	ldr	r1, [r0, #8]
   14834:	ldr	r0, [r5, #8]
   14838:	bl	55dc <strcmp@plt>
   1483c:	cmn	r0, #1
   14840:	strgt	r5, [r4, #12]
   14844:	popgt	{r4, r5, fp, pc}
   14848:	mov	r0, #0
   1484c:	str	r0, [r4, #12]
   14850:	pop	{r4, r5, fp, pc}

00014854 <rb_radixtree_foreach>:
   14854:	push	{r4, r5, r6, r7, fp, lr}
   14858:	add	fp, sp, #16
   1485c:	ldr	r0, [r0, #4]
   14860:	cmp	r0, #0
   14864:	beq	1493c <rb_radixtree_foreach+0xe8>
   14868:	mov	r3, r1
   1486c:	ldr	r1, [r0]
   14870:	mov	r4, r2
   14874:	cmn	r1, #1
   14878:	beq	14920 <rb_radixtree_foreach+0xcc>
   1487c:	mov	r1, #0
   14880:	mov	r5, r0
   14884:	add	r0, r5, r1, lsl #2
   14888:	add	r6, r1, #1
   1488c:	cmp	r1, #14
   14890:	ldr	r2, [r0, #4]
   14894:	bgt	148a4 <rb_radixtree_foreach+0x50>
   14898:	cmp	r2, #0
   1489c:	mov	r1, r6
   148a0:	beq	14884 <rb_radixtree_foreach+0x30>
   148a4:	cmp	r2, #0
   148a8:	beq	148e8 <rb_radixtree_foreach+0x94>
   148ac:	ldr	r0, [r2]
   148b0:	mov	r1, r6
   148b4:	cmn	r0, #1
   148b8:	mov	r0, r5
   148bc:	movne	r0, r2
   148c0:	movwne	r1, #0
   148c4:	bne	148f0 <rb_radixtree_foreach+0x9c>
   148c8:	cmp	r3, #0
   148cc:	beq	148f0 <rb_radixtree_foreach+0x9c>
   148d0:	ldr	r1, [r2, #4]
   148d4:	ldr	r0, [r2, #8]
   148d8:	mov	r2, r4
   148dc:	mov	r7, r3
   148e0:	blx	r3
   148e4:	mov	r3, r7
   148e8:	mov	r0, r5
   148ec:	mov	r1, r6
   148f0:	cmp	r1, #16
   148f4:	blt	14880 <rb_radixtree_foreach+0x2c>
   148f8:	mov	r1, r0
   148fc:	ldr	r0, [r1, #68]	; 0x44
   14900:	cmp	r0, #0
   14904:	popeq	{r4, r5, r6, r7, fp, pc}
   14908:	ldrb	r2, [r1, #72]	; 0x48
   1490c:	mov	r1, r0
   14910:	cmp	r2, #14
   14914:	bhi	148fc <rb_radixtree_foreach+0xa8>
   14918:	add	r1, r2, #1
   1491c:	b	14880 <rb_radixtree_foreach+0x2c>
   14920:	cmp	r3, #0
   14924:	beq	1493c <rb_radixtree_foreach+0xe8>
   14928:	ldr	r1, [r0, #4]
   1492c:	ldr	r0, [r0, #8]
   14930:	mov	r2, r4
   14934:	pop	{r4, r5, r6, r7, fp, lr}
   14938:	bx	r3
   1493c:	pop	{r4, r5, r6, r7, fp, pc}

00014940 <rb_radixtree_search>:
   14940:	push	{r4, r5, r6, r7, fp, lr}
   14944:	add	fp, sp, #16
   14948:	ldr	r5, [r0, #4]
   1494c:	mov	r0, #0
   14950:	cmp	r5, #0
   14954:	beq	14a30 <rb_radixtree_search+0xf0>
   14958:	mov	r3, r1
   1495c:	ldr	r1, [r5]
   14960:	mov	r4, r2
   14964:	cmn	r1, #1
   14968:	beq	14a14 <rb_radixtree_search+0xd4>
   1496c:	mov	r6, #0
   14970:	b	149d4 <rb_radixtree_search+0x94>
   14974:	cmp	r3, #0
   14978:	beq	1499c <rb_radixtree_search+0x5c>
   1497c:	ldr	r1, [r0, #4]
   14980:	ldr	r0, [r0, #8]
   14984:	mov	r2, r4
   14988:	mov	r7, r3
   1498c:	blx	r3
   14990:	cmp	r0, #0
   14994:	mov	r3, r7
   14998:	popne	{r4, r5, r6, r7, fp, pc}
   1499c:	sub	r0, r6, #1
   149a0:	cmp	r0, #15
   149a4:	blt	149d4 <rb_radixtree_search+0x94>
   149a8:	ldr	r0, [r5, #68]	; 0x44
   149ac:	ldrb	r6, [r5, #72]	; 0x48
   149b0:	cmp	r0, #0
   149b4:	beq	149d0 <rb_radixtree_search+0x90>
   149b8:	cmp	r6, #14
   149bc:	mov	r5, r0
   149c0:	bhi	149a8 <rb_radixtree_search+0x68>
   149c4:	add	r6, r6, #1
   149c8:	mov	r5, r0
   149cc:	b	149d4 <rb_radixtree_search+0x94>
   149d0:	mov	r5, #0
   149d4:	mov	r1, r6
   149d8:	add	r0, r5, r1, lsl #2
   149dc:	add	r6, r1, #1
   149e0:	cmp	r1, #14
   149e4:	ldr	r0, [r0, #4]
   149e8:	bgt	149f8 <rb_radixtree_search+0xb8>
   149ec:	cmp	r0, #0
   149f0:	mov	r1, r6
   149f4:	beq	149d8 <rb_radixtree_search+0x98>
   149f8:	cmp	r0, #0
   149fc:	beq	1499c <rb_radixtree_search+0x5c>
   14a00:	ldr	r1, [r0]
   14a04:	cmn	r1, #1
   14a08:	beq	14974 <rb_radixtree_search+0x34>
   14a0c:	mov	r5, r0
   14a10:	b	1496c <rb_radixtree_search+0x2c>
   14a14:	cmp	r3, #0
   14a18:	beq	14a30 <rb_radixtree_search+0xf0>
   14a1c:	ldr	r1, [r5, #4]
   14a20:	ldr	r0, [r5, #8]
   14a24:	mov	r2, r4
   14a28:	pop	{r4, r5, r6, r7, fp, lr}
   14a2c:	bx	r3
   14a30:	pop	{r4, r5, r6, r7, fp, pc}

00014a34 <rb_radixtree_elem_find>:
   14a34:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14a38:	add	fp, sp, #28
   14a3c:	sub	sp, sp, #260	; 0x104
   14a40:	mov	sl, r0
   14a44:	mov	r0, r1
   14a48:	mov	r8, r2
   14a4c:	mov	r4, r1
   14a50:	bl	50f0 <strlen@plt>
   14a54:	mov	r5, r0
   14a58:	ldr	r0, [sl]
   14a5c:	mov	r6, #0
   14a60:	cmp	r0, #0
   14a64:	beq	14aa0 <rb_radixtree_elem_find+0x6c>
   14a68:	cmp	r5, #256	; 0x100
   14a6c:	blt	14aa8 <rb_radixtree_elem_find+0x74>
   14a70:	add	r0, r5, #1
   14a74:	bl	52ac <malloc@plt>
   14a78:	cmp	r0, #0
   14a7c:	beq	14b5c <rb_radixtree_elem_find+0x128>
   14a80:	mov	r1, r4
   14a84:	mov	r7, r0
   14a88:	bl	5198 <strcpy@plt>
   14a8c:	ldr	r1, [sl]
   14a90:	mov	r0, r7
   14a94:	blx	r1
   14a98:	mov	r9, r7
   14a9c:	b	14acc <rb_radixtree_elem_find+0x98>
   14aa0:	mov	r7, r4
   14aa4:	b	14ac8 <rb_radixtree_elem_find+0x94>
   14aa8:	mov	r7, sp
   14aac:	mov	r1, r4
   14ab0:	mov	r2, #256	; 0x100
   14ab4:	mov	r0, r7
   14ab8:	bl	4fc4 <rb_strlcpy@plt>
   14abc:	ldr	r1, [sl]
   14ac0:	mov	r0, r7
   14ac4:	blx	r1
   14ac8:	mov	r9, #0
   14acc:	ldr	r4, [sl, #4]
   14ad0:	cmp	r4, #0
   14ad4:	beq	14b40 <rb_radixtree_elem_find+0x10c>
   14ad8:	mov	ip, #4
   14adc:	mov	r1, #15
   14ae0:	mov	r6, #0
   14ae4:	ldr	r2, [r4]
   14ae8:	cmn	r2, #1
   14aec:	beq	14b20 <rb_radixtree_elem_find+0xec>
   14af0:	add	r3, r2, r2, lsr #31
   14af4:	mov	r0, #0
   14af8:	cmp	r5, r3, asr #1
   14afc:	asrgt	r0, r3, #1
   14b00:	bicgt	r2, ip, r2, lsl #2
   14b04:	ldrbgt	r0, [r7, r0]
   14b08:	andgt	r0, r1, r0, lsr r2
   14b0c:	add	r0, r4, r0, lsl #2
   14b10:	ldr	r4, [r0, #4]
   14b14:	cmp	r4, #0
   14b18:	bne	14ae4 <rb_radixtree_elem_find+0xb0>
   14b1c:	b	14b40 <rb_radixtree_elem_find+0x10c>
   14b20:	cmp	r8, #0
   14b24:	bne	14b3c <rb_radixtree_elem_find+0x108>
   14b28:	ldr	r0, [r4, #8]
   14b2c:	mov	r1, r7
   14b30:	bl	55dc <strcmp@plt>
   14b34:	cmp	r0, #0
   14b38:	movne	r4, #0
   14b3c:	mov	r6, r4
   14b40:	cmp	r9, #0
   14b44:	beq	14b50 <rb_radixtree_elem_find+0x11c>
   14b48:	mov	r0, r9
   14b4c:	bl	500c <free@plt>
   14b50:	mov	r0, r6
   14b54:	sub	sp, fp, #28
   14b58:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14b5c:	bl	5288 <rb_outofmemory@plt>

00014b60 <rb_radixtree_foreach_start_from>:
   14b60:	push	{r4, r5, fp, lr}
   14b64:	add	fp, sp, #8
   14b68:	mov	r4, r1
   14b6c:	mov	r5, r0
   14b70:	cmp	r2, #0
   14b74:	beq	14ba4 <rb_radixtree_foreach_start_from+0x44>
   14b78:	mov	r0, #0
   14b7c:	mov	r1, r2
   14b80:	mov	r2, #1
   14b84:	str	r0, [r4, #8]
   14b88:	mov	r0, r5
   14b8c:	bl	5468 <rb_radixtree_elem_find@plt>
   14b90:	str	r0, [r4, #12]
   14b94:	mov	r0, r5
   14b98:	mov	r1, r4
   14b9c:	pop	{r4, r5, fp, lr}
   14ba0:	b	14770 <rb_radixtree_foreach_next>
   14ba4:	mov	r0, r5
   14ba8:	mov	r1, r4
   14bac:	pop	{r4, r5, fp, lr}
   14bb0:	b	146b0 <rb_radixtree_foreach_start>

00014bb4 <rb_radixtree_elem_add>:
   14bb4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14bb8:	add	fp, sp, #28
   14bbc:	sub	sp, sp, #28
   14bc0:	mov	r7, r0
   14bc4:	mov	r0, r1
   14bc8:	mov	r8, r2
   14bcc:	mov	r5, r1
   14bd0:	bl	50f0 <strlen@plt>
   14bd4:	mov	r6, r0
   14bd8:	add	r0, r0, #1
   14bdc:	bl	52ac <malloc@plt>
   14be0:	cmp	r0, #0
   14be4:	beq	14f24 <rb_radixtree_elem_add+0x370>
   14be8:	mov	r1, r5
   14bec:	mov	r9, r0
   14bf0:	bl	5198 <strcpy@plt>
   14bf4:	ldr	r1, [r7]
   14bf8:	cmp	r1, #0
   14bfc:	beq	14c08 <rb_radixtree_elem_add+0x54>
   14c00:	mov	r0, r9
   14c04:	blx	r1
   14c08:	mov	r5, r7
   14c0c:	ldr	r4, [r5, #4]!
   14c10:	cmp	r4, #0
   14c14:	beq	14c7c <rb_radixtree_elem_add+0xc8>
   14c18:	ldr	r2, [r4]
   14c1c:	str	r7, [sp, #24]
   14c20:	str	r8, [sp, #20]
   14c24:	str	r4, [sp, #16]
   14c28:	cmn	r2, #1
   14c2c:	beq	14cb4 <rb_radixtree_elem_add+0x100>
   14c30:	mov	r0, #4
   14c34:	mov	r1, #15
   14c38:	mov	r7, r4
   14c3c:	add	r3, r2, r2, lsr #31
   14c40:	mov	sl, #0
   14c44:	mov	r8, r7
   14c48:	cmp	r6, r3, asr #1
   14c4c:	asrgt	r3, r3, #1
   14c50:	bicgt	r2, r0, r2, lsl #2
   14c54:	ldrbgt	r3, [r9, r3]
   14c58:	andgt	sl, r1, r3, lsr r2
   14c5c:	add	r2, r8, sl, lsl #2
   14c60:	ldr	r7, [r2, #4]
   14c64:	cmp	r7, #0
   14c68:	beq	14ce4 <rb_radixtree_elem_add+0x130>
   14c6c:	ldr	r2, [r7]
   14c70:	cmn	r2, #1
   14c74:	bne	14c3c <rb_radixtree_elem_add+0x88>
   14c78:	b	14cc0 <rb_radixtree_elem_add+0x10c>
   14c7c:	mov	r0, #1
   14c80:	mov	r1, #20
   14c84:	bl	4f10 <calloc@plt>
   14c88:	cmp	r0, #0
   14c8c:	beq	14f24 <rb_radixtree_elem_add+0x370>
   14c90:	mvn	r1, #0
   14c94:	str	r0, [r7, #4]
   14c98:	stm	r0, {r1, r8, r9}
   14c9c:	mov	r1, #18
   14ca0:	strb	r1, [r0, #16]
   14ca4:	ldr	r1, [r7, #8]
   14ca8:	add	r1, r1, #1
   14cac:	str	r1, [r7, #8]
   14cb0:	b	14f1c <rb_radixtree_elem_add+0x368>
   14cb4:	mov	r8, #0
   14cb8:	mov	sl, #18
   14cbc:	mov	r7, r4
   14cc0:	ldr	r0, [r7, #8]
   14cc4:	mov	r1, r9
   14cc8:	bl	55dc <strcmp@plt>
   14ccc:	cmp	r0, #0
   14cd0:	bne	14d24 <rb_radixtree_elem_add+0x170>
   14cd4:	mov	r0, r9
   14cd8:	bl	500c <free@plt>
   14cdc:	mov	r0, #0
   14ce0:	b	14f1c <rb_radixtree_elem_add+0x368>
   14ce4:	ldr	r0, [r8]
   14ce8:	mov	r7, r8
   14cec:	b	14d1c <rb_radixtree_elem_add+0x168>
   14cf0:	mov	r0, r7
   14cf4:	mov	r1, #0
   14cf8:	add	r2, r0, r1, lsl #2
   14cfc:	ldr	r7, [r2, #4]
   14d00:	cmp	r7, #0
   14d04:	bne	14d18 <rb_radixtree_elem_add+0x164>
   14d08:	add	r1, r1, #1
   14d0c:	cmp	r1, #15
   14d10:	bls	14cf8 <rb_radixtree_elem_add+0x144>
   14d14:	mov	r7, r0
   14d18:	ldr	r0, [r7]
   14d1c:	cmn	r0, #1
   14d20:	bne	14cf0 <rb_radixtree_elem_add+0x13c>
   14d24:	ldr	r0, [r7, #8]
   14d28:	str	r5, [sp, #4]
   14d2c:	mvn	r5, #0
   14d30:	mov	r1, #0
   14d34:	mov	r2, #4
   14d38:	mov	r3, #15
   14d3c:	add	r5, r5, #1
   14d40:	ldrb	r6, [r9, r5, lsr #1]
   14d44:	ldrb	r4, [r0, r5, lsr #1]
   14d48:	eor	r4, r4, r6
   14d4c:	bic	r6, r2, r1
   14d50:	add	r1, r1, #4
   14d54:	tst	r4, r3, lsl r6
   14d58:	beq	14d3c <rb_radixtree_elem_add+0x188>
   14d5c:	lsr	ip, r5, #1
   14d60:	mov	r2, #1
   14d64:	cmp	r8, #0
   14d68:	beq	14db0 <rb_radixtree_elem_add+0x1fc>
   14d6c:	ldr	r0, [r8]
   14d70:	cmp	r0, r5
   14d74:	ble	14d98 <rb_radixtree_elem_add+0x1e4>
   14d78:	mov	r1, r8
   14d7c:	ldr	r8, [r8, #68]	; 0x44
   14d80:	cmp	r8, #0
   14d84:	beq	14dac <rb_radixtree_elem_add+0x1f8>
   14d88:	ldr	r0, [r8]
   14d8c:	cmp	r0, r5
   14d90:	bgt	14d78 <rb_radixtree_elem_add+0x1c4>
   14d94:	ldrb	sl, [r1, #72]	; 0x48
   14d98:	mov	r2, #0
   14d9c:	cmp	r0, r5
   14da0:	mov	r4, r8
   14da4:	blt	14db4 <rb_radixtree_elem_add+0x200>
   14da8:	b	14eb4 <rb_radixtree_elem_add+0x300>
   14dac:	ldrb	sl, [r1, #72]	; 0x48
   14db0:	mov	r8, #0
   14db4:	mov	r0, #1
   14db8:	mov	r1, #76	; 0x4c
   14dbc:	str	r2, [sp, #8]
   14dc0:	str	ip, [sp, #12]
   14dc4:	bl	4f10 <calloc@plt>
   14dc8:	cmp	r0, #0
   14dcc:	beq	14f24 <rb_radixtree_elem_add+0x370>
   14dd0:	mov	r4, r0
   14dd4:	str	r8, [r0, #68]	; 0x44
   14dd8:	str	r5, [r0]
   14ddc:	strb	sl, [r0, #72]	; 0x48
   14de0:	vmov.i32	q8, #0	; 0x00000000
   14de4:	add	r0, r0, #52	; 0x34
   14de8:	ldr	r3, [sp, #16]
   14dec:	ldr	ip, [sp, #12]
   14df0:	vst1.32	{d16-d17}, [r0]
   14df4:	add	r0, r4, #36	; 0x24
   14df8:	add	r1, r4, #4
   14dfc:	vst1.32	{d16-d17}, [r0]
   14e00:	add	r0, r4, #20
   14e04:	vst1.32	{d16-d17}, [r1]
   14e08:	vst1.32	{d16-d17}, [r0]
   14e0c:	ldr	r0, [sp, #8]
   14e10:	cmp	r0, #0
   14e14:	beq	14e44 <rb_radixtree_elem_add+0x290>
   14e18:	ldr	r0, [r7, #8]
   14e1c:	ldrb	r2, [r0, ip]
   14e20:	mov	r0, #15
   14e24:	and	r2, r0, r2, lsr r6
   14e28:	str	r3, [r1, r2, lsl #2]
   14e2c:	ldr	r1, [r3]
   14e30:	cmn	r1, #1
   14e34:	beq	14e8c <rb_radixtree_elem_add+0x2d8>
   14e38:	str	r4, [r3, #68]	; 0x44
   14e3c:	ldr	r5, [sp, #4]
   14e40:	b	14e74 <rb_radixtree_elem_add+0x2c0>
   14e44:	ldr	r0, [r7, #8]
   14e48:	add	r5, r8, sl, lsl #2
   14e4c:	ldr	r3, [r5, #4]!
   14e50:	ldrb	r2, [r0, ip]
   14e54:	mov	r0, #15
   14e58:	and	r2, r0, r2, lsr r6
   14e5c:	str	r3, [r1, r2, lsl #2]
   14e60:	ldr	r1, [r5]
   14e64:	ldr	r2, [r1]
   14e68:	cmn	r2, #1
   14e6c:	beq	14e98 <rb_radixtree_elem_add+0x2e4>
   14e70:	str	r4, [r1, #68]	; 0x44
   14e74:	ldr	r1, [r7, #8]
   14e78:	ldrb	r1, [r1, ip]
   14e7c:	and	r0, r0, r1, lsr r6
   14e80:	ldr	r1, [r5]
   14e84:	strb	r0, [r1, #72]	; 0x48
   14e88:	b	14eb0 <rb_radixtree_elem_add+0x2fc>
   14e8c:	str	r4, [r3, #12]
   14e90:	ldr	r5, [sp, #4]
   14e94:	b	14e9c <rb_radixtree_elem_add+0x2e8>
   14e98:	str	r4, [r1, #12]
   14e9c:	ldr	r1, [r7, #8]
   14ea0:	ldrb	r1, [r1, ip]
   14ea4:	and	r0, r0, r1, lsr r6
   14ea8:	ldr	r1, [r5]
   14eac:	strb	r0, [r1, #16]
   14eb0:	str	r4, [r5]
   14eb4:	ldrb	r5, [r9, ip]
   14eb8:	mov	r0, #1
   14ebc:	mov	r1, #20
   14ec0:	bl	4f10 <calloc@plt>
   14ec4:	cmp	r0, #0
   14ec8:	beq	14f24 <rb_radixtree_elem_add+0x370>
   14ecc:	mov	r1, #15
   14ed0:	mvn	r3, #0
   14ed4:	and	r1, r1, r5, lsr r6
   14ed8:	add	r2, r4, r1, lsl #2
   14edc:	str	r0, [r2, #4]!
   14ee0:	str	r3, [r0]
   14ee4:	ldr	r0, [r2]
   14ee8:	ldr	r3, [sp, #20]
   14eec:	str	r3, [r0, #4]
   14ef0:	ldr	r0, [r2]
   14ef4:	str	r9, [r0, #8]
   14ef8:	ldr	r0, [r2]
   14efc:	str	r4, [r0, #12]
   14f00:	ldr	r0, [r2]
   14f04:	strb	r1, [r0, #16]
   14f08:	ldr	r1, [sp, #24]
   14f0c:	ldr	r0, [r1, #8]
   14f10:	add	r0, r0, #1
   14f14:	str	r0, [r1, #8]
   14f18:	ldr	r0, [r2]
   14f1c:	sub	sp, fp, #28
   14f20:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14f24:	bl	5288 <rb_outofmemory@plt>

00014f28 <rb_radixtree_add>:
   14f28:	push	{fp, lr}
   14f2c:	mov	fp, sp
   14f30:	bl	5030 <rb_radixtree_elem_add@plt>
   14f34:	cmp	r0, #0
   14f38:	movwne	r0, #1
   14f3c:	pop	{fp, pc}

00014f40 <rb_radixtree_elem_delete>:
   14f40:	push	{r4, r5, r6, r7, fp, lr}
   14f44:	add	fp, sp, #16
   14f48:	mov	r4, r0
   14f4c:	ldr	r0, [r1, #8]
   14f50:	ldr	r5, [r1, #12]
   14f54:	ldrb	r7, [r1, #16]
   14f58:	mov	r6, r1
   14f5c:	cmp	r0, #0
   14f60:	beq	14f68 <rb_radixtree_elem_delete+0x28>
   14f64:	bl	500c <free@plt>
   14f68:	mov	r0, r6
   14f6c:	bl	500c <free@plt>
   14f70:	cmp	r5, #0
   14f74:	beq	14ff0 <rb_radixtree_elem_delete+0xb0>
   14f78:	add	r1, r5, #4
   14f7c:	mov	r2, #0
   14f80:	mvn	r0, #0
   14f84:	str	r2, [r1, r7, lsl #2]
   14f88:	ldr	r7, [r1, r2, lsl #2]
   14f8c:	mov	r3, r2
   14f90:	cmn	r0, #1
   14f94:	add	r2, r2, #1
   14f98:	mvnne	r3, #1
   14f9c:	cmp	r7, #0
   14fa0:	movne	r0, r3
   14fa4:	cmp	r2, #16
   14fa8:	bne	14f88 <rb_radixtree_elem_delete+0x48>
   14fac:	cmp	r0, #0
   14fb0:	blt	15010 <rb_radixtree_elem_delete+0xd0>
   14fb4:	ldr	r2, [r5, #68]	; 0x44
   14fb8:	ldrb	r1, [r5, #72]	; 0x48
   14fbc:	add	r0, r5, r0, lsl #2
   14fc0:	ldr	r0, [r0, #4]
   14fc4:	add	r3, r2, r1, lsl #2
   14fc8:	cmp	r2, #0
   14fcc:	add	r3, r3, #4
   14fd0:	addeq	r3, r4, #4
   14fd4:	str	r0, [r3]
   14fd8:	ldr	r3, [r0]
   14fdc:	cmn	r3, #1
   14fe0:	beq	14ffc <rb_radixtree_elem_delete+0xbc>
   14fe4:	str	r2, [r0, #68]	; 0x44
   14fe8:	add	r0, r0, #72	; 0x48
   14fec:	b	15004 <rb_radixtree_elem_delete+0xc4>
   14ff0:	mov	r0, #0
   14ff4:	str	r0, [r4, #4]
   14ff8:	b	15010 <rb_radixtree_elem_delete+0xd0>
   14ffc:	str	r2, [r0, #12]
   15000:	add	r0, r0, #16
   15004:	strb	r1, [r0]
   15008:	mov	r0, r5
   1500c:	bl	500c <free@plt>
   15010:	ldr	r0, [r4, #8]
   15014:	subs	r0, r0, #1
   15018:	str	r0, [r4, #8]
   1501c:	moveq	r0, #0
   15020:	streq	r0, [r4, #4]
   15024:	pop	{r4, r5, r6, r7, fp, pc}

00015028 <rb_radixtree_retrieve>:
   15028:	push	{r4, sl, fp, lr}
   1502c:	add	fp, sp, #8
   15030:	mov	r2, #0
   15034:	mov	r4, #0
   15038:	bl	5468 <rb_radixtree_elem_find@plt>
   1503c:	cmp	r0, #0
   15040:	ldrne	r4, [r0, #4]
   15044:	mov	r0, r4
   15048:	pop	{r4, sl, fp, pc}

0001504c <rb_radixtree_elem_get_key>:
   1504c:	ldr	r0, [r0, #8]
   15050:	bx	lr

00015054 <rb_radixtree_elem_set_data>:
   15054:	str	r1, [r0, #4]
   15058:	bx	lr

0001505c <rb_radixtree_elem_get_data>:
   1505c:	ldr	r0, [r0, #4]
   15060:	bx	lr

00015064 <rb_radixtree_size>:
   15064:	ldr	r0, [r0, #8]
   15068:	bx	lr

0001506c <rb_radixtree_stats>:
   1506c:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   15070:	add	fp, sp, #24
   15074:	sub	sp, sp, #280	; 0x118
   15078:	mov	r6, r0
   1507c:	mov	r0, #0
   15080:	mov	r5, r2
   15084:	mov	r7, r1
   15088:	str	r0, [sp, #20]
   1508c:	ldr	r0, [r6, #8]
   15090:	cmp	r0, #0
   15094:	beq	150e4 <rb_radixtree_stats+0x78>
   15098:	ldr	r0, [r6, #4]
   1509c:	add	r2, sp, #20
   150a0:	mov	r1, #0
   150a4:	bl	15148 <stats_recurse>
   150a8:	ldr	r1, [r6, #8]
   150ac:	ldr	r3, [r6, #12]
   150b0:	ldr	r2, [sp, #20]
   150b4:	ldr	r6, [pc, #120]	; 15134 <rb_radixtree_stats+0xc8>
   150b8:	str	r0, [sp, #8]
   150bc:	udiv	r4, r0, r1
   150c0:	add	r6, pc, r6
   150c4:	str	r1, [sp, #4]
   150c8:	str	r2, [sp, #16]
   150cc:	add	r0, sp, #24
   150d0:	str	r6, [sp]
   150d4:	str	r4, [sp, #12]
   150d8:	ldr	r2, [pc, #88]	; 15138 <rb_radixtree_stats+0xcc>
   150dc:	add	r2, pc, r2
   150e0:	b	15118 <rb_radixtree_stats+0xac>
   150e4:	ldr	r3, [r6, #12]
   150e8:	ldr	r0, [pc, #76]	; 1513c <rb_radixtree_stats+0xd0>
   150ec:	ldr	r1, [pc, #76]	; 15140 <rb_radixtree_stats+0xd4>
   150f0:	add	r0, pc, r0
   150f4:	add	r1, pc, r1
   150f8:	str	r1, [sp]
   150fc:	str	r0, [sp, #4]
   15100:	str	r0, [sp, #8]
   15104:	str	r0, [sp, #12]
   15108:	str	r0, [sp, #16]
   1510c:	add	r0, sp, #24
   15110:	ldr	r2, [pc, #44]	; 15144 <rb_radixtree_stats+0xd8>
   15114:	add	r2, pc, r2
   15118:	mov	r1, #256	; 0x100
   1511c:	bl	54a4 <snprintf@plt>
   15120:	add	r0, sp, #24
   15124:	mov	r1, r5
   15128:	blx	r7
   1512c:	sub	sp, fp, #24
   15130:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   15134:	.word	0x00001bd9
   15138:	.word	0x00001b70
   1513c:	.word	0x00000d57
   15140:	.word	0x00001ba5
   15144:	.word	0x00001b61

00015148 <stats_recurse>:
   15148:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1514c:	add	fp, sp, #24
   15150:	mov	r4, r1
   15154:	ldr	r1, [r2]
   15158:	mov	r8, r2
   1515c:	cmp	r1, r4
   15160:	strlt	r4, [r8]
   15164:	ldr	r1, [r0]
   15168:	cmn	r1, #1
   1516c:	beq	151a8 <stats_recurse+0x60>
   15170:	add	r6, r4, #1
   15174:	add	r7, r0, #4
   15178:	mov	r5, #0
   1517c:	mov	r4, #0
   15180:	ldr	r0, [r7, r5, lsl #2]
   15184:	cmp	r0, #0
   15188:	beq	1519c <stats_recurse+0x54>
   1518c:	mov	r1, r6
   15190:	mov	r2, r8
   15194:	bl	15148 <stats_recurse>
   15198:	add	r4, r0, r4
   1519c:	add	r5, r5, #1
   151a0:	cmp	r5, #16
   151a4:	bne	15180 <stats_recurse+0x38>
   151a8:	mov	r0, r4
   151ac:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}

000151b0 <rb_radixtree_stats_walk>:
   151b0:	push	{r4, r5, r6, sl, fp, lr}
   151b4:	add	fp, sp, #16
   151b8:	mov	r5, r0
   151bc:	ldr	r0, [pc, #48]	; 151f4 <rb_radixtree_stats_walk+0x44>
   151c0:	ldr	r0, [pc, r0]
   151c4:	ldr	r6, [r0]
   151c8:	cmp	r6, #0
   151cc:	popeq	{r4, r5, r6, sl, fp, pc}
   151d0:	mov	r4, r1
   151d4:	ldr	r0, [r6]
   151d8:	mov	r1, r5
   151dc:	mov	r2, r4
   151e0:	bl	4f64 <rb_radixtree_stats@plt>
   151e4:	ldr	r6, [r6, #8]
   151e8:	cmp	r6, #0
   151ec:	bne	151d4 <rb_radixtree_stats_walk+0x24>
   151f0:	pop	{r4, r5, r6, sl, fp, pc}
   151f4:	.word	0x00013214

000151f8 <__stat>:
   151f8:	mov	r2, r1
   151fc:	mov	r1, r0
   15200:	mov	r0, #3
   15204:	b	4dcc <__xstat@plt>

00015208 <__fstat>:
   15208:	mov	r2, r1
   1520c:	mov	r1, r0
   15210:	mov	r0, #3
   15214:	b	5450 <__fxstat@plt>

Disassembly of section .fini:

00015218 <_fini>:
   15218:	push	{r3, lr}
   1521c:	pop	{r3, pc}
